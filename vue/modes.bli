module modes = begin

own xiudent;

macro iudent=(owns)$;
macro tabwidth=(owns+2)$;
macro indend=(owns+3)$;
macro spacect=(owns+1)$;
macro commentpos=(owns+4)$;
macro dirtemp=(owns+5)$;

forward mylf,untabline,tabline,doend,getind,getpos;
forward docomment,toright,toleft,mycj;

bind keyequal= ((plit asciz'=') -1)<1,7>;
bind commentstring= ((plit asciz'!') -1)<1,7>;
bind keythen= ((plit asciz'then') -1)<1,7>;
bind keyend= ((plit asciz'end') -1)<1,7>;
bind keybegin= ((plit asciz 'begin')-1)<1,7>;
bind keydo=((plit asciz 'do')-1)<1,7>;
bind keyof=((plit asciz 'of')-1)<1,7>;
bind keyset=((plit asciz'set')-1)<1,7>;
bind keyelse=((plit asciz'else')-1)<1,7>;

external distbl,repcount,hend,hbot,lowend,getchxr,insertchar;
external ctrla,updatecursor,whitespace,moveback,ctrle,rubout,bfblk1;
external defdsk,muline,scrmod,combuf,comchar;
external ctrlg,filescan,horizspace,wbreak;
external ctrlf,ctrlxx,ctrln2,ctrlp2,mark,moveforward,delback;
external delforward,tabsize,metab,approc,setproc;
external initdispatch;

bind CtrlxValue=#400;
bind MetaValue=#200;

global owns[12];

Global Routine myspace = begin local cpos;

if (.hend neq .hbot) and getchxr(.lowend) neq "?M" then return;
ctrla();	!get back
cpos_1;
while 1 do begin	!get over the line
	if .hend eql .hbot then exitloop;
	if getchxr(.lowend) eql "?M" then exitloop;
	cpos_updatecursor(getchxr(.lowend),.cpos);
	moveforward(1)
	end;

if .cpos leq .iudent then return;
while (.lowend gtr 1) and (getchxr(.lowend-1) eql " ") do delback();
while 1 do begin
	if .lowend eql 1 then exitloop;
	cpos_getchxr(.lowend-1);
	if whitespace(.cpos) then exitloop;
	moveback(1)
	end;

while (.lowend gtr 1) and (getchxr(.lowend-1) eql " ") do delback();
insertchar("?M");
ctrle();	!skip over what we have

end;

Global Routine text = begin local tp;
	approc("?M",myspace);		! Myret == Myspace
	approc(" ",myspace);
	setproc("?J",mycj);
	end;


Global Routine Bliss = begin
	setproc("?J",mylf);
	distbl[MetaValue+"1"]_docomment;
	end;
Global Routine docomment = begin local temp,goal;
    temp_getpos();
    ctrle();		!move to the end
    goal_.commentpos;			       !the goal place to go.
    while .temp gtr .goal do goal_.goal + .tabwidth;
    while 1 do begin
	if .goal leq .temp then exitloop;
	if .goal-.temp lss .tabsize then begin
	    insertchar(" ");
	    temp_.temp+1;
	end
	else begin
	    insertchar("?I");
	    temp_updatecursor("?I",.temp);
	end;
    end;
    insertchar("!");
end;

Global Routine getpos = begin
    local temp;
    ctrla();
    temp_1;
    while 1 do begin
	if .hbot eql .hend then return .temp;
	if getchxr(.lowend) eql "?M" then return .temp;
	if getchxr(.lowend) eql "?L" then return .temp;
	temp_updatecursor(getchxr(.lowend),.temp);
	ctrlf()
    end;
end;
Global Routine MetaBS = begin
    local temp;

    ctrle();
    temp_getpos();		       !the position of the cr.
    while .temp lss .repcount do begin
	insertchar(" ");
	temp_.temp+1;
    end;
    repcount_1;			       !we are done now.
end;
Global Routine untabline = begin
	getind();
	ctrla();
	spacect_.spacect-.tabwidth;
	while horizspace(getchxr(.lowend)) and .hbot neq .hend do
		delforward();
	doend();
	ctrle()
	end;

Global Routine tabline = begin
	getind();
	ctrla();
	spacect_.spacect+.tabwidth;
	while horizspace(getchxr(.lowend)) and .hbot neq .hend do
		delforward();
	doend();
	ctrle()
	end;


Global Routine allwhite = begin local tc;
    ctrla();
    while 1 do begin
	if .hend eql .hbot then return 1;
	tc_getchxr(.lowend);
	if .tc eql "?M" then return 1;
	if .tc eql "?L" then return 1;
	if not whitespace(.tc) then return 0;
	ctrlf();
    end;
end;


Global Routine stringp (astring,wordp) = begin local tc,tp,cpos;
	if .wordp and not wbreak(getchxr(.lowend-1)) and .lowend neq 1 then
		return 0; !if it is a trailer of a word.
	cpos_.lowend;	!first char
	tp_.astring;
	while 1 do begin
		tc_scani(tp);
		if .tc eql 0 then exitloop;
		if getchxr(.cpos) neq .tc then return 0;
		cpos_.cpos+1;
		end;
	if (.wordp and not wbreak(getchxr(.cpos)))
	    and .cpos-.lowend neq .hbot-.hend
		then return 0;
	return 1
	end;

! This routine is used to decide if a keyword is on a line anywhere
! before the comment field.

Global Routine linep (keyword)= begin local tp,cc;
	tp_.keyword;
	ctrla();	!get to the left margin
	cc_getchxr(.lowend);
	if .hend eql .hbot or .cc eql "?M" or .cc eql "?L" then return 0;
	while 1 do begin	!do the check for the whole line
		if stringp(.tp,1) then return 1;
		if stringp(commentstring,0) then return 0;
		if .hend eql .hbot then return 0;
		if getchxr(.lowend) eql "?M" then return 0;
		if getchxr(.lowend) eql "?L" then return 0;
		ctrlf();
		end;
	end;

! This routine is used to test if the LAST keyword on a line
! is the magic keyword being searched for.
Global Routine elinep (keyword) = begin local nblank,tp,cc;
	tp_.keyword;
	nblank_0;
	ctrla();
	cc_getchxr(.lowend);
	if .hend eql .hbot or .cc eql "?M" or .cc eql "?L" then return 0;
	while 1 do begin
		if stringp(commentstring,0) then exitloop;
		if .hend eql .hbot then exitloop;
		if getchxr(.lowend) eql "?M" then exitloop;
		if getchxr(.lowend) eql "?L" then exitloop;
		if not wbreak(getchxr(.lowend)) then nblank_1;
		ctrlf()
		end;
	if .nblank then metab();
	if stringp(.tp,1) then return 1;
	end;

Global Routine getind  = begin
ctrla();		!get back to the beginning
spacect_0;
while getchxr(.lowend) eql "?I" do begin
	if .hend eql .hbot then exitloop;
	spacect_.spacect+.tabsize;
	moveforward(1)
	end;
while getchxr(.lowend) eql " " do begin
	if .hend eql .hbot then exitloop;
	spacect_.spacect+1;
	moveforward(1)
	end;
end;

Global Routine calcind = begin
	if .xiudent eql 1 then spacect_.spacect+.tabwidth;
	if .xiudent eql -1 then spacect_.spacect-.tabwidth;
	if .spacect lss 0 then spacect_0;
	end;

Global Routine doend  = begin
	while .spacect geq .tabsize do begin
		insertchar("?I");
		spacect_.spacect-.tabsize;
		end;
	incr i from 1 to .spacect do insertchar(" ");
	end;

Global Routine mylf  = begin local endflag,tc;
	endflag_0;
	xiudent_0;
	if allwhite() then begin
	    ctrla();
	    insertchar("?M");
	    ctrle();
	    return
	end;
	if linep(keyend) then begin
		xiudent_if .indend then -1 else 0;
		endflag_1
		end
	else if elinep(keythen) then xiudent_1
	else if elinep(keyequal) then xiudent_1
	else if elinep(keydo) then xiudent_1
	else if elinep(keyof) then xiudent_1
	else if elinep(keyset) then xiudent_1
	else if elinep(keyelse) then xiudent_1;
	ctrla();
	if .lowend neq 1 then begin
		ctrlp2();	!if there is a line, go back to it
		if elinep(keythen) then xiudent_.xiudent-1
		else if elinep(keyelse) then xiudent_.xiudent-1
		else if elinep(keyequal) then xiudent_.xiudent-1
		else if elinep(keydo) then xiudent_.xiudent-1;
		ctrln2();
		end;

	if linep(keybegin) then xiudent_1;

	if .endflag and not .indend then untabline();

	getind();	!get the indentation
	calcind();	!calculate the new indentation.
	ctrle();
	insertchar("?M");
	tc_.spacect;
	doend();		!do the indentation.
	end;

Global Routine toleft = begin
	local trep,omark;
	if .mark eql 0 then return ctrlg();
	trep_.repcount;
	repcount_1;
	ctrla();
	ctrlxx();
	ctrla();
	if .mark gtr .lowend then ctrlxx();	   !get mark less than lowend
	omark _ .mark;
	mark _ 0;
	while 1 do begin
		incr i from 1 to .trep do untabline();
		ctrlp2();		       !move back one line.
		if .lowend lss .omark then return;	 !if done.
		if .lowend eql 1 then return untabline();
	end;
end;

Global Routine toright = begin
	local trep,omark;
	if .mark eql 0 then return ctrlg();
	trep_.repcount;
	repcount_1;
	ctrla();
	ctrlxx();
	ctrla();
	if .mark gtr .lowend then ctrlxx();	   !get mark less than lowend
	omark _ .mark;
	mark _ 0;
	while 1 do begin
		incr i from 1 to .trep do tabline();
		ctrlp2();		       !move back one line.
		if .lowend lss .omark then return;	 !if done.
		if .lowend eql 1 then return tabline();
	end;
end;

Global Routine mycj = begin local tabct,timect;
! we first count up how many tabs there are
ctrla();		!get back to the beginning
timect_0;
tabct_0;
while getchxr(.lowend) eql "?I" do begin
	if .hend eql .hbot then exitloop;
	tabct_.tabct+1;
	moveforward(1)
	end;
while getchxr(.lowend) eql " " do begin
	if .hend eql .hbot then exitloop;
	timect_.timect+1;
	moveforward(1)
	end;
ctrle();	!go to the end of the line again.

insertchar("?M");	!insert a cr.
incr i from 1 to .tabct do insertchar("?I");
incr i from 1 to .timect do insertchar(" ")
end;	!

global routine metam = begin local tp,glbuffer[100],thack;
    external Toprompt,Abinit,Getstr,Errstr;
    external hitsts,flush,modblk;
!    external pascal;

    flush_0;
    ToPrompt(plit asciz 'Mode Package: ');
    tp_(glbuffer-1)<1,7>;
    getstr(.tp);
    thack_.(modblk+1);
    if not (filescan (tp,modblk)) then return ctrlg();
    if .flush then return ctrlg();
    hitsts_1;		!changed the mode line.
    return  Select .(modblk+1) of NSET
	sixbit'bliss':		bliss();
	sixbit'text':		text();
	sixbit'abbrev':		abinit();
	sixbit'init':		initdispatch();
!	sixbit'pascal':		pascal();
	Otherwise:
	    Begin
	(modblk+1)_.thack;
!	ErrStr(plit asciz'Bad mode, one of (bliss text init abbrev pascal)');
	ErrStr(plit asciz'Bad mode, one of (bliss text init abbrev)');
	    end;
    TESN;
end;

end eludom
