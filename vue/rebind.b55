module rebind = begin

bind zone1 = #2000;	       !for ^Xm commands in dispatch.
external MaxPatches,initdispatch,modblk,errstr;
external discat,distbl,patsp,readch,writeloss,writestring;
external ToPrompt,parmarray,freezone,MaxPPerFrame;
external rstk,cstk,csnum,rptr,parmarray,MaxPPerFrame;
external freestk,repcount,callchar,base,comchar,newcount;
forward getpair;

![cb] Since these are now changeable, please use external values!
external XPrefix,MetaPrefix,EscValue;
global routine approc(place,proc) = begin local oldvalue;
    !proc is the address of the procedure, place is the index where it
    !should go.

    if (MaxPatches<0,0>)*2+1 leq .patsp then begin
	errstr(plit asciz'Cons space overflow, reseting to INIT mode.');
	initdispatch();
	(modblk+1)_sixbit'INIT';
	return;
    end;

    oldvalue_.distbl[.place];	       !the value there now.
    if (.oldvalue leq -zone1) or (.oldvalue geq 0) then begin
	!cdr code fault handler.
	discat[.patsp]_.oldvalue;
	discat[.patsp+1]_0;	       !nil at the end of the list.
	distbl[.place]_-.patsp;	       !point to us.
	patsp_.patsp+2;
    end;
    discat[.patsp]_.proc;	       !the procedure.
    discat[.patsp+1]_.distbl[.place];  !the next thing to do.
    distbl[.place]_-.patsp;	       !point to us.
    patsp_.patsp+2;
end;
global routine setproc(place,proc) = begin
    distbl[.place]_.proc;
end;
global routine getpair = begin
    ! standard command rebinder.
    bind CtrlxValue=#400;
    bind MetaValue=#200;
    local tc,toff;

    toff_0;
    tc_readch();	       !get the thing.
    if .tc eql "?G" then return (errstr(plit asciz'Punt!');-1);
    writeloss(.tc);
    if .tc eql .MetaPrefix then begin
	toff_MetaValue;
	tc_readch();
	if .tc eql "?G" then return (errstr(plit asciz'Punt!');-1);
	writeloss(.tc);
    end
    else if .tc eql .XPrefix then begin
	toff_CtrlxValue;
	tc_readch();
	if .tc eql "?G" then return (errstr(plit asciz'Punt!');-1);
	writeloss(.tc);
    end;
    return .toff+.tc;
end;
global routine uctrll = begin
    ! the rebinder.
    local old,new;

    ToPrompt(plit asciz'Move from command:');
    old_getpair();
    if .old lss 0 then return;
    WriteString(plit asciz' to new command:');
    new_getpair();
    if .new lss 0 then return;
    distbl[.new]_.distbl[.old]
end;
global routine ctrlxl = begin
    !macro rebinder.
    local mname,new;

    ToPrompt(plit asciz'Macro name: ');
    mname_readch();
    if .mname geq "A" and .mname leq "Z" then mname_.mname+("a"-"A");
    if .mname lss "a" or .mname gtr "z" then begin
	errstr(plit asciz'Bad macro name.');
	return;
    end;
    writeloss(.mname);
    WriteString(plit asciz' will be typed as :');
    new_getpair();
    if .new lss 0 then return;
    distbl[.new]_-(zone1+.mname-"a");
end;
global routine setparm = begin	       !^Xright square bracket
    local pn,oldcallchar,oldrepcount,oldtp,tbp,tc;

    pn_readch();	       !read which parameter we are.
    pn_.pn-"0";			       !adjust it.
    ! First we handle the prompt stuff.
    ToPrompt(plit asciz'');
    while 1 do begin		       !get chars until altmode.
	tc_readch();
	if .tc eql .EscValue then exitloop;
	writeloss(.tc);
    end;
    rptr_.rptr-2;
    oldcallchar_.rstk[.rptr];
    oldrepcount_.rstk[.rptr+1];
    oldtp_.cstk[.csnum];
    csnum_.csnum-1;
    tbp_.freezone;		       !the first free byte in parmland.
    while 1 do begin		       !read chars from caller to EscValue
	tc_readch();
	writeloss(.tc);		       !and echo it.
	if .tc eql .EscValue then exitloop; !we are done.
	replacei(freezone,.tc);	       !plug it in.
    end;
    replacei(freezone,"?]");	       !part of the return sequence.
    replacei(freezone,"r");	       !the rest thereof.
    csnum_.csnum+1;		       !now restore I/O attachments.
    cstk[.csnum]_.oldtp;	       !in the samemanner as above.
    rstk[.rptr+1]_.oldrepcount;
    rstk[.rptr]_.oldcallchar;
    rptr_.rptr+2;

    parmarray[.csnum*MaxPPerFrame<0,0>+.pn]_.tbp; !remember the parm.
end;
global routine popio = begin
    if .csnum eql 0 then return;   !already popped to top.
    csnum_.csnum-1; !return from qregister.
    rptr_.rptr-2;
    repcount_.rstk[.rptr+1];
    callchar_.rstk[.rptr];
    base_#200;
    comchar_#143; !metac
    newcount_0;
end;

end eludom
