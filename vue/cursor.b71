module cursor = begin

machop ttcall = #051;

external physpos,physlin,tabsize,scrsze,linesz,linmax,ttytyp,ttype;
external putch,putstring,wrnum,imout,writeloss,writestring;
external inwind,modpos,scrlen,scroff,wndsiz;
external readch,flubfr,gettty,getwid,getlen;

forward home,defwindow,goxy,clearline,inversevideo;
forward clearscreen, WhiteLine;
forward vt100setregion;

global wndpea=0, baudrate=1200, echosize=3, montty=-1;

global Clines, Ccols;

Bind inf=#377777777777;

![CB @ GC] BIND these numbers to names for improved access
! Here are the numbers that are reserved for tty's
bind	superbee=  1,	! beehive superbee
	adm3a	=  2,	! adm3a
	infotn	=  3,	! infoloss
	beehive	=  4,	! beehive
	annarbor=  5,	! annarbor half soroc
	con100	=  6,	! concept 100
	hp2648	=  7,	! hp2648
	gp100	=  8,	! gp100
	dm2500	=  9,	! dm2500
	vt100	= 10,	! VT100
	tk4025	= 11,	! tek 4025
	tk4027	= 12,	! tek 4027
	hz1500	= 13,	! hazeltine 1500
	hkit19	= 14,	! hkit19 (Ansi Mode)
	dm1500	= 15,	! dm1500
	act4	= 16,	! act4
	vt52	= 17,	! VT52
	add100	= 18,	! adds 100
	info200	= 19,	! infoton 200
	tr1061	= 20,	! teleray 1061
	mime4	= 21,	! Mime 4 ??? (Act 4)
	bantam	= 22,	! Bantam ???
	hp2621	= 23,	! HP 2621

	h19	= 27,	! Heath-kit 19 (Heath mode)
	adm31	= 28,	! Adm-31
	tk4023	= 29,	! tektronix 4023
	hz2000	= 30;	! hazeltine 2000
routine padd(count) = begin
    local p;
    incr p from 1 to (.count*.baudrate)/1200 do
	if .ttytyp eql Adm31 then imout(#0) else putch(#177);
end;
global routine ttyzap = begin
    clearscreen();
    if .ttytyp eql con100 then begin
	Putstring(plit '?[4 l');
	defwindow(1,1,.Ccols,.Clines);
	physpos_1;
	physlin_1;
	goxy(1,.modpos+.echosize);
    end
    else if .ttytyp eql h19 then begin
	Putstring(plit '?[z');
    end
    else if .ttytyp eql vt100 then begin
	defwindow(1,1,.Ccols,.Clines);
    end
    else if .ttytyp eql dm2500 then Putstring(plit '?X?]');
end;
global routine delchar =
    select .ttytyp of nset
	con100:	return  Putstring(plit '?[?A');

	hkit19:	return  Putstring(plit '?[[P');
	h19:	return	Putstring(plit '?[N');

	tr1061:	return  Putstring(plit '?[Q');

	hp2621:	return  Putstring(plit '?[P');

	adm31:	return	Putstring(plit '?[W');
    tesn;
global routine inschar =
    select .ttytyp of nset
	con100:	return  (Putstring(plit '?[?P ?['); imout(0);
			 physpos_.physpos+1);

	hkit19:	return  (Putstring(plit asciz '?[[4h ?[4l');
			 physpos_.physpos+1);
	h19:	return	(Putstring(plit asciz '?[@ ?[O');
			 physpos_.physpos+1);

	tr1061:	return  Putstring(plit '?[P');

	hp2621:	return  (Putstring(plit asciz '?[Q ?[R');
			 physpos _ .physpos+1);

	Adm31:	return	Putstring(plit '?[Q');
    tesn;
global routine ttyin2 = begin
    external CSTpos, CSTclr, CSTins, CSTdel;

    modpos_.Clines-.echosize;
    linesz_.Ccols-1;
    Modpos_(case .ttytyp of set
	-1;  24;  24;  -1;  -1;		! tty, superb, adm, xxx, beehive
	-1;  24;  -1;  -1;  22;		! xxx, concep, xxx, xxx, dm2500
	24;  -1;  -1;  24;  24;		! vt100, xxx, xxx, h1500, hkit19
	22;  24;  24;  -1;  -1;		! dm1500, act4, vt52, xxx, xxx
	24;  24;  -1;  24;  -1;		! t1061, mime4, xxx, hp2621, xxx
	-1;  -1;  24;  24;  -1;		! xxx, xxx, h19, adm-31, xxx
	27;				! h2000
    tes)-.echosize;
    wndsiz[0]_.modpos;	       !init the window size.
    scrsze_.modpos;

    CSTpos _ case .ttytyp of set
	 2;   8;   4;  -1;   8;		! tty, superb, adm, xxx, beehive
	-1;   4;  -1;  -1;   3;		! xxx, concep, xxx, xxx, dm2500
	 8;  -1;  -1;   4;   8;		! vt100, xxx, xxx, h1500, hkit19
	 3;   3;   4;  -1;  -1;		! dm1500, act4, vt52, xxx, xxx
	 4;   3;  -1;   9;  -1;		! t1061, mime4, xxx, hp2621, xxx
	-1;  -1;   4;   4;  -1;		! xxx, xxx, H19, Adm-31, xxx
	 4;				! h2000
    tes;

    CSTclr _ case .ttytyp of set
	inf;   2;  80;  -1;   2;	! tty, superb, adm, xxx, beehive
	 -1;   2;  -1;  -1;   1;	! xxx, concep, xxx, xxx, dm2500
	  3;  -1;  -1;   4;   3;	! vt100, xxx, xxx, h1500, hkit19
	  1;   2;   2;  -1;  -1;	! dm1500, act4, vt52, xxx, xxx
	  2;   2;  -1;   2;  -1;	! t1061, mime4, xxx, hp2621, xxx
	 -1;  -1;   2;   2;  -1;	! xxx, xxx, H19, Adm-31, xxx
	 73;				! h2000
    tes;

    CSTins _ case .ttytyp of set
	inf;   2; inf;  -1; inf;	! tty, superb, adm, xxx, beehive
	 -1;   2;  -1;  -1;   3;	! xxx, concep, xxx, xxx, dm2500
	100;  -1;  -1;   4;   4;	! vt100, xxx, xxx, h1500, hkit19
	inf; inf; inf;  -1;  -1;	! dm1500, act4, vt52, xxx, xxx
	  4;   1;  -1;   2;  -1;	! t1061, mime4, xxx, hp2621, xxx
	 -1;  -1;   4;  80;  -1;	! xxx, xxx, H19, Adm-31, xxx
	  4;				! h2000
    tes;

    CSTdel _ case .ttytyp of set
	inf;   2; inf;  -1; inf;	! tty, superb, adm, xxx, beehive
	 -1;   2;  -1;  -1;   3;	! xxx, concep, xxx, xxx, dm2500
	100;  -1;  -1;   4;   4;	! vt100, xxx, xxx, h1500, hkit19
	inf; inf; inf;  -1;  -1;	! dm1500, act4, vt52, xxx, xxx
	  4;   1;  -1;   6;  -1;	! t1061, mime4, xxx, hp2621, xxx
	 -1;  -1;   4;  80;  -1;	! xxx, xxx, H19, Adm-31, xxx
	  4;				! h2000
    tes;

    return;
end;
global routine ttyini = begin
	Clines _ GetLen()+1;
	if .Clines eql 1 then Clines_24;   !check for .tt ps lossage

	Ccols _ GetWid();		    ! [CB] Use system's idea of width
	if .Ccols eql 0 then Ccols _ 80;    ! [CB] if none set then 80;
	if .Ccols gtr 132 then Ccols_132;   ! [CB] max with = 132

	select .ttytyp of nset
	    con100:	return  (Ccols _ GetWid();
				 wndpea_1;
				 Putstring(plit asciz '?[U?[4 f');
				 defwindow(1,1,.Ccols,.Clines));

	    vt100:	return	defwindow(1,1,.Ccols,.Clines);

	    hkit19:	return  Putstring(plit '?[<');
	    h19:	return  Putstring(plit asciz '?[[??2h');
	tesn;
end;
global routine ToPrompt(foo) =
begin
	defwindow(1,1,.linesz,.modpos+.echosize);
	goxy(1,.modpos+2);
	clearline();
	Writestring(.foo);	! Must use Writeloss;
	inwind_1
end;

global routine ToStatus =
begin
	defwindow(1,1,.linesz,.modpos+.echosize);
	goxy(1,.modpos+1);
	clearline();
	inwind_1
end;

global routine defwindow (x,y,c,l) =
! x,y is the position to start,
! c   is the length of the window
! l   is its depth, in lines.

if .ttytyp eql con100 then begin	!concept 100 is only window supported terminal.
    physlin_.y;
    physpos_.x;
    Putstring(plit '?[v');		!define window mode.
    wrnum(.y);				!write the y position
    wrnum(.x);
    wrnum(.l+1);
    wrnum(.c+1)
end					!end the if statement
else if .ttytyp eql vt100 then		!vt100
	vt100setregion(0,.Clines)
else begin
    scroff_.y-1;
    scrlen_.l;
end;
routine vt100setregion (top,bottom) = begin
    Putstring(plit '?[[');
    if .top    gtr 1 then wrnum(.top+1);
    if .bottom gtr 1 then begin
	putch(";");
	wrnum(.bottom+1);
	end;
    putch("r");				! Set scrolling region
end;
global routine inslin (times) =
select .ttytyp of nset
    hz1500:	return  incr i from 1 to .times do begin
			putch(#176);putch(#232);padd(2)	end;
    hz2000:	return  incr i from 1 to .times do begin
			putch(#176);putch(#232);padd(2)	end;
    vt100:	return  Begin
			    Putstring(plit '?[7');	! save the cursor
			    vt100setregion(.physlin,.modpos+1);
			    Putstring(plit '?[8');	! restore cursor
			    incr i from 1 to .times do Putstring(plit '?[M');
			    vt100setregion(0,.modpos+.echosize);
			    Putstring(plit '?[8');	! restore cursor
			end;
    tr1061:	return  incr i from 1 to .times do Putstring(plit '?[L');
    adm31:	return	incr i from 1 to .times do
			(Putstring(plit '?[E');padd(16));
    superbee:	return  incr i from 1 to .times do begin local j;
			    Putstring(plit '?[L');
			    incr j from 1 to 4 do putch(13);
			end;
    dm2500:	return  incr i from 1 to .times do Putstring(plit '?P?J?X');
    con100:	return  incr i from 1 to .times do
			Putstring(plit asciz '?[?R?1?1?1');
    hkit19:	return  (Putstring(plit '?[[');wrnum(.times+1);putch("L"));
    h19:	return	incr i from 1 to .times do Putstring(plit '?[L');
    mime4:	return  incr i from 1 to .times do putch("?A");
    hp2621:	return  incr i from 1 to .times do Putstring(plit '?[L');
tesn;
global routine dellin (times) =
select .ttytyp of nset
    hz1500:	return  incr i from 1 to .times do begin
			putch(#176);putch(#223);padd(2) end;
    hz2000:	return  incr i from 1 to .times do begin
			putch(#176);putch(#223);padd(2) end;
    vt100:	return  Begin
			    Putstring(plit '?[7');	! save the cursor
			    vt100setregion(.physlin,.modpos+1);
			    Putstring(plit '?[[');wrnum(.modpos+.echosize);
			    putch("H");
			    incr i from 1 to .times do putch("?J");
			    vt100setregion(0,.modpos+.echosize);
			    Putstring(plit '?[8');	! restore the cursor
			end;
    con100:	return  incr i from 1 to .times do
			Putstring(plit asciz '?[?B?1?1?1');
    tr1061:	return  incr i from 1 to .times do Putstring(plit '?[M');
    adm31:	return	incr i from 1 to .times do
			(Putstring(plit '?[R');padd(16));
    superbee:	return  incr i from 1 to .times do begin local j;
			Putstring(plit '?[M');
			incr j from 1 to 12 do putch(13);
			end;
    dm2500:	return  incr i from 1 to .times do Putstring(plit '?P?Z?X');
    hkit19:	return  (Putstring(plit '?[[');wrnum(.times+1);putch("M"));
    h19:	return	incr i from 1 to .times do Putstring(plit '?[M');
    mime4:	return  incr i from 1 to .times do putch("?W");
    hp2621:	return  incr i from 1 to .times do Putstring(plit '?[M');
tesn;
global routine clearscreen = begin
	tabsize_8;
	ttyini();
	case .ttytyp of set
		0;					!0: non-video
		putch(12);				!1: superbee
		Putstring(plit '?Z ');			!2: adm
		0;
		putch(12);				!4: beehive
		0;
		(defwindow(1,1,.Ccols,.Clines);		!6: concept
		 physpos_1;physlin_1;putch("?L"));
		0;
		0;
		Putstring(plit '?X?^');			!9: dm2500
		Putstring(plit asciz '?[[H?[[2J');	!10:vt100
		0;
		0;
		(putch(#176);putch(#234);padd(4));	!13:Hazeltine 1500
		Putstring(plit '?[[2J');		!14:heath 19
		putch("?L");				!15:dm1500
		putch("?L");				!16:act4
		Putstring(plit '?[H?[J');		!17:vt52
		0;
		0;
		putch("?L");				!20:teleray 1061
		putch("?L");				!21:mime4
		0;
		Putstring(plit '?[H?[J');		!23:HP2621
		0;
		0;
		0;
		Putstring(plit '?[E');			!27:Heath-kit 19
		(Putstring(plit '?[:');padd(8));	!28:Adm-31
		0;
		(putch(#176);putch(#234);padd(4));	!30:Hazeltine 2000
		tes;
	flubfr();
	physpos_1;
	physlin_1;
	end;
global routine leftmargin = begin
    if .ttytyp eql superbee then Putstring(plit '?M?J?[A')
    else putch(13);
    physpos_1;
end;
global routine home = begin
	case .ttytyp  of set
		0;					!0: printing terminal
		Putstring(plit '?[H');			!1: superbee
		putch("?^");				!2: adm3a
		0;
		Putstring(plit '?[H');			!4: beehive
		0;
		Putstring(plit '?[??');			!6: concept
		0;
		0;
		putch(2);				!9: dm2500
		Putstring(plit '?[[H');			!10:vt100
		0;
		0;
		Putstring(plit '~?R?1?1');			!13:Hazeltine 1500
		Putstring(plit '?[[H');			!14:heath 19
		putch(#31);				!15:dm1500
		putch("?]");				!16:act4
		Putstring(plit '?[H');			!17:vt52
		0;
		0;
		Putstring(plit '?[H');			!20:teleray 1061
		putch("?]");				!21:mime4
		0;
		Putstring(plit '?[H');			!23:HP2621
		0;
		0;
		0;
		Putstring(plit '?[H');			!27:Heath-kit 19
		putch(#36);				!28:Adm-31
		0;
		Putstring(plit '~?R?1?1');			!30:Hazeltine 2000
		tes;
	physpos_1;
	physlin_1;
	end;

global routine goxy (xloc,yloc) = begin
own x,y;

routine yxechar(ch) = begin
    putch(#33);    putch(.ch);    putch(.y+#37);    putch(.x+#37);
end;
routine xychar(ch) = begin
    putch(.ch);    putch(.x+#37);    putch(.y+#37);
end;
routine yxchar(ch) = begin
    putch(.ch);    putch(.y+#37);    putch(.x+#37);
end;

routine xynum(ch) = begin
    putch(.ch);    wrnum(.x);    wrnum(.y);
end;
routine yxnum(ch) = begin
    putch(.ch);    wrnum(.y);    wrnum(.x);
end;

routine xyenum(ch) = begin
    putch(#33);    xynum(.ch);
end;
routine yxenum(ch) = begin
    putch(#33);    yxnum(.ch);
end;

routine xyhp26xx = begin
    Putstring(plit '?[&a');
    wrnum(.y);      putch("y");
    wrnum(.x);      putch("C");
end;

routine xydm2500 = begin
    putch(#14);    putch(.x-1 xor #140);    putch(.y-1 xor #140);
end;
routine xydm1500 = begin
    putch(#36);    putch(.x+31);    putch(.y-1);
end;

routine xyvt100 = begin
    Putstring(plit '?[[');
    if .y gtr 1 then wrnum(.y+1);
    if .x gtr 1 then begin putch(";"); wrnum(.x+1); end;
    putch("H");
end;

routine xyhazeltine = begin
    Putstring(plit '~?Q');
    putch(.x-1);	!	    putch(.x);
    putch(.y-1);	!	    putch(.y);
end;

! begin real code for goxy here ****	[CB @ GC]

if .xloc eql .physpos and .yloc eql .physlin then return;
x_.xloc; y_.yloc;
case .ttytyp of set
    Putstring(plit '?M?J');	! 0: non-video
    xyenum("F");		! 1: superbee
    yxechar("=");		! 2: adm3a
	0;
    yxenum("F");		! 4: beehive
	0;
    yxenum("a");		! 6: concept 100
	0;	0;
    xydm2500();			! 9: dm2500
    xyvt100();			!10: vt100
	0;	0;
    xyhazeltine();		!13: hazeltine 1500
    xyvt100();			!14: heath-19
    xydm1500();			!15: dm1500
    yxnum("?T");		!16: act4
    yxechar("Y");		!17: vt52
	0;	0;
    yxechar("Y");		!20: teleray 1061
    yxnum("?T");		!21: mime4
	0;
    xyhp26xx();			!23: hp 2621
	0;	0;	0;
    yxechar("Y");		!27: Heath-kit 19 (Heath mode)
    yxechar("=");		!28: Adm-31
	0;
    xyhazeltine();		!30: hazeltine 2000
tes;
physlin_.y;
physpos_.x;
return;
end;
global routine clearline = begin
    case .ttytyp of set
	0;			       !0: printing
	Putstring(plit '?[K');	       !1: superbee
	begin			       !2: adm (simulated)
	    local tc;
	    tc_.physpos;		!remember where we are.
	    incr i from .tc to .linmax[.physlin] do begin
		if .i gtr .linesz then exitloop;
		putch(" ");		!adm3
		end;
	    linmax[.physlin]_.tc;	!reset this value.
	    goxy(.tc,.physlin)		!go back to where we were.
	    end;
	0;
	Putstring(plit '?[K');	       !4: beehive
	0;
	Putstring(plit '?[?S');	       !6: concept
	0;	0;
	putch(#27);		       !9: dm2500
	Putstring(plit '?[[K');	       !10:vt100
	0;	0;
	Putstring(plit '~?O?1?1');     !13:hazel
	Putstring(plit '?[[K');	       !14:heath 19
	putch(#35);		       !15: dm1500
	putch("?^");		       !16: act4
	Putstring(plit '?[K');	       !17: vt52
	0;	0;
	Putstring(plit '?[K');	       !20: t1061
	putch("?^");		       !21: mime4
	0;
	Putstring(plit '?[K');	       !23: HP2621
	0;	0;	0;
	Putstring(plit '?[K');	       !27: Heath-kit 19 (Heath mode)
	Putstring(plit '?[T');	       !28: Adm-31
	0;
	0;			       !Hazeltine 2000
    tes;
    Flubfr();
end;
global routine Asktty = begin

register savtyp;

Routine SelectTTY(Sometype) =
    Select .Sometype of nset
	sixbit'SUPERB':		superbee;	!  1
	sixbit'ADM   ':		adm3a;		!  2
	sixbit'BEEHIV':		beehive;	!  4
	sixbit'CONCEP':		con100;		!  6
	sixbit'DM2500':		dm2500;		!  9
	sixbit'VT100 ':		vt100;		! 10
	sixbit'H1500 ':		hz1500;		! 13
	sixbit'hkit19':		hkit19;		! 14
	sixbit'DM1500':		dm1500;		! 15
	sixbit'act4  ':		act4;		! 16
	sixbit'vt52  ':		vt52;		! 17
	sixbit't1061 ':		tr1061;		! 20
	sixbit'mime4 ':		mime4;		! 21
	sixbit'HP2621':		hp2621;		! 23

	sixbit'h19   ':		h19;		! 27
	sixbit'ADM31 ':		adm31;		! 28
	sixbit'H2000 ':		hz2000;		! 30
	sixbit'EXIT  ':		return 0;
	otherwise:		return 0;
    tesn;

Routine CaseTTY(TTYnumber) = 
    case .TTYnumber of set
	sixbit'PSEUDO';			! non-video	!  0
	sixbit'SUPERB';			! superbee;	!  1
	sixbit'ADM   ';			! adm3a;	!  2
	sixbit'PSEUDO';			!		!  3
	sixbit'BEEHIV';			! beehive;	!  4
	sixbit'PSEUDO';			!		!  5
	sixbit'CONCEP';			! con100;	!  6
	sixbit'PSEUDO';			!		!  7
	sixbit'PSEUDO';			!		!  8
	sixbit'DM2500';			! dm2500;	!  9
	sixbit'VT100 ';			! vt100;	! 10
	sixbit'PSEUDO';			!		! 11
	sixbit'PSEUDO';			!		! 12
	sixbit'H1500 ';			! hz1500;	! 13
	sixbit'hkit19';			! hkit19;	! 14
	sixbit'DM1500';			! dm1500;	! 15
	sixbit'act4  ';			! act4;		! 16
	sixbit'vt52  ';			! vt52;		! 17
	sixbit'PSEUDO';			!		! 18
	sixbit'PSEUDO';			!		! 19
	sixbit't1061 ';			! tr1061;	! 20
	sixbit'mime4 ';			! mime4;	! 21
	sixbit'PSEUDO';			!		! 22
	sixbit'HP2621';			! hp2621;	! 23
	sixbit'PSEUDO';			!		! 24
	sixbit'PSEUDO';			!		! 25
	sixbit'PSEUDO';			!		! 26
	sixbit'H19   ';			! h19		! 27
	sixbit'adm31 ';			! Adm-31;	! 28
	sixbit'PSEUDO';			!		! 29
	sixbit'H2000 ';			! hz2000;	! 30

    tes;

Routine Getusr = while 1 do begin
    local tp;
    ToPrompt(plit asciz 'Enter terminal type (?? for help, E for exit): ');
    tp_readch();
    if .tp geq "a" and .tp leq "z" then tp_.tp-32;	! Lower==>Upper
    if .tp eql "??" then begin
	clearscreen();
	Putstring(plit asciz'?J?M
?JTerminals are:
?J A    Adm-3A             ^A    Adm-31 (TYM 425)
?J B    Beehive             C    Concept 100
?J^E    MIMEs Act4          4    ACT-IV (the real thing)
?J H    Hazeltine 2000     ^H    Hazeltine 1500
?J K    Heath-Kit 19        9    Heath 19 (ANSI)
?J P    HP-2621 (TYM 444)
?J R    Teleray 1061        S    Superbee
?J V    VT52               ^V    VT100              
?J 1    DM-1500             2    DM-2500
?J
?J');
    end
    else select .tp of nset
	"P":	return sixbit 'HP2621';
	"K":	return sixbit 'H19   ';
	"?H":	return sixbit 'H1500 ';
	"H":	return sixbit 'H2000 ';
	"V":	return sixbit 'vt52  ';
	"?V":	return sixbit 'vt100 ';
	"C":	return sixbit 'concep';
	"?A":	return sixbit 'adm31 ';
	"A":	return sixbit 'adm   ';
	"R":	return sixbit 't1061 ';
	"B":	return sixbit 'beehiv';
	"S":	return sixbit 'superb';
	"9":	return sixbit 'hkit19';
	"1":	return sixbit 'DM1500';
	"2":	return sixbit 'dm2500';
	"4":	return sixbit 'act4  ';
	"?E":	return sixbit 'mime4 ';
	"E":	return 0;
	"?C":	return 0;
	"?G":	return 0;
	"?M":	return 0;
	"?U":	return 0;
	otherwise:  begin
	    ToStatus();
	    Writestring(plit asciz
'Please type "E" to EXIT, or type "??" for a list of terminal types.');
	end;
    tesn;
end;

If .Montty eql -1 then begin		! Upon initialization...
    Montty _ Gettty();			!   Ask the monitor for a type
    Savtyp _ SelectTTY(.Montty);	! See if it's in our table
    If .Savtyp neq 0 then begin		! (YES) - Accept it
	Ttype  _ CaseTTY(.Savtyp);	!   Set NAME to Terminal NAME
	Ttytyp _ .Savtyp;		!   Set number to gialue
	Return 1;			!   Return .TRUE.
    end;
end;
While 1 do begin
    Montty _ Getusr();			! Ask the user for a type
    Savtyp _ SelectTTY(.Montty);	! See if it's in our table
    If .Savtyp eql 0			! (NO)  - Reject it
	then Return 0			!   .False.
	else begin			! (YES) - Accept it
	    Ttype  _ CaseTTY(.Savtyp);	!   Set NAME to Terminal NAME
	    Ttytyp _ .Savtyp;		!   Set number to given value
	    Return 1;			!   Return .TRUE.
	end;
end;

end; !crocedure.

Global Routine WhiteLine = begin
    if .ttytyp eql 7 then begin
	ClearLine();
	InverseVideo();
    end
    else begin
	InverseVideo();
	ClearLine();
    end;
end;
global routine inversevideo =
select .ttytyp of nset
    hz1500:	return  (putch(#176);putch(#237));
    hz2000:	return  (putch(#176);putch(#237));
    con100:	return  Putstring(plit '?[D?[E');
!    adm31:	return	Putstring(plit '?[G4');
    vt100:	return  Putstring(plit '?[[7m');
    hkit19:	return  Putstring(plit '?[[7m');
    h19:	return	Putstring(plit '?[p');
!   tr1061:	return	Putstring(plit '?[RF');	! looks horrible
tesn;
global routine normalvideo =
select .ttytyp of nset
    hz1500:	return  (putch(#176);putch(#231));
    hz2000:	return  (putch(#176);putch(#231));
    con100:	return  Putstring(plit '?[d?[e');
!    adm31:	return	Putstring(plit '?[G0');
    vt100:	return  Putstring(plit '?[[m');
    hkit19:	return  Putstring(plit '?[[m');
    h19:	return	Putstring(plit '?[q');
!   tr1061:	return	Putstring(plit '?[R@');   ! looks horrible
tesn;

end eludom
^ L