Module	Routine(Params)			Function
------	---------------			--------
VUE	G Echord		*	Read a char & echo it or abort
	G Metalt		M-<	Move to top of file/buffer
	G Metagt		M->	Move to end of file/buffer
	G Metap			M-P	Return to editor
	G Zapmac		*	Finish up a macro?
	G Metac			M-C	Execute a macro
	G Ctrlu			C-U	Set count for an argument; .hatuvl
	G Ctrlxe		C-X C-E	Write file & Cucl() or Cclmultix()
	G Ctrlxf		C-X C-E	Write file & Quit() or Cclmultix()
	G Ctrlxr		C-X C-R	Readfile & Update core
	G Ctrlxs		C-X C-S	Save current buffer
	G Ctrlxw		C-X C-W	Write current buffer to file $
	  Commonwrite		*	Write buffer to file
	G Munchline(line,p,xit)	*	Read buffer & Return success/failure
	G Munchnnl(line,p,xit)	*	Read buffer & succeed/fail
	G Setchar(i,q)		*	Put a char (q) in buffer/file at (i)
	G Getchxr(i)		*	Get char at (i)
	G Getc(p,i)		*	Get char at (p,i)
	G Setc(p,i,c)		*	Set char (c) at (p,i)
	G Ctrlw			C-W	Wipe text to mark
	G Metcw			M-C-W	Copy text to mark
	G Ctrly			C-Y	Restore killed text
	G Delforward		*	Delete one char forward
	G Delbackward		*	Delete one char backward
	G Insertchar(i)		*	Insert a character at (i)
	G Ctrlv			C-V	Scroll screen to next page
	G Metav			M-V	Scroll screen back to previous page
	G Ctrlt			C-T	Transpose previous 2 characters
	G Ctrls			M-S	"Complete" Search Mode forward
	G Ctrlat		C-@	Set character mark
	G Horizspace(tc)	*	Return True if .tp=space or tab
	G Whitespace(tc)	*	Return True if .tp=space,tab or cr
	G Metadel		M-<del>	Delete backwards 1 word
	G Metab			M-B	Move backwards 1 word
	G Metaf			M-F	Move forward 1 word
	G Metad			M-D	Delete forward 1 word
	G Wbreak(foo)		*	True if not alphanumeric a-z 0-9
	G Ctrlxx		C-X C-X	Exchange point and mark
	G Ctrlr			M-R	"Complete" Reverse search
	G Dispatch		*	Dispatch off to character routine*
	G Reader		*	Main Editor Loop
	G Ctrlxm		C-X M	Define a macro
	G Metaw			M-W	Wipe to string [ctrls() ctrlw()]
	G Ctrla			C-A	Move to beginning of line
	G Ctrlb			C-B	Move back 1 char
	G Ctrld			C-D	Delete forward 1 character
	G Ctrle			C-E	Move to end of line
	G Ctrlf			C-F	Move forward 1 char
	G Gtrlg			C-G	Gasp! ToPrompt(Error)
	G Ctrlk			C-K	Kill text to EOL, Kill line
	  GetPos(npcol)		*	Return where will be @ end of redisp
	G Ctrln			C-N	Move cursor down 1 line (?same column)
	G Ctrln2		*	Move forward 1; return T if FF else F
	G Ctrlo			C-O	Open a line, Insert(cr) Ctrlb()
	G Ctrlp			C-P	Move up to previous line
	G Ctrlp2		*	Move back 1; see Ctrln2*
	G Ctrlq			C-Q	Insertchar(readch())
	G Rubout		<del>	Delete backwards 1 char
	G Metacn		???	??? Look at code ??? M-C-N? (NO)!
	G Metacp		???	??? Look at code ??? M-C-P? (NO)!
Module	Routine(Params)			Function
------	---------------			--------
REDISP	G Redisp(checkflag)	*	Redisplay screen if necessary
	G Writestring(foo)	*	Writeloss(ch) foreach ch in foo
	G Writeloss(foo)	*	Write character foo on the screen
	G Updatecursor(xc,xpos)	*	Write special on screen update xpos
	G Metao			M-O	Toggle screen echo of commands

XLIAD	  Cost(i,j)		*	Calculates costs per ... line?
	  Draw(i)		*	Drawing cost per ... line?
	  Merge(cstyle,comptr)	*	???
	G Caliad(argplace)	*	Calculate nhash[*] & shift screen

CALIAD	G Autoloss		*	Check & do auto-saves of buffer
	G Metarp		M-)	Find matching left paren
	G Metalp		M-(	Find matching right paren

IDC	G Idc(firstchar,line)	*	Update data @f, & on screen @line

STATUS	  Writesix(word)	*	Types sixbitz contents of address word
	G Dostat		*	Write status line information

JUST	G Pbreak(i)		*	True if i-th char at paragraph break
	G Aebreak(i)		*	True if i-th char is "@" or "."
	G Apbreak(i)		*	True if i-th char at end of par-break
	  Findbreak(i)		*	Returns (apbreak) at or before i
	  Chopline(lastbreak,inpos)	Returns new linpos after breaking line
	G Just(linwid)		*	Justify/fill from . to end of parag
	  Emptyline(i)		*	True if at C-M or C-L character
	G Metaj			M-J	Justify text (current paragraph)
	  Fwdtovis		*	Moves forward to a visible char
	  Tostartpar		*	Moves forward to start of paragraph
	  Uponepar		*	Moves back to beginning of par
	G Metalb		M-[	Move back to par break beg or end
	  Toendpar		*	Moves to end of paragraph
	  Downonepar		*	Moves to bottom of paragraph
	G Metarb		M-]	Move forward to par break beg or end
	G Ctrlz			C-Z	Scroll screen up 1 line
	G Metaz			M-Z	Scroll screen down 1 line
	G Ctrlar		C-^	Invert the case of 1 char
	G Metaar		M-^	Invert the case of 1 word
	G Metcar		M-C-^	Invert the case from point to mark
	G Metak			M-K	Kills blankspace

WINDOW	G Winit			*	Init windows & line length
	G Wset(awindow)		*	Set new window to this one.
	G Uctrlc		C-X C	Create new window @ curline
	G Ctrll			C-L	Redisplay window (change window size?)
	G Uctrlp		C-X P	Previous window
	G Uctrln		C-X N	Next window
	G Uctrld		C-X D	Delete window
	G Metalc		M-{	Go to top of SOS page
	G Metarc		M-}	Go to bottom of SOS page
	G Ctrlx2		C-X 2	Split screen into 2 windows
	G Uctrlz		C-X Z	Enlarge by scroll window down
	G Ctrlxz		C-X C-Z	Shrink by scroll window up
	G Metabang		M-!	Move this line to top of window
Module	Routine(Params)			Function
------	---------------			--------
CURSOR	  Escape(char)		*	Putch(escape) Putch(char)
	  Padd(count)		*	Decr from count to 0 Imout(del/Null)
	G Ttyzap		*	Reset terminal itself
	G Delchar *(count)	*	Delete chars on screen
	G Inschar *(count)	*	Insert space on screen
	G Ttyin2		*	Set Modpos, Linez, Wndsiz[0], Scrsze
	G Ttyini		*	Setup terminal window, Clines, Ccols
	G ToPrompt		*	Move cursor to prompt area
	G ToStatus		*	Move cursor to status area
	G Defwindow(x,y,c,l)	*	Setup window xy_startloc c,l_wid,len
	  Vt100setregion(t,b)	*	Setup window for vt100(top,bottom)
	G Inslin(times)		*	Insert (times) lines
	G Dellin(times)		*	Delete (times) lines
	G Clearscreen		*	Clear the screen
	G Leftmargin		*	Put the cursor in the left margin
	G Home			*	Position at top left corner of screen
	  Goline(n)		*	Move the cursor to line n
	G Goxy(xloc,yloc)	*	Position the cursor at xloc,yloc
	  yxechar(ch)		*	Esc ch y+40 x+40
	  xychar(ch)		*	Ch x+40 y+40
	  yxchar(ch)		*	Ch y+40 x+40
	  xynum(ch)		*	Ch wrnum(x) wrnum(y)
	  yxnum(ch)		*	Ch wrnum(y) wrnum(x)
	  xyenum(ch)		*	Esc xynum(ch)
	  yxenum(ch)		*	Esc yxnum(ch)
	  xyhp26xx		*	Esc & a wrnum(y) y wrnum(x) C
	  xydm2500		*	#14 (x xor #140) (y xor #140)
	  xydm1500		*	#36 x+40 y
	  xyvt100		*	Esc [ wrnum(y+1) ; wrnum(x+1) H
	  xyhazeltine		*	#176 #21 x y
	  xybantam		*	Esc Y x+40 esc X y+40
	G Clearline		C-K	Clear current line to EOL
	G Gettty		*	Read users ttytype
	  Askuser		*	Ask for the type ? or char
	  Termno(dummy)		*	Return the terminal number
	  Termop(fncode,trmnum)	*	Perform DEC trmop. on tty trmnum
	G Sttype		*	Return the type/get the type
	G Rstype		*	Restore the type to its former value
	G Whiteline		*	Funny Inversevidieo stuff
	G Inversevideo		*	Change screen line to inverse video *
	G Normalvideo		*	Change screen line to normal video!

BUFFER	G Bufinit		*	Init all buffers & allbufs[0]_'main'
	G Uctrlb		C-X B	Change to new buffer name $
	G Ctrlxv		C-X C-V	Visit a new file (buffer) $
	G Uctrlo		C-X C-O	Restore old buffer $
	G Combuf(autop)		*	Write/save/read/restore buffers
	G Existsbuf(bname)	*	Return 0 or index of buffer bname
	G Addbuf(bname)		*	Return 0(match) or set allbufs[new/0]
	G Ctrlxb		C-X C-B	List all buffers in use * is modified
	G Gbnum(bufname)	*	Return i of buffer named bufname
Module	Routine(Params)			Function
------	---------------			--------
TMP	G Tmpcor(nam,c,buf,len)	*	Do tmpcore code c using nam, buf, len
	G Dotmpcor(nam,c,b,len)	*	Same as tmpcoe, but uses dsk if req.
	G Tmpdsk(nam,c,buf,len)	*	Writes ###nam.TMP on dsk
	G Corecheck		*	Increase core; hend+2560 bytes

CCL	G Cclstuff		*	Look through EDT,EDS files else return
	G Cclmultix		*	Setup name! stuff for/from compil/rpg
	G Ctrlxi		C-X C-I	Insert file at point

SYMS	G Wrtnum(Outnum)	*	Create asciz string & print it
	G Getsymbol(Tableaddr)	*	Find and set symbols in the table
	G Metas			M-*	Set symbols for variables

GETSTR	G Getstring(pointer)	*	Builds long string for the editor

MLOAD	G Metal			M-L	Load a macro from the buffer

REBIND	G Approc(place,proc)	*	Applys mode change (saves changes)
	G Setproc(place,proc)	*	Sets a single procedure change
	G Getpair		*	Return a command for rebinding
	G Uctrll		C-X L	Rebind from key1 to key2
	G Ctrlxl		C-X C-L	Rebind from macro to key
	G Setparam		C-X ]	Set parameter n
	G Popio			*	Return from q-reg command
Module	Routine(Params)			Function
------	---------------			--------
MODES	G Fini			*	Set fini mode; (init) & mycj
	G Text			*	Set text mode; myret,myspace,mycj
	G Myspace		+ <sp>	Move worn to nextline if > .iudent
	G Myret			+ C-M	Do Myspace() then RET
	G Dired			*	Dired mode; ?xr/?xd_dirlist, $m_myaltm
	G Myaltm		+ M-M	Dired mode; Special Meta-M to restore
	G Dirlist		+ ?xr/d	Dired mode; Attempt to munge directory
	G Bliss			*	Set bliss mode; M-1_docomment
	G Docomment		+ M-1	Move to commentpos & !
	G Getpos		*	Return end of line position
	G MetaBS		M-\	Tab to absolute cursor position
	G Untabline		M-U	Untabify line
	G Tabline		M-I	Tabify line
	G Allwhite		*	Return 0 if non-wh found before eol
	G Stringp(astring,wordp)*	Searches for a string on the line
	G Linep(keyword)	*	Determine if string on line < comment
	G Elinep(keyword)	*	Determine if string is last on line
	G Getind		*	Find index of nextwhere to tab to/from
	G Calcind		*	Calculate next place to tab to/from
	G Doend			*	Insert Tab/space until in position
	G Mylf			+ C-J	Fancy lf routine, checks keywords
	G Toleft		+ M-C-U	Untabify lines to mark-line
	G Toright		+ M-C-I	Tabify lines to mark-line
	G Mycj			+ C-J	Normal (clean) lf command

PASCAL	  Advance(fromc,toc)	*	Move from column to column
	  Column		*	? Return column to use
	  MetaBB		M-{	Set some mode chars, begin comment
	  MetaEB		M-}	Terminate comment, change mode chars
	  Myspace		<sp>	Do Pascal-style space things
	  Myret			C-M	Do Pascal-style return things
	G Pascal		*	Set pascal mode; ?J,$U,$I,$},:
	  Untabline		M-U	Do Pascal-style untabify
	  Tabline		M-I	Do Pascal-style tabify
	  Stringp		*	Special
	  Linep			*	Special
	  Elinep		*	Special
	  Inlist		*	Special
	  Getind		*	Special
	  Calcind		*	Special
	  Doend			*	Special
	  Mycolon		+ :	Do Pascal-style colon
	  Mylf			+ C-J	Do Pascal-style lf
 
Module	Routine(Params)			Function
------	---------------			--------
TTYCOR	G Coresize(addwords)	*	Get this many more words of core
	G Relcor		*	Increase, but get value=hend/5+64+p
	G Readch(char)		*	Read a char, return it in V
	? Fromfl(char)		*	Read a char, ret in v, from a file
	? Rmacro		*	Attach a macro to readin
	G Ttyidle		*	Return whether tty is idle/waiting
	G Reset			*	Reset the world, chk TP license
	G Echof			*	Remember tty, rvx, magic NFC!NCM
	G Fixfil		*	Fixup files at end ???
	G Puntsos		*	Run SOS when no-good tty type
	G Run...		*	Run EDIT10/Editor for non TP people
	G Cucl			*	Run Compil/Rpg
	G Munchi(pointer)	*	Munch input file
	G Muncho(pointer)	*	Munch output file
	G Putch(char)		*	Output a character (into buffer)
	G Flubfr		*	Flush buffer to terminal
	G Qreg(item)		*	Return a real qreg number?
	G Dorescan		*	Rescan & do command via rsr... stuff
	G Setint		*	DEC-style trap ^C stuff
	G Setlab		*	Save stuff & set reenter addr_readr
	G Realup(lookupblock)	*	Lookup a file
	G lookop		*	Lookup file from filblk/lblk
	G Getwid		*	Get terminal width
	G Getlen		*	Get terminal length setting
	G Fen			*	Reset terminal/echo/paging...
	G Fef			*	Setup terminal for editor
	G Imout(char)		*	Output a char in image mode
	G Wrnum(number)		*	Write a number to terminal (*)
	G Jbstr(jobstrarg)	*	Do a JOBSTR uuo on argument
	G Gt20			*	Do Twenex uuo to get terminal type
	G Gt10			*	Do Tops-10 uuo to get terminal type

SPEED	G Getchx		*	Return character at point?
	G Therep(line,chrptr)	*	Find string at point, return point
	G Ftp(line,ptr)		*	Fast version of therep

AUX	G Quit			*	Fen (exit 1) Fef return
	G Moveforward(n)	C-F	Move forward n bytes
	G Movebackward(n)	C-B	Move backwards n bytes
	G Dmpin(chan,addr,size)	*	Read into a block
	G Dmpout(chan,addr,siz)	*	Write from a block
	G Gppn			*	Getppn (gfd'd ppn, not aun)
	G Pageon		*	Set Tops-10 pageing size
	G Pageoff		*	Reset Tops-10 pageing size
Module	Routine(Params)			Function
------	---------------			--------
DISPAT	G Metae			M-E	Call to editor (recursively)
	G Metam			M-M	Set mode package
	G Initdispatch		*	Initialize dispatch tables
	G Forceinput(tp)	*	Force input from tp (qreg?)
	G Ctrlus		C-_	Hack C-_o = C-O; C-_a = C-@; (zubkoff)
	G Ctrlc			C-C	ToPrompt Ttyzap Fen Quit

ISERCH	  Wgoxy			*	Defwindow, goxy
	G Srchstring(prompt)	*	Prompt & write .sst to screen
	  Isdel			*	Delete char in search
	  Irdel			*	Delete char in reverse search
	  Iesc			*	Terminate search, restore table!
	  Iserch		*	Do search
	  Isquote		*	Read char & do search
	  Irserch		*	Do reverse search
	  Irquote		*	Read char & do reverse search
	  Isnext		*	Find next occurrance of search
	  Irnext		*	Find next occurrance of search
	  Rtos			*	Change from r-search to s-search
	  Stor			*	Change from s-search to r-search
	G Ictrls		C-S	Incremental search
	G Ictrlr		C-R	Incremental reverse search

QREPL	G Genreplace		*	Search-Replace routine
	G Metaq			M-%	* Query replace
	G Metar			M-$	* Nonquery replace
	G Metaa			M-A	Query for affirmative from a macro

HELP	G Metaquest		M-?	Crummy On-Line help

FILECO	G Ctrlxt		C-X C-T	Setup take from a file
	G Exini			*	Setup take from 'DSK:FINE.INI'
	G Errstr(foo)		*	Writestring(.foo) @ ToPrompt()
  