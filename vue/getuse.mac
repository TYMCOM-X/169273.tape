Title	Getuse	Routine to get usage or allow usage of a program
Subttl	Documentation

Comment	|

	    The purpose of this set of routines is to make a more
	secure environment for both "special" programs.  They do
	the right things to check for "prime-time", the system
	state (or schedule), the program's Frame PPn, etc.
	    Each routine uses AC(1) for the appropriate list of
	entries and AC(17) for the stack.  AC(2) is used by some
	routines for a flag value or an index.  All AC's are kept
	intact.  Thus, the caller need not save them ahead of time.

PRIME	Checks for prime time and for the restricted schedule bit.
	It takes as arguments a list of prime times.

	Call:	Move   1,[hours-list]	; Aobjn pointer to list of hours
		Movei  2,Time-zone	; Time zone, 0 == current (Tymshare)
		Pushj 17,PRIME		; call ..
		  <error>		;    in-prime-time
		<normal>		; Not in prime-time

	hours-list:	begin,,end	; Pair(s) of times in hours

	Each halfword in the pair designates the hour at which prime
	time begins or is concluded (inclusive), in the following
	format:

		Bit 0	  - Weekday
		Bit 1	  - Saturday only
		Bit 2	  - Sunday only
		Bits 3-7  - Monday-Friday only
		Bit 8	  - Holiday (not implemented)

		Bits 9-17 - Hour in 24-hour format (0-24)
			    0 is midnight begin, 24 is midnight end

	Normally, the hours list would be one block, but it is quite
	conceivable that there might be more than one time-block.
	The AOBJN pointer avoids specifying the # hour pairs.
	The time zones range from 4-34 and 44-74 for standard
	and daylight times.  (Note this is Tymshare only.)

TYMCEN	Obtains the proper time zone (Tymshare only) for the
	location of the data center at which this hardware is
	reported to be located.  At present, this information
	is obtained from the SYSTEM NAME and the host/site
	descriptor.  (eg. C33 is in CUPERTINO, CA. and is thus
	Pacific Time Zone with daylight savings, 50).  The
	following table is used:

		C - Cupertino	Pacific Time	(50)
		D - Dallas	Central Time	(52)
		F - Fremont	Pacific Time	(50)
		H - Houston	Central Time	(52)
		L - Lockheed	Pacific Time	(50)
		P - Paris	Western Europe	(61)
		V - ValleyForge	Eastern Time	(53)

	    This information is usless except to determine the
	prime-time hours for the host location rather than for
	a particular user (who might be keen enough to change
	the default time-zone set by noname for that username).
	See AC(2) specified for the PRIME subroutine.


CHKSCH	Checks the system states word, (or the schedule) for the
	appropriate bit mask.

	Call:	Movei  1,states-value	; bits to check, 1 half word
		Pushj 17,CHKSCH		; call ..
		  <error return>	;   If ANY of the bits are set
		<normal return>		;   If NONE of the bits are set

CHKFPN	Checks to see if the current program's FPN is one of a specified
	list of "legal" PPN's.  A -1 or 777777 in the right half of an
	entry in the list is considered a "wild-card" value.  A zero in
	either half means to use the user's value.  I.E. A zero entry
	in the list means that only the owner may run this program.  A
	negative entry means that only projects (GANs) less than or equal
	to ABS(entry) are permitted.

	Call:	Move   1,[legal-FPNs]	; AOBJN pointer to list of legal FPNs
		Pushj 17,CHKFPN		; call ..
		  <error return>	;   Caller's FPN not in list
		<normal return>		;   Caller's FPN is in list

CHKTAB	Checks an arbitrary list of values supplied by an AOBJN pointer
	in AC(1) against the value returned by Gettab for the supplied
	argument in AC(2).  No modification will be made to AC(2), thus
	an error return from GETTAB will constitute a mismatch.

	Call:	Move   1,Match-list	; AOBJN pointer to list of entries
		Move   2,Gettab-word	; index,,item for gettab
		Pushj 17,CHKTAB		; call ..
		  <error return>	;   No match!
		<normal return>		;   A match.

CHKAUX	Checks an arbitrary list of values supplied by an AOBJN pointer
	in AC(1) against the value returned by Auxcal for the supplied
	argument in AC(2).  No modification will be made to AC(2), thus
	an error return from AUXCAL will constitute a mismatch.

	Call:	Move   1,Match-list	; AOBJN pointer to list of entries
		Move   2,Auxcal-word	; index,,item for Auxcal
		Pushj 17,CHKAUX		; call ..
		  <error return>	;   No match!
		<normal return>		;   A match.


End Comment |

Subttl	Definitions

	Search	Macten,Jobdat,Uuosym

	Ifndef Tymcom,<Tymcom==-1>	; Default for Tymcom-X
	Ifndef Tops10,<Tops10==0>	; Default not Tops-10
	Ifn Tymcom,<Tops10==0>		;   No Tops10
	Ife Tymcom,<Tosp10==-1>		;     unless no Tymcom-10

	T1==1		; Temp.	Used for AOBJN pointer
	T2==T1+1	; Temp.	Used for Special flags
	T3==T2+1	; Temp.
	T4==T3+1	; Temp.
	P1==T4+1	; Not so Temp.
	P2==P1+1	; Not so Temp.
	P3==P2+1	; Not so Temp.
	P4==P3+1	; Not so Temp.
	P==17		; PDL Pointer

Subttl	Main routines


PRIME:	Pushj	P,Saveac		; Save acs T1(1) thru P4(10)
	Push	P,T1			; Save the list for popping
	Date	T1,			; Get DATE
Ifn Tymcom,<		    ; Tymshare
	Jumpe	T2,ZoneOk		; Got good zone of 0, use current.
	Cail	T2,4			; Make sure given zone ok
	Caile	T2,34			;   between 4 & 34
	  Caia				; No! Needs further checking
	 Jrst	ZoneOk			; Ok! Skip more testing.
	Cail	T2,44			; See if Daylight savings added
	Caile	T2,74			;   between 44 and 74
	  Setz	T2,			; No! So ignore it and use current.
ZoneOk:	Hrrz	T3,T2			; Copy into conversion address
	Timer	T2,			; Time since midnight in jiffies
	Movei	T4,T1			; Have to specify an AC
	Datuuo	T4,			;   to convert the date, use T4
	  Popj	P,			; Error?  Well, can't decide then.
> ; End Ifn Tymcom
Ifn Tops10,<Timer  T2,>     ; Tops-10
	Push	P,T2			; Save the current time.
	Idivi	T1,^D31*^D12		; Year into T1
	Idivi	T2,^D31			; Month in T2, day in T3
	Movei	P1,4(T3)		; 01-Jan-64 was a wednesday
	Move	P4,[XWD 440300,[EXP 033614625035]]; Point 3,[XXX]
	Move	T4,T2			; Copy month
	Ildb	T3,P4			; Get offset
	Sojge	T4,.-1			; For right month
	Addm	T3,P1			; Put in day
	Trne	T1,3			; Leap year?
	Aoja	P1,.+3			; NO!
	Caile	T2,1			; January or February?
	Aos	P1			; NO!
	Addm	T1,P1			; Plus year
	Ash	T1,-2			; Plus leap years
	Addm	T1,P1			; ..
	Idivi	P1,7			; Says per week
	Pop	P,T1			; Restore Time in Jiffies
	Idivi	T1,^D60*^D60*^D60	; Convert to whole hours
	Move	P1,T1			; Copy for compare
;
; This leaves:
;	P1 == Time of day in hours
;	P2 == Day of the week, Saturday == 0
;

	Pop	P,T1			; Restore AOBJN pointer
Ploop:	Hlrz	T2,(T1)			; Get the begin time
	Jffo	T2,.+2			; Count the leading zeroes
	  Jrst	Tryend			; If 0, then everyday, after midnight
	Trz	T2,777000		; Clear extra bits now, leaving hour
	Sojge	T3,Tryday		; If positive, then check day range
	Cail	P2,2			;    else, check weekday range
	Caile	P2,6			;          (2=Monday thru 6=Friday)
	  Jrst	Trynxt			; No... not a weekday try next pair
	Caml	T2,P1			; Is it outside of hours?
	



CHKAUX:	Pushj	p,saveac	; Save my ac's T1(1) thru P4(10)
GetAux:	Seto	t3,		; For my job.
	Auxcal	t2,t3		; Value returned in t3
	Move	t2,t3		; Get value in t2
	Jrst	Matchit		; Go do the match stuff

CHKFPN:	Pushj	p,saveac	; Save my ac's T1(1) thru P4(10)
Ifn Tymcom,<Hrroi t2,.GtFPN>	; Get my FRAME PPN (Tymcom-X)
Ifn Tops10,<Hrroi t2,.GtRDI>	; Get my job's Run DIrectory (Tops-10)
	  caia			;   skip
CHKTAB:	Pushj	p,saveac	; Save my ac's T1(1) thru P4(10)
GeTab:	Gettab	t2,		; Use whateve we have supplied thus far
	  Popj	p,		; No! Something's wrong, forget it.
	Jrst	Matchit		; Go do the match stuff

	Setz	c,		; Need some scratch
	Move	v,Usrlic	; First check license
	Trne	v,(2b17)	; Does he have WF?
	  Jrst	Delf		; Yes-- No need to check further
	Move	v,UsrFPN	; Get the frame ppn
	Camn	v,UsrPPN	; Does it match? (GFD'd PPN)
	  Tro	c,100		;  Yes!! Only needs Owner access
	Trz	v,-1		; Clear PN
	Hllz	b,Usrppn	; Get Project part
	Camn	v,b		; ... Do they match?
	  Tro	c,10		;  Yes!! Only needs Project access
	Move	v,Usrlic	; See if he has WP set?
	Trne	v,(1b17)	; Either that or WA... both ok.
	  Trz	c,10		;   Seems to - Clear project bit
Delf:	move	v,c		; Now, copy our flag.



	OPEN	[ 17
		  sixbit "DSK"
		  xwd 0,0]
	  Jrst	Rested		; Can't cope -- DO next step
	Skipn	Usrnam		; Get program name.
	  Jrst	cantell		; Can't cope -- Release Disk.
	MOVE	d,[point 18,[sixbit /LOWSHR/
			     sixbit /HGHSAV/
			     sixbit /SWREXE/
			     sixbit /XPN   /]]
Vuecpy:	Move	e+3,UsrFPN	; Reset the FPN (remembered from above)
	Move	e,Usrnam	; Save the name in the AC's LOOKUP block
	Ildb	c,d		; Get one of LOW SHR HGH SAV SWR 0
	 Jumpe	c,cantell	; All done?
	Movsm	c,e+1		; Not yet... store extension to try.
	Setzm	e+2		; Finish setup...
	LOOKUP	e		; Look it up in his directory [FPN]
	  Jrst	Vuecpy		;  Ignore errors - Just go to the next one.
	Jumpe	v,Okdelf	; Ok to delete if WF or WP... set, so go!
	ldb	c,[point 3,e+2,2]; get user protection
	Trne	v,100		; If same user, then...
	 jumpe	c,Okdelf	;  Let him delete it if possible
	Trne	v,100		;  Else ... he must rename it first.
	 jrst	Okrenf		;  ...
	ldb	c,[point 3,e+2,5]; get project protection
	Trne	v,10		; If same project, then...
	 jumpe	c,Okdelf	;  Let him delete it if possible
	Trne	v,10		;  Else ... he must rename it first.
	cail	c,2		;  ... IF that is possible!
	 caia			;  no - no - no!
	  jrst	Okrenf		;  ...  Ok!
	ldb	c,[point 3,e+2,8]; get anyone protection
	 jumpe	c,Okdelf	;  Let him delete it if possible
	cail	c,2		;  Else ... he must rename it first.
	  jrst	Vuecpy		;  ...  Can't!!! so try next file!
Okrenf:	movei	c,00017		;  Protection 0, mode 17
	Dpb	c,[point 13,e+2,12]; store it for the rename.
	Rename	e		; Change the protection
	  jrst	Vuecpy		; If error -- give up & try next one
	setzm	e+2		; Clear this field
	move	e+3,UsrFPN	; Restore the directory name
	hllzs	e+1		; Clear creation date and stuff
	Lookup	e		; Do a lookup again
	  jrst	Vuecpy		; Not there? -- Give up!
Okdelf:	SETZM	e		; Clear name
	RENAME	e		; Delete it
	 Jfcl			;  Ignore errors
	Jrst	Vuecpy		; Loop till all stolen files gone

Cantell: RELEAS			; Release the channel (DSK)
Rested:	movei	a,1b21		; JP.TYM
	tdne	a,Usrprv	; Does the user have license?
	  jrst	Noecho		;   Yes -- Turn off echo & GO!
	lsh	a,-7		; Shift word over and decipher the mode!
	andi	a,3		; Got it, now we have them run something else
	move	a,[sixbit /EDIT10/	; PDP-10 .JPMPD
		   sixbit /EDITOR/	; XEXEC  .JPMXE
		   sixbit /EDITOR/	; XEXECJ .JPMXJ
		   sixbit /EDITOR/](a)	; SUDS   .JPMSU
				; Fall into code to RUN (SYS) ((a))

Subttl	VUEMAC	Runccl	Cucl	RunRPG	Runcca

;Runccl	- Perform a "RUN" at start address + 1 for SYS:(a)
;
;	Move	a,[sixbit /program/]
;	Jrst	Runcca
;	  <never returns>
;
Runccl:	Move	b,[Xwd RPGBLK,e]; Remember this is from SYS:
	Blt	b,e+5		; Copy defaults from RPG
	Movem	a,e+1		; Now store the name
	Jrst	Runcca		; And run it at the CCL point

;Cucl	- Run CCL program at starting addr + 1
;RunRPG	- Run (SYS)RPG at atarting address + 1 to do the last RPG thing
;
;	Jrst	RunRPG		Cucl()  or  Runrpg()
;	  <never returns>
;
cucl:	Pushj	s,Fen		; Turn off the terminal
RunRPG:	Move	b,[Xwd RPGBLK,e]; We are running RPG right?
	Blt	b,e+5		; Copy defaults from RPGBLK
Runcca:	movsi	a,1		; Start offset = 1
	hrri	a,e		; Setup address of block
	run	a,		; Bye!
	  halt	.

RPGBLK:	sixbit/SYS/
	sixbit/RPG/
	0
	0
	1,,4
	0

