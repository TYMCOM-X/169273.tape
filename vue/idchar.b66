Module idchar = begin

external
	goxy,			! routine to position the cursor
	updatecursor,		! routine to calculate screen line position
	inschar,		! routine to insert a blank on the screen
	delchar,		! routine to delete a char on the screen
	getchxr,		! routine to get a buffer character

	screen,			! array containing the screen image
	scroff,			!
	ttytyp,			! terminal type index (numeric)
	linesz,			! size of the screen width
	wndorg,			! origin of the current window
	curwin;			! current window index (numeric)

structure xyarray[i,j]=.xyarray+(.j-1)+(.i-1)*132;
map xyarray screen;

global routine idc (firstchar,line) = begin
! firstchar: the first character position of the buffer to be updated.
! line:      the current line on the screen.
!
    own bchr, schr;			! buffer char, screen char
    own mypos, myscreenpos;		! buffer pos,  screen pos
    own crpos, crscreenpos;		! buffer eol,  screen eol
    own prefix, suffix;			! prefix size, suffix size
    own preend;				! end position of prefix
    own differed;			! true if lines are diferrent
    own distance;			! distance to move text
    own eobuffer;			! true if end of buffer line
    own eoscreen;			! true if end of screen line
    own i;
    own myphyspos,endphyspos,fudge;

If not (case .ttytyp of set		!  << speed improvement >>
	  0;   0;   0;   0;   0;	! tty, superb, adm, xxx, beehive
	  0;   1;   0;   0;   0;	! xxx, concep, xxx, xxx, dm2500
	  1;   0;   0;   0;   1;	! vt100, xxx, xxx, h1500, hkit19
	  0;   0;   0;   0;   0;	! dm1500, act4, vt52, xxx, xxx
	  1;   0;   0;   1;   0;	! t1061, mime4, xxx, hp2621, xxx
	  0;   0;   1;   1;   0;	! xxx, xxx, H19, Adm-31, xxx
	  0;				! h2000
    tes) then return;

    mypos_.firstchar;			!place to start.
    myscreenpos_1;			!place on the screen.
    myphyspos_1;			!where we are on the screen.
    endphyspos_1;			!where the end  of the line would be.
    prefix_0;				!number of chars the same.
    preend_.firstchar-1;		!where end of prefix would be.

    differed_0;				!no differences yet.
    eobuffer_0;				!beginning of buffer
    eoscreen_0;				! beginning of screen

    while 1 do begin				% read until 2 lines differ %
	bchr _ getchxr(.mypos);			% buffer character %
	schr _ .screen[.line,.myscreenpos];	% screen character %
	if .bchr eql "?M" then eobuffer_1;
	if .schr eql "?M" then eoscreen_1;
	if .eoscreen and .eobuffer then exitloop;	% done? %
	if .bchr neq .schr then differed _ 1;		% different? %

	endphyspos_updatecursor(.schr,.endphyspos);
	if not .differed then begin		% update prefix length  %
	    preend_.mypos;
	    prefix_.prefix+1;
	    myphyspos_.endphyspos;		% new screen position   %
	end
	else	% if differed ... %
	    if .bchr eql "?I" or .schr eql "?I" then return;  % no tabs %
					% *** doesn't understand tabs *** %

	if not .eobuffer then mypos_.mypos+1;	% increment positions   %
	if not .eoscreen then myscreenpos_.myscreenpos+1;

    end;
    if not .differed then return;		% nothing to do - same same %

! Note: mypos & myscreenpos are now at end of line.  If this changes, then
!	remember to set them up properly. /CAB

    if .endphyspos geq .linesz then return;	% line too long? %
    crpos_.mypos-.firstchar+1;	       ! length of buffer line
    crscreenpos_.myscreenpos;	       ! length of screen line

! Now we have found the common prefix length and carriage return positions

    if .crscreenpos eql .crpos then return;	% no work to do? %
					% *** may not always be true *** %

! Now we scan backwards getting the suffix length.

    suffix_-1;				! initially -1
    while 1 do begin
	if .screen[.line,.myscreenpos] eql getchxr(.mypos) then
	    suffix_.suffix+1;
	if .myscreenpos eql .prefix+1 then exitloop;
	if .mypos eql .preend+1 then exitloop;
	myscreenpos_.myscreenpos-1;
	mypos_.mypos-1;
    end;

! Now we have all the information.  If it is worthwhile, we
! should now do the operations.

    if .suffix eql 0 then return;		% no matching suffix? %
    goxy(.myphyspos,.line-.wndorg[.curwin]+1+.scroff);	% new screen line %

    fudge_.myphyspos;
    if .crpos-1 gtr .suffix+.prefix then begin		% insert %
	distance_.crpos-1-.suffix-.prefix;
	incr i from .prefix+1 to .prefix+.distance do
	    fudge_updatecursor(getchxr(.firstchar+.i-1),.fudge);
	if .distance gtr .suffix then return;		% unnecessary? %
	decr i from 132-.distance to .prefix do		% clean screen %
	    screen[.line,.i+.distance]_.screen[.line,.i];
	incr i from .prefix+1 to .prefix+.distance do	% set new char %
	    screen[.line,.i]_" ";			% excess space %
	incr i from 1 to .fudge-.myphyspos do
	    inschar();					% excess space %
    end
    else if .crscreenpos-1 gtr .suffix+.prefix then begin	% delete %
	distance_.crscreenpos-1-.suffix-.prefix;
	incr i from .prefix+1 to .prefix+.distance do
	    fudge_updatecursor(.screen[.line,.i],.fudge);
	if .distance gtr .suffix then return;		% unnecessary? %
	incr i from .prefix+1 to 132-.distance do	% clean screen %
	    screen[.line,.i]_.screen[.line,.i+.distance];
	incr i from 1 to .fudge-.myphyspos do		% excess space %
	    delchar();
    end;
end;		% end idc %

end eludom
