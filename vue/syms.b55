module Matching =
!----------------------------------------------------------------
!
! Module: GETSYM.BLI
!
! Abstract:
!
!	Code for implementing mnemonic symbol value assignment
!
!----------------------------------------------------------------
begin

external escvalue;
external ToPrompt, WriteString, PhysPos, PhysLin, ClearLine, goxy;
external ctrlG, writeloss, readch, clearscreen, ctrll;


Routine WrtRadix(OutNum,OutRadix) =
!----------------------------------------------------------------
!
! Abstract:
!	Using the WriteString routine, output a number onto
!	the screen.
!
! Parameters:
!	OutNum - the value of the number to output. (It can
!		 be signed but + will not print).
!
!	OutRadix - the radix in which to print the number.
!
! Side Effects:
!	The screen is modified via the writestring routine.
!
! Design:
!	Create a packed asciz string and use writestring to
!	print it on the screen.
!
!----------------------------------------------------------------
begin
local OString[10],StrPtr,Digits[10];
register Index,OutVal;

StrPtr _ (OString)<36,7>;		! create the ptr
OutVal _ .OutNum;			! copy the value for modification

    If .OutVal lss 0 then
	begin
	replacei(StrPtr,"-");
	OutVal _ .OutVal * -1;
    end;


Index _ -1;
while .OutVal gtr 0 do
    begin
    Index _ .Index + 1;
    Digits[.Index] _ .OutVal mod .OutRadix;
    OutVal _ .OutVal/.OutRadix;
    end;

if .Index eql -1
    then replacei(StrPtr,"0")
    else while .Index geq 0 do
	begin
	replacei(StrPtr,(.Digits[.Index]+"0"));
	Index _ .Index - 1;
	end;

replacei(StrPtr,0);			! don't forget to end with a zero
writestring(OString<36,7>);		! write it on the screen
end;

Global Routine WrtNum(OutNum) = WrtRadix(.Outnum,10);
Global Routine WrtOct(Outnum) = WrtRadix(.Outnum,8);
global routine GetSymbol(TableAddr)=
!----------------------------------------------------------------
!
! Abstract:
!	Prompt at the bottom of the VUE screen for a symbol
!	to modify, terminated with an escape. Complete the
!	unique abreviation (ending with a "$") and prompt
!	the user for a new value. Also see SIDE EFFECTS:
!
! Parameters:
!	TableAddr - is the address of an array of two word
!		    records ending with a zero. The first
!		    word of the record points(bpt) to an asciz
!		    string which is a symbol. The second 
!		    word is the address of the integer value
!		    symbol.
!
! Results:
!	The table offset of the symbol used,
!	 -1 if an error occured.
!
! Side Effects:
!	Modifies the bottom of the screen. If the user types
!	a "?" then the symbols are listed on the screen and
!	then the screen is re-displayed using the cntrl-L
!	command code. (The re-display will occur after a
!	character is typed).
!
! Errors:
!	If a non-unique abreviation is given then an error will
!	occur. (A non-unique abbreviation which exactly matches
!	a symbol is excluded from this error "un-unique" class)
!
! Design:
!	One stage:
!	    1) Prompt and get the symbol up to the terminator
!	       same algorithm MunchLine routine does except
!	       "?" causes a list of symbols to be printed.
!
!----------------------------------------------------------------
begin

bind	OldPrmpt = (plit asciz '$ Old value = '),
	ValPrmpt = (plit asciz ', New value: ');

local SymValue,SymNam[80],CPtr,Tmp1,Tmp2,OldIndex,SymLen,FrsIndex;
register i,char,index;

! Step 1: Get the symbol

I _ 0;				! pointer to next deposit word
while .I lss 80 do begin
    char _ readch();	! get a character

    if (.char eql #177) or (.char eql #010) then begin
       if .I gtr 0 then begin		! ** delete character in buffer **
	    I _ .I - 1;
	    goxy(.physpos-1,.physlin);
	    if .SymNam[.I] leq "?Z" then	! we had a cntrl-char
		goxy(.physpos-1,.physlin);
	    clearline();			! clear after prompt
	end;
	!else ignore it
    end
    else					! ** found terminator
    if (.char eql .EscValue) or (.char eql "?M") then exitloop
    else if (.char eql #007) then begin		! ** found cntrl-g
	ctrlg();	! give error
	return -1;	! exit from this routine
    end
    else if (.char eql "??") then begin		! display all symbols
	index _ 0;				! the line num
	i _ .TableAddr;				! the current rcrd entry addr
	clearscreen();
	while (..i neq 0) do begin		! display one at a time
	    index _ .index + 1;
	    goxy(1,.index);
	    writestring(..i);
	    i _ .i + 1;				! print the value out
	    writestring(plit asciz ' [');
	    wrtnum(...i);
	    writestring(plit asciz ']');
	    i _ .i + 1;		! to next symbol!
	    if (.index gtr 20) then begin
		index _ .index + 2;
		goxy(1,.index);
		writestring(plit asciz '--More????--');
		char _ readch();
		if (.char eql 'n') or (.char eql 'N') or (.char eql '?G')
		    or (.char eql '?M') or (.char eql #10)
		    or (.char eql #177)	! <cr> <lf> or <rub> [CB]
		    then exitloop;
		clearscreen();
		index _ 0;		! start at the top
	    end;
    
	end;	! end of screen while loop
    
	index _ .index + 2;
	goxy(1,.index);
	writestring(plit asciz '--Type any character to return??--');
	char _ readch();
	ctrll();
	return -1;
    end
    else if (.char eql "?Q") then begin		! ** found quote character
	SymNam[.I] _ readch();
	writeloss(.SymNam[.I]);
	I _ .I + 1;
    end
    else if (.char leq "?Z") then begin	    ! ** found un-qouted cntrl-char
	ctrlg();	! give error
	return -1;	! exit routine
    end
    else begin					! ** found normal character
	writeloss(.char);
	SymNam[.I] _ .char;
	if (.char leq "Z") then if (.char geq "A") then	! assume
	    SymNam[.I] _ .char + ("a" - "A");		! lower case
	I _ .I + 1;
    end;
end;	! end of while loop  to 80 chars
    
if .I eql 0 then begin
    ctrlg();				! error zero length symbol
    return -1;
end;
    
Index _ 0;	! the initial table offset
SymLen _ .I;	! the length of the read symbol
OldIndex _ -1;	! the oldset table offset found
FrsIndex _ -1;	! the first table offset found
    
! find a matching symbol (I is the number of characters matched)
    
While .(.TableAddr)[.Index] neq 0 do begin
    CPtr _ .(.TableAddr)[.Index];
    I _ 0;
    while (scani(CPtr) neq 0) do begin
	if .I geq .SymLen then exitloop;	! ** end of comparison
	Tmp1 _ scann(CPtr);			! ** Use lowercase to compare **
	Tmp2 _ .SymNam[.I];
	if (.Tmp1 leq "Z") then if (.Tmp1 geq "A") then
	    Tmp1 _ .Tmp1 + ("a" - "A");
	if (.Tmp2 leq "Z") then if (.Tmp2 geq "A") then
	    Tmp2 _ .Tmp2 + ("a" - "A");
	if .Tmp1 neq .Tmp2 then exitloop;	! ** doesn't match
	I _ .I + 1;
    end;

! check for other matches

    if (.I geq .SymLen) then begin		! ** found a match
	if .OldIndex lss 0 then OldIndex _ .FrsIndex;
	FrsIndex _ .Index;			! save it
	if scann(Cptr) eql 0 then begin		! found exact match
	    OldIndex _ .FrsIndex;
	    exitloop;
	end;
    end;

    Index _ .Index + 2;	 ! skip the two word record
end;

! perform completion

if (.FrsIndex lss 0) then begin		! no match
    ctrlg();				! Give error
    return -1;				! Return Flag
end
else if (.FrsIndex neq .OldIndex) and (.OldIndex geq 0) then begin
    ctrlg();				! ambigious error
    return -1;
end
else begin
    goxy(.physpos-.SymLen,.physlin);	! move cursor back over symbol
    i _ .TableAddr+.FrsIndex;
    writestring(..i);			! write real name out
    writestring(OldPrmpt);			! message for old value
    i _ .TableAddr+.FrsIndex+1;
    wrtnum(...i);
end;
    
! step 2: Get value if symbol, Execute routine if routine.

WriteString(ValPrmpt);			! prompt for a value

SymValue _ 0;			! start with 0
I _ 0;
while .I lss 10 do begin
    char _ readch();	! get a character

    if (.char eql #177) or (.char eql #010) then begin
	if .I gtr 0 then begin
	    I _ .I - 1;
	    goxy(.physpos-1,.physlin);
	    clearline();
	end
	!else ignore it
    end
    else if (.char eql .EscValue) or (.char eql "?M") then exitloop
    else if ((.char eql "-") or (.char eql "+")) and (.I eql 0) then begin
	SymNam[.I] _ .char;
	writeloss(.char);
	I _ .I +1;
    end
    else if (.char geq "0") and (.char leq "9") then begin
	SymValue _ (.SymValue * 10) + (.char - "0");
	SymNam[.I] _ .char;
	writeloss(.char);
	I _ .I + 1;
    end
    else begin
	ctrlg();	! error
	return -1;
    end;

end; ! end of while loop

! now set the value

if .I eql 0 then begin
    ctrlg();
    return -1;
end;

if .SymNam[0] eql "-" then SymValue _ .SymValue * -1;
.((.TableAddr)[.FrsIndex+1]) _ .SymValue;

! exit

writeloss("$");

Return .FrsIndex;
end;				! End routine

global routine GetRoutine(TableAddr)=
!----------------------------------------------------------------
!
! Abstract:
!	Prompt at the bottom of the VUE screen for an extended
!	routine name, terminated with an escape.
!
! Parameters:
!	TableAddr - is the address of an array of two word
!		    records ending with a zero. The first
!		    word of the record points(bpt) to an asciz
!		    string which is a name. The second 
!		    word is the address of routine.
!
! Results:
!	The address of the routine to execute or
!	 -1 if an error occured.
!
! Side Effects:
!	Modifies the bottom of the screen. If the user types
!	a "?" then the symbols are listed on the screen and
!	then the screen is re-displayed using the cntrl-L
!	command code. (The re-display will occur after a
!	character is typed).
!
! Errors:
!	If a non-unique abreviation is given then an error will
!	occur. (A non-unique abbreviation which exactly matches
!	a symbol is excluded from this error "un-unique" class)
!
! Design:
!	Two stage:
!	    1) Prompt and get the symbol up to the terminator
!	       same algorithm MunchLine routine does except
!	       "?" causes a list of symbols to be printed.
!	    2) Prompt and get the integer value using non-digit
!	       and non-sign characters for terminators. If no
!	       value is typed then error else set the table's
!	       value entry for the associated symbol and return.
!
!----------------------------------------------------------------
begin

local Complete,SymNam[80],CPtr,Tmp1,Tmp2,OldIndex,SymLen,FrsIndex;
register i,char,index;

! Step 1: Get the symbol

Complete _ 0;				! Not completing
I _ 0;					! pointer to next deposit word
while .I lss 80 do begin
    char _ readch();		! get a character
    if (.char eql #177) or (.char eql #010) then begin
	if .I gtr 0 then begin		! ** delete character in buffer **
	    I _ .I - 1;
	    goxy(.physpos-1,.physlin);
	    if .SymNam[.I] leq "?Z" then	! we had a cntrl-char
		goxy(.physpos-1,.physlin);
	    clearline();		! clear after prompt
	end;
	!else ignore it
    end
    else				! ** found terminator
    if (.char eql .EscValue) or (.char eql "?M") then exitloop
    else if (.char eql #007) then begin	! ** found cntrl-g
	ctrlg();	! give error
	return -1;	! exit from this routine
    end
    else if (.char eql "??") then begin	! display all symbols
	if .i eql 0 then begin		! give a help list
	    index _ 0;			! the line num
	    i _ .TableAddr;		! the current rcrd entry addr
	    clearscreen();
	    while (..i neq 0) do begin	! display a screenful at a time
		index _ .index + 1;
		goxy(1,.index);
		if ..(.i+1) neq 0 then writestring(plit asciz'    ');
		writestring(..i);
    
		i _ .i + 1 + 1;		! past routine then to next name
		if (.index gtr 20 or ..(.i+1) eql 0) then begin
		    index _ .index + 2;
		    goxy(1,.index);
		    if ..i neq 0 then writestring(Plit asciz '--More--')
		    else writestring(plit asciz '--Type any character to finish--');
		    char _ readch();
		    if (..i eql 0)
			or (.char eql "n") or (.char eql "N")
			or (.char eql "?G") or (.char eql "?M")
			or (.char eql "?J") or (.char eql #177)
			then return (ctrll();-1);
		    clearscreen();
		    index _ 0;		! start at the top
		end;
	    end;			! end of screen while loop
	end;				! end of help list
    end
    else if (.char eql "?Q") then begin		! ** found quote character
	SymNam[.I] _ readch();
	writeloss(.SymNam[.I]);
	I _ .I + 1;
    end
    else if (.char leq "?Z") then begin	    ! ** found un-qouted cntrl-char
	ctrlg();	! give error
	return -1;	! exit routine
    end
    else begin					! ** found normal character
	writeloss(.char);
	SymNam[.I] _ .char;
	if (.char leq "Z") then	! assume he types lowercase
	    if (.char geq "A") then
		SymNam[.I] _ .char + ("a" - "A");	! lowercase it
	I _ .I + 1;
    end;
end;
    
if .I eql 0 then     begin
    ctrlg();	! error zero length symbol
    return -1;
end;

Index _ 0;	! the initial table offset
SymLen _ .I;	! the length of the read symbol
OldIndex _ -1;	! the oldset table offset found
FrsIndex _ -1;	! the first table offset found

! find a matching symbol (I is the number of characters matched)

While .(.TableAddr)[.Index] neq 0 do begin
    CPtr _ .(.TableAddr)[.Index];
    I _ 0;
    while (scani(CPtr) neq 0) do begin
	if .I geq .SymLen then exitloop;	! ** end of comparison
	Tmp1 _ scann(CPtr);			! ** Use lowercase to compare **
	Tmp2 _ .SymNam[.I];
	if (.Tmp1 leq "Z") then if (.Tmp1 geq "A") then
	    Tmp1 _ .Tmp1 + ("a" - "A");
	if (.Tmp2 leq "Z") then if (.Tmp2 geq "A") then
	    Tmp2 _ .Tmp2 + ("a" - "A");
	if .Tmp1 neq .Tmp2 then exitloop;	! ** doesn't match
	I _ .I + 1;
    end;

! check for other matches

    if (.I geq .SymLen) then begin		! ** found a match
	if .OldIndex lss 0 then OldIndex _ .FrsIndex;
	FrsIndex _ .Index;			! save it
	if scann(Cptr) eql 0 then begin		! found exact match
	    OldIndex _ .FrsIndex;
	    exitloop;
	end;
    end;

    Index _ .Index + 2;	 ! skip the two word record
end;

! perform completion

if (.FrsIndex lss 0) then begin		! no match
    ctrlg();				! Give error
    return -1;				! Return Flag
end
else if (.FrsIndex neq .OldIndex) and (.OldIndex geq 0) then begin
    ctrlg();				! ambigious error
    return -1;
end
else begin
    writeloss("$");
    Return .TableAddr+.FrsIndex+1;
end;

end;				! End routine

end eludom
 