module idline = begin

! Thanks to  Mike Kazar, Craig Everhart, James Gosling & C. Leiserson
!   for their inspiration and help with writing this module
!
! Costs: (Initially!)

Global
    CSTlin = -1,	! Cost of redrawing a line		(?)
    CSTchr =  1,	! Cost of outputting a character	(1)
    CSTpos =  4,	! Cost of repositioning the cursor	(4)
    CSTdel =  5,	! Cost of deleting a line		(5)
    CSTins =  5,	! Cost of inserting a line		(5)
    CSTclr =  2;	! Cost of clearing to end of line	(2)

structure dynas[i,j]=.dynas+(.j)+(.i)*30;
!structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;
structure strs[i,j]=
    ( .strs + ((.j-1)/5) + ((.i-1)*27) ) <36-((((.j-1) mod 5)+1)*7),7>;


global ohash[30],nhash[30];

external screen,inslin,dellin,scrsze,getchxr,goxy,scroff,hend;
external wndorg,wndsiz,modpos,echosize,inwind,curwin,wndpea,physlin,physpos;
external sosmod;

own ypos[30],xpos[30],cpos[30];

map strs screen;
routine cost(i,j) =
    if .ohash[.j] eql .nhash[.i] then 0
    else if .nhash[.i] eql 0 then .CSTclr
    else .CSTchr*(.nhash[.i]^(-18))+.CSTpos;
routine draw(i) = if .nhash[.i] eql 0 then 0 else .CSTchr*(.nhash[.i]^(-18));
routine merge (cstyle,comptr) = begin
    local lasti;
    lasti_-1;
    incr i from .comptr+1 to .modpos+.echosize do begin
	if .cstyle eql .ypos[.i] then if .lasti neq -1 then begin
	    if .xpos[.lasti]-1 eql .xpos[.i] then begin
		cpos[.i]_0;
		cpos[.lasti]_.cpos[.lasti]+1;
		xpos[.lasti]_.xpos[.lasti]-1;
	    end
	    else if (.xpos[.i] geq .xpos[.lasti]) and
		    (.xpos[.i] leq .xpos[.lasti]+.cpos[.lasti]) then begin
		cpos[.i]_0;
		cpos[.lasti]_.cpos[.lasti]+1;
	    end
	end
	else lasti_.i;
    end;
end;
global routine caliad (argplace) = begin local a,b,temp,tdir,netpos,dist;
    local i,j,place,tc,ofst,dif,comptr;
    local dir[900],dyn[900],lasti;
    register tr;

    map dynas dyn;
    map dynas dir;

! This routine calculates in nhash the new line hashed values, and uses
! the values of ohash for the old values thereof.

! It uses dynamic programming to calculate the minimum cost of a
! redisplay.  The .dyn[.i,.j] array contains the cost of changing the
! first j lines of the old screen to the first i lines of the new
! screen.

%
The array dir is used to remember where we came from, i.e.  if
.dyn[.i,.j] was calculated from dyn[i-1,j] then it is 1, if it is
calculated from dyn[i,j-1] then it is 2.  It is four if we came
diagonally. C'est la vie.
% 
    place_.argplace;
    a_.wndorg[.curwin];
    b_.wndorg[.curwin]+.wndsiz[.curwin]-1;
    incr i from 1 to .a-1 do ohash[.i]_0;	!zap other parts of old zone.
    incr i from .b+1 to .modpos+.echosize
     do ohash[.i]_0;				!zap old hash array.
    incr i from 1 to .modpos+.echosize
     do nhash[.i]_0;				!zap new hash array.
    incr i from .a to .b do begin		!once per line
	nhash[.i]_0;				!initialize it.
	while 1 do begin			!once per character of line
	    tc_getchxr(.place);			!get the char
	    if .tc eql "?M" then exitloop;	!done with this line
	    nhash[.i]_.nhash[.i]+.tc+1^18;	!calculate hash.
	    if (.tc eql "?L") and .sosmod then place_.hend; !end of page.
	    place_.place+1;
	end;
	place_.place+1;				!skip the carriage return
    end;					!done with the hash.
    incr i from 0 to .modpos+.echosize do begin
	dyn[.i,0]_if .i geq 1 then .CSTins+.CSTpos+.dyn[.i-1,0]+Draw(.i)
		else 0;
	dyn[0,.i]_(.CSTdel*.i)+.CSTpos;
	dir[.i,0]_1;
	dir[0,.i]_2;
    end;
    incr i from 1 to .modpos+.echosize do begin
	incr j from 1 to .modpos+.echosize do begin

! First we check to see if we are going diagonally, i.e. if we do no
! insert or delete line operations, we just convert line j of the old
! screen into line i of the new one by either deciding it is the same
! or by deciding that it is different and thus needs to be rewritten.
	    dir[.i,.j]_4;			!we are going diagonally.
	    dyn[.i,.j]_.dyn[.i-1,.j-1]+Cost(.i,.j);

! Another possibility is that we are going to just do a simple delete
! line operation.
	    temp_.dyn[.i,.j-1]+.CSTdel+.CSTpos;	!simplest case.
	    if .temp leq .dyn[.i,.j] then begin
		dyn[.i,.j]_.temp;
		dir[.i,.j]_2;
	    end;

	    if .i eql .modpos+.echosize then temp_.dyn[.i,.j-1]; !delline in last column.

	    if .temp lss .dyn[.i,.j] then begin
		dyn[.i,.j]_.temp;
		dir[.i,.j]_2;
	    end;

! Lastly we could be doing an insert line.  Here we add in the cost of
! drawing the new line, plus the cost of doing the insertline operation.
	    temp_.dyn[.i-1,.j]+.CSTins+.CSTpos+Draw(.i);

! Check to see if we are doing better than the previous attempt.
	    if .temp leq .dyn[.i,.j]  then begin
		dyn[.i,.j]_.temp;
		dir[.i,.j]_1;
	    end;

!insert line in last column.
	    if .j eql .modpos+.echosize then temp_.dyn[.i-1,.j]+Draw(.i);

	    if .temp lss .dyn[.i,.j]  then begin
		dyn[.i,.j]_.temp;
		dir[.i,.j]_1;
	    end;

	end;				!inner loop
    end;				!outer loop.

! Now we calculate the command list by walking back along
! the array dyn.  We walk backwards along the same path
! that we used to get here. We use .dir to get back.  It also
! tells us when we have a potential ins/del line operation to

    comptr_.modpos+.echosize;
    i_.modpos+.echosize;
    j_.modpos+.echosize;
    while 1 do begin
	if .i eql 0 and .j eql 0 then exitloop; !done?

	if .dir[.i,.j] eql 2 then begin
	    if .i eql .modpos+.echosize then exitcompound;
	    xpos[.comptr]_.j;
	    ypos[.comptr]_2;       !ypos has the command to do.
	    comptr_.comptr-1;
	end;

	if .dir[.i,.j] eql 1 then begin
	    if .j eql .modpos+.echosize then exitcompound;
	    xpos[.comptr]_.j+1;
	    ypos[.comptr]_1;       !ypos has the command to do.
	    comptr_.comptr-1;
	end;

	tdir_.dir[.i,.j];
	if .tdir eql 1 then i_.i-1
	else if .tdir eql 2 then j_.j-1
	else begin
	    i_.i-1;
	    j_.j-1;
	end;
    end;

! Now we can go from .comptr+1 to .modpos+.echosize to get the commands.
! Now we have the command list, xpos has the nhash values
! and ypos tells us if we are to do a delline or an insline.
    netpos_0;
    ofst_0;
    if not .wndpea then begin
	incr i from .comptr+1 to .modpos+.echosize do begin  !count net shift.
	    dif_.xpos[.i]-(.ofst+.ypos[.i]);
	    if .ypos[.i] eql 1 then dif_1
		else if .ypos[.i] eql 2 then dif_-1
		else dif_0;

	    if .dif eql 0 then exitcompound;
	    if .dif gtr 0 then begin
		netpos_.netpos+.dif;      !insert line.
		ofst_.ofst+.dif;
	    end
	    else begin
		netpos_.netpos+.dif;
		ofst_.ofst+.dif;
	    end;
	end;

! Now we position to the right place.
! Note that if there are more ins than del lines,
! we have to work to ensure status line stays in one place.

	if .netpos gtr 0 then begin ! More insert lines than delete lines.
	    temp_.physlin;
	    goxy(.physpos,.wndsiz[.curwin]+.scroff-.netpos+1);
	    dellin(.netpos);
	    goxy(.physpos,.temp);
	end;
    end;	% end if not .wndpea %

    ofst_0;	!total amount the screen has shifted so far.
		!check that things are in the window.
    decr i from .modpos+.echosize to .comptr + 1 do begin
	if .xpos[.i] lss .a then xpos[.i]_.a;
	if .xpos[.i] gtr .b+1 then xpos[.i]_.b+1;
    end;

! Next we iterate through the array merging like commands, setting the
! count in the variable cpos instead of a default of 1.
    incr i from .comptr+1 to .modpos+.echosize do cpos[.i]_1;
    merge(1,.comptr);
    merge(2,.comptr);

    decr l from 2 to 1 do
    incr i from .comptr+1 to .modpos+.echosize do begin	!do the commands.

	dif_.cpos[.i];
	if .dif eql 0 then exitcompound;	!nothing to do->leave.
	if .ypos[.i] eql 1 and .l eql 1 then begin ! the insert line code.
	    goxy(.physpos,1-.a+.scroff+.xpos[.i]); !go to the line.

	    decr ki from .scrsze+.a-1 to .xpos[.i]+.dif
		do (ohash[.ki]_.ohash[.ki-.dif];
		    incr kj from 1 to 132 do begin
			tr_.screen[.ki-.dif,.kj];
			screen[.ki,.kj]_.tr;
			if .tr eql #015 then exitloop;
		    end);

	    inslin(.dif);
	    incr ll from .comptr+1 to .modpos+.echosize do
		if .xpos[.ll] gtr .xpos[.i] then xpos[.ll]_.xpos[.ll]+1;
	    incr j from 1 to .dif do begin
		screen[.j-1+.xpos[.i],1]_#015;
		ohash[.j-1+.xpos[.i]]_0;
	    end;

	    ofst_.ofst+1;
	    exitcompound[2];
	end
	else if .l eql 2 and .ypos[.i] eql 2 then begin
	    goxy(.physpos,1-.a+.xpos[.i]+.scroff);
	    incr ki from .xpos[.i] to .a-1+.scrsze-.dif
		do (ohash[.ki]_.ohash[.ki+.dif];
		    incr j from 1 to 132 do begin
			tr_.screen[.ki+.dif,.j];
			screen[.ki,.j]_.tr;
			if .tr eql #015 then exitloop;
		    end);

	    dellin(.dif);
	    incr ll from .comptr+1 to .modpos+.echosize do
		if .xpos[.ll] gtr .xpos[.i] then xpos[.ll]_.xpos[.ll]-1;
	    incr ki from 1 to .dif do begin
		screen[.a-1+.scrsze+1-.ki,1]_13;
		ohash[.a-1+.scrsze+1-.ki]_0
	    end;

	    ofst_.ofst-1;
	    exitcompound[2];
	end;
    end;

!come here when done, we have adjusted the screen correctly.
    if .netpos lss 0 then begin
! More delete lines than insert lines.
	temp_.physlin;
	goxy(.physpos,.wndsiz[.curwin]+.scroff+.netpos+1);
	inslin(-.netpos);
	goxy(.physpos,.temp);
    end;

    return;
end;

end eludom
    