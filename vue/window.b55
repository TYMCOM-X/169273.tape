module window = begin

!Copyright 1979 by Michael L. Kazar

structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;

bind separator=plit asciz
'|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||';

external ctrlz,goxy,defwindow,writestring,bfblk1,bfblk2,curline,getchxr;
external lowend,getppn,defdsk,combuf,moveback,moveforward,scrmod,inwind;
external muline,linesz,toprompt,scrsze,scrlen,clearline,screen,physlin;
external repcount,modpos,echosize,maxss,clearscreen,hitsts,ctrlg,redisp;
external hbot,hend;
external ctrlp2,scroff,ttyin2,normalvideo,inversevideo,sefmod;
external WhiteLine;

global linemap[41];		       !maps line to buffer or -1 if "-...-"

map tdas screen;

bind numwnd=8;
global wndorg[numwnd];		       !place on screen of window.
global wndfre[numwnd];		       !is the window free or not.
global wndcrl[numwnd];		       !save curline value of window.
global wndsiz[numwnd];		       !size on screen of window.
global wndlow[numwnd];		       !lowend value for window.
global wndbuf[numwnd];		       !name of the buffer.
global curwin;			       !value of the current window.

global routine winit = begin
    ttyin2();			       !setup line lengths.
    curwin_0;
    wndorg[0]_1;		       !place on the screen.
    wndsiz[0]_.modpos;		       !size of the window.
    wndfre[0]_0;		       !we are not free.
    incr i from 1 to numwnd-1 do wndfre[.i]_1;	       !mark it as free.
! The other fields do not matter as they are taken from the current
! values of things like the buffer name and .lowend.
end;

global routine wset (awindow) = begin
    ! This routine is called to set a new window.

    wndlow[.curwin]_.lowend;	       !remember the place where we is.
    wndcrl[.curwin]_.curline;	       !and this too.
    wndbuf[.curwin]_.(bfblk2+1);       !the buffer name.

    !Now we set the values of all the stuff and switch to the right window.
    curwin_.awindow;		       !switch now.
    if .wndbuf[.curwin] neq .(bfblk2+1) then begin
	!Come here if we are in the wrong buffer.
	bfblk1_.defdsk;
	(bfblk1+2)_sixbit 'vue';
	(bfblk1+3)_0;
	(bfblk1+4)_getppn();
	(bfblk1+1)_.wndbuf[.curwin];   !place to go.
	combuf(0);		       !go there.
    end;

    !Now we are in the right buffer, but our position is probably
    !wrong.
    if .lowend gtr .wndlow[.curwin] then
	if .lowend gtr .lowend-.wndlow[.curwin] then
	    moveback(.lowend-.wndlow[.curwin]);
    
    if .lowend lss .wndlow[.curwin] then
	if .hend-.hbot geq .wndlow[.curwin]-.lowend then
	    moveforward(.wndlow[.curwin]-.lowend);

    !Now we are in the right place, but the position on the screen
    !where we put the cursor could be bogus.
    curline_.wndcrl[.curwin];

    hitsts_1;
    inwind_1;
    scrmod_1;			       !mark everything to go.
    muline_1;

    scrlen_.wndsiz[.curwin];
    scrsze_.scrlen;

    !Now we are done.
    return;
end;
global routine uctrlc = begin local ctr;
    !^XC creates a new window. Uses .curline as the place to split it.
    redisp(0);			       !ensure things are nice first.
    ctr_0;
    incr i from 0 to numwnd-1 do begin
	if .wndfre[.i] eql 1 then exitloop;    !if found one.
	if .i eql numwnd-1 then begin  !if none free.
	    ToPrompt(plit asciz 'Too many windows');
	    return;
	end;
	ctr_.ctr+1;
    end;			       !for the loop;

    if .curline leq 0 then return ctrlg();
    if .wndsiz[.curwin]-.curline-1 leq 0 then return ctrlg();

    !If we make it here, then we have a window to use in .i
    ctrlp2();			       !back up a line.
    wndorg[.ctr]_.wndorg[.curwin]+.curline+1;
    wndfre[.ctr]_0;
    wndsiz[.ctr]_.wndsiz[.curwin]-.curline-1;
    wndsiz[.curwin]_.curline;
    wndlow[.ctr]_.lowend;	       !remember the place where we is.
    wndcrl[.ctr]_.curline;	       !and this too.
    wndbuf[.ctr]_.(bfblk2+1);       !the buffer name.
    goxy(1,.physlin);
    linemap[.wndorg[.ctr]-1]_-1;    !mark it as having dashes.
    incr i from .wndorg[.ctr] to .wndorg[.ctr]+.wndsiz[.ctr]-1 do
	linemap[.i]_.ctr;
    WhiteLine();
    writestring(separator);
    normalvideo();
    wset(.ctr);			       !switch to the new window.
    return;
end;
global routine ctrll  = begin local lastdone,oldwin;
	oldwin_.curwin;
	if .sefmod then curline_.scrsze/2;
	if .curline eql 0 then curline_1;
	if .repcount gtr 1 and .repcount leq .scrsze then curline_.repcount;
	if .repcount gtr .scrsze then curline_.scrsze;
	repcount_1;
	defwindow(1,1,.linesz,.modpos+.echosize);
	clearscreen();
	incr i from 1 to .modpos do screen[.i,1]_"?M";	% force new lines %
	scrmod_1;
	muline_1;
	hitsts_1;
	lastdone_-1;		       !last window displayed
	incr i from 1 to .modpos do begin
	    if .linemap[.i] eql -1 then begin
		defwindow(1,1,.linesz,.modpos+.echosize);
		goxy(1,.i);
		WhiteLine();
		writestring(separator);
		normalvideo();
	    end
	    else if .linemap[.i] neq .lastdone then begin
		lastdone_.linemap[.i];
		wset(.lastdone);
		redisp(0);	       !0 means do not watch for ttyio.
	    end;
	end;
	wset(.oldwin);		       !reset the window now.
end;
global routine uctrlp = begin local nextwindow;
    ! This routine is called to move up one window.
    nextwindow_-1;
    incr i from 1 to 40 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] eql -1 then exitcompound;
	nextwindow_.linemap[.i];
    end;
    if .nextwindow eql -1 then return ctrlg();    !no previous window.
    wset(.nextwindow);		       !otherwise go there.
end;
global routine uctrln = begin local nextwindow;
    ! This routine is called to move down one window.
    nextwindow_-1;
    decr i from .modpos to 1 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] eql -1 then exitcompound;
	nextwindow_.linemap[.i];
    end;
    if .nextwindow eql -1 then return ctrlg();    !no previous window.
    wset(.nextwindow);		       !otherwise go there.
end;
global routine uctrld = begin local nextwindow,reali,backp;
    !Come here to destroy a window. Must not be the top window of
    !the screen, since we melt it in with the top window.

    backp_1;
    nextwindow_-1;
    incr i from 1 to 40 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] eql -1 then (reali_.i;exitcompound[2]);
	nextwindow_.linemap[.i];
    end;
    if .nextwindow eql -1 then begin
	backp_0;
	decr i from .modpos to 1 do begin
	    if .linemap[.i] eql .curwin then exitloop;
	    if .linemap[.i] eql -1 then(reali_.i;exitcompound[2]);
	    nextwindow_.linemap[.i];
	end;
    end;
    if .nextwindow eql -1 then return ctrlg();

    incr j from 1 to 132 do
	screen[.reali,.j]_"_";    !mark line with ___ as hit.

    !Otherwise there is a next window, and we melt now.
    wndsiz[.nextwindow]_.wndsiz[.nextwindow]+.wndsiz[.curwin]+1;
    wndfre[.curwin]_1;
    incr i from .wndorg[.curwin] to .wndorg[.curwin]+.wndsiz[.curwin]-1 do
	linemap[.i]_.nextwindow;
    if .backp then linemap[.wndorg[.curwin]-1]_.nextwindow
    else linemap[.wndorg[.nextwindow]-1]_.nextwindow;
    if not .backp then wndorg[.nextwindow]_.wndorg[.curwin];
    wset(.nextwindow);
end;
global routine ctrlx2 = begin local ctr;
    !^XC creates a new window. Uses .curline as the place to split it.
    if .inwind then redisp(0);	       !fix up screen first.
    ctr_0;
    incr i from 0 to numwnd-1 do begin
	if .wndfre[.i] eql 1 then exitloop;    !if found one.
	if .i eql numwnd-1 then begin  !if none free.
	    ToPrompt(plit asciz 'Too many windows');
	    return;
	end;
	ctr_.ctr+1;
    end;			       !for the loop;

    !If we make it here, then we have a window to use in .i
    if .repcount eql 1 then curline_.wndsiz[.curwin]/2
	else curline_ if .repcount+1 gtr .wndsiz[.curwin] then return ctrlg()
	    else .repcount+1;

    if .curline-1 leq 0 then return ctrlg();
    if .wndsiz[.curwin]-.curline leq 0 then return ctrlg();

    repcount_1;
    wndorg[.ctr]_.wndorg[.curwin]+.curline;
    wndfre[.ctr]_0;
    wndsiz[.ctr]_.wndsiz[.curwin]-.curline;
    wndsiz[.curwin]_.curline-1;
    wndlow[.ctr]_.lowend;	       !remember the place where we is.
    wndcrl[.ctr]_.curline-1;	       !and this too.
    wndbuf[.ctr]_.(bfblk2+1);       !the buffer name.
    linemap[.wndorg[.ctr]-1]_-1;    !mark it as having dashes.
    incr i from .wndorg[.ctr] to .wndorg[.ctr]+.wndsiz[.ctr]-1 do
	linemap[.i]_.ctr;
    goxy(1,.curline+.scroff);
    WhiteLine();
    writestring(separator);
    normalvideo();
    wset(.ctr);
    return;
end;
global routine uctrlz = begin
    local index,nextwindow,savarg,oldwin;
    ! Down a line
    oldwin_.curwin;
    savarg_.repcount;
    repcount_1;
    nextwindow_-1;
    decr i from .modpos to 1 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] neq -1 then
	    nextwindow_.linemap[.i];
    end;
    if .nextwindow eql -1 then return ctrlg();    !no following window.

    if .savarg geq .wndsiz[.nextwindow] then return ctrlg();

    index_.wndorg[.curwin]+.wndsiz[.curwin];      !the line of dashes.
    linemap[.index]_.curwin;
    linemap[.index+1]_-1;

    wndsiz[.curwin]_.wndsiz[.curwin]+1;
    wndorg[.nextwindow]_.wndorg[.nextwindow]+1;
    wndsiz[.nextwindow]_.wndsiz[.nextwindow]-1;
    if .savarg eql 1 then ctrll();
    repcount_.savarg;
    wset(.oldwin);
end;
global routine ctrlxz = begin
    local index,nextwindow,savarg,oldwin;
    ! Up a line.
    oldwin_.curwin;
    savarg_.repcount;
    if .savarg geq .wndsiz[.curwin] then return ctrlg();
    repcount_1;
    nextwindow_-1;
    decr i from .modpos to 1 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] neq -1 then
	    nextwindow_.linemap[.i];
    end;
    if .nextwindow eql -1 then return ctrlg();

    index_.wndsiz[.curwin]+.wndorg[.curwin];
    linemap[.index]_.nextwindow;
    linemap[.index-1]_-1;

    wndsiz[.curwin]_.wndsiz[.curwin]-1;
    wndorg[.nextwindow]_.wndorg[.nextwindow]-1;
    wndsiz[.nextwindow]_.wndsiz[.nextwindow]+1;
    if .savarg eql 1 then ctrll();
    repcount_.savarg;
    wset(.oldwin);		       !go back to original window
end;
global routine metabang = begin
    !This simply gets us the current line to the top of the screen.
    incr i from 1 to .curline-1 do ctrlz();
end;

end eludom
    