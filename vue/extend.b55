Module Extend = begin

bind zone1 = #2000;	       ! C-X ( commands in dispatch.

external getsymbol,getroutine,Toprompt,wrtnum;
external escvalue,metaprefix,xprefix;
external MaxPatches,initdispatch,modblk,errstr;
external discat,distbl,patsp,readch,writeloss,writestring;
external parmarray,freezone,MaxPPerFrame;
external rstk,cstk,csnum,rptr,parmarray,MaxPPerFrame;
external freestk,repcount,callchar,base,comchar,newcount;

external metam,asktty,ctrlg;
external ctrla,ctrlb,ctrlc,ctrld,ctrle,ctrlf,ctrlg,ctrll,ctrlk,ctrlm,ctrln;
external ctrlo,ctrlp,ctrlq,ctrlr,ctrls,ctrlt,ctrlv,ctrlw,ctrly,ctrlz;
external metaa,metab,metac,metad,metae,metaf,metak,metal,metam,metao;
external metap,metaq,metar,metav,metaw,metaz,metadel,metcw,metabang;
external metalt,metagt,metacp,metacn,metalc,metarc,metalb,metarb,rubout;
external Ictrls,Ictrlr,nextpage,lastpage,killmultiline;
external ctrlxv,ctrlxr,ctrlxw,ctrlxs,ctrlxf,ctrlxe,ctrlxi,ctrlxt;
external uctrlc,ctrlx2,uctrld,uctrln,uctrlp,uctrlz,ctrlxz;
external uctrlb,ctrlxb,uctrlo,ctrlar,metaar,metcar,ctrlat,ctrlxx;
external ctrlxx,ctrlxm,metac,metaquest,metaj;
external tabline,untabline,toleft,toright,metarp,metalp;
external clrkbf,appkbf;

forward metas,ctrlxl,uctrll;
forward extend,bindkey;

Global Deb000=0,Deb001=0,Deb002=0,Deb003=0,Deb004=0;

macro x(arg,name) = (plit asciz arg)<36,7>,name,$;

bind table = plit (

    X ('Miscellaneous:',	0)
    X ('Help Me',		metaquest)
    X ('Abort Operation',	ctrlg)
    X ('Extended Command',	extend)
    X ('Exit to Superior',	ctrlc)
    X ('Bind Function',		bindkey)
    X ('Bind Macro Slot',	ctrlxl)
    X ('Copy Key',		uctrll)
    X ('Major Mode',		Metam)
    X ('Set Mode Parameter',	Metas)
    X ('Terminal Type',		Asktty)
    X ('Begin Keyboard Macro',	ctrlxm)
 !  X ('End Keyboard Macro',	ctrlg)
    X ('Execute Keyboard Macro',metac)
    X ('Keyboard Macro Query',	metaa)
    X ('Load Macro Slot',	metal)

    X ('Cursor Manipulation:',0)
    X ('Backward Character',	ctrlb)
    X ('Forward Character',	ctrlf)
    X ('Up Text Line',		ctrlp)
    X ('Down Text Line',	ctrln)
    X ('Beginning of Line',	ctrla)
    X ('End of Line',		ctrle)
    X ('Forward Word',		metaf)
    X ('Backward Word',		metab)
    X ('Up Paragraph',		metalb)
    X ('Down Paragraph',	metarb)
    X ('Set-Erase Mark',	ctrlat)
    X ('Exchange Point and Mark',ctrlxx)

    X ('Screen Control:',	0)
    X ('Redisplay Screen',	ctrll)
    X ('Toggle Display Output',	metao)
    X ('Scroll Line to Top',	metabang)
    X ('Beginning of Screen',	metacp)
    X ('End of Screen',		metacn)
    X ('Next Screen',		ctrlv)
    X ('Previous Screen',	metav)
    X ('Beginning of Text',	metalt)
    X ('End of Text',		metagt)
    X ('Beginning of Page',	metalc)
    X ('End of Page',		metarc)
    X ('Next Page',		nextpage)
    X ('Previous Page',		lastpage)
    X ('Scroll Screen',		ctrlz)
    X ('Reverse Scroll Screen',	metaz)

    X ('Killing and Deleting:',	0)
    X ('Delete Character',	ctrld)
    X ('Rubout Character',	rubout)
    X ('Delete Word',		metad)
    X ('Rubout Word',		metadel)
    X ('Kill Line',		ctrlk)
    X ('Kill Multiline',	killmultiline)
    X ('Kill Region Mark',	ctrlw)
    X ('Kill Region String',	metaw)
    X ('Copy Region',		metcw)
    X ('Delete Horizontal Space',metak)
    X ('Restore Killed Text',	ctrly)
!   X ('Restore Previous Killed Text', metay)
    X ('Open Blank Lines',	ctrlo)
!   X ('Delete Blank Lines',	ctrlxo)	! Note this is already in use
    X ('Clear Kill Buffer',	clrkbf)
    X ('Append Kill Buffer',	appkbf)


    X ('Search and Replace:',	0)
    X ('Incremental Search',	Ictrls)
    X ('Reverse Search',	Ictrlr)
    X ('String Search',		ctrls)
    X ('Reverse String Search',	ctrlr)
    X ('Replace String',	metar)
    X ('Query Replace String',	metaq)
    X ('Match Left Parenthesis',metarp)
    X ('Match Right Parenthesis',metalp)

    X ('File Operations:',	0)
    X ('Visit File',		ctrlxv)
!   X ('View File',		uctrlv)
    X ('Read File',		ctrlxr)
!   X ('Find File',		ctrlxf) ! Note this is already in use
    X ('Write File',		ctrlxw)
    X ('Save File',		ctrlxs)
    X ('Finish File',		ctrlxf)
    X ('Save and Run Superior',	ctrlxe)
    X ('Insert File',		ctrlxi)
    X ('Execute File',		ctrlxt)

    X ('Window Operations:',	0)
    X ('Create Window',		uctrlc)
    X ('Split Current Window',	ctrlx2)
    X ('Delete Window',		uctrld)
    X ('Next Window',		uctrln)
    X ('Previous Window',	uctrlp)
    X ('Enlarge Window',	uctrlz)
    X ('Shrink Window',		ctrlxz)

    X ('Buffer Operations:',	0)
    X ('Select Buffer',		uctrlb)
    X ('List Buffers',		ctrlxb)
    X ('Read Killed Buffer',	uctrlo)
    X ('Kill Buffer',		ctrlg)	! Not implemented yet
    X ('Unmodify Buffer',	ctrlg)	! Not implemented yet

    X ('English Language:',	0)
    X ('Invert Case Character',	ctrlar)
    X ('Invert Case Word',	metaar)
    X ('Invert Case Region',	metcar)
    X ('Indent Line',		Tabline)
    X ('Unindent Line',		Untabline)
    X ('Indent Region',		Toright)
    X ('Unindent Region',	Toleft)
!   X ('Beginning of Sentence',	metaa)
!   X ('End of Sentence',	metae)
!   X ('Kill Sentence',		metak)
    X ('Transpose Characters',	ctrlt)
!   X ('Transpose Words',	metat)
!   X ('Transpose Lines',	ctrlxt)
!   X ('Transpose Regions',	uctrlt)
    X ('Justify Paragraph',	metaj)
    

    0, 0);

global routine approc(place,proc) = begin local oldvalue;
    ! proc  is the address of the procedure
    ! place is the index where it should go.

    if (MaxPatches<0,0>)*2+1 leq .patsp then begin
	errstr(plit asciz'Rebind space overflow, reseting with INIT mode.');
	initdispatch();
	(modblk+1)_sixbit'INIT';
	return;
    end;

    oldvalue_.distbl[.place];	       !the value there now.
    if (.oldvalue leq -zone1) or (.oldvalue geq 0) then begin
	!cdr code fault handler.
	discat[.patsp]_.oldvalue;
	discat[.patsp+1]_0;	       !nil at the end of the list.
	distbl[.place]_-.patsp;	       !point to us.
	patsp_.patsp+2;
    end;
    discat[.patsp]_.proc;	       !the procedure.
    discat[.patsp+1]_.distbl[.place];  !the next thing to do.
    distbl[.place]_-.patsp;	       !point to us.
    patsp_.patsp+2;
end;
global routine setproc(place,proc) = distbl[.place]_.proc;

global routine getpair = begin    ! standard command rebinder.
    bind CtrlxValue=#400;
    bind MetaValue=#200;
    local tc,toff;

    toff_0;
    tc_readch();	       !get the thing.
    if .tc eql "?G" then return (errstr(plit asciz'Cannot Do Rebind');-1);
    writeloss(.tc);
    if .tc eql .MetaPrefix then toff_MetaValue
    else if .tc eql .XPrefix then toff_CtrlxValue;
    if .toff neq 0 then begin
	tc_readch();
	if .tc eql "?G" then return (errstr(plit asciz'Cannot Do Rebind');-1);
	writeloss(.tc);
    end;
    return .toff+.tc;
end;
global routine uctrll = begin
    ! the rebinder.
    local old,new;
    ToPrompt(plit asciz'Copy key:');
    old_getpair();
    if .old lss 0 then return;
    WriteString(plit asciz' to new key:');
    new_getpair();
    if .new lss 0 then return;
    distbl[.new]_.distbl[.old];
end;
global routine bindkey = begin
    external repcount;
    local key,name;
    ToPrompt(plit asciz'Function Name: ');
    name _ GetRoutine(table);
    if .name eql -1 then return ctrlg();
    Writestring(plit asciz'Key: ');
    key _ getpair();
    if .key lss 0 then return ctrlg();
    distbl[.key]_..name;
    repcount_1;				
end;

global routine ctrlxl = begin
    !macro rebinder.
    local mname,new;

    ToPrompt(plit asciz'Macro Slot: ');
    mname_readch();
    if .mname geq "A" and .mname leq "Z" then mname_.mname+("a"-"A");
    if .mname lss "a" or .mname gtr "z" then begin
	errstr(plit asciz'Illegal Slot Name.');
	return;
    end;
    writeloss(.mname);
    WriteString(plit asciz' bind to key: ');
    new_getpair();
    if .new lss 0 then return;
    distbl[.new]_-(zone1+.mname-"a");
end;
global routine setparm = begin	       !^Xright square bracket
    local pn,oldcallchar,oldrepcount,oldtp,tbp,tc;

    pn_readch();	       !read which parameter we are.
    pn_.pn-"0";			       !adjust it.
    ! First we handle the prompt stuff.
    ToPrompt(plit asciz'');
    while 1 do begin		       !get chars until altmode.
	tc_readch();
	if .tc eql .EscValue then exitloop;
	writeloss(.tc);
    end;
    rptr_.rptr-2;
    oldcallchar_.rstk[.rptr];
    oldrepcount_.rstk[.rptr+1];
    oldtp_.cstk[.csnum];
    csnum_.csnum-1;
    tbp_.freezone;		       !the first free byte in parmland.
    while 1 do begin		       !read chars from caller to EscValue
	tc_readch();
	writeloss(.tc);		       !and echo it.
	if .tc eql .EscValue then exitloop; !we are done.
	replacei(freezone,.tc);	       !plug it in.
    end;
    replacei(freezone,"?]");	       !part of the return sequence.
    replacei(freezone,"r");	       !the rest thereof.
    csnum_.csnum+1;		       !now restore I/O attachments.
    cstk[.csnum]_.oldtp;	       !in the samemanner as above.
    rstk[.rptr+1]_.oldrepcount;
    rstk[.rptr]_.oldcallchar;
    rptr_.rptr+2;

    parmarray[.csnum*MaxPPerFrame<0,0>+.pn]_.tbp; !remember the parm.
end;
global routine popio = begin
    if .csnum eql 0 then return;   !already popped to top.
    csnum_.csnum-1; !return from qregister.
    rptr_.rptr-2;
    repcount_.rstk[.rptr+1];
    callchar_.rstk[.rptr];
    base_#200;
    comchar_#143; !metac
    newcount_0;
end;


Global routine extend = begin
local i;
external repcount;
    ToPrompt(plit asciz 'Meta-X ');	! Print M-X
    i _ GetRoutine(table);		! Use table from Module
    if .i neq -1 then while .repcount gtr 0 do begin
	if ..i neq 0 then (..i)();	! Attempt to use this.
	repcount _ .repcount -1;
    end;
    repcount_1;				! reset so subtract = 0
    return;
end;


Global routine metas = begin
    local parameters;

    macro iudent=(owns)$;
    macro spacect=(owns+1)$;
    macro tabwidth=(owns+2)$;
    macro indend=(owns+3)$;
    macro commentpos=(owns+4)$;
    macro z(arg,val) = (plit asciz arg)<36,7>, val,$;

    global hatuvl=4,sefmod=1,sosmod=1;
    external owns,baudrate,autoinc,statusline;


    parameters_plit (
    Z ('Baud Rate',			baudrate)
    Z ('Argument Multiplier',		hatuvl)
    Z ('Center Screens',		sefmod)
    Z ('Indentation Width',		tabwidth)
    Z ('Right Justification Margin',	iudent)
    Z ('Page Mode',			sosmod)
    Z ('Autosave Frequency',		autoinc)
    Z ('Escape Value (not meta)',	EscValue)
    Z ('Meta Prefix Value',		metaprefix)
    Z ('Control-X Prefix Value',	xprefix)
    Z ('Status Line',			statusline)
    Z ('Comment Position',		commentpos)
    Z ('Debug 0',			deb000)
    Z ('Debug 1',			deb001)
    Z ('Debug 2',			deb002)
    Z ('Debug 3',			deb003)
    Z ('Debug 4',			deb004)
	0,0);
    ToPrompt(plit asciz 'Mode parameter: ');
    GetSymbol(.parameters);
end;

end eludom
 