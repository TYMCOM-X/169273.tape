Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
VUE	*			*	Main Program			Reset, Clrkbf, Coresize, BufIni, GetPPN, CclStuff
									DoRescan, Asktty, InitDispatch, Qreg, Replacei
									Fef, Exini, Clearscreen, Winit, Reader
	G Clrkbf		Clear	Clear killbuffer
	G Appkbf		Append	Append kill to killbuffer
	G Killforward(copyflag)	*	Kill/Copy into killbuffer	Getchxr(.lowend),  Replacei(kilptr, .cc)
	G Delforward		*	Delete one char forward
	G Delbackward		*	Delete one char backward	Moveback(1), Killforward(0)
	G Setchar(i,q)		*	Put .char in buffer at .i
	G Getc(p,i)		*	Get char at (p,i)
	G Setc(p,i,c)		*	Set char (c) at (p,i)
	G Insertchar(i)		*	Insert a character at (i)	Coresize(512), setchar(.lowend-1,.i)
	G Echord		*	Read a char & echo it or abort	Readch, Writestring, Writeloss
	G Metalt		M-<	Move to top of file/buffer	Moveback
	G Metagt		M->	Move to end of file/buffer	Moveforward
	G Ctrlg			C-G	Abort				ToPrompt(s)
	G Errstr(foo)		*	Print an error message		ToPrompt()
	  FileRead		*	Common file stuff		Filescan, Errstr, Open, Buffers, Lookup(4...)
	G Ctrlxt		C-X @	Setup take from a file		Errstr, Ctrlg, ToPrompt, Getstr, FileRead
	G Exini			*	Setup take from 'DSK:FINE.INI'	FileRead, Getaun
	G Metac			C-X E	Execute a macro			Errstr, Ctrlg, Readch, Qreg
	G Metap			C-X )	Return to editor
	G Zapmac		*	Finish up a macro?
	G Ctrlu			C-U	Set argument count .hatuvl	Readch
	  Commonwrite		*	Write buffer to file		Fixfil, Open, Buffers, Enter, Close, Muncho, ToPrompt
									Writestring
	  Finishbuffer		*	Write buffer			ToPrompt, Commonwrite, Combuf(1), Close(2)
	  Exitbuffer		*	Write buffer			ToPrompt, Finishbuffer, Writestring, Ttyzap, Cucl
									CCLmultix, Quit
	G Ctrlxs		C-X C-S	Save current buffer		Finishbuffer
	G Ctrlxe		C-X C-E	Write file & Go			Exitbuffer
	G Ctrlxf		C-X C-E	Write file & Quit or Go		Exitbuffer
	G Ctrlxw		C-X C-W	Write current buffer to file	ToPrompt, Getstr, Filescan(filblk), Ctrlg, Commonwrite
	G Munchnnl(line,p,xit)	*	Read buffer & succeed/fail	Writestring, Readch, Goxy, Clearline, Flubfr, Writeloss
	G Munchline(line,p,xit)	*	Read buffer & Return S/Fail	ToPrompt, Munchnnl, Writeloss, Flubfr
	G Ctrlxx		C-X C-X	Exchange point and mark		Metagt, Moveback, Moveforward
	  Killtext(killflag)	*	Kill text between point & mark	Errstr, Ctrlxx, Clrkbf, ToPrompt, Readch, ToStatus
									Writestring, Replacei, Killforward(0), Moveforward(1)
	G Ctrlw			C-W	Wipe text to mark		Killtext(1)
	G Metcw			M-C-W	Copy text to mark			Killtext(0)
	G Ctrls			M-S	"Complete" Search Mode forward	Munchline, Errstr, Therep, Moveforward
	G Ctrlat		C-@	Set character mark		ToPrompt
	G Horizspace(tc)	*	Return True if .tp=sp or tab
	G Whitespace(tc)	*	Return True if .tp=sp,tab or cr
	G Wbreak(foo)		*	True if not alphanumeric
	G Ctrlr			M-R	"Complete" Reverse search	Munchline, Errstr, Therep, Moveback
	G Dispatch		*	Dispatch off to character rtn*	Insertchar, Errstr, Qreg, (.tp)()
	G Reader		*	Main Editor Loop		Setlab, Ttyidle, Autoloss, Redisp(0)(1), Readch, Dispatch
	G Ctrlxm		C-X (	Define a macro			ToPrompt, Readch, Writeloss, Errstr, Writestring
									Qreg, Replacei

Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
VUE (continued)
	G Metaw			M-W	Wipe to string [ctrls()ctrlw()]	Ctrlat, Ctrlr, Ctrls, Moveback, Ctrlw
	G Ctrla			C-A	Move to beginning of line	Getchxr(.lowend-1), Moveback(1)
	G Ctrlb			C-B	Move back 1 char		Moveback(1), Zapmac
	G Metab			M-B	Move backwards 1 word		Ctrlb, Whitespace, Getchxr, Zapmac, Wbreak
	G Ctrlc			C-C	Exit				ToPrompt Ttyzap Quit
	G Ctrld			C-D	Delete forward 1 character	Killforward(0), Zapmac
	G Metad			M-D	Delete forward 1 word		Whitespace, Getchxr, Ctrld, Zapmac, Wbreak
	G Ctrle			C-E	Move to end of line		Getchxr, Moveforward(1)
	G Ctrlf			C-F	Move forward 1 char		Moveforward(1), Zapmac
	G Metaf			M-F	Move forward 1 word		Whitespace, Getchxr, Ctrlf, Zapmac, Wbreak
	G Ctrlk			C-K	Kill text to EOL, Kill line	Clrkbf, Zapmac, Getchxr, Killforward(1), ToPrompt
	G Killmultiline		....	Kill text to EOL, Kill lines	Clrkbf, Zapmac, Getchxr, Killforward(1), ToPrompt
	  GetPos(npcol)		*	Return pos at end of redisp	Getchxr, UpdateCursor
	G Ctrln2		*	Forward, Return T if FF else F	Zapmac, Moveforward(1), Getchxr
	G Ctrln			C-N	Move cursor down 1 line		Getpos, Ctrln2, Getchxr, Updatecursor, Ctrlf
	G Ctrlo			C-O	Open a line			Insertchar(cr), Moveback(1)
	G Ctrlp2		*	Move back 1; see Ctrln2*	Zapmac, Moveback(1), Getchxr, Ctrla
	G Ctrlp			C-P	Move up to previous line	GetPos, Ctrlp2, Getchxr, UpdateCursor, Ctrlf
	G Ctrlq			C-Q	Insert quoted character		Insertchar(readch())	
	G Ctrlt			C-T	Transpose previous 2 characters	Ctrlg, Getchxr, Setchar
	G Ctrlv			C-V	Scroll screen to next page	Ctrln2
	G Metav			M-V	Scroll screen to previous page	Ctrlp2, Ctrln2
	G Metacn		Old M-.	Move to bottom of window	Ctrln2, Ctrlp2, Ctrle
	G Metacp		Old M-,	Move to top of window		Ctrlp2, Ctrla
	G Rubout		<del>	Delete backwards 1 char		Zapmac, Delbackward
	G Metadel		M-<del>	Delete backwards 1 word		Metab, Moveforward(n), Delbackward
	G Ctrly			C-Y	Restore killed text		Insertchar, Scani
	G Metarp		M-)	Find matching left paren	Getchxr, Ctrlg, Ctrlf, Ctrlb
	G Metalp		M-(	Find matching right paren	Getchxr, Ctrlg, Ctrlb, Ctrlf

Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
REDISP	O Inwind=0, Linmax[30]=(30:1)
	G Redisp(checkflag)	*	Redisplay screen if necessary	Getchxr, Defwindow, Caliad, Idc, Ttyidle, Flubfr
									UpdateCursor, Goxy, Clearline, Writeloss, Dostatus
	G Metao			M-O	Toggle screen echo of commands

IDLINE	  Cost(i,j)		*	Calculates costs per ... line?
	  Draw(i)		*	Drawing cost per ... line?
	  Merge(cstyle,comptr)	*	???
	G Caliad(argplace)	*	Calculate nhash[*] shift screen	Getchxr, Draw, Goxy, Dellin, Merge, Inslin


IDCHAR	G Idc(firstchar,line)	*	Update data @f, screen @line	Getchxr, UpdateCursor, Goxy, Inschar, Delchar


STATUS	  Writesix(word)	*	Types sixbitz contents of word	Scani, Writeloss
	G Dostat		*	Write status line information	Putch, ToStatus, InverseVidio, Whiteline, Writestring, 
									Writeloss, WrtOct, WriteSix, Gbmod, Mail, NormalVideo

JUST	G Pbreak(i)		*	T if i-th char at par-break	Getchxr
	  Aebreak(i)		*	T if i-th char is "@" or "."	Getchxr
	G Apbreak(i)		*	T if i-th char at e.o.par-break	Getchxr
	  Findbreak(i)		*	Returns (apbreak) at/before .i	Apbreak
	  Chopline(lastbreak,linpos)	Returns linpos, breaking line	Moveback(n), Insertchar(cr), Getchxr, Delbackward
									Moveforward
	G Just(linwid)		*	Justify/fill from . to e.o.par	MoveForward(1), Getchxr, UpdateCursor, Pbreak, DelForward
									Insertchar, Setchar, Chopline
	  EmptyLine(i)		*	True if at C-M or C-L character	Getchxr
	G Metaj			M-J	Justify text (current)		ToPrompt, Ctrla, EmptyLine, Ctrln2, Aebreak
									MoveBack, Apbreak, MoveForward, Just
	  FwdToVis		*	Moves forward to a visible char	Getchxr, MoveForward
	  ToStartPar		*	Moves forward to b.o.paragraph	Apbreak, Ctrlp2, Ctrln2, Fwdtovis
	  UpOnePar		*	Moves back to beginning of par	Aebreak, Ctrlp2, Emptyline, Ctrle, MoveForward
	G Metalb		M-[	Move back to par break beg/end	MoveBack(1), Getchxr, MoveForward(1), Apbreak, Aebreak
									ToStartPar, Ctrlp2, Emptyline, Ctrln2, Fwdtovis, Ctrle
									UpOnePar
	  ToEndPar		*	Moves to end of paragraph	Ctrln2, Apbreak, Emptyline, Ctrle
	  DownOnePar		*	Moves to bottom of paragraph	Emptyline, Ctrln2, MoveBack(n), Aebreak, FwdToVis
	G Metarb		M-]	Move forward to par beg/end	Ctrla, Emptyline, Ctrln2, Aebreak, Ctrle, ToEndPar
									Ctrlp2, FwdToVis, Apbreak, DownOnePar
	G Ctrlz			C-Z	Scroll screen up 1 line		Metacp, Ctrln2, Ctrlxx
	G Metaz			M-Z	Scroll screen down 1 line	Metacp, Ctrlp2, Ctrlxx
	G Ctrlar		C-^	Invert the case of 1 char	Ctrlg, Getchxr, Setchar, Ctrlf
	G Metaar		M-^	Invert the case of 1 word	Whitespace, Getchxr, Ctrlf, Ctrlar, Zapmac, Wbreak
	G Metcar		M-C-^	Invert the case from point-mark	Ctrlg, Ctrlxx, Ctrlar
	G Metak			M-\	Kills blankspace		Ctrlg, Getchxr, Delforward
Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
WINDOW	G Winit			*	Init windows & line length	Ttyin2
	G Wset(awindow)		*	Set new window to this one.	Getppn, Combuf(0), MoveBack(n), MoveForward(n)
	G Uctrlc		C-X C	Create new window @ curline	Redisp(0), ToPrompt, Ctrlg, Ctrlp2, Goxy, Whiteline
									Writestring, NormalVidieo, Wset
	G Ctrll			C-L	Redisplay window		DefWindow, Clearscreen, Goxy, Whiteline, Writestring
									Wset, Redisp(0)
	G Uctrlp		C-X P	Previous window			Ctrlg, Wset
	G Uctrln		C-X N	Next window			Ctrlg, Wset
	G Uctrld		C-X D	Delete window			Ctrlg, Wset
	G Metalc		M-{	Go to top of SOS page		Getchxr, MoveBack(1)
	G Lastpage		C-X [	Go to top of previous page	Getchxr, Ctrlg, MoveBack(n)
	G Metarc		M-}	Go to bottom of SOS page	Getchxr, MoveForward(1)
	G Nextpage		C-X ]	Go to bottom of next page	MoveForward(1), Getchxr, MoveBack(n), Ctrlg
	G Ctrlx2		C-X 2	Split screen into 2 windows	Redisp(0), ToPrompt, Ctrlg, Goxy, Whiteline, Writestring
									NormalVideo, Wset
	G Uctrlz		C-X Z	Enlarge by scroll window down	Ctrlg, Ctrll, Wset
	G Ctrlxz		C-X C-Z	Shrink by scroll window up	Ctrlg, Ctrll, Wset
	G Metabang		M-!	Move this line to top of window	Ctrlz

CURSOR	  Escape(char)		*	Putch(escape) Putch(char)	Putch
	  Padd(count)		*	Output count Imout(del/Null)	Imout
	G Ttyzap		*	Reset terminal itself		Clearscreen, Escape, Putch, DefWindow, Goxy
	G Delchar *(count)	*	Delete chars on screen		Escape, Putch
	G Inschar *(count)	*	Insert space on screen		Escape, Putch
	G Ttyin2		*	S:Modpos,Linez,Wndsiz[0],Scrsze
	G Ttyini		*	Setup Window,Clines,Ccols	GetLen, GetWid, Escape, Putch, DefWindow
	G ToPrompt		*	Move cursor to prompt area	DefWindow, Goxy, Clearline, Writestring, Flubfrn
	G ToStatus		*	Move cursor to status area	DefWindow, Goxy, Clearline
	G Defwindow(x,y,Wid,Len)*	Setup window xy_startloc	Escape, Wrnum, Vt100SetRegion
	  Vt100setregion(t,b)	*	Setup window for vt100(top,bot)	Escape, Wrnum, Putch
	G Inslin(times)		*	Insert (times) lines		Escape, Putch, Padd, Wrnum, Vt100SetRegion
	G Dellin(times)		*	Delete (times) lines		Escape, Putch, Padd, Wrnum, Vt100SetRegion
	G Clearscreen		*	Clear the screen		Ttyini, Putch, Defwindow, Escape, Padd, Home
	G Leftmargin		*	Put the cursor in left margin	Putch, Escape
	G Home			*	Position at top left of screen	Putch, Escape, Padd
	  Goline(n)		*	Move the cursor to line n
	G Goxy(xloc,yloc)	*	Position the cursor at xloc,yloc
	  yxechar(ch)		*	Esc ch y+40 x+40
	  xychar(ch)		*	Ch x+40 y+40
	  yxchar(ch)		*	Ch y+40 x+40
	  xynum(ch)		*	Ch wrnum(x) wrnum(y)
	  yxnum(ch)		*	Ch wrnum(y) wrnum(x)
	  xyenum(ch)		*	Esc xynum(ch)
	  yxenum(ch)		*	Esc yxnum(ch)
	  xyhp26xx		*	Esc & a wrnum(y) y wrnum(x) C
	  xydm2500		*	#14 (x xor #140) (y xor #140)
	  xydm1500		*	#36 x+40 y
	  xyvt100		*	Esc [ wrnum(y+1) ; wrnum(x+1) H
	  xyhazeltine		*	#176 #21 x y
	  xybantam		*	Esc Y x+40 esc X y+40
	G Clearline		C-K	Clear current line to EOL	Putch, Escape, Padd
	G Asktty		*	Get the users Ttytype		Gettty, SelectTTY, CaseTTY, Getusr
	  SelectTTY(Sometype)	*	Return numeric TTYType
	  CaseTTY(TTYNumber)	*	Return sixbit TTYType
	  Getusr		*	Ask the user for a TTYType	ToPrompt, Readch, Clearscreen, ToStatus
	G Whiteline		*	Funny Inversevidieo stuff	ClearLine, InverseVideo
	G Inversevideo		*	Change line to inverse video *	Escape, Putch
	G Normalvideo		*	Change  line to normal video!	Escape, Putch
Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
BUFFER	G Bufnam(request)	*	Return MAINxx where xx is job #	GetJob, HexDigit
	  HexDigit(Number)	*	Return a Hexidecimal digit
	G Bufinit		*	Init all buffers		Bufnam
	G Uctrlb		C-X B	Change to new buffer name $	ToPrompt, Bufnam, Getppn, Getstr, Filescan, Ctrlg, Combuf(0)
	G Filbuf		*	Common file stuff		Open, Buffers, Loopop, Munchi, ToPrompt, Close(2), Relcore
	G Ctrlxr		C-X C-R	Readfile & Update core		ToPrompt, Getstr, Filescan, Ctrlg, Errstr, Filbuf
	G Ctrlxv		C-X C-V	Visit a new file (buffer) $	ToPrompt, Getstr, Filescan, Ctrlg, Existsbuf, Getppn
									Combuf(0), Filbuf
	G Uctrlo		C-X C-O	Restore old buffer $		ToPrompt, Bufnam, Getppn, Getstr, Fielscan, Ctrlg, Combuf(2)
	G Combuf(autop)		*	Write/save/read/restore buffers	AddBuf, Open, Enter, ToPrompt, Close(2), Dmpout
									Gbnum, Realup, Dmpin
	G Existsbuf(bname)	*	Return 0 or index of buf bname
	G Addbuf(bname)		*	Return 0(old),set allbufs[new]	ToPrompt
	G Ctrlxb		C-X C-B	List buffers in use, * modified	ToPrompt, Writeloss, Scani
	G Gbnum(bname)		*	Return i of buffer named bname
	G Gbmod(bname)		*	Return modification-P of bname	Gbnum
	G Autoloss		*	Check & do auto-saves of buffer	ToPrompt, Flubfr, Combuf(1), Close(2), Writestring
	G Cclstuff		*	Look through EDT,EDS files	Dotmpcor('EDT'&'EDS',2,xbuffer,30), Filescan, Ctrlg, Filbuf
	G Cclmultix		*	Setup name! for compil/rpg	Incp, Scani, Replacen, Scann, Cucl, Quit
									Filescan, Ctrlg, Filbuf
	G Ctrlxi		C-X C-I	Insert file at point		ToPrompt, Getstr, Filescan, Ctrlg, Open(2..)
									Buffers, Realup, Incp, Munchi, Close(2)

TMP	G Tmpcor(nam,c,buf,len)	*	Do tmpcore code c using nam, buf, len
	G Dotmpcor(nam,c,b,len)	*	Same as Tmpcor, but uses dsk if req.
	G Tmpdsk(nam,c,buf,len)	*	Writes ###nam.TMP on dsk
	G Corecheck		*	Increase core; hend+2560 bytes	Coresize, Setchar


SYMS	  WrtRadix(num,radix)	*	Output num in radix		Replacei, Writestring
	G WrtNum(OutNum)	*	Output decimal number		WrtRadix(Num,10)
	G WrtOct(OutNum)	*	Output octal number		WrtRadix(Num,8)
	G GetSymbol(Tableaddr)	*	Find and set symbols in table	Readch, Goxy, Clearline, Ctrlg, Clearscreen, Writestring
									Wrtnum, Ctrll, Writeloss, Scani, Scann
	G GetRoutine(Tableaddr)	*	Execute routine in table	Readch, Goxy, Clearline, Ctrlg, Clearscreen, Writestring
									Wrtnum, Ctrll, Writeloss, Scani, Scann

GETSTR	G Getstring(pointer)	*	Builds long string		Readch, Isctrlchar, Scann, Goxy, Incp, Clearline
									Replacei, Writeloss, Scani, Flubfr

MLOAD	G Metal			M-L	Load a macro from the buffer	ToPrompt, Readch, Ctrlg, Qreg, Metalt, Replacei
									MoveForward(1)

EXTEND	G Approc(place,proc)	*	Applys mode change (saves chg)	Errstr
	G Setproc(place,proc)	*	Sets a single procedure change
	G Getpair		*	Return a command for rebinding	Readch, Errstr, Writeloss
	G Uctrll		CopyKey	Rebind from key1 to key2	ToPrompt, Getpair, Writestring
	G BindKey		BindKey	Rebind function name to key	ToPrompt, GetRoutine, Ctrlg, Writestring, Getpair
	G Ctrlxl		C-X C-L	Rebind from macro to key	ToPrompt, Readch, Errstr, Writeloss, Writestring, Getpair
	G Setparam		C-X ]	Set parameter n			Readch, ToPrompt, Writeloss, Replacei
	G Popio			*	Return from q-reg command
	G Extend		M-X	Execute Extended command	ToPrompt, GetRoutine, (..i)()
	G Metas			M-*	Set symbols for variables	ToPrompt, GetSymbol
Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
MODES	G Myspace		+ <sp>	Word to nextline if > .iudent	*** Lots of calls ***
	G Text			*	Set text mode; myspace,mycj	Approc(cr,sp,=myspace), Setproc(lf=,ycj)
	G Bliss			*	Set bliss mode; M-1_docomment	Setproc(lf=Mylf)
	G Docomment		+ M-1	Move to commentpos & !		GetPos, Ctrle, Insertchar(sp,tab,!), UpdateCursor
	G Getpos		*	Return end of line position	Ctrla, Getchxr, UpdateCursor, Ctrlf
	G MetaBS		M-\	Tab to absolute cursor position	Ctrle, Getpos, Insertchar(sp)
	G Untabline		M-U	Untabify line			Getind, Ctrla, Horizspace, Getchxr, DelForward, Doend, Ctrle
	G Tabline		M-I	Tabify line			Getind, Ctrla, Horizspace, Getchxr, DelForward, Doend, Ctrle
	G Allwhite		*	Return 0 if non-wh before eol	Ctrla, Getchxr, Whitespace, Ctrlf
	G Stringp(astring,wordp)*	Searches for a string on line	Wbreak, Getchxr, Scani
	G Linep(keyword)	*	Is string on line < comment	Ctrla, Getchxr, Stringp, Ctrlf
	G Elinep(keyword)	*	Is string last on line		Ctrla, Getchxr, Stringp, Wbreak, Ctrlf, Metab
	G Getind		*	Index nextwhere to tab to/from	Ctrla, Getchxr, MoveForward(1)
	G Calcind		*	Calculate next tab to/from
	G Doend			*	Insert Tab/sp until in position	Insertchar(tab,sp)
	G Mylf			+ C-J	Fancy LF routine, chk keywords	AllWhite, Ctrla, Insertchar(cr), Ctrle, Linep, Elinep
									Ctrln2, Untabline, Getind, Calcind, Insertchar(cr), Doend
	G Toleft		+ M-C-U	Untabify lines to mark-line	Ctrlg, Ctrla, Ctrlxx, Untabline, Ctrlp2
	G Toright		+ M-C-I	Tabify lines to mark-line	Ctrlg, Ctrla, Ctrlxx, Tabline, Ctrlp2
	G Mycj			+ C-J	Normal (clean) LF command	Ctrla, Getchxr, MoveForward(1), Ctrle, Insertchar(cr,tab,sp)
	G Metam			MajorM	Set mode package Major Mode	ToPrompt, Getstr, Filescan, Ctrlg, Bliss, Text
									Abinit, InitDispatch, Pascal

FILESC	  Scan(Block)		*	Scan the text
	  AsciiToSix		*	Convert Ascii to Sixbit
	  Type			*	Type check
	  Getsix		*	Get a Sixbit Token		Type, Replacei, AsciiToSix, GetSix, CMUDEC, Getchar
	  Getch			*	Read a character		Ildb(Vreg,Ptr)
	G Filescan(P,Block)	*	Scan a file-spec		Scan(Block)

Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
VIEW	G Reset			*	Reset the world, chk TP license
	G Runccl		*	Run SYS:(a) at RPG address
	G Cucl			*	Reset terminal & run (SYS)RPG
	G RunRPG		*	Run (SYS)RPG at the RPG address
	G Runcca		*	Run (e--e+5) at the RPG address
	G Fef			*	Setup terminal for editor
	G Fen			*	Reset terminal/echo/paging...	Flubfr
	G Relcor		*	Releases Core?			E$$NEC
	G Coresize(addwords)	*	Get addwords more core		E$$NEC
	G Ttyidle		*	Return True if tty is idle
	G Readch(char)		*	Read a char, return it in V	Flubfr, Read, MetaP
*	G Fixfil		*	Renames .BAK files around	E$$COD
	G Munchi(pointer)	*	Munch input file
	G Muncho(pointer)	*	Munch output file
	G Putch(char)		*	Output a character (into buffer)
	G Flubfr		*	Flush buffer to terminal
	G Writestring(foo)	*	Output Asciz string		Scani, Writeloss
	G Writeloss(foo)	*	Output Ascii char		Putch, Leftmargin, UpdateCursor
	G Updatecursor(xc,xpos)	*	Update xpos after char xc
	G Qreg)		*	Return a real qreg number?
	G Dorescan		*	Rescan & do command via rsrxxx
	G Setlab		*	Save stuff & set reenter addr
	G Quit			*	Fen (exit 1) Fef return		Fen, Fef
	  Exerr			*	Exit code for abortion errors	Fen, Fef
	  Readr			*	.Reenter address		Fef
	G Realup(lookupblock)	*	Short Lookup for a file
	G lookop		*	Extended Lookup: filblk/lblk
	G GetTTY		*	Read users ttytype
	G GetWid		*	Get terminal width
	  GetAux		*	Get an arbitrary Axucal (a)
	G GetLen		*	Get terminal length setting
	G Mail			*	Get Mail-Waiting status
	G GetNam		*	Get Program name
	G GetLic		*	Get User's License
	G GetPrv		*	Get User's Privilage word
	G GetFPN		*	Get Frame PPN of this program
 	G GetAUN		*	Read users AUN (Logged in PPN)
 	  Getab			*	Internal Gettab routine
 	G GetPPN		*	Read users GFD'd PPN
	G GetJob		*	Read users Job number (PJOB)
	G Imout(char)		*	Output a char in image mode
	G Wrnum(number)		*	Write a number to terminal (*)	Flubfr, Putch, Imout
	G Moveforward(n)	C-F	Move forward n bytes
	G Movebackward(n)	C-B	Move backwards n bytes
	G Dmpin(chan,addr,size)	*	Read into a block
	G Dmpout(chan,addr,siz)	*	Write from a block
	G Getchxr(i)		*	Get char at (i)
	G Therep(line,chrptr)	*	Find string at point, return point
	G Ftp(line,ptr)		*	Fast version of therep
	  E$$COD		*	Cannot Open Device		Exerr
	  E$$NEC		*	Not Enough Core			Exerr
	  E$$JUF		*	JOBSTR UUO Failure		Exerr
Module	Routine(Params)			Function			Subroutine Calls
------	---------------			--------			----------------
DISPAT	G Initdispatch		*	Initialize dispatch tables
	G Metae			M-E	Call to editor (recursively)	Obsolete

ISERCH	  Wgoxy			*	?				Defwindow, Goxy
	G Srchstring(prompt)	*	Prompt & write .sst to screen	ToPrompt, Writeloss, Flubfr
	  Isdel			*	Delete char in search		MoveBack(1), Wgoxy, Clearline, Therep, MoveForward(n)
									SrchString
	  Irdel			*	Delete char in reverse search	Wgoxy, Clearline, Therep, Srchstring
	  Iesc			*	Terminate search, restore table	Wgoxy, Writeloss, Flubfr
	  Iserch		*	Do search			Wgoxy, Writeloss, Flubfr, MoveBack(n), Therep, MoveForward
									Putch, SrchString
	  Isquote		*	Read char & do search		Readch, Iserch
	  Irserch		*	Do reverse search		Wgoxy, Writeloss, Flubfr, MoveForward(n), Therep
									MoveBack(n), Putch, SrchString
	  Irquote		*	Read char & do reverse search	Readch, IRserch
	  Isnext		*	Find next occurrance of search	SrchString, Therep, MoveForward(n), Putch
	  Irnext		*	Find next occurrance of search	SrchString, Therep, MoveBack(n), Putch
	  RtoS			*	Change from r-search - s-search	SrchString, ISNext
	  StoR			*	Change from s-search - r-search	SrchString, IRNext
	G Ictrls		C-S	Incremental search		ToPrompt
	G Ictrlr		C-R	Incremental reverse search	ToPrompt


QREPL	G Genreplace		*	Search-Replace routine		Munchline, Ctrlg, Therep, MoveForward(n), Redisp(1), Readch
									Clearscreen, Outstr, Ctrll, DelBackward, Insertchar
									ToPrompt
	G Metaq			M-%	* Query replace			GenReplace
	G Metar			M-$	* Nonquery replace		GenReplace
	G Metaa			C-X Q	Macro Query for affirmative	Redisp(1), Readch, Ctrlg, Metap


HELP	G Metaquest		M-?	Crummy On-Line help		Clearscreen, Outstr, Readch, Ctrll


ABBREV	G AbSpace		*	?				WhiteSpace, Getchxr, Scani, Rubout, Insertchar
	G AbInit		MxABBRE	Initialize Abbreviation mode	SetProc, ApProc
	G AbDefine		C-X C-A	Define an abbreviation		AbReset, ToPrompt, Munchnnl, FindAb, Replacei, Writeloss
	G AbReset		*	Reset abbreviations
	G FindAb		*	Find an abbreviation in list	Scani

    v@&Q