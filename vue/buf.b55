module buffer = begin
machop calli = #047;
bind extra=100;
bind MaxBufs=100;

external coresize,relcore,getppn,toprompt,ctrlg,dotmpcor,quit,cucl;
external open,buffers,enter,close,dmpin,dmpout,munchi,filescan;
external realup,lookop,writeloss,writestring,getstr,errstr;
external curline,filblk,ppn,defdsk,dskbfh,dskbuf;
external p,lowend,hend,hbot,flush,hitsts,scrmod,muline;
external vector bnames;
external vector bfblk1[6];	!where we keep the buffer name.
external vector bfblk2[6];	!and storage for another.

global allbufs [MaxBufs],allmod[MaxBufs];
global curbuf = 0;
global autoinc,autotime,autowrit;
global xbuffer[30],tp,xeflag;			% watch for .tp problems %

global routine bufnam(request) = begin
    external getjob;
    local job,chr;
    routine Hexdigit(number) = 
	if .number lss 10 then return(.number+#20)	! .n + sixbit "0"
	  else return (.number+#27);			! .n + sixbit "A"-10.

    Job_getjob();
    request<6,6>_Hexdigit(.Job<4,4>);
    request<0,6>_Hexdigit(.Job<0,4>);
    Return(.request);
    end;

global routine bufinit = begin
    incr i from 0 to MaxBufs-1 do allbufs[.i]_0;
    incr i from 0 to MaxBufs-1 do allmod[.i]_0;
    allbufs[0]_bufnam(sixbit 'main');
    (bfblk1+1)_.allbufs[0];
    (bfblk2+1)_.allbufs[0];
    end;

global routine existsbuf (bname) =begin
    incr i from 0 to MaxBufs-1 do begin
	if .bname eql .allbufs[.i] then return 1;
    end;
    return 0;
end;
global routine AddBuf (bname) = begin local seen;
    seen_-1;
    incr i from 0 to MaxBufs-1 do begin
	if .bname eql .allbufs[.i] then return 0;
	if .allbufs[.i] eql 0 then seen_.i
    end;
    if .seen eql -1 then begin
	ToPrompt(plit asciz'Too many buffers');
	decr i from MaxBufs-2 to 0 do allbufs[.i+1]_.allbufs[.i];
	seen_0
    end;
    allbufs[.seen]_.bname;
    return 1
end;

global routine ctrlxb = begin local tp,tc;
    ToPrompt(plit asciz'');
    incr i from 0 to MaxBufs-1 do begin
	if .allbufs[.i] eql 0 then exitcompound;
	if .allmod[.i] neq 0 then writeloss("*");
	tp_(allbufs-1+.i)<0,6>;
	incr j from 1 to 6 do begin
	    tc_scani(tp);
	    tc_.tc+#040;
	    writeloss(.tc)
	end;
	writeloss(" ");
    end;
end;

global routine gbnum (bname) =
    incr i from 0 to MaxBufs-1 do
	if .allbufs[.i] eql .bname then return .i;

global routine gbmod(bname) = .allmod[gbnum(.bname)];

Global Routine Filbuf = Begin
    hbot_.hend;				! No Text left
    lowend_1;				! Begin at 1
    ppn_.(filblk+4);			! Current ppn
    open (2,0,.filblk,dskbfh<0,0>);	! Current file block
    buffers (2,1,1,dskbuf);		! ..get a formatted disk buffer.

    if lookop() then munchi ((.p+extra/5)<1,7>)
    else ToPrompt(plit asciz'File not found.');
    allmod[.curbuf]_0;			! Clear modified flag.
    close (2);				! Finished with input file.
    hend_.lowend+5+extra;		! Set buffer end to end + some
    hbot_6+extra;
    lowend_1;				! Set beginning of buffer.
    relcore();				! Release extra core
end;


Routine setupbuffer(Prompt,Block,Name,Ext,User) = Begin
    local stringspace [Maxbufs], Pnt;
    muline_1;
    scrmod_1;
    hitsts_1;
    flush_0;
    ToPrompt(.Prompt);
    .Block _ .defdsk;
    (.Block+1) _ .Name;
    (.Block+2) _ .Ext;
    (.Block+3) _ 0;
    (.Block+4) _ .User;
    Pnt_(Stringspace-1)<1,7>;
    getstr(.Pnt);
    if not (filescan (Pnt,.Block)) then return 0;
    if .flush then return 0;
    return 1;
end;

global routine uctrlb = begin
    If not Setupbuffer(plit asciz'Select Buffer: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn()  )
	then return Ctrlg();
    ToPrompt(plit asciz'');
    combuf(0)
end;
global routine UCtrlo = begin
    If not Setupbuffer(plit asciz'Buffer Name: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn() )
	then return ctrlg();
    combuf(2);
end;


global routine ctrlxr = begin
    If not Setupbuffer(plit asciz'Read File: ', Filblk, 0, 0, 0)
	then return ctrlg();
    Filbuf()
end;

global routine ctrlxv = begin local device,ext,tmpblk[6],existed;
    If not Setupbuffer(plit asciz'Visit File: ', Tmpblk, 0, 0, 0)
	then return ctrlg();
    existed_existsbuf(.(tmpblk+1));	! Does .tmpblk buffer exist?
    ToPrompt(plit asciz'');
    bfblk1_.defdsk;
    (bfblk1+1)_.(tmpblk+1);
    (bfblk1+2)_sixbit 'vue';
    (bfblk1+3)_0;
    (bfblk1+4)_getppn();
    combuf(0);
    if not .existed then begin
	    filblk_.tmpblk;
	    (filblk+1)_.(tmpblk+1);
	    (filblk+2)_.(tmpblk+2);
	    (filblk+3)_.(tmpblk+3);
	    (filblk+4)_.(tmpblk+4);
	    Filbuf();
    end;
end;
global routine combuf (autop) = begin
	local tp,newbuf;
	local dskbuf[128];	!the disk buffer.

	!newbuf if created a new buffer.
	!autop if we are doing an autosave operation.

	if .autop eql 0 then newbuf_AddBuf(.(bfblk1+1));
	if .autop eql 2 then (Addbuf(.(bfblk1+1));newbuf_0);

	if .autop neq 2 or .(bfblk1+1) neq .(bfblk2+1) then begin
	    open (2,#16,.bfblk2,0<0,0>);
	    if not enter (2,(bfblk2+1)<0,0>) then begin
		    ToPrompt(plit asciz'Buffer enter failed!');
		    close(2);
		    return 0;
		    end;
	    dskbuf_.hend;
	    (dskbuf+1)_.hbot;
	    (dskbuf+2)_.lowend;
	    (dskbuf+3)_.curline;
	    (dskbuf+4)_.filblk;	!the device name
	    (dskbuf+5)_.(filblk+1);	!the file name
	    (dskbuf+6)_.(filblk+2);	!the extension
	    (dskbuf+7)_.ppn;	!the ppn
	    dmpout(dskbuf,#200);	!dump out the status record.
	    dmpout(.p,.hend/5+1);	!dump out the main buffer.
	    close (2);
	    if .autop eql 1 then return;	       !if an autosave call.
	end;
	lowend_1;		!zap the file
	hbot_.hend;		!totally.
	bfblk2_.defdsk;
	(bfblk2+1)_.(bfblk1+1);
	(bfblk2+2)_sixbit 'vue';
	(bfblk2+3)_0;
	(bfblk2+4)_getppn();
	open (2,#16,.bfblk1,0<0,0>);

	!now we lookup file and init the buffer if it wasn't there
	!previously or if the thing there is OLD.
	curbuf_gbnum(.(bfblk1+1));     !set the buffer number.

	if .newbuf or (not realup(bfblk1+1<0,0>)) then begin;
		filblk_.defdsk;
		(filblk+1)_sixbit 'delete';
		(filblk+2)_0;
		ppn_0;
		close(2);
		return
		end;
	dmpin(2,dskbuf,#200);	!read the header page in.
	hend_.dskbuf;
	hbot_.(dskbuf+1);
	lowend_.(dskbuf+2);
	curline_.(dskbuf+3);
	while 1 do begin
	    if .(#121) geq .p+.hend/5+1 then exitloop;
	    coresize(512);
	end;
	filblk_.(dskbuf+4);		!the device
	(filblk+1)_.(dskbuf+5);		!the file name
	(filblk+2)_.(dskbuf+6);		!the extension
	ppn_.(dskbuf+7);		!the ppn
	dmpin(2,.p,.dskbuf/5+1);	!read in .hend characters.
	close (2);
	end;

global routine autoloss = begin
	local tp;
	if .autoinc eql 0 then return;		% autosave mode ?    %
	if .allmod[.curbuf] eql 0 then return;	% anything to save ? %
	autotime_.autotime+1;			% increment timer.   %
	if .autotime lss .autowrit+.autoinc then return; % Time yet? %
	autowrit_.autotime;			% bump counter level %
	ToPrompt(plit asciz 'Starting...');	% going ... going .. %
	combuf(1);
	close (2);
	writestring(plit asciz 'Saved');	% gone.              %
    end;
global routine cclstuff = begin
register foo;

if dotmpcor(sixbit 'EDT',2,xbuffer,30) lss 0 then
   dotmpcor(sixbit 'EDS',2,xbuffer,30);

(filblk+4)_0; !default to our ppn.
filblk_.defdsk;
tp_xbuffer<29,7>;
if not (filescan (tp,filblk)) then return ctrlg();
filbuf();			! do common stuff [located in BUFFER]
scrmod_1;
muline_1;
end;

global routine cclmultix = begin
machop jrst = #254;
register foo;
local ep;

incp(tp);
ep_.tp; 
while 1 do begin
    if scani(ep) eql "!" then begin
	    replacen(ep,"?M");	!bash ! to ?m
	    exitloop
    end;
    if scann(ep) eql 0 then if .xeflag then cucl() else quit();
end;
filblk_0;
(filblk+1)_0;
(filblk+2)_0;
(filblk+3)_0;
(filblk+4)_0;
(filblk+5)_0;
if not (filescan (tp,filblk)) then return ctrlg();
if .filblk eql 0 then filblk _ sixbit 'dsk';
if .(filblk+2) eql sixbit'low' then (filblk+2)_0;      !bug in get.shr!
foo_filblk<0,0>;
foo_.foo + 1 ^ 18;
calli (foo,#35);	! Run UUO ???
jrst(4,0);
end;		!for the procedure
global routine ctrlxi = begin local glbuffer [100];
    local tp,lfilblk[6];
    allmod[.curbuf]_1;
    muline_1;
    scrmod_1;
    hitsts_1;
    flush_0;
    ToPrompt(plit asciz'Insert File: ');
    (lfilblk+4)_0; !default to our ppn.
    lfilblk_.defdsk;
    tp_(glbuffer-1)<1,7>;
    getstr(.tp);
    if not (filescan (tp,lfilblk)) then return ctrlg();
    if .flush then return ctrlg();
    open (2,0,.lfilblk,dskbfh<0,0>);
    buffers (2,1,1,dskbuf); !get a disk buffer formatted.
    if realup(lfilblk+1) then begin
	tp_(.p-1)<1,7>;	       !pointer to buffer's first.
	incr i from 1 to .lowend-1 do incp(tp);
	munchi (.tp);
    end
    else ToPrompt(plit asciz'File not found.');
    close (2);
end;


end eludom
