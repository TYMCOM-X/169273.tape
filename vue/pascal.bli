module pascal = begin

bind metavalue=#200;
bind ctrlxvalue=#400;

external distbl,repcount,hend,hbot,lowend,getchxr,insertchar;
external ctrla,updatecursor,whitespace,moveback,ctrle,rubout;
external horizspace,wbreak,ctrln2,ctrlp2,moveforward,delback;
external delforward,owns;

own xiudent;
macro iudent=(owns)$;
macro spacect=(owns+1)$;
macro tabwidth=(owns+2)$;
macro indend=(owns+3)$;
macro labelsize=(owns+4)$;
macro linesize=(owns)$;
macro commentcol=(owns+6)$;
macro curcomment=(owns+7)$;

forward mylf,untabline,tabline,doend,getind,mycolon,
	myret,myspace,MetaEB;

routine advance (fromCol,toCol) =
    begin
	register col, tempcol;
	col_.fromCol;
	while (tempcol_updatecursor("?I",.col)) leq .toCol do
	    begin
		col_.tempcol;
		insertchar("?I");
	    end;
	while .col lss .toCol do
	    begin
		insertchar(" ");
		col_.col+1;
	    end;
    end;

routine column =
    begin
	register pos,col;
	pos_.lowend-1;
	while .pos gtr 1 do
	    if getchxr(.pos) eql "?M" then (pos_.pos+1; exitloop)
	    else pos_.pos-1;
	col_1;
	while .pos lss .lowend do
	    begin
		col_updatecursor(getchxr(.pos),.col);
		pos_.pos+1;
	    end;
	.col
    end;

routine MetaBB  =
    begin
	register col;
	distbl["?M"]_myret;		!my carriage return command.
	distbl[" "]_myspace;
	distbl[MetaValue+"}"]_MetaEB;
	distbl[MetaValue+"{"]_1;
	if .curcomment gtr 1 and .curcomment lss .commentcol then
	    curcomment_.commentcol;
	advance(.col,.curcomment);
	insertchar("{"); insertchar(" ");
    end;

routine MetaEB  =
    begin
	distbl["?M"]_distbl[" "]_distbl[MetaValue+"}"]_1;
	distbl[MetaValue+"{"]_MetaBB;
	insertchar(" "); insertchar("}");
	mylf()
    end;

routine myspace  =
    begin
	register cpos;
if (.hend neq .hbot) and getchxr(.lowend) neq "?M" then
		return insertchar(" ");

ctrla();	!get back
cpos_1;
while 1 do begin	!get over the line
	if .hend eql .hbot then exitloop;
	if getchxr(.lowend) eql "?M" then exitloop;
	cpos_updatecursor(getchxr(.lowend),.cpos);
	moveforward(1)
	end;

if .cpos leq .linesize then return insertchar(" ");

while 1 do begin
	if .lowend eql 1 then exitloop;
	cpos_getchxr(.lowend-1);
	if whitespace(.cpos) then exitloop;
	moveback(1)
	end;

while 1 do begin
	if .lowend eql 1 then return;
	if getchxr(.lowend-1) eql " " then delback()
	else exitloop;
	end;

insertchar("?M");
advance(1,.curcomment+2);
ctrle();	!skip over what we have
insertchar(" ");
end; !routine

routine myret  = begin
	myspace();		!hack a space first
	rubout();		!knock it off too.
	insertchar("?M");	!put in a carriage return at the end.
end;

bind commentstring= ((plit asciz'!') -1)<1,7>;
bind keythen= ((plit asciz'then') -1)<1,7>;
bind keyend= ((plit asciz'end') -1)<1,7>;
bind keybegin= ((plit asciz 'begin')-1)<1,7>;
bind keydo=((plit asciz 'do')-1)<1,7>;
bind keyof=((plit asciz 'of')-1)<1,7>;
bind keyset=((plit asciz'set')-1)<1,7>;
bind keyelse=((plit asciz'else')-1)<1,7>;
bind
    BeginSymbols=plit(
	((plit asciz 'begin')-1)<1,7>,
	((plit asciz 'case')-1)<1,7>,
	((plit asciz 'record')-1)<1,7>,
	((plit asciz 'repeat')-1)<1,7>,
	0),
    EndSymbols=plit(
	((plit asciz 'end')-1)<1,7>,
	((plit asciz 'until')-1)<1,7>,
	0),
    OneLineIndentSymbols=plit(
	((plit asciz 'then')-1)<1,7>,
	((plit asciz 'do')-1)<1,7>,
	((plit asciz 'else')-1)<1,7>,
	0),
    StickOutSymbols=plit(
	((plit asciz 'const')-1)<1,7>,
	((plit asciz 'type')-1)<1,7>,
	((plit asciz 'var')-1)<1,7>,
	((plit asciz 'label')-1)<1,7>,
	((plit asciz 'procedure')-1)<1,7>,
	((plit asciz 'function')-1)<1,7>,
	0);

global routine pascal  =
    begin
	distbl["?J"]_mylf;
	distbl[MetaValue+"u"]_untabline;
	distbl[MetaValue+"i"]_tabline;
	distbl[MetaValue+"{"]_MetaBB;
	distbl[":"]_mycolon;
    end;

routine untabline  =
    begin
	getind();
	ctrla();
	moveforward(.labelsize);
	spacect_.spacect-.tabwidth;
	while horizspace(getchxr(.lowend)) and .hbot neq .hend do
		delforward();
	doend();
	ctrle()
    end;

routine tabline  =
    begin
	getind();
	ctrla();
	moveforward(.labelsize);
	spacect_.spacect+.tabwidth;
	while horizspace(getchxr(.lowend)) and .hbot neq .hend do
		delforward();
	doend();
	ctrle()
    end;

routine stringp (astring,start,wordp) =
    begin
	register tc,tp,cpos;
	if .wordp and not wbreak(getchxr(.start-1)) and .start neq 1 then
		return 0; !if it is a trailer of a word.
	cpos_.start;	!first char
	tp_.astring;
	while 1 do
	    begin
		tc_scani(tp);
		if .tc eql 0 then exitloop;
		if getchxr(.cpos) neq .tc then return 0;
		cpos_.cpos+1;
	    end;
	if (.wordp and not wbreak(getchxr(.cpos)))
	    and .cpos-.lowend neq .hbot-.hend
		then return 0;
	return 1
    end;

! This routine is used to decide if a keyword is on a line anywhere
! from .start to .lowend, the eond of the line, or a comment

routine linep (keyword,start)=
    begin
	register tp;
	tp_.keyword;
	while .start lss .lowend do
	    begin
		if stringp(.tp,.start,1) then return 1;
		if stringp(commentstring,.start,0) then return 0;
		if getchxr(.start) eql "?M" then return 0;
		start_.start+1;
	    end;
    end;

! This routine is used to test if the LAST keyword on a line
! is the magic keyword being searched for.
routine elinep (keyword,start) =
    begin
	register LastWasBreak,tp,keycol;
	tp_.keyword;
	keycol_.lowend;
	LastWasBreak_1;
	while .start lss .lowend do
	    begin
		if stringp(commentstring,.start,0) then exitloop;
		if getchxr(.start) eql "?M" then exitloop;
		if wbreak(getchxr(.start)) then LastWasBreak_1
		else (if .LastWasBreak then keycol_.start; LastWasBreak_0);
		start_.start+1;
	    end;
	if stringp(.tp,.keycol,1) then return 1;
    end;

routine inlist (list,rout,start) =
    begin
	register ptr;
	ptr_.list;
	while ..ptr neq 0 do
	    if (.rout)(..ptr,.start) then return .Vreg
	    else ptr_.ptr+1;
	return 0;
    end;

routine getind  = begin
register c,start;
ctrle();
start_.lowend-1;
while .start gtr 1 do
    begin
	if (c_getchxr(.start)) eql "?M" then (start_.start+1; exitloop);
	if .c eql "}" then
	    while (start_.start-1) gtr 1 do
		if getchxr(.start) eql "{" then exitloop;
	start_.start-1;
    end;
spacect_0;
labelsize_0;
while (c_getchxr(.start)) eql ":" or "0" leq .c and .c leq "9" do
    begin
	if .start geq .lowend then exitloop;
	spacect_.spacect+1;
	labelsize_.labelsize+1;
	start_.start+1;
    end;
while getchxr(.start) eql "?I" do begin
	if .start geq .lowend then exitloop;
!	spacect_updatecursor("?I",.spacect+1)-1;
	c_.spacect;
	spacect_updatecursor("?I",.c+1)-1;
	start_.start+1
	end;
while getchxr(.start) eql " " do begin
	if .start geq .lowend then exitloop;
	spacect_.spacect+1;
	start_.start+1
	end;
.start
end;

routine calcind  = begin
	if .xiudent eql 1 then spacect_.spacect+.tabwidth;
	if .xiudent eql -1 then spacect_.spacect-.tabwidth;
	if .spacect lss 0 then spacect_0;
	end;

routine doend  =
	advance(.labelsize+1,.spacect+1);

routine mycolon  =
    begin
	register i,lbs,c;
	lbs_1;
	insertchar(":");
	decr i from .lowend-2 to 1 do
	    if (c_getchxr(.i)) eql "?M" then
		exitloop
	    else
		if "0" leq .c and .c leq "9" then
		    lbs_.lbs+1
		else
		    if .c neq " " and .c neq "?I" then
		        return .Vreg;
	if .lbs eql 1 then return .Vreg;
	getind();
	labelsize_.lbs;
	ctrla();
	while (c_getchxr(.lowend)) eql "?I" or .c eql " " and .hbot neq .hend do
	    delforward();
	moveforward(.labelsize);
	doend();
    end;

routine mylf  = begin
	register endflag,tc,start;
	start_getind();
	endflag_0;
	xiudent_0;
	if inlist(EndSymbols,linep,.start) then begin
		xiudent_if .indend then -1 else 0;
		endflag_1
		end
	else if inlist(OneLineIndentSymbols,elinep,.start) then xiudent_1;
	ctrla();
	if .lowend neq 1 then
	    begin
		ctrlp2();	!if there is a line, go back to it
		start_getind();
		if inlist(OneLineIndentSymbols,elinep,.start) then
		    xiudent_.xiudent-1;
		ctrln2();
		start_getind();
	    end;

	if inlist(BeginSymbols,linep,.start) then xiudent_1
	else
	    if inlist(StickOutSymbols,linep,.start) then
		begin
		    untabline();
		    xiudent_1;
		end;

	if .endflag and not .indend then untabline();

	calcind();	!calculate the new indentation.
	ctrle();
	insertchar("?M");
	labelsize_0;
	tc_.spacect;
	doend();		!do the indentation.
	end;

end eludom
 