MODULE DCDATE;

$HEADER DCDATE.HDR

$SYSTEM IDTIME.TYP
$SYSTEM DTIMEI.INC


PUBLIC FUNCTION DC_DATE(DATE: DATE_INT): DATEREC;

CONST
     DAYS_BEFORE: ARRAY [1..13] OF -1..367 =
	(  -1, 30, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 367  );

VAR
     DAYS_LEFT:  0..MAXIMUM(INTEGER);
     QUAD_CENTURYS:  0..10;
     CENTURYS:  0..3;
     QUARTER_DAYS:  0..MAXIMUM(INTEGER);
     TIME_TEMP:  0..MAXIMUM(INTEGER);
     TEMP_YR:  0..100;
     MO_FOUND:  BOOLEAN;
     YR: 1858..2217;
     MO: 1..12;
     DA: 1..31;
     LEAP_YEAR: BOOLEAN;
     

BEGIN
  DAYS_LEFT := DC_DAYS ( DATE );

  (* CONVERT DAY ZERO FROM 11/17/1858 TO 1/1/1501 *)

  DAYS_LEFT := DAYS_LEFT + ((1857 - 1500) * 365) + ((1857 - 1500) DIV 4) -
               ((1857 - 1500) DIV 100) + ((1857 -1500) DIV 400) 
               + 31 +28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 17;

  (* FIND THE NUMBER OF QUADRCENTURIES SINCE THEN *)

  QUAD_CENTURYS := DAYS_LEFT DIV ((400 * 365) + (400 DIV 4) - (400 DIV 100) 
                                  + (400 DIV 400));

  DAYS_LEFT := DAYS_LEFT MOD ((400 * 365) + (400 DIV 4) - (400 DIV 100) +
                                   (400 DIV 400));

  (* FIND QUARTER DAYS LEFT *)

  QUARTER_DAYS := DAYS_LEFT * 4;

  (* DIVIDE THAT BY THE AVERAGE NUMBER OF QUARTER DAYS PER CENTURY *)

  CENTURYS := QUARTER_DAYS DIV (((100 * 365) + (100 DIV 4) - (100 DIV 100)) * 4
                                  + (400 DIV 400));

  QUARTER_DAYS := QUARTER_DAYS MOD (((100 * 365) + (100 DIV 4) - (100 DIV 100))
                                    * 4 + (400 DIV 400));

  (* DISCARD ANY FRACTIONS OF A DAY AND ADD IN 3/4 OF A DAY TO FORCE
      A LEAP DAY INTO THE FORTH YEAR OF EACH 4 YEAR CYCLE  *)

  QUARTER_DAYS := (QUARTER_DAYS DIV 4) * 4 + 3;



  TEMP_YR := QUARTER_DAYS DIV (365 * 4 + 1);
  QUARTER_DAYS := QUARTER_DAYS MOD (365 * 4 + 1);
  YR := TEMP_YR + 1501 + (QUAD_CENTURYS * 400) + (CENTURYS * 100);

  DAYS_LEFT := QUARTER_DAYS DIV 4;

  (* FAKE A FEBUARY 29TH IF ITS NOT A LEAP YEAR AND PAST FEB *)

  LEAP_YEAR := ((YR MOD 4) = 0) AND
    (((YR MOD 100) <> 0) OR
    (( YR MOD 400) = 0));
  IF (NOT LEAP_YEAR) AND (DAYS_LEFT > (30 + 28)) THEN
              DAYS_LEFT := DAYS_LEFT + 1;

  (* WHICH MONTH IS IT *)

  MO := 1;
  MO_FOUND := FALSE;

  WHILE NOT MO_FOUND DO
  BEGIN
    IF DAYS_LEFT <= DAYS_BEFORE[MO+1] THEN
           MO_FOUND := TRUE
    ELSE
           MO := MO + 1
  END;

  DA := DAYS_LEFT - DAYS_BEFORE[MO];

  DC_DATE.YEAR := YR;
  DC_DATE.MONTH := MO;
  DC_DATE.DAY := DA

END.
