;
;	KL-instructions simulator
;
	title	instrs
	twoseg
	reloc	0
	intern	box.rg
	entry	f.dprs,ins.sm
box.rg:	block	20
ins.sv: block	1
ins.sm:
f.dprs:
rtnadr: block	1
	jrst	0,l.0
;
	reloc	400000
	entry	f.dprf,ins.fl
	intern	zsign,msign,expt2p,expt2n
l.0:	dmovem	16,box.rg+16		; save r16 and r17
	movei	16,box.rg		; prepare the pointer for BLT
	blt	16,box.rg+15		; save registers
	move	16,@rtnadr		; fetch an instruction 
	movem	16,ins.sv		; save the instruction
	ldb	16,op.fld		; fetch op code
	subi	16,4
	jumpge	16,ls.1			; jump if nonarithmetic inst.
	move	16,box.rg+16		; restore r16
	dmove	4,@ins.sv		; load second operand
	ldb	15,ac.fld            	; fetch AC field
	addi	15,box.rg		; figure out the address of
					;		AC saved
	dmove	2,(15)			; load first operand
	movei	7,0			; load zero into r7
					; r7 will contain the number of
					; negative operands
	jumpl	2,l.1			; jump if 1st operand is neg.
	and	3,zsign			; otherwise set the sign bit of 
					; second word to zero
	jrst	0,l.2			; and go to checking of 2nd op.
l.1:	ior	3,msign			; set the sign bit of second
					; word to one
	addi	7,1			; and add one to r7
l.2:	jumpl	4,l.3			; jump if 2nd operand is neg.
	and	5,zsign			; otherwise set the sign bit of
					; second word to zero
	jrst	0,ls.3			; and jump
l.3:	ior	5,msign			; set the sign bit of second
					; word to one
	aoja	7,ls.3			; add one to r7 and skip
ls.1:	jumpg	16,ls.2			; jump if ADJSP
	move	16,box.rg+16		; restore r16
	move	2,@ins.sv		; get byte pointer
	jrst	0,.+3
ls.2:	move	16,box.rg+16		; restore r16
	movei	1,@ins.sv		; get increment count
	ldb	15,ac.fld		; fetch AC field
	addi	15,box.rg		; figure out the address of
					;		AC saved
ls.3:	ldb	16,op.fld		; fetch op code again
     	jrst	0,@insop(16)		; go to the routine;
;
f.dprf:	
	dmovem	2,(15)			; store the result into AC,
					; AC+1 saved
ins.fl:
	movei	2,1			; load 1
	addm	2,rtnadr		; add 1 to the return address
	movsi	17,box.rg		; prepare a pointer for BLT
	blt	17,17			; restore registers
	jrst	0,@rtnadr		; just leave
;
op.fld: point	9,ins.sv,8
ac.fld: point	4,ins.sv,12
;
zsign:	xwd	377777,777777
msign:	xwd	400000,0
expt2p: xwd	200000,0
expt2n: xwd	577777,777777
;
;
	extern	f.dadd,f.dsub,f.dmul,f.ddiv,ajsbp.,ajssp.
insop:	block	0
	exp	f.dadd
	exp	f.dsub
	exp	f.dmul
	exp	f.ddiv
	exp	ajsbp.
 	exp	ajssp.
	prgend
	search	rtsmki
	$module	adjsbp	 	; ADJBP simulator
;
;	Defined as [004000,,0]
;
	entry	ajsbp.
	extern	ins.fl
ajsbp.:
	move	index1,exp1	; save byte pointer
	lshc	r1,6		; position field into r1
	andi	r1,77		; set bits 0-29 to zeros
	move	exp5,r1		; save the position field
	rotc	exp1,6		; byte size into exp2
	andi	exp2,77		; set bits 0-29 to zeros
	jumpn	exp2,.+3	; jump if byte size > 0
	movem	index1,(15)     ; move unmodified byte pointer into AC
	jrst	0,ins.fl	; just leave      
	hrroi	12,-44(r1)	; if position field
	addi	12,(exp2)       ;	+ byte size
	jumple	12,.+3		;		> 36
	idivi	12,0		;   set Trap 1
	jrst	0,ins.fl  	;	and leave
	idivi	r1,(exp2)	; number of whole bytes "following"
				; current byte into r1,
				; number of "trailing" free bits 
				; into exp1
	sub	r1,(15)		; number of bytes "before" last byte of
				; the word into r1
	hrrzi	exp3,44		; word length into exp3
	idivi	exp3,(exp2)	; number of bytes per word into exp3,
				; number of free bits in a word 
				; into exp4
;if bytes are either left or right aligned skip bytes per word checking
;
	caie	exp1,(exp4)	; skip if bytes are left aligned
	jumpn	exp1,[		; skip if bytes are right aligned
; check bytes per word
;
		hrroi	exp5,-44(exp5)	; -(number of bits without
					; "trailing" bits) into exp5
		idivi	exp5,(exp2)	; -(number of leading bits)
					; into exp6
		subm	exp1,exp6	; number of free bits in a word
					; into exp6
		cail	exp6,(exp2)	; did we waste an entire byte?
   		soja	exp3,.+1	; yes, reduce the number of
					; bytes per word
		jrst	0,.+1
		]
	movei	exp4,(exp1)	; number of "trailing" free bits
				; into exp4, exp1 is free 
	idivi	r1,(exp3)	; number of words to adjust by into r1,
				;number of bytes to adjust by into exp1
	jumpl	exp1,[		; if right adjusting
		addi	exp1,(exp3)
		soja	r1,.+1
		]
	imuli	exp1,(exp2)	; new position
	addi	exp1,(exp4)	;     field into exp1
	movn	r1,r1		; actual number of words to increase
				; the byte pointer
	addi	r1,(index1)	; add it
	hll	r1,index1
	dpb	exp1,[point	6,r1,5]	; set new position field
	movem	r1,(15)		; new byte pointer into AC-saved
	jrst	0,ins.fl  	; just leave
	$end	adjsbp
	prgend
	search	rtsmki
	$module	adjssp		; ADJSP simulator
;
;	Defined as [005000,,0]
;
	entry	ajssp.
	extern	ins.fl
ajssp.:	
	move	exp2,(15)	; contents of AC into exp2
	move	exp3,r1		; save increment count
	addi	r1,(exp2)	; incremented right half of AC into r1  
	hlrz	exp4,exp2	; left half of AC into exp4 right
	add	exp4,exp3	; incremented left half of AC into exp4
	hrl	r1,exp4		; and then into left half of r1
	hrlz	exp3,exp3	; move the count from rihgt to left
	xor	exp3,exp2	; compare signs
	jumpge	exp3,finl.	; jump if they are equal
	xor	exp2,r1		; compare signs "before" and "after"
	jumpge	exp2,finl.	; jump if they are equal
	movei	exp2,1		; create
	pop	exp2,exp3	;        PDL overflow
finl.:	movem	r1,(15)  	; new stack pointer into AC-saved
	jrst	0,ins.fl  	; just leave
	$end	adjssp
	prgend
;
;	double precision subtraction
;
	search	rtsmki
	$module	fpdsub
	entry	f.dsub
	extern	msign,zsign,f.dadd,f.dprf,f.dneg
f.dsub:
	movei	1,0
	jsp	14,f.dneg
	jumpl	1,f.dprf
	jumpl	4,.+2
	soja	7,.+2
	addi	7,1
	jumpe	1,f.dadd
	camn	3,zsign
	jrst	0,lab1
	aojn	3,f.dadd
	aoje	2,.+3
	move	3,msign
	jrst	0,f.dadd
	dmove	2,4
	jrst	0,f.dprf
lab1:	came	2,zsign
	jrst	0,.+4
	ior	3,msign
	sub	2,msign
	jrst	0,f.dprf
	movei	3,0
	aoja	2,f.dadd
	$end	fpdsub
	prgend
;
;	double precision addition
;
	search	rtsmki
	$module	fpdadd
	entry	f.dadd
	extern	zsign,msign,f.dprf,f.adpc,f.adnc
f.dadd:	
	sojn	7,l.6
	add	3,5
	add	2,4
	jumpge	3,l.5
	jumpl	2,f.dprf
	and	3,zsign
	jrst	0,f.dprf
l.5:	aojge	2,f.dprf
	ior	3,msign
	jrst	0,f.dprf
l.6:	movei	1,0
	jumpl	7,l.7 
	jsp	14,f.adnc
	jumpg	1,.+2
	aoje	4,f.dprf
	movei	1,0
	exch	2,3
	move	5,4
	jsp	14,f.adnc
	exch	2,3
	jumpe	1,f.dprf
	and	3,zsign
	add	2,msign
	jrst	0,f.dprf
l.7:	jsp	14,f.adpc
	exch	2,3
	move	5,4
	move	4,1
	movei	1,0
	jsp	14,f.adpc
	exch	2,3
	jumpe	1,.+3
	jumpe	4,l.8
	aoja	2,l.8
	jumpe	4,f.dprf
	came	2,zsign
	aoja	2,f.dprf
	movei	2,0
l.8:	ior	3,msign
	sub	2,msign
	jrst	0,f.dprf
	$end	fpdadd
	prgend
;
;	double precision multiplication
;
	search	rtsmki
	$module	fpdmul
	entry	f.dmul
	extern	msign,f.adpc,f.adnc,f.dprf
f.dmul:
	sojl	7,mulnum
	jumpn	4,lm.10
	jumpn	5,lm.10
	setzb	2,3
	dmovem	4,2(15)
	jrst	0,f.dprf
lm.10:	jumpn	2,lm.11
	jumpn	3,lm.11
	setzb	4,5
	dmovem	4,2(15)
	jrst	0,f.dprf
lm.11:	movei	6,0
	jumpge	2,lm.1
	came	3,msign
	aoja	2,lm.1
	movei	3,0
	camn	2,msign
	addi	6,1
lm.1:	jumpge	4,mulnum
	came	5,msign
	aoja	4,mulnum
	movei	5,0
	came	4,msign
	jrst	0,mulnum
	jumpe	6,mulnum
	move	3,msign
	move	5,msign
	mul	2,4
	dmovem	4,2(15)
	jrst	0,f.dprf
;
mulnum:
	dmove	12,2
	mul	2,5
        jumpge  2,.+4
	came	3,msign
	aoja	2,.+2
	movei	3,0
	mul	5,13
	jumpge  5,.+4
	came	6,msign
	aoja	5,.+2
	movei	6,0
	movei	1,0
	jsp	10,jmp.ad
        exch	4,13
	mul	4,13
        jumpge  4,.+4
	came	5,msign
	aoja	4,.+2
	movei	5,0
	jsp	10,jmp.ad
	exch	3,4
	jumpe	1,lmn.1
	move	5,1
	movei	1,0
	jsp	10,jmp.ad
lmn.1:	move	5,2
	jsp	10,jmp.ad
	mul	12,13
        jumpge  12,.+4
	came	13,msign
	aoja	12,.+2
	movei	13,0
	move	5,13
	jsp	10,jmp.ad
	move	2,12
	add	2,1
	move	5,6
;
mulend:
	jumpn	7,lmn.8
	movei	1,0
	came	4,msign
	jrst	0,lm.20
	movei	4,0
	addi	1,1
lm.20:	movei	6,0
	came	3,msign
	jrst	0,lm.21
	movei	3,0
	subi	3,(1)
	aoja	6,lm.22
lm.21:	subi	3,(1)
     	came 	3,msign
	jrst	0,lm.22
	movei	3,0
	addi	6,1
lm.22:	subi	2,(6)
	movei	1,1
	jumpn	5,lm.23
	move	5,msign
	movei	1,0
lm.23:	subi	4,(1)
	movei	1,1
	jumpn	4,lm.24
	move	4,msign
	movei	1,0
lm.24:	subi	3,(1)
	movei	1,1
	jumpn	3,lm.25
	move	3,msign
	movei	1,0
lm.25:	subi	2,(1)
lmn.8:	dmovem	4,2(15)
	jrst	0,f.dprf
;
jmp.ad:
	jumpe	5,(10)
	jumpn	3,ljmp.1
	move	3,5
	jrst	0,(10)
ljmp.1:	jumpl	3,.+3
	jsp	14,f.adpc
	jrst	0,(10)
	jsp	14,f.adnc
	jrst	0,(10)
	$end	fpdmul
	prgend
;
;	divide double precision numbers
;
	search	rtsmki
	$module	fpddiv
	entry	f.ddiv
	extern	msign,zsign,f.dprf,f.dneg,f.adpc
f.ddiv:
	movei	1,0
	jumpge	4,l.50
	dmove	10,4
	jsp	14,f.dneg
	dmove	12,4
	aoja	1,l.51
l.50:	dmove	12,4
	jsp	14,f.dneg
	dmove	10,4
l.51:	dmove	4,2(15)
	jumpl	2,l.52
	and	4,zsign
	and	5,zsign
	jrst	0,l.53
l.52:	ior	4,msign
	ior	5,msign
l.53:	jumpl	1,divmis
	movei	6,0
	jumpl	2,l.58
	camge	12,2
	jrst	0,divmis
	came	12,2
	aoja	6,l.54
	camg	13,3
	jrst	0,divmis
l.54:	jumpg	1,l.55
	movei	14,0
	jrst	0,divpos
l.55:	sojg	1,.+2
	jsp	14,divpos
	dmovem	4,2(15)
	dmove	4,2
	jsp	14,f.dneg
	dmove	2,4
	jrst	0,f.dprf
l.58:	camle	10,2
	jrst	0,divmis
	addi	3,1
	came	10,2
	aoja	6,l.59
	camge	11,3
	jrst	0,l.59
	subi	3,1
divmis:	dmovem	4,2(15)
	idivi	2,0
	jrst	0,f.dprf
l.59:	move	7,1
	movei	1,0
	jsp	14,f.dneg
	jumpe	1,l.60
	setzb	4,5
	subi	3,1
	came	3,msign
	jrst	0,l.61
	movei	3,0
	soja	2,l.62
l.60:	jumpe	3,.+2
l.61:	movn	3,3
l.62:	setca	2,0
	movem	7,22(17)
	sojg	7,.+2
	jsp	14,divpos
	move	7,22(17)
	movei	1,0
	jsp	14,f.dneg
      	dmovem	4,2(15)
	jumpg	7,l.64
	dmove	4,2
	jsp	14,f.dneg
	dmove	2,4
l.64:	jrst	0,f.dprf
;
divpos:
	move	16,14
	jumpg	6,ldp.1
	jumpn	2,ldp.4
	div	3,13
	div	4,13
	move	2,3
	move	3,4
	movei	4,0
	jrst	0,dvpend
ldp.1:	jumpn	13,ldp.2
	div	2,12
	div	3,12
	jrst	0,dvpend
ldp.2:	jumpn	2,ldp.4
	jumpn	3,ldp.4
	camle	4,12
	jrst	0,ldp.3
	came	4,12
	jrst	0,dvpend
	camge   5,13
	jrst	0,dvpend
	movei	3,1
	movei	4,0
	sub	5,13
	jrst	0,dvpend
ldp.3:	movei	7,0
	move	3,4
	move	4,5
	movei	11,1
	jrst	0,.+3
ldp.4:  move	7,5
	movei	11,0
ldp.5:	movei	1,0
	jumpg	6,ldp.6
	div	3,13
	move	6,4
	move	2,zsign
	jrst	0,ldp.10
ldp.6:	jumpn	2,ldp.8
	camle	3,12
	jrst	0,ldp.8
	came	3,12
	jrst	0,.+3
	caml	4,13
	aoja	2,ldp.7
	move	5,4
	move	4,3
	jrst	0,ldp.14
ldp.7:	sub	4,13
	move	5,4
	movei	4,0
	jrst	0,ldp.14
ldp.8:	div	2,12
	move	5,4
	idiv	3,13
	div	4,13
	jumpn	3,.+3
	camge	4,2
	jrst	0,ldp.9
	move	1,3
	move	3,4
	move	6,5
	jrst	0,ldp.13
ldp.9:	move	3,4
	move	6,5
	subi	2,1
ldp.10:	move	4,12
	idiv	4,13
	div	5,13
	caml	12,13
	jrst	0,ldp.12
ldp.11:	jsp	14,f.adpc
	jumpg	1,ldp.13
	caml	3,2
	jrst	0,ldp.13
	subi	2,1
	move	5,12
	div	5,13
	jrst	0,ldp.11
ldp.12:	move	1,4
	jsp	14,f.adpc
ldp.13:	sub	3,2
	jumpge	3,.+3
	and	3,zsign
	subi	1,1
	move	4,3
	imul	1,13
	mul	4,13
	move	3,6
	jsp	14,f.adpc
	add	4,1
	move	5,3
ldp.14:	jumpg	11,ldp.15
	move	3,7
	move	7,2
	move	2,4
	move	4,3
	move	3,5
	movei	6,0
	came	2,12
	addi	6,1
	aoja	11,ldp.5
ldp.15:	move	3,2
	move	2,7
;
dvpend:	jumpn	16,.+3
	dmovem	4,2(15)
	jrst	0,f.dprf
	jrst	0,(16)
	$end	fpddiv
	prgend
;
;	negate double precision number in r4,r5, result code -> r1
;
	search	rtsmki
	$module fpdneg
	entry	f.dneg
	extern	msign
f.dneg:
	jumpn	5,lb1
	jumpn	4,.+2 
	soja	1,(14)
	move	5,msign
	soja	4,lb
lb1:	came	5,msign
	jrst	0,lb2
	came	4,msign
	jrst	0,.+3
	setca	5,0
	aoja	1,lb
	movei	5,0
	soja	4,.+2
lb2:	movn	5,5
lb:	setca	4,0
	jrst	0,(14)
	$end	fpdneg
	prgend

;
;	add two positive one-word numbers and catch an overflow
;
;	r3,r5 - numbers, r1 = r1 + overflow bit( if any), r14 - return
;
	search	rtsmki
	$module	fpadpc
	entry	f.adpc
	extern	expt2p,expt2n
f.adpc:
        move    0,10
	movei	10,0
	tdze	3,expt2p
	addi	10,1
	tdze	5,expt2p
	addi	10,1
	add	3,5
        sojl    10,l.33
	jumpg	10,l.32
	tdne	3,expt2p
	jrst	0,l.31
	ior	3,expt2p
        jrst    0,l.33
l.31:	and	3,expt2n
l.32:   addi    1,1
l.33:   movem   0,10
        jrst    0,(14)
	$end	fpadpc
	prgend

;
;	add two negative one-word numbers and catch an overflow
;
;	r3,r5 - numbers, r1 = r1 + overflow bit( if any), r14 - return
;
	search 	rtsmki
	$module fpadnc
	entry	f.adnc
	extern	expt2p,expt2n
f.adnc:	
        move    0,10
	movei	10,0
	tdon	3,expt2p
	addi	10,1
	tdon	5,expt2p
	addi	10,1
	add 	3,5
        sojl    10,l.43
	jumpg	10,l.42
	tdnn	3,expt2p
	jrst	0,l.41
	and	3,expt2n
        jrst    0,l.43
l.41:	ior	3,expt2p
l.42:   addi    1,1
l.43:   movem   0,10
        jrst    0,(14)
	$end	fpadnc
 	prgend	
;
;	to figure out the contents of AC after the BLT instruction
;
	title   blt.s.
	twoseg
	reloc	0
	entry	blt.sm
	extern	box.rg
blt.sm:
rtnadr:	block	1
	jrst	0,lblt

	reloc	400000
lblt:	dmovem	4,box.rg+2
	move	4,(11)
	hrli	10,(11)
	movei	11,(10)
	addi	11,1
	hlrz	5,4
	subi	5,(4)
	addi	5,(11)
	hrli	11,(5)
	hlrz	5,10
	movem	11,(5)
	blt	4,(10)
	dmove	4,box.rg+2
	jrst	0,@rtnadr
	end
  