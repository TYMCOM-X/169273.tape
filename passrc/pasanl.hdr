(* ****************************************************************************


                   PASCAL   Parse   Tree   Constructor


   LL(1) analysis (top-down, no-backup) package.  Assumes the existence of two
   external routines, "scan", the lexical analyzer, and "generate", the 
   semantic processor.  The LL(1) compiler generator creates three include
   files: "grammar.sym" which defines a scalar type naming all terminal symbols
   and designated nonterminal symbols; "grammar.sem" which defines a scalar
   type giving the semantic operation codes that are passed to generate; and
   "grammar.tab" which contains the parsing machine tables an its associated
   definitions.

   Format of parsing machine tables:

   sym => defines the symbol to be recognized.  If it is a terminal symbol
          (i.e. sym < nonterminal), sym is matched against the symbol class
          of the current token from scan.  If it is a nonterminal symbol, the
          pm "subroutine" defining the nonterminal is called by stacking the
          address of the current pm instruction and continuing execution at
          ntaddr.

   at =>  gives the address at which to continue the parse if the recognition
          operation is successful.  Address less than minpmaddr indicate
          a "return" from a pm subroutine.

   af =>  gives the continuation address if the recoginition operation fails.
          The case af = err_rt causes immediate parse termination unless the
          semantic operation takes error recovery action.

   sg =>  gives the semantic operation to perform if recognition is successful.
          The value "nosemop" implies no operation.

   fg =>  gives the semantic operation to perform if recognition fails. The
          operation may take recovery action on errors via the error routines
          defined below, which alter the flow of pm interpretation so that
          the err_rt action is not taken, or which skip or insert terminal
          symbol.

   Parse tree construction:

   The tree to be constructed consists of nodes and their definition chains.
   A stack of selected, recognized symbols is kept as a linear chain of nodes;
   Substructure is created by the semantic operations.  Typically, they pop
   certain nodes off of the stack and make them the definition of a new node
   which is then pushed on the stack.  Determination of the nodes to pop is
   aided by remembering "marker" nodes at each nonterminal symbol recognition
   call.  For example, the definition of many nonterminals is simply all nodes
   pushed after the recognition call.


   **************************************************************************** *)
