	universal	rtsym - PASCAL runtime universal file
;
;    +--------------------------------------------------------------+
;    |                                                              |
;    |                          R T S Y M                           |
;    |                          - - - - -                           |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    MDSI, Company Confidential
;    
;    SYSTEM:  PASCAL Runtime
;    
;    STARTED:  4/25/79
;    
;    PURPOSE:  This universal file contains the  general  macros  and
;       symbols  used  by  the PASCAL runtime.  It is searched at the
;       start of every module.
;    
;    RESPONSIBLE:  S.  Medlin
;    
;    ----------------------------------------------------------------

;
; Useful opdefs.
;

	opdef	adjsp	[105000000000]
	opdef	adjbp	[ibp]
	opdef	portal	[jrst	1,]
	opdef	arg	[0]
	opdef	zro	[0]

;
; Misc definitions
;

	$true==1
	$false==0
	$nil==377777
	fv==4		;function return offset

;
; Default register equates
;

	R0==0		;Scratch
	R1==1		;Scratch
	EXP1==2		;Expression
	EXP2==3		;Expression
	EXP3==4		;Expression
	EXP4==5		;Expression
	EXP5==6		;Expression
	EXP6==7		;Expression
	INDEX1==10	;Index
	INDEX2==11	;Index
	INDEX3==12	;Index
	INDEX4==13	;Index
	PSA==14		;Base of Pseudo-Static Area
	PDA==15		;Base of PASCAL Data Area
	BASIS==16	;Base of stack frame
	TOP==17		;Top of stack frame

;
; Assigned offsets in the PDA (preliminary).
;
	$pdasize==50	;;max size of pda
	$maski==0	;;mask interupts if nonzero
	$str==1		;byte ptr from last string move
	$iochar==2
	$iofile==3
	$iocnnl==4
	$bfpnt==6	;file buffers in stack
	$stack==7	;top of stack
	$sglfortran==10	;for interface to single prec fortran library routines
	$rtbase==11	;runtime storage for debugger
	$dbbase==12
	$stbase==13
	$retadr==14	;return after interupts
	$rand==15	;seed for random
	$misc==16
	$qfit==17	;quick fit
	$modfit==17	;mod fit
	$ppgrb==20
	$tenio==21
	$iocls==22
	$ioicm==23
	$iontw==24
	$ten17==25
	$ovltv==26
	$ioerr==27
	$extst==30
	$strlen==31
	$interrupt==32	;for ONESCAPE
	$dblfortran==33	;for interface to double prec fortran library routines
	$dumpio==34	;link to dumpio statics
	$pfid==35	;for prfid
	$exinit==36	;for initialization of exception handlers
	$exception==36	;for exception handlers
	$inrt==37	;"in-runtime", ignore arith interrupts
	$debin==40	;debugger active
	$excin==41	;exception manager in control
	$base==42	;basis of active stack frame
	$pbase==43	;basis of program stack frame
	$itty==44	;for TTY initialization
	$otty==45	;for TTYOUTPUT initialization

;
; $GETPDA loads the base of the Pascal Data Area into the
; PDA base reg.
;
	define	$getpda,<
	hlrz	pda,.jbsa##>

;
; $GETPSA loads a modules PSA address into the PSA reg.
;
	define	$getpsa (modid),<
	move	psa,$'modid(pda)>

;
; Relocation macros
;

; $RELOC initializes relocation counters and specifies
; high segment relocation
;
	define	$RELOC,<
	twoseg
	$loc==-1	;-1=high segment relocation
			; 0=low segment relocation
			;+1=absolute relocation
	$hiloc==400000
	$loloc==0
	$absloc==0
	reloc	400000>

;
; $HIGH specifies high segment relocation
;

	define $HIGH,<
	ifge	$loc,<
		ife	$loc,<$loloc==.>
		$loc==-1
		reloc	$hiloc>>

;
; $LOW specifies low segment relocation
;

	define	$LOW,<
	ifn	$loc,<
		ifl	$loc,<$hiloc==.>
		$loc==0
		reloc	$loloc>>

;
; $ABS specifies absolute location at a given address
;

	define	$ABS (addr),<
	ifl	$loc,<$hiloc==.>
	ife	$loc,<$loloc==.>
	$loc==1
	loc	addr>

;
; $LIT assures literals will be placed in the high segment
;

	define	$LIT,<
	ifge	$loc,<$HIGH>
	lit>

;
; $MODULE initializes everything.
;

	define	$MODULE (modname),<
	title	modname
	$reloc
	$stats==$false		;default no counting
	if1	<
		$maxtemp==0
		$maxlocal==0
		$maxstatic==0>>

;
; $FRAME adjusts the stack to protect any locals.
;

	define	$FRAME,<
	ifg	$maxlocal,<
	adjsp	top,$maxlocal>>

;
; $UNFRAME frees the storage allocated by $FRAME.
;

	define	$UNFRAME,<
	ifg	$maxlocal,<
	adjsp	top,-$maxlocal>>

;
; $CALL calls another routine, protecting temporaries if any.
;

	define	$CALL (routine),<
	ifg	$maxtemp,<
	adjsp	top,$maxtemp>
	pushj	top,routine
	ifg	$maxtemp,<
	adjsp	top,-$maxtemp>>

;
; $RETURN frees locals with $UNFRAME, if necessary, before a POPJ.
;

	define	$RETURN,<
	ifg	$maxlocal,<
	$unframe>
	popj	top,>

;
; $TEMP declares a temporary on the stack.
;
	define	$TEMP (tname,tsize),<
	if1	<
	ifl	tsize,<
	printx	<?	Negative size in definition of $TEMP tname>>
	ifdef	tname,<
	printx	<?	$TEMP tname is multiply defined>>
	ifdef	.'tname,<
	printx	<?	Name conflict in definition of $TEMP tname>>>
	ifndef	tname,<
	.'tname==$maxtemp+1
	$maxtemp==$maxtemp+tsize
	define	tname,<.'tname(top)>>>

;
; $LOCAL defines a local on the stack.
;

	define	$LOCAL (lname,lsize),<
	if1	<
	ifl	lsize,<
	printx	<?	Negative size in definition of $LOCAL lname>>
	ifdef	lname,<
	printx	<?	$LOCAL lname is multiply defined>>
	ifdef	.'lname,<
	printx	<?	Name conflict in definition of $LOCAL lname>>>
	ifndef	lname,<
	.'lname==$maxlocal+1
	$maxlocal==$maxlocal+lsize
	define	lname,<.'lname-$maxlocal(top)>>>

;
; $STATIC defines a location in the PSA.
;

	define	$STATIC (sname,ssize),<
	if1	<
	ifl	ssize,<
	printx	<?	Negative size in definition of $STATIC sname>>
	ifdef	sname,<
	printx	<?	$STATIC sname is multiply defined>>
	ifdef	.'sname,<
	printx	<?	Name conflict in definition of $STATIC sname>>>
	ifndef	sname,<
	.'sname==$maxstatic
	$maxstatic==$maxstatic+ssize
	define	sname,<.'sname(psa)>>>

;
; $END is invoked at the end of the module to emit a PSA
; request, if necessary.
;
; $XEND does the same for exception handlers, but suppresses
; allocation of the statics since they all use the master
; handler's PSA.
;
; Both use the common macro $ENDALL.
;

	define	$ENDALL (modname,init,exit,statsize),<
	$needpsa==$false
	ifg	statsize,<$needpsa==$true>
	ifdif	<init><>,<$needpsa==$true>
	ifdif	<exit><>,<$needpsa==$true>
	ifg	$needpsa,<
	if1	<
	ifidn	<modname><>,<
	printx	<?	Module name required with $END>>>
	extern	P.'modname
	intern	S.'modname
	intern	I.'modname
	intern	X.'modname
	S.'modname==statsize
	I.'modname==init
	X.'modname==exit>>

	define	$END (modname<>,init<>,exit<>),<
	$ENDALL	(modname,init,exit,$maxstatic)>

	define	$XEND (modname<>,init<>,exit<>),<
	$ENDALL	(modname,init,exit,0)>

;
; $PSAREQUEST emits a PSA request block
;
; $EXPSAREQUEST emits a special PSA request block for an 
; exception handler.  It refers to the main exception handlers
; PDA loc, gives a PSA size of zero, yet still allows shots at
; initialization and termination in the module.
;
; Both use a common macro $PSARQ.
;

	define	$PSARQ (modid,pdaoffset),<
	$module	P'modid
	entry	p.'modid
	extern	s.'modid
	extern	i.'modid
	extern	x.'modid
p.'modid:	xwd	pdaoffset,s.'modid
	xwd	i.'modid,x.'modid>

	define	$PSAREQUEST (modid),<
	$PSARQ	(modid,$'modid)>

	define	$EXPSAREQUEST (modid),<
	$PSARQ	(modid,$EXCEPTION)>

;

;
; $CHECK enables statistics collection by $COUNT
;

	define	$CHECK,<
	$stats==$true>

;
; $COUNT marks events if stats collecton is enabled
;

	define	$COUNT (counter),<
	ifg	$stats,<
	ifndef	counter,<
	$STATIC	counter,1>
	aos	counter>>

;
; $SAVE saves registers
;

	define	$SAVE (addr,first<-1>,last<-1>),<
	ifge	first,<$first==first>
	ifl	first,<$first==exp1>
	ifge	last,<$last==last>
	ifl	last,<$last==psa>
	if1	<
	ifl	$last-$first,<
	printx	<?	Illegal register specification in $SAVE>>>
	$len==$last-$first
	ifge	$len-6,<
	ifn	$first,<
	$offset==0>
	ife	$first,<
	movem	$first,addr
	$offset==1
	$first==$first+1>
	hrlzi	r0,$first
	hrri	r0,$offset+addr
	blt	r0,$len+addr>
	ifl	$len-6,<
	ife	$len,<
	movem	$first,addr>
	ifge	$len-1,<
	dmovem	$first,addr
	ife	$len-2,<
	movem	$first+2,2+addr>
	ifge	$len-3,<
	dmovem	$first+2,2+addr
	ife	$len-4,<
	movem	$first+4,4+addr>
	ife	$len-5,<
	dmovem	$first+4,4+addr>>>>>

;
; $RESTORE restores the registers saved by $SAVE
;

	define	$RESTORE (addr,first<-1>,last<-1>),<
	ifge	first,<$first==first>
	ifl	first,<$first==exp1>
	ifge	last,<$last==last>
	ifl	last,<$last==psa>
	if1	<
	ifl	$last-$first,<
	printx	<?	Illegal register specification in $RESTORE>>>
	$len==$last-$first
	ifge	$len-6,<
	$offset==0
	ife	$first,<
	$first==$first+1
	$offset==1>
	hrlzi	r0,$offset+addr
	hrri	r0,$first
	blt	r0,$last
	ifn	$offset,<
	move	r0,addr>>
	ifl	$len-6,<
	ife	$len,<
	move	$first,addr>
	ifge	$len-1,<
	dmove	$first,addr
	ife	$len-2,<
	move	$first+2,2+addr>
	ifge	$len-3,<
	dmove	$first+2,2+addr
	ife	$len-4,<
	move	$first+4,4+addr>
	ife	$len-5,<
	dmove	$first+4,4+addr>>>>>

;
; $DOUUO drops an instruction followed by PORTALs (for UUOs and XCTs)
;

	define $DOUUO (OP,AC,EA,S0,S1,S2) <
	  OP	AC,EA		;; the instruction
	 PORTAL	S0		;; and the return to hiseg
	ifdif <S1> <>,<PORTAL	S1>
	ifdif <S2> <>,<PORTAL	S2>  >

;
; $MASK and UNMASK shield critical sections from interrupts.
;
	define	$MASK,<
	aos	$maski(pda)>

	define	$UNMASK,<
	sosg	$maski(pda)	;nested interrupt masks?
	pushj	top,escap.##>	;no, check for interrupt pending

;
; $PS.OP goes through numerous contortions in order to
; emit an ENTRY, EXTERN, or $MODULE line, since MACRO
; won't expand the $ERRLABEL macro properly with them.
;

	define	$PS.OP (pseudop,char,cell,subcode,dot<$true>),<

; $DO.OP actually emits it.

	define	$DO.OP (name),<
	'pseudop'	'name'>

; This madness encodes the name in sixbit for use as a
; parameter to $DO.OP

	ifidn	<char><M>,<....l1==55>
	ifdif	<char><M>,<....l1==56>
	....s1==^d30	;amount to shift it
	ifge	cell-10,<
	....l2==<20+<cell/10>>_6+20+cell-<cell/10>*10
	....s2==^d18	;two digits>
	ifl	cell-10,<
	....l2==20+cell
	....s2==^d24	;one digit>
	....l3==dot*16	;'.' in sixbit or zero
	....s3==....s2-6*dot
	ifge	subcode-10,<
	....l4==<20+<subcode/10>>_6+20+subcode-<subcode/10>*10
	....s4==....s3-^d12	;two digits>
	ifl	subcode-10,<
	....l4==20+subcode
	....s4==....s3-6>
	.....0==<....l1_....s1>+<....l2_....s2>+<....l3_....s3>+<....l4_....s4>

	$do.op	(\'.....0)	;actually does it
	purge	....l1,....l2,....l3,....l4
	purge	....s1,....s2,....s3,....s4
	purge	.....0>

;
; $ERRNAME generates an error message label or module name.
;

	define	$ERRNAME(label,cell,subcode,dot<>),<'label''cell''dot''subcode'>

;
; $ERRLABEL uses $ERRNAME to generate an error message label.
;

	define	$ERRLABEL (cell,subcode),<$errname(M,\cell,\subcode,.)>

;
; $ERRCODE generates an expression encoding a condition cell address,
; a "continue" flag, and a subcondition code.
;

	define	$ERRCODE (cell,subcode,continue<$false>),<cell*2000+continue*1000+subcode>

;
; $ERRCELL generates an XWD pair for a standard condition.
;

	define	$ERRCELL (cell,subcode,continue<$false>),<
	$ps.op	(extern,M,cell,subcode,$true)
	xwd	$errcode(cell,subcode,continue),$errlabel(cell,subcode)>

;
; $ERRLOAD loads a condition cell address, "continue" flag, and
; subcondition code into a register prior to signalling a standard
; condition.
;

	define	$ERRLOAD (reg,cell,subcode,continue<$false>),<
	$ps.op	(extern,M,cell,subcode,$true)
	movei	reg,$errcode(cell,subcode,continue)>

;
; $ERRMODULE generates an error message module, either an
; M module (with message) or an N module (without).
;

	define	$ERRMODULE (cell,subcode,message<>),<
	ifdif	<message><>,<
	$ps.op	($module,M,cell,subcode,$false)>
	ifidn	<message><>,<
	$ps.op	($module,N,cell,subcode,$false)>
	$ps.op	(entry,M,cell,subcode,$true)

	ifdif	<message><>,<
$errlabel(cell,subcode):	asciz	/'message/>
	ifidn	<message><>,<
$errlabel(cell,subcode)==0>>

;
; $ERROR generates a call to a runtime error routine.
;
	define	$ERROR (routine),<
	ifndef	routine,<
	extern	routine>
	jsp	r1,routine>

;
; $FTERROR reports a fatal runtime error.
;

	define	$FTERROR (message),<
	pushj	top,twait.##	;clear output buffer
				;the following uses TTCALL 3, rather
				;than OUTSTR since the latter is redefined
				;by OPDEFS.UNV for unknown reasons
	ttcall	3,message	;report the error
	move	r0,0(top)	;user's address
	pushj	top,wrtpc.##	;print it
	jrst	die.##		;and drop out>

;
; $RTERROR generates the instruction sequence required to
; signal a runtime detected error.
;
	define $RTERROR (cell,subcode,continue<$false>),<
	extern	rt.err
	extern	ex.set

	$errload (r1,cell,subcode,continue)
	jrst	rt.err>

;
; $PSERROR signals a runtime error detected by
; compiler generated code (not a runtime detected error).
;

	define	$PSERROR (cell,subcode,continue<$false>),<
	extern	userr.
	extern	ex.set

	$errload (r0,cell,subcode,continue)
	jrst	userr.>

;
; MATHSTATUS subcondition codes.
;

	$none==0	;no error
	$mthno==0	;no error
	$mthfn==1	;floating underflow
	$mthfo==2	;floating overflow
	$mthao==3	;arithmetic overflow
	$mthdz==4	;divide by zero
	$mthas==5	;bad arg to arcsin
	$mthac==6	;bad arg to arccos

;
; USERSTATUS subcondition codes.
;

	$usrno==0	;none
	$usras==1	;assertion
	$usrcx==2	;case index
	$usrag==3	;aggregate compatibility
	$usrnl==4	;file
	$usrpt==5	;pointer
	$usrss==6	;substring
	$usrsr==7	;subscript
	$usrsc==10	;scalar
	$usrfl==11	;tag field

;
; SPECIAL_STATUS subcondition codes.
;

	$spcno==0	;no error
	$spcmr==1	;ill mem ref
	$spciu==2	;illegal inst or UUO
	$spcnn==3	;negative block size in NEW
	$spcbp==4	;bad pointer in DISPOSE
	$spcff==5	;attempt to free freed block
	$spcrh==6	;invalid heap pointer in RELEASE

;
; Standard condition cell offsets.
;

	$exbad==0	;unused
	$exmth==1	;math_error
	$exio==2	;io_error
	$exusr==3	;user_error
	$exsto==4	;storage_overflow
	$exstk==5	;stack_overflow
	$exspc==6	;special_error
	$exatn==7	;attention

;
; $SIGNAL invokes the exception manager.
;

	define	$SIGNAL,<
	extern	ex.set
	jrst	excpt.##>

;
; $RTSIGNAL signals an exception detected by the runtime or
; by compiler generated check-ops, rather than by the monitor.
;

	define	$RTSIGNAL,<
	extern	ex.set
	jrst	rtexc.##>

;
; The $EXCPT macro defines the PSA of the condition handler system.
;

	define	$EXCPT,<

;
; Many of the monitor calls are system-dependent, and are
; differentiated by the conditional compilation flag $SYS.
;

	$adp==0		;for ADP
	$tym==1		;for TYMSHARE

	$sys==$tym

;
; System-dependent OPDEFs.
;

	ife	$sys-$tym,<
	opdef	settr1	[calli -40]
	opdef	settr2	[calli -41]
	opdef	intadr	[calli -33]
	opdef	dismis	[calli -23]
	opdef	tinass	[calli -42]
	opdef	intass	[calli -36]
	opdef	intact	[calli -35]
	opdef	intenb	[calli -34]>

	ife	$sys-$adp,<
	opdef	piini.	[calli 135]
	opdef	pisys.	[calli 136]
	opdef	debrk.	[calli 137]>


	r0==0
	r1==1
	r2==2
	r3==3
	r4==4
	r5==5
	r6==6
	r7==7
	r10==10
	r11==11
	r12==12
	r13==13

;
; Maximum # of standard conditions and their condition cell offsets.
;

	$stdmax==100

	$stdnum==10	;# actually implemented

;
; Maximum length of the "exception location" message
;

	$mxch==^d132

;
; Location in stack frame for address of current handler
; branch table.
;

	$chbt==3	;left halfword

;
; Defined fields in the handler branch table.
;

	$hbtva==0	;(lh) = invocation addr
	$hbtlink==0	;(rh) = link to outer HBT
	$hsboffset==1	;offset in stack frame for HSB
	$hbtentries==2	;start of cond cell addr/handler addr pairs

;
; Defined fields in the handler state block.
;

	$hsbxaddr==0	;exception address
	$hsbxblock==1	;exception block
	$hsbflag==0	;(lh) = condition call address if activated

;
	ife	$sys-$adp,<

;
; For the Software-Interrupt-System, defined offsets
; in the interrupt control blocks.
;

	$newpc==0
	$oldpc==1
	$xflags==2	; (lh)
	$xreason==2	; (rh)
	$xstatus==3

;
; Defined offsets in "vector" for 4-word interrupt
; control blocks.
;

	$icbatn==0	;attention trap
	$icbmth==4	;math errors
	$icbstk==10	;stack overflow
	$icbimr==14	;ill mem ref

>	;end of adp dependent definitions

;
; Now the static area layout.
;

	$static	intmask,1	;flags interrupts seen but masked
				;by runtime $MASK macro
				;MUST be first in PSA so that
				;.intmask(psa) = @$exception(pda)
	$static	cells,$stdnum	;cells for the standard conditions
	$static	regs,20		;reg save area
	$static	resignal,2	;info on last signalled condition
	$static	cancontinue,1	;.gt. 0 if can continue from the dot on
				;a signal
	$static	oth16,1		;basis for an others handler
	$static	othbt,1		;branch table adr for others handler
	$static	othce,1		;current entry in HBT for others handler
	$static	xstmt,1		;current stmt temp, for debugger
	$static	xpage,1		;current page temp
	$static	tmpaddr,6	;temp stack for unpacking decimal
				;numbers and radix-50 names
	$static	exloc,2+<$mxch+4>/5 ;flex location message
	$static	arovf,2		;for SETTR1 (used on TYMSHARE only)
	$static	stkovf,2	;for SETTR2 (used on TYMSHARE only)
	$static	vector,^d70	;trap vector for INTADR (TYMSHARE) and
				;SIS (ADP).
	$static	iaddr,1		;addr interrupted

;
;
; The $PSPDA macro loads the PDA and the exception handlers'
; PSA on interception of some error condition, being careful
; not to cream any registers.
;

	define	$PSPDA,<
	movem	pda,.jbcst##	;used as a temp
	$getpda
	movem	psa,$misc(pda)	;another temp
	$getpsa	exception
	dmovem	r0,regs		;save r0 and r1 as well
	move	r0,$misc(pda)	;retrieve original PSA
	move	r1,.jbcst	; and PDA
	dmovem	r0,psa+regs	;and keep them around>

	>		;end of $EXCPT macro

	end
   