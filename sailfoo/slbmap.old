entry map1cr,map2cr,allow,getmap;
begin "slbmap"

define debugging(x) "<>"= <>;

require "<><>" delimiters;
define ! = <comment>, r!p = <record!pointer>, n!r = <null!record>;

external integer !skip!;

define routine = <simple procedure>;
debugging(   redefine routine = <procedure>;  )

simple procedure error( string complaint );
	usererr(0,1,complaint);

require	ifcr length(cvms(debugging))
	  thenc " Debugging" elsec " Normal" endc
	& " version " message;
forward record!class map2( integer array a;
	integer ui; r!p (any!class) up;	! for the user;
	r!p (any!class) left, rght;
	integer vpage, aryoffset;
	integer base, low2, up2, mult2, low1, up1, mult1, dim!size );

record!class map1( integer array a;
	integer ui; r!p (any!class) up;	! for the user;
	r!p (map1,map2) left, rght;
	integer vpage, aryoffset;
	integer base, low1, up1, mult1, dim!size );

record!class map2( integer array a;
	integer ui; r!p (any!class) up;	! for the user;
	r!p (map1,map2) left, rght;
	integer vpage, aryoffset;
	integer base, low2, up2, mult2, low1, up1, mult1, dim!size );

define	map!a = 1, map!vpage = 6, map!aryoffset = 7, map!base = 8,
	map1!aloc= 13, map2!aloc = 16;


r!p (map1,map2) maplist, frelist;
debugging( integer ring!size; )
boolean procedure inring( r!p (map1,map2) verify );
begin	! assumption: the ring "maplist" is properly constructed;
	r!p (map1,map2) chase;
if maplist=verify then return( verify neq null!record );
if map1:left [verify] = n!r or map1:rght [verify] = n!r
 then return( false );	! since a ring;
chase_ maplist;
while (chase_map1:rght [chase]) neq maplist
   do if chase=verify then return(true);
return(false);
end;
routine linkup( r!p (map1,map2) nd );
if maplist = null!record
 then begin
	debugging( if ring!size neq 0 then error("ring size");
		   ring!size_ 1; )
	map1:left [nd]_ nd;
	map1:rght [nd]_ nd;
	maplist_ nd;
      end
 else begin
	debugging( if ring!size leq 0 then error("ring size");
		   if inring(nd)
		    then begin error("double link"); return end;
		   ring!size_ ring!size+1; )
	map1:left [nd]_ map1:left [maplist];
	map1:rght [nd]_ maplist;
	map1:rght [map1:left [nd]]_nd;
	map1:left [maplist]_ nd;
      end;
routine unlink( r!p (map1,map2) od );
begin
debugging( if not inring(od)
	    then begin error("unlink out"); return end; )
maplist_ map1:left [od];
map1:rght [maplist]_ map1:rght [od];
map1:left [map1:rght [maplist]]_ maplist;
if maplist=od then maplist_ null!record;
	debugging( if ring!size leq 0 then error("ring size");
		   if ((ring!size_ ring!size-1)=0) neq (maplist=n!r)
		    then error("ring size"); )
map1:left[od]_ null!record; map1:rght[od]_ null!record;
end;
internal r!p (map1) procedure map1cr( integer low1, up1, offset(0) );
begin	integer size;	r!p (map1) nd1;
size_ up1-low1+1;
if size < 0 or offset < 0 or size+offset > 512
 then return( null!record );
nd1_ new!record(map1);
map1:low1 [nd1]_ low1; map1:up1 [nd1]_ up1; map1:mult1 [nd1]_ 1;
map1:dim!size [nd1]_ 1 lsh 18 + size;
map1:aryoffset [nd1]_ offset-low1;
map1:base [nd1]_ '377000 + map1:aryoffset [nd1];
	! (point where likely safe);
map1:vpage [nd1]_ -1;		! list as illegal virtual page;
linkup(nd1);
return(nd1);
end;


internal r!p (map2) procedure map2cr( integer low1, up1,
					low2, up2, offset(0) );
begin	integer size1, size;	r!p (map2) nd2;
size1_ 1+up2-low2;
size_ size1 * (1+up1-low1);
if size1 < 0 or size < 0 or offset < 0 or size+offset > 512
 then return( null!record );
nd2_ new!record(map2);
map2:low1 [nd2]_ low1; map2:up1 [nd2]_ up1; map2:mult1 [nd2]_ size1;
map2:low2 [nd2]_ low2; map2:up2 [nd2]_ up2; map2:mult2 [nd2]_ 1;
map2:dim!size [nd2]_ 2 lsh 18 + size;
map2:aryoffset [nd2]_ offset-low1*size-low2;
map2:base [nd2]_ '377000 + map2:aryoffset [nd2];
	! (point where likely safe);
map2:vpage [nd2]_ -1;		! list as illegal virtual page;
linkup(nd2);
return(nd2);
end;
simple procedure fixpage( r!p (map1,map2) toset; integer vpage );
start!code		define acA=1,acB=2,acC=3;
			label clear, exit;
			protect!acs acA,acB,acC;
	skipn	acA,toset;
	 jrst	exit;	! argghhh null!record, don't do a thing;
! check to make sure virtual page is ok;
	skipl	acB,vpage;
	cail	acB,512;
	  jrst	clear;	! invalid page, clear record's data;
! list as the current contents of the pointer;
	movem	acB,map!vpage(acA);	! mark which page this is;
! make the array descriptor point within the page;
	lsh	acB,9;
	add	acB,map!aryoffset(acA);	! set up "virtual a[0]";
	movem	acB,map!base(acA);
! and finally point array field at array descriptor;
	movei	acB,map1;	! now point array field at faked;
	movei	acC,map1!aloc(acA);	! array (assume map1);
	came	acB,(acA);		! was it right?;
	 movei	acC,map2!aloc(acA);	!  no- get map2 array dsc addr;
	movem	acC,map!a(acA);	! and place in array field;
	jrst	exit;

clear:	movei	acB,512;
	movem	acB,map!vpage(acA);	! put invalid page as page;
	setzb	acA,map!a(acA);		! and clear array field;
					! (and make retval false);
exit:
end;
simple integer procedure filemn( integer chan, page, command );
comment command: 0 =>create page,
		 1 => delete page,
		 2 =>find first hole at or after page,
		 3 =>find first non-hole at or after page.
	-1 as a page to create will get the first page after eof.
	return the page number (true) if successful,
	 -1 if some argument error, and -2 if system call error
	 (note: if -2, then !skip! is the system error code)
	Therefore the result is >0 iff successful.
;
start!code	define a=1,b=2,c=3; protect!acs 1,2,3;
		label syserr,reta;
	define	!CHDFP='36, !CHCFP='40, !CHMEN='41, !FFIFP='44;
		preset!with	!CHCFP lsh 18,	!CHDFP lsh 18,
				!FFIFP lsh 18,	!FFIFP lsh 18 + 1;
			own safe integer array filtab[0:3];
	seto	a,;		! in case argument error;
	skipl	b,command;	! get command;
	caile	b,4;		! check range;
	 jrst	reta;
	move	a,filtab[0](b);	! get operation;
	hrrzm	a,command;	! for FFIFP;
	hrr	a,chan;	! get channel;
	chanio	a,page;	! operation and page;
	 jrst	syserr;
	move	a,page;	! get page back;
	jrst	reta;
syserr:	movem	a,!skip!;
	movni	a,2;
reta:
end;
integer routine coremn( integer countPage, command );
comment	command: 0	=> read page status (count > 1 is  illegal)
		 1	=> pre-reference page
		 2	=> start page validation
		 3	=> validate page (and wait until complete)
		(4-7)	=> delete (4+(2 to clear)+(1 to refclear))
		(9-11)	=> create (8+(1=read, 2=COW, 3=read/write))
		(13-15)	=> change protection (12+protection above)
	countPage is either page number or count,,page number
	clear differs from delete only in that clear doesn't error on
	non-existant page.
	-1 => argument error, -2 => system error return, code in !skip!
	all but 0 (status) return 0 on success.  Status returned is
	the system's status code for the page, (bit 33 always off).
;
begin		integer uuo, temp;
define	VALPAG=-'76, PREREF=-'75;
define	PAGSTS=-'71, VPROT=-'70, VCREAT=-'67, VCLEAR=-'66, VREMOV=-'65;
if (lnot '777000777) land countPage 
 then return(-1);	! bad page spec;

if 0 = countPage land (-1 lsh 18)
 then countPage_ countPage lor (1 lsh 18);
if 16<command<20	then uuo_VPROT
else if 8<command<12	then uuo_VCREAT
else if 1<command<8	then begin
				uuo_case command lsh -1 of
					(0, VALPAG, VREMOV, VCLEAR);
				command_ command land 1;
			     end
else if 0 leq command leq 1 and countPage land (-2 lsh 18)=0
 then begin ! read page status;
	temp_calli(countPage land '777777,
			if command then PREREF else PAGSTS);
	if !skip! then return(temp);
	!skip!_temp; return(-2);
      end
 else return(-1);	! args must have been bad;

! uuo is now the proper calli, command is flags;
temp_ calli( ((command land 7) lsh (35-7)) lor countPage, uuo );
if !skip! then return(0);	! success;
!skip!_ temp; return(-2);
end;
simple integer procedure filmap( integer countPage, filePage, chan, command );
comment	command: (1-3)	=> (1=read, 2=COW, 3=read/write)
	countPage is either page number or count,,page number
	-1 => argument error, -2 => system error return, code in !skip!
	return 0 on success.
;
start!code	define A=1,B=2,C=3; protect!acs A,B,C; label goskip;
	define !chmfp='35;	! chanio number for mapping;
	setom	!skip!;		! assume argument error;
	move	A,countPage;
	tdne	A,['777000777000];! check for absurd count or page;
	 jrst	goskip;
	tlnn	A,-1;		! but if count was 0, use 1;
	 hrli	A,1;
	skiple	B,command;
	caile	B,3;
	 jrst	goskip;		! error unless  1 leq command leq 3;
	rot	B,-8;		! place in protection field;
	ior	B,A;		! with count and page;
	skiple	C,filepage;	! get (and check) file page;
	tlne	C,'777000;	! which must be in [1:2^27-1];
	 jrst	goskip;
	skipl	A,chan;
	caile	A,31;
	 jrst	goskip;		! error unless  0 leq chan leq 31;
	hrli	A,!CHMFP;	! finally prepare call;
	chanio	A,B;		! and do it;
	 sosa	!skip!;		! system error (-2);
	 setzb	A,!skip!;	! no error at all -- clear indicator;
goskip:	exch	A,!skip!;	! store error code and get ret value;
end;
preload!with [512] -1;	own safe integer array contents[0:511];
preload!with [512] -1;	own safe integer array refcount[0:511];

own integer bottom, available, inuse;

! masks for contents word;
define	m#fpage= '000777777777,
	m#noshare= <(1 lsh 35)>,
	m#prot= 3 lsh 27;
define r#prot(code)= <(((code) land m#prot) lsh -27)>;
simple internal integer procedure allow( integer firstpage, lastpage );
begin	integer oldav;
oldav_ available;
if not (512 > lastpage geq firstpage > 0) then return(-1);
if calli(-1,-'71)=-1
 then begin error("nonpaging system"); return(-1); end;
for lastpage_ lastpage step -1 until firstpage
 do if refcount[lastpage]=-1 and 0 = coremn(lastpage,0) land 7
			! examine protection only (refbit may be on);
	 then begin
		if contents[lastpage] then available_ available+1;
		contents[lastpage]_0;	! mark it available;
		bottom_ bottom min lastpage;
	      end;
return(available-oldav);
end;


simple procedure allowon;
begin arrclr(refcount,-1); arrclr(contents,-1); ! mark unused, unknown;
	maplist_ null!record; debugging( ring!size_ 0; )
	bottom_512; available_inuse_0;
	if -1=calli(-1,-'71)
	 then error("nonpaging system")
	 else allow(500,511);
end;
  require allowon initialization[0];
simple integer procedure getfree( integer howmany(1) );
! returns the bottom page number of a sequence of private empty pages;
! returns 0 if it can't find any (or on argument error);
begin	integer base, p;
if not (0 < howmany < 512) then return(0);
for base_ 512-howmany step -howmany until bottom
   do begin "block look"
	for p_ 0 step 1 until howmany-1
	 do if contents[base+p] neq 0
		 then begin
			base_base+p;
			continue "block look";
		      end;
	for p_howmany-1 step -1 until 0
	   do begin contents[base+p]_ m#noshare; ! private access;
		if -1 neq refcount[base+p] then error("REFCOUNT");
		refcount[base+p]_ 0;
	      end;
	inuse_ inuse+howmany;
	return( base );
      end "block look";
return(0);
end;
simple integer procedure findpages( integer code, howmany(1) );
! returns the bottom page number of a sequence of pages with code...;
! returns -1 if it can't find any (or on argument error);
begin	integer base, p;
if not( (0 < howmany < 512) and
	(0 < (code land m#fpage) leq (m#fpage+1)-howmany) )
 then return(-1);
for base_ 512-howmany step -howmany until bottom
   do begin "block look"
	for p_ 0 step 1 until howmany-1
	 do if contents[base+p] neq code+p
		 then begin
			if (code xor contents[base+p]) 
			    land (lnot m#fpage) = 0 = p
			 and (p_ (contents[base+p] land m#fpage)
				 - (code land m#fpage)) < howmany
			 then base_ base+p;
			continue "block look";
		      end;
	for p_howmany-1 step -1 until 0
	   do begin
		if 0 geq (refcount[base+p]_ refcount[base+p]+ 1)
		 then error("REFCOUNT");
	      end;
	return( base );
      end "block look";
return(-1);
end;
simple integer procedure discountpages( integer CountVpage );
! returns the number of pages actually removed from core (unmapped);
! returns -1 if the arguments are invalid;
begin		integer dpage, page, howmany, removed;
howmany_ 1 max (CountVpage lsh -18); page_ CountVpage land '777777;
if not 0 < page < page+howmany leq 512 then return(-1);
removed_ 0;
for dpage_ page+howmany-1 step -1 until page
   do if (refcount[dpage]_ refcount[dpage]-1) < 0
	 then begin
		if refcount[dpage] < -1 then error("REFCOUNT");
		if contents[dpage] land m#prot
		 then if coremn( dpage, 4 )
			then error( "REMOVE: data not there" );
			! coremn( vp,4 ) = delete page from core;
		contents[dpage]_ 0;
		removed_ removed+1;
	      end;
inuse_ inuse-removed;
return( removed );
end;
simple integer procedure setcodes( integer CountVpage, code );
! sets contents for described pages to code, code+1, ...;
! returns number of pages that were -1 contents;
! returns -1 if invalid arguments;
begin		integer count, page, howmany;
howmany_ 1 max (CountVpage lsh -18); page_ CountVpage land '777777;
if not ( (0 < page < page+howmany leq 512) and
	 (0 < code land m#fpage leq (m#fpage+1)-howmany) )
 then return(-1);
count_ 0;
for howmany_ howmany-1 step -1 until 0
   do begin
	if contents[page+howmany] = -1 then count_ count+1;
	contents[page+howmany]_ code + howmany;
      end;
end;
simple integer procedure MarkExclusive( integer code, mask );
! mark all page entries whose masked bits match code "exclusive"
! (typically used before closing a channel or deleting a page)
! returns the number of pages so marked.
;
begin	integer how!many, page;
code_ code land mask;	! equality check will be nonsense otherwise;
if code=0 then return(-1);	! this will match too often!!;
how!many_ 0;
for page_ bottom step 1 until 511
   do if contents[page] land mask = code
	 then begin contents[page]_contents[page] lor m#noshare;
		how!many_ how!many + 1;
		debugging( if refcount[page]<0
			 then error("unreferenced with contents?"); )
	      end;
return(how!many);
end;
boolean procedure findhere( r!p (map1,map2) holder; integer code );
begin	integer hpage, npage;
hpage_ map1:vpage [holder];
if 0<hpage<512 and contents[hpage]=code then return(true);
	! ie want to get in current contents;

if 0>(npage_findpages(code))
	! ie can't find contents in core, ;
 and (0<hpage<512) and refcount[hpage]=1
	! current page is valid and ours alone, ;
 and (contents[hpage] xor code) lor m#prot = m#prot
	! current contents are correct except for the protection code;
 and 0 leq coremn( hpage, 12 + r#prot(code))
	! and we successfully changed the protection;
	then begin contents[hpage]_ code; return(true); end;

if 0<hpage<512 then discountpages(hpage); ! throw away contents;
fixpage( holder, npage );	! mark (or clear) new contents;
return( npage geq 0 );
end;
integer procedure make!code( integer chan, page, protection );
if (0 leq chan < 32)
 and (0 < page < (1 ash 27))
 and (0 < protection < 4)
 then return( (((chan lsh 2) lor protection) lsh 27) lor page )
 else return(0);
internal recursive integer procedure getMap( r!p (map1,map2) holder;
			  integer option("S"), chan(2), page(1) );
!		Perform mapping operation "option":
		"C" map in file page with copy-on-write protection
		"N" create a new file page, and perform "W" operation
			(page=-1 => at end, page=-2 => anywhere)
		"O" like "N", but wil map existing page if there is one
		"R" map in file page with read protection
		"W" map in file page with read/write protection

		"H" find hole page in file on chan at or after page
		"D" delete specified page from file on chan
		"E" find real page in file on chan at or after page
		"F" count accessible associations with pages from chan
			(if page=-2 then smash all such associations)

		"K" count associations with holder's page
		"P" pre-reference page associated with holder
		"S" read status of page associated with holder
		"U" disassociate page (if any) associated with holder
			and unmap it if this is the last association
		"V" start validation on page associated with holder
		"Y" perform validation on page associated with holder,
			and wait until validation is complete
		"Z" zap holder ("U" then return holder to free list)
;
begin	boolean oldpoll; external boolean nopoll;
	integer vpage, command, code;
	simple procedure flip!poll; oldpoll swap nopoll;
	cleanup flip!poll;
oldpoll_ true; oldpoll swap nopoll;

if "H" neq(command_ option land '137) and not("D" leq command leq "F")
 then if holder=null!record
debugging( or not inring(holder) )
 then begin error("GETMAP: invalid page holder"); return(-1); end
 else if not(0 < (vpage_map1:vpage[holder]) < 512) then vpage_0;

case command of
 begin "cases"
["K"]	return( if vpage then refcount[vpage] else -1 );
["V"]["Y"]["P"]["S"]
	begin
	code_ if vpage=0 then -1 else coremn( vpage,
			if command="S" then 0
				else if command="P" then 1
				else if command="V" then 2 else 3 );
	return( if command="P" and 0=code land ('377777777000)
			then code lsh -35 else code );
	! necessary because pre-reference sets the *%!@? sign bit;
	end;
["U"]["Z"]
      begin
	if vpage then discountpages(vpage);
	fixpage( holder, -1 );
	if command="Z" then unlink(holder);
	return( 0 );
      end;
["N"]["O"]
["R"]["C"]["W"]
      begin	integer prot, t;
	if command="N" or command="O"
	 then if (t_ filemn(chan, page, 0)) > 0
		 then page_t
		 else if command="N" then return(t);
	prot_ if command="R" then 1 else if command="C" then 2 else 3;
	if 0 = code_ make!code(chan,page,prot) then return(-1);
	if command = "C" then option _ option xor '40; ! switch case;
	if option leq "Z"	! uppercase option says sharing ok;
	 then begin if findhere(holder,code) then return(page); end
	 else if vpage
	    then begin discountpages(vpage); fixpage(holder,-1); end;
	  ! (that removed any contents of holder);
	if 0 = vpage_ getfree then return(-3);	! no more storage;
	fixpage(holder,vpage);
	if t_filmap( vpage, page, chan, prot )	! couldn't map;
	 then begin 
		discountPages(vpage);
		fixpage(holder,-1);
		return(t);
	      end;
	if not ("C" neq code neq "E") then code_code lor m#noshare;
	setcodes( vpage, code );
	coremn( vpage, 1 );	! do a pre-reference to start it in;
	return( page );
  nd;
["D"]
      begin
	if 0=code_ make!code(chan,page,1)
	 then return(-1);	! invalid channel or page;
	MarkExclusive( code, lnot(m#prot) );
	return( filemn(chan,page,1) ); ! page or leq0 if error;
      end;
["F"]
      begin
	if 0=code_ make!code(chan,if page=-1 then 1 else page,1)
	 then return(-1);	! invalid channel or page;
	return( MarkExclusive( code,
		    if page =-1 then lnot(m#prot lor m#fpage)
		     else lnot(m#prot) ) );
      end;
["H"]["E"]
	return( filemn(chan, page, if command="H" then 2 else 3) );
[ELSE]	begin error("GETMAP: bad option: " & option ); return(-1); end
end "cases";
end;
end "slbmap"
    ~;*