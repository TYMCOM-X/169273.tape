
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08	 Page 1
ALTNAM.SIM	 Created: 6-Nov-1987 18:47

     1	DEF ALT.NAME(A,B) AS A=B
     2	DEF ALT.ENTRY(A,B) AS \ENTRYNAME A
     3	!  IOCS - VERSION 16.5 - 5-26-76
     4	!  I/O PACKAGE FOR THE PDP-10              CAROLINE DIEHL AND FRIENDS
     5	
     6	
     7	ALT.ENTRY("$SETCF","SETCFN")
     8	ALT.ENTRY("$EXU","EXU")
     9	ALT.ENTRY("$EXUF","EXUF")
    10	ALT.ENTRY("$IOCS","IOCS")
    11	ALT.ENTRY("$OPEN","OPEN")
    12	ALT.ENTRY("$SETFI","SETFID")
    13	ALT.ENTRY("$TELCH","TELCHK")
    14	ALT.ENTRY("$WFID","WFID")
    15	ALT.ENTRY("$CLOSE","CLOSE")
    16	ALT.ENTRY("$CANCE","CANCEL")
    17	ALT.ENTRY("$BUFDU","BUF.DUMP")
    18	ALT.ENTRY("$OPENP","OPENP")
    19	ALT.ENTRY("$SETFP","SETFIP")
    20	ALT.ENTRY("$SETMO","SETMODE")
    21	ALT.ENTRY("$CLALL","CLOSE.ALL")
    22	ALT.ENTRY("$CAALL","CANC.ALL")
    23	ALT.ENTRY("$PLNCH","PLNCHK")
    24	ALT.ENTRY("$PLNW","PLNW")
    25	ALT.ENTRY("$SETTA","SET.TAB")
    26	ALT.ENTRY("$SETTE","SET.TERM")
    27	ALT.ENTRY("$SETPR","SET.PRMPT")
    28	ALT.ENTRY("$TABOF","TAB.OFF")
    29	ALT.ENTRY("$R","R")
    30	ALT.ENTRY("$GETLI","GETLINE")
    31	ALT.ENTRY("$W","W")
    32	ALT.ENTRY("$WX","WX")
    33	ALT.ENTRY("$ERASE","ERASE")
    34	ALT.ENTRY("$SETCP","SETCP")
    35	ALT.ENTRY("$CP","CP")
    36	ALT.ENTRY("$SIZE","SIZE")
    37	ALT.ENTRY("$WB","WB")
    38	ALT.ENTRY("$RB","RB")
    39	ALT.ENTRY("$FIXBUF","FIXBUF")
    40	ALT.ENTRY("$DELET","DELETE")
    41	ALT.ENTRY("$RENAM","RENAME")
    42	ALT.ENTRY("$CLIBU","CLIBUF")
    43	ALT.ENTRY("$CLOBU","CLOBUF")
    44	ALT.ENTRY("$TTYLE","TTYLEN")
    45	ALT.ENTRY("$GET","GET")
    46	ALT.ENTRY("$PUT","PUT")
    47	ALT.ENTRY("$PUTX","PUTX")
    48	ALT.ENTRY("$PUTC","PUTC")
    49	ALT.ENTRY("$PRINT","PRINT")
    50	ALT.ENTRY("$PRINC","PRINTC")
    51	ALT.ENTRY("$MSG","MSG")
    52	ALT.ENTRY("$SETRW","SETRWE")
    53	ALT.ENTRY("$FPMSG","F.P.MSG")
    54	ALT.ENTRY("$FPRNT","F.P.PRINT")

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:09	 Page 2
MIOCS.SIM	 Created: 6-Nov-1987 18:47

    55	ALT.ENTRY("$NOESC","NOESC")
    56	ALT.ENTRY("$YSESC","YESESC")
    57	ALT.ENTRY("$OFFAL","OFFALT")
    58	ALT.ENTRY("$ONALT","ONALT")
    59	ALT.ENTRY("$ONALC","ONALT.C")
    60	ALT.ENTRY("$XTOUT","EX.TOUT")
    61	ALT.ENTRY("$EXCFN","EX.CFN")
    62	ALT.ENTRY("$TDEST","TT.DEST")
    63	ALT.ENTRY("$CECHO","CF.ECHO")
    64	ALT.ENTRY("$TECHO","TT.ECHO")
    65	ALT.ENTRY("$RSBRK","RS.BRK")
    66	ALT.ENTRY("$RSALT","RS.ALT")
    67	ALT.ENTRY("$DDOVR","DDTOVR")
    68	ALT.ENTRY("$ARTHV","ARTHOV")
    69	
    70	!  IOCS DEFS OF INTEREST TO USER
    71	
    72	!  FILE DESCRIPTORS PASSED TO %OPEN
    73	
    74	!MAINTAIN ORDER OF FILE TYPES (SEE %OPEN1)
    75	
    76	DEF INPUT AS 0
    77	DEF UPDATE AS 1
    78	DEF OUTPUT AS 2
    79	DEF OUTMSG AS 3
    80	
    81	!FILE TYPE MODIFIERS
    82	
    83	DEF NEW AS OCT 100
    84	DEF OLD AS OCT 200
    85	
    86	!FILE MODES
    87	
    88	DEF SEQUEN AS 0
    89	DEF DIRECT AS OCT 10
    90	
    91	!FILE ORGANIZATIONS
    92	
    93	DEF WORD AS 0
    94	DEF CHARACTER AS OCT 20
    95	DEF PACK AS OCT 40
    96	DEF ORGIND(FN) AS (ORG(FN) SHR 4)     !0,1,2,...
    97	DEF ORGINDLIM AS 0:2
    98	
    99	!  FILE NUMBERS  (FNMIN IS MIN CHANNEL WHICH WILL BE USED)
   100	
   101	DEF FNMIN AS 1            !MIN AND MAX FILE NUMBERS
   102	DEF FNMAX AS 15           !AVAILABLE, EXCLUDING TEL
   103	DEF TEL AS (FNMIN-1)        !FILE NO. INDICATING TERMINAL 
   104	
   105	!  ERROR NUMBERS (ERRNUM VALUES)
   106	
   107	DEF TMFERR AS 1     !TOO MANY FILES OPEN (OPEN)
   108	DEF FMDERR AS 2     !BAD FILE MODE OR TYPE FOR ATTEMPTED OPERATION

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:09	 Page 3
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   109	                    !(OPEN SEQUEN UPDATE, SETCP OR ERASE SEQUEN,
   110	                    !WRITE OR ERASE INPUT, READ SEQUEN OUTPUT)
   111	DEF IFDERR AS 3     !ILLEGAL FILE IDENTIFIER (SETFID, OPEN, DELETE, RENAME)
   112	DEF CNFERR AS 4     !NEW/OLD FILE MESSAGE NOT CONFIRMED (OPEN OUTMSG)
   113	                    !OR TYPE MODIFIER CONFLICT - FILE NOT NEW/OLD (OPEN OUTPUT OR UPDATE)
   114	
   115	!ORDER OF FOLLOWING 5 NOS. SHALL BE MAINTAINED. (ALL BUT LAST MAY
   116	!OCCUR DURING OPEN, DELETE, OR RENAME)
   117	
   118	DEF FNFERR AS 5     !FILE NOT FOUND
   119	DEF IUSERR AS 6     !INVALID USER NAME (BAD PPN)
   120	DEF PRTERR AS 7     !PROTECTION VIOLATION ATTEMPT
   121	DEF FBSERR AS 8     !FILE BUSY
   122	DEF AEFERR AS 9     !NEW NAME BELONGS TO ALREADY EXISTING FILE  (RENAME)
   123	
   124	DEF EOFERR AS 10    !END OF FILE (R, RB, GETLINE)
   125	DEF LNGERR AS 11    !LINE TOO LONG (GETLINE FROM FILE)
   126	DEF TELERR AS 12    !ILLEGAL OPERATION ON TEL (OPEN, DELETE, RENAME,
   127	                    !CP, SIZE)
   128	DEF ARGERR AS 13    !BAD ARGUMENT VALUE - SUCH AS:
   129	                    !NEGATIVE CURSOR POSITION (SETCP, ERASE),
   130	                    !NEG. COUNT (RB, WB, OPEN NSBUFS)
   131	DEF CORERR AS 14    !OUT OF CORE (OPEN SEQUEN)
   132	DEF DEVERR AS 15    !DEVICE DOES NOT EXIST OR BAD MODE FOR DEVICE
   133	                    !OR DEVICE NOT SUPPORTED BY IOCS
   134	
   135	
   136	
   137	!  MACHINE DEPENDENT MACROS
   138	
   139	DEF MKCTRL(CHAR) AS (CHAR-OCT 100)
   140	DEF UNCTRL(CHAR) AS (CHAR+OCT 100)
   141	DEF CTRLCH(CHAR) AS (0<CHAR<=OCT 37)     !ALL CTRL CHARS, INCL. BEYOND ZCTRL
   142	DEF PRCHAR(CHAR) AS (OCT 40<=CHAR<=OCT 176)
   143	DEF PUT.CR   AS TTY _ CARRET     !CR W/O LF
   144	DEF PUT.LF   AS TTY _ LNFEED     !LF W/O CR
   145	DEF PUT.CRLF AS [PUT.CR; PUT.LF]
   146	DEF PUT.LFCR AS [PUT.LF; PUT.CR]
   147	DEF RUBOUT AS OCT 177
   148	DEF EOLITWD AS 0
   149	
   150	
   151	GLOBAL ALT.NAME("$STS",STS)
   152	GLOBAL ALT.NAME("$SETCF",%SETCFN)
   153	GLOBAL ALT.NAME("$CFN",CFN)
   154	GLOBAL ALT.NAME("$EXU",%EXU)
   155	GLOBAL ALT.NAME("$EXUF",%EXUF)
   156	GLOBAL ALT.NAME("$IOCS",%IOCS)
   157	GLOBAL ALT.NAME("$OPEN",%OPEN)
   158	GLOBAL ALT.NAME("$SETFI",%SETFID)
   159	GLOBAL ALT.NAME("$TELCH",%TELCHK)
   160	GLOBAL ALT.NAME("$WFID",%WFID)
   161	GLOBAL ALT.NAME("$CLOSE",%CLOSE)
   162	GLOBAL ALT.NAME("$CANCE",%CANCEL)

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:10	 Page 4
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   163	GLOBAL ALT.NAME("$BUFDU",%BUF.DUMP)
   164	GLOBAL ALT.NAME("$OPENP",%OPENP)
   165	GLOBAL ALT.NAME("$SETFP",%SETFIP)
   166	GLOBAL ALT.NAME("$SETMO",%SETMODE)
   167	GLOBAL ALT.NAME("$CLALL",%CLOSE.ALL)
   168	GLOBAL ALT.NAME("$CAALL",%CANC.ALL)
   169	GLOBAL ALT.NAME("$PLNCH",%PLNCHK)
   170	GLOBAL ALT.NAME("$PLNW",%PLNW)
   171	GLOBAL ALT.NAME("$SETTA",%SET.TAB)
   172	GLOBAL ALT.NAME("$SETTE",%SET.TERM)
   173	GLOBAL ALT.NAME("$SETPR",%SET.PRMPT)
   174	GLOBAL ALT.NAME("$TABOF",%TAB.OFF)
   175	GLOBAL ALT.NAME("$R",%R)
   176	GLOBAL ALT.NAME("$GETLI",%GETLINE)
   177	GLOBAL ALT.NAME("$W",%W)
   178	GLOBAL ALT.NAME("$WX",%WX)
   179	GLOBAL ALT.NAME("$ERASE",%ERASE)
   180	GLOBAL ALT.NAME("$SETCP",%SETCP)
   181	GLOBAL ALT.NAME("$CP",%CP)
   182	GLOBAL ALT.NAME("$SIZE",%SIZE)
   183	GLOBAL ALT.NAME("$WB",%WB)
   184	GLOBAL ALT.NAME("$RB",%RB)
   185	GLOBAL ALT.NAME("$FIXBUF",%FIXBUF)
   186	GLOBAL ALT.NAME("$DELET",%DELETE)
   187	GLOBAL ALT.NAME("$RENAM",%RENAME)
   188	GLOBAL ALT.NAME("$CLIBU",%CLIBUF)
   189	GLOBAL ALT.NAME("$CLOBU",%CLOBUF)
   190	GLOBAL ALT.NAME("$TTYLE",%TTYLEN)
   191	GLOBAL ALT.NAME("$GET",%GET)
   192	GLOBAL ALT.NAME("$PUT",%PUT)
   193	GLOBAL ALT.NAME("$PUTX",%PUTX)
   194	GLOBAL ALT.NAME("$PUTC",%PUTC)
   195	GLOBAL ALT.NAME("$PRINT",%PRINT)
   196	GLOBAL ALT.NAME("$PRINC",%PRINTC)
   197	GLOBAL ALT.NAME("$MSG",%MSG)
   198	GLOBAL ALT.NAME("$SETRW",%SETRWE)
   199	GLOBAL ALT.NAME("$FPMSG",%F.P.MSG)
   200	GLOBAL ALT.NAME("$FPRNT",%F.P.PRINT)
   201	GLOBAL ALT.NAME("$NOESC",%NOESC)
   202	GLOBAL ALT.NAME("$YSESC",%YESESC)
   203	GLOBAL ALT.NAME("$OFFAL",%OFFALT)
   204	GLOBAL ALT.NAME("$ONALT",%ONALT)
   205	GLOBAL ALT.NAME("$ONALC",%ONALT.C)
   206	GLOBAL ALT.NAME("$ALTLO",ALTLOC)
   207	GLOBAL ALT.NAME("$ERRNU",ERRNUM)
   208	GLOBAL ALT.NAME("$XTOUT",%EX.TOUT)
   209	GLOBAL ALT.NAME("$EXCFN",%EX.CFN)
   210	GLOBAL ALT.NAME("$TDEST",%TT.DEST)
   211	GLOBAL ALT.NAME("$CECHO",%CF.ECHO)
   212	GLOBAL ALT.NAME("$TECHO",%TT.ECHO)
   213	GLOBAL ALT.NAME("$RSBRK",%RS.BRK)
   214	GLOBAL ALT.NAME("$RSALT",%RS.ALT)
   215	
   216	GLOBAL ALT.NAME("$FIDP",FIDP())

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:11	 Page 5
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   217	GLOBAL ALT.NAME("$DDOVR",%DDTOVR)
   218	GLOBAL ALT.NAME("$ARTHV",%ARTHOV)
   219	DEF LOCWPF AS 5
   220	DEF MAXARG AS 27
   221	DEF MINARG AS 5
   222	DEF WPF AS (LOCWPF+1+MINARG)
   223	DEF MAXWPF AS (LOCWPF+1+MAXARG)
   224	! EXTENDED ARGUMENT BLOCK:
   225	DEF ARGCNT(TBL) AS TBL(LOCWPF)
   226	DEF PPNARG(TBL) AS TBL(LOCWPF+1)
   227	DEF NAMARG(TBL) AS TBL(LOCWPF+2)
   228	DEF EXTARG(TBL) AS TBL(LOCWPF+3)
   229	DEF PRVARG(TBL) AS TBL(LOCWPF+4)
   230	DEF FILSIZ(TBL) AS TBL(LOCWPF+5)
   231	DEF EXTQ(TBL) AS TBL(0)
   232	DEF USRNAM(TBL) AS TBL(1)
   233	DEF DEVNAM(TBL) AS TBL(3)
   234	DEF CONFWD(TBL) AS TBL(4)
   235	
   236	!  GETLINE 
   237	
   238	DEF LLEN AS 256                !MAX. LINE LENGTH
   239	DEF GLBCMX AS (LLEN+1)         !MAX. CHAR CAPACITY
   240	DEF CPW AS CHARS.PER.WORD
   241	DEF GLBSZ AS (GLBCMX+CPW-1)/CPW   !SIZE IN WORDS
   242	GLOBAL ALT.NAME("$FREE",FREE(0:GLBSZ-1))        !GETLINE INTERNAL BUFFER (AVAILABLE
   243	                               !BETWEEN GETLINE CALLS)
   244	GLOBAL ALT.NAME("$IMAGE",IMAGE(0:GLBSZ-1))       !GETLINE IMAGE LINE BUFFER
   245	GLOBAL ALT.NAME("$GLCNT",GLCNT)                   !GETLINE CHAR COUNT
   246	
   247	FIND ALT.NAME("$DSA",%DSA)
   248	FIND ALT.NAME("$GETMEM",%GETMEM)
   249	FIND ALT.NAME("$RLSMEM",%RLSMEM)
   250	
   251	FIND ALT.NAME("JOBHCU",JOBHCU)
   252	FIND ALT.NAME("JOBJDA",JOBJDA(1))
   253	FIND ALT.NAME(".JBFF",JOBFF)
   254	FIND ALT.NAME(".JBAPR",JOBAPR)
   255	FIND ALT.NAME(".JBTPC",JOBTPC)
   256	FIND ALT.NAME(".JBREL",JOBREL)
   257	
   258	LOCAL %INIT.R, %RBLK, %WBLK, %GETCHK, %SETCPI, %SET.NXCHAR
   259	DEF WBUF(BPTR) AS WBLK(FN.ID(BPTR),BUFSZ,BGNADR(BPTR),BLK.ID(BPTR))
   260	DEF CLEAN(BPTR) AS [WBUF(BPTR); DIRTY(BPTR) _ NO]
   261	LOCAL %S.RBLK, %S.WBLK, %DSIZE, %DCP, %DSETCP
   262	LOCAL %TTYIO, %IOERR, %SETALT, %ABNERR, %SET.ARTHOV
   263	LOCAL %SET.CTRL, %UNSET.CTRL, %OFF.ECHO, %ON.ECHO, %GET.BRK
   264	LOCAL %PUTTY, %PUTTYC, %PUTTYX, %PRNTTY, %PRNTTC, %MSGTTY
   265	LOCAL %L.OFFALT,  %L.ONALT, L.ALTLEV
   266	DEF ERR(N) AS [ERRNUM _ N; GO ERLAB]
   267	DEF FNERR(N) AS IOERR(FN,N)
   268	
   269	LOCAL I
   270	DEF YES AS 1

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:12	 Page 6
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   271	DEF NO AS 0
   272	DEF BPW AS BITS.PER.WORD
   273	
   274	!     BUFFER PARAMETERS
   275	
   276	DEF BUFSZ AS 128           !SIZE OF DUMP-MODE DISK BUFFER
   277	DEF BBUFSZ AS 131          !SIZE OF BUFFERED-MODE DISK BUFFER
   278	TABLE BPE(ORGINDLIM) [36, 7, 8]     !BITS PER ELEMENT
   279	TABLE EBUFS(ORGINDLIM) [BUFSZ, BUFSZ*CPW, BUFSZ*BPW/8]
   280	DEF EBUFSZ(FN) AS EBUFS(ORGIND(FN))
   281	DEF WPB(C) AS (BUFSZ-(EBUFSZ(FN)-(C))*BUFSZ/EBUFSZ(FN))
   282	  !NO. OF WDS C BUFFER ELEMENTS OCCUPY
   283	
   284	! WHEN FILE MODE IS DIRECT:
   285	
   286	LOCAL BUF()               !MASTER BUFFER, TO CONSIST OF NBUFS BUFFERS,
   287	                          !BUFSZ WDS. EACH
   288	LOCAL NXBUF               !INDICATES FIRST BUFFER TO BE EXAMINED IN NEXT
   289	                          !SEARCH FOR ONE INTO WHICH TO READ FILE BLOCK
   290	
   291	! NXBUF & THE SUBSCRIPT OF THE FOLLOWING ARRAYS INDICATE AN
   292	! INDIVIDUAL BUFFER (OF BUFSZ WDS.) WITHIN BUF AS FOLLOWS:  VALUE I
   293	! INDICATES BUFFER STARTING AT BUF+I*BUFSZ. THUS, 0 POINTS TO 1ST,
   294	! 1 TO 2ND, ..., NEXT-TO-LAST TO LAST BUFFER
   295	
   296	BASE 0
   297	LOCAL FN.ID()    !-1 INDICATES BUFFER UNUSED
   298	                 !ELSE VALUE IS FILE NO. WHOSE BLOCK IS THERE
   299	LOCAL BLK.ID()   !NUMBER OF BLOCK IN BUFFER
   300	LOCAL DIRTY()    !YES IF BLOCK IN BUFFER WAS WRITTEN ON
   301	
   302	DEF BGNADR(X) AS (BUF+(X)*BUFSZ)        !ADDR OF 1ST WORD OF BUFFER X
   303	
   304	!     FILE PARAMETERS
   305	
   306	LOCAL FIDTBL(0:MAXWPF-1)
   307	
   308	! THE FOLLOWING ARE UNDEFINED IF NO FILE OPEN WITH SPECIFIED NUMBER
   309	!  (EXCEPT FTYP, WHICH IS <0)
   310	
   311	BASE TEL
   312	GLOBAL ALT.NAME("$FLTYP",FTYP(FNMAX))
   313	LOCAL MODE(FNMAX),ORG(FNMAX)     !FILE DESCRIPTORS
   314	BASE FNMIN
   315	LOCAL EPTR(FNMAX),ECNT(FNMAX)       !ELEMENT POINTER & COUNT OF
   316	                          !REMAINING ELEMENTS
   317	LOCAL CP1(FNMAX)           !USED IN CURSOR POSITION CALCULATION
   318	LOCAL OPNSZ(FNMAX)        !FILE SIZE IN ELEMENTS, USED IN
   319	                          !SIZE CALCULATION.
   320	LOCAL SZFG(FNMAX)         !NEGATIVE IF OPNSZ IS APPROXIMATE (CHARACTER
   321	                          !FILES ON PDP-10)
   322	LOCAL SUBCNT(FNMAX), PKA, PKB       !USED IN PACK I/O
   323	
   324	!IF MODE(FN) IS DIRECT:

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:13	 Page 7
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   325	
   326	LOCAL CPBUF(FNMAX)        !BUFFER CONTAINING FILE CURSOR (<0 IF NONE,
   327	                          !OR IF CP SET AND NO I/O DONE)
   328	LOCAL MXACP(FNMAX)        !MAXIMUM ABANDONED CURSOR POSITION
   329	LOCAL ENDCNT(FNMAX)       !USED IN DIRECT EOF CHECK IN %R
   330	
   331	!     READ & WRITE LABELS
   332	
   333	! LABEL MANIPULATION BETWEEN %R, AND %W AND OTHER PROCEDURES
   334	! REQUIRES THESE DECLARATIONS
   335	
   336	LOCAL RINIT:, WINIT:, WXLAB:
   337	LOCAL R.ERR:, RTEL:, W.ERR:, WSET:, WTEL:, YCHAR:, YTEL:
   338	LOCAL RADR(ORGINDLIM), WADR(ORGINDLIM), ENDRADR(ORGINDLIM)
   339	LOCAL RWD:, RCH:, WWD:, WCH:, ENDRWD:, ENDRCH:
   340	LOCAL RPK:, WPK:, ENDRPK:
   341	BASE TEL
   342	LOCAL RLAB(FNMAX), WLAB(FNMAX), YLAB(FNMAX)
   343	LOCAL RWELAB(FNMAX)     !ERROR LABELS
   344	BASE 1
   345	
   346	!     CONTROL CHARACTER CODES
   347	
   348	DEF ACTRL AS MKCTRL($A)
   349	DEF BCTRL AS MKCTRL($B)
   350	DEF CCTRL AS MKCTRL($C)
   351	DEF DCTRL AS MKCTRL($D)
   352	DEF ECTRL AS MKCTRL($E)
   353	DEF FCTRL AS MKCTRL($F)
   354	DEF GCTRL AS MKCTRL($G)
   355	DEF HCTRL AS MKCTRL($H)
   356	DEF ICTRL AS MKCTRL($I)
   357	DEF JCTRL AS MKCTRL($J)
   358	DEF KCTRL AS MKCTRL($K)
   359	DEF LCTRL AS MKCTRL($L)
   360	DEF MCTRL AS MKCTRL($M)
   361	DEF NCTRL AS MKCTRL($N)
   362	DEF OCTRL AS MKCTRL($O)
   363	DEF PCTRL AS MKCTRL($P)
   364	DEF QCTRL AS MKCTRL($Q)
   365	DEF RCTRL AS MKCTRL($R)
   366	DEF SCTRL AS MKCTRL($S)
   367	DEF TCTRL AS MKCTRL($T)
   368	DEF UCTRL AS MKCTRL($U)
   369	DEF VCTRL AS MKCTRL($V)
   370	DEF WCTRL AS MKCTRL($W)
   371	DEF XCTRL AS MKCTRL($X)
   372	DEF YCTRL AS MKCTRL($Y)
   373	DEF ZCTRL AS MKCTRL($Z)
   374	
   375	DEF BELL AS GCTRL
   376	
   377	!     MACHINE EXCLUSIVE
   378	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:13	 Page 8
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   379	! INSTRUCTION CODES PASSED TO %EXU
   380	
   381	DEF GETMOD AS -OCT 31
   382	DEF JRSTCD AS OCT 254 !JRST
   383	DEF GTTAB AS OCT 41
   384	DEF AUXCAL AS OCT 42
   385	DEF DEVNAMUUO AS OCT 64
   386	DEF OPNCD AS OCT 50   !OPEN
   387	DEF ENTCD AS OCT 77   !ENTER
   388	DEF LKPCD AS OCT 76   !LOOKUP
   389	DEF RNMCD AS OCT 55   !RENAME
   390	DEF CLSCD AS OCT 70   !CLOSE
   391	DEF RLSCD AS OCT 71   !RELEASE
   392	DEF STZCD AS OCT 63   !STATZ
   393	DEF INCD  AS OCT 56   !IN
   394	DEF OUTCD AS OCT 57   !OUT
   395	DEF UGFCD AS OCT 73   !UGETF
   396	DEF USICD AS OCT 74   !USETI
   397	DEF USOCD AS OCT 75   !USETO
   398	DEF STSCD AS OCT 60   !SETSTS
   399	DEF GTSCD AS OCT 62   !GETSTS
   400	DEF TTCD  AS OCT 51   !TTCALL
   401	DEF CLICD AS OCT 47   !CALLI
   402	
   403	DEF JSR   AS OCT 264000.000000   !JSR INSTRUCTION
   404	DEF JFCL  AS OCT 255000.000000   !JFCL INSTRUCTION
   405	
   406	!IF MODE(FN) IS SEQUEN:
   407	GLOBAL ALT.NAME("$HEAD",HEAD(FNMIN*3:FNMAX*3+2))   !BUFFER RING HEADER AREA - 3 WDS. PER FN
   408	DEF USEBIT(FN) AS BYT(HEAD(FN*3),1,35)     !RING USE BIT
   409	DEF CURBUF(FN) AS RH(HEAD+FN*3)        !CURRENT BUFFER
   410	DEF S.EPTR(FN) AS HEAD(FN*3+1)            !ELEMENT POINTER
   411	DEF S.ECNT(FN) AS HEAD(FN*3+2)            !ELEMENT COUNT
   412	
   413	LOCAL %DO.ERR
   414	LOCAL MINFID(FNMIN*4:FNMAX*4+3)   !FOR %ERASE
   415	DEF LH(X) AS HW(X)
   416	DEF RH(X) AS HW(X,1)
   417	
   418	DEF TO.TERM AS 1
   419	DEF TO.TOUT AS 2
   420	DEF TO.BOTH AS 3
   421	DEF TO.NEITHER AS 4
   422	
   423	
   424	LOCAL TOUT.FILE     ! THE NUMBER OF OPEN TOUT.FILE
   425	LOCAL TERM.DEST     ! DESCRIBES DESTINATION OF TERMINAL OUTPUT.
   426	LOCAL COM.ECHO.DEST ! DESTINATION OF COMMANDS FILE ECHOING.
   427	LOCAL TERM.ECHO.P   ! IF TRUE, THEN TERMINAL INPUT IS COPIED TO TOUT.
   428	
   429	
   430	!     *****  THE I/O CONTROL SYSTEM  *****
   431	
   432	%IOCS (NBUFS)

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:14	 Page 9
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   433	
   434	! IOCS MUST BE CALLED TO INITIALIZE THIS PACKAGE; RH(NBUFS) SPECIFIES
   435	! THE NUMBER OF BUFFERS TO BE USED IN DIRECT MODE I/O OPERATIONS.
   436	! LH(NBUFS) IF NONZERO IS THE LOCATION AT WHICH THE BUFFERS ARE TO
   437	! BE ALLOCATED; IF ZERO, BLOCK IS USED TO OBTAIN SPACE.
   438	LOCAL %NULLP, %OPEN1
   439	LOCAL J,K
   440	LOCAL EROUT:, QUIT:, ALT:, ALTNIL:
   441	LOCAL ALTLEV, ALTBLK(0:2), TRPFG, DDTFLG, ARTHOV.ADDR, NOESC.P
   442	
   443	DEF BIT18 AS OCT 400000     !REPETITIVE ENABLE
   444	DEF BIT25 AS OCT 2000       !ESCAPE
   445	DEF TRPBITS AS (BIT18+BIT25)
   446	TABLE ALTJUMP [OCT 254120.000127]       ! JRSTF @JOBTPC I HOPE
   447	
   448	EXU(CLICD,0,0)     !RESET
   449	
   450	
   451	ARTHOV(NO)   !DO NOT ALLOW ARITHMETIC OVERFLOW TO TRAP UNTIL REQUESTED.
   452	
   453	ALTLEV _ 0; L.ALTLEV _ 0; TRPFG _ 0; NOESC.P _ 0; L.OFFALT
   454	
   455	DSA
   456	BUF _ LH(@NB
   457	IF NBUFS _ RH(@NBUFS) >0 THEN DO
   458	  IF BUF=0 THEN BUF _ GETMEM(NBUFS*BUFSZ);  IF BUF=0 THEN GO EROUT
   459	  IF (FN.ID  _ GETMEM(NBUFS))=0 THEN GO EROUT
   460	  IF (BLK.ID _ GETMEM(NBUFS))=0 THEN GO EROUT
   461	  IF (DIRTY  _ GETMEM(NBUFS))=0 THEN GO EROUT
   462	  MOVE NBUFS FROM ALL -1 TO FN.ID
   463	END
   464	NXBUF _ 0
   465	
   466	MODE(TEL) _ SEQUEN; ORG(TEL) _ CHARACTER
   467	WLAB(TEL) _ WTEL; YLAB(TEL) _ YTEL          !TEL OUTPUT 
   468	RLAB(TEL) _ RTEL          !TEL INPUT
   469	SETMODE(-1)	!SET DEFAULT
   470	INIT.R
   471	SET.TERM(EOLIT); SET.PRMPT(%NULLP)
   472	SET.TAB(0); TAB.OFF(%NULLP)
   473	
   474	FOR I _ FNMIN TO FNMAX DO
   475	  FTYP(I) _ -1
   476	END
   477	!REPLACE WITH TABLE WHEN IMPLEMENTED:
   478	RADR(0) _ RWD; RADR(1) _ RCH; RADR(2) _ RPK
   479	WADR(0) _ WWD; WADR(1) _ WCH; WADR(2) _ WPK
   480	ENDRADR(0) _ ENDRWD; ENDRADR(1) _ ENDRCH; ENDRADR(2) _ ENDRPK
   481	
   482	TTYIO; ALTLOC _ QUIT
   483	L.ONALT
   484	
   485	%%NULLP
   486	RETURN 0

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:15	 Page 10
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   487	
   488	QUIT:    EXIT; GO ^@ALTJUMP
   489	
   490	AOVTRP:  SET.ARTHOV; GO ^ALTLOC
   491	
   492	ALT:     ALTBLK(0) _ TRPBITS; ALTBLK(1) _ AOVTRP  !SHORT STOP BEFORE ALTLOC.
   493	         ALTBLK(2) _ ^14 <== ALTBLK; EXU(CLICD,14,-OCT 23)  !DISMIS
   494	ALTNIL:  IF NOT NOESC.P THEN INC TRPFG; GO ^@ALTJUMP        ! WHAT A KLUDGE!!!!!!!!
   495	
   496	EROUT:   MSG('$TOO MANY IOCS BUFFERS$'); L.ONALT; HALT
   497	
   498	
   499	%EXU (CODE, ACC, ADDR, SKPLAB)
   500	
   501	! SAME AS EXUF BUT WITH NO INDIRECT OR INDEX
   502	
   503	LOCAL INDIRECT, INDEX
   504	
   505	INDIRECT _ INDEX _ 0
   506	
   507	%%EXUF (CODE, ACC, INDIRECT, INDEX, ADDR, SKPLAB)
   508	
   509	! THIS IS THE PRIMITIVE EXECUTE FUNCTION WHICH TAKES A FULL SET OF ARGUMENTS.
   510	
   511	! MACHINE DEPENDENT.
   512	! EXECUTES MONITOR CALLS OR OTHER INSTRUCTIONS. RETURNS UNLESS SKIP RETURN
   513	! IS GENERATED BY MONITOR, IN WHICH CASE GO TO SKPLAB. LAST ARGUMENT 
   514	! OMITTED IF INSTRUCTION NEVER SKIPS.
   515	
   516	DEF GOCD AS OCT 254000.000000      !JRST (BRANCH)
   517	LOCAL OPWORD(0:2), FOO:
   518	
   519	OPWORD(0) _ [9,4,1,4,18] * [CODE,ACC,INDIRECT,INDEX,ADDR]
   520	OPWORD(1) _ GOCD BOR FOO
   521	OPWORD(2) _ GOCD BOR RH(@SKPLAB)
   522	GO ^OPWORD
   523	FOO:  RETURN
   524	
   525	END EXU
   526	
   527	
   528	!     *****  FILE OPEN & CLOSE & UTILITY OPERATIONS
   529	
   530	
   531	%OPENP (%NNCH,FDESCR,ERLAB:,NSBUFS)
   532	
   533	! OPEN FILE. FID=ADDRESS OF FILE IDENTIFYING STRING IF >=0, ELSE
   534	!  IS -(FID TABLE ADDR) (I.E., SETFID HAS BEEN CALLED PREVIOUSLY).
   535	!  FDESCR=TYPE+MODE+ORGANIZATION.
   536	!  ERLAB:=ERROR LABEL. NSBUFS=IF SEQ. MODE, NO. OF BUFFERS IN RING.
   537	!  CALLED WITHOUT THIS ARGUMENT IF DIRECT MODE.
   538	!  INITIALIZES CURSOR POSITION (AND MXACP, IF DIRECT).
   539	!  RETURNS FILE NUMBER.
   540	! IF NAME IS SUBSET OF "TELETY", RETURN TEL.

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:16	 Page 11
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   541	
   542	LOCAL %GETFN,%ST.DESCR,%INIT.SCP,%DVSIZE
   543	LOCAL FN, PTR, TEMP, HERE:
   544	LOCAL FISPEC(0:2), TYPMOD
   545	
   546	DEF KF.NO AS  1
   547	DEF KF.YES AS 2
   548	DEF FWDCNT AS KF.YES
   549	DEF KF.ANY AS 3
   550	DEF KF.EXSTS AS 4
   551	DEF KF.NEW AS 5
   552	DEF CNFTBLCNT AS KF.NEW-KF.YES
   553	
   554	TABLE FWD(FWDCNT+1) ['NO', 'YES', '[[[[[']
   555	
   556	TABLE CONFTBL(CNFTBLCNT+1) ['ANY', 'EXISTING', 'NEW', '[[[[[']
   557	
   558	L.OFFALT; SETFIP(FIDTBL,%NNCH,0,ERLAB); GO BELOW
   559	
   560	%%OPEN (FID,FDESCR,ERLAB:,NSBUFS)
   561	
   562	L.OFFALT
   563	IF FID<0 THEN FIDP _ -FID ELSE &
   564	  [PTR _ CHPT(FID,-1); SETFID(FIDTBL,@PTR,0,ERLAB)]
   565	
   566	BELOW: &
   567	IF TELCHK THEN DO
   568	  RWELAB(FN_TEL) _ ERLAB; ST.DESCR
   569	  IF MODE(TEL)=DIRECT OR ORG(TEL)#CHARACTER THEN DO
   570	    MODE(TEL) _ SEQUEN; ORG(TEL) _ CHARACTER; FNERR(TELERR)
   571	  END
   572	END ELSE DO
   573	
   574	! NOT TELETYPE
   575	  RWELAB(FN_GETFN) _ HERE; ST.DESCR
   576	  IF MODE(FN)=SEQUEN AND FTYP(FN)=UPDATE THEN FNERR(FMDERR)
   577	  OPEN1
   578	  IF MODE(FN)=SEQUEN THEN INIT.SCP ELSE SETCPI(FN,MXACP(FN)_0)
   579	  YLAB(FN) _ IF ORG(FN)=CHARACTER THEN YCHAR ELSE WXLAB
   580	  RWELAB(FN) _ ERLAB
   581	END
   582	
   583	L.ONALT; RETURN FN
   584	
   585	HERE:    FTYP(FN) _ -1; GO ERLAB
   586	
   587	
   588	%GETFN
   589	! MACHINE DEPENDENT.
   590	! RETURNS AN AVAILABLE FILE NUMBER FROM FNMIN TO FNMAX INCLUSIVE.
   591	! DONE CORRECT METHOD ALA BILL WEIHER - DOES NOT USE JOBHCU OR JOBJDA.
   592	
   593	LOCAL NAME.EXISTS:
   594	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:17	 Page 12
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   595	FOR I _ FNMIN TO FNMAX  DO
   596	   ^14 _  I
   597	   EXU(CLICD,14,DEVNAMUUO,NAME.EXISTS)
   598	
   599	!NO LOGICAL DEVICE NAME IS ASSOCIATED WITH THIS CHANNEL:
   600	   RETURN (I)
   601	
   602	NAME.EXISTS: NULL
   603	   IF ^14=0 THEN RETURN (I)
   604	
   605	END
   606	
   607	ERR(TMFERR)
   608	
   609	END GETFN
   610	
   611	
   612	%ST.DESCR
   613	! UNPACKS FDESCR TO GET TYPE, MODE & ORGANIZATION OF FN
   614	
   615	TYPMOD _ FDESCR BAND OCT 300
   616	ORG(FN) _ FDESCR BAND OCT 60
   617	MODE(FN) _ FDESCR BAND OCT 10
   618	FTYP(FN) _ FDESCR BAND 7
   619	RETURN
   620	
   621	END ST.DESCR
   622	
   623	
   624	%SET.CTRL
   625	! MACHINE DEPENDENT
   626	! SET BREAK TABLE (OR DO WHATEVER) FOR GETLINE SO THAT CTRL
   627	! CHARACTERS WILL BE ACCEPTED AS DESIRED (AND NOT PERFORM
   628	! SPECIAL FUNCTIONS)
   629	
   630	LOCAL TEMP, SVLCH, SAV.TAB.P, ECHO.WAS.ON.P, GOT.ECHO:
   631	
   632	! SETMOD BITS:
   633	DEF BIT29  AS OCT           100     !FULL CHAR SET
   634	DEF BIT28  AS OCT           200     !NO ECHO
   635	DEF BIT26  AS OCT          1000     !BREAK ON ALL BUT LETTERS, DIGITS
   636	
   637	! SETLCH BITS (LINE CHARACTERISTICS):
   638	DEF BIT17  AS OCT      1.000000     !NO FORM FEED (TTY FORM)
   639	
   640	! AUXCAL FUNCTION TO SET STATE OF TAB PROCESSING:
   641	DEF NO.TAB AS OCT 777777.000025
   642	
   643	DEF STSBITS AS (BIT29+BIT26)
   644	DEF LCHBITS AS (BIT17)
   645	
   646	        ! GET STATE OF TAB HANDLING AND SAVE IT.
   647	        ^14 _ NO.TAB; SAV.TAB.P _ -1; EXU(AUXCAL,14,@SAV.TAB.P)
   648	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:18	 Page 13
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   649	        ! GET STATE OF ECHOING:
   650	        ^14 _ GETMOD; EXU(CLICD,14,GTTAB,GOT.ECHO)
   651	GOT.ECHO: ECHO.WAS.ON.P _ BNOT (((^14)SHR 7) BAND 1)
   652	
   653	        SVLCH _ -1; EXU(TTCD, 6, @SVLCH)    !GETLCH
   654	
   655	%%RS.BRK                ! RESET (RESTORE) BREAK SET.
   656	
   657	        ! SET TTY FORM:
   658	        TEMP _ SVLCH BOR LCHBITS; EXU(TTCD, 7, @TEMP)    !SETLCH
   659	
   660	        ! SET SUPPRESS MONITOR TAB ACTION:
   661	        ^14 _ NO.TAB; TEMP _ 1; EXU(AUXCAL,14,@TEMP)
   662	
   663	%%ON.ECHO
   664	
   665	        ^14 _ IF ECHO.WAS.ON.P THEN STSBITS ELSE (STSBITS+BIT28)
   666	
   667	SET:    EXU(CLICD,14,-OCT 26)    !SETMOD
   668	        RETURN
   669	
   670	%%OFF.ECHO
   671	
   672	        ^14 _ STSBITS+BIT28; GO SET
   673	
   674	%%UNSET.CTRL
   675	
   676	        ^14 _ NO.TAB
   677	        EXU(AUXCAL,14,@SAV.TAB.P)
   678	        EXU(TTCD, 7, @SVLCH)
   679	        RETURN
   680	
   681	END SET.CTRL
   682	
   683	
   684	%OPEN1
   685	
   686	! MACHINE DEPENDENT
   687	! OPENS FILE WITH FIDTBL ENTRIES AT FIDP AS FILE NUMBER N.
   688	! IF SEQUEN MODE, SETS UP BUFFER RING.
   689	
   690	!  1) INPUT - LOOKUP
   691	!  2) UPDATE - LOOKUP. IF FILE EXISTS, ENTER. IF NOT, 3).
   692	!  3) DIRECT OUTPUT - ENTER, CLOSE, LOOKUP, ENTER
   693	!  4) SEQUEN OUTPUT - ENTER
   694	
   695	LOCAL %SETFISPEC, %INIT.RNG, %FILEP, %NXCHAR, %GETCONF, %GET.ANS, %MAP.TO.UPPER.CASE
   696	LOCAL %ABORT, %ABORT1, %ABORT2
   697	LOCAL INITOK:,STPPN:,GETSZ:, CHKMSG:, ABRT:, FINI:, REASK:
   698	LOCAL PPNHLD, SAVLOC, OLDP, CONF, LPTR
   699	DEF OLDFILE AS EXTARG(FIDP) BAND OCT 40.00.00 #0
   700	
   701	DEF OLDMSG AS 'EXISTING FILE'
   702	DEF NEWMSG AS 'NEW FILE'

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:19	 Page 14
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   703	
   704	         SETFISPEC
   705	         EXU(OPNCD, FN, FISPEC, INITOK)   !INIT. CHANNEL
   706	         MSG('DISK NOT AVAILABLE$')
   707	         ABNERR(FN)     !DISK NOT AVAILABLE - VERY RARE
   708	INITOK:  SETMODE(-1) !RESET DEFAULT!; OPNSZ(FN) _ SZFG(FN) _ 0
   709	         PPNHLD _ PPNARG(FIDP)     !SAVE PROJ-PROG NO.
   710		 CONF _ CONFWD(FIDP)
   711	         IF FTYP(FN)>UPDATE THEN DO
   712	ENTER:     EXU(ENTCD, FN, @ARGCNT(FIDP), CHKMSG); GO ERROUT
   713	CHKMSG:    EIF FTYP(FN)=OUTMSG THEN DO
   714	             SAVLOC _ ALTLOC <== ABRT; OLDP _ SETPRMPT(%FILEP); L.ONALT
   715		     IF CONF=0 THEN CONF _ GET.ANS(%NXCHAR)+1
   716	             IF (CONF=KF.NO) &
   717	             OR (CONF=KF.NEW   AND     OLDFILE) &
   718	             OR (CONF=KF.EXSTS AND NOT OLDFILE) &
   719	             THEN ABORT(CNFERR)
   720	             L.OFFALT; ALTLOC _ SAVLOC; SETPRMPT(OLDP); FTYP(FN) _ OUTPUT
   721	           END
   722	           FIF FTYP(FN)=OUTPUT THEN DO
   723	             IF (OLDFILE AND TYPMOD=NEW) OR (NOT OLDFILE AND TYPMOD=OLD) THEN ABORT1(CNFERR)
   724	           END
   725	           IF MODE(FN)=SEQUEN THEN INIT.RNG ELSE DO
   726	             EXU(CLSCD, FN, 0)
   727	             EXU(LKPCD, FN, @ARGCNT(FIDP), STPPN); HALT  !NO ERROR AS LONG AS ENTER
   728	                                       !INITS. PROTECTION TO READ ALL
   729	           END
   730	         END ELSE DO     !INPUT OR UPDATE
   731	           EXU(LKPCD, FN, @ARGCNT(FIDP), GETSZ)
   732	           IF FTYP(FN)=UPDATE AND (EXTARG(FIDP) BAND 7)=0 !NEWFILE! &
   733	            THEN IF TYPMOD=OLD THEN ABORT2(CNFERR) ELSE GO ENTER
   734	ERROUT:    DO.ERR(FN)
   735	GETSZ:     OPNSZ(FN) _ EBUFSZ(FN)*FILSIZ(FIDP)/BUFSZ
   736	           IF ORG(FN)=CHARACTER THEN SZFG(FN) _ -1   !SIZE IS APPROX.
   737	           EIF FTYP(FN)=UPDATE THEN DO
   738	             IF TYPMOD=NEW THEN ABORT2(CNFERR)
   739	STPPN:       PPNARG(FIDP) _ PPNHLD   !RESTORE PROJ-PROG NO, CLOBBERED BY LOOKUP
   740	             EXU(ENTCD, FN, @ARGCNT(FIDP), FINI); GO ERROUT
   741	           END
   742	           FIF MODE(FN)=SEQUEN THEN INIT.RNG
   743	         END
   744	FINI:    MOVE 4 FROM @ARGCNT(FIDP)+1 TO @MINFID(FN*4)   !FOR %ERASE
   745	         RETURN
   746	
   747	ABRT:   ABORT(CNFERR)
   748	
   749	
   750	%DO.ERR (FN)
   751	! CALL AFTER UNSUCCESSFUL LOOKUP, ENTER, RENAME.
   752	
   753	         EXU(RLSCD, FN, 0)
   754	         FTYP(FN) _ -1     !BETTER BE SAFE...
   755	         FNERR(FNFERR+(EXTARG(FIDP) BAND 7))
   756	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:21	 Page 15
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   757	END DO.ERR
   758	
   759	
   760	%ABORT (ERNUM)
   761	
   762	L.OFFALT; ALTLOC _ SAVLOC; SETPRMPT(OLDP)
   763	
   764	%%ABORT1 (ERNUM)
   765	
   766	EXU(CLSCD, FN, OCT 40)     !UNDOES ENTER
   767	
   768	%%ABORT2 (ERNUM)
   769	
   770	EXU(RLSCD, FN, 0); FNERR(ERNUM)
   771	
   772	END ABORT
   773	
   774	
   775	%SETMODE (MODE)
   776	
   777	FISPEC(0) _ MODE; RETURN
   778	
   779	END SETMODE
   780	
   781	
   782	%SETFISPEC
   783	
   784	! SETS SPECS FOR DEVICE INITIALIZATION 
   785	
   786	DEF DSKDEV AS OCT 446353.000000    !SIXBIT /DSK/
   787	LOCAL TEMP
   788	
   789	FISPEC(1) _ IF DEVNAM(FIDP)=0 THEN DSKDEV ELSE DEVNAM(FIDP)
   790	FISPEC(2) _ 0
   791	IF MODE(FN)=DIRECT THEN DO
   792	   IF FISPEC(0)<0 THEN FISPEC(0) _ OCT 17     !DUMP (UNBUFFERED)
   793	
   794	!CHECK THAT THE DEVICE EXISTS AND THAT THE MODE IS LEGAL:
   795	
   796	   IF DVSIZE(FISPEC)<0 THEN FNERR(DEVERR)
   797	   TEMP _ 0
   798	END ELSE DO
   799	   IF FISPEC(0)<0 THEN FISPEC(0) _ 0  !BUFFERED
   800	   HW(FISPEC+2, [FTYP(FN)=INPUT]) _ HEAD+FN*3  !HEADER
   801	
   802	!CHECK THAT DEVICE EXISTS, MODE IS LEGAL, AND GET BUFFER SIZE FOR THIS DEVICE:
   803	!ALSO NOTE THAT WE DON'T SUPPORT BUFFER SIZES # 131.
   804	
   805	   IF TEMP _ DVSIZE(FISPEC) <= 0 OR RH(@TEMP) # BBUFSZ THEN FNERR(DEVERR)
   806	END
   807	
   808	RETURN (TEMP)
   809	
   810	END SETFISPEC

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:21	 Page 16
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   811	
   812	
   813	%INIT.RNG
   814	! SET UP RING BUFFERS
   815	
   816	LOCAL %GETBUF
   817	
   818	IF NSBUFS<0 THEN ERR(ARGERR)
   819	USEBIT(FN) _ 1
   820	
   821	!CURBUF WILL POINT TO THE SECOND WORD OF THE BUFFER FIRST ALLOCATED:
   822	CURBUF(FN) _ TEMP _ GETBUF
   823	
   824	!LINK THE OTHER BUFFERS:
   825	REPEAT NSBUFS-1 DO
   826	
   827	!PUT BUFFER SIZE AND CURRENT BUFFER ADDRESS INTO SECOND WORD OF NEXT BUFFER:
   828	   ^TEMP _ [18,18]*[BUFSZ+1, TEMP <== GETBUF]
   829	END
   830	
   831	!RESET BUFFERR POINTER IN FIRST BUFFER TO POINT TO BUFFER LAST ALLOCATED:
   832	^CURBUF(FN) _ [18,18]*[BUFSZ+1, TEMP]
   833	
   834	RETURN
   835	
   836	%GETBUF
   837	!ALLOCATES SPACE FOR ONE BUFFER, RETURNS POINTER TO SECOND WORD
   838	
   839	LOCAL P
   840	
   841	P _ GETMEM(BBUFSZ)
   842	IF P=0 THEN GO ERLAB
   843	MOVE BBUFSZ FROM ALL 0 TO P
   844	RETURN P+1
   845	
   846	END GETBUF
   847	
   848	END INIT.RNG
   849	
   850	
   851	%TELCHK
   852	! MACHINE DEPENDENT.
   853	! RETURNS 1 IF FILE NAME DESIGNATES TERMINAL, ELSE RETURNS 0.
   854	
   855	TABLE TELFID(2) [OCT 64.45.54.45.64.71,     !SIXBIT /TELETY/!&
   856	      OCT 64.45.62.55.51.56]     !SIXBIT /TERMIN/
   857	
   858	     FOR J_ 1 TO 2 DO
   859	       TEMP _ NAMARG(FIDP); I _ TELFID(J)
   860	       REPEAT 6 DO
   861	         IF (TEMP _ TEMP ROTL 6) BAND OCT 77 # (I _ I ROTL 6) BAND OCT 77 &
   862	            THEN GO OUT
   863	       END
   864	       RETURN YES

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:22	 Page 17
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   865	OUT:   IF TEMP BAND OCT 77=0 THEN RETURN YES
   866	     END
   867	     RETURN NO
   868	
   869	END TELCHK
   870	
   871	
   872	%MAP.TO.UPPER.CASE(CHAR)
   873	
   874	! RETURNS, IF CHAR IS A LOWER CASE ALPHABETIC, ITS UPPER CASE VALUE.
   875	! ELSE, RETURNS CHAR.
   876	
   877	IF $A + OCT 40 <= CHAR <= $Z + OCT 40 THEN RETURN (CHAR - OCT 40)
   878	RETURN CHAR
   879	
   880	END MAP.TO.UPPER.CASE
   881	
   882	
   883	%GET.ANS(%NXT)
   884	
   885	! ASSUMES PROMPT IS SET (A QUESTION); GETS A Y OR N ANSWER FROM CFN,
   886	! USING %NXT TO ADVANCE THE CHARACTER POINTER, AND ASKS 'WHAT?'
   887	! UNTIL IT GETS A Y OR N ANSWER.
   888	
   889	   LOCAL %WHAT
   890	
   891	   LOOP DO
   892	      LPTR _ GETLINE(CFN)
   893	      WHILE TEMP _ MAP.TO.UPPER.CASE(NXT) = $  THEN NULL
   894	      IF TEMP=$Y OR TEMP=$N THEN [GLCNT _ 0;  RETURN [TEMP=$Y]]
   895	      IF CFN # TEL THEN ABORT(CNFERR)
   896	      SETPRMPT(%WHAT)
   897	   END
   898	
   899	   RETURN
   900	
   901	   %WHAT
   902	
   903	      PRINT('WHAT? ')
   904	      RETURN
   905	
   906	   END WHAT
   907	
   908	END GET.ANS
   909	
   910	
   911	%FILEP
   912	
   913	PRINT(IF OLDFILE THEN OLDMSG ELSE NEWMSG); PRINT(' - OK? '); RETURN
   914	
   915	END FILEP
   916	
   917	
   918	%NXCHAR

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:23	 Page 18
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   919	
   920	RETURN NCHV LPTR
   921	
   922	END NXCHAR
   923	
   924	
   925	%SET.NXCHAR (%NXCHAR)
   926	
   927	LOCAL %PTRNXT, %GETNXT
   928	RETURN
   929	
   930	%SETFIP (FIDTBL, %NNCH, EXTDEF, ERLAB:)
   931	
   932	! MACHINE DEPENDENT.
   933	!  IGNORES LEADING BLANKS.
   934	!  EXAMINES STRING AT (CHAR) PTR FOR VALID FILE IDENTIFIER TERMINATED
   935	!  BY ANY CHAR INVALID IN FILE IDENTIFIER (INCLUDING BLANK,
   936	!  EXCEPT IN USER NAME)
   937	!  IF FINDS, STORES WPF WORDS OF FID INFO AT
   938	!  FIDTBL, AS REQUIRED BY %OPEN1, WITH PTR AT CHAR
   939	!  BEFORE TERMINATOR.  SETS FIDP TO ADDRESS OF 1ST OF FIDTBL ENTRIES.
   940	!  IF DOESN'T FIND VALID FID, GOES TO ERLAB WITH PTR RESET TO
   941	!  ORIGINAL VALUE.
   942	!  EXTDEF IS DEFAULT EXTENSION.
   943	
   944	!  FORM OF FILE ID:
   945	!    NAME  (MAX 6 ALPHA-NUM. CHARS)
   946	!    OPTIONAL:  .EXTENSION  (MAX 3 ALPHA-NUM. CHARS)
   947	!    OPTIONAL:  [PROJ,PROG]  (MAX 6 OCTAL DIGITS EACH)
   948	!  NAME & EXT ARE STORED SIXBIT & LEFT-JUSTIFIED IN 1ST AND 2ND WDS;
   949	!  PROJ STORED AS BINARY INTEGER IN LEFT HALF OF 4TH WD; PROG, IN
   950	!  RIGHT HALF. EXTQ(FIDP) IS 1 IF EXTENSION FOUND, 0 IF USED DEFAULT.
   951	!    OR OPTIONAL (USERNAME) BEFORE FILE NAME, MAX 12 CHARS,
   952	!  IN WHICH CASE STORE USER NAME IN SIXBIT, 0 IN LH OF 4TH
   953	!  WD, AND LOCATION OF USER NAME IN RH.
   954	
   955	!  BECAUSE OF %SETFIP, NO PCHV DURING SCAN.
   956	
   957	DEF SIXBIT(X) AS (X-OCT 40)      !CONVERTS 7-BIT CHAR TO SIXBIT
   958	
   959	LOCAL CHAR, SIXPTR, HOLD
   960	LOCAL %GETNUM
   961	DEF SXPT(X) AS [6,6,24]*[36,6,(X)]
   962	
   963	SET.NXCHAR(%GETNXT); GO BELOW
   964	
   965	%%SETFID (FIDTBL, @PTR, EXTDEF, ERLAB:)
   966	
   967	SET.NXCHAR(%PTRNXT)
   968	
   969	BELOW: &
   970	         MOVE WPF FROM ALL 0 TO FIDP _ FIDTBL
   971	         ARGCNT(FIDP) _ MINARG; EXTARG(FIDP) _ EXTDEF; HOLD _ PTR
   972	         WHILE NXCHAR = $  THEN NULL

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:24	 Page 19
MIOCS.SIM	 Created: 6-Nov-1987 18:47

   973	NAM:     I _ 6; SIXPTR _ SXPT( @NAMARG(FIDP) )
   974	         LOOP DO
   975	           CHAR _ MAP.TO.UPPER.CASE(CHAR)
   976	           EIF $0<=CHAR<=$9 OR $A<=CHAR<=$Z THEN DO
   977	             IF DEC I>=0 THEN NCHV SIXPTR _ SIXBIT(CHAR)
   978	           END
   979	           ORIF CHAR=$. THEN DO
   980	             I _ 3; SIXPTR _ SXPT(@EXTARG(FIDP))
   981	             EXTARG(FIDP) _ 0; EXTQ(FIDP) _ YES
   982	           END
   983	           ORIF CHAR=$( THEN DO
   984	             I _ 12; SIXPTR _ SXPT(RH(@PPNARG(FIDP))_@USRNAM(FIDP))
   985	             LOOP DO
   986	               WHILE NXCHAR # $)
   987	               IF DEC I<0 THEN GO OUT
   988	               NCHV (SIXPTR) _ SIXBIT(MAP.TO.UPPER.CASE(CHAR))
   989	             END
   990	             NXCHAR; GO NAM
   991	           END
   992	           ORIF CHAR=$[ THEN DO
   993	             LH(@PPNARG(FIDP)) _ GETNUM
   994	             IF CHAR=$, THEN RH(@PPNARG(FIDP)) _ GETNUM
   995	             IF CHAR#$] THEN GO OUT
   996	             GO CONFLB
   997	           END
   998	           ORIF CHAR=$: THEN DO
   999		     DEVNAM(FIDP) _ NAMARG(FIDP); NXCHAR; GO NAM
  1000		   END
  1001	CONFLB:    ORIF CHAR=$- THEN DO
  1002		     CONFWD(FIDP) _ GETCONF(%NXCHAR,OUT)
  1003	             IF %NXCHAR=%PTRNXT THEN PCHV PTR
  1004		   END
  1005	           ELSE GO DONE
  1006		   NXCHAR
  1007	         END
  1008	DONE:    IF NAMARG(FIDP)#0 THEN [IF %NXCHAR=%PTRNXT THEN PCHV PTR; RETURN]
  1009	
  1010	OUT:     PTR _ HOLD; ERR(IFDERR)
  1011	
  1012	%GETNUM
  1013	
  1014	LOCAL I
  1015	         I _ 0
  1016	         WHILE $0<=NXCHAR<=$7 THEN I_(I SHL 3) BOR (CHAR-$0)
  1017	         RETURN I
  1018	
  1019	END GETNUM
  1020	
  1021	
  1022	%PTRNXT
  1023	RETURN CHAR _ NCHV PTR
  1024	END PTRNXT
  1025	
  1026	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:25	 Page 20
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1027	%GETNXT
  1028	RETURN CHAR _ NNCH
  1029	END GETNXT
  1030	
  1031	
  1032	%WFID (FIDP())
  1033	
  1034	!  TYPES OUT NAME & EXT OF FILE HAVING FID TABLE AT FIDP.
  1035	
  1036	SIXPTR _ SXPT(@NAMARG(FIDP))
  1037	LOOP [REPEAT 6; WHILE CHAR_NCHV SIXPTR#0; PUT(CHAR+OCT 40)]
  1038	IF LH(@EXTARG(FIDP))#0 THEN DO
  1039	  PUT($.); SIXPTR _ SXPT(@EXTARG(FIDP))
  1040	  LOOP [REPEAT 3; WHILE CHAR_NCHV SIXPTR#0; PUT(CHAR+OCT 40)]
  1041	END
  1042	RETURN
  1043	
  1044	END WFID
  1045	
  1046	END SETFIP
  1047	
  1048	END SET.NXCHAR
  1049	
  1050	
  1051	%DVSIZE(OPEN.BLOCK())
  1052	
  1053	!GIVEN THE FILE STATUS AND DEVICE FROM THE OPEN.BLOCK,
  1054	!RETURN -2 IF ILLEGAL MODE, -1 IF DEVICE DOES NOT EXIST,
  1055	!0 IF ONLY UNBUFFERED IS ALLOWED, OTHERWISE RETURN
  1056	!THE STANDARD NUMBER OF BUFFERS IN THE LEFT HALF, AND
  1057	!IN THE RIGHT HALF THE STANDARD BUFFER SIZE (INCLUDING THE 1ST 3 WORDS).
  1058	
  1059	LOCAL SKPLAB:
  1060	
  1061	   ^14 _ OPEN.BLOCK
  1062	   EXU(CLICD,14,OCT 101,SKPLAB)         !DEVSIZ UUO
  1063	
  1064	SKPLAB: &
  1065	   RETURN (^14)
  1066	
  1067	END DVSIZE
  1068	
  1069	
  1070	%INIT.SCP
  1071	! INITIALIZE SEQUEN FILE CURSOR POSITION. ANALOGOUS TO SETCP(FN,0)
  1072	! FOR DIRECT MODE. USER CAN REQUEST BUT NOT SET CURSOR POSITION IF
  1073	! MODE IS SEQUEN.
  1074	
  1075	! SETS RLAB(FN)/WLAB(FN) TO LABEL IN %R/%W TO BE BRANCHED TO
  1076	! ON NEXT READ/WRITE OF FN.
  1077	
  1078	CP1(FN) _ ECNT(FN) _ 0
  1079	RLAB(FN) _ IF FTYP(FN)=OUTPUT THEN R.ERR ELSE RADR(ORGIND(FN))
  1080	WLAB(FN) _ IF FTYP(FN)= INPUT THEN W.ERR ELSE WADR(ORGIND(FN))

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:27	 Page 21
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1081	RETURN
  1082	
  1083	END INIT.SCP
  1084	
  1085	
  1086	%GETCONF (%NXCH, LAB:)
  1087	
  1088	!GET CONFIRMATION KEYWORD. READ UP TO CPW ALPHA CHARS WITH %NXCH.
  1089	! ALLOW SHORTEST UNIQUE ABBREVIATION.
  1090	! GO TO LAB IF NEXT CHAR NOT ALPHA,
  1091	! OR NO MATCH, OR AMBIGUITY.
  1092	
  1093	LOCAL PTR, INWD, CHAR, CNT
  1094	DEF BPC AS (BPW/CPW)
  1095	DEF LESSTR(X,Y) AS (X) SHR 1 < (Y) SHR 1  !STRING COMPARISON
  1096	DEF MASK(CNT) AS (-1 SHL (BPW-BPC*(CPW-CNT)))
  1097	
  1098	INWD _ 0; PTR _ CHPT(@INWD,-1); CNT _ CPW
  1099	LOOP DO
  1100	  WHILE $A<= CHAR _ MAP.TO.UPPER.CASE(NXCH) <=$Z; WHILE DEC CNT>=0
  1101	  NCHV PTR _ CHAR
  1102	END
  1103	IF CNT=CPW THEN GO LAB
  1104	IF CNT < 0 THEN DO  ! STRING OF GREATER THAN FIVE CHARS.
  1105	   CNT _ 0   ! FOR MASKING - IMPLIES FULL WORD TOKEN.
  1106	   LOOP [WHILE $A <= MAP.TO.UPPER.CASE(NXCH) <= $Z]  ! WE ONLY READ A WORD-FULL OF CHARACTERS,
  1107	                                  ! BUT WE MAKE IT LOOK LIKE WE READ THEM ALL.
  1108	END
  1109	! COMPARE
  1110	PTR _ 0
  1111	LOOP DO
  1112	  IF INWD=^CONFTBL(INC PTR) THEN RETURN PTR + FWDCNT
  1113	  WHILE NOT LESSTR(INWD,^CONFTBL(PTR))
  1114	END
  1115	! INWD < ^CONFTBL(PTR)
  1116	IF INWD#^CONFTBL(PTR) BAND MASK(CNT) OR INWD=^CONFTBL(PTR+1) BAND MASK(CNT) &
  1117	  THEN GO LAB
  1118	RETURN PTR + FWDCNT
  1119	
  1120	END GETCONF
  1121	
  1122	END OPEN1
  1123	
  1124	END OPENP
  1125	
  1126	
  1127	
  1128	
  1129	%CLOSE (FN)
  1130	
  1131	! CLOSE FILE FN.  DO NOTHING IF FN=TEL.
  1132	
  1133	! IF DIRECT MODE:
  1134	! *SPECIAL CONSIDERATION IS TAKEN IN WRITING LAST FILE BLOCK,

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:28	 Page 22
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1135	! *SINCE IT MAY BE PARTIALLY FULL - MUST ADJUST COUNT.
  1136	!  WRITE OUT ANY DIRTY FN BLOCKS, SET BUFFERS UNUSED
  1137	!  THAT CONTAIN FN BLOCKS, CLOSE & SAVE.
  1138	! A BUFFER IS SET UNUSED BY STORING -1 AS ITS FN.ID
  1139	
  1140	! IF SEQUEN MODE:
  1141	!  IF TYPE OUTPUT, WRITE OUT BLOCK IN CURRENT BUFFER.
  1142	!  RELEASE BUFFERS, CLOSE & SAVE.
  1143	
  1144	DEF SAVE AS 0
  1145	DEF DEL AS 1
  1146	DEF DISCARD AS OCT 40
  1147	
  1148	LOCAL %CLOSE1,%RLS.RNG,TEMP,I,OPTION
  1149	
  1150	OPTION _ SAVE
  1151	
  1152	GO DOIT
  1153	
  1154	%%CANCEL(FN) !  FOR OUTPUT SEQUEN FILES, CLOSES WITHOUT SUPERCEDING.
  1155	
  1156	   OPTION _ DISCARD
  1157	
  1158	DOIT:  IF FN=TEL THEN RETURN
  1159	L.OFFALT
  1160	
  1161	  IF MODE(FN)=DIRECT THEN DO
  1162	   IF FTYP(FN)#INPUT AND TEMP_DSIZE(FN)#0 THEN DO
  1163	    DSETCP(FN,TEMP-1)     !LAST ELEMENT
  1164	    IF TEMP _ WPB(TEMP MOD EBUFSZ(FN))>0 THEN DO
  1165	      I _ GETCHK(FN)
  1166	      WBLK(FN,TEMP,I,BLK.ID(CPBUF(FN)))
  1167	      FN.ID(CPBUF(FN)) _ -1
  1168	    END
  1169	   END
  1170	    FOR I _ 0 TO NBUFS-1 IF FN.ID(I)=FN THEN &
  1171	      [IF DIRTY(I) THEN CLEAN(I); FN.ID(I)_-1]
  1172	  END ELSE [IF FTYP(FN)=OUTPUT THEN S.WBLK(FN)]
  1173	  CLOSE1(OPTION); IF MODE(FN)#DIRECT THEN RLS.RNG; L.ONALT; RETURN
  1174	
  1175	
  1176	%%DELETE (FID, ERLAB:)
  1177	
  1178	!DELETE FILE WITH NAME AT FID
  1179	
  1180	         L.OFFALT
  1181	         FN _ OPEN(FID, INPUT+DIRECT, ERLAB); CLOSE1(DEL)
  1182	         L.ONALT; RETURN
  1183	
  1184	
  1185	%%RENAME (OLDFID, NEWFID, ERLAB:)
  1186	
  1187	! MACHINE DEPENDENT
  1188	! RENAME FILE WITH NAME AT OLDFID TO NAME AT NEWFID

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:30	 Page 23
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1189	
  1190	LOCAL OUT:, OLDRLS:, PTR, DATE, HIDATE
  1191	
  1192	DEF HI.DATE.BYTE AS BYT(EXTARG(FIDP),2,14)
  1193	
  1194	         L.OFFALT
  1195	         FN _ OPEN(OLDFID, INPUT+DIRECT, ERLAB)
  1196	         HIDATE _ HI.DATE.BYTE
  1197	         DATE _ PRVARG(FIDP)
  1198	         IF NEWFID<0 THEN FIDP _ -NEWFID ELSE DO
  1199	           PTR _ CHPT(NEWFID,-1); SETFID(FIDTBL,@PTR,0,OLDRLS)
  1200	         END
  1201	         HI.DATE.BYTE _ HIDATE
  1202	         PRVARG(FIDP) _ DATE
  1203	         EXU(RNMCD, FN, @ARGCNT(FIDP), OUT)    !CLOSE IS AUTOMATIC
  1204	         DO.ERR(FN)
  1205	OLDRLS:  CLOSE1(SAVE); FNERR(IFDERR)
  1206	
  1207	OUT:	 EXU(RLSCD, FN, 0)
  1208	         FTYP(FN) _ -1 !SINCE SKIPPED CLOSE!; L.ONALT; RETURN
  1209	
  1210	
  1211	%CLOSE1 (OPT)
  1212	
  1213	! MACHINE DEPENDENT.
  1214	! CLOSE FILE FN. DELETE IF OPT=DEL, OTHERWISE SAVE.
  1215	!  SET FTYP(FN) NEGATIVE.
  1216	
  1217	LOCAL RELEAS:
  1218	
  1219	       IF OPT=DEL THEN DO
  1220	         FIDTBL(0) _ 0
  1221	         EXU(RNMCD, FN, FIDTBL, RELEAS)  !CLOSE IS AUTOMATIC
  1222	         DO.ERR(FN)
  1223	       END ELSE DO
  1224	         EXU(CLSCD, FN, OPT)
  1225	         EXU(STZCD, FN, OCT 740.000, RELEAS)
  1226	         MSG('CAN NOT CLOSE FILE$')
  1227	         ABNERR(FN)      !CAN'T CLOSE FILE
  1228	RELEAS:  EXU(RLSCD, FN, 0)
  1229	       END
  1230	       FTYP(FN) _ -1; RETURN
  1231	
  1232	END CLOSE1
  1233	
  1234	%RLS.RNG
  1235	! RELEASE RING BUFFERS FOR FILE FN
  1236	
  1237	LOCAL LINK
  1238	
  1239	LINK _ RH(CURBUF(FN)); RH(CURBUF(FN)) _ 0  !NO SOFT STORE
  1240	WHILE LINK#0 THEN RLSMEM(BBUFSZ,(LINK<==RH(LINK))-1)
  1241	RETURN
  1242	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:31	 Page 24
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1243	END RLS.RNG
  1244	
  1245	END CLOSE
  1246	
  1247	
  1248	%CANC.ALL   !  LIKE CLOSE ALL, BUT SEQUEN OUTPUT FILES ARE NOT SUPERCEDED.
  1249	
  1250	   LOCAL I
  1251	
  1252	   FOR I _ FNMIN TO FNMAX  IF FTYP(I)>=0 THEN CANCEL(I)
  1253	   RETURN
  1254	
  1255	END CANC.ALL
  1256	
  1257	
  1258	%CLOSE.ALL
  1259	! CLOSE ALL FILES
  1260	
  1261	LOCAL I
  1262		FOR I _ FNMIN TO FNMAX  IF FTYP(I)>=0 THEN CLOSE(I)
  1263		RETURN
  1264	END CLOSE.ALL
  1265	
  1266	
  1267	%BUF.DUMP
  1268	
  1269	! MACHINE DEPENDENT IN PART (INDICATED).
  1270	! TO BE CALLED AS A PROTECTIVE MEASURE BEFORE DOING SOMETHING THAT
  1271	! MAY DESTROY FILE BUFFERS.  WRITES OUT ALL DIRTY BLOCKS IN DIRECT
  1272	! MODE BUFFERS & SETS THEM CLEAN.  ACTION TO PROTECT SEQUEN FILES 
  1273	! IS MACHINE DEPENDENT.  FOR THIS IMPLEMENTATION, WAIT UNTIL ALL
  1274	! CHANNELS ARE INACTIVE (NO MORE DATA TRANSMISSION). OK IF CHANNEL
  1275	! NOT IN USE.
  1276	
  1277	L.OFFALT
  1278	FOR I _ 0 TO NBUFS-1 IF FN.ID(I)>=0 AND DIRTY(I) THEN CLEAN(I)
  1279	FOR I _ FNMIN TO FNMAX EXU(CLICD, I, OCT 10)
  1280	L.ONALT; RETURN
  1281	
  1282	END BUF.DUMP
  1283	
  1284	
  1285	%FIXBUF(DISP)
  1286	
  1287	! MOVES I/O BUFFERS UP OR DOWN BY THE AMOUNT IN DISP.  USED BY MIGHTYCHAIN.
  1288	! RETURNS DISP.
  1289	
  1290	LOCAL FN, P, FIRSTP
  1291	
  1292	FN.ID +_ DISP
  1293	BLK.ID +_ DISP
  1294	DIRTY +_ DISP
  1295	
  1296	FOR FN _ FNMIN BY 1 TO JOBHCU &

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:32	 Page 25
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1297	  IF FTYP(FN)>=0 AND MODE(FN)=SEQUEN THEN DO
  1298	    LH(14) _ FN+(IF FTYP(FN)=INPUT THEN OCT 20 ELSE OCT 40)
  1299	    RH(14) _ DISP
  1300	    EXU(CLICD, 14, - OCT 27)	!MOVBUF
  1301	    IF RH(@S.EPTR(FN))#0 THEN S.EPTR(FN) +_ DISP
  1302	    IF RH(@EPTR(FN))#0 THEN EPTR(FN) +_ DISP
  1303	    FIRSTP _ P _ CURBUF(FN); CURBUF(FN) _ CURBUF(FN)+DISP
  1304	    LOOP [RH(P) _ RH(P)+DISP; WHILE (P _ RH(P)-DISP) # FIRSTP]
  1305	  END
  1306	
  1307	RETURN DISP
  1308	
  1309	END FIXBUF
  1310	
  1311	
  1312	
  1313	!     *****  FILE CURSOR POSITION & SIZE
  1314	
  1315	
  1316	%SETCPI (FN,POS)
  1317	
  1318	! DIRECT MODE ONLY.  SETS CURSOR POSITION ON FN TO POS.
  1319	! KEEPS TRACK OF MAXIMUM ABANDONED CURSOR POSITION, USED IN %SIZE.
  1320	! SETCPI CALLED AT OPEN TIME, SINCE NO PREVIOUS CP YET.
  1321	
  1322	! NEGATES CPBUF(FN), INDICATING TO %CP THAT CURSOR POSITION
  1323	! CAN BE FOUND IN CP1(FN).  CPBUF UNNEGATED WHEN I/O DONE.
  1324	
  1325	! SETS RLAB(FN) AND WLAB(FN) TO LABEL TO BE BRANCHED TO ON NEXT
  1326	! READ OR WRITE OF FN. SEE %R AND %W.
  1327	
  1328	L.OFFALT; GO HERE
  1329	
  1330	%%SETCP (FN,POS)
  1331	
  1332	IF MODE(FN)=SEQUEN THEN FNERR(FMDERR)
  1333	IF POS<0 THEN FNERR(ARGERR)
  1334	%%DSETCP (FN, POS)
  1335	
  1336	         L.OFFALT
  1337	         IF CPBUF(FN)>=0 THEN MXACP(FN) _ MXACP(FN) MAX DCP(FN)
  1338	HERE:    CP1(FN) _ POS; CPBUF(FN) _ -1
  1339	         RLAB(FN) _ RINIT
  1340	         WLAB(FN) _ IF FTYP(FN)=INPUT THEN W.ERR ELSE WINIT
  1341	         L.ONALT
  1342	         RETURN POS
  1343	
  1344	END SETCPI
  1345	
  1346	
  1347	%CP (FN)
  1348	
  1349	! RETURNS CURSOR POSITION ON FILE FN.
  1350	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:33	 Page 26
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1351	! IF DIRECT MODE:
  1352	! IF NO READ OR WRITE HAS BEEN DONE SINCE LAST SETCP ON FN
  1353	! (CPBUF(FN)<0), POSITION NEED NOT BE CALCULATED (=CP1(FN)).
  1354	! OTHERWISE, MUST BE CALCULATED FROM CPBUF(FN), WHICH INDICATES
  1355	! BUFFER CONTAINING CURSOR POSITION, AND AVAILABLE INFO FOR CPBUF.
  1356	
  1357	! IF SEQUEN MODE:
  1358	! CP1(FN) IS 1ST POSITION ON BLOCK PAST CURRENT BLOCK, S.ECNT IS
  1359	! COUNT OF REMAINING ELEMENTS ON CURRENT BLOCK.
  1360	
  1361	IF FN=TEL THEN FNERR(TELERR)
  1362	
  1363	IF MODE(FN)=SEQUEN THEN RETURN CP1(FN)-ECNT(FN)
  1364	
  1365	%%DCP (FN)       !DIRECT MODE ONLY
  1366	
  1367	RETURN IF CPBUF(FN)<0 THEN CP1(FN) ELSE BLK.ID(CPBUF(FN))*EBUFSZ(FN)-ECNT(FN)
  1368	
  1369	END CP
  1370	
  1371	
  1372	%SIZE (FN)
  1373	
  1374	! MACHINE DEPENDENT IN PART.
  1375	! RETURNS CURRENT SIZE OF FILE IN ELEMENTS, DEFINED AS:
  1376	!
  1377	! DIRECT MODE  - MAX. OF CURRENT CURSOR POS, IF I/O DONE AT  IT,
  1378	!                MAX. ABANDONED CP AT WHICH I/O DONE,
  1379	!                & OPNSZ(FN), WHICH IS REDUCED IF ERASE DONE.
  1380	!                (EXACT OPNSZ CALCULATED IF NECESSARY)
  1381	! SEQUEN INPUT  -  ON PDP-10, LIMITED TO RETURNING ONLY CPW*NO.
  1382	!                  OF WORDS.  (USETI & BUFFERED
  1383	!                  MODE DON'T MIX)
  1384	! SEQUEN OUTPUT -  CP(FN)
  1385	
  1386	LOCAL %OPNSZX
  1387	
  1388	IF FN=TEL THEN FNERR(TELERR)
  1389	IF MODE(FN)=SEQUEN THEN RETURN IF FTYP(FN)=OUTPUT THEN CP(FN) &
  1390	  ELSE OPNSZ(FN)
  1391	
  1392	%%DSIZE (FN)         !DIRECT MODE ONLY
  1393	
  1394	IF CPBUF(FN)>=0 THEN MXACP(FN) _ MXACP(FN) MAX DCP(FN)
  1395	IF MXACP(FN)>=OPNSZ(FN) THEN RETURN MXACP(FN)
  1396	IF SZFG(FN)<0 THEN SZFG(FN) _ OPNSZX(FN)
  1397	RETURN MXACP(FN) MAX OPNSZ(FN)
  1398	
  1399	%OPNSZX (FN)
  1400	
  1401	! ADJUSTS OPNSZ(FN) TO BE EXACT FILE SIZE IN ELEMENTS.
  1402	! CALLED FROM %SIZE.  FOR DIRECT, CHARACTER FILES ONLY.
  1403	
  1404	LOCAL TEMP, I      !'I' IS A FIX AROUND SIMPL BUG

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:34	 Page 27
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1405	
  1406	IF OPNSZ(FN)#0 THEN DO
  1407	  L.OFFALT; TEMP _ DCP(FN); SETCP(FN,OPNSZ(FN)-1)  !AT LAST POSITION
  1408	  GETCHK(FN)
  1409	  REPEAT 2 NCHV EPTR(FN)
  1410	  I _ EPTR(FN)
  1411	   LOOP DO
  1412	    REPEAT CPW; WHILE PCHV I=0; DEC OPNSZ(FN)
  1413	    INC ECNT(FN)  !FOR DCP CALL IN SETCP (BELOW)
  1414	  END
  1415	  DSETCP(FN,TEMP); L.ONALT
  1416	END
  1417	RETURN 0     !TO SET SZFG
  1418	
  1419	END OPNSZX
  1420	
  1421	END SIZE
  1422	
  1423	
  1424	!     *****  FILE & TERMINAL INPUT & OUTPUT
  1425	
  1426	
  1427	%INIT.R
  1428	
  1429	LOCAL OBPI, NBPI       !NCHV IS 1ST CHAR OF OLD & NEW LINE BUFFERS
  1430	LOCAL NBP              !CURRENT NEW LINE BUFFER PTR
  1431	LOCAL NBPE             !PTR TO END OF NEW LINE BUFFER
  1432	
  1433	DEF NOTERM(CHAR) AS (CARRET#CHAR#TERMCH)
  1434	DEF TERM(CHAR) AS NOT NOTERM(CHAR)
  1435	
  1436	TABLE DEFTAB(0:8)[8,9,17,25,33,41,49,57,65]
  1437	
  1438	! INITIALIZATION
  1439	
  1440	OBPI _ CHPT(FREE,-1)
  1441	NBPI _ CHPT(IMAGE,-1)
  1442	NBPE _ CHPT(IMAGE,LLEN)    !CHV(NBPE) IS LAST CHAR
  1443	CH(IMAGE) _ EOLIT     !NO EDIT IMAGE
  1444	RETURN
  1445	
  1446	%%SET.TERM(TERMCH)
  1447	LOCAL OLDTERMCH
  1448	RETURN OLDTERMCH <== TERMCH
  1449	
  1450	%%TAB.OFF(%OFF)
  1451	LOCAL OLDOFF
  1452	RETURN OLDOFF <== %OFF
  1453	
  1454	%%SET.PRMPT(%PROMPT)
  1455	LOCAL OLDPROMPT
  1456	RETURN OLDPROMPT <== %PROMPT
  1457	
  1458	%%SET.TAB(TAB())

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:35	 Page 28
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1459	LOCAL OLDTAB
  1460	IF TAB=0 THEN TAB _ DEFTAB; RETURN OLDTAB <== TAB
  1461	
  1462	
  1463	%R (FN)
  1464	
  1465	! RETURNS ELEMENT READ FROM CURSOR POSITION ON FILE FN.
  1466	
  1467	! RLAB(FN) IS  RTEL IF FN IS TEL 
  1468	
  1469	!              IF DIRECT MODE:
  1470	!              RINIT IF THIS IS 1ST ACCESS TO FN AFTER SETCP ON FN
  1471	!              OTHERWISE, IS ADDRESS OF CORRESPONDING READ ROUTINE.
  1472	!              SPECIAL ROUTINE TO CHECK FOR EOF IF READING LAST
  1473	!              BLOCK, SINCE DON'T WANT TO REDUCE ECNT(FN)
  1474	!              (WHICH WOULD SCREW UP %CP & %W)
  1475	
  1476	!              IF SEQUEN MODE:
  1477	!              R.ERR IF OUTPUT FILE
  1478	!              OTHERWISE, ADDRESS OF CORRESPONDING READ ROUTINE
  1479	
  1480	DEF WDMAC(X) AS IF ECNT(FN)>X THEN [DEC ECNT(FN); RETURN ^INC EPTR(FN)]
  1481	DEF CHMAC(X) AS IF ECNT(FN)>X THEN [DEC ECNT(FN); RETURN NCHV EPTR(FN)]
  1482	DEF PKMAC(X) BY IF ECNT(FN)>X THEN DO
  1483	          DEC ECNT(FN)
  1484		  IF DEC SUBCNT(FN)<0 THEN [EPTR(FN) +_2; SUBCNT(FN)_8]
  1485		  [;PKB] _ [^EPTR(FN);^(EPTR(FN)+1)] DSHR SUBCNT(FN)*8
  1486		  RETURN PKB BAND OCT 377
  1487		END ENDM PKMAC
  1488	
  1489	LOCAL CP.TO.EOF
  1490	
  1491	         GO ^RLAB(FN)
  1492	
  1493	ENDRWD:  WDMAC(ENDCNT(FN)); GO NXBLK
  1494	
  1495	ENDRPK:  PKMAC(ENDCNT(FN))
  1496	         GO NXBLK
  1497	
  1498	ENDRCH:  CHMAC(ENDCNT(FN)); GO NXBLK
  1499	
  1500	RWD:     WDMAC(0); GO NXBLK
  1501	
  1502	RPK:     PKMAC(0)
  1503	         GO NXBLK
  1504	
  1505	RCH:     CHMAC(0)
  1506	
  1507	NXBLK:   IF MODE(FN)=SEQUEN THEN [S.RBLK(FN); GO ^RLAB(FN)]
  1508	RINIT:   IF CP.TO.EOF _ DSIZE(FN)-DCP(FN)<=0 THEN FNERR(EOFERR)
  1509	         L.OFFALT; GETCHK(FN)
  1510	         IF WLAB(FN)#W.ERR THEN WLAB(FN) _ WSET
  1511	         L.ONALT
  1512	         GO ^RLAB(FN) _ IF ENDCNT(FN) _ ECNT(FN)-CPTOEOF>0 THEN &

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:37	 Page 29
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1513	           ENDRADR(ORGIND(FN)) ELSE RADR(ORGIND(FN))
  1514	
  1515	RTEL:    RETURN GET
  1516	
  1517	R.ERR:   FNERR(FMDERR)
  1518	
  1519	
  1520	%%PLNCHK (FN)
  1521	
  1522	! CALLED AFTER FILE OPEN; RETURNS 1 IF FIRST WORD ON FILE FN
  1523	! IS A PDP-10 STANDARD LINE NUMBER (BIT 35 ON), ELSE RETURNS 0.
  1524	
  1525	RETURN [^(IF MODE(FN)=SEQUEN THEN S.RBLK(FN) ELSE GETCHK(FN)) BON 1]
  1526	
  1527	
  1528	%RB (FN, CNT, ADR)
  1529	
  1530	DEF GETCH(C) AS TEMP _ CHPT(ADR,-1); REPEAT C [NCHV TEMP _ R(FN); &
  1531	  DEC CNT]
  1532	DEF GETWD(C) AS REPEAT C [^ADR _ R(FN); INC ADR; DEC CNT]
  1533	LOCAL %GETPK
  1534	
  1535	LOCAL HOLD, TEMP, CFRAG, PFRAG, PTR
  1536	LOCAL ULAB, HERE:
  1537	LOCAL %SZAP, %DZAP, I
  1538	
  1539	IF RLAB(FN)=R.ERR THEN FNERR(FMDERR)
  1540	IF FN=TEL THEN FNERR(TELERR)
  1541	IF HOLD _ CNT <0 THEN FNERR(ARGERR)
  1542	IF HOLD=0 THEN RETURN 0
  1543	[PTR;PFRAG] _ CP(FN) DIVMOD EBUFSZ(FN); INC PTR  !BLK NO & ELMT DISPL
  1544	L.OFFALT
  1545	ULAB _ SETRWE(FN,HERE)
  1546	
  1547	DO ORGIND(FN) OF ORGINDLIM
  1548	
  1549	1:         !CHARACTER! &
  1550	  IF PFRAG MOD CPW THEN DO    !CP NOT AT WORD BOUNDARY
  1551	    GETCH(HOLD)
  1552	  END ELSE DO      !CP AT WORD BOUNDARY
  1553	    IF MODE(FN)=SEQUEN THEN DO       !SEQUEN CHARACTER
  1554		CHPT(PTR,PFRAG) _ EPTR(FN); INC PTR
  1555		SZAP
  1556		ECNT(FN) -_ CNT
  1557		[TEMP;CFRAG] _ CNT DIVMOD CPW
  1558		IF TEMP#0 THEN MOVE TEMP FROM PTR TO ADR
  1559		EPTR(FN) _ CHPT(PTR+TEMP,-1); PTR _ CHPT(ADR+TEMP,-1)
  1560		REPEAT CFRAG NCHV PTR _ NCHV EPTR(FN)
  1561	    END ELSE DO       !DIRECT CHARACTER
  1562		IF PFRAG THEN DO       !CP NOT AT BLOCK BOUNDARY
  1563		  GETCH(HOLD MIN BUFSZ*CPW-PFRAG)
  1564		  CHPT(ADR,PFRAG) _ TEMP     !PFRAG IS DUMMY
  1565		  INC ADR
  1566		  INC PTR

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:38	 Page 30
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1567		END
  1568		DZAP; GETCH(CFRAG)
  1569	    END
  1570	  END
  1571	
  1572	0:       !WORD! &
  1573	  IF MODE(FN)=SEQUEN THEN DO          !SEQUEN WORD
  1574		PTR _ 1+EPTR(FN)
  1575		SZAP
  1576		IF CNT#0 THEN DO
  1577		  MOVE CNT FROM PTR TO ADR; EPTR(FN) +_ CNT
  1578		  ECNT(FN) -_ CNT
  1579		END
  1580	  END ELSE DO          !DIRECT WORD
  1581		IF PFRAG THEN DO    !CP NOT AT BLOCK BOUNDARY
  1582		  GETWD(HOLD MIN BUFSZ-PFRAG)
  1583		  INC PTR
  1584		END
  1585		DZAP; GETWD(CFRAG)
  1586	  END
  1587	
  1588	2:       !PACK! &
  1589	IF SUBCNT(FN)>0 THEN DO    !CP NOT AT WORD BOUNDARY
  1590		GETPK(HOLD)
  1591	END ELSE DO     !CP AT WORD BOUNDARY
  1592	  IF MODE(FN)=SEQUEN THEN DO      !SEQUEN PACK
  1593		PTR _ 2+EPTR(FN)
  1594		SZAP
  1595		[TEMP;CFRAG] _ CNT DIVMOD 9
  1596		IF TEMP#0 THEN DO
  1597		  MOVE TEMP*2 FROM PTR TO ADR
  1598		  EPTR(FN) +_ TEMP*2; ADR +_ TEMP*2
  1599		END
  1600		ECNT(FN) -_ CNT-CFRAG
  1601		GETPK(CNT _ CFRAG)
  1602	  END ELSE DO       !DIRECT PACK
  1603		IF PFRAG THEN DO     !NOT AT BLOCK BOUNDARY
  1604		  GETPK(HOLD MIN EBUFSZ(FN)-PFRAG)
  1605		  INC PTR
  1606		END
  1607		DZAP; GETPK(CFRAG)
  1608	  END
  1609	END
  1610	
  1611	END
  1612		CNT _ 0     !READ ALL
  1613	HERE:	SETRWE(FN,ULAB); L.ONALT
  1614		IF CNT=HOLD THEN FNERR(EOFERR)
  1615		RETURN HOLD-CNT
  1616	
  1617	%GETPK (C)
  1618	
  1619	LOCAL PKEOF:, PKA, PKB
  1620	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:40	 Page 31
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1621		SETRWE(FN,PKEOF)
  1622		PKA _ PKB _ 0; I _ 9
  1623		WHILE DEC C>=0 THEN DO
  1624		  TEMP _ R(FN)  !SO EOF EXIT BEFORE DSHL
  1625		  [PKA;PKB] _ [PKA;PKB] DSHL 8; PKB BOR_ TEMP
  1626		  IF DEC I=0 THEN DO
  1627		    ^ADR _ PKA <==0; ^INC ADR _ PKB <==0; INC ADR
  1628		    CNT -_ I _ 9
  1629		  END
  1630		END
  1631	PKEOF:	IF I<9 THEN DO
  1632		  CNT -_ 9-I
  1633		  [PKA;PKB] _ [PKA;PKB] DSHL I*8
  1634		  [I;TEMP] _ [BNOT 0; BNOT 0] DSHL I*8
  1635		  ^ADR _ ^ADR BAND BNOT I BOR PKA
  1636		  ^ADR _ ^INC ADR BAND BNOT TEMP BOR PKB
  1637		  INC ADR
  1638		END
  1639		IF C>=0 THEN GO HERE   !HIT EOF
  1640		SETRWE(FN,HERE)
  1641		RETURN
  1642	END GETPK
  1643	
  1644	%SZAP
  1645	! READ FULL WDS FROM PTR INTO BUFFER AT ADR UNTIL CNT<=ECNT(FN).
  1646	! UPDATE ADR AND COUNT.
  1647	
  1648		WHILE CNT>ECNT(FN) THEN DO
  1649		  IF ECNT(FN)#0 THEN DO
  1650		    MOVE I _ WPB(ECNT(FN)) FROM PTR TO ADR
  1651		    ADR +_ I; CNT -_ ECNT(FN) <== 0
  1652		  END
  1653		  PTR _ S.RBLK(FN)
  1654		END
  1655		RETURN
  1656	
  1657	END SZAP
  1658	
  1659	%DZAP
  1660	! READ BLOCKS DIRECTLY FROM FN INTO BUFFER AT ADR
  1661	! STARTING AT BLOCK:  PTR
  1662	! NO. OF BLOCKS:  DETERMINE FROM REMAINING ELEMENT COUNT, CNT,
  1663	! BUT DO NOT READ PAST PENULTIMATE BLOCK.
  1664	! SET CFRAG TO ELEMENT FRAGGLE BEYOND LAST BLOCK READ.
  1665	
  1666		  [TEMP;CFRAG] _ CNT DIVMOD EBUFSZ(FN)
  1667		  EXU(UGFCD,FN,@I)
  1668		  IF TEMP > I_TEMP MIN RH(@I)-PTR THEN DO  !EOF
  1669		    TEMP _ I; CFRAG _ EBUFSZ(FN)
  1670		  END
  1671		  IF TEMP >0 THEN DO
  1672		    FOR J _ PTR TO PTR+TEMP-1 DO        !WRITE OUT IF DIRTY
  1673		      FOR I _ 0 TO NBUFS-1 DO
  1674		        IF FN.ID(I)=FN AND BLK.ID(I)=J AND DIRTY(I) THEN DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:41	 Page 32
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1675		          CLEAN(I)
  1676		        END
  1677		      END
  1678		    END
  1679		    RBLK(FN,TEMP,ADR,PTR); ADR +_ TEMP*BUFSZ
  1680		    CNT -_ I_TEMP*EBUFSZ(FN)
  1681		    MXACP(FN) _ MXACP(FN) MAX SETCP(FN,DCP(FN)+I)
  1682		  END
  1683		RETURN
  1684	END DZAP
  1685	
  1686	END RB
  1687	
  1688	END R
  1689	
  1690	
  1691	%GETLINE (FN)
  1692	
  1693	! READS A LINE FROM FN AND, IF FN IS TEL:
  1694	!  STORES LINE IN NEW (IMAGE) BUFFER.  HANDLES OVERFLOW LOCALLY BY
  1695	!  REQUESTING NEW LINE.  PERFORMS EDITING SPECIFIED BY CONTROL
  1696	!  CHARACTERS, WITH OLD LINE BEING LINE PASSED IN NEW BUFFER
  1697	!  FOLLOWED BY EOLIT.  ECHO CR AFTER LF.
  1698	!  TERMCH - END OF LINE CHAR IN ADDITION TO CARRET (EOLIT IF NONE))
  1699	!  %PROMPT - PRINTS PROMPT CHARACTERS
  1700	! IF FN IS NOT TEL:
  1701	!  IGNORES EOLITS.  STORES LINE IN OLD (FREE) BUFFER. IGNORES ANY
  1702	!  CHARS AT FILE END NOT FOLLOWED BY CARRET.
  1703	!  ERRORS: EOFERR, LNGERR (LINE TOO LONG), ABNERR.
  1704	!  WHEN EOFERR OCCURS, IF OBP#OBPI, CHARS LIE BETWEEN LAST CR
  1705	!  AND EOF, ELSE EOF FOLLOWS CR IMMEDIATELY.
  1706	!
  1707	! IN EITHER CASE, LINE IS STORED WITH TERMINATOR AND EOLIT AT END
  1708	! AND PTR TO 1 BEFORE FIRST CHAR IS RETURNED.
  1709	! GLOBAL GLCNT CONTAINS NO. OF CHARS STORED (EXCLUDING EOLIT).
  1710	!
  1711	! LF-CR HANDLING IS MACHINE DEPENDENT:
  1712	!  FILE INPUT: CR LF TERMINATES LINES, TRANSLATES TO CR EOLIT.
  1713	!              OTHERWISE, CR AND LF ARE NOT SPECIAL.
  1714	!  TERMINAL INPUT: CR IS ALWAYS FOLLOWED BY LF BY THE SYSTEM. IT TERMINATES
  1715	!                  THE LINE, TRANSLATES TO CR EOLIT.
  1716	!                  CR IS ECHOED AFTER LF IS RECEIVED.
  1717	
  1718	LOCAL OBP              !CURRENT OLD LINE PTR
  1719	LOCAL OBPB, NBPB       !NCHV IS 1ST CHAR OF LINE OR INSERT
  1720	LOCAL OBPLE            !END OF OLD LINE (NCHV IS EOLIT)
  1721	LOCAL OBPE             !LIMIT TO OBP; INITIALLY OBPLE; MOVES PAST
  1722	                       !LINE END WITH OBP WHEN CHARS ARE STORED IN NEW
  1723	
  1724	LOCAL %PNB, %ECHK, %GETTAB, %NLPOS, %NXCH
  1725	LOCAL AFG, E.ON, CHAR, POS, TEMP, J, HOLD
  1726	LOCAL DELFG, EXCFG, SAVLOC, ALTFX:, SAVDEST
  1727	
  1728	DEF NBCHKB AS IF NBP=NBPB THEN GO RING

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:43	 Page 33
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1729	DEF OB.END AS OBP=OBPE
  1730	
  1731	!ADVANCE 1 CHAR IN OLD
  1732	DEF FORW.OB AS [IF OB.END THEN NCHV OBPE; NCHV OBP]
  1733	
  1734	!BACKSPACE 1 CHAR IN OLD
  1735	DEF BACK.OB BY DO
  1736	  IF OBP=OBPB THEN GO RING
  1737	  IF OB.END#OBPLE THEN PCHV OBPE; PCHV OBP
  1738	END
  1739	ENDM BACK.OB
  1740	
  1741	!COPY 1 CHAR FROM OLD TO NEW & PRINT IT. EXIT IF TERMINATOR.
  1742	DEF COPRNX AS IF TERM(PUTC(PNB(NCHV OBP))) THEN GO XIT
  1743	
  1744	         IF FN#TEL THEN DO
  1745	           OBP _ OBPI; GLCNT _ 0; CHAR _ NXCH
  1746	           WHILE INC GLCNT<=LLEN THEN DO
  1747		     IF NCHV OBP _ CHAR =CARRET THEN DO
  1748		       EIF NXCH#LNFEED THEN CHAR _ TEMP  !FROM NXCH
  1749		       ELSE DO
  1750	                  NCHV OBP _ EOLIT
  1751	                  IF (FN=CFN) THEN DO
  1752	                     IF (COM.ECHO.DEST BAND TO.TOUT) AND TOUT.FILE THEN DO
  1753	                        TEMP _ TT.DEST(TO.TOUT)
  1754	                        PROMPT   ! PUTS PROMPT TO SAME DEST AS COM ECHO.
  1755	                        F.P.PRINT(TOUT.FILE,OBPI)
  1756	                        TT.DEST(TEMP)
  1757	                     END
  1758	                     IF (COM.ECHO.DEST BAND TO.TERM) THEN DO
  1759	                        TEMP _ TT.DEST(TO.TERM)
  1760	                        PROMPT
  1761	                        PRINT(FREE)
  1762	                        TT.DEST(TEMP)
  1763	                     END
  1764	                  END
  1765	                  RETURN OBPI
  1766	               END
  1767		     END ELSE CHAR _ NXCH
  1768	           END
  1769	! OVERFLOW ON FILE LINE AT CHAR
  1770	           CHV OBP _ CARRET; NCHV OBP _ EOLIT
  1771	           LOOP DO
  1772		     IF CHAR=CARRET THEN DO
  1773		       WHILE NXCH#LNFEED; CHAR _ TEMP
  1774		     END ELSE CHAR _ NXCH
  1775	           END
  1776	           FNERR(LNGERR)
  1777	         END
  1778	
  1779	! TERMINAL INPUT
  1780	         SET.CTRL
  1781	         SAVLOC _ ALTLOC
  1782	         AFG _ E.ON _ NO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:44	 Page 34
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1783	
  1784	RSTRT:   OBP _ OBPB _ OBPE _ OBPI
  1785	         HOLD _ NBP _ NBPB _ NBPI
  1786	
  1787	!  MOVE NEW TO OLD & CLEAR NEW
  1788	         WHILE NCHV OBPE_NCHV HOLD #EOLIT THEN DO
  1789	           IF HOLD=NBPE THEN HALT     !BAD IMAGE LINE
  1790	         END
  1791	         PCHV OBPE; OBPLE _ OBPE
  1792	         ALTLOC _ ALTFX
  1793	         SAV.DEST _ TT.DEST(TO.TERM)
  1794	PCGET:   MOVE GLBSZ FROM ALL EOLITWD TO IMAGE
  1795	
  1796	         PROMPT
  1797	!  GET A CHARACTER. ASSUME LF FOLLOWS CR. IF IN ACTRL/WCTRL MODE,
  1798	!  MUST BREAK ON ALL SO CAN PRINT BACK SLASH IF NEC.
  1799	!  IGNORE RUBOUT.
  1800	CGET:	EIF AFG=NO THEN DO
  1801		  WHILE CHAR_GET=RUBOUT THEN NULL
  1802		  EIF CHAR=CARRET THEN GET
  1803		  FIF CHAR=LNFEED THEN PUTX(CARRET)
  1804		END
  1805		ELSE DO
  1806		  OFF.ECHO; WHILE CHAR _ GET.BRK=RUBOUT THEN NULL; ON.ECHO
  1807		  IF ACTRL#CHAR#WCTRL THEN DO
  1808		    PUT($\); AFG _ NO
  1809		    EIF PUTX(CHAR)=CARRET THEN GET
  1810		    FIF CHAR=LNFEED THEN PUTX(CARRET)
  1811		  END
  1812		END
  1813		 IF TERM(CHAR) THEN [PNB(CHAR); GO XIT]
  1814	         IF CTRLCH(CHAR) THEN GO CTREXU
  1815	CSTOR:   PNB(CHAR); IF NOT E.ON THEN FORW.OB
  1816	         GO CGET
  1817	
  1818	PCRXIT:  PUT(PNB(CARRET))  !STORE & PRINT CR
  1819	XIT:     PNB(EOLIT)        !STORE EOLIT
  1820	         L.OFFALT
  1821	         ALTLOC _ SAVLOC
  1822	         TT.DEST(SAV.DEST)
  1823	         UNSET.CTRL
  1824	         L.ONALT
  1825	         CHPT(HOLD,GLCNT) _ NBP
  1826	         GLCNT +_ (HOLD-IMAGE)*CPW  !EXCLUDE EOLIT FROM COUNT
  1827	         IF (TERM.ECHO.P) AND (TOUT.FILE) THEN DO
  1828	            TEMP _ TT.DEST(TO.TOUT)
  1829	            PROMPT
  1830	            TT.DEST(TEMP)
  1831	            F.P.PRINT(TOUT.FILE,NBPI)
  1832	         END
  1833	         RETURN NBPI
  1834	
  1835	
  1836	!  ALT MODE TYPED.  MOVE OLD BACK TO NEW

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:45	 Page 35
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1837	ALTFX:   L.OFFALT
  1838	         IF (TERM.ECHO.P) AND (TOUT.FILE) THEN DO
  1839	            PNB(CARRET)
  1840	            PNB(EOLIT)
  1841	            F.P.MSG(TOUT.FILE,NBPI)
  1842	         END
  1843	         MOVE GLBSZ FROM FREE TO IMAGE
  1844	         ALTLOC _ SAVLOC
  1845	         TT.DEST(SAV.DEST)
  1846	         UNSET.CTRL
  1847	         L.ONALT; GO ^ALTLOC
  1848	
  1849	
  1850	!  EXECUTE CONTROL CHARACTER
  1851	CTREXU:  IF CHAR>ZCTRL THEN GO RING
  1852	         DO CHAR OF ACTRL:ZCTRL
  1853	
  1854	!  CHANGE INSERT MODE; PRINT OPEN OR CLOSE ANGLE BRACKET
  1855	ECTRL:   IF NOT ECHK THEN DO
  1856	           E.ON _ YES; PUT($<)
  1857	           NBPB _ NBP; OBPB _ OBP
  1858	         END
  1859	
  1860	!  BACKSPACE OLD & NEW 1 CHAR; PRINT BACK ARROW
  1861	NCTRL:   IF NOT E.ON THEN BACK.OB
  1862	         NBCHKB; PCHV NBP; PUT($_)
  1863	
  1864	!  BACKSPACE NEW 1 CHAR. PRINT CHAR PRECEDED BY BACK SLASH IF
  1865	!  1ST ACTRL/WCTRL.
  1866	ACTRL:   NBCHKB; IF NO=AFG<==YES THEN PUT($\)
  1867	         PUTC(CHV NBP); PCHV NBP
  1868	
  1869	!  BACKSPACE NEW TO LAST SPACE BEFORE LAST NON-SPACE
  1870	!  PRINT SAME AS WOULD ACTRLS.
  1871	WCTRL:   NBCHKB; IF NO=AFG<==YES THEN PUT($\)
  1872		LOOP [I_PUTC(CHV NBP); PCHV NBP; WHILE I=$  AND NBP#NBPB]
  1873		WHILE NBP#NBPB AND I_CHV NBP#$  THEN [PUTC(I); PCHV NBP]
  1874	
  1875	!  RESTART OLD & NEW AT BEGINNING OF LINE OR INSERT
  1876	!  PRINT UP ARROW & CR
  1877	QCTRL:   NBCHKB; NBP _ NBPB; OBP _ OBPB; PUT($^)
  1878	         IF NOT E.ON THEN [PUT(CARRET); GO PCGET]
  1879	
  1880	!  STORE BLANKS UP TO NEXT TAB
  1881	ICTRL:   REPEAT GETTAB DO
  1882	           PUT(PNB($ ))
  1883	           IF NOT E.ON THEN FORW.OB
  1884	         END
  1885	
  1886	!  COPY OLD TO NEW UP TO NEXT TAB STOP OR TAB CHAR, WHICHEVER COMES FIRST,
  1887	!  PRINTING CHARS COPIED.
  1888	!  IF HIT TERMINATOR OR END OF OLD, STORE BLANKS UP TO TAB.
  1889	UCTRL:   ECHK
  1890	         REPEAT GETTAB DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:46	 Page 36
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1891	           IF OB.END THEN DO
  1892	             PUT(PNB($ )); NCHV OBPE; NCHV OBP
  1893	           END ELSE DO
  1894	             IF TERM(CHAR _ NCHV OBP) THEN CHAR _ $ 
  1895	             IF PUTC(PNB(CHAR))=ICTRL THEN GO CGET
  1896	           END
  1897	         END
  1898	
  1899	!  COPY 1 CHAR FROM OLD TO NEW & PRINT
  1900	CCTRL:   ECHK; IF OB.END THEN GO RING; COPRNX
  1901	
  1902	!  COPY REST OF OLD TO NEW, PRINTING. ADD CR IF NO TERMINATOR.
  1903	DCTRL:   ECHK
  1904	         WHILE NOT OB.END THEN COPRNX
  1905	         GO PCRXIT   !HERE IF NO TERMINATOR
  1906	
  1907	!  COPY REST OF OLD TO NEW, PRINTING ONLY TERMINATOR (ADD CR IF NONE)
  1908	FCTRL:   ECHK
  1909	         WHILE NOT OB.END THEN DO
  1910	           IF TERM(PNB(I_NCHV OBP)) THEN [PUTC(I); GO XIT]
  1911	         END
  1912	         GO PCRXIT   !HERE IF NO TERMINATOR
  1913	
  1914	!  COPY OLD TO NEW UP TO BUT NOT INCLUDING TERMINATOR 
  1915	!  (UP TO LINE END IF NO TERMINATOR)
  1916	!  IF H, ALSO PRINT CHARS; IF L, PRINT ONLY +
  1917	HCTRL: LCTRL: &
  1918	         ECHK; IF OB.END THEN GO RING
  1919	         IF TERM(I_NCHV OBP) THEN [PCHV OBP; GO RING]
  1920	         HOLD _ NBP
  1921	HCTA:    PNB(I)
  1922	         IF NOT OB.END THEN &
  1923	           IF TERM(I_NCHV OBP) THEN PCHV OBP ELSE GO HCTA
  1924	         IF CHAR=LCTRL THEN PUT($+) ELSE GO RCTB
  1925	
  1926	!  COPY OLD TO NEW UP TO BUT NOT INCLUDING NEXT INPUT CHAR
  1927	OCTRL:   DELFG _ NO; EXCFG _ YES; GO CHMTCH
  1928	
  1929	!  COPY OLD TO NEW UP TO & INCLUDING NEXT INPUT CHAR
  1930	ZCTRL:   DELFG _ EXCFG _ NO; GO CHMTCH
  1931	
  1932	!  DELETE FROM OLD UP TO BUT NOT INCLUDING NEXT INPUT CHAR
  1933	PCTRL:   DELFG _ EXCFG _ YES; GO CHMTCH
  1934	
  1935	!  DELETE FROM OLD UP TO & INCLUDING NEXT INPUT CHAR
  1936	XCTRL:   DELFG _ YES; EXCFG _ NO
  1937	
  1938	!  MATCH NEXT INPUT CHAR IN OLD LINE & PROCESS AS FOLLOWS:
  1939	!   DELFG - YES IF DELETE, NO IF COPY, CHARS PASSED.
  1940	!   EXCFG - YES IF EXCLUDE, NO IF INCLUDE, CHAR MATCHED.
  1941	CHMTCH:  ECHK
  1942	         OFF.ECHO; IF CHAR _ GET.BRK =CARRET THEN GET.BRK   !BREAK ON THIS CHAR
  1943	         ON.ECHO; HOLD _ OBP
  1944	         IF EXCFG THEN IF OB.END THEN GO RING ELSE NCHV HOLD

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:48	 Page 37
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1945	         LOOP DO
  1946	           IF HOLD=OBPE THEN GO RING
  1947	           WHILE NCHV HOLD#CHAR
  1948	         END
  1949	         IF EXCFG THEN PCHV HOLD
  1950	         WHILE OBP#HOLD THEN IF DELFG THEN [NCHV OBP; PUT($%)] ELSE &
  1951	          COPRNX
  1952	
  1953	!  DELETE 1 CHAR FROM OLD. IF S, PRINT %; IF K, PRINT CHAR.
  1954	KCTRL: &
  1955	SCTRL:   ECHK; IF OB.END THEN GO RING; NCHV OBP
  1956	         PUTC(IF CHAR=SCTRL THEN $% ELSE CHV OBP)
  1957	
  1958	!  PRINT REST OF OLD (INCLUDING TERMINATOR) & CURRENT NEW
  1959	!  IF NO MORE OLD LINE OR IF TERMINATOR ISN'T CR, PRINT CR
  1960	RCTRL:   ECHK; PUTX(LNFEED)
  1961	RCTA:    HOLD _ OBP; WHILE HOLD#OBPE THEN PUTC(NCHV HOLD)
  1962	         IF CHV(HOLD)#CARRET THEN PUT(CARRET)
  1963	         HOLD _ NBPI
  1964	RCTB:    WHILE HOLD#NBP THEN PUTC(NCHV HOLD)
  1965	
  1966	!  SAME AS RCTRL EXCEPT OLD & NEW ARE LINED UP
  1967	!  NOTE: CTRL CHARS WILL SCREW THIS UP.
  1968	TCTRL:   ECHK; PUT(CARRET); REPEAT NLPOS-1 PUT($ ); GO RCTA
  1969	
  1970	!  DO FCTRL ACTION, THEN
  1971	!  MAKE NEW LINE OLD LINE; PRINT CR
  1972	YCTRL:   ECHK
  1973	         WHILE NOT OB.END THEN DO
  1974	           IF TERM(PNB(I_NCHV OBP)) THEN [PUTC(I); GO Y1]
  1975	         END
  1976	         PUT(PNB(CARRET))
  1977	Y1:      PNB(EOLIT); GO RSTRT
  1978	
  1979	!  STORE CHAR
  1980	GCTRL: MCTRL: JCTRL:   GO CSTOR
  1981	
  1982	!  STORE NEXT INPUT CHAR; TERMINATES IF TERM CHAR
  1983	VCTRL:   OFF.ECHO; CHAR _ GET.BRK; ON.ECHO; PUTC(CHAR); GO CSTOR
  1984	
  1985	!  ILLEGAL CONTROL CHARACTERS
  1986	BCTRL: &
  1987	RING:    PUTX(BELL)
  1988	
  1989	         END
  1990	
  1991	         GO CGET
  1992	
  1993	%ECHK
  1994	!  IF IN ECTRL INSERT MODE, TURNS OFF MODE AND PRINTS >,
  1995	!  RETURNING YES; OTHERWISE, RETURNS NO.
  1996	
  1997	IF E.ON THEN [PUT($>); NBPB _ NBPI; OBPB _ OBPI]
  1998	RETURN E.ON<==NO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:49	 Page 38
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  1999	
  2000	END ECHK
  2001	
  2002	%GETTAB
  2003	!  RETURNS NUMBER OF POSITIONS BEFORE NEXT TAB
  2004	!  TABS ARE IN ARRAY TAB, WHOSE 0TH ELEMENT = NO. OF TABS
  2005	
  2006	POS _ NLPOS-OFF; I _ 0
  2007	WHILE INC I<=TAB(0) THEN DO
  2008	  IF TAB(I)>POS THEN RETURN TAB(I)-POS
  2009	END
  2010	GO RING
  2011	
  2012	END GETTAB
  2013	
  2014	%NLPOS
  2015	!  RETURNS WHAT TERMINAL POSITION WOULD BE IF NEW LINE WERE PRINTED
  2016	!  (MORE OR LESS) USING PUT.
  2017	
  2018	TEMP _ NBPI; POS _ 1
  2019	WHILE TEMP#NBP THEN DO
  2020	  EIF I_NCHV TEMP=LNFEED THEN POS _ 1
  2021	  FIF PRCHAR(I) THEN INC POS
  2022	END
  2023	RETURN POS
  2024	
  2025	END NLPOS
  2026	
  2027	
  2028	%PNB (CHAR)
  2029	! PUTS CHAR INTO NEW LINE BUFFER. CALLED BY USER
  2030	! TO SET EDIT IMAGE FOR NEXT GETLINE. CHECKS FOR OVERFLOW.
  2031	! RETURNS CHAR.
  2032	
  2033	IF NBP#NBPE THEN RETURN NCHV NBP_CHAR
  2034	CHV(NBP) _ EOLIT; PCHV NBP _ CARRET   !TRUNCATE
  2035	E.CHK; CLIBUF; MSG('$LINE TOO LONG. TRUNCATED LINE AVAILABLE FOR EDIT.$')
  2036	GO RSTRT
  2037	
  2038	END PNB
  2039	
  2040	
  2041	%NXCH
  2042	  WHILE TEMP _ R(FN) =EOLIT THEN NULL; RETURN TEMP
  2043	END NXCH
  2044	
  2045	END GETLINE
  2046	
  2047	END INIT.R
  2048	
  2049	
  2050	
  2051	%W (FN,VAL)
  2052	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:50	 Page 39
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2053	! WRITES SPECIFIED ELEMENT VALUE AT CURSOR POSITION ON FILE FN.
  2054	! CHAR OUTPUT TO TERMINAL IF FN IS TEL.
  2055	! RETURNS VALUE WRITTEN.
  2056	!
  2057	! MACHINE DEPENDENCY: CR/LF HANDLING.  LF IS WRITTEN AFTER CR
  2058	
  2059	! WLAB(FN) IS  WTEL IF FN IS TEL
  2060	!              W.ERR IF FN IS AN INPUT FILE (CAN'T WRITE)
  2061	
  2062	!              IF DIRECT MODE:
  2063	!              WINIT IF THIS IS 1ST ACCESS TO FN AFTER SETCP ON FN
  2064	!              WSET IF HAVE READ BUT NOT WRITTEN SINCE SETCP ON FN
  2065	!              OTHERWISE, IS ADDRESS OF CORRESPONDING WRITE ROUTINE
  2066	
  2067	!              IF SEQUEN MODE:
  2068	!              W.ERR IF INPUT FILE
  2069	!              OTHERWISE, ADDRESS OF CORRESPONDING WRITE ROUTINE
  2070	
  2071	LOCAL HOLD, CP.TO.EOF, TEMP
  2072	
  2073	         GO ^YLAB(FN)
  2074	
  2075	YTEL:    IF TERM.DEST BAND TO.TERM THEN PUTTY(VAL)
  2076	         IF (TERM.DEST BAND TO.TOUT) AND TOUT.FILE THEN GO ^YLAB(FN _ TOUT.FILE)
  2077	         RETURN VAL
  2078	
  2079	YCHAR:   IF VAL=CARRET THEN DO
  2080	           HOLD _ RETURN; WX(FN,CARRET); WX(FN,LNFEED)
  2081	           RETURN _ HOLD; RETURN CARRET
  2082	         END
  2083	
  2084	%%WX (FN, VAL)
  2085	
  2086	WXLAB:   GO ^WLAB(FN)
  2087	
  2088	WWD:     IF ECNT(FN)>0 THEN [DEC ECNT(FN); RETURN ^INC EPTR(FN) _ VAL]
  2089	         GO NXBLK
  2090	
  2091	WPK:     IF ECNT(FN)>0 THEN DO
  2092	           DEC ECNT(FN)
  2093	           IF DEC SUBCNT(FN)<0 THEN [EPTR(FN) +_2; SUBCNT(FN)_8]
  2094	           [PKA;PKB] _ [^EPTR(FN);^(EPTR(FN)+1)] DROTR SUBCNT(FN)*8
  2095	           [^EPTR(FN);^(EPTR(FN)+1)] _ [PKA;PKB BAND BNOT &
  2096	             OCT 377 BOR VAL BAND_ OCT 377] DROTL SUBCNT(FN)*8
  2097	           RETURN VAL
  2098	         END
  2099	         GO NXBLK
  2100	
  2101	WCH:     IF ECNT(FN)>0 THEN [DEC ECNT(FN); RETURN NCHV EPTR(FN) _ VAL]
  2102	
  2103	NXBLK:   IF MODE(FN)=SEQUEN THEN [S.WBLK(FN); GO ^WLAB(FN)]
  2104	WINIT:   L.OFFALT
  2105	         IF CP.TO.EOF _ (TEMP _ DSIZE(FN)) - DCP(FN) <0 AND ORG(FN)#WORD THEN DO
  2106		   !BLANK FILL PAST EOF (UGHLY)

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:52	 Page 40
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2107		   HOLD _ RETURN
  2108		   DSETCP(FN,TEMP); REPEAT -CP.TO.EOF W(FN,$ )
  2109		   RETURN _ HOLD
  2110		 END
  2111	         GETCHK(FN)
  2112	         ! IF PAST EOF, SPECIAL CASE FOR %R
  2113	         RLAB(FN) _ IF ECNT(FN)>CP.TO.EOF THEN &
  2114	           RINIT ELSE RADR(ORGIND(FN))
  2115	         L.ONALT
  2116	
  2117	WSET:    DIRTY(CPBUF(FN)) _ YES
  2118	         GO ^WLAB(FN) _ WADR(ORGIND(FN))
  2119	
  2120	WTEL:    IF TERM.DEST BAND TO.TERM THEN PUTTYX(VAL)
  2121	         IF (TERM.DEST BAND TO.TOUT) AND TOUT.FILE THEN GO ^WLAB(FN _ TOUT.FILE)
  2122	         RETURN VAL
  2123	
  2124	W.ERR:   FNERR(FMDERR)
  2125	
  2126	
  2127	%PLNW (FN, ADR, WCNT)
  2128	
  2129	! MACHINE DEPENDENT.  WRITE SPECIAL FORMAT LINE NO. AT ADR
  2130	! (WCNT WDS) ON FILE FN AFTER WRITING EOLITS TO BEGINNING OF
  2131	! NEXT WORD.  FOR CHARACTER ORGANIZED FILES ONLY.
  2132	
  2133	LOCAL PTR, I, J
  2134	
  2135	  REPEAT (CPW-(CP(FN) MOD CPW)) MOD CPW W(FN,EOLIT)
  2136	  PTR _ CHPT(ADR,-1)
  2137	  REPEAT WCNT DO
  2138	    REPEAT CPW W(FN,NCHV PTR)
  2139	    CHPT(I,J) _ EPTR(FN)
  2140	    ^I BOR_ 1    !BIT 35
  2141	  END
  2142	  W(FN,ICTRL); RETURN
  2143	
  2144	END PLNW
  2145	
  2146	END W
  2147	
  2148	
  2149	%WB (FN, CNT, ADR)
  2150	
  2151	DEF PUTCH(C) AS TEMP _ CHPT(ADR,-1); REPEAT C WX(FN,NCHV TEMP)
  2152	DEF PUTWD(C) AS REPEAT C [W(FN,^ADR); INC ADR]
  2153	LOCAL %PUTPK
  2154	
  2155	LOCAL HOLD, TEMP, CFRAG, PFRAG, PTR
  2156	LOCAL %SZAP, %DZAP, I
  2157	
  2158	IF WLAB(FN)=W.ERR THEN FNERR(FMDERR)
  2159	IF FN=TEL THEN FNERR(TELERR)
  2160	IF HOLD _ CNT <0 THEN FNERR(ARGERR)

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:53	 Page 41
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2161	IF HOLD=0 THEN RETURN
  2162	L.OFFALT
  2163	[PTR;PFRAG] _ CP(FN) DIVMOD EBUFSZ(FN); INC PTR  !BLK NO & ELMT DISPL
  2164	
  2165	DO ORGIND(FN) OF ORGINDLIM
  2166	
  2167	1:       !CHARACTER! &
  2168	  IF PFRAG MOD CPW THEN DO    !CP NOT AT WORD BOUNDARY
  2169	    PUTCH(CNT)
  2170	  END ELSE DO    !CP AT WORD BOUNDARY
  2171	    IF MODE(FN)=SEQUEN THEN DO       !SEQUEN CHARACTER
  2172		CHPT(PTR,PFRAG) _ EPTR(FN); INC PTR
  2173		SZAP
  2174		ECNT(FN) -_ CNT
  2175		[CNT;CFRAG] _ CNT DIVMOD CPW
  2176		IF CNT#0 THEN MOVE CNT FROM ADR TO PTR
  2177		EPTR(FN) _ CHPT(PTR+CNT,-1); PTR _ CHPT(ADR+CNT,-1)
  2178		REPEAT CFRAG NCHV EPTR(FN) _ NCHV PTR
  2179	    END ELSE DO       !DIRECT CHARACTER
  2180		IF PFRAG THEN DO       !CP NOT AT BLOCK BOUNDARY
  2181		  PUTCH(I_CNT MIN BUFSZ*CPW-PFRAG); CNT -_ I
  2182		  CHPT(ADR,PFRAG) _ TEMP     !PFRAG IS A DUMMY
  2183		  INC ADR
  2184		  INC PTR
  2185		END
  2186		DZAP; PUTCH(CFRAG)
  2187	    END
  2188	  END
  2189	
  2190	0:       !WORD! &
  2191	  IF MODE(FN)=SEQUEN THEN DO          !SEQUEN WORD
  2192		PTR _ 1+EPTR(FN)
  2193		SZAP
  2194		IF CNT#0 THEN DO
  2195		  MOVE CNT FROM ADR TO PTR; EPTR(FN) +_ CNT
  2196		  ECNT(FN) -_ CNT
  2197		END
  2198	  END ELSE DO          !DIRECT WORD
  2199		IF PFRAG THEN DO    !CP NOT AT BLOCK BOUNDARY
  2200		  PUTWD(I_CNT MIN BUFSZ-PFRAG); CNT -_ I
  2201		  INC PTR
  2202		END
  2203		DZAP; PUTWD(CFRAG)
  2204	  END
  2205	
  2206	2:       !PACK! &
  2207	IF SUBCNT(FN)>0 THEN DO    !CP NOT AT WORD BOUNDARY
  2208		PUTPK(HOLD)
  2209	END ELSE DO
  2210	  IF MODE(FN)=SEQUEN THEN DO    !SEQUEN PACK
  2211		PTR _ 2+EPTR(FN)
  2212		SZAP
  2213		[TEMP;CFRAG] _ CNT DIVMOD 9
  2214		IF TEMP#0 THEN DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:54	 Page 42
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2215		  MOVE TEMP*2 FROM ADR TO PTR
  2216		  EPTR(FN) +_ TEMP*2; ADR +_ TEMP*2
  2217		END
  2218		ECNT(FN) -_ CNT-CFRAG
  2219		PUTPK(CFRAG)
  2220	  END ELSE DO      !DIRECT PACK
  2221		IF PFRAG THEN DO    !NOT AT BLOCK BOUNDARY
  2222		  CNT -_ PUTPK(HOLD MIN EBUFSZ(FN)-PFRAG)
  2223		  INC PTR
  2224		END
  2225		DZAP; PUTPK(CFRAG)
  2226	  END
  2227	END
  2228	
  2229	END
  2230	L.ONALT
  2231	RETURN HOLD
  2232	
  2233	%PUTPK (C)
  2234	LOCAL PKA, PKB
  2235	
  2236		PKA _ ^ADR; PKB _ ^(ADR+1); I _ 9
  2237		REPEAT C DO
  2238		  [PKA;PKB] _ [PKA;PKB] DROTL 8
  2239		  W(FN,PKB BAND OCT 377)
  2240		  IF DEC I=0 THEN DO
  2241		    ADR +_ 2; PKA _ ^ADR; PKB _ ^(ADR+1); I _ 9
  2242		  END
  2243		END
  2244		RETURN C
  2245	END PUTPK
  2246	
  2247	%SZAP
  2248	! WRITE FULL WORDS FROM BUFFER AT ADR TO PTR UNTIL CNT<=ECNT(FN).
  2249	! UPDATE ADR AND CNT.
  2250	
  2251		WHILE CNT>ECNT(FN) THEN DO
  2252		  IF ECNT(FN)#0 THEN DO
  2253		    MOVE I_WPB(ECNT(FN)) FROM ADR TO PTR
  2254		    ADR +_ I; CNT -_ ECNT(FN) <==0
  2255		  END
  2256		  PTR _ S.WBLK(FN)
  2257		END
  2258		RETURN
  2259	END SZAP
  2260	
  2261	%DZAP
  2262	! WRITE BLOCKS DIRECTLY FROM BUFFER AT ADR TO FN
  2263	! STARTING AT BLOCK PTR.
  2264	! NO. OF BLOCKS: DETERMINE FROM REMAINING ELEMENT COUNT, CNT.
  2265	! SET CFRAG TO ELEMENT FRAGGLE BEYOND LAST BLOCK WRITTEN.
  2266	
  2267		  [CNT;CFRAG] _ CNT DIVMOD EBUFSZ(FN)
  2268		  IF CNT>0 THEN DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:56	 Page 43
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2269		    WBLK(FN,CNT*BUFSZ,ADR,PTR); ADR +_ CNT*BUFSZ
  2270		    MXACP(FN) _ MXACP(FN) MAX DSETCP(FN,DCP(FN)+CNT*EBUFSZ(FN))
  2271		    REPEAT CNT DO
  2272		      FOR I _ 0 TO NBUFS-1 DO
  2273		        IF FN.ID(I)=FN AND BLK.ID(I)=PTR THEN FN.ID(I)_-1
  2274		      END
  2275		      INC PTR
  2276		    END
  2277		  END
  2278		RETURN
  2279	END DZAP
  2280	
  2281	END WB
  2282	
  2283	
  2284	%GETCHK (FN)
  2285	
  2286	! CHECKS WHETHER BLOCK CONTAINING CP(FN) IS ALREADY IN A BUFFER.
  2287	! IF NOT, A BUFFER IS SELECTED INTO WHICH TO READ THE BLOCK (NXBUF
  2288	! INDICATES 1ST BUFFER TO EXAMINE); THE BLOCK IS READ & THE BUFFER
  2289	! SET CLEAN.  IN ANY CASE, GETCHK SETS THE ELEMENT POINTER & COUNT,
  2290	! (WHICH IS NO. OF ELEMENTS FROM CP TO END OF BLOCK)
  2291	! SETS CPBUF(FN) TO INDICATE BUFFER CONTAINING CP(FN), 
  2292	! RETURNS ADDRESS OF 1ST WORD OF BUFFER,
  2293	! AND RESETS NXBUF TO POINT TO 1ST BUFFER TO BE EXAMINED AT NEXT
  2294	! BUFFER SELECTION TIME.
  2295	
  2296	LOCAL %SETNXBUF
  2297	LOCAL DISPL, BLKNUM, HOLD
  2298	
  2299	         [BLKNUM;DISPL] _ DCP(FN) DIVMOD EBUFSZ(FN)
  2300	         INC BLKNUM          !FIRST BLOCK IS BLOCK NO. 1
  2301	         FOR I _ 0 TO NBUFS-1 &
  2302	          IF FN.ID(I)=FN AND BLK.ID(I)=BLKNUM THEN [NXBUF_I; GO GET1]
  2303	
  2304	!BLOCK NOT ALREADY IN BUFFER
  2305	         IF NOT RBLK(FN,1,BGNADR(SETNXBUF),BLKNUM) THEN DO
  2306	           MOVE BUFSZ FROM ALL 0 TO BGNADR(NXBUF)
  2307	         END
  2308	         FN.ID(NXBUF)_FN; BLK.ID(NXBUF)_BLKNUM; DIRTY(NXBUF) _ NO
  2309	GET1:    HOLD _ BGNADR(NXBUF)
  2310	         DO ORGIND(FN) OF ORGINDLIM
  2311	0:         EPTR(FN) _ HOLD+DISPL-1
  2312	1:         EPTR(FN) _ CHPT(HOLD,DISPL-1)
  2313	2:         [PKA;PKB] _ DISPL DIVMOD 9
  2314	           EPTR(FN) _ HOLD+2*PKA-2*[SUBCNT(FN)_(9-PKB) MOD 9=0]
  2315	         END
  2316	         ECNT(FN) _ EBUFSZ(FN)-DISPL
  2317	         CPBUF(FN) _ NXBUF <== (NXBUF+1) MOD NBUFS
  2318	         RETURN HOLD
  2319	
  2320	%SETNXBUF
  2321	! BEGINS EXAMINING BUFFERS AT NXBUF. RESETS NXBUF TO POINT
  2322	! TO BUFFER THAT FILE BLOCK IS TO BE READ INTO. RETURNS NXBUF.

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:57	 Page 44
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2323	! PRIORITY FOR SELECTION:
  2324	!  1) UNUSED BUFFER
  2325	!  2) CLEAN BUFFER NOT CPBUF FOR ITS FN.ID
  2326	!  3) DIRTY BUFFER NOT CPBUF FOR ITS FN.ID
  2327	!  4) CLEAN BUFFER (IS CPBUF)
  2328	!  5) NXBUF (IS DIRTY AND CPBUF)
  2329	! IF 3) OR 5), BLOCK CURRENTLY IN BUFFER IS WRITTEN OUT
  2330	! IF 4) OR 5), MUST RELINQUISH CPBUF WITH A DSETCP
  2331	
  2332	LOCAL LAB, CHK3:, CHK2:, CHK1:, CHK:
  2333	DEF IF.MORE AS IF INC I=NBUFS THEN I_0; WHILE I#NXBUF
  2334	DEF ACTIVE(I) AS I=CPBUF(FN.ID(I))
  2335	
  2336	         I _ NXBUF
  2337	         LOOP [IF FN.ID(I)<0 THEN GO OUT; IF.MORE]
  2338		LAB _ CHK3
  2339		LOOP DO
  2340		  GO ^LAB
  2341	CHK3:	  IF DIRTY(I) AND ACTIVE(I) THEN [HOLD _ I; LAB _ CHK2]
  2342	CHK2:	  IF NOT DIRTY(I) AND ACTIVE(I) THEN [HOLD _ I; LAB _ CHK1]
  2343	CHK1:	  IF DIRTY(I) AND NOT ACTIVE(I) THEN [HOLD _ I; LAB _ CHK]
  2344	CHK:	  IF NOT DIRTY(I) AND NOT ACTIVE(I) THEN [HOLD _ I; GO THRU]
  2345		  IF.MORE
  2346		END
  2347	THRU:	I _ HOLD
  2348		IF FN.ID(I)#FN THEN DSETCP(FN.ID(I),DCP(FN.ID(I)))
  2349		IF DIRTY(I) THEN CLEAN(I)
  2350	OUT:     RETURN NXBUF _ I
  2351	
  2352	END SETNXBUF
  2353	
  2354	END GETCHK
  2355	
  2356	
  2357	%RBLK (FN, NBLKS, ADR, BLKNO)
  2358	! MACHINE DEPENDENT.
  2359	! DIRECT BLOCK INPUT.
  2360	! READS NBLKS BLOCKS FROM BLKNO ON FN TO ADR.
  2361	! IF EOF HIT, RETURNS 0 ELSE RETURNS 1.
  2362	
  2363	LOCAL LIST(0:1)
  2364	LOCAL ERRCHK:,EOF:,OUTERR:
  2365	
  2366	         EXU(USICD, FN, BLKNO)   !POSITION AT BLKNUM
  2367	         LIST(0) _ [18,18] * [-BUFSZ*NBLKS, ADR-1]
  2368	         LIST(1) _ 0
  2369	         EXU(INCD, FN, LIST, ERRCHK); RETURN YES
  2370	ERRCHK:  EXU(STZCD, FN, OCT 740.000, EOF)
  2371	OUTERR:  ABNERR(FN)
  2372	
  2373	%%WBLK (FN, NWDS, ADR, BLKNO)
  2374	
  2375	! MACHINE DEPENDENT.  CALLED FROM %CLOSE, %SETNXBUF, %ERASE, %WB
  2376	! DIRECT BLOCK OUTPUT.

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:59	 Page 45
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2377	! WRITES OUT NWDS WORDS AT ADR ON FN AT BLKNO.
  2378	! IF BLKNO EXCEEDS FILE SIZE, INTERVENING BLOCKS ARE FILLED WITH
  2379	! ZEROES.
  2380	
  2381	         EXU(USOCD, FN, BLKNO)
  2382	         LIST(0) _ [18,18] * [-NWDS, ADR-1]
  2383	         LIST(1) _ 0
  2384	         EXU(OUTCD, FN, LIST, OUTERR)
  2385	EOF:     RETURN NO
  2386	
  2387	END RBLK
  2388	
  2389	
  2390	%S.RBLK (FN)
  2391	! MACHINE DEPENDENT.
  2392	! SEQUENTIAL BLOCK INPUT.
  2393	! ADVANCES TO NEXT BUFFER & READS IN NEXT BLOCK ON FN
  2394	! SETS EPTR(FN) & ECNT(FN) (LATTER APPROX. FOR NON-WORD FILES)
  2395	! INCREMENTS CP1(FN) BY ECNT(FN).
  2396	! RETURNS ADDRESS OF 1ST WD OF NEXT BUFFER.
  2397	
  2398	LOCAL ERRCHK:, EOF:, OUTERR:
  2399	
  2400	         L.OFFALT
  2401	         RH(CURBUF(FN)+1) _ BUFSZ
  2402	         EXU(INCD, FN, 0, ERRCHK)  !S.ECNT(FN) GETS CHAR CNT
  2403	         ECNT(FN) _ S.ECNT(FN)/CPW*EBUFSZ(FN)/BUFSZ
  2404	         GO BELOW
  2405	
  2406	ERRCHK:  EXU(STZCD, FN, OCT 740.000, EOF)
  2407	OUTERR:  ABNERR(FN)
  2408	EOF:     FNERR(EOFERR)
  2409	
  2410	%%S.WBLK (FN)
  2411	
  2412	! MACHINE DEPENDENT. CALLED FROM %CLOSE AND %W.
  2413	! SEQUENTIAL BLOCK OUTPUT.
  2414	! WRITES OUT BLOCK IN CURRENT BUFFER ON FN (NONE 1ST TIME THRU)
  2415	! & ADVANCES TO NEXT BUFFER, PREPARING IT FOR WRITING.
  2416	! SETS EPTR(FN) & ECNT(FN), INC'ING CP1(FN) BY THE LATTER.
  2417	! RETURNS ADDRESS OF 1ST WORD OF NEXT BUFFER.
  2418	
  2419	         L.OFFALT
  2420	         EXU(STSCD, FN, OCT 20)          !BIT 31 SAYS TO OBEY OUR WORD COUNT
  2421	         RH(CURBUF(FN)+1) _ WPB(EBUFSZ(FN)-ECNT(FN))   !SET (EXACT) WORD COUNT
  2422	         EXU(OUTCD, FN, 0, OUTERR)
  2423	         ECNT(FN) _ EBUFSZ(FN)
  2424	BELOW:   DO ORGIND(FN) OF ORGINDLIM
  2425	0:         EPTR(FN) _ CURBUF(FN)+1
  2426	1:         EPTR(FN) _ S.EPTR(FN)
  2427	2:         EPTR(FN) _ CURBUF(FN); SUBCNT(FN) _ 0
  2428	         END
  2429	         CP1(FN) +_ ECNT(FN)
  2430	         L.ONALT

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:00	 Page 46
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2431	         RETURN CURBUF(FN)+2
  2432	
  2433	END S.RBLK
  2434	
  2435	
  2436	
  2437	%ERASE (FN, CPI, CPF)
  2438	
  2439	!  FN MAY NOT BE TEL OR A SEQUEN MODE OR INPUT TYPE FILE.
  2440	
  2441	! WRITES OUT ZEROES FROM POSITIONS CPI TO CPF ON FILE FN.
  2442	! PHYSICALLY TRUNCATES FILE IF POSSIBLE.
  2443	
  2444	! %W IS USED TO ERASE ANY PARTS OF (NOT ENTIRE) BLOCKS IN THE RANGE.
  2445	! TO ERASE THE 1ST ENTIRE BLOCK, IF ANY, A BUFFER IS SOUGHT
  2446	! (THRU %GETCHK), CLEARED & WRITTEN OUT (I.E., %W NOT USED).
  2447	! SUBSEQUENT ENTIRE BLOCKS ARE ERASED BY WRITING OUT THIS SAME CLEARED
  2448	! BUFFER.  TO ACHIEVE THIS, SUBSEQUENT CALLS TO %GETCHK ARE "FIXED"
  2449	! SO THAT IF THE BLOCK SOUGHT IS NOT ALREADY IN A BUFFER, THE BUFFER
  2450	! SELECTED IS THE ONE PREVIOUSLY CLEARED (ZBUF).  THE FIX IS TO MAKE
  2451	! ZBUF LOOK LIKE IT HOLDS THE BLOCK SOUGHT, BY INCREMENTING ITS 
  2452	! BLK.ID AND MAKING CERTAIN THAT NXBUF IS 1 PAST ZBUF, SO THAT
  2453	! ZBUF IS EXAMINED LAST AND CHOSEN IF THE BLOCK WASN'T IN ANOTHER
  2454	! BUFFER.
  2455	
  2456	! IF CPF EXCEEDS POSITION OF LAST ELEMENT (SIZE(FN)-1), IT IS SET
  2457	! TO THAT POSITION, AND ERASE LEAVES CURSOR AT CPI (NEW FILE END)
  2458	! & REDUCES MXACP AND OPNSZ TO CPI; ELSE
  2459	! CURSOR IS LEFT AT CPF+1.
  2460	
  2461	LOCAL CNT, DISPL, ZBUF, LAST, EVAL
  2462	LOCAL %TRUNCATE, CLR:
  2463	
  2464	         IF FTYP(FN)=INPUT THEN FNERR(FMDERR)
  2465	         IF CPF<0 THEN FNERR(ARGERR)
  2466	         SETCP(FN,CPI)     !ERROR IF SEQUEN OR <0
  2467	         IF CPF _ CPF MIN LAST _ (DSIZE(FN)-1)>=CPI THEN DO
  2468	
  2469		 EVAL _ IF ORG(FN)=WORD THEN 0 ELSE $ 
  2470	         IF DISPL _ CPI MOD EBUFSZ(FN) #0 THEN DO
  2471	           IF CNT _ EBUFSZ(FN)-(CPF-CPI+1+DISPL) >=0 THEN GO ZREST
  2472	
  2473	!CPI NOT AT BEGINNING & CPF PAST END
  2474	           LOOP[W(FN,EVAL); WHILE ECNT(FN)#0]
  2475	         END
  2476	
  2477	!CP(FN) AT BLOCK BEGINNING
  2478	         IF CNT _ EBUFSZ(FN)-(CPF-DCP(FN)+1) >0 THEN DO
  2479	
  2480	!CPI NOT AT BEGINNING OF BLOCK & CPF AT OR BEFORE END,
  2481	!OR CP(FN) AT BEGINNING & CPF BEFORE END.
  2482	!CNT IS NO. OF ELEMENTS PAST CPF
  2483	ZREST:     LOOP[W(FN,EVAL); WHILE ECNT(FN)#CNT]
  2484	         END ELSE DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:01	 Page 47
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2485	
  2486	!CP(FN) AT BEGINNING & CPF AT OR BEYOND END
  2487	           IF CPF=LAST THEN [TRUNCATE(DCP(FN)/EBUFSZ(FN),CLR); GO CHOP]
  2488	!SELECT BUFFER, CLEAR IT, WRITE IT OUT
  2489	CLR:       MOVE BUFSZ FROM ALL EVAL TO GETCHK(FN); ZBUF _ CPBUF(FN)
  2490	           LOOP DO
  2491	             WBUF(ZBUF); WHILE CNT#0
  2492	
  2493	!MORE TO GO. SET TO 1ST POSITION AFTER BLK JUST WRITTEN
  2494	             IF CNT _ EBUFSZ(FN)-(CPF-DSETCP(FN,BLK.ID(ZBUF)*EBUFSZ(FN))+1) >0 THEN GO ZREST
  2495	             INC BLK.ID(ZBUF); GETCHK(FN)
  2496	             IF CPBUF(FN)#ZBUF THEN !BLK ALREADY IN BUFFER! &
  2497	                    [FN.ID(CPBUF(FN))_-1; NXBUF _ (ZBUF+1) MOD NBUFS]
  2498	           END
  2499	         END
  2500	
  2501	         IF CPF<LAST THEN DO
  2502	           IF CNT=0 THEN DSETCP(FN,CPF+1)
  2503	         END ELSE DO
  2504	CHOP:      DSETCP(FN,CPI); MXACP(FN) _ OPNSZ(FN) _ SZFG(FN) _ CPI
  2505	         END
  2506	
  2507	         END
  2508	         RETURN
  2509	
  2510	%TRUNCATE (NBLKS, ERLAB:)
  2511	! MACHINE DEPENDENT
  2512	! TRUNCATE FILE FN TO NBLKS BLOCKS; GO TO ERLAB IF CAN'T
  2513	
  2514	LOCAL RNMOK:
  2515	
  2516	MOVE 4 FROM @MINFID(FN*4) TO @ARGCNT(FIDTBL)+1
  2517	ARGCNT(FIDTBL) _ 9; FIDTBL(LOCWPF+9) _ NBLKS
  2518	MOVE 4 FROM ALL 0 TO @ARGCNT(FIDTBL)+5
  2519	EXU(RNMCD, FN, @ARGCNT(FIDTBL), RNMOK ); GO ERLAB
  2520	RNMOK: ARGCNT(FIDTBL) _ MINARG
  2521	OPEN1
  2522	RETURN
  2523	
  2524	END TRUNCATE
  2525	
  2526	END ERASE
  2527	
  2528	
  2529	%TTYIO
  2530	
  2531	! REST OF TERMINAL AND TOUT I/O PROCEDURES
  2532	! IN THE SET OF PROCEDURES THAT PRINT CHARACTERS TO TEL ARE TWO GROUPS:
  2533	! ONE GROUP CONSISTS OF THE PRIMITIVE PROCEDURES THAT PRINT DIRECTLY TO THE
  2534	! TERMINAL (%MSG.TTY, %PRNTTC, %PRNTTY, %PUTTYC, %PUTTY, %PUTTYX);
  2535	! THE OTHERS PRINT TO A TOUT FILE IF IT EXISTS, ELSE TO THE
  2536	! TERMINAL (%MSG, %PRINTC, %PRINT, %PUTC, %PUT, %PUTX).
  2537	
  2538	LOCAL TEMP, TTY.P, TEMP1

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:03	 Page 48
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2539	LOCAL SPCNT              !NUMBER OF PENDING OUTPUT SPACES
  2540	
  2541	DEF INITPOS AS [PUT.CR; SPCNT_0]
  2542	DEF FILLSP AS [REPEAT SPCNT TTY_$ ;  SPCNT_0]
  2543	
  2544	! INITIALIZATION
  2545	
  2546	SPCNT _ 0
  2547	EXTOUT(TEL)
  2548	EX.CFN(TEL)
  2549	TT.DEST(TO.TERM)
  2550	CF.ECHO(TO.NEITHER)
  2551	RETURN
  2552	
  2553	
  2554	%EXTOUT(FILNUM)
  2555	
  2556	! SETS TOUT OUTPUT TO FILE FILNUM. RETURNS CURRENT TOUT FILE NUMBER.
  2557	! (AN EXCHANGE)
  2558	
  2559	   RETURN TOUT.FILE <== FILNUM
  2560	
  2561	END EXTOUT
  2562	
  2563	
  2564	%EX.CFN(FILNUM)
  2565	
  2566	%%SET.CFN(FILNUM)   ! THE OLD NAME
  2567	
  2568	! SETS COMMAND INPUT FROM FILNUM. NO ERROR CHECKING IS DONE ON FILNUM TO SEE
  2569	! THAT IT IS OPEN. RETURNS CURRENT COMMANDS FILE NUMBER.
  2570	
  2571	   RETURN (CFN <== FILNUM)
  2572	
  2573	END EX.CFN
  2574	
  2575	
  2576	%TT.DEST(WHERE)
  2577	
  2578	! SETS DESTINATION OF TERMINAL OUTPUT. TO TERM, TOUT, BOTH, OR NEITHER.
  2579	! RETURNS OLD DESTINATION.
  2580	
  2581	   RETURN (TERM.DEST <== WHERE)
  2582	
  2583	END TT.DEST
  2584	
  2585	
  2586	%CF.ECHO(WHERE)
  2587	
  2588	! SETS DESTINATION OF COMMANDS FILE ECHO. TO TERM, TOUT, BOTH, OR NEITHER.
  2589	! RETURNS OLD DESTINATION.
  2590	
  2591	   RETURN (COM.ECHO.DEST <== WHERE)
  2592	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:04	 Page 49
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2593	END CF.ECHO
  2594	
  2595	
  2596	%TT.ECHO(ON.P)
  2597	
  2598	! SETS ON/OFF STATE OF INPUT FROM TERMINAL ECHOING TO TOUT FILE.
  2599	! RETURNS OLD STATE VALUE.
  2600	
  2601	   RETURN (TERM.ECHO.P <== ON.P)
  2602	
  2603	END TT.ECHO
  2604	
  2605	
  2606	%CLIBUF
  2607	
  2608	! CLEAR INPUT BUFFER
  2609	
  2610	EXU(TTCD,OCT 11,0); RETURN
  2611	
  2612	END CLIBUF
  2613	
  2614	
  2615	%CLOBUF
  2616	
  2617	! CLEAR OUTPUT BUFFER
  2618	
  2619	EXU(TTCD,OCT 12,0); RETURN
  2620	
  2621	END CLOBUF
  2622	
  2623	
  2624	%TTYLEN
  2625	!  TERMINAL WIDTH
  2626	
  2627	^14_-1; EXU(CLICD,14,-OCT 16)   !GETTMC
  2628	RETURN (^14 BAND OCT 17740.000000) SHR 23
  2629	
  2630	END TTYLEN
  2631	
  2632	
  2633	%GET.BRK
  2634	
  2635	! READS A CHARACTER FROM THE TERMINAL & BREAKS ON IT,
  2636	
  2637	FILLSP
  2638	EXU(TTCD, 0, @I);  RETURN I
  2639	
  2640	%%GET
  2641	
  2642	! READS A CHARACTER FROM THE TERMINAL & RETURNS IT.
  2643	! FIRST PRINTS ANY PENDING OUTPUT SPACES (SEE PUT & PUTX)
  2644	
  2645	         FILLSP;  RETURN TTY
  2646	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:04	 Page 50
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2647	END GET.BRK
  2648	
  2649	
  2650	%PUTTYX (CHAR)
  2651	
  2652	! PRINTS CHAR ON TERMINAL AND RETURNS CHAR.
  2653	! PRINTS SPACES ONLY IF PRINTING CHAR FOLLOWS.
  2654	! UNLIKE PUTTYX, PUTTY
  2655	!    PRINTS LF AFTER CR
  2656	!    PRINTS CR AFTER LF
  2657	
  2658	         EIF CHAR=CARRET THEN INITPOS
  2659	         ORIF CHAR=LNFEED THEN DO
  2660	           FILLSP; PUT.LF
  2661	         END
  2662	         ELSE GO PUT1
  2663	         RETURN CHAR
  2664	
  2665	%%PUTTY (CHAR)
  2666	
  2667	         EIF ICTRL<=CHAR<=MCTRL THEN DO CHAR OF ICTRL:MCTRL
  2668	MCTRL:     INITPOS; PUT.LF
  2669	JCTRL:     PUT.LF; INITPOS
  2670	ICTRL: LCTRL:  TTY _ CHAR
  2671	KCTRL:     GO PUT2
  2672	         END
  2673	         ORIF CTRLCH(CHAR) THEN DO
  2674	PUT2:      TTY_$&; TTY_UNCTRL(CHAR)
  2675	         END
  2676	PUT1:    ORIF NOT PRCHAR(CHAR) THEN TTY_CHAR
  2677	         ELSE DO
  2678	           IF CHAR#$  THEN [WHILE DEC SPCNT>=0 THEN TTY_$ ; TTY_CHAR]
  2679	           INC SPCNT
  2680	         END
  2681	
  2682	         RETURN CHAR
  2683	
  2684	
  2685	END PUTTYX
  2686	
  2687	
  2688	%PUTX (CHAR)
  2689	
  2690	! PUTS CHAR, EXACTLY, TO TERM.DEST .
  2691	
  2692	   IF (TERM.DEST BAND TO.TERM) THEN PUTTYX(CHAR)
  2693	   IF (TERM.DEST BAND TO.TOUT) AND TOUT.FILE THEN RETURN (WX(TOUT.FILE,CHAR))
  2694	   RETURN CHAR
  2695	
  2696	END PUTX
  2697	
  2698	
  2699	%PUT (CHAR)
  2700	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:05	 Page 51
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2701	! PUTS TO TERM.DEST THE CHARACTER, PROPERLY TRANSLATED.
  2702	
  2703	   IF (TERM.DEST BAND TO.TERM) THEN PUTTY(CHAR)
  2704	   IF (TERM.DEST BAND TO.TOUT) AND TOUT.FILE THEN RETURN (W(TOUT.FILE,CHAR))
  2705	   RETURN CHAR
  2706	
  2707	END PUT
  2708	
  2709	
  2710	%PUTTYC (CHAR)
  2711	
  2712	! PRINTS CONTROL CHARACTERS (EXCEPT &I AND &L) AS '&''CHAR', TO TEL.
  2713	
  2714	   TTY.P _ YES
  2715	   GO PUTC.LOOP
  2716	
  2717	%%PUTC (CHAR)
  2718	
  2719	! PRINTS TO TERM.DEST.
  2720	
  2721	   TTY.P _ NO
  2722	
  2723	PUTC.LOOP:  IF ICTRL#CHAR#LCTRL THEN DO
  2724	                RETURN (IF TTY.P THEN PUTTY(CHAR) ELSE PUT(CHAR))
  2725	            END ELSE DO
  2726	                IF TTY.P THEN [PUTTY($&); RETURN (PUTTY(UNCTRL(CHAR)))]
  2727	                PUT($&); RETURN (PUT(UNCTRL(CHAR)))
  2728	            END
  2729	
  2730	END PUTTYC
  2731	
  2732	
  2733	
  2734	
  2735	%PRNTTY (ADR)
  2736	
  2737	! PRINTS STRING STARTING AT ADR TERMINATED BY EOLIT
  2738	
  2739	   LOCAL TEMP
  2740	
  2741	   TEMP _ TT.DEST(TEL)
  2742	   TT.DEST(TEMP <== F.P.PRINT(TEL,CHPT(ADR,-1)))
  2743	   RETURN TEMP
  2744	
  2745	%%PRINT (ADR)   ! PRINTS TO TERM.DEST
  2746	
  2747	   RETURN (F.P.PRINT(TEL,CHPT(ADR,-1)))
  2748	
  2749	
  2750	%F.P.PRINT(FILE,POINTER)  ! PRINT MESSAGE AT POINTER TO FILE
  2751	
  2752	   LOCAL CHAR
  2753	
  2754	   WHILE CHAR _ NCHV(POINTER) # EOLIT THEN W(FILE,CHAR)

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:06	 Page 52
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2755	   RETURN
  2756	
  2757	END F.P.PRINT
  2758	
  2759	
  2760	END PRNTTY
  2761	
  2762	
  2763	%PRNTTC (ADR)
  2764	
  2765	! PRINTS STRING AT ADR USING %PUTC
  2766	
  2767	   TTY.P _ YES
  2768	   GO PRNTC.LOOP
  2769	
  2770	%%PRINTC (ADR)
  2771	
  2772	! PRINTS TO TOUT
  2773	
  2774	   TTY.P _ NO
  2775	
  2776	PRNTC.LOOP:  &
  2777	TEMP _ CHPT(ADR,-1)
  2778	WHILE I_NCHV TEMP#EOLIT THEN [IF TTY.P THEN PUTTYC(I) ELSE PUTC(I)]
  2779	RETURN
  2780	
  2781	END PRNTTC
  2782	
  2783	
  2784	%MSG.TTY (ADR)
  2785	
  2786	! PRINTS STRING STARTING AT ADR TERMINATED BY EOLIT,
  2787	! IN WHICH $ DESIGNATES CR & \CHAR DESIGNATES CONTROL CHAR.
  2788	
  2789	   DEF CTRL(CHAR) AS (CHAR-$M+CARRET) ! MACHINE DEPENDENT BUT HANDLES IX AND X.
  2790	
  2791	
  2792	   TEMP _ TT.DEST(TEL); TT.DEST(TEMP <== F.P.MSG(TEL,CHPT(ADR,-1))); RETURN TEMP
  2793	
  2794	%%MSG (ADR)   ! PRINTS TO TERM.DEST
  2795	
  2796	   RETURN (F.P.MSG(TEL,CHPT(ADR,-1)))
  2797	
  2798	%F.P.MSG (FILE,POINTER)   ! PUT A MESSAGE TO A FILE GIVEN A POINTER.
  2799	                          ! CONVERTS '$' TO CARRET, '\X' TO CONTROL-X.
  2800	
  2801	   DEF NXTCHR AS [WHILE (C _ NCHV(POINTER)) # EOLIT] 
  2802	
  2803	   LOCAL C
  2804	
  2805	   LOOP DO
  2806	      NXTCHR
  2807	      EIF C=$$ THEN W(FILE,CARRET)
  2808	      ORIF C=$\ THEN DO

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:07	 Page 53
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2809	         NXTCHR
  2810	         IF $@ <= C <= $_ THEN C _ MKCTRL(C)
  2811	         WX(FILE,C)
  2812	      END
  2813	      ELSE W(FILE,C)
  2814	   END
  2815	
  2816	   RETURN
  2817	
  2818	END F.P.MSG
  2819	
  2820	END MSG.TTY
  2821	
  2822	END TTYIO
  2823	
  2824	
  2825	!     *****  EXCEPTION HANDLING
  2826	
  2827	%ARTHOV(ADDR)
  2828	
  2829	! IF ADDR=0 , ALL ARITHMETIC OVERFLOW WILL BE IGNORED. OTHERWISE, IT WILL
  2830	! TRAP BY EXECUTING A JSR ADDR INSTRUCTION FROM THE MONITOR'S PROCESS TABLE.
  2831	
  2832	   LOCAL RETURN.ADDR:
  2833	
  2834	   ARTHOV.ADDR _ ADDR
  2835	
  2836	   IF ADDR = 0 THEN ^14 _ JFCL ELSE ^14 _ JSR + ADDR
  2837	   EXU(CLICD, 14, -OCT 40, RETURN.ADDR)   !SETTR1 CALLI
  2838	RETURN.ADDR:   RETURN
  2839	
  2840	END ARTHOV
  2841	
  2842	
  2843	%DDTOVR(STATE)
  2844	
  2845	! IF STATE IS TRUE, THEN EVEN IF LOADED WITH DDT, IOCS WILL ARM ESCAPES.
  2846	
  2847	   RETURN (DDTFLG <== STATE)
  2848	
  2849	END DDTOVR
  2850	
  2851	
  2852	%NOESC
  2853	
  2854	! ROUTINE TO DISABLE ESCAPES FOR USER PROGRAM
  2855	! NOTE THAT ESCAPES ARE NOT QUEUED WHILE NOESC.P IS TRUE (I.E.,NONZERO)
  2856	
  2857	NOESC.P _ 1;  SETALT(ALTNIL)
  2858	RETURN
  2859	
  2860	END NOESC
  2861	
  2862	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:08	 Page 54
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2863	%YESESC
  2864	
  2865	! ROUTINE TO REENABLE ESCAPES FOR USER PROGRAM
  2866	! ESCAPES QUEUED PRIOR TO CALLING NOESC WILL BE ACTED UPON BY ONALT, NOT HERE
  2867	
  2868	NOESC.P _ 0
  2869	IF ALTLEV <= 1 THEN DO
  2870	   SETALT(ALT);  IF TRPFG>0 THEN GO ALT
  2871	END
  2872	RETURN
  2873	
  2874	END YESESC
  2875	
  2876	
  2877	%OFFALT
  2878	
  2879	IF INC ALTLEV > 1 THEN RETURN   ! ESCAPES ALREADY DISARMED.
  2880	! REALLY DISARM, FIRST TIME:
  2881	
  2882	TRPFG _ 0; SETALT(ALTNIL)
  2883	RETURN
  2884	
  2885	END OFFALT
  2886	
  2887	
  2888	%ONALT
  2889	
  2890	IF ALTLEV=0 OR DEC ALTLEV>0 THEN RETURN
  2891	IF NOT NOESC.P THEN DO
  2892	   SETALT(ALT); IF TRPFG>0 THEN GO ALT
  2893	END
  2894	RETURN
  2895	
  2896	END ONALT
  2897	
  2898	
  2899	%ONALT.C
  2900	
  2901	ALTLEV _ 1; ONALT; RETURN
  2902	
  2903	END ONALT.C
  2904	
  2905	
  2906	%SET.ARTHOV
  2907	
  2908	! CHECKS TO SEE IF ARITHMETIC OVERFLOW SHOULD BE TRAPPED.
  2909	
  2910	   LOCAL RETN.ADDR:
  2911	
  2912	   IF ARTHOV.ADDR THEN DO
  2913	
  2914	      ^14 _ JSR + ARTHOV.ADDR
  2915	      EXU(CLICD, 14, -OCT 40, RETN.ADDR)   !SETTR1 CALLI
  2916	

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:09	 Page 55
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2917	   END
  2918	RETN.ADDR:   RETURN
  2919	
  2920	END SET.ARTHOV
  2921	
  2922	
  2923	%SETALT (LAB:)
  2924	%%RS.ALT        ! RESTORE ALT STATE.
  2925	
  2926	FIND ALT.NAME(".JBDDT",JOBDDT)
  2927	
  2928	IF JOBDDT AND NOT DDTFLG THEN JOBAPR _ ^14 _ 0 ELSE [JOBAPR _ LAB; ^14 _ TRPBITS]
  2929	EXU(CLICD,14,OCT 16); SET.ARTHOV; RETURN
  2930	
  2931	END SETALT
  2932	
  2933	
  2934	%L.OFFALT
  2935	
  2936	IF L.ALTLEV=0 THEN OFFALT; INC L.ALTLEV; RETURN
  2937	
  2938	END L.OFFALT
  2939	
  2940	
  2941	%L.ONALT
  2942	
  2943	IF DEC L.ALTLEV=0 THEN ONALT; RETURN
  2944	
  2945	END L.ONALT
  2946	
  2947	
  2948	%SETRWE (FN, LAB:)
  2949	
  2950	RETURN RWELAB(FN) <== LAB
  2951	
  2952	END SETRWE
  2953	
  2954	
  2955	%IOERR (FN, N)
  2956	
  2957	IF (L.ALTLEV<==0)>0 THEN ONALT
  2958	ERRNUM _ N; GO ^RWELAB(FN)
  2959	
  2960	END IOERR
  2961	
  2962	
  2963	%ABNERR(FN)
  2964	  MSG('$ABNORMAL ERROR ON FILE$')
  2965	  MOVE 4 FROM @MINFID(FN*4) TO @ARGCNT(FIDTBL)+1
  2966	  WFID(FIDTBL)
  2967	  MSG('$FILE STATUS WORD$')
  2968	  EXU(GTSCD,FN,@STS)
  2969	  REPEAT 12 DO
  2970	    STS_STS ROTL 3

MIOCS	 SIMPL 25.00	6-Nov-1987 18:50:10	 Page 56
MIOCS.SIM	 Created: 6-Nov-1987 18:47

  2971	    TTY_(STS BAND 7)+$0
  2972	  END
  2973	FINI:   NULL
  2974	        EXIT
  2975	        MSG("Can not continue")
  2976	        GO FINI
  2977	END ABNERR
  2978	
  2979	END IOCS
Prog (Hi-seg) words used = 12037
Data (Lo-seg) words used = 1560
No errors found

MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08


IOCS	PROGRAM
    IOCS          432
	EXU           499
	 EXU          525
	OPENP         531
	    GETFN         588
	     GETFN        609
	    TDESCR        612
	     TDESCR       621
	    ETCTRL        624
	     ETCTRL       681
	    OPEN1         684
		DOERR         750
		 DOERR        757
		ABORT         760
		 ABORT        772
		ETMODE        775
		 ETMODE       779
		FISPEC        782
		 FISPEC       810
		NITRNG        813
		    GETBUF        836
		     GETBUF       846
		 NITRNG       848
		TELCHK        851
		 TELCHK       869
		ERCASE        872
		 ERCASE       880
		GETANS        883
		    WHAT          901
		     WHAT         906
		 GETANS       908
		FILEP         911
		 FILEP        915
		NXCHAR        918
		 NXCHAR       922
		NXCHAR        925
		    SETFIP        930
			GETNUM       1012
			 GETNUM      1019
			PTRNXT       1022
			 PTRNXT      1024
			GETNXT       1027
			 GETNXT      1029
			WFID         1032
			 WFID        1044
		     SETFIP      1046
		 NXCHAR      1048
		DVSIZE       1051
		 DVSIZE      1067
		NITSCP       1070
		 NITSCP      1083
		ETCONF       1086
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08


		 ETCONF      1120
	     OPEN1       1122
	 OPENP       1124
	CLOSE        1129
	    CLOSE1       1211
	     CLOSE1      1232
	    RLSRNG       1234
	     RLSRNG      1243
	 CLOSE       1245
	ANCALL       1248
	 ANCALL      1255
	OSEALL       1258
	 OSEALL      1264
	UFDUMP       1267
	 UFDUMP      1282
	FIXBUF       1285
	 FIXBUF      1309
	SETCPI       1316
	 SETCPI      1344
	CP           1347
	 CP          1369
	SIZE         1372
	    OPNSZX       1399
	     OPNSZX      1419
	 SIZE        1421
	INITR        1427
	    R            1463
		RB           1528
		    GETPK        1617
		     GETPK       1642
		    SZAP         1644
		     SZAP        1657
		    DZAP         1659
		     DZAP        1684
		 RB          1686
	     R           1688
	    ETLINE       1691
		ECHK         1993
		 ECHK        2000
		GETTAB       2002
		 GETTAB      2012
		NLPOS        2014
		 NLPOS       2025
		PNB          2028
		 PNB         2038
		NXCH         2041
		 NXCH        2043
	     ETLINE      2045
	 INITR       2047
	W            2051
	    PLNW         2127
	     PLNW        2144
	 W           2146
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08


	WB           2149
	    PUTPK        2233
	     PUTPK       2245
	    SZAP         2247
	     SZAP        2259
	    DZAP         2261
	     DZAP        2279
	 WB          2281
	GETCHK       2284
	    TNXBUF       2320
	     TNXBUF      2352
	 GETCHK      2354
	RBLK         2357
	 RBLK        2387
	SRBLK        2390
	 SRBLK       2433
	ERASE        2437
	    UNCATE       2510
	     UNCATE      2524
	 ERASE       2526
	TTYIO        2529
	    EXTOUT       2554
	     EXTOUT      2561
	    EXCFN        2564
	     EXCFN       2573
	    TTDEST       2576
	     TTDEST      2583
	    CFECHO       2586
	     CFECHO      2593
	    TTECHO       2596
	     TTECHO      2603
	    CLIBUF       2606
	     CLIBUF      2612
	    CLOBUF       2615
	     CLOBUF      2621
	    TTYLEN       2624
	     TTYLEN      2630
	    GETBRK       2633
	     GETBRK      2647
	    PUTTYX       2650
	     PUTTYX      2685
	    PUTX         2688
	     PUTX        2696
	    PUT          2699
	     PUT         2707
	    PUTTYC       2710
	     PUTTYC      2730
	    PRNTTY       2735
		PPRINT       2750
		 PPRINT      2757
	     PRNTTY      2760
	    PRNTTC       2763
	     PRNTTC      2781
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08


	    MSGTTY       2784
		FPMSG        2798
		 FPMSG       2818
	     MSGTTY      2820
	 TTYIO       2822
	ARTHOV       2827
	 ARTHOV      2840
	DDTOVR       2843
	 DDTOVR      2849
	NOESC        2852
	 NOESC       2860
	YESESC       2863
	 YESESC      2874
	OFFALT       2877
	 OFFALT      2885
	ONALT        2888
	 ONALT       2896
	ONALTC       2899
	 ONALTC      2903
	ARTHOV       2906
	 ARTHOV      2920
	SETALT       2923
	 SETALT      2931
	OFFALT       2934
	 OFFALT      2938
	LONALT       2941
	 LONALT      2945
	SETRWE       2948
	 SETRWE      2952
	IOERR        2955
	 IOERR       2960
	ABNERR       2963
	 ABNERR      2977
     IOCS        2979
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

ABNERR	   262#	   707	  1227	  2371	  2407	  2963#
ABORT	   696#	   716	   747	   760#	   895
ABORT1	   696#	   723	   764#
ABORT2	   696#	   732	   738	   768#
ABRT	   697#	   714	   747#
ACC	   499#	   519
ACTIVE	  2334#	  2341	  2342	  2343	  2344
ACTRL	   348#	  1807	  1852	  1866
ADDR	   499#	   519	  2827#	  2834	  2836
ADR	  1528#	  1551	  1558	  1559	  1563	  1564	  1565	  1568	  1577	  1582	  1585	  1597	  1598	  1627
	  1635	  1636	  1637	  1650	  1651	  1679	  2127#	  2136	  2149#	  2169	  2176	  2177	  2181	  2182
	  2183	  2186	  2195	  2200	  2203	  2215	  2216	  2236	  2241	  2253	  2254	  2269	  2357#	  2367
	  2382	  2735#	  2742	  2747	  2763#	  2776	  2784#	  2792	  2796
AEFERR	   122#
AFG	  1725#	  1782	  1800	  1808	  1866	  1871
ALT	   440#	   492#	  2870	  2870#	  2892	  2892#
ALTBLK	   441#	   492	   493
ALTFX	  1726#	  1792	  1837#
ALTLEV	   265#	   441#	   453	  2869	  2879	  2890	  2901	  2936	  2943	  2957
ALTLOC	   206#	   482	   490	   714	   720	   762	  1781	  1792	  1821	  1844	  1847
ALTNIL	   440#	   494#	  2857	  2882
ANCALL	   168#	  1248#
AOVTRP	   490#	   492
ARGCNT	   225#	   712	   727	   731	   740	   744	   971	  1203	  2516	  2517	  2518	  2519	  2520	  2965
ARGERR	   128#	   818	  1333	  1541	  2160	  2465
ARTHOV	   218#	   262#	   451	   490	  2827#	  2906#	  2929
AUXCAL	   384#	   647	   661	   677
AVDEST	  1726#	  1793	  1822	  1845
AVTABP	   630#	   647	   677
BACKOB	  1735#	  1861
BBUFSZ	   277#	   805	   841	   843	  1240
BCTRL	   349#	  1986
BELL	   375#	  1986
BELOW	   558#	   558	   566#	   963#	   963	   969#	  2404#	  2404	  2424#
BGNADR	   302#	  1170	  1278	  1675	  2305	  2306	  2309	  2349	  2491
BIT17	   638#	   644
BIT18	   443#	   445
BIT25	   444#	   445
BIT26	   635#	   643
BIT28	   634#	   665	   672
BIT29	   633#	   643
BLKID	   299#	   460	  1166	  1170	  1278	  1293	  1367	  1674	  1675	  2273	  2301	  2308	  2349	  2491
	  2494	  2495
BLKNO	  2357#	  2366	  2381
BLKNUM	  2297#	  2299	  2300	  2301	  2305	  2308
BPC	  1094#	  1096
BPE	   278#
BPW	   272#	   279	  1094	  1096
BUF	   286#	   456	   458	  1170	  1278	  1675	  2305	  2306	  2309	  2349	  2491
BUFSZ	   276#	   279	   281	   302	   458	   735	   828	   832	  1170	  1278	  1563	  1582	  1675	  1679
	  2181	  2200	  2269	  2306	  2349	  2367	  2401	  2403	  2489	  2491
C	  1617#	  1623	  1639	  2233#	  2237	  2244	  2803#	  2806	  2807	  2808	  2809	  2810	  2811	  2813
CANCEL	   162#	  1154#	  1252
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

CCTRL	   350#	  1900
CFECHO	   211#	  2550	  2586#
CFN	   153#	   892	   895	  1751	  2571
CFRAG	  1535#	  1557	  1560	  1568	  1585	  1595	  1600	  1601	  1607	  1666	  1669	  2155#	  2175	  2178
	  2186	  2203	  2213	  2218	  2219	  2225	  2267
CGET	  1800#	  1816	  1895	  1991
CHAR	   872#	   877	   878	   959#	   975	   976	   977	   979	   983	   988	   992	   994	   995	   998
	  1001	  1016	  1023	  1028	  1037	  1040	  1093#	  1100	  1101	  1725#	  1745	  1747	  1748	  1767
	  1772	  1773	  1774	  1801	  1802	  1803	  1806	  1807	  1809	  1810	  1813	  1814	  1815	  1851
	  1852	  1894	  1895	  1924	  1942	  1947	  1956	  1983	  2028#	  2033	  2650#	  2658	  2659	  2663
	  2667	  2670	  2673	  2674	  2676	  2678	  2682	  2688#	  2692	  2693	  2694	  2699#	  2703	  2704
	  2705	  2710#	  2723	  2724	  2726	  2727	  2752#	  2754
CHBITS	   644#	   658
CHK	  2332#	  2343	  2344#
CHK1	  2332#	  2342	  2343#
CHK2	  2332#	  2341	  2342#
CHK3	  2332#	  2338	  2341#
CHKMSG	   697#	   712	   713#
CHMAC	  1481#	  1498	  1505
CHMTCH	  1927#	  1927	  1930	  1933	  1941#
CHOP	  2487#	  2487	  2504#
CLEAN	   260#	  1170	  1278	  1675	  2349
CLIBUF	   188#	  2035	  2606#
CLICD	   401#	   448	   493	   597	   650	   667	  1062	  1279	  1300	  2627	  2837	  2915	  2929
CLOBUF	   189#	  2615#
CLOSE	   161#	  1129#	  1262
CLOSE1	  1148#	  1173	  1181	  1205	  1211#
CLR	  2462#	  2487	  2489#
CLSCD	   390#	   726	   766	  1224
CNFERR	   112#	   716	   723	   732	   738	   747	   895
CNT	  1093#	  1098	  1100	  1103	  1104	  1105	  1116	  1528#	  1541	  1551	  1556	  1557	  1563	  1568
	  1576	  1577	  1578	  1582	  1585	  1595	  1600	  1601	  1612	  1614	  1615	  1628	  1632	  1648
	  1651	  1666	  1680	  2149#	  2160	  2169	  2174	  2175	  2176	  2177	  2181	  2194	  2195	  2196
	  2200	  2213	  2218	  2222	  2251	  2254	  2267	  2268	  2269	  2270	  2271	  2461#	  2471	  2478
	  2483	  2491	  2494	  2502
CODE	   499#	   519
CONF	   698#	   710	   715	   716
CONFLB	   996#	   996	  1001#
CONFWD	   234#	   710	  1002
COPRNX	  1742#	  1900	  1904	  1950
CORERR	   131#
CP	   181#	  1347#	  1389	  1543	  2135	  2163
CP1	   317#	  1078	  1338	  1363	  1367	  2429
CPBUF	   326#	  1166	  1167	  1337	  1338	  1367	  1394	  2117	  2317	  2341	  2342	  2343	  2344	  2489
	  2496
CPF	  2437#	  2465	  2467	  2471	  2478	  2487	  2494	  2501	  2502
CPI	  2437#	  2466	  2467	  2470	  2471	  2504
CPW	   240#	   241	   279	  1094	  1096	  1098	  1103	  1412	  1549	  1557	  1563	  1826	  2135	  2138
	  2167	  2175	  2181	  2403
CSTOR	  1815#	  1980	  1983
CTREXU	  1814#	  1814	  1851#
CTRL	  2789#
CTRLCH	   141#	  1814	  2673
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

CURBUF	   409#	   822	   832	  1239	  1303	  2401	  2421	  2425	  2427	  2431
DATE	  1190#	  1197	  1202
DCP	   261#	  1337	  1365#	  1394	  1407	  1508	  1681	  2105	  2270	  2299	  2348	  2478	  2487
DCTRL	   351#	  1903
DDTFLG	   441#	  2847	  2928
DDTOVR	   217#	  2843#
DEFTAB	  1436#	  1460
DEL	  1145#	  1181	  1219
DELETE	   186#	  1176#
DELFG	  1726#	  1927	  1930	  1933	  1936	  1950
DEVERR	   132#	   796	   805
DEVNAM	   233#	   789	   999
DIRECT	    89#	   503#	   505	   519	   569	   791	  1161	  1173	  1181	  1195
DIRTY	   300#	   461	  1170	  1278	  1294	  1674	  1675	  2117	  2308	  2341	  2342	  2343	  2344	  2349
DISP	  1285#	  1292	  1293	  1294	  1299	  1301	  1302	  1303	  1304	  1307
DISPL	  2297#	  2299	  2311	  2312	  2313	  2316	  2461#	  2470	  2471
DOERR	   413#	   734	   750#	  1204	  1222
DOIT	  1152#	  1152	  1158#
DONE	  1005#	  1005	  1008#
DSA	   247#	   455
DSETCP	   261#	  1163	  1334#	  1415	  2108	  2270	  2348	  2494	  2502	  2504
DSIZE	   261#	  1162	  1392#	  1508	  2105	  2467
DSKDEV	   786#	   789
DVSIZE	   542#	   796	   805	  1051#
DZAP	  1537#	  1568	  1585	  1607	  1659#	  2156#	  2186	  2203	  2225	  2261#
EBUFS	   279#	   735	  1164	  1367	  1543	  1604	  1650	  1666	  1669	  1680	  2163	  2222	  2253	  2267
	  2270	  2299	  2316	  2403	  2421	  2423	  2470	  2471	  2478	  2487	  2494
EBUFSZ	   280#	   281	   735	  1164	  1367	  1543	  1604	  1666	  1669	  1680	  2163	  2222	  2267	  2270
	  2299	  2316	  2403	  2421	  2423	  2470	  2471	  2478	  2487	  2494
ECHK	  1724#	  1855	  1889	  1900	  1903	  1908	  1917	  1941	  1954	  1960	  1968	  1972	  1993#	  2035
ECNT	   315#	  1078	  1363	  1367	  1413	  1493	  1495	  1498	  1500	  1502	  1505	  1512	  1556	  1578
	  1600	  1648	  1649	  1650	  1651	  2088	  2091	  2092	  2101	  2113	  2174	  2196	  2218	  2251
	  2252	  2253	  2254	  2316	  2403	  2421	  2423	  2429	  2474	  2483
ECTRL	   352#	  1855
EITHER	   421#	  2550
ENDCNT	   329#	  1493	  1495	  1498	  1512
ENDRCH	   339#	   480	  1498#
ENDRPK	   340#	   480	  1495#
ENDRWD	   339#	   480	  1493#
ENTCD	   387#	   712	   740
ENTER	   712#	   732
EOF	  2364#	  2370	  2385#	  2398#	  2406	  2408#
EOFERR	   124#	  1508	  1614	  2408
EON	  1725#	  1782	  1815	  1856	  1861	  1878	  1883	  1997	  1998
EPTR	   315#	  1302	  1409	  1410	  1493	  1495	  1498	  1500	  1502	  1505	  1554	  1559	  1560	  1574
	  1577	  1593	  1598	  2088	  2093	  2094	  2095	  2101	  2139	  2172	  2177	  2178	  2192	  2195
	  2211	  2216	  2311	  2312	  2314	  2425	  2426	  2427
ERASE	   179#	  2437#
ERCASE	   695#	   872#	   893	   975	   988	  1100	  1106
ERLAB	   531#	   558	   563	   568	   580	   585	   607	   818	   842	   930#	  1010	  1176#	  1181	  1195
	  2510#	  2519
ERNUM	   760#	   770
EROUT	   440#	   458	   459	   460	   461	   496#
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

ERR	   266#	   607	   818	  1010
ERRCHK	  2364#	  2369	  2370#	  2398#	  2402	  2406#
ERRNUM	   207#	   607	   818	  1010	  2958
ERROUT	   712#	   712	   734#	   740
ETCONF	   695#	  1002	  1086#
ETCTRL	   263#	   624#	   674#	  1780	  1823	  1846
ETLINE	   176#	   892	  1691#
ETMODE	   166#	   469	   708	   775#
ETTERM	   172#	   471	  1446#
EVAL	  2461#	  2469	  2474	  2483	  2489
EXCFG	  1726#	  1927	  1930	  1933	  1936	  1944	  1949
EXCFN	   209#	  2548	  2564#
EXISTS	   593#	   597	   602#
EXTARG	   228#	   699	   732	   755	   971	   980	   981	  1038	  1039	  1192
EXTDEF	   930#	   971
EXTOUT	   208#	  2547	  2554#
EXTQ	   231#	   981
EXU	   154#	   448	   493	   499#	   597	   647	   650	   653	   658	   661	   667	   677	   678	   705
	   712	   726	   727	   731	   740	   753	   766	   770	  1062	  1203	  1207	  1221	  1224	  1225
	  1228	  1279	  1300	  1667	  2366	  2369	  2370	  2381	  2384	  2402	  2406	  2420	  2422	  2519
	  2610	  2619	  2627	  2638	  2837	  2915	  2929	  2968
EXUF	   155#	   507#
FBSERR	   121#
FCTRL	   353#	  1908
FDESCR	   531#	   615	   616	   617	   618
FEXSTS	   550#	   716
FFECHO	   263#	   670#	  1806	  1942	  1983
FID	   560#	   563	  1176#	  1181
FIDP	   216#	   563	   709	   710	   712	   716	   723	   727	   731	   732	   735	   739	   740	   744
	   755	   789	   859	   913	   969	   971	   973	   980	   981	   984	   993	   994	   999	  1002
	  1008	  1032#	  1036	  1038	  1039	  1196	  1197	  1198	  1201	  1202	  1203
FIDTBL	   306#	   558	   563	   930#	   969	  1199	  1220	  1221	  2516	  2517	  2518	  2519	  2520	  2965
	  2966
FILE	  2750#	  2754	  2798#	  2807	  2811	  2813
FILEP	   695#	   714	   911#
FILLSP	  2542#	  2637	  2645	  2660
FILNUM	  2554#	  2559	  2564#	  2571
FILSIZ	   230#	   735
FINI	   697#	   740	   744#	  2973#	  2976
FIRSTP	  1290#	  1303	  1304
FISPEC	   544#	   695#	   704	   705	   777	   782#	   789	   790	   792	   796	   799	   800	   805
FIXBUF	   185#	  1285#
FMDERR	   108#	   576	  1332	  1517	  1539	  2124	  2158	  2464
FN	   543#	   568	   570	   575	   576	   578	   579	   580	   583	   585	   616	   617	   618	   705
	   707	   708	   711	   712	   713	   720	   722	   725	   726	   727	   731	   732	   734	   735
	   736	   737	   740	   742	   744	   750#	   753	   754	   755	   766	   770	   791	   796	   800
	   805	   819	   822	   832	  1078	  1079	  1080	  1129#	  1158	  1161	  1162	  1163	  1164	  1165
	  1166	  1167	  1170	  1172	  1173	  1181	  1195	  1203	  1204	  1205	  1207	  1208	  1221	  1222
	  1224	  1225	  1227	  1228	  1230	  1239	  1290#	  1296	  1298	  1301	  1302	  1303	  1316#	  1332
	  1333	  1337	  1338	  1339	  1340	  1347#	  1361	  1363	  1367	  1372#	  1388	  1389	  1394	  1395
	  1396	  1397	  1399#	  1406	  1407	  1408	  1409	  1410	  1412	  1413	  1415	  1463#	  1491	  1493
	  1495	  1498	  1500	  1502	  1505	  1507	  1508	  1509	  1510	  1512	  1517	  1525	  1528#	  1539
	  1540	  1541	  1543	  1545	  1547	  1551	  1553	  1554	  1556	  1559	  1560	  1563	  1568	  1572
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

	  1574	  1577	  1578	  1582	  1585	  1588	  1592	  1593	  1598	  1600	  1604	  1613	  1614	  1621	  1624
	  1640	  1648	  1649	  1650	  1651	  1653	  1666	  1667	  1669	  1674	  1679	  1680	  1681	  1691#
	  1744	  1751	  1776	  2042	  2051#	  2073	  2076	  2080	  2086	  2088	  2091	  2092	  2093	  2094
	  2095	  2101	  2103	  2105	  2108	  2111	  2113	  2117	  2118	  2121	  2124	  2127#	  2135	  2138
	  2139	  2142	  2149#	  2158	  2159	  2160	  2163	  2165	  2169	  2171	  2172	  2174	  2177	  2178
	  2181	  2186	  2190	  2192	  2195	  2196	  2200	  2203	  2206	  2210	  2211	  2216	  2218	  2222
	  2239	  2251	  2252	  2253	  2254	  2256	  2267	  2269	  2270	  2273	  2284#	  2299	  2301	  2305
	  2308	  2310	  2311	  2312	  2314	  2316	  2317	  2348	  2357#	  2366	  2369	  2370	  2371	  2381
	  2384	  2390#	  2401	  2402	  2403	  2406	  2407	  2408	  2420	  2421	  2422	  2423	  2424	  2425
	  2426	  2427	  2429	  2431	  2437#	  2464	  2465	  2466	  2467	  2469	  2470	  2471	  2474	  2478
	  2483	  2487	  2489	  2494	  2495	  2496	  2502	  2504	  2516	  2519	  2948#	  2950	  2955#	  2958
	  2963#	  2965	  2968
FNERR	   267#	   570	   576	   755	   770	   796	   805	  1205	  1332	  1333	  1361	  1388	  1508	  1517
	  1539	  1540	  1541	  1614	  1776	  2124	  2158	  2159	  2160	  2408	  2464	  2465
FNFERR	   118#	   755
FNID	   297#	   459	   462	  1167	  1170	  1278	  1292	  1674	  1675	  2273	  2301	  2308	  2337	  2341
	  2342	  2343	  2344	  2348	  2349	  2491	  2496
FNMAX	   102#	   312	   313	   315	   317	   318	   320	   322	   326	   328	   329	   342	   343	   407
	   414	   474	   595	  1252	  1262	  1279
FNMIN	   101#	   103	   314	   407	   414	   474	   595	  1252	  1262	  1279	  1296
FOO	   517#	   520	   523#
FORWOB	  1732#	  1815	  1883
FPMSG	   199#	  1841	  2792	  2796	  2798#
FREE	   242#	  1440	  1761	  1843
FTYP	   312#	   475	   576	   585	   618	   711	   713	   720	   722	   732	   737	   754	   800	  1079
	  1080	  1162	  1172	  1208	  1230	  1252	  1262	  1296	  1298	  1340	  1389	  2464
FWD	   554#
FWDCNT	   548#	   554	  1112	  1118
GCTRL	   354#	   375	  1980
GET	   191#	  1515	  1801	  1802	  1809	  2640#
GET1	  2301#	  2301	  2309#
GETANS	   695#	   715	   883#
GETBRK	   263#	  1806	  1942	  1983	  2633#
GETBUF	   816#	   822	   828	   836#
GETCH	  1530#	  1551	  1563	  1568
GETCHK	   258#	  1165	  1408	  1509	  1525	  2111	  2284#	  2489	  2495
GETFN	   542#	   575	   588#
GETMEM	   248#	   458	   459	   460	   461	   841
GETMOD	   381#	   650
GETNUM	   960#	   993	   994	  1012#
GETNXT	   927#	   963	  1027#
GETPK	  1533#	  1590	  1601	  1604	  1607	  1617#
GETSZ	   697#	   731	   735#
GETTAB	  1724#	  1881	  1890	  2002#
GETWD	  1532#	  1582	  1585
GLBCMX	   239#	   241
GLBSZ	   241#	   242	   244	  1794	  1843
GLCNT	   245#	   894	  1745	  1746	  1825	  1826
GOCD	   516#	   520	   521
GTSCD	   399#	  2968
GTTAB	   383#	   650
HCTA	  1921#	  1922
HCTRL	   355#	  1917
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

HEAD	   407#	   800	   819	   822	   832	  1239	  1301	  1303	  2401	  2403	  2421	  2425	  2426	  2427
	  2431
HERE	   543#	   575	   585#	  1328#	  1328	  1338#	  1536#	  1545	  1613#	  1639#	  1639	  1640
HIDATE	  1190#	  1196	  1201
HODEST	   426#	  1752	  1758	  2591
HOLD	   959#	   971	  1010	  1535#	  1541	  1542	  1551	  1563	  1582	  1590	  1604	  1614	  1615	  1725#
	  1785	  1788	  1789	  1825	  1826	  1920	  1943	  1944	  1946	  1947	  1949	  1950	  1961	  1962
	  1963	  1964	  2071#	  2080	  2081	  2107	  2109	  2155#	  2160	  2161	  2208	  2222	  2231	  2297#
	  2309	  2311	  2312	  2314	  2318	  2341	  2342	  2343	  2344	  2347
I	   269#	   474	   475	   595	   596	   600	   603	   859	   861	   973	   977	   980	   984	   987
	  1014#	  1015	  1016	  1017	  1148#	  1165	  1166	  1170	  1250#	  1252	  1261#	  1262	  1278	  1279
	  1404#	  1410	  1412	  1537#	  1622	  1626	  1628	  1631	  1632	  1633	  1634	  1635	  1650	  1651
	  1667	  1668	  1669	  1673	  1674	  1675	  1680	  1681	  1872	  1873	  1910	  1919	  1921	  1922
	  1974	  2006	  2007	  2008	  2020	  2021	  2133#	  2139	  2140	  2156#	  2181	  2200	  2236	  2240
	  2241	  2253	  2254	  2272	  2273	  2301	  2336	  2337	  2341	  2342	  2343	  2344	  2345	  2347
	  2348	  2349	  2350	  2638	  2778
ICTRL	   356#	  1881	  1895	  2142	  2667	  2670	  2723
IFDERR	   111#	  1010	  1205
IFMORE	  2333#	  2337	  2345
IMAGE	   244#	  1441	  1442	  1443	  1794	  1826	  1843
INCD	   393#	  2369	  2402
INDEX	   503#	   505	   519
INDLIM	    97#	   278	   279	   338	  1547	  2165	  2310	  2424
INITOK	   697#	   705	   708#
INITR	   258#	   470	  1427#
INPUT	    76#	   800	  1080	  1162	  1181	  1195	  1298	  1340	  2464
INWD	  1093#	  1098	  1112	  1113	  1116
IOCS	   156#	   432#
IOERR	   262#	   570	   576	   755	   770	   796	   805	  1205	  1332	  1333	  1361	  1388	  1508	  1517
	  1539	  1540	  1541	  1614	  1776	  2124	  2158	  2159	  2160	  2408	  2464	  2465	  2955#
ISCARD	  1146#	  1156
IUSERR	   119#
J	   439#	   858	   859	  1672	  1674	  1725#	  2133#	  2139
JCTRL	   357#	  1980	  2669
JFCL	   404#	  2836
JOBAPR	   254#	  2928
JOBDDT	  2926#	  2928
JOBFF	   253#
JOBHCU	   251#	  1296
JOBJDA	   252#
JOBREL	   256#
JOBTPC	   255#
JRSTCD	   382#
JSR	   403#	  2836	  2914
K	   439#
KCTRL	   358#	  1954	  2671
KFANY	   549#
KFNEW	   551#	   552	   716
KFNO	   546#	   716
KFYES	   547#	   548	   552
LAB	  1086#	  1103	  1116	  2332#	  2338	  2340	  2341	  2342	  2343	  2923#	  2928	  2948#	  2950
LAST	  2461#	  2467	  2487	  2501
LCTRL	   359#	  1917	  1924	  2670	  2723
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

LDFILE	   699#	   716	   723	   913
LESSTR	  1095#	  1113
LH	   415#	   456	   993	  1038	  1298
LINK	  1237#	  1239	  1240
LIST	  2363#	  2367	  2368	  2369	  2382	  2383	  2384
LKPCD	   388#	   727	   731
LLEN	   238#	   239	  1442	  1746
LNGERR	   125#	  1776
LOCWPF	   219#	   222	   223	   225	   226	   227	   228	   229	   230	  2517
LONALT	   265#	   483	   496	   583	   714	  1173	  1182	  1208	  1280	  1341	  1415	  1511	  1613	  1824
	  1847	  2115	  2230	  2430	  2941#
LPTR	   698#	   892	   920
LTJUMP	   446#	   488	   494
LTNAME	     1#	   151	   152	   153	   154	   155	   156	   157	   158	   159	   160	   161	   162	   163
	   164	   165	   166	   167	   168	   169	   170	   171	   172	   173	   174	   175	   176	   177
	   178	   179	   180	   181	   182	   183	   184	   185	   186	   187	   188	   189	   190	   191
	   192	   193	   194	   195	   196	   197	   198	   199	   200	   201	   202	   203	   204	   205
	   206	   207	   208	   209	   210	   211	   212	   213	   214	   216	   217	   218	   242	   244
	   245	   247	   248	   249	   251	   252	   253	   254	   255	   256	   312	   407	  2926
MASK	  1096#	  1116
MAXARG	   220#	   223
MAXWPF	   223#	   306
MCTRL	   360#	  1980	  2667	  2668
MECHOP	   427#	  1827	  1838	  2601
MINARG	   221#	   222	   971	  2520
MINFID	   414#	   744	  2516	  2965
MKCTRL	   139#	   348	   349	   350	   351	   352	   353	   354	   355	   356	   357	   358	   359	   360
	   361	   362	   363	   364	   365	   366	   367	   368	   369	   370	   371	   372	   373	  2810
MODE	   313#	   466	   569	   570	   576	   578	   617	   725	   742	   775#	   777	   791	  1161	  1173
	  1296	  1332	  1363	  1389	  1507	  1525	  1553	  1572	  1592	  2103	  2171	  2190	  2210
MSG	   197#	   496	   706	  1226	  2035	  2794#	  2964	  2967	  2975
MSGTTY	   264#	  2784#
MXACP	   328#	   578	  1337	  1394	  1395	  1397	  1681	  2270	  2504
N	  2955#	  2958
NAM	   973#	   990	   999
NAMARG	   227#	   859	   973	   999	  1008	  1036
NAMUUO	   385#	   597
NBCHKB	  1728#	  1862	  1866	  1871	  1877
NBLKS	  2357#	  2367	  2510#	  2517
NBLOCK	  1051#	  1061
NBP	  1430#	  1785	  1825	  1857	  1862	  1866	  1867	  1871	  1872	  1873	  1877	  1920	  1964	  2019
	  2033	  2034
NBPB	  1719#	  1785	  1857	  1862	  1866	  1871	  1872	  1873	  1877	  1997
NBPE	  1431#	  1442	  1789	  2033
NBPI	  1429#	  1441	  1785	  1831	  1833	  1841	  1963	  1997	  2018
NBUFS	   432#	   456	   457	   458	   459	   460	   461	   462	  1170	  1278	  1673	  2272	  2301	  2317
	  2337	  2345	  2496
NCTRL	   361#	  1861
NDRADR	   338#	   480	  1512
NEW	    83#	   723	   738
NEWFID	  1185#	  1198	  1199
NEWMSG	   702#	   913
NITPOS	  2541#	  2658	  2668	  2669
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

NITRNG	   695#	   725	   742	   813#
NITSCP	   542#	   578	  1070#
NLPOS	  1724#	  1968	  2006	  2014#
NNCH	   531#	   558	   930#	  1028
NO	   271#	   451	   867	  1170	  1278	  1675	  1782	  1800	  1808	  1866	  1871	  1927	  1930	  1936
	  1998	  2308	  2349	  2385	  2721	  2774
NOESC	   201#	  2852#
NOESCP	   441#	   453	   494	  2857	  2868	  2891
NOTAB	   641#	   647	   661	   676
NOTERM	  1433#	  1434
NSBUFS	   531#	   818	   825
NULLP	   438#	   471	   472	   485#
NWDS	  2373#	  2382
NXBLK	  1493#	  1493	  1496	  1498	  1500	  1503	  1507#	  2089#	  2089	  2099	  2103#
NXBUF	   288#	   464	  2301	  2306	  2308	  2309	  2317	  2336	  2337	  2345	  2350	  2496
NXCH	  1086#	  1100	  1106	  1724#	  1745	  1748	  1767	  1773	  1774	  2041#
NXCHAR	   258#	   695#	   715	   918#	   925#	   963	   967	   972	   986	   990	   999	  1002	  1003	  1006
	  1008	  1016
NXT	   883#	   893
NXTCHR	  2801#	  2806	  2809
OBEND	  1729#	  1732	  1737	  1891	  1900	  1904	  1909	  1917	  1922	  1944	  1954	  1973
OBP	  1718#	  1745	  1747	  1750	  1770	  1784	  1815	  1857	  1861	  1877	  1883	  1891	  1892	  1894
	  1900	  1904	  1909	  1910	  1917	  1919	  1922	  1943	  1944	  1950	  1954	  1956	  1961	  1973
	  1974
OBPB	  1719#	  1784	  1857	  1861	  1877	  1997
OBPE	  1721#	  1784	  1788	  1791	  1815	  1861	  1883	  1891	  1892	  1900	  1904	  1909	  1917	  1922
	  1944	  1946	  1954	  1961	  1973
OBPI	  1429#	  1440	  1745	  1755	  1765	  1784	  1997
OBPLE	  1720#	  1791	  1861
OCTRL	   362#	  1927
OFF	  1450#	  1452	  2006
OFFALT	   203#	   265#	   453	   558	   562	   720	   762	  1159	  1180	  1194	  1277	  1328	  1336	  1407
	  1509	  1544	  1820	  1837	  2104	  2162	  2400	  2419	  2877#	  2934#	  2936
OINTER	  2750#	  2754	  2798#	  2806	  2809
OLD	    84#	   723	   732
OLDFID	  1185#	  1195
OLDMSG	   701#	   913
OLDOFF	  1451#	  1452
OLDP	   698#	   714	   720	   762
OLDRLS	  1190#	  1199	  1205#
OLDTAB	  1459#	  1460
OLITWD	   148#	  1794
ONALT	   204#	  2888#	  2901	  2943	  2957
ONALTC	   205#	  2899#
ONECHO	   263#	   663#	  1806	  1943	  1983
ONFTBL	   556#	  1112	  1113	  1116
ONP	  2596#	  2601
OPEN	   157#	   560#	  1181	  1195
OPEN1	   438#	   577	   684#	  2521
OPENP	   164#	   531#
OPNCD	   386#	   705
OPNSZ	   318#	   708	   735	  1389	  1395	  1397	  1406	  1407	  1412	  2504
OPNSZX	  1386#	  1396	  1399#
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

OPT	  1211#	  1219	  1224
OPTION	  1148#	  1150	  1156	  1173
OPWORD	   517#	   519	   520	   521	   522
ORG	   313#	   466	   569	   570	   579	   616	   735	   736	  1079	  1080	  1164	  1367	  1512	  1543
	  1547	  1604	  1650	  1666	  1669	  1680	  2105	  2113	  2118	  2163	  2165	  2222	  2253	  2267
	  2270	  2299	  2310	  2316	  2403	  2421	  2423	  2424	  2469	  2470	  2471	  2478	  2487	  2494
ORGIND	    96#	   280	  1079	  1080	  1512	  1547	  2113	  2118	  2165	  2310	  2424
OSEALL	   167#	  1258#
OTECHO	   630#	   650	   651#
OUT	   861#	   861	   865#	   987#	   987	   995	  1002	  1010#	  1190#	  1203	  1207#	  2337#	  2337	  2350#
OUTCD	   394#	  2384	  2422
OUTERR	  2364#	  2371#	  2384	  2398#	  2407#	  2422
OUTMSG	    79#	   713
OUTPUT	    78#	   720	   722	  1079	  1172	  1389
OVADDR	   441#	  2834	  2912	  2914
P	   839#	   841	   842	   843	   844	  1290#	  1303	  1304
PACK	    95#
PCGET	  1794#	  1878
PCRXIT	  1818#	  1905	  1912
PCTRL	   363#	  1933
PFRAG	  1535#	  1543	  1549	  1554	  1562	  1563	  1564	  1581	  1582	  1603	  1604	  2155#	  2163	  2167
	  2172	  2180	  2181	  2182	  2199	  2200	  2221	  2222
PKA	   322#	  1619#	  1622	  1625	  1627	  1633	  1635	  2094	  2095	  2234#	  2236	  2238	  2241	  2313
	  2314
PKB	   322#	  1495	  1502	  1619#	  1622	  1625	  1627	  1633	  1636	  2094	  2095	  2234#	  2236	  2238
	  2239	  2241	  2313	  2314
PKEOF	  1619#	  1621	  1631#
PKMAC	  1482#	  1495	  1502
PLNCHK	   169#	  1520#
PLNW	   170#	  2127#
PNB	  1724#	  1813	  1815	  1818	  1819	  1839	  1840	  1882	  1892	  1895	  1900	  1904	  1910	  1921
	  1950	  1974	  1976	  1977	  2028#
POS	  1316#	  1333	  1338	  1342	  1725#	  2006	  2008	  2018	  2020	  2021	  2023
PPNARG	   226#	   709	   739	   984	   993	   994
PPNHLD	   698#	   709	   739
PPRINT	   200#	  1755	  1831	  2742	  2747	  2750#
PRCHAR	   142#	  2021	  2676
PRINT	   195#	   903	   913	  1761	  2745#
PRINTC	   196#	  2770#
PRNTTC	   264#	  2763#
PRNTTY	   264#	  2735#
PROMPT	  1454#	  1455#	  1456	  1754	  1760	  1796	  1829
PRTERR	   120#
PRVARG	   229#	  1197	  1202
PTOEOF	  1489#	  1508	  1512	  2071#	  2105	  2108	  2113
PTR	   543#	   563	   965#	   971	  1003	  1008	  1010	  1023	  1093#	  1098	  1101	  1110	  1112	  1113
	  1116	  1118	  1190#	  1199	  1535#	  1543	  1554	  1558	  1559	  1560	  1566	  1574	  1577	  1583
	  1593	  1597	  1605	  1650	  1653	  1668	  1672	  1679	  2133#	  2136	  2138	  2155#	  2163	  2172
	  2176	  2177	  2178	  2184	  2192	  2195	  2201	  2211	  2215	  2223	  2253	  2256	  2269	  2273
	  2275
PTRNXT	   927#	   967	  1003	  1008	  1022#
PUT	   192#	  1037	  1039	  1040	  1808	  1818	  1856	  1862	  1866	  1871	  1877	  1878	  1882	  1892
	  1924	  1950	  1962	  1968	  1976	  1997	  2699#	  2724	  2727
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

PUT1	  2662#	  2662	  2676#
PUT2	  2671#	  2671	  2674#
PUTC	   194#	  1867	  1872	  1873	  1895	  1900	  1904	  1910	  1950	  1956	  1961	  1964	  1974	  1983
	  2717#	  2778
PUTCH	  2151#	  2169	  2181	  2186
PUTCR	   143#	   145	   146	  2541
PUTLF	   144#	   145	   146	  2660	  2668	  2669
PUTPK	  2153#	  2208	  2219	  2222	  2225	  2233#
PUTTY	   264#	  2075	  2665#	  2703	  2724	  2726
PUTTYC	   264#	  2710#	  2778
PUTTYX	   264#	  2120	  2650#	  2692
PUTWD	  2152#	  2200	  2203
PUTX	   193#	  1803	  1809	  1810	  1960	  1986	  2688#
QCTRL	   364#	  1877
QUIT	   440#	   482	   488#
R	   175#	  1463#	  1551	  1563	  1568	  1582	  1585	  1624	  2042
RACTER	    94#	   466	   569	   570	   579	   736
RADR	   338#	   478	  1079	  1512	  2113
RB	   184#	  1528#
RBLK	   258#	  1679	  2305	  2357#
RCH	   339#	   478	  1505#
RCTA	  1961#	  1968
RCTB	  1924#	  1924	  1964#
RCTRL	   365#	  1960
REASK	   697#
RELEAS	  1217#	  1221	  1225	  1228#
RENAME	   187#	  1185#
RERR	   337#	  1079	  1517#	  1539
RH	   416#	   457	   521	   805	   822	   832	   984	   994	  1239	  1240	  1299	  1301	  1302	  1303
	  1304	  1668	  2401	  2421	  2425	  2427	  2431
RING	  1851#	  1851	  1861	  1862	  1866	  1871	  1877	  1900	  1917	  1919	  1944	  1946	  1954	  1986#
	  2010#	  2010
RINIT	   336#	  1339	  1508#	  2113
RLAB	   342#	   468	  1079	  1339	  1491	  1507	  1512	  1539	  2113
RLSCD	   391#	   753	   770	  1207	  1228
RLSMEM	   249#	  1240
RLSRNG	  1148#	  1173	  1234#
RMDEST	   425#	  2075	  2076	  2120	  2121	  2581	  2692	  2693	  2703	  2704
RNADDR	  2832#	  2837	  2838#
RNMCD	   389#	  1203	  1221	  2519
RNMOK	  2514#	  2519	  2520#
RPBITS	   445#	   492	  2928
RPK	   340#	   478	  1502#
RSALT	   214#	  2924#
RSBRK	   213#	   655#
RSTRT	  1784#	  1977	  2036#	  2036
RTEL	   337#	   468	  1515#
RUBOUT	   147#	  1801	  1806
RWD	   339#	   478	  1500#
RWELAB	   343#	   568	   575	   580	  2950	  2958
SAVE	  1144#	  1150	  1205
SAVLOC	   698#	   714	   720	   762	  1726#	  1781	  1821	  1844
SCTRL	   366#	  1954	  1956
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

SECNT	   411#	  2403
SEPTR	   410#	  1301	  2426
SEQUEN	    88#	   466	   570	   576	   578	   725	   742	  1296	  1332	  1363	  1389	  1507	  1525	  1553
	  1572	  1592	  2103	  2171	  2190	  2210
SET	   667#	   672
SETALT	   262#	  2857	  2870	  2882	  2892	  2923#
SETCFN	   152#	  2566#
SETCP	   180#	  1330#	  1407	  1681	  2466
SETCPI	   258#	   578	  1316#
SETFID	   158#	   563	   965#	  1199
SETFIP	   165#	   558	   930#
SETRWE	   198#	  1545	  1613	  1621	  1640	  2948#
SETTAB	   171#	   472	  1458#
SIXBIT	   957#	   977	   988
SIXPTR	   959#	   973	   977	   980	   984	   988	  1036	  1037	  1039	  1040
SIZE	   182#	  1372#
SKPLAB	   499#	   521	  1059#	  1062	  1064#
SPCNT	  2539#	  2546	  2637	  2645	  2658	  2660	  2668	  2669	  2678	  2679
SRBLK	   261#	  1507	  1525	  1653	  2390#
STATE	  2843#	  2847
STPPN	   697#	   727	   739#
STS	   151#	  2968	  2970	  2971
STSCD	   398#	  2420
STZCD	   392#	  1225	  2370	  2406
SUBCNT	   322#	  1495	  1502	  1588	  2093	  2094	  2095	  2206	  2314	  2427
SVLCH	   630#	   653	   658	   678
SWBLK	   261#	  1172	  2103	  2256	  2410#
SXPT	   961#	   973	   980	   984	  1036	  1039
SZAP	  1537#	  1555	  1575	  1594	  1644#	  2156#	  2173	  2193	  2212	  2247#
SZFG	   320#	   708	   736	  1396	  2504
TAB	  1458#	  1460	  2007	  2008
TABOFF	   174#	   472	  1450#
TBLCNT	   552#	   556
TCLOOP	  2715#	  2715	  2723#	  2768#	  2768	  2776#
TCTRL	   367#	  1968
TDESCR	   542#	   568	   575	   612#
TEBYTE	  1192#	  1196	  1201
TEL	   103#	   311	   341	   466	   467	   468	   568	   569	   570	   895	  1158	  1361	  1388	  1540
	  1744	  2159	  2547	  2548	  2741	  2742	  2747	  2792	  2796
TELCHK	   159#	   566	   851#
TELERR	   126#	   570	  1361	  1388	  1540	  2159
TELFID	   855#	   859
TEMP	   543#	   630#	   658	   661	   787#	   797	   805	   808	   822	   828	   832	   859	   861	   865
	   893	   894	  1148#	  1162	  1163	  1164	  1166	  1404#	  1407	  1415	  1535#	  1551	  1557	  1558
	  1559	  1563	  1564	  1568	  1595	  1596	  1597	  1598	  1624	  1625	  1634	  1636	  1666	  1668
	  1669	  1671	  1672	  1679	  1680	  1725#	  1748	  1753	  1756	  1759	  1762	  1773	  1828	  1830
	  2018	  2019	  2020	  2042	  2071#	  2105	  2108	  2155#	  2169	  2181	  2182	  2186	  2213	  2214
	  2215	  2216	  2538#	  2739#	  2741	  2742	  2743	  2776	  2778	  2792
TEMP1	  2538#
TENTRY	     2#	     7	     8	     9	    10	    11	    12	    13	    14	    15	    16	    17	    18	    19
	    20	    21	    22	    23	    24	    25	    26	    27	    28	    29	    30	    31	    32	    33
	    34	    35	    36	    37	    38	    39	    40	    41	    42	    43	    44	    45	    46	    47
	    48	    49	    50	    51	    52	    53	    54	    55	    56	    57	    58	    59	    60	    61
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

	    62	    63	    64	    65	    66	    67	    68
TERM	  1434#	  1742	  1813	  1894	  1910	  1919	  1922	  1974
TERMCH	  1446#	  1447#	  1448	  1813	  1894	  1900	  1904	  1910	  1919	  1922	  1950	  1974
THRU	  2344#	  2344	  2347#
TMFERR	   107#	   607
TNADDR	  2910#	  2915	  2918#
TNXBUF	  2296#	  2305	  2320#
TOBOTH	   420#
TOTERM	   418#	  1758	  1759	  1793	  2075	  2120	  2549	  2692	  2703
TOTOUT	   419#	  1752	  1753	  1828	  2076	  2121	  2693	  2704
TPRMPT	   173#	   471	   714	   720	   762	   896	  1454#
TRPFG	   441#	   453	   494	  2870	  2882	  2892
TSBITS	   643#	   665	   672
TTCD	   400#	   653	   658	   678	  2610	  2619	  2638
TTDEST	   210#	  1753	  1756	  1759	  1762	  1793	  1822	  1828	  1830	  1845	  2549	  2576#	  2741	  2742
	  2792
TTECHO	   212#	  2596#
TTYIO	   262#	   482	  2529#
TTYLEN	   190#	  2624#
TTYP	  2538#	  2714	  2721	  2724	  2726	  2767	  2774	  2778
TYPMOD	   544#	   615	   723	   732	   738
UCTRL	   368#	  1889
UFDUMP	   163#	  1267#
UGFCD	   395#	  1667
ULAB	  1536#	  1545	  1613
UNCATE	  2462#	  2487	  2510#
UNCTRL	   140#	  2674	  2726	  2727
UPDATE	    77#	   576	   711	   732	   737
USEBIT	   408#	   819
USICD	   396#	  2366
USOCD	   397#	  2381
USRNAM	   232#	   984
UTCRLF	   145#
UTFILE	   424#	  1752	  1755	  1827	  1831	  1838	  1841	  2076	  2121	  2559	  2693	  2704
UTLFCR	   146#
VAL	  2051#	  2075	  2077	  2079	  2088	  2095	  2097	  2101	  2120	  2122
VCTRL	   369#	  1983
W	   177#	  2051#	  2108	  2135	  2138	  2142	  2200	  2203	  2239	  2474	  2483	  2704	  2754	  2807
	  2813
WADR	   338#	   479	  1080	  2118
WASONP	   630#	   651	   665
WB	   183#	  2149#
WBLK	   258#	  1166	  1170	  1278	  1675	  2269	  2349	  2373#	  2491
WBUF	   259#	   260	  2491
WCH	   339#	   479	  2101#
WCNT	  2127#	  2137
WCTRL	   370#	  1807	  1871
WDMAC	  1480#	  1493	  1500
WERR	   337#	  1080	  1340	  1510	  2124#	  2158
WFID	   160#	  1032#	  2966
WHAT	   889#	   896	   901#
WHERE	  2576#	  2581	  2586#	  2591
WINIT	   336#	  1340	  2104#
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Symbol cross reference

WLAB	   342#	   467	  1080	  1340	  1510	  2086	  2103	  2118	  2121	  2158
WORD	    93#	  2105	  2469
WPB	   281#	  1164	  1650	  2253	  2421
WPF	   222#	   969
WPK	   340#	   479	  2091#
WSET	   337#	  1510	  2117#
WTEL	   337#	   467	  2120#
WWD	   339#	   479	  2088#
WX	   178#	  2080	  2084#	  2169	  2181	  2186	  2693	  2811
WXLAB	   336#	   579	  2086#
XCTRL	   371#	  1936
XIT	  1813#	  1813	  1819#	  1900	  1904	  1910	  1950
Y1	  1974#	  1974	  1977#
YCHAR	   337#	   579	  2079#
YCTRL	   372#	  1972
YES	   270#	   864	   865	   981	  1856	  1866	  1871	  1927	  1933	  1936	  2117	  2369	  2714	  2767
YESESC	   202#	  2863#
YLAB	   342#	   467	   579	  2073	  2076
YTEL	   337#	   467	  2075#
ZBUF	  2461#	  2489	  2491	  2494	  2495	  2496
ZCTRL	   373#	  1851	  1852	  1930
ZREST	  2471#	  2471	  2483#	  2494
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Macro/Opdef cross reference

ACTIVE	  2334#	  2341	  2342	  2343	  2344
ACTRL	   348#	  1807	  1852	  1866
AEFERR	   122#
ARGCNT	   225#	   712	   727	   731	   740	   744	   971	  1203	  2516	  2517	  2518	  2519	  2520	  2965
ARGERR	   128#	   818	  1333	  1541	  2160	  2465
AUXCAL	   384#	   647	   661	   677
BACKOB	  1735#	  1861
BBUFSZ	   277#	   805	   841	   843	  1240
BCTRL	   349#	  1986
BELL	   375#	  1986
BGNADR	   302#	  1170	  1278	  1675	  2305	  2306	  2309	  2349	  2491
BIT17	   638#	   644
BIT18	   443#	   445
BIT25	   444#	   445
BIT26	   635#	   643
BIT28	   634#	   665	   672
BIT29	   633#	   643
BPC	  1094#	  1096
BPW	   272#	   279	  1094	  1096
BUFSZ	   276#	   279	   281	   302	   458	   735	   828	   832	  1170	  1278	  1563	  1582	  1675	  1679
	  2181	  2200	  2269	  2306	  2349	  2367	  2401	  2403	  2489	  2491
CCTRL	   350#	  1900
CHBITS	   644#	   658
CHMAC	  1481#	  1498	  1505
CLEAN	   260#	  1170	  1278	  1675	  2349
CLICD	   401#	   448	   493	   597	   650	   667	  1062	  1279	  1300	  2627	  2837	  2915	  2929
CLSCD	   390#	   726	   766	  1224
CNFERR	   112#	   716	   723	   732	   738	   747	   895
CONFWD	   234#	   710	  1002
COPRNX	  1742#	  1900	  1904	  1950
CORERR	   131#
CPW	   240#	   241	   279	  1094	  1096	  1098	  1103	  1412	  1549	  1557	  1563	  1826	  2135	  2138
	  2167	  2175	  2181	  2403
CTRL	  2789#
CTRLCH	   141#	  1814	  2673
CURBUF	   409#	   822	   832	  1239	  1303	  2401	  2421	  2425	  2427	  2431
DCTRL	   351#	  1903
DEL	  1145#	  1181	  1219
DEVERR	   132#	   796	   805
DEVNAM	   233#	   789	   999
DIRECT	    89#	   569	   791	  1161	  1173	  1181	  1195
DSKDEV	   786#	   789
EBUFSZ	   280#	   281	   735	  1164	  1367	  1543	  1604	  1666	  1669	  1680	  2163	  2222	  2267	  2270
	  2299	  2316	  2403	  2421	  2423	  2470	  2471	  2478	  2487	  2494
ECTRL	   352#	  1855
EITHER	   421#	  2550
ENTCD	   387#	   712	   740
EOFERR	   124#	  1508	  1614	  2408
ERR	   266#	   607	   818	  1010
EXTARG	   228#	   699	   732	   755	   971	   980	   981	  1038	  1039	  1192
EXTQ	   231#	   981
FBSERR	   121#
FCTRL	   353#	  1908
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Macro/Opdef cross reference

FEXSTS	   550#	   716
FILLSP	  2542#	  2637	  2645	  2660
FILSIZ	   230#	   735
FMDERR	   108#	   576	  1332	  1517	  1539	  2124	  2158	  2464
FNERR	   267#	   570	   576	   755	   770	   796	   805	  1205	  1332	  1333	  1361	  1388	  1508	  1517
	  1539	  1540	  1541	  1614	  1776	  2124	  2158	  2159	  2160	  2408	  2464	  2465
FNFERR	   118#	   755
FNMAX	   102#	   312	   313	   315	   317	   318	   320	   322	   326	   328	   329	   342	   343	   407
	   414	   474	   595	  1252	  1262	  1279
FNMIN	   101#	   103	   314	   407	   414	   474	   595	  1252	  1262	  1279	  1296
FORWOB	  1732#	  1815	  1883
FWDCNT	   548#	   554	  1112	  1118
GCTRL	   354#	   375	  1980
GETCH	  1530#	  1551	  1563	  1568
GETMOD	   381#	   650
GETWD	  1532#	  1582	  1585
GLBCMX	   239#	   241
GLBSZ	   241#	   242	   244	  1794	  1843
GOCD	   516#	   520	   521
GTSCD	   399#	  2968
GTTAB	   383#	   650
HCTRL	   355#	  1917
ICTRL	   356#	  1881	  1895	  2142	  2667	  2670	  2723
IFDERR	   111#	  1010	  1205
IFMORE	  2333#	  2337	  2345
INCD	   393#	  2369	  2402
INDLIM	    97#	   278	   279	   338	  1547	  2165	  2310	  2424
INPUT	    76#	   800	  1080	  1162	  1181	  1195	  1298	  1340	  2464
ISCARD	  1146#	  1156
IUSERR	   119#
JCTRL	   357#	  1980	  2669
JFCL	   404#	  2836
JRSTCD	   382#
JSR	   403#	  2836	  2914
KCTRL	   358#	  1954	  2671
KFANY	   549#
KFNEW	   551#	   552	   716
KFNO	   546#	   716
KFYES	   547#	   548	   552
LCTRL	   359#	  1917	  1924	  2670	  2723
LDFILE	   699#	   716	   723	   913
LESSTR	  1095#	  1113
LH	   415#	   456	   993	  1038	  1298
LKPCD	   388#	   727	   731
LLEN	   238#	   239	  1442	  1746
LNGERR	   125#	  1776
LOCWPF	   219#	   222	   223	   225	   226	   227	   228	   229	   230	  2517
LTNAME	     1#	   151	   152	   153	   154	   155	   156	   157	   158	   159	   160	   161	   162	   163
	   164	   165	   166	   167	   168	   169	   170	   171	   172	   173	   174	   175	   176	   177
	   178	   179	   180	   181	   182	   183	   184	   185	   186	   187	   188	   189	   190	   191
	   192	   193	   194	   195	   196	   197	   198	   199	   200	   201	   202	   203	   204	   205
	   206	   207	   208	   209	   210	   211	   212	   213	   214	   216	   217	   218	   242	   244
	   245	   247	   248	   249	   251	   252	   253	   254	   255	   256	   312	   407	  2926
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Macro/Opdef cross reference

MASK	  1096#	  1116
MAXARG	   220#	   223
MAXWPF	   223#	   306
MCTRL	   360#	  1980	  2667	  2668
MINARG	   221#	   222	   971	  2520
MKCTRL	   139#	   348	   349	   350	   351	   352	   353	   354	   355	   356	   357	   358	   359	   360
	   361	   362	   363	   364	   365	   366	   367	   368	   369	   370	   371	   372	   373	  2810
NAMARG	   227#	   859	   973	   999	  1008	  1036
NAMUUO	   385#	   597
NBCHKB	  1728#	  1862	  1866	  1871	  1877
NCTRL	   361#	  1861
NEW	    83#	   723	   738
NEWMSG	   702#	   913
NITPOS	  2541#	  2658	  2668	  2669
NO	   271#	   451	   867	  1170	  1278	  1675	  1782	  1800	  1808	  1866	  1871	  1927	  1930	  1936
	  1998	  2308	  2349	  2385	  2721	  2774
NOTAB	   641#	   647	   661	   676
NOTERM	  1433#	  1434
NXTCHR	  2801#	  2806	  2809
OBEND	  1729#	  1732	  1737	  1891	  1900	  1904	  1909	  1917	  1922	  1944	  1954	  1973
OCTRL	   362#	  1927
OLD	    84#	   723	   732
OLDMSG	   701#	   913
OLITWD	   148#	  1794
OPNCD	   386#	   705
ORGIND	    96#	   280	  1079	  1080	  1512	  1547	  2113	  2118	  2165	  2310	  2424
OUTCD	   394#	  2384	  2422
OUTMSG	    79#	   713
OUTPUT	    78#	   720	   722	  1079	  1172	  1389
PACK	    95#
PCTRL	   363#	  1933
PKMAC	  1482#	  1495	  1502
PPNARG	   226#	   709	   739	   984	   993	   994
PRCHAR	   142#	  2021	  2676
PRTERR	   120#
PRVARG	   229#	  1197	  1202
PUTCH	  2151#	  2169	  2181	  2186
PUTCR	   143#	   145	   146	  2541
PUTLF	   144#	   145	   146	  2660	  2668	  2669
PUTWD	  2152#	  2200	  2203
QCTRL	   364#	  1877
RACTER	    94#	   466	   569	   570	   579	   736
RCTRL	   365#	  1960
RH	   416#	   457	   521	   805	   822	   832	   984	   994	  1239	  1240	  1299	  1301	  1302	  1303
	  1304	  1668	  2401	  2421	  2425	  2427	  2431
RLSCD	   391#	   753	   770	  1207	  1228
RNMCD	   389#	  1203	  1221	  2519
RPBITS	   445#	   492	  2928
RUBOUT	   147#	  1801	  1806
SAVE	  1144#	  1150	  1205
SCTRL	   366#	  1954	  1956
SECNT	   411#	  2403
SEPTR	   410#	  1301	  2426
MIOCS	 SIMPL 25.00	6-Nov-1987 18:49:08
Macro/Opdef cross reference

SEQUEN	    88#	   466	   570	   576	   578	   725	   742	  1296	  1332	  1363	  1389	  1507	  1525	  1553
	  1572	  1592	  2103	  2171	  2190	  2210
SIXBIT	   957#	   977	   988
STSCD	   398#	  2420
STZCD	   392#	  1225	  2370	  2406
SXPT	   961#	   973	   980	   984	  1036	  1039
TBLCNT	   552#	   556
TCTRL	   367#	  1968
TEBYTE	  1192#	  1196	  1201
TEL	   103#	   311	   341	   466	   467	   468	   568	   569	   570	   895	  1158	  1361	  1388	  1540
	  1744	  2159	  2547	  2548	  2741	  2742	  2747	  2792	  2796
TELERR	   126#	   570	  1361	  1388	  1540	  2159
TENTRY	     2#	     7	     8	     9	    10	    11	    12	    13	    14	    15	    16	    17	    18	    19
	    20	    21	    22	    23	    24	    25	    26	    27	    28	    29	    30	    31	    32	    33
	    34	    35	    36	    37	    38	    39	    40	    41	    42	    43	    44	    45	    46	    47
	    48	    49	    50	    51	    52	    53	    54	    55	    56	    57	    58	    59	    60	    61
	    62	    63	    64	    65	    66	    67	    68
TERM	  1434#	  1742	  1813	  1894	  1910	  1919	  1922	  1974
TMFERR	   107#	   607
TOBOTH	   420#
TOTERM	   418#	  1758	  1759	  1793	  2075	  2120	  2549	  2692	  2703
TOTOUT	   419#	  1752	  1753	  1828	  2076	  2121	  2693	  2704
TSBITS	   643#	   665	   672
TTCD	   400#	   653	   658	   678	  2610	  2619	  2638
UCTRL	   368#	  1889
UGFCD	   395#	  1667
UNCTRL	   140#	  2674	  2726	  2727
UPDATE	    77#	   576	   711	   732	   737
USEBIT	   408#	   819
USICD	   396#	  2366
USOCD	   397#	  2381
USRNAM	   232#	   984
UTCRLF	   145#
UTLFCR	   146#
VCTRL	   369#	  1983
WBUF	   259#	   260	  2491
WCTRL	   370#	  1807	  1871
WDMAC	  1480#	  1493	  1500
WORD	    93#	  2105	  2469
WPB	   281#	  1164	  1650	  2253	  2421
WPF	   222#	   969
XCTRL	   371#	  1936
YCTRL	   372#	  1972
YES	   270#	   864	   865	   981	  1856	  1866	  1871	  1927	  1933	  1936	  2117	  2369	  2714	  2767
ZCTRL	   373#	  1851	  1852	  1930    
Ai<