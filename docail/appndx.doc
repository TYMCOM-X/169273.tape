



                               SECTION  1                               _______  _

                              New Features                              ___ ________





This section describes  changes and additions  to Sail since  the August
1976 manual, AIM-289.



1.1 - Double Precision      ______ _________


Double  precision  floating-point  arithmetic  is  available.   Use  the
<type!qualifier> LONG in declarations.  For example,
        LONG REAL X, Y, Z;
        LONG REAL ARRAY XA[0:N];

Currently LONG has  meaning only when it  appears as part of  LONG REAL.
(At some future time LONG INTEGERs may also exist.)

The runtime routines  LREALIN and LREALSCAN  operate the same  as REALIN
and REALSCAN, except for  returning LONG REAL values.  The  routine CVEL
takes a LONG REAL value and returns a string representation like that of
CVE,  except that  "@@"  is used  to  signify LONG  when  delimiting the
exponent.   Any  of  "@",  "@@", "E",  or  "D"  are  acceptable exponent
delimiters to LREALIN and LREALSCAN.

Variables which are declared LONG REAL are represented in  KI10 hardware
format  double precision,  take two  consecutive words  of  storage, and
provide  62  bits  of precision  (approximately  18  decimal  digits) to
represent the  fraction part of  a floating-point number.   Regular REAL
variables occupy a  single word and have  27 bits (8 decimal  digits) of
precision.  The exponent range of  both REAL and LONG REAL  variables is
from -128 to 127, where 2^127 is approximately 10^38.

LONG REAL is a dominant type in arithmetic operations +-*/%^ MAX MIN and
arithmetic relationals  <>= LEQ GEQ  NEQ.  If one  operand is  LONG REAL
then both operands will be converted to LONG REAL (if  necessary) before
performing  the  operation.   An exponentiation  involving  a  LONG REAL
raised to a positive integer constant is an exception to this rule.  The
type coercion path is linear:   STRING -> INTEGER -> REAL ->  LONG REAL.
Conversion from REAL to LONG  REAL is performed by assigning  the (only)
word of  the REAL  to the  most significant  word of  the LONG  REAL and
setting the second  (least significant) word of  the LONG REAL  to zero.
Conversion from LONG REAL to REAL is by UUO which rounds.

Arithmetic and assignment operations are compiled into DFAD, DFSB, DFMP,
DFDV, DMOVE,  DMOVEM instructions.  The  Sail operations ASH,  LSH, ROT,
LAND, LOR,  EQV, XOR are  performed on both  words (ASHC, LSHC,  ROTC, 2
ANDs, 2 IORs, etc.).  LOCATION of a LONG REAL variable gives  an address
E such that  DMOVE AC,E fetches the  appropriate words of  memory.  When
passed by value  as an actual parameter  to a procedure, both  words are
placed on  the P stack:   PUSH P,X  ; PUSH P,X+1.   LONG REAL  fields in
record  classes are  handled much  like STRING  fields, except  that the
address in the record field points  to the first word of a  2-word block
(rather than to the second word as in the case with STRINGs).

LONG  REAL ARRAYs  are  stored as  contiguous blocks  of  2-word values.
ARRTRAN done on two LONG REAL arrays is a transparent operation, but for
ARRYIN, ARRYOUT,  or ARRBLT  the actual word  count is  specified; think
about whether you should multiply by 2!  At runtime the array descriptor
for a LONG ARRAY has bit  12 (40,,0 bit) set in MULT(n),  the multiplier
for the last dimension (which would otherwise be =1).  Similarly, a LONG
ARRAY is allocated by setting bit 12 (40,,0) bit in the  parameter which
specifies the number of dimensions to ARMAK.

Runtime support for LEAP items with LONG REAL datums does not yet exist,
although the compiler does generate suitable code.

Two new (compile-time evaluatable) math procedures are:
        LONG REAL PROCEDURE B2LOG(LONG REAL VALU);
        LONG REAL PROCEDURE B2EXP(LONG REAL VALU);
B2LOG is log base 2, and b2EXP is the inverse (2@@0^valu).


1.2 - Declarations and Scope      ____________ ___ _____


Sail declarations must occur before use.  For example, in  the following
program the argument to  PRINT is interpreted as  the K on line  2, even
though by the ALGOL60 notion of scope it should be interpreted as  the K
on line 5.

        BEGIN "FOO"
        INTEGER K;      COMMENT this is line 2;
          BEGIN "RUB"
          PROCEDURE BAR; BEGIN PRINT(K) END;
          INTEGER K;    COMMENT this is line 5;
          <statements>
          END "RUB"
        END "FOO"



1.3 - Two-character Operators      _____________ _________


The compiler now recognizes "**" for "^", ":=" for "_", "<="  for "LEQ",
and ">=" for "GEQ".


1.4 - Requires      ________


REQUIRE  OVERLAP!OK;   will  suppress  the   message  which   occurs  at
initialization when two programs have declared items.

REQUIRE VERIFY!DATUMS; causes the compiler to generate  three additional
instructions for each DATUM reference, to make sure (dynamically, at run
time) that the type  of the item in the  DATUM construct is the  same as
the compiler expected.  This is similar to (the unimplimented effect of)
declaring all itemvars CHECKED.   It is planned that  VERIFY!DATUMS will
soon be a bit in the  /A switch and that the corresponding  REQUIRE will
disappear.

REQUIRE   PROCESSES;  insures   that  MAINPR,   the  main   process,  is
initialized.  You  need not  specify this  REQUIRE if  you use  APPLY or
SPROUT, but if  the only use  of processes is  via INTSET then  you must
REQUIRE PROCESSES;.



1.5 - CASE statement      ____ _________


In an explicitly numbered CASE statement the word ELSE can  appear where
a bracketed case number  is normally used.  The statement  following the
ELSE  is  a  catch-all  for any  case  number  not  mentioned, including
anything  which  would  otherwise  generate  a  CASE  index  error.  For
example,

        CASE K OF BEGIN [3] J_3; ELSE J_4; [5] J_5 END

is another way of accomplishing

             IF K=3 THEN J_3
        ELSE IF K=5 THEN J_5
        ELSE J_4

A CASE statement containing an ELSE case does not generate a call to the
CSERR runtime routine, and  in addition the jump table  usually contains
only  max_case - min_case +1  words (rather than max_case +1).  The ELSE
may also be written  between square brackets as  if it were another case
number.

A new syntax exists for numbered case elements to allow ranges:

    case_numl	::= 	integer_constant
		::=	integer_constant : integer_constant 
		::=	case_numl , case_numl

    case_label	::=	[ case_numl ]
		::=	[ ELSE ]
		::=	ELSE

This allows:

	CASE i OF BEGIN [1:5,10,25:29] j_i*4; [ELSE] outstr("ICK") END

In addition, numbered case elements may be used in case expressions.  In
that case, the ELSE clause will work normally, but failing to include an
ELSE will generate  a CASE index error if  unspecified indices are used.
Note that this is  unlike the  CASE statement, where  unspecified values
are sometimes treated as null statements.

	CASE i OF BEGIN [1] st1; [5] st2 END
behaves like:
	CASE i OF BEGIN [1] st1; [5] st2; [0,2:4] ; ELSE cause!error END

but
	CASE i OF ([1] v1, [5] v2)
behaves like:
	CASE i OF ([1] v1; [5] v2; [ELSE] cause!error)



1.6 - Circular RECORD!CLASSes      ________ ______________


To  define  two record  classes,  both of  which  contain RECORD!POINTER
fields refering to the other class, say

        FORWARD RECORD!CLASS BAR (RECORD!POINTER (ANY!CLASS) Q2);
        RECORD!CLASS FOO (RECORD!POINTER (BAR) Q1);
        RECORD!CLASS BAR (RECORD!POINTER (FOO) Q2);

In general, declare one class to be FORWARD and list  its RECORD!POINTER
fields as pointers to ANY!CLASS.  This breaks the circularity and allows
maximum compile-time type checking.



1.7 - LOP      ________ ______________


Finally, LOP is available as a statement.



1.8 - BBPP      ________ ______________


BBPP is a POINT-like construct that may generate better code if its args
are constants.  Should be substitutable for POINT, but some SAIL author
didn't think so, and therefore kept its existance un-documented.  It 
will now generate the equivalent of "MOVEI ac,ACCESS(x); HRLI ac,sizpos"
in appropriate situations (complex effective address, constant size,pos)
as well as generating constants for very simple elements.



1.9 - DFR1IN 

DFR1IN will accept either "AOBJN!POINTER" as before, or will take the
address of the call block with a zero left half  (i.e. what "LOCATION"
returns).


1.10 - COMPILER!SWITCH

This is a compile-time construct to examine the compilation switches
active during the compilation.  The construct is: COMPILER!SWITCH(char)
which is an integer constant expression equal to the setting of the 
switch.  This allows conditional compilation code like:
    IFCR COMPILER!SWITCH("B") NEQ 0	comment if compiled for BAIL;
	 THENC USERERR(0,1,"Jumping to BAIL","B");
					comment invoke BAIL via error;
	 ENDC


1.10 - COMPILER!VERSION

This is a compile-time construct which returns the version number of
the compiler doing the compilation.  No simple ordering relationship
exists between versions; this is provided primarily for maintennance 
purposes and to allow identifacation of particular compilers.

	Operating System


In  some cases,  user  programs may  wish to  determine  which operating
system they are running on.  At startup time, the SAIL  runtimes execute
a special GETTAB  UUO that is supposed  to return a code  indicating the
operating system.   This GETTAB  is implemented  on all  known operating
systems  that use  PDP-10  hardware, except  for the  Stanford  A.I. Lab
monitor, TYMCOM-X, and certain  out-of-date Tenex  systems.  It  is even
implemented on ITS!  The value returned by this UUO is put in a variable
$OS, which may be declared as an EXTERNAL INTEGER by your program so you
can look at it.  The codes are returned in bits 18-23:

        1 - Tops-10
        2 - ITS
        3 - Tenex
        4 - Tops-20
        5 - Stanford A.I. Lab monitor
        6 - TYMCOM-X monitor


The other bits in this  word are reserved for indicating  subversions of
these various operating systems.

			BAIL

BAIL has had many additions to protect against "ILL MEM REF" problems.
In addition:

   (1) Ending a line to BAIL with a <CR> will make BAIL add a semicolon
	before evaluating the line.  the old behavior can be achieved by
	ending lines with <LF>.

   (2) !!QUERY has now been pre-declared, thus allowing certain "EVAL"-
	like functions to be specified.

   (3) The <block>.<variable> specification of a particular instance of
	a variable name has had the "." changed to "|".  This has been
	done to allow type-in of variable names that include periods.
	"|" is a SAIL abbreviation for "SUCH THAT" in foreach statements
	(BAIL does not support foreach statements).

   (4) A shortened syntax for subfield accesses exists exclusively for
	BAIL:	<pointer-expression> [ <subfield name> ]
	This may only be used for subfields of the class of the actual
	record specified by the expression (no subfields for similar
	classes).  This syntax may be used recursively:
		PTR[LINK][LINK][LINK][NAME]
	instead of CL:NAME[ CL:LINK[ CL:LINK[ CL:LINK[ PTR ] ] ] ]


BAIL support for LONG REALS does not yet exist.

	New hooks into SAIL

GOGTAB.DEF includes the definition of the size of the GOGTAB array.
To get the appropriate size for GOGTAB, use:
	REQUIRE "SYS:GOGTAB.DEF" SOURCE!FILE;
	EXTERNAL INTEGER ARRAY GOGTAB[0:ENDREN];

core allocation		GOGTAB[CORINS]
    =0 => behave normally
    ELSE  XCT the contents of of GOGTAB[CORINS], which should
	behave as follows: 
	 1) P('17) avaliable as stack,
	    USER('15) has address of user table base (GOGTAB[0])
	 2) TEMP('14) contains the desired address
	    to extend core to (from GOGTAB[TOP]-1)
	 3) failure: no ac's changed, return +1
	 4) success: LAST('6) gets highest address
	    provided (must be GEQ TEMP's value),
	    no ac's but LAST changed, return +2.

getchan hook		GOGTAB[BKGETC]
  preserve all AC's
    =0 => behave normally
    ELSE XCT the contents of GOGTAB[BKGETC], which should
	 1) ALWAYS (even if short-circuiting release code) exit with
	    USER('15) set to address of user table base (GOGTAB[0]).
	    This is set up to the proper value on entry.
	 2) either return +1 (to complete normal GETCHAN function)
		(eg GOGTAB[BKGETC] is PUSHJ P, to 0-arg procedure).
	    or be a complete substitute for the getchan function
		(eg GOGTAB[BKGETC] is JRST to 0-arg integer procedure).

release hook		GOGTAB[BKRELS]
  preserve all AC's
    =0 => behave normally
    ELSE XCT the contents of GOGTAB[BKRELS], which should
	 1) ALWAYS (even if short-circuiting release code) exit with
	    USER('15) set to address of user table base (GOGTAB[0]).
	    This is set up to the proper value on entry.
	 2) either return +1 (to complete normal RELEASE function)
		(eg GOGTAB[BKRELS] is PUSHJ P, to 0-arg procedure).
	    or be a complete substitute for the release function
		(eg GOGTAB[BKRELS] is JRST to 2-arg procedure).
    Note: RELEASE has 2 args (not 1), second is inhibit bits
    Also Note: RELEASE is called within the OPEN function

open hook		GOGTAB[BKOPEN]
  preserve all AC's
    =0 => behave normally
    ELSE XCT the contents of GOGTAB[BKOPEN], which should
	 1) ALWAYS (even if short-circuiting open code) exit with
	    USER('15) set to address of user table base (GOGTAB[0]).
	    This is set up to the proper value on entry.
	 2) either return +1 (to complete normal OPEN function)
		[in this case RELEASE will immediately be called]
	    or be a complete substitute for the open function
		(not described).

                          Documentation Errors                          _____________ ______




This is a list of known bugs in the August 1976 Sail manual, AIM-289.

PAGE                    DESCRIPTION
abstr.  "varaiables" is a misspelling   [JFR 10-22-76]

iiiL    no period after LEAP (line 6 of paragraph)      [LES 10-22-76]

162L    "i.e" in the line "2. Recursive entry"  [JFR 10-23-76]

1R      "Nauer" for "Naur" (also References)    [JFR 11-2-76]

22L,26L "disjunct" -> "conjunct"                [JMC 11-12-76]

31L     line -9 "its" -> "it's"                 [JMC 11-12-76]

162R    The word PDA+'13 contains something other than indicated.
        The parameter descriptor words actually start at PDA+'14,
        but the way to find them is to follow the pointer in
        the right half of PDA+7.                [JFR 12-9-76]

9L      Another restriction on SIMPLE procedures: They should not do
        up-level addressing themselves (in addition to point 4.) unless
        the user really understands what is going on with the stack.
        It is possible to "screw up" without complaints from the
        compiler. SIMPLE ought to mean "I know what I am doing, so let
        me do it.". [JFR/DON 12-xx-76]

56L     CRLF="('15 & '12)", not '12 & '15       [JFR 1-15-77]

10R     It should be made clear that  LET A=B;  works even if
        A is a reserved word.  In particular, LET DEFINE=REDEFINE;
        Also note that B can be any reserved
        word except COMMENT. [COMMENT ALWAYS means "ignore through
        the next semicolon".]

4R      POLLING!POINTS is not a valid <require!spec>    [WFW 1-21-77]

50R     In FILEINFO, hidate2 occupies 3 bits    [JFR 2-3-77]

152L    CHNCDB and FILEINFO are defined everywhere except TENEX.
        [JFR 2-3-77]

65R     A better way of getting around the array problem is as follows:

        REQUIRE "<><>" DELIMITERS;

        DEFINE NewArray(type,name,bounds)=<
                BEGIN
                type ARRAY proxy bounds;
                MEMORY[LOCATION(name)] SWAP MEMORY[LOCATION(proxy)];
                END>;


        which hides all the hair of a poor facility and is perfectly
        general. unlike the present scheme in the manual. It will
	also de-allocate any array array storage formerly associated 
	with the array. A typical call would be:

        RECORD!CLASS RC(STRING ARRAY SA);
        RECORD!POINTER (RC) rp;

        rp _ NEW!RECORD(RC);
        NewArray(STRING,RC:SA[rp],[0:1,-2:3]); [MWK for KS 01-13-77]

27L     DIV and MOD use integer divide and are meant as a "integer
        divide" and "integer divide and remainder". This is NOT the
        real mod as written in Knuth volume 1. In fact, MOD would
        better have been named REM. [MWK 01-13-77]
@
    