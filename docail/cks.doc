
Getting SAILs files into your machine.

	First, use BACKUP to restore all of the files from the tape.
    Among these will be CKS.SAI, CKS.REL, CKS.CMD, and CKS.CKS.
    If you have a working SAIL compiler, simply compile and load
    CKS.SAI as it appears on the tape.  If you do not, load CKS.REL
    with the library LIBSA9.REL (or with the full runtimes file
    RUNTIM.REL).  Save the result, and you have your checksummer.

	Run CKS, which will prompt you for input.  The first command 
    you should give it is "@CKS.CKS" followed by a return.  Eventually
    you will be prompted for another command. Reply "@CKS.CMD" and hit
    another return.  You will eventually be given another command
    prompt, to which you should simply give a blank line (hit return
    again), and you are done.
	
	What you have been doing with CKS is taking checksums of the
    files that we provided for you on the tape.  The output should 
    be a long list of file names followed by their checksums.  If
    you see a line like 
	Couldn't read file FOO.BAZ
		or
	FOO.BAZ	$BUZWUP *** [not FIDDOG]
    then the file(s) mentioned did not arrive at your site correctly;
    call TYMSHARE and tell us which files were complained about.

	CKS.CKS checksums all of the checksum command files (except 
    itself), and CKS.CMD uses those command files to checksum all
    of the files that we have shipped you.


CKS:	SAILSHIP checksum program 

Purpose:
	To verify that all files that TYMSHARE has sent on a tape
have arrived, and assure that no obsolete or incompatible versions 
of any files have been accidentally delivered.  In addition, CKS is 
meant to provide a standard checksum program for our customers, a
program to quickly determine whether or not some file contains the
data it is supposed to contain.

Features:
    Both binary and text dependent checksums are available.
    Commands may be taken from either the terminal or indirectly
	through disk files.  
    An output file may be specified to record the calculated checksums
	and it may be used as input to a later (verification) run.
    Comments are allowed on input, and they are passed to the output 
	file, thus allowing short descriptions of the files to remain 
	attached to the file names in an updating operation.


Format of the checksums produced by CKS:

	A checksum is an arbitrary compression of a large quantity
    of data into a single value which varies with changes in the data,
    very much like a hash code.  CKS provides two different forms of
    checksums, binary and text.  Binary checksums depend on all 36
    bits of each word of the file being checksummed.  Text checksums 
    depend on the contents of the file when interpreted as text, much
    like a compiler might view a source file.  In text checksums things
    like line numbers and nulls are ignored in order to eliminate the
    variation introduced by different editors, thus they attempt to
    provide you with a way to determine whether one file is a simple
    copy of another, or is in fact different.

	CKS's checksums are seven-character strings, the first 
    of which is a "$" for text checksums and a "*" for binary 
    checksums.  The next six characters are letters in the order
    consonant vowel consonant consonant vowel consonant.  It is
    believed that this format is easier to remember than a set of
    numbers, and (because such strings are most often pronounceable)
    less subject to mis-interpretation when quoted verbally.


Using CKS:

	CKS takes single line commands which have up to three parts.  
    Any leading spaces or tabs on a line are ignored, and the various
    parts of a command line are separated by at least one space or tab.
    Each part of a command line so separated is called a "word".  Note:
    for the purpose of this discussion, the string "apples     box,qqq"
    has two "word"s.

<null>
---	There is one command that can be issued only from the terminal: 
    a blank line which means "exit the program".  If a blank line
    appears in a disk file, CKS will ignore it.

;SOME COMMENT
---	A line whose first non-blank character is a semicolon (;) is a 
    comment line, and it is simply passed to the output file (if any). 

OUTPUT: FILENAME.EXTENSION
---	A line whose first `word' is "OUTPUT:" (note: a 7-character 
    string) is a specification of an output file.  The next `word' 
    (which must exist, and may not begin with a semicolon) is the name
    of the file which is to next receive output.  This command may have
    a comment (semicolon followed by some text) on the same line.  This
    command is never copied to an output file.  If the specified file
    cannot be ENTERed, all current indirect files are released, and
    processing continues from the terminal.

MODE: TEXT
---	A line whose first `word' is "MODE:" (note: a 5-character 
    string) is a specification of the prevailing checksum style (binary
    or text).  The next `word' should be either "BINARY" (6 characters),
    "*" (1 character), "TEXT" (4 characters), or "$" (one character).
    If either "BINARY" or "*" is used, then binary checksums are 
    assumed.  If either "TEXT" or "$" is used, then text checksums are
    assumed.  If the second word was none of those four, then the 
    current mode is printed and retained, all current indirect files 
    are released, and processing continues from the terminal.  This 
    command may also be followed by a comment on the same line.

@INDIRECT-FILE.NAME
---	A line whose first non-blank character is an at sign (@) is an
    indirect file specification, and the rest of the line is taken to be
    the name of a file to take commands from next.  The file is opened
    immediately, and command processing continues with the first line
    of that file.  When the end-of-file is reached, the file from which
    it was called is returned to, and processing continues.  If the 
    specified file cannot be read, all current indirect files are 
    released, and processing continues from the terminal.

FILENAME  $CEKSUM	;DESCRIPTION OF CONTENTS
---	Other lines are considered to be requests for checksums.  They
    come in three forms, all of which may be followed by a comment.  
    In all three cases if the file cannot be read, a message is issued
    to that effect, and the file name, checksum mode, and any comment 
    on that line are copied to the output file.  If the file can be read
    the files checksum is taken, and the file name, its checksum, and 
    any comment on the original line are copied to the output file.
 FILE ;COMMENT
	First, there is a bare file name.  This indicates that the file 
    is to be checksummed in the prevailing mode.  
 FILE $ ;COMMENT
	A file name followed by either a "*" or "$" (both 1-character 
    `word's) indicates that the file is to get either a binary or text 
    checksum ("*" for binary, "$" for text) despite the prevailing 
    mode (which remains unchanged).
 FILE $BAZWUG ;COMMENT
	Finally, a file name can be followed by a checksum.  In this
    case, the checksum is taken in the same mode as the specified 
    checksum, and the two are compared.  If they differ, an error
    message is printed, and processing proceeds with the specified
    checksum ignored.


Limitations:
	No checksum that is shorter than the entire file that it is
    used on can fully represent that file, hence it is possible for
    two different files to have the same checksum.  A checksum can
    tell you two files are different; it can only suggest that they
    might be the same.
	This program was designed to be transportable between various
    operating systems and cpu models of the DEC PDP-10; it was not
    designed to be fast, and you can probably write a faster program
    yourself.  The text checksumming is significantly slower than the
    binary checksumming, but it is not subject to vagaries such as the
    checksum changing whenever lines are renumbered with SOS.

   