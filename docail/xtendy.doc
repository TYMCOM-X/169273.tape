Sail Addendum                                               New Features


                               SECTION  1                                 

                              New Features                               





This section describes  changes and additions  to Sail since  the August
1976 manual, AIM-289.



1.1 - Double Precision       


Double precision floating-point arithmetic is available on all but KA-10
processor hardware.  Use the <typequalifier> LONG in declarations.  For
example,
        LONG REAL X, Y, Z;
        LONG REAL ARRAY XA[0:N];

Currently LONG has  meaning only when it  appears as part of  LONG REAL.
(At some future time LONG INTEGERs may also exist.)

The runtime routines  LREALIN and LREALSCAN  operate the same  as REALIN
and REALSCAN, except for  returning LONG REAL values.  The  routine CVEL
takes a LONG REAL value and returns a string representation like that of
CVE,  except that  "@@"  is used  to  signify LONG  when  delimiting the
exponent.   Any  of  "@",  "@@", "E",  or  "D"  are  acceptable exponent
delimiters to LREALIN and LREALSCAN.

Variables which are declared LONG REAL are represented in  KI10 hardware
format  double precision,  take two  consecutive words  of  storage, and
provide  62  bits  of precision  (approximately  18  decimal  digits) to
represent the  fraction part of  a floating-point number.   Regular REAL
variables occupy a  single word and have  27 bits (8 decimal  digits) of
precision.  The exponent range of  both REAL and LONG REAL  variables is
from -128 to 127, where 2^127 is approximately 10^38.

LONG REAL is a dominant type in arithmetic operations +-*/%^ MAX MIN and
arithmetic relationals =<> NEQ GEQ and LEQ.  If one operand is LONG REAL
then both operands will be converted to LONG REAL (if  necessary) before
performing  the  operation.   An exponentiation  involving  a  LONG REAL
raised to a positive integer constant is an exception to this rule.  The
type coercion  path is  linear:  STRING   INTEGER   REAL   LONG REAL.
Conversion from REAL to LONG  REAL is performed by assigning  the (only)
word of  the REAL  to the  most significant  word of  the LONG  REAL and
setting the second  (least significant) word of  the LONG REAL  to zero.
Conversion from LONG REAL to REAL is by UUO which rounds.

Arithmetic and assignment operations are compiled into DFAD, DFSB, DFMP,
DFDV, DMOVE,  DMOVEM instructions (note  that these instructions  do not



                                   1
Sail Addendum                                               New Features


exist on a KA-10).  The  Sail operations ASH, LSH, ROT, LAND,  LOR, EQV,
XOR  are performed  on both  words (ASHC,  LSHC, ROTC,  2 ANDs,  2 IORs,
etc.).  LOCATION of  a LONG REAL variable  gives an address E  such that
DMOVE  AC,E fetches  the appropriate  words of  memory.  When  passed by
value as an  actual parameter to a  procedure, both words are  placed on
the P stack:  PUSH P,X  PUSH P,X+1.  LONG REAL fields in record classes
are handled  much like  STRING fields,  except that  the address  in the
record field points to the first word of a 2-word block (rather  than to
the second word as in the case with STRINGs).

LONG  REAL ARRAYs  are  stored as  contiguous blocks  of  2-word values.
ARRTRAN done on two LONG REAL arrays is a transparent operation, but for
ARRYIN, ARRYOUT,  or ARRBLT  the actual word  count is  specified; think
about whether you should multiply by 2!  At runtime the array descriptor
for a LONG ARRAY has bit  12 (40,,0 bit) set in MULT(n),  the multiplier
for the last dimension (which would otherwise be =1).  Similarly, a LONG
ARRAY is allocated by setting bit 12 (40,,0) bit in the  parameter which
specifies the number of dimensions to ARMAK.

Runtime support for LEAP items with LONG REAL datums does not yet exist,
although the compiler does generate suitable code.  Runtime  support for
double precision  exponentiation is  also limited  for the  moment.  Any
exponentiation X^K where  K is a  positive integer constant  is compiled
inline using  the binary ("Russian  peasant") method, regardless  of the
type  of  X.   Other exponentiations  involving  LONG  REALs  are merely
translated into procedure calls on

        LONG REAL PROCEDURE DPOW (INTEGER EXPONENT; LONG REAL BASE);
        LONG REAL PROCEDURE DLOGS (LONG REAL EXPONENT, BASE);

depending on the  type of the  exponent.  In addition,  two compile-time
evaluatable functions have been provided:
        LONG REAL PROCEDURE B2LOG ( LONG REAL BASE );
        LONG REAL PROCEDURE B2EXP ( LONG REAL EXPONENT );

which are binary logarithm and exponentiation functions respectively.



1.2 - Declarations and Scope        


Sail declarations must occur before use.  For example, in  the following
program the argument to  PRINT is interpreted as  the K on line  2, even
though by the ALGOL60 notion of scope it should be interpreted as  the K
on line 5.










                                   2
Sail Addendum                                               New Features



        BEGIN "FOO"
        INTEGER K;      COMMENT this is line 2;
          BEGIN "RUB"
          PROCEDURE BAR; BEGIN PRINT(K) END;
          INTEGER K;    COMMENT this is line 5;
          <statements>
          END "RUB"
        END "FOO"



1.3 - Two-character Operators       


The compiler now recognizes "**" for "^", ":=" for "_", "<="  for "LEQ",
and ">=" for "GEQ".



1.4 - Requires      


REQUIRE  OVERLAPOK;   will  suppress  the   message  which   occurs  at
initialization when two programs have declared items.

REQUIRE VERIFYDATUMS; causes the compiler to generate  three additional
instructions for each DATUM reference, to make sure (dynamically, at run
time) that the type  of the item in the  DATUM construct is the  same as
the compiler expected.  This is similar to (the unimplimented effect of)
declaring all itemvars CHECKED.   It is planned that  VERIFYDATUMS will
soon be a bit in the  /A switch and that the corresponding  REQUIRE will
disappear.

REQUIRE   PROCESSES;  insures   that  MAINPR,   the  main   process,  is
initialized.  You  need not  specify this  REQUIRE if  you use  APPLY or
SPROUT, but if  the only use  of processes is  via INTSET then  you must
REQUIRE PROCESSES;.



1.5 - CASE statement       


In an explicitly numbered CASE statement the word ELSE can  appear where
a bracketed case number  is normally used.  The statement  following the
ELSE  is  a  catch-all  for any  case  number  not  mentioned, including
anything  which  would  otherwise  generate  a  CASE  index  error.  For
example,

        CASE K OF BEGIN [3] J_3; ELSE J_4; [5] J_5 END

is another way of accomplishing



                                   3
Sail Addendum                                               New Features



             IF K=3 THEN J_3
        ELSE IF K=5 THEN J_5
        ELSE J_4

A CASE statement containing an ELSE case does not generate a call to the
CSERR runtime routine, and  in addition the jump table  usually contains
only maxcase - mincase +1 words (rather than maxcase +1).

Please remember, a semicolon is a statement separator, not a terminator.
A  terminating  semicolon on  the  last numbered  case  element  will be
percieved as a seperator  for an un-numbered null statement.   Also note
that (at least for now), negative case indices are not allowed.



1.6 - Circular RECORDCLASSes       


To  define  two record  classes,  both of  which  contain RECORDPOINTER
fields refering to the other class, say

        FORWARD RECORDCLASS BAR (RECORDPOINTER (ANYCLASS) Q2);
        RECORDCLASS FOO (RECORDPOINTER (BAR) Q1);
        RECORDCLASS BAR (RECORDPOINTER (FOO) Q2);

In general, declare one class to be FORWARD and list  its RECORDPOINTER
fields as pointers to ANYCLASS.  This breaks the circularity and allows
maximum compile-time type checking.



























                                   4
Sail Addendum                                       Documentation Errors


                               SECTION  2                                 

                          Documentation Errors                           




This is a file of known SAIL manual defects (mainly typos)  that  are
not already noted in the preface or covered by the "incremental" SAIL
manual.  It is primarily an internal document for the  SAIL  hackers,
put  is  being  provided here as a stopgap measure pending a full new
edition for the manual.  This list is, however, not complete in  that
it does not include a number of typos that do not change the meaning.
If, however, you discover any defects in the manual or in the update,
please notify your friendly local SAIL representative.

99R     KVL     The synonym for "SUCH THAT" is "|" and not "'!"

32R     KVL     APPENDIX 5 has nothing to do with the
                bits for IO errors or mode enablings

43L     RHT     FILEINFO documentation is a lie.  You usually get:

                FILENAME
                EXT,,DATE
                prot(9)Mode(4)time(11)date(12)
                negative swapped word count (if did a lookup).
                0  (unless you opened device in magic mode)
                0

                The whole point is that what you get is the six words
                from the last lookup or enter.  For details see the
                monitor manual.

58R     JRL     if a designated bracketed triple is not found
                then bindit is returned and no error message is given

33L     JRL     release now takes a second defaultable value integer
                argument, the close inhibit bits (see RELEAS in UUO
                manual).  These are defaulted to zero when
                unspecified.

72R     KVL     TELLALL does not do an implicit RESCHEDULE as the
                description implies -- it just sets the status of
                the concerned processes to "ready".

102R    RFS     "33 through 36" S/B "33 through 35"

105R    RFS     ". her are several"    s/b " . There are several"

79R,L   KVL     JOBTPC should be loaded with the location of a CALL
                to a non-simple procedure.

92R     JRL     20F will in future surround macro expansions with


                                   5
Sail Addendum                                       Documentation Errors


                "<>" not "'+',".

38R     RHT     The description of INCHWL is wrong.  Actually, the
                activation character is never included in the string
                and is always put into '9SKIP'9.  (<crlf> puts a <cr>
                into '9SKIP'9 & throws away the <lf>).

24L     RHT     The compiler will not in fact turn division by a
                power of two into an ASH.


37
90L     REG     "... See section 19 about these [compilation errors]"
                should be section 20.

90L     REG     19.1.3 "boundary" is misspelled.

41R     RHT     CVSIX left-justifies the sixbit value it builds.

43L     RHT     In POINT, it is "a PDP-10 byte pointer".

45R     RHT     FORC syntax should be "FORC <identifier> _ ... "

57R     RHT     " ... methods of searching the associative store ..."
                had "store" missing before.

105L    RHT     "omaname" should be "the symbolic name"

110L    RHT     added reference:
                Harvey, Brian  "Monitor Command Manual" SAILON 54.3
                (Dec 1973)
                Also, there is a more current SOS manual: SAILON 50.3

76L     RHT     Should be "REF'9ITEM(VALUE <expression>)"

43L     RFS     For FILEINFO, also should have a note to export users
                like "FILEINFO fills the array with the results of
                the last LOOKUP or ENTER (DEC 10-50 systems).
                Consult your local monitor manual for the format of
                these entries."

28L     JRL     CALLING PROCEDURES FROM INSIDE CODE BLOCKS
                "... procedure is typed, it will return is value in
                AC 1 (a pointer to the second word if the procedure
                is a string procedure)." should be " procedure is
                typed and not a string procedure it will return
                its value in AC 1. String procedures push the two
                word string descriptor corresponding to the result
                on the SP stack."

23L     RHT     The table of precedence for  '$ & '8 is misleading.
                '$ has higher precedence than '8.




                                   6
Sail Addendum                                       Documentation Errors


26R     JRL     ARRYIN. No indication of how many words were actually
                read is given if EOF is encountered while reading a
                file in DUMP mode.

25L     RHT     The description of the MEMORY[x,<type>] construct is
                very misleading.  There is no restriction on the use
                of this construct as the left hand side of an
                assignment statement.  In fact, MEMORY[x,<type>] may
                be used anywhere a simple variable of type <type> may
                be used.

92R     JFR     The compiler is initialized with /7F.

99L     JFR     In Appendix 3, the entry "STRBRK" should be "STDBRK".

38








































                                   7
  