begin "interp"
require "(sailib)assert.sai" source!file;
require "{}{}" delimiters;
external integer !skip!;
define	crlf={('15&'12)}, tab={('11&null)}, crlftab={('15&'12&'11)},
	ascii!quote={('42&null)}, ff={('14&null)}, suai!underscore='30;

define eif={else if};
let r!p=record!pointer;
let easy=simple;
easy integer procedure fastcomp(string a, b);
if length(a) neq length(b) then return(length(a)-length(b))
 else begin	integer ca,cb;
	while length(a) 
	   do if (ca_lop(a)) neq (cb_lop(b)) then return(ca-cb);
	return(0);
      end;

easy integer procedure slowcomp(string a, b);
begin	integer l,ca,cb;
for l_(length(a) min length(b))-1 step -1 until 0
   do if (ca_lop(a)) neq (cb_lop(b)) then return(ca-cb);
return(length(a)-length(b));
end;


define sless={0 < slowcomp};
integer semi!break,line!break,skip!white,stop!white;

simple procedure setup!breaks;
begin
setbreak(semi!break_getbreak, ";", null, "INA");
setbreak(line!break_getbreak, '12&'14&suai!underscore, '15, "INSK");
setbreak(skip!white_getbreak, '11&'12&'13&'14&'15&'40, null, "XNR");
setbreak(stop!white_getbreak, "]"&'11&'12&'13&'14&'15&'40, null, "INR");
end;
require setup!breaks initialization;
integer inch,file!brk,eof;
easy procedure get!foo2;
begin
open(inch,"DSK",'10000, 4,0, 200,file!brk,eof);
assert(not eof,DSK gone);
while true
  do  begin	string source;
	print(" Runtimes file (<CR> for FOO2.): ");
	if length(source_inchwl)=0 then source_"FOO2.";
	lookup(inch,source,eof);
	if eof then print(" Error, retry--") else done;
      end;

end;


easy string procedure readline;
begin
	string result;
while true
   do begin
	result_ input(inch,line!break);
	while file!brk=suai!underscore
	   do result_ result & "!" & input(inch,line!break);
	scan(result,skip!white,file!brk);
	if file!brk="M" and equ(result[1 for 6], "MUMBLE")
	 then begin
		scan(result,semi!break,file!brk);
		while not eof and file!brk neq ";"
			do result_ input(inch,semi!break);
		assert(not eof,MUMBLEd right off the end of the file);
	      end
	 else done;
      end;
if result="<" then print(crlf,result);
return( result );
end;

easy string procedure gtoken( reference string s );
begin	integer lasbrk;
scan( s, skip!white, lasbrk );
if lasbrk="]" then return(lop(s));
return( scan(s, stop!white, !skip!) );
end;
string array tokes[0:50]; integer array tokev[0:50]; integer tm;
integer truedepth, falsedepth;

procedure nest!boolean( boolean val );
if val
 then begin	assert(falsedepth=0,stacking true on false);
	truedepth_ truedepth+1;
      end
 else falsedepth_ falsedepth+1;

boolean procedure unnest!boolean;
if falsedepth then return( 0=(falsedepth_falsedepth-1) )
 else begin	assert( truedepth>0 );
	truedepth_ truedepth - 1;
	return(true);
      end;

procedure set(string con; boolean val);
begin	integer ind;
for ind_ tm step -1 until 0 
   do if equ(tokes[ind],con)
	then begin
		print( if tokev[ind]=val 
			then " [Redundant" else "[CONFLICT, re-setting",
			" switch ", con, " set ", 
			if val then "ON]" else "OFF]" );
		tokev[ind]_ val;
		return;
	     end;
tokes[tm_tm+1]_ con; tokev[tm]_ val;
end;

boolean procedure truth(string con);
begin	integer ind;
for ind_ tm step -1 until 0 do if equ(tokes[ind],con) then done;
assert( ind > -1, only switches have truth values );
return(tokev[ind]);
end;
record!class arg (string name, type, types; integer valref,dflts;
			r!p (arg) l);

r!p (arg) procedure new!arg( string str );
begin	r!p (arg) al;
	string type, name, types, refval;
al_ new!record(arg);
arg:type[al]_ gtoken(str);
arg:name[al]_ gtoken(str);
if "$"=types_gtoken(str)
 then begin
	arg:dflts [al]_ true;
	assert( equ(types,"$") );
	types_ gtoken(str);
      end;
refval_ gtoken(str);
arg:types  [al]_ types;
assert( length(gtoken(str))=0 );
arg:valref[al]_ if equ(refval,"VALUE") then 0
		eif equ(refval,"REFRNC") then 1
		eif equ(refval,"REFRNC+SBSCRP") then 2
		else cvsix(refval);
assert( 0 leq arg:valref[al] leq 2 );
assert(
 (length(refval)<7 and equ(arg:type[al][1 to 3], refval[1 to 3]))
 or(equ(refval,"REFRNC+SBSCRP") and equ(arg:type[al][1 for 3],"ARR")));
assert( arg:name[al]="(" and arg:name[al][inf for 1]=")" );
COMMENT associate( arg:type [al], types );
return(al);
end;


string procedure argline( r!p (arg) a );
begin	string rslt;
rslt_ arg:name[a] [2 to inf-1];
if equ(arg:types[a],"STRING")
 then rslt_ ascii!quote & rslt & ascii!quote
eif equ(arg:types[a],"ITMVAR")		then rslt_ "Itemvar " & rslt
eif equ(arg:types[a],"FLOTNG")		then rslt_ "Real " & rslt
eif equ(arg:types[a],"SET")		then rslt_ "Set " & rslt
eif equ(arg:types[a],"SET+LSTBIT")
 or equ(arg:types[a],"LSTBIT+SET")	then rslt_ "List " & rslt
eif equ(arg:types[a],"DBLPRC+FLOTNG")
 or equ(arg:types[a],"FLOTNG+DBLPRC")	then rslt_ "LongReal " & rslt
 else if not equ(arg:types[a],"INTEGR")
	 then rslt_ arg:types[a] & " " & rslt;
case arg:valref[a] of
 begin
 [1] rslt_ "@" & rslt;
 [2] rslt_ "@ARRAY " & rslt;
 ELSE rslt_"`" & cv6str(arg:valref[a]) & "'" & rslt;
 [0]	Comment VALUE -- nothing;
 end;
if arg:dflts [a] then rslt_ rslt & " (Nil)";
return( rslt );
end;
record!class runtime (string nam,t,m; integer na, nvs, bailFileBit;
	r!p(arg) argl; r!p(runtime) left, right );

	easy string procedure procedure!type!string(string type!name);
	 return( if equ(type!name,"UNTYPE") then tab & "  "
		eif equ(type!name,"STRING") then """String""_ "
		eif equ(type!name,"FLOTNG") then "Real" & tab & "_ "
		eif equ(type!name,"INTEGR") then "Integer" & tab & "_ "
		eif equ(type!name,"ITMVAR") then "Itemvar" & tab & "_ "
		eif equ(type!name,"FLOTNG+DBLPRC")
		 or equ(type!name,"DBLPRC+FLOTNG") then "LongReal_ "
		eif equ(type!name,"PNTVAR") then "Record!pointer_"
		else "`" & type!name & "'" & tab & "_ " );

integer FunctionsToPrint;

procedure print!runtime( r!p(runtime) tp );
begin	own r!p (arg) chaser; integer nargs; string s;
if 0 = FunctionsToPrint land runtime:bailFileBit[tp] then return;
print(crlf, procedure!type!string(runtime:t[tp]), runtime:nam[tp] ); 
nargs_ abs( runtime:na[tp] );
if chaser_ runtime:argl[tp]
 then begin	string argstr, punct; integer lpos;
	punct_ "( ";
	lpos_ 70 - length(runtime:nam[tp]);
	  do  begin
		argstr_ argline(chaser);
		if 0 > lpos_ lpos - 2 - length( argstr )
		 then begin 
			print( punct[1 for 1],
				crlftab & "    ", argstr );
			lpos_62 - length(argstr);
		      end
		 else print( punct, argstr );
		punct_ ", ";
		nargs_ nargs - 1;
	      end
	 until not chaser_arg:l[chaser];
	print( " );" );
      end
 else print(";");
assert(nargs=0);
end;
r!p (arg) ahead;
r!p (runtime) tree;
integer numf;

r!p (runtime) procedure new!runtime(
	string name, shortType, fullType;
	integer valueStrings, bailGroup, numargs );
begin	r!p (runtime) nf,chase;
nf_new!record(runtime);
runtime:nam[nf]_ name;
runtime:t[nf]_ shortType;
runtime:m[nf]_ fullType;
runtime:na[nf]_ numargs;
runtime:nvs[nf]_ valueStrings;	assert(valueStrings leq abs(numargs));
runtime:BailFileBit[nf]_ 1 lsh bailGroup;
assert( 0 leq bailGroup leq 5 );
numf_numf+1;
if null!record=(chase_tree)
 then tree_nf
 else while true do
	if sless(runtime:nam[chase],name)
	 then if runtime:left[chase]
		then chase_ runtime:left[chase]
		else begin runtime:left[chase]_ nf; done; end
	 else begin	
		if equ(runtime:nam[chase],name)
		 then print(crlf,"[WARNING: ", name," defined twice.]");
		if runtime:right[chase]
		then chase_ runtime:right[chase]
		else begin runtime:right[chase]_ nf; done; end;
	      end;
return(nf);
end;


easy procedure inoprt( r!p (runtime) towalk );
while towalk
   do begin
	require "  Ignore two pointer Temp errors <<" message;
	inoprt(runtime:left[towalk]);
	print!runtime(towalk);
	require " >> done  " message;
	towalk_ runtime:right[towalk];
      end;
begin "read foo2"
	boolean using;
	string s, token;

ahead_ new!record(arg);
tree_ null!record; numf_0;
truedepth_falsedepth_0; tm_-1; using_true; 
get!foo2;
do s_readline until eof or equ(s[1 to 18],"<TRUECONDITIONALS>");
assert(not eof, There must be some true conditionals);
  do  begin "trues"
	s_ readline;
	while length(token_gtoken(s)) and token neq "]"
	   do if equ(token[1 for 5],"FALSE")
		 then done "trues" else set(token,true);
      end "trues"
 until eof or token = "]";
assert({equ(token,"FALSECONDITIONALS[")});
  do  begin
	while length(token_gtoken(s)) and token neq "]" 
		do set(token,false);
	while not eof and length(s)=0 do s_ readline;
      end until token="]";
  begin "verification"	integer ind;
    for ind_ tm step -1 until 0 
	do if equ(tokes[ind],"TYMSHARE") then done;
    if ind < 0
	then begin set("TYMSHARE",true); set("NOTYMSHARE",false); end;
    for ind_ tm step -1 until 0 
	do begin string switch,complement;
	    switch_ tokes[ind];
	    complement_ if equ(switch[1 for 2],"NO")
			 then switch[3 to inf] else "NO"&switch;
	    if truth(complement)=truth(switch)
	     then print("[SWITCH CONFLICT: ",switch,"=",complement,"]");
	   end;
  end "verification";
do s_readline until eof or equ(s[1 for 11],"<FUNCTIONS>");
assert(not eof, There must be some runtimes);
while not eof
 do if length(s_readline)
 then if s="<" then done
	eif s = "]" then begin print("]"); using_ unnest!boolean; end
	eif s[inf for 1] = "["
	 then begin	boolean switch;
		print(" ", s, if switch_truth(s[1 to inf-1])
				 then "TRUE:" else "FALSE:");
		nest!boolean(using); using_using and switch;
	      end
	eif using
	 then begin "true runtime"
			string scopy, fname, ftype, fmodif, n0,n1,n2;
			r!p (runtime) ident; r!p (arg) at;
			integer args;
		scopy_ s;
		fname_ gtoken(s); ftype_gtoken(s); fmodif_gtoken(s);
		n0_ gtoken(s); n1_ gtoken(s); n2_gtoken(s);
		assert(length(n2) and length(gtoken(s))=0, Six fields);
		assert( 1=length(n1)=length(n2), one-digit numbers );
		if n0="X"
		 then args_-cvd(n0[2 to inf])
		 else args_ cvd(n0);
		assert( equ( n0,
		    (if args<0 then"X" else null)&cvs(abs(args)) ) );
		ident_ new!runtime( fname,ftype,fmodif,
				n1-"0",n2-"0", args );
		at_ahead;
		for args_ abs(args)-1 step -1 until 0
		   do begin
			arg:l[at]_ new!arg(readline);
			at_arg:l[at];
		      end;
		runtime:argl[ident] swap arg:l[ahead];
		assert( not eof, Not in mid-runtime anyway );
	      end "true runtime";
print( crlf, "total: ", numf, " runtimes." ); 
release(inch);
end "read foo2";
begin "output phase"
  easy string procedure MaskName( integer mask );
  begin	integer i;
  PRESET!WITH	"`INVISIBLE'",		"Desk Calculator",
  		"Major I/O and String",	"Minor I/O and String",
  		"Miscellaneous",	"Processes and Interrupts",
		"Software Error";
	own safe string array MaskName[0:6];
  for i_ 0 step 1 while mask_ mask lsh -1 do;
  return( MaskName[i min 6] );
  end;
	string file, mode, punct; integer mask;

mode_ "T"; file_null;
while true
   do begin "one pass"
	print(crlf, "BAIL group: " );
	if 0 = FunctionsToPrint_ cvo(inchwl)
	 then begin
		print( crlf, "Special effects or functions to print:
-2: (stop)
-1: (switch output files)" );
		mask_ 1;
		do print(crlf, cvos(mask), ": ", MaskName(mask) )
		 until '100 land (mask_ mask lsh 1);
		continue "one pass";
	      end
	 eif FunctionsToPrint=-1
	 then begin
		setprint(null,"T");
		print( crlf, "Output to file: " );
		mode_ if length(file_inchwl) then "F" else "T";
		continue "one pass";
	      end
	eif FunctionsToPrint=-2 then done "one pass"
	eif FunctionsToPrint land (-1 lsh 6)
	 then begin print(" try `?'"); continue "one pass"; end;
	setprint( file, mode );
	punct_ "["; mask_ 1 lsh 6;
	print(crlf, " Functions: " );
	if FunctionsToPrint='77 then print("[ALL RUNTIMES")
	 else while mask_ mask lsh -1
	   do if mask land FunctionsToPrint
		 then begin
			print(punct, MaskName(mask)); punct_", ";
		      end;
	print( "]" & crlf );
	inoprt(tree);
	if mode neq "T"
	 then begin print( crlf & ff & crlf ); setprint(file,"O"); end;
      end "one pass";
end "output phase";
end "interp";
