external integer !SKIP!;
define !FRMOP = ('044 lsh 27);
define SILENT = {true};

preload!with
"?NOH: no handle in slot",
"?BDI: unmatching universal id number",
"?NRT: no rights to do operation",
"?BDF: bad frame number",
"?NLC: not enough license",
"?UND: undefined frame descriptor type",
"?NCH: fd said child but gave non-child frame number.",
"?CLP: can't lock context pages (fd2upx)",
"?BAR: bad access rights code",
"?NPR: orphan asked for its parent",
"?BFD: bad family dispatch type",
"?BDH: bad handle index number in fd",
"?BFN: bad function code to frmop",
"?ADB: address found bad (replicate failed) in .fo?va",
"?IOE: page i/o error in frmrvm/frmwvm",
"?ALR: attempt to start a running frame",
"?ALH: attempt to halt non-running frame",
"?CSJ: attempt to halt frame with jacct on",
"?FHE: handle descriptor expected, not given",
"?FHU: handle (index already) used",
"?NFH: no handle indices left.",
"?BCN: bad count",
"?BTN: bad table number",
"?BHT: bad handle type",
"?CCH: can't create handle (access failure)",
"?BSV: bad start vector offset",
null; string array FRMOP!err[1:64];

simple integer procedure Frmopr(integer FD;
	reference integer ARG;  integer FN; boolean !SILENT!(false));
begin
    own integer ERR;
    start!code
	MOVE 1,FD;
	HRL 1,FN;
	SETOM !SKIP!;
	!FRMOP 1,ARG;
	  SETZM !SKIP!;
	MOVEM 1,ERR;
    end;
    if not (!SKIP! or !SILENT!) then print (
	"?FRMOP '",cvos(FN),
	" for FD='",cvos(FD),
	", ARG='",cvos(ARG),
	", ERR='",cvos(ERR),
	crlf, Frmop!Err[ERR], crlf);
    return(ERR);
end;	
 
simple integer procedure FrmopI(integer FD,ARG,FN,S(false));
return(Frmopr(FD,memory[ARG],FN,S));

simple integer procedure Frmop(integer FD,ARG,FN,S(false));
return(Frmopr(FD,ARG,FN,S));

simple integer procedure GetTab(integer I,T);
begin
    own integer VAL;
    start!code
	MOVE 1,T;
	HRL 1,I;
	SETOM !SKIP!;
	CALLI 1,'41;
	  SETZM !SKIP!;
	MOVEM 1,VAL;
    end;
    return(VAL);
end;

simple integer procedure CreFrm;
begin "CREATE"
	integer array A[0:4];
	A[0] _ gettab(-1,2);		! JBTPPN;
	A[1] _ gettab(-1,6);		! JBTPRV;
	A[2] _ gettab(-1,-'23); 	! AUN;
	A[3] _ gettab(-1,-'22); 	! UN1;
	A[4] _ gettab(-1,-'21); 	! UN2;
	return (Frmopr(0,A[0],1));
end "CREATE";

simple procedure RunFrm(
	integer FD;
	string Arg;
	integer SI(0));
begin "RUN"
	integer array AC[0:'17];
	label AC!data,ST;
	calli (FD,-'126);			! SetOTF;
	calli (hl('206001),-'67);		! give it 1 page;
	if false then quick!code
	    AC!data:
		0;0;0;0;0;0;0;0;		! [0:7];
		0;				! [10];
	    ST: CALLI -'125;			! CONT uuo;
		  JFCL;				! (no JL);
		CALLI '10,'35;			! RUN uuo;
		JRST 4,'13;			! HALT;
	    end;
	arrblt(AC[0],memory[location(AC!data)],'20);
	AC[0] _ cvsix("DSK");
	AC[1] _ cvfil(Arg,AC[2],AC[4]);
	if AC[4]=0 then AC[4] _ gettab(-1,2);
	if (lh(AC[4])=0) then begin
	    AC['6] _ memory[AC[4]];
	    AC['7] _ memory[AC[4]+1];
	    AC[4] _ '6;
	    end;
	AC['10] _ AC['10] lor hl(SI);
	for I _ 0 step 1 until '17 do begin
	    integer array A[0:1];
	    A[0] _ I; A[1] _ AC[I];
	    Frmopr(FD,A[0],3);
	    end;
	Frmop(FD,hl(-1) lor (location(ST)-location(AC!data)),4);
end "RUN";

