begin
require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(WRS)ARGS.REQ" source!file;
!get!module(APPEND);
redefine calli!HIBER='72;
require '1 version;

string item LOGFILE;
string item COMMANDS;
item HOLD;
integer item INTERVAL.MINS;
string item LOGIN;
integer item TIMEOUT.SECS;
item TRACE;

integer logChan;
string Cmds;

integer brkNoLf;
simple procedure brkIni;
begin
    setbreak( brkNoLf_getbreak, null, #lf, "SIN" );
end;
require brkIni initialization[0];

string procedure Read.COMMANDS( string FN );
begin
    string S;
    if FN = "@" then begin
	integer C,B,E;
	lop(FN);
	open( C_getchan,"DSK",0,4,0, 256,B,E );
	lookup( C, FN, E );
	if E then usererr(E,2,"?unable to read control file """&FN&""": ","X");
	while not E do
	    S := S& input( C, brkNoLf );
	release( C );
    end else begin
	S := null;
	while length(FN) do begin
	    integer C;
	    case C := lop(FN) of begin
		["^"] S := S& (lop(FN) land '37);
		["~"] S := S& " ";
		[else] S := S& C
	    end;
	end;
	S := S& #cr;
    end;
    return( S );
end;

procedure GetData;
begin
    string S;
    while auxPort geq 0 do
	case auxRead( S, datum(TIMEOUT.SECS) ) of begin
	    [aux!line] if S neq ">" and length(S) > 2 then
		cprint( logChan, S );
	    [aux!prompt] return;
	    [aux!timeout] begin
		cprint( logChan, "?TIMEOUT"& crlf );
		auxZap;
		auxPort := -1;
	    end;
	    [aux!zap] begin
		cprint( logChan, "?ZAPPED"& crlf );
		auxZap;
		auxPort := -1;
	    end
	end;
end;

datum(TIMEOUT.SECS) := 10;
ArgParse( LOGFILE, COMMANDS,
    {HOLD,INTERVAL.MINS,LOGIN,TIMEOUT.SECS,TRACE}, Args );
if not props(COMMANDS) then
    usererr(0,0,"?no commands or command file specified","X");
if not props(LOGIN) then
    usererr(0,0,"?no login string specified","X");
if props(TRACE) then auxTrace := true;
Cmds := Read.COMMANDS( datum(COMMANDS) );

auxPort := -1;
do begin "MainLoop"
    label xrayNext;
    if props(LOGFILE) then begin
	own integer E;
	open( logChan_getchan,"DSK",0,0,4, 0,0,E );
	append( logChan, datum(LOGFILE), E );
	if E then usererr(E,2,"?unable to append log file """&
	    datum(LOGFILE)&""": ","X");
    end
    else logChan := -1;
    if auxPort < 0 then begin
	Creaux( datum(LOGIN) );
	if not !SKIP! then begin
	    cprint( logChan, "%CREAUX failed to """,datum(LOGIN),""""&crlf );
	    goto xrayNext;
	end;
    end;
    auxOut( Cmds );
    GetData;
xrayNext:
    if not props(HOLD) then begin
	auxZap;
	auxPort := -1;
    end;
    if props(LOGFILE) then release( logChan );
    if props(INTERVAL.MINS) then
	calli( !xwd(2,datum(INTERVAL.MINS)), calli!HIBER );
end "MainLoop" until not props(INTERVAL.MINS);

end $
