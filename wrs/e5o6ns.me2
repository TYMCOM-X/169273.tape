
procedure EDIT.ACCOUNT
begin

fields
  I as '5N',
  TTYLINE as '192C',
  TCOM as '16C',
  TARG as '192C',
  FNAM as '64C',
  FVAL as '64C'
                
source TTY from terminal fixed form input TTYLINE

relation SEL is
  key ACCT.CODE

procedure SCANTOKEN (SRC,TOK,REM)
begin
  move position(SRC,' ') to I
  if I=0 then move length(SRC) to I
  move upper.case(substr(SRC,1,I-1)) to TOK
  move substr(SRC,I+1) to REM
end

type 'type "?" for help',@cr
TTYNEXT: begin type '>' for each TTY begin %TTYNEXT%
  apply SCANTOKEN (TTYLINE,TCOM,TARG)
  conditional on TCOM begin
    'F' or 'FI' or 'FIN' or 'FIND': begin 
      for each ACCOUNT 
        select SEL via key
          then nothing
          else insert into SEL
      while length(TARG)>0 do FINDLOOP: begin
	type '.'
        apply SCANTOKEN (TARG,FNAM,TARG)
        apply SCANTOKEN (TARG,FVAL,TARG)
        conditional on FNAM begin
          'ALL': nothing
          'ACCT.CODE': begin
	    if FVAL is not ACCT.CODE then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as ACCT.CODE to ACCT.CODE
	    delete from SEL where (ACCT.CODE # ACCT.CODE of EDIT.ACCOUNT)
	  end
          'ACCT.NAME': begin
	    if FVAL is not ACCT.NAME then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as ACCT.NAME to ACCT.NAME
	    for each ACCOUNT where (ACCT.NAME # ACCT.NAME of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'REMARKS': begin
	    if FVAL is not REMARKS then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as REMARKS to REMARKS
	    for each ACCOUNT where (REMARKS # REMARKS of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'BANK.NAME': begin
	    if FVAL is not BANK.NAME then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as BANK.NAME to BANK.NAME
	    for each ACCOUNT where (BANK.NAME # BANK.NAME of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'BANK.BRANCH': begin
	    if FVAL is not BANK.BRANCH then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as BANK.BRANCH to BANK.BRANCH
	    for each ACCOUNT where (BANK.BRANCH # BANK.BRANCH of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'BANK.ADDR': begin
	    if FVAL is not BANK.ADDR then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as BANK.ADDR to BANK.ADDR
	    for each ACCOUNT where (BANK.ADDR # BANK.ADDR of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'ACCT.NO': begin
	    if FVAL is not ACCT.NO then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as ACCT.NO to ACCT.NO
	    for each ACCOUNT where (ACCT.NO # ACCT.NO of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'CREDIT.LINE': begin
	    if FVAL is not CREDIT.LINE then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as CREDIT.LINE to CREDIT.LINE
	    for each ACCOUNT where (CREDIT.LINE # CREDIT.LINE of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'DATE.OPENED': begin
	    if FVAL is not DATE.OPENED then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as DATE.OPENED to DATE.OPENED
	    for each ACCOUNT where (DATE.OPENED # DATE.OPENED of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'DATE.CLOSED': begin
	    if FVAL is not DATE.CLOSED then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as DATE.CLOSED to DATE.CLOSED
	    for each ACCOUNT where (DATE.CLOSED # DATE.CLOSED of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'ANUAL.RATE': begin
	    if FVAL is not ANUAL.RATE then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as ANUAL.RATE to ANUAL.RATE
	    for each ACCOUNT where (ANUAL.RATE # ANUAL.RATE of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'PAYMENT': begin
	    if FVAL is not PAYMENT then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as PAYMENT to PAYMENT
	    for each ACCOUNT where (PAYMENT # PAYMENT of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
          'TERM': begin
	    if FVAL is not TERM then begin
	      type @cr,'?illegal value for ',FNAM,': ',trim(FVAL),@cr
	      repeat FINDLOOP
	    end
	    move FVAL as TERM to TERM
	    for each ACCOUNT where (TERM # TERM of EDIT.ACCOUNT)
	      delete from SEL via key
	  end
        end
        else type '?<field-name> or ALL expected: ',trim(FNAM),@cr
      end 
      type count(SEL),' records selected.',@cr 
    end
    'P' or 'PR' or 'PRI' or 'PRIN' or 'PRINT': Pcmd: for each SEL select ACCOUNT via key
    then begin
      move TARG to FVAL
      while length(FVAL)>0 do begin
        apply SCANTOKEN (FVAL,FNAM,FVAL)
        conditional on FNAM begin
          'ALL': type 
            ACCT.CODE,' ',
            ACCT.NAME,' ',
            REMARKS,' ',
            BANK.NAME,' ',
            BANK.BRANCH,' ',
            BANK.ADDR,' ',
            ACCT.NO,' ',
            CREDIT.LINE,' ',
            DATE.OPENED,' ',
            DATE.CLOSED,' ',
            ANUAL.RATE,' ',
            PAYMENT,' ',
            TERM
          'KEY' or 'KEYS': type 
            ACCT.CODE
          'ACCT.CODE': type ACCT.CODE
          'ACCT.NAME': type ACCT.NAME
          'REMARKS': type REMARKS
          'BANK.NAME': type BANK.NAME
          'BANK.BRANCH': type BANK.BRANCH
          'BANK.ADDR': type BANK.ADDR
          'ACCT.NO': type ACCT.NO
          'CREDIT.LINE': type CREDIT.LINE
          'DATE.OPENED': type DATE.OPENED
          'DATE.CLOSED': type DATE.CLOSED
          'ANUAL.RATE': type ANUAL.RATE
          'PAYMENT': type PAYMENT
          'TERM': type TERM
        end
        else begin
          type '?<field-name>, KEY or ALL expected: ',trim(FNAM),@cr
          finish Pcmd
        end
        if length(FVAL)>0 then type ' ' else type @cr
      end 
    end
    else type '?missing instance',@cr
    'L' or 'LI' or 'LIS' or 'LIST': Lcmd: for each SEL select ACCOUNT via key
    then begin
      move TARG to FVAL
      while length(FVAL)>0 do begin
        apply SCANTOKEN (FVAL,FNAM,FVAL)
        conditional on FNAM begin
          'ALL': type 
            'ACCT.CODE ',@tab to 24,ACCT.CODE,@cr,
            'ACCT.NAME ',@tab to 24,ACCT.NAME,@cr,
            'REMARKS ',@tab to 24,REMARKS,@cr,
            'BANK.NAME ',@tab to 24,BANK.NAME,@cr,
            'BANK.BRANCH ',@tab to 24,BANK.BRANCH,@cr,
            'BANK.ADDR ',@tab to 24,BANK.ADDR,@cr,
            'ACCT.NO ',@tab to 24,ACCT.NO,@cr,
            'CREDIT.LINE ',@tab to 24,CREDIT.LINE,@cr,
            'DATE.OPENED ',@tab to 24,DATE.OPENED,@cr,
            'DATE.CLOSED ',@tab to 24,DATE.CLOSED,@cr,
            'ANUAL.RATE ',@tab to 24,ANUAL.RATE,@cr,
            'PAYMENT ',@tab to 24,PAYMENT,@cr,
            'TERM ',@tab to 24,TERM,@cr
          'KEY' or 'KEYS': type 
            'ACCT.CODE ',@tab to 24,ACCT.CODE,@cr
          'ACCT.CODE': type 'ACCT.CODE ',@tab to 24,ACCT.CODE,@cr
          'ACCT.NAME': type 'ACCT.NAME ',@tab to 24,ACCT.NAME,@cr
          'REMARKS': type 'REMARKS ',@tab to 24,REMARKS,@cr
          'BANK.NAME': type 'BANK.NAME ',@tab to 24,BANK.NAME,@cr
          'BANK.BRANCH': type 'BANK.BRANCH ',@tab to 24,BANK.BRANCH,@cr
          'BANK.ADDR': type 'BANK.ADDR ',@tab to 24,BANK.ADDR,@cr
          'ACCT.NO': type 'ACCT.NO ',@tab to 24,ACCT.NO,@cr
          'CREDIT.LINE': type 'CREDIT.LINE ',@tab to 24,CREDIT.LINE,@cr
          'DATE.OPENED': type 'DATE.OPENED ',@tab to 24,DATE.OPENED,@cr
          'DATE.CLOSED': type 'DATE.CLOSED ',@tab to 24,DATE.CLOSED,@cr
          'ANUAL.RATE': type 'ANUAL.RATE ',@tab to 24,ANUAL.RATE,@cr
          'PAYMENT': type 'PAYMENT ',@tab to 24,PAYMENT,@cr
          'TERM': type 'TERM ',@tab to 24,TERM,@cr
        end
        else begin
          type '?<field-name>, KEY or ALL expected: ',trim(FNAM),@cr
          finish Lcmd
        end
        if length(FVAL)=0 then type @cr
      end 
    end
    else type '?missing instance',@cr
    'N' or 'NA' or 'NAM' or 'NAME' or 'NAMES': type
        'fileds names are',@cr,
        '  ACCT.CODE -key',@cr,
        '  ACCT.NAME',@cr,
        '  REMARKS',@cr,
        '  BANK.NAME',@cr,
        '  BANK.BRANCH',@cr,
        '  BANK.ADDR',@cr,
        '  ACCT.NO',@cr,
        '  CREDIT.LINE',@cr,
        '  DATE.OPENED',@cr,
        '  DATE.CLOSED',@cr,
        '  ANUAL.RATE',@cr,
        '  PAYMENT',@cr,
        '  TERM',@cr
    '?' or 'H' or 'HE' or 'HEL' or 'HELP': type 
        'enter one of',@cr,
        '  FIND ALL             - select all instances',@cr,
        '  FIND f1 v1 f2 v2 ... - select instances where field=val',@cr,
        '  PRINT ALL            - print all fields for',@cr,
        '  PRINT KEY            - print key fields for',@cr,
        '  PRINT f1 f2 f3 ...   - print named fields',@cr,
        '  LIST ALL             - list all fields',@cr,
        '  LIST KEY             - list key fields',@cr,
        '  LIST f1 f2 f3 ...    - list named fields',@cr,
        '  NAMES                - list names of fields',@cr,
        '  QUIT',@cr,
        '  HELP',@cr,
        '  ?',@cr
    'Q' or 'QUIT': finish TTYNEXT
  end
  else type '?command not recognized: ',TCOM,@cr
  type '>'
end end %TTYNEXT%

end %EDIT.ACCOUNT%
  