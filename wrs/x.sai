begin
require "(SAILIB)SAIL.DEF" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require "auxlib.req" source!file;
require "args.req" source!file;

preload!with
	96,224,32,160,16,144,80,208,112,240,48,176,0,128,64,192,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	96,224,32,160,16,144,80,208,112,240,48,176,0,128,64,192;
integer array BankTab["A":"p"];

define	octet( X ) = {
    char!w(X,8) };
define	sync = {
    octet(-1)& octet(-1)& octet(-1)& octet(-1)& 
    octet(-1)& octet(-1)& octet(-1)& octet(-1)& 
    octet(-1)& octet(-1)& octet(-1)& octet(-1)& 
    octet(-1)& octet(-1)& octet(-1)& octet(-1) };

string procedure cksum( string S );
begin
    integer X;    X := 0;
    while length(S) do X := X + lop(S);
    return( octet(X) );
end;

boolean procedure x10sync( integer TIMEOUT(20) );
begin
    integer I;
    for I := 1 upto 7 do begin
	integer O;
	O := auxin( TIMEOUT );
	if O neq (if I=7 then '001 else '377) then begin
	    print( "?bad response: octet ", I, " = ", cvos(I), crlf );
	    return( false );
	end;
    end;
    return( true );
end;

preload!with
    " ??? "," Jan "," Feb "," Mar "," Apr "," May ",
    " Jun "," Jul "," Aug "," Sep "," Oct "," Nov "," Dec ";
string array MONTH[0:12];

simple string procedure cvDate( integer DECD );
begin
    integer Y,M,D;
    D := DECD mod 31 + 1;
    M := DECD % 31 mod 12 + 1;
    Y := DECD % (31*12) + 64;
    if DECD < 0 or Y > 94
	then return( "?? ??? ??" );
    return( cvs(D) & MONTH[M] & cvs(Y) );
end;

simple string procedure cvTime( integer SECS );
begin
    integer A,B;
    string S;
    getformat( A,B );
    S := cvs( SECS % 3600 ) &  ":";
    setformat(-2,0);
    S := S & cvs( SECS % 60 mod 60 ) & ":" &
        cvs( SECS mod 60 );
    setformat( A,B );
    return( S );
end;

simple string procedure cvZone( integer Z,D(0),T(0) );
begin
    own safe integer array X[0:2];
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( Z, Z land '37 );
    calli( location(X[0]), calli!DATUUO );
    return( if X[1] neq T
	then case Z land '37 of (	! daylight time;
	    ['06] "HDT", ['10] "PDT", ['11] "MDT", ['12] "CDT",
	    ['13] "EDT", ['14] "ADT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] & "+" )
	else case Z land '37 of (	! standard time;
	    ['06] "HST", ['10] "PST", ['11] "MST", ['12] "CST",
	    ['13] "EST", ['14] "AST", ['20] "UT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] )   );
end;

internal string procedure maiDate;
!
    Date:
	Return current local date and time in form
		WWW, DD MMM YY HH:MM:SS ZZZ
	as recommended in RFC #822.
;
begin
    integer D;			! date - days past 1 Jan 1964, UT;
    integer T;			! time - tics past midnight UT;
    integer Z;			! zone - user local time zone w/daylight flag;
    string DOW;			! day of week (local);
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT       = '20;	! monitor's offset for UT;
    do begin
	D := calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
	T := calli( !xwd( !cnTIM, !gtCNF ), calli!GETTAB );
    end until D = calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
    Z := (calli(!xwd(-1,!gtPRV),calli!GETTAB) lsh (7-35)) land '77;
    if Z = 0 then Z := UT;	! default to Universal Time;
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( DaysPast+UT, DaysPast+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to local time;
    DOW := case X[0] mod 7 of ("Wed","Thu","Fri","Sat","Sun","Mon","Tue");
    X[2] := !xwd( DaysPast+Z, DecForm+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to DEC format;
    return(
	DOW& ", "&
	cvDate( X[0] )& " "&
	cvTime( X[1] % 60 )& " "&
	cvZone( Z, X[0],X[1] )   );
end;

    creaux( "WRS.X10" );
    if not !SKIP! then usererr(0,0,"?circuit failure","X");
    if auxSync( "X10"&#lf, 10 )
	then print( "[connected]"& crlf )
	else usererr(0,0,"?banner timeout","X");

    while true do
	if x10sync(0) then begin
	    integer I,J,K;
	    print( maiDATE );
	    I := auxin;
	    for J := "A" upto "P" do
		if BankTab[J] = I land '360 then
		    print( " Bank="& J );
	    print( " Func=", I land '17 );
	    I := auxin lor auxin lsh 8;
	    for J := 1 upto 16 do
		if (I lsh J) land '200000 then
		    print( " Unit=", J );
	    I := auxin;
	    for J := "A" upto "P" do
		if BankTab[J] = I land '360 then
		    print( " Base="& J );
	    if I land '17 then print( "(", I land '17, ")" );
	    auxin;
	    print( crlf );
	end;

end $
