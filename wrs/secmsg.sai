begin	"SECMSG"

require "(SAILIB)SAIL.DEF" source!file;
require "ONTYME.REQ" source!file;
require "LOGLIB.REQ" source!file;
!get!definitions(GOGTAB);

define	Ontyme.Host = {"EMSAA"};
define	Ontyme.ID = {"TYM.WRS"};
define	Ontyme.KEY = {"PRIVATE"};

define	calli!LOGOFF = -'130;

simple procedure LogHack( integer C; string S );
out( Log!Chan, S );

procedure Log!Ini;
begin
    external integer array GOGTAB[0:$$PROU];
    Begin!Log;
    GOGTAB[$$PROU] := location( LogHack );
    print( Time!Stamp, crlf );
end;

integer C,B,E;
integer break.line;
string	S;
label Exit, Quit;

procedure Fatal( string S );
begin
    print( S, crlf );
    goto Exit;
end;

setbreak( break.line:=getbreak, #lf, null, "SI" );
open( C:=getchan, "DSK", 0,4,0, 256,B,E );
if E then goto Quit;
lookup( C, Ontyme.Host&".QUE", E );
if E then goto Quit;
Log!Ini;
if not otConnect( Ontyme.Host ) then Fatal( "?cant connect" );
if not otSignon( Ontyme.ID, Ontyme.KEY ) then Fatal( "?cant signon" );
while not E do begin
    S := input( C, break.line );
    if S = ":"
	then if kequ( S[1 to 6], ":SEND " )
	    then otSend( S[7 to inf-1] )
	    else if kequ( S[1 to 6], ":ERASE" )
		then otErase
		else otOut( "\"& S )
	else otOut( S );
    if kequ( S[1 to 9], "Subject: " )
	then print( S, #lf );
end;
rename( C, null, null, E );
Exit:
release( C );
print( crlf );
Finish!Log( Log!Chan );
Quit:
calli( 0, calli!LOGOFF );

end	"SECMSG"
$
