begin	"XUCP"

require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(WRS)ARGS.REQ" source!file;
external boolean RPGSW;

define	TimeOut = 60;
define	BufferSize = 256;

string
    LoginName,
    Password;
simple procedure GetLogin;
begin
    print( "tymix login: " );
    LoginName := inchwl;
    auxcli(-1,'300,'64);
    print( "password: " );
    Password := inchwl;
    print( crlf );
    auxcli(-1,'000,'64);
end;

simple procedure AuxSend( string Text );
begin
    AuxOut( Text& #cr );
    if not AuxSync( #lf, TimeOut )
	then usererr(0,0,"AuxSend "&Text&": timeout","X");
end;

simple boolean procedure IsLeft( string Text,Targ );
begin
    while Text=#cr do lop(Text);
    return( kequ(Text[1 to length(Targ)],Targ) );
end;

simple boolean procedure IsRight( string Text,Targ );
return( kequ(Text[inf-length(Targ)+1 to inf],Targ) );

procedure Login;
begin
    string Text;
    integer Status;
    boolean CopyFlag;
    if 0 > Creaux( "BUBB" ) then usererr(0,0,"login: no circuit","X");
    while true do case AuxRead( Text, TimeOut ) of begin
	[aux!zap] usererr(0,0,"login: lost circuit","X");
	[aux!line] begin
	    if Status>2 and length(Text)>2 then print(Text);
	    if IsLeft(Text,"Login incorrect") then usererr(0,0,
		"login: tymix login failure for "&LoginName,"X");
	    if IsLeft(Text,"host out of ports") then usererr(0,0,
		"login: tymix host out of network ports","X");
	    if IsLeft(Text,"host down") then usererr(0,0,
		"login: tymix host down","X");
	    if IsLeft(Text,"host not available") then usererr(0,0,
		"login: tymix host not available through network","X");
	end;
	[aux!prompt] if IsLeft(Text,"please log in:") then begin
		AuxSend( "tymvax" ); Status := 1 end
	    else if IsLeft(Text,"login:") then begin
		AuxSend( LoginName ); Status := 2 end
	    else if IsLeft(Text,"password:") then begin
		AuxSend( Password ); Status := 3 end
	    else if IsRight(Text,"% ") or IsRight(Text,"$ ") then 
		done
	    else usererr(0,0,"login: bad prompt "&Text,"X");
	[aux!timeout] usererr(0,0,case Status of (
	    [0] "login: timeout waiting for pli from bubbnet gateway",
	    [1] "login: timeout waiting for login: from tymix",
	    [2] "login: timeout waiting for password: from tymix",
	    [3] "login: timeout waiting for shell prompt from tymix" ),"X")
    end;
end;

procedure Shell;
begin
    string Text;
    while true do case AuxRead( Text, TimeOut ) of begin
	[aux!zap] usererr(0,0,"Shell: lost circuit","X");
	[aux!line] ;
	[aux!prompt] if IsRight(Text,"% ") or IsRight(Text,"$ ")
	    then done
	    else usererr(0,0,"Shell: unexpected prompt "&Text,"X");
	[aux!timeout] usererr(0,0,"Shell: timeout","X")
    end;
end;

procedure stty;
begin
    AuxSend( "stty erase u kill u intr u tabs ff0" );
    shell;
end;

define ctls = {0&1&2&3&4&5&6&7&8&11&13&14&15&16&17&18&19&20&21&22&23&24&25&26&27&28&29&30&31};

procedure SendFile( string FileName );
begin
    own integer C,B,E,BT,P;
    string Outstanding;
    if not BT then setbreak( BT_getbreak,#lf&#ff,ctls,"SI" );
    print( FileName, ":" );
    open( C_getchan,"DSK",0,4,0,132,B,E );
    lookup( C,FileName,E );
    if E
	then print( "  ?lookup failure" )
	else print( " ", P_1 );
    Outstanding := null;
    while not E do begin
	string Line;
	Line := input( C, BT );
	if E then done;
	while (length(Outstanding) + length(Line)) geq BufferSize do
	    if not AuxSync( lop(OutStanding), TimeOut ) then
		usererr(0,0,"SendFile: out of sync","X");
	if B = #lf or length(Line) then begin
	    AuxOut( Line& #cr );
	    Outstanding := Outstanding& Line& #lf;
	end;
	if B = #ff then begin
	    AuxOut( #ff );
	    print( " ", P_P+1 );
	end;
    end;
    if not AuxSync( Outstanding, TimeOut )
	then usererr(0,0,"SendFile: out of sync","X");
    print( "."& crlf );
    release( C );
end;

procedure Parse;
begin
    string O;
    integer I;
    Args := " -C "&
	cv6str(calli(!xwd(-1,-'22),'41))&
	cv6str(calli(!xwd(-1,-'21),'41))&
	":"&
	cvs(calli(!xwd('33,'11),'41));
    for I := 1 upto ARGC-1 do 
	if ARGV[i] = "-" then begin
	    string S;
	    S := ARGV[i][2 to inf];
	    while length(S) do case O := lop(S) of begin
		["p"]["P"]
		    Args := Args& " -p";
		["i"]["I"] begin
		    Args := Args& " -i";
		    if cvd(ARGV[i+1]) then begin
			I := I + 1;
			Args := Args& " "& ARGV[i];
			ARGV[i] := "-"& ARGV[i];
		    end;
		end;
		["t"]["T"]
		    AuxTrace := true;
		[else]
		    usererr(0,0,"Illegal option: -"&O,"X")
	    end;
	end;
end;

procedure XUCP;
begin
    integer I;
    for I := 1 upto ARGC-1 do if ARGV[i] neq "-" then begin
	string Text;
	AuxSend( "XUCP -J "& ARGV[i]& " -T "& ARGV[i]& Args& " -" );
	SendFile( ARGV[i] );
	AuxOut( #eot );
	Shell;
    end;
end;

procedure Logout;
begin
    AuxSend( "logout" );
    AuxSync( #lf&"HOST"&#lf, TimeOut );
end;

!	M A I N
;
if ARGC=1
    then print("xucp - X to Unix copy

synopsis:
  xucp srcfile dstfile
  xucp srcfile1 srcfile2 ... srcfilen dstdir
  r(xexec)xucp; srcfile dstfile
  r(xexec)xucp; srcfile1 srcfile2 ... srcfilen dstdir

options:
  -t	trace circuit traffic
")  
    else begin
	Parse;
	GetLogin;
	login;
	stty;
	cat;
	logout;	
    end;

end $
