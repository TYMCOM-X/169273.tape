begin

require "(SAILIB)SAIL.DEF" source!file;

integer BT,CH1,CH2,BRK,EOF;
string IFile;

procedure parseit( string NAME; real HOURS, SCALE );
begin
    string S;
    real X;
    do S := input(CH1,BT) until equ(S,NAME);
    X := realin(CH1);
    cprint( CH2, crlf& cvf(HOURS),",",cvf(X*SCALE) );
end;

procedure readit( string NAME,COLOR; real SCALE(1.0) );
begin
    own integer CURVE;
    lookup( CH1,IFile,EOF );
    if EOF then usererr( 2,EOF,"?cant read input file ","X" );
    CURVE := CURVE +1;
    cprint( CH2, "
  CURVE ",CURVE," COLOR ",COLOR,",
   LEGEND LABEL """,NAME,
     (if SCALE neq 1.0 then " (/"&(cvf(SCALE)[2 to inf])&")" else null),""",
   SYMBOL COUNT 0,
   DATA VALUES ");
    while not EOF do begin
	own string DATE;
	string TIME,S;
	real HOURS;
	do S:=input(CH1,BT) until equ(S,"TIME") or EOF;
	if EOF then done;
	TIME:=input(CH1,BT);
	HOURS:=cvd(TIME[inf-4 for 2])+cvd(TIME[inf-1 for 2])/60.0;
	if length(DATE)=0 then begin
	    string S;
	    if TIME[9 for 1]=" "
		then S:=TIME[1 to 8]
		else S:=TIME[1 to 9];
	    print( "Date to plot [",S,"]: " );
	    DATE := inchwl;
	    if length(DATE)=0 then DATE:=S;
	end;
	if equ( DATE, TIME[1 to length(DATE)] ) then
	    parseit( NAME, HOURS, SCALE );
    end;
    cprint( CH2, "."&crlf );
    close( CH1 );
end;

ttyup( true );
setformat( 0,2 );
setbreak( BT_getbreak,","&#lf," "&#cr,"ISK" );
open( CH1_getchan,"DSK",0,4,0, 256,BRK,EOF );
open( CH2_getchan,"DSK",0,0,4, 0,0,EOF );
print( "input file [MONITR.DAT]: " );
IFile := inchwl; if length(IFile)=0 then IFile := "MONITR.DAT";
enter( CH2,"MPLOT.DAT",EOF );
if EOF then usererr( 2,EOF,"?can't write output file MPLOT.DAT ","X" );
cprint( CH2, "
  GENERATE FANCY PLOT.
  PAGE BORDER OFF.
  TITLE ""Load Statistics for System ",calli( !xwd('33,'11),'41 ),""".
  X,Y GRID ON.
  X STEP 3.
  X TICK 3.
  X LABEL ""Time of Day - PST"".
" );
readit( "JOBS", "BLUE" );
readit( "PORTS", "GREEN" );
readit( "RN", "RED", 10.0 );
close( CH2 );

end $
