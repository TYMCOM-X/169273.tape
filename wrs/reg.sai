begin	"REG"

require 1 version;
require "(SAILIB)SAIL.DEF" source!file;

integer	PChan,Brk,Eof;		    ! procedure channel variables;
integer	NREL;			    ! number of relations;

record!class FLD (		    ! field descriptor record;
	string NAME;		    ! name of field;
	string PICT;		    ! picture;
	integer SIZE;		    ! printing width of field;
	boolean KEY;		    ! true if key;
	r!p(FLD) LINK );

record!class REL (		    ! relation descriptor record;
	string	NAME;		    ! name of relation;
	integer NKEY;		    ! number of key fields;
	integer NDAT;		    ! number of data fields;
	r!p(FLD) FLDS;		    ! head of list of fields;
	r!p(REL) LINK );

record!pointer(REL) RELS;	    ! top of relation tree;

integer TokBrk;			    ! token break table;
integer	NumBrk;			    ! break on non-number;
simple procedure BrkIni;
begin
    setbreak( TokBrk_getbreak, #lf&#sp&#ht, """"&#sp&#ht&#cr, "SKIT" );
    setbreak( NumBrk_getbreak, "0123456789", null, "SKX" );
end;
require BrkIni initialization;

procedure DefineRelation( string NAME );
!
	Called by the parser when a relation name is encountered.
	Subsequent calls to DefineField will pertain to this relation.
;
begin
    r!p(REL) R,R1;		    ! a temp;
    R_ new!record(REL);		    ! generate relation desc record;
    Rel:Name[R]_ NAME;		    ! relation name;
    Rel:Link[R]_ RELS;		    ! link on head;
    RELS_ R;
    NREL_ NREL + 1;		    ! count number of relations;
end;

procedure DefineField( string NAME; string PICT; boolean KEY );
!
	Called by parser when the field of a relation has been completely
	parsed.  The field will belong to the relation named in the mose
	recent call to DefineRelation.  PICT does not include "DATE".
	KEY is true for a key field, or false for a data field.  All key
	fields will be defined first followed by data fields if any.
;
begin
    string P;			    ! working copy of picture;
    integer SIZE;		    ! size of field;
    integer B;			    ! break variable;
    r!p(FLD) F,F1;		    ! a temp;
    SIZE_ 0;
    P_ PICT;
    while length( P ) do begin
	string N;
	N_ scan( P,NumBrk,B );
	if length( N ) 
	    then SIZE_ SIZE + cvd( N )
	    else SIZE_ SIZE + 1;
    end;
    if SIZE + (16 max length(NAME)) + 3 > 79 then begin
	print( "%",NAME," omited from screen for ",Rel:Name[rels],": too long",crlf );
	return;
    end;
    if Rel:NKey[rels] + Rel:NDat[rels] geq 21 then begin
	print( "%",NAME," omited from screen for ",Rel:Name[rels],": too many",crlf );
	return;
    end;
    F_ new!record(FLD);		    ! generate record for field;
    Fld:Name[f]_ NAME;		    ! field name;
    Fld:Pict[f]_ PICT;		    ! picture;
    Fld:Size[f]_ SIZE;		    ! size of field;
    Fld:Key [f]_ KEY;		    ! key/data;
    if F1_ Rel:Flds[rels] 
	then begin
	    while Fld:Link[F1] do F1_ Fld:Link[F1];
	    Fld:Link[F1]_ F;	    ! link on end of list;
	end
	else Rel:Flds[rels]_ F;	    ! 1st on list;
    if Key			    ! count fields;
	then Rel:NKey[rels]_ Rel:NKey[rels] +1
	else Rel:NDat[rels]_ Rel:NDat[rels] +1;
end;

procedure ReadSchema;
!	
	Read Schema information from file created by the MAGNUM command:
	    DIRECTORY RELATIONS OUTPUT TO FILE filename WITH FIELDS FULL
	into an internal record structure.  The file is as follows:
	    <file>    ::= <rel-def> [<file>]
	    <rel-def> ::= <rel-name> #cr <key-def> [<dat-def>]
	    <key-def> ::= KEY <fld-def>
	    <dat-def> ::= DATA <fld-def>
	    <fld-def> ::= <fld-nam> AS [DATE] <fld-pic> #cr [<fld-def>]
	Very little syntax checking is performed since the file is
	generated by MAGNUM, it is assumed to be correct.
;
begin	"ReadSchema"
    integer PS;			    ! parser state variable;
    integer DChan,BRK,EOF;	    ! input file variables;
    string  DFile;		    ! input file name;
    open( DChan_ getchan, "DSK", 0,4,0, 80,BRK,EOF_-1 );
    do begin			    ! get valid input file name;
	print( "Relation directory file: " );
	DFile_ inchwl;
	if DFile = "?" then begin print( "
Enter the name of the file created by the MAGNUM command:
    DIRECTORY RELATIONS OUTPUT TO FILE filename WITH FIELDS FULL
");	    continue end;
	lookup( DChan,DFile,EOF );
	if EOF then print( "?unable to access file ",DFile,crlf );
    end until not EOF;
    PS_ 0;			    ! initial parse state;
    while not EOF do begin
	string Tok;		    ! current token being parsed;
	string FieldName;	    ! current field name being parsed;
	boolean Key;		    ! true if field is KEY;
	Tok_ input( DChan,TokBrk );
	if length( Tok ) then case PS of begin
	    [0] begin "relation/KEY/DATA/field"
		if BRK=#lf then DefineRelation( Tok )
		else if equ(Tok,"KEY") then Key_ true
		else if equ(Tok,"DATA") then Key_ false
		else begin FieldName_ Tok; PS_ 1 end;
	    end;
	    [1] begin "AS"
		if equ(Tok,"AS") then ! nothing ;
		else print( "? ""AS"" expected: """,Tok,"""",crlf );
		PS_ 2;
	    end;
	    [2] begin "DATE/picture"
		if equ(Tok,"DATE") then ! nothing ;
		else if BRK=#lf then DefineField( FieldName, Tok, Key )
		else print( "? DATE or picture expected: """,Tok,"""",crlf );
		PS_ (if BRK=#lf then 0 else 2);
	    end;
	else end;
    end;
    release( DChan );
    return;
end	"ReadSchema";

procedure Preamble;
begin
    cprint( PChan, 
"procedure RE
begin

    fields
	RE.RNAME	as '30C'

    screen for 'TYM425'
	message.area 1 to 2
	abort.procedure @3
	function.separator @27
	function.length 2
" );
end;

procedure FrameFormats;
begin
    r!p(REL) R;
    r!p(FLD) F;
    integer Lines,NCOL;
    string S;
    define PerCentSigns = {"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};
    define Blanks = {"                                                                            "};
    cprint( PChan, "
    frame.format MENU.MASK" );
    NCOL_ ( 1 + NREL % 20 ) min 4;
    R_ RELS;
    for Lines_ 3 upto 23 do begin
	integer I;
	cprint( PChan, crlf& #ht& "'  " );
	for I_ 1 step 1 while R and I leq NCOL do begin
	    cprint( PChan, S_ Rel:Name[R], Blanks[length(S) to 24] );
	    R_ Rel:Link[R];
	end;
	cprint( PChan, "'" );
    end;
    cprint( PChan, "
	'relation: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      ",
	"                          [ quit ]'"& crlf );
    R_ RELS;
    while R do begin
	integer Lines;
	cprint( PChan, "
    frame.format ",Rel:Name[R],".MASK" );
	Lines_ 2;
	F_ Rel:Flds[R];
	while F do begin
	    Lines_ Lines +1;
	    cprint( PChan, crlf& #ht& "'",
		S_Fld:Name[F], ":",
		"               "[length(S) to inf],
		"[", PerCentSigns[1 to Fld:Size[F]], "]'" );
	    F_ Fld:Link[F];
	end;
	while Lines < 23 do begin
	    Lines_ Lines +1;
	    cprint( PChan, crlf& #ht& "''" );
	end;
	cprint( PChan, crlf& #ht& "'"&
	    "[ menu ] [ key  ]                            "&
	    "[delete]                   [ quit ]'"& crlf );
	R_ Rel:Link[R];
    end;
end;

procedure Frames;
begin
    r!p(REL) R;
    r!p(FLD) F;
    string S;
    cprint( PChan, "
    frame MENU.FRAME from MENU.MASK
	frame.area 3 to 24
	data.names
	    RE.RNAME
");
    R_ RELS;
    while R do begin
	cprint( PChan, "
    frame ",Rel:Name[R],".FRAME from ",Rel:Name[R],".MASK
	frame.area 3 to 24
	data.names
");
	F_ Rel:Flds[R];
	while F do begin
	    cprint( PChan, #ht&"    ", Fld:Name[F], 
		(if Fld:Link[F] then "," else null), crlf );
	    F_ Fld:Link[F];
	end;
	R_ Rel:Link[R];
    end;
end;

procedure FunctionKeys;
begin
    r!p(REL) R;
    r!p(FLD) F;
    string RN;
    cprint( PChan, "
    function.key MENU.QUIT is 'w'+@cr finish MENU.BLOCK
");
    R_ RELS;
    while R do begin
	RN_ Rel:Name[R];
	cprint( PChan, "
    function.key ",RN,".MENU is 'p'+@cr repeat MENU.BLOCK
    function.key ",RN,".KEY is 'q'+@cr repeat ",RN,".BLOCK
    function.key ",RN,".DELETE is 't'+@cr select ",RN," via key
	then begin 
	    delete from ",RN," via key 
	    repeat ",RN,".BLOCK
	end
	else type to message.area @7,'?no instance to delete'
    function.key ",RN,".QUIT is 'w'+@cr finish MENU.BLOCK
");
	R_ Rel:Link[R];
    end;
end;

procedure RelationBlock( r!p(REL) R );
begin
    string RN,KN,DN;		    ! rel name, key names, data names;
    r!p(FLD) F;			    ! temp pointer to field;
    KN_ DN_ null;		    ! key/data fields (for fast access);
    F_ Rel:Flds[r];
    while F do begin
	if Fld:Key[F]
	    then KN_ KN& ","& Fld:Name[F]
	    else DN_ DN& ","& Fld:Name[F];
	F_ Fld:Link[F];
    end;
    lop(KN); lop(DN);		    ! remove leading ,;
    RN_ Rel:Name[R];		    ! relation name (for fast access);
    cprint( PChan, "
	    move default to ",KN,"
	    display ",RN,".FRAME 
		using ",RN,".MENU,",RN,".QUIT
		",RN,".BLOCK: begin
		    type to message.area 'relation ",RN,"',@cr,@32
		    input ",KN," 
		    select ",RN," via key
			then begin
			    type to message.area 'relation ",RN," [old instance]'" );
    F_ Rel:Flds[R];
    while F do begin
	if not Fld:Key[F] then cprint( PChan, "
			    move ",Fld:Name[F]," to ",Fld:Name[F]," of ",RN,".FRAME" );
	F_ Fld:Link[F];
    end;
    cprint( PChan, "
			end
			else begin
			    type to message.area 'relation ",RN," [new instance]'" );
    if length(DN) then cprint( PChan, "
			    move default to ",DN );
    cprint( PChan, "
			end" );
    if length(DN) then begin
	cprint( PChan, "
		    input ",DN," using ",RN,".KEY,",RN,".DELETE 
		    select ",RN," via key
			then alter ",RN," using (" );
	F_ Rel:Flds[R];
	while F do begin
	    if not Fld:Key[F] then cprint( PChan, "
			    ",Fld:Name[F]," of ",RN,".FRAME for ",Fld:Name[F],
		(if Fld:Link[F] then "," else " )") );
	    F_ Fld:Link[F];
	end;
	cprint( PChan, "
			else insert into ",RN );
    end;
    cprint( PChan, "
		    repeat ",RN,".BLOCK
		end
" );
end;

procedure MenuBlock;
begin
    r!p(REL) R;
    cprint( PChan, "
MENU.BLOCK: begin
    display MENU.FRAME using MENU.QUIT 
    MENU.INPUT: begin
	type to message.area @32,@cr,@32
	input RE.RNAME
	move upper.case(RE.RNAME) to RE.RNAME
	move RE.RNAME to RE.RNAME of procedure
	if RE.RNAME = 'QUIT'" );
    R_ RELS;
    while R do begin
	cprint( PChan, "
	    or '",Rel:Name[R],"'" );
	R_ Rel:Link[R];
    end;
    cprint( PChan, "
		then nothing
		else repeat MENU.INPUT
    end	
    conditional on RE.RNAME begin");
    R_ RELS;
    while R do begin
	cprint( PChan, crlf& #ht& "'",Rel:Name[R],"': begin" );
	RelationBlock( R );
	cprint( PChan, crlf& #ht& "end" );
	R_ Rel:Link[R];
    end;
    cprint( PChan, "
    end
    repeat MENU.BLOCK
end"& crlf );
end;

begin	"MAIN"
    ttyup(true);
    print( "Relation Editor Generator - v  ",cvos(memory['137]),crlf );

    ReadSchema;
    print( "[",NREL," relations]",crlf );
    open( PChan_getchan,"DSK",0,0,4, 0,0,EOF );
    enter( PChan,"RE.TXT",EOF );
    if EOF then usererr( 0,0,"?unable to enter file RE.TXT","X" );
    Preamble;
    FrameFormats;
    Frames;
    FunctionKeys;
    MenuBlock;
    cprint( PChan, crlf& "end"& crlf );
    print( "[Relation Editor in file RE.TXT]" );
    close( PChan );
    release( PChan );

end 	"MAIN"
end $
    