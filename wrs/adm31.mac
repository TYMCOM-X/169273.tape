title	ADM31	transparent program to emulate ADM31 using an HP2621
debug==	0			;=1 to trace special interrupts
ignore==0			;=1 to ignore unexpected sequences
tccena==0			;=1 to repeat terminal characteristics
minver==22			;version rh
majver==0			;version lh

twoseg
loc	137
xwd	majver,minver
reloc	400000

X==	0			;be careful - for null job
P==	1			;stack pointer
A==	2			;for interrupt routines
B==	3
C==	4
D==	5
TC==	6			;TTY character
PC==	7			;PTY character
T1==	10			;for TTY character interrupts
T2==	11
T3==	12
TF==	13
P1==	14			;for PTY character interrupts
P2==	15
P3==	16
PS==	17

if2 <ifn DEBUG,<printx [debug switch enabled]>>
;;	CALLI's
opdef	CREPTY	[CALLI -141]	;create PTY
    CPNPT%==1			;PTY capacity exceeded
opdef	RETACH	[CALLI -135]	;reattach a port to another frame
opdef	VPEEK	[CALLI -136]	;peek at virtual address

;;	interrupt causes
.IACHR==1			;character received
.IAORG==6			;orange ball received
.IAZAP==7			;circuit zapper received
.IAYEL==11			;yellow ball received
.IAGOB==12			;character gobbler received
.IATCC==13			;terminal characteristic changed in PTY
.IANTQ==13			;notice to quit

;;	auxcal function codes
.AXI8C==0			;input image character and wait
.AXI8S==1			;input image character and skip
.AXO8==	3			;output image character
.AXCBI==6			;clear input buffer
.AXCBO==7			;clear output buffer (send gobbler)
.AXLDE==11			;leave deffered echo
.AXSYB==12			;send yellow ball
.AXCFS==64			;change file status bits for port
.AXSOB==70			;send orange ball
.AXTCN==73			;read/set term char by number
.AXTCP==74			;read changed term char from PTY
.AXOSF==76			;output string as will fit
.AXCLS==100			;set terminal CLASS

;;	frmop function codes
.FOCFM==1			;create frame
    CF.FCE==1			;frame capacity exceeded

;;	gettab table numbers
.GTLOG==-24			;LDBLOG(U)
.GTLIC==-20			;JBTLIC(J)
.GTPRV==6			;JBTPRV(J)
.GTTTY==10			;TTYTAB(J)
.GTSLF==23			;NUMTAB(I)

;;	fatal error message macro
define	fatal (M)	<
	jrst	[reset
		outstr [asciz "M"]
		exit
		]	>

;;	debug error message macro
ifn	debug,<define	bug (M)	<outstr [asciz "[M]"]>>
ife	debug,<define	bug (M)	<;>>

subttl	create frame and PTYs
;	* initialize the stack
;	* create PTY
;	* create frame
;	* set frame license
;	* initialize PTY terminal characteristics
;	* set mode on our end of PTY
;	* attach PTY to frame
;	* set mode on command port
;	* set logout on disconnect

array	PDL[40]			;stack

START:	MOVE	P,[iowd 40,PDL]	;init stack pointer
	SETZB	TF,PS		;init keyboark lock flag and state code

	SETZ	T1,		;create PTY pair
	CREPTY	T1,
	 JRST	[CAIN	T1,CPNPT%
		  fatal	<?PTY capacity exceeded>
		fatal	<?error creating PTYs>
		]
	MOVEM	T1,PP#

	MOVSI	T1,.FOCFM	;create frame with default parameters
	FRMOP	T1,[0]
	 JRST	[CAIN	T1,CF.FCE
		  fatal	<?frame capacity exceeded>
		fatal	<?error creating frame>
		]
	MOVEM	T1,FD#
	
	HRROI	T1,.GTLIC	;copy frame license
	GETTAB	T1,		;get our license
	 JRST	LICDON
	MOVE	T2,[.GTLIC,,.GTSLF]
	GETTAB	T2,		;get address of JBTLIC
	 JRST	LICDON
	MOVE	T3,FD		;get child frame number
	ANDI	T3,7777		;mask off abs frame number
	ADD	T2,T3		;T2/ JBTLIC+(frame#)
	TLO	T2,(1B0)	;virtual memory reference
	MOVEI	T3,T1		;arg block at T1
	POKE	T3,
	 JRST	LICDON
	bug <LIC>
	SKIPA
LICDON:	 OUTSTR [asciz "[JBTLIC not patched]
"]
	;; here set LDBLOG on PTY's LDB
	MOVE	A,[.GTLOG,,.GTSLF]
	GETTAB	A,
	 JRST	NOLOG
	HRRZM	A,B		;(B)=GETLOG temporarily
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(PUSHJ 1,)
	 fatal	<?GETLOG not a PUSHJ P,>
	ADDI	A,4		;offset into LINCHK of LINTAB
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(<SKIPA 5,(5)>)
	 fatal	<?CHKLIN+4 not a SKIPA U,(U)>
	HRRZM	A,C		;(C)=LINTAB
	ADDI	B,2		;offset from GETLOG of LDBLOG
	HRLI	B,(1b0)
	VPEEK	B,
	 JRST	NOLOG
	HLRZ	T1,B
	CAIE	T1,(<SKIPA 6,(5)>)
	 fatal	<?GETLOG+2 not a SKIPA T1,(U)>
	HRRZM	B,B		;(B)=LDBLOG
	HRRZ	T1,PP		;port number
	ADD	T1,C		;+LINTAB
	HRLI	T1,(1b0)
	VPEEK	T1,
	 JRST	NOLOG
	TLNE	T1,-1
	 fatal	<?left half of LINTAB(port) non-zero>
	ADD	T1,B		;(T1)=LDBLOG(U)
	HRLI	T1,(1b0)
	MOVE	T2,[17b11!1b16!77b19!77b27!177b35]
	HRROI	T3,.GTLOG
	GETTAB	T3,
	 JRST	NOLOG
	AND	T3,T2
	MOVE	A,T1
	VPEEK	A,
	 JRST	NOLOG
	HRROI	B,.GTLOG
	HRL	B,PP
	GETTAB	B,
	 JRST	NOLOG
	CAME	A,B
	 fatal	<?.GTLOG(p) neq LDBLOG(u)>
	MOVEI	A,T1
	BITPOK	A,
	 JRST	NOLOG
	bug <LOG>
	SKIPA
NOLOG:	 OUTSTR	[asciz "[LDBLOG not patched]
"]
	HRROI	T1,.AXTCN	;copy terminal characteristics
	HRROI	T2,.AXTCN	
	HRL	T2,PP		;get port number of "other" end
	SETZ	T3,		;start with characteristic 0
TCINI:	HLLOS	T3		;read characteristics
	AUXCAL	T1,T3		;get characteristic from real TTY
	 JRST	TCDON		;no more characteristics
	AUXCAL	T2,T3		;set it on other end of PTY
	 fatal	<?cant set terminal characteristic>
	ADD	T3,[1,,0]	;incriment terminal char #
	JRST	TCINI
TCDON:

	HRL	T1,PP		;set TTY CLASS (terminal type)
	HRRI	T1,.AXCLS	;change CLASS for port
	MOVE	T2,[sixbit "ADM31"]
	AUXCAL	T1,T2

	HLL	T1,PP		;set mode on our end of PTY
	HRRI	T1,.AXCFS	;change file status for port
	AUXCAL	T1,214		;image binary no echo

	HRRO	T1,FD		;move PTY to child
	HRLI	T2,(2B2)	;attach in command mode
	HRR	T2,PP		;his port number
	MOVEI	T3,T1		;address of arg block
	RETACH	T3,
	 fatal	<?cant retach PTY to child frame>
	
	HRROI	T1,.AXCFS	;change file status for port
	AUXCAL	T1,214		;image binary no echo

	HRROI	T1,.GTPRV	;set logout on disconnect
	GETTAB	T1,
	 fatal	<?cant get JBTPRV>
	TRZ	T1,3B20		;all off=logout on disconnect
	SETPRV	T1,

	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
TCCCLR:	AUXCAL	A,B
	 fatal	<?cant read terminal characteristics from PTY>
	JUMPGE	B,TCCCLR	;more?

subttl	initialize interrupt system
;	* reset and enable INTADR system
;	* assign causes to channels
;	* enable all channels

	MOVE	T1,[VECDAT,,VECTOR]	;load the vector
	BLT	T1,VECTOR+VECLEN-1

	MOVE	T1,[6,,VECTOR]		;clear and enable system
	INTADR	T1,
	 fatal	<?cant initialize INTADR system>
	
	MOVE	T1,[.IANTQ,,ZAP..C]	;NTQ 
	INTASS	T1,
	 fatal	<?cant assign NTQ>

	HRLOI	T1,<.IAZAP>B26+ZAP..C	;PTY ZAP
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign PTY ZAP>

	HRLOI	T1,<.IAORG>B26+ORG.TC	;ORANGE BALL from TTY 
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for TTY>

	HRLOI	T1,<.IAORG>B26+ORG.PC	;ORANGE BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for PTY>

	HRLOI	T1,<.IAYEL>B26+YEL.TC	;YELLOW BALL from TTY 
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for TTY>

	HRLOI	T1,<.IAYEL>B26+YEL.PC	;YELLOW BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for PTY>

	HRLOI	T1,<.IAGOB>B26+GOB.TC	;GOBBLER from TTY
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for TTY>

	HRLOI	T1,<.IAGOB>B26+GOB.PC	;GOBBLER from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for PTY>

ifn TCCENA,<
	HRLOI	T1,<.IATCC>B26+TCC.PC	;TERM CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign TERM CHAR for PTY>
>
	HRLOI	T1,<.IACHR>B26+CHR.TC	;CHAR from TTY
	TINASS	T1,
	 fatal	<?cant assign CHAR for TTY>

	HRLOI	T1,<.IACHR>B26+CHR.PC	;CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign CHAR for PTY>

	OUTSTR	[asciz "[translator passthrough created]"]
	OUTSTR	[byte (7)15,12]

	SETO	X,			;enable all interrupt channels
	INTENB	X,
	 fatal	<?cant enable interrupt channels>

WAIT:	SETZ	X,		;don't wake up for anything
	HIBER	X,
	 JRST	WAIT
	JRST	WAIT

subttl	interrupt routines for special balls

ZAP..:	bug <ZAP..>
	MOVEI	A,10
	SLEEP	A,
	OUTSTR	[asciz "
[translator passthrough deleted]"]
	EXIT

ORG.T:	PUSH	P,A
	bug <ORG.T>
	HRROI	A,.AXSOB	;send orange ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

ORG.P:	PUSH	P,A
	bug <ORG.P>
	HRROI	A,.AXSOB	;send orange ball to TTY
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.T:	PUSH	P,A
	bug <YEL.T>
	HRROI	A,.AXSYB	;send yellow ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.P:	PUSH	P,A
	bug <YEL.P>
	HRROI	A,.AXSYB	;send yellow ball to TTY
	AUXCAL	A,
	POP	P,A
	DISMIS

GOB.T:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	bug <GOB.T>
	DISMIS

GOB.P:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to TTY
	AUXCAL	A,
	POP	P,A
	bug <GOB.P>
	DISMIS

subttl	interrupt routines for terminal characteristics
;	no TCC.T because can't do anything with them

TCC.P:	PUSH	P,A
	PUSH	P,B
TCC.P0:	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
	AUXCAL	A,B
	 fatal	<?cant read terminal characteristics from PTY>
	JUMPL	B,TCC.P1	;none left?
	bug <TCC.P>
	HRROI	A,.AXTCN
	AUXCAL	A,B		;go set it on real TTY:
	 fatal	<?cant set terminal characteristic on TTY>
	JRST	TCC.P0
TCC.P1:	POP	P,B
	POP	P,A
	DISMIS

subttl	interrupt routines for terminal originated traffic
;	T1-TF are reserved for these routines

CHR.T:	HRROI	T1,.AXI8S	;get next character
	AUXCAL	T1,TC
	 DISMIS			;no more characters
	JUMPN	TF,CHR.T	;ignore if "keyboard locked"
	HRROI	T1,.AXO8	;output to PTY
	HLL	T1,PP
	AUXCAL	T1,TC
	JRST	CHR.T		;try again

subttl	interrupt routines for PTY originated traffic
;	P1-PS are reserved for these routines

CHR.P:	HRROI	P1,.AXI8S	;get next character
	HLL	P1,PP
	AUXCAL	P1,PC
	 DISMIS			;no more characters
	LDB	P2,[point 7,PC,35]
	JRST	@STDISP(PS)	;dispatch on state 

;; state code dispatch table
;	0 - normal state
;	1 - <esc> seen
;	2 - <esc>= seen
;	3 - <esc>=<y> seen
STDISP:	@CCDISP(P2)		;0 ;dispatch on control character
	@ESDISP(P2)		;1 ;dispatch on escape code
	Y.READ			;2 ;pickup Y position
	X.READ			;3 ;pickup X position

;; CC(<char>)	;enter address of routine at <.> into dispatch table
;; CC(<char>,<ch1,ch2,...,chn>)
		;same as above + generate code at . to output ch1-chn
		; and jump to CHR.P
define	CAT(a,b,c,d,e,f,g) <a'b'c'd'e'f'g>
define	CC(x,w) <
	RELOC	CCDISP+x
	ifb <w>,<
	JRST	cat(CC,\x)
	>
	ifnb <w>,<
	JRST [
		irp w 
		<IONEOU [w]>
		JRST	CHR.P
	     ]
	>
	RELOC
	ifb <w>,<
cat(CC,\x,:)
	>
>
define	BO (x) <irp x <IONEOU [x]
>>

;; control character dispatch table
CCDISP:	repeat	200,<JRST CHR.P0>
CC(13,<33,"A">)			;cursor up
CC(14,<33,"C">)			;cursor right
CC(37,<15,12>)			;new line
CC(33)	AOJA	PS,CHR.P	;escape, 1 -> state

;; ES(<char>)	;enter address of routine at <.> into dispatch table
;; ES(<char>,<ch1,ch2,...,chn>)
		;same as above + generate code at . to output ch1-chn
		; and jump to ENDSEQ
define	ES(x,w) <
	RELOC	ESDISP+x
	ifb <w>,<
	JRST	cat(ES,\x)
	>
	ifnb <w>,<
	JRST [
		irp w 
		<IONEOU [w]>
		JRST	ENDSEQ 
	     ]
	>
	RELOC
	ifb <w>,<
cat(ES,\x,:)
	>
>

;; escape sequence dispatch table
ESDISP:	repeat	200,<JRST UNDEF>
UNDEF:
ife IGNORE,<
	OUTSTR	[asciz "&a23r0CK?unexpected sequence: <esc>Y"]
	OUTCHR	P2
	OUTSTR	[asciz "Z  "]
	MOVEI	P2,5
	SLEEP	P2,
>
	JRST	ENDSEQ

es(<"=">) AOJA 	PS,CHR.P	;cursor position ;state/ 2 (was 1)
es(<"*">,<33,"H",33,"J">)	;clear all data on page to nulls
es(<":">,<33,"H",33,"J">)	;clear all data on page to nulls
es(<";">,<33,"H",33,"J">)	;clear all as in shift/clear
es(<"+">,<33,"H",33,"J">)	;clear all as in shift/clear
es(<",">,<33,"H",33,"J">)	;clear all data to protected spaces
es(<"@">,<33,"0">)		;print screen w/o protected data
es(<"C">) JRST 	ENDSEQ		;begin conversational mode
es(<"E">,<33,"L">)		;insert line
es(<"L">,<33,"0">)		;print screen unformatted
es(<"P">,<33,"0">)		;print screen
es(<"Q">,<33,"Q"," ",33,"R",10>);insert character
es(<"R">,<33,"M">)		;delete line
es(<"T">,<33,"K">)		;erase line to PERS from cursor
es(<"W">,<33,"P">)		;delete character
es(<"Y">,<33,"J">)		;erase page FG from cursor
es(<"q">,<33,"Q">)		;enter character insert mode
es(<"r">,<33,"R">)		;leave character insert mode
es(<"y">,<33,"J">)		;erase page to null from cursor
es(<"(">,<33,"&","d","A">)	;begin enhancement
es(<")">,<33,"&","d","@">)	;end enhancement
es(<"'">) JRST	ENDSEQ		;mystery sequence
es(<"#">) AOJA 	TF,ENDSEQ	;disable keyboard
es(42) 	SETZ 	TF,		;enable keyboead (")
	JRST	ENDSEQ
es(15)	JRST	ENDSEQ		;ignore <esc><cr>

CHR.P0:	IONEOU	PC
	JRST	CHR.P

Y.READ:	SUBI	P2,40		;convert to true Y-pos
	MOVEM	P2,Y.POS#
	AOJA	PS,CHR.P

X.READ:	SUBI	P2,40		;convert to true X-pos
	MOVEM	P2,X.POS#
	BO	<33,"&","a">
	MOVE	P2,Y.POS
	PUSHJ	P,DECOUT
	BO	<"r">
	MOVE	P2,X.POS
	PUSHJ	P,DECOUT
	BO	<"C">

ENDSEQ:	SETZ	PS,		;end of sequence
	JRST	CHR.P

DECOUT:	IDIVI	P2,^D10
	PUSH	P,P3
	SKIPE	P2
	 PUSHJ	P,DECOUT
	POP	P,P3
	ADDI	P3,"0"
	IONEOU	P3
	POPJ	P,

subttl	define interrupt vector and channel numbers

VECDAT:	;; interrupt vectors
define	INTDEF (x) < irp x <
EXP 0,x				;;load vector table
x'C==<.-VECDAT>/2		;;define interrupt channel number
>>
intdef	<GOB.T,GOB.P>
intdef	<CHR.T,ORG.T,YEL.T>
intdef	<TCC.P>
intdef	<CHR.P,ORG.P,YEL.P>
intdef	<ZAP..>
VECLEN==.-VECDAT

lit
reloc	0
VECTOR:	block ^D72
var

end	START
  