begin
require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)ARGS.REQ" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(SAILIB)TYMINT.DEF" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require processes;

procedure ESCsvc;
begin
    auxzap;
    setprint( null, "T" );
    print("^C");
    calli(0,calli!EXIT);
end;

item	INTPRO;
simple procedure IntIni;
begin "IntIni"
    own safe integer array ESCblk[1:2];
    ESCblk[1] _ 2; 
    ESCblk[2] _ !hl(-1)+location(ESCsvc);
    intset ( INTPRO, 0 );
    intmap ( tinass(-1,!IAESC,10), dfrint, location(ESCblk[1]) );
    enable ( newenb(10) );
end "IntIni";
require IntIni initialization;

integer NCHARS, LOL;

string item PLOTFILE;
string item LOGIN;
item TRACE;

procedure plot( string seq );
begin
    LOL := LOL + length(seq);
    NCHARS := NCHARS + length(seq);
    if LOL > 78
	then begin
	    print( crlf );
	    LOL := length(seq);
	    NCHARS := NCHARS + 2;
	end;
    print( seq );
end;

string P1P2;
boolean ESC.E, FINISHED;
integer PHASE;

procedure escseq( string seq );
begin
    if seq[2 to 2]="." then case seq[3 to 3] of begin
	["@"]["M"]["N"] ;
	["E"] begin
	    auxout( "0"& crlf );
	    ESC.E := true;
	end;
	["O"] auxout( "8"& crlf );
	else usererr( 0,0,"?unexpected escape sequence: $"& seq[2 to inf] )
    end else usererr( 0,0,"?unexpected escape sequence: $"& seq[2 to inf] )
end;

procedure cmdseq( string seq );
begin
    if seq neq "O" then plot( seq );
    if equ(seq[1 to 2],"IP") then begin
	P1P2 := seq[3 to inf-1];
	return;
    end else
    if equ(seq,"OE;") then begin
	auxout( "0"& crlf );
	if ESC.E then begin
	    ESC.E := false;
	    PHASE := PHASE + 1;
	    FINISHED := PHASE geq 4;
	    if props(LOGIN) then outstr(
		case PHASE of (
		    [3] "Plotting..."& crlf,
		    [4] "Finished."& crlf,
		    [else] null
		));
	end;
	return;
    end else
    if equ(seq,"OP;") then begin
	auxout( P1P2& crlf );
	return;
    end else
end;

string S;

datum(LOGIN) := "WRS.PC";
props(LOGIN) := true;
argparse( any, plotfile, {login,trace}, args );
if not props(plotfile) then datum(plotfile) := "HPGL.DAT";
if props(login) then begin
    creaux( 4&datum(login) );
    if not !skip! then calli(0,10);
    auxSync("WRS.PC"& crlf, 10);
    print( "Ready for plot via ", datum(LOGIN), crlf );
end
else begin
    if props(TRACE) then usererr(0,0,"?must specify /LOGIN with /TRACE","X");
    auxcli( -1, '300, !axCFS );
    print( "Ready for plot via TTY:"& crlf );
end;
setprint( datum(plotfile), "F" );

do begin
    integer C;
    C := auxin land '177;
    if C = #sub then done;
    if PHASE = 0 then begin
	if props(LOGIN) then outstr( "Initializing..."& crlf );
	PHASE := 1;
    end;
    if (C = #esc) and length(S) then usererr( 0,0,
	"?escape in middle of sequence: """& S& """", "C" );
    S := S& C;
    if (S=#esc) and (length(S) geq 3) then begin
	if (C neq ":") and case S[3 to 3] of (
	    ["@"]["H"]["I"]["M"]["N"]["P"]["Q"]["S"]["T"] true,
	    [else] false ) then continue;
	if props(TRACE) then outstr( "<esc>"& S[2 to inf]& crlf );
	escseq( S );
	S := null;
	continue;
    end;
    if (S neq #esc) and (C=";") then begin
	if props(TRACE) then outstr( S& crlf );
	cmdseq( S );
	S := null;
	continue;
    end;
end until FINISHED;

print( crlf& "NR;"& crlf );
NCHARS := NCHARS + 7;
setprint( null, "T" );
print( datum(plotfile), ": ", NCHARS, " characters written" );

end $
