begin	"FREE - kill idle jobs to free up job slots"

require "(SAILIB)SAIL.DEF" source!file;
!get!definitions(GOGTAB);
!get!module(APPEND);
require "(MPL)UUOSYM.DEF" source!file;
require "(WRS)FLIMIT.REQ" source!file;
require "(WRS)ARGS.REQ" source!file;
require 7 version;

redefine !gtINA = -'55;		! inactivity timeout table;
define gettab(i,t) = {calli(!xwd(i,t),calli!GETTAB)};
external safe integer array GOGTAB[0:ENDREN];

integer	LogChan, E;

simple procedure PrintTrap( integer CHAN; string S );
begin
    out( LogChan, S );
    outstr( S );
end;

simple string procedure Queue(integer J);
begin "Q"
    own integer STS,ST,I;
    STS := gettab(J,!gtSTS);
    if STS geq 0 then return("^C");
    ST := STS lsh -21 land '37;
    I  :=  gettab(ST%3,!gtWSC) lsh (12*(ST mod 3)) land (-1 lsh 24);
    return(cv6str(I));
end "Q";

preload!with
    " ??? "," Jan "," Feb "," Mar "," Apr "," May ",
    " Jun "," Jul "," Aug "," Sep "," Oct "," Nov "," Dec ";
string array MONTH[0:12];

simple string procedure cvDate( integer DECD );
begin
    integer Y,M,D;
    D := DECD mod 31 + 1;
    M := DECD % 31 mod 12 + 1;
    Y := DECD % (31*12) + 64;
    if DECD < 0 or Y > 94
	then return( "?? ??? ??" );
    return( cvs(D) & MONTH[M] & cvs(Y) );
end;

simple string procedure cvTime( integer SECS );
begin
    integer A,B;
    string S;
    getformat( A,B );
    S := cvs( SECS % 3600 ) &  ":";
    setformat(-2,0);
    S := S & cvs( SECS % 60 mod 60 ) & ":" &
        cvs( SECS mod 60 );
    setformat( A,B );
    return( S );
end;

simple string procedure cvZone( integer Z,D(0),T(0) );
begin
    own safe integer array X[0:2];
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( Z, Z land '37 );
    calli( location(X[0]), calli!DATUUO );
    return( if X[1] neq T
	then case Z land '37 of (	! daylight time;
	    ['06] "HDT", ['10] "PDT", ['11] "MDT", ['12] "CDT",
	    ['13] "EDT", ['14] "ADT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] & "+" )
	else case Z land '37 of (	! standard time;
	    ['06] "HST", ['10] "PST", ['11] "MST", ['12] "CST",
	    ['13] "EST", ['14] "AST", ['20] "UT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] )   );
end;

string procedure TimeStamp;
!
    Date:
	Return current local date and time in form
		WWW, DD MMM YY HH:MM:SS ZZZ
	as recommended in RFC #822.
;
begin
    integer D;			! date - days past 1 Jan 1964, UT;
    integer T;			! time - tics past midnight UT;
    integer Z;			! zone - user local time zone w/daylight flag;
    string DOW;			! day of week (local);
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT       = '20;	! monitor's offset for UT;
    do begin
	D := calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
	T := calli( !xwd( !cnTIM, !gtCNF ), calli!GETTAB );
    end until D = calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
    Z := (calli(!xwd(-1,!gtPRV),calli!GETTAB) lsh (7-35)) land '77;
    if Z = 0 then Z := UT;	! default to Universal Time;
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( DaysPast+UT, DaysPast+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to local time;
    DOW := case X[0] mod 7 of ("Wed","Thu","Fri","Sat","Sun","Mon","Tue");
    X[2] := !xwd( DaysPast+Z, DecForm+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to DEC format;
    return(
	DOW& ", "&
	cvDate( X[0] )& " "&
	cvTime( X[1] % 60 )& " "&
	cvZone( Z, X[0],X[1] )   );
end;

comment
	Array PTRS[] is filled with pointers to records (REC) describing
	idle frames by procedure CollectData.  Procedure ShellSort then
	sorts these pointers such that the records are ordered by decreasing
	idle time.
;
record!class REC (
    integer JOB;		! frame number;
    integer UID;		! universal frame ID;
    integer IDLE;		! idle time in minutes;
    string  USER;		! user name;
    string  PROG;		! program name;
    string  STAT;		! program state;
    string  MSG			! message buffer;
);
	
define MaxPtrs = 128;		! never more than 128 jobs in Tymcom-X;
r!p(rec) array Ptrs[1:MaxPtrs];	! pointers to job data blocks;
integer NPtrs;			! number of job data blocks;

integer item CYCLE;	! cycle period;
integer item FREE;	! number of jobs to free;
real item IDLE;		! threshold for idle time (hours);
string item IMMUNE;	! immune user list;
item KILL;		! true to actually kill jobs;
string item LOGFILE;	! place to put log;
integer item LOGSIZE;	! maximum size of log;
boolean DAEMON;		! run by (SYS)XEXEC;

procedure ProcessCommands;
begin
    integer PFD;		! parent frame descriptor;
    datum(IDLE) := 0.5;		! default idle time;
    datum(CYCLE) := 5;		! default cycle is 5 minutes;
    datum(LOGFILE) := ARGV[0]& ".LOG";	! default log file;
    datum(LOGSIZE) := 20;	! default log file size in pages;
    datum(FREE) := 10;		! default number of frames to free;
    PFD := gettab( -1, !gtFTR ) lsh (11-35);
    DAEMON := !SKIP! and PFD
	and gettab( PFD, !gtNAM ) = cvsix("XEXEC")
	and gettab( PFD, !gtFPN ) = !xwd(1,4);
    if DAEMON and ArgC = 1 then
	Args := "/FREE/KILL";
    if not ArgParse( LOGFILE, ANY, 
	{CYCLE,FREE,IDLE,IMMUNE,KILL,LOGSIZE},
	Args ) then calli(0,calli!EXIT);
    if props(KILL) then props(LOGFILE) := 1;
    if not DAEMON
    and props(KILL)
    and 0=( gettab(-1,!gtLIC) land !lh(LC!WC) ) then
	usererr(0,0,"?license required: WC","X");
end;

integer UserBreak;
simple procedure ubrkini;
setbreak( UserBreak_getbreak, ", ", " ", "TISK" );
require ubrkini initialization;

simple boolean procedure is!immune( string User );
begin
    string IUL,U1,U2;
    integer B;
    U1 := scan( User, UserBreak, B );
    IUL := "OPER,"& datum(IMMUNE);
    while length(IUL) do begin
	U2 := scan( IUL, UserBreak, B );
	if equ( U1, U2 ) then return( true );
    end;
    return( false );
end;

procedure KJOB( r!p(REC) P );
begin
    if rec:UID[p] neq gettab(rec:JOB[p],!gtUID) then begin
	print( "  ?UID mismatch" );
	return;
    end;
    if calli( !xwd(1,rec:JOB[p]), calli!EVICT ) then begin
	print( "  evicted" );
	return;
    end;
    calli( !xwd(3,rec:JOB[p]), calli!HANG );
    if !SKIP! then begin
	print( "  killed" );
	return;
    end;
    print( "  ?HANG UUO failure" );
end;

comment
	Diminishing Increment Sort 	[Shell 59, Knuth 73: 5.2.1D]

	HS[] contains increment sequence per [Knuth 73: 5.2.1(8)]
	MaxPtrs is the extent of the pointer array
;
define #t=1, #h=1;
preload!with
    whilec { #h < MaxPtrs } doc {
	#h,
	redefine #t=#t+1, #h=3*#h+1;
    } endc #h;
integer array hs[1:#t];

procedure ShellSort;
begin
    r!p(rec) P;
    integer s,h,i,j;
    for s := #t-1 downto 1 do if hs[s+1] < NPtrs then begin
	h := hs[s];
	for j := h+1 upto NPtrs do begin
	    i := j-h;
	    P := Ptrs[j];
	    while i > 0 and rec:Idle[P] > rec:Idle[Ptrs[i]] do begin
		Ptrs[i+h] := Ptrs[i];
		i := i - h;
	    end;
	    Ptrs[i+h] := P;
	end;
    end;
end;

integer JOBN;		! number of job slots in monitor;
integer HighJob;	! highest current job number;
integer FreeCnt;	! number of free job slots;

procedure CollectData;
begin
    integer J;
    NPtrs := 0;
    JOBN := gettab(!cnNJB,!gtCNF);
    HighJob := gettab(!nsHJB,!gtNSW);
    if not !SKIP! then usererr(0,0,"?license required: WC HF SY","X");
    FreeCnt := JOBN;
    for J := 1 upto HighJob do begin
	integer JBTSTS;
	JBTSTS := gettab(J,!gtSTS);
	if !SKIP! and JBTSTS land jb!LOG then begin
	    integer T;
	    FreeCnt := FreeCnt -1;
	    T := !rh(gettab(J,!gtINA));
	    if !SKIP! and T > 0 then begin
		r!p(rec) P;
		P := new!record( REC );
		Ptrs[ NPtrs := NPtrs + 1 ] := P;
		rec:Job[P] := J;
		rec:UID[P] := gettab(J,!gtUID);
		rec:Idle[P] := T;
		rec:User[P] := cvxstr(gettab(J,!gtUNM))&
		   cvxstr(gettab(J,!gtUN1));
		rec:Prog[P] := cvxstr(gettab(J,!gtNAM));
		rec:Stat[P] := Queue(J);
	    end;
	end;
    end;
end;

begin	"MAIN"
    integer N;
    label RERUN;
    ProcessCommands;
    if props(LOGFILE) then begin
	open( LOGCHAN := getchan, "DSK", 0,4,4, 0,0,E );
	GOGTAB[$$PROU] := location( PrintTrap );
    end;
RERUN:
    if props(LOGFILE) then begin
	flimit( datum(LOGFILE), datum(LOGSIZE) );
	append( LogChan, datum(LOGFILE), E );
	if E then usererr(E,2,"?unable to append "& datum(LOGFILE)& ": ","X");
    end;
    CollectData;
    ShellSort;
    setformat( 0, 0 );
    print( TimeStamp, "; ",
	FreeCnt, " jobs free out of ", JOBN,
	" (", FreeCnt*100%JOBN, "%)."& crlf );
    setformat( 3, 0 );
    for N := 1 upto NPtrs do begin
	r!p(rec) P;
	P := Ptrs[N];
	if props(IDLE) and rec:Idle[P] < 60*datum(IDLE) then done;
	if props(FREE) and FreeCnt geq datum(FREE) then done;
	print(
	    rec:Job[P], "  ",
	    rec:User[P], "  ",
	    rec:Prog[P], "  ",
	    rec:Stat[P],
	    rec:Idle[P] % 60, "h",
	    rec:Idle[P] mod 60, "m" );
	if equ( rec:Stat[P], "^C" )
	and not is!immune( rec:User[P] ) then begin
	    if props(KILL)
		then KJOB( P )
		else print( "  *" );
	    FreeCnt := FreeCnt + 1;
	end;
	print( crlf );
    end;
    if props(FREE) and FreeCnt < datum(FREE) then
	print( "%unable to free requested capacity"& crlf );
    if props(LOGFILE) then
	close( LogChan );
    if props(CYCLE) then begin
	calli( !xwd(2,datum(CYCLE)), calli!HIBER );
	goto RERUN;
    end;
    if DAEMON
	then calli(0,calli!LOGOFF)
	else calli(0,calli!EXIT);
end	"MAIN"
end $

  