PMUD   IDENT   2/12/78  NEW MUD FORMAT


       BRU START; BRS 10

MSG    POPD 100B5,2
       STP SAVA; STX SAVX; EAX* 0; CXA; ETR =37777B; LDB =-1; LDX =1; BRS 34
POPRET LDP SAVA; LDX SAVX; BRR 0
SPACE  POPD 101B5,2
       STP SAVA; STX SAVX; EAX* 0; CXA; ETR =37777B; CNA; CAX
       CLA; CIO FNO; BRX *-1; BRU POPRET
SAVA   ZRO
SAVB   ZRO
SAVX   ZRO


START  MSG M1 (INPUT FROM MUD FILE); CLA; BRS 62; BRU START; STA MF
S1     MSG M2 (OUTPUT TO); CLA; LDX =3; BRS 63; BRU S1; STA FNO
       LDA =-1; STA BLK
LOOP   MIN BLK; LDA BLK; SKG =2047; BRU *+2; BRU THRU
       BRM RBLK; LDP HMUDPT; STP MUDPTR
LOOP2  BRM LOOKUP
       BRU LOOP (END OF DATA IN CURRENT MUD BLOCK)
       BRM PBLNO (PRINT BLOCK NO)
       BRM PGAN (PRINT GAN)
       BRM PUUN (PRINT UUN)
       BRM PHOME (PRINT HOME)
       BRM PNAME (PRINT USER NAME)
       BRM PDIST (PRINT DISTRICT)
       BRM PCPARW (PRINT CPARW)
       BRU NXREC


SIZCLS EQU 8                   MAXIMUM SIZE OF CLASS
NCLS EQU 11                    MAXIMUM NO. OF CLASSES
SIZBLK EQU 682

MUDPTR  BSS 2                  POINTER TO MUDBUF
POSPTR BSS 2                   SAVE POINTER TO CURRENT ENTRY

*SPECIFIC BUFFERS (VALUES SHOULD BE LEFT JUSTIFIED)
NAMBF  BSS 7                   ;*BUFFER FOR USER NAME
ZERLK1 EQU *
PASBUF BSS 3               ;*PASSWORD
GANBUF BSS 2               ;*GLOBAL ACCOUNT NUMER
UUNBUF BSS 2               ;*UNIVERSAL USER NUMBER
CPARBF BSS 1               ;*CPARW WORD
OPTBUF BSS 1               ;*OPTION BITS
DISBUF BSS 1               ;*DISTRICT NUMBER
IRCBUF  BSS 1               ;*IRC NUMBER
PDATBF BSS 1               ;*PASSWORD CHANGE DATE
CLASS BSS SIZCLS*NCLS          BUFFER TO HOLD CLASS INFORMATION
ZERLK2 EQU *-ZERLK1


*START STORAGE

HMUDPT DATA 3*MUDBUF-1,3*MUDBUF-1+2044
HOFLPT DATA 3*OVFLOW-1,3*OVFLOW-1+3               ;*POINTER TO OVERFLOW FLAG
HNMPTR  DATA 3*NAMBF-1,3*NAMBF-1
HPSPTR  DATA 3*PASBUF-1,3*PASBUF-1
HGPTR  DATA 3*GANBUF-1,3*GANBUF-1
HUPTR  DATA 3*UUNBUF-1,3*UUNBUF-1
HCPPTR DATA 3*CPARBF-1,3*CPARBF-1
HOPTPT DATA 3*OPTBUF-1,3*OPTBUF-1
HDISPT DATA 3*DISBUF-1,3*DISBUF-1
HIRCPT DATA 3*IRCBUF-1,3*IRCBUF-1
HDATPT DATA 3*PDATBF-1,3*PDATBF-1
HRECPT DATA 3*BUFFER-1,3*BUFFER-1
HUSRPT DATA 3*USRBUF-1,3*USRBUF-1
HNUSPT DATA 3*NUSBUF-1,3*NUSBUF-1

BUFSIZ EQU 3600                SIZE OF BUFFER

*SPECIFIC POINTERS TO BUFFERS
ZERPTR EQU *
NMPTR  BSS 2  POINTER TO USER NAME (MUST BE FULL 732 WORDS)
PASPTR BSS 2
GANPTR BSS 2
UUNPTR BSS 2
CPPTR  BSS 2
OPTPTR BSS 2
DISTPT BSS 2
IRCPTR BSS 2
DATEPT BSS 2
RECPTR BSS 2
RCLSIZ EQU *-ZERPTR              ;*LABEL FOR CLEARING INTERVENING POINTERS

732FIL ZRO 0                   CHANNEL FOR 732 MUD CHANGE FILE
732PTR BSS 2                   POINTER TO START AND END OF CHANGE IN MUDBUF
BLK    ZRO 0                   CURRENT MUD BLOCK
BUFFER BSS BUFSIZ              INPUT AND WORKING BUFFER
CLSDEX ZRO 0                   INDEX INTO CLASS TO SAVE CLASS WE JUST FOUND
CUST  ZRO 0                    CUSTOMER NUMBER
DATPTR BSS 2                   POINTER TO BEGINNING OF DATA IN RECORD
DAY ZRO
ER     ZRO 0                   RETURN CODE (MAY BE ERROR)
FBUF   BSS 10                  BUFFER FOR FILE DIR. INFO

*GET A STRING OF CHARACTERS  STRING POINTERS IN A B AND NO. CHARS IN X
*UPON ENTRY
*UTEMPD STRING POINTERS IN A B ON EXIT
GTSTG ZRO; STP WKPTR
GSTG1   BRM GTCHAR; WCI WKPTR; BRX GSTG1
       LDP WKPTR; BRR GTSTG





*GET A CHARACTER FROM MUDBUF
GTCHAR ZRO; SKR NBYTES; BRU *+2; HLT 0 (END OF RECORD)
       GCI MUDPTR; HLT 0 (BAD FORMAT); BRR GTCHAR



*RETRIEVE CLASS INFO FROM MUD ENTRY AND WRITE IN
*A/ ADDRESS FOR CLASS
*RETURN/ NO MORE CLASSES
*RETURN+1/ FOUND AND SAVED INFO FOR CLASS
*ORGANIZE AS FOLLOWS
*WORD 0: NO. OF GROUPS
*WORD 1: CLASS
*WORD 2: GROUP
*   REPEAT GROUPS
GCLASS ZRO; STA TEMP
       BRM GTCHAR; SNE =377B; BRR GCLASS (NO MORE, END OF RECORD FOUND)
*SAVE NO. OF GROUPS RIGHT JUSTIFIED IN FIRST WORD
       MIN NWCLAS; STA T2; BRM CMGRPS; STA* TEMP
*SAVE CLASS
       MIN TEMP; LDA T2; ETR =17B; CLB; LSH 8; STA* TEMP
       BRM GTCHAR; MIN NWCLAS; ADM* TEMP
*SAVE GROUPS
       LDA NGRPS; SUB =1; STA NGRPS
GCLS1  MIN TEMP; BRM GTCHAR; MIN NWCLAS; CLB; LSH 8; STA* TEMP
       BRM GTCHAR; MIN NWCLAS; ADM* TEMP
       SKR NGRPS; BRU GCLS1; MIN GCLASS; BRR GCLASS


*COMPUTE NO. OF GROUPS IN THIS CLASS
CMGRPS ZRO; LRSH 4; SUB =2; LRSH 23; DIV =2; STA NGRPS; BRR CMGRPS


*READ A BLOCK OF THE MUD
*BLOCK NUMBER TO BE READ IN BLK
RBLK   ZRO; LDA BLK; MUL =SIZBLK*3; LSH 23; SCP MF; HLT
       LDA =SIZBLK; LDX =MUDBUF; BIO MF; NOP; BRR RBLK

*PRINT BLOCK NO

PBLNO  ZRO; MIN USRCNT
       LDA BLK; BRM JDNO; BRM PDNO; SPACE 2; BRR PBLNO

PGAN   ZRO; LDP GANPTR; BRM GTNUM; BRM JONO; BRM PONO; SPACE 2; BRR PGAN
PUUN   ZRO; LDP UUNPTR; BRM GTNUM; BRM JONO; BRM PONO; SPACE 2; BRR PUUN

PHOME  ZRO; CLA; STA INDEX
PHOM1  LDX INDEX; LDA CLASS,2; SNE =0; BRU PHOM2 (NO MORE CLASSES)
       LDA CLASS+2,2; SKA =1B5; BRU PHOM4
       LDA CLASS+3,2; SKA =1B5; BRU PHOM4; LDA =8; ADM INDEX
       BRU PHOM1
PHOM2  LDA =0
PHOM3  BRM JDNO4; BRM PDNO; SPACE 2; BRR PHOME
PHOM4  ETR =37777B; BRU PHOM3

PNAME  ZRO; LDA =NAMBF; LDX FNO; LDB =12; BRS 34; SPACE 2; BRR PNAME

PDIST  ZRO; LDA DISBUF; LRSH 8; BRM JDNO4; BRM PDNO; SPACE 2; BRR PDIST

PCPARW ZRO; LDA CPARBF; LRSH 12; BRM JONO4; BRM PONO; LDA =155B; CIO FNO
       BRR PCPARW
JDNO   ZRO; SKG =9; SPACE 1; SKG =99; SPACE 1; SKG =999; SPACE 1; BRR JDNO
JONO   ZRO; SKG =7; SPACE 1; SKG =77B; SPACE 1; SKG =777B; SPACE 1
       SKG =7777B; SPACE 1; SKG =77777B; SPACE 1; BRR JONO
JDNO4  ZRO; SKG =9; SPACE 1; SKG =99; SPACE 1; SKG =999; SPACE 1; BRR JDNO4
JONO4  ZRO; SKG =7; SPACE 1; SKG =77B; SPACE 1; SKG =777B; SPACE 1; BRR JONO4

GTNUM  ZRO; STP WKPTR; GCI WKPTR; HLT 0; GCI WKPTR; HLT 0; CLB; LSH 16
       STA T2; GCI WKPTR; HLT 0; LSH 8; ADM T2; GCI WKPTR; HLT 0
       MRG T2; BRR GTNUM

PDNO   ZRO; STP SAVA; STX SAVX; LDB =10; LDX FNO; BRS 36; LDP SAVA
       LDX SAVX; BRR PDNO
PONO   ZRO; STP SAVA; STX SAVX; LDB =8; LDX FNO; BRS 36; LDP SAVA
       LDX SAVX; BRR PONO

*FINDS ENTRY IN BLOCK WHICH HAS BEEN PREVIOUSLY READ INTO MUDBUF
*GETS AN ENTRY FROM MUDBUF, NO SKIP RETURN INDICATES END OF DATA IN
*MUDBUF
*SKIP RETURNS WITH ENTRY STORED IN CELLS BEGINNING WITH NAMBF
LOOKUP ZRO
LKUP1  LDP MUDPTR; STP POSPTR (SAVE PTR TO THIS ENTRY); LDP HNMPTR
       STP NMPTR (INIT PTR TO SAVE USER NAME)
       CLA; STA NAMESW (SET NAME SWITCH TO INDICATE LAST WORD NOT FOUND)
       GCI MUDPTR; BRR LOOKUP (CHECK FOR OVERFLOW)
       SNE =0; BRR LOOKUP (CHECK FOR OVERFLOW)
       STA SIZREC; SUB =4; STA NBYTES (NO. OF BYTES IN RECORD)
       GCI MUDPTR; BRR LOOKUP; GCI MUDPTR; BRR LOOKUP; GCI MUDPTR; BRR LOOKUP
LKUP2  BRM GTCHAR; SKA =2B2 (TEST FOR LAST WORD IN NAME)
       BRU *+2; BRU *+3; SKR NAMESW; BRU *-1 (SET SWITCH TO INDICATE IT IS)
       BRM CONV; WCI NMPTR (SAVE CHAR IN NAMBF); LDX =-3
LKUP3  BRM GTCHAR
       BRM CONV
       WCI NMPTR; BRX LKUP3; SKN NAMESW; BRU LKUP2 (END NAME NOT FOUND)
       LDA =ZERLK2; CNA; CAX; CLA; STA ZERLK1+ZERLK2,2; BRX *-1
       LDA =RCLSIZ; CNA; CAX; CLA; STA ZERPTR+RCLSIZ,2; BRX *-1
       LDA MUDPTR; CAB; STP DATPTR
*SET UP PASSWORD IN PASBUF
       LDP HPSPTR; LDX =-8; BRM GTSTG; STP PASPTR
*SET UP GAN IN GANBUF
       LDP HGPTR; LDX =-4; BRM GTSTG; STP GANPTR
*SET UP UUN IN UUNBUF
       LDP HUPTR; LDX =-4; BRM GTSTG; STP UUNPTR
*GET FIRST 8 BITS OF CPARW - LEFT JUSTIFY IT IN CPARBF
       LDP HCPPTR; STP CPPTR; BRM GTCHAR; WCI CPPTR
*GET LAST 4 BITS OF CPARW, 4 BITS OF OPTIONS, AND SAVE CPARW
       BRM GTCHAR; CLB; LRSH 4; CBX; CLB; LSH 4; WCI CPPTR
*SAVE OPTIONS - LEFT JUSTIFIED
       LDP HOPTPT; STP OPTPTR; CXB; CLA; LSH 8; WCI OPTPTR
*GET FIRST 4 BITS OF DISTRICT AND SAVE
       LDP HDISPT; STP DISTPT; BRM GTCHAR; ETR =17B; WCI DISTPT
*GET NEXT 8 BITS OF DISTRICT AND SAVE
       BRM GTCHAR; WCI DISTPT
*GET AND SET UP IRC NUMBER IN IRCBUF
       LDP HIRCPT; STP IRCPTR; BRM GTCHAR; WCI IRCPTR
*GET PASSWORD CHANGE DATE AND SET UP IN PDATBF
       LDP HDATPT; LDX =-3; BRM GTSTG; STP DATEPT
*GET CLASS STRINGS AND SET UP IN BUFFERS CLASS, CLASS2, ETC   MAX 10
       LDA =CLASS; STA INDEX
       BRM GCLASS; BRU LKUP4; LDA INDEX; ADD =SIZCLS; STA INDEX; BRU *-5
LKUP4  MIN LOOKUP; BRR LOOKUP



*GET NEXT RECORD
NXREC  SKR LOOKUP; NOP
       LDX =-7; CLA; STA NAMBF+7,2; BRX *-1
       LDP POSPTR; ADD SIZREC; STA MUDPTR; BRU LKUP1
THRU   MSG M3 (NUMBER OF USER IN MUD); LDA USRCNT; BRM TDNO
       MSG EOJ; BRS 10
TDNO   ZRO; LDX =1; LDB =10; BRS 36; BRR TDNO

CONV   ZRO; ETR =177B; SKG =0; BRR CONV
       SKG =37B; BRU *+3; SUB =40B; BRR CONV; ADD =140B
       BRR CONV


NAMESW ZRO 0                   NEG IF LAST WORD OF NAME HAS BEEN FOUND
NBYTES ZRO 0                   NUMBER OF BYTES
MUDBUF BSS SIZBLK-1            ;*BUFFER FOR A MUD BLOCK
OVFLOW BSS 1                   LAST WORD OF MUD BUFFER CONTAINING LAST 3 BYTES
SIZREC ZRO               ;*RECORD SIZE
NUSBUF BSS 7                   NEW USER NAME BUFFER
USRBUF BSS 7                   BUFFER FOR USER NAME
INDEX ZRO 0                    MISCELLANEOUS INDEX
WKPTR  BSS 2               ;*WORKING POINTER
NGRPS  ZRO 0                   NO. OF GROUPS IN ENTRY
NWCLAS ZRO 0
T2     ZRO 0                   TEMPORORY
TEMP   ZRO 0                   TEMPORARY
MF     ZRO;*  INPUT FILE NUMBER
FNO    ZRO;*  OUTPUT FILE NUMBER
USRCNT ZRO;* COUNT OF USERS IN MUD

M1     ASC '$INPUT FROM MUD FILE: /'
M2     ASC '$OUTPUT TO: /'
M3     ASC '$$NUMBER OF USERS IN MUD: /'
EOJ    ASC '$$EOJ$/'
  