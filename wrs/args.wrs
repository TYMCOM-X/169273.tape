entry ARGS,ARGC,ARGV;
begin

require "(SAILIB)SAIL.DEF" source!file;

internal string array ARGV[0:35];
internal integer ARGC;
internal string ARGS;

simple procedure GetFpn;
begin
    ARGV[0] := cv6str( calli( !xwd( -1,3 ), '41 ));	! GETTAB JBTNAM;
    ARGC := 0;
end;

procedure ArgIni;
begin
    boolean	CommandAvailable;
    begin!code
	protect!acs 1;
	SETO	1,;
	TTCALL	6,1;		! GETLCH for own port;
	SETZM	CommandAvailable;
	TLNE	1,'100000;	! check for rescan line available;
	 SETOM	CommandAvailable;
    end;
    if CommandAvailable then begin
	backup;
	ARGS := inchwl;
    end;
    if not CommandAvailable then begin
	integer array X[0:1],BUF[0:127];
	integer N;
	X[0] := calli(!xwd(-1,3),'41) land !xwd(-1,0);	! TMPCOR file name;
	X[1] := !xwd(-128,location(BUF[0])-1);		! buffer IOWD;
	N := calli(!xwd(2,location(X[0])),'44);		! read & delete;
	if CommandAvailable := !SKIP! then begin
	    integer I;
	    ARGS := null;
	    for I := 0 upto N-1 do
		ARGS := ARGS& cvstr(BUF[i]);
	end;
    end;
    if not CommandAvailable then begin
	integer C,B,E;
	string JOB,JBTNAM;
	JOB := cvs(1000+calli(0,'30))[2 for 3];		! job number;
	JBTNAM := cv6str(calli(!xwd(-1,3),'41));	! program name;
	open(C:=getchan,"DSK",0,1,0,640,B,E);
	if E then usererr(E,2,"?ARGS: unable to open DSK: ","X");
	lookup(C,JOB&JBTNAM&".TMP",E);
	if CommandAvailable := not E then begin
	    ARGS := input(C,0);
	    while not E do ARGS := ARGS& input(C,0);
	    rename(C,null,0,E);
	end;
	release(C);
    end;
    if CommandAvailable then begin
	string S,C;
	integer B,TokenBreak,QuoteBreak,CommandBreak;
	setbreak(TokenBreak:=getbreak,""" "&#ht," "&#ht,"TIR");
	setbreak(QuoteBreak:=getbreak,"""",null,"IS");
	setbreak(CommandBreak:=getbreak,
	    " !@#$%^&*()_+~-=`{}|[]\:"";'<>?,./"&#ht," "&#ht,"TKIR");
	ARGV[0] := C := scan( ARGS, CommandBreak, B );
	if equ(C,"RUN"[1 to length(C)])
	or equ(C,"GO")
	or equ(C,"START"[1 to length(C)]) then begin
	    do begin
		ARGV[0] := scan( ARGS, CommandBreak, B );
		lop( ARGS );
	    end until length(ARGS)=0 or B=";";
	end;
	ARGC := 1;
	S := ARGS;
	while length(S) do begin
	    if length( ARGV[ARGC] := scan( S, TokenBreak, B ) ) = 0
	    and B = """" then begin
		lop(S);
		ARGV[ARGC] := scan( S, QuoteBreak, B );
		while S = """" do begin
		    lop(S);
		    ARGV[ARGC] := ARGV[ARGC]& """"& scan( S, QuoteBreak, B );
		end;
	    end;
	    if B or length(ARGV[ARGC]) then ARGC := ARGC + 1;
	end;
	relbreak(TokenBreak);
	relbreak(QuoteBreak);
	relbreak(CommandBreak);
    end
    else GetFpn;
end;

simple procedure ArgIniSimple;
    ArgIni;
require ArgIniSimple initialization;

end $
