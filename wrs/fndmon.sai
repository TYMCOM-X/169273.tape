integer MNB1,MNB2,MNB3,MNB4;

simple procedure IniBreak;
begin
    setbreak(MNB1_getbreak,"-",null,"SINK");
    setbreak(MNB2_getbreak,"0123456789",null,"RINK");
    setbreak(MNB3_getbreak,"/",null,"SINK");
    setbreak(MNB4_getbreak,"-0123456789",null,"RINK");
end;
require IniBreak initialization;

simple integer procedure ParseMon (
	integer array ConFig;
	reference string A,B,C,N );
!
	C37-P033/FA01-2
         NN  AAA B CC
;
begin
    own string S;
    own integer I;
    S _ null; 
    for I _ 0 step 1 until 4
	do S _ S& cvastr(ConFig[i]);
    scan(S,MNB2,I);
    N_("00"&scan(S,MNB1,I))[inf-1 for 2];
    scan(S,MNB2,I);
    A_scan(S,MNB3,I);
    B_scan(S,MNB4,I)[1 to 1];
    C_scan(S,MNB1,I);
    return(cvsix(A&B&C));
end ;

record!class	ST (
	integer	MonID;		! monitor id;
	r!p(a!c)Link;		! link to next MonSym block;
	boolean	HaveSym;	! we have a valid symbol table;
	integer array SymTab );	! symbol table;

r!p(ST) SymTop;			! head of list of symbol tables;

r!p(ST) procedure FndSymTab (
	integer array Mconfig );
begin
    integer MonID,Chan,Brk,Eof,FC,SymbolPtr,ConFigAdr;
    integer array Config[0:4];
    string FileName;
    r!p(ST) M;
    string A,B,C,N;
    MonID _ ParseMon (Mconfig, A,B,C,N);
    M _ SymTop;
    while M do if ST:MonID[m] = MonID then return(M);
    M _ new!record(ST);
    ST:link[m] _ SymTop;
    ST:MonID[m] _ MonID;	   
    ST:HaveSym[m] _ false;
    SymTop _ M;
    open (Chan_getchan,"DSK",'14,2,0, 0,0,Eof);
    FC _ 0;
    while not ST:HaveSym[m] begin "NextFile"
	FC _ FC +1;
	case FC of begin
	    [1] FileName _ "(M33)"&N&(if C then "X"&C else B)&".SAV";
	    [2] FileName _ "(M33)FD"&(if C then "X"&C else B)&".SAV";
	    [3] FileName _ "(SYS)SYSTEM.SAV";
	    [4] FileName _ "(SYS)NEWMON.SAV";
	    [5] FileName _ "(SYS)BACKUP.SAV";
	    [6] FileName _ "(SYS)OLDMON.SAV";
	    else done "NextFile"
	end;
	lookup (Chan, FileName, Eof);
	if Eof then continue "NextFile";
	ConfigAdr _ SymbolPtr _ 0;
	WordCnt _ WordAdr _ -1;
	arrclr (Config);
	while not Eof do 
	begin "NextBlock"
	    Word _ wordin (Chan);
	    WordAdr _ WordAdr + 1;
	    WordCnt _ WordCnt + 1;
	    if WordCnt
	      then begin "DataWord"
		if WordAdr = JobSym then SymbolPtr _ Word;
		if FC>2 and WordAdr = JobVer 
		    then ConfigAdr _ rh(Word);
		if FC>2 and
		    (WordAdr-ConfigAdr geq arrinfo(Config,1)) and
		    (WordAdr-ConfigAdr leq arrinfo(Config,2)) 
		    then begin
			Config[WordAdr-ConfigAdr] _ Word;
			if  WordAdr-ConfigAdr = arrinfo(Config,2) then begin
			    string A,B,C,N;
			    if ParseMon(CONFIG, A,B,C,N) neq MonID
				then done "NextBlock";
			end;
		end;
		if WordAdr = rh(SymbolPtr) then begin "allocate"
		    integer array A[1:lh(-SymbolPtr)];
		    memloc(A) swap memloc(ST:SymTab[m]);
		end "allocate";
		if  (WordAdr geq rh(SymbolPtr) and
		    (WordAdr-rh(SymbolPtr) leq arrinfo(ST:SymTab[m],2))
		    then ST:SymTab[m][WordAdr-rh(SymbolPtr)] _ Word;
	      end "DataWord"
	      else begin "IOWord"
		WordAdr _ rh(Word);
		WordCnt _ (Word ash -18)-1;
	      end "IOWord";
	    if	SymbolPtr and 
		(WordAdr > rh(SymbolPtr)+arrinfo(ST:SymTab[m],2))
		then begin
		    ST:HaveSym[m] _ true;
		    done "NextBlock";
		end;
	end "NextBlock";
	close (Chan);
    end "NextFile";
    release (chan);
    
end;
