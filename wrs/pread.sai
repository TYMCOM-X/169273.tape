begin

require "(sailib)sail.def" source!file;
require "(wrs)args.req" source!file;
require "(mpl)uuosym.sai" source!file;

integer C,B,E,F;
item ALL,GMT,UT;
integer item WIDTH;
string item OUTFILE;
integer array LUB[0:40];

procedure lookup( integer CHAN; string FILE; reference integer ERROR );
begin
    LUB[0] := 40;
    LUB[2] := cvfil( FILE, LUB[3], LUB[1] );
    chnior( CHAN, LUB[0], 4 );
    ERROR := not !SKIP!;
end;

preload!with
    " ??? "," Jan "," Feb "," Mar "," Apr "," May ",
    " Jun "," Jul "," Aug "," Sep "," Oct "," Nov "," Dec ";
string array MONTH[0:12];

simple string procedure cvDate( integer DECD );
begin
    integer Y,M,D;
    D := DECD mod 31 + 1;
    M := DECD % 31 mod 12 + 1;
    Y := DECD % (31*12) + 64;
    if DECD < 0 or Y > 94
	then return( "?? ??? ??" );
    return( cvs(D) & MONTH[M] & cvs(Y) );
end;

simple string procedure cvTime( integer SECS );
begin
    integer A,B;
    string S;
    getformat( A,B );
    S := cvs( SECS % 3600 ) &  ":";
    setformat(-2,0);
    S := S & cvs( SECS % 60 mod 60 ) & ":" &
        cvs( SECS mod 60 );
    setformat( A,B );
    return( S );
end;

simple string procedure cvZone( integer Z,D(0),T(0) );
begin
    own safe integer array X[0:2];
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( Z, Z land '37 );
    calli( location(X[0]), calli!DATUUO );
    return( if X[1] neq T
	then case Z land '37 of (	! daylight time;
	    ['06] "HDT", ['10] "PDT", ['11] "MDT", ['12] "CDT",
	    ['13] "EDT", ['14] "ADT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] & "+" )
	else case Z land '37 of (	! standard time;
	    ['06] "HST", ['10] "PST", ['11] "MST", ['12] "CST",
	    ['13] "EST", ['14] "AST", ['20] "UT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] )   );
end;

string procedure CreationDate;
begin
    integer D;			! date - days past 1 Jan 1964, UT;
    integer T;			! time - tics past midnight UT;
    integer Z;			! zone - user local time zone w/daylight flag;
    string DOW;			! day of week (local);
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT!      = '20;	! monitor's offset for UT;
    D := ( LUB[4] land '7777 ) lor
	(( LUB[3] land ('3 lsh (35-21))) lsh (21-23));
    T := 60*60* (( LUB[4] land ('3777 lsh (35-23))) lsh (23-35)) +
	60* (( LUB['14] land ('77 lsh (35-17))) lsh (17-35));
    Z := (calli(!xwd(-1,!gtPRV),calli!GETTAB) lsh (7-35)) land '77;
    if props(GMT) or props(UT) or Z = 0 then Z := UT!;
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( DaysPast+UT!, DaysPast+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to local time;
    DOW := case X[0] mod 7 of ("Wed","Thu","Fri","Sat","Sun","Mon","Tue");
    X[2] := !xwd( DaysPast+Z, DecForm+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to DEC format;
    return(
	DOW& ", "&
	cvDate( X[0] )& " "&
	cvTime( X[1] % 60 )& " "&
	cvZone( Z, X[0],X[1] )   );
end;

integer DULCHL,DULEOF,DULBLK;
integer array DULARY[0:127];
define DULHSH = 101;

simple procedure INIDUL;
begin
    DULCHL _ DULBLK _ -1;
end;
require INIDUL initialization;

internal string procedure LOKDUL( integer PPN );
begin	"LOKDUL"
    integer I;
    string ST;
    simple string procedure BRKPPN( integer PPN );
    return( "["& cvos(PPN LSH -18)& ","& cvos(PPN LAND '777777)& "]" );

    if DULCHL<0 then open( DULCHL_getchan,"DSK",'16,0,0,DULEOF,DULEOF,DULEOF);
    if DULBLK<0 then lookup( DULCHL, "DUL.SYS[1,4]", DULEOF );
    if DULEOF neq 0 then return( BRKPPN(PPN) );
    useti( DULCHL, I_PPN mod DULHSH+1 );
    while true do begin "ARRSRC"
	if I neq DULBLK then arryin( DULCHL, DULARY[0], 128 );
	DULBLK := I;
	for I := 0 step 3 until 127 do
	    if DULARY[I] = PPN then done "ARRSRC"
	    else if DULARY[I] = 0 then return( BRKPPN(PPN) )
	    else if DULARY[I] < 0 then done;
	useti( DULCHL, I_DULARY[I] LAND '777777+1 );
    end "ARRSRC";
    ST := cvxstr( DULARY[I+1] )& cvxstr( DULARY[I+2] );
    while ST[inf for 1] = " " do ST := ST[1 for inf-1];
    return( ST& ":"& cvs(calli(!xwd('33,'11),'41)) );
end	"LOKDUL";

string procedure UserName;
begin
    return( LOKDUL( LUB[!rbAUT] ));
end;

integer BreakTab,LOL;
define CtlChrs = {0&1&2&3&4&5&6&7&8&9&10&11&12&14&15&16&17&18&19&20&21&22&
    23&24&25&26&27&28&29&30&31&127};
setbreak(BreakTab:=getbreak,CtlChrs,#cr,"SIN");
open(C_getchan,"DSK",'1,4,4,2560,B,E);
argparse(any,OUTFILE,{ALL,GMT,UT,WIDTH},args);
if args="?" then calli(0,calli!EXIT);
LOL := if props(WIDTH)
    then datum(WIDTH)
    else auxclv( -1, -1, !axWID );
lookup(C,"PREAD.MKR",E);
if E or props(ALL)
    then F _ cvsix("PTAPAA")-1
    else F _ cvo(input(C,0));
close(C);
if props(OUTFILE) then setprint( datum(OUTFILE), "B" );
do begin
    string Heading;
    F _ F +1;
    lookup(C,"(WRS)'"&cvos(F)&".LOG",E);
    if not E then begin
	integer Line,Page;
	string Text;
	Heading := #ff& crlf& cv6str(F)& ".LOG     "&
	    CreationDate& "     "& UserName& "     Page ";
	Line := 66; Page := 0;
	Text := null; B := 0;
	while not E do begin
	    recursive procedure printl( string Text );
	    begin
		while length( Text ) > LOL do begin
		    printl( Text[1 to LOL-1]& "|" );
		    Text := Text[LOL to inf];
		end;
		if Line geq 62 then begin
		    Page := Page + 1;
		    print( Heading, Page, crlf& crlf& crlf );
		    Line := 4;
		end;
		print( Text, crlf );
		Line := Line + 1;
	    end;
	    Text := Text& input( C, BreakTab );
	    case B of begin
		[0] if E and length( Text ) then printl( Text );
		[#ht] Text := Text& "        "[(length(Text) land 7)+1 to inf];
		[#lf] begin
		    printl( Text );
		    Text := null;
		end;
		[else] Text := Text& "^"& (B xor '100)
	    end;
	end;
	close(C);
	enter(C,"PREAD.MKR",E);
	out(C,cvos(F));
	close(C);
    end;
end until E;
setprint( null, "T" );
print(#ff);

end $
