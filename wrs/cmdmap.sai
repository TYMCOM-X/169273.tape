begin	"CMDMAP"

require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(WRS)ARGS.REQ" source!file;
require 1 version;

define MaxNode = 4096;
integer array Port[0:MaxNode];
boolean array Queued[0:MaxNode];
boolean DetachFlag;
integer C,E;	! output channel vars;
string	Queue,FileName;
integer RootNode;
integer BUILDcnt;

simple boolean procedure lequ( string S1,S2 );
begin
    return( kequ( S1[1 to length(S2)], S2 ) );
end;

integer isNumBrk,noBlanks,tokBrk;
simple procedure BrkIni;
begin
    setbreak(isNumBrk_getbreak,"0123456789"," ","XT");
    setbreak(noBlanks_getbreak,null," ","IS");
    setbreak(tokBrk_getbreak," "&#ht&crlf," "&#ht&crlf,"TIS");
end;
require BrkIni initialization;

simple boolean procedure isNumber( string S );
begin
    integer B;
    return( length( scan( S, isNumBrk, B )));
end;

simple procedure enQueue( integer N );
if not Queued[n] then begin
    Queued[n] := true;
    Queue := Queue& char!w( N, 12 );
end;

simple string procedure Speed( string LS );
begin
    integer B;
    return( ( scan( LS, noBlanks, B ) & "    " )[1 to 4] );
end;

simple integer procedure cvh( string S );
begin
    integer I,D;
    I := 0;
    while length(S) do
	case D:=lop(S) of begin
	    ["0"]["1"]["2"]["3"]["4"]["5"]["6"]["7"]["8"]["9"]
		I := I * 16 + D-"0";
	    ["A"]["B"]["C"]["D"]["E"]["F"]
		I := I * 16 + D-"A"+10;
	    ["a"]["b"]["c"]["d"]["e"]["f"]
		I := I * 16 + D-"a"+10;
	    [else]
	end;
    return( I );
end;

procedure ScanArgs;
begin
    integer I;
    FileName := "CMDMAP.DAT";
    if ARGV[1] = "?" then print( "
CMDMAP: obtain map of command circuit topology

    CMDMAP -dt filename

Options:
    -d	detach after establishing connection
    -t	trace circuit traffic on terminal (for debug)

Arguments:
    fileName	name of output file (default is CMDMAP.DAT)

Output file format:
    T dd-mmm-yy hh:mm:ss                ('T',1X,A25)
    L node node count percent		('L',1X,I4,1X,I4,1X,I4)

", call(0,"EXIT") );
    for i:=1 upto ARGC-1 do begin
	if ARGV[i]="-" then begin
	    string S;
	    S := ARGV[i];
	    while length(S) do case lop(S) of begin
		["-"] ;
		["d"]["D"] DetachFlag := true;
		["t"]["T"] AuxTrace := true;
		else usererr(0,0,"?illegal options","X")
	    end;
	end
	else FileName := ARGV[i];
    end;
    open( C_getchan,"DSK",0,0,4, 0,0,E);
    if E then usererr(0,0,"?ScanArgs: can't open DSK:","X");
    enter( C, fileName, E );
    if E then usererr(0,0,"?ScanArgs: can't enter DSK:"&fileName,"X");
end;

string NAME,PASS;

procedure GetProbeName;
begin
    print( "PROBE Name: " );
    NAME := inchwl;
    auxcli(-1,'200,'64);
    print( "Password: " );
    PASS := inchwl;
    print( crlf );
    auxcli(-1,0,'64);
end;

integer procedure KernelHost( integer NODE );
begin
    if '2001 leq Node leq '2007 then return( 121+NODE-'2001 );
    usererr( NODE,2, "?request kernel host for non-sup node ", "X" );
end;

define PROBE = 0;

procedure CreXRAY( integer NODE );
begin
    label REBUILD;
    integer KH;
    boolean AUXOK;
    string Text;
    own integer BuildCnt;
    KH := KernelHost( Node );
REBUILD:
    do begin
	if ( BUILDcnt := BUILDcnt + 1 ) > 100 then
	    usererr(0,0,"?connect: rebuild count expired - giving up","X");
	print( "[building circuit to XRAY:", KH, " ]"& crlf );
	CREAUX( "XRAY:"& cvs( KH ) );
	AUXOK := !SKIP!;
	if not AUXOK then call(20,"SLEEP");
    end until AUXOK;
    while true do case AuxRead( Text, 10 ) of begin
	[aux!zap] begin
	    print( "?out of XRAY slots"& crlf );
	    goto REBUILD;
	end;
	[aux!prompt] if equ(Text,">")
	    then done
	    else print( "?", Text, crlf );
	[aux!line] if length(Text) > 2 then print( ">", Text );
	[aux!timeout] goto REBUILD
    end;
    AuxEcho := AuxTrace;
    Port[Node] := AuxPort;
end;
procedure CrePROBE;
begin
    label REBUILD;
    string Text;
    boolean AUXOK;
    own integer BuildCnt;
REBUILD:
    do begin
	if ( BUILDcnt := BUILDcnt + 1 ) > 100 then
	    usererr(0,0,"?connect: rebuild count expired - giving up","X");
	print( "[building circuit to PROBE:*]"& crlf );
	CREAUX( 4&"PROBE:*" );
	AUXOK := !SKIP!;
	if not AUXOK then call(20,"SLEEP");
    end until !SKIP!;
    while true do case AuxRead( Text, 10 ) of begin
	[aux!zap] goto REBUILD;
	[aux!prompt] if lequ(Text,"NAME:") then begin
		own boolean X;
		if X then usererr(0,0,"?connect: bad PROBE Name","X");
		AuxEcho := AuxTrace;
		auxout( NAME&#cr );
	    end else if lequ(Text,"PASSWORD:") then begin
		own boolean X;
		if X then usererr(0,0,"?connect: bad Password","X");
		AuxEcho := false;
		auxout( PASS&#cr );
	    end else if lequ(Text,":") then done;
	[aux!line] if cvd(Text) then RootNode := '2000+cvd(Text)-120;
	[aux!timeout] goto REBUILD
    end;
    AuxEcho := AuxTrace;
    Port[PROBE] := AuxPort;
    if not RootNode
	then usererr(0,0,"?connect: can't find host number","X");
end;

recursive procedure Connect( integer NODE );
begin
    if Port[Node]
	then AuxPort := Port[Node]
	else if Node
	    then CreXRAY( Node )
	    else CrePROBE;
end;

comment	ND
**LINE**  ***--LINK--***    LINE    LINK  LINE   LINK  LINE          LINE
NO. TYPE  NEIG  NO. TYPE    STATUS  WSIZ  SPEED  CRQS  TIME ATT/DET  ERRATE
00  SYNC  2015  06  TII     UP      0008   9.6   0018  333:15:40:53
01  SYNC  0361  07  TII     UP      0008   9.6   0037  315:19:40:41
;
comment	KD 2045
NODE  TPBO  NLWS  SPNM  NCHN  ISEC  NRTR  AMSK
0425  0820  0110  9F01  0080  7B56  7BCE  00FF  
OSEC  NRMK  NRXM  LRT   LAS   LRM   LAR   NAS 
7C16  7C16  7C16  ABA9  ABA8  257F  257F  ABA8  
BNOD  CHN0  B.PT  E.PT  ACHN  VERS  LINES
0425  0E20  0500  0600  001D  FFFF  10  
CMD CKTS = 001F  
;

integer procedure XrayCCC( integer N, N! );
begin
    integer Port!,CCC;
    string Text;
    Port! := AuxPort;
    Connect( N );
    AuxOut( "KD "& cvos(N!)& #cr );
    while true do case AuxRead( Text, 10 ) of begin
	[aux!line] if lequ( Text, "CMD CKTS" ) then CCC := cvh(Text[12 for 4]);
	[aux!prompt] done;
	[else] usererr(0,0,"?error on XRAY circuit for node "& cvos(N),"X")
    end;
    AuxPort := Port!;
    return( CCC );
end;

procedure Search( integer Root );
begin
    integer I,B;
    Queue := char!w( Root, 12 );
    while length( Queue ) do begin
	string Text, Buf;
	integer N, N!, STATE, Version, Type, Passthroughs;
	N := lop( Queue );
	STATE := 0;
	setformat(-4,0);
	Buf := null;
	Version := Type := Passthroughs := 0;
	Connect( PROBE );
	auxout( "N "& cvos(N)& #cr );
	while true do case AuxRead( Text, 30 ) of begin
	    [aux!prompt] done;
	    [aux!line]
		if STATE and isNumber( Text ) then case STATE of begin
		    [1] begin "HOST"
		    end;
		    [2] begin "LINK"
			integer N!;
			N! := cvo(Text[5 to 9]);
			if not Queued[N!] then begin
			    string LS,WS;
			    integer CCC;
			    LS:=Speed(Text[(if N>'1777 then 10 else 12)for 4]);
			    WS:=Text[(if N>'1777 then 15 else 17)for 3];
			    if equ(WS,"WS8") then WS:="8"
			    else if equ(WS,"SAT") then WS:="S"
			    else WS:="4";
			    CCC := XrayCCC( N, N! );
			    Buf := Buf&
				"L "&
				cvos(N)&" "&
				cvos(N!)&" "&
				LS&" "&
				WS&" "&
				cvd(CCC)&crlf;
			    if CCC > 100 then enQueue( N! );
			end;
		    end
		end
		else if lequ(Text,"VERSION") then begin
		    while length(Text) do begin
			string T;
			T := scan( Text, tokBrk, B );
			if equ(T,"VERSION") then
			    Version := cvd(scan( Text, tokBrk, B ));
			if equ(T,"TYPE") then
			    Type := cvd(scan( Text, tokBrk, B ));
		    end;		    
		end else if lequ(Text,"AVAILABLE PASSTHROUGHS") then begin
		    Passthroughs := cvd(Text[24 to inf]);
		end else if lequ(Text,"HOST STATUS") then begin
		    if Version then begin
			Buf := Buf& "N "& cvos(N)& " ";
			setformat(-6,0);
			Buf := Buf& cvs(Version)& " ";
			setformat(-2,0);
			Buf := Buf& cvs(Type)& " ";
			setformat(-4,0);
			Buf := Buf& cvs(Passthroughs)& crlf;
			Version := 0;
		    end;
		    STATE := 1;
		end else if lequ(Text,"LINK STATUS") then begin
		    if Version then begin
			Buf := Buf& "N "& cvos(N)& " ";
			setformat(-6,0);
			Buf := Buf& cvs(Version)& " ";
			setformat(-2,0);
			Buf := Buf& cvs(Type)& " ";
			setformat(-4,0);
			Buf := Buf& cvs(Passthroughs)& crlf;
			Version := 0;
		    end;
		    STATE := 2;
		end;
	    [else] usererr(0,0, "?PROBE circuit error", "X")
	end;
	cprint( C, Buf );
    end;
    print( crlf );
end;

begin	"M A I N"
    ScanArgs;
AuxTrace := true;
    if DetachFlag then begin
	print("Detaching...");
	calli(0,-6);
    end;
    GetProbeName;
    Connect( PROBE );
    Search( RootNode );
    close(C);
end	"M A I N";
end	"CMDMAP"
$
  