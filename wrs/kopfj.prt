Message 437 (3057 chars): Read
Received: from tymix.Tymnet by B39.Tymnet; Fri, 20 Feb 87 13:40:46 PST
Received: by tymix.Tymnet (5.51/4.7) id AA16744; Fri, 20 Feb 87 13:40:10 PST
Received: by eunix.Tymnet (5.51/4.7) id AA18895; Fri, 20 Feb 87 13:39:37 PST
Return-path: <kopfj@eunix> 
From: kopfj@eunix (John Kopf) 
Date: Fri, 20 Feb 87 13:39:37 PST 
To: skywalker@eunix 
Message-id: <8702202139.AA18895@eunix.Tymnet> 
Subject: VMdebug 

	Recommendation for Rodney
		John Kopf

	RODNEY provides distributed management of a Skywalker system's
resources, and each instance of RODNEY (i.e., each card) provides some
(limited) set of capabilities.

	One such capability is the determination of the card's resources,
such as memory available;  another is the provision of a software USART.

	A function provided by RODNEY is loading the initial code to be
executed into the card ("bootstrapping").  For want of a better name, I
will refer to this initial code as a "Monitor" -- it may be ISIS-kernel,
IOC-kernel, or Diagnostic-kernel.  Thus RODNEY is -- to some extent --
providing a "virtual machine" to the monitor being loaded.  In the future,
RODNEY must be expanded to provide multiple virtual machines within a
single card (e.g., the "ATC" configuration, where the single processor
must be capable of support of both ISIS and IOC).

	In other instances, RODNEY may be controlled by additional
mechanisms, for activity such as DLL or Debugging.

	One area where debugging is particularly painful is that of
debugging "system" code -- kernels and RODNEY itself.  The pain would
be greatly eased if the tools available for debugging applications
cound be brought to bear, permitting high-level debugging in real-time
code.

	Such a capability could be provided relatively simply by the
development of a VM debugger -- a special Monitor which would control
the MMU and emulate privledged capabilities while executing the code in
slave-mode.  Except for the interception of privledged operations and
MMU violations, such a debugger would otherwise be transparant to normal
debugging.  Hopefully, the MAXsbug code is sufficiently modular that
a small amount of development would permit recasting it into the role
of such a Monitor, perhaps with the addition of some Emulator capability
(assuming that Emulator source-code is available so we can "steal"
appropriate sections of code), and with the (hopefully) standard system
modules (such as MMU support).

	The effort expended in developing VMdebug would be more than
paid back in the effort saved for ongoing development and mantanance
of system code, especially in those cases where the code being developed
must interface with other processors running existing code.

	I strongly recommend that the concept of VMdebug be given further
consideration, because I feel that immediate diversion of effort toward
it's development will reduce the effort required for subsequent development,
and thus reduce the risks associated with RODNEY and Monitor(s) development
and enhancements.

