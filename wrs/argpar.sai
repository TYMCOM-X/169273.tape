entry
	ArgParse, ArgArr
;
begin

require "(SAILIB)SAIL.DEF" source!file;

integer DecBrk,OptBrk;
boolean ERROR;
integer B;

simple procedure BreakIni;
begin
    setbreak( DecBrk_ getbreak, ",_=/ "&#ht&#cr&#lf, " "&#ht&#cr&#lf, "KIST");
    setbreak( OptBrk_ getbreak, ":/",    " "&#ht&#cr&#lf, "KIS");
end;
require BreakIni initialization;

define NOVAL = '7777;


internal simple procedure ArgArr( itemvar dst; integer src );
begin
    integer itemvar IIV;		! declare as type ;
    IIV_ dst;				! copy item ;
    start!code
	move	'1,@src;		! get array pointer ;
	movem	'1,access(datum(IIV));	! store as datum(item) ;
    end;
end;

integer	AccuCnt;
string	AccuNames;

procedure AccuParse( itemvar IV; string ST );
begin
    if IV neq ANY then case typeit(IV) of begin
	[1] if AccuCnt > 0 then begin
	    print( "%no ",ST," file specification expected"&crlf );
	    ERROR := true;
	end;
	[3] begin
	    own string itemvar SIV;
	    datum(SIV_IV) := AccuNames;
	    props(IV) := AccuCnt;
	end;
	[else] usererr( typeit(IV),2,
	    "?illegal item type for "&ST&" files: " )
    end
    else if length(AccuNames) then print(
	"%no ",ST," files expected: ", AccuNames, crlf );
    AccuNames := null;
    AccuCnt := 0;
end;

internal boolean procedure ArgParse( itemvar OFs,IFs; set Opts; string Args );
begin
    string T,S;
    integer index, equFlag;
    itemvar IV;
    string array itemvar SAIV;
    real array itemvar RAIV;
    integer array itemvar IAIV;
    procedure Accu;
    begin
	if B = "," or B = " " or length( T )
	 then begin
	    AccuCnt := AccuCnt + 1;
	    AccuNames := AccuNames & T;
	    if ( B = ","  or  B = " " )
	     then AccuNames := AccuNames & B;
	 end;
    end;
    ERROR := false;
    props(IFs) := props(OFs) := 0;
    foreach IV | IV in Opts do
	props(IV) := case typeit(IV) of (
	    [23] arrinfo(datum(SAIV_IV),1) - 3,		! string array ;
	    [24] arrinfo(datum(RAIV_IV),1) - 3,		! real array ;
	    [25] arrinfo(datum(IAIV_IV),1) - 3,		! integer array ;
	    [else] 0					! all others ;
	);
    AccuCnt := 0;
    AccuNames := null;
    EquFlag := false;
    T := scan( S:=Args, DecBrk, B );
    if equ(T,"?") and B=0 then begin "Help"
	print( "Syntax:"&crlf& "   ",
	    cv6str(calli(!xwd(-1,3),'41)), " " );
	if typeit(OFs)=3 then print( OFs," = " );
	if typeit(IFs)=3 then print( IFs," " );
	if length(Opts) then begin
	    print( "/options"& crlf&"Options:" );
	    foreach IV | IV in Opts do begin
		print( crlf& "   /", IV, case typeit(IV) of (
		    [1]  null,
		    [3]  ":string",
		    [4]  ":real",
		    [5]  ":integer",
		    [23] ":string-value",
		    [24] ":real-value",
		    [25] ":integer-value",
		    [else] null
		) );
		if 23 leq typeit(IV) leq 25 then begin
		    print( crlf &"   values:"& crlf &"   " );
		    case typeit(IV) of begin
			[23] for index_ arrinfo(datum(SAIV_IV),1) step 1
				until arrinfo(datum(SAIV),2) do
			     print( "  ", datum(SAIV)[index] );
			[24] for index_ arrinfo(datum(RAIV_IV),1) step 1
				until arrinfo(datum(RAIV),2) do
			     print( "  ", datum(RAIV)[index] );
			[25] for index_ arrinfo(datum(IAIV_IV),1) step 1
				until arrinfo(datum(IAIV),2) do
			     print( "  ", datum(IAIV)[index] )
		    end;
		end;
	    end;
	end;
	print( crlf );
	calli(0,'12);	! EXIT;
    end
    else begin
	while B do begin
	    case B of begin
		["="]["_"]
		    If ( EquFlag )
		     then usererr( EquFlag,2,"?too many assignments " )
		     else begin
			Accu;
			AccuParse( OFs, "output" );
			EquFlag := true;
		     end;
		["/"] done;
		[":"][","][" "] Accu;
		[else] usererr( B,2,
		    "?illegal break character: " )
	    end;
	    T := scan( S, DecBrk, B );
	end;
	Accu;
	AccuParse( IFs, "input" );
	while B = "/" do begin
	    boolean FLAG,HaveV,MatchCnt;
	    itemvar MIV;
	    string V;
	    T := scan( S, OptBrk, B );
	    if HaveV := B = ":" then begin
		V := scan( S, OptBrk, B );
		while B = ":" do 
		    V := V& ":"& scan( S, OptBrk, B );
	    end else V := null;
	    MatchCnt := 0;
	    foreach MIV | MIV in Opts do begin
		string PN;
		PN := cvis( MIV, FLAG );
		if FLAG then usererr( 0,1,"?option item without PNAME" )
		else if kequ( T, PN[1 for length(T)] ) then begin
		    MatchCnt := MatchCnt + 1;
		    IV := MIV;
		    if length(T)=length(PN) then begin
			MatchCnt := 1;
			done;
		    end else if MatchCnt > 1 then begin
			done;
		    end;
		end;
	    end;
	    case MatchCnt of begin
		[1] case typeit(IV) of begin
		    [1] begin
			props(IV) := NOVAL;
			if HaveV then begin 
			    print( "%value not expected for /", IV, crlf );
			    ERROR := true;
			end;
		    end;
		    [3] begin
			own string itemvar SIV;
			props(IV) := if HaveV then 1 else NOVAL;
			if HaveV then 
			    datum(SIV_IV) := V;
		    end;
		    [4] begin
			own real itemvar RIV;
			props(IV) := if HaveV then 1 else NOVAL;
			if HaveV then begin
			    datum(RIV_IV) := realscan( V, FLAG );
			    if FLAG then begin
				print("% /",IV," expects real value"&crlf);
				ERROR := true;
			    end;
			end;
		    end;
		    [5] begin
			own integer itemvar IIV;
			props(IV) := if HaveV then 1 else NOVAL;
			if HaveV then begin
			    datum(IIV_IV) := intscan( V, FLAG );
			    if FLAG then begin
				print("% /",IV," expects integer value"&crlf);
				ERROR := true;
			    end;
			end;
		    end;
		    [23] begin  Integer prop;
			if HaveV then begin
			    props(IV)_ prop_ arrinfo(datum(SAIV_IV),1)-1;
			    for index_ arrinfo(datum(SAIV),1) step 1
				until arrinfo(datum(SAIV),2) do
			      if kequ( V,datum(SAIV)[index][1 for length(V)] )
			       then if kequ( V,datum(SAIV)[index] )
			         then begin
				     prop_ index;
				     done;
				 end
			         else if prop < arrinfo(datum(SAIV),1)
				     then prop_ index
				     else prop_ arrinfo(datum(SAIV),1)-2;
			    if prop < arrinfo(datum(SAIV),1)
			     then begin
				print("% /",IV," expects one of"&crlf);
				for index_ arrinfo(datum(SAIV),1) step 1
				    until arrinfo(datum(SAIV),2) do
				  print( "  ",datum(SAIV)[index] );
				print( crlf );
				ERROR := true;
			     end;
			    props(IV)_ prop;
			end
			else props(IV) := NOVAL;
		    end;
		    [24] begin
			own real myReal;
			if HaveV then begin
			  myReal_ realscan( V, FLAG );
			  if FLAG then begin
			    print("% /",IV," expects a real value"&crlf);
			    ERROR_ true;
			  end
			  else begin
			    props(IV)_ arrinfo(datum(RAIV_IV),1)-1;
			    for index_ arrinfo(datum(RAIV),1) step 1
				until arrinfo(datum(RAIV),2) do
			      if myReal = datum(RAIV)[index]
			       then begin
				     props(IV)_ index;
				     done;
			       end
			       else if props(IV) < arrinfo(datum(RAIV),1)
				     then props(IV)_ index
				     else props(IV)_ arrinfo(datum(RAIV),1)-2;
			    if props(IV) < arrinfo(datum(RAIV),1)
			     then begin
				print("% /",IV," expects one of"&crlf);
				for index_ arrinfo(datum(RAIV),1) step 1
				    until arrinfo(datum(RAIV),2) do
				  print( "  ",datum(RAIV)[index] );
				print( crlf );
				ERROR := true;
			     end;
			  end;
			end
			else props(IV) := NOVAL;
		    end;
		    [25] begin
			own integer myInt;
			if HaveV then begin
			  myInt_ intscan( V, Flag );
			  if FLAG then begin
			    print("% /",IV," expects an integer value"&crlf);
			    ERROR_ true;
			  end
			  else begin
			    props(IV)_ arrinfo(datum(IAIV_IV),1)-1;
			    for index_ arrinfo(datum(IAIV),1) step 1
				until arrinfo(datum(IAIV),2) do
			      if myInt = datum(IAIV)[index]
			       then begin
				     props(IV)_ index;
				     done;
			       end
			       else if props(IV) < arrinfo(datum(IAIV),1)
				     then props(IV)_ index
				     else props(IV)_ arrinfo(datum(IAIV),1)-2;
			    if props(IV) < arrinfo(datum(IAIV),1)
			     then begin
				print("% /",IV," expects one of"&crlf);
				for index_ arrinfo(datum(IAIV),1) step 1
				    until arrinfo(datum(IAIV),2) do
				  print( "  ",datum(IAIV)[index] );
				print( crlf );
				ERROR := true;
			     end;
			  end;
			end
			else props(IV) := NOVAL;
		    end;
		    [else] usererr( typeit(IV),2,
			"?illegal item type: " )
		end;
		[0] begin
		    print( "%no option matching /", T, crlf );
		    ERROR := true;
		end;
		[else] begin
		    print( "%option /", T, " ambiguous"& crlf );
		    ERROR := true;
		end
	    end;
	end;
    end;
    if length(S) then begin
	print( "%garbage following options: ", S, crlf );
	ERROR := true;
    end;
    return( not ERROR );
end;

end $
    