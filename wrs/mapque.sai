begin	"JBTWRS"
require "(WRS)SAIL.DEF" source!file;

simple integer procedure PEEK(integer ADR);
begin	"PEEK"
    own integer I;
    I _ calli(ADR,-'136);	! VPEEK;
    if not !SKIP! then usererr(0,0,"VPEEK uuo failed");
end	"PEEK";

simple integer procedure GETTAB(integer I,T);
start!code
	SETOM 	!SKIP!;
	HRR	1,T;
	HRL	1,I;
	CALLI	1,'41;
	 SETZM	!SKIP!;
end;

simple procedure POKE(integer ADR,VAL);
begin	"POKE"
    start!code
	MOVEI	0,1;
    	MOVE 	1,VAL;
    	MOVE 	2,ADR;
	SETOM	!SKIP!;
	CALLI	0,-'12;
	  SETZM	!SKIP!;
    end;
    if not !SKIP! then usererr(VAL,2,"POKE uuo failed ["&cvos(ADR)&"] ");
end	"POKE";

simple string procedure QUEUE(integer S);
begin 	"Q"
    own integer I;
    I _ S/3;
    I _ gettab(I,'25) lsh (12*(S mod 3));
    if not !SKIP! then I _ cvsix("??????");
    return(cvxstr(I)[1 to 2]);
end 	"Q";

simple integer procedure Log2(integer N);
    return(b2log(N));

integer	MAPQUE;			! address of MAPQUE in monitor;
integer QUECNT;		      	! number of state codes defined;
integer I,HIGHJB,J,S;

simple procedure INIT;
begin	"INIT"
for I _ 0 step 2 forever do begin
    if gettab(I,-'36)=cvsix("MAPQUE") then begin
	MAPQUE _ gettab(I+1,-'36);
	done end;
    if not !SKIP! then usererr(0,0,"MAPQUE not in !GTLNK","X");
end;
for I _ 0 step 1 forever do begin
    if Queue(I)="?" then begin
	QUECNT _ I-1;
	done end;
end;
QueCnt _ QueCnt -2;
setformat(2,0);
ttyup(true);
end	"INIT";
require	INIT initialization;

procedure TABLE;
begin	"TABLE"
print("		frequency of transitions from sts(t) to sts(t+1)",crlf);
print(crlf);
print("sts(t)			(log2(n) transactions) ",crlf);
print("   sts(t+1)",crlf);
print("  ");
for I _ 0 upto QUECNT do print(".",Queue(I));
print(crlf);
for I _ 0 upto QUECNT do begin
    print(Queue(I),".");
    for J _ 0 upto QUECNT do begin
	S _ peek(MAPQUE+(I lsh 5)+(J));
	if S < 0 then print("sc")
	else if S = 0 then print("  ")
	else print(log2(S));
	print(if ((J+1) mod 3)=0 or ((I+1) mod 3)=0 then "." else " ");
    end;
    print(Queue(I),crlf);
end;
print("  ");
for I _ 0 upto QUECNT do print(" ",Queue(I));
print(crlf);
end 	"TABLE";

procedure ZERO;
begin	"ZERO"
    for I _ MAPQUE upto MAPQUE+'1777 do POKE(I,0);
    print("MAPQUE array cleared",crlf);
end	"ZERO";

procedure CRASH(string TS);
begin	"CRASH"
    string Q1,Q2;
    integer S1,S2;
    Q1 _ TS[1 for 2]; S1 _ -1;
    Q2 _ TS[4 for 2]; S2 _ -1;
    for I _ 0 upto QUECNT do if equ(queue(I),Q1) then S1_I;
    for I _ 0 upto QUECNT do if equ(queue(I),Q2) then S2_I;
    case TS[3 for 1] of begin
	["-"][":"][";"][" "][","][">"]["."]["/"] nothing;
	else S1_S2_-1 end;
    if S1<0 or S2<0 then begin
	print("illegal transition specification: ",TS,crlf,
	    "correct form is ss:dd",crlf);
	return end;
    POKE(MAPQUE+(S1 lsh 5)+S2,-1);
    print("MAPQUE[",TS,"] = CrashFlag",crlf);
end	"CRASH";

procedure LOOK(string TS);
begin	"LOOK"
    string Q1,Q2;
    integer S1,S2;
    Q1 _ TS[1 for 2]; S1 _ -1;
    Q2 _ TS[4 for 2]; S2 _ -1;
    for I _ 0 upto QUECNT do if equ(queue(I),Q1) then S1_I;
    for I _ 0 upto QUECNT do if equ(queue(I),Q2) then S2_I;
    if S1<0 or S2<0 then begin
	print("illegal transition specification: ",TS,crlf,
	    "correct form is ss:dd",crlf);
	return end;
    print("MAPQUE[",TS,"] = ",PEEK(MAPQUE+(S1 lsh 5)+S2),crlf);
end	"LOOK";

procedure RESET(string TS);
begin	"RESET"
    string Q1,Q2;
    integer S1,S2;
    Q1 _ TS[1 for 2]; S1 _ -1;
    Q2 _ TS[4 for 2]; S2 _ -1;
    for I _ 0 upto QUECNT do if equ(queue(I),Q1) then S1_I;
    for I _ 0 upto QUECNT do if equ(queue(I),Q2) then S2_I;
    if S1<0 or S2<0 then begin
	print("illegal transition specification: ",TS,crlf,
	    "correct form is ss:dd",crlf);
	return end;
    POKE(MAPQUE+(S1 lsh 5)+S2,0);
    print("MAPQUE[",TS,"] = CrashFlag",crlf);
end	"RESET";
forever do begin "CMDLOP"
    integer C;
    print("..");
    C _ inchrw;
    case C of begin
	["C"] begin print("rash (on transition) "); CRASH(inchwl) end;
	["L"] begin print("ook (at transition count for) "); LOOK(inchwl) end;
	["Q"] begin print("uit"); done end;
	["T"] begin print("able (values to terminal)",crlf); TABLE end;
	["R"] begin print("eset (crash on transition) "); RESET(inchwl) end;
	["Z"] begin print("ero (mapque array)",crlf); ZERO end;
	["?"] print("
One of:
  Crash (on transition) ss:dd
  Look (at transition count for) ss:dd
  Quit
  Table (values to terminal)
  Reset (crash on transition) ss:dd
  Zero (mapque array)
");
	else print("? type ""?"" for help",crlf)
    end;
end 	"CMDLOP";
end .
