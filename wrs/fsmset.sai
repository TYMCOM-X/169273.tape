entry mksFsm, ussFsm, ussFss;
begin "fsmset"

require "fsmcod.dcl" source!file;

define ! = "COMMENT", StringItemType=3;
let r!p = record!pointer, ref# = reference;

external procedure $rec$( integer function; r!p (any!class) r );
define deallocate(x)= "$rec$(5,x)";	! recycle a record's storage;

record!class lptarg (string name; r!p (lptarg) back, link;
			itemvar target; set matches );
r!p (lptarg) procedure maklnk( ref# set data; boolean usepname );
begin		string itemvar elem;
		r!p (lptarg) chase, head;
		set problems;
		boolean nostring;
		string str;
nostring_ false;
chase_ head_ null!record;
while length(data)
   do begin
	elem_ lop(data);
	str_ if usepname then str_cvis(elem,nostring)
	 else if typeit(elem) = StringItemType then datum(elem,string)
		else null;
	if nostring or length(str)=0
	 then begin str_null; put elem in problems; end
	 else begin
		chase_ new!record(lptarg);
		lptarg:name[chase]_str; lptarg:target[chase]_elem;
		lptarg:link[chase]_head; head_chase;
	      end;
      end;
data_ problems;
return(head);
end;
recursive set procedure forceSet ( r!p (lptarg) toforce );
begin "forceSet"
if toforce=null!record then return({});

if length(lptarg:matches[toforce]) neq 0
 then return(lptarg:matches[toforce]);	! already calculated it;

if null!record=lptarg:back[toforce]
 then return( lptarg:matches[toforce]_ {lptarg:target[toforce]});

return( lptarg:matches[toforce]_ forceSet( lptarg:back[toforce] )
				union {lptarg:target[toforce]});
end "forceSet";
internal r!p (fsm) procedure mksfsm( integer array equivs;
			ref# set targetSet; boolean usePnames );
begin "mksFsm"
		r!p (lptarg) linker, chain, chase;
		r!p (fsm) table;

	! turn the set into a linked list, making a set of "nulls";
linker_ maklnk( targetSet, usePnames );
if linker=null!record then return(null!record);
chain_ linker;	! save a handle on the chain (so it can be deleted);
table_ makfsm( equivs, linker );
! now chain follows LINK for all records;
! and linker follows BACK for the ignores.;

! break all the LINK linkages (so we can delete the records);
if chain then while chase_lptarg:link[chain]
   do begin lptarg:link[chain]_ null!record; chain_chase; end;

while linker
   do begin 
	targetSet_targetSet union {lptarg:target[linker]};
	! make a set of all makFsm-detected "nulls";
	chain_linker; linker_lptarg:back[linker]; ! move forward one;
	deallocate(chain);	! and delete the one we passed;
      end;
chain_ chase_ linker_ null!record;	! clear GC handles;
return(table);	! and give him what he came for;
end "mksFsm";
internal set procedure ussFsm( r!p (fsm) state;
			ref# integer count, bytepointer );
return( forceSet( useFsm( state, count, bytepointer ) ) );


internal set procedure ussFss( r!p (fsm) state; ref# string dataStr );
return( forceSet( useFst( state, dataStr ) ) );

end "fsmset".

