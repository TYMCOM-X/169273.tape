begin	"PCOM"
require "
interim PERP exec language
license required: WC RC SY" message;

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)TYMINT.DEF" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require "CALLI" load!module;

require 25 polling!interval;
require processes;

define fname = {"}&scanc(compiler!banner," "&#ht,null,"SI")&{"};
! fname is a string constant containing the outer block name;

simple procedure LicenseCheck;
begin
    integer L;
    L _ calli(!xwd(-1,!GTLIC),calli!GETTAB);
    if (L land LC!WC = 0)
    or (L land LC!RC = 0)
    or (L land LC!SY = 0)
    then usererr(0,0,"?license required: WC RC SY","X");
end;
require LicenseCheck initialization;

item	INTPRO;			! deffered interrupt process;
integer array M[0:35,0:4];	! interrupt data area;
! note:	M[c,0] is count of locations used for DF1INT call (4);
!	M[c,1] is addr of M[c,4] for ref arg to XINT;
!	M[c,2] is addr of service routine for proc arg to XINT;
!	M[c,3] is pointer to XINT for DF1INT;
!	M[c,4] is -1 for ok to queue, >=0 for pending (already queued);

procedure XINT (reference integer MC4; procedure MC2);
begin	! called by INTPRO as result of queued request from QINT;
    MC4 _ -1;			! set flag saying ok to quque;
    MC2;			! call int service procedure;
end;

simple procedure QINT;
begin	! called at immediate level to queue a request for service;
    integer C;
    C _ memory['10];		! get interrupt channel number;
    if M[C,4] _ M[C,4] + 1 
	then ! don't queue it more than once;
	else DFR1IN (!xwd(-4,location(M[C,0])));
end;

forward procedure TIM;
forward procedure CHR;
forward procedure ZAP;
forward procedure ORG;
forward procedure NTQ;

simple procedure INTINI(integer Port);
begin	! called by main prog to setup interrupts once port is known;
    simple procedure DEFMAP (integer INDEX; procedure PROC);
    begin
	own integer C;
	C _ INDEX land '77;	! extract channel number;
	M[C,0] _ 4;		! 2 word arg to DF1INT;
	M[C,1] _ location(M[C,4]);! pending flag;
	M[C,2] _ location(PROC);! handler procedure;
	M[C,3] _ !xwd(-1,location(XINT));
	M[C,4] _ -1;		! DF1INT needs to be called;
	intmap (INDEX,QINT,0);
	enable (newenb(C));
    end;
    intset (INTPRO,0);
    defmap (intass(!IATIM,10),TIM);
    defmap (tinass(Port,!IACHR,11),CHR);
    defmap (tinass(Port,!IAZAP,12),ZAP);
    defmap (tinass(Port,!IAORG,13),ORG);
    defmap (intass(!IANTQ,14),NTQ);
    defmap (tinass(-1,!IAESC,14),NTQ);
end;

simple procedure IntZap;
begin
    disable (newenb(10));
    disable (newenb(11));
    disable (newenb(12));
    disable (newenb(13));
    disable (newenb(14));
end;

procedure HELP;
begin print("
Syntax is 
    .R PCOM [; [outputfile =] inputfile [switches] ]
where
    outputfile		is the name of the output file (see note)
    inputfile 		is the name of the input file 
    switches		is zero or more of the following switches:
	/DETACH		run the job detached (default)
	/NODETACH	run with the command port attached
	/HELP		prints this message (same as ?)
	/NEWS		prints latest enhancements
note: normally the output file is specified in the first line of the
command file by a statement of the form
    :outputfile
but this may be overridden by specifying the output file in the PCOM
command line.
"); calli(0,calli!EXIT) end;

procedure NEWS;
begin print("
(most recent first)
* Fixed bug leaving detached job if output file cant be opened.
* Extensive changes to command parser and front logic.
* Fixed bug causing INTTBL to overflow with queued service requests.
* Does not interact with user if CCL or RPG entry are used.
* Removed sensitivity to trailing blanks after switches.
* Disowns inferiors to prevent obnoxious messages when logging out.
* If run at start address +1, PCOM will read command line from ###PCO.TMP.
* The default behavoir is now to run the exec frame detached.
  The /NODETACH switch may be used to remain attached to the exec.
* Command files may now nest up to 45 deep with the command
	:COM filename	
* Will try to gracefully abort from lost circuits.
* Now supresses translation of characters recorded in output file.
* Fixed bug caused by getting two DETACH commands.
* Fixed bug causing command line > 80 characters to be destroyed.
* Now aborts gracefully when system is taken down.
* Now times job out after 60 minutes unless changed by :TIME n.
* Now remains continuously in sync - does not type lines ahead - this
  makes the :PAUSE command obsolete, it will be ignored if used.
* Ignores lines beginning with : except those recognized as commands.
* If detached, sends mail to user who submitted job when completed.
* Does not require LOGOUT command at end of commands file.
"); calli(0,calli!EXIT) end;

!	FRONT!END
Obtain a command line, check it for errors, and return it in global
variables.  The IFile and OFile are both opened and made ready.
If job is to be detached, take necessary action (does not return).  Due 
to problems dealing with error recovery, it is impossible to check the 
OFile for writability if /DET is specified and no OFile is given.  This 
is okay based on the assumption that jjjPCO.LOG[0,0] will always be 
writable by frame jjj.
The command line may be obtained in one of three ways:
	1. from the command line (RUN PCOM:ofile_ifile/switch)
	2. interactively by prompting the user for the information
	3. by RPG where it is obtained from a jjjPCO.TMP file
;	

external boolean RPGSW;		! true if run at start address plus one;
boolean CCLSW; 			! true if command found on cmd line;
boolean IACSW;			! true if interactive (being prompted);
boolean DETACH!;		! true if this frame IS detached;
integer	BRK,EOF,OChan;		! I/O variables;
string	IChan;			! stack of nested input files;
string	IFile,OFile;		! I/O file names;
boolean	swDETACH,swNODETACH;	! reality defined by user switches;

string procedure EXIT;		! string so it can be "printed" [ugh];
calli(0,(if detach! then calli!LOGOFF else calli!EXIT));

procedure BrkIni;
begin
    setbreak(1,#lf,null,"SINF");		! read line;
    setbreak(2,#lf&";=_/",#cr,"SINK");		! read command;
    setbreak(3,#lf&#cr&#ht&" ",null,"RXNK");	! eat white space;
    setbreak(4,#lf&#ht&" !@#$%^&*()_+-=~`{}[]|\:;'<>,.?/"&'42,#cr,"RINK");
    setbreak(5,#lf&";=_/"," "&#ht&#cr,"SINK");	! read command no balnks;
end;
require BrkIni initialization;

string procedure TOK (reference string S);
begin
    string S1;
    scan(S,3,BRK);
    S1 _ scan(S,4,BRK);
    if length(S1) = 0 then S1 _ lop(S);
    scan(S,3,BRK);
    return(S1);
end;

procedure FRONT!END;
begin
    string S;			! a handy string;
    label INPUT.PROMPT;		! goto here for purpose of reprompting;
    label OUTPUT.PROMPT;	! goto here for purpose of reprompting;

!	cope with being detached
;
    Detach! _ !lh(calli(!xwd(-1,!gtLIN),calli!GETTAB))=0;
	! set detach flag if we are detached;
    if Detach! then 
	calli(JP!NAT lor calli(!xwd(-1,!GTPRV),calli!GETTAB),calli!SETPRV);
	! set NO ATTACH so we don't bother user when logging in;

!	check for RPG type call - look for jjjPCO.TMP
;
    if RPGSW then begin "RPG"	! was our start address +1?;
	integer C,B,E; string F;
	F _ cvs(1000+calli(0,calli!PJOB))[2 to 4]&"PCO.TMP";
	open(C_getchan,"DSK",1,4,0,256,B,E);
	lookup(C,F,E);
	if E then print("?cant read ",F," error code '",E, EXIT);
	S _ input(C,0);
	rename(C,null,0,E);
	release(C);
    end "RPG";

!	next try for CCL type call - look for semicolon in command line
;
    if not RPGSW then begin
	backup;			! back up monitor TTY read pointer;
	S _ inchsl(EOF);	! read monitor command line;
	scan(S,5,BRK);		! discard upto 1st semicolon;
	CCLSW _ (BRK = ";");	! was a semicolon found?;
    end;
    IACSW _ not (CCLSW or RPGSW);! set interactive flag appropriately;
    if IACSW then begin "prompt"
	string CB,T;
	integer I;
	CB _ compiler!banner;
	for I _ 1 upto 12 do begin
	    T _ TOK(CB);
	    case I of begin
	    [1] print(fname&" version of ");
	    [5][6][7][8][10][11][12] print(T);
	    [9] print(T," ");
	    else end;
	end;
	print(crlf,"(type ? for help)",crlf);
    end "prompt";
    INPUT.PROMPT: if IACSW then begin "prompt"
	print("input file: ");
	S _ inchwl;
    end "prompt";
    if S = "?" then S _ S & "/HELP";
    IFile _ scan(S,5,BRK);	! scan filename;
    OFile _ null;		! default file name;
    case BRK of begin
	["="]["_"] begin	! maybe get output file name too;
	    OFile _ IFile;
	    IFile _ scan(S,5,BRK);
	end; else end;
    while length(S) do begin	! scan switches;
	integer SWB; 
	string TOK;
	SWB _ BRK;
	TOK _ scan(S,5,BRK);
	if SWB = "/" then begin
	    if equ(TOK,"DETACH"[1 to length(TOK)]) 
		then swDETACH _ true
	    else if equ(TOK,"NODETACH"[1 to length(TOK)]) 
		then swNODETACH _ true
	    else if equ(TOK,"HELP"[1 to length(TOK)]) 
		then HELP
	    else if equ(TOK,"NEWS"[1 to length(TOK)]) 
		then NEWS
	    else begin "error"
		print("?unrecognized switch: ""/",TOK,"""",crlf);
		if CCLSW or RPGSW then EXIT;
		goto INPUT.PROMPT;
	    end;
	end;
    end;

!	setup input file
;
    lookup(IChan,IFile,EOF);	! input file;
    if EOF then begin
	print ("?input file """,IFile,""" ",case !rh(EOF) of (
	    [0] "not found",
	    [1] "invalid user",
	    [2] "protection failure",
	    [else] "LOOKUP error '"&cvos(!rh(EOF)) ),crlf);
	if RPGSW or CCLSW then EXIT;
	goto INPUT.PROMPT;
    end;
    S _ input(IChan,2);
    if lop(S) = ":" 		! see if 1st line of file is OFile name;
	then if length(OFile)	! see if we already have a OFile set;
	    then 		! set already, ignore one in cmd file;
	    else OFile _ S	! use 1st line of cmd file if no OFile;
	else useti(IChan,1);	! reread 1st line if no ":";

!	setup output file
;
    OUTPUT.PROMPT: if length(OFile)=0 
	then if RPGSW or CCLSW 
	    then if swNODETACH 
		then OFile _ cvs(1000+calli(0,calli!PJOB))[2 to 4]& "PCO.LOG"
		else ! let child PCOM default it;
	    else do begin "prompt"
		print("output file: ");
		OFile _ inchwl;
		if OFile = "?" then begin print(
"The output file is used to record terminal output from the PCOM job.
The default output file is jjjPCO.LOG where jjj is the PCOM job number.
");		goto OUTPUT.PROMPT end;
	    end "prompt" until length(OFile);
    if length(OFile) then begin
	enter(OChan,OFile,EOF);	! output file;
	if EOF then begin
	    print("?output file """,OFile,""" ",case !rh(EOF) of (
		[0] "illegal name",
		[1] "invalid user",
		[2] "protection failure",
		[3] "being modified",
		['14] "exceeds quota or disk full",
		[else] "ENTER error '"&cvos(!rh(EOF)) ),crlf);
	    OFile _ null;
	    if CCLSW or RPGSW then EXIT;
	    goto OUTPUT.PROMPT;
	end;
    end;

!	"detach" if necessary
;
    if not swNODETACH then begin "DETACH"
        own integer C,B,E;	! stuff for writing .TMP file;
	own integer FDX;	! FD of child;
	own integer JX;		! job number of child for msgs only;
        own integer array RB[0:3];
	begin!code
	    protect!acs 1;
	    HRLI 1,!foCFM;
	    uuo!FRMOP 1,[0];	! bear a child;
	      SETZ 1,;
	    MOVEM 1,FDX;
	end;
	if not FDX then print("?cant create child frame", EXIT);
	JX _ FDX land '7777;	! shouldn't there be a uuo for this?;
        RB[0] _ !xwd(1,arrinfo(RB,2));	! our name so can run ourself;
        RB[1] _ cvsix("DSK");
        RB[2] _ calli(!xwd(-1,!gtFPN),calli!GETTAB);
        RB[3] _ calli(!xwd(-1,!gtNAM),calli!GETTAB);
        release(OChan,'40);	! don't create (supercede) output file;
        release(IChan);		! just close it for good form;
        print("[",cv6str(RB[3])," in frame ",JX,"]");
        open(C_getchan,"DSK",0,0,4,0,0,E);
        enter(C,cvs(1000+JX)[2 to 4]&"PCO.TMP",E);
        cprint(C,OFile,"_",IFile,"/NODETACH",crlf);
        close(C); release(C);
        begin!code
	    protect!acs 1;
	    MOVE 1,FDX;
	    HRLI 1,!foRUN;	! run PCOM in child at RPG entry point;
	    uuo!FRMOP 1,access(RB[0]);
	      SETZM FDX;
        end;
        if not FDX then print(crlf,"?cant run ",cv6str(RB[3])," in inferior");
        begin!code
	    protect!acs 1;
	    MOVE 1,FDX;
	    HRLI 1,!foGFT;	! disown child now that were done;
	    uuo!FRMOP 1,[0];	
	      SETZM FDX;
        end;
        if not FDX then print(crlf,"%cant disown inferior");
        EXIT;
    end "DETACH";

end "FRONT!END";

integer PORT;
integer FD;

simple procedure SPROUT;
begin
    integer P;
    P _ calli(0,calli!CREPTY);	! create a PTY;
    if not !SKIP! then usererr(P,2,"?CREPTY error: ","X");
    PORT _ !lh(P);
    auxcli(PORT,'214,!axCFS);	! we are in image no echo;
    auxclv(PORT,1,!axSOX);	! expand tabs etc for output file;
    start!code
	MOVSI	1,!FOCFM;
	SETOM	!SKIP!;
	uuo!FRMOP 1,[0];	! create frame;
	 SETZM	!SKIP!;
	MOVEM	1,FD;
    end;
    if not !SKIP! then usererr(FD,2,"?.FOCFM error: ","X");
    start!code
	HRRO	1,FD;
	HRLI	2,'200000;
	HRR	2,P;
	MOVEI	1;
	SETOM 	!SKIP!;
	uuo!RETACH;		! give it the PTY;
	 SETZM	!SKIP!;
    end;
    if not !SKIP! then usererr(0,0,"?RETACH error","X");
end;

simple procedure OutPtr (integer PORT; string S);
while length(S) do auxclv(PORT,lop(S),!axO8);
! begin!code	! could use this but it won't do image mode;
!	MOVEI	1,!AXOPC;	! output SAIL string;
!	HRL	1,PORT;
!	AUXCAL	1,-1(SP);	! output through pointer;
! end ;

string S,SLOGOUT,Disposition;
integer LineNo;

simple procedure ABORT(reference integer WHY);
begin
    IChan _ null;	! okay at immediate int level? ;
    EOF _ WHY _ true;
end;

boolean TIM!;
procedure TIM;
abort(TIM!);		! terminate commands file and wake up SYNC;

procedure CHR;
begin	! called when a character is received from the port;
    integer C;
    while true do begin
	auxclr(Port,C,!AXI8S);		! get character if any more;
	if !SKIP! 
	    then begin
		wordout(OChan,C);	! send to output file;
		if not Detach! then outchr(C);
	    end
	    else done;
    end;
    auxclv(Port,0,!AXLDE);		! indicate ready for input;
end;

boolean ZAP!;
procedure ZAP;
begin
    IntZap;
    abort(ZAP!);	! stop processing;
end;

boolean ORG!;
procedure ORG;
ORG! _ true; 		! wake up SYNC;

boolean NTQ!;
procedure NTQ;
abort(NTQ!);

procedure SYNC;
begin	! synchronize with slave;
    ORG! _ false;
    auxclv(PORT,0,!axSYB);	! send yellow ball;
    do 
	calli(3000,calli!HIBER)
    until ORG! or TIM! or ZAP! or NTQ!;
    ! orange ball interrupt procedure sets ORG!;
end;

integer array VarVal ["A":"Z"];
string array VarStr ["A":"Z"];

procedure ASSIGN (string CMD);
begin
    integer V;
    V _ TOK(CMD);	! get variable name;
    TOK(CMD); 		! eat "=";
    if "A" leq V leq "Z" 
	then VarVal[V] _ cvd(TOK(CMD));
end;

procedure COM (string CMD);
begin
    IChan _ getchan& IChan;
    open(IChan,"DSK",1,4,0,1024,BRK,EOF);
    lookup(IChan,CMD,EOF);
end;

procedure ESCAPE;
begin!code
    label HALTW,HALTX,CLRW,CLRX;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 JFCL;
	JUMPG 1,CLRX;		! don't hassle if halted;
	MOVE 1,FD;
	TRZ 1,'770000;		! do absolute so license will help;
	HRLI 1,!foHLT;
	uuo!FRMOP 1,;		! return to monitor;
	 JRST CLRX;		! assume already halted (oh well);
HALTW:	MOVEI 1,1;
	uuo!SLEEP 1,;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ 1,;
	JUMPL 1,HALTW;		! sleep until child halts;
HALTX:	MOVE 1,FD;
	TRZ 1,'770000;
	HRLI 1,!foCLR;
	uuo!FRMOP 1,;		! clear frame;
	 JFCL;
CLRW:	MOVEI 1,1;
	uuo!SLEEP 1,;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ 1,;
	JUMPL 1,CLRW;		! sleep until child halts;
	MOVE 1,FD;
	uuo!SETOTF 1,;
	 JRST CLRX;
	MOVSI 1,'206001;	! 1 page at 0 R/W in other frame;
	uuo!VCREAT 1,;
	 JRST CLRX;
	MOVE 1,FD;
	HRLI 1,!foWVA;
	SETZ 2,;		! address;
	HRROI 3,!GTPRV;		
	uuo!GETTAB 3,;		! data = JBTPRV for us;
	 JRST CLRX;
	uuo!FRMOP 1,2;		! write in AC0;
	 JRST CLRX;
	MOVEI 2,1;		! address;
	MOVE 3,[uuo!SETPRV];	! data;
	uuo!FRMOP 1,2;
	 JRST CLRX;
	MOVEI 2,1;		! address;
	MOVE 3,[uuo!EXIT];	! data;
	uuo!FRMOP 1,2;
	 JRST CLRX;
	HRLI 1,!foSAA;
	MOVE 2,['400000000001];	! start address;
	uuo!FRMOP 1,2;
	 JFCL;
CLRX:
	PUSHJ P,SYNC;		! stay in sync with slave;
end;

procedure GOTO (string CMD);
if IChan > 0 then begin
    string S;
    S _ "::"& TOK(CMD);
    useti(IChan,1); LineNo _ 0;
    do begin
	LineNo _ LineNo +1;
	if equ(input(IChan,2),S) then return;
    end until EOF;
end else print("?GOTO not allowed from terminal",crlf);

integer MAIL!SEND!COUNT;
simple procedure MAIL (string CMD);
MAIL!SEND!COUNT _ cvd(CMD);

simple procedure QUIT;
EOF _ true;

boolean STOP!;		! tell world why we stoped;
simple procedure STOP;
STOP! _ EOF _ true;

procedure TIME (string CMD);
calli(!xwd(1,60*cvd(TOK(CMD))),calli!SETTIM);

recursive procedure COMMAND (string CMD);
begin	"COMMAND"
    string KW;
    if CMD = ":" then lop(CMD);
    KW _ TOK(CMD);
    if KW = ":" then ! ignore label here;
    else if BRK = "=" then ASSIGN(KW&CMD)
    else if equ(KW,"AFTER") then 
    else if equ(KW,"COM") then COM (CMD)
    else if equ(KW,"DEFINE") then 
    else if equ(KW,"ESCAPE") then ESCAPE
    else if equ(KW,"FIND") then
    else if equ(KW,"GO") or equ(KW,"GOTO") then GOTO(CMD)
    else if equ(KW,"IF") then
    else if equ(KW,"LOOK") then
    else if equ(KW,"MAIL") then MAIL(CMD)
    else if equ(KW,"PAUSE") then
    else if equ(KW,"QUIT") then QUIT
    else if equ(KW,"RESTART") then 
    else if equ(KW,"STOP") then STOP
    else if equ(KW,"TIME") then TIME (CMD)
    else if equ(KW,"UNLESS") then 
    else if equ(KW,"WAIT") then
    else ;
end	"COMMAND";

!	M A I N   program
;
string MyName;
MyName _ cv6str(calli(!xwd(-1,!GTUNM),calli!GETTAB)) &
    cv6str(calli(!xwd(-1,!GTUN1),calli!GETTAB));

ttyup(true);
open(IChan_getchan,"DSK",0,4,0, 256,BRK,EOF);
open(OChan_getchan,"DSK",0,0,4, 0,0,EOF);
FRONT!END;			! parse command, open files, etc.;
SPROUT;				! create child frame and PTY to it;
calli(!xwd(2,60),calli!SETTIM);	! set (default) timeout to 1 hour;
IntIni (Port);			! enable interrupts;
while length(IChan) do begin
  while not EOF do beginstring S;
    S _ input(IChan,1);		! input line from file;
    if EOF then done;
    LineNo _ LineNo +1;		! count it;
    if S = ":"			! check for begin with colon;
	then Command(S)		!	process PCOM command;
	else begin		!	send command to slave job;
	    OutPtr(Port,S);
	    SYNC end;
  end;
  release(lop(IChan));		! pop the channel stack;
  EOF _ false;			! clear end of file;
end;

begin "HACK" integer HI; for HI _ 1 upto MAIL!SEND!COUNT do begin "HACKER"
ESCAPE;				! force command level;

!	send mail if indicated - inform user of disposition
;
OutPtr(Port,"RUN RPGFAKXXX"&#cr&
    "PCOM job GETMAI.PCO completed."&#cr&
    "Output recorded in file TODAYS.MAI."&#cr&#ctrl("D") );
OutPtr(Port,"DAYTIM"&#cr);
SYNC;
end "HACKER" end "HACK";

ESCAPE;
OutPtr(Port,"LOGOUT"&#cr);
while not ZAP! 
    do calli(3000,calli!HIBER);
release(OChan);
print(crlf,"[job ",IFile," ",disposition,"]",crlf,
    "[output recorded in file ",OFile,"]");
EXIT;				! log out if necessary;

end 	"PCOM" $
 @0O