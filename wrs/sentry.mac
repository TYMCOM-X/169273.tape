title	SENTRY	PTY transparent link program
debug==	0			;=1 to trace special interrupts

twoseg
reloc	400000

swrbln=	20000			;20 page buffer
iniptr:	point	7,swrbuf	;pointer to buffer
inicnt:	exp	swrbln*5	;byte count
swrptr:	point	7,swrbuf	;pointer to buffer
swrcnt:	exp	swrbln*5	;byte count
swrbuf:	block	swrbln

X==	0			;be careful - for null job
P==	1			;stack pointer
A==	2			;for interrupt routines
B==	3
C==	4
D==	5
TC==	6			;TTY character
PC==	7			;PTY character
T1==	10			;for TTY character interrupts
T2==	11
T3==	12
T4==	13
P1==	14			;for PTY character interrupts
P2==	15
P3==	16
P4==	17

if2 <ifn DEBUG,<printx [debug switch enabled]>>
;;	CALLI's
opdef	CREPTY	[CALLI -141]	;create PTY
    CPNPT%==1			;PTY capacity exceeded
opdef	RETACH	[CALLI -135]	;reattach a port to another frame
opdef	VPEEK	[CALLI -136]	;peek at virtual address

;;	interrupt causes
.IACHR==1			;character received
.IAORG==6			;orange ball received
.IAZAP==7			;circuit zapper received
.IAYEL==11			;yellow ball received
.IAGOB==12			;character gobbler received
.IATCC==13			;terminal characteristic changed in PTY
.IANTQ==13			;notice to quit

;;	auxcal function codes
.AXI8S==1			;input image character and skip
.AXO8==	3			;output image character
.AXCBI==6			;clear input buffer
.AXCBO==7			;clear output buffer (send gobbler)
.AXLDE==11			;leave deffered echo
.AXSYB==12			;send yellow ball
.AXSLV==43			;slave command port
.AXCFS==64			;change file status bits for port
.AXSOB==70			;send orange ball
.AXTCN==73			;read/set term char by number
.AXTCP==74			;read changed term char from PTY
.AXOSF==76			;output string as will fit

;;	frmop function codes
.FOCFM==1			;create frame
    CF.FCE==1			;frame capacity exceeded

;;	gettab table numbers
.GTLOG==-24			;LDBLOG(U)
.GTLIC==-20			;JBTLIC(J)
.GTSTS==0			;JBTSTS(J)
 JB.LOG==1B15
 JB.JAC==1B17
.GTPRV==6			;JBTPRV(J)
.GTTTY==10			;TTYTAB(J)
.GTSLF==23			;NUMTAB(I)

;;	fatal error message macro
define	fatal (M)	<
	jrst	[reset
		outstr [asciz "M"]
		exit
		]	>

;;	debug error message macro
ifn	debug,<define	bug (M)	<outstr [asciz "[M]"]>>
ife	debug,<define	bug (M)	<;>>

SIXOUT:	MOVEI	T2,6
	MOVE	T3,[point 6,T1]
SIXOU1:	ILDB	TC,T3
	ADDI	TC,40
	SOSL	SWRCNT
	 IDPB	TC,SWRPTR
	SOJG	T2,SIXOU1
	POPJ	P,

DECOUT:	IDIVI	T1,^D10
	PUSH	P,T2
	SKIPE	T1
	 PUSHJ	P,DECOUT
	POP	P,TC
	ADDI	TC,"0"
	SOSL	SWRCNT
	 IDPB	TC,SWRPTR
	POPJ	P,


SENTRX:	MOVE	P,[iowd 40,PDL]	;init stack pointer

	HRROI	-20
	GETTAB
	 HALT
	HRL			;throw away program license
	SETLIC
	 JFCL

	SETZ	T1,
	SETUWP	T1,
	 HALT

CMD:	OUTSTR	[asciz "
#"]
	INCHRW	TC
	OUTSTR	[byte (7)15,12]
	CAIL	TC,"a"
	 SUBI	TC,40
	CAIN	TC,"?"
	 OUTSTR	HELP
	CAIN	TC,"P"
	 JRST	PRINT
	CAIN	TC,"C"
	 JRST	CLEAR
	CAIN	TC,"W"
	 JRST	WATCH
	CAIN	TC,"Q"
	 EXIT
	CAIN	TC,"A"
	 JRST	ADDUSR
	CAIN	TC,"D"
	 JRST	DELUSR
	OUTSTR	[asciz "type ? for help"]
	JRST	CMD

HELP:	asciz |
enter the first letter of one of
  Add user
  Clear buffer
  Delete user
  Print buffer
  Watch buffer
  Quit

|

CLEAR:	DMOVE	P1,INIPTR
	DMOVEM	P1,SWRPTR
	JRST	CMD

PRINT:	DMOVE	P1,INIPTR
PRINT1:	CAMN	P1,SWRPTR
	 JRST	CMD
	ILDB	TC,P1
	PUSHJ	P,CHROUT
	JRST	PRINT1

WATCH:	DMOVE	P1,SWRPTR
WATCH1:	SETZ	T1,
	SLEEP	T1,		;reschedule
	INCHRS	TC		;user impatient?
         JRST   WATCH2
	JRST	CMD
WATCH2:	CAMN	P1,SWRPTR	;anything new?
	 JRST	WATCH1		;no - wait
	ILDB	TC,P1		;yes - print it
	PUSHJ	P,CHROUT
	JRST	WATCH2		;try again

array	USRBLK[40]
LUKUSR:	OUTSTR	[asciz "user: "]
	SETZM	INIUNM
	SETZM	INIUNM+1
	MOVE	P1,[point 6,INIUNM]
	MOVEI	P2,^D12
LUKU1:	INCHWL	TC
	CAIGE	TC," "
	 JRST	LUKU9
	CAIL	TC,"a"
	 SUBI	TC,40
	SUBI	TC,40
	SOSL	P2
	 IDPB	TC,P1
	JRST	LUKU1
LUKU9:	CAIN	TC,15
	 INCHWL	TC
	MOVEI	37
	MOVEM	USRBLK
	MOVE	[1,,1]
	MOVEM	USRBLK+1
	MOVEI	INIUNM
	MOVEM	USRBLK+2
	MOVSI	(sixbit "UFD")
	MOVEM	USRBLK+3
	INIT	0
	 sixbit	"DSK"
	 xwd	0,0
	  fatal	<?cant init DSK>
LUK:	LOOKUP	USRBLK
	 JRST	[OUTSTR [asciz "?cant find user"]
		POP	P,
		JRST	CMD]
	POPJ	P,

ADDUSR:	PUSHJ	P,LUKUSR
	HRRZ	T1,USRBLK+37
	JUMPE	T1,ADDOK
	OUTSTR	[asciz "?user already has PJC program"]
	CLOSE  
	JRST	CMD
ADDOK:	HRROI	-23		;FPN
	GETTAB	
	 HALT
	MOVEM	USRBLK+35
	HRROI	3		;NAM
	GETTAB
	 HALT
	MOVEM	USRBLK+36
	MOVEI	1		;class B user
	MOVEM	USRBLK+37
	RENAME	USRBLK
	 fatal	<?cant do rename>
	CLOSE  
	JRST	CMD

DELUSR:	PUSHJ	P,LUKUSR
	SETZM	USRBLK+35
	SETZM	USRBLK+36
	SETZM	USRBLK+37
	RENAME	USRBLK
	 fatal	<?cant do rename>
	JRST	CMD

CHROUT:	CAIN	TC,15
	 JRST	CRLFOU
	CAIGE	TC,40
	 JRST	CTLCOU
CHROU1:	OUTCHR	TC
	POPJ	P,
CRLFOU:	OUTSTR	[byte (7)15,12]
	POPJ	P,
CTLCOU:	OUTCHI	"^"
	OUTCHI	"@"(TC)
	POPJ	P,

array	PDL[40]			;stack
array	INIUNM[2]		;user name of init file
integer	INIFIL			;file name of init file
array	INIRUN[6]		;run block

INIXIT:	MOVSI	T1,(sixbit "DSK");exit without doing anything - run init
	MOVEM	T1,INIRUN
	SKIPN	T1,INIFIL
	 JRST	NEXIT		;oops, no init file
	MOVEM	T1,INIRUN+1
	SETZM	INIRUN+2
	SETZM	INIRUN+3
	MOVEI	T1,INIUNM
	MOVEM	T1,INIRUN+4
	SETZM	INIRUN+5
	MOVEI	T1,INIRUN
	RUN	T1,		;try to run it
	OUTSTR	[asciz "?can't run required program"]
NEXIT:	EXIT	1,
	JRST	NEXIT

START:	JRST	SENTRX
	MOVEM	3,INIFIL	;save init file name
	DMOVEM	4,INIUNM	;save init file user name
	TRZ	11,1		;turn off verify bit
	MOVE	[3,,7]		;bits,,addr of project code
	SKIPE	7		;if there is a project code...
	 CHPRJ			;set it
	  JFCL
	HRROI	6		;get PRV
	GETTAB
	 MOVE	[177,,177]
	TRZ	1B26
	SETPRV			;set PRV
	 JFCL

	MOVE	P,[iowd 40,PDL]	;init stack pointer

	HRROI	T1,3		;JBTNAM
	GETTAB	T1,
	 SETZ	T1,
	SETNAM	T1,		;zero FPN
	 JFCL

	SETO	T1,
	GETLCH	T1
	TLNE	T1,(1B12)	;is it an AUX circuit?
	 JRST	INIXIT		;don't do this to circuits
	HRRZM	T1,TT#		;TTY port #

	HRROI	T1,-24		;get sup login info
	GETTAB	T1,
	 SETZ	T1,
	TLNN	T1,(17B11)	;is TIC=0 (aux circuit)
	 JRST	INIXIT
	
	HRROI	T1,.GTSTS	;get JBTSTS
	GETTAB	T1,
	 JFCL
	TLZ	T1,(JB.LOG)	;turn off JLOG
	TLO	T1,(JB.JAC)	;turn on JACCT
	SETJAL	T1,
	 JFCL

	SETZ	T1,
	SETUWP	T1,		;protect high segment R/W
	 fatal	<?vm protection faliure>

	SETZ	T1,		;create PTY pair
	CREPTY	T1,
	 JRST	[CAIN	T1,CPNPT%
		  fatal	<?PORT capacity exceeded>
		fatal	<?error creating PORT>
		]
	MOVEM	T1,PP#		;PTY port #

	MOVSI	T1,.FOCFM	;create frame with default parameters
	FRMOP	T1,[0]
	 JRST	[CAIN	T1,CF.FCE
		  fatal	<?frame capacity exceeded>
		fatal	<?error creating frame>
		]
	MOVEM	T1,FD#
	
	MOVEI	T1,15
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR
	MOVEI	T1,"["
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR

	HRROI	T1,-22		;get user name
	GETTAB	T1,
	 SETZ	T1,
	PUSHJ	P,SIXOUT
	HRROI	T1,-21		;get user name
	GETTAB	T1,
	 SETZ	T1,
	PUSHJ	P,SIXOUT

	MOVEI	T1,"#"
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR
	PJOB	T1,
	PUSHJ	P,DECOUT
	
	MOVEI	T1,","
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR
	MOVE	T1,FD
	ANDI	T1,7777
	PUSHJ	P,DECOUT
	
	MOVEI	T1,"]"
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR
	MOVEI	T1,15
	SOJL	SWRCNT
	 IDPB	T1,SWRPTR

	HRROI	T1,.GTLIC	;copy frame license
	GETTAB	T1,		;get our license
	 JRST	LICDON
	MOVE	T2,[.GTLIC,,.GTSLF]
	GETTAB	T2,		;get address of JBTLIC
	 JRST	LICDON
	MOVE	T3,FD		;get child frame number
	ANDI	T3,7777		;mask off abs frame number
	ADD	T2,T3		;T2/ JBTLIC+(frame#)
	TLO	T2,(1B0)	;virtual memory reference
	MOVEI	T3,T1		;arg block at T1
	POKE	T3,
	 JRST	LICDON
	bug <LIC>
	SKIPA
LICDON:	 OUTSTR [asciz "[JBTLIC not patched]
"]
	;; here set LDBLOG on PTY's LDB
	MOVE	A,[.GTLOG,,.GTSLF]
	GETTAB	A,
	 JRST	NOLOG
	HRRZM	A,B		;(B)=GETLOG temporarily
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(PUSHJ 1,)
	 fatal	<?GETLOG not a PUSHJ P,>
	ADDI	A,4		;offset into LINCHK of LINTAB
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(<SKIPA 5,(5)>)
	 fatal	<?CHKLIN+4 not a SKIPA U,(U)>
	HRRZM	A,C		;(C)=LINTAB
	ADDI	B,2		;offset from GETLOG of LDBLOG
	HRLI	B,(1b0)
	VPEEK	B,
	 JRST	NOLOG
	HLRZ	T1,B
	CAIE	T1,(<SKIPA 6,(5)>)
	 fatal	<?GETLOG+2 not a SKIPA T1,(U)>
	HRRZM	B,B		;(B)=LDBLOG
	HRRZ	T1,PP		;port number
	ADD	T1,C		;+LINTAB
	HRLI	T1,(1b0)
	VPEEK	T1,
	 JRST	NOLOG
	TLNE	T1,-1
	 fatal	<?left half of LINTAB(port) non-zero>
	ADD	T1,B		;(T1)=LDBLOG(U)
	HRLI	T1,(1b0)
	MOVE	T2,[17b11!1b16!77b19!77b27!177b35]
	HRROI	T3,.GTLOG
	HRL	T3,TT
	GETTAB	T3,
	 JRST	NOLOG
	AND	T3,T2
	MOVE	A,T1
	VPEEK	A,
	 JRST	NOLOG
	HRROI	B,.GTLOG
	HRL	B,PP
	GETTAB	B,
	 JRST	NOLOG
	CAME	A,B
	 fatal	<?.GTLOG(p) neq LDBLOG(u)>
	MOVEI	A,T1
	BITPOK	A,
	 JRST	NOLOG
	bug <LOG>
	SKIPA
NOLOG:	 OUTSTR	[asciz "[LDBLOG not patched]
"]

	HRROI	T1,.AXSLV	;slave command port (look detached)
	AUXCAL	T1,
	 jfcl			;oh well...

	HRROI	T1,.AXTCN	;copy terminal characteristics
	HRL	T1,TT
	HRROI	T2,.AXTCN	
	HRL	T2,PP
	SETZ	T3,		;start with characteristic 0
TCINI:	HLLOS	T3		;read characteristics
	AUXCAL	T1,T3		;get characteristic from real TTY
	 JRST	TCDON		;no more characteristics
	AUXCAL	T2,T3		;set it on other end of PTY
	 fatal	<?cant set terminal characteristic>
	ADD	T3,[1,,0]	;incriment terminal char #
	JRST	TCINI
TCDON:

	HLL	T1,PP		;set mode on our end of PTY
	HRRI	T1,.AXCFS	;change file status for port
	AUXCAL	T1,214		;image binary no echo

	HRRO	T1,FD		;move PTY to child
	HRRZ	T2,PP		;his port number
	HRLI	T2,(2B2)	;attach in command mode
	SKIPE	INIFIL		;if init file,
	 HRLI	T2,(3B2)	; then attach in user mode
	MOVEI	T3,T1		;address of arg block
	RETACH	T3,
	 fatal	<?cant retach PTY to child frame>
	
	HRROI	T1,.AXCFS	;change file status for port
	HRL	T1,TT
	AUXCAL	T1,214		;image binary no echo

	HRROI	T1,.GTPRV	;set logout on disconnect
	GETTAB	T1,
	 fatal	<?cant get JBTPRV>
	TRZ	T1,3B20		;all off=logout on disconnect
	SETPRV	T1,

	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
TCCCLR:	AUXCAL	A,B
	 fatal	<?cant read terminal characteristics from PTY>
	JUMPGE	B,TCCCLR	;more?

	HRLI	T1,24		;graft, as in disown
	HRR	T1,FD
	FRMOP	T1,[0]
	 fatal	<?cant disown frame>
	MOVEI	T1,7777
	ANDM	T1,FD		;convert to absolute handle

; run init file in child (if so)

array	CINIFB[4]

	SKIPN	INIFIL		;is there an init file?
	 JRST	CNOINI
	MOVEI	T1,3
	MOVEM	T1,CINIFB
	MOVSI	T1,(sixbit "DSK")
	MOVEM	T1,CINIFB+1	;set device name
	MOVEI	T1,INIUNM
	MOVEM	T1,CINIFB+2	;set user name
	MOVE	T1,INIFIL      
	MOVEM	T1,CINIFB+3	;set user name
	MOVSI	T1,33		;.FORUN
	HRR	T1,FD		;frame desc
	FRMOP	T1,CINIFB	;RUN the INIT file
	 JFCL			;nothing we can do here!
CNOINI:

subttl	initialize interrupt system
;	* reset and enable INTADR system
;	* assign causes to channels
;	* enable all channels

	MOVE	T1,[VECDAT,,VECTOR]	;load the vector
	BLT	T1,VECTOR+VECLEN-1

	MOVE	T1,[6,,VECTOR]		;clear and enable system
	INTADR	T1,
	 fatal	<?cant initialize INTADR system>
	
	MOVE	T1,[.IANTQ,,ZAP..C]	;NTQ 
	INTASS	T1,
	 fatal	<?cant assign NTQ>

	HRLOI	T1,<.IAZAP>B26+ZAP..C	;PTY ZAP
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign PTY ZAP>

	HRLOI	T1,<.IAORG>B26+ORG.TC	;ORANGE BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for TTY>

	HRLOI	T1,<.IAORG>B26+ORG.PC	;ORANGE BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for PTY>

	HRLOI	T1,<.IAYEL>B26+YEL.TC	;YELLOW BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for TTY>

	HRLOI	T1,<.IAYEL>B26+YEL.PC	;YELLOW BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for PTY>

	HRLOI	T1,<.IAGOB>B26+GOB.TC	;GOBBLER from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for TTY>

	HRLOI	T1,<.IAGOB>B26+GOB.PC	;GOBBLER from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for PTY>

	HRLOI	T1,<.IATCC>B26+TCC.PC	;TERM CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign TERM CHAR for PTY>

	HRLOI	T1,<.IACHR>B26+CHR.TC	;CHAR from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign CHAR for TTY>

	HRLOI	T1,<.IACHR>B26+CHR.PC	;CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign CHAR for PTY>

	SETO	X,			;enable all interrupt channels
	INTENB	X,
	 fatal	<?cant enable interrupt channels>

WAIT:	SETZ	X,		;don't wake up for anything
	HIBER	X,
	 JRST	WAIT
	JRST	WAIT

subttl	interrupt routines for special balls

ZAP..:	bug <ZAP..>
	SETO
	ZAPCIR
	LOGOUT

ORG.T:	PUSH	P,A
	bug <ORG.T>
	HRROI	A,.AXSOB	;send orange ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

ORG.P:	PUSH	P,A
	bug <ORG.P>
	HRROI	A,.AXSOB	;send orange ball to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.T:	PUSH	P,A
	bug <YEL.T>
	HRROI	A,.AXSYB	;send yellow ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.P:	PUSH	P,A
	bug <YEL.P>
	HRROI	A,.AXSYB	;send yellow ball to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	DISMIS

GOB.T:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	bug <GOB.T>
	DISMIS

GOB.P:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	bug <GOB.P>
	DISMIS

subttl	interrupt routines for terminal characteristics
;	no TCC.T because can't do anything with them

TCC.P:	PUSH	P,A
	PUSH	P,B
TCC.P0:	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
	AUXCAL	A,B
	 fatal	<?cant read terminal characteristics from PTY>
	JUMPL	B,TCC.P1	;none left?
	bug <TCC.P>
	HRROI	A,.AXTCN
	HRL	A,TT
	AUXCAL	A,B		;go set it on real TTY:
	 fatal	<?cant set terminal characteristic on TTY>
	JRST	TCC.P0
TCC.P1:	POP	P,B
	POP	P,A
	DISMIS

subttl	interrupt routines for terminal originated traffic
;	T1-T4 are reserved for these routines

CHR.T:	HRROI	T1,.AXI8S	;get next character
	HRL	T1,TT
	AUXCAL	T1,TC
	 DISMIS			;no more characters
	SOSL	SWRCNT		;see if room
	 IDPB	TC,SWRPTR	;put in buffer
	HRROI	T1,.AXO8	;output to PTY 
	HLL	T1,PP
	AUXCAL	T1,TC
	JRST	CHR.T

subttl	interrupt routines for PTY originated traffic
;	P1-P4 are reserved for these routines

CHR.P:	HRROI	P1,.AXI8S	;get next character
	HLL	P1,PP
	AUXCAL	P1,PC
	 DISMIS			;no more characters
	HRROI	P1,.AXO8	;output character
	HRL	P1,TT
	AUXCAL	P1,PC
	JRST	CHR.P		;try again

subttl	define interrupt vector and channel numbers

VECDAT:	;; interrupt vectors
define	INTDEF (x) < irp x <
EXP 0,x				;;load vector table
x'C==<.-VECDAT>/2		;;define interrupt channel number
>>
intdef	<GOB.T,GOB.P>
intdef	<CHR.T,ORG.T,YEL.T>
intdef	<TCC.P>
intdef	<CHR.P,ORG.P,YEL.P>
intdef	<ZAP..>
VECLEN==.-VECDAT

lit
reloc	0
var
VECTOR:	block ^D72

end	START
