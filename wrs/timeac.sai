begin
require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)FRMRUN.REQ" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require "ARGS.REQ" source!file;
!get!module(APPEND);

item AUTOMATIC;
integer item WEEKS;

label RESTART;

preload!with
    " ??? "," Jan "," Feb "," Mar "," Apr "," May ",
    " Jun "," Jul "," Aug "," Sep "," Oct "," Nov "," Dec ";
string array MONTH[0:12];

integer procedure cvYYMMDD( integer DECD );
begin
    integer Y,M,D;
    D := DECD mod 31 + 1;
    M := DECD % 31 mod 12 + 1;
    Y := DECD % (31*12) + 64;
    if DECD < 0 or Y > 94
	then return( "??????" );
    return( Y*10000+M*100+D );
end;

simple string procedure cvDate( integer DECD );
begin
    integer Y,M,D;
    D := DECD mod 31 + 1;
    M := DECD % 31 mod 12 + 1;
    Y := DECD % (31*12) + 64;
    if DECD < 0 or Y > 94
	then return( "?? ??? ??" );
    return( cvs(D) & MONTH[M] & cvs(Y) );
end;

simple string procedure cvTime( integer SECS );
begin
    integer A,B;
    string S;
    getformat( A,B );
    S := cvs( SECS % 3600 ) &  ":";
    setformat(-2,0);
    S := S & cvs( SECS % 60 mod 60 ) & ":" &
        cvs( SECS mod 60 );
    setformat( A,B );
    return( S );
end;

simple string procedure cvZone( integer Z,D(0),T(0) );
begin
    own safe integer array X[0:2];
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( Z, Z land '37 );
    calli( location(X[0]), calli!DATUUO );
    return( if X[1] neq T
	then case Z land '37 of (	! daylight time;
	    ['06] "HDT", ['10] "PDT", ['11] "MDT", ['12] "CDT",
	    ['13] "EDT", ['14] "ADT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] & "+" )
	else case Z land '37 of (	! standard time;
	    ['06] "HST", ['10] "PST", ['11] "MST", ['12] "CST",
	    ['13] "EST", ['14] "AST", ['20] "UT",
	    [else] "???YXWVUTSRQPONZABCDEFGHIJKLM???"[Z to Z] )   );
end;

string procedure maiDate;
!
    Date:
	Return current local date and time in form
		WWW, DD MMM YY HH:MM:SS ZZZ
	as recommended in RFC #822.
;
begin
    integer D;			! date - days past 1 Jan 1964, UT;
    integer T;			! time - tics past midnight UT;
    integer Z;			! zone - user local time zone w/daylight flag;
    string DOW;			! day of week (local);
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT       = '20;	! monitor's offset for UT;
    do begin
	D := calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
	T := calli( !xwd( !cnTIM, !gtCNF ), calli!GETTAB );
    end until D = calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
    Z := (calli(!xwd(-1,!gtPRV),calli!GETTAB) lsh (7-35)) land '77;
    if Z = 0 then Z := UT;	! default to Universal Time;
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( DaysPast+UT, DaysPast+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to local time;
    DOW := case X[0] mod 7 of ("Wed","Thu","Fri","Sat","Sun","Mon","Tue");
    X[2] := !xwd( DaysPast+Z, DecForm+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to DEC format;
    return(
	DOW& ", "&
	cvDate( X[0] )& " "&
	cvTime( X[1] % 60 )& " "&
	cvZone( Z, X[0],X[1] )   );
end;

integer procedure localDate;
!
    localDate: return days past date form of current date in local time zone.
;
begin
    integer D;			! date - days past 1 Jan 1964, UT;
    integer T;			! time - tics past midnight UT;
    integer Z;			! zone - user local time zone w/daylight flag;
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT       = '20;	! monitor's offset for UT;
    do begin
	D := calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
	T := calli( !xwd( !cnTIM, !gtCNF ), calli!GETTAB );
    end until D = calli( !xwd( !cnDAT, !gtCNF ), calli!GETTAB );
    Z := (calli(!xwd(-1,!gtPRV),calli!GETTAB) lsh (7-35)) land '77;
    if Z = 0 then Z := UT;	! default to Universal Time;
    X[0] := D;
    X[1] := T;
    X[2] := !xwd( DaysPast+UT, DaysPast+Z );
    calli( location(X[0]), calli!DATUUO );	! convert to local time;
    return( X[0] );
end;

integer procedure cvDEC( integer DAYS );
begin
    integer array X[0:2];
    define DaysPast = '400000;	! flag for days past format date;
    define DecForm  = '000000;	! flag for DEC format date;
    define UT       = '20;	! monitor's offset for UT;
    X[0] := DAYS;
    X[1] := 0;
    X[2] := !xwd( DaysPast+UT, DecForm+UT );
    calli( location(X[0]), calli!DATUUO );
    return( X[0] );
end;

integer procedure ReadMarker;
begin
    integer C,B,E,OldDate;
    open(C_getchan,"DSK",0,1,1,80,B,E);
    lookup(C,"TIMEAC.SUN",E);
    oldDate := if E then 0 else cvd(input(C,0));
    release(C);
    return( OldDate );
end;

procedure UpdateMarker( integer Date );
begin
    integer C,B,E;
    string oldDate;
    open(C_getchan,"DSK",0,1,1,80,B,E);
    enter(C,"TIMEAC.SUN",E);
    out(C,cvs(Date));
    release(C);
end;

procedure edit;
begin
    FRMRUN( "(SYS)PEAK", F.CCL, !SKIP!, "EDS", "MOD TIMEAC.DAT/L:999" );
    goto RESTART;
end;

integer WeekEnding, Date1, Date2;
integer C,B,E,Save;
string HDR, MSG;

open(C_getchan,"DSK",0,4,4,2560,B,E);
RESTART:
lookup(C,"TIMEAC.HDR",E);
HDR := null;
while not E do HDR := HDR& input(C,0);
close(C);
MSG := null;
argparse( any, any, {AUTOMATIC,WEEKS}, ARGS );
Date2 := localDate;
Date2 := Date2 - (Date2+3) mod 7;
if props(WEEKS) then Date2 := Date2 + 7*datum(WEEKS) - 7;
Date1 := ReadMarker;
Date1 := if Date1 leq 0 then Date2 else Date1 + 7;
if Date1 > Date2 then begin
    string S;
    boolean deJaVu;
    if deJaVu then usererr(0,0,0,"X");
    deJaVu := true;
    print( "[Time accounting is current]"& crlf );
    print( "Edit data file? " );
    if kequ( S:=inchwl, "yes"[1 to length(S)] )
	then edit;
end;
if Date1 < Date2 then
    print( "%Time accounting is ", (Date2-Date1)%7, " weeks behind"& crlf );
lookup(C,"TIMEAC.DAT",E);
for WeekEnding := Date1 step 7 until Date2 do begin
    integer LineNo, YYMMDD, Total;
    string WeekEndingDate;
    LineNo := 0;
    YYMMDD := cvYYMMDD(cvDEC(WeekEnding));
    WeekEndingDate := cvDate(cvDEC(WeekEnding));
    MSG := MSG&
	"Date: "& maiDate& crlf&
	"Subject: time accounting worksheet"& crlf&
	"Week-Ending-Date: Sun, "& WeekEndingDate& crlf&
	HDR&	"
------------------------------------------------------------------------------
ActCode	Hours	PIR	PROJ	TaskID	Comments
------------------------------------------------------------------------------

";
    while Save < YYMMDD-6 do begin
	Save := intin(C);
	if E then done;
    end;
    if not( YYMMDD-6 leq Save leq YYMMDD)
	then begin
	    integer WE;
	    own boolean deJaVu;
	    close(C);
	    append(C,"TIMEAC.DAT",E);
	    for WE := WeekEnding step 7 until Date2 do begin
		print( "%no entry for ", cvDATE(cvDEC(WE)), crlf );
		cprint(C, cvYYMMDD(cvDEC(WE)), " "& crlf );
	    end;
	    close(C);
	    if props(AUTOMATIC) then
		usererr(0,0,"Entries missing from TIMEAC.DAT","X");
	    if deJaVu then begin
		print( "Edit TIMEAC.DAT? " );
		if not kequ(inchwl[1 to 1],"y") then
		    usererr(0,0,"Time accounting aborted.","X");
	    end else deJaVu := true;
	    edit;
	end;
    Total := 0;
    while YYMMDD-6 leq Save leq YYMMDD do begin
	while not E do begin
	    integer I;
	    Save := intin(C);
	    if B neq "=" then done;
	    MSG := MSG& cvs(Save)& #ht& cvs(I:=intin(C));
	    Total := Total + I;
	    while B = "," do begin
		MSG := MSG& #ht;
		I := intin(C);
		if I then MSG := MSG& cvs(I);
	    end;
	    MSG := MSG& crlf& crlf;
	end;
    end;
    print( WeekEndingDate, "    ", Total, " hours"& crlf );
    MSG := MSG& "------------------------------------------------------------------------------"& crlf& #eot;
end;
close(C);
if not props(AUTOMATIC) then while true do begin
    print( crlf& "Edit, Send, Print, Quit: " );
    case inchwl of begin
    ["e"]["E"] edit;
    ["p"]["P"] print( MSG );
    ["s"]["S"] done;
    ["q"]["Q"] usererr(0,0,"Time accounting aborted.","X");
    [else] print( "Enter Edit, Send, Print or Quit"& crlf )
    end;
end;
FRMRUN( "(MAIL)MAILER", F.NEOL+F.NWAI+F.NTTY+F.CCL, !SKIP!, "MAI", MSG );
UpdateMarker( Date2 );
append(C,"TIMEAC.DAT",E);
cprint(C, cvYYMMDD(cvDEC(Date2+7)), " " );
release(C);

end $
   