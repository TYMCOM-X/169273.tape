------------------------------------------------------------------------------
				START.LIB
------------------------------------------------------------------------------

The following parameters should be defined in the *.com file:

     MAXHST  maximum number of hosts associated with this interface slot
     MAXPRT  maximum number of ports associated with this interface slot
     NTOUT   number of timeout list entries to generate
     CNTRL   dispatcher control bits
     ENGINE  set to 1 if executing on a Tymnet Engine
     IRSIZE  number of bytes to provide for input ring, from dispatcher
     ORSIZE  number of bytes to provide for output ring, to dispatcher

The following MUST be defined SOMEWHERE in the assembly:

     IRING   the start of the input ring, from dispatcher
     ORING   the start of the output ring, to dispatcher
     ENTRY   the location of the first instruction to be executed
------------------------------------------------------------------------------
				TRACE.LIB
------------------------------------------------------------------------------

The symbols available are:

     TRACE   A 144d byte patch area for code.
     TRBGN   Here to proceed at ENTRY with trace enabled.
     TRPSD   The last trap PSD saved.
     TRSAVE  17d words of temp storage, available to save registers, etc.
     IPSD    The PSD loaded by TRBGN.
------------------------------------------------------------------------------
				TIMOUT.LIB
------------------------------------------------------------------------------

The following parameter MUST be defined at assembly time:

     NTOUT   number of timeout entries which may be  active at any one time.

Six symbols are declared:

	JAL R0,IZT		: initialize timeout		[]

	JAL R0,TIMOUT		: service timeouts
				: calls rtns as needed R0/ rtn adr R1/ fastc
	
	J TORET			: return from service routine

	R0 = service routine address
	R1 = next time to call
	JAL R5,TOPUT		: put up timeout		[6-F]

	R0 = service routine address
	JAL R5,TOGET		: delete timeout entry		[6-F]

	R0 = service routine address
	JAL R5,TONOW		: execute timeout immediately	[]

Note: When a routine is called from the timeout list, it is removed.
------------------------------------------------------------------------------
				FRING.LIB
------------------------------------------------------------------------------

Utility Routines:

	R2 = port number
	R3 = pointer to SC type string
	JAL R5,OCS		: output canned data string	[6-D,F]

	R2 = port number
	R3 = pointer to SC type string
	JAL R5,OCM		: output canned message		[6-D,F]

	R2 = number of characters
	R3 = pointer to first character
	JAL R5,OBS		: output byte string		[6-D,F]

Primative Input Routines:
	
	JAL R4,LOOK		: check for input message	[1-3,5-D,F]
	  J <no msgs>		: (skip 4)
	R1 = port number	: has been read
	R2 = message type code	: not yet read
	JE <for port 0>

	JAL R4,GETCH		: get a character		[1-3,5-D,F]
	R0 = character

	JAL R4,GETH		: get a halfword		[1-3,5-D,F]
	R0 = halfword

	JAL R4,GETW		: get a fullword		[1-3,5-D,F]
	R0 = fullword

	R0 = number of bytes remaining
	JAL R4,FLUSH		: flush remainder of message	[1-3,5-D,F]

	JAL R4,ELIR		: end logical record		[1-3,5-D,F]

Primative Output Routines:

	R0 = number of bytes needed
	JAL R4,ROOM		: wait for ORING room		[0,2,3,5-E]
 
	JAL R4,SPACE		: measure space in ORING	[0-3,5-E]
	R0 = number of free bytes

	R0 = number of bytes needed
	R1 = port #
	R2 = message type code
	JAL R4,SLOR		: start logical output record	[0-2,5-E]

	R0 = character
	JAL R4,PUTCH		: put byte in ORING		[0-3,5-E]

	R0 = halfword
	JAL R4,PUTH		: put halfword in ORING		[0-3,5-E]

	R0 = fullword
	JAL R4,PUTW		: put fullword in ORING		[0-3,5-E]

	JAL R4,ELODR		: end logical output data rec	[2-3,5-E]

	JAL R4,ELOR		: end logical output record	[0-3,5-E]
------------------------------------------------------------------------------
				BUFFER.LIB
------------------------------------------------------------------------------

struct {			: history buffer, if BUFTRC>0
    byte Character;
    byte BufferNumber;
    halfword CallersAddress;
} HISTAB[100], *HISTX;

The following parameters MUST be defined before assembly:

    NBUF    the number of buffers to create
    NBFLET  the number of bufferlets to create

struct Bufferlet {		: a bufferlet
    halfword ListLink;
    byte Data[6];
};
BF	hs NBUF			: buffer flags
BB	hs NBUF			: adr of beg bufferlet
BE	hs NBUF			: adr of end bufferlet
BCT	hs NBUF			: buffer count
FLAGS	hs NBUF/16		: flag bit array (indexed by BF)

	JAL R5,IZBF		: initialize

	R1 = buffer index (buf # * 2)
	JAL R4,GCI		: get a character from buffer
	R0 = character

	R0 = character
	R1 = buffer index (buf # * 2)
	JAL R4,WCI		: write character to buffer

	R1 = buffer index (buf # * 2)
	JAL R4,WCD		: back up buffer to restore last char

	R1 = buffer index (buf # * 2)
	JAL R4,EMPTY		: empty (flush) buffer

Note: this package uses TIMOUT.LIB - requires one list entry!

ZAPBUF	macro [ ]		: (optional) called if CKBZ zaps buffer
------------------------------------------------------------------------------
				BBFLET.LIB
------------------------------------------------------------------------------

The following parameters MUST be defined before assembly:

    NBBFLT   number of big bufferlets to create
    BBFLSZ   size (in bytes) of a big bufferlet,  MUST be even

The following parameters are defined for the user:

    BBUFER   base address of big bufferlet storage area
    BBFPSZ   size in bytes of a bufferlet pointer

Utility Routines:

	R3 = pointer to first big bufferlet in chain
	JAL R5,PBBC		: put big bufferlet chain	[0,1,3,4,8-F]

Primative Routines:

	JAL R4,IZBB		: initialize big bufferlets	[0,1,3,5,8-F]

	JAL R4,GBB		: get big bufferlet		[0,1,3,5,8-F]
	 J <none-free>
	R3 = pointer to big bufferlet

	R3 = pointer to big bufferlet to return
	JAL R4,PBB		: put big bufferlet		[0,1,3,5,8-F]

Debugging modes (active if symbol defined as a positive number):

    BBF.D1   count in use bufferlets in BUFCNT (GBB: BUFCNT++, PBB: BUFCNT--)
    BBF.D2   crash if no bufferlets available in GBB
    BBF.D3   check BB address range on return
    BBF.D4   crash on use of free buffer / return of unused buffer
------------------------------------------------------------------------------
				CRASH.LIB
------------------------------------------------------------------------------

GOOD crash sequence:

	JAL R10,CRASH		: crash slot
	HC 0			: this key distinguishes GOOD crash
	BC 4*OurLinkRegister	: register our caller linked to us with
	BC CrashTypeCode	: type of crash

Locations crash data is saved in:

CRAT	hs 0			: start of crash table
CRSHCT	hc 0			: crash count
CRASHC	hc 1			: crash code (initially manual restart)
CPOINT	wc 0			: crash PC, (contents of R10)
CFROM	wc -1			: caller's PC, (contents of OurLinkRegister)
CRREG	hs 20			: crash save registers
FGNDFL	hs 1			: foreground flag
------------------------------------------------------------------------------
				FRONT.LIB
------------------------------------------------------------------------------

The following data structures should be initialized by the user:

BREAK	ws NPORT		: pointers to bit array of break chars
MBREAK	ws NPORT		: pointers to bit array of break msg types
PROCESS	ws NPORT		: pointers to process to activate on break
TISIS	bs NPORT/8		: bit array set to indicate output waiting

The following symbols should be defined by the user:

MAXCHAR	eq x			: break if buffer count exceeds X
ECHO	eq x			: cause Tymsat echoing if X>0

Routines:

	JAL R0,IZFRONT		: initialize package

	JAL R0,INPUT		: call to process input from ISIS

	JAL R0,OUTPUT		: call to process output to ISIS

	R0 = # seconds
	R1 = input buffer pointer
	JAL R4,PTTOUT		: set port timeout

	R1 = port #
	JAL R5,ZAPPRT		: send zap to ring for port

Process Activation: (how FRONT calls user on break)

	R0 = activation key (flags set) one of following:
	    message-type
	    0	data break, R2 = activation character
	    -1	needle, R5-R12 setup with needle data (see below)
	    -2	too many characters (MAXCHAR)
	    -3	flushing...next will not necessarily be data
	    -4	tymeout
	    -5	port 0 message
	L R15,PROCESS,R1	: get address of user process for this port
	JAL R15,R15		: jump and link to user process
	R0 = timeout value for next activation:
	    >0	this is the timeout in seconds
	    =0	disable timeout
	    <0	leave it as it was

Registers on Process Activation due to Needle:

	R0 = -1
	R5 = invoice number
	R6 = destination host
	R7 = originating node
	R8 = originating host
	R9 = originating port
	R10 = dialect code
	R11 = TID
	R12 = number of chars in username (uname is in port's buffer)
------------------------------------------------------------------------------
				FRNTND.LIB
------------------------------------------------------------------------------

The following symbols are to be provided by the user:

    ECHO	causes Tymsat echoing for terminals
    AUTOBP	if true, causes auto backpressure (MAXCHAR)
    MAXCHAR	backpresure if >MAXCHAR chars in buffer (and AUTOBP)
    PTIMEO	port timeouts available
    OUTPROC	output activation code will be included
    WAITZA	true to have ISIS ack zappers for cleanup

The following symbols may be provided by user:

    CRIPOM	($0 20) crash code for invalid port 0 message
    CRNAR	($0 21) crash code for no activation routine found
    CRINVN	($0 22) crash code for invalid needle received
    CRINVM	($0 23) crash code for invalid message received

The following data structures are to be provided and initialized by user:

struct DCB {			: device control block
    halfword DCBICC;		: input character count
    halfword ACTIVD;		: A.CODE relative adr of data rtn
    halfword ACTIVC;		: A.CODE relative adr of tab of ctl msg rtns
    halfword ACTIVT;		: A.CODE relative adr of timeout rtn
    halfword ACTIVO;		: A.CODE relative adr of output rtn
}
DCBLKS	hs NPORT*sizeof(DCB)	: space for DCB's	
POTRAB	hs NPORT		: address of DCB for port rel to DCBLKS

The following data structure is provided by package and initialized by user:

PECHO	bs NPORT/8		: bit array, 1 allows to enter def echo mode

Registers setup for control/data message activation routine:

	R1 = port number
	R2 = message type
	R5 = link register
	R12 = DCB pointer
	R14 = input ring pointer

Registers setup for needle message activation routine:

	R1 = port number
	R2 = number of characters in username
	R5 = link register
	R6 = invoice number
	R7 = destination host number
	R8 = originating node number
	R9 = originating host number
	R10 = originating port number
	R11 = dialect code
	R13 = TID
	R14 = input ring pointer

Registers setup for timeout activation routine:

	R1 = port number
	R5 = link register
	R12 = DCB pointer

Offsets from A.CODE of useful control message proc routines:

     Symbol    Routine  Description

     XTOSS     TOSS     tosses the message
     XZAP      ZAP      handles zapper
     XNOSEND   NOSEND   handles backpressure
     XRESEND   RESEND   handles release backpressure
     XGOBBLE   GOBBLE   handles gobbler
     XFLBACK   FLBACK   handles flush backward
     XEDEM     EDEM     handles enter defered echo mode
     XLDEM     LDEM     handles leave defered echo mode
     XGB       GB       handles green ball
     XRB       RB       handles red ball
     XOB       OB       handles orange or black ball
     XPNEED    PNEED    handles either pseudo needle
     XXLIM     XLIM     handle xmit limit
     XINVAL    INVAL    crashes with invalid message code
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                    7.1.11  ARING.LIB

             For convenience  in handling ASYNC  I/O, this package  is provided
        with  a set  of routines  to  get and  place characters  for  the async
        driver,  performing all  required bookkeeping  on the  appropriate port
        ring's pointers.

             The following parameter MUST be defined before assembly:

               NAPORT  number of async ports.

             The following quantities are defined by the package:

               NGRP    number  of groups  (16 ports  each)  required for
                       NAPORT ports.

               RBS     number of bytes in a port's ring entry.

               ARING   the start address of the async ring storage.

               DSR     NGRP-halfword bit array for DSR term.

               DTR     NGRP-halfword bit array for DTR term.

               CP      NGRP-halfword bit array for CP term.

               TAM     NGRP-halfword  bit array  for  Transmitter Active
                       Mask.

               TOPORT  NGRP-halfword bit array, set if data  present for
                       port.

               FPORT   NGRP-halfword  bit  array,  set  if  data present
                       coming from port.

             The following routines are included.  All link on R4,  expect port
        number in R5 (unless otherwise specified):

               IZASYN  Initialize   ASYNC   handling.     preserves   NO
                       registers.  on return, has set:

                        DSR     0
                        DTR     1
                        CP      0
                        TAM     1
                        TOPORT  0
                        FPORT   0
                        ARING   0

               AGCI    get a character  from Async input ring.   If that
                       ring is  empty, performs  a normal  return (turns
                       off FPORT bit).  Else skip (4)  return, character
                       in R0.

                                          103                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


               AWCI    Place a single char in Async output ring.   R0 is
                       char to transmit.   If less than 4  characters of
                       space remain in ring after placing character, TAM
                       is turned off.  TOPORT bit is always turned on.

               AWCP    Place escaped char  in Async output ring.   R0 is
                       char to transmit.  Places escaped  character PAIR
                       into output ring, then acts like AWCI.

             AWCI and AWCP turn off  TAM sufficiently early that a  program may
        place another character or character pair into the ring  before running
        into trouble.  This insures  that a sequence of several  characters may
        be placed without the necessity of implicitly checking if there is room
        available, or of "backing-up" in a ring (dangerous, since the driver is
        executing concurrently).

             The  following  conventions   apply  to  input  and   output  data
        characters:

                INPUT CODES

        0       escape...always followed by second char
        1-FF    data codes 0-FF
        0|0     escaped data code 0
        0|8x    escaped terminal speed:
                x=0     10 cps
                x=1     15 cps
                x=2     30 cps
                x=3     40 cps
                x=4     60 cps
                x=5     120 cps
                x=6     30 cps (3767)
                x=7     14.7 cps (2741)
        0|90    escaped break detected
        0|91    escaped break end

                OUTPUT CODES

        0       escape...always followed by second char
        1-FF    data code
        0|0     data 0
        0|1-8F  delay time
        0|90-AF output baud rate
        0|B0-CF input baud rate
        0|D0-DF enter connect mode
        0|E0    enter data mode
        0|E1    disconnect
        0|E2    enable
        0|E3    RS up
        0|E4    RS down




                                          104                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                    7.1.12  FINISH.LIB

             This  file  should  ALWAYS  be  assembled  LAST!!    It  generates
        diagnostics if necessary, and computes the value of the symbols SnSIZE,
        where n is the segment number (0 - E).

             The CTA table  is created including  the HOSTS, PORTS,  and PTABLE
        arrays. Values are assigned to the symbols CTA and CTASIZE.

             It  will also  type  out the  memory requirements,  and  cause all
        undefined symbols to be listed on the control terminal.






                                 7.2  Utility Routines


             There are several utility routines, capable of providing commonly-
        used functions.





                    7.2.1  OUTNUM.LIB

             This  package provides  a mechanism  to convert  a  binary number,
        according to  any radix  R (1  < R  < 17d),  and place  the appropriate
        string of digits and  other characters into the specified  user buffer.
        The  calling sequence  specifies  parameters such  as:   Signed number;
        Blank or zero fill;  and Field width.  Storage is allocated in segments
        A.DATA and A.CODE.

             The symbols available are:

               OUTNUM  Subroutine to convert  a binary number  and place
                       the  corresponding  character  string   into  the
                       specified buffer.  Conventions:













                                          105                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                R0      control information...format:

                            - - -.- - f f.f f f f.s z b r.r r r r

                      where:
                          -     unused
                          f     output field width
                          s     signed output
                          z     zero field fill
                     b     blank field fill
                          r     Radix
                R1      pointer to buffer area
                R2      binary number to be output
                R6      link register
                R3-R5   internal scratch registers

             NOTES:  If the output number  is too big for the field,  the field
        is generated with the leading character ">", to indicate the condition.

             If  both blank-fill  and zero-fill  are specified,  zero-fill will
        override.

             If neither  blank- nor  zero-fill are  specified, exactly  as many
        characters as required  will be placed  in the buffer  (variable length
        specification).

             R1 is always returned pointing at the next character of the buffer
        to be filled.





                    7.2.2  CONVRT.LIB

             This package provides  a mechanism to  convert a binary  number to
        either a decimal or a  hexidecimal, signed string of characters  in the
        users buffer.  Storage is allocated in segments A.DATA and A.CODE.

             The routines are:

               BINDEC  Subroutine to convert a binary number to decimal.

               BINHEX  Subroutine   to  convert   a  binary   number  to
                       hexidecimal.

             Both routines have the register conventions:

                R4      Link register.
                R9      the binary number.
                R10     number of digits to output.
                R11     pointer to the output area.


                                          106                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                    7.2.3  DATIME.LIB

             This  package  provides  a  set  of  routines  to  manipulate  GMT
        (Greenwich Mean  Time).  Storage  is allocated  in segments  A.DATA and
        A.CODE.

             The routines are:

               DATIME  Subroutine to convert  the GMT clock  relative to
                       1/1/74, from seconds  to DDMMMYY HH:MM  (GMT), or
                       DDMMMYY HH:MM:SS (GMT).  Register usage:

                        R3      No. of second since 1/1/74 (beyond 1/1/76)
                        R4      No. of characters of output (13d or 16d)
                        R5      Address of output string
                        R6      Link register.


               TMSTMP  Subroutine to  convert the  fullword GMT  time of
                       day to HH:MM or HH:MM:SS.  Register usage:

                        R3      Fullword time of day (GMT clock)
                        R4      No. of characters to output (5 or 8)
                        R5      Address of output string
                        R6      Link register.


               DATE    Subroutine to  convert the  fullword GMT  time of
                       day to a fullword representation of the  date and
                       time.   The  format of  the  result  is MMDDHHMM,
                       where MM,  DD, HH, and  MM represent  Month, Day,
                       Hour, and Minute, respectively -- all  in decimal
                       format.   I.e.  DEC  12 13:41  would  be 12121341
                       (hex).

                        R3      GMT Clock Value
                        R5      Link register
                        R6      Value returned.

             If  the  symbol TIMEZON  is  defined it  should  be  the time-zone
        correction factor from CUT  (Coordinated Universal Time).  I.e.  PST is
        -8.

             NOTE...This package uses CONVRT.LIB.










                                          107                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                    7.2.4  STATUS.LIB - User Command Handler

             The Status  package is  intended to provide  an extension  to DDT,
        invocable via the "?STAT" command in DDT.  Once "?STAT" is typed at DDT
        level, the prompt ":"  appears, and additional commands may  be defined
        as slot-specific extensions to DDT.  In particular, since no licence is
        required  to  execute  "?STAT", the  unprivileged  user  may  use these
        extensions for a variety of status information.

             It  is  recommended  that all  applications  include  the commands
        "HELP" (to inform  the user of the  menu of operations he  can perform)
        and "CODE" (to type out a brief description of this process).

             There  is limited  editing control  built into  the  package ("^W"
        means Control-W):

                ESC     aborts back to command level,
                ^W      discards partial token already input (word or number),
                ^A      discards last char of token (backspace).

             Delimiters  may  occur  in  multiple (e.g.  ",  "  is  OK).  Valid
        delimiters are:
                C/R     L/F     H/T     ","     and BLANK.

             The entry points and routines are:

               DSTART  Place to exit on completion of  command.  Outputs
                       ": " and accepts new command token.

               DS.ILL  Place  to  exit  on  illegal  command   --  types
                       'Illegal command'.

               DS.ERR  Place to  exit on command  error -- types  " type
                       '\'".  Then examines all input, looking  for '\';
                       when successful, exits to DSTART.

               DS.EXI  Place to exit machine.

               DS.QUI  Place to exit back to DDT.

               DS.GCH  Get a  character...Link on  R1, char  (with high-
                       order  bit  forced)  in  R0...normal   return  if
                       detected ^W, skip-4 if detect ^A, aborts  back to
                       DSTART if detects ESC.

               DS.DEL  Check  for   delimiter...Link  on  R2,   char  in
                       R0...normal  return if  delimiter  detected, else
                       skip-4 return.

               DS.CUC  Convert to upper case.  Link on R1,  Character in
                       R0.



                                          108                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


               DS.TOK  Get a string  token.  Link on R4,  TOKEN returned
                       in R3.  Inputs  up to 4 characters,  returns them
                       (in uppercase) left justified, with 0 fill.

               DS.NUM  Get a number.  Link  on R5, expects Radix  in R4.
                       Number  returned  in   R0.   May  ABORT   if  any
                       character  is  input other  than  valid  digit or
                       delimiter.

             There are two built-in commands:

        Q or QUIT       exit back to DDT.
        EXI or EXIT     exit machine.

             Additional commands may be defined via the DS.CMD macro:

                                   DS.CMD(TEXT,ADDR)

                Where:
                TEXT    The (UPPERCASE) target command string.
                ADDR    The virtual address to transfer to, to service that
                command.

             DS.CMD generates  a 12-byte  discriptor for  this command,  at the
        point  assembly where  it is  invoked.  This  discriptor is  on  a WORD
        boundary.





                    7.2.5  DARRAY.LIB

             This package provides a pair of routines to display  logical half-
        word (unsigned  16-bit elements)  arrays on  the DDT  control terminal.
        They are intended to  provide the commonly-used function  of displaying
        arrays of statistical data collected by user-supplied processes.

             Storage is allocated in segment A.CODE.

             Various arguments are in the form of pointers to "descriptors", of
        format:

                DISCR   WC      START
                        HC      SVCDSC
                        HC      NUMBER

                Where:

               DISCR - The start value (or pointer).

               SVCDSC - Print  discriptor  (as  per   SVC  SYS<0D>,14d).


                                          109                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


                       Flexability is provided by requiring the  user to
                       specify  this  discriptor;  this  precludes fixed
                       assignment  of  radix,  field-width,   and  other
                       special properties which  the user might  want to
                       select.  (Note  -- the value  62A generates  a 6-
                       character   unsigned   decimal   number,   right-
                       justified   with   blank-fill.    This   will  be
                       convenient for many purposes.)

               NUMBER - Either increment Or number of elements.

             One kind of descriptor  required is a "label" descriptor,  used to
        label each line printed (no label will be printed if SVCDSC =  0).  For
        this descriptor, the first  descriptor word (START) contains  the value
        used to label the first  line;  NUMBER is used to increment  this value
        for successive lines.

             The second  kind of descriptor  is the "array"  descriptor;  here,
        START is a  pointer to the  beginning of the  array, and NUMBER  is the
        number of array elements (half-words).

             The routines are:

               LIST    Subroutine to display  a half-word array  in text
                       form.  Register usage:

                        R0-R4 - Scratch registers
                        R5 -    Label-descriptor pointer
                        R6 -    Array-descriptor pointer
                        R7 -    Link register
                                all other registers preserved.


               PROFIL  Subroutine to  display a  half-word array  in the
                       form of a  histogram.  The histogram  consists of
                       one  line  for  each array  element  -  each line
                       consists  of  a  Label,  followed  by  a  line of
                       asterisks   ("*"),   the  length   of   which  is
                       proportional (scaled) to the element  value.  The
                       histogram may be Full (all elements displayed) or
                       Truncated  (multiple  zero-elements  suppressed).
                       Register usage:

                        R0-R6 - destroyed (scratch registers)
                        R6 -    Scaling Factor
                        R7 -    Label-descriptor pointer
                        R8 -    Array-descriptor pointer
                        R9 -    Mode (Full or Truncated) flag
                        R10 -   Link register.
                                all other registers preserved.

                where:


                                          110                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


               Scale   The  maximum  value  for  a  full-line  histogram
                       element;  Used  to compute the  scale-factor used
                       to fix the  line-length for each line  printed --
                       default is one "event" per column (if SCALE=0).

               Mode    Truncated  histogram   if  negative,   else  Full
                       histogram.

               NOTE    The SVCDSC field  of the Array descriptor  is not
                       referenced.






                                7.3  Development Tools


             The following set of library packages are intended for use  in the
        development of applications,  rather than for permanent  inclusion into
        those applications.  Thus, they  fall into the catagory  of development
        tools!





                    7.3.1  INSTAT.LIB

             This  package  is  controlled  by  ?STAT  commands,  and  collects
        statistics on the  ISIS-Dispatcher input-ring traffic.   It's operation
        is completely transparent to the application, except for the extra load
        imposed upon the machine by it's use.

             However, transparancy is provided by imposing certain restrictions
        upon the sequence of library references used to create the application:
        INSTAT.LIB  must be assembled before FRING.LIB!!

             INSTAT    requires    STATUS.LIB,    and    also     calls    upon
        <DATIME.LIB>DATIME.

             Implementation of statistic  gathering is performed by  defining a
        LOOK  routine layered  between the  application and  the  ring handler,
        which intercepts all messages and records statistics.

             ?STAT commands implemented are:

               Q or QUIT  Exit back to DDT.

               EXI or EXIT  Exit (log out).

               IS.?    Help.  Brief resume of commands.

                                          111                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


               IS.I    Initialize INSTAT, start statistics gathering.

               IS.H    Halt  INSTAT, Stop  statistics  gathering.  Exits
                       via IS.C.

               IS.C    Check INSTAT status.  Status may be:

        INSTAT Not Used.
                - or -
        NSTAT started DDMMYY HH:MM:SS (GMT).
                - and -
        Running for HH:MM:SS
                - or -
        Ran for HH:MM:SS
        Input NNNNN user messages, NNNNN system messages
        Input a total of NNNNNN user data characters.

               IS.L    Length statistics.  Outputs the message  code (in
                       HEX) and the number of occurances of each message
                       (in decimal), both for user and system messages.

               IS.D    Data statistics.  Outputs the character  code (in
                       HEX) and  the number of  occurances of  each data
                       character.

               IS.S    String statistics.  Outputs the string length and
                       number of  occurances of  strings of  that length
                       (both decimal).





                    7.3.2  SPY.LIB

             This  package  is  controlled  by  ?STAT  commands,  and  collects
        statistics on slot execution.  It's operation is completely transparent
        to the application, except for the extra load imposed upon  the machine
        by it's use.

             SPY requires STATUS.LIB.

             Implementation of statistic gathering is performed by invoking the
        ISIS SPY logic,  which periodically (based upon  interrupts) determines
        the current execution location, and collects statistics based thereon.

             Special symbols may  be defined to  direct the SPY.LIB  package to
        initialize certain  parameters;  default values  are provided  if these
        are not defined.  The symbols (and defaults) are:

               SP.FAD  First  Address  (default =  beginning  of Segment
                       A.CODE).


                                          112                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


               SP.SIZ  The size of a spy Bin (default = 80 bytes).

               SP.RNG  The  range  of  spy  execution  (default  = range
                       between SP.FAD and beginning of SPY.LIB code).

               SP.NBIN The  number  of  bins  to  allocate   (default  =
                       SP.RNG/SP.SIZ).


             ?STAT commands implemented are:

               Q or QUIT - Exit back to DDT.

               EXI or EXIT - Exit (log out).

               SP.? -  Help.  Brief resume of commands.

               SP.I -  Initialize SPY, start statistics gathering.

               SP.H -  Halt SPY,  Stop statistics gathering.   Exits via
                       SP.C.

               SP.C -  Check SPY status.  Status may be:

                                     SPY Not Used.
                                        - or -
                                   SPY in progress.
                                        - or -
                                    SPY completed.

               SP.L -  List  statistics.   Outputs the  first  bin start
                       address and the number of occurances in  each bin
                       (in decimal), up to 8 bins/line.

               SP.P -  Profile statistics.  Outputs the start address of
                       each channel and a line of "*"s, whose  length is
                       dependent   upon   the   number   of  occurances.
                       Automatic  scaling  of output  takes  place, such
                       that no  line will overflow.   The exact  form of
                       output may be either "truncated"  (multiple empty
                       bins  print as  a single  blank line),  or "full"
                       (each  bin  is  printed).   The  default  mode is
                       "truncated".

               SP.T -  Set histogram to "truncated" mode.

               SP.F -  Set histogram to "full" mode.

               SP.D -  Display the parameters used:





                                          113                           ISIS-II
        ISIS LIBRARY PACKAGES                                 December 20, 1982


        Start Addr. = 10000x
        Range =        2000x (end addr. = 12000x)
        Bin size =      100x
        No. Bins = 32

               SP.N -  Specify number of bins (decimal).  Exit via SP.D.

               SP.R -  Specify new range (hexidecimal).  Exit via SP.D.

               SP.S -  Specify  new start  address  (hexidecimal).  Exit
                       via SP.D.

               SP.B -  Specify  new  bin size  (hexidecimal).   Exit via
                       SP.D.


                                        NOTES:


                  SPY records ALL occurances of execution  within the
                  specified  area of  memory, and  cannot distinguish
                  between foreground, background, and DDT usage.

                  N (number of bins) *  B (bin size) = R  (range).  A
                  change in either B  or R will be reflected  in both
                  parameters being  changed.  A change  in N  will be
                  reflected in a corresponding change in B.

                  B  is   internally  constrained   to  be   even,  a
                  reasonable constraint since all  instructions start
                  on half-words.   The same  constraint applies  to S
                  (start address).

                  Each of N, B, and R must be entered greater than 0,
                  to avoid a diagnostic.

                  Furthermore, N  is internally  forced to  the value
                  specified  by  SP.NBIN  (or  it's  default)  if  an
                  attempt is made to exceed this value.


                  Until  such  time  as  the  new  SPY  SVC  is fully
                  deployed, this package  will operate in  a "kludgy"
                  fashion:  SP.H  and SP.C give  meaningless results;
                  SP.I  will output  a command  list, which  you must
                  enter to DDT to perform the SPY connection.








                                          114                           ISIS-II
    0 +a