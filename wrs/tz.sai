begin "timezap"
require "(sailib)sail.def" source!file;
!get!definitions(TYMINT);
define zap!jiffies=60*60, zap!time=!xwd(2,1);

define time!in!jiffies= "calli( !xwd('15,'12), '41 )";

integer now, lastOn, hit, miss;
boolean timerOff;

integer procedure tick;
begin	integer i,t;
do for i_1 step 1 until 1000 do sin(i)	! waste some time;
 until now neq (t_ time!in!jiffies);
return( now_ t );
end;

simple procedure time!hit;
begin
if timerOff 
	then print("Timer encountered when off?")
else if time!in!jiffies-lastOn < zap!jiffies
	then print("Timer early: ", time!in!jiffies-lastOn, "/", 60*60, 
		"=", (now-LastOn)%36, "%" )
else begin outchr("*"); hit_ hit+1; return end;
miss_ miss+1;
print(crlf, miss, " misses in ", hit+miss, " tries.");
end;
integer cycles, bot;

time!in!jiffies;	! check if we can read this;
if not !skip! then usererr(0,0,"Oh my, need SYSTAT", "X");

hit_miss_ lastOn_now_0; timerOff_ true;
intmap( intass(cause!timer,7), time!hit, 0 ); enable(newenb(7));
bot_ tick;
for cycles_ 1 step 1 until 500
   do begin
	if cycles mod 10=0
	 then outchr(if cycles mod 100 then 0+"x" else 0+"C");
	lastOn_ tick;
	calli( zap!time, -'37 );
	timerOff_false;
	tick; 
	calli( 0, -'37 );
	timerOff_true;
      end;
tick; tick; tick; tick; 
print(crlf, miss, " misses in ", hit+miss, " interrupts, ", 
	cycles-1, " enable/disables.", 
	crlf, now-bot, " jiffies = ", (now-bot) % (60 * 60), " min, ", 
				((now-bot) % 60) mod 60, " sec." );
end;

