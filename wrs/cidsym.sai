entry;
begin	"CIDSYM"	comment

SYMBOL TABLE MODULE

procedures:
	GETSYMBOLS 
	"symbol" _ CVSYM (location)
	location _ CVVAL ("symbol")
;

require "(SAILIB)SAIL.DEF" source!file;
require "CRSHID.DCL" source!file;

internal record!class SYM (
	integer	SYSID;		! unique monitor serial number;
	string	MONID;		! monitor version name;
	string	SOURCE;		! source file for symbols;
	r!p(a!c)LINK;		! link to next MonSym block;
	boolean	HaveSym;	! we have a valid symbol table;
	integer STP;		! absolute memory symbol table pointer;
	integer array SymTab );	! symbol table;

define	memloc(a) = {memory[location(a)]};

simple string procedure cv50S(integer CSYM);
! 	convert radix 50 symbol CSYM to ascii string, trailing blanks
	are supresed. ;
begin	"cv50S"
    string S; S _ null;
    CSYM _ CSYM land '037777777777;
    while CSYM do begin
	S _ (case CSYM mod '50 of (0+ ! insures integer expr;
	    " ","0","1","2","3","4","5","6","7","8","9",
	    "A","B","C","D","E","F","G","H","I","J","K","L","M",
	    "N","O","P","Q","R","S","T","U","V","W","X","Y","Z",
	    ".","$","%" )) & S;
	CSYM _ CSYM % '50;
    end;
    return (S);
end	"cv50S";

simple integer procedure cvR50( string S );
!	convert string to radix 50 symbol;
begin	"cvR50"
    integer X;
    X _ 0;
    while length(S) do begin
	integer I,C;
	C := lop(S);
	if "a" leq C leq "z" then I := C+11-"a"
	else if "A" leq C leq "Z" then I := C+11-"A"
	else if "0" leq C leq "9" then I := C+1-"0"
	else continue;
	X _ X * '50 + I;
    end;
    return( X );
end	"cvR50";

r!p(SYM) SymTop;		! head of list of symbol tables;
internal r!p(SYM) CraSym;	! pointer to current symbols;
internal procedure GetSymbols (integer SYSID);
!
Scan the list of symbol tables which we have already read in and if
one matches the monitor name given, return a pointer to it.  If no
match is found, an attempt is made to find a FILDDT or MONITOR file
containing the proper symbols in (SYS) or (M33) and the symbols are
read in to a record, the record is linked on the list and returned
as the value of the function.
;
begin	"GetSymbols"
    integer Chan, Brk, Eof, FC, SymPtr, Save116,
	Word, WordAdr, WordCnt, I,
	SymbolPtr, ConfigAdr, SymbolBeg, SymbolEnd;
    string SOURCE, MONID;
    CraSym _ SymTop;		! see if already looked for it;
    while CraSym do if SYM:SYSID[crasym]=SYSID
	then return		! found it! - return;
	else CraSym _ SYM:link[crasym];	! no match, keep looking;
    CraSym _ new!record(SYM);	! create new symbol table holder;
    SYM:link[CraSym] _ SymTop;	! link to next symbol table;
    SYM:sysid[craSym] _ SYSID;	! note monitor ID;
    SYM:HaveSym[CraSym] _false;	! no symbol table array;
    SYM:monid[crasym] _ null;	! name of monitor;
    SYM:source[CraSym] _ null;	! source file for symbols;
    SymTop _ CraSym;		! link into list of symbol tables;
    open (Chan_getchan,"DSK",'14,2,0, 0,0,Eof);
    FC _ -1;
    do begin "NextFile"
	FC _ FC +1;
	case FC of begin	! try a bunch of places;
	    [0] SOURCE _ "(M33)F"&cv6str(SYSID)[2 to 6]&".SAV";
	    [1] SOURCE _ "(SYS)"&cv6str(SYSID)&".SAV";
	    [2] SOURCE _ "(M33)"&cv6str(SYSID)&".SAV";
	    [3] SOURCE _ "(SYS)SYSTEM.SAV";
	    [4] SOURCE _ "(SYS)NEWMON.SAV";
	    [5] SOURCE _ "(SYS)BACKUP.SAV";
	    [6] SOURCE _ "(SYS)OLDMON.SAV";
	    else done "NextFile"
	end;
	lookup (Chan, SOURCE, Eof);
	if Eof then continue "NextFile";! not there - skip it;
	SymPtr _ (if FC = 0 then 0 else JobSym);
	ConfigAdr _ SymbolPtr _ Save116 _ 0;
	WordCnt _ WordAdr _ -1;
	MONID _ null;
	while not Eof do 
	begin "NextBlock"	! read next IOWD block from .SAV file;
	    Word _ wordin (Chan);
	    WordAdr _ WordAdr + 1;! virtual address of block;
	    WordCnt _ WordCnt + 1;! words left in block;
	    if WordCnt		
	      then begin "DataWord"
		if WordAdr = JobSym then Save116 _ Word;
		if WordAdr = JobVer then if FC neq 0
		    then "MONITOR" 
			ConfigAdr _ !rh(Word)
		    else "FILDDT"
			! lookup version, so we know address of JOBSYM;
			if Word = '22023000000 then SymPtr _ '16175 else
			if Word = '22027000000 then SymPtr _ '16511 else
			if Word geq '22032000000 then begin "new DDT"
			    SymbolPtr _ Save116;
			    SymbolBeg _ !rh(Save116);
			    SymbolEnd _ SymbolBeg + !lh(-Save116) -1;
			end else continue "NextFile";
		if WordAdr = SymPtr then begin
		    SymbolPtr _ Word;
		    SymbolBeg _ !rh(word);
		    SymbolEnd _ SymbolBeg + !lh(-word) -1;
		end;
		if ConfigAdr then begin "Config"
		    if ConfigAdr+0 leq WordAdr leq ConfigAdr+4 then 
			MONID _ MONID & cvstr(Word);
		    if ConfigAdr+'43 = WordAdr then
			if Word = SYSID 
			    then ConfigAdr _ 0	! just for speed;
			    else continue "NextFile";
		end "Config";
		if SymbolPtr then begin "SymbolPtr"
		    if WordAdr = SymbolBeg then begin "allocate"
		    	integer array A[0:SymbolEnd-SymbolBeg];
			integer STP;
		    	memloc(A) swap memloc(SYM:SymTab[CraSym]);
			STP _ location(SYM:SymTab[CraSym][0])
			    +arrinfo(SYM:SymTab[CraSym],2);
			while memory[STP] lsh -32 do STP _ STP -2;
				! kludge to get rid of FILDDT symbols;
			SYM:stp[CraSym] := STP;
		    end "allocate";
		    if WordAdr > SymbolEnd then 
		    	SYM:HaveSym[CraSym] _ EOF _ true
		    else if WordAdr geq SymbolBeg then 
		    	SYM:SymTab[CraSym][WordAdr-SymbolBeg] _ Word;
		end "SymbolPtr";
	      end "DataWord"
	      else begin "IOWord"
		WordAdr _ !rh(Word);
		WordCnt _ (Word ash -18)-1;
	      end "IOWord";
	end "NextBlock";
	close (Chan);
    end "NextFile" until SYM:HaveSym[CraSym];
    release (chan);
    SYM:monid[CraSym] _ MONID;
    SYM:source[CraSym] _ SOURCE;
end	"GetSymbols";

internal string procedure cvSym (integer VAL);
!	convert value to best symbol and offset as per current symbol table;
begin	"LookSym"
    own integer STP;		! symbol table pointer;
    own integer BSYM;		! best symbol;
    own integer BMOD;		! best module;
    own integer BVAL;		! best value;
    own integer CSYM;		! current symbol;
    own integer CMOD;		! current module;
    own integer CVAL;		! current value;
    if VAL land !bit(5) then return("usr+"&cvos(!rh(VAL)));
    VAL _ !rh(VAL);		! strip off flags;
    if VAL < '20 
    	or not CraSym
    	or not SYM:HaveSym[CraSym] 
	then return(cvos(VAL));
    STP := SYM:stp[CraSym];
    BVAL _ BSYM _ BMOD _ 0;	! a pretty bad match;
    while (CSYM _ memory[stp]) neq -1 do begin "search"
	case (CSYM lsh -30) land '74 of begin "case"
	    ['00] CMOD _ CSYM;
	    ['04]['10] if (CVAL_memory[stp+1]) leq VAL and CVAL>BVAL then begin
		BMOD _ CMOD;
		BSYM _ CSYM;
		if (BVAL _ CVAL) = VAL then done;
	    end;
	    else 
	end "case";
	STP _ STP -2;
    end "search";
    if (CSYM lsh -30) land '74 = '04 then BMOD _ 0;	! no MOD if global;
    if (VAL-BVAL) > '777
	then return( cvos(VAL) )
	else return (
	    (if BMOD then cv50S(BMOD)& ":" else null)&
	    cv50S(BSYM)& 
	    (if VAL=BVAL then null else "+"& cvos(VAL-BVAL))
	);
end	"LookSym";

integer ColonBT;
simple procedure ColonIni;
setbreak( ColonBT_getbreak,":"," ","SINK" );
require ColonIni initialization;

internal integer procedure cvVal( string SYMSTR );
!	evaluate symbol, string may include module name followed by colon;
begin	"LookVal"
    own integer STP;		! symbol table pointer;
    own integer CSYM,XSYM;	! symbols in R50;
    own integer CMOD,XMOD;	! module names in R50;
    own integer B;		! break character;
    if not SYM:HaveSym[CraSym] 
	then return( -1 );
    STP := SYM:stp[CraSym];
    XSYM := cvR50( scan( SYMSTR, ColonBT, B ) );
    if B then begin
        XMOD := XSYM;
	XSYM := cvR50( SYMSTR );
    end else XMOD := 0;
    CMOD := 0;
    while (CSYM := memory[stp]) neq -1 do begin "search"
	case (CSYM lsh -30) land '74 of begin "case"
	    ['00] CMOD := CSYM;
	    ['04] if CSYM land '037777777777 = XSYM
		then return( memory[stp+1] );
	    ['10]
	    ['50] if CSYM land '037777777777 = XSYM
		and CMOD = XMOD
		then return( memory[stp+1] );
	    else
	end "case";
	STP _ STP -2;
    end "search";
    return( -1 );
end	"LookVal";

end	"CIDSYM" $
 