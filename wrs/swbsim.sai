begin	"SWBSIM - SWBT Virtual Subnet algorithm simulator"

comment
	Program to simulate and generate login flow traces for various
	types of calls placed under various conditions in the proposed
	SWBT PPSN implemented using virtual subnets and host names.
;

require "(SAILIB)SAIL.DEF" source!file;
require "ARGS.REQ" source!file;
require "FLIB.REQ" source!file;
require 1024 new!items;

define	maxPE = 64		comment    maximum number of profile entries;
;

integer MyDNIC;
set NotClasses, AllClasses, AllGroups, AllProfiles;

record!class PRO (
    string Remark;		comment    remarks describing profile;
    integer NENTRY;		comment    number of profile entries;
    itemvar array ORIG;		comment    origin side of profile entries;
    set array DEST,HOME );	comment    destination side of profile entries;
	
integer tBrk, lBrk, oBrk, cBrk, dBrk;
simple procedure brkIni;
begin
    define white = {(#ht&#ff&#cr&#lf&" ")};
    setbreak( tBrk:=getbreak, "({},"&white, ","&white, "TRINK" );
    setbreak( oBrk:=getbreak, "({}", null, "AINK" );
    setbreak( lBrk:=getbreak, #lf&#ff, #cr, "SIN" );
    setbreak( cBrk:=getbreak, ")", null, "AIN" );
    setbreak( dBrk:=getbreak, ".:", null, "SIN" );
end;
require brkIni initialization;

string Remark;

string procedure getToken( r!p(FILE) F );
begin
    string S;
    label RS;
RS: S := input( file:Chan[F], tBrk );
    if length(S) then return( S );
    if file:Break[F] = "(" then begin
	Remark := input( file:Chan[F], cBrk );
	goto RS;
    end;
    S := input( file:Chan[F], oBrk );
    return( S );
end;

set procedure Exp( set S );
begin
    set V;
    set itemvar SIV;
    while length(S) do begin
	case typeit( SIV := lop( S ) ) of begin
	    [1] put SIV in V;
	    [6] S := S union datum(SIV);
	    [else] print( "?Exp: typeit(",SIV,")=",typeit(SIV),crlf )
	end;
    end;
    return( V );
end;

set item C#;

procedure ReadHosts( r!p(FILE) F );
begin
    itemvar I;
    set itemvar SI;
    string S;
    do begin
	new!pname( I := new, S := getToken(F) );
	scan( S, dBrk, !SKIP! );
	if not !SKIP! then fError( F, "Dot expected in host name." );
	SI := cvsi( "C"&S, !SKIP! );
	if !SKIP! then begin
	    new!pname( SI := new(phi), "C#"&S );
	    put SI in NotClasses;
	    put SI in AllClasses;
	    new!pname( SI := new(phi), "C"&S );
	    put SI in AllClasses;
	end;
	put I in datum(C#);
	put I in datum(SI);
    end until file:Break[F] neq ",";
    foreach SI | SI in NotClasses do begin
	set itemvar SI1;
	SI1 := cvsi( "C"& cvis( SI, !SKIP! )[3 to inf], !SKIP! );
	datum(SI) := datum(C#) - datum(SI1);
    end;
end;

procedure ListHosts;
begin
    print( "
Hosts
-----
", datum(C#), "

" );
end;

procedure ListClasses;
begin
    set itemvar SI;
    print( "
Class Tables
------------
");
    foreach SI | SI in AllClasses do
	print( SI, #ht, datum(SI), crlf );
    print( crlf );
end;

procedure ListGroups;
begin
    set itemvar SI;
    print( "
Group Tables
------------
");
    foreach SI | SI in AllGroups do
	print( SI, #ht, datum(SI), crlf );
    print( crlf );
end;

procedure ListPE( r!p(PRO) P; integer E );
begin
    print( "  ", E, #ht, pro:ORIG[P][E], #ht );
    if length(pro:DEST[P][E]) then begin
	print( pro:DEST[P][E] );
	if length(pro:HOME[P][E]) then print( ", " );
    end;
    if length(pro:HOME[P][E]) then print( "home: ", pro:HOME[P][E] );
    print( crlf );
end;

procedure ListProfiles;
begin
    integer N;
    r!p(PRO) itemvar I;
    print( "
Access Profiles" );
    foreach I | I in AllProfiles do begin
	r!p(PRO) P;
	integer E;
	P := datum(I);
	print( "
---------------

Name:	", I, "
", pro:Remark[P], "

entry	origin	destinations
" );
	for E := 1 upto pro:NENTRY[P] do ListPE( P, E );
    end;
    print( crlf );
end;

item procedure Lookup( string PNAME );
begin
    boolean ERR;
    set itemvar I;
    I := cvsi( PNAME, ERR );
    if ERR then begin
	usererr( 0, 1, "Undefined symbol: "& PNAME );
	new!pname( I := new, PNAME );
	outstr( #cr& "[ defined as untyped ]"& crlf );
    end;
    return( I );
end;

string procedure checkX.121( string ADR );
comment
	This routine simulates the SUP decision process to determine
	the number of digits of address to lookup in the MUD.  This
	version assumes in a BOC network and not acting as an IC.
;
begin
    if ADR neq "-" then return( ADR );
    if ADR[6 to 6] = "-" then begin "RPOA"
	if ADR[11 to 11] = "-" then return( ADR[1 to 10] );
	if cvd(ADR[7 to 10]) = MyDNIC then return( ADR[1 to 16] );
	return( ADR[1 to 10] );
    end "RPOA";
    if cvd(ADR[2 to 5]) = MyDNIC then return( ADR );
    return( ADR[1 to 5] );
end;

procedure ReadClass( r!p(FILE) F );
begin
    string NAME;
    set itemvar SIV;
    new!pname( SIV := new(phi), NAME := getToken(F) );
    put SIV in AllClasses;
    if not equ( getToken(F), "{" ) then
	fError( F, "Expected ""{"" in class "& NAME );
    while not file:EOF[F] do begin
	string S;
	S := getToken(F);
	if equ( S, "}" ) then done;
	put lookup( S ) in datum(SIV);
    end;
end;

procedure ReadGroup( r!p(FILE) F );
begin
    string NAME;
    set itemvar SIV;
    new!pname( SIV := new(phi), NAME := getToken(F) );
    put SIV in AllGroups;
    if not equ( getToken(F), "{" ) then
	fError( F, "Expected ""{"" in group "& NAME );
    while not file:EOF[F] do begin
	string S;
	S := getToken(F);
	if equ( S, "}" ) then done;
	put lookup( S ) in datum(SIV);
    end;
end;

procedure ReadProfile( r!p(FILE) F );
begin
    r!p(PRO) P;
    r!p(PRO) itemvar RPIV;
    string NAME;
    integer N;
    itemvar array O[1:maxPE];
    set array D[1:maxPE], H[1:maxPE];
    NAME := getToken(F);
    Remark := null;
    if not equ( getToken(F), "BEGIN" ) then
	fError( F, "Missing BEGIN after PROFILE "& NAME );
    P := new!record(PRO);
    new!pname( RPIV := new(P), NAME );
    put RPIV in AllProfiles;
    memory[location(pro:ORIG[P])] swap memory[location(O)];
    memory[location(pro:DEST[P])] swap memory[location(D)];
    memory[location(pro:HOME[P])] swap memory[location(H)];
    pro:Remark[P] := Remark;
    N := 0;
    while not file:EOF[F] do begin
	string S;
	boolean Home!;
	set itemvar SI;
	S := getToken(F);
	if equ( S, "END" ) then done;
	N := N + 1;
	pro:ORIG[P][N] := lookup( S );
	if not equ( getToken(F), "{" ) then
	    fError( F, "Expected ""{"" in profile "& NAME );
	Home! := false;
	while not file:EOF[F] do begin
	    S := getToken(F);
	    if equ( S[1 to 5], "HOME:" ) then begin
		Home! := true;
		if length(S := S[6 to inf]) = 0 then continue;
	    end;
	    if equ( S, "}" ) then done;
	    SI := lookup( S );
	    if Home!
		then put SI in pro:HOME[P][N]
		else put SI in pro:DEST[P][N];
	end;
    end;
    pro:NENTRY[P] := N;
end;

procedure Simulate( r!p(FILE) F );
begin
    string S, LoginStr,User,Host;
    r!p(PRO) UserP, HostP;
    r!p(PRO) itemvar RPIV;
    own integer Simno;
    itemvar OrigHost;
    set OrigCSet, ISet;
    set itemvar SIV;
    integer U,H,INO;
    OrigHost := lookup( getToken(F) );
    User := checkX.121( scan( S := LoginStr := getToken(F), dBrk, !SKIP! ));
    Host := checkX.121( scan( S, dBrk, !SKIP! ));
    OrigCSet := {C#};
    foreach SIV | SIV in AllClasses and OrigHost in datum(SIV) do
	put SIV in OrigCSet;
    print( #ff& "
Simulation No. ", Simno := Simno + 1, "
---------------", "----"[1 to length(cvs(Simno))], "
", if length(Remark) then crlf&Remark&crlf else null, "
please log in: ", LoginStr, "

orig host = ", OrigHost, " ", OrigCSet, "
user name = """, User, """
host name = """, Host, """
" );
    UserP := datum( RPIV_lookup( User ));
    HostP := datum( RPIV_lookup( Host ));
    if not (UserP and HostP) then return;
    INO := 0;
    for U := 1 upto pro:NENTRY[UserP] do begin "user foreach"
	for H := 1 upto pro:NENTRY[HostP] do begin "host foreach"
	    print( "
Intersection no. ", INO := INO + 1, ":
U=" );	    ListPE( UserP, U );
	    print( "H=" );
	    ListPE( HostP, H );
	    if not OrigHost in exp({pro:ORIG[UserP][U]}) then begin
		print( "- OrigHost not in class ", pro:ORIG[UserP][U],
		    " (user)"& crlf );
		continue "user foreach";
	    end;
	    if not OrigHost in exp({pro:ORIG[HostP][H]}) then begin
		print( "- OrigHost not in class ", pro:ORIG[HostP][H],
		    " (host)"& crlf );
		continue "host foreach";
	    end;
	    ISet := exp( pro:DEST[UserP][U] union pro:HOME[UserP][U] )
		inter exp( pro:HOME[HostP][H] );
	    print( "U^H="& #ht&#ht, ISet, crlf );
	    if length( ISet ) then done "user foreach";
	end "host foreach";
    end "user foreach";
    if length( ISet )
	then print( "
*** Call complete: ", ISet, " ***"& crlf )
	else print( "
*** Call cleared: ACCESS BARRED ***"& crlf );
end;

begin	"MAIN"
    r!p(file) F;
    F := fOpen( argv[1], "rb4E:SWBSIM.SCR" );
    if ARGC geq 3 then setprint( ARGV[2], "F" );
    while not file:EOF[F] do begin
	string S;
	Remark := null;
	case S:=getToken(F) of begin
	    ["Class"] ReadClass(F);
	    ["DNIC"] MyDNIC := cvd(getToken(F));
	    ["Group"] ReadGroup(F);
	    ["Host"] ReadHosts(F);
	    ["List"] case S:=getToken(F) of begin
		["Classes"] ListClasses;
		["Groups"] ListGroups;
		["Hosts"] ListHosts;
		["Profiles"] ListProfiles;
		[else] fError( F, "List "& S& "?" )
	    end;
	    ["Profile"] ReadProfile(F);
	    ["Simulate"] Simulate( F );
	    ["Type"] print( input(file:Chan[F],lBrk)[2 to inf], crlf );
	    [null] done;
	    [else] fError( F, "Undefined keyword: "& S )
	end;
    end;
    fClose(F);
    setprint( null, "T" );
end	"MAIN"

end $
   