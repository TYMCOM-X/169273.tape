	SUBTTL	INITIZ.602 - HANDLES THE INITIALIZATION
: ******************************************************************
: **                  PROPRIETARY INFORMATION                     **
: **                                                              **
: **  This  source code listing constitutes the proprietary pro-  **
: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
: **  this program listing, agrees that neither this listing nor  **
: **  the   information  disclosed herein nor any  part  thereof  **
: **  shall be  reproduced or transferred to other documents  or  **
: **  used  or  disclosed to others for manufacturing or for any  **
: **  other purpose except as specifically authorized in writing  **
: **  by  TYMNET, Incorporated.                                   **
: ******************************************************************
: **                   MODULE IDENTIFICATION                      **
: **                                                              **
: **  File Name          :  INITIZ.602      last change: 12/05/86 **
: **                                                              **
: **  File Description   :  The code must connect the physical    **
: **			    ports and initialize the data.  The   **
: **			    crash routine which provides helpfull **
: **			    debugging routine exits through the   **
: **			    initialization routines.              **
: **                                                              **
: **  File Abstract      :  The primary function of this module   **
: **			    is to set up the data and ports so the**
: **			    code will be able to execute properly **
: **                                                              **
: ******************************************************************
: **                    CHANGE LOG                                **
: **                                                              **
: **  Ver   Date    By   PIR/NSR  Changes (most recent at top)    **
: ** ----- -------- ---  -------- ------------------------------- **
: ** 06.00 12/05/86 SDW		  Changed BTIN2 & TTIN2 to correct**
: **				  term type in R4 prior to jumping**
: **				  to IZPORT.			  **
: ** 06.02 11/06/86 sdw           OT.IZ3 restores RPI for ZAPMOD  **
: ** 06.02 11/06/86 sdw           Added OTZRET for initialization **
: ** 06.02 10/08/86 CAB		  Added H.IIX check to host status**
: ** 06.02 10/03/86 CAB		  Added TAMCHK to SCHED list.     **
: ** 06.01 09/22/86 CAB		  Added O.DOTS to SCHED list.     **
: ** 06.01 09/17/86 CAB		  Fixed outdial crash caused by   **
: **				  calling ZAPMOD with bad link reg**
: ** 06.01 09/15/86 CAB		  Changed TID delay code so that  **
: **				  the delay consists of many small**
: **				  delays and there is no noticeable*
: **				  pause after entering the TID.   **
: ** 06.01 09/11/86 DLG		  Fixed operand out of range, RX3 **
: **				  instruction in SINIT		  **
: ** 06.01 09/10/86 CAB		  Changed initial AR.TAM value to **
: **				  -(AR.RS-AR.IC-3) to minimize race*
: **				  condition in A.VID when TID found*
: ** 06.01 09/03/86 CAB		  Changed IHSEC to NETBP at RATE/4**
: ** 06.01 08/28/86 CAB		  Changed CSHSEC to INPBP at RATE/4*
: ** 06.01 08/27/86 DLG		  Fixed operand out of range, RX3 **
: **				  instruction in SINIT		  **
: ** 06.01 08/26/86 CAB		  Fixed spurious SIO port bug by  **
: **				  initializing STASIO byte to FF. **
: ** 06.01 08/20/86 CAB		  Fixed printer init problem of   **
: **				  treating LUN query SVC status FF**
: **				  (unused) same as FE (config err)**
: ** 06.01 07/21/86 CAB		  Changed SCHED list entries for  **
: **				  IOPOLL and GBTIME to use RATE/FG**
: ** 06.00 07/15/86 CAB		  Removed INPUT/OUTPUT/POLL from  **
: **				  timeout list and added IOPOLL.  **
: ** 06.00 06/20/86 LH		  Removed CRASH related routine out*
: **				  of this module and added ISIS's **
: **				  CRASH.LIB in front of this module*
: ** 06.00 06/06/86 CAB           Added working X.28 PAD timers   **
: **				  into timeout list (see 5/12/86) **
: ** 06.00 06/01/86 sdw           Don't hang ports set by macro on**
: **                              initialization.                 **
: ** 06.00 05/30/86 sdw           Stores time of startup and crash**
: ** 05.00 05/12/86 sdw           Removed not working pad timers  **
: **                              from timout list                **
: ** 05.00 03/14/86 LH   n/a	  Change the format of crash report*
: ** 04.03 03/03/86 SDW           Changed crash code              **
: ** 04.02 01/28/86 SDW           Zeroed reg used to zero data    **
: ** 04.03 01/28/86 SDW  n/a      Created file from CONSAT, TELEX **
: **                              PVC and ENVIR files.            **
: **                                                              **
: ******************************************************************

        IF      1-SOLOCS        :might as well make it work with the solo
        LO      CONSAT
        LO      DATA

        SEG     A.CODE

	DEFAULT(CHIST,0)

	IF	CHIST
	GL	SVORPT,SVORNG,SVIRPT,SVIRNG
	EI	:CHIST
:	Crash Codes
:	-----------
C.INDM	EQ	82			:Illegal Non-data message to IFAN
C.IINM	EQ	83			:Illegal Intra-node message to INSPT

:	Set up scheduling
N.TOUT	EQ	0			:initial number of timeout entries
	KILL	SCHED,.INIT.


:	SCHED(WHEN,PERIOD,ADDR)	conditional macro to schedule ADDR
:	to run every PERIOD if WHEN is true.

SCHED	MACRO(W,P,A) [
	 IF	W
	GL	A
	LA	R0,A,,
	LR	R1,R7
	LI	R2,P
	JAL	R6,TSCHED,,
N.TOUT	EQ	N.TOUT+1
        IF      N.TOUT-M.TOUT; REMARK%%%DISASTER - CONTACT DEVELOPER%%%
        EI      :best way to remove RX3s in Timout
	 EI	:W
]

:	.INIT.(PERIOD,ADDR)	conditional macro to initialize ADDR
:				if W is TRUE, JAL R0,ADDR
.INIT.	MACRO(W,A) [
	 IF	W
	GL	A
        JAL     R0,A
	 EI	:W
]

:	Save I/O ring at time of CRASH, CRSH.P is called from CRASH.LIB
:	under ISIS's switch EXCRSH and CONSAT's switch CHIST
:	Link register - R5   **6.00 LH

CRSH.P	IF	CHIST
	L	R1,ORING,,		:don't copy the first 2 HW
	ST	R1,SVORPT,,		:save Oring address pointer
	LA	R3,IRING+4+IRSIZE-2,,	:address of the last source halfword
	LA	R4,SVIRNG+IRSIZE-2,,	:address of the last destination HW
	LI	R1,((IRSIZE+ORSIZE+4)/2-1)*10 :10*(number of HW's -1)
	COPY	R3,R1			:copy memory
	EI	:CHIST
	IF	FREEZE			:if FREEZE on error
	SVC	SYS,2			:turn on debug-mode
	EI	:FREEZE
	JR	R5

	SEG	A.DATA

	IF	CHIST
	WS	0
SVORPT	HS	2			:Oring address pointer
SVORNG	BS	ORSIZE			:Oring size
SVIRPT	HS	2			:Iring address pointer
SVIRNG	BS	IRSIZE			:Iring size
	EI	:CHIST



	SUBTTL	(INITIZ) ISIS STARTUP AND INITIALIZAITON

:	General Initialization
:	------- --------------
	LO	DATA

	SEG	A.CODE

:	Initialize variables for restart

START	LHL	R1,CRAT+CRSHCT,,	:check crash counter
	CHI	R1,1			:is counter still in initial value=1
	JNFS	START1			:no, counter increased
	L	R0,GMT,,		:yes,get and save time of starting
	ST	R0,UPTIME,,		:- execution
	LIS	R0,0
	ST	R0,CTIME,,
START1	LHI	R1,ENDZRO-BEGZRO-2	:Zero some storage
	LIS	R0,0
INIT0	STH	R0,BEGZRO,R1
	SIS	R1,2
	JGEBS	INIT0

	LCS	R0,1			:Initialize -1 area
	LHI	R1,ENDONE-BEGONE-2
INIT1	STH	R0,BEGONE,R1,
	SIS	R1,2
	JGEBS	INIT1

:	Set up timeout list
	JAL	R0,IZT,,
	L	R7,FASTC,,		:Get reference time
	AHI	R7,RATE			:start all one second from now

:   any new SCHED entries must be added to M.TOUT which is defined in
:   DATA module.  This inconvience allows the removal of RX3 instructions
:   from one of the busier parts of the code.    sdw*403

FG	EQ	$A RATE/50	:CAB 6.01 - This forces execution
				:every foreground time slice.  The
				:foreground execution interval varies
				:depending on slot number and other
				:slot foreground execution times.
				:The interval can be 20-30 ms even
				:though it is nominally 25 ms.

SCHED(1,FG,IOPOLL)		:polling logic, every foreground
SCHED(1,FG,GBTIME)		:Green-ball timeout, every foreground
SCHED(TELEX!BTELEX!TTELEX,FG,TLXBRK) :TELEX space line-state, every foreground
SCHED(1,$A RATE/20,BZAP)	:buffer-zap logic, every 50 MS
SCHED(1,$A RATE/20,LGGO)	:Log-on, every 50 MS
SCHED(X3ON,$A RATE/5,IDLETM)	:Idle Timer, every .20 second
SCHED(NSPORT,RATE/4,BRKSIO)	:SIO BREAK-logic, every .25 seconds
SCHED(PVC,RATE/4,PVCCTL)	:PVC control, every .25 seconds
SCHED(NMPVC,RATE/4,M.MUX)	:MPVC Multiplexer, every .25 seconds
SCHED(1,RATE/4,INPBP)		:Input backpressure, every .25 seconds
SCHED(1,RATE/4,NETBP)		:network backpressure, every .25 seconds
SCHED(NAPORT,RATE/4,TAMCHK)	:ASYNC TAM check, every .25 seconds
SCHED(NAPORT,RATE/2,HANGAN)	:ASYNC Hang/answer, every .5 seconds
SCHED(NSPORT,RATE/2,QHASIO)	:SIO HANG/ANSWER, every .5 seconds
SCHED(TTELEX,RATE/2,FWDMRK)	:Forwardpath marking ?,every .5 sec.
SCHED(NMPVC,RATE,M.PER)		:MPVC periodic logic, every second
SCHED(NHNGBK,RATE*2,TWOSEC)	:two-second logic, every 2 seconds
SCHED(OUTDIA,RATE*3,O.DOTS)	:outdial timout for modem dialing
SCHED(OUTDIA,RATE*4,M.TIME)	:modem timout for command mode
SCHED(NAPORT,RATE*5,A.BUSY)	:Port-busy, every 5 seconds
SCHED(NPAPRT!OUTDIA,RATE*5,CKHOST)	:soft-shut, every 5 seconds
SCHED(1,RATE*8,RBTIME)		:Red-ball timeout, every 8 seconds
SCHED(OUTDIA,$A 10*RATE,O.TIME)  :outdia timout, every 10 seconds
SCHED(NAPORT,$A 16*RATE,SEC16)	:16-second logic, every 16 seconds
SCHED(BTELEX,$A 16*RATE,WRUTM)  :WRU timeout, every 16 seconds
SCHED(1,$A 20*RATE,SEC20)	:20-second logic, every 20 seconds
SCHED(PVC,$A 120*RATE,PSNTM)	:Psudo needle timeout,every 2 mins
SCHED(X3ON,$A60*RATE,T1MIN)	:Inactivity, Max. assembly, every 1 minute
SCHED(X3ON,$A64*RATE,PKTACT)	:Packet accounting, every 64 sec
SCHED(NMPVC,$A 1020*RATE,M.ACCT) :MPVC accounting, every 17 minutes

  IF	X3ON
	LHI	R0,NPORT-1
	STH	R0,AAPORT,,		:initialize accounting port
  EI
:	Initialize User-message from backup
	LHI	R1,80-4			:There's 80 bytes to move
INIT2	L	R0,IULMSG,R1,		:Copy 4 bytes
	ST	R0,ULMSG,R1
	SIS	R1,4
	JGEBS	INIT2			:repeat

:	Set up Port Identifier message, format:
:	MS0	NL-NNNN:SS-PPP-0
:		0123456789ABCDEF
:	MS00		   ^
MS00	EQ	MS0+0B			:place to put port number

	LI	R0,8D0A2D00		:"CR|LF|-|0"
	ST	R0,MS0
	STB	R0,MS0+0F		:Terminate it
	EXBR	R0,R0			:Position the "-"
	STB	R0,MS0+0A		:second "-"
	STB	R0,MS0+0E		:third "-"
	LHI	R0,3A			:":"
	STB	R0,MS0+7
	LHL	R0,NODEX,,		:Get node number from Common
	LA	R3,MS0+3		:pointer to string
	LIS	R4,4			:4 bytes
	JAL	R6,OOS,,			:Put string in place
	LHL	R0,SLOTNO,,		:Get Slot number from common
	LA	R3,MS0+8		:pointer to string
	LIS	R4,2			:2 bytes
	JAL	R6,OOS,,			:Put string in place

:	Initialize processes
	.INIT.(1,IZBB)			:Initialize buffers and bufferlets
	 IF	NAPORT
	GL	IZASYN
	JAL	R6,IZASYN		:Initialize ASYNC
	 EI	:NAPORT
	.INIT.(NSPORT,SINIT)		:initialize SIO ports
	.INIT.(PVC,PVCIZ)		:initialize PVC tables
	.INIT.(NUMPRN,INITP)		:initialize printers
	IF NMPVC ; GL MPINIT ; JAL R0,MPINIT,, ; EI :init account prt
	.INIT.(OUTDIA,OT.IZ)		:initialize Outdial ports
  IF	NHOST

   IF	NPAPRT!OUTDIA
:	determine state of all hosts (<0 = shut, else answer)
	LHI	R6,(NHOST-1)*2		:For all hosts
	L	R7,HTBLPT,,		:get pointer to host table

XHOST1	LHL	R4,0,R6,R7		:look up a host number
    IF	OUTDIA
        CHI	R4,OTHOST               :outdial host?
        JNFS    XHOST2                  :no , skip
        LIS     R0,0                    :set shut, until ready
        JFS     XHOST3
    EI	:OUTDIAL
XHOST2
    IF	NPAPRT
	JAL     R5,PA.HS,,              :look up status
    EI	:NPAPRT
XHOST3	STH	R0,H.STAT,R6,		:save status
	SIS	R6,2
	JGE	XHOST1			:repeat for all host
   EI	:NPAPRT!OUTDIA

:	Set all hosts up, shut
	LHI	R5,NHOST-1		:For all hosts
XHOST4	LIS	R0,0E			:14d-byte message
	LIS	R1,0			:..for port 0
	LHI	R2,10			:..type 10, extended host status report
	JAL	R4,SLOR,,		:Start-Logical-Output-Record
	LIS	R0,0			:
	JAL	R4,PUTCH,,		:Pad for slot key
	JAL	R4,PUTW,,		:ISIS will fill in host #, # of ports
	LR	R0,R5			:
	JAL	R4,PUTH,,		:Relative Host number
	LHI	R0,0000			:Status = answered | host key = null
	LH	R4,H.STAT,R5,R5		:check state
	JGEFS	XHOST5			:
	LHI	R0,0200			:Status = shut | host key = null
XHOST5	JAL	R4,PUTH,,			:set shut
	LHI	R0,PRODID		:Dumb host | Product ID
	LH	R4,H.IIX,R5,R5		:check if smart
	JEFS	XHOST6			:
	LHI	R0,8000!PRODID		:Smart Host | Product ID
XHOST6	JAL	R4,PUTH,,		:Set that
	JAL	R4,ELOR,,		:End-Logical-Output-Record

	LH	R0,H.STAT,R5,R5		:check status
	JL	XHOST7			:<0 means shut, so don't bother
	LIS	R0,$A 10		:10d-byte message
	LIS	R1,0			:..for port 0
	LIS	R2,$A 10		:....type 10d, soft shut
	JAL	R4,SLOR,,		:Start-Logical-Output-Record
	LIS	R0,0
	JAL	R4,PUTCH,,		:pad for slot key
	JAL	R4,PUTW,,		:ISIS will fill in host#, 0 ports=shut
	LR	R0,R5
	JAL	R4,PUTH,,		:relative Host number
	JAL	R4,ELOR,,		:End-Logical-Output-Record
XHOST7	SIS	R5,1			:Repeat for all hosts
	JGE	XHOST4
  EI	:NHOST

:	SET TAM BIT FOR MPVC PORTS - not used but must be set for
: 				     polling loop
	IF	NMPVC			:get first mpvc port number
MPVTAM	LHI	RP,.MPORT		:get first mpvc port number
MPVT0	SBT	RP,TAM			:set TAM bit for port
	AIS	RP,1			:next port
	CHI	RP,.MPORT+NMPVC
	JLBS	MPVT0			:til done


	EI	:NMPVC


	.INIT.(TELEX,TINIT)		:build Telex Pvc circuits
	.INIT.(BTELEX,BTINT)		:initialize virtual telex port
	.INIT.(TTELEX,TTINT)		:initialize SPEEDLINK telex ports

        J       BAKLOO,,                :jump to dismiss/timout routine


        LO      BUFFER
:	Code section

:	Initialize buffers
IZBB	LIS	R1,0			:set a constant
	 IF	RHIST;	STH	R1,HISX,,;	 EI
	LHI	R2,(NBUF-1)*4		:for all buffers
IZBB1	STH	R1,BCT,R2,		:set empty
	ST	R1,BB,R2,		:clear start pointer
	ST	R1,BE,R2,		:clear end pointer
	SIS	R2,4
	JGEBS	IZBB1
	STH	R1,REBL,,		:set reserve tank empty
	STH	R1,REBC1,,		:set reserve tank unused
	STH	R1,REBC2,,		:set no buffer-zaps (yet)
	LHI	R3,NBBFLT		:for all bufferlets
	LI	R2,NBBFLT*10		:bufferlet-pointer address
	STH	R1,BUFERS,R2,		:terminate list
IZBB2	STH	R3,BUFERS-10,R2,	:link last to this
	SHI	R2,10
	SIS	R3,1			:decrement buffer number
	JGBS	IZBB2			:repeat for all bufferlets

:	Now set up the buffer flags for all buffers
	LIS	R1,0			:buffer index for To-terminal buffers
	LHI	R2,NPORT*4		:buffer index for From-terminal buffers
	LHI	R3,NPORT*8		:buffer index for LOGON buffers
	LHI	R4,-2*NPORT		:Loop control...do for each port (count up)
	MAKEBF(R5,TOPORT)
	LIS	R6,0			:From-port starts with 0 BF
	MAKEBF(R7,GOLOG)
IZBB3	STH	R5,BF,R1,		:Init To-port buffer flags
	STH	R6,BF,R2,		:Init From-port buffer flags
	STH	R7,BF,R3,		:Init LOGON buffer flags
	LHL	R8,(2*NPORT)+.PTP.,R4,	:get pointer to port table entry
	ST	R1,.TTBUF,R8		:Set To-terminal buffer pointer
	ST	R2,.FTBUF,R8		:Set From-terminal buffer pointer
	ST	R3,.LGBUF,R8		:Set LOGON buffer pointer
	AIS	R1,4			:advance to next port
	AIS	R2,4
	AIS	R3,4
	AIS	R5,1			:advance flags too
	AIS	R7,1
	AIS	R4,2			:next port
	JL	IZBB3			:...until all ports are done

:	Set up buffer pointers and flags for the PAD related functions
  IF	X3ON
	LHI	R1,NPORT*$A12		:alternate echo buffer
	LHI	R2,NPORT*$A16		:command and data editing buffer
	LHI	R4,-2*NPORT
	MAKEBF(R5,FRECHO)		:echo buffer BF 
	MAKEBF(R6,FREDIT)		:edit buffer BF 
IZBB5	STH	R5,BF,R1,
	STH	R6,BF,R2,
	LHL	R8,(2*NPORT)+.PTP.,R4,
	ST	R1,.ECOBF,R8		:set from-echo buffer pointe
	ST	R2,.FEDBF,R8		:set from-editor buffer pointer
	AIS	R1,4
	AIS	R2,4
	AIS	R5,1
	AIS	R6,1
	AIS	R4,2
	JL	IZBB5

:	INITIALIZE .TBHTX AND .OFHTX IN PORT TABLES FOR <TAB> EXPANSION 
:	COUNT TABLES
	LHI	R4,-2*NPORT		:
	LIS	R1,0			:R1 <- 0
	LA	R2,HTXTBL,,		:BEGINNING OF <TAB>EXPANSION COUNT TABLE
IZBB7
	LHL	R8,(2*NPORT)+.PTP.,R4,	:GET ADDRESS OF EACH PORT TABLE
	STB	R1,.OFHTX,R8		:ALWAY ZERO THE OFFSET INTO <TAB> EXP. TABLE
	ST	R2,.TBHTX,R8		:YES, SET UP THE POINTER IN PORT TABLE
					: TO THE <TAB>EXPANSION COUNT TABLE.
	AHI	R2,HTXSIZ		:ADDRESS OF NEXT <TAB> EXPANSION TABLE
	AIS	R4,2			:BUMP POINTER
	JL	IZBB7			:LOOP FOR ALL PORTS
  EI
:       initialize OUTDIAL buffers, for storing unprocessed commands
        IF      OUTDIA
        LHI     R1,($A12+8*X3ON)*NPORT  :if no pad next is 12d else 20d
        LHI     R4,-2*NPORT             :command buffer
        MAKEBF(R5,TOTRAN)
IZBB10  STH     R5,BF,R1,
        LHL     R8,(2*NPORT)+.PTP.,R4,
        ST      R1,.OTBUF,R8            :set pointer
        AIS     R1,4
        AIS     R5,1
        AIS     R4,2
        JL      IZBB10                  :do for all ports
      EI        :outdia
	JR	R0			:Then exit


        LO      CONSAT
        LO      DATA
	SUBTTL  (INITIZ) CONSAT -- SIO PROCESSES

	 IF	NSPORT

:		 **** *****  ***
:		*       *   *   *
:		 ***    *   *   *
:		    *   *   *   *
:		****  *****  ***

:	Initialize new port
:	RLINK -	Link register
:	RP -	port number
:	R6 -	Offset for command area (relative to SIO port 0)
:	R4, R5 not preserved
Q.SANS	SBT	RP,DQDAT		:force service
	LB	R4,LUNSIO,RP		:Set logical unit
	LA	R5,ICMSIO,R6		:point to command area
	SVC	IO,0A0+R4		:and start it
	 JAL	R15,SABORT
	SBT	RP,TAM			:reset backpressure
	JR	RLINK			:Then exit

:		SIO Initialization
:		--- --------------
:	Initialize the SIO programs
:	Find all SIO channels that are available
SINIT	LM	R12,S.HNG,,		:Get the disconnect routine
	STM	R12,HNGSIO
	LM	R12,S.ENA,,		:Get the enable routine
	STM	R12,ENASIO
	LM	R11,S.ASCI,,		:Get the ASCII initial routine
	STM	R11,SAVSIO
	 IF	STOP2
	LM	R11,S.ASC2,,		:for 2 stop bit ascii
	STM	R11,SAVSI2		:/
	 EI	:STOP2
	 IF	BAUDY
	LM	R11,S.BADO,,		:same for BAUDOT
	STM	R11,SAVSIB		:
	 EI	:BAUDY
	LI	R14,00051113		:make the XONENA program
	STM	R14,XONSIO		:
	LI	R14,0005FFFF		:make XOFF program
	STM	R14,XOFSIO		:
SINIT1	LHI	RP,.SPORT		:make a pointer into the SIO ports
	LCS	R1,1			:R1 is the LUN to be queried
	LIS	R3,3			:Query 3-bytes of info
SINIT2	AIS	R1,1			:For next unit
	LA	R2,LUNSIO,RP		:Address of Query
	SVC	IO,8000+R1,,		:Get the attributes for this unit
	 JAL	R15,SABORT		:
	LB	R5,0,R2			:get the type
	CLHI	R5,4			:is it a SIO channel?
	JN	SINIT3			:no
	STB	R1,0,R2			:Store the LUber
	LB	R5,2,R2			:get device address
	LB	R6,1,R2			:get channel number
	SLLS	R5,4			:pack together
	OR	R5,R6			:...device|channel
	NHI	R5,0FF			:
	OHI	R5,600			: (0.6.d.c)
	STH	R5,ASNPUT,RP,RP		:save for accounting ports
	SBT	RP,GOTSIO		:Set channel available
	RBT	RP,HANGWT		:and start with soft-hang
	RBT	RP,RLA			:...and answered
	LR	R5,R1			:prepare for connect
	LA	R6,LOWSIO		:low limit
	LA	R7,HIHSIO		:High limit
	LH	R4,OCMSOF-2*.SPORT,RP,RP	:get offset
	LA	R8,STASIO,R4		:and set status-address
	TS	STASIO,R4		:CAB 6.01 - init as not plugged in
	LA	R9,DQDAT*8,RP,		:make a bit pointer with bit
					:addressing, and add SIO offset
	SVC	IO,90+R5		:connect
	 JAL	R15,SABORT

:	Now initialize the input program for this channel
	LIS	R6,0
	SVC	IO,0B0+R5		:reset channel
	 JAL	R15,SABORT
	LA	R6,ENASIO		:set RS true
	SVC	IO,0B0+R5
	 JAL	R15,SABORT
	AIS	RP,1			:for next channel
	CLHI	RP,.SPORT+NSPORT	:Done?
	JL	SINIT2			:Try next unit
	JR	R0			:done...exit

SINIT3	CLHI	R5,0FE			:is this all the LUN?
	JN	SINIT2			:no
	TS	CERR			:yes...CONFIGURATION ERROR
	JLR	R0			:already have one...exit
	AHI	RP,3000-.SPORT		:display 3|0|0|port
	STH	RP,FPANEL		:
	JR	R0			:done

SABORT	ABORT(R15,0F3)			:SIO SVC failure

	 EI	:NSPORT
        

        IF      NAPORT

:	Initialize tables
:	R6 -	link register

IZANSW  BARRAY(.ANSW,NAPORT)            :don't hang these on init *600.sdw

IZASYN  LCS     R2,1			:
        LA      R3,TIDMMD-1,,		:
        LHI     R4,TID.D1               :value of beg delay
        LHI     R5,80                   :means signal to MSG
        LIS     R7,6                    :delay signal
        LHI     R8,TIDLG1               :chars for first delay
IZAS03  AIS     R3,1			:
        AIS     R2,1			:
        LB      R1,LSMS0,R2,		:
        JE      IZASN0                  :no more data
        STB     R1,0,R3			:
        CR      R2,R8                   :how many get this delay
        JGE     IZAS07			:
IZAS04  CR      R1,R5                   :r5 has 80 which is signal
        JE      IZAS05                  :handle signals
	LR	R0,R4			:temp reg
IZAS4A	SIS	R0,6			:greater than 6/30 of a sec?
	JLE	IZAS4B			:no, go handle residual delay
        STB     R5,1,R3                 :store start of signal (80)
        STB     R7,2,R3                 :store delay signal (6)
        STB     R7,3,R3                 :store delay amount (6/30 sec)
        AIS     R3,3			:
        J       IZAS4A			:
IZAS4B	AIS	R0,6			:
	JE	IZAS03			:
	STB     R5,1,R3                 :store start of signal (80)
        STB     R7,2,R3                 :store delay signal (6)
        STB     R0,3,R3                 :store final delay (x/30 sec)
        AIS     R3,3			:
        J       IZAS03			:
IZAS05  LB      R1,LSMS0+1,R2,		:
        STB     R1,1,R3                 :store signal
        AIS     R2,1			:
        AIS     R3,1			:
        TBT     R1,XBYTE1,,             :multi byte signal
        JE      IZAS03                  :finished with this signal
        AIS     R2,1			:
        AIS     R3,1			:
        LB      R1,LSMS0,R2,		:
        STB     R1,0,R3			:
        J       IZAS03			:
IZAS07  LHI     R4,TID.D2               :the secondary delay value
        LHI     R8,100                  :rest of chars(till end of data)
        J       IZAS04			:
IZASN0	LM	R14,SPED.A,,		:get terminal-speeds accepted
	STM	R14,A.SPED		:set terminal-speeds supported
	LIS	RP,0			:Starting with first port
	LIS	R0,AR.IC		:initial cursor
	LA	R2,DQ,,			:Locate input rings
	LHI	R3,-(AR.RS-AR.IC-3)	:Initialize TAM count values
IZASN1	RBT	RP,TAMMER		:Reset transition marker
	SBT	RP,TAM			:Mark not backpressured
	RBT	RP,OUTMSK		:No data to be out
	RBT	RP,QDDAT		:
	RBT	RP,DQDAT		:...and no data
	SBT	RP,HANGWT		:set hung, but let PVC set answered
        TBT     RP,IZANSW               :don't hang on init *600.sdw
        JEFS    IZAS13			:
        RBT     RP,HANGWT               :don't hang
        SBT     RP,AH.TO                :set timouts for forever
        SBT     RP,AH.TO1               :or they won't notice how nice we are
        SBT     RP,AH.TO2		:
IZAS13	TBT	RP,BUSY.C,,		:is port busyable?
	JEFS	IZASN2			:no..skip
	SBT	RP,BUSY.A		:yes...set attention required
IZASN2  GETPTP(RPI,RP,RP)               :get port table pointer
        LR      R1,RP                   :
        AR      R1,R1                   :R1 is 2*rp
        L       R9,AR.FT,R1,R1          :get from terminal async ring address
        ST      R9,.AR.FT,RPI           :put it in the port table
        L       R9,AR.TT,R1,R1          :get to terminal async ring address
        ST      R9,.AR.TT,RPI           :stuff it (diff files can be fun)
	TS	AR.BCT,R2		:Set input BCT count
	STB	R0,AR.FC,R2		:set fill and empty cursors
	STB	R0,AR.EC,R2		:
	TS	AR.RS+AR.BCT,R2		:set output BCT count
	STH	R3,AR.RS+AR.TAM,R2	:and output TAM count
	STB	R0,AR.RS+AR.FC,R2	:fill cursor
	STB	R0,AR.RS+AR.EC,R2	:and empty cursor
	AHI	R2,2*AR.RS		:point to next ring
	AIS	RP,1			:Next port
	CLHI	RP,NAPORT		:
	JL	IZASN1			:
	LCS	R1,1			:For each logical unit...
	LA	R2,ASNPUT		:Location of physical offsets
	LIS	R3,2			:
	LIS	R5,0			:port group
	 IF	AHIST;	STH	R5,AHISX;	 EI
	LM	R9,ASYBK,,		:initialize pointers
					: R8 -	LU number
					: R9 -	pointer to start of group ring array
					: R10 -	address of group CP half-word
					: R11 -	address of group DSR half-word
					: R12 -	address of group DTR half-word
					: R13 -	address of group TOPORT half-word
					: R14 -	address of group FROMPORT half-word
					: R15 -	address of group TAM half-word
IZASN3	AIS	R1,1			: Next L.U.
	SVC	IO,8000+R1,,		:Query the L.U. attributes
	 JAL	R7,IZASCR		:fail...abort
	LB	R4,0,R2			:check L.U. type
	CLHI	R4,0FE			:check device
	JEBS	IZASN3			:ignorable
	JLFS	IZASN4			:skip unless end-of-list
	TS	CERR			:exhausted devices...CONFIGURATION ERROR!
	JLR	R6			:exit...one already exists
	SRLS	R5,1			:else compute async group
	OHI	R5,1000			:display error forever!
	STH	R5,FPANEL		:
	JR	R6			:Done...exit

IZASN4	SIS	R4,1			:(expect 01|group #)
	JN	IZASN3			:ignore if not ASYNC
	LB	R4,1,R2			:get physical async group number
	SLLS	R4,4			:
	OHI	R4,100			:set ASYNC device
IZASN5	STH	R4,0,R2			:save it
	AIS	R2,2			:point at next
	AIS	R4,1			:
	THI	R4,0F			:fill in 16 entries
	JNBS	IZASN5			:
	TS	HDWDSR,R5		:start ports as inactive
	TS	HDWCP,R5		:
	AIS	R5,2			:set next group
	LR	R8,R1			:copy LU number
	OI	R8,AR.RS^10		:fill in ring size
	STM	R8,ATEMP		:save for SVC
	LA	R0,ATEMP		:point at block
	SVC	IO,CNASYN		:connect this ASYNC LU
	 JAL	R7,IZASCR		:connect failed, crash
	CLHI	R5,2*NAGRP		:Done all?
	JGER	R6			:yes...exit
	AHI	R9,20*AR.RS		:no...set next block
	AIS	R10,2			:next CP
	AIS	R11,2			:next DSR
	AIS	R12,2			:next DTR
	AIS	R13,2			:next TOPORT
	AIS	R14,2			:next FROMPORT
	AIS	R15,2			:next TAM
	J	IZASN3			:and repeat

:	Connect-ASYNC SVC failure
IZASCR	SIS	R7,8			:point at SVC call
	ABORT(R7,C.IZAS)

:	Initialization data-block for ASYNC code
ASYBK	WC	DQ			:addr of group ring array
	WC	HDWCP			:addr of group CP half-word
	WC	HDWDSR			:addr of group DSR half-word
	WC	HDWDTR			:addr of group DTR half-word
	WC	QDDAT			:addr of group TOPORT half-word
	WC	DQDAT			:addr of group FROMPORT half-word
	WC	TAM			:addr of group TAM half-word

        EI  :NAPORT

        EI      :SOLOCS the following routines were taken from the indepedent
                :modules



	SUBTTL	(INITIZ) PVC INITIALIZATION

	 IF	PVC
	 
	 LO	PVC
	 
	 
:	PVC Initialization routine
PVCIZ	ST      R0,PVCRET
        LHI	R1,(NPORT-1)*2		:For all ports...
	LIS	R2,0			:...and a 0
PVCI0	GETPTP(RPI,R1)			:get pointer to port table entry
	STB	R2,.PVCDO,RPI		:initialize PVC state vector...no PVC
	STH	R2,.PVCTO,RPI
	L	R3,PVCX,R1,R1		:get value
	ST	R3,.PVCX,RPI		:...and put into table
	JEFS	PVCI1			:Skip if null PVC
	TS	.PVCTO,RPI		:-1 in timeout field means nothing to do

PVCI1   THI     R3,POAID                :aid port?
        JEFS    PVCI2
        SRLS    R1,1                    :make actual port number
        RBT     R1,HANGWT               :AID ports are answered on start
        SBT     R1,AH.TO                :don't let SEC16 set HANGWT  *sdw
        SBT     R1,AH.TO1               :again
        SBT     R1,AH.TO2               :again *sdw 401
        SLLS    R1,1                    :restore
PVCI2   TS	.PVCLH,RPI		:Init. .PVCLH flag to -1
	SIS	R1,2
	JGE	PVCI0

:	Now do miscellaneous stuff
	LHI	R1,(NGRP-1)*2
        LIS     R2,0                    :corrected mistake in 4.00*sdw403
PVCI30	STH	R2,PVCSTD,R1		:Init. with nothing to do
	TS	TATBIN,R1		:Init. TATBIN to -1
	SIS	R1,2			:...on to next group
	JGEBS	PVCI30			:Continue

:	Generate PVC username, password
        if SOLOCS
        LIS     R0,0                     :solo is slot 0
        else
        LIS     R0,7                    :set mask
	NH	R0,SLOTNO,,		:extract slot-number digit
	SLLS	R0,9			:* 1000(octal)
        ei
	STH	R0,PVCBAS		:this becomes PVC Port-number bias

:	First of all, copy text to working storage
	LHI	R1,PVCUNL-4
INITPU	L	R0,IPVCUN,R1,		:Copy user name
	ST	R0,PVCUN,R1
	SIS	R1,4
	JGEBS	INITPU

:	Now put node number into PVC messages
        if SOLOCS
        LI      R0,MACHNM               :get node number from tym file
        else
	LHL	R0,NODEX,,		:Get node number from Common
        ei
	LA	R3,PVCUN+2		:pointer to Username string
	LIS	R4,4			:4 bytes
	JAL	R6,OOS,,			:Put string in place

	LHI	R1,PVCPWL-4		:repeat for password
INITPP	L	R0,IPVCPW,R1,
	ST	R0,PVCPW,R1
	SIS	R1,4
	JGEBS	INITPP
        if SOLOCS
        LI      R0,MACHNM               :node number from tymfile
        else
	LHL	R0,NODEX,,		:Again
        ei
	LA	R3,PVCPW+6		:...for password
	LIS	R4,4
	JAL	R6,OOS,,
        L       R0,PVCRET
	JR	R0			:then return

        FO      PVC
        EI      :PVC

        IF      TELEX
        LO      TELEX
:	Routine checks array of Telex ports and builds circuits
:	for those ports.

TINIT	ST	R0,TLXTM1		:save return
	LHI	RPOL,(NGRP-2)*2		:for all groups
TINT0	L	R0,TLXP,RPOL,		:get ports to build
TINT1	JFFO	R0,TINT2		:go do it
	SIS	RPOL,4
	JGEBS	TINT0			:next group
	L	R0,TLXTM1		:get return
	JR	R0			:and return

TINT2	ST	R0,TLXTMP		:store array
	RBT	R1,TLXTMP		:set done
	LR	RP,RPOL			:comput port number
	SLLS	RP,3
	AR	RP,R1
	GETPTP(RPI,RP,RP)			:get port table pointer
	SBT	RP,RLA			:set port active
	JAL	RLINK,IZ.PRT,,		:for TYMNET II
	JAL	RLINK,AIDPVC,,		:perform AID
	J	TINERR			:normal return...ERROR!
	JAL	R9,A.VID,,		:go set up port
	L	R0,TLXTMP		:get array of ports to build
	J	TINT1			:and do next port
TIN.IN	EQ	8E	
TINERR	ABORT(R8,TIN.IN)	
        FO      TELEX
        EI      :TELEX


        IF      BTELEX
        LO      BTELEX
:	Routine checks array of Virtual Telex ports and initializes
:	those ports

BTINT	ST	R0,TLXTM1		:save return
	LHI	RPOL,(NGRP-2)*2		:for all groups
BTIN0	L	R0,BTLXP,RPOL,		:get ports
BTIN1	JFFO	R0,BTIN2		:go do it
	SIS	RPOL,4
	JGEBS	BTIN0			:next group
	L	R0,TLXTM1		:get return
	JR	R0			:and return

BTIN2	ST	R0,TLXTMP		:store array
	RBT	R1,TLXTMP		:set done
	LR	RP,RPOL			:compute port number
	SLLS	RP,3
	AR	RP,R1
	GETPTP(RPI,RP,RP)			:get port table pointer
	RBT	RP,FWDPTH		:spacing forward path
	RBT	RP,MRKING		:not marking in both paths
	SBT	RP,EMTBRK		:spacing backward path (to telex)**4.02 LH
	RBT	RP,VB.ACP
	RBT	RP,RECWRU		:clear receive wru
	SBT	RP,RLA			:set port active
	L	R7,.PVCX,RPI		:get pvc parameter word
	SRL	R7,$A 23		:extract AID index
	NHI	R7,0FE			:Isolate 2*TID value
	LH	R4,PVCTID,R7,		:map pvc tid value into useful VIDTT index
	JAL	R5,IZPORT,,		:initialize port parameters
	JAL	R9,A.VID,,		:get set up port
	L	R0,TLXTMP		:get array of ports
	J	BTIN1			:and do next port
        FO      BTELEX
        EI      :BTELEX
        
        IF      TTELEX
        LO      TTELEX
:	initializes and identifies those ports
:	** 4.02 LH
TTINT	ST	R0,TLXTM1		:save return
	LHI	RPOL,(NGRP-2)*2
TTIN0	L	R0,TTLXP,RPOL,		:get transparent telex ports
TTIN1	JFFO	R0,TTIN2		:go to identify ports
	SIS	RPOL,4			:next group
	JGEBS	TTIN0
	L	R0,TLXTM1
	JR	R0
TTIN2	ST	R0,TLXTMP		:store array of telex ports
	RBT	R1,TLXTMP		:do'nt serve identified ports again
	LR	RP,RPOL
	SLLS	RP,3
	AR	RP,R1
	GETPTP(RPI,RP,RP)
	SBT	RP,FWDPTH		:assume mark from Telex device
	RBT	RP,FWDPT0		:reset previous signal from device
	RBT	RP,MRKING		:not marking in both directions
	SBT	RP,EMTBRK		:spacing backward path
	RBT	RP,TT.ACP		:ports not been identified yet
	SBT	RP,RLA			:set port active
	L	R7,.PVCX,RPI		:get PVC exceptions
	SRL	R7,$A 23		:extract AID index
	NHI	R7,0FE			:isolate 2*TID value
	LH	R4,PVCTID,R7,		:map PVC TID tabe
	JAL	R5,IZPORT,,		:initialize port parameters
	JAL	R9,A.VID,,		:set up ports
	L	R0,.PVCX,RPI		:PVC exception
	TI	R0,POALO		:ALO port ?
	JEFS	TTIN3			:no - no initial timer for non-ALO port
	SBT	RP,INTIMR		:yes - turn on initial delay timer
	JAL	RLINK,PVCSWT,,		:perform delay
TTIN3	L	R0,TLXTMP		:restore port state array
	J	TTIN1
        FO      TTELEX
        EI      :TTELEX

        IF      NUMPRN
:	PRINTER Initialization routine
:	R0 -	Link register
INITP	TS	PRTACT			:set not-active
	LIS	R1,0			:Use R1 to count LUN's
	LIS	RP,0			:use RP to count printers
INITP1	LA	R2,LUNPRN,RP		:use R2 to specify table for QUERY SVC
	LIS	R3,1			:R3 says query one byte of info
	SVC	IO,8000+R1,,		:get the attributes for this Logical unit
	JAL	R10,CRASH
	LB	R2,LUNPRN,RP		:get the device type
	SIS	R2,2			:is it a printer?
	JNFS	INITP2			:skip if not
	JAL	RCH,PINIT		:Initialize ROTOR
	STH	RP,PRTACT		:keep count of NUMPRN
	STB	R1,LUNPRN,RP		:save LUN for this printer
	AIS	RP,1			:count this printer
INITP2	AIS	R1,1			:do for all Logical-Units
	CLHI	R2,0FE-2		:'FE' signals last LUN
	JEFS	INITP3			:6.01/cab - skip if LU's exhausted
	CLHI	RP,NUMPRN		:have we found all the printers?
	JER	R0			:yes...exit
	J	INITP1			:no...keep searching
INITP3	TS	CERR			:LU's exhausted...CONFIGURATION ERROR
	JLR	R0			:exit if one already found
	AHI	RP,2000			:Display 2|0|0|0|n
	STH	RP,FPANEL
	JR	R0			:and exit


:	Initialize a (Specific) printer
:	RP -	Printer (port) number
:	R13 -	2*port number
:       RCH - link register
PINIT	LHI	R4,NROT*BUFSIZ		:compute offset
	MHR	R4,RP
	LA	R4,PAREA,R4		:address of buffer
        LR      R13,RP
        AR      R13,R13                 :r13 is 2*rp
	ST	R4,SVCPTR,R13,R13	:save pointer to area start
	LR	R5,R4			:copy pointer
	LIS	R3,0
	 RE	NROT			:set up each rotor entry
	ST	R3,0,R5			:zero command|count for each block
	LA	R6,10,R5		:point to adjacent data area
	ST	R6,4,R5
	ST	R3,8,R5			:zero command|count for each jump
	LA	R6,BUFSIZ,R5		:point to next command area
	ST	R6,0C,R5
	LR	R5,R6			:point to next SVC entry
	 ER	:NROT
	ST	R4,(NROT-1)*BUFSIZ+0C,R4 :make JUMP back to beginning
	LB	R3,LUNPRN,RP		:get the LUN
	LA	R5,STAT,R13		:address for status
	SVC	IO,50+R3		:and halt I/O
	 NOP	0			:SVC normal return..I/O already in progress
	JR	RCH			:and exit

        EI      NUMPRN

        IF      OUTDIA
        LO      OUTDIA

:       OT.IZ   is the initialization routine - finding which modems
:               have command mode.
OT.IZ   ST      R0,OTZRET
        SVC     0,2             :dismiss for a couple of seconds to let
                                :async signalling settle (for modiz)
        LIS     R0,0		:
        STH     R0,O.NCAP       :number of capable ports
        LHI     R4,TIDM24       :2400 baud tid
        LIS     R3,0A           :Isis speed of 2400 bps
        TBT     R3,A.SPED,,     :is it supported on this node?
        JNFS    OT.IZF          :yes
        LHI     R4,TIDM12       :then 1200 bps
OT.IZF  STH     R4,MHSTID       :our high speed tid
        STH     R4,M.TID        :and use it for init
        LI      R1,OCMDRY       :put a zero so the carry will zero out
        ST      R1,OT.COM       :all bits to the right, set that bit to
                                :one and leave alone all bits to the left

                                :now port by port stuff
        LHI     R1,2*(NPORT-1)  :
OT.IZ0  TS      OTPMAP,R1       :set no mapping
        SIS     R1,2		:
        JGEBS   OT.IZ0		:

        LHI     RP,NAPORT-1     :Start at high port
OT.IZ1  JAL     RLINK,MODIZ,,   :find modems
        J       OT.IZ3          :not capable
OT.IZ2  SIS     RP,1		:
        JGEBS   OT.IZ1		:
        L       R0,OTZRET	:
        JR      R0		:
OT.IZ3  RBT     RP,OT.CAP	:
        GETPTP(RPI,RP,RP)       :RPI can be killed in MODIZ
        JAL     R15,ZAPMOD,,	:
        J       OT.IZ2          :modem no talk to me

        FO      OUTDIA
        EI      :OUTDIA

        FO      DATA
   &@8?