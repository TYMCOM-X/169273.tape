begin "TAPEIN"
    require "(SAILIB)SAIL.DEF" source!file;
    require 3 version;

boolean
    EOF;

integer
    FTA,
    DSK,
    ERR,
    I,
    J;

string
    o!name;

define
    bufsiz = 1024;	! up to 4 KBytes per record;

integer CNT;

integer procedure UGETF(integer CH,FN); begin "UGETF"
    integer array UG[0:1];
    UG[0]:=FN;
    chnior(CH,UG[0],'10);
    return(UG[1]);
end "UGETF";

simple integer procedure GET!BYTE; begin "get-byte"
  own integer PTR,I;
  own integer array BUF[0:bufsiz-1];
  if CNT=0 then begin "get-buf"
    label AGAIN;
AGAIN:
    EOF := 0;
    arryin(FTA,BUF[0],arrinfo(BUF,0));
    if EOF land !bit(18) then begin
	print( "?MOD " ); goto AGAIN end;
    if EOF land !bit(19) then begin
	print( "?DEV " ); goto AGAIN end;
    if EOF land !bit(20) then begin
	print( "?DAT " ); goto AGAIN end;
    if EOF land !bit(21) then begin
	print( "?BTL " ); goto AGAIN end;
    PTR := point(8,BUF[0],-1);
    CNT := ugetf(FTA,0);	! get actual number of bytes read;
    print( CNT, " " );
  end "get-buf";
  CNT := CNT - 1;
  I_ILDB(PTR);
  RETURN(I);
end "get-byte";

simple integer procedure GET!WORD; begin "get-word"
  return(get!byte +
	(get!byte lsh 8));
  end "get-word";

simple integer procedure GET!LONG; begin "get-long"
  return(get!byte +
	(get!byte lsh 8) +
	(get!byte lsh 16) +
	(get!byte lsh 24));
  end "get-long";

string procedure GET!STRING(integer LEN(-1)); begin "get-string"
  integer C;
  string S;
  S := null;
  do begin
    C := get!byte;
    if EOF then done;
    if (LEN = -1) and (C = 0) then done;
    S := S & C;
    end until length(S)=LEN;
  return(S);
  end "get-string";

simple procedure SKIP!RECORD; begin "skip-record"
  ! will discard bytes until the end of the current record is
    reached, will always discard at least one byte;
  if CNT=0 then get!byte;
  CNT := 0;
  end "skip-record";

simple procedure SKIP!FILE; begin "skip-file"
  ! will discard records until EOF is true, will always discard
    at least one record;
  do skip!record until EOF;
  end "skip-file";
simple boolean procedure INIT!TAPE; 
begin "FTA"
  define CHOKE(S) = {begin outstr(S &crlf); goto FRETURN; end};
  label FRETURN;
  integer D,U,A,B;
  string F;
  F:=cv6str(calli(cvsix("CPIO"),'64));
  if not !SKIP! then begin
    outstr("Tape unit: ");
    F:=inchwl;
    end;
  if length(F)=0 then F:="CPIO";
  open(FTA_getchan,F,'17,0,0,0,0,EOF:=true);
  if EOF then choke("Unit "&F&" not available");
  outstr("Density: ");
  case inchwl of begin
    ["6250"] D:=!bit(13);
    ["1600"][0] D:=!bit(14);
    ["800"] D:=!bit(15);
    ["556"] D:=!bit(16);
    ["200"] D:=!bit(17);
    else choke("Illegal density") end;
  U:=UGETF(FTA,2);
  if U land !bit(12) then choke("Drive is 7 track");
  if U land !bit(0) then outstr("Unit is write protected"&crlf);
  if U land !bit(2) then choke("Unit not ready");
  if not(U land D) then choke("Drive not capable of selected density");
  A:=4; B:=!bit(12);
  do begin
    B:=B lsh -1;
    if (B land U) then A:=A-1;
  end until (B land D);
  outstr("Using density "&cvs(A)&"/3 of "&F&":"&crlf);
  if A<1 then choke("Can't set density - FUBAR");
  if A>3 then choke("Can't set density - FUBAR");
  setsts(FTA,A*!bit(28)+'17);
  mtape(FTA,"W");
  mtape(FTA,"I");
  return(true);
  FRETURN: return(false);
end "FTA";
procedure write( string filename );
begin
    integer E;
    enter( DSK, filename, E );
    if E then begin
	print( "can't enter file ",filename,crlf );
	return;
    end;
    print( filename, ": " );
    EOF := 0;
    while EOF land !bit(22) = 0 do begin
	integer C;
	C := get!byte;
	case C of begin
	    [0][#cr] ;
	    [#lf] out( DSK,crlf );
	    [else] out( DSK,C )
	end;
    end;
    print( crlf );
    close( DSK );
end;

begin "MAIN"
  ttyup(true);
  outstr("ASCII tape reader"&crlf );
  if not init!tape then call(0,"EXIT");
  open(DSK_getchan,"DSK",0,0,5,0,0,ERR:=true);
  if ERR then usererr(0,0,"?cannot init DSK:");
  while( true ) do begin
	string cmd;
	print( "*" );
	cmd := inchwl;
	case cmd of begin
	    ["?"] print( "one of:
    R	rewind tape
    Wn	write next tape file to file named ""n""
    U	unload tape and exit from program
    Q	quit from program
    ?	help
");	
	    ["R"] mtape( FTA,"W" );
	    ["U"] begin mtape( FTA,"U" ); call(0,"EXIT") end;
	    ["Q"] call(0,"EXIT");
	    ["W"] write( cmd[2 to inf] );
	    [else] print( "?eh"&crlf )
	end;
  end;
end "MAIN";
end $
