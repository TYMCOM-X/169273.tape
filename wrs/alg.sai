define MAXNODE = '7777;			! highest node number;
define MAXCOST = 800;			! highest cost considered;
define NODE = set itemvar;		! nodes are items;
require	MAXNODE new!items;		! space for nodes;
define NEIGHBORS(N) = {datum(N)};	! set of neighbors of this node;
define NODE#(N) = {props(N)};		! node number of this node;
define PATH.COST(N) = {!PATH.COST[NODE#(N)]};	! total path cost of this node;
integer array !PATH.COST[ 0:MAXNODE ];	! space for PATH.COST(N);
define PARENT(N) = {!PARENT[NODE#(N)]};	! parent of this node;
node array !PARENT[ 0:MAXNODE ];	! space for PARENT(N);
set array DIRLST[ 0:MAXCOST ];		! ordered list of nodes to be visited;
set DIRSET;				! set of nodes to be visited;

list procedure NEEDLE( node N );
begin "NEEDLE"
    list NEEDLE;
    NEEDLE := { N };
    while PARENT(N) neq nil do
    begin
	put PARENT(N) in NEEDLE after N;
	N := PARENT(N);
    end;
    return( NEEDLE );
end "NEEDLE";

procedure VISIT( node CURRENT.NODE; integer CURRENT.COST );
begin "VISIT"
    node NEIGHBOR;
    foreach NEIGHBOR | NEIGHBOR in NEIGHBORS( CURRENT.NODE ) do
    begin
	integer TOTAL.COST;
	TOTAL.COST := CURRENT.COST + LINK.COST( CURRENT.NODE, NEIGHBOR );
	if TOTAL.COST leq MAXCOST then
	begin
	    label NextNeighbor;
	    if NEIGHBOR in DIRSET then
		if PATH.COST( NEIGHBOR ) > TOTAL.COST then
		    remove NEIGHBOR from DIRLIST[ PATH.COST( NEIGHBOR )]
		else
		    goto NextNeighbor
	    else
		put NEIGHBOR in DIRSET;
	    PARENT( NEIGHBOR ) := CURRENT.NODE;
	    PATH.COST( NEIGHBOR ) := TOTAL.COST;
	    put NEIGHBOR in DIRLST[ TOTAL.COST ];
	NextNeighbor:
	end;
    end;
end "VISIT";

list procedure BUILD.CIRCUIT( node ORIG, DEST );
begin "BUILD.CIRCUIT"
    node CURRENT.NODE;
    integer CURRENT.COST;
    arrclr( DIRLST );			! initialize data structures;
    DIRSET := phi;
    PARENT( DEST ) := nil;
    PATH.COST( DEST ) := 0;
    put DEST in DIRLST[ 0 ];
    for CURRENT.COST := 0 upto MAXCOST do
	foreach CURRENT.NODE | CURRENT.NODE in DIRLST[ CURRENT.COST ] do
	    if CURRENT.NODE = ORIG then
		return( NEEDLE( ORIG ))
	    else
		VISIT( CURRENT.NODE, CURRENT.COST );
    return( phi );
end "BUILD.CIRCUIT";
