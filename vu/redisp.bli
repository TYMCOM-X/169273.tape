module redisplay = begin

!Copyright 1979 by Michael L. Kazar

global silent=0;
external escvalue;
external sosmod;
global routine redisp (checkflag) = begin

register i,cchar;
local n,k,firstchar,screenpos,physcreenpos,
	npos,mushed,temp,tline,earlyzap,mustclear,curlm;

own posifirst;

global inwind=(0);
global linmax[30]=(30:1);

structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;

forward updatecursor,writeloss;
external scrsze,lowend,hend,hbot,getchxr,physpos,curline,leftmargin,linesz;
external screen,goxy,clearline,tabsize,ttyidle,hitsts,dostatus,physlin;
external scrmod,muline,flubfr,putch,caliad,ttytyp;
external ohash,defwindow,curwin,wndorg,wndsiz,scroff,percnt,idc;

map tdas screen;

global routine writestring(foo) = begin
local tp,cc;
if .silent then return;
tp_(.foo-1)<1,7>;
while 1 do begin
	cc_scani(tp);
	if .cc eql 0 then return;
	writeloss(.cc)
	end;
end;

global routine writeloss(foo)=
if .silent then return
else if .foo gtr #37 and .foo lss #177 then begin
	putch(.foo);
	physpos_.physpos+1;
	end
else if .foo eql #15 then leftmargin()
! else if .foo eql #12 then (putch(.foo);physlin_.physlin+1)
else if .foo eql #11 then goxy (updatecursor(#11,.physpos),.physlin)
else if .foo eql .EscValue then (putch("$");physpos_.physpos+1)
else begin
	if .foo eql #177 then foo_"#"-#100;
	putch("^");putch(.foo+#100);	![CB @ GC] Changed to Upper case
	physpos_.physpos+2;
	end;


global routine updatecursor (xc,foo) =
	if .xc eql #011 then ((.foo-1)/.tabsize)*.tabsize+1+.tabsize
	else if .xc gtr #37 and .xc lss #177 then .foo+1
	else if .xc eql .EscValue then .foo+1
	else .foo+2;

if .silent then return 0;	       !if should be quiet.

mushed_0;			       !how many modified lines.

n_if(.curline gtr .scrsze or .curline lss 1) then begin
		scrmod_1;
		muline_1;
		curline_.scrsze/4+1
		end
	else .curline;
k_0;

! n is the place where current line is to appear on the screen.
! k is how far we will really go. differs if very near the top of the
! screen.

posifirst_1; !default current line.

decr i from .lowend-1 do begin

	if .i lss 1 then begin
		firstchar_1; !underflow thru top of screen
		curline_.k+1;
		exitloop;
		end;

	if (getchxr(.i) eql "?L") and .sosmod then begin
	    firstchar_.i+1;
	    if .k eql 0 then posifirst_.firstchar;
	    curline_.k+1;
	    exitloop;
	end;
	
	if getchxr(.i) eql #015 then begin
		k_.k+1; ! a carriage return
		if .k eql 1 then posifirst_.i+1
		end;

	if .n eql .k then begin
		firstchar_.i+1; ! back the proper number of lines.
		exitloop;
		end

	end; !decrement

! now we redo from firstchar down. we assume firstchar points
! at the start of a line which is to go at the first position
! of the screen.

if .inwind then begin
    inwind_0;
    defwindow(1,.wndorg[.curwin],.linesz,.wndsiz[.curwin])
end;

if .muline and
    (case .ttytyp of set			![CB] Change to CASE
		0; 0; 0; 0; 0; 0;	! Case 0-5
		1;			! Case 6  = concept 100
		0; 0;			! Case 7-8
		1;			! Case 9  = Dm2500
		1;			! Case 10 = Vt100
		0; 0;			! Case 11-12
		1;			! Case 13 = Hazeltine 1500
		1;			! Case 14 = Heath 19
		0; 0; 0; 0; 0;		! Case 15-19
		1;			! Case 20 = Teleray 1061
		1;			! Case 21 = Mime's Act4
		0;			! Case 22
		1;			! Case 23 = Hp2621
		0; 0; 0;		! Case 24-26
		1;			! Case 27
		1;			! Case 28 = Adm-31 *** remove 1?
		0;			! Case 29
		1;			! Case 30 = Hazeltine 2000
		0;			! Case 31
	tes)
	    then
	    caliad(.firstchar);	!ins and del line.


if (not .muline or not .scrmod) then firstchar_.posifirst;

! above takes care of case where only doing one line.

npos_.linesz; !in case it gets lost past posn 132.
incr i from .wndorg[.curwin] to .wndorg[.curwin]+.wndsiz[.curwin]-1 do begin;
	! i is the line we are doing.
	! idea is that if muline=0 then only redo current line
	! also, only giveup on type-ahead if there is multiline stuff to do.
	if (not .muline or not .scrmod) then
	    (if .i-.wndorg[.curwin]+1 neq .curline then
		    exitcompound[2]
	    else idc(.firstchar,.i))
	else begin
	    if not ttyidle() and .checkflag then return 0; !early
	    idc(.firstchar,.i);
	end;
	screenpos_1; !number of characters into the line.
	physcreenpos_1; !number of cursor spaces into same line.
	ohash[.i]_0;	!initialize the line's hash to zero.

	mustclear_1;		       !if we must clear-to-end of line.
	earlyzap_0;		       !not zapped yet.
	curlm_0;		       !init it properly.
	while 1 do begin; ! loop for each char in the line.
		if .firstchar eql .lowend then npos_.physcreenpos;
			!means that we are at the current position.
		cchar_getchxr(.firstchar); !save calls to getchxr

		if .cchar neq "?M" then
		    curlm_updatecursor(.cchar,.physcreenpos);
		! Above keeps line length for stupid terminals.

		if (.cchar eql "?L") and .sosmod then firstchar_.hend;

		if .screen[.i,.screenpos] eql .cchar then begin
			if .cchar neq #015 then
				ohash[.i]_.ohash[.i]+.cchar+1^18;
				!calculates the hash
			! i=line number, screenpos=position therein
			physcreenpos_updatecursor(.cchar,.physcreenpos);
			!hacks tabs,etc.
			firstchar_.firstchar+1;
			screenpos_.screenpos+1;
			if .cchar eql #015 then exitloop;
			end !the if statement.
		else begin
			if (.screen[.i,.screenpos] eql "?M")
			    and .screenpos+1 leq 132 then begin
				screen[.i,.screenpos+1]_"?M";
				mustclear_0;   !already past there.
			    end;

			tline_.i-.wndorg[.curwin]+1+.scroff;
				! get cursor to correct line

			!next print damaged section of line.
			mushed_.mushed+1;
				if .cchar neq #015 then
					ohash[.i]_.ohash[.i]+.cchar+1^18;

				firstchar_.firstchar+1;
				if .screenpos leq 132 then begin
				    temp_.screen[.i,.screenpos];
				    if (not .earlyzap) and
				    (.temp neq "?M") and
					((.temp eql "_")
					or (.cchar eql "_")
					or (updatecursor(.cchar,1)  neq 2)
					or (updatecursor(.temp,1)  neq 2))
					then begin
					    earlyzap_1;
					    if .physcreenpos lss .linesz then
						goxy (.physcreenpos,.tline)
					    else goxy (.linesz,.tline);
					    clearline();
					    incr temp from .screenpos to 132
						do screen[.i,.temp]_13;
					end;
				    screen[.i,.screenpos]_.cchar;
				    screenpos_.screenpos+1;
				end;
				if .cchar eql #015  then begin
				    if .mustclear then begin
					incr temp from .screenpos to 132 do
					    screen[.i,.temp]_13;
					if .physcreenpos lss .linesz then
					    goxy (.physcreenpos,.tline)
					else goxy (.linesz,.tline);
					clearline();
				    end;
				    flubfr();
				    exitloop[1];
				end;
				! (done with the line)
				!keep pos known
				if .physcreenpos lss .linesz then
					goxy (.physcreenpos,.tline) !and place
				else goxy (.linesz,.tline);
				if .physpos lss .linesz then
					writeloss (.cchar);
				physcreenpos_.physpos;
!				end; !line print loop
			end; !else clause
		end; ! intraline while loop
		linmax[.i]_.curlm;     !now store it.
	end; !loop for whole screen (i)

if .mushed gtr 70 then
    if .percnt neq 100*.lowend/(.lowend+.hend-.hbot) then hitsts_1;

if .hitsts eql 1 then begin
    dostatus();
    defwindow(1,.wndorg[.curwin],.linesz,.wndsiz[.curwin])
end;

!here we shoul update the cursor to the place where it should be.

if .npos lss .linesz then goxy (.npos,.scroff+.curline)
	else goxy (.linesz,.scroff+.curline);

1 !return a 0 if succeeded completely.
end; ! routine
global routine metao = begin
    if .silent then silent_0
    else silent_1;
end;
end eludom !the whole enchilada
