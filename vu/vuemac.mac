Title	Vuemac Macro support subroutines
Subttl	(TTYCOR) ;Copyright 1979 by Michael L. Kazar
Subttl	Revised by Carl A Baltrunas - Gallaudet College - 1980/CB
Subttl	Revised by Carl A Baltrunas - Tymshare Inc - 1980-1/CB
Subttl	(VUEMAC) by Carl A Baltrunas - Tymshare Inc - May 1980/CB

	VUEWHO==0	;Who last edited
	VUEVER==1	;Major version
	VUEMIN==0	;Minor version
	VUEEDT==0	;Edit level (# of edits)

	loc	137	;.jbver
	Byte (3) vuewho (9) vuever (6) vuemin (18) vueedt
	reloc

	Twoseg		;[CB]
	Reloc	400000	;[CB]

vanilla=1
ftcommand=1
ifndef ftdebug,<Ftdebug==-1>	;	Allow (VUE) & (YEUX) as well as (SYS)
	radix	^d10

s=0
v=3
a=4
b=5
c=6
d=7
e=10

external ctrlat,ctrla,ctrlb,ctrld,ctrle,ctrlf,ctrlg,rubout,ctrlk
external ctrll,ctrln,ctrlo,ctrlp,ctrlq,ctrlr,ctrls,ctrlt,ctrlu,ctrlv
external ctrlw,ctrly,ctrlz,metab,metac,metad,metadel,metaf,metaj,metap
external metaq,metar,metav,metaw,metaz,ctrlxe,ctrlxf,ctrlxm,ctrlxt
external metacn,metacp,metagt,metalt,metaquest,ctrlxr,ctrlxv,ctrlxw
external ctrlxx,ctrlxz,metarb,metalb,writeloss,writestring,silent
external ToStatus,ToPrompt,echord,zapmac,therep,horizspace
external munchline,setchar,getchxr,delforward,delback,insertchar
external whitespace,wbreak,ctrln2,ctrlp2,pbreak,updatecursor,initdispat
external forceinput,ttyzap,clearscreen,moveback,moveforward,gppn
external filescan,open,close,dmpin,dmpout,combuf,getstr,read
external uctrlo, ctrlxr,rptr,goxy,ttyzap,metam,corecheck,pageon,pageoff
external rstk,MaxPPerFrame,parmarray,popio,cstk

	entry fef,fen,wrnum,clulin,clupos,autblk,cluhac,imout,realup,flush
	entry scrsze,screen,curline,dskbuf,filblk,fixfil,ppn,cucl,defdsk,base
	entry comchar,newcount,repcount,coresize,readch,lowend,linesz,puntsos
	entry ttytyp,sst,mark,maxss,muncho,munchi,ocline,scrmod,muline,dbx
	entry hend,ttyidle,reset,echof,hbot,p,dskbfh,putch,flubfr,modpos
	entry csnum,qreg,dorescan,setint,setlab,lookop,hitsts,submod,vuetyp
	entry physpos,physlin,tabsize,distbl,bfblk1,bfblk2,scroff,scrlen
	entry jbstr,relcor,getwid,getlen,gt10,rsrchr,rsrptr,rsrstk
	entry ttype,tspeed
	Radix ^d8


Opdef	Auxcal	[042000,,0]
Opdef	Setmod	[Calli -26]
Opdef	Putlsa	[Calli -63]

.Axi8c==0	; Input character image and wait
.Axi8s==1	; Input character image and skip
.Axsic==10	; skip if character
.Axobr==16	; Read Output baud rate code
.Axwid==27	; Terminal Width
.Axics==45	; input character and skip
.Axost==52	; Outstr to Aux port
.Axrvx==55	; reverse ^S/^Q enable
.Axcfs==64	; Setmod for Aux port

io.nee==1b27	; no-escape-echo bit
io.nec==1b28	; no-echo bit
io.fcs==1b29	; full-character-set bit

.ioimg==10	; image mode io
.iobin==14	; binary

.Gtfpn==-25	; Frame PPN
.Gtnam==3	; Name!
	Reloc	0	;[CB]
	radix 8

bufptr: xwd 10700,ttybuf-1

	Radix	^d10

scroff: 0	;offset of buffer in screen.
scrlen: ^d18

ttybfs=100		;tty buf size in words.
ttybuf: block ttybfs
ttysfd: 5*ttybfs-1	;init it correctly.
qspace: block 26*100 ; 500 chars by 26 macros.

finver: 1
distbl: block 512	; Here is the standard vue environment table !

physpos: 1
physlin: 1
tabsize: 8
csnum: 0
cluhac:	0
sst: block 132
linesz: 79
clulin:	0
clupos: 0
hitsts:	1
scrmod: 1
muline: 1
ocline: -1
comchar:	0
newcount:	0
repcount:	0
lowend:		0
hend:		0
hbot:		0
p:		0
save: 0
mark: 0
scrsze:	18
ttytyp: 0
vuetyp:	0			;VUE type
submod:	0			;SUB Mode
ttype:	0			;[CB] So status line can see terminal type
tspeed:	0			;[CB] So padding can be done by tty speed
ppn: 0
curline:	1
flush:	0
base:	0
defdsk: sixbit/dsk/

bfblk1:	sixbit	/dsk/
	sixbit	/main/
	sixbit	/vue/
	0
	0
	0
bfblk2:	sixbit	/dsk/
	sixbit	/main/
	sixbit	/vue/
	0
	0
	0

; Here is the end of the standard vue environment.

modpos: 18
bakx: sixbit/bak/
newblk: block	4
filblk: sixbit/dsk/
	sixbit/delete/
	0
	0
	0
	0
autblk: sixbit/dsk/
	sixbit/fine/
	sixbit/tmp/
	0
	0
lb:	block	4		;[wrs] short lookup for deletions
maxss: 30
screen:	block	31*132		;[CB] Change 25==>31 for gtvt06
dskbfh:	block	3
dskbuf:	block	132
	radix	8

tymtty:	block	1		;[CB @ Tymshare] Remember tty characteristics
inirvx:	block	1		;[CB @ Tymshare] Remember tty characteristics

rsrptr:	point	7,rsrbuf	;pointer into buffer
rsrpnt:	point	7,rsrbuf	;pointer into buffer
rsrcnt:	block	1		;count character space
rsrchr:	block	1		;Rescan break character, -;(
rsrwrd:	block	1
rsrwpt:	point	6,rsrwrd
rsrbuf:	block	<^d135*2>/5	;Room for 2 lines at 132 chars
	rsrend=.
	rsrmax=<rsrend-rsrbuf>*5 ;# characters maximum

;cstk:	block	35		;max depth of  macro calls.
rsrstk:	block	1		;place for rescan pointer
zapdev:	0
	sixbit/dsk/
	0

runsos:	sixbit/sys/		;what to do  (run) when we give up!
	sixbit/sos/
	0
	0
	1,,4
	0

place:	0
saveds:	block	4	;register save area.
lblk:	block 20
dblk:	block 10

	Reloc	400000	;[CB]


coresize:
	move	a,s ;can't indirect through 0.
	move	v,121 ;save jobff
	move	b,-1(a) ;get the length.
	addm	b,121 ;bump jobff
	addb	b,44 ;get new size
	calli	b,11 ;get the core.
	jrst	E$$NEC			;[CB] Give error message & exit
	popj	s, ;go home.

relcor:	move	a,hend			;get hend
	idivi	a,5
	addi	a,100
	add	a,p			;a=highest address used by vue.
	movem	a,121			;set jobff
	ori	a,777
	movem	a,44			;set this number too.
	calli	a,11			;get the core
	jrst	E$$NEC			;[CB] Give error message and exit
	popj	s,

;
; next is the readch routine. reads a char and returns it in v.
;
fromfl:	push	s,[4]
	pushj	s,read
	pop	s,a
	skipge	v
	jrst	popout
	cain	v,35
	jrst	rmacro
	cain	v,0
	jrst	fromfl
	caie	v,15		;skip if a carriage return
	cain	v,12		;or a line feed.
	jrst	fromfl
	cain	v,"\"
	jrst	specl
	popj	s,
specl:	; Here for ?m, ?j, ?? and ?@  for <cr>, <lf>, ? and <null>
	push	s,[4]
	pushj	s,read
	pop	s,a
	cain	v,"?"		; a ?
	  popj	s,		; return with this one
	cail	v,"a"		; Case map all to upper
	caile	v,"z"		; ... only alpha for now
	  caia			; no change, skip
	movei	v,-40(v)	; Map them
	movei	v,-100(v)	; Now make them control characters
	skipge	v
	jrst	popout
	popj	s,
popout:	pushj	s,metap
	jrst	readch		;now retry.
readch:
	move	a,csnum		;the number of the char stack to use -1=tty
	skipn	cstk(a) 	;if ptr is 0 then tty io
	jrst	ttm
	skipge	cstk(a) 	;skip if non-negative
	jrst	fromfl
	ildb	v,cstk(a) 	;use the appropriate stack ptr.
	cain	v,35
	jrst	rmacro
	popj	s, 		;go home again

ttm:	hrroi	a,.Axi8c	; Inchrw equivalent
	Auxcal	a,v		; (To preserve Image mode)
	  jrst	[movei	a,1
		sleep	a,
		jrst	.-2]	; Loop (waiting for port)
	trz	v,200		; zap parity
	cain	v,35
	jrst	rmacro
	popj	s, 		; and go home.

popmac:	pushj	s,popio		;undo the attach
	jrst	readch		;and really get a char.

retq:	movei	v,35
	popj	s,

punt:	pushj	s,ctrlg
	movei	v,7
	popj	s,


rmacro:	;come here to attach a reader macro to the stuff.
	pushj	s,readch		;recurse to get what number.
	cain	v,":"
	jrst	retq
	cain	v,7
	jrst	punt
	cain	v,"r"			;the emergency pop
	jrst	popmac
	subi	v,"0"			;to binary form.
	move	a,csnum
	imuli	a,MaxPPerFrame		;calc. offset.
	add	v,a			;this is the offset.
	addi	v,parmarray		;this is the base.
	move	v,0(v)			;this is the actual data.
	aos	csnum			;begin of io attach push.
	move	a,csnum
	movem	v,cstk(a)
	move	a,rptr
	movei	v,1
	movem	v,rstk+1(a)
	movei	v,2
	addm	v,rptr
	jrst	readch

ttyidle:
ife v,<printx ??? My god! How can SKIPA V,[1] work if V=0 ???>
	hrroi	v,.Axsic
	Auxcal	v,
ifn v,<	 skipa	v,[1]>
ife v,<	 tdza	v,v
	 caia
	 aosa	v>	; if v=0 then simulate "skipa v,[1]"
	 setz	v,
	popj	s,



reset:	calli 0,0 ;reset
	MOVSI	a,'UTD'		; For file hackers!!! this is VUE - 10101
	Addi	a,10101
	PUTLSA	a,		; make a stream record
	 JFCL
	HRROI	a,.GTFPN	; get FPN
	GETTAB	a,
	  Jrst	Rested		; Huh? Bye!
	Movsi	b,1		; Build these too!
	Rot	b,24		; Put the 4 into position
	Tlo	b,1		; Set bits for 1,,4
	CAMN	a,b		; is it a legal copy?
	 POPJ	s,		; YES!
ifn ftdebug,<
	Movsi	b,6777		; get first part 3,3774...shifted some
	Addi	b,022000	; now add next part
	Rot	a,12		; shift test part
	CAME	a,b		; DEBUG COPY?
	CAMN	a,[6777,,024000]; NEW VERSION?
	  POPJ	s,		; Yep!
	Rot	a,-12		; Move everything back!
	>

	MOVEM	a,LB+3		; Fill in FPN of this copy
	OPEN	[ 17
		  sixbit "DSK"
		  xwd 0,0]
	  Jrst	Rested
	HRROI	a,.GTNAM	; get name
	GETTAB	a,
	  Jrst	Rested
	MOVE	b,[point 18,[sixbit /LOWSHR/
			     sixbit /HGHSAV/
			     sixbit /SWR/]]
Vuecpy:	MOVEM	a,LB+0
	Ldb	c,b		; get one of LOW SHR HGH SAV SWR 0
	Jumpe	c,Notvue
	Movsm	c,LB+1
	LOOKUP	LB
	 JFCL
	SETZM	LB+0		; clear name
	RENAME	LB
	 JFCL
	Jrst	Vuecpy

Notvue:	RELEAS
Rested:	hrroi	a,6	; .Gtprv
	gettab	a,	; ..Read Frame priv word
	  setz	a,	; Null if fails.
	trne	a,1b21	; JP.TYM
	popj	s, ;go home
	lsh	a,-7	; shift over for the mode!
	andi	a,3	; now we have them
	move	a,[sixbit /EDIT10/	; PDP-10 .JPMPD
		   sixbit /EDITOR/	; XEXEC  .JPMXE
		   sixbit /EDITOR/	; XEXECJ .JPMXJ
		   sixbit /EDITOR/](a)	; SUDS   .JPMSU
	movem	a,runsos+1		;Now store the default!
	jrst	punted



echof:	seto	a,			; Get the tty characteristics
	getlch	a			; Of your own port
	movem	a,tymtty		; Remember them
	tlo	a,220			; Magic bits NFC!NCM
	setlch	a			; Now setup special ones
	hrroi	a,.Axcfs		; Now setup port status
	Auxcal	a,io.nee!io.nec!io.fcs!.iobin
	hrroi	a,.Axrvx		; ^S/^Q
	setzm	inirvx			; turn it off and save it
	Auxcal	a,inirvx
	Setom	tspeed			; Get the terminal speed
	hrroi	a,.Axobr		; for output anway.
	Auxcal	a,tspeed		; and save it for later
	popj	s,

echon:	pushj s,flubfr		;make sure everything is gone
	move	a,tymtty	; Remember these characteristics?
	setlch	a		; Now set them back
	hrroi	a,.Axrvx	; ^S/^Q
	push	s,inirvx	; Make sure this doesn't get clobberred
	Auxcal	a,inirvx	; restore it
	pop	s,inirvx	;  ...
	popj s,

fixfil:	move	a,filblk
	movem	a,zapdev+1
	open	3,zapdev
	  jrst	E$$COD			; Can't Open Device
	move	a,filblk+1 		; get the file name.
	movem	a,newblk
	move	a,bakx
	movem	a,newblk+1 		;for the lookup
	move	a,ppn 			; the ppn
	movem	a,newblk+3 		; again for the lookup.
	setzm	newblk+2
	lookup	3,newblk
	jrst	renfoo
	setzm	newblk+3		;lookup breaks this field.
	setzm	newblk+2 		; should be zero
	setzm	newblk+1 		; why not.
	setzm	newblk 			; prepare to wipe file.
	rename	3,newblk
	skip				;never skips
renfoo:	move	a,filblk+2 		; get the extension
	movem	a,newblk+1 		;and store it.
	move	a,ppn 			;get the ppn again
	movem	a,newblk+3
	move	a,filblk+1 		;the file name
	movem	a,newblk
	setzm	newblk+2 		;just in case.
	lookup	3,newblk 		;for the rename
	jrst	jrsap 			;just reset and popj
	move	a,bakx 			;new file name
	movem	a,newblk+1 		;extension
	move	a,ppn 			;get the ppn
	movem	a,newblk+3 		;because lookup broke it.
	setzm	newblk+2
	rename	3,newblk
	skip				;never skips, its a no-op.
jrsap:	close	3,
	release	3,
	setzm	filblk+3
	hllz	a,filblk+2 		;preserve only the extension
	movem	a,filblk+2
	popj	s, 			;go home.

puntsos:pushj	s,ttyzap
	pushj	s,fen
punted:	movsi	a,1
	hrri	a,runsos
	run	a,
	  halt	.

cucl:	movsi	a,1
	hrri	a,rundat
	run	a,
	  halt	.

rundat:	sixbit/sys/
	sixbit/rpg/
	0
	0
	1,,4
	0
munchi:
	move b,s
	move b,-1(b) ;get byte ptr.
	movei d,1
gloop:	sosge dskbfh+2 ;decrement byte count
	jrst getbf ;if buffer empty
	ibp dskbfh+1		;increment it first.
	move c,@dskbfh+1	;get the pointer to the word.
	trnn c,1
	jrst asos
	movni c,6		;number of chars to be zapped.
	addm c,dskbfh+2		;decrement the count.
	aos dskbfh+1	;bump the pointer
	ibp dskbfh+1
asos:	ldb c,dskbfh+1 ;get a byte
	cain c,0
	jrst gloop ; if a null
	cain c,12 ; ctrlj
	jrst gloop ;if a line feed.
	idpb c,b ;dump it in a the place.
	movei d,1
	addm d,lowend
	move e,lowend
	addi e,20
	camge e,hbot
	jrst gloop
	movem b,save
;	push s,[^d512]
;	pushj s,coresize
;	move b,save
;	pop s,d
;	movei d,^d2560
;	addm d,hbot
;	addm d,hend
	pushj s,corecheck
	move b,save
	movei d,1
	jrst gloop

getbf:	in 2,
	 jrst gloop ;no errors or anything.
	popj s, ;else go back home, we are done.

ret1:	movei	v,1
	popj	s,
ret0:	setz	v,
	popj	s,
muncho:
	move c,s
	move a,-1(c) ;ptr
	move b,-2(c) ;length
ploop:	sosge b
	jrst	ret1
	caie c,15 ;carriage return was last
	jrst reg
	movei c,12 ;get a line feed
	jrst regpl
reg:	ildb c,a ;get the byte
regpl:	sosg dskbfh+2 ;buffer full?
	jrst putbf ;dmp it first
putc:	idpb c,dskbfh+1 ;dump it in buffer
	cain c,15 ;cr?
	addi b,1 ;if so
	jrst ploop
putbf:	out 2,
		jrst putc ;no errors, go home.
	jrst	ret0	;write failed.
	jrst putc

putch:	skipe silent
	popj s,
	sosge ttysfd	;tty size field.
	pushj s,flubfr	;if off then flush the buffer.
	move a,s
	move a,-1(a) ;get the actual character.
	idpb a,bufptr
	popj s, ;go home.

flubfr:	setz a, ;zap a
	idpb a,bufptr
	movei a,ttybuf-1
	hrli a,10700
	movem a,bufptr
	movei	a,5*ttybfs-1	;buffer size less one for the null.
	movem	a,ttysfd	;restore the count.
	hrroi	a,.Axost	;[CB] Output String to aux-port
	Auxcal	a,ttybuf	;[CB] (so Image mode won't be killed)
	popj s,

qreg:
	movei v,qspace-1
	hrli v,10700
	move a,s
	move a,-1(a) ;get the char
	subi a,"a"
	imuli a,^d100
	add v,a
	popj s,

dorescan:
	rescan
	skpinl			;Magic rescan sequence
	popj s,			;RESCAN flopped
ifn ftcommand,<
reresc:	movei b,6
	setzm	rsrwrd
	move	a,[point 6,rsrwrd]
	movem	a,rsrwpt
>
rescn:	hrroi	a,.Axi8s	;Look for a filename argument
	Auxcal	a,a		; (Use Aux port so won't kill image mode)
	 skipa
	  trza	a,200
	popj s,			;Flopped:  no hyphen
	caie	a,"("		;[CB @ GC] *** Allow "(" since monitor does
	cain	a,";"		;for visit file
	jrst	vfile
	cain	a,"!"		;for old buffer
	jrst	obuff
ife ftcommand,<
	caie	a,"-"		;[CB] Hack attack
>
ifn ftcommand,<
	cain	a,"-"
	  jrst	rfile		;for read file
	cail	a,"a"
	caile	a,"z"
	  caia
	movei	a,-40(a)
	movei	a,-40(a)	;make sixbit
	 jumple	a,restst	;test word for monitor command
	sojle	b,rescn
	idpb	a,rsrwpt	;save the character
>
	jrst	rescn		;Look again
rfile:	pushj	s,ctrlxr	;Found the filename arg, process it
lrt:
	hrroi	a,.Axi8s	;eat the line feed if we can
	Auxcal	a,a		; (Use Aux port so won't kill image mode)
	 skipa
	  trza	a,200
	popj	s,
	popj	s,
vfile:	pushj	s,ctrlxv
	jrst	lrt		;eat the line feed if we can.
obuff:	pushj	s,uctrlo
	jrst	lrt		;eat the line feed if we can.
ifn ftcommand,<
restst:	caige	b,0
	  setz	b,
	imuli	b,6
	seto	a,
	lsh	a,(b)
	move	b,[sixbit/vue/]
	and	a,b
	camn	a,rsrwrd
	  jrst	rfile
	move	a,[sixbit/ct4/]
	camn	a,rsrwrd
	  jrst	rfile
	move	a,[sixbit/vue/]
	camn	a,rsrwrd
	  jrst	rfile
	jrst	reresc
> ; end ifn ftcommand

setint:	popj s,

setlab:	movem s,saveds
	movem 1,saveds+1
	movem 2,saveds+2
	movem 3,saveds+3
	move a,s
	move a,0(a) ;place to go to
	movem a,place
	movei a,readr
	movem a,124 ;reenter address.
	popj s, ;go home


ccintc:	pushj	s,ttyzap
	push	s,[1]
	move	a,modpos
	addi	a,2
	push	s,a ;push the argument .scrsze+1
	pushj	s,goxy
exerr:	pushj	s,fen	;turn the fe back on.
	exit	1,
readr:	setz	a,
	movem	a,rptr ;rptr_0 (pop their stack)
	movei	a,1
	movem	a,repcount
	setz	a,
	movem	a,csnum ;csnum_-1 (tty input)
	move	s,saveds
	move	1,saveds+1
	move	2,saveds+2
	move	3,saveds+3
	pop	s,a
	pushj	s,fef	;turn off the fe again.
	jumpa	@place

realup:	move	a,s
	move	a,-1(a)	;get the first argument
	lookup	2,0(a)	;lookup on the block.
	jrst	realfl	;real failed to find it.
	movei	v,1	;otherwise return true.
	popj	s,
realfl:	movei	v,0	;failed
	popj	s,

lookop:	move	a,filblk+4	;ppn
	movem	a,lblk+1
	move	a,filblk+1	;filenam
	movem	a,lblk+2
	move	a,filblk+2	;extension
	movem	a,lblk+3
	movei	a,17
	movem	a,lblk
	lookup	2,lblk
	jrst	llost		;lookup failed.
	movsi	a,'dsk'	; Use DSK in all cases.

	movem	a,filblk
	movei	v,1		;mark it as winning.
	popj	s,
llost:	setz	v,
	popj	s,

getwid:	hrroi	a,.axwid	; Line width
	seto	v,		; Read my port
	auxcal	a,v		; Value returned in v
	popj s,

getlen:	seto	v,	; Tymcom-X doesn't do this at all
	popj s,

fen:	pushj s,echon		;[CB @ GC] First flubfr then etc...
	jrst pageoff		;[CB @ GC] Reset physical pagesize & return

fef:	pushj s,echof
	jrst pageon		;[CB @ GC] Turn on pageing and return

imout:	pushj	s,flubfr	;flush the output buffer.
	move	4,0
	move	4,-1(4)		;get the argument
	ioneou	4
	popj	s,

wrnum:	move	4,0		;for indexing.
	move	4,-1(4)		;the argument.
	subi	4,1		;useful. converts to 0 origin.
	move	6,ttytyp	;get the terminal type.
	caie	6,^d10		;is the terminal a vt100?	[cb]
	cain	6,^d14		;is it a hp19
	jrst	heath		;for now, can do better.
	caie	6,^d23		;is it a hp2621?
	cain	6,7		;hp 2648
	jrst	heath		;two of a kind I guess.
	caie	6,^d15		;dm1520
	cain	6,^d16		;act4
	jrst	binout
	cain	6,^d21		;mime4
	jrst	binout
	cain	6,1		;superbee
	jrst	superb
	cain	6,6		;6is concept 100.
	jrst	concep		;the concept 100.
	idivi	4,12		;divide by 10. 2 has x/10, 3 has rem.
	lsh	4,4		;shift l
	add	5,4		;now r2 has bcd version.
	pushj	s,flubfr	;write out lines.
	ioneou	5		;image mode.
	popj	s,		;return.
concep:	addi	4,40		;add thirty-two
	push	s,4
	pushj	s,putch
	pop	s,a
	popj	s,
binout: push	s,4
	pushj	s,imout
	pop	s,a
	popj	s,
superb:	move	6,4		;save a copy thereof.
	push	s,["0"]
	pushj	s,putch
	pop	s,a
	idivi	6,12		;calculate place to go.
	addi	6,"0"
	addi	7,"0"
	push	s,6
	pushj	s,putch
	pop	s,a
	push	s,7
	pushj	s,putch
	pop	s,a
	popj	s,

heath:	move	6,4		;save a copy thereof.
	idivi	6,12		;calculate place to go.
	addi	6,"0"
	addi	7,"0"
	cain	6,"0"
	jrst	zersp
	push	s,6
	pushj	s,putch
	pop	s,a
zersp:	push	s,7
	pushj	s,putch
	pop	s,a
	popj	s,

jbstr:	move	a,s
	hrrz	a,-1(a)	;get the argument
	hrli	a,3	;get it right
	jobstr	a,
	jrst	E$$JUF
	popj	s,

dbx:	exit	1,
	popj	s,

gt10:
ifn vanilla,<
	move	v,[sixbit/pseudo/]
>
	popj	s,

E$$COD:	Outstr	[Asciz\
?
?FINCOD	Cannot Open Device for file rename(s) - Please recover with Olde buffer
\]
		Jrst	exerr			; Exit

E$$NEC:	Outstr	[Asciz\
?
?VUENEC Not enough core to edit file
\]
	jrst	exerr

E$$JUF:	Outstr	[Asciz\
?
?VUEJUF	Jobstr UUO failed - Please see a systems programmer
\]
	jrst	exerr


End
   