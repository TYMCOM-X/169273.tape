module vue(timer=external(six12),stack=own(stack,2000),ccl) = begin

!Copyright 1979 by Michael L. Kazar

macro iudent=(owns)$;
macro spacect=(owns+1)$;
macro tabwidth=(owns+2)$;
macro indend=(owns+3)$;
macro commentpos=(owns+4)$;

bind twenex=0;
bind extra = 100;

structure based[i] = (@.based+.i)<0,36>;
structure odas[i] = .odas + .i; !based at zero array
structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;

local qbp;

external fef,fen,ttyini,clulin,cluhack,cclstuff,cclmultix,writestring,gettty;
!front end command stuff and ccl linkage.
external mark,screen,physline,physpos,updatecursor,filblk,time,date,ttyzap;
external scrmod,muline,ocline,flubfr,csnum,qreg,newcount,allmod,curbuf;
external moveforward,moveback,quit,metar,metaq,clearline,defdsk,bufini;
external metalb,metarb,metaz,ctrlz,metaquest,ToPrompt,physlin;
external hitsts,gppn,bfblk2,getstr,winit,fini,therep,relcore;
external xeflag,owns,hatuvl,modpos,exini,silent,freestk,freezone,errstr;
external sosmod;


bind kilsiz=5000;
own kilbuf[kilsiz],killen,laskil,lasmov,kilptr,pcolumn;

global XPrefix="?X";
global MetaPrefix=#033;
global EscValue=#033;
global bind maxcalls=100;
global rstk[MaxCalls*2+2],callchar;
global cstk[MaxCalls+1];
map odas cstk;
map tdas screen;
map odas rstk;

external fixfil,ppn,cucl,writeloss,comchar,repcount,maxss,setint,flush;
external reset,coresize,lowend,hend,hbot,clearscreen,p,echof,curline,base;
external physpos,goxy,scrsze,readch,filescan,dorescan,setlab,discat;
external buffers,dskbuf,dskbfh,open,lookop,enter,munchi,muncho,close;
external autoloss,metaj,distbl,initdispatch,combuf;

external repcount,comchar;
external redisp,ttyidle,ctrll,getchxr;

forward ctrla,ctrlb,ctrld,ctrle,ctrlf,ctrlg,ctrlk,ctrln,ctrln2;
forward ctrlo,ctrlp,ctrlp2,ctrlq,rubout,ctrlxm,ctrlxr;
forward insertchar,commonwrite,ctrlxs,wbreak,ctrlxx,delforward;
forward metacn,metacp,metaw,metab,munchnnl;

global rptr,vecadr,autoinc,autotime,autowrit,cclflag;

global routine echord = begin local tp;
	tp_readch(flubfr()); ! read a character
	if .tp eql #177 or .tp eql #010 or .tp eql #007 then begin
		flush_1; !mark it as a loss.
		writestring(plit asciz 'Aborted')
		end;
	writeloss(.tp); ! print it out.
	return .tp;
	end;

global routine metalt = begin
    moveback (.lowend-1);
    muline_1;
    scrmod_1;
    if .curline lss 1 then curline_1;
end;


global routine metagt = begin
	muline_1;
	scrmod_1;	!force a redisplay.
	moveforward (.hend-.hbot);
	if .curline gtr .scrsze then curline_