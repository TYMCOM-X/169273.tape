BEGIN "genbas"
  REQUIRE "{}()" DELIMITERS;
  DEFINE !              =       "COMMENT";      ! Make "!" mean "COMMENT";
!
!
!************ D A T A    D E F N S . **********
!
!
!                                                               ;

  DEFINE prgmversion    =       """1.0""";      ! This program's current
                                                     version number;
                                                ! Any updates and revisions
                                                     to this program should
                                                     recorded here;
  DEFINE crlf           =       "('15&'12)";    ! Normal line terminater;
  DEFINE maxdlv11jcount  =       "4";
  DEFINE maxdl11count   =       "16";
  DEFINE nodename       =       "1";            ! This node's name (number);
  DEFINE nodetype       =       "2";            ! "BASETYPE" or "SATTYPE";
  DEFINE clockspeed     =       "3";            ! Line frequency clock (50/60);
  DEFINE nodebusstype   =       "4";            ! Q-buss or Unibus ?;
  DEFINE nodeeisflag    =       "5";            ! Does this node have eis?;
  DEFINE hosttype       =       "6";            ! "X" or "11" currently;
  DEFINE kmcflag        =       "7";            ! If hosttype=X then specifies
                                                     if KMC hardware exist;
  DEFINE ostype         =       "8";            ! "RSTS","RSX", & "TYMSHR";
  DEFINE dl11count      =       "9";            ! Number of dl11 ports in node;
  DEFINE dlv11jcount    =       "10";           ! Number of dl11j ports;
  DEFINE dz11count      =       "11";           ! Number of dz ports in node;
  DEFINE wiringmode     =       "12";           ! "HW" or "DU" currently;
                                                ! ** Currently not used;
  DEFINE baudetectype   =       "13";           ! "TID" or "BCR" currently;
                                                !  ** Currently not used;
  DEFINE breaklogoff    =       "14";           ! Specifies if tty port should
                                                    disconnect on breakkey;
  DEFINE tymnetlink     =       "15";           ! Does a TYMNET gateway exist?;
  DEFINE neighborname   =       "16";           ! If a TYMNET gateway exist,
                                                     the neighbor node number;
  DEFINE tymnetbaud     =       "17";           ! "2400" or "4800" or "9600"
                                                     currently;
  DEFINE tymnetgroups   =       "18";           ! # of groups (16 channels) on
                                                     TYMNET sync line;
  DEFINE tymnetlinktype =       "19";           ! "SATLINK" or "NORMALLINK"
                                                     currently;
  DEFINE dutype         =       "20";           ! DUP or DU?;
  DEFINE hostname       =       "21";           ! Our host's name;
  DEFINE answerlistsize =       "21";           ! Current number of answers;
  STRING ARRAY answerlist [ 1:answerlistsize ]; ! This is where the data is;
 BOOLEAN dummyflag;                             ! Used to set tty uppercase;
!
!
!************ End Of Data Defns. **************
!
!
!
!
!
!
!************P R O C E D U R E   D E F N S. *************
!
!
!                                                               ;

BOOLEAN PROCEDURE yes(STRING prompt);           ! TRUE if yes, FALSE if no;
BEGIN "yes"
  STRING tempstring;                            ! TTY buffer;
  WHILE TRUE DO
    BEGIN
      PRINT(prompt);
      tempstring := INCHWL;
      IF (tempstring="Y") 
        THEN 
          BEGIN
            RETURN(TRUE);
            DONE
          END
        ELSE
          IF tempstring="N"
            THEN
              BEGIN
                RETURN(FALSE);
                DONE
              END
    END
END "yes";
STRING PROCEDURE space(INTEGER spacecount);
BEGIN "space"
  INTEGER index;
  STRING tmpstr;
  IF spacecount<=0
    THEN
      RETURN(NULL)
    ELSE
      BEGIN
        tmpstr := NULL;
        FOR index := 1 STEP 1 UNTIL spacecount DO
          tmpstr := tmpstr&'40;
        RETURN(tmpstr)
      END
END "space";
PROCEDURE printbanner;                          ! Print out prgm header;
BEGIN "printbanner"
  PRINT("++++++++  GENBAS --- PDP-11 BASE NODE GEN PRGM --- Version ");
  PRINT(prgmversion&" ---  ++++++++"&crlf)
END "printbanner";
PROCEDURE getnodename(STRING ARRAY answerlist);
BEGIN "getnodename"
  WHILE TRUE DO
    BEGIN
      PRINT("Node name [ 1 to 7777 octal ] = ");
      answerlist[nodename] := INCHWL;
      IF ((CVO(answerlist[nodename])>'0)AND(CVO(answerlist[nodename])<'10000))
        THEN
          DONE
    END
END "getnodename";
PROCEDURE getclockspeed(STRING ARRAY answerlist);
BEGIN "getclockspeed"
  WHILE TRUE DO
    BEGIN
      PRINT("Clock frequency [ 50 or 60 ] = ");
      answerlist[clockspeed] := INCHWL;
      IF ((EQU(answerlist[clockspeed],"50"))OR EQU(answerlist[clockspeed],"60"))
        THEN
          DONE
    END
END "getclockspeed";
PROCEDURE getnodebusstype(STRING ARRAY answerlist);
BEGIN "getnodebusstype"
  IF yes("Is this PDP-11 node a Q-buss machine [ Y,N ] ? ")
    THEN
      answerlist[nodebusstype] := "QBUSS"
    ELSE
      answerlist[nodebusstype] := "UNIBUS"
END "getnodebusstype";
PROCEDURE getnodeeisflag(STRING ARRAY answerlist);
BEGIN "getnodeeisflag"
  IF yes("Does this PDP-11 node have hardware eis [ Y,N ] ?")
    THEN
      answerlist[nodeeisflag] := "YES"
    ELSE 
      answerlist[nodeeisflag] := "NO"
END "getnodeeisflag";
PROCEDURE gethostname(STRING ARRAY answerlist);
BEGIN "gethostname"
  WHILE TRUE DO
    BEGIN
      PRINT("Host name [ 1 to 9999 ] = ");
      answerlist[hostname] := INCHWL;
      IF ((CVD(answerlist[hostname])>0)AND(CVD(answerlist[hostname])<10000))
        THEN
          DONE
    END
END "gethostname";
PROCEDURE gethosttype(STRING ARRAY answerlist); ! DEC X or DEC PDP-11?;
BEGIN "gethosttype"
  WHILE TRUE DO
    BEGIN
      PRINT("Host type [ X,11 ] = ");
      answerlist[hosttype] := INCHWL;
      IF EQU(answerlist[hosttype],"X") OR
         EQU(answerlist[hosttype],"11")
        THEN
          DONE
    END
END "gethosttype";
PROCEDURE getkmcflag(STRING ARRAY answerlist);
BEGIN "getkmcflag"
  IF yes("Is there a KMC unit [ Y,N ] ? = ")
    THEN
      answerlist[kmcflag] := "YES"
    ELSE 
      answerlist[kmcflag] := "NO"
END "getkmcflag";
PROCEDURE getostype(STRING ARRAY answerlist);      ! "RSTS" or "RSX" ?;
BEGIN "getostype"
  WHILE TRUE DO
    BEGIN
      PRINT("PDP-11 OS [ RSTS,RSX ] = ");
      answerlist[ostype] := INCHWL;
      IF EQU(answerlist[ostype],"RSTS") OR EQU(answerlist[ostype],"RSX")
        THEN
          DONE
    END
END "getostype";
PROCEDURE gettymnetlink(STRING ARRAY answerlist);
BEGIN "gettymnetlink"
  IF yes("Is there a TYMNET link [ Y,N ] ? = ")
    THEN
      answerlist[tymnetlink] := "YES"
    ELSE
      answerlist[tymnetlink] := "NO"
END "gettymnetlink";
PROCEDURE getdutype(STRING ARRAY answerlist);
BEGIN "getdutype"
  IF yes("Does this Unibus node have a DUP (as opposed to a DU) [ Y,N } ? ")
    THEN
      answerlist[dutype] := "DUP"
    ELSE 
      answerlist[dutype] := "DU"
END "getdutype";
PROCEDURE getdl11count(STRING ARRAY answerlist);
BEGIN "getdl11count"
  INTEGER mindl11count;
  IF EQU(answerlist[nodebusstype],"UNIBUS")
    THEN
      mindl11count := 1
    ELSE
      mindl11count := 0;
  WHILE TRUE DO
    BEGIN
      PRINT("Number of single line DL-11 modules [ "&CVS(mindl11count)&" to "&
                                               CVS(maxdl11count)&" ] = ");
      answerlist[dl11count] := INCHWL;
      IF ((CVD(answerlist[dl11count])>=mindl11count)AND(CVD(answerlist[dl11count])
                                              <=maxdl11count))
        THEN
          DONE
    END
END "getdl11count";
PROCEDURE getdlv11jcount(STRING ARRAY answerlist);
BEGIN "getdlv11jcount"
  INTEGER dl11joverlap;
  WHILE TRUE DO
    BEGIN
      PRINT("Number of Dlv-11J modules in node [ 0 to "&CVS(maxdlv11jcount)&" ] = ");
      answerlist[dlv11jcount] := INCHWL;
      IF (CVD(answerlist[dlv11jcount])>=0) AND (CVD(answerlist[dlv11jcount])<5)
        THEN
          BEGIN
            answerlist[dlv11jcount] := CVS(CVD(answerlist[dlv11jcount]));
            IF (CVD(answerlist[dl11count])>0)AND(EQU(answerlist[nodebusstype],
                                                     "QBUSS"))
              THEN
                BEGIN
                  IF (CVD(answerlist[dl11count]) MOD 4)>0
                    THEN
                      dl11joverlap := 1
                    ELSE
                      dl11joverlap := 0;
                  dl11joverlap := dl11joverlap+(CVD(answerlist[dl11count]) DIV
                                                    4);
                  IF (dl11joverlap+CVD(answerlist[dlv11jcount]))>maxdlv11jcount
                    THEN
                      PRINT("With "&answerlist[dl11count]&" DL-11's, you "&
                               "can only have "&CVS(maxdlv11jcount-dl11joverlap)
                               &" DL-11J's!  Try again please."&crlf)
                    ELSE
                      DONE
                END
              ELSE
                DONE
          END
    END
END "getdlv11jcount";
PROCEDURE getdz11count(STRING ARRAY answerlist);
BEGIN "getdz11count"
  WHILE TRUE DO
    BEGIN
      PRINT("Dz-11 modules [ 0 to 4 ] = ");
      answerlist[dz11count] := INCHWL;
      IF (CVD(answerlist[dz11count])>=0) AND(CVD(answerlist[dz11count])<5)
        THEN
          BEGIN
            answerlist[dz11count] := CVS(CVD(answerlist[dz11count]));
            DONE
          END
    END
END "getdz11count";
PROCEDURE getneighborname(STRING ARRAY answerlist);
BEGIN "getneighborname"
  WHILE TRUE DO
    BEGIN
      PRINT("Neighbor number [ 1 to 7777 octal ] = ");
      answerlist[neighborname] := INCHWL;
      IF (CVO(answerlist[neighborname])>'0) AND (CVO(answerlist[neighborname])<'10000)
        THEN
          BEGIN
            answerlist[neighborname] := CVOS(CVO(answerlist[neighborname]));
            DONE
          END
    END
END "getneighborname";
PROCEDURE gettymnetbaud(STRING ARRAY answerlist);
BEGIN "gettymnetbaud"
  WHILE TRUE DO
    BEGIN
      PRINT("TYMNET sync speed [ 2400,4800,9600 ] = ");
      answerlist[tymnetbaud] := INCHWL;
      IF (EQU(answerlist[tymnetbaud],"2400"))OR(EQU(answerlist[tymnetbaud],"4800"))OR
          (EQU(answerlist[tymnetbaud],"9600"))
        THEN
          DONE
    END
END "gettymnetbaud";
PROCEDURE gettymnetlinktype(STRING ARRAY answerlist);
BEGIN "gettymnetlinktype"
  WHILE TRUE DO
    BEGIN
      PRINT("TYMNET packet format [ ""N"" ormal,""S"" atelite ] = ");
      answerlist[tymnetlinktype] := INCHWL;
      IF EQU(answerlist[tymnetlinktype],"N") OR
         EQU(answerlist[tymnetlinktype],"S")
        THEN
          DONE
    END
END "gettymnetlinktype";
PROCEDURE getbreaklogoff(STRING ARRAY answerlist);
BEGIN "getbreaklogoff"
  IF yes("Disconnect on break key [ Y,N ] ? ")
    THEN
        answerlist[breaklogoff] := "Y"
    ELSE
          answerlist[breaklogoff] := "N";
END "getbreaklogoff";
PROCEDURE gettymnetgroups(STRING ARRAY answerlist);
BEGIN "gettymnetgroups"
  WHILE TRUE DO
    BEGIN
      PRINT("TYMNET groups [ 1 to 16 decimal ] = ");
      answerlist[tymnetgroups] := INCHWL;
      IF (CVD(answerlist[tymnetgroups])>0)AND(CVD(answerlist[tymnetgroups])<17)
        THEN
          BEGIN
            answerlist[tymnetgroups] := CVS(CVD(answerlist[tymnetgroups]));
            DONE
          END
    END
END "gettymnetgroups";
PROCEDURE bldconfigfile(STRING ARRAY answerlist);
BEGIN "bldconfigfile"
  INTEGER i,j,l,m,lin,dzsiz,n;
  STRING ARRAY dladdressvectbl[ 1:16 ];
  STRING ARRAY dzaddressvectbl[ 1:4 ];
  EXTERNAL BOOLEAN !SKIP!;
  OPEN(i := GETCHAN,"DSK",0,0,1,0,j,j);
  IF NOT !SKIP!
    THEN
      BEGIN
        PRINT("Cannot open ""DSK"" !");
        CALL(1,"EXIT")
      END;
  LOOKUP(i,"CG"&answerlist[nodename]&".MAC",j);
  IF NOT j
    THEN
      RENAME(i,NULL,0,j);
  ENTER(i,"CG"&answerlist[nodename]&".MAC",j);
  IF j
    THEN
      BEGIN
        PRINT("Cannot enter file name ""CG"&answerlist[nodename]&".MAC"" !");
        CALL(1,"EXIT")
      END;
  CPRINT(i,
".macro config                  ; Config file for node "&
                                        answerlist[nodename]&"  ."&crlf&
"       name    "&answerlist[nodename]&crlf&
"       define  jifsec,"&answerlist[clockspeed]&"."&crlf&
"       link    "&answerlist[hostname]&space(6-LENGTH(answerlist[hostname]))&",0,tf,31.,s,");
  IF EQU(answerlist[hosttype],"11")
    THEN
      CPRINT(i,"d")
    ELSE
      IF EQU(answerlist[hosttype],"X")
        THEN
          CPRINT(i,"f")
        ELSE
          BEGIN
            PRINT("Illegal host type """&answerlist[hosttype]&""" !");
            CALL(1,"EXIT")
          END;
  CPRINT(i,",<167770,330,5");
  IF EQU(answerlist[hosttype],"X")
    THEN
      BEGIN
        CPRINT(i,",128.");
        IF EQU(answerlist[kmcflag],"YES")
          THEN
            CPRINT(i,",kmc");
          CPRINT(i,">"&crlf)
      END
    ELSE
      CPRINT(i,">"&crlf);
  IF EQU(answerlist[tymnetlink],"YES")
    THEN
      BEGIN
        CPRINT(i,
"       link    tymnet,0,tf,32.,s,h,<"&answerlist[nodename]&",32.");
        IF EQU(answerlist[hosttype],"11")
          THEN
            CPRINT(i,",tpc");
        CPRINT(i,">"&crlf);
        CPRINT(i,
"               lnkh    "&answerlist[hostname]&","&answerlist[hostname]&crlf);
        CPRINT(i,
"               lnkl    "&CVS(16*CVD(answerlist[tymnetgroups]))&".,"&
                                answerlist[neighborname]&",");
        IF EQU(answerlist[tymnetbaud],"2400")
          THEN
            CPRINT(i,"1,")
          ELSE
            IF EQU(answerlist[tymnetbaud],"4800")
              THEN
                CPRINT(i,"2,")
              ELSE
                CPRINT(i,"4,");
        CPRINT(i,answerlist[tymnetlinktype]&",a,<160010,400,5>"&crlf);
        CPRINT(i,
"       dhost   tymnet"&crlf)
      END;
      CPRINT(i,
"dev st,200,<200,200>"&CRLF&"  soc 1."&CRLF&
"       hcl     A,<"&answerlist[hostname]&">"&crlf);
  dladdressvectbl[1] := "<177560,60>";
  dladdressvectbl[2] := "<176510,310>";
  dladdressvectbl[3] := "<176520,320>";
  dladdressvectbl[4] := "<176500,300>";
  dladdressvectbl[5] := "<176540,340>";
  dladdressvectbl[6] := "<176550,350>";
  dladdressvectbl[7] := "<176560,360>";
  dladdressvectbl[8] := "<176570,370>";
  dladdressvectbl[9] := "<176600,140>";
  dladdressvectbl[10] := "<176610,150>";
  dladdressvectbl[11] := "<176620,160>";
  dladdressvectbl[12] := "<176630,170>";
  dladdressvectbl[13] := "<176640,200>";
  dladdressvectbl[14] := "<176650,210>";
  dladdressvectbl[15] := "<176660,220>";
  dladdressvectbl[16] := "<176670,230>";


  dzaddressvectbl[1] := "<160100,410>";
  dzaddressvectbl[2] := "<160110,420>";
  dzaddressvectbl[3] := "<160120,430>";
  dzaddressvectbl[4] := "<160130,440>";


  FOR l := 1 STEP 1 UNTIL cvd(answerlist[dl11count]) DO
    CPRINT(i,
"Linx A,"&dladdressvectbl[l]&crlf&
"  Line "&cvs(l)&".,F,300,,TYM,CRT,ASC,"&answerlist[ostype]&",N,N,Y,N,"&
        answerlist[breaklogoff]&",HW,A,200"&crlf);
  lin := l - 1;
  IF cvd(answerlist[dlv11jcount]) > 0
    THEN
      BEGIN
        l := l + ( 4 - ( l MOD 4 ) );
        IF cvd(answerlist[dl11count]) = 0
          THEN
            l := 0;
        FOR m := 1 STEP 1 UNTIL cvd(answerlist[dlv11jcount]) DO
          FOR n := 1 STEP 1 UNTIL 4 DO
            BEGIN
              l := l + 1;
              lin := lin + 1;
              CPRINT(i,
"Linx A,"&dladdressvectbl[l]&crlf&
"  Line "&cvs(lin)&".,F,300,,TYM,CRT,ASC,"&answerlist[ostype]&",N,N,Y,N,"&
        answerlist[breaklogoff]&",HW,A,200"&crlf)
            END
     END;
  FOR l := 1 STEP 1 UNTIL cvd(answerlist[dz11count]) DO
    BEGIN
      CPRINT(i,
"Linx B,"&dzaddressvectbl[l]&crlf);
      IF equ(answerlist[nodebusstype],"QBUSS")
        THEN
          dzsiz := 4
        ELSE
          dzsiz := 8;
      FOR m := 1 STEP 1 UNTIL dzsiz DO
        BEGIN
          lin := lin + 1;
          CPRINT(i,
"  Line "&cvs(lin)&".,A,3,,TYM,CRT,ASC,"&answerlist[ostype]&",N,N,Y,N,"&
        answerlist[breaklogoff]&",HW,A,200"&crlf)
        END
    END;
  CPRINT(i,
".endm"&crlf);
  CLOSE(i);
  RELEASE(i);
  PRINT("Building CG file!"&crlf)
END "bldconfigfile";
PROCEDURE bldmacn11cmdfile(STRING ARRAY answerlist);
BEGIN "bldmacn11cmdfile"
  INTEGER i,j;
  EXTERNAL BOOLEAN !SKIP!;
  OPEN(i:=GETCHAN,"DSK",0,0,1,0,j,j);
  IF NOT !SKIP!
    THEN
      BEGIN
        PRINT("Cannot access ""DSK"" in MC   ! ");
        CALL(1,"EXIT")
      END;
  LOOKUP(i,"MC"&answerlist[nodename]&".CMD",j);
  IF NOT j
    THEN
      RENAME(i,NULL,0,j);
  ENTER(i,"MC"&answerlist[nodename]&".CMD",j);
  IF j
    THEN
      BEGIN
        PRINT("Cannot enter file ""MC"&answerlist[nodename]&".CMD"" !");
        CALL(1,"EXIT")
      END;
  CPRINT(i,
"CG"&answerlist[nodename]&"=XP,"&
        "CG"&answerlist[nodename]&",COMMON"&crlf&
"RU"&answerlist[nodename]&"=XP,"&
        "CG"&answerlist[nodename]&",RU"&answerlist[nodename]&",ROUTE"&crlf);
  CLOSE(i);
  RELEASE(i);
  PRINT("Building MC file!"&crlf)
END "bldmacn11cmdfile";
PROCEDURE bldroutefile(STRING ARRAY answerlist);
BEGIN "bldroutefile"
  INTEGER i,j;
  EXTERNAL BOOLEAN !SKIP!;
  OPEN(i:=GETCHAN,"DSK",0,0,1,0,j,j);
  IF NOT !SKIP!
    THEN
      BEGIN
        PRINT("Cannot access ""DSK"" in RU !");
        CALL(1,"EXIT")
      END;
  LOOKUP(i,"RU"&answerlist[nodename]&".MAC",j);
  IF NOT j
    THEN
      RENAME(i,NULL,0,j);
  ENTER(i,"RU"&answerlist[nodename]&".MAC",j);
  IF j
    THEN
      BEGIN
        PRINT("Cannot enter file ""RU"&answerlist[nodename]&".MAC"" !");
        CALL(1,"EXIT")
      END;
  CPRINT(i,
".MACRO ROUTE"&crlf&
"               node    "&answerlist[nodename]&crlf&
"               hpath   "&answerlist[hme]&",*"&crlf);
  IF EQU(answerlist[tymnetlink],"YES")
    THEN
      CPRINT(i,
"               hpath   tymnet,*"&crlf);
  CPRINT(i,
".ENDM"&crlf);
  CLOSE(i);
  RELEASE(i);
  PRINT("Building RU file!"&crlf)
END "bldroutefile";
PROCEDURE bldlink11cmdfile(STRING ARRAY answerlist);
BEGIN "bldlink11cmdfile"
  INTEGER i,j;
  STRING ext;
  EXTERNAL BOOLEAN !SKIP!;
  OPEN(i := GETCHAN,"DSK",0,0,1,0,j,j);
  IF NOT !SKIP!
    THEN
      BEGIN
        PRINT("Cannot access ""DSK"" in LK!!!");
        CALL(1,"EXIT")
      END;
  LOOKUP(i,"LK"&answerlist[nodename]&".CMD",j);
  IF NOT j
    THEN
      RENAME(i,NULL,0,j);
  ENTER(i,"LK"&answerlist[nodename]&".CMD",j);
  IF j
    THEN
      BEGIN
        PRINT("Cannot enter file ""LK"&answerlist[nodename]&".CMD""  !");
        CALL(1,"EXIT")
      END;
  IF equ(answerlist[nodeeisflag],"YES")
    THEN
      ext := ".OBJ"
    ELSE
      ext := ".NBJ";
  CPRINT(i,
"SV"&answerlist[nodename]&"/IMG/B:1000,MP"&answerlist[nodename]&"=CG"&
answerlist[nodename]&",RU"&answerlist[nodename]&","&crlf&"EXEC"&ext&",ERROR"&
ext&",PKT1"&ext&",PKT2"&ext&",PKT3D"&ext&",CMDTYM"&ext&",CMDS"&ext&","&crlf);
  IF cvd(answerlist[dz11count]) > 0
    THEN
      CPRINT(i,"AUTO13"&ext&",");
  CPRINT(i,
"TRM"&ext&",TRMF"&ext&",TRMP"&ext&",TRMT"&ext&",ZAPBUF"&ext&","&crlf&
"LNK1"&ext&",LNK2"&ext&",TYMA"&ext&",TYMB"&ext&",STATUS"&ext&","&crlf);
  IF equ(answerlist[ostype],"TYMSHR")
    THEN
      BEGIN
        CPRINT(i,
"LNKF"&ext&",LKHBS1"&ext&",LKHBS2"&ext&",LKHBS3"&ext&",");
        IF equ(answerlist[kmcflag],"YES")
          THEN
            CPRINT(i,
"LNKF2"&ext&","&crlf)
          ELSE
            CPRINT(i,
"LNKF1"&ext&","&crlf)
      END
    ELSE
      CPRINT(i,
"LKHTPC"&ext&",LNKD"&ext&",LKHTP1"&ext&",LKHTP2"&ext&",LKHTP3"&ext&",LNKRSP"&ext&","&crlf);
  IF equ(answerlist[tymnetlink],"YES")
    THEN
      IF equ(answerlist[dutype],"DUP")
        THEN
          CPRINT(i,"LNKHAP"&ext&",")
        ELSE
          CPRINT(i,"LNKHA"&ext&",");
  IF CVD(answerlist[dz11count]) > 0
    THEN
      CPRINT(i,"LINB"&ext&",");
  CPRINT(i,"LINA"&ext&",ONCE"&ext&",END"&ext&crlf);
  CLOSE(i);
  RELEASE(i);
  PRINT("Building LK file!"&crlf)
END "bldlink11cmdfile";
PROCEDURE cleanup;
BEGIN "cleanup"
  PRINT("Cleaning up!");
  CALL(1,"EXIT")
END "cleanup";
!
!
!
!    MAIN PROGRAM  ****************************************************;
!
!
!                                                                       ;
  dummyflag := TTYUP(TRUE);                     ! Set to uppercase (TTY);
  printbanner;                                  ! Print the program header;
  getnodename(answerlist);                      ! Obtain the node's name;
  getclockspeed(answerlist);                    ! Obtain the clock frequency;
  getnodebusstype(answerlist);                  ! Q-buss or Unibus?;
  getnodeeisflag(answerlist);                   ! Extended instruction set?;
  gethostname(answerlist);                      ! What host?;
  gethosttype(answerlist);                      ! What type host do we have?;
  IF EQU(answerlist[hosttype],"X")              
    THEN
      BEGIN
        getkmcflag(answerlist);
        answerlist[ostype] := "TYMSHR"
      END
    ELSE
      IF EQU(answerlist[hosttype],"11")
        THEN
          getostype(answerlist)
          ELSE
            BEGIN
              PRINT("Corrupted data!  Should not get here.");
              CALL(1,"EXIT")
            END;
  gettymnetlink(answerlist);
  IF answerlist[tymnetlink]="Y"
    THEN
      BEGIN
        IF EQU(answerlist[nodebusstype],"UNIBUS")
          THEN
            getdutype(answerlist)
          ELSE
            answerlist[dutype] := "DU";
        getneighborname(answerlist);
        gettymnetbaud(answerlist);
        gettymnetgroups(answerlist);
        gettymnetlinktype(answerlist)
      END
    ELSE
      answerlist[dutype] := "DU";
  getdl11count(answerlist);
  IF EQU(answerlist[nodebusstype],"QBUSS")
    THEN
      BEGIN
        getdlv11jcount(answerlist);
        IF (CVD(answerlist[dl11count])+CVD(answerlist[dlv11jcount]))=0
          THEN
            BEGIN
              PRINT("You must have at least 1 DL port  in a micro-node,"&
                                              " for the console!"&crlf);
              PRINT("Aborting --- no action taken.");
              CALL(1,"EXIT")
            END
      END
    ELSE
      answerlist[dlv11jcount] := "0";
  getdz11count(answerlist);
  getbreaklogoff(answerlist);
  bldconfigfile(answerlist);
  bldroutefile(answerlist);
  bldmacn11cmdfile(answerlist);
  bldlink11cmdfile(answerlist);
  cleanup
END "genbas";
9 u