comment 
! NODLOD: - Node loader program for 2020
! Author: - J.M.Stammers May 29, 1980
! Revised:- J.M.Stammers July 1, 1980 ( include node adjacent load)
!
!
!
! Revised:- J.W.Rice August 21, 1980  ( remove completion time-out msg)
! "  "  ":      Comment out 4th line from end of "LOAD" procedure.
! "  "  ":      Add "outstr("[Process complete.]"&CRLF)"
!
!
!
! Purpose:-
!           This program is intended to be used to down line
!           a node image into a node on a local network to the
!           host 2020, running TYMCOM - XX. It goes through a
!           question and answer period and then loads the data
!           into the specified node.;

begin	"nodlod"
require processes;
require 25 polling!interval;
require "(sys)proces.def" source!file;
require "(sailib)tymint.def" source!file;
item intpro;
simple procedure intini; intset(intpro,0);
require intini initialization[2];
item cctblt;
simple procedure eventini; mkevtt(cctblt);
require eventini initialization[2];
define	!	=	"COMMENT",	CRLF	=	"('15&'12)",
	TURNON	=	-1,		TURNOFF	=	0,
	USERIOT	=	'25,		DRCLI	=	0,
	DRSEL	=	1,		DRWIO	=	2,
	DRRIO	=	3,		DRDSL	=	4,
	PREFIX	=	'2307,		BLKLEN	=	10,
	ACK	=	'100307,	NAK	=	'140307,
	MSN	=	'400,		RESET	=	'177777,
	START	=	0,		YES	=	0,
	NO	=	1,		NOERR	=	'750010,
	BELL	=	'7,		ECHOFF	=	'214,
	AXI8S	=	'1,		AXO8	=	'3,
	LROK	=	'100,		LRINN	=	'101,
	LRNSN	=	'102,		LRNNI	=	'103,
	LRCSE	=	'104,		LRPOV	=	'105,
	LRPCE	=	'106,		LRFIN	=	'107,
	LRTIM	=	'110,		LRRFS	=	'111,
	LRNHW	=	'112,		AXCFS	=	'64,
	ZAPCIR	=	-'45,		HIBER	=	'72,
	CR	=	'15,		LF	=	'12,
	ESC	=	'33,		TAB	=	'11,
	BS	=	'10,		CTRLU	=	'25,
	DEL	=	'177,		CTRLC	=	'3,
	KMC	=	'760540,	AVAIL	=	'4,
	ACTIV	=	'3,		TIMEOUT	=	'1000005,
	CREAUX	=	-'44,		RDIOB	=	"'722 ROT -9",
	TIOEB	=	"'720 ROT -9",	BSIOB	=	"'724 ROT -9",
	BCIOB	=	"'725 ROT -9",	UBA	=	'3,
	ECHON	=	'0,		CIOPR	=      -'140,
	DRDO	=	2,		DEFALT	=	128;
safe integer array intblock[1:2], zapblock[1:2];
integer	drn,kmc11,dr11c,dskchn,dskeof,port;
integer array buffer[1:DEFALT];		! pdp10 words;
boolean adjacent,selected;
string	filnam,logstr,nodnam,lognod;
external 
boolean	!SKIP!;
! A couple of useful procedures;
procedure setio(integer	mode);	! allow/disallow user level IO;
begin	"setio" calli(mode,USERIOT);	end	"setio";

integer procedure lh(integer word); ! return left halfword;
start!code  hlrz 1,word; end;

integer procedure rh(integer word); ! return right halfword;
start!code  hrrz 1,word; end;

simple boolean procedure cio(integer	fn,dr,arg,ciop);
  start!code
	hrlz	3,fn;
	hrlz	2,dr;
	hrr	2,arg;
	hrri	3,2;
	move	4,ciop;
	setom	1;
	calli	3,0(4);
	  setzm	1;
  end;
simple procedure bclrb(integer	addr,byte);
  start!code
	hrlzi	2,UBA;
	add	2,addr;
	hrrz	1,byte;
	BCIOB	1,@2;
  end;

procedure dsldr; ! release the selected dr11c;
begin	"dsldr"
if not cio(DRDSL,drn,DRDO,CIOPR) then 
  outstr(CRLF&"[Can't deselect DR11C]");
if kmc11 = YES then bclrb(KMC+ACTIV,dr11c);  ! turn on KMC;
end	"dsldr";

procedure quit(string	arg); ! exit procedure, optional diag message;
begin	"quit"
outstr(BELL&arg);			! give message;
if selected then dsldr;			! turn off interrupts;
auxclv(-1,memory[ECHON], AXCFS);
call(1,"EXIT");
end	"quit";
string procedure getstr; ! general string input routine with editting;
begin	"getstr"
string chr,local;
local _ NULL;
while (chr _ inchrw) neq CR and chr neq LF do
  begin if chr = DEL then 
          begin local _ local[1 for INF-1];
                outstr(BELL&BS&" "&BS);
          end
        else if chr = TAB then
          begin outstr(" ");
                local _ local & chr;
          end
        else if chr = CTRLU then
          begin while length(local) > 0 do
                  begin local _ local[1 for INF-1];
                        outstr(BS&" "&BS);
                  end;
                outstr(BELL);
          end
        else if chr = ESC or
                chr = CTRLC then quit(NULL)
        else if chr < " " then outstr(BELL)
        else 
          begin if "a" leq chr leq "z" then chr _ chr - '40;
                outstr(chr);
                local _ local & chr;
          end;
  end;
return(local);
end	"getstr";
procedure getadj; ! ask whether a host/node adjacent load;
begin	"getadj"
string junk;
while 1 = 1 do
  begin
  outstr("Host adjacent load [Y/N]? ");
  if (junk _ inchrw) = ESC or
      junk = CTRLC then quit(NULL);
  if junk = CR or
     junk = "N" or
     junk = "n" then
     begin outstr("No."&CRLF);
           adjacent _ false;
           done;
     end
  else if junk = "Y" or junk = "y" then
     begin outstr("Yes."&CRLF);
           adjacent _ true;
           done;
     end
  else outstr(CRLF&"[Answer `Y' or `N']"&CRLF);
  end;
end "getadj";
procedure cint; ! character software interrupt routine;
begin "cint"
integer ch;
ch _ 0;
ch _ auxclv(port,0,AXI8S);

if ch = ACK or ch = ACK + MSN then cause(cctblt,ANY)
else case ch of begin
     [LROK][LRFIN] cause(cctblt,ANY);
     [LRINN] quit("[Illegal node name]");
     [LRNSN] quit("[No such node]");
     [LRNNI] quit("[Node not idle]");
     [LRCSE] quit("[Checksum error]");
     [LRPOV] quit("[Packet overflow]");
     [LRPCE] quit("[Protocol error]");
     [LRTIM] quit("[Node timed out]");
     [LRRFS] quit("[Refused by protocol module]");
     [LRNHW] quit("[No hardware present]");
     else quit("[Unknown node error "&cvos(ch)&"]")
  end;
end "cint";

procedure zint; ! circuit zapper software interrupt routine;
begin "zint"
quit("[Node timed out]");
end "zint";

item nulljob;
procedure nulljobproc;
begin "nulljobproc"
 while true do 
  begin calli(TIMEOUT, HIBER);
        poll;
  end;
end "nulljobproc";

simple procedure nulljobini;
sprout(nulljob,nulljobproc,priority(15)+runme);
require nulljobini initialization[2];
procedure getaux; ! create aux cct to load device;
begin "getaux"
integer array foo[0:length(logstr)%5];
integer i;
for i _ 1 step 5 until length(logstr)
  do foo[i%5] _ cvasc(logstr[i for 5]);
port _ calli(location(foo[0]) + (drn lsh 33), CREAUX);
if !SKIP! then
  begin intblock[1] _ 2;
        intblock[2] _ (-1 lsh 18) + location(cint);
        intmap(tinass(port,1,'10),dfrint,
              (-2 lsh 18) + location(intblock[1]));
        enable(newenb('10));
        zapblock[1] _ 2;
        zapblock[2] _ (-1 lsh 18) + location(zint);
        intmap(tinass(port,7,'11),dfrint,
              (-2 lsh 18) + location(zapblock[1]));
        enable(newenb('11));
  end
else
  begin case lh(port) of begin
             [0][7] case rh(port) of begin
                         [1] quit("[Format error]");
                         [2] quit("[Tymnet username error]");
                         [3] quit("[Tymnet mud error]");
                         [4] quit("[Can't access load device]");
                         [5] quit("[Tymnet downline request error]");
                         [6] quit("[Tymout]");
                         [7] quit("[Access barred]");
                         [8] quit("[Out of originating ports]");
                         [9] quit("[Aux cct queue full]")
                    end;
             [1][2] quit("[Insufficient license]");
             [3] quit("[No room for DDB]");
             [4][5][6] quit("[No response from node "&lognod&"]");
             [8] quit("[Node "&lognod&" not up]")
        end;
  end;
end "getaux";
procedure getnod; ! ask for node number to load;
begin "getnod"
open(dskchn _ getchan, "DSK", NOERR,5,0,0,0,dskeof);
if dskeof then quit("[Can't open disk channel]");
while true do
  begin outstr("Specify node number to load: ");
        while equ((nodnam _ getstr), NULL) do
           outstr(CRLF&"[Enter node number]"&CRLF&
                  "[Specify node number to load: ");
        lookup(dskchn,"(SYS)SV"&nodnam&".IMG",dskeof);
        if not dskeof then done
        else outstr(CRLF&"[Can't lookup (SYS)SV"&nodnam&".IMG]"&CRLF);
  end;
outstr(CRLF);
end "getnod";
procedure getdr; ! get dr11c logical number;
begin "getdr"
outstr("Specify DR11C [0:3]: ");
while (drn _ inchrw) neq CR and drn neq ESC and drn neq CTRLC do
  begin if "0" > drn or drn > "3" then
          begin outstr(drn&CRLF);
                outstr(BELL&"[Invalid DR11C]"&CRLF&
                       "Specify DR11C [0:3]: ")
          end
        else done;
  end;
if drn = CR then drn _ "0"
else if drn = ESC or drn = CTRLC then quit(NULL);
outstr(drn&CRLF);
drn _ drn - "0";
if adjacent & kmc11 = NO and drn neq 0 then
  quit("[Only DR11C 0 available]");
end "getdr";
procedure getlog; ! ask for node to load from;
begin "getlog"
integer i,ch;
outstr("Specify neighbour node: ");
while equ((lognod _ getstr), NULL) do
      outstr(CRLF&"[Enter node number to load from]"&CRLF&
             "Specify neighbour node: ");
outstr(CRLF);
logstr _ ":WD1@" & lognod & ";";
getdr;
auxclv(-1, memory[ECHON],AXCFS);
calli(TIMEOUT - 3, HIBER);
getaux;
nodnam _ nodnam & "      ";
for i _ 1 step 1 until 6 do
  auxclv(port,(ch _ lop(nodnam)), AXO8);
interrogate(cctblt, wait);
end "getlog";
procedure getkmc; ! ask whether there is a kmc;
begin	"getkmc"
integer i;
outstr("Do you have a KMC-11 [Y/N]? ");
if equ(i _ inchrw,CR) or
       i = "N" or
       i = "n" then
  begin kmc11 _ NO;
        outstr("No."&CRLF);
  end
else if i = ESC or
        i = CTRLC then quit(NULL)
else
  begin kmc11 _ YES;
        outstr("Yes."&CRLF);
  end;
end	"getkmc";
! some macro assists for user level IO;
simple boolean procedure teqb(integer	addr,byte);
  start!code
       hrlzi	2,UBA;
       add	2,addr;
       hrrz	3,byte;
       setom	1;
       TIOEB	3,@2;
         setzm	1;
  end;
simple procedure bsetb(integer	addr,byte);
  start!code
      hrlzi	2,UBA;
      add	2,addr;
      hrrz	1,byte;
      BSIOB	1,@2;
  end;
integer simple procedure breab(integer	addr);
  start!code
      hrlzi	2,UBA;
      add	2,addr;
      setzm	1;
      RDIOB	1,@2;
  end;
simple integer procedure locn(reference integer	word);
  start!code movei	1,word; end;
procedure seldr; ! latch onto the selected dr11c;
begin	"seldr"
integer j,z;
if kmc11 = NO then 
  begin if not cio(DRCLI,drn,DRDO,CIOPR) then 
          quit("[Can't clear interface]");
  end
else
  begin case drn of
          begin [0] dr11c _ '1;
                [1] dr11c _ '2;
                [2] dr11c _ '20;
                [3] dr11c _ '200
          end;
        if not teqb(KMC+AVAIL,dr11c) then 
          quit("[DR11C "&cvos(drn)&" not available]");
        z _ 1;
        while teqb(KMC+ACTIV,dr11c)  and z leq 12 do
          begin calli(TIMEOUT,HIBER);
                z _ z + 1;
          end;
        if z > 12 then quit("[DR11C "&cvos(drn)&" marked active]");
        bsetb(KMC+ACTIV,dr11c);
        calli(TIMEOUT,HIBER);		! wait for KMC to see it;
  end;
if not cio(DRSEL,drn,DRDO,CIOPR) then quit("[Can't select DR11C]");
selected _ true;
end	"seldr";
! some IO control primitives;
integer procedure getbuf(integer	pdp10);
begin	"getbuf"
arryin(dskchn, buffer[1], pdp10);
if not dskeof then return(pdp10)
else               return(dskeof land '777777);
end	"getbuf";

procedure send(integer	word);
begin	"send" 
if adjacent then
  begin if not cio(DRWIO,drn,word,CIOPR) then
           quit("[Can't send word to node]");
  end
else begin
  auxclv(port,(word land '377),AXO8);
  auxclv(port,(word lsh (-8)),AXO8);
  end;
end	"send";

integer procedure recv;
begin	"recv"
integer word;
if not adjacent then return(ACK);
if not cio(DRRIO,drn,locn(word),CIOPR) then
  quit("[Can't read node response]");
if word = ACK or
   word = ACK + MSN then return(ACK);
if word neq NAK and
   word neq NAK + MSN then
     begin outstr("Unknown response code: "&cvos(word)&CRLF);
           return(NAK);
     end;
end	"recv";
procedure load; ! down line load routine;
begin	"load"
integer i,j,k,word,cs;
if getbuf(DEFALT) neq DEFALT or dskeof then
  quit("[Node image too short]");
if adjacent then
  begin send(PREFIX);	! here it comes;
        send(RESET);	! reset pdp-11 bootstrap;
        send(0);
        if recv neq ACK then quit("[Node nak on reset pattern]");
  end;
outstr("[Loading]"&CRLF);
i _ 1;			! start block;
while not dskeof do
  begin cs _ 0;
        j _ getbuf(BLKLEN);	! pdp10 words;
        if not adjacent then
          send(((j * 2) + 3) * 2); ! Packet size Pdp11 (bytes);
        send(PREFIX);
        send(j * 2);		! BLKLEN * 2 Pdp11 words;
        k _ 1;
        while k leq j do
          begin send(word _ lh(buffer[k]));
                cs _ cs + word;
                send(word _ rh(buffer[k]));
                cs _ cs + word;
                k _ k + 1;
          end;
        send(cs);	! send checksum;
        if recv neq ACK then quit("[Node nak on block "&cvs(i)&"]");
        i _ i + 1;
  end;
if not adjacent then send(6);
send(PREFIX);
send(START);
send(0);
if recv neq ACK then quit("[Nak response to startup]");
outstr("[Booting]"&CRLF);
! Revision ** if not adjacent then interrogate(cctblt,wait);
outstr("[Process complete.]"&CRLF);
close(dskchn);
release(dskchn);
end	"load";
! nodcod - main line code;
auxclr(-1,memory[ECHOFF],AXCFS);
selected _ false;
outstr("[Nodlod - Tymshare/JMS/V1.5]"&CRLF);
getnod;
getadj;
if adjacent then
  begin setio(TURNON);
        if not !SKIP! then
           quit("[Insufficient license]");
        getkmc;
        getdr;
        auxclv(-1,memory[ECHON],AXCFS);
        seldr;
  end
else getlog;
load;
quit(BELL);
end	"nodlod"

  