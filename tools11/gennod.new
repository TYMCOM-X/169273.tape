BEGIN "gennod"
  DEFINE  CRLF          = "('12&'15)";
  REQUIRE "<><>" DELIMITERS;
  DEFINE !              = <COMMENT>;
  BOOLEAN versionoveride,bldanswerflag;
  STRING  answerdevice;
  DEFINE programversionumber = <"1.0">;
  DEFINE listsize       = <1>      ;   ! THIS POSITION OF "answerlist" WILL
                                          ALWAYS CONTAIN THE STRING REPRESEN-
                                          TATION OF THE TOTAL NUMBER OF ANSWERS
                                          INCLUDING THIS VALUE.            ;
  DEFINE nodename       = <2>      ;
  DEFINE nodetype       = <3>      ;
  DEFINE version        = <4>      ;
  DEFINE hostname       = <5>      ;
  DEFINE neighborname   = <6>      ;
  DEFINE tymnetlink     = <7>      ;
  DEFINE clockspeed     = <8>      ;
  DEFINE tymnetbaud     = <9>      ;
  DEFINE tymnetgroups   = <10>     ;
  DEFINE hosttype       = <11>     ;
  DEFINE kmcflag        = <12>     ;
  DEFINE pdpostype      = <13>     ;
  DEFINE dl11count t    = <14>     ;
  DEFINE dz11count      = <15>     ;
  DEFINE breaklogoff    = <16>     ;
  DEFINE baudetectype   = <17>     ;
  DEFINE wiringmode     = <18>     ;
  DEFINE statdevflag    = <19>     ;
  DEFINE askttyid       = <20>     ;
  DEFINE tymlinktype    = <21>     ;
  DEFINE pdptype        = <22>     ;
  DEFINE dutype         = <23>     ;




  COMMENT
               THIS SHOULD BE THE PLACE WHERE NEW ANSWER ENTRIES ARE PUT
               WHEN DEFINED.  EVERYTIME A NEW ANSWER IS DEFINED, IT'S
               VALUE SHOULD BE MADE ONE MORE (NUMERICALLY) THAN
               THE LAST DEFINED VALUE IMMEDIATELY PRECEEDING THIS
               COMMENT.  AFTER ADDING ANY NUMBER OF NEW ANSWERS, USING
               THE PREVIOUSLY MENTIONED ADDING ONE (1) ALGORITHM FOR
               EVERY SINGLE ANSWER BEING DEFINED, THEN UPDATE THE FOLLOW-
               ING DEFINITION ("answerlistsize") BY THE NUMBER OF NEW
               ANSWERS BEING CURRENTLY DEFINED.  IN OTHER WORDS, THE
               VALUE OF "answerlistsize" SHOULD ALWAYS BE EQUAL TO
               THE VALUE OF THE LAST DEFINED INDEX IMMEDIATELY PRE-
               CEEDING THIS COMMENT.
  END COMMENT                                                                ;



  DEFINE answerlistsize = <23>      ;




  COMMENT 
             THE STRING ARRAY "answerlist" (WHICH IS DEFINED NEXT) IS
             USED TO STORE ALL THE STRINGS REPRESENTED BY THE PRE-
             CEEDING INDEX NAMES.  USING EACH OF THE PRECEEDING VALUES
             (EXCEPT FOR "answerlistsize") AS A INDEX INTO THE STRING
             ARRAY "answerlist", ONE MAY ACCESS THE PARTICULAR STRING
             VALUE THAT IS THE STRING REPRESENTATION (ALL VALUES ARE IN
             ASCII IMAGE FORM) THAT THE PARTICULAR ITEM HAS AT THAT TIME.
             THE VALUE "answerlistsize" WILL ALWAYS (HOPEFULLY!)
             CONTAIN THE NUMBER OF DEFINED ANSWERS (INCLUDING IT-
             SELF).
  END COMMENT                                                                ;




  STRING ARRAY answerlist [1:answerlistsize];
  PROCEDURE getnodename(STRING ARRAY answerlist);
  BEGIN "getnodename"
    BOOLEAN notcompleteyet;
    STRING tempstring;
    notcompleteyet := TRUE;
    WHILE notcompleteyet DO
      BEGIN
        PRINT("Enter your node's number < 1 .. 7777 octal >:"); 
        tempstring := INCHWL;
        IF ((CVO(tempstring)>'0)AND(CVO(tempstring)<'10000))
          THEN
            BEGIN
              answerlist[nodename] := tempstring;
              DONE
            END
      END
  END "getnodename";
  PROCEDURE getanswers(STRING ARRAY answerlist;STRING answerdevice;
                       BOOLEAN versionoveride);
  BEGIN "getanswers"
    PROCEDURE getautoanswers(STRING ARRAY answerlist;BOOLEAN 
                                          versionoveride);
    BEGIN "getautoanswers"
      PRINT("I am pretending like I am reading from a disk!"&crlf)
    END "getautoanswers";
    PROCEDURE getmanualanswers(STRING ARRAY answerlist);
    BEGIN "getmanualanswers"
      STRING tmpstring;
      PROCEDURE getbaseanswers(STRING ARRAY answerlist);
      BEGIN "getbaseanswers"
        PRINT("I am getting the base answers!"&crlf)
      END "getbaseanswers";
    PROCEDURE getpdptype(STRING ARRAY answerlist);
    BEGIN "getpdptype"
      IF yes("Does your PDP-11 have eis < 'Y' , 'N' >?")
        THEN
           answerlist[pdptype := "YES"
        ELSE 
          answerlist[pdptype] := "NO
    END "getpdptype";
    PROCEDURE getclockspeed(STRING ARRAY answerlist);
    BEGIN "getclockspeed"
      BOOLEAN notcompleteyet;
      notcompleteyet := TRUE;
      WHILE notcompleteyet DO
      BEGIN 
        PRINT("Clock speed < '50' , '60' > =");
        answerlist[clockspeed] := INCHWL;
        IF ((CVD(answerlist[clockspeed])=50) OR
             CVD(answerlist[clockspeed)=60))
          THEN
            DONE
       END
     END "getclockspeed";
  END "getanswers";


  PROCEDURE getstatdev(STRING ARRAY answerlist);
  BEGIN"getstatdev"
    IF yes("Do you want the console status monitor included < 'Y' , 'N' >?")
      THEN
        answerlist[statdevflag] := "YES"
      ELSE
        answerlist[statdevflag] := "NO"
  END "getstatdev";
  PROCEDURE getnodetype(STRING ARRAY answerlist);
  BEGIN "getnodetype"
    BOOLEAN notcompleteyet;
    notcompleteyet := TRUE;
    WHILE notcompleteyet DO
    BEGIN
      STRING tempstring;
      PRINT("Node type < 'T' for tymsat , 'B' for tymbas > =");
      answerlist[nodetype] := INCHWL;
      tempstring := answerlist[nodetype];
      IF ((tempstring[1 TO 1]="T") OR (tempstring[1 TO 1]="S"))
        THEN
          DONE
    END
  END "getnodetype";
  PROCEDURE getsatanswers(STRING ARRAY answerlist);
  BEGIN "getsatanswers"
    PRINT("Getting the tymsat answers!"&crlf)
  END "getsatanswers";
  PROCEDURE getversion(STRING ARRAY answerlist);
  BEGIN "getversion"
    BOOLEAN notcompleteyet;
    notcompleteyet := TRUE;
    WHILE notcompleteyet DO
      BEGIN PRINT("Version # < 1 .. 777 octal > =");
            answerlist[version] := INCHWL;
            IF ((CVO(answerlist[version])>'0) AND (CVO(answerlist[version])<'1000)) THEN DONE
      END
  END "getversion";
  PROCEDURE printbanner;
  BEGIN "printbanner"
    PRINT("**  Micro-node program image generation system -- Version "&
          programversionumber&"  **"&crlf)
  END "printbanner";
  PROCEDURE initializetheinputchannel(REFERENCE STRING answerdevice;STRING ARRAY answerlist);
  BEGIN "initializetheinputchannel"
    PRINT("Initializing the input channel to be "&answerdevice&" !"&crlf)
  END "initializetheinputchannel";
  PROCEDURE bldconfigfile(STRING ARRAY answerlist);
  BEGIN "bldconfigfile"
    PRINT("We are now building file CG"&answerlist[nodename]&".MAC !"&crlf)
  END "bldconfigfile";
  PROCEDURE bldroute(STRING ARRAY answerlist);
  BEGIN "bldroute"
    PRINT("We are now building the file RU"&answerlist[nodename]&".MAC !"&crlf)
  END "bldroute";
  PROCEDURE bldmacn11cmd(STRING ARRAY answerlist);
  BEGIN "bldmacn11cmd"
    PRINT("We are now building the file MC"&answerlist[nodename]&".CMD !"&crlf)
  END "bldmacn11cmd";
  PROCEDURE bldlink11cmd(STRING ARRAY answerlist);
  BEGIN "bldlink11cmd"
    PRINT("We are now building the file LK"&answerlist[nodename]&".CMD !"&crlf)
  END "bldlink11cmd";
  PROCEDURE bldanswercmd(STRING ARRAY answerlist);
  BEGIN "bldanswercmd"
    PRINT("We are now building the file AN"&answerlist[nodename]&".CMD !"&crlf)
  END "bldanswercmd";
  PROCEDURE cleanup;
  BEGIN "cleanup"
    PRINT("Cleaning up.  Thanks yall!!!")
  END "cleanup";
  BOOLEAN PROCEDURE yes(STRING prompt);
  BEGIN "yes"
    BOOLEAN notcompleteyet;
    STRING tempstring;
    notcompleteyet := TRUE;
    WHILE notcompleteyet DO
      BEGIN
        PRINT(prompt);
        tempstring := INCHWL;
        IF (tempstring[1 TO 1]="Y")
          THEN
            BEGIN
              RETURN(TRUE);
              DONE 
            END
          ELSE IF (tempstring[1 TO 1]="N")
                 THEN
                   BEGIN
                     RETURN(FALSE);
                     DONE
                   END
      END
  END "yes";
COMMENT                    M   A   I   N       C   O   D   E             ;
  printbanner;
  versionoveride := TTYUP(TRUE);
  versionoveride := FALSE;
  getnodename(answerlist);
  IF yes("Do you wish to perform an automatic generation < 'Y' , 'N' >?")
    THEN
      BEGIN
        IF yes("Has the version number changed < 'Y' , 'N' >?")
          THEN
            BEGIN
              getversion(answerlist);
              bldanswerflag := TRUE;
              versionoveride := TRUE
            END
          ELSE
            bldanswerflag := FALSE;
        initializetheinputchannel(answerdevice := "DSK",
                                  answerlist)
    END
  ELSE
    BEGIN
      initializetheinputchannel(answerdevice := "TTY",
                                answerlist);
      IF yes("Do you wish to create a new answer file < 'Y' , 'N' >?")
        THEN
          bldanswerflag := TRUE
    END;
getanswers(answerlist,answerdevice,versionoveride);
bldconfigfile(answerlist);
bldroute(answerlist);
bldmacn11cmd(answerlist);
bldlink11cmd(answerlist);
IF bldanswerflag
  THEN
    bldanswercmd(answerlist);
cleanup;
CALL(1,"EXIT")
END "gennod";
  