.	<<	EBUSIM.HPM	>>

.SEC(|Host and Port Management|)

	There are a collection of routines for Host and port management.
These are described in this section.

.SS(|Host management|)

	These routines deal with the Host itself:

.SKIP BEGIN VERBATIM
/*	Verify the Host Key	*/
.DTOPIC(|DOKEY Function|)
DOKEY()
{	if ( GETPDPR( $68 ) != $DFA68CB2 )
	    return FALSE;	/* Right KEY bad */
	if ( (char) P10DAH != $CD )
	    return FALSE;	/* Left KEY bad */
	PUTPDPR(0);		/* Key matched...reset to 0 */
	return TRUE;
}
.SKIP 3
/*	Report host status to ISIS	*/
.DTOPIC(|HREPRT Function|)
HREPRT()
{	WAITIS(14);		/* we'll need 14 bytes */
	SLOR(0,$10);		/* port-0 Message $10 */
	PUTCH(0);		/* padding */
	PUTH(HOSTN);		/* Host number */
	PUTH(HOSTP);		/* # ports */
	PUTH(0);		/* relative Host 0 */
	PUTH(HSTAT);		/* HSTAT | Hkey=0 */
	PUTH(PRODID);		/* no IIX | PROD-ID */
	ELOR();
	return;
}
.END

.SS(|Port Management|)

	It is necessary to perform the "soft-" shut and answer functions:

.SKIP BEGIN VERBATIM
/*	Increment port-count and shut if necessary	*/
.DTOPIC(|IPORT Routine|)
IPORT()
{	if ( ++NPORTS > MXPORT ) /* count another port */
	{    PFULL = 1;		/* set "port-full" flag */
	    SOFT();		/* report it */
	}
	return;
}
.SKIP 3
/*	Decrement port-count and re-answer if possible	*/
.DTOPIC(|DPORT Routine|)
DPORT()
{	if ( --NPORTS = MXPORT ) /* count another port */
	{    PFULL = 0;		/* clear "port-full" flag */
	    SOFT();		/* report it */
	}
	return;
}
.SKIP 3
/*	Report soft- answer/shut	*/
.DTOPIC(|SOFT Routine|)
SOFT()
{	WAITIS(10);		/* we'll need 10 bytes */
	SLOR(0,$A);		/* port-0 message $A */
	PUTCH(0);		/* padding */
	PUTH(HOSTN);		/* host # */
	PUTH(PFULL-1);		/* soft answer/shut */
	PUTH(0);		/* relative host # */
	ELOR();
	return;
}
.END

.SS(|ISIS-port Management|)

	While the host is not available, it is still necessary to purge the
ISIS input-ring of messages.  These may be present either because of
a race-condition, or because the messages are always supplied by ISIS.


	The routine which does this is:
.SKIP BEGIN VERBATIM
/*	Flush ISIS ring	*/
.DTOPIC(|EMPTY Routine|)
EMPTY()
{	/*  type  9E 9F A0 A1 A2 A3 A4 A5 A6 A7	*/
    int	IMMSZ[] = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;

	/*  type  00 01 02 03 04 05 06 07	*/
    int	IPZSZ[] = 0, 0, 1, 6, 9, 5, 5, 8,
	/*	08 09 0A 0B 0C 0D		*/
		8, 4, 7, 4, 7, 0;
    while ( LOOK() != 0 )
    {	if ( PORTNO == 0 )
	{   if ( INTYBT > $0E ) ISMGER();
	    FLUSH( IPZSZ[INTYBT] );
	    continue;
	}
	if ( INTYBT == 0 )	/* Needle */
	{   SENDQI( PORTNO, $9F );
	    FLUSH( GETCH() );
	    continue;
	}
	if ( INTYBT == $B2 )	/* Psuedo-needle */
	{   SENDQI( PORTNO, $9F );
	    FLUSH( 3 );
	    continue;
	}
	if ( INTYBT > $9D )	/* control message */
	{   if ( INTYBT > $C1 ) ISMGER();
	    FLUSH( IMSSZ[INTYBT] );
	    continue;
	}
	FLUSH( INTYBT );	/* Data Message */
    }
    return;
}
.END
