.	<<	EBUSIM.DBG	>>

.SEC(|Debugging and Diagnostic Tools|)

	The EBUS code contains a minor amount of code to aid in debugging and
diagnosing hardware problems.

	MACSbug is also available within the 68K;  While useful, a detailed
discussion of its operation is beyond the scope of this document.

.SS(|TRACE Assembly Switches|)

.DTOPIC(|TRACE Assembly-Switches|)
.DTOPIC(|Pointer .TRACER|)
.DTOPIC(|TRACE Area of Memory|)
	The source code contains a number of  Assembly-switches:

.BEGIN OFFSET
	ITRACE:#Activates trace of ISIS rings;
	RTRACE:#Activates trace of PDP rings;
	BTRACE:#Activates trace of BIO transfers;
	CTRACE:#Activates trace of Buffer transfers.
.END

	These are OR'ed into an Assembly-switch called TRACING, which
enables certain useful features.  In particular, the area of memory from
$20000 to $3FFE0 is set aside as a "Trace Area".  The pointer ".TRACE"
(long, located at $1000) contains the cursor to the trace area.

	An attempt is made to present a uniform trace mechanism, to permit
the simultaneous tracing of any or all of the above.  Thus it is
important to define the standard used:

	The trace consists of successive (time-ordered) trace-descriptors
in a Trace-ring.  This ring starts at STRACE, folds at ETRACE, and
the (next) descriptor address may be found in .TRACE.

	A trace-descriptor is 8 bytes long, and has the common form:

.ONCE BOX
	| TR | dd | p# | ?? | V | A | L | U |

	TR|dd is a pair of characters which specify the operation (TR)
being traced and the "direction" (dd);  p# is (usually) the current
port;  ?? is additional information specific to the TR, and V|A|L|U
is the (long) value being transfered.

	Possible forms are:

.BEGIN BOX
TR|dd	Usage			Notes
>R	PDP-ring input		?? is current fill-cursor
<R	PDP-ring output		?? is current empty-cursor
>B	Block-input		?? is current-address low byte
@B	Block-input fetch	?? is current-address low byte
<B	Block-output		?? is current-address low byte
>C	DWCI
<C	DGCI
#C	DEMPTY
lI	LOOK			word 3 = port, word 4 is type (right)
<I	ISIS input		?? is number of bytes
sI	SLOR			word 3 = port, word 4 is type (right)
>I	ISIS output		?? is number of bytes
xI	FLUSH			?? is number of bytes
.END

	These may profitable be examined (with MACSbug) to determine the
interaction between the 68K and the activities being traced.

.SS(|Hardware Diagnostic Routines|)

	The EBUS code also contains several processes which may be of use
to diagnose hardware problems.  Each of these begins at a fixed location
in memory, and may be accessed with ~<MACSbug>.

.SSS(|$7C00 Test|)
	This test performs a sequence of Write followed by Read for a
range of addresses in the PDP.  Instances of mismatch between what was
written and what was read are counted for later review.

	The registers used are:

.BEGIN OFFSET
	D0:##the high order 32 bits to write to pdp-10
	D1:##last 4 bits are the low order 4 bits to write to 10
	D2:##the start address of the test
	D3:##the ending address of the test
	D4:##the counter of mismatch between read and write
	D5:##the high order 32 bits read from 10's memory
	D6:##last 4 bits are the low order 4 bits read from 10
.END

	After initializing these registers (using MACSbug), start execution
at $7C00.

.SSS(|$7D00 Test|)

	This is a simple process to write repeatedly to PDP memory.

	The 68K registers must be initialized to:

.BEGIN OFFSET
	D0:##The data to be Written (left-justified) into the PDP;
	D1:##The values for AHI/DLO (low order byte);
	D2:##The Address to Write to.
.END

	Then execution may be started at $7E00.

.SSS(|$7E00 Test|)

	This is a simple process to read repeatedly from PDP memory.

	The 68K registers must be initialized to:

.BEGIN OFFSET
	D2:##The Address to read from.
.END

	Then execution may be started at $7F00.
