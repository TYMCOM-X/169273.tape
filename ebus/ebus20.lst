Page  1-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:32
EBUS02.I00		 

     1				::      ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--IPI--(EBUS)
     2				
     3				: ******************************************************************
     4				: **                  PROPRIETARY INFORMATION                     **
     5				: **                                                              **
     6				: **  This  source code listing constitutes the proprietary pro-  **
     7				: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
     8				: **  this program listing, agrees that neither this listing nor  **
     9				: **  the   information  disclosed herein nor any  part  thereof  **
    10				: **  shall be  reproduced or transferred to other documents  or  **
    11				: **  used  or  disclosed to others for manufacturing or for any  **
    12				: **  other   purpose except as specifically authorized in  wri-  **
    13				: **  ting by  TYMNET, Incorporated.                              **
    14				: ******************************************************************
    15				: **                   PROGRAM IDENTIFICATION                     **
    16				: **                                                              **
    17				: **  Version Number     2.0             Release Date :11/19/85   **
    18				: **                                                              **
    19				: **  File Name          IPI SLOT INTERFACE INIT FILE             **
    20				: **                                                              **
    21				: ******************************************************************
    22				: **                CONFIGURATION SPECIFICATION                   **
    23				: **                                                              **
    24				: **  Core Memory Requirement: 265K                               **
    25				: **                                                              **
    26				: **  Basic Code Size: 9K                                         **
    27				: **                                                              **
    28				: **  Additional Code Size per Tymfile Parameter Unit:            **
    29				: **    EBDUMP:  256K                                             **
    30				: **                                                              **
    31				: **  Estimated Code Growth for Next 12 Months:                   **
    32				: **                                                              **
    33				: **  Hardware/Firmware Requirements:                             **
    34				: **                                                              **
    35				: **  Other Software Requirements: XPI/EBUS Code                  **
    36				: **                                                              **
    37				: **  Slot Limitations:  supports SINGLE PDP-10 Host              **
    38				: **                                                              **
    39				: ******************************************************************
    40				: **                   DOCUMENT SPECIFICATION                     **
    41				: **                                                              **
    42				: **  Software Requirements Specification Number:                 **
    43				: **                                                              **
    44				: **  Functional Specification Number           :                 **
    45				: **                                                              **
    46				: **  Test Suite Number                         :                 **
    47				: **                                                              **
    48				: ******************************************************************
    49				: **                      MAINTENANCE HISTORY                     **
    50				: **                                                              **
    51				: **  Ver   Date    By   PIR/NSR         Reason for Change        **
    52				: ** ----- -------- ---  -------- ------------------------------  **
    53				: **                                                              **
Page  1-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:32
EBUS02.I00		 

    54				: ******************************************************************
    55				
    56				        GL      VERSIO,REVLEV,IRSIZE,ORSIZE,PRODID,PBUFSZ
    57				
    58	000002			VERSIO	EQ	$8 02			: VERSION
    59	000000			REVLEV	EQ	$8 00			: REVISION LEVEL
    60				
    61	000091			PRODID	EQ	91			: Product ID
    62	00003E			CNTRL	EQ	3E			: CTA control flags: Sup. time, Takeover,
    63				:						Host & Port #'s may be changed,
    64				:						Ports not re-usable.
    65				
    66	0007FC			IRSIZE	EQ	800-4			: input-ring size
    67	0007FC			ORSIZE	EQ	IRSIZE			: ouTput-ring size
    68	000000			PBUFSZ	EQ	0
    69				
    70	000001			MAXHST	EQ	1
Page  2-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:32
EBUS02.T00		 

    71				:       EBUS - IPI SLOT FILE - TYM FILE FOR SLOT 1 ON EBUS NODE
    72				:               HOST: 34
    73				:               NODE: 2100
    74				:
    75				:               KERNEL HOST: 1294
    76				:
    77				:
    78	000001			EBDUMP  EQ      1               : SWITCH: ENABLES EBUS DUMP AREA IF SET TO 1
    79	000080			NPORT   EQ      $A 128          : NUMBER OF PORTS
    80	000020			HOST0   EQ      $A 32           : HOST NUMBER
    81				:
Page  3-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

    82				: ******************************************************************
    83				: **                  PROPRIETARY INFORMATION                     **
    84				: **                                                              **
    85				: **  This  source code listing constitutes the proprietary pro-  **
    86				: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
    87				: **  this program listing, agrees that neither this listing nor  **
    88				: **  the   information  disclosed herein nor any  part  thereof  **
    89				: **  shall be  reproduced or transferred to other documents  or  **
    90				: **  used  or  disclosed to others for manufacturing or for any  **
    91				: **  other   purpose except as specifically authorized in  wri-  **
    92				: **  ting by  TYMNET, Incorporated.                              **
    93				: ******************************************************************
    94				: **                   PROGRAM IDENTIFICATION                     **
    95				: **                                                              **
    96				: **  Version Number     2.0             Release Date 10/15/85    **
    97				: **                                                              **
    98				: **  File Name          IPI SLOT INTERFACE                       **
    99				: **                                                              **
   100				: **  File Description   ALLOWS ISIS INTERFACE TO THE 'IPI' BOARD **
   101				: **  THAT RUNS 'EBUS' SOFTWARE, WHICH IS THE BASE FOR PDP10.     **
   102				: **  REQUIRES ISIS 7.01.                                         **
   103				: **                                                              **
   104				: **  File Abstract      :                                        **
   105				: **                                                              **
   106				: ******************************************************************
   107				: **                CONFIGURATION SPECIFICATION                   **
   108				: **                                                              **
   109				: **  Core Memory Requirement: 265K                               **
   110				: **                                                              **
   111				: **  Basic Code Size: 9K                                         **
   112				: **                                                              **
   113				: **  Additional Code Size per Tymfile Parameter Unit:            **
   114				: **            EBDUMP:  256K                                     **
   115				: **                                                              **
   116				: **  Estimated Code Growth for Next 12 Months: none              **
   117				: **                                                              **
   118				: **  Hardware/Firmware Requirements:                             **
   119				: **                                                              **
   120				: **  Other Software Requirements: MUST BE USED WITH ISIS 7.01    **
   121				: **                                                              **
   122				: **  Slot Limitations:  Supports single PDP-10 Host              **
   123				: **                                                              **
   124				: ******************************************************************
   125				: **                   DOCUMENT SPECIFICATION                     **
   126				: **                                                              **
   127				: **  Software Requirements Specification Number:                 **
   128				: **                                                              **
   129				: **  Functional Specification Number           :                 **
   130				: **                                                              **
   131				: **  Test Suite Number                         :                 **
   132				: **                                                              **
   133				: ******************************************************************
   134				: **                      MAINTENANCE HISTORY                     **
Page  3-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   135				: **                                                              **
   136				: **  Ver   Date    By   PIR/NSR         Reason for Change        **
   137				: ** ----- -------- ---  -------- ------------------------------  **
   138				: **                                                              **
   139				: ******************************************************************
   140				
   141					SUBTTL	ISIS Assembly Switch Definitions	- START.LIB
   142				:******************************************************************
   143				:
   144				:	This program is the sole property and confidential
   145				:	information of Tymshare, Inc., and may not be copied
   146				:	in whole or in part or disclosed to any third party
   147				:	without the prior written consent of Tymshare.
   148				:
   149				:*******************************************************************
   150				
   151					REMARK %Start.Lib Version 
   152	000000			SREV	EQ	0
   153					NUMBER SREV
   154					REMARK .0
   155	000005			SLEV	EQ	05
   156					NUMBER SLEV
   157				
   158				: Version 0.05 01/19/83 MDS
   159				:	Delete Remark regarding incompatibility with ISIS 5.00
   160				: Version 0.04 03/12/82  MDS
   161				:	Add new fields to SYS SVC Sub-operand definitions,
   162				:	per ISIS2 v.5.01
   163				: Version 0.03 03/08/82  MDS
   164				:	Add new fields to Seg F table per ISIS 5.01
   165				:	(note - Start.lib ** NOT ** compatible with ISIS 5.00
   166				:	because SLCNT and LCX were reversed in 5.00 )
   167				: Version 0.02  12/08/81  MDS
   168				:	Add QSTART remark, add I/O sub-ops for mother board.
   169				:	Delete ISIS (one) code - force ISIS2
   170				: Version 0.01  01/08/81  MDS
   171				:	Correct relative addresses of local clock index and values.
   172				
   173					RA	0		:	START.LIB
   174				
   175				:	this file should always be assembled IMMEDIATELY AFTER the *.TYM file
   176				
   177				
   178							:Note - ISIS 1 is no longer supported
   179				
   180				:			ISIS - II Version
   181				:
   182				:	The following parameters should be defined in the *.TYM file:
   183				:	MAXHST	maximum number of hosts associated with this interface slot
   184				:	MAXPRT	number of highest port associated with this interface slot
   185				:			(number of ports - 1)
   186				:	IRSIZE	 number of bytes to provide for input ring, from dispatcher
   187				:	ORSIZE	 number of bytes to provide for output ring, to dispatcher
Page  3-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   188				:	CNTRL	dispatcher control bits
   189				
   190				:	the following symbols MUST be defined SOMEWHERE in the assembly:
   191				:	IRING	the start of the input ring, from dispatcher
   192				:	ORING	the start of the output ring, to dispatcher
   193				:	ENTRY	the location of the first instruction to be executed
   194				
   195				:	the following symbols are defined for convenience:
   196				:	RATE	the rate of the fast clock (ticks/second)
   197				:	NRATE	word containing the value of RATE
   198				:	FASTC	word containing  realtime fast clock
   199				:	SLOWC	word containing  realtime slow clock (1-second)
   200				:	GMT	word containing GMT clock
   201				:	TEMPER	byte containing machine temperature
   202				:	VOLTS	byte containing machine voltage
   203				:	VERNO	halfword containing ISIS version number
   204				:	WWVBT	word containing WWVB time
   205				:	HOSTX	halfword containing kernel host number
   206				:	NODEX	halfword containing kernel node number
   207				:	LCX	halfword, offset of local clocks within seg F
   208				:	SLCNT	halfword, number of slots known to ISIS dispatcher
   209				:	LCT	halfword, pointer to crash table
   210				:	MAXP0	halfword, highest port 0 msg. #
   211				:	MAXMSG	halfword, highest msg # for all other ports
   212				:	LP0LST	halfword, length table for port 0 msgs.
   213				:	LENGTH	length table for msgs. all other ports
   214				:	R0-R15	symbolic names for the registers
   215				:	SEGn	the start address of segment n (0-0E)
   216				:	HOSTS	halfword array of host numbers as known by the dispatcher (R/O)
   217				:	PORTS	halfword array of ports/host as known by dispatcher (R/O)
   218				:
   219				:	the following symbols MAY be defined. defaults used otherwise
   220				:	APROTn	protection byte for area n. default area 1 write protected,
   221				:		other areas execution protected.
   222				:	HOSTn	host number for host position n. default none.
   223				:	HPRTn	number of ports for host position n. default none.
   224				:	DSTART	user DDT execution start address. default none.
   225				:	QSTART  user DDT query handler start address, default none.
   226				:	FPANEL	halfword cell for front panel display. default cell allocated
   227				:	FRISIS	bit array for input backpressure (1=no backpressure) default
   228				:			array allocated.
   229				:	TOISIS	bit array for output backpressure (1=no backpressure) default
   230				:			array allocated.
   231				:	VERSION	version number for slot code (default zero)
   232				:	PCTTBL	bit array for indicating terminating character for project
   233				:			code. (default none)
   234				:	REVLEV	revision level for slot code (default zero)
   235				:	A.DATA	segment number for data area. Default 0
   236				:	A.CODE	segment number for code area. Default 1
   237				:	A.BDAT	segment number for based data. Default 2.
   238				:	A.RING	segment number for rings. Default 2.
   239				:	A.BUFF	segment numberfor buffer(let)s. Default 2.
   240				:
Page  3-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   241				:	in addition most SVC calls have been assigned symbolic names.
   242				Page  3-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   243				
   244					GL	FASTC,SLOWC,RATE,NRATE,GMT,TEMPER,VOLTS,VERNO,HOSTX,NODEX,SLOTNO
   245					GL	R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15
   246					GL	IRSIZE,ORSIZE,CNTRL
   247					GL	ENTRY,IRING,ORING,LCX
   248					GL	VERREV,COREST,FPANEL,HOSTS,PORTS,FRISIS,TOISIS
   249				
   250				:	DEFINE SEG 15d LOCATIONS
   251	000258			RATE	EQ	$A 600		:clock rate, ticks per second
   252	0F0000			NRATE	EQ	0F0000		:word, contains RATE
   253	0F0004			FASTC	EQ	0F0004		:word, contains fast clock (ticks)
   254	0F0008			SLOWC	EQ	0F0008		:word, contains slow clock (seconds)
   255	0F000C			GMT	EQ	0F000C		:word, contains GMT (seconds since 1/1/72)
   256	0F0010			TEMPER	EQ	0F0010		:byte, contains machine temperature
   257	0F0011			VOLTS	EQ	0F0011		:byte, contains machine voltage
   258	0F0012			VERNO	EQ	0F0012		:halfword, ISIS version number
   259	0F0014			WWVBT	EQ	0F0014		:word, WWVB time (format ??)
   260	0F0018			HOSTX	EQ	0F0018		:halfword, kernel host number
   261	0F001A			NODEX	EQ	0F001A		:halfword, kernel node number
   262				
   263				: Local clocks displacements
   264				
   265	0F001C			LCX	EQ	0F001C	:1/2 word, contains offset of LOCLKS within seg F
   266				: LOCLKX and LOCLKS must be referenced by the pointer in LCX
   267				:LOCLKX	EQ	LOCLKS-2 :1/2 word, index to current clock from LOCLKX
   268				:LOCLKS	EQ	Seg F + contents of LCX
   269							:clocks for slots, array of word entries per slot
   270							:1st halfword is user ticks, 2nd is sys ticks for slot
   271				
   272	0F001E			SLCNT	EQ	0F001E		:halfword, number of dispatcher slots
   273	0F0020			LCT	EQ	0F0020		:halfword, pointer to crash table
   274	0F0022			MAXP0	EQ	0F0022		:halfword, max. msg. # for port 0
   275	0F0024			MAXMSG	EQ	0F0024		:halfword, max. msg #, all non-0 ports
   276	0F0026			LP0LST	EQ	0F0026		:halfword, offset to port 0 msg length table
   277	0F002ENGTH	EQ	0F0028		:byte table, lengths of non-0 port msgs
   278				
   279				:	Define Registers
   280	000000			R0	EQ	0
   281	000001			R1	EQ	1
   282	000002			R2	EQ	2
   283	000003			R3	EQ	3
   284	000004			R4	EQ	4
   285	000005			R5	EQ	5
   286	000006			R6	EQ	6
   287	000007			R7	EQ	7
   288	000008			R8	EQ	8
   289	000009			R9	EQ	9
   290	00000A			R10	EQ	$A 10
   291	00000B			R11	EQ	$A 11
   292	00000C			R12	EQ	$A 12
   293	00000D			R13	EQ	$A 13
   294	00000E			R14	EQ	$A 14
   295	00000F			R15	EQ	$A 15
Page  3-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   296				Page  3-7	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   297				
   298				:	AREA DEFINITIONS
   299					GL	A.DATA,A.CODE,A.BDAT,A.RING,A.BUFF
   300				:
   301	000000			  IF	\A.DATA
   302	000001			  ELSE
   303	000000			A.DATA	EQ	0	:DEFAULT DATA AREA
   304				  EI
   305				
   306	000000			  IF	\A.CODE
   307	000001			  ELSE
   308	000001			A.CODE	EQ	1	:DEFAULT CODE AREA
   309				  EI
   310				
   311	000000			  IF	\A.BDAT
   312	000001			  ELSE
   313	000002			A.BDAT	EQ	2	:DEFAULT BASED DATA AREA
   314				  EI
   315				
   316	000000			  IF	\A.RING
   317	000001			  ELSE
   318	000002			A.RING	EQ	2	:DEFAULT RING AREA
   319				  EI
   320				
   321	000000			  IF	\A.BUFF
   322	000001			  ELSE
   323	000002			A.BUFF	EQ	2	:DEFAULT BUFFER AREA
   324				  EI
   325				Page  3-8	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   326				
   327				:	SVC DEFINITIONS
   328				:
   329					GL	DISMIS,FASTD,SYS,RSTRT.,CFGND.,DBGON.,DBGOF.,TSTDB.
   330					GL	FREEZ.,THAW.,TFREZ.,RDDTR.,RDDTP.,RBREG.,RBPSD.
   331					GL	RFREG.,RFPSD.,RDMAC.,RBMAC.,RFMAC.,SET1P.,SETP.,SETBE.
   332					GL	SETFE.,IO,IOQRY.,CSYNI.,CSYNO.,FSYNO.,TIISC.
   333					GL	CSUPF.,CSUPR.,FREZS.,THAWS.,ALARM.,RSCLK.,SSCLK.,SUDIA.
   334					GL	SFREZ.,HALT.,SHALT.
   335					GL	TIISI.,CASYN.,CPRT.,FPRT.,CSIO.,CMBRD.,FMBIN.,FMBOT.
   336					GL	SHARE,K.IN,K.OUT,KIO,BDISC,SDISC
   337				:
   338	000000			DISMIS	EQ	0	:DISMISS SVC
   339	000001			FASTD	EQ	1	:FAST DISMISS SVC
   340				:
   341	000002			SYS	EQ	2	:SYS SVC
   342				
   343				:	SYS SVC SUBOPERANDS
   344	000000			RSTRT.	EQ	0	:Restart syscall
   345	000001			CFGND.	EQ	1	:Connect foreground syscall
   346	000002			DBGON.	EQ	2	:Debug mode ON syscall
   347	000003			DBGOF.	EQ	3	:Debug mode OFF syscall
   348	000004			TSTDB.	EQ	4	:Test debug mode syscall
   349	000005			FREEZ.	EQ	5	:Freeze slot syscall
   350	000006			THAW.	EQ	6	:Thaw slot syscall
   351	000007			TFREZ.	EQ	7	:Test freeze syscall
   352	000008			RDDTR.	EQ	8	:Read DDT register syscall
   353	000009			RDDTP.	EQ	9	:Read DDT PSD syscall
   354	00000A			RBREG.	EQ	0A	:Read background register syscall
   355	00000B			RBPSD.	EQ	0B	:Read background PSD syscall
   356	00000C			RFREG.	EQ	0C	:Read foreground register syscall
   357	00000D			RFPSD.	EQ	0D	:Read foreground PSD syscall
   358	00000E			RDMAC.	EQ	0E	:Read DDT MAC register syscall
   359	00000F			RBMAC.	EQ	0F	:Read background MAC register syscall
   360	000010			RFMAC.	EQ	10	:Read foreground MAC register syscall
   361	000011			SET1P.	EQ	11	:Set 1 protect syscall
   362	000012			SETP.	EQ	12	:Set protection syscall
   363	000013			SETBE.	EQ	13	:Set background execution addr syscall
   364	000014			SETFE.	EQ	14	:Set foreground execution addr syscall
   365	000015			LMAC.	EQ	15	:Set up MAC from CTA (DDT only)
   366	000016			CSUPF.	EQ	16	:Check SUP freeze state
   367	000017			CSUPR.	EQ	17	:Check SUP run Q state
   368	000018			FREZS.	EQ	18	:Freeze the SUP
   369	000019			THAWS.	EQ	19	:Thaw the SUP
   370	00001A			ALARM.	EQ	1A	:Set/Clear alarm
   371	00001B			RSCLK.	EQ	1B	:Read the super-clock
   372	00001C			SSCLK.	EQ	1C	:Set the super-clock
   373	00001D			SUDIA.	EQ	1D	:Set user diagnostic
   374	00001E			UCORE.	EQ	1E	:Get slot physical addr & size (DDT only)
   375	00001F			SFREZ.	EQ	1F	:Super-freeze slot
   376	000020			HALT.	EQ	20	:Halt the slot
   377	000021			SHALT.	EQ	21	:Super-halt the slot
   378	000022			SVSPY.	EQ	22	:Start/Stop SPY
Page  3-9	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   379	000023			DISCO.	EQ	23	:Disconnect Logical Unit
   380				Page  3-10	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   381				
   382	000003			IO	EQ	3	:I/O SVC
   383				:	I/O SUBOPERANDS
   384	008000			IOQRY.	EQ	8000	:Query I/O attributes
   385	000000			CSYNI.	EQ	0	:Connect SYNC input
   386	000001			CSYNO.	EQ	1	:Connect SYNC output
   387	000002			FSYNO.	EQ	2	:Force SYNC output
   388	000003			CASYN.	EQ	3	:Connect ASYNC
   389	000004			CPRT.	EQ	4	:Connect Printer
   390	000005			FPRT.	EQ	5	:Force Printer
   391	000006			TIISC.	EQ	6	:T-II SYNC Connect
   392	000007			TIISI.	EQ	7	:T-II SYNC Idle test
   393	000008			CSIO.	EQ	8	:Connect SIO
   394	000009			CMBRD.	EQ	9	:Connect SIO mother board
   395	00000A			FMBIN.	EQ	0A	:Force mother board input
   396	00000B			FMBOT.	EQ	0B	:Force mother board output
   397	000004			SHARE	EQ	04	:Shared device SVC
   398	00000A			K.IN	EQ	0A	:Kernel Input SVC
   399	00000B			K.OUT	EQ	0B	:Kernel Output SVC
   400	00000D			KIO	EQ	0D	:Kernel-I/O (general) SVC
   401	00000E			BDISC	EQ	0E	:Big disc SVC (obsolete)
   402	00000F			SDISC	EQ	0F	:Small disc SVC (obsolete)
   403				Page  3-11	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Assembly Switch Definitions	- START.LIB

   404				
   405	000000				IF	IRSIZE&3;	REMARK	%IRSIZE should be multiple of 4
   406				IRSIZE	EQ	(IRSIZE!3)+1;	EI
   407	000000				IF	ORSIZE&3;	REMARK	%ORSIZE should be multiple of 4
   408				ORSIZE	EQ	(ORSIZE!3)+1;	EI
   409				
   410	000001			  IF	1-\MAXPRT
   411	00007F			MAXPRT	EQ	NPORT-1
   412	00007F			HPRT0	EQ	MAXPRT
   413				  EI
   414				
   415	000001			  IF	\MAXHST
   416	000000			  ELSE
   417					REMARK	%PLEASE DEFINE MAXHST. 1 ASSUMED.
   418				MAXHST	EQ	1
   419				HOST0	EQ	HOSTNO
   420				  EI
   421				
   422				
   423				:	DEFINE START OF SEGMENTS
   424	000000			Q	EQ	0
   425					NOLIST
   426					RE	0F
   427				  IF	\SEG|Q|
   428					GL	SEG|Q|
   429				  ELSE
   430					SEG	Q
   431					GL	SEG|Q|
   432				SEG|Q|
   433				  EI
   434				Q	EQ	Q+1
   435					ER
   436					LIST
   437				
   438				:GENERATE DIAGNOSTICS
   439	000000			Q	EQ	0
   440					NOLIST
   441				QQ	EQ	0;	RE	0F
   442					IF	((Q*10000)%SEG|Q|)&7FFFFFFF
   443				QQ	EQ	1;	REMARK	%SYMBOL SEG
   444					NUMBER	Q
   445					REMARK	 IS NOT DEFINED PROPERLY. VALUE IS 
   446					NUMBER	SEG|Q|
   447					EI
   448				Q	EQ	Q+1;	ER
   449					LIST
   450				
   451	000000				IF	QQ;
   452					REMARK	%START.LIB **MUST** be assembled FIRST!!%;
   453					EI
Page  4-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   454					SUBTTL	ISIS Ring Handling Routines	- IPIRNG.LIB
   455				:******************************************************************
   456				:
   457				:	This program is the sole property and confidential
   458				:	information of Tymshare, Inc., and may not be copied
   459				:	in whole or in part or disclosed to any third party
   460				:	without the prior written consent of Tymshare.
   461				:
   462				:*******************************************************************
   463					RA	0		:	FRING.LIB
   464				
   465				:	ISIS RING HANDLERS
   466				
   467				:	This package is the fast, efficient ring handler set
   468				:	The following CONSTRAINTS apply:
   469				:	1.  Once started, register 14 or 15 is dedicated to that
   470				:		operation, until it is "ended".
   471				:	2.  If a new operation is started before the previous operation is
   472				:		"ended", the previous operation is aborted, and the
   473				:		appropriate ring is effectively left unchanged.
   474				:
   475				:	This package now permits simultaneous input and output!!!
   476				:		R15 is used for output operations
   477				:		R14 is used for input operations
   478				
   479				:*: NOTE: ISIS II will soon use negative indexing, like this ring package.
   480				:*:	To convert this package, remove all lines with ':*:' in them,
   481				:*:	and change all occurrences of 'LHL R15/R14' to 'LH R15/R14'.
   482				
   483				:	The package contains both utility and primitive routines:
   484				
   485				:	utility routines are called with link R5,
   486				:	they preserve registers R6--R14.
   487				:	OCS	Output Canned String
   488				:		R2 = port #, R3 = pointer to string (SC format)
   489				:		OCS will output string as a data message to the specified
   490				:		port. OCS goes to completion, and "ends the operation.
   491				:	OCM	Output Canned Message
   492				:		R2 = port #, R3 = pointer to string (SC format)
   493				:		OCM will output the string as a message to the specified port
   494				:		OCM goes to completion, and "ends the operation.
   495				:	OBS	Output Byte String
   496				:		R2 = number of characters, R3 = pointer to string
   497				:		OBS will output specified string into the current message
   498				:		message must have already been "started", and is NOT "ended".
   499				
   500				:	primitive input routines.  All link on R4, & preserve R1-R3, R5-R13, R15:
   501				:	LOOK	Determine if an input message exists...normal return if not
   502				:		skip (4) return if so, and then:
   503				:		R1 = port number
   504				:		R2 = message type code (peek)
   505				:		On skip return, condition codes are set such that JE will
   506				:		succeed on port 0.  The port number will have been removed
Page  4-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   507				:		from the message but the message code will not have been
   508				:		removed (you get a peek at it).
   509				:	GETCH	Get a character, returned in R0.
   510				:	GETH	Get a halfword, returned in R0.  An even number of bytes 
   511				:		should have been removed previously for expected results.
   512				:	GETW	Get a word, returned in R0.  An even number of halfwords 
   513				:		should have been removed previously for expected results.
   514				:	FLUSH	Flush away ("end") remainder of input message.  R0 is number
   515				:		of bytes remaining to flush.
   516				:	ELIR	End-Logical-Input-Record.  "Ends" current message, sets
   517				:		up pointers for next message.
   518				
   519				:	Primative output routines.  All link on R4, preserve R1-R3, R5-R14,
   520				:	unless used for arguments, or otherwise specified:
   521				:	SPACE	Returns R0 = number of characters of space available in	
   522				:		output ring. Sets up R15 for "start" of message.
   523				:	ROOM	R0 = number of characters required for next message,
   524				:		returns when that much room is available in output ring.
   525				:		MAY DISMISS.
   526				:		sets up R15 for "start" of message. SMASHES R1.
   527				:	SLOR	Start Logical Output Record.
   528				:		R0 = number of bytes required.
   529				:		R1 = port #
   530				:		R2 = message type code.
   531				:		Provides function of ROOM, PUTH, and PUTCH for first 3 chars
   532				:		of message. MAY DISMISS. SMASHES R3.
   533				:	PUTCH	places character in R0 in next position of ring.
   534				:	PUTH	places halfword in R0 in next position of ring.  Even number
   535				:		of bytes have been output previously in this message.
   536				:	PUTW	places word in R0 in next position of ring.  Even number of
   537				:		halfwords should have been output previously in this message.
   538				:	ELODR	End Logical Output Data Record
   539				:		places byte count into message type to make data message,
   540				:		then "ends" message.  Smashes R0, R1.
   541				:	ELOR	End Logical Output Record
   542				:		"ends" message.
   543				
   544				:	CONVENTIONS:
   545				:	ROUTINES USE DEDICATED REGISTERS:
   546				:	R15	OUTPUT RING INDEX
   547				:	R14	INPUT RING INDEX
   548				:
   549				:	NOTE....
   550				:		IRSIZE AND ORSIZE MUST EACH BE LESS THAN 32K.
   551				Page  4-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   552				
   553					GL	IRING,ORING,IRSIZE,ORSIZE
   554					GL	OCS,OCM,OBS
   555					GL	LOOK,GETCH,GETH,GETW,FLUSH,ELIR
   556					GL	SPACE,ROOM,SLOR,PUTCH,PUTH,PUTW,ELODR,ELOR
   557				        GL      PERBUF,IOWSIZ,STSEG2
   558				
   559					MO	.,RING
   560	000000			NFMI	EQ	0		:RELATIVE INDEX OF NEXT-FILL-MESSAGE-INDEX
   561	000002			CEI	EQ	2		:RELATIVE INDEX OF CURRENT-EMPTY-INDEX
   562	000004			RING	EQ	4		:RELATIVE INDEX OF START OF RING DATA
   563				
   564				:	DEFINE DATA AREA
   565	020000				SEG	A.RING		:RINGS IN RING AREA
   566				
   567	020000			STSEG2  BS      100             :SAVE 1ST 256 BYTES FOR POINTERS TO
   568				                                :THE RINGS AND OTHER BUFFER AREAS AS
   569				                                :DEFINED BY THE SLOT INTERFACE
   570				:	THE DISPATCHER OUTPUT RING
   571	020100			ORING	HS	0		:OUTPUT BLOCK START ADDRESS
   572	020100	0000 			HC	0		:OUTPUT NEXT FILL MESSAGE INDEX
   573	020102	0000 			HC	0		:OUTPUT CURRENT ENTRY INDEX
   574	020104				BS	ORSIZE		:THE OUTPUT RING
   575				
   576				:	THE DISPATCHER INPUT RING
   577	020900			IRING	HS	0		:INPUT BLOCK START ADDRESS
   578	020900	0000 			HC	0		:INPUT NEXT FILL MESSAGE INDEX
   579	020902	0000 			HC	0		:INPUT CURRENT EMPTY INDEX
   580	020904				BS	IRSIZE		:THE INPUT RING
   581				
   582	021100			PERBUF  BS      PBUFSZ                  :AREA FOR PERIPHERAL DEVICE BUFFERS
   583				
   584	001100			IOWSIZ  EQ      .-STSEG2
   585				
   586	00EF00			        IF      10000-IOWSIZ
   587				         REMARK %SEG 2 SIZE = 
   588				         NUMBER IOWSIZ
   589				         REMARK %
   590	000000			        ELSE
   591				         REMARK %I/O RINGS OR OTHER BUFFERS IN SEG 2 TOO LARGE%
   592				         QUIT
   593				        EI
   594				Page  4-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   595				
   596				:	CODE AREA
   597	010000				SEG	A.CODE
   598				:	INPUT ROUTINES
   599				
   600				:	LOOK AT A RING ENTRY
   601				:	NORMAL RETURN IF RING EMPTY
   602				:	ELSE SKIP RETURN, PORT RETURNED IN R1
   603				:	MESSAGE TYPE RETURNED IN R2
   604				:	ALL REGISTERS SET UP FOR TRANSFER
   605				:	POSITION IS ADVANCED PAST PORT#
   606	000000				IF	\LOOK;.LOOK.	 HS	0;
000001				ELSE
   607	010000			LOOK	 HS	0
   608					EI
   609	010000	73E0 4002 0902 		LHL	R14,CEI+IRING,,	:GET CURRENT EMPTY INDEX
   610	010006	45E0 4002 0900 		CLH	R14,NFMI+IRING,,	:TEST IF CAUGHT UP
   611	01000C	0334 			JER	R4		:EMPTY...NORMAL RETURN
   612	01000E	CBE0 07FC 		SHI	R14,IRSIZE	:*: CONVERT TO NEGATIVE INDEX
   613	010012	731E 4002 1100 		LHL	R1,IRING+RING+IRSIZE,R14,	:GET PORT #
   614	010018	26E2 			AIS	R14,2		:BUMP POINTER PAST PORT #
   615	01001A	D32E 4002 1100 		LB	R2,IRING+RING+IRSIZE,R14,	:GET MESSAGE TYPE
   616	010020	0811 			LR	R1,R1		:SET CONDITION CODES
   617	010022	4304 0004 		J	4,R4		:THEN SKIP RETURN
   618				
   619				:	GET A CHARACTER FROM THE INPUT RING
   620				:	CHARACTER RETURNED IN R0
   621	010026	D30E 4002 1100 	GETCH	LB	R0,IRING+RING+IRSIZE,R14,	:GET THE CHAR
   622	01002C	26E1 			AIS	R14,1		:BUMP INDEX
   623	01002E	0214 			JLR	R4		:RETURN IF NOT
   624	010030	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   625	010034	0304 			JR	R4		:AND EXIT
   626				
   627				:	GET A HALF-WORD FROM THE INPUT RING
   628				:	ASSUME HAVE REMOVED AN INTEGRAL NUMBER OF HALF-WORDS FROM RECORD
   629				:	HALF-WORD RETURNED IN R0
   630	010036	730E 4002 1100 	GETH	LHL	R0,IRING+RING+IRSIZE,R14,	:GET THE DATA
   631	01003C	26E2 			AIS	R14,2		:BUMP INDEX
   632	01003E	0214 			JLR	R4		:RETURN IF NOT
   633	010040	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   634	010044	0304 			JR	R4		:AND EXIT
   635				
   636				:	GET A WORD FROM THE INPUT RING
   637				:	ASSUME HAVE REMOVED AN INTEGRAL NUMBER OF WORDS FROM RECORD
   638				:	WORD RETURNED IN R0
   639	010046	580E 4002 1100 	GETW	L	R0,IRING+RING+IRSIZE,R14,	:GET THE DATA
   640	01004C	26E4 			AIS	R14,4		:BUMP INDEX
   641	01004E	0214 			JLR	R4		:RETURN IF NOT
   642	010050	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   643	010054	0304 			JR	R4		:AND EXIT
   644				
   645				:	FLUSH AN INPUT RECORD
   646				:	NUMBER OF CHARS TO FLUSH IN R0
Page  4-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   647	010056	0AE0 		FLUSH	AR	R14,R0		:ADVANCE RING AND FALL THROUGH
   648				
   649				:	END LOGICAL INPUT RECORD
   650	010058	26E3 		ELIR	AIS	R14,3		:FORCE TO NEXT WORD
   651	01005A	C4E0 FFFC 		NHI	R14,-4
   652	01005E	2113 			JLFS	ELIR2		:NO
   653	010060	CBE0 07FC 		SHI	R14,IRSIZE	:YES
   654				ELIR2
   655	010064	CAE0 07FC 		AHI	R14,IRSIZE	:*: CONVERT TO POSITIVE INDEX
   656	010068	40E0 4002 0902 		STH	R14,CEI+IRING,,
   657	01006E	0304 			JR	R4		:AND EXIT
   658				Page  4-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   659				
   660				:	OUTPUT ROUTINES
   661				
   662				:	OUTPUT "CANNED" MESSAGE
   663				:	LINK ON R5
   664				:	R2 = PORT #
   665				:	R3 = POINTER TO STRING (FORMAT: n\B1\...\Bn)
   666	010070	D303 0000 	OCM	LB	R0,0,R3		:GET COUNT n
   667	010074	2605 			AIS	R0,5		:COMPUTE SPACE REQUIREMENTS
   668	010076	C400 FFFC 		NHI	R0,-4
   669	01007A	4140 806E 		JAL	R4,ROOM		:INSURE THERE IS ROOM
   670	01007E	0802 			LR	R0,R2		:COPY PORT #
   671	010080	4140 80E0 		JAL	R4,PUTH		:PLACE PORT NUMBER
   672	010084	D323 0000 		LB	R2,0,R3		:GET COUNT AGAIN
   673	010088	4300 801E 		J	OCS1		:SKIP TO PLACE THE STRING
   674				
   675				:	OUTPUT "CANNED" STRING
   676				:	LINK ON R5
   677				:	R2 = PORT #
   678				:	R3 = POINTER TO TEXT STRING (FORMAT n\B1\...\Bn)
   679	01008C	D303 0000 	OCS	LB	R0,0,R3		GET COUNT n
   680	010090	2606 			AIS	R0,6		:COMPUTE SPACE REQUIREMENTS
   681	010092	C400 FFFC 		NHI	R0,-4
   682	010096	4140 8052 		JAL	R4,ROOM		:INSURE THERE IS ROOM
   683	01009A	0802 			LR	R0,R2
   684	01009C	4140 80C4 		JAL	R4,PUTH		:PLACE PORT NUMBER
   685	0100A0	D323 0000 		LB	R2,0,R3
   686	0100A4	0802 			LR	R0,R2		:GET THE COUNT n
   687	0100A6	4140 80AA 		JAL	R4,PUTCH	:PLACE IT...MESSAGE TYPE 1-7D
   688	0100AA	2631 		OCS1	AIS	R3,1		:BUMP SOURCE CHARACTER POINTER
   689	0100AC	D303 0000 		LB	R0,0,R3		:GET THE NEXT CHARACTER
   690	0100B0	4140 80A0 		JAL	R4,PUTCH	:PLACE IT INTO RING
   691	0100B4	2721 			SIS	R2,1		:REDUCE COUNT
   692	0100B6	2026 			JGBS	OCS1		:REPEAT UNTIL ALL CHARACTERS PLACED
   693	0100B8	4140 80E6 		JAL	R4,ELOR		:END LOGICAL OUTPUT RECORD
   694	0100BC	0305 			JR	R5		:THEN EXIT
   695				
   696				:	OUTPUT A BYTE STRING
   697				:	LINK ON R5
   698				:	R3 = POINTER TO STRING
   699				:	R2 = NUMBER OF CHARACTERS TO OUTPUT FROM STRING
   700	0100BE	2631 		OBS1	AIS	R3,1		:BUMP CHARACTER POINTER
   701	0100C0	D303 0000 	OBS	LB	R0,0,R3		:GET THE NEXT CHARACTER
   702	0100C4	4140 808C 		JAL	R4,PUTCH	:PLACE IT INTO RING
   703	0100C8	2721 			SIS	R2,1		:REDUCE COUNT
   704	0100CA	2026 			JGBS	OBS1		:REPEAT UNTIL ALL CHARACTERS PLACED
   705	0100CC	0305 			JR	R5		:THEN EXIT
   706				
   707				:	FIND SPACE IN THE RING (HOW BIG A MESSAGE IT WILL TAKE)
   708				:	RETURNS R0 = NUMBER OF CHARS OF SPACE
   709	0100CE	2504 		SPACE	LCS	R0,4		:SET MASK
   710	0100D0	73F0 4002 0100 		LHL	R15,NFMI+ORING,,
   711	0100D6	4400 4002 0102 		NH	R0,CEI+ORING,,	:FORCE EMPTIER TO WORD BOUNDARY
Page  4-7	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   712	0100DC	0B0F 			SR	R0,R15		:SPACE BETWEEN US AND EMPTIER
   713	0100DE	2123 			JGFS	SPACE1		:SKIP IF NO WRAP-AROUND
   714	0100E0	CA00 07FC 		AHI	R0,ORSIZE	:ELSE CORRECT FOR WRAP
   715	0100E4	2704 		SPACE1	SIS	R0,4		:CORRECT FOR POSSIBLE OVERFLOW
   716	0100E6	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEGATIVE INDEX
   717	0100EA	0304 			JR	R4		:AND RETURN
   718				
   719				:	INSURE THERE IS ROOM IN THE RING (DISMISS IF NECESSARY)
   720				:	EXPECTS R0 = NUMBER OF CHARACTERS OF SPACE
   721	0100EC	73F0 4002 0100 	ROOM	LHL	R15,NFMI+ORING,,
   722	0100F2	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEG. INDEX
   723	0100F6	2514 		ROOM1	LCS	R1,4		:SET MASK
   724	0100F8	4410 4002 0102 		NH	R1,CEI+ORING,,	:FORCE HIM TO WORD BOUNDARY
   725	0100FE	CB10 07FC 		SHI	R1,ORSIZE	:*:
   726	010102	0B1F 			SR	R1,R15		:CHECK RELATIVE POSITIONS
   727	010104	2124 			JGFS	ROOM2		:SKIP IF HE'S AHEAD OF US
   728	010106	0334 			JER	R4		:EQUAL...HE'S EMPTY...GO DO IT
   729	010108	CA10 07FC 		AHI	R1,ORSIZE		:HE'S BEHIND US
   730	01010C	2714 		ROOM2	SIS	R1,4		:ALLOW FOR POTENTIAL OVERFLOW
   731	01010E	0901 			CR	R0,R1
   732	010110	0324 			JLER	R4		:ROOM EXISTS...GO DO IT
   733	010112	E100 0000 		SVC	DISMISS,0
   734	010116	4300 FFDC 		J	ROOM1		:AND GO TRY AGAIN
   735				
   736				:	START LOGICAL OUTPUT RECORD
   737				:	PROVIDES FUNCTION OF ROOM, PUTH, & PUTCH FOR FIRST 3 CHARS OF MESSAGE
   738				:	R0 = NUMBER OF CHARACTERS OF SPACE REQUIRED
   739				:	R1 = PORT #
   740				:	R2 = MESSAGE CHARACTER CODE
   741	01011A	73F0 4002 0100 	SLOR	LHL	R15,NFMI+ORING,,
   742	010120	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEG. INDEX
   743	010124	2534 		SLOR1	LCS	R3,4		:SET A MASK
   744	010126	4430 4002 0102 		NH	R3,CEI+ORING,,	:FORCE RECEIVER TO WORD BOUNDARY
   745	01012C	CB30 07FC 		SHI	R3,ORSIZE	:*:
   746	010130	0B3F 			SR	R3,R15
   747	010132	2123 			JGFS	SLOR2
   748	010134	CA30 07FC 		AHI	R3,ORSIZE	:ACCOUNT FOR POSSIBLE RING FOLDING
   749	010138	2734 		SLOR2	SIS	R3,4		:ALLOW FOR POTENTIAL OVERFLOW
   750	01013A	0930 			CR	R3,R0
   751	01013C	2314 			JGEFS	SLOR3		:SKIP IF WE CAN GO
   752	01013E	E100 0000 		SVC	DISMISS,0
   753	010142	220F 			JBS	SLOR1
   754	010144	401F 4002 0900 	SLOR3	STH	R1,ORING+RING+ORSIZE,R15,	:OK...PLACE MESSAGE
   755	01014A	D22F 4002 0902 		STB	R2,2+ORING+RING+ORSIZE,R15,
   756	010150	26F3 			AIS	R15,3		:BUMP PAST THESE CHARACTERS
   757	010152	0304 			JR	R4		:AND EXIT
   758				
   759				:	PUT A CHARACTER INTO THE RING
   760				:	R0 = CHARACTER
   761	010154	D20F 4002 0900 	PUTCH	STB	R0,ORING+RING+ORSIZE,R15,	:PLACE THE CHARACTER
   762	01015A	26F1 			AIS	R15,1		:BUMP INDEX
   763	01015C	0214 			JLR	R4		:SKIP IF NOT
   764	01015E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
Page  4-8	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS Ring Handling Routines	- IPIRNG.LIB

   765	010162	0304 			JR	R4		:AND EXIT
   766				
   767				:	PUT A HALF-WORD INTO THE RING
   768				:	R0 = HALF-WORD
   769	010164	400F 4002 0900 	PUTH	STH	R0,ORING+RING+ORSIZE,R15,	:PLACE THE HALF-WORD
   770	01016A	26F2 			AIS	R15,2		:BUMP INDEX
   771	01016C	0214 			JLR	R4		:EXIT IF NOT
   772	01016E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
   773	010172	0304 			JR	R4		:AND EXIT
   774				
   775				:	PUT A WORD INTO THE RING
   776				:	R0 = WORD
   777	010174	500F 4002 0900 	PUTW	ST	R0,ORING+RING+ORSIZE,R15,	:PLACE THE WORD
   778	01017A	26F4 			AIS	R15,4		:BUMP INDEX
   779	01017C	0214 			JLR	R4		:SKIP IF NOT
   780	01017E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
   781	010182	0304 			JR	R4		:AND EXIT
   782				
   783				:	END LOGICAL OUTPUT DATA RECORD
   784	010184	7310 4002 0100 	ELODR	LHL	R1,NFMI+ORING,,	:GET START OF THIS MESSAGE
   785	01018A	CB10 07FC 		SHI	R1,ORSIZE	:*: CONVERT TO NEG. INDEX
   786	01018E	080F 			LR	R0,R15		:COPY MESSAGE END
   787	010190	0B01 			SR	R0,R1		:COMPUTE SIZE OF THIS MESSAGE
   788	010192	2313 			JGEFS	ELODR2		:SKIP IF NO WRAP-AROUND
   789	010194	CA00 07FC 		AHI	R0,ORSIZE		:ELSE CORRECT FOR WRAP
   790	010198	2703 		ELODR2	SIS	R0,3		:MAKE ALLOWANCE FOR HEADER
   791	01019A	0334 			JER	R4		:EXIT IF ZERO LENGTH MESSAGE
   792	01019C	D201 4002 0902 		STB	R0,2+ORING+RING+ORSIZE,R1,	:INSERT MESSAGE TYPE INTO MESSAGE
   793								:AND FALL THROUGH
   794				
   795				:	END LOGICAL OUTPUT RECORD
   796	0101A2	26F3 		ELOR	AIS	R15,3
   797	0101A4	C4F0 FFFC 		NHI	R15,-4
   798	0101A8	2113 			JLFS	ELOR2
   799	0101AA	C8F0 F804 		LHI	R15,-ORSIZE	:FOLD IF NECESSARY
   800				ELOR2
   801	0101AE	CAF0 07FC 		AHI	R15,ORSIZE	:*: CONVERT BACK
   802	0101B2	40F0 4002 0100 		STH	R15,NFMI+ORING,,	:NOW ADVANCE POINTER TO NEXT MESSAGE
   803	0101B8	0304 			JR	R4		:AND EXIT
   804					EM
Page  5-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   805					SUBTTL	ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB
   806				        REMARK  %CRASH.LIB    11-15-84 AWT
   807					REMARK	%THIS VERSION HAS AN OPTION FOR EXTENDED CRASH PROCESSING.
   808				
   809				:******************************************************************
   810				:
   811				:	This program is the sole property and confidential
   812				:	information of Tymshare, Inc., and may not be copied
   813				:	in whole or in part or disclosed to any third party
   814				:	without the prior written consent of Tymshare.
   815				:
   816				:*******************************************************************
   817					RA	0		:	CRASH.LIB	MFR 07/14/81
   818				
   819				:       Set UPSW to turn off tracing.
   820				:       Added CTIME and CRTIME to save crash times in GMT.
   821				:       Added a NCRSAV option to keep old copies of crash tables.
   822				:         April 13, 1983 AWT
   823				:
   824				:	Changed the supervisor's log message to report the PRODID.
   825				:	Sep. 20, 1982 SCY.
   826				:	ENTRY2 (restart service) changed to clear input and output
   827				:	rings PRIOR to issuing Restart SVC to prevent crash-loop if
   828				:	Dispatcher has crashed. June 17, 1982 MDS.
   829				
   830				:			ISIS - II Version
   831				:
   832					GL	CRASH,CRASHC,CPOINT,CFROM,CRREG,ENTRY,START,CRAT,CRSHCT,CRSTOP
   833				        GL      PRODID,NCRSAV,CTIME,CRTIME,EXCRSH
   834					MO	.,CRASH
   835				
   836				
   837				:	Generalized crash package.
   838				:	Handles both software and hardware crashes.  On any crash, the
   839				:	registers are saved in CRXREG, and CRSHCT is incremented.
   840				:	Software crashes occur via  JAL R10,CRASH .  CRASH saves (R10) in cell
   841				:	CPOINT.  Software crashes may be "good" or "bad"...if "good", the
   842				:	calling sequence is:
   843				
   844				:		JAL	R10,CRASH
   845				:						from a bad one
   846				:		HC	0		:this key distinguishes a good crash
   847				:		BC	4*L,Y		:first byte is 4*register linked to
   848				:						routine, Y is the reason
   849				:	then register (L) is saved in CFROM, and Y is saved in CRASHC
   850				
   851				:	in the event of a hardware failure, CPOINT contains the instruction
   852				:	address at the time of failure, CRASHC contains the failure reason,
   853				:	and CFROM is set =-1.
   854				
   855				:	On completion of crash, transfers to label START, defined
   856				:	in the user code.
   857				:
Page  5-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   858				:	The symbol CRSTOP may be set to 0 or 1.  If 1 the crash routine will
   859				:	be executed only once.  the second time through the crash area will
   860				:	be set up as specified above and then registers will be restored to
   861				:	their entry value and the slot will be frozen. If it is thawed it
   862				:	will restart.
   863				:
   864				:       The symbol NCRSAV defines the number of crash tables to be saved.
   865				:       It will be set to 1 by default. (In TYMFIL CRSHTB macro is used
   866				:       to define NCRSAV)
   867				:
   868				:       Entering :R CRAT,CRTSIZ (or 4C) will dump the last 
   869				:       crash table, CRAT+CRTLEN (or 50),CRTSIZ will dump the    
   870				:       previous crash table and so on.
   871				:
   872				:       CTIME,4 gives the last crash time (in GMT), CTIME+CRTLEN,4
   873				:       gives the previous crash time and so on.
   874				:
   875				:	The symbol EXCRSH, if set to 1, allows a JAL to label
   876				:	CRSH.P out of the crash routine for extended crash processing.
   877				:	The link is R5.  EXCRSH is defaulted to 0.
   878				:
   879				:
   880				Page  5-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   881				
   882	000000			  IF	\CRSTOP
   883	000001			  ELSE
   884	000000			CRSTOP	EQ	0
   885				  EI
   886				  
   887	000000			  IF    \NCRSAV                 :# OF CRASH TABLES TO SAVE
   888	000001			  ELSE                          :IT MAY BE DEFINED IN TYMFIL
   889	000001			NCRSAV  EQ      1               :OTHERWISE IT IS 1 BY DEFAULT
   890				  EI
   891				
   892	000000			  IF	\EXCRSH			:DEFAULT TO NO EXTENDED CRASH HANDLING
   893	000001			  ELSE
   894	000000			EXCRSH	EQ	0
   895				  EI
   896				
   897				
   898	0101BA			CRTENT  EQ      .               :CRASH TABLE ENTRY
   899	000000			        ORG     0
   900	000000			CRSHCT	HS	1		:CRASH COUNT...HOW MANY TIMES CRASHED
   901	000002			CRASHC	HS	1		:CRASH CODE (INIT'ED TO MANUAL RESTART)
   902	000004			CPOINT	HS	2		:WHERE CRASH OCCURED
   903	000008			CFROM	HS	2    		:WHERE CRASH WAS CALLED FROM
   904	00000C			CRXREG	HS	20		:CRASH REGISTER SAVE AREA
   905	00004C			CRTSIZ  WS      0               :SIZE OF CRASH TABLE WITHOUT CRTIME
   906	00004C			CRTIME  WS      1               :REAL TIME OF CRASH (GMT)
   907	000050			CRTLEN  WS      0               :LENGTH OF CRASH TABLE WITH CRTIME
   908	0101BA			        ORG     CRTENT  
   909				
   910	000000			        SEG     A.DATA
   911	000000			        HS      0
   912	000000			CTIME   WS      1               :STORAGE FOR CRASH TIME OF LAST CRASH
   913	000004			CRAT    BS      CRTLEN*NCRSAV   :STORAGE FOR CRASH TABLE(S)
   914	000010			CRREG   EQ      CRAT+CRXREG
   915	000054			RGSTOR  WS      10              :TEMPORARY STORAGE FOR REGISTERS
   916	000094			FGNDFL	HS	1		:FOREGROUND FLAG
   917				
   918	000098	0000 0000 0001 	TRBOFF  WC      0,FAIL0         :TRACE BIT OFF, GO TO FAIL0
		01F4 		
   919	0000A0	0000 0000 0001 	TRCOFF  WC      0,CRASH0        :TRACE BIT OFF, GO TO CRASH0
		026A 		
   920	0000A8	0000 0000 0001 	PSWSAV  WC      0,START         :RESTORE PSW,  GO TO INITIALIZATION CODE
		05EE 		
   921	0000B0	0000 0000 	CHFLAG  WC      0               :USED FOR ANY CHANGES ON PSW
   922				
   923				
   924	0101BA				SEG	A.CODE		:CODE AREA
   925	0101BA	01		CRSHCD	BC	1	:MANUAL RESTART
   926	0101BB	00 			BC	0	:POWER FAILURE
   927	0101BC	0E			BC	0E	:PARITY ERROR
   928	0101BD	10 			BC	10	:DISPATCHER CRASH
   929	0101BE	11			BC	11	:ILLEGAL INSTRUCTION
   930	0101BF	12 			BC	12	:ILLEGAL SVC
Page  5-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   931	0101C0	13			BC	13	:SYSTEM CRASH
   932	0101C1	14 			BC	14	:PROTECTION VIOLATION
   933	0101C2	15			BC	15	:NON-RECOVERABLE DEVICE CHECK
   934	0101C3	16 			BC	16	:WATCH FROG TIMER - - TIME OUT
   935				
   936					RA	0
   937				:	GENERAL MACHINE FAILURE
   938	0101C4			FAIL	HS	4		:PSD SAVED HERE
   939	0101CC				HS	4		:R0,R1 SAVED HERE
   940	0101D4	5000 4000 0054 	        ST      R0,RGSTOR,,     :SAVE R0
   941	0101DA	5020 4000 0058 	        ST      R2,RGSTOR+4,,   :SAVE R2
   942	0101E0	4120 817A 	        JAL     R2,SAVPSW       :SAVE CURRENT PSW
   943	0101E4	5800 4000 0054 	        L       R0,RGSTOR,,     :RESTORE R0
   944	0101EA	5820 4000 0058 	        L       R2,RGSTOR+4,,   :RESTORE R2
   945	0101F0	D500 0098 	        UPSW    TRBOFF          :TRACE BIT OFF AND CONTINUE
   946	0101F4	D301 FFC2 	FAIL0   LB      R0,CRSHCD,R1    :CONVERT CRASH REASON
   947	0101F8	C500 0012 		CLHI	R0,12		:TEST IF ILLEGAL SVC
   948	0101FC	2135 			JNFS	FAIL1		:NO...SKIP
   949	0101FE	7300 0094 		LHL	R0,FGNDFL	:DID FOREGROUND CAUSE THE CRASH?
   950	010202	4230 80D2 		JN	ENTRY2		:YES....JUMP OVER
   951	010206	D000 4000 0054 	FAIL1   STM     R0,RGSTOR,,     :SAVE REGISTERS
   952	01020C	4120 817E 	        JAL     R2,PSHTBS       :PUSH DOWN CRASH TABLES
   953	010210	5810 400F 000C 	        L       R1,GMT,,        :GET GMT CLOCK
   954	010216	5010 4000 0000 	        ST      R1,CTIME,,      :SAVE IT AS THE CRASH TIME
   955	01021C	D100 4000 0054 	        LM      R0,RGSTOR,,     :RESTORE REGISTERS
   956	010222	D020 4000 0018 	        STM     R2,CRAT+CRXREG+8,, :SAVE THE REGISTERS
   957	010228	4000 4000 0006 	        STH     R0,CRAT+CRASHC,,  :SAVE CRASH CODE
   958	01022E	D1C0 FF92 	        LM      R12,FAIL          :GET THE REST
   959	010232	D0E0 4000 0010 	        STM     R14,CRAT+CRXREG,,  :SAVE R0 & R1
   960	010238	50D0 4000 0008 	        ST      R13,CRAT+CPOINT,, :SAVE FAILURE ADDRESS
   961	01023E	2511 			LCS	R1,1
   962	010240	5010 4000 000C 	        ST      R1,CRAT+CFROM,,   :FLUSH PLACE CALLED FROM
   963	010246	4300 8074 	        J       ENTRY1            :AND SKIP TO START UP AGAIN
   964				
   965				
   966				
   967				:	CRASH ROUTINE AND GENERAL INITIALIZER
   968				:	IF "GOOD" CALL TO CRASH, HAS HALFWORD 0'S FOLLOWING,
   969				:	THEN BYTE WITH 4*LINK REGISTER, THEN BYTE WITH CRASH REASON
   970				
   971	01024A	5000 4000 0054 	CRASH   ST      R0,RGSTOR,,     :SAVE R0
   972	010250	5020 4000 0058 	        ST      R2,RGSTOR+4,,   :SAVE R2         
   973	010256	4120 8104 	        JAL     R2,SAVPSW       :SAVE CURRENT PSW
   974	01025A	5800 4000 0054 	        L       R0,RGSTOR,,     :RESTORE R0
   975	010260	5820 4000 0058 	        L       R2,RGSTOR+4,,   :RESTORE R2
   976	010266	D500 00A0 	        UPSW    TRCOFF          :TRACE BIT OFF AND CONTINUE
   977	01026A	D000 4000 0054 	CRASH0  STM     R0,RGSTOR,,     :SAVE REGISTERS
   978	010270	4120 811A 	        JAL     R2,PSHTBS       :PUSH DOWN THE CRASH TABLES
   979	010274	5810 400F 000C 	        L       R1,GMT,,        :GET GMT CLOCK
   980	01027A	5010 4000 0000 	        ST      R1,CTIME,,      :SAVE IT AS THE CRASH TIME
   981	010280	D100 4000 0054 	        LM      R0,RGSTOR,,     :RESTORE REGISTERS
   982	010286	D000 4000 0010 	        STM     R0,CRAT+CRXREG,, :SAVE REGISTERS AND
   983	01028C	50A0 4000 0008 	        ST      R10,CRAT+CPOINT,,                    
Page  5-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   984	010292	240A 			LIS	R0,$A10		:FAKE UNKNOWN CRASH
   985	010294	2511 			LCS	R1,1		:FROM NOWHERE
   986	010296	732A 0000 		LHL	R2,0,R10	:CHECK WHERE CALLED FROM
   987	01029A	2137 			JNFS	CRASH1		:NOT KNOWN...USE DEFAULT
   988	01029C	D30A 0003 		LB	R0,3,R10	:GET CRASH CONDITION
   989	0102A0	D32A 0002 		LB	R2,2,R10	:GET CALLING REGISTER
   990	0102A4	5812 0010 	        L       R1,CRAT+CRXREG,R2 :GET CONTENTS OF REGISTER
   991				        
   992	0102A8	4000 4000 0006 	CRASH1  STH     R0,CRAT+CRASHC,, :SAVE CRASH CODE
   993	0102AE	5010 4000 000C 	        ST      R1,CRAT+CFROM,,  :SAVE PLACE CRASHED FROM
   994	0102B4	2305 			JFS	ENTRY1
   995				
   996				:	ENTER HERE WITH RESTART
   997	0102B6	2401 		ENTRY	LIS	R0,1		:LOAD CRASH CODE REGISTER
   998	0102B8	4000 4000 0006 	        STH     R0,CRAT+CRASHC,, :STORE IT
   999	0102BE	2411 		ENTRY1	LIS	R1,1
  1000	0102C0	6110 4000 0004 	        AHM     R1,CRAT+CRSHCT,, :SAVE INTERESTING DATA
  1001				
  1002	000000			  IF	CRSTOP		:IF STOPPING ON CONSECUTIVE CRASHES
  1003					CLHI	R0,1
  1004					JLE	ENTRY2		:IF POWER FAILURE OR MANUAL RESTART
  1005					OHI	R0,0CC00	:CRASH INDICATOR FOR FRONT PANEL
  1006					STH	R0,FPANEL,,	:SET PANEL TO BAD CRASH
  1007				   IF	EXCRSH
  1008					JAL	R5,CRSH.P,,	:GO DO EXTENDED CRASH PROCESSING
  1009				   EI	EXCRSH
  1010				        LM      R0,CRAT+CRXREG,, :RESTORE REGISTERS
  1011					SVC	SYS,HALT.	:HALT THE SLOT
  1012				  EI	CRSTOP
  1013				
  1014	0102C6	2401 			LIS	R0,1		:WANT SECOND WORD OF PSD
  1015	0102C8	E120 000D 		SVC	SYS,RFPSD.	:READ FOREGROUND PSD
  1016	0102CC	F500 0001 02CC 		CLI	R0,.		:TEST IF FOREGROUND IS EXECUTING THIS INSTRUCTION
  1017	0102D2	2133 			JNFS	ENTRY2		:SKIP IF NOT
  1018	0102D4	4000 0094 		STH	R0,FGNDFL	:SET THE FOREGROUND FLAG
  1019				
  1020				ENTRY2		: NOW RESET OUTPUT RING, REPORT CRASH
  1021	000000			  IF	CRSTOP
  1022	000001			  ELSE
  1023	000000			   IF	EXCRSH
  1024					JAL	R5,CRSH.P,,	:GO DO EXTENDED CRASH PROCESSING
  1025				   EI	EXCRSH
  1026				  EI	CRSTOP
  1027	0102D8	2400 			LIS	R0,0
  1028	0102DA	5000 4002 0100 		ST	R0,ORING,,	:EMPTY OUTPUT RING
  1029	0102E0	5000 4002 0900 		ST	R0,IRING,,	:EMPTY INPUT RING
  1030				
  1031	0102E6	E600 FEDA 		LA	R0,FAIL		:LOAD TRAP AREA ADDRESS
  1032	0102EA	E120 0000 		SVC	SYS,RSTRT.	:RESTART SVC
  1033	0102EE	41A0 FF58 		JAL	R10,CRASH	:NON-SKIP RETURN...CRASH
  1034				
  1035				
  1036	0102F2	2400 			LIS	R0,0
Page  5-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

  1037	0102F4	4000 0094 		STH	R0,FGNDFL	:CLEAR THE FOREGROUND FLAG
  1038				
  1039	0102F8	4140 4001 00CE 		JAL	R4,SPACE,,	:SET UP FOR DIAGNOSTIC
  1040	0102FE	C800 0300 		LHI	R0,0300
  1041	010302	4140 4001 0174 		JAL	R4,PUTW,,	:PORT 0 + DIAGNOSTIC MESSAGE + PAD
  1042	010308	7300 4000 0004 		LHL	R0,CRAT+CRSHCT,,
  1043	01030E	4140 4001 0154 		JAL	R4,PUTCH,,	:HW4 LOW = CRASH COUNT
  1044	010314	2400 			LIS	R0,0
  1045	010316	4140 4001 0154 		JAL	R4,PUTCH,,	:RESERVED BYTE
  1046	01031C	2401 			LIS	R0,1
  1047	01031E	4140 4001 0154 		JAL	R4,PUTCH,,	:REPORT TYPE = 1
  1048	010324	7300 4000 0006 		LHL	R0,CRAT+CRASHC,,
  1049	01032A	4140 4001 0154 		JAL	R4,PUTCH,,	:HW3 HIGH = CRASH CODE
  1050	010330	C800 0091 		LHI	R0,PRODID
  1051	010334	4140 4001 0154 		JAL	R4,PUTCH,,	:HW2 LOW IS PRODUCT ID
  1052	01033A	4140 4001 01A2 		JAL	R4,ELOR,,	:END LOGICAL OUTPUT RECORD
  1053	010340	5810 4000 00B0 	        L       R1,CHFLAG,,     :SEE IF PSW HAS BEEN CHANGED
  1054	010346	C510 0001 	        CLHI    R1,1
  1055	01034A	2137 		        JNFS    CURPSW          :NO CHANGE, GO TO USE CURRENT PSW
  1056	01034C	2410 		        LIS     R1,0
  1057	01034E	5010 4000 00B0 	        ST      R1,CHFLAG,,     :RESET CHFLAG FOR FUTURE PSW CHANGE
  1058	010354	D500 00A8 	        UPSW    PSWSAV          :INITIALIZE WITH RESTORED PSW
  1059	010358	4300 4001 05EE 	CURPSW  J       START,,         :INITIALIZE WITH CURRENT PSW
  1060				
  1061	01035E	2401 		SAVPSW  LIS     R0,1            :GET PC OF BACKGROUND PSD
  1062	010360	5000 4000 00B0 	        ST      R0,CHFLAG,,     :ALSO INDICATE PSW WILL BE MODIFIED
  1063	010366	E120 000B 	        SVC     SYS,RBPSD.      :READ BACKGROUND PSD
  1064	01036A	F500 0001 036A 	        CLI     R0,.            :IS IT RUNNING?
  1065	010370	2138 		        JNFS    ISFGND          :NO, IT MUST BE FOREGROUND JOB
  1066	010372	2400 		        LIS     R0,0            :GET PSW OF BACKGROUND JOB
  1067	010374	E120 000B 	        SVC     SYS,RBPSD.
  1068	010378	5000 4000 00A8 	        ST      R0,PSWSAV,,     :SAVE IT
  1069	01037E	0302 		        JR      R2              :RETURN
  1070	010380	2400 		ISFGND  LIS     R0,0            :GET PSW OF FORGROUND JOB
  1071	010382	E120 000D 	        SVC     SYS,RFPSD.
  1072	010386	5000 4000 00A8 	        ST      R0,PSWSAV,,     :SAVE IT
  1073	01038C	0302 		        JR      R2              :RETURN
  1074				
  1075				
  1076	01038E	C810 FFB0 	PSHTBS  LHI     R1,CRTLEN*NCRSAV-CRTLEN*2
  1077	010392	0212 		        JLR     R2              :IF ONLY 1 CRASH TABLE, SKIP AND RETURN
  1078	010394	D161 0004 	PUSHIT  LM      R6,CRAT,R1      :PUSH DOWN THE CRASH TABLE
  1079	010398	D061 0054 	        STM     R6,CRAT+CRTLEN,R1
  1080	01039C	D161 002C 	        LM      R6,CRAT+CRTLEN/2,R1
  1081	0103A0	D061 007C 	        STM     R6,CRAT+CRTLEN+CRTLEN/2,R1
  1082	0103A4	CB10 0050 	        SHI     R1,CRTLEN
  1083	0103A8	221A 		        JGEBS   PUSHIT
  1084	0103AA	5810 4000 0000 	        L       R1,CTIME,,
  1085	0103B0	5010 4000 0050 	        ST      R1,CRAT+CRTSIZ,,
  1086	0103B6	0302 		        JR      R2              :RETURN
  1087				         
  1088					EM
Page  6-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 STATL.LIB . . . Long-token version of STATUS.LIB

  1089					SUBTTL	STATL.LIB . . . Long-token version of STATUS.LIB
  1090				:******************************************************************
  1091				:
  1092				:	This program is the sole property and confidential
  1093				:	information of TYMNET, and may not be copied in whole
  1094				:	or in part or disclosed to any third party without
  1095				:	the prior written consent of TYMNET.
  1096				:
  1097				:*******************************************************************
  1098				
  1099	000001			  IF	1-\DB.STA			: DEFAULT DEBUG/STATUS TO ON
  1100	000001			DB.STA	EQ	1
  1101				  EI
  1102				
  1103	000001			  IF	DB.STA				: ASSEMBLE ONLY WITH DEBUG STATUS ON
  1104				
  1105	0103B8				SEG	A.CODE
  1106					MO	.,STATUS
  1107					RA	$00
  1108					GL	DSTART,DS.ELL,DS.ILL,DS.ERR,DS.DLM
  1109					GL	DS.TOK,DS.NUM,DS.EXI,DS.QUI,DS.GCH,DS.CUC,DS.DEL
  1110				
  1111				:	STATUS - User Command Handler
  1112				:
  1113				:	Version history:
  1114				:	13.3  08/19/83  <JOK>Changed DS.TOK to return first 8 chars of
  1115				:		TOKEN, changed DS.CMD to retain first 8 chars of command,
  1116				:		and changed DSTART to accept up to 8-character commands.
  1117				:	13.2  01/27/81  <BAB>Added RADIX=0 at start of mod.  Added jump
  1118				:		following 'QUIT' SVC to allow DDT "P" (proceede) command
  1119				:		to return the user to ":>" prompt.
  1120				:	13.1  11/17/81	<BAB>Added DNEXTK support, DS.DLM (last delimiter),
  1121				:		and fixed backspace for > 4 character entry, added the
  1122				:		command thought to be invalid to invalid command message.
  1123				:	13	08/81	<JK>Maintenance assumed by BAB from John Kopf
  1124				:
  1125				:		The Status package is intended to provide an extension to DDT,
  1126				:	invokable via the "?STAT" command in DDT.  Once invoked you may re-
  1127				:	activate it (provided you have not issued any DDT "G" (go) commands)
  1128				:	by typing "P ".
  1129				:
  1130				:		There is limited editing control built into the package:
  1131				:	ESC	aborts back to command level,
  1132				:	^W	discards partial 'token' already input (word or number),
  1133				:	^A	discards last char of token (backspace).
  1134				:	^H	discards last char of token (backspace).
  1135				
  1136				:		Delimiters may occur in multiple (e.g. ", " is OK).  Valid
  1137				:	delimiters are:
  1138				:	C/R	L/F	H/T	","	and BLANK.
  1139				
  1140				:		Entry Points:
  1141				:	DSTART	Place to exit on completion of command.
Page  6-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 STATL.LIB . . . Long-token version of STATUS.LIB

  1142				:	DNEXTK  Get next token with out prompt.
  1143				:	DS.ILL	Place to exit on illegal command -- types "Illegal command"
  1144				:	DS.ERR	Place to exit on command error -- types "type '\' "
  1145				:	DS.EXI	Place to exit machine.
  1146				:	DS.QUI	Place to exit back to DDT.
  1147				:	DS.GCH	Get a character...Link on R1, char (with high-order bit forced)
  1148				:			in R0...normal return if detected ^W, skip-4 if detect
  1149				:			^A, aborts back to DSTART if detects ESC.
  1150				:	DS.DEL	Check for delimiter...Link on R2, Character in R0.  Skip-4
  1151				:			return unless this is a delimiter, then normal return.
  1152				:	DS.CUC	Convert to upper case...Link on R1, Character in R0.
  1153				:	DS.TOK	Get a string token...Link on R4, TOKEN returned in R3/R2...
  1154				:			inputs up to 4 characters, returns them (in uppercase)
  1155				:			left justified, 0 fill
  1156				:	DS.NUM	Get a number...Link on R5, expects Radix in R4...
  1157				:			number returned in R0.  May ABORT if any character is
  1158				:			input other than valid digit or delimiter.
  1159				:	DS.DLM  Location of last delimeter entered (1 byte)
  1160				
  1161				:		There are two built-in commands:
  1162				:	Quit	exit back to DDT.
  1163				:	EXIt	exit machine.
  1164				
  1165				:		additional commands may be defined via the DS.CMD macro:
  1166				:	 DS.CMD(TEXT,ADDR)
  1167				:	Where:	TEXT	The (UPPERCASE) target command string.
  1168				:		ADDR	The virtual address to transfer to, to service that
  1169				:				command.
  1170				:	DS.CMD generates a 16-byte descriptor for this command, at the point
  1171				:	assembly where it is invoked.  This descriptor is on a WORD boundary.
  1172				
  1173				
  1174				
  1175	00000B			OUT	EQ	0B			: Output SVC
  1176	00000A			IN	EQ	0A			: Input SVC
  1177				
  1178	000000			DS.ELL	EQ	0			: Null pointer for end-of-linked-list
  1179				
  1180	0000B4				SEG	A.DATA
  1181	0000B4			DS.DLM	BS	1			: Last delimiter encountered
  1182	0000B8			R4SAV	WS	1			: Save-area for R4 in DS.TOK
  1183	0000BC	0CA7 F8F8 F8F8 	BADSTR	SC	/'xxxxxxxx'"8D"8A/	: Place to put bad command
		F8F8 F8F8 A78D 	
		8A		
  1184	0000BE			STOKEN	EQ	BADSTR+2		: String-buffer for token
  1185	0103B8				SEG	A.CODE
  1186				
  1187				:	Define elements for command-block
  1188	000000			C.NEXT	EQ	0			: Pointer to next command-block
  1189	000004			C.ADDR	EQ	C.NEXT+4		: Pointer to command-handler
  1190	000008			C.STR	EQ	C.ADDR+4		: Relative position of string
  1191				
  1192				:	Define macro to generate this command-block
Page  6-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 STATL.LIB . . . Long-token version of STATUS.LIB

  1193				DS.CMD	MACRO(STR,ADDR)[ WS	0
				   IF	DS.ELL
				Q	WS	0
					ORG	DS.ELL
					WC	Q
					ORG	Q
				   EI
				DS.ELL	WC	0,ADDR
					AC	/STR/
					WS	0
				 IF	DS.ELL+10-. ; WC 0; EI
				]
  1194				
  1195				
  1196				:	TABLE OF COMMANDS, AND TARGET ROUTINES.
  1197				CMDLST	DS.CMD(Q,DS.QUI)		: Exit back to DDT
  1198					DS.CMD(QUIT,DS.QUI)		: Exit back to DDT
  1199					DS.CMD(EXIT,DS.EXI)		: Exit
  1200					DS.CMD(EXI,DS.EXI)		: Exit
  1201				
  1202				
  1203				
  1204				
  1205				:	Diagnostic messages
  1206	0103F8	10C9 ECEC E5E7 	TERR	SC	/Illegal command /
		E1EC A0E3 EFED 	
		EDE1 EEE4 A0	
  1207	010409	0A F4F9 F0E5 A0	TTERR	SC	/type '\'"8D"8A/
		A7 DCA7 8D8A 	
  1208	010414	048D 8ABA BE	PROMPT	SC	/"8D"8A:>/		: "CR|LF:>"
  1209	010419	03 88A0 88	BKSPAC	SC	/"88 "88/		: Back-space
Page  7-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 Command-scanner, Verifier, and Bitcher

  1210					SUBTTL	Command-scanner, Verifier, and Bitcher
  1211				
  1212				:	Command-input Handler
  1213	01041E	5801 0004 	DOIT	L	R0,C.ADDR,R1		: Go service this command
  1214	010422	0100 			JALR	R0,R0
  1215				
  1216				:	Next Command
  1217	010424	E1B0 FFEC 	DSTART	SVC	OUT,PROMPT		: Issue Prompt
  1218	010428	4140 8048 	DNEXTK	JAL	R4,DS.TOK		: Get command-token
  1219	01042C	E610 FF88 		LA	R1,CMDLST		: Search for string-match
  1220	010430	5531 0008 	DSTAR1	CL	R3,C.STR,R1		: check first-word
  1221	010434	2135 			JNFS	DSTAR2			: no match
  1222	010436	5521 000C 		CL	R2,C.STR+4,R1		: second-word
  1223	01043A	4330 FFE0 		JE	DOIT			: Proceed if find a match
  1224				
  1225	01043E	5811 0000 	DSTAR2	L	R1,C.NEXT,R1		: Else continue scan
  1226	010442	2029 			JGBS	DSTAR1
  1227				
  1228	010444	E1B0 FFB0 	DS.ILL	SVC	OUT,TERR		: "ILLEGAL COMMAND"
  1229	010448	E1B0 4000 00BC 		SVC	OUT,BADSTR,,
  1230				
  1231	01044E	E1B0 FFB7 	DS.ERR	SVC	OUT,TTERR		: Tell user to type Flush-char
  1232				
  1233	010452	4110 8154 	BITCH	JAL	R1,DS.GCH		: Flush input
  1234	010456	2202 			 JBS	BITCH
  1235	010458	0200 			 NOPR	0			: ^W...Ignore
  1236	01045A	2204 			  JBS	BITCH
  1237	01045C	0200 			  NOPR	0			: ^A...Ignore
  1238	01045E	C500 00DC 		CLHI	R0,0DC			: Read until "\" is found
  1239	010462	2038 			JNBS	BITCH
  1240	010464	4300 FFBC 		J	DSTART			: Then exit
  1241				
  1242				
  1243				:	Built-in Commands
  1244				
  1245				:		Command EXIt
  1246				:		===========-
  1247	010468	E1D0 0000 	DS.EXI	SVC	KIO,0			: Disconnect
  1248				
  1249				
  1250				:		Command Quit (exit back to DDT)
  1251				:		=========---
  1252	01046C	E1D0 0001 	DS.QUI	SVC	KIO,1			: Return to DDT
  1253	010470	4300 FFB0 		J	DSTART			: If operator typed "P", get next command
Page  8-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 U T I L I T I E S

  1254					SUBTTL	U T I L I T I E S
  1255				
  1256				:	Get a Command-token...Up to 8 chars long
  1257				:		Skips over extra characters to next delimiter
  1258				:	Link on R4
  1259				:	Token returned in R3/R2, Left justified, 0-fill
  1260	010474	5040 4000 00B8 	DS.TOK	ST	R4,R4SAV,,		: save R4
  1261				
  1262	01047A	2400 		TOKEN0	LIS	R0,0			: clear token buffer
  1263	01047C	E630 4000 00BE 		LA	R3,STOKEN,,		: set char-pointer
  1264	010482	5003 0000 		ST	R0,0,R3
  1265	010486	5003 0004 		ST	R0,4,R3
  1266				
  1267				:	Scan for first character of TOKEN
  1268	01048A	4110 811C 	TOKEN1	JAL	R1,DS.GCH		: Get next char
  1269	01048E	2202 			 JBS	TOKEN1
  1270	010490	0200 			 NOPR	0			: ^W...Ignore
  1271	010492	2204 			  JBS	TOKEN1
  1272	010494	0200 			  NOPR	0			: ^A...Ignore
  1273	010496	4120 80F2 		JAL	R2,DS.DEL		: Skip over delimiters
  1274	01049A	4300 FFEC 		 J	TOKEN1
  1275	01049E	4110 813A 		JAL	R1,DS.CUC		: Convert to Upper-case
  1276	0104A2	C900 00DC 		CHI	R0,00DC			: = "\" ?
  1277	0104A6	4330 FF7A 		JE	DSTART			: YES.  Print Prompt, get next command
  1278	0104AA	D203 0000 		STB	R0,0,R3			: no...start TOKEN accumulation
  1279	0104AE	2631 			AIS	R3,1			: advance pointer
  1280	0104B0	2441 			LIS	R4,1			: 1 char. found so far
  1281				
  1282	0104B2	4110 80F4 	TOKEN2	JAL	R1,DS.GCH		: Get another char
  1283	0104B6	4300 FFC0 		 J	TOKEN0			: ^W...Start over
  1284	0104BA	4300 803C 		  J	TOKEN4			: ^A...Toss last char
  1285	0104BE	4110 811A 		JAL	R1,DS.CUC		: Convert to upper-case
  1286	0104C2	4120 80C6 		JAL	R2,DS.DEL		: Check for delimiter
  1287	0104C6	4300 801C 		 J	TOKEN3			: Got one...skip to clean up
  1288	0104CA	C900 00DC 		CHI	R0,00DC			: = "\" ?
  1289	0104CE	4330 FF72 		JE	DS.ILL			: YES.  Treat as Illegal
  1290	0104D2	2641 			AIS	R4,1			: one more character
  1291	0104D4	C940 0008 		CHI	R4,8			: If >= 8 chars, do not use this one
  1292	0104D8	4220 FFD6 		JG	TOKEN2			: YES...Scan for delimiter
  1293	0104DC	D203 0000 		STB	R0,0,R3			: NO...Accumulate chars
  1294	0104E0	2631 			AIS	R3,1			: advance cursor
  1295	0104E2	4300 FFCC 		J	TOKEN2			: ..and get another char
  1296				
  1297	0104E6	5840 4000 00B8 	TOKEN3	L	R4,R4SAV,,		: Restore R4
  1298	0104EC	5830 4000 00BE 		L	R3,STOKEN,,		: place TOKEN into Registers
  1299	0104F2	5820 4000 00C2 		L	R2,STOKEN+4,,
  1300	0104F8	0304 			JR	R4			: Return TOKEN in R2/R3
  1301				
  1302				
  1303				:	Handle backspace in TOKEN
  1304	0104FA	2741 		TOKEN4	SIS	R4,1			: one less char
  1305	0104FC	4320 FF7A 		JLE	TOKEN0			: re-initialize if none left
  1306	010500	C940 0008 		CHI	R4,8			: If after backspace TOKEN is >= 8
Page  8-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 U T I L I T I E S

  1307	010504	4310 FFAA 		JGE	TOKEN2			: then just decrement counter
  1308	010508	2400 			LIS	R0,0			: else... drop one character
  1309	01050A	2731 			SIS	R3,1			:   back-up pointer
  1310	01050C	D203 0000 		STB	R0,0,R3
  1311	010510	4300 FF9E 		J	TOKEN2			: and get next char
  1312				
  1313				:	Utility routine to read a number
  1314				:	uses R0-R3
  1315				:	Expects RADIX in R4
  1316				:	Link on R5
  1317				:	Aborts if first non-delimiter is not digit
  1318				:	Else returns number in R0
  1319	010514	4110 8092 	DS.NUM	JAL	R1,DS.GCH		: get next char
  1320	010518	2202 			 JBS	DS.NUM
  1321	01051A	0200 			 NOPR	0			: ^W...ignore
  1322	01051C	2204 			  JBS	DS.NUM
  1323	01051E	0200 			 NOPR	0			: ^A...Ignore
  1324	010520	4120 8068 		JAL	R2,DS.DEL		: check for delimiter char
  1325	010524	4300 FFEC 		 J	DS.NUM
  1326	010528	4120 803E 		JAL	R2,DS.DIG		: test if char is digit
  1327	01052C	4300 FF14 		 J	DS.ILL			: not a digit - give error-message
  1328	010530	0504 			CLR	R0,R4
  1329	010532	4310 FF0E 		JGE	DS.ILL			: digit is bigger than RADIX...Abort
  1330	010536	0830 			LR	R3,R0			: put first digit into accumulator
  1331	010538	4110 806E 	NUMBER	JAL	R1,DS.GCH		: read next char
  1332	01053C	4300 FFD4 		 J	DS.NUM			: ^W...Start over
  1333	010540	4300 801E 		  J	DIVIDE			: ^A...Toss last digit
  1334	010544	4120 8044 		JAL	R2,DS.DEL		: Check for delimiter
  1335	010548	0803 			 LR	R0,R3
  1336	01054A	0305 			 JR	R5	  :YES
  1337	01054C	4120 801A 		JAL	R2,DS.DIG		: skip if digit
  1338	010550	4300 FEF0 		J	DS.ILL			: NO...Abort
  1339	010554	0504 			CLR	R0,R4
  1340	010556	4310 FEEA 		JGE	DS.ILL			: RADIX error...Bitch
  1341	01055A	1C24 			MR	R2,R4			: build number
  1342	01055C	0A30 			AR	R3,R0			: add new digit
  1343	01055E	4300 FFD6 		J	NUMBER			: get next digit
  1344				
  1345	010562	2420 		DIVIDE	LIS	R2,0			: got a ^A...Make double-precision arg.
  1346	010564	1D24 			DR	R2,R4			: Quotent into R3, where we want it
  1347	010566	4300 FFCE 		J	NUMBER			: now go back for more digits
  1348				
  1349				:	Digit test
  1350				:	Check character read...Skip return if digit
  1351				:	Then R0=Binary value of HEX digit
  1352				:	uses R1, Link on R2
  1353	01056A	4110 806E 	DS.DIG	JAL	R1,DS.CUC		: Convert to upper-case
  1354	01056E	0810 			LR	R1,R0			: Copy char
  1355	010570	CB10 00B0 		SHI	R1,0B0			: is it "0"?
  1356	010574	0212 			JLR	R2			: return if less than "0"
  1357	010576	2719 			SIS	R1,0B9-0B0		: is it "9"
  1358	010578	2326 			JLEFS	DIGIT			: less than "9", then a good digit
  1359	01057A	2718 			SIS	R1,0C1-0B9		: is it "A"?
Page  8-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 U T I L I T I E S

  1360	01057C	0212 			JLR	R2			: return if less than "A"
  1361	01057E	2715 			SIS	R1,0C6-0C1		: is it "F"?
  1362	010580	0222 			JGR	R2			: return if greater than "F"
  1363	010582	2707 			SIS	R0,7			: 0A - "A" (partial conversion)
  1364				
  1365	010584	CB00 00B0 	DIGIT	SHI	R0,0B0			: "0"
  1366	010588	4302 0004 		J	4,R2			: skip-return
  1367				
  1368				:	Check for delimiter
  1369				:	Link	R2
  1370				:	Uses	R0,R1
  1371				:	Skip-4 return unless (R0) is a delimiter-character
  1372	01058C	C810 0004 	DS.DEL	LHI	R1,DLEN-1		: number of delimiter chars
  1373	010590	D200 4000 00B4 		STB	R0,DS.DLM,,		: save delimiter
  1374				
  1375	010596	D401 800A 	DELIM	CLB	R0,DLIST,R1		: compare to a delimiter
  1376	01059A	0332 			JER	R2			: return if delimiter
  1377	01059C	2711 			SIS	R1,1			: check next delimiter
  1378	01059E	2214 			JGEBS	DELIM			: loop if any more delimiters
  1379	0105A0	4302 0004 		J	4,R2			: skip-return
  1380				
  1381				:	List of delimiter chars
  1382	0105A4	A0AC 		DLIST	AC	' ,'			: Blank,","
  1383	0105A6	8D8A 89			BC	8D,8A,89		: CR,LF,HT
  1384	000005			DLEN	EQ	.-DLIST			: Number of delimiter chars
  1385				
  1386				:	Input a Character
  1387				:	Link	R1
  1388				:	Normal-return:   ^W Input...Flush entry
  1389				: 	Skip-4 return:  ^A or ^H Input...flush last char
  1390				:	  SKIP-8 return: Char in R0 (high-bit on)
  1391				:	Aborts to command-scanner on "ESC"
  1392	0105AA	E1A0 000F 	DS.GCH	SVC	IN,0F			: get the char
  1393	0105AE	4300 FFF8 		 J	DS.GCH
  1394	0105B2	C600 0080 		OHI	R0,80			: set high-order bit
  1395	0105B6	C500 009B 		CLHI	R0,9B			: check for escape
  1396	0105BA	4330 FE66 		 JE	DSTART			: abort, proceed with prompt if so
  1397	0105BE	C500 0097 		CLHI	R0,97			: check for ^W
  1398	0105C2	0331 			 JER	R1			: normal-return
  1399	0105C4	C500 0081 		CLHI	R0,81			: check for ^A
  1400	0105C8	4331 0004 		 JE	4,R1			: Skip-4 return
  1401	0105CC	C500 0088 		CLHI	R0,88			: check for ^H
  1402	0105D0	4231 0008 		 JN	8,R1			: No, skip-8 return, Char in R0
  1403				
  1404	0105D4	E1B0 FE41 		SVC	OUT,BKSPAC		: Back-space
  1405	0105D8	4301 0004 		J	4,R1			: skip-4 return for ^H
  1406				
  1407				:	Convert char in (R0) to upper-case
  1408				:	Link on R1
  1409	0105DC	C500 00E1 	DS.CUC	CLHI	R0,0E1			: Compare with "a"
  1410	0105E0	0211 			JLR	R1			: Exit if it can't be lower-case
  1411	0105E2	C500 00FA 		CLHI	R0,0FA			: Compare with "z"
  1412	0105E6	0221 			JGR	R1			: Not lower-case...Just return
Page  8-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 U T I L I T I E S

  1413	0105E8	CB00 0020 		SHI	R0,20			: Lower-case...Convert to upper-case
  1414	0105EC	0301 			JR	R1			: and return
  1415				
  1416					EM
  1417				
  1418				  EI	: (DB.STA)
Page  9-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS BASE CODE

  1419					SUBTTL	EBUS BASE CODE
  1420					RA	0
  1421				
  1422				:		***** ****  *   *  ****
  1423				:		*     *   * *   * *
  1424				:		****  ****  *   *  ***
  1425				:		*     *   * *   *     *
  1426				:		***** ****   ***  ****
  1427				:	This is the EBUS Base Code
  1428					GL	START,FPANEL,EBDUMP
  1429	000000			 if	1-\EBDUMP
  1430				EBDUMP	EQ	0			: switch off if not defined
  1431				 ei
  1432				
  1433					MO	.,EBUS
  1434				
  1435	0000F0			SSRCRC	EQ	0F0			: Crash-code for SSR-detected crash of IPI   
  1436	0000F1			SVCCRC	EQ	0F1			: Crash-code for failed CONNECT-IPI SVC call
  1437	0000F2			IPICRC	EQ	0F2			: Crash-code for CRASH-MSG sent by IPI
  1438				
  1439	000031			XLATE	EQ	$A 49
  1440	0000D0			CONIP	EQ	0D0
  1441				
  1442				:	Define some data-structure formats
  1443	0105EE			Q	EQ	.
  1444				
  1445				:	Parameters passed to 68K
  1446	000000				ORG	0			: define offsets
  1447	000000			.ORING	HS	2			: pointer to ORING (L)
  1448	000004			.ORSIZ	HS	1			: ORSIZE (W)
  1449	000006			.IRING	HS	2			: pointer to IRING (L)
  1450	00000A			.IRSIZ	HS	1			: IRSIZE (W)
  1451	00000C			.FASTC	HS	2			: pointer to FASTC (L)
  1452	000010			.SLOWC	HS	2			: pointer to SLOWC (L)
  1453	000014			.SYNC	HS	2			: pointer to SYNC (L)
  1454	000018			.CDUMP	HS	2			: pointer to REGDMP (L)
  1455	00001C			.SIZE	WS	0			: size of this area
  1456				
  1457				:	Parameters returned by 68K (on Crash)
  1458	000000				ORG	0			: define offsets
  1459	000000			COD	WS	1			: CODCASH (L)
  1460	000004			PC	WS	1			: PCCASH (L)
  1461	000008			D0	WS	1			: D0 (L)
  1462	00000C			D1	WS	1			: D1 (L)
  1463	000010			D2	WS	1			: D2 (L)
  1464	000014			D3	WS	1			: D3 (L)
  1465	000018			D4	WS	1			: D4 (L)
  1466	00001C			D5	WS	1			: D5 (L)
  1467	000020			D6	WS	1			: D6 -- Cd (L)
  1468	000024			D7	WS	1			: D7 -- Cs (L)
  1469	000028			A0	WS	1			: A0 (L)
  1470	00002C			A1	WS	1			: A1 (L)
  1471	000030			A2	WS	1			: A2 (L)
Page  9-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS BASE CODE

  1472	000034			A3	WS	1			: A3 (L)
  1473	000038			A4	WS	1			: A4 -- Rp (L)
  1474	00003C			A5	WS	1			: A5 -- Rs (L)
  1475	000040			A6	WS	1			: A6 -- Rd (L)
  1476	000044			A7	WS	1			: A7 -- SP (L)
  1477				
  1478	0105EE				ORG	Q			: return to real address-space
  1479				
  1480	0000C9				SEG	A.DATA
  1481	0000CA	0000 		FPANEL	HC	0			: used for front-panel display
  1482	0000CC	0000 		SYNC	HC	0			: used to synchronize EBUS code
  1483	0000CE	0000 		HPARAM	HC	0			: Used for front-panel display
  1484	0000D0	0000 		HSTAT	HC	0			: ditto
  1485	0000D2			BITS	HS	2			: ditto
  1486	0000D6			XBITS	HS	2			: ditto
  1487				
  1488				:	This area is used for communication between ISIS and this slot
  1489	0000DC			STAREA	WS	0			: Beginning of status (communications) area
  1490	0000DC			STCRA	WS	1			: <CODCASH> placed here
  1491	0000E0			STATIM	WS	1			: time of occurance
  1492	0000E4			SSRCRA	WS	1			: SST reason
  1493	0000E8			SSRTIM	WS	1			: time of occurance
  1494	0000EC			CRATYP	WS	1			: Identifies type of SVC Crash
  1495	0000F0				WS	1			: ??
  1496				
  1497				
  1498				:	68K Communications Area
  1499	020000			IOWADR	EQ	STSEG2			: in SEG 2
  1500	02001C			EVERN	EQ	IOWADR+.SIZE		: where EBUS will place it's version #
  1501	02001E			REGDMP	EQ	EVERN+2			: where EBUS will dump Regs to
  1502				
  1503				
  1504	000001			 IF	EBDUMP
  1505	030000				SEG	3
  1506				
  1507				:	Dump image area
  1508	030000			S3ADDR	BS	40000			: reserve 256K area for dump image
  1509				 EI
  1510				
  1511	0105EE				SEG	A.CODE
  1512				:	Code area
  1513				
  1514				
  1515				:	Begin here...Initialize parameters for 68K
  1516	0105EE	E610 4002 0000 	START	LA	R1,IOWADR,,		: base-address of I/O Window
  1517	0105F4	E600 4002 0100 		LA	R0,ORING,,		: address of output-ring
  1518	0105FA	E120 0031 		SVC	SYS,XLATE
  1519	0105FE	4300 8106 		 J	XLCRSH
  1520	010602	5001 0000 		ST	R0,.ORING,R1		: physical address of output-ring
  1521	010606	C800 07FC 		LHI	R0,ORSIZE		: size of output-ring
  1522	01060A	4001 0004 		STH	R0,.ORSIZ,R1
  1523	01060E	E600 4002 0900 		LA	R0,IRING,,		: address of input-ring
  1524	010614	E120 0031 		SVC	SYS,XLATE
Page  9-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS BASE CODE

  1525	010618	4300 80EC 		 J	XLCRSH
  1526	01061C	5001 0006 		ST	R0,.IRING,R1		: physical address of input-ring
  1527	010620	C800 07FC 		LHI	R0,IRSIZE		: size of input-ring
  1528	010624	4001 000A 		STH	R0,.IRSIZ,R1
  1529	010628	E600 400F 0004 		LA	R0,FASTC,,		: FASTC address
  1530	01062E	E120 0031 		SVC	SYS,XLATE
  1531	010632	4300 80D2 		 J	XLCRSH
  1532	010636	5001 000C 		ST	R0,.FASTC,R1		: FASTC physical address
  1533	01063A	2604 			AIS	R0,SLOWC-FASTC		: SLOWC address
  1534	01063C	5001 0010 		ST	R0,.SLOWC,R1		: SLOWC physical address
  1535	010640	E601 001E 		LA	R0,REGDMP-IOWADR,R1	: REGDMP address
  1536	010644	E120 0031 		SVC	SYS,XLATE
  1537	010648	4300 80BC 		 J	XLCRSH
  1538	01064C	5001 0018 		ST	R0,.CDUMP,R1		: REGDMP physical address
  1539	010650	E600 00CC 		LA	R0,SYNC			: SYNC address
  1540	010654	E120 0031 		SVC	SYS,XLATE
  1541	010658	4300 80AC 		 J	XLCRSH
  1542	01065C	5001 0014 		ST	R0,.SYNC,R1		: SYNC physical address
  1543				
  1544	010660	2400 			LIS	R0,0			: Logical unit 0 (and constant)
  1545	010662	5000 00DC 		ST	R0,STCRA		: initialize Status area
  1546	010666	5000 00E0 		ST	R0,STATIM		: 
  1547	01066A	5000 00E4 		ST	R0,SSRCRA		: 
  1548	01066E	5000 00E8 		ST	R0,SSRTIM		: 
  1549	010672	E620 00DC 		LA	R2,STAREA		: set address of status area
  1550	010676	E130 00D0 		SVC	IO,CONIP		: connect processor:
  1551				:						R0 -	LU
  1552				:						R1 -	address of IOWindow area
  1553				:						R2 -	address of ISIS Status Area
  1554	01067A	4300 808C 		 J	SVCCRA
  1555				
  1556				:	now running...set up for background
  1557	01067E	F800 0101 0101 		LI	R0,01010101		: Set up speedometer
  1558	010684	5000 00D2 		ST	R0,BITS
  1559	010688	F800 00FF 00FF 		LI	R0,00FF00FF
  1560	01068E	5000 00D6 		ST	R0,XBITS		: slot speedometer
  1561	010692	5830 400F 0004 		L	R3,FASTC,,		: reserve R3 for slot speedometer timeout
  1562				
  1563				
  1564				:	The main loop
  1565	010698	5820 00D6 	MAIN	L	R2,XBITS		: our speedometer
  1566	01069C	5930 400F 0004 		C	R3,FASTC,,
  1567	0106A2	2127 			JGFS	MAIN1
  1568	0106A4	CA30 003C 		AHI	R3,$A 60		: do our speedometer, again in 1/10 second
  1569	0106A8	EA20 0001 		RRL	R2,1
  1570	0106AC	5020 00D6 		ST	R2,XBITS
  1571	0106B0	4810 00CC 	MAIN1	LH	R1,SYNC			: get a value
  1572	0106B4	E000 00CC 		TS	SYNC			: indicate to EBUS we've run again
  1573	0106B8	5800 00D2 		L	R0,BITS			: use value to shuffle bits
  1574	0106BC	EA01 0000 		RRL	R0,0,R1
  1575	0106C0	5000 00D2 		ST	R0,BITS
  1576	0106C4	0702 			XR	R0,R2			: pack EBUS speedometer with ours
  1577	0106C6	D310 00D0 		LB	R1,HSTAT
Page  9-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS BASE CODE

  1578	0106CA	9210 			STBR	R1,R0			: pack with host-state
  1579	0106CC	5810 400F 0008 		L	R1,SLOWC,,		: check time
  1580	0106D2	C310 0003 		THI	R1,3
  1581	0106D6	2133 			JNFS	MAIN2			: for 3 seconds out of 4, show speedometer
  1582	0106D8	7300 00CE 		LHL	R0,HPARAM		: ...other second, show host parameters
  1583				
  1584	0106DC	4000 00CA 	MAIN2	STH	R0,FPANEL		: update front-panel
  1585	0106E0	E100 0000 		SVC	DISMISS			: and dismiss
  1586	0106E4	5810 00DC 		L	R1,STCRA		: Any IPI MSG?
  1587	0106E8	C510 0003 		CLHI	R1,3			: Crash MSG from 68K?
  1588	0106EC	4330 8010 		JE	IPCRSH
  1589	0106F0	5810 00E4 		L	R1,SSRCRA		: SSR Crash?
  1590	0106F4	4310 FFA0 		JGE	MAIN			: no
  1591	0106F8	41A0 FB4E 		JAL	R10,CRASH		: yes
  1592	0106FC	0000 04F0 		BC	0,0,R1*4,SSRCRC
  1593				
  1594	010700	41A0 FB46 	IPCRSH	JAL	R10,CRASH
  1595	010704	0000 04F2 		BC	0,0,R1*4,IPICRC
  1596				
  1597	010708	2501 		XLCRSH	LCS	R0,1			: set -1
  1598	01070A	5000 00EC 	SVCCRA	ST	R0,CRATYP
  1599	01070E	41A0 FB38 		JAL	R10,CRASH		: Else, it's a failed attempt to Connect
  1600	010712	0000 00F1 		BC	0,0,R0*4,SVCCRC
Page  10-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS -- Operations Monitor:

  1601					SUBTTL	EBUS -- Operations Monitor:
  1602				
  1603					LO	STATUS			: access STATUS
  1604				
  1605				:	MACRO to print a number (in R0) on terminal
  1606				:	ARG	USE
  1607				:	1	Number of digits
  1608				:	2	Any sum of:  .S, .B, .Z, one of [ .D, .H, OR .O]
  1609	000080			S.	EQ	80			: signed output
  1610	000020			B.	EQ	20			: Blank fill
  1611	000040			Z.	EQ	40			: Zero fill
  1612	00000A			D.	EQ	0A			: Decimal
  1613	000008			O.	EQ	08			: Octal
  1614	000010			H.	EQ	10			: Hexidecimal
  1615					KILL	PRINTN,PRINTP,PRINTS	: insure no conflict
  1616				PRINTN	MACRO(ND,M2)[
					LHI	R1,(ND*100)!M2
					SVC	KIO,$A 10
				]
  1617				
  1618				:	MACRO to print a string, given the address
  1619				PRINTP	MACRO(ADDR)[ SVC	OUT,ADDR]
  1620				
  1621				:	MACRO to print a string, given the string
  1622				PRINTS	MACRO(STR)[ KILL TO,AT
					PRINTP(AT)
					J	TO
				AT	SC	STR
				TO	HS	0]
Page  11-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS -- Operations Monitor:  ?STAT Command Handlers:  HELP, CODE

  1623					SUBTTL	EBUS -- Operations Monitor:  ?STAT Command Handlers:  HELP, CODE
  1624				
  1625				
  1626				
  1627					DS.CMD(HELP,HELP)		: Print Command List
  1628					DS.CMD(?,HELP)			: Print Command List
  1629					DS.CMD(CODE,CODE)		: Print Banner (which code this is).
  1630					DS.CMD(V,V)			: print versions
  1631				
  1632	010758	E1B0 81F4 	HELP	PRINTP(BANNER)
  1633	01077A				PRINTS(/"8D"8AValid commands are:/)
  1634	01079A				PRINTS(/"8D"8AEXIT or EXI - log off/)
  1635	0107CC				PRINTS(/"8D"8AQUIT or Q   - exit ?STAT (back to DDT)/)
  1636	0107F4				PRINTS(/"8D"8AHELP or ?   - print this list/)
  1637	01082C				PRINTS(/"8D"8ACODE        - Describe the code in this slot/)
  1638	010860				PRINTS(/"8D"8AV           - Display the version number/)
  1639	010892				PRINTS(/"8D"8ARDUMP       - Display 68K register dump/)
  1640	000001			 if	EBDUMP
  1641	0108CC				PRINTS(/"8D"8ADUMP        - Describe how to dump EBUS memory/)
  1642				 ei	:EBDUMP
  1643	0108CC	4300 FB54 		J	DSTART
  1644				
  1645	0108D0	E1B0 807C 	CODE	PRINTP(BANNER)			: display banner
  1646	0108D4	4300 FB4C 		J	DSTART
  1647				
  1648	0108F8			V	PRINTS(/Versions:  Slot code: /)
  1649	0108F8	C800 0002 		LHI	R0,VERSIO
  1650					PRINTN(2,H.)			: 2 hex digits, no fill
  1651	010904	E1B0 8070 		PRINTP(DOT)
  1652	010908	C800 0000 		LHI	R0,REVLEV
  1653					PRINTN(2,Z.!H.)			: 2 hex digits, zero-fill
  1654	01092C				PRINTS(/"BB  EBUS code: /)
  1655	01092C	D300 4002 001C 		LB	R0,EVERN,,
  1656					PRINTN(2,H.)			: 2 hex digits, no fill
  1657	01093A	E1B0 803A 		PRINTP(DOT)
  1658	01093E	D300 4002 001D 		LB	R0,EVERN+1,,
  1659					PRINTN(2,Z.!H.)			: 2 hex digits, zero-fill
  1660	01094C	4300 FAD4 		J	DSTART
  1661				
  1662	010950	248A 8D8A C5C2 	BANNER	SC	/"8A"8D"8AEBUSOM...EBUS Operations Monitor"8A/
		D5D3 CFCD AEAE 	
		AEC5 C2D5 D3A0 	
		CFF0 E5F2 E1F4 	
		E9EF EEF3 A0CD 	
		EFEE E9F4 EFF2 	
		8A		
  1663	010975	02 8A8D 	CRLF	SC	/"8A"8D/
  1664	010978	01AE 		DOT	SC	/./
Page  12-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP

  1665					SUBTTL	EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP
  1666				
  1667					DS.CMD(RDUMP,RDUMP)		: dump registers
  1668	000001			 if	EBDUMP
  1669					DS.CMD(DUMP,DUMP)		: dump EBUS memory
  1670				
  1671	0109DC			DUMP	PRINTS(/"8D"8AIn order to perform a dump of EBUS [68K] memory into/)
  1672	010A12				PRINTS(/"8D"8AEngine memory"2C activate MACSBUG and type"3A"8A/)
  1673	010A2C				PRINTS(/"8D"8A  BM 0 3FFFF E/)
  1674	010A2C	E600 4003 0000 		LA	R0,S3ADDR,,
  1675	010A32	E120 0031 		SVC	SYS,XLATE
  1676	010A36	4200 0000 		 NOP	0
  1677					PRINTN(5,Z.!H.)			: 5 hex digits, zero-fill
  1678	010A42	E1B0 FF2F 		PRINTP(CRLF)
  1679	010A46	4300 F9DA 		J	DSTART
  1680				 ei	:EBDUMP
  1681				
  1682				
  1683	010A4A	E620 4002 001E 	RDUMP	LA	R2,REGDMP,,		: address of dump area
  1684	010A50	5802 0000 		L	R0,COD,R2		: any dump?
  1685	010A54	4230 801E 		JN	DUMP1			: yes
  1686	010A72				PRINTS(/No Register Dump/)
  1687	010A72	4300 F9AE 		J	DSTART
  1688				
  1689	010A88			DUMP1	PRINTS(/"8D"8ACode: /)
  1690					PRINTN(8,B.!H.)			: 8 hex digits, blank fill
  1691	010AA4				PRINTS(/"8D"8APC:     /)
  1692	010AA4	5802 0004 		L	R0,PC,R2
  1693					PRINTN(6,Z.!H.)			: 6 hex digits, zero fill
  1694	010AC2				PRINTS(/"8D"8AD0:   /)
  1695	010AC2	5802 0008 		L	R0,D0,R2
  1696					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1697	010AE2				PRINTS(/    A0:   /)
  1698	010AE2	5802 0028 		L	R0,A0,R2
  1699					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1700	010B00				PRINTS(/"8D"8AD1:   /)
  1701	010B00	5802 000C 		L	R0,D1,R2
  1702					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1703	010B20				PRINTS(/    A1:   /)
  1704	010B20	5802 002C 		L	R0,A1,R2
  1705					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1706	010B3E				PRINTS(/"8D"8AD2:   /)
  1707	010B3E	5802 0010 		L	R0,D2,R2
  1708					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1709	010B5E				PRINTS(/    A2:   /)
  1710	010B5E	5802 0030 		L	R0,A2,R2
  1711					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1712	010B7C				PRINTS(/"8D"8AD3:   /)
  1713	010B7C	5802 0014 		L	R0,D3,R2
  1714					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1715	010B9C				PRINTS(/    A3:   /)
  1716	010B9C	5802 0034 		L	R0,A3,R2
  1717					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
Page  12-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		 EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP

  1718	010BBA				PRINTS(/"8D"8AD4:   /)
  1719	010BBA	5802 0018 		L	R0,D4,R2
  1720					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1721	010BDA				PRINTS(/  A4(Rp): /)
  1722	010BDA	5802 0038 		L	R0,A4,R2
  1723					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1724	010BF8				PRINTS(/"8D"8AD5:   /)
  1725	010BF8	5802 001C 		L	R0,D5,R2
  1726					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1727	010C18				PRINTS(/  A5(Rs): /)
  1728	010C18	5802 003C 		L	R0,A5,R2
  1729					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1730	010C36				PRINTS(/"8D"8AD6:   /)
  1731	010C36	5802 0020 		L	R0,D6,R2
  1732					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1733	010C56				PRINTS(/  A6(Rd): /)
  1734	010C56	5802 0040 		L	R0,A6,R2
  1735					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1736	010C74				PRINTS(/"8D"8AD7:   /)
  1737	010C74	5802 0024 		L	R0,D7,R2
  1738					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1739	010C94				PRINTS(/  A7(SP): /)
  1740	010C94	5802 0044 		L	R0,A7,R2
  1741					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1742	010CA0	4300 F780 		J	DSTART
  1743				
  1744					FO	STATUS			: de-access STATUS
  1745				
  1746					EM	: EBUS
Page  13-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  1747				        SUBTTL  Control Table Allocation and Diagnostics - FINISH.LIB
  1748				 
  1749				:**********************************************************************
  1750				:                                                                     *
  1751				:       This program is the sole property and confidential            *
  1752				:       information of Tymshare, Inc., and may not be copied          *
  1753				:       in whole or in part or disclosed to any third party           *
  1754				:       without the prior written consent of Tymshare.                *
  1755				:                                                                     *
  1756				:**********************************************************************
  1757				
  1758					RA	0		:	FINISH.LIB
  1759				
  1760				:	this file should always be assembled LAST!
  1761				
  1762				:ALLOCATE FPANEL IF USER HAS NOT
  1763	000001			  IF	\FPANEL
  1764	000000			  ELSE
  1765					SEG	A.DATA
  1766				FPANEL  HS      1
  1767				  EI
  1768	000000			  IF	\FRISIS
  1769	000001			  ELSE
  1770	0000F4				SEG	0
  1771	0000F4			FRISIS	HS	$A (MAXPRT+15)/16
  1772				  EI
  1773	000000			  IF	\TOISIS
  1774	000001			  ELSE
  1775	000104				SEG	0
  1776	000104			TOISIS	HS	$A (MAXPRT+15)/16
  1777				  EI
  1778				
  1779	000001			  IF	1-(\PATCH0)
  1780	000114				SEG	0
  1781	000114			PATCH0	WS	20	:SEGMENT ZERO PATCH AREA
  1782				  EI
  1783	000001			  IF	1-(\PATCH1)
  1784	010CA4				SEG	1
  1785	010CA4			PATCH1	WS	20	:SEGMENT ONE PATCH AREA
  1786				  EI
  1787	000001			  IF	1-(\PATCH2)
  1788	021100				SEG	2
  1789	021100			PATCH2	WS	20	:SEGMENT TWO PATCH AREA
  1790				  EI
  1791				
  1792	000000				IF	\APROT0
  1793	000001				ELSE
  1794	000006			APROT0	EQ	6	:EXECUTION PROTECTED
  1795					REMARK	%DEFAULT AREA PROTECTIONS ASSUMED.%
  1796					EI
  1797	000000				IF	\APROT1
  1798	000001				ELSE
  1799	000005			APROT1	EQ	5	:WRITE PROTECTED
Page  13-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  1800					EI
  1801	000002			Q1	EQ	2
  1802	00000C				RE	0C
  1803	000000				IF	\APROT|Q1|
  1804	000001				ELSE
  1805	000006			APROT|Q1| EQ	6	:EXECUTION PROTECTED
  1806					EI
  1807	000003			Q1	EQ	Q1+1
  1808	000000				ER
  1809				
  1810				:	NAD ALLOWS MORE THAN 10000X TO BE PLACED IN ONE "SEG".
  1811				:	WE MUST THEREFORE GO INTO EACH SEG AND IF > 10000X ORG BACK TO
  1812				:	10000X AND THEN ENTER THE NEXT SEG TO DEPOSIT THE REMAINDER.
  1813				:	THIS, OF COURSE, ASSUMES THAT THE NEXT SEG IS EMPTY.
  1814				:	A CHECK IS MADE TO INSURE THIS.
  1815				
  1816	000000			Q1	EQ		0
  1817	00000E				RE		0E		:FOR Q1 = 0 TO 0E
  1818	000194				  SEG		Q1
  1819	010000			Q3	  EQ		10000*(Q1+1)	:  Q3 = UPPER BOUND FOR THIS SEGMENT
  1820	FF0194				  IF		.-Q3		:  IF THIS SEGMENT OVERFLOWED
  1821				Q2	    EQ		.-Q3		:    Q2 = LENGTH OF OVERFLOW
  1822					    ORG		Q3		:    ORG TO MAXIMUM
  1823					    IF		0E-(Q1+1)	:    IF THE NEXT SEG IS NOT E
  1824					      SEG	Q1+1		:      GO INTO NEXT SEG
  1825					      IF	(.-Q3)		:      IF SEG ALREADY IN USE
  1826					        SEG	Q1		:        RETURN TO PREVIOUS SEG
  1827					      ELSE			:      ELSE
  1828				APROT|Q1+1|	EQ	APROT|Q1|	:        COPY PROTECTION
  1829					      EI			:      ENDIF
  1830					    EI				:    ENDIF
  1831					    ORG		.+Q2		:    ADD OVERFLOW TO THE CURRENT SEG
  1832					  EI				:  ENDIF
  1833	000001			Q1	  EQ		Q1+1		:NEXT Q1
  1834	000000				ER
  1835				
  1836				:GENERATE DIAGNOSTICS
  1837	000000			Q	EQ	0
  1838					NOLIST
  1839					RE	0F
  1840				SEG|Q|	EQ	SEG|Q|&07FFFFFFF
  1841					IF	SEG|Q|%(Q*10000)
  1842					REMARK	%"SEG
  1843					NUMBER	Q
  1844					REMARK	" has been redefined
  1845					EI
  1846				:	DEFINE SIZES
  1847					SEG	Q
  1848				S|Q|SIZE EQ	.-SEG|Q|
  1849				Q	EQ	Q+1
  1850					ER
  1851					LIST
  1852				
Page  13-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  1853				:	BITCH IF ANY SEGMENTS OVERFLOW
  1854					NOLIST
  1855				Q	EQ	0;	RE	0F;	IF	S|Q|SIZE-10000;	REMARK	%Segment 
  1856					NUMBER	Q;	REMARK	- overflow, exceeded by 
  1857					NUMBER	($0S|Q|SIZE-10000)$A;	REMARK	d bytes%;	EI
  1858				Q	EQ	Q+1;	ER
  1859					LIST
  1860				
  1861	000000			      IF        \XMEMRY
  1862	000001			      ELSE
  1863	000000			XMEMRY  EQ      0
  1864				      EI
  1865				
  1866				:	SET UP CTA TABLE
  1867	000000			  IF	SESIZE
  1868					REMARK	%SEGMENT E IS RESERVED FOR CTA. REMOVE OTHER ALLOCATIONS.%%
  1869	000001			  ELSE
  1870	0E0000				SEG	0E
  1871	000000			      IF        XMEMRY
  1872				CTA     WC      CNTRL+$01000    :Control flags
  1873	000001			      ELSE
  1874	0E0000	0000 003E 	CTA	WC	CNTRL	:CONTROL FLAGS
  1875				      EI
  1876				
  1877	0E0004	0000 01DC 		WC	CTASIZ	:SIZE OF CTA AREA
  1878				AREAS
  1879	000000			Q	EQ	0
  1880	00000E				RE	0E
  1881	0E0008	0000 0194 		WC	S|Q|SIZE	:AREA SIZE
  1882	000001			Q	EQ	Q+1
  1883	000000				ER
  1884				
  1885	0E0040	000E 			HC	0E	:NUMBER OF PROTECTION BYTES
  1886	000000			Q	EQ	0
  1887	00000E				RE	0E
  1888	0E0042	06			BC	APROT|Q|
  1889	000001			Q	EQ	Q+1
  1890	000000				ER
  1891				
  1892	0E0050	0001 02B6 		WC	ENTRY	:ENTRY POINT ADDRESS
  1893	000001			    IF	\DSTART
  1894	0E0054	0001 0424 		WC	DSTART	:DDT START ADDRESS
  1895	000000			    ELSE
  1896					WC	0	:NO USER DDT CODE
  1897				    EI
  1898				
  1899	0E0058	0000 00CA 		WC	FPANEL	:ADDRESS OF FRONT PANEL DISPLAY CELL
  1900				
  1901	0E005C	000E 00D8 		WC	HOSTS	:HOST TABLE ADDRESS
  1902	0E0060	000E 00DA 		WC	PORTS	:PORT TABLE ADDRESS
  1903	0E0064	000E 00DC 		WC	PTABLE	:PERMUTER TABLE ADDRESS
  1904	0E0068	0002 0900 		WC	IRING	:INPUT RING ADDRESS
  1905	0E006C	0002 0100 		WC	ORING	:OUTPUT RING ADDRESS
Page  13-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  1906	0E0070	0000 00F4 		WC	FRISIS	:ADDRESS TO INPUT BACKPRESSURE BIT ARRAY
  1907	0E0074	0000 0104 		WC	TOISIS	:ADDRESS OF OUTPUT BACKPRESSURE ARRAY
  1908	000000			  IF	\PCTTBL
  1909					WC	PCTTBL	:PROJECT CODE TERMINATION TABLE
  1910	000001			  ELSE
  1911	0E0078	0000 0000 		WC	0	:NULL TABLE
  1912				  EI
  1913	0E007C			COREST	WS	1	:ABSOLUTE CORE ADDRESS OF START OF SLOT
  1914	0E0080	0001 			HC	MAXHST	:MAXIMUM HOSTS FOR SLOT
  1915	0E0082	007F 			HC	MAXPRT	:HIGHEST PORT NUMBER FOR SLOT
  1916	0E0084	07FC 			HC	IRSIZE	:INPUT RING SIZE
  1917	0E0086	07FC 			HC	ORSIZE	:OUTPUT RING SIZE
  1918	0E0088			SLOTNO	HS	1	:SLOT NUMBER (SUPPLIED BY ISIS)
  1919	0E008A			VERREV	HS	0
  1920	000001			  IF	\VERSION
  1921	0E008A	02			BC	VERSION	:VERSION NUMBER
  1922	000000			  ELSE
  1923					BC	0
  1924				  EI
  1925	000001			  IF	\REVLEV
  1926	0E008B	00 			BC	REVLEV	:REVISION LEVEL
  1927	000000			  ELSE
  1928					BC	0
  1929				  EI
  1930				
  1931	000000			    IF	\QSTART
  1932					WC	QSTART	:DDT QUERRY START ADDRESS
  1933	000001			    ELSE
  1934	0E008C	0000 0000 		WC	0	:NO USER CODE
  1935				    EI
  1936	0E0090	01DC 		        HC      EMMAC0-CTA
  1937	000000			    IF  \NMACSS
  1938				        HC      NMACSS          :Number of MAC Register Sets
  1939	000001			    ELSE
  1940	0E0092	0000 		        HC      0               :No extended MAC sets
  1941				    EI
  1942	0E0094	0000 		        HC      0               :Segments to be saved
  1943				
  1944	000001			    IF \PRODID
  1945	000000			    ELSE
  1946				      IF  \HID0
  1947				PRODID  EQ      HID0            :Define PRODID as alias
  1948				      ELSE
  1949				      EI  :HID0
  1950				    EI :PRODID
  1951				
  1952	000001			    IF \PRODID
  1953	FFFF92			      IF PRODID-$a255
  1954				        REMARK  %PRODID is too large%
  1955				        QUIT    1
  1956				      EI
  1957	000061			      IF PRODID-$a48
  1958	000000			      ELSE
Page  13-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  1959				        REMARK  %PRODID is too small%
  1960				        QUIT    1
  1961				      EI
  1962	000000			    ELSE
  1963				        REMARK  %PRODID - Slot Product id must be defined%
  1964				        QUIT    1
  1965				    EI :PRODID
  1966	0E0096	0091 		        HC      PRODID          :slot Product id
  1967				
  1968	0E0098				WS	10	:RESERVED FOR FUTURE EXPANSION
  1969				
  1970	0E00D8			HOSTS	HS	0	:BEGINNING OF HOST TABLE
  1971	000000			Q	EQ	0
  1972	000001				RE	MAXHST
  1973	000001			    IF	\HOST|Q|
  1974	0E00D8	0020 			HC	HOST|Q|	:HOST NUMBER
  1975	000000			    ELSE
  1976					HC	0	:NO ASSEMBLED IN HOST NUMBER
  1977				    EI
  1978	000001			Q	EQ	Q+1
  1979	000000				ER
  1980				
  1981	0E00DA			PORTS	HS	0	:BEGINNING OF PORT TABLE
  1982	000000			Q	EQ	0
  1983	000001				RE	MAXHST
  1984	000001			    IF	\HPRT|Q|
  1985	0E00DA	007F 			HC	HPRT|Q|
  1986	000000			    ELSE
  1987					HC	0	:NO ASSEMBLED IN NUMBER OF PORTS
  1988				    EI
  1989	000001			Q	EQ	Q+1
  1990	000000				ER
  1991				
  1992	0E00DC			PTABLE	HS	MAXPRT+1	:PERMUTER TABLE
  1993				
  1994	0E01DC			EMMAC0  WS      0               :Extended Memory MAC Register sets
  1995	000000			    IF XMEMRY
  1996				      IF \NMACSS
  1997				        EXPMAC
  1998				        REMARK  %Using Extended Memory Option%
  1999				        NUMBER  $a NMACSS
  2000				        REMARK  MAC Register sets allocated%
  2001				        NUMBER  $a EMEMR3
  2002				        REMARK k allocated on non-zero meg
  2003				      ELSE
  2004				        REMARK  %NMACSS must be specified with extended memory%
  2005				        QUIT    1
  2006				      EI        :NMACSS
  2007				    EI          :XMEMRY
  2008				
  2009	0001DC			CTASIZ	EQ	.-CTA	:CTA AREA SIZE
  2010	0001DC			SESIZE	EQ	.-CTA	:SEG E SIZE
  2011				  EI
Page  13-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
EBUS02.R00		  Control Table Allocation and Diagnostics - FINISH.LIB

  2012				
  2013				:	TELL MEMORY REQUIREMENTS
  2014	000000			Q	EQ	0
  2015	000000			QQ	EQ	0
  2016	000000			QQQ	EQ	0
  2017	00000F				RE	0F
  2018	000194				IF	S|Q|SIZE
  2019					REMARK	%SEGMENT 
  2020					NUMBER	Q
  2021					REMARK	-length 
  2022	000194			QQQ	EQ	S|Q|SIZE
  2023					NUMBER	$A QQQ
  2024					REMARK	d, requires 
  2025	000200			Q3	EQ	(S|Q|SIZE+0FF)&(@0FF)
  2026					NUMBER	Q3
  2027	000200			QQ	EQ	QQ+Q3
  2028					REMARK	x bytes of core.
  2029					EI
  2030	000001			Q	EQ	Q+1
  2031	000000				ER
  2032				
  2033				:	GIVE FINAL SIZES
  2034					REMARK	%       
  2035					NUMBER	(QQ+$03FF)/400$A	:FORCE TO BASE 10 FOR OUTPUT
  2036					REMARK	d K-bytes of core
  2037				
  2038					UN		:spew out all undefined symbols

ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

A.BDAT	   299%	   311	   313%
A.BUFF	   299%	   321	   323%
A.CODE	   299%	   306	   308%	   597	   924	  1105	  1185	  1511
A.DATA	   299%	   301	   303%	   910	  1180	  1480
A.RING	   299%	   316	   318%	   565
A0	  1469#	  1698
A1	  1470#	  1704
A2	  1471#	  1710
A3	  1472#	  1716
A4	  1473#	  1722
A5	  1474#	  1728
A6	  1475#	  1734
A7	  1476#	  1740
ALARM.	   333%	   370%
APROT0	  1792	  1794#	  1888
APROT1	  1797	  1799#	  1890
APROT2	  1803	  1805#	  1890
APROT3	  1808	  1808#	  1834	  1890
APROT4	  1808	  1808#	  1834#	  1834	  1890
APROT5	  1808	  1808#	  1834#	  1834	  1890
APROT6	  1808	  1808#	  1834#	  1890
APROT7	  1808	  1808#	  1890
APROT8	  1808	  1808#	  1890
APROT9	  1808	  1808#	  1890
APROTA	  1808	  1808#	  1890
APROTB	  1808	  1808#	  1890
APROTC	  1808	  1808#	  1890
APROTD	  1808	  1808#	  1890
AREAS	  1878#
AT	  1633	  1633#	  1634	  1634#	  1635	  1635#	  1636	  1636#	  1637	  1637#	  1638	  1638#	  1639	  1639#
	  1641	  1641#	  1648	  1648#	  1654	  1654#	  1671	  1671#	  1672	  1672#	  1673	  1673#	  1686	  1686#
	  1689	  1689#	  1691	  1691#	  1694	  1694#	  1697	  1697#	  1700	  1700#	  1703	  1703#	  1706	  1706#
	  1709	  1709#	  1712	  1712#	  1715	  1715#	  1718	  1718#	  1721	  1721#	  1724	  1724#	  1727	  1727#
	  1730	  1730#	  1733	  1733#	  1736	  1736#	  1739	  1739#
B.	  1610#	  1690
BADSTR	  1183#	  1184	  1229
BANNER	  1632	  1645	  1662#
BDISC	   336%	   401%
BITCH	  1233#	  1234	  1236	  1239
BITS	  1485#	  1558	  1573	  1575
BKSPAC	  1209#	  1404
C.ADDR	  1189#	  1190	  1213
C.NEXT	  1188#	  1189	  1225
C.STR	  1190#	  1220	  1222
CASYN.	   335%	   388%
CEI	   561#	   609	   656	   711	   724	   744
CFGND.	   329%	   345%
CFROM	   832%	   903%	   962	   993
CHFLAG	   921#	  1053	  1057	  1062
CMBRD.	   335%	   394%
CMDLST	  1197#	  1219
CNTRL	    62%	   246%	  1874
COD	  1459#	  1684
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

CODE	  1629	  1645#
CONIP	  1440#	  1550
COREST	   248%	  1913%
CPOINT	   832%	   902%	   960	   983
CPRT.	   335%	   389%
CRASH	   832%	   971%	  1033	  1591	  1594	  1599
CRASH0	   919	   977#
CRASH1	   987	   992#
CRASHC	   832%	   901%	   957	   992	   998	  1048
CRAT	   832%	   913%	   914	   956	   957	   959	   960	   962	   982	   983	   990	   992	   993	   998
	  1000	  1042	  1048	  1078	  1079	  1080	  1081	  1085
CRATYP	  1494#	  1598
CRLF	  1663#	  1678
CRREG	   832%	   914%
CRSHCD	   925#	   946
CRSHCT	   832%	   900%	  1000	  1042
CRSTOP	   832%	   882	   884%	  1002	  1021
CRTENT	   898#	   908
CRTIME	   833%	   906%
CRTLEN	   907#	   913	  1076	  1079	  1080	  1081	  1082
CRTSIZ	   905#	  1085
CRXREG	   904#	   914	   956	   959	   982	   990
CSIO.	   335%	   393%
CSUPF.	   333%	   366%
CSUPR.	   333%	   367%
CSYNI.	   332%	   385%
CSYNO.	   332%	   386%
CTA	  1874#	  1936	  2009	  2010
CTASIZ	  1877	  2009#
CTIME	   833%	   912%	   954	   980	  1084
CURPSW	  1055	  1059#
D.	  1612#
D0	  1461#	  1695
D1	  1462#	  1701
D2	  1463#	  1707
D3	  1464#	  1713
D4	  1465#	  1719
D5	  1466#	  1725
D6	  1467#	  1731
D7	  1468#	  1737
DB.STA	  1099	  1100#	  1103
DBGOF.	   329%	   347%
DBGON.	   329%	   346%
DELIM	  1375#	  1378
DIGIT	  1358	  1365#
DISCO.	   379#
DISMIS	   329%	   338%	   733	   752	  1585
DIVIDE	  1333	  1345#
DLEN	  1372	  1384#
DLIST	  1375	  1382#	  1384
DNEXTK	  1218#
DOIT	  1213#	  1223
DOT	  1651	  1657	  1664#
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

DS.CUC	  1109%	  1275	  1285	  1353	  1409%
DS.DEL	  1109%	  1273	  1286	  1324	  1334	  1372%
DS.DIG	  1326	  1337	  1353#
DS.DLM	  1108%	  1181%	  1373
DS.ELL	  1108%	  1178%	  1197	  1197%	  1198	  1198%	  1199	  1199%	  1200	  1200%	  1627	  1627%	  1628	  1628%
	  1629	  1629%	  1630	  1630%	  1667	  1667%	  1669	  1669%
DS.ERR	  1108%	  1231%
DS.EXI	  1109%	  1199	  1200	  1247%
DS.GCH	  1109%	  1233	  1268	  1282	  1319	  1331	  1392%	  1393
DS.ILL	  1108%	  1228%	  1289	  1327	  1329	  1338	  1340
DS.NUM	  1109%	  1319%	  1320	  1322	  1325	  1332
DS.QUI	  1109%	  1197	  1198	  1252%
DS.TOK	  1109%	  1218	  1260%
DSTAR1	  1220#	  1226
DSTAR2	  1221	  1225#
DSTART	  1108%	  1217%	  1240	  1253	  1277	  1396	  1643	  1646	  1660	  1679	  1687	  1742	  1893	  1894
DUMP	  1669	  1671#
DUMP1	  1685	  1689#
EBDUMP	    78%	  1428%	  1429	  1504	  1640	  1668
ELIR	   555%	   650%
ELIR2	   652	   654#
ELODR	   556%	   784%
ELODR2	   788	   790#
ELOR	   556%	   693	   796%	  1052
ELOR2	   798	   800#
EMMAC0	  1936	  1994#
ENTRY	   247%	   832%	   997%	  1892
ENTRY1	   963	   994	   999#
ENTRY2	   950	  1017	  1020#
EVERN	  1500#	  1501	  1655	  1658
EXCRSH	   833%	   892	   894%	  1007	  1023
FAIL	   938#	   958	  1031
FAIL0	   918	   946#
FAIL1	   948	   951#
FASTC	   244%	   253%	  1529	  1533	  1561	  1566
FASTD	   329%	   339%
FGNDFL	   916#	   949	  1018	  1037
FLUSH	   555%	   647%
FMBIN.	   335%	   395%
FMBOT.	   335%	   396%
FPANEL	   248%	  1428%	  1481%	  1584	  1763	  1899
FPRT.	   335%	   390%
FREEZ.	   330%	   349%
FREZS.	   333%	   368%
FRISIS	   248%	  1768	  1771%	  1906
FSYNO.	   332%	   387%
GETCH	   555%	   621%
GETH	   555%	   630%
GETW	   555%	   639%
GMT	   244%	   255%	   953	   979
H.	  1614#	  1650	  1653	  1656	  1659	  1677	  1690	  1693	  1696	  1699	  1702	  1705	  1708	  1711
	  1714	  1717	  1720	  1723	  1726	  1729	  1732	  1735	  1738	  1741
HALT.	   334%	   376%
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

HELP	  1627	  1628	  1632#
HID0	  1946
HOST0	    80#	  1973	  1974
HOSTS	   248%	  1901	  1970%
HOSTX	   244%	   260%
HPARAM	  1483#	  1582
HPRT0	   412#	  1984	  1985
HSTAT	  1484#	  1577
IN	  1176#	  1392
IO	   332%	   382%	  1550
IOQRY.	   332%	   384%
IOWADR	  1499#	  1500	  1516	  1535
IOWSIZ	   557%	   584%	   586	   588
IPCRSH	  1588	  1594#
IPICRC	  1437#	  1595
IRING	   247%	   553%	   577%	   609	   610	   613	   615	   621	   630	   639	   656	  1029	  1523	  1904
IRSIZE	    56%	    66%	    67	   246%	   405	   553%	   580	   612	   613	   615	   621	   624	   630	   633
	   639	   642	   653	   655	  1527	  1916
ISFGND	  1065	  1070#
K.IN	   336%	   398%
K.OUT	   336%	   399%
KIO	   336%	   400%	  1247	  1252	  1650	  1653	  1656	  1659	  1677	  1690	  1693	  1696	  1699	  1702
	  1705	  1708	  1711	  1714	  1717	  1720	  1723	  1726	  1729	  1732	  1735	  1738	  1741
LCT	   273#
LCX	   247%	   265%
LENGTH	   277#
LMAC.	   365#
LOOK	   555%	   606	   607%
LP0LST	   276#
MAIN	  1565#	  1590
MAIN1	  1567	  1571#
MAIN2	  1581	  1584#
MAXHST	    70#	   415	  1914	  1972	  1983
MAXMSG	   275#
MAXP0	   274#
MAXPRT	   410	   411#	   412	  1771	  1776	  1915	  1992
NCRSAV	   833%	   887	   889%	   913	  1076
NFMI	   560#	   610	   710	   721	   741	   784	   802
NMACSS	  1937	  1996
NODEX	   244%	   261%
NPORT	    79#	   411
NRATE	   244%	   252%
NUMBER	  1331#	  1343	  1347
O.	  1613#
OBS	   554%	   701%
OBS1	   700#	   704
OCM	   554%	   666%
OCS	   554%	   679%
OCS1	   673	   688#	   692
ORING	   247%	   553%	   571%	   710	   711	   721	   724	   741	   744	   754	   755	   761	   769	   777
	   784	   792	   802	  1028	  1517	  1905
ORSIZE	    56%	    67%	   246%	   407	   553%	   574	   714	   716	   722	   725	   729	   742	   745	   748
	   754	   755	   761	   764	   769	   772	   777	   780	   785	   789	   792	   799	   801	  1521
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

	  1917
OUT	  1175#	  1217	  1228	  1229	  1231	  1404	  1632	  1633	  1634	  1635	  1636	  1637	  1638	  1639
	  1641	  1645	  1648	  1651	  1654	  1657	  1671	  1672	  1673	  1678	  1686	  1689	  1691	  1694
	  1697	  1700	  1703	  1706	  1709	  1712	  1715	  1718	  1721	  1724	  1727	  1730	  1733	  1736
	  1739
PATCH0	  1779	  1781#
PATCH1	  1783	  1785#
PATCH2	  1787	  1789#
PBUFSZ	    56%	    68%	   582
PC	  1460#	  1692
PCTTBL	  1908
PERBUF	   557%	   582%
PORTS	   248%	  1902	  1981%
PRINTN	  1615
PRINTP	  1615
PRINTS	  1615
PRODID	    56%	    61%	   833%	  1050	  1944	  1952	  1953	  1957	  1966
PROMPT	  1208#	  1217
PSHTBS	   952	   978	  1076#
PSWSAV	   920#	  1058	  1068	  1072
PTABLE	  1903	  1992#
PUSHIT	  1078#	  1083
PUTCH	   556%	   687	   690	   702	   761%	  1043	  1045	  1047	  1049	  1051
PUTH	   556%	   671	   684	   769%
PUTW	   556%	   777%	  1041
Q	   424#	   427	   430	   431	   432	   434	   434#	   435	   435#	   439#	   442	   448	   448#	   449
	   449#	  1198#	  1198	  1199#	  1199	  1200#	  1200	  1443#	  1478	  1627#	  1627	  1628#	  1628	  1629#
	  1629	  1630#	  1630	  1667#	  1667	  1669#	  1669	  1837#	  1840	  1841	  1847	  1848	  1849	  1849#
	  1850	  1850#	  1855#	  1856	  1858	  1858#	  1859	  1859#	  1879#	  1881	  1882	  1882#	  1883	  1883#
	  1886#	  1888	  1889	  1889#	  1890	  1890#	  1971#	  1973	  1974	  1978	  1978#	  1982#	  1984	  1985
	  1989	  1989#	  2014#	  2018	  2020	  2022	  2025	  2030	  2030#	  2031	  2031#
Q1	  1801#	  1803	  1805	  1807	  1807#	  1808	  1808#	  1816#	  1818	  1819	  1823	  1828	  1833	  1833#
	  1834	  1834#
Q2	  1834#	  1834
Q3	  1819#	  1820	  1825	  1834#	  1834	  2025#	  2026	  2027	  2031#	  2031
QQ	   441#	   451	  2015#	  2027	  2027#	  2031	  2031#	  2035
QQQ	  2016#	  2022#	  2023	  2031#	  2031
QSTART	  1931
R0	   245%	   280%	   621	   630	   639	   647	   666	   667	   668	   670	   679	   680	   681	   683
	   686	   689	   701	   709	   711	   712	   714	   715	   731	   750	   761	   769	   777	   786
	   787	   789	   790	   792	   940	   943	   946	   947	   949	   951	   955	   957	   971	   974
	   977	   981	   982	   984	   988	   992	   997	   998	  1014	  1016	  1018	  1027	  1028	  1029
	  1031	  1036	  1037	  1040	  1042	  1044	  1046	  1048	  1050	  1061	  1062	  1064	  1066	  1068
	  1070	  1072	  1213	  1214	  1238	  1262	  1264	  1265	  1276	  1278	  1288	  1293	  1308	  1310
	  1328	  1330	  1335	  1339	  1342	  1354	  1363	  1365	  1373	  1375	  1394	  1395	  1397	  1399
	  1401	  1409	  1411	  1413	  1517	  1520	  1521	  1522	  1523	  1526	  1527	  1528	  1529	  1532
	  1533	  1534	  1535	  1538	  1539	  1542	  1544	  1545	  1546	  1547	  1548	  1557	  1558	  1559
	  1560	  1573	  1574	  1575	  1576	  1578	  1582	  1584	  1597	  1598	  1600	  1649	  1652	  1655
	  1658	  1674	  1684	  1692	  1695	  1698	  1701	  1704	  1707	  1710	  1713	  1716	  1719	  1722
	  1725	  1728	  1731	  1734	  1737	  1740
R1	   245%	   281%	   613	   616	   723	   724	   725	   726	   729	   730	   731	   754	   784	   785
	   787	   792	   946	   953	   954	   961	   962	   979	   980	   985	   990	   993	   999	  1000
	  1053	  1054	  1056	  1057	  1076	  1078	  1079	  1080	  1081	  1082	  1084	  1085	  1213	  1219
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

	  1220	  1222	  1225	  1233	  1268	  1275	  1282	  1285	  1319	  1331	  1353	  1354	  1355	  1357	  1359
	  1361	  1372	  1375	  1377	  1398	  1400	  1402	  1405	  1410	  1412	  1414	  1516	  1520	  1522
	  1526	  1528	  1532	  1534	  1535	  1538	  1542	  1571	  1574	  1577	  1578	  1579	  1580	  1586
	  1587	  1589	  1592	  1595	  1650	  1653	  1656	  1659	  1677	  1690	  1693	  1696	  1699	  1702
	  1705	  1708	  1711	  1714	  1717	  1720	  1723	  1726	  1729	  1732	  1735	  1738	  1741
R10	   245%	   290%	   983	   986	   988	   989	  1033	  1591	  1594	  1599
R11	   245%	   291%
R12	   245%	   292%	   958
R13	   245%	   293%	   960
R14	   245%	   294%	   609	   610	   612	   613	   614	   615	   621	   622	   624	   630	   631	   633
	   639	   640	   642	   647	   650	   651	   653	   655	   656	   959
R15	   245%	   295%	   710	   712	   716	   721	   722	   726	   741	   742	   746	   754	   755	   756
	   761	   762	   764	   769	   770	   772	   777	   778	   780	   786	   796	   797	   799	   801
	   802
R2	   245%	   282%	   615	   670	   672	   683	   685	   686	   691	   703	   755	   941	   942	   944
	   952	   956	   972	   973	   975	   978	   986	   989	   990	  1069	  1073	  1077	  1086	  1222
	  1273	  1286	  1299	  1324	  1326	  1334	  1337	  1341	  1345	  1346	  1356	  1360	  1362	  1366
	  1376	  1379	  1549	  1565	  1569	  1570	  1576	  1683	  1684	  1692	  1695	  1698	  1701	  1704
	  1707	  1710	  1713	  1716	  1719	  1722	  1725	  1728	  1731	  1734	  1737	  1740
R3	   245%	   283%	   666	   672	   679	   685	   688	   689	   700	   701	   743	   744	   745	   746
	   748	   749	   750	  1220	  1263	  1264	  1265	  1278	  1279	  1293	  1294	  1298	  1309	  1310
	  1330	  1335	  1342	  1561	  1566	  1568
R4	   245%	   284%	   611	   617	   623	   625	   632	   634	   641	   643	   657	   669	   671	   682
	   684	   687	   690	   693	   702	   717	   728	   732	   757	   763	   765	   771	   773	   779
	   781	   791	   803	  1039	  1041	  1043	  1045	  1047	  1049	  1051	  1052	  1218	  1260	  1280
	  1290	  1291	  1297	  1300	  1304	  1306	  1328	  1339	  1341	  1346
R4SAV	  1182#	  1260	  1297
R5	   245%	   285%	   694	   705	  1336
R6	   245%	   286%	  1078	  1079	  1080	  1081
R7	   245%	   287%
R8	   245%	   288%
R9	   245%	   289%
RATE	   244%	   251%
RBMAC.	   331%	   359%
RBPSD.	   330%	   355%	  1063	  1067
RBREG.	   330%	   354%
RDDTP.	   330%	   353%
RDDTR.	   330%	   352%
RDMAC.	   331%	   358%
RDUMP	  1667	  1683#
REGDMP	  1501#	  1535	  1683
REVLEV	    56%	    59%	  1652	  1925	  1926
RFMAC.	   331%	   360%
RFPSD.	   331%	   357%	  1015	  1071
RFREG.	   331%	   356%
RGSTOR	   915#	   940	   941	   943	   944	   951	   955	   971	   972	   974	   975	   977	   981
RING	   562#	   613	   615	   621	   630	   639	   754	   755	   761	   769	   777	   792
ROOM	   556%	   669	   682	   721%
ROOM1	   723#	   734
ROOM2	   727	   730#
RSCLK.	   333%	   371%
RSTRT.	   329%	   344%	  1032
S.	  1609#
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

S0SIZE	  1848#	  1856	  1881	  2018	  2022	  2025
S1SIZE	  1850#	  1859	  1883	  2031
S2SIZE	  1850#	  1859	  1883	  2031
S3ADDR	  1508#	  1674
S3SIZE	  1850#	  1859	  1883	  2031
S4SIZE	  1850#	  1859	  1883	  2031
S5SIZE	  1850#	  1859	  1883	  2031
S6SIZE	  1850#	  1859	  1883	  2031
S7SIZE	  1850#	  1859	  1883	  2031
S8SIZE	  1850#	  1859	  1883	  2031
S9SIZE	  1850#	  1859	  1883	  2031
SASIZE	  1850#	  1859	  1883	  2031
SAVPSW	   942	   973	  1061#
SBSIZE	  1850#	  1859	  1883	  2031
SCSIZE	  1850#	  1859	  1883	  2031
SDISC	   336%	   402%
SDSIZE	  1850#	  1859	  1883	  2031
SEG0	   427	   431%	   432%	   442	  1840	  1840%	  1841	  1848
SEG1	   435	   435%	   449	  1850	  1850%
SEG2	   435	   435%	   449	  1850	  1850%
SEG3	   435	   435%	   449	  1850	  1850%
SEG4	   435	   435%	   449	  1850	  1850%
SEG5	   435	   435%	   449	  1850	  1850%
SEG6	   435	   435%	   449	  1850	  1850%
SEG7	   435	   435%	   449	  1850	  1850%
SEG8	   435	   435%	   449	  1850	  1850%
SEG9	   435	   435%	   449	  1850	  1850%
SEGA	   435	   435%	   449	  1850	  1850%
SEGB	   435	   435%	   449	  1850	  1850%
SEGC	   435	   435%	   449	  1850	  1850%
SEGD	   435	   435%	   449	  1850	  1850%
SEGE	   435	   435%	   449	  1850	  1850%
SESIZE	  1850#	  1859	  1867	  2010#	  2031
SET1P.	   331%	   361%
SETBE.	   331%	   363%
SETFE.	   332%	   364%
SETP.	   331%	   362%
SFREZ.	   334%	   375%
SHALT.	   334%	   377%
SHARE	   336%	   397%
SLCNT	   272#
SLEV	   155#	   156
SLOR	   556%	   741%
SLOR1	   743#	   753
SLOR2	   747	   749#
SLOR3	   751	   754#
SLOTNO	   244%	  1918%
SLOWC	   244%	   254%	  1533	  1579
SPACE	   556%	   709%	  1039
SPACE1	   713	   715#
SREV	   152#	   153
SSCLK.	   333%	   372%
SSRCRA	  1492#	  1547	  1589
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

SSRCRC	  1435#	  1592
SSRTIM	  1493#	  1548
STAREA	  1489#	  1549
START	   832%	   920	  1059	  1428%	  1516%
STATIM	  1491#	  1546
STCRA	  1490#	  1545	  1586
STOKEN	  1184#	  1263	  1298	  1299
STSEG2	   557%	   567%	   584	  1499
SUDIA.	   333%	   373%
SVCCRA	  1554	  1598#
SVCCRC	  1436#	  1600
SVSPY.	   378#
SYNC	  1482#	  1539	  1571	  1572
SYS	   329%	   341%	  1015	  1032	  1063	  1067	  1071	  1518	  1524	  1530	  1536	  1540	  1675
TEMPER	   244%	   256%
TERR	  1206#	  1228
TFREZ.	   330%	   351%
THAW.	   330%	   350%
THAWS.	   333%	   369%
TIISC.	   332%	   391%
TIISI.	   335%	   392%
TO	  1633	  1633#	  1634	  1634#	  1635	  1635#	  1636	  1636#	  1637	  1637#	  1638	  1638#	  1639	  1639#
	  1641	  1641#	  1648	  1648#	  1654	  1654#	  1671	  1671#	  1672	  1672#	  1673	  1673#	  1686	  1686#
	  1689	  1689#	  1691	  1691#	  1694	  1694#	  1697	  1697#	  1700	  1700#	  1703	  1703#	  1706	  1706#
	  1709	  1709#	  1712	  1712#	  1715	  1715#	  1718	  1718#	  1721	  1721#	  1724	  1724#	  1727	  1727#
	  1730	  1730#	  1733	  1733#	  1736	  1736#	  1739	  1739#
TOISIS	   248%	  1773	  1776%	  1907
TOKEN0	  1262#	  1283	  1305
TOKEN1	  1268#	  1269	  1271	  1274
TOKEN2	  1282#	  1292	  1295	  1307	  1311
TOKEN3	  1287	  1297#
TOKEN4	  1284	  1304#
TRBOFF	   918#	   945
TRCOFF	   919#	   976
TSTDB.	   329%	   348%
TTERR	  1207#	  1231
UCORE.	   374#
V	  1630	  1648#
VERNO	   244%	   258%
VERREV	   248%	  1919%
VERSIO	    56%	    58%	  1649	  1920	  1921
VOLTS	   244%	   257%
WWVBT	   259#
XBITS	  1486#	  1560	  1565	  1570
XLATE	  1439#	  1518	  1524	  1530	  1536	  1540	  1675
XLCRSH	  1519	  1525	  1531	  1537	  1541	  1597#
XMEMRY	  1861	  1863#	  1871	  1995
Z.	  1611#	  1653	  1659	  1677	  1693	  1696	  1699	  1702	  1705	  1708	  1711	  1714	  1717	  1720
	  1723	  1726	  1729	  1732	  1735	  1738	  1741
.	   559	   584	   834	   898	  1016	  1064	  1106	  1197	  1198	  1199	  1200	  1384	  1433	  1443
	  1627	  1628	  1629	  1630	  1667	  1669	  1820	  1825	  1834	  1848	  1850	  2009	  2010
.CDUMP	  1454#	  1538
.FASTC	  1451#	  1532
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Symbol cross reference

.IRING	  1449#	  1526
.IRSIZ	  1450#	  1528
.ORING	  1447#	  1520
.ORSIZ	  1448#	  1522
.SIZE	  1455#	  1500
.SLOWC	  1452#	  1534
.SYNC	  1453#	  1542
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.5    15-apr-88 17:33
Macro/Opdef cross reference

DS.CMD	  1193#	  1197	  1198	  1199	  1200	  1627	  1628	  1629	  1630	  1667	  1669
PRINTN	  1616#	  1650	  1653	  1656	  1659	  1677	  1690	  1693	  1696	  1699	  1702	  1705	  1708	  1711
	  1714	  1717	  1720	  1723	  1726	  1729	  1732	  1735	  1738	  1741
PRINTP	  1619#	  1632	  1633	  1634	  1635	  1636	  1637	  1638	  1639	  1641	  1645	  1648	  1651	  1654
	  1657	  1671	  1672	  1673	  1678	  1686	  1689	  1691	  1694	  1697	  1700	  1703	  1706	  1709
	  1712	  1715	  1718	  1721	  1724	  1727	  1730	  1733	  1736	  1739
PRINTS	  1622#	  1633	  1634	  1635	  1636	  1637	  1638	  1639	  1641	  1648	  1654	  1671	  1672	  1673
	  1686	  1689	  1691	  1694	  1697	  1700	  1703	  1706	  1709	  1712	  1715	  1718	  1721	  1724
	  1727	  1730	  1733	  1736	  1739   W>(I