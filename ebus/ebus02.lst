Page  1-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.I01	 

     1				::      ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--IPI--(EBUS)
     2				
     3				: ******************************************************************
     4				: **                  PROPRIETARY INFORMATION                     **
     5				: **                                                              **
     6				: **  This  source code listing constitutes the proprietary pro-  **
     7				: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
     8				: **  this program listing, agrees that neither this listing nor  **
     9				: **  the   information  disclosed herein nor any  part  thereof  **
    10				: **  shall be  reproduced or transferred to other documents  or  **
    11				: **  used  or  disclosed to others for manufacturing or for any  **
    12				: **  other   purpose except as specifically authorized in  wri-  **
    13				: **  ting by  TYMNET, Incorporated.                              **
    14				: ******************************************************************
    15				: **                   PROGRAM IDENTIFICATION                     **
    16				: **                                                              **
    17				: **  Version Number     2.0             Release Date :11/19/85   **
    18				: **                                                              **
    19				: **  File Name          IPI SLOT INTERFACE INIT FILE             **
    20				: **                                                              **
    21				: ******************************************************************
    22				: **                CONFIGURATION SPECIFICATION                   **
    23				: **                                                              **
    24				: **  Core Memory Requirement: 265K                               **
    25				: **                                                              **
    26				: **  Basic Code Size: 9K                                         **
    27				: **                                                              **
    28				: **  Additional Code Size per Tymfile Parameter Unit:            **
    29				: **    EBDUMP:  256K                                             **
    30				: **                                                              **
    31				: **  Estimated Code Growth for Next 12 Months:                   **
    32				: **                                                              **
    33				: **  Hardware/Firmware Requirements:                             **
    34				: **                                                              **
    35				: **  Other Software Requirements: XPI/EBUS Code                  **
    36				: **                                                              **
    37				: **  Slot Limitations:  supports SINGLE PDP-10 Host              **
    38				: **                                                              **
    39				: ******************************************************************
    40				: **                   DOCUMENT SPECIFICATION                     **
    41				: **                                                              **
    42				: **  Software Requirements Specification Number:                 **
    43				: **                                                              **
    44				: **  Functional Specification Number           :                 **
    45				: **                                                              **
    46				: **  Test Suite Number                         :                 **
    47				: **                                                              **
    48				: ******************************************************************
    49				: **                      MAINTENANCE HISTORY                     **
    50				: **                                                              **
    51				: **  Ver   Date    By   PIR/NSR         Reason for Change        **
    52				: ** ----- -------- ---  -------- ------------------------------  **
    53				: **                                                              **
Page  1-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.I01	 

    54				: ******************************************************************
    55				
    56				        GL      VERSIO,REVLEV,IRSIZE,ORSIZE,PRODID,PBUFSZ
    57				
    58	000002			VERSIO	EQ	$8 02			: VERSION
    59	000001			REVLEV	EQ	$8 01			: REVISION LEVEL
    60				
    61	000091			PRODID	EQ	91			: Product ID
    62	00003E			CNTRL	EQ	3E			: CTA control flags: Sup. time, Takeover,
    63				:						Host & Port #'s may be changed,
    64				:						Ports not re-usable.
    65				
    66	0007FC			IRSIZE	EQ	800-4			: input-ring size
    67	0007FC			ORSIZE	EQ	IRSIZE			: ouTput-ring size
    68	000000			PBUFSZ	EQ	0
    69				
    70	000001			MAXHST	EQ	1
Page  2-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.T01	 

    71				:	EBUS-IPI TYM-file
    72				:		Host:	24
    73				:		Node:	5473	Slot: 2
    74				:	Kernel Host:	4617
    75				
    76	000001			EBDUMP	EQ	1			: switch: enables EBUS Dump Area if 1
    77	000004			NCRSAV	EQ	4			: switch: save up to this many crashes
    78				
    79	00005E			NPORT	EQ	$A 94			: number of ports
    80	000018			HOST0	EQ	$A 24			: (anticipated) host number
Page  3-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

    81				: ******************************************************************
    82				: **                  PROPRIETARY INFORMATION                     **
    83				: **                                                              **
    84				: **  This  source code listing constitutes the proprietary pro-  **
    85				: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
    86				: **  this program listing, agrees that neither this listing nor  **
    87				: **  the   information  disclosed herein nor any  part  thereof  **
    88				: **  shall be  reproduced or transferred to other documents  or  **
    89				: **  used  or  disclosed to others for manufacturing or for any  **
    90				: **  other   purpose except as specifically authorized in  wri-  **
    91				: **  ting by  TYMNET, Incorporated.                              **
    92				: ******************************************************************
    93				: **                   PROGRAM IDENTIFICATION                     **
    94				: **                                                              **
    95				: **  Version Number     2.0             Release Date 10/15/85    **
    96				: **                                                              **
    97				: **  File Name          IPI SLOT INTERFACE                       **
    98				: **                                                              **
    99				: **  File Description   ALLOWS ISIS INTERFACE TO THE 'IPI' BOARD **
   100				: **  THAT RUNS 'EBUS' SOFTWARE, WHICH IS THE BASE FOR PDP10.     **
   101				: **  REQUIRES ISIS 7.01.                                         **
   102				: **                                                              **
   103				: **  File Abstract      :                                        **
   104				: **                                                              **
   105				: ******************************************************************
   106				: **                CONFIGURATION SPECIFICATION                   **
   107				: **                                                              **
   108				: **  Core Memory Requirement: 265K                               **
   109				: **                                                              **
   110				: **  Basic Code Size: 9K                                         **
   111				: **                                                              **
   112				: **  Additional Code Size per Tymfile Parameter Unit:            **
   113				: **            EBDUMP:  256K                                     **
   114				: **                                                              **
   115				: **  Estimated Code Growth for Next 12 Months: none              **
   116				: **                                                              **
   117				: **  Hardware/Firmware Requirements:                             **
   118				: **                                                              **
   119				: **  Other Software Requirements: MUST BE USED WITH ISIS 7.01    **
   120				: **                                                              **
   121				: **  Slot Limitations:  Supports single PDP-10 Host              **
   122				: **                                                              **
   123				: ******************************************************************
   124				: **                   DOCUMENT SPECIFICATION                     **
   125				: **                                                              **
   126				: **  Software Requirements Specification Number:                 **
   127				: **                                                              **
   128				: **  Functional Specification Number           :                 **
   129				: **                                                              **
   130				: **  Test Suite Number                         :                 **
   131				: **                                                              **
   132				: ******************************************************************
   133				: **                      MAINTENANCE HISTORY                     **
Page  3-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   134				: **                                                              **
   135				: **  Ver   Date    By   PIR/NSR         Reason for Change        **
   136				: ** ----- -------- ---  -------- ------------------------------  **
   137				: **                                                              **
   138				: ******************************************************************
   139				
   140					SUBTTL	ISIS Assembly Switch Definitions	- START.LIB
   141				:******************************************************************
   142				:
   143				:	This program is the sole property and confidential
   144				:	information of Tymshare, Inc., and may not be copied
   145				:	in whole or in part or disclosed to any third party
   146				:	without the prior written consent of Tymshare.
   147				:
   148				:*******************************************************************
   149				
   150					REMARK %Start.Lib Version 
   151	000000			SREV	EQ	0
   152					NUMBER SREV
   153					REMARK .0
   154	000005			SLEV	EQ	05
   155					NUMBER SLEV
   156				
   157				: Version 0.05 01/19/83 MDS
   158				:	Delete Remark regarding incompatibility with ISIS 5.00
   159				: Version 0.04 03/12/82  MDS
   160				:	Add new fields to SYS SVC Sub-operand definitions,
   161				:	per ISIS2 v.5.01
   162				: Version 0.03 03/08/82  MDS
   163				:	Add new fields to Seg F table per ISIS 5.01
   164				:	(note - Start.lib ** NOT ** compatible with ISIS 5.00
   165				:	because SLCNT and LCX were reversed in 5.00 )
   166				: Version 0.02  12/08/81  MDS
   167				:	Add QSTART remark, add I/O sub-ops for mother board.
   168				:	Delete ISIS (one) code - force ISIS2
   169				: Version 0.01  01/08/81  MDS
   170				:	Correct relative addresses of local clock index and values.
   171				
   172					RA	0		:	START.LIB
   173				
   174				:	this file should always be assembled IMMEDIATELY AFTER the *.TYM file
   175				
   176				
   177							:Note - ISIS 1 is no longer supported
   178				
   179				:			ISIS - II Version
   180				:
   181				:	The following parameters should be defined in the *.TYM file:
   182				:	MAXHST	maximum number of hosts associated with this interface slot
   183				:	MAXPRT	number of highest port associated with this interface slot
   184				:			(number of ports - 1)
   185				:	IRSIZE	 number of bytes to provide for input ring, from dispatcher
   186				:	ORSIZE	 number of bytes to provide for output ring, to dispatcher
Page  3-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   187				:	CNTRL	dispatcher control bits
   188				
   189				:	the following symbols MUST be defined SOMEWHERE in the assembly:
   190				:	IRING	the start of the input ring, from dispatcher
   191				:	ORING	the start of the output ring, to dispatcher
   192				:	ENTRY	the location of the first instruction to be executed
   193				
   194				:	the following symbols are defined for convenience:
   195				:	RATE	the rate of the fast clock (ticks/second)
   196				:	NRATE	word containing the value of RATE
   197				:	FASTC	word containing  realtime fast clock
   198				:	SLOWC	word containing  realtime slow clock (1-second)
   199				:	GMT	word containing GMT clock
   200				:	TEMPER	byte containing machine temperature
   201				:	VOLTS	byte containing machine voltage
   202				:	VERNO	halfword containing ISIS version number
   203				:	WWVBT	word containing WWVB time
   204				:	HOSTX	halfword containing kernel host number
   205				:	NODEX	halfword containing kernel node number
   206				:	LCX	halfword, offset of local clocks within seg F
   207				:	SLCNT	halfword, number of slots known to ISIS dispatcher
   208				:	LCT	halfword, pointer to crash table
   209				:	MAXP0	halfword, highest port 0 msg. #
   210				:	MAXMSG	halfword, highest msg # for all other ports
   211				:	LP0LST	halfword, length table for port 0 msgs.
   212				:	LENGTH	length table for msgs. all other ports
   213				:	R0-R15	symbolic names for the registers
   214				:	SEGn	the start address of segment n (0-0E)
   215				:	HOSTS	halfword array of host numbers as known by the dispatcher (R/O)
   216				:	PORTS	halfword array of ports/host as known by dispatcher (R/O)
   217				:
   218				:	the following symbols MAY be defined. defaults used otherwise
   219				:	APROTn	protection byte for area n. default area 1 write protected,
   220				:		other areas execution protected.
   221				:	HOSTn	host number for host position n. default none.
   222				:	HPRTn	number of ports for host position n. default none.
   223				:	DSTART	user DDT execution start address. default none.
   224				:	QSTART  user DDT query handler start address, default none.
   225				:	FPANEL	halfword cell for front panel display. default cell allocated
   226				:	FRISIS	bit array for input backpressure (1=no backpressure) default
   227				:			array allocated.
   228				:	TOISIS	bit array for output backpressure (1=no backpressure) default
   229				:			array allocated.
   230				:	VERSION	version number for slot code (default zero)
   231				:	PCTTBL	bit array for indicating terminating character for project
   232				:			code. (default none)
   233				:	REVLEV	revision level for slot code (default zero)
   234				:	A.DATA	segment number for data area. Default 0
   235				:	A.CODE	segment number for code area. Default 1
   236				:	A.BDAT	segment number for based data. Default 2.
   237				:	A.RING	segment number for rings. Default 2.
   238				:	A.BUFF	segment numberfor buffer(let)s. Default 2.
   239				:
Page  3-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   240				:	in addition most SVC calls have been assigned symbolic names.
   241				Page  3-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   242				
   243					GL	FASTC,SLOWC,RATE,NRATE,GMT,TEMPER,VOLTS,VERNO,HOSTX,NODEX,SLOTNO
   244					GL	R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15
   245					GL	IRSIZE,ORSIZE,CNTRL
   246					GL	ENTRY,IRING,ORING,LCX
   247					GL	VERREV,COREST,FPANEL,HOSTS,PORTS,FRISIS,TOISIS
   248				
   249				:	DEFINE SEG 15d LOCATIONS
   250	000258			RATE	EQ	$A 600		:clock rate, ticks per second
   251	0F0000			NRATE	EQ	0F0000		:word, contains RATE
   252	0F0004			FASTC	EQ	0F0004		:word, contains fast clock (ticks)
   253	0F0008			SLOWC	EQ	0F0008		:word, contains slow clock (seconds)
   254	0F000C			GMT	EQ	0F000C		:word, contains GMT (seconds since 1/1/72)
   255	0F0010			TEMPER	EQ	0F0010		:byte, contains machine temperature
   256	0F0011			VOLTS	EQ	0F0011		:byte, contains machine voltage
   257	0F0012			VERNO	EQ	0F0012		:halfword, ISIS version number
   258	0F0014			WWVBT	EQ	0F0014		:word, WWVB time (format ??)
   259	0F0018			HOSTX	EQ	0F0018		:halfword, kernel host number
   260	0F001A			NODEX	EQ	0F001A		:halfword, kernel node number
   261				
   262				: Local clocks displacements
   263				
   264	0F001C			LCX	EQ	0F001C	:1/2 word, contains offset of LOCLKS within seg F
   265				: LOCLKX and LOCLKS must be referenced by the pointer in LCX
   266				:LOCLKX	EQ	LOCLKS-2 :1/2 word, index to current clock from LOCLKX
   267				:LOCLKS	EQ	Seg F + contents of LCX
   268							:clocks for slots, array of word entries per slot
   269							:1st halfword is user ticks, 2nd is sys ticks for slot
   270				
   271	0F001E			SLCNT	EQ	0F001E		:halfword, number of dispatcher slots
   272	0F0020			LCT	EQ	0F0020		:halfword, pointer to crash table
   273	0F0022			MAXP0	EQ	0F0022		:halfword, max. msg. # for port 0
   274	0F0024			MAXMSG	EQ	0F0024		:halfword, max. msg #, all non-0 ports
   275	0F0026			LP0LST	EQ	0F0026		:halfword, offset to port 0 msg length table
   276	0F0028			LENGTH	EQ	0F0028		:bytee, lengths of non-0 port msgs
   277				
   278				:	Define Registers
   279	000000			R0	EQ	0
   280	000001			R1	EQ	1
   281	000002			R2	EQ	2
   282	000003			R3	EQ	3
   283	000004			R4	EQ	4
   284	000005			R5	EQ	5
   285	000006			R6	EQ	6
   286	000007			R7	EQ	7
   287	000008			R8	EQ	8
   288	000009			R9	EQ	9
   289	00000A			R10	EQ	$A 10
   290	00000B			R11	EQ	$A 11
   291	00000C			R12	EQ	$A 12
   292	00000D			R13	EQ	$A 13
   293	00000E			R14	EQ	$A 14
   294	00000F			R15	EQ	$A 15
Page  3-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   295				Page  3-7	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   296				
   297				:	AREA DEFINITIONS
   298					GL	A.DATA,A.CODE,A.BDAT,A.RING,A.BUFF
   299				:
   300	000000			  IF	\A.DATA
   301	000001			  ELSE
   302	000000			A.DATA	EQ	0	:DEFAULT DATA AREA
   303				  EI
   304				
   305	000000			  IF	\A.CODE
   306	000001			  ELSE
   307	000001			A.CODE	EQ	1	:DEFAULT CODE AREA
   308				  EI
   309				
   310	000000			  IF	\A.BDAT
   311	000001			  ELSE
   312	000002			A.BDAT	EQ	2	:DEFAULT BASED DATA AREA
   313				  EI
   314				
   315	000000			  IF	\A.RING
   316	000001			  ELSE
   317	000002			A.RING	EQ	2	:DEFAULT RING AREA
   318				  EI
   319				
   320	000000			  IF	\A.BUFF
   321	000001			  ELSE
   322	000002			A.BUFF	EQ	2	:DEFAULT BUFFER AREA
   323				  EI
   324				Page  3-8	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   325				
   326				:	SVC DEFINITIONS
   327				:
   328					GL	DISMIS,FASTD,SYS,RSTRT.,CFGND.,DBGON.,DBGOF.,TSTDB.
   329					GL	FREEZ.,THAW.,TFREZ.,RDDTR.,RDDTP.,RBREG.,RBPSD.
   330					GL	RFREG.,RFPSD.,RDMAC.,RBMAC.,RFMAC.,SET1P.,SETP.,SETBE.
   331					GL	SETFE.,IO,IOQRY.,CSYNI.,CSYNO.,FSYNO.,TIISC.
   332					GL	CSUPF.,CSUPR.,FREZS.,THAWS.,ALARM.,RSCLK.,SSCLK.,SUDIA.
   333					GL	SFREZ.,HALT.,SHALT.
   334					GL	TIISI.,CASYN.,CPRT.,FPRT.,CSIO.,CMBRD.,FMBIN.,FMBOT.
   335					GL	SHARE,K.IN,K.OUT,KIO,BDISC,SDISC
   336				:
   337	000000			DISMIS	EQ	0	:DISMISS SVC
   338	000001			FASTD	EQ	1	:FAST DISMISS SVC
   339				:
   340	000002			SYS	EQ	2	:SYS SVC
   341				
   342				:	SYS SVC SUBOPERANDS
   343	000000			RSTRT.	EQ	0	:Restart syscall
   344	000001			CFGND.	EQ	1	:Connect foreground syscall
   345	000002			DBGON.	EQ	2	:Debug mode ON syscall
   346	000003			DBGOF.	EQ	3	:Debug mode OFF syscall
   347	000004			TSTDB.	EQ	4	:Test debug mode syscall
   348	000005			FREEZ.	EQ	5	:Freeze slot syscall
   349	000006			THAW.	EQ	6	:Thaw slot syscall
   350	000007			TFREZ.	EQ	7	:Test freeze syscall
   351	000008			RDDTR.	EQ	8	:Read DDT register syscall
   352	000009			RDDTP.	EQ	9	:Read DDT PSD syscall
   353	00000A			RBREG.	EQ	0A	:Read background register syscall
   354	00000B			RBPSD.	EQ	0B	:Read background PSD syscall
   355	00000C			RFREG.	EQ	0C	:Read foreground register syscall
   356	00000D			RFPSD.	EQ	0D	:Read foreground PSD syscall
   357	00000E			RDMAC.	EQ	0E	:Read DDT MAC register syscall
   358	00000F			RBMAC.	EQ	0F	:Read background MAC register syscall
   359	000010			RFMAC.	EQ	10	:Read foreground MAC register syscall
   360	000011			SET1P.	EQ	11	:Set 1 protect syscall
   361	000012			SETP.	EQ	12	:Set protection syscall
   362	000013			SETBE.	EQ	13	:Set background execution addr syscall
   363	000014			SETFE.	EQ	14	:Set foreground execution addr syscall
   364	000015			LMAC.	EQ	15	:Set up MAC from CTA (DDT only)
   365	000016			CSUPF.	EQ	16	:Check SUP freeze state
   366	000017			CSUPR.	EQ	17	:Check SUP run Q state
   367	000018			FREZS.	EQ	18	:Freeze the SUP
   368	000019			THAWS.	EQ	19	:Thaw the SUP
   369	00001A			ALARM.	EQ	1A	:Set/Clear alarm
   370	00001B			RSCLK.	EQ	1B	:Read the super-clock
   371	00001C			SSCLK.	EQ	1C	:Set the super-clock
   372	00001D			SUDIA.	EQ	1D	:Set user diagnostic
   373	00001E			UCORE.	EQ	1E	:Get slot physical addr & size (DDT only)
   374	00001F			SFREZ.	EQ	1F	:Super-freeze slot
   375	000020			HALT.	EQ	20	:Halt the slot
   376	000021			SHALT.	EQ	21	:Super-halt the slot
   377	000022			SVSPY.	EQ	22	:Start/Stop SPY
Page  3-9	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   378	000023			DISCO.	EQ	23	:Disconnect Logical Unit
   379				Page  3-10	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   380				
   381	000003			IO	EQ	3	:I/O SVC
   382				:	I/O SUBOPERANDS
   383	008000			IOQRY.	EQ	8000	:Query I/O attributes
   384	000000			CSYNI.	EQ	0	:Connect SYNC input
   385	000001			CSYNO.	EQ	1	:Connect SYNC output
   386	000002			FSYNO.	EQ	2	:Force SYNC output
   387	000003			CASYN.	EQ	3	:Connect ASYNC
   388	000004			CPRT.	EQ	4	:Connect Printer
   389	000005			FPRT.	EQ	5	:Force Printer
   390	000006			TIISC.	EQ	6	:T-II SYNC Connect
   391	000007			TIISI.	EQ	7	:T-II SYNC Idle test
   392	000008			CSIO.	EQ	8	:Connect SIO
   393	000009			CMBRD.	EQ	9	:Connect SIO mother board
   394	00000A			FMBIN.	EQ	0A	:Force mother board input
   395	00000B			FMBOT.	EQ	0B	:Force mother board output
   396	000004			SHARE	EQ	04	:Shared device SVC
   397	00000A			K.IN	EQ	0A	:Kernel Input SVC
   398	00000B			K.OUT	EQ	0B	:Kernel Output SVC
   399	00000D			KIO	EQ	0D	:Kernel-I/O (general) SVC
   400	00000E			BDISC	EQ	0E	:Big disc SVC (obsolete)
   401	00000F			SDISC	EQ	0F	:Small disc SVC (obsolete)
   402				Page  3-11	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Assembly Switch Definitions	- START.LIB

   403				
   404	000000				IF	IRSIZE&3;	REMARK	%IRSIZE should be multiple of 4
   405				IRSIZE	EQ	(IRSIZE!3)+1;	EI
   406	000000				IF	ORSIZE&3;	REMARK	%ORSIZE should be multiple of 4
   407				ORSIZE	EQ	(ORSIZE!3)+1;	EI
   408				
   409	000001			  IF	1-\MAXPRT
   410	00005D			MAXPRT	EQ	NPORT-1
   411	00005D			HPRT0	EQ	MAXPRT
   412				  EI
   413				
   414	000001			  IF	\MAXHST
   415	000000			  ELSE
   416					REMARK	%PLEASE DEFINE MAXHST. 1 ASSUMED.
   417				MAXHST	EQ	1
   418				HOST0	EQ	HOSTNO
   419				  EI
   420				
   421				
   422				:	DEFINE START OF SEGMENTS
   423	000000			Q	EQ	0
   424					NOLIST
   425					RE	0F
   426				  IF	\SEG|Q|
   427					GL	SEG|Q|
   428				  ELSE
   429					SEG	Q
   430					GL	SEG|Q|
   431				SEG|Q|
   432				  EI
   433				Q	EQ	Q+1
   434					ER
   435					LIST
   436				
   437				:GENERATE DIAGNOSTICS
   438	000000			Q	EQ	0
   439					NOLIST
   440				QQ	EQ	0;	RE	0F
   441					IF	((Q*10000)%SEG|Q|)&7FFFFFFF
   442				QQ	EQ	1;	REMARK	%SYMBOL SEG
   443					NUMBER	Q
   444					REMARK	 IS NOT DEFINED PROPERLY. VALUE IS 
   445					NUMBER	SEG|Q|
   446					EI
   447				Q	EQ	Q+1;	ER
   448					LIST
   449				
   450	000000				IF	QQ;
   451					REMARK	%START.LIB **MUST** be assembled FIRST!!%;
   452					EI
Page  4-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   453					SUBTTL	ISIS Ring Handling Routines	- IPIRNG.LIB
   454				:******************************************************************
   455				:
   456				:	This program is the sole property and confidential
   457				:	information of Tymshare, Inc., and may not be copied
   458				:	in whole or in part or disclosed to any third party
   459				:	without the prior written consent of Tymshare.
   460				:
   461				:*******************************************************************
   462					RA	0		:	FRING.LIB
   463				
   464				:	ISIS RING HANDLERS
   465				
   466				:	This package is the fast, efficient ring handler set
   467				:	The following CONSTRAINTS apply:
   468				:	1.  Once started, register 14 or 15 is dedicated to that
   469				:		operation, until it is "ended".
   470				:	2.  If a new operation is started before the previous operation is
   471				:		"ended", the previous operation is aborted, and the
   472				:		appropriate ring is effectively left unchanged.
   473				:
   474				:	This package now permits simultaneous input and output!!!
   475				:		R15 is used for output operations
   476				:		R14 is used for input operations
   477				
   478				:*: NOTE: ISIS II will soon use negative indexing, like this ring package.
   479				:*:	To convert this package, remove all lines with ':*:' in them,
   480				:*:	and change all occurrences of 'LHL R15/R14' to 'LH R15/R14'.
   481				
   482				:	The package contains both utility and primitive routines:
   483				
   484				:	utility routines are called with link R5,
   485				:	they preserve registers R6--R14.
   486				:	OCS	Output Canned String
   487				:		R2 = port #, R3 = pointer to string (SC format)
   488				:		OCS will output string as a data message to the specified
   489				:		port. OCS goes to completion, and "ends the operation.
   490				:	OCM	Output Canned Message
   491				:		R2 = port #, R3 = pointer to string (SC format)
   492				:		OCM will output the string as a message to the specified port
   493				:		OCM goes to completion, and "ends the operation.
   494				:	OBS	Output Byte String
   495				:		R2 = number of characters, R3 = pointer to string
   496				:		OBS will output specified string into the current message
   497				:		message must have already been "started", and is NOT "ended".
   498				
   499				:	primitive input routines.  All link on R4, & preserve R1-R3, R5-R13, R15:
   500				:	LOOK	Determine if an input message exists...normal return if not
   501				:		skip (4) return if so, and then:
   502				:		R1 = port number
   503				:		R2 = message type code (peek)
   504				:		On skip return, condition codes are set such that JE will
   505				:		succeed on port 0.  The port number will have been removed
Page  4-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   506				:		from the message but the message code will not have been
   507				:		removed (you get a peek at it).
   508				:	GETCH	Get a character, returned in R0.
   509				:	GETH	Get a halfword, returned in R0.  An even number of bytes 
   510				:		should have been removed previously for expected results.
   511				:	GETW	Get a word, returned in R0.  An even number of halfwords 
   512				:		should have been removed previously for expected results.
   513				:	FLUSH	Flush away ("end") remainder of input message.  R0 is number
   514				:		of bytes remaining to flush.
   515				:	ELIR	End-Logical-Input-Record.  "Ends" current message, sets
   516				:		up pointers for next message.
   517				
   518				:	Primative output routines.  All link on R4, preserve R1-R3, R5-R14,
   519				:	unless used for arguments, or otherwise specified:
   520				:	SPACE	Returns R0 = number of characters of space available in	
   521				:		output ring. Sets up R15 for "start" of message.
   522				:	ROOM	R0 = number of characters required for next message,
   523				:		returns when that much room is available in output ring.
   524				:		MAY DISMISS.
   525				:		sets up R15 for "start" of message. SMASHES R1.
   526				:	SLOR	Start Logical Output Record.
   527				:		R0 = number of bytes required.
   528				:		R1 = port #
   529				:		R2 = message type code.
   530				:		Provides function of ROOM, PUTH, and PUTCH for first 3 chars
   531				:		of message. MAY DISMISS. SMASHES R3.
   532				:	PUTCH	places character in R0 in next position of ring.
   533				:	PUTH	places halfword in R0 in next position of ring.  Even number
   534				:		of bytes have been output previously in this message.
   535				:	PUTW	places word in R0 in next position of ring.  Even number of
   536				:		halfwords should have been output previously in this message.
   537				:	ELODR	End Logical Output Data Record
   538				:		places byte count into message type to make data message,
   539				:		then "ends" message.  Smashes R0, R1.
   540				:	ELOR	End Logical Output Record
   541				:		"ends" message.
   542				
   543				:	CONVENTIONS:
   544				:	ROUTINES USE DEDICATED REGISTERS:
   545				:	R15	OUTPUT RING INDEX
   546				:	R14	INPUT RING INDEX
   547				:
   548				:	NOTE....
   549				:		IRSIZE AND ORSIZE MUST EACH BE LESS THAN 32K.
   550				Page  4-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   551				
   552					GL	IRING,ORING,IRSIZE,ORSIZE
   553					GL	OCS,OCM,OBS
   554					GL	LOOK,GETCH,GETH,GETW,FLUSH,ELIR
   555					GL	SPACE,ROOM,SLOR,PUTCH,PUTH,PUTW,ELODR,ELOR
   556				        GL      PERBUF,IOWSIZ,STSEG2
   557				
   558					MO	.,RING
   559	000000			NFMI	EQ	0		:RELATIVE INDEX OF NEXT-FILL-MESSAGE-INDEX
   560	000002			CEI	EQ	2		:RELATIVE INDEX OF CURRENT-EMPTY-INDEX
   561	000004			RING	EQ	4		:RELATIVE INDEX OF START OF RING DATA
   562				
   563				:	DEFINE DATA AREA
   564	020000				SEG	A.RING		:RINGS IN RING AREA
   565				
   566	020000			STSEG2  BS      100             :SAVE 1ST 256 BYTES FOR POINTERS TO
   567				                                :THE RINGS AND OTHER BUFFER AREAS AS
   568				                                :DEFINED BY THE SLOT INTERFACE
   569				:	THE DISPATCHER OUTPUT RING
   570	020100			ORING	HS	0		:OUTPUT BLOCK START ADDRESS
   571	020100	0000 			HC	0		:OUTPUT NEXT FILL MESSAGE INDEX
   572	020102	0000 			HC	0		:OUTPUT CURRENT ENTRY INDEX
   573	020104				BS	ORSIZE		:THE OUTPUT RING
   574				
   575				:	THE DISPATCHER INPUT RING
   576	020900			IRING	HS	0		:INPUT BLOCK START ADDRESS
   577	020900	0000 			HC	0		:INPUT NEXT FILL MESSAGE INDEX
   578	020902	0000 			HC	0		:INPUT CURRENT EMPTY INDEX
   579	020904				BS	IRSIZE		:THE INPUT RING
   580				
   581	021100			PERBUF  BS      PBUFSZ                  :AREA FOR PERIPHERAL DEVICE BUFFERS
   582				
   583	001100			IOWSIZ  EQ      .-STSEG2
   584				
   585	00EF00			        IF      10000-IOWSIZ
   586				         REMARK %SEG 2 SIZE = 
   587				         NUMBER IOWSIZ
   588				         REMARK %
   589	000000			        ELSE
   590				         REMARK %I/O RINGS OR OTHER BUFFERS IN SEG 2 TOO LARGE%
   591				         QUIT
   592				        EI
   593				Page  4-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   594				
   595				:	CODE AREA
   596	010000				SEG	A.CODE
   597				:	INPUT ROUTINES
   598				
   599				:	LOOK AT A RING ENTRY
   600				:	NORMAL RETURN IF RING EMPTY
   601				:	ELSE SKIP RETURN, PORT RETURNED IN R1
   602				:	MESSAGE TYPE RETURNED IN R2
   603				:	ALL REGISTERS SET UP FOR TRANSFER
   604				:	POSITION IS ADVANCED PAST PORT#
   605	000000				IF	\LOOK;.LOOK.	 HS	0;
000001				ELSE
   606	010000			LOOK	 HS	0
   607					EI
   608	010000	73E0 4002 0902 		LHL	R14,CEI+IRING,,	:GET CURRENT EMPTY INDEX
   609	010006	45E0 4002 0900 		CLH	R14,NFMI+IRING,,	:TEST IF CAUGHT UP
   610	01000C	0334 			JER	R4		:EMPTY...NORMAL RETURN
   611	01000E	CBE0 07FC 		SHI	R14,IRSIZE	:*: CONVERT TO NEGATIVE INDEX
   612	010012	731E 4002 1100 		LHL	R1,IRING+RING+IRSIZE,R14,	:GET PORT #
   613	010018	26E2 			AIS	R14,2		:BUMP POINTER PAST PORT #
   614	01001A	D32E 4002 1100 		LB	R2,IRING+RING+IRSIZE,R14,	:GET MESSAGE TYPE
   615	010020	0811 			LR	R1,R1		:SET CONDITION CODES
   616	010022	4304 0004 		J	4,R4		:THEN SKIP RETURN
   617				
   618				:	GET A CHARACTER FROM THE INPUT RING
   619				:	CHARACTER RETURNED IN R0
   620	010026	D30E 4002 1100 	GETCH	LB	R0,IRING+RING+IRSIZE,R14,	:GET THE CHAR
   621	01002C	26E1 			AIS	R14,1		:BUMP INDEX
   622	01002E	0214 			JLR	R4		:RETURN IF NOT
   623	010030	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   624	010034	0304 			JR	R4		:AND EXIT
   625				
   626				:	GET A HALF-WORD FROM THE INPUT RING
   627				:	ASSUME HAVE REMOVED AN INTEGRAL NUMBER OF HALF-WORDS FROM RECORD
   628				:	HALF-WORD RETURNED IN R0
   629	010036	730E 4002 1100 	GETH	LHL	R0,IRING+RING+IRSIZE,R14,	:GET THE DATA
   630	01003C	26E2 			AIS	R14,2		:BUMP INDEX
   631	01003E	0214 			JLR	R4		:RETURN IF NOT
   632	010040	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   633	010044	0304 			JR	R4		:AND EXIT
   634				
   635				:	GET A WORD FROM THE INPUT RING
   636				:	ASSUME HAVE REMOVED AN INTEGRAL NUMBER OF WORDS FROM RECORD
   637				:	WORD RETURNED IN R0
   638	010046	580E 4002 1100 	GETW	L	R0,IRING+RING+IRSIZE,R14,	:GET THE DATA
   639	01004C	26E4 			AIS	R14,4		:BUMP INDEX
   640	01004E	0214 			JLR	R4		:RETURN IF NOT
   641	010050	C8E0 F804 		LHI	R14,-IRSIZE	:ELSE FOLD IT
   642	010054	0304 			JR	R4		:AND EXIT
   643				
   644				:	FLUSH AN INPUT RECORD
   645				:	NUMBER OF CHARS TO FLUSH IN R0
Page  4-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   646	010056	0AE0 		FLUSH	AR	R14,R0		:ADVANCE RING AND FALL THROUGH
   647				
   648				:	END LOGICAL INPUT RECORD
   649	010058	26E3 		ELIR	AIS	R14,3		:FORCE TO NEXT WORD
   650	01005A	C4E0 FFFC 		NHI	R14,-4
   651	01005E	2113 			JLFS	ELIR2		:NO
   652	010060	CBE0 07FC 		SHI	R14,IRSIZE	:YES
   653				ELIR2
   654	010064	CAE0 07FC 		AHI	R14,IRSIZE	:*: CONVERT TO POSITIVE INDEX
   655	010068	40E0 4002 0902 		STH	R14,CEI+IRING,,
   656	01006E	0304 			JR	R4		:AND EXIT
   657				Page  4-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   658				
   659				:	OUTPUT ROUTINES
   660				
   661				:	OUTPUT "CANNED" MESSAGE
   662				:	LINK ON R5
   663				:	R2 = PORT #
   664				:	R3 = POINTER TO STRING (FORMAT: n\B1\...\Bn)
   665	010070	D303 0000 	OCM	LB	R0,0,R3		:GET COUNT n
   666	010074	2605 			AIS	R0,5		:COMPUTE SPACE REQUIREMENTS
   667	010076	C400 FFFC 		NHI	R0,-4
   668	01007A	4140 806E 		JAL	R4,ROOM		:INSURE THERE IS ROOM
   669	01007E	0802 			LR	R0,R2		:COPY PORT #
   670	010080	4140 80E0 		JAL	R4,PUTH		:PLACE PORT NUMBER
   671	010084	D323 0000 		LB	R2,0,R3		:GET COUNT AGAIN
   672	010088	4300 801E 		J	OCS1		:SKIP TO PLACE THE STRING
   673				
   674				:	OUTPUT "CANNED" STRING
   675				:	LINK ON R5
   676				:	R2 = PORT #
   677				:	R3 = POINTER TO TEXT STRING (FORMAT n\B1\...\Bn)
   678	01008C	D303 0000 	OCS	LB	R0,0,R3		GET COUNT n
   679	010090	2606 			AIS	R0,6		:COMPUTE SPACE REQUIREMENTS
   680	010092	C400 FFFC 		NHI	R0,-4
   681	010096	4140 8052 		JAL	R4,ROOM		:INSURE THERE IS ROOM
   682	01009A	0802 			LR	R0,R2
   683	01009C	4140 80C4 		JAL	R4,PUTH		:PLACE PORT NUMBER
   684	0100A0	D323 0000 		LB	R2,0,R3
   685	0100A4	0802 			LR	R0,R2		:GET THE COUNT n
   686	0100A6	4140 80AA 		JAL	R4,PUTCH	:PLACE IT...MESSAGE TYPE 1-7D
   687	0100AA	2631 		OCS1	AIS	R3,1		:BUMP SOURCE CHARACTER POINTER
   688	0100AC	D303 0000 		LB	R0,0,R3		:GET THE NEXT CHARACTER
   689	0100B0	4140 80A0 		JAL	R4,PUTCH	:PLACE IT INTO RING
   690	0100B4	2721 			SIS	R2,1		:REDUCE COUNT
   691	0100B6	2026 			JGBS	OCS1		:REPEAT UNTIL ALL CHARACTERS PLACED
   692	0100B8	4140 80E6 		JAL	R4,ELOR		:END LOGICAL OUTPUT RECORD
   693	0100BC	0305 			JR	R5		:THEN EXIT
   694				
   695				:	OUTPUT A BYTE STRING
   696				:	LINK ON R5
   697				:	R3 = POINTER TO STRING
   698				:	R2 = NUMBER OF CHARACTERS TO OUTPUT FROM STRING
   699	0100BE	2631 		OBS1	AIS	R3,1		:BUMP CHARACTER POINTER
   700	0100C0	D303 0000 	OBS	LB	R0,0,R3		:GET THE NEXT CHARACTER
   701	0100C4	4140 808C 		JAL	R4,PUTCH	:PLACE IT INTO RING
   702	0100C8	2721 			SIS	R2,1		:REDUCE COUNT
   703	0100CA	2026 			JGBS	OBS1		:REPEAT UNTIL ALL CHARACTERS PLACED
   704	0100CC	0305 			JR	R5		:THEN EXIT
   705				
   706				:	FIND SPACE IN THE RING (HOW BIG A MESSAGE IT WILL TAKE)
   707				:	RETURNS R0 = NUMBER OF CHARS OF SPACE
   708	0100CE	2504 		SPACE	LCS	R0,4		:SET MASK
   709	0100D0	73F0 4002 0100 		LHL	R15,NFMI+ORING,,
   710	0100D6	4400 4002 0102 		NH	R0,CEI+ORING,,	:FORCE EMPTIER TO WORD BOUNDARY
Page  4-7	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   711	0100DC	0B0F 			SR	R0,R15		:SPACE BETWEEN US AND EMPTIER
   712	0100DE	2123 			JGFS	SPACE1		:SKIP IF NO WRAP-AROUND
   713	0100E0	CA00 07FC 		AHI	R0,ORSIZE	:ELSE CORRECT FOR WRAP
   714	0100E4	2704 		SPACE1	SIS	R0,4		:CORRECT FOR POSSIBLE OVERFLOW
   715	0100E6	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEGATIVE INDEX
   716	0100EA	0304 			JR	R4		:AND RETURN
   717				
   718				:	INSURE THERE IS ROOM IN THE RING (DISMISS IF NECESSARY)
   719				:	EXPECTS R0 = NUMBER OF CHARACTERS OF SPACE
   720	0100EC	73F0 4002 0100 	ROOM	LHL	R15,NFMI+ORING,,
   721	0100F2	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEG. INDEX
   722	0100F6	2514 		ROOM1	LCS	R1,4		:SET MASK
   723	0100F8	4410 4002 0102 		NH	R1,CEI+ORING,,	:FORCE HIM TO WORD BOUNDARY
   724	0100FE	CB10 07FC 		SHI	R1,ORSIZE	:*:
   725	010102	0B1F 			SR	R1,R15		:CHECK RELATIVE POSITIONS
   726	010104	2124 			JGFS	ROOM2		:SKIP IF HE'S AHEAD OF US
   727	010106	0334 			JER	R4		:EQUAL...HE'S EMPTY...GO DO IT
   728	010108	CA10 07FC 		AHI	R1,ORSIZE		:HE'S BEHIND US
   729	01010C	2714 		ROOM2	SIS	R1,4		:ALLOW FOR POTENTIAL OVERFLOW
   730	01010E	0901 			CR	R0,R1
   731	010110	0324 			JLER	R4		:ROOM EXISTS...GO DO IT
   732	010112	E100 0000 		SVC	DISMISS,0
   733	010116	4300 FFDC 		J	ROOM1		:AND GO TRY AGAIN
   734				
   735				:	START LOGICAL OUTPUT RECORD
   736				:	PROVIDES FUNCTION OF ROOM, PUTH, & PUTCH FOR FIRST 3 CHARS OF MESSAGE
   737				:	R0 = NUMBER OF CHARACTERS OF SPACE REQUIRED
   738				:	R1 = PORT #
   739				:	R2 = MESSAGE CHARACTER CODE
   740	01011A	73F0 4002 0100 	SLOR	LHL	R15,NFMI+ORING,,
   741	010120	CBF0 07FC 		SHI	R15,ORSIZE	:*: CONVERT TO NEG. INDEX
   742	010124	2534 		SLOR1	LCS	R3,4		:SET A MASK
   743	010126	4430 4002 0102 		NH	R3,CEI+ORING,,	:FORCE RECEIVER TO WORD BOUNDARY
   744	01012C	CB30 07FC 		SHI	R3,ORSIZE	:*:
   745	010130	0B3F 			SR	R3,R15
   746	010132	2123 			JGFS	SLOR2
   747	010134	CA30 07FC 		AHI	R3,ORSIZE	:ACCOUNT FOR POSSIBLE RING FOLDING
   748	010138	2734 		SLOR2	SIS	R3,4		:ALLOW FOR POTENTIAL OVERFLOW
   749	01013A	0930 			CR	R3,R0
   750	01013C	2314 			JGEFS	SLOR3		:SKIP IF WE CAN GO
   751	01013E	E100 0000 		SVC	DISMISS,0
   752	010142	220F 			JBS	SLOR1
   753	010144	401F 4002 0900 	SLOR3	STH	R1,ORING+RING+ORSIZE,R15,	:OK...PLACE MESSAGE
   754	01014A	D22F 4002 0902 		STB	R2,2+ORING+RING+ORSIZE,R15,
   755	010150	26F3 			AIS	R15,3		:BUMP PAST THESE CHARACTERS
   756	010152	0304 			JR	R4		:AND EXIT
   757				
   758				:	PUT A CHARACTER INTO THE RING
   759				:	R0 = CHARACTER
   760	010154	D20F 4002 0900 	PUTCH	STB	R0,ORING+RING+ORSIZE,R15,	:PLACE THE CHARACTER
   761	01015A	26F1 			AIS	R15,1		:BUMP INDEX
   762	01015C	0214 			JLR	R4		:SKIP IF NOT
   763	01015E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
Page  4-8	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS Ring Handling Routines	- IPIRNG.LIB

   764	010162	0304 			JR	R4		:AND EXIT
   765				
   766				:	PUT A HALF-WORD INTO THE RING
   767				:	R0 = HALF-WORD
   768	010164	400F 4002 0900 	PUTH	STH	R0,ORING+RING+ORSIZE,R15,	:PLACE THE HALF-WORD
   769	01016A	26F2 			AIS	R15,2		:BUMP INDEX
   770	01016C	0214 			JLR	R4		:EXIT IF NOT
   771	01016E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
   772	010172	0304 			JR	R4		:AND EXIT
   773				
   774				:	PUT A WORD INTO THE RING
   775				:	R0 = WORD
   776	010174	500F 4002 0900 	PUTW	ST	R0,ORING+RING+ORSIZE,R15,	:PLACE THE WORD
   777	01017A	26F4 			AIS	R15,4		:BUMP INDEX
   778	01017C	0214 			JLR	R4		:SKIP IF NOT
   779	01017E	C8F0 F804 		LHI	R15,-ORSIZE	:ELSE WRAP AROUND
   780	010182	0304 			JR	R4		:AND EXIT
   781				
   782				:	END LOGICAL OUTPUT DATA RECORD
   783	010184	7310 4002 0100 	ELODR	LHL	R1,NFMI+ORING,,	:GET START OF THIS MESSAGE
   784	01018A	CB10 07FC 		SHI	R1,ORSIZE	:*: CONVERT TO NEG. INDEX
   785	01018E	080F 			LR	R0,R15		:COPY MESSAGE END
   786	010190	0B01 			SR	R0,R1		:COMPUTE SIZE OF THIS MESSAGE
   787	010192	2313 			JGEFS	ELODR2		:SKIP IF NO WRAP-AROUND
   788	010194	CA00 07FC 		AHI	R0,ORSIZE		:ELSE CORRECT FOR WRAP
   789	010198	2703 		ELODR2	SIS	R0,3		:MAKE ALLOWANCE FOR HEADER
   790	01019A	0334 			JER	R4		:EXIT IF ZERO LENGTH MESSAGE
   791	01019C	D201 4002 0902 		STB	R0,2+ORING+RING+ORSIZE,R1,	:INSERT MESSAGE TYPE INTO MESSAGE
   792								:AND FALL THROUGH
   793				
   794				:	END LOGICAL OUTPUT RECORD
   795	0101A2	26F3 		ELOR	AIS	R15,3
   796	0101A4	C4F0 FFFC 		NHI	R15,-4
   797	0101A8	2113 			JLFS	ELOR2
   798	0101AA	C8F0 F804 		LHI	R15,-ORSIZE	:FOLD IF NECESSARY
   799				ELOR2
   800	0101AE	CAF0 07FC 		AHI	R15,ORSIZE	:*: CONVERT BACK
   801	0101B2	40F0 4002 0100 		STH	R15,NFMI+ORING,,	:NOW ADVANCE POINTER TO NEXT MESSAGE
   802	0101B8	0304 			JR	R4		:AND EXIT
   803					EM
Page  5-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   804					SUBTTL	ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB
   805				        REMARK  %CRASH.LIB    11-15-84 AWT
   806					REMARK	%THIS VERSION HAS AN OPTION FOR EXTENDED CRASH PROCESSING.
   807				
   808				:******************************************************************
   809				:
   810				:	This program is the sole property and confidential
   811				:	information of Tymshare, Inc., and may not be copied
   812				:	in whole or in part or disclosed to any third party
   813				:	without the prior written consent of Tymshare.
   814				:
   815				:*******************************************************************
   816					RA	0		:	CRASH.LIB	MFR 07/14/81
   817				
   818				:       Set UPSW to turn off tracing.
   819				:       Added CTIME and CRTIME to save crash times in GMT.
   820				:       Added a NCRSAV option to keep old copies of crash tables.
   821				:         April 13, 1983 AWT
   822				:
   823				:	Changed the supervisor's log message to report the PRODID.
   824				:	Sep. 20, 1982 SCY.
   825				:	ENTRY2 (restart service) changed to clear input and output
   826				:	rings PRIOR to issuing Restart SVC to prevent crash-loop if
   827				:	Dispatcher has crashed. June 17, 1982 MDS.
   828				
   829				:			ISIS - II Version
   830				:
   831					GL	CRASH,CRASHC,CPOINT,CFROM,CRREG,ENTRY,START,CRAT,CRSHCT,CRSTOP
   832				        GL      PRODID,NCRSAV,CTIME,CRTIME,EXCRSH
   833					MO	.,CRASH
   834				
   835				
   836				:	Generalized crash package.
   837				:	Handles both software and hardware crashes.  On any crash, the
   838				:	registers are saved in CRXREG, and CRSHCT is incremented.
   839				:	Software crashes occur via  JAL R10,CRASH .  CRASH saves (R10) in cell
   840				:	CPOINT.  Software crashes may be "good" or "bad"...if "good", the
   841				:	calling sequence is:
   842				
   843				:		JAL	R10,CRASH
   844				:						from a bad one
   845				:		HC	0		:this key distinguishes a good crash
   846				:		BC	4*L,Y		:first byte is 4*register linked to
   847				:						routine, Y is the reason
   848				:	then register (L) is saved in CFROM, and Y is saved in CRASHC
   849				
   850				:	in the event of a hardware failure, CPOINT contains the instruction
   851				:	address at the time of failure, CRASHC contains the failure reason,
   852				:	and CFROM is set =-1.
   853				
   854				:	On completion of crash, transfers to label START, defined
   855				:	in the user code.
   856				:
Page  5-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   857				:	The symbol CRSTOP may be set to 0 or 1.  If 1 the crash routine will
   858				:	be executed only once.  the second time through the crash area will
   859				:	be set up as specified above and then registers will be restored to
   860				:	their entry value and the slot will be frozen. If it is thawed it
   861				:	will restart.
   862				:
   863				:       The symbol NCRSAV defines the number of crash tables to be saved.
   864				:       It will be set to 1 by default. (In TYMFIL CRSHTB macro is used
   865				:       to define NCRSAV)
   866				:
   867				:       Entering :R CRAT,CRTSIZ (or 4C) will dump the last 
   868				:       crash table, CRAT+CRTLEN (or 50),CRTSIZ will dump the    
   869				:       previous crash table and so on.
   870				:
   871				:       CTIME,4 gives the last crash time (in GMT), CTIME+CRTLEN,4
   872				:       gives the previous crash time and so on.
   873				:
   874				:	The symbol EXCRSH, if set to 1, allows a JAL to label
   875				:	CRSH.P out of the crash routine for extended crash processing.
   876				:	The link is R5.  EXCRSH is defaulted to 0.
   877				:
   878				:
   879				Page  5-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   880				
   881	000000			  IF	\CRSTOP
   882	000001			  ELSE
   883	000000			CRSTOP	EQ	0
   884				  EI
   885				  
   886	000001			  IF    \NCRSAV                 :# OF CRASH TABLES TO SAVE
   887	000000			  ELSE                          :IT MAY BE DEFINED IN TYMFIL
   888				NCRSAV  EQ      1               :OTHERWISE IT IS 1 BY DEFAULT
   889				  EI
   890				
   891	000000			  IF	\EXCRSH			:DEFAULT TO NO EXTENDED CRASH HANDLING
   892	000001			  ELSE
   893	000000			EXCRSH	EQ	0
   894				  EI
   895				
   896				
   897	0101BA			CRTENT  EQ      .               :CRASH TABLE ENTRY
   898	000000			        ORG     0
   899	000000			CRSHCT	HS	1		:CRASH COUNT...HOW MANY TIMES CRASHED
   900	000002			CRASHC	HS	1		:CRASH CODE (INIT'ED TO MANUAL RESTART)
   901	000004			CPOINT	HS	2		:WHERE CRASH OCCURED
   902	000008			CFROM	HS	2    		:WHERE CRASH WAS CALLED FROM
   903	00000C			CRXREG	HS	20		:CRASH REGISTER SAVE AREA
   904	00004C			CRTSIZ  WS      0               :SIZE OF CRASH TABLE WITHOUT CRTIME
   905	00004C			CRTIME  WS      1               :REAL TIME OF CRASH (GMT)
   906	000050			CRTLEN  WS      0               :LENGTH OF CRASH TABLE WITH CRTIME
   907	0101BA			        ORG     CRTENT  
   908				
   909	000000			        SEG     A.DATA
   910	000000			        HS      0
   911	000000			CTIME   WS      1               :STORAGE FOR CRASH TIME OF LAST CRASH
   912	000004			CRAT    BS      CRTLEN*NCRSAV   :STORAGE FOR CRASH TABLE(S)
   913	000010			CRREG   EQ      CRAT+CRXREG
   914	000144			RGSTOR  WS      10              :TEMPORARY STORAGE FOR REGISTERS
   915	000184			FGNDFL	HS	1		:FOREGROUND FLAG
   916				
   917	000188	0000 0000 0001 	TRBOFF  WC      0,FAIL0         :TRACE BIT OFF, GO TO FAIL0
		01F4 		
   918	000190	0000 0000 0001 	TRCOFF  WC      0,CRASH0        :TRACE BIT OFF, GO TO CRASH0
		026A 		
   919	000198	0000 0000 0001 	PSWSAV  WC      0,START         :RESTORE PSW,  GO TO INITIALIZATION CODE
		05EE 		
   920	0001A0	0000 0000 	CHFLAG  WC      0               :USED FOR ANY CHANGES ON PSW
   921				
   922				
   923	0101BA				SEG	A.CODE		:CODE AREA
   924	0101BA	01		CRSHCD	BC	1	:MANUAL RESTART
   925	0101BB	00 			BC	0	:POWER FAILURE
   926	0101BC	0E			BC	0E	:PARITY ERROR
   927	0101BD	10 			BC	10	:DISPATCHER CRASH
   928	0101BE	11			BC	11	:ILLEGAL INSTRUCTION
   929	0101BF	12 			BC	12	:ILLEGAL SVC
Page  5-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   930	0101C0	13			BC	13	:SYSTEM CRASH
   931	0101C1	14 			BC	14	:PROTECTION VIOLATION
   932	0101C2	15			BC	15	:NON-RECOVERABLE DEVICE CHECK
   933	0101C3	16 			BC	16	:WATCH FROG TIMER - - TIME OUT
   934				
   935					RA	0
   936				:	GENERAL MACHINE FAILURE
   937	0101C4			FAIL	HS	4		:PSD SAVED HERE
   938	0101CC				HS	4		:R0,R1 SAVED HERE
   939	0101D4	5000 4000 0144 	        ST      R0,RGSTOR,,     :SAVE R0
   940	0101DA	5020 4000 0148 	        ST      R2,RGSTOR+4,,   :SAVE R2
   941	0101E0	4120 817A 	        JAL     R2,SAVPSW       :SAVE CURRENT PSW
   942	0101E4	5800 4000 0144 	        L       R0,RGSTOR,,     :RESTORE R0
   943	0101EA	5820 4000 0148 	        L       R2,RGSTOR+4,,   :RESTORE R2
   944	0101F0	D500 0188 	        UPSW    TRBOFF          :TRACE BIT OFF AND CONTINUE
   945	0101F4	D301 FFC2 	FAIL0   LB      R0,CRSHCD,R1    :CONVERT CRASH REASON
   946	0101F8	C500 0012 		CLHI	R0,12		:TEST IF ILLEGAL SVC
   947	0101FC	2135 			JNFS	FAIL1		:NO...SKIP
   948	0101FE	7300 0184 		LHL	R0,FGNDFL	:DID FOREGROUND CAUSE THE CRASH?
   949	010202	4230 80D2 		JN	ENTRY2		:YES....JUMP OVER
   950	010206	D000 4000 0144 	FAIL1   STM     R0,RGSTOR,,     :SAVE REGISTERS
   951	01020C	4120 817E 	        JAL     R2,PSHTBS       :PUSH DOWN CRASH TABLES
   952	010210	5810 400F 000C 	        L       R1,GMT,,        :GET GMT CLOCK
   953	010216	5010 4000 0000 	        ST      R1,CTIME,,      :SAVE IT AS THE CRASH TIME
   954	01021C	D100 4000 0144 	        LM      R0,RGSTOR,,     :RESTORE REGISTERS
   955	010222	D020 4000 0018 	        STM     R2,CRAT+CRXREG+8,, :SAVE THE REGISTERS
   956	010228	4000 4000 0006 	        STH     R0,CRAT+CRASHC,,  :SAVE CRASH CODE
   957	01022E	D1C0 FF92 	        LM      R12,FAIL          :GET THE REST
   958	010232	D0E0 4000 0010 	        STM     R14,CRAT+CRXREG,,  :SAVE R0 & R1
   959	010238	50D0 4000 0008 	        ST      R13,CRAT+CPOINT,, :SAVE FAILURE ADDRESS
   960	01023E	2511 			LCS	R1,1
   961	010240	5010 4000 000C 	        ST      R1,CRAT+CFROM,,   :FLUSH PLACE CALLED FROM
   962	010246	4300 8074 	        J       ENTRY1            :AND SKIP TO START UP AGAIN
   963				
   964				
   965				
   966				:	CRASH ROUTINE AND GENERAL INITIALIZER
   967				:	IF "GOOD" CALL TO CRASH, HAS HALFWORD 0'S FOLLOWING,
   968				:	THEN BYTE WITH 4*LINK REGISTER, THEN BYTE WITH CRASH REASON
   969				
   970	01024A	5000 4000 0144 	CRASH   ST      R0,RGSTOR,,     :SAVE R0
   971	010250	5020 4000 0148 	        ST      R2,RGSTOR+4,,   :SAVE R2         
   972	010256	4120 8104 	        JAL     R2,SAVPSW       :SAVE CURRENT PSW
   973	01025A	5800 4000 0144 	        L       R0,RGSTOR,,     :RESTORE R0
   974	010260	5820 4000 0148 	        L       R2,RGSTOR+4,,   :RESTORE R2
   975	010266	D500 0190 	        UPSW    TRCOFF          :TRACE BIT OFF AND CONTINUE
   976	01026A	D000 4000 0144 	CRASH0  STM     R0,RGSTOR,,     :SAVE REGISTERS
   977	010270	4120 811A 	        JAL     R2,PSHTBS       :PUSH DOWN THE CRASH TABLES
   978	010274	5810 400F 000C 	        L       R1,GMT,,        :GET GMT CLOCK
   979	01027A	5010 4000 0000 	        ST      R1,CTIME,,      :SAVE IT AS THE CRASH TIME
   980	010280	D100 4000 0144 	        LM      R0,RGSTOR,,     :RESTORE REGISTERS
   981	010286	D000 4000 0010 	        STM     R0,CRAT+CRXREG,, :SAVE REGISTERS AND
   982	01028C	50A0 4000 0008 	        ST      R10,CRAT+CPOINT,,                    
Page  5-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

   983	010292	240A 			LIS	R0,$A10		:FAKE UNKNOWN CRASH
   984	010294	2511 			LCS	R1,1		:FROM NOWHERE
   985	010296	732A 0000 		LHL	R2,0,R10	:CHECK WHERE CALLED FROM
   986	01029A	2137 			JNFS	CRASH1		:NOT KNOWN...USE DEFAULT
   987	01029C	D30A 0003 		LB	R0,3,R10	:GET CRASH CONDITION
   988	0102A0	D32A 0002 		LB	R2,2,R10	:GET CALLING REGISTER
   989	0102A4	5812 0010 	        L       R1,CRAT+CRXREG,R2 :GET CONTENTS OF REGISTER
   990				        
   991	0102A8	4000 4000 0006 	CRASH1  STH     R0,CRAT+CRASHC,, :SAVE CRASH CODE
   992	0102AE	5010 4000 000C 	        ST      R1,CRAT+CFROM,,  :SAVE PLACE CRASHED FROM
   993	0102B4	2305 			JFS	ENTRY1
   994				
   995				:	ENTER HERE WITH RESTART
   996	0102B6	2401 		ENTRY	LIS	R0,1		:LOAD CRASH CODE REGISTER
   997	0102B8	4000 4000 0006 	        STH     R0,CRAT+CRASHC,, :STORE IT
   998	0102BE	2411 		ENTRY1	LIS	R1,1
   999	0102C0	6110 4000 0004 	        AHM     R1,CRAT+CRSHCT,, :SAVE INTERESTING DATA
  1000				
  1001	000000			  IF	CRSTOP		:IF STOPPING ON CONSECUTIVE CRASHES
  1002					CLHI	R0,1
  1003					JLE	ENTRY2		:IF POWER FAILURE OR MANUAL RESTART
  1004					OHI	R0,0CC00	:CRASH INDICATOR FOR FRONT PANEL
  1005					STH	R0,FPANEL,,	:SET PANEL TO BAD CRASH
  1006				   IF	EXCRSH
  1007					JAL	R5,CRSH.P,,	:GO DO EXTENDED CRASH PROCESSING
  1008				   EI	EXCRSH
  1009				        LM      R0,CRAT+CRXREG,, :RESTORE REGISTERS
  1010					SVC	SYS,HALT.	:HALT THE SLOT
  1011				  EI	CRSTOP
  1012				
  1013	0102C6	2401 			LIS	R0,1		:WANT SECOND WORD OF PSD
  1014	0102C8	E120 000D 		SVC	SYS,RFPSD.	:READ FOREGROUND PSD
  1015	0102CC	F500 0001 02CC 		CLI	R0,.		:TEST IF FOREGROUND IS EXECUTING THIS INSTRUCTION
  1016	0102D2	2133 			JNFS	ENTRY2		:SKIP IF NOT
  1017	0102D4	4000 0184 		STH	R0,FGNDFL	:SET THE FOREGROUND FLAG
  1018				
  1019				ENTRY2		: NOW RESET OUTPUT RING, REPORT CRASH
  1020	000000			  IF	CRSTOP
  1021	000001			  ELSE
  1022	000000			   IF	EXCRSH
  1023					JAL	R5,CRSH.P,,	:GO DO EXTENDED CRASH PROCESSING
  1024				   EI	EXCRSH
  1025				  EI	CRSTOP
  1026	0102D8	2400 			LIS	R0,0
  1027	0102DA	5000 4002 0100 		ST	R0,ORING,,	:EMPTY OUTPUT RING
  1028	0102E0	5000 4002 0900 		ST	R0,IRING,,	:EMPTY INPUT RING
  1029				
  1030	0102E6	E600 FEDA 		LA	R0,FAIL		:LOAD TRAP AREA ADDRESS
  1031	0102EA	E120 0000 		SVC	SYS,RSTRT.	:RESTART SVC
  1032	0102EE	41A0 FF58 		JAL	R10,CRASH	:NON-SKIP RETURN...CRASH
  1033				
  1034				
  1035	0102F2	2400 			LIS	R0,0
Page  5-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 ISIS STARTUP AND CRASH LIBRARY	- CRASH.LIB

  1036	0102F4	4000 0184 		STH	R0,FGNDFL	:CLEAR THE FOREGROUND FLAG
  1037				
  1038	0102F8	4140 4001 00CE 		JAL	R4,SPACE,,	:SET UP FOR DIAGNOSTIC
  1039	0102FE	C800 0300 		LHI	R0,0300
  1040	010302	4140 4001 0174 		JAL	R4,PUTW,,	:PORT 0 + DIAGNOSTIC MESSAGE + PAD
  1041	010308	7300 4000 0004 		LHL	R0,CRAT+CRSHCT,,
  1042	01030E	4140 4001 0154 		JAL	R4,PUTCH,,	:HW4 LOW = CRASH COUNT
  1043	010314	2400 			LIS	R0,0
  1044	010316	4140 4001 0154 		JAL	R4,PUTCH,,	:RESERVED BYTE
  1045	01031C	2401 			LIS	R0,1
  1046	01031E	4140 4001 0154 		JAL	R4,PUTCH,,	:REPORT TYPE = 1
  1047	010324	7300 4000 0006 		LHL	R0,CRAT+CRASHC,,
  1048	01032A	4140 4001 0154 		JAL	R4,PUTCH,,	:HW3 HIGH = CRASH CODE
  1049	010330	C800 0091 		LHI	R0,PRODID
  1050	010334	4140 4001 0154 		JAL	R4,PUTCH,,	:HW2 LOW IS PRODUCT ID
  1051	01033A	4140 4001 01A2 		JAL	R4,ELOR,,	:END LOGICAL OUTPUT RECORD
  1052	010340	5810 4000 01A0 	        L       R1,CHFLAG,,     :SEE IF PSW HAS BEEN CHANGED
  1053	010346	C510 0001 	        CLHI    R1,1
  1054	01034A	2137 		        JNFS    CURPSW          :NO CHANGE, GO TO USE CURRENT PSW
  1055	01034C	2410 		        LIS     R1,0
  1056	01034E	5010 4000 01A0 	        ST      R1,CHFLAG,,     :RESET CHFLAG FOR FUTURE PSW CHANGE
  1057	010354	D500 0198 	        UPSW    PSWSAV          :INITIALIZE WITH RESTORED PSW
  1058	010358	4300 4001 05EE 	CURPSW  J       START,,         :INITIALIZE WITH CURRENT PSW
  1059				
  1060	01035E	2401 		SAVPSW  LIS     R0,1            :GET PC OF BACKGROUND PSD
  1061	010360	5000 4000 01A0 	        ST      R0,CHFLAG,,     :ALSO INDICATE PSW WILL BE MODIFIED
  1062	010366	E120 000B 	        SVC     SYS,RBPSD.      :READ BACKGROUND PSD
  1063	01036A	F500 0001 036A 	        CLI     R0,.            :IS IT RUNNING?
  1064	010370	2138 		        JNFS    ISFGND          :NO, IT MUST BE FOREGROUND JOB
  1065	010372	2400 		        LIS     R0,0            :GET PSW OF BACKGROUND JOB
  1066	010374	E120 000B 	        SVC     SYS,RBPSD.
  1067	010378	5000 4000 0198 	        ST      R0,PSWSAV,,     :SAVE IT
  1068	01037E	0302 		        JR      R2              :RETURN
  1069	010380	2400 		ISFGND  LIS     R0,0            :GET PSW OF FORGROUND JOB
  1070	010382	E120 000D 	        SVC     SYS,RFPSD.
  1071	010386	5000 4000 0198 	        ST      R0,PSWSAV,,     :SAVE IT
  1072	01038C	0302 		        JR      R2              :RETURN
  1073				
  1074				
  1075	01038E	C810 00A0 	PSHTBS  LHI     R1,CRTLEN*NCRSAV-CRTLEN*2
  1076	010392	0212 		        JLR     R2              :IF ONLY 1 CRASH TABLE, SKIP AND RETURN
  1077	010394	D161 0004 	PUSHIT  LM      R6,CRAT,R1      :PUSH DOWN THE CRASH TABLE
  1078	010398	D061 0054 	        STM     R6,CRAT+CRTLEN,R1
  1079	01039C	D161 002C 	        LM      R6,CRAT+CRTLEN/2,R1
  1080	0103A0	D061 007C 	        STM     R6,CRAT+CRTLEN+CRTLEN/2,R1
  1081	0103A4	CB10 0050 	        SHI     R1,CRTLEN
  1082	0103A8	221A 		        JGEBS   PUSHIT
  1083	0103AA	5810 4000 0000 	        L       R1,CTIME,,
  1084	0103B0	5010 4000 0050 	        ST      R1,CRAT+CRTSIZ,,
  1085	0103B6	0302 		        JR      R2              :RETURN
  1086				         
  1087					EM
Page  6-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 STATL.LIB . . . Long-token version of STATUS.LIB

  1088					SUBTTL	STATL.LIB . . . Long-token version of STATUS.LIB
  1089				:******************************************************************
  1090				:
  1091				:	This program is the sole property and confidential
  1092				:	information of TYMNET, and may not be copied in whole
  1093				:	or in part or disclosed to any third party without
  1094				:	the prior written consent of TYMNET.
  1095				:
  1096				:*******************************************************************
  1097				
  1098	000001			  IF	1-\DB.STA			: DEFAULT DEBUG/STATUS TO ON
  1099	000001			DB.STA	EQ	1
  1100				  EI
  1101				
  1102	000001			  IF	DB.STA				: ASSEMBLE ONLY WITH DEBUG STATUS ON
  1103				
  1104	0103B8				SEG	A.CODE
  1105					MO	.,STATUS
  1106					RA	$00
  1107					GL	DSTART,DS.ELL,DS.ILL,DS.ERR,DS.DLM
  1108					GL	DS.TOK,DS.NUM,DS.EXI,DS.QUI,DS.GCH,DS.CUC,DS.DEL
  1109				
  1110				:	STATUS - User Command Handler
  1111				:
  1112				:	Version history:
  1113				:	13.3  08/19/83  <JOK>Changed DS.TOK to return first 8 chars of
  1114				:		TOKEN, changed DS.CMD to retain first 8 chars of command,
  1115				:		and changed DSTART to accept up to 8-character commands.
  1116				:	13.2  01/27/81  <BAB>Added RADIX=0 at start of mod.  Added jump
  1117				:		following 'QUIT' SVC to allow DDT "P" (proceede) command
  1118				:		to return the user to ":>" prompt.
  1119				:	13.1  11/17/81	<BAB>Added DNEXTK support, DS.DLM (last delimiter),
  1120				:		and fixed backspace for > 4 character entry, added the
  1121				:		command thought to be invalid to invalid command message.
  1122				:	13	08/81	<JK>Maintenance assumed by BAB from John Kopf
  1123				:
  1124				:		The Status package is intended to provide an extension to DDT,
  1125				:	invokable via the "?STAT" command in DDT.  Once invoked you may re-
  1126				:	activate it (provided you have not issued any DDT "G" (go) commands)
  1127				:	by typing "P ".
  1128				:
  1129				:		There is limited editing control built into the package:
  1130				:	ESC	aborts back to command level,
  1131				:	^W	discards partial 'token' already input (word or number),
  1132				:	^A	discards last char of token (backspace).
  1133				:	^H	discards last char of token (backspace).
  1134				
  1135				:		Delimiters may occur in multiple (e.g. ", " is OK).  Valid
  1136				:	delimiters are:
  1137				:	C/R	L/F	H/T	","	and BLANK.
  1138				
  1139				:		Entry Points:
  1140				:	DSTART	Place to exit on completion of command.
Page  6-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 STATL.LIB . . . Long-token version of STATUS.LIB

  1141				:	DNEXTK  Get next token with out prompt.
  1142				:	DS.ILL	Place to exit on illegal command -- types "Illegal command"
  1143				:	DS.ERR	Place to exit on command error -- types "type '\' "
  1144				:	DS.EXI	Place to exit machine.
  1145				:	DS.QUI	Place to exit back to DDT.
  1146				:	DS.GCH	Get a character...Link on R1, char (with high-order bit forced)
  1147				:			in R0...normal return if detected ^W, skip-4 if detect
  1148				:			^A, aborts back to DSTART if detects ESC.
  1149				:	DS.DEL	Check for delimiter...Link on R2, Character in R0.  Skip-4
  1150				:			return unless this is a delimiter, then normal return.
  1151				:	DS.CUC	Convert to upper case...Link on R1, Character in R0.
  1152				:	DS.TOK	Get a string token...Link on R4, TOKEN returned in R3/R2...
  1153				:			inputs up to 4 characters, returns them (in uppercase)
  1154				:			left justified, 0 fill
  1155				:	DS.NUM	Get a number...Link on R5, expects Radix in R4...
  1156				:			number returned in R0.  May ABORT if any character is
  1157				:			input other than valid digit or delimiter.
  1158				:	DS.DLM  Location of last delimeter entered (1 byte)
  1159				
  1160				:		There are two built-in commands:
  1161				:	Quit	exit back to DDT.
  1162				:	EXIt	exit machine.
  1163				
  1164				:		additional commands may be defined via the DS.CMD macro:
  1165				:	 DS.CMD(TEXT,ADDR)
  1166				:	Where:	TEXT	The (UPPERCASE) target command string.
  1167				:		ADDR	The virtual address to transfer to, to service that
  1168				:				command.
  1169				:	DS.CMD generates a 16-byte descriptor for this command, at the point
  1170				:	assembly where it is invoked.  This descriptor is on a WORD boundary.
  1171				
  1172				
  1173				
  1174	00000B			OUT	EQ	0B			: Output SVC
  1175	00000A			IN	EQ	0A			: Input SVC
  1176				
  1177	000000			DS.ELL	EQ	0			: Null pointer for end-of-linked-list
  1178				
  1179	0001A4				SEG	A.DATA
  1180	0001A4			DS.DLM	BS	1			: Last delimiter encountered
  1181	0001A8			R4SAV	WS	1			: Save-area for R4 in DS.TOK
  1182	0001AC	0CA7 F8F8 F8F8 	BADSTR	SC	/'xxxxxxxx'"8D"8A/	: Place to put bad command
		F8F8 F8F8 A78D 	
		8A		
  1183	0001AE			STOKEN	EQ	BADSTR+2		: String-buffer for token
  1184	0103B8				SEG	A.CODE
  1185				
  1186				:	Define elements for command-block
  1187	000000			C.NEXT	EQ	0			: Pointer to next command-block
  1188	000004			C.ADDR	EQ	C.NEXT+4		: Pointer to command-handler
  1189	000008			C.STR	EQ	C.ADDR+4		: Relative position of string
  1190				
  1191				:	Define macro to generate this command-block
Page  6-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 STATL.LIB . . . Long-token version of STATUS.LIB

  1192				DS.CMD	MACRO(STR,ADDR)[ WS	0
				   IF	DS.ELL
				Q	WS	0
					ORG	DS.ELL
					WC	Q
					ORG	Q
				   EI
				DS.ELL	WC	0,ADDR
					AC	/STR/
					WS	0
				 IF	DS.ELL+10-. ; WC 0; EI
				]
  1193				
  1194				
  1195				:	TABLE OF COMMANDS, AND TARGET ROUTINES.
  1196				CMDLST	DS.CMD(Q,DS.QUI)		: Exit back to DDT
  1197					DS.CMD(QUIT,DS.QUI)		: Exit back to DDT
  1198					DS.CMD(EXIT,DS.EXI)		: Exit
  1199					DS.CMD(EXI,DS.EXI)		: Exit
  1200				
  1201				
  1202				
  1203				
  1204				:	Diagnostic messages
  1205	0103F8	10C9 ECEC E5E7 	TERR	SC	/Illegal command /
		E1EC A0E3 EFED 	
		EDE1 EEE4 A0	
  1206	010409	0A F4F9 F0E5 A0	TTERR	SC	/type '\'"8D"8A/
		A7 DCA7 8D8A 	
  1207	010414	048D 8ABA BE	PROMPT	SC	/"8D"8A:>/		: "CR|LF:>"
  1208	010419	03 88A0 88	BKSPAC	SC	/"88 "88/		: Back-space
Page  7-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 Command-scanner, Verifier, and Bitcher

  1209					SUBTTL	Command-scanner, Verifier, and Bitcher
  1210				
  1211				:	Command-input Handler
  1212	01041E	5801 0004 	DOIT	L	R0,C.ADDR,R1		: Go service this command
  1213	010422	0100 			JALR	R0,R0
  1214				
  1215				:	Next Command
  1216	010424	E1B0 FFEC 	DSTART	SVC	OUT,PROMPT		: Issue Prompt
  1217	010428	4140 8048 	DNEXTK	JAL	R4,DS.TOK		: Get command-token
  1218	01042C	E610 FF88 		LA	R1,CMDLST		: Search for string-match
  1219	010430	5531 0008 	DSTAR1	CL	R3,C.STR,R1		: check first-word
  1220	010434	2135 			JNFS	DSTAR2			: no match
  1221	010436	5521 000C 		CL	R2,C.STR+4,R1		: second-word
  1222	01043A	4330 FFE0 		JE	DOIT			: Proceed if find a match
  1223				
  1224	01043E	5811 0000 	DSTAR2	L	R1,C.NEXT,R1		: Else continue scan
  1225	010442	2029 			JGBS	DSTAR1
  1226				
  1227	010444	E1B0 FFB0 	DS.ILL	SVC	OUT,TERR		: "ILLEGAL COMMAND"
  1228	010448	E1B0 4000 01AC 		SVC	OUT,BADSTR,,
  1229				
  1230	01044E	E1B0 FFB7 	DS.ERR	SVC	OUT,TTERR		: Tell user to type Flush-char
  1231				
  1232	010452	4110 8154 	BITCH	JAL	R1,DS.GCH		: Flush input
  1233	010456	2202 			 JBS	BITCH
  1234	010458	0200 			 NOPR	0			: ^W...Ignore
  1235	01045A	2204 			  JBS	BITCH
  1236	01045C	0200 			  NOPR	0			: ^A...Ignore
  1237	01045E	C500 00DC 		CLHI	R0,0DC			: Read until "\" is found
  1238	010462	2038 			JNBS	BITCH
  1239	010464	4300 FFBC 		J	DSTART			: Then exit
  1240				
  1241				
  1242				:	Built-in Commands
  1243				
  1244				:		Command EXIt
  1245				:		===========-
  1246	010468	E1D0 0000 	DS.EXI	SVC	KIO,0			: Disconnect
  1247				
  1248				
  1249				:		Command Quit (exit back to DDT)
  1250				:		=========---
  1251	01046C	E1D0 0001 	DS.QUI	SVC	KIO,1			: Return to DDT
  1252	010470	4300 FFB0 		J	DSTART			: If operator typed "P", get next command
Page  8-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 U T I L I T I E S

  1253					SUBTTL	U T I L I T I E S
  1254				
  1255				:	Get a Command-token...Up to 8 chars long
  1256				:		Skips over extra characters to next delimiter
  1257				:	Link on R4
  1258				:	Token returned in R3/R2, Left justified, 0-fill
  1259	010474	5040 4000 01A8 	DS.TOK	ST	R4,R4SAV,,		: save R4
  1260				
  1261	01047A	2400 		TOKEN0	LIS	R0,0			: clear token buffer
  1262	01047C	E630 4000 01AE 		LA	R3,STOKEN,,		: set char-pointer
  1263	010482	5003 0000 		ST	R0,0,R3
  1264	010486	5003 0004 		ST	R0,4,R3
  1265				
  1266				:	Scan for first character of TOKEN
  1267	01048A	4110 811C 	TOKEN1	JAL	R1,DS.GCH		: Get next char
  1268	01048E	2202 			 JBS	TOKEN1
  1269	010490	0200 			 NOPR	0			: ^W...Ignore
  1270	010492	2204 			  JBS	TOKEN1
  1271	010494	0200 			  NOPR	0			: ^A...Ignore
  1272	010496	4120 80F2 		JAL	R2,DS.DEL		: Skip over delimiters
  1273	01049A	4300 FFEC 		 J	TOKEN1
  1274	01049E	4110 813A 		JAL	R1,DS.CUC		: Convert to Upper-case
  1275	0104A2	C900 00DC 		CHI	R0,00DC			: = "\" ?
  1276	0104A6	4330 FF7A 		JE	DSTART			: YES.  Print Prompt, get next command
  1277	0104AA	D203 0000 		STB	R0,0,R3			: no...start TOKEN accumulation
  1278	0104AE	2631 			AIS	R3,1			: advance pointer
  1279	0104B0	2441 			LIS	R4,1			: 1 char. found so far
  1280				
  1281	0104B2	4110 80F4 	TOKEN2	JAL	R1,DS.GCH		: Get another char
  1282	0104B6	4300 FFC0 		 J	TOKEN0			: ^W...Start over
  1283	0104BA	4300 803C 		  J	TOKEN4			: ^A...Toss last char
  1284	0104BE	4110 811A 		JAL	R1,DS.CUC		: Convert to upper-case
  1285	0104C2	4120 80C6 		JAL	R2,DS.DEL		: Check for delimiter
  1286	0104C6	4300 801C 		 J	TOKEN3			: Got one...skip to clean up
  1287	0104CA	C900 00DC 		CHI	R0,00DC			: = "\" ?
  1288	0104CE	4330 FF72 		JE	DS.ILL			: YES.  Treat as Illegal
  1289	0104D2	2641 			AIS	R4,1			: one more character
  1290	0104D4	C940 0008 		CHI	R4,8			: If >= 8 chars, do not use this one
  1291	0104D8	4220 FFD6 		JG	TOKEN2			: YES...Scan for delimiter
  1292	0104DC	D203 0000 		STB	R0,0,R3			: NO...Accumulate chars
  1293	0104E0	2631 			AIS	R3,1			: advance cursor
  1294	0104E2	4300 FFCC 		J	TOKEN2			: ..and get another char
  1295				
  1296	0104E6	5840 4000 01A8 	TOKEN3	L	R4,R4SAV,,		: Restore R4
  1297	0104EC	5830 4000 01AE 		L	R3,STOKEN,,		: place TOKEN into Registers
  1298	0104F2	5820 4000 01B2 		L	R2,STOKEN+4,,
  1299	0104F8	0304 			JR	R4			: Return TOKEN in R2/R3
  1300				
  1301				
  1302				:	Handle backspace in TOKEN
  1303	0104FA	2741 		TOKEN4	SIS	R4,1			: one less char
  1304	0104FC	4320 FF7A 		JLE	TOKEN0			: re-initialize if none left
  1305	010500	C940 0008 		CHI	R4,8			: If after backspace TOKEN is >= 8
Page  8-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 U T I L I T I E S

  1306	010504	4310 FFAA 		JGE	TOKEN2			: then just decrement counter
  1307	010508	2400 			LIS	R0,0			: else... drop one character
  1308	01050A	2731 			SIS	R3,1			:   back-up pointer
  1309	01050C	D203 0000 		STB	R0,0,R3
  1310	010510	4300 FF9E 		J	TOKEN2			: and get next char
  1311				
  1312				:	Utility routine to read a number
  1313				:	uses R0-R3
  1314				:	Expects RADIX in R4
  1315				:	Link on R5
  1316				:	Aborts if first non-delimiter is not digit
  1317				:	Else returns number in R0
  1318	010514	4110 8092 	DS.NUM	JAL	R1,DS.GCH		: get next char
  1319	010518	2202 			 JBS	DS.NUM
  1320	01051A	0200 			 NOPR	0			: ^W...ignore
  1321	01051C	2204 			  JBS	DS.NUM
  1322	01051E	0200 			 NOPR	0			: ^A...Ignore
  1323	010520	4120 8068 		JAL	R2,DS.DEL		: check for delimiter char
  1324	010524	4300 FFEC 		 J	DS.NUM
  1325	010528	4120 803E 		JAL	R2,DS.DIG		: test if char is digit
  1326	01052C	4300 FF14 		 J	DS.ILL			: not a digit - give error-message
  1327	010530	0504 			CLR	R0,R4
  1328	010532	4310 FF0E 		JGE	DS.ILL			: digit is bigger than RADIX...Abort
  1329	010536	0830 			LR	R3,R0			: put first digit into accumulator
  1330	010538	4110 806E 	NUMBER	JAL	R1,DS.GCH		: read next char
  1331	01053C	4300 FFD4 		 J	DS.NUM			: ^W...Start over
  1332	010540	4300 801E 		  J	DIVIDE			: ^A...Toss last digit
  1333	010544	4120 8044 		JAL	R2,DS.DEL		: Check for delimiter
  1334	010548	0803 			 LR	R0,R3
  1335	01054A	0305 			 JR	R5	  :YES
  1336	01054C	4120 801A 		JAL	R2,DS.DIG		: skip if digit
  1337	010550	4300 FEF0 		J	DS.ILL			: NO...Abort
  1338	010554	0504 			CLR	R0,R4
  1339	010556	4310 FEEA 		JGE	DS.ILL			: RADIX error...Bitch
  1340	01055A	1C24 			MR	R2,R4			: build number
  1341	01055C	0A30 			AR	R3,R0			: add new digit
  1342	01055E	4300 FFD6 		J	NUMBER			: get next digit
  1343				
  1344	010562	2420 		DIVIDE	LIS	R2,0			: got a ^A...Make double-precision arg.
  1345	010564	1D24 			DR	R2,R4			: Quotent into R3, where we want it
  1346	010566	4300 FFCE 		J	NUMBER			: now go back for more digits
  1347				
  1348				:	Digit test
  1349				:	Check character read...Skip return if digit
  1350				:	Then R0=Binary value of HEX digit
  1351				:	uses R1, Link on R2
  1352	01056A	4110 806E 	DS.DIG	JAL	R1,DS.CUC		: Convert to upper-case
  1353	01056E	0810 			LR	R1,R0			: Copy char
  1354	010570	CB10 00B0 		SHI	R1,0B0			: is it "0"?
  1355	010574	0212 			JLR	R2			: return if less than "0"
  1356	010576	2719 			SIS	R1,0B9-0B0		: is it "9"
  1357	010578	2326 			JLEFS	DIGIT			: less than "9", then a good digit
  1358	01057A	2718 			SIS	R1,0C1-0B9		: is it "A"?
Page  8-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 U T I L I T I E S

  1359	01057C	0212 			JLR	R2			: return if less than "A"
  1360	01057E	2715 			SIS	R1,0C6-0C1		: is it "F"?
  1361	010580	0222 			JGR	R2			: return if greater than "F"
  1362	010582	2707 			SIS	R0,7			: 0A - "A" (partial conversion)
  1363				
  1364	010584	CB00 00B0 	DIGIT	SHI	R0,0B0			: "0"
  1365	010588	4302 0004 		J	4,R2			: skip-return
  1366				
  1367				:	Check for delimiter
  1368				:	Link	R2
  1369				:	Uses	R0,R1
  1370				:	Skip-4 return unless (R0) is a delimiter-character
  1371	01058C	C810 0004 	DS.DEL	LHI	R1,DLEN-1		: number of delimiter chars
  1372	010590	D200 4000 01A4 		STB	R0,DS.DLM,,		: save delimiter
  1373				
  1374	010596	D401 800A 	DELIM	CLB	R0,DLIST,R1		: compare to a delimiter
  1375	01059A	0332 			JER	R2			: return if delimiter
  1376	01059C	2711 			SIS	R1,1			: check next delimiter
  1377	01059E	2214 			JGEBS	DELIM			: loop if any more delimiters
  1378	0105A0	4302 0004 		J	4,R2			: skip-return
  1379				
  1380				:	List of delimiter chars
  1381	0105A4	A0AC 		DLIST	AC	' ,'			: Blank,","
  1382	0105A6	8D8A 89			BC	8D,8A,89		: CR,LF,HT
  1383	000005			DLEN	EQ	.-DLIST			: Number of delimiter chars
  1384				
  1385				:	Input a Character
  1386				:	Link	R1
  1387				:	Normal-return:   ^W Input...Flush entry
  1388				: 	Skip-4 return:  ^A or ^H Input...flush last char
  1389				:	  SKIP-8 return: Char in R0 (high-bit on)
  1390				:	Aborts to command-scanner on "ESC"
  1391	0105AA	E1A0 000F 	DS.GCH	SVC	IN,0F			: get the char
  1392	0105AE	4300 FFF8 		 J	DS.GCH
  1393	0105B2	C600 0080 		OHI	R0,80			: set high-order bit
  1394	0105B6	C500 009B 		CLHI	R0,9B			: check for escape
  1395	0105BA	4330 FE66 		 JE	DSTART			: abort, proceed with prompt if so
  1396	0105BE	C500 0097 		CLHI	R0,97			: check for ^W
  1397	0105C2	0331 			 JER	R1			: normal-return
  1398	0105C4	C500 0081 		CLHI	R0,81			: check for ^A
  1399	0105C8	4331 0004 		 JE	4,R1			: Skip-4 return
  1400	0105CC	C500 0088 		CLHI	R0,88			: check for ^H
  1401	0105D0	4231 0008 		 JN	8,R1			: No, skip-8 return, Char in R0
  1402				
  1403	0105D4	E1B0 FE41 		SVC	OUT,BKSPAC		: Back-space
  1404	0105D8	4301 0004 		J	4,R1			: skip-4 return for ^H
  1405				
  1406				:	Convert char in (R0) to upper-case
  1407				:	Link on R1
  1408	0105DC	C500 00E1 	DS.CUC	CLHI	R0,0E1			: Compare with "a"
  1409	0105E0	0211 			JLR	R1			: Exit if it can't be lower-case
  1410	0105E2	C500 00FA 		CLHI	R0,0FA			: Compare with "z"
  1411	0105E6	0221 			JGR	R1			: Not lower-case...Just return
Page  8-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 U T I L I T I E S

  1412	0105E8	CB00 0020 		SHI	R0,20			: Lower-case...Convert to upper-case
  1413	0105EC	0301 			JR	R1			: and return
  1414				
  1415					EM
  1416				
  1417				  EI	: (DB.STA)
Page  9-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS BASE CODE

  1418					SUBTTL	EBUS BASE CODE
  1419					RA	0
  1420				
  1421				:		***** ****  *   *  ****
  1422				:		*     *   * *   * *
  1423				:		****  ****  *   *  ***
  1424				:		*     *   * *   *     *
  1425				:		***** ****   ***  ****
  1426				:	This is the EBUS Base Code
  1427					GL	START,FPANEL,EBDUMP
  1428	000000			 if	1-\EBDUMP
  1429				EBDUMP	EQ	0			: switch off if not defined
  1430				 ei
  1431				
  1432					MO	.,EBUS
  1433				
  1434	0000F0			SSRCRC	EQ	0F0			: Crash-code for SSR-detected crash of IPI   
  1435	0000F1			SVCCRC	EQ	0F1			: Crash-code for failed CONNECT-IPI SVC call
  1436	0000F2			IPICRC	EQ	0F2			: Crash-code for CRASH-MSG sent by IPI
  1437				
  1438	000031			XLATE	EQ	$A 49
  1439	0000D0			CONIP	EQ	0D0
  1440				
  1441				:	Define some data-structure formats
  1442	0105EE			Q	EQ	.
  1443				
  1444				:	Parameters passed to 68K
  1445	000000				ORG	0			: define offsets
  1446	000000			.ORING	HS	2			: pointer to ORING (L)
  1447	000004			.ORSIZ	HS	1			: ORSIZE (W)
  1448	000006			.IRING	HS	2			: pointer to IRING (L)
  1449	00000A			.IRSIZ	HS	1			: IRSIZE (W)
  1450	00000C			.FASTC	HS	2			: pointer to FASTC (L)
  1451	000010			.SLOWC	HS	2			: pointer to SLOWC (L)
  1452	000014			.SYNC	HS	2			: pointer to SYNC (L)
  1453	000018			.CDUMP	HS	2			: pointer to REGDMP (L)
  1454	00001C			.MDUMP	HS	2			: pointer to Memory-dump (L)
  1455	000020			.MSIZE	HS	2			: size of dump area in bytes (L)
  1456	000024			.SIZE	WS	0			: size of this area
  1457				
  1458				:	Parameters returned by 68K (on Crash)
  1459	000000				ORG	0			: define offsets
  1460	000000			COD	WS	1			: CODCASH (L)
  1461	000004			PC	WS	1			: PCCASH (L)
  1462	000008			D0	WS	1			: D0 (L)
  1463	00000C			D1	WS	1			: D1 (L)
  1464	000010			D2	WS	1			: D2 (L)
  1465	000014			D3	WS	1			: D3 (L)
  1466	000018			D4	WS	1			: D4 (L)
  1467	00001C			D5	WS	1			: D5 (L)
  1468	000020			D6	WS	1			: D6 -- Cd (L)
  1469	000024			D7	WS	1			: D7 -- Cs (L)
  1470	000028			A0	WS	1			: A0 (L)
Page  9-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS BASE CODE

  1471	00002C			A1	WS	1			: A1 (L)
  1472	000030			A2	WS	1			: A2 (L)
  1473	000034			A3	WS	1			: A3 (L)
  1474	000038			A4	WS	1			: A4 -- Rp (L)
  1475	00003C			A5	WS	1			: A5 -- Rs (L)
  1476	000040			A6	WS	1			: A6 -- Rd (L)
  1477	000044			A7	WS	1			: A7 -- SP (L)
  1478				
  1479	0105EE				ORG	Q			: return to real address-space
  1480				
  1481	0001B9				SEG	A.DATA
  1482	0001BA	0000 		FPANEL	HC	0			: used for front-panel display
  1483	0001BC	0000 		SYNC	HC	0			: used to synchronize EBUS code
  1484	0001BE	0000 		HPARAM	HC	0			: front-panel display (host #|# circuits)
  1485	0001C0	0000 		HSTAT	HC	0			: ditto...host state (left byte)
  1486	0001C2			BITS	HS	2			: ditto
  1487	0001C6			XBITS	HS	2			: ditto
  1488				
  1489				:	This area is used for communication between ISIS and this slot
  1490	0001CC			STAREA	WS	0			: Beginning of status (communications) area
  1491	0001CC			STCRA	WS	1			: <CODCASH> placed here
  1492	0001D0			STATIM	WS	1			: time of occurance
  1493	0001D4			SSRCRA	WS	1			: SST reason
  1494	0001D8			SSRTIM	WS	1			: time of occurance
  1495	0001DC			CRATYP	WS	1			: Identifies type of SVC Crash
  1496	0001E0				WS	1			: ??
  1497				
  1498				
  1499				:	68K Communications Area
  1500	020000			IOWADR	EQ	STSEG2			: in SEG 2
  1501	020024			EVERN	EQ	IOWADR+.SIZE		: where EBUS will place it's version #
  1502	020026			REGDMP	EQ	EVERN+2			: where EBUS will dump Regs to
  1503				
  1504				
  1505	000001			 IF	EBDUMP
  1506	030000				SEG	3
  1507				
  1508				:	Dump image area
  1509	030000			S3ADDR	BS	40000			: reserve 256K area for dump image
  1510				 EI
  1511				
  1512	0105EE				SEG	A.CODE
  1513				:	Code area
  1514				
  1515				
  1516				:	Begin here...Initialize parameters for 68K
  1517	0105EE	E610 4002 0000 	START	LA	R1,IOWADR,,		: base-address of I/O Window
  1518	0105F4	E600 4002 0100 		LA	R0,ORING,,		: address of output-ring
  1519	0105FA	E120 0031 		SVC	SYS,XLATE
  1520	0105FE	4300 8120 		 J	XLCRSH
  1521	010602	5001 0000 		ST	R0,.ORING,R1		: physical address of output-ring
  1522	010606	C800 07FC 		LHI	R0,ORSIZE		: size of output-ring
  1523	01060A	4001 0004 		STH	R0,.ORSIZ,R1
Page  9-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS BASE CODE

  1524	01060E	E600 4002 0900 		LA	R0,IRING,,		: address of input-ring
  1525	010614	E120 0031 		SVC	SYS,XLATE
  1526	010618	4300 8106 		 J	XLCRSH
  1527	01061C	5001 0006 		ST	R0,.IRING,R1		: physical address of input-ring
  1528	010620	C800 07FC 		LHI	R0,IRSIZE		: size of input-ring
  1529	010624	4001 000A 		STH	R0,.IRSIZ,R1
  1530	010628	E600 400F 0004 		LA	R0,FASTC,,		: FASTC address
  1531	01062E	E120 0031 		SVC	SYS,XLATE
  1532	010632	4300 80EC 		 J	XLCRSH
  1533	010636	5001 000C 		ST	R0,.FASTC,R1		: FASTC physical address
  1534	01063A	2604 			AIS	R0,SLOWC-FASTC		: SLOWC address
  1535	01063C	5001 0010 		ST	R0,.SLOWC,R1		: SLOWC physical address
  1536	010640	E601 0026 		LA	R0,REGDMP-IOWADR,R1	: REGDMP address
  1537	010644	E120 0031 		SVC	SYS,XLATE
  1538	010648	4300 80D6 		 J	XLCRSH
  1539	01064C	5001 0018 		ST	R0,.CDUMP,R1		: REGDMP physical address
  1540	000001			 if	EBDUMP
  1541	010650	E600 4003 0000 		LA	R0,S3ADDR,,		: Memory-dump area
  1542	010656	E120 0031 		SVC	SYS,XLATE
  1543	01065A	4300 80C4 		 J	XLCRSH
  1544	01065E	F820 0004 0000 		LI	R2,40000		: size of area
  1545	000000			 else	:not EBDUMP
  1546					LIS	R0,0			: no dump area
  1547					LIS	R2,0			:  ...zero-length
  1548				 ei	:EBDUMP
  1549	010664	5001 001C 		ST	R0,.MDUMP,R1		: Memory-dump physical address
  1550	010668	5021 0020 		ST	R2,.MSIZE,R1		:  ...and size
  1551	01066C	E600 01BC 		LA	R0,SYNC			: SYNC address
  1552	010670	E120 0031 		SVC	SYS,XLATE
  1553	010674	4300 80AA 		 J	XLCRSH
  1554	010678	5001 0014 		ST	R0,.SYNC,R1		: SYNC physical address
  1555				
  1556	01067C	2400 			LIS	R0,0			: Logical unit 0 (and constant)
  1557	01067E	5000 01CC 		ST	R0,STCRA		: initialize Status area
  1558	010682	5000 01D0 		ST	R0,STATIM		: 
  1559	010686	5000 01D4 		ST	R0,SSRCRA		: 
  1560	01068A	5000 01D8 		ST	R0,SSRTIM		: 
  1561	01068E	E620 01CC 		LA	R2,STAREA		: set address of status area
  1562	010692	E130 00D0 		SVC	IO,CONIP		: connect processor:
  1563				:						R0 -	LU
  1564				:						R1 -	address of IOWindow area
  1565				:						R2 -	address of ISIS Status Area
  1566	010696	4300 808A 		 J	SVCCRA
  1567				
  1568				:	now running...set up for background
  1569	01069A	F800 0101 0101 		LI	R0,01010101		: Set up speedometer
  1570	0106A0	5000 01C2 		ST	R0,BITS
  1571	0106A4	F800 00FF 00FF 		LI	R0,00FF00FF
  1572	0106AA	5000 01C6 		ST	R0,XBITS		: slot speedometer
  1573	0106AE	5830 400F 0004 		L	R3,FASTC,,		: reserve R3 for slot speedometer timeout
  1574				
  1575				
  1576				:	The main loop
Page  9-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS BASE CODE

  1577	0106B4	5820 01C6 	MAIN	L	R2,XBITS		: our speedometer
  1578	0106B8	5930 400F 0004 		C	R3,FASTC,,
  1579	0106BE	2127 			JGFS	MAIN1
  1580	0106C0	CA30 003C 		AHI	R3,$A 60		: do our speedometer, again in 1/10 second
  1581	0106C4	EA20 0001 		RRL	R2,1
  1582	0106C8	5020 01C6 		ST	R2,XBITS
  1583	0106CC	4810 01BC 	MAIN1	LH	R1,SYNC			: get a value
  1584	0106D0	E000 01BC 		TS	SYNC			: indicate to EBUS we've run again
  1585	0106D4	5800 01C2 		L	R0,BITS			: use value to shuffle bits
  1586	0106D8	EA01 0000 		RRL	R0,0,R1
  1587	0106DC	5000 01C2 		ST	R0,BITS
  1588	0106E0	0702 			XR	R0,R2			: pack EBUS speedometer with ours
  1589	0106E2	D310 01C0 		LB	R1,HSTAT
  1590	0106E6	9210 			STBR	R1,R0			: pack with host-state
  1591	0106E8	5810 400F 0008 		L	R1,SLOWC,,		: check time
  1592	0106EE	C310 0003 		THI	R1,3
  1593	0106F2	2133 			JNFS	MAIN2			: for 3 seconds out of 4, show speedometer
  1594	0106F4	7300 01BE 		LHL	R0,HPARAM		: ...other second, show host parameters
  1595				
  1596	0106F8	4000 01BA 	MAIN2	STH	R0,FPANEL		: update front-panel
  1597	0106FC	E100 0000 		SVC	DISMISS			: and dismiss
  1598	010700	5810 01CC 		L	R1,STCRA		: Any IPI MSG?
  1599	010704	C510 0003 		CLHI	R1,3			: Crash MSG from 68K?
  1600	010708	2339 			JEFS	IPCRSH
  1601	01070A	5810 01D4 		L	R1,SSRCRA		: SSR Crash?
  1602	01070E	4310 FFA2 		JGE	MAIN			: no
  1603	010712	41A0 FB34 		JAL	R10,CRASH		: yes
  1604	010716	0000 04F0 		BC	0,0,R1*4,SSRCRC
  1605				
  1606	01071A	41A0 FB2C 	IPCRSH	JAL	R10,CRASH
  1607	01071E	0000 04F2 		BC	0,0,R1*4,IPICRC
  1608				
  1609	010722	2501 		XLCRSH	LCS	R0,1			: set -1
  1610	010724	5000 01DC 	SVCCRA	ST	R0,CRATYP
  1611	010728	41A0 FB1E 		JAL	R10,CRASH		: Else, it's a failed attempt to Connect
  1612	01072C	0000 00F1 		BC	0,0,R0*4,SVCCRC
Page  10-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS -- Operations Monitor:

  1613					SUBTTL	EBUS -- Operations Monitor:
  1614				
  1615					LO	STATUS			: access STATUS
  1616				
  1617				:	MACRO to print a number (in R0) on terminal
  1618				:	ARG	USE
  1619				:	1	Number of digits
  1620				:	2	Any sum of:  .S, .B, .Z, one of [ .D, .H, OR .O]
  1621	000080			S.	EQ	80			: signed output
  1622	000020			B.	EQ	20			: Blank fill
  1623	000040			Z.	EQ	40			: Zero fill
  1624	00000A			D.	EQ	0A			: Decimal
  1625	000008			O.	EQ	08			: Octal
  1626	000010			H.	EQ	10			: Hexidecimal
  1627					KILL	PRINTN,PRINTP,PRINTS	: insure no conflict
  1628				PRINTN	MACRO(ND,M2)[
					LHI	R1,(ND*100)!M2
					SVC	KIO,$A 10
				]
  1629				
  1630				:	MACRO to print a string, given the address
  1631				PRINTP	MACRO(ADDR)[ SVC	OUT,ADDR]
  1632				
  1633				:	MACRO to print a string, given the string
  1634				PRINTS	MACRO(STR)[ KILL TO,AT
					PRINTP(AT)
					J	TO
				AT	SC	STR
				TO	HS	0]
Page  11-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS -- Operations Monitor:  ?STAT Command Handlers:  HELP, CODE, V, STATE

  1635					SUBTTL	EBUS -- Operations Monitor:  ?STAT Command Handlers:  HELP, CODE, V, STA
				**TE
  1636				
  1637				
  1638				
  1639					DS.CMD(HELP,HELP)		: Print Command List
  1640					DS.CMD(?,HELP)			: Print Command List
  1641					DS.CMD(CODE,CODE)		: Print Banner (which code this is).
  1642					DS.CMD(V,V)			: print versions
  1643					DS.CMD(STATE,STATE)		: print host state
  1644				
  1645	010780	E1B0 82F0 	HELP	PRINTP(BANNER)
  1646	0107A2				PRINTS(/"8D"8AValid commands are:/)
  1647	0107C2				PRINTS(/"8D"8AEXIT or EXI - log off/)
  1648	0107F4				PRINTS(/"8D"8AQUIT or Q   - exit ?STAT (back to DDT)/)
  1649	01081C				PRINTS(/"8D"8AHELP or ?   - print this list/)
  1650	010854				PRINTS(/"8D"8ACODE        - Describe the code in this slot/)
  1651	010888				PRINTS(/"8D"8AV           - Display the version number/)
  1652	0108B8				PRINTS(/"8D"8ASTATE       - Display the host state/)
  1653	0108EA				PRINTS(/"8D"8ARDUMP       - Display 68K register dump/)
  1654	000001			 if	EBDUMP
  1655	010924				PRINTS(/"8D"8ADUMP        - Describe how to dump EBUS memory/)
  1656				 ei	:EBDUMP
  1657	010924	4300 FAFC 		J	DSTART
  1658				
  1659	010928	E1B0 8148 	CODE	PRINTP(BANNER)			: display banner
  1660	01092C	4300 FAF4 		J	DSTART
  1661				
  1662	010950			V	PRINTS(/Versions:  Slot code: /)
  1663	010950	C800 0002 		LHI	R0,VERSIO
  1664					PRINTN(2,H.)			: 2 hex digits, no fill
  1665	01095C	E1B0 813C 		PRINTP(DOT)
  1666	010960	C800 0001 		LHI	R0,REVLEV
  1667					PRINTN(2,Z.!H.)			: 2 hex digits, zero-fill
  1668	010984				PRINTS(/"BB  EBUS code: /)
  1669	010984	D300 4002 0024 		LB	R0,EVERN,,
  1670					PRINTN(2,H.)			: 2 hex digits, no fill
  1671	010992	E1B0 8106 		PRINTP(DOT)
  1672	010996	D300 4002 0025 		LB	R0,EVERN+1,,
  1673					PRINTN(2,Z.!H.)			: 2 hex digits, zero-fill
  1674	0109A4	4300 FA7C 		J	DSTART
  1675				
  1676				:	Print host state
  1677	0109A8	4800 01C0 	STATE	LH	R0,HSTAT
  1678	0109AC	4230 8022 		JN	STATE1			: skip if there is a host
  1679	0109CE				PRINTS(/"8D"8ANo host connected!/)
  1680	0109CE	4300 FA52 		J	DSTART			: and quit
  1681				
  1682	0109E4			STATE1	PRINTS(/"8D8AHost /)
  1683	0109E4	D300 01C0 		LB	R0,HSTAT		: print host number
  1684					PRINTN(5,D.)			: 5 decimal digits, no fill
  1685	0109FE				PRINTS(/ is /)
  1686	0109FE	D300 01BE 		LB	R0,HPARAM		: print state based on ans/shut/down
Page  11-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS -- Operations Monitor:  ?STAT Command Handlers:  HELP, CODE, V, STATE

  1687	010A02	2701 			SIS	R0,1			: down?
  1688	010A04	213A 			JNFS	STATE2			: no
  1689	010A14				PRINTS(/Down/)			: yes...say so
  1690	010A14	4300 FA0C 		J	DSTART			: and quit
  1691				
  1692	010A18	2119 		STATE2	JLFS	STATE3			: skip if answered
  1693	010A28				PRINTS(/Shut/)
  1694	010A28	230A 			JFS	STATE4
  1695				
  1696	010A3C			STATE3	PRINTS(/Answered/)
  1697	010A64			STATE4	PRINTS(/"2C number of active circuits is /)
  1698	010A64	D300 01C1 		LB	R0,HSTAT+1		: get number
  1699					PRINTN(3,D.)			: 3 decimal digits, no fill
  1700	010A70	4300 F9B0 		J	DSTART
  1701				
  1702	010A74	248A 8D8A C5C2 	BANNER	SC	/"8A"8D"8AEBUSOM...EBUS Operations Monitor"8A/
		D5D3 CFCD AEAE 	
		AEC5 C2D5 D3A0 	
		CFF0 E5F2 E1F4 	
		E9EF EEF3 A0CD 	
		EFEE E9F4 EFF2 	
		8A		
  1703	010A99	02 8A8D 	CRLF	SC	/"8A"8D/
  1704	010A9C	01AE 		DOT	SC	/./
Page  12-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP

  1705					SUBTTL	EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP
  1706				
  1707					DS.CMD(RDUMP,RDUMP)		: dump registers
  1708	000001			 if	EBDUMP
  1709					DS.CMD(DUMP,DUMP)		: dump EBUS memory
  1710				
  1711	010B00			DUMP	PRINTS(/"8D"8AIn order to perform a dump of EBUS [68K] memory into/)
  1712	010B36				PRINTS(/"8D"8AEngine memory"2C activate MACSBUG and type"3A"8A/)
  1713	010B50				PRINTS(/"8D"8A  BM 0 3FFFF E/)
  1714	010B50	E600 4003 0000 		LA	R0,S3ADDR,,
  1715	010B56	E120 0031 		SVC	SYS,XLATE
  1716	010B5A	4200 0000 		 NOP	0
  1717					PRINTN(5,Z.!H.)			: 5 hex digits, zero-fill
  1718	010B66	E1B0 FF2F 		PRINTP(CRLF)
  1719	010B6A	4300 F8B6 		J	DSTART
  1720				 ei	:EBDUMP
  1721				
  1722				
  1723	010B6E	E620 4002 0026 	RDUMP	LA	R2,REGDMP,,		: address of dump area
  1724	010B74	5802 0000 		L	R0,COD,R2		: any dump?
  1725	010B78	4230 801E 		JN	DUMP1			: yes
  1726	010B96				PRINTS(/No Register Dump/)
  1727	010B96	4300 F88A 		J	DSTART
  1728				
  1729	010BAC			DUMP1	PRINTS(/"8D"8ACode: /)
  1730					PRINTN(8,B.!H.)			: 8 hex digits, blank fill
  1731	010BC8				PRINTS(/"8D"8APC:     /)
  1732	010BC8	5802 0004 		L	R0,PC,R2
  1733					PRINTN(6,Z.!H.)			: 6 hex digits, zero fill
  1734	010BE6				PRINTS(/"8D"8AD0:   /)
  1735	010BE6	5802 0008 		L	R0,D0,R2
  1736					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1737	010C06				PRINTS(/    A0:   /)
  1738	010C06	5802 0028 		L	R0,A0,R2
  1739					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1740	010C24				PRINTS(/"8D"8AD1:   /)
  1741	010C24	5802 000C 		L	R0,D1,R2
  1742					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1743	010C44				PRINTS(/    A1:   /)
  1744	010C44	5802 002C 		L	R0,A1,R2
  1745					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1746	010C62				PRINTS(/"8D"8AD2:   /)
  1747	010C62	5802 0010 		L	R0,D2,R2
  1748					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1749	010C82				PRINTS(/    A2:   /)
  1750	010C82	5802 0030 		L	R0,A2,R2
  1751					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1752	010CA0				PRINTS(/"8D"8AD3:   /)
  1753	010CA0	5802 0014 		L	R0,D3,R2
  1754					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1755	010CC0				PRINTS(/    A3:   /)
  1756	010CC0	5802 0034 		L	R0,A3,R2
  1757					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
Page  12-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	 EBUS -- Operations Monitor:  ?STAT Command Handlers:  DUMP

  1758	010CDE				PRINTS(/"8D"8AD4:   /)
  1759	010CDE	5802 0018 		L	R0,D4,R2
  1760					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1761	010CFE				PRINTS(/  A4(Rp): /)
  1762	010CFE	5802 0038 		L	R0,A4,R2
  1763					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1764	010D1C				PRINTS(/"8D"8AD5:   /)
  1765	010D1C	5802 001C 		L	R0,D5,R2
  1766					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1767	010D3C				PRINTS(/  A5(Rs): /)
  1768	010D3C	5802 003C 		L	R0,A5,R2
  1769					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1770	010D5A				PRINTS(/"8D"8AD6:   /)
  1771	010D5A	5802 0020 		L	R0,D6,R2
  1772					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1773	010D7A				PRINTS(/  A6(Rd): /)
  1774	010D7A	5802 0040 		L	R0,A6,R2
  1775					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1776	010D98				PRINTS(/"8D"8AD7:   /)
  1777	010D98	5802 0024 		L	R0,D7,R2
  1778					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1779	010DB8				PRINTS(/  A7(SP): /)
  1780	010DB8	5802 0044 		L	R0,A7,R2
  1781					PRINTN(8,Z.!H.)			: 8 hex digits, zero fill
  1782	010DC4	4300 F65C 		J	DSTART
  1783				
  1784					FO	STATUS			: de-access STATUS
  1785				
  1786					EM	: EBUS
Page  13-1	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  1787				        SUBTTL  Control Table Allocation and Diagnostics - FINISH.LIB
  1788				 
  1789				:**********************************************************************
  1790				:                                                                     *
  1791				:       This program is the sole property and confidential            *
  1792				:       information of Tymshare, Inc., and may not be copied          *
  1793				:       in whole or in part or disclosed to any third party           *
  1794				:       without the prior written consent of Tymshare.                *
  1795				:                                                                     *
  1796				:**********************************************************************
  1797				
  1798					RA	0		:	FINISH.LIB
  1799				
  1800				:	this file should always be assembled LAST!
  1801				
  1802				:ALLOCATE FPANEL IF USER HAS NOT
  1803	000001			  IF	\FPANEL
  1804	000000			  ELSE
  1805					SEG	A.DATA
  1806				FPANEL  HS      1
  1807				  EI
  1808	000000			  IF	\FRISIS
  1809	000001			  ELSE
  1810	0001E4				SEG	0
  1811	0001E4			FRISIS	HS	$A (MAXPRT+15)/16
  1812				  EI
  1813	000000			  IF	\TOISIS
  1814	000001			  ELSE
  1815	0001F0				SEG	0
  1816	0001F0			TOISIS	HS	$A (MAXPRT+15)/16
  1817				  EI
  1818				
  1819	000001			  IF	1-(\PATCH0)
  1820	0001FC				SEG	0
  1821	0001FC			PATCH0	WS	20	:SEGMENT ZERO PATCH AREA
  1822				  EI
  1823	000001			  IF	1-(\PATCH1)
  1824	010DC8				SEG	1
  1825	010DC8			PATCH1	WS	20	:SEGMENT ONE PATCH AREA
  1826				  EI
  1827	000001			  IF	1-(\PATCH2)
  1828	021100				SEG	2
  1829	021100			PATCH2	WS	20	:SEGMENT TWO PATCH AREA
  1830				  EI
  1831				
  1832	000000				IF	\APROT0
  1833	000001				ELSE
  1834	000006			APROT0	EQ	6	:EXECUTION PROTECTED
  1835					REMARK	%DEFAULT AREA PROTECTIONS ASSUMED.%
  1836					EI
  1837	000000				IF	\APROT1
  1838	000001				ELSE
  1839	000005			APROT1	EQ	5	:WRITE PROTECTED
Page  13-2	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  1840					EI
  1841	000002			Q1	EQ	2
  1842	00000C				RE	0C
  1843	000000				IF	\APROT|Q1|
  1844	000001				ELSE
  1845	000006			APROT|Q1| EQ	6	:EXECUTION PROTECTED
  1846					EI
  1847	000003			Q1	EQ	Q1+1
  1848	000000				ER
  1849				
  1850				:	NAD ALLOWS MORE THAN 10000X TO BE PLACED IN ONE "SEG".
  1851				:	WE MUST THEREFORE GO INTO EACH SEG AND IF > 10000X ORG BACK TO
  1852				:	10000X AND THEN ENTER THE NEXT SEG TO DEPOSIT THE REMAINDER.
  1853				:	THIS, OF COURSE, ASSUMES THAT THE NEXT SEG IS EMPTY.
  1854				:	A CHECK IS MADE TO INSURE THIS.
  1855				
  1856	000000			Q1	EQ		0
  1857	00000E				RE		0E		:FOR Q1 = 0 TO 0E
  1858	00027C				  SEG		Q1
  1859	010000			Q3	  EQ		10000*(Q1+1)	:  Q3 = UPPER BOUND FOR THIS SEGMENT
  1860	FF027C				  IF		.-Q3		:  IF THIS SEGMENT OVERFLOWED
  1861				Q2	    EQ		.-Q3		:    Q2 = LENGTH OF OVERFLOW
  1862					    ORG		Q3		:    ORG TO MAXIMUM
  1863					    IF		0E-(Q1+1)	:    IF THE NEXT SEG IS NOT E
  1864					      SEG	Q1+1		:      GO INTO NEXT SEG
  1865					      IF	(.-Q3)		:      IF SEG ALREADY IN USE
  1866					        SEG	Q1		:        RETURN TO PREVIOUS SEG
  1867					      ELSE			:      ELSE
  1868				APROT|Q1+1|	EQ	APROT|Q1|	:        COPY PROTECTION
  1869					      EI			:      ENDIF
  1870					    EI				:    ENDIF
  1871					    ORG		.+Q2		:    ADD OVERFLOW TO THE CURRENT SEG
  1872					  EI				:  ENDIF
  1873	000001			Q1	  EQ		Q1+1		:NEXT Q1
  1874	000000				ER
  1875				
  1876				:GENERATE DIAGNOSTICS
  1877	000000			Q	EQ	0
  1878					NOLIST
  1879					RE	0F
  1880				SEG|Q|	EQ	SEG|Q|&07FFFFFFF
  1881					IF	SEG|Q|%(Q*10000)
  1882					REMARK	%"SEG
  1883					NUMBER	Q
  1884					REMARK	" has been redefined
  1885					EI
  1886				:	DEFINE SIZES
  1887					SEG	Q
  1888				S|Q|SIZE EQ	.-SEG|Q|
  1889				Q	EQ	Q+1
  1890					ER
  1891					LIST
  1892				
Page  13-3	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  1893				:	BITCH IF ANY SEGMENTS OVERFLOW
  1894					NOLIST
  1895				Q	EQ	0;	RE	0F;	IF	S|Q|SIZE-10000;	REMARK	%Segment 
  1896					NUMBER	Q;	REMARK	- overflow, exceeded by 
  1897					NUMBER	($0S|Q|SIZE-10000)$A;	REMARK	d bytes%;	EI
  1898				Q	EQ	Q+1;	ER
  1899					LIST
  1900				
  1901	000000			      IF        \XMEMRY
  1902	000001			      ELSE
  1903	000000			XMEMRY  EQ      0
  1904				      EI
  1905				
  1906				:	SET UP CTA TABLE
  1907	000000			  IF	SESIZE
  1908					REMARK	%SEGMENT E IS RESERVED FOR CTA. REMOVE OTHER ALLOCATIONS.%%
  1909	000001			  ELSE
  1910	0E0000				SEG	0E
  1911	000000			      IF        XMEMRY
  1912				CTA     WC      CNTRL+$01000    :Control flags
  1913	000001			      ELSE
  1914	0E0000	0000 003E 	CTA	WC	CNTRL	:CONTROL FLAGS
  1915				      EI
  1916				
  1917	0E0004	0000 0198 		WC	CTASIZ	:SIZE OF CTA AREA
  1918				AREAS
  1919	000000			Q	EQ	0
  1920	00000E				RE	0E
  1921	0E0008	0000 027C 		WC	S|Q|SIZE	:AREA SIZE
  1922	000001			Q	EQ	Q+1
  1923	000000				ER
  1924				
  1925	0E0040	000E 			HC	0E	:NUMBER OF PROTECTION BYTES
  1926	000000			Q	EQ	0
  1927	00000E				RE	0E
  1928	0E0042	06			BC	APROT|Q|
  1929	000001			Q	EQ	Q+1
  1930	000000				ER
  1931				
  1932	0E0050	0001 02B6 		WC	ENTRY	:ENTRY POINT ADDRESS
  1933	000001			    IF	\DSTART
  1934	0E0054	0001 0424 		WC	DSTART	:DDT START ADDRESS
  1935	000000			    ELSE
  1936					WC	0	:NO USER DDT CODE
  1937				    EI
  1938				
  1939	0E0058	0000 01BA 		WC	FPANEL	:ADDRESS OF FRONT PANEL DISPLAY CELL
  1940				
  1941	0E005C	000E 00D8 		WC	HOSTS	:HOST TABLE ADDRESS
  1942	0E0060	000E 00DA 		WC	PORTS	:PORT TABLE ADDRESS
  1943	0E0064	000E 00DC 		WC	PTABLE	:PERMUTER TABLE ADDRESS
  1944	0E0068	0002 0900 		WC	IRING	:INPUT RING ADDRESS
  1945	0E006C	0002 0100 		WC	ORING	:OUTPUT RING ADDRESS
Page  13-4	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  1946	0E0070	0000 01E4 		WC	FRISIS	:ADDRESS TO INPUT BACKPRESSURE BIT ARRAY
  1947	0E0074	0000 01F0 		WC	TOISIS	:ADDRESS OF OUTPUT BACKPRESSURE ARRAY
  1948	000000			  IF	\PCTTBL
  1949					WC	PCTTBL	:PROJECT CODE TERMINATION TABLE
  1950	000001			  ELSE
  1951	0E0078	0000 0000 		WC	0	:NULL TABLE
  1952				  EI
  1953	0E007C			COREST	WS	1	:ABSOLUTE CORE ADDRESS OF START OF SLOT
  1954	0E0080	0001 			HC	MAXHST	:MAXIMUM HOSTS FOR SLOT
  1955	0E0082	005D 			HC	MAXPRT	:HIGHEST PORT NUMBER FOR SLOT
  1956	0E0084	07FC 			HC	IRSIZE	:INPUT RING SIZE
  1957	0E0086	07FC 			HC	ORSIZE	:OUTPUT RING SIZE
  1958	0E0088			SLOTNO	HS	1	:SLOT NUMBER (SUPPLIED BY ISIS)
  1959	0E008A			VERREV	HS	0
  1960	000001			  IF	\VERSION
  1961	0E008A	02			BC	VERSION	:VERSION NUMBER
  1962	000000			  ELSE
  1963					BC	0
  1964				  EI
  1965	000001			  IF	\REVLEV
  1966	0E008B	01 			BC	REVLEV	:REVISION LEVEL
  1967	000000			  ELSE
  1968					BC	0
  1969				  EI
  1970				
  1971	000000			    IF	\QSTART
  1972					WC	QSTART	:DDT QUERRY START ADDRESS
  1973	000001			    ELSE
  1974	0E008C	0000 0000 		WC	0	:NO USER CODE
  1975				    EI
  1976	0E0090	0198 		        HC      EMMAC0-CTA
  1977	000000			    IF  \NMACSS
  1978				        HC      NMACSS          :Number of MAC Register Sets
  1979	000001			    ELSE
  1980	0E0092	0000 		        HC      0               :No extended MAC sets
  1981				    EI
  1982	0E0094	0000 		        HC      0               :Segments to be saved
  1983				
  1984	000001			    IF \PRODID
  1985	000000			    ELSE
  1986				      IF  \HID0
  1987				PRODID  EQ      HID0            :Define PRODID as alias
  1988				      ELSE
  1989				      EI  :HID0
  1990				    EI :PRODID
  1991				
  1992	000001			    IF \PRODID
  1993	FFFF92			      IF PRODID-$a255
  1994				        REMARK  %PRODID is too large%
  1995				        QUIT    1
  1996				      EI
  1997	000061			      IF PRODID-$a48
  1998	000000			      ELSE
Page  13-5	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  1999				        REMARK  %PRODID is too small%
  2000				        QUIT    1
  2001				      EI
  2002	000000			    ELSE
  2003				        REMARK  %PRODID - Slot Product id must be defined%
  2004				        QUIT    1
  2005				    EI :PRODID
  2006	0E0096	0091 		        HC      PRODID          :slot Product id
  2007				
  2008	0E0098				WS	10	:RESERVED FOR FUTURE EXPANSION
  2009				
  2010	0E00D8			HOSTS	HS	0	:BEGINNING OF HOST TABLE
  2011	000000			Q	EQ	0
  2012	000001				RE	MAXHST
  2013	000001			    IF	\HOST|Q|
  2014	0E00D8	0018 			HC	HOST|Q|	:HOST NUMBER
  2015	000000			    ELSE
  2016					HC	0	:NO ASSEMBLED IN HOST NUMBER
  2017				    EI
  2018	000001			Q	EQ	Q+1
  2019	000000				ER
  2020				
  2021	0E00DA			PORTS	HS	0	:BEGINNING OF PORT TABLE
  2022	000000			Q	EQ	0
  2023	000001				RE	MAXHST
  2024	000001			    IF	\HPRT|Q|
  2025	0E00DA	005D 			HC	HPRT|Q|
  2026	000000			    ELSE
  2027					HC	0	:NO ASSEMBLED IN NUMBER OF PORTS
  2028				    EI
  2029	000001			Q	EQ	Q+1
  2030	000000				ER
  2031				
  2032	0E00DC			PTABLE	HS	MAXPRT+1	:PERMUTER TABLE
  2033				
  2034	0E0198			EMMAC0  WS      0               :Extended Memory MAC Register sets
  2035	000000			    IF XMEMRY
  2036				      IF \NMACSS
  2037				        EXPMAC
  2038				        REMARK  %Using Extended Memory Option%
  2039				        NUMBER  $a NMACSS
  2040				        REMARK  MAC Register sets allocated%
  2041				        NUMBER  $a EMEMR3
  2042				        REMARK k allocated on non-zero meg
  2043				      ELSE
  2044				        REMARK  %NMACSS must be specified with extended memory%
  2045				        QUIT    1
  2046				      EI        :NMACSS
  2047				    EI          :XMEMRY
  2048				
  2049	000198			CTASIZ	EQ	.-CTA	:CTA AREA SIZE
  2050	000198			SESIZE	EQ	.-CTA	:SEG E SIZE
  2051				  EI
Page  13-6	ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
(KOPFJ)EBUS02.R01	  Control Table Allocation and Diagnostics - FINISH.LIB

  2052				
  2053				:	TELL MEMORY REQUIREMENTS
  2054	000000			Q	EQ	0
  2055	000000			QQ	EQ	0
  2056	000000			QQQ	EQ	0
  2057	00000F				RE	0F
  2058	00027C				IF	S|Q|SIZE
  2059					REMARK	%SEGMENT 
  2060					NUMBER	Q
  2061					REMARK	-length 
  2062	00027C			QQQ	EQ	S|Q|SIZE
  2063					NUMBER	$A QQQ
  2064					REMARK	d, requires 
  2065	000300			Q3	EQ	(S|Q|SIZE+0FF)&(@0FF)
  2066					NUMBER	Q3
  2067	000300			QQ	EQ	QQ+Q3
  2068					REMARK	x bytes of core.
  2069					EI
  2070	000001			Q	EQ	Q+1
  2071	000000				ER
  2072				
  2073				:	GIVE FINAL SIZES
  2074					REMARK	%       
  2075					NUMBER	(QQ+$03FF)/400$A	:FORCE TO BASE 10 FOR OUTPUT
  2076					REMARK	d K-bytes of core
  2077				
  2078					UN		:spew out all undefined symbols

ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

A.BDAT	   298%	   310	   312%
A.BUFF	   298%	   320	   322%
A.CODE	   298%	   305	   307%	   596	   923	  1104	  1184	  1512
A.DATA	   298%	   300	   302%	   909	  1179	  1481
A.RING	   298%	   315	   317%	   564
A0	  1470#	  1738
A1	  1471#	  1744
A2	  1472#	  1750
A3	  1473#	  1756
A4	  1474#	  1762
A5	  1475#	  1768
A6	  1476#	  1774
A7	  1477#	  1780
ALARM.	   332%	   369%
APROT0	  1832	  1834#	  1928
APROT1	  1837	  1839#	  1930
APROT2	  1843	  1845#	  1930
APROT3	  1848	  1848#	  1874	  1930
APROT4	  1848	  1848#	  1874#	  1874	  1930
APROT5	  1848	  1848#	  1874#	  1874	  1930
APROT6	  1848	  1848#	  1874#	  1930
APROT7	  1848	  1848#	  1930
APROT8	  1848	  1848#	  1930
APROT9	  1848	  1848#	  1930
APROTA	  1848	  1848#	  1930
APROTB	  1848	  1848#	  1930
APROTC	  1848	  1848#	  1930
APROTD	  1848	  1848#	  1930
AREAS	  1918#
AT	  1646	  1646#	  1647	  1647#	  1648	  1648#	  1649	  1649#	  1650	  1650#	  1651	  1651#	  1652	  1652#
	  1653	  1653#	  1655	  1655#	  1662	  1662#	  1668	  1668#	  1679	  1679#	  1682	  1682#	  1685	  1685#
	  1689	  1689#	  1693	  1693#	  1696	  1696#	  1697	  1697#	  1711	  1711#	  1712	  1712#	  1713	  1713#
	  1726	  1726#	  1729	  1729#	  1731	  1731#	  1734	  1734#	  1737	  1737#	  1740	  1740#	  1743	  1743#
	  1746	  1746#	  1749	  1749#	  1752	  1752#	  1755	  1755#	  1758	  1758#	  1761	  1761#	  1764	  1764#
	  1767	  1767#	  1770	  1770#	  1773	  1773#	  1776	  1776#	  1779	  1779#
B.	  1622#	  1730
BADSTR	  1182#	  1183	  1228
BANNER	  1645	  1659	  1702#
BDISC	   335%	   400%
BITCH	  1232#	  1233	  1235	  1238
BITS	  1486#	  1570	  1585	  1587
BKSPAC	  1208#	  1403
C.ADDR	  1188#	  1189	  1212
C.NEXT	  1187#	  1188	  1224
C.STR	  1189#	  1219	  1221
CASYN.	   334%	   387%
CEI	   560#	   608	   655	   710	   723	   743
CFGND.	   328%	   344%
CFROM	   831%	   902%	   961	   992
CHFLAG	   920#	  1052	  1056	  1061
CMBRD.	   334%	   393%
CMDLST	  1196#	  1218
CNTRL	    62%	   245%	  1914
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

COD	  1460#	  1724
CODE	  1641	  1659#
CONIP	  1439#	  1562
COREST	   247%	  1953%
CPOINT	   831%	   901%	   959	   982
CPRT.	   334%	   388%
CRASH	   831%	   970%	  1032	  1603	  1606	  1611
CRASH0	   918	   976#
CRASH1	   986	   991#
CRASHC	   831%	   900%	   956	   991	   997	  1047
CRAT	   831%	   912%	   913	   955	   956	   958	   959	   961	   981	   982	   989	   991	   992	   997
	   999	  1041	  1047	  1077	  1078	  1079	  1080	  1084
CRATYP	  1495#	  1610
CRLF	  1703#	  1718
CRREG	   831%	   913%
CRSHCD	   924#	   945
CRSHCT	   831%	   899%	   999	  1041
CRSTOP	   831%	   881	   883%	  1001	  1020
CRTENT	   897#	   907
CRTIME	   832%	   905%
CRTLEN	   906#	   912	  1075	  1078	  1079	  1080	  1081
CRTSIZ	   904#	  1084
CRXREG	   903#	   913	   955	   958	   981	   989
CSIO.	   334%	   392%
CSUPF.	   332%	   365%
CSUPR.	   332%	   366%
CSYNI.	   331%	   384%
CSYNO.	   331%	   385%
CTA	  1914#	  1976	  2049	  2050
CTASIZ	  1917	  2049#
CTIME	   832%	   911%	   953	   979	  1083
CURPSW	  1054	  1058#
D.	  1624#	  1684	  1699
D0	  1462#	  1735
D1	  1463#	  1741
D2	  1464#	  1747
D3	  1465#	  1753
D4	  1466#	  1759
D5	  1467#	  1765
D6	  1468#	  1771
D7	  1469#	  1777
DB.STA	  1098	  1099#	  1102
DBGOF.	   328%	   346%
DBGON.	   328%	   345%
DELIM	  1374#	  1377
DIGIT	  1357	  1364#
DISCO.	   378#
DISMIS	   328%	   337%	   732	   751	  1597
DIVIDE	  1332	  1344#
DLEN	  1371	  1383#
DLIST	  1374	  1381#	  1383
DNEXTK	  1217#
DOIT	  1212#	  1222
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

DOT	  1665	  1671	  1704#
DS.CUC	  1108%	  1274	  1284	  1352	  1408%
DS.DEL	  1108%	  1272	  1285	  1323	  1333	  1371%
DS.DIG	  1325	  1336	  1352#
DS.DLM	  1107%	  1180%	  1372
DS.ELL	  1107%	  1177%	  1196	  1196%	  1197	  1197%	  1198	  1198%	  1199	  1199%	  1639	  1639%	  1640	  1640%
	  1641	  1641%	  1642	  1642%	  1643	  1643%	  1707	  1707%	  1709	  1709%
DS.ERR	  1107%	  1230%
DS.EXI	  1108%	  1198	  1199	  1246%
DS.GCH	  1108%	  1232	  1267	  1281	  1318	  1330	  1391%	  1392
DS.ILL	  1107%	  1227%	  1288	  1326	  1328	  1337	  1339
DS.NUM	  1108%	  1318%	  1319	  1321	  1324	  1331
DS.QUI	  1108%	  1196	  1197	  1251%
DS.TOK	  1108%	  1217	  1259%
DSTAR1	  1219#	  1225
DSTAR2	  1220	  1224#
DSTART	  1107%	  1216%	  1239	  1252	  1276	  1395	  1657	  1660	  1674	  1680	  1690	  1700	  1719	  1727
	  1782	  1933	  1934
DUMP	  1709	  1711#
DUMP1	  1725	  1729#
EBDUMP	    76%	  1427%	  1428	  1505	  1540	  1654	  1708
ELIR	   554%	   649%
ELIR2	   651	   653#
ELODR	   555%	   783%
ELODR2	   787	   789#
ELOR	   555%	   692	   795%	  1051
ELOR2	   797	   799#
EMMAC0	  1976	  2034#
ENTRY	   246%	   831%	   996%	  1932
ENTRY1	   962	   993	   998#
ENTRY2	   949	  1016	  1019#
EVERN	  1501#	  1502	  1669	  1672
EXCRSH	   832%	   891	   893%	  1006	  1022
FAIL	   937#	   957	  1030
FAIL0	   917	   945#
FAIL1	   947	   950#
FASTC	   243%	   252%	  1530	  1534	  1573	  1578
FASTD	   328%	   338%
FGNDFL	   915#	   948	  1017	  1036
FLUSH	   554%	   646%
FMBIN.	   334%	   394%
FMBOT.	   334%	   395%
FPANEL	   247%	  1427%	  1482%	  1596	  1803	  1939
FPRT.	   334%	   389%
FREEZ.	   329%	   348%
FREZS.	   332%	   367%
FRISIS	   247%	  1808	  1811%	  1946
FSYNO.	   331%	   386%
GETCH	   554%	   620%
GETH	   554%	   629%
GETW	   554%	   638%
GMT	   243%	   254%	   952	   978
H.	  1626#	  1664	  1667	  1670	  1673	  1717	  1730	  1733	  1736	  1739	  1742	  1745	  1748	  1751
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

	  1754	  1757	  1760	  1763	  1766	  1769	  1772	  1775	  1778	  1781
HALT.	   333%	   375%
HELP	  1639	  1640	  1645#
HID0	  1986
HOST0	    80#	  2013	  2014
HOSTS	   247%	  1941	  2010%
HOSTX	   243%	   259%
HPARAM	  1484#	  1594	  1686
HPRT0	   411#	  2024	  2025
HSTAT	  1485#	  1589	  1677	  1683	  1698
IN	  1175#	  1391
IO	   331%	   381%	  1562
IOQRY.	   331%	   383%
IOWADR	  1500#	  1501	  1517	  1536
IOWSIZ	   556%	   583%	   585	   587
IPCRSH	  1600	  1606#
IPICRC	  1436#	  1607
IRING	   246%	   552%	   576%	   608	   609	   612	   614	   620	   629	   638	   655	  1028	  1524	  1944
IRSIZE	    56%	    66%	    67	   245%	   404	   552%	   579	   611	   612	   614	   620	   623	   629	   632
	   638	   641	   652	   654	  1528	  1956
ISFGND	  1064	  1069#
K.IN	   335%	   397%
K.OUT	   335%	   398%
KIO	   335%	   399%	  1246	  1251	  1664	  1667	  1670	  1673	  1684	  1699	  1717	  1730	  1733	  1736
	  1739	  1742	  1745	  1748	  1751	  1754	  1757	  1760	  1763	  1766	  1769	  1772	  1775	  1778
	  1781
LCT	   272#
LCX	   246%	   264%
LENGTH	   276#
LMAC.	   364#
LOOK	   554%	   605	   606%
LP0LST	   275#
MAIN	  1577#	  1602
MAIN1	  1579	  1583#
MAIN2	  1593	  1596#
MAXHST	    70#	   414	  1954	  2012	  2023
MAXMSG	   274#
MAXP0	   273#
MAXPRT	   409	   410#	   411	  1811	  1816	  1955	  2032
NCRSAV	    77%	   832%	   886	   912	  1075
NFMI	   559#	   609	   709	   720	   740	   783	   801
NMACSS	  1977	  2036
NODEX	   243%	   260%
NPORT	    79#	   410
NRATE	   243%	   251%
NUMBER	  1330#	  1342	  1346
O.	  1625#
OBS	   553%	   700%
OBS1	   699#	   703
OCM	   553%	   665%
OCS	   553%	   678%
OCS1	   672	   687#	   691
ORING	   246%	   552%	   570%	   709	   710	   720	   723	   740	   743	   753	   754	   760	   768	   776
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

	   783	   791	   801	  1027	  1518	  1945
ORSIZE	    56%	    67%	   245%	   406	   552%	   573	   713	   715	   721	   724	   728	   741	   744	   747
	   753	   754	   760	   763	   768	   771	   776	   779	   784	   788	   791	   798	   800	  1522
	  1957
OUT	  1174#	  1216	  1227	  1228	  1230	  1403	  1645	  1646	  1647	  1648	  1649	  1650	  1651	  1652
	  1653	  1655	  1659	  1662	  1665	  1668	  1671	  1679	  1682	  1685	  1689	  1693	  1696	  1697
	  1711	  1712	  1713	  1718	  1726	  1729	  1731	  1734	  1737	  1740	  1743	  1746	  1749	  1752
	  1755	  1758	  1761	  1764	  1767	  1770	  1773	  1776	  1779
PATCH0	  1819	  1821#
PATCH1	  1823	  1825#
PATCH2	  1827	  1829#
PBUFSZ	    56%	    68%	   581
PC	  1461#	  1732
PCTTBL	  1948
PERBUF	   556%	   581%
PORTS	   247%	  1942	  2021%
PRINTN	  1627
PRINTP	  1627
PRINTS	  1627
PRODID	    56%	    61%	   832%	  1049	  1984	  1992	  1993	  1997	  2006
PROMPT	  1207#	  1216
PSHTBS	   951	   977	  1075#
PSWSAV	   919#	  1057	  1067	  1071
PTABLE	  1943	  2032#
PUSHIT	  1077#	  1082
PUTCH	   555%	   686	   689	   701	   760%	  1042	  1044	  1046	  1048	  1050
PUTH	   555%	   670	   683	   768%
PUTW	   555%	   776%	  1040
Q	   423#	   426	   429	   430	   431	   433	   433#	   434	   434#	   438#	   441	   447	   447#	   448
	   448#	  1197#	  1197	  1198#	  1198	  1199#	  1199	  1442#	  1479	  1639#	  1639	  1640#	  1640	  1641#
	  1641	  1642#	  1642	  1643#	  1643	  1707#	  1707	  1709#	  1709	  1877#	  1880	  1881	  1887	  1888
	  1889	  1889#	  1890	  1890#	  1895#	  1896	  1898	  1898#	  1899	  1899#	  1919#	  1921	  1922	  1922#
	  1923	  1923#	  1926#	  1928	  1929	  1929#	  1930	  1930#	  2011#	  2013	  2014	  2018	  2018#	  2022#
	  2024	  2025	  2029	  2029#	  2054#	  2058	  2060	  2062	  2065	  2070	  2070#	  2071	  2071#
Q1	  1841#	  1843	  1845	  1847	  1847#	  1848	  1848#	  1856#	  1858	  1859	  1863	  1868	  1873	  1873#
	  1874	  1874#
Q2	  1874#	  1874
Q3	  1859#	  1860	  1865	  1874#	  1874	  2065#	  2066	  2067	  2071#	  2071
QQ	   440#	   450	  2055#	  2067	  2067#	  2071	  2071#	  2075
QQQ	  2056#	  2062#	  2063	  2071#	  2071
QSTART	  1971
R0	   244%	   279%	   620	   629	   638	   646	   665	   666	   667	   669	   678	   679	   680	   682
	   685	   688	   700	   708	   710	   711	   713	   714	   730	   749	   760	   768	   776	   785
	   786	   788	   789	   791	   939	   942	   945	   946	   948	   950	   954	   956	   970	   973
	   976	   980	   981	   983	   987	   991	   996	   997	  1013	  1015	  1017	  1026	  1027	  1028
	  1030	  1035	  1036	  1039	  1041	  1043	  1045	  1047	  1049	  1060	  1061	  1063	  1065	  1067
	  1069	  1071	  1212	  1213	  1237	  1261	  1263	  1264	  1275	  1277	  1287	  1292	  1307	  1309
	  1327	  1329	  1334	  1338	  1341	  1353	  1362	  1364	  1372	  1374	  1393	  1394	  1396	  1398
	  1400	  1408	  1410	  1412	  1518	  1521	  1522	  1523	  1524	  1527	  1528	  1529	  1530	  1533
	  1534	  1535	  1536	  1539	  1541	  1549	  1551	  1554	  1556	  1557	  1558	  1559	  1560	  1569
	  1570	  1571	  1572	  1585	  1586	  1587	  1588	  1590	  1594	  1596	  1609	  1610	  1612	  1663
	  1666	  1669	  1672	  1677	  1683	  1686	  1687	  1698	  1714	  1724	  1732	  1735	  1738	  1741
	  1744	  1747	  1750	  1753	  1756	  1759	  1762	  1765	  1768	  1771	  1774	  1777	  1780
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

R1	   244%	   280%	   612	   615	   722	   723	   724	   725	   728	   729	   730	   753	   783	   784
	   786	   791	   945	   952	   953	   960	   961	   978	   979	   984	   989	   992	   998	   999
	  1052	  1053	  1055	  1056	  1075	  1077	  1078	  1079	  1080	  1081	  1083	  1084	  1212	  1218
	  1219	  1221	  1224	  1232	  1267	  1274	  1281	  1284	  1318	  1330	  1352	  1353	  1354	  1356
	  1358	  1360	  1371	  1374	  1376	  1397	  1399	  1401	  1404	  1409	  1411	  1413	  1517	  1521
	  1523	  1527	  1529	  1533	  1535	  1536	  1539	  1549	  1550	  1554	  1583	  1586	  1589	  1590
	  1591	  1592	  1598	  1599	  1601	  1604	  1607	  1664	  1667	  1670	  1673	  1684	  1699	  1717
	  1730	  1733	  1736	  1739	  1742	  1745	  1748	  1751	  1754	  1757	  1760	  1763	  1766	  1769
	  1772	  1775	  1778	  1781
R10	   244%	   289%	   982	   985	   987	   988	  1032	  1603	  1606	  1611
R11	   244%	   290%
R12	   244%	   291%	   957
R13	   244%	   292%	   959
R14	   244%	   293%	   608	   609	   611	   612	   613	   614	   620	   621	   623	   629	   630	   632
	   638	   639	   641	   646	   649	   650	   652	   654	   655	   958
R15	   244%	   294%	   709	   711	   715	   720	   721	   725	   740	   741	   745	   753	   754	   755
	   760	   761	   763	   768	   769	   771	   776	   777	   779	   785	   795	   796	   798	   800
	   801
R2	   244%	   281%	   614	   669	   671	   682	   684	   685	   690	   702	   754	   940	   941	   943
	   951	   955	   971	   972	   974	   977	   985	   988	   989	  1068	  1072	  1076	  1085	  1221
	  1272	  1285	  1298	  1323	  1325	  1333	  1336	  1340	  1344	  1345	  1355	  1359	  1361	  1365
	  1375	  1378	  1544	  1550	  1561	  1577	  1581	  1582	  1588	  1723	  1724	  1732	  1735	  1738
	  1741	  1744	  1747	  1750	  1753	  1756	  1759	  1762	  1765	  1768	  1771	  1774	  1777	  1780
R3	   244%	   282%	   665	   671	   678	   684	   687	   688	   699	   700	   742	   743	   744	   745
	   747	   748	   749	  1219	  1262	  1263	  1264	  1277	  1278	  1292	  1293	  1297	  1308	  1309
	  1329	  1334	  1341	  1573	  1578	  1580
R4	   244%	   283%	   610	   616	   622	   624	   631	   633	   640	   642	   656	   668	   670	   681
	   683	   686	   689	   692	   701	   716	   727	   731	   756	   762	   764	   770	   772	   778
	   780	   790	   802	  1038	  1040	  1042	  1044	  1046	  1048	  1050	  1051	  1217	  1259	  1279
	  1289	  1290	  1296	  1299	  1303	  1305	  1327	  1338	  1340	  1345
R4SAV	  1181#	  1259	  1296
R5	   244%	   284%	   693	   704	  1335
R6	   244%	   285%	  1077	  1078	  1079	  1080
R7	   244%	   286%
R8	   244%	   287%
R9	   244%	   288%
RATE	   243%	   250%
RBMAC.	   330%	   358%
RBPSD.	   329%	   354%	  1062	  1066
RBREG.	   329%	   353%
RDDTP.	   329%	   352%
RDDTR.	   329%	   351%
RDMAC.	   330%	   357%
RDUMP	  1707	  1723#
REGDMP	  1502#	  1536	  1723
REVLEV	    56%	    59%	  1666	  1965	  1966
RFMAC.	   330%	   359%
RFPSD.	   330%	   356%	  1014	  1070
RFREG.	   330%	   355%
RGSTOR	   914#	   939	   940	   942	   943	   950	   954	   970	   971	   973	   974	   976	   980
RING	   561#	   612	   614	   620	   629	   638	   753	   754	   760	   768	   776	   791
ROOM	   555%	   668	   681	   720%
ROOM1	   722#	   733
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

ROOM2	   726	   729#
RSCLK.	   332%	   370%
RSTRT.	   328%	   343%	  1031
S.	  1621#
S0SIZE	  1888#	  1896	  1921	  2058	  2062	  2065
S1SIZE	  1890#	  1899	  1923	  2071
S2SIZE	  1890#	  1899	  1923	  2071
S3ADDR	  1509#	  1541	  1714
S3SIZE	  1890#	  1899	  1923	  2071
S4SIZE	  1890#	  1899	  1923	  2071
S5SIZE	  1890#	  1899	  1923	  2071
S6SIZE	  1890#	  1899	  1923	  2071
S7SIZE	  1890#	  1899	  1923	  2071
S8SIZE	  1890#	  1899	  1923	  2071
S9SIZE	  1890#	  1899	  1923	  2071
SASIZE	  1890#	  1899	  1923	  2071
SAVPSW	   941	   972	  1060#
SBSIZE	  1890#	  1899	  1923	  2071
SCSIZE	  1890#	  1899	  1923	  2071
SDISC	   335%	   401%
SDSIZE	  1890#	  1899	  1923	  2071
SEG0	   426	   430%	   431%	   441	  1880	  1880%	  1881	  1888
SEG1	   434	   434%	   448	  1890	  1890%
SEG2	   434	   434%	   448	  1890	  1890%
SEG3	   434	   434%	   448	  1890	  1890%
SEG4	   434	   434%	   448	  1890	  1890%
SEG5	   434	   434%	   448	  1890	  1890%
SEG6	   434	   434%	   448	  1890	  1890%
SEG7	   434	   434%	   448	  1890	  1890%
SEG8	   434	   434%	   448	  1890	  1890%
SEG9	   434	   434%	   448	  1890	  1890%
SEGA	   434	   434%	   448	  1890	  1890%
SEGB	   434	   434%	   448	  1890	  1890%
SEGC	   434	   434%	   448	  1890	  1890%
SEGD	   434	   434%	   448	  1890	  1890%
SEGE	   434	   434%	   448	  1890	  1890%
SESIZE	  1890#	  1899	  1907	  2050#	  2071
SET1P.	   330%	   360%
SETBE.	   330%	   362%
SETFE.	   331%	   363%
SETP.	   330%	   361%
SFREZ.	   333%	   374%
SHALT.	   333%	   376%
SHARE	   335%	   396%
SLCNT	   271#
SLEV	   154#	   155
SLOR	   555%	   740%
SLOR1	   742#	   752
SLOR2	   746	   748#
SLOR3	   750	   753#
SLOTNO	   243%	  1958%
SLOWC	   243%	   253%	  1534	  1591
SPACE	   555%	   708%	  1038
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

SPACE1	   712	   714#
SREV	   151#	   152
SSCLK.	   332%	   371%
SSRCRA	  1493#	  1559	  1601
SSRCRC	  1434#	  1604
SSRTIM	  1494#	  1560
STAREA	  1490#	  1561
START	   831%	   919	  1058	  1427%	  1517%
STATE	  1643	  1677#
STATE1	  1678	  1682#
STATE2	  1688	  1692#
STATE3	  1692	  1696#
STATE4	  1694	  1697#
STATIM	  1492#	  1558
STCRA	  1491#	  1557	  1598
STOKEN	  1183#	  1262	  1297	  1298
STSEG2	   556%	   566%	   583	  1500
SUDIA.	   332%	   372%
SVCCRA	  1566	  1610#
SVCCRC	  1435#	  1612
SVSPY.	   377#
SYNC	  1483#	  1551	  1583	  1584
SYS	   328%	   340%	  1014	  1031	  1062	  1066	  1070	  1519	  1525	  1531	  1537	  1542	  1552	  1715
TEMPER	   243%	   255%
TERR	  1205#	  1227
TFREZ.	   329%	   350%
THAW.	   329%	   349%
THAWS.	   332%	   368%
TIISC.	   331%	   390%
TIISI.	   334%	   391%
TO	  1646	  1646#	  1647	  1647#	  1648	  1648#	  1649	  1649#	  1650	  1650#	  1651	  1651#	  1652	  1652#
	  1653	  1653#	  1655	  1655#	  1662	  1662#	  1668	  1668#	  1679	  1679#	  1682	  1682#	  1685	  1685#
	  1689	  1689#	  1693	  1693#	  1696	  1696#	  1697	  1697#	  1711	  1711#	  1712	  1712#	  1713	  1713#
	  1726	  1726#	  1729	  1729#	  1731	  1731#	  1734	  1734#	  1737	  1737#	  1740	  1740#	  1743	  1743#
	  1746	  1746#	  1749	  1749#	  1752	  1752#	  1755	  1755#	  1758	  1758#	  1761	  1761#	  1764	  1764#
	  1767	  1767#	  1770	  1770#	  1773	  1773#	  1776	  1776#	  1779	  1779#
TOISIS	   247%	  1813	  1816%	  1947
TOKEN0	  1261#	  1282	  1304
TOKEN1	  1267#	  1268	  1270	  1273
TOKEN2	  1281#	  1291	  1294	  1306	  1310
TOKEN3	  1286	  1296#
TOKEN4	  1283	  1303#
TRBOFF	   917#	   944
TRCOFF	   918#	   975
TSTDB.	   328%	   347%
TTERR	  1206#	  1230
UCORE.	   373#
V	  1642	  1662#
VERNO	   243%	   257%
VERREV	   247%	  1959%
VERSIO	    56%	    58%	  1663	  1960	  1961
VOLTS	   243%	   256%
WWVBT	   258#
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Symbol cross reference

XBITS	  1487#	  1572	  1577	  1582
XLATE	  1438#	  1519	  1525	  1531	  1537	  1542	  1552	  1715
XLCRSH	  1520	  1526	  1532	  1538	  1543	  1553	  1609#
XMEMRY	  1901	  1903#	  1911	  2035
Z.	  1623#	  1667	  1673	  1717	  1733	  1736	  1739	  1742	  1745	  1748	  1751	  1754	  1757	  1760
	  1763	  1766	  1769	  1772	  1775	  1778	  1781
.	   558	   583	   833	   897	  1015	  1063	  1105	  1196	  1197	  1198	  1199	  1383	  1432	  1442
	  1639	  1640	  1641	  1642	  1643	  1707	  1709	  1860	  1865	  1874	  1888	  1890	  2049	  2050
.CDUMP	  1453#	  1539
.FASTC	  1450#	  1533
.IRING	  1448#	  1527
.IRSIZ	  1449#	  1529
.MDUMP	  1454#	  1549
.MSIZE	  1455#	  1550
.ORING	  1446#	  1521
.ORSIZ	  1447#	  1523
.SIZE	  1456#	  1501
.SLOWC	  1451#	  1535
.SYNC	  1452#	  1554
ISIS 7.01 INTERFACE TO INTELLIGENT PERIPHERAL PROCESSOR--EBUS    NAD-1.1    18-jun-86 15:07
Macro/Opdef cross reference

DS.CMD	  1192#	  1196	  1197	  1198	  1199	  1639	  1640	  1641	  1642	  1643	  1707	  1709
PRINTN	  1628#	  1664	  1667	  1670	  1673	  1684	  1699	  1717	  1730	  1733	  1736	  1739	  1742	  1745
	  1748	  1751	  1754	  1757	  1760	  1763	  1766	  1769	  1772	  1775	  1778	  1781
PRINTP	  1631#	  1645	  1646	  1647	  1648	  1649	  1650	  1651	  1652	  1653	  1655	  1659	  1662	  1665
	  1668	  1671	  1679	  1682	  1685	  1689	  1693	  1696	  1697	  1711	  1712	  1713	  1718	  1726
	  1729	  1731	  1734	  1737	  1740	  1743	  1746	  1749	  1752	  1755	  1758	  1761	  1764	  1767
	  1770	  1773	  1776	  1779
PRINTS	  1634#	  1646	  1647	  1648	  1649	  1650	  1651	  1652	  1653	  1655	  1662	  1668	  1679	  1682
	  1685	  1689	  1693	  1696	  1697	  1711	  1712	  1713	  1726	  1729	  1731	  1734	  1737	  1740
	  1743	  1746	  1749	  1752	  1755	  1758	  1761	  1764	  1767	  1770	  1773	  1776	  1779    -@@s