.	<<	EBUSIM.IIN	>>

.SEC(|Input from ISIS|)

	This section deals with messages input from ISIS.  Most of
these will be transliterated, and forwarded to the host.

	Block-IO will be treated in a seperate section.


.BEGIN BLOX
	NOTE:###ISIS input is "throttled" by counter "IRRN";  this limits
ISIS input to no more than IRSIZE bytes per EXEC-loop (i.e., we do
no more than 1 input-ring's worth per go-roundie).
.END

	The code consists of:

.SKIP BEGIN VERBATIM
ISISIN()
{   while ( not HTDWN)		/* while the host is up... */
.TOPIC(|PUTIFC Routine|)
    {	PUTIFC();		/* tell host our current cursor */
	if ( not LOOK() )	/* if nothing there */
	    break;		/* ...then we quit */
	SETPORT(PORTNM);	/* set up port parameters */
.TOPIC(FDRGSZ Routine)
	FDRGSZ();		/* determine space in the ring */
	if ( IRRN > IRSIZE )
	    break;		/* do no more then 1 ring's worth */
	if ( PORTNO == 0 )


/*	Process port-0 messages		*/
	{   static char INISLN[] =	/* message-length table */
	/* ISIS	0  1  2  3  4  5  6  7  8  9 0A 0B 0C 0D 0E 0F 10 */
	{	0, 0, 2, 0, 0, 0, 6, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0 };

	    if ( INRGSP > $10 )
		ISMGER();	/* range-check */
	    if ( INRGSP < INISLN[INTYBT] )
		break;		/* no room for message */

	    switch (INTYBT)


	    case 2:		/* SUP Takeover */
	    case 13:		/* SUP lost */
		AUXX = -1;	/* cancel any AUX in progress */
		DAT1 = 5;
		DAT2 = 0;
.TOPIC(|SENDDAT Label|)
		goto SENDDAT;	/* tell PDP Msg5, P0 */


	    case 6:		/* Sup Time */
		DAT1 = $23;	/* Msg 23 */
		DAT2 = 0;	/* port 0 */
.TOPIC(|GETCH Routine|)
		GETCH();	/* skip pading */
.TOPIC(GETH Routine)
		(short) DAT3 = GETH(); /* high GMT */
.TOPIC(WRDAT Routine)
		WRDAT();	/* send that in */
		(short) DAT1 = GETH(); /* low GMT */
		(short) DAT3 = 0; /* padding */
.TOPIC(|SENDDAT Label|)
		goto SENDDAT;	/* pass it on */


	    case 9:		/* Aux Circuit Error */
		AUXX = -1;	/* cancel AUX circuit */
		DAT1 = $17;	/* Msg 17 */
.TOPIC(|GETCH Routine|)
		GETCH();	/* skip padding */
		DAT2 = GETH();	/* p = local key */
.TOPIC(GETH Routine)
		DAT3 = GETCH();	/* reason */
		if ( DAT3 = 0 )
		    DAT3 = 7;	/* 0 -> 7 */
.TOPIC(|SENDDAT Label|)
		goto SENDDAT;

	    case 11:		/* host unacceptable */
.TOPIC(|GETCH Routine|)
		GETCH();	/* just ignore it */
		GETH();
.TOPIC(GETH Routine)
		GETCH();
.TOPIC(|CLEANUP Label|)
		goto CLEANUP;


	    default:
		ISMGER();	/* CRASH for anything else */

	}   /* PORTNO == 0 */
	/*	We've now processed all Port-0 messages		*/


		/* for PORTNO != 0 */
	if ( INTYBT == 0 )


/*	special case for Needles	*/
	{   if ( not ROOM(4) )
		break;		/* quit this pass if there's not
				   enough room in the ISIS ring to
				   return a 4-byte message */
.TOPIC(SLOR Routine)
	    SLOR(PORTNM,$B9);	/* set transmit-limit.. */
	    PUTCH(30);		/* ...to 30 */
.TOPIC(ELOR Routine)
	    ELOR;
	    if (INRGSP < 80 )
		break;		/* quit this pass if there's not
				   enough room in the PDP's ring
				   to hold 20 words of messages */
.TOPIC(|GETCH Routine|)
	    GETCH();		/* ignor key */
.TOPIC(GETH Routine)
	    GETW();		/* ignor invoice */
	    GETH();		/* ignor Dest. Host */
	    NORNODE = GETH();	/* record Orig. node */
	    NORHOST = GETH();	/* record Orig. Host */
	    NORPORT = GETH();	/* record Orig. port */
	    GETW();		/* ignor Extra IN | XXX | TPC */
	    NCCT = GETCH();	/* record CCT */
	    NSIZ = GETCH();	/* record user-string size */
	    for ( { n=0; char *p=DAT5 } ; n < NSIZ ; n++ )
.TOPIC(|GETCH Routine|)
		*p++ = GETCH();	/* copy username into DAT5+ */
	    if ( PFULL )
.TOPIC(WAITISW Routine)
	    {	WAITISW();	/* no more ports... */
.TOPIC(SLOR Routine)
		SLOR(PORTNM,$BE); /* Zap w/reason */
		PUTCH(0);
.TOPIC(ELOR Routine)
		ELOR();
		FLUSH(NSIZ);	/* flush the needle */
.TOPIC(FLUSH Routine)
		continue;
	    }
	    DAT1 = 6;		/* new logon */
	    DAT2 = PORTNM;
	    (short) DAT3 = NORHOST;
.TOPIC(WAITDAT Routine)
	    WAITDAT();		/* send to host */
	    DAT1 = $82;		/* send succession of 2-byte
				   data-messages to host */
		/* record input baud-rate */
.TOPIC(|IBRATE - Input baud-rate|)
	    Rp->IBRATE = TIDBD[ $1F & ( DAT3=NCCT) ];
	    DAT4 = NORNODE >> 6;
	    WAITDAT();		/* CCT | O.Node(high) */
	    DAT3 = NORNODE;
	    DAT4 = NORPORT;
.TOPIC(WAITDAT Routine)
	    WAITDAT();		/* O.Node(low) | O.Port */
	    for ( { n=NSIZE; char *p=DAT5 } ; n > 0 ; n -= 2 )
	   {	if ( n == 1 )
		    DAT1 -= 1;	/* 1-byte last Msg if odd
				      number of chars */
		(short) DAT3 = (short) *p++;
		WRDAT();	/* copy username into PDP */
	    }
.TOPIC(|CLEANUP Label|)
	    goto CLEANUP;
	}	/* INTYBT == 0 */
	/*	We've now processed Needles	*/

	if ( INTYBT > $9D )


/*	Process Normal-port Control-Signal	*/
	{    switch ( INTYBT )
	    {

	*/	the following cases share common code	*/
	    case $9F:		/* Zapper */
		if ( Rp->P_FLAGS & PF_ACT != 0 )
.TOPIC(DPORT Routine)
		{   DPORT();	/* reduce port-count */
.TOPIC(RBTALL Routine)
		    RBTALL();	/* clear port-stuff */
		}
.TOPIC(|ISP Label|)
		goto ISP;	/* ISP contains common code */

	    case $A0:		/* Apply back-pressure */
		Rp->P_FLAGS != PF_OBP; /* set back-pressure on */
.TOPIC(|ISP Label|)
		goto ISP;

	    case $A1:		/* Release back-pressure */
		Rp->P_FLAGS &= not PF_OBP; /* set off */
.TOPIC(|ISP Label|)
		goto ISP;

	    case $A4:		/* black-ball */
		DAT3 = -1;	/* distinguishes between A4 and A5 */
.TOPIC(|ISP Label|)
		goto ISP;

	    case $A5:		/* gray-ball */
		DAT3 = 0;	/* distinguishes between A4 and A5 */
.TOPIC(|ISP Label|)
		goto ISP;

	    case $AC:		/* Yellow-ball */
/*	Yellow-ball is special because it interracts with BIO	*/
		if ( Rp->P_FLAGS & PF_BKI == 0 )
.TOPIC(|STREAM Label|)
		    goto STREAM; /* Block-input not active */
		if ( Rp->P_FLAGS & PF_BFD != 0 )
.TOPIC(|STREAM1 Label|)
		    goto STREAM1; /* Block was filled */
		Rp->P_FLAGS != PF_BFD; /* ...it is now */
		DAT1 = $28;	/* report it */
		DAT2 = PORTNM;
		(short) DAT3 = Rp->BI_LCN;
.TOPIC(WAITDAT Routine)
		WAITDAT();	/* send it */

	    case $A2:		/* Gobbler */
		if ( Rp->P_FLAGS & PF_HBP == 0 )
		{   /* no host-applied BP */
.TOPIC(DEMPTY Routine)
		    DEMPTY();	/* empty the buffer */
		    BU_EMP();	/* release Bp */
.TOPIC(BU_EMP Routine)
		}
.TOPIC(|ISP Label|)
		goto ISP;	/* forward it in */


	    case $A6:		/* Enter DEM */
	    case $A7:		/* Leave DEM */
	    case $AA:		/* Green-ball */
	    case $AB:		/* Red-ball */
	    case $AE:		/* Break-begin */
/*	Special cases for in-stream control-signals.  These must
	retain their position relative to individual data-characters.
	Thus, we can't forward them if there is data in the buffer.
*/
.DTOPIC(|STREAM Label|)
.TOPIC(|BCT - count of characters|)
STREAM:		if ( Rp->BCT == 0 )
.TOPIC(|ISP Label|)
		    goto ISP;	/* buffer empty...proceed */

/*	We must buffer the control-signal.  We do this by placing
	the sequence "ESC" | "Sig" into the buffer.
*/
.DTOPIC(|STREAM1 Label|)
.TOPIC(DWCI Routine)
STREAM1:	    DWCI(ESC); /* place ESC into buffer */
		DWCI(INTYBT);	/* followed by signal */
.TOPIC(|CLEANUP Label|)
		goto CLEANUP;


	    case $AD:		/* Orange-ball */
.DTOPIC(|ISP Label|)
.TOPIC(|LOOKUP Function|)
ISP:		LOOKUP();	/* translate it */
		goto PUTPR;	/* ...and send it */


	    case $B1:		/* Terminal Characteristics Response */
		DAT1 = $20;	/* type */
.TOPIC(|GETCH Routine|)
		DAT3 = GETCH();	/* subtype */
		DAT4 = GETCH();	/* value */
.TOPIC(|PUTPN Label|)
		goto PUTPN;	/* place port# & send it */


/*	In HOSTOUT, we serviced requests for an AUX circuit, and
	submitted an AUX-Pseudoneedle request to ISIS.  These cases
	are the response to that request.
	ISIS/Node code may reject the request, and we'll get a B5
	message;
	If successful, we'll get a B2, followed by a B6.
*/


	    case $B2:		/* Pseudo-needle */
.TOPIC(RBTALL Routine)
		RBTALL();	/* clean up port */
.TOPIC(|GETCH Routine|)
		GETCH();	/* ignor padding */
.TOPIC(GETH Routine)
.TOPIC(AUXKEY - hold AUX-key here)
		Rp->AUXKEY = GETH(); /* save key */
		if ( not PFULL )
		{   /* ports still available */
		    AUXX = -1;	/* enable another attempt */
		    Rp->P_FLAGS != PF_ACT; /* set active */
.TOPIC(IPORT Routine)
		    IPORT();	/* count another port in use */
.TOPIC(|CLEANUP Label|)
		    goto CLEANUP;
		}
.TOPIC(WAITISW Routine)
		WAITISW();	/* no more ports.. */
.TOPIC(SLOR Routine)
		SLOR(PORTNM,$BE); /* Zap W/reason */
		PUTCH(0);
.TOPIC(ELOR Routine)
		ELOR();
		DAT3 = 8;	/* set out of ports */
.TOPIC(|LOGFAL Label|)
		goto LOGFAL;


	    case $B5:		/* Logon Failure */
.TOPIC(|GETCH Routine|)
		DAT3 = GETCH();	/* reason */
		if ( DAT3 = 0 )
		    DAT3 = 7;	/* reason 0 -> 7 */

.DTOPIC(|LOGFAL Label|)
LOGFAL:		DAT1 = $17;	/* message $17 */
		DAT2 = AUXQ;	/* port = key */
		AUXX = -1;	/* enable another attempt */
.TOPIC(|SENDDAT Label|)
		goto SENDDAT;


	    case $B6:		/* Logon OK */
.TOPIC(SLOR Routine)
		SLOR(PORTNM,$B9); /* set transmit-limit */
		PUTCH(30);	/* ...to 30 */
.TOPIC(ELOR Routine)
		ELOR();
.TOPIC(|GETCH Routine|)
		GETCH();	/* skip padding */
.TOPIC(GETH Routine)
		GETW();		/* skip Invoice */
		GETH();		/* skip Orig. host */
		DAT1 = 7;	/* message 7 */
		DAT2 = PORTNM;
		DAT3 = Rp->AUXKEY;
.TOPIC(WAITDAT Routine)
		WAITDAT();	/* send it */
		DAT1 = $17;	/* message $17 */
.TOPIC(AUXKEY - hold AUX-key here)
		DAT2 = Rp->AUXKEY; /* requesting port */
		(short) DAT3 = 0; /* success */
.TOPIC(|SENDDAT Label|)
		goto SENDDAT;



	    case $B9:		/* set transmit limit */
.TOPIC(|GETCH Routine|)
		Rp->XMITLMT = ( ( GETCH() - 5 ) & -4 ) + 2;
.TOPIC(|XMITLMT - transmit limit|)
.TOPIC(|CLEANUP Label|)
		goto CLEANUP;


	    case $9E:		/* Detach */
	    case $A3:		/* flush input */
	    case $A8:		/* enter transparancy */
	    case $A9:		/* leave transparancy */
	    case $AF:		/* hang-up */
	    case $B0:		/* query Terminal Characteristic */
	    case $B4:		/* Logon Status */
	    case $B8:		/* Super-hang */
	    case $BA:		/* Break-end */
	    case $BB:		/* Zap Ack. */
	    case $BC:		/* Enter alt. device mode */
	    case $BD:		/* Leave alt. device mode */
	    case $BE:		/* Zap w/reason */
	    case $BF:		/* SIIX */
	    case $C0:		/* TIIX */
.TOPIC(|CLEANUP Label|)
		goto CLEANUP;	/* just ignor these */


	    default:		/* all others */
		   ISMGER();	/* fatal error */

	    }	/* switch (INTYBT) */
	    continue;
	}    /* if ( INTYBT > $9D ) */
	/*	At this point, we've processed any message other than
		a data-message */
	*/

	/*	Any message not yet processed must be text	*/



/*	This gets complicated.  Data from ISIS may go to any of three
	 destinations:
	  To the port's buffer (if anything is already buffered);
	  To the port's Block-input (if active and not filled);
	  To the port's buffer (if Bin active and filled);
	  To the port's buffer (if host has applied back-pressure);
	  else, To the PDP's input-ring.
	Furthermore, for a variety of reasons, we may need to "split"
	 the data, and service the ISIS message in multiple fragments.
	This may occur if:
	  The full message is too long (we limit host input to 30
	   bytes / message);
	  We must split the message to allow for PDP-ring Wrap;
	  A part of the ISIS message "fills" the Block-input buffer.
	The destination after "splitting" will always be the buffer.
*/
.TOPIC(|BCT - count of characters|)
	if ( Rp->BCT != 0 )	/* buffer not empty */
.TOPIC(|IS_BU Label|)
	    goto IS_BU;		/* then copy ISIS to Buffer */
	if ( Rp->P_FLAGS & PF_BKI != 0 ) /* Block-input active */
	    goto IS_BK;		/* then copy ISIS to Block */
	if ( Rp->P_FLAGS & PF_HBP != 0 ) /* host-applied BP */
.TOPIC(|IS_BUF Label|)
	    goto IS_BUF;	/* then copy ISIS to Buffer */
	if ( INRGSP == 0 )	/* no room in ring */
	    goto IS_BUF;	/* then copy ISIS to Buffer */

	/* Not engaged in Block-input, and no need to buffer */
	register n = INRGSP-2;	/* determine length available */
	if ( n > 30 )		/* never use more than 30 */
	    n = 30;
	if ( n > INTYBT )
	    n = INTYBT;		/* send no more than in message */
	DAT1 = n + $80;		/* message type */
	DAT2 = PORTNO;
	register char *p = DAT3;
	for ( ; n > 0; n-- )
.TOPIC(|GETCH Routine|)
	{   *p++ = GETCH();	/* copy data into DAT */
	    INTYBT--;
	}
	for ( register long *q = DAT ; q < p ; )
.TOPIC(WRPDP Routine)
	    WRPDP( *q++ );	/* copy DAT to PDP */
	if ( INTYBT == 0 )
.TOPIC(|CLEANUP Label|)
	    goto CLEANUP;	/* we've not split data..done */
	/* no...tell PDP data is there, buffer rest */
	PUTIFC();


/*	Buffering data...insure we'll remove it later */
.DTOPIC(|IS_BUF Label|)
.TOPIC(|BCT - count of characters|)
IS_BUF:	if ( Rp->BCT == 0 )
	    BUFADD();		/* insure it's on buffer-queue */


/*	Copying ISIS-ring to buffer	*/
.DTOPIC(|IS_BU Label|)
IS_BU:	while (INTYBT-- > 0 )
.TOPIC(|GETCH Routine|)
	{   char c = GETCH();	/* get the char */
	    if ( c== ESC )
.TOPIC(DWCI Routine)
		DWCI(ESC);	/* escape data-codes = ESC */
	    DWCI(c);		/* buffer the data */
	}
.TOPIC(|BCT - count of characters|)
	if ( Rp->BCT > BKPR )	/* need to apply back-pressure */
	{   Rp->P_FLAGS != PF_IBP; /* record back-pressure */
	    SENDQI(PORTNO,$A0); /* apply back-pressure */
	}
.TOPIC(|CLEANUP Label|)
	goto CLEANUP;		/* done */



	/*	Common Loop-exit Processes	*/

.DTOPIC(|PUTPN Label|)
PUTPN:	DAT2 = PORTNM;		/* place port-number in message */

.DTOPIC(|SENDDAT Label|)
.TOPIC(WRDAT Routine)
SENDDAT: WRDAT();		/* forward message to PDP */

.DTOPIC(|CLEANUP Label|)
.TOPIC(ELIR Routine)
CLEANUP: ELIR();		/* close ISIS message input */

    }	/* while ( not HTDWN) */
    return;
}
.END
.SKIP 3
	Some special functions are provided:

.SKIP BEGIN VERBATIM
/*	Translate ISIS control-signal to PDP-message and send it */
.DTOPIC(|LOOKUP Function|)
LOOKUP();
{	static char	ISPTAB[]
/*	ISIS #	= 9F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,AA,AB,AC,AD,AE */
	{	= 11, 8, 9,10, 0,21,21,12,13, 0, 0,14,15,16,17,47 };
	DAT1 = ISPTAB[ INTYBT-$9F ];
	return;
}
.END
  