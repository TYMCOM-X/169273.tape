	SUBTTL	LAB4
:------------------------------------------------------------------: 
:  Class TTE 442 - ISIS Slot Programming - 31-Oct-88 to 11-Nov-88  : 
:  Student: Joe Smith, MDFSCO, mail stop D21, phone 922-6220       :
:  Node 2033, Slot 03, Host 30, File JS2033.#03 in (TECHTRAIN:31)  :
:------------------------------------------------------------------: 

	RA	0		: In case DATIME.LIB left radix at $A
	SEG	A.DATA

: Ports database
P.PORT	EQ	0		:HS 01: port number
P.NAME	EQ	P.PORT+2	:BS 0D: 12 bytes user name (SC format)
P.ZZZZ	EQ	P.NAME+0D	:ZZ end of structure

P.BASE	BS	(MAXPRT+1)*P.ZZZZ	: Array of structures
P.SIZE	HC	P.ZZZZ		: This is for the multiply instruction


: Host up message

HSTUP	HC	$A 14		: Size of message (including 2 filler bytes)
	BC	10		: RPORT=0, message type 10 = Host UP
	BC	0		: Dispatcher's key
	HC	HST0		: Host number (from TYM file)
	HC	HPRT0		: Number of ports on this host (from TYM file)
	HC	0		: Relative host number (Host 0)
	BC	0		: 0=up, 1=down, 2=shut, 3=gone
	BC	0		: Host key, not used
	BC	0		: IIX file is off
	BC	PRODID		: Product ID, 99x=TEST

DETMSG	HC	019E		: ISIS message to DETACH circuit
ZAPMSG	HC	019F		: ISIS message to ZAP circuit
BELMSG	HC	0107		: BEEP
OBALL	EQ	0AD		: ISIS message for orange ball
YBLMSG	HC	01AC		: ISIS message for yellow ball

MAXPHW	EQ	(MAXPRT/10)+1	: Number of bits (3 halfwords if MAXPRT=$A 32)
INUSE	HS	MAXPHW		: Bit map for in use ports
HECHO	HS	MAXPHW		: Bit map for ports needing echo
USECNT	HC	00		: Count of ports in use

CONMSG	SC	/"8D"8Ahost XX slot XX port XX"8D"8A/
HOSTXX	EQ	CONMSG+1+7
SLOTXX	EQ	HOSTXX+8
PORTXX	EQ	SLOTXX+8
WELMSG	SC	/Welcome to Joe's slot. XX ports in use."8D"8A/
USEDXX	EQ	$A WELMSG+1+23
PMSG	SC	/The present time is: /
TMSG	SC	/00:00:00"8D"8A/
QMSG	SC	/You typed Q to quit"8D"8A/
HMSG	SC	/Legal commands are: /
CRLF	SC	/"8D"8A/

	SEG	A.CODE


: Slot's execution starts at label START (called from CRASH.LIB)

START	LIS	R2,0		: RPORT=0 message, to node code
	LA	R3,HSTUP+1,,	: Point to byte count at start of message
	JAL	R5,OCM,,	: Output canned message saying we are up
	LIS	R0,0
	LHI	R1,MAXPHW-1	: Number of HW's to clear, starting at 0
START1	SH	R0,INUSE,R1	: Clear out the "in use" bits
	SIS	R1,1
	JGE	START1
	SH	R0,USECNT	: Clear count
: Put host and slot number in connect message
	LHI	R2,HST0		: Our host number
	LI	R0,0220+0A	: 2 bytes, blank fill, decimal
	LA	R1,HOSTXX	: Address of XX in CONMSG
	JAL	R6,OUTNUM,,
	LH	R2,SLOTNO,,	: Our slot number 
	LI	R0,0240+10	: 2 bytes, zero fill, hex
	LA	R1,SLOTXX	: Address of XX in CONMSG
	JAL	R6,OUTNUM,,
: Here is where the foreground task should be started
	J	BMAIN		: Main loop starts on next page

: Main loop for foreground process

FMAIN	SVC	DISMIS		: Main foreground loop
	J	FMAIN		:  does nothing
: Main processing loop (for background)

BMAIN	SVC	DISMIS		: Give other slots a chance to run
	JAL	R4,LOOK,,	: Look to see if there is anything in IRING
	  J	BMAIN		: Nothing there, dismiss and try again
	JE	B0FLSH		: If port zero message, flush it
	LR	R13,R1		: RPORT number
	MH	R13,P.SIZE	: Point to data structure
	LA	R13,P.BASE,R13	:  "		"
	CHI	R2,0		: Message type of 0 is a needle, the
	JE	NEEDL		:  only thing allowed on an unused port
	TBT	R1,INUSE	: Is this port in use?
	JN	BPROC		: Yes, process the command
				: No, flush this message
BFLUSH	LB	R0,LENGTH,R2,	: Get size from table in SEG F
	JAL	R4,FLUSH,,	: Skip to end of message
	J	BMAIN		: Go check next message

: Here to flush a port 0 message

B0FLSH	LH	R6,LP0LST,,	: Get addr of port 0 length list (from SEG F)
				: "NRATE,R6" now points to start of table
	LB	R0,NRATE,R6,R2	: Pickup size based on message type in R2
	JAL	R4,FLUSH,,	: Skip to end of this input message
	J	BMAIN		: See if next message is a needle

: At last, we finally got a needle

NEEDL	SBT	R1,INUSE	: Mark this port as in use
	SBT	R1,HECHO	: Host must do echo
	STH	R1,P.PORT,R13	: Store port # in easy to access place
	JAL	R4,GETH,,	: Put msg type & length in R0
	JAL	R4,FLUSH,,	: Flush to end of needle
: Put this port # in the "host XX slot XX port XX" message
	LI	R0,0220+10	: 2 digits, blank fill, hex
	LA	R1,PORTXX	: Address in message
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R6,OUTNUM,,	: Put port # in CONMSG
	LA	R3,CONMSG
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Output slot and port number
: Put count in the "XX ports in use" message
	LH	R2,USECNT
	AIS	R2,1		: One more port in use
	STH	R2,USECNT
	LI	R0,0220+0A	: 2 bytes, blank fill, decimal
	LA	R1,USEDXX	: Address of XX in WELMSG
	JAL	R6,OUTNUM,,
	LH	R2,P.PORT,R13	: Get rport #
	LA	R3,WELMSG	: Point to the welcome message
	JAL	R5,OCS,,	: Send string (including message length)
	J	BMAIN
: Here to process a command

BPROC	CHI	R2,009E		: Check for control message
	JGE	BCNTRL		: Go do OB, YB, GB, RB, EC type stuff
	JAL	R4,GETCH,,	: Officially get the count
	STH	R0,ICOUNT	: Store for MYGETC

:Loop back here if it is a multi-byte string

NEXTC	JAL	R6,MYGETC	: Get a character, echo if needed
	  J	BMAIN		: No more input (ELIR called already)
	JAL	R4,UPCASE	: Convert to uppercase, strip parity

	LB	R4,CCMD		: Number of commands
CLOOK	SIS	R4,1
	JL	NOTCMD		: Continue if count hasn't run out
	LB	R2,CCMD+1,R4	: Get char
	NHI	R2,7F		: Strip parity bit that SC left on
	CR	R0,R2		: Match?
	JN	CLOOK		: Loop if not

: Found a matching command.  Now go to it.

	SLLS	R4,2		: Multiply index by 4
	L	R4,DCMD,R4	: Get dispatch address
	JR	R4		: Go there

CCMD	SC	/?HPQW/		: Single character commands, uppercase only
DCMD	WC	CMDH,CMDH,CMDP,CMDQ,CMDW

: Routine to convert byte in R0 to uppercase.  Link on R4

UPCASE	NI	R0,7F		: Strip parity bit before doing compares
	CHI	R0,61		: Test for lowercase "a"
	JL	ISUPR
	CHI	R0,7A		: Test for lowercase "z"
	JG	ISUPR
	SHI	R0,20		: Convert lower to upper case
ISUPR	JR	R4

: Here if character is not a command

NOTCMD	LA	R3,BELMSG	: No match, output a bell
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Go beep
	J	NEXTC		: Get new command

: The user typed "H" or "h" or "?"

CMDH	LA	R3,HMSG		: Output the "H" message
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: "Legal commands are: "
	LA	R3,CCMD
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Output the string of characters
	LA	R3,CRLF
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Finish with CR LF
	J	NEXTC

: The user typed "P" or "p"

CMDP	LA	R3,PMSG		: Output the "P" message
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Output "The present time is: "
	L	R3,GMT,,	: Get current time of day
	LIS	R4,8		: Want to do 8 bytes
	LA	R5,TMSG+1	: Put it right after the byte count
	JAL	R6,TMSTMP,,	: Convert GMT to timestamp
	LA	R3,TMSG
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,	: Output HH:MM:SS CR LF
	J	NEXTC

: User typed "Q" or "q"

CMDQ	LA	R3,QMSG		: Output the "Q" message
	LH	R2,P.PORT,R13	: Get rport #
	RBT	R2,INUSE	: Port is not in use any more
	JAL	R5,OCS,,	: "You typed Q to QUIT"
	LA	R3,DETMSG	: Output a DETACH command
	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCM,,	: Output 1 byte message (no byte count)
	LH	R0,USECNT
	SIS	R0,1		: One less port in use
	STH	R0,USECNT
	J	NEXTC		: Go back looking for a needle

: User typed "W" or "w"

CMDW	LH	R2,USECNT	: Current count (may have changed)
	LI	R0,0220+0A	: 2 bytes, blank fill, decimal
	LA	R1,USEDXX	: Address of XX in WELMSG
	JAL	R6,OUTNUM,,
	LH	R2,P.PORT,R13	: Get rport #
	LA	R3,WELMSG	: Point to the welcome message
	JAL	R5,OCS,,	: Send string (including message length)
	J	NEXTC
	SEG	A.DATA

ICOUNT	HC	0		: Count of characters in current input message
ECHO1C	SC	/X/		: ISIS message to output one character
ECHOR0	EQ	ECHO1C+1	: The character to echo is stored here
ECHO2C	SC	/^X/		: ISIS message to output two characters
ECHO2X	EQ	ECHO2C+2	: Converted character here

	SEG	A.CODE

: Routine to get a character, echoing it if necessary.  Link on R6.

MYGETC	LH	R0,ICOUNT	: Number of bytes left to process
	SIS	R0,1
	JL	MYGET0		: End of this input string
	STH	R0,ICOUNT
	AIS	R6,4		: Set up for skip return
	JAL	R4,GETCH,,	: Get next byte
	LH	R2,P.PORT,R13	: Get rport #
	TBT	R2,HECHO	: Should the host (me) do echoing?
	JER	R6		: No, return with character in R0
	JFS	MYECHO		: Yes, echo character before returning

MYGET0	JAL	R4,ELIR,,	: End of logical Input record
	JR	R6		: Nonskip return from MYGETC

: Routine to do host echo.  Character to be echoed in R0, link on R6

MYECHO	STB	R0,ECHOR0	: Save character to be echoed
	NI	R0,7F-1F	: Check if it looks like a printing char
	JE	UPECHO		: Echo control chars in up-arrow mode
	LA	R3,ECHO1C	: Echo the one character (in ECHOR0)
	JFS	MYECH1
UPECHO	LB	R0,ECHOR0	: Get the control character
	XHI	R0,40+80	: Add 40 to make printing, toggle parity
	STB	R0,ECHO2X
	LA	R3,ECHO2C	: Echo two characters
MYECH1	LH	R2,P.PORT,R13	: Get rport #
	JAL	R5,OCS,,
	LB	R0,ECHOR0	: Return character in R0
	JR	R6		: Return from MYECHO/MYGETC	

: Process control messages from the IRING

BCNTRL	J	BFLUSH		: Flush this message for now

: End of program, FINISH.LIB comes next
 