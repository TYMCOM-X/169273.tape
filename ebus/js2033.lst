Page  1-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Definitions

     1					SUBTTL	Definitions
     2				:------------------------------------------------------------------: 
     3				:  Class TTE 442 - ISIS Slot Programming - 31-Oct-88 to 11-Nov-88  : 
     4				:  Student: Joe Smith, MDFSCO, mail stop D21, phone 922-6220       :
     5				:  Node 2033, Slot 03, Host 30, File JS2033.#03 in (TECHTRAIN:31)  :
     6				:------------------------------------------------------------------: 
     7					RA	0		: In case DATIME.LIB left radix at $A
     8				
     9	0002E4				SEG	A.DATA
    10				
    11	00000E			MAXNAM	EQ	$A 1+12+1	: "!" + 12 chars name + CR or semi
    12	000001			MAXPHW	EQ	(MAXPRT/10)+1	: Number of bits (3 halfwords if MAXPRT=$A 32)
    13	0002E4			INUSE	HS	MAXPHW		: Bit array for in-use ports
    14	0002E6			OBWAIT	HS	MAXPHW		: Bit array for ports waiting for orange ball
    15	0002E8			ACTIVE	HS	MAXPHW		: Bit array for ports actively outputting
    16	0002EA			BPRESS	HS	MAXPHW		: Bit array for ports backpressured
    17	0002EC	0000 		USECNT	HC	00		: Count of ports in use
    18				
    19	0002EE			Q	EQ	.
    20	000000				ORG	0		: Ports database
    21	000000			P.READ	WS	01		: 4 bytes address of input read routine
    22	000004			P.WRIT	WS	01		: 4 bytes address of output write routine
    23	000008			P.R10	WS	01		: 4 bytes to save R10 for P.WRIT to use
    24	00000C			P.R11	WS	01		: 4 bytes to save R11 for P.WRIT to use
    25	000010			P.INVN	WS	01		: 4 bytes invoice number (accounting)
    26	000014			P.PORT	HS	01		: 2 bytes port number (from Dispatcher)
    27	000016			P.DHST	HS	01		: 2 bytes destination host (this slot)
    28	000018			P.ONOD	HS	01		: 2 bytes origination node (CONSAT)
    29	00001A			P.OHST	HS	01		: 2 bytes origination host (CONSAT)
    30	00001C			P.OPRT	HS	01		: 2 bytes origination port (obsolete)
    31	00001E			P.LOG2	HS	01		: 2 bytes for LOG-II invoice extension
    32	000020			P.XTPC	BS	02		: 1 byte unused, 1 byte thru-put class
    33	000022			P.DNOD	HS	01		: 2 bytes destination node (this node)
    34	000024			P.CCT	BS	01		: 1 byte circuit characteristic type
    35	000025			P.NAMS	BS	01		: 1 count of bytes in name
    36	000026			P.NAME	BS	MAXNAM		:12+2 bytes user name
    37	000034			P.SLIM	BS	01		: 1 byte of send limit
    38	000035			P.SCNT	BS	01		: 1 byte of send count
    39	000036			P.XXXX	BS	0		: End of structure
    40	0002EE				ORG	Q		: End of structure
    41	00000E			P.WS	EQ	(P.XXXX+3)/4	: Number of words required
    42	0002F0			P.BASE	WS	(MAXPRT+1)*P.WS	: Array of structures (word aligned)
    43	0004B0			P.LAST	EQ	.-(P.WS*4)	: Beginning of MAXPRT's structure
    44	0004E8	0038 		P.SIZE	HC	P.WS*4		: This is for the multiply instruction
    45				Page  1-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Definitions

    46				: Host up message
    47				
    48	0004EA	000E 		HSTUP	HC	$A 14		: Size of message (including 2 filler bytes)
    49	0004EC	10			BC	10		: RPORT=0, message type 10 = Host UP
    50	0004ED	00 			BC	0		: Dispatcher's key
    51	0004EE	001E 			HC	HST0		: Host number (from TYM file)
    52	0004F0	0004 			HC	HPRT0		: Number of ports on this host (from TYM file)
    53	0004F2	0000 			HC	0		: Relative host number (Host 0)
    54	0004F4	00		HSTDWN	BC	0		: 0=up, 1=down, 2=shut, 3=gone
    55	0004F5	00 			BC	0		: Host key, not used
    56	0004F6	00			BC	0		: IIX file is off
    57	0004F7	99 			BC	PRODID		: Product ID, 99x=TEST
    58	0004F8	0000 			HC	0		: 2 bytes filler
    59				
    60				: All of these messages have filler (to make ORING easier to read)
    61	0004FA	029E 00		DETMSG	XC	029E00		: ISIS message to DETACH circuit
    62	0004FD	02 9F00 	ZAPMSG	XC	029F00		: ISIS message to ZAP circuit
    63	000500	02AA 00		GREMSG	XC	02AA00		: ISIS message for green ball
    64	000503	02 AB00 	REDMSG	XC	02AB00		: ISIS message for red ball
    65	000506	02AC 00		YBLMSG	XC	02AC00		: ISIS message for yellow ball
    66	000509	02 AD00 	ORAMSG	XC	02AD00		: ISIS message for orange ball
    67	00050C	06B1 0001 0000 	EC1MSG	XC	06B10001000000	: ISIS message to turn echo on
		00		
    68				
    69	000513	02 8D8A 	CRLF	SC	/"8D"8A/
    70	000516	01A0 		SPACE	SC	/ /
    71	000518	0287 A0		BELSTR	SC	/"87 /		: BEEP, SPACE
    72	00051C	0000 0000 	BCOUNT	WC	0
    73				
    74				: Global variables
    75					GL	SCOUNT
    76	0106E8				SEG	A.CODE
    77				Page  2-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Start up foreground and background

    78					SUBTTL	Start up foreground and background
    79				: Slot's execution starts at label START (called from CRASH.LIB)
    80				
    81	0106E8	2420 		START	LIS	R2,0		: RPORT=0 message, to node code
    82	0106EA	E630 4000 04EB 		LA	R3,HSTUP+1,,	: Point to byte count at start of message
    83	0106F0	4150 4001 0070 		JAL	R5,OCM,,	: Output canned message saying we are up
    84	0106F6	2400 			LIS	R0,0
    85	0106F8	C810 0000 		LHI	R1,MAXPHW-1	: Number of HW's to clear, starting at 0
    86	0106FC	4B01 02E4 	START1	SH	R0,INUSE,R1	: Clear out the "in use" bits
    87	010700	4B01 02E6 		SH	R0,OBWAIT,R1	: Orange ball wait
    88	010704	4B01 02E8 		SH	R0,ACTIVE,R1	: No port using P.WRIT yet
    89	010708	4B01 02EA 		SH	R0,BPRESS,R1	: No backpressure
    90	01070C	2711 			SIS	R1,1
    91	01070E	4310 FFEA 		JGE	START1
    92	010712	4B00 02EC 		SH	R0,USECNT	: Clear count
    93				: Put host and slot number in connect message
    94	010716	C820 001E 		LHI	R2,HST0		: Our host number
    95	01071A	F800 0000 022A 		LI	R0,0220+0A	: 2 bytes, blank fill, decimal
    96	010720	E610 05C8 		LA	R1,HOSTXX	: Address of XX in CONSTR
    97	010724	4160 4001 0558 		JAL	R6,OUTNUM,,
    98	01072A	4820 4000 0000 		LH	R2,SLOTNO,,	: Our slot number 
    99	010730	F800 0000 0150 		LI	R0,0140+10	: 1 byte, zero fill, hex
   100	010736	E610 05DD 		LA	R1,SLOTXX	: Address of X in CONSTR
   101	01073A	4160 4001 0558 		JAL	R6,OUTNUM,,
   102	010740	4820 400F 001A 		LH	R2,NODEX,,	: Our node number
   103	010746	F800 0000 0448 		LI	R0,0440+08	: 4 bytes, zero fill, octal
   104	01074C	E610 05D3 		LA	R1,NODEXX	: Address of XXXXX in CONSTR
   105	010750	4160 4001 0558 		JAL	R6,OUTNUM,,
   106	010756	C820 0008 		LHI	R2,MAXPRT	: Max port number
   107	01075A	F800 0000 022A 		LI	R0,0220+0A	: 2 bytes, blank fill, decimal
   108	010760	E610 05F7 		LA	R1,MAXPXX	: Address of XX in CONSTR
   109	010764	4160 4001 0558 		JAL	R6,OUTNUM,,
   110				
   111					GL	FSTART,FCHECK	: Defined in JS2033.F03
   112				: Here is where the foreground task is started
   113	01076A	E600 4000 0000 		LA	R0,FSTART,,	: Foreground starting address
   114	010770	E120 0001 		SVC	SYS,CFGND.	: Connect foreground
   115	010774	2400 			LIS	R0,0
   116	010776	5000 051C 		ST	R0,BCOUNT	: Zero the background counter
   117	01077A	5000 0624 		ST	R0,ICOUNT	: Input bytes counter
   118	01077E	5000 0628 		ST	R0,ECOUNT	: Echoed bytes counter
   119	010782	4300 8000 		J	BMAIN		: Main loop starts on next page
   120				Page  3-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Main processing loop (for background)

   121					SUBTTL	Main processing loop (for background)
   122				
   123	010786	E100 0000 	BMAIN	SVC	DISMIS,0	: Give other slots a chance to run
   124	01078A	2401 			LIS	R0,1
   125	01078C	5100 051C 		AM	R0,BCOUNT	: Count # of times thru here
   126	010790	41D0 4000 0000 		JAL	R13,FCHECK,,	: Check if foreground wants anything done
   127	010796	4140 4001 0000 		JAL	R4,LOOK,,	: Look to see if there is anything in IRING
   128	01079C	4300 805E 		  J	BWRITE		: Nothing there, check for output, then dismiss
   129	0107A0	4330 802C 		JE	B0FLSH		: If port zero message, flush it
   130				: R1 has port, R2 has message type
   131	0107A4	08D1 			LR	R13,R1		: RPORT number
   132	0107A6	4CD0 04E8 		MH	R13,P.SIZE	: Point to port data structure
   133	0107AA	E6DD 4000 02F0 		LA	R13,P.BASE,R13,	:  "		"
   134	0107B0	C920 0000 		CHI	R2,0		: Message type of 0 is a needle, the
   135	0107B4	4330 8090 		JE	NEEDL		:  only thing allowed on an unused port
   136	0107B8	7410 02E4 		TBT	R1,INUSE	: Is this port in use?
   137	0107BC	4230 8180 		JN	BPROC		: Yes, process the command
   138								: No, flush this message
   139				: Message type must still be in R2
   140	0107C0	D302 400F 0028 	BFLUSH	LB	R0,LENGTH,R2,	: Get size from table in SEG F
   141	0107C6	4140 4001 0056 		JAL	R4,FLUSH,,	: Skip to end of message
   142	0107CC	4300 FFB6 		J	BMAIN		: Go check next message
   143				
   144				: Here to flush a port 0 message
   145				
   146	0107D0	4860 400F 0026 	B0FLSH	LH	R6,LP0LST,,	: Get addr of port 0 length list (from SEG F)
   147								: "NRATE,R6" now points to start of table
   148	0107D6	D306 420F 0000 		LB	R0,NRATE,R6,R2	: Pickup size based on message type in R2
   149	0107DC	4140 4001 0056 		JAL	R4,FLUSH,,	: Skip to end of this input message
   150	0107E2	4300 FFA0 		J	BMAIN		: See if next message is a needle
   151				Page  3-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Main processing loop (for background)

   152				: BWNEXT = Set up to run a routine when port is not backpressured.
   153				:	Link on R12, address of routine in R1, initial values in R10 and R11.
   154				: BWDONE = Cancel the routine set by BWNEXT.  Use "J BWDONE" to call it.
   155				: BPCHEK = Check back pressure.  Link on R1, preserves R10 and R11 only.
   156				: Note: BPCHEK can only be called from routines started by BWNEXT.
   157				
   158	0107E6	2410 		BWDONE	LIS	R1,0		: Zero when done outputting
   159	0107E8	50AD 0008 	BWNEXT	ST	R10,P.R10,R13	: Store initial values of preserved registers
   160	0107EC	50BD 000C 		ST	R11,P.R11,R13	: These will be restore by BWRITE
   161	0107F0	482D 0014 		LH	R2,P.PORT,R13
   162	0107F4	7520 02E8 		SBT	R2,ACTIVE	: Mark port as active
   163	0107F8	501D 0004 	BPCHEK	ST	R1,P.WRIT,R13	: Save return address
   164	0107FC	030C 			JR	R12		: Return to BWRITE, which checks BPRESS
   165				
   166				: Here to check for deferred output
   167				
   168	0107FE	C8E0 0008 	BWRITE	LHI	R14,MAXPRT	: OK to use R14 (done with IRING)
   169	010802	74E0 02E8 	BWLOOP	TBT	R14,ACTIVE	: Check for active writer
   170	010806	4330 8034 		JE	BWEND		: Zero means not active
   171	01080A	74E0 02EA 		TBT	R14,BPRESS	: If port is back pressured,
   172	01080E	4230 802C 		JN	BWEND		:  ignore until BP is turned off
   173	010812	08DE 			LR	R13,R14		: Port number
   174	010814	4CD0 04E8 		MH	R13,P.SIZE	: Point to data structure
   175	010818	E6DD 4000 02F0 		LA	R13,P.BASE,R13,	:  "	   "
   176	01081E	581D 0004 		L	R1,P.WRIT,R13	: Get output routine
   177	010822	4230 8006 		JN	BWRIT1		: Continue if there is a routine
   178	010826	76E0 02E8 		RBT	R14,ACTIVE	: Else clear the active bit
   179	01082A	230A 			JFS	BWEND
   180	01082C	58AD 0008 	BWRIT1	L	R10,P.R10,R13	: Get saved loop counter
   181	010830	58BD 000C 		L	R11,P.R11,R13	: Saved link
   182	010834	01C1 			JALR	R12,R1		: Go to output routine (R13 is set up)
   183	010836	50AD 0008 		ST	R10,P.R10,R13
   184	01083A	50BD 000C 		ST	R11,P.R11,R13
   185	01083E	27E1 		BWEND	SIS	R14,1
   186	010840	4230 FFBE 		JN	BWLOOP		: Check all ports
   187	010844	4300 FF3E 		J	BMAIN		: Go check IRING now
   188				Page  4-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Process login request from needle

   189					SUBTTL	Process login request from needle
   190				
   191	010848	401D 0014 	NEEDL	STH	R1,P.PORT,R13	: Store port # in easy to access place
   192	01084C	7510 02E4 		SBT	R1,INUSE	: Mark this port as in use
   193	010850	7510 061E 		SBT	R1,HSECHO	: Host must do echo
   194	010854	7610 02EA 		RBT	R1,BPRESS	: Port is not backpressured
   195	010858	4140 4001 0036 		JAL	R4,GETH,,	: Put msg type & length in R0
   196	01085E	4140 4001 0046 		JAL	R4,GETW,,	: Get invoice number
   197	010864	500D 0010 		ST	R0,P.INVN,R13
   198	010868	4140 4001 0036 		JAL	R4,GETH,,	: Get dest host
   199	01086E	400D 0016 		STH	R0,P.DHST,R13
   200	010872	4140 4001 0036 		JAL	R4,GETH,,	: Get orig node
   201	010878	400D 0018 		STH	R0,P.ONOD,R13
   202	01087C	4140 4001 0036 		JAL	R4,GETH,,	: Get orig host
   203	010882	400D 001A 		STH	R0,P.OHST,R13
   204	010886	4140 4001 0036 		JAL	R4,GETH,,	: Get orig port
   205	01088C	400D 001C 		STH	R0,P.OPRT,R13
   206	010890	4140 4001 0036 		JAL	R4,GETH,,	: Get invoice number, third half
   207	010896	400D 001E 		STH	R0,P.LOG2,R13
   208	01089A	4140 4001 0036 		JAL	R4,GETH,,	: Get unused byte and TPC
   209	0108A0	400D 0020 		STH	R0,P.XTPC,R13
   210	0108A4	4140 4001 0036 		JAL	R4,GETH,,	: Get dest node number
   211	0108AA	400D 0022 		STH	R0,P.DNOD,R13
   212	0108AE	4140 4001 0026 		JAL	R4,GETCH,,	: Get circuit characteristics type
   213	0108B4	D20D 0024 		STB	R0,P.CCT,R13
   214	0108B8	4140 4001 0026 		JAL	R4,GETCH,,	: Get size of username
   215	0108BE	D20D 0025 		STB	R0,P.NAMS,R13
   216	0108C2	0860 			LR	R6,R0		: Save count
   217	0108C4	2470 			LIS	R7,0
   218	0108C6	4140 4001 0026 	NEEDL1	JAL	R4,GETCH,,	: Get next byte of username
   219	0108CC	C970 000E 		CHI	R7,MAXNAM
   220	0108D0	4310 8006 		JGE	NEEDL2		: Don't store if name is too long
   221	0108D4	D20D 4700 0026 		STB	R0,P.NAME,R13,R7
   222	0108DA	2671 		NEEDL2	AIS	R7,1
   223	0108DC	2761 			SIS	R6,1
   224	0108DE	4220 FFE4 		JG	NEEDL1		: Loop for all of username
   225	0108E2	4140 F772 		JAL	R4,ELIR		: End of needle, go tell FRING
   226				
   227	0108E6	482D 0014 		LH	R2,P.PORT,R13
   228	0108EA	E630 050C 		LA	R3,EC1MSG	: Send message to turn on echo
   229	0108EE	4150 4001 0070 		JAL	R5,OCM,,
   230	0108F4	2421 			LIS	R2,1		: One more port in use
   231	0108F6	6120 02EC 		AHM	R2,USECNT
   232	0108FA	E600 8074 		LA	R0,CREAD	: Connect port to command reader
   233	0108FE	500D 0000 		ST	R0,P.READ,R13
   234	010902	4170 83AE 		JAL	R7,PORTIS	: Output "port xx"
   235	010906	E610 8008 		LA	R1,WELSTR	: Message to be output after systat
   236	01090A	4140 83C8 		JAL	R4,SYSTAT	: Set up to start a system status report
   237	01090E	4300 FE74 		J	BMAIN
   238	010912	2D8D 8AD7 E5EC 	WELSTR	SC	/"8D"8AWelcome to Joe's slot.  Type ? for help."8D"8A"8A/
		E3EF EDE5 A0F4 	
		EFA0 CAEF E5A7 	
		F3A0 F3EC EFF4 	
Page  4-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Process login request from needle

		AEA0 A0D4 F9F0 	
		E5A0 BFA0 E6EF 	
		F2A0 E8E5 ECF0 	
		AE8D 8A8A 	
   239				Page  5-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   240					SUBTTL	Command scanner
   241				: Here to process ISIS messages
   242				
   243	010940	C920 009E 	BPROC	CHI	R2,009E		: Check for control message
   244	010944	4310 858A 		JGE	BCNTRL		: Go do OB, YB, GB, RB, EC type stuff
   245	010948	4140 4001 0026 		JAL	R4,GETCH,,	: Officially get the count
   246	01094E	4000 0620 		STH	R0,NCOUNT	: Store for MYGETC
   247	010952	5100 0624 		AM	R0,ICOUNT	: Increment number of characters input
   248	010956	C900 0001 		CHI	R0,1		: Check for multi-byte messages
   249	01095A	4330 8006 		JE	NEXTC
   250	01095E	2401 			LIS	R0,1
   251	010960	5100 062C 		AM	R0,MCOUNT	: Increment count of multi's
   252				
   253				:Loop back here if it is a multi-byte string
   254				
   255	010964	4160 8426 	NEXTC	JAL	R6,MYGETC	: Get a character, echo if needed
   256	010968	4300 FE1A 		  J	BMAIN		: No more input (ELIR called already)
   257	01096C	584D 0000 		L	R4,P.READ,R13	: Get address of input routine
   258	010970	0304 			JR	R4		: Go there (usually goes to CREAD)
   259				
   260				: Read a command (default input handler)
   261				
   262	010972	4140 809E 	CREAD	JAL	R4,UPCASE	: Convert to uppercase, strip parity
   263	010976	C840 0020 		LHI	R4,CMDLEN	: Size of table to check
   264	01097A	2744 		CMDCHK	SIS	R4,4
   265	01097C	4210 801A 		JL	NOTCMD		: Continue if count hasn't run out
   266	010980	D324 8070 		LB	R2,CMDTAB,R4	: Get char
   267	010984	C420 007F 		NHI	R2,7F		: Strip parity bit that SC left on
   268	010988	0902 			CR	R0,R2		: Match?
   269	01098A	4230 FFEC 		JN	CMDCHK		: Loop if not
   270				
   271				: Found a matching command.  Now go to it.
   272				
   273	01098E	5864 8062 		L	R6,CMDTAB,R4	: Get dispatch address
   274	010992	F460 00FF FFFF 		NI	R6,00FFFFFF	: Mask off char, leave only 24-bit address
   275	010998	0306 			JR	R6		: Go to routine
   276				
   277				: Here if character is not a command
   278				
   279	01099A	E630 0518 	NOTCMD	LA	R3,BELSTR	: No match, output a bell
   280	01099E	482D 0014 		LH	R2,P.PORT,R13
   281	0109A2	4150 4001 008C 		JAL	R5,OCS,,	: Go beep
   282	0109A8	4300 FFB8 		J	NEXTC		: Get new command
   283				
   284				XX	MACRO(CH,ADDR)	[WC CH*01000000+ADDR]	: Combine CH and address
   285				
   286				XCMDX	MACRO	[
					XX(03F,CMD.)		:"?" = list of commands
					XX(044,CMDD)		:"D" = dummy
					XX(048,CMDH)		:"H" = help
					XX(04D,CMDM)		:"M" = message
					XX(050,CMDP)		:"P" = print time
					XX(051,CMDQ)		:"Q" = quit
Page  5-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

					XX(053,CMDS)		:"S" = status
					XX(057,CMDW)		:"W" = who
					]
   287	0109AC	44E5 ECF0 BAA0 	HLPSTR	SC	/elp: commands are Dummy, Present-time, Message, Quit, Status, Who."8D"8
		E3EF EDED E1EE 	**A/
		E4F3 A0E1 F2E5 	
		A0C4 F5ED EDF9 	
		ACA0 D0F2 E5F3 	
		E5EE F4AD F4E9 	
		EDE5 ACA0 CDE5 	
		F3F3 E1E7 E5AC 	
		A0D1 F5E9 F4AC 	
		A0D3 F4E1 F4F5 	
		F3AC A0D7 E8EF 	
		AE8D 8A		
   288				
   289	0109F4			CMDTAB	WS	0		: Must start on a word boundary
   290					XCMDX[
   291	0109F4	3F01 0A62 		XX(03F,CMD.)[WC 03F*01000000+CMD.]		:"?" = list of commands
   292	0109F8	4401 0AD0 		XX(044,CMDD)[WC 044*01000000+CMDD]		:"D" = dummy
   293	010801 0A30 		XX(048,CMDH)[WC 048*01000000+CMDH]		:"H" = help
   294	010A00	4D01 0AFE 		XX(04D,CMDM)[WC 04D*01000000+CMDM]		:"M" = message
   295	010A04	5001 0B72 		XX(050,CMDP)[WC 050*01000000+CMDP]		:"P" = print time
   296	010A08	5101 0BB0 		XX(051,CMDQ)[WC 051*01000000+CMDQ]		:"Q" = quit
   297	010A0C	5301 0BEC 		XX(053,CMDS)[WC 053*01000000+CMDS]		:"S" = status
   298	010A10	5701 0C96 		XX(057,CMDW)[WC 057*01000000+CMDW]		:"W" = who
   299					]			: Create command table
   300	000020			CMDLEN	EQ	.-CMDTAB	: Number of bytes in command table
   301					KILL	XCMDX,XX
   302				
   303				: Routine to convert byte in R0 to uppercase.  Link on R4
   304				
   305	010A14	F400 0000 007F 	UPCASE	NI	R0,7F		: Strip parity bit before doing compares
   306	010A1A	C900 0061 		CHI	R0,61		: Test for lowercase "a"
   307	010A1E	4210 800C 		JL	ISUPR
   308	010A22	C900 007A 		CHI	R0,7A		: Test for lowercase "z"
   309	010A26	4220 8004 		JG	ISUPR
   310	010A2A	CB00 0020 		SHI	R0,20		: Convert lower to upper case
   311	010A2E	0304 		ISUPR	JR	R4
   312				Page  5-3	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   313				: The user typed "H" or "h"
   314				
   315	010A30	E630 FF78 	CMDH	LA	R3,HLPSTR	: Output the "H" message
   316	010A34	482D 0014 		LH	R2,P.PORT,R13
   317	010A38	4150 4001 008C 		JAL	R5,OCS,,	: "Help: Commands are:..."
   318	010A3E	4300 FF22 		J	NEXTC
   319				
   320				: The user typed "?"
   321				
   322	010A42	1EA0 CCE5 E7E1 	HSTR	SC	/ Legal command characters are:/
		ECA0 E3EF EDED 	
		E1EE E4A0 E3E8 	
		E1F2 E1E3 F4E5 	
		F2F3 A0E1 F2E5 	
		BA		
   323	010A62	E630 FFDC 	CMD.	LA	R3,HSTR		: Output the "?" message
   324	010A66	482D 0014 		LH	R2,P.PORT,R13
   325	010A6A	4150 4001 008C 		JAL	R5,OCS,,	: "Legal commands are: "
   326	010A70	C800 0010 		LHI	R0,(CMDLEN/4)*2	: Number of bytes = 2 * number of commands
   327	010A74	481D 0014 		LH	R1,P.PORT,R13
   328	010A78	0820 			LR	R2,R0		: Message type
   329	010A7A	4140 4001 011A 		JAL	R4,SLOR,,	: Start Logical Output Record
   330	010A80	2460 			LIS	R6,0		: Start from beginning of commmand table
   331	010A82	D300 0517 	CMDH1	LB	R0,SPACE+1	: Seperate letters
   332	010A86	4140 4001 0154 		JAL	R4,PUTCH,,
   333	010A8C	D306 FF64 		LB	R0,CMDTAB,R6	: Get command code
   334	010A90	4140 4001 0154 		JAL	R4,PUTCH,,	: Output the character
   335	010A96	2664 			AIS	R6,4		: Each entry in command table is 4 bytes long
   336	010A98	C960 0020 		CHI	R6,CMDLEN	: At end of table?
   337	010A9C	4210 FFE2 		JL	CMDH1		: No, do more
   338	010AA0	4140 F6FE 		JAL	R4,ELOR		: End of Logical Output Record
   339	010AA4	E630 0513 		LA	R3,CRLF
   340	010AA8	482D 0014 		LH	R2,P.PORT,R13
   341	010AAC	4150 4001 008C 		JAL	R5,OCS,,	: Finish with CR LF
   342	010AB2	4300 FEAE 		J	NEXTC
   343				Page  5-4	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   344				: The user typed "D" or "p"
   345				
   346	010AB6	18F5 EDED F9A0 	DSTR	SC	/ummy command goes here"8D"8A/
		E3EF EDED E1EE 	
		E4A0 E7EF E5F3 	
		A0E8 E5F2 E58D 	
		8A		
   347	010AD0	E630 FFE2 	CMDD	LA	R3,DSTR		: Output the "D" message
   348	010AD4	482D 0014 		LH	R2,P.PORT,R13
   349	010AD8	4150 4001 008C 		JAL	R5,OCS,,	: Output "Date is:" (after being patched)
   350	010ADE	4300 FE82 		J	NEXTC
   351				
   352				: The user typed "M" or "m"
   353				
   354	010AE2	1AE5 F3F3 E1E7 	MSTR	SC	/essage from George King:"8D"8A/
		E5A0 E6F2 EFED 	
		A0C7 E5EF F2E7 	
		E5A0 CBE9 EEE7 	
		BA8D 8A		
   355	010AFE	E630 FFE0 	CMDM	LA	R3,MSTR		: Output the "M" message
   356	010B02	482D 0014 		LH	R2,P.PORT,R13
   357	010B06	4150 4001 008C 		JAL	R5,OCS,,	: Output header to the message
   358	010B0C	E610 800C 		LA	R1,SHOMSG	: Address of routine to continue output
   359	010B10	C8A0 0014 		LHI	R10,$A 20	: Do 20 lines at a time
   360	010B14	41C0 FCD0 		JAL	R12,BWNEXT	: Store info on what to do next
   361	010B18	4300 FE48 		J	NEXTC
   362				
   363				: Routine to output GK messages.  Link on R12, count in R10
   364					GL	GETGKM		: Routine in SIO section
   365	010B1C	4140 4000 0000 	SHOMSG	JAL	R4,GETGKM,,	: Get address of next GK message into R3
   366	010B22	430C 0000 		  J	0,R12		: Try again later if no message yet
   367	010B26	482D 0014 		LH	R2,P.PORT,R13
   368	010B2A	4150 4001 008C 		JAL	R5,OCS,,	: Output next line of message
   369	010B30	27A1 			SIS	R10,1
   370	010B32	022C 			JGR	R12		: Come back later for 20 times
   371	010B34	4110 FCC0 		JAL	R1,BPCHEK	: One last check for backpressure
   372	010B38	E630 800E 		LA	R3,MORMSG	: "Type M for more"
   373	010B3C	482D 0014 		LH	R2,P.PORT,R13
   374	010B40	4150 4001 008C 		JAL	R5,OCS,,
   375	010B46	4300 FC9C 		J	BWDONE		: Stop sending messages
   376	010B4A	15A8 F4F9 F0E5 	MORMSG	SC	/(type 'M' for more)"8D"8A/
		A0A7 CDA7 A0E6 	
		EFF2 A0ED EFF2 	
		E5A9 8D8A 	
   377				Page  5-5	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   378				: The user typed "P" or "p"
   379				
   380	010B60	10F2 E5F3 E5EE 	PSTR	SC	/resent time is: /
		F4A0 F4E9 EDE5 	
		A0E9 F3BA A0	
   381	010B72	E630 FFEA 	CMDP	LA	R3,PSTR		: Output the "P" message
   382	010B76	482D 0014 		LH	R2,P.PORT,R13
   383	010B7A	4150 4001 008C 		JAL	R5,OCS,,	: Output "The present time is: "
   384	010B80	4170 8004 		JAL	R7,PTIME
   385	010B84	4300 FDDC 		J	NEXTC
   386				
   387	000520				SEG	A.DATA
   388	000520	0AB0 B0BA B0B0 	TIMSTR	SC	/00:00:00"8D"8A/
		BAB0 B08D 8A	
   389	010B88				SEG	A.CODE
   390				
   391				: Routine to output time of day and CRLF.  Link on R7
   392				
   393	010B88	5830 400F 000C 	PTIME	L	R3,GMT,,	: Get current time of day
   394	010B8E	2448 			LIS	R4,8		: Want to do 8 bytes
   395	010B90	E650 0521 		LA	R5,TIMSTR+1	: Put it right after the byte count
   396	010B94	4160 4001 03DA 		JAL	R6,TMSTMP,,	: Convert GMT to timestamp
   397	010B9A	E630 0520 		LA	R3,TIMSTR
   398	010B9E	482D 0014 		LH	R2,P.PORT,R13
   399	010BA2	4150 4001 008C 		JAL	R5,OCS,,	: Output HH:MM:SS CR LF
   400	010BA8	0307 			JR	R7
   401				
   402				: User typed "Q" or "q"
   403				
   404	010BAA	05F5 E9F4 8D8A 	QSTR	SC	/uit"8D"8A/
   405	010BB0	E630 FFF6 	CMDQ	LA	R3,QSTR		: Output the "Q" message
   406	010BB4	482D 0014 		LH	R2,P.PORT,R13
   407	010BB8	7620 02E4 		RBT	R2,INUSE	: Port is not in use any more
   408	010BBC	4150 4001 008C 		JAL	R5,OCS,,	: "You typed Q to QUIT"
   409	010BC2	E630 04FA 		LA	R3,DETMSG	: Output a DETACH command
   410	010BC6	482D 0014 		LH	R2,P.PORT,R13
   411	010BCA	4150 4001 0070 		JAL	R5,OCM,,	: Output 1 byte message (no byte count)
   412	010BD0	2501 			LCS	R0,1		: One less port in use
   413	010BD2	6100 02EC 		AHM	R0,USECNT
   414	010BD6	4300 FD8A 		J	NEXTC		: Go back looking for more commands
   415				Page  5-6	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   416				: User typed "S" or "s"
   417				
   418	010BDA	11F4 E1F4 F5F3 	SSTR	SC	/tatus of slot at /
		A0EF E6A0 F3EC 	
		EFF4 A0E1 F4A0 	
   419	010BEC	E630 FFEA 	CMDS	LA	R3,SSTR		: Output "S" message
   420	010BF0	482D 0014 		LH	R2,P.PORT,R13
   421	010BF4	4150 4001 008C 		JAL	R5,OCS,,
   422	010BFA	4170 FF8A 		JAL	R7,PTIME	: Output time of day and CRLF
   423	010BFE	5820 0624 		L	R2,ICOUNT	: Number of data bytes (excludes control msg)
   424	010C02	F800 0000 092A 		LI	R0,0920+0A	: 9 bytes, blank fill, decimal
   425	010C08	E610 052C 		LA	R1,BYTEXX	: Where to store them
   426	010C0C	4160 4001 0558 		JAL	R6,OUTNUM,,
   427	010C12	5820 0628 		L	R2,ECOUNT	: Number of echoed bytes
   428	010C16	F800 0000 092A 		LI	R0,0920+0A	: 9 bytes, blank fill, decimal
   429	010C1C	E610 0542 		LA	R1,ECHOXX
   430	010C20	4160 4001 0558 		JAL	R6,OUTNUM,,
   431	010C26	5820 062C 		L	R2,MCOUNT	: Number of multi-byte messages
   432	010C2A	F800 0000 062A 		LI	R0,0620+0A	: 6 bytes, blank fill, decimal
   433	010C30	E610 0559 		LA	R1,MULTXX	: Where to store them
   434	010C34	4160 4001 0558 		JAL	R6,OUTNUM,,
   435	010C3A	482D 0014 		LH	R2,P.PORT,R13
   436	010C3E	E630 052B 		LA	R3,MBSTR	: Output statistics
   437	010C42	4150 4001 008C 		JAL	R5,OCS,,
   438	010C48	5820 4000 051C 		L	R2,BCOUNT,,	: Number of background executions
   439	010C4E	F800 0000 092A 		LI	R0,0920+0A	: 9 bytes, blank fill, decimal
   440	010C54	E610 0576 		LA	R1,BCNTXX
   441	010C58	4160 4001 0558 		JAL	R6,OUTNUM,,
   442	010C5E	5820 4000 0000 		L	R2,SCOUNT,,	: Number of sync bytes sent
   443	010C64	F800 0000 0850 		LI	R0,0840+10	: 8 bytes, zero fill, hex
   444	010C6A	E610 05A5 		LA	R1,SCNTXX
   445	010C6E	4160 4001 0558 		JAL	R6,OUTNUM,,
   446	010C74	482D 0014 		LH	R2,P.PORT,R13
   447	010C78	E630 0575 		LA	R3,BCSTR	: Output background count
   448	010C7C	4150 4001 008C 		JAL	R5,OCS,,
   449	010C82	4300 FCDE 		J	NEXTC
   450				
   451	00052B				SEG	A.DATA
   452	00052B	49 B0B0 B0B0 B0	MBSTR	SC	/000000000 bytes input 000000000 bytes echoed 000000 multi-byte messages
		B0 B0B0 B0A0 E2	**"8D"8A/
		F9 F4E5 F3A0 E9	
		EE F0F5 F4A0 B0	
		B0 B0B0 B0B0 B0	
		B0 B0A0 E2F9 F4	
		E5 F3A0 E5E3 E8	
		EF E5E4 A0B0 B0	
		B0 B0B0 B0A0 ED	
		F5 ECF4 E9AD E2	
		F9 F4E5 A0ED E5	
		F3 F3E1 E7E5 F3	
		8D 8A		
   453	00052C			BYTEXX	EQ	$A MBSTR+1
   454	000542			ECHOXX	EQ	$A BYTEXX+22
Page  5-7	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   455	000559			MULTXX	EQ	$A ECHOXX+23
   456	000575	39 B0B0 B0B0 B0	BCSTR	SC	/000000000 background executions, sync count is 00000000"8D"8A/
		B0 B0B0 B0A0 E2	
		E1 E3EB E7F2 EF	
		F5 EEE4 A0E5 F8	
		E5 E3F5 F4E9 EF	
		EE F3AC A0F3 F9	
		EE E3A0 E3EF F5	
		EE F4A0 E9F3 A0	
		B0 B0B0 B0B0 B0	
		B0 B08D 8A	
   457	000576			BCNTXX	EQ	$A BCSTR+1
   458	0005A5			SCNTXX	EQ	$A BCNTXX+47
   459	010C86				SEG	A.CODE
   460				
   461				: User typed "W" or "w"
   462				
   463	010C86	0FE8 EFA0 ADA0 	WSTR	SC	/ho - you are on/
		F9EF F5A0 E1F2 	
		E5A0 EFEE 	
   464	010C96	E630 FFEC 	CMDW	LA	R3,WSTR		: Output the "W" message
   465	010C9A	482D 0014 		LH	R2,P.PORT,R13
   466	010C9E	4150 4001 008C 		JAL	R5,OCS,,
   467	010CA4	4170 800C 		JAL	R7,PORTIS	: Output " port XX"
   468	010CA8	E610 0513 		LA	R1,CRLF		: Message to output after SYSTAT
   469	010CAC	4140 8026 		JAL	R4,SYSTAT	: Set up to do a systat
   470	010CB0	4300 FCB0 		J	NEXTC
   471				
   472				
   473				: Routine to output port number and CRLF.  Link on R7
   474				
   475	010CB4	F800 0000 0250 	PORTIS	LI	R0,0240+10	: 2 digits, zero fill, hex
   476	010CBA	E610 05B6 		LA	R1,THISXX	: Address of XX in "This is port XX"
   477	010CBE	482D 0014 		LH	R2,P.PORT,R13
   478	010CC2	4160 F892 		JAL	R6,OUTNUM
   479	010CC6	E630 05AF 		LA	R3,GRTSTR	: Output greeting message
   480	010CCA	482D 0014 		LH	R2,P.PORT,R13
   481	010CCE	4150 4001 008C 		JAL	R5,OCS,,
   482	010CD4	0307 			JR	R7
   483				
   484	0005AF				SEG	A.DATA
   485	0005AF	0A A0F0 EFF2 F4	GRTSTR	SC	/ port XX"8D"8A/
		A0 D8D8 8D8A 	
   486	0005B6			THISXX	EQ	$A GRTSTR+7
   487	0005BA	40D4 E8E9 F3A0 	CONSTR	SC	/This is host XX in node XXXX slot X. XX ports in use out of XX"8D"8A/
		E9F3 A0E8 EFF3 	
		F4A0 D8D8 A0E9 	
		EEA0 EEEF E4E5 	
		A0D8 D8D8 D8A0 	
		F3EC EFF4 A0D8 	
		AEA0 D8D8 A0F0 	
		EFF2 F4F3 A0E9 	
		EEA0 F5F3 E5A0 	
Page  5-8	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

		EFF5 F4A0 EFE6 	
		A0D8 D88D 8A	
   488	0005C8			HOSTXX	EQ	$A CONSTR+14
   489	0005D3			NODEXX	EQ	$A HOSTXX+11
   490	0005DD			SLOTXX	EQ	$A NODEXX+10
   491	0005E0			USEDXX	EQ	$A SLOTXX+3
   492	0005F7			MAXPXX	EQ	$A USEDXX+23
   493	0005FB	22 D0EF F2F4 A0	LINSTR	SC	/Port XX came from node XXXX, user /
		D8 D8A0 E3E1 ED	
		E5 A0E6 F2EF ED	
		A0 EEEF E4E5 A0	
		D8 D8D8 D8AC A0	
		F5 F3E5 F2A0 	
   494	000601			PORTXX	EQ	$A LINSTR+6
   495	000613			ONODXX	EQ	$A PORTXX+18
   496	010CD6				SEG	A.CODE
   497				
   498				: Show status (who's logged in).  Link on R4, message in R1
   499				
   500	010CD6	08B1 		SYSTAT	LR	R11,R1		: Copy message pointer to preserved reg
   501	010CD8	E610 8006 		LA	R1,SYST0	: Address of routine
   502	010CDC	41C0 FB08 		JAL	R12,BWNEXT	: Continue at SYST0 next time
   503	010CE0	0304 			JR	R4
   504				
   505				: Show status, called from BWRITE, link on R12
   506				
   507	010CE2	4820 02EC 	SYST0	LH	R2,USECNT	: Number of ports in use
   508	010CE6	F800 0000 022A 		LI	R0,0220+0A	: 2 bytes, blank fill, decimal
   509	010CEC	E610 05E0 		LA	R1,USEDXX	: Address of XX in CONSTR
   510	010CF0	4160 4001 0558 		JAL	R6,OUTNUM,,
   511	010CF6	482D 0014 		LH	R2,P.PORT,R13
   512	010CFA	E630 05BA 		LA	R3,CONSTR	: Point to the configuration message
   513	010CFE	4150 4001 008C 		JAL	R5,OCS,,	: Send string
   514	010D04	E6A0 04B0 		LA	R10,P.LAST	: Point to last port's data
   515				
   516				: Show status of all lines
   517				
   518	010D08	4110 FAEC 	SYST1	JAL	R1,BPCHEK	: Check on backpressure (preserves R10,R11)
   519	010D0C	482A 4000 0014 		LH	R2,P.PORT,R10,	: Get port number
   520	010D12	7420 02E4 		TBT	R2,INUSE	: Check if port is in use
   521	010D16	4330 8052 		JE	SYST2
   522	010D1A	F800 0000 0230 		LI	R0,0220+10	: 2 digits, blank fill, hex
   523	010D20	E610 0601 		LA	R1,PORTXX	: Address in message
   524	010D24	4160 4001 0558 		JAL	R6,OUTNUM,,	: Put port # in LINSTR
   525	010D2A	F800 0000 0448 		LI	R0,0440+08	: 4 digits, zero fill, octal
   526	010D30	E610 0613 		LA	R1,ONODXX
   527	010D34	482A 4000 0018 		LH	R2,P.ONOD,R10,	: Origination node
   528	010D3A	4160 4001 0558 		JAL	R6,OUTNUM,,	: Put port # on LINSTR
   529	010D40	482D 0014 		LH	R2,P.PORT,R13
   530	010D44	E630 05FB 		LA	R3,LINSTR
   531	010D48	4150 4001 008C 		JAL	R5,OCS,,	: Output port number and node number
   532	010D4E	E63A 4000 0025 		LA	R3,P.NAMS,R10,	: Point to user name count field
   533	010D54	482D 0014 		LH	R2,P.PORT,R13
Page  5-9	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Command scanner

   534	010D58	4150 4001 008C 		JAL	R5,OCS,,
   535	010D5E	E630 0513 		LA	R3,CRLF
   536	010D62	482D 0014 		LH	R2,P.PORT,R13
   537	010D66	4150 4001 008C 		JAL	R5,OCS,,	: Finish with CR LF
   538	010D6C	4BA0 04E8 	SYST2	SH	R10,P.SIZE	: Point to previous port's data
   539	010D70	F9A0 0000 02F0 		CI	R10,P.BASE	: Check to see if at beginning already
   540	010D76	4220 FF8E 		JG	SYST1		: Output info for all lines
   541	010D7A	4110 FA7A 		JAL	R1,BPCHEK	: One last check for backpressure
   542	010D7E	083B 			LR	R3,R11		: Done them all, now do trailing message
   543	010D80	482D 0014 		LH	R2,P.PORT,R13
   544	010D84	4150 4001 008C 		JAL	R5,OCS,,	: Send CRLF or "Welcome" message
   545	010D8A	4300 FA58 		J	BWDONE		: End of SYSTAT
   546				Page  6-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Input and echo routines

   547					SUBTTL	Input and echo routines
   548				
   549	00061E				SEG	A.DATA
   550	00061E			HSECHO	HS	MAXPHW		: Bit map for ports needing echo
   551	000620	0000 		NCOUNT	HC	0		: Count of characters in current input message
   552	000624	0000 0000 	ICOUNT	WC	0		: Count of data bytes input from IRING
   553	000628	0000 0000 	ECOUNT	WC	0		: Count of input bytes that were echoed back
   554	00062C	0000 0000 	MCOUNT	WC	0		: Number of multi-byte messages
   555	000630	01D8 		ECHO1C	SC	/X/		: ISIS message to output one character
   556	000631			ECHOR0	EQ	ECHO1C+1	: The character to echo is stored here
   557	000632	02DE D8		ECHO2C	SC	/^X/		: ISIS message to output two characters
   558	000634			ECHO2X	EQ	ECHO2C+2	: Converted character here
   559	000635	02 DEBF 	ECHORB	SC	/^?/		: Echo RUBOUT as up-arrow questionmark
   560	010D8E				SEG	A.CODE
   561				
   562				: Routine to get a character, echoing it if necessary.  Link on R6.
   563				
   564	010D8E	4800 0620 	MYGETC	LH	R0,NCOUNT	: Number of bytes left to process
   565	010D92	2701 			SIS	R0,1
   566	010D94	4210 801E 		JL	MYGET0		: End of this input string
   567	010D98	4000 0620 		STH	R0,NCOUNT
   568	010D9C	2664 			AIS	R6,4		: Set up for skip return
   569	010D9E	4140 4001 0026 		JAL	R4,GETCH,,	: Get next byte
   570	010DA4	482D 0014 		LH	R2,P.PORT,R13
   571	010DA8	7420 061E 		TBT	R2,HSECHO	: Should the host (me) do echoing?
   572	010DAC	0336 			JER	R6		: No, return with character in R0
   573	010DAE	2411 			LIS	R1,1		: Yes, count number of times we echoed
   574	010DB0	5110 0628 		AM	R1,ECOUNT
   575	010DB4	2305 			JFS	MYECHO		: Echo character before returning
   576				
   577	010DB6	4140 4001 0058 	MYGET0	JAL	R4,ELIR,,	: End of logical Input record
   578	010DBC	0306 			JR	R6		: Nonskip return from MYGETC
   579				
   580				: Routine to do host echo.  Character to be echoed in R0, link on R6
   581				
   582	010DBE	D200 0631 	MYECHO	STB	R0,ECHOR0	: Save character to be echoed
   583	010DC2	C400 007F 		NHI	R0,7F		: Clear parity bit before doing compares
   584	010DC6	E630 0635 		LA	R3,ECHORB
   585	010DCA	C900 007F 		CHI	R0,7F		: Check for RUBOUT/DELETE
   586	010DCE	4330 8038 		JE	MYECH1		: It is echoed as ^?
   587	010DD2	C900 0007 		CHI	R0,07		: Check for ^@ ^A ^B ^C ^D ^E ^F
   588	010DD6	4210 8020 		JL	UPECHO		: They are echoed in up-arrow form
   589	010DDA	C900 000D 		CHI	R0,0D		: Check for BL, BS, HT, LF, VT, FF
   590	010DDE	211B 			JLFS	ECHOIT		: They are echoed as themselves
   591	010DE0	E630 0513 		LA	R3,CRLF
   592	010DE4	C900 000D 		CHI	R0,0D		: Check for CR
   593	010DE8	4330 801E 		JE	MYECH1		: It is echoed as CR+LF
   594	010DEC	C900 001F 		CHI	R0,1F		: Check if it looks like a printing char
   595	010DF0	4320 8006 		JLE	UPECHO		: Echo control chars in up-arrow mode
   596	010DF4	E630 0630 	ECHOIT	LA	R3,ECHO1C	: Echo the one character (in ECHOR0)
   597	010DF8	2309 			JFS	MYECH1
   598	010DFA	D300 0631 	UPECHO	LB	R0,ECHOR0	: Get the control character
   599	010DFE	CA00 0040 		AHI	R0,40		: Make it a printing letter
Page  6-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Input and echo routines

   600	010E02	D200 0634 		STB	R0,ECHO2X
   601	010E06	E630 0632 		LA	R3,ECHO2C	: Echo two characters
   602	010E0A	482D 0014 	MYECH1	LH	R2,P.PORT,R13
   603	010E0E	4150 4001 008C 		JAL	R5,OCS,,
   604	010E14	D300 0631 		LB	R0,ECHOR0	: Return character in R0
   605	010E18	0306 			JR	R6		: Return from MYECHO/MYGETC
   606				Page  7-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Ball logic

   607					SUBTTL	Ball logic
   608				: Echo processing:  When a new circuit arrives, we send a B10001 message to
   609				: turn on echo mode.  The CONSAT will send us a green ball, which we return.
   610				: It then sends use a LDEM when it takes over echoing.  When an unechoable
   611				: character is typed, the CONSAT preceeds it with a EDEM, telling us to enter
   612				: deferred echo mode (where we do echoing).  We return any red balls that
   613				: the CONSAT may send us.
   614				
   615				: Enter and Leave Deferred Echo Mode
   616				
   617	010E1A	7510 061E 	CTLEDE	SBT	R1,HSECHO	: Enter DEM - host must echo
   618	010E1E	4300 F99E 		J	BFLUSH		: (message type still in R2)
   619				
   620	010E22	7610 061E 	CTLLDE	RBT	R1,HSECHO	: Leave DEM - CONSAT now doing echo
   621	010E26	4300 F996 		J	BFLUSH		: (message type still in R2)
   622				
   623				: Red and Green Balls (CONSAT uses these as part of echo processing)
   624				
   625	010E2A	D302 400F 0028 	CTLRED	LB	R0,LENGTH,R2,	: Get size from table in SEG F
   626	010E30	4140 F222 		JAL	R4,FLUSH	: Skip past message (in R2)
   627	010E34	482D 0014 		LH	R2,P.PORT,R13
   628	010E38	E630 0503 		LA	R3,REDMSG
   629	010E3C	4150 4001 0070 		JAL	R5,OCM,,	: Reflect red ball as red ball
   630	010E42	4300 F940 		J	BMAIN
   631				
   632	010E46	D302 400F 0028 	CTLGRE	LB	R0,LENGTH,R2,	: Get size from table in SEG F
   633	010E4C	4140 F206 		JAL	R4,FLUSH	: Skip past message (in R2)
   634	010E50	482D 0014 		LH	R2,P.PORT,R13
   635	010E54	E630 0500 		LA	R3,GREMSG
   636	010E58	4150 4001 0070 		JAL	R5,OCM,,	: Reflect green ball as green ball
   637	010E5E	4300 F924 		J	BMAIN
   638				
   639				: Yellow and Orange Balls:  Whenever we get a yellow ball, we send back
   640				: an orange ball so the CONSAT knows that all input has been received.
   641				: When we send a yellow ball, we set a bit in OBWAIT and wait for an
   642				: orange ball to come back from the CONSAT, indicating that it has
   643				: received all our output data.
   644				
   645	010E62	D302 400F 0028 	CTLYEL	LB	R0,LENGTH,R2,	: Get size from table in SEG F
   646	010E68	4140 F1EA 		JAL	R4,FLUSH	: Skip past message (in R2)
   647	010E6C	482D 0014 		LH	R2,P.PORT,R13
   648	010E70	E630 0509 		LA	R3,ORAMSG
   649	010E74	4150 4001 0070 		JAL	R5,OCM,,	: Reflect yellow ball as orange ball
   650	010E7A	4300 F908 		J	BMAIN
   651				
   652	010E7E	7610 02E6 	CTLORA	RBT	R1,OBWAIT	: No longer waiting for an orange ball
   653	010E82	4300 F93A 		J	BFLUSH		: (message type still in R2)
   654				Page  8-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Zaps and backpressure

   655					SUBTTL	Zaps and backpressure
   656				: The bit 0002 in CNTRL says that ports are new reusable until they emit
   657				: disconnect, the Dispatcher wants us to return zappers.
   658				
   659	010E86	7610 02E4 	CTLZAP	RBT	R1,INUSE	: Turn off the in-use bit
   660	010E8A	2501 			LCS	R0,1		: One less port in use
   661	010E8C	6100 02EC 		AHM	R0,USECNT
   662	010E90	D302 400F 0028 		LB	R0,LENGTH,R2,
   663	010E96	4140 4001 0056 		JAL	R4,FLUSH,,	: Remove zapper from IRING
   664	010E9C	482D 0014 		LH	R2,P.PORT,R13
   665	010EA0	E630 04FD 		LA	R3,ZAPMSG	: The dispatcher wants to see a zap back
   666	010EA4	4150 4001 0070 		JAL	R5,OCM,,
   667	010EAA	4300 F8D8 		J	BMAIN
   668				
   669				: Stop sending when backpressure is turned on
   670				
   671	010EAE	7510 02EA 	CTLBPN	SBT	R1,BPRESS	: Stop BWRITE from sending anything more
   672	010EB2	4300 F90A 		J	BFLUSH
   673				
   674				: Resume when backpressure is turned off
   675				
   676	010EB6	7610 02EA 	CTLBPF	RBT	R1,BPRESS	: Turn off bit so that BWRITE will continue
   677	010EBA	4300 F902 		J	BFLUSH
   678				
   679				: Set new transmit limit
   680				
   681	010EBE	4140 4001 0036 	CTLLIM	JAL	R4,GETH,,	: Pick up the B9 and the limit byte
   682	010EC4	D20D 0034 		STB	R0,P.SLIM,R13	: This is the new send limit
   683	010EC8	4140 4001 0058 		JAL	R4,ELIR,,	: Tell FRING that we got the whole message
   684	010ECE	4300 F8B4 		J	BMAIN
   685				Page  8-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.R03		 Zaps and backpressure

   686				: Process control messages from the IRING.  Port in R1, type in R2.  R13 set up
   687				
   688	010ED2	C840 0028 	BCNTRL	LHI	R4,CTLLEN	: Size of table to check
   689	010ED6	2744 		CTLCHK	SIS	R4,4		: Stop at end of table
   690	010ED8	4210 F8E4 		JL	BFLUSH		: Ignore messages not in our table
   691	010EDC	D304 8014 		LB	R0,CTLTAB,R4	: Get code
   692	010EE0	0902 			CR	R0,R2		: Match message type?
   693	010EE2	4230 FFF0 		JN	CTLCHK		: Loop if not
   694	010EE6	5864 800A 		L	R6,CTLTAB,R4	: Get dispatch address
   695	010EEA	F460 00FF FFFF 		NI	R6,00FFFFFF	: Mask off code, leave only 24-bit address
   696	010EF0	0306 			JR	R6		: Go to routine
   697				
   698				XX	MACRO(CH,ADDR)	[WC CH*01000000+ADDR]	: Combine CH and address
   699				
   700				XCTLX	MACRO	[	: Control messages we are expecting
					XX(09F,CTLZAP)		: Zapper
					XX(0A0,CTLBPN)		: Backpressure oN
					XX(0A1,CTLBPF)		: Backpressure oFf
					XX(0A6,CTLEDE)		: Enter Deferred Echo Mode
					XX(0A7,CTLLDE)		: Leave Deferred Echo Mode
					XX(0AA,CTLGRE)		: Green Ball
					XX(0AB,CTLRED)		: Red Ball
					XX(0AC,CTLYEL)		: Yellow Ball
					XX(0AD,CTLORA)		: Orange Ball
				:*:	XX(0B1,CTLTTY)		: Terminal parameters
					XX(0B9,CTLLIM)		: Set transmit Limit
					]
   701				
   702	010EF4			CTLTAB	WS	0		: Must start on a word boundary
   703					XCTLX[	: Control messages we are expecting
   704	010EF4	9F01 0E86 		XX(09F,CTLZAP)[WC 09F*01000000+CTLZAP]		: Zapper
   705	010EF8	A001 0EAE 		XX(0A0,CTLBPN)[WC 0A0*01000000+CTLBPN]		: Backpressure oN
   706	010EFC	A101 0EB6 		XX(0A1,CTLBPF)[WC 0A1*01000000+CTLBPF]		: Backpressure oFf
   707	010F00	A601 0E1A 		XX(0A6,CTLEDE)[WC 0A6*01000000+CTLEDE]		: Enter Deferred Echo Mode
   708	010F04	A701 0E22 		XX(0A7,CTLLDE)[WC 0A7*01000000+CTLLDE]		: Leave Deferred Echo Mode
   709	010F08	AA01 0E46 		XX(0AA,CTLGRE)[WC 0AA*01000000+CTLGRE]		: Green Ball
   710	010F0C	AB01 0E2A 		XX(0AB,CTLRED)[WC 0AB*01000000+CTLRED]		: Red Ball
   711	010F10	AC01 0E62 		XX(0AC,CTLYEL)[WC 0AC*01000000+CTLYEL]		: Yellow Ball
   712	010F14	AD01 0E7E 		XX(0AD,CTLORA)[WC 0AD*01000000+CTLORA]		: Orange Ball
   713				:*:	XX(0B1,CTLTTY)		: Terminal parameters
   714	010F18	B901 0EBE 		XX(0B9,CTLLIM)[WC 0B9*01000000+CTLLIM]		: Set transmit Limit
   715					]			: Create command table
   716	000028			CTLLEN	EQ	.-CTLTAB	: Number of bytes in command table
   717					KILL	XCTLX,XX
   718				
   719				
   720				
   721				::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
   722				::									    ::
   723				::  End of JS2033.R03(..MAIN), the foreground code is in JS2033.F03(FMAIN)  ::
   724				::									    ::
   725				::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Page  9-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 FMAIN - JS2033.F03 - This is the foreground for Joe's slot

   726					SUBTTL	FMAIN - JS2033.F03 - This is the foreground for Joe's slot
   727					
   728					GL	FSTART,FCHECK		: Entry points (called from background)
   729					GL	SCOUNT,FCOUNT		: Global variables (defined here)
   730					GL	LUASYN,LUSYNC,LUSIO	: Defined in slot's TYM file
   731				
   732	010F1C				SEG	A.CODE
   733					MO	.,FMAIN		: Start of module FMAIN
   734				
   735				
   736				: Start up the foreground process
   737				
   738	010F1C	24D0 		FSTART	LIS	R13,0		: Reset counter
   739	010F1E	50D0 0638 		ST	R13,FCOUNT
   740	010F22	41D0 8358 		JAL	R13,INIASY	: Start up async
   741	010F26	41D0 8170 		JAL	R13,INISYN	: Start up sync
   742	010F2A	41D0 8046 		JAL	R13,INISIO	: Start up SIO
   743	010F2E	E100 0000 		SVC	DISMIS,0	: Fall into FMAIN
   744				
   745				: Main loop for foreground process
   746				
   747	010F32	2400 		FMAIN	LIS	R0,0		: Main foreground loop starts here
   748	010F34	4000 063C 		STH	R0,BUSY		: Clear flag (nonzero means don't dismiss)
   749	010F38	41D0 839E 		JAL	R13,DOASYI	: Handle async input
   750	010F3C	41D0 8410 		JAL	R13,DOASYO	: Handle async output
   751	010F40	41D0 81D8 		JAL	R13,DOSYNI	: Handle sync input
   752	010F44	41D0 81DE 		JAL	R13,DOSYNO	: Handle sync output
   753	010F48	41D0 808C 		JAL	R13,DOSIOI	: Handle SIO input
   754	010F4C	41D0 808A 		JAL	R13,DOSIOO	: Handle SIO output
   755	010F50	2401 			LIS	R0,1
   756	010F52	5100 0638 		AM	R0,FCOUNT	: Count times thru here
   757	010F56	4800 063C 		LH	R0,BUSY		: Did any routine indicate it did some I/O?
   758	010F5A	4230 FFD4 		JN	FMAIN		: Yes, loop back immediately
   759	010F5E	E100 0000 		SVC	DISMIS,0	: No, don't be a foreground hog
   760	010F62	4300 FFCC 		J	FMAIN
   761				
   762				: Background routine.  Called from BMAIN whenever background runs.
   763				
   764	010F66	41C0 8416 	FCHECK	JAL	R12,CHKASY	: Check for async work
   765	010F6A	41C0 8236 		JAL	R12,CHKSYN	: Check for sync work
   766	010F6E	41C0 806A 		JAL	R12,CHKSIO	: Check for SIO work
   767	010F72	030D 			JR	R13		: End of FCHECK
   768				
   769	000638				SEG	A.DATA
   770	000638	0000 0000 	FCOUNT	WC	0		: Foreground execution count
   771	00063C	0000 		BUSY	HC	0		: Nonzero if more to do in foreground loop
   772	010F74				SEG	A.CODE
   773				Page  10-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 SIO routines

   774					SUBTTL	SIO routines
   775				:-----------------------------------------------------------------------
   776				:  Start of SIO LAB assignment.  10-Nov-88
   777				:  Send X.GK handshake messages, then get back the secret message.
   778				:-----------------------------------------------------------------------
   779				
   780	00AAAA			GKHEAD	EQ	0AAAA		: X.GK records start with this header
   781	00B1B1			GKHERE	EQ	0B1B1		: X.GK "I'm here and want to talk"
   782	00C2C2			GKHEAR	EQ	0C2C2		: X.GK "I hear you"
   783	00D3D3			GKSEND	EQ	0D3D3		: X.GK "Send me a line"
   784	00E4E4			GKLINE	EQ	0E4E4		: X.GK "Here it is", length in next byte
   785	000100			GKSIZE	EQ	100		: Size of each input record (256 bytes)
   786				
   787	00063E				SEG	A.DATA		: SIO data
   788	000700			SIOBEG	BND	100		: Start on a page boundary
   789	000700			SIOSTS	HS	7		: 6 bytes SIO, 4 bytes status, 4 bytes time
   790				
   791	000710				BND	10
   792	000710	0003 0018 	SIORES	HC 3,0018 : WR0, channel reset
   793	000714	0003 1420 		HC 3,1420 : reset ext st, WR4, 1xClock + SDLC + 8bit sync + no parity
   794	000718	0003 1100 		HC 3,1100 : reset ext st, WR1, disable all interrupts
   795	00071C	0003 03D8 		HC 3,03D8 : WR3, 8bit Rx, RxCRC enable, (Rx disabled)
   796	000720	0003 05EB 		HC 3,05EB : WR5, 8bit Tx, TxCRC enable, Tx enable, DTR, RTS
   797	000724	0003 877E 		HC 3,877E : reset TxCRC, WR7, set sync byte to 7E (SDLC)
   798	000728	0003 13D9 		HC 3,13D9 : reset ext int, WR3, Rx enable, enter hunt mode
   799	00072C	0000 0000 		HC 0,0    : End of SIO programming
   800				
   801	000730				BND	10
   802	000730	0003 0409 	SIOSIN	HC	3,SIOREC*8+1	: Number of halfwords in buffer
   803	000734	0001 007A 		HC	1,SIOBUF/10	: Address of SIO buffer
   804	000738	0000 0000 		HC	0,0
   805				
   806	000740				BND	10
   807	000740			SIOCMD	WS	10		: Room for building output command list
   808				
   809	000780				BND	10
   810	000780	0004 		TXHERE	HC	4		: 4 bytes in this output record
   811	000782	AAAA B1B1 		HC	GKHEAD,GKHERE	: AAAA,B1B1
   812								: 5 halfwords between here and next BND 10
   813	000786	0000 		FRGKMT	HC	0		: Last record type from X.GK
   814	000788	0000 0000 	FROMGK	WC	0		: Pointer to record received from X.GK
   815				
   816	000790				BND	10
   817	000790	0004 		TXSEND	HC	4		: 4 bytes in this output record
   818	000792	AAAA D3D3 		HC	GKHEAD,GKSEND	: AAAA,D3D3
   819								: 5 halfwords between here and next BND 10
   820	000796	0000 		TOGKMT	HC	0		: Last record type sent to X.GK	
   821				
   822	000081			SIOREC	EQ	1+GKSIZE/2	: Halfwords in a record (including count)
   823	0007A0				BND	10		: Must start on a quadword boundary
   824	0007A0			SIOBUF	HS	SIOREC*8+1	: Room for 8 records with counts
   825	000FB2	0000 		SIOPTR	HC	0		: Pointer to where we left off
   826				
Page  10-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 SIO routines

   827	000FC0			SIOEND	BND	10		: End of SIO data
   828	010F74				SEG	A.CODE
   829				
   830				: Initialize and start SIO
   831				
   832	010F74	2412 		INISIO	LIS	R1,LUSIO	: Logical unit number
   833	010F76	E620 0700 		LA	R2,SIOBEG	: Beginning of SIO window
   834	010F7A	E630 0FC0 		LA	R3,SIOEND	: End of SIO window
   835	010F7E	E640 0700 		LA	R4,SIOSTS	: Where to store status
   836	010F82	E130 0091 		SVC	IO,090+R1	: Connect SIO motherboard
   837	010F86	41A0 4001 0204 		  JAL	R10,CRASH,,	: Should not fail
   838				
   839				: Reset the SIO chip and reprogram it
   840				
   841	010F8C	2412 		ISIO2	LIS	R1,LUSIO
   842	010F8E	E620 0710 		LA	R2,SIORES	: Address of command list
   843	010F92	E130 00A1 		SVC	IO,0A0+R1	: Force SIO output
   844	010F96	4300 801A 		  J	ISIO2X		: It might be busy
   845				
   846				: Tell SIO where the input buffer is
   847				
   848	010F9A	2412 		ISIO3	LIS	R1,LUSIO
   849	010F9C	E620 0730 		LA	R2,SIOSIN	: Address of command list
   850	010FA0	E130 00B1 		SVC	IO,0B0+R1	: Connect SIO input
   851	010FA4	4300 801E 		  J	ISIO3X		: It might be busy
   852				
   853	010FA8	2410 			LIS	R1,0
   854	010FAA	5010 0740 		ST	R1,SIOCMD	: Mark command list as being available
   855	010FAE	5010 0FB2 		ST	R1,SIOPTR	: Reset pointer into SIOBUF
   856	010FB2	030D 			JR	R13		: SIO is ready
   857				
   858	010FB4	E100 0000 	ISIO2X	SVC	DISMIS,0	: Dismiss in case it was busy
   859	010FB8	F910 0000 3002 		CI	R1,0003000+LUSIO
   860	010FBE	4330 FFCA 		JE	ISIO2		: Try again if motherboard was busy
   861	010FC2	41A0 F23E 		JAL	R10,CRASH	: Die if any other error
   862				
   863	010FC6	E100 0000 	ISIO3X	SVC	DISMIS,0	: Dismiss in case it was busy
   864	010FCA	F910 0000 3002 		CI	R1,0003000+LUSIO
   865	010FD0	4330 FFC6 		JE	ISIO3		: Try again if motherboard was busy
   866	010FD4	41A0 F22C 		JAL	R10,CRASH	: Die if any other error
   867				
   868				
   869	010FD8	030D 		DOSIOI	JR	R13		: No SIO input yet
   870	010FDA	030D 		DOSIOO	JR	R13		: No SIO output yet
   871	010FDC	030C 		CHKSIO	JR	R12		: No SIO background
   872				
   873				: Routine to get next GK message.  Returns pointer in R3.  Link on R4
   874					GL	GETGKM
   875	010FDE	4810 0796 	GETGKM	LH	R1,TOGKMT	: Look at last GK message we sent
   876	010FE2	4230 800A 		JN	GETGK1		: Jump if not first time
   877	010FE6	E610 0780 		LA	R1,TXHERE	: B1B1
   878	010FEA	4130 8068 		JAL	R3,SENDGK	: Send this message out
   879	010FEE	0304 			JR	R4		: Nonskip return means come back later
Page  10-3	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 SIO routines

   880				
   881	010FF0	C910 B1B1 	GETGK1	CHI	R1,GKHERE	: Did we send "I am here"
   882	010FF4	4230 8014 		JN	GETGK2		: Continue if not
   883	010FF8	4810 0786 		LH	R1,FRGKMT	: Look at last from-GK message type
   884	010FFC	C910 C2C2 		CHI	R1,GKHEAR	: Did GK say "I hear you"? (C2C2)
   885	011000	0234 			JNR	R4		: Nonskip return until it arrives
   886	011002	E610 0790 		LA	R1,TXSEND	: D3D3
   887	011006	4130 804C 		JAL	R3,SENDGK	: Send this message out
   888	01100A	0304 			JR	R4		: Nonskip return to come back later
   889				
   890	01100C	C910 D3D3 	GETGK2	CHI	R1,GKSEND	: Did we ask for a line?
   891	011010	4230 801A 		JN	GETGK3		: Error if not
   892	011014	4810 0786 		LH	R1,FRGKMT	: Look at last from-GK message type
   893	011018	C910 E4E4 		CHI	R1,GKLINE	: Is it a line?
   894	01101C	0234 			JNR	R4		: Nonskip return until it arrives
   895	01101E	E610 0790 		LA	R1,TXSEND	: Ask for the next line now
   896	011022	4130 8030 		JAL	R3,SENDGK
   897	011026	5830 0788 		L	R3,FROMGK	: Point to the message (in SC format)
   898	01102A	4304 0004 		J	4,R4		: Skip return indicates message in R3
   899				
   900	01102E	E630 8004 	GETGK3	LA	R3,GETGK4	: Return error message
   901	011032	4304 0004 		J	4,R4
   902	011036	1FBD BDA0 C5F2 	GETGK4	SC	/== Error in X.GK handshake =="8D"8A/
		F2EF F2A0 E9EE 	
		A0D8 AEC7 CBA0 	
		E8E1 EEE4 F3E8 	
		E1EB E5A0 BDBD 	
		8D8A 		
   903				
   904				: Routine to send an X.GK message.  R1 has addr of buffer, Link on R3.
   905				
   906	011056	4801 0004 	SENDGK	LH	R0,4,R1		: Get message type being sent
   907	01105A	4000 0796 		STH	R0,TOGKMT	: Remember this to-GK message type
   908	01105E	1014 			SRLS	R1,4		: Divide by 16 (get quadword address)
   909	011060	FA10 0001 0000 		AI	R1,00010000	: Make it an output command
   910	011066	5010 0740 		ST	R1,SIOCMD+0	: Point to output buffer
   911	01106A	2400 			LIS	R0,0
   912	01106C	5000 0741 		ST	R0,SIOCMD+1	: End of command list
   913	011070	4000 0786 		STH	R0,FRGKMT	: Zero this so we can see it come in
   914	011074	2412 		SENDG0	LIS	R1,LUSIO
   915	011076	E620 0740 		LA	R2,SIOCMD	: Address of command list
   916	01107A	E130 00A1 		SVC	IO,0A0+R1	: Force SIO output
   917	01107E	4300 8002 		  J	SENDG1		: Check for busy
   918	011082	0303 			JR	R3		: OK
   919				
   920	011084	E100 0000 	SENDG1	SVC	DISMIS,0	: Dismiss in case of busy
   921	011088	F910 0003 0002 		CI	R1,00030000+LUSIO
   922	01108E	4330 FFE2 		JE	SENDG0		: Try again if busy
   923	011092	41A0 F16E 		JAL	R10,CRASH	: Die otherwise
   924	011096	0000 0C80 		  BC	0,0,4*R3,80	: Crash type 80, R3 has the link address
   925				Page  11-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Sync routines

   926					SUBTTL	Sync routines
   927				:-----------------------------------------------------------------------
   928				:  Start of SYNC LAB assignment.  7-Nov-88
   929				:  Send a constant stream of data out the sync port.  A loop-back
   930				:  connector will cause the data to be seen in the input buffer.
   931				:  The data being sent is 16 bits from the count of times thru here.
   932				:-----------------------------------------------------------------------
   933				
   934	000FC0				SEG	A.DATA		: SYNC buffers
   935				
   936	000FC0	0000 		SYNIPT	HC	0		: SYNIBF empty pointer
   937	000200			SYNISZ	EQ	200		: 512 input bytes (does not include index)
   938	000FC2			SYNIBF	HS	1+(SYNISZ/2)	: Sync input buffer, halfword aligned
   939	0011C4	5555 			HC	5555		: (to verify buffer does not overflow)
   940				
   941	000200			SYNOSZ	EQ	200		: 512 bytes for each output buffer
   942	0011C6			SYNBF1	HS	SYNOSZ/2	: 1st output buffer
   943	0013C6			SYNBF2	HS	SYNOSZ/2	: 2nd output buffer
   944	0015C6			SYNBF3	HS	SYNOSZ/2	: 3rd output buffer
   945	0017C6			SYNBF4	HS	SYNOSZ/2	: 4th output buffer
   946				
   947	000000			CMD	EQ	0		: Offsets into rotor list below
   948	000002			CNT	EQ	2
   949	000004			ADR	EQ	4
   950	0019C8				BND	4		: This must start on a word boundary
   951	0019C8	0001 		RTLST1	HC	1		: Output command
   952	0019CA	0200 			HC	SYNOSZ		: Byte count
   953	0019CC	0000 11C6 		WC	SYNBF1		: Address of buffer
   954	0019D0	0001 		RTLST2	HC	1		: Output command
   955	0019D2	0200 			HC	SYNOSZ		: Byte count
   956	0019D4	0000 13C6 		WC	SYNBF2		: Address of buffer
   957	0019D8	0002 		RTLST3	HC	2		: Jump command
   958	0019DA	0000 			HC	0
   959	0019DC	0000 19C8 		WC	RTLST1		: Where to jump to
   960				
   961				: Addresses of buffers to be put into the rotor list.
   962				: Foreground: put old buffer in EMPTY, grab new one from FULL.
   963				: Background: grab buffer from EMPTY, put in FILL and zero FILLPT.
   964				: Background: when FILLPT is full, put buffer in FULL.
   965				
   966	0019E0	0000 0000 	SCOUNT	WC	0		: Counter for sending sync data
   967	0019E4	0000 0000 	FULL	WC	0		: Next buffer to send
   968	0019E8	0000 15C6 	FILL	WC	SYNBF3		: Buffer being filled
   969	0019EC	0000 17C6 	EMPTY	WC	SYNBF4		: Next buffer to fill
   970	0019F0	0000 		FILLPT	HC	0		: Pointer into FILL buffer
   971				
   972	01109A				SEG	A.CODE
   973				Page  11-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Sync routines

   974				: Start up SYNC line
   975				
   976	01109A	2411 		INISYN	LIS	R1,LUSYNC	: Logical unit number
   977	01109C	E620 4000 0FC2 		LA	R2,SYNIBF,,	: Input buffer
   978	0110A2	C830 0200 		LHI	R3,SYNISZ	: Size (including index)
   979	0110A6	E130 0001 		SVC	IO,CSYNI.*10+R1	: Connect sync input
   980	0110AA	4300 F156 		  J	CRASH		: Should never fail
   981	0110AE	E100 0000 		SVC	DISMIS,0
   982	0110B2	F800 0001 0200 		LI	R0,1*10000+SYNOSZ : Make sure the rotor list
   983	0110B8	5000 4000 19C8 		ST	R0,RTLST1+CMD,,	:  is properly set up,
   984	0110BE	5000 4000 19D0 		ST	R0,RTLST2+CMD,,	:  incase slot is restarted
   985	0110C4	2402 			LIS	R0,2
   986	0110C6	4000 4000 19D8 		STH	R0,RTLST3+CMD,,
   987	0110CC	F800 0000 11C6 		LI	R0,SYNBF1	: Put buffer address in the right places
   988	0110D2	5000 4000 19CC 		ST	R0,RTLST1+ADR,,
   989	0110D8	F800 0000 13C6 		LI	R0,SYNBF2
   990	0110DE	5000 4000 19D4 		ST	R0,RTLST2+ADR,,
   991	0110E4	F800 0000 15C6 		LI	R0,SYNBF3
   992	0110EA	5000 4000 19E8 		ST	R0,FILL,,
   993	0110F0	F800 0000 17C6 		LI	R0,SYNBF4
   994	0110F6	5000 4000 19EC 		ST	R0,EMPTY,,
   995	0110FC	2400 			LIS	R0,0
   996	0110FE	5000 19E4 		ST	R0,FULL		: No buffer is full yet
   997	011102	5000 19F0 		ST	R0,FILLPT	: Start at beginning of FILL buffer
   998	011106	5000 19E0 		ST	R0,SCOUNT	: Clear background count
   999					
  1000	01110A	2411 			LIS	R1,LUSYNC	: Logical unit number
  1001	01110C	E620 4000 19C8 		LA	R2,RTLST1,,	: Address of rotor list
  1002	011112	E130 0011 		SVC	IO,CSYNO.*10+R1	: Connect sync output
  1003	011116	4300 F0EA 		  J	CRASH		: Should never fail
  1004	01111A	030D 			JR	R13		: End of INISYN
  1005				
  1006				: Sync input routine
  1007				
  1008	01111C	4800 0FC2 	DOSYNI	LH	R0,SYNIBF	: Get the index
  1009	011120	4000 0FC0 		STH	R0,SYNIPT	: Pretend that we read all the data
  1010	011124	030D 			JR	R13		: End of DOSYNI
  1011				Page  11-3	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Sync routines

  1012				: Resume sync output.  Link on R13
  1013				
  1014	011126	4800 4000 19C8 	DOSYNO	LH	R0,RTLST1+CMD,,	: Check if we are caught up
  1015	01112C	4A00 4000 19D0 		AH	R0,RTLST2+CMD,,
  1016	011132	4A00 4000 19D8 		AH	R0,RTLST3+CMD,,
  1017	011138	C900 0004 		CHI	R0,1+1+2	: All values correct?
  1018	01113C	033D 			JER	R13		: Yes, all caught up, go dismiss
  1019				
  1020				: At least one of the commands in the rotor list needs to be reset
  1021				
  1022	01113E	2412 			LIS	R1,2
  1023	011140	4010 063C 		STH	R1,BUSY		: Set the "more to do" flag
  1024	011144	4010 4000 19D8 		STH	R1,RTLST3,,	: Fix the transfer command
  1025	01114A	E610 4000 19C8 		LA	R1,RTLST1,,	: Check the first command
  1026	011150	4120 800E 		JAL	R2,SWAPSN	: Swap pointers
  1027	011154	E610 4000 19D0 		LA	R1,RTLST2,,	: Check the second command
  1028	01115A	4120 8004 		JAL	R2,SWAPSN	: Swap pointers
  1029	01115E	4300 FFC4 		J	DOSYNO		: Double check all 3 again before dismissing
  1030				
  1031				: Here to swap pointers between an empty pointer and a full one, link on R2.
  1032				
  1033	011162	4801 0000 	SWAPSN	LH	R0,CMD,R1	: Check the command HW
  1034	011166	0232 			JNR	R2		: Proceed only if command is zero
  1035	011168	5800 19E4 		L	R0,FULL		: Is there a full buffer read to go?
  1036	01116C	4330 801A 		JE	SWAPNO		: Zero means no new buffer
  1037	011170	5831 0004 		L	R3,ADR,R1	: Get old buffer address
  1038	011174	5030 19EC 		ST	R3,EMPTY	: This buffer is now empty
  1039	011178	5001 0004 		ST	R0,ADR,R1	: Store new buffer address
  1040	01117C	2400 			LIS	R0,0		: Zero means that
  1041	01117E	5000 19E4 		ST	R0,FULL		:  the full buffer has been taken
  1042	011182	2401 		SWAPOK	LIS	R0,1		: Reset the command code
  1043	011184	4001 0000 		STH	R0,CMD,R1
  1044	011188	0302 			JR	R2		: Swap is done
  1045				
  1046	01118A	C800 FFFF 	SWAPNO	LHI	R0,0FFFF	: No new buffer, reuse the old one
  1047	01118E	C830 0200 		LHI	R3,SYNOSZ	:  after writing FF in all bytes
  1048	011192	5841 0004 		L	R4,ADR,R1	:  of the buffer
  1049	011196	2732 		SWAPFL	SIS	R3,2
  1050	011198	4210 FFE6 		JL	SWAPOK		: Reset command code when done
  1051	01119C	4004 4300 0000 		STH	R0,0,R4,R3	: Store 2 bytes of FF
  1052	0111A2	2206 			JBS	SWAPFL
  1053				Page  11-4	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Sync routines

  1054				: Enter here to do processing the in background on behalf of the foreground.
  1055				: Called from the background's main loop, link on R12.
  1056				
  1057	0111A4	4130 8016 	CHKSYN	JAL	R3,CSROOM	: Check if room to do sync output
  1058	0111A8	430C 0000 		  J	0,R12		: Can't do anything at this time
  1059				
  1060	0111AC	2401 			LIS	R0,1		: Count number of times thru here
  1061	0111AE	5A00 19E0 		A	R0,SCOUNT
  1062	0111B2	5000 19E0 		ST	R0,SCOUNT
  1063	0111B6	4140 8036 		JAL	R4,STOR0	: Store this number in the output buffer
  1064	0111BA	4300 FFE6 		J	CHKSYN		:*HACK* CONSTANTLY FILL UP OUTPUT BUFFERS
  1065				
  1066				: Check if room to do sync output.  Link on R3, skip if OK.
  1067				: There are 4 buffers and 5 positions, RTLST1, RTLST2, FULL, FILL, EMPTY.
  1068				: Exactly 1 of FULL, FILL, and EMPTY will always be zero.
  1069				
  1070	0111BE	4800 19F0 	CSROOM	LH	R0,FILLPT	: Get current fill pointer
  1071	0111C2	C900 0200 		CHI	R0,SYNOSZ	: Check if current buffer is full
  1072	0111C6	4213 0004 		JL	4,R3		: Not full, ok to proceed (skip return)
  1073	0111CA	5800 19E4 		L	R0,FULL		: Current buffer is full, check previous buf
  1074	0111CE	0233 			JNR	R3		: Nonskip return if it is also full
  1075	0111D0	5810 19E8 		L	R1,FILL		: Take the just filled buffer
  1076	0111D4	5010 19E4 		ST	R1,FULL		:  and put it in the FULL position
  1077	0111D8	5810 19EC 		L	R1,EMPTY	: Take the EMPTY buffer
  1078	0111DC	5010 19E8 		ST	R1,FILL		:  and make it be the one to be filled
  1079	0111E0	4330 F020 		JE	CRASH		: EMTPY should not be zero when FULL is zero
  1080	0111E4	4000 19F0 		STH	R0,FILLPT	: R0 still has a zero in it
  1081	0111E8	5000 19EC 		ST	R0,EMPTY	: This buffer is taken
  1082	0111EC	4303 0004 		J	4,R3		: OK to proceed (skip return)
  1083				
  1084				: Put 2 bytes of R0 into output buffer.  Link on R4
  1085				
  1086	0111F0	5810 19E8 	STOR0	L	R1,FILL		: Point to buffer to be filled
  1087	0111F4	4820 19F0 		LH	R2,FILLPT	: Get the fill pointer
  1088	0111F8	4001 4200 0000 		STH	R0,0,R1,R2	: Store in buffer that R1 points to
  1089	0111FE	2622 			AIS	R2,2		: 2 bytes per halfword
  1090	011200	4020 19F0 		STH	R2,FILLPT
  1091	011204	4130 FFB6 		JAL	R3,CSROOM	: Send buffer now if it is full
  1092	011208	4200 0000 		  NOP			: Don't care if no room
  1093	01120C	0304 			JR	R4		: Return from STOR0
  1094				Page  12-1	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Async routines

  1095					SUBTTL	Async routines
  1096				:-----------------------------------------------------------------------
  1097				:  Start of ASYNC LAB assignment.  9-Nov-88
  1098				:  Set port 0 to 1200 baud, enable it, and output " OK ".  (Note: there
  1099				:  is a delay of about 5 seconds between startup and when ISIS sets DTR.)
  1100				:  Ignore all input from that port until a break is received.  Once the
  1101				:  break signal has ended, output a welcome message and then enable echo.
  1102				:  Be sure to echo CR as CR+LF.
  1103				:-----------------------------------------------------------------------
  1104				
  1105					GL	IZASYN,AGCI,AWCI,AWCP	: Routines in ARING.LIB
  1106					GL	NGRP,RBS,NAPORT		: Equates from ARING.LIB
  1107					GL	DSR,DTR,CP,TAM,TOPORT,FPORT,ARING	: Variables from ARING
  1108	000000			LUASYN	EQ	0		: Logical unit for 1st async group
  1109				
  1110	0019F2				SEG	A.DATA
  1111	0019F2			ASECHO	HS	NGRP		: Async echo needed when bit is set
  1112	0019F4	0000 		APORT	HC	0		: Port number that needs output
  1113	0019F6	0000 		ACOUNT	HC	0		: Count of bytes left to be output
  1114	0019F8	0000 0000 	APOINT	WC	0		: Address of bytes left to be output
  1115	01120E				SEG	A.CODE
  1116				
  1117				: Start of program
  1118				
  1119	01120E	41D0 806C 	START	JAL	R13,INIASY	: Initialize and start async
  1120	011212	E100 0000 	LOOP	SVC	DISMIS,0	: Give other slots a chance to run
  1121	011216	41D0 80C0 		JAL	R13,DOASYI	: Do async input
  1122	01121A	41D0 8132 		JAL	R13,DOASYO	: Do async output
  1123	01121E	4300 FFF0 		J	LOOP
  1124				
  1125				: Messages to be sent
  1126				
  1127	011222	0A00 9500 B500 	ASINIT	SC /"00"95"00"B5"00"E0 OK / :IBAUD=1200, OBAUD=1200, connect
		E0A0 CFCB A0	
  1128	01122D	4F 8D8A D7E5 EC	WELCOM	SC /"8D"8AWelcome to Joe's ASYNC test slot.  This message is more than 14 bytes 
		E3 EFED E5A0 F4	**long."8D"8A/
		EF A0CA EFE5 A7	
		F3 A0C1 D3D9 CE	
		C3 A0F4 E5F3 F4	
		A0 F3EC EFF4 AE	
		A0 A0D4 E8E9 F3	
		A0 EDE5 F3F3 E1	
		E7 E5A0 E9F3 A0	
		ED EFF2 E5A0 F4	
		E8 E1EE A0B1 B4	
		A0 E2F9 F4E5 F3	
		A0 ECEF EEE7 AE	
		8D 8A		
  1129				
  1130				: Initialize ASYNC and start it.  Link on R13.
  1131				
  1132	01127E	4100 F432 	INIASY	JAL	R0,IZASYN	: Init (zero) async variables
  1133	011282	2410 			LIS	R1,0
Page  12-2	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Async routines

  1134	011284	4010 19F2 		STH	R1,ASECHO	: Mark port as not needing echo yet
  1135				
  1136				: Set up registers for the "connect async" SVC
  1137				
  1138	011288	2400 			LIS	R0,LUASYN	: Group #
  1139	01128A	E610 4000 00E4 		LA	R1,ARING,,	: Array of rings
  1140	011290	E620 4000 00DC 		LA	R2,CP,,		: Bits of Carrier Present
  1141	011296	E630 4000 00D8 		LA	R3,DSR,,	: Bits of Data Set Ready (modem on-line)
  1142	01129C	E640 4000 00DA 		LA	R4,DTR,,	: Bits of Data Term Ready (our ports)
  1143	0112A2	E650 4000 00E0 		LA	R5,TOPORT,,	: Bits of ports with output ready (set by us)
  1144	0112A8	E660 4000 00E2 		LA	R6,FPORT,,	: Bits of ports with input ready (set by ISIS)
  1145	0112AE	E670 4000 00DE 		LA	R7,TAM,,	: Bits of transmit activity
  1146	0112B4	E130 0030 		SVC	IO,030+R0	: Connect async (OP=3)
  1147	0112B8	41A0 EF48 		  JAL	R10,CRASH	: Die if no async defined in node's TYM file
  1148				
  1149				: Send an initialization message to set baud rates and enable I/O
  1150				
  1151	0112BC	2450 			LIS	R5,0		: Set port number
  1152	0112BE	4050 19F4 		STH	R5,APORT
  1153	0112C2	7650 4000 00DA 		RBT	R5,DTR,,	: Clear DTR bit (which turns on the signal)
  1154	0112C8	D310 FF56 		LB	R1,ASINIT	: Set byte count
  1155	0112CC	4010 19F6 		STH	R1,ACOUNT
  1156	0112D0	E620 FF4F 		LA	R2,ASINIT+1	: Set message address
  1157	0112D4	5020 19F8 		ST	R2,APOINT
  1158	0112D8	030D 			JR	R13		: End of INIASY
  1159				
  1160				:--------------------------------------------------------------------------
  1161				
  1162				: Read input from the port.  Link on R13.
  1163				
  1164	0112DA	4850 19F4 	DOASYI	LH	R5,APORT	: Check only port 0 in this assignment
  1165	0112DE	4140 4001 0616 		JAL	R4,AGCI,,	: Get next byte (if any)
  1166	0112E4	430D 0000 		  J	0,R13		: Nothing there
  1167	0112E8	C900 0000 		CHI	R0,0		: Is it an escaped message?
  1168	0112EC	4330 803A 		JE	ESCIN		: Process escape on input
  1169	0112F0	7450 19F2 		TBT	R5,ASECHO	: Are we supposed to echo on this port?
  1170	0112F4	033D 			JER	R13		: Do nothing if BREAK has not been seen
  1171				
  1172				: Echo this input character.  Echo CR as CR+LF.  Since characters come in
  1173				: relatively slowly, we do not expect the echo to fill the output ring.
  1174				
  1175	0112F6	7450 4000 00DE 	WAIT4	TBT	R5,TAM,,	: Is there room in the output ring?
  1176	0112FC	2233 			JEBS	WAIT4		: No, spin here until ISIS sets the bit
  1177				: The TAM bit gets set when there is room for 4 or more bytes in output ring
  1178	0112FE	C900 0000 		CHI	R0,0		: Test for null
  1179	011302	4330 801C 		JE	ECHNUL		: Because it has to be handled special
  1180	011306	4140 4001 0650 		JAL	R4,AWCI,,	: Echo character by writing it to the oring
  1181	01130C	C400 007F 		NHI	R0,7F
  1182	011310	C900 000D 		CHI	R0,0D		: Check for the carriage return character
  1183	011314	023D 			JNR	R13		: Done if not
  1184	011316	C800 008A 		LHI	R0,8A		: Get a linefeed
  1185	01131A	4140 4001 0650 		JAL	R4,AWCI,,	: Echo this as well
  1186	011320	030D 			JR	R13		: Done 
Page  12-3	JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
JS2033.F03		 Async routines

  1187				
  1188	011322	4140 4001 0684 	ECHNUL	JAL	R4,AWCP,,	: Write NULL as an escaped character
  1189	011328	030D 			JR	R13		: Done
  1190				
  1191				: Here to handle an escaped input character
  1192				
  1193	01132A	4140 4001 0616 	ESCIN	JAL	R4,AGCI,,	: Get char after the escape
  1194	011330	4300 FFF6 		  J	ESCIN		: Spin here until it arrives
  1195	011334	C900 0091 		CHI	R0,91		: End of break?
  1196	011338	023D 			JNR	R13		: Ignore all other escaped characters
  1197	01133A	7750 19F2 		CBT	R5,ASECHO	: Toggle echo-enable at break end
  1198				:Set up to output a welcome messsage
  1199	01133E	D310 FEEB 		LB	R1,WELCOM	: Get byte count
  1200	011342	E620 FEE8 		LA	R2,WELCOM+1	: Address of message
  1201	011346	4010 19F6 		STH	R1,ACOUNT	: Store this for DOASYO
  1202	01134A	5020 19F8 		ST	R2,APOINT	: (which will do it a few bytes at a time)
  1203	01134E	030D 			JR	R13		: End of DOASYI
  1204				
  1205				:--------------------------------------------------------------------------
  1206				
  1207				: Do async output
  1208				
  1209	011350	4850 19F4 	DOASYO	LH	R5,APORT	: Do only port 0 in this assignment
  1210	011354	7450 4000 00DE 		TBT	R5,TAM,,	: Is there room do to anything?
  1211	01135A	033D 			JER	R13		: Wait until room for at least 4 bytes
  1212	01135C	4810 19F6 		LH	R1,ACOUNT	: Check if anything left to output
  1213	011360	033D 			JER	R13		: Nothing waiting if count is zero
  1214	011362	5820 19F8 		L	R2,APOINT	: Address where we left off
  1215	011366	D302 0000 		LB	R0,0,R2		: Get the next byte
  1216	01136A	2711 			SIS	R1,1		: Decrement count
  1217	01136C	4010 19F6 		STH	R1,ACOUNT
  1218	011370	2621 			AIS	R2,1		: Increment pointer
  1219	011372	5020 19F8 		ST	R2,APOINT
  1220	011376	4140 4001 0650 		JAL	R4,AWCI,,	: Write normal character
  1221	01137C	4300 FFD0 		J	DOASYO		: Check if OK to do more
  1222				
  1223				: Check for async work.  Called from background
  1224				
  1225	011380	030C 		CHKASY	JR	R12		: Nothing to do
  1226				
  1227				: End of ASYNC lab problem.
  1228				
  1229					EM			: End of module FMAIN

JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

A.CODE	    76	   389	   459	   496	   560	   732	   772	   828	   972	  1115
A.DATA	     9	   387	   451	   484	   549	   769	   787	   934	  1110
ACOUNT	  1113#	  1155	  1201	  1212	  1217
ACTIVE	    15#	    88	   162	   169	   178
ADR	   949#	   988	   990	  1037	  1039	  1048
AGCI	  1105%	  1165	  1193
APOINT	  1114#	  1157	  1202	  1214	  1219
APORT	  1112#	  1152	  1164	  1209
ARING	  1107%	  1139
ASECHO	  1111#	  1134	  1169	  1197
ASINIT	  1127#	  1154	  1156
AWCI	  1105%	  1180	  1185	  1220
AWCP	  1105%	  1188
B0FLSH	   129	   146#
BCNTRL	   244	   688#
BCNTXX	   440	   457#	   458
BCOUNT	    72#	   116	   125	   438
BCSTR	   447	   456#	   457
BELSTR	    71#	   279
BFLUSH	   140#	   618	   621	   653	   672	   677	   690
BMAIN	   119	   123#	   142	   150	   187	   237	   256	   630	   637	   650	   667	   684
BPCHEK	   163#	   371	   518	   541
BPRESS	    16#	    89	   171	   194	   671	   676
BPROC	   137	   243#
BUSY	   748	   757	   771#	  1023
BWDONE	   158#	   375	   545
BWEND	   170	   172	   179	   185#
BWLOOP	   169#	   186
BWNEXT	   159#	   360	   502
BWRIT1	   177	   180#
BWRITE	   128	   168#
BYTEXX	   425	   453#	   454
CFGND.	   114
CHKASY	   764	  1225#
CHKSIO	   766	   871#
CHKSYN	   765	  1057#	  1064
CMD	   947#	   983	   984	   986	  1014	  1015	  1016	  1033	  1043
CMD.	   291	   323#
CMDCHK	   264#	   269
CMDD	   292	   347#
CMDH	   293	   315#
CMDH1	   331#	   337
CMDLEN	   263	   300#	   326	   336
CMDM	   294	   355#
CMDP	   295	   381#
CMDQ	   296	   405#
CMDS	   297	   419#
CMDTAB	   266	   273	   289#	   300	   333
CMDW	   298	   464#
CNT	   948#
CONSTR	   487#	   488	   512
CP	  1107%	  1140
CRASH	   837	   861	   866	   923	   980	  1003	  1079	  1147
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

CREAD	   232	   262#
CRLF	    69#	   339	   468	   535	   591
CSROOM	  1057	  1070#	  1091
CSYNI.	   979
CSYNO.	  1002
CTLBPF	   676#	   706
CTLBPN	   671#	   705
CTLCHK	   689#	   693
CTLEDE	   617#	   707
CTLGRE	   632#	   709
CTLLDE	   620#	   708
CTLLEN	   688	   716#
CTLLIM	   681#	   714
CTLORA	   652#	   712
CTLRED	   625#	   710
CTLTAB	   691	   694	   702#	   716
CTLYEL	   645#	   711
CTLZAP	   659#	   704
DETMSG	    61#	   409
DISMIS	   123	   743	   759	   858	   863	   920	   981	  1120
DOASYI	   749	  1121	  1164#
DOASYO	   750	  1122	  1209#	  1221
DOSIOI	   753	   869#
DOSIOO	   754	   870#
DOSYNI	   751	  1008#
DOSYNO	   752	  1014#	  1029
DSR	  1107%	  1141
DSTR	   346#	   347
DTR	  1107%	  1142	  1153
EC1MSG	    67#	   228
ECHNUL	  1179	  1188#
ECHO1C	   555#	   556	   596
ECHO2C	   557#	   558	   601
ECHO2X	   558#	   600
ECHOIT	   590	   596#
ECHOR0	   556#	   582	   598	   604
ECHORB	   559#	   584
ECHOXX	   429	   454#	   455
ECOUNT	   118	   427	   553#	   574
ELIR	   225	   577	   683
ELOR	   338
EMPTY	   969#	   994	  1038	  1077	  1081
ESCIN	  1168	  1193#	  1194
FCHECK	   111%	   126	   728%	   764%
FCOUNT	   729%	   739	   756	   770%
FILL	   968#	   992	  1075	  1078	  1086
FILLPT	   970#	   997	  1070	  1080	  1087	  1090
FLUSH	   141	   149	   626	   633	   646	   663
FMAIN	   747#	   758	   760
FPORT	  1107%	  1144
FRGKMT	   813#	   883	   892	   913
FROMGK	   814#	   897
FSTART	   111%	   113	   728%	   738%
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

FULL	   967#	   996	  1035	  1041	  1073	  1076
GETCH	   212	   214	   218	   245	   569
GETGK1	   876	   881#
GETGK2	   882	   890#
GETGK3	   891	   900#
GETGK4	   900	   902#
GETGKM	   364%	   365	   874%	   875%
GETH	   195	   198	   200	   202	   204	   206	   208	   210	   681
GETW	   196
GKHEAD	   780#	   811	   818
GKHEAR	   782#	   884
GKHERE	   781#	   811	   881
GKLINE	   784#	   893
GKSEND	   783#	   818	   890
GKSIZE	   785#	   822
GMT	   393
GREMSG	    63#	   635
GRTSTR	   479	   485#	   486
HLPSTR	   287#	   315
HOSTXX	    96	   488#	   489
HPRT0	    52
HSECHO	   193	   550#	   571	   617	   620
HST0	    51	    94
HSTDWN	    54#
HSTR	   322#	   323
HSTUP	    48#	    82
ICOUNT	   117	   247	   423	   552#
INIASY	   740	  1119	  1132#
INISIO	   742	   832#
INISYN	   741	   976#
INUSE	    13#	    86	   136	   192	   407	   520	   659
IO	   836	   843	   850	   916	   979	  1002	  1146
ISIO2	   841#	   860
ISIO2X	   844	   858#
ISIO3	   848#	   865
ISIO3X	   851	   863#
ISUPR	   307	   309	   311#
IZASYN	  1105%	  1132
LENGTH	   140	   625	   632	   645	   662
LINSTR	   493#	   494	   530
LOOK	   127
LOOP	  1120#	  1123
LP0LST	   146
LUASYN	   730%	  1108%	  1138
LUSIO	   730%	   832	   841	   848	   859	   864	   914	   921
LUSYNC	   730%	   976	  1000
MAXNAM	    11#	    36	   219
MAXPHW	    12#	    13	    14	    15	    16	    85	   550
MAXPRT	    12	    42	   106	   168
MAXPXX	   108	   492#
MBSTR	   436	   452#	   453
MCOUNT	   251	   431	   554#
MORMSG	   372	   376#
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

MSTR	   354#	   355
MULTXX	   433	   455#
MYECH1	   586	   593	   597	   602#
MYECHO	   575	   582#
MYGET0	   566	   577#
MYGETC	   255	   564#
NAPORT	  1106%
NCOUNT	   246	   551#	   564	   567
NEEDL	   135	   191#
NEEDL1	   218#	   224
NEEDL2	   220	   222#
NEXTC	   249	   255#	   282	   318	   342	   350	   361	   385	   414	   449	   470
NGRP	  1106%	  1111
NODEX	   102
NODEXX	   104	   489#	   490
NOTCMD	   265	   279#
NRATE	   148
OBWAIT	    14#	    87	   652
OCM	    83	   229	   411	   629	   636	   649	   666
OCS	   281	   317	   325	   341	   349	   357	   368	   374	   383	   399	   408	   421	   437	   448
	   466	   481	   513	   531	   534	   537	   544	   603
ONODXX	   495#	   526
ORAMSG	    66#	   648
OUTNUM	    97	   101	   105	   109	   426	   430	   434	   441	   445	   478	   510	   524	   528
P.BASE	    42#	   133	   175	   539
P.CCT	    34#	   213
P.DHST	    27#	   199
P.DNOD	    33#	   211
P.INVN	    25#	   197
P.LAST	    43#	   514
P.LOG2	    31#	   207
P.NAME	    36#	   221
P.NAMS	    35#	   215	   532
P.OHST	    29#	   203
P.ONOD	    28#	   201	   527
P.OPRT	    30#	   205
P.PORT	    26#	   161	   191	   227	   280	   316	   324	   327	   340	   348	   356	   367	   373	   382
	   398	   406	   410	   420	   435	   446	   465	   477	   480	   511	   519	   529	   533	   536
	   543	   570	   602	   627	   634	   647	   664
P.R10	    23#	   159	   180	   183
P.R11	    24#	   160	   181	   184
P.READ	    21#	   233	   257
P.SCNT	    38#
P.SIZE	    44#	   132	   174	   538
P.SLIM	    37#	   682
P.WRIT	    22#	   163	   176
P.WS	    41#	    42	    43	    44
P.XTPC	    32#	   209
P.XXXX	    39#	    41
PORTIS	   234	   467	   475#
PORTXX	   494#	   495	   523
PRODID	    57
PSTR	   380#	   381
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

PTIME	   384	   393#	   422
PUTCH	   332	   334
Q	    19#	    40
QSTR	   404#	   405
R0	    84	    86	    87	    88	    89	    92	    95	    99	   103	   107	   113	   115	   116	   117
	   118	   124	   125	   140	   148	   197	   199	   201	   203	   205	   207	   209	   211	   213
	   215	   216	   221	   232	   233	   246	   247	   248	   250	   251	   268	   305	   306	   308
	   310	   326	   328	   331	   333	   412	   413	   424	   428	   432	   439	   443	   475	   508
	   522	   525	   564	   565	   567	   582	   583	   585	   587	   589	   592	   594	   598	   599
	   600	   604	   625	   632	   645	   660	   661	   662	   682	   691	   692	   747	   748	   755
	   756	   757	   906	   907	   911	   912	   913	   982	   983	   984	   985	   986	   987	   988
	   989	   990	   991	   992	   993	   994	   995	   996	   997	   998	  1008	  1009	  1014	  1015
	  1016	  1017	  1033	  1035	  1039	  1040	  1041	  1042	  1043	  1046	  1051	  1060	  1061	  1062
	  1070	  1071	  1073	  1080	  1081	  1088	  1132	  1138	  1146	  1167	  1178	  1181	  1182	  1184
	  1195	  1215
R1	    85	    86	    87	    88	    89	    90	    96	   100	   104	   108	   131	   136	   158	   163
	   176	   182	   191	   192	   193	   194	   235	   327	   358	   371	   425	   429	   433	   440
	   444	   468	   476	   500	   501	   509	   518	   523	   526	   541	   573	   574	   617	   620
	   652	   659	   671	   676	   832	   836	   841	   843	   848	   850	   853	   854	   855	   859
	   864	   875	   877	   881	   883	   884	   886	   890	   892	   893	   895	   906	   908	   909
	   910	   914	   916	   921	   976	   979	  1000	  1002	  1022	  1023	  1024	  1025	  1027	  1033
	  1037	  1039	  1043	  1048	  1075	  1076	  1077	  1078	  1086	  1088	  1133	  1134	  1139	  1154
	  1155	  1199	  1201	  1212	  1216	  1217
R10	   159	   180	   183	   359	   369	   514	   519	   527	   532	   538	   539	   837	   861	   866
	   923	  1147
R11	   160	   181	   184	   500	   542
R12	   164	   182	   360	   366	   370	   502	   764	   765	   766	   871	  1058	  1225
R13	   126	   131	   132	   133	   159	   160	   161	   163	   173	   174	   175	   176	   180	   181
	   183	   184	   191	   197	   199	   201	   203	   205	   207	   209	   211	   213	   215	   221
	   227	   233	   257	   280	   316	   324	   327	   340	   348	   356	   367	   373	   382	   398
	   406	   410	   420	   435	   446	   465	   477	   480	   511	   529	   533	   536	   543	   570
	   602	   627	   634	   647	   664	   682	   738	   739	   740	   741	   742	   749	   750	   751
	   752	   753	   754	   767	   856	   869	   870	  1004	  1010	  1018	  1119	  1121	  1122	  1158
	  1166	  1170	  1183	  1186	  1189	  1196	  1203	  1211	  1213
R14	   168	   169	   171	   173	   178	   185
R2	    81	    94	    98	   102	   106	   134	   140	   148	   161	   162	   227	   230	   231	   243
	   266	   267	   268	   280	   316	   324	   328	   340	   348	   356	   367	   373	   382	   398
	   406	   407	   410	   420	   423	   427	   431	   435	   438	   442	   446	   465	   477	   480
	   507	   511	   519	   520	   527	   529	   533	   536	   543	   570	   571	   602	   625	   627
	   632	   634	   645	   647	   662	   664	   692	   833	   842	   849	   915	   977	  1001	  1026
	  1028	  1034	  1044	  1087	  1088	  1089	  1090	  1140	  1156	  1157	  1200	  1202	  1214	  1215
	  1218	  1219
R3	    82	   228	   279	   315	   323	   339	   347	   355	   372	   381	   393	   397	   405	   409
	   419	   436	   447	   464	   479	   512	   530	   532	   535	   542	   584	   591	   596	   601
	   628	   635	   648	   665	   834	   878	   887	   896	   897	   900	   918	   924	   978	  1037
	  1038	  1047	  1049	  1051	  1057	  1072	  1074	  1082	  1091	  1141
R4	   127	   141	   149	   195	   196	   198	   200	   202	   204	   206	   208	   210	   212	   214
	   218	   225	   236	   245	   257	   258	   262	   263	   264	   266	   273	   311	   329	   332
	   334	   338	   365	   394	   469	   503	   569	   577	   626	   633	   646	   663	   681	   683
	   688	   689	   691	   694	   835	   879	   885	   888	   894	   898	   901	  1048	  1051	  1063
	  1093	  1142	  1165	  1180	  1185	  1188	  1193	  1220
R5	    83	   229	   281	   317	   325	   341	   349	   357	   368	   374	   383	   395	   399	   408
	   411	   421	   437	   448	   466	   481	   513	   531	   534	   537	   544	   603	   629	   636
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

	   649	   666	  1143	  1151	  1152	  1153	  1164	  1169	  1175	  1197	  1209	  1210
R6	    97	   101	   105	   109	   146	   148	   216	   223	   255	   273	   274	   275	   330	   333
	   335	   336	   396	   426	   430	   434	   441	   445	   478	   510	   524	   528	   568	   572
	   578	   605	   694	   695	   696	  1144
R7	   217	   219	   221	   222	   234	   384	   400	   422	   467	   482	  1145
RBS	  1106%
REDMSG	    64#	   628
RTLST1	   951#	   959	   983	   988	  1001	  1014	  1025
RTLST2	   954#	   984	   990	  1015	  1027
RTLST3	   957#	   986	  1016	  1024
SCNTXX	   444	   458#
SCOUNT	    75%	   442	   729%	   966%	   998	  1061	  1062
SENDG0	   914#	   922
SENDG1	   917	   920#
SENDGK	   878	   887	   896	   906#
SHOMSG	   358	   365#
SIOBEG	   788#	   833
SIOBUF	   803	   824#
SIOCMD	   807#	   854	   910	   912	   915
SIOEND	   827#	   834
SIOPTR	   825#	   855
SIOREC	   802	   822#	   824
SIORES	   792#	   842
SIOSIN	   802#	   849
SIOSTS	   789#	   835
SLOR	   329
SLOTNO	    98
SLOTXX	   100	   490#	   491
SPACE	    70#	   331
SSTR	   418#	   419
START	    81#	  1119#
START1	    86#	    91
STOR0	  1063	  1086#
SWAPFL	  1049#	  1052
SWAPNO	  1036	  1046#
SWAPOK	  1042#	  1050
SWAPSN	  1026	  1028	  1033#
SYNBF1	   942#	   953	   987
SYNBF2	   943#	   956	   989
SYNBF3	   944#	   968	   991
SYNBF4	   945#	   969	   993
SYNIBF	   938#	   977	  1008
SYNIPT	   936#	  1009
SYNISZ	   937#	   938	   978
SYNOSZ	   941#	   942	   943	   944	   945	   952	   955	   982	  1047	  1071
SYS	   114
SYST0	   501	   507#
SYST1	   518#	   540
SYST2	   521	   538#
SYSTAT	   236	   469	   500#
TAM	  1107%	  1145	  1175	  1210
THISXX	   476	   486#
TIMSTR	   388#	   395	   397
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Symbol cross reference

TMSTMP	   396
TOGKMT	   820#	   875	   907
TOPORT	  1107%	  1143
TXHERE	   810#	   877
TXSEND	   817#	   886	   895
UPCASE	   262	   305#
UPECHO	   588	   595	   598#
USECNT	    17#	    92	   231	   413	   507	   661
USEDXX	   491#	   492	   509
WAIT4	  1175#	  1176
WELCOM	  1128#	  1199	  1200
WELSTR	   235	   238#
WSTR	   463#	   464
XCMDX	   301
XCTLX	   717
XX	   301	   717
YBLMSG	    65#
ZAPMSG	    62#	   665
.	    19	    43	   300	   716	   733
JSLAB - JOE SMITH'S TTE-442 ASSIGNMENT.  SLOT 3, HOST 30.    NAD-1.5    11-nov-88 16:45
Macro/Opdef cross reference

XCMDX	   286#	   290
XCTLX	   700#	   703
XX	   284#	   291	   292	   293	   294	   295	   296	   297	   298	   698#	   704	   705	   706	   707
	   708	   709	   710	   711	   712	   714   E c