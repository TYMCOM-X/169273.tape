	PRUNE (-danish?, as in trees?) A directory organizer.
		----DRAFT 1.2 Version 0.10----

-Liberally translated from a program of the same name at Stanford 
	Artificial Intelligence Laboratory written by Ralph Goren.

WARNING to and REQUEST of PRUNE's users:
	Prune's interface is being developed, and nothing significant
is cast in anything but wet sand.  (MPL)PRUNE should be regarded as 
a design document; I am actively soliciting even bizarre requests for
interface changes or comments on this one.  The eventual program may
not look a lot like this one.  Please comment (in person, MAIL, GRIPE,
or add comments to (DANIELSS:37)PRUNE.MOD).


Purpose:
	I have trouble remembering what various files on a given 
directory are after a few months, PRUNE is meant to help that problem.
PRUNE is an INTERACTIVE program to associate short comments with file 
names on a particular directory.  It provides a few operations for file
manipulation, but its primary purpose is to maintain the comments.

Use:
	Whenever you run PRUNE, it reads PRUNE.DAT (its data file) from
the directory you are GFDed to.  It then finds the name of all files on
that directory (excluding PRUNE.DAT and *.TMP).  It then (conceptually)
makes three lists: 
	(1) Files which exist and have comments, 
	(2) Files which exists but don't have comments,
	(3) Files which don't exist but DO have comments
		(typically, files you deleted since you last ran PRUNE)

	If there any files in group 3, PRUNE asks you whether you would 
like to KEEP or DROP those descriptions (you may want to KEEP those for
files which you normally intend to have, but don't have at the moment).

	Now you direct PRUNEs behavior by various commands.  The 
commands (almost) always apply to groups of files, the group being
specified depending on the files' name, extension, and whether or not
it has a comment associated with it.  Commands are provided to allow 
you to count the files in a group, delete them, change their comments,
Show their entries (with the comments), and Write their entries to a
file.  

	When you are finished, you tell PRUNE to stop, and it writes 
(updates) PRUNE.DAT to reflect any changes you have made.  If you had
asked for any files to be deleted, PRUNE asks you whether you still 
want to delete them, and does so if you agree (otherwise they are not
deleted, only their comment lines are gone).


Actual PRUNE commands 
(CASE doesn't matter to PRUNE, command and response characters are 
 always interpreted as if they were in upper case, but comments are
 preserved in the case in which they were typed).

If group 3 (comments exist for files which don't) is not empty:
PRUNE asks you what you want to do with the comments.  You reply
with the first letter of KEEP, DROP, REVIEW, or WRITE. 
Action taken:
	KEEP: The comments are treated just as if their files existed.
	DROP: The comments are treated as if they never existed.
	REVIEW: You will be asked on a comment-by-comment basis whether
		to "KEEP" or "DROP" that comment.
	WRITE: The comments will be written out to a file of your 
		choosing (you will be prompted for the name), and then
		They will be "DROP"ed.

-----

PRUNE commands:
	 The prompt is a colon (":"); commands are input by typing 
	the command followed by a <return>.  

To get out of PRUNE without changing PRUNE.DAT or deleting any of the 
	files you have specified, simply type your escape character 
	(either ^C or ESC).

To exit gracefully (updating PRUNE.DAT, and really deleting files)
	Use either QUIT or XIT(=exit) [these commands are synonymous].

The rest of the commands specify groups of file-comment lines.  They all
	have three parts with (hopefully useful) defaults provided if
	some portion is left out: the PREFIX, COMMAND, and MASK.

The MASK is somewhat like a TYMCOM-X "wild-card" file name.  It has a
	name, extension and "USERNAME" part (no PPNs please).  If 
	you don't specify the name (or give a blank name), then "*" is
	used.  Similarly, if you don't specify an extension (the only
	way to not specify an extension is to not include a "." in the
	MASK), "*" is assumed for the extension.  And in the same way,
	not specifying a "USERNAME" will default to "*".  "#" works as 
	usual, but "*" may be used at the end of the name or extension 
	to indicate "fill this out with the appropriate number of `#'s."
	If the entire MASK is left out, "*.*" is used.
	   Mask examples:
		PR => PR.*	PR. => PR.	.PR => *.PR
		P* => P#####.*	.P* => *.P##	P#R*.P => P#R###.P
		(U*)P => (U#####)P.*

The PREFIX is used to specify whether you want to work only on files
	with comments, only on files without comments, or on all files
	which match the mask regardless of whether they have comments.
	If you leave off a prefix, the one assumed depends on the
	command given.  Prefixes are a single character:
		A =All (all files which match the mask)
		B =Blank (files without comments which match the mask)
		N =Nonblank (files with comments which match the mask)

The COMMAND is also a single-character entity (the first letter of the
	names listed here).  The word in parentheses following the name
	of the command is its assumed PREFIX.

COUNT (All)	Types the number of files specified.

DELETE (Blank)	Removes the entries for all files specified, and marks
		them "ready for deleting" (see previous comment on the
		QUIT and XIT commands).

FIND (All)	Types the entries for all specified files.  You can
		stop a runaway FIND with control-O (^O).

MODIFY (Blank)	This proceeds one file at a time through the PREFIX-
		MASK specified files.  It shows you the entry for a 
		file and asks you for a new (replacement) comment for
		this file.  If you don't want to change the comment,
		just type <return>.  If you want to use the same comment
		as you last typed to MODIFY (ignoring such things as
		<return>), type control-X (^X).  If you are bored or
		frustrated, type control-D (^D), and PRUNE will ask
		for another command.

OVERWRITE (NonBlank) This writes (in supercede file mode) the entries 
		for all specified files to an output file (you will be 
		asked what file name you want to use).  

REMOVE (All)	Removes the entries for all files specified.  (This is
		just like the DELETE command, except that the actual
		disk file is not deleted).

TYPE (Blank)	Allows rudimentary examination of files. This proceeds 
		one file at a time through the PREFIX-MASK specified 
		files.  If the extension is one of the standard binary
		extensions (REL,SAV,LOW,SHR,SWR), it makes sure you 
		really mean to type that file.  For each file, it 
		displays a few lines of text, and asks if you want to
		see more.  As long as you reply "Y" (and as long as 
		there is any more file left) it displays the next few
		lines and asks again.  If you reply "N" (or just about
		any other character), it will merrily go to the next 
		file.  If you are bored or frustrated, type control-D 
		(^D), and PRUNE will ask for another command.

USERCHANGE (All) This lets you change the "USER" field of the specified
		set of lines (useful to build up sets for searches).

WRITE (Nonblank) This appends the entries for all specified files to an
		output file (you will be asked what file name you want
		to use).  If no such file exists, one will be made
		(like OVERWRITE).
Format of PRUNE.DAT:

1) PRUNE.DAT is a text file which can be modified with your favorite
   editor.  Tabs and spaces are significant only insofar as they 
   produce white space (how much is not important).

2) PRUNE.DAT is sorted by EXTENSION first, then NAME.  If you 
   re-arrange lines, however, PRUNE will re-sort them as it reads 
   them in.  [DON'T make two entries for the same file, however].

3) PRUNE.DAT contains only lines for files which have non-null comments.

4) The following line formats are currently acceptable to PRUNE 
   (but this may change as features change).
The preferred format:
	file .ext        ;description
Other acceptable formats:	[USER is a reserved field]
	file  ext user   Description
	file .ext (user) Description
	file  ext (user) Description
	file      (user) Description
	file  ext        ;description
	file             ;description
	(user) file .ext Description
	(user) file  ext Description
	(user) file      ;description

  