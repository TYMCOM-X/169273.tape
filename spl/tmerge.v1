begin "MapCopy"
require 1 version;
require "(SAILIB)SAIL.DEF" source!file;
!get!module(MAPPING);

integer ToWhite, PassWhite;
simple procedure setups; 
begin
setbreak(PassWhite_getbreak, #sp & #ht & crlf, null, "XNR");
setbreak(  ToWhite_getbreak, #sp & #ht & crlf, null, "INR");
end;
require setups initialization;

simple string procedure GToken(reference string s); 
begin
scan(s,passWhite,!skip!);
return( scan( s, ToWhite, !skip! ) );
end;
simple string procedure Hval(integer v);
	return( if -10 < abs v < 10 
		then cvs(v) 
		else (if v < 0 then "-'" else "'") & cvos(abs v)
	);

simple string procedure cvOut( integer x );
begin	integer l,r; string res;
l_ x ash -18;
r_ x lsh 18 ash -18;
return(	if (l=0 and r geq 0) or (l=-1 and r < 0)
	 then Hval(r)
	 else Hval(l) & ",," & Hval(r)
);
end;

procedure HandMap( r!p(map1)src; integer inch,page );
while true do
begin	integer cmd;
	string opc, pNo, tmp, rsp; 

print( " Map OP: ");
rsp_ inchwl;

if length( opc_gtoken(rsp) )=0 then return;
pNo_gtoken(rsp);
if length(tmp_ gtoken(rsp))
 then begin
	print(crlf," Excess args: ", opc, #sp, pno, 
			" ->", tmp, #sp, rsp );
	continue
      end;

cmd_ lop(opc);
if length(pNo) > 0 then page_ cvd(pno);

if cmd="?"
 then print("
Type <null> to finish, otherwise: <Command> [page {def= ", page, "}]
 Cow	  HCP	map in file page Copy-On-Write,exclude
 Delete	  -CP	removes page from file (mark all same C-P `exclude')
 Existant -CP	find first existant page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
 Fileop	  -CP	mark exclusive all pages using this channel-page
		(or channel if page=-1) returns # pages changed
 Hole	  -CP	find first `hole' page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
 Kount	  H--	count other pointers looking at this `virtual page'
 New	  HCP	create a new file page (use page=-1 for at EOF)
		and map in Write,include
 Old	  HCP	same as New, but no failure if page already exists
 Preref	  H--	`pre-reference' page pointed to by holder
 Read	  HCP	map in file page Read,include
 Status	  H--	read status of holder's page (0 if none)
 Unmap	  H--	dissasociate holder with page (may unmap)
 Validate  H--	start `Validate' operation on holder's page
 Write	  HCP	map in specified file page Write,include
 Y (vld/wait)H-- same as `Validate', but waits until completion 
 @	(read and get status)
")
 else if "@" = cmd
	then begin	integer st;
		print(" = ", st_ getmap(src,"R",inch, Page),
			" (!SKIP!= ", cvOut(!skip!), ")" );
		if st > 0
		 then st_ map1:a[src][100]	! do a read memory;
		 else print( " [read inhibited] " );
		print(" Status=", cvOut(getmap(src,"S",0,0)) );
	      end
 else if "Z" neq cmd neq "z"
	then print(" = ", getmap(src,cmd,inch, Page),
			" (!SKIP!= ", cvOut(!skip!), ")" )
 else print(" ZAPs are invalid here!");
end;
string simple procedure pVersion; 
begin	external integer !jbver;
return( "v" & cvs( !rh(!jbver) ) );
end;
simple integer procedure nextP( integer ptr; reference integer loc );
begin!code	define a=1,pag=2;
		label	wrdlup, loplup, cknxt, retrn, retzer;
	move	pag,-1(p);
	skipn	a,ptr;
	 hrlzi	a,'440700+pag;
	tlnn	a,'760000;
	 jrst	wrdlup;
loplup:	ildb	a;
	cain	'14;
	 jrst	retrn;
	tlne	a,'760000;
	 jrst	loplup;

wrdlup:	add	a,[!xwd('440700,1)-!xwd('010700,0)];
	trne	a,'1000;
	 jrst	retzer;
cknxt:	move	@a;
	xor	[cvasc( '14 & '14 & '14 & '14 & '14 ) ];
	tlne	'774000;
	 tlnn	'003760;
	  jrst	loplup;
	trne	'077400;
	 trnn	'000376;
	  jrst	loplup;
	tdnn	['000017700000];
	  jrst	loplup;
	came	a,[!xwd('440700+pag,'777)];	! last page?;
	 aoja	a,cknxt;
retzer:	setz	a,;
retrn:
end;	 


simple string procedure copies( reference integer curloc, arrDat );
IFCR TRUE  THENC
begin
      simple integer procedure bytesUp( integer pseudoPointer );
      begin!code	define a=1,b=2;
	hrrz	a,pseudoPointer;
	imuli	a,5;
	skipn	b,pseudoPointer; 
	 hrlzi	b,'440700;
	lsh	b,-30;
	idivi	b,7;
	sub	a,b;
      end;
	integer size,basePtr;
basePtr_ location(arrDat) + curloc land lnot !xwd('77,0);
if curloc=0 then basePtr_ basePtr lor !xwd('440700,0);
size_ bytesUp(curloc);
curLoc_ nextP(curloc,arrDat);
size_ bytesUp(if curloc then curloc else !xwd('440700,'1000)) - size;
begin!code
 push sp,size;
 push sp,basePtr;
 sub  p,[!xwd(3,3)];
 jrst @3(p);
end;
end;
ELSEC
begin!code	label goret;
		define a=1,b=2;
	push	p,curLoc;	! since it is a value arg;
	push	p,-1-1(p);	! have to push address of arrDat;
	pushj	p,nextP;	! go find next FF if any;

	exch	a,curloc;	! get original pointer, store result;
	cain	a,0;		! make an in-page byte pointer of it;
	 hrlzi	a,'440700;
	tlz	a,'77;
	hrrei	b,-'1000(a);	! words left on page - include this one;
	imuli	b,5;		! get how many bytes that is;
	add	a,-1(p);	! make initial a real byte pointer;
	push	sp,b;		! push "size to EOP";
	push	sp,a;		! and put in the first-byte BYPTR;
	hrri	a,[cvasc(1&2&3&4&5)];	! now get bytes already passed;
	ldb	a,a;
	movni	a,(a);
	addm	a,-1(sp);	! and remove them from the total;
	skipn	a,curloc;	! get closing byte pointer;
	 jrst	goRet;		! if we went to EOP, total is fine;
	hrrei	b,-'1000(a);	!-words left on page - include this one;
	imuli	b,5;		! get how many bytes that is;
	addm	b,-1(sp);	! remove them from the total;
	hrri	a,[cvasc(5&4&3&2&1)];	! now get extra bytes needed;
	ldb	a,a;
	addm	a,-1(sp);
goRet:	sub	p,[!xwd(3,3)];
	jrst	@3(p);
end;	
ENDC
boolean needPage;

procedure OutPages( r!p(map1) src; integer inch, ouch, tableSize(100) );
begin "OutPages"

 boolean procedure dMap( integer DiskPageNumber );
 ! maps the specified disk page, returns true if successful;
 begin "a page"		integer status, $skip;
 if 0< status_ getmap(src, "R", inch, DiskPageNumber) then return(true);
 if status=-2 and !rh(!skip!)=6 then return(false);	! past EOF;

 $skip_ !skip!;
 print(crlf,"GETMAP error on disk page ", DiskPageNumber );
 case -status of begin
  [1] print( " Argument error?");
  [2] print(crlf, " SYSCAL error: ", cvOut($skip), crlf );
  [3] print(" is not there?(done) ");
  [ELSE] print("Illegal return?")
  end;
 ! HandMap( src, inch, page );
 return(false);
 end "a page";

integer safe array table[1:tableSize_50 max tableSize, 0:1];
! text page N is on disk page table[N,0], at byte table[N,1];
integer lPage;		! neg -> know all (1:-v), pos -> know (1:v);

	procedure expandTable;
	begin	integer array newTable[1:tableSize_50 + tableSize, 0:1];
	arrtran(newTable, table);
	memory[location(newTable)] swap memory[location(Table)];
	end;

boolean procedure Position( integer textPage );
if textPage leq 0 then return(false) else
begin		integer dp, curLoc;
if textPage leq abs lPage then return( dmap(table[textPage,0]) );
if lPage<0 then return(false);

if not dmap( dp_ table[lPage,0] )
 then begin 
	lPage_ abs lPage;
	usererr(lPage,2,"Lost?");
	return(false);
      end;
curLoc_ table[lPage,1];

do while curloc_ nextP( curloc, map1:a[src][0] )
   do begin
	lPage_ lPage + 1;
	if tableSize < lPage then expandTable;
	table[lPage,0]_ dp;
	table[lPage,1]_ curloc;
	if textPage LEQ lPage then return(true);
      end
 until not dmap( dp_ dp + 1 );

lPage_ -lPage;
return(false);
end;

procedure CopyMultiple( integer first, last );
begin	integer dp, CurLoc;
dp_ table[first,0]; curLoc_ table[first,1];

if needPage then cprint( ouch, #cr & #ff );
for first_ first step 1 until Last
   do begin
	print( #sp, first );
	do cprint( ouch, copies( curloc, map1:a[src][0] ) )
	 until curLoc or not dMap(dp_dp+1);
	if curLoc=0
	 then begin
		print(" [EOF] ");
		needPage_true;
		return;
	      end
	 else if first=lPage	! previous know EOF;
		 then begin
			lpage_ lpage + 1;
			if tableSize < lPage then expandTable;
			table[lPage,0]_ dp;
			table[lPage,1]_ curloc;
		      end;
      end;
needPage_false;
end;

string response;
integer pCurrent, pNext, brk;
if dmap(1)
 then begin table[1,0]_ 1; table[1,1]_ 0; lPage_ 1; end
 else begin print(" [empty File] "); return; end;

while true
   do begin
	print(" Pages: "); if length(response_inchwl)=0 then return;
	response_ response & "   -2000002";
	if -2000002= pCurrent_ pNext_ intscan(response,brk)
	 then print(" ?? Blank ?? ")
	 else do begin
		if pNext<0
		 then begin pCurrent_ pCurrent+1; pNext_ -pNext; end
		 else begin 
			pCurrent_ pNext;
			if brk=":" and 0 > pNext_ intscan(response,brk)
			 then begin
				print(" ?? -> ", pCurrent, ":", pNext);
				done;
			      end;
		      end;
		if Position(pCurrent)
		 then CopyMultiple( pCurrent, pNext )
		 else begin
			print(" ** no page ", pCurrent, " (", -lpage,
				" is last), try again.");
			done;
		      end
	      end
	 until -2000002= pNext_ intscan(response,brk);
      end;
end "OutPages";
integer procedure getOutput( string prompt ); 
begin	integer res, flag;
open(res_getchan,"DSK",0, 0,4, !skip!,!skip!,!skip!);
do begin
   print(prompt);
   enter(res,inchwl,flag_0);
   end
 until flag=0;
return(res);
end;
r!p(map1) src,dst;
integer inch, ouch;
integer page, status;

print("Text merge ", pVersion, crlf );
ouch_ getOutput( "  Output file: " ); 
src_map1cr(0,511);			
needPage_ false;
while true 
   do begin "one file"	string pageList, ifile; integer currentPage;
	while true
	   do begin
		print(crlf, "Source: "); ifile_inchwl;
		if length(ifile)=0 then done "one file";
		if equ(ifile,"?")
		 then print(" File with pages to copy or <CR> to stop")
		 else if 0 > inch_opfile( ifile, "ROM",16)
					! Read, Old file, Mapping;
			then print(" * ERROR obtaining ", ifile, 
				" in OPFILE phase ", inch ash -18, 
				"= ", cvOut(!rh(inch)) )
			else done;
	      end;
	OutPages( src, inch, ouch );
	getmap( src, "U", 0,0);
	chniov(inch,0,0);
      end "one file";

getmap(src,"Z",0,0);
release(ouch);
end *

  