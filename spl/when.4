begin	"WHEN"

require "(SAILIB)SAIL.DEF" source!file;
!get!module(EXTEND);
External String Procedure SW!INI(String NAME, OPTION(Null);
				 Boolean PPNFLAG(FALSE) );
require "Switch" Library;
require "ARGS.REQ" source!file;
require 4 version;

define MaxJ = 512;
string array NAMES[1:MaxJ];
integer array DATES[1:MaxJ];

string item	LogFile;
string item	Users;
item		MULTIPLE;
item		SINGLE;
item		NOJOBS;
item		NOLOGOUTS;
item		LAST;

Integer I,S,MX;
Boolean Multi,!NoJobs,!NoLogouts,!Last;
String Name,Namelist;

integer procedure CheckJobs( string UserName );
begin
    integer N1,N2,HighJB,J,X;
    X := 0;
    N1 := cvsix(UserName);
    N2 := cvsix(UserName[7 to inf]);
    HighJB _ calli(!xwd('15,'11),'41)-1; ! largest frame number;
    for J _ 1 upto HighJB do if (
	N1 = calli(!xwd(J,-'22),'41)  and
	N2 = calli(!xwd(J,-'21),'41)  ) then begin
	    integer I;
	    I := '400000000000 - ( (!rh(calli(!xwd(J,-'55),'41)) lsh 12) + J);
	    X := X max I;
	    if not( !NOJOBS or !LAST ) then begin
		MX := MX + 1;
		NAMES[mx] := UserName;
		DATES[mx] := I;
	    end;
	end;
    return( X );
end;

integer procedure CheckLogout( string USER );
begin
    integer C,E,D,T;
    integer array L[0:'13];
    integer array U[0:1];
    open (C_getchan,"DSK",0,0,0, 0,0,E);
    if E then return (0);
    L[0] _ arrinfo(L,2);
    L[1] _ !xwd(1,1);
    L[2] _ location(U[0]);
    L[3] _ cvsix("UFD");
    U[0] _ cvsix(USER[1 for 6]);
    U[1] _ cvsix(USER[7 for 6]);
    chnior (C,L[0],4);	! lookup;
    release (C);
    if not !SKIP! then L['13] := 0;
    return (L['13]);
end;

string procedure Expand (integer DATE);
begin
    integer D,T,J ,I;
    string S;
    if ('300000000000 land DATE) = '300000000000 then begin
	I := '400000000000 - DATE;
	J := I land '7777;
	T := I lsh -12;
	S := (cvs(J)&"    ")[1 to 4];
	S := S& ( if T then "idle" else cvxstr(calli(!xwd(J,3),'41)) );
	if T > 24*60 then begin
	    S := S& " "& cvs(T%(24*60))& "d";
	    T := T mod (24*60);
	end;
	if T > 60 then begin
	    S := S& " "& cvs(T%60)& "h";
	    T := T mod 60;
	end;
	if T then begin
	    S := S& " "& cvs(T)& "m";
	    T := 0;
	end;
	return( S );
    end;
    start!code
	protect!acs 0,1,2,3;
	MOVE	1,access(DATE);
	TLZ	1,'200000;
	MOVE	3,['600020000000];
	MOVEI	0,1;
	CALLI	0,-'55;
	 Setzb  1,2;
	MOVEM	1,D;
	IDIVI	2,60;
	MOVEM	2,T;
    end;
    S _ stDate (D,'31);
    while length(S) < 9 do S _ " "& S;
    setformat (2,0);
    S _ S& " "& cvs(T % 3600);
    setformat (-2,0);
    S _ S& ":"& cvs((T % 60) mod 60);
    S _ S& ":"& cvs(T mod 60);
    setformat (0,0);
    if DATE land '200000000000 then S _ S & " *";
    return (S);
end;

procedure PrintNames;
begin
    string S;
    integer ST,OS,I,J;
    ST := if Multi then 2 else 1;
    OS := (MX+1) % ST;
    for I := 1 upto OS do
	for J := I step OS until MX do print(
	    NAMES[j], (#ht&#ht)[length(NAMES[j])%8+1 to 2],
	    S_Expand(DATES[j]), if J+OS>MX then crlf else 
		(#ht&#ht&#ht)[length(S)%8+1 to 3] );
end;

ArgParse( LogFile, Users,
	{NOJOBS,NOLOGOUTS,LAST,SINGLE,MULTIPLE}, Args );
Namelist_ if props(Users)
    then datum(Users)
    else Sw!Ini("WHEN");
Multi_ props(MULTIPLE);
Setbreak(I_Getbreak, "/,: " & #ht, ",: " & #ht , "KINST"); 
If Length(Namelist) = 0 then Namelist _ Sw!ini("WHEN");
While Length(Namelist) = 0 Do begin "Ask User for names"
    Outstr("Who? ");    Namelist _ Inchwl;
end;
!NoJobs := props(NOJOBS);
!NoLogouts := props(NOLOGOUTS);
!Last := props(LAST);
MX _ 0;
While Length(Namelist) Do begin
    Name _ Scan(Namelist, I, S);
    If Length(Name) then begin
	MX _ MX + 1;
	NAMES[MX] _ Name;
    End;
    If S = "/" then begin "check switches"
	Name _ Scan(Namelist, I, S);
	If Length(Name) then begin "got one"
	    If Kequ(Name,"MULTI"[1 for length(Name)]) then Multi _ True;
	    If Kequ(Name,"SINGLE"[1 for length(Name)]) then Multi _ False;
	    If Kequ(Name,"NOJOBS"[1 for length(Name)]) then !NOJOBS _ true;
	    If Kequ(Name,"NOLOGOUTS"[1 for length(Name)]) then !NOLOGOUTS_true;
	    If Kequ(Name,"LAST"[1 for length(Name)]) then !LAST _ true;
	End;	! For now, just ignore bad switches;
    End;
End;
Relbreak(I);
if props(MULTIPLE) then Multi _ true;	! override sw.ini;
if props(SINGLE) then Multi _ false;
if props(LOGFILE) then setprint( datum(LOGFILE), "B" );

begin
    integer MXsave;
    MXsave := MX;
    for I _ arrinfo(NAMES,1) upto MXsave do begin
	integer C;
	DATES[i] := if !NOLOGOUTS then 0 else CheckLogout( NAMES[i] );
	C := if !NOJOBS then 0 else CheckJobs( NAMES[i] );
	if C and !LAST then DATES[i] := C;
    end;
    if !NOLOGOUTS then
	for I _ arrinfo(NAMES,1) upto MX do
	    if DATES[i] land '200000000000 = 0 then begin
		NAMES[i] := NAMES[mx];
		DATES[i] := DATES[mx];
		MX := MX - 1;
		I := I - 1;
	    end;
end;
do begin "SORT"
    S _ true;
    for I _ arrinfo(NAMES,1) upto MX-1
	do if DATES[i] < DATES[i+1] then begin
	    DATES[i] swap DATES[i+1];
	    NAMES[i] swap NAMES[i+1];
	    S _ false;
	end;
end until S;
PrintNames;
setprint( null, "T" );
call(0,"Exit");
end $
