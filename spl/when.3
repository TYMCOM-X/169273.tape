begin	"WHEN"

require "(SAILIB)SAIL.DEF" source!file;
!get!module(EXTEND);
External String Procedure SW!INI(String NAME, OPTION(Null);
				 Boolean PPNFLAG(FALSE) );
require "Switch" Library;
require "ARGS.REQ" source!file;

integer procedure LastLogout (string USER);
begin
    integer C,E,D,T;
    integer array L[0:'13];
    integer array U[0:1];
    open (C_getchan,"DSK",0,0,0, 0,0,E);
    if E then return (0);
    L[0] _ arrinfo(L,2);
    L[1] _ !xwd(1,1);
    L[2] _ location(U[0]);
    L[3] _ cvsix("UFD");
    U[0] _ cvsix(USER[1 for 6]);
    U[1] _ cvsix(USER[7 for 6]);
    chnior (C,L[0],4);	! lookup;
    release (C);
    if not !SKIP! then return (0);
    C _ calli(!xwd('15,'11),'41)-1; ! largest frame number;
    for E _ 1 upto C 
	do if L[2] = calli(!xwd(E,-'23),'41) and !SKIP!
	    then return ('200000000000 lor L['13]);
    return (L['13]);
end;

string procedure DayTime (integer DATE);
begin
    integer D,T; 
    string S;
    start!code
	protect!acs 0,1,2,3;
	MOVE	1,access(DATE);
	TLZ	1,'200000;
	MOVE	3,['600020000000];
	MOVEI	0,1;
	CALLI	0,-'55;
	 Setzb  1,2;
	MOVEM	1,D;
	IDIVI	2,60;
	MOVEM	2,T;
    end;
    S _ stDate (D,'31);
    while length(S) < 9 do S _ " "& S;
    setformat (2,0);
    S _ S& " "& cvs(T % 3600);
    setformat (-2,0);
    S _ S& ":"& cvs((T % 60) mod 60);
    S _ S& ":"& cvs(T mod 60);
    setformat (0,0);
    S _ S & (if DATE land '200000000000 then " *  " else "    ");
    return (S);
end;

string array NAMES[1:100];
integer array DATES[1:100];
string item	LogFile;
string item	Users;
item		MULTIPLE;
item		SINGLE;

Integer I,S,MX;
Boolean Multi;
String Name,Namelist;

ArgParse( LogFile, Users, {MULTIPLE,SINGLE}, Args );
Namelist_ if props(Users)
    then datum(Users)
    else Sw!Ini("WHEN");
Multi_ props(MULTIPLE);
Setbreak(I_Getbreak, "/,: " & #ht, ",: " & #ht , "KINST"); 
If Length(Namelist) = 0 then Namelist _ Sw!ini("WHEN");
While Length(Namelist) = 0 Do begin "Ask User for names"
    Outstr("Who? ");    Namelist _ Inchwl;
end;
MX _ 0;
While Length(Namelist) Do begin
    Name _ Scan(Namelist, I, S);
    If Length(Name) then begin
	MX _ MX + 1;
	NAMES[MX] _ Name;
    End;
    If S = "/" then begin "check switches"
	Name _ Scan(Namelist, I, S);
	If Length(Name) then begin "got one"
	    If Kequ(Name,"MULTI"[1 for length(Name)]) then Multi _ True;
	    If Kequ(Name,"SINGLE"[1 for length(Name)]) then Multi _ False;
	End;	! For now, just ignore bad switches;
    End;
End;
Relbreak(I);
if props(MULTIPLE) then Multi _ true;	! override sw.ini;
if props(SINGLE) then Multi _ false;

for I _ arrinfo(NAMES,1) upto MX
    do DATES[i] _ LastLogout(NAMES[i]);
do begin
    S _ true;
    for I _ arrinfo(NAMES,1) upto MX-1
	do if DATES[i] < DATES[i+1] then begin
	    DATES[i] swap DATES[i+1];
	    NAMES[i] swap NAMES[i+1];
	    S _ false;
	end;
end until S;
for I _ arrinfo(NAMES,1) upto MX do print( 
    (NAMES[i]&"              ")[1 to 14],
    DayTime(DATES[i]),
    (If Multi and I land 1 then null else crlf) );
call(0,"Exit");
end $
