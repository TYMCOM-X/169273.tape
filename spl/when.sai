begin	"WHEN"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)ARGS.REQ" source!file;
!get!module(EXTEND);
require 5 version;

define MaxJ = 512;
string array NAMES[1:MaxJ];
integer array DATES[1:MaxJ];

string item	LogFile;
string item	Users;
item		Multiple;
item		Jobs;
item		Logouts;
item		Last;

Integer I,S,MX;
Boolean Multi,!NoJobs,!NoLogouts,!Last;
String Name,Namelist;

integer procedure CheckJobs( string UserName );
begin
    integer N1,N2,HighJB,J,X;
    X := 0;
    N1 := cvsix(UserName);
    N2 := cvsix(UserName[7 to inf]);
    HighJB _ calli(!xwd('15,'11),'41)-1; ! largest frame number;
    for J_ 1 upto HighJB
     do if (
	N1 = calli(!xwd(J,-'22),'41)  and
	N2 = calli(!xwd(J,-'21),'41)  )
	 then begin
	    integer I;
	    I := '400000000000 - ( (!rh(calli(!xwd(J,-'55),'41)) lsh 12) + J);
	    X := X max I;
	    if not( !NOJOBS or !LAST )
	     then begin
		MX := MX + 1;
		NAMES[mx] := UserName;
		DATES[mx] := I;
	     end;
	 end;
    return( X );
end;

integer procedure CheckLogout( string USER );
begin
    integer C,E,D,T;
    integer array L[0:'13];
    integer array U[0:1];
    open (C_getchan,"DSK",0,0,0, 0,0,E);
    if E then return (0);
    L[0] _ arrinfo(L,2);
    L[1] _ !xwd(1,1);
    L[2] _ location(U[0]);
    L[3] _ cvsix("UFD");
    U[0] _ cvsix(USER[1 for 6]);
    U[1] _ cvsix(USER[7 for 6]);
    chnior (C,L[0],4);	! lookup;
    release (C);
    if not !SKIP! then L['13] := 0;
    return (L['13]);
end;

string procedure Expand (integer DATE);
begin
    integer D,T,J ,I;
    string S;
    if ('300000000000 land DATE) = '300000000000 then begin
	I := '400000000000 - DATE;
	J := I land '7777;
	T := I lsh -12;
	S := (cvs(J)&"    ")[1 to 4];
	S := S& ( if T then "idle" else cvxstr(calli(!xwd(J,3),'41)) );
	if T > 24*60 then begin
	    S := S& " "& cvs(T%(24*60))& "d";
	    T := T mod (24*60);
	end;
	if T > 60 then begin
	    S := S& " "& cvs(T%60)& "h";
	    T := T mod 60;
	end;
	if T then begin
	    S := S& " "& cvs(T)& "m";
	    T := 0;
	end;
	return( S );
    end;
    start!code
	protect!acs 0,1,2,3;
	MOVE	1,access(DATE);
	TLZ	1,'200000;
	MOVE	3,['600020000000];
	MOVEI	0,1;
	CALLI	0,-'55;
	 Setzb  1,2;
	MOVEM	1,D;
	IDIVI	2,60;
	MOVEM	2,T;
    end;
    S _ stDate (D,'31);
    while length(S) < 9 do S _ " "& S;
    setformat (2,0);
    S _ S& " "& cvs(T % 3600);
    setformat (-2,0);
    S _ S& ":"& cvs((T % 60) mod 60);
    S _ S& ":"& cvs(T mod 60);
    setformat (0,0);
    if DATE land '200000000000 then S _ S & " *";
    return (S);
end;

procedure PrintNames;
begin
    string S;
    integer ST,OS,I,J;
    ST := if ( Multi )
     then 2 else 1;
    OS := (MX+1) % ST;
    for I := 1 upto OS
     do for J := I step OS until MX
	 do print(
	    NAMES[j], (#ht&#ht)[length(NAMES[j])%8+1 to 2],
	    S_Expand(DATES[j]), if J+OS>MX then crlf else 
		(#ht&#ht&#ht)[length(S)%8+1 to 3] );
end;


ArgMsg_ true;			! complain about errors ;

if not( ArgParse( LogFile, Users, {Users,Jobs,Logouts,Last,Multiple}, Args ) )
 then start!code calli '1,'12; calli 0,'12 end;

if ( 0 < props(Users) < NAVAL )
 then Namelist_ datum(Users);

Setbreak(I_Getbreak, "/,: " & #ht, ",: " & #ht , "KINST"); 

if ( Length(Namelist) = 0 )
 then begin "Ask User for names"
    Outstr("Who? ");
    if ( ArgParse(LogFile,Users,{Users,Jobs,Logouts,Last,Multiple},Inchwl) )
      and ( 0 < props(Users) < NAVAL )
     then Namelist_ datum(Users);
 end "Ask User for names";

if ( length( NameList ) )
 then begin "process info"

    Multi_ props(Multiple) = NOVAL;
    !NoJobs := props(JOBS) = NTVAL;
    !NoLogouts := props(LOGOUTS) = NTVAL;
    !Last := props(LAST) = NOVAL;

    MX _ 0;
    while ( length(Namelist) )
     do begin
	Name _ Scan(Namelist, I, S);
	if ( length(Name) )
	 then NAMES[MX_ MX + 1]_ Name;
     end;

    Relbreak(I);

    if props(LogFile)
     then setprint( datum(LogFile), "B" );

    begin
	integer MXsave;
	MXsave := MX;
	for I _ arrinfo(NAMES,1) upto MXsave
	 do begin
	    integer C;
	    DATES[i] := if !NOLOGOUTS then 0 else CheckLogout( NAMES[i] );
	    C := if !NOJOBS then 0 else CheckJobs( NAMES[i] );
	    if C and !LAST then DATES[i] := C;
	 end;
	if !NOLOGOUTS
	 then
	    for I _ arrinfo(NAMES,1) upto MX
	     do if DATES[i] land '200000000000 = 0
		 then begin
		    NAMES[i] := NAMES[MX];
		    DATES[i] := DATES[MX];
		    MX := MX - 1;
		    I := I - 1;
		 end;
    end;

    do begin "SORT"
	S _ true;
	for I _ arrinfo(NAMES,1) upto MX-1
	 do if DATES[i] < DATES[i+1]
	     then begin
		DATES[i] swap DATES[i+1];
		NAMES[i] swap NAMES[i+1];
		S _ false;
	     end;
    end until S;

    PrintNames;
    setprint( null, "T" );
    
end "process info";

call(0,"Exit");

end $
