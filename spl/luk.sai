begin "boondoggle"
require 6 version;
Comment	V6: allow *bug as file name
Comment	V5: allow directory specification by GAN, UUN, or USER
Comment	V4: assume * for unspecified fields
Comment	V3: take file names to search for "list".  (ie: foo###.*+baz.*)
;
require "(SAILIB)SAIL.DEF" source!file;
procedure helper( string program );
begin	integer chan,eof,bt;
	string FpnStr;
	boolean procedure attempt(string file);
	begin	integer flag;
	open(chan, "DSK",0, 2,0, 200,0,eof);
	if not eof
	 then begin 
		lookup(chan, file & FpnStr, flag);
		if flag or eof then lookup(chan,"(*6NEWS)"&file,flag);
		if flag=eof=0 then return(true);
	      end;
	open(chan, "SYS",0, 2,0, 200,0,eof);
	if not eof
	 then begin 
		lookup(chan, file, flag);
		if flag=eof=0 then return(true);
	      end;
	return(false);
	end;
chan_ calli(-'25,'41);	! GETTAB: this job's FPN;
FpnStr_ "[" & cvos(!lh(chan)) & "," & cvos(!rh(chan)) & "]";
chan_ getchan;
setbreak(bt_getbreak,null,null,"INS");
if attempt( program & ".HLP" )
or attempt( program & ".DOC" )
or attempt( program )
 then while not eof do outstr(input(chan,bt));
relbreak(bt);
release(chan);
end;
define !RBUNM='27;
own integer safe array UfdLub[0:!RBUNM+1];
simple integer procedure LookupUfd(integer dskchan, dir );
begin
arrclr(UfdLub);
UfdLub[0]_ !RBUNM+1;
UfdLub[1]_ (1 lsh 18) lor 1;
UfdLub[2]_ dir;
UfdLub[3]_ cvsix("UFD");
  start!code
	move	2,dskChan;
	hrli	2,4;		! = .CHLK (lookup);
	setz	1,;		! assume will be successful;
	chanio	2,UfdLub[0];
	 hrro	1,UfdLub[1];	! failure -- get error code, force non0;
  end;
end;

string simple procedure showPpn( integer ppn );
	return( "[" & cvos( !lh(ppn) ) & "," & cvos( !rh(ppn) ) & "]" );

string simple procedure getUname( integer channel, aun );
return( if LookupUfd( channel, aun ) 
	 then showPpn(aun) 
	 else cv6str(UfdLub[!RBUNM]) & cv6str(UfdLub[!RBUNM+1])  );

simple integer procedure cvdirppn(integer dskchan; string dirname);
begin	own integer array user[0:1];
user[0]_ cvsix(dirname);
user[1]_ cvsix(dirname[7 to inf]);
LookupUfd( dskChan, location(user[0]) );
return( UfdLub[2] );
end;
!get!module(EXTEND);

string directory!name; integer directory!ppn; boolean dir!printed;

r!p (any!class) PPNCatcher;
integer ppnMask, ppnVal;

procedure SetPPNsearch(integer ufdChan; string gan,uun);
begin	integer i;
PPNCatcher_ iniufr( "*", "UFD", ufdchan );
ppnVal_ (cvo(gan) lsh 18) + cvo(uun);
ppnMask_  (if ppnVal land (-1 lsh  18) then -1 else 0) lsh 18
	+((if ppnVal land (-1 lsh -18) then -1 else 0) lsh -18);
return;
end;

boolean procedure findPPN(integer ufdChan );
begin	own safe integer array eluk[0:6];
while nxtufr( eluk, PPNCatcher )
  do if (directory!ppn_ eluk[0]) land ppnMask = ppnVal
	then return(true);
close(ufdchan);
return(false);
end;
record!class nameList ( string name, extension;
			record!pointer (nameList) link );
record!class searchSpec ( string name, extension, masking );
own safe integer array eluk[0:6];
integer skipStar;
simple procedure init; setbreak(skipStar_getbreak, "*", null,"IS");
require init initialization;

string procedure genmsk(string name);
begin	integer mp, val, mask;
name_name[1 for 6];
val_cvsix(name); mask_ 0; mp_bbpp(6,mask,-1);
while length(name)
   do if "#" neq lop(name) neq "?"
	 then ibp(mp) else idpb(-1,mp);
return( char!w(val lor mask,36) & mask ); 
end;

string procedure genMask(string name );
begin	string lead, result;
	own string array seg[1:6]; 
	integer brk,left,index;
	recursive procedure regen( integer idx; string tail, add );
	if idx < 1
	 then result_result & genMsk( tail )
	 else begin	string head;
		head_ seg[idx];
		idx_ idx-1;
		  do  begin
			regen( idx, head & tail, add );
			head_ head & lop(add);
		      end
		 until length(add)=0;
		regen( idx, head & tail, null );
	      end;

lead_ scan(name,skipStar,brk);
left_ 6-length(lead);
if left<1 or brk=0 then return(genMsk(lead));
for index_ 1 step 1 while left>0 and brk="*"
   do begin
	seg[index]_ lead;
	do lead_ scan(name,skipStar,brk)
	 until length(lead) or brk=0;
	left_ left- length(lead);
      end;
result_ null;
regen( index-1, lead, "######"[1 for left] );
return( result );
end;
	
string procedure buildName( string maskString );
begin	integer name, wilds;
name_ lop(maskString); wilds_ lop(maskString); 
while length(maskString)
   do begin	integer n,w;
	n_ lop(maskString); 
	wilds_ wilds lor lop(maskString); 
	name_ wilds lor name; 
	n_ wilds lor n; 
	if name neq n
	 then begin "implied wild-cards"	integer mask;
		n_ name xor n;
		mask_ '77;
		do if n land mask	! ie character values differ;
		   then wilds_ wilds lor mask
		 until 0 = mask_ mask lsh 6;
		name_ wilds lor name;
	      end;
      end;
return(cvxstr(  (name land lnot wilds) 
		lor (cvsix("######") land wilds) ));
end;
r!p(searchSpec) procedure FiddleMasks( r!p(nameList) head );
begin	  string nMasks, eMasks, fullMasks; 
	r!p(searchSpec) res;
nMasks_ eMasks_ fullMasks_ null;

while head_ nameList:link[head]
   do begin	string nMask, eMask, full;
	nMask_ genMask( nameList:name[head] );
	nMasks_ nMasks & nMask; 
	eMask_ genMask( "###" & nameList:extension[head] );
	eMasks_ eMasks & eMask;
	full_ null;
	while length(nMask)
	   do begin		string nam,eCopy;
		nam_ nMask[1 for 2]; lop(nMask); lop(nMask); 
		eCopy_ eMask;
		while length(eCopy)
		   do full_ full & nam & (lop(eCopy) rot 18)
			& (lop(eCopy) rot 18);
	      end;
	fullMasks_ fullMasks & full;
      end;
res_ new!record(searchSpec);
searchSpec:name[res]_ buildName( nMasks );
searchSpec:extension[res]_ buildName( eMasks )[4 for 3];
searchSpec:masking[res]_ fullMasks;
return(res);
end;
boolean simple procedure acceptable( string MaskStrings );
if length(MaskStrings)=0 then return(true) else
begin	
while length(maskStrings)
   do if lop(maskStrings) neq eluk[0] lor lop(maskStrings)
	 then begin lop(maskStrings); lop(maskStrings) end
	 else if lop(maskStrings) = eluk[1] lor lop(maskStrings)
		 then return(true);
return(false);
end;
simple procedure mention!directory;
if dir!printed then print(", ")
 else begin
	if length( directory!name ) = 0
	 then directory!name_ "(" & cv6str(ufdLub[!RBUNM]) 
				& cv6str(ufdLub[!RBUNM+1]) & ")";
	print( crlf, "(",directory!name,")  " );
	dir!printed_true;
      end;

boolean procedure findem( integer ufdchan; r!p (searchSpec) chase );
begin	r!p (any!class) ufdat; string masks;

if dir!printed_ LookupUfd( ufdChan, directory!ppn ) ! gets error code;
 then begin
	print(crlf, "Error ", dir!printed land (-1 lsh -18),
		" on directory (", directory!name, ")" );
	if not ufdLub[2] land (-1 lsh 18)
	 then print(" -- No such directory." )
	 else print( crlf & "--Can't read UFD for  [",
			cvos(ufdLub[2] lsh -18), ",", 
			cvos(ufdLub[2] land '777777), "]" );
	close(ufdchan);
	return(false);
      end;

masks_ searchSpec:masking[chase];
ufdat_ iniufr( searchSpec:name[chase], searchSpec:extension[chase],
			ufdchan );
while nxtufr( eluk, ufdat )
  do if length(masks) leq 2 or acceptable(masks)
	 then begin
		mention!directory;
		print( cv6str(eluk[0]), ".", cv6str(eluk[1]) );
	      end;
close(ufdchan);
return(dir!printed);
end;
string name!set;
integer dir!chan,dir!brk,dir!cnt,dir!eof;

simple boolean procedure set!file(string filename);
if dir!chan geq 0 then return( dir!eof_false )	! no double-indirect;
 else begin "check auto"
	open( dir!chan_getchan, "DSK",'2000,4,0,
			dir!cnt_100, dir!brk, dir!eof_false );
	if dir!eof then usererr(0,0,"no disk today?");
	lookup( dir!chan, filename, dir!eof );
			! get standard file (if it exists);
	if not dir!eof then return(true);
	release(dir!chan);
	return(dir!eof_false);
      end "check auto";
integer dir!break, wild!break, semi!break, fnam!break;

simple procedure st!db;
 begin
 setbreak( dir!break_getbreak, "],:;@", " 	()" & crlf, "KINS" );
 setbreak( wild!break_getbreak, "?#*", null, "KINS" );
 setbreak( fnam!break_getbreak, ",:;@ 	" & crlf, null, "KINS" );
 setbreak( semi!break_getbreak, ";", null, "INS" );
 end;
 require st!db initialization;

simple string procedure nextname;
while true do
begin "nextname"	string dirname;

if dir!chan geq 0
 then begin
	while not dir!eof 
	   do begin
		dirname_ input( dir!chan, dir!break );
		if dir!brk="@" then print(crlf, "No double indirect");
		if length( dirname ) then return( dirname );
	      end;
	release(dir!chan); dir!chan_-1; dir!eof_false;
      end;

while length(name!set)
   do begin
	dirname_ scan( name!set, dir!break, dir!brk );
	if length(dirname) 
	 then begin
		if dir!brk="@" then name!set_"@"&name!set;
		return(dirname);
	      end;
	if dir!brk="@"
	 then if set!file( dirname_scan(name!set, fnam!break, dir!brk) )
		then continue "nextname"
		else print( crlf, "Couldn't read file ", dirname );
      end;
return(null);

end "nextname";
simple procedure tty!names;
begin
if dir!chan geq 0 then release(dir!chan);
dir!chan_-1;		! indicate get file list from terminal;
dir!eof_false;
  do  begin
	print("Search: " );
	while equ(name!set_ inchwl, "?")
	  do begin helper("LUK"); print("Search: " ); end;
      end
 until length(name!set);
end;


simple procedure set!names;
begin
backup; name!set_ inchsl(!skip!);	! read the command line;
scan( name!set, semi!break, dir!brk );	! drop off run.. part;
dir!chan_-1;	! set as if line from TTY (so indir file ok);
if dir!brk neq ";" and set!file("LUK.STD") then return;

if length(name!set)=0
 then tty!names
 else begin
	dir!eof_ false;
	dir!chan_ -1;	! indicate file list from terminal;
      end;
end;
integer channel,ufdChan2,nameDelimiter,brchar,dir!count;
string dir,name,inpstr;
record!pointer (nameList) head, chase;
record!pointer (searchSpec) toFind;

ttyup(true);
set!names;
setbreak( nameDelimiter_getbreak, ".+,", " 	", "INS" );
head_ new!record(nameList); chase_ head;
while true
   do begin
	print( "File mask(s): " );
	if equ("?", inpstr_ inchwl)	then helper("LUK")
	else if equ("^", inpstr)	then tty!names
	else if length(inpstr)		then done;
      end;
  do  begin	string name,extension;
	name_ scan( inpstr, nameDelimiter, brchar );
	extension_ if brchar="." 
		then scan( inpstr, nameDelimiter, brchar ) else "###";
	if brchar="." then print( crlf, "two extensions?");
	if length(name)=0 and equ(extension,"###")
	 then if length(inpstr)=0 
		then done 
		else begin print("Null file name?"); continue end;
	if length(name)=0 or equ(name,"*") then name_ "######";
	if equ(extension,"*") then extension_ "###";
	nameList:link [chase]_ new!record(nameList);
	chase_ nameList:link [chase];
	nameList:name [chase]_ name;
	nameList:extension [chase]_ extension;
      end
 until length(inpstr)=0;
if 0 neq brchar neq "."
 then print( crlf, "What is a """ & brchar,
			""" doing at the end of your mask list?" );
if chase=head
 then begin
	print( crlf, 
	  "Well, if you don't even have any file mask, I'm leaving");
	call(0,"EXIT");
      end;
toFind_ FiddleMasks(head);
ufdChan2_-1;
open( channel_ getchan, "DSK", '17,0,0, 0,0,0 );
for dir!count_0 step 1 while length(dir_nextname)
  do  begin "onedir"
	if dir="["
	 then begin 	string gan,uun;
		uun_ gan_ dir[2 TO INF]; dir_ dir & dir!brk;
		if dir!brk="]" then gan_ "*"
		 else if dir!brk = ","
		 then begin uun_ nextName; dir_ dir & uun & dir!brk end;
		if dir!brk neq "]"
		 then begin
			print("What do you mean by ...", dir, "...?");
			continue "onedir";
		      end;
		directory!ppn_ (cvo(gan) lsh 18) + cvo(uun);
		scan(dir,wild!break,dir!brk);
		if dir!brk or (0=directory!ppn land (-1 lsh 18))
			or (0=directory!ppn land (-1 lsh -18))
		 then begin "wildPPN"
			if 0 > ufdChan2 then open( ufdChan2_ getchan, 
						"DSK", '17,0,0, 0,0,0 );
			if lookUpUFD( ufdChan2, 1 lsh 18 + 1 )
			 then print(crlf, "Can't read MFD to do ", 
					showPpn( directory!ppn ) )
			 else begin
				SetPPNsearch(ufdChan2,gan,uun);
				while findPPN(ufdChan2)
				   do begin
					dir!count_ dir!count + 1;
					directory!name_ getUname(
						channel, directory!ppn);
					findem( channel, toFind );
				      end
			      end;
			continue "onedir";
		      end "wildPPN"
		 else directory!name_ getUname( channel, directory!ppn);
	      end
	 else directory!ppn_ cvdirppn( channel, directory!name_ dir );
	findem( channel, toFind );
      end "onedir";
print(crlf, dir!count, " directories searched.");
end "boondoggle" .

