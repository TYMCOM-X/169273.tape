begin "MapCopy"
require 2 version;
require "(SAILIB)SAIL.DEF" source!file;
!get!module(MAPPING);
!get!module(APPEND);
define loop!begin="WHILE TRUE DO BEGIN";
integer UpToWhite, PassWhite, ForceUp;
simple procedure setups; 
begin
setbreak(PassWhite_getbreak, #sp & #ht & crlf, null, "XR");
setbreak(upToWhite_getbreak, #sp & #ht & crlf, null, "IKR");
setbreak(  ForceUp_getbreak, null, null, "KS");
end;
require setups initialization;


simple string procedure cvCommand(string s); 
begin	string cmd;
scan(s,passWhite,!skip!);
cmd_ scan( s, UpToWhite, !skip! );
scan(s,passWhite,!skip!);
return( if length(s) then null else cmd );
end;


simple boolean procedure cmdequ(string command, toTest);
	return( length(toTest) > 0 
		and equ( toTest, command[1 for length(toTest)] ) );
simple string procedure Hval(integer v);
	return( if -10 < abs v < 10 
		then cvs(v) 
		else (if v < 0 then "-'" else "'") & cvos(abs v)
	);

simple string procedure cvOut( integer x );
begin	integer l,r; string res;
l_ x ash -18;
r_ x lsh 18 ash -18;
return(	if (l=0 and r geq 0) or (l=-1 and r < 0)
	 then Hval(r)
	 else Hval(l) & ",," & Hval(r)
);
end;

string simple procedure pVersion; 
begin	external integer !jbver;
return( "v" & cvs( !rh(!jbver) ) );
end;

simple integer procedure nextP( integer ptr; reference integer loc );
begin!code	define a=1,pag=2;
		label	wrdlup, loplup, cknxt, retrn, retzer;
	move	pag,-1(p);
	skipn	a,ptr;
	 hrlzi	a,'440700+pag;
	tlnn	a,'760000;
	 jrst	wrdlup;
loplup:	ildb	a;
	cain	'14;
	 jrst	retrn;
	tlne	a,'760000;
	 jrst	loplup;

wrdlup:	add	a,[!xwd('440700,1)-!xwd('010700,0)];
	trne	a,'1000;
	 jrst	retzer;
cknxt:	move	@a;
	xor	[cvasc( '14 & '14 & '14 & '14 & '14 ) ];
	tlne	'774000;
	 tlnn	'003760;
	  jrst	loplup;
	trne	'077400;
	 trnn	'000376;
	  jrst	loplup;
	tdnn	['000017700000];
	  jrst	loplup;
	came	a,[!xwd('440700+pag,'777)];	! last page?;
	 aoja	a,cknxt;
retzer:	setz	a,;
retrn:
end;	 
simple string procedure copies( reference integer curloc, arrDat );
begin
      simple integer procedure bytesUp( integer pseudoPointer );
      begin!code	define a=1,b=2;
	hrrz	a,pseudoPointer;
	imuli	a,5;
	skipn	b,pseudoPointer; 
	 hrlzi	b,'440700;
	lsh	b,-30;
	idivi	b,7;
	sub	a,b;
      end;
	integer size,basePtr;
basePtr_ location(arrDat) + curloc land lnot !xwd('77,0);
if curloc=0 then basePtr_ basePtr lor !xwd('440700,0);
size_ bytesUp(curloc);
curLoc_ nextP(curloc,arrDat);
size_ bytesUp(if curloc then curloc else !xwd('440700,'1000)) - size;
	begin!code
	 push sp,size;
	 push sp,basePtr;
	 sub  p,[!xwd(3,3)];
	 jrst @3(p);
	end;
end;
integer procedure getOutput( string prompt,help(""); integer res(-1) ); 
begin	integer res, flag;
if length(help)=0 then help_ "Type the name of a file for text output.";
if res < 0 then res_getchan;
open( res, "DSK", '10000, 1,4, !skip!,!skip!,!skip!);

loop!begin "mainLoop"	string fileName, comnd; boolean Appending; 
	print(prompt);
	comnd_ cvCommand( fileName_inchwl );
	if cmdequ("HELP",comnd) or cmdequ(comnd, "?")
	 then begin print(help, crlf); continue; end;
	
	lookup(res,fileName,flag_0);
	if Appending_ flag=0
	 then loop!begin		string Response;
		print( FileName, " already exists. " & crlf
		& "Supercede, Append, or Retry [Supercede]: ");
		comnd_ cvCommand( response_ inchwl );
		if Appending_ cmdequ("APPEND", comnd) then done;
		if length(response)=0 or cmdequ("SUPERCEDE", comnd)
		 then begin close(res); done; end;
		if cmdequ("RETRY", comnd) then continue "mainLoop";
	      end;
	enter(res,fileName,flag_0);
	if flag=0
	 then begin if Appending then !wtend(res); return(res); end;
	close(res);
      end "mainLoop";
end;
boolean needPage;

procedure OutPages( r!p(map1) src; integer inch, ouch, tableSize(100) );
begin "OutPages"

 boolean procedure dMap( integer DiskPageNumber );
 ! maps the specified disk page, returns true if successful;
 begin "a page"		integer status, $skip;
 if 0< status_ getmap(src, "R", inch, DiskPageNumber) then return(true);
 if status=-2 and !rh(!skip!)=6 then return(false);	! past EOF;

 $skip_ !skip!;
 print(crlf,"GETMAP error on disk page ", DiskPageNumber );
 case -status of begin
  [1] print( " Argument error?");
  [2] print(crlf, " SYSCAL error: ", cvOut($skip), crlf );
  [3] print(" is not there?(done) ");
  [ELSE] print("Illegal return?")
  end;
 return(false);
 end "a page";

integer safe array table[1:tableSize_50 max tableSize, 0:1];
! text page N is on disk page table[N,0], at byte table[N,1];
integer lPage;		! neg -> know all (1:-v), pos -> know (1:v);

	procedure expandTable;
	begin	integer array newTable[1:tableSize_50 + tableSize, 0:1];
	arrtran(newTable, table);
	memory[location(newTable)] swap memory[location(Table)];
	end;

boolean procedure Position( integer textPage );
if textPage leq 0 then return(false) else
begin		integer dp, curLoc;
if textPage leq abs lPage then return( dmap(table[textPage,0]) );
if lPage<0 then return(false);

if not dmap( dp_ table[lPage,0] )
 then begin 
	lPage_ abs lPage;
	usererr(lPage,2,"Lost?");
	return(false);
      end;
curLoc_ table[lPage,1];

do while curloc_ nextP( curloc, map1:a[src][0] )
   do begin
	lPage_ lPage + 1;
	if tableSize < lPage then expandTable;
	table[lPage,0]_ dp;
	table[lPage,1]_ curloc;
	if textPage LEQ lPage then return(true);
      end
 until not dmap( dp_ dp + 1 );

lPage_ -lPage;
return(false);
end;

procedure CopyMultiple( integer first, last );
begin	integer dp, CurLoc;
dp_ table[first,0]; curLoc_ table[first,1];

if needPage then cprint( ouch, #cr & #ff );
for first_ first step 1 until Last
   do begin
	print( #sp, first );
	do cprint( ouch, copies( curloc, map1:a[src][0] ) )
	 until curLoc or not dMap(dp_dp+1);
	if curLoc=0
	 then begin
		print(" [EOF] ");
		needPage_true;
		return;
	      end
	 else if first=lPage	! previous know EOF;
		 then begin
			lpage_ lpage + 1;
			if tableSize < lPage then expandTable;
			table[lPage,0]_ dp;
			table[lPage,1]_ curloc;
		      end;
      end;
needPage_false;
end;
! still in outPages;
string response;
integer pCurrent, pNext, brk;
if dmap(1)
 then begin table[1,0]_ 1; table[1,1]_ 0; lPage_ 1; end
 else begin print(" [empty File] "); return; end;

while true
   do begin	string comnd;
	print(" Pages: "); if length(response_inchwl)=0 then return;
	comnd_ cvCommand( response );
	if cmdequ(comnd, "?") or cmdequ("HELP", comnd)
	 then begin
		print(
"Type a list of page numbers or page ranges.  If you pass the EOF, you
 will be informed, and the transfer will stop at that point.
Sample list of pages: 1,5,3-8,14,7:12
OR, type `OUTPUT' to switch to a new output file.
");
		continue;
	      end;
	if cmdequ("OUTPUT", comnd ) or cmdequ("`OUTPUT'", comnd )
	 then begin
		print(" [closing former output file] " & crlf );
		release(ouch);
		ouch_ getOutput( "New Output file: ", "", ouch );
		continue;
	      end;
	response_ response & "   -2000002";
	if -2000002= pCurrent_ pNext_ intscan(response,brk)
	 then print(" ?? Blank ?? ")
	 else do begin
		if pNext<0
		 then begin pCurrent_ pCurrent+1; pNext_ -pNext; end
		 else begin 
			pCurrent_ pNext;
			if brk=":" and 0 > pNext_ intscan(response,brk)
			 then begin
				print(" ?? -> ", pCurrent, ":", pNext);
				done;
			      end;
		      end;
		if Position(pCurrent)
		 then CopyMultiple( pCurrent, pNext )
		 else begin
			print(" ** no page ", pCurrent, " (", -lpage,
				" is last), try again.");
			done;
		      end
	      end
	 until -2000002= pNext_ intscan(response,brk);
      end;
end "OutPages";
r!p(map1) src,dst;
integer inch, ouch;
integer page, status;

print("Text merge ", pVersion, crlf );
ouch_ getOutput( "  Output file: ", 
	"TMERGE copies text pages from one set of files to others.
Type the name of the file which will first recieve output.
" ); 
src_map1cr(0,511);			
needPage_ false;

loop!begin "one file"	string pageList, comnd, ifile; 
			integer currentPage;
	loop!begin
		print(crlf, "Source: "); ifile_inchwl;
		if length(ifile)=0 then done "one file";
		comnd_ cvCommand(ifile);
		if cmdequ("?",comnd) or cmdequ("HELP",comnd) 
		 then print(" File with pages to copy or <CR> to stop")
		 else if 0 > inch_opfile( ifile, "ROM",16)
			then print(" * ERROR obtaining ", ifile, 
				" in OPFILE phase ", inch ash -18, 
				"= ", cvOut(!rh(inch)) )
			else done;
	      end;
	OutPages( src, inch, ouch );
	getmap( src, "U", 0,0);	! unmap the last read page (if any);
	chniov(inch,0,0);	! a release;
      end "one file";

getmap(src,"Z",0,0);
release(ouch);
end *

   