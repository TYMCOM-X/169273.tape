begin "twoUp"
require "(SAILIB)SAIL.def" source!file;
require 1 version;
let andThen=and, orElse=or;	! time-ordered booleans;
define elif="else if";

integer aLine, onTab, colonDot, smunch, switches;
simple procedure setupBreaks;
begin
setbreak( aLine_ getbreak, #lf & #ff, #cr, "INS" );
setbreak( onTab_ getbreak, #ht, null, "INS" ); 
setbreak( colonDot_ getbreak, ".:", null, "INR" ); 
setbreak( smunch_ getbreak, #ht&#sp, #ht&#sp, "TINS" ); 
setbreak( switches_ getbreak, "/", #ht&#sp, "KINS" ); 
end;
require setupBreaks initialization;

integer columnSize; string someTabs;
boolean squash;

simple boolean procedure match( string reply, pattern );
return( equ(reply, pattern[1 for length(reply)]) );
simple string procedure pad( integer columns );
return( someTabs[1 for inf-(columns ash -3)] );

simple string procedure clip( string s; reference integer size );
begin!code	define len=1, siz=2, byp=3, byt=4;
		label ok, loop;
	movei	siz,0;
	hrrz	len,-1(sp);
	jumpe	len,ok;
	move	byp,0(sp);
loop:	ildb	byt,byp;
	cain	byt,'11;	! is it a tab?;
	 iori	siz,7;
	addi	siz,1;
	camge	siz,columnSize;
	 sojg	len,loop;
	jumpe	len,ok;
	movni	len,-1(len);
	addm	len,-1(sp);
ok:	movem	siz,size;
	sub	p,[!xwd(2,2)];
	jrst	@2(p);
end;
boolean simple procedure setSwitches( string switchList );
! returns TRUE if switches successfully read;
begin
while length( switchList ) do
  begin		string s, name;
		integer i, brk;
  if length(name_ scan( switchList, switches, brk ))=0 then continue;
  if match(name,"SQUASH")	then squash_true
  elif match(name,"NOSQUASH")	then squash_false
  elif match(name,"HELP") or name="?" then print("The switches are:
	/HELP	  Print this message
	/SQUASH	  Compress blanks
	/NOSQUASH Dont compress blanks
	/COLUMN:# Show that nmber of character per file
    The initial setting is: /SQUASH/COLUMNS:39
    The current setting is: /", (if squash then null else "NO"), 
			"SQUASH/COLUMNS:", columnSize, crlf )
  elif match( scan(s_name,colonDot,brk), "COLUMNS" )
    andThen (i_intscan(s,brk)) > 0
   then begin
	columnSize_ i; 
	i_ (i + 7) ash -3;	! number of tabs needed;
	while length(someTabs) < i do someTabs_ someTabs & someTabs;
	someTabs_someTabs[1 to i];
	end
   else begin print("Invalid Switch: /", name, crlf); return(false);end;
  end;
return(true);
end;
integer brk, eof;
integer procedure getSource( string prompt; 
				reference string device, name );
begin	integer chan;
	string lastDevice;
chan_ getchan; lastDevice_ null;	! save a few OPENs;
while true
  do  begin
	print(prompt);
	name_ scan( Device_ inchwl, switches, brk );
	if brk = "/" andThen not setSwitches(Device) then continue;
	Device_ scan( name, switches, brk );
	if brk = ":"
	 then lop(name)
	 else begin name_ Device & name; Device_ "DSK"; end;
	if eof_ not kequ( Device, lastDevice )
	 then open(chan, lastDevice_ Device,'10000, 4,0, 250,brk,eof);
	if eof
	 then begin 
		print("Cannot get device """, Device, """, error = '",
			cvos(!rh(eof)), crlf );
		lastDevice_ null;
		continue;
	      end;
	lookup( chan, name, eof );
	if eof
	 then begin	string s;
		s_ scan( s_ name, colonDot, brk );
		if brk = 0
		 then lookup(chan, name_ name & ".SCM", eof);
	      end;
	if eof
	 then print("Cannot read file """, Device, ":", name, 
			""", error = '", cvos(!rh(eof)), crlf )
	 else return( chan );
      end;
end;
integer procedure setOutput( string prompt, defaultDevice, defaultFile);
begin	integer chan; string name, device, lastDevice; 

chan_ getchan; lastDevice_ null;	! save a few OPENs;
while true
   do begin
	do begin 
	    print(prompt);
	    name_ scan(Device_inchwl, switches, brk); 
	  end
	 until brk neq "/" orElse (setSwitches(Device)and length(name));
	if length(name) = 0
	 then begin release(chan); return(-1); end;

	Device_ scan( name, colonDot, brk );
	if brk = ":"
	 then lop(name)
	 else begin name_ Device & name; Device_ "DSK"; end;
	if eof_ not kequ( Device, lastDevice )
	 then open(chan, lastDevice_ Device,'10000, 0,4, 0,0,eof);
	if eof then LastDevice_ null else enter( chan, name, eof );
	if eof
	 then print("Cannot write file """, Device, ":", name, 
			""", error = '", cvos(!rh(eof)), crlf )
	 else return( chan );
      end;
end;
integer inch, ouch;
string array date,file, scmHead[1:2];
string pendingLine, pageHead;
integer pendingSize; 

boolean simple procedure breakUp( string source; integer index );
begin	string s;
scmHead[index]_ source;
if not equ( scan(source,onTab,brk),
	if index=1 then "File 1)" else "File 2)" )
 then return(false);
file[index]_ scan(source,onTab,brk);
if not equ("created: ", source[1 for length("created: ")])
 then return(false);
date[index]_ source[length("created: ")+1 to inf];
return(true);
end;

simple boolean procedure setupPage;
if breakup( input(inch,aLine), 1 ) andThen breakup( input(inch,aLine), 2 )
andThen length( input(inch,aLine) ) = 0
 then begin	integer i;
	pageHead_ #sp & file[1];
	if length(file[1])+length(date[1]) < columnSize-4
	 then pageHead_ pageHead & " (" & date[1] & ")";
	pageHead_ clip(pageHead, i) & pad(i) & #sp & file[2];
	if length(file[2])+length(date[2]) < columnSize-4 
	 then pageHead_ pageHead & " (" & date[2] & ")";
	pageHead_ pageHead & crlf & crlf; 
	return(true);
      end
 else return(false);

simple procedure clearPage;
if not ( equ(scmHead[1], input(inch,aLine))
	andThen equ(scmHead[2], input(inch,aLine))
	andThen length(input(inch,aLine))=0 )
andThen not eof then print(crlf & "Unexpected Page heading" & crlf);

simple integer procedure getLine;
begin	string s;
s_ input( inch, aLine );
if brk=#ff
 then begin 
	if length(s)
	 then print("Unexpected final line on page: ", s, crlf);
	clearPage; 
	s_ input( inch, aLine );
      end;
if squash
 then begin
	s_ scan( pendingLine_ s, smunch, brk );
	while brk and length(s) < columnSize
	   do s_ s & #sp & scan( pendingLine, smunch, brk );
      end;
pendingLine_ clip(s, pendingSize);
return( pendingLine );
end;
integer linesLeft, dataLinesOnPage; 
string simple procedure nextLine;
if ouch geq 0 geq (linesLeft_linesLeft-1) 
 then begin
	linesLeft_ dataLinesOnPage;
	return( pageHead );
      end
 else return( crlf );

record!class penders (string text; integer len; r!p(penders) next);
r!p(penders) head, free, pTemp;

simple r!p(penders) procedure new!pend;
begin
if not free then free_ new!record(penders);
pTemp_ free; free_ penders:next[free];
penders:text[pTemp]_ pendingLine;
penders:len[pTemp]_ pendingSize;
penders:next[pTemp]_ null!record;
return(pTemp);
end;

procedure doOnes;
begin	r!p(penders) tail, new;
tail_ head_ new!pend;
while "1"= getLine
   do begin
	new_ new!pend;
	penders:next[tail]_ new;
	tail_ new;
      end;
end;

procedure doTwos;
begin
if not equ(pendingLine, "****" )
 then print("**** was expected, but got: """, pendingLine, """" & crlf);
while head andThen "2"= getLine
   do begin
	cprint(ouch, penders:text[head], pad( penders:len[head] ),
	    pendingLine, nextLine );
	pTemp_ head; head_ penders:next[head];
	penders:next[pTemp]_ free; free_ pTemp;
      end;
if head
 then do begin
	cprint(ouch, penders:text[head], crlf);
	pTemp_ head; head_ penders:next[head];
	penders:next[pTemp]_ free; free_ pTemp;
	end
	until null!record = head
 else while "2"=getline do cprint(ouch, pad(0), pendingLine, nextLine );

if equ(pendingLine[1 for 8], "********")
 then cprint(ouch, pendingLine, nextLine )	! the multiple stars;
 else if not eof then print("Expected stars: ", pendingLine, crlf);
end;
string sourceFile, inDevice;

squash_ true; columnSize_ 39; someTabs_ #ht & #ht & #ht & #ht & #ht;
do inch_ getSource( "FILCOM output: ", inDevice, sourceFile )
 until setupPage;
ouch_ setOutput( "Onto file: ", inDevice, sourceFile );
cprint( ouch, pageHead );
linesLeft_ dataLinesOnPage_ 54;
if ouch geq 0 then pageHead_ crlf & #ff & pageHead;
getLine; 
do begin doOnes; doTwos; getLine; end
 until eof;
if ouch geq 0 then release(ouch);
if inch geq 0 then release(inch);
end "twoUp" $

