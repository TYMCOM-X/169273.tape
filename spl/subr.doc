List of subroutines, names of necessary files to reference;
===========================================================

ASK
    Boolean procedure Ask( String Prompt );

    This procedure prints the user PROMPT on the terminal and reads
    a reply (using OUTSTR and INCHWL).  If the reply is "YES" or a
    reasonable subset, barring leading and trailing whitespace, then
    the value is TRUE, otherwise FALSE.  Uses KEQU and thus FT-SAIL.


BLOCK
    Procedure BLOCK(String Text; Integer Chan, Width(1), Height(0),
		    Cipher(0), Left!Margin(0), Right!Edge(0),
		    Top!Margin(0), Bottom!Margin(0)
		    );

    This procedure writes to channel "CHAN" the user's text-string
    in large block letters where height(1)-width(1) uses a 7 by 7
    matrix the first 5 by 7 used for the character portion and the
    remaining 2 by 7 as spacing between the characters.  The full
    printable ASCII character set is available in upper and lower
    case, thus any normal SAIL-text-string may be passed as "Text".
    Characters with values less than '40 are printed as spaces.

    Cipher determines how the character is represented.  If it is
    zero (0) then each block-letter is composed of spaces for the
    background and the letter itself for the characters.  If the
    value of Cipher is positive, then the background is composed of
    spaces and each character in TEXT is composed of the character
    whose value is cipher (e.g. if cipher is '101 then "A" is used).
    If Cipher is negative, then each character is composed of blank
    space and the each background character is the value of Cipher.

    Left-Margin is the number of character spaces to leave as part
    of the background on the left edge.  Right-Edge represents the
    last useable character position to paint background on the right
    edge of the Text.  Top-Margin and Bottom-Margin represent the
    number of lines of background to print above and below the text.

    For example, Block("Text", C, 1,1, -"@", 12,60, 2,1) would output
    the following to channel C.  (Note:  the first 4 spaces are part
    of the indentation of this document and not part of the example).

    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@    @@@ @@@ @@@     @@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@ @@@@@@@ @ @@@@@@ @@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@    @@@@@ @@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@ @@@@@@@ @ @@@@@@ @@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@ @@@@    @@@ @@@ @@@@@ @@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


GETFIL.REQ	(SPL)GETFIL
    String Procedure GetFil(Reference String S; Reference Boolean Dot, Err);

    This procedure returns a correctly assembled file-specification in
    the form "[ (USERNAME) ] FILE [ .EXT ] [ [ppn] ]" where bracketed
    items are optional (except for the brackets around "ppn"), and it
    is illegal to specify "both" a username and a ppn.  The resultant
    value of "S" is the remaining string after the file-specification
    has been eaten.  DOT is a useful boolean flag to tell you whether
    the string contained an extension (for purposes of allowing you to
    provide your own "default").  ERR is true if there are any errors
    detected while scanning string S.

    Beware: This routine uses 4 break tables which it builds and tears
    down for each procedure call.  It uses GetBreak & RelBreak such
    that all is reset upon its return.


LEXSUB.REQ	(SPL)LEXSUB
    Boolean Procedure LLT(STRING A;  STRING B);
    Boolean Procedure LGT(STRING A;  STRING B);
    Boolean Procedure LLE(STRING A;  STRING B);
    Boolean Procedure LGE(STRING A;  STRING B);

    These procedures perform string comparisons on two strings such
    as their names imply LT, GT, LE and GE and return TRUE if string
    "A" meets the comparison implied against string "B".  SAIL has
    a built-in comparison EQU(A,B) which can be used to test equality.
    Note: No case conversion is done, such that LLT("A","a") is TRUE.


LICSUB.REQ	(SPL)LICSUB
    Simple String Procedure LicPrt(Integer License);
    Simple Integer Procedure LicRd(String License);

    These procedures return a printable list of licenses or an
    integer value from a list of licenses past as a string.  The
    string of license is ordered as per the order seen in SETOP,
    such that LicPrt( LicRd( license.list )) will contain all the
    same elements, but they may be ordered differently.  However,
    license.value will always = LicRd( LicPrt( license.value )).
    Case does not matter on input and uppercase is returned.


PRICHK.REQ	(SPL)PRICHK
    String Procedure Prichk(Value Integer C);

    This procedure will return a six (6) character string in the
    form Consonant-Vowel-Consonant-Consonant-Vowel-Consonant which
    will match the checksum value printed by the CKSUM program for
    the same numeric checksum.


PRTSUB.REQ	(SPL)PRTSUB
    Simple String Procedure PrProt(Integer Protection);
    Simple Integer Procedure RdProt(String Protection);

    These routines return a printable string containing a standard
    file protection value (e.g. "ALL RD NO") or an integer value
    from deciphering a string in the above format.  Case does not
    matter on input and uppercase is used for results.


SWITCH.REQ	(SPL)SWITCH
    String Procedure SW!INI(String Name(null), Option(null);
			    Boolean PPNFlag(False) );

    This routine will read a user profile file (SWITCH.INI) and
    search for a properly formatted option line for the specified
    program-name and option.  If one is found, a single-line string
    containing the specified options will be returned.  If the
    option is not found or if SWITCH.INI does not exist, then the
    null string is returned.

    If PPNFlag is FALSE (the default), then SWITCH.INI will be
    searched for on the user's logged-in PPN.  If True, then the
    user's GFD directory will be searched.

    Beware: This routine performs SAIL-style file i/o and sets and 
    releases a number of special breaktables using GetChan, GetBreak
    and RelBreak.  All channels and break-tables used are released
    upon return, assuming that your program is "well-behaved".  See
    Scott Daniels for a description of a "well-behaved" program.

TXTSUB.REQ	(SPL)TXTSUB
    String Procedure DUPL(Value String Text; Value Integer Count);
    String Procedure RPAD(String S; Integer Size; String Padd(" "));
    String Procedure LPAD(String S; Integer Size; String Padd(" "));
    String Procedure RTRUNC(String S; Integer Size);
    String Procedure LTRUNC(String S; Integer Size);

    These routines are clones of SNOBOL4 functions of the same names
    which do "nice" things to strings:

    DUPL returns a string which is COUNT copies of TEXT.
    RPAD returns a string which is S padded with spaces or "PADD" so
	 that the original text appears Left-justified (or padded on
	 the right) to fill Size spaces.  If length( S ) is greater
	 than Size then S is returned.  If PADD is a string, then the
	 result will be padded with as many copies of PADD (or partial
	 copies) as necessary to fill the space.  Also, PADD is built
	 from the right so that partal padding will match the same
	 pattern on subsequent lines.
    LPAD returns a string which is S padded as with RPAD except that
	 the text would appear Right-Justified (or padded on the left).
    RTRUNC returns a string which is S truncated to Size characters in
	 length (if necessary), lopping characters off the RIGHT edge.
	 Similar to S[1 to Size].
    LTRUNC returns a string which is S truncated to Size characters in
	 length (if necessary), lopping characters off the LEFT edge.
	 Similar to S[Length(S)-Size+1 to INF].

 