Begin

require ('10 lsh 18) lor '0 version;

define TENEX = FALSE;
Ifcr Tenex
 thenc	require "SAIL.DEF"   source!file;
	require "BLOCK.REQ"  source!file;
	require "TXTSUB.REQ" source!file;
	require "ATFILE.REQ" source!file;
 elsec	require "(SAILIB)SAIL.DEF"   source!file;
	require "(SAILIB)BLOCK.REQ"  source!file;
	require "(SAILIB)TXTSUB.REQ" source!file;
	require "(SAILIB)ATFILE.REQ" source!file;
 endc

require "MATCHS.REQ" source!file;

Ifcr not TENEX thenc define Cfile(x) = { Close( x ); Release( x ) }; endc

define	Spaces = {"        "};
define	##Brk = {" !@#%^&*()+=~_`[]|\:;'<>,.?/" & '42 & '173 & '175};

define	!Block(Group, Name, Size) = {
	Ifcr Length(Cvps(Size)) = 0 thenc assignc Size = 1; endc
	Define Group}&{Name = Group;
	Redefine Group = Group + Size;};

define	M. = 0;
	!Block( M.,None )
	!Block( M.,Setup )
	!Block( M.,Bliss )
	!Block( M.,TymMac )
	!Block( M.,DecMac )
	Define M.Max = M.DecMac;

preset!with "NONE","SETUP","BLISS-10","TYMMACRO-46","DECMACRO-53";
string array modes[M.None:M.DecMac];
define MaxType = 10;
string array TypeString[1:MaxType], TypeType[1:MaxType];

preset!with 0,1, 1, 1, 1;	integer array PageLine[0:M.Max];
preset!with 0,0, 0, 0, 0;	integer array PageBeg[0:M.Max];
preset!with 0,0, 0, 0, 0;	integer array PageEnd[0:M.Max];
preset!with 0,2, 3, 2, 5;	integer array TypeLine[0:M.Max];
preset!with 0,0, 0, 0, 0;	integer array TypeBeg[0:M.Max];
preset!with 0,0, 0, 0, 0;	integer array TypeEnd[0:M.Max];
preset!with 0,3, 3, 4, 4;	integer array LineLine[0:M.Max];
preset!with 0,1, 9, 1, 1;	integer array LineBeg[0:M.Max];
preset!with 0,8,12, 6, 6;	integer array LineEnd[0:M.Max];

string FileSpec, FileName, SymFile;
string TextLine, FileList, FileTitle, Titles, Title;
string StrMode, StrPage, StrLine, StrType, StrTest, StrLoc;

integer Brk, RealBrk, LastBrk, InBrk, TokBrk, InLst, InSpc, InNam;
integer Fiche, SPage, PPage, Pages, Lines, Mode;
integer Cipher, S.Width, S.Height, S.TypeLength, Margin, Edge;
integer S.PageLine, S.PageBeg, S.PageEnd;
integer S.TypeLine, S.TypeBeg, S.TypeEnd;
integer S.LineLine, S.LineBeg, S.LineEnd;
integer FicheChan, DiskChan, SymChan;
integer RealEof, Eof, SymEof, Oeuf, Stop, Totals, HeaderTop;
integer I, Count, Ficherow, Fichecol;

string procedure TOK (reference string S);
begin
    string S1; integer B1;
    Scan( S, inspc, B1 );		! clear whitespace;
    S1 _ scan(S, tokBrk, B1 );		! get the next word;
    if length(S1) = 0			! null?;
	then if length(S) = 0		!   null source also?;
	    then return (null)		!    yes - return null;
	    else S1 _ lop(S);		!    no  - get a character;
    Scan( S, inspc, B1 );		! clear whitespace;
    return(S1);				! return the token;
end;

simple procedure BumpFicheFrame;
begin
    FicheRow_ FicheRow + 1;		! increment row 0-12;
    If FicheRow > 12			! if > 12 then reset;
     then begin
	FicheCol_ FicheCol + 1;		! column up by 1, 0-15;
	FicheRow_ 0;			! row back to 0;
     end;
    If FicheCol > 15			! if > 15 then reset;
     then FicheCol_ 0;			! new sheet of fiche;
    StrLoc_ ("B"+FicheRow) &		! convert to location;
	     ("   " & Cvs(FicheCol+1))[inf-3 to inf];
end;

simple string procedure Prompt( string P );
begin
    Print( P );  Return( AtFile( True ) );
end;

simple integer procedure SP( String P; Integer Def );
Return( If Mode = M.Setup and		! For setup mode;
	   0 < I_ Cvd(Prompt(P))	!  then ask the question;
	 then I				!   and do the right thing;
	 else Def );			!  else default answer;

simple integer procedure SPO( String P; Integer Def );
Return( If Mode = M.Setup and		! For setup mode;
	   0 < I_ Cvo(Prompt(P))	!  then ask the question;
	 then I				!   and do the right thing;
	 else Def );			!  else default answer;

simple boolean procedure SPy( String P; Boolean Def );
begin
    String S;
    Return( If length(S_Prompt(P))
	     then equ(S,"YES"[1 for length(S)])
	     else Def );
end;

simple string procedure TypeMatch;
begin
    If S.TypeLength > 0
     then For I_ 1 step 1 until S.TypeLength
	   do If StrMatch( TypeString[I], TextLine ) > 0
	       then Return( TypeType[I] );
    Return( StrType );
end;

simple string procedure FindType( String Str );
Return( Case Mode of (
	[M.TymMac] [M.DecMac]				! Macro;
	    (If StrMatch( "SYMBOL TABLE", Str ) then "S"
	     else If StrMatch( "SYMBOL CROSS REFERENCE", Str ) then "C"
	     else If StrMatch( "MACRO/OPDEF CROSS REFERENCE", Str ) then "M"
	     else If StrMatch( "OPCODE CROSS REFERENCE", Str ) then "O"
	     else StrType ),
	[M.Setup]
	    (If S.TypeBeg > 0
	      then Str[S.TypeBeg to S.TypeEnd]
	      else TypeMatch),
	[M.Bliss]
	    (If StrMatch( "Identifier BL  Decl TYP USED", Str ) then "C"
	     else StrType ),
	[else] StrType ) );

simple string procedure FindPage( String Str );
begin
    Integer F; String S;
    Return( Cvs(If Mode > M.None			! ? Doing anything;
		 then Cvd(If S.PageBeg > 0		! Setup mode;
		     then Str[S.PageBeg to S.PageEnd]	! Given columns;
		     else If F_ StrMatch("Page",Str)	!  ? none;
			   then Str[F to Inf]		!  search string;
			   else StrPage  )		!  or return absolute;
		 else Pages - SPage  ) );		! else absolute page;
end;

simple string procedure FindLine( String Str );
begin
    Integer F; String S;
    F_ Cvd( S_Tok(Str) );
    Return( If Mode > M.None
	     then If equ(S,Cvs(F)) then S else StrLine
	     else Cvs(Totals) );
end;

simple procedure SymlokChecks;
begin
    If Lines = S.PageLine - 1
     then StrPage_ FindPage( TextLine );
    If Lines = S.TypeLine - 1
     then StrType_ FindType( TextLine );
    If Lines geq S.LineLine - 1
     then StrLine_ FindLine( If S.LineBeg > 0
			      then TextLine[S.LineBeg to S.LineEnd]
			      else TextLine );
end;


procedure AdvanceFrame;
! ----------------------------------------------------------------------;
!									;
!	AdvanceFrame	Bump page counts and fiche frame counters.	;
!									;
! ----------------------------------------------------------------------;
begin
    If Mode > M.None and StrType = null	! if doing symloc;
     then Cprint(symchan,		!  stuff, then print;
	   FileTitle,",",		!  it all out: title;
	   StrLine,",",StrLoc,",",	!  source-line, fiche-loc;
	   StrPage, crlf);		!  and source-page;
    BumpFicheFrame;			! increment frame #;
    Pages_ Pages + 1;			!  then increment pages;
    ppage_ ppage + 1;			!  ...and printing page;
    Print( If ppage land 1
	    then " " else #BS );	! indicate we're thinking;
    Cprint( FicheChan, #FF );		! Print #FF;
    Lines_ 0;				!   and reset line count;
end;

simple procedure Print!Heading;
! ----------------------------------------------------------------------;
!									;
!	Print!Heading	Print a page header on the microfiche.		;
!									;
! ----------------------------------------------------------------------;
begin
    string dir,ext;
    scan(filespec,inspc,brk);			! eat white space;
    TextLine_ Filespec;				! copy so we can eat text;
    while length(TextLine) do begin "scan text"
	filename_ scan(TextLine,innam,brk);	! read part of a name;
	if brk = ")" or brk = ">"
	 then dir_ filename;			! if ")>" then was username;
	if brk = "." then ext_ TextLine;	! if "." then set extension;
	If length(filename) and (brk = "." or brk = 0)
	 then TextLine_null;			! if not eol or ext loop;
    end "scan text";
    FileTitle_ Filename[1 to 6];		! set title to first 6;
    Title_ Title &(If Length(title) then "," else "")& FileTitle;
    Cprint(FicheChan, Crlf);			! print header page;
    Block(Filename[1 for 3], FicheChan, 6, 3, Cipher, 3, edge, 3,0);
    Block(Filename[4 for 3], FicheChan, 6, 3, Cipher, 3, edge, 3,3);
    Block((if length(dir) then "["&dir&"]" else filename[1 for 14])&
	  (if length(ext) then " ."&ext[1 for 3] else ""),
			     FicheChan, 1, 1, Cipher, 3, edge, 1,1);

    StrType_ StrLine_ null;			! clear symloc labels;
    StrPage_ "0";				! let header be so marked;
    Totals_ ppage _ Lines_ 0;			! clear file counts;
    AdvanceFrame;				! go to next frame;
    Print("  ",Filespec," pages ",Pages);	! print message;
    ppage_ 0;					! set pages to 0;
    LastBrk_ #FF;				! avoid double FF;
end;

boolean procedure Infile( String F );
! ----------------------------------------------------------------------;
!									;
!	InFile		Open file, printing error messages, if any.	;
!			Returns "TRUE" if no errors.			;
!									;
! ----------------------------------------------------------------------;
begin
    open(diskChan_getchan, "DSK",0, 4,0, 512, RealBrk, RealEof);
    lookup(diskChan, Filespec, RealEof);
    if RealEof
     then usererr(0,1,"File "&Filespec&" not Found","C");
    return( RealEof = 0 );
end;


string procedure get!line;
! ----------------------------------------------------------------------;
!									;
!	Get!Line	Read a line from the input file.		;
!									;
! ----------------------------------------------------------------------;
begin
    Own integer MoreText;
    Own string  OurLine;

    If not MoreText				! if buffer empty;
     then begin					!  then get more;
	OurLine_ input( diskChan, inbrk );	!   read part of a line;
	While not RealEof and			!   while not at eof;
	  RealBrk neq #LF and RealBrk neq #FF	!   and not a line-break;
	 do OurLine_ OurLine& (If RealBrk = #HT	!     for tabs, expand them;
		  then Spaces[1 to 8 - (Length(OurLine) mod 8)]
		  else RealBrk) &		!     keep everything else;
		 input( diskChan, inbrk );	!   add to line + more input;
     end
     else OurLine_ OurLine[S.Width+1 to INF];	!  else clip buffer;
    MoreText_ Length( OurLine ) > S.Width;	! if too many characters;
    Brk_ If MoreText then #LF else RealBrk;	! set break and;
    Eof_ RealEof and (not MoreText);		!  eof flags appropriately;
    Return( OurLine[1 to S.Width]		! Return a line;
	    & (If Length(OurLine) or		!  ...if non-blank;
		  RealBrk neq #FF		!      or not a FF;
		then Crlf else "") );		!  ...add a CRLF;
end;


Procedure Each!file;
! ----------------------------------------------------------------------;
!									;
!	Each!File	Handle the formatting of one file.		;
!			Assumes all necessary channels for output	;
!			have been openned.				;
!									;
! ----------------------------------------------------------------------;
Begin "Each File"
    If InFile( Filespec )			! if we have a file;
     then begin "Count pages"			! then format it;
	SPage_ Pages;				! remember start page;
	Print!heading;				! do header stuff;
	Eof_ False;				! not EOF, so set flag;
	While not eof
	 do begin "Reading between the lines"
	    TextLine_ get!line;			! read line or partial line;
	    If not eof or length(TextLine)	! ? eof or null line;
	     then begin "Counting breaks"
		Cprint(FicheChan,TextLine);	! print a line of data;
		If Mode > M.None		! check for higher modes;
		 then SymlokChecks;		! of life, such as symlok;
		If brk = #LF			! for normal "or" overflow;
		 then Lines_ Lines + 1;		!  then increment lines;
		If brk = #FF or			! if form-feed;
		   Lines geq S.Height		!  or page overflow;
		 then begin "do FF"		!  then do page-advance;
		    Brk_ #FF;			! change break char;
		    If LastBrk neq #FF or	! if FF not after FF;
		       length(TextLine)		!  or text on line;
		     then AdvanceFrame;		!  then advance the frame;
		 end "do FF";
		LastBrk_ brk			! copy breaks;
	     end "Counting breaks"
	 end "Reading between the lines";
	If brk neq #FF then AdvanceFrame;
	Print(" to ",Pages," (",pages-spage,")",Crlf);
     end "Count pages";
    Cfile( diskChan );
 end "Each File";

Simple Procedure GetSetupMode;
begin "Setup Mode"

  Do begin "get proper mode"
   Strmode_ Prompt("Mode (type ? for help): ");	! listing mode;
    If Length( StrMode ) = 0			! <CRLF> is;
     then Mode_ M.None				!   the same as "NONE";
     else Mode_ ArrMatch( StrMode, Modes ) - 1;	!   else match entries;
    If Mode < M.None				! ? Unknown mode;
	then Print( Crlf,"Supported modes are:",
		 Crlf,"  NONE         normal text file",
		 Crlf,"  SETUP        special setup dialogue",
		 Crlf,"  BLISS-10     listing from BLISS-10/20",
		 Crlf,"  TYMMACRO-46  listing from Tymshare MACRO",
		 Crlf,"  DECMACRO-53  listing from MACRO 53",
		 Crlf,"  a carriage-return defaults to NONE", Crlf,
		 Crlf );
	end "get proper mode" until Mode geq M.None;

    S.Height_   SP( " Page height: ", 60 );
    S.Width_    SP( " Page width: ", 132 );
    Edge_       SP( " Right edge: ", S.Width );
    Cipher_     SPo( " Cipher value: ", -'177 );

    If Mode = M.Setup and not SPy( " Symlok output (Y or N)? ", False )
     then Mode_ M.None;

    S.PageLine_ SP( " 'Page n' line: ", PageLine[Mode] );
    S.PageBeg_  SP( " 'Page n' start column: ", PageBeg[Mode] );
    S.PageEnd_  If S.PageBeg > 0
		 then SP( " 'Page n' end column: ", PageEnd[Mode] )
		 else 0;

    S.TypeLine_ SP( " Type line: ", TypeLine[Mode] );
    S.TypeBeg_  SP( " Type start column: ", TypeBeg[Mode] );
    If S.TypeBeg > 0
     then S.TypeEnd_ SP( " Type end column: ", TypeEnd[Mode] )
     else If Mode = M.Setup then begin
	S.TypeLength_ 0;
	For I_ 1 step 1 until MaxType
	 do begin
	    TypeString[I]_ Prompt( " Match #"&Cvs(I)&": ");
	    If Length( TypeString[I] ) = 0
	     then Done;
	    TypeType[I]_ Prompt( " Type #"&Cvs(I)&": ");
	    S.TypeLength_ I;
	 end;
	If I geq MaxType
	 then Print( Crlf, "** Search string limit reached **",
		     Crlf );
     end;

    S.LineLine_ SP( " Numbered lines start at line: ", LineLine[Mode] );
    S.LineBeg_  SP( " Number start column: ", LineBeg[Mode] );
    S.LineEnd_ If S.LineBeg > 0
		then SP( " Number end column: ", LineEnd[Mode] )
		else 0;
end "Setup Mode";


Print("[FICHE version ",			! Banner of Identifcation;
	Cvos(!lh(memory['137])),".",
	Cvos(!rh(memory['137])),"]", Crlf);

setbreak(tokBrk_getbreak,#LF&##BRK,#CR,"RINK");	! all break chars;
setbreak(inbrk_getbreak,#LF&#HT&#FF,#CR,"INS");	! break on LF FF HT;
setbreak(inlst_getbreak,",",Null,"KINS");	! break on comma;
setbreak(inspc_getbreak," "&#HT,Null,"XNR");	! Whitespace;
setbreak(innam_getbreak,"().<>",Null,"KINS");	! userstuffs;

TTYUP( True );					! don't need Kequ;

Mode_ M.Setup;					! fake it on intital question;
Fiche_ SP( "Initial Fiche No.: ", 1 );		! initialize fiche number;
HeaderTop_ SPy( "Headers in TOP row (Y or N)? ", False );

Mode_ -1;					! initialize the mode;
GetSetupMode;					! initialize the world;

Titles_ null;					! initialize titles;

While Length( FileList_ Prompt(Crlf&"Fiche #"&Cvs(Fiche)&": ") )
 do begin "each fiche"				! setup output file;

    If Mode > 0
     then begin
      Open(symchan_getchan, "DSK",0, 0,4, 0,0, symeof_-1);
      Enter(symchan,Symfile_"FSH"&CVS(Fiche+1000)[2 for 3]&".MFS",symeof_-1);
     end;

    Open(FicheChan_getchan, "DSK",0, 0,4, 0,0,oeuf_-1);
    Enter(FicheChan, filename_"FSH"&CVS(Fiche+1000)[2 for 3]&".FSH", oeuf_0);
    Print("Writing file ", filename,
	If Mode > 0 then " ...symloc info in file "&Symfile else "", crlf);

    ficheRow_ ficheCol_ Pages_ 0;		! initialize fiche parameters;
    StrLoc_ "B  1";				! row 0 - column 0 ==> B 1;
    Title_ Null;				! initialize title on fiche;

    While Length(FileList)
     do begin

	Filespec_ Scan(FileList,inlst,brk);	! gobble one file-spec;

	If Length(Filespec) then Each!File;	! one file at a time;

	If HeaderTop and (0 neq (Pages mod 13))	! if want headers at top;
	 then while 0 neq (Pages mod 13)	!  then while not at top;
		do begin			!  do the necessary things;

		    BumpFicheFrame;		!    Increment fiche frame;
		    Pages_ Pages + 1;		!    Increment page count;
		    Cprint(FicheChan, #FF);	!    Push the actual page;

		end;

     end;

    If Pages > 208
     then Print( "*** File(s) do not fit on ONE fiche ***", crlf,
		 "*** ", (Pages+207) div 208,
		 " sheets of fiche will be used. ***", crlf );

    Titles_ Titles & ("Fiche #"&Cvs(Fiche)&":    ")[1 for 12]
	    & Title & Crlf;

    Cfile( FicheChan );			! close fiche data;
    If Mode > 0 then Cfile( symchan );	! close symloc data;

    Fiche_ Fiche + 1;			! count fiche;

end "each fiche";

Print( Crlf, Crlf, "Fiche titles", Crlf, Crlf, Titles, Crlf, Crlf );

Call(0,"EXIT");  ! exit to monitor without "end of sail...";

end;
 