 REP 1/1
		TITLE	BACKRS -- MODULE TO DO THE WORK FOR BACKUP -- %4(440)
		SUBTTL	FRANK NATOLI/FJN/PFC/KCM/JEF/MEB/CLRH/VLR/CGN/WMG/DC/BPK/MS/BAH	18-Jun-82

	DECVER==4		;MAJOR VERSION
	DECMVR==0		;MINOR VERSION
	DECEVR==440		;EDIT NUMBER
	CUSTVR==0		;CUSTOMER VERSION

 WIT
		TITLE	BACKRS -- MODULE TO DO THE WORK FOR BACKUP -- %4A(514)
		SUBTTL	FRANK NATOLI/FJN/PFC/KCM/JEF/MEB/CLRH/VLR/CGN/WMG/DC/BPK/MS/BAH/EDS	13-Apr-83

	DECVER==4		;MAJOR VERSION
	DECMVR==1		;MINOR VERSION
	DECEVR==514		;EDIT NUMBER
	CUSTVR==2		;Who edited, Joe Smith @ CSM
	;Also includes the following edits from the Software Dispatch
	;501  10-31514 15-Jun	Set /NOSCAN in LOOKUP block
	;506  10-32867 15-Nov	/ERRMAX
	;512  10-31851  1-Jan	List version numbers
	;515  10-33914 22-Jun	Remove edit 426.
	;[DPM]			Enable PSI notification of volume switch

		CSM01$==-1	;Change listing to fit within 64 columns
		CSM02$==-1	;Watch for reel changes after every OUT/IN uuo
		CSM03$==0	;Don't put SSNAME into the ANSI tape label
		CSM04$==777777	;Put REELID/FILE at top and bottom of listing
		CSM05$==-1	;Put list of REELIDs in TMP:TAP for cataloging
 REP 15/1
	;.SKIP 1.CENTER;^VERSION 4
 WIT
	;.SKIP 1.CENTER;^VERSION 4A
 REP 8/3
		SEARCH	MACTEN,UUOSYM,SCNMAC		;[174]
	;%%C==%%C	;SHOW VERSION OF C
	%%MACT==%%MACT	;SHOW VERSION OF MACTEN		[174]
 WIT
		SEARCH	MACTEN,UUOSYM,SCNMAC
	%%MACT==%%MACT	;SHOW VERSION OF MACTEN
 REP 14/3

		SALL		;CLEAN LISTING


	%%%BKP==:DECVER		;ENSURE CONSISTENT VERSION OF BACKUP
 WIT
		SALL		;CLEAN LISTING

	%%%BKP==:DECVER		;ENSURE CONSISTENT VERSION OF BACKUP


	SUBTTL	CSM Revision History
		SEARCH	CSMEDT		;CSM edit macro definition

	; Edit	   Date   Who	Description
	;======	========= ===	================================================
	;CSM 00	 1-Jun-81 JMS	Make /NLIST produce lines that are 64 characters
	;			max so that DBLDOC can print 2 columns per page.
	  ;
		CSMEDT	01	;Show value of CSM01$
	  ;
	;CSM 02	 1-Jun-81 JMS	Notice when a volume-switch occurs for labelled
	;			tapes by checking the REELID after every OUTPUT.
	  ;
		CSMEDT	02	;Show value of CSM02$
	  ;
	;CSM 03	 8-Jun-81 JMS	Use TAPOP. to set labelled file parameters.
	;			FILE=SSNAME, LRECL and BLKSIZE=544*5.
	  ;
		CSMEDT	03	;Turned off until bug in PULSAR is fixed.
	  ;
	;CSM 04	 8-Jun-81 JMS	CSM04$&1 will put FF and header in list file
	;			every 60 lines.  CSM04$&2 will put REELID/FILE at
	;			top of page, CSM04$&4 will put it at the bottom.
	  ;
		CSMEDT	04	;Show value of CSM04$
	  ;
	;CSM 05	10-Jun-81 JMS	Put list of REELIDs in TMPCOR file TAP.  Format:
	;				SSNAME:DSKS FULL SAVE
	;				DATE:  14-Feb-83 Monday
	;				VOLUME:MT0600 FILE:04
	;				EOV:   DSKB:[1234,5670,SFD1]FOOBAR.LST
	;				VOLUME:MT0601 FILE:01
	;			The above example used 2 tapes, starting with
	;			saveset #4 on MT0600 and continuing to MT0601.
	  ;
		CSMEDT	05	;Show value of CSM05$
	  ;
	IFN CSM05$,<IFE CSM02$,<PRINTX ?CSMEDT 05 depends on CSMEDT 02>>
	  ;
	;End of CSM Revision History.
 REP 26/4
	ND EMAX,^D100		;MAX NUMBER OF TAPE ERRORS BEFORE GIVING UP
 WIT
	;[506] ND EMAX,^D100	;MAX NUMBER OF TAPE ERRORS BEFORE GIVING UP
 REP 53/9
			;&#FLAG CONTROL . 
 WIT
			;&#FLAG CONTROL .
 REP 20/10
	PSIVCT:: BLOCK	4	;PSI VECTOR
 WIT
		CSMEDT	02,1	;Watch reel changes, part 1
	IFN CSM02$!CSM03$,<
	LBTYP:	BLOCK	1		;Non-zero if MDA controlled tape
	MTCBLK:	BLOCK	4		;Block for MTCHR.
	REELID=MTCBLK+.MTRID		;Label for reel-ID
	  ND .MTFIL,2			;Should be in UUOSYM in place of .MTWRD==2
	MTFILE=MTCBLK+.MTFIL		;Count of files from BOT
	MTREC= MTCBLK+.MTREC		;Count of records from start of file
	>  ;End of IFN CSM02$!CSM03$
	IFE CSM02$!CSM03$,<
	REELID:	BLOCK	1	;[DPM] Current reel ID
	>  ;End of IFE CSM02$!CSM03$
	PSIVCT:!		;[DPM] Base address of PSI vector
	PSITTY::BLOCK	4	;[DPM] PSI vector for TTY
	PSIMTA::BLOCK	4	;[DPM] PSI vector for MTA
 INS 88/10
	DCHARG:	BLOCK	5	;[503] FOR DSKCHR UUO
 REP 112/10
	STOEND==.-1	;END OF STORAGE

 WIT

		CSMEDT	05,1	;Put REELIDs in TMP:TAP, part 1
	IFN CSM05$,<
		TMPSIZ==^D500		;Size of our TMPCOR file in chars
	TMPBUF:	BLOCK	TMPSIZ/5	;TMPFIL
	TMPCNT:	BLOCK	1		;Count of bytes remaining
	TMPPTR:	BLOCK	1		;Byte pointer
	LSTFLG:	BLOCK	1		;Address of routine used by LSTOUT
	>  ;End of IFN CSM05$

	STOEND==.-1	;END OF STORAGE

		CSMEDT	03,1	;Labelled tape info, part 1
	IFN CSM03$,<	;Non-zero storage
	TAPBLK:	.TFLPR+.TOSET		;TAPOP. block for label parameters
		F.MTAP			; Channel
		.TFCAM,,.TRFFX		; Imbedded CRLFs, fixed length records
		MTBBKP*5		; Record size, in bytes
		MTBBKP*5		; Block size
		0			; Creation ,, expiration date
		0			; Protection
		0			;+.TPSEQ  File sequence number
		BLOCK	<^D17+4>/5	;+.TPFNM  File name, 17 chars of ASCII
		BLOCK	.TPLEN-<.-TAPBLK> ; Fill out the rest of the block
	>  ;End of IFN CSM03$

		CSMEDT	04,1	;List 60 lines per page, part 1
	IFN CSM04$,<
	LINUMB:	^D60			;Number of lines left on page
	PAGNUM:	0			;Listing file page number (never reset)
	NEWPAG:	-1			;-1 if first file on the page
	>  ;End of IFN CSM04$
 REP 9/11
	;^BACKUP PROVIDES AN "INTERCHANGE" SWITCH WHICH CAUSES SYSTEM DEPENDENT 
	;DATA TO BE IGNORED AND ONLY CRITICAL FILE INFORMATION TO BE WRITTEN ON
	;TAPE. ^A RESTORE OPERATION IN INTERCHANGE MODE ALSO IGNORES SYSTEM 
 WIT
	;^BACKUP PROVIDES AN "INTERCHANGE" SWITCH WHICH CAUSES SYSTEM DEPENDENT
	;DATA TO BE IGNORED AND ONLY CRITICAL FILE INFORMATION TO BE WRITTEN ON
	;TAPE. ^A RESTORE OPERATION IN INTERCHANGE MODE ALSO IGNORES SYSTEM
 REP 62/13
	;HEADER IS RESERVED FOR CUSTOMER USE. ^THE REMAINING 20 WORDS IN THE 
 WIT
	;HEADER IS RESERVED FOR CUSTOMER USE. ^THE REMAINING 20 WORDS IN THE
 REP 16/14
	;PUNCTUATION. ^THE PATH COMPONENTS ARE TREATED AS IF THE USER GAVE A 
 WIT
	;PUNCTUATION. ^THE PATH COMPONENTS ARE TREATED AS IF THE USER GAVE A
 REP 26/14
	;ONE NULL. ^FOR THE <UFD DIRECTORY FIELD, THE PROJECT AND 
 WIT
	;ONE NULL. ^FOR THE <UFD DIRECTORY FIELD, THE PROJECT AND
 REP 5/17
	;.LE;<A$CRET -- CREATION DATE AND TIME OF THIS GENERATION 
 WIT
	;.LE;<A$CRET -- CREATION DATE AND TIME OF THIS GENERATION
 REP 27/18
	;.LE;<D$PROT -- DIRECTORY PROTECTION [<RB.PRV]. 
 WIT
	;.LE;<D$PROT -- DIRECTORY PROTECTION [<RB.PRV].
 REP 86/23
		MOVEI	T1,TTYSER	;SERVICE ROUTINE ADDRESS
		MOVEM	T1,PSIVCT+.PSVNP;STORE NEW PC IN PSI VECTOR
		MOVX	T1,PS.VTO	;DISABLE WITH DEBRK. UUO
		MOVEM	T1,PSIVCT+.PSVFL;STORE
		MOVEI	T1,PSIVCT	;BASE ADDRESS
		PIINI.	T1,		;INITIALIZE PSI
		  TXZ	F,FL$PSI	;ERROR--CLEAR PSI FLAG

		MOVSI	T2,'TTY'	;SET DEVICE
		MOVX	T3,PS.RID	;REASON=INPUT DONE
		SETZ	T4,		;ZILCH
		MOVX	T1,PS.FON!PS.FAC;TURN PSI ON
		HRRI	T1,T2		;ADDRESS OF ARG BLOCK
		PISYS.	T1,		;EXEC
		  TXZ	F,FL$PSI	;ERROR--ZILCH PSI FLAG
 WIT
	;[DPM] Add PSI interrupt to report volume switches in listing
	  ND PS.RSW,1B31	;[DPM] PSI reason = Reel Switch

		MOVEI	T1,TTYSER	;SERVICE ROUTINE ADDRESS
		MOVEM	T1,PSITTY+.PSVNP;[DPM] Store new PC in PSI vector
		MOVEI	T1,MTASER	;[DPM] MTA service routine
		MOVEM	T1,PSIMTA+.PSVNP;[DPM] Store new PC in PSI vector
		MOVX	T1,PS.VTO	;DISABLE WITH DEBRK. UUO
		MOVEM	T1,PSITTY+.PSVFL;[DPM]
		MOVEM	T1,PSIMTA+.PSVFL;[DPM]
		MOVEI	T1,PSIVCT	;BASE ADDRESS
		PIINI.	T1,		;INITIALIZE PSI
		  JRST	SETERR		;[DPM] Error - clear PSI allowed flag
		MOVE	T1,[PS.FON!PS.FAC+[EXP <'TTY   '>,<<PSITTY-PSIVCT>,,PS.RID>,0]];[DPM]
		PISYS.	T1,		;[DPM] Turn PSI on for TTY
		  JRST	SETERR		;[DPM] Should never happen
		MOVE	T1,[PS.FON!PS.FAC+[EXP F.MTAP,<<PSIMTA-PSIVCT>,,PS.RSW>,0]];[DPM]
		PISYS.	T1,		;[DPM] Turn PSI on for MTA
	SETERR:	  TXZ	F,FL$PSI	;ERROR--ZILCH PSI FLAG
 INS 134/23
		CSMEDT	02,2	;Watch for reel changes, part 2, before CMDTBL:
	IFN CSM02$!CSM03$,<	;The variable LBTYP is set as follows:
			;-1 for unlabelled tapes, but MDA is involved at EOT
			; 0 for BYPASS or user-EOT, BACKRS does reel switching
			;+1 for ANSI labels, MDA will switch reels automatically
		SETOM	LBTYP		;Assume MDA is involved
		MOVE	T1,TAPLBL##	;Get label type
		CAXE	T1,.TFLAL	;ANSI labels?
		CAXN	T1,.TFLAU	; with or without user labels?
		 MOVEM	T1,LBTYP	;Yes, make flag positive (+1 or +2)
		CAXE	T1,.TFLBP	;Bypass?
		CAXN	T1,.TFLNV	;User-EOT?
		 SETZM	LBTYP		;Yes, MDA won't change reels on us
		PUSHJ	P,MTARID	;Get REELID and file number
	>  ;End if IFN CSM02$!CSM03$

		CSMEDT	04,2	;List 60 lines per page, part 2
	IFN CSM04$,<	;Set up LINUMB
		SKIPN	S.LIST##	;Listing?
		 JRST	CSM04Z		;No
	IFE CSM04$&4,<MOVEI T2,^D60	;Set line counter to 60 per page>
	IFN CSM04$&4,<MOVEI T2,^D59	;Leave room for line at bottom>
		MOVEI	T1,F.LIST	;Get list device channel
		DEVCHR	T1,		;Get its characteristics
		TXNE	T1,DV.TTY	;TTY or NUL?
		 SETO	T2,		;Yes, no headers
		MOVEM	T2,LINUMB	;Number of lines left on page
		PUSHJ	P,LSTHDR	;Send header to list file
		PUSHJ	P,LSCRLF	;Put blank line before T$BEG output
	CSM04Z:	>  ;End of IFN CSM04$

	;[DPM] Add PSI interrupt to report volume switches in listing
		PUSHJ	P,MTARID	;[DPM] Read current REELID before testing S.OPER
 REP 25/25
		MOVE	T2,UPHYN	;PHYSICAL TAPE NAME
		MOVE	T1,[.MTRID,,T2]	;ARG FOR MTCHR.
		MTCHR.	T1,		;GET REELID
		  SETZ	T3,		;LOSE
 WIT
		MOVE	T3,REELID	;[DPM] Read REELID
 INS 57/25

		CSMEDT	05,2	;Put REELID list in TMP:TAP, part 2 at LSTSAV:+6
	IFN CSM05$,<	;Initialize TMPBUF before doing SAVE
		SKIPN	S.LIST##	;List file active?
		 JRST	CSM05Z		;No, do not write TMP
		MOVE	T1,G$TYPE(MH)	;Get type of save file
		CAIN	T1,T$END	;End of save set?
		 JRST	CSM05Y		;Yes, finish writing TMP
		CAIE	T1,T$BEG	;Beginning?
		 JRST	CSM05Z		;No, skip continuation records
		MOVSI	T2,'TAP'	;Get TMPCOR name
		MOVE	T3,[IOWD <TMPSIZ/5>,TMPBUF]
		MOVE	T1,[.TCRRF,,T2]	;Point to args
		TMPCOR	T1,		;Read old file, T1 gets size in words
		  MOVEI	T1,0		;No old file
		MOVE	T2,[POINT 7,TMPBUF]
		ADD	T2,T1		;Make byte pointer to append to file
		MOVEM	T2,TMPPTR	;Save pointer
		IMULI	T1,5		;Number of bytes used
		SUBI	T1,TMPSIZ	;Negative bytes remaining
		MOVNM	T1,TMPCNT	;Set byte count
	;Format of TMP:TAP (example starts with 4th saveset on BACK01, uses 2)
	;	SSNAME:PARTIAL SAVE OF DSKB
	;	DATE:  10-Jun-81 Wednesday
	;	REELID:BACK01 FILE:04
	;	EOV:   DSKB:[1234,5670,SFDA]FOOBAR.LST
	;	REELID:BACK02 FILE:01
	;There can be more than one save in the TMP file.
		PUSH	P,LSTFLG	;Save old routine
		PUSH	P,LINUMB	;Save current line number
		SETOM	LINUMB		;Disable funny stuff at line 60
		MOVEI	T1,LSTTMP	;Addr of new routine
		MOVEM	T1,LSTFLG	;Set to write into TMPBUF

	;Put SSNAME, DATE, and first VOLUME in TMPCOR file

		MOVEI	T1,[ASCIZ /SSNAME:/]
		PUSHJ	P,LSTMSG
		MOVEI	T1,S.SSNM##	;Point to saveset name
		PUSHJ	P,LSTMSG	;Put in TMPBUF
		MOVEI	T1,[ASCIZ /
	DATE:  /]
		PUSHJ	P,LSTMSG
		MOVX	T1,%CNDTM	;Get the universal date/time
		GETTAB	T1,
		  JFCL			;Can never fail
		PUSHJ	P,LSTWEK	;List date and day of week
		PUSHJ	P,LSCRLF	;Finish line
		POP	P,LINUMB	;Restore line counter
		POP	P,LSTFLG	;Restore old output routine
		PUSHJ	P,TMPVOL	;Put current REELID in TMPBUF
		JRST	CSM05Z		;Done

	;Here at end of saveset, write data back to TMPCOR file

	CSM05Y:	MOVE	T1,TMPCNT	;Get number of bytes remaining
		SUBI	T1,TMPSIZ+4	;Negative bytes used (with rounding)
		IDIVI	T1,5		;Number of words to write
		HRL	T3,T1		;Negative word count
		HRRI	T3,TMPBUF-1	;Build IOWD
		MOVSI	T2,'TAP'	;TMPCOR file name
		MOVE	T1,[.TCRWF,,T2]	;Point to args
		TMPCOR	T1,		;Write TMP:TAP
	          JRST	[OUTSTR [ASCIZ /%BKPERT Error writing TMP:TAP
	/]				  ;7.01 always has room in TMPCOR
			 OUTSTR	TMPBUF	  ;Output the message
			 JRST	.+1]	;Continue anyway
	CSM05Z:	>  ;End of IFN CSM05$

 REP 4/26
	;INTO CORE, AND SORTED IF NEEDED. ^THEN THE ^^UFD\\S SPECIFIED FOR THE 
 WIT
	;INTO CORE, AND SORTED IF NEEDED. ^THEN THE ^^UFD\\S SPECIFIED FOR THE
 REP 50/29
		SETOM	T1,CNAMSW	;[416] STORE 
 WIT
		SETOM	CNAMSW		;[416] STORE
 REP 189/31
		SKIPN	S.INTR##	;SEE IF /INTERCHANGE 
 WIT
		SKIPN	S.INTR##	;SEE IF /INTERCHANGE
 REP 2/33
	;<WRTUFD IS A ROUTINE TO WRITE A <T$UFD RECORD ON TAPE FOR EACH DIRECTORY IN 
 WIT
	;<WRTUFD IS A ROUTINE TO WRITE A <T$UFD RECORD ON TAPE FOR EACH DIRECTORY IN
 INS 14/34
		CSMEDT	02,4	;Watch reel changes, part 4, at SAVFIL:+8
	IFG CSM02$,< PUSHJ  P,NVOLCK >	;Do new volume check before each file

 DEL 75/38


 REP 23/48
		JRST	RSTRE2		;[426]
 WIT
		JRST	[PUSHJ	P,LSTXXX  ;[515] Yes, list it and
			 JRST	RSTREC]	  ;[515]  continue
 REP 33/48

	RSTRE2:	PUSHJ	P,LSTXXX	;[426] LIST IT
		PUSHJ	P,LABSTS	;[426] CHECK LABEL TYPE
		JRST	RSTREC		;[426]

	;Make sure that the tape is being read using the same label
	;type that it was written with.  If it is not, give an error
	;message and wait for the user to type GO.
	;
	LABSTS:	MOVE	T1,TAPLBL##	;[426] GET THE LABEL TYPE 
		CAMN	T1,S$LBLT(MH)	;[426] IS CURRENT LABEL TYPE = SAVE LABEL TYPE?
		POPJ	P,		;[426] YES, RETURN 
		HRL	T1,S$LBLT(MH)	;[433] MOVE THE SAVE LABEL TYPE IN LH
		HRLZI	T2,LABCTE	;[433] SET UP AOBJN FOR TABLE SEARCH
	LABST1:	CAMN	T1,LABCTB(T2)	;[433] DO WE HAVE A MATCH?
		POPJ	P,		;[433] YES. DON'T COMPLAIN ABOUT THE MISMATCH
		AOBJN	T2,LABST1	;[433] LOOP THRU THE TABLE, REPORT IF NO MATCH
		OUTSTR	[ASCIZ/
	%BKPDLT Tape being read /]	;[426]
		MOVE	T1,LABTBL(T1)	;[426] GET THE POINTER FOR THE TABLE
		OUTSTR	@T1		;[426] 
		OUTSTR	[ASCIZ /was written /]	;[426]
		MOVE	T1,S$LBLT(MH)	;[426] SAVED LABEL
		MOVE	T1,LABTBL(T1)	;[426] GET THE POINTER FOR THE TABLE
		OUTSTR	@T1		;[426] 
		OUTSTR	CRLF		;[426]
		OPER$	(TGC,errors may occur type "GO" to continue..)
		PUSHJ	P,TYI		;[426] WAIT FOR GO
		POPJ	P,		;[426] 

	;The following table contains all label types as defined by
	;the .TFLBL function of the TAPOP. UUO.
	;
	LABTBL:	EXP	[ASCIZ /BYPASS /]				;[426]
		EXP	[ASCIZ /using ANSI labels /  ]			;[426]
		EXP	[ASCIZ /using ANSI labels and user labels /  ]	;[426]
		EXP	[ASCIZ /using IBM labels /  ]			;[426]
		EXP	[ASCIZ /using IBM labels and user labels /  ]	;[426]
		EXP	[ASCIZ /using leading tape mark /  ]		;[426]
		EXP	[ASCIZ /using NONSTANDARD labels /  ]		;[426]
		EXP	[ASCIZ /unlabeled /  ]				;[426]
		EXP	[ASCIZ /using DEC COBOL ASCII labels /  ]	;[426]
		EXP	[ASCIZ /using DEC COBOL SIXBIT labels /  ]	;[426]
		EXP	[ASCIZ /USER-EOT /  ]				;[426]


	;The following table contains all combinations of label types which are legal.
	;T1 contains the save label type in its LH and the current label type in its RH.
	;The routine LABSTS then does a table search for an equivalence.  Tapes written
	;by BACKUP before GALAXY 4.1 are written in BYPASS (label type 0) by definition.

	LABCTB:	.TFLBP,,.TFLNL		;[433] BYPASS,,UNLABELLED
		.TFLBP,,.TFLNV		;[433] BYPASS,,USER-EOT
		.TFLNL,,.TFLBP		;[433] UNLABELLED,,BYPASS
		.TFLNL,,.TFLNV		;[433] UNLABELLED,,USER-EOT
		.TFLNV,,.TFLBP		;[433] USER-EOT,,BYPASS
		.TFLNV,,.TFLNL		;[433] USER-EOT,,UNLABELLED
	LABCTE==LABCTB-.		;[433] Negative length of table

 WIT
	;**;[515] Delete routines RSTRE2 and LABSTS, BAH, 20-Jun-84
 REP 54/52
		SETOM	T1,CNAMSW	;[416] STORE
 WIT
		SETOM	CNAMSW		;[416] STORE
 REP 96/52
	RSTVER:	SKIPE	S.INTR##	;SEE IF /INTERCHANGE
 WIT
	RSTVER:	PUSHJ	P,SETSTR	;[503][262] SET UP STRUCTURE MASK
		SKIPE	S.INTR##	;SEE IF /INTERCHANGE
 DEL 140/52
		PUSHJ	P,SETSTR	;[262] SET UP STRUCTURE MASK
 INS 9/55
		MOVX	T1,.PTSCN	;[501] No SCAN
		MOVEM	T1,APATH+.PTSWT	;[501] Set path switch
 REP 17/55
		TXNN	F,FL$HUF	;[342] IF NOT ALREADY HELD,
		PUSHJ	P,HOLDIT	;[342] HOLD THIS PPN
 WIT
		TXNN	F,FL$HUF	;[436][342] IF NOT ALREADY HELD,
		PUSHJ	P,HOLDIT	;[436][342] HOLD THIS PPN

 REP 31/57
		SETSTS	FILE,(T1)	;FAKE OUT FILSER
 WIT
	;**;[510] @ NEWFIL + 14L, Replace 1L, BAH, 5-Oct-82
		MOVEI	T2,FILE		;[510] CHANNEL
		DEVCHR	T2,		;[510] GET LEGAL DATA MODES FOR THIS DEVICE
		MOVEI	T3,1		;[510] ADJUST TO THE BIT POSITION OF THE GIVEN
		LSH	T3,(T1)		;[510]  DATA MODE TO COMPARE WITH BITS RETURNED
		TDNE	T2,T3		;[510]  BY THE DEVCHR.  IS THE DATA MODE KNOWN?
		JRST	NEWFL1		;[510] YES
		WARN$N	(IDM,Illegal data mode)	;[510] NO. REPORT IT
		PUSHJ	P,OCTOUT	;[510] DISPLAY ILLEGAL DATA MODE
		OUTSTR	[ASCIZ / for file /]	;[510]

		PUSHJ	P,TYSPEC	;[510] DISPLAY FILE SPEC
		OUTSTR	[ASCIZ/, assuming image mode.
	/]
		MOVEI	T1,.IOIMG	;[510] USE BINARY MODE INSTEAD
	NEWFL1:	SETSTS	FILE,(T1)	;FAKE OUT FILSER
 INS 13/61

 REP 19/61
		JRST 	CONT			;[232] NO,SKIP AROUND RENAME LOGIC
 WIT
		JRST 	CONT			;[232] NO,SKIP AROUND RENAME LOGIC
 REP 47/61
		MOVEM	T2,EXLFIL		;[232] SET IN BLOCK 
 WIT
		MOVEM	T2,EXLFIL		;[232] SET IN BLOCK
 REP 95/62
		HLRZ	T3,(P1)		;GET SUB-BLOCK TYPE 
 WIT
		HLRZ	T3,(P1)		;GET SUB-BLOCK TYPE
 REP 28/63
		MOVEM	T1,.RBEST(P2)	;SET AS ESTIMATE 
 WIT
		MOVEM	T1,.RBEST(P2)	;SET AS ESTIMATE
 REP 41/66
		MOVEM	T1,UPTBLK+1	;[425] STORE
		MOVEI	T1,UPTBLK	;WHERE TO FIND PATH
		MOVEM	T1,EXLUFD+.RBPPN;STORE
		MOVSI	T1,'SFD'	;LOAD EXTENSION 
 WIT
		MOVEM	T1,UPTBLK+.PTSWT;[501] STORE
		MOVEI	T1,UPTBLK	;WHERE TO FIND PATH
		MOVEM	T1,EXLUFD+.RBPPN;STORE
		MOVSI	T1,'SFD'	;LOAD EXTENSION
 REP 43/69
		ADD	7,1		;DON'T ENCRYPT NON-DATA 
 WIT
		ADD	7,1		;DON'T ENCRYPT NON-DATA
 INS 68/69

		CSMEDT	03,2	;Labelled file info, part 2, at DUMOUT:+3
	IFN CSM03$,<	;Inform PULSAR of the file parameters
		SKIPG	LBTYP			;ANSI labels?
		  JRST	DUMOU0			;No, don't try to set data
		MOVE	T1,MTFILE		;Yes, get current file number
		MOVEM	T1,TAPBLK+.TPSEQ	;Use it as file sequence number
		MOVE	T1,[S.SSNM##,,TAPBLK+.TPFNM] ;Use SSNAME
		BLT	T1,TAPBLK+.TPGEN-1	; as labelled file name
		MOVE	T1,[.TPLEN,,TAPBLK]	;Point to block
		TAPOP.	T1,			;Tell PULSAR
		  OUTSTR [ASCIZ	/
	%BKPCST	Cannot set tape label parameters
	/]					;Bug in PULSAR if this happens
	DUMOU0:	>  ;End of IFN CSM03$

 DEL 92/69

 REP 25/70


	;HERE TO SAVE THE RING HEADER'S POSITION AFTER THE FIRST ERROR

	NOTEOT:	SKIPN	P3		;SEE IF FIRST TIME THRU
 WIT
	;HERE TO SAVE THE RING HEADER'S POSITION AFTER THE FIRST ERROR

	NOTEOT:	DMOVEM	P1,SAVEP1	;[CSM] Save GETSTS data in P1
		SKIPN	P3		;SEE IF FIRST TIME THRU
 REP 61/70
		CAIGE	T1,EMAX		;SEE IF MAXIMUM REACHED
 WIT
		CAMGE	T1,S.EMAX##	;[506] See if maximum reached
 REP 150/70
	NOFINDSTS	F.MTAP,.IOBIN	;[220] CLEAR STATUS & REPORT STRANGE ERROR
		WARN$	(UOE,Untraceable output error)
 WIT
	NOFIND:			;Here when no error bits were found in any buffer
		OPER$	(XXX,Untraceable Output Error, respond PROCEED or ABORT)
		PUSHJ	P,TYI		;[CSM] Get answer
		 SKIPA			;[CSM] ABORT
		  JRST	NOFND1		;[CSM] Proceed
		OUTSTR	[ASCIZ /*ABORT*
	"BKPCI7 Stopcode CI7 caused by 'BKPUOE Untraceable Output Error' in BACKUP
	?BKPCI7 Aborting job
	/]				;[CSM] Double quote to notify OPR if BATCH job
		MOVE	T1,[.RCCI7,,0]	;[CSM] *HACK* Cause a crash-dump
		DMOVE	P1,@NOTEOT	;[CSM] Get previous status from SAVEP1
	S..CI7::RECON.	T1,		;[CSM] New way of causing a CI7 debug STOPCD
		  CALLI	0,7		;[CSM] Old way
		EXIT			;[CSM] Close the listing file

	SAVEP1:	BLOCK	2		;[CSM] Storage for GETSTS data in P1 and P2

	NOFND1:	OUTSTR	[ASCIZ /*PROCEED*
	/]				;[CSM]

		SETSTS	F.MTAP,.IOBIN	;[220] CLEAR STATUS & REPORT STRANGE ERROR
		WARN$	(UOE,Untraceable output error)


 REP 190/70
		POPJ	P,		;RETURN

 WIT

		CSMEDT	02,5	;Watch reel changes, part 5, at MTARST:+6
	IFGE CSM02$,< POPJ  P, >	;Don't check for REELID switch here
	IFL CSM02$,< PJRST  NVOLCK >	;Check for reel change after each OUT
	SUBTTL	[CSM] Check if MDA switched volumes, and put data into TMP:TAP


	IFN CSM02$,<	;Routine to check if new volume is mounted

	NVOLCK:	SKIPE	S.LIST##	;Do nothing if not listing
		SKIPG	LBTYP		;Is MDA involved?
		 POPJ	P,		;No, USER-EOT or BYPASS, we handle volume switch
		MOVE	T4,REELID	;Get old REELID
		PUSHJ	P,MTARID	;Get current REELID and file number
		CAMN	T4,REELID	;Same?
		 POPJ	P,		;Yes
		MOVEI	T2,F.MTAP	;Channel for tape
		DEVNAM	T2,		;MDA may have switched tape drives
		  MOVE	T2,UPHYN	;Should not fail
		MOVEM	T2,UPHYN	;Get the device name right
		AOS	S.NTPE##	;Count this new tape

		CSMEDT	04,3	;List 60 lines per page, part 3
	IFN CSM04$,<	;Make sure enough room on the page
		SKIPL	T1,LINUMB	;Get number of lines left on page
		CAIL	T1,6		;At least 6 lines left?
		 SKIPA			;OK
		  SETZM	LINUMB		;No, cause a formfeed to occur at next LF
	>  ;End of IFN CSM04$

		MOVEI	T1,[ASCIZ /
	Tape switched to volume /]
		PUSHJ	P,LSTMSG	;Put in listing
		MOVE	T1,REELID	;Get REELID
		PUSHJ	P,LST6		;List 6 BIT
		MOVEI	T1,[ASCIZ / on /]
		PUSHJ	P,LSTMSG	;Put in listing
		MOVE	T1,UPHYN	;Get device name
		PUSHJ	P,LST6		;List 6 bit
		MOVEI	T1,[ASCIZ /   ********************
	/]
		PUSHJ	P,LSTMSG
		MOVEI	T1,[ASCIZ /File /]
		PUSHJ	P,LSTMSG
		MOVE	T1,CNAM		;Current name
		PUSHJ	P,LST6
		MOVEI	CH,"."		;Period
		PUSHJ	P,LSTOUT
		MOVE	T1,CEXT		;Extension
		PUSHJ	P,LST6
	IFL CSM02$,<	;-1 to check after each block read or written
		MOVEI	T1,[ASCIZ / (block=/]
		PUSHJ	P,LSTMSG
		SKIPLE	T1,THSRDB	;Get relative block number
		 PUSHJ	P,LSTDEC	;List if positive
		MOVEI	T1,[ASCIZ /)  /]
	>  ;End of IFL CSM02$
	IFG CSM02$,<	;+1 to check only when starting a new file
		MOVEI	T1,[ASCIZ /   /];Three blanks before the path
	>  ;End of IFG CSM02$
		PUSHJ	P,LSTMSG
		PUSHJ	P,LSTFX1	;List the full path and CRLF
		PUSHJ	P,LSCRLF	;Blank line

		CSMEDT	05,2	;Put REELIDs in TMP:TAP, part 2
	IFN CSM05$,<	;Append an "EOV" line to TMPCOR, then a new "VOLUME"
		PUSH	P,LSTFLG	;Save old routine
		PUSH	P,LINUMB	;Save line counter
		MOVEI	T1,LSTTMP	;New address
		MOVEM	T1,LSTFLG	;Change list routine
		MOVEI	T1,[ASCIZ /EOV:   /]
		PUSHJ	P,LSTMSG	;Put in the line identifier
		MOVE	T1,LSTSTR	;Get device name
		PUSHJ	P,LST6
		MOVEI	CH,":"		;Punctuation
		PUSHJ	P,LSTOUT
		PUSHJ	P,LSTFXP	;List directory (no CRLF)
		MOVE	T1,CNAM		;Current name
		PUSHJ	P,LST6
		MOVEI	CH,"."		;Period
		PUSHJ	P,LSTOUT
		MOVE	T1,CEXT		;Extension
		PUSHJ	P,LST6
		PUSHJ	P,LSTFLX	;CRLF
		POP	P,LINUMB	;Restore line counter
		POP	P,LSTFLG	;Restore old typeout
		PUSHJ	P,TMPVOL	;Put this new REELID in TMPBUF
	>  ;End of IFN CSM05$

	IFN CSM04$,<	;Make sure enough room on the page
		SKIPL	T1,LINUMB	;Get number of lines left on page
		CAIL	T1,6		;At least 6 lines left?
		 SKIPA			;OK
		  SETZM	LINUMB		;No, cause a formfeed to occur at next LF
		SETOM	NEWPAG		;Force LSTFIL to output full path info
	>  ;End of IFN CSM04$
		POPJ	P,		;End of NVOLCK

	;TMPCOR buffered output routine

	IFN CSM05$,<	;Routine to put characters in TMPBUF
	LSTTMP:	SOSL	TMPCNT		;If room,
		 IDPB	CH,TMPPTR	;Put char in TMPCOR file buffer
		POPJ	P,

	;Routine to put new REELID in TMPBUF

	TMPVOL:	SKIPN	S.LIST##	;Listing?
		 POPJ	P,		;No, don't write TMPCOR
		PUSH	P,LSTFLG	;Save old routine
		PUSH	P,LINUMB	;Save line counter
		MOVEI	T1,LSTTMP	;New address
		MOVEM	T1,LSTFLG	;Change list routine
		MOVEI	T1,[ASCIZ /REELID:/]
		PUSHJ	P,LSTMSG	;Put in the line identifier
		MOVE	T1,REELID	;Get new REELID
		PUSHJ	P,LST6.6	;List all 6 chars
		MOVEI	T1,[ASCIZ / FILE:/]
		PUSHJ	P,LSTMSG	;Make self-identifying
		MOVE	T1,MTFILE	;File number
		PUSHJ	P,LSTBTH	;Put in leading zero
		PUSHJ	P,LSCRLF	;Finish line
		POP	P,LINUMB	;Restore line counter
		POP	P,LSTFLG	;Restore old typeout
		POPJ	P,		;Return from TMPVOL
	>  ;End of IFN CSM05$
	>  ;End of IFN CSM02$
	SUBTTL	TAPE INPUT/OUTPUT SUBROUTINES
 REP 29/71
		CAIGE	T1,EMAX		;SEE IF MAXIMUM REACHED
 WIT
		CAMGE	T1,S.EMAX##	;[506] See if maximum reached
 REP 49/71
	BUFSTS:	MOVE	T1,S.MBPT##	;[257] CURRENT BUFFER ADDRESS
 WIT
	BUFSTS:	CSMEDT	02,6	;Watch reel changes, part 6
	IFL CSM02$,< PUSHJ  P,NVOLCK >	;Check for new vol after each IN if neg

		MOVE	T1,S.MBPT##	;[257] CURRENT BUFFER ADDRESS
 REP 63/74
	 
 WIT

 INS 1/79
		SUBTTL	TAPE PSI INTERRUPT HANDLING
	;[DPM]	Add PSI interrupt to report volume switches in listing
	;+
	;.CHAPTER TAPE PSI INTERUPT HANDLING
	;-
	;+
	;<MTASER IS THE ROUTINE THAT TAKES REEL SWITCH INTERRUPTS.
	;-

	MTASER:	PUSH	P,T1		;[DPM] Save temps
		PUSH	P,T2
		PUSH	P,T3
		PUSH	P,T4

		CSMEDT	02,X	;Reel changes, part X
	IFE CSM02$,<
		PUSHJ	P,MTARID	;[DPM] Reed REELID
		MOVE	T1,TAPLBL##	;[DPM] Get label type
		CAIE	T1,.TFLBP	;[DPM] Bypass?
		CAIN	T1,.TFLNV	;[DPM] User-eot?
		 JRST	MTASE1		;[DPM] Yes to either -- do things the old way
		AOS	S.NTPE##	;[DPM] Increment tape number
		PUSHJ	P,LSTRSW	;[DPM] Do listing stuff
	>  ;End of IFE CSM02$
	IFN CSM02$,<
		PUSHJ	P,NVOLCK	;Check for new volume, update TMP:TAP, listing
	>  ;End of IFN CSM02$

	MTASE1:	POP	P,T4
		POP	P,T3		;[DPM] Restore temps
		POP	P,T2
		POP	P,T1
		DEBRK.			;[DPM] Return
		  JFCL			;[DPM] Can never happen
		  POPJ	P,		;[DPM] Hope we got here via PUSHJ

	;+
	;<MTARID IS THE ROUTINE THAT READS REELIDS
	;-
	IFE CSM02$!CSM03$,<	;Get only the REELID
	MTARID:	MOVE	T1,[2,,T2]	;[DPM] Set up UUO ac
		MOVEI	T2,.TFRID	;[DPM] Function code to read reelid
		MOVEI	T3,F.MTAP	;[DPM] Channel number
		TAPOP.	T1,		;[DPM] Read reelid
		  SKIPA			;[DPM] Can never happen
		MOVEM	T1,REELID	;[DPM] Save
		POPJ	P,		;[DPM] Return
	>  ;End of IFE CSM02$!CSM03$

	IFN CSM02$!CSM03$,<	;Get REELID, file number, record number
	MTARID:	MOVE	T1,['(NULL)']	;Incase of "/TAPE NUL:"
		MOVEM	T1,REELID
		MOVEI	T1,^D99		; ...
		MOVEM	T1,MTFILE
		SKIPE	S.NLDV##	;If using NUL: instead of MTA:,
		 POPJ	P,		; return REELID=(NULL)
		MOVEI	T1,F.MTAP	;Channel number
		MOVEM	T1,MTCBLK+.MTCHN;Store in MTCHR. block
		MOVE	T1,[4,,MTCBLK]	;Point to args
		MTCHR.	T1,		;Get REELID, file number, record number
		  SETOM	REELID		;Should not fail, use SIXBIT/______/ if it does
		MOVE	T1,MTFILE	;Get file number
		SKIPLE	LBTYP		;If ANSI labels,
		 IDIVI	T1,3		; 3 tape marks per user file
		ADDI	T1,1		;Return file=1 at BOT
		MOVEM	T1,MTFILE	;Save
		POPJ	P,              ;Return
	>  ;End of IFN CSM02$!CSM03$
 REP 35/79
		PUSHJ	P,OCTOUT	;TYPE STATUS 
 WIT
		PUSHJ	P,OCTOUT	;TYPE STATUS
 REP 9/80
		DEVNAM	T1,		;[263] GET PHYSICAL NAME OF STRUCTURE
		 MOVE	T1,[SIXBIT/ALL/]	;[263] NONE--PRETEND IT WAS "ALL"
		SETOM	CSTRFL		;[262] SET FLAG FOR "ALL"
 WIT
		CAMN	T1,[SIXBIT/ALL/];[503] SPECIAL CHECK FOR "ALL"
		JRST	SETST2		;[503] NO TRANSLATION NEEDED
		MOVEM	T1,DCHARG	;[503] STORE IT
		MOVE	T1,[5,,DCHARG]	;[503] SETUP FOR DSKCHR UUO
		DSKCHR	T1,		;[503] GET DISK CHARACTERISTICS
		 SKIPA	T1,[SIXBIT/ALL/];[503] NONE--PRETEND IT WAS "ALL"
		MOVE	T1,DCHARG+.DCSNM;[503] GET PHYSICAL STRUCTURE NAME
	SETST2:	SETOM	CSTRFL		;[503][262] SET FLAG FOR "ALL"
 REP 18/82
	LSTOUT:	SOSG	S.LBPT##+.BFCTR	;SEE IF ANY ROOM LEFT
		OUTPUT	F.LIST,		;NONE. ADVANCE BUFFERS
		IDPB	CH,S.LBPT##+.BFPTR;STORE CHARACTER
		POPJ	P,		;RETURN

 WIT
	LSTOUT:	CSMEDT	05,3	;Put REELIDs in TMP:TAP, part 3
	IFN CSM05$,<	;Output to list file if not told to do otherwise
		SKIPE	LSTFLG		;Is there an output routine specified?
		 PJRST	@LSTFLG		;Yes, go to it
	>  ;End of IFN CSM05$
		SOSG	S.LBPT##+.BFCTR	;SEE IF ANY ROOM LEFT
		OUTPUT	F.LIST,		;NONE. ADVANCE BUFFERS
		IDPB	CH,S.LBPT##+.BFPTR;STORE CHARACTER

		CSMEDT	04,4	;List 60 lines per page, part 4
	IFN CSM04$,<	;Output header when LINUMB is zero or +1
			;Do not output header on TTY: when LINUMB is -1
		CAIE	CH,.CHLFD	;Linefeed?
		 POPJ	P,		;Just continue
		SOSLE	CH,LINUMB	;Yes, decrement line number
		 JRST	CSM04Y		;Not time for a formfeed, restore CH
		AOJL	CH,[SETOM  LINUMB	;Reset to -1 for no headers
			    OUTPUT F.LIST,	;Dump buffers after each LF when
			    JRST   CSM04Y ]	; output is to TTY
		MOVEI	CH,^D60		;Reset counter
		MOVEM	CH,LINUMB	; for 60 lines per page
		SETOM	NEWPAG		;Force LSTFIL to output full path info
	IFE CSM04$&<2!4>,<	;If only putting in FF every 60 lines
		MOVEI	CH,.CHFFD	;Replace 60th LF with FF
		DPB	CH,S.LBPT##+.BFPTR
	CSM04Y:	MOVEI	CH,.CHLFD	;Restore CH
		POPJ	P,		;Return
	>  ;End of IFE 2!4
	IFN CSM04$&<2!4>,<	;If putting on headers
		SAVE$	<T1,T2,T3,T4>	;Save temp regs
	IFN CSM04$&4,< PUSHJ  P,VOLFIL > ;Output REELID and date at bottom
		MOVEI	CH,.CHFFD	;Replace 60th LF with FF
		DPB	CH,S.LBPT##+.BFPTR
		PUSHJ	P,LSTHDR	;Do the header (LINUMB gets set to 58)
		RSTR$	<T4,T3,T2,T1>	;Restore temps
	CSM04Y:	MOVEI	CH,.CHLFD	;Restore CH
		POPJ	P,		;Return

	;Routine to output SSNAME and page number at top of page,
	;with REELID, tape number, file number, and date on 2nd line.

	LSTHDR:	MOVEI	T1,[ASCIZ /Save-set-name "/]
		PUSHJ	P,LSTMSG
		MOVEI	T1,S.SSNM##	;Output saveset name
		PUSHJ	P,LSTMSG
		MOVEI	T1,[ASCIZ /"		Page /]
		PUSHJ	P,LSTMSG
		AOS	T1,PAGNUM	;Get current page number
		PUSHJ	P,LSTDEC
		PUSHJ	P,LSCRLF	;Finish line
	IFN CSM04$&2,< PUSHJ  P,VOLFIL >;Put REELID on 2nd line of page
		POPJ	P,

	;--- BACK01 --- Tape 1, File 2 --- 10-Jun-81 Wednesday ---
	VOLFIL:	MOVE	T4,REELID	;Save in case it changes
		PUSHJ	P,MTARID	;Get REELID and file number
		MOVEI	T1,[ASCIZ /--- /]
		PUSHJ	P,LSTMSG	;Output separator
		MOVE	T1,REELID	;Current volume-ID
		MOVEM	T4,REELID	;Restore old one for NVOLCK to find
		PUSHJ	P,LST6
		MOVEI	T1,[ASCIZ / --- Tape /]
		PUSHJ	P,LSTMSG
		MOVE	T1,S.NTPE##	;Tape number
		PUSHJ	P,LSTDEC
		MOVEI	T1,[ASCIZ /, File /]
		PUSHJ	P,LSTMSG
		MOVE	T1,MTFILE	;Get file nubmer
		PUSHJ	P,LSTDEC
		MOVEI	T1,[ASCIZ / --- /]
		PUSHJ	P,LSTMSG
		MOVX	T1,%CNDTM	;Get the universal date/time
		GETTAB	T1,
		  JFCL			;Can never fail
		PUSHJ	P,LSTWEK	;List date and day of week
		MOVEI	T1,[ASCIZ / ---
	/]				;Entire message fits within 64 columns
		PJRST	LSTMSG		;Finish line and return
	>  ;End of IFN 2!4
	>  ;End of IFN CSM04$


		CSMEDT	01,1	;Narrow listing, part 1
	IFN CSM01$,<
	;Output 3 SIXBIT chars, even if all blanks

	LST6.6:	SKIPA	T3,[6]		;Do 6 chars
	LST6.3:	MOVEI	T3,3		;Do 3 chars
		MOVE	T2,T1		;Copy arg
	LST6.0:	MOVEI	T1,0		;Clear junk
		LSHC	T1,6		;Get a char
		MOVEI	CH," "-' '(T1)	;Convert to ASCII in CH
		PUSHJ	P,LSTOUT	;Send to file
		SOJG	T3,LST6.0	;Loop for all
		POPJ	P,		;Return

	;Output decimal number with leading spaces

	LST6DG:	CAIGE	T1,^D100000	;6 digit number?
		 PUSHJ	P,LSTSPC	;No, list a space
	LST5DG:	CAIGE	T1,^D10000	;5 digits
		 PUSHJ	P,LSTSPC
	LST4DG:	CAIGE	T1,^D1000	;4 digits
		 PUSHJ	P,LSTSPC
	LST3DG:	CAIGE	T1,^D100	;3 digits
		 PUSHJ	P,LSTSPC
	LST2DG:	CAIGE	T1,^D10		;2 digits
		 PUSHJ	P,LSTSPC
		JRST	LSTDEC		;List decimal number

	;Routine to output date in T1 as "dd-Mmm-yy Weekday "

	LSTWEK:	PUSH	P,T1		;Save UDT
		PUSHJ	P,CONTDT	;Convert to DEC format
		MOVE	T1,T2		;Get 15 bit date
		PUSHJ	P,LSTDAT	;Output date in 10-Jun-81 format
		PUSHJ	P,LSTSPC	;Output a space
		POP	P,T1		;Get back UDT
		HLRZS	T1		;Keep only the date portion
		IDIVI	T1,7		;Get day of week
		MOVE	T1,WEEKDA(T2)	;Point to string
		PJRST	LSTMSG		;Output it and return

	WEEKDA:	[ASCIZ	/Wednesday/]
		[ASCIZ	/Thursday/]
		[ASCIZ	/Friday/]
		[ASCIZ	/Saturday/]
		[ASCIZ	/Sunday/]
		[ASCIZ	/Monday/]
		[ASCIZ	/Tuesday/]

	;Output a space to listing file

	LSTSPC:	MOVEI	CH," "		;Get a space
		JRST	LSTOUT

	;Output CRLF to listing file

	LSCRLF:	MOVEI	T1,CRLF		;Point to string and fall into LSTMSG
	>  ;End of IFN CSM01$
 REP 21/83
	;<LSTBTH LISTS TWO DIGITS OF THE DECIMAL NUMBER IN ^T1, WITH A 
 WIT
	;<LSTBTH LISTS TWO DIGITS OF THE DECIMAL NUMBER IN ^T1, WITH A
 REP 2/85
	;<LSTXXX IS A SUBROUTINE TO LIST THE START/END OF SAVE SET INFORMATION.
	;-

	LSTXXX:	SKIPN	S.LIST##	;SKIP IF LISTING ORDERED
		POPJ	P,		;RETURN

		PUSHJ	P,SAVE1		;SAVE C(P1)
		SETZM	LSTSTR		;CLEAR LAST LIST STR

		MOVE	T2,G$TYPE(MH)	;GET RECORD TYPE		[211]
		CAIE	T2,T$CON	;IF CONTINUATION,		[211]
		JRST	LSTXX1		;NOT CONTINUATION		[211]
		MOVEI	CH,14		;GET A FORM-FEED		[211]
		MOVEI	T1,F.LIST	;LISTING CHANNEL		[211]
		DEVCHR	T1,		;GET CHARACTERISTICS		[211]
		TXNN	T1,DV.TTY	;IS DEV A TTY?			[211]
		PUSHJ	P,LSTOUT	;NO - START A NEW PAGE		[211]

	LSTXX1:	MOVEI	T1,[ASCIZ /Start/] ;ASSUME START OF SAVE	[211]
		CAIN	T2,T$CON	;IF CONTINUATION,
 WIT
	;<LSTRSW IS A SUBROUTINE TO LIST DATA AFTER REEL SWITCHES ON LABELLED TAPES
	;-
	;[DPM]	Add PSI interrupt to report volume switches in listing

	LSTRSW:	SKIPN	S.LIST##	;[DPM] Want listing?
		 POPJ	P,		;[DPM] No
		MOVEI	CH,14		;[DPM] Get a form-feed
		MOVEI	T1,F.LIST	;[DPM] Listing channel
		DEVCHR	T1,		;[DPM] Get characteristics
		TXNN	T1,DV.TTY	;[DPM] Is dev a TTY?
		 PUSHJ	P,LSTOUT	;[DPM] No, start a new page
 INS 26/85
	Continuation on /]
		PUSHJ	P,LSTMSG	;[DPM] Send to file
		MOVEI	T1,F.MTAP	;[DPM] Get channel
		DEVNAM	T1,		;[DPM]  and name
		  MOVSI	T1,'???'	;[DPM]
		PUSHJ	P,LST6		;[DPM]
		MOVEI	T1,[ASCIZ /, reelid /] ;[CSM] Use word instead of space
		PUSHJ	P,LSTMSG	;[CSM]
		MOVE	T1,REELID	;[DPM]
		PUSHJ	P,LST6		;[DPM]
		MOVEI	T1,[ASCIZ /, tape number /]
		PUSHJ	P,LSTMSG	;[DPM]
		MOVE	T1,S.NTPE##	;[DPM]
		PUSHJ	P,LSTDEC	;[DPM]
		MOVEI	T1,[ASCIZ /

	**********************************************************************

	/]				;[DPM]
		PJRST	LSTMSG		;[DPM] List and return


	;+
	;<LSTXXX IS A SUBROUTINE TO LIST THE START/END OF SAVE SET INFORMATION.
	;-

	LSTXXX:	SKIPN	S.LIST##	;SKIP IF LISTING ORDERED
		POPJ	P,		;RETURN

		PUSHJ	P,SAVE1		;SAVE C(P1)
		SETZM	LSTSTR		;CLEAR LAST LIST STR

		MOVE	T2,G$TYPE(MH)	;GET RECORD TYPE		[211]
		CAIE	T2,T$CON	;IF CONTINUATION,		[211]
		JRST	LSTXX1		;NOT CONTINUATION		[211]
		MOVEI	CH,14		;GET A FORM-FEED		[211]
		MOVEI	T1,F.LIST	;LISTING CHANNEL		[211]
		DEVCHR	T1,		;GET CHARACTERISTICS		[211]
		TXNN	T1,DV.TTY	;IS DEV A TTY?			[211]
		PUSHJ	P,LSTOUT	;NO - START A NEW PAGE		[211]

	LSTXX1:	MOVEI	T1,[ASCIZ /Start/] ;ASSUME START OF SAVE	[211]
		CAIN	T2,T$CON	;IF CONTINUATION,
		MOVEI	T1,[ASCIZ /

	**********************************************************************

 REP 48/85
		MOVEI	CH," "		;SPACE
		PUSHJ	P,LSTOUT	;SEND
 WIT
		MOVEI	T1,[ASCIZ / reelid /] ;[CSM] Use this after tape device
		PUSHJ	P,LSTMSG	     ;[CSM]  instead of space
 INS 5/86

		CSMEDT	01,2	;Narrow listing, part 2, before LSTSYS:
	IFN CSM01$,<
		SKIPE	S.NARL##	;Narrow listing?
		 MOVEI	T1,CRLF		;Yes, must keep within 64 columns
	>  ;End of IFN CSM01$
 REP 26/87
		MOVEI	T1,[ASCIZ / tape format /] ; ..
 WIT
		MOVEI	T1,[ASCIZ / tape format /]
	IFN CSM01$,<
		SKIPE	S.NARL##	;If narrow listing,
		MOVEI	T1,[ASCIZ / format /] ;fit within 64 cols
	>  ;End of IFN CSM01$
 REP 11/88
		MOVEI	CH,"A"-1(T1)	;GET UPDATE LETTER
		PUSHJ	P,LSTOUT	;SEND TO FILE
 WIT
		SOS	T1		;[505] PRINT IN MODIFIED
		IDIVI	T1,^D26		;[505] RADIX 26 ALPHA
		JUMPE	T1,LSTVE1	;[505] JUMP IF ONE CHARACTER
		MOVEI	CH,"A"-1(T1)	;GET UPDATE LETTER
		PUSHJ	P,LSTOUT	;SEND TO FILE
	LSTVE1:	MOVEI	CH,"A"(T2)	;[505] ISSUE "UNITS"
		PUSHJ	P,LSTOUT	;[505] CHARACTER
 DEL 15/89

 INS 22/89
		CSMEDT	04,5	;List 60 lines per page, part 5
	IFN CSM04$,<	;Output full str path at top of each page
		AOSG	NEWPAG		;Was flag set to -1?
		 JRST	DIFF		;Yes
	>  ;End of IFN CSM04$

 INS 47/89

	        CSMEDT	01,3	;Narrow listing, part 3, at DIFF:+12
	IFN CSM01$,<    ;Listing is not wide enough for path on same line
		SKIPN	S.NARL##	;If not narrow listing,
		 JRST	LSTFID		; put path after file name
		MOVNI	T1,5		;Check all 5 SFDs
		SKIPE	LSTPTH+6(T1)	;Find end of path
		 AOJL	T1,.-1		;Not blank, try next
		CAMN	T1,[-5]		;UFD only?
		 MOVNI	T1,4		;Yes, do 4 tabs instead of 5
		PUSHJ	P,LSTTAB	;Output at least 1 tab
		 AOJL	T1,.-1		;Max line length here is 64 characters
		PUSHJ	P,LSTFX1	;Output the path on a separate line
	>  ;End of IFN CSM01$
 REP 14/90
		PUSHJ	P,LST6		;SEND TO FILE
		PUSHJ	P,LSTTAB	;TAB OVER

		MOVE	T1,A$LENG(P1)	;GET SIZE IN BYTES
		MOVE	T2,A$MODE(P1)	;GET FILE MODE
		CAIG	T2,.IOASL	;SEE IF ASCII
		IDIVI	T1,5		;GET SIZE IN WORDS
		ADDI	T1,177		;FORCE OVERFLOW
		ASH	T1,-7		;COMPUTE SIZE IN BLOCKS
		PUSHJ	P,LSTDEC	;SEND TO FILE
		PUSHJ	P,LSTTAB	;TAB OVER

 WIT

		CSMEDT	01,4	;Narrow listing, part 4, at LSTFID:+11
	IFE CSM01$,<
		PUSHJ	P,LST6		;SEND TO FILE
		PUSHJ	P,LSTTAB	;TAB OVER
	>  ;End of IFE CSM01$
	IFN CSM01$,< PUSHJ  P,LST6.3 >	;Send 3 blanks if necessary

	;**;[513] @LSTFID+14L, Replace 4L, BAH, 4-Mar-83
		MOVEI	T2,^D36		;[513] WIDTH OF WORD IN BITS
		IDIV	T2,A$BSIZ(P1)	;[513] GET BYTES PER WORD
		SKIPGE	T1,A$LENG(P1)	;[513] LENGTH OF FILE IN BYTES
		MOVEI	T2,1		;[513] IF OVERFLOW, KILL DIVISOR
		IDIV	T1,T2		;[513] FILE LENGTH IN WORDS
		SKIPE	T2		;[513] EXTRA BYTES?
		AOS	T1		;[513] YES. ONE MORE WORD
		ADDI	T1,177		;FORCE OVERFLOW
		ASH	T1,-7		;COMPUTE SIZE IN BLOCKS
	IFE CSM01$,<	;Numbers are not justified in standard BACKUP
		PUSHJ	P,LSTDEC	;SEND TO FILE
		PUSHJ	P,LSTTAB	;TAB OVER
	>  ;End of IFE CSM01$
	IFN CSM01$,<	;Make narrower columns line up
		PUSHJ	P,LST6DG	;List 6 digits with leading spaces
		PUSHJ	P,LSTSPC	;And 1 space between size and prot
	>  ;End of IFN CSM01$
 REP 48/90
		JUMPE	P2,LSTFLX	;BRANCH IF NO STR-PATH CHANGE
 WIT
		PUSHJ	P,LSTTAB	;[512] Adjust listing
		PUSH	P,P1		;[512] Save P1
		SKIPE	P1,A$VERS(P1)	;[512] Is there a version number?
		 PUSHJ	P,LSTVER	;[512] Yes, go list it
		POP	P,P1		;[512] Restore P1
		JUMPE	P2,LSTFLX	;BRANCH IF NO STR-PATH CHANGE
	IFN CSM01$,< SKIPN  S.NARL## >	;Path already output for narrow listing
 REP 55/90
		MOVE	T1,LSTSTR	;GET STR NAME
 WIT
	LSTFX1:	MOVE	T1,LSTSTR	;GET STR NAME
 REP 59/90
		PUSHJ	P,LSTTAB	;TAB OVER
 WIT
	IFE CSM01$,< PUSHJ  P,LSTTAB >	;TAB OVER
	IFN CSM01$,< PUSHJ  P,LSTSPC >	;One space
	LSTFX2:
	IFN CSM05$,<
		PUSHJ	P,LSTFXP	;List path with no CRLF
		PJRST	LSTFLX		;Finish line
	LSTFXP:	>  ;End of IFN CSM05$

 REP 77/90
		PUSHJ	P,LSTOUT	;SEND TO FILE

 WIT
	IFE CSM05$,<PUSHJ  P,LSTOUT>	;SEND TO FILE
	IFN CSM05$,<PJRST  LSTOUT>	;No CRLF
 REP 12/92
					;T1=DAYS SINCE JAN 1, 1501	 
		IDIVI	T1,400*365+400/4-400/100+400/400
					;SPLIT INTO QUADRACENTURY	 
		LSH	T2,2		;CONVERT TO NUMBER OF QUARTER DAYS   
		IDIVI	T2,<100*365+100/4-100/100>*4+400/400
					;SPLIT INTO CENTURY		 
		IORI	T3,3		;DISCARD FRACTIONS OF DAY	 
		IDIVI	T3,4*365+1	;SEPARATE INTO YEARS		 
		LSH	T4,-2		;T4=NO DAYS THIS YEAR		 
		LSH	T1,2		;T1=4*NO QUADRACENTURIES	 
		ADD	T1,T2		;T1=NO CENTURIES		 
		IMULI	T1,100		;T1=100*NO CENTURIES		 
		ADDI	T1,1501(T3)	;T1 HAS YEAR, T4 HAS DAY IN YEAR	 

		MOVE	T2,T1		;COPY YEAR TO SEE IF LEAP YEAR
		TRNE	T2,3		;IS THE YEAR A MULT OF 4?	 
		JRST	CNTDT0		;NO--JUST INDICATE NOT A LEAP YEAR   
		IDIVI	T2,100		;SEE IF YEAR IS MULT OF 100	 
		SKIPN	T3		;IF NOT, THEN LEAP		 
		TRNN	T2,3		;IS YEAR MULT OF 400?		 
		TDZA	T3,T3		;YES--LEAP YEAR AFTER ALL	 
	CNTDT0:	MOVEI	T3,1		;SET LEAP YEAR FLAG		 
 WIT
					;T1=DAYS SINCE JAN 1, 1501	
		IDIVI	T1,400*365+400/4-400/100+400/400
					;SPLIT INTO QUADRACENTURY	
		LSH	T2,2		;CONVERT TO NUMBER OF QUARTER DAYS
		IDIVI	T2,<100*365+100/4-100/100>*4+400/400
					;SPLIT INTO CENTURY		
		IORI	T3,3		;DISCARD FRACTIONS OF DAY	
		IDIVI	T3,4*365+1	;SEPARATE INTO YEARS		
		LSH	T4,-2		;T4=NO DAYS THIS YEAR		
		LSH	T1,2		;T1=4*NO QUADRACENTURIES	
		ADD	T1,T2		;T1=NO CENTURIES		
		IMULI	T1,100		;T1=100*NO CENTURIES		
		ADDI	T1,1501(T3)	;T1 HAS YEAR, T4 HAS DAY IN YEAR	

		MOVE	T2,T1		;COPY YEAR TO SEE IF LEAP YEAR
		TRNE	T2,3		;IS THE YEAR A MULT OF 4?	
		JRST	CNTDT0		;NO--JUST INDICATE NOT A LEAP YEAR
		IDIVI	T2,100		;SEE IF YEAR IS MULT OF 100	
		SKIPN	T3		;IF NOT, THEN LEAP		
		TRNN	T2,3		;IS YEAR MULT OF 400?		
		TDZA	T3,T3		;YES--LEAP YEAR AFTER ALL	
	CNTDT0:	MOVEI	T3,1		;SET LEAP YEAR FLAG		
 INS 26/102
		  OUTSTR [ASCIZ /"Error in BACKUP, please check the tape drives
	/]				;[CSM]
		  MOVEI	T1,^D60		;[CSM] Sleep for 1 minute
		  SLEEP	T1,		;[CSM]
		  OUTSTR [ASCIZ /"Make a note as to whether the drive is off-line
	/]				;[CSM]
		  SLEEP	T1,		;[CSM]
 REP 49/104
		END		;&.SKIP2;[^END OF <BACKRS.PLM]
 WIT
	LITS:	END		;&.SKIP2;[^END OF <BACKRS.PLM]
 SUM 167798
    `F