HELP	Welcome to the TECO ON-LINE HELP SYSTEM.
	For more detailed documentation, see the TECO manual and
	TEC124.DOC.
	To get help on a command, type it followed by an altmode.
	To get back to TECO, type a carriage return.
	You may enter control characters in the form <uparrow><char>.
	To have the entire help text typed, type ALL$.
ALL


			INITIALIZATION AND FILE SELECTION

Filespec:
dev:filnam.ext<prot>[proj,prog,sfd1,sfd2,...]/switch1/switch2...

ERfilespec$	Select file for input.
nEM		Position magnetic tape.
EWfilespec$	Select file for output.
EAfilespec$	Select file for output--append rather than supersede.
EK		Cancel existing EW or EA.
EZfilespec$	Zero directory and select file for output.
EBfilespec$	Select file for input and output, with
		backup protection.
MAKEfilespec<CR>
		Equivalent to EWfilnam.ext$
TECOfilespec<CR>
		Equivalent to EBfilnam.ext$EY
/R		Used with TECO command to cause ER instead of EB.
/INPLACE	Used with EB to cause file to be overwritten with
		no .BAK file.
/GENLSN		Used with EW or EB to cause line sequence
		numbers to be generated.
/SUPLSN		Used with ER, EB, or EW to suppress line
		sequence numbers.
/NOLSN		Used with ER, EB to assume no sequence numbers.
EPfilespec$	Read a file and put it into Q-register *.
EIfilespec$	Read a file, put it into Q-reg *, and execute it as a
		TECO macro.
ENfilespec$	Rename the current input file to filespec.
EN$		Delete the current input file.
ELfilespec$	Open a log file.
nEL$		Further control of log file: 0=nothing in log, 1=/NOIN,
		2=/NOOUT, 3=everything in log, -1=close the log file.
/NOIN		Used with EL to keep terminal input out of the log file.
/NOOUT		Used with EL to keep terminal output out of the log file.
/APPEND		Used with EL to append to rather than supersede the log
		file.
EEfilespec$	Save the current state of TECO in filespec.
EDfilespec$	Run filespec upon exit.  (SYS: is the default device.)

EVterminal$	Specifies terminal type. (ADM2, ADM3, BEE, CDC, CRT,
		DGC, H1200, H2000, VT05, VT52, and TTY.)
m,nEV$		Set specific terminal characteristics.

			INPUT

EY		Clear buffer and input one page.
A		Input one page and append to current buffer
		contents.
n^Y		Input until page n is in the buffer.
			BUFFER POSITIONS

B		Before first character; 0.
.		Current pointer position; number of characters
		to the left of the pointer.
Z		End of the buffer; number of characters in the
		buffer.
m,n		m+1st through nth characters in the buffer.
H		Entire buffer; B,Z.

			ARGUMENT OPERATORS

m+n		Add.
m n		Add.
m-n		Subtract.
m*n		Multiply.
m/n		Divide and truncate.
m&n		Logical AND.
m#n		Logical OR.
()		Perfrom enclosed operations first.
^O		Accept number in octal radix.

			POINTER POSITIONING

nJ		Move pointer to position between nth and
		n+1st characters.
nC		Advance pointer n positions.
nR		Move pointer back n positions. Equivalent
		to -nC.
nL		Move pointer to beginning of nth line from
		current pointer position.

			TYPE-OUT

nT		Type all text in the buffer from the current
		pointer position to the beginning of the nth
		line from the pointer position.
m,nT		Type the m+1st through the nth characters.
n=		Type the decimal integer n.
n==		Type the octal integer n.
Qi=		Type the contents of Q-register i. (Numeric or text.)
m,n=		If m<0, same as n=; if m=0, dont output a CRLF after the
		number; if m>0, output the ascii character whose value
		is m after the number.
1ET		Change typeout mode so that no substitutions
		are made for nonprinting characters.
0ET		Restore typeout mode to normal.
0EU		Flag lower case characters on typeout
		(standard).
1EU		Flag upper case characters on typeout.
-1EU		No case flagging on typeout.
-1ES		Set automatic typeout after searches.
nES(n>0)	Set automatic typeout after searches and
		include a character to indicate the position
		of the pointer.
0ES		Set to no automatic typeout after searches.
^Amessage^A	Type the message enclosed.
^L or form feed	Type a form feed.

			DELETION

nD		Delete the n characters following the pointer
		position.
-nD		Delete the n characters preceding the pointer
		position.
nK		Delete all characters in the buffer from 
		current pointer position to the beginning
		of the nth line from the pointer position.
m,nK		Delete the m+1st through the nth characters.

			INSERTION

Itext$		Insert the text delimited by I and altmode.
nI$		Insert the character with ASCII value n
		(decimal).
@I/text/	Insert the text delimited by the arbitrary
		character following I.
n\		Insert the ASCII representation of the
		decimal integer n.
^V		In an insert string, translate to lower case.
^W		In an insert string, translate to upper case.
^^		When used inside text arguments, this means
		translate special characters @, [, \, ], ^,
		- to "lower case" range.
^R		Accept next character as text.
^Gi		Used inside text arguments to cause the contents
		of Q-register i to be inserted into the text argument
		itself.
^T		Used inside text arguments to cause all control
		characters except ^R, ^T, and altmode to be
		taken as text.  Nullified by a second ^T.

			OUTPUT AND EXIT

PW		Output the current page and append a form
		feed character to it.
nP		Output the current page, clear the buffer,
		and read in the next page.  Continue this
		process until the nth page from the current
		page has been input.
m,nP		Output the m+1st through the nth characters.
		Do not append a form feed character, and
		not change the buffer.
n^P		Same as nP, but end up at the nth absolute page of the
		file, rather than the nth page past the current page.
EF		Close the output file.
^Z		Close the output file and exit to the
		monitor.
^C		Exit to the monitor.
EX		Output the remainder of the file, close the
		output file, and then exit to the monitor.
EG		Output the remainder of the file, close and
		then re-execute the last compile-class com-
		mand that was typed.

			SEARCH

nStext$		Search for the nth occurrence (following the
		pointer) of the text delimited by S and
		altmode, but do not go beyond the end of
		the current page.  If n<0, search backwards.
m,nStext$	Same as S, but search only between pointer positions
		m and n. If m>n, search backwards.
nFStext$text$	Search for the nth occurrence (following the
		pointer) of the first text string and replace
		it with the second text string. Do not go
		beyond the end of the current page.
nNtext$		Equivalent to nStext$ except that if the
		text is not found on the current page, pages
		are input and output until it is found.
nFNtext$text$	Equivalent to nFStext$text$ except that if
		the text is not found on the current page,
		pages are input and output until it is 
		found.
FDtext$		Search for text, and delete everything from the old
		pointer position to the end of text.
n_text$		Equivalent to nNtext$ except that it does
		input only, no output.
:nStext$	Equivalent to nStext$ except that it returns
		a value of -1 if the search succeeds or 0 if
		it fails instead of an error message. The :
		command can also be used with FS, N, FN, 
		and _.
@nS/text/	Equivalent to nStext$ except that the text
		is delimited by the arbitrary character 
		following the S. The @ command may also
		be used with FS, N, FN and _.
0^X		Reset search mode to accept either case.
n^X(n#0)	Set search mode to "exact" mode.
^V		In a search string, translate to lower case.
^W		In a search string, translate to upper case.
^^		When used inside text arguments, this means
		translate special characters @, [, \, ], ^,
		_ to "lower case" range.
^R		Accept next character as text.
^T		Used inside text arguments to cause all control
		characters except ^R, ^T, and altmode to be
		taken as text. Nullified by a second ^T.
^\		Used inside search arguments to indicate
		accept either case for following characters.
		Nullified by a second ^\.
^X		When used inside a text argument, accept any
		character at this position in the search string.
^S		Accept any separator character at this position.
^Na		Accept any character except the arbitrary
		character a following ^N.
^Q		Take the next character in the search string
		literally, even if it is a control character.
^Gi		Substitute the contents of Q-reg I into the text 
		string at this point.
^EA		Accept any alphabetic character as a match.
^EV		Accept any lower case alphabetic character
		as a match.
^EW		Accept any upper case alphabetic character
		as a match.
^ED		Accept any digit as a match.
^EL		Accept any end-of-line character as a match.
^ES		Accept any string of spaces and/or tabs
		as a match.
^E<nnn>		Accept the ASCII character whose octal
		value is nnn as a match.
^E[a,b,c...]	Accept any one of the characters in the
		brackets as a match.

			ITERATION AND FLOW CONTROL

n<>		Perform the enclosed command string n times.
n;		If n=0, jump out of the current iteration field.
;		Jump out of the current iteration field, if the
		last search executed failed.
!tag!		Define a position in the command string with
		the name "tag".
Otag$		Jump to the position defined by !tag!
n"Ecommands'	If n=0, execute the commands specified
		between "E and '; otherwise, skip to the '.
n"Ncommands'	If n#0, execute the enclosed commands.
n"Lcommands'	If n<0, execute the enclosed commands.
n"Gcommands'	If n>0, execute the enclosed commands.
n"Ccommands'	If n is the ASCII value (decimal) of a symbol
		constituent character, execute the enclosed
		commands.
n"Dcommands'	If n is a digit execute the enclosed commands.
n"Acommands'	If n is alphabetic, execute the enclosed
		commands.
n"Vcommands'	If n is lower case alphabetic, execute the
		enclosed commands.
n"Wcommands'	If n is upper case alphabetic, execute the
		enclosed commands.
n"Tcommands'	If n is true, execute the enclosed commands.
n"Fcommands'	If n is false, execute the enclosed commands.
n"Scommands'	If n is "successful", execute the enclosed
		commands.
n"Ucommands'	If n is "unsuccessful", execute the enclosed
		commands.

			Q-REGISTER

nUi		Store the integer n in Q-register i.
Qi		Equal to the value stored in Q-register i.
%i		Increment the value in Q-register i by 1
		and return this value.
nXi		Store, in Q-register i, all characters from
		the current pointer position to the beginning
		of the nth line from the pointer.
m,nXi		Store the m+1st through nth characters in
		Q-register i.
Gi		Place the text in Q-register i at the current
		pointer position.
Mi		Execute the text in Q-register i as a command
		string.
Wi		Execute the text in Q-register i as a command
		string by a "jump" rather than a "call".
[i		Push the current contents of Q-register i onto 
		the Q-register pushdown list.
]i		Pop the last stored entry from the Q-register
		pushdown list into Q-register i.
*i		(As first command in a string.) Save the
		preceding command string in Q-register i.

			SPECIAL NUMERIC VALUES

1A		The ASCII value (decimal) of the character
		following the pointer.
^E		The form feed flag. Equals 0 if no form feed
		character was read on the last input, -1
		otherwise.
^N		The end-of-file flag; equals -1 if end of input
		file seen on last input. Otherwise equals 0.
^F		Decimal value of the console data switches.
n^F		TTY number (+ 200000 octal) of job n.
^H		The time of day in 60th's of a second.
ET		The value of the type-out mode switch.
		Equals 0 for normal type-out. -1 otherwise.
^X		Value of the search mode flag. (0=either case
		mode, -1=exact mode.)
EU		The value of the EU flag.
		+1 = flag upper case characters.
		 0 = flag lower case characters.
		-1 = no case flagging on typeout.
EO		The value of the EO flag. 1 = version 21A,
		2 = versions 22, 23, 123 and 124.
EH		The value of the EH flag. 1 = code only,
		2 = code plus one line, 3 = all of error message.
^^x		Equivalent to the ASCII value (in decimal)
		of the arbitrary character x following ^^.
\		Equivalent to the decimal value of the digit
		string following the pointer.
^T		Stop command execution and then take on the 
		ASCII value (in decimal) of the character typed
		in by the user.
:m,n^T		Extended ^T operations: TTCALLS and echo control.
m,n^G		Monitor GETTAB call, using m,n as arguments.

			AIDS

:		Enables error control.  Many commands (especially search
		and file commands), if preceeded by a :, will not cause
		an error message if they fail.  The : modifier will
		cause the command to return a value of 0 if it fails,
		-1 if it is successful.
EC		Perform a garbage collection and reduce the amount
		of core as much as possible.
/		When used after an error message, this causes
		a more detailed explanation of the error to be
		typed.
*i		When used at the beginning of a command
		string, this causes the entire command string
		(with one of the two concluding altmodes)
		to be moved into Q-register i.
?		When used after an error message, this causes
		the offending command to be typed out (with
		a few of the commands preceding it).
?		Enter trace mode. A second ? command
		takes TECO out of trace mode.
rubout		Erase last character typed in the command
		string.
^H		If a CRT has been specified, erases and backs over 
		previously typed character.
^G^G		Erase the entire command string.
^G<space>	Retype current line of command string.
^G<period>	Retype entire command.
^U		Erase everything typed in back to the last
		break character.
0EO		Restore the EO value to standard.
nEO(n#0)	Set the EO value to n.
1EH		Type only code part of error messages.
2EH		Type error code plus one line.
3EH		Type all three parts of error.
0EH		Equivalent to 2EH.
