		    BITED - EDITOR FOR BINARY FILES

					Author:  A Christopher Hall
					Date:	 Dec 1976
					Version: 3B(37)

Bited is intended as an SOS-like editor which works on binary files.

GETTING STARTED

     To run BITED, type R BITED.  the program will then ask for a file
name, which is in the standard DEC format:

		DEV:NAME.EXT[P,PN]

NAME and EXT are mandatory.  Default device is DSK;  PPN is the user's
area.	If  no	output	specs  are  given, a file of the same name and
extension will be written in the user's area.

     If  the  user  wants  the	 output   file	 to   have   different
specifications from the input file, he can give them as follows:

	OUTDEV:OUTNAM.OEX[OP,PN]=INDEV:INNAME.IEX[IP,PN]

     If only the [PPN] appears in the output specs the	device,  name,
and extension will be taken from the input specs.

The following file specifications are legal:

FILE.EXT[61,300]	same as      FILE.EXT	     =FILE.EXT[61,300]
[25,601]=FILE.EXT[61,300]	     FILE.EXT[25,601]=FILE.EXT[61,300]
THING[45,707]=FILE[25,601]	     THING[45,707]   =FILE[25,601]

     If the file specification has been improperly given or the  input
file  is  protected  against the user, an error message will be typed,
and BITED will again ask for a file.

     The file specifications can also be put in the run command, after
a semicolon:

		R BITED;FILE1.EXT=FILE2.EX2

All of the above syntax rules apply.

     When the file is ready for editing, BITED	will  prompt  with  an
asterix.   The	user  can  then  type in any of the commands described
below.

GENERAL INFORMATION

     The entire file must be  in  core	during	editing.   Thus  files
larger than 350 blocks or so might generate a ?NOT ENOUGH CORE monitor
error.

     If a file contains more than 100000(8) words,  the  word  numbers
will become six (instead of five) digits long.

     All numbers accepted or typed out by BITED are in octal.

     Lower case, or mixed upper and lower case letters,  may  be  used
for all commands.

     Spaces are ignored for all commands (including the filespecs).

COMMANDS - GENERAL

     The following conventions are used in describing the commands:

<number> is an octal number.

<range> is n or m:n	 where	m,n are word numbers

	. and * may be used to designate present location and  end  of
	file, respectively.  Beginning of file can always be 0.

	A range may also be given by a location + or  -  a  number  of
	words,	ie,  102+10  is the same as 102:112, and 102-10 is the
	same as 72:102.

	Ranges with values improperly given will be adjusted  so  that
	the  low value is at least the first word of the file, and the
	high value lies between the low value and the last word of the
	file.

<value> is  n	to give a full word value of up to 12 digits
	    m,n (or m,,n) to specify left and right halves of a word
	    n,	(or ,n)   to use the contents of the right (left)
		half of the first word of the range.
	    ?'s may be used instead of digits to use the corresponding
		digits of the first word of the range.

Thus, for a file of 100 words,
	10 and 10:100 are valid ranges
	66:150 is treated as 66:100
	57:55  is treated as 57 (same as 57:57)
	68     is invalid, since it is not octal

If the first word of the given range is 123456,,654321, the value
	3 is the same as 000000,,000003
	501,32 (or 501,,32) = 000501,000032
	501,	is equivalent to 000501,,654321
	,00??0? is equivalent to 123456,,004301

COMMANDS

PRINT

P <range>
	Will print on the terminal all words within  the  range,  with
	word  numbers.	 P with no argument will print the same number
	of words as the last print (unless only one word was printed),
	starting with the last word Printed.

		*P 100:102
		00100/201140,,007734
		00101/254200,,000000
		00102/254000,,000101

		*P
		00102/254000,,000101
		00103/200177,,401152
		00104/202160,,000001

		*P 300
		00300/200020,,003074

		*P
		00300/200020,,003074
		00301/202020,,003075
		00302/254000,,001322

		*

OUTFORMAT

O	or
O <n>,...,<n>
	Controls the optionally formatted output to the  teletype.   O
	with  no  argument  will turn off the optional output if it is
	on;  otherwise it restores the last  format  given  (which  is
	initially  O  I).   O  takes  up  to five numbers separated by
	commas, as  arguments,	representing  the  byte  sizes	to  be
	output.  The last number given will be repeated, if necessary.
	The numbers must be between 1 and 44, and note that  they  are
	in octal (unless a BASE command has been given).	In
	addition, there are the following arguments to O:

	A	Output in ASCII character format
	S	Output in SIXBIT
	I	Output in DEC instruction format
	H	Output in hexadecimal (four bit, 0 - F) format

		*O

		*P 10:11
		00010/260740,,400654	260 17 0 00 400654
		00011/201062,,000035	201 01 1 02 000035

		*O 7

		*P 12
		00012/511011,,040630	122 040 110 101 114 000

		*O 6

		*P .
		00012/511011,,040630	51 10 11 04 06 30

		*O A

		*P .
		00012/511011,,040630	R HAL

		*O

		*P .
		00012/511011,,040630

		*O H

		*P .
		00012/511011,,040630	A4 82 44 19 8

		*O 11,4,1,4,22		(same as instruction format)

		*P .
		00012/511011,,040630	511 02 0 01 040630

		*O 12,10,12,10		(for PDP-11 image files)

		*P .
		00012/511011,,040630	1222 011 0101 230

		*

BASE

B
	Toggles the numeric base of the word numbers.	Normally  they
	are  input  and  output as octal, but this command will change
	them to decimal.  Calling BASE	again  will  restore  them  to
	octal.	Also affected:	the byte sizes for OUTFORMAT.

		*B

		*P 7:10
		00007/000000,,000007
		00008/000000,,000010
		00009/000000,,000011
		00010/000000,,000012

		*O 9

		*P 7
		000007/000000,,000007	000 000 000 007

		*

LIST

L <range>
	Same  as  print,  except  that	output	is  directed  to   the
	lineprinter.  Output is eight words to a line, 384 (600 octal)
	words per page, in blocks of eight lines separated by a  blank
	line.	The word number of the first word in each line is also
	output.

RELOCATE

R <number>
	Renumbers the file starting with <number>.   This  command  is
	useful	when  the  file uses relative addressing and the first
	word of the file is not at address 0.

		*P 0
		00000/000051,,000147

		*P *
		00310/000000,,000000

		*R 3077

		*P 3077
		03077/000051,,000147

		*P*
		03407/000000,,000000

		*

EXIT

E
	Exits BITED to the Monitor and saves  the  changes  that  have
	been made in the file.

QUIT

Q	Exits BITED, but leaves the file unchanged.

WRITE

W
	Saves the present copy	of  the  file,	without  exiting  from
	BITED.

NEWFILE

N
	Causes BITED to ask for a new file to work on.	Does NOT  save
	the old file (use W before the N if saving is desired).

		*N
		FILE=NEWFIL.DAT       (user types new filespec)

		*		      (now editing NEWFIL.DAT)

TYPSPECS

T
       Causes BITED to output the file specs currently in effect.

		*N
		FILE=WORK.OLD=WORK.NEW[123,456]

		*T
		WORK.OLD=WORK.NEW[123,456]

		*

INSERT

I <range> [/ <value>]
	Inserts new words at the locations given in <range>, renumbers
	the  part  of  the file above the insertion, and asks the user
	for values for the new words.  if a  value  is	given  in  the
	command  it  will  be placed in the first new word.  Note:  if
	insertions or deletions are to be made	at  several  different
	locations,  the  highest  one  should  be  done  first, so the
	renumbering will not affect the next operation.

		*I 101:103/450
		00101/000000,,000450	(BITED printed this)
		00102/451		(BITED typed line number;
		00103/452		   user typed values.)

		*

DELETE

D <range>
	Deletes words within the range and renumbers  the  file.   The
	file is then shorter by the number of words deleted.

		*P 31:34
		00031/000001,,000002
		00032/000003,,000004
		00033/000005,,000006
		00034/000007,,000010

		*D 32:33

		*P 31:32
		00031/000001,,000002
		00032/000007,,000010

		*

CHANGE

C <range> [/ <value>]
	Allows the user to give new values for the words  in  <range>.
	If a <value> is given, it will be put in the first word of the
	range;	then BITED will prompt for the remaining words.

		*P 155
		00155/123456,,654321

		*C 155/???321,123??7
					(now 155/123321,,123327)
		*C 155:156
		00155/???777,		(BITED typed the word numbers;
		00156/0 		 the user typed the values)

		*			(now 155/123777,,123327 and 156/0,,0)

FIND

F <range> / <value> [@ <number>]
	Prints on the  terminal  all  occurrences  of  <value>	within
	<range>.   If  @  <number>  has been given then only the first
	<number> occurrences found will be printed.	After  a  Find
	has  been given, another F without arguments will look for the
	next occurrence of  <value>  after  the  last  one  typed  out
	(irrespective of range).

		*F 0:100/254???,
		00006/254200,,000000
		00055/254000,,400102
		00061/254000,,003077

		*F
		00116/254200,,400777

		*

SUBSTITUTE

S <range> / <value1> = <value2> [@ <number>]
	Finds occurrences of <value2> in the same  way	as  for  FIND,
	above,	and  changes  those  words  to	<value1>.   After  the
	substitution has been made the word is printed out.

		*P 100
		00100/777777,,777777

		*S 0:*/000???,=777???,
		00100/000777,,777777
		00114/000322,,000001	(was 777322,,1)

		*S 0:*/777777,=000777, @1
		00100/777777,,777777

		*S		(make sub on next occurrence)

		*		(there were no more)

GOTO

G	or
G <range>
	Uses for its starting location the value in the right half  of
	the first word of the range.  If range is of format m + or - n
	then n words will be printed.  If range is just a  value  then
	The G command alone uses the right half of the last word typed
	as the pointer.

		*P 400
		00400/254000,,003760

		*G			(2 lines were printed before)
		03760/200100,,000573
		03761/201740,,000001

		*G 3760 + 2
		00573/000000,,000001
		00574/000000,,000002
		00575/000000,,000003

		*

HELP

H
	Displays a summary of the commands and their functions.

ERROR MESSAGES

After any of the messages below are typed, BITED will ask  for	a  new
file specification or command string, as the case may be.

	BAD FILE SPECIFICATION - Error in file spec string.

	FILE NOT FOUND, OR IS PROTECTED - Lookup failure:  input  file
	does not exist or is	protected  so as to be inaccessible to
	the user.

	CANNOT WRITE TO OUTPUT AREA - Enter failure,  usually  because
	output area is protected against the user.

	ERROR IN COMMAND STRING - Bad command string,  usually	caused
	by a decimal number or an illegal delimiter.

	ERROR WITH .  OR * - One of those characters used improperly.

	VALUE ERROR - Bad value typed into a C or I command, caused by
	characters other than 0-7, <comma>, or <CRLF> in the string.

	ILLEGAL COMMAND - Unimplemented command symbol at beginning of
	command string.

	IMPROPER FORMAT VALUE - Value outside the range 0-44, or A, I,
	S, or H typed to the O command.

	CANNOT HAVE BYTE SIZE ZERO - O 0, or O 3,0,6 (for example), is
	illegal and meaningless.
  