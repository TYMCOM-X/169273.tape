.;TECO Documentation
.;Original version produced at BYU by SLP.
.;Modified by CBD for general version and on-line help system.
.;15-Mar-79	note: Date change here and in two other places.
.;RUNOFF switches
.;*****WARNING******  TECO.CRD and TECO.DOC must be post-processed
.;                    to remove control characters.  See TECDOC.MIC.
.;TECO.CRD=TECO.RND/variant:card/creturn
.;		(makes a 60x40 output file for 3-panel reference cards)
.;		then use RUNFIL.TEC and 3X60.FOR to make finished card.
.;TECO.CRD=TECO.RND/variant:(card,ut)/creturn/underline:line
.;		(makes a 75X49 output file suitable for photo-reduced
.;		reference cards (Univ. of Texas Format).)
.;TECO.DOC=TECO.RND/variant:doc/underline:separate
.;		makes a 58x70 TECO command summary for DOC:.
.!		Printable on regular 8.5 by 11 paper.
.;HINTS.TEC=TECO.RND/variant:hints/underline:separate
.;		makes a HINTS.TEC file for placement on TED:.
.!TECHLP.TXT=TECO.RND/variant:help/creturn/underline:none
.!		makes a help text suitably formatted for the TECO On-Line
.!		Help System.
.vr help t f
.vr card t f
.vr hints t f
.vr doc t f
.vr ut t f
.ap
.cc
.if card
.ps 60,40
.if ut
.ps 75,49
.ei ut
.ei card
.if help
.ps 99999,70
.nj
.nhd
.ei help
.if doc
.ps58,70
.header mixed
.t TECO Command Summary
.fg4
.c;TECO COMMAND SUMMARY
.s2
.c;March 15, 1979
.s 2
.c;Table of Contents
.s
.lit
 Symbols and Definitions . . . . . . . . . . . . . . . . . . . . .   2
 Creating and Editing a File . . . . . . . . . . . . . . . . . . .   3
 Exiting From Teco . . . . . . . . . . . . . . . . . . . . . . . .   3
 Buffer Positions. . . . . . . . . . . . . . . . . . . . . . . . .   4
 Pointer Positioning . . . . . . . . . . . . . . . . . . . . . . .   4
 Arithmetic Operators. . . . . . . . . . . . . . . . . . . . . . .   4
 File Selection. . . . . . . . . . . . . . . . . . . . . . . . . .   5
 Advanced File Selection . . . . . . . . . . . . . . . . . . . . .   5
 File Selection Switches . . . . . . . . . . . . . . . . . . . . .   6
 Log Files . . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
 Terminal Initialization . . . . . . . . . . . . . . . . . . . . .   7
 Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   7
 Output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   7
 Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . .   8
 Advanced Insertion. . . . . . . . . . . . . . . . . . . . . . . .   8
 Deletion. . . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
 Immediate Type-Out Commands . . . . . . . . . . . . . . . . . . .   9
 Type-Out. . . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
 Advanced Terminal I/O . . . . . . . . . . . . . . . . . . . . . .  10
 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . .  11
 Advanced Searching. . . . . . . . . . . . . . . . . . . . . . . .  11
 Q-Registers . . . . . . . . . . . . . . . . . . . . . . . . . . .  13
 Iteration Commands. . . . . . . . . . . . . . . . . . . . . . . .  14
 Flow Control. . . . . . . . . . . . . . . . . . . . . . . . . . .  14
 Conditional Execution Commands. . . . . . . . . . . . . . . . . .  14
 Special Numeric Values. . . . . . . . . . . . . . . . . . . . . .  15
 Aids. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16
 Hints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  18
.END LIT
.pg
.ei doc
.if card
.ifnot ut
.c;TECO REFERENCE CARD
.else ut
.c;TECO POCKET REFERENCE LIST
.s
.c;DECSystem-10
.c;CCRL-7
.ei ut
.ei card
.if doc
.c;TECO COMMAND SUMMARY
.ei doc
.if card
.s.c;March 15, 1979
.ifnot ut
.s.c;* * *
.s
.else ut
.s20
.ei ut
.ei card
.if doc
.s
.i5
.ei doc
.if help
.lit
HELP  Welcome to the TECO On-Line HELP System.

 - To get back to TECO, type an altmode or a carriage return.
 - To get help on a command, type it followed by an altmode.
   ^H, DEL, ^U and ^R can be used during type-in, but note
   that other control characters are converted to <up-arrow><char>.
 - To get help on one of the following categories, type the
   category number followed by an altmode.  The categories are:
    1. Symbols and Definitions      15. Advanced Insertion
    2. Creating and Editing a File  16. Deletion
    3. Exiting from TECO            17. Immediate Type-Out Commands
    4. Buffer Positions             18. Type-Out
    5. Pointer Positioning          19. Advanced Terminal I/O
    6. Arithmetic Operators         20. Searching
    7. File Selection               21. Advanced Searching
    8. Advanced File Selection      22. Q-Registers
    9. File Selection Switches      23. Iteration Commands
   10. Log Files                    24. Flow Control
   11. Terminal Initialization      25. Conditional Execution Commands
   12. Input                        26. Special Numeric Values
   13. Output                       27. Aids
   14. Insertion
 - To do a general search for any string in the entire help file,
   type it followed by a carriage return.
 - To see the entire help text, type "ALL" followed by an altmode.
   (If you'd like a printed copy, print DOC:TECO.DOC.)
 - To see this text again, type "HELP" followed by an altmode.
 - For more detailed information, see the TECO Reference Manual
   and the file DOC:TEC124.DOC.  Other useful material can be found
   on the TED: area.
ALL
.end lit
.ei help
.ifnot hints
.ifnot help
For complete descriptions and examples of TECO's
commands, refer to the TECO manual and
DOC:TEC124.DOC.
.ei help
.ei hints
.if card
.ifnot ut
.s.c;* * *
.ei ut
.ei card
.if doc
.s.c;* * * * * * *
.ei doc
.ifnot hints
.lm 14
.ts 14,22,30,38,46
.ei hints
.if card
.lm 9
.p -9,1,2
.ts 9,16,24,32,40
.ei card
.if help
.p -14,1,0
.ei help
.if doc
.p -14,1,2
.st Symbols and Definitions
.ei doc
.tp 10
.s2
.if help
 1
.ei help
.ifnot hints
.c;^&SYMBOLS AND DEFINITIONS\&
 _^	Designates the following letter or character as
a control character.  In general, TECO will allow you to type a control
character in the "<up-arrow><character>" form, unless it is part of
a text string within a search or insert command.
 $	Altmode or escape key (_^[).
 _<CR_>	Carriage return key (_^M).
 _<LF_>	Line feed key (_^J).
 _<TAB_>	Tab key (_^I).
 _<FF_>	Form feed key (_^L).
 m or n	Represents any number. Many TECO commands accept a numeric
argument, which, if missing, generally defaults to 1.
 i	Represents one of A-Z, 0-9, or * for Q-register commands.
 Buffer	A block of core memory within TECO
into which text is read or inserted, edited, and output.
 Page	The amount of text read into the buffer by an input command or
output by an output command.
Editing is performed in the buffer on a page by page basis.
 Buffer Pointer
.br;Represents the current position within the buffer where editing
is taking place; always positioned between two characters.
 Q-registers	Auxiliary data storage locations available for storing
numbers, character strings, and TECO commands.
.ei hints
.if card
 Filespec	dev:filnam.ext_<prot_>[proj,prog,
.br;sfd1,sfd2,...]/sw1/sw2...
.ei card
.ifnot hints
.ifnot card
 Filespec
.br; #####dev:filnam.ext_<prot_>[proj,prog,sfd1,sfd2,..]/switch1/switch2..
.ei card
.ei hints
.if doc
.st Creating and Editing a File
.ei doc
.tp 10
.s2
.if help
 2
.ei help
.ifnot hints
.c;^&CREATING AND EDITING A FILE\&
.s;The following monitor commands automatically run the
TECO editor and perform standard file initialization.
 MAKE filespec_<CR_>
.br;Create a new file with TECO.
Performs an automatic EWfilespec$.
 TECO filespec_<CR_>
.br;Edit an existing file with TECO.
Performs an automatic EBfilespec$EY$ sequence.
 TECO_<CR_>	Enter TECO using the file named in the previous edit.
 MAKE filespec1=filespec2_<CR_>
.br;Same as "TECO filespec2", but direct the output to filespec1,
and don't create a .BAK file.
(Performs an automatic EWfilespec1$#ERfilespec2$#EY$ sequence.)
A "TECO" command will always ignore the second
filespec if given, causing filespec1 to be editted normally.  This allows
"TECO#_<CR_>" commands following a MAKE command to continue
to edit the newly created file rather than read from the
original one again.
 TECO filespec$command$...$command_<CR_>
.br;Execute the specified commands following the filespec automatically after
entering TECO (works with MAKE too). The command string
will be remembered as part of the filespec on subsequent
"TECO<CR>" commands.
Note that the "$" characters shown are dollar-signs, not 
escapes.  Since real escapes on the command line would cause the command
to terminate prematurely, we make use of a "pseudo-escape"
character, the dollar sign.  TECO will substitute real escapes
as it executes the command(s).
 R TECO_<CR_>	Run the TECO editor without selecting any files
for editing.
File selection must be made with the TECO commands described
under "File Selection".
.ei hints
.if doc
.st Exiting from TECO
.ei doc
.tp 10
.s2
.if help
 3
.ei help
.ifnot hints
.c;^&EXITING FROM TECO\&
 EX	Output the remainder of the input file, close the
output file, and then exit to the monitor.
If an ED command is in effect, run the specified program.
 EG	Output the remainder of the file, close and
then re-execute the last compile class command that was typed.
 _^C	Exit immediately to the monitor.
May also be used to abort an editing session (leaves original
file intact). Typing CONTINUE (perhaps after performing some monitor commands)
will allow you to resume your editing session where you left off.
Typing REENTER will cause TECO to abort any command string it may
have been executing and ask for the next command. (This is good
for stopping infinite search loops, etc.)  _^C can be entered in the command string by
typing it as up-arrow C.
 _^Z	Close the output file and exit to the
monitor.
(Simple close; no files are renamed).
.ei hints
.if doc
.st Buffer Positions
.ei doc
.tp 10
.s2
.if help
 4
.ei help
.ifnot hints
.c;^&BUFFER POSITIONS\&
 B	Beginning of the buffer_; 0.
 _.	Current pointer position; number of characters
to the left of the pointer.
 Z	End of the buffer; number of characters in the
buffer.
 m,n	m+1st through nth characters in the buffer.
Used with the K, P, S, T, and X commands.
 H	Entire buffer; B,Z.
.ei hints
.if doc
.st Pointer Positioning
.ei doc
.tp 10
.s2
.if help
 5
.ei help
.ifnot hints
.c;^&POINTER POSITIONING\&
 nJ	Move pointer to position between nth and
n+1st characters.
 nC	Advance pointer n positions.
 nR	Move pointer back n positions. Equivalent
to -nC.
 nL	Move pointer to beginning of nth line from
current pointer position.
 0L	Move pointer to beginning of current line.
.ei hints
.if doc
.st Arithmetic Operators
.ei doc
.tp 10
.s2
.if help
 6
.ei help
.ifnot hints
.c;^&ARITHMETIC OPERATORS\&
 m+n	Add.
 m n	Add.
 m-n	Subtract.
 m*n	Multiply.
 m/n	Divide and truncate.
 m_&n	Bitwise logical AND.
 m_#n	Bitwise inclusive OR.
 ()	Perform enclosed operations first.
 _^On	Accept following number in octal radix.
Must be typed as up-arrow O.
.ei hints

.if doc
.st File Selection
.ei doc
.tp 10
.s2
.if help
 7
.ei help
.ifnot hints
.c;^&FILE SELECTION\&
.s;The following commands may be used to control
file selection.
 ERfilespec$	Select file for input.
 EWfilespec$	Select file for output.
 EBfilespec$	Select file for input and output, with
backup protection.
 EAfilespec$	Select file for output--append rather than supersede.
.ei hints
.if doc
.st Advanced File Selection
.ei doc
.tp 10
.s2
.if help
 8
.ei help
.ifnot hints
.c;^&ADVANCED FILE SELECTION\&
 EPfilespec$	Read a file and put it into Q-register *.
 EIfilespec$	Read a file, put it into Q-reg *, and execute it as a
TECO macro.
 ENfilespec$	Rename the current input file to filespec.
 EN$	Delete the current input file.
 EEfilespec$	Save the current state of TECO in filespec.
DSK:TECO.SAV is the default.
 nEDfilespec$	Run filespec upon exit.  (SYS_: is the default device.
The optional argument n is the starting address offset).
 ED$	Cancel pending ED (do not run
anything on exit from TECO).
 EK	Cancel existing EW or EA.
 nEM	Position magnetic tape.
 EZfilespec$	Zero directory (DECtape) and select file for output.
.ei hints

.if doc
.st File Selection Switches
.ei doc
.tp 10
.s2
.if help
 9
.ei help
.ifnot hints
.c;^&FILE SELECTION SWITCHES\&
.s;These switches may also be used with the
MAKE and TECO monitor commands.
 /READONLY	Used with TECO command to cause ER instead of EB.
 /INPLACE	Used with EB to cause file to be overwritten with
no .BAK file.
 /APPEND	Used with MAKE command to cause EA instead of EW.
 /DEFAULT	Used with ER, EW, EA, EB, EI and EP to cancel
any filespec defaults previously in effect.
 /GENLSN	Used with EW or EB to cause line sequence
numbers to be generated.
 /SUPLSN	Used with ER, EB, or EW to suppress line
sequence numbers.
 /NOLSN	Used with ER, EB to assume no sequence numbers.
.ei hints
.if doc
.st Log Files
.ei doc
.tp 10
.s2
.if help
 10
.ei help
.ifnot hints
.c;^&LOG FILES\&
 ELfilespec$	Open a log file. Default is
DSK:TECO.LOG.
 nEL$	Further control of log file: 0=nothing in log, 1=/NOIN,
2=/NOOUT, 3=everything in log, -1=close the log file.
 /NOIN	Used with EL to keep terminal input out of the log file.
 /NOOUT	Used with EL to keep terminal output out of the log file.
 /APPEND	Used with EL to append to rather than supersede the log
file.
.ei hints
.if doc
.st Terminal Initialization
.ei doc
.tp 10
.s2
.if help
 11
.ei help
.ifnot hints
.c;^&TERMINAL INITIALIZATION\&
 EVterminal$	Specifies terminal type. (ACT4, ACT5, ADD580, ADM2, ADM3, ADM3A, BEE, CDC,
CRT, DPT, H1200, H1500, H2000, HP2640, VT05, VT50, VT52, and TTY).
TECO is initialized to CRT.
 nEV$	Returns value of terminal parameter n.
 m,nEV$	Set terminal parameter m to a value of n.
.ei hints

.!INPUT
.if doc
.st Input
.ei doc
.tp 10
.s2
.if help
 12
.ei help
.ifnot hints
.c;^&INPUT\&
 EY	Clear buffer and input one page.
(Y may be used at macro level).
 A	Input one page and append to current buffer
contents.
 :nA	Input n lines of text and append to current buffer contents.
(Won't read past a form feed.)
 n_^Y	Input until page n is in the buffer.
 n_^U	Perform a USETI. Positions input file to block n
for next input command. (ER'd files only; illegal with EB).
Must be typed as up-arrow U.
.ei hints
.if doc
.st Output
.ei doc
.tp 10
.s2
.if help
 13
.ei help
.ifnot hints
.c;^&OUTPUT\&
 nPW	Output n copies of the current page and append a form
feed character to each.
Does not change the buffer.
 nP	Output the current page, clear the buffer,
and read in the next page.  Continue this
process until the nth page from the current
page has been input.
 m,nP	Output the m+1st through the nth characters.
Do not append a form feed character, and do
not change the buffer.
 n_^P	Same as nP, but end up at the nth absolute page of the
file, rather than the nth page past the current page.
 EF	Close the output file.
.ei hints

.!Insertion/Advanced insertion
.if doc
.st Insertion
.ei doc
.tp 10
.s2
.if help
 14
.ei help
.ifnot hints
.c;^&INSERTION\&
 Itext$	Insert the text delimited by I and altmode.
 _^Itext$	Insert a tab followed by all the text up to the altmode.
.ei hints
.if doc
.st Advanced Insertion
.ei doc
.tp 10
.s2
.if help
 15
.ei help
.ifnot hints
.c;^&ADVANCED INSERTION\&
 @I/text/	Insert the text delimited by the arbitrary
character following I.
 nI$	Insert the character with ASCII value n
(decimal).
 n_\	Insert the ASCII representation of the
decimal integer n.
 n_\_\	Insert the ASCII representation of the
octal integer n.
 _^V	In an insert string, translate next character (if alphabetic)
to lower case.
 _^V_^V	In an insert string, translate remaining alphabetic characters
to lower case.
 _^W	In an insert string, translate next character (if alphabetic)
to upper case.
 _^W_^W	In an insert string, translate remaining alphabetic characters
to upper case.
 _^_^	In a insert string,
translate next character (if @, [, _\, ], _^,
or __) to "lower case" range.
 _^R	In an insert string, accept next character as text.
 _^Gi	Used inside an insert string to cause the contents
of Q-register i to be inserted into the string
at that point.
 _^T	Used inside insert strings to cause all control
characters except _^R, _^T, and altmode to be
taken as text.  Nullified by a second _^T.
(Note: does not work unless the monitor command
"TTY RTCOMPATIBILITY" has been given).
.ei hints
.if doc
.st Deletion
.ei doc
.tp 10
.s2
.if help
 16
.ei help
.ifnot hints
.c;^&DELETION\&
 nD	Delete the n characters following the pointer
position.
 -nD	Delete the n characters preceding the pointer
position.
 nK	Delete all characters in the buffer from 
the current pointer position to the beginning
of the nth line from the pointer position.
 m,nK	Delete the m+1st through the nth characters.
.ei hints
.if doc
.st Immediate Type-out Commands
.ei doc
.tp 10
.s2
.if help
 17
.ei help
.ifnot hints
.c;^&IMMEDIATE TYPE-OUT COMMANDS\&
.s;The following commands execute immediately
when typed as the first character following the
prompting "*".
 _^J _<LF_>	When typed immediately after the prompt, moves the
pointer to the beginning of the next line
and types the line.
(Same as 1LT).
 _^H	When typed immediately after the prompt, moves the pointer
to the beginning of the preceding line and
types the line.
(Same as -1LT).
 _;	When typed immediately after the prompt, moves the pointer to the beginning of the
current line and types the line.
(Same as 0LT).
.ei hints
.if doc
.st Type-out
.ei doc
.tp 10
.s2
.if help
 18
.ei help
.ifnot hints
.c;^&TYPE-OUT\&
 Type all text in the buffer from the current
pointer position to the beginning of the nth
line from the pointer position.
 m,nT	Type the m+1st through the nth characters.
 nV	Type all text within n lines from the current line.
Equivalent to (1-n)T nT.
 Qi=	Type the contents of Q-register i. (Numeric or text).
 n=	Type the decimal integer n.
 n==	Type the octal integer n.
.ei hints
.if doc
.st Advanced Terminal I/O
.ei doc
.tp 10
.s2
.if help
 19
.ei help
.ifnot hints
.c;^&ADVANCED TERMINAL I/O\&
 m,n=	If m_<0, same as n=_; if m=0, don't output a CRLF after the
number_; if m_>0, output the ASCII character whose value
is m after the number.
 1ET	Set to literal typeout mode.
 2ET	Set to image typeout mode.
 0ET	Restore typeout mode to normal.
(Type control characters in up-arrow form, altmodes as dollar signs, etc.).
 0EU	Flag lower case characters on typeout by preceding
them with a ' (standard unless "TTY LC" is in effect).
 1EU	Flag upper case characters on typeout.
 -1EU	No case flagging on typeout.
 -1ES	Set automatic typeout after searches.
 nES (n_>0)	Set automatic typeout
.;after searches
and use the character with ASCII value n (decimal)
to show the position
of the pointer.
 0ES	Set to no automatic typeout after searches.
 _^Amessage_^A	Type the message enclosed.
 _^L _<FF_>	Type a form feed.
 _^T	Stop command execution, wait for the user to type a character,
and then take on the 
ASCII value (in decimal) of the character typed.
 :m,n_^T	Extended _^T operations: TTCALLS and echo control.
.lit
:0^T 	INCHRW		:1,8^T	CCL flag
:n,1^T	OUTCHR n	:9^T	CLRBFI
:2^T	INCHRS		:10^T	CLRBFO
:4^T	INCHWL		:11^T	SKPINC
:5^T	INCHSL		:12^T	SKPINL
:6^T	GETLCH		:n,13^T	IONEOU n
:n,7^T	SETLCH n	:-1^T	ECHO OFF
:8^T	RESCAN 1	:-2^T	ECHO ON
.end lit
.s2
.ei hints

.if doc
.st Searching
.ei doc
.tp 10
.s2
.if help
 20
.ei help
.ifnot hints
.c;^&SEARCHING\&
.s;(Note: the buffer pointer is left unchanged when a search fails
unless the search caused a new page to be read into the buffer).
 nStext$	Search for the nth occurrence (following the
pointer) of the text delimited by S and
altmode, but do not go beyond the end of
the current page.  If n_<0, search backwards.
 m,nStext$	Same as S, but search only between pointer positions
m and n. If m_>n, search backwards.
 nFSoldtext$newtext$
.br;Search for the nth occurrence (following the
pointer) of the first text string and replace
it with the second text string. Do not go
beyond the end of the current page.
 nNtext$	Equivalent to nStext$ except that if the
text is not found on the current page, pages
are input and output until it is found.
 nFNoldtext$newtext$
.br;Equivalent to FS except that if
the text is not found on the current page,
pages are input and output until it is 
found.
 nFDtext$	Search for nth occurrence of text and delete everything from the current
pointer position to the end of text.
.ei hints
.if doc
.st Advanced Searching
.ei doc
.tp 10
.s2
.if help
 21
.ei help
.ifnot hints
.c;^&ADVANCED SEARCHING\&
 n__text$	Equivalent to nNtext$ except that it does
input only, no output.
 :nStext$	Equivalent to nStext$ except that it returns
a value of -1 if the search succeeds or 0 if
it fails instead of an error message. The _:
command can also be used with FS, N, FN, 
FD, and __.
 @nS/text/	Equivalent to nStext$ except that the text
is delimited by the arbitrary character 
following the S. The @ command may also
be used with FS, N, FN, FD, and __.
 0_^X	Reset search mode to accept either case.
 n_^X (n_#0)	Set search mode to "exact" mode.
 _^V	In a search string, translate next character (if alphabetic)
to lower case.
 _^V_^V	In a search string, translate remaining alphabetic characters
to lower case.
 _^W	In a search string, translate next character (if alphabetic)
to upper case.
 _^W_^W	In a search string, translate remaining alphabetic characters
to upper case.
 _^_^	In a search string,
translate next character (if @, [, _\, ], _^,
or __) to "lower case" range.
 _^R	In a search string, accept next character as text.
 _^T	Used inside text arguments to cause all control
characters except _^R, _^T, and altmode to be
taken as text. Nullified by a second _^T.
(Requires "TTY RTCOMPATIBILITY" monitor command).
 _^_\	Used inside search arguments to indicate
accept either case for following characters.
Nullified by a second _^_\.
 _^X	When used inside a text argument, accept any
character at this position in the search string.
 _^S	Accept any separator character at this position.
A separator is any character except a letter, digit, period,
dollar sign, or percent sign.
(Note: does not work unless the monitor command
"TTY NO PAGE" has been given).
 _^Na	Accept any character except the arbitrary
character a following _^N.
 _^Q	Take the next character in the search string
literally, even if it is a control character.
(Note: does not work unless the monitor command
"TTY NO PAGE" has been given).
 _^Gi	Substitute the contents of Q-reg i into the text 
string at this point.
 _^EA	Accept any alphabetic character as a match.
 _^EV	Accept any lower case alphabetic character
as a match.
 _^EW	Accept any upper case alphabetic character
as a match.
 _^ED	Accept any digit as a match.
 _^EL	Accept any end-of-line character as a match.
 _^ES	Accept any string of spaces and/or tabs
as a match.
 _^E_<nnn_>	Accept the ASCII character whose octal
value is nnn as a match.
 _^E[a,b,c...]	Accept any one of the characters in the
brackets as a match.
.ei hints

.if doc
.st Q-registers
.ei doc
.tp 10
.s2
.if help
 22
.ei help
.ifnot hints
.c;^&Q-REGISTERS\&
 nUi	Store the integer n in Q-register i.
 m,nUi	Store the integer n in Q-register i and return
the value of m.  (For example, the command m,nUiUj is equivalent to nUi mUj).
 Qi	Return the value stored in Q-register i
(for use as a numeric argument to another command).
 %i	Increment the value in Q-register i by 1
and return this value.
 nXi	Store, in Q-register i, all characters from
the current pointer position to the beginning
of the nth line from the pointer.
 m,nXi	Store the m+1st through nth characters in
Q-register i.
 Gi	Insert a copy of the text in Q-register i at the current
pointer position.
 m,nMi	Execute the text in Q-register i as a command
string.  The arguments are optional, and are passed to the first command
of the string.
 m,nWi	Execute the text in Q-register i as a command
string by a "jump" rather than a "call".
 [i	Push the current contents of Q-register i onto 
the Q-register pushdown list.
 n[i	Equivalent to [i nUi.
 m,n[i	Equivlent to [i m,nUi.
 ]i	Pop the last stored entry from the Q-register
pushdown list into Q-register i.
 *i	If typed immediately after the prompt,  save the
preceding command string in Q-register i.
 EPfilespec$	Read a file and put it into Q-register *.
 EIfilespec$	Read a file, put it into Q-reg *, and execute it as an
TECO macro.
.ei hints
.if doc
.st Iteration Commands
.ei doc
.tp 10
.s2
.if help
 23
.ei help
.ifnot hints
.c;^&ITERATION COMMANDS\&
 n_<commands_>	Perform the enclosed command string n times.
 _;	Jump out of the current iteration field, if the
last search executed failed.
 n;	If n_>=0, jump out of the current iteration field.
.ei hints
.if doc
.st Flow Control
.ei doc
.tp 10
.s2
.if help
 24
.ei help
.ifnot hints
.c;^&FLOW CONTROL\&
 _!tag_!	Define a position in the command string with
the name "tag".
 Otag$	Jump to the position defined by _!tag_!. WARNING: Don't use O
to jump into or out of iteration brackets <..>.
.ei hints
.if doc
.st Conditional Execution Commands
.ei doc
.tp 10
.s2
.if help
 25
.ei help
.ifnot hints
.c;^&CONDITIONAL EXECUTION COMMANDS\&
.s;These commands are of the form
.s
.c;n"x.......'
.s
If the numeric value of n satisfies condition x, all the commands between
"x and ' are executed; execution falls through the apostrophe
unless the command string contains a jump.
If n does not satisfy x,
execution resumes with the command following the '.
 n"Ecommands'	If n=0, execute the commands specified
between "E and '_; otherwise, skip to the '.
 n"Ncommands'	If n_#0, execute the enclosed commands.
 n"Lcommands'	If n_<0, execute the enclosed commands.
 n"Gcommands'	If n_>0, execute the enclosed commands.
 n"Ccommands'	If n is the ASCII value (decimal) of a symbol
constituent character (a letter, digit, period, percent sign, or dollar sign),
execute the enclosed
commands.
 n"Dcommands'	If n is a digit execute the enclosed commands.
 n"Acommands'	If n is alphabetic, execute the enclosed
commands.
 n"Vcommands'	If n is lower case alphabetic, execute the
enclosed commands.
 n"Wcommands'	If n is upper case alphabetic, execute the
enclosed commands.
 n"Tcommands'	If n is true, execute the enclosed commands.
 n"Fcommands'	If n is false, execute the enclosed commands.
 n"Scommands'	If n is "successful", execute the enclosed
commands.
 n"Ucommands'	If n is "unsuccessful", execute the enclosed
commands.
.ei hints

.if doc
.st Special Numeric Values
.ei doc
.tp 10
.s2
.if help
 26
.ei help
.ifnot hints
.c;^&SPECIAL NUMERIC VALUES\&
 nA	The ASCII value (decimal) of the character
n positions to the right of the pointer. 0A gives the
character to the left of the pointer, -nA gives the character
n+1 positions to the left of the pointer.  If the position lies
outside the buffer boundaries, return 0.
 m,nA	Same as nA, but returns m if the position is outside the
buffer boundaries.
 _^E	The form feed flag. Equals 0 if no form feed
character was read on the last input, -1
otherwise.
 _^N	The end-of-file flag; equals -1 if end of input
file seen on last input. Otherwise equals 0.
 _^F	Decimal value of the console data switches.
 -1_^F	TTY number (+ 200000 octal) of this job.
 n_^F	TTY number (+ 200000 octal) of job n.
 _^H	The time of day in 60th's of a second.
Must be typed as up-arrow H.
 ET	The value of the type-out mode switch. (0=normal, 1=literal, 2=image).
 ES	The value of the autotype after successful searches
switch. -1 = auto typeout, 0 = no typeout, n>0 = autotype using
ASCII character n to show position of pointer.
 _^X	Value of the search mode flag. (0=either case
mode, -1=exact mode).
 EU	The value of the EU flag.
+1 = flag upper case characters.
0 = flag lower case characters.
-1 = no case flagging on typeout.
 EO	The value of the EO flag. 1 = version 21A;
2 = versions 22, 23; 3 = TECO 123 and 124.
 EH	The value of the EH flag. 1 = code only,
2 = code plus one line, 3 = all of error message.
 _^_^x	The ASCII value (decimal)
of the arbitrary character x following _^_^.
 _\	The decimal value of the digit
string following the pointer.
Leaves pointer at right end of the digit string.
 _\_\	The octal value of the digit
string following the pointer.
Leaves pointer at right end of the digit string.
 _^G	Returns job number.
 n_^G	Monitor PEEK UUO, using n as an argument.
 m,n_^G	Monitor GETTAB call, using m,n as arguments.
.ei hints

.if doc
.st Aids
.ei doc
.tp 10
.s2
.if help
 27
.ei help
.ifnot hints
.c;^&AIDS\&
 :	Enables error control.  Many commands (especially search
and file commands), if preceded by a :, will not cause
an error message if they fail.  The _: modifier will
cause the command to return a value of 0 if it fails,
-1 if it is successful.
Exception: :nA command uses _: to distinguish it from nA.
 EC	Perform a garbage collection
and reduce the amount of core as much as possible.
 /	When used after an error message, this causes
a more detailed explanation of the error to be
typed.
 *i	When used at the beginning of a command string,
this causes the entire previous command string
(minus one of the two concluding altmodes)
to be moved into Q-register i.
 ?	When used after an error message, this causes
the offending command to be typed out (with
a few of the commands preceding it).
 ?	Enter trace mode. A second _? command
takes TECO out of trace mode.
 _<DEL_>	Rubout last character typed in the command
string.
 _^H	If a CRT has been specified, erases and backs over 
previously typed character.  (Must be typed as a control character.)
 _^G_^G	Erase the entire command string.
 _^G _<space_>	Retype current line of command string.
 _^G.	Retype entire command.
 _^U	Erase everything typed in back to the last CRLF.
(Must be typed as a control character.)
 0EO	Restore the EO value to standard (3).
 nEO (n not 0)	Set the EO value to n.
 1EH	Type only code part of error messages.
 2EH	Type error code plus one line.
 3EH	Type all three parts of error.
 0EH	Equivalent to 2EH.
 _^V	Set prevailing mode for insertions and searches to lower case.
 _^W	Set prevailing mode for insertions and searches to upper case.
.ei hints

.ifnot help
.ifnot card
.lm0
.p 5,1,2
.if doc
.pg
.st Hints
.ei doc
.tp 10
.if hints
.ps9999,70
.rm 70
.nhd
.c;^&TECO HINTS\&
.ei hints
.if doc
.c;^&HINTS\&
.ei doc
.if hints
 This file contains little known features and general hints to
make living with TECO easier and more efficient.
 Note that this file can be examined at any time during a TECO
session (without affecting the text buffer, pointer, etc.) by the
command EPfilename.ext$Q*=$$", which stores the contents of filename.ext
into Q-register *, and then types them.
.ei hints
.ifnot card
  TECO's buffer pointer is always positioned between
two characters in the editing buffer.
It is never positioned exactly on a particular character.
This concept is fundamental to TECO and must be clearly
understood.
Make frequent use of the semicolon type-out command
until you are familiar with the positioning and
movement of the buffer
pointer.
  Disk area TED_: contains many useful
TECO macros that may be executed with the EI command.
Of particular interest is TED:HELP.TEC. This macro
makes an interactive help facility
available at any time during an editing session simply by typing
"EIHELP$$". Try it!
  The use of an TECO initialization file can be very powerful.
TECO commands placed in a file
named TECO.INI on your disk area
will be executed automatically each time
you enter TECO.
It can be used to specify the type of terminal you use,
to load your favorite TECO macros into appropriate
q-registers, to set up default values for filenames,
type messages, etc.
Here are the contents of a sample TECO.INI file:
.s
EVADM3A$ EPTED:LINE$ [*]L _^AWelcome to TECO!
.br
_^A
.s
This command string will specify the terminal in use as an
ADM3A, store the TECO macro LINE.TEC into Q-register L,
and type a welcoming message.  You may now type "ML="
at any time to find out what line in the text buffer the
pointer is at.
 Q-registers can be used to recover
text "lost" because you forgot to type an "I" at the beginning
of an insert command.
TECO usually types an error message like "SEARCH STRING TOO LONG"
or "MISSING TAG"
when this happens. A "*i" typed as the first command after the
error message will place the text you intended to insert in q-register i.
A subsequent "Gi" command will copy the text into the buffer.
Remember to delete the altmode (-D$$ works fine) at the end of the restored text.
 TECO error messages actually consist of three parts:
1) a six letter error code, 2) a one line description of the
error, and 3) a detailed explanation of the cause of the error.
The command "nEH" (n=1,2,3) will tell TECO how much of every
error message you wish to see. Novice users should put "3EH"
into their TECO.INI command string. Advanced users may wish to
use "1EH". In any case, typing a slash after an error message
appears will cause TECO to type the next portion of the error
message.
 The "?" command has two uses. Immediately after an error message,
a "?" will type out the command that caused the detected error.
At any other time, a _? puts TECO in trace mode.
Trace mode displays each command as it is executed.
A subsequent _? turns off tracing.
 Q-registers can be used to save positions within the buffer
for use as arguments to other commands.
You can move around in the buffer, saving the current value of the
buffer pointer at places of interest by typing ".Ui".
"Qi" is then used to return the value stored in q-register i.
For example, suppose different buffer positions have been saved in
q-regs a, b, and c. Then Qa,QbT types out the text in the buffer between
a and b; Qa,QbXd stores a copy of the text between a and b in q-reg d;
Qa,QbK deletes the text
between a and b;
QcJ moves the buffer pointer to position c;
Gd gets a copy of the text in q-reg d and inserts it
at c (our current buffer position).
 At the conclusion of any K or D command, the buffer pointer is
positioned between the characters that preceded and followed the deletion.
In the above example, note that this means a "QcJ" followed by a
"Qa,QbK" will leave you at the position of the deletion, not c.
Further, remember that the values stored in q-regs a, b, and c
do not refer to particular character strings, but to locations
within the buffer.
Following a deletion (or insertion), they
may no longer point to the same text as before.
  Q-registers can be used to save and execute command strings.
"*i", when typed as the first command of a new string, saves the previous
command string in q-reg i.
Subsequently, "Mi" can be used to execute the commands stored in i,
much like calling a subroutine. Saves a lot of typing if you find
yourself repeatedly using the same set of commands!
 If you forget what is in a q-register, simply type "Qi=".
 To copy the contents of q-register i into q-register j, use
"[i]j".
 <FStext1$text2$;> is a fast way to change all occurrences
of text1 in the buffer (starting at the pointer) to text2.
This leaves the pointer positioned at the last place a change was
made.
Note that <FStext1$$;> will NOT cause all occurences of text1 to be
deleted, since the two adjacent altmodes will terminate the command
prematurely.  To make this work, we must use use a control character
which doesn't generate text to separate the two altmodes (e.g. <FStext1$_^V$;>).
Use an FN search instead of FS if you want to continue beyond the
current page in the buffer and change all occurrences of text1 in the
file.
At the end of an FN search, all pages in the file have been input
and output and the buffer cleared.
 It is a good idea to exit and then reenter TECO every 5-15
minutes (EX$$ followed by TECO<CR> works fine).
This will keep your source and .BAK files as current as possible
as a safeguard against a system crash. If the system does
crash while you are editing, everything typed in the current
session will be lost.
 The maximum length of a search string is 36 character positions.
However, the search string itself may contain up to 80 characters,
if needed, to specify special control commands 
(like "_^E<nnn>").
  In order to insert or search for control characters, they must
be preceded by a _^R which "quotes" them.  _^R is preferable to _^Q,
since
_^Q will not allow insertion of $ (altmode) as a text character
while _^R will.
 To save a command string (without having to execute it first)
simply type the command as if it were to be executed and
replace the final two altmodes ($$) at the end of the
string with two control-G's (_^G_^G).
Then type *i. This stores the command, ready for execution, in q-reg i.
 The maximum depth of the Q-register pushdown list is 32 entries.
 The Q-register pushdown list is cleared after the execution of each complete
command string (eg, every time TECO types an * to indicate readiness
to accept a new command string).
 When used as a command, the two character sequence "up-arrow x"
is equivalent to the single character "control-x" (made by pressing
the CTRL and x keys simultaneously).
This method can be used only when the control character is typed as a
command, not when it is typed as text or as an alphanumeric argument.
 B, ., Z, and H are symbolic values often used as arguments with
the K, J, P, T, and X commands. For example, BJ (or simply J) moves the pointer to
the beginning of the buffer. ZJ moves the pointer to the end of the
buffer.
Two letter combinations of B, ., and Z can be used to selectively
delete, page-out, type, or copy (to a Q-register) different sections
of text in the buffer.
B,Z means everything from the beginning to the end of the
buffer (same as H).
B,_. means everything from the beginning of the buffer up to the
current pointer position. .,Z means everything from the current
pointer position through the end of the buffer.
 TECO's editing buffer normally holds about 3000 characters, or roughly
50 lines of text.
The text in the buffer is known as the current page.
Text is read in and out of the buffer a page at a time.
Form feeds may be placed in an input file to delimit pages and control
the amount of text read by an input command.
 On input, TECO accepts text until one of the following occurs: 1)
the end of the input file is reached, 2) a form feed character is
read, 3) the buffer is two-thirds full and a line feed is read (or
filled to within 128 characters of capacity), or 4) the buffer is completely
filled.
If the buffer is not large enough to accomodate at least 3000 characters
(or 3000 more characters if appending to the buffer),
TECO automatically expands its buffer by 1K, if possible, before
beginning to input.
 Except as text or numeric arguments, the carriage return, line feed, and space
characters are ignored by TECO and may be used to improve the readability
of macros and command strings. NEVER use a <TAB> (control-I) for this
purpose; it is an insert command!
 If you try to exit from TECO and are told "No File for Output",
you probably typed an "EF" command by mistake during the editing session.
This is often the result of an "EC" mistyped as "EF" or by the partial
execution of an insert string that was not preceded by "I".
To recover from this error, open a new output file with the "EW" command
(use a name different from the file being edited) and exit. Your original
file should contain all the text output up to the point where the "EF" occurred
and the new file you created should contain the rest.
Then combine the two files with a copy command (it may be necessary
to delete a few lines duplicated in both files).
If all else fails, you can start over with the .BAK file.
 Always try to use the FS command rather than a delete-insert
sequence, since fewer characters need to be shuffled around.
 When saving the state of TECO with an EE command, try to 
reduce the size of the resulting .SAV file as much as
possible by making sure there is no unwanted text stored
in Q-registers (put there by TECO.INI, for example) and by
doing an EC (garbage collect) command just before the EE.

 The _^V (translate to lower case) and _^W (translate to upper case)
commands are very powerful.
When used inside an insert or search text argument, two successive
_^V or _^W commands cause translation, to the specified case, of all
following alphabetic characters in that text argument.
A single _^V or _^W command causes translation of the next single
character (if it is alphabetic) to the specified case. The single
_^V or _^W in a text argument takes precedence over the case conversion
mode defined by double _^V or _^W commands.
 When used as independent commands, _^V and _^W set TECO to a prevailing
case conversion mode that affects all insert and search text arguments
(except as specified by _^V and _^W commands within the text arguments).
Thus, you can use a terminal without a lower case keyboard to create and
edit files containing both upper and lower case alphabetic characters.
First, use an independent _^V command to set the prevailing case conversion
mode so that all upper case alphabetic characters are translated to lower
case.
Then use the _^W command within individual text arguments to "shift"
temporarily to upper case.
An independent  0_^V or 0_^W command will reset the prevailing mode
so that no case conversion is performed (TECO default).
These commands provide a quick method for converting the case of
characters in the buffer.  For example,  HXA$HK$_^V$I_^GA$0_^V$$ will
convert all the upper case characters in the buffer to lower case.
 An TECO command string is not executed until you type two escapes
($$) in succession.
This allows you to concatenate as many commands as desired
into one command string (this is, in fact, what TECO macros are).
Single escapes are required within the string only to delimit
commands with variable length arguments.
 It is possible for a TECO macro stored in a Q-register to receive
and return arguments.  For example, if the string in Q-register A contains
"U1 U2 ... Q3", then the command "5,10MA=" will cause the 5,10 to be
passed to the first U command, which will store the 10 in Q-reg 1 and
send the 5 on to the second U command, which will store it in Q-reg 2.
The Q3 command at the end of the macro returns the number in Q-register
3, and this value becomes an argument to the command following the "MA",
in this case an "=" which causes the value to be typed on the terminal.
When writing TECO macros, however, it is a good idea to save and restore
the original contents of any Q-registers needed.  This can be done with
the help of the "[" and "]" commands.  Assuming that the macro in our
above example makes use of Q-regs 1, 2, and 3, we could rewrite
the macro as "[1#[2#[3#...#]3#]2#]1", which will preserve the
contents around the macro call.  Arguments may still be passed
to the macro, since "m,n#[i#[j" is equivalent to "[i#[j#m,nUiUj".
Note that our original macro returned the value in Q-reg 3 by having
"Q3" as the last command.  It is a little harder to return a value from
a macro if all Q-regs must be restored to their original contents.  The
idea is to use parentheses in a non-conventional manner:
"[1#[2#[3#.._.Q3+(]3#]2#]1#0)".  This will result in the return of
the value Q3+0; the
trick is that we have performed some non-arithmetic functions within
the parentheses, something which is perfectly legal as long as a numeric
value precedes the closing right paren.  Another example of this technique:
".+(ZJ#IHello$#0)J" will allow you to go to the end of the buffer, insert 
"Hello", and then restore your original pointer.
 TECO is really a programming language for writing editing programs.
If you want anybody to understand what you've written, remember to make
extensive use of spaces and crlf's.  Each line of a TECO program should
be no more complicated than a line of code in any other programming language.
 You may insert comments in TECO programs  by enclosing them in exclamation points; in effect,
making them into very long tags.
 See the TED: area for examples of several well-formatted TECO macros.
In particular, see TED:MAKTEC.TCO for an explanation of a simple convention
which makes writing TECO macros much more pleasant.
.ei card
.ei help
  $W3>
