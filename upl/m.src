*SAMPLE PROGRAM: MEMORY TEST ROUTINE
*ALGORITHM:
*     1.  INITIALIZE
*     2.  STORE TEST PATTERN IN MEMORY
*     3.  RETRIEVE IT
*     4.  IF NOT THE SAME, INCREMENT ERROR COUNTER
*     5.  GET NEXT LOCATION TO TEST
*     6.  IF MORE , GO TO STEP 2
*     7.  STOP
*
 TTL     'SAMPLE PROGRAM'
 STL     'MEMORY TEST ROUTINE'
 DAT     '5/6/75'
**STORAGE LOCATIONS FOR DATA:
*  (NOTE : THESE ARE STORED IN LOW CORE IN ORDER
*   TO ENSURE THAT DIRECT ADDRESSING CAN BE USED)
        ROM
FIRST RES     2    ; ADDRESS OF FIRST LOCATION TO BE TESTED
LAST RES      2    ; ADDRESS OF LAST ADDRESS TO BE TESTED
ERROR RES     1    ; 0 FOR NO ERROR AND NOT 0 FOR MEMORY ERROR
** MAIN PROGRAM:
*   (NOTE: THE METHOD USED HERE TO DEFINE THE LABEL "MEMST"
*   YIELDS THE SAME RESULT AS PLACING THE LABEL ON THE FIRST
*   LINE OF THE ROUTINE: THE REASON THIS METHOD IS USED, IS
*   TO SET "MEMST" OFF FROM THE ROUTINE TO POINT OUT THAT
*   THIS IS THE STARTING ADDRESS)
MEMTST EQU
*   1.  INITIALIZE X (NEXT LOCATION TO TEST)
*       A ACCUMULATOR (TEST PATTERN), AND
*       LOCATION "ERROR" (ERROR FLAG)
 LDX     &FIRST
 LDA A   #%10101010
 CLR     ERROR
*   2.  STORE TEST PATTERN
NEXT STA A  X    ; INDEXED ADDRESSING IS USED
*   3.  RETRIEVE PATTERN
 LDA B   X       ; B IS USED FOR THE RETRIEVED PATTERN
*   4.  IF NOT THE SAME, SET MEMORY ERROR FLAG
 CBA             ; COMPARE OBSERVED TO EXPECTED (A TO B)
 BEQ    MEMOK   ; IF MEMORY OK
 INC    ERROR    ; INCREMENT ERROR
*   5.  GET NEXT LOCATION TO TEST
MEMOK INX
*   6.  IF NO MORE, STOP
 CPX    &LAST    ; COMPARE TO LAST ADDRESS
 BNE    NEXT     ;IF NOT LAST ADDRESS
*   7.  STOP (WAIT FOR INTERRUPT)
 WAI
 END             ; OF PROGRAM
 FIN             ; OF RUN
