C    SPLINE.F4
        SUBROUTINE SPL2D1(NBRX,X,NBRY,Y,F,FX,FY,FXY,
     1  IDM,IBD,T1,T2,T3)
C      TWO DIMENSIONAL BI-CUBIC SPLINE INTERPOLATION - COEFFICIENT CALC.
C NBRX = THE NUMBER OF VALUES IN THE X-TABLE.
C X    = A VECTOR OF X'S
C NBRY = THE NUMBER OF VALUES IN THE Y-TABLE.
C Y    = A VECTOR OF Y'S
C F    = A 2-D ARRAY OF FUNCTION VALUES SUPPLIED
C     BY THE USER.
C FX   = A 2-D ARRAY FOR SECOND DERIVATIVES OF THE
C     FUNCTION.  THE FIRST AND LAST COLUMN MUST
C     BE FILLED WITH BOUNDARY CONDITIONS IN THE X-DIRECTION.
C     BY THE USER AS SPECIFIED IN IBD(1) AND IBD(2).
C FY   = A 2-D ARRAY FOR THE SECOND DERIVATIVES OF THE
C     FUNCTION.  THE FIRST AND LAST ROW MUST BE
C     FILLED WITH BOUNDARY CONDITIONS IN THE Y-DIRECTION
C     BY THE USER AS SPECIFIED IN IBD(2) AND IBD(3)
C FXY  =A 2-D ARRAY FOR 4TH DERIVATIVES CORNER TO
C     BE SUPPLIED BY THE USER.
C IDM  = THE MAXIMUM 1ST DIMENSION OF F, FX
C     FY, FXY
C IBD  = A VECTOR OF LENGTH 6 IN WHICH
C     TYPES OF BOUNDARY CONDITIONS ARE SPECIFIED.
C T1, T2, T3= 3 BLOCKS OF N TEMPORARY STORAGE.
C
        DIMENSION IBD(1),F(IDM,NBRX),FX(IDM,NBRX),FY(IDM,NBRX),
     1  FXY(IDM,NBRX),ILOC(2)
        DIMENSION X(1),Y(1),T1(1),T2(1),T3(1)
        DATA ILOC / 1, 1 /
C
        DO 100 I = 1, NBRY
        CALL SPL1D1(NBRX,X,F(I,1),FX(I,1),IBD(1),IDM,T1,T2,T3)
  100   CONTINUE
        DO 110 J = 1, NBRX
  110   CALL SPL1D1(NBRY,Y,F(1,J),FY(1,J),IBD(3),1,T1,T2,T3)
        CALL SPL1D1(NBRY,Y,FX(1,1),FXY(1,1),IBD(5),1,T1,T2,T3)
        CALL SPL1D1(NBRY,Y,FX(1,NBRX),FXY(1,NBRX),IBD(5),1,T1,T2,T3)
        DO 120 I = 1, NBRY
  120   CALL SPL1D1(NBRX,X,FY(I,1),FXY(I,1),ILOC,IDM,T1,T2,T3)
        RETURN
        END
        FUNCTION SPL2D2(XB,YB,NBRX,X,NBRY,Y,F,FX,FY,FXY,
     1  MAXY,IXD,IYD)
C
C      SPLINE INTERPOLATION FUNCTION TO BE USED ONLY WITH SPL2D1
C XB   VALUE OF INDEPEND. VARIABLE X AT WHICH INTERPOLATION DESIRED
C YB   VALUE OF INDEPEND. VARIABLE Y AT WHICH INTERPOLATION DESIRED
C NBRX NUMBER OF VALUES AT WHICH INDEPENDENT VARIABLE X IS TABULATED
C X    TABLE OF INDEPENDENT VARIABLE X, NBRX LONG
C NBRY NUMBER OF VALUES AT WHICH INDEPENDENT VARIABLE Y IS TABULATED
C Y    TABLE OF INDEPENDENT VARIABLE Y, NBRY LONG
C F,FX,FY,FXY ARE 2-D TABLE OF FUNCTION VALUES, 2ND
C     PARTIALS WITH RESPECT TO X, AND Y AND 4TH PARTIALS
C     TWICE X TWICE Y. MAX Y IS THE FIRST DIMENSION
C     OF EACH ARRAY.
C MAXY MAXIMUM FIRST DIMENSION ASSIGNED TO F ETC.
C
        DIMENSION F(MAXY,NBRX), FX(MAXY,NBRX), FY(MAXY,NBRX),
     1  FXY(MAXY,NBRY), T(4), X(2), Y(2)
        COMMON /SPL2D4/ P(5,4), U(4), CF(2,2), CFX(2,2),
     1  CFY(2,2), CFXY(2,2)
C
        DATA P /0.0, 0.0, 0.0, -1.0, 0.0,
     1          0.0, 0.0, 0.0, 1.0, 0.0,
     2          0.0, 0.0, 0.0, -1.0, 0.0,
     3          0.0, 0.0, 0.0, 1.0, 0.0  /
C
C LOCATE THE I,J RECTANGLE.
        T(1) = XB
        T(3) = YB
        J = 1
        IF(T(1) .LE. X(1)) GO TO 100
        J = NBRX - 1
        IF(T(1) .GE. X(NBRX)) GO TO 100
        CALL SEARCH(T(1),X,NBRX,J,MISS)
  100   I = 1
        IF(T(3) .LE. Y(1) ) GO TO 110
        I = NBRY - 1
        IF(T(3) .GE. Y(NBRY)) GO TO 110
        CALL SEARCH(T(3),Y,NBRY,I,MISS)
  110   C = .166666666666
        U(1) = X(J)
        U(3) = Y(I)
        D = .333333333333
        U(2) = X(J+1)-U(1)
        U(4) = Y(I+1)-U(3)
C
C       EVALUATE THE BASIC POLYNOMIALS
        DO 120 I1 = 1, 3, 2
        P(3,I1+1) = T(I1)-U(I1)
        P(3,I1) = U(I1+1)-P(3,I1+1)
        AL2 = P(3,I1+1)**2
        BL2 = P(3,I1)**2
        XL2 = U(I1+1)**2
        BRA = (AL2-XL2)*C
        BRB = (BL2-XL2)*C
        P(1,I1+1) = BRA*P(3,I1+1)
        P(1,I1) = BRB*P(3,I1)
        P(2,I1+1) = BRA+AL2*D
  120   P(2,I1) = -BRB-BL2*D
        DO 130 I1 = 1, 2
        I2 = I+I1-1
        DO 130 J1 = 1, 2
        J2 = J+J1-1
        CF(I1,J1) = F(I2,J2)
        CFX(I1,J1) = FX(I2,J2)
        CFY(I1,J1) = FY(I2,J2)
  130   CFXY(I1,J1) = FXY(I2,J2)
        IX = IXD+1
        IY = IYD+1
        DO 140 I1 = 1, 4
  140   T(I1) = 0.
        DO 150 I1 = 1,2
        DO 150 J1 = 1, 2
        T(I1) = T(I1)+CFXY(I1,J1)*P(IX,J1)+CFY(I1,J1)*P(IX+2,J1)
  150   T(I1+2) = T(I1+2)+CFX(I1,J1)*P(IX,J1)+CF(I1,J1)*P(IX+2,J1)
        SPL2D2 = (T(1)*P(IY, 3) + T(2)*P(IY, 4) + T(3)*P(IY+2, 3)
     1  + T(4)*P(IY+2, 4) )/(U(2)*U(4))
        RETURN
        END
        SUBROUTINE SPL1D1(N,X,F,W,IOP,IJ,A,B,C)
C    SPLINE INTERPOLATION - COEFFICIENT EVALUATION
C     WHERE N= NUMBER OF POINTS IN THE INTERPOLATION
C           X= ORIGIN OF TABLE OF INDEPENDENT VARIABLE
C           F= ORIGIN OF TABLE OF DEPENDENT VARIABLE
C           W= AN ARRAY OF DIMENSION N WHICH CONTAINS THE CALCULATED
C              SECOND DERIVATIVES UPON RETURN
C           IOP= AN ARRAY OF DIMENSION 2 WHICH CONTAINS COMBINATIONS OF
C                THE INTEGERS 1 THRU 5 USED TO SPECIFY THE BOUNDARY
C                CONDITIONS
C           IJ= SPACING IN THE F AND W TABLES
C           A,B,C= ARRAYS OF DIMENSION N USED FOR TEMPORARY STORAGE
C
C
        DIMENSION IOP(2),X(2),F(2),W(2),A(2),B(2),C(2)
    1   FORMAT (' SPL1D1:  N LESS THAN 4, RESULTS INCORRECT' /)
C
        K = N-1
        A(2) = -(X(2)-X(1))/6.
        B(2) = (X(3)-X(1))/3.
        W(IJ+1) = (F(2*IJ+1)-F(IJ+1))/(X(3)-X(2))-(F(IJ+1)-F(1))
     1  /(X(2)-X(1))
        IF(N .EQ. 3) GO TO 110
        DO 100 I = 3, K
        M = (I-1)*IJ+1
        J1 = M+IJ
        J2 = M-IJ
        CON = (X(I+1)-X(I-1))/3.
        DON = (X(I)-X(I-1))/6.
        B(I) = CON-(DON**2)/B(I-1)
        E = (F(J1)-F(M))/(X(I+1)-X(I))-(F(M)-F(J2))/
     1  (X(I)-X(I-1))
        W(M) = E-(DON*W(J2))/B(I-1)
  100   A(I) = -(DON*A(I-1))/B(I-1)
C
  110   K1 = (N-2)*IJ+1
        C(N-1) = -((X(N)-X(N-1))/6.)/B(N-1)
        W(K1) = W(K1)/B(N-1)
        A(N-1) = A(N-1)/B(N-1)
        K2 = K-1
        IF(N .EQ. 3) GO TO 130
        DO 120 I = 2, K2
        J = N-I
        CON = (X(J+1)-X(J))/6.
        A(J) = (A(J)-CON*A(J+1))/B(J)
        C(J) = -(CON*C(J+1))/B(J)
        K3 = (J-1)*IJ+1
        M = K3+IJ
  120   W(K3) = (W(K3)-CON*W(M))/B(J)
C
  130   K4 = (N-1)*IJ+1
        IF(IOP(1) .EQ. 5) GO TO 160
  140   C1 = W(1)
        IF(IOP(2) .EQ. 5) GO TO 170
  150   C2 = W(K4)
        GO TO 180
  160   IF(N .LT. 4) GO TO 500
        A1 = X(1)-X(2)
        A2 = X(1)-X(3)
        A3 = X(1)-X(4)
        A4 = X(2)-X(3)
        A5 = X(2)-X(4)
        A6 = X(3)-X(4)
        W(1) = F(1)*(1./A1+1./A2+1./A3)-A2*A3*F(IJ+1)/(A1*A4*A5)+
     1  A1*A3*F(2*IJ+1)/(A2*A4*A6 )-A1*A2*F(3*IJ+1)/(A3*A5*A6)
        GO TO 140
  170   IF(N .LT. 4) GO TO 500
        B1 = X(N)-X(N-3)
        B2 = X(N)-X(N-2)
        B3 = X(N)-X(N-1)
        B4 = X(N-1)-X(N-3)
        B5 = X(N-1)-X(N-2)
        B6 = X(N-2)-X(N-3)
        L1 = K4-IJ
        L2 = L1-IJ
        L3 = L2-IJ
        W(K4) = -B2*B3*F(L3)/(B6*B4*B1)+B1*B3*F(L2)/(B6*B5*B2)
     1  -B1*B2*F(L1)/(B4*B5*B3)+F(K4)*(1./B1+1./B2+1./B3)
        GO TO 150
C
C
  180   DO 410 I = 1,K
        M = (I-1)*IJ+1
        MK = IOP(1)
C
C      PROCESS (1) EDGE OF BOUNDARY
        GO TO (200, 210, 230, 250, 230), MK
C      F''(X1) = W(1)
  200   IF(I .NE. 1) GO TO 260
        A(1) = -1.
        C(1) = 0.
        GO TO 300
C      F''(X1) = W(1) * F''(X2)
  210   IF(I .NE. 1) GO TO 220
        W(1) = 0.
        A(1) = -1.
        C(1) = 0.
        GO TO 300
  220   IF(I .GT. 2) GO TO 260
        BOB = -C1
        GO TO 300
C      F'(X1) = W(1)
C      OR.  CALC F'(1)
  230   IF(I .NE. 1) GO TO 240
        A(1) = -(X(2)-X(1))/3.
        C(1) = 0.
        W(1) = -C1+(F(IJ+1)-F(1))/(X(2)-X(1))
        GO TO 300
  240   IF(I .GT. 2) GO TO 260
        BOB = (X(2)-X(1))/6.
        GO TO 300
C      F''(X1) = F''(XN) (PERIODIC)
  250   IF(I .NE. 1) GO TO 260
        A(1) = -1.
        C(1) = 1.
        W(1) = 0.
        GO TO 300
  260   BOB = 0.
C
C       SECOND BOUNDARY CONDITION
  300   ML = IOP(2)
        GO TO (310, 320, 340, 360, 340), ML
  310   IF(I .NE. 1) GO TO 390
        A(N) = 0.
        C(N) = -1.
        GO TO 400
  320   IF(I .NE. 1) GO TO 330
        W(K4) = 0.
        A(N) = 0.
        C(N) = -1.
        GO TO 400
  330   IF(I .NE. K) GO TO 390
        BILL = -C2
        GO TO 400
  340   IF(I .NE. 1) GO TO 350
        A(N) = 0.
        C(N) = (X(N-1)-X(N))/3.
        W(K4) = C2-(F(K4)-F(K1))/(X(N)-X(N-1))
        GO TO 400
  350   IF(I .NE. K) GO TO 390
        BILL = (X(N)-X(N-1))/6.
        GO TO 400
  360   IF(I .NE. 1) GO TO 370
        A(N) = 0.
        C(N) = (X(N-1)+X(1)-X(N)-X(2))/3.
        W(K4) = (F(IJ+1)-F(1))/(X(2)-X(1))-(F(K4)-F(K1))/(X(N)-X(N-1))
        GO TO 400
  370   IF(I .NE. 2) GO TO 380
        BILL = (X(2)-X(1))/6.
        GO TO 400
  380   IF(I .NE. K) GO TO 390
        BILL = (X(N)-X(N-1))/6.
        GO TO 400
  390   BILL = 0.
C
  400   IF(I .EQ. 1) GO TO 410
        W(1) = W(1)-BOB*W(M)
        W(K4) = W(K4)-BILL*W(M)
        A(1) = A(1)-BOB*A(I)
        A(N) = A(N)-BILL*A(I)
        C(1) = C(1)-BOB*C(I)
        C(N) = C(N)-BILL*C(I)
  410   CONTINUE
C
        CON = A(1)*C(N)-C(1)*A(N)
        D1 = -W(1)
        D2 = -W(K4)
        W(1) = (D1*C(N)-C(1)*D2)/CON
        W(K4) = (A(1)*D2-D1*A(N))/CON
        DO 420 I = 2, K
        M = (I-1)*IJ+1
  420   W(M) = W(M)+A(I)*W(1)+C(I)*W(K4)
        RETURN
C
C       HERE IF INSUFFICIENT POINTS...TYPE ERROR AND EXIT
  500   TYPE 1
        RETURN
        END
        SUBROUTINE SPL1D2(N,X,F,W,IJ,Y,TAB)
C      SPLINE INTERPOLATION - FUNCTION EVALUATION
C     WHERE N= NUMBER OF POINTS IN THE INTERPOLATION
C           X= ORIGIN OF TABLE OF THE INDEPENDENT VARIABLE
C           F= ORIGIN OF TABLE OF THE DEPENDENT VARIABLE
C           W= ORIGIN OF TABLE OF SECOND DERIVATIVES AS CALCULATED BY
C              SPL1D1
C           IJ= SPACING IN THE TABLES F AND W
C           Y= THE POINT AT WHICH INTERPOLATION IS DESIRED
C           TAB= AN ARRAY OF DIMENSION 3 WHICH CONTAINS THE FUNCTION
C                VALUE, FIRST DERIVATIVE, AND SECOND DERIVATIVE AT Y
C
        DIMENSION X(3),F(3),W(3),TAB(3)
C
C     LOCATE Y IN THE X TABLE
C
        I = 1
        IF(Y .LE. X(1) ) GO TO 100
        I = N - 1
        IF(Y .GE. X(N) ) GO TO 100
        CALL SEARCH(Y,X,N,I,MFLAG)
  100   MI = (I-1)*IJ+1
        K1 = MI+IJ
        FLK = X(I+1)-X(I)
C
C     CALCULATE F(Y)
C
        A = (W(MI)*(X(I+1)-Y)**3+W(K1)*(Y-X(I))**3)/(6.*FLK)
        B = (F(K1)/FLK-W(K1)*FLK/6.)*(Y-X(I))
        C = (F(MI)/FLK-FLK*W(MI)/6.)*(X(I+1)-Y)
        TAB(1) = A+B+C
C
C     CALCULATE THE FIRST DERIVATIVE AT Y
C
        A = (W(K1)*(Y-X(I))**2-W(MI)*(X(I+1)-Y)**2)/(2.*FLK)
        B = (F(K1)-F(MI))/FLK
        C = FLK*(W(MI)-W(K1))/6.
        TAB(2) = A+B+C
C
C     CALCULATE THE SECOND DERIVATIVE AT Y
C
        TAB(3) = (W(MI)*(X(I+1)-Y)+W(K1)*(Y-X(I)))/FLK
        RETURN
        END
        SUBROUTINE SEARCH(XBAR,X,N,I,MFLAG)
C      RAPID SEARCH OF A FLOATING POINT TABLE
C
        DIMENSION X(N)
        LOGICAL MFLAG
        DATA B/.6931471800/
    1   FORMAT(' SEARCH:  XBAR IS OUTSIDE RANGE OF TABLE.'/)
    2   FORMAT(' SEARCH:  N IS LESS THAN 2.'/)
    3   FORMAT(' SEARCH:  TABLE IS NOT IN INCREASING ORDER'/)
C
        IF (N .LT. 2) GO TO 160
        IF(X(1) .GT. X(2) ) GO TO 140
        IF (XBAR .LT. X(1) .OR. XBAR .GT. X(N) )GO TO 150
        MFLAG = .FALSE.
        M = INT((ALOG(FLOAT(N)))/B)
        I = 2**M
        K = I
  100   K = K/2
        IF (XBAR .EQ. X(I) ) GO TO 130
        IF (XBAR .GT. X(I) .AND. XBAR .LT. X(I+1) ) RETURN
        IF (XBAR .GT. X(I) ) GO TO 110
        I = I-K
        GO TO 100
  110   I = I+K
  120   IF (I .LE. N) GO TO 100
        I = I-1
        GO TO 120
  130   MFLAG = .TRUE.
        RETURN
  140   TYPE 3
        RETURN
  150   TYPE 1
        RETURN
  160   TYPE 2
        RETURN
        END
   