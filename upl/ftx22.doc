


                          SYSTEM 1022 UPDATE

                             Version 112



Version 112 of the software reflects the following new features:


NEW INTERACTIVE COMMANDS


                                 DUMP

     The new DUMP command is a utility which creates a new  data  base
     file  from  the  selected records of an existing data set.  It is
     useful as an alternative to "dump and reload", or as a  means  of
     creating data base subsets which may be optionally sorted.


                                APPEND

     APPEND is a utility for adding records, using an algorithm  which
     is extremely efficient for large batches of new records.


                                VALUES

     The  new  VALUES  command  prints  information  about  the  value
     distribution of a keyed attribute.


                               OPTIMIZE

     This new command provides a means of reformatting an  attribute's
     key  tables to improve the speed of retrieval for that attribute.
     Users who were previously using the KEY command for this  purpose
     will   find  that  the  OPTIMIZE  command  is  considerably  less
     expensive in terms  of  computer  resources  and  time  required.
     However,  the  OPTIMIZE  command is not as general-purpose as the
     KEY command;   it  reformats  existing  key  tables  for  optimal
     retrieval,  but  will not build key tables from scratch or repair
     damaged key tables like KEY.


                               SORT KEY

     This new command performs a very fast sort of selected data  base
     records based on a keyed attribute as the sort key.


     More detailed technical descriptions of the new commands  may  be
     found starting at page 3.
                                                                Page 2


DATA LOADING PROGRAM
     The existing data loading module has been improved in efficiency.
     In  addition,  the LOAD command is now compatible with other 1022
     commands in that it may be invoked from a command file or from  a
     host language DBEXEC call, and return like any other command.

     In order  to  facilitate  "canned"  loading  routines,  the  LOAD
     command now has a NOMSG option to suppress unwanted typeout.

     A LOAD may now be forced to produce a data base with no  records,
     to  which  records  may  be  ADDed  or APPENDed.  This is done by
     providing either an empty or non-existent input file.


SIMULTANEOUS ACCESS
     1022 user's may now have several  jobs  updating  the  same  data
     base.   See  below  under  the  heading  "Multiple  Access" for a
     detailed set of guidelines on this feature.


IMPROVED SAVE COMMAND
     The sorted order of a set of selected records is now preserved by
     the  SAVE  command,  and  restored automatically by the FIND FILE
     command.


DISK I/O
     A new disk reading algoritm  has  been  employed  throughout  the
     System  which  will  decrease  the  clock  time  needed  for many
     commands, especially SEARCH, DUMP, and PRINT commands.


SYSREPMODE AND SYSREPSYNC
     Two new System control variables now afford  1022  users  greater
     control over paginated output formatting.


HOST LANGUAGE IMPROVEMENTS
     A new subroutine, DBADDR, eliminates the need to specify all  the
     attribute  names  to add new records;  instead the data is passed
     via an array of attribute values.

     Another new subroutine, DBSYSV, now allows a program to set or to
     retrieve the value of any 1022 System Variable.  (See below.)

     The subroutine, DBINFO now returns ARRAY(10) equal to  +1  if  an
     attribute is KEYED-INACTIVE.

     The  DBVAL  and   DBGET   subroutines   have   been   streamlined
     significantly.  This will reflect in a savings of CPU time.
                                                                Page 3


DUMP  Command

     DUMP [TO] file-descriptor [SORT[ED] [BY] ...  ]


The DUMP command is used to write out records from a data set  into  a
new  data  base  file.  The records may optionally be written out in a
specified sorted order.

In the DUMP command, the output file-descriptor  specifies  where  and
under  what  name the new data base file will be created.  If the file
extension is omitted, then "DMS" will be assumed.  Any  existing  file
of  the same name will be deleted.  The optional sort specification in
the DUMP command takes the same form as a  stand-alone  SORT  command,
including the optional USING and CORE clauses (see SORT command).

A DUMP command takes only those records which are  currently  selected
and  writes them out as a new data base.  This new data base will have
the same structure as the  original  with  the  exception  that  KEYED
attributes  will  be  inactive;   and may be re-keyed with a "KEY ALL"
command (see also KEY command, and KEYED-INACTIVE status).


Examples:

     DUMP TO DSKD:NEWDB SORTED BY CITY
     DUMP TO FRED[100,103]
     DUMP TRANS.MAY SORTED CORE 10 TRANS_DATE
     DUMP STOCK.DMS SORT USING DSKC MAJOR_ASSY MINOR_ASSY
                                                                Page 4


APPEND  Command

     APPEND DMI file-descriptor [NOMSG] [LRECL ...] [FORMFEED ...]

The APPEND command provides an efficient means of adding large batches
of records to a data set.  The new records are read from an input data
file whose format is the same as the raw data file used in LOADing the
data base (see also LOAD command).

The APPEND command is a  self-contained  module;   in  particular,  no
prior ALLOCATE or SET BUFFER command is necessary or advised.

Following the input file-descriptor in the APPEND  command,  the  user
may specify the following options:

NOMSG  -  if given, this option suppresses all non-error  messages  to
the user's terminal during the append operation.

LRECL  -
FORMFEED  -these optional clauses control aspects of  the  input  file
format.  They are decribed in the LOADING SECTION of the manual.


Examples:

     APPEND DMI ADD.DMI
     APPEND DMI NEWREC[10,3] NOMSG LRECL V
     APPEND DMI DSKB:STOCK.SEP FORMFEED IGNORE
                                                                Page 5


VALUES  Command

VALUES [ON file] attribute [VALUES] [COUNT] [SYSID]

Where:
     file = optional output file-descriptor
     attribute = the name of an attribute which is KEYED

This prints information  about  the  value  distribution  of  a  keyed
attribute  according  to  the  included  options.   Only data from the
currently selected records is displayed.  The data always  appears  in
ascending sorted order by the values which the attribute attains.


The following keywords control the content of the listing:

     VALUES - This generates a list of the different  values  for  the
             attribute over the selected set of records.

     COUNT - This prints  a  count,  for  each  unique  value  of  the
             attribute, showing how many records have that value.

     SYSID - Produces a list of  SYSIDS  for  the  selected  group  of
             records.   If the records are then retrieved in the order
             listed, they will be sorted by the named attribute.

             No actual sorting is done, since data  already  generated
             by  the  keying  is used.  Therefore, the output from the
             SYSID option may be read by a Fortran or  Cobol  program,
             and   the  records  retrieved  in  sorted  order  without
             spending extra computer resources on a sort command.

The above options may be used independently or in any combination.  If
none  of the optional keywords appear in the command, then System 1022
will provide the VALUES and COUNT options by default.

Any of the keyword options may be abbreviated to 3 characters.
                                                                Page 6


Examples:

*FIND AGE BETWEEN 20 AND 24
37 recs found
*VALUES AGE

   20 (13)
   21 (4)
   22 (8)
   23 (3)
   24 (9)

This indicates 13 records with AGE equal to 20,  4  records  with  AGE
equal to 21, etc.


*FIND AGE BETWEEN 22 AND 23
11 recs found
*VALUES AGE VALUES SYSID

   22     [VALUE]
    12     [SYSIDS]
    29     .
    134    .
    142    .
    148
    170
    174
    203
   23     [VALUE]
    37     [SYSIDS]
    125
    211
                                                                Page 7


OPTIMIZE  Command

     OPTIMIZE [NOMSG] attribute-list


The OPTIMIZE command does a quick reformatting of the  key  tables  to
produce  faster retrievals.  This reformatting is useful when response
to the FIND command degrades due to numerous changes,  additions,  and
deletions  of  records.  OPTIMIZE is especially recommended for a data
base which has had many records added since it was LOADed.   The  LOAD
commmand,  when  it  first  creates  the  key tables, formats them for
optimal retrieval speed based on the number of records  first  loaded.
When  the  number  of  records then doubles or triples, the key tables
will have  degraded  significantly,  and  the  user  should  issue  an
OPTIMIZE command on all keyed attributes.

In the general form of the command shown above, NOMSG is  an  optional
keyword  which  may  be included to suppress non-error messages to the
terminal during the reformatting operation.

Each entry in the attribute-list is of the form:

     [NULL n] attribute-name  or  ALL

NULL n   -   specifies a percentage of the total key table space which
will  remain  empty  to  hold  new  values  on  subsequent changes and
additions.  Usage is the same as in the KEY command.  If not used, the
NULL factor default is 6.

attribute-name   -  this is the attribute's name or abbreviation.   If
the keyword ALL appears in place of the attribute name, then it refers
to all keyed attributes;  except those attributes appearing before  it
in the attribute-list.


The OPTIMIZE command is unlike the KEY command  in  several  respects.
First,  the  OPTIMIZE command may not be used to rebuild damaged keys;
it can only work on attributes which already have  sound  key  tables.
For  the  same  reason, the OPTIMIZE command will not key an attribute
which is currently unkeyed or KEYED-INACTIVE.   Also,  OPTIMIZE  takes
significantly less time than KEY.


Examples:

     OPTIMIZE AGE FIRST_NAME
     OPTIMIZE NOMSG SOCSECNUM
     OPTIMIZE NULL 20 ACCT_NO, NULL 50 ALL
                                                                Page 8


SORT KEY  Command

     SORT KEY attribute

where:
     attribute = the name of an attribute which is KEYED


SORT KEY is a special form of the 1022 sort  function  which  provides
quick  sorting  based  on a single keyed attribute field.  The records
are always sorted in ascending order, and the CORE and  USING  options
are  not  permitted.  Only one sort field is allowed, and it must be a
KEYED attribute.  Generality is sacrificed  here  in  exchange  for  a
sizeable  reduction  in  computer  time for large sorts.  However, the
regular SORT command is generally more economical if fewer than 5%  of
the records in the data base are being sorted.


Examples:

     SORT KEY ACCT_NO
     SORT KEY INVOICE_DATE
     SORT KEY SOCSECNUM
                                                                Page 9


MULTIPLE ACCESS

Here are the current rules for multiple access  to  data  bases  using
System  1022.   Any  number  of  users  can use the retrieve and print
capabilities of the System at the same time with no  problems.   Also,
any one user can update the data base at the same time as retrieval is
done.  Occasionally a retrieval command will result in an error when a
conflict  with the updating process occurs.  This problem will be soon
solved, but there is no danger of data damage.  The same command tried
again  should  work.  Multiple updating is feasable as well;  with the
following considerations:

   If one user has set UPDATE ON, then no other user  may  update  the
   file until the first user sets UPDATE OFF or exits.

   The DEC-SYSTEM-10 monitor does  not  permit  multiple  simultaneous
   updating  of a single file.  Therefore, System 1022 will relinquish
   update priveleges to the data base file at the completion  of  each
   command.    If   another  user  requests  an  update  before  these
   priveleges are relinquished, then he will recieve the "Cannot  Open
   Data  Base  For  Writing" error message.  Alternatively, a user may
   request that the System silently wait and then retry to gain update
   control   before   issuing  an  error  message.   This  process  is
   controlled at the user's option by  setting  the  system  variable,
   SYSNRETRY,  to  the  number of retries at updating desired.  System
   1022 will wait 1/5 seconds between each retry.  For example, if the
   command
        LET SYSNRETRY 20
   is given, then System 1022 will make 20 attempts (spaced 1/5 second
   apart)  at entering the file for writing before generating an error
   message.
                                                               Page 10


DBSYSV    Set or Get 1022 System Variable


     CALL DBSYSV(SYSVN,SETF,IVAR)

This routine provides the means to get or set the value  of  any  1022
"System Variable" from a Fortran program.

The first argument, SYSVN contains an integer value  corresponding  to
one of the 1022 System Variables listed in the table below.

The second argument, SETF, is a flag which tells the DBSYSV subroutine
whether  to set or retrieve the value of the System Variable.  If SETF
is zero, the current value of the specified 1022 variable is  returned
in  the user's argument, IVAR.  If SETF is non-zero, the 1022 variable
is set to the value of IVAR.


                    Table of 1022 System Variables

     Name      Number
      --         --
     SYSDATE     1
     SYSPAGE     2
     SYSCASE     3
     SYSLINE     4
     SYSRECNO    5
     SYSTIME     6
     SYSEXP      7
     SYSID       8
     SYSNREC     9
     SYSREP1     10
     SYSREP2     11
     SYSREP3     12
     SYSREPMODE  13
     SYSREPSYNC  14
     SYSNRETRY   15


Examples:

          CALL DBSYSV(15,1,10)
     This sets SYSNRETRY to a value of 10.

          CALL DBSYSV(1,0,IDAT)
     This puts today's date (in 1022 encoded format) into the  Fortran
     program's variable, IDAT.

          CALL DBSYSV(9,0,NRECS)
     This call returns the number of records selected  by  the  latest
     find or search request.  (DBNREC would return the same value.)
  