
begin "TEST"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)MFDSCN.REQ" source!file;
require "(SAILIB)PRICHK.REQ" source!file;
require "CMDSCN.REQ" source!file;
require "CVFNAM.REQ" source!file;
require "VMCOPY.REQ" source!file;

Own Integer F.File, F.Ext, F.Ppn, F.Prt, F.FMask, F.EMask, F.PMask;
Own Integer T.File, T.Ext, T.Ppn, T.Prt, T.FMask, T.EMask, T.PMask;
Own Integer Last.Fppn, Last.Tppn, Files;
Own Integer InBracket, ReverseIt, Interactive;
Own Integer SemiC, White, Brk;
Own Integer Ochan, Base, Eol, MyPPN;

Own String  FileSpec, F.User, T.User;

Preset!with ['5000] 0;
Own Integer Array VM[ 0:'4777 ];
Own Integer Array FNew[ 0:'41 ];


Simple Procedure InitBreaks;
begin
    setbreak(SemiC_ getbreak,";",Null,"INS");
    setbreak(White_ getbreak," "&'11,Null,"XNR");
end;
require InitBreaks Initialization;


Simple Procedure InitStuff;
begin
    MyPPN_ Calli( !Xwd(-1,!GTPPN), calli!GETTAB );
    MFDset( '17, 0,0, 0 );
    Base_ ( Location( VM[0] ) + '777 ) lsh -9;
end;
require InitStuff Initialization;


string procedure CvNAME( integer AUN );
begin
    string Name;
    integer CvnChan,CvnEof;
    integer array Look[ 0 : !RBUNM+1 ];

    Look[ !RBCNT ]_ !RBUNM+1;		! PPN->USER;
    Look[ !RBPPN ]_ !Xwd( 1,1 );	! (UFD)  ;
    Look[ !RBNAM ]_ AUN;		! [user] ;
    Look[ !RBEXT ]_ CVSIX("UFD   ");	! .UFD   ;
    Open(CvnChan_getchan,"DSK",'17,0,0, 0,0, CvnEof_-1);
    If not ( CvnEof )
     then begin
	Chnior(CvnChan,Look[!RBCNT],!CHLK);
	CvnEof_ not ( !SKIP! );
	Release(CvnChan);
     end;
    If ( CvnEof )
     then Return( Cvos(!lh(Aun))&","&Cvos(!rh(Aun)) )
     else Return( Cv6str(Look[!RBUNM])&Cv6str(Look[!RBUNM+1]) );
end;


Simple String Procedure CvXppn( Integer Aun );
Return( "["&Cvos(!lh(Aun))&","&Cvos(!rh(Aun))&"]" );

Simple Integer Procedure Aply( Integer Fx, Tx, Tm );
Return( (Fx land Tm) lor (Tx land lnot Tm) );

Boolean Procedure WantFile( Reference Integer Filename, Extension );
begin
    Return( (Extension neq CvSix("TMP")) or (F.Ext = CvSix("TMP")) );
end;


Procedure FileProc( Reference Integer Chan, Count, Brk, FileEof;
		    Integer Array LKB );

If ( 0 = ( LKB[!RBLIC] land '001000000000 ) ) or
   ( F.Ext = CvSix("TMP") )
 then begin "we have something"

    Files_ Files + 1;
    If ( F.Ppn neq MyPpn )
     then begin
	If ( Last.Fppn neq F.Ppn )
	 then F.User_ CvName( Last.Fppn_ F.Ppn );
	Print( "(", F.User, ")" );
     end;

    Print( Cv6str( LKB[!RBNAM] ), ".",
	   Cv6str( LKB[!RBEXT] land (-1 lsh 18) ),
	   " ==> "  );

    ArrTran( FNew, LKB );
    FNew[ !RBPPN ]_ Aply(LKB[!RBPPN], T.Ppn, T.PMask);
    FNew[ !RBNAM ]_ Aply(LKB[!RBNAM], T.File, T.FMask);
    FNew[ !RBEXT ]_ Aply(LKB[!RBEXT] land(-1 lsh 18), T.Ext, T.EMask)
				lor !rh( LKB[!RBEXT] );
    If ( T.Prt neq 0 )
     then FNew[!RBPRV]_ (LKB[!RBPRV] land '777777777) lor (T.Prt lsh 27);

    If ( FNew[ !RBPPN ] neq MyPpn )
     then begin
	If ( Last.Tppn neq FNew[ !RBPPN ] )
	 then T.User_ CvName( Last.Tppn_ FNew[ !RBPPN ] );
	Print( "(", T.User, ")" );
     end;

    Print( Cv6str(FNew[!RBNAM]), ".", Cv6str(FNew[!RBEXT] land (-1 lsh 18)) );

    If ( T.Prt neq 0 )
     then Print( "<", ("00"&Cvos(T.Prt))[Inf-2 to Inf], ">" );

    Open( Ochan_getchan, "DSK", (LKB[!RBPRV] lsh -23) land '17, 0,0, 0,0, 0);
    Chnior( Ochan, FNew[ !RBCNT ], !chENT );
    VMCopy( Ochan,Chan, LKB[!RBSIZ], Base, 4, 0, 0, True );
    Close( Ochan ); Release( Ochan );

    Print( "  ", PriChk( VMXSUM ) );
    Print( Crlf );

 end "we have something";


FileSpec_ ReScan;
Eol_ !Skip!;

If ( Length( FileSpec ) )
 then begin
    Scan( FileSpec, SemiC, Brk );
    Scan( FileSpec, White, Brk );
 end;

Interactive_ ( Brk = 0 );

While ( true )
 do begin "prompt user for stuff"

    ReverseIt_ False;

    If ( Interactive )
     then begin
	Print( "Map file: " );
	FileSpec_ Inchwl;
	Eol_ !Skip!;
     end;

    If Length( FileSpec )
     then begin "something to do"
	Boolean At;

	CvFNam(FileSpec, F.File,F.Ext,F.Ppn,F.FMask,F.EMask,F.PMask,F.Prt,At);
	If ( 0 = (F.Ppn lor F.PMask) )
	 then F.Ppn_ MyPpn;
	If ( 0 = ( F.File lor F.FMask ) )
	 then begin
	    T.File_ CvSix("######");
	    T.FMask_ -1;
	 end;
	If ( 0 = ( F.Ext lor F.EMask ) )
	 then begin
	    T.Ext_ CvSix("###");
	    T.EMask_ (-1 lsh 18);
	 end;

	Scan( FileSpec, White, Brk );

	If ( Length( FileSpec ) )
	 then begin
	    If ( Brk = "=" or Brk = "_" )
	     then ReverseIt_ True;
	    If ( Brk = "=" or Brk = "_" or Brk = "," )
	     then Brk_ Lop( FileSpec );
	 end;

	Scan( FileSpec, White, Brk );

	If ( Brk = 0 )
	 then begin
	    Print( If (Eol = '33)
		    then '10&'40&'10
		    else "",
		   If ( ReverseIt )
		    then " (from file) "
		    else " (to file) "   );
	    FileSpec_ Inchwl;
	    Eol_ !Skip!;
	 end;

	CvFNam(FileSpec, T.File,T.Ext,T.Ppn,T.FMask,T.EMask,T.PMask,T.Prt,At);

	If ( 0 = ( T.Ppn lor T.PMask ) )
	 then T.Ppn_ MyPpn;
	If ( 0 = ( T.File lor T.FMask ) )
	 then begin
	    T.File_ CvSix("######");
	    T.FMask_ -1;
	 end;
	If ( 0 = ( T.Ext lor T.EMask ) )
	 then begin
	    T.Ext_ CvSix("###");
	    T.EMask_ (-1 lsh 18);
	 end;

	Scan( FileSpec, White, Brk );

	If ( Length( FileSpec ) )
	 then begin "junk"

	    Print( "?Junk at end of command line - command aborted."&Crlf );
	    Print( "? ",FileSpec," }"&Crlf );

	 end "junk"
	 else begin "no junk"

	    If ( ReverseIt )
	     then begin
		F.File SWAP T.File;	F.FMask SWAP T.FMask;
		F.Ext  SWAP T.Ext;	F.EMask SWAP T.EMask;
		F.Ppn  SWAP T.Ppn;	F.PMask SWAP T.PMask;
		F.Prt  SWAP T.Prt;
	     end;

	    Last.Fppn_ Last.Tppn_ Files_ 0;
	    UfdScn( F.Ppn, F.File, F.Ext, -1, WantFile, FileProc );
	    If ( Files = 0 )
	     then Print( Crlf&"% No files match specification"&Crlf );

	 end "no junk";
     end "something to do"
     else calli( 0, calli!EXIT );

    If ( not Interactive )
     then calli( 0, Calli!EXIT );

end "prompt user for stuff";


end "TEST";
