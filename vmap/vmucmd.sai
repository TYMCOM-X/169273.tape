
require "  V-Map Command Routines  " message;


Simple string procedure CReadL( String P );
begin
    String S;

    If ( CmdEOL = #Esc )
     then Print( Crlf );

    Print( P );
    S_ Inchwl;
    CmdEOL_ !skip!;

    Return( S );
end;

Procedure Do.Cmd( Integer Procedure DoSomething;
		  Boolean NeedTo( True );
		  String C.Prompt( "File: " );
		  String F.Prompt( " (from) " );
		  String T.Prompt( " (to) " );
		  String N.Message( "% No files match specification" )
		);
begin
    r!p (link) F.To, F.From;
    integer Files;
    boolean Reversed;

    If ( Length( CmdLine ) = 0 )
     then begin
	CmdLine_ CReadL( C.Prompt );
	If ( Length( CmdLine ) = 0 )
	 then Return;
     end;

    F.From_ FScan( CmdLine );
    Reversed_ GetDir( CmdLine, T.Prompt, F.Prompt, NeedTo );
    If ( Length( CmdLine ) or NeedTo )
     then F.To_ FScan( CmdLine );

    If ( Length( CmdLine ) )
     then begin "junk"

	If ( CmdEOL = #Esc )
	 then Print( Crlf );
	Print( "?Junk at end of command line - command aborted."&Crlf );
	Print( "? { ",CmdLine," }"&Crlf );
	Return;

     end "junk";

    Files_ DoSomething( F.To, F.From );
    If ( Files = 0 )
     then Print( If (CmdEOL = #Esc) then Crlf else "",
		 N.Message, Crlf&Crlf );

end;



Simple Procedure C.Copy;
Do.Cmd( DoCopy, True,  "Copy file: " );

Simple Procedure C.Delete;
Do.Cmd( DoKill, False, "Delete file: ", " (files) ", " (output to) " );

Simple Procedure C.Directory;
Do.Cmd( DoList, False, "Files: ", " (files) ", " (output to) " );

Simple Procedure C.Expunge;
Do.Cmd( DoWipe, False, "Files: ", " (files) ", " (output to) " );

Simple Procedure C.Rename;
Do.Cmd( DoName, True,  "Rename file: " );

Simple Procedure C.Undelete;
Do.Cmd( DoXDel, False, "Undelete file: ", " (files) ", " (output to) " );

