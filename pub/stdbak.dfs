.START "standard back"
.
.IF NOT DECLARATION ( headingskip ) THEN  headingskip _ 4;
.FORMAT
.
.needadjust _ FALSE;
.IF whenqueue NEQ NULL THEN needadjust _ TRUE;
.; donow;;
.
.secname _ ssname _ sssname _ ssssname _ NULL
.
.COUNT appcnt PRINTING $("")$; 		NEXT appcnt!;
.COUNT SecCnt PRINTING $("")$; 		NEXT SecCnt!;
.COUNT SsCnt PRINTING $("")$; 		NEXT SsCnt!;
.COUNT ssscnt PRINTING $("")$; 		NEXT ssscnt!;
.COUNT sssscnt PRINTING $("")$; 	NEXT sssscnt!;
.
.IF footnotepage AND (fotnot NEQ NULL)
.  THEN START  "footblk"
.	  IF NOT DECLARATION ( notepagepreface ) THEN  notepagepreface _ 1;
.	  secname _ notehead
.	  SEND cont
.	    $( SKIP;}5{notehead}{!!dots}#{PAGE!}{ BREAK )$
.	  PORTION ftpg
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL
.	  INDENT tind,0;
.	  PREFACE notepagepreface
.	  BREAK
.	  SPREAD _ notespacing
.	  TURN ON "_"
.	  IF underlinehead THEN notehead _ "" & notehead & ""
.	  }_{notehead}{
.	  SKIP headingskip
.	  RECEIVE
.	  secname _ NULL;
.	END "footblk"
.
.IF (bibcnt > 0) OR bibs
.  THEN START "bibblk"
.	  IF NOT DECLARATION ( bibpreface ) THEN  bibpreface _ 2;
.	  secname _ bibhead
.	  SEND cont
.	    $(SKIP;}5{bibhead}{!!dots}#{PAGE!}{ BREAK )$
.	  PORTION bibl
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  IF NOT DECLARATION ( bibcrown ) THEN  bibcrown _ 0;
.	  IF NOT DECLARATION(bibvest) THEN bibvest _ tind
.	  FILL
.	  INDENT bibcrown,bibvest;
.	  PREFACE bibpreface
.	  BREAK
.	  SPREAD _ bibspacing
.	  TURN ON "_"
.	  IF underlinehead THEN bibhead _ "" & bibhead & ""
.	  }_{bibhead}{
.	  SKIP headingskip
.	  IF bibs
.	    THEN BEGIN "libing"
.		   AT "*>/" sl "|" ul "|" lab "\" arg "\" rprint "|"	$(
.		     IF "rprint" = NULL
.		       THEN START lab: NEXT bibcnt END
.		       ELSE START lab: "rprint"; NEXT bibcnt; END;
.		     slrh _ "sl"
.	  	     sllh _ SCAN(slrh,"-",,"IS")
.					<< slrh now marks a removed "$". >>
.	             IF slrh NEQ NULL
.                      THEN quotefix _ "arg"[1 FOR slrh] & """" &
.                                        "arg"[slrh+1 FOR inf]
.	               ELSE quotefix _ "arg"
.	             the!bib _ dollar _ NULL
.	             REPEAT $(
.	  	       the!bib _ the!bib & SCAN(quotefix,"$",,"IS",dollar)
.	               IF dollar = "$"
.			 THEN the!bib _ the!bib & """" ELSE DONE
.			    )$
.		     IF sllh = NULL
.		       THEN START ttarg _ the!bib END
.		       ELSE START
.			      ttarg _ the!bib[1 FOR sllh] & "" &
.					the!bib[sllh+1 FOR ul] & "" &
.					the!bib[sllh+ul+1 TO inf] ;
.			    END
.		     IF numberedbib
.		       THEN BEGIN }{bibcnt}.###{ttarg BREAK END
.		       ELSE BEGIN }{ttarg BREAK END
.									)$
.		   AT "/*<" coment "|"			$(
.		     IF "coment" NEQ NULL
.		       THEN START "com1"
.			      INDENT 0,0 ;
.			      NARROW bibvest,bibvest
.			      cmtfix _ "coment"
.	             	      the!cmt _ dollar _ NULL
.	             	      REPEAT $(
.	  	                the!cmt _ the!cmt &
.					    SCAN(cmtfix,"$",,"IS",dollar)
.	               	      IF dollar = "$"
.			      THEN the!cmt _ the!cmt & """" ELSE DONE
.			    	     )$
.			      }{the!cmt}{BREAK
.			      WIDEN
.			      INDENT bibcrown,bibvest
.			      << SKIP ; >>
.			    END "com1"			)$
.		   IF appearorder
.		     THEN START RECEIVE END
.		     ELSE START RECEIVE "\\" END;
.		 END "libing"
.	    ELSE START RECEIVE END
.
.	  secname _ NULL
.	END "bibblk"
.
.IF indexing AND usingindex
.  THEN START "indexblk"
.	  secname _ indexhead
.	  BEGIN
.           SEND cont
.	      $( SKIP;}5{indexhead}{!!dots}#{PAGE!}{ BREAK )$
.	  END
.	  PORTION indx
.	  wasword _ waslett _ waspg _ NULL ;
.
.	  AT "<$<$" pgno "#" phrase "#" $(
.	    lett _ "phrase"[1] ;
.	    IF ^lett NEQ ^waslett
.	      THEN
.		IF LINES < 6 AND COLUMNS = 0
.		  THEN NEXT PAGE
.		  ELSE SKIP 2 ;
.	    IF ^"phrase" NEQ ^wasword
.	      THEN START BREAK }phrase##pgno{ END
.	      ELSE IF "pgno" NEQ waspg THEN },#pgno{ ;
.	    waspg _ "pgno" ;
.	    waslett _ lett ;
.	    wasword _ "phrase" ;	)$
.
.	  AT ">>" pgno "#" phrase "#"	$(
.	    lett _ "phrase"[1] ;
.	    IF ^lett NEQ ^waslett
.	      THEN
.		IF LINES < 6 AND COLUMNS = 0
.		  THEN NEXT PAGE
.		  ELSE SKIP 2;
.	    IF ^"phrase" NEQ ^wasword
.	      THEN START BREAK }phrase##pgno{ END
.	      ELSE IF "pgno" NEQ waspg THEN }-pgno{ ;
.	    waspg _ "pgno" ;
.	    waslett _ lett ;
.	    wasword _ "phrase" ;	)$
.
.	  TURN ON "_"
.	  IF underlinehead THEN indexhead _ "" & indexhead & ""
.	  }_{indexhead}{
.	  SKIP headingskip
.
.	  BEGIN "get index"
.	    IF NOT DECLARATION ( indexbottom ) THEN  indexbottom _ 58;
.	    AREA twotxt LINES 9 TO indexbottom IN 2 COLUMNS 3 APART
.	    PLACE twotxt
.	    FILL
.	    CRBREAK
.	    NOJUST
.	    INDENT 0,3,0
.	    PREFACE 0;
.	    RETAIN;
.	    SPREAD _ 1;
.	    RECEIVE "##"
.	  END  "get index"
.
.	  secname _ NULL
.	END "indexblk"
.;
.IF mtab
.  THEN START
.	  secname _ NULL;
.	  PORTION tpgs;
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL;
.	  SPREAD _ 2;
.	  PREFACE 1;
.	  INDENT tind,0;
.	  RECEIVE
.	END
.;
.IF mfig
.  THEN START "mfig"
.	  secname _ NULL;
.	  PORTION fcap
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL;
.	  SPREAD _ 2;
.	  PREFACE 1;
.	  INDENT tind,0;
.	  IF underlinehead THEN figcappagehead _ "" &
.						      figcappagehead &
.						      ""
.	  ONCE CENTER
.	  }{figcappagehead}{
.	  SKIP headingskip
.	  RECEIVE
.	END "mfig"
.
.  << Now begin processing the portions that come at the front of
.     the document. >>
.
.COUNT PAGE PRINTING "" ;
.
.IF titleing
.  THEN START "tit"
.	  secname _ NULL;
.	  IF needadjust AND NULLBODY
.	    THEN START needadjust _ FALSE; NEXT PAGE; END;
.	  PORTION titl
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL;
.	  SPREAD _ StandardSpacing;
.	  PREFACE 1;
.	  INDENT tind,0;
.	  CRSPACE
.	  TABBREAK
.			<< This stuff keeps headings and footings off
.			   the title page and restores them after the
.			   RECEIVE. >>
.	  tmp!eh _ !EH
.	  tmp!ef _ !EF
.	  tmp!oh _ !OH
.	  tmp!of _ !OF
.	  !EH _ !EF _ !OH _ !OF _ NULL ;
.	  RECEIVE
.	  !EH _ tmp!eh
.	  !EF _ tmp!ef
.	  !OH _ tmp!oh
.	  !OF _ tmp!of
.	END "tit"
.  ELSE START PORTION titl END
.
.COUNT PAGE PRINTING "i"
.
.IF abstracting
.  THEN START "abs"
.	  secname _ abstrhead
.	  abspage: skipc
.	  PORTION abst
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL;
.	  SPREAD _ StandardSpacing;
.	  PREFACE 1;
.	  INDENT tind,0;
.	  CRSPACE
.	  TABBREAK
.	  TURN ON "_"
.	  IF Underlinehead
.	    THEN START
.		   }_{AbstrHead}{
.		 END
.	    ELSE START
.		   }_{AbstrHead}{
.		 END
.	  SKIP headingskip
.	  RECEIVE
.	  secname _ NULL;
.	END "abs"
.
.IF NOT nocontents
.  THEN BEGIN "contents"
.	  secname _ contentshead
.	  contpage: skipc
.	  PORTION cont
.	  FILL
.	  NOJUST
.	  CRBREAK
.	  SPREAD _ ContentsSpread;
.	  PREFACE ContentsPreface;
.	  IF fullcontents
.	    THEN START INDENT 0,26,10 END
.	    ELSE START INDENT 0,16,10 END;
.	  TABS 30,33,36,39,42,45,48,51,54,57,60,63
.	  TURN ON "_"
.	  IF underlinehead THEN contentshead _ "" &
.						    contentshead & ""
.	  }_{contentshead}
.	  SKIP 4
.	  }{sechead}Page
.	  SKIP 2
. << The check to make sure that the Head is non-null allows someone to
.     use the Abstract macro for some special purpose without having a
.     strange entry in the table of contents.  Similarly for the acknow-
.     ledgements below.   /MCH  >>
.	  IF abstracting AND AbstrHead NEQ NULL
.	    THEN START }5{abstrhead}{!!dots}#{PAGE abspage}{BREAK END
.	  IF figtable AND gotfig
.	     THEN START
.		   }5{figlisthead}{!!dots}#{PAGE figtabpage}{BREAK
.		 END
.	  IF tabtable AND gottab
.	    THEN START
.		   }5{tablisthead}{!!dots}#{PAGE tabtabpage}{BREAK
.		 END
.	  IF acknowledging AND AckHead NEQ NULL
.	    THEN START
.		   }5{ackhead}{!!dots}#{PAGE ackpage}{BREAK
.		 END
.	  RECEIVE
.	  secname _ NULL
.	END "contents"
.
.IF figtable AND gotfig
.  THEN START "figpag"
.	  secname _ figlisthead
.	  figtabpage:  skipc;
.	  BEGIN  "figblk" << By putting the formatting commands within a
.	 	    begin block we avoid losing the user's settings
.		    while doing the special formatting needed here.
.		    This trick is used both above and below. >>
.	    PORTION figs
.	    FILL
.	    NOJUST
.	    CRBREAK
.	    SPREAD _ 1;
.	    INDENT 0;
.	    PREFACE 1
.	    TURN ON "_"
.	    IF underlinehead THEN figlisthead _ "" &
.						   figlisthead & ""
.	    }_{figlisthead}
.	    SKIP 2
.	    }{figname}Page
.	    SKIP
.	    RECEIVE
.         END "figblk";
.	  secname _ NULL
.	END "figpag"
.
.IF tabtable AND gottab
.  THEN START "tabtab"
.	  secname _ tablisthead
.	  tabtabpage:  skipc;
.	  PORTION tble
.
.	  BEGIN "tab"
.	    FILL
.	    NOJUST
.	    CRBREAK
.	    SPREAD _ 1;
.	    INDENT 0;
.	    PREFACE 1
.	    TURN ON "_"
.	    IF underlinehead THEN tablisthead _ "" &
.						     tablisthead & ""
.	    }_{tablisthead}
.	    SKIP 2
.	    }{tabname}Page
.	    SKIP
.	    RECEIVE
.	  END "tab"
.	  secname _ NULL
.	END "tabtab"
.
.IF acknowledging
.  THEN START "acknowledgments"
.	  secname _ ackhead;
.	  ackpage:  skipc;
.	  PORTION acks
.	  IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	  FILL;
.	  SPREAD _ StandardSpacing;
.	  PREFACE 1;
.	  INDENT tind,0;
.	  CRSPACE
.	  TABBREAK
.	  TURN ON "_"
.	  IF underlinehead THEN ackhead _ "" & ackhead & "";
.	  }_{ackhead}{
.	  SKIP headingskip;
.	  RECEIVE
.	END "acknowledgments" ; ;
.
.undefine standard back		<< Only one call allowed >>
.END "standard back"
.IF NOT abstracting THEN BEGIN 
.	PORTION abst;
.	RECEIVE;
.END;
.IF NOT acknowledging THEN BEGIN
.	PORTION acks;
.	RECEIVE;
.END;

   