.  << Special Macros mostly for use in defining the remaining ones
.     and defaults for spacing, tab handling, etc. >>
.
.MAXTEMPLATE _ 7500
.
.  << These two variables appear in many different routines.  >>
.
.setorigmargs _ needresetmargs _ FALSE;
.
.MACRO inf $()$
.
.RECURSIVE MACRO undefine (mac) $( MACRO mac $()$ )$
.
.MACRO scripts $( TURN ON "^[]&" )$
.
.MACRO greeks $( TURN ON "{\#_" )$
.
.MACRO format $( scripts ; greeks )$
.
.MACRO skipc $( SKIP TO LINE 1 )$
.
.  << Standard fractions of the current area >>
.
.MACRO full $( (LINE+LINES) )$
.
.MACRO half $( full/2 )$
.
.MACRO third $( full/3 )$
.
.MACRO quarter $( full/4 )$
.
.  << Default format setup.  >>
.
.IF NOT DECLARATION( standardspacing ) THEN standardspacing _ 2;
.AT NULL $( IF NOT FILLING THEN SKIP )$
.CRSPACE
.TABBREAK
.INDENT 8
.COMPACT
.BREAK
.SPREAD _ standardspacing
.TURN ON "%[]^&#{"
.TURN ON ":" FOR ".";
.EVERY FOOTING(,{PAGE!},)
.  << Underlining macros for the user>>
.
.MACRO underlinebetween (initial, terminator) $(
.AT "initial" PHRASE "terminator"
.  $( TURN ON "{" }phrase{ ; TURN OFF ; )$
.)$
.
.  << For the diablo:  text between initial and terminator is over-
.     printed 4 times; otherwise does normal underline. >>
.
.MACRO emboldenbetween (initial, terminator) $(
.IF XCRIBL
.  THEN START
.	  AT "initial" phrase "terminator" 	$(
.	    SNEAK "N";
.	    TURN ON "{"
.	    }phrase{ ;
.	    TURN OFF;
.	    SNEAK "F";			)$
.	  END
.  ELSE START
.	  AT "initial" phrase "terminator"
.	    $( TURN ON "{" }phrase{ ; TURN OFF ; )$
.	END
.)$
.
.  << For the diablo:  text between initial and terminator is over-
.     printed 4 times AND underlined; otherwise does normal underline. >>
.
.MACRO underboldbetween (initial, terminator) $(
.IF XCRIBL
.  THEN START
.	  AT "initial" phrase "terminator" 	$(
.    	    SNEAK "N";
.	    TURN ON "{"
.	    }phrase{ ;
.	    TURN OFF;
.	    SNEAK "F";			)$
.	  END
.  ELSE START
.	  AT "initial" phrase "terminator"
.	    $( TURN ON "{" }phrase{ ; TURN OFF ; )$
.	END
.)$
.
.
.IF NOT DECLARATION ( pageprint ) THEN  pageprint _ "1";
.
.IF pageprint NEQ NULL
.  THEN COUNT PAGE FROM 1 TO 999 PRINTING pageprint
.
.NEXT PAGE;  <<This must come AFTER the count page!! >>
.  << Macros for footnotes. >>
.
.IF NOT DECLARATION ( starnote ) THEN  starnote _ FALSE;
.IF NOT DECLARATION ( pagenote ) THEN  pagenote _ FALSE;
.IF NOT DECLARATION ( plainnumbernote ) THEN  plainnumbernote _ FALSE;
.IF NOT DECLARATION ( halflinenote ) THEN  halflinenote _ FALSE;
.
.  << Figure out what printing form the user wants for footnotes. >>
.
.IF plainnumbernote THEN footprint _ "1" ELSE footprint _ "(1)"
.
.IF starnote AND NOT pagenote
.  THEN TTY _ "REMINDER:  You are limited to a total of 25 footnotes."
.
.  << Set up the footnote counter. >>
.
.IF NOT pagenote
.  THEN START "footcount"
.	  IF NOT starnote
.	    THEN START COUNT fotnot INLINE PRINTING footprint END
.	    ELSE START
.		     COUNT fotnot INLINE PRINTING
.		       $("*************************"[1 to fotnot])$
.		 END
.	END "footcount"
.  ELSE START "footpg"
.	  IF NOT starnote
.	  THEN START
.		 COUNT fotnot INLINE FROM 1 TO 9 IN PAGE PRINTING footprint
.	       END
.	  ELSE START
.		 COUNT fotnot INLINE FROM 1 TO 9 IN PAGE PRINTING
.		   $("*********"[1 to fotnot])$
.		END
.	END "footpg"
.
.IF NOT DECLARATION ( notespacing ) THEN  notespacing _ 1; 
.
.	  AT "$$" entry "*"	$(
.	    NEXT fotnot ;
.	    IF halflinenote
.	    THEN START }{SNEAK ""; !; SNEAK "" }{ END
.	    ELSE !;
.	    SEND FOOT			$(
.	      PREFACE 1;
.	      SPREAD _ notespacing
.	      AT "         "			$(
.		IF filling BREAK ELSE "         "
.						)$
.	      IF NOT setorigmargs THEN tind _ INDENT1 ELSE tind _ origind;
.	      INDENT tind,0
.	      BREAK
.	      IF setorigmargs AND
.			   ((origlmarg NEQ lmarg) OR (origrmarg NEQ rmarg))
.		THEN START "set"
.		       templmarg _ lmarg;
.		       temprmarg _ rmarg;
.		       lmarg _ origlmarg;
.		       rmarg _ origrmarg;
.		       needresetmargs _ TRUE;
.		     END "set"
.	      TURN ON "{#"
.	      IF halflinenote
.		THEN START }{SNEAK ""}{fotnot!}{SNEAK ""}entry{ END
.		ELSE START }{fotnot!}#entry{ END
.	      TURN OFF
.	      IF needresetmargs
.		THEN START
.		       lmarg _ templmarg;
.		       rmarg _ temprmarg;
.		       needresetmargs _ FALSE;
.		     END;
.					)$
.				)$
.
.  << Macros for page labels and counter. >>
.
.MACRO PRef (lbl) $( "p. "; PAGE! lbl )$
.
.MACRO PageRef (lbl) $( "page " ; PAGE! lbl )$
.
.IF NOT DECLARATION ( counterprint ) THEN  counterprint _ "1";
.
.COUNT counter INLINE PRINTING counterprint
.
.MACRO inc (counter, lab) $(
.lab: next counter
.!
.)$
.
.  << Macros for controlling basic text formatting. >>
.
.MACRO blankline $(
.TABSPACE;
.AT NULL $( IF FILLING THEN BREAK ELSE SKIP )$
.)$
.
.MACRO ByHand $(
.BEGIN "ByHand"
.  NOFILL
.  NOJUST
.  INDENT 0
.  SPREAD _ 1;
.)$
.
.MACRO EndHand $(
.END "ByHand"
.CONTINUE
.)$
.
.IF NOT DECLARATION ( crownspacing ) THEN  crownspacing _ 1;
.
.MACRO crown (X,Y,Z) $(
.BEGIN "crown"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	    origind _ INDENT1;
.	  END;
.  BREAK;
.  IF "X" NEQ NULL THEN CInd1 _ X ELSE CInd1 _ 0;
.  IF "Y" NEQ NULL THEN CInd2 _ Y ELSE CInd2 _ 8;
.  IF "Z" NEQ NULL THEN CInd3 _ Z ELSE CInd3 _ 0;
.  INDENT CInd1, CInd2, CInd3;
.  SPREAD _ crownspacing;
.)$
.
.MACRO endcrown $(
.END "crown"
.CONTINUE
.)$
.
.IF NOT DECLARATION ( quotespacing ) THEN  quotespacing _ 1;
.
.MACRO quote (q1, q2, q3 ) $(
.BEGIN "quote"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origind _ INDENT1;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	  END;
.  IF "q1" NEQ NULL THEN INDENT q1 ELSE INDENT -8;
.  NARROW (IF "q2" = NULL THEN 8 ELSE q2),(IF "q3" = NULL THEN 0 ELSE q3);
.  SPREAD _ quotespacing;
.)$
.
.MACRO endquote $(
.END "quote"
.CONTINUE
.)$
.
.!spaces _ "#####################################################" ;
.!hyphens _ "--------------------------------------------------------------" ;
.
.MACRO fraction (num, den) $(
.TURN ON "{^[]&#" ;
.N _ "num" ;
.D _ "den" ;
.ln _ LENGTH(N) ;
.ld _ LENGTH(D) ;
.IF ln > ld
.  THEN START D _ !spaces[1 TO (ln-ld) DIV 2] & D ; lmax _ ln ; END ;
.  ELSE START N _ !spaces[1 TO (ld-ln) DIV 2] & N ; lmax _ ld ; END ;
.}^[{N}]&[{D}]&[{(!hyphens[1 TO lmax])}]
.TURN OFF ;
.)$
.
.  << List macros.  >>
.
.IF NOT DECLARATION ( listspacing ) THEN  listspacing _ 1;
.
.MACRO List (Inden, LeftMarg, RightMarg, PrintForm) $(
.BEGIN "list"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origind _ INDENT1;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	  END;
.  lindent1 _ INDENT1;
.  lindent2 _ INDENT2;
.  IF "leftmarg" = NULL THEN lmar _ 8 ELSE lmar _ leftmarg;
.  IF "rightmarg" = NULL THEN rmar _ 8 ELSE rmar _ rightmarg;
.  BREAK
.  SPREAD _ listspacing
.  NARROW lmar,rmar
.  INDENT2 _ 0;
.  FILL
.  IF "inden" = NULL THEN INDENT1 _ 4 ELSE INDENT1 _ inden;
.  IF "printform" = NULL
.    THEN START COUNT lists FROM 1 TO 100 PRINTING "1)"; END
.    ELSE START COUNT lists FROM 1 TO 100 PRINTING "printform"; END
.)$
.
.MACRO item $(
.NEXT lists
{lists!}##{
.)$
.
.MACRO endlist $(
.  INDENT Lindent1, LIndent2
.END "list"
.CONTINUE
.)$
.
.  <<Special macros for the diablo printer>>
.
.IF XCRIBL THEN START DEVICE DIABLO; FONT A "ELITE"; END
.
.MACRO elitediablo $( DEVICE DIABLO; FONT A "ELITE"; )$
.
.MACRO picadiablo $(
.DEVICE DIABLO;
.FONT A "ELITE";
.FONT B "PICA";
.SELECT B;
.)$
.
.cntrlhs _ "";
.cntrlrs _ "";
.cntrlss _ "";
.
.MACRO sub (subs) $( SNEAK "" }subs{SNEAK "" )$
.
.MACRO sup (supers) $( SNEAK "" }supers{SNEAK "" )$
.
.MACRO hd (number) $(
.IF "number" = NULL
.  THEN START SNEAK "" END
.  ELSE START SNEAK cntrlss[1 TO number] END;
.)$
.
.MACRO hu (number) $(
.IF "number" = NULL
.  THEN START SNEAK "" END
.  ELSE START SNEAK cntrlrs[1 TO number] END;
.)$
.
.MACRO bu (number) $(
.IF "number" = NULL
.  THEN START SNEAK "" END
.  ELSE START SNEAK cntrlhs[1 TO number] END
.)$
.
.MACRO supsub (supers, subs) $(
.upbackcount _ LENGTH("supers");
.downbackcount _ LENGTH("subs");
.IF upbackcount > downbackcount
.  THEN START
.	  SNEAK "subs"
.	  SNEAK cntrlhs[1 TO downbackcount]
.	  sup (|supers|)
.	END
.  ELSE START
.	  SNEAK "supers"
.	  SNEAK cntrlhs[1 TO upbackcount]
.	  sub (|subs|)
.	END;
.)$
.
.  << Assorted library calls.  Placed here so that the PUB run
.     looks neater from user's viewpoint. >>
.
.IF NOT DECLARATION ( wantoutline ) THEN  wantoutline _ FALSE;
.
.IF wantoutline THEN START library |(PUB)OUTLIN.DFS| ; END
.
.  << If user wants side character feature get it for him. >>
.
.IF NOT DECLARATION ( wantsidechars ) THEN  wantsidechars _ FALSE;
.IF wantsidechars THEN START LIBRARY |(PUB)SIDECH.DFS| ; END;
.
