






                          SUMEX-AIM AND IMSSS

                           PUB USER'S MANUAL



              Original Version by Nancy Smith (June 1975)



           Revised Version by Michael C. Hinckley (June 1978)



          Draft Documentation of New Version:  March 31, 1979







NOTE:  There are currently two differences between the documentation and
reality:  (1) to  get the Journal package  documented here you  must say
.Library <pub>testjournal  at SUMEX  or .NewJournal  at IMSSS.   (2) You
MUST give a PAGE FRAME statement also.

There are  a great  many differences  from the  older versions  of these
macros!!  Many names have  been changed, (E.g. StopText is  now ByHand),
the order  of arguments  to some  macros have  been changed,  some older
macros are  no longer  available!  If you  are an  old user  of Journal,
Book,  Memo, NewJournal,  or NewMemo,  there will  be a  fair  amount of
relearning involved.   But this  package is  more consistent  and faster
than older packages, so you may find that the work is worth it.













Preparation of the original version of this manual was supported  by the
Biotechnology  Resources Branch  of  the National  Institutes  of Health
under Grant RR-00785.
PUB User's Manual             New Package


                           Table of Contents                             





Section                                                             Page



    List of Figures           .  .  .  .  .  .  .  .  .  .  .  .  .   iv

    List of Tables            .  .  .  .  .  .  .  .  .  .  .  .  .  . v

    Acknowledgments           .  .  .  .  .  .  .  .  .  .  .  .  .   vi


1.     Introduction           .  .  .  .  .  .  .  .  .  .  .  .  .  . 1

       1.1    What PUB does   .  .  .  .  .  .  .  .  .  .  .  .  .  . 1

       1.2    Choosing the format   .  .  .  .  .  .  .  .  .  .  .  . 1

       1.3    Specifying PUB commands  .  .  .  .  .  .  .  .  .  .  . 3

       1.4    The kinds of PUB commands   .  .  .  .  .  .  .  .  .  . 3

       1.5    Printing forms  .  .  .  .  .  .  .  .  .  .  .  .  .  . 9

       1.6    Other useful information .  .  .  .  .  .  .  .  .  .  . 9


2.     Basic formatting commands .  .  .  .  .  .  .  .  .  .  .  .   10

       2.1    Page size and shape   .  .  .  .  .  .  .  .  .  .  .   11

       2.2    Headings and footings .  .  .  .  .  .  .  .  .  .  .   12

       2.3    Paragraph size and shape .  .  .  .  .  .  .  .  .  .   13

       2.4    Specialized paragraph formats  .  .  .  .  .  .  .  .   16

       2.5    Other formatting commands   .  .  .  .  .  .  .  .  .   21

       2.6    Underlining     .  .  .  .  .  .  .  .  .  .  .  .  .   25

       2.7    Superscripting and subscripting   .  .  .  .  .  .  .   28

       2.8    Footnotes       .  .  .  .  .  .  .  .  .  .  .  .  .   30


3.     Special sections of the document   .  .  .  .  .  .  .  .  .   32

       3.1    Title page      .  .  .  .  .  .  .  .  .  .  .  .  .   32


                                   i
PUB User's Manual             New Package


       3.2    Abstract page   .  .  .  .  .  .  .  .  .  .  .  .  .   33

       3.3    The table of contents .  .  .  .  .  .  .  .  .  .  .   34

       3.4    Acknowledgment page   .  .  .  .  .  .  .  .  .  .  .   35

       3.5    Section headings   .  .  .  .  .  .  .  .  .  .  .  .   35

       3.6    Appendixes      .  .  .  .  .  .  .  .  .  .  .  .  .   40

       3.7    Intra-text referencing   .  .  .  .  .  .  .  .  .  .   41

       3.8    Bibliographic references .  .  .  .  .  .  .  .  .  .   42

       3.9    The index       .  .  .  .  .  .  .  .  .  .  .  .  .   49


4.     Special formats        .  .  .  .  .  .  .  .  .  .  .  .  .   50

       4.1    The outline feature   .  .  .  .  .  .  .  .  .  .  .   50

       4.2    The proportional spacing feature  .  .  .  .  .  .  .   54

       4.3    The sidecharacter feature   .  .  .  .  .  .  .  .  .   55

       4.4    Tables and figures feature  .  .  .  .  .  .  .  .  .   57


5.     Preparing the document .  .  .  .  .  .  .  .  .  .  .  .  .   62

       5.1    Creating the text file   .  .  .  .  .  .  .  .  .  .   63

       5.2    Specifying your chosen format  .  .  .  .  .  .  .  .   63

       5.3    Typing sentences   .  .  .  .  .  .  .  .  .  .  .  .   64

       5.4    Special characters .  .  .  .  .  .  .  .  .  .  .  .   64

       5.5    Extra spaces    .  .  .  .  .  .  .  .  .  .  .  .  .   64

       5.6    The final command  .  .  .  .  .  .  .  .  .  .  .  .   65

       5.7    Ending the edit .  .  .  .  .  .  .  .  .  .  .  .  .   65

       5.8    Starting the PUB program .  .  .  .  .  .  .  .  .  .   65

       5.9    PUB starts to work .  .  .  .  .  .  .  .  .  .  .  .   67

       5.10   Error messages  .  .  .  .  .  .  .  .  .  .  .  .  .   67

       5.11   Looking at the output .  .  .  .  .  .  .  .  .  .  .   68

       5.12   Printing the final version  .  .  .  .  .  .  .  .  .   69



                                   ii
PUB User's Manual             New Package


6.     Ways to speed up the process .  .  .  .  .  .  .  .  .  .  .   69


7.     Getting fancier        .  .  .  .  .  .  .  .  .  .  .  .  .   72


    Appendix A

       Summary of Table and Figure Macros .  .  .  .  .  .  .  .  .   73


    Appendix B

       A sample table of contents   .  .  .  .  .  .  .  .  .  .  .   74


    Appendix C

       Summary of Commands    .  .  .  .  .  .  .  .  .  .  .  .  .   75


    References                .  .  .  .  .  .  .  .  .  .  .  .  .   81


    Index                     .  .  .  .  .  .  .  .  .  .  .  .  .   82































                                  iii
PUB User's Manual             New Package


                            List of Figures                              



Figure                                                              Page


1.  A sample figure  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .   59



Appendix:

A.  A sample figure in an appendix with a long caption to illustrate how
    a caption that is longer than a line is treated.  .  .  .  .  .   73









































                                   iv
PUB User's Manual             New Package


                             List of Tables                               



Table                                                               Page


1.  A Sample Table with a Second Title Line  .  .  .  .  .  .  .  .   59



Appendix:

A.  A List of Macros Used in the Table and Figure Package   .  .  .   73










































                                   v
PUB User's Manual             New Package


                            Acknowledgments                            





1975 version:

     The PUB program was written by Larry Tesler, formerly of  SU-AI and
currently at  XEROX-PARC, whose manual  is PUB:  The  Document Compiler,
Stanford Artificial Intelligence  Project, Operating Note  70, September
1972.  The preprogrammed macro packages were originally written by Larry
Tesler and extensively revised by Robert Smith at IMSSS and  Nancy Smith
at SUMEX.

1978 revision:

     PUB has been  in use for  a long time now,  and it is  difficult to
properly credit the many different  people who have enhanced PUB  or the
macro  packages documented  here.  The  above list  is  incomplete.  For
example,  Kaplan  and  Agin  at  SRI  contributed  extensively   to  the
tables/figures package.   So I  would like to  take this  opportunity to
thank those who have contributed to PUB over the years.

Apology to the reader:

     I am aware that there  are many deficiencies in this  manual.  Some
readers will  find it too  detailed for their  needs, while  others will
look for (but  not find) documentation on  the internal workings  of the
macros.  Nor is enough said about common errors and how to  locate them.
The organization and style also  leave something to be desired.   I must
admit to being quite perplexed about  how to document PUB in a  way that
will  meet  the  needs  of  its  diverse  user  community;  comments and
suggestions  are welcome.   Nancy Smith  gave me  an  excellent starting
point in  the original version  of this document.   Any flaws in  it are
mine  and  not  hers.  I  am  releasing  this in  the  belief  that some
reasonably accurate documentation is far better than none at all.



                                                             M. Hinckley















                                   vi
PUB User's Manual             New Package                      Section 1


     1    Introduction          



     1.1    What PUB does              

     PUB is a program  designed to automate the production  of formatted
text such as letters, technical reports, and dissertations.   It handles
the numbering and  division of the text  into pages of  suitable length,
evens the  margins if desired,  sequentially numbers and  prints section
headings, produces such optional  features as table of  contents, index,
bibliography,  footnotes,  etc.,  and puts  small  pieces  of  text into
special  formats  such  as  quotations,  enumerated  lists   of  points,
outlines, etc.  This makes it easier to type in your  manuscript because
you never need to watch the length of your lines or pages or worry about
centering headings or keeping track of footnote numbers or bibliographic
reference numbers, etc.  It also makes it much easier to modify the text
later.  If you  decide to add  a few lines or  a whole section,  you can
simply run PUB again instead of making a large number of changes by hand
such as changing the page boundaries or suitably modifying the  table of
contents and intra-text references.  All of these details are taken care
of by PUB.

     In order  to use PUB,  you create  your text file  with one  of the
editors and include certain  commands to PUB at appropriate  places.  In
general you  should name this  file <filename>.PUB, for  example ANNUAL-
REPORT.PUB.   This  file  is  called  your  manuscript.   When  you have                                            
finished typing the manuscript, you run PUB and give it the name of your
manuscript file.   PUB sees the  commands you have  put in the  file and
takes the  appropriate actions.   PUB produces an  output file  which it
names  filename.DOC.  This  is called  the document.   You can  list the                                   
document on the  lineprinter and proofread  it for typing  or formatting
errors.(1)  Any changes  that need  to  be made  should be  made  to the
manuscript file (.PUB).  Then PUB is run again to produce a  new version
of the document.   When you are satisfied  with the document, it  can be
printed  on  a  high-quality  printing  device.   See  Section  5  for a
detailed explanation.



     1.2    Choosing the format              

     PUB is a flexible and powerful programming language  (though fairly
difficult to learn).  It is possible for a user to write his/her own PUB
commands to perform a variety of functions.  However, most users  do not
want to have to become PUB programmers to use PUB.  They prefer  to have
a set of commands that are  simple, easy to understand and easy  to use.
This need is met at SUMEX and IMSSS by programming and storing  the most

------------
     (1) See <DOC>SPELL.MANUAL  for a description  of the  SPELL program
that can be used to  automatically check for spelling errors.   The file
<PUB>PUB.WDS contains a list of the special PUB command words and  so it
can be helpful in catching spelling mistakes in the commands.


                                   1
PUB User's Manual             New Package                    Section 1.2


commonly used  commands in  files.  In  this way,  even someone  with no
previous experience  in using  computers can  rapidly master  enough PUB
commands to produce documents with quite sophisticated formats.

     There are currently two basic formats available, so the  first step
is to choose the one that most closely corresponds to the  current task.
The  user can  then make  minor adjustments  to meet  a wide  variety of
special needs.  The two basic formats are Journal and Memo.                                               

     The  Journal format  is  designed for  journal  articles, technical
reports, short manuals, etc.  The document can be divided into sections,
with  new  sections  continuing  on the  same  page  and  with footnotes
numbered  consecutively  through  the  entire  document.(2)  To  get the
Journal format you put the line

.Journal;

into your manuscript file.

     In addition, the Journal package can be used to obtain Book format,
which  is  suitable  for  books,  dissertations,  manuals,  etc.   Major
sections are labeled as chapters and each chapter is started on  a fresh
page.  Footnotes are numbered consecutively in chapters.  The  format of
the section headings and the way in which footnotes are numbered are the
main  difference between  the  Book and  Journal formats.   To  get Book
format, put the line

.BookStyle _ True;

into your manuscript before the .Journal line.                     

     Both  the  BookStyle  and  Journal  formats  provide  many optional
features:  title page, abstract, table of contents, acknowledgment page,
bibliography  and  bibliographic  references  in  the  text, appendixes,
index, footnotes (which can  be placed at the bottom  of a page or  in a
special section at the end of the document), intra-text referencing, and
special handling  of tables and  figures (including labelled  tables and
figures with  a List of  Tables and/or Figures  page if  desired).  Note
that the manuscripts for the  Journal and BookStyle formats will  be the
same.  You can switch formats by making a one-line change in  your file.
So you  choose the  format and  then you  don't have  to think  about it
again; all the commands are the  same, except that some of them  are not
available in Memo format.

     The  Memo format  is designed  for simple  uses where  there  is no
division of the text into sections and where you do not need any  of the
fancy options.  Footnotes are available in Memo format, but the separate
footnote   page  feature   is  not.    Features  such   as  underlining,
sub/superscripting,  and special  text  formats (such  as  outlines) are
available in all three formats.  To get the Memo format, put the line

.Memo;
------------
     (2) The Journal format was used to prepare this document.


                                   2
PUB User's Manual             New Package                    Section 1.2


into  your  file  instead  of  .Journal.   Since  there  are  no section
headings, etc., BookStyle format  is not available in Memo  format.  The
main advantage in using Memo is speed:  PUB will process your manuscript
much faster with Memo than with Journal since it has much less to do.



     1.3    Specifying PUB commands              

     There are several ways of putting PUB commands in the manuscript:

          1.  Most commands are put on a separate line in  the file
     and the line is begun with  a period.  When PUB sees the  . as
     the first character of the line, it interprets the entire line
     as a command and does not put it in the document that is being
     prepared.  If your command is very long, you may use more than
     one line; but each continuation line must begin with a period.
     For example, to get Journal (or BookStyle) format, you put the
     command

     .Journal;

     into your PUB file.

          2.  A command to PUB  can be placed directly in  the text
     by enclosing it in {...} (curly brackets).  If this  runs more
     than one line, the succeeding lines must begin with  a period.
     Some commands  are easier  to put  in your  file using  a line
     beginning with a  period and others  are easier to  give using
     curly brackets.   The examples in  this document will  use the
     form that  is usually  the most convenient  one for  the given
     command.

          3.  Command   characters   and   signal   responses   are
     different.  They  go right  in the  text.  PUB  discards these
     special  characters  after performing  the  necessary actions.
     For  example,  enclosing  words  from  the  text  in  %  signs
     indicates that you want them to be included in the  index.  So
     PUB will remove the  % signs and make  a copy of the  words to
     send to  the index.   See Section  1.4.3 for  a list  of these
     special characters and their functions.



     1.4    The kinds of PUB commands                

     There  are  three  distinct  kinds  of  commands  in  PUB:  macros,
variable   assignments,   and   signal   responses   (including  command
characters).







                                   3
PUB User's Manual             New Package                  Section 1.4.1


     1.4.1    PUB macros               

     Generally speaking,  a macro  performs some  series of  actions for
you.  For  example, the  Journal and Memo  commands mentioned  above are
actually macros that  tell PUB to read  in certain files that  contain a
large number of macro definitions and PUB commands.  A macro name can be
either one word or two (e.g. Outline vs. Standard Back), though the one-
word names are by far the more common.  And a macro may or may  not have
arguments.  When a macro does have arguments, there are certain rules to                    
follow:

          1.  If the macro argument does NOT contain a  quote mark,
     comma, | (vertical bar), or right parenthesis, simply  type in
     the string.  It must be  on one line, though if there  is more
     than one argument, each one  can be on a separate  line (which
     must be a  command line, see  Section 1.3, above).   Spaces at
     the beginning of an argument are ignored, but  trailing spaces
     are  not.   If  there  is more  than  one  argument,  you must
     separate them by commas.  This format is the easiest  to type,
     and the most commonly used.  But if your argument contains any
     of  the special  characters (quote  mark, comma,  |,  or right
     parenthesis) or  if it  is longer  than one  line, one  of the
     following formats must be used.

          2.  A string enclosed in |...| in which no | appears.  It
     may  span  several  command  lines.   Spaces  outside  of  the
     vertical bars are ignored, those inside are included.   If the
     string extends  across more than  one command line,  each line
     (except the  last) should end  with a #  to tell PUB  that you
     want a  space.  You  can usually omit  the #  without anything
     going wrong, but  on random occasions  PUB will decide  to run
     two words together if you do omit it.

          3.  A string enclosed in "..." in which every " inside is
     represented by "".   It must appear  all on one  line.  Spaces
     outside of the quote marks are ignored.

     Ordinarily, the argument list to a macro does not need to be put in
parentheses.  But there are a few  macros where you can omit all  of the                                                             
arguments and PUB will choose defaults for you.  In such cases,  you can
tell PUB that you are omitting all of the arguments in one of  two ways:
By putting a  semicolon (;) after  the name of the  macro or by  using a
pair of parentheses  with nothing in between.   For example, there  is a
macro called List that normally has three arguments.  You are allowed to
omit all three, but to tell this to PUB, you have to give the command as

.List;         or

.List ()       rather than just

.List

Otherwise, PUB will try to use the next line as an argument to  the List
macro, with unpleasant results.


                                   4
PUB User's Manual             New Package                  Section 1.4.1


     Here are some examples of arguments to the Sec macro  (described in
Section 3.5):

.Sec Title of section, title:
.Sec (Title of section,title:);
.Sec "Title of (this) section",title:
.Sec "First, major, long section needs quotes for commas", label:
.Sec |This title is long enough to go more than one line and must#
.then be done this way--note the . on second and third lines#
.and the # at the end of the lines.|

Note that in  the last example, the  second argument is omitted;  if the
next line was  also a command  line, you would  need a semicolon  at the
end.


     1.4.2    Variable assignments               

     The second kind of PUB command is the one that assigns a value to a
variable.  For example, if you want the outline feature, you have to ask
for it by  assigning the value True  to the variable  WantOutline.  This
tells PUB to read in the  macros needed for the outline feature  so that
they will be available.

     The basic format for variable assignments is:

.VariableName _ value;

The symbol "_"  will print as  a backarrow on  some terminals and  as an
underbar  on others.   Notice the  semicolon after  the value.   In most
cases, it does  not hurt anything  if you omit it,  but there are  a few
situations where PUB will not do the right thing if it is left out.

     Examples of variable assignments:

.WantOutline _ True;
.StandardSpacing _ 2;
.BibHead _ "Selected Bibliography";

     Some other important details about variables:

          1.  Many  of the  variable assignments  you will  want to
     make  MUST be  done  in your  .PUB  file BEFORE  you  give the                                          
     .Journal or .Memo  command.  And all of  them MAY be  given in                                                   
     your file before you call  a macro package.  So it is  best to
     put ALL variable assignments at the beginning.  In  some cases         
     you  are permitted  to change  the variable  assignment later.
     These  are  pointed  out at  the  appropriate  places  in this
     manual.

          2.  Many variables  are set to  be either True  or False;
     others  are set  to  be integers;  all  others are  set  to be
     strings.  Strings always have  to be enclosed in  quote marks,



                                   5
PUB User's Manual             New Package                  Section 1.4.2


     and  must be  on ONE  line!   In fact,  this is  true  for all
     strings in  PUB--they must  be in quote  marks and  the string
     must  be on  one line.   There are  no  known exceptions--SAIL
     hackers take note!

          3.  Assigning  a value  to a  variable is  different than
     giving  an  argument to  a  macro.  In  particular,  the |...|
     format used for macro arguments cannot be used for strings.


     1.4.3    Signal responses and control characters                  

     The third and final kind of PUB command is somewhat  different than
the other two.  It consists of a sequence of special characters  that go
directly into the text file.  These special PUB commands do not go  on a                                                            
command line or inside the {...} construction.

     EXAMPLES:  Words enclosed  in %'s will be  sent to the  index.  And
sometimes, as in this manual, it is necessary to include text that would
normally  be  a  PUB command  of  some  sort.  But  if  you  precede the
character with a <CTRL>B, PUB  will interpret it as text.  So  a <CTRL>B
in front of a { will cause the curly bracket to be sent to  the document
file instead of signalling the start of a PUB command.

     Control characters are always  a single character (and  are always,      
as the name  implies, control characters  in the ASCII  sequence).  They
cause PUB to perform a single action of some sort.

     A signal response can be a sequence of one to five  characters, and        
these characters  can be anything  except control characters.   To avoid
confusion, they are  usually chosen to  be sequences of  characters that
would not  normally occur in  a text, and  so in practice  never include
letters or numbers.  The signal responses indicate some special handling
of the text, and they often  come in pairs.  For example, when  PUB sees
$$ in the text, it will take the text, up to the first *, as  a footnote
and treat it accordingly.  (See Section 2.8 for more about footnotes.)

     The important thing to remember about control characters and signal
responses is  that they go  right into  the regular text,  and not  on a
command line or inside curly brackets.

     Since the special characters  occur in regular text rather  than as
part of a PUB command, a problem  arises if you wish to use any  of them
as ordinary text.  There are two ways of solving the problem.

     As mentioned above, the command character <CTRL>B allows you  to do
this on  a case-by-case basis.   A <CTRL>B will  probably print  on your
terminal as ^B when you type the file.  It will look like ?" in SOS.  In
SOS you may type <CTRL>B simply by holding the control key and  typing B
but subsequent *P<line> will show it as ?".  In TV, a <CTRL>B  will show
up as * just  like any other control  character.  To see what  it really
is, use the "$=" command (hold  down the edit key while you type  an =).
To put a <CTRL>B in your file  using TV, you need to hold down  the edit



                                   6
PUB User's Manual             New Package                  Section 1.4.3


key and type ' , then type 2 which is the octal ASCII code  for <CTRL>B,
followed by <CR>; and it will print on your screen as *.  Remember:  the
<CTRL>B turns off the character for just the one use.

     But  typing  a <CTRL>B  can  be very  inconvenient  if  the command
character occurs frequently as ordinary text.  Provided that you are not                                                                     
using the function performed by  a command character, PUB allows  you to
"turn it  off" so that  it is treated  throughout your manuscript  as an
ordinary   text  character.    For  example,   ^  is   used   to  signal
superscripting.  If you need ^  (uparrow or caret) in your text  and are
not doing any superscripting, you may give the command

.Turn Off "^";

The two quote marks are not optional--they must appear in the command.

     If you want to turn  off more than one character, a  single command
can be used, for example,

.Turn Off "{#^";

where all the  characters to turn  off are put  in a string  enclosed in
"...".

     But suppose you want the  special function.  In that case,  you can                     
give a command to change the characters.

     To change any of the characters including ^, the command is

.Turn On "newchar" For "oldchar";

and then you also need to

.Turn Off "oldchar";

Just turning on  the "newchar" results  in both "newchar"  and "oldchar"
enabled for the particular function.

     EXAMPLE:

.Turn On "$" For "^", "*" For "#", "&" For "{";
.Turn Off "^#{";

If you forgot the Turn Off command you would still not be able to  use ^
or # or { as ordinary text!

     The % character used for indexing is a signal response  rather than
a command character, so Turn Off does not work.  However, you may  use a
<CTRL>B to turn  it off for one  use at a time.   If you do not  want an
index, you can get the effect of turning it off by putting the following
variable  assignment  into  your  file  BEFORE  you  give  the  .Journal





                                   7
PUB User's Manual             New Package                  Section 1.4.3


command:(3)

.IndexChar _ Null;

     The } character cannot be turned  off but it can be used  any place
in the  text without  <CTRL>B.  The context  will determine  if it  is a
special character.  If it appears as { some text } then it signals a PUB
command.    Just   some}   text   indicates   regular   text   as   does
<CTRL>B{ some text }.

     The following is a list of the signal responses that  are currently
turned on by default that you  may want to turn off or change  (and turn
off):

#           for forcing spaces in the text
{           for intra-text and bibliographic referencing
            and current date, page, or section
<CTRL>B     for using any of these characters as ordinary text
-           for hyphenation; if - is not turned off, PUB
            will break a word containing a hyphen when
            this will help give a line a more even appearance(4)
<CTRL>A     for underlining and subscripting (see Section 2.6 for
            better ways of underlining)
<CTRL>X     for underlining
^           for superscripting
&           special only when superscripting or subscripting; see
            Section 2.7 for details
[           like &, this is special only when super- or subscripting

     The characters .,!, :, and ? are also somewhat  special.  Normally,
PUB will ignore extra spaces in a text line.  This is why # is useful as
a command character.  However, provided a  ., !, :, or ? is  followed by
two  spaces, these  will be  retained.  This  allows PUB  to  follow the
standard convention that the end of a sentence is followed by two spaces
instead of one.  But PUB will not leave any spaces if the  sentence ends
a line.  The colon is actualy treated a bit differently--to make it work
like a period the macro package uses the following "trick":

.Turn On ":" For ".";

The : is then treated just like a period.






------------
     (3) Since indexing  is not  available in  Memo format,  the problem
does not  arise there.   You can just  use the  % character  as ordinary
text.

     (4) But note that PUB will not throw away hyphens.  So do not add
them where you will be unhappy if they appear in that word.


                                   8
PUB User's Manual             New Package                    Section 1.5


     1.5    Printing forms             

     There are many kinds  of things that PUB will  automatically number
for  you  such  as  pages,  footnotes,  chapters/sections,  bibliography
entries, etc.   The default printing  forms will be  the proper  ones in
most cases,  but not always.   For example if  you are  using BookStyle,
chapters will be numbered using upper case Roman numerals.  But  you may
prefer ordinary arabic numerals.  In most cases it is possible to change
the default forms, once you understand enough about the basics.(5)

     Basically, PUB offers a choice of five kinds of numerals:  ordinary
arabic  numerals (1,2,3...),  lower case  alphabetics  (a,b,c...), upper
case alphabetics  (A,B,C...), lower  case roman  numerals (i,ii,iii...),
and upper case roman numerals (I,II,III...).  You select between them by
choosing the appropriate representative,  i.e.  "1" for arabic,  "a" for
lower  case  letters, "A"  for  upper  case, "i"  for  lower  case roman
numerals,  and  "I" for  upper.   In many  cases  (but not  all!)  it is
possible  to specify  adding parentheses  or square  brackets,  e.g., by
giving "1)",  PUB will use  1), 2),  3), etc.  Or  by giving  "[A]", you
would get [A], [B], [C], etc.   Periods can also be used, but  some care
must be taken since in some cases these are added for you automatically.
Details and suggestions for  particular situations will be found  in the
appropriate places  elsewhere in this  manual.  For example  see Section
4.1  for details  about  setting up  the  kinds of  numbering  you would
prefer in outlines.

     Since  PUB sometimes  needs some  idea of  how much  space  will be
needed to insert a counter--for  example, when you refer to a  page that
comes later in the  document you are preparing--reasonable  defaults are
pre-selected for you.  But sometimes with extremely large documents, you
may exceed these preset values.  Thus, you will normally have  less than
100 footnotes in a single manuscript.  If you have more, you will get an
error message at the time PUB sees the 100'th footnote.  In  such cases,
check  with the  person  who is  responsible for  maintaining  the macro
packages to find out how to fix the problem.



     1.6    Other useful information              

     The bodies  of macros  (as well  as some  other things)  are called
"templates".  Whenever  you have a  construction beginning  with <CTRL>P
and ending  with <CTRL>Q  OR beginning with  $( and  ending with  )$ (an
equivalent but easier  to type construction),  then what is  between the
markers is called a template.  PUB does NOT allow  formfeeds (pagemarks)
in templates.

     If  you  have  a  file  named  MYPUB.DFS  it  will   be  "required"
automatically just after  <SUBSYS>PUBSTD.DFS.  In other words,  if there

------------
     (5) And in fact,  it is possible to  design your own  quite complex
printing forms, provided that you  are willing to learn about  using PUB
as a programming language.


                                   9
PUB User's Manual             New Package                    Section 1.6


is a file named MYPUB.DFS  on the connected directory, PUB will  read it
in before  looking at any  of the  text or commands  in your  .PUB file.
This is  convenient if there  are options for  which you  usually prefer
something  different than  the  defaults given  in the  Journal  or Memo
packages.

     The  IMSSS and  SUMEX  versions of  PUB  use <PUB>  as  the default
directory name.   This can cause  problems if there  is a file  on <PUB>
with  the same  name as  one that  you want  to use,  e.g. a  file named
Journal or Memo.  The solution is simple:  use the directory  name along
with the file name.  Example:

.Library <mch>journal;

would read in the file  named JOURNAL on directory <MCH> instead  of the
file <PUB>JOURNAL.

     The .Library macro, defined in <SUBSYS>PUBSTD.DFS (a short  file of
PUB macros that are always read in, regardless of whether or not you use
Memo or Journal), will cause PUB  to read in the file name  specified in
the argument.  The result is the same as if you had inserted the text of
the file beginning at the call on Library.  It does the same thing as:

.Require "filename" Source!File;

which you can use instead.  But  with Library you do not need  the quote
marks and you don't need to bother typing in the word Source!File.

     Bulletin boards  are maintained  for PUB at  both IMSSS  and SUMEX.
See <DOC>BBD.DOC for details on  using the BBD program.  To look  at the
PUB bulletins you  will need to  say CONN PUB  once you are  inside BBD.
These  bulletin  boards  are  used to  keep  you  posted  on  the latest
developments in the PUB program and sometimes also offer tips on  how to
do your own programming in PUB.   Also feel free to send notices  to the
bulletin boards yourself.




     2    Basic formatting commands            

     This section  describes the  defaults for  page size  and paragraph
size and shape, as well as how to change them.  It also describes how to
get  headings, footings,  footnotes, and  underlining.  Some  macros are
introduced  that make  it  easier to  create your  own  special formats.
Everything  in  this  section  is available  in  both  Memo  and Journal
formats.









                                   10
PUB User's Manual             New Package                    Section 2.1


     2.1    Page size and shape               

     PUB divides a page into three main areas:

The heading area  is a group of 0 or  more lines at the top of  the page
                  that are reserved for a heading if you want one.

The text area     is the part of the page that is reserved for  text and
                  footnotes.   It  can  be  divided  into  one  or  more
                  vertical columns.

The footing area  is a  group of 0  or more lines  at the bottom  of the
                  page following  the text area.   It is often  used for
                  the page number.

     The default page size is as follows:  The text will start on line 4
and continue through line 57.  It is printed in a single column,  with a
line length of 72 characters.  Lines 1 to 3 are reserved for the heading
area, which is left blank unless you change it.  Line 60 is reserved for
the  footing,  where  the  page number  will  appear  centered.   On the
PRINTRONIX printer, which uses a pica setting, this comes very  close to
giving a standard  typewriter page size, with  the text ending  about 1"
from the bottom of the page(6) and with the page number  appearing about
1/2" from the  bottom of the page.   If you prefer  something different,
all of these settings can be altered by

.Page Frame n High m Wide;
.Area Text Lines p To q;
.Title Area Heading Lines r To s;
.Title Area Footing Line t;
.Place Text;

where n is the number of lines you want on a page (including the heading
and footing  areas), m is  the width of  the lines, and  p to q  are the
lines actually allotted  for text.  The  default setting allows  3 lines
for a heading and 1 line for a footing.  R to s are the lines alloted to
the heading, and t is the  number of the line on which the  footing line
(usually the page number) will be placed.  The following are the default
settings:

.Page Frame 60 High 72 Wide;
.Area Text Lines 4 To 57;
.Title Area Heading Lines 1 To 3;
.Title Area Footing Line 60;
.Place Text;

If all of these values  are correct for your manuscript, then  you don't
need to include any of  these commands.  However, if you want  to change
any of the values, you must  give all five lines even though as  many as


------------
     (6) PUB will not use the last  line of the text area, in  this case
line 57, unless doing so will avoid a widowed paragraph or footnote.


                                   11
PUB User's Manual             New Package                    Section 2.1


four of the lines will be the same as the defaults.(7)  For  example, if
you only need to change the  width and not the length, you can  type the
default settings for all the other values, but the entire  five commands
must be given.

     Page  shape:   The page  will  be a  single  column.   For multiple
columns give the .Area Text Lines p To q command (above) as

.Area Text Lines p To q In u Columns v Wide|Apart;

Either Wide or Apart may be specified--BUT NOT BOTH.  U is the number of
columns, and v is as you would  expect:  if you say Wide, then v  is the
width of each column,  and if you say Apart,  v is the number  of spaces
between columns.  PUB will complain  if the settings do not  make sense,
e.g. if you gave the command

.Page Frame 60 High 120 Wide;
.Area Text Lines 1 To 60 In 3 Columns 50 Wide;
.Place Text;

PUB would complain because you specified that the total line  length was
120 characters, but  it would require at  least 152 characters to  get 3
columns, each 50  characters wide and with  a single space  between each
column.  If you  changed it to 2  columns, PUB would no  longer complain
and would leave 20 spaces between them.

     If  you  want  multiple  columns only  on  selected  pages  of your
document, see page 40 of (Tesler, 1972).

     Caveat:  You can  change the page shape  and size as you  go along,     
but each time you give the five-line "page frame" command to  change the
defaults,  PUB  will  get  a  fresh  page  and  start  the   new  values
immediately.  So  if you want  to do  this, make sure  that you  put the
command into your manuscript at a  place where you want a new  page.  If
all you want to do is to temporarily change the margins, other  and much                                                                    
better ways are described below.



     2.2    Headings and footings              

     The default is to not  have any predefined heading on pages  and as
footing to have the page  number in Arabic--except the title  page which
has none, and the table of contents and acknowledgment pages  which have
lowercase Roman numeral  page numbers.  There  is room with  the default
page size setting to include  a heading and the footing may  be changed.
Note that a heading has been used in this manual.  The commands are:

.Every Heading (left,center,right);
.Every Footing (left,center,right);
------------
     (7) There is  one exception.   If do not  want heading  and footing
areas, omit the two Title Area lines, and give the Area Text  command as
lines 1 to n, where n is as above.      


                                   12
PUB User's Manual             New Package                    Section 2.2


where you can substitute Even  or Odd for Every.  This means  that every
page or only the  even or odd pages  will have the specified  heading or
footing.  There  are three areas  in the heading  and footing.  The user
gives the  left, right, and  center areas as  indicated in  the commands
above.  Example:

.Odd Heading (SUMEX, PRELIMINARY, ANNUAL REPORT);

Would print SUMEX at  the left, PRELIMINARY centered, and  ANNUAL REPORT
snug with the right margin at the top of each odd numbered page.  Any of
the three areas may be left blank but the commas are needed to  show the
places, for example

.Every Heading (SUMEX, , ANNUAL REPORT);

The  following can  also  be used:  {Date}, {Month},  {Day},  {Year}, or
{Page!}.  PUB will fill in the current information, for example,

.Every Heading (ANNUAL REPORT, {Month} {Year}, Page {Page!});

would give a heading like

ANNUAL REPORT                 November 1974                      Page 10

If you are using Journal  or BookStyle formats with sections,  there are
several macros that are  sometimes useful for the heading.   See Section
3.5 for details.

     If you are  putting the page number  in the heading and  don't want
any footing, you will have to give

.Every Footing;

  or

.Every Footing (,,);

to  suppress the  page number  usually printed  by the  default footing.
Note the  two commas!  They  are needed  to tell PUB  that you  want all
three areas left blank.  If you want the number suppressed for page 1 in
Journal and BookStyle formats, as is sometimes done, give the command

.Every Footing (,{If Page! = 1 Then Null Else }{Page!},);



     2.3    Paragraph size and shape               

     There  are four  basic  features of  paragraphs, each  of  which is
discussed in detail below:

size       This covers the narrowing from each margin, the  line spacing
           between   lines  of   the  paragraph,   and  the   amount  of
           indentation.


                                   13
PUB User's Manual             New Package                    Section 2.3


shape      There are three basic shapes:

                          -----------------------------
                  -------------------------------------
                  -------------------------------------

                                    and

                  -------------------------------------
                          -----------------------------
                          -----------------------------

                                    and

                  -------------------------------------
                  -------------------------------------
                  -------------------------------------

           The first line of the paragraph is called the crown  line and                                                         
           the remaining lines are the vest lines.  The last line of the                                       
           vest is called the hem line.  The crown and vest indentations                              
           are set separately.

spread     There are two distinct kinds of spacing:  the number of lines
           left between paragraphs, called the preface, and the internal                                        
           spacing of the paragraph, which is called the spread.                                                         

numbering  Ordinarily,  paragraphs  are  not  numbered.   But  for  some
           purposes, such as lists, numbering can be done automatically.
           See Section 2.4 for details.

     Paragraph indentation:  The default crown setting gives an  8 space
indentation at the start of each paragraph.  This is consistent with the
default tab settings on the  terminals used at SUMEX and IMSSS.   It can
be changed by

.Indent1 _ n;

where n is the desired number  of spaces, and may be 0.   Another common
choice is 5, which is  a standard typing convention, and which  was used
for this document.

     Line spacing.  The default  spread setting is .Double  Space.  This
can be changed by

.Single Space;                or
.Triple Space;

Recall that the spread is the number of blank lines between lines within                                                                  
a paragraph.

     A second  setting controls  the preface, i.e.  the number  of blank
lines  between  paragraphs.  This  is  set to  1  so  that single-spaced



                                   14
PUB User's Manual             New Package                    Section 2.3


documents will  have a blank  line between paragraphs  and double-spaced
documents will be  uniformly double-spaced throughout.  The  setting can
be changed by

.Preface n;

where n is the desired number of blank lines between paragraphs.

     Paragraph breaks:   Blank lines (unless  within text that  you have
declared   you   are    formatting   yourself--see   Section    2.5   on
ByHand/EndHand) will  be ignored.   This means that  any blank  lines in
your text file will simply be treated as if they didn't exist.  Commands
for forcing blank lines are described in Section 2.5.

     The user signals the  start of a new  paragraph by typing a  tab at
the start of a text line.  If  there is no TAB key on your  terminal you
can use  <CTRL>I to  get a tab.   Note that  with the  default paragraph
indentation of 8 spaces, it appears as if the user-typed tab simply goes
directly to the output document.  If you start changing  the indentation
and paragraph break settings, you  will discover that this is  not true.
With Indent1 set to 0, for example, tab will cause a new paragraph to be
started; but it will not be  indented at all.  The only function  of tab
is to indicate the desired paragraph break.  Again:  tab will  behave as
usual  within ByHand/EndHand  blocks that  you are  formatting yourself.
Typing the tab key at some point in the text other than at the  start of
a text line is equivalent to typing 8 spaces.  There is  nothing special
about tab within the text.

     There is  only one change  you can make  to this handling  of blank
lines and  tabs.  You  may elect to  have blank  lines rather  than tabs
cause a paragraph break.  The command is

.BlankLine;

Thus instead of  signalling a new paragraph  by starting it with  a tab,
you could separate your paragraphs  with a blank line and never  have to
bother typing tabs.  Note that  the output document will be  exactly the
same in either case.  The .Preface setting determines whether there will
be  blank lines  between  paragraphs in  the document  and  the .Indent1
assignment determines how many spaces  will be left at the start  of the
first line  of the  paragraph.  This  is simply  a matter  of individual
typing habits.

     Extra spaces:  The default is for PUB to print extra spaces in your
text lines to even the margins.  This is called justification.  However,                                                
extra spaces that you type (except the two spaces between sentences) are
treated as if they were a single space.  The # character can be  used to
force spaces  if you only  need them sometimes.   If you  want     extra
spaces   to        appear  in the      output document, give the command

.Retain;





                                   15
PUB User's Manual             New Package                    Section 2.3


The default setting is .Compact; .(8)

     Justification  and filling:   The default  is to  both  justify and
fill.   Filling is  the operation  where words  from the  manuscript are
placed on the output line until  the next word is so long that  it would
cause the line to  overflow the current right margin.   Justification is
the insertion of spaces in the  line to even it out to the  margin.  See
Section 2.5 on the  ByHand/EndHand commands to completely turn  off both
of these features so that you can format  your own text.

     There is an intermediate position obtained by

.NoJust;

which will fill the lines but not justify so that the edges are left
ragged.  Some users may prefer this--it is a matter of personal
preference.  The default setting with justification performed is

.Adjust;

Generally speaking, if the PUB output file is going to be sent to a
publisher who will be responsible for the typesetting, it is much
preferable to prepare the document using .NoJust.  Note that by changing
the .PUB file to use .Adjust on one run and .NoJust on another run, you
can obtain copies that are suitable for pre-publication copies to hand
around and a copy that is more suitable to be given to a printer.  This       
paragraph was processed in NoJust mode.(9)



     2.4    Specialized paragraph formats              

     To  make  a  document  easy  to read  and  to  give  it  a pleasant
appearance, it is desirable to use a variety of paragraph formats to set
off various pieces of the text.  There are four formats provided to help
you do this:   Crown, Quote, List, and  Outline.  See Section 4.1  for a
description of the latter.  Each has a matching macro to restore the old
format.   Crown and  Quote  are unnumbered  while List  and  Outline are
numbered.  The  default shape  of List and  Quote is  ordinary paragraph
shape, while Crown  and Outline have  inverted paragraph shape  with the
vest lines rather than the crown line indented.  All of the  formats use
single-spaced  paragraphs (with  a blank  line between  paragraphs).  In
each format, arguments can be given  to set the margins and the  size of
the indentations.  These formats  can generally be embedded  within each
other for quite complicated document structure.  Additionally, there are

------------
     (8) See Section 1.4.3 for  a discussion of how the  characters ".",
"?", "!", and ":" are treated in Compact mode.

     (9) Unless you are very experienced, you are advised to seek out
competent editorial assistance if you are preparing a dissertation or an
article or book for publication.  This may save you some very unwelcome
surprises.   Note also that this footnote is in NoJust mode.


                                   16
PUB User's Manual             New Package                    Section 2.4


variables available to change the default spread (i.e.,  spacing between
lines).

.Crown( ParagraphIndent, LeftMargin, RightMargin);

The crown line  in this format  is not indented  and the vest  lines are
        each indented  8 spaces.   The right margin  is not  affected at
        all.  Paragraphs are single-spaced.

These  defaults  are probably  not  useful for  many  purposes,  but the
        arguments can be used to set up different formats.

Each paragraph is started with a tab even if it will have no indentation
        in  the  document.  The  tab  merely signals  the  start  of the
        paragraph.

Use #'s rather than spaces to make sure the spacing is preserved exactly
        as you type it to get everything lined up.

Two examples of the use of this format are given below.

IMPORTANT NOTE:  The CROWN macro affects only text in fill mode.   So in                                         
        particular, text that is inside a ByHand block will not have the
        parapgraph shape you  set with Crown.   If you want  the margins
        reset in nofill mode too see the NOTE macro below.

EXAMPLE 1:  If you put the following in your manuscript

.Crown 8,16,8;
        [NOTE:  This setting will make a good format for a
note such as this one.]
.EndCrown

it will look like the following in the document:

        [NOTE:  This setting will make a good format for  a note
                such as this one.]

EXAMPLE 2:  The following lines in your manuscript

.Crown 5,18,5;
        Crown########uses inverted paragraph shape.
Crown and vest indents may be set and the right margin may be
set.  To narrow the left margin add the amount of narrowing to
the amount of indent on crown and vest.  Change the spacing with
the variable CrownSpacing.

        Quote########just like Crown, but the margins
are narrowed.  This means that hand-formatted text will use the
margins you set up.  But there is one tricky point:  The
paragraph indent is figured from the left margin you give in the
Quote macro.  So if you want to have inverted paragraph shape,
you have to set the first argument to be the negative of the                                             
left margin indent you want.  For example, .Quote 8,8,8; would


                                   17
PUB User's Manual             New Package                    Section 2.4


move the left and right margins in by 8 spaces and the first
lines of paragraphs would be indented 16 characters from the                                      
original left margin.  To get "reversed" paragraph format with
Quote you would have to give something like Quote -8,8,8;.

        List#########uses regular paragraph format.
Paragraphs are numbered automatically.  Both margins and first
line indent may be set as can the printing form of the
numbering.  Change the spacing with the ListSpacing variable.

        Outline######uses inverted paragraphs and numbers
them in five levels.  See Section 4.1 for details.
.EndCrown;

come out looking like the following in the document:


     Crown        uses  inverted paragraph  shape.  Crown  and vest
                  indents may  be set and  the right margin  may be
                  set.  To narrow the left margin add the amount of
                  narrowing to  the amount of  indent on  crown and
                  vest.   Change  the  spacing  with  the  variable
                  CrownSpacing.

     Quote        just like  Crown, but  the margins  are narrowed.
                  This means that hand-formatted text will  use the
                  margins  you set  up.   But there  is  one tricky
                  point:  The paragraph indent is figured  from the
                  left margin you give  in the Quote macro.   So if
                  you want  to have  inverted paragraph  shape, you
                  have to set the first argument to be the negative                                                           
                  of the left margin indent you want.  For example,
                  .Quote 8,8,8;  would  move  the  left  and  right
                  margins in  by 8  spaces and  the first  lines of
                  paragraphs would  be indented 16  characters from                                                
                  the  original  left  margin.   To  get "reversed"
                  paragraph  format with  Quote you  would  have to
                  give something like Quote -8,8,8;.

     List         uses  regular paragraph  format.   Paragraphs are
                  numbered automatically.   Both margins  and first
                  line indent may be  set as can the  printing form
                  of the  numbering.  Change  the spacing  with the
                  ListSpacing variable.

     Outline      uses inverted paragraphs and numbers them in five
                  levels.  See Section 4.1 for details.

     To restore normal paragraphing, give the

.EndCrown;

command, which returns  things the way they  were at the point  that you



                                   18
PUB User's Manual             New Package                    Section 2.4


gave the  Crown command.  Thus,  you could embed  a Crown  EndCrown pair
inside  another,  for example,  to  get a  paragraph  which  was further
narrowed.

.Quote( LeftMargin, RightMargin, ParagraphIndent);

Text appearing  between the  commands  .Quote and  .EndQuote  is treated
        exactly as in  Crown with the  only difference that  the margins
        are narrowed.  This means that hand-formatted text will  use the
        new margins, which is sometimes more convenient.  If you want to
        change the default single spacing permanently, put the command

        .QuoteSpacing _ <n>;

        where <n> is 2 for double spacing, etc. at the beginning of your
        PUB file with  the other variable  assignments.  If you  want to
        change it for a one time use, put the above  variable assignment
        just  before  the  Quote command.   However,  you  will  have to
        "restore" the old value just after the .EndQuote;  otherwise the
        value you assigned will be used in subsequent calls on the Quote
        macro.

.EndQuote;


.List( ParagraphIndent, LeftMargin, RightMargin, PrintingForm );

            1)  This format narrows each margin by 8 and indents
        the first line of paragraphs by 4.  These may be changed
        by the arguments.   Lines within paragraphs  are single-
        spaced.

            2)  Paragraphs   have   regular   shape    and   are
        automatically numbered.   The printing form used  is the
        number followed by a ")".   If you need to  change this,
        see the discussion of printing forms in Section 4.1.

            3)  Instead of signalling new paragraphs with a tab,
        each is  preceded by the  command line  .Item;  and then
        the  text begins  at the  margin on  the next  line, for
        example,

        .List;
        .Item;
        First item on the list is typed starting at the margin
        and may extend as many lines as necessary.
        .Item;
        Now the next item.
        .EndList;


            4)  If you want a list in this format with more than
        one level of numbering  then the .List ( )  and .EndList



                                   19
PUB User's Manual             New Package                    Section 2.4


        pairs can be nested with the appropriate  printing forms
        given.

        .List;
        .Item;
        first item will have default printing form 1)
        .List (,,,"A)");
        .Item;
        this will be a sublist with margins narrowed 8 more than the 8
        for the outer level, i.e., narrowed 16 and the printing form
        will use upper case letters.
        .EndList;
        .Item;
        now another item in the outer level--item 2)
        .EndList;
        will produce


                    1)  first  item  will  have  default
                printing form 1)

                            A)  this  will  be a
                        sublist   with   margins
                        narrowed 8 more than the
                        8  for the  outer level,
                        i.e.,  narrowed  16  and
                        the  printing  form will
                        use upper case letters.

                    2)  now  another item  in  the outer
                level--item 2)

            5)  To   change   the  spread,   use   the  variable
        ListSpacing.  See  the discussion of  CrownSpacing above
        for details.

            6)  Within  the  List  format  (as  for  Quote), the
        margins  are  actually  narrowed  so  that  any  ByHand/
        EndHand  blocks  (see  Section 2.5)  that  you  use will
        also have the narrowed  margin.  Thus you can  type your
        ByHand block exactly  as you would normally  in relation
        to the  left margin of  your manuscript  file.  Remember
        that  your  lines  must be  shorter  to  fit  within the
        narrowed line width.  When  you do an embedded  quote or
        list, it  will be narrowed  in from the  narrowed margin
        rather than  from the original  margin.  With  Crown and
        Outline formats this is not true.  In these  formats the
        margins are not  actually narrowed.  Rather  the indents
        are set.  This means that ByHand/EndHand blocks will use
        the original margins.  So if you want to line up exactly
        under a Crown paragraph, you will have to figure how far
        in from the left margin to put your ByHand block  to get
        it lined up.  Similarly to embed these two  formats, the



                                   20
PUB User's Manual             New Package                    Section 2.4


        amount of the higher level form will have to be added to
        the indent for  the next level.  These  situations occur
        rarely.  Just type the  text in however you want  and by
        looking at the first PUB run, you will easily  see where
        it should be and can add or take out spaces.

     To  end  a list,  stop  the paragraph  numbering,  and  restore the
margins, give the command:

.EndList;



     2.5    Other formatting commands              

     In this section, a few commands will be presented that allow you to
modify the format  of the document.  The  ones given here are  among the
simplest to use PUB commands.

     PUB is fairly  smart about where to  break for pages and  will only
rarely produce "widows" (the hem [last] line of a paragraph as the first
line on a page).   However, sometimes you may  have a few lines  of text
that belong together and shouldn't be split over a page  boundary.  Give
the command

.Group;

before the text and the command

.Apart;

after the text.  This tells  PUB  that all the  text between  .Group and
.Apart must be put on the same page.  The text shouldn't be more  than a
few lines long or partially blank pages may be created in an  attempt to
keep too large a block of text together.  And if the text is longer than
a  page,  PUB  may  behave  strangely.   Both  of  these  commands cause
paragraph  breaks.  If  you  don't  want  a paragraph  break  follow the
command by Continue, e.g.,

.Apart; Continue;

which will suppress the  indentation on the next line  but unfortunately
leaves the previous line unjustified as though it were the last  line of
a paragraph.  It is definitely  best not to worry about this  problem at
all  when you  type the  manuscript initially.   When you  proofread the
document, you can check for any bad places and add the grouping.

     To leave n blank lines use the command

.Skip n;

(just .Skip; is  equivalent to .Skip 1;).  If  any of these  blank lines
would fall at the top of a  new page, they are not printed and  the text



                                   21
PUB User's Manual             New Package                    Section 2.5


restarts at the top of the page.  If you really want all the blank lines                                         
for a purpose such as to later add a drawing, use the command

.Group Skip n Apart;

Note that there is NO semicolon between Group and Skip in                   
this case!

     To force PUB to start a new page put the command

.Skip To Column 1;

at the point where you want the page break.  If this command  appears at
a point where  PUB has just  obtained a fresh  page in the  document, it
does nothing.  So  it is useful  in cases where a)  you do not  want any
more text on the current page,  but b) if the current page is  full, you
do  not want  to leave  a blank  page.  To  force PUB  to close  out the
current page and leave it blank if it was just started, use the command

.Next Page;

and in case  you want several pages  left blank (this  includes headings
and footings), use the command

.Blank Page n;

which will leave n blank pages in the document.



               To  narrow  the  margins  temporarily  (without
          changing anything else) give the command

          .Begin Narrow l,r;

          where l is the  number of spaces the left  margin is
          to be moved in and r the number for the right margin
          (either  may be  given  as 0),  for  example, .Begin
          Narrow  20,15; .  Then  you type  the text  that you
          want with the new  margin sizes and finish  with the
          command

          .Widen; End;

          which  will put  the  margins back  where  they were
          before they were narrowed.   The l and r  values can
          be negative to move the margins out rather  than in.
          This paragraph was done with l=r=10.

     To center lines of text  put the command .Begin Center  followed by
the lines  to be centered  and ended with  the command line  .End;.  For
example,

.Begin Center;


                                   22
PUB User's Manual             New Package                    Section 2.5


.Skip; Group;
title
.Skip 2;
{Date}
.Skip 2;
author
.Apart; End;

will result in:


                                 title


                             March 31, 1979


                                 author


     If there is only one line to be centered you can use

.Once Center;
line to center

and  the  single line  will  be centered  with  regular  text formatting
resuming automatically  with the following  line.  It is  important that
the next line is the text to center.  A common error is to leave a blank
line between the command line and the text to be centered.

     Sometimes you may want to put comments in your manuscript that will
not appear in the finished document.  For example, while you  are typing
you may discover  that some information needed  for a table  is missing.
You can leave a blank space and use the Comment feature to leave  a note
reminding yourself to add it later, for example

.Comment put date of conference here;

The comment must be ended with  a ; and must not contain any  other ;'s.
If it  takes more than  one line,  each line must  start with  a period.                                             
This is important, because if you forget, PUB assumes you only  wanted a
one  line comment.   The worst  case  is when  you have  a  comment that
extends across 3 or more lines,  and you forget the period at  the front
of the  second.  That  line is sent  to the  document and  the following
command  lines(s)  will be  interpreted  as PUB  commands,  usually with
disastrous  results.  You  can  use an  editor  to search  for  the word
Comment to find all of these notes to yourself.

     If you prefer, you can use << to begin a comment and >> to  end it.
This is useful if you want some semicolons in the comment or if  you are
temporarily removing  some PUB commands  that have semicolons.   Just as
with Comment, each line must be a command line.




                                   23
PUB User's Manual             New Package                    Section 2.5


     You  can also  have PUB  type messages  to you  at the  time  it is
processing your file.  Just give the command

.Tty _ "<message>";

where <message> is the text you want typed out on the terminal  when PUB
gets that far in processing your file.  It is sometimes a useful  way of
reminding yourself  of something that  needs doing.  The  <message> must
occur all on one  line and if there  are any quotation marks  inside it,
they must appear doubled.  Of course, you can get multiline  messages by
repeatedly using the Tty command.

     For some complicated formats such as tables, the commands to PUB to
set  up the  format are  more trouble  than they're  worth.  It  is much
simpler to type in the text yourself exactly as you want it to appear in
the final document.  Give the command

.ByHand;

and then all the text that you type until the command

.EndHand;

will be exactly as you type  it.  The current left margin will  be used.
Any lines  you type  must fall within  the current  right margin  or the
extra characters  will be  thrown away.  PUB  will warn  you that  it is
throwing them away  with the message  "NOFILL LINE TOO  LONG".  Remember
that you are doing the  formatting for yourself so, for example,  if you
want doublespacing you must actually put in the blank  lines (ordinarily
blank lines are ignored but in  this mode they are used.)  You  can give
any  of  the  commands  in  this section  and  use  any  of  the special
characters such  as ^ to  superscript.  PUB will  still also  divide the
text  into pages.   When  you give  the  .EndHand command,  it  does not
automatically cause a  paragraph break so  you don't need  Continue.  Of
course, if your  next line of  text starts with a  tab, there will  be a
break.  An example is

.ByHand;

 COLUMN1                     COLUMN2                      
    a                           c
    b                           d
.EndHand;

     Two of the other commands from this section are particularly useful
with ByHand blocks.  They are

.ByHand; Center;
                   and
.ByHand; Group;

No special command needs to be  given to end these modes (.Apart  is not
needed) since the .EndHand will provide the proper end.  With Center all



                                   24
PUB User's Manual             New Package                    Section 2.5


the  text  lines will  be  centered and  with  Group they  will  be kept
together on a page.



     2.6    Underlining            

     PUB ordinarily uses  a sequence of the  control characters A  and X
for underlining.  Since these characters are difficult to type with most
editors, an  underlining format is  available.  Additionally,  there are
two  special  underlining  formats available  for  use  with  the DIABLO
printer.

     You may define a sequence of  up to 5 characters that you  will use
to signal  the start  of underlining  and a  single character  that will
signal the end of the  underlining.  Choose the characters you  want and
indicate them with the command

.UnderlineBetween (<1-5 chars>,<single character>);

where the  appropriate characters  are substituted  for <1-5  chars> and
<single character>.    Any  character  may be  used  except  the special
characters listed in  Section 5.4 or the  sequence $$ which is  used for
footnotes.  The * character is  also used as a terminator  for footnotes
so it is  a poor choice  to use as  the terminating character  since you
would be unable to  underline within a footnote.  The  underline command
used in this document was:

.UnderlineBetween (<<,>);

This macro defines  a signal response for  you (see Section  1.4.3), and
you can place it anywhere before  the first piece of text that  you want
to underline.  You only need to use UnderlineBetween once.

     At  IMSSS (but  not at  SUMEX),  it is  usually better  to  put the                     
following PUB command in your file:

.If Not Xcribl Then Device Tty;

This will result in slightly better handling of underlining.   At SUMEX,
because of differences in the  listing program, the results will  not be
very desirable if this line is added.

     Courtesy  of William  Sanders  at IMSSS,  PUB also  does  two other
styles  of  "underlining" on  the  DIABLO printer  (only!).   These are:
emboldening, in which the text is overtyped four times and so  comes out
noticably  darker than  normal text,  and a  combination--emboldened AND
with standard underlining.

     After you have called your macro file but before you begin the text
of your document, you will need to give the three following commands:

.UnderlineBetween (<<,>);
.EmboldenBetween ([[,]);


                                   25
PUB User's Manual             New Package                    Section 2.6


.UnderboldBetween (<[,]);

     Just as with  UnderlineBetween you can  pick your own  sequences of
characters (1 to 5 for the first, and a single character for the second)
for  each macro.   The above  are only  suggestions!  But  try  to avoid
choosing anything that you will also need as ordinary text, e.g.  if you
might  reasonably  expect to  have  a  lot of  square  brackets  in your
document, you might want to give

.EmboldenBetween (\\,\);

     EmboldenBetween:  To get "bold" text, surround it by your choice of
characters, just as  you do for  UnderlineBetween.  For example,  if you
give the pub command

.EmboldenBetween ([[,]);

then  any  text  that  begins  with  "[["  and  ends  with  "]"  will be
overprinted four times in the final document.

     UnderboldBetween:  Just as for the other two, surround the text you
want both underlined and darkened  by your choice of characters  for the
underboldbetween macro.  The text will be both underlined AND darkened.

     NOTICE:  When you are ready  to make a DIABLO listing, you  need to
use the  proportional spacing  feature, see Section  4.2.  You  only get
these  special kinds  of underlining  if you  list the  document  on the
DIABLO  printer  using the  program  DIABLO.SAV and  the  .DOC  file was
prepared using the proportional spacing feature.  In all other cases you
will get normal underlining EVERYWHERE.

     Spaces between words are not underlined.  However, if you are using
the DIABLO printer and you want the spaces between words also underlined
use  _   (underbar  or  back-arrow)   instead  of  space,   for  example
<<text_to_be_underlined>.   On  the  PRINTRONIX, you  will  just  get an
underbar printed where you wanted the space.  This applies to  the other
forms of underlining described below as well.

     WARNING:  Please  note that  when you  are inside  of a  ByHand the
underlining cannot extend across a line.

     Example:  Suppose  you gave  .UnderlineBetween(<<,>); and  you have
the following in your text:

.ByHand;

        PUB is a language full of idiosyncrasies, a fact <<too
            well known>
            to many users.

.EndHand;

PUB does the wrong thing here  and it is very likely to attempt  to fill



                                   26
PUB User's Manual             New Package                    Section 2.6


the first line up  to the end of  the underlining.  This will  cause the
error  message  "NOFILL  LINE  TOO LONG"  followed  by  the  first three
characters it discards.

     The fix is simple enough: start and end the underlining on the same
line.  So in the above example, you would replace the text with
.ByHand;

        PUB is a language full of idiosyncrasies, a fact <<too>
            <<well known>
            to many users.
.EndHand;

     Then  everything  will  come  out  right.   This  one  counts  as a
"feature"  rather than  a  "bug" since  PUB  will insist  on  treating a
section of underlined text as a unit.

     A  similar  problem  can  arise in  certain  special  parts  of the
manuscript--sometimes in  footnotes, but  more commonly  in bibliography
entries.  The difference is that in such cases PUB will complain

"FILL LINE TOO LONG"

which  is  your  clue that  the  most  likely problem  is  a  section of
underlining in a bibliography entry or footnote.

     NOTE:  In regular text, there is no known problem with beginning to
underline on one line and ending on a later line.

     If, for some  reason, you do not  want to use  the UnderlineBetween
macro, then the text to be underlined is preceded by                           

<CTRL>A<CTRL>X

and followed by

<CTRL>X<CTRL>A

For example,

<CTRL>A<CTRL>Xtext <CTRL>X<CTRL>A.

Any spaces appearing between the words will not be underlined.   As with
UnderlineBetween,  if  you   want  the  entire  text   including  spaces
underlined, use  the _  character instead  of a  space.  Note  that this
character will  appear on  your terminal  as either  a back-arrow  or an
underbar.  For example,

<CTRL>A<CTRL>Xwords_to_be_underlined<CTRL>X<CTRL>A

In TV, <CTRL>A is octal 1  and <CTRL>X is octal 30.  In SOS,  <CTRL>A is
?! and <CTRL>X is ?9 .)




                                   27
PUB User's Manual             New Package                    Section 2.6


     The same warnings  about extending underlining across  lines inside
of a ByHand block or bibliography entry or footnote apply for  this form
of underlining.



     2.7    Superscripting and subscripting              

     There are two sets of  commands that allow you to  get superscripts
and  subscripts.   Just  to  make it  easier  to  talk  about,  sub- and
superscripts  together  are  called  somescripts.   The  first  kind  of
somescripting produces full line somescripts, e.g. a superscript  is one
full line above the regular text.   This is what you need to use  if you
are not going to make the  final listing on the DIABLO printer.   But if
you  are,  there  are  a  series  of  macros  which  will  do  half-line
somescripting for you.


     2.7.1    Somescripts for the lineprinter                 

     Subscripting:   Text  to  be  subscripted  should  be  preceded  by
<CTRL>A.   If there  is  more than  one  character, the  text  should be
enclosed in [ ] and should all be on the same line, i.e., do not  type a
<CR> between [ and ].  For example,

x<CTRL>A2 and (x+4)<CTRL>A[x+2]

become

x  and (x+4)
 2          x+2

     Superscripting:   The  superscript  format  is  the  same   as  the
subscript format with a ^ used instead of <CTRL>A.  (This may be  an up-
                                                               1
arrow or a caret on your terminal.)  For example, x^1 becomes x .

     Aligning subscripts and superscripts:   The & character is  used to
request alignment.  A subscript  or superscript can be aligned  with the
text  line by  sub/superscript&[text].  For  example, <CTRL>A[#t#]&[sum]
will  become sum.   The &  can also  be used  to align  a  subscript and
              t 
superscript  with  each other  (these  requests can  be  nested  to form
complex  formats.)  The format  is  subscript&superscript,  for example,
                      1
x<CTRL>A2&^1 becomes x .  It is  important to note that there  cannot be
                      2
any  spaces around  the &.   If there  are, PUB  will just  print  it as
ordinary text.  This  convention makes it easy  to use the  ampersand in
regular text without having to "quote" it using <CTRL>B.

     There is also a macro available to help you type in fractions:

{Fraction numerator,denominator}


                                   28
PUB User's Manual             New Package                  Section 2.7.1


The numerator  is superscripted, the  denominator is subscripted,  and a
row of dashes  of the appropriate length  appears on the base  line. For
                                             x+y*z-2
example, use {Fraction x+y*z-2, z+2}  to get ------- . This  format will
                                               z+2
not do half-line up or down for the DIABLO.


     2.7.2    Somescripting on the DIABLO Printer                  

     If you will be using the DIABLO printer for your final copy  of the
document then it is possible to get halfline somescripting.

     With  ordinary sub/superscripts,  an  extra line  will  actually be
inserted in  the document for  the sub/superscript.  The  DIABLO printer
will do half-line printing so that an extra line is not needed.  Instead
of <CTRL>A and ^, use the following macros:

{Sub text-of-subscript}
{Sup text-of-superscript}
{SupSub text-of-superscript,text-of-subscript}
{Bu number-of-spaces-to-backup}
{Hu number-of-halflines-to-go-up}
{Hd number-of-halflines-to-go-down}

The usual  conventions about macro  arguments apply.  See  Section 1.4.1
for details.   In particular,  remember that you  type in  the arguments
with no spaces around them  unless you want spaces in the  output.  Also
note that there should be no spaces around the comma which separates the
arguments in the SupSub command  unless you want spaces in  your output.
For complex formats it is best  to use #'s rather than spaces  to insure
the correct amount of spaces.   If the somescript has spaces  within it,
it should either be surrounded with vertical bars, e.g. {Sub |X + 2|} or
#'s  should be  used, e.g.   {Sub X#+#2}.   If the  space is  to  be the
initial character, or if the argument contains a comma,  parenthesis, or
quote   mark,   use   the   vertical   bar   format!    An   example  is
Y{Sub |x#+#2|}#=#Z{sub |x + (y + 2)|}.    The   SupSub   macro    is   a
convenience for simple formats  with both a sub/superscript on  the same
variable.   The backup,  halfup, and  halfdown commands  will  make more
complicated formats.  If no number argument is given to  these commands,
then 1  is assumed, e.g.,   {Hd} = {Hd  1}.  For example,  the half-line
version of

         2
        V
         g
          h

could be made with V{sup 2}{bu 1}{sub g}{hd 2}h{hu 2}.  The Sub, Sup and
SupSub commands do the halfline  up/down and backup (if needed)  for you
and always return to  the base line when  done.  The Hd and  Hu commands
raise or lower the printer and leave it there (they do not space forward
or back) so after you have printed the text on the new level you need to
give the reverse command to get back to base line.


                                   29
PUB User's Manual             New Package                  Section 2.7.2


     When you list your file on the PRINTRONIX or type it on a terminal,
there  will  be  <CTRL>R's  for  halfup,  <CTRL>S's  for  halfdown,  and
<CTRL>H's (or perhaps real backspaces) for backing up. Thus  a subscript
will look like ^Stext-of-subscript^R.  The output will look quite messy,
but you can usually figure it out well enough to check that  it's right.
When  you run  the DIABLO  program  to print  the document  on  the high
quality  printer,  these  control characters  will  be  removed  and the
appropriate commands sent to the terminal instead.

     The .Sneak command is very  useful in helping you to make  your own
characters on the Diablo printer, and it is often a necessity if you are
using the .Bu  command described above.  .Sneak  lets you add text  to a
line that is  not counted when  PUB figures out  how long that  line is.              
For example, the result of the following line would be, on the Diablo, a
quite reasonable way of saying that A is not equal to B:

                A ={BU}{SNEAK "/"} B

What will happen is that after  printing the =, the Diablo will  back up
one space  and print  a /  superimposed on  the =  sign.  Of  course you
wouldn't really need  to bother using Sneak  in the above case,  but you
would if you wanted to get it in a regular line of text.  If  you didn't
use the .Sneak  command, your line would  come out one  character short.
Note  the quote  marks in  the  example above!   You can  sneak  as many
characters  at a  time as  you want.   For example,  if you  wanted five
repetitions  of   a  not-equal   symbol  in  a   row,  you   could  give
====={BU 5}{SNEAK "/////"}.



     2.8    Footnotes            

     Footnotes are printed  at the bottom of  the current page.   If you
want them to be printed on a  page at the end of the document,  give the
command

.WantNotePage _ True;

This  separate   footnote  page  is   not  available  in   Memo  format.                                      
Ordinarily, a blank  line is printed at  the bottom of the  page between
the end of the text and the first footnote.  If you would rather  have a
different line such as a row of dashes, then give the following command

.FootSep _ "<the line you want>";

for example,

.FootSep _ "------------";

     WARNING:  Apparently macros do not work right inside  of footnotes.
The usual symptom is that everything will be fine up to the  point where
the first macro is called.   But instead of doing whatever the  macro is
supposed to, PUB will include the macro name, as well as the rest of the



                                   30
PUB User's Manual             New Package                    Section 2.8


text following  the macro in  the regular area  instead of  the footnote
area.  This is probably  a PUB bug, but it  is unlikely that it  will be
fixed in the near  future.  If you need  macros in a footnote  contact a
PUB expert--basic PUB commands seem to work fine inside of footnotes, so
it is often possible to take corrective action.

     Footnotes are preceded by $$ and ended by *.  They are typed at the
point where the footnote number will appear in the final  document.  For
example, this is the text$$And  this is the footnote.* and now  the text
continues.(10)   In Journal  and  Memo formats,  footnotes  are numbered
consecutively in  the entire document.   In BookStyle  format, footnotes
are numbered in each chapter.   If you want a different  separation line
between  the text  and the  footnotes, use  the .FootSep  _ "<separation
line>"; command.

     Other variable assignments that  you can use to select  options for
footnotes are:

  HalfLineNote     If you set this to True, PUB will superscript the
                   footnote   number.     When   printed    on   the
                   lineprinter, it  will appear as  ^Rnumber^S.  Use
                   the  DIABLO  program  to  print  the superscripts
                   properly.

  PlainNumberNote  Ordinarily,   footnote  numbers   are   given  in
                   parentheses,   e.g.,   (1)   but   if   you   set
                   PlainNumberNote  to  True,  PUB  will   omit  the
                   parens.  This is useful since if  you superscript
                   the  footnote  the  parentheses  are  not  really
                   needed.

  StarNote         Instead of Arabic numbers for  footnotes, setting
                   this  variable to  True will  mark  the footnotes
                   with  the appropriate  number of  asterisks.  The
                   halflinenote  command  can  also  be   given  for
                   superscripting  the  asterisks.   Unless  you set
                   PageNote to True also, you are limited to a total
                   of 25 footnotes in the document.

  PageNote         If the starnote option is used then  you probably
                   want to also give the pagenote option to have the
                   footnotes counted in page rather than through the
                   entire  document (or  in chapter  for BookStyle).
                   You  cannot use  the PageNote  option if  you set
                   WantNotePage  to   True--PUB will  remind  you of
                   this and set PageNote back to False.

  NoteSpacing      The  default is  to single  space  the footnotes.
                   However,  especially  if  you  want   a  separate
                   footnote section,  you may  wish to  change this.
                   For  example, if  you want  your footnotes  to be
                   double spaced, give the PUB command
------------
     (10) This is the way footnotes will look.


                                   31
PUB User's Manual             New Package                    Section 2.8


                   .NoteSpacing _ 2;

     If you are using one of the standard macro packages such as Journal
or Memo,  footnotes usually come  out o.k. even  if typed in  within the
scope of a List, Outline, Crown, or Quote.  But there is  one exception:
If you have  manually narrowed the margins,  e.g. by using Narrow  or by
directly setting  LMarg and/or  RMarg, at  the time  you called  List or
whatever, the footnotes will come out with the changed margins.

     To get the  footnotes to come out  properly put the  following into
your text shortly before the first footnote:

.SetOrigMargs _ True;
.OrigLMarg _ n;
.OrigRMarg _ m;

n is the  left margin for  the footnote (usually 0)  and M is  the right
margin  (usually 72,  unless you  have used  the Page  Frame  command to
change the default.)




     3    Special sections of the document              

     The  special sections  described below  are NOT  available  in Memo                                                 
format, though they are in both Journal and BookStyle formats.

     One remark applies to  all of these special sections:   each begins
with a title of some  kind (e.g., Index or References) followed  by some
number of  blank lines.   You can  control the  number of  lines skipped
between the headings and the first line of text by changing the value of
the  variable  HeadingSkip.   The  default is  to  skip  4  blank lines.
Usually it will be a bit more (5 in most cases), because the  first line
of text  in the section  will be  a paragraph and  so normally  one more
blank line will be included  just above the first paragraph.  So  if you
only wanted a total of three blank lines to be left between  the heading
and the first line of the text you would set HeadingSkip to 2:

.HeadingSkip _ 2;



     3.1    Title page             

     If you do not have  a table of contents or  acknowledgment section,
you may  type your title  page after the  initialization section  and it
will come out  in the proper  place.  If you do  not have a  PUB section
heading following  the title  page (which  automatically starts  a fresh
page), you  will have to  give the .Next  Page command after  you finish
typing  the title  page.   The Center  and  Skip  commands  described in
Section 2.5 are particularly useful in creating the title page.

     But a better way to get a title page is to give the command


                                   32
PUB User's Manual             New Package                    Section 3.1


.TitlePage

followed by  $( on the same  line(11) or you  can use <CTRL>P  (which is
octal 20 in  TV and ?+  in SOS).  Then  input the title  page, including
whatever formatting commands  are needed.  End  the title page  with the
command line .)$ or  .<CTRL>Q (which is octal 21  in TV and ?,  in SOS).
Headings and  footings are ignored  on the title  page, and  the default                                                                 
format for the main body  of the document is restored--even if  you have
overridden it.  This is necessary to insure that some  reasonable format
is  available to  you, since  it may  have been  changed if  you  have a
bibliography or separate footnote section  or if you have an  index, all
of which change the format.  Note that the title page and  other special
sections at the front of the document are prepared after everything else
is done.  This is why the initial pages before the actual text are given
Roman numerals in books.

     You  can control  the spacing  on the  title page  (as well  as the
abstract and acknowledgments)  by setting the  variable .StandardSpacing
at the beginning of your PUB file (before you say .Journal).  So, to get
single-spacing put

.StandardSpacing _ 1;

in your file.  Don't forget to  put the .Standard Back macro at  the end
of your manuscript or the title page won't appear in the document!



     3.2    Abstract page             

     If you  wish, you  can have  an abstract  that will  come out  on a
separate page between  the title page and  the table of  contents.  Give
the command

.Abstract

followed by $( or <ctrl>P and then start on the next line typing  in the
text of your abstract.  On the line following the text, type the command
line .)$ or .<ctrl>Q to end the abstract.  PUB will print Abstract for a
heading and number the  page with a Roman  numeral.  If you want  PUB to
print something other than  "Abstract" (e.g. ABSTRACT or  Preface), give
the PUB Command

.AbstrHead _ "<your heading>";


     See also the remarks  about .StandardSpacing and .Standard  Back in
Section 3.1, and the remark about HeadingSkip on page 32.



------------
     (11) NOTE:  That is really a "$" and not an <esc> or <enter> or alt
mode!!  This also applies below.


                                   33
PUB User's Manual             New Package                    Section 3.3


     3.3    The table of contents               

     If you are not making   section headings with PUB (or don't  want a
table of contents for some other reason), give the command

.NoContents _ True;

Ordinarily, only the top two  levels of sections (Sec and Ss)  are given
in  the Table  of Contents  even if  you have  used all  four  levels of
sectioning.  This is because there really isn't room on the page  to get
all  four levels  indented properly  and have  it look  attractive.  The
table of contents for this document was made using the defaults,  so you
may wish to refer to it as a sample.

     On the  other hand, if  you want  all four levels  in the  table of
contents, give the command

.FullContents _ True;

which will squeeze everything in.  See Appendix B for an example of this
format.  If you  are not using fullcontents  and only have one  level of
sections, i.e., Sec's then give

.SsPrint _ Null;

to make your PUB runs go a little faster.

     The default is for PUB to  add a period to the Sec numbers  (not to
Ss, Sss,  or Ssss).   The period is  not added  to the  section headings
within the text--just in the table of contents.  If you give a

.SecPrint _ "1."; (or "I." for standard BookStyle)

then the extra period will  be suppressed so there is no  double period.
However,  if you  are using  the default  SecPrint and  just  don't like
having the period added in the table of contents use

.NoPeriodSec _ True;

     If  you  want  to  change the  title  from  the  default  "Table of
Contents" to, for example, "TABLE OF CONTENTS", you can do so  using the
PUB command

.ContentsHead _ "<your title>";

The  warnings about  AckHead at  the end  of Section  3.4 also  apply to
ContentsHead.  See the remark about HeadingSkip, page 32, if you want to
change the number of blank lines skipped between the title and the first
entry.







                                   34
PUB User's Manual             New Package                    Section 3.4


     3.4    Acknowledgment page             

     If you  use tables  and figures  (see Section  4.4), and  you asked
for a  list of tables  and figures,  they will come  out just  after the
table of  contents if  you have one.   The next  special section  is the
acknowledgment page if you are planning on having one.  Give the command

.Acknowledgments

followed by $( or <ctrl>P and then start on the next line typing  in the
text of your acknowledgment.  On  the line following the text,  type the
command line .)$ or .<ctrl>Q to end the acknowledgment.  PUB  will print
Acknowledgments for a heading and number the page with a  Roman numeral.
If you want PUB  to print something other than  "Acknowledgments" (e.g.,
ACKNOWLEDGEMENTS or Preface), give the PUB Command

.AckHead _ "<your heading>";

If you do not want this heading to be underlined at the top of the page,
you can give the command

.UnderlineHead _ False;

It is important  to note that  this will cause  all of the  headings for
special sections to be printed without underlining (e.g. the heading for
the index and bibliography sections).  It does not, however,  affect the
underlining of sections, subsections, etc.

     A  word of  warning:  if  you change  the title  using  the AckHead
variable, do not put any underlining in it.  This title is also  used in
the table of contents and sometimes in other places where you  would not
normally want it to be underlined.

     See also the remarks  about .StandardSpacing and .Standard  Back in
Section 3.1, and the remark about HeadingSkip on page 32.



     3.5    Section headings             

     If you  are not  using PUB  to make  your section  headings (either
there are no  headings or you  are typing them  in yourself in  your own
format) you must give the command

.Next Page;

The page numbering starts with 0 to allow an unnumbered page for a title
page.  You have to  do this regardless of  whether or not you  have used
the TitlePage macro  described in Section 3.1,  and you do it  only when
you are  not going to  use the Sec  macro described  below.  Ordinarily,
when you start your first  section, the section handling code  checks if
the page  is 0  and goes to  the next  page.  If you  don't use  the PUB
sectioning, you need to give the command yourself to avoid having a page



                                   35
PUB User's Manual             New Package                    Section 3.5


0 which will  throw your page  numbering off by 1.   So, if you  are not
using section headings give the .Next Page command just before you start
the  main body  of your  text.  If  you are  using Journal  or BookStyle
format it  is usually preferable  to use the  TitlePage macro.   You can
type in your title page  just before your first section heading  or just
before beginning the text if you want, but if you have any roman numeral
pages the  title page will  come out between  these pages and  the first
page of the main text.  This  is no real problem if you are  listing the
file on  the lineprinter  or DIABLO, but  it can  be quite  annoying for
readers who  are using  an editor to  look at  the file.   Since section
headings are  not available in  Memo format, the  .Next Page  command is
given for you automatically when you use Memo.

     The  final  format  of  the section  headings  in  the  document is
determined by whether you are using Journal or BookStyle format  but the
command format is the same for both kinds of headings.  The command is

.Sec sectionname, label:

where sectionname  is the title  you want to  give to the  section (with
upper- and  lowercase letters exactly  as you want  them to  appear) and
label is a one word label that will be attached to the section for later
referencing purposes.  Do not forget the colon on the label.   The comma
and colon must appear in the command.  It may be convenient to  form the
label by concatenating  the words of the  title, but the  only important
requirement is that you can easily  remember it when you want to  make a
reference to the section.  For example, you could give

.Sec General Introduction, generalintroduction:   or
.Sec General Introduction, intro:

If you will not be doing any intra-text referencing, you do not  need to
give labels.  Sections can then be specified by just

.Sec sectionname

     It  is  important  to keep  in  mind  that if  you  have  commas or
parentheses or  quote marks in  your section name,  you may need  to use
vertical bars (|)  to delimit the first  argument.  See Section  1.3 for
details.

     The format  for deeper  levels of  subsections is  the same  as for
sections.  The first level of subsection is

.Ss subsectionname, label:

the next level is

.Sss subsectionname, label:

and the deepest level is

.Ssss subsubsectionname, label:



                                   36
PUB User's Manual             New Package                    Section 3.5


You can  begin typing  your text  on the  next line.   But to  allow for
special formats, PUB will not treat the first line of text as  the first
line of a paragraph unless  you specifically indicate that this  is what
you want, i.e. by  beginning the line with a  tab or by leaving  a blank
line (if you have used the BlankLine macro).      

     For section headings you may  give the printing forms for  the four
levels and the appendixes.  The defaults are shown.

                      Journal          BookStyle

        SecPrint           "1"                "I"
        SsPrint           "!.1"              "!.1"
        SssPrint          "!.1"              "!.1"
        SsssPrint         "!.1"              "!.1"
        AppPrint           "A"                "A"

Use "I" for upper Roman numerals, "A" for upper letters, "1"  for Arabic
numbers, "i" for  lower Roman numerals, and  "a" for lower  letters with
any  prefix or  suffix characters  added that  you want  (usually period
and/or parenthesis).  The ! character  is used to indicate you  want the
complete printing form of the next highest section included.   Note that
the 2nd-4th levels by default use "!.1" so if you give .SecPrint _ "I.";
then you will have  to change the lower levels  to "!1" or you  will get
two periods in  the lower level numbers.   As a further example,  if you
wanted a subsection number to print as, say a lower case  letter without
the section number, you would give

.SsPrint _ "a";

     The Journal and BookStyle  formats will still be different  even if
you use  the same printing  forms for the  different levels  of sections
because BookStyle labels top-level sections as chapters and puts them on
a new page with the heading centered at the top of the page.  So  if you
were using BookStyle,  and gave

.SecPrint _ "1.";

the  only difference  would  be that  chapters would  be  numbered using
arabic numerals instead of upper case letters.

     The other command that can be used to change section headings is

.MarginHeadings _ True;

which  will  put  all headings  (except  chapter  headings  in BookStyle
format) at the left  margin.  Ordinarily, section headings  are indented
according  to  the  paragraph  indentation  setting.   With  the default
indentation for  paragraphs, the  section headings will  be in  8 spaces
from the margin.  If you have  given .Indent 0 then they will be  at the
margin.  Also with the ordinary section headings, any continuation lines
will be at the margin.  For example:




                                   37
PUB User's Manual             New Package                    Section 3.5



        1     This Is A Very Long Section Heading That Will Be
Continued On The Next Line Like This

If you specify marginheadings then the heading is at the margin  and any
continuation lines  are lined  up under  the text  of the  heading.  For
example:

1     This Is A Very Long Section Heading That Will Be Continued
      On The Next Line Like This


     If you want something  like SECTION instead of Section  or, perhaps
you want all of the features of BookStyle, except that you want the word
Section  used  instead of  Chapter,  you  can do  that  by  changing the
variable SecHead.  The defaults are

.SecHead _ "Section";  for Journal and
.SecHead _ "Chapter";   for BookStyle

You can also  change the "name"  for the Ss macro  (but not for  Sss and                                                        
Ssss) by changing SsHead.  The defaults are

.SsHead _ "Subsection"; for Journal and
.SsHead _ "Section";    for BookStyle.

     The  next two  features  that are  discussed  apply to  all  of the
section macros, i.e. to Sec, Ss, Sss, and Ssss.  For ease of exposition,
they are only discussed explicitly for the Sec macro, but they  are just
as relevant to the other three levels of sections.

     For each level of sectioning there is a variable that  controls how
many blank lines to leave between  the end of a section and  the heading
for the following one.  The default assignments are as follows:

.SepSec _ 3;
.SepSs _ 2;
.SepSss _ 1;
.SepSsss _ 1;

Make the numbers larger to force more blank lines, and smaller  to leave
fewer.  If you are using BookStyle, the setting of SepSec  is irrelevant
since PUB will always begin a section (i.e.  chapter) heading at the top
of a page.  But since  these variables also affect when PUB  will decide
to get a fresh page for the deeper levels of sectioning, you should also
read the following before you change any of the above settings.

     Since there  are different  preferences and  conventions concerning
how close to the bottom of  a page a section heading should  be printed,
you are given some control over this.  For example, some people consider
it perfectly fine for a section  heading to be the last line on  a page,
while others prefer  a format where they  would rather have a  few blank
lines at the bottom of a  page and then have the section heading  at the



                                   38
PUB User's Manual             New Package                    Section 3.5


top of the next page.   E.g. someone might consider it  objectionable to
have a section heading that appeared towards the bottom of a page unless
there were at least two lines of text following it.  With  BookStyle, of
course, a section  heading will always appear  on a new page,  but these
considerations apply when using Ss, etc.

     To give you some control over when PUB will or will not get a fresh
page when  you call one  of the sectioning  macros, there is  a variable
called SecBottom.  Its default setting is

.SecBottom _ 5;

and you can change it if you wish.  PUB decides whether or not to  get a
fresh page for a  section in the following  way:  If the number  of free
lines left on the page is less than the sum  of SecBottom+SepSec+Spread,
then PUB  will go to  a fresh  page.  For a  subsection, etc.  SepSec is
replaced by SepSs, etc.  Note  that when you change the number  of blank
lines to leave  before a given level  of sectioning you also  change the
way in which PUB will make  its decision about when to get a  fresh page
for that level of sectioning.  If you find that PUB sometimes leaves too
much blank  space at  the end  of a page  when starting  a new  level of
sectioning, make  SecBottom smaller, but  if section  headings sometimes
come out too near the bottom of a page, set SecBottom to be a little bit
larger.  You can change  it just before you use  Sec or Ss, etc.  if you
have particular cases  that come out wrong.   But in this case  you will
need to remember to restore the old value just after you call the macro.
This can  be especially useful  if you have  a particularly  long title,
since the point in adding in the Spread above is to guess at  the number
of lines the title will take since PUB does not know this at the time it
has to decide whether or not to go to a fresh page.

     There are three  macros which are  sometimes useful with  the Every
Heading and Every Footing footing macros described in Section 2.2.  They
are:

     .SecNumber--Prints  the appropriate  choice of  SecHead  or AppHead
plus the appropriate number for the current major section or the current
appendix at the time the macro is called.

     .SsNumber--Just like SecNumber except that the subsection number is
also included.

     .SubSecNumber--Just like SecNumber  except that the number  that is
printed will be that of  the deepest level of subsectioning at  the time
the  macro is  called,  e.g., something  like Section  3.5.2.1  might be
printed if you were using the Ssss macro.

     .SubSecName--Prints the title of the deepest level of sectioning or
of the appendix at the time the macro is called.

Example:

.Every Heading (,{SecNumber},)



                                   39
PUB User's Manual             New Package                    Section 3.5


will  print the  value  of SecHead  (usually Section  except  when using
BookStyle  when  it  will  be Chapter)  followed  by  the  proper number
centered at the top of each page of the main text.



     3.6    Appendixes            

     If you have any appendixes,  they should be entered after  the body
of the text.  Each appendix is started with the command

.Appendix appendixname, label:

There is  a considerable  similarity between the  way that  sections and
appendixes are set up.

     The   default  numbering   for  the   appendixes  are   upper  case
alphabetics, e.g. A, B, C.   The format for the heading is  very similar
to chapter headings  in BookStyle.  You  can take a  look at one  of the
appendixes to this manual  to see what they  look like.  If you  want to
change the way the appendixes  are numbered, set AppPrint just  like you
would SecPrint; the default setting is

.AppPrint _ "A";

You can also change AppHead, which is analogous to SecHead.  The default
is

.AppHead _ "Appendix";

     The default is to start each new appendix on a fresh page.   If you
would rather have the  appendixes treated more like section  headings in
Journal (except that they  will still be centered like  section headings
in BookStyle), you can do so by setting ForceAppPage to False:

.ForceAppPage _ False;

And  in this  case, you  may need  to control  how much  space  there is
between the end of one appendix and the beginning of the next, similarly
to the way this is done  for sections.  If you have set  ForceAppPage to
False, then PUB will get a fresh page when there are fewer  than (SepApp
+ AppBottom + Spread) lines remaining, and otherwise it will skip SepApp
number of lines and print the appendix heading.  The defaults for SepApp
and AppBottom are as follows:

.SepApp _ 3;
.AppBottom _ 7;

Note that the default for AppBottom  is 7, where it is 5  for SecBottom.
This is to  make allowances for the  fact that the appendix  title takes
more room than does the default section heading in Journal.

     You can also change the  number of blank lines to skip  between the



                                   40
PUB User's Manual             New Package                    Section 3.6


end  of  the appendix  heading  and the  first  line of  text  using the
variable AppSkip.  The default is 3:

.AppSkip _ 3;

     If you do not have any appendixes, but wanted a special  section at
the back, say a  glossary, you could use  the appendix macros to  set it
up.  You would begin by setting up Apphead appropriately:

.AppHead _ "Glossary";

and, unless you wanted more than one glossary, you would not want  it to
be numbered, so you would set up a null printing form for  the appendix,
which is done quite a bit differently than one of the  standard printing
forms.  After your call on Journal, give the PUB command

.Count AppCnt Printing $("")$

where the $'s are really dollar  signs, and you type it just as  you see
it above.

     If  you have  tables or  figures  that are  made using  one  of the
standard macros, they will  be numbered using uppercase  letters instead
of arabic numerals.   If you really need  this to be different  for some
reason, see the person  responsible for maintaining the  macro packages.
It is possible to change it, but some special work is required.



     3.7    Intra-text referencing             

     When you want to refer the reader to another section in  your paper
(either a  section occurring earlier  or later), you  can use  the label
that you gave (will give) with the section heading.  PUB  will translate
this label to the number that  it has assigned to the section.   It will
print the appropriate word (either Chapter, Section, or  Appendix unless
you have changed the default using SecHead or AppHead), followed  by the
number.  The format is {SecRef label} or {SsRef label} or {SssRef label}
or {SsssRef label} or {AppRef label} for an appendix.  For example

        See {SecRef INTRODUCTION} above for a general description.

will print as

        See Section 1 above for a general description.

See the sections on Table  and Figures for ways of making  references to
such objects.

     Occasionally, you may want to reference a specific  page especially
in a long section.  A special label  must be set up to do this.   At the
point in the text that you want to reference put the command

.Label: Page


                                   41
PUB User's Manual             New Package                    Section 3.7


For example if the command

.THISPAGE: Page

were put in the text right here then {PageRef THISPAGE} would print page
42.  The command {PRef THISPAGE} prints p. 42.

     It  has  been  suggested  that  a  macro  for  multiple  intra-text
references would be useful.  For  example, see Figures 1, 5, and  9.  It
is a good  idea but so  far no one  has found the  time to write  it.  A
volunteer to write the macro would be welcome.

     For the time being, this can be achieved with the following:

{SecCnt! <label>}              first-level sections
{SsCnt! <label>}               second-level sections
{SssCnt! <label>}              third-level sections
{SsssCnt! <label>}             fourth-level sections
{Page! <label>}                pages
{BibCnt! <label>}              bibliography references
{FigCnt! <label>}              figures set up by figures packages
{TabCnt! <label>}              tables set up by fancy tables package
{AppCnt! <label>}              appendixes

So you can give

See Figures {FigCnt! CHARCODE}, {FigCnt! LETTERCODE}, and
{FigCnt! NUMBCODE}.

to get

See Figures 1, 5, and 9.

As  usual, !  means the  printingform, e.g.  II. ,  rather than  the raw
number, e.g., 2.  See Section 4.1 for details.



     3.8    Bibliographic references             

     The macros  for helping  you to do  bibliographic references  are a
little complicated.  So be sure to read all of the material  here before
beginning.

     Overview:   Unlike  most of  the  other "special"  sections  of the     
document,  you  have  considerable  control  over  the  format   of  the
bibliography section.  The default is to have PUB number the entries for
you, but you can override this.   PUB will also alphabetize  the entries
if  desired.   The  comment  feature allows  you  to  make  an annotated
bibliography.   By  using  another option,  PUB  will  include  just the
entries that you actually cite  in the text.  This makes it  possible to
build up libraries of frequently  cited items so that you don't  have to
redefine them all the time.  You also have considerable control over the



                                   42
PUB User's Manual             New Package                    Section 3.8


format of the citations in  the text.  This can range from  something as
simple as  a number surrounded  by square brackets  (e.g., [3])  or more
complicated formats like (Smith, 1975a).  The discussion is divided into
four parts:  defining a bibliography entry, formatting  the bibliography
section,  citing  bibliography  entries, and  controlling  the  order of
appearance of the entries in the bibliography section.

     Since  the  macros   for  making  a  bibliography   are  moderately
expensive, they have been placed in a separate file so that they are not
read in when they are not needed.  So the very first step is to tell PUB
that you want a bibliography.   This is done by setting WantBib  to True
in your PUB file:

.WantBib _ True;

As is true for most other variable assignments, this must be done before
you call Journal.

                   Defining the Bibliography Entries                      

     The next step  is to define the  entries and, if they  are desired,
the printing labels and comments.  It is important to note that you must
define all of your  entries before you refer  to any of them.   For that
reason,  and also  to make  it easier  for you  to use  the  entries for
another document, it is usually best to put all of the  definitions into
a separate file that you can read in using the Library macro.

     Bibliographic entries are defined using the Bib macro.  It  has the
syntax:

.Bib (label,|text of entry|,|printing label|,|text of comment|)

Each of these arguments must appear on a single line, though they do not                        
all have to be on the same line.  And each has its  own idiosyncracies--
the price for the various special bibliography features.

          1)  Label:  This  is  the  name  for  the  entry  you are              
     defining.  It is used  with the BibRef macro (see  below) when
     you want to cite the entry in the body of the text.   A little
     bit of care is  needed in choosing the label  argument:  Don't
     use an exclamation point as the first character of  the label!
     This is because two labels are needed (one for the  number and
     one for the printing label).  So rather than making you invent
     two lables  (and then  keep track of  both), Bibref  makes the
     second one for you.

          2)  Text of entry:  This is the entry that will go in the                
     bibliography section.  As indicated  above, it is best  to put
     |...| around it.   Chances are that  the text will  contain at
     least one  comma, and  so the  Bib macro  will blow  up (quite
     spectacularly!) if you leave  off the vertical bars.   It must                                                               
     be typed in  all on one line;  PUB will do the  formatting for
     you  when  it  builds  the  bibliography  section.    This  is



                                   43
PUB User's Manual             New Package                    Section 3.8


     necessary because Bib has to pass the text to other  macros as
     a string constant and PUB will not accept  carriage-returns in
     such  constants.  And  the necessity  of passing  the argument
     elsewhere leads  to the major  idiosyncracy of  this argument:
     WHEREVER YOU WANT A QUOTE-MARK, TYPE A $ INSTEAD.(12)

          3)  Printing  label:  This  is  the  text  that  will  be                
     included in the body of the text when you cite the entry using
     BibRef.  It is optional, and can be omitted if you want.  Just
     be sure  to use  a comma, otherwise  PUB will  become confused
     about where the Bib stops.   If you omit it, PUB will  use [n]
     when you  call BibRef (where  n is the  number of  the entry).
     Quote marks probably will not work, but perhaps some number of
     them in a  row will allow one  to get through  without mishap.
     Any $'s will be treated as normal text.

          4)  Text of  comment:  The fourth  and final  argument to                 
     Bib is also optional.  Again,  it must go on one line.   The $
     is  treated as  ordinary text.   As with  the  printing label,
     quote marks are not recommended.  But if you really  must have
     them, try four in a row  (and use a small test file  until you
     get it  right!!).  If you  omit the printing  label but  use a
     comment BE SURE to leave a blank, e.g. give

     .Bib label,|text of entry|,,|text of comment|

     And since this too is likely to have a comma in it, be sure to
     use the vertical bars.

     Example of an acceptable call on the Bib macro:

.Bib (XJONES,
.|Jones, Tom.  $How to be dull$, PUB Press, 1978.|,
.|Jones, 1978a|,
.|This is a very interesting article that everyone should read.|)

                  Formatting the Bibliography Section                     

     The default  indentations for  the bibliography are  crown =  0 and
vest = 8.  And the entries look like:

1.  Smith, R.L., TENEX SAIL, Institute for Mathematical Studies in
        the Social Sciences, January 1975.

------------
     (12) That's right--a dollar sign!   Believe it.  It will  be turned
into a quote mark in the DOC file.  Sorry about that--it also means that
a $ can't be  zsed in this argument to  Bib without a major  re-write of
the macro.   The alternative was  to require you  to use  four(!!) quote
marks in a row whenever  you wanted one in the bibliography  entry.  The
stream of  error-messages when  someone forgot and  typed three  or five
would have been  enough to daunt the  most hardened PUB user.   It would
also have meant giving up  on the possibility of having  PUB alphabetize
the entries when that is desirable.


                                   44
PUB User's Manual             New Package                    Section 3.8


        This is the reference manual for the TENEX version
        of SAIL.  It  gives the  command  syntax  and  the
        references to the JSYS manual.


2. VanLehn, K.  etc.  etc.

Change this by putting

.BibCrown _ N;
.BibVest _ M;

N and M are the values for the indentation so

.BibCrown _ 8
.BibVest _ 0;

would give you:

        1.  Smith, Robert, TENEX SAIL MANUAL, Institute for
Mathematical Studies  etc. etc.

     There is  also a variable  BibHead that can  be used to  change the
default name for the  bibliography section from References  to something
else.  For example, if you wanted the bibliography section to  be called
Annotated Bibliography, give the PUB command

.BibHead _ "Annotated Bibliography";

The default is  to single space the  bibliography section.  This  can be
changed  using  the  variable   BibSpacing.   E.g.,  if  you   want  the
bibliography section to be double spaced, give the PUB command

.BibSpacing _ 2;

The  default is  to  leave two  blank  lines between  paragraphs  in the                           
bibiography  section.   This  can be  changed  by  setting  the variable
BibPreface  to a  new value.   E.g. to  get one  blank line  between the
entries, give

.BibPreface _ 1;

     If you are using printing labels for the citations in the  text and
you do not want the entries in the bibliography section to  be numbered,
give

.NumberedBib _ False;

in the initialization  section of your PUB  file.  If you are  not using                                                               
printing labels, don't leave the  numbers off if you have  any citations
in the manuscript--nothing will come out since there won't be any number
to refer to.




                                   45
PUB User's Manual             New Package                    Section 3.8


     You  can control  the  number of  blank lines  skipped  between the
heading and the first line of text using the variable  HeadingSkip.  See
page 32 for details.

             Citing a Bibliography Entry in the Manuscript                   

     The BibRef  macro is used  to refer to  a bibliography  entry.  For
example, if  XJONES were the  label for one  of your entries,  you would
give something like:

see {BibRef XJONES} for more details.

How  this will  appear in  the document  depends on  whether or  not you
included a printing label  in the Bib that  you set up.  In  the earlier
example, we gave a printing label.  So the result would be:

see [Jones, 1978a] for more details.

As you can see from the example, you set up your printing  label exactly
as you want  it to appear  in the document.  But  if we had  omitted the
printing label argument and this was the third entry in the bibliography
section we would get something different:

see [3] for more details.

PUB  automatically  adds  the  square brackets  for  you.   But  you can
suppress them by giving:

.BibBrackets _ False;

in the initialization before Journal.  Note that if you wanted to  get a
format like

see (Jones, 1978a) for more details.

you would have to i) set BibBrackets to False and ii) give  the printing
label argument as

.|(Jones, 1978a)|

           Controlling the order of appearance of the entries                  

     The default is  to enter the items  in the bibliography  section in
the order  that you  defined them using  Bib.  But  there are  two other
options possible.

     First, if you want the entries in alphabetical order, you  can have
PUB do the alphabetization for you.  If this is what you want, give:

.AppearOrder _ False;

PUB will ignore the first quote mark and the first piece  of underlining
when   alphabetizing,  which   is   done  using   the   ASCII  collating



                                   46
PUB User's Manual             New Package                    Section 3.8


sequence.(13)  PUB will  usually do a  pretty good job  of alphabetizing
the entries, but sometimes it may not be exactly what you want.  In that
case, you  will need to  order the entries  yourself by  rearranging the
calls on Bib (and setting AppearOrder back to True, of course).

     The final way in which you can have your entries ordered is  in the
order that you cite them in your text using BibRef.  To get them ordered
this way, give the command

.BibOrder _ False;

     As a side-effect of this  feature, ONLY the entries that  you refer                                        
to using BibRef will be  included in the bibliography section.   This is
what allows you to  build up libraries of commonly-cited  references for
inclusion  in many  different documents.   However, since  there  may be
times when you are using a library and want to include some entries that
are not cited in  the text, you can force  the inclusion of an  entry in
the bibliography when you have set BibOrder to False by using the AddBib
macro:

.AddBib Label

where Label is the  one you gave as the  first argument to the  Bib that
defines this entry.  So AddBib is just like BibRef except that it prints
nothing in the text.  If you are not having PUB alphabetize  the entries
for you, be sure to put the AddBib call in your manuscript in  the right
place!  The right  place is just  after the first  place that you  use a
BibRef for the entry  that you want to come  just in front of  the entry
you are including using AddBib.

     GLITCH:  If you have BibRef  or AddBib calls using labels  that you
haven't yet defined  using Bib, and you  are asking PUB  to alphabetize,
the results will be very,  very strange.  Many of the entries  will look
extremely peculiar and the alphabetization will usually be  quite wrong.
Your first  thought will  be that the  bibliography package  is horribly
broken and bug-ridden.  But the problem will disappear when you  add the
missing Bib's.  In other words,  please do not hastle anyone  (nor waste
your  own  time)  about  alphabetization  problems  in  the bibliography
section until you have all of your Bib entries in place and debugged and
you  have  corrected  any  errors  in  BibRef  and  AddBib entries--such
problems will cause the same symptoms.

                                Summary                                

     There are three macros that are useful:

.Bib (LABEL,|text of entry|,|printing-label|,|text of comment|)

     Each argument must  appear on one  line.  Remember that  you cannot
type in quote marks in the text of entry.  Instead, use a $ wherever you

------------
     (13) If this remark doesn't make any sense to you, ask a programmer
for an explanation.


                                   47
PUB User's Manual             New Package                    Section 3.8


want a  quote-mark.  If you  need a $  as text, it  will be  necesary to
revise the bibliography macros and Standard Back.  So unless you  are an
experienced PUB programmer you will need help.  In particular,  ^B won't
work!  Don't use quotes in the LABEL or printing-label.

{BibRef label}

     Puts the printing-label in the text if you gave one.   Otherwise it
uses the entry number if there  is no printing-label or if you  said you
didn't want printing-labels.

.AddBib label (or {AddBib label})

     Sends the text of entry, etc. to the bibliography section.  It does
NOT  print anything  in  the text.   AddBib  has two  uses:   to include
entries where there is no BibRef in the text and to control the order of
the entries in the bibliography  section.  In the latter case,  you must
call each entry using AddBib, in  the order you want them, AND  you have
to do it AFTER all the Bib's but before any of the BibRef's AND you have
to use AppearOrder.  Notice that  unless you have set BibOrder  to False
you will not need to use AddBib.

     There are a  variety of options.  These  all go in the  file BEFORE
you call the macro package.  The defaults are shown:

.WantBib _ False;              bibliography macros are not available
.AppearOrder _ True;           turns off alphabetization.
.BibOrder _ False;             entries appear in the order that you set
                               up the Bib calls
.BibCrown _ 0;                 indentation of first line of a paragraph
.BibVest _ 8;                  indendation from left margin for the
                               rest of the paragraph
.BibHead _ "References";       title for the bibliography section
.BibSpacing _ 1;               controls whether entries are single-
                               spaced, double-spaced, etc.
.BibPreface _ 2;               number of blank lines between paragraphs
.BibBrackets _ True;           default is to add [...] to the citations
.NoPrintlabs _ True;           PUB will use the entry numbers instead
                               of the printing-label with BibRef
.NoComments _ True;            no "text of comment"'s will appear in
                               the bibliograph section
.NumberedBib _ False;          the entries will not be printed with
                               numbers in the bibliography section

                               REMINDERS                               

     All of the Bib's must come before any BibRef or AddBib.  Do not use
NoPrintLabs if you have set NumberedBib to False!

     While it is very useful to  build up a library of entries  that you
cite in  different documents,  don't let them  get so  big that  you are
often reading in a large number of entries that are not cited.  Bib does
a lot of  processing that is  wasted when the  entry is not  cited using
BibRef or AddBib.


                                   48
PUB User's Manual             New Package                    Section 3.9


     3.9    The index             

     A  word or  phrase can  be  marked for  inclusion in  the  index by
putting a  % before it  and another %  after it when  it appears  in the
text, for  example, %index  this phrase%.  Each  significant use  of the
word  must  be so  marked  in order  to  have all  the  significant page
references for the word in the index.  If you want the word  indexed for
a range of pages, e.g., 2-5 then instead of the % format put the command
line

.BeginInd word

at the point where the page range starts and

.EndInd word

at the later point in the  text where the scope of the word  ends.  This
format is also useful for  indexing words that do not  explicitly appear
in the text.  Ranges on the same page will be given as 4 rather  than 4-
4.  If you have  a special word or phrase  to include in the  index that
does not occur in  the text where you want  the reader to look,  you can
give the command

.Ind word

at the point where you want the reader to look.

     You may  change the  INDEXING CHARACTER  by specifying  your choice
before the Journal with  the command

.IndexChar _ "<character>";

and the % character will also automatically be "turned off" for
you.  By using

.IndexChar _ Null;

you can turn off indexing altogether.

     Note:  The index character is used as a signal response rather than
as a command character.  This means that you cannot use the  Turn On/Off
commands with it.   Instead, give IndexChar _ Null  to "turn off"  the %
completely or  give IndexChar _ "<character>" to  replace it  by another
character.

     If you use the % symbol as normal text and forget to put  a <CTRL>B
in  front  of  it,  you  will  get  the  error  message  "MISSING SIGNAL
SEPARATOR".  This error message can also be caused by  other conditions,
e.g., if you begin  a footnote with $$ and  forget the * to end  it, PUB
will complain with the same error message.

     The index is printed in two columns.  If you have changed  the page
size (using the .Page Frame statement) to override the  default setting,



                                   49
PUB User's Manual             New Package                    Section 3.9


there may  be a  problem with  the last line  of a  column in  the index
section  coming  out  too  high or  too  low.   This  problem  is easily
remedied.  The default page size  setting puts the last line of  text on
line 56 with the  page number centered on  line 60.  So the  default for
the last line of a column on the index page(s) is line 56.  Suppose that
as part of your page frame statement you had given

.Area Text Lines 5 To 50
.Title Area Footing Line 56

Then  the page  number would  come out  centered on  line 56  with index
entries  running  through  line  56, which  is  very  wrong.   You would
probably want the last  index entry in a column  to end on line  50 (the
same as the other  pages of your document).  To  get PUB to do  this you
would give the command

.IndexBottom _ 50;

PUB will  then do the  right thing, and  put the last  index entry  in a
column on line 50 instead of line 56.  If you are using a  larger number
of lines than the default you can improve the appearance of the index by
setting IndexBottom to a larger value.

     As with  the other  special sections  of the  document, there  is a
variable to let you choose your own title for the section.   The default
is:

.IndexHead _ "Index";

If, for example, you  wanted it to be  in all capital letters  you would
give:

.IndexHead _ "INDEX";

     See also the remark about HeadingSkip, page 32.




     4    Special formats           



     4.1    The outline feature              

     This format automatically numbers and formats text into an outline.
Since the outline feature is not used in many documents, you need to ask
for it, which is done by giving the PUB command

.WantOutline _ True;

When you give this command, the macros described here will  be available
for you to use.  If you forget to give the command, or misspell it, then



                                   50
PUB User's Manual             New Package                    Section 4.1


when you use one of  the macros described here, PUB will  complain about
the  macro  being  an  undefined  identifier.   The  outline  feature is
available in  both Memo and  Journal (and so  it is also  available with
BookStyle).

     There are 5 levels.  You give your text as

.OutLine (form1,form2,form3,form4,form5)
.SetOutLineIndents (n1,n2,n3,n4,n5,rightmargin)
{L1}first point
{L2}first subpoint
{L2}second subpoint
{L3}first sub-subpoint
{L4}first sub-sub-subpoint
{L5}innermost level
.comment or you can use;
.L1
second point
.L2
subpoint to second point
.EndOutline

Each point is started with the level indicator L1-L5 enclosed in {} then
the text (with no intervening spaces).  Or you may give .Ln and then the
text on the next line starting at the margin.

     The  levels will  be indented  0,4,8,12,16 and  the  original right
margin will be used.  If  you want to change these  default indentations
then you may specify the indentation for each level and the right margin
with

.SetOutLineIndents (n1,n2,n3,n4,n5,rightmargin)

where n1 will usually be 0.  If you want the entire left margin narrowed
then add  the value  to each  of the 5  indents.  If  you just  want the
defaults, this command is not  needed at all.  Any left blank  will take
the      default     indentation      for     that      level,     i.e.,
.SetOutLineIndents(,6,,10,)  would  have 0,6,8,10,16  with  the original
right margin.  You may also want to give .Preface 0 (for no  blank lines
between points).  The default is  to single space the outline.   You can
change  this by  changing the  variable OutLineSpacing.   E.g. to  get a
double-spaced outline give the PUB command

.OutlineSpacing _ 2;

Whenever you change it, the change will remain in force until you change
it again.  The spacing cannot be changed inside an outline.  It  is o.k.
to give a new value  to OutlineSpacing after you have used  .Outline and
before you say EndOutline, but the change will not take effect until the
next time you use the .OutLine command.

     You  must put  .OutLine; (or  .Outline() )  before the  outline and
.EndOutline  after.  This  will 1)  save your  current  indentations and



                                   51
PUB User's Manual             New Package                    Section 4.1


restore  them when  the  outline is  finished,  2) insure  that  in each
outline the counters will be reinitialized to I., A. etc., and 3) set up
the printing form for each level.  If you use the defaults  don't forget
to use a ";" or "()".

     If you just give .OutLine( )  (or .Outline;) with no arguments then
the levels are:

        L1  Upper Roman numerals        I.
        L2  Upper alphabetics           A.
        L3  Arabic numbers              1.
        L4  Lower alphabetics           a.
        L5  Lower Roman numerals        i.


    [Note:  If this is  your standard outline format you  don't need
            to  read  the  following  which  tells  how  to  set  up
            different numbering schemes.]

     You may give arguments to set your own printing forms.

.OutLine (form1,form2,form3,form4,form5)

where any left blank (be sure all commas are included to  indicate where
the blanks are) will have the default form for that level.  You  use the
forms I,A,1,a,i to indicate the  5 types above.  You should  specify any
prefix or suffix characters yourself, e.g.,

        A.
        1)
        1.)
        /a--

Note that  if you use  parens or  commas in your  format then  that form
should be given in quotes, e.g., use .Outline (I.,A.,"1.)") to get

              I.  First level
                  A.  Second level
                      1.)  Third level
                      2.)  Third level
                  B.  Second level

     The I, A, etc. are formats.  When the actual label is determined it
will be based on the current count.  If the format is A. and this is the
third outline point at  that level then the  number 3 is converted  to C
and the . added to get the printing form.

     You may use  ! in your  form to refer to  the printing form  of the
next highest level.   For example, !A. will  give numbering of  the form
II.C., IV.B., etc.  Thus  if you build up  the forms, all levels  can be
included, for example, .Outline (1.,!a.,!i.) for a 3-level  outline will
give labels of the form

  1.


                                   52
PUB User's Manual             New Package                    Section 4.1


     1.a
     1.b
         1.b.i
         1.b.ii
  2.

        A simple example is

.Outline;
.L1
first point
.L2
first subpoint and this is a very long point that will require
at least one continuation line.
.L2
second subpoint
.L3
first sub-subpoint
.L1
second point
.EndOutline

which will look like


I.  first point

    A.  first subpoint and this is  a very long point that  will require
        at least one continuation line.

    B.  second subpoint

        1.  first sub-subpoint

II.  second point


     Any continuation lines will be lined up with the first line, i.e.,

        II.  This is a very long point in
             the outline.

     If  you use  ByHand/EndHand  within the  outline there  will  be no
problem with indentations since  they are not used within  ByHand blocks
anyway.  (The margins have  not actually been changed with  the .Outline
format only  the indents have  been set.)  Line your  text up  where you
want it in relation to where the outline will fall on the page  with the
indents that you have set.  If you want to type some regular text in the
middle of the outline, you may use the command

.ResetIndents

and you will get back the  paragraph format that you had when  you began



                                   53
PUB User's Manual             New Package                    Section 4.1


the outline.  No special command  is needed to resume the  outline.  The
.EndOutline command does the indent reset for you automatically when you
are finished with the entire outline.



     4.2    The proportional spacing feature               

     A feature is available in  the DIABLO program that will  leave more
uniform  spacing  between  words  on  a  line.   Ordinarily,   when  PUB
justifies, it divides the extra spaces as evenly as possible, but  in 1-
space units.   So that  given 3  spaces and  2 word  breaks in  which to
distribute them, it would put 1 space and 2 spaces; or with 8 spaces and
3 word breaks it would put 3, 3, and 2.  With the new feature,  PUB will
issue the code  so that the  DIABLO program will cause  1 1/2 and  1 1/2
spaces in  the first case  and 2  2/3 between each  in the  second case.
This is called "proportional spacing" for lack of a better term.

     This considerably improves the  overall appearance of a  page.  But
it has  little improving  effect on  lines with  an excessive  number of
spaces caused by too long words that cannot be split.

     There are two ways of activating the proportional spacing feature:

     A) Put one of the following in your PUB manuscript:

.Memo (or Journal)
.EliteDiablo   (or .PicaDiablo)

     B) Instead of putting the .EliteDiablo command into your  file, use
subcommand mode when running PUB:

MANUSCRIPT: test.pub [old version],
@@dIABLO
@@

where you put the comma  after [old version] to get subcommand  mode and
then type d--PUB will fill  in the rest of the word  for you!.(14)  This
will give you  ELITE.  If you  want PICA (needed  only if you  are using
pica spacing--10 characters per inch--on the DTC), you will have  to use
the PicaDiablo command in your manuscript. The subcommand mode is  to be
prefered in  the standard case,  since you normally  do not want  to use
proportional spacing until  you are ready to  make the final  copy.  See
below!

     There are several WARNINGS and EXPLANATIONS needed here:

     1)  Places  with special  spacing,  e.g after  a  period, paragraph
indentation, where you have used  #'s, and in ByHand blocks will  not be
affected.

------------
     (14) Because of  a bug  in PUB you  must type  the d  in lowercase,                                         
i.e., typing D will not work.


                                   54
PUB User's Manual             New Package                    Section 4.2


     2)  You CANNOT print the resulting .DOC file on anything other than
the DTC.  There are  many control characters and a  formfeed (pagemark!)
at the start of nearly  every line; a lineprinter listing is  useless to
you and is EXTREMELY wasteful of paper.

     3) You CANNOT  edit the .DOC file.   Even running it through  TV or
SOS without making any changes  at all will destroy the file.   TECO can
generally be used, but only with difficulty.

     4)  PUB  handles  the underlining  a  little  differently  for this
feature.  See below for details.

     5) If you ^C  while running DIABLO, you  are might end up  with the
terminal  in PLOT  mode.  You  will know  immediately that  something is
wrong when you  try typing something.  Push  the RESET button  under the
terminal cover.

     6)  PICA is not as  carefully debugged as is ELITE.  It  could have
some  minor  problems.  These  might  appear  if you  list  a  PICA file
starting somewhere else than at  the actual first page of the  file.  In
other words, PICA is not guaranteed.  Please report any problems.

     7) PUB  handles the underlining  differently for this  feature.  In
Device Lpt mode, you get BOLDFACE.   In Device Tty mode, you get  a line
with  a carriage  return and  no linefeed  followed by  a line  with the
underline characters  so that they  are put where  they belong.   But in
Device Diablo  mode, you  get the  character then  a backspace  then the
underline which looks  very choppy while printing.   See EmboldenBetween
and UnderBoldBetween for ways of mixing different styles  of underlining
in the same document.

     The proportional spacing feature does not currently work with user-
specified  two-column output.   The  problem appears  to be  in  the PUB
program somewhere, but the bug has not yet been located and fixed.  When
it is, it will be announced on the bulletin board.

     NOTE:  There are seldom problems with a two-column INDEX,  at least
in my tests.  If there  are, and you would like proportional  spacing in
the body of the document, you  can run the PUB program twice,  once with
and once without proportional spacing and then just list the index pages
from the DOC file made without proportional spacing and  list everything
else from the DOC file made with proportional spacing.



     4.3    The sidecharacter feature              

     A feature  is available  in  PUB to mark  the margins   of selected
areas of the text, e.g., those areas that are newly added to a document.
Since  the  extra checking  that  has to  be  done when  the  feature is
available, you have to ask for it by giving the PUB command

.WantSidechars _ True;



                                   55
PUB User's Manual             New Package                    Section 4.3



   |         The  text will  look like  this.   The  size of  the  |
   |  margins, the character(s)  used, and  the side  of the page  |
      where they  are placed are  optional.  The  margins of  the
      ordinary text are narrowed so that every line  has room for
      marginal notation but it will only appear on the designated
      lines.

     There are four steps to setting up this feature:

     1)  You need to  declare the page frame  to a suitable size and set
up   the   areas  for   the   marginal  notation.   The   following  are
reasonable settings.

.Page Frame 60 High 80 Wide
.Area Text Lines 4 To 53 Chars 5 To 76
.Area LeftAddtls Lines 4 To 53 Chars 1 To 1
.Area RightAddtls Lines 4 To 53 Chars 80 To 80
.place text

If   you   want   this    list  of   settings   exactly   then  you  can
use  .DefaultSideSettings and they will be declared for  you.  Otherwise
use the above format and fill in your own size specifications.

     2)  The  default  character  to use  for  the marginal  notation is
"|".  If you would like some other character or possibly a more than one
character sequence, then  you need to declare   a string with a  name of
your choice (or more than one string if you will be using several).  For
example, in a DEC/TENEX manual D's and T's might be placed in the margin
to  indicate  DEC-only   and  TENEX-only   sections  and   the following
strings  would be declared:

.dstr _ "D D D D D D D D D D D ........";
.tstr _ "T T T T T T T T T T T ........";

where  the  character<space>  sequence is   repeated at  least   as many
times as there are lines on a page (in this case 4 To 53 = 50 lines).

     3)  Next you need to specify in which margin the notation  is to be
placed.  This  is controlled with  the following four  switches that are
automatically all set to False:

.BothSides _ False;
.LeftOnly  _ False;
.RightOnly _ False;
.Alternate _ False;

You  choose the  option that  you want  and set  it to  True,  e.g., for
notation in both margins give

.BothSides _ True;

The  Alternate  option  means  that  odd-numbered  pages  will  have the



                                   56
PUB User's Manual             New Package                    Section 4.3


notation on the right margin only and the even-numbered pages  will have
the notation on the left margin only.

     4)  To turn on and off the marginal notation use:

<Finish of unmarked text here.>

.SideChar (string,number)

        Start of text to be marked.
                .
                .
                .
Finish of text to be marked.
.EndSideChar

where both arguments are optional (and the parentheses are not needed in
this case if  no arguments are  given).  The STRING  is the name  of the
string if  the vertical bar   default is not  wanted.   This way  if you
are  using multiple  strings you  may choose  one for  this  time, i.e.,
.SideChar(tstr)  or .SideChar(dstr).    The second   argument  NUMBER is
defaulted to 1  if none is  given.  This refers  to the number  of blank
lines that will be  in the document before the  next line that is  to be
marked.    Ordinarily, if  you mark   paragraphs then   there will  be a
single line  separating the paragraphs hence the default.   Probably the
best thing to do is  use the default and see what happens.   For marking
ordinary paragraphs,  it will be correct.  If you have  unusual spacing,
it  may  need to   be  increased.  If  you  are marking  lines  within a
paragraph, it will probably  need to be decreased  to 0 or -1.   Look at
the document  and adjust  the number  if the  markings are  starting too
early  (increase)  or  too  late   (decrease).   For  marking  within  a
zaragraph, this is not  guaranteed to be  accurate but will be  within a
line  or two  of where  it should  be at  worst.   There  may also  be a
problem at  the  bottom of  pages since  PUB  can decide to  put another
line on the page after the page is already finished; and nothing  can be
done about this problem.

     If  you  discover  that  you  are getting   errors related  to this
feature in an  area of your manuscript  where you don't need  any margin
notation, then turn the feature  off around the problem area  by setting
all the side of the page options (BothSides, etc.) to False.   One cause
of such difficulty is footnotes  that extend over a page   boundary.  If
you have such a footnote and are not  using side markings within   a few
pages of it then turn them off.  Otherwise at those times when  there is
no special notation on the page, PUB will be putting blank spaces in the
margin area.



     4.4    Tables and figures feature               

     PUB has macros for fancy handling of tables and  figures, including
provisions  for  doing  them  in  the  style  required  by  the American



                                   57
PUB User's Manual             New Package                    Section 4.4


Psychological Association (see APA, 1974).(15)

     The table and figure  package is a moderately  complicated feature,
so you will need to  read the following carefully and some  practice may
be required.  As with any fancy PUB feature, your PUB run will be slower
when you  use it.   However, once you  catch on  it is  not particularly
difficult to use.  Since there are a fairly large number of  macros used
in  this feature,  you need  to request  them.  Tables  and  figures are
requested separately by giving the PUB commands

.WantTabDef _ True;
.WantFigDef _ True;


     4.4.1    The basic command                  

     The basic macro  you need to call  when using the table  and figure
package is:

     {TabQ LABEL,HEIGHT,BODYNAME,TITLE1,...,TITLE6}

for tables and

     {FigQ LABEL,HEIGHT,BODYNAME,FIGCAPTION}

for figures.

    LABEL     is a one-word label.  It is the name that you  can use
              to make a reference to the table or figure later on.

    HEIGHT    is either the number of lines that the table or figure
              will take (add 3+twice-number-of-lines-in-title to the
              length of the body for  tables and add 3 to  length of
              body for  figures).  You may  also give  .Full, .Half,
              .Third, or .Quarter, for a full, 1/2, 1/3 or 1/4  of a
              page.

    BODYNAME  is blank  if you  want to leave  a blank  space, e.g.,
              {FigQ label,height,,figcaption}.    If  you   want  to
              provide a body for the table or figure, then somewhere
              in your manuscript,  but before this call,  you should
              put:

.Macro bodyname $(ByHand

                   <text of body here>

.EndHand )$


------------
     (15) And soon there will be a macro package available for obtaining
an APA-style document with  the format seen in  <DOC>PUB.APA-SAMPLE.  It
was prepared from an earlier version of the material in this section.


                                   58
PUB User's Manual             New Package                  Section 4.4.1


              This is best done in a separate file that you  read in
              using the Library macro.

    TITLEn     are the lines of the title (each will be  centered on
              its own line just as you give it, with a blank line in
              between).   Type in  as many  as you  need (up  to 6).
              Example:    for    a   one-line   title    just   give
              {TabQ label,height,bodyname,title}.    Be    sure   to
              surround a title argument  with "|"s if it  contains a
              comma (see Smith, 1975b, pp. 2-3, for details).

    FIGCAPTION is the figure caption.

     To refer to a table or figure use  {TabRef LABEL} or {FigRef LABEL}
(as appropriate), where LABEL is the name you used in the definition.  A
sample table and figure follow.


     4.4.2    A sample table and figure                  

     The first sample in this section is Table 1.


                                Table 1                                 

                             A Sample Table

                        with a Second Title Line


                         <text of sample table>



     The second sample in this section is Figure 1.


                        <text of sample figure>


                       Figure 1.  A sample figure


     We can refer  to these again later.   For example, see Figure  1 or
see Table 1.


     4.4.3    Options              

     When you use TabQ or FigQ  to define a table or figure,  PUB places
it at the end of a  queue.  Then each time PUB starts a  fresh paragraph
or page, it will test the first entry on the queue, and if it  fits, PUB
places it in the text.  If it will not fit, PUB gives up for  the moment



                                   59
PUB User's Manual             New Package                  Section 4.4.3


and goes back to processing  the text until the next paragraph  or page,
where it will try again.  If  the the queue is not empty,  any remaining
tables or figures are placed at  the end of the normal text  just before
the first appendix or the index or bibliography.

     But  using the  options  described below,  you have  a  little more
control where PUB will place the tables or figures.

    1.  Normally, PUB starts a new  paragraph when it sees a tab  in the
file.  If you  do not want  PUB to try to  to insert something  from the
queue at such times, put

.AtTabs _ False;

in your file somewhere before the first TabQ or FigQ.

    If you  have used the  BlankLine macro  to tell PUB  to start  a new
paragraph when it sees  a blank line in your  file instead of at  a tab,
put

.AtBlank _ False;

in your file.

    To stop PUB  from trying to  put in a table  or figure each  time it
starts a new page, put

.AtPage _ False;

into your PUB  file somewhere before the  first figure or  table.  Also,
you can set any of these to False for a few paragraphs or pages and then
set them to True again.  This might be handy if a table or  figure comes
out in an inconvenient place in the text.

    2.  Once you have used  FigQ or TabQ to  put a figure or  table into
the queue, you can ask PUB to try to put the top item on the  queue into
the file by putting

.TryNow

into your file.  If PUB succeeds in putting the top item on  the current
page, it will try the next one on the queue and continue until the queue
is empty or there is no more room on the current page.

    To force PUB to  put the top item in  the queue into your file  at a       
given point, give the command

.DoNow

and PUB will empty  out the queue (though of  course if PUB has  not yet
seen the TabQ or FigQ which defines a given table or figure it  will not
be on the queue  yet), getting a fresh page  each time the next  item on
the queue won't fit on the current page.



                                   60
PUB User's Manual             New Package                  Section 4.4.3


    3.  PUB starts out  looking only at the  top item on the  queue, and
giving up if it doesn't fit  (unless in DoNow mode, of course).   But if
you would rather that  PUB try other items on  the queue to see  if they
will fit, give the command

.OrderQueue _ False;

    NOTE:  This may result in the order of appearance of the figures and
tables not necessarily being the  same as the order of reference  in the
text, so that you might get (see Table 1 and Table 3) and now (see Table
2) with the references being  to the proper tables but  somewhat strange
looking.

    4.  Initially, PUB will  not insert any more  text on the  same page
following a table or figure if there are 8 lines or less remaining.  You
can change this with

.FigBorder _ <number>;
.TabBorder _ <number>;

    5.  PUB automatically makes  a List of Tables and  a List of Figures
page following the Table of Contents.  Suppress these with:

.FigTable _ False;
.TabTable _ False;

Note that manuscript modes  (see below) turn these off  automatically so
that you don't have to worry about them.

    6.  If for some reason you do not want the figure captions  or table
titles  to be  put  in the  text  (they will  still  go to  the  List of
Tables/Figures depending on that setting) then give

.WantFigcaptions _ False;
.WantTabcaptions _ False;

These also are properly handled automatically in manuscript mode.

    7.  Figures and tables are both numbered in Arabic numbers.   If you
want to change them give the following with the usual  printing patterns
(see  Smith, 1975a, p.  22,  p. 40,  and  Smith, 1975b, p.  6,  for some
information about printing forms).(16)  Examples:

.FigPrint _ "I";
.TabPrint _ "A";

    8.  If you want APA manuscript format then give

.ManuscriptTables
------------
     (16) But do not use the printing form "A"--this is reserved for the
appendixes and if you use it in the main body of your text there  may be
some strange results.   Contact your PUB  maintainer if this  presents a
problem for you.


                                   61
PUB User's Manual             New Package                  Section 4.4.3


.ManuscriptFigures

which are  macros (not  variables) so are  not set  to False  but rather
perform a series of actions for you.  They set tabtable and  figtable to
False and also  wanttabcaptions and wantfigcaptions  to False and  set a
switch to make   a figure caption page  and/or pages with the  tables at
the end of the document.  This switch also causes

                  ---------------------------
                  Insert Table <n> about here
                  ---------------------------

to be put in the text.  You  make your call to TabQ and FigQ  EXACTLY as
before.  For figures, the BODYNAME argument is currently ignored (in APA
style, figures are separately prepared),  but you may include it  if you
will later be changing to non-manuscript mode.  For tables  the BODYNAME
will be used to make the table  that goes on a numbered page at  the end
of your  document.  The  HEIGHT should probably  correspond to  the true
height of your table or figure (again in case you change mode later) but
for now it is essentially ignored.

    9.  The best place to  put a TabQ or  FigQ is at the  earliest point
you want them  to come out (assuming  there is room).  For  example, you
may want a short figure to  appear in the text just above  the paragraph
in which you make your first reference to it.  This will  usually happen
if you insert a .FigQ for that figure just at the end of the immediately
preceding paragraph.

NOTE:  Be  careful when  typing in  the tables  and  figures macros!
        Because PUB will often place a table or figure some distance
        away from where it was  put on the queue, and  because these
        macros do a lot of work that is hidden from you, PUB's error
        messages  are  often  quite  obscure.   E.g.,  the line/page
        numbers given with the error messages may not be  very close
        to the actual  problem.  PUB just  gives the place  where it
        detected an error, and  some things won't show up  until PUB
        actually tries to place the table or figure.  PUB also tends
        to  be less  good at  recovering from  these errors  than it
        usually is.  In other words:  When using  the tables/figures
        macros,  a few  minutes spent  carefully  proof-reading your
        FigQ's, FigRef's,  TabQ's, TabRef's, and  the bodies  of any
        macros you define  may save you  a few hours  of frustrating
        debugging time later.




     5    Preparing the document            








                                   62
PUB User's Manual             New Package                    Section 5.1


     5.1    Creating the text file               

     The first step is to create the file for the manuscript.  At SUMEX,
probably the easiest way is to use the EDIT command.  The format is

@EDIT filename.PUB [NEW FILE]editorname <carriage-return>

You supply  the filename  (with a .PUB  extension) and  the name  of the
editor of your choice.   Note that as soon  as you type the  space after
the filename, TENEX  will print out either  [NEW FILE] or  [OLD VERSION]
and if this  message is appropriate you  can then type the  editor name.
If later in  your session at  the terminal, you  want to edit  this file
again with the same editor and you have not in the intervening time used
the EDIT command for any other file, then you can simply type

@EDIT <carriage-return>

to edit the same  file again with the  same editor.  At IMSSS,  the EDIT
command does not  allow you the  choice of editors  and it will  put you
into TECO, which is seldom what you want.  So just type the name  of the
editor you prefer to use (normally TV).



     5.2    Specifying your chosen format               

     On the very first line of your manuscript, you specify  your choice
of the two main formats  (.Journal or .Memo---see Section 1.2  above) by
one of the following commands:

.Journal
.Memo

     If you want the Book format, then put the command

.BookStyle _ True;

on a line  above the .Journal command.   It is important to  notice that           
you must use Journal if you want Book format.    

     Commands may be  in upper or lowercase  (or any mixture  you like).
These  commands cause  PUB to  load a  file that  contains preprogrammed
commands and initialization code for the chosen format.  These files are
stored on  the <PUB> directory  where you  may look at  them if  you are
interested.  NOTE:  If you do, copy them to your directory.  If  you are
using an editor to look at them (read-only, of course) and  someone else
wants to run PUB, they may have problems.

     This  manual  has  been  produced  with  the  Journal  format.  The
manuscript  is <PUB>PUB-MANUAL.PUB.  You can  look at it to see  how the
PUB commands were used to produce this particular document.(17)

------------
     (17) But I  do not  recommend doing that.   The current  version is


                                   63
PUB User's Manual             New Package                    Section 5.2


     5.3    Typing sentences             

     When the characters .  ! and ?  occur  at the end of  sentences, if
you have typed two or more  spaces then PUB will not compact  the spaces
to less  than 2.   However, if  you have  only one  space, PUB  does not
automatically  add  another  space  unless  it  would  have   anyway  in
justifying the line.  If the . !  or ? occurred at the end of a  line in
your manuscript, i.e.,  it was followed  by a carriage-return,  then PUB
will use 2 spaces in the document if the sentence turns out to end up in
the middle of a  line when it is put  in the document.  This  means that
you should use 2 spaces to separate sentences, EVEN IF a sentence ends a
line.  In other words, sentences are typed into your manuscript, exactly
the way you would ordinarily type them, except that a sentence that ends
on a line should be followed by 2 spaces.



     5.4    Special characters             

     As you type in your text, certain special characters can be used to
signal  special  formats.   See  Section  1.4  for  how  to  change  the
particular character used for any of these functions.



     5.5    Extra spaces             

     Extra spaces:  To make sure that extra spaces are left in  the text
to set  off      a particular part      use  # marks instead  of spaces,
for example, ###leave three spaces before and after this text###.

     #'s are  also used to  make sure extra  spaces are not  added.  For
example, in an enumerated list of points you may want two spaces between
the number and the text.  To achieve this give

1.##Text of enumerated point.

This will insure that PUB doesn't use either more or less than  2 spaces
when justifying the line.

     Turning off special  characters for one  use:  You can  request (by
one of the initialization commands) that one or more of these characters
be turned  off completely so  that they are  always treated  as ordinary
text or you can request that one of the special characters be changed to
another  character that  you think  you are  less likely  to use  in the
ordinary text (see Section 1.4).  But, generally, it is enough to simply
mark those times when one of the special characters is used  as ordinary
text.  This  is done by  preceding it by <CTRL>B.  <CTRL>B can  be typed
directly in SOS--hold down the control key and type B but when you later
print out the line in SOS it will appear as ?".  In TV use  edit-' (hold

------------
replete with  old-style commands  that are  not recommended  for current
use.  /MCH


                                   64
PUB User's Manual             New Package                    Section 5.5


edit key  while typing  ') and  then enter  2 which  is the  octal ASCII
representation of <CTRL>B  followed by <CR>.  An  * will appear  on your
screen where the <CTRL>B character has been placed.



     5.6    The final command              

     This command is not needed  for the Memo format.  For the  Book and
Journal formats, it is used to cause PUB to actually create the table of
contents and, if you have  used them, the bibliography, index,  and list
of figures.  The command is

.Standard Back

and it should be the very last line in your manuscript.  If you are just
doing a quick preliminary  version to see how  the text looks or  only a
small section of the manuscript  such as a single chapter, you  may want
to omit this command and  then PUB will process your  manuscript faster.
You can add the command before you produce the final version.



     5.7    Ending the edit              

     If you are  using SOS, it  is a good idea  to exit from  the editor
with the *E command which leaves the line numbers on the file.  PUB will
use these numbers in its  error messages which will help you  locate the
error in the file.  (If there are no line numbers, PUB will make up some
for its error messages but these will be harder to use.)

     Another hint, whichever editor you   are using, is to put a  lot of
pagemarks in your file (at  least at the start of every  major section).
PUB ignores these pagemarks so they have no effect on the  formatting of
the text, but they are very useful for later editing and  quick location
of errors.  Also PUB  prints out the number  of each page in  the source
file as it processes the page so that you can see how PUB is progressing
as it munches through your file.



     5.8    Starting the PUB program               

     When your manuscript file is all ready, you run the PUB  program by
the command

@PUB

and PUB will print

MANUSCRIPT:

Here you  should type  the name of  your manuscript  file.  If  you have



                                   65
PUB User's Manual             New Package                    Section 5.8


given it a .PUB extension, you don't need to type the extension just the
filename.

     There are   optional features available  here.  After you  type the
filename followed  by a  space or carriage-return,  PUB will  print [OLD
VERSION] and  if you  don't want  to use  any of  the options,  you type
another  carriage-return.  If  you do  want an  optional feature  type a
comma.

MANUSCRIPT: PUB-MANUAL [OLD VERSION],
@@

PUB will respond  with the @@ to  indicate it is ready  for subcommands.
Typing a ? will print out the available options.  There are quite  a few
available but probably only four are useful:

diablo
output (file name)
print debug info (line numbers and errors) in margins of document
spread = 1 to 9 (default is 1 = single space)

Only a single letter (d, o, p, or s) is needed--use lowercase letters!

     The  d  option will  get  you proportional  spacing  on  the Diablo
printer.  See Section 4.2 for details and warnings.

     Ordinarily PUB gives  your document a name  that it makes  by using
the filename from your manuscript with a .DOC extension.  If you  want a
different name, type  @@o filename.

     The p option causes PUB to print the approximate line  numbers from
your manuscript in the margin of the document so that you can  find your
way around while debugging.

     Your document  will be  doublespaced (unless  you gave  the .Single
Space  or  .Triple  Space   command.)   If  you  want   this  particular
compilation  of  the  document  to  have  different  spacing  than  that
specified in the manuscript file give the subcommand

@@s n

where n  is the  spacing you  want (it  can be  from 1  to 9).   This is
especially useful if it is your  first try with the file and  you expect
to have a  lot of errors  so that you want  extra room left  around each
line of the listing for you to mark the errors.

     When you have given all the subcommands you want, type  a carriage-
return to the @@ prompt.

@@<carriage-return>






                                   66
PUB User's Manual             New Package                    Section 5.9


     5.9    PUB starts to work               

     PUB will print  out the name  of your file  followed by a  1.  This
means that it has begun processing the first page of your file.  When it
sees the name of the format file that you have selected, that  name will
be printed followed  by the page numbers  from that file.  It  will also
print some  other file  names that  depend on  your choice  of features.
Then  PUB  will continue  printing  the  numbers of  the  pages  in your
manuscript as it processes them.  When it has printed the numbers of all
the pages in your  file, it will print  a period.  PUB has  now finished
going through your file.  It  needs to get all the  information together
and do some processing.  As it does this, it works with some  files that
it has  created for  holding information  and intermediate  results.  It
will now start printing  out the names of  these files as it  works with
them.   They  will  have  the  same  filename  as  your  manuscript with
different extensions.   Next it  will print PASS  TWO:  followed  by the
name  it  is  using:   for your  document  (your  filename  with  a .DOC
extension unless  you used  the D  option above  to specify  a different
name.)  PUB is now writing the results of its compilation on  the output
file.   As each  page is  written, PUB  prints the  page number  on your
terminal.

     When it is  finished, PUB exits.  The  @ prompt will be  printed to
show that you are back at the TENEX EXEC level.  As PUB works it creates
several files to  hold intermediate results  of its processing.   At the
end  it deletes  these files  for  you but  you must  give  the @EXPUNGE
command yourself.  Unfortunately a problem arises if PUB never reaches a
normal  end  (there is  an  error  and it  cannot  continue,  the system
crashes,  etc.).   The  files  will be  on  your  directory.   One  is a
temporary file which creates no problem but the others must  be manually
deleted by you.  They will all have the same filename as your manuscript
with  a variety  of  different extensions  so check  your  directory and
delete them. (The programs NEWFILES, FILES, and EDIR can all  be helpful
in  getting rid  of the  extra files,  some of  which have  very similar
names.)  Then EXPUNGE.



     5.10    Error messages              

     Most of  the error messages  from PUB are  fairly self-explanatory.
The line/page number is included.  If  the page is 0 then the  error was
detected while PUB was doing general processing and is not pinpointed to
a page in your  manuscript (the line number refers  to a line in  one of
PUB's temp files.)  You  have two choices:

<linefeed>  continue automatically don't stop if there are more errors
            (the error messages will still be printed on your terminal)

<cr>        continue but stop again at the next error

Occasionally an error will be serious enough to cause PUB  to completely
misunderstand the rest of  the document.  Usually however PUB  is fairly



                                   67
PUB User's Manual             New Package                   Section 5.10


good at recovering after an  error.  The most serious errors  are places
where you  have started  some sort  of special  format and  forgotten to
signal when you  wanted it ended.  When  this happens PUB  will probably
spew forth a series of erroneous error messages as it trys  to interpret
the following part of your text.  Generally after a short while PUB will
be able to  start processing coherently  again although your  format may
well be screwed  up from this  point on.  It is  best though to  let PUB
continue running.  First,  a listing of the  document as it ends  up may
help you  see more  easily what your  error was  and where  it occurred.
Second, PUB is so slow that every effort should be made to restart it as
few times as possible.  And third,  if you stop in the middle,  you have
to  deal  with  the problem  of  manually  getting rid  of  all  the PUB
processing files.  If you continue running in spite of errors,  you will
get a list of all the errors (some of which will obviously be erroneous)
so that you  can fix all  of them before  rerunning PUB.  You  will also
have a copy of your document even if it is somewhat poorly  formatted so
that you can  proofread and make all  the typing corrections  before the
next PUB run.

     Certain  errors are  completely  local and  have no  effect  on the
processing of the rest of  the document.  Just make a list  for yourself
of all the places that need  correcting so that they can all be  done at
once.  One such non-serious error message is that a line is too long and
characters were lost.  This happens in ByHand blocks where your line was
too wide.  Make  a list of  these and fix  them later.  (Note  that this
message may appear erroneously if you have forgotten a .EndHand  and PUB
is trying  to process the  rest of your  text as ByHand.)   Another non-
serious error is undefined labels.(18)  This will happen if  you haven't
typed  your bibliography  yet or  reference a  section that  you haven't
typed yet or  forgot to give  a label.  Wait  until PUB is  finished (by
typing  <cr> each  time it  prints an  error message),  correct  all the
genuine errors and forget the rest for the meantime.



     5.11    Looking at the output                

     When PUB has successfully  gotten through your file with  no errors
you can  @LIST the .DOC  file on  the lineprinter (or  @TYPE it  on your
terminal.)  At IMSSS this is done by the LINEPRINTER or  SPOOL programs.
At SUMEX use the command

@LIST filename.DOC,  or  @TYPE filename.DOC,
@@HEADING
   (in future versions of LIST--this may change to @@NO HEADING)
@@NO  (page numbers)
@@FORMFEED
@@<carriage return>

------------
     (18) If you  are using  the .Bib macro  and you  have asked  PUB to
alphabetize the entries  for you, and you  have an undefined label  in a
.BibRef, the bibliography section will look very, very strange.  But the
problem will go away when you add all of the missing labels.


                                   68
PUB User's Manual             New Package                   Section 5.11


where the , indicates you want subcommands and the three subcommands are
given  to suppress  the addition  of headings  and page  numbers  by the
lineprinter since PUB has already  put on page numbers and to  make sure
that  the  PUB pagemarks  (formfeeds)  are used  to  determine  the page
placement in the listing.  You may want to just give @@NO (page numbers)
and let the lister add its  heading since the heading will give  you the
filename including version and  the date.  If you make  several listings
of successively modified versions of the file, the heading will help you
keep them straight.  Note that the lineprinter (and some  terminals) use
a backarrow rather  than an underline character  so your file  will look
somewhat peculiar.  (Also  the backarrows may  be printed either  in the
margin or right on top of your text.)  However, when you print  it later
on a higher quality printing device, the underlines will be correct.

     You  should proofread  the listing,  check that  the  formatting is
correct, and possibly run the SPELL program (see <DOC>SPELL.MANUAL).  If
changes need to be made,  the .PUB manuscript file should be  edited and
then submitted to PUB again.  You should never edit the .DOC  file.  The
editor will destroy the underlines used by PUB.  An even  more important
consideration is that any  modifications made to the document  file will
not be in  the manuscript file  so that in  several days or  months time
when  you want  to  modify the  manuscript  it won't  correspond  to the
document and you won't remember what the changes were.

     As soon as you are completely satisfied with your document, you can
list it on a higher quality device.



     5.12    Printing the final version                

     The PUB half-line processing is especially for the DIABLO,  but the
underlining will probably be  correct on any high-quality  terminal when
listed with  the regular  printing programs.  At  IMSSS, use  the DIABLO
located in the  Xerox Room.  At SUMEX,  the DIABLO terminal in  TB105 is
used with the DIABLO printing program. Instructions are posted  near the
terminal and also  available on-line in <DOC>DIABLO.HELP.




     6    Ways to speed up the process               

     PUB is a fairly slow  program and has the disadvantage  that errors
cannot be corrected while it is running so that the entire  program must
be rerun  to get an  error-free output.  With  long documents  this will
definitely be a burden!  There are six ways of saving time.

     1)  Omit the  .Standard Back  command when  you do  the preliminary
version.  All the frills will be left off the beginning and the end; and
you will get the body of your text much faster.

     2)  Divide your document into smaller units and work with  one unit



                                   69
PUB User's Manual             New Package                      Section 6


at a time.  Each of your  units should be stored in a separate  file and
named appropriately.  For example,  you might have files  called CHAP1.,
CHAP2., CHAP3., APP.,  and BIBLIO.  No special  text is required  at the
beginning or end of these files.   It is simply that the one  large file
is split into parts.  To tie all this together you need a single control
file.  Commands are  given in this file  which "require" loading  of the
other  files.   The  terminology  here will  be  familar  to  SAIL users
although it  should be  noted that  these commands  are NOT  followed by
semicolons-colons.   For example,  the file  REPORT.PUB might  look like
this:

. <any  initialization commands>
.             .
.             .
.Journal
. <any special macros, e.g. BlankLine>
.             .
.             .
.Library "CHAP1" Source!File;    (or .Require "CHAP1" Source!File )
.Library "CHAP2";
.Library "CHAP3";
.Library "APP";
.Library "BIBLIO";
.Standard Back

When you run PUB, you give it the filename REPORT.PUB and  it "requires"
all of the other files.  At any  time you may work on only a  portion of
your manuscript by removing all but the relevant require statements from
this control file.

     For example, once  you have finished  CHAP1 and are  satisfied with
it, there is  no reason that  it must be redone  as you submit  CHAP2 to
PUB.  When each section has been done then they can all be  submitted to
PUB with the .Standard  Back statement for the final  compilation.  This
is particularly useful for dissertations or articles that may be written
a section at a  time over extended time  periods.  Note that if  not all
sections are being done at the same time, you may get a lot of undefined
label error  messages since  you are referencing  sections that  are not
there.  These error messages can be ignored.  PUB simply prints  a blank
space in the  text for intratext referencing  and prints []  for missing
bibliographic references.   With longer documents  there are  other good
reasons for having the manuscript divided into several parts:  Most text
editors will start  up and finish faster  with small files and  there is
less chance of losing a large  amount of work in the event of  a serious
computer "crash".

     3)  If you have a large number of initialization commands  that you
always use, you may want to  put them all in a file  called INITIAL.PUB,
for example,

.Journal;
.UnderLineBetween(<<,>);
.Single Space;
.BlankLine;


                                   70
PUB User's Manual             New Package                      Section 6


.Indent 0;

and then use the one  line .Library "INITIAL.PUB"; at the start  of each
manuscript.  You will still need  the .Standard Back at the end  of your
manuscript file.

     4)  Probably  the  most  common and  time-consuming  error  made in
typing  the manuscript  is to  leave out  ending commands  of  all sorts
(.EndHand, .End, .EndQuote, the second % for indexing, the }  for ending
intra-text commands, etc.).  Extreme caution should be used when typing.
One  trick  to  make sure  this  doesn't  happen is  to  put  the ending
statement  in  the  text at  the  same  time you  put  in  the beginning
statement.  Then type in all your relevant text as an  insertion between
the two  statements.   This makes  the typing of  your text  rather more
trouble than ordinary,  but if you find  you have a habit  of forgetting
the end statements it may be well worth the trouble.

     5)  Another  very  common  error  is to  misspell  one  of  the PUB
commands.   It  is  a good  idea  to  run the  SPELL  program  over your
manuscript before running PUB.  This will catch the normal  spelling and
typographical   errors;   and,  by   including   the   SPELL  dictionary
<PUB>PUB.WDS which  includes the PUB  command words, it  will also  be a
simple to use way catch  the PUB word misspellings.  The first  time you
use SPELL on a manuscript, there will be a large number  of unrecognized
words  which you  used as  single-word labels,  etc.  If  you  add these
incrementally  to  your  dictionary,  then  each  time  you  modify  the
manuscript, you  can run SPELL  with a minimum  of fuss because  all the
words that appeared in the original will be accounted for.

     6)  If you are PUBing a  document with a large index, you  can save
10-15% of the CPU time by using the following "trick:"

@PUB<cr>
MANUSCRIPT:  DISS.PUB<CR> [OLD VERSION],    <= NOTE THE COMMA!
@@h<cr>UGE
@@<cr>

(And PUB will go to work.)

The  comma after  the [OLD  VERSION] message  is printed  puts  you into
subcommand mode.  Typing the "h"  gets you a bigger symbol  table.  This
saves PUB a lot of time along the way and your runs will  finish faster.
(It  also makes  your job  bigger,  so you  shouldn't do  it  with small
documents.)

     There  is a  bug  in subcommand  mode  right now.   Instead  of PUB
filling in the letters "UGE" it will fill in "UTPUT" instead.  This will
be fixed the next time we need to bring up a new PUB.SAV.  IT IS TOTALLY
HARMLESS; all that happens is that it prints the wrong message.  But PUB
still knows what  to do.  Also, you  can give more than  one subcommand.
So  you can  do proportional  spacing and  still ask  for a  huge symbol
table.




                                   71
PUB User's Manual             New Package                      Section 7


     7    Getting fancier           

     If you want to design your own formats or just learn more about PUB
see  (Tesler, 1972).   You can  write  your own  macros,  use  the block
structure, and take advantage of conditional statements to add precision
to the formatting.  However, be  warned that PUB is a very  difficult to
use language both because the  manual is somewhat difficult to  read and
because the way PUB acts in various situations is not always the way one
would intuitively expect it to act.















































                                   72
PUB User's Manual             New Package                     Appendix A


                               Appendix A                                

                   Summary of Table and Figure Macros                        





                                Table A                                 

         A List of Macros Used in the Table and Figure Package


        {TabQ LABEL,HEIGHT,BODYNAME,TITLE1,...,TITLE6}

        {TabRef LABEL}

        {FigQ LABEL,HEIGHT,BODYNAME,TITLE}

        {Figref LABEL}

        ManuscriptTables

        ManuscriptFigures

        TryNow

        DoNow


     Table A  is supplied to  illustrate the handling  of a table  in an
appendix.


                ----------------
                |              |
                |              |
                ----------------


Figure  A.   A sample  figure  in an  appendix  with a  long  caption to
           illustrate  how  a caption  that  is longer  than  a  line is
           treated.


     And Figure A illustrates the  handling of a figure in  an appendix.
It also illustrates how a long figure caption is treated.









                                   73
PUB User's Manual             New Package                     Appendix B


                               Appendix B                                

                       A sample table of contents                           






                         Table of Contents                           




Section                                                           Page



    List of Figures           .  .  .  .  .  .  .  .  .  .  .  .  . iv

I.    RESOURCE IDENTIFICATION PAGE  .  .  .  .  .  .  .  .  .  .  .  1

II.   RESOURCE OPERATIONS     .  .  .  .  .  .  .  .  .  .  .  .  .  2

    II.A   PROGRESS           .  .  .  .  .  .  .  .  .  .  .  .  .  2

         II.A.1  RESOURCE SUMMARY AND GOALS  .  .  .  .  .  .  .  .  2

         II.A.2  TECHNICAL PROGRESS .  .  .  .  .  .  .  .  .  .  .  3

              II.A.2.a  SYSTEM DEVELOPMENT AND OPERATIONS   .  .  .  3

              II.A.2.b  USER SUPPORT AND INTERFACES   .  .  .  .  . 15

         II.A.3  RESOURCE MANAGEMENT   .  .  .  .  .  .  .  .  .  . 18

         II.A.4  FUTURE PLANS .  .  .  .  .  .  .  .  .  .  .  .  . 24





     The above is a sample table of contents made with  the FULLCONTENTS
option.  Note that  the default printing  forms for the  various section
levels have also been changed in this example.











                                   74
PUB User's Manual             New Package                     Appendix C


                               Appendix C                                

                          Summary of Commands                            




I.  The manuscript

    A.  Use an editor to create a manuscript file     Section 5.1

    B.  Choose either Journal, or Memo format and put

        .Journal; (or .Memo;)

        as the first  line in your  file.   If you want Book  format you
        must use Journal and  put .BookStyle _ True; above  the .Journal        
        line.  See Section 5.2.

    C.  Type  any  of  the following  commands  if  needed  (the default
        settings are indicated in parentheses following the command--use
        these commands only if the defaults are unacceptable):

.Page Frame n High m Wide;        (60 high 72 wide--for PRINTRONIX)
.Area Text Lines p To q;          (text is lines 6 to 57)
.Title Area Heading Lines s To t; (area for heading)
.Title Area Footing Line r;       (footing appears on line 60)
.Place Text;                      (this starts the new size)

        [To change any one of n,m,p,r,s,t or q above the entire four
         lines must be given probably using the default values for the
         other variables.]

        To divide your pages into columns give the command above as
.Area Text Lines p To q In s Columns t Wide|Apart
.
.Indent n;                       (8 space paragraph indentation)
.Single Space; or .Triple Space; (double spacing)
.Preface n;                      (1 blankline between paragraphs)
.BlankLine;                      (blank lines are ignored)
.Every|Even|Odd Heading (l,c,r); (no heading)
.Every|Even|Odd Footing (l,c,r); (page number in c)
.Retain;                         (blank spaces are COMPACTed)
.NoJust;                         (.Adjust to justify and fill)
.WantNotePage _ True;            (footnotes on pages in text)
.FootSep _ "<line>";             (blank line separator)
.NoContents;                     (automatically created)
.Turn Off "characters";          (#^{<ctrl>A,X, and B are on--%
                                       is turned off using IndexChar)
.Turn On "newchar" For "oldchar"; (this is used to change all above
                                     characters-must also Turn Off)
.Next Page;                      (this command only needed if no
                                     sections-put after title page)



                                   75
PUB User's Manual             New Package                     Appendix C


.UnderLineBetween (<1 to 5 chars>,<character>);

                          (<CTRL>A and <CTRL>X used for underlining)


    D.  Type in your  title page followed by  .Next Page if you  are NOT
        using section headings.  See Section 3.1.

    E.  Type  in   your  acknowledgment  page   (if  any)   preceded  by
        .Acknowledgments $( and followed by .)$Q.  See Section 3.4.

    F.  Type the section heading for your first section as

        .Sec sectionname, label:  (.Ss,.Sss, and .Ssss for subsections)

        If you  have no  section headings in  Journal format  give .Next
        Page before typing text.  No section headings are used  for Memo
        format).  See Section 3.5.

    G.  Use the  following command characters  if necessary  when typing
        your text:

        <CTRL>A<CTRL>Xtext<CTRL>X<CTRL>A   to underline (or characters
                                           set up by .UnderLineBetween)
        <CTRL>A[text]                      to subscript (full-line!)
        ^[text]                           to superscript   " "
        <CTRL>A[text]&^[text]             align subscript & superscript
        #                                 gets exact # of blank spaces
        <CTRL>B<character>                 to use <character> as
                                             ordinary text
        %text%                         to index
        .BeginInd word & .EndInd word    to index in page range

    H.  Use the following commands to make complex half-line formats for
        printing on the DIABLO:     p. 29

          {Sub text-of-subscript}
          {Sup text-of-superscript}
          {SupSub text-of-superscript,text-of-subscript}
          {Bu number-of-spaces-to-backup}
          {Hu number-of-halflines-to-go-up}
          {Hd number-of-halflines-to-go-down}  .

    I.  Use  the  following commands  to  format your  text:   (See also
        Section 2.)

            1)  .Group;
                lines of text  to be
                kept together on the
                same page
                .Apart;

            2)  .Skip n; to leave n blank lines (.Skip; for 1 line)
                .Group Skip n Apart; to leave lines even at top of page


                                   76
PUB User's Manual             New Package                     Appendix C


            3)  .Skip to Column 1; to start a new page at this point

            4)  .Begin Narrow l,r;
                lines of text with the margins to be narrowed
                l from the  left margin and  r from the right
                .Widen End;

            5)  .Comment some comment followed by ;

            6)  .ByHand; or .ByHand Group; or .ByHand Center;
                text    that        you        will
                be      formatting  yourself
                .EndHand;

    J.  Use the following  special formats:  (See Section 4.)

.Crown (crown, vest,rightmargin);

The crown line  in this format  is not indented  and the vest  lines are
        each indented  8 spaces.   The right margin  is not  affected at
        all.  Paragraphs are single-spaced.

These  defaults  are probably  not  useful for  many  purposes,  but the
        arguments can be used to set up different formats.

Each  paragraph  is started  with  a tab  even  though it  will  have no
        indentation in the document.   The tab merely signals  the start
        of the paragraph.

Use #'s rather than spaces to make sure the spacing is preserved exactly
        as you type it to get everything lined up.

This format is especially useful for NOTEs and itemized points  with the
        item on the left and the text justified on the right.   See page
        17 for examples.


.EndCrown


.Quote(crown, vest, rightmargin);

This format is is exactly like Crown (including the same defaults).  The
                only difference is that the margins are  narrowed rather
                than  being reset,  so  hand formatting  works  a little
                differently.


.EndQuote;


.List (indent,leftmargin,rightmargin,printingform)




                                   77
PUB User's Manual             New Package                     Appendix C


            1)  This format narrows each margin by 8 and indents
        the first line of paragraphs by 4.  These may be changed
        by the arguments.   Lines within paragraphs  are single-
        spaced.

            2)  Paragraphs   have   regular   shape    and   are
        automatically numbered.  The  printing form used  is the
        number  followed  by a  )  .   To  change  this  see the
        printing form instructions in the discussion  of OutLine
        below.

            3)  Instead of signalling new paragraphs with a tab,
        each is  preceded by the  command line  .Item   and then
        the  text begins  at the  margin on  the next  line, for
        example,
        .List;
        .Item
        First item on the list is typed starting at the
        margin and may extend as many lines as
        necessary.
        .Item
        Now the next item.
        .EndList

.EndList



.OutLine (form1,form2,form3,form4,form5)

        I.  Optional commands

            A.  .SetOutLineIndents (n1,n2,n3,n4,n5,rightmargin);

                1.  Defaults  are 0,4,8,12,16  and  the original
                    right margin.

                2.  To narrow left margin add the value  to each
                    indent.

            B.  .Preface  0;--Each point  on outline  is single-
                spaced  with  a  line  between  points--use this
                command to leave no line between points.

            C.  .ResetIndents -- to put regularly formatted text
                in the middle of the outline.

        II.  Printing forms

            A.  The forms are:

                I  Upper Roman
                A  Upper Alpha
                1  Arabic


                                   78
PUB User's Manual             New Package                     Appendix C


                a  Lower Alpha
                i  Lower Roman

            B.  The  default is  to  assign these  forms  to the
                levels  in the  order  given and  to  follow the
                number or letter with a period.


.EndOutLine



{Fraction numerator, denominator}

        This justifies the two lines of a fraction.
          (For non-DIABLO use.)



    K.  Footnotes are obtained by $$text of footnote.*  See Section 2.8.

    L.  Intra-text referencing uses the labels defined with  the section
        headings.   {SecRef label}  or {SsRef  label} or  {SssRef label}
        placed anywhere in your text will print out as Section x where x
        is the number PUB has assigned to the given section.  If a label
        has been given to an individual page by .label: Page  then it is
        referenced  by {PageRef  label}  or {PRef  label}  and similarly
        figures by {FigRef label} and appendixes by {AppRef label}.  See
        Section 3.7.

    M.  Bibliographic  references are  made  by {BibRef  label}  and PUB
        prints  [n]  where  n  is  the  number  of  the  entry   in  the
        bibliography.  Many variations are possible; see Section 3.8.

    N.  Appendixes (if any) should be at the end of the body of the text
        and preceded by the command

.Appendix appendixname, label:      Section 3.6

    O.  Bibliography entries are given at the end of the  manuscript (or
        in-line if you prefer) in the following format:
.Bib label,|text of entry#
.more text of reference#
.final line of text of entry|

See Section 3.8 for other possibilities.

    P.  The final step in preparing the file is to put the command

.Standard Back;  (not needed or wanted in Memo).  See Section 5.6.

    Q.  Exit from the editor (with E in SOS to retain line numbers)

II.  Running PUB


                                   79
PUB User's Manual             New Package                     Appendix C


    A.  Type @PUB

    B.  Respond to MANUSCRIPT: with your filename (see Section 5.8).

    C.  Follow the [OLD VERSION] message with , for these subcommands:

         @@d            (to get proportional spacing on the Diablo)
         @@o filename   (to specify output filename)
         @@p            (to request line numbers in margin)
         @@s n          (to request n-spacing)

    D.  If  there  are  error  messages  type  <cr>  (continue)  or <lf>
        (continue automatically).  See Section 5.10.

    E.  Correct the errors in the manuscript and repeat A and B

    F.  Make a preliminary listing on the lineprinter or  your terminal.
        See Section 5.11.

    G.  Proofread, run SPELL, make all corrections and repeat A to F

    H.  When you are  satisfied with the document,  print it on  a high-
        quality device (see <DOC>DIABLO.HELP and Section 5.12).

    I.  Add any drawings and non-printing characters by hand

III.  Hints for faster use--see Section 6.

    A.  Omit the .Standard Back; from early versions

    B.  Use a control file and separate the text into smaller units

    C.  Put lots of pagemarks in your manuscript for easier editing

    D.  Type in  beginning and ending  commands and insert  text between
        commands

    E.  Run SPELL before running PUB to catch typos in the text  and the
        PUB command words

    F.  Make a command file if you always use same initial commands















                                   80
PUB User's Manual             New Package


                               References                               






1.   American Psychological Association.  Publication manual  (2nd ed.).                                           
     Washington, D.C.:  Author, 1974.


2.   Smith,  N.   SUMEX-AIM  PUB  manual.   Stanford,  Calif.:  Stanford                       
     University, 1975.  (a)


3.   Smith,  N.  Update  to  SUMEX-AIM PUB  manual.   Stanford, Calif.:                          
     Stanford University, 1975.  (b)


4.   Tesler,  Larry, PUB:  The Document  Compiler,  Stanford  Artificial                          
     Intelligence Project, Operating Note 70, September 1972.



































                                   81
PUB User's Manual             New Package


                                 Index                                 




^  28                                 .BlankLine;  15, 60
_  5                                  .BookStyle  2, 63
                                      .BothSides  56
                                      .Bu  29
!  8, 42, 52                          .ByHand;  24
                                      .ByHand; Center;  24
                                      .ByHand; Group;  24
$(  9                                 .Comment  23
                                      .Compact;  16
                                      .ContentsHead  34
)$  9                                 .Continue;  21
                                      .Crown  17
                                      .CrownSpacing  18
.  8                                  .Date  13
.<<...>>  23                          .Day  13
.Abstract  33                         .DefaultSideSettings  56
.AbstrHead  33                        .Device Diablo  55
.AckHead  35                          .Device Lpt;  55
.Acknowledgments  35                  .Device Tty;  25, 55
.AddBib  47                           .DoNow  60
.Adjust;  16                          .Double Space;  14
.Alternate  56                        .EliteDiablo  54
.Apart;  21                           .EmboldenBetween  26
.Apart; Continue;  21                 .End;  22
.AppBottom  40                        .EndCrown;  18
.AppCnt!  42                          .EndHand;  24
.AppearOrder  46                      .EndInd  49
.Appendix  40                         .EndList;  21
.AppHead  40                          .EndOutline  51
.AppPrint  37, 40                     .EndQuote;  19
.AppRef  41                           .EndSideChar  57
.AppSkip  41                          .Even Heading  13
.Area Text  11                        .Every Footing  12
.AtBlank  60                          .Every Heading  12
.AtPage  60                           .FigBorder  61
.AtTabs  60                           .FigCnt!  42
.Begin Center  22                     .FigPrint  61
.Begin Narrow  22                     .FigRef  58, 59
.BeginInd  49                         .FigTable  61
.Bib  43                              .FootSep  30
.BibBrackets  46                      .ForceAppPage  40
.BibCnt!  42                          .Fraction  28
.BibCrown  45                         .Full  58
.BibHead  45                          .FullContents  34
.BibOrder  47                         .Group;  21
.BibPreface  45                       .Half  58
.BibRef  46                           .HalfLineNote  31
.BibSpacing  45                       .Hd  29
.BibVest  45                          .HeadingSkip  32
.Blank Page  22                       .Hu  29

                                   82
PUB User's Manual             New Package







.Ind  49                              .SecBottom  39
.Indent1  14                          .SecCnt!  42
.IndexBottom  50                      .SecHead  38
.IndexChar  8, 49                     .SecNumber  39
.IndexHead  50                        .SecPrint  37
.Item;  19                            .SecRef  41
.Journal  63                          .SepApp  40
.Journal;  2, 63                      .SepSec  38
.Label:  41                           .SepSs  38
.LeftOnly  56                         .SepSss  38
.Library  10, 70                      .SepSsss  38
.List  19                             .SetOrigMargs  32
.ListSpacing  20                      .SetOutLineIndents  51
.Macro  58                            .SideChar  57
.ManuscriptFigures  62                .Single Space;  14
.ManuscriptTables  61                 .Skip  21
.MarginHeadings  37                   .Skip To Column 1;  22
.Memo  63                             .Sneak  30
.Memo;  2, 63                         .Ss  36
.Month  13                            .SsCnt!  42
.Next Page;  22, 35                   .SsHead  38
.NoContents  34                       .SsNumber  39
.NoJust;  16                          .SsPrint  34, 37
.NoPeriodSec  34                      .SSRef  41
.NoteSpacing  32                      .Sss  36
.NumberedBib  45                      .SssCnt!  42
.Odd Heading  13                      .SssPrint  37
.Once Center;  23                     .SssRef  41
.OrderQueue  61                       .Ssss  36
.OrigLMarg  32                        .SsssCnt!  42
.OrigRMarg  32                        .SsssPrint  37
.OutLine  51                          .SsssRef  41
.OutlineSpacing  51                   .Standard Back  65
.Page Frame  11                       .StandardSpacing  33
.Page!  13, 42                        .StarNote  31
.PageNote  31                         .Sub  29
.PageRef  42                          .SubSecName  39
.PicaDiablo  54                       .SubSecNumber  39
.Place Text;  11                      .Sup  29
.PlainNumberNote  31                  .SupSub  29
.PRef  42                             .TabBorder  61
.Preface  15                          .TabCnt!  42
.Quarter  58                          .TabPrint  61
.Quote  19                            .TabQ  58
.QuoteSpacing  19                     .TabRef  59
.Require  10, 70                      .TabTable  61
.ResetIndents  53                     .Third  58
.Retain;  15                          .Title Area Footing  11
.RightOnly  56                        .Title Area Heading  11
.Sec  36                              .TitlePage  32

                                   83
PUB User's Manual             New Package







.Triple Space;  14                    blank lines  15, 21
.TryNow  60                           Book format  2
.Tty  24                              bulletin board  10
.Turn Off  7
.Turn On  7
.UnderboldBetween;  26                caret  7, 28
.UnderlineBetween  25                 center  23
.UnderlineHead  35                    column  12
.WantBib  43                          command characters  3
.WantFigcaptions  61                  commands  3, 63
.WantFigDef  58                       comments  23
.WantNotePage  30                     control characters  6
.WantOutline  50                      crown  14
.WantSidechars  55                    curly brackets  3
.WantTabcaptions  61
.WantTabDef  58
.Widen; End;  22                      debugging  66
.Xcribl;  25                          DIABLO  29, 54, 69
.Year  13                             document  1


:  8                                  emboldening  25
                                      error messages  67
                                      Extra periods in section
;  4                                     headings  34
                                      extra spaces  15, 64

<CTRL>A  8, 27, 28
<CTRL>B  6, 7, 8                      filling  16
<CTRL>H  30                           footing  12
<CTRL>I  15                           footing area  11
<CTRL>P  9                            footnotes  30-32
<CTRL>Q  9                            formfeeds  9
<CTRL>R  30                           fractions  28
<CTRL>S  30
<CTRL>X  8, 27
                                      heading  12
                                      heading area  11
?  8                                  hem  14
                                      hem line  21

acknowledgment page  35
ampersand  28                         indentation  14
annotated bibliography  42            index  49
appendixes  40                        index section  49-50
                                      indexing character  49
                                      intra-text references  36, 41
backarrow  5                          intra-text referencing  36
bibliography formatting
   commands  44

                                   84
PUB User's Manual             New Package







Journal format  2                     tab  15
justification  15, 16                 table of contents  34
                                      templates  9
                                      text area  11
labels  41                            title page  32
length  12
line length  11
                                      underbar  5
                                      underlining  25-28
macro arguments  4                    uparrow  7, 28
macros  3
manuscript  1
margins  22                           variable assignments  3
Memo format  2                        vertical bar  4
multiple intra-text references  42    vest  14
MYPUB.DFS  10

                                      widows  21
note  17                              width  11, 12
Null printing form  41


outline  50


page break  22
page number  12
page numbering  36
page size  11
pagemarks  9
paragraph break  15
paragraph formats  13, 16
paragraphing  13-15
preface  14
printing forms  9, 52
proportional spacing  54
PUBSTD.DFS  10


section headings  35, 36
semicolon  4
signal responses  3, 6, 8
somescripts  28
spaces  15
special characters  6-8, 64
spread  14
subcommand mode  54
subscripts  28
superscripts  28


                                   85
   = 	;