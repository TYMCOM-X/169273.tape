TELECOPY ** FICHE/FRAME BREAK *****
CW
CW     IDENT 03/25/77          NEW BUFFERED TERMINAL OUTPUT CODE
       NOLIST STAT,EXT

CPS    EQU 384                 CHARS/SEC EXPECTED THRU NETWORK (UPPER LIMIT)
NBUF EQU 15    NO. OF BUFFERS
WAIT   EQU [NBUF*384]/2        ALLOW RING TO HALF-EMPTY WHEN FULL
WAIT   EQU WAIT/CPS            BEFORE FILLING IT AGAIN.
COMBUF EQU 34000B
BUF    EQU COMBUF+200B
FREE   EQU 4B7
BUSY   EQU 2B7

$OINIT ZRO;* INITIALIZE RING.  MARKS ALL BUFFERS FREE,
*      AND THREADS COMMANDS PROPERLY.  CALL THIS ROUTINE AFTER
*      ANY EXCEPTION.
 LDA =BUF; STA WCC (BUFFERLET ADDR)
 LDA =NBUF-1; STA CCTR (SET UP 15 BUFFERLETS)
 LDX =COMBUF (ADDRESS 1ST COMMAND)
 LDA =COMBUF+3
 LDB =FREE
INIT1 STA WCP; STA 1,2 (THREAD COMMAND LIST)
       STB 0,2 (INITIALIZE FLAG WORD)
       LDA WCC
       STA 2,2 (INITIALIZE BUFFERLET ADDR.)
       ADD =200B; STA WCC
       LDA =3; ADD WCP
 EAX 3,2; SKR CCTR; BRU INIT1
 LDA =COMBUF; STA -2,2 (THREAD LAST COMMAND TO FIRST); STA WCP
 BRM CINIT (SET UP BUFFERLET PTRS)
 STA TOTCCT    ('A'=0 ON RETURN FOR CINIT)
 LDA CWTAB+3; STA CWDISP
 BRR OINIT

$WCC   DATA 0                  (CHAR COUNT IN BUFFERLET)
WCP    DATA COMBUF             (CURRENT COMMAND PTR)
CCTR   DATA -1                 (COUNT OF COMMANDS ACTIVE)
CWPT   DATA BUF                (CURRENT WORD BEING WRITTEN BY CW)
CWX    ZRO;*                   (SAVE X WHEN CWF CALLED)

$CW    ZRO;* OUTPUT A CHAR.  COST ABOUT 18 CYCLES PER CHAR.
       ETR =377B
       ADM CHECK
       MIN WCC
CWDISP BRU CWTAB               (JUMP TO APPROPRIATE ROUTINE)
CWTAB  BRU CHR0
       BRU CHR1
       BRU CHR2
       BRU CWTAB
CHR0   CLB; LSH 16; STA* CWPT; MIN CWDISP; BRR CW
CHR1   CLB; LSH 8; ADM* CWPT; MIN CWDISP; BRR CW
CHR2   ADM* CWPT; MIN CWPT; LDA CWTAB+3; STA CWDISP
       LDA WCC; SKE =600B; BRR CW
       BRM CWF; BRM TRAP; BRR CW

* INITIALIZE BUFFERLET PTRS
CINIT ZRO;* INITIALIZE STRING POINTERS
       LDX WCP; LDA 2,2; ETR =37777B; AXC; STA WCC
       STX CWPT
       BRR CINIT

CKER   ZRO;* CHECK FOR EXCEPTION FLAGGED
       LDX CO; LDA =COMBUF; BRS 75; CAX; SKE WCP; BRR CKER
       LDA 0,2; SKE =FREE+BUSY; BRR CKER
       LDA =-1; STA CCTR; MIN CKER; BRR CKER

$CWF   ZRO;* START BUFFERED TERMINAL OUTPUT.  FLUSHES CURRENT
*      BUFFER AND ADVANCES TO THE NEXT.
       STX CWX (SAVE X)
       LDX WCP; LDA 2,2; LRSH 14; LDA WCC; SKG =0; BRU CWF3
       ADM TOTCCT              (UPDATE TOTAL CHAR COUNT)
       LSH 14; STA 2,2 (UPDATE COUNT)
STIO   LDA WCP; LDB CCTR; MIN CCTR; LDX CO; BRS 97; BRU IOSTOP
* ADVANCE TO NEXT BUFFERLET
       LDX WCP; LDX 1,2; STX WCP
* WAIT FOR FREE BUFFERLET.  REPLACE BRS 81 WITH SBRM* 2XX IF
* IT IS DESIRED NOT TO DISMISS HERE.
CWF1   LDA 0,2; SKA =-1-FREE-BUSY; BRR CWF
       SKA =FREE; BRU CWF2
       LDA =WAIT*1000; BRS 81; BRU CWF1
* REINITIALIZE BUFFERLET PTRS
CWF2   BRM CINIT; LDX CO; BRS 13; BRM ALERT (GOT SOMETHING RETURNED)
CWF3   MIN CWF; LDX CWX; BRR CWF
IOSTOP BRM CKER; BRR CWF; BRU STIO

$FLUSH ZRO;* FLUSHES LAST BUFFER AND WAITS FOR OUTPUT TO FINISH
       BRM CWF; BRR FLUSH (EXCEPTION)
       LDX CO; BRS 178
       SKP CCTR; BRU FL1
       BRM CKER; BRU *+2
FL1    MIN FLUSH; BRR FLUSH
       END
TELECOPY ** FICHE/FRAME BREAK *****
CW SYMSORT

SYM.  PG.LN. IDENT.

BUF     1  9 CW      BUSY    1 11 CW      CCTR    1 36 CW      
CHR0    2 10 CW      CHR1    2 11 CW      CHR2    2 12 CW      CINIT   2 17 CW      
CKER    2 22 CW      COMBUF  1  8 CW      CPS     1  4 CW      CW      2  1 CW      
CWDISP  2  5 CW      CWF     2 27 CW      CWF1    2 38 CW      CWF2    3  3 CW      
CWF3    3  4 CW      CWPT    1 37 CW      CWTAB   2  6 CW      CWX     1 38 CW      
FL1     3 12 CW      FLUSH   3  7 CW      FREE    1 10 CW      INIT1   1 21 CW      
IOSTOP  3  5 CW      NBUF    1  5 CW      OINIT   1 13 CW      STIO    2 33 CW      
WAIT    1  7 CW      WAIT    1  6 CW      WCC     1 34 CW      WCP     1 35 CW      

TELECOPY ** FICHE/FRAME BREAK *****
GC
GC     IDENT 03/25/77          NEW BUFFERED TERMINAL INPUT CODE
       NOLIST STAT,EXT

NBUF EQU 15    NO. OF BUFFERS
COMBUF EQU 30000B
BUF EQU COMBUF+200B
FREE   EQU 4B7
BUSY EQU 2B7
CZFLG  EQU 1B7
EOTFLG EQU 4B6
TIMFLG EQU 2B6
TERFLG EQU 1B6
ABOFLG EQU 4B5
ICCFLG EQU 1B5
PCEFLG EQU 4B4
EMPTY  EQU 1
CNTMSK EQU 3774B4
$IINIT ZRO;* INITIALIZE RING.  MARKS ALL BUFFERS AS FREE AND EMPTY,
*      AND THREADS COMMANDS PROPERLY.  CALL THIS ROUTINE AFTER
*      ANY EXCEPTION TO SET THE FLAGS FOR A GOOD RESTART.
       LDA =BUF; STA WCP
       LDA =COMBUF+3; STA RCP
       LDA =NBUF-1; STA CCTR
       LDX =COMBUF
INIT1 LDB RCP; LDA =FREE+EMPTY
       STA 0,2 (INIT FLAG WORD)
       STB 1,2 (FORWARD PTR)
       LDA WCP; STA 2,2 (BUFFER ADDR)
       LDA =200B; ADM WCP; LDA =3; ADM RCP
       EAX 3,2; SKR CCTR; BRU INIT1
*CCTR INITIALIZED TO -1
       LDA =COMBUF; STA -2,2; STA RCP; STA WCP
       LDA =BUF; STA RCPTR; STA GCCNT
       BRR IINIT
GCCNT DATA 37777777B           (COUNTER FOR WD)
WD     DATA 0                  (CHARACTER DEASSEMBLY)
RCPTR DATA BUF
RCP   DATA COMBUF (CURRENT COMMAND FOR CHARACTER FETCH)
WCP   DATA COMBUF (CURRENT COMMAND TO BE STARTED)
CCTR  DATA -1 (COMMAND COUNTER FOR STRTIO)

STRTIO ZRO;* START BUFFERED TERMINAL I/O INTO WCP BUFFER.
*      STARTS I/O FOR THIS BUFFER AND ALL BUFFERS FURTHER ALONG
*      UNTIL A NON-EMPTY BUFFER IS REACHED.  SKIP RETURN IF READING
*      AHEAD HAS CEASED DUE TO AN EXCEPTION (EOT, TIMEOUT, ETC)
       LDX WCP; LDA 0,2; SKA =EMPTY; BRU *+2; BRR STRTIO
       LDA =7B7; XMA 2,2; ETR =37777B; ADM 2,2 (FORM INPUT COMMAND)
STIO   LDA WCP; LDB CCTR; MIN CCTR; LDX CI; BRS 97 (CLEAR FLAG BITS)
       BRU IOSTOP (I/O HAS STOPPED)
* NEXT TWO INSTRUCTIONS PROGRAM DEPENDENT
       SKN ACKSW; BRM DEFER (SLAVE NOW IN BLOCK INPUT MODE)
       LDX WCP; LDA 1,2; STA WCP; BRU STRTIO+1 (ADVANCE TO NEXT COMMAND)
IOSTOP LDX CI; LDA =COMBUF; BRS 75; CAX
       SKE WCP; BRU STERR (I/O STOPPED ON SOME PREVIOUS COMMAND)
       LDA 0,2; SKE =FREE+BUSY+EMPTY; BRU STERR1 (EXCEPTIONAL CONDITION NOTED)
       LDA =-1; STA CCTR
       BRU STIO (MONITOR HAD TO STOP FOR USER.  RESTART I/O)
STERR1 SKA =BUSY; BRU GC3 (PREVENT LOOPING AT GC+6)
STERR  MIN STRTIO
       BRR STRTIO (SKIP RETURN FOR EXCEPTION)


$GC    ZRO;* FETCH CHARACTER.  START MONITOR READING AHEAD.  AS GC
*      EMPTIES BUFFERS IT TURNS ON THE "EMPTY" FLAG BIT WHICH PERMITS
*      STRTIO TO START FILLING THE BUFFER.  IT IS IMPORTANT TO
*      REALIZE THAT BRS 97 ZEROES OUT THE FLAG BITS (INCLUDING THE
*      "EMPTY" BIT, AND THE MONITOR DOES NOT MAKE THE BUFFER
*      AVAILABLE AGAIN UNTIL THE "FREE" BIT REAPPEARS.
****** SKIP RETURN FOR EXCEPTION *****
*****NOSKIP RETURN WITH DATA CHAR ****
*****PREVIOUS VERSIONS SKIPPED WITH DATA CHAR
       LDX RCP; SKN 0,2; BRU GC2 (WAIT FOR MONITOR TO FREE BUFFER)
       LDA =EMPTY; SKA 0,2; BRU GC2 (NO I/O SINCE INIT)
       LDA 2,2; SKA =CNTMSK; BRU GC1 (NON-ZERO COUNT)
* EMPTY BUFFER.  ADVANCE TO NEXT BUFFER IF NO EXCEPTIONS FLAGGED
       LDA 0,2; SKA =-1-FREE-BUSY; BRU GC3
       LDA =EMPTY; ADM 0,2 (BUFFER CAN NOW BE FILLED)
       LDX 1,2; STX RCP (ADVANCE)
       LDA 2,2; ETR =37777B; STA RCPTR; STA GCCNT (BETTER NOT BE ZERO)
       BRM STRTIO
       BRU GC+1 (NORMAL RETURN)
       BRU GC+1 (EXCEPTION RETURN)
GC1    SUB =4B4; STA 2,2 (DECREMENT COUNT)
       SKR GCCNT; BRU GWD; LDB WD
GCH    CLA; LSH 8; STB WD; ADM ICHECK; MIN ICOUNT; BRR GC
GWD    LDB* RCPTR; MIN RCPTR; LDA =2+4B7; STA GCCNT; BRU GCH
GC2    BRM STRTIO (ATTEMPT TO GET I/O GOING)
* COULD SIMULATE INTERRUPT INSTEAD OF SLEEPING IN SOME PROGRAMS
* BY REPLACING BRS 45 WITH A SBRM* 2XX.  ALTERNATIVELY, IF IT IS
* DESIRED TO SLEEP, BRS 178 WOULD YIELD GREATER EFFICIENCY IF THE DELAY
* CAN BE TOLERATED.
       BRS 45 (SLEEP AWHILE)
       BRU GC+1 (EXCEPTION RETURN)
GC3    MIN GC; BRR GC
       END
TELECOPY ** FICHE/FRAME BREAK *****
GC SYMSORT

SYM.  PG.LN. IDENT.

ABOFLG  1 13 GC      BUF     1  6 GC      BUSY    1  8 GC      
CCTR    2  1 GC      CNTMSK  1 17 GC      COMBUF  1  5 GC      CZFLG   1  9 GC      
EMPTY   1 16 GC      EOTFLG  1 10 GC      FREE    1  7 GC      GC      2 24 GC      
GC1     3  5 GC      GC2     3  9 GC      GC3     3 16 GC      GCCNT   1 35 GC      
GCH     3  7 GC      GWD     3  8 GC      ICCFLG  1 14 GC      IINIT   1 18 GC      
INIT1   1 25 GC      IOSTOP  2 14 GC      NBUF    1  4 GC      PCEFLG  1 15 GC      
RCP     1 38 GC      RCPTR   1 37 GC      STERR   2 20 GC      STERR1  2 19 GC      
STIO    2  9 GC      STRTIO  2  3 GC      TERFLG  1 12 GC      TIMFLG  1 11 GC      
WCP     1 39 GC      WD      1 36 GC      
TELECOPY ** FICHE/FRAME BREAK *****
MASTER
MASTER IDENT 3/28/77
       NOLIST STAT,EXT

       ENTRY UNCT,FNCT,FNPREP,SETTT,COPYST
       ENTRY GSYSTYPE,SNDTYP,NEWREC,NEWSEN,GD
UNCT 0;*       SEND COUNT OF USER NAME
       BRM UNPREP
       CBA; SUB UPTR
       CIO CO (CHARACTER COUNT OF USER NAME)
       BRR UNCT

FNCT 0;*       SEND COUNT OF FILE NAME
       BRM FNPREP
       CBA; SUB FPTR; CIO CO
       BRR FNCT

FNPREP 0;*     SET UP FPTR
       LDP TFPT; SKN DONOR; LDP FFPT; STP FPTR
       BRR FNPREP

UNPREP 0;*     SET UP UPTR
       LDP TUPT; SKN DONOR; LDP FUPT; STP UPTR
       BRR UNPREP

GSYSTYPE 0;* READ SLAVE TYPE AND CAPABILITIES
       LDB =-1
 CIO CI; ETR =177B; STA SYSTYP; SKA =170B; BRU *+4
       SNE =1; STB 940SW; BRR GSYSTYPE
       CIO CI
       SKE =VERNUM
GD     BRM TRAP
       BRM OPTI                (ZERO PREVIOUSLY SENT OPTIONS)
       LDA SYSTYP
       STB NEWSW
       ETR =7
       CAX
       BRU *+1,2
       BRM TRAP (0)
       BRU SET940 (1)
       BRM TRAP (2)
       BRU SET10  (3)
       BRU SET370 (4)
       BRM TRAP (5)
       BRM TRAP (6)
       BRM TRAP (7)
SET370 SKN 370SW; BRM TRAP; LDB =AUTO; BRU SET10B
SET10  SKN 10SW; BRM TRAP; LDB =ASCII+AUTO
SET10B LDA =1; BRU SET9A
SET940 STB 940SW; LDB =ASCII+AUTO; LDA =3
SET9A  STA DTMODE; STA DRMODE; STB DCOPT
       LDA =NATIVE; STA DTPARAM; STA DRPARAM
       BRR GSYSTYPE

SNDTYP 0;*    SEND CONTROLLER TYPE AND CAPABILITIES
       SKN NEWSW; BRU SNDT1
       LDA =1+ACRCAP+BINCAP+UPDCAP; CIO CO
       LDA =VERNUM; BRU SNDT2
SNDT1  LDA =1
SNDT2  CIO CO; BRR SNDTYP

NEWSFN 0;* SEND FILE NAME
       SKP 940SW; SKN INSTSW; BRU NEWSF3
       LDA =INSCOD; BRM SCOD
       LDX =-6; LDA INSE,2; CIO CO; BRX *-2; BRU NEWSF4
       RPT 6; DATA 0; ENDR
INSE   EQU *
NEWSF3 LDA =FLKCOD; BRM SCOD
       SKN 370SW; BRU NEWSF4; BRM FNCT; BRU NEWSF1
NEWSF4 BRM UNPREP; CBA; SUB UPTR; STA T
       BRM FNPREP; CBA; SUB FPTR; ADD T     (TOTAL COUNT OF USERNAME+FILENAME)
       ADD =2; CIO CO          (SEND COUNT)
       LDA ="  ("+40B; CIO CO
NEWSF5 GCI UPTR; BRU NEWSF6; BRM SCONV; CIO CO; BRU NEWSF5
NEWSF6 LDA ="  )"+40B; CIO CO
NEWSF1 GCI FPTR; BRU NEWSF2; BRM SCONV; CIO CO; BRU NEWSF1
NEWSF2 BRM SNDYEL
       BRR NEWSFN

ACT    0;* COPY TRANSMISSION PARAMETERS TO ACTIVE SET
 LDX =-7; LDB =-1; LDA DEFAULTE,2; SKB USER,2; LDA USER,2; STA ACTIVE,2; BRX *-4
 LDA TMODE; SKE RMODE; BRU *+2; BRR ACT
 MSG MIXMSG; BRU ABORT

SETTT 0
 SKN TT; BRR SETTT; STA TT; BRR SETTT

SPATH 0
 BRM ACT
 LDA =-1; STA TT (ERROR SWITCH); STA UPDSW (OLD/NEW FILE SWITCH)
 BRM NEWSFN; BRM SNDOPT; BRM GCOD; SKP 370SW; BRU 370LK
 DI ULKFCD,ULKF,ULKSCD,ULKS
ULKF LDA =INVU; BRM SETTT; BRU LOOKUP
ULKS SKN 940SW; BRU LOOKUP
* READ LUD ATTRIBUTES
 LDA =*+1; STA GFD; BRU GFD3 (GFD DOES SKIP RETURN)
LOOKUP BRM GCOD
370LK DI FLKFCD,FLKF,FLKSCD,FLKS,FPFCOD,FPFSET,FLKRCD,FLKRSET
FPFSET LDA =FPF; BRM SETTT; BRU OPTR
FLKRSET LDA =FLKR; BRM SETTT; BRU OPTR
FLKF MIN UPDSW (NEW FILE); BRU OPTR
FLKS SKN 940SW; BRU OPTR
 LDX =OFDWD0; SKN DONOR; LDX =FDWD0; BRM GFT
OPTR BRM RCVOPT (WILL SET TT FOR FAILURES)
 SKN TT; BRU* TT; BRR SPATH

NEWREC EQU *  NEW FILE PULL CODE
 LNKMSG DNRCOD
 BRM SPATH
 CLA; XMA UPDSW; SKE =-1; BRU NINPF (FILE NOT FOUND)
 SKP 940SW; BRM CKLGL          (ON 940 CHECK TO SEE IF WE CAN OPEN FOR INPUT)
 BRM PULL; BRU NEWR1 (NEW FILE AT THIS END)
* OLD FILE--USE UPDATE MODE IF SLAVE CAN SEND IT
 BRM UUM
* SEND OPTIONS WHICH CHANGED
NEWR1 BRM RF
NEWR2 BRM COPFIN; BRM PRTIME; BRU RESET


COPYST 0
 SKN MSGSW; BRU *+2; BRR COPYST
 LDA =-1; STA MSGSW
 EAX M12
 LDA TMODE
 SKE =4
 EAX M5
 MSG 0,2
 BRM TINIT
 SKP VERBOSE
 BRM PRDAT
 TCO =155B
 BRR COPYST

UUM 0
 CLA; STA UPDSW (NOT UPDATING UNLESS WE CAN DO IT)
 LDA TMODE; LDB SYSTYP; SKB =UPDCAP; SKE =3; BRR UUM; BRM MINMODE
 LDA TMODE; CLB; SKE =4; STB UPDSW
 BRR UUM

MINMODE 0;* INCREMENT TMODE WHEN PERMITTED
 SKP UPDNO; BRR MINMODE
 SKN 940SW; BRU MINM1
* CHECK FOR DUMP FILE
 LDA FDWD2; ETR =7B6; STA T1
 LDA OFDWD2; ETR =7B6; EOR =4B6; CAB
 LDA T1; SKB =-1; SNE =4B6; BRR MINMODE
MINM1 MIN TMODE; MIN RMODE; SKR UPDSW; BRU *-1; BRR MINMODE

NEWSEN EQU *  NEW FILE SEND CODE
       LNKMSG RCVCOD; BRM SPATH
       SKP 940SW; BRM CKSLGL
       SKN UPDSW; BRU NEWFILE
       LDA =*+4
       STA CKOLGL
       SKN 940SW
       BRU CKOL3
       BRM CKOLGL (IF NOT WRITE PROTECTED OR BAD ASK IF OK)
* SWITCH TO UPDATE MODE IF SLAVE IS WILLING
       BRM UUM
NEWFILE BRM TF; BRU NEWR2

MSG POPD 100B5,2
 EAX* 0; CXA; ETR =37777B; SKG =240B; BRU HELP0
 LDB =-1; LDX =1; BRS 34; BRR 0
HELP0 MUL =3; LSH 23; ADD =6; STA HFILET
 SKN HFILE; BRU HELP1
 LDP HELPFP; BRS 64; BRU HELP3; STA HFILE
HELP1 LDA HFILET; SCP HFILE; BRU HELP3; WIO HFILE
 SCP HFILE; BRU HELP3
HELP2 CIO HFILE; SNE =17B; BRR 0; SNE =4; LDA =155B; CIO =1; BRU HELP2
HELP3 MSG HELP4; BRU RESET
HELP4 ASC '$TROUBLE WITH TELMSG FILE--REPORT$/'
HELPFP DATA 3*HELPF-1,3*HELPF-1+11
HELPF ASC '(*6T)TELMSG'
 END
TELECOPY ** FICHE/FRAME BREAK *****
MASTER SYMSORT

SYM.  PG.LN. IDENT.

370LK   3 19 MASTER  ACT     3  1 MASTER  COPYST  4  2 MASTER  
FLKF    3 22 MASTER  FLKRSE  3 21 MASTER  FLKS    3 23 MASTER  FNCT    1 12 MASTER  
FNPREP  1 17 MASTER  FPFSET  3 20 MASTER  GD      1 31 MASTER  GSYSTY  1 25 MASTER  
HELP0   5  8 MASTER  HELP1   5 11 MASTER  HELP2   5 13 MASTER  HELP3   5 14 MASTER  
HELP4   5 15 MASTER  HELPF   5 17 MASTER  HELPFP  5 16 MASTER  INSE    2 27 MASTER  
LOOKUP  3 18 MASTER  MINM1   4 29 MASTER  MINMOD  4 22 MASTER  MSG     5  5 MASTER  
NEWFIL  5  3 MASTER  NEWR1   3 37 MASTER  NEWR2   3 38 MASTER  NEWREC  3 28 MASTER  
NEWSEN  4 31 MASTER  NEWSF1  2 36 MASTER  NEWSF2  2 37 MASTER  NEWSF3  2 28 MASTER  
NEWSF4  2 30 MASTER  NEWSF5  2 34 MASTER  NEWSF6  2 35 MASTER  NEWSFN  2 22 MASTER  
OPTR    3 25 MASTER  SET10   2  8 MASTER  SET10B  2  9 MASTER  SET370  2  7 MASTER  
SET940  2 10 MASTER  SET9A   2 11 MASTER  SETTT   3  6 MASTER  SNDT1   2 19 MASTER  
SNDT2   2 20 MASTER  SNDTYP  2 15 MASTER  SPATH   3  9 MASTER  ULKF    3 14 MASTER  
ULKS    3 15 MASTER  UNCT    1  6 MASTER  UNPREP  1 21 MASTER  UUM     4 16 MASTER  

TELECOPY ** FICHE/FRAME BREAK *****
OPTIONS
OPTI IDENT 4/4//77
       NOLIST STAT,EXT
       ENTRY COMPRESS,SCRAT,MODE,DTES,WHY,FIX1,VAR1,TALK
       ENTRY OPTI,FIXI,SNDOPT,RCVOPT


* SEND SELECTED OPTIONS.  DO NOT SEND IF UNCHANGED.
SNDOPT 0
 LDA LOWSW; EOR =-1; STA LCO
 LDA TRUSW; SKG =0; CLA; STA TRU
 LDX =OPT1-OPT2
SNO1 LDA* OPT1,2
 SKN OPT1,2    (IS THIS OPTION DESTINED FOR 370)
 SKP 370SW     (YES, ARE WE TALKING TO 370)
 SNE OPT2,2    (SEND THE OPTION, BUT NOT IF SAME)
 BRU *+2       (DO NOT SEND)
 EXU OPT3,2
 BRX SNO1
 BRR SNDOPT
* GET RESPONSES
RCVOPT 0
 LDX =OPT1-OPT2
SNO2 LDA* OPT1,2
 SKN OPT1,2  (IS THIS OPTION FOR THE 370)
 SKP 370SW   (YES, BUT ARE WE TALKING TO 370)
 SNE OPT2,2
 BRU *+2       (DO NOT RECEIVE)
 BRM GACK
 BRX SNO2
 BRR RCVOPT

* INIT TABLE OPT2 AFTER OPCH
OPTI 0
 LDA =-69
 LDX =OPT1-VAROPT
 STA VAROPT,2
 BRX *-1
 BRM FIXI (INITIALIZE OPT2 ENTRIES FOR VARIABLE OR FIXED LENGTH RECORDS)
 BRR OPTI

* SET TO RESEND LAST FIXED OR VARIABLE RECORD LENGTH
FIXI 0
 SKN FIX; BRU *+3; STA FIXOPT; BRR FIXI
 STA VAROPT; BRR FIXI

* SEND FIXCOD OR VARCOD
FX 0
 STA T1
 LDA OPT4,2
 BRM SCOD
 CLA
 CIO CO
 LDA T1
 STX T1
 BRM SWORD
 LDX T1
 BRM SNDYEL
 BRR FX

* SEND STANDARD OPTION
STDOPT 0
 STA T1
 LDA OPT4,2
 BRM SCOD
 LDA T1
 CIO CO
 BRM SNDYEL
 BRR STDOPT

* GET ACKNOWLEDGEMENT
GACK 0
 STA T1 (SAVE VALUE); STX T2 (SAVE INDEX)
 BRM GCOD
 DI NICOD,GACK1,SUCCOD,GACK2
GACK1 LDX T2
 MSG* OPT5,2
 MSG ERR41 (NOT IMPLEMENTED)
 LDX T2
 LDA =ABORT; BRM SETTT
 BRR GACK
GACK2 LDA T1; LDX T2; STA OPT2,2
 BRR GACK
* TABLES
*OPT1 = ADDR OF OPTION CELL
*SIGN BIT = SEND TO ALL HOST TYPES
*SEND ONLY TO 370 IF POS
*SIGN BIT ADDED IN LOADTEL AS A PATCH TO GET AROUND
*XDDT BUG
 DATA 4B7+COPT,4B7+LOWSW,TRU,BLNKSW,VRECL,FRECL
OPT1 EQU *
*OPT2 = OLD VALUES
 RPT 4; DATA -69; ENDR
 DATA 65535+1,65535+1
OPT2 EQU *
VAROPT EQU *-2
FIXOPT EQU *-1
*OPT3 = SEND ROUTINES
 BRM STDOPT; BRM STDOPT; BRM STDOPT; BRM STDOPT; BRM FX; BRM FX
OPT3 EQU *
*OPT4 = CODES TO SEND
 DATA CPACOD,ONLCOD,TRUCOD,TRICOD,VARCOD,FIXCOD
OPT4 EQU *
*OPT5 = ERROR MESSAGES
 DATA ERR42,ERR43,ERR44,ERR45,ERR46,ERR47
OPT5 EQU *

* PARSE COMPRESSION AND MODE OPTIONS
* IMPROVE WHEN SPACE PERMITS
SCRAT  EQU *   CLEAR COMPRESSION AND MODE SETTINGS--RESUME NORMAL DEFAULTS
 CLA; LDX =-7; STA USER,2; BRX *-1
 MSG SCRAT1; BRU RESET
SCRAT1 ASC '$COMPRESSION AND MODE SETTING CLEARED--RESUMING NORMAL DEFAULTS$/'

MODE   EQU *
 LDA =1; STA T (ASCII MODE); STA T4 (DEFAULT FILL=LEFT)
 LDA =2; STA T3 (DEFAULT BLOCKING=3)
 LDA =UTPARAM; STA T1; LDA =URPARAM; STA T2
 LDA =7; STA TEMP (BYTESIZE=8)
 BRM GWB; LDX =MODTE-MODTBLE; LDB =SCRATCH
MOD1 SNE MODTE,2; BRU* MODTBLE,2; BRX MOD1; BRU ERR
*TRANS.  TURN T2 OFF.
TRMOD STB T2; BRU *+2
*RECEIVE.  TURN T1 OFF.
REMOD STB T1
 SKP TT; BRU ERR; BRM GWB; LDX =MODT1-MODTBLE; BRU MOD1
IMAGE MIN T (MODE=6)
KATAKANA MIN T (MODE=5)
 MIN T (MODE=4)
BIMOD MIN T (MODE=3)
EBCMOD MIN T (MODE=2)
ASCMOD EQU * (MODE=1)
 LDA T; SKN TT; SKE =3; BRU MOD5
* READ BLOCKING AND FILL PARAMETERS
MOD2 BRM GWB; SKE ="OLB"; BRU MOD4
 BRM RDNO; SKG =16; SKG =0; BRU ERR; SUB =1; STA T3
MOD2A COPY BA,B; STB TT; SKE =0; SKR TT; NOP
MOD3 SKN TT; BRU MOD2; BD5
MOD4 SKE ="LIF"; BRU MOD7
 BRM GWB; SKE ="FEL"; SNE ="GIR"; BRU *+2; BRU ERR
 CLB; SKE ="GIR"; LDB =1; STB T4
 BRU MOD3
MOD7 SKE ="TYB"; BRU ERR
 BRM RDNO; SKG =8; SKG =0; BRU ERR; SUB =1; STA TEMP; BRU MOD2A
*STORE PARAMETERS
MOD5 LDA TEMP; CLB; LSH 4; MRG T3; LSH 1; MRG T4; LDB T
MOD6 LDX T1; STB 1,2; STA 0,2; LDX T2; STB 1,2; STA 0,2
 BRU RESET
NAMOD LDA =NATIVE
 BRU *+2
SEMOD LDA =SMODE (SELECT SERIAL MODE AT RECEIVER/TRANSMITTER)
 LDB =3 (BINARY MODE)
 BRU MOD6
SCRATCH BSS 2
  ASC 'ARTCERCSANIBRESCBETAKAMITAN'
MODTE EQU *
 DATA TRMOD,REMOD
MODT1 EQU *
 DATA ASCMOD,BIMOD,SEMOD,EBCMOD,KATAKANA,IMAGE,NAMOD
MODTBLE EQU *

COMPRESS EQU *
 LDA =NONE; STA T
 BRM GWB; LDX =-3
COMP1 SKE COMPTE,2; BRU COMP2
 LDA T; STA UCOPT
 SKA =ASCII; SKP TT; BRU RESET
 BRM GWB; SKE ="TUA"; BRU ERR
 MIN UCOPT; BRU RESET
COMP2 MIN T; BRX COMP1; BRU ERR
 ASC 'FFOPUDNAR'
COMPTE EQU *

GWB 0;*        GET WORD BACKWARDS
 CLB; STB TT (TERMINATOR SWITCH)
 CIO CIN; SKG =0; BRU *-2
 LDX =-3; BRU *+2
GWB1 CIO CIN; BRM DTES; BRU GWB3
GWB2 SKE =0; SKR TT; NOP; CBA; BRR GWB
GWB3 RSH 8; BRX GWB1
 CIO CIN; BRM DTES; BRU *-2; BRU GWB2

DTES 0;* TEST FOR DELIMITER
 SNE ="  ="; MIN DTES; SKE =155B; SNE =0; MIN DTES; BRR DTES

WHY    SKP PGMSW; SKN NEWSW; BRU RESET; LNKMSG WHYCOD
       TIMER 30; BRM GCOD; DI RSPCOD,WHY1
WHY1   TIMER OFF; LDX =-1; BRS 85
WHY2   CIO CI; SKG =0; BRU ABORT; CIO =1; BRU WHY2
FIX1   EQU *  SET OPTION TO MAKE FIXED LENGTH RECORDS (370 ONLY)
       LDB =80
       BRM VAR2
       STA VAROPT
       LDA =-1
       STA FIXOPT
FIX2   STA FIX
       BRU RESET

VAR1   EQU * SET OPTION TO MAKE VARIABLE LENGTH RECORDS (370 ONLY) (DEFAULT)
       LDB =65536
       BRM VAR2
       STA FIXOPT
       CLA
       STA VAROPT
       BRU FIX2

VAR2 0
 LDA TERMCH; SKE =155B; BRU *+3; CBA; BRU *+5
 BRM RDNO; SKG =65536; SKG =0; BRU ERR
 STA VRECL; STA FRECL; BRR VAR2

TALK MIN TALKSW; LDA =PANIC1; STA ESCRTN
 LDA TERMCH; LDB CIRCNT; SKB =-1; SKE =155B; BRU TALK2
TALK3 BRM OPCH; BRU NOCHAN
*SET 8-LVL OUTPUT
TALK1 LDX =-1; BRS 85
*POLL REMOTE CONSOLE OUTPUT
OPOLL1 BRM ARM9; LDA =CH4INT; STA ESCRTN; BRM ARM1
OPOLL2 LDB =OPOLL5; STB 211B
 CIO CI
       LDB =OPOLL6; STB 211B
 CIO =1
       BRU OPOLL2
*DISMISS ON CIO TO USER'S CONSOLE
OPOLL6 0 T1
 CIO =1
       BRU OPOLL1
*ESCAPE TYPED
CH4INT LDA =ESC; CIO CO; BRU OPOLL1
*DISMISS ON CIO FROM REMOTE CONSOLE
OPOLL5 0 T1
 LDX CI; BRS 79
 LDX =-1; BRS 13; BRU IPOLL; BRS 45; BRU OPOLL1
IPOLL BRM CLR9; LDA =4B4; BRS 12 (CLEAR 8-LVL OUTPUT, DO COMMAND INPUT)
IPOLL1 CIO =0; SKE =5; BRU IPOLL5
 CIO =0; SKE =5; BRU IPOLL4
 CIO =0; SNE ="  U"; BRU USEP; SKE ="  F"; BRU IPOLL3
 CIO =0  (EAT CR FOLLOWING %%F)
 BRU RESET
USEP LDB =US; CIO =0; CBA; CIO CO; BRU TALK1
IPOLL3 CAB; LDA =45B; CIO CO; BRU IPOLL4+2
IPOLL4 CAB; LDA =45B; CIO CO; CBA
IPOLL5 BRM SCONV; CIO CO; SKE =15B; BRU IPOLL1; BRU TALK1
TALK2 CLA; STA USERBF; BRM RDNO; STA SYS
 CBA; SNE =155B; BRU TALK3; SPTR USERBF; STP USEPT
 LDA =USEPT; LDB =155B; LDX CIN; BRS 33; BRU TALK3

$USERBF BSS 6
$USEPT BSS 2
 END
TELECOPY ** FICHE/FRAME BREAK *****
OPTIONS SYMSORT

SYM.  PG.LN. IDENT.

ASCMOD  4 14 OPTI    BIMOD   4 12 OPTI    CH4INT  6 33 OPTI    
COMP1   5  8 OPTI    COMP2   5 13 OPTI    COMPRE  5  5 OPTI    COMPTE  5 15 OPTI    
DTES    5 26 OPTI    EBCMOD  4 13 OPTI    FIX1    5 33 OPTI    FIX2    5 39 OPTI    
FIXI    2  3 OPTI    FIXOPT  3 18 OPTI    FX      2  8 OPTI    GACK    2 32 OPTI    
GACK1   2 36 OPTI    GACK2   3  3 OPTI    GWB     5 17 OPTI    GWB1    5 21 OPTI    
GWB2    5 22 OPTI    GWB3    5 23 OPTI    IMAGE   4  9 OPTI    IPOLL   6 38 OPTI    
IPOLL1  6 39 OPTI    IPOLL3  7  6 OPTI    IPOLL4  7  7 OPTI    IPOLL5  7  8 OPTI    
KATAKA  4 10 OPTI    MOD1    4  3 OPTI    MOD2    4 17 OPTI    MOD2A   4 19 OPTI    
MOD3    4 20 OPTI    MOD4    4 21 OPTI    MOD5    4 28 OPTI    MOD6    4 29 OPTI    
MOD7    4 25 OPTI    MODE    3 36 OPTI    MODT1   5  1 OPTI    MODTBL  5  3 OPTI    
MODTE   4 38 OPTI    NAMOD   4 31 OPTI    OPOLL1  6 22 OPTI    OPOLL2  6 23 OPTI    
OPOLL5  6 35 OPTI    OPOLL6  6 29 OPTI    OPT1    3 12 OPTI    OPT2    3 16 OPTI    
OPT3    3 21 OPTI    OPT4    3 24 OPTI    OPT5    3 27 OPTI    OPTI    1 33 OPTI    
RCVOPT  1 21 OPTI    REMOD   4  7 OPTI    SCRAT   3 31 OPTI    SCRAT1  3 34 OPTI    
SCRATC  4 36 OPTI    SEMOD   4 33 OPTI    SNDOPT  1  8 OPTI    SNO1    1 12 OPTI    
SNO2    1 23 OPTI    STDOPT  2 22 OPTI    TALK    6 16 OPTI    TALK1   6 20 OPTI    
TALK2   7  9 OPTI    TALK3   6 18 OPTI    TRMOD   4  5 OPTI    USEP    7  5 OPTI    
USEPT   7 14 OPTI    USERBF  7 13 OPTI    VAR1    6  3 OPTI    VAR2    6 11 OPTI    
VAROPT  3 17 OPTI    WHY     5 29 OPTI    WHY1    5 31 OPTI    WHY2    5 32 OPTI    

TELECOPY ** FICHE/FRAME BREAK *****
SLAVE
STLCOP IDENT   04/06/77   SLAVE PROGRAM OF FILE TRANSFER PACKAGE
       NOLIST STAT,EXT
*INCLUDES PDP10
       ENTRY ADIAG,BDIAG
       ENTRY ESCRTN,PANIC,COPYST,CLR5
       ENTRY CLRCIR,ABT,CKTIM,ZAPINT
       ENTRY TFDPT,FFDPT,TFPT,FFPT,CPTOP
       ENTRY BUFFER,FTYPE,CHCNT
       ENTRY TDNO,TUPT,FUPT,ERR5,ERR6,ERR12,FSYS,TSYS
       ENTRY INSTSW,SWORD,FDWD0,FDWD2,OFDWD0,OFDWD2,GD
       ENTRY CI,CO,RESET


       BRU START; BRS 10
       ASC 'S18.00'; ASC 'BLOOD YOUNGER'

START  LDA =INT5; STA 205B; LDA =INT10; STA 212B; BRM GUSER
       BRS 113; LDX CI; LDA =4B7+400B; BRS 12; LDX CO; BRS 85
       LDA =1; CIO CO; LDA =2; CIO CO; LDA =3; CIO CO; LDA =4; CIO CO
       LDA =1+ACRCAP+BINCAP+UPDCAP; CIO CO (940 SYSTEM TYPE CODE)
       LDA =VERNUM; CIO CO
START1 CIO CI; SKE =1; BRU *-2; CIO CI; SKE =2; BRU START1
       CIO CI; SKE =3; BRU START1; CIO CI; SKE =4; HLT 0 (HAND SHAKING ROUTINE)
       LDA =2; BRS 77; BRM GSYSTYP
*      SLAVE DISPATCHER
GD     EQU *
       BRS 17; LDX =FDBUF-CLEND; CLA; STA CLEND,2; BRX *-1; STA MASTER
       LDP FNPTR1; STP FNPTR; LDP USERP; STP USERPT
       BRM GCOD
 DI DNRCOD,SEND,RCVCOD,REC,LOGCOD,LOG,QUICOD,QUIT,WHYCOD,WHY

SETVAR RPT 4; CIO CI; ENDR; LDA =37777777B; STA VRECL
       CLA; STA FIX
SETV1  LNKMSG SUCCOD; BRM RETURN

SETFIX RPT 4; CIO CI; ENDR
SETF1  LNKMSG NICOD; BRM RETURN

TRIM   EQU *
TRUNCATE CIO CI; SKG =0; BRU SETV1; BRU SETF1

ONLC   CIO CI; LSH 16; RSH 24; STA LOWSW
       EOR =-1; STA LCO; BRU SETV1
CPAR   CIO CI; SKG =ASCII+AUTO; BRU *+2; BRU SETF1
       STA COPT; BRU SETV1

SFATT  LDA =SUCCOD; BRM SCOD; LDA =6; CIO CO
       LDA FDWD0; BRM SWORD; LDA FDWD2; BRM SWORD
       BRM SNDYEL
       BRM RETURN

RFATT  SKN 940SW; BRM BAD; CIO CI; SKE =9; BRM TRAP
       BRM GWORD; STA FFDPT
       BRM GWORD; STA FDWD0; BRM GWORD; STA FDWD2
       BRM RETURN

RETURN 0
       SKN DONOR; BRU RMOD; BRU SMOD


INT5 0 TIMRT; BRM ZAPINT
CLR5 0; BRS 49; ETR =-1-1B5; BRS 78; BRR CLR5
INT10 0 T
 BRM CLRCIR
ZAPINT 0
 IF TESTNG
 BRM CRASH
 ENDF
 BRM CLRCIR
CLRCIR 0
LOG    LDA ="EXI"; BRS 142
QUIT   BRS 17; BRS 10

WHY    LDA =RSPCOD; BRM SCOD; LDP WHYSTP; STP T1
WHY1   GCI T1; BRU WHY2; ADD =40B; CIO CO; BRU WHY1
WHY2   CLA; CIO CO; BRU GD
WHYSTP DATA 3*WHYSTG-1,3*WHYSTG-1+8
WHYSTG ASC 'WHY NOT?'
SEND   LDA =-1; STA DONOR
SMOD   BRM GCOD
 DI INSCOD,IGFD,FLKCOD,GFNAM,FENQCD,SFATT,OPNCOD,TFBEG,CPACOD,CPAR,ONLCOD,ONLC,TRUCOD,TRUNCATE,TRICOD,TRIM,VARCOD,SETVAR,FIXCOD,SETFIX,OPFCOD,OPF,FPFCOD,FPF

REC    CLA; STA DONOR
RMOD   BRM GCOD
 DI INSCOD,IGFD,FLKCOD,GFNAM,FATTCD,RFATT,OPNCOD,RFBEG,CPACOD,CPAR,ONLCOD,ONLC,TRUCOD,TRUNCATE,TRICOD,TRIM,VARCOD,SETVAR,FIXCOD,SETFIX,OPFCOD,OPF,FPFCOD,FPF

TFBEG  EQU *   BEGIN TRANSMISSION
       LDP FNPTR
       STP FFPT
       LDX =TPARAM
       BRM MODES
       BRM TF
       BRU GD

RFBEG  EQU *   BEGIN RECEIVE
       LDP FNPTR
       STP TFPT
       LDX =RPARAM
       BRM MODES
       BRM RF
       BRU GD

GSYSTYP 0;* READ CONTROLLER TYPE AND CAPABILITIES
 CLB; STB 940SW; STB 10SW; STB 370SW
 LDB =-1
 CIO CI
 ETR =177B
 STA SYSTYP
 SKA =170B
 BRU *+2
 BRM TRAP
 CIO CI
 SKE =VERNUM
RESET BRM TRAP
 LDA SYSTYP
 ETR =7
 CAX
 BRU *+1,2
 BRM TRAP (0)
 BRU SET940 (1)
 BRM TRAP (2)
 BRU SET10 (3)
 BRU SET370 (4)
 BRM TRAP (5)
 BRM TRAP (6)
 BRM TRAP (7)
SET370 STB 370SW; LDB =AUTO; BRU SET10A
SET10 STB 10SW; LDB =ASCII+AUTO
SET10A LDA =1; STP FORKA; STX FORKX; LDA =SET9A; STA FORKPL
       LDA =FORKPL+114B5; BRS 9; BRS 10
SET940 STB 940SW; LDB =ASCII+AUTO; LDA =3
SET9A STA TMODE; STA RMODE; STB COPT
 LDA =NATIVE; STA TPARAM; STA RPARAM
 BRR GSYSTYP

MODES 0;*      READ AND DECIPHER OPNCOD RECORD
       CIO CI
       STA TMODE; STA RMODE
* MODES 1,3,4, AND 6 ONLY SUPPORTED
       SKE =2; SNE =5; BRM UIO
       SKG =6; SKG =0; BRM UIO
       SKG =4; SKG =2; BRR MODES
       CIO CI                  (BINARY PARAMETERS)
       STA 0,2                 (IF ZERO UPA WILL SELECT SERIAL MODE)
       STA BPARAM
       LDA 1,2
       SKG =3
       BRR MODES
       CIO CI
       CLB
       LSH 8
       STA 2,2
       CIO CI
       ADM 2,2
* UPDATE MODE BLOCKSIZE IS CHOSEN AT CONVENIENCE OF MASTER.
*      WE HAVE NO CHOICE BUT TO ACCEPT IT
       BRR MODES

INSTSW ZRO
IGFD   LDX =-6; CIO CI; SKE INSE,2; BRM TRAP; BRX *-3
       SKR INSTSW; BRU *-1; BRU GFNAM
       RPT 6; DATA 0; ENDR
INSE   EQU *


*GET A FILE NAME
GFNAM  EQU *  LOOKUP FILE NAME
       LDA =-1; STA NONAME
       CLA; STA PUBSW; SKN DONOR; STA OFDWD2 (SEE TEST AT OOUTF)
       CIO CI; STA CHCNT
*SKIP OVER LEADING SPACES
GFNAM5 SKR CHCNT; BRU *+2; BRU GFD2; BRM GAB; SKG =0; BRU GFNAM5
       SKE ="  ("; BRU GFNAM7
*READ USER NAME TO ")".
GFNAM6 SKR CHCNT; BRU *+2; BRU GFD2; BRM GAB; SNE ="  )"; BRU GFD2
       WCI USERPT; BRU GFNAM6
*NO NAME GIVEN.  DEFAULT IS LOGGED-IN USER
GFNAM7 STA NONAME (SAVE CHAR)
       LDA UFDPT; STA SFDPT; STA TFDPT
       LDA UGAN; STA SGAN
       LDA UUUN; STA SUUN
       BRU GFD4
*LOOKUP SUPPLIED USERNAME IN LUD.
GFD2   LDA =UNAME; BRM GENTRY; BRU GFD5 (NOT IN LUD)
       LDA 4,2; STA SFDPT; STA TFDPT; LDA 6,2; ETR =1777777B; STA SGAN
       LDA 7,2; ETR =377777B; STA SUUN
       LDA =ULKSCD; BRM SCOD; SKN 940SW; BRU GFD3
       LDA SFDPT; LDX =1
       BRS 141; SKE =-1; BRM TRAP; LDA SGAN
       BRM SWORD; LDA SFDPT; BRM SWORD; LDA SUUN; BRM SWORD
GFD3   BRM SNDYEL
GFD4   LDA NONAME; SKN 940SW; BRM G10FN
*READ REMAINDER OF FILE NAME
       SKN NONAME
GFNAM8 WCI FNPTR
GFNAM9 SKR CHCNT; BRU *+2; BRU GFNAM1
       BRM GAB; BRU GFNAM8
GFNAM1 LDP FNPTR; BRS 48; BRU *+2; BRU GFNAM4
       LNKMSG FLKFCD; BRM RETURN
GFD5   LDA =ULKFCD; BRM SCOD; BRU GFD3
USERP  DATA 3*UNAME-1,3*UNAME-1
USERPT BSS 2
FNPTR1 DATA 3*FNBUF-1,3*FNBUF-1
FNPTR  BSS 2
NONAME ZRO
*SEND FILE DIRECTORY ENTRIES
GFNAM4 STA T (SAVE FLX)
       LDA =FLKSCD; BRM SCOD; LDB =FDBUF; SKN DONOR; LDB =OFDBUF
       LDA T; LDX =5; BRS 96
       LDA FDWD0; SKN DONOR; LDA OFDWD0; BRM SWORD
       LDA FDWD1; SKN DONOR; LDA OFDWD1; BRM SWORD
       LDA FDWD2; SKN DONOR; LDA OFDWD2; BRM SWORD
       BRM SNDYEL; BRM RETURN

SWORD  ZRO; CAB; LDX =-3; CLA; LSH 8; CIO CO; BRX *-3; BRR SWORD

GWORD  ZRO; CLB; CIO CI; LSH 16; STA TWORD; CIO CI; LSH 8
       ADM TWORD; CIO CI; MRG TWORD; BRR GWORD
*ROUTINE FOR LUD LOOKUP OF USER NAME RECEIVED FROM MASTER PROGRAM

GENTRY ZRO; STA FPTR; MUL =3; LSH 23; SUB =1; CAB; ADD =12
       XAB; STP UPTR; LDX =-4; CLA; ADD* FPTR; MIN FPTR; BRX *-2
       LRSH 23; DIV =887; STB BLNO; CBA; SKG =895; BRU *+2; HLT 0
       BRM GE1; BRU GE2
GE1    ZRO; LDA BLNO; LRSH 23; DIV =128; STB GTEMP; CLB; LSH 13; ADD =320200B
       ADD GTEMP; CAB; LDA =LUDBUF; LDX =100B; BRS 124; EAX LUDBUF; BRR GE1
GE2    STX BLX; LDA 0,2; SKE =0; BRU *+2; BRR GENTRY (NOT IN LUD)
       SKE =-1; BRU *+3; MIN BLNO; BRU GE1-2; SKE =-2; BRU *+2; BRU GE3
       CXA; MUL =3; LSH 23; SUB =1; CAB; ADD =12; XAB; SKSE UPTR
       BRU GE3; MIN GENTRY; BRR GENTRY
GE3    LDX BLX; EAX 9,2; BRU GE2
* FORK TABLE FOR SYSTEM-STATUS FORK WHEN CONVERSING WITH 10 OR 370
FORKPL 0
FORKA BSS 2
FORKX 0
 BSS 3
*INPUT-OUTPUT CHANNELS
CI     ZRO
CO     DATA 1
*HERE THRU CLEND CLEARED AT PROGRAM INITIALIZATION
FDBUF  ZRO
FDWD0  ZRO
FDWD1  ZRO
FDWD2  ZRO
IBP    ZRO
OFDBUF 0
OFDWD0 0
OFDWD1 0
OFDWD2 0
OIBP 0
UNAME  BSS 10
FNBUF  BSS 30
BLX    ZRO
BLNO   ZRO
WKPTR  BSS 2
PUBSW  ZRO
GTEMP  ZRO
SFDPT  ZRO
SGAN   ZRO
SUUN   ZRO
CHCNT  ZRO
TWORD  ZRO
FPTR   ZRO
BUFFER EQU 24000B
LUDBUF EQU 34100B
UPTR   BSS 2
TFPT BSS 2
FFPT BSS 2
TFDPT 0
FFDPT 0
FIX 0
VRECL 0
FTYPE 0
CPTOP 0
CLEND  EQU *
*DUMMY SUBROUTINES REFERENCED BY TGETIT AND TSENDIT
COPYST EQU *
ADIAG EQU *
BDIAG EQU *
CKTIM 0
 BRR CKTIM
*CELLS REFERENCED BY TGETIT AND TSENDIT BUT NOT USED
TDNO EQU *
TUPT EQU *
FUPT EQU *
ERR5 EQU *
ERR6 EQU *
ERR12 EQU *
FSYS EQU *
TSYS EQU *
ESCRTN EQU *
PANIC ZRO

GUSER  ZRO; LDA =33; LDB =LLOC; LDX =1; BRS 67
       LDA LLOC; LRSH 10; ADD =LUDBUF; STA LLOC; CLA
       LSH 10; STA BLNO; BRM GE1; LDX LLOC; LDA 6,2
       ETR =1777777B; STA UGAN; LDA 7,2; ETR =377777B; STA UUUN
       LDA 4,2; STA UFDPT
       LDA 8,2; SKA =2B6; BRM SETSUP; BRR GUSER
SETSUP ZRO; SKR SUPSW; BRU *-1; BRR SETSUP
UGAN   ZRO
UUUN   ZRO
UFDPT ZRO
SUPSW  ZRO
LLOC   ZRO
LOWSW  ZRO

GAB 0; CIO CI; SUB =40B; ETR =177B; BRR GAB

*GET FILE NAME FROM PDP10

G10FN  ZRO; SKN NONAME; BRU G10FN1+1; LDP USERPT; STP WKPTR; LDA ='('; WCI FNPTR
       GCI WKPTR; BRU G10FN1; WCI FNPTR; BRU *-3
G10FN1 LDA =')'; WCI FNPTR
G10FN2 SKR CHCNT; BRU *+2; BRU G10FN3; BRM GAB
       SKG =77; SNE =40B; BRM SPUBSW
       WCI FNPTR; BRU G10FN2
G10FN3 LDP FNPTR; BRS 48; BRU G10NOF
       LDB =FDBUF; SKN DONOR; LDB =OFDBUF; LDX =5; BRS 96
       SKN DONOR; BRU *+2; BRM CKSYM; LDA FDWD2; SKN DONOR; LDA OFDWD2; SKA =20B
       BRM G10FPF (PROP); SKN DONOR; BRU *+2
       BRU G10FN5; SKA =2B2; BRM G10FPF (WRITE PROTECTED)
G10FN5 LDA SUUN; SKE UUUN; BRU *+2; BRU G10FN9 (OKAY SAME USER)
       SKN DONOR; BRU G10FN6; SKN PUBSW; BRU G10FN6
       BRU G10FN9 (OKAY GLOBAL PUBLIC)
G10FN6 LDA SGAN; SKE UGAN; BRM G10FPF (NOT SAME GAN)
       SKN SUPSW; BRU *+2; BRU G10FN9 (ACCT SUPV LET HIM)
       LDA FDWD2; SKN DONOR; LDA OFDWD2
       SKN DONOR; BRU *+2; BRU G10FN7; SKA =2B3; BRU *+2
       BRM G10FPF (NOT PUB WRITE)
       BRU G10FN9
G10FN7 SKA =40B; BRU G10FN9; BRM G10FPF
G10F4A LDA =FLKFCD; BRU G10F10 (CANT FIND FILE)
G10FN9 LDA =FLKSCD
G10F10 BRM SCOD; BRM SNDYEL; BRM RETURN
SPUBSW ZRO; SKR PUBSW; BRU *-1; BRR SPUBSW
* WHEN SLAVE IS DONOR COPY SYM FILES ONLY IN ASCII MODE, GO AND BINARY
* FILES IN BINARY MODES
CKSYM 0
       LDA FDWD2; ETR =7B6; RSH 18; SKG =3; BRR CKSYM; BRM G10FPF
*FILE NOT FOUND ROUTINE
G10NOF SKN DONOR; BRU *+2; BRU G10F4A (FILE NOT FOUND ON SEND)
       LDA SUUN; SKE UUUN; BRU *+2; BRU G10F4A (NEW FILE ON RECEIVE)
       SKN SUPSW; BRM G10FPF (NOT SAME USER PROTECTION FAILURE)
       LDA SGAN; SKE UGAN; BRM G10FPF (NOT SAME GAN PROTECTION FAILURE)
       BRU G10F4A (SAME GAN AND HE IS ACT SUPV LET HIM WRITE)
G10FPF ZRO
 LDA =FPFCOD; BRU G10F10

ABT 0
 LNKMSG ABTCOD
 BRR ABT
       END
TELECOPY ** FICHE/FRAME BREAK *****
SLAVE SYMSORT

SYM.  PG.LN. IDENT.

ABT     9 38 STLCOP  ADIAG   8  5 STLCOP  BDIAG   8  6 STLCOP  
BLNO    7 20 STLCOP  BLX     7 19 STLCOP  BUFFER  7 30 STLCOP  CHCNT   7 27 STLCOP  
CI      7  4 STLCOP  CKSYM   9 27 STLCOP  CKTIM   8  7 STLCOP  CLEND   8  2 STLCOP  
CLR5    2 23 STLCOP  CLRCIR  2 31 STLCOP  CO      7  5 STLCOP  COPYST  8  4 STLCOP  
CPAR    2  5 STLCOP  CPTOP   8  1 STLCOP  ERR12   8 15 STLCOP  ERR5    8 13 STLCOP  
ERR6    8 14 STLCOP  ESCRTN  8 18 STLCOP  FDBUF   7  7 STLCOP  FDWD0   7  8 STLCOP  
FDWD1   7  9 STLCOP  FDWD2   7 10 STLCOP  FFDPT   7 36 STLCOP  FFPT    7 34 STLCOP  
FIX     7 37 STLCOP  FNBUF   7 18 STLCOP  FNPTR   6  9 STLCOP  FNPTR1  6  8 STLCOP  
FORKA   6 39 STLCOP  FORKPL  6 38 STLCOP  FORKX   7  1 STLCOP  FPTR    7 29 STLCOP  
FSYS    8 16 STLCOP  FTYPE   7 39 STLCOP  FUPT    8 12 STLCOP  G10F10  9 23 STLCOP  
G10F4A  9 21 STLCOP  G10FN   8 39 STLCOP  G10FN1  9  2 STLCOP  G10FN2  9  3 STLCOP  
G10FN3  9  6 STLCOP  G10FN5  9 11 STLCOP  G10FN6  9 14 STLCOP  G10FN7  9 20 STLCOP  
G10FN9  9 22 STLCOP  G10FPF  9 35 STLCOP  G10NOF  9 30 STLCOP  GAB     8 35 STLCOP  
GD      1 26 STLCOP  GE1     6 30 STLCOP  GE2     6 32 STLCOP  GE3     6 36 STLCOP  
GENTRY  6 26 STLCOP  GFD2    5 28 STLCOP  GFD3    5 35 STLCOP  GFD4    5 36 STLCOP  
GFD5    6  5 STLCOP  GFNAM   5 11 STLCOP  GFNAM1  6  3 STLCOP  GFNAM4  6 12 STLCOP  
GFNAM5  5 16 STLCOP  GFNAM6  5 19 STLCOP  GFNAM7  5 22 STLCOP  GFNAM8  5 39 STLCOP  
GFNAM9  6  1 STLCOP  GSYSTY  3 25 STLCOP  GTEMP   7 23 STLCOP  GUSER   8 21 STLCOP  
GWORD   6 22 STLCOP  IBP     7 11 STLCOP  IGFD    5  4 STLCOP  INSE    5  7 STLCOP  
INSTSW  5  3 STLCOP  INT10   2 24 STLCOP  INT5    2 22 STLCOP  LLOC    8 32 STLCOP  
LOG     2 32 STLCOP  LOWSW   8 33 STLCOP  LUDBUF  7 31 STLCOP  MODES   4 19 STLCOP  
NONAME  6 10 STLCOP  OFDBUF  7 12 STLCOP  OFDWD0  7 13 STLCOP  OFDWD1  7 14 STLCOP  
OFDWD2  7 15 STLCOP  OIBP    7 16 STLCOP  ONLC    2  3 STLCOP  PANIC   8 19 STLCOP  
PUBSW   7 22 STLCOP  QUIT    2 33 STLCOP  REC     3  5 STLCOP  RESET   3 36 STLCOP  
RETURN  2 18 STLCOP  RFATT   2 13 STLCOP  RFBEG   3 17 STLCOP  RMOD    3  6 STLCOP  
SEND    3  1 STLCOP  SET10   4 11 STLCOP  SET10A  4 12 STLCOP  SET370  4 10 STLCOP  
SET940  4 14 STLCOP  SET9A   4 15 STLCOP  SETF1   1 37 STLCOP  SETFIX  1 36 STLCOP  
SETSUP  8 27 STLCOP  SETV1   1 34 STLCOP  SETVAR  1 32 STLCOP  SFATT   2  8 STLCOP  
SFDPT   7 24 STLCOP  SGAN    7 25 STLCOP  SMOD    3  2 STLCOP  SPUBSW  9 24 STLCOP  
START   1 17 STLCOP  START1  1 22 STLCOP  SUPSW   8 31 STLCOP  SUUN    7 26 STLCOP  
SWORD   6 20 STLCOP  TDNO    8 10 STLCOP  TFBEG   3  9 STLCOP  TFDPT   7 35 STLCOP  
TFPT    7 33 STLCOP  TRIM    1 39 STLCOP  TRUNCA  2  1 STLCOP  TSYS    8 17 STLCOP  
TUPT    8 11 STLCOP  TWORD   7 28 STLCOP  UFDPT   8 30 STLCOP  UGAN    8 28 STLCOP  
UNAME   7 17 STLCOP  UPTR    7 32 STLCOP  USERP   6  6 STLCOP  USERPT  6  7 STLCOP  
UUUN    8 29 STLCOP  VRECL   7 38 STLCOP  WHY     2 35 STLCOP  WHY1    2 36 STLCOP  
WHY2    2 37 STLCOP  WHYSTG  2 39 STLCOP  WHYSTP  2 38 STLCOP  WKPTR   7 21 STLCOP  
ZAPINT  2 26 STLCOP  
TELECOPY ** FICHE/FRAME BREAK *****
STELMSG
TELMSG IDENT 3/28/77           HELP MESSAGES FOR TELECOPY VERSION 23
*      CREATE GO FILE (*6T)TELMSG BY LOADING BINARY OF THIS SOURCE AT 0.
GEN MACRO D
 DATA [3+D(1)]*3
 ENDM
 GEN MSG1
 GEN MSG2
 GEN MSG2A
 GEN MSG4
 GEN MSG5
 GEN MSG6
 GEN MSG6A
 GEN MSG2B
 GEN ERR13
 GEN ERR18
 GEN ERR19
 GEN ERR22
 GEN ERR23
 GEN ERR25
 GEN ERR28
 GEN ERR40
 GEN ERR41
 GEN ERR42
 GEN ERR43
 GEN ERR44
 GEN ERR45
 GEN ERR46
 GEN ERR47
 GEN VME1
 GEN VME
 GEN VME2
 GEN TRPM1
 GEN MIXMSG
 GEN BADMSG
 GEN UIOMSG
 GEN TRPM2
 GEN UCCMSG
 GEN RDER
 GEN WTER
 GEN PERMSG
 GEN ERAS
 GEN ABTT2
 GEN ERR1
 GEN ERR27
 GEN ERR29
 GEN ERR30
 GEN ERR31
 GEN ERR32
 GEN ERR33
 GEN ERR34
 GEN VME3
 GEN VME4
 GEN MSG3
 GEN BADNO
 GEN ERR15
 GEN M9
 GEN MODISC
 GEN ERR48
 GEN ERR3
 GEN CANSYN
MSG1   ASC '$$CAPABILITIES:'
       ASC '$$THIS PROGRAM WILL COPY FILES BETWEEN TWO SYSTEMS OVER'
       ASC '$LOW SPEED CIRCUITS, PROVIDING THE USER HAS THE SAME'
       ASC "$USER NAME ON BOTH SYSTEMS. BETWEEN TYMCOM IX'S ANY FILE THAT"
       ASC '$MAY BE LEGALLY COPIED BY THE EXEC COPY COMMAND MAY BE COPIED BY'
       ASC '$THIS PROGRAM.  FILE SIZE RESTRICTIONS ARE THE SAME AS FOR'
       ASC "$THE EXEC COPY COMMAND. BETWEEN TYMCOM IX'S AND TYMCOM X'S"
       ASC "$OR TYMCOM 370'S ONLY SYMBOLIC FILES MAY BE COPIED.$$/"
MSG2   ASC '$$NOTE:  ADDITIONAL INSTRUCTIONS RELATIVE TO TRANSFERS BETWEEN'
       ASC '$TYMCOM IX AND TYMCOM X ARE AVAILABLE BY ISSUING THE COMMAND'
       ASC '$PDP10. ALSO ADDITIONAL INSTRUCTIONS RELATIVE TO TRANSFERS BETWEEN'
       ASC '$TYMCOM IX AND TYMCOM 370 ARE AVAILABLE BY ISSUING THE COMMAND'
       ASC '$SYS370.'
       ASC '$$INSTRUCTIONS:'
       ASC '$$WHEN THE RUN COMMAND IS ISSUED'
       ASC '$THE PROGRAM WILL REQUEST THE "COPY FROM" FILE AND THEN'
       ASC '$THE "COPY TO" FILE.  THE SYNTAX FOR ENTERING THIS'
       ASC '$INFORMATION IS:  (USER NAME:SYSTEM NO.)FILE NAME  C.R.'
       ASC '$FOR EXAMPLE: (JONES:7)DATA  C.R.'
       ASC '$$YOU MAY OMIT THE COMMAND RUN IF YOU DO NOT WISH PROMPTING'
       ASC '$AS TELECOPY WILL ASSUME THE "RUN" COMMAND WHENEVER IT RECEIVES'
       ASC '$A "(" AS THE FIRST INPUT TO THE COMMAND DISPATCHER.'
       ASC '$$IF THE SYSTEM NUMBER IS OMITTED IN CONJUNCTION WITH THE "COPY'
       ASC '$FROM" USER NAME, THE SYSTEM NUMBER FROM WHICH THIS PROGRAM IS RUN'
       ASC '$IS ASSUMED TO BE THE "FROM" SYSTEM.'
       ASC '$$THE USE OF CONTROL A, Q, OR W IS PERMITTED TO EDIT INPUT.'
       ASC '$$THE FOLLOWING SYNTAX IS ALSO PERMITTED:'
       ASC '$$(USERNAME:SYS1)FILENAME,:SYS2'
       ASC '$     (COPIES TO THE SAME USER, USING SAME FILE NAME ON :SYS2)'
       ASC '$$(USERNAME:SYS1)FILENAME,FILENAME1,:SYS2,FILENAME2,FILENAME3'
       ASC '$     (COPIES TO THE SAME USER, ON :SYS2, FILENAME, TO FILENAME2'
       ASC '$      AND FILENAME1, TO FILENAME3)'
       ASC '$$(USERNAME:SYS1)FILENAME,FILENAME1,(USERNAME:SYS2)'
       ASC '$     (COPIES TO SECOND USER NAMED, USING SAME FILE NAMES ON'
       ASC "$      :SYS2  USABLE ONLY BETWEEN TYMCOM IX'S)"
       ASC '$$(USERNAME:SYS1)FILENAME,FILNAME1,(USERNAME:SYS2)FILNAME2,(LF)'
       ASC '$FILENAME3'
       ASC '$      (COPIES FROM USERNAME:SYS1, TO USERNAME:SYS2, FILENAME,'
       ASC '$       TO FILENAME2, AND FILENAME1, TO FILENAME3'
       ASC "$       USABLE BETWEEN TYMCOM IX'S ONLY)"
       ASC '$$THE COMMAND STRING IS LIMITED TO 300 CHARACTERS, AND MAY BE'
       ASC '$TYPED ON SEVERAL LINES BY ENDING INTERMEDIATE LINES WITH A'
       ASC '$LINE FEED.  THE STRING IS TERMINATED WHEN A CARRIAGE RETURN'
       ASC '$IS ENCOUNTERED.'
       ASC '$$IF AN ATTEMPT IS MADE TO COPY TO AN EXISTING FILE THE'
       ASC '$PROGRAM WILL ASK FOR CONFIRMATION.'
       ASC '$$THE MESSAGE "COPY STARTING" OR "UPDATING STARTED" WILL BE TYPED'
       ASC '$WHEN THE TRANSFER OF THE DATA STARTS.'
       ASC '$UPON COMPLETION, THE MESSAGE "FILE NAME COPIED" OR'
       ASC '$"FILE NAME UPDATED" WILL BE DISPLAYED ON THE TERMINAL,'
       ASC '$ALONG WITH THE NUMBER OF CHARACTERS TRANSMITTED.  TWO FIGURES'
       ASC '$ARE GIVEN:  THE NUMBER IN PARENTHESES IS THE NO. OF CHARS'
       ASC '$TRANSMITTED BY THE NETWORK, AND THE OTHER FIGURE IS THE NUMBER'
       ASC '$OF FILE CHARS (IN 8-BIT BYTES) ACTUALLY TRANSMITTED.'
       ASC '$$THE PROJECT CODE USED TO LOG INTO THE SYSTEM WILL BE USED BY'
       ASC '$TELECOPY WHEN LOGGING INTO THE SECOND SYSTEM, UNLESS THE USER'
       ASC '$EXECUTES THE PROJECT OPTION TO ENTER A NEW PROJECT CODE.  THIS'
       ASC '$MAY BE DONE AT ANY TIME THE PROGRAM IS AT THE COMMAND DIS-'
       ASC '$PATCHER.$$/'
MSG2A  ASC '$YOU ARE RECEIVING THE FOLLOWING PRINTOUT BECAUSE YOU HAVE'
       ASC '$TYMSHARE LICENSE'
       ASC '$$IN ADDITION TO THE COMMANDS LISTED BY THE HELP COMMAND, THE'
       ASC '$FOLLOWING APPLIES TO TYMSHARE PERSONNEL ONLY:'
       ASC '$$YOU MAY OBTAIN PROGRESS REPORTS BY ISSUING THE "TIME" COMMAND'
       ASC '$AT THE COMMAND DISPATCHER.  THIS WILL PRINT THE RATES AT WHICH'
       ASC '$CHARACTERS ARE BEING TRANSMITTED.  TWO FIGURES WILL BE GIVEN.'
       ASC '$THE RATE PER SECOND GIVEN IN PARENTHESES IS THE NETWORK RATE.'
       ASC '$THE OTHER FIGURE IS THE RATE OF TRANSFER OF INFORMATION IN'
       ASC '$8-BIT BYTES.  RATES ARE PRINTED APPROXIMATELY EVERY 120K'
       ASC '$CHARACTERS, BUT ONLY IF THE RATE IS MORE THAN 64 CPS.'
       ASC '$$YOU ALSO MAY CHANGE YOUR DISTRICT FROM YOUR LOGIN DISTRICT'
       ASC '$TO YOUR DS PASSWORD DISTRICT BY USING THE COMMAND "SET DISTRICT"'
       ASC '$THIS WILL REQUIRE YOU TO ENTER YOUR NAME AND PASSWORD AS IT'
       ASC '$APPEARS IN THE PASSWORD FILE.$$/'
MSG2B  ASC '$$ADDITIONAL INSTRUCTIONS FOR TYMCOM IX, TYMCOM X TRANSFERS'
       ASC '$$THE FOLLOWING DIFFERENCES PREVAIL WHEN USING THIS PROGRAM TO'
       ASC '$TRANSFER FILES BETWEEN TYMCOM IX AND TYMCOM X SYSTEMS:'
       ASC '$$ONLY SYMBOLIC FILES MAY BE TRANSFERRED, UNLESS THE "MODE" COMMAND IS USED'
       ASC '$TO SELECT AN ALTERNATE TRANSMISSION MODE.'
       ASC '$TYMCOM X LINE NUMBERED FILES, SUCH AS CREATED WITH LNED, WILL'
       ASC '$HAVE THE LINE NUMBERS STRIPPED WHEN TRANSFERRING TO THE TYMCOM IX'
       ASC '$SYSTEM.'
       ASC '$TYMCOM IX COMPRESSED BLANKS WILL BE EXPANDED WHEN TRANSFERRING TO'
       ASC '$THE TYMCOM X.'
       ASC '$TYMCOM X TABS WILL BE EXPANDED TO SPACES BASED ON STANDARD TAB'
       ASC '$SETTING WHEN TRANSFERRING TO THE TYMCOM IX.'
       ASC '$FILES NAMES MUST MEET THE SYNTAX REQUIREMENTS OF THE APPROPRIATE'
       ASC '$SYSTEM.$$/'
MSG4   ASC '$$THERE IS NO PREMIUM CHARGE FOR THE USE OF THIS PROGRAM,'
       ASC '$HOWEVER, THE USER SHOULD BE AWARE THAT HE WILL BE LOGGED'
       ASC '$INTO BOTH SYSTEMS WHILE COPYING, AND NORMAL CHARGES FOR'
       ASC '$BOTH LOGINS WILL PREVAIL.$$/'
MSG5   ASC '$$ADDITIONAL INSTRUCTIONS FOR TYMCOM IX, TYMCOM 370 TRANSFERS'
       ASC '$$THE FOLLOWING DIFFERENCES PREVAIL WHEN USING THIS PROGRAM TO'
       ASC '$TRANSFER FILES BETWEEN TYMCOM IX AND TYMCOM 370 SYSTEMS:'
       ASC '$$ONLY SYMBOLIC FILES MAY BE TRANSFERRED, UNLESS THE "MODE" COMMAND IS USED'
       ASC '$TO SELECT AN ALTERNATE TRANSMISSION MODE.'
       ASC '$TYMCOM IX COMPRESSED BLANKS WILL BE EXPANDED WHEN TRANSFERRING'
       ASC '$TO THE TYMCOM 370.'
       ASC '$BLANK LINES IN THE TYMCOM IX FILE WILL CAUSE A RECORD OF ONE'
       ASC '$BLANK ON THE TYMCOM 370, AND IF THE FILE IS RETURNED TO'
       ASC '$THE TYMCOM IX BY A SUBSEQUENT FILE TRANSFER, THE BLANK WILL BE'
       ASC '$SUPRESSED UNLESS "NO SUPRESS" HAS BEEN SET.'
       ASC '$FILES NAMES MUST MEET THE SYNTAX REQUIREMENTS OF THE APPROPRIATE'
       ASC '$SYSTEM.$$/'
MSG6 ASC '$$LEGAL COMMANDS ARE:'
 ASC '$$RUN             BEGINS EXECUTION'
 ASC '$VERSION         PRINTS VERSION NUMBER'
 ASC '$ONLC            SET LOWER CASE MODE (FOR TYMCOM IX TO TYMCOM 370'
 ASC '$                OR TYMCOM IX TO TYMCOM X FILE TRANSFERS ONLY)'
 ASC '$OFFLC           TURN OFF LOWER CASE MODE (DEFAULT)'
 ASC '$TRUNCATE NNN    TRUNCATE STARTING AT COLUMN NNN (MIN=2, MAX=255)'
 ASC '$                WHEN TRANSFERRING FILES FROM THE TYMCOM 370'
 ASC '$NO TRUNCATE     TURNS OFF TRUNCATE (DEFAULT)'
 ASC '$SUPRESS         REMOVES TRAILING BLANKS WHEN TRANSFERRING FILES FROM'
 ASC '$                THE TYMCOM 370 (DEFAULT)'
 ASC '$NO SUPRESS      STOPS THE REMOVAL OF TRAILING BLANKS'
 ASC '$FIXED NNN       PADS RECORDS WITH BLANKS WHEN TRANSFERRING FILES TO'
 ASC '$                THE TYMCOM 370 IN ORDER TO PRODUCE FIXED LENGTH'
 ASC '$                RECORDS OF LENGTH NNN.'
 ASC '$VARIABLE NNN    CAUSES THE TYMCOM 370 TO CREATE VARIABLE'
 ASC '$                RATHER THAN FIXED LENGTH RECORDS WHEN TRANSFERRING'
 ASC '$                FILES TO THE TYMCOM 370.  NNN, IF SPECIFIED, WILL BE'
 ASC '$                THE MAXIMUM RECORD LENGTH ALLOWED. (DEFAULT).'
 ASC '$MODE (OPTIONS)  USED TO OVERRIDE DEFAULT TRANSMISSION MODES.  THE'
 ASC '$                ORDINARY USER NEVER NEED USE THIS COMMAND.  FOR MORE'
 ASC '$                INFORMATION, CONTACT YOUR TYMSHARE REPRESENTATIVE.'
 ASC '$$                [ NATIVE ]'
 ASC '$                [ SERIAL ]'
 ASC '$MODE [TRANSMIT] [ BINARY ] [BLOCKING= N] [FILL= RIGHT] [BYTESIZE= N]'
 ASC '$     [RECEIVE ]                          [FILL= LEFT ]'
 ASC '$                [ ASCII ]'
 ASC '$                [ IMAGE ]'
 ASC '$$COMPRESS (OPTIONS)  USE TO OVERRIDE DEFAULT COMPRESSION SELECTION.  THE'
 ASC '$                ORDINARY USER NEVER NEED USE THIS COMMAND.  FOR MORE'
 ASC '$                INFORMATION, CONTACT YOUR TYMSHARE REPRESENTATIVE.'
 ASC '$$         [ OFF ]'
 ASC '$COMPRESS [DUPLICATE]'
 ASC '$         [ RANK ] [ AUTO ]'
 ASC '$$SCRATCH         CLEARS ALL MODE AND COMPRESSION SETTINGS SO THAT NORMAL'
 ASC '$                DEFAULTS WILL BE REINSTATED.'
 ASC '$TALK NN         BUILDS A CIRCUIT TO SYSTEM NN (OR USES EXISTING CIRCUIT'
 ASC '$                IF ONE EXISTS.  ALLOWS USER TO CONVERSE WITH REMOTE '
 ASC '$                SYSTEM FROM HIS TERMINAL.  IN GENERAL, ECHO'
 ASC '$                WILL OCCUR BOTH LOCALLY AND AT THE REMOTE SYSTEM.'
 ASC '$                TALK MODE MAY BE EXITED BY TYPING A %%F(CARRIAGE RETURN).'
 ASC '$                A %%U SENDS A UNIT SEPARATOR TO THE REMOTE SYSTEM.'
 ASC '$                ESCAPES TYPED WILL BE SENT TO THE REMOTE SYSTEM.'
 ASC '$WHY             CAUSES THE SLAVE PROGRAM TO SEND ITS LATEST ERROR'
 ASC '$                EXPLANATION MESSAGE (370 ONLY).'
 ASC '$LOQUACIOUS      CAUSES CHECKPOINT AND OTHER MESSAGES TO BE PRINTED ON'
 ASC '$                THE TERMINAL.  USEFUL FOR OBTAINING PROGRESS REPORTS'
 ASC '$                WHEN TELECOPYING VERY LARGE FILES.'
 ASC '$NO LOQUACIOUS   STOPS PRINTING OF CHECKPOINT INFORMATION.  (DEFAULT).'
 ASC '$ASK             ASK FOR CONFIRMATION BEFORE REPLACING AN OLD FILE'
 ASC '$                (DEFAULT).'
 ASC '$REPLACE         DO NOT REQUIRE CONFIRMATION WHEN REPLACING AN OLD FILE.'
 ASC '$KEEP            KEEP OLD FILES.  NO CONFIRMATION REQUIRED.'
 ASC '$UPDATE          USE UPDATE MODE WHEN REPLACING AN OLD FILE (DEFAULT).'
 ASC '$                ONLY PORTIONS OF THE FILE THAT ARE DIFFERENT WILL BE'
 ASC '$                TRANSMITTED.  EFFECTIVE ONLY WHEN TRANSFERRING FILES'
 ASC '$                FROM TYMCOM IX TO TYMCOM IX, UNLESS ONE OF THE BINARY'
 ASC '$                MODES IS BEING USED.'
 ASC '$NO UPDATE       FORCES COPYING THE ENTIRE FILE EVEN IF UPDATE'
 ASC '$                MODE COULD BE USED.  MAY BE FASTER THAN UPDATE MODE IF'
 ASC '$                OLD FILE BEING REPLACED HAS BEEN MODIFIED SEQUENTIALLY'
 ASC '$                OR GREATLY DIFFERS FROM THE REPLACEMENT.'
 ASC '$HELP (OR ?)     REPRINTS THIS LIST'
 ASC '$INSTRUCTIONS    HOW TO EXECUTE THIS PROGRAM'
 ASC '$PDP10           ADDITIONAL INSTRUCTIONS RELATIVE TO TYMCOM IX-TYMCOM X'
 ASC '$                FILE TRANSFERS'
 ASC '$SYS370          ADDITIONAL INSTRUCTIONS RELATIVE TO TYMCOM 370-TYMCOM IX'
 ASC '$                FILE TRANSFERS'
 ASC '$CAPABILITIES    DESCRIBES PROGRAM CAPABILITIES'
 ASC '$PROJECT         ENTERS PROJECT CODE'
 ASC '$QUIT            EXITS TO EXEC'
 ASC '$$ANY OF THESE COMMANDS MAY BE SHORTENED TO THE FIRST THREE'
 ASC '$CHARACTERS.  THE SECOND PART OF A COMMAND MAY ALSO BE SHORTENED.$$/'
MSG6A  ASC '$AS TYMSHARE PERSONNEL THESE ARE ADDITIONAL LEGAL COMMANDS:'
       ASC '$$     TIME          SETS TIME SWITCH TO PROVIDE PROGRESS REPORTS'
       ASC '$     SET DISTRICT  SETS DISTRICT TO THAT CONTAINED IN PASSWORD'
       ASC '$                    FILE$$/'
ERR13  ASC '$FILE COPYING ERROR - OPERATION ABORTED$/'
ERR18  ASC '$SYSTEMS OUT OF SYNCHRONIZATION - TRANSFER ABORTED$/'
ERR19  ASC "$COMMANDS FILE NEEDS 'Y' OR 'N' RESPONSE--PROGRAM TERMINATED$/"
ERR22  ASC '$PROGRAM ERROR - NOTIFY TYMSHARE$/'
ERR23  ASC '$SYSTEM ERROR - PLEASE RECALL PROGRAM, IF CONDITION'
       ASC '$PERSISTS PLEASE NOTIFY TYMSHARE$/'
ERR25  ASC '$NEW NETWORK SUPERVISOR TAKING OVER NETWORK'
       ASC '$PLEASE TRY AGAIN IN FEW MINUTES, IF CONDITION'
       ASC '$PERSISTS PLEASE NOTIFY TYMSHARE$/'
ERR28  ASC '$CIRCUIT IS TOO BAD TO CONTINUE - PROGRAM ABORTED$/'
ERR40 ASC '$TRANSFER ABORTED$/'
ERR41 ASC ' OPTION NOT IMPLEMENTED/'
ERR42 ASC '$COMPRESSION/'
ERR43 ASC '$UPPER-LOWER CASE/'
ERR44 ASC '$TRUNCATION/'
ERR45 ASC '$SUPPRESS TRAILING BLANKS/'
ERR46 ASC '$VARIABLE RECORD LENGTH/'
ERR47 ASC '$FIXED RECORD LENGTH/'
VME1   ASC '$NO PASSWORD FILE/'
VME    ASC '$NOTIFY DIVISION OPNS MGR AND SYSTEMS GROUP TECH DIV/'
VME2   ASC '$PASSWORD FILE STATUS LOST/'
TRPM1 ASC '$TRANSMISSION ABORTED DUE TO CONTROLLER TRAP$/'
MIXMSG ASC '$TRANSMISSION ABORTED DUE TO MIXED TRANSMISSION MODES$/'
BADMSG ASC '$TRANSFER ABORTED DUE TO UNEXPECTED SLAVE CODE$/'
UIOMSG ASC '$TRANSFER ABORTED DUE TO UNIMPLEMENTED CONTROLLER OPERATION$/'
TRPM2 ASC '$TRANSMISSION ABORTED DUE TO SLAVE TRAP$/'
UCCMSG ASC '$TRANSFER ABORTED DUE TO UNEXPECTED CONTROLLER CODE$/'
RDER ASC '$TRANSFER ABORTED DUE TO ERROR READING: /'
WTER ASC '$TRANSFER ABORTED DUE TO ERROR WRITING: /'
PERMSG ASC '$TRANSFER ABORTED DUE TO ERROR POSITIONING: /'
ERAS ASC '$TRANSFER ABORTED DUE TO ERROR ERASING: /'
ABTT2 ASC '$ABORT REQUESTED$/'
ERR1   ASC '$BIT MAP NOT SET, PLEASE TRY LATER$/'
ERR27  ASC '$YOU MUST EITHER COPY FROM OR COPY TO SYSTEM /'
ERR29  ASC '$PROJECT CODE LIMITED TO TWELVE CHARACTERS$/'
ERR30  ASC '$BUFFER ZAP$/'
ERR31  ASC '$RECEIVING SYSTEM OVERLOADED/'
ERR32  ASC '$YOU MAY NOT COPY FROM AND TO THE SAME SYSTEM$/'
ERR33  ASC '$LINE TOO LONG$/'
ERR34  ASC ' IS ILLEGAL AS IT CONTAINS A * AND WILD CARDS'
       ASC '$ARE NOT PERMITTED.$/'
VME3   ASC '$PASSWORD FILE BUSY-TRY LATER$/'
VME4   ASC '$UNVALIDATED NAME/'
MSG3   ASC '$$VERSION 27, FEBRUARY 1979$$/'
BADNO  ASC '$ILLEGAL MESSAGE NO$/'
ERR15  ASC '$INVALID USER ON SYSTEM /'
M9     ASC '$TRUNCATE STARTING WITH COLUMN: /'
MODISC ASC '$DISC ALLOCATION EXHAUSTED- TRANSFER ABORTED$/'
ERR48 ASC '$UNABLE TO SYNCHRONIZE WITH SLAVE ON SYSTEM /'
ERR3   ASC '$IT IS ILLEGAL FOR YOU TO ATTEMPT TO WRITE IN THE'
       ASC '$SPECIFIED FILE DIRECTORY$/'
CANSYN ASC '$CANNOT SYNCHRONIZE WITH OLD-STYLE SLAVE--ABORT$/'
 END
TELECOPY ** FICHE/FRAME BREAK *****
STELMSG SYMSORT

SYM.  PG.LN. IDENT.

ABTT2   8  1 TELMSG  BADMSG  7 32 TELMSG  BADNO   8 14 TELMSG  
CANSYN  8 21 TELMSG  ERAS    7 39 TELMSG  ERR1    8  2 TELMSG  ERR13   7  9 TELMSG  
ERR15   8 15 TELMSG  ERR18   7 10 TELMSG  ERR19   7 11 TELMSG  ERR22   7 12 TELMSG  
ERR23   7 13 TELMSG  ERR25   7 15 TELMSG  ERR27   8  3 TELMSG  ERR28   7 18 TELMSG  
ERR29   8  4 TELMSG  ERR3    8 19 TELMSG  ERR30   8  5 TELMSG  ERR31   8  6 TELMSG  
ERR32   8  7 TELMSG  ERR33   8  8 TELMSG  ERR34   8  9 TELMSG  ERR40   7 19 TELMSG  
ERR41   7 20 TELMSG  ERR42   7 21 TELMSG  ERR43   7 22 TELMSG  ERR44   7 23 TELMSG  
ERR45   7 24 TELMSG  ERR46   7 25 TELMSG  ERR47   7 26 TELMSG  ERR48   8 18 TELMSG  
GEN     1  3 TELMSG  M9      8 16 TELMSG  MIXMSG  7 31 TELMSG  MODISC  8 17 TELMSG  
MSG1    2 22 TELMSG  MSG2    2 30 TELMSG  MSG2A   4  3 TELMSG  MSG2B   4 18 TELMSG  
MSG3    8 13 TELMSG  MSG4    4 32 TELMSG  MSG5    4 36 TELMSG  MSG6    5 10 TELMSG  
MSG6A   7  5 TELMSG  PERMSG  7 38 TELMSG  RDER    7 36 TELMSG  TRPM1   7 30 TELMSG  
TRPM2   7 34 TELMSG  UCCMSG  7 35 TELMSG  UIOMSG  7 33 TELMSG  VME     7 28 TELMSG  
VME1    7 27 TELMSG  VME2    7 29 TELMSG  VME3    8 11 TELMSG  VME4    8 12 TELMSG  
WTER    7 37 TELMSG  
TELECOPY ** FICHE/FRAME BREAK *****
TELCOP23
TELCOP IDENT   3-28-77  MASTER PROG. OF FILE TRANSF PKG 940 PDP10 370 L88
       NOLIST EXT,STAT

       ENTRY ARM1,ARM9,CLR9,NOCHAN,OPCH,PANIC1,PULL,CLR5,ZAPINT
       ENTRY PANIC,ESCRTN,CIRCNT,CONVER,CKOL3,TERMCH
       ENTRY ERR,CIN,RDNO,ASK
       ENTRY STIME,CKTIM,TINIT,ADIAG,BDIAG,PRDAT,PRTIME
       ENTRY CLRCIR,UPDSW,COPFIN,M5,M12,ABT,ABORT
       ENTRY LOWSW,BLNKSW,TRUSW,TRU,FIX,VRECL,FRECL
       ENTRY CKLGL,OFDBUF,TDNO
       ENTRY NINPF,FSYS,TSYS
       ENTRY ERR5
       ENTRY CKOLGL,CKSLGL,GFD,SCONV
       ENTRY FPTR,TUPT,FUPT,UPTR
       ENTRY CI,CO,RESET
       ENTRY SWORD,GFT,GFD3
       ENTRY FFPT,TFPT
       ENTRY FTYPE,OFDWD0,OFDWD1,OFDWD2
       ENTRY FDWD0,FDWD1,FDWD2
       ENTRY CPTOP,TFDPT,FFDPT
       ENTRY CHCNT
       ENTRY INSTSW
       ENTRY BUFFER
       ENTRY ERR6,ERR12
* HOST NUMBERS OF KNOWN SYSTEMS.  ALL OTHERS ARE 370'S.
MAX940 EQU 21
MIN940 EQU 1
MAX10A EQU 39
MIN10A EQU 22
MAX10B EQU 99
MIN10B EQU 70
LUDBUF EQU 34100B              (OVERLAY BUFFERED TERMINAL OUTPUT PAGE)

       BRU START; BRS 10
START  STA CIN; BRS 143; BRU *+2; BRU START1
       MSG ERR1 (BIT MAP NOT SET); BRU QUI
START1 LDA =-1; STA MASTER (SET MASTER MODE)
       LDA =2; BRS 77
       LDB =200B; LDA =LUDBUF; LDX =100B; BRS 124; LDA LUDBUF+75B
       LRSH 12; STA SYSNO; LDA LUDBUF+77B; STA PROSTG; BRS 39
       CAX; RSH 2; ETR =377B; STA DIST; CXA; SKA =1B7; BRU *+2
       BRU *+3; BRM SOPSW; BRU *+3; SKA =2B6; BRM SSPSW
       BRS 71; BRU *+3; CLA; STA DIST
       LDA =INT10; STA 212B; LDA =ESCAPE; STA 201B
       LDA =INT5; STA 205B
       LDA =59; LDB =PBUF; LDX =4; BRS 67 (GET LOGIN PROJ CODE)
       BRM SPROJ; LDA =31; LDB =CGAN; LDX =3; BRS 67; LDA LUDL
       ETR =1777B; STA BLNO; SKG =895; BRU *+2; HLT 0 (BAD BLOCK NO)
       LDA LUDL; LRSH 10; ADD =LUDBUF; STA POS
       LDA BLNO; LRSH 23; DIV =128; STB GTEMP; CLB; LSH 13
       ADD =320200B; ADD GTEMP; CAB; LDA =LUDBUF; LDX =100B
       BRS 124; LDX POS; LDA 4,2; SKG =0; HLT 0 (NO FDPT TROUBLE)
       STA CFDIR; LDA 7,2; ETR =377777B; STA CUNO
       LDA POS; MUL =3; LSH 23; SUB =1; CAB; ADD =12
       XAB; STP UPTR; GCD UPTR; HLT 0 (WHAT HAPPENED)
       SKG =0; BRU *-3; MIN UPTR+1
X      GCI UPTR; BRU RESET; WCI USERPT; BRU X

PBUF   BSS 4
PBUFPT DATA 3*PBUF-1,3*PBUF-1+12
SPROJ  ZRO; LDX =-4; LDA PBUF+4,2; ETR =37777777B; STA PBUF+4,2
       BRX *-3
SPROJ1 GCD PBUFPT; BRU SPROJ2; SKG =0; BRU SPROJ1; MIN PBUFPT+1
       LDP PBUFPT; STP PROJPT; BRR SPROJ
SPROJ2 SKR PROJSW; BRU *-1; BRR SPROJ
CLEAR  ZRO; BRS 147; CLA; STA CONTSW
       LDX =CLSTR-CLEND; CLA; STA CLEND,2; BRX *-1
       BRR CLEAR
CLEAR1 ZRO; BRS 147; LDX =CLSTR-CLEND1; CLA; STA CLEND1,2; BRX *-1
       BRR CLEAR1
YNSW   ZRO
GETYN  ZRO; CLA; SKN YNSW; BRU GETYN2; STA YNSW; BRR GETYN
GETYN2 LDA =377B; CIT CIN
       SNE ='Y'; BRU GETYN1
       SNE ='N'; BRU GETYN1
       BRR GETYN
GETYN1 CIO CIN; LDA =377B; CIT CIN; SNE =155B; BRU GETYN1; BRR GETYN
RESET  LDA =-1; STA TALKSW; XMA HFILE; SKE =-1; BRS 20
       LDA =PANIC1; SKN NEWSW; LDA =PANIC; STA ESCRTN; BRM ARM1
       BRS 147; BRM CLR5
       LDA =4B4; LDX =-1; BRS 12
       SKN STARSW; BRU *+2; BRU PARSE
GLTCH  LDA CIN; SKE =0; BRU IN1
       TCO =155B; TCO =32B  PRINT COLON
IN1    LDA =377B; CIT CIN; SNE ='Y'; BRU IN1A
       SNE =155B; BRU IN1A
       SKG =31B; SKG =17B; BRU *+2; BRU NEWSYS
       BRM CLEAR
       CIO CIN; SKE =0; BRU *+2; BRU IN1; SKE =155B; BRU *+2
       BRU GLTCH; SKE ='('; BRU *+2; BRU IN5; LRSH 8
IN2    CIO CIN; SKE =0; BRU *+2; BRU IN2; SKE =155B; BRU *+2
       BRU CHK  1 CHAR. SEE IF IT IS Q OR ?
       LRSH 8
IN3    CIO CIN; SKE =0; BRU *+2; BRU IN6; SKE =155B; BRU *+2
       BRU ERR  2 CHARS
       LRSH 8
IN4    CIO CIN; BRM DTES; BRU IN4; STA TERMCH
IN4A   LDX =CTBL-CTBLND
       CBA  MOVE COMMAND INTO 'A' REGISTER
       SKE CTBLND,2  SEARCH FOR COMMAND; BRX *-1
       BRU* BTBLND,2  FALL THRU BRX MEANS COMMAND NOT FOUND
IN5    SKR CONTSW; BRU *-1; SKR GFNSW; BRU *-1; CLA; STA UPDSW; STA PARSW
       STA NSYSSW; BRU BEGIN+2
IN6    STA TERMCH; LRSH 8; BRU IN4A
NEWSYS SKN DONOR; BRU NSERR; BRM CLEAR1
       BRM RDNO
       STA TSYS; SKN PARSW; BRU BEG1
       LDP HPTFPT; STP PTFPT; LDP HPFFPT; STP PFFPT
       SKR STARSW; BRU *-1; BRU STGC4
NSERR  CIO CIN; SKE =155B; BRU *-2; BRU ERR
CHK    CLA; LSH 8; SKE =61B (Q); BRU *+2; BRU QUI (QUIT)
       SKE =37B  (QUESTION MARK); BRU *+2
       BRU HEL; SKE ='Y'; BRU *+2; BRU IN1; SKN ='N'; BRU ERR; BRU IN1
ERR    LDA ERFLG; SKE =0; BRU HEL; MIN ERFLG; MSG ERMSG (PRINT ?)
       LDX =-1; BRS 11; BRU RESET
CTBL ASC 'PACSNIREVAHCIUQLEHNURORPMITTESPDPLNOFFOURTPUSTON ONSYSMOCDOMYHWXIFRAVLATRCSQOLDPUPEREEKKSA'
CTBLND DATA 0,CAP,INS,VER,CHA,QUI,HEL,RUN,PRO,TIM,SET,PDP,ONL,OFFF
 DATA TRUN,BLNK,NO,NO,SYS370,COMPRESS,MODE,WHY,FIX1,VAR1,TALK,SCRAT,VERBO,UPDA
       DATA REPLACE,KEEP,ASKIT
BTBLND DATA ERR
IN1A   CIO CIN; BRU IN1
CAP    MSG MSG1; BRU RESET
INS    MSG MSG2; BRS 39; SKA =4B7; BRU *+2; BRU RESET; MSG MSG2A; BRU RESET
VER    MSG MSG3; BRU RESET
CHA    MSG MSG4; BRU RESET
SYS370 MSG MSG5; BRU RESET
PDP    MSG MSG2B; BRU RESET
TERMCH ZRO


TRUN   LDA TERMCH; SNE =0; BRU TRU2
TRU1   MSG M9
TRU2   BRM RDNO; SKG =255; SKG =1; BRU TRU1; STA TRUSW; BRU RESET

NO     CIO CIN; SNE =155B; BRU ERR; LRSH 8; CIO CIN; SNE =155B
       BRU ERR; LRSH 8; CIO CIN; SNE =155B; BRU ERR; LRSH 8
       CIO CIN; SKE =155B; BRU *-2; CBA; SNE URT; BRU NOTRU
       SNE ALB; BRU NOBLNK; SNE REV; BRU NOVERB; SNE DPU; BRU NOUPDA; BRU ERR
URT    ASC 'URT'
ALB    ASC 'PUS'
REV    ASC 'QOL'
DPU    ASC 'DPU'


REPLACE LDA =-1; BRU ASKIT+1
KEEP LDA =1; BRU ASKIT+1
ASKIT CLA; STA ASK; BRU RESET

NOUPDA LDA =-1; BRU *+2
UPDA CLA; STA UPDNO; BRU RESET

NOVERB CLA; BRU *+2
VERBO LDA =-1; STA VERBOSE; BRU RESET

NOTRU  LDA =-1; STA TRUSW; BRU RESET

BLNK   LDA =-1; BRU *+2
NOBLNK CLA; STA BLNKSW; BRU RESET

TRUSW  DATA -1
TRU 0;*        SWITCH INDICATES TRUNCATE WHEN NEG.
BLNKSW DATA -1 (SUPPRESS TRAILING BLANKS UNLESS "NO SUPRESS" SET)

*FIXED/VARIABLE LENGTH RECORD SWITCH.  DEFAULT IS VARIABLE.
FRECL DATA 65535+1               (FIXED RECORD SIZE)
FIX    DATA 0                  (SWITCH INDICATES FIXED LENGTH RECORDS WHEN NEG.)
VRECL DATA 65535+1               (MAX SIZE FOR VARIABLE LENGTH RECORD)
QUI    BRM CLRCIR; LDA CIRCNT; SKE =0; BRM CONFIRM; LDX =-1; BRS 169
       LDA =1; BRS 77; BRS 10
CONFIRM 0
 LDA CIN; SKE =0; BRU CONF4    (ASSUME YES IF RUNNING COMMANDS FILE)
 MSG CONF1 (EXIT , OK?)
 BRM CLBUF
 BRM YN
 BRU RESET
CONF4 MSG CONF2 (BE SURE TO CHECK..)
 LDA SYSSW
 BRM TDNO
 MSG CONF3 (FOR DETACHED JOB)
 BRR CONFIRM
CONF1 ASC '$EXIT, OK? /'
CONF2 ASC '$BE SURE TO CHECK SYSTEM /'
CONF3 ASC ' FOR DETACHED JOB$/'
HEL    MSG MSG6; BRS 39; SKA =4B7; MSG MSG6A; CLA; STA ERFLG; BRU RESET
RUN    CLA; STA UPDSW (RESTORE UPDATE SWITCH); STA PARSW; STA NSYSSW; BRU BEGIN
TIM    BRS 39; SKA =4B7; BRU *+2; BRU ERR (FOR TYMSHARE ONLY)
       SKR TIMSW; BRU *-1; BRU GLTCH
TIMSW  ZRO
ONL    LDA =-1; BRU *+2
OFFF    CLA; STA LOWSW; BRU RESET
LOWSW  ZRO
PRO    MSG M6; LDA PROJPT; CAB; STP STGPT; BRM GTSTG; LDP STGPT
       STP PROJPT; CBA; SUB PROJPT; STA PROJSW (RESET NO PROJ SWITCH)
       SKG =12; BRU RESET; MSG ERR29; BRU PRO
ERMSG  ASC ' ?$/'

TCIT   ZRO; LDX =-1; BRS 13; BRM GETYN; MIN TCIT; BRR TCIT
PARSE  LDA CIN; SKG =0; BRM TCIT; BRM GETYN
       BRM CLEAR1; BRU STGC4
BEGIN  MSG M1 (COPY FROM FILE); BRM CLBUF; SKR FMSW; BRU *-1
       BRM GFFN; CLA; STA FMSW
       SKN CONTSW; MSG M2 (COPY TO FILE); BRM CLBUF; SKR TOSW
       BRU *-1; BRM GTFN; CLA; STA TOSW
BEG1   BRM VSYS
       LDA TSYS; SKN DONOR; LDA FSYS; STA SYS (DESIRED SYSTEM NO)
*IF USER STATUS CHECK THAT USER NAMES ON THIS SYSTEMS ARE SAME
*IF NOT FROM FILE MUST HAVE CHAR. TO MAKE GLOBAL PUBLIC
*IF ACCT SUPER CHECK THAT GAN ON THIS SYSTEM ARE SAME
*IF NOT FILE MUST HAVE CHAR. TO MAKE GLOBAL PUBLIC
*IF OPER OR ABOVE STATUS CHECK ONLY THAT USER NAME ON THIS SYSTEM
*IS VALID
BEGIN2 BRM SSYSSW; SKN 370SW; BRU *+2; BRM VFILE (VERIFY FILE NAME)
       SKN DONOR; BRU BEGIN3; LDA =FUSER; BRM GENTRY
       BRU BEGE1 (NO ENTRY FOR FROM USER NAME)
       LDA 4,2; STA FFDPT; LDA 6,2; ETR =1777777B; STA FGAN
       LDA 7,2; ETR =377777B; STA FUNO; LDA 8,2; RSH 2; ETR =377B
       STA UDIST; SKN SUPER; BRU *+2
       BRU BEG2A; LDA FUNO; SKE CUNO; BRM CKPUB (CK IF PUBLIC)
       BRU BEGIN7
CKPUB  ZRO; SKN GPUBSW; BRU BEGE2 (FILE NOT PUBLIC)
       BRR CKPUB
CKDIST ZRO; LDA DIST; SKG =0; BRR CKDIST; LDA UDIST; SKE DIST
       BRU *+2; BRR CKDIST; SKN DONOR; BRU BEGE4
       SKN GPUBSW; BRU BEGE2; BRR CKDIST
BEG2A  SKN OPER; BRU *+3; BRM CKDIST; BRU BEGIN4; LDA FGAN; SKE CGAN
       BRM CKPUB; BRU BEGIN4
BEGE1  MSG ERR16 ("COPY FROM" USER NAME INVALID)
       BRU RESET
BEGE2  MSG ERR2; BRU NINPF1
STUSR  ZRO; LDA =TUSER; SKN TUSRSW; LDA =FUSER; MIN STUSR; BRR STUSR
BEGIN3 SKN PARSW; BRU *+2; BRM STUSR
       LDA =TUSER; BRM GENTRY; BRU BEGE3 (NO ENTRY FOR TO USER NAME)
       LDA 4,2; STA TFDPT; LDA 6,2; ETR =1777777B; STA TGAN
       LDA 7,2; ETR =377777B; STA TUNO; LDA 8,2; RSH 2; ETR =377B
       STA UDIST; SKN SUPER; BRU *+2
       BRU BEG3A; LDA TUNO; SKE CUNO; BRU BEGE4 (INVALID USER)
       BRU BEGIN4
BEG3A  SKN OPER; BRU *+3; BRM CKDIST; BRU BEGIN4; LDA TGAN
       SKE CGAN; BRU BEGE4 (INVALID GAN)
       BRU BEGIN4
BEGE3  MSG ERR17 ("COPY TO" USER NAME INVALID)
       BRU RESET
BEGE4  MSG ERR3; BRU RESET
BEGIN4 SKN DONOR; BRU *+2; BRU BEGIN7
*PULL ROUTINES
BEGIN6 LDA TFDPT; LDX =1; BRS 141
       BRM OPCH; BRU NOCHAN; LDA =CHLOSS; STA I10RTN
       SKN NEWSW; BRU *+2; BRU NEWREC
RECIP2: MSG CANSYN; BRU ABORT

*CHECK TO ASCERTAIN THAT ONE SYSTEM NUMBER IS THIS SYSTEM

VSYS   ZRO; LDA TSYS; SKE FSYS; BRU *+2; BRU VSYS1
       SKN DONOR; BRU *+2; BRR VSYS
       LDA TSYS; SKE SYSNO; BRU *+2; BRR VSYS
       MSG ERR27; LDA SYSNO; BRM TDNO; TCO =155B
       BRU RESET
VSYS1  MSG ERR32; BRU RESET (NOT ALLOWED TO TELECOPY TO SAME SYSTEM)

*PUSH ROUTINES

BEGIN7 LDA FFDPT; LDX =1; BRS 141
       LDP FFPT; BRS 48; BRU NINPF; LDB =IFDBUF; LDX =5; BRS 96
       BRM CKLGL; BRM OPCH; BRU NOCHAN; LDA =CHLOSS; STA I10RTN
       SKN NEWSW; BRU RECIP2; BRU NEWSEN

*WHEN PUSHING TO 940 CHECK TO SEE IF LEGAL TO WRITE INTO REQUESTED FILE
*DIRECTORY

CKSLGL ZRO; SKN OPER; BRU *+2; BRR CKSLGL (IF OPER LICENSE LET HIM)
       LDA SGAN; SKE CGAN; BRU SLGER (NOT SAME GAN STOP HIM)
       SKN SUPER; BRU *+2; BRR CKSLGL (HE IS SUPER LET HIM WRITE INTO
*ANY FILE DIR IN HIS GAN)
       LDA SUUN; SKE CUNO; BRU SLGER (NOT HIS DIRECTORY); BRR CKSLGL
SLGER  MSG ERR3
ABORT  BRM ABT
       BRU RESET
ABT 0
 SKN PGMSW; BRU CLR2
 SKN NEWSW; BRU OLDABT; LNKMSG ABTCOD; BRU CLR2
OLDABT SKN 940SW; BRU OLDAB1; LDA =11B; BRU OLDAB2
OLDAB1 LDA =252B; CIO CO; LDA =107B
OLDAB2 CIO CO
CLR2 LDA CIRCNT; SKG =0; BRR ABT
 LDX CI; BRS 13; BRU *+2; BRR ABT
 CIO CI; BRS 45; BRU CLR2
*POINTERS

HFUPT  DATA 3*FUSER-1,3*FUSER-1
HTUPT  DATA 3*TUSER-1,3*TUSER-1
FUPT   BSS 2
TUPT   BSS 2
HFFPT  DATA 3*FMFIL-1,3*FMFIL-1
HTFPT  DATA 3*TOFIL-1,3*TOFIL-1
FFPT   BSS 2
TFPT   BSS 2
HPFFPT BSS 2
HPTFPT BSS 2
PFFPT  BSS 2
PTFPT  BSS 2
CLSTR  EQU *
NFILSW ZRO
WORKPT BSS 2
ERRCNT ZRO
HFCHCT ZRO
HSHFCT ZRO
HTCHCT ZRO
SHFCNT ZRO
TCHCNT ZRO
CHCNTT ZRO
FMSW   ZRO
TOSW   ZRO
10HBPT ZRO
BUFCUR ZRO
CURBUF ZRO
NBUFSW ZRO
GTEMP  ZRO
BLNO   ZRO
FFDPT  ZRO
FGAN   ZRO
FUNO   ZRO
TFDPT  ZRO
TGAN   ZRO
TUNO   ZRO
BFRPT  ZRO
CBFRPT ZRO
CHCNT  ZRO
370CNT ZRO
CHECK  ZRO
EBFRPT ZRO
EOFSW  ZRO
ERCNT  ZRO
FNI    ZRO
FNO    ZRO
GWDC   ZRO
HBFRPT ZRO
HGWDC  ZRO
HSWDC  ZRO
LBLKCT ZRO
RCHECK ZRO
SCHECK ZRO
SWDC   ZRO
TWORD  ZRO
BLX    ZRO
SBCNT  ZRO
GPUBSW ZRO 0 *IF NEGATIVE COPY FROM FILE GLOBAL PUBLIC
* INPUT FILE DIRECTORY ATTRIBUTES
IFDBUF ZRO
FDWD0  ZRO
FDWD1  ZRO
FDWD2  ZRO
IBP    ZRO
* OUTPUT FILE DIRECTORY ATTRIBUTES
OFDBUF ZRO
OFDWD0 ZRO
OFDWD1 ZRO
OFDWD2 ZRO
OIBP   ZRO
CPTOP  ZRO
FTYPE  ZRO
SGAN   ZRO
SUUN   ZRO
UPDSW ZRO
ERFLG  ZRO
CURPOS ZRO
CLEND1 EQU *
FUSER  BSS 6
TUSER  BSS 6
FSYS   ZRO
TSYS   ZRO
FMFIL  BSS 20
TOFIL  BSS 20
UPTR   BSS 2
FPTR   BSS 2
HSYS   ZRO
TUSRSW ZRO
CLEND  EQU *
SYSNO  ZRO
CGAN   ZRO
FDLUDL ZRO
LUDL   ZRO
CFDIR  ZRO
CUNO   ZRO
CIN    ZRO
ASK    ZRO
INTMSK ZRO
CI     ZRO
CO     ZRO
POS    ZRO
SUPER  ZRO 0  (IF NEGATIVE CALLER HAS ACCT SUPER STATUS)
OPER   ZRO 0  (IF NEGATIVE CALLER HAS OPER STATUS OR HIGHER)
CLBUF  ZRO; LDA =155B; CIT CIN; BRR CLBUF; BRU *-2
*TEST TO SEE IF FROM FILE GLOBAL PUBLIC
SPUBSW ZRO; GCI FPTR; BRR SPUBSW; SKE =40B; BRU *+2; BRU *+3
       SKG =77B; BRU SPUBSW+1; SKR GPUBSW; BRU *-1; BRR SPUBSW
GENTRY ZRO; STA FPTR; MUL =3; LSH 23; SUB =1; CAB; ADD =12
       XAB; STP UPTR; LDX =-4; CLA; ADD* FPTR; MIN FPTR; BRX *-2
       LRSH 23; DIV =887; STB BLNO; CBA; SKG =895; BRU *+2; HLT 0
GE1    LDA BLNO; LRSH 23; DIV =128; STB GTEMP; CLB; LSH 13; ADD =320200B
       ADD GTEMP; CAB; LDA =LUDBUF; LDX =100B; BRS 124; EAX LUDBUF
GE2    STX BLX; LDA 0,2; SKE =0; BRU *+2; BRR GENTRY (NOT IN LUD)
       SKE =-1; BRU *+3; MIN BLNO; BRU GE1; SKE =-2; BRU *+2; BRU GE3
       CXA; MUL =3; LSH 23; SUB =1; CAB; ADD =12; XAB; SKSE UPTR
       BRU GE3; MIN GENTRY; BRR GENTRY
GE3    LDX BLX; EAX 9,2; BRU GE2
STARSW ZRO
PARSW  ZRO
NSYSSW ZRO
GFN    ZRO; LDX =STGBUF-STGBFE; CLA; STA STGBFE,2; BRX *-1
       LDP HSTGPT; STP STGPT; LDP HSICPT; STP SICPT; BRM GTSTG
       LDA =-1; STA PROTC
       GCI STGPT; BRM GFNE1; SKE ='('; BRM GFNE1
GFN1   GCI STGPT; BRM GFNE1; SNE =':'; BRU GFN2
       SNE =')'; BRU GFN6 (IF FROM SYS ASSUME THIS SYSTEM)
       WCI UPTR; BRU GFN1
GFN2   GCI STGPT; BRM GFNE1; SNE =')'; BRU GFN3C
       WCI SICPT; BRU GFN2
GFN3D  ZRO
GFN3   CLA; STA HSYS
GFN3A  GCI SICPT; BRR GFN3D; SNE ='*'; BRU GFN3A1
       SUB =20B; XMA HSYS; MUL =10; LSH 23
       ADM HSYS; BRU GFN3A
GFN3A1 LDA SYSNO; STA HSYS; BRR GFN3D
GFN3C  BRM GFN3D
GFN3B  GCI STGPT; BRM GFNE1; BRM GFN7
       CAX; LDP STGPT; STP WORKPT; CXA; BRU GFN41+2
GFN4   LDA =-1; STA PROTC
GFN41  GCI STGPT; BRR GFN
       SNE ='/'; BRM STGPRO; SNE ="'"; BRM STGPRO
       SNE ='"'; BRM STGPRO; SKE =','; BRU GFN43
GFN42  SKN PROTC; BRU GFN5; SKR STARSW; BRU *-1
       SKR PARSW; BRU *-1; BRR GFN
GFN43  SNE =':'; BRU GFN42
GFN5   WCI FPTR; BRU GFN41
GFN6   SKN FMSW; BRM GFNE1; LDA SYSNO; STA HSYS; BRU GFN3B
GFN7   ZRO; SKN FMSW; BRR GFN7; SNE =','; BRU STGCMD; BRR GFN7

STGPRO ZRO; SKN PROTC; BRU *+3; STA PROTC; BRR STGPRO (SET PROTECTED)
       SKE PROTC; BRR STGPRO (WITHIN PROTECTED STRING)
       SKR PROTC; BRU *-1; BRR STGPRO (SET NOT PROTECTED)

GTSTG  ZRO; SKN GFNSW; BRU *+2; BRU GTSTG2
GTSTG1 CIO CIN
       SNE =155B; BRR GTSTG; SNE =152B; BRU GTSTG1 (CONTINUE LINE)
       WCI STGPT; LDA STGPT+1; SNE STGLIM; BRU GFNE3 (STRING TOO LONG)
       BRU GTSTG1
GTSTG2 MIN GFNSW; LDA ='('; WCI STGPT; BRU GTSTG1
HSICPT DATA 3*SICBUF-1,3*SICBUF-1
HSTGPT DATA 3*STGBUF-1,3*STGBUF-1
STGBUF BSS 100
STGBFE EQU *
SICBUF BSS 2
STGPT  BSS 2
SICPT  BSS 2
STGLIM DATA 3*STGBFE-1
PROTC  ZRO
FGFN   ZRO; SKR FMSW; BRU *-1; BRM GFN; CAB; CLA; STA FMSW; CBA; BRR FGFN
TGFN   ZRO; BRM GFN; BRR TGFN
GFFN   ZRO; LDP HFUPT; STP UPTR; LDP HFFPT; STP FPTR
       LDX =-20; CLA; STA FMFIL+20,2; BRX *-1; LDX =-6
       STA FUSER+6,2; BRX *-1; STA DONOR
       BRM FGFN; SKN STARSW; BRU *+2; BRU STG
       LDA HSYS; STA FSYS; SKE SYSNO
       BRU *+3; SKR DONOR; BRU *-1; LDP UPTR; STP FUPT
       LDP FPTR
       STP FFPT; BRM SPUBSW; BRR GFFN
GTFN   ZRO
       LDP HTUPT; STP UPTR; LDP HTFPT; STP FPTR
       LDX =-20; CLA; STA TOFIL+20,2; BRX *-1; LDX =-6
       STA TUSER+6,2; BRX *-1; BRM TGFN
GTFN2  SKN NSYSSW; BRU *+2; BRU *+3
       LDA HSYS; STA TSYS
       LDP UPTR; STP TUPT; LDP FPTR
       STP TFPT; BRR GTFN


*IF PROCESSING A STRING COMMAND GET THE TO SYSTEM NUMBER AND SET
*AND POINTERS FOR THE FROM AND TO FILE NAME STRINGS

SWITCH ZRO
LCHR   ZRO
FIXPT  ZRO; LDA LCHR; SNE =','; BRU FIXPT1; SKR SWITCH; BRU *-1
FIXPT1 LDA WORKPT; SKN SWITCH; SUB =1; STA PFFPT+1
       STA HPFFPT+1; BRR FIXPT
GSYSTO ZRO; LDP STGPT; STP WORKPT
GSYST1 GCI WORKPT; BRM GFNE1 (SYNTAX ERROR)
       SNE =':'; BRU GSYST2; SNE ='('; BRU GSYST5; STA LCHR; BRU GSYST1
GSYST2 BRM FIXPT
*ABOVE SETS UP ENDING POINTERS FOR FROM FILE NAME STRING
GSYSTX LDP HSICPT; STP SICPT
GSYST3 GCI WORKPT; BRU GSYST4
GSYS3A SNE =','; BRU GSYST4; SNE =')'; BRU GSYST4
       SNE ='*'; BRU GSYS3B
       SKG =31B; SKG =17B; BRU GSYSX1
GSYS3B WCI SICPT; BRU GSYST3
GSYST4 STA NFILSW; BRM GFN3D; LDA HSYS; SKG =0; BRU GFNE2; STA TSYS; LDA NFILSW
GSYS4A SKG =77B; BRU *+5
GSYST7 LDA =-1; STA PTFPT; STA HPTFPT; BRR GSYSTO; SKE =','; BRM GSYST8
       SKE =','; BRM GSYST9
       LDP WORKPT; STP PTFPT; STP HPTFPT; BRR GSYSTO
GSYST8 ZRO; GCI WORKPT; BRU GSYST7; BRR GSYST8
GSYST9 ZRO; LDA WORKPT; SUB =1; STA WORKPT; BRR GSYST9
GSYST5 BRM FIXPT
       LDP HTUPT; STP TUPT; SKR TUSRSW; BRU *-1
GSYST6 GCI WORKPT; BRM GFNE1; SNE =':'; BRU GSYSTX
       SNE =')'; BRU GSYSX; SNE =','; BRM GFNE1
       WCI TUPT; BRU GSYST6
GSYSX  LDA SYSNO; STA TSYS; GCI WORKPT; BRU GSYS4A; BRU GSYS3A
GSYSX1 CAB; LDA WORKPT; SUB =1; STA WORKPT; CBA; BRU GSYST4

*IF PROCESSING A STRING THE FOLLOWING IS USED TO GET THE NEXT FROM FILE NAME

GPFF   ZRO; LDP PFFPT; STP STGPT; SKE PFFPT+1; BRU GPFF1 (NOT ALL PROCESSED)
       CLA; STA STARSW; BRU RESET (RETURN TO COMMAND DISPATCHER)
GPFF1  LDP HFFPT; STP FPTR; SKR FMSW; BRU *-1; LDA =GPFF2; STA GFN
GPFF2  BRU GFN4; CLA; STA FMSW; LDP STGPT; STP PFFPT; LDP FPTR
       STP FFPT; BRM SPUBSW; BRR GPFF

*IF PROCESSING A STRING THE FOLLOWING IS USED TO GET THE NEXT TO FILE NAME

GPTF   ZRO; SKN PTFPT; BRU *+2; BRU GPTF2 (FROM AND TO NAMES THE SAME)
       LDP PTFPT; STP STGPT; LDP HTFPT; STP FPTR; LDA =GPTF1; STA GFN
GPTF1  BRU GFN4; LDP STGPT; STP PTFPT; LDP FPTR; STP TFPT; BRR GPTF
GPTF2  LDP FFPT; STP TFPT; BRR GPTF

STG    LDP WORKPT; SUB =1; STP STGPT
STGCMD LDA HSYS; STA FSYS
       SKR STARSW; BRU *-1; SKR PARSW; BRU *-1; LDP UPTR; STP FUPT
       STP TUPT; LDP STGPT; STP PFFPT; STP HPFFPT; BRM GSYSTO
       LDA FSYS; SKE SYSNO; BRU STGC4
       SKR DONOR; BRU *-1 (SET UP SWITCH TO PUSH FROM THIS SYSTEM)
*THE FOLLOWING IS THE RETURN POINT FOR PROCESSING 2ND AND SUBSQUENT FILES)
STGC4  BRM GPFF; BRM GPTF; BRU BEG1
GFNE1  ZRO; MSG ERR20 (SYNTAX ERROR); BRM CLEAR
       CLA; STA STARSW; BRU RESET
GFNE2  MSG ERR21; BRU GFNE1+2
GFNE3  MSG ERR33; BRU GFNE1+2

*ROUTINE TO OPEN AUX CHANNELS
OPCH   ZRO; LDA SYS; SNE SYSSW; BRU S370F (SAME SYSTEM)
OPCHX  BRM CLRCIR; LDA CIRCNT; SKE =0; BRU RESET (COULD NOT LOSE CIRCUIT)
       LDX =-1; BRS 168; LDA =NOCIR; STA INT5RT; BRM ARM5
       BRS 138; SKE =0; BRU NOSUP
       LDA USERBF; SKE =0; BRS 71; BRU OPCH8
       CBA; SKE =6B7; BRU OPCH8
       LDP USEPT; BRU *+2
OPCH8  LDP USERPT; LDX =1; BRS 35; LDA =':'; CIO =1
       LDA SYS; LDB =10; BRS 36
       LDA ='-'; CIO =1; BRS 138; SKE =0; BRU OPCHRT
       CXA; SKG =1; BRU BCIRN
       STX CI; EAX 1,2; STX CO; MIN CIRCNT
       LDA SYS; STA SYSSW
       LDA =CBOMB1; STA I10RTN; STA INT5RT; BRM ARM10
*SET 8 LVL INPUT AND OUTPUT AND SEND PROJECT CODE STRING
       LDA =4B7+400B; LDX CI; BRS 12; LDX CO; BRS 85
       SPTR PBUF; SKN PROJSW; LDP PROJPT; BRM WKSTG
*SEND PROGRAM STARTUP STRING IF REQUIRED
S370F  SKN PGMSW (DO WE HAVE PROGRAM)
       BRU NOPGM
       SKN TALKSW (YES, ARE WE IN TALK COMMAND)
       BRU *+2 (YES, QUIT PROGRAM)
       BRU OPCHEX (NO, EXIT)
       SKN NEWSW; BRU OPCHX
       LNKMSG QUICOD
       CLA; STA PGMSW (NO PROGRAM NOW)
       STA NEWSW (NOTHING IS NOT NEW)
       BRU OPCHEX
NOPGM  EQU *
       SKN TALKSW (NO, ARE WE IN TALK COMMAND)
       BRU OPCHEX (YES)
       LDA =CBOMB; STA I10RTN; STA INT5RT
       BRS 49; SKA =1B5; BRU *+2; BRM ARM5
       SKN 10SW; BRU NOT10; LDA =15B; CIO CO; LDP SLOGPT; BRU OPCHY
NOT10  SKN 370SW; BRU OPCHZ; LDP IPLPT
OPCHY  BRM WKSTG
OPCHZ  SKN 10SW; BRU OPCH37; LDP 10PGPT; BRU OPCH9
OPCH37 SKN 370SW; BRU OPCH94; LDP 370PGM; BRU OPCH9
OPCH94 LDP PGMPT
OPCH9  BRM WKSTG
OPRT1  BRM GC; SKE =1; BRU *-2; BRM GC; SKE =2; BRU OPRT1
       BRM GC; SKE =3; BRU OPRT1; BRM GC; SKE =4; HLT 0 (HAND SHAKE)
       BRM GSYSTYP
       LDA =1; CIO CO; LDA =2; CIO CO; LDA =3; CIO CO; LDA =4; CIO CO
       BRM SNDTYP (SEND MACHINE TYPE)
       SKN NEWSW (DON'T SEND CR TO NEW 370 SLAVE)
       SKN 370SW; BRU *+3; LDA =15B; CIO CO
       LDA =-1; STA PGMSW
OPCHEX BRM CLR5; MIN OPCH
       LDA =CBOMB1; STA I10RTN; STA INT5RT; BRM ARM10
OPCHRT BRR OPCH 
GC     ZRO; CIO CI
       ETR =177B
       BRR GC

SLOG   ASC 'SET LOGOUT'
SLOGPT DATA 3*SLOG-1,3*SLOG-1+10
10PGPT DATA 3*10STG-1,3*10STG-1+8
10STG  ASC 'R AUXMOX'
PGMPT  DATA 3*GOSTG-1,3*GOSTG-1+6
GOSTG  ASC 'AUXMOX SLAVE'
370PGM DATA 3*GOSTG-1,3*GOSTG-1+12
IPLSTG ASC 'CP TERM DISC OFF'
IPLPT  DATA 3*IPLSTG-1,3*IPLSTG-1+16
WKSTG 0
 STP WKPTR
 GCI WKPTR; BRU WKSTG1; BRM SCONV; CIO CO; BRU *-4
WKSTG1 LDA =15B; CIO CO; BRR WKSTG
WKPTR  BSS 2

SSYSSW 0; LDA SYS
        SKG =MAX940; SKG =MIN940-1; BRU SSW1; CLA; STA 10SW; STA 370SW
       BRR SSYSSW
SSW1   SKG =MAX10A; SKG =MIN10A-1; BRU SSW2A; CLA; STA 370SW; SKR 10SW; BRU *-1
       BRR SSYSSW
SSW2A  SKG =MAX10B; SKG =MIN10B-1; BRU SSW2; BRU SSW1+3
SSW2   CLA; STA 10SW; SKR 370SW; BRU *-1; BRR SSYSSW
CIRCNT ZRO
ARM5   ZRO; LDA INTMSK; MRG =1B5; STA INTMSK; LDB =180000 (THREE MINS)
       BRS 135; BRR ARM5
ARM5A  ZRO; LDA INTMSK; MRG =1B5; STA INTMSK; LDB =240000 (FOUR MINS)
       BRS 135; BRR ARM5A
ARM5B  ZRO; LDA INTMSK; MRG =1B5; STA INTMSK; LDB =120000 (TWO MINS)
       BRS 135; BRR ARM5B
ARM5C  ZRO; LDA INTMSK; MRG =1B5; STA INTMSK; LDB =3000 (3 SEC); BRS 135
       BRR ARM5C
CLR5 0
       LDA INTMSK; ETR =-1-1B5; STA INTMSK; BRS 78; BRR CLR5
INT5   ZRO TIMRT; BRU* INT5RT
NOCIR  LDA =7; BRU OPCHRT
ARM9 0; LDA =4B3; BRM ARMINT
ARM10 0; LDA =2B3; BRM ARMINT
CLR9 0; LDA =4B3; BRM DISARM
CLR10 0; LDA =2B3; BRM DISARM
DISARM 0
 LDX DISARM; LDB -2,2; STB DISARM
 EOR =-1; ETR INTMSK; STA INTMSK
 BRS 78; BRR DISARM
ARMINT 0
 LDX ARMINT; LDB -2,2; STB ARMINT
 MRG INTMSK; STA INTMSK
 BRS 78; BRR ARMINT
ZAPINT 0
 IF TESTNG
 BRM CRASH
 ENDF
 BRU* I10RTN
INT10  ZRO I10PC
       CLA
       STA CIRCNT
       BRU* I10RTN
I10PC  ZRO
I10RTN ZRO
NOSUP  LDA =5; BRR OPCHRT
BCIRN  LDA =8; BRU OPCHRT
CBOMB MSG ERR48
CHLOSS EQU *
CBOMB1 LDX =-1; BRS 86
 MSG CBMSG; LDA SYS; BRM TDNO; MSG CBMSG1; BRM CLRCIR; BRU RESET
CBMSG  ASC '$CIRCUIT LOST TO SYSTEM /'
CBMSG1 ASC '$CURRENT OPERATION ABORTED$/'
PROJPT DATA 3*PROSTG-1,3*PROSTG-1
PROSTG BSS 30
USERPT DATA 3*UNAME-1,3*UNAME-1
UNAME  BSS 6
*ESCAPE ROUTINES
ARM1   ZRO; LDA INTMSK; MRG =2B6; STA INTMSK; BRS 78; BRR ARM1
CLR1   ZRO; LDA INTMSK; ETR =-1-2B6; STA INTMSK; BRS 78; BRR CLR1
ESCAPE ZRO ESCPC; BRU* ESCRTN
ESCPC  ZRO
ESCRTN ZRO
PANIC1 BRM CLTIO; BRU RESET
PANIC  BRM CLTIO; BRM CLRCIR; BRU RESET
CLTIO 0
 LDX =-1; BRS 29; BRS 11; BRM CLR9
 BRR CLTIO
RDNO   ZRO; LDB =10; LDX CIN; BRS 38; BRR RDNO
SOPSW  ZRO; SKR OPER; BRU *-1; SKR SUPER; BRU *-1; BRR SOPSW
SSPSW  ZRO; SKR SUPER; BRU *-1; BRR SSPSW
ERR2   ASC '$IT IS ILLEGAL TO ATTEMPT TO COPY FILE: /'
ERR5   ASC '$UNABLE LOCATE "COPY FROM" FILE : /'
ERR6   ASC '$UNABLE OPEN "COPY FROM" FILE: /'
ERR7   ASC '$USERS NOT IN SAME ACCOUNT$/'
ERR8   ASC '$DECLARED NOT READABLE/'
ERR9   ASC '$DECLARED PROPRIETARY/'
ERR10  ASC '$WRITE PROTECTED/'
ERR11  ASC '$FILE BAD/'
ERR12  ASC '$CANNOT OPEN "COPY TO" FILE: /'
ERR16  ASC '$"COPY FROM" USER NAME INVALID$/'
ERR17  ASC '$"COPY TO" USER NAME INVALID$/'
ERR20  ASC '$SYNTAX ERROR - PLEASE TYPE INSTRUCTIONS$/'
ERR21  ASC '$INVALID SYSTEM NUMBER$/'
ERR24  ASC '$SYSTEM UNAVAILABLE$/'
ERR26  ASC '$UNABLE LOG INTO SYSTEM /'
ERR35  ASC '$FILE NAME /'
M1     ASC '$COPY FROM FILE: /'
M2     ASC '$COPY TO FILE: /'
M3     ASC '$OKAY TO WRITE ON OLD FILE? /'
M4     ASC '$COPIED /'
M5     ASC '$COPY STARTING/'
M6     ASC '$ENTER PROJECT CODE: /'
M7     ASC ') CHARS. TRANSMITTED$/'
M8     ASC ') CHARS. PER SEC$/'
M11    ASC '$UPDATED /'
M12    ASC '$UPDATING STARTED/'
M15    ASC ' SYSTEM /'
M16    ASC 'TO$/'
BUFFER EQU 24000B
SWORD  ZRO; CAB; LDX =-3; CLA; LSH 8; CIO CO; BRX *-3; BRR SWORD
GWORD  ZRO; SKN 370SW; BRU *+2; BRU 370GWD
       CLB; CIO CI; LSH 16; STA TWORD; CIO CI; LSH 8
       ADM TWORD; CIO CI; MRG TWORD; BRR GWORD
370GWD CLB; CIO CI; BRM CK252; ETR =177B; LSH 16; STA TWORD
       CIO CI; BRM CK252; ETR =177B; LSH 8; ADM TWORD
       CIO CI; BRM CK252; ETR =177B; MRG TWORD; BRR GWORD
CK252  ZRO; SKE =252B; BRR CK252; CIO CI; MIN CK252; BRR CK252
370SC  ZRO; CAB; LDA =252B; CIO CO; CBA; CIO CO; LDA =15B; CIO CO
       MIN 370SC; BRR 370SC
*REQUEST SLAVE TO GFD
GFD 0
GFD3   BRM GWORD; ETR =1777777B; STA SGAN (GAN ON SLAVE)
       BRM GWORD; SKN DONOR; BRU *+3; STA TFDPT; BRU GFD4; STA FFDPT
GFD4   BRM GWORD; STA SUUN (UNIV USER NO. ON SLAVE)
       MIN GFD; BRR GFD (SUCCESSFUL)
GFDER1 LDA TSYS; BRM TDNO; BRU ABORT
INVUN  MSG ERR15 (INVALID USER ON SYSTEM (N))
       BRU GFDER1
*INPUT FILE ERROR ROUTINES
NINPF  MSG ERR5 (UNABLE LOCATE)
NINPF1 LDP FFPT; LDX =1; BRS 35; TCO =155B; BRU ABORT
NINPF3 LDP TFPT; BRU NINPF1+1
INPERR MSG ERR6 (UNABLE OPEN)
       BRU NINPF1
*CHECK IF INPUT FILE IS LEGAL TO COPY
CKLGL 0
       SKN OPER; BRU *+2; BRR CKLGL (NO PROTECT OPER OR ABOVE)
       SKN GPUBSW; BRU *+2; BRR CKLGL (FILE GLOBAL PUBLIC)
       SKN DONOR; BRU *+2; BRU CKLGL2
       LDA SGAN; SKE CGAN; BRU LGLER1 (NOT SAME ACCOUNT)
CKLGL2 LDA FDWD2               (ATTRIBUTES OF INPUT FILE)
       SKA =4B2; BRU LGLER2 (FILE DEC NOT READABLE)
       SKA =2B1; BRU *+2; BRR CKLGL; SKN DONOR; BRU *+2
       BRU CKLGL1; LDA CUNO; SKE SUUN
       BRU LGLER3 (FILE PROP.); BRR CKLGL
CKLGL1 LDA CUNO; SKE FUNO; BRU LGLER3; BRR CKLGL
LGLER1 MSG ERR7 (NOT SAME ACCT)
       BRU ABORT
LGLER2 MSG ERR8 (FILE DEC NOT READABLE); BRU INPERR
* PROPRIETARY FILES MUST BE SAME USER
LGLER3 MSG ERR9 (FILE PROP); BRU INPERR
*CHECK IF LEGAL TO WRITE ON OUTPUT FILE AND GET OKAY IF OLD FILE
PULL 0
 CLA
 STA OFDWD2
 LDP TFPT
 BRS 48
 BRR PULL
 MIN PULL
 LDB =OFDBUF
 LDX =5
 BRS 96
 BRM CKOLGL
 BRR PULL
CKOLGL ZRO
       SKN INSTSW; BRU *+2; BRU CKOL3
       LDA OFDWD2; SKA =4B7; BRU OLGLE2
       SKA =2B2; BRU OLGLE1
CKOL3  LDA CIN; LDB ASK; SKG =0; SKB =-1; BRU *+2; MSG M3
       LDA ASK; SKE =0; BRU CHKO
       BRM CLBUF; BRM YN; BRU ABORT
CKOL4  SKR UPDSW; BRU *-1
       BRR CKOLGL
CHKO   EAX CHKM1 (REPLACING FILE)
 SKN ASK
 EAX CHKM2 (KEEPING FILE)
 MSG 0,2
 LDP TFPT
 LDX =1
 BRS 35
 MSG M15 (SYSTEM)
 LDA TSYS
 BRM TDNO
 TCO =155B
 SKN ASK
 BRU ABORT (KEEP FILE)
 BRU CKOL4 (WRITE OVER IT)
CHKM1 ASC '$REPLACING FILE /'
CHKM2 ASC '$KEEPING FILE /'
OLGLE1 MSG ERR10 (WRITE PROTECTED); MSG ERR12; BRU NINPF3
OLGLE2 MSG ERR11 (OUTPUT FILE BAD); MSG ERR12; BRU NINPF3
*CLOSE CIRCUITS ROUTINE
CLRCIR 0
 BRS 147; BRM CLR5; BRM CLR9; BRM CLR10
       LDA CIRCNT; SNE =0; BRU 370GON
       LDA SYSSW; SKG =MAX940; SKG =MIN940-1; BRU 370CC
370GON BRS 156
 CLA; STA 940SW; STA SYSSW; STA CIRCNT; BRU 370CD

*370 AND PDP-10 CLEAR CIRCUIT ROUTINE

370CC  SKN PGMSW (DO WE HAVE A PROGRAM)
       BRU *+2 (NO)
       BRU 370GON (YES, SET DISCONNECT HAS BEEN DONE.  JUST SEND ZAPPER)
       MSG CONN1 (CONNECTION REMAINS)
       LDA SYSSW; BRM TDNO
       MSG CONN2 (USE TALK)
       CLA
370CD  STA NEWSW (NOTHING IS NOT NEW)
       STA PGMSW (NO PROGRAM)
       BRR CLRCIR
CONN1 ASC '$CONNECTION REMAINS TO SYSTEM /'
CONN2 ASC '--USE TALK COMMAND TO LOGOUT$/'

*GET FD ATTRIBUTES FROM SLAVE FILE.
* X=FDWD0 FOR SEND FILE OR OFDWD0 FOR RECEIVE FILE
GFT 0
       BRM GWORD; STA 0,2; BRM GWORD; STA 1,2; BRM GWORD; STA 2,2
 BRR GFT
*TYPE AN DECIMAL NUMBER
TDNO   ZRO; LDX =1; LDB =10; BRS 36; BRR TDNO
*ERROR ROUTINES FOR CIRCUIT OPENING CODE

NOCHAN CAX; EXU NCH,2
NCH    HLT 0
       BRU CHBYE; BRU PROGE; BRU SYSE; BRU SYSDWN; BRU SUPDWN
       BRU CHBYE; BRU CHBYE; BRU SUPDWN; HLT 0
PROGE  MSG ERR22 (PROGRAM ERROR)
       BRM CLRCIR; BRS 10
SYSE   MSG ERR23 (SYSTEM ERROR)
       BRU PROGE+1
SYSDWN MSG ERR24 (SYSTEM UNAVAILABLE)
       BRU CHBYE
SUPDWN MSG ERR25 (SUPERVISOR INOPERATIVE)
       BRU PROGE+1
CHBYE  BRM CLR5; MSG ERR26 (UNABLE LOG INTO SYSTEM )
       LDA SYS; BRM TDNO; TCO =155B; BRS 147; BRM CLRCIR; BRU RESET
*YES-NO ROUTINE
YN     ZRO; SKR YNSW; BRU *-1; CIO CIN; SKE ='Y'; BRU *+3; MIN YN; BRU YN1
       SNE ='N'; BRU YN1; LDA CIN; SKE =0; BRU CINERR
       MSG YON; LDX =-1; BRS 11; BRU YN+1
YN1    CIO CIN; SKE =155B; BRU *-2; BRR YN
YON    ASC "$PLEASE TYPE 'Y' OR 'N': /"
CINERR MSG ERR19; BRS 17; BRU QUI

PROJSW ZRO
*TIME ROUTINES
TINIT 0
 BRS 42; STA STIME; CLA; STA TRTOT
 BRR TINIT

ADIAG 0
 LDA ADIAG; STA BDIAG
 EAX DIAG9 ('$BEGIN RANK/')
 BRU *+3
BDIAG 0
 EAX DIAG10 ('$BEGIN DUPLICATE/')
 SKN VERBOSE; BRR BDIAG; MSG 0,2
 MSG DIAG11 (' COMPRESSED DATA RECORD, /')
 LDA TMODE; CAX; SKG =4; SKG =2; BRU BDIAG1
 LDA TPARAM; SKE RPARAM; BRU BDIAG3; LDX TMODE
 SKA =377B; SNE =SMODE; EAX 4,2
 SNE =NATIVE; EAX 6,2; CXA; SKG =4; BRU BDIAG3
BDIAG1 MSG* DIAGT,2
 MSG DIAG12 (' MODE/')
BDIAG2 TCO =155B; BRR BDIAG
BDIAG3 MSG* DIAGT,2
 MSG DIAG13 (' MODE$  BLOCKING FILL BYTESIZE$TRANS.   /')
 BRM BDIAG4
 NOP TPARAM
 MSG DIAG14 ('REC.     /')
 BRM BDIAG4
 NOP RPARAM
 BRU BDIAG2
BDIAG4 0
 LDX BDIAG4; LDA* 1,2; STA T
 RSH 1; ETR =17B; ADD =1; BRM TDNO
 LDA T; EAX DIAG15 ('    R        /')
 SKA =1; EAX DIAG16 ('    L        /')
 MSG 0,2
 LDA T; RSH 5; ETR =7; ADD =1; BRM TDNO
 TCO =155B
 BRR BDIAG4

DIAGT EQU *-1
 DATA DIAG1,DIAG2,DIAG3,DIAG4,DIAG5,DIAG6,DIAG7,DIAG8,DIAG8A,DIAG8B
DIAG1 ASC 'ASCII/'
DIAG2 ASC 'EBCDIC/'
DIAG3 ASC 'BINARY/'
DIAG4 ASC 'BINARY UPDATE/'
DIAG5 ASC 'KATAKANA/'
DIAG6 ASC 'IMAGE/'
DIAG7 ASC 'SERIAL/'
DIAG8 ASC 'SERIAL UPDATE/'
DIAG8A ASC 'NATIVE/'
DIAG8B ASC 'NATIVE UPDATE/'

DIAG9 ASC '$BEGIN RANK/'
DIAG10 ASC '$BEGIN DUPLICATE/'
DIAG11 ASC ' COMPRESSED DATA RECORD, /'
DIAG12 ASC ' MODE/'
DIAG13 ASC ' MODE$  BLOCKING FILL BYTESIZE$TRANS.   /'
DIAG14 ASC 'REC.     /'
DIAG15 ASC '    R        /'
DIAG16 ASC '    L        /'

PRDAT 0
 MSG PRDAT1
 BRS 42; CBX; RSH 23; DIV =60; STA T (SECONDS SINCE STARTUP); CXA
 ETR =177777B; MUL =60; LSH 23; ADD T (A NOW CONTAINS SECS SINCE START OF MONTH)
 RSH 23; DIV =1440*60; CBA; RSH 23; DIV =60*60; BRM T2DEC; RSH 23
 DIV =60; BRM T2DEC; BRM T2D
 BRR PRDAT
PRDAT1 ASC ' AT /'
T2D 0
 SKG =9; TCO =20B
 BRM TDNO; BRR T2D
T2DEC 0
 STB T; BRM T2D; TCO ="  :"; LDA T; BRR T2DEC

CKTIM 0
 SKN VERBOSE; BRU CKTIM1
 MSG CKTIM3
 BRM PRDAT
 BRU CKTIM2
CKTIM1 SKN TIMSW; BRR CKTIM
CKTIM2 BRS 42; STA ETIME; BRM PRTIME; BRR CKTIM
CKTIM3 ASC '$CHECKPOINT/'

PRTIME 0
 TCO =155B; LDA CCNT; BRM TDNO; MSG LP; LDA TRTOT; BRM TDNO
 MSG M7 (') CHARS. TRANSMITTED$/')
 LDA TMODE; SKE =4; SKN TIMSW; BRR PRTIME
 LDA ETIME; SUB STIME; LRSH 23; DIV =60; XAB; SKG =30; BRU *+2; BRM ADJ; XAB
 SKG =0; BRR PRTIME; STA TEMP
 LDA CCNT; RSH 23; DIV TEMP; SKG =77B; BRR PRTIME
 BRM TDNO; MSG LP; LDA TRTOT; RSH 23; DIV TEMP; BRM TDNO
 MSG M8 (') CHARS. PER SEC$/')
 BRR PRTIME
LP ASC ' (/'

STIME  ZRO
ADJ    ZRO; XAB; ADD =1; XAB; BRR ADJ
$TEMP 0
UDIST  ZRO
DIST   ZRO
INSTSW ZRO
CONTSW ZRO
GFNSW  ZRO
LVER    ZRO
       BRS 71; BRU LVER1A; SKR STASW; BRU *-1
       SKR INSTSW; BRU *-1; BRU LVER1B
LVER1A LDA =1; LDX =1; BRS 141
        LDP SFPTR; BRS 48; BRU ERV1; LDB =SFBUF
       LDX =4; BRS 96; LDA =4; SKA SFBUF+3; BRU *+2; BRU ERV2
       LDP SFPTR; BRS 64; BRU OPFER; STA PSFIL; CLA; SCP PSFIL; HLT 0
LVER1B  MSG VM1 (ENTER NAME)
       LDA VPTR1; STA VPTR1+1; LDA =VPTR1; LDB =155B; CLX; BRS 33
       SKN STASW; BRU *+2; BRR LVER
       LDA VPTR1+1; SUB VPTR1; STA VT1
LVER1   CIO PSFIL; SKE =137B; BRU *+2; BRU NONAME
       SKE =155B; BRU LVER1; CIT PSFIL; BRU *+2; BRU NONAME
       LDA VPTR2; STA VPTR2+1; LDA =VPTR2; LDB =155B
       LDX PSFIL; BRS 33; LDA VPTR2+1; SUB VPTR2
       SKG =0; BRU NONAME; SKE VT1; BRU LVER1
       LDP VPTR2; SKSE VPTR1; BRU LVER1; GCI VPTR1; HLT 0
       SKR VPTR1; NOP; STA VXT8; BRM FONO; SKA =40000B
       BRU *+2; BRU ERV3; SKA =1B7; BRU *+2; BRU ERV3
       SKA =1B6; BRM SINST
       NOP 0; ETR =377B; STA DIST
       BRM FONO; STA VT1; BRM FONO; STA VT2; LDA PSFIL; BRS 20
       LDX =-1; LDA =3; BRS 12; MSG VM2 (ENTER YOUR PASSWORD PLEASE)
SGPS   LDP TERMWD; STP VXT1; STP VXT3; STB VXT5
       CLA; STA TLV1; LDA VXT8; ADM VXT3
GPS    LDA =20; STA TLV11
GPS1   LDX TLV1; LDA VXT1,2; MUL =6065B
       DIV =37777761B; CBA; ADD VXT2,2; CAB; ETR =3
       STA TLV1; LDA VXT1,2; XAB; STP VXT1,2; LDA VXT5
       XMA VXT1; STA VXT5; SKR TLV11
       BRU GPS1; CIO =0; SKE =155B; BRU *+2; BRU *+3
       ADM VXT1; BRU GPS
       LDX =-1; LDA =4B4; BRS 12
       LDA VXT1; ADD VXT2; SKE VT1; BRU NOPASS; LDA VXT3; ADD VXT4
       SKE VT2; BRU NOPASS; TCO =155B; SKR OPER; BRU *-1; BRR LVER

FONO   ZRO; LDB =8; LDX PSFIL; BRS 38; BRR FONO

NOPASS MSG VME5; LDX =-1; LDA =3; BRS 12; BRU SGPS

NONAME MSG VME6; BRU RESET
SINST  ZRO; SKR INSTSW; BRU *-1; BRR SINST


TERMWD DATA 27657537B,55555555B

SFPTR  DATA 3*SF-1,3*SF+5
SF     ASC '()PSWD'
VPTR1   DATA 3*OPNAM-1,3*OPNAM-1
OPNAM  BSS 20
VPTR2   DATA 3*BUF2-1,3*BUF2-1
BUF2   BSS 20
SFBUF  BSS 20
VT1    ZRO
VT2    ZRO
VXT1   ZRO
VXT2   ZRO
VXT3   ZRO
VXT4   ZRO
VXT5   ZRO
VXT8   ZRO
PSFIL   ZRO
ERV1   MSG VME1
ERV    MSG VME; BRU RESET
ERV2   MSG VME2; BRU ERV
OPFER  MSG VME3; BRU RESET
ERV3   MSG VME4; BRU RESET

VM1    ASC '$YOUR NAME: /'
VM2    ASC '$YOUR PASSWORD: /'
VME5   ASC '$ERROR, TYPE PASSWORD /'
VME6   ASC '$NAME DOES NOT APPEAR IN PASSWORD FILE$/'
STASW  ZRO
TLV1   ZRO
TLV11  ZRO
SET    BRS 39; SKA =4B7; BRU SET1; TCO ='?'; BRU RESET
SET1   BRM LVER; BRU RESET
COPFIN ZRO; LDA =155B; CIO =1; LDP FFPT; LDX =1; BRS 35
       MSG M15 (SYSTEM); LDA FSYS
       BRM TDNO
       SKN UPDSW; BRU COPF2; MSG M11 (UPDATED); BRU *+2
COPF2  MSG M4 (COPIED); LDP FFPT; SKSE TFPT; BRU *+2
       BRU COPF3; MSG M16 (TO); SKR TOSW; BRU *-1
       LDP TFPT; LDX =1; BRS 35
COPF3  SKN TOSW; MSG M16 (TO); MSG M15
       LDA TSYS; BRM TDNO
       CLA; STA TOSW; LDA =155B; CIO =1; BRR COPFIN

*CONVERT TO EXTERNAL ASCII

SCONV  ZRO; SKG =137B; BRU *+3; SUB =140B; BRR SCONV
       ADD =40B; BRR SCONV

CONVER ZRO; SKG =37B; BRU *+3; SUB =40B; BRR CONVER; ADD =140B; BRR CONVER



*SCREEN FILE NAME TO OR FROM 370 FOR *'S  AS NO WILD CARDS ALLOWED

VFILE 0
 LDP TUPT; SKN DONOR; LDP FUPT; SKSE USERPT; BRU INVUN
       LDP TFPT; SKN DONOR; LDP FFPT; STP VFPTR
       GCI VFPTR; BRR VFILE (OKAY); SKE ='*'; BRU *-3
       MSG ERR35; LDP TFPT; SKN DONOR; LDP FFPT; LDX =1; BRS 35
       MSG ERR34; BRU RESET
VFPTR  BSS 2
       END
TELECOPY ** FICHE/FRAME BREAK *****
TELCOP23 SYMSORT

SYM.  PG.LN. IDENT.

10HBPT  9  1 TELCOP  10PGPT 16 12 TELCOP  10STG  16 13 TELCOP  370CC  21 20 TELCOP  
370CD  21 27 TELCOP  370CNT  9 16 TELCOP  370GON 21 15 TELCOP  370GWD 19 10 TELCOP  
370PGM 16 16 TELCOP  370SC  19 14 TELCOP  ABORT   8  3 TELCOP  
ABT     8  5 TELCOP  ADIAG  22 31 TELCOP  ADJ    25  5 TELCOP  ALB     4 23 TELCOP  
ARM1   18  3 TELCOP  ARM10  17  7 TELCOP  ARM5   16 33 TELCOP  ARM5A  16 35 TELCOP  
ARM5B  16 37 TELCOP  ARM5C  16 39 TELCOP  ARM9   17  6 TELCOP  ARMINT 17 14 TELCOP  
ASK    10 34 TELCOP  ASKIT   4 30 TELCOP  BCIRN  17 30 TELCOP  BDIAG  22 35 TELCOP  
BDIAG1 23  4 TELCOP  BDIAG2 23  6 TELCOP  BDIAG3 23  7 TELCOP  BDIAG4 23 15 TELCOP  
BEG1    6  9 TELCOP  BEG2A   6 30 TELCOP  BEG3A   7  4 TELCOP  BEGE1   6 32 TELCOP  
BEGE2   6 34 TELCOP  BEGE3   7  7 TELCOP  BEGE4   7  9 TELCOP  BEGIN   6  5 TELCOP  
BEGIN2  6 17 TELCOP  BEGIN3  6 36 TELCOP  BEGIN4  7 10 TELCOP  BEGIN6  7 12 TELCOP  
BEGIN7  7 28 TELCOP  BFRPT   9 13 TELCOP  BLNK    5  1 TELCOP  BLNKSW  5  6 TELCOP  
BLNO    9  6 TELCOP  BLX     9 32 TELCOP  BTBLND  4  3 TELCOP  BUF2   26 24 TELCOP  
BUFCUR  9  2 TELCOP  BUFFER 19  5 TELCOP  CAP     4  5 TELCOP  CBFRPT  9 14 TELCOP  
CBMSG  17 35 TELCOP  CBMSG1 17 36 TELCOP  CBOMB  17 31 TELCOP  CBOMB1 17 33 TELCOP  
CFDIR  10 31 TELCOP  CGAN   10 28 TELCOP  CHA     4  8 TELCOP  CHBYE  22 15 TELCOP  
CHCNT   9 15 TELCOP  CHCNTT  8 37 TELCOP  CHECK   9 17 TELCOP  CHK     3 33 TELCOP  
CHKM1  21  6 TELCOP  CHKM2  21  7 TELCOP  CHKO   20 31 TELCOP  CHLOSS 17 32 TELCOP  
CI     10 36 TELCOP  CIN    10 33 TELCOP  CINERR 22 23 TELCOP  CIRCNT 16 32 TELCOP  
CK252  19 13 TELCOP  CKDIST  6 27 TELCOP  CKLGL  19 32 TELCOP  CKLGL1 20  3 TELCOP  
CKLGL2 19 37 TELCOP  CKOL3  20 26 TELCOP  CKOL4  20 29 TELCOP  CKOLGL 20 22 TELCOP  
CKPUB   6 25 TELCOP  CKSLGL  7 36 TELCOP  CKTIM  24 22 TELCOP  CKTIM1 24 27 TELCOP  
CKTIM2 24 28 TELCOP  CKTIM3 24 29 TELCOP  CLBUF  11  2 TELCOP  CLEAR   2 27 TELCOP  
CLEAR1  2 30 TELCOP  CLEND  10 26 TELCOP  CLEND1 10 15 TELCOP  CLR1   18  4 TELCOP  
CLR10  17  9 TELCOP  CLR2    8 11 TELCOP  CLR5   17  2 TELCOP  CLR9   17  8 TELCOP  
CLRCIR 21 11 TELCOP  CLSTR   8 28 TELCOP  CLTIO  18 10 TELCOP  CO     10 37 TELCOP  
CONF1   5 25 TELCOP  CONF2   5 26 TELCOP  CONF3   5 27 TELCOP  CONF4   5 20 TELCOP  
CONFIR  5 14 TELCOP  CONN1  21 30 TELCOP  CONN2  21 31 TELCOP  CONTSW 25 10 TELCOP  
CONVER 27 27 TELCOP  COPF2  27 15 TELCOP  COPF3  27 18 TELCOP  COPFIN 27 11 TELCOP  
CPTOP  10  8 TELCOP  CTBL    3 38 TELCOP  CTBLND  3 39 TELCOP  CUNO   10 32 TELCOP  
CURBUF  9  3 TELCOP  CURPOS 10 14 TELCOP  DIAG1  23 27 TELCOP  DIAG10 23 39 TELCOP  
DIAG11 24  1 TELCOP  DIAG12 24  2 TELCOP  DIAG13 24  3 TELCOP  DIAG14 24  4 TELCOP  
DIAG15 24  5 TELCOP  DIAG16 24  6 TELCOP  DIAG2  23 28 TELCOP  DIAG3  23 29 TELCOP  
DIAG4  23 30 TELCOP  DIAG5  23 31 TELCOP  DIAG6  23 32 TELCOP  DIAG7  23 33 TELCOP  
DIAG8  23 34 TELCOP  DIAG8A 23 35 TELCOP  DIAG8B 23 36 TELCOP  DIAG9  23 38 TELCOP  
DIAGT  23 25 TELCOP  DISARM 17 10 TELCOP  DIST   25  8 TELCOP  DPU     4 25 TELCOP  
EBFRPT  9 18 TELCOP  EOFSW   9 19 TELCOP  ERCNT   9 20 TELCOP  ERFLG  10 13 TELCOP  
ERMSG   5 39 TELCOP  ERR     3 36 TELCOP  ERR10  18 22 TELCOP  ERR11  18 23 TELCOP  
ERR12  18 24 TELCOP  ERR16  18 25 TELCOP  ERR17  18 26 TELCOP  ERR2   18 16 TELCOP  
ERR20  18 27 TELCOP  ERR21  18 28 TELCOP  ERR24  18 29 TELCOP  ERR26  18 30 TELCOP  
ERR35  18 31 TELCOP  ERR5   18 17 TELCOP  ERR6   18 18 TELCOP  ERR7   18 19 TELCOP  
ERR8   18 20 TELCOP  ERR9   18 21 TELCOP  ERRCNT  8 31 TELCOP  ERV    26 36 TELCOP  
ERV1   26 35 TELCOP  ERV2   26 37 TELCOP  ERV3   26 39 TELCOP  ESCAPE 18  5 TELCOP  
ESCPC  18  6 TELCOP  ESCRTN 18  7 TELCOP  FDLUDL 10 29 TELCOP  FDWD0   9 37 TELCOP  
FDWD1   9 38 TELCOP  FDWD2   9 39 TELCOP  FFDPT   9  7 TELCOP  FFPT    8 22 TELCOP  
FGAN    9  8 TELCOP  FGFN   12 28 TELCOP  FIX     5 10 TELCOP  FIXPT  13 14 TELCOP  
FIXPT1 13 15 TELCOP  FMFIL  10 20 TELCOP  FMSW    8 38 TELCOP  FNI     9 21 TELCOP  
FNO     9 22 TELCOP  FONO   26  9 TELCOP  FPTR   10 23 TELCOP  FRECL   5  9 TELCOP  
FSYS   10 18 TELCOP  FTYPE  10  9 TELCOP  FUNO    9  9 TELCOP  FUPT    8 18 TELCOP  
FUSER  10 16 TELCOP  GC     16  6 TELCOP  GE1    11  9 TELCOP  GE2    11 11 TELCOP  
GE3    11 15 TELCOP  GENTRY 11  6 TELCOP  GETYN   2 33 TELCOP  GETYN1  2 38 TELCOP  
GETYN2  2 34 TELCOP  GFD    19 17 TELCOP  GFD3   19 18 TELCOP  GFD4   19 20 TELCOP  
GFDER1 19 22 TELCOP  GFFN   12 30 TELCOP  GFN    11 19 TELCOP  GFN1   11 23 TELCOP  
GFN2   11 26 TELCOP  GFN3   11 29 TELCOP  GFN3A  11 30 TELCOP  GFN3A1 11 33 TELCOP  
GFN3B  11 35 TELCOP  GFN3C  11 34 TELCOP  GFN3D  11 28 TELCOP  GFN4   11 37 TELCOP  
GFN41  11 38 TELCOP  GFN42  12  2 TELCOP  GFN43  12  4 TELCOP  GFN5   12  5 TELCOP  
GFN6   12  6 TELCOP  GFN7   12  7 TELCOP  GFNE1  14 27 TELCOP  GFNE2  14 29 TELCOP  
GFNE3  14 30 TELCOP  GFNSW  25 11 TELCOP  GFT    21 35 TELCOP  GLTCH   3  5 TELCOP  
GOSTG  16 15 TELCOP  GPFF   14  6 TELCOP  GPFF1  14  8 TELCOP  GPFF2  14  9 TELCOP  
GPS    25 37 TELCOP  GPS1   25 38 TELCOP  GPTF   14 14 TELCOP  GPTF1  14 16 TELCOP  
GPTF2  14 17 TELCOP  GPUBSW  9 34 TELCOP  GSYS3A 13 24 TELCOP  GSYS3B 13 27 TELCOP  
GSYS4A 13 29 TELCOP  GSYST1 13 18 TELCOP  GSYST2 13 20 TELCOP  GSYST3 13 23 TELCOP  
GSYST4 13 28 TELCOP  GSYST5 13 35 TELCOP  GSYST6 13 37 TELCOP  GSYST7 13 30 TELCOP  
GSYST8 13 33 TELCOP  GSYST9 13 34 TELCOP  GSYSTO 13 17 TELCOP  GSYSTX 13 22 TELCOP  
GSYSX  14  1 TELCOP  GSYSX1 14  2 TELCOP  GTEMP   9  5 TELCOP  GTFN   12 38 TELCOP  
GTFN2  13  3 TELCOP  GTSTG  12 13 TELCOP  GTSTG1 12 14 TELCOP  GTSTG2 12 18 TELCOP  
GWDC    9 23 TELCOP  GWORD  19  7 TELCOP  HBFRPT  9 24 TELCOP  HEL     5 28 TELCOP  
HFCHCT  8 32 TELCOP  HFFPT   8 20 TELCOP  HFUPT   8 16 TELCOP  HGWDC   9 25 TELCOP  
HPFFPT  8 24 TELCOP  HPTFPT  8 25 TELCOP  HSHFCT  8 33 TELCOP  HSICPT 12 19 TELCOP  
HSTGPT 12 20 TELCOP  HSWDC   9 26 TELCOP  HSYS   10 24 TELCOP  HTCHCT  8 34 TELCOP  
HTFPT   8 21 TELCOP  HTUPT   8 17 TELCOP  I10PC  17 27 TELCOP  I10RTN 17 28 TELCOP  
IBP    10  1 TELCOP  IFDBUF  9 36 TELCOP  IN1     3  7 TELCOP  IN1A    4  4 TELCOP  
IN2     3 13 TELCOP  IN3     3 16 TELCOP  IN4     3 19 TELCOP  IN4A    3 20 TELCOP  
IN5     3 24 TELCOP  IN6     3 26 TELCOP  INPERR 19 29 TELCOP  INS     4  6 TELCOP  
INSTSW 25  9 TELCOP  INT10  17 23 TELCOP  INT5   17  4 TELCOP  INTMSK 10 35 TELCOP  
INVUN  19 23 TELCOP  IPLPT  16 18 TELCOP  IPLSTG 16 17 TELCOP  KEEP    4 29 TELCOP  
LBLKCT  9 27 TELCOP  LCHR   13 13 TELCOP  LGLER1 20  4 TELCOP  LGLER2 20  6 TELCOP  
LGLER3 20  8 TELCOP  LOWSW   5 35 TELCOP  LP     25  2 TELCOP  LUDBUF  1 32 TELCOP  
LUDL   10 30 TELCOP  LVER   25 12 TELCOP  LVER1  25 23 TELCOP  LVER1A 25 15 TELCOP  
LVER1B 25 19 TELCOP  M1     18 32 TELCOP  M11    19  1 TELCOP  M12    19  2 TELCOP  
M15    19  3 TELCOP  M16    19  4 TELCOP  M2     18 33 TELCOP  M3     18 34 TELCOP  
M4     18 35 TELCOP  M5     18 36 TELCOP  M6     18 37 TELCOP  M7     18 38 TELCOP  
M8     18 39 TELCOP  MAX10A  1 28 TELCOP  MAX10B  1 30 TELCOP  MAX940  1 26 TELCOP  
MIN10A  1 29 TELCOP  MIN10B  1 31 TELCOP  MIN940  1 27 TELCOP  NBUFSW  9  4 TELCOP  
NCH    22  4 TELCOP  NEWSYS  3 27 TELCOP  NFILSW  8 29 TELCOP  NINPF  19 26 TELCOP  
NINPF1 19 27 TELCOP  NINPF3 19 28 TELCOP  NO      4 18 TELCOP  NOBLNK  5  2 TELCOP  
NOCHAN 22  3 TELCOP  NOCIR  17  5 TELCOP  NONAME 26 13 TELCOP  NOPASS 26 11 TELCOP  
NOPGM  15 22 TELCOP  NOSUP  17 29 TELCOP  NOT10  15 28 TELCOP  NOTRU   4 38 TELCOP  
NOUPDA  4 32 TELCOP  NOVERB  4 35 TELCOP  NSERR   3 32 TELCOP  NSYSSW 11 18 TELCOP  
OFDBUF 10  3 TELCOP  OFDWD0 10  4 TELCOP  OFDWD1 10  5 TELCOP  OFDWD2 10  6 TELCOP  
OFFF    5 34 TELCOP  OIBP   10  7 TELCOP  OLDAB1  8  9 TELCOP  OLDAB2  8 10 TELCOP  
OLDABT  8  8 TELCOP  OLGLE1 21  8 TELCOP  OLGLE2 21  9 TELCOP  ONL     5 33 TELCOP  
OPCH   14 33 TELCOP  OPCH37 15 31 TELCOP  OPCH8  15  1 TELCOP  OPCH9  15 33 TELCOP  
OPCH94 15 32 TELCOP  OPCHEX 16  3 TELCOP  OPCHRT 16  5 TELCOP  OPCHX  14 34 TELCOP  
OPCHY  15 29 TELCOP  OPCHZ  15 30 TELCOP  OPER   11  1 TELCOP  OPFER  26 38 TELCOP  
OPNAM  26 22 TELCOP  OPRT1  15 34 TELCOP  PANIC  18  9 TELCOP  PANIC1 18  8 TELCOP  
PARSE   6  3 TELCOP  PARSW  11 17 TELCOP  PBUF    2 20 TELCOP  PBUFPT  2 21 TELCOP  
PDP     4 10 TELCOP  PFFPT   8 26 TELCOP  PGMPT  16 14 TELCOP  POS    10 38 TELCOP  
PRDAT  24  8 TELCOP  PRDAT1 24 15 TELCOP  PRO     5 36 TELCOP  PROGE  22  7 TELCOP  
PROJPT 17 37 TELCOP  PROJSW 22 25 TELCOP  PROSTG 17 38 TELCOP  PROTC  12 27 TELCOP  
PRTIME 24 31 TELCOP  PSFIL  26 34 TELCOP  PTFPT   8 27 TELCOP  PULL   20 10 TELCOP  
QUI     5 12 TELCOP  RCHECK  9 28 TELCOP  RDNO   18 13 TELCOP  RECIP2  7 15 TELCOP  
REPLAC  4 28 TELCOP  RESET   2 39 TELCOP  REV     4 24 TELCOP  RUN     5 29 TELCOP  
S370F  15 12 TELCOP  SBCNT   9 33 TELCOP  SCHECK  9 29 TELCOP  SCONV  27 24 TELCOP  
SET    27  9 TELCOP  SET1   27 10 TELCOP  SF     26 20 TELCOP  SFBUF  26 25 TELCOP  
SFPTR  26 19 TELCOP  SGAN   10 10 TELCOP  SGPS   25 35 TELCOP  SHFCNT  8 35 TELCOP  
SICBUF 12 23 TELCOP  SICPT  12 25 TELCOP  SINST  26 14 TELCOP  SLGER   8  2 TELCOP  
SLOG   16 10 TELCOP  SLOGPT 16 11 TELCOP  SOPSW  18 14 TELCOP  SPROJ   2 22 TELCOP  
SPROJ1  2 24 TELCOP  SPROJ2  2 26 TELCOP  SPUBSW 11  4 TELCOP  SSPSW  18 15 TELCOP  
SSW1   16 28 TELCOP  SSW2   16 31 TELCOP  SSW2A  16 30 TELCOP  SSYSSW 16 25 TELCOP  
STARSW 11 16 TELCOP  START   1 35 TELCOP  START1  1 37 TELCOP  STASW  27  6 TELCOP  
STG    14 19 TELCOP  STGBFE 12 22 TELCOP  STGBUF 12 21 TELCOP  STGC4  14 26 TELCOP  
STGCMD 14 20 TELCOP  STGLIM 12 26 TELCOP  STGPRO 12  9 TELCOP  STGPT  12 24 TELCOP  
STIME  25  4 TELCOP  STUSR   6 35 TELCOP  SUPDWN 22 13 TELCOP  SUPER  10 39 TELCOP  
SUUN   10 11 TELCOP  SWDC    9 30 TELCOP  SWITCH 13 12 TELCOP  SWORD  19  6 TELCOP  
SYS370  4  9 TELCOP  SYSDWN 22 11 TELCOP  SYSE   22  9 TELCOP  SYSNO  10 27 TELCOP  
T2D    24 16 TELCOP  T2DEC  24 19 TELCOP  TCHCNT  8 36 TELCOP  TCIT    6  2 TELCOP  
TDNO   21 39 TELCOP  TEMP   25  6 TELCOP  TERMCH  4 11 TELCOP  TERMWD 26 17 TELCOP  
TFDPT   9 10 TELCOP  TFPT    8 23 TELCOP  TGAN    9 11 TELCOP  TGFN   12 29 TELCOP  
TIM     5 30 TELCOP  TIMSW   5 32 TELCOP  TINIT  22 27 TELCOP  TLV1   27  7 TELCOP  
TLV11  27  8 TELCOP  TOFIL  10 21 TELCOP  TOSW    8 39 TELCOP  TRU     5  5 TELCOP  
TRU1    4 15 TELCOP  TRU2    4 16 TELCOP  TRUN    4 14 TELCOP  TRUSW   5  4 TELCOP  
TSYS   10 19 TELCOP  TUNO    9 12 TELCOP  TUPT    8 19 TELCOP  TUSER  10 17 TELCOP  
TUSRSW 10 25 TELCOP  TWORD   9 31 TELCOP  UDIST  25  7 TELCOP  UNAME  18  1 TELCOP  
UPDA    4 33 TELCOP  UPDSW  10 12 TELCOP  UPTR   10 22 TELCOP  URT     4 22 TELCOP  
USERPT 17 39 TELCOP  VER     4  7 TELCOP  VERBO   4 36 TELCOP  VFILE  27 33 TELCOP  
VFPTR  27 39 TELCOP  VM1    27  2 TELCOP  VM2    27  3 TELCOP  VME5   27  4 TELCOP  
VME6   27  5 TELCOP  VPTR1  26 21 TELCOP  VPTR2  26 23 TELCOP  VRECL   5 11 TELCOP  
VSYS    7 19 TELCOP  VSYS1   7 24 TELCOP  VT1    26 26 TELCOP  VT2    26 27 TELCOP  
VXT1   26 28 TELCOP  VXT2   26 29 TELCOP  VXT3   26 30 TELCOP  VXT4   26 31 TELCOP  
VXT5   26 32 TELCOP  VXT8   26 33 TELCOP  WKPTR  16 23 TELCOP  WKSTG  16 19 TELCOP  
WKSTG1 16 22 TELCOP  WORKPT  8 30 TELCOP  X       2 18 TELCOP  YN     22 18 TELCOP  
YN1    22 21 TELCOP  YNSW    2 32 TELCOP  YON    22 22 TELCOP  ZAPINT 17 18 TELCOP  

TELECOPY ** FICHE/FRAME BREAK *****
TGETIT
TGETIT IDENT 3/24/77
       NOLIST STAT,EXT
       ENTRY STARTT,KILLT,ALERT
       ENTRY FLKER
       ENTRY INVU,FLKR
       ENTRY CORF,COSF,FPFRF,FPFSF,BAD,UIO,IOERR,IOERW,PER,PEW,ERASE,TRAP
       ENTRY OPF,FPF,TRPER,UCC,UO,FWER,FPEW,FERER
       ENTRY RF,SCR,RCR,SNDYEL,OPNROU

RF 0
       BRM IRF                 (INITIALIZE RECEIVERS AND FILE WRITERS)
       BRM ITF                 (WE WILL NEED THE FILE READERS TOO)
       LDB =NATIVE
       LDA RMODE
       SKG =4; SKG =1; BRU *+2; LDB RPARAM
       STB BPARAM
       STB RPARAM
       BRM UPA
* OPEN FILE FOR OUTPUT.  FDWD2=FD ENTRY FROM INPUT FILE.  OFDWD2=FD ENTRY
* FROM OUTPUT FILE.
       LDA FDWD2; ETR =7B6; RSH 18; STA FTYPE
       SKP 940SW; BRU OOUTF
* FOR UNLIKE MACHINE TYPES DEFAULT FILETYPE IS SYM OR BIN
       LDA RMODE; LDB =2; SKG =2; LDB =3; STB FTYPE
OOUTF LDA OFDWD2; ETR =7B6; RSH 18; EOR =4; CAB; LDA FTYPE
 SKB =-1; SNE =4; BRU *+2; BRU OOUTF1
* ERASE RECEIVE FILE IF EITHER IS DUMP
 LDP TFPT; BRS 48; BRU *+3; BRS 69; NOP
OOUTF1 LDP TFPT; LDX FTYPE; MRG =116B5; BRS 65
 BRM CORF; STA TFILE
       BRM INITRN              (INITIALIZE FOR TRANSMISSION)
* SEND OPNCOD IF MASTER, SUCCOD IF SLAVE
 LDA OPNROU-1; SKN MASTER; LDA SUCROU-1; STA ACKROU
 CLA
 STA ACKSW (DEFER SENDING UNTIL WE ENTER BLOCK INPUT MODE)
 STA MSGSW (ONCE-ONLY SWITCH FOR COPYST)
 STA CCNT (NO CHARS COPIED)
 LDA RMODE
 CAX
 LDA PCHT,2
 STA PCH
 BRU *,2
 BRU RFBEG
 BRM UIO       (EBCDIC UNIMPLEMENTED)
 BRU RFBEG
 BRU RF4
 BRM UIO       (KATAKANA UNIMPLEMENTED)
 BRU RFBEG     (IMAGE O.K.)
RFBEG BRM SINIT
 CLA; STA RECL1 (NO DATA RECEIVED YET)
 TIMER 60; BRM GBCOD; TIMER OFF
 LSH 16; LDB =776B5
 LDX =SLE-SLDE
RFB1 SKM SLDE,2; BRU RFB2
 LDA RCVE,2; STA RCV
 LDX SLDE,2; BRU 0,2
RFB2 BRX RFB1
 BRM BAD
SLE EQU *
 DIS FPFCOD,FPF; DIS OPFCOD,OPF
 DI ERRCOD,FWER,PERCOD,FPEW
 DIS FINCD1,RFEND
* RECEIVER GROUPING
 DIS ACMCOD,RFAC; DIS BCMCOD,RFBC
SLDE EQU *                     (END OF RECEIVER GROUPING)
 BRM ACR; BRM BCR
RCVE EQU *                     (END OF GROUPING FOR RCV)
*NEED ROUTINE PK TO SUPPORT KATAKANA 5/5/77
PCHT EQU *-1
 BRM PA; BRM PA; BRM PB; BRM PB; NOP; BRM PB

* READ DATA RECORD, ASCII COMPRESSION METHOD
RFAC   BRM RRANKT              (READ RANKT TABLE)
 BRM ADIAG
       BRU RFDATA

* READ DATA RECORD, BINARY COMPRESSION METHOD
RFBC   BRM BGC; STA PREFER     (READ PREFERRED COMPRESSION CHARACTER)
 BRM BDIAG

* SET OUTPUT FILE CURSOR POSTION
RFDATA BRM COPYST; LDA BP0; STA BP
* READ 1 PAGE AT A TIME UNTIL END OF RECORD
R1PAGE LDA =4000B; MUL BF; LSH 23; STA LRECL; SUB =1; MRG =4B7; STA COUNTB
       EXU RCV; BRU RXPAGE     (COUNTB EXHAUSTED)
* SOME CONTROL CODE.
       STA IRTT
       LDA COUNTB
       ETR =@4B7
       ADD =1
       SUB LRECL
       CNA
       ADM BP
       ADM RECL1
       LDA IRTT
       DI PERCOD,FPEW,ERRCOD,FWER,EORCOD,REOR,EOTCOD,REOT,FINCD1,RFEND

RXPAGE LDA LRECL; ADM BP; ADM RECL1; BRU R1PAGE

REOR   BRM VERIF               (VERIFY RECORD CHECKSUM AND SKIP IF BAD)
       BRU *+3
REOR1  BRM SNAK                (SEND NAKCOD)
       BRU RFBEG               (START OVER)
       LDA BP; STA BP0
       BRM SACK                (SEND ACKCOD)
       BRM RUPCNT
       BRM CKTIM               (PROGRESS REPORT)
       BRU RFBEG               (GET NEXT RECORD)

REOT   BRM VERIF
       BRU *+2
       BRU REOR1
REOT1  BRM RUPCNT; BRM LVBI
       BRM SACK                (MUST FOLLOW LVBI OR GCOD MAY FAIL)
       BRM GC60
       DI FINCD1,CLOUT,ERRCOD,FWER,PERCOD,FPEW

RF4    EQU *   RECEIVE UPDATE MODE.
       CLA
       STA UPDMOD              (SWITCH TELLS NEWBLK TO READ OLD CONTENTS)
RF4BEG BRM RCR                 (READ CHECK RECORD)
       BRM BAD                 (+1 - NAKCOD)
       BRU RF4CK               (+2 - GOOD CHECK RECORD)
       BRU *+3                 (+3 - SOME OTHER TYPE)
       BRM SNAK                (+4 - BAD CHECK RECORD)
       BRU RF4BEG
 DI FPFCOD,FPF,OPFCOD,OPF,ERRCOD,FWER,PERCOD,FPEW,FINCD1,RFEND

RF4CK  EQU *   BUILD CHECK RECORD TO EXCHANGE
       BRM COPYST
4BEX   CLA; STA FFCK1; STA FFCK2; STA FFCK3; STA NUM0
       LDA =DNOR; STA DCPTR; LDA =RCVR; STA RCPTR
       LDA CHKCOUNT; STA DCC
       BRM SPOR
4BEXL  LDA RBLOCK; STA LRECL; MRG =4B7; STA COUNTB
4BEXB  BRM GB; BRU 4BEXCK
       LDB RCPTR; LDX DCPTR
       LDA =-1; STA T
 CLA; XMA FFCK1; ETR =37777777B; STA FCK1,2; XXB; SKE FCK1,2; MIN T; XXB
 CLA; XMA FFCK2; ETR =37777777B; STA FCK2,2; XXB; SKE FCK2,2; MIN T; XXB
 CLA; XMA FFCK3; ETR =37777777B; STA FCK3,2; XXB; SKE FCK3,2; MIN T
       SKN T; MIN NUM0
       MIN DCPTR; MIN RCPTR
       BRM ELOR
       SKR DCC
       BRU 4BEXL
       LDA =DNOR; STA DPTR0
       LDA =RCVR; STA RPTR0
       LDA RECL; STA URECL
       LDA BP0; STA UBP0
* RETURN COMPLETED CHECK RECORD
4SCK   LDA =EOTCOD
       BRM SCR                 (TRANSMITTER GETS OUT OF BLOCK MODE)
* PREPARE TO RECEIVE DATA RECORDS
4REC   LDA BP0; STA BP
       LDA DPTR0; STA DPTR
       LDA RPTR0; STA RPTR
       LDA NUM0; STA NUM
       CLA; STA RECL1 (NO DATA RECEIVED)
       STA RECL
* LOOK FOR DATA RECORD OR NEW CHECK RECORD.
       BRM RCR
       BRU 4SCK                (+1 - NAK)
       BRU 4BEXF               (+2 - CHECK RECORD--DONOR HAS NO MORE DATA)
       BRU 4RFB                (+3 - OTHER TYPE, PROBABLY A DATA RECORD)
       BRM SNAK                (+4 - BAD CHECK RECORD--TRY TO REREAD IT)
       BRU 4REC
4BEXF  LDA URECL; STA RECL
       LDA UBP0; STA BP0
       BRM EPOR                (ADVANCE BP0)
       LDA NUM
       SKG =0
       BRU 4BEX                (CONTINUE EXCHANGE)
       BRM TRAP                (INSUFFICIENT DATA)
4BEXCK CAX; LDA FFCK1; MUL =13; RSH 1; STB FFCK1
 LDA FFCK2; MUL =17; RSH 1; STB FFCK2
 LDA FFCK3; MUL =19; RSH 1; STB FFCK3
 CXA; ADM FFCK1; ADM FFCK2; ADM FFCK3
       BRU 4BEXB

4RFB EQU *                     (BETTER BE DATA RECORDS)
       LSH 16; LDB =776B5
       LDX =4RCV-4RCVE
4RFB1  SKM 4RCVE,2; BRU 4RFB2
       LDA RCVE,2; STA RCV
       LDX 4RCVE,2; BRU 0,2
4RFB2  BRX 4RFB1
       BRM BAD

4RCV   EQU *
4SRCV  EQU *
       DIS FINCD1,RFEND
       DIS ERRCOD,FWER; DIS PERCOD,FPEW
       DIS ACMCOD,4RFAC; DIS BCMCOD,4RFBC
4RCVE  EQU *

4RFAC  BRM RRANKT
 BRM ADIAG
       BRU 4RFDATA
4RFBC  BRM BGC; STA PREFER
 BRM BDIAG

4RFDATA SKR NUM; BRU 4RFDB
*DUPLICATE SOME CODE FROM GBCOD HERE TO PRESERVE RECORD CHECKSUM
4RFDD BRM BGC; SKE =CAN; BRU 4RFDE; BRM BGC; BRU 4RFDD
4RFDE  SKE =EM; BRU 4RFDD; BRM BGC
 SKG =MTOP; SKG =MBOT; BRU 4RFDD; STA LCOD1; STA IRTT; BRU 4RFDC
4RFDB  LDA RBLOCK; STA LRECL; SUB =1; MRG =4B7; STA COUNTB
       LDX DPTR; LDB RPTR
       LDA FCK1,2; XXB; SKE FCK1,2; BRU 4RFDA
       LDA FCK2,2; XXB; SKE FCK2,2; BRU 4RFDA
       LDA FCK3,2; XXB; SKE FCK3,2; BRU 4RFDA
       MIN DPTR; MIN RPTR
       BRM ELOR; BRU 4RFDB
4RFDLN MIN DPTR; MIN RPTR
       LDA LRECL; ADM RECL1
       BRM ELOR                (ADVANCE RECL AND BP)
       BRU 4RFDATA
4RFDA  EXU RCV; BRU 4RFDLN     (COUNTB EXHAUSTED)
       STA IRTT
       MIN NUM                 (COMPENSATE FOR SKR NUM AT 4RFDAT)
*A PHYSICAL RECORD MUST CONTAIN AN INTEGRAL NO. OF LOGICAL RECORDS
       LDA COUNTB; ETR =@4B7; ADD =1; SKE LRECL; BRM DSTRY
* DISPATCH ON RECORD TERMINATION TYPE
       LDA IRTT
4RFDC  DI ERRCOD,FWER,PERCOD,FPEW,EORCOD,4REOR,EOTCOD,4REOT

4REOR  BRM VERIF; BRU 4REOR2
4REOR1 BRM SNAK; BRU 4REC
4REOR2 BRM SACK
       BRM RUPCNT
       BRM CKTIM               (PROGRESS REPORT)
       BRM EPOR                (ADVANCE BP0 BY RECL)
       LDA DPTR; STA DPTR0
       LDA RPTR; STA RPTR0
       LDA NUM; STA NUM0
       BRU 4REC

4REOT  BRM VERIF; BRU REOT1; BRU 4REOR1

RFCI   BRM TCI
TCI 0; CIO CI; BRR TCI
RFBI   BRM BGC
RFEND  BRM RUPCNT; LDA RFBI; BRU *+2
CLOUT  LDA RFCI; STA T1        (TRUNCATE AND CLOSE OUTPUT FILE)
       EXU T1; STA CHCNT       (BYTE COUNT)
       CLA; STA CPTOP
CLOUT1 SKR CHCNT; BRU *+2; BRU CLOUT2
       EXU T1
       XMA CPTOP; CLB; LSH 8; ADM CPTOP
       BRU CLOUT1
CLOUT2 EXU T1 (GET COUNT OF RESIDUAL BITS); SKE =0; MIN CPTOP
       BRM LVBI (LEAVE BLOCK INPUT MODE IF WE HAVE NOT ALREADY)
       LDA RMODE; SKE =5; SNE =1; BRU *+2; BRU CLOUT3
       LDA CCNT; STA CPTOP; BRU CLOUT4
CLOUT3 EQU *   (IN BINARY MODE CPTOP FROM TRANSMITTER WILL BE USED)
       LDA CPTOP
       RSH 23
       DIV BF
       STB T1
       MUL =3
       LSH 23
       STA CPTOP
       LDA BPARAM; ETR =7; MUL =3; LSH 23; ADD T1; CAX
       LDA CADJ,2; ADM CPTOP
* FLUSH OUTPUT BUFFER
CLOUT4 BRM WRBLK
* ERASE EXCESS
       RSP TFILE; XMA CPTOP; MRG =4B7; SCP TFILE; BRM PEW
       LDA CPTOP; PCE TFILE; BRM ERASE
* IF THE OTHER END IS A 940 THEN GO THROUGH LICENSE CODE
       SKN 940SW
       BRU CLOUT5
* SET LICENSE MAY FAIL IF GROUP BECOMES BUSY
STLIC  LDP TFPT; BRS 48; NOP
       BRM STAT; BRU *+3; LDA FDWD2; BRU *+3; LDA FDWD2
       ETR =77777771B; LDB FDWD0; STP DEBUG; LDX =12; BRS 141; NOP
CLOUT5 LDA TFILE; BRS 20
       LNKMSG FINCD2
       LDX CO; BRS 178 (WAIT CONFIRMATION WE HAVE LEFT BLOCK INPUT MODE)
       BRR RF


STAT   ZRO; LDA TFDPT; SKE =1; BRU *+2
       BRU STAT1; SKG =1014B; SKG =777B; BRU *+2; BRU STAT1
       SKG =1113B; SKG =1100B; BRU *+2; BRU STAT1
       SKG =3030B; SKG =2777B; BRR STAT
STAT1  LDA FFDPT; SKE =1; BRU *+2; BRU STAT2; SKG =1014B; SKG =777B
       BRU *+2; BRU STAT2
       SKG =3030B; SKG =2777B; BRR STAT
STAT2  SKP INSTSW; MIN STAT; BRR STAT

CADJ   DATA 0,0,0 (RIGHT FILL, BLOCKING=1)  (NEVER ANY REMAINDER)
       DATA 0,0,0 (LEFT FILL, BLOCKING=1)
       DATA 0,2,0 (RIGHT FILL, BLOCKING=2)
       DATA 0,1,0 (LEFT FILL, BLOCKING=2)
       DATA 0,1,2 (RIGHT FILL, BLOCKING=3)
       DATA 0,1,2 (LEFT FILL, BLOCKING=3)

$GBCOD 0;*     (FETCH CONTROL CODE)
 BRM BGC
 SKE =CAN; BRU GBCOD1
 BRM BGC; BRU GBCOD+1
GBCOD1 SKE =EM; BRU GBCOD+1; STA ICHECK; LDA =1; STA ICOUNT
 BRM BGC; SKG =MTOP; SKG =MBOT; BRU GBCOD+1; STA LCOD1
 BRR GBCOD

BGC 0
 BRM GC; BRR BGC
 SKA =TIMFLG; BRU EOTTS1; SKA =EOTFLG; BRM ZAPINT
 BRM TRAP
EOTTS1 BRM IINIT; BRU BGC+1

SINIT 0
 BRM IINIT
 BRR SINIT

RCR 0;*        READ CHECK RECORD. RETURNS
*              +1 IF NAK IS RECEIVED.
*              +2 IF GOOD RECORD RECEIVED.
*              +3 IF SOME OTHER RECORD TYPE IS RECEIVED.
*              +4 IF BAD (CHECK) RECORD IS RECEIVED.
 BRM SINIT
 BRM GBCOD
 SNE =NAKCOD; BRU RCR1
 SKE =CHKCOD; BRU RCR3
 LDA =RCVR; STA RCPTR
 BRM BGC; STA CHKCOUNT; STA T
RCR0 BRM GBWORD; LDX RCPTR; STA FCK1,2
 BRM GBWORD; LDX RCPTR; STA FCK2,2
 BRM GBWORD; LDX RCPTR; STA FCK3,2
 MIN RCPTR
 SKR T; BRU RCR0
RCR00 BRM BGC
 SKE =EM; BRU RCR00
 BRM BGC
 STA IRTT      (INPUT RECORD TERMINATION TYPE)
 DI EOTCOD,RCR01,EORCOD,RCR01
RCR01 BRM VERIF; BRU RCR2
RCR4 MIN RCR   (BAD RECORD)
RCR3 MIN RCR   (SOME OTHER RECORD TYPE)
RCR2 MIN RCR   (GOOD CHECK RECORD)
RCR1 CLB; STB TOTCCT
 BRR RCR

VERIF 0;*      VERIFY RECORD CHECKSUM AND BYTECOUNT AND SKIP IF BAD
       LDA =-1; STA VERIF1
       LDA ICHECK; STA VERIF2
       LDA ICOUNT; STA VERIF3
       BRM GBWORD; SKE VERIF2; MIN VERIF1
       BRM GBWORD; SKE VERIF3; MIN VERIF1
       LDA ICOUNT; STA TOTCCT
       SKN VERIF1; MIN VERIF; SKP VERIF1; BRM INITRN; BRR VERIF

GBWORD 0
 BRM BGC
 CLB; LSH 16; STA ASW
 BRM BGC
 CLB; LSH 8; ADM ASW
 BRM BGC
 MRG ASW; BRR GBWORD

* THIS ROUTINE MAY BE USED BY EITHER DONOR OR RECEIVER.  IT WILL DEFER
*      SENDING A YELLOW BALL UNTIL I PUT UP A READ.
SCR 0;*        SEND CHECK RECORD.
 STA T         (SAVE RECORD TERMINATION TYPE)
 BRM RINIT
 W =EM
 W =CHKCOD
 LDA DCPTR
 SUB =DNOR+1
 BRM CW        (ONE BYTE - NO. OF BLOCKS-1)
 LDA =DNOR
SCR1 STA T1
 LDX T1; LDA FCK1,2; BRM BSWD
 LDX T1; LDA FCK2,2; BRM BSWD
 LDX T1; LDA FCK3,2; BRM BSWD
 LDA T1
 ADD =1
 SKE DCPTR
 BRU SCR1
 BRM ENDR1
 NOP T
 CLA
 STA ACKSW     (PRIME TO SEND YELLOW BALL WHEN INPUT IS DONE)
 LDA SNDYEL-1  (BRM SNDYEL)
 STA ACKROU
 BRR SCR

DSTRY 0;*      DESTROY RECORD CHECKSUM AND COUNT TO FORCE RETRANSMISSION
       BRS 42; ADM ICOUNT; EOR ICHECK; STA ICHECK
       BRR DSTRY

RRANKT 0;*     READ RANK TABLE FROM ASCII COMPRESSED RECORD
       LDA =LT; STA TT
       LDA =RANKT; STA T
       BRM BGC; STA* T; MIN T; SKR TT; BRU *-4
       BRR RRANKT

*      ROUTINES EXECUTED BY DEFER.

*      USED BY MASTER AND SLAVE TO FINISH AN OUTPUT RECORD
 BRM *+1
SNDYEL 0;*     SEND YELLOW BALL
 SKN 370SW; BRU SNDY1
 LDA =HT; CIO CO; BRR SNDYEL
SNDY1 STX XSAV
 LDX CO; LDA =377B; BRS 172
 LDX XSAV
 BRR SNDYEL

*      USED BY MASTER AND SLAVE TO RETURN SUCCESS (104) CODE
       BRM *+1
SUCROU 0
       LNKMSG SUCCOD
       BRR SUCROU

*      USED BY MASTER ONLY TO SEND 137 CODE
       BRM *+1
OPNROU 0
       LDA =EM; CIO CO
       LDA =OPNCOD; CIO CO
       LDA TMODE; CIO CO
       SKG =4; SKG =2; BRU OPN1
* WHEN CALLED FROM TF SEND RPARAM.  FROM RF SEND TPARAM.
       LDA RPARAM (BINARY PARAMETERS FOR RECEIVER)
       SKN DONOR 
       LDA TPARAM
       CIO CO
       LDA TMODE
       SKE =4
       BRU OPN1
* DEFAULT BLOCKSIZE FROM MASTER DISC BLOCK SIZE
       CLB
       LDA BF
       LSH 8
       LDB =-1
       SKB UTBLOCK
       LDA UTBLOCK
       STA TBLOCK
       STA RBLOCK
       RSH 8; CIO CO (HIGH ORDER BYTE OF BLOCKSIZE)
       LDA TBLOCK; CIO CO (LOW ORDER BYTE)
OPN1   BRM SNDYEL
       BRR OPNROU


$DEFER 0;*     ROUTINE CALLED WHEN WE ENTER BLOCK INPUT MODE.
 EXU ACKROU
 LDA =-1
 STA ACKSW
 STA BI        (NOW IN BLOCK INPUT MODE)
 BRR DEFER

*      ERROR PROCESSING.

*      ERROR DETECTED.  SEND ERROR MESSAGE ACROSS CIRCUIT AND
*      WAIT RETURN OF ABTCOD.  USE ERG MACRO TO SET UP ARGUMENT
*      LIST:
*(SLAVE)       ARG1 - CODE TO SEND
*(SLAVE)       ARG2 - DISPATCH ADDRESS
*              ARG3 - CODE TO SEND
*              ARG4 - DISPATCH ADDRESS
*(OPTIONAL)    ARG5 - MESSAGE ADDR
*(OPTIONAL)    ARG6 - FILENAME PTR
ABT1 0
 LDX ABT1; LDX -1,2; LDA 1,2; ETR =377B; STA NARG
 LDX CO; BRS 99
*BRS 29        (INCLUDE WHEN BASE GOBBLER BUG FIXED  7/21/77)
 BRS 178
 BRR ABT1

ERO 0
 BRM ABT1
* SEND ESCAPES TO 370 DONOR SLAVE TO TRY TO INTERRUPT HIS TORE REQUEST.
 LDA =ESC; SKN DONOR; SKN 370SW; BRU *+3
 CIO CO
 CIO CO
 LDX ERO
 LDA 4,2 (ARG3)
 SKN MASTER
 LDA 2,2 (ARG1)
 ETR =377B
 BRM SCOD
 SKE =BADCOD; BRU *+3; LDA BADD; CIO CO
 BRM SNDYEL
* WAIT RETURN OF ABORT CODE
 TIMER 30
 BRM GCOD; SKE =ABTCOD; SNE =BADCOD; BRU *+2; BRU *-4
 TIMER OFF
 SNE =BADCOD; BRU UCC
 LDX ERO
 SKN MASTER
 BRU* 3,2 (ARG2)
 LDA NARG
 SKG =4
 BRU* 5,2 (ARG4)
 MSG* 6,2 (ARG5)
 LDX ERO
 LDA NARG
 SKG =5
 BRU* 5,2 (ARG4)
 LDP* 7,2
 LDX =1
 BRS 35
 LDX ERO
 BRU* 5,2

*      ERROR NOTIFICATION.  RETURN ABTCOD.  IF MASTER, OPTIONALLY
*      PRINT MESSAGE AND FILENAME STRING.  USE ERN MACRO TO SET UP
*      ARGUMENT LIST:
*(SLAVE)       ARG1 - DISPATCH ADDRESS
*(MASTER)      ARG2 - DISPATCH ADDRESS
*(OPTIONAL)    ARG3 - MESSAGE ADDR
*(OPTIONAL)    ARG4 - FILENAME PTR

ERNO 0
 BRM ABT1; BRM ABT (SEND ABTCOD)
 LDX ERNO
 SKN MASTER
 BRU* 2,2 (ARG1)
 LDA NARG
 SKG =2
 BRU* 3,2 (ARG2)
 MSG* 4,2 (ARG3)
 LDX ERNO
 LDA NARG
 SKG =3
 BRU* 3,2 (ARG2)
 LDP* 5,2 (ARG4)
 LDX =1
 BRS 35
 LDX ERNO
 BRU* 3,2 (ARG2)

*TAKE SNAPSHOT OF PROGRAM FOR ANALYSIS OF PROGRAM FAULTS
TRAPPT DATA 3*TRAPF-1,3*TRAPF-1+16
TRAPF ASC '(YOUNGERC)CRASH'
TRAPT ASC 'M  '
TRAPA BSS 2
TRAPX 0
TREL BSS 2
TFNO 0
TRAP 0
 BRM CRASH
 BRM TRP
$CRASH 0
       STP TRAPA; STX TRAPX; BRS 43; STP TREL
       LDA ="M  "; SKN MASTER; LDA ="S  "; STA TRAPT
       LDP TRAPPT; LDX =1; BRS 65; BRU CRRET
       STA TFNO; CLEAR; WIO TFNO
       LDA =37777B; WIO TFNO; CLEAR; WIO TFNO
       LDA =40000B; BIO TFNO; NOP; LDA TFNO; BRS 20
CRRET  LDP TRAPA; LDX TRAPX; BRR CRASH

ALERT 0;*      GOT SOMETHING IN INPUT BUFFER WHILE DOING BLOCK OUTPUT
       TIMER 30
       BRM GCOD
       TIMER OFF
       DI ERRCOD,FWER,PERCOD,FPEW,ERASCD,FERER
LVBI 0;*      LEAVE BLOCK INPUT MODE.  DOES NOT WAIT
       SKN BI; BRR LVBI
       CLA
       STA BI
       LDX CO
       BRS 99
       BRR LVBI

*      TIMER LOGIC.  BRS 135 WILL DISMISS IF THERE IS A PREVIOUS
*      TIMER PENDING.

*KILL TIMER
KILLT 0
 STP I205A; STX I205X; BRM CLR5; LDP I205A; LDX I205X
 BRR KILLT

*INTERRUPT FOR CIRCUIT NOT RESPONDING
I205 EQU *
 BRM CLRCIR (TEAR DOWN CIRCUIT)
 MSG 205MSG
 BRU RESET
205MSG ASC '$CIRCUIT NOT RESPONDING--ABORT$/'

*START TIMER GOING
STARTT 0
 MUL =1000; LSH 23; CAB
 BRS 135
 LDA =I205; STA INT5RT
 BRR STARTT

*      ERROR DETECTION.  REPORT THE ERROR AND WAIT FOR RETURN
*              OF ABTCOD.

* LOOKUP FAILURE (SLAVE ONLY)
FLKER 0; ERG FLKRCD,GD,FLKRCD,RESET

*CANNOT OPEN RECEIVE FILE
CORF 0; ERG OPFCOD,GD,OPFCOD,RESET,ERR12,TFPT

*CANNOT OPEN SEND FILE
COSF 0; ERG OPFCOD,GD,OPFCOD,RESET,ERR6,FFPT

*FILE PROTECTION ERROR--RECEIVE FILE
FPFRF 0; ERG FPFCOD,GD,FPFCOD,RESET,NOTW,TFPT

*FILE PROTECTION ERROR--SEND FILE
FPFSF 0; ERG FPFCOD,GD,FPFCOD,RESET,NOTR,FFPT

*PROGRAM TRAP
TRP 0; ERG TRPCOD,GD,TRPCOD,RESET,TRPM1
*TRPM1 ASC '$TRANSMISSION ABORTED DUE TO CONTROLLER TRAP$/'

*UNEXPECTED CONTROL CODE
BAD 0; LDX =BADT-BADTE; SKM BADTE,2; BRU *+3; LDX BADTE,2; BRU 0,2; BRX *-4
       LRSH 16; STA BADD; ERG BADCOD,GD,BADCOD,RESET,BADMSG
BADT EQU *
 DIS BADCOD,UCC; DIS TRPCOD,TRPER; DIS ABTCOD,ABTT; DIS NICOD,UO
BADTE EQU *
*BADMSG ASC '$TRANSFER ABORTED DUE TO UNEXPECTED SLAVE CODE$/'

*UNIMPLEMENTED OPERATION REQUIRED
UIO 0; ERG NICOD,GD,NICOD,RESET,UIOMSG
*UIOMSG ASC '$TRANSFER ABORTED DUE TO UNIMPLEMENTED CONTROLLER OPERATION$/'

*FILE SYSTEM ERROR READING SEND FILE
IOERR 0; ERG ERRCOD,GD,ERRCOD,RESET,RDER,FFPT
*RDER ASC '$TRANSFER ABORTED DUE TO ERROR READING: /'

*FILE SYSTEM ERROR WRITING RECEIVE FILE
IOERW 0; ERG ERRCOD,GD,ERRCOD,RESET,WTER,TFPT
*WTER ASC '$TRANSFER ABORTED DUE TO ERROR WRITING: /'

*FILE SYSTEM ERROR POSITIONING SEND FILE
PER 0; ERG PERCOD,GD,PERCOD,RESET,PERMSG,FFPT
*PERMSG ASC '$TRANSFER ABORTED DUE TO ERROR POSITIONING: /'

*FILE SYSTEM ERROR POSITIONING RECEIVE FILE
PEW 0; ERG PERCOD,GD,PERCOD,RESET,PERMSG,TFPT

*FILE SYSTEM ERROR ERASING RECEIVE FILE
ERASE 0; ERG ERASCD,GD,ERASCD,RESET,ERAS,TFPT
*ERAS ASC '$TRANSFER ABORTED DUE TO ERROR ERASING: /'

*      ERROR REPORTED.  REFLECT ABTCOD.

*FLKRCD - LOOKUP FAILED ON SLAVE SYSTEM
FLKR   SKN DONOR; BRU FLKR1; ERN GD,RESET,ERR12,TFPT
FLKR1  ERN GD,RESET,ERR5,FFPT

*ULKFCD (FROM LUD LOOKUP) - CANNOT GFD ON SLAVE SYSTEM
INVU SKN DONOR; BRU INVU2; ERN GD,INVU1,LUDMSG,TUPT
INVU1 LDA TSYS
INVU1A TCO ="  :"; BRM TDNO; BRU RESET
INVU2 ERN GD,INVU3,LUDMSG,FUPT
INVU3 LDA FSYS; BRU INVU1A
LUDMSG ASC '$UNABLE TO LOCATE FD FOR /'

*OPFCOD--OPEN FAILURE
OPF SKN DONOR; BRU OPF1; ERN GD,RESET,ERR12,TFPT
OPF1 ERN GD,RESET,ERR6,FFPT

*FPFCOD--FILE PROTECTION FAILURE
FPF SKN DONOR; BRU FPF1; ERN GD,RESET,NOTW,TFPT
FPF1 ERN GD,RESET,NOTR,FFPT
NOTW ASC '$DECLARED NOT WRITABLE: /'
NOTR ASC '$DECLARED NOT READABLE: /'

*ABTCOD--REQUESTED ABORT
ABTT SKN MASTER; BRU GD; ERN GD,ABTT1,ABTT2
ABTT1 BRM CLRCIR; BRU RESET
*ABTT2 ASC '$ABORT REQUESTED$/'

*TRPCOD--PROGRAM FAILURE
TRPER ERN GD,RESET,TRPM2
*TRPM2 ASC '$TRANSMISSION ABORTED DUE TO SLAVE TRAP$/'

*BADCOD--UNEXPECTED CONTROL CODE
UCHAR 0
UCC    SKN BI; BRU *+3; BRM BGC; BRU *+2; CIO CI
       STA UCHAR; ERN GD,RESET,UCCMSG
*UCCMSG ASC '$TRANSFER ABORTED DUE TO UNEXPECTED CONTROLLER CODE$/'

*NICOD--UNIMPLEMENTED OPERATION
UO ERN GD,RESET,UOMSG
UOMSG ASC '$TRANSFER ABORTED DUE TO UNIMPLEMENTED SLAVE OPERATION$/'

*ERRCOD--FILE SYSTEM ERROR READING SEND FILE OR WRITING RECEIVE FILE
FWER SKN DONOR; BRU FRER; ERN GD,RESET,WTER,TFPT
FRER ERN GD,RESET,RDER,FFPT

*PERCOD--FILE SYSTEM ERROR POSITIONING SEND OR RECEIVE FILE
FPEW SKN DONOR; BRU FPER; ERN GD,RESET,PERMSG,TFPT
FPER ERN GD,RESET,PERMSG,FFPT

*ERASCD--FILE SYSTEM ERROR ERASING RECEIVE FILE
FERER ERN GD,RESET,ERAS,TFPT

* PUT ASCII BYTE.  BYTESIZE=8 ONLY SUPPORTED.
*      SKIP RETURN WHEN COUNTB IS EXHAUSTED.

 SKG =RS
$PA 0
PA1 SKG =RS
 BRU PA3
PA2 SUB =40B
 ETR =177B
PA2A BRM PB
 BRR PA
 MIN PA
 BRR PA
PA3 SKE =RS
 BRU PA5
 LDA =155B
 BRU PA2A
PA5 SKE =ESC; BRU PA8
 LDB PA6-1
 STB PA1
 BRR PA
 BRU *+1
PA6 LDB PA-1
 STB PA1
 BRU PA2
PA8 SKE =CR; BRU PA2
 SKN LCO (IS LOWER CASE OUTPUT PERMITTED)
 BRU PA2 (YES)
 LDA =105B (NO, MAP CR BACK TO LOWER CASE E)
 BRU PA2A

* PUT BINARY BYTE.  BYTESIZE=8 ONLY SUPPORTED.
* UNUSED BYTE POSITIONS IN WORD ARE ZEROED
* SKIP RETURN WHEN COUNTB EXHAUSTED.

* BLOCKING=3 LEFT OR RIGHT FILL
 BRU PBINIT
$PB 0
PB1 BRU PBINIT                 (SOMETIMES MIN PPT OR BRANCH INST.)
 LDX PPT
 CLB; LSH 16; XMA 0,2; ETR =-1-776B5; ADM 0,2
 LDA PB2-1; BRU PBEX
 BRU *+1
PB2 LDX PPT
 CLB; LSH 8; XMA 0,2; ETR =-1-177400B; ADM 0,2
 LDA PB3-1; BRU PBEX
 BRU *+1
PB3 LDX PPT
 XMA 0,2; ETR =-1-377B; ADM 0,2
 SKR PWCNT; BRM NSBO (FETCH NEW PAGE)
 LDA PB4
PBEX STA PB1
PBEX1 SKR COUNTB; BRU *+2; BRR PB
 LDA PB-1; STA PB1
 MIN PB; BRR PB

* BLOCKING=2 LEFT FILL
 BRU *+1
P2L1 MIN PPT; LDX PPT
 CLB; LSH 16; XMA 0,2; ETR =177400B; ADM 0,2
 LDA P2L2-1; BRU PBEX
 BRU *+1
P2L2 LDX PPT
 CLB; LSH 8; XMA 0,2; ETR =776B5; ADM 0,2
 SKR PWCNT; BRM NSBO
 LDA P2L1-1; BRU PBEX

* BLOCKING=2 RIGHT FILL
 BRU *+1
P2R1 MIN PPT; LDX PPT
 CLB; LSH 8; XMA 0,2; ETR =377B; ADM 0,2
 LDA P2R2-1; BRU PBEX
 BRU *+1
P2R2 LDX PPT
 XMA 0,2; ETR =177400B; ADM 0,2
 SKR PWCNT; BRM NSBO
 LDA P2R1-1; BRU PBEX


* BLOCKING=1 LEFT FILL
P1L1 CLB; LSH 16
* BLOCKING=1 RIGHT FILL
P1R1 MIN PPT
 STA* PPT
 SKR PWCNT; BRM NSBO
 BRU PBEX1

*DO EVERYTHING NECESSARY TO WRITE NEXT CHARACTER AT BYTE POSITION BP.
*      WRITES CHARACTER AT POSITION BP AND ADVANCES BP BY ONE.
 BRU *+1
PBINIT EQU *
 STA T3 (SAVE CHAR)
 BRM UPA (GET BLOCK NO)
 BRM NEWBLK (WRITE OUT OLD BLOCK, GET NEW)
 LDA =BUFFER-1; STA PPT
 LDA N; RSH 23; DIV BF; STB P
 ADM PPT; CNA; ADD =4B7+3777B; STA PWCNT
 LDA BPARAM; ETR =7; MUL =3; LSH 23
 ADD P; CAX; LDB PBTAB,2; STB PB1
 SKB =4B7; MIN PPT; LDA T3; BRU PB1

PBTAB EQU *
 BRU P1R1 (0)
 BRM TRAP (1)
 BRM TRAP (2)
 BRU P1L1 (3)
 BRM TRAP (4)
 BRM TRAP (5)
 BRU P2R1 (6)
 BRU P2R2,4 (7)
 BRM TRAP (8)
 BRU P2L1 (9)
 BRU P2L2,4 (10)
 BRM TRAP (11)
PB4  MIN PPT (12)
 BRU PB2,4 (13)
 BRU PB3,4 (14)
 MIN PPT (15)
 BRU PB2,4 (16)
 BRU PB3,4 (17)

*ADVANCE TO NEXT SEQUENTIAL BLOCK NO.
NSBO 0
 LDA BLKNO; ADD =1; BRM NEWBLK
 LDA =4B7+3777B; STA PWCNT
 LDA =BUFFER-1; STA PPT
 BRR NSBO

*READ BLOCK NO. IN 'A'.  WRITE OUT OLD BLOCK FIRST, IF CHANGED
NEWBLK 0
 STA T1 (SAVE DESIRED BLOCK NO)
 SKE BLKNO (DON'T WRITE IF SAME)
 BRM WRBLK (WRITE OUT OLD)
 LDA T1
 XMA BLKNO (NEW BLOCK NO); SNE T1; BRR NEWBLK
 SKN UPDMOD (ARE WE UPDATING AN OLD FILE)
 BRM RBZ (YES, READ OLD CONTENTS)
 BRR NEWBLK

$RBZ 0;*        READS BLOCK NO. IN BLKNO.  READ ZEROES PAST EOF
 LDA BLKNO
 MUL =3*2048; LSH 23; SCP TFILE; BRU RBZ1
 LDA =4000B; LDX =BUFFER; BIO TFILE; BRU RBZ2A
 BRU RBZ3
RBZ2A LDB TFILE; SKB =4B5; BRM IOERR; BRU RBZ2
RBZ1 LDA =BUFFER
RBZ2 STA T2 (FIRST ADDRESS NOT READ)
 SUB =BUFFER
 SUB =4000B
 COPY AX,A
 STA* T2
 MIN T2
 BRX *-2 (SUPPLY ZEROES PAST END OF FILE)
RBZ3 SKN UPDMOD                (ARE WE IN UPDATE MODE)
 SKP MASKFG    (YES, SHOULD WE MASK UNWANTED BITS)
 BRR RBZ       (NO TO EITHER)
 LDX =-4000B
 LDA PMSK
 EOR =-1
 CAB
RBZ4 SKB BUFFER+4000B,2
 BRU RBZ6
RBZ5 BRX *-2
 BRR RBZ
RBZ6 LDA BUFFER+4000B,2; ETR PMSK; STA BUFFER+4000B,2; MIN CHGFLG; BRU RBZ5

*WRITE OUT OLD BLOCK IF CHANGED
$WRBLK 0
 LDA =BUFFER; SKP CHGFLG; SKG PPT; BRU *+2; BRR WRBLK
 LDA BLKNO; MUL =3*2048; LSH 23; MRG =4B7; SCP TFILE; BRM PEW
 LDA =-1; STA CHGFLG
 LDA =4000B; LDX =BUFFER-1; STX PPT; EAX 1,2
 BIO TFILE; BRM IOERW; BRR WRBLK
*      INITIALIZE RECEIVERS AND FILE ROUTINES.
$IRF 0
 BRM SINIT
 LDA AAR-1; STA AAR1
 LDA ACR-1; STA ACR1
 LDA BCR-1; STA BCR1
 LDA =-1; STA BLKNO
 STA UPDMOD    (NOT UPDATE MODE)
 STA MASKFG    (DO NOT MASK BUFFER)
 STA CHGFLG    (BUFFER NOT CHANGED)
 CLA; STA BP; STA BP0
 LDA PA-1; STA PA1
 LDA PB-1; STA PB1
 BRR IRF

* RECEIVER DECOMPRESSION ROUTINES


       BRU AAR1                (INSTRUCTION FOR RESTORING ACR1)
$ACR 0;*       GET BYTE FROM ASCII-COMPRESSED RECORD
*              NO-SKIP RETURN WHEN COUNTB EXHAUSTED
*              SKIP RETURN WITH CONTROL CODE
ACR1   BRU AAR1
       BRM BGC                 (INSTRUCTION FOR RESTORING AAR1)
AAR    EQU *                   LOW-LEVEL CODE USED WITHIN ACR TO UNDO
*                              REPEATED CHARACTER COMPRESSION
AAR1   BRM BGC
       SKG =EM; BRU *+2; BRU ACR5
       SKG =CAN-1; BRU AAR4
       SKE =EM; BRU AARCAN     (ESCAPED BYTE)
* CONTROL CODE
       BRM BGC
       SKG =77B; BRU *+3
* CONTROL CODE
       MIN ACR
       BRR ACR
* REPEATED BYTE
       SUB =BIASC-MINC
       STA RCC                 (REPEATED CHAR COUNT)
       BRM BGC
       STA RC                  (REPEATED CHAR)
       LDA AAR3
       STA AAR1
AAR2   LDA RC
       SKR RCC
       BRU ACR5
       LDA AAR-1
       STA AAR1
       BRU AAR1
AAR3   BRU AAR2
* PREFERRED CHAR COMPRESSION
AAR4   EQU *
       IF 1; SKA =-10B; BRU *+2; BRM TRAP; ENDF
       SUB =BIASPA-MINPA
       STA PCC
       LDA AAR6
       STA AAR1
AAR5   CLEAR
       SKR PCC
       BRU ACR5A               (RANK0=RANK1=0)
       LDA AAR-1
       STA AAR1
       BRU AAR1
AAR6   BRU AAR5
* ESCAPED CHARACTER
AARCAN BRM BGC
       BRU ACR4
ACR2   SUB =BIASA
       CAX
ACR3   LDA RANKT,2
* ESCAPED DATA
ACR4   EXU PCH                 (PUT BYTE)
       BRU ACR1                (GET NEXT)
       BRR ACR                 (COUNTB EXHAUSTED)
* COMPRESSED DATA
ACR5   SKG =NT+BIASA-1
       BRU ACR2                (TRANSLATING CHARACTER)
* COMBINED CHARACTER PAIR
       SUB =BIASA+NT
       RSH 23
       DIV =NC
ACR5A  STB RANK1
       CAX
       LDA RANKT,2
       EXU PCH
       BRU ACR7
       LDB ACR6-1
       STB ACR1
       BRR ACR
       BRU *+1
ACR6   LDB ACR-1
       STB ACR1
ACR7   LDX RANK1
       BRU ACR3


       BRM BGC (INSTRUCTION USED FOR FIXING UP BCR1)
$BCR 0;*       GET BYTE FROM BINARY COMPRESSED RECORD
*              NO-SKIP RETURN WHEN COUNTB EXHAUSTED
*              SKIP RETURN WITH CONTROL CODE
BCR1   BRM BGC
       SKG =EM
       SKG =CAN-1
       BRU BCR8
       SKE =EM
       BRU BCRCAN              GOT DATA ESCAPE
       BRM BGC
       SKG =BIASP-1
       BRU BCR2
* PREFERRED CHARACTER COMPRESSION
       SUB =BIASP-MINP
       STA PCC                 (PREFERRED CHAR COUNT)
       LDA BCR4
       STA BCR1
BCR3   LDA PREFER
       SKR PCC
       BRU BCR8
       LDA BCR-1
       STA BCR1
       BRU BCR1
BCR4   BRU BCR3
BCR2   SKG =77B
       BRU BCR5
* CONTROL CODE
       MIN BCR
       BRR BCR
* REPEATED CHAR COMPRESSION
BCR5   SUB =BIASC-MINC
       STA RCC                 (REPEATED CHAR COUNT)
       BRM BGC
       STA RC                  (REPEATED CHAR)
       LDA BCR7
       STA BCR1
BCR6   LDA RC
       SKR RCC
       BRU BCR8
       LDA BCR-1
       STA BCR1
       BRU BCR1
BCR7   BRU BCR6
BCRCAN BRM BGC
BCR8   EXU PCH
       BRU BCR1
       BRR BCR
       END
TELECOPY ** FICHE/FRAME BREAK *****
TGETIT SYMSORT

SYM.  PG.LN. IDENT.

205MSG 15 30 TGETIT  4BEX    4 13 TGETIT  4BEXB   4 18 TGETIT  4BEXCK  5 18 TGETIT  
4BEXF   5 11 TGETIT  4BEXL   4 17 TGETIT  4RCV    5 33 TGETIT  4RCVE   5 38 TGETIT  
4REC    4 37 TGETIT  4REOR   6 32 TGETIT  4REOR1  6 33 TGETIT  4REOR2  6 34 TGETIT  
4REOT   7  4 TGETIT  4RFAC   6  1 TGETIT  4RFB    5 24 TGETIT  4RFB1   5 27 TGETIT  
4RFB2   5 30 TGETIT  4RFBC   6  4 TGETIT  4RFDA   6 23 TGETIT  4RFDAT  6  7 TGETIT  
4RFDB   6 12 TGETIT  4RFDC   6 30 TGETIT  4RFDD   6  9 TGETIT  4RFDE   6 10 TGETIT  
4RFDLN  6 19 TGETIT  4SCK    4 34 TGETIT  4SRCV   5 34 TGETIT  
AAR    23 26 TGETIT  AAR1   23 28 TGETIT  AAR2   24  6 TGETIT  AAR3   24 12 TGETIT  
AAR4   24 14 TGETIT  AAR5   24 20 TGETIT  AAR6   24 26 TGETIT  AARCAN 24 28 TGETIT  
ABT1   12 32 TGETIT  ABTT   17 37 TGETIT  ABTT1  17 38 TGETIT  ACR    23 21 TGETIT  
ACR1   23 24 TGETIT  ACR2   24 30 TGETIT  ACR3   24 32 TGETIT  ACR4   24 34 TGETIT  
ACR5   24 38 TGETIT  ACR5A  25  5 TGETIT  ACR6   25 14 TGETIT  ACR7   25 16 TGETIT  
ALERT  15  5 TGETIT  BAD    16 22 TGETIT  BADT   16 24 TGETIT  BADTE  16 26 TGETIT  
BCR    25 20 TGETIT  BCR1   25 23 TGETIT  BCR2   26  5 TGETIT  BCR3   25 37 TGETIT  
BCR4   26  4 TGETIT  BCR5   26 11 TGETIT  BCR6   26 17 TGETIT  BCR7   26 23 TGETIT  
BCR8   26 25 TGETIT  BCRCAN 26 24 TGETIT  BGC     8 32 TGETIT  CADJ    8 18 TGETIT  
CLOUT   7  9 TGETIT  CLOUT1  7 12 TGETIT  CLOUT2  7 16 TGETIT  CLOUT3  7 20 TGETIT  
CLOUT4  7 31 TGETIT  CLOUT5  8  3 TGETIT  CORF   16  6 TGETIT  COSF   16  9 TGETIT  
CRASH  14 35 TGETIT  CRRET  15  3 TGETIT  DEFER  12 15 TGETIT  DSTRY  10 36 TGETIT  
EOTTS1  8 36 TGETIT  ERASE  17 10 TGETIT  ERNO   14  5 TGETIT  ERO    12 39 TGETIT  
FERER  18 25 TGETIT  FLKER  16  3 TGETIT  FLKR   17 15 TGETIT  FLKR1  17 16 TGETIT  
FPER   18 22 TGETIT  FPEW   18 21 TGETIT  FPF    17 31 TGETIT  FPF1   17 32 TGETIT  
FPFRF  16 12 TGETIT  FPFSF  16 15 TGETIT  FRER   18 18 TGETIT  FWER   18 17 TGETIT  
GBCOD1  8 28 TGETIT  GBWORD 10  1 TGETIT  I205   15 26 TGETIT  INVU   17 19 TGETIT  
INVU1  17 20 TGETIT  INVU1A 17 21 TGETIT  INVU2  17 22 TGETIT  INVU3  17 23 TGETIT  
IOERR  16 34 TGETIT  IOERW  16 38 TGETIT  IRF    23  4 TGETIT  KILLT  15 21 TGETIT  
LM     25 19 TGETIT  LM$GBC  8 24 TGETIT  LM*    23 17 TGETIT  LM*    19 17 TGETIT  
LM*    18 26 TGETIT  LM*    17 12 TGETIT  LM*    15 38 TGETIT  LM*    15 17 TGETIT  
LM*    12 21 TGETIT  LM*    11  6 TGETIT  LMRF4   3 39 TGETIT  LMRFCI  7  5 TGETIT  
LUDMSG 17 24 TGETIT  LVBI   15 10 TGETIT  NEWBLK 21 37 TGETIT  NOTR   17 34 TGETIT  
NOTW   17 33 TGETIT  NSBO   21 30 TGETIT  OOUTF   1 25 TGETIT  OOUTF1  1 29 TGETIT  
OPF    17 27 TGETIT  OPF1   17 28 TGETIT  OPN1   12 11 TGETIT  OPNROU 11 26 TGETIT  
P1L1   20 27 TGETIT  P1R1   20 29 TGETIT  P2L1   20  5 TGETIT  P2L2   20  9 TGETIT  
P2R1   20 16 TGETIT  P2R2   20 20 TGETIT  PA     18 30 TGETIT  PA1    18 31 TGETIT  
PA2    18 33 TGETIT  PA2A   18 35 TGETIT  PA3    18 39 TGETIT  PA5    19  4 TGETIT  
PA6    19  9 TGETIT  PA8    19 12 TGETIT  PB     19 23 TGETIT  PB1    19 24 TGETIT  
PB2    19 29 TGETIT  PB3    19 33 TGETIT  PB4    21 22 TGETIT  PBEX   19 37 TGETIT  
PBEX1  19 38 TGETIT  PBINIT 20 37 TGETIT  PBTAB  21  9 TGETIT  PCHT    2 30 TGETIT  
PER    17  3 TGETIT  PEW    17  7 TGETIT  R1PAGE  3  6 TGETIT  RBZ    22  8 TGETIT  
RBZ1   22 14 TGETIT  RBZ2   22 15 TGETIT  RBZ2A  22 13 TGETIT  RBZ3   22 22 TGETIT  
RBZ4   22 29 TGETIT  RBZ5   22 31 TGETIT  RBZ6   22 33 TGETIT  RCR     9  3 TGETIT  
RCR0    9 14 TGETIT  RCR00   9 19 TGETIT  RCR01   9 24 TGETIT  RCR1    9 28 TGETIT  
RCR2    9 27 TGETIT  RCR3    9 26 TGETIT  RCR4    9 25 TGETIT  RCVE    2 28 TGETIT  
REOR    3 22 TGETIT  REOR1   3 24 TGETIT  REOT    3 32 TGETIT  REOT1   3 35 TGETIT  
RF      1 10 TGETIT  RF4BEG  4  3 TGETIT  RF4CK   4 11 TGETIT  RFAC    2 34 TGETIT  
RFB1    2 15 TGETIT  RFB2    2 18 TGETIT  RFBC    2 39 TGETIT  RFBEG   2 10 TGETIT  
RFBI    7  7 TGETIT  RFDATA  3  4 TGETIT  RFEND   7  8 TGETIT  RRANKT 11  1 TGETIT  
RXPAGE  3 20 TGETIT  SCR    10 11 TGETIT  SCR1   10 20 TGETIT  SINIT   8 38 TGETIT  
SLDE    2 26 TGETIT  SLE     2 20 TGETIT  SNDY1  11 13 TGETIT  SNDYEL 11 10 TGETIT  
STARTT 15 33 TGETIT  STAT    8  9 TGETIT  STAT1   8 13 TGETIT  STAT2   8 16 TGETIT  
STLIC   7 39 TGETIT  SUCROU 11 20 TGETIT  TCI     7  6 TGETIT  TFNO   14 31 TGETIT  
TRAP   14 32 TGETIT  TRAPA  14 28 TGETIT  TRAPF  14 26 TGETIT  TRAPPT 14 25 TGETIT  
TRAPT  14 27 TGETIT  TRAPX  14 29 TGETIT  TREL   14 30 TGETIT  TRP    16 18 TGETIT  
TRPER  18  3 TGETIT  UCC    18  8 TGETIT  UCHAR  18  7 TGETIT  UIO    16 30 TGETIT  
UO     18 13 TGETIT  UOMSG  18 14 TGETIT  VERIF   9 31 TGETIT  WRBLK  22 36 TGETIT  

TELECOPY ** FICHE/FRAME BREAK *****
TPARAM
TPARAM IDENT 03/25/77
       NOLIST STAT

PZERO  EQU *

*PROGRAM CAPABILITIES
*ALL MAY RECEIVE ASCII DATA AND DUPLICATE COMPRESSED RECORDS
ACRCAP EQU 100B                (I MAY RECEIVE RANK COMPRESSED DATA RECORDS)
KATCAP EQU 40B                 (I MAY RECEIVE KATAKANA DATA)
BINCAP EQU 20B                 (I MAY RECEIVE BINARY DATA)
UPDCAP EQU 10B                 (I MAY RECEIVE BINARY UPDATE MODE DATA)
*ASSEMBLY AND TEST SWITCHES
TESTNG EQU 1                   (PRINT LOGIN MESSAGES FROM SLAVE HOST)
*PROTOCOL VERSION
VERNUM EQU 1
*MESSAGE TYPES
       OCT
MBOT EQU 100   (LOWER BOUND FOR MESSAGE TYPES)
DNRCOD EQU 101 (REQUEST SLAVE TO BE DONOR.  NO RESPONSE.
RCVCOD EQU 102 (REQUEST SLAVE TO BE RECEIVER.  NO RESPONSE.
FLKCOD EQU 103 (ASCII FILE NAME FOLLOWS AFTER 1 BYTE GIVING COUNT.
*              (STRING SHOULD START WITH USER NAME ENCLOSED IN PARENTHESES.
*              (THE SLAVE LOOKS UP THE USER NAME IN THE LUD AND RETURNS
*              (A ULKSCD IF FOUND AND A ULKRCD IF NOT FOUND.  IF THE SLAVE
*              (AND CONTROLLER ARE BOTH 940 THEN A SUPER GFD IS PERFORMED
*              (TO REACH THE FILE DIRECTORY OF THE SPECIFIED USER, AND GAN,
*              (FDPT, AND UUN FROM THE LUD ENTRY ARE RETURNED AS 9 BYTES.
*              (THEN:
*              (RETURNS FAILCD IF FILE NOT FOUND OR FLKSCD IF FILE FOUND.
*              (IF THE SLAVE & CONTROLLER ARE BOTH 940 THEN THE USUAL
*              (SECURITY RULES ARE RELAXED AND THE LOOKUP SUCCEEDS
*              (IF THE FILE IS PRESENT, RETURNING 9 BYTES CONTAINING
*              (INFORMATION FROM THE FIRST 3 WORDS OF THE FD ENTRY.
SUCCOD EQU 104 (OPTION ACCEPTED
FLKFCD EQU 106 (FILE NOT FOUND--NOT CONSIDERED AN ERROR
ABTCOD EQU 107 (STOP WHAT YOU ARE DOING, ABORT
BCMCOD EQU 110 (START DATA RECORD, BINARY COMPRESSION METHOD
ACMCOD EQU 111 (START DATA RECORD, ASCII COMPRESSION METHOD
ACKCOD EQU 112 (ACKNOWLEDGEE RECORD CHECKSUM AND BYTECOUNT MATCH
NAKCOD EQU 113 (CHECKSUM AND/OR BYTECOUNT DO NOT MATCH
FINCD1 EQU 114 (DONOR HAS SENT ALL RECORDS IN FILE AND IS HAPPY.  FOLLOWED
*              (BY 1 BYTE COUNT OF BYTES FOLLOWING:  TOTAL FILE BYTES SENT
*              (BY DONOR.  USED BY UPDATE MODE CLOSE TO TRUNCATE FILE TO
*              (THE CORRECT DATA LENGTH.  WHEN DONOR AND RECEIVER
*              (ARE BOTH 940 THIS WILL BE 3 BYTES CONTAINING CPTOP.
FINCD2 EQU 115 (RECEIVER HAS WRITTEN AND CLOSED FILE SUCCESSFULLY
FPFCOD EQU 116 (FILE PROTECTION FAILURE
OPFCOD EQU 117 (OPEN FAILURE
BZCOD  EQU 120 (BUFFER ZAPPED
* OPTION TYPES 121-130 RESPOND 104 OR 133 IF NOT IMPLEMENTED
CPACOD EQU 121 (SPECIFY COMPRESSION.  FOLLOWED BY 1 BYTE:
*              (0= NONE
*              (1= BINARY
*              (2= ASCII
*              (3= ASCII AUTO
ONLCOD EQU 122 (ON LOWER CASE.  FOLLOWED BY A BYTE OF ALL 1'S TO PERMIT
*              (LOWER CASE, ALL 0'S TO CONVERT LOWER TO UPPER CASE
*              (DEFAULT IS TO PERMIT LOWER CASE
TRUCOD EQU 124 (FOLLOWED BY 1 BYTE INDICATING COLUMN TO BEGIN
*              (TRUNCATION.  IF 0 THEN TURN OFF TRUNCATION.
TRICOD EQU 125 (REMOVE TRAILING BLANKS.  FOLLOWED BY A BYTE OF ALL 1'S
*              (TO SUPPRESS TRAILING BLANKS OR A BYTE OF ALL 0'S TO KEEP
*              (TRAILING BLANKS  (DEFAULT)
VARCOD EQU 127 (PRODUCE VARIABLE LENGTH RECORDS (DEFAULT)
*              (FOLLOWED BY 4 BYTES GIVING MAXIMUM RECORD SIZE
FIXCOD EQU 130 (PAD WITH BLANKS TO MAKE FIXED LENGTH RECORDS.
*              (FOLLOWED BY 4 BYES OF RECORD LENGTH.
LOGCOD EQU 131 (TELL SLAVE TO LOG OFF
CHKCOD EQU 132 (START DATA CHECKSUM RECORD
NICOD  EQU 133 (REQUESTED OPERATION IS NOT IMPLEMENTED
EORCOD EQU 134 (END OF TRANSMISSION RECORD
EOTCOD EQU 135 (TRANSMISSION RECORD IS LAST IN FILE
QUICOD EQU 136 (ABORT THE CURRENT OPERATION, QUIT SLAVE, AND RETURN
*              (TO OPERATING SYSTEM COMMAND LEVEL.
OPNCOD EQU 137 (REQUEST SLAVE OPEN FILE FOR DATA TRANSFER (DIRECTION
*              (DETERMINED BY PREVIOUS 101 OR 102 CODE.  FOLLOWED BY 1 BYTE
*              (TRANSMISSION TYPE, AND POSSIBLY, OTHER BYTES:
*              (TYPE = 1 ASCII MODE TRANSFER.  NO BYTES FOLLOW
*              (TYPE = 2 EBCDIC MODE TRANSFER.  NO BYTES FOLLOW
*              (TYPE = 3 BINARY MODE TRANSFER.  THE RECEIVE FILE, IF
*              (PRESENT, IS TO BE ERASED.  FOLLOWED BY 1 BYTE OF BINARY
*              (PARAMETERS.
*              (TYPE = 4 BINARY UPDATE MODE TRANSFER.  DONOR AND RECEIVER
*              (WILL EXCHANGE CHECK RECORDS.  FOLLOWED BY 1 BYTE OF BINARY
*              (PARAMETERS AND 2 BYTES OF UPDATE MODE BLOCKSIZE.
*              (TYPE = 5 KATAKANA MODE TRANSFER.  NO BYTES FOLLOW.
*              (TYPE = 6 IMAGE MODE.  NO BYTES FOLLOW.
*              (POSSIBLE RESPONSES ARE:  133 (UPDATE MODE NOT IMPLEMENTED
*              (OR PARAMETERS NOT ACCEPTABLE), 104 (FILE OPENED), 116
*              (FILE PROTECTION FAILURE), OR 117 (FILE OPEN FAILURE).
FENQCD EQU 140 (REQUEST SLAVE DONOR TO SEND FILE ATTRIBUTES.  RETURNS 104
*              (PLUS 1 BYTE COUNT OF BYTES FOLLOWING.
FATTCD EQU 141 (PREPARE SLAVE RECEIVER TO OPEN FILE.  FOLLOWED BY 1 BYTE
*              (COUNT OF BYTES FOLLOWING.  WHEN DONOR AND RECEIVER ARE BOTH
*              (940 SEND 9 BYTES:  3 BYTES FFDPT, 3 BYTES FDWD0, AND
*              (3 BYTES FDWD2.  NO RESPONSE IS GIVEN.
INSCOD EQU 142 (SET INSTALLER LICENSE.  FOLLOWED BY 6 BYTE CIPHER.
WHYCOD EQU 143 (SOLICIT EXPLANATION OF LATEST ERROR
RSPCOD EQU 144 (CODE FOLLOWED BY ASCII STRING TO BE PRINTED AT TERMINAL
*              (STRING TERMINATED BY A NUL BYTE OR ANY CONTROL CODE.
BADCOD EQU 145 (UNEXPECTED CONTROL CODE RECEIVED
ERRCOD EQU 146 (FILE SYSTEM ERROR WRITING OR READING FILE
PERCOD EQU 147 (FILE SYSTEM ERROR POSITIONING FILE
ERASCD EQU 150 (FILE SYSTEM ERROR ERASING RECEIVE FILE
TRPCOD EQU 152 (PROGRAM TRAP
FLKRCD EQU 153 (LOOKUP FAILURE--PROBABLY SYNTAX
ULKFCD EQU 154 (GFD FAILURE)
ULKSCD EQU 160 (GFD SUCCESS)
FLKSCD EQU 161 (FILE LOOKUP SUCCESS)
MTOP EQU 177 (UPPER BOUND FOR MESSAGE TYPES)
       DEC
*TRANSMISSION PARAMETERS
MAXRS EQU 2048*20            (MAXIMUM RECORD SIZE--20 PAGES)
MINRS EQU 2048*4             (MININUM RECORD SIZE--4 PAGES)
TSTRS EQU 6144                 (SAMPLE SIZE FOR STATISTICS--1 PAGE)
*DEFAULT BINARY PARAMETERS FOR ASCII MODE
NATIVE EQU 745B                (111+0010+1==BYTESIZE=8,BLOCKING=3,FILL=LEFT)
SMODE  EQU 400B                (SERIAL MODE--LOW ORDER 8 BITS OF BPARAM=0)
AMODE  EQU 345B                (SAME AS NATIVE WITHOUT 400 BIT TO DISTINGUISH)
*BLOCK INPUT PARAMETERS
EOTFLG EQU 4B6 (BLOCK ENDED BY EOT)
TIMFLG EQU 2B6 (BLOCK ENDED BY TIMEOUT)
*ASCII CHARACTER VALUES
HT     EQU 11B
CR     EQU 15B
CAN    EQU 30B
EM     EQU 31B
ESC    EQU 33B
RS     EQU 36B
US     EQU 37B
BL     EQU 40B
*COMPRESSION OPTIONS
AUTO   EQU 1
ASCII  EQU 2
NONE   EQU 400B (NO OPTIONS, SET TO KEEP COPT NON-ZERO)
*REPEATED CHAR COMPRESSION PARAMETERS
BIASP  EQU 200B                (BIAS FOR PREFERRED CHARACTER COMPRESSION CODE)
MAXP   EQU 130                 (MAXIMUM COUNT FOR PREFERRED CHARACTER)
MINP   EQU 3                   (MININUM COUNT FOR PREFERRED CHARACTER)
BIASC  EQU 10B                 (BIAS FOR REPEATED CHARACTER COMPRESSION CODE)
MAXC   EQU 59                  (MAXIMUM COUNT FOR REPEATED CHARACTER)
MINC   EQU 4                   (MININUM COUNT FOR REPEATED CHARACTER)
*RANK COMPRESSION PARAMETERS
BIASPA EQU 10B                 (BIAS FOR PREFERRED BYTE COMPRESSION CODE)
MAXPA  EQU 17                  (MAXIMUM COUNT FOR PREFERRED BYTE)
MINPA  EQU 2                   (MININUM COUNT FOR PREFERRED BYTE)
BIASA  EQU 32B                 (BIAS FOR ALL TRANSLATING CHARACTERS)
NM     EQU 8                   (MASTER CHARACTERS-- 32 THRU 41)
LM     EQU NM-1
NC     EQU 21                  (COMBINING CHARACTERS-- 32 THRU 56)
LC     EQU NC-1
NT     EQU 62                  (TRANSLATING CHARACTERS-- 32 THRU 127)
LT     EQU NT-1

*OPDS
MSG    OPD 100B5,2
SPTR   OPD 514B5,2
*MSG NOS. TO BE FOUND IN TELMSG FILE
MSG1 EQU 1
MSG2 EQU 2
MSG2A EQU 3
MSG4 EQU 4
MSG5 EQU 5
MSG6 EQU 6
MSG6A EQU 7
MSG2B EQU 8
ERR13 EQU 9
ERR18 EQU 10
ERR19 EQU 11
ERR22 EQU 12
ERR23 EQU 13
ERR25 EQU 14
ERR28 EQU 15
ERR40 EQU 16
ERR41 EQU 17
ERR42 EQU 18
ERR43 EQU 19
ERR44 EQU 20
ERR45 EQU 21
ERR46 EQU 22
ERR47 EQU 23
VME1 EQU 24
VME EQU 25
VME2 EQU 26
TRPM1 EQU 27
MIXMSG EQU 28
BADMSG EQU 29
UIOMSG EQU 30
TRPM2 EQU 31
UCCMSG EQU 32
RDER EQU 33
WTER EQU 34
PERMSG EQU 35
ERAS EQU 36
ABTT2 EQU 37
ERR1 EQU 38
ERR27 EQU 39
ERR29 EQU 40
ERR30 EQU 41
ERR31 EQU 42
ERR32 EQU 43
ERR33 EQU 44
ERR34 EQU 45
VME3 EQU 46
VME4 EQU 47
MSG3 EQU 48
ERR15 EQU 50
M9 EQU 51
MODISC EQU 52
ERR48 EQU 53
ERR3 EQU 54
CANSYN EQU 55
*MACROS
ENTRY  MACRO D
ENTCNT NARG
       RPT ENTCNT
D(ENTCNT) EXT
ENTCNT EQU ENTCNT-1
       ENDR
       ENDM
ERG    MACRO D
Y      NARG
       BRM ERO
       NOP Y
       RPT (X=1,Y)
       NOP D(X)
       ENDR
       FRGT X
       FRGT Y
       ENDM
ERN    MACRO D
Y      NARG
       BRM ERNO
       NOP Y
       RPT (X=1,Y)
       NOP D(X)
       ENDR
       FRGT X
       FRGT Y
       ENDM

OFF EQU 0
TIMER MACRO D
Y EQU D($1,3)
 IF Y>0
 LDA =D(1); BRM STARTT; ELSE; BRM KILLT; ENDF
 FRGT Y
 ENDM
W      MACRO D
       LDA D(1); BRM CW
       ENDM
W1     MACRO D,G,1
       LDA D(1); SKG =EM; SKG =CAN-1; BRU G(1)
       W =CAN; LDA D(1)
G(1)   EQU *
       BRM CW
       ENDM
W2     MACRO D,H,2
       LDA D(1); SKG =EM; SKG =CAN-1; BRU H(1)
       W =CAN
       W D(1)
       W =CAN
       BRU H(2)
H(1)   EQU *
       BRM CW
H(2)   EQU *
       W D(1)
       ENDM
W3     MACRO D,I,2
       LDA D(1); SKG =EM; SKG =CAN-1; BRU I(1)
       W =CAN; W D(1); W =CAN; W D(1); W =CAN
       BRU I(2)
I(1)   EQU *
       BRM CW
       W D(1)
I(2)   EQU *
       W D(1)
       ENDM
LNKMSG MACRO D
 LDA =D(1); BRM SCOD
 BRM SNDYEL
 ENDM
DISP MACRO D
 LSH 16; LDB =776B5; LDX =D(1)-D(2)
 SKM D(2),2; BRU *+3; LDX D(2),2; BRU 0,2; BRX *-4
 BRM BAD
 ENDM
DIS MACRO D
 DATA D(1)*2B5+D(2)
 ENDM
DI MACRO D,J,2
Z NARG
Z EQU Z/2
X EQU 1
 DISP J(1),J(2)
J(1) EQU *
 RPT (Y=1,Z)
 DIS D(X),D(X+1)
X EQU X+2
 ENDR
J(2) EQU *
 FRGT X
 FRGT Y
 FRGT Z
 ENDM
 FREEZE
 BSS 1 (RESERVE LOC 0)
 GLOBAL DATA DEFINITIONS
10SW   0;* COMMUNICATE WITH PDP-10 WHEN NEG.
370SW  0;* COMMUNICATE WITH IBM-370 WHEN NEG.
940SW  0;* SWITCH INDICATES 940 CONTROLLER AND SLAVE WHEN NEG.
AC6    0;* SAVED CHAR IN ACTRANS
ACKROU 0;* INSTRUCTION TO BE EXECUTED BY DEFER
ACKSW  0;* SWITCH WHEN POS. CAUSES DEFER TO BE CALLED
ASW    0;* ASSEMBLY REGISTER FOR GWORD
BADD   0;* SAVED 'A' REGISTER FOR UNEXPECTED CONTROL CODE
BF     0;* BLOCKING FACTOR
BI     0;* SWITCH INDICATING BLOCK INPUT MODE WHEN NEG.
BLKNO  0;* CURRENT DISC PAGE IN BUFFER
BP     0;* BYTE POSITION
BP0    0;* CELL TO INITIALIZE BP
BPARAM 0;* BINARY PARAMETERS
BPG    0;* BYTES PER PAGE
BSWD1  0;* DISASSEMBLY WORD FOR BSWD
CCNT   0;* TOTAL FILE BYTES SENT
CCR    0;* CHARACTER COUNT REMAINING
CCR0   0;* CELL TO INITIALIZE CCR
CHAR   0;* CELL USED BY ACTRANS
CHECK  0;* OUTPUT RECORD CHECKSUM
CHGFLG 0;* SWITCH INDICATES MODIFIED BUFFER WHEN POS.
CHKCOUNT 0;* COUNT OF BLOCKS CHECKSUMMED IN CHECK RECORD
CHRCNT 0;* CHAR COUNT REMAINING IN DISC UNASSEMBLY WORD
COUNTB 0;* FILE CHAR QUANTUM FOR LOGICAL RECORD
*      FILE SIZE IS CPTOP1*8+CPTOP1 BITS
CPTOP1 0;* FILE SIZE IN BITS MOD 8
CPTOP2 0;* RESIDUAL NO. OF BITS
DCC    0;* DNOR COUNT-DOWN
DCPTR  0;* DNOR DATA POINTER
DEBUG BSS 2    (SAVED BRS 141 FUNCTION 12 ARGS)
DONOR  0;* SWITCH INDICATES WE ARE DONOR WHEN NEG.
DPTR   0;* TEMPORARY DNOR POINTER
DPTR0  0;* CELL TO INITIALIZE DPTR
ETIME  0;* TIME TRANSMISSION ENDED
FCK1 EQU 0
FCK2 EQU 1*256
FCK3 EQU 2*256
FFCK1  0;* DISC BLOCK CHECKSUM BITS 0-23
FFCK2  0;* BITS 24-47
FFCK3  0;* BITS 48-71
G      0;* INSTRUCTION EXECUTED TO FETCH NEXT FILE BYTE (.. BRM GA)
GPT    0;* DISC BUFFER WORD PTR USED BY GB.
GWCNT  0;* DISC BUFFER WORD COUNT-DOWN USED BY GB.
HFILE  0;* TELMSG FILE NO.
HFILET 0;* CELL USED BY HELP POPD
HSW    0;* RECORD HEADING SWITCH.  GENERATE HEADING WHEN NEG.
I205A BSS 2
I205X 0
ICHECK 0;* INPUT RECORD CHECKSUM
ICOUNT 0;* INPUT RECORD BYTE COUNTER
INT5RT 0;* ADDR OF ROUTINE TO BRANCH TO FOR 205 INT
IRTT   0;* INPUT RECORD TERMINATION TYPE
LCO    0;* PERMIT LOWER CASE OUTPUT WHEN POS.
LCOD   0;* LAST CODE RECEIVED BY GCOD
LCOD1  0;* LAST CODE RECEIVED BY GBCOD
LRECL  0;* LOGICAL RECORD LENGTH
MASKFG 0;* SWITCH INDICATES TO MASK BUFFER WHEN POS.
MASTER 0;* SWITCH INDICATES PROGRAM IS MASTER WHEN NEG.
MBC    0;* MULTIPLE BLANK COUNT
MSGSW  0;* SWITCH INDICATES SUPPRESS "COPY STARTED" MESSAGE WHEN NEG.
N      0;* NO. OF BYTES INTO PAGE. SEE UPA
NAKCTR 0;* NEGATIVE ACKNOWLEDGE COUNTER
NARG   0;* NO. OF ARGUMENTS
       BSS 101B+PZERO-*        SKIP OVER POP VECTOR
NEWSW  0;* SWITCH INDICATES TALKING TO NEW SLAVE WHEN NEG.
NUM    0;* NO. OF DISC BLOCKS DIFFERING ACCORDING TO RDVR AND DNOR
NUM0   0;* CELL TO INITIALIZE NUM
OPBUF  BSS 5 (TEMPORARY BUFFER FOR EXAMINING FILE ATTRIBUTES)
P      0;* PARTIAL BYTE POSITION IN WORD
PCC    0;* PREFERRED CHAR REPEAT COUNT
PCH    0;* INST. TO EXECUTE (.. BRM PB)
PGMSW  0;* TELECOPY SLAVE PROGRAM PRESENT WHEN NEG.
PMSK   0;* MASK FOR ZEROING UNWANTED BITS
PPT    0;* BUFFER WORD POINTER USED BY PB
PREFER 0;* PREFERRED COMPRESSION CHAR
PWCNT  0;* BUFFER WORD COUNT-DOWN USED BY PB
RANK0  0;* RANK OF FIRST CHAR OF A COMBINING PAIR
RANK1  0;* RANK OF 2ND CHAR
RC     0;* REPEATED CHAR
RCC    0;* REPEATED CHAR COUNT
RCPTR  0;* POINTER INTO RCVR CHECK BLOCK
RCV    0;* INST. TO EXECUTE (.. BRM ACR)
RECL   0;* RECORD LENGTH
RECL1  0;* RECORD LENGTH FOR DATA RECEIVED
RECSIZ 0;* ESTIMATED LOGICAL RECORD SIZE
RECTYP 0;* DATA RECORD TYPE
RTT    0;* RECORD TERMINATION TYPE
RPTR   0;* TEMP. PTR INTO RCVR BLOCK
RPTR0  0;* CELL TO INITIALIZE RPTR
SWB    0;* ONCE-ONLY SWITCH TO CALL SWBACK WHEN NEG.
SYS    0;* DESIRED SYSTEM NO. FOR OPCH
SYSSW  0;* OLD SYSTEM NO.  TEAR DOWN CIRCUIT IF DIFFERENT THAN SYS.
SYSTYP 0;* SLAVE CAPABILITIES.  SLAVE TYPE IN LOW ORDER 3 BITS
T      0;* TEMP CELLS
TT     0
T1     0
T2     0
T3     0
T4     0
TALKSW 0;* DOING TALK COMMAND WHEN POS.
TFILE  0;* DISC FILE NO.
TIMRT  0;* RETURN ADDRESS FOR TIMER
TRANS  0;* INST. TO EXECUTE (.. BRM ACTRANS)
TOTCCT 0;* TOTAL CHAR COUNT FOR TRANSMISSION RECORD - WCC
TRTOT  0;* TOTAL CHARACTERS TRANSMITTED
UBP0   0;* SAVED BP0 IN UPDATE MODE
UCCR0  0;* SAVED CCR0
UPDMOD 0;* SWITCH INDICATES TO READ BLOCK BEING UPDATED WHEN POS.
UPDNO 0;* DO NOT NOT ALLOW UPDATE MODE WHEN NEG.
URECL  0;* SAVED RECL IN UPDATE MODE
URTT   0;* RECORD TERMINATION TYPE TO USE IN UPDATE MODE
WORD   0;* WORD DISASSEMBLY CELL USED BY GB
VERBOSE 0;* SWITCH INDICATES VERBOSE MODE WHEN NEG.
VERIF1 0;* CELL USED BY VERIF
VERIF2 0
VERIF3 0
XSAV   0;* SAVE X IN SUBROUTINES
*TRANSMIT AND RECEIVE PARAMETER TABLES.  DO NOT REORDER
*USER-SPECIFIED SET
UCOPT 0
UTPARAM 0
UTMODE 0
UTBLOCK 0
URPARAM 0
URMODE 0
URBLOCK 0
USER EQU *
       BSS 214B+PZERO-*        (SPACE FOR SOFTWARE INT. VECTOR)
*ACTIVE SET
COPT   0;* COMPRESSION OPTIONS
TPARAM 0;* BPARAM FOR TRANSMITTER
TMODE  0;* MODE FOR TRANSMITTER
TBLOCK 0;* UPDATE MODE BLOCKSIZE FOR TRANSMITTER
RPARAM 0;* BPARAM FOR RECEIVER
RMODE  0;* MODE FOR RECEIVER
RBLOCK 0;* UPDATE MODE BLOCKSIZE FOR RECEIVER
ACTIVE EQU *
*DEFAULT SET
DCOPT 0
DTPARAM 0
DTMODE 0
DTBLOCK 0
DRPARAM 0
DRMODE 0
DRBLOCK 0
DEFAULTE EQU *
       BSS 240B+PZERO-*
       LOCAL
 END
TELECOPY ** FICHE/FRAME BREAK *****
TPARAM SYMSORT

SYM.  PG.LN. IDENT.

10SW    8 36 TPARAM  370SW   8 37 TPARAM  940SW   8 38 TPARAM  
ABTCOD  1 36 TPARAM  ABTT2   5 39 TPARAM  AC6     8 39 TPARAM  ACKCOD  1 39 TPARAM  
ACKROU  9  1 TPARAM  ACKSW   9  2 TPARAM  ACMCOD  1 38 TPARAM  ACRCAP  1  8 TPARAM  
ACTIVE 12 17 TPARAM  AMODE   4  2 TPARAM  ASCII   4 17 TPARAM  ASW     9  3 TPARAM  
AUTO    4 16 TPARAM  BADCOD  3 23 TPARAM  BADD    9  4 TPARAM  BADMSG  5 31 TPARAM  
BCMCOD  1 37 TPARAM  BF      9  5 TPARAM  BI      9  6 TPARAM  BIASA   4 30 TPARAM  
BIASC   4 23 TPARAM  BIASP   4 20 TPARAM  BIASPA  4 27 TPARAM  BINCAP  1 10 TPARAM  
BL      4 14 TPARAM  BLKNO   9  7 TPARAM  BP      9  8 TPARAM  BP0     9  9 TPARAM  
BPARAM  9 10 TPARAM  BPG     9 11 TPARAM  BSWD1   9 12 TPARAM  BZCOD   2 10 TPARAM  
CAN     4  9 TPARAM  CANSYN  6 17 TPARAM  CCNT    9 13 TPARAM  CCR     9 14 TPARAM  
CCR0    9 15 TPARAM  CHAR    9 16 TPARAM  CHECK   9 17 TPARAM  CHGFLG  9 18 TPARAM  
CHKCOD  2 30 TPARAM  CHKCOU  9 19 TPARAM  CHRCNT  9 20 TPARAM  COPT   12 10 TPARAM  
COUNTB  9 21 TPARAM  CPACOD  2 12 TPARAM  CPTOP1  9 23 TPARAM  CPTOP2  9 24 TPARAM  
CR      4  8 TPARAM  DCC     9 25 TPARAM  DCOPT  12 19 TPARAM  DCPTR   9 26 TPARAM  
DEBUG   9 27 TPARAM  DEFAUL 12 26 TPARAM  DI      8 18 TPARAM  DIS     8 15 TPARAM  
DISP    8 10 TPARAM  DNRCOD  1 19 TPARAM  DONOR   9 28 TPARAM  DPTR    9 29 TPARAM  
DPTR0   9 30 TPARAM  DRBLOC 12 25 TPARAM  DRMODE 12 24 TPARAM  DRPARA 12 23 TPARAM  
DTBLOC 12 22 TPARAM  DTMODE 12 21 TPARAM  DTPARA 12 20 TPARAM  EM      4 10 TPARAM  
ENTCNT  6 23 TPARAM  ENTCNT  6 20 TPARAM  ENTRY   6 19 TPARAM  EORCOD  2 32 TPARAM  
EOTCOD  2 33 TPARAM  EOTFLG  4  4 TPARAM  ERAS    5 38 TPARAM  ERASCD  3 26 TPARAM  
ERG     6 26 TPARAM  ERN     6 36 TPARAM  ERR1    6  1 TPARAM  ERR13   5 11 TPARAM  
ERR15   6 12 TPARAM  ERR18   5 12 TPARAM  ERR19   5 13 TPARAM  ERR22   5 14 TPARAM  
ERR23   5 15 TPARAM  ERR25   5 16 TPARAM  ERR27   6  2 TPARAM  ERR28   5 17 TPARAM  
ERR29   6  3 TPARAM  ERR3    6 16 TPARAM  ERR30   6  4 TPARAM  ERR31   6  5 TPARAM  
ERR32   6  6 TPARAM  ERR33   6  7 TPARAM  ERR34   6  8 TPARAM  ERR40   5 18 TPARAM  
ERR41   5 19 TPARAM  ERR42   5 20 TPARAM  ERR43   5 21 TPARAM  ERR44   5 22 TPARAM  
ERR45   5 23 TPARAM  ERR46   5 24 TPARAM  ERR47   5 25 TPARAM  ERR48   6 15 TPARAM  
ERRCOD  3 24 TPARAM  ESC     4 11 TPARAM  ETIME   9 31 TPARAM  FATTCD  3 15 TPARAM  
FCK1    9 32 TPARAM  FCK2    9 33 TPARAM  FCK3    9 34 TPARAM  FENQCD  3 13 TPARAM  
FFCK1   9 35 TPARAM  FFCK2   9 36 TPARAM  FFCK3   9 37 TPARAM  FINCD1  2  2 TPARAM  
FINCD2  2  7 TPARAM  FIXCOD  2 27 TPARAM  FLKCOD  1 21 TPARAM  FLKFCD  1 35 TPARAM  
FLKRCD  3 28 TPARAM  FLKSCD  3 31 TPARAM  FPFCOD  2  8 TPARAM  G       9 38 TPARAM  
G(1)    7 21 TPARAM  GPT     9 39 TPARAM  GWCNT  10  1 TPARAM  H(1)    7 30 TPARAM  
H(2)    7 32 TPARAM  HFILE  10  2 TPARAM  HFILET 10  3 TPARAM  HSW    10  4 TPARAM  
HT      4  7 TPARAM  I(1)    7 39 TPARAM  I(2)    8  3 TPARAM  I205A  10  5 TPARAM  
I205X  10  6 TPARAM  ICHECK 10  7 TPARAM  ICOUNT 10  8 TPARAM  INSCOD  3 19 TPARAM  
INT5RT 10  9 TPARAM  IRTT   10 10 TPARAM  J(1)    8 23 TPARAM  J(2)    8 28 TPARAM  
KATCAP  1  9 TPARAM  LC      4 34 TPARAM  LCO    10 11 TPARAM  LCOD   10 12 TPARAM  
LCOD1  10 13 TPARAM  LM      4 32 TPARAM  LNKMSG  8  6 TPARAM  LOGCOD  2 29 TPARAM  
LRECL  10 14 TPARAM  LT      4 36 TPARAM  M(ENTC  6 22 TPARAM  M9      6 13 TPARAM  
MASKFG 10 15 TPARAM  MASTER 10 16 TPARAM  MAXC    4 24 TPARAM  MAXP    4 21 TPARAM  
MAXPA   4 28 TPARAM  MAXRS   3 35 TPARAM  MBC    10 17 TPARAM  MBOT    1 18 TPARAM  
MINC    4 25 TPARAM  MINP    4 22 TPARAM  MINPA   4 29 TPARAM  MINRS   3 36 TPARAM  
MIXMSG  5 30 TPARAM  MODISC  6 14 TPARAM  MSG     4 39 TPARAM  MSG1    5  3 TPARAM  
MSG2    5  4 TPARAM  MSG2A   5  5 TPARAM  MSG2B   5 10 TPARAM  MSG3    6 11 TPARAM  
MSG4    5  6 TPARAM  MSG5    5  7 TPARAM  MSG6    5  8 TPARAM  MSG6A   5  9 TPARAM  
MSGSW  10 18 TPARAM  MTOP    3 32 TPARAM  N      10 19 TPARAM  NAKCOD  2  1 TPARAM  
NAKCTR 10 20 TPARAM  NARG   10 21 TPARAM  NATIVE  3 39 TPARAM  NC      4 33 TPARAM  
NEWSW  10 23 TPARAM  NICOD   2 31 TPARAM  NM      4 31 TPARAM  NONE    4 18 TPARAM  
NT      4 35 TPARAM  NUM    10 24 TPARAM  NUM0   10 25 TPARAM  OFF     7  8 TPARAM  
ONLCOD  2 17 TPARAM  OPBUF  10 26 TPARAM  OPFCOD  2  9 TPARAM  OPNCOD  2 36 TPARAM  
P      10 27 TPARAM  PCC    10 28 TPARAM  PCH    10 29 TPARAM  PERCOD  3 25 TPARAM  
PERMSG  5 37 TPARAM  PGMSW  10 30 TPARAM  PMSK   10 31 TPARAM  PPT    10 32 TPARAM  
PREFER 10 33 TPARAM  PWCNT  10 34 TPARAM  PZERO   1  4 TPARAM  QUICOD  2 34 TPARAM  
RANK0  10 35 TPARAM  RANK1  10 36 TPARAM  RBLOCK 12 16 TPARAM  RC     10 37 TPARAM  
RCC    10 38 TPARAM  RCPTR  10 39 TPARAM  RCV    11  1 TPARAM  RCVCOD  1 20 TPARAM  
RDER    5 35 TPARAM  RECL   11  2 TPARAM  RECL1  11  3 TPARAM  RECSIZ 11  4 TPARAM  
RECTYP 11  5 TPARAM  RMODE  12 15 TPARAM  RPARAM 12 14 TPARAM  RPTR   11  7 TPARAM  
RPTR0  11  8 TPARAM  RS      4 12 TPARAM  RSPCOD  3 21 TPARAM  RTT    11  6 TPARAM  
SMODE   4  1 TPARAM  SPTR    5  1 TPARAM  SUCCOD  1 34 TPARAM  SWB    11  9 TPARAM  
SYS    11 10 TPARAM  SYSSW  11 11 TPARAM  SYSTYP 11 12 TPARAM  T      11 13 TPARAM  
T1     11 15 TPARAM  T2     11 16 TPARAM  T3     11 17 TPARAM  T4     11 18 TPARAM  
TALKSW 11 19 TPARAM  TBLOCK 12 13 TPARAM  TESTNG  1 13 TPARAM  TFILE  11 20 TPARAM  
TIMER   7  9 TPARAM  TIMFLG  4  5 TPARAM  TIMRT  11 21 TPARAM  TMODE  12 12 TPARAM  
TOTCCT 11 23 TPARAM  TPARAM 12 11 TPARAM  TRANS  11 22 TPARAM  TRICOD  2 22 TPARAM  
TRPCOD  3 27 TPARAM  TRPM1   5 29 TPARAM  TRPM2   5 33 TPARAM  TRTOT  11 24 TPARAM  
TRUCOD  2 20 TPARAM  TSTRS   3 37 TPARAM  TT     11 14 TPARAM  UBP0   11 25 TPARAM  
UCCMSG  5 34 TPARAM  UCCR0  11 26 TPARAM  UCOPT  11 39 TPARAM  UIOMSG  5 32 TPARAM  
ULKFCD  3 29 TPARAM  ULKSCD  3 30 TPARAM  UPDCAP  1 11 TPARAM  UPDMOD 11 27 TPARAM  
UPDNO  11 28 TPARAM  URBLOC 12  6 TPARAM  URECL  11 29 TPARAM  URMODE 12  5 TPARAM  
URPARA 12  4 TPARAM  URTT   11 30 TPARAM  US      4 13 TPARAM  USER   12  7 TPARAM  
UTBLOC 12  3 TPARAM  UTMODE 12  2 TPARAM  UTPARA 12  1 TPARAM  VARCOD  2 25 TPARAM  
VERBOS 11 32 TPARAM  VERIF1 11 33 TPARAM  VERIF2 11 34 TPARAM  VERIF3 11 35 TPARAM  
VERNUM  1 15 TPARAM  VME     5 27 TPARAM  VME1    5 26 TPARAM  VME2    5 28 TPARAM  
VME3    6  9 TPARAM  VME4    6 10 TPARAM  W       7 15 TPARAM  W1      7 18 TPARAM  
W2      7 24 TPARAM  W3      7 35 TPARAM  WHYCOD  3 20 TPARAM  WORD   11 31 TPARAM  
WTER    5 36 TPARAM  X       8 26 TPARAM  X       8 21 TPARAM  XSAV   11 36 TPARAM  
Y       7 10 TPARAM  Y       6 37 TPARAM  Y       6 27 TPARAM  Z       8 20 TPARAM  
Z       8 19 TPARAM  
TELECOPY ** FICHE/FRAME BREAK *****
TSENDIT
TSENDIT IDENT 03/24/77
       NOLIST STAT,EXT
       ENTRY SCOD,RUPCNT,INITRN,GC60
       ENTRY TF,SACK,SNAK,GCOD,SLOR,ELOR,SPOR,EPOR
       ENTRY BSWD,ENDR1,RINIT
       ENTRY RANKT,DNOR,RCVR

TF 0;* TRANSMIT FILE.  RECEIVER MUST BE IN BLOCK INPUT MODE
 BRM ITF                       (INITIALIZE TRANSMITTERS AND FILE READERS)
 LDB =NATIVE
 LDA TMODE; SKG =4; SKG =1; BRU *+2; LDB TPARAM
 STB TPARAM
 STB BPARAM
 BRM UPA
*OPEN LAST FILE NAMED FOR INPUT
OINPF  SKN INSTSW; BRU *+2; BRU OINPF2
       LDP FFPT; BRS 64; BRM COSF; BRU OINPF3
*COULD USE FDIP HERE BUT LOOKUP IS SAFE
OINPF2 LDP FFPT; BRS 48; BRM COSF; LDB =OPBUF; LDX =5; BRS 96
       LDA OPBUF+4; LDB =41B; BRS 1; BRM COSF
OINPF3 STA TFILE
       BRM INITRN              (INITIALIZE FOR TRANSMISSION)
 SKN MASTER; BRU TF0
* IN MASTER MODE SEND OPNCOD AND AWAIT CONFIRMATION
* IF 940 MASTER THEN SEND FILE ATTRIBUTES
       SKN 940SW; BRU TF00
       LDA =FATTCD; BRM SCOD
       LDA =9; CIO CO
       LDA FFDPT; BRM SWORD
       LDA FDWD0; BRM SWORD
       LDA FDWD2; BRM SWORD (INCLUDES FTYPE)
TF00 BRM OPNROU
 BRM GC60
 DI SUCCOD,TF01,FPFCOD,FPF,OPFCOD,OPF
TF01 CLA; STA MSGSW; STA CCNT; BRM COPYST
TF0 BRM SIZE      (CALCULATE CCR=NO. OF FILE BYTES TO SEND)
 STA CCR0      (SIZE RETURNS 'A'=CCR)
 LDA =MINRS*3
 STA RECSIZ                    (LOGICAL RECORD SIZE)
 LDA TMODE
 CAX
 LDA GCHT,2
 STA G
 BRU *,2
 BRU TF1
 BRM UIO       (EBCDIC MODE NOT IMPLEMENTED)
 BRU TF3
 BRU TF4
 BRM UIO       (KATAKANA UNIMPLEMENTED)
 BRU TF3       (IMAGE TREAT LIKE BINARY)
*NEED ROUTINE GK TO SUPPORT KATAKANA.  5/5/77
GCHT EQU *-1
 BRM GA; BRM GA; BRM GB; BRM GB; NOP; BRM GB
* ASCII TRANSMISSION MODE TMODE=1
TF1    EQU *
* BINARY TRANSMISSION MODE TMODE=3
TF3    EQU *
* ANALYZE FIRST 6144 BYTES OF DATA FOR PREFERRED COMPRESSION CHAR
 LDA =TSTRS; SKG CCR; BRU *+2; LDA CCR; MRG =4B7; STA COUNTB
 CLA; LDX =ST-STE; STA STE,2; BRX *-1; STA SORT
 EXU G; BRU *-1
 BRM SWBAC     (SWITCH TO BINARY OR ASCII COMPRESSION)
* INITIALIZE RECORD
TA5 BRM RINIT  (PREPARE PHYSICAL RECORD)
 BRM SPOR
TA1 BRM SLOR   (START LOGICAL OUTPUT RECORD)
 BRU TA2       (FINISHED)
 EXU TRANS     (TRANSMIT RECORD) (MAKES RECORD HEADER)
 BRM ELOR1     (UPDATE RECL1)
 BRM ELOR      (UPDATE RECL)
 LDA TOTCCT
 ADD WCC
 SKG =MAXRS*3
 BRU TA1
 BRM ENDREC    (TERMINATE RECORD)
 BRM GCOD      (GET RESPONSE)
 DI ACKCOD,TA6,NAKCOD,TA5,ERRCOD,FWER,PERCOD,FPEW
TA6 BRM RUPCNT; BRM CKTIM; BRM EPOR
 BRU TA5
TA2 SKP HSW; BRU TAEND
 BRM ENDREC
 BRM GCOD
 DI ACKCOD,TAEND,NAKCOD,TA5,ERRCOD,FWER,PERCOD,FPEW
TAEND BRM RUPCNT; LDA =FINCD1; BRM SCOD
 LDA =3; CIO CO
 LDA CPTOP1
 BRM SWORD
 LDA CPTOP2    (RESIDUAL NO. OF BITS)
 CIO CO
 BRM SNDYEL
 BRM GC60
 DI FINCD2,TAFIN,ERRCOD,FWER,PERCOD,FPEW,ERASCD,FERER
TAFIN LDA TFILE; BRS 20; BRR TF

* BINARY UPDATE TRANSMISSION MODE TMODE=4
TF4 LDA =-1
 STA SWB       (ONCE-ONLY SWITCH FOR SWBAC)
 LDA TBLOCK; STA RECSIZ  (REDEFINE RECSIZ FOR DISK BLOCK)
       CLB
       STB FFCK1               (ZERO CHECKSUM FOR BLOCK)
       STB FFCK2
       STB FFCK3
BEX    LDA =DNOR
       STA DCPTR               (POINTER TO DONOR CHECKSUM BLOCK)
       LDA =255
       STA DCC                 (MAXIMUM 256 BLOCKS PER EXCHANGE)
       BRM SPOR
* USE EXISTING CODE TO HANDLE EACH EXCHANGE OF UP TO 256 BLOCKS
* THE PHYSICAL "RECORD" IS THE CHECK RECORD EXCHANGE AND
* DATA RECORDS.  THE LOGICAL RECORD IS ONE DISK BLOCK.
BEXL   BRM USLOR               (MAKE LRECL=RECSIZ, EVEN PAST END OF FILE)
       BRU BEXFIN
BEXB   BRM GB; BRU BEXCK
       LDX DCPTR
       CLA; XMA FFCK1; ETR =37777777B; STA FCK1,2
       CLA; XMA FFCK2; ETR =37777777B; STA FCK2,2
       CLA; XMA FFCK3; ETR =37777777B; STA FCK3,2
       MIN DCPTR
       BRM ELOR
       SKR DCC
       BRU BEXL                (DO NEXT DISK BLOCK)
* FULL CHECK RECORD IS BUILT. EXCHANGE CHECK RECORDS AND SEND DATA RECORDS
SCRAA  LDA =EORCOD
       BRM SCR                 (SEND CHECK RECORD TERMINATED BY EOR CODE)
SCRBB  BRM RCR                 (RECEIVE CHECK RECORD)
       BRU SCRAA               (OUR CHECK RECORD WAS NAK'D)
       BRU SCRDD               (VALID CHECK RECORD RECEIVED)
       BRU SCRCC               (SOME OTHER RECORD TYPE RECEIVED)
       BRM SNAK                (BAD CHECK RECORD--TRY TO COAX A RETRY)
       BRU SCRBB
SCRCC DI ERRCOD,FWER,PERCOD,FPEW
* SEND UP TO RECL DATA BYTES.  MUCH LESS OR NONE IF CHECK RECORDS MATCH
SCRDD  LDA =EORCOD             (ALL DATA RECORDS END WITH EOR)
       BRM USND
       BRM EPOR
       BRU BEX
BEXCK  CAX; LDA FFCK1; MUL =13; RSH 1; STB FFCK1
 LDA FFCK2; MUL =17; RSH 1; STB FFCK2
 LDA FFCK3; MUL =19; RSH 1; STB FFCK3
 CXA; ADM FFCK1; ADM FFCK2; ADM FFCK3
       BRU BEXB
* LAST EXCHANGE
BEXFIN LDA RECL; SKG =0; BRU TAEND
BEXFAA LDA =EORCOD
       BRM SCR
BEXFBB BRM RCR
       BRU BEXFAA              (NAK)
       BRU BEXFDD              (GOOD CHECK RECORD RECEIVED)
       BRU SCRCC               (SOME OTHER RECORD TYPE RECEIVED)
       BRM SNAK                (BAD)
       BRU BEXFBB
BEXFDD LDA =EOTCOD
       BRM USND                (LAST DATA RECORD IN BUNCH TO END WITH EOT)
       BRU TAEND

USND 0;*       SEND DATA RECORDS FOR NON-MATCHING CHECK RECORD ENTRIES
 STA URTT
 CLA; XMA RECL; STA URECL; XMA CCR0; STA UCCR0
 LDA BP0; STA UBP0
 SKP SWB
 BRM SWBAC     (SELECT COMPRESSION METHOD)
 MIN SWB
 LDA =DNOR
 STA DPTR
 STA DPTR0
 LDA =RCVR
 STA RPTR
 STA RPTR0
USND1 BRM RINIT
 BRM SPOR
 LDA RPTR0; STA RPTR
 LDA DPTR0; STA DPTR
USND2 BRM USLOR
 BRU USND3     (FINISHED)
 LDX DPTR; LDB RPTR
 LDA FCK1,2; XXB; SKE FCK1,2; BRU USND6
 LDA FCK2,2; XXB; SKE FCK2,2; BRU USND6
 LDA FCK3,2; XXB; SKE FCK3,2; BRU USND6
USND5 MIN DPTR
 MIN RPTR
 BRM ELOR      (UPDATE RECL)
 LDA TOTCCT
 ADD WCC
 SKG =MAXRS*3
 BRU USND2
 LDA =EORCOD
 STA RTT
 BRM ENDREC    (WE SENT SOMETHING)
 BRM GCOD
 DI ACKCOD,USND2A,NAKCOD,USND1,ERRCOD,FWER,PERCOD,FPEW
USND2A BRM RUPCNT; BRM CKTIM; BRM EPOR
 LDA RPTR; STA RPTR0
 LDA DPTR; STA DPTR0
 BRU USND1
USND3 SKP HSW; BRU USND4 (NOTHING STARTED)
 LDA URTT
 STA RTT
 BRM ENDREC
 BRM GCOD
 DI ACKCOD,USND4,NAKCOD,USND1,ERRCOD,FWER,PERCOD,FPEW
* RESTORE EVERYTHING
USND4 BRM RUPCNT; BRM CKTIM
 LDA URECL; STA RECL
 LDA UCCR0; STA CCR0
 LDA UBP0; STA BP0
 BRR USND
USND6 EXU TRANS; BRM ELOR1; BRU USND5

SLOR 0;*       START LOGICAL OUTPUT RECORD
 LDA CCR; SUB RECL; SKG =0; BRR SLOR   (FINISHED)
 MIN SLOR (FOR SKIP RETURN)
 LDB =EOTCOD
 SKG RECSIZ
 BRU *+3
 LDB =EORCOD
 LDA RECSIZ
 STB RTT       (RECORD TERMINATION TYPE)
 STA LRECL     (LOGICALRECORDLENGTH)
 MRG =4B7
 STA COUNTB
 BRR SLOR

ELOR1 0;*      END LOGICAL OUTPUT RECORD.  ADVANCE RECL1 BY LRECL.
 LDA LRECL; ADM RECL1
 BRR ELOR1

ELOR 0;*       END LOGICAL OUTPUT RECORD
 CLA; XMA LRECL; ADM RECL; ADM BP
 BRR ELOR

SPOR 0;*       START PHYSICAL OUTPUT RECORD
 CLA; STA RECL; STA RECL1
 LDA BP0; STA BP
 LDA CCR0; STA CCR
 BRR SPOR

EPOR 0;*       END PHYSICAL OUTPUT RECORD
 CLA; XMA RECL; ADM BP0; CNA; ADM CCR0
 BRR EPOR

RUPCNT 0;*     UPDATE CCNT=COUNT OF FILE BYTES RECEIVED
 CLA; XMA RECL1; ADM CCNT
 CLA; XMA TOTCCT; ADM TRTOT
 BRS 42; STA ETIME
 BRR RUPCNT

USLOR 0;*      START LOGICAL OUTPUT RECORD--UPDATE MODE
 LDA CCR; SUB RECL; SKG =0; BRR USLOR
 MIN USLOR (FOR SKIP RETURN)
 LDA RECSIZ; STA LRECL; MRG =4B7; STA COUNTB
 BRR USLOR

SNAK 0;*       SEND NAK
       LNKMSG NAKCOD
       MIN NAKCTR
       SKN NAKCTR
       BRM ZAPINT              (SIMULATE LOSS OF CIRCUIT)
       BRR SNAK

SACK 0;*       SEND ACKNOWLEDGEMENT
       LNKMSG ACKCOD
       BRR SACK

INITRN 0;*     INITIALIZE NAKCTR
       LDA =-2; STA NAKCTR
       LDA =PANIC; STA ESCRTN  (KILL CIRCUIT ON ESCAPE)
       BRR INITRN

GC60 0;*       FETCH CONTROL CODE WITH 60 SECOND TIMER
 TIMER 60; BRM GCOD; TIMER OFF
 BRR GC60

GCOD 0;*       FETCH CONTROL CODE
 CIO CI; SKE =CAN; BRU *+3; CIO CI; BRU GCOD+1
 SKE =EM; BRU GCOD+1; CIO CI; SKG =MTOP; SKG =MBOT; BRU GCOD+1; STA LCOD; BRR GCOD

SCOD 0;*       SEND CONTROL CODE
 CAB; LDA =EM; CIO CO; CBA; CIO CO
 BRR SCOD

RINIT 0;*      INITIALIZE PHYSICAL RECORD
 CLA
 STA CHECK
 BRM OINIT     (ZEROES TOTCCT AND WCC)
 LDA =-1
 STA HSW       (NO RECORD HEADER YET)
 BRR RINIT

BSWD 0;*      SEND 940 WORD
       LDX =-3; CAB
       CLA; LSH 8; STB BSWD1; BRM CW
       LDB BSWD1; BRX *-5
       BRR BSWD

ENDREC 0;*     END PHYSICAL RECORD
 BRM ENDR1
 NOP RTT
 BRM SNDYEL
 BRR ENDREC

ENDR1 0;*      MAKE RECORD ENDING.  DOES NOT SEND YELLOW BALL
*              ROUTINE SHOULD BE A FOLLOWED BY NOP ADDR
*              WHERE ADDR CONTAINS RECORD TERMINATION TYPE
 W =EM
 LDX ENDR1; LDA* 1,2; BRM CW
 LDA TOTCCT; ADD WCC; STA T
 LDA CHECK
 BRM BSWD
 LDA T
 BRM BSWD
 BRM FLUSH     (FLUSH AND WAIT FOR OUTPUT TO COMPLETE)
 BRM TRAP      (SOME ERROR)
 BRR ENDR1

*      GET ASCII BYTE FROM INPUT FILE

       BRU GAINIT              (INSTURCTION FOR INITIAL GA CALL)
       SKR COUNTB              (INSTRUCTION FOR RESTORING GA1)
GA     ZRO;*                   (GET ASCII CHARACTER.  EXPANDS BLANKS,
*                              (ESCAPES ESC,RS,SI,SO, AND ADDS SI
*                              (AND SO WHEN REQUIRED.  COUNTS ALL
*                              (CHARACTERS FOR ANALYSIS)
GA1    BRU GAINIT              (INLINE CODE TO FETCH CHAR AVG. 19 CYCLES/CHAR)
       BRU GA4                 (END OF FILE OR RECORD)
       SKR CHRCNT
       BRU GA3                 (FETCH NEW WORD)
       LDB WORD
GA2    CLA
       LSH 8
       STB WORD
GA3A   ETR =177B
       COPY AX,B
       BRU* ASCTAB,2           (DISPATCH TO ROUTINE)
GA3    SKR GWCNT
       BRM NSBI                (READ NEXT PAGE FROM FILE)
       LDB* GPT
       MIN GPT
       LDA =2+4B7
       STA CHRCNT
       BRU GA2
GA4    MIN GA                  (END OF FILE OR RECORD--SKIP RETURN)
       LDA GA-2
       STA GA1
       BRR GA
GAINIT EQU *                   (INITIAL GA CALL.  CAUTION:  BE SURE)
*                              (BPARAM AND GB1 ARE PROPERLY SET UP)
       LDA GB-2
       STA GB1
       LDA GA-1
       STA GA1
       BRM GB                  (SET BYTE POSITION AND FETCH FIRST BYTE)
       BRU *+2
       BRU GA4
       SKR ST,2
       BRU GA3A

*ASCII ROUTINE TABLE
ASCTAB EQU *
 RPT 32; 0 DATA; ENDR          0-37 PUNCTUATION
 0 DATA                        40 @
 RPT 31; 0 DATA; ENDR          41-72 A-Z, 73-77 PUNCT
 RPT 5; 0 LC1; ENDR             100-104 GRAVE, LOWER CASE A-D
 0 G105                        LOWER CASE E
 RPT 23; 0 LC1; ENDR            LOWER CASE F-Z, 133-134
 0 MB1                         135
 0 LC1                          136
 RPT 2; 0 GA1; ENDR            IGNORE RUBOUT AND NUL
 RPT 12; 0 CONT; ENDR          141-154
 0 CR1                         155 - LOGICAL RECORD SEPARATOR
 RPT 13; 0 CONT; ENDR          156-172
 0 ESC1                        173 - ESC
 RPT 2; 0 CONT; ENDR           174-175
 0 RS1                         176 - RS
 0 CONT                        177

*CARRIAGE RETURN REPLACE WITH RS.
CR1    LDA =RS; MIN ST+RS; BRR GA

*ESC PRECEDE WITH ESCAPE
ESC1   LDA ESC2-1
       STA GA1
       LDA =ESC; MIN ST+ESC; BRR GA
       BRU *+1
ESC2   LDA GA-1
       STA GA1
       LDA =ESC; MIN ST+ESC; BRR GA

*RS PRECEDE WITH ESCAPE
RS1    LDA RS2-1
       STA GA1
       LDA =ESC; MIN ST+ESC; BRR GA
       BRU *+1
RS2    LDA GA-1
       STA GA1
       LDA =RS; MIN ST+RS; BRR GA

*MB EXPAND
MB1    SKR COUNTB
       BRU MB6
       SKR CHRCNT
       BRU MB5
       LDB WORD
MB2    CLA
       LSH 8
       STB WORD
       STA MBC                 (MULTIPLE BLANK COUNT)
       LDA MB4
       STA GA1
MB3    LDA =BL                 (=40B)
       MIN ST+BL
       SKR MBC
       BRR GA
       LDA GA-1
       STA GA1
       BRU GA1                 (FIXUP GA1 WHEN COUNT EXHAUSTED)
MB4    BRU MB3
MB5    SKR GWCNT
       BRM NSBI
       LDB* GPT
       MIN GPT
       LDA =2+4B7
       STA CHRCNT
       BRU MB2
MB6    EQU *                   (END-OF-RECORD)
       MIN LRECL               (LOGICAL RECORD ONE BYTE LARGER THAN EXPECTED)
       LDA =4B7+1
       STA COUNTB
       BRU MB1

*105 SOMETIMES CR, SOMETIMES LOWER CASE E
G105   SKN LCO                 (PERMIT LOWER CASE OUTPUT)
       BRU LC1                  (YES)
       LDA =CR                 (OVERPRINT)
       MIN ST+CR
       BRR GA

*CONTROLS
CONT   ADD =40B
       ETR =177B
       CAX
       MIN ST,2
       BRR GA

* LOWER CASE
LC1     SKN LCO                 (PERMIT LOWER CASE)
       BRU DATA                (YES)
       ETR =77B                (NO, CONVERT TO UPPER)
       ADD =100B
       CAX
       MIN ST,2
       BRR GA
* UPPER CASE
DATA   ADD =40B
       CAX
       MIN ST,2
       BRR GA

* GET BINARY BYTE.  BYTESIZE=8 ONLY SUPPORTED.
* BLOCKING=3 LEFT OR RIGHT FILL
 BRU GBINIT
 SKR COUNTB
$GB 0
GB1 BRU GBINIT; BRU EOB
 SKR CHRCNT; BRU GWRD
 LDB WORD
GB2 CLA; LSH 8; STB WORD
GB3 CAX; MIN ST,2; BRR GB
GWRD SKR GWCNT; BRM NSBI
 LDB* GPT; MIN GPT
 LDA =2+4B7; STA CHRCNT
 BRU GB2
EOB EQU * END OF FILE OR BLOCK
 LDA GB-2; STA GB1
 MIN GB; BRR GB                (SKIP RETURN AT END)

* BLOCKING=2 LEFT FILL
 BRU *+1
B2L1 SKR COUNTB; BRU EOB
 SKR GWCNT; BRM NSBI
 LDB* GPT; CLA; LSH 8
 LDB B2L2-1; BRU B2L3
 BRU *+1
B2L2 SKR COUNTB; BRU EOB
 LDA* GPT; MIN GPT
 LRSH 8; ETR =377B
 LDB B2L1-1
B2L3 STB GB1
B2L4 CAX; MIN ST; BRR GB

* BLOCKING=2 RIGHT FILL
 BRU *+1
B2R1 SKR COUNTB; BRU EOB
 SKR GWCNT; BRM NSBI
 LDA* GPT; LRSH 8; ETR =377B
 LDB B2R2-1; BRU B2L3
 BRU *+1
B2R2 SKR COUNTB; BRU EOB
 LDA* GPT; MIN GPT; ETR =377B
 LDB B2R1-1; BRU B2L3

* BLOCKING=1 LEFT FILL
B1L1 SKR COUNTB; BRU EOB
 SKR GWCNT; BRM NSBI
 LDA* GPT; MIN GPT
 LRSH 16; BRU B2L4

* BLOCKING=1 RIGHT FILL
B1R1 SKR COUNTB; BRU EOB
 SKR GWCNT; BRM NSBI
 LDA* GPT; MIN GPT
 ETR =377B; BRU B2L4

*UNPACK BINARY PARAMETERS
$UPA 0
 LDA =NATIVE; XMA BPARAM; SKA =377B; STA BPARAM
 LDA BPARAM; ETR =340B; SKE =340B; BRM UIO (BYTESIZE NOT 8)
 LDA BPARAM
 ETR =37B; SKG =5; BRU *+2; BRM UIO
 RSH 1 (GET BLOCKING); ADD =1; STA BF (BLOCKING FACTOR)
 CLB; LSH 11; STA BPG (BYTES/PAGE)
 LDA BPARAM; ETR =37B; CAX; LDB MSK,2; STB PMSK
 SKA =34B (BLOCKING>2)
 LDA =-1 (YES)
 STA MASKFG
 LDA BP; RSH 23; DIV BPG; STB N (NO. OF BYTES PAST BEGINNING OF PAGE)
 BRR UPA (EXIT WITH 'A'=PAGE NO.)
MSK DATA 377B,776B5,177777B,77777400B

*DO EVERYTHING NECESSARY TO READ NEXT CHARACTER FROM BYTE POSITION BP.
*      READS CHARACTER AT POSITION BP.
GBINIT EQU *
 BRM UPA (UNPACK BINARY PARAMETERS)
 BRM RDBLK
 LDA N; RSH 23; DIV BF; STB P
 ADM GPT; CNA; ADD =4B7+3777B; STA GWCNT
 LDA BPARAM; ETR =7; MUL =3; LSH 23
 ADD P; CAX; LDB GBTAB,2; STB GB1
 SKB =4B7; MIN GWCNT; LDB* GPT; LDX =3; BRU* GB1
GBTAB BSS 0
 BRU B1R1,4 (0)
 BRM TRAP (1)
 BRM TRAP (2)
 BRU B1L1,4 (3)
 BRM TRAP (4)
 BRM TRAP (5)
 BRU B2R1,4 (6)
 BRU B2R2 (7)
 BRM TRAP (8)
 BRU B2L1,4 (9)
 BRU B2L2 (10)
 BRM TRAP (11)
 BRU B3RI0 (12)
 BRU B3RI1 (13)
 BRU B3RI2 (14)
 BRU B3LI0 (15)
 BRU B3LI1 (16)
 BRU B3LI2 (17)

B3RI2 BSS 0
B3LI2 LSH 8
 EAX -1,2
B3RI1 BSS 0
B3LI1 LSH 8
 EAX -1,2
B3RI0 BSS 0
B3LI0 STB WORD
 SUB =0
 STX CHRCNT
 MIN GPT
 LDA GB-1; STA GB1; BRU GB1

*READ NEXT SEQUENTIAL INPUT BLOCK
$NSBI 0
 LDA BLKNO; ADD =1; BRM RDBLK
 LDA =4B7+3777B; STA GWCNT
 LDA =BUFFER; STA GPT
 BRR NSBI

*READ PAGE 'A' FROM INPUT FILE
RDBLK 0
       STA T1 (SAVE DESIRED BLOCK NO)
       BRM WRBLK (WRITE OUT OLD IF CHANGED)
       LDA =BUFFER; STA GPT
       LDA T1; XMA BLKNO; SNE T1; BRR RDBLK
       BRM RBZ (READ CONTENTS)
       BRR RDBLK

*              INITIALIZE TRANSMITTERS AND FILE READERS
$ITF 0
 BRM RINIT
 LDA =-1; STA BLKNO
 STA UPDMOD    (NOT UPDATE MODE)
 STA MASKFG    (DO NOT MASK BUFFER)
 STA CHGFLG    (BUFFER NOT CHANGED)
 CLA; STA BP; STA BP0
 LDA GA-2; STA GA1
 LDA GB-2; STA GB1
 LDA A-1; STA AC1
 BRR ITF

SIZE 0;*      RETURN FILE BYTE COUNT (DEPENDS ON BPARAM)
 RSP TFILE; RSH 23; DIV =3; STB T1 (REMAINDER)
 MUL BF; LSH 23; STA CCR
 LDA BPARAM; ETR =7; MUL =3; LSH 23; ADD T1; COPY AX,B
 LDA ADJ,2; ADM CCR
 STB CPTOP2    (RESIDUAL IS ZERO)
 LDA CCR
 STA CPTOP1    (TOTAL FILE BYTES IDENTICAL TO CCR)
 BRR SIZE
ADJ DATA 0,0,0 (RIGHT FILL, BLOCKING=1)
 DATA 0,1,1 (LEFT FILL, BLOCKING=1)
 DATA 0,0,1 (RIGHT FILL, BLOCKING=2)
 DATA 0,1,2 (LEFT FILL, BLOCKING=2)
 DATA 0,1,2 (RIGHT FILL, BLOCKING=3)
 DATA 0,1,2 (LEFT FILL, BLOCKING=3)

SORT 0
       CLA; LDX =ST-STE; LDB STE,2; STB WORKE,2; STA RANKTE,2; ADD =1; BRX *-4
       LDA =STE-ST-1; STA T1
SORT1  LDA T1; STA T2
SORT2  LDX T2; LDA WORK,2; LDX T1; SKG WORK,2; BRU SORT4
SORT3  SKR T2; BRU SORT2
       SKR T1; BRU SORT1
       LDA =STE-ST-1; STA T1
       LDX T1; LDA RANKT,2; XXA; STA RANK,2; SKR T1; BRU *-5
       BRR SORT
SORT4  LDA WORK,2; LDX T2; XMA WORK,2; LDX T1; STA WORK,2
       LDA RANKT,2; LDX T2; XMA RANKT,2; LDX T1; STA RANKT,2
       BRU SORT3

THRESH 0;* SKIP IF ASCII COMPRESSION IS LIKELY TO FAIL
* T1=TOTAL OF CHARS RANK(0) THRU RANK(20)
* T2=TOTAL OF CHARS RANK(62) THRU RANK(255)
 CLA; STA T2
 LDX =LC; STX T; LDX T
 LDX RANKT,2
 ADD ST,2
 SKR T; BRU *-4; STA T1
 LDX =NT; STX T
 LDX RANKT,2; LDA ST,2; ADM T2
 LDA T; ADD =1; COPY AX,B
 SKG =STE-ST-1
 BRU *-8
* DO NOT COMPRESS IF TRUE.  ASSUME ONLY 10% OF COMBINING CHARS COMBINE
*      TO MAKE TEST SENSITIVE TO PRESENCE OF CHARS REQUIRING ESCAPE
* .9*T1 + 2*T2 + [NT+2] > T1 + T2
*  T2 + [NT+2] > .1*T1
* 10*T2 + 10*[NT+2] > T1
 LDA T2; MUL =10; LSH 23; ADD =10*[NT+2]
 XMA T1; SKG T1 
 MIN THRESH
 BRR THRESH

SWAC 0;*       SKIP IF ASCII COMPRESSION SHOULD NOT BE APPLIED
 MIN SWAC
 LDB COPT
 SKB =ASCII
 BRU *+2
 BRR SWAC
 LDA CCR       (ASSUME WE WILL GET 50% COMPRESSION)
 SKG =2*[NT+2] (ARE THERE ENOUGH CHARS LEFT TO JUSTIFY SENDING RANKT)
 BRR SWAC      (NO)
 SKB =AUTO
 BRM THRESH    (TEST IF AUTO OPTION)
 BRU *+2
 BRR SWAC      (INSUFFICIENT)
 LDA =-1
 ADM SWAC      (MAKE NON-SKIP RETURN)
 BRR SWAC

SWBAC 0;*      (SELECT BINARY OR ASCII COMPRESSION)
 LDA BCTRANS-1
 STA TRANS     (BINARY COMPRESSION MODE ASSUMED)
 LDA =BCMCOD
 STA RECTYP    (MAKE BINARY COMPRESSION DATA RECORD)
 BRM SORT
 LDA RANKT
 STA PREFER
* TEST TO SEE IF WE SHOULD BE USING ASCII COMPRESSION
 BRM SWAC
 BRU TA4 (YES)
 BRR SWBAC
TA4 LDA =ACMCOD
 STA RECTYP
 LDA ACTRANS-1
 STA TRANS
 BRR SWBAC

*      BINARY COMPRESSION CODE.  PURPOSELY WRITTEN TO MINIMIZE EXECUTION
*      TIME.  MODIFY WITH CAUTION.  AVG OVERHEAD IS 14 CYCLES FOR NON-
*      REPEATING BYTES.

       BRM *+1
BCTRANS 0;*                    TRANSMIT DATA USING BINARY COMPRESSION METHOD
       SKN HSW                 (SHOULD WE GENERATE A HEADER)
       BRU BCT0                (NO, ALREADY DONE)
       MIN HSW
 BRM BDIAG
       W =EM
       W RECTYP
       W PREFER
BCT0   LDA COPT                (CHECK COMPRESSION OPTIONS)
       SKA =AUTO
       BRU S0                  (BEGIN COMPRESSION)
BCT1   EQU *                   (NO COMPRESSION)
       EXU G
       BRU *+2
       BRR BCTRANS
       SKG =EM
       SKG =CAN-1
       BRU BCT2
       STA CHAR
       W =CAN
       LDA CHAR
BCT2   BRM CW
       BRU BCT1

S0     EXU G; BRU S0B; BRR BCTRANS
S0A    CXA
S0B    SKE PREFER; BRU D0; EXU G; BRU S0C
S1     EQU *   OUTPUT ONE PREFERRED CHAR AND EXIT
       LDA PREFER; STA CHAR
D2     EQU *   OUTPUT ONE NON-PREFERRED CHAR AND EXIT
       W1 CHAR
       BRR BCTRANS
S0C    SKE PREFER; BRU S2; EXU G; BRU S0D
S3     EQU *  OUTPUT 2 PREFERRED CHAR AND EXIT
       LDA PREFER; STA CHAR
D4     EQU *  OUTPUT 2 NON-PREFERRED CHAR AND EXIT
       W2 CHAR
       BRR BCTRANS
S0D    SKE PREFER; BRU S4
       LDA =MAXP-MINP-1; STA TT        (REPEATED 3 OR MORE TIMES)
S0E    EXU G; BRU S0F
S5     EQU *  OUTPUT 3 OR MORE PREFERRED CHAR AND EXIT
       W =EM
       LDA =BIASP+MAXP-MINP-1; SUB TT; BRM CW
       BRR BCTRANS
S0F    SKE PREFER; BRU S6; SKR TT; BRU S0E
*             OUTPUT 130 PREFERRED CHAR AND CONTINUE
       W =EM
       W =BIASP+MAXP-MINP
       BRU S0

D0     STA CHAR                        (FOUND NON-PREFERRED CHAR)
D1     EXU G; BRU *+2; BRU D2; SKE CHAR; BRU D3
       EXU G; BRU *+2; BRU D4; SKE CHAR; BRU D5
       EXU G; BRU D1A
* OUTPUT 3 NON-PREFERRED CHAR AND EXIT
       W3 CHAR
       BRR BCTRANS
D1A    SKE CHAR; BRU D7
       LDA =MAXC-MINC-1; STA TT        (REPEATED 4 OR MORE TIMES)
D1B    EXU G; BRU D1C
D8     EQU *  OUTPUT 4 OR MORE NON-PREFERRED CHAR AND EXIT
       W =EM
       LDA =BIASC+MAXC-MINC-1; SUB TT; BRM CW
       W CHAR
       BRR BCTRANS
D1C    SKE CHAR; BRU D9; SKR TT; BRU D1B
*             OUTPUT 59 NON-PREFERRED CHAR AND CONTINUE
       W =EM
       W =BIASC+MAXC-MINC
       W CHAR
       BRU S0
D3     EQU * FOUND DIFFERENT CHAR AFTER 1 NON-PREFERRED CHAR
       CAX
       W1 CHAR
       BRU S0A                 (TEST NEW CHAR FOR PREFERRED)
D5     EQU * FOUND DIFFERENT CHAR ATER 2 NON-PREFERRED CHAR
       CAX
       W2 CHAR
       BRU S0A
D7     EQU * FOUND DIFFERENT CHAR AFTER 3 NON-PREFERRED CHAR
       CAX
       W3 CHAR
       BRU S0A
D9     EQU * FOUND DIFFERENT CHAR AFTER 4 OR MORE NON-PREFERRED CHAR
       STA T                   (SAVE NEW)
       W =EM
       LDA =BIASC+MAXC-MINC-1; SUB TT; BRM CW
       W CHAR
       LDA T
       BRU S0B
S2     EQU * FOUND NON-PREFERRED CHAR AFTER 1 PREFERRED CHAR
       STA CHAR
       W1 PREFER
       BRU D1
S4     EQU * FOUND NON-PREFERRED CHAR AFTER 2 PREFERRED CHAR
       STA CHAR
       W2 PREFER
       BRU D1
S6     EQU * FOUND NON-PREFERRED CHAR AFTER 3 OR MORE PREFERRED CHAR
       STA CHAR
       W =EM
       LDA =BIASP+MAXP-MINP-1; SUB TT; BRM CW
       BRU D1

*      ASCII COMPRESSION CODE.

       BRM *+1
ACTRANS 0
 SKN HSW       (DO WE NEED TO MAKE RECORD HEADER)
 BRU A0        (NO)
 MIN HSW
 BRM ADIAG
 W =EM
 W RECTYP
 LDA SORT; SKE =0; BRU *+2; BRM SORT
 CLEAR; STA SORT
 LDA RANKT,2
 BRM CW
 EAX 1,2
 CXA
 SKG =LT
 BRU *-5
A0     BRM A; BRU A0B; BRR ACTRANS
A0A    CXA
A0B    SKE =NT+BIASA; BRU AD0; BRM A; BRU A0C
*      OUTPUT PREFERRED BYTE AND EXIT
       W =NT+BIASA; BRR ACTRANS
A0C    SKE =NT+BIASA; BRU AS2; LDA =MAXPA-MINPA-1; STA TT
A0D    BRM A; BRU A0E
*      OUTPUT 2 OR MORE PREFERRED BYTE AND EXIT
       LDA =BIASPA+MAXPA-MINPA-1; SUB TT; BRM CW
       BRR ACTRANS
A0E    SKE =NT+BIASA; BRU AS4; SKR TT; BRU A0D
*      OUTPUT 17 PREFERRED BYTES AND CONTINUE
       W =BIASPA+MAXPA-MINPA
       BRU A0
AD0    STA CHAR
AD1A   BRM A; BRU AD1B
*      OUTPUT BYTE AND EXIT
       W CHAR
       BRR ACTRANS
AD1B   SKE CHAR; BRU AD3; BRM A; BRU AD1C
*      OUTPUT 2 BYTES AND EXIT
       RPT 2; W CHAR; ENDR
       BRR ACTRANS
AD1C   SKE CHAR; BRU AD5; BRM A; BRU AD1D
*      OUTPUT 3 BYTES AND EXIT
       RPT 3; W CHAR; ENDR
       BRR ACTRANS
AD1D   SKE CHAR; BRU AD7; LDA =MAXC-MINC-1; STA TT
AD1E   BRM A; BRU AD1F
*      OUTPUT 4 OR MORE REPEATED BYTES AND EXIT
       W =EM
       LDA =BIASC+MAXC-MINC-1; SUB TT; BRM CW
       W CHAR
       BRR ACTRANS
AD1F   SKE CHAR; BRU AD9; SKR TT; BRU AD1E
*      OUTPUT 59 REPEATED BYTES AND CONTINUE
       W =EM
       W =BIASC+MAXC-MINC
       W CHAR
       BRU A0
AD3    EQU * FOUND DIFFERENT BYTE AFTER 1 NON-PREFERRED BYTE
       CAX
       W CHAR
       BRU A0A
AD5    EQU * FOUND DIFFERENT BYTE AFTER 2 NON-PREFERRED BYTE
       CAX
       RPT 2; W CHAR; ENDR
       BRU A0A
AD7    EQU * FOUND DIFFERENT BYTE AFTER 3 NON-PREFERRED BYTE
       CAX
       RPT 3; W CHAR; ENDR
       BRU A0A
AD9    EQU * FOUND DIFFERENT BYTE AFTER 4 OR MORE NON-PREFERRED BYTE
       STA T
       W =EM
       LDA =BIASC+MAXC-MINC-1; SUB TT; BRM CW
       W CHAR
       LDA T
       BRU A0B
AS2    EQU * FOUND NON-PREFERRED BYTE AFTER 1 PREFERRED BYTE
       STA CHAR
       W =NT+BIASA
       BRU AD1A
AS4    EQU * FOUND NON-PREFERRED BYTE AFTER 2 OR MORE PREFERRED BYTES
       STA CHAR
       LDA =BIASPA+MAXPA-MINPA-1; SUB TT; BRM CW
       BRU AD1A

* GET ASCII COMPRESSED BYTE.  SKIP FOR END OF RECORD
       EXU G
A 0
AC1 EXU G; BRU AC4
AC2 MIN A
AC3 LDA AC6    (RETRIEVE CHAR)
 LDB A-1; STB AC1
 BRR A
AC4 COPY AX,AB
 LDA RANK,2
 SKG =LM (MASTER)
 BRU MS1 (YES)
 SKG =LT (NO, TRANSLATING)
 BRU TR1 (YES)
 CBA; MRG =400B                (THIS CHAR MAY NOT START A DUPLICATE STRING)
 STA AC6 (SAVE CHAR)
* ESCAPED BYTE
AC5 LDA AC3B; STA AC1          (SET TO OUTPUT SAVED BYTE NEXT)
 LDA =CAN; BRR A
TR1 EQU *      TRANSLATING CHAR
 ADD =BIASA; BRR A
MS1 EQU *      MASTER CHAR
 STA RANK0     (SAVE RANK)
 EXU G
 BRU MS2
 LDA AC2B; STA AC1             (SET TO DO SKIP RETURN NEXT)
 LDA RANK0; ADD =BIASA; BRR A  (TRANSLATE LAST CHAR IN RECORD)
MS2 COPY AB,AX
 LDA RANK,2
 SKG =LC       (COMBINING)
 BRU MS3       (YES)
 SKG =LT       (NO, TRANSLATING)
 BRU TR2       (YES)
 CBA; MRG =400B                (THIS CHAR MAY NOT START A DUPLICATE STRING)
 STA AC6       (SAVE BYTE)
 LDA AC5B; STA AC1             (SET TO DO ESCAPE PAIR NEXT)
 LDA RANK0; ADD =BIASA; BRR A  (TRANSLATE MASTER CHAR)
TR2 ADD =BIASA
 STA AC6                       (SAVE TRANSLATED CHAR)
 LDA AC3B; STA AC1             (SET TO OUTPUT AC6 NEXT)
 LDA RANK0; ADD =BIASA; BRR A  (TRANSLATE MASTER CHAR)
MS3 EQU *      COMBINING CHAR (8*21 COMBOS-- 130 THRU 377)
 LDX RANK0
 ADD NCRT,2    RANK0*NC
 ADD =BIASA+NT (=130)
 BRR A
AC3B BRU AC3   (OUTPUT AC6 NEXT)
AC5B BRU AC5   (DO ESCAPE PAIR NEXT)
AC2B BRU AC2   (DO EOR SKIP RETURN NEXT)
NCRT EQU *     MULTIPLICATION TABLE RANK0*NC
       RPT (X=0,LM)
       DATA X*NC
       ENDR

* SOME STORAGE ARRAYS
DNOR   BSS 3*256               DONOR CHECK BLOCK
RCVR   BSS 3*256               RECEIVER CHECK BLOCK
ST     BSS 256 (COUNT OF CHAR. FREQUENCY INDEXED BY CHAR)
STE    EQU *
RANKT  BSS 256 (CHARACTER INDEXED BY RANK)
RANKTE EQU *
RANK   BSS 0   (RANK INDEXED BY CHARACTER)
WORK   BSS 256
WORKE  EQU *
 END
TELECOPY ** FICHE/FRAME BREAK *****
TSENDIT SYMSORT

SYM.  PG.LN. IDENT.

A      23 22 TSENDIT A0     21 31 TSENDIT A0A    21 32 TSENDIT 
A0B    21 33 TSENDIT A0C    21 36 TSENDIT A0D    21 37 TSENDIT A0E    22  2 TSENDIT 
AC1    23 23 TSENDIT AC2    23 24 TSENDIT AC2B   24 29 TSENDIT AC3    23 25 TSENDIT 
AC3B   24 27 TSENDIT AC4    23 28 TSENDIT AC5    23 37 TSENDIT AC5B   24 28 TSENDIT 
ACTRAN 21 16 TSENDIT AD0    22  6 TSENDIT AD1A   22  7 TSENDIT AD1B   22 11 TSENDIT 
AD1C   22 15 TSENDIT AD1D   22 19 TSENDIT AD1E   22 20 TSENDIT AD1F   22 26 TSENDIT 
AD3    22 32 TSENDIT AD5    22 36 TSENDIT AD7    23  1 TSENDIT AD9    23  5 TSENDIT 
ADJ    16 22 TSENDIT AS2    23 12 TSENDIT AS4    23 16 TSENDIT ASCTAB 10  5 TSENDIT 
B1L1   13 31 TSENDIT B1R1   13 37 TSENDIT B2L1   13  7 TSENDIT B2L2   13 12 TSENDIT 
B2L3   13 16 TSENDIT B2L4   13 17 TSENDIT B2R1   13 21 TSENDIT B2R2   13 26 TSENDIT 
B3LI0  15 17 TSENDIT B3LI1  15 14 TSENDIT B3LI2  15 11 TSENDIT B3RI0  15 16 TSENDIT 
B3RI1  15 13 TSENDIT B3RI2  15 10 TSENDIT BCT0   18 34 TSENDIT BCT1   18 37 TSENDIT 
BCT2   19  8 TSENDIT BCTRAN 18 26 TSENDIT BEX     3 25 TSENDIT BEXB    3 35 TSENDIT 
BEXCK   4 20 TSENDIT BEXFAA  4 27 TSENDIT BEXFBB  4 29 TSENDIT BEXFDD  4 35 TSENDIT 
BEXFIN  4 26 TSENDIT BEXL    3 33 TSENDIT BSWD    8 15 TSENDIT CONT   12  7 TSENDIT 
CR1    10 24 TSENDIT D0     19 38 TSENDIT D1     19 39 TSENDIT D1A    20  6 TSENDIT 
D1B    20  8 TSENDIT D1C    20 14 TSENDIT D2     19 16 TSENDIT D3     20 20 TSENDIT 
D4     19 22 TSENDIT D5     20 24 TSENDIT D7     20 28 TSENDIT D8     20  9 TSENDIT 
D9     20 32 TSENDIT DATA   12 22 TSENDIT DNOR   24 35 TSENDIT ELOR    6 31 TSENDIT 
ELOR1   6 27 TSENDIT ENDR1   8 27 TSENDIT ENDREC  8 21 TSENDIT EOB    13  1 TSENDIT 
EPOR    7  2 TSENDIT ESC1   10 27 TSENDIT ESC2   10 31 TSENDIT G105   11 39 TSENDIT 
GA      9  5 TSENDIT GA1     9  9 TSENDIT GA2     9 14 TSENDIT GA3     9 20 TSENDIT 
GA3A    9 17 TSENDIT GA4     9 27 TSENDIT GAINIT  9 31 TSENDIT GB     12 30 TSENDIT 
GB1    12 31 TSENDIT GB2    12 34 TSENDIT GB3    12 35 TSENDIT GBINIT 14 21 TSENDIT 
GBTAB  14 29 TSENDIT GC60    7 34 TSENDIT GCHT    2 13 TSENDIT GCOD    7 38 TSENDIT 
GWRD   12 36 TSENDIT INITRN  7 29 TSENDIT ITF    16  1 TSENDIT LC1    12 14 TSENDIT 
LM*    24 34 TSENDIT LM*    23 20 TSENDIT LM*    21 13 TSENDIT LM*    18 21 TSENDIT 
LM*    12 26 TSENDIT LM*     9  1 TSENDIT LMSLOR  6 13 TSENDIT LMSORT 16 28 TSENDIT 
MB1    11  6 TSENDIT MB2    11 11 TSENDIT MB3    11 17 TSENDIT MB4    11 24 TSENDIT 
MB5    11 25 TSENDIT MB6    11 32 TSENDIT MS1    24  2 TSENDIT MS2    24  8 TSENDIT 
MS3    24 22 TSENDIT MSK    14 17 TSENDIT NCRT   24 30 TSENDIT NSBI   15 24 TSENDIT 
OINPF   1 16 TSENDIT OINPF2  1 19 TSENDIT OINPF3  1 21 TSENDIT RANK   25  2 TSENDIT 
RANKT  24 39 TSENDIT RANKTE 25  1 TSENDIT RCVR   24 36 TSENDIT RDBLK  15 31 TSENDIT 
RINIT   8  7 TSENDIT RS1    10 36 TSENDIT RS2    11  1 TSENDIT RUPCNT  7  6 TSENDIT 
S0     19 11 TSENDIT S0A    19 12 TSENDIT S0B    19 13 TSENDIT S0C    19 19 TSENDIT 
S0D    19 25 TSENDIT S0E    19 27 TSENDIT S0F    19 32 TSENDIT S1     19 14 TSENDIT 
S2     20 39 TSENDIT S3     19 20 TSENDIT S4     21  4 TSENDIT S5     19 28 TSENDIT 
S6     21  8 TSENDIT SACK    7 25 TSENDIT SCOD    8  3 TSENDIT SCRAA   4  6 TSENDIT 
SCRBB   4  8 TSENDIT SCRCC   4 14 TSENDIT SCRDD   4 16 TSENDIT SIZE   16 13 TSENDIT 
SNAK    7 18 TSENDIT SORT1  16 31 TSENDIT SORT2  16 32 TSENDIT SORT3  16 33 TSENDIT 
SORT4  16 38 TSENDIT SPOR    6 35 TSENDIT ST     24 37 TSENDIT STE    24 38 TSENDIT 
SWAC   17 26 TSENDIT SWBAC  18  4 TSENDIT TA1     2 27 TSENDIT TA2     3  2 TSENDIT 
TA4    18 16 TSENDIT TA5     2 25 TSENDIT TA6     2 39 TSENDIT TAEND   3  6 TSENDIT 
TAFIN   3 15 TSENDIT TF      1  8 TSENDIT TF0     1 36 TSENDIT TF00    1 32 TSENDIT 
TF01    1 35 TSENDIT TF1     2 16 TSENDIT TF3     2 18 TSENDIT TF4     3 18 TSENDIT 
THRESH 17  3 TSENDIT TR1    23 39 TSENDIT TR2    24 18 TSENDIT UPA    14  4 TSENDIT 
USLOR   7 12 TSENDIT USND    4 39 TSENDIT USND1   5 13 TSENDIT USND2   5 17 TSENDIT 
USND2A  5 35 TSENDIT USND3   5 39 TSENDIT USND4   6  7 TSENDIT USND5   5 23 TSENDIT 
USND6   6 12 TSENDIT WORK   25  3 TSENDIT WORKE  25  4 TSENDIT 
TELECOPY ** FICHE/FRAME BREAK *****
LOADSLV
RES
XDD
0;TT0
;TS0
;TGC0
;TCW0
;TTG0
;TTS0
;U
%QSAV 3 TO 17777 ON AUXMOX

240
DUM DTELECOPYSLV

"
FILES AND CHECKSUMS
"
CHECKSUM
.
TELMSG-MESSAGE-FILE
TELECOPY-GO-FILE-CONTROLLER
AUXMOX-GO-FILE-SLAVE
DTELECOPY-DUMP-FILE-CONTROLLER
DTELECOPYSLV-DUMP-FILE-SLAVE
TELECOPYDOC-INTERNAL-DOCUMENTATION
MAKETEL-COMMANDS-FILE
LOADTEL
LOADSLV
TPARAM-PARAMETERS
TELCOP23-PARSER
SLAVE-SLAVE
MASTER-CONTROLLER
TSENDIT-FILE-PUSH
TGETIT-FILE-PULL
OPTIONS-PARSER-OPTION-COMMANDS
CW-CHAR-WRITE
GC-CHAR-GET
STELMSG-MESSAGES
.
COM T
TELECOPY ** FICHE/FRAME BREAK *****
LOADTEL
RES
XDD
0;TT0
;TB23
;TGC0
;TCW0
;TTG0
;TTS0
;TM0
;TBO
;U

OPT1-6[;Q+4B7
;Q+4B7
%QDUM DTELECOPY

SAV 3 TO 23777 ON TELECOPY

240
COM LOADSLV
TELECOPY ** FICHE/FRAME BREAK *****
MAKETEL
NARP
TPARAM
T0


CON
TELCOP23
B23


CON
MASTER
M0


CON
TGETIT
TG0


CON
TSENDIT
TS0


CON
SLAVE
S0


CON
GC
GC0


CON
CW
CW0


CON
OPTIONS
BO


NARP
STELMSG
//


RES
XDD
0;T//
%QSAV 0 TO 7777 ON TELMSG

DEL //
COM LOADTEL
TELECOPY ** FICHE/FRAME BREAK *****
TELECOPYDOC

               REVISED TELECOPY DOCUMENT (05/26/77)


INTRODUCTION
------------

THIS DOCUMENT OUTLINES COMPRESSION SCHEMES AND PROTOCOL FOR A
REVISED TELECOPY FACILITY UTILIZING BUFFERED TERMINAL I/O ON
THE TYMCOM IX, X, AND 370 OPERATING SYSTEMS.  ALL NUMBERS ARE
EXPRESSED IN THE OCTAL RADIX UNLESS OTHERWISE NOTED.

TALK MODE
---------

TELECOPY CONSISTS OF TWO PROGRAMS, A CONTROLLER AND SLAVE.  THE
CONTROLLER IS OPERATED BY, OR CAUSED TO OPERATE, BY THE
USER.  IT HAS A COMMAND PARSER FOR ACCEPTING FILENAMES AND COMMANDS.
IT BUILDS AN AUXILLIARY CIRCUIT TO A SYSTEM OTHER THAN THE ONE
WHERE THE CONTROLLER IS RUNNING, WHERE IT USUALLY STARTS THE SLAVE
PROGRAM WHICH CAN COMMUNICATE WITH THE CONTROLLER.

IT IS SOMETIMES USEFUL TO INTERACT DIRECTLY WITH THE SLAVE SYSTEM
IN ORDER TO ALTER THE SLAVE MACHINE'S USER ENVIRONMENT.  AN EXAMPLE
IS THE REQUIREMENT TO LINK TO OTHER DISCS OR TO SEARCH FOR A FILENAME
SO THAT TELECOPY CAN BE USED.  THE "TALK" FACILITY IN TELECOPY PERMITS
THE USER TO ENTER TEXT FROM HIS KEYBOARD AND HAVE IT SENT TO THE
SLAVE SYSTEM.

THE TALK COMMAND IN TELECOPY TAKES AN OPTIONAL SYSTEM NO.  IF THE
SYSTEM NO. IS OMITTED, THEN THE EXISTING AUXILLIARY CIRCUIT
IS USED (AN ERROR CONDITION IS REPORTED IF NO CIRCUIT YET EXISTS)
TO SEND A QUIT CODE TO THE TELECOPY SLAVE (CODE 136).  ECHOING
IS DONE BY THE CONTROLLER, SO THAT DOUBLE ECHO MAY BE EXPECTED.

WHEN THE SYSTEM NO. IS SPECIFIED WITH THE TALK COMMAND, THE ACTION
IS THE SAME AS DESCRIBED ABOVE IF THE SYSTEM NO. IS THE SAME AS
THE SYSTEM TO WHICH AN EXISTING CIRCUIT IS BUILT.  IF NO CIRCUIT
CURRENTLY EXISTS OR A DIFFERENT SYSTEM NO. IS SPECIFIED, THEN
THE EXISTING CIRCUIT IS BROKEN AND A NEW CIRCUIT IS BUILT TO
THE LOGGED-IN USERID ON THE NEW SYSTEM.  THE TELECOPY SLAVE
IS NOT STARTED AT THIS TIME, BUT ONLY AFTER TALK MODE HAS BEEN
EXITED AND SOME OTHER TELECOPY FACILITY IS INVOKED.

TALK MODE CAN BE EXITED BY TYPING A %%F AT THE KEYBOARD.

IF THE USER QUITS THE TELECOPY CONTROLLER, ALL CIRCUITS ARE BROKEN.

DATA MODES
----------

TELECOPY SUPPORTS SEVERAL DATA AND COMPRESSION MODES.  THE CONTROLLER
KEEPS A LIST OF TRANSMITTER AND RECEIVER PARAMETERS.  THE TRANSMIT
PARAMETERS ARE SENT TO THE SLAVE WHEN THE SLAVE IS THE DONOR.  THE 
RECEIVE PARAMETERS ARE SENT TO THE SLAVE WHEN THE SLAVE IS THE
RECEIVER.

THE DEFAULT TRANSMIT AND RECEIVE PARAMETERS ARE DETERMINED BY CONTROLLER
AND SLAVE TYPE.  WHEN THESE ARE UNEQUAL, THE PARAMETERS WILL BE INITIALIZED
TO PROVIDE ASCII TRANSMISSION WITH RANK COMPRESSION.  WHEN THE CONTROLLER/
SLAVE TYPES ARE EQUAL, THEN THE FOLLOWING PARAMETERS PREVAIL:

       1.  940 TRANSMIT        RECEIVE
               BINARY          BINARY
               BYTESIZE=8      BYTESIZE=8
               BLOCKING=3      BLOCKING=3
               FILL=LEFT       FILL=LEFT
               RANK AUTO COM-  RANK AUTO COM-
               PRESSION.       PRESSION.

       2.  10  TRANSMIT        RECEIVE
               BINARY          BINARY
               BYTESIZE=7      BYTESIZE=7
               BLOCKING=5      BLOCKING=5
               FILL=LEFT       FILL=LEFT
               RANK AUTO COM-  RANK AUTO COM-
               PRESSION.       PRESSION.

       3.  370 TRANSMIT        RECEIVE

               BINARY          BINARY
               BLOCKING=4      BLOCKING=4
               BYTESIZE=8      BYTESIZE=8
               DUPLICATE       DUPLICATE
               PRESSION        PRESSION
               METHOD          METHOD

THERE WILL BE A MODE COMMAND WHICH ALLOWS THE USER TO OVERRIDE THE
TRANSMIT AND RECEIVE PARAMETERS WITH HIS OWN SELECTION.  THE FORMAT OF
THIS COMMAND IS:

                [ ASCII  ]
                [ EBCDIC ]
MODE [TRANSMIT] [ BINARY ] [BYTESIZE=N] [BLOCKING=N] [FILL=LEFT/RIGHT]
     [RECEIVE ] [KATAKANA]
                [ SERIAL ]
                [ IMAGE  ]

WHEN [TRANSMIT/RECEIVE] ARE OMITTED, BOTH SETS OF PARAMETERS ARE UPDATED.
AT RUN TIME THE TRANSMIT AND RECEIVE TABLES WILL BE CHECKED AND NO
TRANSMISSION WILL TAKE PLACE IF MIXED MODE IS DETECTED.  NOTE THAT IN
BINARY MODE, THE TRANSMITTER AND RECEIVER MAY HAVE DIFFERENT BYTESIZE
AND/OR FILL AND/OR BLOCKING SPECIFICATIONS.


IN ORDER TO OVERRIDE THE DEFAULT COMPRESSION MODES, A COMPRESSION
COMMAND WILL BE IMPLEMENTED.  THE FORMAT OF THIS COMMAND IS AS FOLLOWS:

COMPRESS [    OFF ]
         [ DUPLICATE ]
         [  RANK ] [ AUTO ]

MODES OF DATA TRANSMISSION
--------------------------

BINARY MODE--  THE DONOR PRECEDES TRANSMISSION WITH AN 8-BIT BYTE WHICH
               CONTAINS THE FOLLOWING THREE PARAMETERS:
       BYTESIZE - 3 BITS - FROM 1 TO 8 BITS.  DATA IS ALWAYS TRANSMITTED
               IN 8-BIT BYTES THROUGH TYMNET.  ONLY THE LEAST
               SIGNIFICANT "BYTESIZE" BITS OF THE BYTE CONTAIN DATA.
       BLOCKING FACTOR - 4 BITS - THE NO. OF BYTES TO BE STORED IN THE
               RECEIVER'S MACHINE WORD.
       LEFT/RIGHT FILL - 1 BIT - IF ONE, THEN FILL IS FROM THE LEFT.  IF
               NOTE:  WHEN THE RECEIVER'S WORDSIZE IS NOT AN EVEN MULTIPLE
               OF THE BYTESIZE, A PARTIAL BYTE MAY EXIST TO THE RIGHT
               (LEFT) OF THE BLOCKED DATA WHEN LEFT(RIGHT)
               FILL IS USED.  THIS PARTIAL BYTE SHOULD BE ZEROED BY
               THE RECEIVER.
               ANY UNFILLED BYTES IN THE RECEIVER'S WORD ARE TO BE ZEROED.

SERIAL--       THE DONOR TRANSMITS THE CONTENTS OF THE SEND FILE BITWISE,
               WHICH WILL BE STORED SERIALLY IN THE RECEIVER'S FILE.
               A COUNT OF THE TOTAL NO. OF BITS IN THE FILE IS SENT AT
               THE END OF TRANSMISSION TO AID IN TRUNCATING A FILE TO
               THE CORRECT SIZE.
               NO INFORMATION ABOUT THE STRUCTURE OF THE
               FILE (E.G. RECORD LENGTHS) OR OTHER THAN DATA ACTUALLY
               CONTAINED IN THE FILE, WILL BE TRANSMITTED.  IF STRUCTURAL
               INFORMATION MUST BE SENT, IT SHOULD BE ADDED TO THE CONTENTS
               OF THE FILE BY SOME PROCEDURE BEFORE SENDING.

IMAGE--        SAME AS SERIAL MODE, BUT THE DATA PRESENTS AN IMAGE OF A
               HYPOTHETICAL FILE SYSTEM WHEREIN VARIABLE-LENGTH RECORDS
               ARE REPRESENTED AS TWO BYTES CONTAINING THE DATA LENGTH
               (IN 8-BIT BYTES) OF A DATA STRING WHICH FOLLOWS.  THE
               TYMCOM 370 WILL USE THIS INFORMATION
               TO CREATE A V-FORMAT FILE WITH THE INDICATED RECORD LENGTHS,
               AND WILL USE THIS MODE TO COPY AN IMAGE OF A V-FORMATTED FILE
               TO THE TYMCOM IX OR X.

ASCII--        THE DONOR CONVERTS ITS DATA STREAM TO EXTERNAL ASCII
               WITHOUT PARITY (BYTESIZE=7).  TABS ARE CONVERTED TO BLANKS.
               A RECORD SEPARATOR (RS=36) REPLACES THE END-OF-RECORD
               CHARACTER SEQUENCE.  AN ESCAPE CODE (ESC=33) PREFIXES
               THE CHARACTERS ESC=33 AND RS=36.  NOTE:  CR ONLY (OVERPRINT)
               IS SENT AS CR=15.

KATAKANA--     LIKE ASCII EXCEPT THAT THE DONOR CONVERTS ITS DATA STREAM
               TO THE KATAKANA CHARACTER SET (SOMEWHAT LARGER THAN ASCII).

EBCDIC--       LIKE ASCII EXCEPT THAT BYTESIZE=8 AND TABS ARE NOT
               EXPANDED.  PROVIDES A CONVENIENT METHOD FOR IMAGE COPY
               OF A FILE WITH VARIABLE-LENGTH RECORDS FROM ONE EBCDIC
               MACHINE TO ANOTHER.

BANDWIDTH OPTIMIZATION
------------------------

DUPLICATE COMPRESSION-- THE DONOR WILL COMPRESS ANY BYTE REPEATED MORE THAN
               THREE TIMES WITH THREE BYTES:
               CONTROL ESCAPE CODE-- EM=31
               CONTROL CODE-- BS=10 THRU ?=77.  REPEAT COUNT BIASED BY 4.
               DATA BYTE TO BE REPEATED

               IN ADDITION, THE DONOR SETS A PREFERED COMPRESSION
               CHARACTER (USUALLY NUL=0 OR BLANK=40) SO THAT ANY
               PREFERED CHARACTER REPEATED MORE THAN TWICE MAY
               BE REPRESENTED BY TWO BYTES:
               CONTROL ESCAPE CODE-- EM=31
               CONTROL CODE-- 200 THRU 377.  REPEAT COUNT BIASED BY 125.

               ONE CODE, CAN=30, IS USED TO ESCAPE CAN =30 AND EM=31
               EXCEPT WHEN THESE
               BYTES ARE PROPERLY ESCAPED BY THE REPEATED BYTE SEQUENCE.


               DUPLICATE COMPRESSION IS THE DEFAULT COMPRESSION MODE FOR
               BOTH ASCII AND BINARY TRANSMISSION.

RANK COMPRESSION-- THE DONOR HAS THE OPTION OF INVOKING RANK COMPRESSION
               MODE.  BYTESIZE IS GENERALLY 7 OR 8.

               WHEN A FILE IS TRANSMITTED THE FIRST FEW SECONDS
               OF TRANSMISSSION WILL BE SENT USING DUPLICATE COMPRESSION.
               THIS PERIOD WILL BE USED TO BUILD A RANK TABLE FOR
               THE CHARACTER SET.  THE DONOR THEN SENDS A LOGICAL RECORD
               CONTAINING THE FIRST 62 BYTES OF THE TRANSPOSE OF THE RANK
               VECTOR.  ON RECEIPT OF THIS LOGICAL RECORD THE RECEIVER
               ENTERS RANK DECOMPRESSION MODE.

               THERE ARE 8 MASTER CHARACTERS, 21 COMBINING CHARACTERS,
               AND 62 TRANSLATING CHARACTERS IN THE COMPRESSION
               ALGORITHM.  CODES THAT CANNOT BE HANDLED WILL BE
               ESCAPED BY PRECEDING THEM WITH THE DATA ESCAPE CODE
               CAN=30.  THE CONTROL ESCAPE CODE WILL BE EM=31.
               168 CODES ARE REQUIRED FOR REPRESENTING CHARACTER
               COMBINATIONS (8*21).  THESE ARE CODES 130-377.  THE
               HIGHEST RANKING 8 CHARACTERS WILL OCCUPY CODES 32-41.
               THE COMBINING CHARACTERS OCCUPY CODES 32-56.  THE
               TRANSLATING CHARACTERS OCCUPY 32-127.

               ONE CODE, CAN=30, IS USED TO ESCAPE ALL BYTES WHICH
               CANNOT BE TRANSLATED OR COMBINED.

               AFTER COMPACTION, THE ALGORTITHM LOOKS FOR REPEATING
               BYTES AND REPRESENTS THEM USING THE EM=31 CODE
               TO PREFIX THE COUNT AND THE BYTE TO BE REPEATED.
               THE MOST COMMONLY OCCURING CHARACTER AFTER COMPACTION
               SHOULD BE 130.  CODES BS=10 THRU ETB=27 ARE USED
               TO REPRESENT 2 THRU 17 OF THE MOST COMMONLY OCCURING
               PAIR, TYPICALLY 4 THRU 34 BLANKS.

               THE EM-- 200 THRU 377 SEQUENCE IS NOT NEEDED HERE AS IN
               DUPLICATE COMPRESSION.  CONCEIVABLY THE SEQUENCE COULD BE
               USED TO REPRESENT MORE THAN 68 BLANKS.

OCTAL  DECIMAL   DUPLICATE COMPRESSION  RANK COMPRESSION
0-7    0-7         NOT USED            DATA
10     8           2 OF MOST COMMON    DATA
11                 3      CHARACTER    DATA
12     10          4    COMBINATION.   DATA
13     11          5                   DATA
14     12          6                   DATA
15     13          7                   DATA
16     14          8                   DATA
17     15          9                   DATA
20     16          10                  DATA
21     17          11                  DATA
22     18          12                  DATA
23     19          13                  DATA
24     20          14                  DATA
25     21          15                  DATA
26     2           16                  DATA
27     23          17                  DATA
30     24          DATA ESCAPE         DATA ESCAPE--PRECEDES 30,31
31     25          CONTROL ESCAPE      CONTROL ESCAPE--PRECEDES COUNT OR
                                       CONTROL CODE.
                   COUNT 10-77         COUNT 10-77 REPEAT FOR FOLLOWING
                                       CHARACTER.  BIASED BY 8-4=4
                   COUNT 100-177       COUNT 100-177 RESERVED FOR CONTROL
                   COUNT 200-377       COUNT 200-377 REPEAT FOR PREFERED CHAR.
                   NOT USED.           BIASED BY 128-3=125
32     26          MASTER CHAR OF      DATA
                   RANK 0.
33     27          MASTER CHAR OF      DATA
                   RANK 1.
34     28          MASTER CHAR OF      DATA
                   RANK 2.
35     29          MASTER CHAR OF      DATA
                   RANK 3.
36     30          MASTER CHAR OF      DATA
                   RANK 4.
37     31          MASTER CHAR OF      DATA
                   RANK 5.
40     32          MASTER CHAR OF      DATA
                   RANK 6.
41     33          MASTER CHAR OF      DATA
                   RANK 7.
42-56  34-46       COMBINING CHARS.    DATA
57-127 47-87       TRANSLATING CHARS.  DATA
130-
   377 88-255      COMBINING CHARS.    DATA



CONTROLLER/SLAVE TYPE
---------------------

THE CONTROLLER AND THE SLAVE PERFORM AN INITIAL HANDSHAKE WHICH IS
FOLLOWED BY 1 BYTE WHICH IDENTIFIES THE TYPE OF CONTROLLER OR
SLAVE AND 1 BYTE CONTAINING THE PROTOCOL VERSION NO.

THE FORMAT OF THE SLAVETYPE BYTE IS AS FOLLOWS:
BIT 0 - RESERVED
BIT 1 - I MAY RECEIVE DATA TRANSMITTED WITH RANK COMPRESSION
BIT 2 - I MAY RECEIVE KATAKANA DATA (MODE=5)
BIT 3 - I MAY RECEIVE BINARY DATA
BIT 4 - I MAY RECEIVE BINARY DATA IN UPDATE MODE
BITS 5-7 MACHINE TYPE: 1=940; 3=PDP-10; 4=370

AT LEAST ONE OF THE CAPABILITIES IMPLIED BY BITS 1-4 MUST BE
IMPLEMENTED TO INVOKE THE PROTOCOL DESCRIBED IN THIS DOCUMENT.  IN ADDITION,
IT MAY BE ASSUMED THAT ALL CONTROLLERS AND SLAVES ARE CAPABLE OF ASCII MODE
(MODE=1) AND MAY RECEIVE DUPLICATE COMPRESSED DATA RECORDS.


SUMMARY OF CONTROL CODES   (ALL PRECEDED BY CONTROL ESCAPE CODE (EM))
------------------------

DNRCOD
101    REQUEST SLAVE TO BE THE DONOR.  NO RESPONSE WILL BE GIVEN.
RCVCOD
102    REQUEST SLAVE TO BE THE RECEIVER.  NO RESPONSE WILL BE GIVEN.
FLKCOD
103    FILE NAME FOLLOWS AFTER 1 BYTE WHICH TELLS HOW MANY BYTES FOLLOW
       THE FILE NAME STRING BEGINS WITH USER NAME ENCLOSED IN PARENTHESES.
       THE SLAVE LOOKS UP THE USER NAME IN THE LUD AND RETURNS A
       ULKSCD IF FOUND OR A ULKFCD IF NOT FOUND.  IF THE SLAVE AND CONTROLLER
       TYPE ARE BOTH 940 THEN A SUPER GFD IS PERFORMED TO REACH THE
       FILE DIRECTORY OF THE SPECIFIED USER, AND GAN,FDPT, AND UUN FROM
       THE LUD ENTRY ARE RETURNED AS 9 BYTES.  THEN:
       SLAVE LOOKS UP THE FILE.  IF THE SLAVE TYPE AND CONTROLLER
       TYPE ARE BOTH 940 THEN THE USUAL SECURITY RULES ARE RELAXED
       AND THE LOOKUP SUCCEEDS IF THE FILE IS PRESENT, RETURNING 9
       BYTES CONTAINING INFORMATION FROM THE FIRST 3 WORDS OF THE
       FILE DIRECTORY ENTRY.
SUCCOD
104    OPTION ACCEPTED
FLKFCD
106    FILE NOT FOUND (NOT AN ERROR)
ABTCOD
107    STOP WHAT YOU ARE DOING, ABORT
BCMCOD
110    START DATA RECORD, BINARY COMPRESSION METHOD
ACMCOD
111    START DATA RECORD, RANK COMPRESSION METHOD
ACKCOD
112    ACKNOWLEDGEMENT THAT RECORD CHECKSUM AND BYTECOUNT MATCH
NAKCOD
113    CHECKSUM OR BYTECOUNT DO NOT MATCH--RESEND RECORD
FINCD1
114    DONOR HAS SENT ALL RECORDS IN FILE AND IS HAPPY.  FOLLOWED BY
       CPTOP1 AND CPTOP2 FOR RENAMING A FILE TO THE PROPER LENGTH IN
       BINARY MODE.  CPTOP1 IS SENT WITH A 1 BYTE HEADER CONTAINING BYTE
       COUNT FOR REMAINDER OF CPTOP1.  CPTOP2 IS SENT AS A SINGLE BYTE.
       CPTOP1 IS THE NUMBER OF WHOLE 8-BIT BYTES, AND CPTOP2 IS THE NO.
       OF BITS REMAINING.  WHEN DONOR AND RECEIVER ARE BOTH 940 CPTOP2=0
       AND CPTOP1 WILL BE SENT AS FOUR BYTES: 3 X X X.
FINCD2
115    RECEIVER HAS WRITTEN AND CLOSED FILE SUCCESSFULLY
FPFCOD
116    FILE PROTECTION FAILURE
OPFCOD
117    OPEN FAILURE
*      CODES 120-130 SPECIFY OPTIONS TO THE SLAVE.  RESPONSE IS 104
*      TO ACKNOWLEDGE OR 133 IF THE REQUESTED MODE IS NOT SUPPORTED.
*      133 IS NOT CONSIDERED TO BE AN ERROR.
120    RESERVED
CPACOD
121    SPECIFY COMPRESSION.  FOLLOWED BY 1 BYTE:
       0= NONE
       1= BINARY (DEFAULT)
       2= RANK
       3= RANK AUTO (THE DONOR COMPRESSION ALGORITHM MAY DECIDE
       FOR ITSELF WHETHER OR NOT TO INVOKE RANK COMPRESSION)
ONLCOD
122    ON LOWER CASE
       FOLLOWED BY ONE BYTE (ALL 1'S) TO PERMIT LOWER CASE (DEFAULT)
       IF THE BYTE FOLLOWING IS ALL 0'S THEN CONVERT LOWER TO UPPER CASE.
123    RESERVED.
TRUCOD
124    THIS CODE FOLLOWED BY ONE BYTE WHICH INDICATES TRUNCATE RECORD
       STARTING WITH COLUMN INDICATED BY VALUE OF BYTE.  IF VALUE OF
       BYTE IS 0 TURN OFF TRUNCATION.
TRICOD
125    SUPPRESS TRAILING BLANKS (TRIM)
       FOLLOWED BY ONE BYTE (ALL 1'S) TO SUPPRESS TRAILING BLANKS
       IF THE BYTE FOLLOWING IS ALL 0'S THEN DO NOT SUPPRESS (DEFAULT).
126    RESERVED
VARCOD
127    PRODUCE VARIABLE LENGTH RECORDS (DEFAULT)
       FOLLOWED BY 4 BYTES GIVING MAXIMUM RECORD SIZE (TYPICALLY 65535)
FIXCOD
130    PAD WITH BLANKS TO MAKE FIXED LENGTH RECORDS.
       FOLLOWED BY 4 BYTES OF RECORD LENGTH.
LOGCOD
131    TELL SLAVE TO LOG OFF
CHKCOD
132    START FILE DATA CHECKSUM RECORD
NICOD
133    REQUESTED OPERATION NOT IMPLEMENTED
EORCOD
134    END OF TRANSMISSION RECORD
EOTCOD
135    TRANSMISSION RECORD IS LAST IN FILE
QUICOD
136    ABORT THE CURRENT OPERATION (LIKE 107).  QUIT THE SLAVE AND
       RETURN TO THE OPERATING SYSTEM COMMAND LEVEL.
OPNCOD
137    REQUEST SLAVE OPEN FILE FOR DATA TRANSFER (DIRECTION
       DETERMINED BY PREVIOUS 101 OR 102 CODE.  FOLLOWED BY 1 BYTE
       TRANSMISSION TYPE, AND POSSIBLY, OTHER BYTES:
       TYPE = 1 ASCII MODE TRANSFER.  NO BYTES FOLLOW.
       TYPE = 2 EBCDIC MODE TRANSFER.  NO BYTES FOLLOW.
       TYPE = 3 BINARY MODE TRANSFER.  THE RECEIVE FILE, IF PRESENT,
       IS TO BE ERASED.  FOLLOWED BY 1 BYTE OF BINARY PARAMETERS.
       TYPE = 4 BINARY UPDATE MODE.  DONOR AND RECEIVER WILL EXCHANGE
       CHECK RECORDS.  FOLLOWED BY 1 BYTE OF BINARY PARAMETERS AND 2
       BYTES OF UPDATE MODE BLOCKSIZE.
       TYPE = 5 KATAKANA MODE TRANSFER.  LIKE ASCII MODE.
       TYPE = 6 IMAGE MODE.  SERIAL DATA TO BE SPECIALLY INTERPRETTED.
               (SEE DESCRIPTION ABOVE).
       POSSIBLE RESPONSES ARE:  133 (UPDATE MODE NOT IMPLEMENTED OR
       PARAMETERS NOT ACCEPTABLE), 104 (FILE OPENED), 116 (FILE PROTECTION
       FAILURE), OR 117 (FILE OPEN FAILURE).
FENQCD
140    REQUEST SLAVE DONOR TO SEND FILE ATTRIBUTES.  RETURNS 104 PLUS 1
       BYTE CONTAINING COUNT OF BYTES FOLLOWING.
FATTCD
141    PREPARE SLAVE RECEIVER TO OPEN FILE.  FOLLOWED BY 1 BYTE CONTAIN
       COUNT OF BYTES FOLLOWING.  WHEN DONOR AND RECEIVER ARE BOTH 940
       TYPE SEND 9 BYTES:  3 BYTES FFDPT (FILE DIR POINTER OF SEND FILE),
       3 BYTES FDWD0, AND 3 BYTES FDWD2.
       NO RESPONSE WILL BE GIVEN.
INSCOD
142    CODE FOLLOWED BY 6 BYTES TO SET INSTALLER'S LICENSE BIT
       NO RESPONSE WILL BE GIVEN.
WHYCOD
143    SOLICIT EXPLANATION OF LATEST ERROR
RSPCOD
144    CODE FOLLOWED BY ASCII STRING TERMINATED BY A NUL OR ANY
       CONTROL CODE (PREFRABLY ABTCOD).
BADCOD
145    UNEXPECTED CONTROL CODE.  FOLLOWED BY 1 BYTE CONTAINING THE OFFENDING
       CODE.
ERRCOD
146    FILE SYSTEM ERROR READING OR WRITING FILE
PERCOD
147    FILE SYSTEM ERROR POSITIONING FILE
ERASCD
150    FILE SYSTEM ERROR ERASING RECEIVE FILE
TRPCOD
152    PROGRAM TRAP
FLKRCD
153    FILE LOOKUP FAILURE (OTHER THAN PROTECTION FAILURE OR FILE MISSING)

A NOTE ON ERROR PROCESSING:  A PROGRAM THAT DETECTS AN ERROR
SENDS ONE OF THE ERROR CODES (106,113,116,117,120,133,145-153)
EXPECTS ACKNOWLEDGEMENT, GENERALLY IN THE FORM OF AN ABTCOD
TO INDICATE THAT THE OTHER END HAS BEEN NOTIFIED AND HAS RESET
(BUT NOT ZAPPED) THE CIRCUIT.  IF NO ACKNOWLEDGEMENT IS RECEIVED
IN 30 SECONDS THE PROGRAM WHICH DETECTED THE ERROR SHOULD ZAP THE
CIRCUIT.
NOTE THAT NAKCOD=133 IS ACKNOWLEDGED BY A RETRANSMISSION OF A DATA
OR CHECK RECORD.

SOME SITUATIONS ARE NOT CONSIDERED TO BE AN ERROR.  IT IS PERFECTLY
ACCEPTABLE TO SEND A FAILCD ON A FILE LOOKUP OR A NICOD ON AN OPTION.
USE FLKRCD FOR AN UNEXPECTED ERROR ON A FILE LOOKUP.

NICOD IN RESPONSE TO AN OPNCOD INDICATES THAT THE MODE REQUIRED IS
NOT IMPLEMENTED.  THIS SHOULD BE TREATED AS AN ERROR.  THE REQUESTED
MODE SHOULD NOT HAVE BEEN REQUESTED SINCE THE CAPABILITIES OF THE
PROGRAM ARE KNOWN TO THE OTHER END.






RULES GOVERNING FILE TRANSMISSION
---------------------------------

1.  THE RECEIVER GOES INTO BLOCK INPUT MODE AND SENDS A 104 (SUCCESSFUL
FILE OPEN) IF IT IS THE SLAVE, OR A FILE OPEN COMMAND (137) IF IT
IS THE CONTROLLER.  THE 104 OR 137 CODE INDICATES THAT THE RECEIVER
IS READY TO ACCEPT DATA RECORDS FROM THE DONOR.

2.  THE RECEIVER REMAINS IN BLOCK INPUT MODE UNTIL IT RECEIVES AN
ABORT (107) CODE, LOGOFF (131) CODE, END-OF-FILE (135) CODE, END-
OF TRANSMISSION (114) CODE, OR UNSUCCESSFUL FILE OPEN (116 OR 117) CODE.
NOTE THAT END-OF-FILE (135) DOES NOT TERMINATE BLOCK INPUT MODE IF THE
RECORD CHECKSUM AND BYTECOUNT ARE INVALIDATED BY THE RECEIVER.

3.  ALL CONTROL MESSAGES AND RECORDS RECEIVED WHILE IN BLOCK INPUT MODE
MUST BE TERMINATED WITH A YELLOW BALL WHICH THE BASE SEES AS A TERMINATION
CONDITION FOR THE CURRENT I/O OPERATION.  THE PROTOCOL IS DESIGNED SO
THAT SHORT MESSAGES CAN BE AVOIDED.  AN EXCEPTION IS THE RECEIPT OF A
FILE OPENING ERROR (116 OR 117) CODE WHEN THE DONOR IS THE SLAVE PROGRAM.
ANOTHER POSSIBLE EXCEPTION IS IN UPDATE MODE AFTER RECEIVING THE LAST
CHECK RECORD FROM THE RECEIVER.  IF THE DONOR FINDS NO DIFFERENCES,
IT WILL SEND AN END-OF-TRANSMISSION (114) CODE TO THE RECEIVER WHICH
IS IN BLOCK MODE AWAITING SHIPMENT OF A DATA RECORD.

PHYSICAL RECORD LENGTHS SHOULD BE AS LONG AS POSSIBLE TO ELIMINATE LOST 
BANDWIDTH DUE TO TURNAROUND DELAYS.  A 4 SECOND TURNAROUND DELAY ON AN 
ACKNOWLEDGEMENT COSTS ABOUT 1600 DATA CHARACTERS.  THE 940 WILL USE A RECORD
SIZE OF 122,880 CHARACTERS, SO THAT THE TURNAROUND WILL COST 1.3% OF BANDWIDTH.
IF A RECORD RETRANSMISSION SHOULD BE REQUIRED, THIS RECORD SIZE WILL
REQUIRE AT LEAST 5 MINUTES ADDITIONAL TRANSMISSION TIME.

IN GENERAL, ALL RECORDS HAVE THE SAME FORMAT:

       LOGICAL RECORD

1 BYTE CONTROL ESCAPE (EM)
1 BYTE RECORD TYPE (110,111,132)
N DATA BYTES
       
       LOGICAL RECORD

       .

       .

1 BYTE CONTROL ESCAPE (EM)
1 BYTE RECORD TERMINATION TYPE (END-OF-RECORD = 134 OR END-OF-FILE = 135)
3 BYTES RECORD CHECKSUM
3 BYTES RECORD BYTECOUNT
YELLOW BALL  (MAY OR MAY NOT BE REFLECTED)

THE MAXIMUM BYTE COUNT THAT MAY BE SENT IS 2**23-1 BYTES.  THE RECORD
SIZE IS ARBITRARILY ESTABLISHED AT THE CONVENIENCE OF THE DONOR PROGRAM.
THE CHECKSUM IS CALCULATED BY ADDING EACH DATA BYTE INTO A 24 BIT
ACCUMULATOR, IGNORING OVERFLOW.  ALL BYTES (INCLUDING THE INITIAL CONTROL
ESCAPE CODE) ARE INCLUDED IN THE RECORD CHECKSUM.  ONLY THE SIX BYTES
FOLLOWING END-OF-RECORD ARE NOT INCLUDED.

4.  PHYSICAL RECORDS WILL BE ACKNOWLEDGED WITH A 112 CODE IF THE RECORD
CHECKSUM AND BYTECOUNT ACCUMULATED BY THE RECEIVER AGREE WITH THE DONOR.
AN EXCEPTION IS THE CHECK (132) TYPE RECORD, WHICH IS ACKNOWLEDGED
WITH A CHECK (132) RECORD FROM THE RECEIVER.  THE RECEIVER'S CHECK RECORD
IS ACKNOWLEGED BY RECEIPT OF A DATA RECORD TYPE (110,111), ANOTHER
CHECK RECORD, OR A END-OF-TRANSMISSION (114).

5.  AFTER THE LAST RECORD IN THE FILE HAS BEEN SENT AND ACKNOWLEDGED,
THE DONOR SENDS A END-OF-TRANSMISSION (114) CODE.  THE RECEIVER
ACKNOWLEDGES THAT IT HAS SUCCESSFULLY CLOSED THE FILE BY SENDING A
CLOSURE CODE (115).  THE RECEIVER IS NOW AT ITS COMMAND LEVEL AND
NOT IN BLOCK INPUT MODE.


LOGICAL RECORD TYPES
--------------------

A.  DATA RECORDS

TYPE 1 -       ANY MODE, BINARY COMPRESSION

1 BYTE CONTROL ESCAPE (EM)
1 BYTE RECORD TYPE (110)
1 BYTE PREFERRED CHARACTER
N BYTES FILE DATA


TYPE 2 -       ANY MODE, RANK COMPRESSION

1 BYTE CONTROL ESCAPE (EM)
1 BYTE RECORD TYPE (111)
62 BYTES RANK TABLE
N BYTES FILE DATA


B.  CHECK RECORD

1 BYTE CONTROL ESCAPE (EM)
1 BYTE RECORD TYPE (132)
1 BYTE BLOCK COUNT (1 TO 63 BLOCKS).  0= 1 BLOCK.
M BYTES CHECKSUM INFORMATION (9 BYTES/BLOCK)


ESCAPE CHARACTERS
-----------------

A DATA ESCAPE CHARACTER (CAN=30) PRECEEDS DATA BYTES WHICH MIGHT
OTHERWISE BE INTERPRETED AS CONTROL INFORMATION.  IT OCCURS VERY COMMONLY
IN RANK COMPRESSED DATA.  NOTE THAT NO DATA ESCAPE CHARACTER IS NEEDED
WHENEVER A KNOWN NUMBER OF BYTES FOLLOWS A CONTROL CODE.  THUS IT IS
NOT NECESSARY TO USE DATA ESCAPE IN RECORD CHECKSUMS OR RECORD BYTE COUNTS.


UPDATE FILEMODE
---------------

BINARY TRANSMISSION BETWEEN LIKE HOST MACHINES CAN BE AIDED BY
COMPARING FILES AND TRANSMITTING ONLY BLOCKS WHICH ARE DIFFERENT.
THE DONOR AND RECEIVER EXCHANGE CHECKSUM RECORDS FOR
BLOCKS OF SIZE KNOWN TO BOTH (THE UPDATE MODE BLOCKSIZE SENT WITH
CONTROL CODE 137).

ALL MACHINES MUST USE THE SAME CHECKSUM ALGORITHM TO FOLD THE SPECIFIED
NO. OF BYTES INTO A 69-BIT CHECKSUM FOR COMPARISON.  EACH BLOCK CHECKSUM
CONTAINS THE SAME NO. OF BYTES, ASSUMING THAT BYTES READ PAST THE END
OF THE FILE ARE ZERO.  THE ALGORITHM COMPUTES C = P1*2**46+P2*2**23+P3
WHERE P1 = P1*13 + DATA BYTE, P2 = P2*17 + DATA BYTE, AND P3 =
P3*19 + DATA BYTE.  ONLY 23 BITS OF INTEGER PRODUCTS ARE KEPT.
THE DONOR BUILDS A CHECK RECORD BY READING THE DATA FILE AND
COMPUTING BLOCK CHECKSUMS UNTIL 256 BLOCKS HAVE BEEN READ OR END-OF-FILE.
THE DONOR SENDS THE COMPLETED CHECK RECORD TO THE RECEIVER, WHICH
THEN BUILDS A CHECK RECORD FOR THE SAME NO. OF BLOCKS FROM THE RECEIVE
FILE.  THE RECEIVER RETURNS ITS CHECK RECORD AND WAITS FOR DATA
OR ANOTHER CHECK RECORD TO FOLLOW.

DONOR CHECK RECORDS ARE ALWAYS TERMINATED WITH AN END-OF-RECORD
CODE SO THAT THE RECEIVER REMAINS IN BLOCK INPUT MODE, AWAITING EITHER
A CHECK OR DATA RECORD.  RECEIVER CHECK RECORDS ARE ALWAYS TERMINATED
WITH A END-OF-FILE CODE SO THAT THE DONOR WILL GET OUT OF BLOCK INPUT
MODE AFTER RECEIPT OF EACH RECEIVER CHECK RECORD.
THE DONOR COMPARES ITS CHECK RECORD AGAINST THAT FROM THE RECEIVER,
AND BUILDS DATA RECORDS FOR THE BLOCKS THAT DIFFER.  WHEN THESE
ARE READ BY THE RECEIVER, IT UPDATES THE FILE BY COMPARING ITS
CHECK RECORD AGAINST THE DONOR'S CHECK RECORD.

AT END-OF-FILE THE DONOR SENDS AN END-OF-TRANSMISSION CODE WHICH
CAUSES THE RECEIVE FILE TO BE RENAMED TO THE CORRECT DATA LENGTH.
THE DATA LENGTH IN BITS MAY BE CALCULATED FROM CPTOP1*8+CPTOP2.
    	