  
.memo;
.single space;
.indent 5;
.adjust;
.page frame 60 high 74 wide;
.area text lines 4 to 57;
.title area footing line 60;
.place text;
.underlinebetween (\\,');
.every heading (TOPS20 TOOLS FOR PERF ANALYSIS,,FEB-7-1983);
.begin center;
\\TOPS20 TOOLS FOR ANALYZING SYSTEM PERFORMANCE AND RESOURCE ALLOCATION'
.SKIP 1;
by Greg Matoka
February 7, 1983
.end;
.group skip 8 apart;
.once center;
\\-SUMMARY-'  			

	TOPS-20 provides several different tools for gathering system
and/or job statistics which can be used for analyzing system performance.
However, none of the facilities available on version 4 other than
PCHIST  were designed
to monitor individual programs to a degree that would allow a user to
optimize his or her program. They do however allow the user to note
the effect that the programs have on the system.

	These tools consist of system commands WATCH,
INFORMATION, SHOW, SYSTAT, and PCHIST, and the program <utility>SYSDPY.
	The monitor maintains tables for both global and individual
statistics which are updated whenever system or job activity occurs,
and these tables are the sources of the information displayed.

	From the different tools  available, WATCH was specifically 
designed for system tuning and provides a
wealth of information which can be updated automatically, thus making
it especially useful for performance analysis.  However, it
doesn't have the versatility or range of options available with SYSDPY
and SYSTAT, and sometimes it could be cumbersome to use. Nor does it allow 
the creation of a histogram of a running program, i.e. it does not show
a distributed frequency of CPU usage over the length of a program as
does PCHIST. Therefore
the user should experiment with all the tools available in order to
find the one that yields the best results for a particular problem.

	The purpose of this report is to acquaint the user with the tools
that exist on the TOPS20 operating system for analyzing the performance
of the system, the resources available, and the effects of different loads
being placed on the system, and to a degree, how the individual
components of a program are behaving.  
It is not intended as a substitute for the manuals or other reports 
available, and the user is recommended to consult the given sources in order
to gain a complete and thorough knowledge of all the options available.
.skip to column 1;
.once center;
\\*WATCH*'


	WATCH is located in directory <subsys> and can be run by typing
"WATCH" after the monitor prompt.
	WATCH allows a user to gather system and job performance statistics
for a user specified time slice. The statistics are then output to a user specified file.
 There are 41 different
 items of information available within 9 different categories. 
However, the user does not have to view all 41 because WATCH will immediately
query with the questions:
.byhand;
		Print monitor statistics?
		Print job summary?
		Print tune mode?
.endhand;
.turn off "^";
Depending on the responses, WATCH will gather a subset of the total system
and job statistics available and generate a report which contains different
combinations of the 9 categories. After entering the time period over which
the user wishes to have the information gathered, WATCH begins to work.
REMEMBER! The data is being placed in a file and it
will continue to be placed in the file until successive ^Cs are entered.
If the user becomes distracted for any length of time then it is very  pos-
sible that his or her allotted disk quota will be exceeded. How long this
length of time has to be in order for that to occur depends on the time slice
specified. The shorter the time slice the quicker WATCH will have to be 
terminated.

	Probably the most frequent displays of information or statistics
that a user will view fall into the categories of heading, system wide 
statistics, extended job statistics, load averages, and disk I/O:
.skip 1;
.byhand;
Heading-date, time, number of jobs logged in, and the user supplied time
	interval.
System statistics-reflects the utilization of the CPU, disk, and memory.
	e.g., idle and used time of the CPU as a percentage of the time 
	interval, and the average number of free pages.
Load averages-if class scheduling is not enabled, this is the average of 
	number of runnable processes on the system over the time intervals
	of 1, 5, and 15 minutes. If class scheduling is enabled, then the
	3 load averages are the average number of jobs having at least one 
	runnable process (within the class to which the running job
	belongs.)
Extended Job Statistics-wait states, job size, and page faults.
.endhand;
.skip 1;
In addition, WATCH also displays for the time interval all users, their
tty's, job numbers, and much, much more. For an example of the output 
provided by WATCH, see appendix A1. To see all of the statistics available, 
see appendix A2. For further, more detailed information type "help watch",
or when it becomes available to Tymshare, see notebook #16 of the TOPS-20
Software Notebooks. 

	TOPS-20 allows privileged users to modify the scheduling system by 
allocating percentages of the CPU's time to individual classes of users. 
Before the time is allotted however, it would be wise to analyze which jobs
require more CPU time than others so that critical jobs are not constantly
waiting for the processor to become available. By using the statistics from 
WATCH, and by gathering user input, a determination can be made as to how to
"tune" the system, i.e, determine which jobs/users should be placed in classes
that are given more CPU time than others. This process of fine
tuning the system is facilitated by the WATCH command in general and by the
tune mode in particular. Tune mode will display only a short summary of
statistics when a quick adjustment is sought. For a further discussion
on the use of WATCH as a tuning tool, see ch. 10 in the Systems Mgr's Guide.

	WATCH is designed to function in a dynamic manner, i.e. once it is
started, it will continue to gather and update system and or job statistics
for any arbitrary length of time. All of the data provided by WATCH is 
performance information as opposed to such resource allocation information as
the amount of disk space available to a structure or the number of pages in
a file. WATCH also provides no network information.

	One of the drawbacks with WATCH is that although a user does not have 
to view all the data that is available, it does not allow enough
elimination of unneeded system data (unless perhaps if the user is in tune
mode), and as a result the user may be overwhelmed with useless information.
It is also designed to provide system 
wide statistics or else job statistics which affect system performance, but
it does not provide a means of allowing a user to analyze his or her own 
program in such a way that he or she could determine which specific parts of 
program are using more system resources than other parts. In other words, 
although WATCH might show how a particular program affects overall system 
performance, it cannot provide information on the structure of the
program itself which would indicate how that program might be modified
in order to alter its effect on the operating system.

	There are probably 3 ways to to utilize WATCH as a tool for analyzing a
particular user or job's effect on the system's resources. One would be to gather
job and monitor summaries for a time slice over a period of time sufficiently
large enough to compute "typical" or average resource allocation for
a certain time of the day. By having a user run a program(s) after this 
average has been determined,
a comparison
can be made between the output generated by WATCH before the program was
run to the output generated during the program's execution. Because the
data is placed directly into a file, a utility program could probably be
devised which would compare the different outputs and generate a thorough
yet succinct report of the program's effect on the system's resources.
	A second means of using WATCH for performance analysis takes
advantage of the TOPS20 CONTINUE STAY command. CONT STAY allows a
previously halted job to continue running. A procedure for allowing a
user to analyze a program's effect on the system would be as follows:
.byhand;
	1.) Start WATCH and specify the desired time slice.
	2.) Type successive ^Cs. This freezes WATCH.
	3.) Type CONT, and then specify the STAY subcommand.
	4.) After returning to monitor level, PUSH, run the desired
	    program, and then POP back.
	5.) After again stopping WATCH, the output file can be examined 
	    to note the effect that the program had on the system and
	    the resources that it used.
.endhand;
.skip 1;
CAUTION! After PUSHing to another level, do not attempt to run WATCH
or any other program that will be accessing the system statistics
tables as this might produce unknown (or unpleasant) results. In
addition, if the CONT STAY command is used, the user cannot run the
program in the same job frame that WATCH is running in because the
statistics will reflect WATCH's use of the system statistics as well
as the program that is being observed.  Furthermore, even a PUSH to
another level may still create problems in that the statistics will
not be a valid reflection of the system's resources the program is
using because WATCH is still running in the same job.  Therefore, in
order to get around this, use the PTYCON facility of T20.  
	PTYCON allows users to create separate subjobs that can be
controlled from

one level.  The user enters PTYCON by typing PTYCON while at monitor
level.  Then he/she defines 2 separate subjobs, and by connecting to
one, starting WATCH and then leaving, the user can then start the
program to be observed in the other subjob.  In this way, WATCH's own
operation will not distort the statistics gathered.  For more
information about PTYCON see the TOPS20 Operations Command Reference
Manual pp 4-1 to 4-36.


	It is important to note that once a user begins to run WATCH there
is no way to push or pop to another level. The only way to
leave WATCH is to enter successive ^Cs which stops WATCH from collecting
data.

	WATCH gives no information regarding how much disk usage is
attributable to a particular user. The only individual disk statistics
given are IO statistics which are given as the percent of balance set waits attributable to disk reads or 
writes.
.skip to column 1;
.once center;
\\*SYSDPY*'

	SYSDPY is in directory <utility> and can be run by typing "r <util-
ity>SYSDPY".

	SYSDPY will give system performance information as well as
informing the user of how the system's resources are being allocated,
and like WATCH, it will show the user the updated statistics over a 
specified
period of time. After running  SYSDPY, the user may specify various
categories of system activity that he or she wishes to observe (one at a time) and then observe that
activity. The default time over which the information is displayed is
10 seconds. This can be altered by the user with a Wn command where n
is the time in seconds for which a screen refresh is desired.

	The 12 categories along with a brief summary of their
function, as well as an example of their display, are as follows:
.skip 1;
.byhand;
Command			Function			Appendix

J		Shows all the selected jobs on the 	  	C1
		system along with the corresponding 
		runtime, the total percentage of CPU
		time the job used as well as idle time.

Jn		Shows the nth job in greater detail,		C2
		including PC location, WS size, fork
		structure and JFNs.

JTn		Identical to Jn except that the infor-		C3
		mation is referenced by terminal number.

Q		Shows the status of the various queues:		C4
		all the queues, batch, output, printer, 
		mount requests, retrieval requests. Modes
		are fast or detailed.

IP		Gives information regarding the PID (pro-	C5
		cess ID) including flags that indicate if
		the PID is job wide or restricted, system 
		PID, fork and program name. Not shown in the 
		columns displayed, yet still available are
		send and receive quotas for the PID.

ST		Existing structure statistics. Includes for	C6
		each structure the files, free pages, it's
		size, seeks, reads, writes, and other disk
		stats.

DN		Decnet status. Given are the type of link	C7
		(active, passive, or internal) along with the
		byte size, and whether transmission or receive
		backpressure exist.

DV		Busy devices.					C8

TT		Terminal status. Similar to JTn except that	C9
		it gives a count of the number of characters
		in the input and output buffers as well as 
		flags that indicate the status of the ter-
		minal.

RE		System resources. The display is shown in the	C10
		form of a bar chart giving the percentage of
		core, open files, SPT slots, swapping pages
		and user forks used in relation to the total
		available.

M		Monitor statistics which are actually a sub-	C11
		set of the data given by a WATCH monitor 
		command.
.endhand;
.skip 1;
	In addition to displaying the above statistics, SYSDPY also
allows the user to vary the format of the display by such means as
suppressing title lines or specified job numbers, setting time periods
for refreshing the screen, and displaying columns of information that
were otherwise suppressed due to terminal screen limitations. The user
can also create a command file which can contain different
combinations of SYSDPY commands.
	The same procedure that was available with WATCH,i.e.,
allowing a user to monitor his or her own job by using CONT, also
exists with SYSDPY. after starting SYSDPY, specify Jn where n is the
user's job number. (See appendix C2 for an example of the statistics
provided) PUSH to a new level using the P argument and run the desired
program. At this point the user does not have the capability of WATCH
which would allow the program to be run to completion and then examine
the output file. With SYSDPY, the program must be exited, restarted
with CONT STAY, and then a POP back to SYSDPY to watch the program at
work. However, the Jn command is impressive yet concise. A possible
modification to consider might be to allow SYSDPY to place its output
in a file in a manner similar to WATCH.  An attempt to use PTYCON with
SYSDPY will produce garbage.

	There are
many other formatting features which won't be described here but the reader 
is referred to HELP SYSDPY for a complete listing of all possible SYSDPY
commands. Another source of documentation is <HELP>SYSDPY.MEM. However, be
advised that some of the data that is supposed to appear in the SYSDPY 
display according to this documentation is not actually displayed, or at least
it didn't appear for this user. All of the displays, along with their 
respective column headings given in the appendix, are the only data items 
shown.

.skip to column 1;
.once center;
\\*INFORMATION*'


	INFORMATION is a system's command which is run by typing INFORMATION
after the prompt along with the desired argument.

	INFORMATION, unlike WATCH and SYSDPY, gives statistics for only the
instant at which the command was entered and does not provide any
means of specifying a time slice over which the displayed statistics
are updated. This is in keeping with the purpose of the command which
is to provide system and job parameter information rather than
statistics which are changing very rapidly. For example, the number of
pages assigned disk storage (INF STO), mount requests (INF MOU), and
pending retrieval requests (INF RET) are not as likely to be updated as
often as the sum of job runtimes as percentage (WATCH SUSE) or the
disk reads per seconds (WATCH DKRD). However, this generalization is
not always true as INF MON (monitor statistics) and INF PRO (program
statistics) provide updated information similar to that given by WATCH
and SYSDPY.

	There are 29 different pieces of information available (see appendix
D1) but only 18 of these can even remotely be of assistance in evaluating 
system performance, and of these, only about a third would be of special 
interest to someone seeking to monitor the way the system is responding to
various loads or inputs. The subcommands, or arguments, used with INFORMATION
along with a brief description of its function, and in some instances, an
example of its display, are as follows:
.skip 1;
.byhand;
Command			    Function			See Appendix

   AVAILABLE	A brief description of the devices available
		to this job.

   BATCH-REQUESTS	The same information given by SYSDPY
		Q, giving job name, run time and user.

   DISK-USAGE	Working, permanent, and free pages on PS, 
		along with the total pages used. This is the
		only command available out of all the tools
		discussed which will allow a user to determine
		their disk usage as well as the disk usage of
		other users. (Note that the VDIR monitor command 
		will give disk usage information for each file
		in a directory.)

   FILE-STATUS	For a particular JFN, INFORMATION displays
		specifications for the associated file which
		includes the mode of access at the last file 
		opening, any special access conditions, byte
		size and pointers, and a list of devices cur-
		rently assigned to this job.

   MEMORY USAGE	Shows the current number of pages in memory
		for the current process of a job, along with 
		the permitted access of the pages as well as, 
		if applicable, the file from where they came.

   MONITOR-STATISTICS	Probably one of the most useful INFOR-		D2
		MATION subcommands as far as monitoring system 
		performance is concerned. Includes CPU load,
		scheduler overhead, paging, file and interrupt
		statistics, class scheduling use and load. All
		averages and totals ar computed for the time 
		since system startup.

   MOUNT-REQUESTS	Lists pending structure mount and tape
		mount requests.

   PROGRAM-STATUS	CPU, TOPS-20 Command Processor, and 
		total login time consumed, as well as a summary
		of the current process.

   PSI-STATUS	Whether the PSI is on, levels in progress, and
		channels enabledith pending interrupts.

   STRUCTURE	When used with a "*", all mounted structures are 	D6
		listed along with data concerning open files,
		units in structure and the users who have mount-
		ed, accessed, or connected to the structure.

   SUBSYSTEM-STATISTICS	Displays, for each subsystem, the total		D3
		run time (in seconds), average number of page 
		faults it has caused, the long term waits it has
		caused, and it's average working set size.

   SYSTEM-STATUS-A brief synopsis of what is allowed on the sys-	D4			tem as well as related system features that have
		been enabled such as account validation, tape
		drive allocation and class scheduling.

   TAPE-PARAMETERS	Gives tape density, parity, format and
		record length.

   TERMINAL-MODE	A fair size list of parameters for the		D5
		user's terminal as well as it's current status,
		e.g., upper or lower case, baud rate, and duplex
		mode.
.endhand;
.skip 1;
For a complete listing of all INFORMATION subcommands as well as their 
description, see the TOPS-20 Command Refernce Manual pp157-170, and the Monitor
Calls Reference Manual p3-327.
.skip to column 1;
.once center;
\\*SHOW*'

	
				
	Wheel or Oper privileges are required. User must first enter Opr 
mode, and then after the prompt, type SHOW.

	SHOW gives the same information which is provided by the commands
already presented and illustrated, and it gives nothing new in the way of 
system statistics that would be helpful in evaluating system performance
or resource allocation. The command was designed primarily to assist 
computer center operators in their interactions with users and the operating
system, and it allows operators to verify or determine the effects of 
changing system values. There are 9 different arguments
that can be used with SHOW, and each can contain several different 
combinations of arguments and switches. Because all the beneficial information
that SHOW can provide for performance analysis has already been illustrated
in the discussion of WATCH, SYSDPY, and INFORMATION, only a brief 
description of the salient characteristics will follow:
.skip 1;
.byhand;
Command				Function		See Appendix

   
PARAMETERS	Shows the characteristics along with the current 
		default values for the devices of batch stream,
		card-punch, network-node, paper tape punch,
		plotter and printer.

SCHEDULER	Indicates whether class scheduling is on, and if 	E1
		so, it shows the respective percentages allotted
		for each class, along with it's percentage of
		use and load averages.
		
For further information on SHOW see the TOPS-20 Operator's Command Lan-
gauge Reference Manual pp2-99 to 2-118.
.endhand;
.skip to column 1;
.once center;
\\*SYSTAT*'

		
				
	SYSTAT is run by typing the word after the monitor prompt, and if
any subcommands are desired, then type a comma (","), return, and then the
subcommand(s).

	SYSTAT provides the user with a very quick and easy way
to determine system wide information. Much of what is 
provided has already been discussed, but with SYSTAT, the user does not even 
have to be logged in to use it. In addition, if the "NO" subcommand is used
to eliminate verbose statistics, then CPU time can be reduced while still
providing valuable information. Output can be directed to the screen, a
line printer, or a user specified file. There are 19 different subcommands
and they all (except LPT and OUTPUT) give a subset of the statistic 
provided by the ALL subcommand, which is also the default.
.skip 1;
.byhand;
Command			    Function		        See Appendix

   ALL		Program, user, CPU, and scheduling information		F1
		are displayed for each job, as well as the oc-
		tal line number that the job is attached to.

   NO		When used in conjunction with the All subcommand,
		NO can be used to suppress information that would
		otherwise appear, i.e., it can be used to eliminate
		any combination of the following: class, control-
		ing job (CJB), directory, header, time limit, op-
		erator information, job state, system wide statis-
		tics, CPU time, the program being run by the user,
		line number, and the user name.
.endhand;
.skip 1;
	Thus a user can create his or her own "customized" listing of 
particular job or system statistics, place them in a command file, and run the TAKE
system command to see the results very quickly at any time. SYSTAT
does not allow the user to specify time periods over which to gather
the statistics.
.SKIP TO COLUMN 1;
.ONCE CENTER;
\\*PCHIST*'
	PCHIST is in directory <subsys> and is run by typing PCHIST
while in monitor mode.  PCHIST, unlike the other tools discussed so
far, was created to analyze the performance of the components of a
program rather than observe only its overall effect on the system.
Before getting into the mechanics of using PCHIST however, the reader
should be aware of the fact that at the present moment, there is no
documentation available from the creators of PCHIST.
However, it is hoped that by the time version 5 of T20 is in operation
there will be more available.  In the meantime the user is encouraged
to experiment with PCHIST and to make notes accordingly.
	A program is made up of consecutive addressable locations,
which, after they are loaded into memory, can be fetched by the CPU,
interpreted, and if it is an instruction, executed.  Based on the
assumption that some locations are fetched more often than
others (which may or may not indicate a poorly performing program),
PCHIST was developed to show which areas of a program are receiving
what percentages of processing time.  The user of PCHIST specifies
segments of the program (buckets) which contain a certain amount of
memory locations.  Each bucket contains the same number of locations
(except possibly the last), 
e.g., a program of 1000 addresses divided into 20 buckets would each
contain 50 address locations.  Each time PCHIST observes the processor
referencing a memory location of the program it has been assigned to
snoop on, then the count of the times that the bucket that contains
that instruction was referenced, is incremented.  Each time a bucket
is accessed is called a "hit".  
	Obviously, the program to be observed by PCHIST must first be
running, and preferably, in a separate job frame.  this can be
conveniently accomplished by using PTYCON, which is explained below.
The way in which PCHIST works is to interrupt the processor at certain
intervals, and if it is working on the observed program, then PCHIST
checks what location was referenced and increments the bucket within
which that address is contained.  If the address is actually in
monitor address space, and the user requested that time spent in
monitor mode should also be included, then the referenced address
location counts as a hit for a bucket within the monitor's address
space.  If, when PCHIST interrupts the processor, the program has been
interrupted and is waiting until the interrupt is finished, then a
hit will be counted in the "PILEVEL" bucket.
	As for the form of the output, under the column "bucket" will
appear the address of the start of the bucket.  In order to
effectively use PCHIST, the user must first obtain a cross reference
listing of the program, i.e., a listing that contains the addresses of
all the locations within the program.  The bucket address will be 140
octal locations greater than the address shown on the listing.
Therefore, to find out exactly where in the program a bucket was
placed,subtract 140 octal from the bucket address given in the PCHIST
output.  If the user specified that monitor mode time be included,
then these addresses will also be included.
	When running PCHIST, the following questions will be asked of
the user:
.skip 1;
.byhand;
NAME OF THE PROGRAM BEING OBSERVED: This will either be a program that
	is currently running or else will be running.
INCLUDE TIME SPENT IN MONITOR MODE? Although a user would not always
	necessarily want to observe the time their program was in mon-
	itor mode, I was able to obtain a meaningful histogram only if
	I responded "yes". I don't know if this was because of the 
	programs that I chose for PCHIST to observe, but I was never
	able to obtain satisfactory results if the response was "no".
	Therefore if a good histogram appears to be unobtainable with
	a "no" response, answer "yes" instead.
STARTING ADDRESS OF REGION TO BE OBSERVED: User programs start at octal
	location 140, but any address location within the address can
	be specified.
BUCKET SIZE (OCTAL): A bucket size of 1 can be specified, but this
	will not necessarily give the best results, nor is it likely 
	that every location in the program will be listed on the out-
	put.  A good size to start with is around 100.
JOB NUMBER: The system wide job number.  If using PTYCON and the program
	is to be run in a separate subjob, then the job number can be
	found with a "What All" PTYCON command.
TYPE <CR> TO STOP SNOOPING! How long the user chooses to let the program
	run is determined by the length of the program as well as by
	trial and error.
OUTPUT RESULTS TO: Output can be placed in a file or else displayed on 
	the terminal by answering "Tty:"
.endhand;
.skip 1;
	In order to use the T20 PTYCON feature, proceed in the following
manner:
.skip 1;
.byhand;
	1.) Type "PTYCON".
	2.) Define 2 subjobs, e.g., J0 and J1, then login to and en-
	    able both jobs.
	3.) Use "What All" to find out the system wide job numbers that
	    have been assigned to each subjob.
	4.) In J0 run PCHIST up to the point where it says "Type <cr>
	    to stop snooping!".
	5.) In J1 run the program to be observed.
	6.) Terminate PCHIST in J0 and examine the results.
In this way, one user at one terminal can examine their own program run-
ing in a separate job frame without requiring any other assistance.

	There are other performance analysis tools programs that will
be available for version 5 TOPS20. These programs are SKEDLK, JSLOOK,
JSAV, and WSLOOK.  When documentation becomes available and version 5
is operational, then this document will be updated accordingly.
.endhand;
.skip to column 1;
\\GLOBAL AND USER STATISTICS GATHERING AND DATA STRUCTURES ACCESSED'



	There are tables maintained in the monitor, module STG, which 
contain both job and system statistics. The entries to these tables are 
updated whenever monitored system or job activity occurs. For example,
a disk write will increment DSKWR, which is an entry in the monitor- 
statistics table (see appendix G1). There are two calls which are used
for accessing the information contained in these tables. SYSGT takes a
table name and returns a number identifying the table. This is similar
to GTJFN which gets a number associated with a file. GETAB then takes
the number and returns a word from the table.

.SKIP 2;
\\TABLES MAINTAINING SYSTEMS STATISTICS'
.skip 1;
.byhand;
	

MONITOR-STATISTICS	This table, more than any other, contains a
		wide variety of values that reflect system activity. It
		is the source from where WATCH obtains the data that com-
		prises its reports, and so it can be safely assumed that 
		this table is the source for all programs that have a need
		for obtaining system statistics. (see appendix G1)

DEVTB		Device dispatch table. Each device has it's own DEVTB 
		which contains device parameter information. 

DEVCH1		Device characteristics table. Contains flags for each de-
		vice unit in the system, and it is initialized from the
		INIDVT table at system startup time. 

DSKSIZ		Disk size pointer table. contains pointers to the disk 
		size data tables. 

DSKSZ'n		Disk size data table for type n. Pointed to by entries in
		the DSKSIZ table. Information contains data on sectors,
		pages (free and total), and bit words.

SCHEDVAR	Contains variables used in the sched module, including
		clock time and fork information. 

PIDTBL		Process ID table. A table of half word entries, one entry
		per PID. The number of entries in the table is 2 times
		the number of jobs. If a PID is in use, the table entry 
		will contain the address of the PID header. PIDs not in 
		use are linked together. PDLST is the free PID header.

CLASS-SCHEDULER		This block of data is used primarily by the
		scheduling algorithym, but it can also provide pro-
		grams with all class utilization data (indexed by class
		number), or it can provide individual job information
		such as job utilization and incremental runtime. Index-
		ed by job number.
.endhand;
.skip to column 1;
\\TABLES CONTAINING ONLY JOB STATISTICS'
.SKIP 1;
.byhand;
        

JOBPT		Job Process Table. Contains the number of the controlling 
		terminal and the index of the top fork of the job. Indexed
		by job number.

JOBRT		Job runtime table. Contains the total runtime of each job 
		in milliseconds.

JSB		Job storage block. Each job has a JSB, which holds per job 
		information. This is the primary location where individual
		job statistics (running totals reflecting resource usage)
		and job parameters are kept. (appendix G2)

SSIZE		Subsystem working set size. Indexed by NNAMES. Each entry 
		contains the working set size of a subsystem program.

STIMES		Subsystem runtime. Indexed by NNAMES. Each entry contains 
		the accumulated runtime of a subsystem program.
.endhand;
.skip to column 1;
.once center;
\\GLOSSARY'
.skip 3;
.byhand;
BGND	Percentage of the interval during which the monitor was
	performing background tasks such as moving terminal input char-
	acters from a system wide buffer to the individual terminal
	input buffers.	
BALANCE SET   The set of most eligible processes whose combined
	reserve working sets fit into memory.	
DELTA RUNTIME   The total amount of runtime for a job within the last 
	interval.
	
ENQ BLOCKS   Processes obtain access to a specific resource by placing
	a request in the queue for the resource. Each such queue is
	an ENQ (the name derives from the ENQ JSYS which is a monitor
	call requesting a user to be placed in the queue for a spec-
	ified device), and the block of memory it takes up is an ENQ
	block.
	
FILE WAIT TIME   Percentage of the interval during which the CPU was
	idle, no processes were waiting for memory management services,
	and at least one active process was waiting for a short term,
	user initiated event (disk I/O) to complete.
	
FORCED PROCESS REMOVAL   The average number of times per minute the 
	monitor had to remove a process from the balance set before
	the process came to a natural wait state (such as terminal
	input wait).
	
FREE PAGES   The average number of physical memory pages that are cur-
	rently available for swapping in user processes.
	
GCOR    Percentage of the interval spent garbage collecting memory. 
	This represents part of the memory management overhead.
	
IDLE TIME   Percentage of the interval during which the CPU was idle
	because there were no active processes on the system.
	
JFN     Job file number. When a job references a file a small number
	(handle) is associated with that file. This number is valid
	within any process of the job to which it is assigned, but it
	is not valid between jobs.
	
LOAD AVERAGES   A count is taken at various times within either a 1, 
	5, or 15 minute time interval in order to determine the number 
	of jobs within each class that has at least 1 runnable process.
	The average of each class is then computed by dividing the 
	total number of jobs with at least one runnable process by the
	number of counts taken within that interval.
	
RUN TIME   The accumulated time required to complete a single, contin-
	uous execution of an object program.
	
SCHEDULER OVERHEAD   Percentage of the interval during which the system
	was scheduling users for memory and the CPU.
	
SPT SLOT   Special Process Table. It is a table of pointers which is 
	referenced when virtual to physical address translation takes 
	place. The slots which are pointed to by the table entries are
	index blocks in memory (swapping area) for open files, shared 
	file pages, user page map tables, user process tables, job
	storage blocks, and process storage blocks.
	
SWAPPABLE FREE CORE   Pages in memory which are available for runnable 
	processes to be swapped into.
	
SWAP WAIT TIME   Percentage of the interval during which the CPU was 
	idle and while one or more processes was waiting on the com-
	pletion of a memory management service (normally a swap in).
	
USED TIME   Percentage of the interval during which the CPU was execut-
	ing instructions on behalf of some user. Includes user, JSYSS,
	page faults, and interrupt processing.
	
WORKING SET   The minimum number of pages that a process requires to be
	in memory in order for it to run.
.endhand;
.skip to column 1;
.once center;
\\BIBLIOGRAPHY'
.skip 2;
.byhand;
WATCH
   Systems Manager's Guide, Notebook  . Version 4. Chapter 10 System 
	Performance.
   TOPS20 Commands Reference Manual, Notebook 7. Version 4.
   PS:<HELP>WATCH.HLP.3
   PS:<DOCUMENTATION>WATCH.DOC.1

SYSDPY
   PS:<HELP>SYSDPY.MEM.1
   PS:<HELP>SYSDPY.HLP.2

INFORMATION
   Getting Started With TOPS20, Notebook 4. Version 4. p25
   TOPS20 Commands Reference Manual, Notebook 7. Version 4. pp157-170.

SYSTAT
   TOPS20 Commands Reference Manual, Notebook 7. Version 4. pp299-306.
   Getting Started With TOPS20, Notebook 4. Version 4. p4.

SHOW
   TOPS20 Operator's Command Language Reference Manual, Notebook 6.
	Version 4. pp2-99 to 2-118.

MISC
   TOPS20 Monitor Calls Reference Manual, Notebook 3. Version 4.
   TOPS20 Monitor Tables, Release 4.
   TOPS20 Monitor Internals, Reference Guide. September 9, 1980.
	Ch 7.
.endhand;   @oD