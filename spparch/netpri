NETPRINT ** FICHE/FRAME BREAK *****
KONST
KONST  IDENT 10/14/76
       NOLIST STAT,EXT
**************************************
*
       GLOBAL DATA DEFINITIONS
*
**********************************************************

ASCST  MACRO   D
       DATA *+1
       ASC D(1)
       ENDM

P:DAT  ASCST    '$DATE: /'
P:FI   ASCST    '$FILES: /'
P:RQB  ASCST    '         USER NAME: /'
P:DIST ASCST    '   DISTRICT:  /'
P:END  ASCST    '$$END OF REQUEST--CHARACTERS PRINTED = /'
P:FL   ASCST    '$FILE NAME: /'
P:RQN  ASCST    'REQUEST NUMBER: /'
P:COP  ASCST    '$COPY /'
OPTM   ASC '$OPTIONS: /'
BADBUF ASC '$NO. OF RECORDS PER BUFFER MUST BE BETWEEN 1 AND 7$/'
EXPDIG ASC '$EXPECTED DIGIT$/'
BADFOR ASC '$FORMSIZE MUST BE AT LEAST ONE!$/'
BADSKI ASC '$AT LEAST 1 PAGE MUST BE SKIPPED$/'
BADLIN ASC '$AT LEAST 1 LINE PER PAGE MUST BE PRINTED$/'
BADWID ASC '$WIDTH MUST BE AT LEAST 1 COLUMN$/'
HELPM  ASC '$VALID PRINT OPTIONS ARE:'
       ASC '$MIXED - PERMIT UPPER AND LOWER CASE.  DEFAULT FOR CDC PRINTERS'
       ASC '$UPPER - CONVERT LOWER TO UPPER CASE.  DEFAULT FOR 2780 AND DP PRINTERS'

       ASC '$CONTROLS - PASS ASCII CONTROL CHARACTERS FROM FILE TO REMOTE'
       ASC '$                  DEVICE.  DEFAULT IS NO CONTROLS.'
       ASC '$NOSEP - PRINT NO SEPARATOR PAGE'
       ASC '$LONGSEP - PRINT FULL SEPARATOR PAGE.  DEFAULT.'
       ASC '$DUMMY - PRINTS SEPARATOR PAGES ONLY FOR USE IN ADJUSTING FORMS.'
       ASC '$DP - REMOTE PRINTER IS DATA PRODUCTS TYPE.'
       ASC '$CDC - REMOTE PRINTER IS CDC TYPE.'
       ASC '$2780 - REMOTE PRINTER IS 2780 TYPE.  DEFAULT.'
       ASC '$PUNCH - PUNCH SELECTION (ESC 4) PRECEDES DATA LINES.'
       ASC '$                  THE FILE TO BE PUNCHED SHOULD CONTAIN'
       ASC '$                  NO GREATER THAN 80 COLUMN RECORDS AND'
       ASC '$                  MUST NOT CONTAIN FORMS CONTROL OTHER THAN'
       ASC '$                  CARRIAGE RETURN.'
       ASC '$WIDTH <N> - SETS MAXIMUM WIDTH OF PRINT OR PUNCH LINE TO N'
       ASC '$                  COLUMNS.  UNLESS SPECIFIED WIDTH IS 132 FOR'
       ASC '$                  PRINTING AND 80 FOR PUNCHING.'
       ASC '$BUF <N> - NO. OF PRINT RECORDS PER 2780 BUFFER.  N MUST'
       ASC '$                  BE SPECIFIED BETWEEN 1 AND 7.  DEFAULT'
       ASC '$                  IS 7 FOR MAXIMUM TRANSMISSION RATES.'
       ASC '$LINES <NN> - MAXIMUM NO. OF LINES WHICH CAN BE PRINTED'
       ASC '$                  PER PAGE BEFORE FORCING FORMFEED'
       ASC '$SKIP <NN> - NUMBER OF PAGES TO SKIP BEFORE PRINTING STARTS,'
       ASC '$                  USE WHEN RESTARTING A PRINT FILE.'
       ASC '$$           < LARGE >'
       ASC '$FORMSIZE   < BIG   > - SPECIFIES SIZE OF FORM IN LINES'
       ASC '$           < SMALL >'
       ASC '$           <  NN   >'
       ASC '$                  ASSUMES 66 LINES FOR LARGE OR BIG FORMS.'
       ASC '$                  51 LINES FOR SMALL FORMS.  A NUMBER MAY'
       ASC '$                  BE SPECIFIED IF DESIRED.  WHEN THIS OPTION'
       ASC '$                  IS USED THE PROGRAM MAKES TWO ASSUMPTIONS:'
       ASC '$                  (1) TOP OF FORM IS LINE 1 OF THE FORM, AND'
       ASC '$                  (2) THE LISTING IS TO BE CENTERED IN THE'
       ASC '$                  MIDDLE OF THE PAGE, BY DOWNSPACING'
       ASC '$                  0.5*(FORMSIZE-LINES) FROM TOP OF FORM.$$/'
VERS   ASC '$NETPRINT VERSION 1.0$/'
WRNDVR ASC '$YOU SPECIFIED WRONG DRIVER TYPE FOR THIS PORT$/'
WRNPOR ASC '$YOU ARE NOT LOGGED INTO PORT 0 OR 1$/'
BOTH   ASC '$YOU SPECIFIED MORE THAN ONE TYPE OF DRIVER$/'
BADOPT ASC '$YOU SPECIFIED BUF OPTION WITH CDC PRINTER$/'
CASE   ASC '$YOU SPECIFIED BOTH UPPER AND MIXED CASE$/'
SEPER  ASC '$YOU SPECIFIED BOTH NOSEP AND LONGSEP OPTIONS$/'
FTP    ASC '$FILES: /'
NONE   ASC '$NO FILES ENTERED$/'
OFLOW  ASC '$STRING STORAGE OVERFLOW, REDUCE NO. OF FILES ENTERED$/'
TOOMANY ASC '$LIMIT 30 FILES, REDUCE NO. OF FILES ENTERED$/'
CANFIN ASC '$CANNOT FIND /'
NOTSYM ASC '$NOT SYMBOLIC: /'
EMPTY ASC '$EMPTY PRINT FILE: /'
CONTG ASC '$$CONTINUING...$$/'
CNI    ASC '$FILENAMES FROM .FILE NOT IMPLEMENTED$/'
BF     ASC '$SYSTEM PROBLEM--CONTACT YOUR REPRESENTATIVE$/'
CROPN  ASC '$CANNOT REOPEN PRINT FILE--ABORT$$/'
READER ASC '$ERROR READING PRINT FILE--ABORT$$/'
SCPER  ASC '$ERROR POSITIONING PRINT FILE--ABORT$$/'
ILLTERM ASC '$UNEXPECTED PROGRAM TERMINATION AT /'
TER    ASC '$BUFFERED TERMINAL OUTPUT ERROR$/'
LUDERR ASC '$ERROR READING LUD--ABORT$$/'

*      DATA

ZERO   DATA 0
ONE    DATA 1
TWO    DATA 2
FIVE   DATA 5
TEN    DATA 10
K14    DATA 12
K17    DATA 17B
K20    DATA 20B
K31    DATA 31B
K74    DATA 60
K4B7   DATA 4B7

       OCT
BIGTAB DATA    1774,3776,6003,6003,6003,6003,6003,6003,6003,6003,3776,1774
       DATA    0140,0340,0740,0140,0140,0140,0140,0140,0140,0140,3776,3776
       DATA    3776,7777,6003,0003,0003,0006,0030,0140,0600,3000,7777,7777
       DATA    3776,7777,6003,0003,0003,0036,0036,0003,0003,6003,7777,3776
       DATA    0070,0170,0330,0630,1430,3777,7777,0030,0030,0030,0030,0030
       DATA    7777,7777,6000,6000,6000,7770,7774,0006,0003,0003,7777,7776
       DATA    3776,7777,6003,6000,6000,7776,7777,6003,6003,6003,7777,3776
       DATA    7777,7776,6014,0030,0060,0140,0140,0140,0140,0140,0140,0140
       DATA    3776,7777,6003,6003,3006,1774,1774,3006,6003,6003,7777,3776
       DATA    3776,7777,6003,6003,6003,7777,7777,0003,0003,6003,7777,3776
       DATA    1774,3776,6003,6003,6003,6003,6003,6003,6003,6003,3776,1774

       DEC

********************************
*                              *
*      STATE  TABLES           *
*                              *
********************************

S      EQU 10B (SPECIAL STATE FOR TOF PROCESSING ON FIRST PAGE OF TEXT)
C      EQU 4   (CARRIAGE CONTROL COMPRESSION FLAG)
B      EQU 2   (BLANK COMPRESSION FLAG)
F      EQU 1   (TOF COMPRESSION FLAG--ONE OR MORE FORMFEEDS)

CSTATE EQU  *  CHANGE OF STATE TABLE FOR CARRIAGE CONTROL ENCOUNTERED
       DATA C,C+F,C,C+F,C,C+F,C,C+F
       DATA S+C,S+C+F,S+C,S+C+F,S+C,S+C+F,S+C,S+C+F

BSTATE EQU  *  CHANGE OF STATE TABLE FOR BLANK ENCOUNTERED
       DATA B,B+F,B,B+F
       DATA C+B,C+B+F,C+B,C+B+F
       DATA S+B,S+B+F,S+B,S+B+F
       DATA S+C+B,S+C+B+F,S+C+B,S+C+B+F

FSTATE EQU  *  CHANGE OF STATE TABLE FOR FORMFEED ENCOUNTERED
       DATA F,F,F,F,F,F,F,F
       DATA S+F,S+F,S+F,S+F,S+F,S+F,S+F,S+F

CSSTATE EQU *  CHANGE-OF-STATE TABLES FOR CLEARING S
       DATA 0,F,B,B+F,C,C+F,C+B,C+B+F
       DATA 0,F,B,B+F,C,C+F,C+B,C+B+F

CCSTATE EQU *  CHANGE-OF-STATE TABLE FOR CLEARING C
       DATA 0,F,B,B+F,0,F,B,B+F
       DATA S,S+F,S+B,S+B+F,S,S+F,S+B,S+B+F

CBSTATE EQU *  CHANGE-OF-STATE TABLE FOR CLEARING B
       DATA 0,F,0,F,C,C+F,C,C+F
       DATA S,S+F,S,S+F,S+C,S+C+F,S+C,S+C+F

CFSTATE EQU *  CHANGE-OF-STATE TABLE FOR CLEARING F
       DATA 0,0,B,B,C,C,C+B,C+B
       DATA S,S,S+B,S+B,S+C,S+C,S+C+B,S+C+B

       END
NETPRINT ** FICHE/FRAME BREAK *****
KONST SYMSORT

SYM.  PG.LN. IDENT.

ASCST   1  9 KONST   B       4 10 KONST   BADBUF  1 23 KONST   
BADFOR  1 25 KONST   BADLIN  1 27 KONST   BADOPT  2 33 KONST   BADSKI  1 26 KONST   
BADWID  1 28 KONST   BF      3  6 KONST   BIGTAB  3 29 KONST   BOTH    2 32 KONST   
BSTATE  4 17 KONST   C       4  9 KONST   CANFIN  3  1 KONST   CASE    2 34 KONST   
CBSTAT  4 35 KONST   CCSTAT  4 31 KONST   CFSTAT  4 39 KONST   CNI     3  5 KONST   
CONTG   3  4 KONST   CROPN   3  7 KONST   CSSTAT  4 27 KONST   CSTATE  4 13 KONST   
EMPTY   3  3 KONST   EXPDIG  1 24 KONST   F       4 11 KONST   FIVE    3 19 KONST   
FSTATE  4 23 KONST   FTP     2 36 KONST   HELPM   1 29 KONST   ILLTER  3 10 KONST   
K14     3 21 KONST   K17     3 22 KONST   K20     3 23 KONST   K31     3 24 KONST   
K4B7    3 26 KONST   K74     3 25 KONST   LUDERR  3 12 KONST   NONE    2 37 KONST   
NOTSYM  3  2 KONST   OFLOW   2 38 KONST   OM****  4  3 KONST   ONE     3 17 KONST   
OPTM    1 22 KONST   P:COP   1 21 KONST   P:DAT   1 14 KONST   P:DIST  1 17 KONST   
P:END   1 18 KONST   P:FI    1 15 KONST   P:FL    1 19 KONST   P:RQB   1 16 KONST   
P:RQN   1 20 KONST   READER  3  8 KONST   S       4  8 KONST   SCPER   3  9 KONST   
SEPER   2 35 KONST   TEN     3 20 KONST   TER     3 11 KONST   TOOMAN  2 39 KONST   
TWO     3 18 KONST   VERS    2 29 KONST   WRNDVR  2 30 KONST   WRNPOR  2 31 KONST   
ZERO    3 16 KONST   
NETPRINT ** FICHE/FRAME BREAK *****
SBTONETPRINT
BTO    IDENT 10/14/76          BUFFERED TERMINAL OUTPUT
       NOLIST EXT,STAT

ERR    OPD 101B5,2
CPS    EQU 384                 CHARS/SEC EXPECTED THRU NETWORK (UPPER LIMIT)
NBUF EQU 15    NO. OF BUFFERS
WAIT   EQU [NBUF*384]/2        ALLOW RING TO HALF-EMPTY WHEN FULL
WAIT   EQU WAIT/CPS            BEFORE FILLING IT AGAIN.
COMBUF EQU 34000B
BUF    EQU COMBUF+200B
FREE   EQU 4B7
BUSY   EQU 2B7

$INIT ZRO;* INITIALIZE RING.  MARKS ALL BUFFERS FREE,
*      AND THREADS COMMANDS PROPERLY.  CALL THIS ROUTINE AFTER
*      ANY EXCEPTION.
 LDA =BUF; STA WCC (BUFFERLET ADDR)
 LDA =NBUF-1; STA CCTR (SET UP 15 BUFFERLETS)
 LDX =COMBUF (ADDRESS 1ST COMMAND)
 LDA =COMBUF+3
 LDB =FREE
INIT1 STA WCP; STA 1,2 (THREAD COMMAND LIST)
       STB 0,2 (INITIALIZE FLAG WORD)
       LDA WCC
       STA 2,2 (INITIALIZE BUFFERLET ADDR.)
       ADD =200B; STA WCC
       LDA =3; ADD WCP
 EAX 3,2; SKR CCTR; BRU INIT1
 LDA =COMBUF; STA -2,2 (THREAD LAST COMMAND TO FIRST); STA WCP
 BRM CINIT (SET UP BUFFERLET PTRS)
 LDA CWTAB+3; STA CWDISP
 BRR INIT

$WCC   DATA 0                  (CHAR COUNT IN BUFFERLET)
WCP    DATA COMBUF             (CURRENT COMMAND PTR)
CCTR   DATA -1                 (COUNT OF COMMANDS ACTIVE)
$PORT  DATA -1                 (OUTPUT PORT)
CWPT   DATA BUF                (CURRENT WORD BEING WRITTEN BY CW)
CWX    ZRO;*                   (SAVE X WHEN CWF CALLED)

       BRR CW                  (INSTRUCTION TO DISABLE CW)
       MIN WCC                 (INSTRUCTION TO ENABLE CW)
$CW    ZRO;* OUTPUT A CHAR.  COST ABOUT 18 CYCLES PER CHAR.
       MIN WCC                 (SOMETIMES CHANGED TO BRR CW)
CWDISP BRU CWTAB               (JUMP TO APPROPRIATE ROUTINE)
CWTAB  BRU CHR0
       BRU CHR1
       BRU CHR2
       BRU CWTAB
CHR0   CLB; LSH 16; STA* CWPT; MIN CWDISP; BRR CW
CHR1   CLB; LSH 8; ADM* CWPT; MIN CWDISP; BRR CW
CHR2   ADM* CWPT; MIN CWPT; LDA CWTAB+3; STA CWDISP
       LDA WCC; SKE =600B; BRR CW
       BRM CWF; ERR TER; BRR CW

* INITIALIZE BUFFERLET PTRS
CINIT ZRO;* INITIALIZE STRING POINTERS
       LDX WCP; LDA 2,2; ETR =37777B; AXC; STA WCC
       STX CWPT
       BRR CINIT

CKER   ZRO;* CHECK FOR EXCEPTION FLAGGED
       LDX PORT; LDA =COMBUF; BRS 75; CAX; SKE WCP; BRR CKER
       LDA 0,2; SKE =FREE+BUSY; BRR CKER
       LDA =-1; STA CCTR; MIN CKER; BRR CKER

$CWF   ZRO;* START BUFFERED TERMINAL OUTPUT.  FLUSHES CURRENT
*      BUFFER AND ADVANCES TO THE NEXT.
       STX CWX (SAVE X)
       LDX WCP; LDA 2,2; LRSH 14; LDA WCC; SKG =0; BRU CWF3
       ADM TOTCCT              (UPDATE TOTAL CHAR COUNT)
       LSH 14; STA 2,2 (UPDATE COUNT)
STIO   LDA WCP; LDB CCTR; MIN CCTR; LDX PORT; BRS 97; BRU IOSTOP
* ADVANCE TO NEXT BUFFERLET
       LDX WCP; LDX 1,2; STX WCP
* WAIT FOR FREE BUFFERLET.  REPLACE BRS 81 WITH SBRM* 2XX IF
* IT IS DESIRED NOT TO DISMISS HERE.
CWF1   LDA 0,2; SKA =-1-FREE-BUSY; BRR CWF
       SKA =FREE; BRU CWF2
       LDA =WAIT*1000; BRS 81; BRU CWF1
* REINITIALIZE BUFFERLET PTRS
CWF2   BRM CINIT
CWF3   MIN CWF; LDX CWX; BRR CWF
IOSTOP BRM CKER; BRR CWF; BRU STIO

$FLUSH ZRO;* FLUSHES LAST BUFFER AND WAITS FOR OUTPUT TO FINISH
       BRM CWF; BRR FLUSH (EXCEPTION)
       LDX PORT; BRS 178
       SKP CCTR; BRU FL1
       BRM CKER; BRU *+2
FL1    MIN FLUSH; BRR FLUSH

       END
NETPRINT ** FICHE/FRAME BREAK *****
SBTONETPRINT SYMSORT

SYM.  PG.LN. IDENT.

BUF     1 10 BTO     BUSY    1 12 BTO     CCTR    1 36 BTO     
CHR0    2 11 BTO     CHR1    2 12 BTO     CHR2    2 13 BTO     CINIT   2 18 BTO     
CKER    2 23 BTO     COMBUF  1  9 BTO     CPS     1  5 BTO     CW      2  4 BTO     
CWDISP  2  6 BTO     CWF     2 28 BTO     CWF1    2 39 BTO     CWF2    3  4 BTO     
CWF3    3  5 BTO     CWPT    1 38 BTO     CWTAB   2  7 BTO     CWX     1 39 BTO     
ERR     1  4 BTO     FL1     3 13 BTO     FLUSH   3  8 BTO     FREE    1 11 BTO     
INIT    1 14 BTO     INIT1   1 22 BTO     IOSTOP  3  6 BTO     NBUF    1  6 BTO     
PORT    1 37 BTO     STIO    2 34 BTO     WAIT    1  8 BTO     WAIT    1  7 BTO     
WCC     1 34 BTO     WCP     1 35 BTO     
NETPRINT ** FICHE/FRAME BREAK *****
SDISP
NETPRI IDENT 10/12/76          * HI-SPEED TERMINAL PRINTER *
       NOLIST STAT,EXT

SPTR   OPD 514B5,2
TYPE   OPD 100B5,2
ERR    OPD 101B5,2
SPB    OPD 102B5,2

* ACCOUNTING PARAMETERS
HOLDJB EQU 1B5 (LISTING TO BE HELD FOR PICKUP--NO POSTAL CHARGES)
REMJOB EQU 4B4 (LISTING MADE ON REMOTE PRINTER)
* PARAMETERS
TBUFR  EQU 4000B               * TEMPORARY BUFFER PAGE KILLED LATER ON *
DBUF   EQU 10000B              * ADDRESS OF DISC BUFFER *
LUDNM EQU 0    (USER NAME FROM LUD)
FDLUD EQU 4    (FILE DIRECTORY POINTER)
LLUD  EQU 5    (LANGUAGE CONTROL)
MUDW3 EQU 6    (NONBILLABLE BIT--UUN OVERFLOW--GAN)
MUDW4 EQU 7    (COMPUTER NO.--UUN)
MUDW5 EQU 8    (CPARW)
NFIL   EQU 30                  * LIMIT 30 FILES *
NBUF   EQU 44                  * LIMIT COMMAND BUFFER TO 132 CHARS *
*OPTION FLAGS
SB     EQU 4B7
MI     EQU 2B7 (PERMIT LOWER CASE)
UP     EQU 1B7 (FORCE UPPER CASE)
LONG   EQU 4B6 (LONG SEPARATOR)
NOSEP  EQU 2B6 (NO SEPARATOR)
FORM   EQU 1B6 (FORMSIZE SPECIFIED)
DV     EQU 4B5 (2780 DRIVER)
CDC    EQU 2B5 (CDC DRIVER)
BU     EQU 1B5 (BUF OPTION)
LI     EQU 4B4 (LINES OPTION)
CON    EQU 2B4 (CONTROLS OPTION)
SKI    EQU 1B4 (SKIP OPTION)
PUN    EQU 4B3 (PUNCH OPTION)
DUM    EQU 2B3 (DUMMY OPTION)
WID    EQU 1B3 (WIDTH OPTION)
DP     EQU 4B2 (DP PRINTER)
PZERO  EQU *
       BSS 1
       GLOBAL
POPA   BSS 1
POPB   BSS 1
POPX   BSS 1
XCIN   BSS 1
TOUT   BSS 1
T1     ZRO
T2     ZRO
T3     ZRO
T4     ZRO
T5     ZRO
DATE ZRO;* DATE PROGRAM CALLED IN FIELD (3) FORMAT
BUSN BSS 4     (USER NAME)
OPT ZRO;* OPTION MASK
TCWD ZRO;* TERMINAL CHARACTERISTICS WORD
PARA ZRO;* TERMINAL PARAMETER 'A'.  RECORDS/2780 BUFFER.
DDIST ZRO;* DISTRICT OF CALLER
CPARW ZRO;* STATUS WORD OF CALLER
FILES ZRO;* TOTAL FILES IN THIS REQUEST
FCOUNT ZRO;* TOTAL FILES ENTERED (SOME MAY NOT PRINT)
FORMSIZE ZRO;* NO. OF LINES PER PAGE WHICH CAN BE PRINTED
LINES ZRO;* NO. OF LINES WHICH MAY PRINT ON PAGE BEFORE FORCING FORMFEED
SKIP ZRO;*  PAGECOUNT WHICH MUST BE SKIPPED BEFORE WRITING TO REAL DEVICE
SKSW ZRO;*  NEGATIVE WHEN SKIP OPTION IS NOT IN EFFECT
DPSW   ZRO;*   (NEGATIVE WHEN USER IS NOT DP)
2780SW ZRO;*   (NEGATIVE WHEN USER IS NOT 2780)
INFIL DATA -1  (INPUT FILE)
SEP    ZRO;* NEGATIVE FORCES LONG SEPARATOR
LCO    ZRO;*   (NEGATIVE WHEN FORCING CONVERSION TO UPPER CASE)
CONT   ZRO;*   (NEGATIVE WHEN CONTROLS ARE PERMITTED)
OFFSET ZRO;*   (NO. OF LINES TO SKIP AFTER TOP OF FORM)
WK     BSS 2   (TEMPORARY STRING POINTERS)
BRNO   EQU *
RQNO   ZRO;*   (BATCH REQUEST NO.)
CPY    ZRO;*   (COPY NO.)
CPTOP  ZRO;*   (FILE SIZE, CHARS)
CPTOP1 ZRO;*   (LAST CURSOR POSTION WRITTEN)
LCTR   ZRO;*   (COUNTER USED TO COUNT DOWN LINES)
BC     ZRO;*   (BLANK COMPRESSION COUNTER)
CC     ZRO;*   (CARRIAGE CONTROL COUNTER)
FF     ZRO;*   (FORMFEED COUNTER)
STATE  ZRO;*   (PRINTER DRIVER STATE)
WSPT   ZRO;*   (POINTER USED BY WS)
GCBPT  ZRO;*   (POINTER USED BY GCB)
EOB    ZRO;*   (EXIT ADDR. FOR GCB)
CHRCNT ZRO;*   (CHAR COUNTER FOR GCF)
DATA   ZRO;*   (DATA BYTE)
COUNT1 ZRO;*   (COUNTER USED BY PBNO)
WORD   ZRO;*   (WORD ASSEMBLY FOR GCF)
GCFCNT ZRO;*   (WORD COUNTER FOR GCF)
GPT    ZRO;*   (POINTER INTO GCF BUFFER)
TBUF   BSS 6   (TEMPORARY BUFFER)
C1     EQU TBUF (TEMP CELL USED BY PRJBTL)
N1     EQU TBUF+1 (TEMP CELL USED BY PBNO)
N2     EQU TBUF+2 (TEMP CELL USED BY PBNO)
N3     EQU TBUF+3 (TEMP CELL USED BY PBNO)
N4     EQU TBUF+4 (TEMP CELL USED BY PBNO)
N5     EQU TBUF+5 (TEMP CELL USED BY PBNO)
LCCT   ZRO;*   (COUNTER USED BY PBNO)
N      ZRO;*   (DIGIT BEING PRINTED BY PGNO)
LX     ZRO;*   (TEMP CELL USED BY PBNO)
LINPT  ZRO;*   (POINTER INTO PRINTLINE BUFFER)
       LOCAL
       BSS 100B+PZERO-*
       BSS 1   (RESERVED FOR MESSAGE POP)
       BSS 1   (RESERVED FOR ERROR POP)
       BRU* 0  (SPB POP)
       BSS 1   (RESERVED FOR OPCODE 103)
       BSS 1   (RESERVED FOR OPCODE 104)
       BSS 1 (RESERVED FOR ERROR POP 105)
       GLOBAL
RET1   ZRO;*   (SBRM RETURN CELLS)
RET2   ZRO
RET3   ZRO
RET4   ZRO
RET5   ZRO
RET6   ZRO
RT7    EQU *
RET7   ZRO
RET8   ZRO
RT9    EQU *
RET9   ZRO
FBPTR  DATA FB1                (POINTER INTO FILE TABLE)
PAGEC  ZRO;*   (PAGE COUNTER)
P0     ZRO;*   (INITIAL PAGE NO. FOR FIRST PAGE OF PRINTFILE)
WIDTH  ZRO;*   (WIDTH OF PRINT/PUNCH LINE)
WIDTH1 ZRO;*   (WIDTH COUNTER)
DUMMY  ZRO;*   (POS. WHEN DUMMY OPTION SELECTED)
PUNCH  ZRO;*   (NEGATIVE WHEN PUNCH IS SELECTED)
PUNCH1 ZRO;*   (PUNCH SWITCH TESTED BY CC2780)
SELCH DATA 264B (PUNCH SELECTION IS ESC "4")
EXTRN ZRO;*    (NEGATIVE WHEN EXTERNAL DEVICE IS TURNED ON)
OFSET1 DATA 0  (OFFSET SAVED HERE DURING PRINTING)
TOTCCT DATA 0  (TOTAL CHAR COUNT FLUSHED)
BILCCT DATA 0 (TOTCCT+WCC)
CHARK  DATA 0 (BILCCT/1000)
PAGES DATA 0  (BILLABLE PAGE COUNT)
PARTS DATA 1  (NO. OF PARTS)
MN     BSS 1  (MONTH)
YR     BSS 1  (YEAR)
JBSTA  DATA REMJOB+HOLDJB (REMOTE LISTING, NO POSTAGE)
C000   DATA 0   (COMPUTER NO.*1000)
REGION BSS 1  (REGION NO.)
PJC    BSS 4   (PROJECT CODE STRING)
LUDL   BSS 1   (LUD LOCATOR)
GAN    BSS 1   (GLOBAL ACCOUNT)
UUN    BSS 1   (UNIVERSAL USER NO.)
DIST   BSS 1   (DISTRICT)
USN    BSS 4   (REQUESTED BY STRING)
       LOCAL
CBUFC BSS 1
CBUFP BSS 2
NODEPT ZRO;* NODE AND PORT NO. DIALED
TID    ZRO;* TERMINAL ID CHAR
TERMC  BSS 1   (TERMINATING CHAR FOR INPUT STRING)
PROMPT  DATA 0  (NEGATIVE WHEN TERM CHAR IS BLANK)
       BSS 201B+PZERO-*
       DATA INT201             (ESCAPE ROUTINE)
*PANIC TABLE FOR FILE FORKS
PL ZRO
PA BSS 2
PX BSS 1
       BSS 2
       BSS 1
* PANIC TABLE FOR PROGRAM
FKPL ZRO
FKPA ZRO
FKO
FKPX ZRO
FKRL BSS 2
FKSTA ZRO
       BSS 240B+PZERO-*
START  BRU START1; BRS 10

*      STORAGE

CBUF   BSS NBUF
       GLOBAL
FB1    BSS 3*NFIL              (FILENAME TABLE)
FP     EQU 0
FCOPY  EQU 2
FB2    BSS 12*NFIL             (STRING STORAGE FOR FILENAMES)
       LOCAL
* ALLOW ACCESS BY BILLABLE USER ONLY
START1 STP XCIN
* READ PROJECT CODE FROM TS PAGE
       LDA =73B; LDB =PJC; LDX =4; BRS 67
       LDX =-4; LDA PJC+4,2; ETR =37677577B; STA PJC+4,2; BRX *-3
       BRS 39; STB T2
* READ LUDLOCATOR FROM TS PAGE
       LDA =41B; LDB =LUDL; LDX =1; BRS 67
* LOOK UP LUD ENTRY IN LUD
       LDA LUDL; BRM SLUDL
       LDA MUDW5,2; ETR =7777B; RSH 2; STA DIST; STA DDIST
       LDA MUDW3,2; ETR =1777777B; STA GAN
       LDP LUDNM,2; STP BUSN; STP USN
       LDP LUDNM+2,2; STP BUSN+2; STP USN+2
       LDA MUDW3,2; RSH 19; ETR =7; STA T1
       LDA MUDW4,2; RSH 17; LDA T1; LSH 17; STA UUN
       SKE T2; ERR LUDERR; STX T2
       LDX =PRIVT-PRIVTE; SNE PRIVTE,2; BRU START2; BRX *-2
       LDX T2
       BRS 71; NOP; CBA; SKE =6B7 (SKIP IF STATUS SET)
       SKN MUDW3,2 (SKIP IF FREEBEE); BRU START2
       TCO =37B; BRS 10
* READ SYSTEM NO.
START2 LDA =TBUFR; LDB =200B; CBX; BRS 124
       LDA TBUFR+75B; LRSH 12; MUL =1000; LSH 23; STA C000
* READ TERMINAL TYPE FROM TS PAGE
       LDA =47; LDB =TID; LDX =1; BRS 67
* NODE AND PORT FROM TS PAGE
       LDA =54; LDB =NODEPT; LDX =1; BRS 67
* GET AND SAVE DATE IN FIELD FORMAT
       LDA =-1; LDX =300B; BRS 176; STA DATE
* READ AND SAVE TERMINAL CHARACTERISTICS
       LDX PORT; BRS 132; STA TCWD
       LDA TID; RSH 15; ETR =17B; CLB; SKE =13B; LDB =-1; STB 2780SW
       LDA XCIN; SKE =0; BRU CD0; LDX =-1; BRS 13; BRU *+2; BRU CD0
       CIT XCIN; BRU CD0; LDA =-1; STA PROMPT
       BRU *+2
CD0    TYPE VERS
       LDA =CD; STA FKPL
       LDA =FKPL+514B5; BRS 9
       LDA* FKPL; SKE BS10; BRU *+2
BS10   BRS 10
       SBRM ABORT
       TYPE ILLTERM
      LDA FKPL; LDB =8; LDX =1; BRS 36; TCO =155B
       BRS 10

PRIVT  EQU *   TABLE OF PRIVILEGED UUN'S
       DATA 113411B            (YOUNGERC)
       DATA 136150B            (WCM)
       DATA 163456B            (EUSKEW)
PRIVTE EQU *


$CD    LDA =-1; XMA INFIL; SKE =-1; BRS 20
       LDA =7; STA PARA        (NO. OF RECORDS/2780 BUFFER)
       CLA; STA OPT            (NO OPTIONS YET SPECIFIED)
       STA FILES          (NO FILES YET SPECIFIED)
       LDA C000; STA BRNO      (SET BATCH REQUEST NO. = 0 FOR DUMMY)
       LDA =37777777B; STA LINES
       LDA =2B6; BRS 78
       LDX =-1; LDA =4B4; BRS 12 (COMMAND EDIT)
       SBRM ABORT
       BRS 114
       BRS 162
       SKN PROMPT; BRU *+2; BRU CD1
       TYPE OPTM; SKN 2780SW; TCO =155B
CD1    BRM RDKW; BRU CD2      (NULL)
       STP TGTP
       LDA =CTBL; LDB =CTBLE; BRM MATCH
       BRU NXCH3 (NOT RECOGNIZED)
       BRU NXCH4 (AMBIGUOUS)
       LDA 0,2; ETR =7774B4; MRG OPT; STA OPT
       LDX 0,2; BRU 0,2 (BRANCH TO APPROPRIATE COMMAND)
$NXCH3 BRM PNR
$NXCH4 SPB CLEAN; BRU CD

NXOPT  SKN PROMPT; BRU CD2 (NOW COLLECT FILENAMES); BRU CD1
INT201 ZRO T1
       SPB CLEAN; BRS 29
       SBRM ABORT              (TURN OFF EXTERNAL PRINTER)
       TYPE MESC; BRU CD
MESC   ASC '$(ESC)$/'


PNR    ZRO;* PRINT ' ' NOT RECOGNIZED FROM CBUFP
       TCO =2; LDP CBUFP; LDX =1; BRS 35; TCO =2
       TYPE NR; BRR PNR
NR     ASC ' NOT RECOGNIZED.$/'

$LOOK  ZRO;* RETURN NEXT NON-BLANK CHAR WITHOUT CONSUMING IT
       LDA =377B; CIT XCIN; SKE =0; BRR LOOK; SPB NXCH; BRU LOOK+1

$RDNO  ZRO;* READ DECIMAL NO. SKIP RETURN FOR NUMBER.
       BRM LOOK; SKG =31B; SKG =17B; BRR RDNO
       LDX XCIN; LDB =10; BRS 38; STB TERMC
       LDB =-1; SKB TERMC; CLB; STB PROMPT
       MIN RDNO; BRR RDNO

$RDKW  ZRO;* READ KEYWORD TO TERMINATING CHARACTER.
*      SKIP RETURN IF KEYWORD READ
*      TERMINATING CHAR RETURNED IN TERMC
*      PROMPT SWITCH SET NEGATIVE FOR  BLANK TERMC
       LDA =NBUF*3-1; STA CBUFC
       SPTR CBUF; STP CBUFP; BRM LOOK
RDKW1  SPB NXCH
       SKE =155B; SKG =0; BRU RDKW2
       SKE =152B; BRU *+2; BRU RDKW2
       SKR CBUFC; WCI CBUFP; BRU RDKW1
RDKW2  STA TERMC; CLB; SKG =0; LDB =-1; STB PROMPT
       LDA CBUFP+1; SUB CBUFP; SKG =0; BRR RDKW
       LDA CBUFP; LDB CBUFP+1
       MIN RDKW; BRR RDKW
MBNI   ASC '$MULTIPLE BLANK IN COMMANDS FILES NOT IMPLEMENTED$/'

PF     EQU * PRINT FILENAME FROM FILE TABLE
       LDX FBPTR; LDP FP,2; LDX =1; BRS 35
       SKN 2780SW; TCO =155B; BRR 0


$NXCH  EQU * READ NEXT CHAR FROM INPUT FILE
       CIO XCIN; SKE =137B; BRU NXCH1
       CLA; BRS 151; BRU NXCH
NXCH1  SKE =135B; BRU *+2; ERR MBNI
       SKG =132B; SKG =100B; BRR 0; SUB =40B
       BRR 0

$CLEAN EQU * CLEAN UP COMMANDS FILES AFTER AN ERROR
       CLA; STA PROMPT
       BRS 181; STP XCIN; LDX =-1; BRS 11
       BRR 0

*      TABLES

CTBL   EQU *
       ASC 'QUIT'
       0 QUIT,4
       ASC 'EXIT'
       0 EXIT,4
       ASC 'LOGOUT'
       0 LOGOUT,4
       ASC 'MIXED'
       DATA MI+SB+NXOPT
       ASC 'UPPER'
       DATA SB+UP+NXOPT
       ASC 'CONTROLS'
       DATA SB+GTCON
       ASC 'LONGSEP'
       DATA SB+LONG+NXOPT
       ASC 'NOSEP'
       DATA SB+NOSEP+NXOPT
       ASC 'FORMSIZE'
       DATA SB+FORM+GTFORM
       ASC '2780'
       DATA SB+DV+NXOPT
       ASC 'PUNCH'
       DATA SB+GTPUNCH
       ASC 'CDC'
       DATA SB+CDC+NXOPT
       ASC 'BUF'
       DATA SB+BU+GTBUF
       ASC 'LINES'
       DATA SB+LI+GTLIN
       ASC 'SKIP'
       DATA SB+GTSKIP
       ASC 'HELP'
       0 HELP,4
       ASC 'DUMMY'
       DATA SB+GTDUMMY
       ASC 'WIDTH'
       DATA SB+GTWIDTH
       ASC 'DP'
       DATA SB+GTDP
CTBLE  EQU *

*      OPTION PROCESSING


GTCON  LDA =CON
GTCON1 MRG OPT; STA OPT; BRU NXOPT

GTSKIP BRM RDNO; ERR EXPDIG
       SKG =0; ERR BADSKI
       STA SKIP; LDA =SKI; BRU GTCON1

GTPUNCH LDA =PUN; BRU GTCON1

GTDUMMY LDA =DUM; BRU GTCON1

GTDP   LDA =DP; BRU GTCON1

GTWIDTH BRM RDNO; ERR EXPDIG
       SKG =0; ERR BADWID
       STA WIDTH; LDA =WID; BRU GTCON1

GTLIN  BRM RDNO; ERR EXPDIG    (EXPECTED DIGIT)
       SKG =0; ERR BADLIN      (MUST BE AT LEAST ONE)
       STA LINES; BRU NXOPT

GTBUF  BRM RDNO; ERR EXPDIG
       SKG =7; SKG =0; ERR BADBUF
       STA PARA; BRU NXOPT

GTFORM BRM RDNO; BRU FKW
       SKG =0; ERR BADFOR
FKW1   STA FORMSIZE; BRU NXOPT
FKW    BRM RDKW; ERR BADFOR
       STP TGTP
       LDA =FTBL; LDB =FTBLE; BRM MATCH
       BRU NXCH3 (NOT RECOGNIZED)
       BRU NXCH4 (AMBIGUOUS)
       LDA 0,2; ETR =37777B; BRU FKW1

FTBL   EQU *
       ASC 'LARGE'
       ZRO     66,4
       ASC 'BIG'
       ZRO     66,4
       ASC 'SMALL'
       ZRO     51,4
FTBLE  EQU *

CD2    EQU *  ALL OPTIONS ENTERED.  CHECK FOR CONSISTENCY.
       LDA OPT
       SKA =MI+UP+LONG+NOSEP+FORM+DV+CDC+BU+LI+CON+SKI+PUN+DUM+WID+DP
       BRU CD3
*NO OPTIONS SPECIFIED.  SET UP DEFAULT.
       LDA =MI+LONG+CDC; SKN 2780SW
       LDA =UP+LONG+DV+BU
CD3    EQU * MAKE SURE A DRIVER IS SPECIFIED.
       SKA =PUN; MRG =DV
       SKA =CDC+DV+DP; BRU *+2; MRG =DV
*ASSURE SEPARATOR OPTION SPECIFIED.
       SKA =NOSEP+LONG; BRU *+2; MRG =LONG
*ASSURE LONGSEP WHEN 'DUMMY' OPTION IS GIVEN
       SKA =DUM; MRG =LONG
*CANNOT SPECIFY BOTH NOSEP AND LONGSEP
       SKA =LONG; BRU *+2; BRU *+3; SKA =NOSEP; ERR SEPER
*CANNOT SPECIFY BOTH MIXED AND UPPER
       SKA =UP; BRU *+2; BRU *+3; SKA =MI; ERR CASE
*CANNOT SPECIFY BOTH DRIVERS
       SKA =DV; BRU CD4 (2780)
       SKA =BU; ERR BADOPT
       SKN 2780SW; ERR WRNDVR
       SKA =DP; BRU CD3A
*DEFAULT CASE FOR CDC IS MIXED
       SKA =MI+UP; BRU *+2; MRG =MI
*CHECK FOR PORT 0-1
       LDB NODEPT; SKB =7776B; ERR WRNPORT (MUST BE 0 OR 1)
       LDB CDCDVR
       BRU CD5
CD3A   EQU * (DP)
       SKA =CDC; ERR BOTH
       LDB NODEPT; SKB =7776B; ERR WRNPORT
       LDB DPDVR; BRU CD4A
CD4    EQU * (2780)
       SKA =CDC; ERR BOTH
       SKN 2780SW; BRU *+2; ERR WRNDVR
       LDB IBMDVR
*DEFAULT CASE FOR 2780 AND DP IS UPPER
CD4A   SKA =MI+UP; BRU *+2; MRG =UP
*SET DRIVER ADDR.
CD5    STA OPT; STB DCD
*SET PROGRAM SWITCHES
       LDB =-1
       SKA =DP
       CLB
       STB DPSW
       LDB =-1
       SKA =DUM
       CLB
       STB DUMMY               (NON-NEGATIVE FORCES PRINTING OF SEP ONLY)
       SKA =WID                (HAS WIDTH BEEN SET)
       BRU *+5                 (YES)
       LDB =132
       SKA =PUN
       LDB =80
       STB WIDTH
       CLB
       SKA =PUN
       LDB =-1
       STB PUNCH
       LDB =-1
       SKA =NOSEP
       CLB
       STB SEP                 (NEGATIVE FORCES LONG SEPARATOR)
       LDB CW-1
       SKA =SKI
       LDB CW-2
       STB CW+1
       LDB =-1
       SKA =SKI
       CLB
       STB SKSW                (NEGATIVE WHEN WE ARE NOT SKIPPING)
       LDB =-1
       SKA =MI
       CLB
       STB LCO                 (NEGATIVE FORCES UPPER CASE ONLY)
       CLB
       SKA =CON
       LDB =-1
       STB CONT                (NEGATIVE PERMITS CONTROLS)
*SET LINE COUNTERS
       SKA =FORM; BRU *+2; BRU GFIL
CD6    LDA LINES; SKE FORMSIZE; BRU *+2; BRU GFIL (OFFSET=0)
       SKG FORMSIZE; BRU CD7 (COMPUTE OFFSET)
       LDA FORMSIZE; SKE =66; SNE =51; SUB =6; STA LINES
       BRU CD6
CD7    LDA FORMSIZE; SUB LINES; ADD =1; RSH 1; STA OFFSET

GFIL   EQU *  READ FILES TO BE PRINTED
       SKN DUMMY; BRU STPRINT
       TYPE FTP                (FILES TO BE PRINTED:)
       SKN 2780SW; TCO =155B
       LDA =[36*NFIL]-1+4B7
       STA T1               (COUNTER TO LIMIT STRING STORAGE)
       SPTR FB2; STP T2
       LDA =FB1; STA FBPTR
       CLA; STA FILES; STA FCOUNT
GFIL1  BRM RDFIL; STP WK; GCI WK; BRU GFIL8 (LF-END LIST)
       SKE ="  ."; BRU GFIL1A (GOT A FILENAME)
GFIL1B GCI WK; BRU GFIL8 (CR OR LF-END LIST)
       SKG =0; BRU GFIL1B
       ERR CNI
GFIL1A COPY AB,A; STA T4 (ACCUM FOR COPYCOUNT)
       LDA T3; STA T2 (WRITE STRING TO END OF STRING AREA)
       LDA =NFIL; SKG FCOUNT; ERR TOOMANY
       CBA; BRU GFIL3 (PARSE FILENAME)
GFIL2  WCI T2; SKR T1; ERR OFLOW
       GCI WK; BRU GFIL5 (END OF FILENAME)
GFIL3  SKE =17B; SNE =2; BRU GFIL6 (PROTECTED STRING)
       SKE =3; BRU GFIL2
* GET NO. OF COPIES
GFIL4  GCI WK; BRU GFIL5
       SKG =31B; SKG =17B; ERR EXPDIG
       SUB K20; XMA T4; MUL TEN; LSH 23; ADM T4
       BRU GFIL4
* END OF FILENAME
GFIL5  LDA T4; SKG =0; LDA =1; LDX FBPTR; STA FCOPY,2
       LDP T2; STP FP,2; MIN FCOUNT
       LDA =3; ADM FBPTR
       BRU GFIL1
* PROTECTED STRING
GFIL6  STA T5
GFIL7  WCI T2; SKR T1; ERR OFLOW
       GCI WK; BRU GFIL5; SKE T5; BRU GFIL7; BRU GFIL2
* ALL FILENAMES READ--NOW TRY TO OPEN THEM
GFIL8  LDA FCOUNT; SKG =0; ERR NONE; SUB =1; STA T1
       LDX =FB1; STX FBPTR
GFIL9  LDP FP,2; BRM BRS64; BRU GFIL11; STA INFIL
       CBA; SKE =3; BRU GFIL13 (NOT SYMBOLIC)
       RSP INFIL; SKG =0; BRU GFIL14 (EMPTY FILE)
       MIN FILES
GFIL10 LDA =-1; XMA INFIL; SKE =-1; BRS 20
       LDA =3; ADM FBPTR; LDX FBPTR
       SKR T1; BRU GFIL9
       LDA FILES; SKG =0; ERR NONE
       SKE FCOUNT; TYPE CONTG (CONTINUING..)
       BRU STPRINT

GFIL11 TYPE CANFIN
GFIL12 SPB PF; SKN 2780SW; TCO =155B
       LDX FBPTR; LDA =-1; STA FCOPY,2; BRU GFIL10
GFIL13 TYPE NOTSYM; BRU GFIL12
GFIL14 TYPE EMPTY; BRU GFIL12

HELP   TYPE HELPM; BRU CD
QUIT   BRS 10
EXIT   LDA ="EXI"; BRS 142
LOGOUT LDA ="LOG"; BRS 142


$BRS64 ZRO;* OPEN FILE IN USER-STATUS FORK
       STP PA; STX PX; LDA =BRS64A; STA PL
       LDA =PL+1B7; BRS 9
       LDA PL; ETR =37777B; SKE =BRS64C; MIN BRS64
       LDP PA; LDX PX; BRR BRS64
BRS64A BRS 64
BRS64C BRS 10; BRS 10

$RDFIL ZRO;* READ STRING TO CR OR LF
       SPTR CBUF
       STP CBUFP; LDA =75; STA CBUFC
       SPB NXCH; SKE =155B; SKG =0; BRU *-3; BRU *+2
RDFIL1 SPB NXCH; SKE =155B; SNE =152B; BRU RDFIL2
       SKR CBUFC; WCI CBUFP; BRU RDFIL1
RDFIL2 GCD CBUFP; BRU RDFIL3; SKG =0; BRU RDFIL2
       WCI CBUFP
RDFIL3 LDP CBUFP; BRR RDFIL


SLUDL  ZRO;* READ LUD ENTRY FROM LUD LOCATOR IN 'A'
       STA T4; ETR =1777B; XMA T4; RSH 10; STA T5
       SPB RBLK; CXA; ADD T5; CAX; BRR SLUDL

*READS LUD BLOCK INTO DISC TEMP. BUF.
RBLK   LDA T4; LRSH 23; DIV =200B (ENTRIES PER DISC)
       STB T3; CLB; LSH 13; ADD T3; ADD =320200B (FIRST DISC ADR.)
       CAB; STA T3; LDA =TBUFR; LDX =100B
       BRS 124; LDX =TBUFR; BRR 0

       END
NETPRINT ** FICHE/FRAME BREAK *****
SDISP SYMSORT

SYM.  PG.LN. IDENT.

2780SW  2 28 NETPRI  BC      3  2 NETPRI  BILCCT  4 19 NETPRI  
BRNO    2 35 NETPRI  BRS64  15 11 NETPRI  BRS64A 15 16 NETPRI  BRS64C 15 17 NETPRI  
BS10    6 31 NETPRI  BU      1 32 NETPRI  BUSN    2 15 NETPRI  C000    4 26 NETPRI  
C1      3 16 NETPRI  CBUF    5 22 NETPRI  CBUFC   4 35 NETPRI  CBUFP   4 36 NETPRI  
CC      3  3 NETPRI  CD      7  5 NETPRI  CD0     6 27 NETPRI  CD1     7 18 NETPRI  
CD2    11 17 NETPRI  CD3    11 24 NETPRI  CD3A   12  7 NETPRI  CD4    12 11 NETPRI  
CD4A   12 16 NETPRI  CD5    12 18 NETPRI  CD6    13 21 NETPRI  CD7    13 25 NETPRI  
CDC     1 31 NETPRI  CHARK   4 20 NETPRI  CHRCNT  3  9 NETPRI  CLEAN   8 39 NETPRI  
CON     1 34 NETPRI  CONT    2 32 NETPRI  COUNT1  3 11 NETPRI  CPARW   2 20 NETPRI  
CPTOP   2 38 NETPRI  CPTOP1  2 39 NETPRI  CPY     2 37 NETPRI  CTBL    9  7 NETPRI  
CTBLE  10  7 NETPRI  DATA    3 10 NETPRI  DATE    2 14 NETPRI  DBUF    1 14 NETPRI  
DDIST   2 19 NETPRI  DIST    4 32 NETPRI  DP      1 39 NETPRI  DPSW    2 27 NETPRI  
DUM     1 37 NETPRI  DUMMY   4 12 NETPRI  DV      1 30 NETPRI  EOB     3  8 NETPRI  
ERR     1  6 NETPRI  EXIT   15  7 NETPRI  EXTRN   4 16 NETPRI  FB1     5 24 NETPRI  
FB2     5 27 NETPRI  FBPTR   4  7 NETPRI  FCOPY   5 26 NETPRI  FCOUNT  2 22 NETPRI  
FDLUD   1 16 NETPRI  FF      3  4 NETPRI  FILES   2 21 NETPRI  FKPA    5 12 NETPRI  
FKPB    5 13 NETPRI  FKPL    5 11 NETPRI  FKPX    5 14 NETPRI  FKRL    5 15 NETPRI  
FKSTA   5 16 NETPRI  FKW    11  1 NETPRI  FKW1   10 39 NETPRI  FORM    1 29 NETPRI  
FORMSI  2 23 NETPRI  FP      5 25 NETPRI  FTBL   11  8 NETPRI  FTBLE  11 15 NETPRI  
GAN     4 30 NETPRI  GCBPT   3  7 NETPRI  GCFCNT  3 13 NETPRI  GFIL   13 27 NETPRI  
GFIL1  13 36 NETPRI  GFIL10 14 31 NETPRI  GFIL11 14 38 NETPRI  GFIL12 14 39 NETPRI  
GFIL13 15  2 NETPRI  GFIL14 15  3 NETPRI  GFIL1A 14  2 NETPRI  GFIL1B 13 38 NETPRI  
GFIL2  14  6 NETPRI  GFIL3  14  8 NETPRI  GFIL4  14 11 NETPRI  GFIL5  14 16 NETPRI  
GFIL6  14 21 NETPRI  GFIL7  14 22 NETPRI  GFIL8  14 25 NETPRI  GFIL9  14 27 NETPRI  
GPT     3 14 NETPRI  GTBUF  10 33 NETPRI  GTCON  10 12 NETPRI  GTCON1 10 13 NETPRI  
GTDP   10 23 NETPRI  GTDUMM 10 21 NETPRI  GTFORM 10 37 NETPRI  GTLIN  10 29 NETPRI  
GTPUNC 10 19 NETPRI  GTSKIP 10 15 NETPRI  GTWIDT 10 25 NETPRI  HELP   15  5 NETPRI  
HOLDJB  1 10 NETPRI  INFIL   2 29 NETPRI  INT201  7 29 NETPRI  JBSTA   4 25 NETPRI  
LCCT    3 22 NETPRI  LCO     2 31 NETPRI  LCTR    3  1 NETPRI  LI      1 33 NETPRI  
LINES   2 24 NETPRI  LINPT   3 25 NETPRI  LLUD    1 17 NETPRI  LOGOUT 15  8 NETPRI  
LONG    1 27 NETPRI  LOOK    8  2 NETPRI  LUDL    4 29 NETPRI  LUDNM   1 15 NETPRI  
LX      3 24 NETPRI  MBNI    8 25 NETPRI  MESC    7 33 NETPRI  MI      1 25 NETPRI  
MN      4 23 NETPRI  MUDW3   1 18 NETPRI  MUDW4   1 19 NETPRI  MUDW5   1 20 NETPRI  
N       3 23 NETPRI  N1      3 17 NETPRI  N2      3 18 NETPRI  N3      3 19 NETPRI  
N4      3 20 NETPRI  N5      3 21 NETPRI  NBUF    1 22 NETPRI  NFIL    1 21 NETPRI  
NODEPT  4 37 NETPRI  NOSEP   1 28 NETPRI  NR      7 39 NETPRI  NXCH    8 32 NETPRI  
NXCH1   8 35 NETPRI  NXCH3   7 25 NETPRI  NXCH4   7 26 NETPRI  NXOPT   7 28 NETPRI  
OFFSET  2 33 NETPRI  OFSET1  4 17 NETPRI  OPT     2 16 NETPRI  P0      4  9 NETPRI  
PA      5  6 NETPRI  PAGEC   4  8 NETPRI  PAGES   4 21 NETPRI  PARA    2 18 NETPRI  
PARTS   4 22 NETPRI  PF      8 27 NETPRI  PJC     4 28 NETPRI  PL      5  5 NETPRI  
PNR     7 36 NETPRI  POPA    2  4 NETPRI  POPB    2  5 NETPRI  POPX    2  6 NETPRI  
PRIVT   6 37 NETPRI  PRIVTE  7  2 NETPRI  PROMPT  5  1 NETPRI  PUN     1 36 NETPRI  
PUNCH   4 13 NETPRI  PUNCH1  4 14 NETPRI  PX      5  7 NETPRI  PZERO   2  1 NETPRI  
QUIT   15  6 NETPRI  RBLK   15 35 NETPRI  RDFIL  15 19 NETPRI  RDFIL1 15 23 NETPRI  
RDFIL2 15 25 NETPRI  RDFIL3 15 27 NETPRI  RDKW    8 11 NETPRI  RDKW1   8 17 NETPRI  
RDKW2   8 21 NETPRI  RDNO    8  5 NETPRI  REGION  4 27 NETPRI  REMJOB  1 11 NETPRI  
RET1    3 35 NETPRI  RET2    3 36 NETPRI  RET3    3 37 NETPRI  RET4    3 38 NETPRI  
RET5    3 39 NETPRI  RET6    4  1 NETPRI  RET7    4  3 NETPRI  RET8    4  4 NETPRI  
RET9    4  6 NETPRI  RQNO    2 36 NETPRI  RT7     4  2 NETPRI  RT9     4  5 NETPRI  
SB      1 24 NETPRI  SELCH   4 15 NETPRI  SEP     2 30 NETPRI  SKI     1 35 NETPRI  
SKIP    2 25 NETPRI  SKSW    2 26 NETPRI  SLUDL  15 30 NETPRI  SPB     1  7 NETPRI  
SPTR    1  4 NETPRI  START   5 18 NETPRI  START1  5 30 NETPRI  START2  6 13 NETPRI  
STATE   3  5 NETPRI  T1      2  9 NETPRI  T2      2 10 NETPRI  T3      2 11 NETPRI  
T4      2 12 NETPRI  T5      2 13 NETPRI  TBUF    3 15 NETPRI  TBUFR   1 13 NETPRI  
TCWD    2 17 NETPRI  TERMC   4 39 NETPRI  TID     4 38 NETPRI  TOTCCT  4 18 NETPRI  
TOUT    2  8 NETPRI  TYPE    1  5 NETPRI  UP      1 26 NETPRI  USN     4 33 NETPRI  
UUN     4 31 NETPRI  WID     1 38 NETPRI  WIDTH   4 10 NETPRI  WIDTH1  4 11 NETPRI  
WK      2 34 NETPRI  WORD    3 12 NETPRI  WSPT    3  6 NETPRI  XCIN    2  7 NETPRI  
YR      4 24 NETPRI  _       6 34 NETPRI  
NETPRINT ** FICHE/FRAME BREAK *****
SDVR
DVR    IDENT 10/13/76
       NOLIST EXT,STAT

*ASSEMBLY SWITCHES

TEST1  EQU 0   (CODE TO TEST THRUPUT VIA AUX CIRCUIT)
DEBUG  EQU -1   (USE TEST ACCOUNTING RATHER THAN REAL)

*MACROS

ASCP    MACRO D
X      NCHR D(1)
       DATA [*+2]*3-1+516B5,**3+X
       ASC D(1)
       ENDM

*OPDS

RET    OPD 514B4,2             (BRR* )
ERR    OPD 101B5,2
SPB    OPD 102B5,2
SPTR   OPD 514B5,2
NISC   OPD 550B5,2
* AN ERROR OCCURRED BUT WE WANT PRINTING TO COMPLETE BEFORE
*      PRINTING ERROR MESSAGE
ERROR  POPD 105B5,2
       LDX PORT
       BRS 178
       SBRM ABORT              (TURN OFF THE PRINTER)
       BRU* 101B               (PRINT ERROR MESSAGE AND GO TO CD)


*BUFFER LAYOUT
BUFFER EQU 30000B              (LOCATION OF DISC BUFFER)
*CHARACTER DEFINITIONS
EOFWD  EQU 27657537B
TOFCH  EQU 154B
CRCH   EQU 155B
ASCESC EQU 233B
ASCA   EQU 301B
ASCLF  EQU 212B
ASCTOF EQU 214B
ASCCR  EQU 215B
ASCBL  EQU 240B
ASCS   EQU 323B
ASCT   EQU 324B


$STPRINT EQU *  PRINT FILES REQUESTED.
       CLA
       STA TOTCCT              (NO CHARACTER CHARGE YET)
       STA OFSET1              (NO OFFSET YET)
       LDX PORT
       BRS 161                 (DISABLE ESCAPES AND CONTROL-SHIFT O)
       SKN DUMMY
       BRU STPR5               (PRINT SEPARATOR PAGES ONLY)
       SBRM GBRN               (GET BATCH REQUEST NO)
       SBRM EXTON              (TURN ON THE PRINTER)
       SBRM PRJHD               (PRINT SEPARATOR IF REQUIRED)
       LDA PUNCH
       STA PUNCH1              (TURN ON THE PUNCH)
       LDA FCOUNT; SUB =1; STA T1
       LDX =FB1; STX FBPTR
STPR1  LDA =1
STPR2  STA CPY                 (COPY NO. 1)
       SKG FCOPY,2             (HAVE WE PRINTED REQUIRED NO. OF COPIES)
       BRU STPR3               (NO)
       LDA =-1; XMA INFIL; SKE =-1; BRS 20
       LDA =3; ADM FBPTR; LDX FBPTR
       SKR T1                  (ARE WE DONE WITH LIST)
       BRU STPR1               (NO)
       CLA
       STA PUNCH               (TURN OFF THE PUNCH)
       STA PUNCH1              (TURN OFF THE PUNCH)
       SBRM PRJTL               (PRINT TRAILER IF REQUIRED)
       SBRM EXTOFF             (TURN OFF THE PRINTER)
       LDA BILCCT
       RSH 23
       DIV =1000
       STA CHARK
       SBRM P::ACC             (DO ACCOUNTING)
STPR4  SBRM ABORT1             (WAIT FOR ALL OUTPUT TO COMPLETE)
*                              (THEN RESET EXTRN AND TERMINAL)
*                              (PARAMETERS)
       LDX PORT
       BRS 162                 (REENABLE SOFT AND HARD ESCAPES)
       SKN 2780SW; BRS 10
       BRU CD                  (GET NEXT SET OF OPTIONS)
STPR3  LDP FP,2; BRM BRS64; ERR CROPN; STA INFIL
       RSP INFIL; STA CPTOP
       SBRM PRINT               (PRINT THE FILE)
       LDA CPY
       ADD =1
       LDX FBPTR
       BRU STPR2
STPR5  SBRM EXTON              (DUMMY OPTION)
       SBRM PRJHD
       SBRM PRJTL
       SBRM EXTOFF
       BRU STPR4


PRINT  NOP RET3 (PRINT FILE.  PUT OUT HEADING GIVING
*      REQUEST NO., FILENAME, AND COPY NO.)
*      THIS INFO. SHOULD ALWAYS APPEAR ON AN EVEN-NUMBERED PAGE
*      I.E., "PAGEC" PRINTED ALREADY SHOULD BE ODD.
       LDA =BFE                (EXIT POINT FOR GCB)
       SPB LINIT
       LDX P:RQN; SPB WS       (REQUEST NO:)
       LDA RQNO; SBRM ISCD      (PRINT NO. IN DECIMAL)
       LDX P:FL; SPB WS      ($FILE NAME: )
       LDX FBPTR; LDP FP,2; STP WK
       SPB WSWK
       LDX P:COP; SPB WS        ($COPY )
       LDA CPY; SBRM ISCD       (PRINT NO. )
       CLX;*                   (INITIAL STATE)
       BRU NXCHR
BFE    EQU *                   (GCB RETURNS HERE)
       LDA GCF-1               (GET SET TO USE GCF)
       STA NXCHR
       LDA =37777777B
       STA CHRCNT              (PRIME GCF COUNTERS)
       STA GCFCNT              ( "    "    ")
       CLA
       SCP INFIL               (SET FILE TO BEGINNING)
       ERR SCPER
       LDA CPTOP
       SUB =1
       STA CPTOP1
       LDA OFFSET
       STA OFSET1              (START OFFSET)
       LDA PAGEC               (SPECIAL STATE WILL LIMIT PAGE EJECTS)
       ADD =1                  (TO JUST ONE.  SET P0 TO THE PAGE COUNT)
       STA P0                  (WE WANT TO HAVE.)
       LDX =S                  (SPECIAL STATE TO LIMIT FORM FEEDS)
       LDA =CRCH
       SKN PUNCH1
       LDA =TOFCH              (TOF PROCESSING WILL TAKE CARE OF OFFSET)
       BRU NXCHR1

EOF    SKN PUNCH1              (WERE WE PUNCHING)
       BRU *+3                 (NO)
       SPB CC2780              (CLEAR LAST PUNCH LINE)
       BRU EOF4
* END OF FILE--SKIP REMAINDER OF CURRENT PAGE BY ASSURING
*      THAT F FLAG IS SET IN STATE.
       CXA; SKA =F; BRU EOF1
       MIN FF; MIN PAGEC
EOF1   LDX =F (FORGET BLANK COMPRESSION AND CARRIAGE CONTROL)
       LDA LINES
       STA LCTR
* NOTE THAT WE DO NOT ADD OFSET1 HERE.
       LDA =-1
       STA CC  (CLEAR COMPRESSION COUNT)
       STA BC  (CLEAR BLANK COMPRESSION)
       ADM LCTR (FIX LCTR)
* PAGE TO BE PRINTED NEXT SHOULD BE EVEN--"PAGEC" ALREADY
*      PRINTED MUST BE ODD.  FF TO ACCOMPLISH THIS SHOULD BE MINIMIZED.
       ADM PAGEC
       SKR FF
       BRU *-2
EOF2   MIN FF
       MIN PAGEC
       LDA PAGEC
       SKA =1  (ODD)
       BRU EOF3 (YES)
       BRU EOF2
EOF3   SKN 2780SW
       BRU EOF5
       SKN DPSW
       BRU EOF6
       SPB FFCDC
EOF4   LDA CW-1
       STA CW+1                (FIX CW TO WRITE TO REAL DEVICE)
       CLA
       STA OFSET1              (CLEAR OFFSET)
       BRR RET3                (DONE WITH FILE)
EOF5   SPB FF2780
       BRU EOF4
EOF6   SPB FFDP
       BRU EOF4

************************************************************
*                                                          *
*      P R I N T   D R I V E R                             *
*                                                          *
************************************************************

*STATE FLAGS
S      EQU 10B (SPECIAL STATE FOR TOF PROCESSING ON FIRST PAGE OF TEXT)
C      EQU 4   (CARRIAGE CONTROL COMPRESSION FLAG)
B      EQU 2   (BLANK COMPRESSION FLAG)
F      EQU 1   (TOF COMPRESSION FLAG--ONE OR MORE FORMFEEDS)

NXCHR0 CBX     (ENTRY POINT FOR IGNORED CHARACTER)
NXCHR  SPB GCF (GET NEXT CHAR. TO BE PRINTED.  CHANGED TO SPB GCB AT TIMES)
NXCHR1 COPY AX,XB              (SAVE STATE IN B)
       BRU* ASCTAB,2

ASCTAB DATA BL
       RPT (X=1,15); DATA PUNCT1; ENDR
       RPT (X=1,10); DATA NUM; ENDR
       RPT (X=1,7); DATA PUNCT2; ENDR
       RPT (X=1,26); DATA UPC; ENDR
       RPT (X=1,6); DATA PUNCT3; ENDR
       RPT (X=1,26); DATA LC; ENDR
       DATA PUNCT4 (LEFT BRACE)
       DATA NXCHR0 (134)
       DATA MB (MULTIPLE BLANK)
       DATA NXCHR0 (136)
       DATA NXCHR0 (DEL)
       DATA NXCHR0 (NUL)
       DATA SOH
       DATA NXCHR0 (STX)
       DATA NXCHR0 (ETX)
       DATA EOT
       DATA ENQ,ACK,BEL,BS,HT
       DATA LF
       DATA VT
       DATA TOF
       DATA CR
       DATA SO,SI,DLE
       DATA DC1,DC2,DC3,DC4,NAK,SYN,ETB,CAN,EM,SUB
       DATA ESC,FS,GS,RS,US


*MULTIPLE BLANK (135)
MB     CBX
       SPB GCF                 (GET COUNT)
       ADM BC
       CNA
       ADM WIDTH1
       LDX BSTATE,2            (CHANGE STATE)
       BRU NXCHR
*BLANK (0)
BL     CBX
       MIN BC
       LDX BSTATE,2
       SKR WIDTH1
       BRU NXCHR
       BRU NXCHR

*END OF LINE (152 OR 155)
CR     EQU *
LF     EQU *
       CBX
       MIN CC
       LDA =-1; STA BC
       LDA WIDTH
       STA WIDTH1
       LDX CSTATE,2            (CHANGE STATE)
       SKR LCTR                (COUNT LINES OF TEXT ON THIS PAGE)
       BRU NXCHR
* BEFORE FORCING FORMFEED SEE IF WE ARE ALREADY AT TOP OF PAGE
       LDA LINES
       SKE FORMSIZE
       BRU TOF
       MIN PAGEC
       SKN SKSW                (ARE WE SKIPPING LISTING PAGES)
       SPB TOF2                (YES)
       LDA LINES
       SUB =1
       STA LCTR
       BRU TOF3

*TOF OF FORM (134 OR 154)
TOF    CBX
       MIN FF
       MIN PAGEC               (COUNT PAGES PRINTED SO FAR)
       SKN SKSW                (ARE WE SKIPPING LISTING PAGES)
       SPB TOF2                (YES)
TOF1   LDA LINES               (DESIRED NO. OF LINES OF TEXT PER PAGE)
       STA LCTR
       LDA WIDTH
       STA WIDTH1
       LDA =-1
       STA CC                  (FORGET CARRIAGE CONTROL)
       STA BC                  (FORGET BLANK COMPRESSION)
       ADM LCTR                (ADJUST LCTR)
       LDX FSTATE,2            (CHANGE STATE)
TOF3   LDA OFSET1              (SET TO DOWNSPACE IF DESIRED)
       SKG =0
       BRU NXCHR
       ADM CC
       LDX CSTATE,2            (CHANGE STATE)
       BRU NXCHR
TOF2   LDA PAGEC
       SKE SKIP                (HAVE WE SKIPPED ENOUGH)
       BRR 0                   (NO)
       LDA CW-1                (CHANGE CW TO START OUTPUT TO REAL DEVICE)
       STA CW+1
       LDA =-1
       STA SKSW
       BRR 0

*NOTE:  OFFSET IS NORMALLY ZERO.  WHEN TYMSHARE CONTROL TAPES ARE IN
*      USE (FORMSIZE OPTION) THEN IT IS ASSUMBED THAT OFFSET =
*      (FORMSIZE-LINES+1)/2 IN ORDER TO CENTER LISTING ON PAPER.
*      TOF IS ALSO ASSUMBED TO BE AT LINE 1.

*CONTROLS
SOH    EQU *
EOT    EQU *
ENQ    EQU *
ACK    EQU *
BEL    EQU *
BS     EQU *
HT     EQU *
VT     EQU *
SO     EQU *
SI     EQU *
DLE    EQU *
DC1    EQU *
DC2    EQU *
DC3    EQU *
DC4    EQU *
NAK    EQU *
SYN    EQU *
ETB    EQU *
CAN    EQU *
EM     EQU *
SUB    EQU *
ESC    EQU *
FS     EQU *
GS     EQU *
RS     EQU *
US     EQU *
       SKN CONT                (ARE CONTROLS PERMITTED)
       BRU NXCHR0              (NO)
       BRU DC                  (TREAT AS DATA)

*LOWER CASE (101-132)
LC     SKN LCO                 (IS LOWER CASE OUTPUT PERMITTED)
       BRU DC                  (YES)
       ETR =77B
       ADD =40B                (CONVERT TO UPPER CASE)

*DATA CHARS
DC     EQU *
UPC    EQU *
PUNCT1 EQU *
PUNCT2 EQU *
PUNCT3 EQU *
PUNCT4 EQU *
NUM    EQU *
       CBX
       ADD =40B
       MRG =200B
       SKR WIDTH1
$DCD   BRU* 27S,2              (CHANGED DEPENDING ON TYPE OF REMOTE PRINTER)
       BRU NXCHR               (LINE TOO WIDE ALREADY.  THROW REMAINDER AWAY)

$IBMDVR BRU* 27S,2             (USED TO PRIME DCD)
27S    EQU *                   (FUNCTION TABLE FOR 2780 TYPE PRINTER)
       RPT (X=0,7)
       DATA 27S.&($X)
       ENDR
       RPT (X=10,17)
       DATA 27S.&($X)
       ENDR

$CDCDVR BRU* CDCS,2            (USED TO PRIME DCD)
CDCS   EQU *                   (FUNCTION TABLE FOR CDC TYPE PRINTER)
       RPT (X=0,7)
       DATA CDCS.&($X)
       ENDR
       RPT (X=10,17)
       DATA CDCS.&($X)
       ENDR

$DPDVR BRU* DPS,2              (USED TO PRIME DCD)
DPS    EQU *                   (FUNCTION TABLE FOR DP TYPE PRINTER)
       RPT (X=0,7)
       DATA DPS.&($X)
       ENDR
       RPT (X=10,17)
       DATA DPS.&($X)
       ENDR

************************************************************
*                                                          *
*      2780  DRIVER  ROUTINES                              *
*                                                          *
************************************************************
27S10  LDX CSSTATE,2           (TURN OFF S STATE)
27S0   MIN LINPT
       STA* LINPT
       BRU NXCHR

27S17  EQU *
27S15  EQU *
27S13  EQU *
27S11  EQU *                   (SPECIAL STATE MUST ASSURE ONLY ONE FF)
       CLB
       STB FF
       LDB P0                  (RESET PAGEC)
       STB PAGEC
       LDX CSSTATE,2           (TURN OFF S STATE)
       BRU DCD                 (BEGIN NORMAL PROCESSING)
27S1   STA DATA                (SAVE DATA BYTE)
       SPB FF2780              (UNWIND FORMFEED COUNT)
       MIN LINPT
       LDA DATA
       STA* LINPT              (PUT DATA BYTE INTO NEW PRINT LINE)
       BRU NXCHR

27S12  LDX CSSTATE,2           (TURN OFF S STATE)
27S2   STA DATA
       SPB BC2780              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BC2780 PUTS DATA BYTE INTO NEW LINE)

27S3   STA DATA
       SPB FF2780              (UNWIND FORMFEED COUNT)
       SPB BC2780              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BC2780 TOOK CARE OF DATA BYTE)

27S14  LDX CSSTATE,2           (TURN OFF S STATE)
27S4   STA DATA
       SPB CC2780              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

27S5   STA DATA
       SPB FF2780              (UNWIND FORMFEED COUNT)
       SPB CC2780              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

27S16  LDX CSSTATE,2           (TURN OFF S STATE)
27S6   STA DATA
       SPB CC2780              (UNWIND CARRIAGE CONTROL)
       SPB BC2780              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BC2780 TOOK CARE OF DATA BYTE)

27S7   STA DATA
       SPB FF2780              (UNWIND FORMFEED COUNT)
       SPB CC2780              (UNWIND CARRIAGE CONTROL)
       SPB BC2780              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BC2780 TOOK CARE OF DATA BYTE)

************************************************************
*                                                          *
*      CDC  DRIVER  ROUTINES                               *
*                                                          *
************************************************************
CDCS10  LDX CSSTATE,2           (TURN OFF S STATE)
CDCS0   MIN LINPT
       STA* LINPT
       BRU NXCHR

CDCS17  EQU *
CDCS15  EQU *
CDCS13  EQU *
CDCS11  EQU *                   (SPECIAL STATE MUST ASSURE ONLY ONE FF)
       CLB
       STB FF
       LDB P0                  (RESET PAGEC)
       STB PAGEC
       LDX CSSTATE,2           (TURN OFF S STATE)
       BRU DCD                 (BEGIN NORMAL PROCESSING)
CDCS1   STA DATA                (SAVE DATA BYTE)
       SPB FFCDC              (UNWIND FORMFEED COUNT)
       MIN LINPT
       LDA DATA
       STA* LINPT              (PUT DATA BYTE INTO NEW PRINT LINE)
       BRU NXCHR

CDCS12  LDX CSSTATE,2           (TURN OFF S STATE)
CDCS2   STA DATA
       SPB BCCDC              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCCDC PUTS DATA BYTE INTO NEW LINE)

CDCS3   STA DATA
       SPB FFCDC              (UNWIND FORMFEED COUNT)
       SPB BCCDC              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCCDC TOOK CARE OF DATA BYTE)

CDCS14  LDX CSSTATE,2           (TURN OFF S STATE)
CDCS4   STA DATA
       SPB CCCDC              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

CDCS5   STA DATA
       SPB FFCDC              (UNWIND FORMFEED COUNT)
       SPB CCCDC              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

CDCS16  LDX CSSTATE,2           (TURN OFF S STATE)
CDCS6   STA DATA
       SPB CCCDC              (UNWIND CARRIAGE CONTROL)
       SPB BCCDC              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCCDC TOOK CARE OF DATA BYTE)

CDCS7   STA DATA
       SPB FFCDC              (UNWIND FORMFEED COUNT)
       SPB CCCDC              (UNWIND CARRIAGE CONTROL)
       SPB BCCDC              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCCDC TOOK CARE OF DATA BYTE)

************************************************************
*                                                          *
*      DP  DRIVER  ROUTINES                                *
*                                                          *
************************************************************
DPS10  LDX CSSTATE,2           (TURN OFF S STATE)
DPS0   MIN LINPT
       STA* LINPT
       BRU NXCHR

DPS17  EQU *
DPS15  EQU *
DPS13  EQU *
DPS11  EQU *                   (SPECIAL STATE MUST ASSURE ONLY ONE FF)
       CLB
       STB FF
       LDB P0                  (RESET PAGEC)
       STB PAGEC
       LDX CSSTATE,2           (TURN OFF S STATE)
       BRU DCD                 (BEGIN NORMAL PROCESSING)
DPS1   STA DATA                (SAVE DATA BYTE)
       SPB FFDP              (UNWIND FORMFEED COUNT)
       MIN LINPT
       LDA DATA
       STA* LINPT              (PUT DATA BYTE INTO NEW PRINT LINE)
       BRU NXCHR

DPS12  LDX CSSTATE,2           (TURN OFF S STATE)
DPS2   STA DATA
       SPB BCDP              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCDP PUTS DATA BYTE INTO NEW LINE)

DPS3   STA DATA
       SPB FFDP              (UNWIND FORMFEED COUNT)
       SPB BCDP              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCDP TOOK CARE OF DATA BYTE)

DPS14  LDX CSSTATE,2           (TURN OFF S STATE)
DPS4   STA DATA
       SPB CCDP              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

DPS5   STA DATA
       SPB FFDP              (UNWIND FORMFEED COUNT)
       SPB CCDP              (UNWIND CARRIAGE CONTROL)
       MIN LINPT
       LDA DATA
       STA* LINPT
       BRU NXCHR

DPS16  LDX CSSTATE,2           (TURN OFF S STATE)
DPS6   STA DATA
       SPB CCDP              (UNWIND CARRIAGE CONTROL)
       SPB BCDP              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCDP TOOK CARE OF DATA BYTE)

DPS7   STA DATA
       SPB FFDP              (UNWIND FORMFEED COUNT)
       SPB CCDP              (UNWIND CARRIAGE CONTROL)
       SPB BCDP              (UNWIND BLANK COMPRESSION)
       BRU NXCHR               (BCDP TOOK CARE OF DATA BYTE)

***********************
* FORMFEED PROCESSING *
***********************
$FF2780 EQU *
       STX STATE
* ESC A IS TOP OF FORM
FF27A  LDA =ASCESC; BRM CW; LDA =ASCA; BRM CW
* EMPTY PRINTLINE
       LDX =LINBUF
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
* END LINE WITH CR
       LDA =ASCCR; BRM CW
* ASSURE LINE STARTS WITH BLANK
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
* SEE IF DONE
       SKR FF
       BRU FF27A               (NO)
* CHANGE STATE
       LDX STATE
       LDX CFSTATE,2
       BRR 0

$FFCDC EQU *
       STX STATE
* EMPTY PRINTLINE
       LDX =LINBUF
       BRU *+4
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
* ASSURE PRINT LINE BEGINS WITH BLANK
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
* END LINE WITH CR
FFCDC1 LDA =ASCCR; BRM CW
       LDA =ASCBL; BRM CW
* SEE IF DONE
       SKR FF
       BRU FFCDC1              (NO)
* CHANGE STATE
       LDX STATE
       LDX CFSTATE,2
       BRR 0

$FFDP EQU *
       STX STATE
* EMPTY PRINTLINE
       LDX =LINBUF
       BRU *+4
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
FFDP1  LDA =ASCCR; BRM CW
       LDA =ASCTOF
       BRM CW
       SKR FF
       BRU FFDP1
       LDX STATE
       LDX CFSTATE,2
       BRR 0

*******************************
* CARRIAGE CONTROL PROCESSING *
*******************************
CC2780 EQU *
       STX STATE
CC27D  SKN PUNCH1
       BRU CC27E
       LDA =ASCESC; BRM CW
       LDA SELCH; BRM CW
       BRU CC27A
CC27E  LDA CC
       SKE =0                  (SINGLE SKIP)
       BRU CC27B               (NO)
CC27A  EQU *                   (EMPTY PRINTLINE)
       LDX =LINBUF
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
* END LINE WITH CR
       LDA =ASCCR; BRM CW
* ASSURE NEWLINE STARTS WITH BLANK
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
* ARE WE DONE
       SKR CC
       BRU CC27D
* CHANGE STATE
       LDX STATE
       LDX CCSTATE,2
       BRR 0
CC27B  SKE ONE                 (DOUBLE SKIP)
       BRU CC27C               (NO, USE TRIPLE)
*                              (SKR CC GIVES TOTAL ADJUSTMENT OF -2)
       LDA =ASCESC; BRM CW; LDA =ASCS; BRM CW
       LDA =-1; BRU CC27F
CC27C  LDA =ASCESC; BRM CW; LDA =ASCT; BRM CW
       LDA =-2
CC27F  ADM CC                  (SKR CC GIVES TOTAL ADJUSTMENT OF -3)
       BRU CC27A

CCCDC EQU *
       STX STATE
       LDX =LINBUF
       BRU *+4
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
* ASSURE NEW LINE STARTS WITH BLANK
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
* END LINE WITH CR
CCCDC1 LDA =ASCCR; BRM CW
       LDA CC
       SKG ONE                 (CAN WE TRIPLE SKIP)
       BRU CCCDC3              (NO)
       LDA =207B
       BRM CW
       LDA =-2
       ADM CC
       SKR CC
       BRU CCCDC1              (SOME SKIPS REMAINING)
* CHANGE STATE
CCCDC2 LDX STATE
       LDX CCSTATE,2
       BRR 0
CCCDC3 ADD =201B
       BRM CW                  (OUTPUT SINGLE OR DOUBLE SPACE)
       LDA =-1
       STA CC
       BRU CCCDC2

CCDP   EQU *
       STX STATE
       LDX =LINBUF
       BRU *+4
       LDA 0,2
       BRM CW
       EAX 1,2
       CXA
       SKG LINPT
       BRU *-5
       LDA =LINBUF-1
       STA LINPT
       LDA =ASCBL
       STA LINBUF
CCDP1  LDA  =ASCLF; BRM CW
       SKR CC
       BRU CCDP1
       LDX STATE
       LDX CCSTATE,2
       BRR 0

********************************
* BLANK COMPRESSION PROCESSING *
********************************
BCDP   EQU *
BCCDC  EQU *
BC2780 EQU *
BC27C  LDA BC
       SKG =29
       BRU BC27A
       LDA =47B
       MIN LINPT
       STA* LINPT
       LDA =-31
       ADM BC
       BRU BC27C
BC27A  SKG =-1
       BRU BC27B
       ADD =11B
       MIN LINPT
       STA* LINPT
BC27B  LDA =-1
       STA BC
* PUT DATA INTO LINE FOLLOWING BLANK COMPRESSION CODE
       LDA DATA
       MIN LINPT
       STA* LINPT
* CHANGE STATE
       LDX CBSTATE,2
       BRR 0

*************************************************************
*                                                           *
*      S U B R O U T I N E S                                *
*                                                           *
*************************************************************


GBRN   NOP     RT9             (SET UP BATCH REQUEST NO.)
       LDP     BNFIL
       LDX     TWO
       BRS     65
       BRU     GBRN1
       STA     INFIL
       CLA
       SCP     INFIL
       ERR   BF
       WIO     INFIL
       SKE     =EOFWD
       SNE    ZERO
       BRU     GBRN2
       STA     BRNO
GBRN3  LDA     BRNO
       ADD     ONE
       SKG     =999
       BRU     *+2
       LDA     ONE
       CAB
       LDA     K4B7
       SCP     INFIL
       ERR   BF
       CBA
       WIO     INFIL
       LDA =-1
       XMA     INFIL
       BRS     20
       LDA     C000
       ADM     BRNO
       RET     GBRN
GBRN1  CXA
       SKE ONE
       SNE =30
       BRU GBRN1A
       SKE =34
       SNE =84
       BRU GBRN1A
       ERR   BF
GBRN1A BRS     45
       BRU     GBRN+1
GBRN2  BRS     42
       LRSH    23
       DIV     =1000
       STB     BRNO
       BRU     GBRN3
       IF      DEBUG
BNFIL  ASCP    '(CCARTER)@BATCHNUM1'
       ELSE
BNFIL  ASCP    '(*1BATCH)@BATCHNUM1'
       ENDF

LINIT  EQU * INITIALIZE LINE BUFFER AND SET EOB FOR EXIT FROM GCB
       STA EOB
       LDA =-1; STA BC; STA CC; STA FF
       LDA =LINBUF-1; STA LINPT
       ADD =1 (SKIP OVER THE BLANK)
       STA WSPT; STA GCBPT
       LDA =ASCBL; STA LINBUF (INITIALIZE 1ST CHAR TO BLANK)
       LDA GCB-1; STA NXCHR    (PRIME NXCHR TO SPC GCB)
       LDA WIDTH
       STA WIDTH1              (INITIALIZE WIDTH COUNTER)
       BRR 0

WCB    EQU * WRITE CHAR TO BUFFER
       MIN WSPT; STA* WSPT; BRR 0

WS     EQU * WRITE STRING TO BUFFER FROM X=ADDR. OF STRING
       SPTR 0,2; ADD =100; XAB; STP WK
WS1    GCI WK; 0; SKE =17B; BRU *+2; BRR 0
       SKE =4; BRU *+2; LDA =155B
       MIN WSPT; STA* WSPT; BRU WS1

WSWK   EQU * WRITE STRING TO BUFFER FROM STRING WHOSE PTRS ARE IN WK
WSWK1  GCI WK; BRR 0; SKA =100B; BRU WSWK1
       MIN WSPT; STA* WSPT; BRU WSWK1

ISCD   NOP RET4 (INTERNAL INTEGER TO DECIMAL STRING)
       CAX; SPTR TBUF
       STP WK
       CXA
       LDX =1B7
       NISC WK
       MIN WK (SKIP SIGN)
       SPB WSWK
       BRR RET4

       SPB GCB
GCB    EQU * GET CHAR FROM BUFFER.  EXIT VIA EOB WHEN EMPTY BUFFER
       MIN GCBPT
       LDA GCBPT; SKG WSPT; BRU GCB1
*      KILL SPILLOVER BUFFER AREA
       LDA =4000B; BRS 4; BRU* EOB
GCB1   LDA* GCBPT; BRR 0

       SPB GCF
GCF    EQU * GET CHAR FROM FILE.  EXIT VIA EOF WHEN CPTOP1 EXHAUSTED.
       SKR CHRCNT; BRU GWORD; LDB WORD
GCF1   CLA; LSH 8; STB WORD
       ETR =177B; SKR CPTOP1; BRR 0; BRU EOF

GWORD  EQU * FETCH NEXT WORD FROM FILE BUFFER
       SKR GCFCNT; BRU RF
       LDB* GPT; MIN GPT; LDA =2+4B7; STA CHRCNT
       BRU GCF1

RF     EQU * READ NEXT BLOCK FROM FILE INTO BUFFER
       STX STATE; LDX =BUFFER; STX GPT
       LDA =4000B; BIO INFIL; NOP
       LDA INFIL; SKA =4B6; ERR READER
       LDA =4000B+4B7; STA GCFCNT; LDX STATE; BRU GWORD

************************************************
*                                           *
* TURN REMOTE DEVICE ON OR OFF              *
*                                           *
*********************************************

EXTON  NOP RET4
       IF TEST1
       SBRM BLDCH
       ENDF
       LDA =-1
       STA EXTRN               (SWITCH INDICATES DEVICE TURNED ON)
       LDX PORT
       BRS 132
       ETR =-1-16B4
       MRG =12B4               (SET BAUDRATE FOR OUTPUT = 5)
       SKN 2780SW
       SPB SETA
       EOR =16B4+7B3
       BRS 160
       EOR =16B4+7B3
       BRS 160                 (SET TERMINAL PARAMETERS)
       BRM INIT                (SET UP FOR BUFFERED TERMINAL OUTPUT)
       LDA =202B
       BRM CW                  (TURN ON COMPRESSION)
       LDA =ASCLF
       SKN 2780SW
       BRM CW
       SKN 2780SW
       BRR RET4
       LDA =ASCCR
       BRM CW
       LDA =200B
       SKN DPSW
       BRR RET4
       BRM CW
       BRR RET4

SETA   ETR =-1-7B3; AXC; LDB PARA; LSH 9; COPY BA,XA; LDX PORT; BRR 0

EXTOFF NOP RET4
       LDA =ASCCR
       SKN 2780SW
       BRU *+2
       BRM CW
       LDA =203B
       BRM CW
       BRM CWF                 (FLUSH BUFFER WITHOUT DISMISS)
       ERR TER
       BRU ABORT1

$ABORT NOP RET4
       SKN EXTRN; BRR RET4
       IF TEST1
       BRS 156
       ENDF
       LDX PORT; BRS 99         (ABORT BLOCK I/O IN PROGRESS)
       BRS 29                  (CLEAR OUTPUT BUFFER)
       BRS 85                  (ENTER EIGHT LEVEL OUTPUT)
       LDA =ASCCR
       SKN 2780SW; BRU *+2; CIO PORT; LDA =203B; CIO PORT
       BRS 86                  (ENTER 7 LEVEL OUTPUT)
*      BRS 178                 (WAIT ACKNOWLEGEMENT OF ABORT)

ABORT1 NOP RET4                (NOP SO WE CAN FALL THRU FROM ABORT)
       LDX PORT
       BRS 178
       IF TEST1
       LDA =377B
       BRS 172                 (SEND YELLOW BALL)
       ENDF
       CLA; STA EXTRN
       LDX PORT; LDA TCWD; BRS 160
       BRR RET4

       IF TEST1
BLDCH  NOP RET3
       LDA =2; BRS 173; ERR NOCHAN; CXA; SKG =10B; ERR NOCHAN
       STX CI; EAX 1,2; STX CO
       LDP STGP; LDX CO; BRS 35
SYNC   CIO CI; SKE =1; BRU SYNC
       CIO CI; SKE =2; BRU SYNC
       CIO CI; SKE =3; BRU SYNC
       CIO CI; SKE =4; BRU SYNC
       LDX CO; STX PORT
       BRR RET3
CI     ZRO
CO     ZRO
NOCHAN ASC '$CANNOT BUILD CHANNEL$/'
STGP   DATA 3*STG-1,3*STG-1+9
STG    DATA " GO"+332B5
       ASC " TE"
       DATA "ST "+155B
       ENDF

*********************************************************
*
*      PRINT REQUEST HEADER
*
********************************************

$PRJHD NOP RET2
       CLA; STA PAGEC          (NO PAGES PRINTED YET)
       LDA =PRJHDE             (EXIT POINT FOR GCB)
       SPB LINIT
       SKN SEP                 (LONG SEPARATOR)
       BRU PRJHD1              (NO)
       LDA     =TOFCH
       SPB WCB; SPB WCB
*      PRINT BATCH REQUEST NO. IN LARGE NUMERALS
       LDA     RQNO
       SBRM PBNO
*      PRINT CURRENT DATE
       LDX     P:DAT
       SPB WS
       LDA     DATE
       ETR     =36B3            MONTH MASK
       LRSH    10
       ADD     ONE
       LRSH    23
       DIV     TEN
       ADD     K20
       SPB WCB
       CBA
       ADD     K20
       SPB WCB
       LDA     K17
       SPB WCB
       LDA     DATE            
       ETR     =1740B          DATE MASK
       LRSH    5
       ADD     ONE
       LRSH    23
       DIV     TEN
       ADD     K20
       SPB WCB
       CBA
       ADD     K20
       SPB WCB
       LDA     K17
       SPB WCB
       LDA     DATE
       ETR     =77740000B
       LRSH    14
       ADD     K74
       LRSH    23
       DIV     TEN
       ADD     K20
       SPB WCB
       CBA
       ADD     K20
       SPB WCB
*      PRINT 'REQUESTED BY' NAME
       LDX     P:RQB
       SPB WS
       SPTR    BUSN
       ADD     K14
       XAB
       STP WK
       SPB WSWK                (COPY STRING FROM WK PTRS)
       LDX     P:FI
       SPB WS
*      PRINT NO. OF FILES THIS REQUEST
       LDA     FILES
       SBRM ISCD
*      PRINT DISTRICT NO.
       LDX     P:DIST
       SPB WS
       LDA     DDIST
       SBRM ISCD
PRJHD1 LDA     =TOFCH
       SPB WCB
       CLX;*                   INITIAL STATE
       BRU NXCHR
*      GCB RETURNS HERE.
PRJTLE EQU *
PRJHDE LDX =F                  STATE =TOF
       LDA LINES
       STA LCTR
       LDA =-1
       STA CC
       STA BC
       ADM LCTR                INTENTIONALLY DO NOT SET OFFSET HERE.
       SKN 2780SW
       BRU PRJHD2
       SKN DPSW
       BRU PRJHD3
       SPB FFCDC               FLUSH LAST PRINT LINE
       BRR RET2
PRJHD2 SPB FF2780
       BRR RET2
PRJHD3 SPB FFDP
       BRR RET2

*******************************************
*
*      PRINT REQUEST TRAILER
*
**********************************************

$PRJTL NOP RET2
       LDA =PRJTLE             (EXIT POINT FOR GCB)
       SPB LINIT               (INITIALIZE LINE BUFFER POINTERS, ETC)
       LDA TOTCCT
       ADD WCC
       ADD ONE
       STA BILCCT              (BILLABLE CHARACTER COUNT)
       SKN SEP                 (LONG SEPARATOR)
       BRU PRJTL1              (NO)
       LDA     RQNO
       SBRM PBNO
       LDX     P:END
       SPB WS
       LDA WSPT
       SUB =LINBUF
       ADD TOTCCT
       ADD WCC
       ADD ONE
       STA BILCCT              (BILLABLE CHARACTER COUNT)
       SBRM ISCD
PRJTL1 LDA     =TOFCH
       SPB WCB
       CLX
       BRU NXCHR

PBNO   NOP RET3                PRINT LARGE NUMERAL
       LRSH    23
       DIV     TEN
       STB     N5
       LRSH    23
       DIV     TEN
       STB     N4
       LRSH    23
       DIV     TEN
       STB     N3
       LRSH    23
       DIV     TEN
       STB     N2
       STA     N1
       LDA     =11
       STA     C1
       CLA
       STA     LCCT
PRJH3  EQU *
       RPT (X=1,5)
       LDA N.&($X)
       SBRM PRBNUM
       ENDR
       LDA     =CRCH
       SPB WCB
       MIN     LCCT
       SKR     C1
       BRU     PRJH3
       BRR RET3

PRBNUM NOP RET4
       STA     N
       ADD     K20
       XMA     N
       MUL     K14
       LSH     23
       ADD     LCCT
       CAX
       LDA     BIGTAB,2
       LSH     12
       STA     LX
       LDA     =12+4B7
       STA     COUNT1
PRBNU1 SKR     COUNT1
       BRU     PRBNU2
       LDB     LX
       CLA
       LSH     1
       STB     LX
       SKA     ONE
       LDA     N
       SPB WCB
       BRU     PRBNU1
PRBNU2 CLA
       SPB WCB
       CLA
       SPB WCB
       BRR RET4

       END
NETPRINT ** FICHE/FRAME BREAK *****
SDVR SYMSORT

SYM.  PG.LN. IDENT.

27S    10  1 DVR     27S0   10 31 DVR     27S1   11  6 DVR     27S10  10 30 DVR     
27S11  10 38 DVR     27S12  11 13 DVR     27S13  10 37 DVR     27S14  11 23 DVR     
27S15  10 36 DVR     27S16  11 39 DVR     27S17  10 35 DVR     27S2   11 14 DVR     
27S3   11 18 DVR     27S4   11 24 DVR     27S5   11 31 DVR     27S6   12  1 DVR     
27S7   12  6 DVR     ABORT  24 39 DVR     ABORT1 25 13 DVR     
ACK     8 30 DVR     ASCA    2  1 DVR     ASCBL   2  5 DVR     ASCCR   2  4 DVR     
ASCESC  1 39 DVR     ASCLF   2  2 DVR     ASCP    1 11 DVR     ASCS    2  6 DVR     
ASCT    2  7 DVR     ASCTAB  6  3 DVR     ASCTOF  2  3 DVR     B       5 34 DVR     
BC2780 20  4 DVR     BC27A  20 14 DVR     BC27B  20 19 DVR     BC27C  20  5 DVR     
BCCDC  20  3 DVR     BCDP   20  2 DVR     BEL     8 31 DVR     BFE     4  1 DVR     
BL      6 39 DVR     BLDCH  25 25 DVR     BNFIL  22  5 DVR     BNFIL  22  3 DVR     
BS      8 32 DVR     BUFFER  1 34 DVR     C       5 33 DVR     CAN     9  6 DVR     
CC2780 17 21 DVR     CC27A  17 31 DVR     CC27B  18 14 DVR     CC27C  18 19 DVR     
CC27D  17 23 DVR     CC27E  17 28 DVR     CC27F  18 21 DVR     CCCDC1 18 39 DVR     
CCCDC2 19 11 DVR     CCCDC3 19 14 DVR     CCDP1  19 33 DVR     CDCDVR 10  9 DVR     
CDCS   10 10 DVR     CDCS0  12 16 DVR     CDCS1  12 30 DVR     CDCS10 12 15 DVR     
CDCS11 12 23 DVR     CDCS12 12 37 DVR     CDCS13 12 22 DVR     CDCS14 13  8 DVR     
CDCS15 12 21 DVR     CDCS16 13 24 DVR     CDCS17 12 20 DVR     CDCS2  12 38 DVR     
CDCS3  13  3 DVR     CDCS4  13  9 DVR     CDCS5  13 16 DVR     CDCS6  13 25 DVR     
CDCS7  13 30 DVR     CI     25 35 DVR     CO     25 36 DVR     CR      7  8 DVR     
CRCH    1 38 DVR     DC      9 25 DVR     DC1     8 38 DVR     DC2     8 39 DVR     
DC3     9  1 DVR     DC4     9  2 DVR     DCD     9 36 DVR     DEBUG   1  7 DVR     
DLE     8 37 DVR     DPDVR  10 18 DVR     DPS    10 19 DVR     DPS0   14  1 DVR     
DPS1   14 15 DVR     DPS10  13 39 DVR     DPS11  14  8 DVR     DPS12  14 22 DVR     
DPS13  14  7 DVR     DPS14  14 32 DVR     DPS15  14  6 DVR     DPS16  15  9 DVR     
DPS17  14  5 DVR     DPS2   14 23 DVR     DPS3   14 27 DVR     DPS4   14 33 DVR     
DPS5   15  1 DVR     DPS6   15 10 DVR     DPS7   15 15 DVR     EM      9  7 DVR     
ENQ     8 29 DVR     EOF     4 24 DVR     EOF1    4 32 DVR     EOF2    5  6 DVR     
EOF3    5 12 DVR     EOF4    5 17 DVR     EOF5    5 22 DVR     EOF6    5 24 DVR     
EOFWD   1 36 DVR     EOT     8 28 DVR     ERR     1 20 DVR     ERROR   1 26 DVR     
ESC     9  9 DVR     ETB     9  5 DVR     EXTOFF 24 28 DVR     EXTON  23 33 DVR     
F       5 35 DVR     FF2780 15 22 DVR     FF27A  15 25 DVR     FFCDC1 16 26 DVR     
FFDP1  17 11 DVR     FS      9 10 DVR     GBRN   20 34 DVR     GBRN1  21 26 DVR     
GBRN1A 21 34 DVR     GBRN2  21 36 DVR     GBRN3  21  9 DVR     GCB    23  5 DVR     
GCB1   23 10 DVR     GCF    23 13 DVR     GCF1   23 15 DVR     GS      9 11 DVR     
GWORD  23 18 DVR     HT      8 33 DVR     IBMDVR  9 39 DVR     ISCD   22 33 DVR     
LC      9 19 DVR     LF      7  9 DVR     LINIT  22  8 DVR     LM$FFC 16  9 DVR     
LM$FFD 16 35 DVR     LMCCCD 18 23 DVR     LMCCDP 19 19 DVR     MB      6 31 DVR     
NAK     9  3 DVR     NISC    1 23 DVR     NOCHAN 25 37 DVR     NUM     9 31 DVR     
NXCHR   5 38 DVR     NXCHR0  5 37 DVR     NXCHR1  5 39 DVR     OM**** 28 22 DVR     
OM**** 26  4 DVR     OM**** 23 28 DVR     OM**** 20 28 DVR     OM**** 19 39 DVR     
OM**** 17 19 DVR     OM**** 15 20 DVR     OM**** 13 35 DVR     OM**** 12 11 DVR     
OM**** 10 26 DVR     OM****  5 26 DVR     PBNO   29 12 DVR     PRBNU1 30 16 DVR     
PRBNU2 30 26 DVR     PRBNUM 30  3 DVR     PRINT   3 25 DVR     PRJH3  29 30 DVR     
PRJHD  26  8 DVR     PRJHD1 27 38 DVR     PRJHD2 28 18 DVR     PRJHD3 28 20 DVR     
PRJHDE 28  5 DVR     PRJTL  28 26 DVR     PRJTL1 29  7 DVR     PRJTLE 28  4 DVR     
PUNCT1  9 27 DVR     PUNCT2  9 28 DVR     PUNCT3  9 29 DVR     PUNCT4  9 30 DVR     
RET     1 19 DVR     RF     23 23 DVR     RS      9 12 DVR     S       5 32 DVR     
SETA   24 26 DVR     SI      8 36 DVR     SO      8 35 DVR     SOH     8 27 DVR     
SPB     1 21 DVR     SPTR    1 22 DVR     STG    25 39 DVR     STGP   25 38 DVR     
STPR1   2 25 DVR     STPR2   2 26 DVR     STPR3   3 11 DVR     STPR4   3  4 DVR     
STPR5   3 18 DVR     STPRIN  2 10 DVR     SUB     9  8 DVR     SYN     9  4 DVR     
SYNC   25 29 DVR     TEST1   1  6 DVR     TOF     7 31 DVR     TOF1    7 36 DVR     
TOF2    8 12 DVR     TOF3    8  6 DVR     TOFCH   1 37 DVR     UPC     9 26 DVR     
US      9 13 DVR     VT      8 34 DVR     WCB    22 20 DVR     WS     22 23 DVR     
WS1    22 25 DVR     WSWK   22 29 DVR     WSWK1  22 30 DVR     X       1 12 DVR     

NETPRINT ** FICHE/FRAME BREAK *****
SPACC
ACC    IDENT   ACCOUNTING      NOV 29,1976

SLAVE  EQU     -1              1=PJ SLAVE, -1=ACCOUNTING PACKAGE
DEBUG  EQU     -1              1=USE SPOOL DIR, -1 FOR *4ACCT

ASCP   MACRO   D
X      NCHR   D(1)
       DATA    [*+2]*3-1,**3+X
       ASC     D(1)
       ENDM

SKNE   OPD     536B5
SPTR   OPD     514B5

       IF      SLAVE
L240   BRU     START
       ENDF

       IF      SLAVE
       
CKBUSY EXT
ERROR  POPD    105B5
       BRU     ERROR
RET    OPD     51B5,2
DISABL POPD    176B5
       BRR     0
NNNN   POPD    110B5
       BRR     0
ENABLE POPD    177B5
       BRR     0
       ELSE
ERROR  OPD     105B5
RET    OPD     514B4,2
       ENDF
REMJOB EQU     4B4

       IF      SLAVE
START  LDX     =-1
       LDA     =42B6+400B
       BRS     12
       CLA
       LDX     =-4
       ADD     =1
       CIO     =1
       BRX     *-2
ST     CLA
       STA     T
       LDX     =-4
ST1    MIN     T
       CIO     =0
       SKE     T
       BRU     ST
       BRX     ST1
*                              END OF HANDSHAKE
CMD    CIO     =0
       SKG     =CMDTE-CMDT
       CAX
       SKG     =CMDTE-CMDT
       BRU*    CMDT,2
       BRU     CMD
ERROR  LDA     =11B
       CIO     =1
       BRS     17
       BRU     CMD
P      BRM     RWD
       STA     RQSN
       BRM     RWD
       STA     DC
       SBRM    GREC
       LDA     BRNO
       SKE     RQSN
       BRU     ERROR
       LDA     JBSTA
       SKA     =4B7
       BRU     P1
       BRM   P::ACC
       SBRM    CMPJB
P1     LDA     =10B
       CIO     =1
       BRU     CMD
Q      BRS     17
       LDA     =12B
       CIO     =1
       BRS     10

RWD    ZRO
       CIO     =0
       CLB
       LSH     16
       STA     T
       CIO     =0
       LSH     8
       ADM     T
       CIO     =0
       MRG     T
       BRR     RWD

       ELSE
ERROR  ERROR   BF
P::ACC EXT
       ENDF


SETRGN ZRO
       LDA     DIST
       CLB
       SKG     =79
       SKG     =69
       BRU     *+4
       LDB     =1
       SKNE    =77
       LDB     =3
       SKG     =189
       SKG     =179
       BRU     *+2
       LDB     =2
       SKG     =199
       SKG     =189
       BRU     *+2
       LDB     =4
       STB     REGION
       BRR     SETRGN



P::ACC NOP     RT7
       LDA     DIST
       BRM     SETRGN          SET THE REGION
       LDA     BRNO
       STA     :JOBNO
       LDA     GAN
       STA     :GAN
       BRM     FCUST           GET CUSTOMER,DISTRICT NUMBERS
       STA     :DC
       LDP     BUSN
       STP     :USN
       LDP     BUSN+2
       STP     :USN+2
       LDP     PJC
       STP     :PJC
       LDP     PJC+2
       STP     :PJC+2
       LDA     =1
       LDB     JBSTA
       SKB     =REMJOB
       LDA     =9
       STA     :JBTYP
       LDP     F1
       LDA     PAGES
       STA     :VOL
       LDX     =300B
      LDA      =-1
       BRS     176
       BRM     DATCV           CONVERT DATE TO PROPER FORMAT
       LDP     USN
       STP     :RB
       LDP     USN+2
       STP     :RB+2
       LDA     PARTS
       CLB
       SKA     =2B7
       BRM     DECCHG          CHARGE HIM FOR DECOLATION
       LSH     12
       STA     :PDC
       LDA     DATE
       CLB
       LDX     =3000100B
       BRS     176
       STA     :DE             DATE ENTERED
       LDA     =1
       STA     :CMPF           FLAG FOR COMPLETION PROGRAM
       LDA     JBSTA
       SKA     =1B5
       BRU     FINAL           NO POSTAGE
       SKA     =REMJOB
       BRM     POSTOT
TEMP   CLA
       STA     BADFCT
       LDA     JBSTA
       SKA     =REMJOB
       BRU     *+3
       LDP     F1
       BRU     *+2
       LDP     F1R             REMOTE
       MRG     =506B5
       LDX     =2
       BRS     65
       BRU     TEMP1           COULD NOT OPEN FIRST FILE
TEMP2  STA     AF
       RSP     AF
       MRG     =4B7            MAKE IT WRITE AT END
       SCP     AF
       BRU     ERROR           ACCOUNTING FILE BAD
       LDA     =30
       LDX     =:JOBNO
       BIO     AF
       BRU     ERROR
       LDA     AF
       BRS     20
       RET     P::ACC
TEMP1  BRM     CKBUSY
       MIN     BADFCT          BAD FILE COUNT
       LDA     JBSTA
       SKA     =REMJOB
       BRU     *+3
       LDP     F2
       BRU     *+2
       LDP     F2R
       MRG     =506B5
       LDX     =2
       BRS     65
       BRU     *+2
       BRU     TEMP2
       BRM     CKBUSY
       MIN     BADFCT
       CLA
       XMA     BADFCT
       SKNE    =2
       BRU     TEMP3
       BRS     45              WAIT A SEC(OR THREE)
       BRU     TEMP
TEMP3  BRU     ERROR           ACCOUNTING FILE BAD

FINAL  BRM     POSTOT          POST TOTALS
       LDA     =2
       XMA     :CMPF           TOTALS ARE CORRECT
       SKG     =1
       BRU     *+2
       BRU     TEMP            IF .GT. 1 THEN MUST GO TO TEMP FILE
FINAL0 LDP     F3
       BRS     48
       BRU     FINAL1
       LDP     F3
       MRG     =506B5
       LDX     =2
       BRS     65
       BRU     FINAL1
       STA     AF
       RSP     AF
       MRG     =4B7
       SCP     AF
       BRU     FINAL2          CANNOT SET CURSOR POSITION
       LDA     =28
       LDX     =:JOBNO
       BIO     AF
       BRU     FINAL2          OR WRITE RECORD
       LDA     AF
       BRS     20
       RET     P::ACC
FINAL1 BRM     CKBUSY
       BRU     TEMP
       BRU     FINAL0
FINAL2 BRU     TEMP

*      GET CUSTOMER NUMBER AND DISTRICT

FCUST  ZRO
       LDP     AIDPT
       BRS     64
       BRU     FCUST5
       STA     AIDFNI
       LDP     AXPT
       BRS     64
       BRU     FCUST4
       STA     AXFNI
       RSP     AXFNI
       STA     CPTOP
FCUST1 RCP     AXFNI
       SKNE    CPTOP
       BRU     FCUST3
       WIO     AXFNI
       SKE     :GAN
       BRU     FCUST2
       WIO     AXFNI
       SUB     =1
       MUL     =3
       LSH     23
       SCP     AIDFNI
       BRU     FCUST5
       LDA     =40
       LDX     =ACTREC
       BIO     AIDFNI
       NOP
       LDA     AIDFNI
       BRS     20
       LDA     AXFNI
       BRS     20
       LDA     ACID
       BRR     FCUST
FCUST2 WIO     AXFNI
       BRU     FCUST1
FCUST3 LDA     AXFNI
       BRS     20
FCUST4 LDA     AIDFNI
       BRS     20
FCUST5 LDA     =-1
       BRR     FCUST

POSTOT ZRO     0               POST TOTALS
       LDP     ARATEF
       BRS     64
       BRU     PST1
       STA     AF
       LDA     =250
       LDX     =ABUFF
       BIO     AF
       BRU     PST2            SEND RECORD AS TYPE 3 TO TEMP
       LDA     AF
       BRS     20
       LDX     REGION
       LDA     OFFSET,2
       LDB     JBSTA
       SKB     =REMJOB
       ADD     =23
       ADD     PARTS
       CAX
       LDA     ABUFF,2
PST3B  MUL     PAGES
       DIV     =100           GET AS PENNEYS
       STA     :TOT
       LDA     :PDC
       ETR     =7777B
       MUL     =100
       LSH     23
       ADM     :TOT
       LDX     REGION
       LDX     OFFSET,2
       LDA     JBSTA
       SKA     =REMJOB
       BRU     PST3
       LDA     MINCH,2
       LRSH    23
       DIV     =100
       SKG     :TOT
PST4   LDA     :TOT
       CLB
       BRS     51
       FDV     :100
       STP     :TOT
       BRR     POSTOT
PST1   BRM     CKBUSY
       BRU     PST2A
       BRU     POSTOT+1        TRY AGAIN
PST2   LDA     AF
       BRS     20              CLOSE IT
PST2A  LDA     =3
       STA     :CMPF
       BRU     TEMP
PST3   LDA     CHARK
       MUL     ABUFF+14,2
       DIV     =100
       ADM     :TOT
       BRU     PST4
PST3A  CAX
       LDA     PARTS
       ETR     =7777B
       MUL     ABUFF+13,2
       LSH     23
       BRU     PST3B

*      COMPUTE DECOLATION CHARGE

DECCHG ZRO
       LDP     ARATEF
       BRS     64
       BRU     DC1
       STA     AF
       LDA     =250
       LDX     =ABUFF
       BIO     AF
       BRU     DC2
       LDX     REGION
       LDX     OFFSET,2
       LDA     DCHG,2
       LRSH    23
       DIV     =10000
       LRSH    12
       LDA     PARTS
       BRR     DECCHG
DC1    BRM     CKBUSY
       BRU     DC2A
       BRU     DECCHG+1
DC2    LDA     AF
       BRS     20
DC2A   LDA     =3
       STA     :CMPF
       LDA     PARTS
       CLB
       BRR     DECCHG

*      CHECK FI FILE IS BUSY

CKBUSY ZRO
       CXA
       SKE     =1
       SKNE    =30
       MIN     CKBUSY
       SKE     =34
       SKNE    =84
       MIN     CKBUSY
       BRR     CKBUSY

*      CONVERT DATE TO MM-DD-YY(200B)

DATCV  ZRO
       SPTR    :DAC
       STP     TP
       LDX     =300B
       LDA     =-1
       BRS     176
       LRSH    14
       STA     YR
       CLA
       LSH     4
       STA     MN
       CLA
       LSH     5
       STA     DA
       LDA     MN
       ADD     =1
       LRSH    23
       DIV     =10
       ADD     =20B
       WCI     TP
       CBA
       ADD     =20B
       WCI     TP
       LDA     =15B
       WCI     TP
       LDA     DA
       ADD     =1
       LRSH    23
       DIV     =10
       ADD     =20B
       WCI     TP
       CBA
       ADD     =20B
       WCI     TP
       LDA     =15B
       WCI     TP
       LDA     YR
       ADD     =60
       LRSH    23
       DIV     =10
       ADD     =20B
       WCI     TP
       CBA
       ADD     =20B
       WCI     TP
       LDA     =200B
       WCI     TP
       BRR     DATCV

:JOBNO ZRO     0               JOB NUMBER
:GAN   ZRO     0               GAN
:DC    ZRO     0               DISTRICT/CUSTOMER NUMBER
:USN   BSS     4               USER NAME
       DATA    4B7             TO END THE STRING
:PJC   BSS     4               PROJECT CODE
       DATA    4B7             END OF STRING
:JBTYP ZRO     0               JOB TYPE
:VOL   ZRO     0               VOLUME (NUMBER OF PAGES)
:DAC   BSS     3               DATE JOB COMPLETED
:RB    BSS     4               REQUESTED BY STRING
       DATA    4B7             END FO STRING
:PDC   ZRO     0               PARTS AND DECOLATION CHARGE
       BSS     2               POSTAGE CHARGE
:TOT   BSS     2               TOTAL CHARGE
***************************    THIS IS THE END OF AN ACCOUNTING RECORD
***************************    THE REST IS FOR TEMP RECORDS
:DE    ZRO     0               DATE REQUEST ENTERED (CUBS)
:CMPF  ZRO     0               ACTG COMPLETED FLAG
*                              -1=COMPLETED
*                              0=REGULAR RECORD
*                              1=SPOOL RECORD
*                              2=COMPLETED BUT NOT ABLE TO ENTER RECORD
*                              3=UNABLE TO ESTABLISH RATES
******************             END OF TEMP FILE RECORD

AF     ZRO     0               ACCOUTNIG FILE THAT IS OPEN
AIDFNI ZRO     0               USED BY FCUST
AXFNI  ZRO     0               USED BY FCUST
CPTOP  ZRO     0               USED BY FCUST
DA     ZRO     0               DAY USED BY DATCV
BADFCT ZRO     0               BAD FILE COUNT USED BY TEMP
TP     BSS     2               TEMP POINTER

       IF DEBUG
F1     ASCP    '(CCARTER)BATCHREC'
F1R    ASCP    '(CCARTER)REMOTEREC'
F2     ASCP    '(CCARTER)BATCHRECA'
F2R    ASCP    '(CCARTER)REMOTERECA'
F3     ASCP    '(CCARTER)/BMTD/'
ARATEF ASCP    '(CCARTER)BATCHDAT'
       ELSE
F1     ASCP    '(*4ACCT)BATCHREC'
F1R    ASCP    '(SPOOL)REMOTEREC'
F2     ASCP    '(*4ACCT)BATCHRECA'
F2R    ASCP    '(SPOOL)REMOTERECA'
F3     ASCP    '(*4ACCT)/BMTD/'
ARATEF ASCP    '(*4ACCT)BATCHDAT'
       ENDF
AXPT   ASCP    '(*4ACCT)/CAX/'
AIDPT  ASCP    '(*4ACCT)/CAI&D/'

:100   DATA    6553600,7
OFFSET DATA    0,50,100,150,200

ABUFF  BSS     250
MINCH  EQU     ABUFF
DCHG   EQU     MINCH+5
ACTREC EQU     ABUFF
ACID   EQU     ACTREC+4

*      WRITE CONTROL INFORMATION (FIXED LENGTH)


       IF      SLAVE
CMDT   ZRO
       BRU     P
CMDTE  BRU     Q
       ENDF

T      ZRO
DC     ZRO
       IF      SLAVE
IFILE  ZRO
OFILE  ZRO
YR     ZRO
MN     ZRO
       ENDF
       IF      SLAVE
$BF    BSS     0
$GTDATE BSS    0               THESE TWO ARE NEEDED BECAUSE WE LINK TO FILCTL
       ENDF
       NOLIST  EXT
       END
NETPRINT ** FICHE/FRAME BREAK *****
SPACC SYMSORT

SYM.  PG.LN. IDENT.

:100   13 38 ACC     :CMPF  13  4 ACC     :DAC   12 34 ACC     :DC    12 27 ACC     
:DE    13  3 ACC     :GAN   12 26 ACC     :JBTYP 12 32 ACC     :JOBNO 12 25 ACC     
:PDC   12 37 ACC     :PJC   12 30 ACC     :RB    12 35 ACC     :TOT   12 39 ACC     
:USN   12 28 ACC     :VOL   12 33 ACC     ABUFF  14  2 ACC     
ACID   14  6 ACC     ACTREC 14  5 ACC     AF     13 12 ACC     AIDFNI 13 13 ACC     
AIDPT  13 36 ACC     ARATEF 13 33 ACC     ARATEF 13 26 ACC     ASCP    1  6 ACC     
AXFNI  13 14 ACC     AXPT   13 35 ACC     BADFCT 13 17 ACC     BF     14 26 ACC     
CKBUSY 11  3 ACC     CKBUSY  1 21 ACC     CMD     2 16 ACC     CMDT   14 12 ACC     
CMDTE  14 14 ACC     CPTOP  13 15 ACC     DA     13 16 ACC     DATCV  11 15 ACC     
DC     14 18 ACC     DC1    10 29 ACC     DC2    10 32 ACC     DC2A   10 34 ACC     
DCHG   14  4 ACC     DEBUG   1  4 ACC     DECCHG 10 12 ACC     DISABL  1 25 ACC     
ENABLE  1 29 ACC     ERROR   3 21 ACC     ERROR   2 22 ACC     ERROR   1 32 ACC     
ERROR   1 22 ACC     F1     13 28 ACC     F1     13 21 ACC     F1R    13 29 ACC     
F1R    13 22 ACC     F2     13 30 ACC     F2     13 23 ACC     F2R    13 31 ACC     
F2R    13 24 ACC     F3     13 32 ACC     F3     13 25 ACC     FCUST   7 23 ACC     
FCUST1  7 34 ACC     FCUST2  8 17 ACC     FCUST3  8 19 ACC     FCUST4  8 21 ACC     
FCUST5  8 23 ACC     FINAL   6 29 ACC     FINAL0  6 35 ACC     FINAL1  7 16 ACC     
FINAL2  7 19 ACC     GTDATE 14 27 ACC     IFILE  14 20 ACC     L240    1 16 ACC     
MINCH  14  3 ACC     MN     14 23 ACC     NNNN    1 27 ACC     OFFSET 13 39 ACC     
OFILE  14 21 ACC     P       2 26 ACC     P1      2 39 ACC     P::ACC  4  9 ACC     
P::ACC  3 22 ACC     POSTOT  8 26 ACC     PST1    9 29 ACC     PST2    9 32 ACC     
PST2A   9 34 ACC     PST3    9 37 ACC     PST3A  10  3 ACC     PST3B   9  6 ACC     
PST4    9 23 ACC     Q       3  3 ACC     REMJOB  1 35 ACC     RET     1 33 ACC     
RET     1 24 ACC     RWD     3  8 ACC     SETRGN  3 26 ACC     SKNE    1 12 ACC     
SLAVE   1  3 ACC     SPTR    1 13 ACC     ST      2  7 ACC     ST1     2 10 ACC     
START   1 38 ACC     T      14 17 ACC     TEMP    5 21 ACC     TEMP1   6  6 ACC     
TEMP2   5 33 ACC     TEMP3   6 27 ACC     TP     13 18 ACC     X       1  7 ACC     
YR     14 22 ACC     
NETPRINT ** FICHE/FRAME BREAK *****
TPTSUBS
TPTSUB IDENT 6/10/76
       NOLIST EXT,STAT

SPTR   OPD 514B5,2
SPB    OPD 102B5,2

TYPE   POPD 100B5,2
       STP POPA; STX POPX
       EAX* 0; CXA; ETR =37777B
       LDB =-1; LDX TOUT; BRS 34
XPOP   LDP POPA
ABPOP  LDX POPX
       BRR 0

ERR    POPD 101B5,2
$ERRPOP LDA 0; STA ERR1
       SPB CLEAN
       TYPE* ERR1
       BRU CD
ERR1   ZRO
FND    ZRO
FND1   ZRO
MATT   ZRO
TBL    ZRO
ETBL   ZRO
$TGTP  BSS 2   (TARGET PAIR)
TGT    BSS 2   (WORKING PAIR)
LISTP  BSS 2   (LIST ENTRY PAIR)

$MATCH ZRO;* SEARCH TABLE FOR STRING AND SUBSTRING MATCHES
*      FOR STRING WHOSE POINTERS ARE IN TGTP.  TYPICAL CALL
*      FOLLOWS:
*        LDA =ADDR1            (TABLE START)
*        LDB =ADDR2            (TABLE END)
*        BRM MATCH
*      (NONSKIP RETURN--NO MATCH)
*      (SKIP RETURN--NO UNIQUE MATCH FOUND)
*      (DOUBLE SKIP RETURN--MATCH FOUND)
*      ON EXIT, 'X' WILL CONTAIN ADDRESS OF LAST WORD IN MATCHING
*      TABLE ENTRY.
*
*      TABLE CONSISTS OF VARIABLE LENGTH ENTRIES WITH THE SIGN
*      BIT ON IN THE LAST WORD OF EACH ENTRY.  EACH ENTRY BEGINS
*      WITH STRING DATA TO BE MATCHED, TAKING AS MANY WORDS AS
*      REQUIRED.  THE STRING IS FOLLOWED BY A BLANK TERMINATING
*      CHARACTER OR A BYTE WITH THE 200 BIT ON.
*
       STA TBL; CBA; SUB =1; STA ETBL
       LDX TBL; BRM MAT; BRR MATCH     (NOT FOUND)
       MIN MATCH
       STX FND; EAX 1,2; CXA; SKG ETBL; BRU MATCH2
MATCH1 LDX FND; MIN MATCH; BRR MATCH
MATCH2 BRM MAT; BRU MATCH1     (UNIQUE)
       TYPE MATERR             (CANNOT DISTINGUISH AMONG:)
       LDX TBL
MATCH3 BRM MAT; BRR MATCH; STX FND
       LDX FND1; SPTR 0,2; ADD =100; XAB; STP TGT
MATCH4 GCI TGT; NOP; SKE =0; SKA =200B; BRU MATCH5
       CIO TOUT; BRU MATCH4
MATCH5 LDA =155B; CIO TOUT
       LDX FND; EAX 1,2; CXA; SKG ETBL; BRU MATCH3
       BRR MATCH

MATERR ASC '$CANNOT DISTIGUISH AMONG:$/'
MAT    ZRO
MAT1   SPTR 0,2; ADD =100; XAB; STP LISTP; LDP TGTP; STP TGT
MAT2   GCI TGT; BRU MAT5       (MATCH WHEN TARGET EXHAUSTED)
       STA MATT
       GCI LISTP; NOP; SKE =0; SKA =200B; BRU MAT3
       SKE MATT; BRU MAT3; BRU MAT2
* NO MATCH
MAT3   SKN 0,2; BRU MAT4
       EAX 1,2; CXA; SKG ETBL; BRU MAT1; BRR MAT
MAT4   EAX 1,2; BRU MAT3
* MATCH
MAT5   STX FND1
MAT6   SKN 0,2; BRU MAT7; MIN MAT; BRR MAT
MAT7   EAX 1,2; BRU MAT6

       END
NETPRINT ** FICHE/FRAME BREAK *****
TPTSUBS SYMSORT

SYM.  PG.LN. IDENT.

ABPOP   1 12 TPTSUB  ERR     1 15 TPTSUB  ERR1    1 20 TPTSUB  
ERRPOP  1 16 TPTSUB  ETBL    1 25 TPTSUB  FND     1 21 TPTSUB  FND1    1 22 TPTSUB  
LISTP   1 28 TPTSUB  MAT     2 26 TPTSUB  MAT1    2 27 TPTSUB  MAT2    2 28 TPTSUB  
MAT3    2 33 TPTSUB  MAT4    2 35 TPTSUB  MAT5    2 37 TPTSUB  MAT6    2 38 TPTSUB  
MAT7    2 39 TPTSUB  MATCH   1 30 TPTSUB  MATCH1  2 13 TPTSUB  MATCH2  2 14 TPTSUB  
MATCH3  2 17 TPTSUB  MATCH4  2 19 TPTSUB  MATCH5  2 21 TPTSUB  MATERR  2 25 TPTSUB  
MATT    1 23 TPTSUB  SPB     1  5 TPTSUB  SPTR    1  4 TPTSUB  TBL     1 24 TPTSUB  
TGT     1 27 TPTSUB  TGTP    1 26 TPTSUB  TYPE    1  7 TPTSUB  XPOP    1 11 TPTSUB  

NETPRINT ** FICHE/FRAME BREAK *****
MAKENETPRINT
NARP
SDISP
BDISP


CON
SBTONETPRINT
BTO


CON
TPTSUBS
BTPT


CON
SDVR
BDVR


CON
KONST
BK


CON
(CCARTER)SPACC
BACC


RES
XDD
0;TBDISP
;TBTO
;TBTPT
;F<LINBUF>
10000;TBDVR
;TBK
;TBACC
;U
%QSAV 3 TO 17777 ON NETPRINT

240
"
FILES AND CHECKSUMS:
"
CHECKSUM
.
SDISP-COMMAND-PARSER
SDVR-PRINTER-DRIVER
TPTSUBS-MISCELLANEOUS-SUBROUTINES
SBTONETPRINT-OUTPUT-DRIVER
(CCARTER)SPACC-ACCOUNTING-ROUTINES
KONST-CONSTANTS-AND-MESSAGES
NETPRINTDOC-INFORMATION-FILE
MAKENETPRINT-COMMANDS-FILE
NETPRINT-GO-FILE
.
COM T
NETPRINT ** FICHE/FRAME BREAK *****
INTRODUCTION
------------

NETPRINT IS A PROGRAM FOR PROVIDING 
CONOMICAL HIGH-SP

D PRINTING
AND PUNCHING TO A SUPPORT
D HSA D
VIC
 FROM TH
 940.  IT DIFF
RS FROM
SPOOL IN THAT 1) NETPRINT IS OP
RAT
D BY TH
 US
R ON HIS OWN 
QUIPM
NT
AND SPOOL IS OP
RAT
D BY TYMSHAR
 P
RSONN
L ON TYMSHAR
 
QUIPM
NT;  2)
NETPRINT CHARG
S ONLY FOR N
TWORK US
 (A SMALL CHARG
 P
R KILOCHAR)
WHIL
 SPOOL PROVID
S FOR PAP
R AND POSTAL CHARG
S AS W
LL; AND 3) NETPRINT
PROVID
S NON
 OF TH
 F
ATUR
S OF A SPOOLING SYST
M.


RUNNING NETPRINT
----------------

NETPRINT IS CALL
D FROM TH
 940 LIBRARY BY TYPING "NETPRINT" AT TH

EX
CUTIV
 PROMPT.  NETPRINT PRINTS "OPTIONS:" AS ITS PROMPT:

               -NETPRINT(CR)

               NETPRINT VERSION 1.0

               OPTIONS:

NOT
:  WH
N INPUT IS FROM CARDS ON A SUPPORT
D HSA D
VIC
,
A MULTIPUNCH
D & 5 8 9 COLUMN MAY B
 US
D FOR CARRIAG
 R
TURN
IN ORD
R TO PLAC
 MULTIPL
 INPUT LIN
S ON ON
 CARD.


NETPRINT OPTIONS
-----------------

TH
 FOLLOWING OPTIONS AR
 IMPL
M
NT
D IN NETPRINT.  EACH MAY B

ABBR
VIAT
D AS A UNIQU
 L
FT SUBS
T OF TH
 OPTION:

       MIXED - P
RMITS UPP
R AND LOW
R CAS
.  D
FAULT FOR CDC PRINT
RS
               ON CUSTOM
R SIT
.
       UPPER - CONV
RTS LOW
R TO UPP
R CAS
.  D
FAULT FOR 2780 AND DP
               PRINT
RS ON CUSTOM
R SIT
.
       CONTROLS - PASS ASCII CONTROL CHARACT
RS FROM FIL
 TO R
MOT

               D
VIC
.  D
FAULT IS TO PASS NO CONTROLS.
       NOSEP - PRINT NO S
PARATOR PAG
.
       LONGSEP - PRINTS FULL S
PARATOR PAG
S.  D
FAULT UNL
SS "NOSEP"
               IS SP
CIFI
D.
       DUMMY - PRINTS S
PARATOR PAG
S ONLY FOR US
 IN ADJUSTING FORMS.
       DP - R
MOT
 PRINT
R IS DATA PRODUCTS TYP
.
       CDC - R
MOT
 PRINT
R IS CDC TYP
.
       2780 - R
MOT
 PRINT
R IS 2780 TYP
.  D
FAULT WH
N LOGGING IN ON
               A N
TWORK HSA PORT.
       PUNCH - A PUNCH S
L
CTION S
QU
NC
 (ESC 4) PR
C
D
S DATA LIN
S.
               TH
 FIL
 TO B
 PUNCH
D SHOULD CONTAIN NO GR
AT
R THAN 80
               COLUMN R
CORDS AND SHOULD NOT CONTAIN FORMS CONTROL
               OTH
R THAN CARRIAG
 R
TURN.
       WIDTH <N> - S
TS MAXIMUM WIDTH OF PRINT OR PUNCH LIN
 TO N COLUMNS.
               UNL
SS SP
CIFI
D WIDTH IS 132 FOR PRINTING AND 80 FOR
               PUNCHING.  LIN
S LONG
R THAN SP
CIFI
D BY TH
 WIDTH OPTION
               WILL B
 TRUNCAT
D.
       BUF <N> - S
TS TH
 MAXIMUM NUMB
R OF PRINT LIN
S P
R 2780
               BUFF
R.  N MUST B
 SP
CIFI
D B
TW

N 1 AND 7.  D
FAULT IS
               7 FOR MAXIMUM TRANSMISSION RAT
S.
       LINES <NN> - S
TS TH
 MAXIMUM NUMB
R OF LIN
S WHICH CAN B

               PRINT
D P
R PAG
 B
FOR
 FORCING FORMF

D.  D
FAULT IS
               INFINITY FOR PRINT FIL
S WITH INT
RNAL FORMS
               CONTROL.
       SKIP <NN> - NUMB
R OF PAG
S TO SKIP (INCLUD
S S
PARATOR PAG
S)
               B
FOR
 PRINTING STARTS.  US
 WH
N R
STARTING A PRINT FIL
.
                < LARGE >
       FORMSIZE < BIG   > - SP
CIFI
S SIZ
 OF FORMS IN LIN
S.
                < SMALL >
                <  NN   >

               ASSUM
S 66 LIN
S FOR LARGE OR BIG FORMS, 51 LIN
S FOR
               SMALL FORMS.  A NUMB
R OF LIN
S NN MAY B
 SP
CIFI
D.  WH
N
               THIS OPTION IS US
D TH
 PROGRAM MAK
S TWO ADDITIONAL
               ASSUMPTIONS:  (1) TOP OF FORM IS LIN
 1 OF TH
 FORM; AND
               (2) TH
 LISTING IS TO B
 C
NT
R
D IN TH
 MIDDL
 OF
               TH
 PAG
, BY DOWNSPACING 1/2(FORMSIZE-LINES) FROM
               TOP OF FORM.


ENTERING FILENAMES
------------------

       ONC
 ALL OPTIONS HAV
 B

N 
NT
R
D, NETPRINT TH
N PROMPTS
WITH "FILES:".  APPROXIMAT
LY 30 FIL
NAM
S MAY B
 
NT
R
D AT THIS
POINT, S
PARAT
D BY CARRIAG
 R
TURN (& 5 8 9 MULTIPUNCH
D COLUMNS WILL
SUFFIC
 ON HSA D
CK).  A P
RIOD "." IMM
DIAT
LY FOLLOW
D BY A CARRIAG

R
TURN 
NDS TH
 LIST OF FIL
S.

       EACH FIL
NAM
 MAY B
 FOLLOW
D BY AN OPTIONAL NUMB
R OF
COPI
S.  A POUNDSIGN "#" S
PARAT
S TH
 FIL
NAM
 FROM AN INT
G
R
SP
CIFYING TH
 NO. OF COPI
S.

EXAMPLE
-------

               -NETPRINT(CR)
               
               NETPRINT VERSION 1.00

               OPTIONS:
               2780 LINES 60(CR)
               
               FILES:
               FILEA(CR)
               FILEB(CR)
               FILEC#2(CR)             (TWO COPI
S TO B
 MAD
 OF THIS FIL
)
               FILED(CR)
               .(CR)
KQ?p