3WSD ** FICHE/FRAME BREAK *****
SS3WSD
3WSD   IDENT  6/15/77  EXEC 93 AND UP ONLY WITH MDSI

*      THIS PROGRAM PLACES MDSI SUBSYSTEMS ON THE RAD.
*      IT DOES THIS BY BUILDING INDIRECT LINKAGES
*      TO SMT OR EXTENDED SMT TABLES WITH BRS 3.  IT THEN DOES
*      A BRS 44 TO PUT THE INDIRECT PMT BYTE NO. INTO THE
*      USER'S RELABELING.  FINALLY IT BIO'S A PAGE OFF A USER
*      FILE INTO THE PMT.   WHEN THE PAGE IS KILLED IT GETS
*      WRITTEN TO THE RAD.
*
*      THE DATA FILES AND SMT/XSMT BYTES ARE GIVEN BY A CONTROL
*      FILE IN MDSI'S FILE SPACE.  THE FORMAT OF THIS FILE IS
*      DESCRIBED BELOW:
*
*      THE FILE IS MADE UP OF RECORDS.  THERE ARE FOUR RECORD TYPES
*      WITH ONE WORD OF HEADER FOLLOWED BY 0 TO 255 WORDS OF DATA.
*      THE FORMAT OF THE HEADER WORD IS:
*              BITS 0-2        RECORD TYPE (1,2,3,4)
*              BITS 3-14       RECORD NUMBER (1,2,3,...)
*              BITS 15-23      RECORD LENGTH (INCLUDING HEADER)
*
*      RECORDS MUST BE IN SEQUENCE BY RECORD NUMBER STARTING WITH 1.
*
*      RECORD TYPE 1 - SERIAL NO.
*              WORD 0 - HEADER.  TYPE=1,RECORD=1,LENGTH=2
*              WORD 1 - SERIAL NO.  CHANGED WHEN FILE FORMAT CHANGES.
*                              CURRENTLY SERIAL = 41B
*      RECORD TYPE 2 - DATA FILE NAME
*              WORD 0 - HEADER.  TYPE=2,LENGTH=3-27
*              WORD 1 - LENGTH OF FILENAME IN 8 BIT CHARACTERS
*              WORDS 2-26 - FILENAME (INCLUDING USER NAME IN PARENTHESES)
*                              OF DATA FILE WHICH CONTAINS RAD PAGES.
*      RECORD TYPE 3 - PAGE TABLE INFO.  (2 WORDS PER PAGE)
*              WORD 0 - HEADER.  TYPE=3,LENGTH= 1+ 2*(NO. OF PAGES)
*              WORDS 1,3,5,... PAGE DESCRIPTOR WORD FORMATTED:
*                              BIT  0 MAKE PAGE AVAIL TO USERS WITHOUT
*                              SUBSYSTEM STATUS.
*                              BITS 1-3 SPARE
*                              BITS 4-11 SMT OR EXTENDED SMT PAGE NO.
*                              BITS 12-23 PAGE NO. IN DATA FILE  (EACH
*                              FILE PAGE = 2048 WORDS).
*              WORDS 2,4,6,...PAGE CHECKSUM COMPUTED AS FOLLOWS:
*                              LDA =2047: STA COUNT
*                              LDX =PAGEST (STARTING ADDRESS IN PAGE)
*                              CLAB
*                              LCY 7: ADD 0,2: STB CKSUM: ADD CKSUM
*                              CLB: EAX 1,2: SKR COUNT: BRU *-7
*                              STA CHECKSUM
*                              (THIS CHECKSUM IS THE SAME AS WOULD BE
*                              (PRODUCED BY THE LIBRARY PROGRAM -CHECKSUM)
*                              (A DIAGNOSTIC WILL BE ISSUED IF THE PAGE
*                              (CHECKSUM DOES NOT MATCH THE EXPECTED
*                              (CHECKSUM, BUT THE PAGE WILL BE WRITTEN
*                              (TO THE RAD IN ANY CASE).
*
*      A TYPE 3 RECORD MAY BE FOLLOWED BY A TYPE 2 RECORD TO CLOSE
*      THE CURRENT DATA FILE AND TO OPEN A NEW DATA FILE.

*      RECORD TYPE 4 - END OF FILE
*              WORD 0 - HEADER.  TYPE=4,RECORD=LAST IN FILE,LENGTH=1.
*
*      THIS PROGRAM MAY BE RUN IN TWO WAYS:  BY TYPING THE NAME OF THE
*      GO FILE FOLLOWED BY A CARRIAGE RETURN, TO WRITE THE RAD, AND
*      BY TYPING THE NAME OF THE GO FILE FOLLOWED BY A CARRIAGE RETURN
*      AND IMMEDIATELY BY A LINEFEED, WHICH DOES NOT WRITE THE RAD BUT
*      GOES THROUGH THE MOTIONS OF THE PROGRAM.  FOR EACH PAGE DESCRIPTOR
*      THE PROGRAM WILL PRINT THE SMT PAGE NO., THE DISC ADDRESS
*      OF THE FILE PAGE (IN WORDS), AND THE CHECKSUM EXPECTED FOR THE
*      PAGE.  IN ADDITION, ALL ERROR MESSAGES WILL PRINT.
*


SPTR   OPD 514B5,2
MSG    OPD 100B5,2
ERR    OPD 101B5,2

       BRU START; BRS 10
       ASC 'A 1.03'
       ASC "C'KY'R"

START  LDP TV100; STP 100B
       LDA =I201; STA 201B
       LDA =I204; STA 204B
       LDA =9; STA TRY1
       CLA; STA RECNO; STA ERRSW; STA LFSW
       LDX KM1; BRS 13; BRU CKLF (LOOK FOR LINEFEED IN INPUT BUFFER)
FKST   BRS 43; CLB; STP FKTBL+4
       LDA =BEGIN; STA FKTBL
       MSG MVERS
       LDA =734B5+FKTBL; BRS 9
       BRS 147 (CLOSE ANY OPEN FILES)
       LDA FKTBL+6 (FORK STATUS)
       SKG =0; BRU FIN
       SNE =1; MSG IGG (I>>)
       SNE =2; MSG MGG (M>>)
       BRS 181 (RESET COMMANDS FILES)
       LDA FKTBL; BRM OCTNO; BRU FIN2
CKLF   LDA =152B; CIT =0; BRU FKST
       SKR LFSW; BRU *-1; BRU FKST
FIN    SKN LFSW; SKN ERRSW; BRS 10
       MSG NOTIFY (CALL MDSI)
FIN2   MSG ALTM; TCO =147B; BRU *-1
*      PROGRAM STARTS HERE

BEGIN  LDA =2B6+2B5; BRS 78


*      OPEN THE CONTROL FILE AND VERIFY ITS SERIAL NO.

OPEN1  LDP CTRLP; BRS 64; BRU RTRY1; STA CTRLF
       LDA =104B; LDB =GAN; LDX =1; BRS 67 (GET GAN OF CONTROL FILE)
       BRM RREC (READ FIRST RECORD)
       BRU *+4; ERR BADFMT; ERR BADFMT; ERR BADFMT
       SKE SERIAL; ERR BADSER
       LDB =2B6 (NOP); SKG ="  A"; STB CKFL (IGNORE CHECKSUM)

* EXPECT A FILENAME OF A DATA FILE.

       BRM RREC; ERR BADFMT; BRU *+3; ERR BADFMT; BRU EOF
NEW4   SKG =75; BRU NEW1
       MSG BADNAM
       BRM CTRLE
SKPREC BRM RREC; ERR BADFMT; ERR BADFMT; BRU *+2; ERR BADFMT
SKPFIL SKR ERRSW; BRU *-1
       BRM RREC; ERR BADFMT; BRU NEW4; BRU SKPFIL; BRU EOF
NEW1   SPTR BUFF+1; ADD BUFF; XAB; STP FNPTR; STP WK1
       SPTR SAVBUF; STP WK2
       GCI WK1; BRU OPEN2; WCI WK2; BRU *-3 (SAVE FILE NAME)
       LDA =9; STA TRY2
OPEN2  LDP FNPTR; BRS 64; BRU RTRY2; STA DATFIL
       LDA =104B; LDB =T; LDX =1; BRS 67 (CHECK ITS GAN)
       LDA T; SNE GAN; BRU NEW2
       LDA DATFIL; BRS 20
       MSG ILLFIL
       BRM PFILE (PRINT FILE NAME FROM SAVBUF)
       BRU SKPREC

* EXPECT PAGE TABLE RECORD

NEW2   SKN LFSW; BRU NEW2A; MSG DF; BRM PFILE
NEW2A  BRM RREC; ERR BADFMT; ERR BADFMT; BRU *+2; ERR BADFMT
       MIN I204SW (SWITCH TO DATA FILE)
NEW3   LDA WC; RSH 1; SKB =4B7; ERR RECFMT
       SUB =1; STA WC (NO. OF PAGES -1)
       LDA =BUFF; STA T

* GET A BYTE

GETB   LDA* T; COPY AB,A; STA CKSUM
       MIN T (POINT AT CHECKWORD)
       LSH 4; STA SPARE (SPARE BITS)
       CLA; LSH 8; STA BYTE
       AXC; LSH 23; STA ADDR
       LDA =BYTTBL-BYTEE
       XXA
       SKE BYTEE,2 (IS IT A LEGAL BYTE)
       BRX *-1
       SKE BYTEE,2
       BRU BADBYTE
       LDA ADDR; MUL =3; LSH 23
       SCP DATFIL; BRU CPER
       SKN LFSW; BRU GETB1; TCO =155B; BRM PBYTE; TCO =0
       LDA* T; BRM OCTNO; BRU GETB2
GETB1  LDA BYTE; BRS 3 (BUILD READ-WRITE LINKAGE TO PAGE)
       LDB FKTBL+4; XAB; BRS 44 (AND PLACE IN RELABELING)
GETB2  LDX =34000B; LDA =4000B; BIO DATFIL
       BRU I204B

*      MAKE PAGE AVAIL. TO USERS WITHOUT SUBSYSTEM STATUS

       SKN LFSW; BRU GETB3; LDA SPARE; SKA =10B; MSG SH; BRU GETB4
GETB3  LDA BYTE; LDB SPARE; SKB =10B; SKG =77B; BRU GETB4
       BRS 57

* CHECKSUM PAGE

GETB4  LDA =3777B; STA TT
       LDX =34000B
       CLAB
SUMPAG LCY 7; ADD 0,2; STB CKSUM; ADD CKSUM; CLB; EAX 1,2
       SKR TT; BRU SUMPAG; STA CKSUM
       LDA* T; SKE CKSUM
CKFL   BRU BADCHK (CHECKSUM MISCOMPARE)

NEXTB  LDA =34000B; BRS 4 (RELEASE PAGE, IT GOES OUT TO RAD)
       MIN T; SKR WC; BRU GETB
       BRM RREC; ERR BADFMT; BRU *+3; BRU NEW3; BRU EOF
       LDA DATFIL; BRS 20
       LDA BUFF; BRU NEW4
EOF    MSG EOJ; BRS 10

*      POPS

MSG1   STP POPA; STX POPX; BRM MESS; LDX POPX; LDP POPA; BRR 0

ERR1   BRM MESS; SKR ERRSW; BRU *-1; BRM CTRLE; BRS 10

*      SUBROUTINES


RREC ZRO;* READ A RECORD FROM THE CONTROL FILE
       LDA KM1; STA I204SW (SWITCH FOR 204 INT ROUTINE)
       WIO CTRLF; STA HEAD
       COPY AB,A; LSH 3; SUB =1
       SKG =3; SKA =4B7; ERR ILLTYP; ADM RREC
       AXC; LSH 12; XMA RECNO; ADD =1; SKE RECNO; ERR ILLRNO
       CLA; LSH 9; SKG TAB2,2; SKG TAB1,2; ERR ILLEN
       SUB =1; STA WC (WORD COUNT REMAINING)
       SKG =0; BRU RREC1; LDX =BUFF
       BIO CTRLF
       BRU I204B
RREC1  LDA BUFF; BRR RREC

MESS   ZRO;* PRINT ASCII MESSAGE
       EAX* 0; CXA; ETR =37777B; LDB KM1; LDX =1; BRS 34
       BRR MESS

OCTNO  ZRO;* PRINT OCTAL NUMBER FROM 'A'
       LDB =8; LDX =1; BRS 36
       BRR OCTNO

CTRLE  ZRO;* PRINT RECORD HEADER FROM CONTROL FILE
       MSG ATREC; LDA HEAD; BRM OCTNO; MSG WR; BRM CFILE
       BRR CTRLE

CFILE  ZRO;* PRINT NAME OF CONTROL FILE
       LDP CTRLP; LDX =1; BRS 35
       BRR CFILE

PFILE  ZRO;* PRINT NAME OF DATA FILE
       LDP WK2; LDX =1; BRS 35
       BRR PFILE

PBYTE  ZRO;* PRINT BYTE NO. AND DISC WORD ADDR.
       LDA BYTE; BRM OCTNO; TCO =0; LDA ADDR; BRM OCTNO
       BRR PBYTE
*      SOFTWARE INTERRUPTS

I201   ZRO TT;* ESCAPE HANDLER
       LDX KM1; BRS 29; BRS 11; MSG ABORT; BRS 10

I204   ZRO TT;* EOF OR READ ERROR ON FILE
       LDA =2B6+2B5; BRS 78 (REARM)
I204B  LDA CTRLF; SKN I204SW; LDA DATFIL
       SKA =4B5 (READ ERROR); MSG BAD
       SKA =2B5 (EOF); MSG UEOF
       SKP I204SW; ERR DET (FATAL ERROR DETECTED READING CONTROL FILE)
I204A  MSG ACP (AT BYTE..)
       BRM PBYTE
       MSG WR (WHILE READING..)
       BRM PFILE
       SKR ERRSW; BRU *-1
       BRU NEXTB (TRY NEXT BYTE)

*      ERROR ROUTINES

RTRY1  EQU *;* TROUBLE WITH CONTROL FILE
       CXA; ETR =7777B; SKE =1; BRU RTRY1B
       BRS 45 (FILE BUSY, WAIT 3 SECONDS)
       SKR TRY1; BRU OPEN1
       BRM CFILE
RTRY1A MSG BUSY
       BRS 10 (TELL THEM TO RETRY IT)
RTRY1B SKR ERRSW; BRU *-1
       SKE =12B; BRU *+3; MSG MISSNG (FILE MISSING); BRU RTRY1C
       MSG WAZZAT (WHO KNOWS?)
RTRY1C BRM CFILE; BRS 10

RTRY2  EQU *;* TROUBLE WITH DATA FILE
       CXA; ETR =7777B; SKE =1; BRU RTRY2B
       BRS 45 (FILE BUSY, WAIT 3 SECONDS)
       SKR TRY2; BRU OPEN2
       BRM PFILE
       BRU RTRY1A (LET THEM TRY AGAIN)
RTRY2B SKE =12B; BRU *+3; MSG MISSNG; BRU RTRY2C
       MSG WAZZAT
RTRY2C BRM PFILE; BRU SKPFIL

CPER   EQU *;* CURSOR POSITIONING ERROR ON DATA FILE
       MSG SCPF; BRU I204A

BADCHK EQU *;* PAGE CHECKSUM DIDN'T MATCH CONTROL FILE.
       MSG CHK1; BRM OCTNO (CHECKSUM EXPECTED)
       MSG CHK2; LDA CKSUM; BRM OCTNO (CHECKSUM FOUND)
       BRU I204A (SIMPLY GO TO NEXT PAGE IN DATA FILE)

BADBYTE EQU *;* SMT/XSMT BYTE ILLEGAL
       MSG NP; BRU I204A (GO TO NEXT BYTE)

*      DATA

TAB2   DATA 2,27,256,1 (UPPER LIMIT ON RECORD LENGTHS)
CTRLP  DATA CTRL*3-1,CTRL*3-1+18
CTRL   ASC '(U118NCS)/MAPFILE/'
TAB1   DATA 1,2,2,0 (LOWER LIMIT - 1)
       OCT
BYTTBL DATA 41,42,100 (TABLE OF ALLOWED BYTES)
       RPT (X=112,125); DATA X; ENDR
       DATA 130,131
       RPT (X=135,170); DATA X; ENDR
       RPT (X=175,200); DATA X; ENDR
       DATA 215
BYTEE  EQU *
       DEC
KM1     DATA -1 (DO NOT MOVE FROM END OF BYTTBL)
SERIAL ASC '  A'  (CHANGE WHEN FILE FORMAT CHANGES)
TV100  BRU MSG1; BRU ERR1

*      VARIABLE STORAGE

GAN    BSS 1   (GAN OF THE CONTROL FILE)
CTRLF  BSS 1   (FILE NO. OF CONTROL FILE)
DATFIL BSS 1   (FILE NO. OF DATA FILE)
FNPTR  BSS 2   (STRING PTRS FOR DATA FILENAME)
WK1    BSS 2   (  "     "  - WORKING PAIR)
WK2    BSS 2   (  "     "      "      "    )
HEAD   BSS 1   (HEADER WORD OF CONTROL FILE RECORD)
RECNO  DATA 0  (CURRENT RECORD NO.)
WC     BSS 1   (RECORD LENGTH -1 FOR HEADER)
LFSW   DATA 0  (SET NEGATIVE ON CR/LF ENTRY)
ERRSW  DATA 0  (SET NEGATIVE TO PRINT WARNING MESSAGE)
I204SW DATA 0  (-1 IF READING FROM CONTROL FILE, POS. FROM DATA FILE)
SPARE  BSS 1   (SPARE BITS FROM BYTE SUBRECORD)
BYTE   BSS 1   (BYTE NO. FROM BYTE SUBRECORD)
ADDR   BSS 1   (WORD POS. OF DATA PAGE)
CKSUM  DATA 0  (CHECKSUM OF DATA PAGE)
TRY1   DATA 9  (RETRY CTR FOR CONTROL FILE)
TRY2   DATA 9  (RETRY CTR FOR DATA FILES)
POPA   BSS 2   (STORAGE FOR POPS)
POPX   BSS 1   (  "      "   "  )
T      BSS 1   (TEMP.)
TT     BSS 1   (TEMP.)
FKTBL  BSS 7   (PANIC TABLE FOR FORK)
SAVBUF BSS 26  (SAVE BUFFER FOR DATA FILENAME)
BUFF   BSS 256 (BUFFER FOR READING CONTROL FILE RECORDS)

*      MESSAGES

IGG    ASC 'I>> /'
MGG    ASC 'M>> /'
NOTIFY ASC '$SERIOUS PROBLEMS NOT DUE TO PROGRAM ERROR--PLEASE'
       ASC '$NOTIFY M.D.S.I. AT 313-761-7750 IMMEDIATELY./'
ALTM   ASC '$TYPE ALTMODE TO STOP BELLS./'
DF     ASC '$DATA FILE:  /'
MVERS  ASC '$3WSD VER. A 1.03$/'
ATREC  ASC ' AT RECORD /'
WR     ASC ' WHILE READING /'
BADFMT ASC '$BAD FORMAT/'
BADSER ASC '$BAD SERIAL NO./'
RECFMT ASC '$ODD WORD COUNT/'
ILLTYP ASC '$ILL. RECORD TYPE/'
ILLRNO ASC '$ILL. RECORD NO./'
ILLEN  ASC '$ILL. RECORD LENGTH/'
ILLFIL ASC '$DATA FILE IN WRONG GAN: /'
BADNAM ASC '$EXCESSIVE CHAR. COUNT/'
BUSY   ASC ' BUSY OVER 30 SECONDS.  PLEASE RERUN 3WSD$/'
MISSNG ASC '$FILE MISSING: /'
WAZZAT ASC '$FILE TROUBLE, CANNOT OPEN: /'
EOJ    ASC '$EOJ/'
DET    ASC ' DETECTED/'
UEOF   ASC '$UNEXPECTED EOF/'
BAD    ASC '$DATA READ FAIL/'
ABORT  ASC '$ABORTED/'
SH     ASC ' SH/'
ACP    ASC ' AT BYTE /'
SCPF   ASC '$SCP FAIL/'
CHK1   ASC '$CHECKSUM EXPECTED: /'
CHK2   ASC '$CHECKSUM FOUND: /'
NP     ASC '$BYTE NOT PERMITTED: /'
       END
3WSD ** FICHE/FRAME BREAK *****
SS3WSD SYMSORT

SYM.  PG.LN. IDENT.

ABORT  10 12 3WSD    ACP    10 14 3WSD    ADDR    9 13 3WSD    
ALTM    9 31 3WSD    ATREC   9 34 3WSD    BAD    10 11 3WSD    BADBYT  8 14 3WSD    
BADCHK  8  9 3WSD    BADFMT  9 36 3WSD    BADNAM 10  4 3WSD    BADSER  9 37 3WSD    
BEGIN   3 27 3WSD    BUFF    9 23 3WSD    BUSY   10  5 3WSD    BYTE    9 12 3WSD    
BYTEE   8 30 3WSD    BYTTBL  8 24 3WSD    CFILE   6 31 3WSD    CHK1   10 16 3WSD    
CHK2   10 17 3WSD    CKFL    5 27 3WSD    CKLF    3 20 3WSD    CKSUM   9 14 3WSD    
CPER    8  6 3WSD    CTRL    8 21 3WSD    CTRLE   6 27 3WSD    CTRLF   8 39 3WSD    
CTRLP   8 20 3WSD    DATFIL  9  1 3WSD    DET    10  9 3WSD    DF      9 32 3WSD    
EOF     5 34 3WSD    EOJ    10  8 3WSD    ERR     2 36 3WSD    ERR1    6  1 3WSD    
ERRSW   9  9 3WSD    FIN     3 22 3WSD    FIN2    3 24 3WSD    FKST    3  9 3WSD    
FKTBL   9 21 3WSD    FNPTR   9  2 3WSD    GAN     8 38 3WSD    GETB    4 32 3WSD    
GETB1   5  8 3WSD    GETB2   5 10 3WSD    GETB3   5 16 3WSD    GETB4   5 21 3WSD    
HEAD    9  5 3WSD    I201    7  5 3WSD    I204    7  8 3WSD    I204A   7 14 3WSD    
I204B   7 10 3WSD    I204SW  9 10 3WSD    IGG     9 27 3WSD    ILLEN  10  2 3WSD    
ILLFIL 10  3 3WSD    ILLRNO 10  1 3WSD    ILLTYP  9 39 3WSD    KM1     8 32 3WSD    
LFSW    9  8 3WSD    MESS    6 19 3WSD    MGG     9 28 3WSD    MISSNG 10  6 3WSD    
MSG     2 35 3WSD    MSG1    5 38 3WSD    MVERS   9 33 3WSD    NEW1    4  9 3WSD    
NEW2    4 23 3WSD    NEW2A   4 24 3WSD    NEW3    4 26 3WSD    NEW4    4  3 3WSD    
NEXTB   5 29 3WSD    NOTIFY  9 29 3WSD    NP     10 18 3WSD    OCTNO   6 23 3WSD    
OPEN1   3 32 3WSD    OPEN2   4 13 3WSD    PBYTE   6 39 3WSD    PFILE   6 35 3WSD    
POPA    9 17 3WSD    POPX    9 18 3WSD    RECFMT  9 38 3WSD    RECNO   9  6 3WSD    
RREC    6  6 3WSD    RREC1   6 17 3WSD    RTRY1   7 23 3WSD    RTRY1A  7 28 3WSD    
RTRY1B  7 30 3WSD    RTRY1C  7 33 3WSD    RTRY2   7 35 3WSD    RTRY2B  8  2 3WSD    
RTRY2C  8  4 3WSD    SAVBUF  9 22 3WSD    SCPF   10 15 3WSD    SERIAL  8 33 3WSD    
SH     10 13 3WSD    SKPFIL  4  7 3WSD    SKPREC  4  6 3WSD    SPARE   9 11 3WSD    
SPTR    2 34 3WSD    START   3  3 3WSD    SUMPAG  5 24 3WSD    T       9 19 3WSD    
TAB1    8 22 3WSD    TAB2    8 19 3WSD    TRY1    9 15 3WSD    TRY2    9 16 3WSD    
TT      9 20 3WSD    TV100   8 34 3WSD    UEOF   10 10 3WSD    WAZZAT 10  7 3WSD    
WC      9  7 3WSD    WK1     9  3 3WSD    WK2     9  4 3WSD    WR      9 35 3WSD    

3WSD ** FICHE/FRAME BREAK *****
MAKE3WSD
NARP
SS3WSD
BWSD



RES
XDD
;TBWSD
%QSAV 240 TO 2205 ON 3WSD

240
DEL BWSD
"
FILES AND CHECKSUMS:
"
CHECKSUM
.
SS3WSD-SOURCE
3WSD-GO-FILE
MAKE3WSD-COMMANDS-FILE
.
COM T
  