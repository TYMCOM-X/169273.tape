XCAL ** FICHE/FRAME BREAK *****
1SCAL
1SCAL  IDENT

       NOLIST  EXT,STAT


*      ENTRY POINTS

       BRU     START
       BRU     CONTIN

$VERS  ASC     'A01.00$/'

* VERSION DEPENDENT CONSTANTS
ONE    DATA    2B7,1
ONE1   EQU     ONE+1
PI     DATA    31103755B,24203002B
ZERO   DATA    0,0
PRTFLG DATA    -1,0

*      JOSS SYNTAX POPS
*      CALL REGOCNIZER AND SKIP IF TRUE
LRST   LDX     0
       CXA
       ETR     =37777B
       MRG     =100000B
RST4   STA     POPT1
       STX     RST2
       CXB
       EAX*    RST2
       CXA
       ETR     =37777B
       XMA     RA
       CAB
       LDA     POPT1
       STK     RPL
RST3   LDA     0,2
       SKNE    =-1
       BRU     RST1
       LDA*    0,2
       STK     RPL
       EAX     1,2
       BRU     RST3
RST1   BRU     1,2
LRSF   LDX     0
       CXA
       ETR     =37777B
       MRG     =200000B
       BRU     RST4
*      CALL RECOGNIZER AND EXIT ACCORDING TO RESULT
LRX    LDX     0
       CXA
       ETR     =37777B
       MRG     =300000B
       BRU     RST4
*      TRUE    RETURN
T      CLA
T7     STA     TFFLG
       LDX     RA
T2     LDA     0,2
       SKNE    =-1
       BRU     T4
       EAX     1,2
       BRU     T2
T4     CXA
       ETR     =37777B
       SKNE    RA
       BRU     T3
       EAX     -1,2
       UNSTK   RPL
       SBRM    RERR
       STA*    0,2
       BRU     T4
T3     UNSTK   RPL
       SBRM    RERR
       STB     RA
       STA     T5            FIRST RETURN ADDRESS IN T5
       LRSH    15
       CAX
       BRU     *,2
       BRU     TST
       BRU     TSF
       SKN     TFFLG
       BRU     T
       BRU     F
TST    SKN     TFFLG
       MIN     T5
       BRU     T6
TSF    SKN     TFFLG
       BRU     T6
       MIN     T5
T6     LDX     T5
       BRU     1,2
*      FALSE RETURN
F      LDA     =-1
       BRU     T7
*      COMPARE AND SKIP IF TRUE
LCST   LDA*    0
       SKNE    CO
       MIN     0
       BRR     0
*      COMPARE AND SKIP IF FALSE
LCSF   LDA*    0
       SKE     CO
       MIN     0
       BRR     0

NVAR   DATA    ENVAR
NVAR1  DATA    2*ENVAR-1
NVAR2  DATA    2*ENVAR-2
NVAR3  DATA    -2*ENVAR


*      JOSS REGOCNIZERS)) GENERAL

STAT   DATA    -1
       RBF     SB,(CERR,9)
       COMPL   XIT
       RSF     MOD
       BRU     *-1
       CBF     IEOS,(CERR,17)
       BRU     T

*      STATEMENT BODY = TYPE STATEMENT / SET STATEMENT / DELETE STATEMENT / GO
*      STATEMENT/ DO STATEMENT / RAAD STATEMENT / WRITE STATEMEND /
*      DEMAND STATEMENT
SB     DATA    -1
       CLA
       STA     SSFLG
       STA     TRAFLG
       LDA     CO
       SKG     COMBK1
       SKG     COMBK
       BRU     SETST
       SUB     COMBK
       CAX
       ROP     BRU,(*,2),TYPES,SETST3,FORMS,DEMS,DOS,TOS,PAUSES
       ROP     BRU,PROCS,DELS,LOADS,DUMPS,STEPST,PAGES,LINES
       ROP     BRU,CANCLS,DONES,MODS,DEFS,RETS,EDITS,OPENS,INPTS
       ROP     BRU,OUTPTS,CLOSES,READS,WRITES,MODFYS,QUITS,CLEARS,T
       ROP     BRU,VERSIO,RUNS

*      RETURN AFTER IMMEDIATE EXECUTION IN COMPILER
SB1    CLL     RPL
       BRU     SEQ

SBEXIT SBRM    GNE
       BRU     T

*      MODIFIER = IF MODIFIER / UNLESS MODIFIER / FOR MODIFIER
MOD    DATA    -1
       CBF     ICOMMA,MOD1
       SBRM    GNE
MOD1   RBT     WHRMOD,T
       RBT     IFMOD,T
       RBT     UNLMOD,T
       RBT     FORMOD,T
       BRU     F
*      IF MODIFIER = 'IF' EXPRESSION
IFMOD  DATA    CL,-1
       CBF     IIF,F
       M1      CL,FORLPL
       M1      BPL,CL
       RBF     EXPR,(CERR,1)
       LDA     =EXIT0
IFMOD1 STA     BINOP1
       LDA     CL
       LDB     FORLPL
       SBRM    COUNT
       SUB     =1
       CLB
       LSH     6
       ADD     BINOP1
       MRG     ZOPR1
       IACD    CL
       M1      FORLPL,CL
       BRU     T
*      UNLESS MODIFIER = 'UNLESS' EXPRESSION
UNLMOD DATA    CL,-1
       CST     IUNLS
       BRU     F
       M1      CL,FORLPL
       M1      BPL,CL
       RBF     EXPR,(CERR,1)
       LDA     =EXIT1
       BRU     IFMOD1
*      FOR MODIFIERS:  TYPE 1 = 'FOR' PRIM '=' OR '_' EXPR ('BY'
*      (EXPR) 'TO' OR 'WHILE' EXPR
*      TYPE 2 = 'WHERE' PRIM '=' OR '_' EXPR &
*      PRIM '=' OR '_' EXPR ...
*      TYPE 3= 'UNTIL' OR 'WHILE' EXPR
FORMOD DATA    -1
       CBT     IFOR,FORMD1
       CBT     IWHILE,FORMD1
       CBF     IUNTIL,F
FORMD1 SKN     TRAFLG
       BRU     FORMD4
       CERR    41
FORMD4 LDX     CL
       LDA     ZFORLP
       CLB
       STP     1,2
       COMPL   XIT
       M1      CL,FORLPL
       M1      BPL,CL
       M1      =0,FF
       CBF     IFOR,FORMD2
       RBF     FORCL,(CERR,9)
       BRU     FORMD3
FORMD2 RBF     WHILMD,(CERR,9)
FORMD3 LDA     FORBL
       LDB     FORLPL
       STB     CL
       SBRM    COUNT
       MIN     FORBL
       ADM*    FORBL
       BRU     T

WHRMOD DATA    CL,-1
       CBF     IWHERE,F
       M1      BPL,CL
WHR1   RBF     PRIM,(CERR,35)
       CBT     IEQ,WHR3
       CBF     ILARR,(CERR,35)
WHR3   RBF     EXPR,(CERR,35)
       COMPL   S,PA
       CBF     IAMPER,T
       BRU     WHR1
WHRMDA DATA    CL,-1
       CBF     IWHERE,F
       M1      WHR2,CL
       BRU     WHR1


WHILMD DATA    UNORWH,-1
       CBF     IWHILE,UNTLMD
       LDA     =EXIT1
       BRU     WHL1
UNTLMD CBF     IUNTIL,F
       LDA     =EXIT0
WHL1   STA     UNORWH
       LDA     FF
       CLB
       LSH     6
       MRG     =XBFOR
       MRG     ZOPR0
       IACD    CL
       RBF     EXPR,(CERR,36)
       LDA     =1
       CLB
       LSH     6
       MRG     UNORWH
       MRG     ZOPR1
       IACD    CL
       COMPL   ENDFOR,=0
       M1      CL,FORBL
       BRU     T



*      FOR CLAUSE.  SEE ABOVE.
FORCL  DATA    FORS1,FORS2,FORS3,FORS4,FORS5,-1
       M1      =0,FORS5
       M1      FF,FORS2
       M1      CL,FORS4
       LDA     FF
       CLB
       LSH     6
       MRG     =XBFOR
       MRG     ZOPR0
       IACD    CL
       LDA     FORS2
       SKG     =0
       BRU     *+2
       IACD    CL
       M1      CL,FORS1
       STA     FORS4
       RBF     PRIM,(CERR,5)
       M1      PA,FORS3
       LDA     CL
       BE      FORS1,FORC1A
       LDA     FORS1
       LDB     CL
       SBRM    COUNT
       ADD     =1
       CLB
       LSH     6
       MRG     COND13
       IACD    FORS1
       COMPL   OPR0,=XSR
       BRU     FORC1
FORC1A M1      =-1,FORS1
*      SAVE CONTROLLED VARIABLE OF FOR FUNCTION
FORC1  LDA     FORS2
       SKG     =0
       BRU     FORC1B
       LDA     ZL
       MRG     FORS3
       MRG     =20000000B
       SKN     FORS1
       LDA     ZSTK
       LDX     FORS4
       STA     1,2
FORC1B CBT     IEQ,FORC2
       CBF     ILARR,(CERR,5)
       BRU     FORC2
FORC19 M1      =-1,FEEFLG
FORC2  RBF     EXPR,(CERR,5)
       CBT     IBY,FORC3
       CBT     ITO,FORC4
       CBT     IWHILE,FORC4
       CBF     IUNTIL,FORC5
*      BY MISSING
FORC4  COMPL   OPR0,=XBFORL
       COMPL   LN,=ONE
       BRU     FORC6
*      BY PRESENT
FORC3  COMPL   OPR0,=XBFORL
       RBF     EXPR,(CERR,5)
*      READY FOR FORA
FORC6  SBRM    FORCSC
       COMPL   FORA,FORS3
       CBF     ITO,FORC7
       COMPL   STK,=STACK
       M1      =0,FORS4
       BRU     FORC8
FORC7  CBF     IWHILE,FORC9
       M1      =40000B,FORS4
FORC8  RBF     EXPR,(CERR,5)
       BRU     FORC10
FORC9  CBF     IUNTIL,(CERR,5)
       RBF     EXPR,(CERR,5)
       COMPL   OPR1,=NOT
       M1      =40000B,FORS4
FORC10 COMPL   FORB,FORS4
       BRU     FORC11
*      SIMPLE  EXPRESSION
FORC5  SBRM    FORCSC
       LDB     FORS3
       LDA     ZS
       SKB     =100000B
       LDA     ZSSAF
       STA     GNE1
       LDA     FORS3
       ETR     =37777B
       MRG     GNE1
       IACD    CL
       CLAB
       IACD    CL
*      COMPILED TERMINATING INSTRUCTION OF ONE SECTION. EXTEND CHAIN
FORC11 LDA     FORS5
       BNE     =0,FORC12
*      BEGINNING CHAIN
       M1      CL,FORS5
       BRU     FORC13
*      CONTINUING CHAIN
FORC12 LDX     CL
       LDA     FORS5
       ADM     1,2
       STX     FORS5
*      FINISHED WITH ONE SECTION
FORC13 CBF     ICOMMA,FORC18
*      CHECK FOR MODIFIER AFTER COMMA
       SBRM    SKPIFM
       BRU     FORC19
*      FINISHED WITH FOR CLAUSE
FORC18 LDA     FORS2
       SKG     =0
       BRU     FORC17
       LDA     ZS
       MRG     FORS3
       SKN     FORS1
       LDA     ZUNSTK
       IACD    CL
FORC17 LDA     ZENDFOR
       LDB     FF
       SKB     =-1
       MRG     =40000B
       IACD    CL
*      PATCH CHAIN
FORC16 LDA     FORS5
       BE      =0,FORC14
       LDB     CL
       SBRM    COUNT
       CAB
       LDX     FORS5
       LDA     1,2
       ETR     =37777B
       STA     FORS5
       LDA     1,2
       ETR     =77740000B
       STA     1,2
       BNE     =0,FORC15
*      OPR     EFEXP 
       BAC
       LSH     6
       MRG     ZOPR0
       MRG     =XEFEXP
       STA     1,2
       BRU     FORC16
*      FORB
FORC15 CBA
       ADM     1,2
       BRU     FORC16
*      CHAIN PATCHED
FORC14 M1      CL,FORBL
       BRU     T


*      COMPILE SUBROUTINE CALL

FORCSC ZRO     LINK2
       SKN     FORS1
       BRU     *+2
       SBRR    FORCSC
       LDA     FORS1
       LDB     CL
       SBRM    COUNT
       CLB
       LSH     6
       MRG     =XSC
       MRG     ZOPR0
       IACD    CL
       SBRR    FORCSC



*      DEFINE STATEMENT
DEFS   SKN     CSNO
       CERR    2
       SBRM    GNE
       SKG     NVAR2
       BRU     DEFS1
DEFS2  CERR    32
DEFS1  STA     CSNO1
       SBRM    GNE
       COMPL   NULL
       M1      CL,DEFT2
       M1      =0,DEFT1
       CBF     ILBRAK,DEFS4
DEFS10 SBRM    GNE
       CSF     IRBRAK
       BRU     DEFS2
       LDA     CO
       SKG     NVAR2
       BRU     *+2
       BRU     DEFS2
       SKNE    CSNO1
       CERR    34
       LDA     =VL
       ADM     CO
       COMPL   NULL,CO
       MIN     DEFT1
       SBRM    GNE
       CSF     ICOMMA
       BRU     DEFS10
       CBF     IRBRAK,DEFS2
*      DONE WITH ARGUMENTS
       SBRM    GNE
DEFS4  LDX     DEFT2
       LDA     DEFT1
       STA     1,2
       CBF     IEQ,DEFS5
*      EQUALS. EXPRESSION DEFINITION
       RBF     EXPR,(CERR,9)
       COMPL   OPR0,=XRTN
       CBF     IEOS,(CERR,9)
*      DONE COMPILING DEFINE
DEFS6  M1      =-2,CSNO
       BRU     T
*      NOT EQUALS
DEFS5  CBF     ICLN,DEFS2
       M1      =0,CSNO
       SBRM    GNE
       M1      CL,BPL
       RBF     STAT,(CERR,9)
       LDA     CL
DEFS7  CAX
       LDA     0,2
       SKE     =0
       BRU     DEFS7
       LDA     ZOPR0
       MRG     =XRTN0
       STA     1,2
       BRU     DEFS6

*      RETURN STATEMENT
RETS   RBF     EXPR,RETS1
       COMPL   OPR0,=XRTN
       BRU     T
RETS1  CBF     IEOS,(CERR,9)
       COMPL   OPR0,=XRTN0
       BRU     T

EDITS  CLA
       BRU     EDITS4
*      MODIFY
MODFYS EQU     *
MODS   LDA     =-1

EDITS4 STA     EMFLG
       SKN     CSNO
       CERR    2
       M1      =-1,SNF
       RBF     SCLASB,EDITS2
EDITS1 LDA     =MODIFY
       SKN     EMFLG
       LDA     =EDIT
       MRG     ZOPR1
       IACD    CL
       BRU     T
EDITS2 M1      =0,SNF
       CBF     IFORM,EDITS3
       RBF     EXPR,(CERR,9)
       COMPL   LN,=PRTFLG
       BRU     EDITS1
EDITS3 LDA     CO
       SKG     NVAR2
       BRU     *+2
       CERR    9
       MIN     CO
       COMPL   LI,CO
       SBRM    GNE
       BRU     EDITS1


PAGES  SBRM    SKPIFM
       BRU     PAGES1
PAGES2 COMPL   OPR0,=XPAGE
       BRU     T
PAGES1 CBT     IEOS,PAGES2
       M1      =-1,FEEFLG
       RBF     EXPR,(CERR,17)
       COMPL   OPR0,=XPAGE1
       BRU     T

LINES  COMPL   OPR0,=XLINE
       BRU     SBEXIT

*      DONE STATEMENT
DONES  SKN     CSNO
       BRU     *+2
       CERR    3
       COMPL   OPR0,=XDONE
       M1      =-1,TRAFLG
       BRU     SBEXIT

*      CANCEL STATEMENT
CANCLS SKN     CSNO
       CERR    2
       SBRM    RCLR
       BRU     SB1

*      PAUSE STATEMENT
PAUSES SKN     CSNO
       BRU     *+2
       CERR    3
       COMPL   OPR0,=XPAUS
       BRU     SBEXIT

*      QUIT STATEMENT
QUITS  SKN     CSNO
       CERR    2
       CLL     RPL
       BRU     ESC1

*      VERSION STATEMENT
VERSIO COMPL   OPR0,=XVERSI
       BRU     SBEXIT

*      EXPRESSION LIST = EXPRESSION / EXPRESSION LINT ',' EXPRESSION
EXPL   DATA    NEXP,SSFLG,-1
       M1      =0,NEXP
       STA     SSFLG
EXPL1  RBF     EXPR,F
       MIN     NEXP
       CSF     ICOMMA
       BRU     EXPL1
       LDA     NEXP          DONE LIST
       STA     SNEXP
       BRU     T


LOADS  SKN     CSNO
       CERR    2
       MSG     M12
       LDA     INFIL
       BRS     62
       CERR    9
       COPY    AX
       CIO     INFIL
       SKE     CRCH
       CERR    9
       COPY    BA
       SKE     =3
       CERR    9
       COPY    XA
       XMA     INFIL
       LDB     =777B
       SKM     CIF             IF COMMAND INPUT FILE, DON'T CLOSE
       BRS     20
       BRU     SB1

*      READ FROM <EXPRESSION>: <PRIMARY LIST>
READS  SBRM    GNE
       CBF     IFROM,READS1
       LDA     ZREADF
READS2 STA     READOP
       RBF     EXPR,READS1
       CBF     ICLN,READS1
       COMPL   OPR1,=SETIF
       SBRM    GNE
       BRU     DEMS1
READS1 CERR    39

*      WRITE OP <EXPRESSION> (IN FORM <EXPRESSION>) : ETC
WRITES SBRM    GNE
       CBF     ION,(CERR,40)
       RBF     EXPR,(CERR,40)
       COMPL   OPR1,=SETOF
       CBT     IIN,TYPES2
       M1      IP,TYPST1
       CBF     ICLN,(CERR,40)
       BRU     TYPS22


INPTS  SBRM    GNE
       CBF     IFROM,READS1
       LDA     ZOPR0
       MRG     =XINPUT
       BRU     READS2

OUTPTS SBRM    GNE
       CBF     ION,(CERR,40)
       RBF     EXPR,(CERR,40)
       COMPL   OPR1,=SETOF
       CBF     ICLN,(CERR,40)
       SBRM    GNE
OUTPT1 M1      =-1,FEEFLG
       RBF     EXPR,(CERR,9)
       COMPL   OPR1,=OUTPUT
       CBF     ICOMMA,T
       SBRM    SKPIFM
       BRU     OUTPT1
       BRU     T


*      DO STATEMENT = 'DO' STATEMENT CLASS
DOS    M1      =-1,SNF
       SBRM    GNE
DOS5   RBF     SCLASC,DOS1
       COMPL   OPR1,=DO
       BRU     DOS4
DOS1   LDA     CO
       SKG     NVAR2
       BRU     *+2
       CERR    8
       STA     PA
       M1      =0,SNF
       SBRM    GNE
       CBF     ILBRAK,DOS3
       RBF     FARG,(CERR,23)
       CBF     IRBRAK,(CERR,24)
       SBRM    GNE
       LDA     SNEXP
       CLB
       LSH     9
DOS2   MRG     PA
       MRG     ZFCN
       IACD    CL
       COMPL   UNSTK,=STACK
       COMPL   SBRM,=RERR
DOS4   CBF     ICOMMA,T
       M1      =-1,SNF
       SBRM    SKPIFM
       BRU     DOS5
       M1      =0,SNF
       BRU     T
DOS3   CLAB
       BRU     DOS2

*      TYPE STATEMENT = 'TYPE' EXPRESSION LIST / 'TYPE' EXPRESSION LIST
*      'IN' 'FORM' EXPRESSION/ 'TYPE' STATEMENT CLASS' / 'TYPE' 'ALL'
*      ['STEPS', 'FORMS','VALUES']
TYPES  M1      IP,TYPST1
TYPS22 SBRM    GNE
       CBF     IALL,TYPES1
*      TYPE 'ALL'
       SBRM    GNE
       SKE     ISTEPS
       BRU     *+3
       LDA     =5
       BRU     TYPES8
       SKE     IFORMS
       BRU     *+3
       LDA     =6
       BRU     TYPES8
       SKE     IVAL
       BRU     *+3
       LDA     =7
       BRU     TYPES8
       LDA     =4
       BRU     TYPES5
TYPES8 STA     BINOP1
       SBRM    GNE
       LDA     BINOP1
TYPES5 MRG     ZTYPE
       IACD    CL
       BRU     T
TYPES1 CBF     IFORM,TYPES2
       RBF     EXPR,(CERR,9)
       COMPL   TYPE,=1
       BRU     T
TYPES2 CBF     IIN,TYPES3
       SBRM    GNE
       CBF     IFORM,(CERR,6)
       RBF     EXPR,(CERR,6)
       COMPL   OPR1,=XFORM
       CBF     ICLN,(CERR,6)
       M1      =0,NEXP
       M1      CL,TFCL1
       COMPL   TYPE,=20000B
       M1      CL,TFCL2
       M1      TFCL1,CL
       RBT     EXPR,TYPS17
       CBF     IEOS,(CERR,9)
       BRU     TYPS18
TYPS16 M1      TFCL1,CL
       M1      =-1,FEEFLG
       RBF     EXPR,F
TYPS17 MIN     NEXP
       CBF     ICOMMA,TYPS18
       SBRM    SKPIFM
       BRU     TYPS16
TYPS18 M1      TFCL2,CL
       LDX     CL
       LDA     NEXP
       ADM     1,2
       CBF     IFOR,T
       M1      TFCL1,BPL
       BRU     T
TYPES3 CBF     IDQ,TYPES4
       COMPL   TYPE,=3
       M1      OCP,IP
TYPS20 GCI     IP
TYPS21 CERR    17
       SKE     =2
       BRU     TYPS20
       GCI     IP
       BRU     TYPS21
       STA     CC
       BRU     SBEXIT
TYPES4 RBF     SCLASA,TYPES7
       COMPL   TYPE,=2
       BRU     T
*      TYPING EXPRESSION LIST OR ERROR
TYPES7 LDA     TYPST1
       SUB     SIP
       SUB     =1
       MRG     ZBTE
       IACD    CL
       M1      =-1,SSFLG
*      GOT FIRST ELEMENT OF AN EXPRESSION. IS IT AN ISOLATED IDENTIFIER
TYPS10 M1      =-1,FEEFLG
       M1      CL,TFCL1
       RBF     EXPR,(CERR,9)
       LDA     CL
       LDB     =37777B
       SKM*    TFCL1
       BRU     TYPS12
       CAX
       LDA     1,2
       LDB     =177B5
       SKM     ZL
       BRU     TYPS12
       ETR     =37777B
       MRG     ZLI
       STA     1,2
       LDA     IP
       SUB     TYPST1
       MRG     =1B4
       MRG     ZTYPE
       IACD    CL
       BRU     TYPS14
TYPS12 LDA     OCP
       SUB     TYPST1
       CLB
       LSH     7
       STA     TYPST2
       LDA     IP
       SUB     OCP
       MRG     TYPST2
       MRG     ZTV
       IACD    CL
TYPS14 CBF     ICOMMA,TYPES9
       M1      IP,TYPST1
       SBRM    SKPIFM
       BRU     TYPS10
TYPES9 M1      =0,SSFLG
       BRU     T
STEPST M1      =0,STPFLG
       STA     PANFLG
       BRU     PROCS


*      SKIP IF CURRENT OBJECT IS MODIFIER
SKPIFM ZRO     LSKPFM
       SBRM    GNE
       SKG     MODBK1
       SKG     MODBK
       SBRR    SKPIFM
       MIN*    SKPIFM
       SBRR    SKPIFM



*      OPEN "NAME" FOR INPUT (OUTPUT) AS FILE <EXPRESSION>

OPENS  LDA     CC
       BRU     *+3
OPENS1 G  IP
OPENS2 CERR    37
       BE      =0,OPENS1
       STA     CC
       SBRM    ILD
       BRU     OPENS5
       LDA     IP
       SUB     SIP
       SUB     =1
       CLB
       LSH     6
       STA     OPENT
       GCI     IP
       BRU     OPENS2
       SKE     CC
       BRU     *-3
       GCI     IP
       BRU     OPENS2
       STA     CC
       SBRM    GNE
OPENS6 CBF     IFOR,OPENS2
       SBRM    GNE
       CBF     IINPUT,OPENS3
       LDA     =OPENI
       BRU     OPENS4
OPENS3 CBF     IOUTPT,OPENS2
       LDA     =OPENO
OPENS4 ADM     OPENT
       SBRM    GNE
       CBF     IAS,OPENS2
       SBRM    GNE
       CBF     IFILE,OPENS2
       RBF     EXPR,OPENS2
       COMPL   OPR1,OPENT
       BRU     T
OPENS5 M1      =7,OPENT
       RBF     EXPR,OPENS2
       BRU     OPENS6

*      CLOSE <EXPRESSION>
CLOSES RBF     EXPR,(CERR,38)
       COMPL   OPR1,=CLOSE
       BRU     T

*      PROCEED STATEMENT
PROCS  SKN     XEQFLG
       BRU     PROCS1
       CERR    31
PROCS1 SKN     CSNO
       CERR    2
       SBRM    GNE
       CBF     IEOS,(CERR,17)
       CLL     RPL
       SBRM    RRS
       SKR     0
       M1      =3,CASE
       BRR     0

*      DEMAND
DEMS   M1      =-1,SSFLG
       M1      IP,TYPST1
       SUB     SIP
       SUB     =1
       MRG     ZBTE
       STA     DEMST1
       SBRM    GNE
       CBF     IIN,DEMS3
       M1      =0,SSFLG
       SBRM    GNE
       CBF     IFORM,(CERR,9)
       RBF     EXPR,(CERR,6)
       COMPL   OPR1,=XFORM
       CBF     ICLN,(CERR,6)
       SBRM    GNE
DEMS4  RBF     PRIM2,(CERR,9)
       COMPL   OPR0,=XDIF
       COMPL   S,PA
       CBF     ICOMMA,DEMS2
       SBRM    SKPIFM
       BRU     DEMS4
       BRU     DEMS2
DEMS3  LDA     ZDEMND
       STA     READOP
       LDA     DEMST1
       IACD    CL
DEMS1  RBF     PRIM2,(CERR,9)
       LDA     OCP
       SUB     TYPST1
       CLB
       LSH     7
       STA     TYPST2
       LDA     IP
       SUB     OCP
       MRG     TYPST2
       MRG     READOP
       LDB     =57700000B
       SKM     ZDEMND
       LDA     READOP
       IACD    CL
       COMPL   S,PA
       M1      IP,TYPST1
       CBF     ICOMMA,DEMS2
       SBRM    SKPIFM
       BRU     DEMS1
DEMS2  M1      =0,SSFLG
       BRU     T

*      SET STATEMENT = 'SET' PRIMARY'= OR _' EXPRESSION
SETST  SKG     NVAR2
       BRU     *+2
       BRU     F
SETST2 RBF     PRIM2,(CERR,10)
SETST4 CBT     IEQ,SETST1
       CBF     ILARR,(CERR,11)
SETST1 RBF     EXPR,(CERR,12)
       COMPL   S,PA
       CBF     ICOMMA,T
       SBRM    SKPIFM
       BRU     SETST2
       BRU     T
SETST3 RBF     PRIM,(CERR,10)
       BRU     SETST4


*      DELETE STATEMENT = 'DELETE' PRIMARY / 'DELETE' STATEMENT CLASS
*      / 'DELETE' 'ALL'
DELS   SKN     CSNO
       CERR    2
DELST5 RBF     SCLASB,DELST2
       COMPL   DEL,=2
       CBT     ICOMMA,DELST5
       BRU     DELST6
DELST2 M1      =0,SNF
       CBF     IFORM,DELST3
DELST7 RBF     EXPR,(CERR,9)
       COMPL   DEL,=3
       CBT     ICOMMA,DELST7
       BRU     DELST6
DELST3 CBF     IALL,DELST4
       COMPL   DEL,=4
       SBRM    GNE
       BRU     DELST6
DELST4 LDA     CO
       SKG     NVAR2
       BRU     DELST1
       CERR    13
DELST1 LDA     =VL
       ADM     CO
       COMPL   DEL,CO
       SBRM    GNE
       CBF     ICOMMA,DELST6
       SBRM    GNE
       BRU     DELST4
DELST6 CBF     IEOS,(CERR,27)
       BRU     T

*      EQUIVALENT TO 'DELETE ALL'
CLEARS SKN     CSNO            IS IT A DIRECT STATEMENT
       CERR    2               NO. ERROR
       SBRM    GNE             GET NEXT CHARACTER
       CBF     IEOS,(CERR,17)  MUST BE A CARRIAGE RETURN
       BRU     RSTART          CLEAR ALL MEMORY AND RSTART

*      START PROGRAM AT FIRST STATEMENT
RUNS   SKN     CSNO            IS STATEMENT DIRECT
       CERR    2               MUST BE DIRECT
       M1      =-1,TRAFLG      DO NOT ALLOW IF MODIFIER
       COMPL   OPR0,=XRUN      COMPILE TRANSFER
       BRU     SBEXIT

*      TO STATEMENT = 'TO' STATEMENT CLASS
TOS    RBF     SCLASB,(CERR,8)
       COMPL   OPR1,=GOTO
       M1      =-1,TRAFLG
       BRU     T

*      SYNTAX FOR FORMS
FORMS  SKN     CSNO
       CERR    2
       M1      =-1,SNF
       SBRM    GNE
       M1      =0,SNF
       LDA     GNE15
       SKE     =0
       CERR    9
       SBRM    GNE
       CBF     ICLN,(CERR,9)
       LDA     CC
       SKE     LINF
       CERR    33
       LDA     SNO1
       MRG     =40000000B
       CLB
       STP     CSNO
       LDA     CRCH
       STA     CC
       BRU     SBEXIT

*      STATEMENT CLASS = 'STEP' STATEMENT NUMBER / 'PART' EXPRESSION
SCLASC DATA    -1
       LDA     CO
       BRU     SCLAS5
SCLASB DATA    -1
       M1      =-1,SNF
       SBRM    GNE
SCLAS5 SKA     =4B7
       BRU     SCLAS3
       BRU     SCLAS2
SCLASA DATA    -1
       BRU     SCLAS2
SCLASS DATA    -1
       SBRM    GNE
SCLAS2 CBF     IPART,SCLAS1
       M1      =0,SNF
       RBF     EXPR,(CERR,18)
       COMPL   LN,=PRTFLG
       BRU     T
SCLAS1 CBT     ISTEP,SCLAS4
       CBF     ISTEPS,F
SCLAS4 M1      =-1,SNF
       SBRM    GNE
SCLAS3 M1      =0,SNF
       LDA     CO
       SKG     =0
       BRU     *+2
       CERR    14
       LDP     SNO1
       SBRM    LKN
       MRG     ZLN
       IACD    CL
       BRU     SBEXIT

*      JOSS SYNTAX  EXPRESSIONS
*      EXPRESSION = X1A AND EXPR / X1A OR EXPR / X1A
EXPR   DATA    PA,WHR2,-1
       M1      CL,WHR2
       RBF     X1A,F
EXPR7  CBF     IAND,EXPR6
       RBF     X1A,(CERR,20)
       COMPL   OPR,=CTIMES
       BRU     EXPR7
EXPR6  CBF     IOR,EXPR8
       RBF     X1A,(CERR,20)
       COMPL   OPR,=CPLUS
       BRU     EXPR7
EXPR8  RBF     WHRMDA,T
       BRU     T
*      X1A = X1 RELOP X1 / X1
X1A    DATA    SRELOP,-1
       RBF     X1,F
       CBF     IEQ,EXPR2A
       M1      LOCEQ,SRELOP
       BRU     EXPR1
EXPR2A CBF     INE,EXPR2
       M1      LOCNE,SRELOP
       BRU     EXPR1
EXPR2  CBF     IGT,EXPR3
       M1      LOCGT,SRELOP
       BRU     EXPR1
EXPR3  CBF     IGE,EXPR4
       M1      LOCGE,SRELOP
       BRU     EXPR1
EXPR4  CBF     ILT,EXPR5
       M1      LOCLT,SRELOP
       BRU     EXPR1
EXPR5  CBF     ILE,T
       M1      LOCLE,SRELOP
EXPR1  RBF     X1,(CERR,19)
       COMPL   OPR,SRELOP
       BRU     T
*      X1 = X2 ADDOP X1 / X2
X1     DATA    -1
       RBF     X2,F
X13    CBF     IPLUS,X12
       RBF     X2,(CERR,20)
       COMPL   OPR,=CPLUS
       BRU     X13
X12    CBF     IMINUS,T
X11    RBF     X2,(CERR,19)
       COMPL   OPR,=CMINUS
       BRU     X13
*      X2 = X3 MULTOP X2 / X3
X2     DATA    -1
       RBF     X3,F
X23    CBF     ISTAR,X22
       RBF     X3,(CERR,19)
       COMPL   OPR,=CTIMES
       BRU     X23
X22    CBF     ISLASH,X24
X21    RBF     X3,(CERR,19)
       COMPL   OPR,=CDIV
       BRU     X23
X24    CBF     IMOD,T
       RBF     X3,(CERR,19)
       COMPL   OPR,=CMOD
       BRU     X23
*      X3 = X4 'UP ARROW' X3 / X4
X3     DATA    -1
       RBF     X4,F
X33    CBF     IUPARR,T
       RBF     X4,(CERR,19)
       COMPL   OPR,=CPOWER
       BRU     X33
*      X4 = '+' X5 / '-' X5 / X5
X4     DATA    -1
       SKN     FEEFLG
       SBRM    GNE
       MIN     FEEFLG
       CBF     IPLUS,X42
       SBRM    GNE
       RX      X5
X42    CBF     IMINUS,X41
       SBRM    GNE
       RBF     X5,(CERR,20)
       COMPL   OPR1,=UNMIN
       BRU     T
X41    CBF     INOT,X43
       SBRM    GNE
       RBF     X5,(CERR,20)
       COMPL   OPR1,=NOT
       BRU     T
X43    RX      X5
*      X5= PRIMARY / NUMBER / $ / FUNCTION X2 / '(' EXPRESSION ')'
X5     DATA    SFCN,-1
       CBF     ILPAR,X58
       RBF     EXPR,(CERR,9)
       CBF     IRPAR,(CERR,22)
       BRU     SBEXIT
X58    CBF     IDOL,X51
       COMPL   OPR0,=XCLINE
       BRU     SBEXIT
X51    CBF     IPI,X51A
       COMPL   OPR0,=XPI
       BRU     SBEXIT
X51A   CBF     IDATE,X51B
       COMPL   OPR0,=XDATE
       BRU     SBEXIT
X51B   CBF     ITIME,X51C
       COMPL   OPR0,=XTIME
       BRU     SBEXIT
X51C   LDA     CO
       SKG     FCNBK1
       SKG     FCNBK
       BRU     X52
       SUB     FCNBK
       ADD     =DO
       STA     SFCN          FUNCTION
       LDA     CC
       SKG     =0
       SBRM    CHAR
       BNE     LPAR,X66
       SBRM    GNE
       RBF     EXPR,(CERR,9)
       CBF     IRPAR,(CERR,22)
       SBRM    GNE
       BRU     X67
X66    RBF     X2,(CERR,21)
X67    COMPL   OPR1,SFCN
       BRU     T
X52    LDA     CO
       SKG     NVAR2
       BRU     X53           PRIMARY
*      CHECK FOR FOR FUNCTIONS
       CBF     ISUM,X63
       LDA     =1
X59    STA     FFA2
       RBF     FFARG,(CERR,9)
       BRU     T
X63    CBF     IPROD,X60
       LDA     =2
       BRU     X59
X60    CBF     IMAX,X61
       LDA     =3
       BRU     X59
X61    CBF     IMIN,X62
       LDA     =4
       BRU     X59
X62    LDA     CO
       SKG     =ETS
       BRU     COND
       MRG     ZLN
       IACD    CL
       BRU     SBEXIT

*      CONDITIONAL EXPRESSION
COND   CBF     IIF,F
       RBF     CONDEX,(CERR,34)
       BRU     T

CONDEX DATA    COND10,COND11,COND12,COND20,-1
       LDA     =COND7
       STA     COND20
COND1  RBF     EXPR,(CERR,34)
       CBF     ITHEN,(CERR,34)
COND2  COMPL   OPR1,=EXIT0
       M1      CL,COND10
       RBF     EXPR,(CERR,34)
       COMPL   OPR0,=0
       BRU*    COND20
COND6  CSF     IELSE
       BRU     COND5
       COMPL   LN,=ZERO
       M1      CL,COND12
       BRU     COND40
COND5  CBF     IIF,COND4
       M1      =COND3,COND20
       BRU     COND1
COND4  RBF     EXPR,(CERR,34)
       M1      CL,COND12
       BRU     COND40

COND7  M1      CL,COND11
       M1      CL,COND12
       BRU     COND31
COND3  LDA     CL
       LDX     COND12
       ADM*    1,2
       STA     COND12
COND31 LDA     COND10
       LDB     CL
       SBRM    COUNT
       CLB
       LSH     6
       LDX     COND10
       ADM     1,2
       BRU     COND6
COND40 LDA     COND11
COND39 LDB     COND12
       SBRM    COUNT
       CLB
       LSH     6
       MRG     COND13
       LDX     COND11
       XMA     1,2
       ETR     =37777B
       STA     COND11
       SKE     =0
       BRU     COND39
       BRU     T

*      VARIABLE. CHECK FOR FUNCTION CALL
X53    STA     PA
       LDA     CC
       BNE     BLKCH,X65
       SBRM    CHAR
X65    BNE     LBRAK,X64
*      FUNCTION CALL
       SBRM    GNE
       CBF     ILBRAK,F
       RBF     FARG,(CERR,23)
       CBF     IRBRAK,(CERR,24)
       LDA     SNEXP
       CLB
       LSH     9
       ADM     PA
       COMPL   FCN,PA
       BRU     SBEXIT
X64    RBF     PRIM2,(CERR,9)
       CSF     ILARR
       BRU     X57
       COMPL   L,PA
       BRU     T
*      EQUATION
X57    RBF     EXPR,(CERR,9)
       COMPL   S,PA
       COMPL   DUP
       BRU     T

FARG   DATA    NEXP,-1
       M1      =0,NEXP
X69    RBF     EXPR,(CERR,9)
       LDX     CL
       LDA     1,2
       LDB     =17700000B
       SKM     ZL
       BRU     X68
       ETR     =37777B
       MRG     ZLI
       STA     1,2
       COMPL   OPR0,=XCFN
X68    MIN     NEXP
       CSF     ICOMMA
       BRU     X69
       M1      NEXP,SNEXP
       BRU     T

*      FOR FUNCTION ARGUMENT
FFARG  DATA    FFA1,FF,SSFLG,-1
       M1      FFA2,FF
       M1      =0,SSFLG
       SBRM    GNE
       CBF     ILPAR,(CERR,4)
       RBF     FORCL,FFARG2
FFARG4 M1      FORBL,FFA1
       CBF     ICLN,(CERR,4)
       RBF     EXPR,(CERR,4)
       CBF     IRPAR,(CERR,4)
       COMPL   FORLP,FF
       LDA     FFA1
       LDB     CL
       SBRM    COUNT
       ADD     =1
       MIN     FFA1
       ADM*    FFA1
       BRU     SBEXIT
FFARG2 CBT     IWHILE,FFARG3
       CBF     IUNTIL,(CERR,4)
FFARG3 RBF     WHILMD,(CERR,4)
       BRU     FFARG4

*      PRIMARY = LETTER / LETTER '(' EXP LIST ')'
PRIM   DATA    -1
       SBRM    GNE
       LDA     CO
PRIM1A SKG     NVAR2
       BRU     *+2
       BRU     F
PRIM1  ADD     =VL
       STA     PA            PRIMARY
       SBRM    GNE
       CBF     ILPAR,PRIM3
       LDA     IP
       SKN     SSFLG
       BRU     *+2
       STA     TYPST2
       RBF     EXPL,(CERR,23) SUBSCRIPT
       CBF     IRPAR,(CERR,24)
       LDA     SNEXP
       SKG     =30           NO MORE THAN 30 SUBSCRIPTS TO A VARIABLE
       BRU     *+2
       CERR    46
       CLB
       LSH     9
       SUB     =VL
       ADM     PA
X55    COMPL   SUBS,PA
       SKN     SSFLG
       BRU     X56
       LDA     TYPST2
       SUB     TYPST1
       CLB
       LSH     7
       STA     TYPST1
       LDA     OCP
       SUB     TYPST2
       MRG     TYPST1
       MRG     ZTS
       IACD    CL
       M1      OCP,TYPST1
X56    LDA     PA
       ETR     =777B
       ADD     =VL
       ADD     =100000B
       STA     PA
       BRU     SBEXIT
PRIM3  CBF     ILBRAK,T
       CERR    30
PRIM2  DATA    -1
       LDA     CO
       BRU     PRIM1A
*      GET NEXT ELEMENT) RETURNS A UNIQUE IDENTIFIER FOR THE NEXT ELEMENT IN A.
*      X IS UNDISTURBED9 THE IDENTIFIER ALSO GOES INTO CO.
GNE    ZRO     LGNE
       M1      IP,OCP
       LDA     CC
GNE5   SBRM    ILD
       BRU     GNE3          LETTER OR DIGIT
       BE      =7,GNE90
       SKG     =31B
       BRU     GNE4
       SUB     =12B
       SKG     =60B
       BRU     GNE4
       SUB     =32B
GNE4   CAX
       BE      =152B-44B,GNE11
       BNE     =155B-44B,GNE33
GNE41  LDA     IEOS
       BRU     GNEOUT
GNE33  SKG     =33B
       BRU     GNE35
GNE36  SBRM    CRLF
       LDA     CC
       CIO     OUTFIL
       CLA
       CIO     OUTFIL
       CERR    25
GNE35  BNE     =0,GNE34
GNE11  SBRM    CHAR          BLANK. SKIP IT
       BRU     GNE5
GNE34  BNE     DOT,GNE23
       SBRM    CRWB
       M1      =1,GNE15
       LDA     CC
       BRU     GNE12
GNE23  LDA     SCT,2
       SKG     =-1
       BRU     GNE36
GNE22  STA     GNE7
       SBRM    CHAR
       LDA     GNE7
       BNE     IGT,GNE20
       LDA     CC
       BNE     EQ,GNE21
       LDA     IGE
       BRU     GNE22
GNE20  BNE     ILT,GNE21
       LDA     CC
       BNE     EQ,GNE21
       LDA     ILE
       BRU     GNE22
GNE21  LDA     GNE7
       BRU     GNEOUT
GNE3   SKG     =31B          LETTER OR DIGIT
       BRU     GNE8          DIGIT
       STA     GNE7          LETTER
       SBRM    CRWB
GNE10  LDA     CC
       WCI     RWBP
       SBRM    CHAR
       SBRM    ILD
       BRU     GNE10
       LDA     CC
       SKE     BLKCH
       BRU     *+2
       SBRM    CHAR
       SBRM    LRW           DONE RESERVED WORD9 LOOK IT UP
       BRU     GNEOUT        IDENTIFIER SITTING IN A NOW
       CLA
       LDB     RWB
       DIV     NVAR
       CBA
       LSH     1
       ADD     =1
       STA     GNE7
GNE81  CAX
       LDA     VL,2
       BE      =0,GNE82
       BE      RWB,GNE83
       CXA
       ADD     =2
       SKG     NVAR1
       BRU     *+2
       LDA     =1
       BNE     GNE7,GNE81
       CERR    45
GNE82  LDA     RWB
       STA     VL,2
GNE83  EAX     -1,2
       CXA
       BRU     GNEOUT
GNE8   SBRM    CRWB          DIGIT
       CLA
       STA     GNE15
       LDA     CC
GNE12  WCI     RWBP
       SBRM    CHAR
GNE26  SKE     DOT
       BRU     GNE14
       MIN     GNE15
       BRU     GNE12
GNE14  BNE     ='   E',GNE24
*      EXPONENT
       WCI     RWBP
GNE25  SBRM    CHAR
       BE      PLUS,GNE12
       BE      MINUS,GNE12
       BNE     BLKCH,GNE26
       BRU     GNE25
GNE24  SKG     =31B
       SKG     =17B
       BRU     GNE13         NO DIGIT
       BRU     GNE12
GNE13  LDA     GNE15
       SKG     =1
       BRU     *+2
       CERR    28
       SKN     SNF
       BRU     GNE32
*      STATEMENT NUMBER
       SBRM    COMPNO
       STA     SNO1
       LDA     RWBP1
       SUB     RWBP
       SUB     =7
       STA     SNO2
       SBRM    COMPNO
       LDX     SNO2
       MUL     DNOTAB,2
       LSH     23
       STA     SNO2
       XAB
       LDA     SNO1
       MRG     =40000000B
       BRU     GNEOUT
*      STRING
GNE90  SBRM    CRWB
       LDX     =37771B
GNE91  GCI     IP
       SBRM    RERR
       BE      =7,GNE95
       BE      CRCH,GNE94
       BRX     GNE91
       WCI     RWBP
       BRU     GNE91
GNE94  SKR     IP
GNE95  CLA
       STA     CC
       SBRM    STTOCD
       SBRM    LKN
       BRU     GNEOUT
*      NUMBER
GNE32  SIC     RWBP
       FLOAT

       SBRM    LKN
GNEOUT STA     CO
       SBRR    GNE

*      COMPUTE NUMBER UP TO DOT OR ENF OF STRING
COMPNO ZRO     LINK1
       CLA
       STA     CNO4
CNO7   GCI     RWBP
       BRU     CNO5
       SKE     DOT
       BRU     CNO6
CNO5   LDA     CNO4
       SBRR    COMPNO
CNO6   SUB     =20B
       XMA     CNO4
       MUL     =10
       LSH     23
       ADM     CNO4
       BRU     CNO7

*      LOOK UP NUMBER IN NL AND ENTER IT IF NECESSARY
LKN    ZRO     LINK1
       STP     LKN2
       M1      NL,LKN4
LKN5   LVDI    LKN4
       BRU     LKN6
       SKE     LKN2
       BRU     LKN5
       XAB
       SKE     LKN3
       BRU     LKN5
LKN7   LDA     LKN4
       ETR     =37777B
       ADD     =1
       SBRR    LKN
LKN6   LDP     LKN2
       IACD    LKN4
       BRU     LKN7

*      INPUT NOT FROM TELETYPE
RDL13  M1      IP,FP
       M1      =300,ECHO
       BRU     RDL18
RDL20  BNE     CRCH,RDL21
       LDA     =137B
       CIT     INFIL
       BRU     RDL10
RDL16  LDA     CIF
       XMA     INFIL
       LDB     =777B
       SKM     CIF
       BRU     RDL17
       COPY    A
       BRS     151
       STA     CIF
       STA     INFIL
       BRU     RDL10
RDL17  BRS     20
       BRU     RDL10
RDL21  BNE     =135B,RDL15
       CIO     INFIL
       CNA
       COPY    AX,A
       SKR     ECHO
       BRU     *+2
       BRU     RDL22
       WCI     IP
       BRX     *-4
       BRU     RDL18
RDL15  BNE     =137B,RDL14
       BRU     RDL16
RDL14  BNE     =166B,RDL19
       CIO     INFIL
RDL19  SKR     ECHO
       BRU     RDL19A
RDL22  LDP     IP
       STP     SIP
       CERR    42
RDL19A WCI     IP
RDL18  CIO     INFIL
       BRU     RDL20

*      EXIT
RDL10  LDA     CRCH
       WCI     IP
       CLA
       WCI     IP
       WCI     IP
       SKR     FP
       SKR     FP
       LDA     PAGE3
       SBRM    SETPGE
       LDP     IP
       STP     SIP
       SBRR    RDL

       XTRNL   LRST,LRSF,LRX,LCST,LCSF
       XTRNL   ONE,ONE1,ZERO,PI,PRTFLG
       XTRNL   T,F,STAT,SB,SB1,SKPIFM,EXPR,GNE,RDL10,RDL13,NVAR3

L1     EQU     *

       END
XCAL ** FICHE/FRAME BREAK *****
1SCAL SYMSORT

SYM.  PG.LN. IDENT.

CANCLS 15  2 1SCAL   CLEARS 26  2 1SCAL   CLOSES 23  2 1SCAL   
CNO5   40 26 1SCAL   CNO6   40 28 1SCAL   CNO7   40 22 1SCAL   COMPNO 40 19 1SCAL   
COND   31 35 1SCAL   COND1  32  3 1SCAL   COND2  32  5 1SCAL   COND3  32 25 1SCAL   
COND31 32 29 1SCAL   COND39 32 38 1SCAL   COND4  32 18 1SCAL   COND40 32 37 1SCAL   
COND5  32 15 1SCAL   COND6  32 10 1SCAL   COND7  32 22 1SCAL   CONDEX 31 39 1SCAL   
DEFS   11 38 1SCAL   DEFS1  12  5 1SCAL   DEFS10 12 11 1SCAL   DEFS2  12  4 1SCAL   
DEFS4  12 30 1SCAL   DEFS5  13  3 1SCAL   DEFS6  12 39 1SCAL   DEFS7  13  9 1SCAL   
DELS   25 10 1SCAL   DELST1 25 30 1SCAL   DELST2 25 16 1SCAL   DELST3 25 22 1SCAL   
DELST4 25 26 1SCAL   DELST5 25 12 1SCAL   DELST6 25 37 1SCAL   DELST7 25 18 1SCAL   
DEMS   23 21 1SCAL   DEMS1  24  8 1SCAL   DEMS2  24 27 1SCAL   DEMS3  24  4 1SCAL   
DEMS4  23 36 1SCAL   DONES  14 33 1SCAL   DOS    17 24 1SCAL   DOS1   17 29 1SCAL   
DOS2   18  4 1SCAL   DOS3   18 15 1SCAL   DOS4   18  9 1SCAL   DOS5   17 26 1SCAL   
EDITS  13 26 1SCAL   EDITS1 13 37 1SCAL   EDITS2 14  4 1SCAL   EDITS3 14  9 1SCAL   
EDITS4 13 32 1SCAL   EXPL   15 25 1SCAL   EXPL1  15 28 1SCAL   EXPR   28  1 1SCAL   
EXPR1  28 34 1SCAL   EXPR2  28 23 1SCAL   EXPR2A 28 20 1SCAL   EXPR3  28 26 1SCAL   
EXPR4  28 29 1SCAL   EXPR5  28 32 1SCAL   EXPR6  28  8 1SCAL   EXPR7  28  4 1SCAL   
EXPR8  28 12 1SCAL   F       3 16 1SCAL   FARG   34  1 1SCAL   FFARG  34 20 1SCAL   
FFARG2 34 38 1SCAL   FFARG3 35  1 1SCAL   FFARG4 34 26 1SCAL   FORC1   8 20 1SCAL   
FORC10  9 22 1SCAL   FORC11  9 38 1SCAL   FORC12 10  5 1SCAL   FORC13 10 10 1SCAL   
FORC14 11 15 1SCAL   FORC15 11 11 1SCAL   FORC16 10 29 1SCAL   FORC17 10 23 1SCAL   
FORC18 10 15 1SCAL   FORC19  8 33 1SCAL   FORC1A  8 18 1SCAL   FORC1B  8 30 1SCAL   
FORC2   8 34 1SCAL   FORC3   9  5 1SCAL   FORC4   9  1 1SCAL   FORC5   9 25 1SCAL   
FORC6   9  8 1SCAL   FORC7   9 14 1SCAL   FORC8   9 16 1SCAL   FORC9   9 18 1SCAL   
FORCL   7 27 1SCAL   FORCSC 11 21 1SCAL   FORMD1  5 39 1SCAL   FORMD2  6 14 1SCAL   
FORMD3  6 15 1SCAL   FORMD4  6  3 1SCAL   FORMOD  5 35 1SCAL   FORMS  26 22 1SCAL   
GNE    36 17 1SCAL   GNE10  37 33 1SCAL   GNE11  37  4 1SCAL   GNE12  38 32 1SCAL   
GNE13  39 11 1SCAL   GNE14  38 38 1SCAL   GNE20  37 22 1SCAL   GNE21  37 27 1SCAL   
GNE22  37 14 1SCAL   GNE23  37 11 1SCAL   GNE24  39  7 1SCAL   GNE25  39  2 1SCAL   
GNE26  38 34 1SCAL   GNE3   37 29 1SCAL   GNE32  40 11 1SCAL   GNE33  36 34 1SCAL   
GNE34  37  6 1SCAL   GNE35  37  3 1SCAL   GNE36  36 36 1SCAL   GNE4   36 29 1SCAL   
GNE41  36 32 1SCAL   GNE5   36 20 1SCAL   GNE8   38 28 1SCAL   GNE81  38 12 1SCAL   
GNE82  38 23 1SCAL   GNE83  38 25 1SCAL   GNE90  39 34 1SCAL   GNE91  39 36 1SCAL   
GNE94  40  4 1SCAL   GNE95  40  5 1SCAL   GNEOUT 40 15 1SCAL   IFMOD   5  3 1SCAL   
IFMOD1  5  9 1SCAL   INPTS  17  2 1SCAL   L1     42 37 1SCAL   LCSF    3 24 1SCAL   
LCST    3 19 1SCAL   LINES  14 29 1SCAL   LKN    40 36 1SCAL   LKN5   40 39 1SCAL   
LKN6   41 11 1SCAL   LKN7   41  7 1SCAL   LOADS  15 37 1SCAL   LRSF    2  5 1SCAL   
LRST    1 22 1SCAL   LRX     2 11 1SCAL   MOD     4 33 1SCAL   MOD1    4 36 1SCAL   
MODFYS 13 29 1SCAL   MODS   13 30 1SCAL   NVAR    3 29 1SCAL   NVAR1   3 30 1SCAL   
NVAR2   3 31 1SCAL   NVAR3   3 32 1SCAL   ONE     1 14 1SCAL   ONE1    1 15 1SCAL   
OPENS  21 38 1SCAL   OPENS1 22  1 1SCAL   OPENS2 22  2 1SCAL   OPENS3 22 26 1SCAL   
OPENS4 22 28 1SCAL   OPENS5 22 36 1SCAL   OPENS6 22 21 1SCAL   OUTPT1 17 14 1SCAL   
OUTPTS 17  8 1SCAL   PAGES  14 19 1SCAL   PAGES1 14 23 1SCAL   PAGES2 14 21 1SCAL   
PAUSES 15  8 1SCAL   PI      1 16 1SCAL   PRIM   35  5 1SCAL   PRIM1  35 11 1SCAL   
PRIM1A 35  8 1SCAL   PRIM2  36 12 1SCAL   PRIM3  36 10 1SCAL   PROCS  23  7 1SCAL   
PROCS1 23 10 1SCAL   PRTFLG  1 18 1SCAL   QUITS  15 15 1SCAL   RDL10  42 20 1SCAL   
RDL13  41 16 1SCAL   RDL14  42  8 1SCAL   RDL15  42  6 1SCAL   RDL16  41 23 1SCAL   
RDL17  41 33 1SCAL   RDL18  42 16 1SCAL   RDL19  42 10 1SCAL   RDL19A 42 15 1SCAL   
RDL20  41 19 1SCAL   RDL21  41 35 1SCAL   RDL22  42 12 1SCAL   READS  16 19 1SCAL   
READS1 16 28 1SCAL   READS2 16 22 1SCAL   RETS   13 19 1SCAL   RETS1  13 22 1SCAL   
RST1    2  4 1SCAL   RST3    1 36 1SCAL   RST4    1 26 1SCAL   RUNS   26  9 1SCAL   
SB      4  9 1SCAL   SB1     4 26 1SCAL   SBEXIT  4 29 1SCAL   SCLAS1 27 23 1SCAL   
SCLAS2 27 18 1SCAL   SCLAS3 27 27 1SCAL   SCLAS4 27 25 1SCAL   SCLAS5 27 11 1SCAL   
SCLASA 27 14 1SCAL   SCLASB 27  8 1SCAL   SCLASC 27  5 1SCAL   SCLASS 27 16 1SCAL   
SETST  24 31 1SCAL   SETST1 24 37 1SCAL   SETST2 24 34 1SCAL   SETST3 25  4 1SCAL   
SETST4 24 35 1SCAL   SKPIFM 21 26 1SCAL   STAT    3 37 1SCAL   STEPST 21 20 1SCAL   
T       2 17 1SCAL   T2      2 20 1SCAL   T3      2 34 1SCAL   T4      2 25 1SCAL   
T6      3 13 1SCAL   T7      2 18 1SCAL   TOS    26 16 1SCAL   TSF     3 10 1SCAL   
TST     3  7 1SCAL   TYPES  18 21 1SCAL   TYPES1 19  7 1SCAL   TYPES2 19 11 1SCAL   
TYPES3 19 39 1SCAL   TYPES4 20 11 1SCAL   TYPES5 19  4 1SCAL   TYPES7 20 15 1SCAL   
TYPES8 19  1 1SCAL   TYPES9 21 18 1SCAL   TYPS10 20 22 1SCAL   TYPS12 21  4 1SCAL   
TYPS14 21 14 1SCAL   TYPS16 19 25 1SCAL   TYPS17 19 28 1SCAL   TYPS18 19 32 1SCAL   
TYPS20 20  3 1SCAL   TYPS21 20  4 1SCAL   TYPS22 18 22 1SCAL   UNLMOD  5 22 1SCAL   
UNTLMD  7  4 1SCAL   VERS    1 11 1SCAL   VERSIO 15 21 1SCAL   WHILMD  6 39 1SCAL   
WHL1    7  6 1SCAL   WHR1    6 26 1SCAL   WHR3    6 29 1SCAL   WHRMDA  6 33 1SCAL   
WHRMOD  6 23 1SCAL   WRITES 16 31 1SCAL   X1     28 38 1SCAL   X11    29  6 1SCAL   
X12    29  5 1SCAL   X13    29  1 1SCAL   X1A    28 15 1SCAL   X2     29 10 1SCAL   
X21    29 17 1SCAL   X22    29 16 1SCAL   X23    29 12 1SCAL   X24    29 20 1SCAL   
X3     29 25 1SCAL   X33    29 27 1SCAL   X4     29 32 1SCAL   X41    30  5 1SCAL   
X42    29 39 1SCAL   X43    30 10 1SCAL   X5     30 12 1SCAL   X51    30 20 1SCAL   
X51A   30 23 1SCAL   X51B   30 26 1SCAL   X51C   30 29 1SCAL   X52    31  9 1SCAL   
X53    33 13 1SCAL   X55    35 29 1SCAL   X56    36  4 1SCAL   X57    33 35 1SCAL   
X58    30 17 1SCAL   X59    31 15 1SCAL   X60    31 21 1SCAL   X61    31 24 1SCAL   
X62    31 27 1SCAL   X63    31 18 1SCAL   X64    33 29 1SCAL   X65    33 17 1SCAL   
X66    31  6 1SCAL   X67    31  7 1SCAL   X68    34 13 1SCAL   X69    34  3 1SCAL   
ZERO    1 17 1SCAL   
XCAL ** FICHE/FRAME BREAK *****
4SCAL
4SCAL  IDENT   2/12/68       TEMPORARY STORAGE BLOCK FOR CAL

       NOLIST  EXT,STAT


*      LOADING PROCEDURE FOR CAL IS AS FOLLOWS:
*      ASSEMBLE ALL PACKAGES (E,1,2,3,4,5SCAL,MMCAL).
*      ENTER DDT.
*      (IN THE FOLLOWING WE WRITE : FOR SEMICOLON TO KEEP NARP HAPPY)
*      240:T /4B/  (BINARY FILES ARE WRITTEN NB HERE, WHERE N IS THE
*      FIRST LETTER OF THE NAME OF THE SYMBOLIC PACKAGE)
*      14000:T /EB/
*      20000:T /1B/
*      :T /2B/
*      :T /3B/
*      :T /5B/
*      :T /MB/
*      :U    SHOULD PRINT NOTHING
*      A WORKING VERSION OF CAL SHOULD NOW EXIST IN CORE BETWEEN
*      14000 AND 37777. IT STARTS AT 20000. THE CONTINUE ENTRY
*      IS 20001
*      WHEN CAL RUNS IT NORMALLY USES ONLY THE CODE FROM 20000 TO 37777.
*      WHEN IT IS ENTERED IT SAVES THE PMT BYTE NUMBER FOR THE 14000 BLOCK
*      (IN MSGBLK) AND REMOVES IT FROM THE MAP.  THE BLOCK IS RESTORED
*      ONLY WHEN A MESSAGE WHICH LIVES IN THAT BLOCK IS TO BE PRINTED.
*      OR A LINE IS TYPED IN.




P:     EQU     100B
       POPS    DPOPS

FIRST  BSS     0

SBRLNK MACRO   D
N:     NARG
       RPT     (X:=1,N:)
$D(X:) BSS     2
       ENDR
       ENDM

$SBLNK EQU     *
       SBRLNK  LINK1,LINK2,LOPC,LTYTL,LSKPFM,LGNE,LRDL,LRDEM,LCLEAR
       SBRLNK  LFNDST,LTYP,LCPBE,LFRM20,LFRM28,LTEV,LTSSV,LB35,LSRS
       SBRLNK  LRRS,LCHOUT,LCRLF,LFS,LTMSG,LSBPE,LCCLR,LRERR,LRCLR,LERR
       SBRLNK  LERREC,LPSCN,LIOIN,LGBLK,LSBLK,LRBLK,LGFS,LGDBV,LFSV
       SBRLNK  LDELV,LPSTA,LRSTA,LSSTA,LCSTA,LSVR
EBLNK  EQU     *
EBLNK1 EXT     EBLNK+1
CBLNK  EXT     SBLNK-EBLNK

DEF    MACRO   D
N:     NARG
       RPT     (X:=1,N:)
$D(X:) BSS     1
       ENDR
       ENDM
       FRGT    N:,X:

*      STORAGE DEFINED BY DEF IS TEMPORARY IN NATURE.  IT HAS BEEN
*      GROUPED INTO BLOCKS ACCORDING TO THE NATURE OF THE ROUTINES
*      IN WHICH IT IS USED.

*      STORAGE FOR POPS
       DEF     POPT1,POPT2,JRT1,T5,RST2,BINOP1,BINOP2,BINOP3,BINOP4
       DEF     BINOP5

*      STORAGE FOR GENERAL SERVICE ROUTINES
       DEF     TMSG2,TMSG3
       DEF     FS2,FS3,CBRST2,CBRST3
       DEF     CBRST4,CBRST5,CBRST6
       DEF     CRLF3,CRLF4,CRLF5,CRLF6,CBRS2T,CBRS3T,CBRS4T
       DEF     MSGBLK,FS21,FS22,PSL,TFL,SCNVT1,SCNVT2

*      STORAGE FOR COMPILER SERVICE ROUTINES
       DEF     COUNT2,COUNT3,CC
       DEF     SBPE2,SBPE3

*      STORAGE FOR GNE AND AUXILIARY ROUTINES
       DEF     GNE1,GNE7,GNE15,LKN2,LKN3,LKN4
       DEF     SNO1,SNO2,CNO4

*      STORAGE FOR LINE EDIT
       DEF     SERI,SEOS,SEWS,SETS,SETS1,SETL,SETL1
IP     EXT     SETS
FP     EXT     SETS1
       DEF     ECHO,SEMSEM

*      STORAGE FOR THE COMPILER PROPER
       DEF     SRELOP,SNEXP,SFCN,NEXP,FORLPL,FORBL,TRAFLG
       DEF     FF,FFA1,FFA2,TYPST1,TYPST2,DEFT1,DEFT2,TFCL1,TFCL2
       DEF     COND10,COND11,COND12,COND20
       DEF     FORS1,FORS2,FORS3,FORS4,FORS5
       DEF     UNORWH,WHR2,OPENT,READOP

*      STORAGE FOR THE FLOATING POINT INPUT-OUTPUT ROUTINES
       DEF     A1,A2,A3,DEXP,EEE
       DEF     IOD,IODEXP,IOFILE,IOFMT,IOW,MOMINS,NCONV
       DEF     PERIOD,IOPLUS,RLIO2,RLIO3,RLIO4,RLIO5,RLIO6,RLIO7
       DEF     RLITLK,RLOTLK,RNDLNK,RNDSAV,RNDSKR,SIGN,XRSAVE
       DEF     IOPTR,IOPTR1,RLIO1,RLIO11,IOLINK
SDCZRO EXT     IOLINK
TRAPLC EXT     IOLINK
$IOSTNG BSS    10
$NOUT  BSS     15
NOUT1  EXT     NOUT+1
NOUT2  EXT     NOUT+2
NOUT3  EXT     NOUT+3
NOUT4  EXT     NOUT+4
NOUT7  EXT     NOUT+7
NOUT8  EXT     NOUT+8
NOUT9  EXT     NOUT+9
NOUT10 EXT     NOUT+10
NOUT11 EXT     NOUT+11
NOUT12 EXT     NOUT+12
NOUT13 EXT     NOUT+13
NOUT14 EXT     NOUT+14
NOUT15 EXT     NOUT+15

*      STORAGE FOR THE RUNTIME
       DEF     SUBSE,SUBSX,FORAT1,DELS1,DELS2
       DEF     DELS6,DELS7,NOS,CSUBS,TYPE1,TYPE2
       DEF     TYPECD,TSBS2
       DEF     CLF1,CLF2,CLF3,CLF4,OPR1T,FSVT1,FSVT2,JRT2
       DEF     SRS1,CLF5,KLUGE
       DEF     CLF6,DELS8,DEMST1,FRF05,FRF04,CPS2,CPS3
       DEF     EMFLG,DEMNT2,RCLR2,RCLR3,DEMFIL
       DEF     CMPTEM,STTEM,RAN3,RAN4

*      STORAGE FOR BLOCK FREE STORAGE ROTINES
       DEF     CSTAT2,CSTAT3,GBLKT2,GBLKT3,GBLKT4
       DEF     GBLKT5,PSTAT2,PSTAT3,PSTAT4,PSTAT5,PSTAT6
       DEF     RBLKT2
       DEF     RBLKT3,RBLKT4,RBLKT5,RBLKT6,RSTAT2,RSTAT3,RSTAT4
       DEF     RSTAT5,SPGET2,SSTAT2,NPLINK
       DEF     MSGPGE,CURPGE,BLKPNT,SVSTN1,SVSTN2,SVSTPT
       DEF     LSTBLK,OVRFS,EFS,PAGE3
       DEF     SBLKT2
$RBPNT BSS     2               RELABELLING BYTE POINTERS
$TRBPNT BSS    2               TEMPORARY RELABELLING BYTE POINTERS

*      STORAGE FOR THE FLOATING POINT ROUTINES
       DEF     SS01,SS02,SS03
       DEF     LGFSUM,LGFSM1,LGFX,LGFSFT,LGFCHR,LGFARG,LGFAR1
       DEF     FRV01,FRV011,FRT01,FRT02,FRT03,FRT04,FRT05,FRS01,FRS02
       DEF     FRP04,FRP041,FRP05,FRP051,FRP02,FRP021
       DEF     FRF01,FRF02,FRF03
       DEF     SCEXP,SCARG2,SCAR21,SCARG,SCARG1,SCA
       DEF     F1,F2,T1,TEMP
       DEF     EXFX,EXFS,EXFR,EXFR1,EXFE,EXFCNT
       DEF     EXFARG,EXFAR1,AH,R,TX

*      STORAGE FOR ERROR ROUTINES
       DEF     RERRA,RERRB,RERRX,RERR1R,RERR2R,ERRT1


*      CAL FLAGS, RUNTIME
$ESCPND BSS    1             ESCAPE PENDING FLAG
$DISINT BSS    1             DISABLE INTERUPT FLAG
$PANFLG BSS    1             SET BY A DEFERRED RUBOUT IN RUNTIME
$XEQFLG BSS    1             -1 WHEN A GO IS ILLEGAL, OTHERWISE
*      THE ADDRESS TO BRR TO.
$STPFLG BSS    1             SET WHEN STEPPING.
*      CAL FLAGS, COMPILER
$TFFLG BSS     1             SET WHEN A FALSE EXIT IS BEING TAKEN
$SNF   BSS     1             SET WHEN GNE IS EXPECTED TO PRODUCE A
*      STATEMENT NUMBER
$SSFLG BSS     1             SET WHEN SUBSS IS COMPILED INSTEAD OF
*      SUBS
$FEEFLG BSS    1             SET WHEN EXPR SHOULD ASSUME FIRST ELEMENT
*      OF EXPRESSION ALREADY GNE'D
$CASE  BSS     1             -1=IGNORE RUBOUT,1=GO TO EXEC,
*      2=ABORT STATEMENT READ,3=ABORT COMPILE,
*      4=ABORT RUNNING PROGRAM
$CMPCTL BSS    1             SET IN DEMAND
$CONCTL BSS    1             CONTINUE FLAG

*      CAL STRING POINTERS. THERE ARE SOME MORE IN THE LINE EDIT TS
       DEF     SIP,SIP1,HEAD,HEAD1,RWBP,RWBP1
       DEF     TBUFP,TBUFP1

*      RUNNING CONTROL
       DEF     PARTNO,PAGENO,CSNO,CSNO1
       DEF     NREC

*      INPUT/OUTPUT PARAMETERS
       DEF     LINCNT,INFIL,CIF

*      INTERRUPT PROCESSOR
       DEF     ESCT1,ESCA,ESCB,ESCX,ESCRET

*      SAVED STATE VARIABLES
STAVAR EQU     *
       DEF     CURBLK,DEMLOC,DJRT1,OUTFIL,RDFIL,CTL,TYPE3,TYPE3B
       DEF     TYPEP,TYPEP1,TPSTP,CSTK,FCNSTK,STACK
$ESTVAR EQU    *
CSTVAR EXT     STAVAR-ESTVAR

       DEF     SCRBLK,SDMLOC,SDJRT1,SOUTFL,SRDFIL,SCTL,STYPE3,STYP3B
       DEF     STYPEP,STYPP1,STPSTP,SCSTK,SFNSTK,SSTACK
SSTVAR EXT     *


*      FILE NUMBER CORRESPONDENCE TABLE
$FILTAB BSS    2*NFILES
$EFILTB BSS    0
EFILT1 EXT     *+1

*      CAL LISTS, RUNTIME
$TSTACK BSS    1             STACK PTR AT LAST FUNCTION CALL
*      CAL LISTS, COMPILER
$RPL   BSS     1             STACK FOR RECOGNIZERS
$PL    BSS     1             PROGRAM IS COMPILED HERE
$CL    BSS     1             ACTIVE LOCATION IN PL
$BPL   BSS     1
$FL    BSS     1             FORM LIST
$SL    BSS     1             STATEMENT LIST, NOT FROM FREE STORAGE
$NL    BSS     1             NUMBER LIST

*      STORAGE ALLOCATION
       DEF     TFS

*      MEDIUM-TERM TRANSMISSION OF INFORMATION
       DEF     FORLOC,FORI1,FORI2,FORIS,FOR1ST,FFV,FFV1
       DEF     RA,PA,CO,OCP,SUBSV,SUBSC,STOREX

*      TABLES
$VL    BSS     2*ENVAR       BEGINNING OF VARIABLE LISTS
$EVL   BSS     1

*      BUFFERS, MOSTLY FOR STRINGS
$HBUF  BSS     30            HEADING BUFFER
$SBUF  BSS     103           SOURCE LINE BUFFER
$BSBUF BSS     1
$TBUF  BSS     30
TBUF1  EXT     TBUF+1
$BTBUF BSS     1
$FSVS  BSS     30
$FSVSTK BSS    1
$RWB   BSS     10            RESERVED WORD BUFFER
RWB1   EXT     RWB+1
RWB2   EXT     RWB+2
$ERWB  BSS     1
LRWB   EXT     RWB-ERWB

$ETS   EQU     *
$ETS1  EQU     ETS+3*[[14000B-[ETS-:ZERO:+240B]]/3]
$ETS2  EQU     ETS+3*[[4000B-[ETS-:ZERO:+240B]]/3]

       END
XCAL ** FICHE/FRAME BREAK *****
4SCAL SYMSORT

SYM.  PG.LN. IDENT.

BPL     6 21 4SCAL   BSBUF   7  1 4SCAL   BTBUF   7  4 4SCAL   
CASE    5 17 4SCAL   CBLNK   2 12 4SCAL   CL      6 20 4SCAL   CMPCTL  5 20 4SCAL   
CONCTL  5 21 4SCAL   CSTVAR  6  3 4SCAL   D(X:)   2 17 4SCAL   D(X:)   1 39 4SCAL   
DEF     2 14 4SCAL   DISINT  5  4 4SCAL   EBLNK   2 10 4SCAL   EBLNK1  2 11 4SCAL   
EFILT1  6 13 4SCAL   EFILTB  6 12 4SCAL   ERWB    7 10 4SCAL   ESCPND  5  3 4SCAL   
ESTVAR  6  2 4SCAL   ETS     7 13 4SCAL   ETS1    7 14 4SCAL   ETS2    7 15 4SCAL   
EVL     6 35 4SCAL   FEEFLG  5 15 4SCAL   FILTAB  6 11 4SCAL   FIRST   1 34 4SCAL   
FL      6 22 4SCAL   FP      3  9 4SCAL   FSVS    7  5 4SCAL   FSVSTK  7  6 4SCAL   
HBUF    6 38 4SCAL   IOSTNG  3 27 4SCAL   IP      3  8 4SCAL   LRWB    7 11 4SCAL   
N:      2 15 4SCAL   N:      1 37 4SCAL   NL      6 24 4SCAL   NOUT    3 28 4SCAL   
NOUT1   3 29 4SCAL   NOUT10  3 36 4SCAL   NOUT11  3 37 4SCAL   NOUT12  3 38 4SCAL   
NOUT13  3 39 4SCAL   NOUT14  4  1 4SCAL   NOUT15  4  2 4SCAL   NOUT2   3 30 4SCAL   
NOUT3   3 31 4SCAL   NOUT4   3 32 4SCAL   NOUT7   3 33 4SCAL   NOUT8   3 34 4SCAL   
NOUT9   3 35 4SCAL   P:      1 31 4SCAL   PANFLG  5  5 4SCAL   PL      6 19 4SCAL   
RBPNT   4 23 4SCAL   RPL     6 18 4SCAL   RWB     7  7 4SCAL   RWB1    7  8 4SCAL   
RWB2    7  9 4SCAL   SBLNK   2  4 4SCAL   SBRLNK  1 36 4SCAL   SBUF    6 39 4SCAL   
SDCZRO  3 25 4SCAL   SL      6 23 4SCAL   SNF     5 11 4SCAL   SSFLG   5 13 4SCAL   
SSTVAR  6  7 4SCAL   STAVAR  5 38 4SCAL   STPFLG  5  8 4SCAL   TBUF    7  2 4SCAL   
TBUF1   7  3 4SCAL   TFFLG   5 10 4SCAL   TRAPLC  3 26 4SCAL   TRBPNT  4 24 4SCAL   
TSTACK  6 16 4SCAL   VL      6 34 4SCAL   XEQFLG  5  6 4SCAL   
XCAL ** FICHE/FRAME BREAK *****
2SCAL
2SCAL  IDENT

       NOLIST  EXT,STAT

*      ARITHMETIC AND TYPEOUT

LRND   ROV
       XAB
       ADD     =2000000B
       ETR     =74000777B
       XAB
       ADC     =0
       OVT
       BRU     *+2
       BRR     0
       STE
       EAX     1,2
       LRSH    1
       LDE
       BRR     0


*      BINARY OPERATE - THE OPERATION IS DETERMINED BY THE ADDRESS
LOPR   M1      0,JRT1
       LDX     STACK
       STX     BINOP5
       MIN     BINOP5
       LDA     0,2
       SKE     =0
       BRU     *+2
       SBRM    RERR
       STA     STACK
       LDA     TFS
       STA     0,2
       STX     TFS
       LDX     STACK
       LDA     1,2
       LDB     2,2
       EAX*    0
       ROV
       ROP     BRU,(*,2),XADD,XSUB,XMULT,XDIV,XPWR,XGT,XGE
       ROP     BRU,XLT,XLE,XEQ,XMOD,XNE
CPLUS  EXT     1
CMINUS EXT     2
CTIMES EXT     3
CDIV   EXT     4
CPOWER EXT     5
CMOD   EXT     11
$LOCNE ZRO     12
$LOCEQ ZRO     10
$LOCGT ZRO     6
$LOCGE ZRO     7
$LOCLT ZRO     8
$LOCLE ZRO     9
$OVFL  ERROR   12
XADD   FAD*    BINOP5
XADD1  LDX     STACK
       STA     1,2
       STB     2,2
       OVT
       BRU     OVFL
       BRR     JRT1
XSUB   FSB*    BINOP5
       BRU     XADD1
XMULT  FMP*    BINOP5
       BRU     XADD1
XDIV   XMA*    BINOP5
       SKE     =0
       BRU     XDIV1
       ERROR   25
XDIV1  XMA*    BINOP5
       FDV*    BINOP5
       BRU     XADD1
XMOD   RND
       FDV*    BINOP5
       FIX
       FLOAT
       FMP*    BINOP5
       STP     BINOP1
       LDX     STACK
       LDA     1,2
       LDB     2,2
       FSB     BINOP1
       ROV
       BRU     XADD1
XPWR   ROV
       STP     BINOP3
       LDX     BINOP5
       LDA     0,2
       LDB     1,2
       STP     BINOP1
       BNE     =0,XPWR1A
       LDP     ONE
       BRU     XADD1
XPWR1A LDA     BINOP3
       BNE     =0,XPWR1
       CLAB
       BRU     XADD1
XPWR1  LDB     BINOP2
       COPY    BA,E
       SKA     =400B
       BRU     XPWR2
       LDA     BINOP1
       FIX
       XAB
       BNE     =0,XPWR2
*      INTEGER
       BAC
       SKA     =1
       LDB     =-1
       STB     TYPE1
       SKG     =50
       BRU     XPWR3
*      EXPONENT IS TOO LARGE
       LDP     BINOP3
       SKG     =0
       BRU     *+3
       MIN     TYPE1
       BRU     XPWR7
       FNA
XPWR7  CLX
       SBRM    LGF
       SBRM    RERR
       FMP     BINOP1
       CLX
       SBRM    EXP
       BRU     XPWR4
       SKN     TYPE1
       BRU     *+2
       FNA
       ROV
       BRU     XADD1
*      INTEGER EXPONENT IS OK FOR REPEATED MULTIPLICATION
XPWR3  STA     BINOP1
       ROV
       SKG     =0
       CNA
       CNA
       CAX
       LDP     ONE
       FMP     BINOP3
       BRX     *-1
       SKN     BINOP1
       BRU     XPWR5
       STP     BINOP1
       LDP     ONE
       FDV     BINOP1
XPWR5  BRU     XADD1
$XPWR4 ERROR   12
$XPWR6 ERROR   11
XPWR2  LDP     BINOP3
       CLX
       SBRM    LGF
       BRU     XPWR6
       FMP     BINOP1
       CLX
       SBRM    EXP
       BRU     XPWR4
       ROV
       BRU     XADD1

LCOMPA LDX     0
       STX     CMPTEM
       SBRM    SKPNST
       BRU     CMP2
CMP1   ROV
       FSB*    BINOP5
       BRR     CMPTEM
CMP2   STP     BINOP1
       LDP*    BINOP5
       SBRM    SKPNST
       BRU     CMP4
       LDP     BINOP1
       BRU     CMP1
CMP4   SBRM    CDTOST
       STP     BINOP3
       LDP     BINOP1
       SBRM    CDTOST
       XAB
       SUB     BINOP4
       XAB
       SUC     BINOP3
       SKE     =0
       BRU     CMP3
       CBA
       SKA     =4B7
       CNA
CMP3   ROV
       BRR     CMPTEM

XGT    COMPARE
XGT4   SKG     =0
       BRU     XGT2
XGT1   LDP     ONE
       BRU     XADD1
XGT2   CLAB
       BRU     XADD1
XGE    COMPARE
       SKE     =0
       BRU     XGT4
       BRU     XGT1
XLT    COMPARE
       SKE     =0
       BRU     *+2
       BRU     XGT2
XLT1   SKG     =0
       BRU     XGT1
       BRU     XGT2
XLE    COMPARE
       BRU     XLT1
XEQ    COMPARE
       SKE     =0
       BRU     XGT2
       BRU     XGT1
XNE    COMPARE
       SKE     =0
       BRU     XGT1
       BRU     XGT2


*      READ FROM FILE
LREADF M1      0,JRT1
       LDX     RDFIL
       SBRM    IOIN
       FLOAT
       STK     STACK
       BRR     JRT1



LOPR1  M1      0,JRT1
       UNSTK   STACK
       SBRM    RERR
       STP     BINOP1
       EAX*    JRT1
       CXA
       STA     OPR1T
       ETR     =77B
       CAX
       LDA     BINOP1
       ROP     BRU,(*,2),XEXIT0,XEXIT1,XMINUS,XDO,XSIN,XCOS,XTAN,XRAN
       ROP     BRU,XSQRT,XLOG,XLOG10,XEXP,XABS,XIP,XFP
       ROP     BRU,FORM,XGOTO,XNOT,XEDIT,XOPENI,XOPENO
       ROP     BRU,XCLOSE,XSETOF,XSETIF,XOUTPT,XMODIF,XEOPNI,XEOPNO
EXIT0  EXT     1
EXIT1  EXT     2
UNMIN  EXT     3
DO     EXT     4
XFORM  EXT     16
GOTO   EXT     17
NOT    EXT     18
EDIT   EXT     19
OPENI  EXT     20
OPENO  EXT     21
CLOSE  EXT     22
SETOF  EXT     23
SETIF  EXT     24
OUTPUT EXT     25
MODIFY EXT     26
EOPENI EXT     27
EOPENO EXT     28

*      XDO,FORM,XGOTO,XEDIT,XMODIF IN MMCAL



*      SEARCH FOR CAL FILE NUMBER. SKIP RETURNING ITS ADDRESS
*      IN X IF SUCCESSFUL. CALL WITH (FLOATING) NUMBER IN A.
*      RETURN FIXED NUMBER IF UNSUCCESSFUL
SCFN   ZRO     LINK1
       FIX
       SKE     =0
       BRU     SCFN1
       ERROR   19
SCFN1  LDX     =-2*NFILES
       SKE     EFILTB,2
       BRU     *+2
       BRU     *+4
       BRX     *+1
       BRX     *-4
       SBRR    SCFN
       EAX     EFILTB,2
       MIN*    SCFN
       SBRR    SCFN

*      INSERT CAL FILE NUMBER, FIXED IN A ON ENTRY. ERROR
*      MESSAGE IF NO ROOM. LEAVE NO IN BINOP1, ENTRY INDEX IN BINOP2
ICFN   ZRO     LINK1
       SKE     =0
       BRU     ICFN1
       ERROR   19
ICFN1  LDX     =-2*NFILES
       ABC
       STB     BINOP1
       SKE     EFILTB,2
       BRU     *+2
       BRU     ICFN2
       BRX     *+1
       BRX     *-4
       ERROR   20
ICFN2  EAX     EFILTB,2
       STX     BINOP2
       SBRR    ICFN

*      GET FILE NAME. SKIP AND RETURN INDEX IN A IF BRS 48
*      WORKS, OTHERWISE RETURN POINTER AND DON'T SKIP
GFN    ZRO     LINK2
       LDA     CURBLK
       SBRM    CPS
       STP     TYPE3
       LDA     OPR1T
       ETR     =37777B
       LRSH    6
       ADM     TYPE3
       GCI     TYPE3
       SBRM    RERR
       STA     OPR1T
       LDA     BTBUF
       STA     DELS1
       STA     DELS2
       LDA     =17B
       WCI     DELS1
       GCI     TYPE3
       SBRM    RERR
       WCI     DELS1
       SKE     OPR1T
       BRU     *-4
       SKR     DELS2
GFN3   LDA     =17B
       WCI     DELS1
       LDP     DELS1
       XAB
       SUB     =1
       XAB
       ADD     =1
       BRS     48
       BRU     GFN1
       MIN*    GFN
       SBRR    GFN
GFN1   LDP     DELS1
       BRS     48
       BRU     GFN2
       MIN*    GFN
       SBRR    GFN


GFN2   LDP     DELS1
       SBRR    GFN

*      OPEN FILE FOR INPUT
XOPENI SBRM    SCFN
       BRU     OPENI1
*      NUMBER ALREADY IN USE
OPENI2 ERROR   21
OPENI1 SBRM    ICFN
OPENIC SBRM    GFN
       BRU     OPENI3
*      INPUT FILE EXISTS
       BRS     16
       BRU     OPENI4
OPENI5 LDX     BINOP2
       STA     1,2
       LDA     BINOP1
       STA     0,2
       BRR     JRT1
*      FILE NAME DOESN'T EXIST
OPENI3 ERROR   22
*      FILE CANNOT BE OPENED
OPENI4 ERROR   23

*      OPEN FILE FOR INPUT-GET FILE NAME FROM STACK
XEOPNI LDX     =OPENIC       SET RETURN FROM GFN TO OPEN CODE
       STX*    GFN
       SBRM    SCFN
       BRU     *+2
       BRU     OPENI2
       SBRM    ICFN
       M1      =17B,TBUF     PUT INITIAL / IN BUFFER
       UNSTK   STACK         GET FILE NAME
       SBRM    RERR
       SBRM    CDTOST        CONVERT TO EXTERNAL FORM
       STP     TBUF1         PUT NAME IN BUFFER
       CXA                   SIZE OF NAME
       ADD     BTBUF         SECOND WORD OF STRING POINTER
       ADD     =2
       STA     DELS2
       LDA     BTBUF         FIRST WORD OF STRING POINTER
       ADD     =1
       STA     DELS1
       BRU     GFN3


*      OPEN FILE FOR OUTPUT
XOPENO SBRM    SCFN
       BRU     *+2
       BRU     OPENI2
       SBRM    ICFN
OPENOC SBRM    GFN
       BRU     OPENO1
OPENO2 LDX     =3
       BRS     19
       BRU     OPENI4
       BRU     OPENI5
OPENO1 BRS     60
       BRU     OPENI4
       BRU     OPENO2

*      OPEN FILE FOR OUTPUT-GET NAME FROM STACK
XEOPNO LDX     =OPENOC
       BRU     XEOPNI+1

*      CLOSE FILE
XCLOSE SBRM    SCFN
       BRU     OPENI3
       CLA
       STA     0,2
       XMA     1,2
       BRS     20
       BRR     JRT1


*      SET INPUT FILE
XSETIF SBRM    SCFN
       BRU     XSETO1
       LDA     1,2
       STA     RDFIL
       BRR     JRT1

*      SET OUTPUT FILE
XSETOF SBRM    SCFN
       BRU     XSETO1
       LDA     1,2
       STA     OUTFIL
       BRR     JRT1
XSETO1 ERROR   22




XOUTPT WIO     OUTFIL
       LDA     BINOP2
       WIO     OUTFIL
       BRR     JRT1



XEXIT0 SKE     =0
       BRR     JRT1
$XEXITX LDA    OPR1T
       ETR     =37777B
       LRSH    6
       ADM     JRT1
       BRR     JRT1

XEXIT1 SKE     =0
       BRU     XEXITX
       BRR     JRT1

XNOT   MRG     BINOP2
       SKE     =0
       BRU     XNOT1
       LDP     ONE
       BRU     XMINS1
XNOT1  CLAB
       BRU     XMINS1

XMINUS FNA
XMINS1 STK     STACK
       BRR     JRT1
XSIN   LDX     =1
       SBRM    SINFCN
       BRU     XMINS1
XCOS   LDX     =1
       SBRM    COSFCN
       BRU     XMINS1
XTAN   LDX     =1
       SBRM    COSFCN
       STP     BINOP3
       LDP     BINOP1
       LDX     =1
       SBRM    SINFCN
       FDV     BINOP3
       BRU     XMINS1
XLOG   LDX     =1
XLOG1  SBRM    LGF
       BRU     XPWR6
       BRU     XMINS1
XLOG10 LDX     =2
       BRU     XLOG1
XRAN   SKE     =0
       BRU     RAN2
       LDP     RAN3
       SKE     =0
       BRU     RAN1
       BRS     42
       STB     BINOP1
       XAB
       BRU     RAN2
RAN1   LSH     16
       LDX     =-3
       XAB
       SUB     RAN4
       XAB
       SUC     RAN3
       BRX     *-4
       ETR     =177B
       STP     RAN3
       LSH     16
       CLX
       NOD     48
       LDE
       BRU     XMINS1
RAN2   LSH     16
       LDA     BINOP1
       LRSH    16
       XAB
       MRG     =1
       XAB
       STP     RAN3
       BRU     RAN1

XSQRT  BSS     0
       SKG     =0
       BRU     S2            NEGATIVE ARGUMENT IS ERROR
       COPY    BX,E
       BRX     *+1
       SKB     =1            TEST PARITY OF EXPONENT
       RSH     1
       STA     F1
       STB     F2
       SKG     =17777777B
       BRU     S1
       RSH     1             INITIAL GUESS IS (X/2)+(1/2)
       EOR     =2B7
       BRU     *+2
S1     EOR     =3B7          INITIAL GUESS IS X+(1/4)
       STA     T1
       XXA
       RSH     1
       XXA

*      INITIAL GUESS IS GOOD TO 4 BITS
*      TWO NEWTON-RAPHSON'S USING SINGLE PRECISION
*      GIVE RESULT GOOD TO 22 BITS

       LDA     F1
       DIV     T1
       ADD     T1
       LRSH    1             THE ADD CAUSED OVERFLOW INTO THE SIGN BIT
       STA     T1

       LDA     F1
       DIV     T1
       ADD     T1
       LRSH    1
       STA     T1

*      THE LAST ITERATION REQUIRES DOUBLE PRECISION
*      DIVIDEND, BUT ONLY SINGLE PRECISION DIVISOR
       LDA     F1
       LDB     F2
       DIV     T1
       STA     TEMP
       BAC
       DIV     T1
       LRSH    23
       LDA     TEMP
       ADD     T1
       LRSH    1
       ROV
       LDE
       BRU     XMINS1

S2     SKE     =0
       BRU     XPWR6
       CLAB
       BRU     XMINS1

XEXP   LDX     =1
       SBRM    EXP
       BRU     XPWR4
       BRU     XMINS1
XABS   SKG     =0
       FNA
       BRU     XMINS1

XIP    SBRM    IPF
       BRU     XMINS1

IPF    ZRO     LINK1
       RND
       STE
       XXA
       SKA     =4B7
       BRU     IPF1
       SKG     =37
       BRU     IPF2
       XXA
       LDE
       SBRR    IPF
IPF2   CNA
       XXA
       RSH     47,2
       LSH     47,2
       XXA
       CNA
       COPY    AB,E
       CXA
       SBRR    IPF
IPF1   COPY    XA,AX,B
       ETR     =4B7
       SBRR    IPF

XFP    SBRM    IPF
       STP     BINOP3
       FSB     BINOP1
       SKE     =0
       BRU     *+2
       BRU     XFP1
       LDP     BINOP1
       FSB     BINOP3
       BRU     XMINS1
XFP1   CLAB
       BRU     XMINS1



$FNDSTA ZRO    LFNDST
       SKE     =-1
       BRU     FNDST2
       MIN*    FNDSTA
       UNSTK   STACK
       SBRM    RERR
       FIX
       SBRM    FPART
       SBRR    FNDSTA
       ERROR   5
FNDST2 SBRM    FS
       SBRR    FNDSTA
       ERROR   6

*      TYPE. ADDRESS GIVES VARIABLE TO TYPE ENTIRE + 10000B OR INDICATES
*      TYPING OF SOME OTHER KIND OF OBJECT
LTYPE  LDA     0
       STA     JRT1
       EAX*    JRT1
       CXA
       ETR     =37777B
       SKG     =10000B
       BRU     TYPE17        IN MMCAL
       SKG     =17777B
       BRU     TYPE51
*      TYPE IN FORM
       BRU     TYPE79        IN MMCAL
*      TYPE ENTIRE VARIABLE
TYPE51 ETR     =7777B
       ADM     TYPEP
       UNSTK   STACK
       SBRM    RERR
       COPY    AX,AB
       LDX     0,2
       CXA
       BE      =0,TYPE10
       SKG     =0
       BRU     TYPE19
       LDA     0,2
       BNE     =40000000B,TYPE19
       LDA     1,2
       SKE     =1
       BRU     TYPE19
       LDA     2,2
       SKE     =1
       BRU     TYPE19
TYPE10 STB     TYPE3
       M1      =TYPE3,JRT1
       BRU     LOAD8
TYPE19 CBX
       SBRM    TEV
       BRU     TYPE44

*      BEGINNING OF TYPE EXPRESSION
LBTE   M1      0,JRT1
       STA     DEMLOC
       LDA     CURBLK
       STA     TPSTP
       SBRM    CPS
       STP     TYPEP
       STP     TYPE3
       EAX*    JRT1
       CXA
       ETR     =37777B
       ADM     TYPEP
       ADM     TYPE3
       LDA     BTBUF
       STA     TBUFP
       STA     TBUFP1
       BRR     JRT1
*      TYPE VALUE
LTV    SBRM    TPS
       SBRM    CPBE
       SBRM    PEQ
       M1      =-1,FRF03
       UNSTK   STACK
       SBRM    RERR
       SBRM    FRM20
       SBRM    TIV
TYPE81 SBRM    CRLF
       BRU     TYPE44

TIV    ZRO     LTYP
TYPE91 LDX     =20716000B
       LDA     BTBUF
       STA     FRP04
       STA     FRP041
       LDP     FRV01
       ISC     FRP04
       LDA     =135B
       CIO     OUTFIL
       LDA     =7
       CIO     OUTFIL
       LDP     FRP04
       LDX     OUTFIL
       SBRM    CBRS35
       SBRR    TIV

*      TYPE SUBSCRPTS
LTS    SBRM    TPS
       LDX     SUBSV
       LDA     SUBSC
       SBRM    FSV
       SBRM    RERR
       SBRM    TSBS
       BRR     JRT1

*      TYPE SUBSCRIPTS (SUBROUTINE)
TSBS   ZRO     LTYP
       M1      FSVSTK,TSBS2
TS2    LDA     TSBS2
       BE      =FSVS,TS1
       SKR     TSBS2
       LDX*    TSBS2
       LDA     1,2
       SKG     =-1
       BRU     TS3
TS4    LDB     =10
       LDX     TBUFP4
       SBRM    CBR36A
       LDA     COMMA
       WCI     TBUFP
       BRU     TS2
TS1    SKR     TBUFP1
       SBRR    TSBS
TS3    LDA     ='   -'
       WCI     TBUFP
       LDA     1,2
       CNA
       BRU     TS4
TBUFP4 ZRO     TBUFP,4

*      TRANSFER CHARACTERS TO TBUF
TPS    ZRO     LINK1
       M1      0,JRT1
       EAX*    0
       CXA
       ETR     =37777B
       LRSH    7
       CNA
       COPY    AX,A
       LSH     7
       STA     BINOP1
TV1    GCI     TYPEP
       SBRM    RERR
       WCI     TBUFP
       BRX     TV1
       LDA     BINOP1
       ADM     TYPEP
       SBRR    TPS

*      COMPUTE AND PRINT BLANKS TEXT AND EQUALS
CPBE   ZRO     LCPBE
       LDA     TBUFP
       SUB     TBUFP1
       ADD     =8
       SKG     =0
       BRU     CPBE2
       CAB
       LDA     =135B
       CIO     OUTFIL
       CBA
       CIO     OUTFIL
CPBE2  LDP     TBUFP
       LDX     OUTFIL
       SBRM    CBRS35
       SBRR    CPBE
*      COMPUTE POINTER TO STATEMENT, INDEX IN A. LEAVES INDEX IN X
$CPS   ZRO     LINK1
       ETR     =37777B
       CAX
       MUL     =3
       LSH     23
       ADD     =11
       CAB
       ADD     3,2
       ADD     3,2
       ADD     3,2
       XAB
       STP     CPS2
       GCD     CPS2
       SBRM    RERR
       SKE     CRCH
       BRU     *-3
       WCI     CPS2
       LDP     CPS2
       SBRR    CPS

*      PRINT STATEMENT, SL INDEX IN A.
$PSTAT ZRO     LTYP
       SKN     PANFLG
       BRU     TYP44A
       SBRM    CPS
       LDX     OUTFIL
       SBRM    CBRS35
       SBRR    PSTAT

*      TYPE STRING
TYPE50 LDA     CURBLK
       SBRM    CPS
       STP     TYPE3
       GCI     TYPE3
       SBRM    RERR
       SKE     =2
       BRU     *-3
TYPE57 GCI     TYPE3
       SBRM    RERR
       BE      =2,TYPE56
       SBRM    CHOUT
       BRU     TYPE57
TYPE56 SBRM    CRLF
       BRU     TYPE44

XTYP79 LDA     =-1
       SKR     FRS02
       CLA
       STA     FRF01         INITIALIZE DONE FLAG.
       LDP     TYPE3
       BRU     *+4
FRM01  LDA     =152B
       SBRM    CHOUT
       LDP     TYPEP         INITIALIZE SCAN OF FORM.
       STP     FRP02
FRM02  GCI     FRP02         SCAN FORM.
       BRU     FRM06         DONE.
FRM03  CBE     135B,FRM04,155B,FRM06,3,FRM07,5,FRM16
*      COMPARE INCOMING CHARACTER WITH KEY CHARACTERS.
       SBRM    CHOUT
       BRU     FRM02
FRM04  CIO     OUTFIL
       GCI     FRP02
       SBRM    RERR
       CIO     OUTFIL
       BRU     FRM02
FRM06  SKN     FRF01         CHECK DONE FLAG.
       BRU     FRM33
       LDP     TYPEP
       STP     FRP02
       SBRM    CRLF
       BRU     TYPE84
FRM33  LDA     FRS01
       SUB     =1
       SKE     FRS02
       BRU     FRM01
       ERROR   8             "FORM DOES NOT PERMIT NOS. TO BE TYPED."
FRM07  SKN     FRF01
       BRU     *+2
       BRU     TYP84M
       CLA
       STA     FRT02         WIDTH OF FIELD.
       LDA     BTBUF
       STA     FRP04
       STA     FRP041
FRM08  MIN     FRT02
       GCI     FRP02
       LDA     =155B
       CBE     3,FRM08
FRM09  STA     FRT01
       UNSTK   STACK
       SBRM    RERR
       SBRM    SKPNST
       BRU     FRM14A
       STP     A1
       LDA     FRT02
       SKG     =6
       BRU     FRM14
       ADD     =171B
       SKG     =207B
       BRU     *+2
       LDA     =207B
       CLB
       LCY     6
       ADD     FRT02
       LCY     9
       STA     FRT03
       LDP     A1
       LDX     FRT03
       ISC     FRP04
       LDX     OUTFIL
       LDP     FRP04
       SBRM    CBRS35
FRM12  SKR     FRS02
       BRU     *+3
       LDA     =-1
       STA     FRF01
       LDA     FRT01
       BRU     FRM03
FRM14  ERROR   9             "FIELD IN FORM IS NOT WIDE ENOUGH FOR SCIENTIFIC NOTATION."
FRM14A CLX
       SBRM    IOSTG
       BRU     FRM12
FRM16  SKN     FRF01
       BRU     *+2
       BRU     TYP84M
       CLA
       STA     FRT02
       STA     FRT03
       STA     FRF02
       STA     FRF03
FRM17  MIN     FRT02
       GCI     FRP02
       LDA     =155B
       BE      =5,FRM17
       BNE     =16B,FRM19
       M1      =-1,FRF02
FRM18  GCI     FRP02
       LDA     =155
       BNE     =5,FRM19
       MIN     FRT03
       BRU     FRM18
FRM19  STA     FRT01
       UNSTK   STACK
       SBRM    RERR
       SBRM    FRM20
       BRU     *+2
       BRU     FRM12
       ERROR   10            "NUMBER WILL NOT GO IN FORM SPECIFICATION."
*      SUBROUTINE TO TYPE IN F FORMAT.  SET FRF03 FOR STANDARD FORMAT.
*      OTHERWISE, SET FRT02 TO W+, FRT03 TO W-, FRF02 TO -1 FOR
*      DECIMAL POINT.  ENTER W/ NO. IN AB.  SKIPS IF SUCCESSFUL.
FRM20  ZRO     LFRM20
       STP     FRV01
       SBRM    SKPNST
       BRU     FRM40
       SKN     FRF03
       BRU     FRM20A
       LDA     =9
       STA     FRT02
       LDA     =8
       STA     FRT03
       LDA     =-1
       STA     FRF02
FRM20A CLA
       STA     FRF04
       STA     FRF05
       LDA     BTBUF
       STA     FRP04
       STA     FRP041
       LDX     =20716000B    E14.7
       LDP     FRV01
       ISC     FRP04
       LDA     FRP041
       SUB     =3
       STA     FRP04
       SIC     FRP04
       BRU     *+2
       SBRM    RERR
       SKN     FRF03
       BRU     FRM20B
       SKG     =-2
       SBRR    FRM20
       SKG     =7
       BRU     *+2
       SBRR    FRM20
       SKG     =-1
       BRU     FRM20B
       STA     FRT04
       LDP     FRV01
       RND
       FIX
       SKB     =-1
       BRU     *+3
       STB     FRF02
       STB     FRT03
       LDA     FRT04
       BRU     FRM20C
FRM20B SKG     =7
       BRU     *+2
       SBRR    FRM20
       STA     FRT04
FRM20C ADD     =2
       SKG     FRT02
       BRU     FRM20D
       SUB     =1
       SKE     FRT02
       BRU     FRM2C0
       LDA     =-1
       STA     FRF04
       LDA     FRT02
       BRU     FRM20D
FRM2C0 STA     FRT05
       LDA     FRV01
       SKE     =0
       SBRR    FRM20
       SKR     FRT03
       NOP
       LDA     FRT05
FRM20D ADD     FRT03
       SKN     FRF04
       SUB     =1
       SKG     =8
       BRU     *+2
       LDA     =8
       SKG     =0
       BRU     FRM20H
       BRU     FRM20J
FRM20I CLAB
       STP     FRV01
       BRU     FRM20B
FRM20J MIN*    FRM20
       STA     FRT05
       ADD     =177B
       CLB
       LCY     6
       ADD     FRT05
       ADD     =6
       LCY     9
       CAX
       LDA     BTBUF
       STA     FRP04
       STA     FRP041
       LDP     FRV01
       ISC     FRP04
       LDA     FRP041
       SUB     =3
       STA     FRP04
       SIC     FRP04
       BRU     *+2
       SBRM    RERR
       SKE     FRT04
       BRU     FRM20E
FRM20F LDA     BTBUF
       STA     FRP04
       LDA     FRT04
       CNA
       CLB
       SKG     =0
       XAB
       STA     FRT04
       LDA     FRT02
       SKE     =1
       BRU     *+2
       SKR     FRT04
       NOP
       CBA
       ADD     FRT02
       SUB     =2
       STA     FRT05
       SKN     FRF05
       BRU     FRM21A
       SKR     FRT05
       BRU     FRM21A
       SKR     FRT04
       BRU     FRM21A
       SKN     FRF04
       BRU     *+2
       BRU     FRM20G
       LDA     =-1
       STA     FRF04
FRM21A SKR     FRT05
       BRU     FRM25
       GCI     FRP04
       SBRM    RERR
       SKN     FRF04
       BRU     FRM22
       SKE     =0
       BRU     FRM20G
       BRU     *+2
FRM22  SBRM    FRM28
       SKR     FRT04
       BRU     FRM24
FRM23  GCI     FRP04
       SBRM    RERR
       CBE     16B,FRM23
       SBRM    FRM28
       BRU     FRM23
FRM24  LDA     =20B
       BRU     FRM22
FRM25  CLA
       SBRM    FRM28
       BRU     FRM21A

FRM28  ZRO     LFRM28
       SKR     FRT02
       BRU     FRM30
       SKN     FRF02
       BRU     FRM29
       STA     FRF02
       SKN     FRF03
       BRU     FRM28B
       LDP     FRP04
       STP     FRP05
FRM28A GCI     FRP05
       CBE     0,FRM28A,16B,FRM28A,'   E',FRM31A
FRM28B LDA     =16B
       CIO     OUTFIL
       CLA
       XMA     FRF02
FRM29  SKR     FRT03
       NOP
FRM30  CBE     '   E',FRM31
       CIO     OUTFIL
       SBRR    FRM28
FRM31  SKN     FRF03
       BRU     *+2
FRM31A SBRR    FRM20
FRM32  LDA     =20B
       SKN     FRT03
       CIO     OUTFIL
       SKR     FRT03
       BRU     FRM32
       SBRR    FRM20
FRM20E LDA     =-1
       STA     FRF05
       BRU     FRM20F
FRM20G SKR*    FRM20
       NOP
       SBRR    FRM20
*      CHECK FOR ROUND UP TO .1E-N
FRM20H SKE     =0            IS FORM LARGE ENOUGH?
       BRU     FRM20I        NO
       LDA     TBUF          CHECK FIRST DIGIT
       ETR     =377B         REMOVE SIGN
       SKG     ='4'          IS NUMBER .05E-N OR GREATER
       BRU     FRM20I        NO
       LDA     FRT03         SELECT NUMBER
       CLB
       LSH     1
       CAX
       LDP     TENTH,2
       SKN     FRV01         SHOULD NUMBER BE NEGITIVE?
       BRU     *+2           NO
       FNA
       STP     FRV01
       BRU     FRM20A
TENTH  DATA    20000000B,00000001B     1
       DATA    31463146B,31463775B     .1
       DATA    24365605B,07534772B     .01
       DATA    20304467B,22743767B     .001
       DATA    32155613B,53070763B     .0001
       DATA    24761326B,10707760B     .00001
       DATA    20615736B,40554755B     .000001
       DATA    32657712B,32571751B     .0000001
       DATA    25363073B,42141746B     .00000001
       DATA    21134057B,50115743B     .000000001
       DATA    33371577B,31657737B     .0000000001

FRM40  MIN*    FRM20
       SKN     FRF03
       BRU     FRM41
       CLX
       BRU     FRM42
FRM41  LDA     FRT02
       ADD     FRT03
       CAX
FRM42  LDA     BTBUF
       STA     FRP04
       STA     FRP041
       LDP     FRV01
       SBRM    IOSTG
       SBRR    FRM20

$TSSV  ZRO     LTSSV
       LDA     BTBUF
       STA     TBUFP
       STA     TBUFP1
       LDA     TYPE1
       XXA
       LDB     1,2
       CAX
TSSV4  CLA
       LSH     8
       BE      =0,TSSV3
       STB     FSVT2
       WCI     TBUFP
       LDB     FSVT2
       BRU     TSSV4
TSSV3  LDA     FSVSTK
       BE      =FSVS,TYPE21
       LDA     LPAR
       WCI     TBUFP
       SBRM    TSBS
       LDA     RPAR
       WCI     TBUFP
TYPE21 SBRM    CPBE
       SBRR    TSSV

*      PVAR TYPES OUT VARIABLE
$PVAR  ZRO     LINK1
       XXA
       LDB     1,2
       CAX
PVAR1  CLA
       LSH     8
       SKE     =0
       BRU     *+2
       SBRR    PVAR
       CIO     OUTFIL
       BRU     PVAR1


*      CAL BRS 35
$CBRS35 ZRO    LB35
       STX     CBRS4T
       STP     CBRS2T
CBRSL3 GCI     CBRS2T
       SBRR    CBRS35
       SKE     LINF
       BRU     CBRSL8
       SBRM    LFCR
       BRU     CBRSL3
CBRSL8 SKE     CRCH
       BRU     CBRSL4
       SBRM    CRLF
       BRU     CBRSL3
CBRSL4 CIO     CBRS4T
       BRU     CBRSL3


*      INSERT AFTER CURRENT ELEMENT, DOUBLE

LIACD  SBRM    GFS
       CXA
       LDX*    0
       STA*    0
       LDB     0,2
       STA     0,2
       RCH     450B          CXB + CBA + CAX
       STA     0,2
       ETR     =4B7
       ADM     0,2
       CBX
       ADM     0,2
IACD1  LDA     POPT2
       LDX     POPT1
       BRR     0


*      LOAD VALUE DOUBLE AND INCREMENT

LLVDI  STX     POPT1
       LDX*    0
       LDA     0,2
       SKE     =0
       BRU     *+2
       BRR     0
       LDX     0,2
       STX*    0
       LDA     1,2
       LDB     2,2
       LDX     POPT1
       MIN     0
       BRR     0


*      DELETE CURRENT ELEMENT, DOUBLE. ADDRESS OF START OF LIST IN X.

LDCED  STX     POPT1
       STA     POPT2
       CXA
       SKE*    0
       BRU     DCED1
       LDA     TFS           MATCH WITH FIRST WORD
       XMA     0,2
       STX     TFS
       CAX
       LDA     POPT2
       BRR     0
DCED1  CAX
       LDA     0,2
       SKE*    0
       BRU     DCED1
       XXA
       LDB     0,2
       XXA
       STB     0,2
       CAX
       XMA     TFS
       STA     0,2
       BRU     IACD1

*      CLEAR LIST TO FREE STORAGE

LCLL   STX     POPT1
       STA     POPT2
       LDX*    0
       CLA
       XMA     0,2
       SKE     =0
       BRU     DLD1
       BRU     IACD1

*      RETURN LIST TO FREE STORAGE

LDLD   STX     POPT1
       STA     POPT2
       LDA*    0
DLD1   CAX
       XMA     TFS
       ABC
       BRU     *+2
       LDX     0,2
       SKE     0,2
       BRU     *-2
       STB     0,2
       BRU     IACD1


*      STACK

LSTK   SBRM    GFS
       LDA*    0
       STA     0,2
       STX*    0
       BRU     IACD1


*      UNSTACK

LUNSTK STX     POPT1
       LDX*    0
       LDA     0,2
       SKNE    =0
       BRR     0
       STA*    0
       LDA     TFS
       STA     0,2
       STX     TFS
       LDA     1,2
       LDB     2,2
       LDX     POPT1
       MIN     0
       BRR     0


*      LOAD

LL     M1      0,JRT1
       CLX
       LDA*    0
       SKN*    0
       BRU     LOAD72
       LDA     JRT1
       ETR     =37777B
       CAX
       LDA     0,2
       ETR     =37777B
       SUB     =VL
       MRG     ZFCN
       STA     0,2
       BRU     0,2
LOAD7  EAX*    0
LOAD71 CXA
       ETR     =37777B
       VERR    15
LOAD72 CAX
       SKE     =0
       BRU     LOAD2
       BRU     LOAD8
LOAD2  LDP     1,2
*      CHECK FOR UNDEFINED ELEMENT (1 IN BOTH WORDS)
       SKE     =1
       BRU     LOAD3
       XAB
       SKE     =1
       BRU     LOAD4
*      LOAD FROM UNDEFINED ELEMENT
LOAD8  STX     FSVT1
       LDX     JRT1
       LDA     0,2
       SKA     =20000000B
       BRU     LOAD9         NO ERROR I INDEX BIT SET
       LDX     JRT1
       LDA     0,2
       ETR     =177777B
       VERR    1
LOAD4  XAB
LOAD3  LDX     TFS
       STA     1,2
       STB     2,2
       CXA
       ETR     =37777B
       AXC
       SKE*    0,2
       BRU     LOAD3A
       LDA     1,2
       LDB     2,2
       STK     STACK
       BRR     JRT1
LOAD3A LDA     0,2
       ETR     =37777B
       STA     TFS
       LDA     STACK
       STA     0,2
       STX     STACK
       BRR     JRT1
LOAD9  LDA     =1
       CAB
       BRU     LOAD3


*      LOAD FROM STACKED ADDRESS

LLSA   M1      0,JRT1
       UNSTK   STACK
       SBRM    RERR
       CAX
       BRU     LOAD2


*      LOAD NUMBER

LLN    M1      0,JRT1
       EAX*    0
       LDP     0,2
       BRU     LOAD3


*      LOAD IMMEDIATE

LLI    M1      0,JRT1
       EAX*    0
       CXA
       ETR     =37777B
       CLB
       BRU     LOAD3


*      STORE

LS     M1      0,JRT1
       LDX*    JRT1
       SKN*    JRT1
       BRU     STORE1
       BRU     LOAD7
STORE1 EAX*    0
       SBRM    GDBV
       UNSTK   STACK
       SBRM    RERR
STORE4 STP     1,2
       STX     STOREX
       BRR     JRT1


*      GET DATA BLOCK FOR VARIABLE.  CALL WITH VARIABLE LOCATION
*      IN X, WHICH IT RETURNS

GDBV   ZRO     LGDBV
       LDA     0,2
       STX     FSVT1
       CAX
       SKE     =0
       SBRR    GDBV
       SBRM    GFS
       CXA
       LDB     =4B7
       STB     0,2
       LDB     =1
       STB     1,2
       STB     2,2
       LDX     FSVT1
       STA     0,2
       CAX
       SBRR    GDBV

*      DUPLICATE TOPMOST STACK ENTRY
LDUP   M1      0,JRT1
       LDX     STOREX
       LDP     1,2
       BRU     LOAD3

*      STORE IN STACKED ADDRESS
LSSA   M1      0,JRT1
       UNSTK   STACK
       SBRM    RERR
       STP     BINOP3
       UNSTK   STACK
       SBRM    RERR
       CAX
       LDP     BINOP3
       BRU     STORE4


*      STORE IN STACKED ADDRESS FROM FOR
LSSAF  M1      0,JRT1
       UNSTK   STACK
       SBRM    RERR
       STA     BINOP3
       UNSTK   STACK
       SBRM    RERR
       LDX     BINOP3
       BRU     STORE4

LSUBS  EAX*    0
       M1      0,SUBSE
       CXA
       ETR     =37777B
       RSH     9
       SUB     =1
       STA     NOS
       CLA
       STA     SUBSC
       LSH     9
       STA     SUBSV
       CAX
       EAX     VL,2
       SKN     0,2
       BRU     *+2
       BRU     LOAD71
       SBRM    GDBV
       STX     BINOP1
SUBS1  UNSTK   STACK
       SBRM    RERR
       RND
       FIX
       STA     CSUBS
       LDX     BINOP1
SUBS2  LDA     0,2
       ETR     =37777B
       SKE     =0
       BRU     SUBS3
SUBS11 SKR     NOS
       BRU     SUBS12
       LDA     =1
       CAB
       SBRM    GFS
       LDA     =4B7
       STA     0,2
       CLA
       SKE     SUBSC
       BRU     SUBS13
       CXB
SUBS14 LDA     CSUBS
       IACD    BINOP1
       CXA
       BRU     SUBS6
SUBS13 STX*    SUBSX
       LDB     SUBSC
       BRU     SUBS14
SUBS12 UNSTK   STACK
       SBRM    RERR
       RND
       FIX
       SBRM    GFS
       CLA
       STA     0,2
       SKE     SUBSC
       BRU     SUBS15
       STX     SUBSC
SUBS16 EAX     2,2
       STX     SUBSX
       BRU     SUBS11
SUBS15 STX*    SUBSX
       BRU     SUBS16
SUBS3  CAX
       LDA     0,2
       SKA     =4B7
       BRU     SUBS10
       LDA     1,2
       SKE     CSUBS
       BRU     SUBS4
       EAX     2,2
       STX     BINOP1
       SKR     NOS
       BRU     SUBS1
       LDA*    0,2
       SKA     =4B7
       BRU     SUBS5
       LDA     =1
       CAB
       IACD    BINOP1
       LDA     =4B7
       ADM*    BINOP1
       LDA     BINOP1
       BRU     SUBS6
SUBS10 STX     BINOP1
       BRU     SUBS2
SUBS4  SKG     CSUBS
       BRU     SUBS10
       BRU     SUBS11
SUBS5  LDA     0,2
SUBS6  STA     SUBSC
       CLB
       STK     STACK
       BRR     SUBSE

*      SCAN SUBSCRIPTED VARIABLE LIST STRUCTURE AND OPERATE
*      BRANCH TO LOCATION OF CALL + N TO OPERATE WHERE
*      +1: VARIABLE IS A FUNCTION
*      +2: DATA WORD,POINTER IN X.RETURN WITH FIRST WORD
*              OF ELEMENT IN A.
*      +3: SUBSCRIPT WORD,POINTER IN X AFTER UP SCAN.RETURN
*              WITH FIRST WORD OF ELEMENT IN A.

SCNVR  ZRO     LSVR          INITIAL CALLED WITH CONTENTS OF VARIABLE IN X
       SKA     =4B7          IS VARIABLE A FUNCTION?
       BRR     LSVR          YES,RETURN TO LOC AFTER CALL
       LDX     LSVR
       EAX     2,2
       STX     SCNVT1        +2 BRANCH
       EAX     1,2
       STX     SCNVT2        +3 BRANCH
       SKE     =0            IS VARIABLE UNDEFINED?
       BRU     *+2
       BRR     SCNVT2        YES,RETURN TO +5
       ETR     =37777B
       CAX
       M1      =FSVS,FSVSTK  SET UP STACK
SCNV1  SKN     0,2           IS IT A DATA ELEMENT?
       BRU     SCNV2
       BRU*    SCNVT1        YES,GO OPERATE
SVRET  ETR     =37777B
       SKE     =0
       BRU     SCNV3
       LDA     =FSVS         CHECK FOR EMPTY STACK
       SKE     FSVSTK
       BRU     *+2
       BRR     SCNVT2        SCAN COMPLETED
       SKR     FSVSTK        POP STACK
       LDX*    FSVSTK
       BRU*    SCNVT2        AND OPERATE ON +4
SCNV2  STX*    FSVSTK
       MIN     FSVSTK
       LDX     2,2
       BRU     SCNV1
SCNV3  CAX
       BRU     SCNV1

*      FIND SPECIFIED VALUE IN LIST
FSV    ZRO     LFSV
       STA     FSVT1         CELL BEING SEARCHED FOR
       LDA     VL,2
       SBRM    SCNVR         SCAN VARIABLE STRUCTURE
       SBRM    RERR          FUNCTION ILLEGAL
       BRU     FSV1
       BRU     FSV3
       SBRR    FSV
FSV1   CXA
       ETR     =37777B
       SKE     FSVT1
       BRU     FSV2
       MIN*    FSV
       SBRR    FSV
FSV2   LDA     0,2
       BRU     SVRET
FSV3   LDA     0,2
       BRU     SVRET



       XTRNL   XTYP79,GDBV,SCNVR,SVRET,FSV
       XTRNL   FRM20,TYPE50,TIV,TPS,CPBE
       XTRNL   LCOMPA,LREADF,LOPR1,LTYPE,LBTE,LTV,LTS,LRND,LOPR
       XTRNL   LIACD,LLVDI,LDCED,LCLL,LDLD,LSTK,LUNSTK,LL,LOAD8
       XTRNL   LOAD3,LLSA,LLN,LLI,LS,LDUP,LSSA,LSSAF,LSUBS

L2     EQU     *

       END
XCAL ** FICHE/FRAME BREAK *****
3SCAL
3SCAL  IDENT

       NOLIST  EXT,STAT

LOPR0  M1      0,JRT1
       EAX*    JRT1
       CXA
       STA     OPR1T
       ETR     =77B
       CAX
       ROP     BRU,(*,2),XPAUSE,PAGE,LINE,CLINE,DONE,RTN,RTN0,CFN,DIF
       ROP     BRU,SKIP,BFOR,BFORL,SCEX,SREX,EFEXP,LDPI,INPUT,DATE,TIME
       ROP     BRU,RUN,PAGE1,VERPRT
XPAUS  EXT     1
XPAGE  EXT     2
XLINE  EXT     3
XCLINE EXT     4
XDONE  EXT     5
XRTN   EXT     6
XRTN0  EXT     7
XCFN   EXT     8
XDIF   EXT     9
XSKIP  EQU     10
XBFOR  EXT     11
XBFORL EXT     12
XSC    EXT     13
XSR    EXT     14
XEFEXP EXT     15
XPI    EXT     16
XINPUT EXT     17
XDATE  EXT     18
XTIME  EXT     19
XRUN   EXT     20
XPAGE1 EXT     21
XVERSI EXT     22

*      DONE,RTN,RTN0,RUN IN MMCAL

*      SKIP
SKIP   BRU     XEXITX

COND13 OPR0    XSKIP


*      SUBROUTINE CALL. THIS OPERATION JUMPS TO A SUBROUTINE WHOSE INITIAL
*      INSTRUCTION IS BACKWARDS FROM THE OPERATION BY THE DISTANCE SPECIFIED
*      IN THE TOP 8 BITS OF THE ADDRESS FIELD. THE SUBROUTINE IS IMMEDIATELY
*      PRECEDED BY AN OPR0 SKP WHICH SKIPS OVER IT.

SCEX   LDA     OPR1T
       RSH     6
       ETR     =377B
       STA     BINOP1
       LDA     JRT1
       ETR     =37777B
       SUB     BINOP1
       CAX
       LDA     -1,2
       RSH     6
       ETR     =377B
       CNA
       ADD     BINOP1
       ADD     =1
       CAB
       LDA     =6B7
       STK     CSTK
       BRU     0,2

*      SUBROUTINE RETURN. FIND AMOUNT TO SKIP ON CSTK
SREX   UNSTK   CSTK
       SBRM    RERR
       CBA
       ADM     JRT1
       BRR     JRT1



*      READ BINARY
INPUT  WIO     RDFIL
       SKN     RDFIL
       BRU     *+2
       BRU     INPUT2
       STA     BINOP1
       WIO     RDFIL
       SKN     RDFIL
       BRU     INPUT1
INPUT2 ERROR   24
INPUT1 CAB
       LDA     BINOP1
       STK     STACK
       BRR     JRT1
*      LOAD PI
LDPI   LDP     PI
       BRU     LOAD3
DATE   SBRM    TIMDAT
       FLOAT
       BRU     LOAD3
TIME   SBRM    TIMDAT
       CBA
       FLOAT
       BRU     LOAD3

*      GET DATE AND TIME
TIMDAT ZRO     LINK1
       BRS     42
       STA     BINOP1        TIME SINCE STARTUP IN CLOCK CYCLES
       CLA
       LSH     8
       ADD     =1
       STA     BINOP2        MONTH
       CLA
       LSH     16
       MUL     =30
       CBA
       XMA     BINOP1
       COPY    AB,A
       DIV     =30
       ADD     BINOP1
       COPY    AB,A
       DIV     =24*60*30
       STB     BINOP1
       ADD     =1
       XMA     BINOP2
       MUL     =50
       CBA
       ADM     BINOP2
       LDB     BINOP1
       LSH     1
       LDA     BINOP2
       SBRR    TIMDAT

*      VERSION
VERPRT MSG     VERS
       BRR     JRT1


CFN    LDX     STACK
       LDB     1,2
       LDA     =1
       STP     1,2
       BRR     JRT1

PAGE1  UNSTK   STACK
       SBRM    RERR
       FIX
       STA     PAGENO
       LDA     HEAD1
       SKG     HEAD
       BRR     JRT1
       BRU     PAGE2

PAGE   LDA     HEAD1
       SKG     HEAD
       BRR     JRT1
       LDA     =55
       SKG     LINCNT
       BRR     JRT1
PAGE2  LDA     LINF
       CIO     OUTFIL
       SKR     LINCNT
       BRU     *-3
LINE   SBRM    CRLF
       BRR     JRT1
CLINE  M1      0,JRT1
       LDA     LINCNT
       CNA
       ADD     =56
       CLB
       FLOAT
       BRU     LOAD3

*      PAUSE STATEMENT IMPLEMENTATION
XPAUSE MIN     0
       SBRM    SRS
       MSG     M14
       SBRM    PSCN
       BRU     SEQA



*      THE FIRST OF THE FOR OPERATIONS.  THIS ONE INITIATES THE FOR,
*      STACKS THE RELEVANT INFORMATION FOR THE PREVIOUS FOR.
BFOR   LDA     0
       XMA     FORLOC
       ETR     =37777B
       MRG     FORIS
       MRG     =40000000B
       LDB     FOR1ST
       STK     CSTK
       M1      =0,FORIS
       LDA     OPR1T
       RSH     6
       ETR     =377B
       STA     BINOP1
       SKG     =0
       BRR     JRT1
*      SPECIAL FUNCTION BEING CALLED.
       LDA     FFV
       LDB     FFV1
       STK     STACK
       LDX     BINOP1
       EXU     FOR1-1,2
       EXU     FOR2-1,2
FOR4   STP     FFV
       BRR     JRT1
FOR1   CLA
       LDA     ONE
       LDA     MAXIN
       LDA     MININ
FOR2   CLB
       LDB     ONE1
       LDB     MAXIN+1
       LDB     MININ+1

MAXIN  DATA    40000000B,375B
MININ  DATA    37777777B,77777375B

*      THIS OPERATION SEPARATES THE EVALUATION OF THE INITIAL VALUE FROM
*      THE REST OF AN INCREMENTING FOR CLAUSE SECTION. IT SETS FORLOC AND
*      NOTES IN FOR1ST, WHICH IT SETS TO -1, THAT THE NEXT FORA EXECUTED
*      WILL BE THE FIRST ONE OF THE LOOP AND THEREFORE SHOULD NOT INCREMENT
*      THE VARIABLE.

BFORL  M1      0,FORLOC
       M1      =-1,FOR1ST
       BRR     0


*      THE SECOND OF THE FOR OPERATIONS.  THIS ONE INCREMENTS THE VARI-
*      IABLE AD STORES IT. IT LEAVES THE INCREMENT IN FORI AND FORI1.
*      THERE IS A DIFFERENT ENTRY FOR A SUBSCRIPTED VARIABLE.
LFORA  M1      0,JRT1
       LDX*    0
FORA1  STX     FORAT1
       UNSTK   STACK
       SBRM    RERR          UNSTACK INCREMENT
       STA     FORI1
       STB     FORI2
       LDA     =100000B
       SKN     FORI1
       CLA
       STA     FORIS
       SKN     FOR1ST
       BRU     FORA2
*      FIRST TIME AROUND
*      ASSIGN FOR VARIABLE IF NECESSARY
       LDX     JRT1
       LDA     0,2
       SKA     =100000B
       BRU     FORA4
       COPY    AX,AB
       LDA     0,2
       SKE     =0
       BRU     *+3
       SBRM    GDBV
       BRU     *+2
       CAX
       STX     FORAT1
FORA4  LDX     STACK
       LDA     0,2
       SKE     =0
       BRU     *+2
       SBRM    RERR
       STA     STACK
       LDA     TFS
       STA     0,2
       STX     TFS
       LDA     1,2
       LDB     2,2
       BRU     FORA3
*      LOOPING
FORA2  LDX     FORAT1
       LDA     1,2
       LDB     2,2
       FAD     FORI1
*      GOT NEW VALUE OF VARIABLE IN AB
FORA3  LDX     FORAT1
       STA     1,2
       STB     2,2
       MIN     FOR1ST
       BRR     JRT1          RETURN WITH VARIABLE INAB.

*      FORA FOR SUBSCRIPTED VARIABLE.
LFORAS M1      0,JRT1
       UNSTK   STACK
       SBRM    RERR
       CAX
       BRU     FORA1

*      THE THIRD OF THE FOR OPERATIONS.  THIS ONE CHECKS THE INDIRECT BIT
*      AND DOES A WHILE IF IT IS SET, OTHER-
*      WISE A TO. THE ADDRESS TELLS HOW MUCH TO SKIP ON CONTINUATION.
*      THE OPERATION FALLS THROUGH ON TERMINATION.
LFORB  M1      0,JRT1
       CAX
       LDA     0,2
       ETR     =77777B
       STA     FORAT1
       SKG     =40000B
       BRU     FORB1
*      WHILE CONDITION
       UNSTK   STACK
       SBRM    RERR
*      COMPARISON
       SKE     =0
       BRU     FORB2
       CBA
       SKE     =0
       BRU     FORB2
*      TERMINATION
       BRR     JRT1
*      TO CONDITION
FORB1  LDX     STACK
       LDA     0,2
       SKE     =0
       BRU     *+2
       SBRM    RERR
       STX     BINOP5
       MIN     BINOP5
       COPY    AX,XB
       LDA     0,2
       SKE     =0
       BRU     *+2
       SBRM    RERR
       STA     STACK
       LDA     TFS
       STA     0,2
       STB     TFS
       LDA     1,2
       LDB     2,2
*      COMPARISON
       FSB*    BINOP5
       LDB     FORIS
       SKB     =100000B
       EOR     =-1
*      NOW WANT TO TEST A>0 FOR TERMINATION
       SKG     =0
       BRU     *+2
       BRR     JRT1
*      NO TERMINATION
FORB2  LDA     FORAT1
       ETR     =37777B
       ADM     JRT1
       BRR     JRT1



*      THIS OPERATION MOVES FORLOC AND SKIPS TO THE CODE TO BE EXECUTED AFTER
*      A SINGLE EXPRESSION FOR CLAUSE SECTION.

EFEXP  M1      0,FORLOC
       LDA     OPR1T
       RSH     6
       ETR     =377B
       ADM     0
       BRR     0


*      THIS OPERATION TERMINATES A FOR. IF THE INDIRECT BIT IS SET IT
*      CAUSES THE FOR FUNCTION RESULT TO BE STACKED.

LENDFO LDX     0
       STX     JRT1
       LDA     0,2
       STA     FORAT1
FORB3  LDA     FORAT1
       SKA     =40000B
       BRU     *+2
       BRU     FORB4
*      EXCHANGE FFV WITH TOP STACK ELEMENT
       LDX     STACK
       LDA     FFV
       XMA     1,2
       STA     FFV
       LDA     FFV1
       XMA     2,2
       STA     FFV1
FORB4  LDA     FORAT1
       ETR     =37777B
       SUB     =1
       ADM     JRT1
       UNSTK   CSTK
       SBRM    RERR
       CAX
       ETR     =100000B
       STA     FORIS
       CXA
       ETR     =37777B
       STA     FORLOC
       STB     FOR1ST
       BRR     JRT1


*      FOR LOOP. THIS IS BRR FORLOC, EXCEPT THAT IT ISNECESSARY
*      TO CHECK FOR A PANIC AND TO DEAL WITH THE FOR FUNCTION
*      IF THERE IS ONE
LFORLP EAX*    0
       CXA
       ETR     =37777B
       SKG     =0
       BRU     FORLP4
       UNSTK   STACK
       SBRM    RERR
       BRU     *,2
       BRU     FORLP1
       BRU     FORLP2
       BRU     FORLP3
*      MIN FUNCTION
       STP     BINOP1
       FSB     FFV
       SKG     =0
       BRU     *+2
       BRU     FORLP4
       LDP     BINOP1
       STP     FFV
FORLP4 M1      FORLOC,0
       SKN     PANFLG
       BRU     XITINT
       BRR     0
*      SUM FUNCTION
FORLP1 FAD     FFV
       STP     FFV
       BRU     FORLP4
*      PROD FUNCTION
FORLP2 FMP     FFV
       STP     FFV
       BRU     FORLP4
*      MAX FUNCTION
FORLP3 STP     BINOP1
       FSB     FFV
       SKG     =0
       BRU     FORLP4
       LDP     BINOP1
       STP     FFV
       BRU     FORLP4



*      JOSS AUXILIARY ROUTINES
CHOUT  ZRO     LCHOUT
       SKE     LINF
       BRU     CHOUT1
       SBRM    LFCR
       LDA     LINF
       SBRR    CHOUT
CHOUT1 SKE     CRCH
       BRU     CHOUT2
       SBRM    CRLF
       LDA     CRCH
       SBRR    CHOUT
CHOUT2 CIO     OUTFIL
       SBRR    CHOUT


LFCR   ZRO     LCRLF
       LDA     LINF
       BRU     CRLF+2
CRLF   ZRO     LCRLF
       LDA     CRCH
       CIO     OUTFIL
       SBRM    LINCT
       SBRR    CRLF

LINCT  ZRO     LINK2
       LDA     OUTFIL
       SKG     =777B
       BRU     *+2
       BRU     *+3
       SKE     =1
       SBRR    LINCT
       LDA     HEAD1
       SKG     HEAD
       BRU     *+2
       BRU     *+4
       LDA     =37777777B
       STA     LINCNT
       SBRR    LINCT
       SKR     LINCNT
       SBRR    LINCT
       STB     CRLF3
       STX     CRLF4
       LDX     =-8
       LDA     LINF
       CIO     OUTFIL
       BRX     *-2
       LDA     =55
       STA     LINCNT
       LDP     HEAD
       STP     CRLF5
       GCI     CRLF5
       BRU     *+3
       CIO     OUTFIL
       BRU     *-3
       LDP     PAGEMS
       STP     CRLF5
       GCI     CRLF5
       BRU     *+3
       CIO     OUTFIL
       BRU     *-3
       LDA     PAGENO
       MIN     PAGENO
       SBRM    CBRS36
       LDA     CRCH
       CIO     OUTFIL
       CIO     OUTFIL
       LDB     CRLF3
       LDX     CRLF4
       SBRR    LINCT
PAGEMS STRING  (     PAGE ),10

*      SKIP IF THE CONTENTS OF A IS NOT A LETTER OR DIGIT
ILD    ZRO     LINK1
       SKG     =17B
       BRU     ILD2
       SKG     =31B
       SBRR    ILD
       SKG     =37B
       BRU     ILD2
       SKG     =72B
       SBRR    ILD
ILD2   MIN*    ILD
       SBRR    ILD
*      LOOK UP RESERVED WORD
LRW    ZRO     LINK1
       LDX     NLRWT
LRW2   LDA     ERWT,2
       BNE     RWB,LRW1
       LDA     ERWT1,2
       BNE     RWB1,LRW1
       LDA     ERWT2,2
       SBRR    LRW
LRW1   EAX     2,2
       BRX     LRW2
       MIN*    LRW
       SBRR    LRW
*      CLEAR RWB
INDL   ZRO     LINK2
       SBRM    GFS
       CLAB
       STP     0,2
       STA     2,2
       SBRR    INDL
CRWB   ZRO     LINK1
       LDA     =RWB
       MUL     =3
       LSH     23
       SUB     =1
       STA     RWBP
       STA     RWBP1
       LDX     =LRWB
       CLA
       STA     ERWB,2
       BRX     *-1
       SBRR    CRWB

*      COUNT THE NUMBER OF CELLS BETWEEN A AND B
COUNT  ZRO     LINK1
       CAX
       CLA
       STP     COUNT2
       BRU     *+3
       LDX     0,2
       MIN     COUNT2
       CXA
       SKE     COUNT3
       BRU     *-4
       LDA     COUNT2
       SBRR    COUNT

*      SUPPLY CARACTER TO GNE. THIS ROUTINE SUPPRESSES ALL BLANKS EXCEPT
*      IMMEDIATELY AFTER A LETTER OR DIGIT
CHAR   ZRO     LINK1
CHAR4  GCI     IP
       CLA
       BNE     BLKCH,CHAR2
       XMA     CC
       SKG     =72B
       SKG     =40B
       BRU     CHAR3
       LDA     CC
CHAR2  STA     CC
       SBRR    CHAR
CHAR3  SKG     =31B
       SKG     =17B
       BRU     CHAR4
       LDA     CC
       SBRR    CHAR


*      PRINT EQUALS ON CURRENT OUTPUT FILE

PEQ    ZRO     LINK1
       CLA
       CIO     OUTFIL
       LDA     ='   ='
       CIO     OUTFIL
       CLA
       CIO     OUTFIL
       SBRR    PEQ


       DATA    1000000,100000,10000,1000,100,10,1
DNOTAB EQU     *

*      CAL BRS 36
CBRS36 ZRO     LINK1
       LDB     =10
       LDX     OUTFIL
CBR36A NOP     LINK1
CBRSL9 STP     CBRST2
       STX     CBRST5
       CBA
       SKG     =-1
       SBRM    RERR
       CLA
CBRSL1 STA     CBRST4
       LDA     CBRST2
CBRSL2 STA     CBRST6
       LRSH    23
       DIV     CBRST3
       SKE     CBRST4
       BRU     CBRSL2
       CBA
       ADD     =20B
       SKN     CBRST5
       BRU     *+3
       WCI*    CBRST5
       BRU     *+2
       CIO     CBRST5
       LDA     CBRST6
       SKE     CBRST2
       BRU     CBRSL1
       SBRR    CBRS36




*      CONTINUE COMES HERE
CONTIN BSS     0
       STA     CIF
       STA     INFIL
       SBRM    IVDMEM
       LDA     INTMSK
       BRS     78
       LDX     CONCTL
       ROP     BRU,(*+1,2),RSTART,SEQA


*      INITIALIZE VERSION DEPENDENT MEMORY
IVDMEM ZRO     LINK1
       LDX     =-200B
       LDA     SBRERR
       STA     240B,2
       BRX     *-1
       LDX     =POPTB-EPOPTB
       LDA     EPOPTB,2
       STA     100B+EPOPTB-POPTB,2
       BRX     *-2
       M1      =ESCAPE,201B
       SBRR    IVDMEM

POPTB  POPS    TPOPS
EPOPTB EQU     *
SBRERR SBRM    RERR

SEQA   LDA     INFIL
       SKG     =0
       SBRM    CRLF
*      MAIN SEQUENCING LOGIC - COMPILE A STATEMENT AND EXECUTE IF NECESSARY
SEQ    M1      =-1,STPFLG
       CLA
       STA     CMPCTL
       LDA     INFIL
       LDB     =1
       SKE     =0
       LDB     =2
       STB     CASE
       LDB     =1
       STB     OUTFIL
       SKE     =0
       BRU     SEQ12
       LDA     =36B
       CIO     OUTFIL
SEQ12  SBRM    RDL
       CLA
       STA     CC
       STA     CSNO
       SBRM    CHAR
       M1      =-1,SNF
       SBRM    GNE
       MIN     SNF
       SKA     =4B7
       BRU     SEQ1
       M1      =-1,CSNO
       BRU     SEQ2
SEQ1   LDP     SNO1
       STP     CSNO
       SBRM    GNE
SEQ2   RBF     STAT,(CERR,9)
*      SET UP PROGRAM BUFFER ENTRY FOR STATEMENT
SEQ23  SBRM    SBPE
       STA     CURBLK
       LDA     CSNO
       BE      =-1,SEQ13
       BE      =-2,SEQ13
       LDP     CSNO
       LDX     CURBLK
       SBRM    PUTSTA
SEQ13  SBRM    CCLR
       LDA     CSNO
       BE      =-1,SEQ15
       SKE     =-2
       BRU     SEQ
*      FUNCTION DEFINITION
       LDX     CSNO1
       LDA     VL,2
       SBRM    DELV
SEQ17  LDA     CURBLK
       MRG     =40000000B
       LDX     CSNO1
       STA     VL,2
       BRU     SEQ
*      UNLABELED STATEMENT. RESET NPLOC AND EXECUTE
SEQ15  LDX     CURBLK
       M1      =4,CTL
       M1      =-1,PANFLG
       M1      =3,CASE
       CXA
       ADD     3,2
       CAX
       BRU     4,2
SEQ20  SBRM    CCLR
SEQ24  COPY    A
       XMA     INFIL
       LDB     =777B
       SKM     CIF
       BRS     20
       COPY    A
       BRS     151
       STA     CIF
       BRU     SEQA

SBPE   ZRO     LSBPE
       LDA     SIP1
       SUB     SIP
       RSH     23
       DIV     =3
       STA     SBPE3
       CBA
       SKE     =0
       MIN     SBPE3
       LDA     SBPE3
       ADD     =3
       STA     BINOP3
       LDA     PL
       CLB
       SBRM    COUNT
       ADD     BINOP3
       STA     SBPE2
SEQ16  SBRM    GETBLK
       BRU     SEQ21
       STA     SBPE2
       CAX
SEQ14  LDP     CSNO
       STP     1,2
       LDA     SBPE3
       STA     3,2
       SKR     SBPE3
       EAX     4,2
       CLB
SEQ11  XXB
       LDA     SBUF,2
       EAX     1,2
       XXB
       STA     0,2
       EAX     1,2
       SKR     SBPE3
       BRU     SEQ11
*      MOVED TEXT OF STATEMENT INTO PROGRAM BUFFER
       STX     SBPE3
       M1      PL,CL
SEQ6   LVDI    CL
       BRU     SEQ7
       STA*    SBPE3
       MIN     SBPE3
       BRU     SEQ6
SEQ7   LDA     SBPE2
       SBRR    SBPE
SEQ21  CLA
       XMA     LSTBLK
       SKE     =0
       BRU     SEQ22
       MSG     M50
       BRU     SEQ20
SEQ22  LDX     =100
       SBRM    RETBLK
       MSG     M51
       LDA     SBPE2
       BRU     SEQ16


*      COMPILE ERROR
LCERRX EAX*    0
       CXA
       ETR     =37777B
       STA     BINOP4
       LDA     0
       SBRM    CCLR
       M1      =-1,PANFLG
       LDA     INFIL
       SKG     =0
       BRU     CERR5
       LDP     SIP
       LDX     =1
       SBRM    CBRS35
       SBRM    CRLF
CERR5  LDA     BINOP4
       SKG     =TCFIM
       BRU     CERR3
       CAX
CERR4  SBRM    TMSG
       SBRM    CRLF
       LDX     CMPCTL
       ROP     BRU,(*+1,2),SEQ,DEMERR,DIFERR
CERR3  MSG     TCFIM
       LDX     BINOP4
       BRU     CERR4

*      CLEAR COMPILATION
CCLR   ZRO     LCCLR
       CLL     RPL
       CLL     PL
       LDX     PL
       STX     CL
       STX     BPL
       SBRR    CCLR

*      MEMORY TRAPS,INSTRUCTION TRAPS,UNEXPECTED ERRORS AND
*      NONTERMINATING LOOPS ALL COME HERE.
RERR   ZRO     LRERR
       STP     RERRA         SAVE A,B AND X REGISTERS
       STX     RERRX
       BRS     43            SAVE RELABELING
       STP     RERR1R
       LDX     =1
       LDA     =RERRMS
       LDB     =-1
       BRS     34            TYPE ERROR MESSAGE
       BRU     SEQA
RERRMS ASC     '$CAL ERROR$/'

*      CLEAR SAVED RUNTIME STATUS
SCLR   ZRO     LRCLR
       M1      =4,CASE
       LDX     SFNSTK
SCLR1  LDA     0,2
       SKE     =0
       BRU     *+2
       BRU     SCLR10
       LDX     0,2
       LDX     0,2
       LDX     0,2
       LDX     0,2
       LDB     2,2
       CLA
       LSH     9
       SKG     =6
       SKG     =3
       BRU     SCLR2
       STX     RCLR2
       LDA     1,2
       SBRM    SIZSTA
       SBRM    RETBLK
       LDX     RCLR2
SCLR2  LDX     0,2
       LDX     0,2
       LDA     2,2
       STA     RCLR2
SCLR3  LDX     0,2
       SKR     RCLR2
       BRU     *+2
       BRU     SCLR1
       SKN     1,2
       BRU     SCLR3
       STX     RCLR3
       LDA     1,2
       SBRM    SIZSTA
       SBRM    RETBLK
       LDX     RCLR3
       BRU     SCLR3
SCLR10 DLD     SFNSTK
       LDB     SCSTK
SCLR11 CBX
       LDA     0,2
       SKE     =0
       BRU     *+2
       BRU     SCLR20
       CAB
       LDA     1,2
       SKA     =4B7
       BRU     SCLR11
       STB     RCLR2
       RSH     14
       ETR     =37B
       SKG     =6
       SKG     =3
       BRU     SCLR13
SCLR12 LDA     2,2
       SBRM    SIZSTA
       SBRM    RETBLK
SCLR13 LDB     RCLR2
       BRU     SCLR11
SCLR20 DLD     SCSTK
       DLD     SSTACK
       M1      =-1,XEQFLG
       LDA     SCTL
       SKG     =6
       SKG     =3
       SBRR    SCLR
       LDA     SCRBLK
       SBRM    SIZSTA
       SBRM    RETBLK
       SBRR    SCLR

*      UNSTACK AND CLEAR SAVED STATUS
RCLR   ZRO     LRCLR
       SKN     XEQFLG
       BRU     *+2
       SBRR    RCLR
       M1      =4,CASE
       LDA     SFNSTK
       XMA     FCNSTK
       STA     SFNSTK
       SBRM    CLF
       BRU     SCLR10
       BRU     *-2

ERREC  ZRO     LERREC
ERR8   LDA     STACK
       SKE     TSTACK
       BRU     *+2
       BRU     ERR2
       UNSTK   STACK
       SBRM    RERR
       BRU     ERR8
ERR2   LDX     CURBLK
       CXA
       ADD     3,2
       ADD     =4
       CAX
       LDA     CTL
       BNE     =7,ERR3
       CXA
       ADD     0,2
       ADD     =1
       CAX
ERR3   STX     BINOP1
*      CHECK FOR FOR'S
ERR5   LDA     0,2
       SKE     ZXIT
       BRU     *+2
       BRU     *+3
       EAX     1,2
       BRU     ERR5
       STX     BINOP2
       SKR     BINOP1
ERR4   LDX     CSTK
       SKN     1,2
       BRU     ERR6
       LDA     1,2
       SKA     =2B7
       BRU     ERR6
*      FOR IS MOST RECENT OPERATION
       LDA     FORLOC
       ETR     =37777B
       SKG     BINOP1
       SKG     BINOP2
       BRU     *+2
       BRU     ERR6
*      FOR IS WITHIN THIS STATEMENT
       UNSTK   CSTK
       SBRM    RERR
       CAX
       ETR     =100000B
       STA     FORIS
       CXA
       ETR     =37777B
       STA     FORLOC
       STB     FOR1ST
       BRU     ERR4
ERR6   M1      NOREC,NREC
       M1      BINOP1,0
       MIN     0
       SBRM    SRS
       SBRR    ERREC


*      PRINT RUNTIME ERROR MESSAGE

PSCN   ZRO     LPSCN
       LDA     CTL
       BNE     =4,PSCN3
       MSG     M15
PSCN2  LDA     COLON
       CIO     OUTFIL
       SBRR    PSCN
PSCN3  SKE     =7
       BRU     PSCN5
*      FUNCTION
       MSG     M17
       LDX     CURBLK
       LDA     2,2
       ADD     =VL
       SBRM    PVAR
       BRU     PSCN2
PSCN5  SKG     =4
       BRU     PSCN6
       MSG     M54
       BRU     PSCN2
PSCN6  MSG     M3
       LDA     CURBLK
       SBRM    CPS
       STP     RWBP
PSCN4  GCI     RWBP
    SBRM    RERR
       BE      LINF,PSCN4
       BE      =0,PSCN4
PSCN7  SKG     ='   9'
       SKG     ='   .'-1
       BRU     PSCN2
       CIO     OUTFIL
       GCI     RWBP
       SBRM    RERR
       BRU     PSCN7


DPS    MACRO   D
N:     NARG
       RPT     (X:=1,N:)
$Z.&D(X:) D(X:) 0
       ENDR
       ENDM

       DPS     SUBS,FORLP,DEL,XIT,STK,DUP,SBRM
       DPS     L,LN,LI,S,SSA,OPR,OPR1
       DPS     ENDFOR,FORA,FORAS,FORB,TYPE,DEMND
       DPS     OPR0,TV,TS,BTE,FCN,SSAF,UNSTK,READF
$ZNULL ZRO     0

*      CAL RESERVED WORD TABLE
CR     MACRO   D
N:     NARG
X:     NCHR    D(1)
       ASC     'D(1)'
       IF      X:<4
       DATA    0
       ENDF
       IF      N:=3
$I.&D(2) DATA  D(3).&B+300B
       ELSE
$I.&D(1) DATA D(2).&B+300B
       ENDF
       ENDM

RWT    CR      TYPE,220
       CR      SET,221
       CR      FORM,222
       CR      DELETE,DEL,230
       CR      PAUSE,STOP,226
       CR      STEP,233
       CR      SIN,200
       CR      COS,201
       CR      TAN,202
       CR      RAND,203
       CR      SQRT,204
       CR      LOG,205
       CR      LOG10,206
       CR      EXP,207
       CR      ABS,210
       CR      IP,211
       CR      FP,212

       CR      PART,300
       CR      IN,303
       CR      VALUES,VAL,304
       CR      PAGE,234
       CR      LINE,235
       CR      STEPS,305
       CR      FORMS,306
       CR      SUM,311
       CR      PROD,312
       CR      MAX,307
       CR      MIN,310
       CR      DO,224
       CR      FOR,270
       CR      IF,271
       CR     UNLESS,UNLS,272
       CR      TO,225
       CR      BY,301
       CR      WHILE,273
       CR      GO,227
       CR      ALL,302
       CR      DEMAND,DEM,223
       CR      RUN,257
       CR      CLEAR,254
       CR      LOAD,231
       CR      DUMP,232
       CR      CANCEL,CANCL,236
       CR      DONE,237
       CR      MOD,240
       CR      AND,313
       CR      OR,314
       CR      DEFINE,241
       CR      RETURN,242
       CR      EDIT,243
       CR      UNTIL,274
       CR      NOT,315
       CR      THEN,316
       CR      ELSE,317
       CR      WHERE,275
       CR      OPEN,244
       CR      INPUT,245
       CR      OUTPUT,OUTPT,246
       CR      AS,320
       CR      FILE,321
       CR      CLOSE,247
       CR      FROM,322
       CR      READ,250
       CR      WRITE,251
       CR      ON,323
       CR      PI,324
       CR      MODIFY,252
       CR      QUIT,253
       CR      @DATE,DATE,325
       CR      @TIME,TIME,326
       CR      VERSIO,256
ERWT   NOP     0

$IGE   ZRO     300B+363B
$ILE   ZRO     300B+364B
$IEOS  ZRO     300B+255B

ERWT1  EXT     ERWT+1
ERWT2  EXT     ERWT+2
NLRWT  DATA    RWT-ERWT
LPAR   ASC     '  ('
RPAR   ASC     '  )'
PLUS   ASC     '  +'
MINUS  ASC     '  -'
STAR   ASC     '  *'
SLASH  ASC     '  /'
SEMI   ASC     '  ;'
UPARR  DATA    76B
LBRAK  DATA    73B
RBRAK  DATA    75B
BSLSH  DATA    74B
COMMA  ASC     '  ,'
DOT    ASC     '  .'
LARR   DATA    77B
EQ     ASC     '  ='
GT     DATA    36B
LT     DATA    34B
COLON  DATA    32B
CRCH   DATA    155B
LINF   DATA    152B
$INTMSK DATA   3B6             INTERRUPT MASK: ESCAPE AND MEMORY TRAP
BLKCH  DATA    0
NOREC  ZRO     200
*      JOSS ELEMENT IDENTIFIERS
DV     MACRO   D
N:     NARG
       RPT     (X:=2,2,N:)
$.&D(X:-1) DATA D(X:).&B
       ENDR
       ENDM

*      JOSS SPECIAL CHARACTER TABLE
CE     MACRO   D
N:     NARG
       IF      N:=1
       DATA    D(1)
       ELSE
$I.&D(1) DATA  D(2).&B+300B
       ENDF
       ENDM
SCT    CE      0
       CE      EXCLM,255
       CE      DQ,340
       CE      NE,341
       CE      DOL,342
       CE      -1
       CE      AMPER,343
       CE      -1
       CE      LPAR,344
       CE      RPAR,345
       CE      STAR,346
       CE      PLUS,347
       CE      COMMA,350
       CE      MINUS,351
       CE      -1
       CE      SLASH,352
       CE      CLN,353
       CE      SEMI,255
       CE      LT,354
       CE      EQ,355
       CE      GT,356
       CE      -1
       CE      -1
       CE      LBRAK,357
       CE      BSLSH,255
       CE      RBRAK,360
       CE      UPARR,361
       CE      LARR,362

*      BREAKS  ARE 32 TO 20, AND 73 TO 27 OCTAL, I.E. -12 AND -44


       FRGT    X:,N:

FCNBK  ZRO     300B+177B
FCNBK1 ZRO     300B+212B
COMBK  ZRO     300B+217B
COMBK1 ZRO     300B+257B
MODBK  ZRO     300B+267B
MODBK1 ZRO     300B+275B


       XTRNL   LFORLP,LOPR0,LFORA,LFORAS,LFORB,LENDFO
       XTRNL   LCERRX
       XTRNL   XSKIP,COND13,CHOUT,ERREC,PSCN
       XTRNL   LFCR,CRLF,LINCT,ILD,LRW,INDL,CRWB,COUNT,CHAR
       XTRNL   PEQ,DNOTAB,CBRS36,CBR36A,CONTIN,INIT,SEQA
       XTRNL   IVDMEM,SEQ20,RSTART
       XTRNL   SEQ,SEQ24,SBPE,CCLR,RERR,SCLR,RCLR
       XTRNL   RWT,ERWT,NLRWT,LPAR,RPAR,PLUS,MINUS,STAR,SLASH,SEMI
       XTRNL   UPARR,LBRAK,RBRAK,BSLSH,COMMA
       XTRNL   DOT,LARR,EQ,GT,LT,COLON,CRCH,LINF,INTMSK,BLKCH
       XTRNL   NOREC,SCT,FCNBK,FCNBK1,COMBK,COMBK1,MODBK,MODBK1

L3     EQU     *
       END
XCAL ** FICHE/FRAME BREAK *****
5SCAL
5SCAL  IDENT


       NOLIST  EXT,STAT

XXE    OPD     4600160B,1

LISC   STA     A1
       STB     A2
       LDA     0
       STA     IOLINK
       CXB
       CLA
       LSH     3
       STA     IOFMT
       CLA
       LSH     6
       STA     IOD
       CLA
       LSH     6
       STA     IOW
       CLA
       LSH     9
       SKG     =0
       LDA     =1
       STA     IOFILE
*      IF IOW IS 0 DO FREE FORMAT OUTPUT.
       LDA     IOW
       SKE     =0
       BRU     *+2
       SBRM    RERR
*      CHECK FORMAT TYPE
       LDA     IOFMT
       SKE     =1            1.. INTEGER
       BRU     IOEXP
       BRU     IOINT
*      OUTPUT IN EXPONENTIAL FORM

IOEXP  LDA     A1
       LDB     A2
       SBRM    RLOUT
       LDX     IOD
       BRX     *+1
       SBRM    ROUND
       LDA     IOW
       SUB     IOD
       SKE     =6
       BRU     *+2
       BRU     IOEXDG        NO ROOM FOR SIGN
       SUB     =7
       SKE     =0
       BRU     *+2
       BRU     *+6
       CNA
       CAX
       CLA
       WCI*    IOLINK        RIGHT JUSTIFY OUTPUT
       BRX     *-1
       LDA     NOUT
       WCI*    IOLINK        OUTPUT SIGN
IOEXDG LDA     NOUT1
       WCI*    IOLINK        OUTPUT FIRST DIGIT
       LDA     =16B
       WCI*    IOLINK        DECIMAL POINT OUT

*      OUTPUT FRACTION PART
       LDX     =-10
       SKR     IOD
       BRU     *+2
       BRU     *+4
       LDA     NOUT12,2
       WCI*    IOLINK
       BRX     *-5

*      OUTPUT EXPONENT
       LDA     =45B
       WCI*    IOLINK
       LDX     =-3
       LDA     NOUT15,2
       WCI*    IOLINK
       BRX     *-2
       BRR     IOLINK


IOINT  LDA     A1
       CLB
       STB     NOUT
       SKN     A1
       BRU     *+4
       CNA
       LDB     =15B
       STB     NOUT

       LDX     =7
       STX     A2

       SKR     A2
       BRU     *+2
       BRU     *+9
       LRSH    23
       DIV     =10
       XAB
       ADD     =20B
       STA     NOUT,2
       BAC
       LDX     A2
       BRU     *-10

       LDA     IOW
       LDX     =-7
       LDA     =20B

       SKE     NOUT8,2
       BRU     *+3
       BRX     *-2
       LDX     =-1

       LDA     NOUT
       STA     NOUT7,2
       CXA
       SUB     =1
       CAX
       ADM     IOW
       SKN     IOW
       BRU     *+2
       BRU     IONSTR
       CLA
       SKR     IOW
       BRU     *+2
       BRU     *+3
       WCI*    IOLINK
       BRU     *-4

IONTGO LDA     NOUT8,2
       WCI*    IOLINK
       BRX     *-2
       BRR     IOLINK

IONSTR CXA
       SUB     IOW
       CAX
       SKN     A1
       BRU     IONTGO
       LDA     NOUT
       WCI*    IOLINK
       BRX     IONTGO
       SBRM    RERR







LSIC   LDA     0
       STA     SDCZRO
       LDP*    SDCZRO
       STP     RLIO1
       LDA     =12B
       STA     KLUGE
       CLA
       CLB
       STA     RLIO3
       STA     RLIO2
       STA     RLIO5
       STA     A1
       STA     A2
       LDA     =-1
       STA     RLIO4
       STA     RLIO7

RLI16  GCI     RLIO1
       BRU     RLI18
       SKE     =0
       BRU     *+2
       BRU     RLI16
       SKE     =13B
       BRU     *+2
       BRU     RLI1
       SKE     =15B
       BRU     *+2
       BRU     RLI5

RLI3   SKE     =16B
       BRU     *+2
       BRU     RLI2
       SKE     =45B
       BRU     *+2
       BRU     RLI6
       SKG     =31B
       SKG     =17B
       BRU     RLI18
       SKR     KLUGE
       BRU     *+2
       SKR     RLIO2         THIS WILL ALWAYS SKIP
       SBRM    RLITEN
       GCI     RLIO1
       BRU     RLI18
       BRU     RLI3
RLI5   CLA
       STA     RLIO4
RLI1   GCI     RLIO1
       BRU     RLI18
       BRU     RLI3

RLI2   GCI     RLIO1
       BRU     RLI7
       SKE     =45B
       BRU     *+2
       BRU     RLI6
       SKG     =31B
       SKG     =17B
       BRU     RLI7
       SKR     KLUGE
       SBRM    RLITEN
       SKN     KLUGE
       MIN     RLIO2
       BRU     RLI2

RLI6   GCI     RLIO1
       BRU     RLI7
       SKE     =13B
       BRU     *+2
       BRU     RLI9
       SKE     =15B
       BRU     *+2
       BRU     RLI8
RLI10  SKG     =31B
       SKG     =17B
       BRU     RLI7
       SUB     =20B
       XMA     RLIO5
       MUL     =10
       LSH     23
       ADM     RLIO5
       GCI     RLIO1
       BRU     RLI7
       BRU     RLI10
RLI8   CLA
       STA     RLIO7
RLI9   GCI     RLIO1
       BRU     RLI7
       BRU     RLI10

RLI7   STA     A3
       LDA     RLIO5
       SKN     RLIO7
       CNA
       SUB     RLIO2
       SKE     =113B
       BRU     *+2
       BRU     RLIOFL
       SKG     =-114B
       BRU     RLIVFL
       STA     RLIO5
       LDA     A1
       LDB     A2
       LSH     9
       LDX     =39
       NOD     48
       SKE     =0
       BRU     *+2
       BRU     RLI17
       STX     RLIO6
       STA     A1
       STB     A2
       LDA     =7
       STA     RLIO2
       SKN     RLIO5
       BRU     *+2
       BRU     RLI11
       LDA     =RLIO8
       STA     RLIO3

RLI12  SKR     RLIO2
       BRU     RLI15
       LDA     A1
       LDB     A2
       RSH     1
       XAB
       ADD     =200B
       XAB
       ADC     =0
       LDX     RLIO6
       NOD     48
       LDE
       SKN     RLIO4
       FNA
RLI17  LDX     A3
       MIN     SDCZRO
       BRR     SDCZRO

RLI11  LDA     RLIO5
       CNA
       STA     RLIO5
       LDA     =RLIO9
       STA     RLIO3
       BRU     RLI12

RLI15  LDA     RLIO5
       SKA     =1
       BRU     RLI13
RLI14  LRSH    1
       STA     RLIO5
       LDA     =3
       ADM     RLIO3
       BRU     RLI12
RLI13  LDA     A1
       LDB     A2
       EAX*    RLIO3
       SBRM    DPMRIO
       STA     A1
       STB     A2
       STX     RLIO6
       LDA     RLIO5
       BRU     RLI14

RLIOFL CLA
       SKN     RLIO4
       LDA     =-1
       RSH     49
       EOR     =40000000B
       EAX     375B
       LDE
       BRR     *+1
       ZRO     RLI17-1,4
RLIVFL CLAB
       BRU     RLI17

*      NUMBER ENTERED AS INTEGER
RLI18  CAX     TERMINAL      CHAR TO X
       ROV     RESET         OVERFLOW
       LDP     A1            GET NUMBER
       LSH     24            POSITION INTEGER IN A
       OVT     TOO           BIG?
       BRU     INTX          NUMBER > 2^24
       SKN     RLIO4
       CNA
       BRR     SDCZRO
INTX   CXA     TREAT         NUMBER AS IF
       BRU     RLI7          A DOT WAS TYPED
*      
RLIO8  DATA 24000000B,00000000B,0004B,31000000B,00000000B,0007B
       DATA    23420000B,00000000B,0016B,27657020B,00000000B,0033B
       DATA    21606744B,67701000B,0066B,23561326B,65012660B,0153B
       DATA    30236017B,51177720B,0325B
RLIO9  DATA    31463146B,31463146B,-003B,24365605B,07534110B,-006B
       DATA    32155613B,53070344B,-015B,25363073B,42140752B,-032B
       DATA    34645312B,27660524B,-065B,31754217B,25520440B,-152B
       DATA    25037765B,04750062B,-324B


RLITEN ZRO     LINK1         ENTER NEXT CHAR. IN NUMBER
       SUB     =20B
       STA     RLIO6         STORE CHAR VALUE
       LDA     A1
       LDB     A2
       LSH     2
       XAB
       ADD     A2
       XAB
       ADC     A1
       LSH     1
       XAB
       ADD     RLIO6         ADD IN CHAR
       XAB
       ADC     =0
       STA     A1
       STB     A2
       SBRR    RLITEN



RLOUT  ZRO     LINK2
*      NUMBER IS IN AB.
*      
* SET ALL STANDARD CONDITIONS..
*      ASSUME N .GE. +1.  B EXP GOES TO XR.
       STA     A1
       STB     A2
       STX     XRSAVE
       LDA     =RLIO9
       STA     NCONV
       LDA     =-1
       STA     IODEXP
       STA     DEXP
       CLA
       STA     SIGN
       LDA     A1
       LDB     A2
       SKE     =0
       BRU     NONZRO
       LDB     =13B          '+'
       STB     SIGN
       CLB
       STB     DEXP
       STB     NOUT
       LDX     =-11
       BRU     OUTLOP
*      IS N NEGITIVE$$
NONZRO SKA     =40000000B
       BRU     NISNEG
NNEGRT STE
       NOD     48
       XMA     SIGN
       STA     NOUT
       LDA     =13B          '+'
       XMA     SIGN
*      IS B EXP NEG
       XXA
       SKG     =0
       BRU     EISNEG        EXP IS NEG
ENEGRT XXA
*      ALL REGESTERS + CONSTANTS ARE NOW SET.
*      NUMBER IS IN ABX AND IS .GE. +1.
ADJUST XXA
       LSH     3
       RSH     3
       SKG     =0            DONE IF ( 0 .GE. B. EXP. .GT. -4 )
       SKG     =-4
       BRU     ADJST9
       SKN     IODEXP        WAS ORIGINAL NUMBER < 0
       SKE     RLIO9+2       AND IS EXPONENT = -3
       BRU     CNVDON        NO, NUMBER IS ADJUSTED TO RANGE [.1,1)
*      CHECK IF NUMBER IN RANGE [.0625,.1) OR [.5/(2^-3),.1)
       XXA
       SKG     RLIO9         COMPARE WITH .1
       BRU     ADJST2        MAY BE <.1
ADJST1 XXA
       BRU     CNVDON        DEFINITELY >=.1
ADJST2 SKE     RLIO9
       BRU     ADJST3        NEEDS TO BE ADJUST AGAIN
       XAB
       SKG     RLIO9+1
       BRU     ADJST4
       COPY    AB,BX,XA      JUST SLIGHTLY GREATER THAN .1
       BRU     CNVDON
ADJST4 COPY    AB,BX,XA
ADJST9 XXA
ADJST3 STX     RLIO6
       LDX     NCONV
       SBRM    DPMRIO
       MIN     DEXP
       BRU     ADJUST
*      0 .GE. B EXP .GT. -4, D EXP IS CORRECT.
*      SET B EXP =0
CNVDON CNA
       XXA
       LRSH    1,2
       LDX     =-11
*      ALL SET TO OUTPUT NUMBER.
OUTLOP STA     A1
       STB     A2
       LRSH    2

       XAB
       ADD     A2
       XAB
       ADC     A1
       STA     A1
       STB     A2
       LRSH    19
       ADD     =20B
       STA     NOUT12,2
       LDA     A1
       LDB     A2
       ETR     =1777777B
       LSH     3
       BRX     OUTLOP
EXPOUT LDA     SIGN
       STA     NOUT12
       LDA     DEXP
       CAB
       SKN     IODEXP
       CNA
       STA     IODEXP
       CLA
       LSH     1
       DIV     =10
       XAB
       ADD     =20B
       STA     NOUT14
       LSH     1
       CLA
       DIV     =10
       XAB
       ADD     =20B
       STA     NOUT13
       LDX     XRSAVE
       SBRR    RLOUT
*      NUMBER IS IN 15 WORD ARRAY CALLED NOUT, EACH WORD IS 1 CHAR.

NISNEG FNA
       LDX     =15B
       STX     SIGN
       BRU     NNEGRT
EISNEG STA     A1
       LDA     =15B
       STA     SIGN
       LDA     =RLIO8
       STA     NCONV
       LDA     =1
       STA     DEXP
       STA     IODEXP
       LDA     A1
       BRU     ENEGRT





DPMRIO ZRO     LINK1
*      THIS IS A MULTIPLY ROUTINE FOR 48 BIT MANTISSIAS  WITH THE EXP IN A 3RD WORD.
*      THE MLTIER IS IN AB WITH THE EXP IN 'RLIO6'
*      THE MLTCND IS IN 3 WORDS POINTED TO BY THE XR.
*      RETURNS PRODUCT IN ABX.
       STA     RLIO7
       BAC
       RCY     2
       MUL     0,2
       STA     RLIO1
       LDA     1,2
       LRSH    2
       MUL     RLIO7
       ADD     RLIO1
       MUL     =2
       STB     RLIO1
       XMA     RLIO7
       MUL     0,2
       XAB
       ADD     RLIO1
       XAB
       ADC     RLIO7
       STA     A1
       LDA     2,2
       ADD     RLIO6
       CAX
       LDA     A1
       NOD     48
       SBRR    DPMRIO


CHRSET ZRO     LINK1
       STA     IOPLUS
       LDA     =16B
       STA     PERIOD
       LDA     =45B
       STA     EEE
       LDA     =15B
       STA     MOMINS
       LDA     =13B
       XMA     IOPLUS
       SBRR    CHRSET


CHRCHK ZRO     LINK1
       SKG     =31B
       SKG     =17B
       BRU     *+2
       BRU     DIGIT
       BE      PERIOD,CHRPNT
       BE      EEE,CHRE
       BE      IOPLUS,DIGIT
       BE      MOMINS,DIGIT
       BE      =135B,MLTBLK
       SBRR    CHRCHK

CHRRTN MIN*    CHRCHK
       SBRR    CHRCHK

DIGIT  LDB     =-1
       STB     IOPLUS
       STB     MOMINS
       BRU     CHRRTN

CHRPNT LDB     =-1
       STB     PERIOD
       BRU     CHRRTN

CHRE   STA     IOPLUS
       LDA     =-1
       STA     EEE
       LDA     =15B
       STA     MOMINS
       LDA     =13B
       XMA     IOPLUS
       BRU     CHRRTN



MLTBLK CIO     IOFILE
       CLA
       SBRR    CHRCHK

ROUND  ZRO     LINK1         ROUND NOUT TO # OF PLACES IN XR.

       STA     RNDSAV
       CXA
       SKG     =10
       BRU     *+7
       LDA     NOUT11
       SKE     =31B
       BRU     *+2
       BRU     RNDEND

       LDX     =11
       BRU     RNDADD-1
       LDA     NOUT1,2
       SKG     =24B
       BRU     RNDEND
       STX     RNDSKR
RNDADD SKR     RNDSKR
       BRU     *+2
       BRU     RNDOFL
       LDA     NOUT,2
       ADD     =1
       SKG     =31B
       BRU     RNDDON
       LDA     =20B
       STA     NOUT,2
       LDX     RNDSKR
       BRU     RNDADD

RNDDON STA     NOUT,2
RNDEND LDA     RNDSAV
       SBRR    ROUND




RNDOFL LDA     =21B
       STA     NOUT1
       MIN     IODEXP
       LDX     =14
       LDA     NOUT12
       SKE     =13B
       BRU     RNDMIN
       LDA     NOUT14
       ADD     =1
       SKG     =31B
       BRU     RNDDON
       LDA     =20B
       STA     NOUT14
       MIN     NOUT13
       BRU     RNDEND


RNDMIN LDA     NOUT14
       SKE     =0
       BRU     RNDMN1
       LDA     =31B
       STA     NOUT14
       LDA     =-1
       ADM     NOUT13
       BRU     RNDEND
RNDMN1 LDA     =-1
       ADM     NOUT14
       BRU     RNDEND


IOIN   ZRO     LIOIN         PUT FROM FILE
       STX     XRSAVE
       LDA     IOIN
       STA     TRAPLC
       LDA     =IOSTNG
       MUL     =3
       LSH     23
       SUB     =1
       STA     IOPTR
       STA     IOPTR1

       LDB     XRSAVE
       CLA
       LSH     3
       STA     IOFMT
       CLA
       LSH     6
       STA     IOD
       CLA
       LSH     6
       STA     IOW
       CLA
       LSH     9
       STA     IOFILE


       SBRM    CHRSET

*      INPUT IS FREE FORMAT. SKIP OVER ALL INITIAL CHARS NOT
*      NUMERIC OR + OR -
IOIN1B CIO     IOFILE
       SKG     =31B
       SKG     =17B
       BRU     *+2
       BRU     IOIN1A
       SKE     ='   +'
       BRU     *+2
       BRU     IOIN1A
       SKE     ='   -'
       BRU     *+2
       BRU     IOIN1A
       SKE     =137B
       BRU     IOIN1C
       EAX     24
       SBRM    ERR
IOIN1C SKE     ='   .'
       BRU     IOIN1D
       BRU     IOIN1A
IOIN1D SKE     =135B
       BRU     IOIN1E
       CIO     IOFILE
       BRU     IOIN1B
IOIN1E SKE     =7
       BRU     IOIN1B
       SBRM    CRWB
       LDX     =37771B
IOIN6  CIO     IOFILE
       BE      CRCH,IOIN8
       BE      =7,IOIN7
       BE      =161B,IOIN8
       BRX     IOIN6
       WCI     RWBP
       BRU     IOIN6
IOIN7  CLA
IOIN8  STA     IOFILE
       SBRM    STTOCD
       BRU     IOIN5

IOIN3  CIO     IOFILE
IOIN1A SBRM    CHRCHK
       BRU     IOIN4
       WCI     IOPTR
       BRU     IOIN3


IOIN4  STA     IOFILE
       WCI     IOPTR
       SIC     IOPTR
       BRU     *+2
IOIN5  MIN*    IOIN
       LDX     IOFILE
       SBRR    IOIN

*      STRING ROUTINES

IOSTG  ZRO     LINK2
       STX     IOW
       SBRM    CDTOST
       STP     A1
       LDA     IOW
       SKG     =0
       CXA
       STA     IOW
       STX     IOD
       SUB     IOD
       STA     IOFMT
       LDB     IOD
       SKA     =4B7
       LDB     IOW
       STB     IOW
       LDP     A1
       RCY     16
IOSTG1 STP     A1
       SKR     IOW
       BRU     *+2
       BRU     IOSTG2
       ETR     =377B
       CIO     OUTFIL
       LDP     A1
       LCY     8
       BRU     IOSTG1
IOSTG2 CLA
       SKR     IOFMT
       BRU     *+2
       SBRR    IOSTG
       CIO     OUTFIL
       BRU     IOSTG2+1

STTOCD ZRO     LINK1
       LDA     RWBP1
       SUB     RWBP
       SKG     =5
       BRU     STCD1
       LDP     RWB
       ETR     =@6B7
       SKE     =0
       SBRR    STTOCD
       XAB
       SKG     =0
       LDA     =136B
       XAB
       SBRR    STTOCD
STCD1  MRG     =370B
       SKG     =375B
       ADM     RWB1
       LDP     RWB
       ETR     =@6B7
       SBRR    STTOCD

CDTOST ZRO     LINK1
       STB     A2
       XAB
       SKE     =136B
       BRU     CDST1
       CLA
       LDX     =6
       SBRR    CDTOST
CDST1  ETR     =377B
       SKG     =200B
       LDA     =6
       SKA     =200B
       ETR     =7
       COPY    AX,BA
       LDB     A2
       SBRR    CDTOST

SKPNST ZRO     LINK1
       SKA     =6B7
       BRU     SKPNT1
       SKE     =0
       SBRR    SKPNST
       XAB
       SKE     =0
       BRU     *+3
       XAB
       BRU     SKPNT1
       XAB
       SBRR    SKPNST
SKPNT1 MIN*    SKPNST
       SBRR    SKPNST




LDPM   STX     TX
       EAX*    0
       STA     AH
       BAC
       RCY     2
       MUL     0,2
       STA     R
       LDA     1,2
       LRSH    2
       MUL     AH
       ADD     R
       MUL     =2
       STB     R
       XMA     AH
       MUL     0,2
       XAB
       ADD     R
       XAB
       ADC     AH
       ROV
       LDX     TX
       SKG     =-1
       SKB     =37777777B
       BRR     0
       BRR     *+1
       ZRO     *-3,4
DPA    MACRO   D
       XAB
       ADD     D(2)
       XAB
       ADC     D(1)
       ENDM
DPS    MACRO   D
       XAB
DPSNRG NARG
       IF      DPSNRG-1
       SUB     D(1)+1,D(2)
       ELSF    1
       SUB     D(1)+1
       ENDF
       XAB
       IF      DPSNRG-1
       SUC     D(1),D(2)
       ELSF    1
       SUC     D(1)
       ENDF
       ENDM
LGF    ZRO     LINK1
       STX     LGFX
       SKG     =0
       SBRR    LGF
       STP     LGFARG
       RND
       SKE     =20000000B
       BRU     LGF0
       XAB
       SKE     =1
       BRU     LGF0
       MIN*    LGF
       CLAB
       SBRR    LGF
LGF0   LDP     LGFARG
       STE
       STP     LGFARG
       RCH     202B
       EAX     22
       NOD     22
       STA     LGFCHR
       STX     LGFSFT
       CLAB
       STP     LGFSUM
       LDA     LGFARG
       LDA     LGFARG
LGF1   SKG     =37453004B
       SKA     =40000000B
       BRU     LGF2
       CLB
       LCY     5
       CBX
       LDX     LGF7-8,2
       LDP     LGFSUM
       DPS     2,2
       STP     LGFSUM
       LDP     LGFARG
       DPM     0,2
       LCY     1
       STP     LGFARG
       BRU     LGF1
LGF2   EOR     =40000000B
       STA     LGFARG
       LDB     LGFAR1
       DPM     C4
       DPA     C3,C3+1
       DPM     LGFARG
       RSH     1
       DPA     C2,C2+1
       DPM     LGFARG
       RSH     1
       DPS     C4
       DPM     LGFARG
       DPA     LGFSUM,LGFSM1
       LDX     LGFSFT
       RSH     0,2
       ADD     LGFCHR
       OVT
       BRU     LGF5
LGF3   NOD     48
       BRX     *+1
       STX     LGFARG
       LDX     LGFX
       XXA
       SKE     =0
       BRU     LGF6
       XXA
       LDX     LGFARG
LGF4   LDE
       MIN*    LGF
       SBRR    LGF
LGF5   RSH     1
       EOR     =40000000B
       BRX     LGF3
       BRU     LGF3
LGF6   XXA
       DPM*    LGF8-1,2
       LDX     LGFARG
       NOD     2
       BRU     LGF4
LGF7   DATA    LGFA1,LGFA2,LGFA3,A4,A5,A6,A7,A8
LGF8   DATA    BASEE,BASE10
C4     DATA    50725342B,32650744B
C2     EQU     C4
C3     DATA    36616047B,34164004B
LGFA1  DATA    34631463B,14631460B,15442624B,64227550B
LGFA2  DATA    31727024B,36560500B,13105451B,50460636B
LGFA3  DATA    27412172B,70243650B,10711175B,73022367B
A4     DATA    25463146B,31463140B,06732633B,27727700B
A5     DATA    23656050B,75341214B,04756234B,63625225B
A6     DATA    22314631B,46314624B,03163621B,55357523B
A7     DATA    21217270B,24365600B,01615443B,04761244B
A8     DATA    20324773B,71666206B,00457266B,11113304B
BASEE  DATA    26134413B,76764324B
BASE10 DATA    11504046B,50237361B
EXP    BSS     0
EXF    ZRO     LINK1
       STX     EXFX
       STE
       STX     EXFE
       LDX     EXFX
       XXA
       SKE     =0
       BRU     EXF8
       LDA     EXFE
EXF1   SKG     =-1
       BRU     EXF9
       XXA
       STP     EXFARG
       MUL     =1
       LSH     0,2
       STA     EXFS
       LDP     EXFARG
       LSH     0,2
       ROV
       ETR     =37777777B
       STB     EXFAR1
EXF2   STA     EXFARG
       LDA     =20000000B
       CLB
       STP     EXFR
       LDA     =16
       STA     EXFCNT
       LDX     =40001B
       LDP     EXFARG
EXF3   SKG     EXFTBL-1,2
       BRU     EXF4
       XAB
       SUB     EXFTBL+16,2
       XAB
       SUC     EXFTBL-1,2
       STP     EXFARG
       LDP     EXFR
       RSH     0,2
       DPA     EXFR,EXFR1
       STP     EXFR
       LDP     EXFARG
EXF4   SKR     EXFCNT
       BRX     EXF3
       DPM     C1
       ADD     =20000000B
       DPM     EXFR
       XMA     EXFS
       ADD     =2
       CAX
       LDA     EXFS
       NOD     2
       XXA
       SKG     =255
       SKG     =-257
       BRU     EXF6
       XXA
       MIN*    EXF
       LDE
EXF5   LDX     EXFX
       SBRR    EXF
EXF6   SKA     =40000000B
       BRU     EXF7
       LDA     =37777777B
       LDB     =-257
       BRU     EXF5
EXF7   CLAB
       BRU     EXF5
EXF8   XXA
       DPM*    EXFLST-1,2
       XMA     EXFE
       ADD     =2
       LDX     EXFE
       BRU     EXF1
EXF9   CNA
       XXA
       RSH     0,2
       STB     EXFAR1
       CLB
       SKA     =40000000B
       LDB     =-1
       STB     EXFS
       ETR     =37777777B
       BRU     EXF2
EXFLST DATA    LOGE,LOG10
C1     DATA    13056205B,77374536B
LOGE   DATA    13425216B,62453374B
LOG10  DATA    32446474B,11363150B
EXFTBL DATA    22560015B,12232360B,5340032B,2630773B,1327264B
       DATA    556362B,267745B,134116B,56076B,27044B,13423B,5612B
       DATA    2705B,1342B,561B,270B,134B
       DATA    07176750B,45715062B,16375721B,37262205B
       DATA    67261667B,64134120B,02667347B,10666317B
       DATA    03776033B,62467170B,65427550B,21660521B
       DATA    16542177B,50623543B,24602400B,52357324B
       DATA    25203177B

CLE    OPD     4600102B,1

COSFCN ZRO     LINK2
       SBRM    SC15
       SKD     =-1
       BRU     SC1
       CLE
       RSH     0,2
       BRU     SC2
SC1    CLE
       LSH     0,2
SC2    ADD     =20000000B
       LDX     =-1
       LDE
       BRU     SC2A
SINFCN ZRO     LINK2
       SBRM    SC15
       RCH     120B
SC2A   STX     SCEXP
       SKD     =-1
       BRU     SC4
       CLE
       XMA     SCEXP
       ADD     =3
       XMA     SCEXP
       STP     SCARG
       RSH     0,2
SC3    STA     SCA
       RCH     22B
       LCY     3
       XXB
       LDA     SCA
       BRU*    SCTBL,2
SC4    CLE
       LSH     0,2
       STP     SCARG
       LDX     =2
       STX     SCEXP
       BRU     SC3
SCTBL  DATA    SC9,SC10,SC10,SC5,SC5,SC6,SC6,SC9
SC5    XAB
       EOR     =-1
       ADD     =1
       XAB
       EOR     =37777777B
       ADC     =0
       BRU     SC9A
SC6    ADD     =20000000B
       SBRM    SC13
       XAB
       CNA
       XAB
       SKB     =-1
       ADD     =1
       CNA
SC7    LDX     =1
SC8    NOD     2
       LDE
SC20   STE
       NOD     48
       LDE
       SKE     =0
       SBRR    SINFCN
       CLEAR
       SBRR    SINFCN
SC9    LDP     SCARG
SC9A   LDX     SCEXP
       NOD     24
       XXA
       SKG     =0
       BRU     SC11
       LDP     SCANS
       BRU     SC20
SC10   SUB     =20000000B
       SBRM    SC13
       BRU     SC7
SC11   XXA
       STP     SCARG
       STX     SCEXP
       CXA
       ADD     SCEXP
       CNA
       CAX
       LDA     SCARG
       ROV
       DPM     SCARG
       OVT
       BRU     SC14
SC12   STP     SCARG2
       DPM     SCC9
       RSH     0,2
       DPA     SCC7,SCC7+1
       DPM     SCARG2
       RSH     0,2
       DPA     SCC5,SCC5+1
       DPM     SCARG2
       RSH     0,2
       DPA     SCC3,SCC3+1
       DPM     SCARG2
       RSH     0,2
       DPA     SCC1,SCC1+1
       DPM     SCARG
       LDX     SCEXP
       BRU     SC8
SC13   ZRO     LINK1
       LSH     1
       STP     SCARG
       DPM     SCARG
       STP     SCARG2
       DPM     SCC10
       DPA     SCC8,SCC8+1
       DPM     SCARG2
       DPA     SCC6,SCC6+1
       DPM     SCARG2
       DPA     SCC4,SCC4+1
       DPM     SCARG2
       DPA     SCC2,SCC2+1
       DPM     SCARG2
       DPA     SCC0,SCC0+1
       SBRR    SC13
SC14   LDA     =37777777B
       LDB     =-1
       BRU     SC12
SC15   ZRO     LINK1
       XXA
       SKE     =0
       BRU     *+3
       XXA
       SBRR    SC15
       SKE     =2
       CLA
       XXA
       FMP     SCFACT,2
       SBRR    SC15
SCANS  DATA    26501171B,46376000B
SCFACT DATA    24276301B,55623776B,26602660B,26604770B
SCC0   DATA    17777777B,77777656B
SCC1   DATA    31103755B,24203170B
SCC2   DATA    54205414B,66205516B
SCC3   DATA    75325041B,43335126B
SCC4   DATA    04036037B,01644414B
SCC5   DATA    00050632B,73217644B
SCC6   DATA    77525054B,21370073B
SCC7   DATA    77777315B,15675341B
SCC8   DATA    00007417B,17301301B
SCC9   DATA    2B,45521115B
SCC10  DATA    77777627B,61565705B


       XTRNL   LSIC,LISC,LDPM
       XTRNL   IOIN,IOSTG,STTOCD,CDTOST,SKPNST
       XTRNL   LGF,EXP,EXF,COSFCN,SINFCN

L5     EQU     *
       END
XCAL ** FICHE/FRAME BREAK *****
CA
NARP
CALMAC
CON
1SCAL
1B


CON
2SCAL
2B


CON
3SCAL
3B


CON
4SCAL
4B


CON
5SCAL
5B


CON
ESCAL
EB


CON
MMCAL
MB


EDIT
R MMCAL
:SCAL:M
1
W //

Q
NARP
CALMAC
CON
//
MBX


DEL //
COM TEL
XCAL ** FICHE/FRAME BREAK *****
CALMAC
CALMAC IDENT

ENVAR  EQU     139           NUMBER OF VARIABLE NAMES ALLOWED
NFILES EQU     4               NUMBER OF FILES WHICH CAN BE OPENED


SBRM   MACRO   D
       BRM*    D(1)
       ENDM

XTRNL  MACRO   D
N:     NARG
       RPT     (X:=1,N:)
D(X:)  EXT
       ENDR
       ENDM

MSG3   MACRO   D
       DATA    D(1)*200000B+D(2)*400B+D(3)
       ENDM

MSG    MACRO   D
       EAX     D(1)
       SBRM    TMSG
       ENDM

ERROR  MACRO   D
       EAX     D(1)
       CLA
       SBRM    ERR
       ENDM

VERR   MACRO   D
       EAX     D(1)
       SBRM    ERR
       ENDM

SKNE   MACRO   D
       SKE     D(1)
       BRU     *+2
       ENDM

BE     MACRO   D
       SKE     D(1)
       BRU     *+2
       BRU     D(2)
       ENDM

BNE    MACRO   D
       SKE     D(1)
       BRU     D(2)
       ENDM

GCIB   MACRO   D
       GCI     D(1)
       BRU     D(2)
       ENDM

M1     MACRO   D
       IF      'D(1$1,4)'='=0'
       CLA
       ELSE
       LDA     D(1)
       ENDF
       STA     D(2)
       ENDM

CALL   MACRO   D
N:     NARG
       IF      N:>3
       LDX     D(4)
       ENDF
       IF      N:>2
       LDB     D(3)
       ENDF
       IF      N:>1
       LDA     D(2)
       ENDF
       SBRM    D(1)
       ENDM

ROP    MACRO   D
N:     NARG
       RPT     (X:=2,N:)
       D(1)    D(X:)
       ENDR
       ENDM

INITDL MACRO   D
       SBRM    INDL
       ENDM

INITSL MACRO   D
       SBRM    INSL
       ENDM

RBT    MACRO   D
       RSF     D(1)
       MLBRU   D(2)
       ENDM

RBF    MACRO   D
       RST     D(1)
       MLBRU   D(2)
       ENDM

CBF    MACRO   D
       CST     D(1)
       MLBRU   D(2)
       ENDM

CBT    MACRO   D
       CSF     D(1)
       MLBRU   D(2)
       ENDM

CERR   MACRO   D
       CERRX   CEM.&D(1)
       ENDM

COMPL  MACRO   D
N:     NARG
       LDA     Z.&D(1)
       IF      N:>1
       MRG     D(2)
       ENDF
       IACD    CL
       ENDM

MLBRU  MACRO   D
N:     NARG
       IF      N:>1
       CERR    D(2)
       ELSE
       BRU     D(1)
       ENDF
       ENDM

STRING MACRO   D
       DATA    3**+5,3**+D(2)+2
       ASC     'D(1)'
       ENDM

CBE    MACRO   D
N:     NARG
       RPT     (X:=2,2,N:)
       SKE     =.&D(X:-1)
       BRU     *+2
       BRU     D(X:)
       ENDR
       ENDM

POPS   MACRO   D
       D(1)    L,LSA,S,SSA,OPR,OPR1,FORLP,ENDFOR,FORA,FORAS,DUP
       D(1)    TYPE,LN,LI,XIT,SUBS,SSAF,DEL,DEMND,FCN,FORB,TV
       D(1)    OPR0,TS,BTE,READF
       D(1)    SIC,ISC,(COMPAR,1),CLL,DPM,(RND,1),IACD,LVDI,DCED,DLD
       D(1)    STK,UNSTK,RST,RSF,RX,CST,CSF,CERRX
       ENDM

DPOPS  MACRO   D
N:     NARG
       RPT     (X:=1,N:)
       DPOPS:  D(X:)
P:     EQU     P:+1
       ENDR
       ENDM

DPOPS: MACRO   D
N1:    NARG
       IF      N1:=1
D(1)   OPD     P:*1B5,2
       ELSE
D(1)   OPD     P:*1B5,D(2)
       ENDF
       ENDM

TPOPS  MACRO   D
N:     NARG
       RPT     (X:=1,N:)
       TPOPS:  D(X:)
       ENDR
       ENDM

TPOPS: MACRO   D
       BRU     L.&D(1)
       ENDM

P:     EQU     100B

       POPS    DPOPS

FIX    MACRO
       BRS     50
       ENDM

FLOAT  MACRO
       BRS     51
       ENDM

FNA    MACRO
       BRS     21
       ENDM

       FRGT    X:,N:,N1:,P:


       FREEZE

       END
XCAL ** FICHE/FRAME BREAK *****
CL
RES
XDDT
;T4B
14000;TEB
20000;T1B
;T2B
;T3B
;T5B
;TMB
;U%R%QSAVE 14000,37777,DCAL

20000
DUM DDCAL

RES
XDDT
;T4B
14000;TEB
20000;T1B
;T2B
;T3B
;T5B
;TMBX
;U%R%QSAVE 14000,37777,XCAL

20000
DUM DXCAL

RES
COM TEL
XCAL ** FICHE/FRAME BREAK *****
ESCAL
ESCAL  IDENT   ERROR         MESSAGES AND INITIALIZATION

       NOLIST  EXT,STAT



*      INITIALIZATION

$START BSS     0
       STA     CIF
       STA     INFIL
       LDA     =-1
       STA     XEQFLG
       STA     PANFLG
       STA     OUTFIL
       STA     EVL
       STA     DISINT
       M1      =0,ESCPND
       M1      =1,CASE
       STA     PAGENO
       M1      =100,LINCNT
       LDX     =CBLNK
       LDA     BRRWRD
       STA     EBLNK1,2
       ADD     =2
       EAX     1,2
       BRX     *-3
       SBRM    IVDMEM
       SBRM    INTMEM
       M1      NOREC,NREC
       INITDL
       STX     STACK
       STX     TSTACK
       INITDL
       STX     CSTK
       INITDL
       STX     FCNSTK
       INITDL
       STX     NL
       INITDL
       STX     RPL
       INITDL
       STX     PL
       STX     CL
       STX     BPL
       MSG     M6
       LDA     =HBUF
       MUL     =3
       LSH     23
       STA     SIP
       STA     SIP1
       SBRM    RDL
       LDP     IP
       STP     HEAD
       SKR     HEAD1
       LDA     =SBUF
       MUL     =3
       LSH     23
       SUB     =1
       STA     SIP
       STA     SIP1
       LDA     =TBUF
       MUL     =3
       LSH     23
       STA     BTBUF
       M1      =-1,LINCNT
       BRU     INIT
BRRWRD BRR*    SBLNK



*      READ A LINE
$XRDL  CLB
       LDA     CMPCTL
       SKG     =0
       LDB     =-1
       STB     SEMSEM
       CLA
       SKN     SEMSEM
       LDA     =1
       LDX     =-1
       BRS     12
       CIO     INFIL
       CAB
       LDA     =2
       SKN     SEMSEM
       LDA     =1
       STA     ECHO
       BRS     12
       CBX
       M1      =2,CASE
       LDB     SEMJ
       STB     SERI
       LDB     SETS1
       STB     BINOP1
       STB     BINOP2
       SKR     BINOP1
       GCI     BINOP1
       SBRM    RERR
       SKE     =155B
       BRU     *+2
       SKR     SETS1
       CXA
       BRU     SEMJ+1


*      LINE EDITOR
SEMJJ  LDA     =155B
       BRU     SEMJ-1
       LDA     =147B
       SBRM    OPC
SEMJ   CIO     INFIL         READ CHAR FROM IF
       SKG     =77B          TEST IF TEXT
       BRU     SEMCH

       LDX     =CTRL-ECTRL
       LDB     =77B
       LSH     15
       SKM     ECTRL,2
       BRX     *-1
       CXA
       SKA     =40000B
       BRU*    ECTRL,2
       BRU     SEMJ

D:     MACRO   D
N:     NARG
       RPT     (X:=2,2,N:)
       DATA    D(X:-1).&B5+SEM.&D(X:)
       ENDR
       ENDM

CTRL   D:      41,A,43,C,44,D,45,E,46,F,51,TAB,52,LF,55,CR,61,Q
       D:      62,R,63,S,64,T,66,V,67,W,70,X,71,Y,72,Z
ECTRL  EQU     *



*      SUBROUTINES

NACS   ZRO     LINK1         COUNT CHARS SINCE LAST CR
       STP     SETL
       LDX     =37777B
NACS1  GCI     SETL
       BRX     NACS2
       SKE     =152B
       BRX     NACS1
       BRU     NACS1-1
NACS2  CXA
       ETR     =37777B
       SBRR    NACS

SCAN   ZRO     LINK1
       LDA     =3            TURN OFF ECHO
       LDX     =-1
       BRS     12
       CIO     INFIL         READ CHAR
       STA     SEWS
       LDA     ECHO          TURN ON ECHO
       BRS     12
       LDP     SETS          SCAN OS FOR CHAR
       STP     SETL
       GCI     SETL
       BRU     SEMJ-2
       SKE     SEWS
       BRU     *-3
       SBRR    SCAN

OPC    ZRO     LOPC          SEND CHAR IN A TO OF
       SKE     =155B
       BRU     OPC1
OPC2   SBRM    CRLF
       SBRR    OPC
OPC1   SKE     =152B
       BRU     *+2
       BRU     OPC2
       CIO     =1
       SBRR    OPC

SERS   ZRO     LINK1         RT. SHIFT $TS  ONE CHAR. POSN.
       LDA     SETS1
       SKG     ESBUF
       BRU     SERS3
*      OVERFLOWED BUFFER
SERS4  CERR    42
SERS3  XMA     SETS
       SUB     SETS
       SUB     =1
       CAX
       BRU     SERS2
SERS1  SKR     SETS
       GCI     SETS
SEK1   ZRO     76B
       WCI     SEWS
       SKR     SETS
       SKR     SETS
SERS2  BRX     SERS1
       MIN     SETS          ADJUST $ POINTERS
       MIN     SETS1
       SBRR    SERS

SELS   ZRO     LINK1         L SHIFT $TS  (A) CHAR. POSNS.
       CNA
       STA     SEWS
       ADD     SETS
       CAX
       STA     SETL1
       GCI     SETS
       BRU     *+3
       WCI     SETL
       BRU     *-3
       STX     SETS
       LDA     SEWS
       ADM     SETS1
       SBRR    SELS

TYTL   ZRO     LTYTL         TYPE $(A,B)
       STP     SETL
       GCI     SETL
       SBRR    TYTL
       SBRM    OPC
       BRU     *-3



SEMA   LDA     SETS
       SKG     SEOS          TEST STRING EMPTY
       BRU     SEMJ-2
       LDA     =1
       SBRM    SELS          SHIFT UP $
       LDA     SEK1
       BRU     SEMJ-1

SEMC   GCI     SETS
       BRU     SEMJ-2        BELL IF EMPTY
       BRU     SEMJ-1

SEME   EAX     34B           SWITCH MODES
       SKN     SERI
       EAX     2,2
       LDA     SERI
       EOR     SEMJ
       STA     SERI
       CXA
       BRU     SEMJ-1

SEMD   LDP     SETS
       SBRM    TYTL          TYPE $TS

SEMF   LDB     SETS1
       LDA     =155B
       SBRM    OPC
       BRU     SEMCR1

SEMTAB SKN     SEMSEM
       BRU     SEMCR2
       BRU     SEMJ

SEMCR  SBRM    LINCT
SEMCR2 LDB     SETS
SEMCR1 LDA     SEOS
       STP     IP
       BRU     RDL10

SEMLF  SBRM    LINCT
SEMLF1 LDA     LINF
       BRU     SEMCH

SEMQ   LDA     SEOS
       LDB     SETS
       SBRM    NACS          LOCATE LAST CAR RTN
       SBRM    SELS          SHIFT UP $
       LDA     =77B
       CIO     =1
       LDA     =155B
       BRU     SEMJ-1

SEMR   LDA     =102B
       CIO     =1
       SBRM    LINCT
SEMR1  LDP     SETS
       SBRM    TYTL          TYPE END OF OLD $
       LDA     =155B
       SBRM    OPC
       LDA     SEOS
       LDB     SETS
       SBRM    TYTL          TYPE BEG OF NEW $
       BRU     SEMJ

SEMT   LDA     =155B
       SBRM    OPC
       LDA     SEOS
       LDB     SETS
       SBRM    NACS          COUNY CHARS SINCE LAST CAR RTN
       STA     SEWS
       CLA
       BRU     *+2
       CIO     =1
       SKR     SEWS
       BRU     *-2
       BRU     SEMR1

SEMS   LDA     SETS1
       SKG     SETS          TEST STRING EXHAUSTED
       BRU     SEMJ-2
       MIN     SETS
       LDA     =1
       SBRM    SELS          SHIFT UP $
       LDA     =5
       BRU     SEMJ-1

SEMW   LDX     =37777B       INITIALISE 'WORD-PASSED'
       LDA     SETS
       STA     SEWS
SEMW2  SKG     SEOS
       BRU     SEMW3
       SKR     SEWS
       GCI     SEWS
SEK2   ZRO     74B
       SKR     SEWS
       SKE     =0
       BRU     SEMW1
       BRX     SEMW1+1
SEMW3  LDA     SETS
       SUB     SEWS
       SBRM    SELS          SHIFT UP $
       LDA     SEK2
       BRU     SEMJ-1
SEMW1  CLX
       LDA     SEWS
       BRU     SEMW2

SEMY   LDA     SEOS
       STA     SETS          RESET $TS
       BRU     SEMJJ

SEMX   SBRM    SCAN          LOCATE SPECIFIED CHAR
       LDA     SETL
       XMA     SETS
       SUB     SETS
       COPY    AB,AX
       LDA     =5
       CIO     =1
       BRX     *-1
       CBA
       CNA
       SBRM    SELS          SHIFT UP $
       BRU     SEMJ

SEMZ   SBRM    SCAN          LOCATE SPECIFIED CHAR
       LDA     SETS
       LDB     SETL
       SBRM    TYTL          TYPE UP TO CHAR
       LDA     SETL
       STA     SETS
       BRU     SEMJ

SEMCH  SKE     SEMI
       BRU     *+3
       SKN     SEMSEM
       BRU     SEMCR2
       SKN     SERI
       BRU     SEMCH1
       WCI     SEWS          'REPLACE' MODE
       LDA     SETS
       SKG     ESBUF
       BRU     *+2
       BRU     SERS4
       SKG     SETS1
       BRU     SEMJ
       STA     SETS1
       BRU     SEMJ
SEMCH1 STA     SEWS          'INSERT' MODE
       SBRM    SERS
       LDA     SEWS
       SKR     SETS
       WCI     SEWS          INSERT CHAR
       BRU     SEMJ

SEMV   CIO     INFIL         READ NEXT CHAR
       BRU     SEMCH
$ESBUF ZRO     3*BSBUF-1

$XTMSG M1      =1,OUTFIL
       CXA
       ETR     =37777B
       MUL     =3
       LSH     23
       SUB     =1
       STA     TMSG2
       ADD     =1000
       STA     TMSG3
TMSG4  GCI     TMSG2
       SBRM    RERR
       SKE     ='   /'
       BRU     TMSG7
       BRU     TMSG8
TMSG7  SKE     ='   $'
       BRU     *+3
       SBRM    CRLF
       BRU     TMSG4
       SBRM    CHOUT
       BRU     TMSG4







************************************************************
*
*          C A L   E R R O R   M E S S A G E S 
*
************************************************************






$EM1   ASC     'SUM (I=1 BY 2 TO 10: A(I)*3)/'
$EM2   ASC     'FOR I=1 BY 2 [TO 10, WHILE I<11 OR UNTIL I>10]/'
$EM3   ASC     'TYPE IN FORM 1: A+B,C/'
$EM4   ASC     'STEP 1.1/'
$EM5   ASC     'PART I+3/'
$EM6   ASC     'A(1,2,X+1)/'
$EM7   ASC     'DEFINE F[A,B] <=A+B OR :TO STEP 6.1>/'
$EM8   ASC     'FORM 1: <LINE FEED> ANS-<YOUR CHOICE OF FIELD>/'



$EM9   ASC     'IF <EXPRESSION> THEN <EXPR> ELSE IF <EXPR> THEN <EXPR>$ ... ELSE <EXPR>/'
$EM10  ASC     'WHERE <VARIABLE> = <EXPRESSION> & <EXPR> .../'
$EM11  ASC     'WHILE <EXPRESSION>   OR   UNTIL <EXPRESSION>/'
$EM12  ASC     'OPEN "NAME" FOR INPUT AS FILE <EXPR>/'
$EM13  ASC     'CLOSE <EXPRESSION>/'
$EM14  ASC     'READ FROM <EXPR>: <LIST OF VARIABLES>/'
$EM15  ASC     'WRITE ON <EXPR> (IN FORM <EXPR>) : ETC/'
$TCFIM ASC     ' THE CORRECT FORMAT IS$/'
$EM20  ASC     ' IN'
$EM21  ASC     'DIRECT ONLY/'
$EM22  ASC     'STATEMENT DOES NOT END PROPERLY/'
$EM23  ASC     'PARENTHESES DO NOT MATCH/'
$EM24  ASC     'IS NOT A LEGAL CHARACTER/'
$EM25  ASC     'ILLEGAL NUMBER/'
$EM26  ASC     'NO GO/'
$EM27  ASC     'A FOR MODIFIER CANNOT BE USED ON A TO OR DONE STATEMENT/'
$EM28  ASC     '$A STATEMENT SHOULD NOT BE LONGER THAN 300 CHARACTERS/'
$EM29  ASC     'NO MORE AVALIABLE VARIABLE NAMES/'
$EM30  ASC     'A SUBSCRIPTED VARIABLE CANNOT HAVE MORE THAN 30 SUBSCRIPTS/'


*      RUNTIME ERROR MESSAGES
$ERMSG1 ASC    ' IS UNDEFINED/'
$ERMSG2 ASC    'UNSUBSCRIPTED REFERENCE TO ARRAY/'
$ERMSG3 ASC    'CALL OF UNDEFINED FUNCTION/'
$ERMSG4 ASC    'ATTEMPT TO DO A GOTO STATEMENT/'
$ERMSG5 ASC    'I CAN"T FIND YOUR PART/'
$ERMSG6 ASC    'I CAN"T FIND YOUR STEP/'
$ERMSG7 ASC    'I CAN"T FIND YOUR FORM/'
$ERMSG8 ASC    'YOUR FORM DOESN"T HAVE ANY NUMERIC FIELDS/'
$ERMSG9 ASC    'I CAN"T EVEN FIT AN EXPONENT INTO YOUR FORM/'
$ERMS10 ASC    'I CAN"T FIT VALUE INTO YOUR FORM/'
$ERMS11 ASC    'YOU ARE TRYING TO TAKE THE LOGARITHM$OR FRACTIONAL POWER OF A NEGATIVE NUMBER./'
$ERMS12 ASC    'YOU HAVE GENERATED A VALUE WITH$MAGNITUDE >10^77/'
$ERMS13 ASC    'YOU HAVE TRIED TO CALL A NON-EXISTENT FUNCTION/'
$ERMS14 ASC    'ILLEGAL "RETURN"/'
$ERMS15 ASC    ' IS A FUNCTION. YOU ARE TREATING IT AS DATA/'
$ERMS16 ASC    ' THIS THING IS NOT A FUNCTION/'
$ERMS17 ASC    'MORE THAT 200 FUNCTION CALLS OR DOS.$ALL HAVE BEEN CLEARED/'
$ERMS18 ASC    '$ IMPROPER NESTING OF FUNCTION CALLS AND DO"S/'
$ERMS19 ASC    'FILE NUMBER 0 NOT LEGAL/'
$ERMS20 ASC    'THREE FILES OPEN ALREADY/'
$ERMS21 ASC    'FILE NUMBER IN USE/'
$ERMS22 ASC    'FILE DOES NOT EXIST/'
$ERMS23 ASC    'FILE CANNOT BE OPENED/'
$ERMS24 ASC    'END OF FILE ON INPUT/'
$ERMS25 ASC    'ATTEMPT TO DIVIDE BY 0/'
$M1    ASC     ' ? /'
$M2    ASC     'UNEXPECTED RUNTIME ERROR - LOCATION /'
$M3    ASC     ' IN STATEMENT /'
$M4    ASC     'PROGRAM BUFFER OVERFLOW$/'
$M5    ASC     ' = /'
$M6    ASC     'HEADING, PLEASE$/'
$M7    ASC     'MEMORY TRAP/'
$M8    ASC     'ILLEGAL INSTRUCTION EXECUTED. FATAL ERROR./'
$M9    ASC     '$INTERRUPTED /'
$M10   ASC     '     PAGE /'
$M11   ASC     'NUMBER OF STATEMENTS NEEDED = /'
$M12   ASC     ' FROM /'
$M13   ASC     ' TO /'
$M14   ASC     '$PAUSE/'
$M15   ASC     'ABOVE/'
$M16   ASC     '$ERROR /'
$M17   ASC     'IN FUNCTION /'
$M18   ASC     '_  /'
$M19   ASC     '$$YOU HAVE USED UP ALL THE SPACE FOR DATA. DELETE SOMETHING OR$DUMP, DELETE ALL, AND LOAD AGAIN.$/'

$M50   ASC     'PROGRAM BUFFER FULL.$/'
$M51   ASC     'PROGRAM BUFFER NEARLY FULL.$/'
$M53   ASC     'IS NOT AN EXPRESSION$/'
$M54   ASC     'IN DEMAND/'

*      COMPILER ERROR MESSAGES
CMD    MACRO   D
N:     NARG
       RPT     (X:=2,2,N:)
CEM.&D(X:-1) EXT D(X:)
       ENDR
       ENDM

       CMD     1,M1,2,EM21,3,EM20,4,EM1,5,EM2
       CMD     6,EM3,7,M1,8,M1,9,M1,10,M1
       CMD     11,M1,12,M1,13,M1,14,EM4,15,M1
       CMD     17,EM22,18,EM5,19,M1,20,M1
       CMD     21,M1,22,EM23,23,EM6,24,M1,25,EM24
       CMD     26,M1,27,M1,28,EM25,29,M1
       CMD     30,M1,31,EM26,32,EM7,33,EM8,34,EM9
       CMD     35,EM10,36,EM11,37,EM12
       CMD     38,EM13,39,EM14,40,EM15,41,EM27,42,EM28
       CMD     43,M53,45,EM29,46,EM30



       FRGT    N:,X:

LE     EQU     *
       END
XCAL ** FICHE/FRAME BREAK *****
MMCAL
MMCAL  IDENT   12-12-67      MEMORY MANAGER

       NOLIST  EXT,STAT


SCAL   EQU     -1

       IF      SCAL
RSTBLK MACRO
       LDA     CURBLK
       SBRM    SETBLK
       ENDM
       ELSE
RSTBLK MACRO
       ENDM
       ENDF

       GLOBAL

GETBLK ZRO     LGBLK
       BRU     EGETBL
RETBLK ZRO     LRBLK
       BRU     ERETBL
SETPGE ZRO     LINK1
       BRU     ESETPG
INTMEM ZRO     LINK1
       BRU     EINTME
GFS    ZRO     LGFS
       BRU     EGFS
DELV   ZRO     LDELV
       BRU     EDELV
PUTSTA ZRO     LPSTA
       BRU     EPUTST
SIZSTA ZRO     LSSTA
       BRU     ESIZST
DUMPS  BRU     EDUMPS
RDL    ZRO     LRDL
       BRU     ERDL
LDEMND BRU     ELDEMN
DEMERR BRU     EDEMER
FORM   BRU     EFORM
XMODIF BRU     EXMODI
XEDIT  BRU     EXEDIT
TYP44A BRU     ETYP44
TYPE44 BRU     ETYPE4
TYPE17 BRU     ETYPE1
TYPE79 BRU     ETYPE7
TYP84M BRU     ETYP84
TYPE84 BRU     ETYPE8
TEV    ZRO     LTEV
       BRU     ETEV
XGOTO  BRU     EXGOTO
XDO    BRU     EXDO
DIF    BRU     EDIF
DIFERR BRU     EDIFER
DONE   BRU     EDONE
RTN0   BRU     ERTN0
RTN    BRU     ERTN
LFCN   BRU     ELFCN
CLF    ZRO     LCLEAR
       BRU     ECLF
LXIT   BRU     ELXIT
XITINT BRU     EXITIN
SRS    ZRO     LSRS
       BRU     ESRS
RRS    ZRO     LRRS
       BRU     ERRS
ESCAPE ZRO     ESCT1
       BRU     EESCAP
ESC1   BRU     EESC1
LDEL   BRU     ELDEL
FS     ZRO     LFS
       BRU     EEFS
FPART  ZRO     LFS
       BRU     EFPART
TMSG   ZRO     LTMSG
       BRU     ETMSG
TMSG8  BRU     ETMSG8
INIT   BRU     EINIT
ERR    ZRO     LERR
       BRU     EERR
RSTART BRU     ERSTRT
RUN    BRU     ERUN

       LOCAL

       IF      SCAL
ETSP   DATA    ETS1
       ELSE
ETSP   DATA    ETS2
       ENDF

******************************************************************
*      
*     BLOCK FREE STORAGE ROUTINES
*      
*******************************************************************



       IF      SCAL
FSLINK EQU     14000B
       ELSE
FSLINK EQU     17777B
       ENDF

*      G E T B L K     GET A BLOCK OF LENGTH N FROM FREE STOAGE
*      
*      CALL:   A- SIZE OF BLOCK REQUIRED
*      
*      RETURN: SKIP IF BLOCK AVALIABLE WITH NEW BLOCKS PAGE IN CORE
*      A- BLOCK POINTER
*      

EGETBL ETR     =3777B
       STA     GBLKT2
       SKN     OVRFS
       BRU     OVRFLO
       IF      SCAL
       LDA     BLKPNT
       SBRM    SETBLK
       LDA     GBLKT2
       ADD     BLKPNT
       SKA     =20000B
       BRU     GBLKS1
       XMA     BLKPNT
       MIN*    GETBLK
       SBRR    GETBLK
GBLKS1 LDA     BLKPNT
       ETR     =37777B
       CNA
       ADD     =20000B
       CAX
       LDA     BLKPNT
       SBRM    RETBLK
       SBRM    GETPGE
       BRU     INITFS
       LDA     GBLKT2
       ADD     BLKPNT
       XMA     BLKPNT
       ELSE
       LDA     BLKPNT
       SUB     GBLKT2
       SKG     EFS
       BRU     INITFS
       STA     BLKPNT
       ENDF
       MIN*    GETBLK
       SBRR    GETBLK
INITFS MIN     OVRFS
OVRFLO EQU     *
       IF      SCAL
       LDP     RBPNT           POINTER TO RELABELING BYTES USED
       STP     TRBPNT
       ENDF
       LDA     GBLKT2
       ADD     =1
       STA     GBLKT4
       CLA
       STA     GBLKT5
       IF      SCAL
OVRFL1 GCI     TRBPNT          GET NEXT RELABELING BYTE 
       BRU     OVRFL5
       LDB     =FSLINK*1000B
       LSH     15
       ELSE
       LDA     =FSLINK
       ENDF
       STA     GBLKT3
       IF      SCAL
       SBRM    SETBLK
       ENDF
OVRFL2 LDA*    GBLKT3
       SKE     =0
       BRU     OVRFL3
       IF      SCAL
       BRU     OVRFL1
       ELSE
       BRU     OVRFL5
       ENDF
OVRFL3 CAX
       LDA     1,2
       SKE     GBLKT2
       BRU     OVRFL4
       LDA     0,2
       STA*    GBLKT3
       CXA
       BRU     OVRFL7
OVRFL4 SKG     GBLKT4
       BRU     *+3
       STA     GBLKT4
       STX     GBLKT5
       STX     GBLKT3
       BRU     OVRFL2
OVRFL5 LDA     GBLKT5
       SKE     =0
       BRU     OVRFL6
       SBRR    GETBLK
OVRFL6 EQU     *
       IF      SCAL
       SBRM    SETBLK
       ENDF
       LDX     GBLKT5
       LDA     GBLKT2
       CNA
       ADM     1,2
       ADD     GBLKT4
       ADD     GBLKT5
OVRFL7 MIN*    GETBLK
       SBRR    GETBLK


       IF      SCAL

*      S E T B L K    SET CURRENT BLOCK
*      
*      CALL:   A- BLOCK POINTER IN PAGE TO BE SWAPPED IN
*      
*      RETURN: A- BLOCK POINTER TO PAGE PREVIOUSLY IN CORE
*      X+B- RESTORED
*      

SETBLK ZRO     LSBLK
       STB     SBLKT2
       LRSH    15
       SBRM    SETPGE
       LDB     =FSLINK*1000B
       LSH     15
       LDB     SBLKT2
       SBRR    SETBLK


       ENDF

*      R E T B L K     RETURNS A BLOCK TO FREE STORAGE
*      
*      CALL:   A- POINTER TO BLOCK TO BE RETURNED
*      X- SIZE OF BLOCK TO BE RETURNED
*      
*      RETURN: A-BLOCK POINTER TO PAGE IN CORE WHEN CALLED
*      
ERETBL EQU     *
       IF      SCAL
       ETR     =7737777B
       ELSE
       ETR     =37777B
       ENDF
       STA     RBLKT2
       STX     RBLKT3
       IF      -SCAL
       SKN     OVRFS
       BRU     RBLKSA
       SKE     BLKPNT
       BRU     RBLKSA
       ADD     RBLKT3
       STA     BLKPNT
       SKE     FSLINK
       SBRR    RETBLK
       CAX
       ADD     1,2
       STA     BLKPNT
       LDA     0,2
       STA     FSLINK
       SBRR    RETBLK
RBLKSA EQU     *
       ENDF
       ADD     RBLKT3
       STA     RBLKT4
       IF      SCAL
       ETR     =7700000B
       MRG     =FSLINK
       ELSE
       LDA     =FSLINK
       ENDF
       STA     RBLKT5
       IF      SCAL
       SBRM    SETBLK
       STA     RBLKT6
       ENDF
       LDA     RBLKT3
       SKG     =1
       BRU     RBLKS0
       LDA*    RBLKT5
RBLKS1 SKE     =0
       BRU     RBLKS3
       IF      SCAL
       SKN     OVRFS
       BRU     RBLKS2
       LDA     RBLKT4
       SKE     BLKPNT
       BRU     RBLKS2
       LDA     RBLKT2
       STA     BLKPNT
       BRU     RBLKS0
       ENDF
RBLKS2 LDX     RBLKT2
       STX*    RBLKT5
       CLA
       STA     0,2
       LDA     RBLKT3
       STA     1,2
       BRU     RBLKS0
RBLKS3 SKE     RBLKT4
       BRU     RBLKS4
       CAX
       LDA     0,2
       STA*    RBLKT2
       LDA     1,2
       ADD     RBLKT3
       LDX     RBLKT2
       STA     1,2
       STX*    RBLKT5
       BRU     RBLKS0
RBLKS4 SKG     RBLKT2
       BRU     RBLKS5
       LDX     RBLKT2
       STA     0,2
       LDA     RBLKT3
       STA     1,2
       STX*    RBLKT5
       BRU     RBLKS0
RBLKS5 CAX
       ADD     1,2
       SKE     RBLKT2
       BRU     RBLKS9
       IF      SCAL
       SKN     OVRFS
       BRU     RBLKS6
       LDA     RBLKT4
       SKE     BLKPNT
       BRU     RBLKS6
       STX     BLKPNT
       CLA
       STA*    RBLKT5
       BRU     RBLKS0
       ENDF
RBLKS6 LDA     0,2
       SKE     RBLKT4
       BRU     RBLKS7
       LDB     1,2
       COPY    BA,AX,XB
       ADD     1,2
       ADD     RBLKT3
       XXB
       STA     1,2
       XXB
       LDA     0,2
       XXB
       STA     0,2
       BRU     RBLKS0
RBLKS7 LDA     RBLKT3
       ADM     1,2
RBLKS0 LDA     RBLKT6
       SBRR    RETBLK
RBLKS9 STX     RBLKT5
       LDA     0,2
       BRU     RBLKS1


       IF      SCAL

*      G E T P G E      GETS A NEW PAGE, INITIALIZING FS AND BLK POINTER
*      
*      SETS CURRENT PAGE TO NEW PAGE
*      

GETPGE ZRO     LINK1
       LDA     =NOPAGE
       STA     202B
       BRS     43
       ETR     =@77B
       BRS     44
       CLA
       STA     FSLINK
       BRS     43              GET RELABELING OF NEW PAGE
       ETR     =77B
       WCI     RBPNT           WRITE IN RELABELING BYTE STRING
       STA     CURPGE
       LDB     =FSLINK*1000B+1000B
       LSH     15
       STA     BLKPNT
       MIN*    GETPGE
       SBRR    GETPGE
NOPAGE ZRO     NPLINK
       LDA     =RERR
       STA     202B
       LDA     INTMSK
       BRS     78
       SBRR    GETPGE
       ELSE
GETPGE ZRO     LINK1
       BRS     43
       ETR     =@77B
       BRS     44
       M1      =FSLINK,BLKPNT
       M1      =0,FSLINK
       BRS     43
       ETR     =77B
       STA     CURPGE
       STA     PAGE3
       MIN*    GETPGE
       SBRR    GETPGE
       ENDF

*      S E T P G E     SETS CURRENT PAGE
*      
*      CALL:   A- PAGE TO BE SET TO CURRENT
*      
*      RETURN: A- PREVIOUS PAGE IN CORE
*      

ESETPG ETR     =77B
       SKE     CURPGE
       BRU     *+2
       SBRR    SETPGE
       XMA     CURPGE
       STA     SPGET2
       BRS     43
       ETR     =@77B
       MRG     CURPGE
       BRS     44
       LDA     SPGET2
       SBRR    SETPGE


*      I N T M E M     INITIALIZES MEMORY MANAGER
*      

EINTME LDA     ETSP
       STA     EFS
       M1      =-1,OVRFS
       LDA     =ETS
       STA     TFS
INTMS1 COPY    AX,B
       ADD     =3
       SKE     EFS
       BRU     *+2
       BRU     INTMS2
       STA     0,2
       STB     1,2
       STB     2,2
       BRU     INTMS1
INTMS2 CLA
       STA     0,2
       IF      SCAL
       LDA     IRBPNT          INITIAL VALUE FOR EMPTY RELABELLING BYTE POINTERS
       STA     RBPNT           SET FIRST WORD OF POINTER
       STA     RBPNT+1         SET SECOND WORD
       ENDF
       BRS     43
       ETR     =77B            GET RELABELING OF MSGPGE
       STA     MSGPGE
       STA     CURPGE
       IF      -SCAL
       STA     PAGE3
       ENDF
       SBRR    INTMEM

IRBPNT DATA    3*1-1           PUT RELABELING TABLES AT LOCATION 1


*      GET CELL FROM FREE STORAGE LIST

EGFS   STX     POPT1
       STA     POPT2
       LDX     TFS
       STA     1,2
       STB     2,2
       CXA
       ETR     =37777B
       CAX
       LDA*    0,2
       SKE     =0
       BRU     GFS2
*      RAN OUT OF MEMORY.
*      DISASTER
       IF      -SCAL
       LDA     EFS
       ADD     =3
       SKG     BLKPNT
       BRU     GFS3
GFS4   EQU     *
       ENDF
       SBRM    CCLR
       SKN     XEQFLG
       SBRM    SCLR
       LDX     =CSTVAR
       LDA     ESTVAR,2
       STA     SSTVAR,2
       BRX     *-2
       SBRM    SCLR
       CLAB
       LDX     TFS
       STP     1,2
       XMA     0,2
       STX     STACK
       STX     TSTACK
       COPY    AX,A
       STP     1,2
       XMA     0,2
       STX     FCNSTK
       COPY    AX,A
       STP     1,2
       XMA     0,2
       STX     CSTK
       STA     TFS
       MSG     M19
       BRU     SEQ24
       IF      -SCAL
GFS3   CLA
       STA*    EFS
       LDA     EFS
       ADD     =3
       XMA     EFS
       STA*    0,2
       ENDF
GFS2   LDA     0,2
       ETR     =37777B
       STA     TFS
       SBRR    GFS


*      DELETE VALUE
EDELV  SBRM    SCNVR
       BRU     DELV9
       BRU     DELV1
       BRU     DELV1
       SBRR    DELV
DELV1  LDA     TFS
       XMA     0,2
       STX     TFS
       BRU     SVRET
DELV9  EQU     *
       IF      SCAL
       ETR     =7737777B
       ELSE
       ETR     =37777B
       ENDF
       STA     FSVSTK
       SBRM    CHKSTA
       LDA     FSVSTK
       SBRM    SIZSTA
       SBRM    RETBLK
       SBRR    DELV


*      P U T S T A           PUT STATEMENT ON LIST
*      
*      CALL:   A,B- NUMBER OF STATEMENT TO BE INSERTED
*      X- BLOCK POINTER TO STATEMENT TO BE INSERTED
*      
*      RETURN: PAGE CONTAIN INSERTED STATEMENT IS IN CORE
*      
EPUTST STX     PSTAT2
       STP     PSTAT5
       SBRM    FS
       BRU     PSTAS2
PSTAS1 LDP     PSTAT5
       STP     SVSTN1
       LDA     PSTAT2
       STA     SVSTPT
       XMA     0,2
       XMA     PSTAT2
       CAX
       IF      SCAL
       SBRM    SETBLK
       ENDF
       LDA     PSTAT2
       STA     0,2
       SBRR    PUTSTA
PSTAS2 STX     PSTAT3
       STA     PSTAT4
       SBRM    CHKSTA
       LDA*    PSTAT4
       XMA     PSTAT4
       SBRM    SIZSTA
       SBRM    RETBLK
       LDX     PSTAT3
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
       LDA     PSTAT2
       STA     SVSTPT
       STA     0,2
       CAX
       IF      SCAL
       SBRM    SETBLK
       ENDF
       LDP     PSTAT5
       STP     SVSTN1
       LDA     PSTAT4
       STA     0,2
       SBRR    PUTSTA


*      R E M S T A           REMOVE STATEMENT FROM LIST
*      
*      CALL:   A-BLOCK POINTER TO STATEMENT TO BE REMOVED
*      B-BLOCK POINTER TO PREVIOS STATEMENT IN LIST
*      
*      RETURN: A-BLOCK POINTER TO PAGE IN CORE WHEN CALLED
*      
REMSTA ZRO     LRSTA
       STP     RSTAT2
       CAX
       SKE     SVSTPT        IS SAVED STATEMENT BEING DELETED?
       BRU     RSTAS1        NO
       LDA     FL            RESET SAVED STATEMENT TO END OF LIST
       STA     SVSTPT
       LDA     =37777777B
       STA     SVSTN1
       STA     SVSTN2
       IF      SCAL
       CXA
       ENDF
RSTAS1 EQU     *
       IF      SCAL
       SBRM    SETBLK
       STA     RSTAT4
       ENDF
       LDA     0,2
       STA     RSTAT5
       CXA
       SBRM    CHKSTA
       LDA     RSTAT2
       SBRM    SIZSTA
       SBRM    RETBLK
       IF      SCAL
       LDA     RSTAT3
       CAX
       SBRM    SETBLK
       ELSE
       LDX     RSTAT3
       ENDF
       LDA     RSTAT5
       XMA     0,2
       SKE     RSTAT2
       SBRM    RERR
       IF      SCAL
       LDA     RSTAT4
       ENDF
       SBRR    REMSTA


*      S I Z S T A           DETERMINE THE LENGTH OF A STATEMENT
*      
*      CALL:   A- BLOCK POINTER OF STATEMENT TO BE PROCESSED
*      
*      RETURN: A- SIZE OF STATEMENT
*      
ESIZST EQU     *
       IF      SCAL
       ETR     =7737777B
       ELSE
       ETR     =37777B
       ENDF
       STA     SSTAT2
       CAX
       IF      SCAL
       SBRM    SETBLK
       CXA
       ENDF
       ADD     3,2
       ADD     =4
       CAX
       LDA     0,2
       EAX     1,2
       SKE     ZXIT
       BRU     *-3
       CXA
       IF      SCAL
       ETR     =7737777B
       ELSE
       ETR     =37777B
       ENDF
       SUB     SSTAT2
       CAX
       LDA     SSTAT2
       SBRR    SIZSTA


*      C H K S T A           CHECK IF STATEMENT IS REFERED TO ON ANY
*      STACKS. IF SO,CLEAR SAVED STATUS
*      
*      CALL:   A-POINTER TO STATEMENT TO BE CHECKED
*      
*      RETURN: CURRENT PAGE IS PAGE CONTAINING STATEMENT CHECKED
*      
CHKSTA ZRO     LCSTA
       SKN     XEQFLG
       BRU     *+2
       SBRR    CHKSTA
       STA     CSTAT2
       IF      SCAL
       LDB     =7737777B
       ELSE
       LDB     =37777B
       ENDF
       SKM     SCRBLK
       BRU     CSTAS3
CSTAS1 SBRM    SCLR
CSTAS2 EQU     *
       IF      SCAL
       LDA     CSTAT2
       SBRM    SETBLK
       ENDF
       SBRR    CHKSTA
CSTAS3 SKM     STPSTP
       BRU     *+2
       BRU     CSTAS1
       LDX     SFNSTK
CSTAS4 LDA     0,2
       BE      =0,CSTAS6
       CAX
       LDX     0,2
       LDX     0,2
       M1      =2,CSTAT3
CSTAS5 LDX     0,2
       LDA     1,2
       SKM     CSTAT2
       BRU     *+2
       BRU     CSTAS1
       SKR     CSTAT3
       BRU     CSTAS5
       LDA     2,2
       STA     CSTAT3
       LDX     0,2
       SKR     CSTAT3
       BRU     *-2
       BRU     CSTAS4
CSTAS6 LDX     SCSTK
       BRU     CSTAS9
CSTAS7 SKN     1,2
       BRU     *+2
       BRU     CSTAS8
       LDA     2,2
       SKM     CSTAT2
       BRU     *+2
       BRU     CSTAS1
CSTAS8 LDX     0,2
CSTAS9 CXA
       SKE     =0
       BRU     CSTAS7
       BRU     CSTAS2

*      COMPILER DUMPS STATEMENT PROCESSOR
*      ENTRY: DUMPS
EDUMPS SKN     CSNO
       CERR    2
       MSG     M13
       CLA
       LDX     =3
       BRS     63
       CERR    9
       STA     BINOP1
       LDA     SL
DUMPS2 STA     BINOP2
       IF      SCAL
       SBRM    SETBLK
       LDA     BINOP2
       ENDF
       SBRM    DUMPST
       LDA*    BINOP2
       SKE     =0
       BRU     DUMPS2
       LDX     NVAR3
DUMPS7 SKN     EVL,2
       BRU     DUMPS8
       STX     BINOP2
       LDA     EVL,2
       IF      SCAL
       SBRM    SETBLK
       LDA     EVL,2
       ENDF
       SBRM    DUMPST
       LDX     BINOP2
DUMPS8 BRX     *+1
       BRX     DUMPS7
       LDA     BINOP1
       BRS     20
       RSTBLK
       BRU     SB1

DUMPST ZRO     LINK2
       SBRM    CPS
       STP     BINOP3
       GCD     BINOP3
       SBRM    RERR
DUMPS3 GCI     BINOP3
       BRU     DUMPS4
       BNE     CRCH,DUMPS1
       LDA     =166B
       CIO     BINOP1
       LDA     CRCH
DUMPS1 CIO     BINOP1
       BRU     DUMPS3
DUMPS4 LDA     CRCH
       CIO     BINOP1
       SBRR    DUMPST


*      READ A LINE FOR STATMENT AND DEMAND INPUT
*      ENTRY: RDL
ERDL   LDP     SIP
       STP     IP
       STA     SEOS
       LDA     INFIL
       SKE     =0
       BRU     RDL13
       LDA     MSGPGE
       SBRM    SETPGE
       IF      SCAL
       STA     PAGE3
       ENDF
       BRU     XRDL

*      DEMAND POP
*      ENTRY: LDEMND,DEMERR
ELDEMN M1      0,JRT1
       SBRM    TPS
       SBRM    CPBE
       SBRM    PEQ
       LDA     BTBUF
       STA     TBUFP
       STA     TBUFP1
       LDA     =1
       SBRM    RDEM
       M1      =5,CTL
       BRU     4,2

EDEMER SBRM   DEMCLR
       BRR     0

RDEM   ZRO     LRDEM
       STA     CMPCTL
       M1      JRT1,DJRT1
       M1      =2,CASE
       SBRM    RDL
       CLA
       STA     CC
       STA     SNF
       STA     FEEFLG
       SBRM    CCLR
       RBF     EXPR,(CERR,43)
       COMPL   XIT
       SBRM    SBPE
       STA     DEMNT2
       CLB
       LDA     CTL
       LSH     14
       MRG     =2B7
       XMA     DJRT1
       ETR     =37777B
       MRG     DJRT1
       LDB     CURBLK
       STK     CSTK
       LDA     STACK
       XMA     TSTACK
       CAB
       LDA     =6B7
       STK     CSTK
       M1      DEMNT2,CURBLK
       SBRM    CCLR
       M1      =3,CASE
       LDA     CURBLK
       CAX
       IF      SCAL
       SBRM    SETBLK
       CXA
       ENDF
       ADD     3,2
       CAX
       SBRR    RDEM

CLD    ZRO     LCLEAR
       UNSTK   CSTK
       SBRM    RERR
       STB     TSTACK
       UNSTK   CSTK
       SBRM    RERR
       STP     CLF2
       LDA     CURBLK
       SBRM    SIZSTA
       SBRM    RETBLK
       IF      SCAL
       LDA     CLF3
       SBRM    SETBLK
       ENDF
       LDA     CLF3
       STA     CURBLK
       LDA     CLF2
       ETR     =@7B7
       RSH     14
       STA     CTL
       CLA
       STA     CMPCTL
       LSH     14
       STA     JRT1
       STA     DEMLOC
       MIN     DEMLOC
       LDP     TYPEP
       STP     TYPE3
       BRR*    CLD

DEMCLR ZRO     LCLEAR
       RSTBLK
       LDP     TYPE3
       STP     TYPEP
       LDA     BTBUF
       STA     TBUFP
       STA     TBUFP1
       LDX     DEMLOC
       LDA     1,2
       ETR     =177B5
       SKE     ZDEMND
       BRU     *+2
       BRU     *+3
       UNSTK   STACK
       SBRM    RERR
       STX     0
       SBRR    DEMCLR
*      RUNTIME TYPEOUT USING STATEMENTS AND FORMS
*      ENTRY: FORM

*      BEGINNING OF A TYPE IN FORM
EFORM  FIX
       CLB
       MRG     =40000000B
       SBRM    FS
       BRU     TYPE72
       ERROR   7
TYPE72 STA     TPSTP
TYP72A SBRM   CPS
       STP     TYPEP
       GCI     TYPEP
       SBRM    RERR
       SKE     LINF
       BRU     *-3
       LDP     TYPEP
       STP     TYPE3
       RSTBLK
       BRR     JRT1


EXMODI LDX     =-1
       BRU     EDIT7
EXEDIT CLX
EDIT7  STX     EMFLG
       SKE     PRTFLG
       BRU     EDIT1
       UNSTK   STACK
       SBRM    RERR
       FIX
       MRG     =40000000B
       CLB
       SBRM    FS
       BRU     EDIT2
       ERROR   7
EDIT2  SBRM    CPS
       STP     BINOP1
       M1      SIP,SIP1
       CLA
       SKN     EMFLG
       CIO     OUTFIL
EDIT3  GCI     BINOP1
       BRU     EDIT4
       WCI     SIP
       SKN     EMFLG
       SBRM    CHOUT
       BRU     EDIT3
EDIT4  SKR     SIP1
       RSTBLK
       BRR     JRT1
EDIT1  STA     BINOP1
       LDX     JRT1
       LDA     -1,2
       ETR     =57700000B
       SKE     ZLI
       BRU     EDIT5
*      FUNCTION
       LDX     BINOP1
       EAX     -1,2
       SKN     VL,2
       BRU     EDIT6
       LDA     VL,2
       IF      SCAL
       SBRM    SETBLK
       LDA     VL,2
       ENDF
       BRU     EDIT2
EDIT6  ERROR   16
EDIT5  LDA     BINOP1
       SBRM    FS
       BRU     EDIT2
       ERROR   6

ETYP44 RSTBLK
ETYPE4 LDA     BTBUF
       STA     TBUFP
       STA     TBUFP1
       M1      JRT1,0
       SKN     PANFLG
       BRU     XITINT
       BRR     0


*      NOT AN EXPRESSION LIST TO BE TYPED
*      POSSIBLE CODES ARE 1-FORM, 2-STATEMENT CLASS, 3-STRING,
*      4-ALL, 5-ALL STEPS, 6-ALL FORMS, 7-ALL VALUES
ETYPE1 SKG     =7
       BRU     *+2
       SBRM    RERR
       STA     TYPECD
       CAX
       BRU     *,2
       BRU     TYPE65
       BRU     TYPE24
       BRU     TYPE50
       BRU     TYPE66
       BRU     TYPE66
       BRU     TYPE67
       BRU     TYPE25
*      TYPE ALL STEPS
TYPE66 SBRM    CRLF
       M1      SL,TYPE1
       IF      SCAL
       SBRM    SETBLK
       ENDF
       M1      =0,TYPE3
TYPE26 LDX     TYPE1
       LDA     1,2
       SKE     =37777777B
       BRU     *+2
       BRU     TYPE28
       XMA     TYPE3
       SKE     TYPE3
       SBRM    CRLF
       CXA
       SBRM    PSTAT
       LDX     TYPE1
       LDA     0,2
       STA     TYPE1
       IF      SCAL
       SBRM    SETBLK
       ENDF
       BRU     TYPE26
TYPE28 LDA     TYPECD
       SKE     =4
       BRU     TYP44A
       BRU     TYP67A
*      TYPE ALL FORMS
TYPE67 LDA     FL
       STA     TYPE1
       IF      SCAL
       SBRM    SETBLK
       ENDF
TYP67A SBRM    CRLF
       BRU     *+3
TYPE70 LDA     TYPE1
       SBRM    PSTAT
       LDX     TYPE1
       LDA     0,2
       SKE     =0
       BRU     *+2
       BRU     TYPE71
       STA     TYPE1
       IF      SCAL
       SBRM    SETBLK
       ENDF
       BRU     TYPE70
TYPE71 LDA     TYPECD
       SKE     =4
       BRU     TYP44A
*      TYPE ALL VALUES
TYPE25 SBRM    CRLF
       LDX     =VL
TYPE27 SBRM    TEV
       LDX     TYPE1
       EAX     2,2
       LDA     0,2
       BNE     =-1,TYPE27
       BRU     TYP44A
*      TYPE STATEMENT CLASS
TYPE24 UNSTK   STACK
       SBRM    RERR
       BNE     =-1,TYPE30
*      TYPE PART
       UNSTK   STACK
       SBRM    RERR
       FIX
       STA     TYPE3
       SBRM    FPART
       BRU     TYPE31
       ERROR   5
TYPE31 STA     TYPE1
       CAX
TYPE32 LDA     1,2
       SKE     TYPE3
       BRU     TYP44A
       CXA
       SBRM    PSTAT
       LDX*    TYPE1
       STX     TYPE1
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
       SKN     PANFLG
       BRU     TYP44A
       BRU     TYPE32
*      TYPE STEP
TYPE30 SBRM    FS
       BRU     TYP30A
       ERROR   6
TYP30A SBRM    PSTAT
       BRU     TYP44A
*      TYPE A FORM
TYPE65 UNSTK   STACK
       SBRM    RERR
       FIX
       MRG     =40000000B
       CLB
       SBRM    FS
       BRU     TYP30A
       ERROR   7

*      CODE TO IMPLEMENT TYPE IN FORM
ETYPE7 ETR     =777B
       STA     FRS01
       STA     FRS02
       IF      SCAL
       LDA     TPSTP
       SBRM    SETBLK
       ENDF
       BRU     XTYP79

ETYP84 LDP     FRP02
       SUB     =1
       BRU     *+2
ETYPE8 LDP     FRP02
       STP     TYPE3
       RSTBLK
       BRR     JRT1



*      TYPE ENTIRE VARIABLE, INDEX IN X
ETEV   STX     TYPE1
       LDA     0,2
       SBRM    SCNVR
       BRU     TEV90
       BRU     TEV10
       BRU     TEV20
       SBRR    TEV
TEV10  LDA     1,2
       SKE     =1
       BRU     TEV11
       LDA     2,2
       SKE     =1
       BRU     TEV11
       LDA     0,2
       BRU     SVRET
TEV11  STX     TYPE2
       SKN     PANFLG
       BRU     TYPE44
       SBRM    TSSV
       SBRM    PEQ
       M1      =-1,FRF03
       LDX     TYPE2
       LDP     1,2
       SBRM    FRM20
       SBRM    TIV
       SBRM    CRLF
       LDA*    TYPE2
       BRU     SVRET
TEV20  LDA     0,2
       BRU     SVRET
TEV90  EQU     *
       IF      SCAL
       LDA*    TYPE1
       SBRM    SETBLK
       ENDF
       LDA*    TYPE1
       SBRM    PSTAT
       RSTBLK
       SBRR    TEV

*      RUN STATEMENT
ERUN   BSS     0
       IF      SCAL
       LDA     SL              POINTER TO FIRST STATEMENT
       SBRM    SETBLK          GET PAGE WITH FIRST STATEMENT
       ENDF
       LDA     SL              POINTER TO FIRST STATEMENT
       BRU     GOTO4           GO TO FIRST STATEMENT

*      TO STATEMENT
*      ENTRY: XGOTO,XDO
EXGOTO SBRM    FNDSTA
       NOP
GOTO4  XMA     CURBLK
       CAX
       LDA     CTL
       SKE     =4
       BRU     GOTO2
       CXA
       SBRM    SIZSTA
       SBRM    RETBLK
       BRU     GOTO3
GOTO2  BNE     =7,GOTO1
GOTO3  M1      =3,CTL
GOTO1  LDA     CURBLK
       IF      SCAL
       SBRM    SETBLK
       LDA     CURBLK
       ENDF
       CAX
       ADD     3,2
       ADD     =3
       STA     0
       SKN     PANFLG
       BRU     XITINT
       BRR     0
*      DO STATEMENT
EXDO   SKR     NREC
       BRU     *+2
       BRU     FCN5
       SBRM    FNDSTA
       BRU     *+4
       STA     BINOP1
       LDA     =2
       BRU     *+3
       STA     BINOP1
       LDA     =1
       XMA     CTL
       CLB
       LSH     14
       XMA     JRT1
       ETR     =37777B
       ADD     JRT1
       LDB     CURBLK
       STK     CSTK
       LDP     BINOP1
       STA     CURBLK
       BRU     GOTO1+1

*      DEMAND IN FORM
*      ENTRY: DIF,DIFERR
EDIF   EQU     *
       IF      SCAL
       LDA     TPSTP
       SBRM    SETBLK
       ENDF
DIF8   GCI     TYPEP
       BRU     DIF1
       BE      =3,DIF2
       SBRM    CHOUT
       BRU     DIF8
DIF2   GCI     TYPEP
       BRU     DIF6
       SKE     =3
       BRU     *+2
       BRU     DIF2
       SKR     TYPEP
DIF6   LDA     =2
       SBRM    RDEM
       M1      =6,CTL
       BRU     4,2
DIFRET EQU     *
       IF      SCAL
       LDA     TPSTP
       SBRM    SETBLK
       ENDF
DIF7   GCI     TYPEP
       BRU     DIF3
       BE      =3,DIF4
       SBRM    CHOUT
       BRU     DIF7
DIF4   SKR     TYPEP
       BRU     DIF9
DIF3   LDA     TPSTP
       BRU     TYP72A
DIF9   RSTBLK
       BRR     JRT1
DIF1   ERROR   8
EDIFER M1      DJRT1,JRT1
       LDP     TYPE3
       STP     TYPEP
       BRU     DIF

*      DONE STATEMENT
*      ENTRY: DONE
EDONE  LDA     CTL
       SKE     =2
       BRR     JRT1
       LDA     =-1
       LDX     CURBLK
       BRU     XIT20

*      FUNCTION RETURN WITH 0 RESULT
*      ENTRY: RTN0,RTN,FCN,CLF
ERTN0  CLAB
       STK     STACK
*      FUNTION RETURN WITH RESULT ON STACK
ERTN   LDX     FCNSTK
       LDA     0,2
       SKG     =0
       BRU     RTN1
       LDA     1,2
       BNE     CSTK,RTN2
       SBRM    CLF
       BRU     RTN1
       STA     JRT1
       RSTBLK
       BRR     JRT1
RTN1   ERROR   14
RTN2   ERROR   18

*      FUNCTION CALL
ELFCN  M1      0,JRT1
       SKR     NREC
       BRU     FCN1
FCN5   ERROR   17
FCN1   EAX*    0
       CXA
       ETR     =37777B
       LRSH    9
       STA     BINOP1
       STA     CLF1
       CLA
       LSH     9
       ADD     =VL
       STA     JRT2
       CAX
       SKN     0,2
       BRU     FCN99
       INITDL
       STX     TFL
FCN2   SKR     CLF1
       BRU     *+2
       BRU     FCN4
       UNSTK   STACK
       SBRM    RERR
       SKE     =1
       BRU     FCN3
       COPY    BX,A
       XMA     0,2
       STK     TFL
       SBRM    GDBV
       LDX     TFL
       LDA     =4B7
       ADM     0,2
       BRU     FCN2
FCN3   STK     TFL
       BRU     FCN2
FCN4   LDA*    JRT2
       STA     SNO1
       IF      SCAL
       SBRM    SETBLK
       LDA     SNO1
       ENDF
       ETR     =37777B
       CAX
       ADD     3,2
       ADD     =4
       CAX
       LDA     0,2
       STA     BINOP2
       STA     CLF3
       CXA
       STX     CLF2
       ADD     BINOP2
       CAX
       STX     BINOP4
       BRU     FCN6
FCN5A  STX     BINOP3
       LDX     0,2
       CLAB
       XMA     0,2
       STK     FCNSTK
       LDA     BINOP1
       SKG     BINOP2
       SBRM    GDBV
       LDX     BINOP3
       EAX     -1,2
FCN6   SKR     BINOP2
       BRU     FCN5A
       M1      FCNSTK,CLF1
FCN7   MIN     CLF2
       LDX*    TFL
       UNSTK   TFL
       BRU     FCN10
       XXA
       SKA     =4B7
       BRU     FCN8
       CXA
       SBRM    GFS
       LDA     =4B7
       STA     0,2
       CLB
FCN8   CXA
       LDX     CLF2
       STA*    0,2
       LDX     CLF1
       STB     2,2
       LDX     0,2
       STX     CLF1
       BRU     FCN7
FCN10  DLD     TFL
       LDA     TPSTP
       LDB     CLF3
       STK     FCNSTK
       LDA     BINOP1
       LSH     15
       CLB
       XMA     JRT1
       ETR     =37777B
       MRG     JRT1
       CAB
       LDA*    JRT2
       STK     FCNSTK
       LDA     CTL
       CLB
       LSH     15
       XMA     DEMLOC
       ETR     =37777B
       MRG     DEMLOC
       CAB
       LDA     SNO1
       XMA     CURBLK
       STK     FCNSTK
       LDP     TYPE3
       STK     FCNSTK
       LDP     TYPEP
       STK     FCNSTK
       LDA     =1
       XMA     OUTFIL
       COPY    AB,A
       XMA     RDFIL
       STK     FCNSTK
       LDA     STACK
       XMA     TSTACK
       CAB
       LDA     CSTK
       STK     FCNSTK
       M1      =7,CTL
       LDX     BINOP4
       BRU     1,2
FCN99  ERROR   13

*      CLEAR FUNCTION. THIS ROUTINE RESTORES ALL ARGUMENTS FOR THE LAST
*      FUNCTION ON THE STACK. IF THERE ARE NO FUNCTIONS ON THE STACK IT
*      FAILS TO SKIP ON RETURN. OTHERWISE THE CALL POINT IS RETURNED IN
*      A.
ECLF   UNSTK   FCNSTK
       SBRR    CLF
       MIN     NREC
       STB     TSTACK
       UNSTK   FCNSTK
       SBRM    RERR
       STA     RDFIL
       STB     OUTFIL
       UNSTK   FCNSTK
       SBRM    RERR
       STP     TYPEP
       UNSTK   FCNSTK
       SBRM    RERR
       STP     TYPE3
       UNSTK   FCNSTK
       SBRM    RERR
       STA     CURBLK
       CLA
       LSH     9
       STA     CTL
       LSH     15
       STA     DEMLOC
       UNSTK   FCNSTK
       SBRM    RERR
       STA     CLF3
       STB     CLF2
       IF      SCAL
       SBRM    SETBLK
       ENDF
       UNSTK   FCNSTK
       SBRM    RERR
       STA     TPSTP
       LDA     CLF2
       RSH     15
       STA     CLF6
       LDA     CLF3
       ETR     =37777B
       CAX
       ADD     3,2
       ADD     =4
       STA     CLF4
       ADM     CLF6
       CAX
       ADD     0,2
       STA     CLF3
       INITDL
       STX     TFL
       LDX     CLF6
CLF20  CXA
       SKE     CLF4
       BRU     *+2
       BRU     CLF30
       CLAB
       XMA*    0,2
       XAB
       STK     TFL
       EAX     -1,2
       BRU     CLF20
CLF30  M1      TFL,CLF5
CLF31  LDX     CLF4
       CXA
       SKE     CLF3
       BRU     *+2
       BRU     CLF40
       EAX     1,2
       STX     CLF4
       UNSTK   FCNSTK
       SBRM    RERR
       XMA*    0,2
       SKG     =0
       BRU     CLF32
       SBRM    DELV
       BRU     CLF31
CLF32  SKE*    CLF5
       BRU     *+2
       BRU     CLF31
       LDX     CLF5
       XAB
       SKG     =0
       BRU     *+2
       STA     1,2
       LDX     0,2
       STX     CLF5
       BRU     CLF31
CLF40  UNSTK   TFL
       BRU     CLF50
       SKG     =0
       BRU     CLF41
       COPY    AX,BA
       XMA     0,2
       BRU     *+2
CLF41  XAB
       SBRM    DELV
       BRU     CLF40
CLF50  DLD     TFL
       MIN*    CLF
       LDA     CLF2
       ETR     =37777B
       SBRR    CLF



*      XIT POP
*      ENTRY: LXIT
ELXIT  M1      =1,OUTFIL
       LDX     CTL
       ROP     BRU,(*,2),XIT1,XIT2,XIT3,XIT4,XIT5,XIT6,XIT7
       SBRM    RERR

*      DO STEP
XIT1   LDX     FCNSTK
       LDA     0,2
       SKG     =0
       BRU     XIT10
       LDA     1,2
       BE      CSTK,RTN2
XIT10  MIN     NREC
       UNSTK   CSTK
       SBRM    RERR
       STB     CURBLK
       LRSH    14
       STA     CTL
       CLA
       LSH     14
       STA     0
       IF      SCAL
       LDA     CURBLK
       SBRM    SETBLK
       ENDF
       BRU     XITRET
*      DO PART
XIT2   LDX     CURBLK
       LDA     1,2
XIT20  STA     PARTNO
       IF      SCAL
       LDA     0,2
       CAX
       SBRM    SETBLK
       ELSE
       LDX     0,2
       ENDF
       LDA     1,2
       BNE     PARTNO,XIT1
XIT21  CXA
       STA     CURBLK
       ADD     3,2
       ADD     =3
       STA     0
       BRU     XITRET
*      TO STEP
XIT3   LDX*    CURBLK
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
       LDA     =37777777B
       SKE     1,2
       BRU     XIT21
       BRU     SEQ
*      DIRECT
XIT4   LDA     CURBLK
       SBRM    SIZSTA
       SBRM    RETBLK
       BRU     SEQA
*      SIMPLE DEMAND
XIT5   SBRM    CLD
       M1      JRT1,0
       BRU     XITRET
*      DEMAND IN FORM
XIT6   SBRM    CLD
       M1      =DIFRET-1,0
       BRU     XITRET
*      FUNCTION
XIT7   BRU     XIT3

XITRET SKN     PANFLG
       BRU     XITINT
       BRR     0
EXITIN MIN     0
       LDX     =-1
       BRS     14
       M1      =4,CASE
       SBRM    SRS
       M1      =1,OUTFIL
       SKN     STPFLG
       BRU     XITIN1
       MSG     M9
       SBRM    PSCN
       SBRM    CRLF
XITIN1 M1      =-1,PANFLG
       BRU     SEQ24


*      SAVE RUNTIME STATUS
ESRS   LDA     0
       ETR     =37777B
       STA     SRS1
       SKN     XEQFLG
       SBRM    SCLR
       LDA     SRS1
       STA     XEQFLG
       IF      SCAL
       LDA     CURBLK
       SBRM    SETBLK
       ENDF
       LDX     =CSTVAR
       LDA     ESTVAR,2
       STA     SSTVAR,2
       BRX     *-2
       INITDL
       STX     STACK
       STX     TSTACK
       INITDL
       STX     CSTK
       INITDL
       STX     FCNSTK
       SBRR    SRS

*      RESTORE RUNTIME STATUS
ERRS   EQU     *
       IF      SCAL
       LDA     SCRBLK
       SBRM    SETBLK
       ENDF
       DLD     STACK
       DLD     FCNSTK
       DLD     CSTK
       LDX     =CSTVAR
       LDA     SSTVAR,2
       STA     ESTVAR,2
       BRX     *-2
       M1      STACK,TSTACK
       LDA     =-1
       XMA     XEQFLG
       STA     0
       SBRR    RRS

*      ESCAPE PROCESSOR
EESCAP STA     ESCA
       LDA     INTMSK
       BRS     78
       SKN     DISINT
       BRU     ESCDIF
       STB     ESCB
       STX     ESCX
       LDA*    ESCAPE
       STA     ESCRET
       COPY    A
       BRS     151
       STA     INFIL
       STA     CIF
       LDX     =-1
       BRS     11
       IF      -SCAL
       LDA     CURPGE
       BNE     MSGPGE,ESCP1
       MIN     DISINT
       LDA     PAGE3
       SBRM    SETPGE
       BRS     45
       SKR     DISINT
       NOP
ESCP1  EQU     *
       ENDF
       LDX     CASE
       ROP     BRU,(*,2),ESC1,ESC2,ESC3,ESC4

ESCDIF M1      =-1,ESCPND
       LDA     ESCA
       BRU*    ESCT1

EESC1  LDX     =-2*NFILES
       COPY    A
       STA     EFILTB,2
       BRX     *-1
       BRS     10

ESC2   LDX     CMPCTL
       ROP     BRU,(*+1,2),SEQ20,IDEM1,IDIF1
IDEM1  SBRM    DEMCLR
       BRU     XITINT
IDIF1  M1      =DIFERR-1,0
       LDP     TYPE3
       STP     TYPEP
       BRU     XITINT

ESC3   MIN     PANFLG
       LDA     PANFLG
       SKG     =0
       BRU     ESC3A
       SKG     =4
       BRU     ESC3B
ESC3C  SBRM    RERR
ESC3B  LDX     =-1
       BRS     29
       M1      =2,OUTFIL
ESC3A  LDA     ESCA
       LDB     ESCB
       LDX     ESCX
       BRU*    ESCRET

ESC4   MIN     PANFLG
       LDA     PANFLG
       SKG     =4
       BRU     ESC3A
       BRU     ESC3C


ELDEL  M1      0,JRT1
       EAX*    0
       CXA
       ETR     =37777B
       BE      =4,RSTART
       BNE     =2,DELM1
*      STATEMENT CLASS
       UNSTK   STACK
       SBRM    RERR
       BNE     =-1,DELM2
*      PART
       UNSTK   STACK
       SBRM    RERR
       FIX
       STA     DELS6
       SBRM    FPART
       BRU     DELM3
       ERROR   5
DELM3  STX     DELS7
       STA     DELS8
DELM4  LDX     DELS8
       LDA     1,2
       BNE     DELS6,DELM9
       LDB     DELS7
       LDA     0,2
       XMA     DELS8
       SBRM    REMSTA
       IF      SCAL
       LDA     DELS8
       SBRM    SETBLK
       ENDF
       BRU     DELM4
DELM9  RSTBLK
       BRR     JRT1
*      STEP
DELM2  SBRM    FS
       BRU     DELM6
       ERROR   6
DELM6  CXB
       SBRM    REMSTA
       BRU     DELM9

DELM1  BNE     =3,DELM7
*      FORM
       UNSTK   STACK
       SBRM    RERR
       FIX
       MRG     =40000000B
       CLB
       SBRM    FS
       BRU     DELM6
       ERROR   7
*      PRIMARY
DELM7  STA     JRT2
       COPY    AX,A
       XMA     0,2
       SKA     =4B7
       BRU     DELM8
*      VARIABLE
       SBRM    DELV
       LDX     JRT2
       SBRM    GDBV
       BRR     JRT1
*      FUNCTION
DELM8  STA     JRT2
       SBRM    CHKSTA
       LDA     JRT2
       SBRM    SIZSTA
       SBRM    RETBLK
       RSTBLK
       BRR     JRT1



*      ENTRY: FS,FPART
*      FIND STATEMENT. SKIP IF NOT FOUND. RETURN IN X ADDRESS
*      OF NEXT EARLIER STATEMENT, AND IN A ADDRESS OF
*      CURRENT STATEMENT. BLOCK SET IS BLOCK CONTAINING STATEMENT
*      IF FOUND,ELSE STATEMENT PROCEEDING.
EEFS   STP     FS2
       SKN     FS2           IS STATEMENT TO BE FOUND A FORM?
       BRU     FS10          NO
       SKG     SVSTN1        IS FORM TO BE FOUND BEFORE SAVED FORM?
       BRU     FS12          NO,USE NORMAL SCAN.
FS14   EQU     *             USE SAVED POINTER FOR START OF SCAN.
       IF      SCAL
       LDA     SVSTPT
       CAX
       SBRM    SETBLK
       ELSE
       LDX     SVSTPT
       ENDF
       BRU     FS7
FS10   SKN     SVSTN1        IS SAVED STATEMENT A FORM?
       BRU     FS11          NO,CHECK IF IT CAN BE USED AS SCAN START.
FS12   EQU     *
       IF      SCAL
       LDA     FL
       SKN     FS2
       LDA     SL
       SBRM    SETBLK
       ENDF
       SKN     FS2
       BRU     FS9
*      FORM
       LDX     FL
       BRU     FS7
FS9    M1      PSL,FS21
       LDX     SL
FS8    LDA     1,2
       SKE     FS2
       BRU     FS4
       LDA     2,2
       SKE     FS3
       BRU     FS6
*      EXACT MATCH
       CXA
       LDX     FS21
       SBRR    FS
FS4    SKG     FS2
       BRU     FS7
       BRU     FS5
FS7    LDA     0,2
       STX     FS21
       SKG     =0
       BRU     FS20
       STA     FS22
       CAX
       IF      SCAL
       SBRM    SETBLK
       ENDF
       BRU     FS8
FS6    SKG     FS3
       BRU     FS7
*      NO MATCH
FS5    LDX     FS21
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
FS20   MIN*    FS
       SBRR    FS
FS11   SKG     SVSTN1        IS STATEMENT TO BE FOUND BEFORE SAVED?
       BRU     *+2           NO
       BRU     FS14          YES,USE AS START OF SCAN
       SKE     SVSTN1        ARE THEY THE SAME PART?
       BRU     FS12          NO,USE NORMAL SCAN.
       XAB                   YES,CHECK STEP NUMBER.
       SKG     SVSTN2        IS STEP BEFORE SAVED STEP?
       BRU     FS12          NO
       BRU     FS14          YES

EFPART STA     FS2
       LDX     SL
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
       M1      PSL,FS21
FPART1 LDA     1,2
       SKE     FS2
       BRU     FPART3
*      FOUND
       CXA
       LDX     FS21
       SBRR    FPART
FPART3 SKG     FS2
       BRU     FPART2
       MIN*    FPART
       LDX     FS21
       IF      SCAL
       CXA
       SBRM    SETBLK
       ENDF
       SBRR    FPART
FPART2 LDA     0,2
       STA     FS22
       STX     FS21
       CAX
       IF      SCAL
       SBRM    SETBLK
       ENDF
       BRU     FPART1

*      TYPE MESSAGE
*      ENTRY: TMSG,TMSG8
ETMSG  LDA     MSGPGE
       SBRM    SETPGE
       IF      SCAL
       STA     PAGE3
       ENDF
       BRU     XTMSG
ETMSG8 LDA     PAGE3
       SBRM    SETPGE
       SBRR    TMSG


*      DEFINE STORAGE
*      ENTRY: INIT

EINIT  SBRM    GETPGE
       SBRM    RERR
       LDA     =6
       SBRM    GETBLK
       SBRM    RERR
       STA     SL
       STA     FL
       STA     SVSTPT        INITIALIZE SAVED POINTER.
       CAX
       LDA     =37777777B
       CAB
       STP     1,2
       STP     SVSTN1        INITIALIZE SAVED STEP NUMBER
       M1      =1,(3,2)
       CLB
       LDA     CRCH
       LSH     16
       STA     4,2
       M1      ZXIT,(5,2)
       IF      -SCAL
       M1      CURPGE,PAGE3
       ENDF
       BRS     43
       ETR     =77B6
       LRSH    3
       MRG     =SL
       STA     PSL
       LDA     =100
       SBRM    GETBLK
       SBRM    RERR
       STA     LSTBLK
       LDA     INTMSK
       BRS     78
       MIN     CONCTL
       BRU     SEQA

*      RSTART CAL
ERSTRT BSS     0
       LDA     MSGPGE
       SBRM    SETPGE          RELABEL IN MESSAGE PAGE
       IF      SCAL
RSTRT1 GCI     RBPNT           GET PROGRAM RELABELING BYTE
       BRU     RSTRT2          PROGRAM RELEASED
       BRS     121             RELEASE PAGE
       BRU     RSTRT1          GET NEXT BYTE
RSTRT2 BSS     0
       ELSE
       LDA     PAGE3           GET PROGRAM PAGE
       BRS     121             RELEASE
       ENDF
       BRS     147             CLOSE ALL BUT COMMAND FILE
       BRS     43              GET TEMPORARY RELABELING
       COPY    AB
       LDX     =-3             RELEASE THREE PAGES
       BRU     RSTRT4          ENTER RELEASE RELABELING LOOP
RSTRT3 BRS     121             RELEASE PAGE
       COPY    BA              GET RELABELING BYTES
RSTRT4 LRSH    6
       ETR     =77B
       BRX     RSTRT3
       LDX     CIF
       BRS     121             RELEASE TEMPORARY STORAGE PAGE
       COPY    XA              PASS COMMAND INPUT FILE
       BRU     START

*      RUNTIME ERRORS
*      ENTRY: ERR
EERR   STX     ERRT1
       STA     TYPE1
       RSTBLK
       SBRM    ERREC
       MSG     M16
       SBRM    PSCN
       LDA     TYPE1
       SKE     =0
       BRU     ERRV1
ERR7   LDX     ERRT1
       LDX     ERTAB-1,2
       SBRM    TMSG
       SBRM    CRLF
       BRU     SEQ24
ERRV1  SKG     =37777B
       BRU     ERRV2
       ETR     =37777B
       SUB     =VL
       CAX
       LDA     FSVT1
       SBRM    FSV
       SBRM    RERR
       SBRM    TSSV
ERRV3  CLA
       CIO     OUTFIL
       BRU     ERR7
ERRV2  SBRM    PVAR
       BRU     ERRV3
*      ORDINARY RUMTIME ERRORS
ERTAB  DATA    ERMSG1,ERMSG2,ERMSG3,ERMSG4,ERMSG5,ERMSG6,ERMSG7
       DATA    ERMSG8,ERMSG9,ERMS10,ERMS11,ERMS12,ERMS13,ERMS14,ERMS15
       DATA    ERMS16,ERMS17,ERMS18,ERMS19,ERMS20,ERMS21
       DATA    ERMS22,ERMS23,ERMS24,ERMS25

       FRGT    N:,X:


LM     EQU     *
       END

@ >@