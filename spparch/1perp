1PERP ** FICH/FRAME BREAK *****
FORK1509
FORK   IDENT   20 FEB 1979 MCH 1509 FORK CONTROLLER FOR PERP

BGNN   BRS 179                 TAKE AWAY SUPERVISORY SCHEDULING
       BRS 143                 SKIP IF BIT MAP SET
       BRU SWAIT (WAIT FOR BIT MAP SET)
ST     BRS 43                  READ RELABELING
       STP FORKT+4             STORE RELABELING IN FORK TABLE
       LDA =BEGIN              START ADDR OF PDUPB
       STA FORKT
       LDA =FORKT              ADDRESS OF FORK T
       MRG =634B5              FORK STATUS BITS
       BRS 9                   START FORK
PHOE   LDA FORKT
       ETR =37777B
       CAB
       LDA =60
       BRM XMSG WRITE OUT INDICATION OF CRASH
       LDP PT
       BRS 91
       STP TP
       GCI TP
       NOP
       GCI TP
       NOP
       GCD TP
       NOP
       GCD TP
       NOP
       GCD TP
       NOP
       GCD TP
       NOP
       LDA ='  /'
       WCI TP

       LDP     USNAME
       STP     TPX
       GCD     TPX
       BRU     AGAIN
       WCD     TP
       BRU     *-3
AGAIN  BRS 17
       LDP TP
       LDX =1
       BRS 65
       BRU RELESE
       STA OFIL
       LDP FORKT+4
       BRS 44
       CLA
       WIO OFIL
       LDA =37777B
       WIO OFIL
       CLA
       WIO OFIL
       LDA =40000B
       CLX
       BIO OFIL
       NOP
*
*      CRASH HAS BEEN WRITTEN OUT
*
RELESE BRS 43
       ETR =77B
       STA MY
       LDX =-PTABSZ
       LDA PAGE,2
       SKE MY
       BRS 121
       BRX *-3
READ   BRS 17
       MIN     KILLIT
       SKN     KILLIT
       BRM     SUICID          SORRY PERP
       LDP GOFILE
       BRS 64
       BRU READ
       STA OFIL
       WIO OFIL
       WIO OFIL
       WIO OFIL

       LDA =14000B
       CLX
       BIO OFIL
       BRU FILER

       SKE =14000B
       BRU FILER
       BRS 17
       BRU ST

SWAIT  LDA =300000             DISMISS 
       BRS 81
       BRU BGNN

FILER  LDA =61
       BRM XMSG
       BRU READ
FORKT  BSS 8
MY     ZRO
OFIL   ZRO
PT     DATA BUFFA*3-1,BUFFA*3-1
TPX    BSS     2
USNAME DATA    USNAMS*3-1,USNAMS*3-1+11
USNAMS ASC     '(PERPCRASH)'
TP     BSS 2
GOFILE DATA GF*3-1,GF*3+4
GF     ASC     '1PERP'
PAG    DATA    44B,45B,46B,47B,50B,51B,52B,53B,54B,55B
       DATA    56B,57B,60B,61B,62B,63B,64B,65B,66B,67B
       DATA    70B,71B,72B,73B,74B,75B,76B,77B
PAGE   BSS     0
PTABSZ EQU     PAGE-PAG
       BSS     4               DO NOT REMOVE
BUFFA   BSS     50
KILLIT DATA    -5
*
*      THIS ROUTINE DISMISSES UNTIL KILLIT IS SET NEGATIVE
*
SUICID:        ZRO
       LDA     =932404         15 MIN
       BRS     81
       SKN     KILLIT
       BRU     *-3
       BRR     SUICID
XMSG   ZRO
       STA T1
       BRM LOG
       LDX JOB
       BRR XMSG
1STADR EQU     437400B
LSTADR EQU     437777B
$LOG    ZRO
       LDX BUFFX
       STA BUFF+2,2
       STB BUFF+1,2
       LDX JOB
       LDB SYS,2
       LSH 12
       CLA
       COPY XA,BA
       MRG =1B7
       LDX BUFFX
       STA BUFF,2

       LDA =-1
       CLX
       BRS 176

       LDX BUFFX
       STA BUFF+3,2
       BRM WT
       BRR LOG                 WRITE ENTRY TO LOG

*
*      THIS ROUTINE WRITES LOG ENTRIES
*
WT     ZRO
       LDA =-1
       STA BUFF+4,2
       EAX 4,2
       STX BUFFX
WT1    LDA DADR
       SKG =LSTADR
       SKG =1STADR
       LDA =1STADR
       CAB
       LDA =BUFF
       LDX =100B
       BRS 125
       LDA BUFFX
       SKG =BUFFE
       BRR WT
       MIN DADR
       LDA DADR
       SKG =LSTADR
       BRU *+3
       LDA =1STADR
       STA DADR                (FIXUP FOR WRAPAROUND)
       CAB
       LDA =BUFF
       LDX =100B
       BRS 124
       LDA =-1
       STA BUFF
       CLA
       STA BUFFX
       BRU WT1

$LOG2  ZRO
       STP TEMP
       LDA =300
LOG2B  LDX JOB
       LDB SYS,2
       CLA
       LSH 12
       COPY XA,BA
       LDX BUFFX
       MRG =2B7
       STA BUFF,2
       LDA BUFFX
       ADD =BUFF
       MUL =3
       LSH 23
       ADD =2
       STA POINT
       STA POINT+1
       LDX =-9
       GCI TEMP
       BRU LOG2A
       WCI POINT
       BRX *-3

       LDX BUFFX
       BRM WT
       BRU LOG2B
LOG2A  CLA
       WCI POINT
       BRX *-1
       LDX BUFFX
       BRM WT
       BRR LOG2

*
*      THIS ROUTINE FINDS THE END OF THE LOG
*
$IDISC ZRO

       LDB =1STADR             THIS IS THE START OF THE LOG
       STB DADR
F2     LDA =BUFF
       LDX =100B
       BRS 124                 READ DISC
       CLX
F1     SKN BUFF,2              LOOKING FOR A -1
       BRU *+2
       BRU FOUND               FOUND -1
       EAX 4,2
       CXA
       SKG =BUFFE
       BRU F1
       LDA DADR
       ADD =1
       SKG =LSTADR
       BRU *+2
       BRU F3
       STA DADR
       CAB
       BRU F2
F3     LDA =1STADR
       CLX
       STA DADR (START AT BEGINNING)
FOUND  STX BUFFX               THIS IS WHERE WE WRITE
       BRR IDISC
BUFFX  ZRO
DADR   DATA 1STADR
TEMP   BSS 2
POINT  BSS 2
BUFF   BSS 100
BUFFE  EQU 63
       NOLIST EXT
       END
1PERP ** FICH/FRAME BREAK *****
FORK1509 SYMSORT

SYM.  PG.LN. IDENT.

1STADR  4 15 FORK    AGAIN   2  3 FORK    BGNN    1  3 FORK    
BUFF    7 26 FORK    BUFFA   3 38 FORK    BUFFE   7 27 FORK    BUFFX   7 22 FORK    
DADR    7 23 FORK    F1      7  2 FORK    F2      6 37 FORK    F3      7 17 FORK    
FILER   3 19 FORK    FORKT   3 22 FORK    FOUND   7 20 FORK    GF      3 31 FORK    
GOFILE  3 30 FORK    IDISC   6 33 FORK    KILLIT  3 39 FORK    LOG     4 17 FORK    
LOG2    5 35 FORK    LOG2A   6 23 FORK    LOG2B   5 38 FORK    LSTADR  4 16 FORK    
MY      3 23 FORK    OFIL    3 24 FORK    PAG     3 32 FORK    PAGE    3 35 FORK    
PHOE    1 13 FORK    POINT   7 25 FORK    PT      3 25 FORK    PTABSZ  3 36 FORK    
READ    2 32 FORK    RELESE  2 24 FORK    ST      1  6 FORK    SUICID  4  4 FORK    
SWAIT   3 15 FORK    TEMP    7 24 FORK    TP      3 29 FORK    TPX     3 26 FORK    
USNAME  3 27 FORK    USNAMS  3 28 FORK    WT      5  3 FORK    WT1     5  8 FORK    
XMSG    4 10 FORK    
1PERP ** FICH/FRAME BREAK *****
MSG2PDB1509
2PD15 IDENT
ERROR NO E01 'DISMISSING FOR'
ERROR NO E02 'MUST WAIT ON COMPUTER'
ERROR NO E03 'TOO LATE TO RUN JOB'
ERROR NO E04 'PERP JOB IS'
ERROR NO E05 'BAD COMPUTER NUMBER'
ERROR NO E06 'JOB LIST UNAVAILABLE'
ERROR NO E07 'BAD NAME'
ERROR NO E08 SAVING TOUT FILE
ERROR NO E09 RESTARTING INCOMPLETE JOB
ERROR NO E010 RESTART FILE NAME EXISTS
ERROR NO E011 'NO MORE RESTARTS ALLOWED'
ERROR NO E012 'EXCEPT USED WITHOUT A LIST OF DATES/'
ERROR NO E013 'NO FURTHER DATES/'
ERROR NO E014 'INVALID WORD OR GARBAGE FOUND IN LIST/'
ERROR NO E015 'CONTINUATION WITH "AND-AFTER-BEFORE-ETC." DOES NOT END/'
ERROR NO E016 'CONTINUATION FROM DATE WORD WITH NO DATE WORD AFTER/'
ERROR NO E017 I MAY BE HUNG
ERROR NO E018 'PER. JOB DELETED/'
1PERP ** FICH/FRAME BREAK *****
MSG2PDB1509 SYMSORT

SYM.  PG.LN. IDENT.

ERROR   1 19 2PD15   ERROR   1 18 2PD15   ERROR   1 17 2PD15   
ERROR   1 16 2PD15   ERROR   1 15 2PD15   ERROR   1 14 2PD15   ERROR   1 13 2PD15   
ERROR   1 12 2PD15   ERROR   1 11 2PD15   ERROR   1 10 2PD15   ERROR   1  9 2PD15   
ERROR   1  8 2PD15   ERROR   1  7 2PD15   ERROR   1  6 2PD15   ERROR   1  5 2PD15   
ERROR   1  4 2PD15   ERROR   1  3 2PD15   ERROR   1  2 2PD15   
1PERP ** FICH/FRAME BREAK *****
MSGPDUPB1509
PDUP15 IDENT
ERROR NO E01 VERSION 15.09
ERROR NO E02 NO COMMANDS FILE--JOB DELETED
ERROR NO E03 UNABLE TO START COPY - ABORTING JOB.
ERROR NO E04 TRBL STARTING COPY, WILL RETRY A FEW TIMES.
ERROR NO E05 COMMAND FILE ERROR, JOB ABORTED
ERROR NO E06 TROUBLE WITH USER OR FILE NAME
ERROR NO E07 LOST CIRC. AGAIN -JOB ABORTED
ERROR NO E08 LOST CIR.- WILL RETRY ONCE
ERROR NO E09 CIR. LOST BEFORE JOB END
ERROR NO E010 COULD NOT SEND ALL OF TOUT FILE
ERROR NO E011 COPYING TERMINAL OUTPUT
ERROR NO E012 CIRCUIT BROKE BEFORE COMPLETE TOUT SENT
ERROR NO E013 RETRYING
ERROR NO E014 COULD NOT SEND MAIL
ERROR NO E015 END OF JOB
ERROR NO E016 $ABORTING ALL JOBS$/
ERROR NO E017 CIRCUIT BLDG. SLOW - TRYING AGAIN
ERROR NO E018 TIME RAN OUT
ERROR NO E019 FILE COPY TAKING TOO LONG
ERROR NO E020 NO CHARS. FOR 3 MIN, RESTARTING
ERROR NO E021 TAKING TO LONG TO COPY TERM. OUTPUT
ERROR NO E022 TOO LONG TO SEND MAIL, RETRYING
ERROR NO E023 UNABLE TO CONTACT SLAVE
ERROR NO E024 TROUBLE OPENING TEMP FILE/
ERROR NO E025 EMERGENCY BIT ON
ERROR NO E026 EMERGENCY BIT OFF
ERROR NO E027 BAD USER NAME
ERROR NO E028 COMPUTER UNAVAILABLE
ERROR NO E029 CHANNEL ERROR 
ERROR NO E030 BUFFER ZAP
ERROR NO E031 SCHED ALLOW
ERROR NO E032 SCHED NOT ALLOW
ERROR NO E033 ISSUING EMERGENCY MESSAGE
ERROR NO E034 PHASE II ERROR
1PERP ** FICH/FRAME BREAK *****
MSGPDUPB1509 SYMSORT

SYM.  PG.LN. IDENT.

ERROR   1 35 PDUP15  ERROR   1 34 PDUP15  ERROR   1 33 PDUP15  
ERROR   1 32 PDUP15  ERROR   1 31 PDUP15  ERROR   1 30 PDUP15  ERROR   1 29 PDUP15  
ERROR   1 28 PDUP15  ERROR   1 27 PDUP15  ERROR   1 26 PDUP15  ERROR   1 25 PDUP15  
ERROR   1 24 PDUP15  ERROR   1 23 PDUP15  ERROR   1 22 PDUP15  ERROR   1 21 PDUP15  
ERROR   1 20 PDUP15  ERROR   1 19 PDUP15  ERROR   1 18 PDUP15  ERROR   1 17 PDUP15  
ERROR   1 16 PDUP15  ERROR   1 15 PDUP15  ERROR   1 14 PDUP15  ERROR   1 13 PDUP15  
ERROR   1 12 PDUP15  ERROR   1 11 PDUP15  ERROR   1 10 PDUP15  ERROR   1  9 PDUP15  
ERROR   1  8 PDUP15  ERROR   1  7 PDUP15  ERROR   1  6 PDUP15  ERROR   1  5 PDUP15  
ERROR   1  4 PDUP15  ERROR   1  3 PDUP15  ERROR   1  2 PDUP15  
1PERP ** FICH/FRAME BREAK *****
2PDB1509
2PD15  IDENT   20 FEB 1979    15.09
*15.06 CHANGES MAXDT TO 5 MIN RE 59688

       LIST SRC,COM,CALL
SKNE   OPD     536B5

SPTR   OPD     514B5,2
MAXDT  EQU      05             MINUTES
MAXDT1 EQU     MAXDT*107/60    107 IN AN HOUR


MSG    MACRO   D,E,1
X      EQU     X+1
       LDA     =X
       BRM     XMSG
       NOLIST  SRC
       REM     ERROR NO E(1)         D(1)
       LIST    SRC
K      NARG
       IF K-1
       BRU     D(2)
       ENDF
       ENDM

X      EQU     34



*GETS PERIODIC JOB

$GPJB  ZRO
       BRM     MKLIST
       LDA     =-1
       STA     NODUPS
       CLA
       STA     TCRP            MUST CLEAR IT WHEN WE START (CURSOR POS).
GPJBI  LDP     FNP             //PERPLIST
       MRG     =502B5          RANDOM FILE BITS
       BRS     64              OPEN FILE CONTAINING LIST
       BRU     GPJ1            UNAVAILABLE OR BAD
       STA     FL              FILE NUMBER FOR //PERPLIST
GPJ2   LDA     TCRP            C.P.
       BRM     LINK            GET CURSOR POSITION OF NEXT (FIRST JOB) IN LINK
       BRU     GPJ1A           NO FURTHER JOBS IN LIST
       STA     T3              SAVE C.P. OF CURRENT JOB IN T3
       STA     TCRP            FOR NEXT TRIP THROUGH STORE NEXT TO READ
       CLX
GPJ2A  LDA     T3              GET POSITION OF NEXT JOB IN LIST
       LDB     =-1
       SKB     CRP,2           CHECK TO SEE IF SLOT IS AVAIL
       BRU     *+2             NO, HAS A C.P. 
       BRU     GPJ21           YES IS   0
       SKE     CRP,2           A=CP?
       BRU     GPJ2B           NO
       BRU     GPJ2            YES,SO LETS GET THE NEXT ONE
GPJ2B  EAX     1,2             NEXT JOB
       BRU     GPJ2A
GPJ1A  SKN     NODUPS
       BRU     GPJ1A1
       CLA
       STA     NODUPS          ALLDUPLICATE USERS AS WE HAVE NO OTHERS
       STA     TCRP
       BRU     GPJ2            FIND ANOTHER ONE
GPJ1A1 LDA     =MAXDT1
       STA     T1
       BRU     GPJNS           GO TO SLEEP OR DON'T SCHEDULE
GPJ21  LDA     T3              C.P. OF NEXT JOB TO GER
       STA     TCRP            START LIST SEARCH FROM HERE
       WIO     FL              GET TIME TO RUN
       STA     T1              TIME JOB IS TO RUN
       SUB     CURTM           SUB TIME NOW
       SKG     =0
       BRU     GPJ3            TRY TO RUN THE JOB
       STA     T1              NOT NOW
       SKN     NODUPS
       BRU     GPJNS
       BRU     GPJ1A
GPJNS  CLA                     NO JOBS TO SCHEDULE, SO WE SLEEP
       STA     TCRP            RESET TO BEGINNING OF FILE
       LDA     JBCT
       SUB     BFCT
       SKG     =0              ANY JOBS RUNNING?
       BRU     GPJ1B           NO, SO WE WILL SLEEP
       BRS     17              JUST IN CASE
       LDA     T1
       MUL     =30
       DIV     =53             JUST A SWEET LITTLE CONVERSION
       SKG     =MAXDT
       BRU     *+2
       LDA     =MAXDT          INSURE THAT WE LOOK EVERY MAXDT MINUTES
       CAB
       MIN     PERSW           DON'T ALLOW PERP SCHEDULING
       BRM     SJBNJ           SCHEDULE RESTART
       BRM     MKLIST
       SKR     PERSW           ALLOW PERP SCHEDULING
       NOP
       CLA                     LETS START AT THE BEGINING OF //PPLIST
       STA     TCRP
       BRU     GPJBI
GPJ1B  LDA     T1              LETS FIGURE TIME TO DISMISS
       SKG     =MAXDT1
       BRU     *+2
       LDA     =MAXDT1
       MUL     =33554
       LSH     23
       ADD     =60000          AT LEAST ONE MINUTE
       STA     DT
       BRM     CLFL
       LDA     DT
       ABC
       DIV     =30000
       CAB
       MSG     'DISMISSING FOR'
       BRS     156             JUST IN CASE WE MISSED SOMEONE
       BRM     SETBIT
       LDA     DT
       BRS     81
       LDA     =-1
       LDX     =-NJ
       STA     CRP+NJ,2
       BRX     *-1
       BRU     START
GPJ3   LDX     JOB             GET JOB #
       LDB     T3              GET C.P. OF THIS JOB
       STB     CRP,2
       WIO     FL              GET USERS TIME ZONE,, COMP #
       STA     T               SAVE 
       LRSH    12
       STA     UZONE           STORE USERS TIME ZONE
       LDA     T
       ETR     =777B           GET COMPUTER NUMBER
       LDX     JOB
       LDB     =-1
       STB     940SW,2         CHECK FOR VALID 940 CMPTR
       SKG     =LCPN
       SKG     =FCPN-1
       BRU     *+2             IS X
       BRU     GPJ3A
       SKG     =L940
       SKG     =F940-1         IS VALID 9?
       BRU     GPJ7            BAD NUMBER
       STA     940SW,2         ASSIGN IX COMPUTER TO JOB
GPJ3A  STA     SYS,2           SYSNO
       STA     T1              
       CLX
GPJ30  SKB     CLIST,2
       BRU     *+2
       BRU     GPJ3C           MUST WAIT ON COMPUTER
       SKNE    CLIST,2
       BRU     GPJ3B           FOUND IT- CMPTR OK
       EAX     1,2
       BRU     GPJ30
GPJ3C  SKE     LSTNOT
       BRU     *+2
       BRU     GPJ3C1
       SKE NODUPS (IF ALLOWING THE PRINT ); BRU GPJ3C1 (ELSE NO PRINT)
       MSG     'MUST WAIT ON COMPUTER'
GPJ3C1 BRS     17
GPJ3D  LDX     JOB
       LDA     =-1
       STA     CRP,2           NEGATE CP FOR THIS JOB
       LDA     SYS,2
       STA     LSTNOT
       BRU     GPJBI
GPJ3B  WIO     FL              GET TMWD
       STA     TMWD
       LDX     JOB
       WIO     FL              C.P. FOR VALID,KILL
       SKA     =4B7            -1 => KILL 0=> OK TO RUN +=> OK
       BRU     GPJ3RE          KILL JOB AFTER RESCHEDULEING HIM
       STA     RESTAR,2
       WIO     FL              FUTURE USE
       STA     FLAGS,2
       BRM     CKTMWD          CAN WE RUN THIS JOB?
       BRU     GPJ3E
GPJ3F  MSG     'TOO LATE TO RUN JOB'
       CLA
       STA     NOPRNA          LETS PRINT HIS NAME
       BRM     GPJNM           GO GET THE NAME
       BRU     GPJDEL          DELETE HIM SINCE HE'S NOT RIGHT
       BRM     EPJB            ALLOW HIM TO RESCHEDULE OR DELETE HIM
       BRU     GPJ3D
GPJ3E  LDA     =-1
       STA     NOPRNA
       BRM     GPJNM           GO GET THE NAME
       BRU     GPJDEL          BAD SO DELETE
       SKN     NODUPS          ALLOW DUPLICATE NAME IN JOB LIST?
       BRU     GPJ3E1          YES ITS OK
       CLX                     SORRY NOT NOW
GPJ3E2 CXA                     LETS SEE IF WE ARE CURRENT JOB
       SKNE    JOB
       BRU     GPJ3E3
       LDA     UP,2
       LDB     UP1,2
       SKSE    PUP
       BRU     GPJ3E3
       LDA     =-1
       LDX     JOB
       STA     CRP,2
       BRU     GPJ2            SORRY TURKEY 
GPJ3E3 CXA
       SKG     MAXJB
       BRU     *+2
       BRU     GPJ3E1          OK TO DO JOB
       EAX     1,2
       BRU     GPJ3E2
GPJ3E1 MSG     'PERP JOB IS'
       BRM     CLFL            CLOSE FILE,CIRCUITS
       LDP     IDENP
       BRM     LOG2            WRITE TO LOG
       BRR     GPJB            GOOD
GPJ3RE BRM     GPJNM           GET INFO
       BRU     GPJDEL          DELETE JOB CAUSE HE DON'T WANT TO RUN.
       BRM     EPJB            WE HAVE TO RESCHEDULE BEFORE WE DEL
       BRU     GPJ3D           NOW SET C.P. TO -1
GPJ7   LDX     JOB
       STA     SYS,2
       MSG     'BAD COMPUTER NUMBER',GPJDEL
GPJ1   MSG     'JOB LIST UNAVAILABLE'
       LDA     =6000
       BRS     81              DELAY 6 SECONDS
       BRS     17
       BRU     GPJBI           RETRY

GPJNM  ZRO     0               GET PERP JOB NAME
       LDX     JOB
       LDA     NP1,2
       STA     PUP
       STA     PUP+1
       LDA     NP3,2
       STA     CFP
       STA     CFP+1
       LDA     NPJ,2
       STA     T3
       STA     T4
       LDA     IDENP           JOB IDEN
       STA     IDENP+1
       CIO     FL              READ CHAR OF JOB IDEN
       ETR     =177B
*
*      USERNAME(SEMI-COLON)PJCODE:FILE.EXT
*
GPN1   WCI     PUP             STORE CHAR IN PP
       WCI     IDENP           STORE CHAR
       CIO     FL
       ETR     =177B
       SKNE    =32B            COLON
       BRU     GPN3            YES, MUST BE FILE NAME
       SKNE    =33B            SEMI-COLON
       BRU     GPN2            YES MUST BE PJ CODE
       SKE     CR
       BRU     GPN1
GPN2   CIO     FL
       ETR     =177B
       SKNE    =32B            COLON
       BRU     GPN3            MUST BE A FILE
       SKNE    CR              NO :
       BRU     GPNE1           ERROR   - SHOULD BE A COLON- PUNT!
       WCI     T3              NO CR
       BRU     GPN2
GPN3   WCI     IDENP
       CIO     FL
       ETR     =177B
       SKNE    =0
       BRU     GPN4            GOT IT ALL - LEAVE
       SKNE    CR
  BRU     GPN4
       WCI     CFP
       BRU     GPN3
GPN4   SKN     NOPRNA
       BRU     *+2
       BRU     GPN4A
       BRM     CLFL
       LDP     IDENP
       BRM     LOG2            WRITE NAME TO LOG
GPN4A  MIN     GPJNM           SUCCESS
       BRR     GPJNM           FAILED
GPNE1  MSG     'BAD NAME'
       BRR     GPJNM
GPJDEL BRS     17
       BRM     DELJB
       LDX     JOB
       LDA     =-1
       STA     CRP,2
       BRU     GPJBI

*
*      THIS ROUTINE CHECKS TO SEE IF TMWD IS VALID TO RUN NOW
*
CKTMWD ZRO
       CLA
       STA     ATIM
       STA     BTIM
       CLX
       LDA     =-1
       BRS     176             READ DATE AND TIME
       ADD     =1
       COPY    AB
       LDA     UZONE           USERS TIME ZONE
       MRG     =300B
       COPY    AX,BA,B
       BRS     176
       ETR     =37B
       STA     T1
       LDA     TMWD
       SKA     =34B6
       BRU     *+2
       BRR     CKTMWD
       LDB     =34B6
       SKM     =1B7
       BRU     *+2
       BRU     BEF
       SKM     =24B6
       BRU     *+2
       BRU     BEF             NOT AFTER
       SKM     =14B6           BETWEEN
       BRU     *+2
       BRU     BEFAFT
       SKM     =34B6
       BRR     CKTMWD
       LRSH    5               NOT BETWEEN
       ETR     =37B
       STA     BTIM
       LSH     5
       ETR     =37B
       STA     ATIM
CKTM1  LDA     BTIM
       SKE     =0
       BRU     *+3
       LDA     =24
       STA     BTIM
       LDA     ATIM
       SKG     BTIM
       BRU     RNG             A<=B
       SKG     T1              B<A
       BRR     CKTMWD          B<A<=T
       LDA     BTIM
       SKG     T1
       BRU     GPJ3F           B<=T, B<A
       BRR     CKTMWD          T<B<A
RNG    SKG     T1
       BRU     *+2
       BRU     GPJ3F           T<A<=B
       LDA     BTIM
       SKG     T1
       BRU     GPJ3F           A<=B<=T
       BRR     CKTMWD          A<=T<B


BEFAFT LRSH    5
       ETR     =37B
       STA     ATIM
       LSH     5
       ETR     =37B
       STA     BTIM
       BRU     CKTM1

BEF    ETR     =37B
       STA     BTIM
       BRU     CKTM1

BTIM   ZRO
ATIM   ZRO

*
*      LINK SETS UP //PERPLIST TO RIGHT C.P TO READ NEXT LINK
*
LINK   ZRO
       SKNE    =-1
       BRR     LINK
       SCP     FL              SET C.P.
       BRR     LINK
       WIO     FL              READ FILE- SHOULD BE C.P (CHAR)
       SKNE    =-1
       BRR     LINK
       STA     T               STORE C.P OF NEXT LINK
       SCP     FL              SET POSITION TO NEXT JOB ENTRY
       BRR     LINK
       WIO     FL              TO LINE IT UP     READ WORD 1 OF RECORD
       LDA     T               GET POSITION OF THIS RECORD
       MIN     LINK
       BRR     LINK

*DELETES JOB
$DELJB ZRO
       BRM OPFL
       CLA
DJB1   STA PPOS
       SCP FL
       HLT
       WIO FL
       LDX JOB
       SKE CRP,2
       BRU DJB
       SCP FL
       HLT
       WIO FL
       STA NPOS
       LDA PPOS
       MRG =4B7
       SCP FL
       HLT
       LDA NPOS
       WIO FL
       BRM DELETE
       BRR DELJB
DJB    SKE =-1
       BRU DJB1
       BRR DELJB (JOB ALREADY DELETED)

*END PERIODIC JOB AND GET NEXT DATE FOR RUN
$EPJB  ZRO
       LDX     JOB
       LDA     JBSTA,2
       SKNE    =4              IF 4 WE DONE IT OK
       BRU     EPJB1           WE FINISHED IT OK
       LDA     J4,2
       SKG     =0              0 => NO VAL/KIL -1 => KILL + => VALID
       BRU     *+2
       BRU     EP4             + => DO NOT DELETE
REST   SKN     ALLSW           IF NEGATIVE, ALLOWS RESTART LOGIC
       BRU     EPJB1           RESTART NOT ALLOWED.
       LDA     JBSTA,2         GET JOB STATUS
       SKE     =2              IS IT 2?
       BRU     EPJB1
       BRM     RESNXT
       BRM     RESSET
       BRU     EP4
*
*      THIS CODE IS TO DO THE FOLLOWING:
*              1) OPEN (DUPJOB)//RESTART
*              2) READ POS 0
*              3) READ* POS 0 (THIS IS FILE NAME)
*              4) RENAME //TOUTX TO ABOVE FILE NAME
*              5) INCR POS 0 AND CLOSE FILE
*              6) RETURN
*
ALLSW  DATA    -1              ALLOSW RESTART IF -1 (I.E. SAVING //TOUT FIL)
MAXRES DATA    26*3            CURSOR POSITION
RESCP  ZRO
TFNAME BSS     5
TFPTR  DATA    3*TFNAME-1
       DATA    3*TFNAME+14
RFILE  ZRO                     FILE NUMBER FOR //RESTAR
RENFIL ZRO     0               THIS WILL CONTAIN THE FILE NAME FROM 1)
RENPTR DATA 3*RENFIL-1         BEG PTR
       DATA 3*RENFIL+2         END PTR (FILE IS 3 CHAR LONG)
RESFIL ASC     '(DUPJOB)//RESTART' RESTART FILE NAME KEPT HERE
RESPTR DATA 3*RESFIL-1
       DATA 3*RESFIL+16        END PTR
OLDPTR ZRO     0               WILL HOLD PTR TO OLD NAME
NEWPTR ZRO     0               END PTR OLD BEG PTR NEW
       ZRO     0               END PTR NEW NAME
OLDSTR BSS     4               OLDNEW
RESNXT ZRO
       BRM     OPRES           OPEN (DUPJOB)//RESTART
RNXT1  LDA     =3
       SCP     RFILE           PUT IT TO READ
       BRM     STPRE          STOP RESTART
       RCP     RFILE           READ CURSOR POS
       STA     RESCP
       SKG     MAXRES
       BRU     *+2
       BRM     STPRE
       WIO     RFILE
       SKA     =4B7            IN USE?
       BRU     *-7             YES TRY NEXT ONE
       STA     RENFIL          OK TO USE IT
       LDP     RENPTR
       BRS     48              IS IT THERE?
       BRU     *+2             NOPE- GOOD IT SHOULD N'T BE
       BRM     RESERR          WRITE MSG + SET FILE TO IN USE
       LDA     RESCP
       MRG     =4B7
       SCP     RFILE
       BRM     STPRE          STOP RESTART
       LDA     RENFIL
       MRG     =4B7
       WIO     RFILE
       LDX     JOB
       BRM     CALFIL
       MRG     =4B7
       SCP     RFILE
       BRM     STPRE          STOP RESTART
       SPTR    TFNAME
       STP     T3
       LDX     =-5
       CLA
       STA     TFNAME+5,2
       BRX     *-1
       LDX     JOB
       LDA     TP,2
       LDB     TP1,2
       STP     T1
       GCI     T1
       BRU     *+3
       WCI     T3
       BRU     *-3
       LDX     =-5
       LDA     TFNAME+5,2
       WIO     RFILE
       BRX     *-2
       LDA     RFILE
       BRS     20
       SPTR    OLDSTR          SETUP FOR OLD STRING
       STP     OLDPTR
       LDP     TFSP            //TOUTX
       BRM     SFIL
       GCI     T1
       BRU     *+3
       WCI     OLDPTR
       BRU     *-3
       LDP     RENPTR
       STP     T1
       LDA     NEWPTR
       STA     NEWPTR+1
       GCI     T1
       BRU     *+3
       WCI     NEWPTR
       BRU     *-3
       LDP     OLDPTR
       LDX     NEWPTR+1
       BRS     58              RENAME
       BRM     STPRE          STOP RESTART
       BRR     RESNXT
*
*      THIS ROUTINE SETS FLAG WORD ON //PPLIST AS JBSTA,,FILE NUMBER
*
RESSET ZRO
       BRM     OPFL
       LDX     JOB
       LDA     CRP,2
       ADD     =15
       MRG     =4B7
       SCP     FL
       BRM     STPRE          STOP RESTART
       LDA     JBSTA,2
       CLB                     TBS
       LSH     12
       MRG     RESCP
       STA     RESCP
       WIO     FL
       LDB     RESCP
       MSG     (SAVING TOUT FILE)
       LDA     FL
       BRS     20
       BRR     RESSET
*
*      THIS SUBROUTINE IS TO RESTART A PERP JOB TYPE 3 OR 4
*
$RESONE ZRO
       LDX     JOB
       LDB     FLAGS,2
       MSG     (RESTARTING INCOMPLETE JOB)
       LDX     JOB
       LDA     FLAGS,2
       CLB
       RSH     12
       STA     JBSTA,2         JBSTA OF JOB
       CLA
       STA     FLAGS,2         CLEAR OUT FLAG WORD
       RSH 12
       STB     RESCP
       CLA
       STA     FLAGS,2
       LDA     JBSTA,2
       SKE     =2              //TOUT NOT SENT
       BRU     RES4            RESTART SEND MAIL
       SPTR    OLDSTR
       STP     OLDPTR
       LDA     ='  A'
       WCI     OLDPTR
       WCI     OLDPTR
       CLA
       STA     J4,2
       LDB     RESCP
       LSH      1              FOR DIVIDE
       DIV     =3              CHANGE TO RECORD NUMBER
       ADD     =40B            A=1,B=2,...Z
       WCI     OLDPTR
       LDP     TFSP
       BRM     SFIL            TO PUT A..Z ON //TOUT
       BRS     48
       BRU     *+3             IF NOT THERE IT'S OK SAVES A DELETE
       BRS     69
       BRM     STPRE1          STOP RESTART
       LDA     NEWPTR
       STA     NEWPTR+1
       GCI     T1
       BRU     *+3
       WCI     NEWPTR
       BRU     *-3
       LDP     OLDPTR
       LDX     NEWPTR+1
       BRS 58
       BRM     STPRE1          STOP RESTART
RES4   BRR     RESONE
*
*      THIS ROUTINE FIXES UP THE C.P OF //RESTART
*
$RESFIX ZRO
       BRM     OPRES           OPEN //RESTART
       LDA     RESCP
       SCP     RFILE
       BRM     STPRE1          STOP RESTART
       WIO     RFILE
       ETR     =37777777B
       STA     RENFIL
       LDA     RESCP
       MRG     =4B7
       SCP     RFILE
       BRM     STPRE1          STOP RESTART
       LDA     RENFIL
       WIO     RFILE
       LDX     JOB
       LDA     NP2,2
       STA     T3
       STA     T4
       BRM     CALFIL          CALCULATE ADDRESS
       SCP     RFILE
       BRM     STPRE1          STOP RESTART
       LDX     =-5
RD1    WIO     RFILE
       STA     TFNAME+5,2
       BRX     *-2
       LDP     TFPTR
       STP     T1
       GCD     T1              GET LAST CHARACTER
       BRM     STPRE1          STOP RESTART
       SKNE    =0              IF ZERO => NOT PART OF FILE NAME
       BRU     *-3             CHECK NEXT CHAR
       WCI     T1              NOT ZRO WRITE BACK
       GCI     T1              GET CHAR
       BRU     *+3             DONE
       WCI     T3              WRITE IT
       BRU     *-3
       LDP     T3
       LDX     JOB
       STA     TP,2
       STB     TP1,2
       LDA     RFILE
       BRS     20
       LDA     =-1
       STA     ALLSW           ALLOW RESTART AGAIN
       BRR     RESFIX
*
*      CALFIL CALCULATES LOCATION OF TOUT FILE NAME
*
CALFIL ZRO
       LDA     RESCP
       MUL     =5
       LSH     23
       ADD     =66
       BRR     CALFIL
*
*      OPRES OPENS (DPJOB)//RESTART
*
OPRES  ZRO
       LDP     RESPTR
       BRS     48
       HLT     0
       LDP     RESPTR
       MRG     =506B5          RANDOM BITS
       LDX     =2              BINARY
       BRS     65              OPEN OUTPUT
       HLT     0
       STA     RFILE           SAVE FILE NUMBER
       BRR     OPRES           RETURN
*
*      HERE IF WE FIND THE FILE THERE, BUT NOT MARKED
*
RESERR ZRO
       LDB     RENFIL
       MSG     (RESTART FILE NAME EXISTS)
       LDA     RESCP
       MRG     =4B7
       SCP     RFILE
       HLT     0
       LDA     RENFIL
       MRG     =4B7
       WIO     RFILE           WRITE IT WITH SIGN BIT ON
       BRU     RNXT1           GET NEXT AVAIL ONE
*
*      THIS ROUTINE PREVENTS RESTARTS FROM HAPPENING
*
STOPRE ZRO
       LDB     STOPRE
       MSG     ('NO MORE RESTARTS ALLOWED')
       CLA
       STA     ALLSW
       BRR     STOPRE
*
*      THIS ROUTINE TO STOP RESTARTS WHEN JUST STARTING A JOB
*
STPRE  ZRO
       BRM     STOPRE
       CLA
       LDX     JOB
       STA     FLAGS,2
       BRR     STOPRE
*
*      THIS ROUTINE TO STOP RESTARTS WHEN CREATING ONE
*
STPRE1 ZRO
       BRM     STOPRE
       CLA
       LDX     JOB
       STA     FLAGS,2
       BRU     GNX11
EPJB1  LDX     JOB
       SKN     CRP,2
       BRU     *+2
       BRR     EPJB            -1=> DOLAT I HOPE.
       BRS 17
       BRM OPFL
       LDX JOB
       LDA CRP,2
       SCP FL
       HLT
       WIO FL
       STA NPOS
       SKNE    =0
       BRU     EP4
       WIO FL
       STA CURDT
       WIO FL
       LRSH 12
       STA UZONE
       WIO     FL
       STA     TMWD
       WIO     FL
       WIO     FL
       WIO FL
       SKA =4B7
       BRU *+2
       BRU *-3 (SKIP NAME)
       LDA =TLIST
       STA LP
EP     CLA
       STA* LP
       WIO FL
       SKA =4B7
       BRU EP1 (DATE WORD)
       STA* LP
       MIN LP
       BRU EP
EP1    LDA     =12B5
       MRG     UZONE
       CAX
       LDA     CURDT
       ADD     =2              KLUDGE BECAUSE OF STUPID FORMAT
       BRS     176             GET DATE JOB WAS SUPPOSSED TO RUN
       BRM GCRDTS
       LDA T3
       STA CURDT
EP2    BRM     GNXD            IF TO BE DEL WE NEVER COME BACK (GET NEXT DATE)
*
*      WE PROCEED THROUGH HERE IF THE JOB IS TO BE RUN AGAIN
*
       LDA UZONE
       CLB
       LSH 12
       MRG =120B
       CAX
       LDA NXD
       BRS 176
       STA     NXD
EP3    BRM     IQ              INSERT IN QUE (ZERO'S OUT C.P. OF VALID)
       BRM     CLFL
*
*      END PERP JOB (WE GET HERE FROM GNXD IF NO NEXT DATE)
*         ( WE CAN ALSO BRU HERE)
*
ENPJB  LDX     JOB
       LDA     =-1
       XMA     CRP,2
       SKE     TCRP
       BRR     EPJB
       CLA
       STA     TCRP
       BRR     EPJB
EP4    BRM     CLFL
       BRU     ENPJB

*      SET UP CURSOR POSITION FOR CHECKPOINTS

$SETCP ZRO
       STA     T
       BRM     OPFL
       LDX     JOB
       LDA     CRP,2
       ADD     =12             GO TO CHECKPOINT CP
       MRG     =4B7            WRITE MODE
       SCP     FL
       HLT
       LDA     T
       WIO     FL              WRITE IT OUT
       LDA     FL
       BRS     20              CLSOE HIM
       BRR     SETCP


$DS0   ZRO
       LDA =TLIST
       STA LP
DS1    LDA =-1
       STA REFDT
       STA UNTDT
       STA XDATE
       STA LATSW
       STA ORDSW
       STA GRPDT
       STA TCRDT
DS2    LDA* LP
       LDB =7B7
       SKM =1B7
       BRU DSD
       BRM DSF
       BRU DS2

*FLAG WORD
DSF    ZRO
       SKA =17777B
       BRU DSFD (HAVE DATE)
DS3    SKA =2B6
       BRU DSFS
       SKA =1B6
       BRU DSFL
       LDA =-1
       BRU DSFL
DSN    MIN LP
       BRR DSF
DSFL   STA LATSW
       LDA =-1
       STA ORDSW
       BRU DSN
DSFS   SKA =1B6
       BRU DSFA
       STA ORDSW
       BRU DSN
DSFA   MSG 'EXCEPT USED WITHOUT A LIST OF DATES/',BEG

*PROCESS FLAG WORD WITH DATE
DSFD   SKA =4B6
       BRU DSFD2 (UNLESS)
       BRM DATCV
       STA REFDT
       STA TSTDT
DSFD1  LDA* LP
       BRU DS3
DSFD2  SKA =1B6
       BRU DSFST
DSFU   SKE =14017000B
       BRU *+3
       LDA =-1
       BRU *+2
       BRM DATCV
       STA UNTDT
       STA TUNDT
       BRU DSN
DSFST  BRM DATCV
       SKG CURDT
       BRU DSN
       STA TCRDT
       BRU DSN

*PROCESS DATE LIST
DSD    LDA LP
       STA BGLIS
DSD0A  LDA =-1
       STA XDATE
       STA EXCSW
DSDS   BRM DSGD (GET A GROUP DATE)
       BRU DSDEN (END OF LIST)
       SKN ORDSW
       BRU DSDS2
       BRM DSDT
       BRU DSDS
       BRU DSDS
DSDS2  LDX LP
       LDB =-1
       STB -1,2
       BRM DSDT
       BRU DSDS
       BRU DSDEN

*ERROR RETURN IF FOUND NO VALID DATE
DSDT   ZRO
       SKN TUNDT
       SKG TUNDT
       BRU *+2
       BRR DSDT
       SKG TCRDT
       BRR DSDT
       SKG CURDT
       BRR DSDT
       SKN XDATE
       BRU DSDT2
DSDT1  STA XDATE
       LDA TLP
       STA XLP
       MIN DSDT
       BRR DSDT
DSDT2  SKN LATSW
       BRU *+4
       SKG XDATE
       BRU DSDT1
       BRR DSDT
       SKG XDATE
       BRR DSDT
       BRU DSDT1

*END OF LIST
DSDEN  LDA XDATE
       SKG =0
       BRU DSDEN1 (NO DATES FROM LIST)
       STA CURDT
       SKN EXCSW
       BRU *+9
       LDA* XLP
       SKA =2B5
       BRU *+2
       BRU *+3
       LDA =-1
       STA* XLP
       LDA XDATE
       BRR DS0
*PROCESS "EXCEPT"
       SKR CURDT (TO ALLOW THIS DATE)
DSDEN2 BRM DSGD
       BRU DSEXN (END OF EXCEPT LIST)
       SUB =1
       SKE CURDT
       BRU DSDEN2
       MIN CURDT
       LDA BGLIS
       STA LP
       BRU DSD0A
DSEXN  MIN CURDT
       LDA CURDT
       BRR DS0
DSDEN1 SKN TCRDT
       BRU DSDEN4
DSDEN3 CLA
       SKN EXCSW
       BRR DS0
       LDA* LP
       SKE =0
       BRU DS1
       BRR DS0
DSDEN4 LDA TCRDT
       SKG CURDT
       BRU DSDEN3
       STA CURDT
       BRU DS0+1

*GETS DATE FROM A GROUP
DSGD   ZRO
       LDA LP
       STA BGGRP
       LDA REFDT
       SKG =0
       LDA CURDT
       STA TSTDT
       LDA UNTDT
       STA TUNDT
       LDA =-1
       STA GRPDT
       STA AFTSW
       STA AFTDT
       STA BEFDT
       STA ASW
       STA BSW
DSGD2  LDA* LP
DSGD2A SKE =-1
       BRU *+3
DSGDN  MIN LP
       BRU DSGD2
       SKE =0
       BRU *+2
       BRR DSGD (END OF LIST)
       LDB =7B7
       SKM =1B7
       BRU DSGD3
       LDB =7B6
       SKM =3B6
       BRU DSGF
       MIN LP
       MIN EXCSW (EXCEPT)
       BRR DSGD
DSGF   BRM DSF
       BRU DSGD2
DSGD3  SKN TUNDT
       BRU D14
DSGD3A SKM =2B7
       BRU DSGD4
*DATE TYPE WORD
       BRM DATCV
       SKG CURDT
       BRU DSGDN
DEX    MIN LP
       MIN DSGD
       BRR DSGD
DSGD4  SKM =3B7
       BRU ER1 (NOT VALID WORD)
       ETR =3B6
       SKG =2B6
       SKG =0
       BRU D2 (NO CONTINUATION)
       MIN AFTSW (FOR AFTER OR BEFORE)
D1     MIN LP
       LDA* LP
       SKG =0
       BRU DSGD2A (POSSIBLE CANCELLED GRP)
       LDB =7B7
       SKM =1B7
       BRU *+2
       BRU ER2
       SKM =2B7
       BRU D3 (NOT DATE WORD)
*PROCESS DATE WORD
       SKN AFTSW
       BRU D7 (FOR AFTER SOME DATE)
D11    SKA =4B6
       BRU D8 (UNTIL)
       BRM DATCV
       STA TSTDT
D12    LDA* LP
       SKA =4B5
       BRU D9 (DATE CONTINUES)
       LDA LP
       STA ENGRP
*SEARCH BACK FOR LAST FOUND DAY WORD
D10    SKR LP
       LDA* LP
       LDB =7B7
       SKM =3B7
       BRU D10
       BRU D6A

*FOR DATE AFTER "AFTER"
D7     SKA =4B6
       BRU ER3 (CANT HAVE UNTIL)
       BRM DATCV
       STA GRPDT
       BRU D12
*POSSIBLE CONTINUTION AFTER DATE
D9     MIN LP
       LDA* LP
       LDB =7B7
       SKM =2B7
       BRU ER3 (TROUBLE)
       BRU D11
D3     SKM =3B7
       BRU ER1 (NOT VALID WORD)
*DAY WORD AFTER CONTINUATION
       SKA =4B5
       BRU D4 (CONTINUES WITH AND)
       ETR =3B6
       SKG =2B6
       SKG =0
       BRU D5 (NO MORE CONT.)
*AFTER-BEFORE CONT
       MIN AFTSW
       BRU D1
D5     LDA =-1
       STA AFTSW
       LDA LP
       STA ENGRP
       BRM GTD
D6     SKR LP
D6A    BRM GTD
       LDA LP
       SKE BGGRP
       BRU D6
       LDA ENGRP
       STA LP
       BRM DJ
       BRU D6A

D8     BRM DATCV
       SKN TUNDT
       SKG TUNDT
       STA TUNDT
       BRU D12
D4     LDA =-1
       STA AFTSW
       BRU D1

D2     BRM GTD
       BRM DJ
       BRU D2

D14    LDA CURDT
       SKG TUNDT
       BRU *+2
       BRU DSGDN (CUR.PAST UNTIL)
       LDA* LP
       BRU DSGD3A

*DATE ADJUST
DJ     ZRO
       LDA GRPDT
       SKG CURDT
       BRU DJ1
       SKN BEFDT
       BRU DJ4 (HAVE BEFORE DATE)
       STA AFTDT
       MIN BSW (FORCE BACKUP)
DJ2    LDA =-1
       STA GRPDT
       BRR DJ
DJ1    SKN AFTDT
       BRU DJ3 (HAVE AFTER DATE)
       STA BEFDT
       MIN ASW
       BRU DJ2
DJ3    LDA AFTDT
       STA GRPDT
DJ4    LDB =-1
       LDA* LP
       SKA =2B5
       BRU DJ5
       LDA GRPDT
       BRU DEX
DJ5    LDA LP
       STA TLP
       LDA GRPDT
       BRU DEX
TLP    ZRO
XLP    ZRO

DSER   MSG 'NO FURTHER DATES/'
       CLA
       BRR DS0
ER1    MSG 'INVALID WORD OR GARBAGE FOUND IN LIST/',BEG
ER2    MSG 'CONTINUATION WITH "AND-AFTER-BEFORE-ETC." DOES NOT END/',BEG
ER3    MSG 'CONTINUATION FROM DATE WORD WITH NO DATE WORD AFTER/',BEG

*GETS DATE FROM DAY WORD - SETS GRPDT AND RETURNS IN A
GTD    ZRO
       LDA* LP
       LDB =7B7
       SKM =3B7
       HLT
* MUST BE DAY WORD
       STA ABSW
       SKA =3B6
       BRU G1 (AFTER-BEFORE)
G01    SKN GRPDT
       HLT
* CANT ALREADY HAVE DATE UNLESS AFTER-BEFORE
       MRG =1B6
       STA ABSW (FORCE AFTER)
       SKA =170000B
       BRU G12 (HAVE MONTH)
*NON-AFTER/BEVFORE LOGIC
G03    LDA ABSW
       SKA =7
       BRU G4 (HAVE DAY OF WEEK)
       SKA =7770B
       BRU *+2
       HLT
* MUST HAVE SOMETHING TO PROCEED
*PROCESS NO. OF DAY CYCLE
       RSH 3
       ETR =777B
       STA CYCLE
       LDA TSTDT
       SKE CURDT
       BRU *+3
       LDA CYCLE
       BRU G04A
       RSH 23
       DIV CYCLE
       STB RMNDR
G04    LDA CURDT
       RSH 23
       DIV CYCLE
       CBA
       CNA
       ADD RMNDR
       LDB ABSW
       SKB =2B6
       CNA
       SKG =0
       ADD CYCLE
       SKB =2B6
       CNA
G04A   ADD CURDT
       SKN ASW
       BRU G06
       SKN BSW
       BRU G07
G05    STA GRPDT
       BRR GTD
G06    LDB ASW
       STB T2
       ADD CYCLE
       SKR T2
       BRU *-2
       BRU G05
G07    LDB BSW
       STB T2
       SUB CYCLE
       SKR T2
       BRU *-2
       BRU G05

*POSSIBLE AFTER/BEFORE FLAGS
G1     LDB =3B6
       SKM =3B6
       BRU *+2
       HLT
* SPECIAL FLAGS NOT IMPLEMENTED
*START AFTER/BEFORE PROC.
G1B    SKA =170000B
       BRU G2 (HAVE MONTH)
G1A    SKA =7
       BRU G3 (HAVE DAY OF WEEK)
       SKA =7770B
       BRU *+2
       HLT
* NOTHING LEFT
       RSH 3
       ETR =777B
       STA CYCLE
       LDB ABSW
       LDA GRPDT
       SKB =1B6
       ADD CYCLE
       SKB =2B6
       SUB CYCLE
       SKA =4B7
       CLA
       STA GRPDT
       BRR GTD
*PROC. MONTH FOR AFTER/BEFORE
G2     RSH 12
       ETR =17B
       STA T1
       LDA GRPDT
       BRM FDMN (GETS YR/MONTH)
       LDA ABSW
       SKA =1B6
       BRU G6 (AFTER)
*BEFORE
       LDA MN
       SUB T1
       SKG =-1
       BRU G7
G8     STA MN
G8A    LDA ABSW
       SKA =7777B
       BRU G9 (HAVE SOMETING ELSE)
       LDA =1
       STA DY (SET FIRST OF MONTH)
       BRM GBNDT
       STA GRPDT
       BRR GTD
G7     ADD =12
       SKR YR
       NOP
       BRU G8
G9     SKA =4B6
       BRU G10 (FROM END OF MONTH)
       CLA
       STA DY
       BRM GBNDT
       STA GRPDT (FOR REFERENCE)
       LDA =1B6 (AFT)
G9A    STA ABSW
       LDA* LP
       BRU G1A

*MONTH AFTER
G6     LDA MN
       ADD T1
       SKG =11
       BRU G8
       SUB =12
       MIN YR
       BRU G8
*PREPARE FOR BEFORE END OF MONTH BY SETTING 1ST NEXT MONTH
G10    LDA =1
       STA DY
       MIN MN
       BRM GBNDT
       STA GRPDT
       LDA =2B6
       BRU G9A

*PROC. DAY OF WEEK FOR AFTER/BEFORE
G3     BRM GDWK
       LDA GRPDT
       RSH 23
       DIV =7
       CBA
       SUB RMNDR
       LDB ABSW
       SKB =2B6
       BRU G3A (AFTER)
       SKG =-1
       ADD =7
       CNA
       ADD CYCLE
G3B    ADD GRPDT
       STA GRPDT
       BRR GTD
G3A    SKG =0
       BRU *+2
       SUB =7
       ADD CYCLE
       CNA
       BRU G3B


*PROC. DAY OF WEEK, NOT AFTER/BEFORE
G4     BRM GDWK
       LDA TSTDT
       RSH 23
       DIV CYCLE
       CBA
       STA T1
       LDA RMNDR
G4A    SKE T1
       BRU G4C
G4B    STA RMNDR
       BRU G04
G4C    SKG T1
       BRU *+2
       BRU G4B
       ADD =7
       BRU G4A

GDWK   ZRO
       RSH 3
       ETR =777B
       SKG =0
       LDA =1
       MUL =7
       LSH 23
       STA CYCLE
       LDA* LP
       ETR =7
       SUB =1
       STA RMNDR
       BRR GDWK

*PROC. MONTH
G12    RSH 12
       ETR =17B
       STA T1
       LDA CURDT
       BRM FDMN
       LDP YR
       STP CRYR
       LDA TSTDT
       BRM FDMN
       BRU G13B
G13    LDA MN
G13A   ADD T1
       SKG =11
       BRU *+3
       SUB =12
       MIN YR
       STA MN
G13B   LDA YR
       SKG CRYR
       BRU G14
G15    SKN ASW
       BRU G17
       SKN BSW
       BRU *+2
       BRU G8A
       LDA BSW
       STA T2
       LDA MN
       SUB T1
       SKR T2
       BRU *-2
       SKG =-1
       BRU *+2
       BRU G16
       ADD =12
       SKR YR
       NOP
G16    STA MN
       BRU G8A
G17    LDA ASW
       STA T2
       LDA MN
       ADD T1
       SKR T2
       BRU *-2
       SKG =11
       BRU G16
       SUB =12
       MIN YR
       BRU G16
G14    SKE CRYR
       BRU G13
       LDA MN
       SKG CRMN
       BRU *+2
       BRU G15
       SKE CRMN
       BRU G13A
       BRU G15


*TAKES BINARY DATE AND CONVERTS TO MONTH DAY YEAR
$FDMN  ZRO
       CLX
       SKG YTB+1,2
       BRU *+3
       EAX 1,2
       BRU *-3
       STX YR (0-4)
       SUB YTB,2
       COPY AB,XA
       SKA     =3
       BRU     FDMN1
       COPY    X,BA
       SKG     MTB:LY+1,2
       BRU     *+3
       EAX     1,2
       BRU     *-3
       STX     MN
       SUB     MTB:LY,2
       STA     DY
       BRR     FDMN
FDMN1  COPY    X,BA
       SKG MTB+1,2
       BRU *+3
       EAX 1,2
       BRU *-3
       STX MN (0-11)
       SUB MTB,2
       STA DY
       BRR FDMN

*TAKES YR MN DY AND CONVERTS BACK TO BINARY (SEE FDMN)
GBNDT  ZRO
       SKN YR
       BRU *+3
       CLA
       BRR GBNDT
       LDA     YR
       SKA     =3
       BRU     GBNDT1
       LDX YR
       LDA YTB,2
       LDX MN
       ADD MTB:LY,2
       ADD DY
       BRR GBNDT
GBNDT1 LDX YR
       LDA YTB,2
       LDX MN
       ADD MTB,2
       ADD DY
       BRR GBNDT

*CONVERTS DATE WORD FROM TO BINARY FROM
DATCV  ZRO
       STA T1
       RSH 9
       ETR =7B
       CAX
       LDA YTB,2
       STA T2
       CXA
       SKA     =3              LEAP YEAR TEST
       BRU     DATCV1          REGULAR YEAR
       CLA
       LSH     4
       CAX
       LDA     MTB:LY,2
       ADM     T2
       BRU     DATCV2
DATCV1 CLA
       LSH 4
       CAX
       LDA MTB,2
       ADM T2
DATCV2 CLA
       LSH 5
       ADD T2
       BRR DATCV
$YTB   DATA -1,364,729,1094,1459,1825,2190,2555,2920,3286
MTB    DATA 0,31,59,90,120,151,181,212,243,273,304,334,365
MTB:LY DATA 0,31,60,91,121,152,182,213,244,274,305,335,366

*GETS CURRENT DATE FOR THIS USER'S TIME ZONE
GCRDTS ZRO
       RSH 20
       ETR =7
       CAX
       LDA YTB,2
       STA T3
       CXA
       SKA     =3
       BRU     GCRDT1
       CLA
       LSH     4
       CAX
       LDA     MTB:LY,2
       ADM     T3
       BRU     GCRDT2
GCRDT1 CLA
       LSH 4
       CAX
       LDA MTB,2
       ADM T3
GCRDT2 CLA
       RSH 7
       DIV =1440D
       ADD =1
       ADD T3
       STA T3
       BRR GCRDTS


*SET BY FDMN SUB.
$YR    ZRO
$MN    ZRO
$DY    ZRO
CRYR   ZRO
CRMN   ZRO

ASW    ZRO
* AFTER SWITCH FOR MOVING DATES FORWARD
BSW    ZRO
* BACKUP SWITCH
AFTDT  ZRO
* AFTER CURRENT DATE
BEFDT  ZRO
* BEFORE CURRENT DATE
ABSW   ZRO
* AFTER-BEFORE SW. INTERNAL TO GTD SUB.
AFTSW  ZRO
* AFTER/BEFORE SW. FOR GROUP DATES
BGGRP  ZRO
* LOC. OF GROUP BEG.
BGLIS  ZRO
* LOC. OF LIST BEG.
CURDT  ZRO
* TODAYS DATE OR STARTING DATE
CYCLE  ZRO
* LENGTH OF PERIODIC CYCLE IN DAYS
ENGRP  ZRO
* LOC. OF GROUP END
EXCSW  ZRO
* "EXCEPT" SWITCH
GRPDT  ZRO
* WORKING DATE FOR GROUP
LATSW  ZRO
* "LATEST" SWITCH
ORDSW  ZRO
* "ORDER" SWITCH
REFDT  ZRO
* REFERENCE DATE
RMNDR  ZRO
* REMAINDER FOR CYCLE CALC.
TCRDT  ZRO
* TEMP. CURRENT DATE FOR "STARTING" (NO DO PAST THIS)
TSTDT  ZRO
* TEMP. START DATE FOR GROUP
TUNDT  ZRO
* TEMP. UNTIL DATE FOR GROUP
UNTDT  ZRO
* "UNTIL" DATE
XDATE  ZRO
* TRIAL DATE FOR NEXT RUN
$TLIST BSS 100




*GET NEXT DATE
GNXD   ZRO
       LDA TMWD
       SKA =34000077B
       BRU GNX1 (SOMETHING BESIDES ANYTIME)
GNX0   CLA (FOR MIDNIGHT)
GNX    STA NXD
       BRM DS0
       SKG =0
       BRU GNXDE
       BRM FDMN
       LDA DY
       SUB =1
       MUL =1440
       LSH 23
       ADM NXD
       LDA MN
       CLB
       LSH 16
       ADM NXD
       LDA YR
       LSH 20
       ADM NXD
       BRR GNXD
GNX1   SKA =2B7
       BRU GNX2 (FOR NOT)
       SKA =4B6
       BRU GNX4
       SKA =1B7
       BRU GNX0 (BEFORE)
GNX3   ETR =37B
       MUL =60
       LSH 23
       BRU GNX
GNX2   SKA =1B7
       BRU GNX3
       BRU GNX0
GNXDE  BRM CLFL
       BRM DELJB
       BRU ENPJB
GNX4   LRSH 5
       BRU GNX3

OPCNT  ZRO
LASOP1 ZRO
LASOP2 ZRO
LASOP3 ZRO
OPFL   ZRO
       LDA OPFL; STA LASOP1
       CLA; STA OPCNT
OPFL1  LDP FNP
       MRG =116B5
       LDX =2
       BRS 65
       BRU OPFLE
       STA FL
       RSP FL
       SKG =0
       HLT
       BRR OPFL
OPFLE  BRS 45
       MIN     OPCNT
       LDA     OPCNT
       SKG     =50
       BRU OPFL1
       LDA LASOP2; STA LASOP3
       LDA LASOP1; STA LASOP2
       BRM     CLFL
       MSG     (I MAY BE HUNG)
       CLA
       STA     OPCNT
       BRU     OPFL+1


*DELETES SPECIFIED JOB FROM LIST
DELETE ZRO
       LDX JOB
       LDA CRP,2
       SCP FL
       HLT
       LDX =TLIST
       LDA =100
       BIO FL
       NOP
       CLA
       STA TLIST
       STA TLIST+1
       STA TLIST+2
       STA     TLIST+3         5/16/75 TKB
       STA     TLIST+4         5/16/75 TKB
       STA     TLIST+5         5/16/75 TKB
       LDX =-94
DEL    XMA TLIST+100,2
       SKA =4B7                IS THIS OUR 1ST 4B7?
       BRU DEL1                YES WE FOUND IT!
       CLA                     LETS CLEAR IT THEN
       BRX DEL
       HLT
DEL1   BRX *+2
       HLT
DEL3   CLA
       XMA TLIST+100,2
       SKA =4B7                IS THIS OUT 2ND 4B7?
       BRU DEL2                YES, WE FOUND END
       BRX DEL3                NO, TRY AGAIN, AFTER CLEARING.
       HLT
DEL2   LDX JOB                 WELL, LETS PUT IT TO THE FILE
       LDA CRP,2               GET C.P. FOR THIS FILE
       MRG =4B7                WRITE MODE
       SCP FL                  SET IT 
       HLT
       LDX =TLIST
       LDA =100
       BIO FL                  WRITE IT.
       NOP
       BRM CLFL
       MSG 'PER. JOB DELETED/'
       BRR DELETE


*INSERT IN QUEUE
IQ     ZRO
       CLA
       STA PPOS
       SCP FL
       HLT
       WIO FL
*      SEARCH FOR PTR TO CRP
IQ1    STA NPOS
       SCP FL
       HLT
       WIO FL
       STA XPOS
       LDX JOB
       LDA NPOS
       SKE CRP,2
       BRU IQ3
*      FOUND PTR TO CRP
       SCP     FL              TKB     7/2/75
       HLT
       LDA     =6              TKB     7/2/75
       LDX     =FILE           TKB     7/2/75
       BIO     FL              TKB     7/2/75
       HLT     0               TKB     7/2/75
       LDA XPOS
       SKE =-1
       BRU IQ4 (NOT END OF QUEUE)
       BRU IQ8 TKB 4/22/75
IQ3    STA PPOS
       LDA XPOS
       BRU IQ1
*      SAVE PTRS TO JUMP AROUND CRP
IQ4    LDB PPOS
       STB T1
       LDB XPOS
       STB T2
*      SEARCH FOR PLACE IN Q
IQ5    XMA NPOS
       STA PPOS
       LDA NPOS
       SKA =4B7
       BRU IQ7
       SCP FL
       HLT
       WIO FL
       STA XPOS
       WIO FL
       SKG NXD
       BRU IQ6 (CONT. LOOKING)
IQ7    LDX JOB
       LDA PPOS
       SKE CRP,2
       BRU *+2
       BRU IQ8 TKB 4/22/75
       LDA T1
       MRG =4B7
       SCP FL
       HLT
       LDA T2
       WIO FL
       LDA PPOS
       MRG =4B7
       SCP FL
       HLT
       LDX JOB
       LDA CRP,2
       WIO FL
       LDA NPOS
       STA     FILE
       BRU     IQ8
IQ6    LDA XPOS
       BRU IQ5
IQ8    LDA     NXD
       STA     FILE+1          TKB 7/2/75
       CLA                     LET'S ZERO OUT VALID C.P.
       STA     FILE+4
       STA     FILE+5          ZERO FLAG WORD
       LDX     JOB
       LDA     CRP,2
       MRG     =4B7
       SCP     FL
       0
       LDA     =6
       LDX     =FILE
       BIO     FL
       HLT
       BRR     IQ

*FORCES A JOB TO RUN LATER THAN CURRENT TIME
$DOLAT ZRO
       STA T1
       BRM OPFL
       LDA CURTM
       ADD T1
       STA NXD
       BRM IQ
       LDA FL
       BRS 20
       LDX JOB
       LDA =4; STA JBSTA,2
       CLA; BRM SETCP
       LDA =-1
       STA CRP,2
       BRR DOLAT

$LATER LDA =MAXDT1
       BRM DOLAT
       BRM CLFL
       BRU SJBEN1

FLNM   ASC '(DUPJOB)//PPLIST'
FNP    DATA 3*FLNM-1,3*FLNM-1+16
CT     ZRO
FL     ZRO
LSZ    ZRO
NXD    ZRO
PPOS   ZRO
NPOS   ZRO
XPOS   ZRO
BEG    HLT
CPN    ZRO
LP     ZRO
SDATE  ZRO
TMWD   ZRO
UZONE  ZRO
TIME   ZRO
TCRP   ZRO     0               HOLD CURSOR POSTION
T      ZRO     0               TEMP FOR LINK
NOPRNA ZRO     0               DO NOT PRINT NAME INGPJNM IF -1
$CFP   BSS 2
$PUP   BSS 2
NODUPS DATA    0



$IDENP  DATA    IDEN*3-1,0
$FLAG  ZRO
FILE   BSS     6
IDEN   BSS     55
       NOLIST EXT
       END
1PERP ** FICH/FRAME BREAK *****
2PDB1509 SYMSORT

SYM.  PG.LN. IDENT.

ABSW   40 19 2PD15   AFTDT  40 15 2PD15   AFTSW  40 21 2PD15   
ALLSW  12  9 2PD15   ASW    40 11 2PD15   ATIM   10 12 2PD15   BEF    10  7 2PD15   
BEFAFT  9 38 2PD15   BEFDT  40 17 2PD15   BEG    47 26 2PD15   BGGRP  40 23 2PD15   
BGLIS  40 25 2PD15   BSW    40 13 2PD15   BTIM   10 11 2PD15   CALFIL 17 25 2PD15   
CFP    47 36 2PD15   CKTM1   9 15 2PD15   CKTMWD  8 17 2PD15   CPN    47 27 2PD15   
CRMN   40  9 2PD15   CRYR   40  8 2PD15   CT     47 19 2PD15   CURDT  40 27 2PD15   
CYCLE  40 29 2PD15   D1     26 36 2PD15   D10    27 20 2PD15   D11    27 10 2PD15   
D12    27 14 2PD15   D14    29  2 2PD15   D2     28 37 2PD15   D3     28  1 2PD15   
D4     28 33 2PD15   D5     28 13 2PD15   D6     28 18 2PD15   D6A    28 19 2PD15   
D7     27 28 2PD15   D8     28 28 2PD15   D9     27 34 2PD15   DATCV  38 23 2PD15   
DATCV1 38 39 2PD15   DATCV2 39  5 2PD15   DEL    43 35 2PD15   DEL1   44  2 2PD15   
DEL2   44 10 2PD15   DEL3   44  4 2PD15   DELETE 43 18 2PD15   DELJB  10 34 2PD15   
DEX    26 26 2PD15   DJ     29 10 2PD15   DJ1    29 21 2PD15   DJ2    29 18 2PD15   
DJ3    29 26 2PD15   DJ4    29 28 2PD15   DJ5    29 34 2PD15   DJB    11 17 2PD15   
DJB1   10 37 2PD15   DOLAT  46 35 2PD15   DS0    21 23 2PD15   DS1    21 26 2PD15   
DS2    21 34 2PD15   DS3    22  6 2PD15   DSD    23 10 2PD15   DSD0A  23 12 2PD15   
DSDEN  24 17 2PD15   DSDEN1 25  6 2PD15   DSDEN2 24 33 2PD15   DSDEN3 25  8 2PD15   
DSDEN4 25 15 2PD15   DSDS   23 15 2PD15   DSDS2  23 22 2PD15   DSDT   23 30 2PD15   
DSDT1  24  2 2PD15   DSDT2  24  7 2PD15   DSER   30  2 2PD15   DSEXN  25  3 2PD15   
DSF    22  3 2PD15   DSFA   22 22 2PD15   DSFD   22 25 2PD15   DSFD1  22 30 2PD15   
DSFD2  22 32 2PD15   DSFL   22 14 2PD15   DSFS   22 18 2PD15   DSFST  23  3 2PD15   
DSFU   22 34 2PD15   DSGD   25 22 2PD15   DSGD2  25 38 2PD15   DSGD2A 25 39 2PD15   
DSGD3  26 18 2PD15   DSGD3A 26 20 2PD15   DSGD4  26 29 2PD15   DSGDN  26  2 2PD15   
DSGF   26 16 2PD15   DSN    22 12 2PD15   DY     40  7 2PD15   ENGRP  40 31 2PD15   
ENPJB  20 33 2PD15   EP     19 37 2PD15   EP1    20  6 2PD15   EP2    20 15 2PD15   
EP3    20 27 2PD15   EP4    21  2 2PD15   EPJB   11 22 2PD15   EPJB1  19  8 2PD15   
ER1    30  5 2PD15   ER2    30  6 2PD15   ER3    30  7 2PD15   EXCSW  40 33 2PD15   
FDMN   37  9 2PD15   FDMN1  37 29 2PD15   FILE   48  5 2PD15   FL     47 20 2PD15   
FLAG   48  4 2PD15   FLNM   47 17 2PD15   FNP    47 18 2PD15   G01    30 19 2PD15   
G03    30 27 2PD15   G04    31  7 2PD15   G04A   31 20 2PD15   G05    31 25 2PD15   
G06    31 27 2PD15   G07    31 33 2PD15   G1     32  2 2PD15   G10    33 37 2PD15   
G12    35 25 2PD15   G13    35 35 2PD15   G13A   35 36 2PD15   G13B   36  3 2PD15   
G14    36 36 2PD15   G15    36  6 2PD15   G16    36 23 2PD15   G17    36 25 2PD15   
G1A    32 10 2PD15   G1B    32  8 2PD15   G2     32 30 2PD15   G3     34  7 2PD15   
G3A    34 23 2PD15   G3B    34 20 2PD15   G4     34 32 2PD15   G4A    34 39 2PD15   
G4B    35  2 2PD15   G4C    35  4 2PD15   G6     33 29 2PD15   G7     33 13 2PD15   
G8     33  4 2PD15   G8A    33  5 2PD15   G9     33 17 2PD15   G9A    33 24 2PD15   
GBNDT  38  1 2PD15   GBNDT1 38 15 2PD15   GCRDT1 39 29 2PD15   GCRDT2 39 34 2PD15   
GCRDTS 39 14 2PD15   GDWK   35 10 2PD15   GNX    41 27 2PD15   GNX0   41 26 2PD15   
GNX1   42  6 2PD15   GNX2   42 16 2PD15   GNX3   42 12 2PD15   GNX4   42 22 2PD15   
GNXD   41 22 2PD15   GNXDE  42 19 2PD15   GPJ1    6 24 2PD15   GPJ1A   2 19 2PD15   
GPJ1A1  2 25 2PD15   GPJ1B   3 22 2PD15   GPJ2    2  3 2PD15   GPJ21   2 28 2PD15   
GPJ2A   2  9 2PD15   GPJ2B   2 17 2PD15   GPJ3    4  6 2PD15   GPJ30   4 29 2PD15   
GPJ3A   4 26 2PD15   GPJ3B   5  9 2PD15   GPJ3C   4 36 2PD15   GPJ3C1  5  2 2PD15   
GPJ3D   5  3 2PD15   GPJ3E   5 27 2PD15   GPJ3E1  6 12 2PD15   GPJ3E2  5 34 2PD15   
GPJ3E3  6  6 2PD15   GPJ3F   5 20 2PD15   GPJ3RE  6 17 2PD15   GPJ7    6 21 2PD15   
GPJB    1 31 2PD15   GPJBI   1 37 2PD15   GPJDEL  8  7 2PD15   GPJNM   6 30 2PD15   
GPJNS   2 39 2PD15   GPN1    7  9 2PD15   GPN2    7 19 2PD15   GPN3    7 27 2PD15   
GPN4    7 36 2PD15   GPN4A   8  3 2PD15   GPNE1   8  5 2PD15   GRPDT  40 35 2PD15   
GTD    30 10 2PD15   IDEN   48  6 2PD15   IDENP  48  3 2PD15   IQ     44 25 2PD15   
IQ1    44 32 2PD15   IQ3    45 13 2PD15   IQ4    45 17 2PD15   IQ5    45 22 2PD15   
IQ6    46 16 2PD15   IQ7    45 34 2PD15   IQ8    46 18 2PD15   K       1 19 2PD15   
LASOP1 42 26 2PD15   LASOP2 42 27 2PD15   LASOP3 42 28 2PD15   LATER  47 12 2PD15   
LATSW  40 37 2PD15   LINK   10 17 2PD15   LP     47 28 2PD15   LSZ    47 21 2PD15   
MAXDT   1  8 2PD15   MAXDT1  1  9 2PD15   MAXRES 12 10 2PD15   MN     40  6 2PD15   
MSG     1 12 2PD15   MTB    39 10 2PD15   MTB:LY 39 11 2PD15   NEWPTR 12 23 2PD15   
NODUPS 47 38 2PD15   NOPRNA 47 35 2PD15   NPOS   47 24 2PD15   NXD    47 22 2PD15   
OLDPTR 12 22 2PD15   OLDSTR 12 25 2PD15   OPCNT  42 25 2PD15   OPFL   42 29 2PD15   
OPFL1  42 32 2PD15   OPFLE  43  3 2PD15   OPRES  17 34 2PD15   ORDSW  40 39 2PD15   
PPOS   47 23 2PD15   PUP    47 37 2PD15   RD1    16 38 2PD15   REFDT  41  2 2PD15   
RENFIL 12 16 2PD15   RENPTR 12 17 2PD15   RES4   16 12 2PD15   RESCP  12 11 2PD15   
RESERR 18  9 2PD15   RESFIL 12 19 2PD15   RESFIX 16 16 2PD15   RESNXT 12 26 2PD15   
RESONE 15  5 2PD15   RESPTR 12 20 2PD15   RESSET 14 22 2PD15   REST   11 31 2PD15   
RFILE  12 15 2PD15   RMNDR  41  4 2PD15   RNG     9 29 2PD15   RNXT1  12 28 2PD15   
SDATE  47 29 2PD15   SETCP  21  7 2PD15   SKNE    1  5 2PD15   SPTR    1  7 2PD15   
STOPRE 18 23 2PD15   STPRE  18 32 2PD15   STPRE1 19  2 2PD15   T      47 34 2PD15   
TCRDT  41  6 2PD15   TCRP   47 33 2PD15   TFNAME 12 12 2PD15   TFPTR  12 13 2PD15   
TIME   47 32 2PD15   TLIST  41 16 2PD15   TLP    29 38 2PD15   TMWD   47 30 2PD15   
TSTDT  41  8 2PD15   TUNDT  41 10 2PD15   UNTDT  41 12 2PD15   UZONE  47 31 2PD15   
X       1 25 2PD15   X       1 13 2PD15   XDATE  41 14 2PD15   XLP    29 39 2PD15   
XPOS   47 25 2PD15   YR     40  5 2PD15   YTB    39  9 2PD15   
1PERP ** FICH/FRAME BREAK *****
PDUPB1509
PDUP15 IDENT   20 FEB 1979 MCH 15.09
*15.09 REMOVED DDFSW SINCE IT WAS TOO BROKEN TO BE USEFUL.
*      ENABLED PERP FOR SYSTEM 90 AND REORDERED ENTRIES IN MLIST TABLE.
*15.08 MAKE 22-26 PDP10'S.  REMOVED OLD CODE.
*15.06 MAXDT TO 5 MIN.
*15.07 MAKE 27- PDP10
*12.07,12.08 FIX TAKING TOO LONG TO COPY TER OUTPUT AND RESTART
*12.06 NEW STOP PERP BIT 12/20/76 CLC

       LIST    SRC,COM,CALL
VERS   EQU     15
PATCH  EQU     09

SKNE   OPD     536B5

$FCPN  EQU     22              FIRST VALID PDP-10 NUMBER
$LCPN  EQU     99              LAST VALID COMPUTER NO.
$F940  EQU     1
$L940  EQU     21              LAST VALID 940 NUMBER

STDFT  EQU     22              HOUR TO START DEFER TIME
ENDFT  EQU     4               HOUR TO END DEFER TIME
NRETRY EQU     2               FOR 3 RETRIES IN COPYING COM. FILE
MXCPCH EQU     2000            MAXIMUM COPY CHARS.
$NJ    EQU     10              NUMBER OF JOBS

BRE    MACRO D
       SKE     D(1)
       BRU     *+2
       BRU     D(2)
       ENDM

X      EQU     0

MSG    MACRO   D,E,1
X      EQU     X+1
       NOLIST SRC
       LDA     =X
       BRM     XMSG
       REM     ERROR NO E(1)         D(1)
       LIST SRC
       ENDM
$BEGIN BRS 90                  START HERE - THIS IS HIGHEST FORK TO TERMINATE
BEGIN1 BRM     IDISC           INITIALIZE LOG START POINT
       LDB     =VERS*100+PATCH
       MSG     (VERSION 15.09)
       CLB
       STB     NOEMFL          DO NOT ALLOW EMM MSG TO BE ISSUED

$START BRS 156                 ZAP ALL CIRCUITS
       LDA     =INT10          LET'S SET UP THE INTERRUPT ROUTINES--2B3
       STA     212B            CIO'S ON ZAPPED CIRCUIT
       LDA     =INT5
       STA     205B            TIMER- SET BY BRS 135
       LDA     =INT8
       STA     210B            BUFFER ZAP
       LDA     =INT9
       STA     211B            INT WHEN CIO WOULD CAUSE DISMISS
       LDA     =-1
       STA     MKTIME
       BRM     MKLIST          COPY MLIST TO CLIST (LIST OF VALID COMPUTERS)
       LDX     =-1
       STX     PERSW
       STX     STSW
       STX     JBCT
       STB     NJBCT
       STB     BFCT
       LDA     =-1
       LDX     =120B
       BRS 176                 RETURN DATE AND TIME
       STA     CURTM
*
*      IN CASE SOME TURKEY STEALS MY PORT WE RUN WITHOUT ESCAPES DISABLED
*
       LDA     =*+4
       BRM     ARM10
       LDX     =-1
       BRS     161             DISABLE ESCAPES ON COMMAND PORT
       BRM     UARM10

*END OF JOB LIST
JBEN   SKN     JBCT
       BRU     JBEN1
*NO JOBS RUNNING
JBENS  BRU START1
START1 LDA =JBEN
       STA     JOBL+1
       CLX
       STX JOBL
JBEN0  STX JOB
       MIN NOACT
       MIN JBCT                INCR SO WE KNOW WE HAVE A JOB 
       BRM JBRSB               GO CHECK FILE STATUS AND DO ACTION REQ (FOR JB)
       BRU GTJOB               LETS GO GET A JOB
JBEN1  SKN NOACT
       BRU 1SCHED (FOUND ACTIVITY, GO THROUGH SCHED.)
JBEN2  BRM JBENG
       BRU 1SCHED (GO START ANOTHER JOB)
*NO MORE JOBS, WAIT FOR ACTIVITY
JBEN1A LDA =1000
       BRS 81
*GO THROUGH SCH., LOOK FOR ANY ACTIVITY
1SCHED LDA =-1
       STA NOACT               SET TO NO ACTIVE
       CLX                     START WITH JOB 0
       STX JOB
       BRU* JOBL

JBENG  ZRO
       LDA JBCT                JOB COUNT
       SKG MAXJB               GREATER THAN WE CAN DO
       SKN STSW                STARTING UP SWITCH
       BRU JBEN1A              NO LETS SLEEP
       CLX                     YES WE STARTING
JBEN3  LDA JOBL,2              GET JOB LOCATION TO GO
       SKE =JBN
       BRU JBEN5
JBEN6  LDA =JBEN0              SET JOB TO BEGIN
       STA JOBL,2
       BRR JBENG
JBEN5  SKE =JBEN
       BRU JBEN4 (TO NEXT JOB)
       STA JOBL+1,2
       BRU JBEN6
JBEN4  EAX 1,2                 LOOK AT NEXT JOB
       BRU JBEN3

*SCHEDULE JOB ROUTINES

*END OF JOB, TERMINATE
SJBEN  BRM     EPJB
$SJBEN1 LDX JOB
       LDA =JBN
       STA JOBL,2
       BRM RELPG (RELEASE ANY EXTRA MEM.)
       LDA STSW
       SKE JOB
       BRU *+3
       LDA =-1
       STA STSW

       SKR JBCT
       BRU *+2
       BRU JBENS (NO JOBS RUNNING)
SCHEDN NOP     0               THIS MUST BE HERE (A NOP)
*
*      WE SET BIT 0 OF THE ALARM WORD TO LET PJ KNOW WE ARE ALIVE
*
       BRM     SETBIT          SET THE DAMN BIT
JBN    LDX JOB (TO NEXT JOB)
SCHED1 EAX 1,2
SCHEDX STX JOB
       BRU* JOBL,2

*SCHED. FOR IMMEDIATE REACTIVATION
$SJBR  ZRO
       LDA SJBR                WHERE WE CAME FROM
       LDB =JBR
JBCOM  LDX JOB
JBCOM1 STA SR,2                SCHECULER RETURN LOCATION
       STB JOBL,2              JOB LOCATION
       BRU SCHEDN              GO SCHEDULE
*WAIT FOR OUTPUT OK
SJBO   ZRO
       LDA SJBO
       LDB =JBO
       BRU JBCOM

*WAIT FOR INPUT
SJBI   ZRO
       LDA SJBI
       LDB =JBI
       BRU JBCOM


*      SCHEDULE JOB FOR PAUSE

SJBP   ZRO
       LDA SJBP
       LDB =JBP
       BRU JBCOM

SJBIT  ZRO     0               SCHEDULE JOB
       BRM SETQTM              SET Q TIME
       LDA SJBIT
       BRU SJBI+2
*WAIT FOR NO JOBS TO DISMISS FOR PERIODIC
$SJBNJ ZRO
       MIN NJBCT
       LDA STSW
       SKE JOB
       BRU *+3
       LDA =-1
       STA STSW
       LDA =JBR1A
       BRM SETQTM
       LDA SJBNJ
       LDB =JBNJ
       BRU JBCOM

*REACTIVATION ROUTINES

*IMMEDIATE
JBRS   LDX JOB                 SET JOB
JBR    BRM JBRSB               CHECK HIS FILE SITUATION
JBR1   MIN NOACT               SET ACTIVE USER
       BRR SR,2                GO REACTIVATE
JBR1A  SKR NJBCT
       STX STSW
       BRU JBR1

*      FILE SWITCH (FLSW) HAS THE FOLLOWING VALUES
*      -1 NOTHING SHOULD BE OPENED
*      0  TEMP OPEN FOR OUTPUT
*      1  TEMP OPEN FOR INPUT, TOUT OPEN FOR OUTPUT
*      2  TOUT OPEN FOR OUTPUT ONLY
*      3  TOUT OPEN FOR INPUT

JBRSB  ZRO
       LDA     LASTJB
       SKNE    JOB
       BRR     JBRSB           IF LASTJB=JOB RETURN
       STA     LASTJB
       CAX
       BRS     43              READ RELABLING
       STB     JBLAB,2         STORE RL2 SO STRINGS ARE THERE
       SKP     FLSW,2          FILE SWITCH +
       BRU     JBRS1           -1
       LDA     FLSW,2          +
       SKA     =1              
       BRU     *+2             1,3
       BRU     JBRS1            NO INPUT FILES OPEN- 0,2
       RCP     IF              READ THE CURSOR POSITION 1,3
       LDX     LASTJB          SO WE CAN USE IT NEXT TIME
       STA     IFCP,2
       BRS     42
       LDX     LASTJB
       STA     LCTIME,2        TIME LAST 100 CHRS SENT
JBRS1   BRS     17              CLOSE EVERYTING JUST IN CASE
       LDA     =-1             SET IF AND OF TO -1
       STA     IF              I AM NOT SURE THIS IS NECESSARY
       STA     OF              OR THIS
       LDX     JOB
       SKP     FLSW,2
       BRU     JBR4            NO FILES TO OPEN -1
       LDA     FLSW,2          0,+
       SKE     =0
       BRU     JBR2
       SBRM    OPMOF           OPEN TEMP FILE FOR OUTPUT
       BRU     JBR4            THAT IS ALL
JBR2   SKE     =3
       BRU     JBR3            TYPE 1 OR 2
       SBRM    OPITF           OPEN TOUT FILE FOR INPUT
       BRU     JBR4
JBR3   SKNE    =1
       SBRM    OPIF            TYPE 1 IS BOTH FILES
       SBRM    OPTOF           OPEN TOUT FILE FOR OUTPUT
JBR4   BRS     43              READ RELAB
       LDX     JOB
       STX     LASTJB          SAVE IT FOR NEXT TIME THROUGH
       LDB     JBLAB,2
       BRS     44              SET UP RELABELING FOR THIS JOB
       BRR     JBRSB           RETURN


*SOME INPUT
JBI    BRM JBTM
       LDX CI,2
       BRS 13
       BRU JBRS
       BRU SCHEDN

*CAN OUTPUT TEST
JBO    BRM JBTM
       LDX CO,2
       BRS 155
       BRU JBRS
       BRU SCHEDN

*CK FOR NO JOBS FOR PER.
JBNJ   BRM JBTM
       LDA JBCT
       SUB NJBCT
       SKG =-1
       BRU JBNJ1
       BRU SCHEDN
JBNJ1  STX STSW
       SKR NJBCT
       NOP
       BRU JBR

*CK FOR TIME RUNOUT
JBTM   ZRO
       BRS 42
       LDX JOB
       SKG QTIME,2
       BRR JBTM
       BRM JBRSB
       BRU* EXBRT,2

*      CHECK FOR PAUSE CONDITION SATISFIED
*
*      NORMAL RETURN IF CHARACTERS IN INPUT BUFFER
*      SKIP RETURN IF GREEN BALL IS RETURNED

JBP    BRM     JBTM            CHECK FOR TIME RUNOUT ON JOB
       LDX     JOB             LETS TRY TO STOP THE I>>
       LDA     I10RTN,2
       BRM     ARM10           TO MAKE SURE THAT IT IS ADDED
       LDX     CI,2
       BRS     13              CHECK FOR CHARACTER IN BUFFER
       BRU     JBRS            YES, GO RESTART THE JOB
       BRS     42              READ TIME
       LDX     JOB
       SKG     GBTIME,2
       BRU     *+2
       BRU     JBP1
       LDX     CO,2
       LDA     =-1
       BRS     126             HAVE WE GOT ORANGE BALL?
       BRU     *+2             WE GOT IT!
       BRU     SCHEDN          SORRY NO ORANGE BALL YET, SCHEDULE
JBP2   LDX     JOB
       MIN     SR,2
       BRU     JBRS
JBP1   LDX     CO,2
       CLA
       BRS     126             SEND YELLOW BALL
       BRU     JBP2
       BRM     STGBTM
       BRU     SCHEDN


*MISCEL. SUB.
*REL. ANY EXTRA MEM.
RELPG  ZRO
       BRS 43
RELPG1 CLA
       SKB =-1
       BRU RELPG2
       LDX JOB
       CLA
       STA JBLAB,2
       BRR RELPG
RELPG2 LSH 6
       BRS 121
       BRU RELPG1


*GET NEW JOB

GTJOB  LDA =NRETRY
       STA RETYCT    FOR RETRY ON GETTING COM.FILE
       BRM     SETBIT          SET PERP OK BIT
       LDX     JOB             WE JUST CLOBBERED IT
       LDP SP2                 GET STANDARD PROJECT CODE
       STA PJP,2               PROJ PTR BEGIN
       STB PJP1,2   (SET STANDARD PROJ. CODE)    
       LDA IDENP
       STA IDENP+1
       LDA =2
       STA RETSW,2             RETRY SWITCH
       CLA
       STA UP,2
       STA UP1,2
       STA CC,2                CHARACTER COUNT
       STA CMC,2
       STX STSW                STORE JOB NUMBER IN START SWITCH
       STA SYS,2               ZERO SYSTEM #
       LDA =-1
       STA CRP,2               SET CURSER POSITION TO ZERO
       LDA     =FLAG
       LDX     =8
       BRS     7
       LDA     FLAG
       SKA     =40B            PERP DO NOT START BIT
       BRM EMMSG               EMERGENCY MSG
       BRM NEMSG               NO EMERGENCY FLAG
       LDA =-1
       LDX =120B
       BRS 176                 READ DATE
       STA CURTM               STORE CUR DATE TIME
       BRU GTPER1

GNX    LDX     JOB
       LDA     FLAGS,2
       SKNE    =0              IF NON ZERO THEN IS JBSTA,,#
       BRU     GNX1
       BRM     RESONE          SET-UP FOR RESTART
       BRM     RESFIX          FIX /DUPJOB //RESTART UP
       LDA     =NRETRY
       LDX     JOB             TBS
       STA     NCPCT,2
       BRU     CEJ             GO SEND //TOUT FILEART UP
$GNX11 NOP
GNX1   BRM SJBR                SCHECULE FOR IMMED REACTIVATION
       LDX JOB
       LDA UP,2                USER NAME PTR BEG
       LDB UP1,2               USER NAME PTR END
       BRM OPCH                OPEN UP CIRCUIT IE LOG HIM IN
       LDA =GNCDS              IF CHANNEL BREAKS GO HERE (BRM OPCHER)
       STA I10RTN,2            PUT IT IN INTERRUPT
       SBRM OPOF               OPEN //TEMP FILE
       LDX JOB
       CLA
       STA FLSW,2              SET FLSW TO 0, I.E. //TEMP OPEN
       LDP DELAY2              SLWTEL,,5 MIN
       BRM     SJBIT
       LDA     =IGN
       BRM     ARM9            ARM BAD CIO (CIRCUIT GONE)
       SKN 940SW,2
       BRU GN9 (FOR 940 START)
*DISCARD CHARS. UNTIL PROMPT CHAR.
GN1D   LDX JOB
       BRM GCH
       SKE LF
       BRU *-2
       BRM GCH
       SKE ='   -'
       SKNE ='   .'
       BRU *+2
       BRU GN1D
       STA PRMPT,2
       LDX CI,2
       BRS 13                  SKIP IF INPUT  BUFFER EMPTRY
       BRU GN1D (MORE CHARS. LEFT)
*SEND COPY COMMAND
GN1D9  BRM UARM9
       LDA =ST5                UNARM
       SKN 940SW,2
       LDA =9ST5
       LDX CO,2
       LDB =-1
       BRS 34
       LDX JOB
       LDA FP,2
       LDB FP1,2
       LDX CO,2
       BRS 35 (FILE NAME)
       LDX JOB
GN1D91 LDA =105B
       CIO CO,2
*SKIP OVER ECHOED COPY COMMAND
       LDP DELAY2
       BRM SJBIT
       LDA =IGN
       BRM ARM9                        ARM BAD CIO
GN1D92 BRM GCH
       SKE LF
       BRU *-2 (DISCARD REST OF LINE)
       BRU GN8
GN1D7  BRM UARM9
*TYPE ERROR MSG AFTER ?
       LDA NSP
       CAB
       STP T4
       LDA ='   ?'
GN1D8  WCI T4
       BRM GCH
       SKG =137B
       SKG =77B
       BRU *+2
       SUB =40B
       SKE LF
       BRU GN1D8
       LDA =-1
       STA OF
       BRM SMAIL               SEND MAIL
       LDA =ERM5
       BRM SMSG                SEND MOR E MAIL
       GCI T4
       BRU CEJ1A
       CIO CO,2
       BRU *-3
GN1F   LDA =IGN
       BRM ARM9
       LDA LC,2
       SKE CCH
       BRM GNEE (MUST HAVE TOUT FILE)

*START COPYING COMMAND FILE
GN2    LDA LC,2
GN2A   CIO OF
       BRM GCH
GN2F   SKE CR
       BRU GN2A
       CIO OF
GN2B   MIN LINE,2
       BRM GCH
       SKE LF
       BRU GNER (NO LF AFTER CR)
GN2D   BRM GCH
       SKE PRMPT,2
       BRU GN5
       BRM GCH
       SKE LF
       BRU GN3
       BRM GCH
       SKE PRMPT,2
       BRU GN4
       LDX CI,2
       BRS 13
       BRU GN4
GN2G   LDX JOB                 WE ARE DONE COPPING FILE
       LDA OF
       BRS 20
       LDA =-1
       STA FLSW,2
       MIN     JBSTA,2         INCR STATUS WRD(1)
       BRM SJBR
       BRU SC
GN3    LDA PRMPT,2
       CIO OF
       BRU GN2
GN4    LDX JOB
       LDA PRMPT,2
       CIO OF
       LDA LF
       CIO OF
       BRU GN2
GN7    SKE     =174B
       BRU     GN2F
       BRM     GCH
       SKE     PRMPT,2
       BRU     *-2
       BRU     GN2G
GN8    BRM GCH
       BRM GCH
       SKE LF
       BRU *-2
       BRM GCH
       SKE =77B
       BRU GN1F                LETS COPY FILE
       BRU GN1E1
GN9    LDX JOB
       BRM GCH
       SKE ='   -'
       BRU GN9
       STA PRMPT,2
       BRM GCH
       BRM GCH
       BRM GCH
       LDX CI,2
       BRS 13
       BRU GN9                 MORE CHARACTERS
       BRU GN1D9               NO MORE CHAR
GN1E1  MSG (NO COMMANDS FILE--JOB DELETED)
       BRM     UARM9
       LDA     =-1
       STA     OF
       BRM     SMAIL
       LDA     =ERM10
       BRM     SMSG
GN1E3  LDA     =144B
       LDX     JOB
       CIO     CO,2
       LDA     =GN1E2
       STA     I10RTN,2
       BRM     GIC
       BRM     UARM9
       LDA     CR
       CIO     CO,2
       BRM     FPAUSE
       BRM     CLFL
GN1E2  BRM     DELJB
       BRU     SJBEN1

GN5    SKE CCH
       BRU GN7
*DECODE SPECIAL COMMAND
       LDA =IGC
       BRM ARM9
       BRM GCH
       SKE CR
       BRU *+2
       BRM GNEE  NO COMMAND AFTER CR
       BRE CCH,GLAB            START LABEL
GN5A   SKG ='   Z'
       SKG ='   A'-1
       BRM GNEE
       STA 1C,2
       BRM GCH
       STA J1,2
       SKE ='='
       BRU *+2
       BRU GASS
       LDX 1C,2
       BRU* GTB-'  A',2
GTB    DATA GAFTER,GNER,GCON,DEF,GESC,GFIN,GGO,GNER
       DATA GIF,GNER,GKIL,GLOOK,GNER,GNER,GNER,GPAU   (GMSG AND GOPR REMOVED)
       DATA GQT,GRES,GST,GTIM,GUNL,GVAL,GWAIT,GNER,GNER,GNER

*DEFINE COMMAND
DEF    LDA ='   E'
       BRM SKBG (CK 2ND CHAR, SKIP TO CHAR AFTER SPACE)
DEF2   SKG ='   Z'
       SKG ='   A'-1
       BRM GNEE (MUST BE A-Z)
       SUB ='   A'
       STA J2,2
       AXC
       SKE VP,2
       BRM GNEE (ALREADY DEF.)
       LDX JOB
       BRM GCH
       SNE =0
       BRU *-2
       SKE ='   ='
       BRM GNEE
       BRM USEST
       BRM GCH
       STA J3,2 (STRING LIMITING CHAR.)
       BRM GCH
       SKE J3,2
       BRU *+2
       BRM GNEE (NO STRING)
       STA J4,2
       WCI STP
       BRM GCH
       SKE J3,2
       BRU *-3
       LDX J2,2
       LDP STP
       STA VP,2
       STB VP1,2 (STORE POINTERS)
       CBA
       SUB VP,2
       SKG =0
       BRM GNEE
       STA VC,2 (CHAR. COUNT)
       LDX JOB
       LDA J4,2
       LDX J2,2
       STA VCH,2 (FIRST CHAR)
       LDA STP+1
       STA STP (READY POINTERS FOR NEXT)
       LDX JOB
       BRM GCH
       BRE ='   ,',DEF1 (ANOTHER DEF.)
       SKE CR
       BRM GNEE
       BRU GN2B
DEF1   BRM GCH
       BRU DEF2
USEST  ZRO
       SKN DEFSW,2
       BRR USEST
       MIN DEFSW,2
       LDA     =LABST
       STA     LABPT           SAVE IT FOR THIS GUY.
       LDA =STSTK
       STA STP
       STA STP+1
       LDA =STK
       STA STKP
       LDA =-1
       LDX =-256
       STA CSTR,2
       BRX *-1
       LDX JOB
       BRR USEST

GN6    LDX JOB
       BRM GCH
       SKE CR
       BRU *-2
GN6A   LDA CCH
GN6B   CIO OF
GN6C   LDA 1C,2
       CIO OF
       LDA CR
GN6D   CIO OF
       LDA =IGN
       BRM ARM9
       BRU GN2B

*QUIT COMMAND
GQT     SKE ='   U'
       BRU GTCR
       BRU GN6

*STOP COMMAND
GST    SKE ='   T'
       BRU GTCR
       BRU GN6
GTCR   LDX JOB
       SKE CR
       BRM GNEE
       BRU GN6A


*ESCAPE COMMAND
GESC   SKE ='   S'
       BRU GTCR
       BRU GN6

*CONTINUE COMMAND
GCON   SKE ='   O'
       BRU GTCR
       BRU GN6


*PAUSE COMMAND
GPAU   SKE ='   A'
       BRU GTCR
       BRU GN6

*WAIT COMMAND
GWAIT  EQU GPAU

*      KILL COMMAND            TKB 5/29/75
GKIL   SKE     ="  I"
       BRU GTCR
       BRU GN6

*      VALID COMMAND           TKB     5/29/75
GVAL   SKE     ="  A"
       BRU GTCR
       BRU GN6

*LOOK COMMAND
GLOOK  LDA ='   O'
       BRU GIFU

*GO COMMAND
GGO    LDA ='   O'
       BRM SKBG
       LDA CCH
       CIO OF
       LDA 1C,2
       CIO OF
       BRM STLAB (STORE LABEL)
       NOP
       LDX JOB
       LDA T1
       BRU GN6C+1

*FIND COMMAND
GFIN   LDA ='   I'
       BRM SKBG
       LDA CCH
       CIO OF
       LDA 1C,2
       CIO OF
       LDA LC,2
GFIN1  SKG ='   Z'
       SKG ='   A'-1
       BRM GNEE
       CIO OF
       BRM GCH
       BRE CR,GN6D
       SKE ='   ,'
       BRM GNEE
       BRM GCH
       BRU GFIN1

*ASSIGN COMMAND
GASS   BRM GCH
       SKE ='   0'
       BRU GASS1
       BRM GCH
       SKE CR
       BRM GNEE
       LDA CCH
       CIO OF
       LDA ='   Z'
       BRU GN6B
GASS1  SKE ='   1'
       BRM GNEE
       BRM GCH
       SKE CR
       BRM GNEE
       LDA CCH
       CIO OF
       LDA ='   X'
       BRU GN6B

*TIME COMMAND
GTIM   LDA ='   I'
       BRM SKBG
       SKG ='   9'
       SKG ='   0'-1
       BRM GNEE
       LDA CCH
       CIO OF
       LDA 1C,2
       CIO OF
       LDA LC,2
GTIM1  CIO OF
       BRM GCH
       SKG ='   9'
       SKG ='   0'-1
       BRU *+2
       BRU GTIM1
       SKE CR
       BRM GNEE
       BRU GN6D

*RESTART COMMAND
GRES   LDA ='   E'
       BRU GTIM+1

*IF COMMAND
GIF    LDA ='   F'
GIFU   BRM SKBG
       LDA CCH
       CIO OF
       LDA 1C,2
       CIO OF
       LDA LC,2
GIF1   SKG ='   Z'
       SKG ='   A'-1
       BRM GNEE
GIF0   CIO OF
       BRM GCH
       SKG =0
       BRU *-2 (IGNORE SPACES)
       BRE CR,GN6D
       BRE ='   +',GIF4
       BRE ='   &',GIF4
       BRE ='   O',GIF5
       BRE ='   A',GIF6
GIF3   SKE ='   T'
       BRM GNEE
       BRM GCH
GIF2   STA J1,2
       LDA ='   H'
       BRM SKBG
       BRU GN5A
GIF4   CIO OF
       BRM GCH
       SKG =0
       BRU *-2
       BRU GIF1
GIF5   BRM GCH
       SKE ='   R'
       BRM GNEE
       BRM GCH
       SKE =0
       BRM GNEE
       LDA ='   +'
       BRU GIF4
GIF6   BRM GCH
       SKE ='   N'
       BRM GNEE
       BRM GCH
       SKE ='   D'
       BRM GNEE
       BRM GCH
       SKE =0
       BRM GNEE
       LDA ='   &'
       BRU GIF4

*UNLESS COMMAND
GUNL   LDA ='   N'
       BRU GIFU

*AFTER COMMAND
GAFTER LDA ='   F'
       BRM SKBG
       SKG ='   9'
       SKG ='   0'-1
       BRM GNEE
       LDA CCH
       CIO OF
       LDA 1C,2
       CIO OF
       LDA LC,2
GAF1   CIO OF
       BRM GCH
       SKG ='   9'
       SKG ='   0'-1
       BRU *+2
       BRU GAF1
       BRE CR,GN6D
       SKE =0
       BRM GNEE
       BRM GCH
       SKG =0
       BRU *-2
       BRU GIF3

*LABEL
GLAB   BRM GCH
       SKE CR
       BRU *+2
       BRM GNEE
       SKE =0
       BRU GLAB1
*      IGNORE IF SPACE
       BRM GCH
       SKE CR
       BRU *-2
       BRU GN2B
GLAB1  BRM STLAB
       BRU GLAB2 (ALREADY APPEARS)
GLAB3  RCP OF
       ETR =37777777B
       LDX T1
       STA LABCP,2
       LDX JOB
       BRU GN2B
GLAB2  LDX T1
       LDA LABCP,2
       SKE =0
       BRM GNEE
       BRU GLAB3

*STORE LABEL ON FIRST OCCURANCE, ERROR RETURN IF ALREADY STORED
STLAB  ZRO
       BRM UARM9
       BRM USEST
       LDA CI,2
       STA T4
       LDA LC,2
       LDX =TLAB
       CLB
STL    LSH 16
       STA 0,2
       STB 1,2 (END FLAG)
       BRM LGCH
       BRE CR,STL1 (CR ENDS LABEL)
       LSH 8
       ADM 0,2
       BRM LGCH
       BRE CR,STL1
       ADM 0,2
       EAX 1,2
       BRM LGCH
       SKE CR
       BRU STL
STL1   STB T1 (SET LABEL NO. TO 0)
STL1A  LDX T1
       LDA LABL,2
       SKE =0
       BRU STL2
*END OF LABELS WITH NO MATCH
       LDA LABPT
       STA LABL,2
       LDX =TLAB
*COPY LABEL
STL3   LDA 0,2
       STA* LABPT
       MIN LABPT
       EAX 1,2
       SKE =0
       BRU STL3
       MIN STLAB
       BRU STL8
*COMPARE LABEL
STL2   CAX
       LDA TLAB
       SKE 0,2
       BRU STL4 (NO MATCH)
       LDA =TLAB+1
       STA T3
*COMPARE AFTER FIRST WORD
STL5   LDA* T3
       SKE 1,2
       BRU STL4
       SKE =0
       BRU STL9
STL8   LDA =IGN
       BRM ARM9
       BRR STLAB
STL9   EAX 1,2
       MIN T3
       BRU STL5
*TO NEXT WORD
STL4   MIN T1
       BRU STL1A
LGCH   ZRO
       CIO T4
       ADD =140B
       ETR =177B
       BRR LGCH

*EXPECTS CHAR. IN A TO COMPARE WITH SAVED IN T1
*IF NO MATCH, MUST BE SPACE OR GNEE ERROR
*SKIPS OVER NON-SPACE CHARS AND FOLLOWING SPACES, RETURNING FIRST
*   NON SPACE AFTER SPACES
SKBG   ZRO
       LDX JOB
       SKE J1,2
       BRU SKBG1
SKBG2  BRM GCH
       SKE CR
       BRU *+2
       BRM GNEE
       SKE =0
       BRU SKBG2
       BRM GCH
       SKE CR
       BRU *+2
       BRM GNEE
       SKG =0
       BRU *-5
       BRR SKBG
SKBG1  LDA J1,2
       SKE =0
       BRM GNEE
       BRU SKBG2

GNE2   BRM CLFL
       LDA CC,2
       SKG =300
       BRU GNE2A
       MSG (UNABLE TO START COPY - ABORTING JOB.)
       BRU SLWFL1
GNE2A  MSG (TRBL STARTING COPY, WILL RETRY A FEW TIMES.)
       BRU GNX
GNEE   ZRO
       MSG (COMMAND FILE ERROR, JOB ABORTED)
       LDA =-1
       STA OF
       BRM SMAIL
       LDA =ERM2A
       BRM SMSG
       LDA =ERM3
       BRM SMSG
       LDA LINE,2
       LDB =10
       LDX CO,2
       BRS 36
       LDX JOB
       LDA CR
       CIO CO,2
       BRU GN1E3 (WAS BRU CEJ1A)
ERM2   ASC '$WAS ABORTED BECAUSE/'
ERM2A  ASC     '$HAS BEEN DELETED DUE TO/'
ERM4   ASC '$OF EXCESSIVE TIME TO READ FILE.$/'
ERM3   ASC '$OF TROUBLE IN LINE /'
ERM5   ASC '$CAUSED THE FOLLOWING ERROR MESSAGE.$/'
GNER   BRM GNEE
GNE1   MSG (TROUBLE WITH USER OR FILE NAME)
       BRU XQUIT
GNCE   BRM OPCHER

*CLOSES CIRCUIT AND FILES
$CLFL  ZRO
       BRM UARM9               DISARM INT 9
       LDX JOB
       LDA CI,2
       SKG =0
       BRU CLFL1
       CAX                     IF NOT ZERO THEN ZAP CIRCUIT
       BRS 139                 ZAP
CLFL1   BRS 17                 CLOSE FILES
       LDX JOB                 GET JOB #
       LDA =-1
       STA CI,2                SET CI TO -1 FOR THIS JOB
       STA FLSW,2              SET NO FILE OPEN FOR JOB
       STA IF
       STA OF
       BRR CLFL

*GETS 8 BIT INPUT CHAR AND CONVERTS
GCH    ZRO
       CIO CI,2
       ADD =140B
       ETR =177B
       STA LC,2
       MIN CC,2
       BRR GCH

GNCDS  BRM CLFL
       LDX JOB
       SKR RETSW,2
       BRU GNCDS1
       MSG (LOST CIRC. AGAIN -JOB ABORTED)
       BRU SJBEN
GNCDS1 MSG (LOST CIR.- WILL RETRY ONCE)
       LDX JOB
       BRU GNX
SCCEJ  BRM CLFL
       LDA TP,2
       SKE TP1,2
       BRU CEJ (TOUT FILE SPEC.)
       BRU EJ
SCCDS  BRM CLFL
       MSG (CIR. LOST BEFORE JOB END)
       LDX     JOB
       MIN JBSTA,2             ASSUM HE IS TURKEY AND HAS LOG COMMAND IN
       LDA     =NRETRY
       LDX     JOB             T.B.S.
       STA     NCPCT,2
       BRU CEJ

*GET INPUT (TERM. OUTPUT) AND SAVE ON TEMP FILE
GIC    ZRO
       CLA
       STA XOFSW,2
       BRM ARM9
GIC1   LDA =IGICN
       SKN XOFSW,2
       LDA =IGICE
       STA I9RTN
       BRM GCH
       BRM WOF
       BRU GIC1
*WRITE CHAR ON OUTPUT FILE
WOF    ZRO
       SKE ='   S'+100B
       BRU WOF1
       LDA =-1
       STA XOFSW,2
       BRR WOF (SET XOFSW,2)
WOF1   SKE ='   Q'+100B
       BRU WOF2
       STA XOFSW,2 (CLEAR SW)
       BRR WOF
WOF2   SKE LF
       BRU WOF3
       XMA CH,2
       SKE CR
       BRU *+2
       BRR WOF
       LDA CH,2
       BRU WOF3+1
WOF3   STA CH,2
       SKN OF
       BRU WOF4
       BRU WOF7
WOF4   MIN COUNT,2
       SKG =137B
       BRU WOF5 (NOT CONTROL CHAR.)
       SKE CR
       BRU *+2
       BRU WOF5
       SKE LF
       BRU WOF6
WOF5   CIO OF
WOF7   SKN PCHSW,2
       BRR WOF
       BRM PCH
       LDX JOB
       BRR WOF
WOF6   MIN COUNT,2
       LDA =6
       CIO OF
       LDA CH,2
       SUB =100B
       BRU WOF5


*SEND COMMANDS
SC     LDX     JOB             T.B.S.
       CLA
       STA     J4,2            IN CASE HE LOGED HIMSELF OFF
       SKN DEFSW,2
       BRU *+2
       BRM RELPG
       SBRM    OPIF            COMMAND FILE
       LDX JOB
       LDA NP2,2
       STA T3
       STA T4 (FOR TOUT FILE)
       CIO IF
       SKE ='   :'
       HLT
       LDX =-15 (MAX. CT FOR FILE NAME)
       CIO IF
       SKE =33B (SEMI)
       SKNE CR
       BRU SC1
       WCI T3
       BRX *-5
       CIO IF
SC2    SKE CR
       BRU *-2 (DISCARD REST OF LINE FOR NOW)
SC1    STA T1
       LDX JOB
       LDA RESTAR,2
       SKE =0
       BRU *+2
       BRU *+3
       SCP IF
       BRM ERR
       LDX JOB
       LDA T3
       STA TP,2
       LDA T4
       STA TP1,2
       LDA T1
       SKE =33B (SEMI)
       BRU SC4
       LDA NPJ,2
       STA T3
       STA T4
       LDX =-12
       CIO IF
       SKNE CR
       BRU SC11
       WCI T3
       BRX *-4
       CIO IF
       SKE CR
       BRU *-2
SC11   LDX JOB
       LDP T3
       STA PJP,2
       STB PJP1,2
SC4    SBRM OPTF               OPEN //TOUT? FILE
       LDX JOB
       LDA =1
       STA FLSW,2
SC4A   LDX CI,2
       BRS 13
       BRU *+2
       BRU SC4B                NO CHAR WAITING
       LDX JOB
       CIO CI,2
       BRU SC4A
SC4B   BRS 42
       LDX JOB
       STA STIME,2
       BRM SJTM                SET UP QTIME FOR JOB
       LDA =-1
       STA PCHSW,2 (START PROC. CHARS.)
       STA STSW
       LDA =SCCDS
       STA I10RTN,2
       LDX CO,2
       BRS 85 (SET 8 LEVEL)
       BRS 49
       MRG =4B3
       BRS 78
*SEND COMMAND
       LDA     =-1             SET DEFAULT TO KILL COMMAND
       BRM     SETCP           SET IT DUMMY.
SNC    LDA =ISNC
       BRM ARM9
       BRM JBTM
SNC2   CIO IF
       SKN IF
       SKNE =137B
       BRU SC5
       MIN CMC,2
       SKE CCH
       BRU SNC1A
       BRU SNC3 (PROCESS COMMAND CHAR.)
SNC1   CIO IF
SNC1A  ADD =40B
       ETR =177B
SNCC   CIO CO,2
       SKN APSW,2
       STA PSW,2
       SKE =15B
       BRU SNC1
       BRU RCRET
SNC3   CIO IF
       SKG ='   Z'
       SKG ='   A'-1
       BRM ERR
       CAX
       BRU* CTBL-'   A',2
CTBL   DATA AFTER,ERRL,RCON,ERRL,RESC,RFIN,RGO,ERRL,RIF,ERRL,RKIL,LOOK,ERRL
       DATA ERRL,ERRL,RPAU,SC5,RRES,SCCEJ,RTIM,RUNL,RVAL,RWAIT,ASS1,ERRL,ASS0

RCRET  BRM     PAUSE
       BRU     SNC
       LDA =IGN
       BRM ARM9
       BRM GCH
       CLB
       STB XOFSW,2
RCR1   BRM WOF
       LDA =IGN
       SKN XOFSW,2
       LDA =SNC (DONT EXIT IF XOFF)
       STA I9RTN
       BRM GCH
       BRU RCR1

SC5    LDX JOB
       MIN     JBSTA,2         INCR JOB STAT WORD(2)
       LDA =NRETRY
       STA NCPCT,2
       LDA =2
       STA FLSW,2
       LDX CO,2
       BRS 86 (SET NORMAL LEVEL)
       LDA =-1
       XMA IF
       BRS 20
       LDA =SCCEJ

SCEJ   LDX JOB
       STA I10RTN,2
       BRM GIC
       BRM UARM9
       SKN 940SW,2
       BRU SCEJ1
       LDA =177B
SCEJ2  LDA =EJS                LOG MSG
       LDB =-1
       LDX CO,2
       BRS 34
       BRM     PAUSE
       BRM     CLFL
       BRM     SJBR
       BRU     CEJ
       LDA =IGN
       BRM ARM9
       LDX JOB
       BRM GCH
       BRM WOF
       BRU *-2
SCEJ1  BRM PAUSE
       BRM SJBR
       BRU SCEJ2

*FINISHED JOB, SEND BACK TOUT
CEJ    LDX JOB
       CLA
       STA     JBTSNT,2
       SKN     CRP,2
       BRM     SETCP           SET IT BACK IN CASE OF RESTART
       LDA =4
       STA RETSW,2
CEJA   BRM UARM9
       SKR RETSW,2
       BRU CEJB
CEJA1  MSG     (COULD NOT SEND ALL OF TOUT FILE)
       LDX     JOB
       LDA     =-1
       STA     JBTSNT,2
       STA     IF
       LDA     =3
       STA     JBSTA,2
       LDA     =DONE
       BRM ARM10
       BRU     CEJ1            LETS LOOK LIKE EOF
CEJB   LDA TP,2
       SKE TP1,2
       BRU *+2
       BRU EJ (NO TOUT FILE)
       CLA
       STA IFCP,2
       SBRM OPITF
       SKN IF
       BRU *+2
       BRU EJ (NOTHING TO SEND)
       CIO IF
       SKN IF
       BRU *+2
       BRU EJ (1 CHAR ISNT ENOUGH)
       LDX     JOB
       STA J1,2 (SAVE FOR LATER)
       LDA =3
       STA FLSW,2
       MSG (COPYING TERMINAL OUTPUT)
       LDX JOB
       LDA UP,2
       LDB UP1,2
CEJX   BRM OPCH
       LDA =CEJER
       STA I10RTN,2
       LDP DELAY7              LETS JUST TAKE 3 MIN TO GET 1ST CHR
       BRM SETQTM
       BRM     PAUSE
CEJ0   BRM UARM9
       LDA =ST4A
       SKN 940SW,2
       LDA =9ST4A
       LDB =-1
       LDX CO,2
       BRS 34 (SEND COPY INST.)
       LDA     =IGN
       BRM     ARM9
CEJ0A  BRM     GCH
       SNE     =1              EXCAMATION POINT
       BRU     CEJ0B
       SKE     =37B            QUESTION MARK
       BRU     CEJ0A           KEEP LOOKING
       BRU     NOCOPY          SLAVE FILE NOT AVAILABLE
CEJ0B  BRM     UARM9
*
*      THIS CODE IS TO DETERMINE IF THE TIME HE SPECIIED IS
*        STILL GREATER THAN THE 1 HR THAT WE USUALLY GIVE TO COPY TERMINAL 
*          OUTPUT
       LDX     JOB
       LDA     MTIME,2
       MUL     =1800
       CBA
       ADD     STIME,2
       STA     T2
       BRS     42              READ CURRENT TIME
       ADD     =60*3600        ADD 1HR
       SKG     T2
       LDA     T2              T2 IS LARGER THAN 1 HR FROM NOW
       LDX     JOB             T.B.S.
       STA     QTIME,2
       LDA     DELAY4
       STA     EXBRT,2
       LDX JOB
       LDA TP,2
       LDB TP1,2
       SKR NCPCT,2
       BRU *+2
       LDP DUMNP
       LDX CO,2
       BRS 35 (SEND FILE NAME)
       LDX JOB
       LDA CR
       CIO CO,2
       CIO CO,2
       LDA =-1
       STA OF (NOTHING)
       LDX CO,2
       BRS 85 (SET 8 LEVEL)
       LDA =100
       STA CPYCT (COPY OUTPUT CT BEFORE CK FOR INPUT)
       LDX JOB
       LDA J1,2
       BRU CEJ2
CEJ1   SKN IF
       BRU CEJ3
       LDA =-1
       STA FLSW,2
       LDX CO,2
       BRS 86 (BACK TO 7 LEVEL)
       LDX     JOB
       MIN     JBSTA,2         INCR JOB STAT WORD(3)
       BRM     PAUSE
       LDX     JOB             TO BE SURE
       LDA     =2              RETRY TO SEND MAIL A FEW TIMES
       STA     RETSW,2
CEJM   LDX JOB
       SKR     RETSW,2
       BRU     *+2
       BRU     NOMAIL          SORRY WE CAN'T DO ANYTHING ABOUT IT
       LDA ='   D'+100B
       CIO CO,2
       BRM GIC
       BRM SMAIL
       LDA =EMSG
       SKN TOSW,2
       LDA =TOMSG
       BRM SMSG
       SKN     JBTSNT,2
       BRU     *+3
       LDA     =NOCP1
       BRM     SMSG
       LDX     JOB
       MIN     JBSTA,2         INCR JOB STAT WORD (4)
CEJ1A  LDX     JOB
       BRM     PAUSE
       LDA ='   D'+100B
       CIO CO,2
       LDA =DONE
       BRU SCEJ
CEJ3   SKR CPYCT
       BRU CEJ4
*
*************************
       BRM     SJBI            RESCEDULE EVERY 50 CHAR
*************************
*
       LDA =100
       STA CPYCT
       MIN CMC,2
       BRM GIC
CEJ4   CIO IF
CEJ2   ADD =40B
       ETR =177B
       CIO CO,2
       BRU CEJ1

CEJER  BRM CLFL
       MSG (CIRCUIT BROKE BEFORE COMPLETE TOUT SENT)
       MSG (RETRYING)
       BRU CEJA
NOMAIL MSG     (COULD NOT SEND MAIL)
DONE   BRM CLFL                CLOSE CIR, FILES
       LDX     JOB
       LDB     CMC,2           CHAR CNT/50
       MSG (END OF JOB)
       BRU SJBEN
EJ     LDX     JOB
       LDA     =4
       STA     JBSTA,2
       BRU     DONE
XQUIT  BRU SJBEN
QUIT   MSG ($ABORTING ALL JOBS$/)
       BRS 10

ETIME  BRU     SLWJOB

SLWRES BRM CLFL
       MSG (CIRCUIT BLDG. SLOW - TRYING AGAIN)
       LDA OPCH
       LDX JOB
       STA BRM1,2
       BRM SJBR
       LDA =-3
       ADM BRM1,2
       BRU* BRM1,2 (3 INST. BEFORE OPCH)
SLWJOB BRM GIC
       BRM CLFL
       MIN TOSW,2
       MIN     JBSTA,2
       MSG (TIME RAN OUT)
       BRU SLW1
SLWFIL LDA CC,2
       SKG =MXCPCH
       BRU SLWFL3
       LDA JBSTA,2
       SKNE =0
       BRU GN1E2
       MSG (FILE COPY TAKING TOO LONG)
SLWFL1 LDA =-1
       STA OF
       BRM SMAIL
       LDA =ERM2
       BRM SMSG
       LDA =ERM4
       BRM SMSG
       BRU CEJ1A
SLWFL3 STA CCF,2
       LDP DELAY5
       BRM SETQTM
       BRR JBTM
SLWFL2 LDA CC,2
       SKE CCF,2
       BRU SLWFIL+1
       BRM CLFL
       MSG (NO CHARS. FOR 3 MIN, RESTARTING)
       BRM SJBR
       LDA =MXCPCH/5
       ADM CC,2
       BRU GNX
SLWCPY NOP
       BRS     42              READ TIME
       LDX     JOB
       SUB     LCTIME,2        SUB LAST TIME 100 CHARS SENT
       SKL     =3600*5
       BRU     SLW0            MORE THAN 5 MIN SINCE LAST CHR SENT
       LDP     DELAY4
       BRM     SETQTM          SET FOR 1 MORE HOUR
       SKR     RETSW,2
       BRR     JBTM
       BRU     CEJA1
SLW0   BRM CLFL
       MSG (TAKING TO LONG TO COPY TERM. OUTPUT)
SLW1   BRM SJBR
       LDA     =NRETRY
       STA     NCPCT,2
       BRU CEJA
*
*      HERE IF MAIL TOO SLOW
*
SLWMAI MSG     (TOO LONG TO SEND MAIL, RETRYING)
*
*************************
       BRM     SJBR            SCHED IMMED REACTIVATION
*************************
*
       BRU     CEJM            GO RETRY TO SEND MAIL
NOCOPY MSG     (UNABLE TO CONTACT SLAVE)
       BRM     SMAIL
       LDA     =NOCPMG
       BRM     SMSG
       BRU     CEJ1A

*MISC. SUBROUTINES
$PMSG  ZRO
       LDX JOB
       BRR PMSG
$XMSG  ZRO
       STA T1
       BRM LOG
       LDX JOB
       BRR XMSG

SETIM  ZRO
       STA INT5RT
       BRS 49
       MRG =1B5
       BRS 135
       LDX JOB
       BRR SETIM
SET8LV ZRO
       LDX CI,2
       LDA =4B7+400B
       BRS 12
       LDX JOB
       BRR SET8LV
OPTF   NOP     OPIFR
       LDP     TFSP            //TOUT
       BRU     OPOF1
OPOF   NOP     OPIFR
       LDP     OFSP            //TEMP
OPOF1  BRM     SFIL
OPOF2  BRS     65
       BRU     OPOF3
       STA     OF
       LDA =15 MAX NUMBER OF TRIES
       STA     MAXTRY          STORE BACK
       BRR     OPIFR
OPOF3  BRM     OPOFE
       LDP     T1
       BRU     OPOF2

*
*      THIS VARIABLE IS FOR THE MAX TIMES TO TRY TO OPEN FILE BEFORE 
*         DECLARING JOB BAD
*
MAXTRY DATA 15
*
*      THIS IS AN OPEN ERROR ROUTINE
*
OPOFE  ZRO
       SKR     MAXTRY          IF ZERO, WE HAVE TRIEED ENOUGH
       BRU     *+2
       BRU     OPOFDE          TRY TO DELETE IT AND QUIT
       STX TEMPX
       CXA
       SKNE =30
       BRR OPOFE               FILE DIRECTORY GROUP BECAME BUS RETRY

       SKNE =1
       BRR OPOFE               SOMEONE ELSE PROBABLY HAS THE FILE OPEN
       SKNE =34
       BRR OPOFE               FILE DIRECTORY GROUP CONFLICT
       SKNE =84
       BRR OPOFE               SOMBODY ELSE PROBABLY HAS THE FILE
       SKNE =29
       BRU OPOFDE              BAD FILE FOR OUTPUT TRY TO DELETE
       SKNE =41
       BRU OPOFDE              BAD FILE FOR INPUT TRY TO DELETE
*
*      WE COME HERE IF WE CAN NOT DELET THE FILE
*
OPOFE1 MSG (TROUBLE OPENING TEMP FILE/)
       LDX JOB
       LDA =-1
       STA CRP,2
       LDA =SCHEDN
       STA JOBL,2
       BRM CLFL                CLOSE FILES,CIRCUITS
       LDA STSW
       SKE JOB
       BRU *+3
       LDA =-1
       STA STSW
       MIN BFCT
       MIN NJBCT
       BRM RELPG
       LDX     JOB
       STX     LASTJB
       BRU SCHEDN
TEMPX  ZRO
FILBIT DATA    316B5
OPIF   NOP     OPIFR
       LDP     OFSP
       BRU     OPIFA
OPITF  NOP     OPIFR
       LDP     TFSP
OPIFA  BRM     SFIL
OPIFA1 MRG     FILBIT
       BRS     64
       BRU     OPIF1
       STA IF
       LDA =15 MAX NUMBER OF TRIES
       STA     MAXTRY          STORE BACK
       LDX     JOB             TKB 5/29/75
       LDA     IFCP,2          TKB     5/29/75
       SCP     IF              TKB     5/29/75
       BRM     ERR
       BRR     OPIFR           TKB     5/29/75
OPIF1  BRM     OPOFE
       LDP     T1
       BRU     OPIFA1
*
*      THIS ROUTINE ADDS TO THE POINTER IN A,B THE CHAR CORRESPONDING
*         TO THE JOB # OF THE JOB (I.E. JOB 0 - A ,1-B,2-C...
*
$SFIL   ZRO
       STP T1                  SAVE POINTER
       LDA JOB                 GET JOB
       ADD =41B                ADD "A" TO GET RIGHT FILE NAME
       WCI T1                  WRITE INTO STRING
       LDP T1
       LDX =3
       BRR SFIL
*
*      THIS ROUTINE IS TO OPEN THE //TOUT FILE
*
OPTOF  NOP     OPOFAR
       LDP     TFSP            PTR TO //TOUT
       BRU     OPOFA           GO TRY TO OPEN AFTER PUTTING ON RIGHT CHAR
*
*      THIS ROUTINE IS TO OPEN THE //TEMP FILE
*
OPMOF  NOP     OPOFAR
       LDP     OFSP            GET PTR TO //TEMP
OPOFA  BRM     SFIL            PUT RIGHT CHAR ON END OF FILE (PTR IN A,B)
       MRG     =716B5          PUT IN RANDOM BITS
       BRS     65              OPEN FILE
       BRU     OPOFA1
       STA     OF              STORE FILE NUMBER
       LDA =15 MAX NUMBER OF TRIES
       STA     MAXTRY          STORE BACK
       RSP OF                  READ SIZE OF FILE
       MRG =4B7
       SCP OF                  SET C.P TO END OF FILE
       HLT 0                   (FAILED ! PUNT!)
       BRR OPOFAR
OPOFAR ZRO     0
OPIFR  EQU     OPOFAR
OPOFDE LDP     T1              GET ORIGINAL PTS TO FILE 
       BRS     48
       BRU     OPOFE1
       BRS     69              DELETE FILE
       BRU     OPOFE1          FAILED TO DELETE SO MARK IT BAD
       BRR     OPOFE
OPOFA1 BRM     OPOFE           BRANCH TO ERROR ROUTINE TO DELETE FILE IF BAD
       LDP     T1              GET POINTERS TO FILE NAME
       BRU     OPOFA           TRY AGAIN TO OPEN FILE

*
*      MOD 11/7/77 TO SEND MAIL FROM PERPOPER
*

MASOP  ASC     'PERPOPER'
MASPT  DATA    3*MASOP-1,3*MASOP+7
SMAIL  ZRO
       LDA CI,2; SKE =-1; BRM PAUSE
       LDP DELAY8; BRM SETQTM
       BRM     CLFL; LDX JOB; LDA MASPT; LDB MASPT+1;SMAILO BRM OPCH
       BRM UARM9
       LDA =SEND
       LDB =-1
       LDX CO,2
       BRS 34
       LDX JOB
       MIN CMC,2
       LDA UP,2
       LDB UP1,2
       LDX CO,2
       BRS 35
       LDA =IML
       BRM ARM9
       MIN CMC,2
       BRM GCH
       LDA =SML
       STA I9RTN
       CIO CI,2
       MIN CC,2
       BRU *-2
SML    LDA =ML1
       BRM SMSG
       LDA FP,2
       LDB FP1,2
       LDX CO,2
       BRS 35
       LDA =ML2
       BRM SMSG
       LDA =IML
       BRM ARM9
       BRM GCH
       BRR SMAIL
ML1    ASC '$YOUR JOB "/'
ML2    ASC '" SUBMITTED TO "PERP"/'
SMSG   ZRO
       LDX JOB
       LDB =-1
       LDX CO,2
       BRS 34
       LDX JOB
       MIN CMC,2
       BRM GIC
       BRR SMSG


*SETS TIME INTERRUPT FOR TIME REMAINING OF QTIME
$SETBIT ZRO
       LDA     =T1
       LDX     =8
       BRS     7
       LDA     T1
       MRG     =4B7
       STA     T1
       LDA     =T1
       MRG     =4B7            SET BIT 0 TO CHANGE THE ALARM
       LDX     =8
       BRS     7               SET IT
       BRR     SETBIT
SETQTM ZRO
       LDX JOB
       STA EXBRT,2             TIME EXPIRE BRANCH INSTRUCTION
       CBA                     MAX TIME TO RUN
       MUL =1800
       STB T1
       BRS 42                  GET TIME NOW
       LDX JOB
       ADD T1                  ADD TIMESTART+ TIME RUN
       SKA =4B7                NEGATIVE?
       LDA =37777777B          YES SET TO LARGE + NUMBER
       STA QTIME,2             STORE IN TIME TO RUN
       BRR SETQTM

SJTM   ZRO
       LDX JOB
       LDA MTIME,2
       MUL =1800
       CBA
       ADD STIME,2
       SKA =4B7
       LDA =37777777B
       STA QTIME,2
       LDA DELAY3
       STA EXBRT,2
       BRR SJTM

*CHECKS IF TIME IN A (COMP. BIN, GMT) IS DURING DEFERRED TIME
*ERROR RETURN IF NOT DEFERRED TIME
$DEFTM ZRO
       BRR DEFTM


*      INTERUPT ROUTINES FOR 211 INTERUPT (DISMISS ON CIO)
*
*      WHILE IN GCH, IGNORE INTERUPT
IGN    LDA GCH
       STA BRM1,2
       BRM SJBI
       LDA =IGN
IGN1   BRM ARM9
       LDA BRM1,2
       STA GCH
       BRU GCH+1
*
*      WHILE IN SKBG, IGNORE INTERUPT  WHILE COPYING COM FILE
*
IGC    LDA SKBG
       STA BRM2,2
       LDA GCH
       STA BRM1,2
       BRM SJBI
       LDA BRM2,2
       STA SKBG
       LDA =IGC
       BRU IGN1
*
*      RETURN IMMEDIATELY TO PROGRAM THROUGH GIC.  DO NOT
*      WAIT FOR MORE TERMINAL INPUT.  ONLY SET IF XOFSW
*      IS POSITIVE (XON). OTHERWISE IGICN IS USED
IGICE  BRR GIC
*
*      WAIT FOR INPUT BECAUSE OF XOFF.  I NEED A XON SO I CAN
*      SEND INFORMATION ACROSS.
*
IGICN  LDA GIC
       STA BRM2,2
       LDA GCH
       STA BRM1,2
       BRM SJBI
       LDA BRM2,2
       STA GIC
       LDA =IGICN
       BRU IGN1
*
*      DISMISS ON OUTPUT.  WAIT FOR OUTPUT BUFFER TO EMPTY A BIT
*      AND GO TRY IT AGAIN.
*
ISNC   LDA I9PC
       STA PC,2
       BRM SJBO
       LDA =ISNC
       BRM ARM9
       LDX JOB
       BRU* PC,2
*
*      DISMISS WHILE DOING A FPAUSE.  IGNORE.
*
IFP    LDA GCH
       STA BRM1,2
       LDA FPAUSE
       STA BRM2,2
       BRM SJBI
       LDA =IFP
IFP1   LDB BRM2,2
       STB FPAUSE
       BRU IGN1
*
*
*
*      DISMISS WHILE IN MAIL ROUTINE.  A 10 MINUTE DELAY
*      IS EXPECTED IN CASE I CANNOT DO SOMETHING.  IF THE
*      JOB ISN'T STARTED BY THAT TIME, WE GO TO SLWCPY
*
IML    LDA SMAIL
       STA BRM2,2
       LDA GCH
       STA BRM1,2
       LDP DELAY8
       BRM SJBIT
       LDA BRM2,2
       STA SMAIL
       LDA =IML
       BRU IGN1

*
*      THIS ROUTINE PRINTS OUT EMERGENCY MSG
*
EMMSG  ZRO
       BRS 45                  DISMISS FOR 3 SEC
       SKN EFLAG               CHECK EMER FLAG
       BRU GTPER2              NOT -1
       CAB                     LET PRINT OUT THE MSG
       MSG  (EMERGENCY BIT ON)
       CLA
       STA     PERSW           DO NOT ALLOW PERP JOB TO START
       STA EFLAG               ZERO OUT FLAG SO WE KNOW WE HAVE BEEN HERE
       BRU GTPER2              LETS GO MESS AROUND

NEMSG  ZRO
       SKN EFLAG
       BRU *+2
       BRR NEMSG
       MSG (EMERGENCY BIT OFF)
       LDA =-1
       STA     PERSW           ALLOW PERP JOBS TO BE STARTED
       STA EFLAG
       CLA; STA NOEMFL ( DO NOT ALLOW PERP TO SHUT ITSELF DOWN)
       BRR NEMSG

EFLAG  DATA -1

*
*      INIT ROUTINE FOR A JOB
*
INIT1  ZRO
       BRS 42                  READ CLOCK IN USERS TIME ZONE
       LDX JOB
       STA STIME,2             STORE CURRENT TIME IN STARTING TIME FOR JOB
       LDP DELAY3              LOAD WITH DEFAULD MAX TIME (1HR)
       STB MTIME,2             MAX TIME TO RUN 
       BRM SETQTM              SET MAX TIME EXPIRE TO GO TO SLWJOB
       CLA
       STA COUNT,2             ZERO COUNT OF OUTPUT CHAR
       STA PCHSW,2             ZERO OUT CHAR ON TOUT FILE
       STA     IFCP,2          ZERO INPUT FILE C.P
       STA     JBSTA,2
       STA     J4,2            ZERO OUT USED FOR VAL,KIL
       LDA =1                  SET TO LINE 1 OF INPUT FILE
       STA LINE,2
       LDA =-1                 SET TIME OUT SWITCH )7*-1
       STA TOSW,2              SET DEFINE SWITCH TO -1
       STA DEFSW,2
       BRR INIT1

GTPER1 SKN PERSW               READY TO RUN NEW JOB?
       BRU GTPER2              NO
       BRM INIT1               INIT FOR THIS JOB
       BRM GPJB                GET A JOB
       LDX JOB                 GOT JOB
       LDP PUP USER NAME PTR
       STA UP,2                USER NAME PTR BEG
       STB UP1,2               USER NAME PTR END
       LDP CFP                 PTR TO FNAME
       STA FP,2                BEG
       STB FP1,2               END
       LDP T3                  PJCODE PTR
       SKE T4
       BRU *+2
       BRU GNX                 NO PJCODE
       STA PJP,2               PROJ CODE BEG
       STB PJP1,2              PROJ PTR END
       BRU GNX
GTPER2 SKR NOACT
       BRU SJBEN1
       LDA =1000
       BRS 81                  DISMISS 1 SEC
       BRU SJBEN1

UNEXPC HLT


*OPEN CHANNEL
*EXPECTS FOLLOWING SET UP:
*USERPT - LOG IN STRING
*PROJPT - PROJ. CODE STRING
*PGM    - ADR. OF INITIAL MSG TO SEND (NOT 8 LEVEL)
* A REG.- ADR. OF ERROR ROUTINE FOR BROKEN CIRCUIT (SETS I10RTN,2)

*NOTE: FOUR INST. PRECEEDING "BRM OPCH" ARE PART OF CALLING SEQ.
OPCH   ZRO
       STP USERPT
       LDA =GNCE               BRM OPCHER
       BRM ARM10               ARM BAD CIO (ZAPPED CIR)
       BRM     ARM8            ARM BUFFER ZAP
       LDP DELAY1
       BRM SETIM
       BRS 138                 SUPERVISOR REQ FOR CIRCUIT BEGIN
       SKE =0
       BRU NOSUP
       LDP USERPT              USER NAME
       LDX =1
       BRS 35
       LDA ='   :'
       CIO =1
       LDX JOB
       LDA SYS,2               SYSTEM NUMBER
       LDX =1
       LDB =10
       BRS 36
       LDA ='   -'
       CIO =1
       BRS 138                 SUPERVISOR REQ FOR CIRCUIT END
       SKE =0
       BRM OPCHER              ERROR
       CXA                     X HAS INPUT PORT
       SKG     =7
       BRM     OPCHER
       LDX =-NJ
       LDB =10
       SKE CI+NJ,2             CHECK TO SEE IF ALREADY IN TBL
       BRU *+3
       STB CI+NJ,2             YES , SET TO 10
       BRU *+2
       BRX *-4
       LDX JOB                 GET JOB TO STORE COMMAND INPUT AUX CIR
       STA CI,2
       ADD =1                  MAKE OUTPUT CHAN 1 MORE
       STA CO,2
       LDA PJP,2
       LDB PJP1,2
       LDX CO,2
       BRS 35                  SEND OUT PJ CODE
       LDX JOB
       SKN 940SW,2             940?
       BRU OPCH2               YES
       LDX CO,2                NO, SET 8 LEVEL OUTPUT
       BRS 85
       LDX JOB
       LDA =15B (CR, 8 LVL)
       CIO CO,2                PUT IT OUT
       CIO CO,2                AGAIN
       LDX CO,2
       BRS 86
       LDA =ISTR
       LDB  =-1
       BRS 34
OPCH1  LDA =2B3                TURN ON CIO INT (INVALID CIO UNIT  AUX)
       BRS 78
       LDX JOB
       BRR OPCH
OPCH2  LDA CR
       CIO CO,2
       BRU OPCH1
ISTR   ASC 'SET LOGOUT$/'
OPCHER ZRO
       STA T5
       LDA =2B3                TRAP CIO'S (AUX)
       BRS 78 (CLEAR TIMER)
       LDX JOB
       LDA =-1
       STA CI,2
       BRM CLFL                CLOSE ALL  FILES,CIRCUITS FOR JOB
       LDA T5
       SKE =2
       BRU OPCER4
       MSG (BAD USER NAME)
       BRM DELJB               DELETE JOB
       BRU SJBEN1
OPCER4 SKE =4
       BRU OPCER1
       MSG (COMPUTER UNAVAILABLE)
OPCER5 LDA SYS,2
       STA T1
       LDX =CLIST-1
OPCER  EAX 1,2
       LDA 0,2
       SKE =0
       BRU *+2
       BRU OPCERX
       SKE T1
       BRU OPCER
       LDA =-1
       STA 0,2
OPCERX LDA OPCH
       ETR =37777B
       SKNE    =SMAILO
       BRU NOMAIL
       SKE =CEJX
       BRU     SJBEN1
       BRU DONE
OPCER1 CAB
       MSG (CHANNEL ERROR )
       LDX JOB
       LDA FLSW,2
       SKE =3
       BRU OPCER5
       BRU SLW1
INT5RT ZRO
INT5   ZRO INT5PC
       BRU* INT5RT
INT5PC ZRO
NOCIR  BRM OPCHER
NOSUP  BRM OPCHER
*
*      TO UNARM INT10
*
UARM10 ZRO
       BRS     49              READ
       ETR     =77775777B
       BRS     78
       LDX     JOB
       BRR     UARM10
ARM10  ZRO
       STA I10RTN,2
       BRS 49                  READ INT ARMED
       MRG =2B3                ARM INT ON BAD CIO (AUX)
       BRS 78
       LDX JOB
       BRR ARM10
INT10  ZRO I10PC
       LDA I10PC
       SKG =GTJOB
       BRM JBRSB
       LDX JOB
       LDA =-1
       STA CI,2
       LDA I10RTN,2
       STA T1
       LDA =UNEXPC
       BRM ARM10
       BRU* T1
I10PC  ZRO
I9PC   ZRO
I9RTN  ZRO
ARM9   ZRO
       STA I9RTN
       BRS 49
       MRG =4B3
       BRS 78
       LDX JOB
       BRR ARM9
UARM9  ZRO
       BRS 49                  READ INTERRUPTS ARMED
       ETR =77773777B
       BRS 78                  UNARM IN OR DISMISS ON CIO
       LDX JOB
       BRR UARM9
INT9   ZRO I9PC
       LDX JOB
       LDX CI,2
       BRS 79
       LDX JOB
       BRU* I9RTN
*
*      ARM INTERRUPT BUFFER ZAP
*
ARM8   ZRO
       BRS     49              READ
       MRG     =1B4
       BRS     78              SET
       BRR     ARM8            RETURN
*
*      UNARM INT 8
*
UARM8  ZRO
       BRS     49              READ
       ETR     =77767777
       BRS     78              UNARM
       BRR     ARM8            RETURN
*
*      INTERRUPT 8
*
I8PC   ZRO
INT8   ZRO     I8PC
       MSG     (BUFFER ZAP)
       BRM     ARM8
       SBRR    INT8            RETURN
USERPT BSS     2

ST1A   ASC 'DUPJOB10'
SP1A   DATA 3*ST1A-1,3*ST1A+7
ST1    ASC 'DUPJOB'
SP1    DATA 3*ST1-1,3*ST1+5
9ST3   ASC 'GO GDUP$#/'
ST2    ASC 'RDP'
ST3    ASC 'R GDUP$#/'
ST4A   ASC 'R TDB$/'
9ST4A  ASC     'TDB$/'
ST5    ASC     'R DTB$/'
9ST5   ASC     'DTB$/'
ST6    ASC ',TEL/'
SP2    DATA 3*ST2-1,3*ST2+2
DUMN   ASC 'DUMMY'
DUMNP  DATA 3*DUMN-1,3*DUMN+4

DELAY1 ZRO SLWRES
       DATA 180000             3 MIN
DELAY2 ZRO SLWFIL
       DATA 5                  5 MIN
DELAY3 ZRO     SLWJOB
       DATA    60              1 HOUR
DELAY4 ZRO     SLWCPY
       DATA    60              60 MIN.
DELAY5 ZRO     SLWFL2
       DATA 3
DELAY7 ZRO     SLWCPY
       DATA 5
DELAY6 ZRO DONE
       DATA 5
DELAY8 ZRO     SLWMAI          FOR SLOW MAIL
       DATA    3               THREE MIN

OFS    ASC '//TEMP '
OFSP   DATA 3*OFS-1,3*OFS+5

TFS    ASC     '//TOUT '
$TFSP   DATA    3*TFS-1,3*TFS+5
EJS    ASC     '$LOG$/'
EMSG   ASC     '$HAS BEEN COMPLETED/'
TOMSG  ASC     '$HAS BEEN ABORTED DUE TO EXCESSIVE TIME/'
NOCPMG ASC     '$HAS BEEN COMPLETED, BUT DUE TO SYSTEM PROBLEMS'
       ASC     '$THE OUTPUT FILE CANNOT BE COPIED BACK$/'
P2ERR  ASC     '$HAS BEEN ABORTED DUE TO RUNTIME ERROR/'
ERM10  ASC     '$HAS BEEN DELETED DUE TO NO COMMANDS FILE/'
SEND   ASC     '$SEND /'
NOCP1  ASC     '$BUT YOU MAY NOT HAVE RECEIVED ALL OF THE OUTPUT/'

*MOVES MLIST TO CLIST
$MKTIME DATA 0
$MKLIST ZRO
       SKN     MKTIME
       BRU     *+2
       BRU     MKLIS1
       BRS     42              READ TIME
       SUB     MKTIME
       SUB     =15*60*60       NUMBER OF CUBS
       SKG     =0
       BRR     MKLIST          NOT TIME EVER 15 MIN
MKLIS1 BRS     42              READ TIME
       STA     MKTIME          SET AS TIME READ
       BRM     OPSCH           OPEN SCHEDULE FILE AND GET PAGE FOR BUFFER
       BRM     RDSCH           READ SCHED FIL
       BRM     FIXSCH          FIX SCHEDULE AND RELEASE FILE
       LDA =CLIST
       STA CLPT
       CLA
       STA     LSTNOT
       BRR MKLIST

$LSTNOT        ZRO 0           LAST COMPUTER NOT AVAILABLE
MLIST  DATA 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,88,90
       DATA 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,0,0
$CLIST BSS *-MLIST
$SZLIST EQU CLIST-MLIST
CLPT   ZRO

*DATA FOR SUBR BELOW USED FOR SCHEDULING


SCHBLK EQU     20000B
SCHPTR DATA    3*SCHFIL-1,3*SCHFIL+17
SCHFIL ASC     "(DUPJOB)//SCHEDULE"
SCHFL  BSS     1
SCHLEN DATA    300
WDUP   BSS     1
WDDN   BSS     1
WDNO   BSS     1
RELAB  BSS     2
SAVA   BSS     1
MECPU  BSS     1
SAVX   BSS     1
SAVSYS BSS     1
WSCHFL BSS     1                         -1=> WRITE BACK OUT TO SCHED
NOEMFL BSS     1                       -1 => WE CAN ISSUE EMM MSG


*
*      OPSCH   OPENS SCHEDULE FILE
*

OPSCH  ZRO
OPSCH1 LDP SCHPTR; MRG =516B5;  LDX =2;  BRS 65; BRU OPE1; STA SCHFL
       CLA; SCP SCHFL; BRU OPE1; BRR OPSCH
OPE1   BRS 45; BRU OPSCH1

*
*      RDSCH   GETS PAGE AND READS FROM SCHEDULE
*

RDSCH  ZRO
       BRS 43; STP RELAB; CLB; STB WSCHFL;  BRS 44
       LDA SCHLEN; LDX =SCHBLK; BIO SCHFL; HLT; LDA SCHFL; BRS 20; BRR RDSCH

*
*      FIXSCH  FIXES UP CLIST WITH CPNO OR -1 IF SCHED DOWN
*

FIXSCH ZRO
       LDX =200B; BRS 127; STA MECPU
       LDX JOB; LDA SYS,2; STA SAVSYS
       LDX =-SZLIST
FIX0   STX SAVX; LDA CLIST,2; LDX JOB; STA SYS,2;  SKNE =0; BRU FIX2
       BRM CKSCH; LDX SAVX; LDA CLIST+SZLIST,2; STB CLIST+SZLIST,2
       SKNE CLIST+SZLIST,2; BRU FIX2; SKB =4B7; BRU FIX1;  MSG (SCHED ALLOW)
       BRU     FIX2
FIX1   MSG (SCHED NOT ALLOW)
FIX2   LDX SAVX; LDA CLIST,2; SKNE MECPU; BRM SETEM; LDX SAVX; BRX FIX0
       SKN WSCHFL; BRU FIXEND; BRM OPSCH; LDA =4B7; SCP SCHFL; HLT
       LDA SCHLEN; LDX =SCHBLK; BIO SCHFL; NOP; LDA SCHFL; BRS 20
FIXEND BRS 43; CLA; LSH 6; BRS 121
       LDA     SCHFL; BRS 20
       LDP     RELAB; BRS 44
       LDX JOB; LDA SAVSYS; STA SYS,2
       BRR FIXSCH


*
*      SETEM WILL SET EMMSG IF THE CPNO WE ARE RUNNIN ON IS SCHED DONWN
*

SETEM  ZRO
       SKN CLIST+SZLIST,2; BRU SET1; SKN NOEMFL
       BRR     SETEM; LDA =FLAG; LDX =8; BRS 7 (READ FLAG WORD TO FLAG)
       LDA FLAG; MRG =40B; STA FLAG (SET IT ON)
       LDA =FLAG; LDX =8; MRG =4B7 (SET TO WRITE); BRS 7
       MSG     (ISSUING EMERGENCY MESSAGE)
       BRR     SETEM
SET1   LDA =-1; STA NOEMFL; BRR SETEM

*
*      CKSCH   CHECKS SCHEDULE FOR CPNO IN A REG RETURNS
*                -1 OR CPNO IN B REGISTER
*

CKSCH  ZRO
       STA SAVA
       MUL =3; RSH 1; CBX; LDA SCHBLK,2; SKA =4B7; BRU CKEX (EXCEPTION)
       SKE =0; BRU CKRE; LDB SAVA; BRU CKEND
CKRE   BRM GREG; BRM CKREG; BRU CKEND
CKEX   BRM CKEXC
CKEND  BRR CKSCH

*
*      GREG    GETS HR UP AND HR DN FROM A REG
*

GREG   ZRO; RSH 23; CLA; LSH 11; SUB =1; SKG =0; ADD =24; STA WDDN; CLA
       LSH 12; STA WDUP; BRR GREG

*
*      CKREG   SETS WDUP,WDDN,WDNOW AND CALLS CKIT
*

CKREG  ZRO;
       LDA =-1; CLX; BRS 176; COPY XA,AX,B; LSH 12; MRG =320B
       COPY XA,AX,B
       BRS 176; ETR =37B; STA WDNO
       BRM CKIT (LETS CHECK AND SEE)
       BRR CKREG

*
*      CKEXC   SETS UP WDUP WDDN WDNOW AND CALL CKIT
*

CKEXC  ZRO
       STX T1
       CLA; LDB SCHBLK+1,2; LSH 4; STA WDDN; CLA; LSH 3; STA WDUP; CLA
       LSH 17; SKG =60; BRM FIXEXC; SUB =60; RSH 17; MRG WDUP; RSH 3
       MRG WDDN; LSH 20; STA WDDN
       LDX T1;        LDA SCHBLK+2,2; STA WDUP
       LDA =-1; LDX =20B; BRS 176; STA WDNO; BRM CKIT
       LDA WDNO; SKL WDUP; SKNE WDUP; BRR CKEXC; LDX T1
       LDA SCHBLK,2; ETR =37777777B; STA SCHBLK,2; LDA =-1; STA WSCHFL
       BRR CKEXC


*
*      FIXEXC  NOT ENOUGH MIN IN MON.
*

FIXEXC SKNE =60; BRR FIXEXC
       ADD =3600*24; RSH 17; LDA WDUP; SKG =0; BRU FIXE1; SUB =1
       RSH 3; LDA WDDN; RSH 4; CBA; BRR FIXEXC
FIXE1  LDA =11; STA WDUP; LDA WDDN; SUB =1; STA WDDN; BRR FIXEXC
*
*      CKIT    RETURNS SAVA IN B REG IF VALID TIME TO RUN ELSE -1
*

CKIT   ZRO
       LDB     SAVA
       LDA     WDUP
       SKG     WDDN
       BRU     CKIT1
       LDA     WDNO            HRUP>HRDN
       SKNE WDDN; BRU CKNO; SKG WDDN; BRR CKIT; SKG WDUP; SKNE WDUP; BRR CKIT
CKNO   LDB =-1
       BRR     CKIT
CKIT1  SKE     WDDN
       BRU     CKIT2
       BRR     CKIT
CKIT2  SKG     WDNO
       BRU     CKIT3
       BRU     CKNO
CKIT3  LDA     WDDN
       SKG     WDNO
       BRU     CKNO
       BRR     CKIT

CCH    ASC '  :'
QT     ZRO '   "'
LF     ZRO 152B
$CR    ZRO 155B


*STORAGE FOR 26 VARIABLES
LABPT  EQU     20000B
VAR    EQU 20001B  0 OR 1
VARE   EQU VAR+26
VP     EQU VARE
VPE    EQU VP+26
VP1    EQU VPE 2ND STRING PTR
VP1E   EQU VP1+26
VC     EQU VP1E  CHAR. COUNT
VCE    EQU VC+26
VFN    EQU VCE IF -1, ON STRING SEARCH
VFNE   EQU VFN+26
VCH    EQU VFNE  FIRST CHAR.
VCHE   EQU VCH+26

*LABEL STORAGE
LABCP  EQU VCHE  LABEL CURSER POS.
TLAB   EQU LABCP+200  TEMP. LABEL STORAGE
LABL   EQU TLAB+30
LABST  EQU LABL+200B           LABEL STORAGE
*LABPT  DATA    LABST           PTR TO NEXT SPACE

STK    EQU     LABL
STST   EQU STK+500
STSTK  EQU 3*STST-1
STP    EQU STST+300
SSP    EQU STP+2
TSP    EQU SSP+2
SSSW   EQU TSP+2
STKP   EQU SSSW+1
RIFT   EQU STKP+1
SCTR   EQU RIFT+1
XT1    EQU SCTR+1
XT2    EQU XT1+1
XT3    EQU XT2+1
XT4    EQU XT3+1
XT5    EQU XT4+1
XT6    EQU XT5+1
TLC    EQU XT6+1
FCTB   EQU TLC+1
CSTR   EQU FCTB+256

*STRING STORAGE
STST   EQU     33000B
*PROCESS CHAR. FROM CI (WOF3)
PCH    ZRO
       LDX CH,2
       SKN FCTB,2
       BRU PCH4 (VALID STRG 1ST CHAR)
       SKN SSSW
       BRR PCH (NO STRING IN PROCESS)
PCH1   LDX JOB
       LDA CH,2
       WCI SSP
       SKR SCTR
       BRR PCH (NOT END OF LAST STRG)
       BRM CKSTG (GO CHECK STRINGS)
       BRR PCH
PCH4   SKN SSSW
       BRU PCH3 (GO START STRING STORAGE)
       LDA SSP+1
PCH2   STA* STKP
       MIN STKP (STACK LOC. OF NEW STRING)
       LDA FCTB,2
       SKG SCTR
       BRU PCH1
       STA SCTR (INCREASE COUNT FOR NEW STRING)
       BRU PCH1
PCH3   LDA =-1
       STA SSSW (SET STARTED STRING SW.)
       LDA =STK
       STA STKP (BACK TO BEGIN. OF STORAGE)
       LDA NSP
       STA SSP
       STA SSP+1
       BRU PCH2

*CHECKS ALL ACCUM. STRINGS
CKSTG  ZRO
       LDX     JOB
       SKN     DEFSW,2
       BRU     *+2
       BRR     CKSTG
       CLA
       STA SSSW
       LDA =STK
       STA XT4 (FOR GOING THROUGH STACK)
CKS0   LDA XT4
       SKE STKP
       BRU CKSA (NOT DONE)
       LDA =STK
       STA STKP
       BRR CKSTG
CKSA   BRM CKSSB
       MIN XT4
       BRU CKS0

CKSSB  ZRO
       LDA* XT4
       SKG =0
       BRR CKSSB
       STA TSP
       STA SSP
       LDA =-1
       STA T4 (SAME CHAR. CT.)
       STA T5 (MATCH COUNT)
       GCI SSP
       HLT 0 (1ST CHAR)
       STA TLC
       LDX =-26
CKS    SKN VFNE,2
       BRU CKS1 (NO FIND)
       SKE VCHE,2
       BRU CKS1
       MIN T4 (FOUND CHAR.)
       LDA VCE,2 (CHAR. COUNT)
       ADD TSP
       SKG SSP+1
       BRU *+2
       BRU CKS2 (NOT COMPLETE STRING YET)
       CLB
       STB* XT4 (CLEAR PTR SO CANT REUSE)
       STA TSP+1
       LDA VPE,2
       LDB VP1E,2
       SKSE TSP
       BRU CKS2
*MATCH ON STRINGS
       LDA =1
       STA VARE,2
       STA VFNE,2 (STOP SEARCH)
       MIN T5 (FOUND CT.)
CKS2   LDA TLC
CKS1   BRX CKS
       SKN T4
       BRU CKS3 (AT LEAST 1 SAME FIRST CHAR)
CKS4   LDX TLC
       LDA =-1
       STA FCTB,2 (STOP FIRST CHAR ACTION)
       BRR CKSSB
CKS3   SKN T5
       BRU *+2
       BRR CKSSB (NO STRING MATCH)
       LDA T4
       SKE T5
       BRR CKSSB
       BRU CKS4 (1CHAR &1MATCH)

*CKS FOR COMPLETE STRINGS LEAVES REST ALONE
GBG    ZRO
       SKN SSSW
       BRR GBG (NO SEARCH STARTED)
       LDA =STK
       STA XT4
GBG0   LDA XT4
       SKE STKP
       BRU *+2
       BRR GBG
       BRM CKSSB
       MIN XT4
       BRU GBG0

*RUN-TIME COMMANDS
RFIN   BRM FPAUSE
FIND0  CIO IF
       BRE CR,SNC
       BRM FINDSB
       BRU FIND0
FINDSB ZRO
       SUB ='   A'
       COPY AX,AB
       SKN VFN,2
       BRU FIND3
FIND4  LDX JOB
       BRR FINDSB
FIND3  LDA =-1
       STA VFN,2
       CLA
       STA VAR,2
       LDX VCH,2
       SKN FCTB,2
       BRU FIND1
       XXB
FIND2  LDA VC,2
       XXB
       STA FCTB,2
       BRU FIND4
FIND1  LDA FCTB,2
       XXB
       SKG VC,2
       BRU FIND2
       BRU FIND4

ASS0   CLA
       BRU *+2
ASS1   LDA =1
       STA XT4
ASS2   CIO IF
       BRE CR,SNC
       SUB ='   A'
       COPY AX,AB
       LDA XT4
       STA VAR,2
       BRM ENS
       BRU ASS2

*END SEARCH
ENS    ZRO
       SKN VFN,2
       BRU *+2
       BRR ENS
       LDA VCH,2
       LDX =-26
ENS2   SKE VCH,2
       BRU ENS1
       SKN VFN,2
       BRU ENS1
       BRR ENS
ENS1   BRX ENS2
       CAX
       LDA =-1
       STA FCTB,2
       BRR ENS

*TIME
RTIM   BRM GTNMBR
       STA MTIME,2
       BRM SJTM
       BRU SNC
*AFTER RUN COMMAND
AFTER  BRM GTNMBR
       STB T3
       CAB
       LDA =ATIME
       BRM SETQTM
       RCP IF
       LDX JOB
       STA AFPOS,2
       LDA T3
       BRU RIF5A

*AFTER TIME RAN OUT
ATIME  SKN IF
       BRU *+2
       BRU ETIME (FILE CLOSED)
       BRM SJTM
       LDA AFPOS,2
       SCP IF
       HLT
       CIO IF
       SKE CR
       BRU SNC3+1
       BRU SNC

GMIN   ZRO
       BRS 42
       ABC
       DIV =1800
       BRR GMIN

*GO
RGO    CIO IF
       CAX
       LDA LABCP,2
       SKNE =0
       BRM ERR
       SCP IF
       HLT
       BRU SNC

*UNLESS
RUNL   LDA =1
       BRU RIF+1

*IF
RIF    CLA
       LDX JOB
       STA XT3
       RCP IF
       STA RIFT (TO RESCAN)
RIF1   CLA
       STA XT1 (FOR LOGIC ACCUM.) 0=OR, 1=AND
       LDA OR (LOGIC COMMAND)
RIF1A  STA XT2
       CIO IF
       SUB ='   A'
       COPY AB,AX
       SKN VFN,2
       BRU RIF2 (DONE SEARCH)
       LDX JOB
       SKN PSW,2
       BRU RIF3 (GO FPAUSE)
       CBX
       LDA XT1
       EXU XT2
       STA XT1
       BRM ENS
RIF5   CIO IF
       SKE CCH
       BRU RIF4
*DO COMMAND
       LDA XT1
       SKE XT3
       BRU SNC3 (MUST BE 1, GO DO)
       CIO IF
RIF5A  SKE CR
       BRU *-2 (DISCARD REST)
       BRU SNC
RIF2   LDA XT1
       EXU XT2
       STA XT1
       BRU RIF5
RIF3   BRM FPAUSE
       LDA RIFT
       SCP IF
       HLT
       BRU RIF1 (RESCAN)
RIF4   SKE ='   +'
       BRU RIF6
       LDA OR
       BRU RIF1A
RIF6   SKE ='   &'
       BRU RCR
       LDA AND
       BRU RIF1A

*LOOK
LOOK   BRU     SNC
       STA RIFT
       BRM LKSB
       LDA RIFT
       SCP IF
       HLT
LOOK6  CIO IF
       BRM FINDSB
       CIO IF
       SKE CR
       BRU LOOK6
LOOK6A BRM GIC
LOOK4  BRM GBG
       LDA RIFT
       SCP IF
       HLT
       BRM LKSB
       LDA =IGN
       BRM ARM9
LOOK5  BRM GCH
       BRM WOF
       SKN XOFSW,2
       BRU LOOK6A
       BRU LOOK5
LKSB   ZRO
       CLA
       STA XT4
       LDA OR
LKSB1  STA T2
       CIO IF
       SUB ='   A'
       CAX
       LDA XT4
       EXU T2
       STA XT4
       CIO IF
       SKE CR
       BRU LKSB2
       LDA XT4
       SKE =0
       BRU SNC
       BRR LKSB
LKSB2  SKE ='   &'
       BRU LKSB1-1
       LDA AND
       BRU LKSB1

*      KILL AND VALID COMMANDS
RKIL   CIO     IF
       SKE     CR
       BRM     ERR
       LDA     =-1
       LDX     JOB
       STA     J4,2
       BRU     RVAL1

RVAL   CIO     IF
       SKE     CR
       BRM     ERR
       RCP     IF
       LDX     JOB
       STA     J4,2
RVAL1  MIN     PSW,2
       BRM     FPAUSE
       LDX     JOB
       LDA     J4,2
       BRM     SETCP
       BRU     SNC

*RESTART
RRES   BRM GTNMBR
       MUL =7500000
       LSH 1 (MAKE CUBS FROM MINUTES)
       BRM DOLAT
       SKN APSW,2
       BRU SC5
       BRU SCCEJ

RWAIT  CLA
       BRU *+2
RCON   LDA =-1
       LDX JOB
       STA APSW,2 (-1 STOPS AUTO PAUSE)
       BRU RCR
RESC   LDX JOB
       SKN 940SW,2
       BRU 9ESC
       LDA =3
       CIO CO,2
       CIO CO,2
       LDA =33B
       CIO CO,2
       CIO CO,2 (ESCAPE)
       LDA =37B
       CIO CO,2
       CIO CO,2 (CONTROL-SHIFT O)
       BRM SJBR
RCR    CIO IF
       SKE CR
       BRM ERR
       BRU SNC
9ESC   LDA =37B
       CIO CO,2
       LDA     =IGN            TKB 05/27/75
       BRM     ARM9            TKB 05/27/75
       BRM GCH
       SKE ='   -'
       BRU *-2
       BRM WOF
       BRU RCR
RPAU   LDX JOB
       MIN PSW,2
       BRM FPAUSE
       BRU RCR

*FORCE FPAUSE (GET LAST TTY OUTPUT BY RETURNING TO EXEC)
*  AND WAIT FOR CHARS SENT BELOW
FPAUSE ZRO
       SKN PSW,2
       BRU *+3
       BRM GBG
       BRR FPAUSE
       BRM     PAUSE
       LDX     JOB
       LDA     =-1
       STA     PSW,2
       BRM     CKSTG
       BRR     FPAUSE

PAUSE  ZRO
       LDA     =IPA1
       BRM     ARM9            GO TO IPA1 WHEN DISMISS
       LDX     JOB
       BRM     GCH
       BRM     WOF
       BRU     *-3             CLEAR CHARACTERS IN INPUT

IPA1   LDX     JOB
       LDA     PAUSE
       STA     BRM2,2
       LDA     FPAUSE
       STA     BRM3,2
       LDX     CO,2
       CLA
       BRS     126             SHIP A GREEN BALL
       BRU     PAUEND          END THE PAUSE, I FOUND A REFLECTION
       BRM     STGBTM          SET TIMER FOR GREEN BALL RESEND

IPA1A  BRM     SJBP            SCHEDULE THE JOB AS IN PAUSE STATE
       BRU     *+2             NORMAL RETURN
       BRU     PAUEND          GREEN BALL IS REFLECTED
       LDA     =IPA2
       BRM     ARM9            SET UP NEW LOCATION TO GO TO ON DISMISS
       LDX     JOB
       BRM     GCH
       BRM     WOF
       BRU     *-3

IPA2   BRU     IPA1A

PAUEND LDX     JOB
       LDA     BRM2,2
       STA     PAUSE
       LDA     BRM3,2
       STA     FPAUSE
       BRR     PAUSE

STGBTM ZRO
       BRS     42
       ADD     =60*60*1        SET FOR 1 MINUTES TO START WITH
       LDX     JOB
       STA     GBTIME,2
       BRR     STGBTM


*PAUSE FOR 940

GTNMBR ZRO
       LDX IF
       LDB =10
       BRS 38
       LDX JOB
       BRR GTNMBR

ERRL   LDB     =CTBL
       BRU     *+3
ERR    NOP
       LDB     ERR
       MSG (PHASE II ERROR)
       CLB
       STB     ERR
       BRM CLFL
       BRM SMAIL
       LDA =P2ERR
       BRM SMSG
       LDA ='  D'+100B; CIO CO,2; BRM PAUSE
       BRM CLFL
       BRU DONE
OR     MRG VAR,2
AND    ETR VAR,2
NSP    DATA 3*CSTR-1

K      EQU 240B
BLK    MACRO D
       NOLIST SRC
J      NARG
       RPT J,(I=1)
D(I)   EQU K
K      EQU K+NJ
       ENDR
       LIST SRC
       ENDM

       BLK CI,CO,$UP,$UP1,FP,FP1,EXBRT,QTIME,MTIME,STIME
       BLK $IFCP,JBLAB,$SYS,$940SW,XOFSW,LC,CH,LINE
       BLK 1C,J1,$J2,J3,$J4,I10RTN,PSW,APSW,AFPOS,COUNT
       BLK PRMPT,BRM1,BRM2,BRM3,PC,FLSW,PCHSW,SR,TOSW
       BLK $TP,$TP1,DEFSW,RETSW,CC,CMC,$CRP,$DT,CCF,NCPCT
       BLK PJP,PJP1,$RESTAR,GBTIME,$JBSTA,$FLAGS,LCTIME,JBTSNT

$NP1   BSS 0
       RPT NJ
       DATA 3*K-1
K      EQU K+5
       ENDR
$NP2   BSS 0
       RPT NJ
       DATA 3*K-1
K      EQU K+5
       ENDR
$NP3   BSS 0
       RPT NJ
       DATA 3*K-1
K      EQU K+5
       ENDR
$NPJ   BSS 0
       RPT NJ
       DATA 3*K-1
K      EQU K+4
       ENDR

EDATA EQU K+1
$JOB   EQU 1
JOBL   EQU JOB+1
$JBCT  EQU JOBL+NJ+2
STSW   EQU JBCT+1
NOACT  EQU STSW+1
LASTJB EQU NOACT+1
OF     EQU LASTJB+1
IF     EQU OF+1
$T1    EQU IF+1
$T2    EQU T1+1
$T3    EQU T2+1
$T4    EQU T3+1
T5     EQU T4+1
$CURTM EQU     T5+1
$PERSW EQU CURTM+1
NJBCT  EQU PERSW+1
RETYCT EQU NJBCT+1
CPYCT  EQU RETYCT+1
$BFCT  EQU CPYCT+1
$MAXJB  DATA    8
       NOLIST EXT
       END
1PERP ** FICH/FRAME BREAK *****
PDUPB1509 SYMSORT

SYM.  PG.LN. IDENT.

1SCHED  3 25 PDUP15  9ESC   73 36 PDUP15  9ST3   57  1 PDUP15  9ST4A  57  5 PDUP15  
9ST5   57  7 PDUP15  AFTER  68 33 PDUP15  AND    76 17 PDUP15  
ARM10  55  8 PDUP15  ARM8   56 13 PDUP15  ARM9   55 30 PDUP15  ASS0   67 35 PDUP15  
ASS1   67 37 PDUP15  ASS2   67 39 PDUP15  ATIME  69  6 PDUP15  BEGIN   2  4 PDUP15  
BEGIN1  2  5 PDUP15  BFCT   77 39 PDUP15  BLK    76 21 PDUP15  BRE     1 27 PDUP15  
CCH    62 31 PDUP15  CEJ    34 28 PDUP15  CEJ0   35 37 PDUP15  CEJ0A  36  7 PDUP15  
CEJ0B  36 13 PDUP15  CEJ1   37 14 PDUP15  CEJ1A  38  5 PDUP15  CEJ2   38 23 PDUP15  
CEJ3   38 11 PDUP15  CEJ4   38 22 PDUP15  CEJA   34 35 PDUP15  CEJA1  34 38 PDUP15  
CEJB   35  9 PDUP15  CEJER  38 28 PDUP15  CEJM   37 26 PDUP15  CEJX   35 31 PDUP15  
CKEND  61  2 PDUP15  CKEX   61  1 PDUP15  CKEXC  61 26 PDUP15  CKIT   62 11 PDUP15  
CKIT1  62 20 PDUP15  CKIT2  62 23 PDUP15  CKIT3  62 26 PDUP15  CKNO   62 18 PDUP15  
CKRE   60 39 PDUP15  CKREG  61 15 PDUP15  CKS    65 30 PDUP15  CKS0   65  7 PDUP15  
CKS1   66 14 PDUP15  CKS2   66 13 PDUP15  CKS3   66 21 PDUP15  CKS4   66 17 PDUP15  
CKSA   65 13 PDUP15  CKSCH  60 35 PDUP15  CKSSB  65 17 PDUP15  CKSTG  64 37 PDUP15  
CLFL   27 27 PDUP15  CLFL1  27 35 PDUP15  CLIST  58 31 PDUP15  CLPT   58 33 PDUP15  
CPYCT  77 38 PDUP15  CR     62 34 PDUP15  CSTR   63 38 PDUP15  CTBL   33 10 PDUP15  
CURTM  77 34 PDUP15  D(I)   76 25 PDUP15  DEF    16  9 PDUP15  DEF1   17 19 PDUP15  
DEF2   16 11 PDUP15  DEFTM  47 26 PDUP15  DELAY1 57 13 PDUP15  DELAY2 57 15 PDUP15  
DELAY3 57 17 PDUP15  DELAY4 57 19 PDUP15  DELAY5 57 21 PDUP15  DELAY6 57 25 PDUP15  
DELAY7 57 23 PDUP15  DELAY8 57 27 PDUP15  DONE   38 33 PDUP15  DUMN   57 10 PDUP15  
DUMNP  57 11 PDUP15  EDATA  77 20 PDUP15  EFLAG  50 20 PDUP15  EJ     38 38 PDUP15  
EJS    57 35 PDUP15  EMMSG  49 37 PDUP15  EMSG   57 36 PDUP15  ENDFT   1 22 PDUP15  
ENS    68 10 PDUP15  ENS1   68 21 PDUP15  ENS2   68 16 PDUP15  ERM10  58  2 PDUP15  
ERM2   27 16 PDUP15  ERM2A  27 17 PDUP15  ERM3   27 19 PDUP15  ERM4   27 18 PDUP15  
ERM5   27 20 PDUP15  ERR    76  4 PDUP15  ERRL   76  2 PDUP15  ETIME  39  7 PDUP15  
F940    1 18 PDUP15  FCPN    1 16 PDUP15  FCTB   63 37 PDUP15  FILBIT 43 17 PDUP15  
FIND0  67  6 PDUP15  FIND1  67 29 PDUP15  FIND2  67 25 PDUP15  FIND3  67 17 PDUP15  
FIND4  67 15 PDUP15  FINDSB 67 10 PDUP15  FIX0   60  2 PDUP15  FIX1   60  6 PDUP15  
FIX2   60  7 PDUP15  FIXE1  62  6 PDUP15  FIXEND 60 10 PDUP15  FIXEXC 62  3 PDUP15  
FIXSCH 59 37 PDUP15  FPAUSE 74 13 PDUP15  GAF1   23 12 PDUP15  GAFTER 23  2 PDUP15  
GASS   20 17 PDUP15  GASS1  20 27 PDUP15  GBG    66 30 PDUP15  GBG0   66 35 PDUP15  
GCH    28  6 PDUP15  GCON   18 35 PDUP15  GESC   18 30 PDUP15  GFIN   19 37 PDUP15  
GFIN1  20  5 PDUP15  GGO    19 24 PDUP15  GIC    28 38 PDUP15  GIC1   29  3 PDUP15  
GIF    21 24 PDUP15  GIF0   21 34 PDUP15  GIF1   21 31 PDUP15  GIF2   22  7 PDUP15  
GIF3   22  4 PDUP15  GIF4   22 11 PDUP15  GIF5   22 16 PDUP15  GIF6   22 24 PDUP15  
GIFU   21 25 PDUP15  GKIL   19 10 PDUP15  GLAB   23 27 PDUP15  GLAB1  23 38 PDUP15  
GLAB2  24  7 PDUP15  GLAB3  24  1 PDUP15  GLOOK  19 20 PDUP15  GMIN   69 18 PDUP15  
GN1D   11 24 PDUP15  GN1D7  12 23 PDUP15  GN1D8  12 29 PDUP15  GN1D9  11 38 PDUP15  
GN1D91 12 12 PDUP15  GN1D92 12 19 PDUP15  GN1E1  15  1 PDUP15  GN1E2  15 19 PDUP15  
GN1E3  15  8 PDUP15  GN1F   13  7 PDUP15  GN2    13 14 PDUP15  GN2A   13 15 PDUP15  
GN2B   13 20 PDUP15  GN2D   13 24 PDUP15  GN2F   13 17 PDUP15  GN2G   13 36 PDUP15  
GN3    14  5 PDUP15  GN4    14  8 PDUP15  GN5    15 22 PDUP15  GN5A   15 32 PDUP15  
GN6    17 39 PDUP15  GN6A   18  4 PDUP15  GN6B   18  5 PDUP15  GN6C   18  6 PDUP15  
GN6D   18  9 PDUP15  GN7    14 14 PDUP15  GN8    14 20 PDUP15  GN9    14 28 PDUP15  
GNCDS  28 14 PDUP15  GNCDS1 28 20 PDUP15  GNCE   27 24 PDUP15  GNE1   27 22 PDUP15  
GNE2   26 30 PDUP15  GNE2A  26 36 PDUP15  GNEE   26 38 PDUP15  GNER   27 21 PDUP15  
GNX    10 34 PDUP15  GNX1   11  6 PDUP15  GNX11  11  5 PDUP15  GPAU   19  2 PDUP15  
GQT    18 15 PDUP15  GREG   61  8 PDUP15  GRES   21 20 PDUP15  GST    18 20 PDUP15  
GTB    16  4 PDUP15  GTCR   18 23 PDUP15  GTIM   20 38 PDUP15  GTIM1  21  9 PDUP15  
GTJOB  10  1 PDUP15  GTNMBR 75 34 PDUP15  GTPER1 51  6 PDUP15  GTPER2 51 24 PDUP15  
GUNL   22 37 PDUP15  GVAL   19 15 PDUP15  GWAIT  19  7 PDUP15  I10PC  55 27 PDUP15  
I8PC   56 29 PDUP15  I9PC   55 28 PDUP15  I9RTN  55 29 PDUP15  IF     77 28 PDUP15  
IFP    49  7 PDUP15  IFP1   49 13 PDUP15  IGC    48  5 PDUP15  IGICE  48 18 PDUP15  
IGICN  48 23 PDUP15  IGN    47 33 PDUP15  IGN1   47 37 PDUP15  IML    49 23 PDUP15  
INIT1  50 25 PDUP15  INT10  55 15 PDUP15  INT5   54 33 PDUP15  INT5PC 54 35 PDUP15  
INT5RT 54 32 PDUP15  INT8   56 30 PDUP15  INT9   56  4 PDUP15  IPA1   74 33 PDUP15  
IPA1A  75  5 PDUP15  IPA2   75 15 PDUP15  ISNC   48 36 PDUP15  ISTR   53 27 PDUP15  
J      76 23 PDUP15  JBCOM   5  3 PDUP15  JBCOM1  5  4 PDUP15  JBCT   77 23 PDUP15  
JBEN    3  4 PDUP15  JBEN0   3 12 PDUP15  JBEN1   3 17 PDUP15  JBEN1A  3 22 PDUP15  
JBEN2   3 19 PDUP15  JBEN3   3 37 PDUP15  JBEN4   4  8 PDUP15  JBEN5   4  4 PDUP15  
JBEN6   4  1 PDUP15  JBENG   3 31 PDUP15  JBENS   3  7 PDUP15  JBI     7 33 PDUP15  
JBN     4 33 PDUP15  JBNJ    8  8 PDUP15  JBNJ1   8 14 PDUP15  JBO     8  1 PDUP15  
JBP     8 33 PDUP15  JBP1    9 14 PDUP15  JBP2    9 11 PDUP15  JBR     6 10 PDUP15  
JBR1    6 11 PDUP15  JBR1A   6 13 PDUP15  JBR2    7 17 PDUP15  JBR3    7 21 PDUP15  
JBR4    7 24 PDUP15  JBRS    6  9 PDUP15  JBRS1   7  5 PDUP15  JBRSB   6 24 PDUP15  
JBTM    8 20 PDUP15  JOB    77 21 PDUP15  JOBL   77 22 PDUP15  K      77 17 PDUP15  
K      77 12 PDUP15  K      77  7 PDUP15  K      77  2 PDUP15  K      76 26 PDUP15  
K      76 20 PDUP15  L*MOVE 58  6 PDUP15  L940    1 19 PDUP15  LABCP  63 14 PDUP15  
LABL   63 16 PDUP15  LABPT  62 38 PDUP15  LABST  63 17 PDUP15  LASTJB 77 26 PDUP15  
LCPN    1 17 PDUP15  LF     62 33 PDUP15  LGCH   25 37 PDUP15  LKSB   71 37 PDUP15  
LKSB1  72  2 PDUP15  LKSB2  72 16 PDUP15  LOOK   71 13 PDUP15  LOOK4  71 25 PDUP15  
LOOK5  71 32 PDUP15  LOOK6  71 19 PDUP15  LOOK6A 71 24 PDUP15  LSTNOT 58 28 PDUP15  
MASOP  45 11 PDUP15  MASPT  45 12 PDUP15  MAXJB  78  1 PDUP15  MAXTRY 42 11 PDUP15  
MECPU  59  9 PDUP15  MKLIS1 58 17 PDUP15  MKLIST 58  8 PDUP15  MKTIME 58  7 PDUP15  
ML1    46 10 PDUP15  ML2    46 11 PDUP15  MLIST  58 29 PDUP15  MSG     1 35 PDUP15  
MXCPCH  1 24 PDUP15  NEMSG  50  9 PDUP15  NJ      1 25 PDUP15  NJBCT  77 36 PDUP15  
NOACT  77 25 PDUP15  NOCIR  54 36 PDUP15  NOCOPY 41  1 PDUP15  NOCP1  58  4 PDUP15  
NOCPMG 57 38 PDUP15  NOEMFL 59 13 PDUP15  NOMAIL 38 32 PDUP15  NOSUP  54 37 PDUP15  
NP1    76 38 PDUP15  NP2    77  4 PDUP15  NP3    77  9 PDUP15  NPJ    77 14 PDUP15  
NRETRY  1 23 PDUP15  NSP    76 18 PDUP15  OF     77 27 PDUP15  OFS    57 30 PDUP15  
OFSP   57 31 PDUP15  OPCER  54  9 PDUP15  OPCER1 54 25 PDUP15  OPCER4 54  3 PDUP15  
OPCER5 54  6 PDUP15  OPCERX 54 18 PDUP15  OPCH   52  2 PDUP15  OPCH1  53 20 PDUP15  
OPCH2  53 24 PDUP15  OPCHER 53 28 PDUP15  OPE1   59 23 PDUP15  OPIF   43 18 PDUP15  
OPIF1  43 35 PDUP15  OPIFA  43 23 PDUP15  OPIFA1 43 24 PDUP15  OPIFR  44 35 PDUP15  
OPITF  43 21 PDUP15  OPMOF  44 20 PDUP15  OPOF   41 33 PDUP15  OPOF1  41 35 PDUP15  
OPOF2  41 36 PDUP15  OPOF3  42  3 PDUP15  OPOFA  44 22 PDUP15  OPOFA1 45  3 PDUP15  
OPOFAR 44 34 PDUP15  OPOFDE 44 36 PDUP15  OPOFE  42 15 PDUP15  OPOFE1 42 37 PDUP15  
OPSCH  59 20 PDUP15  OPSCH1 59 21 PDUP15  OPTF   41 30 PDUP15  OPTOF  44 14 PDUP15  
OR     76 16 PDUP15  P2ERR  58  1 PDUP15  PATCH   1 12 PDUP15  PAUEND 75 17 PDUP15  
PAUSE  74 25 PDUP15  PCH    64  4 PDUP15  PCH1   64 10 PDUP15  PCH2   64 20 PDUP15  
PCH3   64 27 PDUP15  PCH4   64 17 PDUP15  PERSW  77 35 PDUP15  PMSG   41  8 PDUP15  
QT     62 32 PDUP15  QUIT   39  4 PDUP15  RCON   73 15 PDUP15  RCR    73 32 PDUP15  
RCR1   33 20 PDUP15  RCRET  33 13 PDUP15  RDSCH  59 29 PDUP15  RELAB  59  7 PDUP15  
RELPG   9 24 PDUP15  RELPG1  9 26 PDUP15  RELPG2  9 33 PDUP15  RESC   73 19 PDUP15  
RETYCT 77 37 PDUP15  RFIN   67  5 PDUP15  RGO    69 25 PDUP15  RIF    69 39 PDUP15  
RIF1   70  5 PDUP15  RIF1A  70  8 PDUP15  RIF2   70 33 PDUP15  RIF3   70 37 PDUP15  
RIF4   71  3 PDUP15  RIF5   70 22 PDUP15  RIF5A  70 30 PDUP15  RIF6   71  7 PDUP15  
RIFT   63 28 PDUP15  RKIL   72 22 PDUP15  RPAU   74  6 PDUP15  RRES   73  5 PDUP15  
RTIM   68 28 PDUP15  RUNL   69 35 PDUP15  RVAL   72 30 PDUP15  RVAL1  72 36 PDUP15  
RWAIT  73 13 PDUP15  SAVA   59  8 PDUP15  SAVSYS 59 11 PDUP15  SAVX   59 10 PDUP15  
SC     30 17 PDUP15  SC1    31  2 PDUP15  SC11   31 30 PDUP15  SC2    30 39 PDUP15  
SC4    31 34 PDUP15  SC4A   31 38 PDUP15  SC4B   32  6 PDUP15  SC5    33 28 PDUP15  
SCCDS  28 28 PDUP15  SCCEJ  28 23 PDUP15  SCEJ   34  2 PDUP15  SCEJ1  34 23 PDUP15  
SCEJ2  34  9 PDUP15  SCHBLK 58 38 PDUP15  SCHED1  4 34 PDUP15  SCHEDN  4 28 PDUP15  
SCHEDX  4 35 PDUP15  SCHFIL 59  1 PDUP15  SCHFL  59  2 PDUP15  SCHLEN 59  3 PDUP15  
SCHPTR 58 39 PDUP15  SCTR   63 29 PDUP15  SEND   58  3 PDUP15  SET1   60 28 PDUP15  
SET8LV 41 24 PDUP15  SETBIT 46 24 PDUP15  SETEM  60 21 PDUP15  SETIM  41 17 PDUP15  
SETQTM 46 36 PDUP15  SFIL   44  3 PDUP15  SJBEN   4 14 PDUP15  SJBEN1  4 15 PDUP15  
SJBI    5 14 PDUP15  SJBIT   5 27 PDUP15  SJBNJ   5 32 PDUP15  SJBO    5  8 PDUP15  
SJBP    5 22 PDUP15  SJBR    4 39 PDUP15  SJTM   47 11 PDUP15  SKBG   26  8 PDUP15  
SKBG1  26 25 PDUP15  SKBG2  26 12 PDUP15  SKNE    1 14 PDUP15  SLW0   40 24 PDUP15  
SLW1   40 26 PDUP15  SLWCPY 40 13 PDUP15  SLWFIL 39 24 PDUP15  SLWFL1 39 31 PDUP15  
SLWFL2 40  4 PDUP15  SLWFL3 39 39 PDUP15  SLWJOB 39 18 PDUP15  SLWMAI 40 33 PDUP15  
SLWRES 39  9 PDUP15  SMAIL  45 13 PDUP15  SML    45 37 PDUP15  SMSG   46 12 PDUP15  
SNC    32 23 PDUP15  SNC1   32 34 PDUP15  SNC1A  32 35 PDUP15  SNC2   32 26 PDUP15  
SNC3   33  4 PDUP15  SNCC   32 37 PDUP15  SP1    56 39 PDUP15  SP1A   56 37 PDUP15  
SP2    57  9 PDUP15  SSP    63 24 PDUP15  SSSW   63 26 PDUP15  ST1    56 38 PDUP15  
ST1A   56 36 PDUP15  ST2    57  2 PDUP15  ST3    57  3 PDUP15  ST4A   57  4 PDUP15  
ST5    57  6 PDUP15  ST6    57  8 PDUP15  START   2 11 PDUP15  START1  3  8 PDUP15  
STDFT   1 21 PDUP15  STGBTM 75 24 PDUP15  STK    63 20 PDUP15  STKP   63 27 PDUP15  
STL    24 22 PDUP15  STL1   24 36 PDUP15  STL1A  24 37 PDUP15  STL2   25 16 PDUP15  
STL3   25  7 PDUP15  STL4   25 35 PDUP15  STL5   25 23 PDUP15  STL8   25 28 PDUP15  
STL9   25 31 PDUP15  STLAB  24 14 PDUP15  STP    63 23 PDUP15  STST   64  2 PDUP15  
STST   63 21 PDUP15  STSTK  63 22 PDUP15  STSW   77 24 PDUP15  SZLIST 58 32 PDUP15  
T1     77 29 PDUP15  T2     77 30 PDUP15  T3     77 31 PDUP15  T4     77 32 PDUP15  
T5     77 33 PDUP15  TEMPX  43 16 PDUP15  TFS    57 33 PDUP15  TFSP   57 34 PDUP15  
TLAB   63 15 PDUP15  TLC    63 36 PDUP15  TOMSG  57 37 PDUP15  TSP    63 25 PDUP15  
UARM10 55  2 PDUP15  UARM8  56 21 PDUP15  UARM9  55 37 PDUP15  UNEXPC 51 30 PDUP15  
USERPT 56 34 PDUP15  USEST  17 21 PDUP15  VAR    62 39 PDUP15  VARE   63  1 PDUP15  
VC     63  6 PDUP15  VCE    63  7 PDUP15  VCH    63 10 PDUP15  VCHE   63 11 PDUP15  
VERS    1 11 PDUP15  VFN    63  8 PDUP15  VFNE   63  9 PDUP15  VP     63  2 PDUP15  
VP1    63  4 PDUP15  VP1E   63  5 PDUP15  VPE    63  3 PDUP15  WDDN   59  5 PDUP15  
WDNO   59  6 PDUP15  WDUP   59  4 PDUP15  WOF    29 11 PDUP15  WOF1   29 17 PDUP15  
WOF2   29 21 PDUP15  WOF3   29 29 PDUP15  WOF4   29 33 PDUP15  WOF5   30  2 PDUP15  
WOF6   30  8 PDUP15  WOF7   30  3 PDUP15  WSCHFL 59 12 PDUP15  X       1 36 PDUP15  
X       1 33 PDUP15  XMSG   41 11 PDUP15  XQUIT  39  3 PDUP15  XT1    63 30 PDUP15  
XT2    63 31 PDUP15  XT3    63 32 PDUP15  XT4    63 33 PDUP15  XT5    63 34 PDUP15  
XT6    63 35 PDUP15  
1PERP ** FICH/FRAME BREAK *****
MAKSYM1PERP1509
SYMSORT
2PDB1509

SYM2PDB1509

SYMSORT
FORK1509

SYMFORK1509

SYMSORT
PDUPB1509

SYMPDUPB1509


"READY TO SPOOL -- ESCAPE AND COM T IF YOU DON'T WANT A LISTING"

SPOOL
SPOOL
N
MIKE HINCKLEY
1PERP
X7219
SM
1
HEAD,CEN
O
VIA VALLEY GREEN COURIER.
2PDB1509,SYM2PDB1509,FORK1509,SYMFORK1509,PDUPB1509,SYMPDUPB1509,BUILD1PERP1509,MAKSYM1PERP1509,SYM2PDB1509,SYMFORK1509,SYMPDUPB1509,MSGPDUPB1509,MSG2PDB1509,DIFFPDUPB1508/09/,DIFF2PDB1508/09/,DIFFFORK1508/09/
Q
COM T

1PERP ** FICH/FRAME BREAK *****
MAKFDM1PERP1509
FDM
CRUNCH 2PDB1509
MASTER FDM1PERP1509

CRUNCH FORK1509
MASTER
CRUNCH PDUPB1509
MASTER
CRUNCH 1PERP
MASTER
CRUNCH D1PERP1509
MASTER
CRUNCH MAKSYM1PERP1509
MASTER
CRUNCH MAKFDM1PERP1509
MASTER
CRUNCH CHECK1PERP1509
MASTER
CRUNCH DIFFPDUPB1508/09/
MASTER
CRUNCH DIFF2PDB1508/09/
MASTER
CRUNCH DIFFFORK1508/09/
MASTER
CRUNCH MSGPDUPB1509
MASTER
CRUNCH MSG2PDB1509
MASTER
Q
COM T

1PERP ** FICH/FRAME BREAK *****
DIFFFORK1508/09/
02/23/79  18:45
1)=FORK1508
2)=FORK1509

1) FORK   IDENT   20 JAN 1979 MCH FORK CONTROLLER FOR PERP
1) 
1) BGNN   BRS 179                 TAKE AWAY SUPERVISORY SCHEDULING
****1
2) FORK   IDENT   20 FEB 1979 MCH 1509 FORK CONTROLLER FOR PERP
2) 
2) BGNN   BRS 179                 TAKE AWAY SUPERVISORY SCHEDULING
********1
1PERP ** FICH/FRAME BREAK *****
DIFFPDUPB1508/09/
02/23/79  18:41
1)=PDUPB1508
2)=PDUPB1509

1) PDUP15 IDENT   20 JAN 1979 MCH 15.08
1) *15.08 MAKE 22-26 PDP10'S.  REMOVED OLD CODE.
****1
2) PDUP15 IDENT   20 FEB 1979 MCH 15.09
2) *15.09 REMOVED DDFSW SINCE IT WAS TOO BROKEN TO BE USEFUL.
2) *      ENABLED PERP FOR SYSTEM 90 AND REORDERED ENTRIES IN MLIST TABLE.
2) *15.08 MAKE 22-26 PDP10'S.  REMOVED OLD CODE.
********1
1) DDFSW  EQU     -1              1=>DDF -1=>PERPS
1)        LIST    SRC,COM,CALL
****7
2)        LIST    SRC,COM,CALL
********10
1) PATCH  EQU     08
1) 
1) SKNE   OPD     536B5
1) 
****10
2) PATCH  EQU     09
2) 
2) SKNE   OPD     536B5
2) 
********12
1)        IF      DDFSW
1) $NJ    EQU     2
1)        ELSE
1) $NJ    EQU     10              NUMBER OF JOBS
1)        ENDF
1) 
1) BRE    MACRO D
****24
2) $NJ    EQU     10              NUMBER OF JOBS
2) 
2) BRE    MACRO D
********25
1)        IF      DDFSW
1) MSG    MACRO   D,E,2
1)        BRU     E(2)
1) E(1)   ASC     'D(1).&$/'
1) E(2)   LDA     =E(1)
1)        BRM     XMSG
1)        ENDM
1)        ELSE
1) MSG    MACRO   D,E,1
****38
2) MSG    MACRO   D,E,1
********35
1)        ENDF
1) $BEGIN BRS 90                  START HERE - THIS IS HIGHEST FORK TO TERMINATE
1)        IF      DDFSW
1) BEGIN1 NOP
1)        ELSE
1) BEGIN1 BRM     IDISC           INITIALIZE LOG START POINT
1)        ENDF
1)        LDB     =VERS*100+PATCH
1)        MSG     (VERSION 15.08)
1)        CLB
****54
2) $BEGIN BRS 90                  START HERE - THIS IS HIGHEST FORK TO TERMINATE
2) BEGIN1 BRM     IDISC           INITIALIZE LOG START POINT
2)        LDB     =VERS*100+PATCH
2)        MSG     (VERSION 15.09)
2)        CLB
********43
1)        IF      -DDFSW
1) *
****88
2) *
********72
1)        ENDF
1) 
1) *END OF JOB LIST
****97
2) *END OF JOB LIST
********81
1)        IF      DDFSW
1) JBEN4  NOP
1)        ELSE
1) JBEN4  EAX 1,2                 LOOK AT NEXT JOB
1)        ENDF
1)        BRU JBEN3
1) 
****143
2) JBEN4  EAX 1,2                 LOOK AT NEXT JOB
2)        BRU JBEN3
2) 
********125
1)        IF      DDFSW
1) SJBEN  BRM     CLFL
1)        BRS     10
1)        ELSE
1) SJBEN  BRM     EPJB
1)        ENDF
1) $SJBEN1 LDX JOB
****153
2) SJBEN  BRM     EPJB
2) $SJBEN1 LDX JOB
********131
1)        IF      DDFSW
1) SCHED1 NOP
1)        ELSE
1) SCHED1 EAX 1,2
1)        ENDF
1) SCHEDX STX JOB
****178
2) SCHED1 EAX 1,2
2) SCHEDX STX JOB
********151
1)        IF      DDFSW
1)        ELSE
1)        LDA     =FLAG
****403
2)        LDA     =FLAG
********372
1)        ENDF
1)        LDA =-1
****412
2)        LDA =-1
********379
1)        IF      DDFSW
1) GNX    BRU     GNX1
1)        ELSE
1) GNX    LDX     JOB
****419
2) GNX    LDX     JOB
********385
1)        ENDF
1) $GNX11 NOP
****432
2) $GNX11 NOP
********395
1)        IF      DDFSW
1) GN1E2  BRU     SJBEN
1)        ELSE
1) GN1E2  BRM     DELJB
****603
2) GN1E2  BRM     DELJB
********565
1)        ENDF
1) 
1) GN5    SKE CCH
****608
2) GN5    SKE CCH
********568
1)        IF      DDFSW
1) $XMSG   ZRO
1)        LDB     =-1
1)        LDX     =1
1)        BRS     34
1)        BRR     XMSG
1)        ELSE
1) $XMSG  ZRO
****1613
2) $XMSG  ZRO
********1571
1)        ENDF
1) 
1) SETIM  ZRO
****1625
2) SETIM  ZRO
********1577
1)        IF      DDFSW
1)        LDX     =3
1)        BRR     SFIL
1)        ELSE
1)        STP T1                  SAVE POINTER
****1731
2)        STP T1                  SAVE POINTER
********1681
1)        ENDF
1) *
****1742
2) *
********1688
1)        IF      DDFSW
1) ML2    ASC     '" SUBMITTED TO "DDF"/'
1)        ELSE
1) ML2    ASC '" SUBMITTED TO "PERP"/'
1)        ENDF
1) SMSG   ZRO
****1821
2) ML2    ASC '" SUBMITTED TO "PERP"/'
2) SMSG   ZRO
********1766
1)        IF      DDFSW
1) DDF0   MSG     (ENTER YOUR COMPUTER NUMBER:)
1) DDF1   LDB     =10
1)        CLX
1)        BRS     38
1)        XAB
1)        SKE     =155B
1)        BRU     DDF0
1)        XAB
1)        LDB     =-1
1)        SKG     =LCPN
1)        SKG     =FCPN-1
1)        BRU     *+2
1)        BRU     DDF2
1)        SKG     =L940
1)        SKG     =F940-1
1)        BRU     DDF0
1)        LDX     JOB
1)        STA     940SW,2
1) DDF2   LDX     JOB
1)        STA     SYS,2
1)        STA     T1
1)        CLX
1) DDF3   SKB     CLIST,2
1)        BRU     *+2
1)        SKNE    CLIST,2
1)        BRU     DDF4            OK FOUND IT
1)        EAX     1,2
1)        BRU     DDF3
1) DDF4   MSG     (TYPE YOUR COMMAND FILE NAME: )
1)        LDA     NP3
1)        STA     T1
1)        STA     T2
1)        LDA     =T1
1)        LDB     =155B
1)        CLX
1)        BRS     33
1)        STP     CFP
1)        LDA     =48
1)        LDB     NP1
1)        LDX     =4
1)        BRS     67
1)        LDA     =52
1)        LDB     =PUP
1)        LDX     =2
1)        BRS     67
1)        LDA     PUP+1
1)        SUB     PUP
1)        STA     T1
1) DDF5   LDA     NP1
1)        MUL     =3
1)        LSH     23
1)        CAB
1)        ADD     T1
1)        XAB
1)        SUB     =1
1)        STP     PUP
1)        ELSE
1)        BRM GPJB                GET A JOB
1)        ENDF
1)        LDX JOB                 GOT JOB
****2018
2)        BRM GPJB                GET A JOB
2)        LDX JOB                 GOT JOB
********1959
1)        IF      DDFSW
1)        BRU     SJBEN
1)        ELSE
1)        BRM DELJB               DELETE JOB
****2186
2)        BRM DELJB               DELETE JOB
********2068
1)        ENDF
1) OPCER4 SKE =4
****2191
2) OPCER4 SKE =4
********2070
1) MLIST  DATA 30,31,32,33,34,35,36,37,38,39,88
1)        DATA 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19
1)        DATA 20,21,22,23,24,25,26,27,28,29,0,0
1) $CLIST BSS *-MLIST
****2374
2) MLIST  DATA 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,88,90
2)        DATA 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,0,0
2) $CLIST BSS *-MLIST
********2252
1)        IF      DDFSW
1) RKIL   NOP
1) RVAL   BRU     SNC
1)        ELSE
1) RKIL   CIO     IF
****2915
2) RKIL   CIO     IF
********2791
1)        ENDF
1) 
1) *RESTART
1)        IF      DDFSW
1) RRES   BRU     SCCEJ
1)        ELSE
1) RRES   BRM GTNMBR
****2939
2) *RESTART
2) RRES   BRM GTNMBR
********2812
1)        ENDF
1) 
1) RWAIT  CLA
****2952
2) RWAIT  CLA
********2821
1)        IF      DDFSW
1) $PUP   BSS     2
1) $CFP   BSS     2
1) IDENP  DATA    IDEN*3-1,0
1) IDEN   BSS     55
1) MAXJB  DATA    0
1)        ELSE
1) $MAXJB  DATA    8
1)        ENDF
1) 
1)        NOLIST EXT
****3138
2) $MAXJB  DATA    8
2)        NOLIST EXT
********3004
1PERP ** FICH/FRAME BREAK *****
BUILD1PERP1509
NARP
FORK1509
BFORK1509


NARP
PDUPB1509
BPDUPB1509

MSGPDUPB1509

NARP
2PDB1509
B2PDB1509

MSG2PDB1509


RES
XDD
1650;TBPDUPB1509
BEGIN-EDATA=
;TB2PDB1509
;F<PAT.1>
;F_14000-;F=
14000;TBFORK1509
;U%F
SAV 0,17777,1PERP-1509

14000
CON
PAT.1/.;F
%F
DUM D1PERP1509

"



"
TOUT CHECK1PERP1509

DATE

"   CHECKSUMS FOR 1PERP1509:
"
CHECKSUM
.PDUPB1509
2PDB1509
FORK1509
1PERP
D1PERP1509
BPDUPB1509
B2PDB1509
BFORK1509
MAKFDM1PERP1509
MAKSYM1PERP1509
BUILD1PERP1509
.
TOUT T
COM T
1PERP ** FICH/FRAME BREAK *****
DIFF2PDB1508/09/
02/23/79  18:44
1)=2PDB1508
2)=2PDB1509

1) 2PD15  IDENT   19 JAN  1979    15.08
1) *15.06 CHANGES MAXDT TO 5 MIN RE 59688
1) 
****1
2) 2PD15  IDENT   20 FEB 1979    15.09
2) *15.06 CHANGES MAXDT TO 5 MIN RE 59688
2) 
********1
 @k