P7 is a program that runs on a TOPS-20 host and whose function is to
handle communications between MAGNUM programs running on T-20 and
program P8 which runs on a VAX. More specifically, P7 receives IPCF
packets from the MAGNUM program. These messages contain information
necessary to effect a file transfer between the VAX and an IBM pc, and
in the future, between the T20 host and the VAX. The purpose of this
document is to briefly explain some of the details of P7 that might
not be immediately clear. In addition, suggestions will be made in
order to enhance P7 beyond the pilot stage.


			Running the Program

P7 is currently a "stand alone" program in that it does not have to
be linked with any other files or programs in order to run. Both the
sorce and object files are located in directory <greg> on structure
PS: on sys 118. The name of the files are P7.MAC and P7.EXE. (note: 
There is also a companion program MM.EXE that is also in directory PS:
<GREG> on sys 118 that has been used for testing P7. When run, it wakes
up every 30 seconds and sends a random IPCF message with a random store
number to P7. The format of the IPCF message conforms to the form shown
in a memo dated 10/17/83 received from Dave Weaver. This program should
only be started after P7 has been started.) 

There are currently 2 lines used between the 20 and the VAX. One is
for receiving messages from the VAX and one is for sending. In the
future, there will probably have to be additional lines to handle the
transfer of log files and phone lists. Before running the program,
connect the lines that will be used, noting what their numbers are.
Set the line speed for the 20 -> VAX line to 9600. Set the VAX -> 20
line to 4800. Run P7. It will ask for the line numbers you are using
and then sit there waiting for some action to occur. Everytime P7
receives a message from either a MAGNUM program or else the VAX, P7
will display the message type and number on the terminal. If an
invalid message arrives, P7 will inform the user of this fact as well
as attempt to display the first 5 characters of the message. If a loud
beeping noise along with an error message appears on the creen, then
there has been a problem with one of the system calls and P7 must be
stopped immediately and run with DDT to find the cause of the problem.
In normal operating mode this should never happen. However, when it
has happened, %99 of the time it was due to entering line numbers for
lines that were already assigned by another job. If a MAGNUM program
does not exist yet which sends messages to P7, then after starting P7,
run the MM program. This will send an IPCF message to P7. Before starting
any programs that talk to P7 however, it is necessary to start the P8-P10
programs on the VAX and IBM PC.


			Programming Structure of P7

It is assumed that the reader is familiar with the "Pilot Version
Order Delivery Subsystem" by Michael Howard, July 18, 1983, and that
he/she has an understanding of TOPS-20 in general and IPCF in
particular.

P7 can receive IPCF packets from MAGNUM programs P6 and P11. P6
requests that files be uploaded or downloaded while P11 requests that
accounting routines be performed. At the present time P7, after having
serviced a P6 request, does not have to  send any acknowledgement back
to the P6 program that sent the packet. However, as this will probably
change, routines have been placed in the program to store and retreive 
the PID of a particular P6 program. Each IPCF message that is sent to P7
is uniquely identified by the order number and store number. Therefore
PIDBLK was created to hold information about each message. There is an
entry for the store number, the order number, and the PID of every
message that P7 receives from a P6 program. After the message has been
serviced these entries are cleared. The routines RTRPID and DEPPID
were created to perform this function. However, these routines have
never been used so some debugging will be inevitable when the time comes.

Essentially, after performing the initialization process of establishing 
the PID and preparing to receive IPCF packets, and assigning and opening
the lines to be used, P7 will wait in a SIN for a packet to arrive
from the VAX. When a packet arrives, it strips off any preceeding
nulls, and then puts the message in PDTBLK. It then checks the
legitimacy of the message, and if it is valid, it calls the proper
subroutine P1-P4. P1-P4 will first log receipt of the message, then
build a new message if necessay, and send it out. Extensive use is
made of byte pointers in order to make the message and log building
process as easy as possible. At any time in this process P7 can
receive an interrupt signalling the arrival of an IPCF packet from P6
or P11.

As IPCF firsts sends out information that is not really useful before
it sends an actual packet, P7 must first determine if an actual
message has arrived or not. If it hasn't, then the interrupt is
dismissed. If a message has arrived, then it is handled in the same
manner that messages from P8 are handled except that there are no
nulls to strip off. Before dismissing itself however, a check must be
done to determine if any more IPCF packets have arrived while the
current packet was being serviced. This must be done because IPCF only
interrupts when the message queue goes from empty to non-empty, so
that if it dismisses with another message waiting in the queue, P7
won't get interrupted.


			Miscellaneous Features

Whenever a message is received, irregardless of the source, it is
logged in the log file EVLOG. If the message is unrecognizable, it is
still logged. Currently, all message headers are displayed at the
terminal upon receipt by P7. If a message is not recognized it will be
displayed and a beep will sound.

The specifications call for a timeout interrupt to be set when a
mesage 2310 is sent to each file server. Because there is currently
only one file server being used, this feature was not included. it
should be a rather trivial matter to implement when the time arises.
There is also nothing included concerning the creation of the
CHO1CTL.mmdd files and the reading, writing, and appending activity
that is associated with it.


			Matters to Address

1.	Currently the specs for the log record call for the "status"
to be place in the log record. However, the message record format
(revised) as of 10-17-83 does not contain a status field. Therefore,
some new message will eventually have to be devised to include a
status field in the message record so that it can be read into the log
record. The current log record simply puts an "ST" in the record for
the purpose of place holding.

2.	When P7 receives an M1310 message from P11 informing P7 that
there are no SMPHONE files to move, P7 will immediately build an M8310
message and send it right back to P11. I'm not sure that this is what
was intended, so if it was not, P7 should be changed. (An extremely
easy thing to do).


			Suggested Revisions

Currently P7 is handling 120 messages an hour, which is approximately
double the maximum expected load for the pilot version. It is
estimated that it could probably handle around 400 messages an hour,
and take bursts of up to about 10 messages in 10 seconds. Beyond the
pilot version this will be prohibitively slow.

P7 does not run any inferior forks. A suggestion would be to make an
inferior process for each of the major operations required of P7. That
is, there should be a fork that handles 1) IPCF packets, 2) reading of
data sent down the line from P8, 3) sending data down the line to P8,
and 4) sending packets to P11. In this way, if there is a lot of
activity at one end of the program it will not slow down or adversely
affect another part of the program.

Input of data coming over the line from the VAX is presently handled with a 
SIN JSYS which is set to break at either 468 characters or else when it 
encounters a ^Z, which should be the 468th character. A better, more
efficient way to handle the character input off the line would be to
read them one at a time as they arrive and place them in a ring
buffer where they can be picked out by another process (a fork
inferior to the reading fork), assemble it into a packet, and dispatch
to the proper routine.

The main purpose of these revisions is to send messages at the highest
possible speed while not sacrificing data integrity. It is understood
that the next P7 will not only have to be rewritten in C instead of
MACRO, but it must also do much more in the way of events log file
gathering and the moving of phone files. Those implementations are
left to the ingenuity and creativeness of the P7 revisioner.

-Greg Matoka  