DC ** FICHE/FRAME BREAK *****
DCC
             DC-CODED  CIRCUIT ANALYSIS PROGRAM


       DC-CODED  IS A COMPUTER PROGRAM WHICH WILL PERFORM
DC ANALYSIS OF LINEAR AND NONLINEAR CIRCUITS.  CIRCUITS MAY
INCORPORATE : 1) RESISTORS, 2) CONDUCTORS, 3) CAPACITORS,
4) INDUCTORS, 5) INDEPENDENT VOLTAGE SOURCES, 6) CURRENT AND
VOLTAGE DEPENDENT VOLTAGE SOURCES, 7) INDEPENDENT CURRENT SOURCES,
8) CURRENT AND VOLTAGE DEPENDENT CURRENT SOURCES, 9) OPEN CIRCUITS,
10) SHORT CIRCUITS, 11) DIODES OBEYING THE EXPONENTIAL (NONLINEAR)
LAW, AND 12) TRANSISTORS (EBERS-MOLL MODEL).

       THE PROGRAM PRINTS NODE VOLTAGES.  OTHER OUTPUTS WHICH
MAY BE OBTAINED ARE : 1) INPUT IMPEDANCE, 2) OUTPUT IMPEDANCE
3) BRANCH CURRENTS, 4) VOLTAGE GAIN, 5)CURRENT GAIN, 6) ADMITTANCE
GAIN,  7) IMPEDANCE GAIN, AND 8) INSERTION LOSS.

       THE PROGRAM CAN HANDLE 40 NODES AND 99 PARAMETERS.

       THE FOLLOWING TYPES OF ANALYSIS ARE AVAILABLE : 1)NOMINAL
SOLUTIONS ; 2) WORST CASE ; 3) INCREMENTAL PARAMETER VARIATION ;
DIFFERENTIAL ANALYSIS ; 5) STATISTICAL ANALYSIS.

       THE PROGRAM IS DESIGNED TO BE USED BY A PERSON WITH NO
KNOWLEDGE OF PROGRAMMING.
DC ** FICHE/FRAME BREAK *****
DCCOMLIST
10
25
4
READ FROM
4
WRITE ON
3
ENTER
2
ADD
3
CHANGE
3
MODIFY
3
PRINT
3
LIST
3
DELETE
3
QUIT
7
NOMINAL SOLUTION
8
DIFFERENTIAL ANALYSIS
8
STATISTICAL ANALYSIS
8
PARAMETER VARIATION
8
WORST CASE ANALYSIS
12
INCREMENTAL PARAMETER VARIATION
4
VERSION
5
CAPABILITIES
5
INSTRUCTIONS
4
CREDITS
2
RUN
2
?
3
HELP
4
CHARGES
4
TAKE FROM
10
2
R
2
G
2
C
2
L
2
E
2
I
2
O
2
S
2
D
2
T
1
2
DUM
2
2
NO
2
YES
3
5
NO HEADING
4
OPTIONS
3
FILE
1
2
DUM
1
2
;
3
2
E
2
V
2
I
1
2
DUM
21
3
NODES
4
NOMINAL
4
MAXIMUM
4
MINIMUM
4
TOLERANCE
5
DEPENDENCY
7
SATURATION CURRENT
6
THERMAL VOLTAGE
3
NAME
2
ICS
2
IBS
2
IEA
2
VBE
2
VST
2
BN
2
BI
2
ICB
2
VT
3
TYPE
2
NPN
2
PNP
DC ** FICHE/FRAME BREAK *****
DCDOC

DOCUMENTATION FOR PUTTING DC-CODED TOGETHER:

THE FOLLOWING FILES ARE NECESSARY FOR MAKING A NEW VERSION OF DC:

DCOV1          INPUT OVERLAY
DCOV2          COMPUTATION OVERLAY
DCCOMLIST      COMMAND LIST FOR DC
NSWAP          BINARY FILE CONTAINING SUBROUTINES FOR SWAPPING
               OVERLAYS IN DIAL-DATA FORTRAN 2.  THIS FILE IS ALSO
               IN THE LIBRARY.
COMMAND        BINARY FILE CONTAINING THE OLD DIAL-DATA COMMAND
               PACKAGE.  THIS FILE IS ALSO IN THE LIBRARY.
DCMAKER        THIS IS THE COMMAND FILE FOR CREATING THE GO FILE
               'DC'.
DCH            CONTAINS THE SYMBOLICS FOR 'HELP'.
DCI            CONTAINS THE SYMBOLICS FOR 'INSTRUCTIONS'
DCC            CONTAINS THE SYMBOLICS FOR 'CAPABILITIES'
DC             THIS IS THE GO FILE FOR DC.

THE FOLLOWING FILES MUST BE IN THE LIBRARY:

DC             *
DCH            @6LD
DCI            @6LD
DCC            @6LD

                               HARRY BOWERS

DC ** FICHE/FRAME BREAK *****
DCH
COMMAND       DESCRIPTION
-------       -----------
HELP          REPRINTS THIS LIST
?             REPRINTS THIS LIST
CAPABILITIES  DESCRIBES PROGRAM CAPABILITIES
INSTRUCTIONS  HOW TO EXECUTE THE PROGRAM
CREDITS       IMPLEMENTED BY TYMSHARE
CHARGES       YOUR REGULAR CHARGE
VERSION       LATEST UPDATE
TAKE FROM     TO TAKE ALL FOLLOWING COMMANDS FROM A FILE
READ FROM     READS CIRCUIT DESCRIPTION FROM A DATA FILE
WRITE ON      WRITES CIRCUIT DESCRIPTION ONTO A DATA FILE
ENTER         DELETES THE PRESENT CIRCUIT DESCRIPTION (IF ANY),
              AND READIES  DC-CODED  TO ACCEPT A NEW
              CIRCUIT DESCRIPTION
ADD           USED TO ADD NEW CIRCUIT ELEMENTS TO THOSE
              ALREADY DEFINED
CHANGE        PRINTS OUT THE OLD ELEMENT DESCRIPTION BEFORE 
              ACCEPTING A NEW ELEMENT DESCRIPTION
MODIFY        ACCEPTS A NEW ELEMENT DESCRIPTION
DELETE        DELETES ELEMENTS FROM THE CIRCUIT
PRINT         PRINTS OUT  THE ELEMENTS PRECEEDED BY A HEADING
LIST          PRINTS OUT THE ELEMENTS WITHOUT A HEADING
QUIT          RETURNS TO EXECUTIVE LEVEL  (-)
NOMINAL SOLUTION  THE NODE VOLTAGES ARE PRINTED OUT.  THE NOMINAL
              VALUES OF ALL PARAMETERS ARE USED
PARAMETER VARIATION  THE SPECIFIED PARAMETERS ARE VARIED ONE
              AT A TIME, AND NODE VOLTAGE SOLUTIONS ARE OBTAINED
              AT MAXIMUM, MINIMUM AND MEAN VALUES FOR EACH 
              SPECIFIED PARAMETER
DIFFERENTIAL ANALYSIS  SEE USER MANUAL
STATISTICAL ANALYSIS  SEE USER MANUAL
WORST CASE ANALYSIS  COMPUTES WORST CASE VOLTAGES 
INCREMENTAL PARAMETER VARIATION  REPETITIVE NOMINAL SOLUTIONS
              AS A PARAMETER VARIES FROM MINIMUM TO MAXIMUM


ANY OF THE ABOVE COMMANDS MAY BE SHORTENED TO THE SMALLEST
SUBSET OF CHARACTERS WHICH UNIQUELY DISTINGUISH THE COMMAND 
FROM ALL OTHER COMMANDS, I.E. "CHARGES" MAY BE ABBREVIATED TO "CHAR".
DC ** FICHE/FRAME BREAK *****
DCI
CIRCUITS MAY INCORPORATE THE FOLLOWING ELEMENTS
1)  RESISTORS (R)
2)  CONDUCTORS (G)
3)  CAPACITORS (C)
4)  INDUCTORS (L)
5)  INDEPENDENT VOLTAGE SOURCES (E)
6)  CURRENT AND VOLTAGE DEPENDENT VOLTAGE SOURCES
    (DEPENDENCY: I R1, E E1)
7)  INDEPENDENT CURRENT SOURCES (I)
8)  CURRENT AND VOLTAGE DEPENDENT CURRENT SOURCES
    (DEPENDENCY: I R1, E E1)
9)  OPEN CIRCUITS (O)
10) SHORT CIRCUITS (S)
11) DIODES OBEYING THE EXPONENTIAL (NONLINEAR) LAW (D)
12) TRANSISTORS (EBERS-MOLL MODEL) (T)


       THE FOLLOWING EXAMPLE USES (CR) TO DENOTE CARRIAGE RETURN.
EVERY RESPONSE TYPED BY THE USER IS UNDERLINED.



-DC-CODED(CR)
 ------------

-- DC CIRCUIT ANALYSIS PROGRAM --



3/21      15:15


:ENTER(CR)
 ---------
# 1 E1(CR)
    ------
FROM: 0(CR)
      -----
TO: 1(CR)
    -----
NOMINAL VALUE: 10(CR)
               ------
DEPENDENCY:(CR)
           ----
#2 R1,1,2,1000(CR)
   ---------------
#3 R2,0,2,1000(CR)
   ---------------
#4 R3,2,3,1000(CR)
   ---------------
#5 D1,3,0(CR)
   ----------
NOMINAL: 1E-8(CR)
         --------
THERMAL VOLTAGE: .052(CR)
                 --------
BREAKDOWN VOLTAGE:(CR)
                  ----
#7 (CR)
   ----

:WRITE /TEST/(CR)
 ----------------
 NEW FILE(CR)
         ----


:NOM (CR)
 --------




NODE   VOLTAGE
---- -----------


  1   1.0000E  1
  2   3.5513E  0
  3   6.5399E- 1
DC ** FICHE/FRAME BREAK *****
DCMAKER
F2O
DCOV1B
NSWAP
COMMAND
*FL5
*FL2
*FL1
G
DCOV2B
NSWAP
COMMAND
*FL5
*FL2
*FL1
G
WRI DC

DC ** FICHE/FRAME BREAK *****
DCOV1
      COMMON PNAME,PNOM,PMIN,PMAX,NI,NT,KIND,K,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,JNDX,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,JDUMMY,NIMI,NTMT,T,MHELP
       COMMON INPUT,IFN,I10T,I11T,IDUMMY,LIST
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),JNDX(99),K(99),NTN(9),T(8,10),NAME(30)
      DIMENSION LIST(260),LSTADD(10),LISTPAR(99),NODELIST(40)
      DIMENSION IPNAME(198),IDUMMY(179),JDUMMY(9),NIMI(99),NTMT(99)
      EQUIVALENCE (PNAME(1),IPNAME(2)),(PMAX(1),XXXX(1)),(K(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4)
      DIMENSION MHELP(20),IFILE(3),IFNAME(4)
CODED  -  CONTROL PROGRAM
C
C      THIS PROGRAM IS OVERLAY ZERO FOR THE CIRCUIT ANALYSIS PACKAGE AND IS RESPONSIBLE
C      FOR THE INTERFACE BETWEEN THE USER AND THE ANALYSIS PROGRAMS.
C
C      ALTHOUGH EACH OF THE OVERLAYS ALLOWS COMMON TO EXTENDED WELL INTO PAGE #4, ONLY PAGE #5
C      IS DECLARED IN THE OVERLAY PACKAGE THUS FORCING FILE BUFFER STORAGE TO BE ALLOCATED
C      IN PAGE #5.  THIS ALSO ALLOWS THE PROGRAMS TO ULTILIZE THEIR CORE ALLOCATION MORE EFFECTIVELY
C      SINCE NO LOCATIONS ARE LOST IN OVERLAY SWAPPING.  IT IS THUS VERY IMPORTANT THAT WE KNOW
C      EXACTLY WHAT IS CONTAINED IN PAGE #5.  IN THE COMMON DECLERATIONS GIVEN BELOW, "IDUMMY"
C      MUST BE ADJUSTED SO THAT ITS STARTING LOCATION IS 24000.  THE SECOND PAGE OF COMMON (PAGE #4)
C      MAY BE USED FREELY BY EACH OF THE OVERLAYS.
C
C      ON THE THE FIRST ENTRY TO THIS ROUTINE, WHEN THE OVERLAY IS FIRST PUT TOGETHER, THE COMMAND
C      LIST, WHICH IS STORED ON THE FILE /LIST/, MUST BE READ INTO THE ARRAY "LIST.
C      THUS THE PROCEDURE FOR LOADING OVERLAY ZERO IS TO USE FOS AS FOLLOWS:
C
C      @FOS
C      LOAD FROM: /PROG/
C      LOAD SUBPROGRAMS FROM: /SUBS/
C      ECT.
C      READY
C      +GO
C      STOP
C      +QUIT
C      @DUMP //
C      NEW FILE (LF)
C      STARTING LOCATION 30000
C
C      SUBSEQUENT ENTRIES TO THE PROGRAM WILL ALSO DEPEND ON THE SETTING OF THE VARIABLE
C      "FLAG".  IF "FLAG"=1, THEN THIS IS THE FIRST TIME THE USER HAS ENTERED THE PROGRAM AND AN OVERLAY
C      (ONE OF THE ANALYSIS PROGRAMS) MUST BE LOADED.  IF "FLAG"=-1, THEN AN OVERLAY HAS ALREADY
C      BEEN LOADED AND THE USER HAS RETURNED TO THE EXEC FOR SOME REASON AND IS NOW REENTERING
C      THE PROGRAM.
C      
C
C
C      LEMON IS A FLAG  =0 IF ALL OF A PARAMETER IS TO BE CHANGED
C                       =1 IF ONLY A PART OF THE PARAMETER IS TO BE MODIFIED
C      MOD   IS A FLAG  =1 IF A MODIFICATION IS TO BE MADE
C
C
C
C
       IFNAME(1)=3H(@6
       IFNAME(2)=3HLD)
       IFNAME(3)=3H   
       I10T=3
       I11T=2
       IDUM1=1
       INPUT=1
       IF(FLAG)24,13000,24
C
C      OVERLAY IS BEING PUT TOGETHER, SO COMMON MUST BE DECLARED AND THE COMMAND LIST READ.
C      ALSO K-DC MUST BE LOADED.
C
13000  CALL TOVER(1)
       CALL FOSLD(3)
      OPEN(2,INPUT,SYMBOLIC,DCCOMLIST)
      CALL RDLIST(LIST,LSTADD,2)
       FLAG=1                ;C     SET FLAG SO THAT WE DONT COME THROUGH THIS CODE AGAIN.
       STOP
C
C      USER IS MAKING HIS FIRST ENTRY INTO PROGRAM.
C
24     CONTINUE
C
C
C
C
C      SET UP NTN ARRAY
C
C
      NTN(1)=3HICS
      NTN(2)=3HIBS
      NTN(3)=3HIEA
      NTN(4)=3HVBE
      NTN(5)=3HVST
      NTN(6)=3H BN
      NTN(7)=3H BI
      NTN(8)=3HICB
      NTN(9)=3H VT
C
C
6999  IF(FLAG)7000,4,4
7000  IF(FLAG+2) 1,7001,1
4     FLAG=-1
       CALL DCLESC(NESC1)
       CALL ARM
       ASSIGN 7001 TO NESC1
      TYPE 51
51    FORMAT(/$-- DC CIRCUIT ANALYSIS PROGRAM --$/)
      CALL TIME(I,J,KI,KK)
      KK=KK+100
      J=J+100
      TYPE 5,I,J,KI,KK
5     FORMAT(//I2,$/$,I2,5X,I2,$:$,I2/)
7001   CONTINUE
       CALL SETESC
       FLAG=-1
      NTRANS=0
      MAPP=0
       IFILE(1)=3HTEL
       IFILE(2)=3HETY
       IFILE(3)=3HPE 
1      GO TO (2,2,2,8),INPUT
2     TYPE 9
       CALL DCLESC(NESC1)
       ASSIGN 50 TO NESC1
       CALL ARM
       CLOSE
       CALL ESCON
9     FORMAT(/)
      CALL BRS(14,0,0,-1)
      CALL DCLESC(NESC1)
      ASSIGN 50 TO NESC2
8      III=ABS(I10T)
       CLOSE(III)
       III=ABS(I11T)
       CLOSE(III)
      TYPE 10
10    FORMAT(/$:$)
      IF(LINGET(INPUT,IFN,NESC2)) 11,8,13
11    TYPE 12
12    FORMAT(/$ ?$/)
       INPUT=1
       I11T=2
       I10T=3
       CLOSE
      GO TO 1
31     IFNAME(3)=3HDCC
       CALL COPY(IFNAME,IFILE)
       GO TO 1
32     IFNAME(3)=3HDCI
       CALL COPY(IFNAME,IFILE)
       GO TO 1
34     TYPE 35
35     FORMAT(/$TYMSHARE$)
       GO TO 1
36     IFNAME(3)=3HDCH
       CALL COPY (IFNAME,IFILE)
       GO TO 1
38     TYPE 39
39     FORMAT(/$YOUR REGULAR CHARGE$)
       GO TO 1
C
C      TAKE FROM
C
40     IDUM1=2
       IDUM2=9
       I11T=-2
       I10T=-3
       GO TO 101
42     IDUM1=1
       INPUT=4
       IFN=9
41     GO TO 8
13    CALL EDIT SAVE
      GO TO(11,8,100,200,300,400,500,600,700,800,900,9000,1100,1200,1300,
+     1400,1500,2000,1000,31,32,34,1100,36,36,38,40),KOMMAND(1,1)+2
50    CALL ARM
       INPUT=1
       CLOSE
      CALL BRS(29,0,0,-1)
      GO TO 1
1000  TYPE 77777
77777 FORMAT(/$17.01$/)
      PNAME(1)=1.0
       KFLAG=0
      GO TO 8
C      READ FROM
C
C
100    IDUM2=3
      CALL EDIT RESTORE
      IF(KOMMAND(1,4)-1) 11,1011,11
1011  MAPP=0
      ON END FILE NOTRANS,X1
      ASSIGN 141 TO NOTRANS
      ASSIGN 150 TO NESC2
106   IF(NOWCHR(0)) 102,102,101
101   IF(FILE(NAME,-1,IDUM2,J,6HSYMINP))102,102,105
102   TYPE 103
103   FORMAT($FROM: $)
      IF(LINGET(INPUT,IFN,NESC2)) 102,102,101
105   IF(J-3) 109,120,109
109   TYPE 110
110   FORMAT($** WRONG FILE NAME$/)
       CLOSE(IDUM2)
       GO TO (106,111)IDUM1
111    TYPE 103
      GO TO 106
120    GO TO (122,42)IDUM1
122   READ 3,121,PRO,BLEM,LIMBS
121   FORMAT(2A,I/)
      DO 130 I=1,LIMBS
      READ 3,131,PNAME(I),NI(I),NT(I),KIND(I),JNDX(I),LLLLL,K(I),
+      PNOM(I),PMIN(I),PMAX(I)
       N=IPNAME(I*2-1)/65536
       IF(N-3H  S)136,135,136
135    KIND(I)=11
       GO TO 138
136    IF(N-3H  O)130,137,130
137    KIND(I)=6
138    PNOM(I)=0.
       PMIN(I)=0.
       PMAX(I)=0.
130    CONTINUE
131   FORMAT(A,6I3,1P3E13.6/)
      READ 3,256,NTRANS
      IF(NTRANS) 140,140,132
132   DO 133 I=1,NTRANS
133   READ 3,259,(T(I,JJJ),JJJ=1,10)
140    MAPP=1
      GO TO 1
141   NTRANS=0
      GO TO 140
150   LIMBS=0
151   CLOSE
      GO TO 50
C
C
C      WRITE ON
C
C
200   LXX=0
      IF(MAPP) 11,11,2111
2111  ASSIGN 151 TO NESC2
201   IF(FILE(NAME,-1,I10T,J,6HSYMOUT)) 202,202,253
202   TYPE 203
203   FORMAT($TO: $)
      IF(LINGET(INPUT,IFN,NESC2)) 202,1,201
253   WRITE 3,121,PRO,BLEM,LIMBS
      DO 255 I=1,LIMBS
      LLLLL=0
      IF(K(I)) 255,261,255
261   K(I)=1
255   WRITE 3,131,PNAME(I),NI(I),NT(I),KIND(I),JNDX(I),LLLLL,K(I),
+     PNOM(I),PMIN(I),PMAX(I)
      WRITE 3,256,NTRANS
256   FORMAT(I/)
      IF(NTRANS) 260,260,257
257   DO 258 I=1,NTRANS
258   WRITE 3,259,(T(I,JJJ),JJJ=1,10)
259   FORMAT(A,9(1PE13.6)/)
260   GO TO  1
C
C
C      ENTER PARAMETERS
C
C
300    CALL EDIT RESTORE
      IF(KOMMAND(1,3)-3) 11,3000,11
3000  MAPP=0
      MKOM1=0
      LIMBS=0
      LEMON=0
      NODES=0
      NTRANS=0
      CALL NOWCHR(0)
      CALL PACKF(PRO,6,0)
      CALL PACKF(BLEM,6,0)
      JPIN=0
      IPIN=1
      DO 3001 I=1,99
3001  JNDX(I)=0
3021  MOD=0
      LEMON=0
301   IF(MOD) 3011,3011,609
3011  ASSIGN 3996 TO NESC2
      NTR=NTRANS+1
      CALL ESCON
      JPIN=IPIN
       K(IPIN)=0
      CALL EDIT EMPTY
      TYPE 302,IPIN
302   FORMAT($#$,I2,$ $)
303   IF(LINGET(INPUT,IFN,NESC2)) 3995,3995,305
305   ASSIGN 390 TO NESC2
      CALL EDIT SAVE
C
C
C      NOW SET UP SCALAR KTYPE
C        KTYPE=0 , ONE LINE PARAMETER (RESISTANCE ETC)
C        KTYPE=1 ,         "          ASSUME PNOM (OPEN-SHORT)
C        KTYPE=2 , TWO LINE PARAMETER (CAPACITOR,INDUCT.,ASSUME 2ND. LINE)
C        KTYPE=3 , VOLTAGE SOURCE
C        KTYPE=4 , CURRENT SOURCE
C        KTYPE=5 , DIODE
C        KTYPE=6 , TRANSISTOR
C
      KTYPE=0
      GO TO(306,306,3125,311,314,315,316,317,312,313,318,320),KOMMAND(2,-1)+2
C
306   TYPE 307
307   FORMAT($** INVALID PARAMETER$/)
      GO TO 301
C
C
311    KIND(IPIN)=2
      GO TO 3126
C
C
312    KIND(IPIN)=6
      GO TO 3123
C
313    KIND(IPIN)=11
3123   XXXX(IPIN,1)=0.
       XXXX(IPIN,2)=0.
       XXXX(IPIN,3)=0.
3124  KTYPE=1
       GO TO 3126
3125  KIND(IPIN)=1
3126  LINE=1
       JNDX(IPIN)=IPIN
      GO TO 330
C
C
314   KIND(IPIN)=3
      KIND(IPIN+1)=14
      GO TO 3152
C
C 
315   KIND(IPIN)=4
      KIND(IPIN+1)=9
3152  KTYPE=2
      DO 3151 JJJ=1,3
3151  XXXX(IPIN+1,JJJ)=0.0
3153  LINE=2
      JNDX(IPIN)=IPIN+1
      JNDX(IPIN+1)=IPIN
      GO TO 330
C
C
316   KTYPE=3
      GO TO 3126
C
C
317   KTYPE=4
      GO TO 3126
C
C
318   KIND(IPIN)=10
      KIND(IPIN+1)=15
      KTYPE=5
      GO TO 3153
C
C
C
C
C      TRANSISTORS
C
C
C      ORDER......
C         A NINE LINE MODEL IS USED COMPOSED OF...
C
C LINE 1 , DIODE B TO C
C LINE 2 , THERMAL VOLTAGE FOR ABOVE
C LINE 3 , DIODE B TO E
C LINE 4 , THERMAL VOLTAGE FOR ABOVE
C LINE 5 , SHUNT RESISTOR B TO C
C LINE 6 , SHUNT RESISTOR B TO E
C LINE 7 , INDEPENDANT CURRENT SOURCE C TO B
C LINE 8 , CURRENT DEPENDANT CURRENT SOURCE C TO B (ON  LINE 3)
C LINE 9 ,                DITTO             E TO B (ON  LINE 1)
C
C
320   KIND(IPIN)=10
      LINE=9
      DO 3201 JJJ=1,3
      DO 3201 JJK=IPIN+4,IPIN+5
3201  XXXX(JJK,JJJ)=1E9
      KIND(IPIN+1)=15
      KIND(IPIN+2)=10
      KIND(IPIN+3)=15
      KIND(IPIN+4)=1
      KIND(IPIN+5)=1
      KIND(IPIN+6)=6
      KIND(IPIN+7)=7
      KIND(IPIN+8)=7
      KTYPE=6
C
C
330    CALL EDIT RESTORE
      CALL SYNCHRO(J,IPIN-1,PNAME(IPIN),M)
      IF(MOD) 3350,3350,335
3350  IF(J) 335,335,333
333   TYPE 334
334   FORMAT($** DUPLICATE NAMES$/)
      IF(LEMON) 301,301,1
335   DO 336 I=IPIN+1,IPIN+8
336   PNAME(I)=PNAME(IPIN)
      T(NTR,1)=PNAME(IPIN)
      IF(LEMON) 3361,3366,3361
3361  IF(LINE-MMX) 656,3362,656
3362  IF(KTYPE-6) 3607,3367,3607
3367  LL=JJX
      GO TO 3976
3366  IF(KTYPE-6) 337,391,337
C
C      
337   CALL KOMMA(0)
3371   IF(JUMBER(X,1)) 338,338,340
338   TYPE 339
339   FORMAT($FROM: $)
      IF(LINGET(INPUT,IFN,NESC2)) 338,338,3371
340   NI(IPIN)=X
      NI(IPIN+1)=X
      NI(IPIN+2)=X
341   CALL KOMMA(0)
3411  IF(JUMBER(X,1)) 342,342,344
342   TYPE 343
343   FORMAT($TO: $)
      IF(LINGET(INPUT,IFN,NESC2)) 342,342,3411
344   NT(IPIN)=X
      NT(IPIN+1)=X
      NT(IPIN+2)=X
      IF(NI(IPIN)-NT(IPIN)) 3440,3442,3440
3442  TYPE 12
      GO TO 338
3440  IF(LEMON)3441,3441,690
C
C
C
3441  IF(KTYPE-1) 346,345,346
345   IPIN=IPIN+KTYPE
      GO TO 301
C
346   CALL KOMMA(0)
3461  IF(JUMBER(X,0)) 347,347,349
347   TYPE 348
348   FORMAT($NOMINAL: $)
3481  IF(LINGET(INPUT,IFN,NESC2)) 347,347,3461
349   IF(LEMON) 3480,3490,3482
3482  IF(MKOM2) 3483,3483,3480
3483  IF((MKOM1-9)*(MKOM1-10)) 3480,3490,3480
3480  PNOM(IPIN)=X
      GO TO 690
3490  DO 3494 JJJ=1,3
3494  XXXX(IPIN,JJJ)=X
      IF(LEMON) 3495,3495,690
C
C

3495  IF(KOMMAND(7,-1)) 3491,3491,3492
3492  IF(KTYPE-5) 361,388,361
3491  CALL KOMMA(0)
3493  IF(JUMBER(X,1)) 357,3801,350
350   IF( NOWCHR(1)-3H  %) 352,351,352
351   PMIN(IPIN)=PNOM(IPIN)*(1-X*0.01)
      PMAX(IPIN)=PNOM(IPIN)*(1+X*0.01)
      IF(LEMON) 3562,3562,690
352   PMIN(IPIN)=X
      CALL KOMMA(0)
3531  IF(JUMBER(X,0)) 354,354,356
354   TYPE 355
355   FORMAT($MAXIMUM: $)
      IF(LINGET(INPUT,IFN,NESC2)) 354,354,3531
356   PMAX(IPIN)=X
      IF(L 3562,3562,690
3562  IF(KOMMAND(7,-1)) 3801,3801,3492
3561  CALL NEXTCHR(0)
      GO TO 3801
C
357   IF(KIND(IPIN)-15) 3661,3842,3661
3601  IF((KTYPE-3)*(KTYPE-4))3631,368,3631
3607  IF((KTYPE-3)*(KTYPE-4)) 690,3608,690
3608  GO TO(368,368,368,368,368,368,374,371,368,368,368,374,371,368,368),KIND(JJX)
C
C
C      DEPENDENCIES
C
C
361   IF((KTYPE-3)*(KTYPE-4)) 357,3651,357
3631  IF(KTYPE) 380,364,380
364   IPIN=IPIN+1
      GO TO 301
365   IF(NEXTCHR(0)) 368,368,3651
3651  GO TO(3661,368,371,371,374),KOMMAND(8,-1)+2
3661  TYPE 367
367   FORMAT($DEPENDENCY: $)
      IF(LINGET(INPUT,IFN,NESC2)) 368,368,3651
368   IF(KTYPE-3) 370,369,370
369    KIND(IPIN)=11
      IPIN=IPIN+1
      IF(LEMON) 301,301,690
370   KIND(IPIN)=6
      IPIN=IPIN+1
      IF(LEMON) 301,301,690
371   IF(KTYPE-3) 373,372,373
372   KIND(IPIN)=13
      GO TO 377
373   KIND(IPIN)=8
      GO TO 377
374   IF(KTYPE-3) 376,375,376
375   KIND(IPIN)=12
      GO TO 377
376   KIND(IPIN)=7
377   IF(NAMOD)3771,3771,690
3771  CALL KOMMA(0)
      CALL SYNCHRO(LL,IPIN-1,Z,M)
      IF(LL) 378,3661,379
378   TYPE 3971
      GO TO 3661
379   IF(LEMON) 3791,3791,3792
3792  IF(LL-JJX)3791,656,656
3791  JNDX(IPIN)=LL
3793  IPIN=IPIN+1
      IF(LEMON) 301,301,690
C
C
C
3801  IF((KTYPE-3)*(KTYPE-4)) 380,3661,380
380   IF(KTYPE-5) 381,384,381
381   IF(KTYPE) 383,382,383
382   IF(KIND(IPIN)-15) 3793,3841,3841
3841  TYPE 3843
3843  FORMAT($BREAKDOWN VOLTAGE: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3841,3793,3842
3842  IF(NUMBER(X)) 3841,3793,3844
3844  X=ABS(X)
      KIND(IPIN+1)=1
      K(IPIN+1)=-1
      JNDX(IPIN+1)=IPIN
      LINE=3
      NI(IPIN+1)=NI(IPIN)
      NT(IPIN+1)=NT(IPIN)
      IPIN=IPIN+1
      GO TO 349
383   IPIN=IPIN+2
      GO TO 301
C
384   IF(KOMMAND(7,-1)) 385,385,388
385   TYPE 386
386   FORMAT($THERMAL VOLTAGE: $)
      IF(LINGET(INPUT,IFN,NESC2))385,385,388
388   IF(JUMBER(X,0)) 385,385,389
389   IPIN=IPIN+1
      KTYPE=0
      GO TO 349
C
C
390   IPIN=JPIN
      CALL ARM
      TYPE 9
       IF(MOD)301,301,1
C
C
C
C      TRANSISTOR MACRO
C
C
391   IF(NEXTCHR(0))3894,3894,3891
3891  IF(KOMMAND(10,1)-20) 3894,3892,3893
3892  NPN=1
      GO TO 3898
3893  NPN=0
      GO TO 3898
3894  TYPE 3895
3895  FORMAT($NPN OR PNP $)
      IF(LINGET(INPUT,IFN,NESC2)) 3894,3894,3891
3898  IF(LEMON) 3901,3901,3902
3902  X=NT(IPIN+4)
      GO TO 3903
3901  IF(NEXTCHR(0)) 3911,3911,3914
3914   IF(JUMBER(X,1)) 3911,3911,3913
3911   TYPE 3912
3912  FORMAT($COLLECTOR: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3911,3911,3914
3913  CX=X
3903  IF(NPN)3897,3897,3896
3897  NI(IPIN)=X
      NI(IPIN+1)=X
      NT(IPIN+6)=X
      NT(IPIN+7)=X
      GO TO 3899
3896  NT(IPIN)=X
      NT(IPIN+1)=X
      NI(IPIN+6)=X
      NI(IPIN+7)=X
3899  NT(IPIN+4)=X
      IF(MKOM1-21) 3904,3905,3904
3905  X=NI(IPIN+4)
      GO TO 3906
3904  IF(NEXTCHR(0)) 3915,3915,3916
3916  IF(JUMBER(X,1)) 3915,3915,3917
3915  TYPE 3910
3910  FORMAT($BASE: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3915,3915,3916
C
3917  IF(CX-X) 3900,3933,3900
3933  TYPE 12
      GO TO 3911
3900  BX=X
3906  IF(NPN) 3935,3935,3934
3935  DO 3936 JJJ=IPIN,IPIN+3
3936  NT(JJJ)=X
      DO 3937  JJJ=IPIN+4,IPIN+6
3937   NI(JJJ)=X
      NI(IPIN+7)=X
      NI(IPIN+8)=X
      GO TO 3938
3934  DO 3918 JJJ=IPIN,IPIN+5
3918  NI(JJJ)=X
      DO 3919 JJJ=IPIN+6,IPIN+8
3919  NT(JJJ)=X
3938  IF(MKOM1-21) 3907,3908,3907
3908  X=NT(IPIN+5)
      GO TO 3931
3907  IF(NEXTCHR(0)) 3921,3921,392
392   IF(JUMBER(X,1)) 3921,3921,3923
3921  TYPE 3922
3922  FORMAT($EMITTER: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3921,3921,392
3923  IF(BX-X) 3930,3933,3930
3930  IF(CX-X) 3931,3933,3931
3931  IF(NPN) 3943,3943,3940
3943  NI(IPIN+2)=X
      NI(IPIN+3)=X
      NT(IPIN+8)=X
      GO TO 3942
3940  NT(IPIN+2)=X
      NT(IPIN+3)=X
      NI(IPIN+8)=X
3942  NT(IPIN+5)=X
      IF(LEMON) 3920,3920,3944
3944  LL=JJX
      GO TO 3976
C
C
3920  LM=1
      CALL KOMMA(0)
3924   IF(NOWCHR(0)-3H  =) 3925,396,3925
3925  IF(KOMMAND(7,-1)) 3928,3928,3926
3926  IF(JUMBER(X,0)) 3928,3928,3927
3927  T(NTR,LM+1)=X
      LM=LM+1
      IF(LM-10) 393,3941,3941
3928  TYPE 3929,NTN(LM)
3929  FORMAT(A,$: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3928,3928,3953
3953  IF(NOWCHR(0)-3H  =) 3926,396,3926
393   M=NOWCHR(0)
      GO TO 3925
C
C
3941  Z2=T(NTR,2)
      Z7=T(NTR,7)
      Z8=T(NTR,8)
      Z10=T(NTR,10)
      PNOM(IPIN+6)=T(NTR,9)
      PNOM(IPIN+1)=Z10
      PNOM(IPIN+3)=Z10
      PNOM(IPIN+2)=T(NTR,4)/(EXP(T(NTR,5)/Z10)-1.0)
      PNOM(IPIN+7)=Z7/(Z7+1)
      PNOM(IPIN+8)=Z8/(Z8+1)
C
C
      SIEM=Z2+T(NTR,3)
      ALPHA=1.0-PNOM(IPIN+7)*PNOM(IPIN+8)
      SIEE=(-PNOM(IPIN+8)*Z2+SIEM)/ALPHA
      SICC=(PNOM(IPIN+7)*SIEM-Z2)/ALPHA
      VBC=Z10*ALOG(SIEE/PNOM(IPIN+2)+1.0)-T(NTR,6)
      PNOM(IPIN)=SICC/(EXP(VBC/Z10)-1.0)
C
C
3949  DO 395 I=IPIN,IPIN+8
      PMIN(I)=PNOM(I)
      IF(PNOM(I)) 3956,3956,3954
3956  TYPE 3955
3955  FORMAT($** NEGATIVE VALUES$/)
3954  K(I)=1
395   PMAX(I)=PNOM(I)
      IF(LEMON) 3950,3950,690
3950  JNDX(IPIN)=IPIN+1
      JNDX(IPIN+2)=IPIN+3
      DO 3951 JJJ=IPIN+4,IPIN+6
3951  JNDX(JJJ)=JJJ
      JNDX(IPIN+7)=IPIN+2
      JNDX(IPIN+8)=IPIN
      JNDX(IPIN+1)=IPIN
      JNDX(IPIN+3)=IPIN+2
      IPIN=IPIN+9
      NTRANS=NTRANS+1
      GO TO 301
C
C
C
C     = (TRANSISTOR)
C
396   IF(NEXTCHR(0)) 3961,3961,3963
3961  TYPE 3962
3962  FORMAT($PARAMETER: $)
      IF(LINGET(INPUT,IFN,NESC2)) 3961,3961,3963
3963  CALL SYNCHRO(LL,IPIN-1,Z,M)
      IF(LL) 3972,3961,3975
3972   TYPE 3971
3971  FORMAT(/$** NO SUCH PARAMETER$/)
      GO TO 301
3975  II=0
C
C
3976  CALL TRANSMOVE(PNAME(LL),NTRANS,T,0,NTRAN)
      T(NTR,1)=PNAME(IPIN)
      DO 398 I=LL,LL+8
      PNOM(IPIN+II)=PNOM(I)
398   II=II+1
      IF(LEMON)3949,3949,3952
3952  NTRANS=NTRANS+1
      GO TO 3949
C
C
C      = (OTHERS)
C
C
3980  FORMAT($** INVALID REQUEST$/)
C
C
3996  CALL ARM
      CALL BRS(29,0,0,-1)
3995  DO 3997 I=1,JPIN-1
      IF(JNDX(I)) 3997,3998,3997
3998  JNDX(I)=I
3997   CONTINUE
      LIMBS=JPIN-1
      IF(LIMBS)1,1,3999
3999  MAPP=1
      GO TO 1
C
C
C           ADD PARAMETERS
C
C
400   IF(MAPP) 11,11,4001
4001  IPIN=LIMBS+1
      DO 4002 JJJ=IPIN,IPIN+8
4002  JNDX(JJJ)=0
      GO TO 3021
C
C
C       CHANGE PARAMETERS
C
C
500   NTP=1
      GO TO 601
C
C
C      MODIFY PARAMETERS
C
C
600   NTP=0
601   DEL=0
      NAMOD=0
      MOD=1
      NTR=NTRANS+1
      MKOM1=0
      MKOM2=0
      IF(MAPP) 11,11,6011
6011  LEMON=0
      IF(NOWCHR(0)) 602,602,603
602   TYPE 3962
      IF(LINGET(INPUT,IFN,NESC2)) 602,602,603
603   CALL SYNCHRO(JJX,LIMBS,OLDNM,MMX)
      IF(JJX) 604,602,605
604   TYPE 3971
      GO TO 602
605   IF(NTP) 607,607,606
606   CALL PRINTP(JJX,0,JZ)
       TYPE 9
607   JJZ=JJX-1
      DO 6522 IJX=1,MMX
      CALL IXJON(XXXX,IXXX,LIMBS+IJX,JJZ+IJX)
6522  CALL DEPEND(JNDX,PNAME,KIND,LIMBS+IJX,JJX,JJZ+IJX,LIMBS-JJZ,1)
      IF(NEXTCHR(0)) 608,608,650
608   TYPE 302,JJX
      IPIN=LIMBS+1
      JPIN=IPIN
      GO TO 303
C
C      WE HAVE NOW INPUT A PARAM
C
609   CALL ESCOFF
      IF(LINE-MMX) 620,610,630
620   DEL=1
610   JJZ=JJX-1
      DO 618 I=1,LINE
      CALL IXJON(XXXX,IXXX,JJZ+I,LIMBS+I)
      IF(JNDX(LIMBS+I)) 613,613,618
613   JNDX(LIMBS+I)=LIMBS+I
618   CALL DEPEND(JNDX,PNAME,KIND,JJZ+I,JJX,LIMBS+I,LIMBS+1-JJX,-1)
      IF(DEL)6181,6181,622
622   CALL DELETE(JJX+LINE,MMX-LINE,LIMBS)
6181  IF(MMX-8) 1,6185,6185
6185  CALL TRANSMOVE(OLDNM,NTRANS-1,T,1,NTRANS)
      GO TO 1
C
630   NN=LINE-MMX
      DO 632 J=LIMBS+LINE+NN,JJX+MMX+NN,-1
      CALL IXJON(XXXX,IXXX,J,J-NN)
C
632   CALL DEPEND(JNDX,PNAME,KIND,J,JJX,J-NN,NN,1)
      LIMBS=LIMBS+NN
      GO TO 610
C
650   LEMON=1
      LINE=MMX
      IPIN=LIMBS+1
      JPIN=LIMBS+1
       MKOM1=KOMMAND(10,2)+2
      MKOM2=KOMMAND(10,2)+2
      IF(MMX-8) 665,653,653
C
C      TRANSISTOR
C
653   T(NTRANS+1,1)=OLDNM
      DO 654 J=1,NTRANS
      IJX=J
      IF(PNAME(JJX)-T(J,1)) 654,655,654
654   CONTINUE
655   IF(MKOM1-3) 656,6551,657
6551  IF(NI(JJX)-NI(JJX+4)) 6554,6552,6554
6552  IF(NT(JJX+7)-NI(JJX+4)) 6554,6553,6554
6553  NPN=1
      GO TO 3911
6554  NPN=0
      GO TO 3911
656   TYPE 3980
      GO TO 1
657   IF(MKOM1-11) 656,658,659
658   TYPE 302,JJX
      GO TO 303
659   IF(MKOM1-12) 656,660,660
660   IF(MKOM1-20) 661,661,664
661   TYPE 3929,NTN(MKOM1-11)
      IF(LINGET(INPUT,IFN,NESC2)) 661,661,662
662   IF(JUMBER(X,0)) 656,661,663
663   NTRANS=NTRANS+2
      CALL TRANSMOVE(OLDNM,NTRANS-2,T,0,NTRANS)
      T(NTRANS,MKOM1-10)=X
      NTR=NTRANS
      GO TO 3941
664   IF(MKOM1-21)656,3894,656

C      NON-TRANSISTORS
C
665   IF(MKOM1-12) 666,656,656
666   GO TO(656,656,338,347,354,667,671,674,677,677,685),MKOM1
667   TYPE 668
668   FORMAT($MINIMUM: $)
      IF(LINGET(INPUT,IFN,NESC2)) 667,667,669
669   IF(JUMBER(X,0)) 656,667,670
670   PMIN(IPIN)=X
      GO TO 690
671   TYPE 672
672   FORMAT($TOLERANCE: $)
      IF(LINGET(INPUT,IFN,NESC2)) 671,671,673
673   IF(JUMBER(X,0)) 656,671,351
674   GO TO(656,656,656,656,656,675,675,675,656,656,676,676,676,656,656),KIND(JJX)
675   KTYPE=4
      GO TO 3661
676   KTYPE=3
      GO TO 3661
677   IF(KIND(JJX)-10) 656,678,656
678   IF(MKOM2) 656,679,682
679   IF(MKOM1-9) 680,680,385
680   TYPE 681
681   FORMAT($SATURATION CURRENT: $)
      GO TO 3481
C
682   IF(MKOM2-4) 656,683,683
683   IF(MKOM2-7) 684,684,656
684   IPIN=IPIN+MKOM1-9
      GO TO(347,354,667,671),MKOM2-3
C
685   TYPE 302,JJX
      NAMOD=1
      GO TO 303
C
690   DEL=0
      GO TO 610
C
C
C
C      PRINT PARAMETERS
C
C
700   NO=1
      GO TO 801
C
C      LIST PARAMS
C
800   NO=0
801   IF(MAPP) 11,11,8011
8011  CALL SYNCHRO(J,LIMBS,Z,M)
      IF(J) 802,803,804
802   TYPE 3971
      GO TO 807
803   CALL PRINTP(-1,NO,II)
      GO TO 1
804   CALL PRINTP(J,NO,II)
807   IF(NEXTCHR(0)) 1,1,805
805   CALL SYNCHRO(J,LIMBS,Z,M)
      IF(J) 802,1,806
806   NO=O
      GO TO 804
C
C
C      DELETE PARAMS
C
C
900   IF(MAPP) 11,11,9001
9001  CALL SYNCHRO(LL,LIMBS,OLDNM,M)
      IF(LL) 901,1,902
901   TYPE 3971
      GO TO 1
902   CALL DELETE(LL,M,LIMBS)
      IF(M-8) 903,904,904
904   CALL TRANSMOVE(OLDNM,NTRANS,T,-1,NTRANS)
903   IF(NEXTCHR(0)) 1,1,9001
C
C
C      NOMINAL
C
C
1100  ITYPE =1
      GO TO 1301
C
C      DIFFERENTIAL
C
1200  ITYPE=4
      GO TO 1401
C
C     STATISTICAL
C
1300  ITYPE=3
1301  KT=1
      GO TO 1501
C
C      PARAM VARIATION
C
1400  ITYPE=5
1401  KT=2
      GO TO 1501
C
C      WORST CASE
C
1500  ITYPE=6
      KT=3
1501  CALL INCOM(KT,J,MAPP,NESC2)
      IF(J) 1,1,5000
C
C
C      HELP
C
C
C
C      INCREMENTAL
C
C
2000  ITYPE=2
      CALL INCOM(4,J,MAPP,NESC2)
      IF(J) 1,1,2001
2001  TYPE 2002
2002  FORMAT($STEPS: $)
      IF(LINGET(INPUT,IFN,NESC2)) 2006,2006,2003
2003  IF(JUMBER(X,0)) 2004,2006,2005
2004  TYPE 12
      GO TO 2001
2005  ISTEPS=X
      GO TO 5000
2006  ISTEPS=12
      GO TO 5000
C
C
C      GO TO K-DC
C
C
C
5000  CALL CALLOV(3)
      GO TO 1
C
C
C      EXIT FROM CODED
C
C
9000  CALL BRS(10)
      END
      SUBROUTINE PRINTP(I,NO,JJ)
      COMMON PNAME,PNOM,PMIN,PMAX,NI,NT,KIND,K,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,JNDX,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,JDUMMY,NIMI,NTMT,T,MHELP
       COMMON INPUT,IFN,I10T,I11T,IDUMMY,LIST
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),JNDX(99),K(99),NTN(9),T(8,10),NAME(30)
      DIMENSION LIST(260),LISTPAR(99),NODELIST(40)
      DIMENSION IDUMMY(179),JDUMMY(9),NIMI(99),NTMT(99),MHELP(20)
      EQUIVALENCE (PMAX(1),XXXX(1)),(K(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4)
C
C
C      THIS S-R HANDLES ALL PRINTING OF CIRCUITS
C
C      NO = A MARKER FOR HEADINGS
C
C      I = THE NUMBER OF THE PRESENT PARAMETER,OR
C        = -1 WE REQUIRE ALL OF THIS CIRCUIT TO BE LISTED
C
C      JJ RETURNS WITH THE NEXT LINE NUMBER AFTER THIS PARAMETER
C
C
      IF(NO) 6,6,1
1     TYPE 5
5     FORMAT(/$  PARAMETER    NODES   DEPENDENCY   NOMINAL$6X
+     $MINIMUM      MAXIMUM$/$ NO.   NAME   FROM TO  TYPE  ON$,6X,
+     2($VALUE$,8X),$VALUE$/$ ---  -----   ---  ---  -  -----$,3(2X,11($-$))/)
C
C
6     IF(I)7,7,8
7     JJ=1
      GO TO 9
8     JJ=I
9     GO TO(10,10,10,10,10,10,10,10,900,30,10,10,10,900,900),KIND(JJ)
C
C
C         ALL ONE LINE PARAMETERS
C
C      PLUS CAPACITORS AND INDUCTORS BUT DONT PRINT THE INITIAL CONDITION
C
C
10    IF(JNDX(JJ)-JJ) 13,16,13
13    GO TO(16,16,16,16,16,16,14,15,16,16,16,14,15,16,16),KIND(JJ)
14    II=3H  I
      GO TO 151
15    II=3H  E
151   AI=PNAME(JNDX(JJ))
      GO TO 17
16    IF(K(JJ)) 900,161,161
161   II=3H   
      AI=6H          
17    TYPE 19,JJ,PNAME(JJ),NI(JJ),NT(JJ),II,AI,PNOM(JJ)
19    FORMAT(/1X,I3,2X,A5,3X,I3,2X,I3,A3,2X,A5,3X,1PE10.4)
      CALL MINMAX(PMIN(JJ),PMAX(JJ))
      IF((KIND(JJ)-3)*(KIND(JJ)-4)) 900,24,900
24    JJ=JJ+1
      GO TO 900
C
C
C      DIODES (ONLY TRUE MULTI LINE)
C
C       THIS DIODE COULD ALSO BE THE FIRST LINE OF A TRANSISTOR MACRO
C
C
30    IF(LIMBS-JJ-4) 31,31,300
300   CALL COMPAR(PNAME(JJ),PNAME(JJ+3),IND)
      IF(IND)31,31,100
31    TYPE 33,JJ,PNAME(JJ),NI(JJ),NT(JJ)
33    FORMAT(/2X,I2,2X,A5,3X,I3,2X,I3/)
      TYPE 34,PNOM(JJ)
34    FORMAT(13X,$SATURATION CURRENT:$,3X,1PE10.4)
      CALL MINMAX(PMIN(JJ),PMAX(JJ))
      JJ=JJ+1
      TYPE 37,PNOM(JJ)
37    FORMAT(/16X,$THERMAL VOLTAGE:$,3X,1PE10.4)
      CALL MINMAX(PMIN(JJ),PMAX(JJ))
      IF(K(JJ+1)) 40,900,900
40    JJ=JJ+1
      TYPE 41,PNOM(JJ)
41    FORMAT(/14X,$BREAKDOWN VOLTAGE:$,3X,1PE10.4)
      CALL MINMAX(PMIN(JJ),PMAX(JJ))
      GO TO 900
C
C
C
C      TRANSISTOR MACRO'S
C
C
100   DO 101 III=1,10
      JK=III
      CALL COMPAR(T(III,1),PNAME(JJ),IND)
      IF(IND) 101,101,102
101   CONTINUE
      TYPE 199
199   FORMAT(/$** TRANSISTOR ?$/)
      RETURN
102   TYPE 103
103   FORMAT(/15X,$C    B    E$/14X,$---  ---  ---$/)
      TYPE 105,JJ,PNAME(JJ),NT(JJ+4),NI(JJ+4),NT(JJ+5)
105    FORMAT(1X,I3,2X,A5,3X,I3,2X,I3,2X,I3/)
       IF(NI(JJ+2)-NI(JJ+1))109,108,109
108    IE1=3HNPN
       GO TO 111
109    IE1=3HPNP
111    TYPE 112,IE1
112    FORMAT(27X,$TYPE:   $,A/)
      DO 110 III=1,9
110   TYPE 106,NTN(III),T(JK,III+1)
106    FORMAT(28X,A,$:   $,1PE10.4/)
      JJ=JJ+8
900   JJ=JJ+1
      IF(I)901,999,999
901   IF(LIMBS-JJ) 999,9,9
999   RETURN
      END
      SUBROUTINE DELETE (I,M,NUM)
      COMMON PNAME,PNOM,PMIN,PMAX,NI,NT,KIND,K,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,JNDX,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,JDUMMY,NIMI,NTMT,T,MHELP
       COMMON INPUT,IFN,I10T,I11T,IDUMMY,LIST
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),JNDX(99),K(99),NTN(9),T(8,10),NAME(30)
      DIMENSION LIST(260),LISTPAR(99),NODELIST(40)
      DIMENSION IDUMMY(179),JDUMMY(9),NIMI(99),NTMT(99),MHELP(20)
      EQUIVALENCE (PMAX(1),XXXX(1)),(K(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4)
C     I= FIRST LINE TO BE DELETED
C     M= NUMBER OF LINES
C     NUM= THE TOTAL NUMBER OF LINES BEFORE DELETION
C
C
      CALL ESCOFF
      IF(I+(M-1)-NUM) 2,3,2
3     NUM=NUM-M
      GO TO 11
2     NUM=NUM-M
      DO 10 J=I,NUM
      L=J+M
      CALL IXJON(XXXX,IXXX,J,L)
      CALL DEPEND(JNDX,PNAME,KIND,J,I,L,M,0)
10    CONTINUE
11    CALL ESCON
      RETURN
      END
      SUBROUTINE INCOM(KT,J,NNN,NESC2)
      COMMON PNAME,PNOM,PMIN,PMAX,NI,NT,KIND,K,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,JNDX,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,JDUMMY,NIMI,NTMT,T,MHELP
       COMMON INPUT,IFN,I10T,I11T,IDUMMY,LIST
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),JNDX(99),K(99),NTN(9),T(8,10),NAME(30)
      DIMENSION LIST(260),LISTPAR(99),NODELIST(40)
      DIMENSION IDUMMY(179),JDUMMY(9),NIMI(99),NTMT(99),MHELP(20)
      EQUIVALENCE (PMAX(1),XXXX(1)),(K(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4)
C
1110  IF(NNN) 221,221,1111
1111  NODES=0
      LOHI=3
      ISET=2
      IHEAD=1
      IFILE=0
      IOPS=0
      NODET=0
      NPAR=0
C
C     SET UP NIMI AND NTMT WHICH CONTAIN THE SEQUENTIAL NODE NUMBERS
C
      DO 5100 I=1,LIMBS
      IF(NI(I)) 5001,5001,5002
5001  NIMI(I)=0
      GO TO 5010
5002  IF(NODES) 5003,5003,5004
5003   NODES=NODES+1
      NIMI(I)=NODES
      NODELIST(NODES)=NI(I)
      GO TO 5010
5004  IF(I-1) 6004,5003,6004
6004  DO 5006 II=1,I-1
      IJ=II
      IF(NI(I)-NI(II)) 5005,5007,5005
5005  IF(NI(I)-NT(II)) 5006,5008,5006
5006  CONTINUE
      GO TO 5003
5007  NIMI(I)=NIMI(IJ)
      GO TO 5010
5008  NIMI(I)=NTMT(IJ)
5010  IF(NT(I)) 5011,5011,5012
5011  NTMT(I)=0
      GO TO 5100
5012  IF(NODES) 5013,5013,5014
5013  NODES=NODES+1
      NTMT(I)=NODES
      NODELIST(NODES)=NT(I)
      GO TO 5100
5014  IF(I-1) 6014,5013,6014
6014  DO 5016 II=1,I-1
      IJ=II
      IF(NT(I)-NI(II)) 5015,5017,5015
5015  IF(NT(I)-NT(II)) 5016,5018,5016
5016  CONTINUE
      GO TO 5013
5017  NTMT(I)=NIMI(IJ)
      GO TO 5100
5018  NTMT(I)=NTMT(IJ)
5100  CONTINUE
C
C
13    CALL KOMMA(0)
14    CALL EDIT EMPTY
      CALL EDIT SAVE
      IF(NUMBER(X)) 20,16,15
15    IF(X) 1511,1511,1500
1500  NODET=NODET+1
      NODELIST(NODET)=X
      DO 151 KLM=1,LIMBS
      IF(NI(KLM)-NODELIST(NODET)) 152,155,152
152   IF(NT(KLM)-NODELIST(NODET)) 151,155,151
151   CONTINUE
1511  TYPE 153
153   FORMAT(/$** NODE ?$/)
      GO TO 221
155   CALL KOMMA(0)
      GO TO 14
16    IF(KT-1) 101,101,30
C
C
20    CALL EDIT RESTORE
      GO TO(21,21,23,24,26),KOMMAND(5,1)+2
21    TYPE 22
22    FORMAT(/$ ?$/)
221   J=-1
      RETURN
C
C
23    IHEAD=2
      GO TO 155
C
24    IF(KT-3) 21,25,21
25    IOPS=1
      GO TO 155
C
26    IFILE=1
      GO TO 155
C
30    TYPE 31
31    FORMAT($WITH RESPECT TO: $)
      IF(LINGET(INPUT,IFN,NESC2)) 32,32,33
32    IF(KT-4) 101,30,30
33    CALL SYNCHRO(LL,LIMBS,Z,MM)
      IF(LL) 21,21,34
34    NPAR=NPAR+1
      LISTPAR(NPAR)=LL
      IF(PMIN(LL)-PMAX(LL)) 35,36,35
36    TYPE 37,PNAME(LL)
37    FORMAT(/$**  $,A,$DOES NOT VARY$/)
      NPAR=NPAR-1
35    IF(NEXTCHR(0))  38,38,33
38    IF(NPAR) 381,381,101
381   TYPE 382
382   FORMAT(/$** NO VARYING PARAMETERS$/)
      GO TO 221
C
C
101   IF(NODET) 102,102,104
102   NODET=NODES
104   GO TO(105,105,105,900),KT
105   IF(NPAR) 106,106,900
106   NPAR=0
      DO 110 I=1,LIMBS
      IF(PMIN(I)-PMAX(I))107,110,107
107   NPAR=NPAR+1
      LISTPAR(NPAR)=I
110   CONTINUE
      IF(NPAR) 899,899,900
899   IF(ITYPE-1) 900,900,381
C
C
C
900   J=1
      IF(IOPS) 915,915,901
901   TYPE 902
902   FORMAT($HI: $)
      IF(LINGET(INPUT,IFN,NESC2)) 907,907,903
903   GO TO(21,21,907,904),KOMMAND(4,1)+2
904   LOHI=1
      TYPE 905
905   FORMAT($LOW: $)
      IF(LINGET(INPUT,IFN,NESC2)) 910,910,906
906   GO TO(21,21,910,908),KOMMAND(4,1)+2
908   LOHI=3
      GO TO 910
907   LOHI=2
910   TYPE 911
911   FORMAT($SETTINGS: $)
      IF(LINGET(INPUT,IFN,NESC2)) 914,914,912
912   GO TO(21,21,914,913),KOMMAND(4,1)+2
913   ISET=1
      GO TO 915
914   ISET=2
915   IF(IFILE) 997,997,916
916   TYPE 917
917   FORMAT($TO FILE: $)
      IF(LINGET(INPUT,IFN,NESC2)) 916,916,918
918   IF(FILE(NAME,-1,I10T,JJ,6HSYMOUT)) 916,916,919
997   NAME(1)=3HTEL
      NAME(2)=3HETY
      NAME(3)=3HPE
      GO TO 999
919    III=ABS(I10T)
       CLOSE(III)
999   IF(IHEAD-2) 1000,1001,1000
1000  IHEAD=1
1001  RETURN
      END
      SUBROUTINE SYNCHRO(J,NUM,PAR,M)
      COMMON PNAME,PNOM,PMIN,PMAX,NI,NT,KIND,K,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,JNDX,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,JDUMMY,NIMI,NTMT,T,MHELP
       COMMON INPUT,IFN,I10T,I11T,IDUMMY,LIST
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),JNDX(99),K(99),NTN(9),T(8,10),NAME(30)
      DIMENSION LIST(260),LISTPAR(99),NODELIST(40)
      DIMENSION IDUMMY(179),JDUMMY(9),NIMI(99),NTMT(99),MHELP(20)
      EQUIVALENCE (PMAX(1),XXXX(1)),(K(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4)
C
C      CHECKS OUT PARAMETER INPUTS
C
C      FOR PARAMETERS AFTER A COMMAND
C
C      IE LIST,DELETE,=,MODIFY
C
C
C      J RETURNS AS
C      -1  IF THE PARAMETER WASNT THERE
C      0    IF NO PARAMETER WAS INPUT
C      OR THE LINE NUMBER OF THE PARAMETER
C
C
C
C
C      NUM = LIMBS = NO OF PARAMETERS IN CIRCUIT
C      PAR = PARAMETER NAME
C      M   = DISTANCE TO BE MOVED
C      IND = 1 IF COMPARE = SAME
C            0 IF COMPARE = DIFF
C
C
      IF(NOWCHR(0)) 1,1,2
1      J=0
      RETURN
2      CALL EDIT EMPTY
      CALL EDIT SAVE
      IF(NUMBER(X)) 4,1,3
3     LL=X
      IF(LL) 10,10,31
31    IF(LL-NUM) 11,11,10
4     CALL EDIT RESTORE
      CALL PACKF(PAR,5,1)
      IF(NUM) 1,1,5
5     DO 9 I=1,NUM
      LL=I
      CALL COMPAR(PNAME(I),PAR,IND)
      IF(IND)9,9,11
9     CONTINUE
10    J=-1
      RETURN
11     GO TO(12,13,13,13,13,12,12,13,20,12,13,13,13,20,12),KIND(LL)
12    IF(LL+6-NUM) 125,125,13
125   CALL COMPAR(PNAME(LL),PNAME(LL+3),IND)
      IF(IND) 131,131,100
131   CALL COMPAR(PNAME(LL),PNAME(LL-3),IND)
      IF(IND) 13,13,100
13    IF(KIND(LL)-15) 14,20,14
14    J=LL
      GO TO (15,15,16,16,15,15,15,15,16,16,15,15,15,16,16),KIND(LL)
15     IF(K(LL)) 210,151,151
151   M=1
      GO TO 17
16    IF(K(LL+2)) 162,161,161
162   M=3
      RETURN
161   M=2
17    RETURN
C
C      HE HAS GIVEN SECOND PART OF TWO LINE PARAMETER
C
20    LL=LL-1
      M=2
      GO TO 200
210   LL=LL-2
      M=3
C
C
200   J=LL
      RETURN
C
C      TRANSISTOR
C
100   DO 101 JK=1,99
      II=JK
      CALL COMPAR(PNAME(JK),PNAME(LL),IND)
      IF(IND) 101,101,102
101   CONTINUE
102   M=9
      J=JK
      RETURN
      END
      SUBROUTINE DEPEND(JNDX,PNAME,KIND,J,I,L,M,NOT)
      DIMENSION JNDX(99),PNAME(99),KIND(99)
C       J=TO
C       L=FROM
C       I=FIRST LINE MOVING
C       M=DISTANCE TO BE MOVED
C       NOT=1 UP
C       NOT=0 DELETING
C       NOT=-1 DOWN
C
C
      IF(JNDX(L)-L) 3,1,3
1     JNDX(J)=J
2     RETURN
3     IF(JNDX(L)-I) 4,5,12
12    IF(NOT) 11,11,10
4     JNDX(J)=JNDX(L)
      GO TO 2
5     IF(NOT) 11,6,10
6     TYPE 7,PNAME(L)
7     FORMAT(/$THE DEPENDENCY OF $,A,$HAS BEEN DELETED$/)
      JNDX(J)=J
      IF(KIND(J)-8) 8,8,9
8     KIND(J)=6
      GO TO 2
9     KIND(J)=11
      GO TO 2
10    JNDX(J)=JNDX(L)+M
      GO TO 2
11    JNDX(J)=JNDX(L)-M
      RETURN
      END
      FUNCTION JUMBER(X,I)
      IF(NUMBER(X)) 4,1,2
1      JUMBER=0
      RETURN
2     IF(I) 3,3,5
3     IF(X) 4,4,10
4     JUMBER=-1
      RETURN
5     IF(X) 4,10,10
10    JUMBER=1
      RETURN
      END
      SUBROUTINE TRANSMOVE(OLDNM,NUM,T,LT,NTRANS)
      DIMENSION T(8,10)
      CALL ESCOFF
      NTRANS=NTRANS-1
      DO 1 JJJ=1,NUM
      III=JJJ
      CALL COMPAR(OLDNM,T(JJJ,1),IND)
      IF(IND) 1,1,2
1     CONTINUE
2     IF(LT) 6,3,3
3     DO15 JJK=1,10
      IF(LT) 5,8,5
5     T(III,JJK)=T(NUM+1,JJK)
      GO TO 15
8     IF(JJK-1)15,15,81
81    T(NUM+1,JJK)=T(III,JJK)
15    CONTINUE
      RETURN
6     DO 7 JJJ=III,NUM
      DO 7 JJK=1,10
7     T(JJJ,JJK)=T(JJJ+1,JJK)
      RETURN
      END
      SUBROUTINE IXJON(X,K,I,J)
      DIMENSION X(99,4),K(99,4)
C
C
C
C      X = XXXX = PAR NAME,NOM,MIN,MAX
C
C
C
      DO 1 L=1,4
      X(I,L)=X(J,L)
1     K(I,L)=K(J,L)
      RETURN
      END
      SUBROUTINE MINMAX(X,Y)
      IF(X-Y) 1,2,1
1     TYPE 3,X,Y
3     FORMAT(2(2X,1PE10.4))
2     RETURN
      END
      FUNCTION LINGET(INPUT,IFN,IESCAPE)
C
C    THIS FUNCTION GETS A NEW LINE OF INPUT, EITHER FROM THE USERS
C    TERMINAL OR FROM A FILE.  LINGET IS RETURNED AS THE NUMBER OF
C    CHARACTERS IN THE INPUT LINE OR -1 IF AN END OF FILE WAS
C    ENCOUNTERED.  THE ARGUMENT 'INPUT' DETERMINES HOW THE LINE IS TO
C    BE TAKEN IN.  IN FILE INPUT, 'IFN' IS THE FILE BEING READ
C
C     INPUT             MEANING
C    -------   -------------------------------------------------------
C       1       GET A NEW LINE FROM USER TERMINAL
C       2       SAME AS 1, BUT RESET ESCAPE TO 'IESCAPE' AFTER FIRST CHAR.
C       3       GET A NEW LINE FROM FILE IFN, BUT DON'T ECHO IT
C       4       SAME AS 3, BUT ECHO THE LINE
C
C    THE ARGUMENT 'IESCAPE' IS USED WHEN 'INPUT' IS 2.  CONTROL IS THEN
C    TRANSFERRED TO THE MAIN PROGRAM LOCATION DECLARED BY THE
C    ARGUMENT 'IESCAPE'.
C
C      GET A LINE OF INPUT
35    GO TO (100,200,300,400) INPUT
100   CALL ESCNEW(NCH,IESCAPE)
      GO TO 500
C
200   CALL ESC NEW(NCH,IESCAPE)
      GO TO 500
C
300   CALL READ FILE(NCH,IFN)
      GO TO 500
C
400   CALL ECHO FILE(NCH,IFN)
500   LINGET=NCH
C
C    SET SAVED POINTER POSITION TO FIRST CHARACTER IN INPUT LINE
      CALL EDIT SAVE
570   IF(NCH) 700,600,600
600   RETURN
C
700   INPUT=1
       CLOSE
      RETURN
      END
DC ** FICHE/FRAME BREAK *****
DCOV2
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
C      CONTROL PROGRAM FOR DC ANALYSIS
C
C
C      THE GENERAL IDEA OF THIS PROGRAM IS ,
C      THE CONTROL PROGRAM (CODED) ASSIGNS ALL VALUES TO THE
C      ARRAYS CONNECTED WITH THE PARAMETERS I.E PNOM PMIN,NI,IREF
C      ETC. AND SETS UP THE FLAGS ITYPE (TYPE OF ANALYSIS)
C      IHEAD (HEADINGS)   AND WORST CASE FLAGS ISET (SETTINGS)
C      LOHI( LOW OR/AND HIGH WORST CASE REQUIRED) AND FILLS
C      THE ARRAYS NODELIST (NODET OF THEM) , AND LISTPAR
C      (NPAR OF THEM) WHICH CONTAIN THE LIST OF TESTNODES AND
C      EITHER THE LIST OF ALL VARYING PARAMETERS OR SOME SUBSET
C      OF SAME. ALSO PASSES CONSTANTS SUCH AS THE NUMBER OF
C      NODES (NODES) AND THE NUMBER OF PARAMETERS (LIMBS)
C
C      THIS SUBPROGRAM ASSIGNS VALUES TO THE ARRAY P(LIMBS)
C      WHICH IN TURN IS PASSED TO CONTRL WHICH RETURNS WITH THE
C      ARRAY V(NODES) WHICH CONTAINS THE VOLTAGES OF ALL NODES
C      ASSUMING THE PARAMETER  VALUES P.
C
C
C
      CALL LDDONE
      CALL DCLESC(ESC)
      ASSIGN 900 TO ESC
        CALL ARM
      CALL SETESC
1      III=ABS(I11T)
      CALL AOPEN(III,NAME,6HSYMOUT)
C
C
C
C
C        INITIALIZE
C
C
      DO 5 I=1,NODES
5     TVAR(I)=0.0
      LAST=NODES+1
C
C
C
C
C      SET UP NET ARRAY
C
       CALL NETSET
C
      DO 10 I=1,LIMBS
10    P(I)=PNOM(I)
C
C      NOMINAL SOLUTION   (FOR ALL TYPES OF ANALYSIS)
C ====================================
C
      CALL CONTRL
      DO 51 I=1,NODES
51    VNOM(I)=V(I)
      GO TO (100,200,300,400,500,600),ITYPE
C
C      ONLY NOMINAL SOLUTION REQUIRED
C          ==================
C
100   GO TO(102,103),IHEAD
102   WRITE 2, 8102
103   DO 104 I=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(I),NEQU)
104   WRITE 2, 8104,NODELIST(I),V(NEQU)
      GO TO 900
C
C      INCREMENTAL PARAMETER VARIATION
C =====================================
C
200   STEPS=ISTEPS
      IPAR=LISTPAR(1)
      DINC=(PMAX(IPAR)-PMIN(IPAR))/STEPS
      P(IPAR)=PMIN(IPAR)-DINC
C
      DO 220 J=1,STEPS+1.0
      P(IPAR)=P(IPAR)+DINC
      CALL CONTRL
      GO TO(207,208),IHEAD
207   WRITE 2, 8102
      IHEAD=2
208   WRITE 2, 8208,PNAME(IPAR),P(IPAR)
C
C 
C      PRINT LOOP
C
      DO 210 I=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(I),NEQU)
210   WRITE 2, 8104, NODELIST(I),V(NEQU)
C
220   CONTINUE
      GO TO 900
C
C      STATISTICAL ANALYSIS
C ====================================
C
C
C      CALCULATE (V)  FOR MEAN +AND-  1/2 SIGMA
C
300   DO 320 J=1,NPAR
      IPAR=LISTPAR(J)
      P(IPAR)=(7*PMAX(IPAR)+5*PMIN(IPAR))/12.0
      CALL CONTRL
      DO 305 I=1,NODES
305   VMAX(I)=V(I)
      P(IPAR)=(5*PMAX(IPAR)+7*PMIN(IPAR))/12.0
      CALL CONTRL
C
      DO 310 I=1,NODES
310   TVAR(I)=TVAR(I)+(VMAX(I)-V(I))**2
      P(IPAR)=PNOM(IPAR)
C
320   CONTINUE
C
      GO TO(321,322),IHEAD
321   WRITE 2, 8321
      WRITE 2, 8322
C
C      CALCULATE (V)  FOR MEAN
C
322   DO 330 J=1,NPAR
      IPAR=LISTPAR(J)
330   P(IPAR)=(PMIN(IPAR)+PMAX(IPAR))/2.0
      CALL CONTRL
C
C      PRINT LOOP
C
      DO 340 K=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(K),NEQU)
      SIG=SQRT(TVAR(NEQU))
      V1=V(NEQU)-3*SIG
      V2=V(NEQU)+3*SIG
340   WRITE 2, 8340,NODELIST(K),SIG,V1,V(NEQU),V2,VNOM(NEQU)
      GO TO 900
C
C      DIFFERENTIAL ANALYSIS
C ======================================
C
C
C      CALCULATE (V)    FOR MEAN +AND-  1/2 SIGMA
C
400   GO TO(401,402),IHEAD
401   WRITE 2, 8401
      WRITE 2, 8322
402   DO 420 J=1,NPAR
      IPAR=LISTPAR(J)
      P(IPAR)=(7*PMAX(IPAR)+5*PMIN(IPAR))/12.0
      CALL CONTRL
      DO 405 I=1,NODES
405   VMAX(I)=V(I)
      P(IPAR)=(5*PMAX(IPAR)+7*PMIN(IPAR))/12.0
      CALL CONTRL
      P(IPAR)=PNOM(IPAR)
      SIG=(PMAX(IPAR)-PMIN(IPAR))/6.0
      WRITE 2, 8409,PNAME(IPAR),SIG
C
C      PRINT LOOP
C
      DO 415 K=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(K),NEQU)
      DEV=(VMAX(NEQU)-V(NEQU))
      DEL=DEV/SIG
      DEV=ABS(DEV)
415   WRITE 2, 8340,NODELIST(K),DEL,V(NEQU),VNOM(NEQU),VMAX(NEQU),DEV
C
420   CONTINUE
      GO TO 900
C
C      PARAMETER VARIATION
C ===================================
C
500   GO TO(501,502),IHEAD
501   WRITE 2, 8501
502   DO 520 J=1,NPAR
      IPAR=LISTPAR(J)
      P(IPAR)=PMAX(IPAR)
      CALL CONTRL
      DO 505 I=1,NODES
505   VMAX(I)=V(I)
      P(IPAR)=PMIN(IPAR)
      CALL CONTRL
      P(IPAR)=PNOM(IPAR)
      WRITE 2, 8510,PNAME(IPAR),PMIN(IPAR),PNOM(IPAR),PMAX(IPAR)
C
C      PRRINT LOOP
C
      DO 515 K=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(K),NEQU)
      DEL=(VMAX(NEQU)-V(NEQU))/(PMAX(IPAR)-PMIN(IPAR))
515   WRITE 2, 8515,NODELIST(K),DEL,V(NEQU),VNOM(NEQU),VMAX(NEQU)
C
520   CONTINUE
      GO TO 900
C
C      WORST CASE ANALYSIS
C ======================================
C
C
C
C      NSET MARKS THE PARAM. SETTING WHICH CAUSED A MIN/MAX REACTION AT NOODE
C
C    NSET=1  MIN=MIN ,MAX=MAX
C    NSET=2  MIN=MAX ,MAX=MIN
C    NSET=3  ALL=NOM
C    NSET=4  NOM=MIN ,MAX=MAX
C    NSET=5  NOM=MIN ,MIN=MAX
C    NSET=6  NOM=MAX ,MIN=MIN
C    NSET=7  NOM=MAX ,MAX=MIN
C
C
C
C
600   DO 800 K=1,NODET
      CALL SYMB(NIMI,NTMT,NT,NI,NODELIST(K),NEQU)
      DO 601 J=1,NPAR
      IPAR=LISTPAR(J)
      NSET(IPAR)=3
601   P(IPAR)=PNOM(IPAR)
C
C
603   DO 622 J=1,NPAR
      IPAR=LISTPAR(J)
      P(IPAR)=PMIN(IPAR)
      CALL CONTRL
      IF(V(NEQU)-VNOM(NEQU)) 604,607,605
C
C      MIN PRODUCED MIN
C
604   NSET(IPAR)=1
      GO TO 607
C
C      MIN PRODUCED MAX
C
605   NSET(IPAR)=2
C
607   P(IPAR)=PMAX(IPAR)
      CALL CONTRL
      IF(V(NEQU)-VNOM(NEQU)) 608,613,616
C
C----------------------------------------------------------------
C
C      MAX PRODUCES A MIN
C      --------------------
C
608   GO TO(609,621,612),NSET(IPAR)
C
C    MIN ALSO PRODUCED A MIN THEREFORE NOM PRODUCES A MAX
C
609   IF(V(NEQU)-VMIN(NEQU))611,610,610
C
C    MIN PRODUCED A MINIER MIN THAN MAX DID
C
610   NSET(IPAR)=6
      GO TO 621
C
C    AND MAX DID IN FACT PRODUCE THE MIN
C
611   NSET(IPAR)=7
      GO TO 621
C
C    MIN PRODUCED A NOM THEREFORE A MAX COMPARED TO MAX'S MIN
C
612   NSET(IPAR)=2
      GO TO 621
C
C-----------------------------------------------------------------
C
C      MAX PRODUCES A NOM
C     --------------------
C
613   GO TO (614,615,621),NSET(IPAR)
C
C     MIN PRODUCED A MIN
C
614   NSET(IPAR)=6
      GO TO 621
C
C     MIN PRODUCED A MAX
C
615   NSET(IPAR)=5
      GO TO 621
C
C-----------------------------------------------------------------
C
C      MAX PRODUCED A MAX
C      ---------------------
C
616   GO TO (621,617,620),NSET(IPAR)
C
C      MIN ALSO PRODUCED A MAX THEREFORE NOM PRODUCED A MIN
C
617   IF(V(NEQU)-VNOM(NEQU)) 618,619,619
C
C      MIN PRODUCED A MAXIER MAX THAN MAX'S MAX
C
618   NSET(IPAR)=5
      GO TO 621
C
C      AND MAX PRODUCED YER ACTUAL MAX
C
619   NSET(IPAR)=4
       GO TO 621
C
C      MIN PRODUCED A NOM
C
620   NSET(IPAR)=1
621   P(IPAR)=PNOM(IPAR)
622   CONTINUE
C
623   GO TO(700,624,624),LOHI
C
C      LOW EXTREME CASE
C ----------------------------
C
624   DO 650 J=1,NPAR
      IPAR=LISTPAR(J)
      GO TO(625,630,650,650,650,625,630),NSET(IPAR)
625   P(IPAR)=PMIN(IPAR)
      GO TO650
630   P(IPAR)=PMAX(IPAR)
650   CONTINUE
C
      CALL CONTRL
C
652   GO TO(660,670),ISET
C
C      SETTINGS (LOW)
C
660   GO TO(661,6661),IHEAD
661   WRITE 2, 8661
      GO TO 662
6661  WRITE 2,8662
662   DO 668 J=1,NPAR
      IPAR=LISTPAR(J)
      GO TO(663,664,975,665,665,663,664),NSET(IPAR)
663   MIF=3HMIN
      VAL=PMIN(IPAR)
      GO TO 666
664   MIF=3HMAX
      VAL=PMAX(IPAR)
      GO TO 666
665   MIF=3HNOM
      VAL=PNOM(IPAR)
666   WRITE 2, 8665, PNAME(IPAR),MIF,VAL
       GO TO 668
975    WRITE 2,9990,PNAME(IPAR)
668   CONTINUE
C
      WRITE 2,8668,NODELIST(K),V(NEQU)
      GO TO 674
C
670   GO TO (671,673),IHEAD
671   WRITE 2, 8671
C
C      WE DONT WANT ANY MORE HEADINGS IF WE DONT WANT SETTINGS
C
      IHEAD=2
673   WRITE 2, 8673,NODELIST(K),V(NEQU)
C
C
674   GO TO (700,800,700),LOHI
C
C      HIGH EXTREME CASE
C ----------- ---------------------
C
700   DO 710 J=1,NPAR
      IPAR=LISTPAR(J)
      P(IPAR)=PNOM(IPAR)
      GO TO (702,705,710,702,705,710,710),NSET(IPAR)
702   P(IPAR)=PMAX(IPAR)
      GO TO 710
705   P(IPAR)=PMIN(IPAR)
710   CONTINUE
C
      CALL CONTRL
C
712   GO TO(720,730),ISET
C
C      SETTINGS (HIGH)
C
720   GO TO(721,7721),IHEAD
721   WRITE 2, 8661
      GO TO 722
7721  WRITE 2,8662
C
722   DO 729 J=1,NPAR
      IPAR=LISTPAR(J)
      GO TO (723,725,970,723,725,726,726),NSET(IPAR)
723   MIF=3HMAX
      VAL=PMAX(IPAR)
      GO TO 727
725   MIF=3HMIN
      VAL=PMIN(IPAR)
      GO TO 727
726   MIF=3HNOM
      VAL =PNOM(IPAR)
727   WRITE 2, 8665, PNAME(IPAR),MIF,VAL
       GO TO 729
970    WRITE 2,9990,PNAME(IPAR)
729   CONTINUE
C
      WRITE 2,8729,NODELIST(K),V(NEQU)
      GO TO 800
C
730   GO TO(731,733),IHEAD
731   WRITE 2, 8671
      GO TO(733,732),ISET
C
C      WE DONT WANT ANY MORE HEADINGS IF WE DONT WANT SETTINGS
C
732   IHEAD=2
733   WRITE 2, 8733,NODELIST(K),V(NEQU)
C
800   CONTINUE
C
C
C
C
900     CALL ARM
       CLOSE (2)
      CALL TERMOV
C
C
C
8102  FORMAT(////$NODE   VOLTAGE$/$---- $,11($-$)/)
8104  FORMAT(/I3,2X,1PE11.4)
8208  FORMAT(//A5,$ (VALUE = $,1PE11.4,$)$)
8321  FORMAT(////$NODE    SIGMA     MEAN-3SIGMA    M E A N    $
+     ,$MEAN+3SIGMA    NOMINAL$/)
8322  FORMAT($---- $,11($-$),4(2X,11($-$))/)
8340  FORMAT(I3,5(2X,1PE11.4)/)
8401  FORMAT(////18X,$*$,7X,$N  O  D  E    V  O  L  T  A  G  E  S$,
+     7X,$*$//$NODE   PARTIAL     PARAMETER$,17X,$PARAMETER    $
+     ,$EXPECTED$/6X,$DERIVATIVE   DECREASED    PARAMETER    $,
+     $INCREASED    DEVIATION$/$REF.    DV/DP      1/2 SIGMA     $,
+     $NOMINAL     1/2 SIGMA  (SIGMA*DV/DP)$/)
8409  FORMAT(/A5,$(SIGMA= $,1PE11.4,$)$/)
8501  FORMAT(////17X,$*  N  O  D  E    V  O  L  T  A  G  E  S  *$//
+     $NODE DEL V/DEL P  AT PARAM MIN  AT PARAM NOM  AT PARAM MAX$/
+     $---- $,11($-$),1X,3(1X,13($-$))/)
8510  FORMAT(/1X,A5,11X,3(1X,$($,1PE11.4,$)$)/)
8515  FORMAT(I3,2X,1PE11.4,3(3X,1PE11.4)/)
8661  FORMAT(/////$PARAM SET    VALUE$/$----- --- $,11($-$)//)
8662  FORMAT(/////)
8665  FORMAT(1X,A5,A3,1X,1PE11.4/)
8668  FORMAT(//$NODE$,I3,$ LOW WORST CASE VOLTAGE =$,1PE11.4/)
8671  FORMAT(//$NODE  WORST CASE VOLTAGE$/$---- $,19($-$)/)
8673  FORMAT(/I3,2X,1PE11.4,2X,$(LOW)$/)
8729  FORMAT(//$NODE$,I3,$ HIGH WORST CASE VOLTAGE =$,1PE11.4/)
8733  FORMAT(/I3,2X,1PE11.4,2X,$(HIGH)$/)
9990   FORMAT(1X,A5,1X,$-$,3X,$INDEPENDENT OF PARAMETER$/)
C
C
      END
      SUBROUTINE CONTRL
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
      DIMENSION ZIT(40)
C
C
      ITR8=0
C
C
      DO 5 I=1,NODES
      ZIT(I)=0.0
5     V(I)=0.0
      DO 7 I=1,20
      DO 7 J=1,2
7     X(I,J)=0.0
10    CALL MTRXDC
      CALL SOLVE
C
      DO 35I=1,NODES
35    V(I)=Y(I,LAST)
C
      IF(NDIODE) 71,900,71
71    DO 100 I=1,NODES
      DIF=(ABS(V(I)-ZIT(I)))*1E6-ABS(V(I))
      IF(DIF) 100,100,120
100   CONTINUE
102    DO 101 I =1,NDIODE
       DJF=(ABS(X(I,1)-X(I,2))*10-ABS(X(I,1)))
       IF(DJF) 101,101,120
101    CONTINUE
      IF(ITR8-3)120,900,900
C
C
120   DO 130 I=1,NODES
130   ZIT(I)=V(I)
       DO 131 I=1,NDIODE
131    X(I,2)=X(I,1)
      GO TO 10
C
C
900   RETURN
      END
      SUBROUTINE SOLVE
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
C     GAUSS-JORDAN METHOD WITH PIVOTAL CONDENSATION AND ELEMENT CHECK. 
      L=LAST
      I=1
1     IF(NODES - I) 14, 2, 2
2     J=I 
      R=Y(J, J)
      S=R
20    D=ABS(S) 
      M=I  
11    I=I + 1  
      IF(I - NODES) 15, 15, 18
18    IF(M - J) 18, 19, 16
16    K=LAST
17    R=Y(M, K)  
      Y(M, K)=Y(J, K)  
      Y(J, K)=R
      K=K - 1  
      IF(K - J) 3, 17, 17  
19    IF(R) 3, 12, 3 
3     I=J + 1  
4     D=Y(J, L) 
      IF(D) 23, 24, 23  
23    Y(J, L)=D/R 
24    L=L - 1  
      IF(L - I) 5, 4, 4 
5     L=1 
6     IF(L - J)7,10,7
7     R=Y(L, J) 
      IF(R) 8, 10, 8 
8     K=J 
9     K=K + 1
      D= Y(J, K)  
      IF(D) 21, 22, 21  
21    Y(L, K)=Y(L, K) - D*R
22    IF(K - NODES) 9, 9, 10  
10    L=L + 1  
      IF(L - NODES) 6, 6, 1
12    ASSIGN 9960 TO V1
      CALL SYMB(NI,NT,NTMT,NIMI,J,NEQU)
      CALL ERROR(J)
C
C
9960  FORMAT($CHECK PARAMETERS AT NODE,$,I3/)
C
14    RETURN
15    S=Y(I, J)
      IF(ABS(S) - D) 11, 11, 20  
      END
      SUBROUTINE ERROR(KERROR)
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
      WRITE 2,10
10    FORMAT(/$*** ERROR *** , $)
      WRITE 2,V1,KERROR
C
C     AND NOW GO TO CODED DO NOT PASS DCMAIN DO NOT COLLECT ANY MORE
C      CPU TIME.
C
       CLOSE
      CALL TERMOV
C
C
C
      END
      SUBROUTINE MTRXDC
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
C
C
C
      DO 5 I=1,NODES
      DO 5 J=1,LAST
5      Y(I,J)=0.0
      NDIODE=0
      NVS=0
      NDVOLT=99
C
C      IF FIRST TIME THRU THEN SKIP THE DIODE LOOP
C
C
      IF(ITR8) 6,6,2001
C
C
2001  DO 400  K=1,LIMBS
      IF(KIND(K)-15) 400,201,400
C
C      THERMAL VOLTAGE LINE NUMBER=K
C
201   NDIODE=NDIODE+1
      IDIODE(NDIODE)=K
      XY=X(NDIODE,1)
      IF(NI(K)*NT(K)) 210,220,210
C
210   J=NT(K)
      I=NI(K)
      D=V(I)-V(J)
      GO TO 250
C
220   J=0
      I=NI(K)+NT(K)
      IF(NI(K))225,225,230
C
225   D=-V(I)
      GO TO 250
C
230   D=V(I)
C
C
250   IF(KXXX(K+1)) 2502,2501,2501
2502  IF(XY-3.149628876) 2512,2503,2512
2512  IF(P(K+1)+D) 2503,2501,2501
2503  NET(NDVOLT)=K+1
      NDVOLT=NDVOLT-1
      X(NDIODE,1)=3.149628876
      GO TO 400
2501  IF(D) 251,2500,252
2500  X(NDIODE,1)=P(K-1)/P(K)
      GO TO 254
C
251   V3=D
      C3=P(K-1)*(EXP(V3/P(K))-1)
      X(NDIODE,1)=C3/D
252   CURRENT=XY*D
      IF(D) 253,253,2521
2521    V3=P(K)*(ALOG(CURRENT/P(K-1)+1))
      C3=CURRENT
      X(NDIODE,1)=CURRENT/V3
253   I8=ITR8/(NDIT+1)
      IF((NDIT+1)*I8-ITR8) 2542,2543,2542
2542  CURI(NDIODE)=CURRENT
      VOLI(NDIODE)=D
      GO TO 254
2543  KTR8=1
       DENC=CURRENT-CURI(NDIODE)
       DEND=ABS(DENC/CURRENT)
       IF(DEND-1E-10)254,254,2560
2560  E=(CURRENT*VOLI(NDIODE)-CURI(NDIODE)*D)/DENC
      RL=-(D-VOLI(NDIODE))/DENC
      IF(RL) 2532,2532,2546
2532   IF(D)2533,254,254
2533  V4=D
      GO TO 2557
2546  KTR8=KTR8+1
      IF(D) 2548,2548,2547
2547  FUDGE=-V3/P(K)
      IF(FUDGE-175) 2553,2553,2554
2554  FUDGE=175
2553  EX=P(K)*EXP(FUDGE)
      C2=(E-V3+P(K)-EX)/(RL+EX/P(K-1))
      FUDGE=C2/P(K-1)+1
      IF(FUDGE)2601,2601,2602
2601  FUDGE=1E-25
2602  V4=P(K)*ALOG(FUDGE)
      GO TO 2549
2548  FUDGE=V3/P(K)
      IF(FUDGE-175) 2555,2555,2556
2556  FUDGE=175
2555  EX=P(K-1)*EXP(FUDGE)
      V4=(E/RL+P(K-1)+EX*(V3/P(K)-1))/(EX/P(K)+1./RL)
2557  FUDGE=V4/P(K)
      IF(FUDGE-175)2550,2550,2552
2552  FUDGE=175
2550  C2=P(K-1)*(EXP(FUDGE)-1)
      VDIF=ABS(C3-C2)*1E6-ABS(C2)
      GO TO 2540
2549  VDIF=ABS(V4-V3)*1E6-ABS(V4)
2540  IF(VDIF) 2544,2544,2545
2545  V3=V4
      C3=C2
      IF(RL) 2544,2544,2551
2551  IF(KTR8-100) 2546,2544,2544
2544  X(NDIODE,1)=C2/V4
254   R=X(NDIODE,1)
C
C
361   Y(I,I)=Y(I,I)+R
      IF(J) 351,400,351
351   Y(J,J)=Y(J,J)+R
      Y(I,J)=Y(I,J)-R
      Y(J,I)=Y(J,I)-R
C
C
400   CONTINUE
C
C
6     DO 200 K=1,LIMBS
      KERROR=K
10    D=P(K)
      IF(NI(K)*NT(K)) 15,12,15
12    I=NI(K)+NT(K)
      J=0
      GO TO 20
15    I=NI(K)
      J=NT(K)
20    GO TO(25,30,60,199,200,60,70,70,200,200,199,199,199,200, 21),KIND(K)
C
C      COUNT NO. OF DIODES
C
21    D=P(K-1)/P(K)
C
C      IF FIRST ITERATION , LET INITIAL GUESS BE D IE  IS/VT
C
      IF(ITR8)200,22,200
22    NDIODE=NDIODE+1
       X(NDIODE,1)=D
      GO TO 30
C
C      RESISTANCE AND CONDUCTANCE
C
25  IF(KXXX(K)) 200,26,26
26    D=1.0/D
30    Y(I,I)=Y(I,I)+D
      IF(J) 32,200,32
32    Y(J,J)=Y(J,J)+D
      Y(I,J)=Y(I,J)-D
      Y(J,I)=Y(J,I)-D
      GO TO 200
C      CONSTANT CURRENT SOURCE
C
60     IF(KIND(K)-3)65,66,65
66     D=0.
65    IF(NI(K)) 61,64,61
61    Y(I,LAST)=Y(I,LAST)-D
62    IF(NT(K)) 63,200,63
63    Y(J,LAST)=Y(J,LAST)+D
      GO TO 200
64    Y(I,LAST)=Y(I,LAST)+D
      GO TO 200
C
C      
DEPENDENT CURRENT SOURCES
C      -------------------------
C
70    L=K
71    M=0
      IF(KIND(L)-8)75,76,76
75    GO TO(81,82,802,802,802,97,100,100,802,110,802,802,802,802,802),KIND(IREF(L))
76    GO TO(83,83,802,83,802,83,83,83,83,83,83,83,83,83,83),KIND(IREF(L))
C
C      RESISTANCE AND CONDUCTANCE (ET AL FOR VOLTAGE DEPENDENCY)
C
81    D=-D/P(IREF(L))
      GO TO 84
82    D=-D*P(IREF(L))
      GO TO 84
83    D=-D
84    L=IREF(L)
      IF(J) 8811,8810,8811
8811  D=-D
      GO TO 8888
8810  IF(NT(K))8888,8811,8888
C
8888  IF(NI(K)) 85,90,85
85    IF(NI(L)) 86,87,86
86    Y(I,NI(L))=Y(I,NI(L))+D
87    IF(NT(L)) 88,90,88
88    Y(I,NT(L))=Y(I,NT(L))-D
90    IF(NT(K)) 91,200,91
91    IF(M-1) 92,200,200
92    M=1
      IF(J) 93,85,93
93    D=-D
      I=J
      GO TO 85
C
C      CONSTANT CURRENT SOURCE (CURRENT DEPENDENCY ONLY)
C
97    L=IREF(L)
      D=-D*P(L)
      GO TO 60
C
C      OTHER 
DEPENDENT CURRENT SOURCES (CURRENT DEPENDENCY ONLY)
C
100   L=IREF(L)
      D=D*P(L)
      GO TO 71
C
C
C    
DEPENDENT ON DIODE SATURATION CURRENT.
C
C
C      FIND WHICH DIODE FROM IDIODE
C
110   IF(ITR8) 115,115,120
C
C      INITIAL GUESS
CC
115   D=-D*(P(IREF(L))/P(IREF(IREF(L))))
      GO TO 160
120   DO 150 KL=1,NDIODE
      IF(IREF(L)+1-IDIODE(KL)) 150,130,150
130   D=-D*X(KL,1)
160   MI=NI(IREF(K))
      MT=NT(IREF(K))
      IF(NI(K))169,168,169
168   D=-D
169   D=-D
1691  IF(MI*I) 161,162,161
161   Y(I,MI)=Y(I,MI)+D
      IF(MT)162,163,162
162   Y(I,MT)=Y(I,MT)-D
163   IF(J) 164,200,164
164   IF(MI) 165,166,165
165   Y(J,MI)=Y(J,MI)-D
166   IF(MT) 167,200,167
167   Y(J,MT)=Y(J,MT)+D
      GO TO 200
150   CONTINUE
199   NVS=NVS+1
200   CONTINUE
       NDIT=NDIODE
C
C
C
C
C
C        SECOND PASS ======= VOLTAGE SOURCES
C      ========================================
C
C
C
C
501   IF(NDIODE-20) 1501,1501,803
1501  IF(NVS+99-NDVOLT) 502,900,502
C
C
C
502   DO 800 N=1,(NVS+99-NDVOLT)
      IF(N-NVS) 503,503,504
503   KK=NET(N)
      K=ABS(KK)
      KERROR=K
      IF(KK) 510,505,505
C
504   K=NET(99-(N-1-NVS))
      GO TO 510
C
C
C     VOLTAGE SOURCES
C
505   J=NI(K)
      I=NT(K)
       IF(KIND(K)-4)506,507,506
507    D=0.
       GO TO 520
506   D=-P(K)
      GO TO 520
510    IF(KIND(K)-4)508,509,508
509    D=0.
       GO TO 513
508   D=P(K)
513   IF(NI(K)*NT(K)) 511,512,511
511   I=NI(K)
      J=NT(K)
      GO TO 520
512   I=NI(K)+NT(K)
      J=0
520   IF(J) 522,526,522
522   DO 524 L=1,LAST
524   Y(J,L)=Y(J,L)+Y(I,L)
526   DO 528 L=1,LAST
528   Y(I,L)=0.0
      Y(I,I)=1.0
      IF(10*ITR8+ITYPE-6) 532,530,532
C
C      WORST CASE AND FIRST ITERATION SET UP ARRAY ISTATIC
C
530   IF(IREF(K)-K) 532,531,532
531   ISTATIC(I,1)=1
      ISTATIC(I,2)=K
C
C
532   IF(J) 534,536,534
534   Y(I,J)=-1.0
536   IF(KXXX(K)) 538,5361,5361
5361  GO TO(800,800,800,538,800,800,800,800,800,800,538,570,570,800,800)KIND(K)
538   IF(J)540,541,540
540   D=-D

      GO TO 542
541   IF(NI(K)) 540,542,540
542   Y(I,LAST)=D
      GO TO 800
C
C
C
C      
DEPENDENT VOLTAGE SOURCES
C
C
570   L=K
      IF(NI(K)) 573,572,573
572   D=-D
573   M=0
571   IF(KIND(L)-13) 575,576,575
575   GO TO(581,582,802,802,802,597,610,610,802,802,802,802,802,802,802),KIND(IREF(L))
576   GO TO(584,584,802,584,802,583,583,583,583,583,583,583,583,583,583),KIND(IREF(L))
C
C
C      RESISTANCE AND CONDUCTANCE (ET AL FOR VOLTAGE DEPENDENCY)
C
581   D=-D/P(IREF(L))
      GO TO 583
582   D=-D*P(IREF(L))
583   D=-D
584   L=IREF(L)
585   IF(NI(L)) 586,587,586
586   Y(I,NI(L))=Y(I,NI(L))+D
587   IF(NT(L)) 588,800,588
588   Y(I,NT(L))=Y(I,NT(L))-D
      GO TO 800
C
C      CONSTANT CURRENT SOURCE (CURRENT DEPENDENCY ONLY)
C
597   L=IREF(L)
      D=D*P(L)
598   Y(I,LAST)=Y(I,LAST)+D
      IF(J) 800,800,599
599   Y(J,LAST)=Y(J,LAST)-D
      GO TO 800
C
C      
DEPENDENT CURRENT SOURCES  (CURRENT DEPENDENCY ONLY)
C
610   L=IREF(L)
      D=D*P(L)
      GO TO 571
C
C
C
800   CONTINUE
C
C
      GO TO 900
C
C
C
C
C
C
C
801   ASSIGN 9920 TO V1
      CALL ERROR(KERROR)
802   ASSIGN 9930 TO V1
      CALL ERROR(KERROR)
803   KERR0R=NDIODE
      ASSIGN 9940 TO V1
      CALL ERROR (KERROR)
C
C
900   ITR8=ITR8+1
      JTR8=JTR8+1
      KJ8=JTR8/5
      IF(JTR8-KJ8*5) 911,912,911
912   KJ8=6684672
      TYPE 913 ,KJ8
913   FORMAT(A1)
C
911   IF(ITR8-400) 999,908,908
908   TYPE 9990
       CLOSE
       CALL TERMOV
C
C
C
C
C
C
C
999   RETURN
C
C
9920  FORMAT($GROUNDED INDUCTANCE PROHIBITED.....NO.$,I2/)
9930  FORMAT($DEPENDENCY ON PROHIBITED PARAMETER...NO.$,I2/)
9990  FORMAT(/$ CIRCUIT NONCONVERGING , CALL LOCAL TYMSHARE REPRESENTATIVE $/)

9940   FORMAT(I2,$ DIODES , LIMIT= 20$/)
C
C
      END
      SUBROUTINE NETSET
      COMMON PNAME,PNOM,PMIN,PMAX,NIMI,NTMT,KIND,KXXX,FLAG,IHEAD,ISET,LIMBS
      COMMON NODES,NODET,LOHI,KFLAG,NPAR,ITYPE,NTN,IREF,LISTPAR
      COMMON NODELIST,NAME,ISTEPS,STEPS,V1,V2,ITR8,LAST,MIF,NI,NT
       COMMON T,IDIODE,INPUT,IFN,I10T,I11T,IDUMMY
      COMMON NET,FACTOR,NDIODE,VNOM,V,NSET,Y,P,VMAX,TVAR,X,JTR8,CURI,VOLI
      DIMENSION PNAME(99),PNOM(99),PMIN(99),PMAX(99),NI(99),NT(99)
      DIMENSION KIND(99),IREF(99),KXXX(99),NTN(9),NAME(30)
      EQUIVALENCE(P(2),INODE(1)),(P(52),NOW(1)),(Y(1),NZIP(1))
      DIMENSION NOW(99),NZIP(99),INODE(99)
      DIMENSION LISTPAR(99),NODELIST(40),NTMT(99),NIMI(99),CURI(20),VOLI(20)
      DIMENSION IDUMMY(179)
C
      EQUIVALENCE (PMAX(1),XXXX(1)),(KXXX(1),IXXX(1))
      DIMENSION XXXX(99,4),IXXX(99,4),T(80)
      DIMENSION NET(99),NSET(99),P(99),Y(40,41),X(20,2)
      DIMENSION IDIODE(20),VNOM(40),V(40),VMAX(40),TVAR(40)
      DIMENSION ISTATIC(40,2),VMIN(40)
      EQUIVALENCE (VMAX(1),VMIN(1)),(TVAR(1),ISTATIC(2))
C
C
      NVS=0
      DO 5 I=1,LIMBS
       GO TO (4,4,4,3,4,4,4,4,4,4,3,3,3,4,4),KIND(I)
3     NVS=NVS+1
      NOW(NVS)=I
4     INODE(I)=0
5     NZIP(I)=1
C
C
      KVS=NVS
C
C
      DO 100 I=1,NVS
      IVS=NOW(I)
      IF(NI(IVS)*NT(IVS)) 100,10,100
10    NET(KVS)=-IVS
      KVS=KVS-1
      NZIP(IVS)=0
      INODE(IVS)=NI(IVS)+NT(IVS)
      CALL CONNECT(IVS,INODE,NI,NT,KVS,NVS,NET,NZIP,I,V1,NOW)
100   CONTINUE
C
C
C
101   DO 200 I=1,NVS
      IVS=NOW(I)
      IF(NZIP(IVS)) 110,200,200
110   CALL CONNECT(IVS,INODE,NI,NT,KVS,NVS,NET,NZIP,I,V1,NOW)
      NZIP(IVS)=0
200   CONTINUE
C
C
      DO 250 I=1,LIMBS
      IF(NZIP(I)) 101,250,250
250   CONTINUE
C
C
C
      DO 300 I=1,NVS
      NTEND=0
      NIEND=0
      IVS=NOW(I)
      IF(NZIP(IVS)) 300,300,260
260   DO 270 J=1,NVS
      IF(I-J) 261,270,261
261   JVS=NOW(J)
      IF(NI(IVS)-NI(JVS)) 262,263,262
262   IF(NI(IVS)-NT(JVS)) 264,263,264
263   NIEND=1
      GO TO 270
264   IF(NT(IVS)-NI(JVS)) 265,266,265
265   IF(NT(IVS)-NT(JVS)) 270,266,270
266   NTEND=1
270   CONTINUE
      IF(NTEND+NIEND-1) 274,275,300
274   NZIP(IVS)=0
      NET(KVS)=-IVS
      KVS=KVS-1
      GO TO 300
275   NZIP(IVS)=-1
      NET(KVS)=-IVS
      KVS=KVS-1
      IF(NIEND) 277,277,276
276   INODE(IVS)=NI(IVS)
      GO TO 101
277   INODE(IVS)=NT(IVS)
      GO TO 101
300   CONTINUE
C
C
C
      RETURN
C
C
C
      END
      SUBROUTINE CONNECT(IVS,INODE,NI,NT,KVS,NVS,NET,NZIP,I,V1,NOW)
      DIMENSION NI(99),NT(99),INODE(99),NET(99),NZIP(99),NOW(99)
C
C
      DO 50 J=1,NVS
      IF(I-J) 15,50,15
15    JVS=NOW(J)
      IF(INODE(IVS)-NI(JVS)) 20,16,20
16    NET(KVS)=JVS
      KVS=KVS-1
      INODE(JVS)=NT(JVS)
      GO TO 25
20    IF(INODE(IVS)-NT(JVS)) 50,21,50
21    NET(KVS)=-JVS
      KVS=KVS-1
      INODE(JVS)=NI(JVS)
25    IF(NZIP(JVS)) 28,28,26
26    NZIP(JVS)=-1
      GO TO 50
28    ASSIGN 9950 TO V1
      CALL SYMB(NI,NT,NTMT,NIMI,INODE(IVS),NEQU)
      CALL ERROR (INODE(IVS))
50    CONTINUE
C
9950  FORMAT($VOLTAGE SOURCE LOOP AT NODE,$,I3/)
C
      RETURN
      END
      SUBROUTINE SYMB(I,L,M,J,NODE,LL)
      DIMENSION I(99),J(99),L(99),M(99)
      DO 100 K=1,99
      KK=K
      IF(I(K)-NODE) 99,101,99
99    IF(L(K)-NODE) 100,102,100
100   CONTINUE
101   LL=J(KK)
      GO TO 900
102   LL=M(KK)
900   RETURN
      END
   sYnr