


                      TYMBASIC USER FUNCTION LIBRARY



                               15 March 1978


                              TYMSHARE, INC.
                            Technical Division



                             TABLE OF CONTENTS




                Introduction                                2
                    Use of User Library Functions           2
                    Tymshare Support of Library Functions   3


                Terminal I/O                                4
                    Block I/O                               5


                Interfacing with PERFORM                    7


                Running Another Program                     9


                Job, User, and System Information           12




                Dates                                       20


                File I/O                                    23
                    Scanning a File Directory               25


                Array Operations                            40


                Half-Word Manipulation                      41


                Extended Escape Control                     44


                FORTRAN string conversion                   48


                Fast Sorter                                 52


                INDEX                                       53
     TYMBASIC User Function Library                                  Page 2


    Introduction    ____________


        The functions described here (also referred to as "procedures") are
        available for use in any TYMBASIC program, and are intended to
        provide interfaces to some of the Tymcom-X operating system
        features and to supplement the built-in TYMBASIC features and
        library functions.

    Use of User Library Functions    ___ __ ____ _______ _________

        The functions are accessed in the same manner as a user-defined
        procedure in TYMBASIC.  First, the TYMBASIC module that contains
        the call to the function must contain a statement of the form:

             DEF EXTERNAL FUNCTION.NAME(ARGS)

        In some cases, a keyword identifying the language type (i.e.,
        "SIMPL") must be inserted to provide the correct interface to the
        given function;  appearance of this keyword does not otherwise
        affect the use or the behavior of the function.  If the function
        returns a value, then a keyword identifying the type (i.e.,
        INTEGER) must also be present.

        In some other cases, an "AKA" clause must appear because the actual
        name of the function contains characters which are illegal as
        identifiers in TYMBASIC.  Many of the functions contain such
        characters to prevent conflicts with the names of user-defined
        procedures.

        The DEF statement may appear even if the function is not actually
        called in the TYMBASIC module.  This allows the user to maintain a
        list of DEF's that make up a standard part of his TYMBASIC module.
        The function will only be loaded into core from the function
        library if referenced by a call (that is, by the CALL statement or
        by reference to the function from within an expression).

        The exact form of the required DEF will be given with each
        function.
     TYMBASIC User Function Library                                  Page 3


        Tymshare Support of Library Functions        ________ _______ __ _______ _________

        User library functions fall into two categories:  those supported
        by Tymshare and those not supported.  If functions in the latter
        category are used, the following TYMBASIC command must be issued
        prior to loading (see the TYMBASIC Reference Manual):

            >LIBRARY (TBATLIB)TLIB

        The category of support will be given with each function.
     TYMBASIC User Function Library                                  Page 4
       Terminal I/O                                              26 May 1977


        SET.EC                                   SUPPORTED
        ------                            Beginning with Ver 2.5

        Form of DEF:

            DEF EXTERNAL SET.EC(LOGICAL L)

        Arguments:

            L is TRUE to set ECHO on and FALSE to set it off.

        Results:

            Sets the TYMBASIC ECHOing on or off for the current command
            source and all subsequent command sources (in the case of
            command file stacking).

            SET.EC has exactly the same effect as the ECHO and NO ECHO
            TYMBASIC commands, which are not available within a TYMBASIC
            program.

        Use:

            SET.EC is useful in writing applications where command files
            will be opened and ECHOing may be desired.
     TYMBASIC User Function Library                                  Page 5
       Terminal I/O                                              26 May 1977


        STUFIB                               NOT SUPPORTED
        ------

        Form of DEF:

            DEF EXTERNAL SIMPL STUFIB(STRING S)

        Arguments:

            S is a string containing the characters to be inserted into the
            job's input buffer.  It must contain any carriage returns
            desired;  TYMBASIC will not provide a terminating carriage
            return.

        Results:

            Inserts the characters contained in S into the current job's
            terminal input buffer.  There is no guarantee that all
            characters will be inserted -- this depends on the size
            assigned to the input buffer by the operating system, and on
            the number of characters already in the buffer.  The characters
            inserted may be mixed arbitrarily with characters arriving from
            the user's terminal if the user's typing coincides with this
            call.

        Use:

            STUFIB is useful as a means of inter-program communication when
            short command strings can be used.
     TYMBASIC User Function Library                                  Page 6
       Terminal I/O                                              26 May 1977


        Block Output to the Terminal        _____ ______ __ ___ ________

        Overview

        Using block output instead of the normal method can reduce the
        terminal output component of the cost by 35-40%, when driving a 30
        CPS terminal.  Since there is a charge for the time the program
        spends in block output mode, slower terminals will cost more and
        faster ones cost less.  It is not cost-effective to use block
        output for small bursts of output;  each output operation is
        charged for a minimum of 80 characters.  A conservative way to
        proceed is to bracket any portion of the program that runs
        terminal-bound with calls to BEGIN.BLOCK.OUT and END.BLOCK.OUT.

        BEGIN.BLOCK.OUT                            SUPPORTED
        ---------------                   Beginning with Ver 2.4

        Form of DEF

            DEF LOGICAL EXTERNAL SIMPL BEGIN.BLOCK.OUT AKA ".BBO"

        Arguments:

            None.

        Results:

            Returns TRUE if the terminal was put into block output mode.
            If TRUE, characters currently buffered for output and all
            further terminal-directed output will be transmitted by blocks,
            until END.BLOCK.OUT is called.  Characters will be transmitted
            when the block (400 characters long) is full, rather than when
            a carriage return is output.  Of course, requests for input,
            execution of a WAIT -1 statement, and end of program cause the
            buffered characters to be transmitted just as for normal
            terminal output.
     TYMBASIC User Function Library                                  Page 7
       Terminal I/O                                              26 May 1977


        END.BLOCK.OUT                        SUPPORTED
        -------------                      Beginning with Ver 2.4

        Form of DEF:

            DEF EXTERNAL SIMPL END.BLOCK.OUT AKA ".EBO"

        Arguments:

            None.

        Results:

            If the output buffer is not empty, ship it.  Terminate block
            output.
     TYMBASIC User Function Library                                  Page 8
        Interfacing with PERFORM                                 13 May 1977


        ST.PER                            NOT SUPPORTED        ______


        Form of DEF:

            DEF LOGICAL EXTERNAL ST.PER

        Arguments:

            None.

        Results:

            If a PERFORM command file is active, ST.PER opens it as the
            TYMBASIC commmand file, positions to the next character to be
            input, and returns TRUE.  Otherwise, ST.PER returns FALSE.

        Use:

            It is safe to always call ST.PER at the beginning of the
            program, since it takes no action if it finds no active PERFORM
            command file.  ST.PER should be used in conjunction with
            EXITPE, discussed below.

            Note that when a TYMBASIC command file is open, normal terminal
            input is taken from the command file.
     TYMBASIC User Function Library                                  Page 9
        Interfacing with Perform                                 13 May 1977


        EXITPE                            NOT SUPPORTED        ______

        Form of DEF:

            DEF EXTERNAL EXITPE

        Arguments:

            None.

        Results:

            If a TYMBASIC command file is open, EXITPE writes its current
            cursor position out to the PERFORM cursor file and runs
            PERFORM;  otherwise, it deletes the PERFORM command file, if
            any, and returns to XEXEC.

        Use:

            EXITPE should be called only if ST.PER was called earlier in
            the program.

            EXITPE deletes the PERFORM command file if no TYMBASIC command
            file is open because it assumes that all the characters have
            been read out of the command file and that TYMBASIC
            automatically closed the file.

            If the user wishes to merely exit to PERFORM without having
            made use of the PERFORM command file, he can use the RUNUUO
            function on "(SYS)PERFORM" with a starting offset of 1.

            EXITPE never returns.

            Also, command files may not be nested beyond the PERFORM
            command file at the time of the call.
     TYMBASIC User Function Library                                 Page 10
        Running Another Program                                  13 May 1977


        RUNUUO                              SUPPORTED
        ------                            Beginning with ver 2.3

        Form of DEF:                            

            DEF EXTERNAL SIMPL RUNUUO (STRING S, INTEGER I)

        Arguments:

            S is the file nomen (see the TYMBASIC Reference Manual) of the
            program to run.

            I is the offset from the startpoint in words at which the
            program is to be started.

        Results:

            RUNUUO runs the specified program at the given startpoint
            (limited to 1 if the user may not read the high segment about
            to be run, else limited to 77B).  If the file nomen specified
            by S is illegal, a FILE error condition results on file unit
            number -9.  If the run fails for any other reason, RUNUUO
            returns;  however, all IO channels and various other attributes
            of the program will have been deactivated by the Monitor.
            Therefore, the program should severly limit its actions
            following an error return from RUNUUO.

        Use:

            The startpoint offset is normally zero or one, the latter
            usually indicating that the RUN has been executed from another
            program (as apposed to the user at the terminal), and that its
            initial input or state vector may be found in a special command
            file (start-up information is also sometimes passed in the
            registers;  see ST.REG, below).  Many TYMCOM-X utilities (PIP,
            CROSS, all the compilers) use this convention, and all programs
            created with the SAVE BINARY command in TYMBASIC may be run
            with an offset of zero or one.  However, not all programs can
            be run with an offset of one.

            A TYMBASIC program can examine the offset it was run with by
            looking at the special variable START.POINT.

            The standard convention on TYMCOM-X for one program to
            communicate some data to another is through a .TMP file, named
            in the following manner:  the first three characters of the
            file name are the job number of the current job (see index),
            right-justified, in decimal with zero fill.  The last three
            characters make up a unique keyword that identifies the second
            program.  This is very often the first three characters of the
     TYMBASIC User Function Library                                 Page 11
        Running Another Program                                  13 May 1977


            program name.  For example, if the user's job number is 48, and
            the program to be run is SAMPLE, the file name would be
            "048SAM.TMP".  SAMPLE will normally take its commands out of
            this file if run with an offset of one.  However, the file may
            contain any sort of data meant for SAMPLE's consumption.

            Example:

                the program FIRSTP:
                .
                .
                .
                160 OPEN STR(JOBNO,"DDD")+"SAM.TMP-A", OUTPUT,3
                170 PRINT ON 3: "NYC.DAT,1967"
                180 PRINT ON 3: "CHI.DAT,1968"
                190 CLOSE 3
                200 CALL RUNUUO("SAMPLE", 1)
                210 STOP "Cannot run SAMPLE"

                the program SAMPLE:
                .
                .
                .
                100 IF START.POINT=1 THEN !open as command file
                110    OPEN STR(JOBNO,"DDD")+"SAM.TMP",INPUT, -1
                120 ENDIF
                130 INPUT COMMAND.LINE$ !Input the command
     TYMBASIC User Function Library                                 Page 12
        Running Another Program                                  15 March 1978


        ST.REG                              SUPPORTED        ______
                                        Beginning with Ver 4.5

        Form of DEF:

            DEF INTEGER EXTERNAL SIMPL ST.REG(INTEGER I)

        Arguments:

            I is the register number, from 0 to 17B.

        Results:

            ST.REG returns the contents of register I as they were when the
            program was run.  Like the TBA system-defined variable
            START.POINT, these values only have meaning when a program
            created by the SAVE BINARY command is run, and are zero
            otherwise.  If I is not between 0 and 17B, the resulting value
            is undefined.

        Use:

            Certain program pass information to programs they run through
            registers as well as through temporary files.
     TYMBASIC User Function Library                                 Page 13
        Job, User, and System Information                        30 August 1977


        GETPJC                                  NOT SUPPORTED
        ------                               Beginning with Ver 3.11

        Form of DEF:

            DEF STRING EXTERNAL GETPJC

        Arguments:

            None.

        Results:

            Returns a string containing the users project code.
     TYMBASIC User Function Library                                 Page 14
	Job, User, and System Information


        GET.GFD.PPN                     NOT SUPPORTED
        -----------

        Form of DEF:

            DEF STRING EXTERNAL GET.GFD.PPN

        Arguments:

            None

        Results:

            Returns PPN of GFDed user in the form [account,user number] or
            null string if error.
     TYMBASIC User Function Library                                 Page 15
	Job, User, and System Information


        GET.LOG.PPN                                 NOT SUPPORTED
        -----------

        Form of DEF:

            DEF STRING EXTERNAL GET.LOG.PPN

        Arguments:

            None

        Results:

            Returns PPN of logged in user in the form [account,user number]
            or null string if error.
     TYMBASIC User Function Library                                 Page 16
	Job, User, and System Information


        GET.PROG.NAM                                 NOT SUPPORTED
        ------------

        Form of DEF:

            DEF STRING EXTERNAL GET.PROG.NAM

        Arguments:

            None

        Results:

            Returns program name or null string if error.
     TYMBASIC User Function Library                                 Page 17
	Job, User, and System Information


        GET.RUN.PPN                                 NOT SUPPORTED
        -----------

        Form of DEF:

            DEF STRING EXTERNAL GET.RUN.PPN

        Arguments:

            None

        Results:

            Returns PPN of run-from user in the form [account,user number]
            (or null string if error).  The run-from directory is the
            directory in which the running program is stored.
     TYMBASIC User Function Library                                 Page 18
        Job, User, and System Information                      1 August 1980


        ILOG.PPN                                 NOT SUPPORTED
        --------

        Form of DEF:

            DEF INTEGER EXTERNAL ILOG.PPN

        Arguments:

       None

        Results:

            PPN of logged in user as an integer.
     TYMBASIC User Function Library                                 Page 19
        Job, User, and System Information                      1 August 1980


        IGFD.PPN                                 NOT SUPPORTED
        --------

        Form of DEF:

            DEF INTEGER EXTERNAL IGFD.PPN

        Arguments:

            None

        Results:

            PPN of GFDed user as an integer.
     TYMBASIC User Function Library                                 Page 20
        Job, User, and System Information                      1 August 1980


        IRUN.PPN                                 NOT SUPPORTED
        --------

        Form of DEF:

            DEF INTEGER EXTERNAL IRUN.PPN

        Arguments:

            None

        Results:

            PPN of run from user as an integer.  The run from directory is
            the directory in which the running program is stored.
     TYMBASIC User Function Library                                 Page 21
        Job, User, and System Information                        30 August 1977


        IFTP                                     NOT SUPPORTED
        ----                             Beginning with Ver 3.3

        Form of DEF:

            DEF LOGICAL EXTERNAL SIMPL IFTP

        Arguments:

            None.

        Results:

            IFTP returns TRUE if the user is Tymshare PROPRIETARY
            (IN-HOUSE), else FALSE.
     TYMBASIC User Function Library                                 Page 22
        Job, User, and System Information                        30 August 1977


        JOBNO                                     SUPPORTED
        -----                              Beginning with Ver 2.3

        Form of DEF:                            

            DEF INTEGER EXTERNAL JOBNO AKA  ".JOBNO"

        Arguments:

            None.

        Results:

            Returns the integer-valued job number.

        Use:

            The job number is most often used to create file names that are
            unique for temporary files.
     TYMBASIC User Function Library                                 Page 23
        Job, User, and System Information                        30 August 1977


        SYSNO                                   NOT SUPPORTED
        -----                                Beginning with Ver 3.3

        Form of DEF:

            DEF INTEGER EXTERNAL SIMPLE SYSNO

        Arguments:

            None.

        Results:

            Returns the Tymshare system number of the computer being run.

        Use:

            SYSNO is useful for programs that run on more than 1 system.
     TYMBASIC User Function Library                                 Page 24
        Dates                                                    13 May 1977


        FILE.DATE                               SUPPORTED
        ---------                          Beginning with Ver 2.3

        Form of DEF: 

            DEF INTEGER EXTERNAL SIMPL FILE.DATE(STRING F)

        Arguments:

            F contains a file nomen.

        Results:

            Returns -1 if the file nomen is illegal or if the specified
            file cannot be opened for input.  Otherwise returns the
            creation date of the file as an integer in the following
            format:  days since Jan 1 1964 ,, seconds since midnight in
            Greenwich time.

        Use:

            FILE.DATE is useful for file date comparisons in which the
            converted string representing the date in the user's time zone
            is not needed (see DT.CNV) or in which a comparison needs to be
            made that includes the time down to the second.
     TYMBASIC User Function Library                                 Page 25
        Dates                                                    13 May 1977


        DAY.NO                                 NOT SUPPORTED
        ------                            Beginning with Ver. 3.3

        Form of DEF:

            DEF INTEGER EXTERNAL DAY.NO(STRING YY.MM.DD)

        Arguments:

            YY.MM.DD is a string of the form "YY/MM/DD" where

            1.  All characters other than the slashes must be numeric.

            2.  The day number must be present but may have any positive
                value.

            3.  The month number must be present but may have any value.
                If MM is greater than 12, it is adjusted to be in the range
                1-12 and the appropriate number of years is added to YY
                before YY is validated.

            4.  The year number must be present and must be either in the
                range 1964-2063 or in the range 0-99.  Years 0 through 63
                are interpreted as 2000 through 2063, and years 64-99 are
                interpreted as 1964-1999.


        Results:

            DAY.NO returns an integer which is the number of days since
            December 31, 1963 indicated by the input date string.  If any
            error occurs, DAY.NO returns zero.

        Use:

            DAY.NO converts dates from a string form to a numeric form.

        WARNING:  DAY.NO arms and dis-arms the TRANSFORM ON-condition.
     TYMBASIC User Function Library                                 Page 26
        Dates                                                    13 May 1977


        DT.CNV                                   SUPPORTED
        ------                            Beginning with Ver 2.3

        Form of DEF:                            

            DEF STRING EXTERNAL DT.CNV(INTEGER D)

        Arguments:

            D is an integer representing a date in the following format
            (returned by FILE.DATE):  days since Jan 1, 1964 ,, seconds
            since midnight in Greenwich time.

        Results:

            DT.CNV returns a 15 character string of the form 
            YY/MM/DD  HH:MM

        Use:

            DT.CNV converts file dates into a form that is printable and
            that can still be used to compare dates.
     TYMBASIC User Function Library                                 Page 27
        File I/O                                                 13 May 1977


        FILE.PARSE                             SUPPORTED
        ----------                         Beginning with Ver 4.2



        Form of DEF:                            

             DEF INTEGER EXTERNAL FILE.PARSE (STRING F,  &
                        STRING A(*)) AKA "FL.PRS"

        Arguments:

            F is a string containing the file nomen (see TYMBASIC Reference
            Manual).

            A is a string array in which will be returned the components of
            the file nomen.

        Results:

            FILE.PARSE returns zero if there are no syntactic errors in the
            file nomen;  otherwise, it returns the error number.  The
            string array A is filled as follows:

                A(1) - username in parentheses or ppn in brackets
                       or null string
                A(2) - file name, up to six characters, or "TERMIN" if the
                       file nomen specifies the terminal
                A(3) - extension, up to three characters, including the
                       period if one appeared (else null string)
                A(4) - confirmation, if any (else null string), including
                       the hyphen, as four characters, "-NEW", "-ANY", or
                       "-EXI"

            For example the file nomen "(Tba.user)Program.tba-e" would
            result in:

                A(1) = "(TBA.USER)"
                A(2) = "PROGRA"
                A(3) = ".TBA"
                A(4) = "-EXI"

            Note the upper case results.


        Use:

            The use of FILE.PARSE guarantees an error-free file nomen parse
            that is identical to the one used throughout TYMBASIC.
     TYMBASIC User Function Library                                 Page 28
         File I/O                                                13 May 1977


        GET.UN                                   SUPPORTED
        ------                             Beginning with Ver 2.3

        Form of DEF:                           

            DEF INTEGER EXTERNAL GET.UN

        Arguments:

            None.

        Results:

            Returns the first free TYMBASIC file unit number, or zero if
            none are free.

        Use:

            GET.UN is important in writing procedures that must open a file
            but do not know which file unit numbers are in use.  Example:

                135 OPEN F$+".DAT", BINARY INPUT, I WHERE I=GET.UN
     TYMBASIC User Function Library                                 Page 29
        File I/O - Scanning a File Directory                          13 May 1977


        Overview of UFD SCAN package        ________ __ ___ ____ _______

        This set of procedures is designed to scan a specified UFD (User
        File Directory) and return all occurences of a specified file name
        and extension, and optionally the file's size, creation date,
        license, and status.  The file name and extension may include "wild
        carding" using "#" for the character wild card, and "*" for the
        name or extension wild card.  The UFD is not scanned in any
        particular order.

         The procedures are:

           FD.OPEN  - Open the UFD specified by the username.
           FD.WILD  - Specify file name and extension with 
                      wild carding.
           FD.EXACT - Specify file name and extension without 
                      wild carding.
           FD.STEP  - Advance to next file name.
           FD.QUERY - Did the last call to FD.STEP find another 
                      file name?
           FD.NAME  - Return current file name.
           FD.EXT   - Return current file extension.
           FD.SIZE  - Return current file size.
           FD.LIC   - Return current file license.
           FD.DATE  - Return current file date and time.
           FD.STAT  - Return current file status.
           FD.SET   - Set buffer size and enable optional file values.
           FD.CLOSE - Close current UFD.

        All of these procedures are callable as EXTERNAL TBA procedures.

     TYMBASIC User Function Library                                 Page 30
        File I/O - Scanning a File Directory                          13 May 1977


        The following artificial example may provide some insights:

           100 print "Directory: ":
           110 input in form "R": dir$
           120 if fd.open(dir$) then
           130   print "File name: ":
           140   input in form "R": fnam$
           150   if fnam$ # "" then
           160     print "File extension: ":
           170     input in form "R": fext$
           180     call fd.wild(fnam$,fext$)
           190     if fd.step then
           200       tnam$ = fd.name
           210       text$ = fd.ext
           220       tsize = fd.size
           230       tlic = fd.lic
           240       tdate = fd.date
           250       tstat = fd.stat
                         .
                         .
                         .
                         .
           390       go to 190
           400     endif
           410     go to 130
           420   endif
           430   call fd.close
           440 endif
           450 go to 100
     TYMBASIC User Function Library                                 Page 31
        File I/O - Scanning a File Directory                          13 May 1977


        FD.OPEN                                 SUPPORTED  
        -------                            Beginning with Ver 2.3

        Form of DEF:                           

            DEF LOGICAL EXTERNAL FD.OPEN(STRING UFD.NAME)

        Arguments:

            UFD.NAME is the name of the directory (username) to scan.
            If it is null then the current directory is specified
            (the directory GFD'ed to).

        Results:

            FD.OPEN returns true if the directory was successfully opened
            and false if the username is too long.  Any other error will
            cause a FILE error condition to occur on unit -9 (which can be
            trapped with an ON statement).  FD.OPEN prepares a UFD for
            scanning, and enables the routines FD.STEP, FD.QUERY, FD.NAME,
            FD.EXT, FD.SIZE, FD.LIC, FD.DATE and FD.STAT (they return null
            values (false, zero, or null) until FD.OPEN has been
            successfully called).
     TYMBASIC User Function Library                                 Page 32
        File I/O - Scanning a File Directory                          13 May 1977


        FD.CLOSE                                  SUPPORTED 
        --------                           Beginning with Ver 2.3

        Form of DEF:                           

            DEF EXTERNAL FD.CLOSE

        Arguments:

            None.

        Results:

            If a file directory has been successfully opened by FD.OPEN
            then it is closed and all internal buffers are released.  The
            routines FD.STEP, FD.QUERY, FD.NAME, FD.EXT, FD.SIZE, FD.LIC,
            FD.DATE and FD.STAT are disabled (will return null values)
            until FD.OPEN is again successfully called.
     TYMBASIC User Function Library                                 Page 33
        File I/O - Scanning a File Directory                          13 May 1977


        FD.STEP                               SUPPORTED
        -------                           Beginning with Ver 2.3

        Form of DEF:

            DEF LOGICAL EXTERNAL FD.STEP

        Arguments:

            None.

        Results:

            FD.STEP advances the file name scan to the next specified file
            name and extension, if any.  Note that a call to FD.WILD or
            FD.EXACT does NOT locate the first match;  a call to FD.STEP
            must be made to do that.  FD.STEP will return true if another
            file name is found that matches the name given to FD.WILD or
            FD.EXACT, otherwise it will return false.
     TYMBASIC User Function Library                                 Page 34
        File I/O - Scanning a File Directory                          13 May 1977


        FD.EXACT                                SUPPORTED
        --------                         Beginning with Ver 2.3

        Form of DEF:

            DEF EXTERNAL FD.EXACT(STRING (FILENAME, EXTENSION))

        Arguments:

            FILENAME is the file name. It will be truncated to six
            characters. EXTENSION is the extension. It will be truncated
            to three characters.

        Results:

            FD.EXACT specifies a file name and extension to be searched for
            within the UFD.  Special characters within the file name or
            extension are taken literally so that non-standard file names
            can be found.  FD.EXACT does not find the file;  FD.STEP must
            be used for that purpose.
     TYMBASIC User Function Library                                 Page 35
        File I/O - Scanning a File Directory                          13 May 1977


        FD.WILD                                SUPPORTED
        -------                          Beginning with Ver 2.3

        Form of DEF:

            DEF EXTERNAL FD.WILD(STRING (FILENAME,EXTENSION))

        Arguments:

            FILENAME is the file name.  It will be truncated to six
            characters.  EXTENSION is the extension.  It will be truncated
            to three characters.

        Results:

            FD.WILD specifies a file name and extension to be searched for
            within the UFD.  The wild card characters "#" and "*" will
            match any character and any file name or extension,
            respectively.  FD.WILD does not find the first match on the
            specified name;  FD.STEP must be used for that purpose.
     TYMBASIC User Function Library                                 Page 36
        File I/O - Scanning a File Directory                          13 May 1977


        FD.QUERY                            SUPPORTED
        --------                        Beginning with Ver 2.3

        Form of DEF:

            DEF LOGICAL EXTERNAL FD.QUERY

        Arguments:

            None.

        Results:

            FD.QUERY returns the value returned by the last call to FD.STEP
            (or false if no call to FD.STEP has been made since the last
            successful call to FD.OPEN).  Thus, FD.QUERY will return true
            if there is a match and false if not.

        Use:

            FD.QUERY is useful when the programmer wants to know if file
            information is available without advancing to the next match.
     TYMBASIC User Function Library                                 Page 37
        File I/O - Scanning a File Directory                          13 May 1977


        FD.SET                               SUPPORTED 
        ------                          Beginning with Ver 2.3

        Form of DEF:

            DEF EXTERNAL FD.SET(INTEGER (BUFFER.LENGTH,CONTROL.CODE))

        Arguments:

            BUFFER.LENGTH specifies the length to be used for the UFD SCAN
            internal buffer.  If BUFFER.LENGTH is negative, then no change
            is specified.  If it is zero or one, then a length of 100 is
            specified.

            When FD.STEP is initially called after a call to FD.OPEN, it
            asks the monitor to fill its internal buffer with data
            describing the file names which match the specified file name
            and extension.  The monitor only puts as many entries into the
            buffer as will fit.  When FD.STEP exhausts the data in that
            buffer, it requests another.  Each entry in the buffer takes
            two words plus one word for each of the following if requested:
            size, date, license and status (all four are requested unless
            the user specifies otherwise in this call).

            CONTROL.CODE specifies which data items are requested as
            follows:
                bit 32 - fetch file size (enable FD.SIZE) if 1
                bit 33 - fetch license (enable FD.LIC) if 1
                bit 34 - fetch date (enable FD.DATE) if 1
                bit 35 - fetch status (enable FD.STAT) if 1

            If CONTROL.CODE is negative then no change is specified.

        Results:

            FD.SET sets the buffer length parameter and enables or disables
            the capture of certain data items for the next call to FD.WILD
            or FD.EXACT.

        Use:

            FD.SET is used in applications where core space or the overhead
            of making monitor calls is critical.  If the buffer length is
            large, less monitor calls are made;  if less data items are
            requested, a smaller buffer will suffice.
     TYMBASIC User Function Library                                 Page 38
        File I/O - Scanning a File Directory                          13 May 1977


        FD.NAME                             SUPPORTED
        -------                         Beginning with Ver 2.3

        Form of DEF:

            DEF STRING EXTERNAL FD.NAME

        Arguments:

            None.

        Results:

            If FD.QUERY would currently return TRUE then this function
            returns the current file name. Otherwise, it returns a null
            string.
     TYMBASIC User Function Library                                 Page 39
        File I/O - Scanning a File Directory                          13 May 1977


        FD.EXT                              SUPPORTED
        ------                          Beginning with Ver 2.3

        Form of DEF:

            DEF STRING EXTERNAL FD.EXT

        Arguments:

            None

        Results:

            If FD.QUERY would currently return TRUE then this function
            returns the current file extension.  Otherwise it returns a
            null string.
     TYMBASIC User Function Library                                 Page 40
        File I/O - Scanning a File Directory                          13 May 1977


        FD.SIZE                            SUPPORTED
        -------                        Beginning with Ver 2.3

        Form of DEF:

            DEF INTEGER EXTERNAL FD.SIZE

        Arguments:

            None

        Results:

            If FD.QUERY would currently return TRUE then this routine
            returns the current file size in blocks (unless FD.SIZE is
            disabled - see FD.SET).  Otherwise, it returns a minus one.
     TYMBASIC User Function Library                                 Page 41
        File I/O - Scanning a File Directory                          13 May 1977


        FD.LIC                             SUPPORTED
        ------                          Beginning with Ver 2.3

        Form of DEF:

            DEF INTEGER EXTERNAL FD.LIC

        Arguments:

            None.

        Results:

            If FD.QUERY would currently return TRUE then this routine
            returns the current file license (unless FD.LIC is disabled -
            see FD.SET).  Otherwise, it returns a minus one.
     TYMBASIC User Function Library                                 Page 42
        File I/O - Scanning a File Directory                          13 May 1977


        FD.DATE                            SUPPORTED
        -------                         Beginning with Ver 2.3

        Form of DEF:

            DEF INTEGER EXTERNAL FD.DATE

        Arguments:

            None.

        Results:

            If FD.QUERY would currently return TRUE then this routine
            returns the current file date and time in the following format:
            days since Jan 1, 1964,,seconds since midnight in Greenwich
            time (unless FD.DATE is disabled - see FD.SET).  Otherwise, it
            returns a minus one.
     TYMBASIC User Function Library                                 Page 43
        File I/O - Scanning a File Directory                          13 May 1977


        FD.STAT                            SUPPORTED
        -------                        Beginning with Ver 2.3

        Form of DEF:

            DEF INTEGER EXTERNAL FD.STAT

        Arguments:

            None.

        Results:

            If FD.QUERY would currently return TRUE then this routine
            returns the file status as below (unless FD.STAT is disabled -
            see FD.SET).  Otherwise, it returns a minus one.

                      bits 26-35 = file protection
                      bits 23-26 = bits 8-11 from extended lookup word 14
                      bits 19-22 = bits 4-7 from extended lookup word 14
                      bits 17-18 = bits 2-3 from extended lookup word 14
                      bits 15-16 = bits 0-1 from extended lookup word 14

        Use:

            Bit 4 from extended lookup word 14 is the "file dumped" bit and
            indicates that the file has been written to backup tape.

            Bit 8 is the "file temporary" bit and indicates that the file
            will be automatically deleted upon GFD or LOGOUT.

            The protection is a 9-bit field consisting of three three-bit
            codes.  The first applies to the user himself, the second to
            all users in the same account, the third to any user.

            The codes are:

                0    ALL
                1    CP
                2    UFD
                3    AP
                4    RD
                5    RUN
                6    LK
                7    NO

            See File Protection in the Tymshare XEXEC manual for a
            description of each of these codes.
     TYMBASIC User Function Library                                 Page 44
        Array Operations                                         13 May 1977


        ARRAY.BOUNDS                              SUPPORTED
        ------------                        Beginning with Ver 2.4

        Form of DEF:

            DEF INTEGER EXTERNAL ARRAY.BOUNDS(*) &
                (type A(*,*,...)) AKA "BND.AR"

            For the word "type" the user should substitute the type of the
            array he wishes to pass to ARRAY.BOUNDS.  He should also
            specify the number of dimensions of the array by including the
            proper number of asterisks as shown above.

            To pass arrays of differing types or dimensionalities to
            ARRAY.BOUNDS the module should contain one DEF for each needed
            type/dimensionality combination with a unique procedure name
            but containing identical AKA clauses.  For example:

            DEF INTEGER EXTERNAL INT.BOUNDS.1(*)(INTEGER A(*)) AKA "BND.AR"
            DEF INTEGER EXTERNAL REAL.BOUNDS.2(*)(REAL A(*,*)) AKA "BND.AR"

        Arguments:

            A is any array.

        Results:

            ARRAY.BOUNDS returns a one-dimensional integer array that
            contains one element for every dimension of the argument array.
            Each element contains the bounds pair for that dimension:  the
            lower bound in the left half of the integer, the upper bound in
            the right half.

        Use:

            ARRAY.BOUNDS is useful in procedures that expect an array
            argument but do not know the bounds.

            To extract the bounds pairs:

                INTEGER BOUNDS(1:N) !N is the dimensionality
                BOUNDS = INT.BOUNDS.1(SOME.INT.ARRAY)
                LOWER.BOUND.1 = RSH(BOUNDS(1), 18)
                UPPER.BOUND.1 = BOUNDS(1) BAN 777777B
     TYMBASIC User Function Library                                 Page 45
        Half-word Manipulation                                    2 June 1977


            RH                         NOT SUPPORTED            __

            Form of DEF:

                DEF INTEGER EXTERNAL SIMPL RH(INTEGER I) AKA ".RH"

            Arguments:

                I is any integer.

            Results:

                RH returns the right half-word of I as an integer.  This is
                bits 18-35 in DEC terminology.  The left half of the result
                is always zero.
     TYMBASIC User Function Library                                 Page 46
        Half-word Manipulation                                    2 June 1977


            LH                           NOT SUPPORTED            __

            Form of DEF:

                DEF INTEGER EXTERNAL SIMPL LH(INTEGER I) AKA ".LH"

            Arguments:

                I is any integer.

            Results:

                LH returns the left half-word of I as an integer.  This is
                bits 0-17 in DEC terminology.  The left half of the result
                is always zero.
     TYMBASIC User Function Library                                 Page 47
        Half-word Manipulation                                    2 June 1977


            XWD                                NOT SUPPORTED            ___

            Form of DEF:

                DEF INTEGER EXTERNAL SIMPL XWD(INTEGER (I,J)) AKA ".XWD"

            Arguments:

                I and J are integers.

            Results:

                XWD returns an integer whose left half-word is the right
                half-word of I and whose right half-word is the right
                half-word of J.  The left half-words of I and J are
                ignored.
     TYMBASIC User Function Library                                 Page 48
	Extended Escape Control


                          Extended Escape Control                          ________ ______ _______

            The following three routines have been added to the User
            Function Library for the purpose of extending the user's escape
            control, specifically to give the user the ability to
            temporarily disable escapes.
     TYMBASIC User Function Library                                 Page 49
	Extended Escape Control


            DISABLE                                SUPPORTED            _______
                                             Beginning with Ver 4.5

            Form of DEF:

                 DEF EXTERNAL DISABLE AKA ".DISABLE"

            Arguments:

                 None.

            Results:

                 DISABLE disables escapes and increments an internal cell
                 whose initial value is zero.  The internal cell is used
                 for communication between DISABLE, ENABLE, and CENABLE.

                 Whenever escapes have been disabled by DISABLE, any
                 escapes that occur will be ignored.  They will, however,
                 be remembered and will take effect as soon as ENABLE or
                 CENABLE re-enables escapes.
     TYMBASIC User Function Library                                 Page 50
	Extended Escape Control


            ENABLE                                  SUPPORTED            ______
                                             Beginning with Ver 4.5

            Form of DEF:

                 DEF EXTERNAL ENABLE AKA ".ENABLE"

            Arguments:

                 None.

            Results:

                 ENABLE decrements an internal cell which is incremented by
                 DISABLE.  If the value of the decremented cell is less
                 than or equal to zero then ENABLE zeroes the cell and
                 re-enables escapes.  Any escapes which were not honored
                 because of a previous call to DISABLE will occur at this
                 time.
     TYMBASIC User Function Library                                 Page 51
	Extended Escape Control


            CENABLE                                 SUPPORTED            _______
                                             Beginning with Ver 4.5

            Form of DEF:

                 DEF EXTERNAL CENABLE AKA ".CENABLE"

            Arguments:

                 None.

            Results:

                 CENABLE zeroes the internal cell used by DISABLE and
                 ENABLE and then re-enables escapes.  Any escapes which
                 were not honored because of a previous call to DISABLE
                 will occur at this time.
     TYMBASIC User Function Library                                 Page 52
        FORTRAN string conversion


            F.CHR             NOT SUPPORTED            _____

            Form of DEF:

               DEF STRING EXTERNAL F.CHR(INTEGER I)

            Arguments:

                I is an integer containing a FORTRAN string.

            Results:

                F.CHR returns a TBA string of 5 or fewer characters.

            Use:

                F.CHR is useful in converting a FORTRAN string of 5 or
                fewer characters to a TBA string.
     TYMBASIC User Function Library                                 Page 53
        FORTRAN string conversion


            F.ASC             NOT SUPPORTED            _____

            Form of DEF:

                DEF INTEGER EXTERNAL F.ASC(STRING S)

            Arguments

                S contains a TBA string.

            Results:

                F.ASC returns an integer containing a FORTRAN string
                coresponding to the first five characters of S.  If S
                contains less than five characters, it is padded on the
                right with spaces.

            Use:

                F.ASC is useful in converting a TBA string of 5 or fewer
                characters to a FORTRAN string.
     TYMBASIC User Function Library                                 Page 54
        FORTRAN string conversion


            F.CHRA            NOT SUPPORTED            ______

            Form of DEF:

                DEF STRING EXTERNAL F.CHRA(INTEGER K(*))

            Arguments:

                K is an integer array of one dimension which contains a
                FORTRAN string.

            Results:

                F.CHRA returns the coresponding TBA string.

            Use:

                F.CHRA is useful in converting FORTRAN strings that may be
                longer than 5 characters to a TBA string.
     TYMBASIC User Function Library                                 Page 55
        FORTRAN string conversion


            F.ASCA            NOT SUPPORTED            ______

            Form of DEF:

                DEF INTEGER EXTERNAL F.ASCA(*)(STRING S)

            Arguments:

                S is a TBA string of any length.

            Results:

                F.ASCA returns a integer array of one dimension that
                contains the coresponding FORTRAN string.

            Use:

                F.ASCA is useful in converting a TBA string of any length
                to a FORTRAN string.
     TYMBASIC User Function Library                                 Page 56
        Fast Sorter


            SORT                             NOT SUPPORTED            ____

            Form of def:

            Def Integer External Sort(*)(integer n.recs)

            Arguments:
                 n.recs is the number of records to be sorted

            Results:

                 return an integer array containing a sorted list of record
                 numbers.

            User-Supplied Procedure:

                 Sort refers to a user-supplied procedure with the
                 following def:
                    DEF INTEGER EXTERNAL CMPARE(INTEGER(P1,P2))
                 when CMPARE is called, P1 and P2 will be in the range 1
                 through N.RECS.  The procedure CMPARE must compare record
                 P1 with record P2, using whatever compare algorithm is
                 suitable for this sort, and return an intger -1,0, or 1
                 depending on whether record P1 is less than, equal to, or
                 greater than record P2.

            Use:

                 This routine uses a very fast sort algorithm, and,since
                 the compare is written by the user for his particular
                 records, it can handle records of any complexity whatever
                 without having to resort to an obscure command language.

            Example:

            10 ! sample driver for the in-core quickersort.
            20 !
            30 ! We sort employees by month of review date and by name.
            40 !
            50 def integer external sort(*) ( integer n.recs)
            100 data Frank, Nov
            110 data John, Oct
            120 data Carl, Jan
            130 data Mike, Jun
            140 data Lee, Jan
            150 data Allen, Dec
            160 data Karen, Dec
            170 data Polle, Jun
            180 data Dick, Dec
            190 data Don, Feb
     TYMBASIC User Function Library                                 Page 57
        Fast Sorter


            200 !
            210 integer i, num.records
            220 num.records = 9
            230 integer sorted( num.records)
            240 string field1(num.records), field2(num.records)
            250 read field2(i), field1(i) for i=1 to num.records
            260 sorted = sort( num.records)
            270 print field1(sorted(i)), field2(sorted(i)) for i=1 to &
                 num.records
            280 stop
            290 !
            300 !
            310 def integer entry scomp( integer ( p1, p2)) aka "CMPARE"
            320   integer result
            330   ! = = = = !
            340   result = comp( field1(p1), field1(p2))
            350   if result 0 then exit result else exit comp(field2(p1) &
                   ,field2(p2))
            360 endf scomp
     TYMBASIC User Function Library                                 Page 58
        Index                                                     26 May 1977


            .TMP file  . . . . . . . . . .  11

            Accessing User Library Functions  2
            AKA clause . . . . . . . . . .  2
            Array operations . . . . . . .  44
            Arrays 
              bounds . . . . . . . . . . .  44

            Bounds of an array . . . . . .  44
            Bounds pairs of an array . . .  44

            CALL statement . . . . . . . .  2
            CENABLE  . . . . . . . . . . .  49, 51
            CMPARE . . . . . . . . . . . .  56
            Command files  . . . . . . . .  8-11
            Compilers  . . . . . . . . . .  10
            Confirmation . . . . . . . . .  27
            Confirmation keyword . . . . .  27
            Core space . . . . . . . . . .  37
            Creation date of file including seconds  24
            CROSS  . . . . . . . . . . . .  10

            Dates  . . . . . . . . . . . .  24-26, 29
            DAY.NO . . . . . . . . . . . .  25
            DEF statement  . . . . . . . .  2
            Dimension of an array  . . . .  44
            DISABLE  . . . . . . . . . . .  49-51
            DT.CNV . . . . . . . . . . . .  24

            ENABLE . . . . . . . . . . . .  49-51
            Error condition  . . . . . . .  10, 31
            Extended escape control  . . .  48
            Extension  . . . . . . . . . .  27

            F.ASC  . . . . . . . . . . . .  53
            F.ASCA . . . . . . . . . . . .  55
            F.CHR  . . . . . . . . . . . .  52
            F.CHRA . . . . . . . . . . . .  54
            Fast sorter  . . . . . . . . .  56
            FD.CLOSE . . . . . . . . . . .  29
            FD.DATE  . . . . . . . . . . .  29
            FD.EXACT . . . . . . . . . . .  29, 33
            FD.EXT . . . . . . . . . . . .  29
            FD.LIC . . . . . . . . . . . .  29
            FD.NAME  . . . . . . . . . . .  29
            FD.OPEN  . . . . . . . . . . .  29
            FD.QUERY . . . . . . . . . . .  29
            FD.SET . . . . . . . . . . . .  29
            FD.SIZE  . . . . . . . . . . .  29
            FD.STAT  . . . . . . . . . . .  29
            FD.STEP  . . . . . . . . . . .  29, 34-36
            FD.WILD  . . . . . . . . . . .  29, 33
            File 
              creation date  . . . . . . .  24, 29, 37
              date comparisons . . . . . .  24
              directory  . . . . . . . . .  29, 31
              dumped bit . . . . . . . . .  43
              extension  . . . . . . . . .  27, 29, 34-35, 39
              license  . . . . . . . . . .  29, 37, 41
              lookup . . . . . . . . . . .  43
              name . . . . . . . . . . . .  11, 27, 29, 34-35, 38
              nomen  . . . . . . . . . . .  10, 24, 27
              nomen parse  . . . . . . . .  27
              protection . . . . . . . . .  43
              size . . . . . . . . . . . .  29, 37
              status . . . . . . . . . . .  29, 37
              temporary bit  . . . . . . .  43
              unit number  . . . . . . . .  28
              unit number -9 . . . . . . .  10, 31
            FILE error condition . . . . .  10
            File I/O . . . . . . . . . . .  27-28
              SCANNING file directory  . .  29-43
            FILE.DATE  . . . . . . . . . .  26
            FILE.PARSE . . . . . . . . . .  27
            FORTRAN string conversion  . .  52-55
            Function identifiers . . . . .  2
            Function names . . . . . . . .  2
            Function type  . . . . . . . .  2

            GETPJC . . . . . . . . . . . .  13
            GFD  . . . . . . . . . . . . .  31

            Half-word manipulation . . . .  45-47

            IFTP . . . . . . . . . . . . .  21
            IGFD.PPN . . . . . . . . . . .  19
            ILOG.PPN . . . . . . . . . . .  18
            Interfacing with PERFORM . . .  8-9
            IO channels  . . . . . . . . .  10
            IRUN.PPN . . . . . . . . . . .  20

            Job number . . . . . . . . . .  11, 22
            Job, user, and system information  13, 18-23
            JOBNO  . . . . . . . . . . . .  22

            Language type  . . . . . . . .  2
            LIBRARY command  . . . . . . .  3
            Library functions 
              support of . . . . . . . . .  3

            Maintainance of Library Functions  3
            Monitor calls  . . . . . . . .  37

            ON condition statement . . . .  31
            On-condition . . . . . . . . .  25

            Parsing file nomens  . . . . .  27
            PERFORM  . . . . . . . . . . .  8-9
            PIP  . . . . . . . . . . . . .  10
            Procedures . . . . . . . . . .  44

            Registers  . . . . . . . . . .  10, 12
            Running another program  . . .  10-12
            RUNUUO . . . . . . . . . . . .  9-10

            SAVE . . . . . . . . . . . . .  10
            SAVE BINARY  . . . . . . . . .  12
            SAVE BINARY command  . . . . .  10
            SORT . . . . . . . . . . . . .  56
            ST.REG . . . . . . . . . . . .  10, 12
            START.POINT  . . . . . . . . .  10-12
            Startpoint . . . . . . . . . .  10
            Startpoint offset  . . . . . .  10-11
            STUFIB . . . . . . . . . . . .  5
            Support of Library Functions by Tymshare  3
            SYSNO  . . . . . . . . . . . .  23

            Table of contents  . . . . . .  2
            TBATLIB  . . . . . . . . . . .  3
            Terminal I/O . . . . . . . . .  4-7
            Terminal input . . . . . . . .  8
            Time zones . . . . . . . . . .  24, 26
            TLIB . . . . . . . . . . . . .  3
            TRANSFORM  . . . . . . . . . .  25
            Type . . . . . . . . . . . . .  2

            UFD  . . . . . . . . . . . . .  29
            UFD SCAN internal buffer . . .  37
            UFD SCAN package, overview . .  29
            Use of User Library Functions   2
            User library functions 
              use of . . . . . . . . . . .  2
            User-defined procedures  . . .  2
            Username . . . . . . . . . . .  27, 29, 31

            Value of a function  . . . . .  2

            Wild carding . . . . . . . . .  29, 35

    	DB