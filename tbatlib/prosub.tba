10 def external set.ec(logical ec.flg)
100 def logical external simpl chkmod(string s)
105 define external simpl clrent
110 def external simpl clrtim
115 def integer external simpl addent(integer i, string s, integer(j,k))
120 def external simpl incndx
125 def external simpl decndx
130 def external simpl movent(integer(i,j))
135 def external simpl onpro
140 def external simpl offpro
145 def external simpl setmod(integer i)
150 def external simpl prowrp
155 def integer external simpl rddat(integer(tnum,pnum))
156 def integer external simpl rdmaxd
157 def logical external simpl hedtst
160 def integer external simpl rdmaxp

163 real adj.table(0:tab.cnt-1,par.ndx+1)
164 return

170 !
175 ! GOSUB here for "first time" initialization
180 !
185 integer max.cmd
190 max.cmd = 14
195 string cmds(max.cmd)
200 data "on profile","no profile","add partition","delete partition", &
         "delete all partitions","delete measurements","list partitions", &
         "dump profile","quit","go","echo","no echo","do","help"
205 read cmds
210 !
215 integer maxp, maxd
220 maxd = rdmaxd ! maximum number of statistic types to gather
225 maxp = rdmaxp ! maximum number of partitions
230 integer par.ndx ! current number of partitions
235 string mod.names(maxp), module.name
240 integer range(maxp,2)
245 !
250 integer max.opt
255 max.opt = 5
260 string options(max.opt)
265 data "STATEMENT","ENTRY","TRU","MICROCYCLE","CORE"
270 read options
275 integer scale(max.opt)
280 data 0,0,4,0,0
285 read scale
290 integer stmcnt,entcnt,trucnt,miccnt,corcnt
295 stmcnt = 0, entcnt = 1, trucnt = 2, miccnt = 3, corcnt = 4
300 integer opt.bits(0:34)
305 opt.bits(stmcnt) = 400000000000b
306 opt.bits(entcnt) = 200000000000b
307 opt.bits(trucnt) = 760000000000b
308 opt.bits(miccnt) = 640000000000b
309 opt.bits(corcnt) = 020000000000b
315 !
320 string command.line
325 !
330 integer line.s,line.e,tab.cnt
335 !
340 integer table.map(0:34)
345 logical profiling, active(0:34), requested(0:34), data.gathered
350 logical here.before, first.time, need.tables, use.help
355 first.time = true
360 here.before = true
365 !
370 return

375 def entry pexec
380   call offpro                   ! first thing, turn profiler off.
385   if profiling then call prowrp ! wrap up current profile, if any
386   if profiling then call adjust
390   !
395   string opt
400   integer i,k,n, pmode,pcnt, savasc(0:127)
405   logical t.active(0:34), t.requested(0:34)
410   !
415   print
420   print "TBA profiler"
425   print
435   savasc(0:127) = asctable(0:127)
440   asctable = xasc
445   asctable(asc("a"):asc("z")) = asctable(asc("A"):asc("Z"))
446   if not here.before then
447     gosub 185
448     if hedtst then
449       print "You have modules in DEBUG mode."
450       print "This may invalidate your statistics and will certainly cause"
451       print "the profiler to be very slow and expensive."
452       print "Do you want to continue? ":
453       for k = 1 while true
454         input in form "r": command.line
455         if index("no",command.line) = 1 then
456           stop "Run aborted"
457         orif index("yes",command.line) # 1 then
458       next k
459         endif
460     endif
461   else
462     first.time = false
463   endif
464   !
465   !
466   on escape goto 470
467   goto 491
470   cob
471   cib
475   wait(-1)
480   print "  (esc)"
485   resume 491
490 !
491   for k = 1 while true
500     if pos < 2 then print " : ":
505     input in form "R": command.line
506     if ljust(command.line) = "" then goto 500
510     for i = 1 to max.cmd
515       if index(command.line,cmds(i)) # 1 then
520       next i
525       print "?"
526       if not use.help then
527         print "Type HELP for a list of commands"
528         use.help = true
529       endif
540     else
545       command.line = substr(command.line,length(cmds(i))+1)
550       if left(command.line,1) = "" or left(command.line,1) = " " then
555         on i gosub 1000,2000,3000,4000,5000,6000,7000,8000,9000,10000, &
                       10500,10600,10700,10900
560       else
565         print "?"
566         if not use.help then
567           print "Type HELP for a list of commands"
568           use.help = true
569         endif
580       endif
585     endif
590   next k

1000 ! ON PROFILE
1010 if ljust(command.line) # "" then
1020   pmode = 0, pcnt = 0
1030   t.active(i) = false for i = 0 to 34
1040   for n = 1 while ljust(command.line) # ""
1050     i = index(command.line,",")
1060     if i = 0 then i = length(command.line)+1
1070     opt = ljust(rjust(left(command.line,i-1)))
1080     command.line = substr(command.line,i+1)
1090     for i = 1 to max.opt
1100       if index(options(i),opt) # 1 then
1110       next i
1120         print "Illegal resource name: "+opt
1130         print "Legal resource names are:"
1140         print options(i) for i = 1 to max.opt
1141       else
1149     p.cnt = 0
1150     pmode = pmode bor opt.bits(i-1)
1151     for n = 0 to 34
1152       if lsh(pmode,n) < 0 then
1153         t.active(n) = true
1154         p.cnt = p.cnt + 1
1155       endif
1156     next n
1157     t.requested(i-1) = true
1158     if p.cnt > maxd then
1159       print "Too many resource names."
1160       goto 1290
1161     endif
1210     next n
1220     call setmod(pmode)
1230     active(0:34) = t.active(0:34)
1231     requested(0:34) = t.requested(0:34)
1232     call clr.data
1240     profiling = true
1250   endif
1260 else
1270   profiling = true
1280 endif
1290 return

2000 ! NO PROFILE
2010 profiling = false
2020 return

3000 ! ADD PARTITION
3010 if ljust(command.line) = "" then
3020   print "Missing module name"
3030 else
3040   for k = 1 while ljust(command.line) # ""
3050     if next.partition(k) then
3060       if par.ndx < maxp then
3070         i = decide.where
3080         if i # 0 then
3090           for n = par.ndx to i by -1
3100             mod.names(n+1) = mod.names(n)
3110             range(n+1,1) = range(n,1)
3120             range(n+1,2) = range(n,2)
3130             call movent(n,n+1)
3140           next n
3150           mod.names(i) = module.name
3160           range(i,1) = line.s
3170           range(i,2) = line.e
3180           call addent(i, module.name, line.s, line.e)
3190           par.ndx = par.ndx + 1
3200           call incndx
3210           call clr.data
3220         next k
3230       endif
3240     else
3250       print "Too many partitions"
3260     endif
3270   endif
3280 endif
3290 return

4000 ! DELETE PARTITION
4010 if ljust(command.line) = "" then
4020   print "Missing module name"
4030   return
4040 endif
4050 for k = 1 while ljust(command.line) # ""
4060   if next.partition(k) then
4070     for i = par.ndx to 1 by -1
4080       if mod.names(i) = module.name &
           and not (range(i,1) > line.e or range(i,2) < line.s) then
4090         for n = i+1 to par.ndx
4100           mod.names(n-1) = mod.names(n)
4110           range(n-1,1) = range(n,1)
4120           range(n-1,2) = range(n,2)
4130         call movent(n,n-1)
4140         next n
4150       par.ndx = par.ndx - 1
4160       call decndx
4170       call clr.data
4180       endif
4190     next i
4200   next k
4210 endif
4220 return

5000 ! DELETE ALL PARTITION
5010 call clrent
5020 par.ndx = 0
5021 call clr.data
5030 return

6000 ! DELETE PARTITION TIME
6010 call clr.data
6030 return

7000 ! LIST PARTITION
7001 print
7002 if profiling then print "profile ON" else print "profile OFF"
7003 n = 0
7004 for i = 0 to 34
7005   if requested(i) then
7006     if n = 0 then print "Measurement specifications: ":
7007     n = 1
7008     print options(i+1)+" ":
7009   endif
7010 next i
7011 if n = 0 then print "No measurements specified":
7012 print
7013 if par.ndx > 0 then print "Partitions:" else &
       print "No partitions specified"
7020 print in form "6x 3b 5zd 1b '-' 1b 5zd /": &
           mod.names(i),range(i,1),range(i,2) &
           for i = 1 to par.ndx
7030 print
7040 return

8000 ! DUMP PROFILE
8001 integer out.file
8002 def integer external get.un
8003 out.file = get.un
8010 if not data.gathered or par.ndx = 0 then
8020   print "No data"
8030   return
8040 endif
8050 command.line = ljust(command.line)
8060 if command.line = "" then command.line = "terminal"
8070 on file(out.file) goto 8130
8080 open command.line, symbolic sequential output, out.file
8081 on escape goto 8160
8090 call dmppro(out.file)
8100 close out.file
8101 no file(out.file)
8102 on escape goto 470
8110 return
8120 !
8130 print "Error opening file "+command.line
8131 print errmsg(errcd)
8131 no file(out.file)
8140 return
8150 !
8160 close(out.file)
8170 no file(out.file)
8180 goto 470

9000 ! QUIT
9010 stop ""

10000 ! CONTINUE
10001 if first.time and (not profiling or par.ndx = 0 or pmode = 0) then
10002   for i = 1 while true
10003     if not profiling then
10004       print "ON PROFILE not set, ok? ":
10005     orif pmode = 0 then
10006       print "Measurements not specified, ok? ":
10007     else
10008       print "Partitions not specified, ok? ":
10009     endif
10010     input in form "R": command.line
10011     if index("no",command.line) = 1 then return
10012     if index("yes",command.line) # 1 then
10013       print "YES or NO, please."
10014     next i
10015   endif
10016 endif
10017 asctable(0:127) = savasc(0:127)
10018 no escape
10019 no file(-1)
10020 if profiling then
10029   call bld.tables
10030   data.gathered = true
10040   call onpro
10050 endif
10060 exit
10070 !
10080 ! ***** logical end of pexec *****
10090 endf pexec

10500 call set.ec(true)
10510 return
10600 call set.ec(false)
10610 return
10620 !
10700 command.line = ljust(command.line)
10720 close(-1)
10730 open command.line,symbolic sequential input,*,err goto 10760
10740 on endfile(-1) goto 10800
10750 return
10760 print "Error opening file "+command.line
10761 print errmsg(errcd)
10762 no file(-1)
10780 return
10790 !
10800 close(-1)
10810 resume
10820 !

10900 print
10910 print "Legal commands are:"
10920 print "  "+cmds(i) for i = 1 to max.cmd
10930 print
10940 return

11000 ! PROFILE DUMPER
11010 def dmppro (integer out.file)
11060   integer i, k, tb
11070   real tot
11080   string fmt1, fmt2, fmt3, fmt4
11090   string module.name,line.range,other.range
11100   string percent,total.blank,total.dash,vstg
11110     module.name = "6x 3b "
11120     line.range = "5zd 1b 1x 1b 5zd 3b "
11130     other.range = "7b '*' 7b 3b "
11150     percent = " 2b zzz.dd 1b '%'/"
11160     total.blank = "9b 18b "
11170     total.dash = "'------------'/"
11180   !
11200   for k = 0 to 34
11210     if requested(k) then
11220       name subtab = adj.table(table.map(k),*)
11230       print on out.file
11240       print on out.file: options(k+1)
11250       if scale(k+1) = 0 then
11260         vstg = "10-.z"
11270       else
11280         vstg = str(11-scale(k+1))+"-."+rpt("d",scale(k+1))
11290       endif
11300       fmt1 = module.name+line.range+vstg+percent
11310       fmt2 = module.name+other.range+vstg+percent
11320       fmt3 = total.blank+total.dash
11330       fmt4 = total.blank+vstg+"/"
11340       !
11350       tot = 0
11360       tot = tot + subtab(i)  for i = 1 to par.ndx+1
11370       !
11380       print on out.file in form fmt1: &
              mod.names(i), range(i,1), "-", range(i,2), &
              subtab(i), (subtab(i)/tot)*100 &
              for i = 1 to par.ndx
11390       print on out.file in form fmt2: &
            "OTHER", subtab(par.ndx+1), (subtab(par.ndx+1)/tot)*100
11400       print on out.file in form fmt3:
11410       print on out.file in form fmt4: tot
11420       print on out.file
11430     endif
11440   next k
11450   exit
11460 endf dmppro

12000 ! PARTITION SCANNING SUBROUTINES
12010 def integer decide.where
12020   integer i,k
12030   for i = 1 to par.ndx
12040     if mod.names(i) # module.name then
12050     next i
12060     exit par.ndx+1
12070   endif
12080   for k = i to par.ndx
12090     if mod.names(k) # module.name then exit k
12100     if not (range(k,1) > line.e or range(k,2) < line.s) then
12110       print "Overlapping range: "+module.name+&
                  str(line.s)+" -"+str(line.e)
12120       exit 0
12130     endif
12140     if range(k,1) > line.s then exit k
12150   next k
12160   exit par.ndx+1
12170 endf decide.where
12180 !
12190 !
12200 !
12210 def logical next.partition (integer k)
12220   integer ndx
12221   string delim
12230   command.line = ljust(command.line)
12240   if k = 1 and not alpha(command.line) then
12250     print "Missing module name"
12260     exit false
12270   endif
12280   if alpha(command.line) then
12290     ndx = first(command.line," ",",")
12300     module.name = rjust(left(command.line,ndx-1))
12310     if length(module.name) > 6 then module.name = left(module.name,6)
12350     if not chkmod(module.name) then
12360       print "Cannot find module: "+module.name
12370       exit false
12380     endif
12390     command.line = ljust(substr(command.line,ndx))
12400     if left(command.line,1) = "," or command.line = "" then
12410       command.line = ljust(substr(command.line,2))
12420       line.s = 0
12430       line.e = 99999
12440       exit true
12450     endif
12460   endif
12470   if not numeric(command.line) then
12480     print "Missing line number: "+command.line
12490     exit false
12500   endif
12520   ndx = first(command.line,",","-")
12521   ndx = min(ndx,first(command.line,":",":"))
12530   line.s = get.num(left(command.line,ndx-1))
12531   if line.s < 0 then goto 12740
12540   delim = substr(command.line,ndx,1)
12550   command.line = ljust(substr(command.line,ndx+1))
12560   if delim # "-" and delim # ":" then
12570     line.e = line.s
12580   else
12590     if not numeric(command.line) then
12600       print "Missing line number: "+command.line
12610       exit false
12620     endif
12630     ndx = first(command.line,",",",")
12640     line.e = get.num(left(command.line,ndx-1))
12641     if line.e < 0 then goto 12740
12650     command.line = ljust(substr(command.line,ndx+1))
12660   endif
12670   if line.e < line.s then
12680     print "Line numbers out of order: "+str(line.s)+" -"+str(line.e)
12690     exit false
12700   endif
12710   no transform
12720   exit true
12730   !
12740   print "Bad line number: "+command.line
12760   exit false
12770 endf next.partition
12780 !
12790 !
12800 def integer first (string (s,t1,t2))
12810   integer ndx1, ndx2
12820   ndx1 = index(s,t1)
12830   if ndx1 = 0 then ndx1 = length(s)+1
12840   ndx2 = index(s,t2)
12850   if ndx2 = 0 then ndx2 = length(s)+1
12860   exit min(ndx1,ndx2)
12870 endf first
12880 !
12890 !
12900 def logical alpha (string s)
12910   exit left(s,1) >= "a" and left(s,1) <= "z"
12920 endf alpha
12930 !
12940 !
12950 def logical numeric (string s)
12960   exit left(s,1) >= "0" and left(s,1) <= "9"
12970 endf numeric
12980 !
12990 !
13000 def integer get.num(string s)
13010   integer i, r
13020   string c
13030   r = 0
13040   for i = 1 to length(s)
13050     c = substr(s, i, 1)
13060     if not numeric(c) then exit -1
13070     r = r * 10 + (asc(c) - asc("0"))
13080     if r > 99999 then exit -1
13090   next i
13100   exit r
13110 endf get.num

14000 def clr.data
14001 if data.gathered then
14002   tab.cnt = 1
14003   gosub 163
14004 endif
14010   call clrtim
14020   data.gathered = false
14021   need.tables = true
14030 endf clr.data
14040 !
14050 def bld.tables
14051   if not need.tables then return
14060   tab.cnt = 0
14070   for i = 0 to 34
14080     if active(i) then
14090       table.map(i) = tab.cnt
14100       tab.cnt = tab.cnt + 1
14110     endif
14120   next i
14121   gosub 163
14122   need.tables = false
14130 endf bld.tables
15000 def adjust
15001   if not adjust.before then
15010     data 11.339717, 3.1681999, 6.2641497
15020     real noise, rhed, disp.s
15030     read noise, rhed, disp.s
15040     data 4.462324, 6.925479, 3.2292032
15050     real dx, yi, sp
15060     read dx, yi, sp
15061     !
15062     data .0000003574681, .000005975922
15063     real dx2, yi2
15064     read dx2, yi2
15070     data .97217462, .97217462, .6527317, 1.3099175, &
               .653844, 109.29096, .653844, 47.838632, &
               2.1362746, 2.1362746
15080     real clocks(max.opt,2)
15090     read clocks
15091     !
15120     !
15130     !
15140     integer adj.order(max.opt)
15150     data 0,1,4,3,2
15160     read adj.order
15161     !
15162     integer mstm,ment
15163     data 4,2
15164     read mstm,ment
15165     !
15166     logical adjust.before
15167     adjust.before = true
15168   endif
15170   !
15180   integer j, k, tbn, n, i
15181   real clk.s, clk.d
15190   !
15200   !
15210   !
15220   for k = 1 to max.opt
15230     i = adj.order(k)
15240     if active(i) then
15250       tbn = table.map(i)
15260       name subtab = adj.table(tbn,*)
15270       on i+1 gosub 15500, 16000, 16500, 17000, 17500
15280     endif
15290   next k
15300   call clrtim
15310   real stmtab(0:0), enttab(0:0), mictab(0:0), cortab(0:0)
15320   exit
15330   !
15340   !
15500   real stmtab(par.ndx+1)
15510   stmtab(j) = rddat(tbn,j)  for j = 1 to par.ndx+1
15520   stmtab(j) = stmtab(j) - mstm
15530   subtab(j) = subtab(j) + stmtab(j)  for j = 1 to par.ndx+1
15540   return
15550   !
15560   !
15570   !
16000   real enttab(par.ndx+1)
16010   enttab(j) = rddat(tbn,j)  for j = 1 to par.ndx+1
16020   enttab(j) = enttab(j) - ment
16030   subtab(j) = subtab(j) + enttab(j) for j = 1 to par.ndx+1
16040   return
16050   !
16060   !
16070   !
16500   subtab(j) = subtab(j) + rddat(tbn,j)/10000 &
                    - mictab(j)*(dx2*cortab(j)+yi2) for j = 1 to par.ndx+1
16501   subtab(j) = max(subtab(j),0) for j = 1 to par.ndx
16510   return
16520   !
16530   !
16540   !
17000   real mictab(par.ndx+1)
17010   clk.s = 0
17020   clk.d = 0
17030   for n = 34
17040     if active(n) then
17050       clk.s = clk.s + clocks(n+1,1)
17060       clk.d = clk.d + clocks(n+1,2)
17070     endif
17080   next n
17090   for n = 1 to par.ndx
17100     mictab(n) = rhed*stmtab(n)+disp.s*(stmtab(n)-enttab(n))
17110     mictab(n) = mictab(n)+enttab(n)*((par.ndx)*dx+yi)
17120     mictab(n) = mictab(n)+clk.s*(stmtab(n)-enttab(n))
17130     mictab(n) = mictab(n)+clk.d*enttab(n)
17140   next n
17150   n = par.ndx+1
17160   if n = 1 then
17170     mictab(n) = sp*(stmtab(n)+4)
17180   else
17190     mictab(n) = (dx*par.ndx+yi)*(stmtab(n)+4)
17200   endif
17210   mictab(n) = mictab(n)+rhed*stmtab(n)
17220   mictab(n) = mictab(n)+clk.s*(stmtab(n)-enttab(n)+3)
17230   mictab(n) = mictab(n)+clk.d*(enttab(n)+1)
17240   mictab(n) = mictab(n)+noise
17250   subtab(n) = subtab(n) + rddat(tbn,n) for n = 1 to par.ndx+1
17260   subtab(n) = subtab(n) - mictab(n)  for n = 1 to par.ndx+1
17261   subtab(n) = max(subtab(n),0) for n = 1 to par.ndx+1
17270   return
17280   !
17290   !
17300   !
17500   real cortab(par.ndx+1)
17501   for n = 1 to par.ndx
17502     if stmtab(n) = 0 then
17503       cortab(n) = 0
17504     else
17505       cortab(n) = rddat(tbn,n)/stmtab(n)
17506     endif
17507   next n
17510   n = par.ndx+1
17520   cortab(n) = rddat(tbn,n)/(stmtab(n)+mstm)
17521   subtab(n) = cortab(n) for n = 1 to par.ndx+1
17530   return
18000 endf adjust
  5XM_