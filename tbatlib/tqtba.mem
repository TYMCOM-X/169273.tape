


                   TYMQUOTE and TYMBASIC INTERFACE
                   ________ ___ ________ _________






           TYMQUOTE can now be accessed using  the  FORTRAN  interface
      within  TYMBASIC.   This feature makes available to the user the
      simplicity of using a BASIC  language,  the  convenience  of  an
      interactive  package,  as  well  as  the power and efficiency of
      TYMBASIC which was designed for creating major systems.

           TYMBASIC  requires  that  each   of   the   functions   and
      subroutines be defined explicitly.  There is also a special load
      string for TYMBASIC users.  All of this has been taken  care  of
      with a command file available in "TBATLIB".  To make use of this
      special command file , it is necessary to create  programs  with
      line  numbers  greatter  than 499.   The  command file adds code
      directly into the users program.  To use the command file, while
      in TBA type:

                >DO (TBATLIB)TQMERGE
                 __ ________________

      and TYMBASIC will add the lines of  code  to  your  program  and
      include  the Load strings.  Once the code has been added to your
      program and saved, the Load strings can be  accessed  separately
      by typing:

                >DO (TBATLIB)TQLOAD
                 __ _______________

      A typical compile and run of a TQ program called TQSAMP might be
      as follows (the user types the underlined):

                - TBA
                  ___
                Ver 2.5-1.0
                > GET TQSAMP
                  ___ ______
                > DO (TBATLIB)TQMERGE
                  __ ________________
                > RUN
                  ___


           The sample program which you have seen coded in FORTRAN and
      COBOL  will  be  shown  below  as it is directly translated into
      TYMBASIC.  It should be noted that there  are  some  differences
      that  the  coder  must  be  aware of.  while using TYMBASIC, all
      arrays must be declared explicitly.  Also, it  is  necessary  to
      declare  variables  as  integer  even  if  the  names begin with
      characters like I, J, K, etc.  Remember that in TBA all  numeric
      variables are assumed to be real unless otherwise declared.  The
      coder must also note that un-like  FORTRAN,  TBA  differentiates
      between  string and integer variables.  This introduces the need
      for additional code when passing string values to, or  receiving
      string values from FORTRAN.
                                                                Page 2


           Due to the fact that fortran stores its  string  values  in
      integer  variables, it is necessary to convert the string values
      to integers and the returned integer  values  back  to  strings.
      included  in  "tqmerge"  are  four  special functions to aid the
      programmer.  they are:
           F.CHR(INTEGER) = returns a  string  value  from  a  FORTRAN
      integer
           F.CHRA(INTEGER ARRAY) = returns a single TBA  string  value
      from an array of FORTRAN integers
           F.ASC(STRING$) = returns a scaler  integer  value  for  the
      first five (5) characters of the string
           F.ASCA(STRING$) = returns an array of integer  values  each
      containing five (5) characters

           The following is the copy of the code directly  translated.
      it  might  be  noted  that  there  has  been  no attempt to gain
      efficiency through the use of special features of TYMBASIC,  but
      rather to maintain consistancy with the FORTRAN example.

           1500   STRING ISSUER$, ISSUE$, IDATE$, IPRICE$, IEX$
           1600   INTEGER ISSUER(6), ISSUE(4), IDATE(3), IPRICE(2), ICTC(2)
           1700   INTEGER IER, IDAY, IM, ID, IY, IREL, MADJ, MHOL, MEIL, MCLS
           1800   INTEGER ITEM, IROUND, IMODE, ASCII.
           1900   REAL PRICE
           2800   CALL XSET(0, -1, 1, 1, -1)
           3100   CALL RDATE( IDAY, IER )
           3200   IF IER THEN STOP 'EXECUTION ENDED'
           3500   CALL RDCTC( ICTC, IER)
           3700   IF IER=-1 THEN 3100
           4000   CALL XGET( ICTC, IER )
           4200   IF IER THEN 3500
           4500   PRICE = XPRICE( IDAY )
           4900   IEX$ = F.CHR( ITEMX( F.ASC( 'EXC' )))
           5000   IROUND = 2
           5100   IF LEFT(IEX$,1) = 'F' OR LEFT(IEX$,1) = 'G'  THEN IROUND= -1
           5200   CALL FPRICE( PRICE, IROUND, IPRICE )
           5300   IPRICE$ = F.CHRA( IPRICE )
           5400   CALL GETDAT( IDAY, IM, ID, IY, IER )
           5500   CALL ADATE( IM, ID, IY, IDATE, IER )
           5800   CALL XITEM( F.ASC( 'NAM' ), ISSUER)
           5900   CALL XITEM( F.ASC( 'ISS' ), ISSUE )
           6200   PRINT F.CHRA( ISSUER );F.CHRA( ISSUE )
           6300   PRINT ' THE PRICE IS ':IPRICE$:' ON ': F.CHRA(IDATE)
           6400   GOTO 3500


           The following  is  the  identical  program  including  some
      comments  to  aid  in  understanding  the design and flow of the
      program.

                                                                Page 3


           1000 !--  PROGRAM QUOTE  AS WRITTEN IN TYMBASIC
           1100 !--  FUNCTION:  TO READ THE DATE, CUSIP NUMBER OR TICKER
           1200 !--    SYMBOL, AND TO TYPE OUT THE CLOSING PRICE.
           1300 !--    
           1400 !--  DECLARATION STATEMENTS:
           1500   STRING ISSUER$, ISSUE$, IDATE$, IPRICE$, IEX$
           1600   INTEGER ISSUER(6), ISSUE(4), IDATE(3), IPRICE(2), ICTC(2)
           1700   INTEGER IER, IDAY, IM, ID, IY, IREL, MADJ, MHOL, MEIL, MCLS
           1800   INTEGER ITEM, IROUND, IMODE, ASCII.
           1900   REAL PRICE
           2000 !--  NOTE:  ALL ARRAYS MUST BE DECLARED.  ALSO, IT IS NECESSARY
           2100 !--    TO DECLARE VARIABLES AS INTEGER EVEN IF THE NAMES BEGIN
           2200 !--    WITH CHARACTERS LIKE I, J, K, ETC.  REMEMBER ALSO THAT
           2300 !--    UNLIKE FORTRAN, STRING AND INTEGER VAR ARE DIFFERENT.
           2400 !--
           2500 !--  EXTRACT UN-ADJUSTED PRICES, FILL IN MISSING PRICES
           2600 !--  WITH LAST PREVIOUS TRADE'S, AND USE BID FOR CLOSE
           2700 !--  FOR BID/ASK QUOTATIONS.
           2800   CALL XSET(0, -1, 1, 1, -1)
           2900 !--
           3000 !--  READ DATE FROM TTY
           3100   CALL RDATE( IDAY, IER )
           3200   IF IER THEN STOP 'EXECUTION ENDED'
           3300 !--
           3400 !--  READ CUSIP OR TICKER CODE FROM TTY
           3500   CALL RDCTC( ICTC, IER)
           3600 !--  IF <CR> ENTERED, RETURN TO DATE INPUT
           3700   IF IER=-1 THEN 3100
           3800 !--
           3900 !--  FIND ISSUE IN TQ DATABASE
           4000   CALL XGET( ICTC, IER )
           4100 !--  IF ISSUE NOT FOUND, READ ANOTHER FROM THE TERMINAL
           4200   IF IER THEN 3500
           4300 !--
           4400 !--  GET THE PRICE
           4500   PRICE = XPRICE( IDAY )
           4600 !--  
           4700 !--  REFORMAT THE PRICE AND DATE FOR OUTPUT.
           4800 !--  NOTE:  THE SPECIAL USE OF THE F.CHR AND F.ASC FUNCTIONS
           4900   IEX$ = F.CHR( ITEMX( F.ASC( 'EXC' )))
           5000   IROUND = 2
           5100   IF LEFT(IEX$,1) = 'F' OR LEFT(IEX$,1) = 'G'  THEN IROUND= -1
           5200   CALL FPRICE( PRICE, IROUND, IPRICE )
           5300   IPRICE$ = F.CHRA( IPRICE )
           5400   CALL GETDAT( IDAY, IM, ID, IY, IER )
           5500   CALL ADATE( IM, ID, IY, IDATE, IER )
           5600 !--
           5700 !--  TYPE ISSUE DESCRIPTION, PRICE AND DATE
           5800   CALL XITEM( F.ASC( 'NAM' ), ISSUER)
           5900   CALL XITEM( F.ASC( 'ISS' ), ISSUE )
           6000 !--  NOTE:  THE USE OF THE CONVERSION FUNCTIONS CAN BE RESERVED
           6100 !--    UNTIL THEY ARE NEEDED (AS IN THE PRINT STATEMENT).
           6200   PRINT F.CHRA( ISSUER );F.CHRA( ISSUE )
           6300   PRINT ' THE PRICE IS ':IPRICE$:' ON ': F.CHRA(IDATE)
           6400   GOTO 3500
                                                                Page 4


           The  following  are  runs  of  the  sample  program   using
      different  methods.   METHOD 1 will show the steps involved when
      the "TQSAMP" program contains only the  code  generated  by  the
      user.   METHOD  2 will show the steps involved when the "TQSAMP"
      program contains  both  the  users  code  and  the  contents  of
      "TQMERGE".   METHOD 3 will show the steps involved in making and
      running a save version of the code.  This last  method  is  more
      cost effective in production-type systems.

      METHOD 1:

           -TBA
            ___
           Ver 2.5-1.0
           >GET TQSAMP
            ___ ______
           >DO (TBATLIB)TQMERGE
            __ ________________
           >RUN
            ___
           TQSAMP.  added to module list

           ENTER DATE:  1/2/68
                        ______

           ISSUE:  IBM
                   ___
           INTERNATIONAL BUSINESS MACHS
            THE PRICE IS  613 1/2   ON JAN.  2, 1968

           ISSUE:  HJ
                   __
           HOWARD JOHNSON CO
            THE PRICE IS   42 5/8   ON JAN.  2, 1968

           ISSUE:

           ENTER DATE:  1/2/75
                        ______

           ISSUE:  IBM
                   ___
           INTERNATIONAL BUSINESS MACHS
            THE PRICE IS  168 7/8   ON JAN.  2, 1975

           ISSUE:  

           ENTER DATE:
           EXECUTION ENDED

           >Q
            _

           EXIT

           -



                                                                Page 5


      METHOD 2:

           -TBA
            ___
           Ver 2.5-1.0
           >GET TQSAMP
            ___ ______
           >DO (TBATLIB)TQLOAD
            __ _______________
           >RUN
            ___
                |
                |
                |
                |
                |
                |
           >Q
            _

           EXIT

           -



      METHOD 3:  there are 2 STEPS
        STEP 1:

           -TBA
            ___
           Ver 2.5-1.0
           >GET TQSAMP
            ___ ______
           >DO (TBATLIB)TQMERGE
            __ ________________
           >SAVE BINARY
            ____ ______
           TQSAMP.SHR:  New file, OK?  Y
                                       _
           TQSAMP.  added to module list

           >Q
            _

           EXIT

           -

        STEP 2:

           -GO TQSAMP
            __ ______

           ENTER DATE:  1/2/68
                        ______

           ISSUE:  IBM
                   ___
           INTERNATIONAL BUSINESS MACHS
            THE PRICE IS  613 1/2   ON JAN.  2, 1968

           ISSUE:

           ENTER DATE:
           EXECUTION ENDED

           -
                                                                Page 6


           Once the ".SHR" file has been generated, the user may rerun
      the program directly from XEXEC without entering TBA.  This will
      eliminate the need to compile and therefore reduce the  cost  of
      running  the  program.  Greater familiarity with both TQ and TBA
      on the part of the programmer and user, will result in increased
      efficiency and flexibility in meeting the needs of the user.






