100 print
110 print "       ***** Tymbasic Conversion Aid *****"
120 print "TCA is intended as a conversion aid to assist the user in"
130 print "converting BASIC programs to TYMBASIC and will drastically"
140 print "reduce the number of statements which must be manually changed."
150 print
160 integer max.prolog,max.using,max.arrays
170 ! CONVERT TO TBA
180 !
190 ! This program is intended to provide framework and a bunch of utility
200 ! routines to facilitate conversions from inferior BASICs to TBA.
210 ! Hopefully, more utility proceedured will be added as our experience
220 ! grows, and there will continue to be separation between utilities
230 ! and the special hacks written to accomodate each customer's
240 ! programming style(?).
250 !
260 def integer external  open.inp.file
270 def integer external  open.out.file
280 def         external  close.files
290 def string  external  get.record( string Prompt)
300 def real    external  get.num( string Prompt)
310 def LOGICAL external  YES.OR.NO(STRING PROMPT)
320 def external do.options (string opt.stg(*), integer (opt.vals(*), opt.cnt))

330 integer max.options
340 max.options = 14
350 integer exp.arrays,exp.using,exp.prolog,xbasic,star.rem,no.opens
360 integer changes.only,spec.alphas,dump.arrays,dump.core
370   exp.arrays    = 1
380   exp.using     = 2
390   exp.prolog    = 3
400   reassure      = 4
410   changes.only  = 5
420   dump.arrays   = 6
430   spec.alphas   = 7
440   dump.core     = 8
450   ge            = 9
460   max.opens     = 10
470   no.trans      = 11
480   xbasic        = 12
481   star.rem      = 13
482   no.opens      = 14
490 !
500 string option.names(max.options)
510   option.names(exp.arrays)      = "ARRAYS ="
520   option.names(exp.using)       = "USING ="
530   option.names(exp.prolog)      = "PROLOG ="
540   option.names(changes.only)    = "CHANGES ONLY"
550   option.names(max.opens)       = "OPENS ="
560   option.names(dump.arrays)     = "DUMP ARRAYS"
570   option.names(reassure)        = "REASSURE ="
580   option.names(spec.alphas)     = "SPECIAL ALPHAS"
590   option.names(dump.core)       = "DUMP CORE USAGE"
600   option.names(ge)              = "GE"
610   option.names(no.trans)        = "FORMAT TRANSLATION"
620   option.names(xbasic)          = "XBASIC"
621   option.names(star.rem)        = "STAR REMARK"
622   option.names(no.opens)        = "OPEN TRANSLATION"
630 !
640 integer option.vals(max.options)
650   option.vals(exp.arrays)       = 100
660   option.vals(exp.using)        = 100
670   option.vals(exp.prolog)       = 100
680   option.vals(changes.only)     = false
690   option.vals(reassure)         = 0
700   option.vals(dump.arrays)      = false
710   option.vals(spec.alphas)      = false
720   option.vals(dump.core)        = false
730   option.vals(ge)               = false
740   option.vals(max.opens)        = 100
750   option.vals(no.trans)         = true
760   option.vals(xbasic)           = false
761   option.vals(star.rem)         = false
762   option.vals(no.opens)         = true

770 integer in.file, out.file
780   in.file = open.inp.file,  out.file = open.out.file
790 logical kill.original
800   call do.options(option.names, option.vals, max.options)
810  max.prolog = option.vals(exp.prolog)
820  max.using = option.vals(exp.using)
830  max.arrays = option.vals(exp.arrays)
840 !
850 logical one.line
860 integer min.line,max.line
870 integer ln ! line number of the current line
880 integer phy.ln ! physical line number
890 integer reas.ln !reassurance line count
900 !
910 integer token.type  !  set by PEEL.x   0=special character
920                                 !          1=alpha
930                                 !          2=numeric
940                                 !          3=alpha-numeric
950                                 !          4=identifier
960 string orig.line, curr.token, left.part, right.part, first.token
970 string old.right.part
980   ! orig.line is input from the original program and the intent is
990         ! that it never be modified.  With this convention it's handy
1000         ! for diagnostics, for output to the converted file, and,
1010         ! possibly, restarting if your code decides it's blown it.
1020    ! curr.token is set as a side ffect of procedures named PEEL.x
1030    ! left.part is for you to build up as you see fit, if you want a global
1040         ! variable for it.
1050    ! right part is initialized =orig.line and is eaten away by 
1060         ! procedures named PEEL.x
1070     ! first.token is set to the first token after the line number.
1080    !
1090 string comment.part !  set up by check.comment
1100   !
1110 string comment.mark, string.mark1, string.mark2
1120    if option.vals(ge) or option.vals(xbasic) then
1130      comment.mark = "'"
1140      string.mark1 = '"'
1150      string.mark2 = '"'
1160    else
1170      comment.mark = "!"
1180      string.mark1 = '"'
1190      string.mark2 = "'"
1200    endif
1210 integer prol.ptr
1220   string prolog(max.prolog)
1230   integer pro.keys(max.prolog)
1240   !
1250 integer lines.out  !  just a counter in emit
1260    integer pu.ptr, fmt.ptr
1270    string pu.stmts(max.using), fmt.stmts(max.using)
1280    integer pu.ln(max.using), fmt.ln(max.using)
1290    integer pu.fmt.ndx(max.using), fmt.ref.cnt(max.using)
1300    ! 
1310 integer pb.size
1320   pb.size = 10
1330   string pat.buf(0:pb.size)   ! pattern buffer - see the pattern-matching &
                                ! stuff below
1340 integer for.level  !  to measure nesting
1350 !
1360 integer aname.ptr
1370   string aname.buf(max.arrays)
1380   logical dim.flgs(max.arrays)
1390   logical ref.flgs(max.arrays)
1400   logical line.change, fix.up
1410   !

1420 logical repack
1430 data "IF","FOR","NEXT","PRINT","INPUT","DIM","CHAIN","GOSUB","GOTO"
1440 data "ON","REM","MAT","RETURN","END","READ","DATA","PAUSE","STOP"
1450 data "OPEN","GET","PUT","CLOSE","RESTORE","LET","DEF"
1460 data "RANDOM","RANDOMIZE","WRITE","DIMENSION","????"
1470 integer max.keys
1480 max.keys = 30
1490 string key.words(max.keys)
1500 read key.words

1510 integer c.all, c.dim, c.ary
1520   c.ary = 0
1530   c.dim = 1
1540   c.all = 2
1550 !
1560 logical used.runuuo
1570 integer max.io, opn.ptr, io.ptr
1580 max.io = option.vals(max.opens)
1590 string io.units(max.io), io.used(max.io)

1600 ! A little left over initialization
1610 call enter.prolog("! Converted " + date, 0)
1620 if option.vals(xbasic) then call enter.prolog("base 0",0)
1630 one.line = false
1640 if option.vals(spec.alphas) then
1650   asctable(asc("#")) == asctable(asc("["))
1660   l.alpha$ = "@"
1670   u.alpha$ = "#"
1680 else
1690   l.alpha$ = "A"
1700   u.alpha$ = "Z"
1710 endif

1720 print
1730 ! Here the processing begins
1740 !
1750 on endfile(in.file) goto 2080
1760 !
1770 input from in.file in form "R": orig.line
1780 phy.ln = phy.ln + 1
1790 if option.vals(reassure) > 0 then
1800   reas.ln = reas.ln + 1
1810   if reas.ln = option.vals(reassure) then
1820     print "Working on statement ": ln
1830     reas.ln = 0
1840   endif
1850 endif
1860 fix.up = true
1870 call check.comment( orig.line) ! sets right.part, comment part
1880 left.part = ""
1890 ln = peel.num
1900 old.right.part = right.part
1910 first.token = peel.token
1920 call save.limits(ln)
1930 kill.original = false
1940 call do.line
1950 if not kill.original then
1960   if fix.up then
1970     right.part = fix.line(old.right.part,c.ary)
1980   else
1990     line.change = false
2000     right.part = old.right.part
2010   endif
2020   if not option.vals(changes.only) or line.change then
2030     call emitc(ln,right.part)
2040   endif
2050 endif
2060 goto 1770
2070 !
2080 ! Here on end of file
2090 call post.process
2100 call close.files
2110 stop
2120 !

2130 ! diagnostics and other remarks to the user
2140 !
2150 def check.over (integer (value,ndx))
2160   if value < option.vals(ndx) then exit
2170   print 'Overflow for "'+option.names(ndx)+'" option'
2180   stop
2190 endf check.over
2200 !
2210 def tell.where
2220   print "At line": phy.ln
2230   print orig.line
2240   exit
2250 endf tell.where
2260 !
2270 def trouble( string r)
2280   print r
2290   call tell.where
2300   if yes.or.no( "Continue") then exit else stop
2310 endf trouble
2320 !
2330 def not.recognized
2340   print "Statement not recognized ":
2350   call tell.where
2360   exit  !  you might want to make this a PAUSE 
2370 endf not.recognized
2380 !
2390 def notice( string r)
2400   print r
2410   call tell.where
2420   exit
2430 endf notice
2440 !
2450 def string gen.img.name( integer img.num)
2460   ! You may well want to have more name generators. Thinking of the
2470   ! cross-referance listing, it seemed to me that 99 IMAGEs was
2480   ! plenty, and this would still generate legel code if we
2490   ! overflew.  Other techniques are possible, and more entertaining,
2500   ! for that matter.
2510   exit  "IMG" + ljust(str(img.num)) + "$"
2520 endf gen.img.name
2530 !
2540 def string gen.array.name( string an)
2550   ! We generate an array name by appending or inserting before the
2560   ! final $ '.a'. The choice of lower case 'a' is to make these 
2570   ! identifiers easy to find in the program later.
2580   if right(an,1)="$" then
2590     exit left( an, length(an)-1) + ".a$"
2600   else
2610     exit an + ".a"
2620   endif
2630 endf gen.array.name
2640 !
2650 def string transliterate( string a)
2660   ! This is a pure hack cuz I can't find the bug in old code...
2670   !
2680   if not option.vals(no.trans) then exit a
2690   string b, t
2700   integer i
2710   b = ""
2720   for i = 1 to length(a)
2730     t = substr(a,i,1)
2740     if t = "'" or t = "#" or t = "L" or t = "C" then
2750       b = b + "%"
2760     else
2770       b = b + t
2780     endif
2790 next i
2800   exit b
2810 endf transliterate
2820 !
2830 !

2840 !         PATTERN MATCHING CODE
2850 ! The routines names show what patterns they will try to match. In these
2860 ! names,
2870 !       X = any (perhaps null) string
2880 !       I = identifier
2890 !       P = pattern specified literally - like "("
2900 !       B = any number (perhaps zero) of blanks -- maximal string
2910 ! Therefore pat.XIPX will try to match an identifier followed by a
2920 ! paren if called as   pat.XIPX(s,1,"(")
2930 ! In each case, the first argument is the string to be taken apart,
2940 ! the second argument is the PAT.BUF index to drop the first matched
2950 ! string into (the rest will follow in sequence) and the remaining args
2960 ! are enough strings to provide P's for the search.  The result is
2970 ! always logical, with the side effect of putting pieces of your string
2980 ! in PAT.BUF if successful. (Maybe garbage if not)
2990 !
3000 def logical pat.XIPX( string s, integer org, string pat)
3010   if pat.XPX( s, 2, pat) then
3020     exit pat.XI( pat.buf(2), 1)
3030   else
3040     exit false
3050   endif
3060 endf pat.XIPX
3070 !
3080 def logical pat.XPX( string s, integer org, string pat)
3090   integer i
3100   i = index( s, pat)
3110   if i=0 then
3120     exit false
3130   else
3140     pat.buf(org  ) = left( s, i-1)
3150     pat.buf(org+1) = pat
3160     pat.buf(org+2) = substr( s, i+length(pat))
3170     exit true
3180   endif
3190 endf pat.XPX
3200 !
3210 def logical pat.XI( string s, integer org)
3220   integer i
3230   s = rjust(s),  i = length(s)
3240   if substr(s,i,1)="$" then  i = i-1
3250   if numeric(substr(s,i,1)) then  i = i-1
3260   if alpha(substr(s,i,1)) then
3270     i = i-1
3280     if not( alpha(substr(s,i,1)) or numeric(substr(s,i,1))) then
3290       pat.buf(org) = left(s,i)
3300       pat.buf(org+1) = substr(s,i+1)
3310       exit true
3320     endif
3330   endif
3340   exit false
3350 endf pat.XI
3360 !
3370 def logical pat.PX( string s, integer org, string pat)
3380   if index(s,pat)=1 then
3390     pat.buf(org) = pat,  pat.buf(org+1) = substr( s, length(pat)+1)
3400     exit true
3410   else
3420     exit false
3430   endif
3440 endf pat.PX
3450 !
3460 def logical pat.XB( string s, integer org) ! all the trailing blanks
3470   pat.buf(org) = rjust(s)
3480   pat.buf(org+1) = space( length(s) - length(pat.buf(org)))
3490   exit true
3500 endf pat.XB
3510 !
3520 def logical pat.XP( string s, integer org, string pat)
3530   integer l
3540   l = length(pat)
3550   if right(s,l)=pat then
3560     pat.buf(org) = left( s, length(s)-l)
3570     pat.buf(org+1) = pat
3580     exit true
3590   else
3600     exit false
3610   endif
3620 endf pat.XP
3630 !
3640 def logical pat.XPB( string s, integer org, string pat)
3650   call pat.XB( s, 2)  !  always true
3660   exit pat.XP( pat.buf(2), 1, pat)
3670 endf pat.XPB
3680 !
3690 def logical pat.BX (string s, integer org)
3700   pat.buf(org+1) = ljust(s)
3710   pat.buf(org) = space( length(s) - length(pat.buf(org+1)))
3720   exit true
3730 endf pat.BX
3740 !

3750 def string peel.token  !  sets right.part, curr.token, token.type
3760   integer i
3770   string c
3780   token.type = 0,  right.part = ljust(right.part)
3790   if right.part="" then
3800     curr.token = ""
3810     exit
3820   endif
3830   c = left(right.part,1),  i = 1
3840   !
3850   if Alpha(c) then
3860     token.type = token.type bor 1
3870   orif numeric(c) and (token.type ban 5 = 0 or maybe.var(i)) then
3880     token.type = token.type bor 2
3890   orif c="$" and maybe.var(i) then
3900     call peel(i)
3910     token.type = 4
3920     exit curr.token
3930   else ! special character -- terminate
3940     if maybe.var(i) then token.type = 4
3950     if token.type#0 then  i = i-1  ! back up over terminator if identifier
3960     call peel(i)
3970     exit curr.token
3980   endif
3990   i = i+1,  c = substr( right.part, i, 1)
4000   goto 3850
4010   !
4020 endf peel.token
4030   !
4040 def logical maybe.var (integer ti)
4050  exit ((token.type=1 and ti=2) or (token.type=3 and ti=3))
4060 endf maybe.var
4070   !
4080 !
4090 def integer peel.num  !  sets right.part, curr.token, token.type
4100   !
4110   integer i
4120   string c
4130   token.type = 0,  right.part = ljust(right.part)
4140   c = left(right.part,1),  i = 1
4150   if right.part="" or not numeric(c) then
4160     curr.token = ""
4170     exit
4180   endif
4190   i = i+1,  c = substr(right.part,i,1)                         while numeric(c) and i<=length(right.part)
4200   call peel(i-1)
4210   token.type = 2
4220   exit val(curr.token)
4230 endf peel.num
4240 !
4250 def peel( integer k)
4260   curr.token = left(right.part,k),  right.part = substr(right.part,k+1)
4270   exit
4280 endf peel
4290 !
4300 def logical numeric( string x)
4310   exit ("0"<=x and x<="9")
4320 endf numeric
4330 !
4340 def logical alpha( string x)
4350   exit (l.alpha$<=x and x<=u.alpha$)
4360 endf alpha
4370 !

4380 def save.limits (integer ln)
4390   if one.line then
4400     if ln < min.line then
4410       if ln > 0 then min.line = ln
4420     else
4430       if ln > max.line then max.line = ln
4440     endif
4450   orif ln > 0 then
4460     min.line, max.line = ln
4470     one.line = true
4480   endif
4490   exit
4500 endf save.limits
4510 !
4520 def enter.prolog( string new.pro, integer new.key)
4530   integer ub, lb, probe, nxt.line
4540   call check.over(prol.ptr,exp.prolog)
4550   lb = 0
4560   ub = prol.ptr+1
4570   probe = (lb+ub) div 2
4580   if probe # lb then
4590     if new.key # pro.keys(probe) then
4600       if new.key < pro.keys(probe) then ub=probe else lb=probe
4610       goto 4570
4620     endif
4630   endif
4640   if probe <= prol.ptr then
4650     for i = prol.ptr+1 to probe+1 by -1
4660       pro.keys(i+1) = pro.keys(i)
4670       prolog(i+1) = prolog(i)
4680     next i
4690   endif
4700   pro.keys(probe+1) = new.key
4710   prolog(probe+1) = new.pro
4720   prol.ptr = prol.ptr+1
4730   exit
4740 endf enter.prolog
4750 !
4760 def emit( integer n, string l)
4770   call save.limits(n)
4780   print on out.file in form "6q b r": n, l
4790   lines.out = lines.out+1
4800   exit
4810 endf emit
4820 !
4830 def emitc( integer n, string l) ! emit with comment from original line
4840   if comment.part#"" then l = l + " ! " + comment.part
4850   call emit( n, l)
4860   exit
4870 endf emitc
4880 !
4890 def emit.prolog
4900   integer i, nxt.line
4910   if prol.ptr < min.line then
4920     for i = 1 to prol.ptr
4930       call emit(i,prolog(i))
4940     next i
4950   else
4960     if min.line > 2 then
4970       nxt.line = (max.line+999)/1000
4980       nxt.line = nxt.line*1000
4990       call emit(1,prolog(1))
5000       call emit(2,"GOSUB "+str(nxt.line+10))
5010       call emit(nxt.line,"STOP")
5020       for i = 2 to prol.ptr
5030         nxt.line = nxt.line+10
5040         call emit(nxt.line,prolog(i))
5050       next i
5060       call emit(nxt.line+10,"RETURN")
5070     else
5080       call trouble("Cannot emit prolog, min line = "+str(min.line))
5090     endif
5100  endif
5110 endf emit.prolog
5120 !
5130 def enter.pusing (string s, integer(l,fmt))
5140   integer ndx
5150   !
5160   call check.over(pu.ptr,exp.using)
5170   pu.ptr = pu.ptr+1
5180   pu.stmts(pu.ptr) = s
5190   pu.ln(pu.ptr) = l
5200   !
5210   call check.over(fmt.ptr,exp.using)
5220   ndx = search(fmt,fmt.ln,fmt.ptr)
5230   if ndx > fmt.ptr then
5240     fmt.stmts(ndx) = ""
5250     fmt.ref.cnt(ndx) = 1
5260     fmt.ptr = ndx
5270   else
5280     fmt.ref.cnt(ndx) = fmt.ref.cnt(ndx) + 1
5290   endif
5300   !
5310   pu.fmt.ndx(pu.ptr) = ndx
5320   exit
5330 endf enter.pusing
5340 !
5350 def enter.form (integer fmt, string s)
5360   integer ndx
5370   call check.over(fmt.ptr,exp.using)
5380   ndx = search(fmt,fmt.ln,fmt.ptr)
5390   if ndx > fmt.ptr then
5400     fmt.stmts(ndx) = s
5410     fmt.ref.cnt(ndx) = 0
5420     fmt.ptr = ndx
5430   orif fmt.stmts(ndx) # "" then
5440     call trouble("Duplicate format number")
5450   else
5460     fmt.stmts(ndx) = s   endif
5480   exit
5490 endf enter.form
5500 !
5510 def emit.pu.fmt
5520   integer i, fmt.ndx, d.cnt
5530   !
5540   for i = 1 to pu.ptr
5550     fmt.ndx = pu.fmt.ndx(i)
5560     if fmt.stmts(fmt.ndx) # "" then
5570       if fmt.ref.cnt(fmt.ndx) = 1 then
5580         call emit(pu.ln(i),fmt.stmts(fmt.ndx))
5590         call emit(pu.ln(i)+1,pu.stmts(i))
5600       orif fmt.ref.cnt(fmt.ndx) > 1 then
5610         call emit(pu.ln(i),pu.stmts(i))
5620       endif
5630     else
5640       call emit(pu.ln(i),pu.stmts(i))
5650       print "Missing format:"
5660       print in form "6q b r": pu.ln(i),pu.stmts(i)
5670     endif
5680   next i
5690   !
5700   d.cnt = 0
5710   for i = 1 to fmt.ptr
5720     if fmt.ref.cnt(i) > 1 then
5730       call enter.prolog(fmt.stmts(i),1000+fmt.ln(i))
5740     orif fmt.ref.cnt(i) < 1 then
5750       d.cnt = d.cnt+1
5760       call enter.prolog("! "+fmt.stmts(i),200000+fmt.ln(i))
5770     endif
5780   next i
5790   !
5800   if d.cnt > 0 then
5810     print
5820     print "Number of formats deleted = ": d.cnt
5830     print
5840   endif
5850   exit
5860 endf emit.pu.fmt
5870 !
5880 def post.process
5890   call emit.anames
5900   call emit.pu.fmt
5910   call emit.prolog
5920   call check.io
5930   if option.vals(dump.core) then
5940     print
5950     print "Internal core usage:"
5960     print option.names(exp.arrays): aname.ptr
5970     print option.names(exp.using): max(pu.ptr,fmt.ptr)
5980     print option.names(exp.prolog): prol.ptr
5990     print option.names(max.opens): max(opn.ptr,io.ptr)
6000     print
6010   endif
6020   print phy.ln: " lines on input file"
6030   print lines.out: " lines on output file"
6040   exit
6050 endf post.process
6060 !
6070 def check.io
6080   logical found.one
6090   integer i, j
6100   found.one = false
6110   for i = 1 to io.ptr
6120     for j = 1 to opn.ptr
6130       if io.used(i) # io.units(j) then
6140         next j
6150         if not found.one then print
6160         print "Unit "+io.used(i)+" used for I/O but not obviously opened"
6170         found.one = true
6180     endif
6190   next i
6200   if found.one then print
6210 endf check.io
6220 !
6230 def integer search( integer( t, a(*), n))
6240   integer i
6250   i = 1
6260   a(n+1) = t
6270   i = i+1 while a(i)#t
6280   exit i
6290 endf search

6300 def string.search (string (t, buff(*)), c.ptr, m.ptr)
6310   integer i
6320   call check.over (c.ptr, m.ptr)
6330   t = ljust(t)
6340   buff(c.ptr+1) = t
6350   i=1
6360   i=i+1 while buff(i) # t
6370   exit i
6380 endf string.search
6390 !
6400 def add.array.id( string an, logical dflg, logical rflg)
6410   integer i
6420   i = string.search(an, aname.buf, aname.ptr, exp.arrays)
6430   if i>aname.ptr then
6440     aname.ptr = i
6450     dim.flgs(i) = dflg
6460     ref.flgs(i) = rflg
6470   else
6480     dim.flgs(i) = dim.flgs(i) or dflg
6490     ref.flgs(i) = ref.flgs(i) or rflg
6500   endif
6510   exit
6520 endf add.array.id
6530 !
6540 def emit.anames
6550   string tname, dim.stmt
6560   integer i
6570   !
6580   dim.stmt = ""
6590   !
6600   if aname.ptr > 0 and option.vals(dump.arrays) then
6610     print
6620     print "Arrays:"
6630   endif
6640   for i = 1 to aname.ptr
6650     tname = gen.array.name(aname.buf(i))
6660     if dim.flgs(i) then
6670       if option.vals(dump.arrays) then
6680         if ref.flgs(i) then
6690           print in form "  7X/":tname
6700         else
6710           print in form "  7X'UNREFERENCED'/":tname
6720         endif
6730       endif
6740     else
6750       if dim.stmt = "" then
6760         dim.stmt = "DIM "
6770       else
6780         if length(dim.stmt+tname) > 60 then
6790           call enter.prolog(dim.stmt, 2)
6800           dim.stmt = "DIM "
6810         else
6820           dim.stmt = dim.stmt+", "
6830         endif
6840       endif
6850       dim.stmt = dim.stmt+tname+"(10)"
6860       if option.vals(dump.arrays) then print in form "  7X'IMPLIED'/":tname
6870     endif
6880   next i
6890   if dim.stmt # "" then call enter.prolog(dim.stmt, 2)
6900   if option.vals(dump.arrays) then print
6910   !
6920 endf emit.anames
6930 !
6940 def string fix.line (string source.line, integer mode.flg)
6950   string ls, tname
6960   logical sub.flg, all.flg, d.flg, r.flg
6970   !
6980   all.flg = ( (mode.flg ban 2) # 0)
6990   d.flg = ( (mode.flg ban 1) # 0)
7000   r.flg = not d.flg
7010   line.change = false
7020   right.part = source.line
7030   ls = ""
7040   !
7050   call pat.BX(right.part,1)
7060   ls = ls + pat.buf(1)
7070   right.part = pat.buf(2)
7080   call peel.token
7090   if curr.token = "" then
7100      goto 7560
7110   orif token.type = 4 then
7120     sub.flg = false
7130     if option.vals(spec.alphas) then
7140       if left(curr.token,1) = "@" then
7150         curr.token = "AT"+substr(curr.token,2)
7160         line.change = true
7170       orif left(curr.token,1) = "#" then
7180         curr.token = "HA"+substr(curr.token,2)
7190         line.change = true
7200       endif
7210     endif
7220     if all.flg then
7230       call add.array.id(curr.token,d.flg,r.flg)
7240       sub.flg = true
7250     else
7260       tname = curr.token
7270       call pat.BX(right.part,1)
7280       right.part = pat.buf(2)
7290       call peel.token
7300       if curr.token = "(" then
7310         call add.array.id(tname,d.flg,r.flg)
7320         sub.flg = true
7330       endif
7340       right.part = pat.buf(1)+curr.token+right.part
7350       curr.token = tname
7360     endif
7370     if sub.flg then
7380       curr.token = gen.array.name(curr.token)
7390       line.change = true
7400     endif
7410     ls = ls + curr.token
7420   orif token.type = 0 and string.mark(curr.token) then
7430     ls = ls + curr.token
7440     if pat.XPX(right.part,1,curr.token) then
7450       ls = ls + pat.buf(1)+curr.token
7460       right.part = pat.buf(3)
7470     else
7480       call trouble("unmatched quote")
7490       exit source.line
7500     endif
7510   else
7520     ls = ls + curr.token
7530   endif
7540   go to 7050
7550   !
7560   exit ls
7570   !
7580 endf fix.line
7590 !
7600 !
7610 def logical string.mark( string widget )
7620   exit (widget = string.mark1 or widget = string.mark2)
7630 endf string.mark

7640 def need.runuuo
7650   if not used.runuuo then
7660     used.runuuo=true
7670     call enter.prolog( "DEF INTEGER EXTERNAL SIMPL RUNUUO( STRING F, INTEGER O)", 1)
7680   endif
7690   exit
7700 endf need.runuuo
7710 !
7720 def check.comment( string s)
7730         ! Called for every line, bless it. Set up right.part, comment.part
7740   string lp, rp, quote
7750   integer ndx, ndx1, ndx2, ndx3
7760   !
7770   lp = "", rp = s
7780   !
7790   ndx1 = index(rp,comment.mark)
7800   if ndx1 > 0 then
7810     ndx2 = index(rp,string.mark1)
7820     ndx3 = index(rp,string.mark2)
7830     if (ndx2 > 0 and ndx2 < ndx1) or (ndx3 > 0 and ndx3 < ndx1) then
7840       if ndx3 = 0 or (ndx2 # 0 and ndx2 <= ndx3) then
7850         quote = string.mark1
7860         ndx = ndx2
7870       else
7880         quote = string.mark2
7890         ndx = ndx3
7900       endif
7910       lp = lp + left(rp,ndx)
7920       rp = substr(rp,ndx+1)
7930       ndx = index(rp,quote)
7940       if ndx > 0 then
7950         lp = lp + left(rp,ndx)
7960         rp = substr(rp,ndx+1)
7970         go to 7790
7980       else
7990         call trouble("Unbalanced string delimiter")
8000       endif
8010     endif
8020     right.part = lp + left(rp,ndx1-1)
8030     comment.part = ljust(substr(rp,ndx1+1))
8040   else
8050     right.part = s
8060     comment.part = ""
8070   endif
8080   exit
8090 endf check.comment
8100 !

8110 ! routines for statement processing
8120 !
8121 def found.rem
8122   kill.original = true
8123   call emitc(ln,"! "+right.part)
8124 endf found.rem
8130 def found.format
8140   string new.form
8150   !
8160   kill.original = true
8170   if comment.part#"" then
8180     right.part = right.part+comment.mark+comment.part
8190     comment.part = ""
8200   endif
8210   new.form = gen.img.name(ln) + ' = "' +transliterate(right.part)+ '"'
8220   call enter.form(ln,new.form)
8230   call emit(ln,"!")
8240   exit
8250 endf found.format
8260 !
8270 def found.dim
8280   kill.original = true
8290   call emitc(ln,"DIM "+fix.line(right.part,c.dim))
8300   exit
8310 endf found.dim
8320 !
8330 def found.for
8340   kill.original = true
8350   for.level = for.level+1
8360   right.part = rpad( "FOR " + right.part, 35) + "! LEVEL"
8370   right.part = right.part + str(for.level) + " FOR"
8380   call emitc( ln, fix.line(right.part,c.ary))
8390   exit
8400 endf found.for
8410 !
8420 def found.next
8430   kill.original = true
8440   right.part = rpad( "NEXT " + right.part, 35) + "! LEVEL"
8450   right.part = right.part + str(for.level) + " NEXT"
8460   call emitc( ln, right.part)
8470   for.level = for.level-1
8480   if for.level<0 then
8490     call trouble( "FOR level underflow (too many NEXT's)") ! may not return
8500     for.level = 0
8510   endif
8520   exit
8530 endf found.next
8540 !
8550 def found.open
8551   if not option.vals(no.opens) then exit
8560   string save.rp
8570   kill.original = true
8580   save.rp = right.part
8590   call peel.token
8600   if string.search(curr.token,io.units,opn.ptr,max.opens) > opn.ptr then
8610     opn.ptr = opn.ptr+1
8620   endif
8630   right.part = save.rp
8640   call emitc(ln,"OPEN "+"("+fix.line(right.part,c.ary)+")")
8650 endf found.open
8660 !
8670 def found.get
8680   call do.io("INPUT FROM "," 1")
8690 endf found.get
8700 !
8710 def found.put
8720   call do.io("PRINT ON "," 2")
8730 endf found.put
8740 !
8750 def do.io (string (key, dflt))
8760   string use.unit
8770   kill.original = true
8780   call peel.token
8790   if left(ljust(right.part),1) = ":" then
8800     use.unit = curr.token
8810     right.part = substr(ljust(right.part),2)
8820   else
8830     right.part = curr.token+right.part
8840     use.unit = dflt
8850   endif
8860   call emitc(ln,key+use.unit+":"+fix.line(right.part,c.ary))
8870   if string.search(use.unit,io.used,io.ptr,max.opens) > io.ptr then
8880     io.ptr = io.ptr+1
8890   endif
8900 endf do.io

8910 def found.go
8920   string first.token, rest
8930   first.token = " "+ljust(curr.token)+" "
8940   if pat.XPX(right.part,1,"ON") then
8950     rest = ljust(pat.buf(1))
8960     call emitc(ln,"ON"+fix.line(pat.buf(3),c.ary)+first.token+rest)
8970     kill.original = true
8980   orif repack then
8990     call emitc(ln,first.token+right.part)
9000     kill.original = true
9010   else
9020     fix.up = false
9030   endif
9040 endf found.go
9050 !
9060 def found.chain
9070   kill.original = true
9080   string quote, file.name
9090   quote = peel.token
9100   if string.mark(quote) then
9110     if pat.XPX( right.part, 1, quote) then
9120       file.name = quote + pat.buf(1) + quote
9130       right.part = pat.buf(3)
9140     else
9150       call trouble("Unmatched quote")
9160     endif
9170   else ! pray that hunk is a file name ....
9180     file.name = '"' + quote + '"'
9190   endif
9200   left.part = "CALL RUNUUO( " + file.name + ", 1)"
9210   if right.part#"" then
9220     left.part = left.part + "  !  " + right.part
9230     call notice("Part of CHAIN statement treated as comment")
9240   endif
9250   call emitc( ln, left.part)
9260   call need.runuuo
9270   exit
9280 endf found.chain
9290 !
9300 def found.p.using
9310   integer fnum
9320   fnum = peel.num  ! that should be the format number, but we'll check
9330   if token.type#2 then
9340     call trouble("Format number not found after 'USING'")
9350   else
9360     kill.original = true
9370     left.part = "PRINT IN IMAGE " + gen.img.name(fnum) + ": "
9380     if pat.PX(ljust(right.part),1,",") then right.part = pat.buf(2)
9390     call enter.pusing(left.part+print.fix(right.part), ln, fnum)
9400   endif
9410   exit
9420 endf found.p.using
9430 !
9440  def found.mat
9450   logical flg
9460   string id1,id2,ndx
9470   kill.original = true
9480   flg = pat.XI(rjust(right.part),7)
9490   if flg then
9500     flg = pat.XP(rjust(pat.buf(7)),6,"*")
9510     if flg then
9520       flg = pat.XP(rjust(pat.buf(6)),5,")")
9530       if flg then
9540          flg = pat.XPX(rjust(pat.buf(5)),3,"(")
9550          if flg then
9560            flg = pat.XP(rjust(pat.buf(3)),2,"=")
9570            if flg then
9580              flg = pat.XI(rjust(pat.buf(2)),1)
9590              flg = flg and (ljust(pat.buf(1)) = "")
9600            endif
9610          endif
9620      endif
9630    endif
9640  endif
9650  if flg then
9660    call add.array.id(pat.buf(2),false,true)
9670    call add.array.id(pat.buf(8),false,true)
9680    id1 = gen.array.name(pat.buf(2))
9690    id2 = gen.array.name(pat.buf(8))
9700    ndx = fix.line(pat.buf(5),c.ary)
9710    call emitc(ln, "MAT "+id1+" = ("+ndx+") * "+id2)
9720  else
9730    call emitc(ln, "MAT "+fix.line(right.part,c.all))
9740  endif
9750  exit
9760 endf found.mat
9770 !
9780 def found.if
9790   if not goto.fix("IF","THEN ") then &
       call trouble("'IF' missing 'THEN'")
9910 endf found.if
9920 !
9930 def found.print ! check for trailing semi and change to colon
9940   call emitc(ln,"PRINT "+print.fix(right.part))
9950   kill.original = true
9960 endf found.print
9970 !
9980 def string print.fix (string s)
9990   string lp
10000   integer tndx
10010   !
10020   lp = "", right.part = s
10030   !
10040   if right.part # "" then
10050     call peel.token
10060     if curr.token = ";" then
10070       lp = lp +":"
10080     orif string.mark(curr.token) then
10090       if not delim(right(rjust(lp),1)) then lp = lp+","
10100       lp = lp + curr.token
10110       tndx = index(right.part,curr.token)
10120       if tndx = 0 then
10130         call trouble("Missing string delimiter")
10140         exit s
10150       endif
10160       lp = lp + left(right.part,tndx)
10170       right.part = substr(right.part,tndx+1)
10180       if not delim(left(ljust(right.part),1)) then lp = lp +","
10190     else
10200       lp = lp + curr.token
10210     endif
10220     go to 10040
10230   endif
10240   !
10250   exit fix.line(lp+right.part,c.ary)
10260   !
10270 endf print.fix
10280 !
10290 def logical delim( string s)
10300   exit s = "+" or s = ";" or s = ":" or s = "," or s = ""
10310 endf delim
10320 !
10321 def found.on
10322   if goto.fix("ON","") then
10323   endif
10324 endf found.on
10325 !
10326 def found.rnd
10327   kill.original = true
10328   call emitc(ln, "DUMMY = RND(-1)")
10329 endf found.rnd
10330 def found.write
10340   call trouble ("'WRITE' statement not converted")
10350 endf found.write
10360 !
10370 def logical goto.fix(string (key,target))
10380   integer ndx1,ndx2,sndx,endx
10390   string lp,rp
10400   !
10410   ndx1 = index(right.part,"THEN")
10420   ndx2 = index(right.part,"GO")
10430   if ndx1 + ndx2 = 0 then exit false
10440   !
10450   if ndx1 > 0 then
10460     sndx = ndx1
10480     if ndx2 > 0 then
10490       endx = ndx2-1
10500     else
10510       endx = sndx+3
10520       target = target+" GOTO "
10530     endif
10540   else
10550     sndx = ndx2
10560     endx = ndx2-1
10570   endif
10580   !
10590   lp = left(right.part,sndx-1)
10600   rp = substr(right.part,endx+1)
10610   lp = rjust(lp)
10620   if right(lp,1) = "," then lp = left(lp,length(lp)-1)
10630   !
10640   call emitc(ln,key+" "+fix.line(lp,c.ary)+" "+target+fix.line(rp,c.ary))
10650   kill.original = true
10660   exit true
10670 endf goto.fix

30000 ! This is the proceedure where we spread out over statement types.
30010 ! Strictly as a precaution, we identify each statement type that comes
30020 ! through, so that we can be alerted if something unexpected ( like
30030 ! GET or PUT) shows up.
30040 !
30050 def do.line
30060   string last.token
30070   integer i
30080   repack = false
30090   on token.type+1 gosub 30110,30200,31050,31090,31130
30100   exit
30110         !       token.type=0 -- special character
30120 if curr.token=":" then
30130   call found.format
30131 orif option.vals(star.rem) and curr.token = "*" then
30132   call found.rem
30140 orif length(curr.token)=0 then ! comment
30150 else ! not recognized
30160   call not.recognized
30170 endif
30180 return
30190 !
30200         !       token.type=1 -- alpha
30210 key.words(max.keys) = curr.token
30220 for i = 1 to max.keys
30230   if key.words(i) # curr.token then
30240     next i
30250 endif
30260 !             if   for  next print input   dim chain gosub  goto
30270 !             on   rem   mat return  end  read  data pause  stop
30280 !           open   get   put close restore let   def  random randomize
30290 !          write dimension ????
30300 on i goto  30330,30360,30390,30420,30720,30510,30540,30570,30570, &
                 31020,30780,30600,30780,30780,30720,30780,30780,30780, &
                 30630,30660,30690,30720,30780,30720,30720,30960,30960, &
                 30990,30510,30860
30310 return
30320 !
30330 call found.if
30340 go to 30310
30350 !
30360 call found.for
30370 go to 30310
30380 !
30390 call found.next
30400 go to 30310
30410 !
30420 call peel.token
30430 if curr.token = "USING" then
30440   call found.p.using
30450 else
30460   right.part = curr.token + right.part
30470   call found.print
30480 endif
30490 go to 30310
30500 !
30510 call found.dim
30520 go to 30310
30530 !
30540 call found.chain
30550 go to 30310
30560 !
30570 call found.go
30580 go to 30310
30590 !
30600 call found.mat
30610 go to 30310
30620 !
30630 call found.open
30640 go to 30310
30650 !
30660 call found.get
30670 go to 30310
30680 !
30690 call found.put
30700 go to 30310
30710 !
30720 if repack then
30730   kill.original = true
30740   call emitc(ln,curr.token+fix.line(right.part,c.ary))
30750 endif
30760 go to 30310
30770 !
30780 if repack then
30790   kill.original = true
30800   call emitc(ln,curr.token+right.part)
30810 else
30820   fix.up = false
30830 endif
30840 go to 30310
30850 !
30860 right.part = ljust(right.part)
30870 last.token = curr.token
30880 call peel.token
30890 if token.type = 1 or token.type = 4 then
30900   curr.token = last.token+ljust(curr.token)
30910   repack = true
30920   go to 30210
30930 endif
30940 go to 30310
30950 !
30960 call found.rnd
30970 goto 30310
30980 !
30990 call found.write
31000 goto 30310
31010 !
31020 call found.on
31030 goto 30310
31040 !
31050         !       token.type=2 -- numeric
31060 call not.recognized
31070 return
31080 !
31090         !       token.type=3 -- alpha-numeric
31100   call not.recognized
31110 return
31120 !
31130         !        token.type = 4 -- identifier -- implied LET
31140 return
31150 !
31160 !
31170 !
31180 endf do.line
H {c