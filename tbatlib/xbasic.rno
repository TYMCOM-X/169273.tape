.nj
.flag cap
.p 0
Subject: <xbasic to <tba conversion
.p
Date: September 13, 1977
.p
This document is intended as an aid in converting programs
from <xbasic to <tba and is comprised mainly of notes
left over from a recent <xbasic to <tba conversion which was
done with the aid of the <tca program.
The reader is cautioned that
this document probably does not represent a definitive list
of differences and should be considered for the most part as
a good starting reference.
.p
^&Scientific functions\&
.p
The folowing scientific functions exist in <xbasic and must
be changed for <tba. The <tca program does not do the needed
conversion.
.p 5
.list
.le
COT(X) - Not supported in <tba.
.le
LN(X) - Change to LOG(X).
.le
LOGE(X) - Change to LOG(X).
.le
CLOG(X) - Change to LOG(X).
.els
.p 0
^&String functions\&
.p
The following string functions exist in <xbasic and must be
changed for <tba. The <tca program does not do the needed conversion.
.p 5
.list
.le
LEN(A$) - Change to LENGTH(A$).
.le
CHR$(I) - Change to CHAR(I).
.le
STR$(I) - Change to STR(I).
.le
LEFT$(A$,I) - Change to LEFT(A$,I).
.le
RIGHT$(A$,I) - Change to RIGHT(A$,I).
.le
MID$(A$,I,J) - Change to SUBSTR(A$,I,J).
Watch out for this one in left side of assignment statements and
in the I/O lists of input statements.
.le
SPACE$(I) - Change to SPACE(I).
.le
INSTR(I,A$,B$) - Change to INDEX(B$,A$,I). Note argument
rearrangement.
.els
.p 0
.test page 10
^&Array declaration\&
.p
Arrays in <xbasic are normally based at zero. <tca will generate
a "<base 0" statement at the start of the user's program if the
<xbasic option is invoked.
.p
<dim can also be spelled <dimension in <xbasic. <tca will handle this.
.p
^&Program control\&
.p
In <xbasic, an <if statement has the following syntax
.p 5
<if _<expression_> [,] [<then] [<goto] _<statement _#_>
.p 0
The <tca program will correctly convert this to
.p 5
<if _<expression_> <then <goto _<statement _#_>
.p 0
In <xbasic, computed GOTOs have to following syntax
.p 5
<on _<expression_> [,] [<then] [<goto] _<statement list_>
.p 0
The <tca program will correctly convert this to
.p 5
<on _<expression_> <goto _<statement list_>
.p 0
String comparisons in <xbasic automatically ignore
leading blanks. <tca does not handle this. If it is a problem, then
the <tba statements should be modified to have <ljust functions
wrapped around the operands of the comparison test.

.p
<xbasic supports "<if <end _#3 ..." as and end-of-file test for file
unit number 3. <tba handles this in a totally different way and
the program will have to be manually changed for these statements.
.p
^&User defined functions\&
.p
Xbasic user functions are almost compatible with <tba. However, <tca
does not attempt to make them fully compatible and the conversion
must be done by hand. <xbasic returns functions values a'la
<fortran, that is "<fname = expression". <tba returns function values
with an "<exit expression" statement. <xbasic ends a user function with
an "<fnend" statement. <tba ends a user function with "<endf
function name".
.p
<xbasic didn't seem to have explicit typing of user defined
functions and this may be desirable to add.
.p
.test page 10
^&I/O\&
.p
One of the thornier aspects of converting from <xbasic to <tba is
handling the I/O statements. Such statements map
very poorly between the two BASICs and 
for the most part the <tca program will not help.
.p
Xbasic I/O statements preceed a file unit number with a hatch mark.
This must be removed and the <tca program doesn't do it.
.p
The formatting characters map especially poorly and must be
done by hand. Some of the string formatting characters may require
that functions be written to massage the string. <tca will not help here
and in fact should not even be allowed to try. Specify <no
<format <translation to make <tca leave the formatting alone.
.p
<print <using statements in <xbasic are very free form up to the I/O
list in the sense that the format number, the file unit number,
and the word <using can be arranged in several different ways.
<tca recognizes only <print <using _<format number_>.
.p
A semi-colon is used to glue fields together for output. <tca correctly
converts this to a colon.
.p
<xbasic appends a blank to formatted numeric output. This can
only be simulated by manually changing the formats.
.p
The following statement types either have no corresponding statement
or statements in <tba or must be  changed by hand.
.p 5
.list
.LE
<files - Convert to an <open statement.
.LE
<file - Convert to an <open statement.
.LE
<scratch - Normally accomplished within the <open statement, otherwise
use either the <locate statement or re-open the file.
.LE
<restore (A file!!!) - Normally accomplished within the <open statement,
otherwise use either the <locate statement or re-open the file.
.LE
<read (From a file!!!) - Change to <input <from.
.LE
<set - ??
.LE
<last - ??
.LE
<quote - ??
.LE
<noquote - ??
.LE
<margin - Change to <lol.
.LE
<page - ??
.LE
<nopage - ??
.LE
<write (To a file!!!) - Change to <print <on.
.els
.p 0
It is probably mandatory to thoroughly understand I/O in both <xbasic
and <tba before attempting to convert a program which contains
more that the simplest I/O.
.p
^&Other areas of incompatibility\&
.p
<xbasic supports a <randomize statement which can also be abbreviated
as <random and must be converted to <call <rnd(0).
.p
<xbasic supports a <tim function which is only approximately the
<time or <tru function in <tba.
.p
Comments in <xbasic are indicated with a single quote. <tca
handles this if the <xbasic option is invoked.
.p
In <xbasic, the <restore statement (besides being used to restore
a file) also has the property of being able to selectively
restore either string or scalar data by appending a dollar sign or a star
to the end of the statement. Nothing like this exists in <tba,
although data blocks are handled separately for each module.
.p
The <chain statement in <xbasic allows for an optional starting 
statement number.
This can be simulated in <tba with an incredible amount of
effort (such as writing the line number to a file
and having the target program read it in and do a computed
<goto). <xbasic also does something about sharing variable
values across <chain statements and this also is next to impossible
to simulate without a lot of case-by-case
effort.
.p
<xbasic supports a <change statement which is approximately equal to
taking the <asc function of each character in a string and
storing the results in an array.
