.sp 1
.lm 6
.rm 70
.c
^&TYMQUOTE and TYMBASIC INTERFACE\&
.skip 3
.paragraph
TYMQUOTE can now be accessed using the FORTRAN interface within TYMBASIC.
This feature makes available to the user the simplicity of using a
BASIC language, the convenience of an interactive package, as well
as the power and efficiency of TYMBASIC, which was designed for 
creating major systems.
.paragraph
TYMBASIC requires that each of the functions and subroutines be defined
explicitly.  There is also a special load string for TYMBASIC users.
All of this has been taken care of with a command file available in TBATLIB.
To make use of this special command file, it is necessary to create programs
with line numbers greater than 499.
It should become the custom of TYMBASIC users to start numbering
their programs at 500 or higher.
The command file adds code directly
into the user's program.  To use the command file, the user should,
while in TYMBASIC, type:
.skip
.i 0
>^&DO (TBATLIB)TQMERGE\&
.skip
and TYMBASIC will add the lines of code to the program and 
include the load strings.  Once the code has been added to the
program and saved, the load strings can be accessed separately by typing:
.skip
.i 0
>^&DO (TBATLIB)TQLOAD\&
.skip
A typical compile and run of a TQ program called TQSAMP
might be as follows (the user types the underlined):
.tp 6
.skip
.i 0
- ^&TBA\&
.i 0
Ver 4.6
.i 0
> ^&GET TQSAMP\&
.i 0
> ^&DO (TBATLIB)TQMERGE\&
.i 0
> ^&RUN\&
.skip
.paragraph
The sample program which the user has seen coded in FORTRAN and COBOL
is shown below as it is directly translated into TYMBASIC.  It should
be noted that there are some differences that the coder must be aware
of.  While using TYMBASIC, all arrays must be declared
explicitly.  
Also, it is necessary to declare variables as integer even if the
names begin with characters like I, J, K, etc.  Remember that
in TYMBASIC all numeric variables are assumed to be real unless 
otherwise declared.  The coder must also note that, unlike FORTRAN,
TYMBASIC differentiates between string and integer variables.  This introduces
the need for additional code when passing string values to, or 
receiving string values from, FORTRAN.
.paragraph
Due to the fact that FORTRAN stores its string values in integer variables,
it is necessary to convert the string values to integers and the
returned integer values back to strings.  Accessed by TQMERGE are four
special functions to aid the programmer.  They are:
.skip
.tp 8
.i 5
F.CHR(INTEGER) = returns a string value from a FORTRAN integer
.i 5
F.CHRA(INTEGER ARRAY) = returns a single TYMBASIC string value from an array
of FORTRAN integers
.i 5
F.ASC(STRING$) = returns a scaler integer value for the first five
characters of the string
.i 5
F.ASCA(STRING$) = returns an array of integer values each containing five
characters
.paragraph
When calling subroutines, TYMBASIC requires that each parameter be
fully declared within the define.  The "DEF"s for the TYMQUOTE calls
have been created for you and will be automatically loaded into your
program by the commands file TQMERGE.  Because we have a choice of
passing real or integer values for LOWVAL and  HIVAL  to the "SLECT"
subroutine, it is necessary to use two different calls in TBA.
.i 5
SLECT = will have all integer values
.i 5
SLECTR = will have integer values for the attribute and the count
and will require reals for the HIGH and LOW  values.
.paragraph
The other major difference affects two subroutine calls.  "SLNEXT" and
"XDNEXT" both pass a line number as an argument.
This can not be done in TYMBASIC.  Therefore, two new subroutine
calls have been created for the TBA user:
.i 5
SLNXT( ICTC, IER)
.I 5
XDNXT( IREC(*), IER)
.BR
IER is the error return code.  As long as data is available, IER will 
have the value "0". When there are no more "NEXT" values, IER will be
returned as "-1".  IER can be used as a logical variable:
.lt
     ie.         1000  IF IER  THEN 1100
        WHERE          IER = 0      IS FALSE
        AND            IER = -1     IS TRUE
.el
.tp 33
.paragraph
The following is the copy of the code directly translated.  It might be
noted that there has been no attempt to gain efficiency through the
use of special features of TYMBASIC, but rather to maintain consistency
with the FORTRAN example.
.skip
.lt
     1500   STRING ISSUER$, ISSUE$, IDATE$, IPRICE$, IEX$
     1600   INTEGER ISSUER(6), ISSUE(4), IDATE(3), IPRICE(2), ICTC
     1700   INTEGER IER, IDAY, IDAY7, NC, ITEM, IROUND, IMODE, ASCII.
     1800   REAL PRICE
     2600   CALL XSET(0, -1, 1, 1, -1,0)
     2900   CALL RDAY ( IDAY, IER )
     3000   IF IER THEN STOP 'EXECUTION ENDED'
     3100   IDAY7 = ICHRON(IDAY,17)
     3400   CALL RDCTC( ICTC, IER)
     3600   IF IER=-1 THEN 2900
     3900   CALL XGET( ICTC, IER )
     4100   IF IER THEN 3400
     4400   PRICE = XPRICE( IDAY )
     4800   IEX$ = F.CHR( ITEMX( F.ASC( 'EXC' )))
     4900   IROUND = 2
     5000   IF IEX$ = 'F' OR IEX$ = 'G'  THEN IROUND= -1
     5100   CALL PRCVO( PRICE, IROUND, IPRICE )
     5200   IPRICE$ = F.CHRA( IPRICE )
     5300   CALL DAYCVO( IDAY7, 13, IDATE, NC )
     5600   CALL XITEM( F.ASC( 'NAM' ), ISSUER)
     5700   CALL XITEM( F.ASC( 'ISS' ), ISSUE )
     6000   PRINT
     6100   PRINT F.CHRA( ISSUER );F.CHRA( ISSUE )
     6200   PRINT '$':IPRICE$:' -- ':F.CHRA(IDATE)
     6300   PRINT
     6400   GOTO 3400
.el
.skip
.paragraph
The following is the identical program including some comments to
aid in understanding the design and flow of the program.
.page
.lt
     1000 !--  PROGRAM QUOTE  AS WRITTEN IN TYMBASIC
     1100 !--  FUNCTION:  TO READ THE DATE, CUSIP NUMBER OR TICKER
     1200 !--    SYMBOL, AND TO TYPE OUT THE CLOSING PRICE.
     1300 !--    
     1400 !--  DECLARATION STATEMENTS:
     1500   STRING ISSUER$, ISSUE$, IDATE$, IPRICE$, IEX$
     1600   INTEGER ISSUER(6), ISSUE(4), IDATE(3), IPRICE(2), ICTC
     1700   INTEGER IER, IDAY, IDAY7, NC, ITEM, IROUND, IMODE, ASCII.
     1800   REAL PRICE
     1900 !--  NOTE:  ALL ARRAYS MUST BE DECLARED.  ALSO, IT IS NECESSARY
     2000 !--    TO DECLARE VARIABLES AS INTEGER EVEN IF THE NAMES BEGIN
     2100 !--    WITH CHARACTERS LIKE I, J, K, ETC.  REMEMBER ALSO THAT
     2200 !--    STRING AND INTEGER VARIABLES MUST BE DECLARED DIFFERENTLY
     2300 !--  EXTRACT UN-ADJUSTED PRICES, FILL IN MISSING PRICES
     2400 !--  WITH LAST PREVIOUS TRADE'S, AND USE BID FOR CLOSE
     2500 !--  FOR BID/ASK QUOTATIONS.
     2600   CALL XSET(0, -1, 1, 1, -1,0)
     2700 !--
     2800 !--  READ DATE FROM TTY
     2900   CALL RDAY ( IDAY, IER )
     3000   IF IER THEN STOP 'EXECUTION ENDED'
     3100   IDAY7 = ICHRON(IDAY,17)
     3200 !--
     3300 !--  READ CUSIP OR TICKER CODE FROM TTY
     3400   CALL RDCTC( ICTC, IER)
     3500 !--  IF <CR> ENTERED, RETURN TO DATE INPUT
     3600   IF IER=-1 THEN 2900
     3700 !--
     3800 !--  FIND ISSUE IN TQ DATABASE
     3900   CALL XGET( ICTC, IER )
     4000 !--  IF ISSUE NOT FOUND, READ ANOTHER FROM THE TERMINAL
     4100   IF IER THEN 3400
     4200 !--
     4300 !--  GET THE PRICE
     4400   PRICE = XPRICE( IDAY )
     4500 !--  
     4600 !--  REFORMAT THE PRICE AND DATE FOR OUTPUT.
     4700 !--  NOTE:  THE SPECIAL USE OF THE F.CHR AND F.ASC FUNCTIONS
     4800   IEX$ = F.CHR( ITEMX( F.ASC( 'EXC' )))
     4900   IROUND = 2
     5000   IF IEX$ = 'F' OR IEX$ = 'G'  THEN IROUND= -1
     5100   CALL PRCVO( PRICE, IROUND, IPRICE )
     5200   IPRICE$ = F.CHRA( IPRICE )
     5300   CALL DAYCVO( IDAY7, 13, IDATE, NC )
     5400 !--
     5500 !--  TYPE ISSUE DESCRIPTION, PRICE AND DATE
     5600   CALL XITEM( F.ASC( 'NAM' ), ISSUER)
     5700   CALL XITEM( F.ASC( 'ISS' ), ISSUE )
     5800 !--  NOTE:  THE USE OF THE CONVERSION FUNCTIONS CAN BE RESERVED
     5900 !--    UNTIL THEY ARE NEEDED (AS IN THE PRINT STATEMENT).
     6000   PRINT
     6100   PRINT F.CHRA( ISSUER );F.CHRA( ISSUE )
     6200   PRINT '$':IPRICE$:' -- ':F.CHRA(IDATE)
     6300   PRINT
     6400   GOTO 3400
.el
.page
.paragraph
The following are runs of the sample program using different methods.
METHOD 1  will show the steps involved when the
"TQSAMP" program contains only the code generated by the user.
METHOD 2 will show the steps involved when the "TQSAMP" program
contains both the user's code and the code portion of "TQMERGE".  METHOD 3
will show the steps involved in making and running a save version of the code.
This last method is more cost effective in production-type
systems.
.skip
.tp 34
METHOD 1:
.skip
.i 5
-^&TBA\&
.I 5
Ver 4.6
.I 5
>^&GET TQSAMP\&
.I 5
>^&DO (TBATLIB)TQMERGE\&
.I 5
>^&RUN\&
.I 5
TQSAMP. added to module list
.I 5
.i 5
DATE:  ^&1/2/68\&
.I 5
ISSUE:  ^&IBM\&
.SKIP
.I 5
INTERNATIONAL BUSINESS MACHS
.LT
     $ 613 1/2   -- JANUARY 2, 1968
.EL
.SKIP
.I 5
ISSUE:  ^&HJ\&
.SKIP
.I 5
HOWARD JOHNSON CO
.LT
     $  42 5/8   -- JANUARY 2, 1968
.EL
.SKIP
.I 5
ISSUE:
.I 5
DATE:  ^&1/2/75\&
.I 5
ISSUE:  ^&IBM\&
.SKIP
.I 5
INTERNATIONAL BUSINESS MACHS
.LT
     $ 168 7/8   -- JANUARY 2, 1975
.EL
.SKIP
.I 5
ISSUE:  
.I 5
DATE:
.I 5
EXECUTION ENDED
.SKIP
.I 5
>^&Q\&
.SKIP
.I 5
EXIT
.SKIP
.I 5
-
.SKIP 3
.tp 18
METHOD 2:
.skip
.i 5
-^&TBA\&
.i 5
Ver 4.6
.i 5
>^&GET TQSAMP\&
.i 5
>^&DO (TBATLIB)TQLOAD\&
.I 5
>^&RUN\&
.LT
          |
          |
          |
          |
          |
          |
.EL
.I 5
>^&Q\&
.SKIP
.I 5
EXIT
.SKIP
.I 5
-
.SKIP 3
.TP 32
METHOD 3:  there are 2 STEPS
.i 2
STEP 1:
.skip
.i 5
-^&TBA\&
.I 5
Ver 4.6
.i 5
>^&GET TQSAMP\&
.I 5
>^&DO (TBATLIB)TQMERGE\&
.I 5
>^&SAVE BINARY\&
.I 5
TQSAMP.SHR: New file, OK? ^&Y\&
.i 5
TQSAMP. added to module list
.skip
.i 5
>^&Q\&
.SKIP
.I 5
EXIT
.SKIP
.I 5
-
.SKIP
.I 2
STEP 2:
.SKIP
.I 5
-^&GO TQSAMP\&
.I 5
DATE:  ^&1/2/68\&
.I 5
ISSUE:  ^&IBM\&
.SKIP
.I 5
INTERNATIONAL BUSINESS MACHS
.LT
     $ 613 1/2   -- JANUARY 2, 1968
.EL
.SKIP
.I 5
ISSUE:
.I 5
DATE:
.I 5
EXECUTION ENDED
.SKIP
.I 5
-
.SKIP
.PARAGRAPH
Once the ".SHR" file has been generated, the user
may rerun the program directly from XEXEC without entering TBA.
This will eliminate the need to compile and therefore
reduce the cost of running the program.  
Greater familiarity with both TQ and TBA on the part
of the programmer and user, will result in increased efficiency and flexibility
in meeting the needs of the user.
.skip 5
  