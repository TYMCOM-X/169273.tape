        title   ppn
        twoseg
        radix   8
        reloc   400000
        extern  allsp
;
;       coded 11/77 by Lee Bolton
;
       subttl  ppn.over
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==
;+
;.upper case
;.spacing 1
;.paper size 54,73
;.left margin 10
;.right margin 73
;.paragraph 0
;.number 1
;.first title
;.nojustify
;       Overview of GET PPN package
;.s
; This set of routines is designed to return the logged in ppn,
; the GFDed ppn, the run from ppn as a string in the form [account,user number]
; with leading zeros suppressed, or the string of the
; program name.
;
;.nf.s
; The Proceedures are:
;  GET.LOG.PPN - Get the logged in PPN
;  GET.GFD.PPN - Get the GFDed PPN
;  GET.RUN.PPN - Get the run from PPN
;  GET.PROG.NAM - Get the program name
;.fill.s
; All of the entry points are callable as EXTERNAL TBA routines/functions.
;-

       subttl  get.log.ppn

; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
;+
;.page;.nf;.s; GET.LOG.PPN                                 NOT SUPPORTED
; -----------
;.s; Form of DEF:
;.s.i+4; DEF STRING EXTERNAL GET.LOG.PPN
;.s; Arguments:
;.s.lm+4; None
;.i-4.s; Results:
;.f;.s; PPN of logged in user in the form [account,user number] or null string if error
;.lm-4
;-
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
        tbadcl  get.log.ppn,,
logtab== -23

        move    r1,(p)  ;get dest string address
        hrrz    r1,(r1)         

        hrroi   r0,logtab       ; index = -1
        gettab  r0,             ; get desired PPN in r0
        jrst    ptnul1          ;gettab should not get a error

        call    cvtppn          ; convert PPN to string
        aos     (p)
        tbaret
 
ptnul1: setz    r0,             ; on error set string length to 0
        hrlm    r0,1(r1)        ; store in string descriptor
        aos     (p)

        tbaret
      subttl  get.gfd.ppn
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
;+
;.page;.nf;.s; GET.GFD.PPN                                 NOT SUPPORTED
; -----------
;.s; Form of DEF:
;.s.i+4; DEF STRING EXTERNAL GET.GFD.PPN
;.s; Arguments:
;.s.lm+4; None
;.i-4.s; Results:
;.f;.s; PPN of GFDed user in the form [account,user number] or null string if error
;.lm-4
;-
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
        tbadcl  get.gfd.ppn,,
gfdtab== 2

        move    r1,(p)  ;get dest string address
        hrrz    r1,(r1)         

        hrroi   r0,gfdtab       ; index = -1
        gettab  r0,             ; get desired PPN in r0
        jrst    ptnul2          ;gettab should not get a error

        call    cvtppn          ; convert PPN to string
        aos     (p)
        tbaret
 
ptnul2: setz    r0,             ; on error set string length to 0
        hrlm    r0,1(r1)        ; store in string descriptor
        aos     (p)

        tbaret
      subttl  get.run.ppn
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
;+
;.page;.nf;.s; GET.RUN.PPN                                 NOT SUPPORTED
; -----------
;.s; Form of DEF:
;.s.i+4; DEF STRING EXTERNAL GET.RUN.PPN
;.s; Arguments:
;.s.lm+4; None
;.i-4.s; Results:
;.f;.s; PPN of run from user in the form [account,user number]. The run from directory is the directory in which the
; running program is stored. Or null string if error.
;.lm-4
;-
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
        tbadcl  get.run.ppn
runtab== -25

        move    r1,(p)  ;get dest string address
        hrrz    r1,(r1)         

        hrroi   r0,runtab       ; index = -1
        gettab  r0,             ; get desired PPN in r0
        jrst    ptnul3          ;gettab should not get a error

        call    cvtppn          ; convert PPN to string
        aos     (p)
        tbaret
 
ptnul3: setz    r0,             ; on error set string length to 0
        hrlm    r0,1(r1)        ; store in string descriptor
        aos     (p)
        
        tbaret
      subttl  get.prog.nam
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
;+
;.page;.nf;.s; GET.PROG.NAM                                 NOT SUPPORTED
; -------------
;.s; Form of DEF:
;.s.i+4; DEF STRING EXTERNAL GET.PROG.NAM
;.s; Arguments:
;.s.lm+4; None
;.i-4.s; Results:
;.f;.s; Program name or null if error
;.lm-4
;-
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
; *==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==
        tbadcl  get.prog.nam
protab== 3

        hrroi   r0,protab       ; index = -1
        gettab  r0,
        movei   r0,0
        
        move    r1,(p)          ; get dest string address
        hrrz    r1,(r1)
        call    makes           ;convert 6-bit name to 7-bit
        aos     (p)

        tbaret
       subttl  makes
;
;       makes - local subroutine to convert a 6 bit file name or
;               extension to 7 bit and store into tmp string.
;
;       inputs:
;         r0 - 6 bit file name or extension
;         r1 - address of tmp string descriptor
;
        dclne   makes,<tword,mystg>
cnt==1
out.ptr==2
stgdsc==3
chr==4

        call    allsp,<2,$,mystg,0>   ; allocate core for tmp string

        movei   r0,6                    ; set declared length as 6
        move    stgdsc,mystg
        movem   r0,1(stgdsc)

        hrrz    out.ptr,0(stgdsc)       ; build output byte pointer
        hrli    out.ptr,(point 7,)

        setz    cnt,                    ; set count to zero

        move    chr+1,tword             ; pick up word to convert
loop:   jumpe   chr+1,done              ; done?
        setz    chr,                    ; get next char
        lshc    chr,6
        addi    chr,"A"-'A'             ; convert to 7 bit
        idpb    chr,out.ptr             ; stuff it
        aoja    cnt,loop                ; increment count and continue

done:   hrlm    cnt,1(stgdsc)           ; set actual length
        return  makes
       subttl  cvtppn

;       cvtppn - local subroutine to convert an integer ppn into
;       a string of the format [account,user no],leading zeros suppressed

;       inputs:
;         r0 - integer ppn
;         r1 - address of string descriptor

        dclne   cvtppn,<pword,stoptr>

strdsc== 3                      ;string descriptor
out.ptr== 2                     ;output byte pointer
cnt== 1                         ;count of moved characters
ccount== 4                      ;character counter
lp.count== 5                    ;loop counter
chr== 6                         ;long register for extraction of char.

        call allsp,<3,$,stoptr,0>     ;reserve 3 words for string

        movei   r0,^d15         ;maximum string length
        move    strdsc,stoptr
        movem   r0,1(strdsc)    ;store max. string length
        
        hrrz    out.ptr,0(strdsc)       ;saddr.of destination
        hrli    out.ptr,(point 7,)      ;build output byte pointer
        setz    cnt,
        
        movei   chr,"["
        idpb    chr,out.ptr     ;store left bracket
        addi    cnt,1             ;incrment char count

        move    chr+1,pword     ;get ppn to be converted

        hrrei    lp.count,-2     ;initialize loop counter
                                ;first convert account number
; start of loop to convert 6 digits

do.6:   hrrei    ccount,-6       ;initialize character counter

loop1:  setz    chr,            ;clear upper register
        lshc    chr,3           ;move over one digit
        jumpn  chr,gotone      ;skip to first non-zero char.
        aojl    ccount,loop1

        movei   chr,"0"         ;store at least one 0
        idpb    chr,out.ptr
        addi    cnt,1
        jrst    endlp1

gotone: addi    chr,"0"         ;convert to 7 bit digit
        idpb    chr,out.ptr     ;stuff digit
        addi    cnt,1             ;increment character count
        aojge   ccount,endlp1   ;jump if 6 characters have been processed

        setz    chr,            ;clear upper register
        lshc    chr,3           ;move over next digit
        jrst gotone             ;go convert digit

endlp1: aoje    lp.count,cvtdon   ;jump when loop count satisfied

        movei   chr,","         ;insert the comma
        idpb    chr,out.ptr
        addi    cnt,1             ;increment char.count

        jrst    do.6            ;go convert user number

; end of 6 digit convert loop

cvtdon:   movei   chr,"]"         ;insert right bracket
        idpb    chr,out.ptr
        addi    cnt,1             ;increment char. count

        hrlm    cnt,1(strdsc)   ;store actual char.count in str.descrpt wd.
        return  cvtppn
        lit
        end
  