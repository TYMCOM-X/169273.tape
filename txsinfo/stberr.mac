	SUBTTL	V. Brownell/VB				15-JUN-77

; COPYRIGHTS 1972,1973,1977  STEVENS INSTITUTE OF TECHNOLOGY
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.

  ;UNIVERSALS

	SEARCH	JOBDAT		;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 COMMON MACROS
	SEARCH	SNOPRM		;SITBOL PARAMETER FILE

  ;DIRECTIVES

	.DIREC	FLBLST		; List first line binary only
	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
IFE FTSINGLE,.TEXT	\/ONLY:LOW SNODAT\ ;  LOW SEGMENT
	TWOSEG	400K		;TWOSEGMENT CODE

  ;VERSION NUMBER

	ERRVER==5		;MAJOR VERSION NUMBER
	ERRMIN==0		;MINOR VERSION NUMBER
	ERREDT==304		;EDIT LEVEL
	ERRWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	ERR,STBERR,<Error processing>

  ;SHOW UNIVERSAL VERSION NUMBERS

	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN

	LOC	.JBVER		;VERSION NUMBER LOC
	VERSION			; SITBOL VERSION NUMBER
	RELOC

	ERRTTL			; Title
	ERRPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Error processing
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. Revision History . . . . . . . . . . . . . . . . . . .    3
;   3. ENTRY POINT TO STBERR. . . . . . . . . . . . . . . . .    4
;   4. ERROR MESSAGES . . . . . . . . . . . . . . . . . . . .    5
;   5. EXPANSION OF ERROR MESSAGES. . . . . . . . . . . . . .    6
	SUBTTL	Revision History

COMMENT	\

START OF VERSION 5.
165	Create this module
167	Finish new error processing
170	Add new keywords (&ERRLEVEL, &ERRMSG, &ERRNAME)
215	Implement FTSINGLE
216	Don't use literals in the error message expansions.
241	GETSEG the correct segment back.
243	Add new error messages for external functions
267	Change the strings back to ASCII (not ASCIZ).
271	Fix a silly typo in the error msg text (SNOPNP).
304	Remove two error messages which will no longer be needed in STBERR.
	(They will be taken care of elsewere)
\
	SUBTTL	ENTRY POINT TO STBERR

	; THIS PROGRAM IS GETSEG'ED BY SNOBOL IN ORDER TO LOOK UP
	; THE ERROR MESSAGES.  IT IS CALLED WITH .JBERR CONTAINING
	; THE COMPOSITE ERROR NUMBER.




STBERR::	PORTAL	.+1		; EXO ENTRY POINT
	HRRZ	P1,.JBERR	; GET THE COMPOSITE ERROR NUMBER
	IDIVI	P1,^D1000	; MAKE P1 MAJOR AND P2 MINOR

	MOVE	S1,ERRTAB-1(P1)	; GET ADDR OF MINOR TABLE

STBER1:	HLRZ	S2,0(S1)	; GET MINOR ERROR NUMBER
	CAME	P2,S2		; ARE THEY THE SAME?
	AOJA	S1,STBER1	; NO, GO PICK OUT ANOTHER

	MOVE	S2,0(S1)	; GET MESSAGE ADDR
	MOVSI	S1,D$PRE	;[264] GET THE PREFIX
	MOVE	S3,0(S2)	; GET HEADER
	HLR	S1,S3		; FINISH MESSAGE NAME
	HRRZ	S3,S3		; GET RID OF PREFIX

	MOVE	T1,S3		; KEEP LENGTH FOR LATER
	IDIVI	T1,NBYTES	; FIND NO. OF BLOCKS
	SKIPE	T2		; IS THERE A REMAINDER?
	 AOJ	T1,		; GIVE IT ANOTHER WORD

IFE FTSINGLE,	POP	STACK,P1	; GET GETSEG ADDR
	POP	STACK,P2	; GET RETURN ADDR

	MOVN	T2,T1		; SET UP FOR COUNT
	AOJ	S2,		; ..
	HRL	T2,S2		; ..
	MOVS	T2,T2		; ..

	HRRZ	S2,T2
	PUSH	STACK,@S2	; PLACE &ERRMSG ON STACK
	AOBJN	T2,.-2		; FINISH UP.

	PUSH	STACK,S3	; PUT LENGTH OF &ERRMSG ON STACK
	PUSH	STACK,S1	; PUT &ERRNAME ON STACK

IFE FTSINGLE,	MOVE	Z,SEGNAM##	;[240] SEGMENT NAME
	JRST	0(P2)			; DO GETSEG
	SUBTTL	ERROR MESSAGES

; THE FOLLOWING ARE THE ERROR MESSAGES FOR SITBOL.

DEFINE ERRORS,<

$BEGIN	(1)

$ERMSG(1,1,,<Reserved.>)
$ERMSG(1,2,<ANI>,<Evaluated argument to POS, RPOS, TAB, RTAB, or LEN is not an INTEGER:>)
$ERMSG(1,3,,<Reserved.>)
$ERMSG(1,4,,<Reserved.>)
$ERMSG(1,5,,<Reserved.>)
$ERMSG(1,6,<ANS>,<Evaluated argument to ANY, BREAK, NOTANY, SPAN  or  BREAKX  is  not  a
STRING:>)
$ERMSG(1,7,,<Reserved.>)
$ERMSG(1,8,,<Reserved.>)
$ERMSG(1,9,,<Reserved.>)
$ERMSG(1,10,,<Reserved.>)
$ERMSG(1,11,<ENP>,<Evaluated result of deferred expression used in a  pattern  match  is
not a PATTERN:>)
$ERMSG(1,12,,<Reserved.>)
$ERMSG(1,13,,<Reserved.>)
$ERMSG(1,14,,<Reserved.>)
$ERMSG(1,15,,<Reserved.>)
$ERMSG(1,16,,<Reserved.>)
$ERMSG(1,17,<OUN>,<Operand of unary $ is not a NAME:>)
$ERMSG(1,18,<RPS>,<Replacing right hand side in a pattern replacement is not a STRING:>)
$ERMSG(1,19,<PNS>,<Subject of a pattern match is not a STRING:>)
$ERMSG(1,20,<PNP>,<The pattern in a pattern match is not a PATTERN:>)	;[271]
$ERMSG(1,21,,<Reserved.>)
$ERMSG(1,22,,<Reserved.>)
$ERMSG(1,23,<ROP>,<The right operand for alternation or concatenation is not a PATTERN:>)
$ERMSG(1,24,<LOP>,<The left operand for alternation or concatenation is not a PATTERN:>)
$ERMSG(1,25,<FIP>,<A field function was applied to an inappropriate program-defined datatype:>)
$ERMSG(1,26,<FFP>,<The argument to a field function is not a program-defined datatype:>)
$ERMSG(1,27,<FOP>,<The first operand to a numeric binary operator (+ - * / **) or a numeric
predicate (NE EQ LE GE LT GT) is non-numeric:>)
$ERMSG(1,28,<SOP>,<The second operand to a numeric binary operator (+ - * / **) or a numeric
predicate (NE EQ LE GE LT GT) is non-numeric:>)
$ERMSG(1,29,<EXN>,<The left argument for exponentiation was not NUMERIC:>)
$ERMSG(1,30,<EXP>,<The right argument for exponentiation was not INTEGER:>)
$ERMSG(1,31,<NPN>,<An argument to NE, EQ, LE, GE, LT, or GT is non-numeric:>)
$ERMSG(1,32,,<Reserved.>)
$ERMSG(1,33,<UPN>,<The operand of unary + is non-numeric:>)
$ERMSG(1,34,<UMN>,<The opernad of unary - is non-numeric:>)
$ERMSG(1,35,<LXF>,<First argument to LEQ, LNE, LGT, LLT, LGE or LLE is not a STRING:>)
$ERMSG(1,36,<LXS>,<Second argument to LEQ, LNE, LGT, LLT, LGE or LLE is not a STRING:>)
$ERMSG(1,37,<ASS>,<Argument to SIZE is not a string:>)
$ERMSG(1,38,<OBP>,<Left operand of binary $ or : is not a PATTERN:>)
$ERMSG(1,39,<LIE>,<Argument to LEN is not an INTEGER or EXPRESSION:>)
$ERMSG(1,40,,<Reserved.>)
$ERMSG(1,41,<ATP>,<Argument to TAB, RTAB, POS, RPOS is not an INTEGER or EXPRESSION:>)
$ERMSG(1,42,,<Reserved.>)
$ERMSG(1,43,,<Reserved.>)
$ERMSG(1,44,<SPN>,<Argument to SPAN is not a STRING or EXPRESSION:>)
$ERMSG(1,45,<BRX>,<Argument to BREAKX is not a STRING or EXPRESSION:>)
$ERMSG(1,46,<BRK>,<Argument to BREAK is not a STRING or EXPRESSION:>)
$ERMSG(1,47,<NTY>,<Argument to NOTANY is not a STRING or EXPRESSION:  >)
$ERMSG(1,48,<ANY>,<Argument to ANY is not a STRING or EXPRESSION:>)
$ERMSG(1,49,,<Reserved.>)
$ERMSG(1,50,<AAP>,<Argument to ARBNO is not a PATTERN:>)
$ERMSG(1,51,<FAP>,<First argument to APPLY is not the name of a natural variable:>)
$ERMSG(1,52,<FAL>,<First argument to ARG or LOC is not an NAME:>)
$ERMSG(1,53,<FAI>,<Second argument to ARG or LOC is not an INTEGER:>)
$ERMSG(1,54,<FAS>,<First argument to ARRAY is not a STRING:>)
$ERMSG(1,55,<FCS>,<First argument to CLEAR is not a STRING:>)
$ERMSG(1,56,<ACS>,<Argument to CODE is not a string:>)
$ERMSG(1,57,<ACI>,<An argument to COLLECT is not an INTEGER:>)
$ERMSG(1,58,<SCN>,<Second argument to CONVERT is not a string or NAME:>)
$ERMSG(1,59,<AEI>,<Argument to EXIT is not an INTEGER:>)
$ERMSG(1,60,<FDS>,<First argument to DEFINE is not a STRING:>)
$ERMSG(1,61,<SDN>,<Second argument to DEFINE is non-null and is not the name of a label:>)
$ERMSG(1,62,<ADV>,<Argument to DETACH is not the name of a variable>)
$ERMSG(1,63,<SDI>,<Second argument to DUPL is not an integer:>)
$ERMSG(1,64,<FDI>,<First argument to DUPL is not a STRING:>)
$ERMSG(1,65,,<Reserved.>)
$ERMSG(1,66,<AEE>,<Argument to EVAL is not an EXPRESSION (or a  STRING,  which  could  be
converted into an EXPRESSSION:)>)
$ERMSG(1,67,<FFV>,<First argument to FIELD is not the name of a natural variable:>)
$ERMSG(1,68,<SFI>,<Second argument to FIELD is not an INTEGER:>)
$ERMSG(1,69,<AIO>,<First argument to INPUT or  OUTPUT  is  not  the  name  of  a  natural
variable:>)
$ERMSG(1,70,<SIS>,<Second argument to INPUT is not a string:>)
$ERMSG(1,71,<FSN>,<Format specification (third argument) to INPUT or OUTPUT is neither an
INTEGER nor STRING:>)
$ERMSG(1,72,<TON>,<Third argument to OPSYN is non-numeric:>)
$ERMSG(1,73,<AFN>,<Argument to FUCTION is not a name:>)
$ERMSG(1,74,<LNN>,<Argument to LABEL is not a NAME:>)
$ERMSG(1,75,<LRI>,<Third argument to LPAD or RPAD is not an integer:>)
$ERMSG(1,76,<LRS>,<Second argument to LPAD or RPAD is not a STRING:>)
$ERMSG(1,77,<LRF>,<First argument to LPAD or RPAD is not a STRING:  >)
$ERMSG(1,78,<NNV>,<First argument to OPSYN is not the name of a natural variable:>)
$ERMSG(1,79,<SOI>,<Second argument to OPSYN is improper:>)
$ERMSG(1,80,<CNN>,<Conversion via CONVERT under  format  control  to  STRING  requires  a
numeric quantity as first argument:>)
$ERMSG(1,81,<CNS>,<Conversion via CONVERT under format  control  to  INTEGER  requires  a
string as first argument:>)
$ERMSG(1,82,<RNI>,<Argument to RANDOM is not INTEGER:>)
$ERMSG(1,83,<PAT>,<Argument to PROTOTYPE is not an ARRAY or TABLE:>)
$ERMSG(1,84,<SRI>,<Second argument to REMDR is not an integer:>)
$ERMSG(1,85,<FRI>,<First argument to REMDR is not an INTEGER:>)
$ERMSG(1,86,<TRS>,<Third argument to REPLACE is not a string:>)
$ERMSG(1,87,<SRS>,<Second argument to REPLACE is not a STRING:>)
$ERMSG(1,88,<FRS>,<First argument to REPLACE is not a STRING:>)
$ERMSG(1,89,<ARS>,<Argument to REVERSE is not a STRING:>)
$ERMSG(1,90,<RUI>,<Second argument to RUN is not an INTEGER:>)
$ERMSG(1,91,<ATN>,<Argument to TIME is not an INTEGER:>)
$ERMSG(1,92,<STA>,<First argument to SORT (or RSORT) is neither TABLE nor ARRAY:>)
$ERMSG(1,93,<SIT>,<Second argument to SORT or  RSORT  is  not  INTEGER  while  the  first
argument is TABLE:>)
$ERMSG(1,94,<ASN>,<Argument to SETEXIT is not a NAME:>)
$ERMSG(1,95,<FSS>,<First argument to SUBSTR is not a STRING:>)
$ERMSG(1,96,<SSI>,<Second argument to SUBSTR is not an INTEGER:>)
$ERMSG(1,97,<TSI>,<Third argument to SUBSTR is not an INTEGER:>)
$ERMSG(1,98,<ATI>,<Argument to TABLE is not an INTEGER:>)
$ERMSG(1,99,<SRM>,<Second argument to SORT or RSORT was not an INTEGER whereas the  first
argument was a multi-dimensioned array:>)
$ERMSG(1,100,<SSN>,<Second argument to SORT or RSORT was neither INTEGER nor NAME:>)
$ERMSG(1,101,<FTN>,<First argument to TRACE or STOPTR is not a NAME:>)
$ERMSG(1,102,<STN>,<Second argument to TRACE or STOPTR is not a STRING:>)
$ERMSG(1,103,<TTS>,<Third argument to TRACE or STOPTR is not STRING:>)
$ERMSG(1,104,<FTS>,<Fourth argument to TRACE or STOPTR is not a natural variable:>)
$ERMSG(1,105,<CDF>,<Conversion under D format requires  a  numeric  quantity:   The  value
given is non-numeric:>)
$ERMSG(1,106,<CWS>,<Conversion to word under B, O, S, or U format requires a STRING:>)
$ERMSG(1,107,<AAI>,<Argument to ASCII is not INTEGER:>)
$ERMSG(1,108,<FNS>,<A file specification was not STRING nor  could  it  be  converted  to
string:>)
$ERMSG(1,109,<VWD>,<A value was written under D format is not numeric:>)
$ERMSG(1,110,<ADI>,<Argument to DUMP was not INTEGER or a dumpable aggregate:>)
$ERMSG(1,111,<FLL>,<First argument to LOAD was not a string:>)
$ERMSG(1,112,<IDA>,<Illegal datatype of argument passed to an external function:>)
$ERMSG(1,113,<IAU>,<Illegal argument to unload:>)
$ERMSG(1,300,<TPF>,<Type field of process description is not 'FETCH' or 'STORE':>)
$ERMSG(1,301,<TPD>,<Function field of process description is not the name of a function:>)
$ERMSG(1,302,<SAP>,<Second argument to ASSOCIATE is not a programmer-defined dataobject:>)
$ERMSG(1,303,<FAN>,<First argument to ASSOCIATE is not the name of a variable:>)
$ERMSG(1,304,<CLF>,<The contents of the level field of a process description is not OF
DATAtype integer:>)
$ERMSG(1,305,<ADN>,<First argument to DISASSOCIATE is not the name of a variable:>)
$ERMSG(1,306,<TIP>,<Third argument to INSERTBP is not a programmer-defined data object:>)
$ERMSG(1,307,<CLP>,<The contents of the level field in the process description passed as
the third argument to INSERTBP is not INTEGER:>)
$ERMSG(1,308,<AIR>,<First and second arguments to INSERTBP or REMOVEBP does not describe a
programmer-defined statement or statement does not exsist:>)
$ERMSG(1,309,<FPN>,<Function field of a process description associated with statement
execution is not a name:>)
$ERMSG(1,310,<SLI>,<Second argument to LABEL is not an integer:>)
$ERMSG(1,311,<WNI>,<Second argument to WHERE is not an integer:>)
$ERMSG(1,312,<FWN>,<First argument to WHERE is not a name:>)
$ERMSG(1,313,<PDD>,<Function field of the process description event associated with the DDT
command is not a name:>)
$ERMSG(1,314,<SCP>,<Second argument to CONNECT is not a programmer-defined data object:>)
$ERMSG(1,315,<LPD>,<Level field in the programmer-defined data object passed as the second
argument to CONNECT is not INTEGER:>)
$ERMSG(1,316,<FCE>,<First argument to CONNECT is not a valid event description:>)
$ERMSG(1,317,<FDE>,<First argument to DISCONNECT is not a valid event description:>)

$END	(1)
$BEGIN	(2)

$ERMSG(2,1,,<Not a defined error message.>)

$END	(2)
$BEGIN	(3)

$ERMSG(3,1,<ARR>,<Array reference with one  subscript  refers  to  an  object  which  is
neither a TABLE nor an ARRAY.>)
$ERMSG(3,2,<MDM>,<Multi-dimensional array reference refers to an object which is not  an
array.>)
$ERMSG(3,3,<NSA>,<Wrong number of subscripts in an array reference.>)
$ERMSG(3,4,<SBI>,<Subscript in an array reference was not an integer.>)


$END	(3)
$BEGIN	(4)

$ERMSG(4,1,,<Reserved.>)
$ERMSG(4,2,<EER>,<Attempted execution of a statement found erroneous by the compiler.>)

$END	(4)
$BEGIN	(5)

$ERMSG(5,1,<KWD>,<An attempt was made to change the value of a keyword associated with a
non-natural variable.>)
$ERMSG(5,2,<UKW>,<Reference to an undefined keyword.>)
$ERMSG(5,3,,<Reserved.>)
$ERMSG(5,4,,<Reserved.>)
$ERMSG(5,5,,<Reserved.>)
$ERMSG(5,6,<AIK>,<Attempt to assign an improper data item to a keyword.>)
$ERMSG(5,7,<NKW>,<Attempt to obtain the name of a keyword.>)

$END	(5)
$BEGIN	(6)

$ERMSG(6,1,<STO>,<A request for addition storage could not be satisfied.>)
				;;[304] XXXSTO Removed
$ERMSG(6,3,<HSO>,<Pattern history stack overflowed.>)
$ERMSG(6,4,<NSO>,<Pattern name stack overflowed.  This is  a  relatively  rare  type  of
overflow.   It  can  be  caused  by  excessive  use  of the binary '.'
operator during a pattern match.   The  /Sn  switch  can  be  used  to
provide more name stack.  >)

$END	(6)
$BEGIN	(7)

$ERMSG(7,1,,<Not a defined error message.>)

$END	(7)
$BEGIN	(8)

$ERMSG(8,1,<RFZ>,<RETURN from function level 0.>)
$ERMSG(8,2,<TUL>,<Transfer to an undefined label:>)
$ERMSG(8,3,<TIL>,<Transfer to the label CONTINUE, REPEAT or ABORT occurred,  by  either
no previous error had been intercepted or a function return obliterated
it.>)
$ERMSG(8,4,,<Reserved.>)
$ERMSG(8,5,<NGN>,<Name used as a goto operand is not the name of a natural variable.>)
$ERMSG(8,6,<DGE>,<Direct goto (bracket type) could not evaluate its argument.>)
$ERMSG(8,7,<NGE>,<A numeric goto ran off the end of the program.>)

$END	(8)
$BEGIN	(9)

$ERMSG(9,1,<UFO>,<Reference to an undefined function or operator.>)
$ERMSG(9,2,,<Reserved.>)
$ERMSG(9,3,<LFN>,<Label of defined-function is non-existent:>)

$END	(9)
$BEGIN	(10)

$ERMSG(10,1,,<Reserved.>)
$ERMSG(10,2,<OTR>,<Overflow in '+', '-', '/' or '*' of two REALs.  >)
$ERMSG(10,3,<RDZ>,<REAL division by zero.>)
$ERMSG(10,4,,<Reserved.>)
$ERMSG(10,5,<ORL>,<Overflow in REAL ** INTEGER.>)
$ERMSG(10,6,<IDZ>,<Integer division by zero.>)
$ERMSG(10,7,<IAO>,<Integer addition overflow.>)
$ERMSG(10,8,<ISO>,<Integer subtraction overflow.>)
$ERMSG(10,9,<IMO>,<Integer multiplication overflow.>)
$ERMSG(10,10,<NEI>,<Negative exponent for INTEGER ** INTEGER.>)
$ERMSG(10,11,<OIE>,<Overflow in integer exponentiation.>)
$ERMSG(10,12,,<Reserved.>)
$ERMSG(10,13,<RRN>,<REAL ** REAL is not permitted.>)
$ERMSG(10,14,<OUM>,<Integer overflow for  unary  minus  (happens  only  with  the  largest
negative number.>)
$ERMSG(10,15,<DZR>,<Attempted division by zero in REMDR function.>)

$END	(10)
$BEGIN	(11)

$ERMSG(11,1,,<Reserved.>)
$ERMSG(11,2,,<Reserved.>)
$ERMSG(11,3,<IRL>,<Input record longer than &MAXLNGTH>)
$ERMSG(11,4,,<Reserved.>)
$ERMSG(11,5,,<Reserved.>)
$ERMSG(11,6,<SLE>,<Statement limit (&STLIMIT) exceeded.>)
$ERMSG(11,7,<SLC>,<Attempt to form a string longer that &MAXLNGTH by concatenation.>)
$ERMSG(11,8,,<Reserved.>)
$ERMSG(11,9,,<Reserved.>)
$ERMSG(11,10,<SLD>,<Attempt to form a STRING longer that &MAXLNGTH in call to DUPL
function.>)
$ERMSG(11,11,<SLP>,<Attempt to form a STRING longer that &MAXLNGTH in call to LPAD or RPAD
function.>)
$ERMSG(11,12,,<Reserved.>)
$ERMSG(11,13,<FSL>,<Attempt to form a STRING longer that &MAXLNGTH.>)
$ERMSG(11,14,,<Reserved.>)

$END	(11)
$BEGIN	(12)

$ERMSG(12,1,<DSK>,<Could not open DSK for user.>)
$ERMSG(12,2,<TMP>,<Could not find nnnSNO.TMP.>)
$ERMSG(12,3,<REN>,<RENAME could not rename a file.>)
$ERMSG(12,4,<IIE>,<Incorrectable input error.>)
$ERMSG(12,5,<IOE>,<Incorrectable ouput error.>)
$ERMSG(12,6,<EOF>,<Attempt to read past end of file.>)
				;;[304] XXXOPY Removed
$ERMSG(12,8,<OPY>,<Expiration date has been passed.  Do not patch the system beyond this
date as unpredicatable errors will occur.>)
$ERMSG(12,9,<CLS>,<Error in closing a file.>)
$ERMSG(12,10,<CRS>,<Unable to allocate core as required by switches.>)
$ERMSG(12,11,<SWI>,<Unrecognizable switch in the command string.>)
$ERMSG(12,12,<FSP>,<Missing file spec where one was expected.>)
$ERMSG(12,13,<SPE>,<Erroneous file specification.>)
$ERMSG(12,14,<MFO>,<Too many output file specifications in the command string.>)
$ERMSG(12,15,<MCH>,<Number of I/O channels exceeds 15.>)
$ERMSG(12,16,<DEL>,<DELETE could not delete the file.>)
$ERMSG(12,17,<INI>,<An attempt was made to initiate I/O on a device other than an DSK that
had already been initiated.>)
$ERMSG(12,18,<GTS>,<The GETSTS UUO failed with some given device name.>)
$ERMSG(12,19,<MIO>,<An attempt was made to do I/O on a file in both word mode and ascii
mode.  An ENDFILE or a REWIND should be given before attempting to
transmit in the new format.>)
$ERMSG(12,20,<FIC>,<The mode implied by a format is incompatable with the device.>)
$ERMSG(12,21,<TYB>,<The input record form the teletype exceeds the maximum permitted (300
characters).>)
$ERMSG(12,22,<EOO>,<Error in opening a file for output.>)
$ERMSG(12,23,<EOI>,<Error in openifile for input.>)
$ERMSG(12,24,<SNS>,<A string written in N format has fewer than 6 characters.>)
$ERMSG(12,25,<RUN>,<An error was reported by the RUN UUO.>)
$ERMSG(12,26,<OEL>,<Incorrectable output error on the Listing File.>)
$ERMSG(12,27,<OEO>,<Incorrectable output error on the Output File.>)
$ERMSG(12,28,<OPN>,<Error in opening a file.>)
$ERMSG(12,29,<ILF>,<Illegal format.  A format   longer than   1 character contained
unrecognizable characters.>)
$ERMSG(12,30,<IFF>,<An input file could not be found.>)
$ERMSG(12,31,<FTY>,<Unable to flush tty buffer before reading.>)
$ERMSG(12,32,<LRL>,<Attempt to LOAD a REL file containing an unsupported LINK itemtype.>)
$ERMSG(12,33,<LRR>,<Attempt to LOAD a function with external reference.
(LNKSYM)>)
$ERMSG(12,34,<EFA>,<An external function contains an absolute address.
(LNKEND)>)
$ERMSG(12,35,<EEF>,<Could not find entry point for external function. (LNKEND)>)
$ERMSG(12,36,<LES>,<Attempt to LOAD external function with symbolic starting address.
(LNKCOD)>)
$ERMSG(12,37,<LEA>,<Attempt to LOAD external function with absolute starting address.
(LNKCOD)>)
$ERMSG(12,38,<LEH>,<Attempt to LOAD external function with a high segment. (LNKCOD)>)
$ERMSG(12,39,<EAP>,<Error in append mode I/O.>)
$ERMSG(12,40,<COM>,<Attempt to load an external function with a COMMON area.>)
$ERMSG(12,41,<CPU>,<Attempt to load an external function that will not run on this processor.>)
$ERMSG(12,42,<ALT>,<Attempt to load an external function produced by an unknown translator.>)
$ERMSG(12,43,<F40>,<Attempt to load F40 produced code.>)
$ERMSG(12,44,<COB>,<Attempt to load a file produced by COBOL.>)
$ERMSG(12,45,<ALG>,<Attempt to load a file produced by ALGOL.>)
$ERMSG(12,46,<NEL>,<Attempt to load a file produced by NELIAC.>)
$ERMSG(12,47,<PL1>,<Attempt to load a file produced by PL/1.>)
$ERMSG(12,48,<SAI>,<Attempt to load a file produced by SAIL.>)
$ERMSG(12,49,<BPL>,<Attempt to load a file produced by BCPL.>)
$ERMSG(12,50,<SIM>,<Attempt to load a file produced by SIMULA.>)
$ERMSG(12,51,<C74>,<Attempt to load a file produced by COBOL74.>)
$ERMSG(12,52,<C79>,<Attempt to load a file produced by COBOL79.>)
$ERMSG(12,53,<BSC>,<Attempt to load a file produced by BASIC.>)

$END	(12)
$BEGIN	(13)

$ERMSG(13,0,<ARG>,<Too many arguments for a built-in function.>)
$ERMSG(13,1,<AGN>,<Evaluated argument TO POS, RPOS, TAB, RTAB or LEN is negative.>)
$ERMSG(13,2,,<Reserved.>)
$ERMSG(13,3,,<Reserved.>)
$ERMSG(13,4,,<Reserved.>)
$ERMSG(13,5,,<Reserved.>)
$ERMSG(13,6,<EAN>,<Evaluated argument to ANY, NOTANY, SPAN, BREAK or BREAKX is null.>)
$ERMSG(13,7,,<Reserved.>)
$ERMSG(13,8,,<Reserved.>)
$ERMSG(13,9,<MTA>,<First argument to MTAPE is not an integer 0 thru 6.>)
$ERMSG(13,10,,<Reserved.>)
$ERMSG(13,11,<UDN>,<Operand of unary $ is null.>)
$ERMSG(13,12,<ALN>,<Argument for LEN is negative.>)
$ERMSG(13,13,,<Reserved.>)
$ERMSG(13,14,<IFN>,<Argument for TAB, POS, RPOS or RTAB is negative.>)
$ERMSG(13,15,,<Reserved.>)
$ERMSG(13,16,,<Reserved.>)
$ERMSG(13,17,<SAN>,<SPAN argument is null.>)
$ERMSG(13,18,<BXN>,<Argument for BREAKX is null.>)
$ERMSG(13,19,<BKN>,<Argument for BREAK is null.>)
$ERMSG(13,20,<NTN>,<NOTANY argument is null.>)
$ERMSG(13,21,<ANN>,<ANY argument is null.>)
$ERMSG(13,22,<NFA>,<Null first argument in call to the ARRAY function.>)
$ERMSG(13,23,,<Reserved.>)
$ERMSG(13,24,<ARN>,<An array bound in a call to the ARRAY function is non-numeric.>)
$ERMSG(13,25,,<Reserved.>)
$ERMSG(13,26,,<Reserved.>)
$ERMSG(13,27,<ADB>,<An array dimension (HBD-LBD+1) in a call to the ARRAY function is not
between 0 and 2 ** 18.>)
$ERMSG(13,28,,<Reserved.>)
$ERMSG(13,29,<CVT>,<Array argument for CONVERT to TABLE is not dimensioned in the form
n,2.>)
$ERMSG(13,30,<DTN>,<Argument to DATA is null or non-string.>)
$ERMSG(13,31,<DDN>,<Datatype name in argument to DATA is null.>)
$ERMSG(13,32,<DLP>,<Missing left paren in DATA argument.>)
$ERMSG(13,33,<DNN>,<Field name is null in DATA argument.>)
$ERMSG(13,34,<DRP>,<DATA argument does not end with ")".>)
$ERMSG(13,35,,<Reserved.>)
$ERMSG(13,36,,<Reserved.>)
$ERMSG(13,37,<ADM>,<Function name in first argument to DEFINE is missing. (NULL)>)
$ERMSG(13,38,<DPL>,<First argument to DEFINE is missing.>)
$ERMSG(13,39,,<Reserved.>)
$ERMSG(13,40,<DPR>,<First argument to DEFINE is missing a ")".>)
$ERMSG(13,41,,<Reserved.>)
$ERMSG(13,42,<SRD>,<Array argument to SORT or RSORT has dimensionality of greater than 2.>)
$ERMSG(13,43,<SNC>,<A request was made to SORT (or RSORT) a doubly dimensioned array on
a non-existant column.>)
$ERMSG(13,44,<SNF>,<The second argument to SORT (or RSORT) was a name, but it was not the
name of a field function.>)
$ERMSG(13,45,,<Reserved.>)
$ERMSG(13,46,<OPD>,<Third argument to OPSYN is not 0, 1 or 2.>)
$ERMSG(13,47,<RDM>,<The argument to RANDOM was either negative or was such as to cause some
inexplicable conversion error when converted to REAL in preparation for
a multiply.>)
$ERMSG(13,48,,<Reserved.>)
$ERMSG(13,49,<TBN>,<Argument to TABLE is negative.>)
$ERMSG(13,50,<SST>,<Only one argument was given to SUBSTR.>)
$ERMSG(13,52,<RUA>,<The first argument to RUN is not a valid spec.>)
$ERMSG(13,53,<TAV>,<The first argument to TRACE was the name of a created variable and the
trace request was not for VALUE.>)
$ERMSG(13,54,,<Reserved.>)
$ERMSG(13,55,<COD>,<The null string was given as argument to CODE.>)
$ERMSG(13,56,<TAP>,<The third argument to LPAD or RPAD is not of length 1.>)
$ERMSG(13,57,<NAP>,<Incorrect number of arguments to LPAD or RPAD.>)
$ERMSG(13,58,<ASC>,<The argument to ASCII was not an integer in the range 0,177.>)
$ERMSG(13,59,<FLD>,<The first argument to FIELD is not the name of a defined datatype.>)
$ERMSG(13,60,<ATT>,<Second argument to TRACE was not one of the designated types.>)
$ERMSG(13,61,<TTC>,<Argument to TTY was not 'C' or null.>)
$ERMSG(13,62,<IUF>,<Inconsistent or unrecognizable format characters were detected.>)
$ERMSG(13,63,<CCB>,<During a conversion under format control a character was out of bounds.>)
$ERMSG(13,64,<WFL>,<In attempting to write under a word-mode format, the data item was to
long to fit within a 36-bit word.>)
$ERMSG(13,65,<CSA>,<A request was made to convert a strange object to ARRAY.>)
$ERMSG(13,66,<CST>,<A request was made to convert a strange object to TABLE.>)
$ERMSG(13,67,<ALP>,<The first argument to ARG   or   LOCAL did not identify a programmer
defined function.>)
$ERMSG(13,68,<SAC>,<The second argument to CONVERT is improper.>)
$ERMSG(13,69,<FIF>,<Improper  file-specification to a file handling function (RENAME,
DELETE, FILE, etc.).>)
$ERMSG(13,70,<TRT>,<The second argument to TRACE indicated Keyword but the FIRST ARGUMENT
was not the name of a   TRACEABLE keyword   (i.e., one of 'ERRTYPE',
'FNCLEVEL', 'STCOUNT' or 'STFCOUNT').>)
$ERMSG(13,71,<LDL>,<First argument to LOAD is missing a "(".>)
$ERMSG(13,72,<LAN>,<Function name in first argument to LOAD is null.>)
$ERMSG(13,73,<LMP>,<First argument to LOAD is missing a ")".>)
$ERMSG(13,300,<APF>,<The second argument to ASSOCIATE is a programmer-defined data object
but HAS LESS than four fields.>)
$ERMSG(13,301,<IPF>,<Third argument to INSERTBP is a programmer-defined data object but has
fewer than four fields.>)
$ERMSG(13,302,<CPF>,<Second argument to CONNECT is a programmer-defined data object but has
fewer than four fields.>)

$END	(13)
$BEGIN	(14)

$ERMSG(14,1,,<Reserved.>)
$ERMSG(14,2,,<Reserved.>)
$ERMSG(14,3,<NRN>,<A NRETURN was attempted without a NAME.>)
$ERMSG(14,4,,<Reserved.>)
$ERMSG(14,5,<NRP>,<An attempt was made to obtain the   name   of the result of pattern
matching (eg., .(S ? P)  ).>)
$ERMSG(14,6,<VVE>,<A value appeared where a variable was expected.>)
$ERMSG(14,7,<VGA>,<A value was given to unary "@".>)
$ERMSG(14,8,<VGP>,<A value was given to unary '.'.>)
$ERMSG(14,9,<AAV>,<An attempt was made to assign to a value.>)

$END	(14)

>;END OF ERRORS DEFINITION
	SUBTTL	EXPANSION OF ERROR MESSAGES

; DETERMINE THE LENGTH OF THE TABLE

E.MAX==0			; MAX. NUMBER OF ERROS IS ZERO

DEFINE	$BEGIN(A),<E.MAX==^D<A>>	; THIS INCREMENTS THE MAX.
DEFINE	$END(A),<>		; NULL MACRO
DEFINE	$ERMSG(A,B,C,D)<>	; Null macro

	ERRORS			; JUST DEFINE THE AREA


ERRTAB:
IF1,<
	BLOCK	E.MAX		; JUST DEFINE THE AREA
>

IF2,<
DEFINE	ENT(A),<
	EXP	E$'A
>
	%%0==1
	.XCREF	%%0
	RADIX	10
REPEAT	E.MAX,<
	ENT	(\%%0)
	%%0==%%0+1
>
	RADIX	8
>;END OF IF2
;
;                       Format of error message expansions
;
;
;    =========================================================================
;    !    3 SIXBITchars. of &ERRNAME     !    Length of &ERRMSG in bytes     !
;    =========================================================================
;    /                                                                       /
;    /                   Text of &ERRMSG (in ASCII format)                   /
;    /                                                                       /
;    =========================================================================
;
;

DEFINE	$BEGIN(A),<>
DEFINE	$END(A)<>
DEFINE	$ERMSG(A,B,C,D),<
	LSTR==0
	IFNB <C>,<C'TXT:
	IRPC <D>,<LSTR==LSTR+1>
	<SIXBIT /C/>+LSTR
	ASCII	%'D'%
>>

; General error message for undefined items.

TXT:	XWD	'RSV',^D9
	ASCII	|Reserved.|

	ERRORS


	DEFINE	$BEGIN(A),<
	E$'A:
	>


	.XCREF LSTR
	DEFINE $ERMSG(A,B,C,D),<
	RADIX	10
	XWD	B,C'TXT
	RADIX	8
	>

	ERRORS
IFN FTSINGLE,	END
IFE FTSINGLE,	END	STBERR
@@