.lm 5.rm 72.hl 1 Advanced Features - Substitution Parameters
.paragraph
PCOM has the capability to pass parameters into the PCOM command file
from command level.  This is done through the introduction of ordered
keywords defined by the user.  To use the parameter substitution
mechanism, the user must either specify a list of parameters on the
command line, or provide a parameter declaration inside the command
file.
.paragraph
Each of the following command lines, will enable the parameter
substitution mechanism.  The first two lines are entered to XEXEC,
and the remaining two lines would be part of a PCOM command file.
If neither of the parameter-list or the parameter-name-list is
specified, PCOM initially disables parameter substitution.
.sk.literal
    -R PCOM ; commandfile parameter-list /switches
    -PCOM logfile=commandfile parameter-list /switches
    :COM commandfile parameter-list
    :PARAMETERS parameter-name-list
.end literal.sk

.lm +20
.sk.i -20
parameter-list######is the list of values, separated by commas or
spaces, which the user wants to substitute inside the PCOM command
file.  Imbedded spaces and special characters may be used by enclosing
the substitution string in single or double quotes, (') or (").

.sk.i -20
parameter-name-list#is the list of parameter names which the user
wants to have replaced with the values from the parameter-list.
Parameter names may contain any alphabetic character (A-Z and a-z),
where "A" is the same as "a", and the punctuation characters dash (-)
and underscore (__).
.lm -20

.hl 2 Parameters Types
.paragraph
There are three distinct types of parameters:  ordered, named and
pre-declared.  The "ordered" parameters are taken from the parameter-list
in the order they are specified and matched one-by-one against the
names specified in the parameter-name-list.  For example:
.tp 3
.sk.literal
    -R PCOM ; filename sub1,sub2,sub3,...,subN
    :PARAMETERS  A,B,C,...,N
.end literal.sk
will match the string "sub1" with parameter name "A", "sub2" with
"B", "sub3" with "C", and so on.  "Named" parameters allow the user to
specify the default value of a declared parameter name, or to declare
new parameters by name.  For example:
.sk.literal
    -R PCOM ; filename file=test,new=wanted,old="a formality"
    :PARAMETERS  USER,FILE,SYSTEM
.end literal.sk
will assign the string "test" to parameter FILE and the null string
to parameters USER and SYSTEM.  It will also define two new parameter
names:  NEW and OLD, and will assign them the values specified
"wanted" and "a#formality".
.paragraph
The interaction between "ordered" and "named" parameters is very
important to understand.  In the previous example, there were
three parameters specified:  FILE, NEW and OLD, and three "ordered"
parameters declared:  USER, FILE and SYSTEM.  Both of the "ordered"
parameters not specified:  USER and SYSTEM were assigned the null
string.  The "ordered" parameter FILE was also "named", and thereby
was assigned the string value "test".  If instead, the following was
specified:
.paragraph
.sk.literal
    -R PCOM ; filename SYS,PROG,20,file=FOO
    :PARAMETERS USER,FILE,SYSTEM
.end literal.sk
then the values "SYS", "PROG" and "20" would be matched with
parameter names USER, FILE and SYSTEM respectively.  FILE would also
be assigned the value "FOO".  As might be guessed, FILE cannot contain
both "FOO" and "PROG".  Thus, some form of arbitration must occur.
This is done by having "named" parameters provide "default" values to
parameter names.  The parameter FILE is assigned the default value
"FOO" from the command line.  When the ":PARAMETERS" statement is
encountered within the command file, this default is then overridden
with the specified value "PROG".  If the default value is constant,
then it may be specified inside the command file:
.sk.literal
    :PARAMETERS  USER, FILE="PROG", SYSTEM="20"
.end literal.sk
.tp 14
To allow the default value to be used, the user simply omits that
parameter from the command line.  For example:
.sk.literal
    -R PCOM ; filename SYS,PROG,20
    -R PCOM ; filename SYS
    -R PCOM ; filename SYS,,20
    -R PCOM ; filename USER=SYS
.end literal.sk
would all produce the same results using the ":PARAMETERS" line
from above.  An important note: all "ordered" parameters must appear
prior to any "named" parameters on the command line.  For example,
.sk.literal
    -R PCOM ; filename SYS, SYSTEM=20, PROG
.end literal.sk
is illegal, and an error will result.  As mentioned above, it is
reasonable to have default values specified for various parameters in
the command file.  However, a user familiar with the contents of a
particular command file may prefer to specify a different value on
the command line.  Thus the order of precedence for defaults is as
follows:
.sk.literal
    (1) - A specified "ordered" parameter on the command line.
    (2) - A specified "named" parameter on the command line.
    (3) - A specified default value in the command file.
.end literal

.hl 2 Pre-Declared Parameters
.paragraph
The third type of parameter is the "pre-declared" parameter variable.
These parameters are pre-declared by PCOM and are used to examine
or change the user environment.  PCOM currently knows about the
following system variables:
.ts 8,19,24,32
.sk.lm +16
.indent -16
_$DAYTIME	- is a string containing the current time of day
in the form HH:MM:SS using the 24-hour clock 00:00:00 to 23:59:59.
(Read-Only)
.indent -16
_$DELIMITER	- is a character variable which contains the
value of the character used to delimit substitution of parameters.
Initially the value is back-slash (_\).
.indent -16
_$FALSE	- is a boolean variable equal to 0. (Read-Only)
.indent -16
_$LOGGING	- is a boolean variable for controlling the output sent
to the log file (if one exists).  If there is no log file, then this
variable becomes Read-Only and is equal to 0. (FALSE)
.indent -16
_$MAIL	- is a boolean variable which controlls whether mail
is to be sent to the user upon completion of the PCOM job.  The initial
value depends on the value of the /MAIL switch.
.indent -16
_$SUBSTITUTION	- is a boolean variable for controlling the in-line
substitution of parameters.  The initial value is 0 (FALSE) unless 
a parameter is specified on the command line or a :PARAMETERS statement
is encountered.
.indent -16
_$TIMELIMIT	- is a decimal value containing the remaining time
limit for the processing frame.  This variable is set initially to the
value of the /TIME switch and may be reset directly or by the :TIME#n
command.  If this variable is set to 0, then there is no time limit.
.indent -16
_$TRUE	- is a boolean variable equal to 1.  (Read-Only)
.indent -16
_$TRULIMIT	- is a decimal value containing the remaining TRUs for
the processing frame.  This variable is initially set to 0 which means
that there is no initial TRU limit.  Setting this variable means that
from the current point, that many TRUs may be accrued before the job
is stopped.  This is very useful if the user expects a program to use
a small number of TRUs and something goes wrong.  PCOM will prevent
the program from running up too many TRUs.
.lm -16.sk
.ts 8,16,24,32,40,48,56,64,72,80


.hl 2 Using Parameter Substitution
.paragraph
Substitution parameters may be used anywhere within a command file
after they have been declared, including PCOM command lines.  The
way to invoke a substitution is to precede the name of the parameter
with the parameter-delimiter character.  This is initially set to the
character backslash (_\) but may be changed at the discretion of the
user.  For example, to use the parameter named USER from the examples
above:
.sk.literal
    (\USER\)
       or
    copy (\USER\)file.ext to same
.end literal.sk
would fill in the username from the parameter USER.  The parameter
name MUST be preceeded by the delimiter and MUST be terminated with
a second delimiter.  For example, "_\PAR-NAME_\text" or "_\PAR_\_\PAR_\".

.paragraph
The user may also declare "named" parameters inside the command file via
the ":DEFINE" command.  For example:
.sk.literal
    :DEFINE RHYME="Mary had a little lamb.", SPEC="\NAME\.\EXT\"
      or
    :RHYME="Mary had a little lamb.", SPEC="\NAME\.\EXT\"
.end literal.sk
declares the two parameter names: RHYME and SPEC and assigns them their
respective values.  Note that this command is useful for combining
previously defined parameters (e.g.#NAME and EXT) into new parameters.

.paragraph
As mentioned elsewhere, the delimiter character may be changed at the
discretion of the user.  To change the delimiter to another character
(other than "_\"), simply set the value of the pre-declared parameter
variable "_$DELIMITER" to another character.  For example,
.sk.literal
    :$DELIMITER="<char>"
.end literal.sk
where "char" is the new desired delimiter character.  The user should
note and understand that the setting of the delimiter follows the
scope rules of ALGOL-like languages.  A delimiter declared in an outer
level command file is passed down to inner level command files.
However, a delimiter declared inside an inner level command file
reverts back to the previous delimiter set outside that file when the
inner level file is completed.
.sk
Important:  the delimiter must be a character which is not valid in
a parameter name, otherwise PCOM will not be able to determine where
your parameter name "really" ends.

.nohead
.page
#   