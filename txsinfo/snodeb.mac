	SUBTTL	D. R. Hanson/RCM/VB		15-July-76

; Support for the additional debugging features.
; COPYRIGHT (C) 1976,1977  STEVENS INSTITUTE OF TECHNOLOGY,
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.


  ;UNIVERSALS

	SEARCH	JOBDAT	;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 MACRO DEFINITIONS
	SEARCH	UUOSYM		;TOPS10 UUO SYMBOLS
	SEARCH	SNOPRM		;SITBOL PARAMETERS

  ;DIRECTIVES

	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWO SEGMENTS

  ;VERSION NUMBER

	DEBVER==5		;MAJOR VERSION
	DEBMIN==0		;MINOR VERSION
	DEBEDT==134		;EDIT LEVEL
	DEBWHO==0		;CUSTOMER VERSION

  ;TITLE

	TITLE.	DEB,SNODEB,<Debugging Additions to SITBOL>

  ;SHOW UNIVERSALS'S VERSION NUMBERS

	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%UUOS		;VERSION NUMBER OF UUOSYM
	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
IFE FTDDT,<END>			; stop now if we don't want this feature

	DEBTTL			; Title
	DEBPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Debugging Additions to SITBOL
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. Revision History . . . . . . . . . . . . . . . . . . .    3
;   3. Primary Function
;        3.1.   INSERTBP(label,offset,process). . . . . . . .    4
;        3.2.   REMOVEBP(label,offset,process). . . . . . . .    5
;        3.3.   WHERE(label,offset) . . . . . . . . . . . . .    6
;        3.4.   CONNECT(event,process). . . . . . . . . . . .    7
;        3.5.   DISCONNECT(event,proess). . . . . . . . . . .    8
;   4. Breakpoint Handling. . . . . . . . . . . . . . . . . .    9
;   5. Program Interruption Handling. . . . . . . . . . . . .   10
;   6. Utilities
;        6.1.   CVTLAB. . . . . . . . . . . . . . . . . . . .   11
;        6.2.   EVTIDX. . . . . . . . . . . . . . . . . . . .   12
	SUBTTL	Revision History

COMMENT	\
131	Add this module to SITBOL.  From University of Arizona
	David R. Hanson.
134	Add PORTALS for execute only.
\
	SUBTTL	Primary Function -- INSERTBP(label,offset,process)


IBP::	SKIPE	BPTBL##		; is there a breakpoint table?
	 JRST	IBP1		; yep--flow around initialization

	 ; Initialize the breakpoint table

	MOVEI	Z,^D7		; only 7 buckets
	JSP	TLINK,TBL##	; allocate the table
	POP	STACK,BPTBL+1	; establish as the breakpoint table
	POP	STACK,BPTBL

	 ; Verify arguments and allocate a table element

IBP1:	HLRZ	T1,-1(STACK)	; get datatype of 3rd argument
	CAIE	T1,DDT		; better be defined
	 ERROR.	1,306		; you lose
	HRRZ	T1,-1(STACK)	; it is--now get DBLOK address
	HRRZ	T1,BLENG(T1)	; get block length
	CAIGE	T1,PRLEN	; long enough?
	 ERROR.	13,301		; nope

	JSP	TLINK,GPRLVL##	; get process level
	 ERROR.	1,307		; oops??
	MOVEM	T2,IGNOP##	; save for later
	POP	STACK,FLAP##+1	; save defined data object...
	POP	STACK,FLAP##	; for later

	JSP	SLINK,CVTLAB	; convert 1st and 2nd args to CODE dt
	 ERROR	1,308		; you blew it

	PUSH	STACK,BPTBL	; push breakpoint table
	PUSH	STACK,BPTBL+1
	PUSH	STACK,-3(STACK)	; replicate code descriptor
	PUSH	STACK,-3(STACK)
	JSP	TLINK,ALTE##	; allocate a table element
	JSP	S2,ITE##	; and insert it into the table
	 JRST	IBP1A		; element was already there
	HRRZ	T1,-1(STACK)	; virgin TEBLOk--get its address
	CLEARM	TEVAL(T1)	; zap the value field
	CLEARM	TEVAL+1(T1)	;  to indicate end of list

	 ; Allocate a VABLOK and fill in the fields

IBP1A:	MOVE	Z,[VABLOK,,VALEN]	; we need a VABLOK
	JSP	QLINK,BLOK##	; get storage
	 ERROR	6,1		; you lose big
	POP	STACK,Z		; toss junk
	POP	STACK,P2	; get address of VABLOK

	HRLZI	Q1,IDT		; get integer 0 and fill in...
	MOVEM	Q1,VAFLG(P2)	;  flag field

	DMOVE	Q1,FLAP		; load process description
	DMOVEM	Q1,VAPROC(P2)	; and fill proper field

	DMOVE	Q1,-3(STACK)	; get code descriptor
	DMOVEM	Q1,VANAME(P2)	; and use as name of trap

	POP	STACK,Z		; toss second descriptor word of TVAR
	POP	STACK,T2	; get address of TEBLOK
	ADDI	T2,TEVAL	; point directly to value field
	MOVE	T3,IGNOP	; load new level
	JSP	TLINK,FNDPOS##	; seek proper position in trap chain
	DMOVE	Q1,0(T2)	; get value to displace
	DMOVEM	Q1,VAVAL(P2)	; store in VABLOK
	HRLI	P2,TVAR		; replace value by a trapped
	MOVEM	P2,0(T2)	;  variable pointing to
	MOVEI	Q1,BPERR	;  old blok and an error
	MOVEM	Q1,1(T2)	;  point if we ever try to use TVAR

	 ; Place a hook in the compiled code

	HRRZ	S2,-1(STACK)	; get CBLOK address
	ADD	S2,0(STACK)	; point to statement
	MOVEI	Q1,BRKPNT	; get new interpreter function
	HRRM	Q1,CHEAD(S2)	; stash in code
	JRST	RETNL1##	; return

	 ; Here if we ever try to use TVAR in VABLOKs

BPERR:
REPEAT 3,<ERROR	15>
	SUBTTL	Primary Function -- REMOVEBP(label,offset,process)

RBP::	SKIPN	BPTBL##		; is breakpoint table here?
	 JRST	RETNL3##	; no--return null

	POP	STACK,FLAP+1	; yes--save process description
	POP	STACK,FLAP

	JSP	SLINK,CVTLAB	; convert first 2 args to CODE dt
	 ERROR	1,308		; too bad

	 ; Check to see if statement has any breakpoints

	MOVE	T1,-1(STACK)	; get CBLOK address
	ADD	T1,0(STACK)	; point to statement
	HRRZ	T1,CHEAD(T1)	; get first interpreter fcn. address
	CAIE	T1,BRKPNT	; breakpoint?
	 JRST	RETNL1##	; nope--we are done

	MOVEI	T1,-TEREF-1(STACK)	; yes--get address of code
				; offset as if in TEBLOK
	MOVE	T2,BPTBL	; get breakpoint table address
	JSP	S3,FTE##	; find the table element
	 ERROR	15		; this can't happen
	MOVEI	P2,TEVAL(T1)	; point to head of chain
	MOVE	S3,P2		; save this for later
	MOVE	S2,FLAP		; get process descriptor

	 ; Loop removing desired associations

RBP1:	SKIPN	S1,0(P2)	; end of list? Load VABLOK addr. if not
	 JRST	RBP3		; yes--go finish up
	HLRZ	Q1,BTCODE(S1)	; get block code
	CAIE	Q1,VABLOK	; a little check to make sure this works
	 ERROR	15		; I found a bug!
	CAME	S2,VAPROC(S1)	; is this one of the ones we must remove?
	 JRST	RBP2		; no--go travel down list
	
	 ; Remove a breakpoint association

	SOS	VAFLG+1(S1)	; deactivate the association
	DMOVE	Q1,VAVAL(S1)	; get old value
	DMOVEM	Q1,0(P2)	; overwrite pointer
	JRST	RBP1		; loop for more

	 ; Here if VABLOK is not the one we want

RBP2:	MOVEI	P2,LHDR(S1)	; point to next value
	JRST	RBP1		; go on

	 ; Here when we have possibly removed some associations

RBP3:	SKIPE	0(S3)		; is the chain now empty?
	 JRST	RETNL1		; no--just return

	MOVE	T1,-1(STACK)	; yes--get CBLOK address
	ADD	T1,0(STACK)	; point to statement
	MOVEI	Q1,BGST##	; get the real interpreter fcn addr.
	HRRM	Q1,CHEAD(T1)	; zap out breakpoint
	JRST	RETNL1		; return
	SUBTTL	Primary Function -- WHERE(label,offset)

WHERE0::JSP	TLINK,CVTINT##	; convert second argument to integer
	 ERROR.	1,311		; bad argument
	POP	STACK,IGNOP##+1	; save offset
	POP	STACK,IGNOP

	JSP	TLINK,CVTNAM##	; try to convert to name
	 ERROR.	1,312		; bad argument

	PUSH	STACK,IGNOP	; put integer back on stack
	PUSH	STACK,IGNOP+1
	JSP	SLINK,CVTLAB	; find where label is
	 JRST	FRET2##		; you lose
	JRST	1(PLINK)	; return code datatype
	SUBTTL	Primary Function -- CONNECT(event,process)

CNCT::	HLRZ	T1,-1(STACK)	; get datatype of process
	CAIE	T1,DDT		; must be defined
	 ERROR.	1,314		; bad arg
	HRRZ	T1,-1(STACK)	; get DBLOK address
	HRRZ	T1,BLENG(T1)	; get length of DBLOK
	CAIGE	T1,PRLEN	; long enough?
	 ERROR.	13,302		; no

	JSP	TLINK,GPRLVL##	; get LEVEL number
	 ERROR.	1,315		; bad arg
	MOVEM	T2,IGNOP	; save for later
	POP	STACK,FLAP+1	; save defined data
	POP	STACK,FLAP	;  for later

	JSP	SLINK,EVTIDX	; get universal event index
	 ERROR.	1,316		; not a known event
				; leave index in T2
	MOVE	Z,[VABLOK,,VALEN]	; set to get a VABLOK
	JSP	QLINK,BLOK##	; get it
	 ERROR	6,1		; you lose big
	POP	STACK,Z		; toss junk
	POP	STACK,P2	; get address of VABLOK

	 ; Fill in fields of VABLOK

	MOVSI	Q1,IDT		; set flag field...
	MOVEM	Q1,VAFLG(P2)	;  to be an integer 0

	DMOVE	Q1,FLAP		; get process description
	DMOVEM	Q1,VAPROC(P2)	; store in proc field

	POP	STACK,VANAME+1(P2)
	POP	STACK,VANAME(P2); use event description as the name

	JRST	@[E.DDT](T2)	; dispatch for specific event

	 ; Here for event DDT.  P2 = VABLOK address.

E.DDT:	MOVEI	T1,DDTTRP	; get address of system trap
	SETDDT	T1,		; tell monitor to plug .JBDDT
	MOVEI	T2,DDTVAB##	; get address of trap chain
;	JRST	CNCT1		; go add new trap to chain

	 ; Merge here to insert VABLOK into the current trapping
	 ; chain.  T2 = address of chain head, P2 = address of VABLOK.

CNCT1:	MOVE	T3,IGNOP	; get back level field
	JSP	TLINK,FNDPOS##	; adjust T2 to point to displacee
	DMOVE	Q1,0(T2)	; load value to displace
	DMOVEM	Q1,VAVAL(P2)	; stuff in value field of VABLOK
	HRLI	P2,TVAR		; make a trapped variable
	MOVEM	P2,0(T2)	; link in new trapping block
	MOVEI	Q1,BPERR	; in case of errors
	MOVEM	Q1,1(T2)	; trap to an ERROR 15
	JRST	RETNUL##	; return a winner
	SUBTTL	Primary Function -- DISCONNECT(event,proess)

DCNCT::	SKIPN	DDTVAB##	; are there any associations?
	 JRST	RETNL2##	; no--we're done

	POP	STACK,FLAP+1	; yes--save process description
	POP	STACK,FLAP

	JSP	SLINK,EVTIDX	; get universal event index
	 ERROR.	1,317		; bad event type
	MOVE	P2,[DDTVAB##](T2); get address of head of trap chain
	MOVE	S2,FLAP		; get process descriptor

	 ; Loop removing desired associations

DCNCT1:	SKIPN	S1,0(P2)	; end of list?
	 JRST	RETNL1##	; yes--return
	HLRZ	Q1,BTCODE(S1)	; no--get block type code
	CAIE	Q1,VABLOK	; it must be a VABLOK
	 ERROR	15		; I found a bug
	CAME	S2,VAPROC(S1)	; is this an instance of the one?
	 JRST	DCNCT2		; no

	 ; Remove the association.

	SOS	VAFLG+1(S1)	; deactivate the VABLOK
	DMOVE	Q1,VAVAL(S1)	; load old value
	DMOVEM	Q1,0(P2)	; overwrite TVAR pointer
	JRST	DCNCT1		; loop for more

	 ; Here if VABLOK is not the one we want.

DCNCT2:	MOVEI	P2,LHDR(S1)	; point to next value
	JRST	DCNCT1		; try again
	SUBTTL	Breakpoint Handling

; Additional interpreter function to handle breakpoints.  Control
; arrives here whenever the execution of a statement containing 
; breakpoint associations is attempted.
;
; Control arrives with P1 containing address of statement.
;
BRKPNT::HLRZ	T2,CSTNO(P1)	; load statement number
	MOVSI	T1,IDT		; make integer descriptor in T1 and T2
	DMOVEM	T1,FLAP		; store for later

	MOVEI	T1,ILOC##-TEREF	; fake pointer to TEVAL field of TEBLOK
	SKIPE	T2,BPTBL##	; load breakpoint table address
	JSP	S3,FTE##	; find the table element
	 ERROR	15		; this shouldn't happen
	PUSH	STACK,TEVAL(T1)	; push head of list
	PUSH	STACK,TEVAL+1(T1)

	 ; Loop calling all association functions for active breakpoint
	 ; associations.

BRKP1:	JSP	TLINK,CHKACT##	; is the association active?
	 JRST	BRKP2		; no
	 JRST	BRKP2		; no


	JSP	TLINK,GPRFCT##	; yes--load function variable block addr in T2
	 ERROR.	1,310		; bad contents of FUNCT field
	SUB	STACK,XWD22##	; get rid of process description
	HRRZ	T3,-1(STACK)	; get VABLOK address
	MOVEI	T4,FLAP		; second argument is statement number
	SETOM	VAFLG+1(T3)	; set interlock
	JSP	TLINK,VACALL##	; call function
	 SKIPA			; failed--ignore it
	SUB	STACK,XWD22##	; success--toss returned value
	HRRZ	T1,-1(STACK)	; get VABLOK address
	CLEARM	VAFLG+1(T1)	; clear interlock

	 ; Merge here and try for another VABLOK

BRKP2:	POP	STACK,Z		; discard junk
	POP	STACK,T1	; get VABLOK address
	SKIPN	VAVAL(T1)	; another one?
	 JRST	BGST##		; no--go to real begin stmt routine
	PUSH	STACK,VAVAL(T1)	; yes--push VABLOK onto stack
	PUSH	STACK,VAVAL+1(T1)
	JRST	BRKP1		; try this one
	SUBTTL	Program Interruption Handling

; Here whenever the user has interrupted the program by typing
; two control-C's and then reentered via the DDT command.

DDTTRP::	PORTAL	.+1	; Exo entry point
	MOVEM	T1,T1SAV##	; save a register
	MOVE	T1,[JRST $DDCMD##]; get the trap instruction
	MOVEM	T1,I.JRST##	; enable the trap
	MOVE	T1,T1SAV	; restore the register
	JRST	@.JBOPC		; continue until we hit the trap

; Here when the central interpreter loop XCT's the JRST DDTCMD planted
; by the above trap sequence.  This code can be considered type P
; but must save the state of the pattern matcher and interpreter.
;
DDTCMD::	PORTAL	.+1		; Exo entry point
	MOVE	Q1,[JRST I.BUMP##]	; get loop instruction
	MOVEM	Q1,I.JRST##	; disable the trap
	SKIPN	DDTVAB##	; are there any associations?
	 JRST	I.BUMP		; no--continue interpreter loop

	MOVSI	Q1,IDT		; make an integer
	MOVE	Q2,$STNO##	; of &STNO for use as second arg
	DMOVEM	Q1,FLAP		; save for later

	PUSH	STACK,DDTVAB##	; push the first VABLOK of...
	PUSH	STACK,DDTVAB+1	;  the trapping chain

	 ; Loop calling all association functions for active DDT
	 ; associations.

DDTCM1:	JSP	TLINK,CHKACT##	; is this one active?
	 JRST	DDTCM3		; no
	 JRST	DDTCM3		; ditto

	JSP	TLINK,GPRFCT##	; yes--get function variable blok addr.
	 ERROR.	1,313		; you blew it
	SUB	STACK,XWD22##	; toss process description
	HRRZ	T3,-1(STACK)	; get VABLOK address
	MOVEI	T4,FLAP		; get address of second argument
	SETOM	VAFLG+1(T3)	; set the interlock
	JSP	TLINK,VACALL##	; call the association function
	 JRST	DDTCM4		; failed--stop processing and fail

	SUB	STACK,XWD22##	; toss returned value
	HRRZ	T1,-1(STACK)	; get VABLOK address
	CLEARM	VAFLG+1(T1)	; clear interlock

	 ; Merge here to try next VABLOK

DDTCM3:	POP	STACK,Z		; toss extra word
	POP	STACK,T1	; get address of current VABLOK
	SKIPN	VAVAL(T1)	; is there another one?
	 JRST	I.BUMP		; no--resume interpreter loop
	PUSH	STACK,VAVAL(T1)	; yes--push it
	PUSH	STACK,VAVAL+1(T1)
	JRST	DDTCM1		; and loop

	 ; Here if an association function failed.  Stop looping
	 ; and cause the statement to fail.

DDTCM4:	POP	STACK,Z		; get rid of junk
	POP	STACK,T1	; get VABLOK address
	CLEARM	VAFLG+1(T1)	; clear interlock
	JRST	I.FAIL##		; make statement fail
	SUBTTL	Utilities -- CVTLAB
;		---------

; CVTLAB -- convert label, offset pair to code pointer.  Call is
;
;	push label descriptor
;	push offset descriptor
;	JSP	SLINK,CVTLAB
;	  error return--label not found or bad datatype; stack unchanged
;	normal return--two descriptors replaced by CDT descriptor
;
; Type S, unstable.
;
CVTLAB::JSP	TLINK,CVTINT##	; convert offset to integer
	 JRST	0(SLINK)	; not an integer--fail

	PUSH	STACK,-3(STACK)	; replicate label descriptor...
	PUSH	STACK,-3(STACK)	;  for conversion
	HLRZ	T1,-1(STACK)	; get label datatype
	CAIN	T1,CDT		; is it already CODE ?
	 JRST	CVLAB1		; yes--no need to convert
	JSP	TLINK,CVTNAM##	; convert to name
	 JRST	BADLAB		; can't convert--give error return
	SKIPE	0(STACK)	; must be natural variable
	 JRST	BADLAB		; its not--die

	MOVE	T1,-1(STACK)	; it is--get variable block address
	SKIPGE	VFLAGS(T1)	; operators...
	 JRST	BADLAB		;  always lose
	SKIPE	T1,VLABEL(T1)	; is there a label?
	TRNN	T1,-1		; yes--but is it user-defined?
	 JRST	BADLAB		; not a label or system label--lose
	HLRZM	T1,0(STACK)	; store offset in second word
	HRLI	T1,CDT		; we want datatype CODE
	MOVEM	T1,-1(STACK)	; we now have CODE

	 ; Merge here to search through code for the right spot

CVLAB1:	MOVE	T4,-2(STACK)	; get desired offset
	HRRZ	S2,-1(STACK)	; get current CBLOK address
	SKIPA	S3,0(STACK)	; get current offset and skip into loop

CVLABL:	MOVE	S3,Q1		; establish new offset
	JUMPE	T4,CVLAB2	; quit if we are there
	MOVE	Q1,S2		; get current CBLOK address
	ADD	Q1,S3		; point to current statement
	JUMPL	T4,CVLABN	; go process negative offset

	 ; Positive offset

CVLABP:	HRRZ	Q1,CNEXT(Q1)	; get offset of next statement
	CAMLE	Q1,S3		; did we overflow into next CBLOK?
	 SOJA	T4,CVLABL	; no--decrement count and go test
	HRRZ	S2,NCLINK(S2)	; yes--get next CBLOK address
	JUMPN	S2,CVLABL	; continue unless the end
	JRST	BADLAB		; yipes--ran into end of program!

	 ; Negative offset

CVLABN:	HLRZ	Q1,CLAST(Q1)	; get offset of previous statement
	CAMGE	Q1,S3		; did we back up into previous CBLOK?
	 AOJA	T4,CVLABL	; no--increment count and go test
	HLRZ	S2,LCLINK(S2)	; yes--get previous CBLOK address
	JUMPN	S2,CVLABL	; continue unless the beginning
	JRST	BADLAB		; yipes--ran into beginning of program!

	 ; Here when we reach the desired label and offset

CVLAB2:	SUB	STACK,[4,,4]	; prune stack a bit exposing label arg
	HRLI	S2,CDT		; make a CODE datatype descriptor
	MOVEM	S2,-1(STACK)	; establish CBLOK address
	MOVEM	S3,0(STACK)	; establish offset
	JRST	1(SLINK)	; return a winner

	 ; Here if we found an error of some kind.  Stack has extra
	 ; descriptor on it.

BADLAB:	SUB	STACK,XWD22##	; git rid of extra descriptor
	JRST	0(SLINK)	; fail

	SUBTTL	Utilities -- EVTIDX

; EVTIDX -- determine universal event index given an event description.
; Call is
;
;	push event descriptor
;	JSP	SLINK,EVTIDX
;	 error return--not a known event
;	normal return--T2 contains XWD n,index
;
; In both cases, the stack is unchanged.
;
; Possible results for T2 are:
;
; 0,,0	- Event is ^C^C interruption and reentry via DDT command.
;
; Type S, unstable.
;
EVTIDX::JSP	TLINK,CVTSTR##	; attempt to convert argument to string
	 JRST	0(SLINK)	; no--you lose

	PUSH	STACK,-1(STACK)	; replicate the string
	PUSH	STACK,-1(STACK)
	JSP	QLINK,CVTPTR##	; point to string
	0			; no basing
	JRST	BADEVT		; null string loses

	ILDB	T1,Z		; get first character
	CAIE	T1,"d"		; a "d" or a
	CAIN	T1,"D"		;  "D" indicate...
	TDZA	T2,T2		;  DDT event
	JRST	0(SLINK)	; loser
	JRST	1(SLINK)	; winnah!

	 ; Here if we have bad argument

BADEVT:	SUB	STACK,XWD22##	; prune the stack
	JRST	0(SLINK)	; fail

	END
  