	SUBTTL	Ma355 -- Gimpel/JDS/MDP/RCM/VB		29-Sep-76

; Copyright (c) 1972, 1973, 1976, 1977 Stevens Instutite of Technology
; Hoboken, New Jersey, 07030
; All Rights Reserved.

  ; Directives

	SALL			; Suppress macro expansions
	.DIREC	.XTABM		; Exclude tabs from macro calls
	TWOSEG	400K		; Two segments

  ; Universals

	SEARCH	JOBDAT		; Job data area definitions
	SEARCH	MACTEN		; DEC-10 macro definitions
	SEARCH	UUOSYM		; TOPS10 UUO symbols
	SEARCH	SNOPRM		; Sitbol parameter file

  ; Version number

	KEYVER==5		; major version number
	KEYMIN==0		; Minor version number
	KEYEDT==204		; Edit level
	KEYWHO==0		; Customer argument

  ; Title

	TITLE.	KEY,SNOKEY,<Keywords>

  ; Universals version numbers

	SHOW.	%%JOBD		; JOBDAT's version number
	SHOW.	%%MACT		; MACTEN's version number
	SHOW.	%%UUOS		; UUOSYM's version number
	SHOW.	%%SNOP		; SNOPRM's version number

	KEYTTL			; Title
	KEYPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Keywords
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. Revision History . . . . . . . . . . . . . . . . . . .    3
;   3. &VERSION . . . . . . . . . . . . . . . . . . . . . . .    7
;   4. UNPROTECTED KEYWORD TABLE. . . . . . . . . . . . . . .    9
;   5. &HISTOGRAM . . . . . . . . . . . . . . . . . . . . . .   10
	SUBTTL	Revision History

COMMENT	{
122	Reorganize & cleanup the code
170	Add new keywords for error processing.
204	Add &VERSION keyword to set version and return high seg version.
{
;
;
;   3. FUNCTION KEYW
;
; THE CALLING SEQUENCE
;   PUSH   STACK,FIRST WORD OF VARIABLE DESCRIPTOR
;   PUSH   STACK,SECOND    "
;   ERROR RETURN
;   NORMAL RETURN
;
; IN THE CASE OF PROTECTED KEYWORDS A DESCRIPTOR FOR THE VALUE OF THE
; KEYWORD WILL BE RETURNED ON THE STACK.
; IN THE CASE OF AN UNPROTECTED KEYWORD A TRAP VARIABLE WILL BE
; RETURNED
;
;	FUNC	KEYW$,1
KEYW::	POP	STACK,IGNOP##	; RETRIEVE DESCRIPTOR
	POP	STACK,P2
	 ;
	HLRZ	S1,P2		; GET DATATYPE
	CAIN	S1,VAR		; IF NOT A VARIABLE
	SKIPE	IGNOP		; OR IF NOT NATURAL
	ERROR	5,1		; GIVE BAD KEYWORD MESSAGE
	 ;
	HLRZ	S1,VKEY(P2)	; RETRIEVE KEY FIELD
	TRNN	S1,KYMASK	; CHECK FOR TRUE KEYWORD NUMBER
	ERROR	5,2		; THE VARIABLE IS NOT A KEYWORD
	ANDI	S1,KYMASK	; AND OUT VFLAGS
	CAIL	S1,40		; JUMP TO PROTECTED OR UNPROTECTED
	JRST	KEYW1		; KEYWORD # LESS THAN 40 THEN PROTECTED
;
;	PROTECTED KEYWORDS
;
	HLRZ	S2,PROTKW(S1)	; PUT KEYWORD NAME INTO S2
	HRRZ	S1,PROTKW(S1)	; TRANSFER TO ROUTINE TO CREATE
	JRST	0(S1)		; DESCRIPTOR
                                ; DESCRIPTOR
;
;	UNPROTECTED KEYWORDS
;
KEYW1:	HRLZI	S2,TVAR		; CREATE TRAP VARIABLE
	HLR	S2,UPROKW-40(S1); ------------------------------------
	PUSH	STACK,S2	; !    TVAR     !  KEYWORD ADDRESS   !
	HRRZ	S2,UPROKW-40(S1); !-------------!--------------------!
	PUSH	STACK,S2	; !/////////////! ADD TO PROCESS TRAP!
	JRST	1(PLINK)	; !----------------------------------!
;
;    4. TRAP VARIABLE FOR UNPROTECTED KEYWORDS
;
;  PUSH TRAP VARIABLE ONTO STACK AND IF THE KEYWORD IS BEING ASSIGNES A 
; VALUE THIS VALUE IS PUSHED ALSO
;  
;      JSP   PLINK,0(S3)
;      ERROR RETURN
;      NORMAL RETURN
;
;
; THIS CODE WILL BE EXERCISED UPON EVALUATING THE TRAP VARIABLE
; RETURNED DUE TO A REFERENCE TO AN UNPROTECTED KEYWORD
;

KWINTU:	JRST	KWINT1		; RETRIEVE VALUE
	ERROR	5,7		; CANNOT HAVE A NAME RETURNED
	JSP	TLINK,CVTINT##	; CONVERT VALUE TO INTEGER
	ERROR 	5,6		; ILLEGAL VALUE
	HRRZ	S2,-3(STACK)
	POP	STACK,0(S2)	; PUT NEW VALUE INTO KEYWORD
	POP	STACK,IGNOS##
;
; ERROR TYPE IS THE ONLY UNPROTECTED KEYWORD THAT CAN BE TRACED, ALSO 
; WHEN IT IS ASSIGNED A VALUE BY THE USER WE MUST SIGNAL AN ERROR 
;
	CAIE	S2,$ERRTP##	; IF THE KEYWORD IS NOT
	JRST	1(SLINK)	; ERROR TYPE WE CAN RETURN
	SKIPE	$ERRTP+1	; SEE IF IT IS TRACED
	JSP	SLINK,ETPTRC##	; CALL TRACER
KWINT2:	JRST	ERRTPA##	; TRANSFER TO PROCESS THIS NUMBER
				; AND CHECK FOR SETEXIT ...
;
;   HERE WHEN THE VALUE OF THE KEYWORD IS NEEDED WE CREATE AN INTEGER
;   DESCRIPTOR ON THE STACK.
;
KWINT1:	POP	STACK,IGNOS	;REMOVE TRAP VARIABLE FROM STACK
	POP	STACK,S2
	PUSH	STACK,[ XWD IDT,0]	; PUSH INTEGER DESCRIPTOR
	PUSH	STACK,0(S2)
	JRST	1(SLINK)
;		5. PROTECTED KEYWORD DESCRIPTORS
;
; DEPENDING ON WHAT TYPE OF VALUE EACH PROTECTED KEYWORD HAS WE CREATE A
; DESCRIPTOR SO THAT THE VALUE CAN BE RETURNED ON THE STACK.
;
KWPAT:	HRLI	S2,PDT		; PATTERN
	PUSH	STACK,S2
	PUSH	STACK,[0]
	JRST	1(PLINK)
KWSTR:	JUMPLE	S2,RETNUL##	; USED FOR &RTNTYPE
	PUSH	STACK,SYSTR##	; - IF THE RETURN STRING
	PUSH	STACK,@0(S2)	; IS NOT YET SET RETURN NULL
	JRST	1(PLINK)
KWINT:	PUSH	STACK,[ XWD IDT,0]	; INTEGER
	PUSH	STACK,0(S2)
	JRST	1(PLINK)
KWDESC:	PUSH	STACK,0(S2)	; DESCRIPTOR
	PUSH	STACK,1(S2)
	JRST	1(PLINK)
	
	 ; HERE FOR &COMMAND KEYWORD
	 ;
KWCMD:	MOVE	T1,STBASE	; BASE OF STACK
	PUSH	STACK,1(T1)	; LOAD THE ...
	PUSH	STACK,2(T1)	; COMMAND DESCRIPTOR
	JRST	1(PLINK)	; AND RETURN

	 ; HERE FOR &PPN
	 ;
KWPPN:	GETPPN	T2,		; GET PPN
	SKIP			; NO-OP
	 ;
	MOVSI	Z,1002		; 'O' FORMAT (DIRTY)
	JSP	TLINK,CVTWD##	; CONVERT TO STRING
	ERROR	15		; CAN'T ERR
	 ;
	JRST	1(PLINK)	; NORMAL RETURN

KWSIZE:	 ; &SIZE KEYWORD
	 ;
	MOVE	Q1,CEIL##		; FIND SIZE
	ADDI	Q1,MARGIN+1	; OF LOW CORE
	PUSH	STACK,[IDT,,0]	; AND CONSTRUCT
	PUSH	STACK,Q1	; INTEGER
	JRST	1(PLINK)	; AND RETURN
	SUBTTL	&VERSION

	; &VERSION keyword (unprotected)

KWVRSN:	JRST	VERHGH
	 ERROR	5,7		; Cannot be a name

	; Here for version (lowseg) redefinition

	JSP	TLINK,CVTSTR##
	 ERROR	5,6		; Improper data type

	MOVSI	Z,1002		; 'O' format
	JSP	TLINK,CVTDW##	; Get the word
	 ERROR	5,6

	MOVEM	Z,.JBVER	; Put the version no. in .JBVER
	SUB	STACK,XWD22##	; Get rid of garbage
	JRST	1(SLINK)	; Return

	; Here to return present SITBOL version of highseg.

VERHGH:	SUB	STACK,XWD22##

	MOVE	T2,.JBHGH+.JBHVR	; Get highseg version no.

	MOVSI	Z,1002		; 'O' format
	JSP	TLINK,CVTWD##	; Convert it to octal-looking string
	 ERROR	15

	JRST	1(SLINK)	; Normal return.
;
;	1. PROTECTED KEYWORD TABLE
;
PROTKW::	0
	XWD	$ABORT##,KWPAT
	XWD	$ALPHA##,KWDESC
	XWD	$ARB##,KWPAT
	XWD	$BAL##,KWPAT
	XWD	$FAIL##,KWPAT
	XWD	$FENCE##,KWPAT
	XWD	$FNCLV##,KWINT
	XWD	$LASTN##,KWINT
	XWD	$REM##,KWPAT
	XWD	$RTNTP##,KWSTR
	XWD	$STCNT##,KWINT
	XWD	$STFCT##,KWINT
	XWD	$STNO##,KWINT
	XWD	$SUCC##,KWPAT
	XWD	$JOBNO##,KWINT
	XWD	0,KWCMD
	XWD	FRSTNM##,KWINT
	XWD	0,KWPPN
	XWD	0,KWSIZE
	XWD	ERRPRM##,KWDESC
	XWD	ERRNAM##,KWDESC
	XWD	ERRMSG##,KWDESC
	SUBTTL	UNPROTECTED KEYWORD TABLE
;
UPROKW::XWD	$ABEND##,KWINTU
	XWD     $ANCH##,KWINTU
	XWD	$CODE##,KWINTU
	XWD	$DUMP##,KWINTU
	XWD	$ERRTP##,KWINTU
	XWD	$ERRLM##,KWINTU
	XWD	$FTRC##,KWINTU
	XWD	$FULL##,KWINTU
	XWD	$INPUT##,KWINTU
	XWD	$MAXL##,KWINTU
	XWD     $OUTPT##,KWINTU
	XWD     $STLIM##,KWINTU
	XWD     $TRACE##,KWINTU
	XWD     $TRIM##,KWINTU
	XWD	$HIST##,KWHIST	; &HISTOGRAM
	XWD	$RAND##,KWINTU	; &RANDOM
	XWD	CMPNO##,KWINTU	; &COMPNO
	XWD	$ASSOC##,KWINTU	; &ASSOCIATE
	XWD	$ERRLV##,KWINTU	; &ERRLEVEL
	XWD	$VERSN##,KWVRSN	; &VERSION
	SUBTTL	&HISTOGRAM

	 ; HERE FOR &HISTOGRAM
	 ;
KWHIST:: JRST	HSTVAL		; GET VALUE
	ERROR	5,7		; CANNOT HAVE NAME
	JRST	HSTASG		; MAKE ASSIGNMENT

	 ; HERE TO GET VALUE
	 ;
HSTVAL:	SUB	STACK,[2,,2]	; POP STACK
	 ;
	PUSH	STACK,$HIST	; PUSH
	PUSH	STACK,$HIST+1	; CURRENT HISTOGRAM
	 ;
	MOVSI	T1,SDT		; BUT IF ...
	SKIPN	$HIST		; NOT THERE ...
	MOVEM	T1,-1(STACK)	; MAKE IT NULL
	 ;
	JRST	1(SLINK)	; NORMAL RETURN

	 ; HERE TO ASSIGN TO &HISTOGRAM
	 ;
HSTASG:	JSP	TLINK,CVTINT	; INSIST ON ...
	ERROR	5,6		; AN INTEGER
	 ;
	SUB	STACK,[2,,2]	; POP STACK
	MOVE	S3,2(STACK)	; IF NON-ZERO
	JUMPN	S3,HSTEST	; ESTABLISH NEW &HISTOGRAM
	 ;
	MOVEI	Z,1000		; CLEAR 
	ANDCAB	Z,TRFLGS##	; OUT
	APRENB	Z,		; TIME-INTERRUPTS
	 ;
	CLEARM	$HIST		; CLEAR
	CLEARM	$HIST+1		; CURRENT VALUE
	 ;
	JRST	1(SLINK)	; AND RETURN

	 ; HERE TO ESTABLISH A NEW HISTOGRAM
	 ;
HSTEST:	JUMPL	S3,HSTSYS	; JUMP IF FOR SYSTEM
	 ;
	HRRZ	S2,CMPNO##	; NEXT COMPILE NUMBER
	MOVEI	Z,PLUG2		; PLUG2 WILL PROCESS IT
	JRST	HSTSY1		; JOIN SYSTEM SETUP

	 ; HERE TO SET UP HISTOGRAM FOR SYSTEM
	 ;
HSTSYS:	MOVEI	S2,$ALPHA	; HIGHEST PURE ADDRESS
	TRZ	S2,400000	; ZAP OUT HIGH BIT
	LSH	S2,0(S3)	; DIVIDE BY WORDS PER BUCKET
	AOJ	S2,		; BUMP BY ONE FOR GOOD MEASURE
	 ;
	MOVEM	S3,HSTSAV##+1	; SAVE SHIFT VALUE
	MOVEI	Z,PLUG1		; TRAP ADDRESS
	 ;
	 ; HERE FROM USER HISTOGRAM SETUP
	 ;
HSTSY1:	MOVEM	Z,HSTLOC##	; INDICATE TRAP HANDLER
	 ;
	PUSHR	PS		; SAVE REGS
	MOVEM	S2,HSTSAV+2	; SAVE UPPER BND
	 ;
	JSP	SLINK,LINE.##	; CREATE
	XWD	0,3		; A
	XWD	SDT,["0",,1]	; PROTOTYPE
	XWD	SDT,[":",,1]	; WITH LB OF 0
	XWD	IDT,HSTSAV+2	; AND UPPER BOUND S2
	 ;
	PUSH	STACK,[IDT,,0]	; INITIAL ...
	PUSH	STACK,[0]	; VALUES
	SETOM	GRFLAG##	; INTO THE GRWNG STORE
	JSP	PLINK,ARRAY##	; MAKE AN ARRAY
	ERROR	15		; CAN'T FAIL
	CLEARM	GRFLAG		; RESET GROWING REGION FLAG
	POP	STACK,$HIST+1	; RETRIEVE
	POP	STACK,$HIST	; ARRAY
	POPR	PS		; AND RESTORE REGS.
	 ;
	MOVEI	Z,1000		; ESTABLISH
	IORB	Z,TRFLGS	; OR WITH OTHER FLAGS
	APRENB	Z,		; TRAP
	 ;
	JRST	1(SLINK)	; AND RETURN

	 ; HERE ON INTERRUPTS OF ANY KIND
	 ;
INTRPT::MOVEM	S2,HSTSAV	; SAVE S2
	EXCH	S3,HSTSAV+1	; AND S3
	 ;
	MOVE	S2,.JBCNI	; GET CONDITIONS
	TRNE	S2,1000		; SEE IF TIME BIT IS ON
	JRST	@HSTLOC		; PLUG HISTOGRAM IF SO
	 ;
	EXCH	S3,HSTSAV+1	; PUT S3 BACK
	 ;
	MOVE	Q3,.JBTPC	; PICK UP OFFENDING ...
	MOVE	Q3,-1(Q3)	; INSTRUCTION
	LSH	Q3,-^D23	; GET AC ...
	ANDI	Q3,17		; INTO Q3-RIGHT
	MOVE	Q3,0(Q3)	; LOAD CONTENTS OF THIS REGISTER
	 ;
	MOVE	Q2,TRFLGS##	; MUST RE-ENABLE ...
	APRENB	Q2,		; TRAPS
	 ;
	HRRZ	Q1,HSBASE##	; IS HIST. STACK ...
	CAIL	Q1,-5(Q3)	; BEYOND US?
	ERROR	6,4		; YES, NAME STACK
	 ;
	HRRZ	Q1,STBASE##	; IS SYSTEM STACK
	CAIL	Q1,-5(Q3)	; BEYOND US?
	ERROR	6,3		; YES, HISTORY
	 ;
	ERROR	6,2		; NO, SYSTEM STACK

	 ; HERE WHEN A SYS TRAP OCCURS
	 ;
PLUG1:	HRRZ	S2,.JBTPC	; GET PC
	TRZ	S2,400000	; CLEAR HIGH ORDER BIT
	LSH	S2,0(S3)	; SHIFT AS USUAL
	JUMPN	S2,PLUG3	; EITHER JUMP OR ...
	AOJA	S2,PLUG3	; BUMP AND JUMP

	 ; HERE WHEN USER TRAP OCCURS
	 ;
PLUG2:	SKIPN	S2,$STNO##	; GET &STNO
	MOVEI	S2,1		; OK, MAKEIT 1
	 ;
	 ; MERGE HERE FROM SYS TRAPS
	 ;
PLUG3:	EXCH	S1,$HIST	; ADDRESS OF ARRAY
	CAMLE	S2,HSTSAV+2	; WITHIN BOUNDS?
	JRST	PLUG4		; NO
	 ;
	AOS	SUBFAC+3(S1)	; BUMP ZERO'TH
	LSH	S2,1		; DOUBLE
	ADD	S2,S1		; ADD ADDRESS OF ARRAY
	AOS	SUBFAC+3(S2)	; INCREMENT
	 ;
PLUG4:	EXCH	S3,HSTSAV+1	; RESTORE 
	EXCH	S1,$HIST	; THINGS
	 ;
	MOVE	S2,TRFLGS	; REESTABLISH
	APRENB	S2,		; TRAP
	MOVE	S2,HSTSAV	; RESTORE S2
	JRSTF	@.JBTPC		; AND RETURN

	END
    