














                                   TYMCOM-X


                            JOB PROCESSING SYSTEM


                 Command File Exec Language Reference Manual


                                  Version %1








                   Preliminary release:  February 16, 1987

                      Last revision:  February 16, 1987
                         Printed:  February 16, 1987








                          TYMCOM-X Systems Software

                              McDonnell Douglas

                            Field Service Company

                             Fremont, California
TYMCOM-X Job Processing System                                          Page 1
The Command File


      ********************************************************************

      NOTE:  This is a preliminary draft of the Reference Manual  for  the
      Job  Processor  system's  Exec language.  This Exec language and the
      Job Processor system are in development, continually changing.   The
      manual  is  also  changing,  as  the  Exec  is  developed and as the
      documentation for the system develops.

      Please  check  the  documentation  files   regularly   during   this
      developmental   time.   Updates  to  the  documentation  will  occur
      frequently, reflecting new developments  in  the  system,  and  more
      clearly  explaining  the  Job  Processor  system's  and  the  Exec's
      features.  Checking the documentation files for new  information  is
      the quickest and surest way to get this information.

      ********************************************************************




  1.0  INTRODUCTION



  1.1  Overview


  The TYMCOM-X Job Processing  System  replaces  the  TYMCOM-IX  and  TYMCOM-X
  products PERP, DEFER, PCOM and COM.  The purpose is to provide a system that
  will process command files both instantaneously and repetitively on and  for
  a single PDP-10 host computer.

  The Exec language for the Job Processor system uses many of the commands and
  formats used in PERP's Exec, to allow users to migrate PERP command files to
  the system with little modification to their PERP command  files.   However,
  PERP  command files are not guaranteed to run under the Job Processor system
  without change.



  1.2  Notational Conventions And Definitions


  A.  Square brackets "[" and "]" are used to enclose  optional  items  or  an
      optional  syntax.  The brackets are not part of the actual Job Processor
      syntax.


  B.  Angle brackets "<" and ">" are used to enclose the names  of  conceptual
      ideas and entities.  These names are given in the examples to illustrate
      the class of information entered.  These brackets are not  part  of  the
      Job Processor syntax.

TYMCOM-X Job Processing System                                          Page 2
INTRODUCTION


  C.  <cr> means "carriage return".  This is not a conceptual idea or  entity,
      as other words in angle brackets are.


  D.  In the examples in this document, computer output is shown in upper case
      and user input is shown in lower case, as much as possible.


  E.  In the examples used in this document, lines preceeded immediately by  a
      period  (.)  are  usually commands typed to the monitor.  These commands
      work both in PDP10 mode and in XEXEC mode.  PDP10 mode is used  in  this
      document.


  F.  In the examples below, lines preceeded by an asterisk  (*)  are  usually
      data  lines  to  be  read  by the program being run.  See the section on
      prefix characters for more detailed information.


  G.  In the examples below, reference to a <file spec>  means  a  file  name,
      optionally  followed  by  a file extension, and optionally preceded by a
      username in parentheses.  Format:

          [(<username>)]<filename>[.<ext>]





  2.0  THE COMMAND FILE



  2.1  Getting Started


  To run a job as though it were being run from  a  terminal,  the  user  must
  first create a command file.  This is a file which contains all the input to
  the job stream that the user would normally enter from a terminal.  The file
  is  a normal text file which may be created using any text editor available,
  (EDITOR, PEAK, VUE, etc.), or by any program which writes normal  text  (for
  example, output from a Tymshare-BASIC or FORTRAN program).  The command file
  may contain monitor commands, input to programs, and various commands to the
  Job Processor itself.

  The Job Processor currently  has  a  temporary  restriction:   it  currently
  ignores  the INIT program that the user has set up with NONAME.  If the user
  has an INIT program set up, the Job Processor sessions may  run  differently
  than  the  user's usual interactive session.  The Job Processor sessions can
  be made to resemble the user's sessions by including the  following  command
  as the first line of the command file:

      .INIT
TYMCOM-X Job Processing System                                          Page 3
THE COMMAND FILE


  This will cause the user's init program to be executed.


  A sample command file follows.  If the terminal session includes:
      .run progrm
      REPORTING PERIOD: daily
      SEPARATE DIVISIONS: yes
      SELECTION CRITERIA: collect all
      OUTPUT FILE NAME: report.lst

  then the following would be included in the Job Processor command file:
      .run progrm
      *daily
      *yes
      *collect all
      *report.lst


  A line of the command file is never read or acted upon until the job  stream
  being  controlled  by  the  file  is  ready  to  accept  input  from the Job
  Processor.  This resembles a user not entering the line of input  until  the
  terminal displays a prompt for input.

  To instruct the system to execute the commands in an existing command  file,
  the user would enter the SUBMIT command at the monitor prompt.  (See the Job
  Processor Reference Manual, file:  (*6NEWS)SUBMIT.DOC.)



  2.2  Command File Format


  A.  Line Prefix Characters

      The PERP and PCOM systems have allowed the user to define a line of  the
      command  file  as  a command to the controlling system by use of a colon
      (:) as the command line prefix character (the  first  character  of  the
      line).   The TYMCOM-X Job Processor System provides an extension to that
      convention.  When  any  of  the  characters  which  can  act  as  prefix
      characters appears as the first character in a line of the command file,
      the Job Processor removes the prefix character and  presents  all  other
      characters  in  that line only to a pre-defined process, as specified by
      the prefix character.

      The ability to control where the line goes can prevent problems, such as
      the  job  aborting.  For example, a command line (such as "EXIT"), meant
      for the user's program, could abort the job if sent to the  monitor.   A
      program could have need for this line only under selected conditions and
      under other conditions the program could be finished  execution.   Those
      times  when  the program is already finished, a command line sent to the
      job stream is read and acted upon by the monitor.  The prefix  character
      can  prevent  the  line  from being sent to the monitor and aborting the
      job.
TYMCOM-X Job Processing System                                          Page 4
THE COMMAND FILE


      The prefix characters are not sent to the job stream.  They are stripped
      from  the  line before the line is sent.  These characters are never the
      first character in commands to the monitor, but such a character may  be
      the  first  character  of  a  line to be sent to a user's program.  If a
      prefix character is the first character of a line to a program, it  must
      be preceded by another prefix character (such as an asterisk) to be sent
      to the program.

      The individual line prefix characters and the processes  to  which  they
      exclusively send command lines are as follows:


      1.  Colon (:) - to the TYMCOM-X Job Processor only.

          All lines  beginning  with  a  colon  are  interpreted  by  the  Job
          Processor.   These  commands  are  never sent to the monitor or to a
          user program.


      2.  Period (.) - to the monitor only.

          Lines beginning with a period are commands to the monitor only.   In
          the  job  stream,  if a user's program is running, the Job Processor
          waits until the program will accept input and it then interrupts the
          program.   This forces the job stream to monitor level (as though an
          :ESCAPE command had been sent).  The Job Processor  then  sends  the
          line that began with the period to the monitor.


      3.  Asterisk (*) - to a user's program only.

          Lines beginning with an asterisk are sent only to  the  job  stream,
          and  only when the user's program is waiting for input.  If the line
          cannot be sent to the job stream (because it is in monitor mode) the
          line  is  discarded  and  the  next  line  of  the  command  file is
          processed.


      4.  Equal sign (=) - to a user's program only.

          Lines beginning with an equal sign are treated the same as are lines
          beginning  with an asterisk with one exception:  the carriage-return
          line terminator sequence is not sent to the job stream.  This can be
          very  valuable  for running programs which require input without the
          ending carriage return.


      5.  No prefix character.

          If no prefix character is specified, the line will be  sent  to  the
          job stream as soon as the stream is waiting for input, whether it is
          in user program mode or monitor mode.

TYMCOM-X Job Processing System                                          Page 5
THE COMMAND FILE


      6.  Prefix characters as data to a user program.

          To send a line to a user program,  an  asterisk  or  equal  sign  is
          normally  used.  If the first character to be sent to a user program
          is one of the special prefix characters, it must simply be  prefixed
          by an asterisk or equal sign.

          Example:
              *=FOO                 (The data sent to the program is "=FOO")


      Summary:
      The following is generally true and can be helpful in  remembering  when
      these  prefixes are used:  A colon prefix is used where it would be used
      in a TYMCOM-IX PERP command file.  A period prefix would be used where a
      period  prompt  should  appear  in  the  log  file  (in PDP10 mode).  An
      asterisk prefix would be used  where  a  normal  program  prompt  should
      appear (which, in some utility programs is an asterisk).  The equal sign
      is used to precede any program input which must  exactly  resemble  what
      appears  only  on  that  line  of  the  command file (thus excluding the
      "invisible" carriage-return characters at the end of the line).



  B.  Commands

      Commands to the Job Processor which are imbedded  in  the  command  file
      employ   the  colon  (:) line  prefix  character.   These  commands  are
      generally similar to those available in the TYMCOM-IX  PERP  system  and
      have  the  same  format.   Any control file command word which apears in
      upper case in the following list may be abbreviated to its  first  three
      characters, unless indicated otherwise.


      1.  :BACKTO <label>

          Jump back to <label>, in processing of command file.  The label must
          be  in  the command file, before the occurrence of this command, and
          in the proper format for this jump to occur.  Otherwise this command
          is ignored.  

          The minimum abbreviation for the word "BACKTO" is "BACK".


      2.  :COM <file> ["<param val1>" ["<param val2>" [... "<param valN>"]]]

          Begin taking commands from the named command file.  The called  file
          is  a  standard  Job  Processor  command file.  Command files may be
          nested approximately 5 deep with this command.

          An optional syntax includes specifying parameter values to be passed
          to  the  called  file, on the same line, after the filename.  To the
          called file this resembles the way parameter values  are  passed  to
          the  first  command  file,  when  the parameter values are declared;
TYMCOM-X Job Processing System                                              Page 6
THE COMMAND FILE


          when the job is inserted while SUBMIT is being run.  (See discussion
          of Parameters below, and in SUBMIT.DOC.)

          If parameter values are included in the command line, each parameter
          value  must  be  delimited  by  quotation  marks.   Single or double
          quotation marks are acceptable;  however, the same character must be
          used as both the opening and closing delimiter for each value.

          When a command file calls another command  file,  a  parameter  name
          delimiter  currently  declared in the calling command file file (see
          the $DELIMITER Keyword) is passed down to the  called  (subordinate)
          command  file.   However,  a  parameter name delimiter declared in a
          called (subordinate) command file  is  overridden  by  the  previous
          delimiter  set  in  the  caller  when  the  called file is completed
          processing.


      3.  :DEFINE <par1>="<val1>"[ <par2>="<val2>"[ ... <parN>="<valN>"]]

          Assign value <val#> to parameter-variable <par#>.  This  command  is
          identical  to :<par>=<val> below, which is included to be compatible
          with TYMCOM-IX PERP.

          NOTE:  Both forms of this command allow multiple assignments.   Each
          parameter  value  must  be  delimited by quotation marks.  Single or
          double quotation marks are acceptable;  however, the same  character
          must  be  used  as  both  the opening and closing delimiter for each
          value.  A comma is acceptable after a value, to separate elements of
          the list.


      4.  :ESCAPE

          Interrupt the currently executing program when it is next ready  for
          input,  forcing the job stream to monitor level.  This is similar to
          the user entering a user interrupt while the program is waiting  for
          input.   (A "user interrupt" is a control-C when in PDP10 mode or an
          <ESC> when in XEXEC mode.)


      5.  :GOTO <label>

          Jump forward to <label>, in processing of command file.   The  label
          must  be  in the command file, after the occurrence of this command,
          and in the proper format, for this jump to  occur.   Otherwise  this
          command is ignored.  

          The word "GOTO" may be abbreviated to "GO", for  compatability  with
          PERP.


      6.  :PARAMETERS [<nam1>[="<val1>"][ ... <namN>[="<valN>"]]]

          Turn on parameter substitution, and  optionally  declare  each  name
TYMCOM-X Job Processing System                                              Page 7
THE COMMAND FILE


          <nam#> included as the name of a parameter, to mark the place in the
          command file for substitution  of  the  value  associated  with  the
          parameter name.  Optionally, define an initial value <val#> for each
          parameter name.

          The command :PARAMETERS, without  any  parameter  names  or  values,
          turns on parameter substitution.  This is needed when using only the
          predefined, Keyword parameters in the command file.

          NOTE:  Each parameter value must be delimited  by  quotation  marks.
          Single  or double quotation marks are acceptable;  however, the same
          character must be used as both the opening and closing delimiter for
          each  value.   A  comma  is  acceptable  after  a value, to separate
          elements of the list.


      7.  :QUIT

          Cause normal termination of the running job.


      8.  :REMARK

          This line is a comment to the TYMCOM-X Job Processor.  It causes  no
          action  to  be taken.  However, it is printed in the log file if one
          is created.  


      9.  :REVIVE

          Re-enable output to the user's specified log file (if a log file has
          been provided for).  (See :SILENCE.  Also see Keyword $LOGGING.)


     10.  :SEND CHARACTER <nnn>

          Transmit the character represented by  the  octal  (base  8)  number
          <nnn>.


     11.  :SEND FILE <file>

          Transmit the contents of <file>.  Line-feed  characters  immediately
          following  a  carriage-return  are removed, so that input to the job
          stream from the file resembles terminal input.   However,  no  other
          data interpretation occurs.


     12.  :SEND STRING "<text>"

          Transmit the literal string "<text>", without any carriage-return or
          line-feed  following  the  string.   The  string  of  text  must  be
          surrounded by double quote marks.
TYMCOM-X Job Processing System                                              Page 8
THE COMMAND FILE


     13.  :SILENCE

          If a log file is provided, stop sending  output  to  the  log  file.
          (Same as $LOGGING=0) Logging is resumed with :REVIVE or $LOGGING=1.


     14.  :STOP

          The same as :QUIT.  Causes normal termination of a running job.


     15.  :TIMELIMIT <n>

          Changes the job's run time limit to <n> minutes.  The  default  time
          limit  for job execution is 60 minutes.  Changing the run time limit
          with this command, within the command file, will not change the time
          limit  known by the Job Processor prior to the actual running of the
          job.  Providing the Job Processor with a fairly accurate estimate of
          the  time  required  for  the  job's execution can en the job's
          reliability, so specifying the timelimit as an option when inserting
          the job, while running SUBMIT, is greatly preferred.


     16.  :TRULIMIT <n>

          Changes the job's TRU limit to <n> TRUs.  The default is  no  limit.
          When  the limit of TRUs is reached, the job is stopped.  This can be
          very useful for stopping a program error from causing the program to
          run up many more TRUs than expected.


     17.  :<par1>="<val1>" [<par2>="<val2>"[ ... <parN>="<valN>"]]

          Assigns value <val#> to parameter <par#>.  Each parameter value must
          be  delimited  by quotation marks.  Single or double quotation marks
          are acceptable;  however, the same character must be  used  as  both
          the  opening  and  closing  delimiter  for  each  value.  A comma is
          acceptable after a value, to separate elements of the list.


     18.  <label>::[<command file line>]

          Defines a label in the command file.   The  label  is  used  as  the
          object  of  a  command file :GOTO statement, the object of a command
          file :BACKTO statement, or the location in the file for the  job  to
          restart.    The  last  applies  if  the  options  RESTART LABEL  and
          LABEL <label> are specified in the INSERT command  in  SUBMIT,  when
          the  job  is  being  entered  into  the  Job  Processor's queue (See
          SUBMIT.DOC).  

          A label in this format may precede any line that would be  legal  in
          the  command  file.   The included line must begin immediately after
          the double colon which ends the label.  Any blanks between the label
          and  the  included  line  are  sent  to  the job stream as the first
TYMCOM-X Job Processing System                                              Page 9
THE COMMAND FILE


          characters of the line.

          NOTE:  An alternative format for defining the label  follows.   This
          is  to allow consistency with the Tymshare PERP format.  This format
          does not allow a line of the command file to be on the same line  as
          the label.  The format is:

              ::<label> <cr>



  C.  Use of Variable Parameters in Command Files

      One command file can do essentially the same job many times,  with  some
      differences,  through  the  use  of  variable  parameters  in  the file.
      Variable parameters provide a mechanism by which strings of text  within
      the  file  may  be varied.  These parameters may be used anywhere in the
      command file after they have been declared, even in commands to the  Job
      Processor system.

      When the command file  is  created  each  parameter  name  is  initially
      declared  (see  the  ":PARAMETERS"  command).   The  parameter  name (or
      keyword) is then placed, with delimiters, in the file where its variable
      string  is to appear.  The string which is to replace the parameter name
      is assigned to the parameter name in the command file itself, or in  the
      process  which  calls  the  command  file.   The definition of parameter
      values (strings) by the calling process is one of  the  OPTIONS  to  the
      INSERT command in the program SUBMIT (see SUBMIT.DOC), or is done in the
      :COM command line in the calling command file.



      1.  Assigning Values to Parameter Names


          a.  Initially Declaring Parameter Names and Assigning Values

              All parameters used in the command file must  be  named  in  the
              :PARAMETERS  command  line  in the command file, before they are
              used in the command file.  This command  may  also  be  used  to
              assign  an  initial value to the parameter names.  If no initial
              value is assigned to a parameter name the default value is NULL,
              or zero.


          b.  Assigning Values to the Parameters from Outside the Command File

              New values can be assigned to the parameters before the  job  is
              executed, without making any changes to the command file.  These
              values override the initial values assigned when  the  parameter
              names  were declared, or they are given to parameters which have
              not previously had a value assigned.

              If the command file  is  used  directly  by  the  Job  Processor
TYMCOM-X Job Processing System                                             Page 10
THE COMMAND FILE


              system,  the new parameter values are supplied to it through the
              PARAMETERS  option  to  the  INSERT  command  in  SUBMIT.   (See
              SUBMIT.DOC.)  If  the  command file is called by another command
              file, with the  :COM  command,  the  new  parameter  values  are
              supplied  to  it  through  the  :COM command line in the calling
              command file.  (See the :COM command.)


          c.  Changing Parameter Values while the Job Is Running

              A parameter value established when the command  file  is  called
              can be changed later, by assignment within the command file (see
              the :DEFINE command).  The new value assigned to  the  parameter
              name  within the command file can be any value that is valid for
              the parameter, including the value assigned to another parameter
              name.   This  assignment  of a new value to a parameter with the
              :DEFINE command can occur multiple times within a command file.



      2.  Substitution of Parameter Values (Strings) in Command File

          Substitution is invoked by placing the parameter name (or  keyword),
          with  delimiters,  where  the  substitution string is desired in the
          file.  "With delimiters" means the parameter delimiter character  is
          placed  immediately  before and immediately after the parameter name
          or keyword.  The parameter  delimiter  character  is  initially  the
          backslash (\), but may be changed at the discretion of the user.

      3.  Pre-Declared Keyword Parameters

          A special type of parameter is  the  "keyword"  parameter  variable.
          These  keywords are pre-defined.  They are used to examine or change
          selected system attributes.   The  Job  Processor  system  currently
          provides  information about and/or control over the following system
          variables:

          $DAYTIME      - A string displaying the current time of day  in  the
                          form  HH:MM:SS, using the 24-hour clock.  Values can
                          range from 00:00:00 to 23:59:59.  (Read-Only)
          $DELIMITER    - A character variable which contains the value of the
                          character   used  to  delimit  parameter  names  for
                          substitution.  Initially  the  value  is  back-slash
                          (\).  The delimiter must be a character which is not
                          valid  in  a  parameter  name,  otherwise  the   Job
                          Processor  will  not  be able to determine where the
                          parameter name "really" ends.
          $FALSE        - A boolean variable equal to 0.  (Read-Only)
          $LOGGING      - A boolean variable for controlling whether output is
                          sent  to  the log file (if one exists).  If there is
                          no log file, then this  variable  becomes  Read-Only
                          and is equal to 0 (FALSE).
          $MAIL         - A boolean variable which controlls whether  mail  is
                          to be sent to the user upon completion of the user's
TYMCOM-X Job Processing System                                             Page 11
THE COMMAND FILE


                          job.  The initial value depends on the value of  the
                          /MAIL switch.
          $SUBSTITUTION - A  boolean  variable  for  controlling  the  in-line
                          substitution  of parameters.  The initial value is 0
                          (FALSE) unless  a  parameter  is  specified  on  the
                          command   line   or   a   :PARAMETERS  statement  is
                          encountered.
          $TIMELIMIT    - A decimal value containing the remaining time  limit
                          for  the  processing  frame.   This  variable is set
                          initially to the value of the /TIME switch  and  may
                          be  reset  directly  or by the :TIMELIMIT n command.
                          If this variable is set to 0, then there is no  time
                          limit.
          $TRUE         - A boolean variable equal to 1.  (Read-Only)
          $TRULIMIT     - A decimal value containing the  remaining  TRUs  for
                          the  processing  frame.   This variable is initially
                          set to 0 which means that there is  no  initial  TRU
                          limit.   Setting  this  variable means that from the
                          current point, that many TRUs may be accrued  before
                          the job is stopped.  This is very useful if the user
                          expects a program to use a small number of TRUs  and
                          something goes wrong.  The Job Processor system will
                          prevent the program from running up too many TRUs.







  2.3  Sample Command File


  The following sample command file does the following:  
  1.)  it turns on parameter substitution, declares the following as
       parameter names:  'OUTDIR', 'NAME', 'EXT', 'USER' and 'SPEC', and
       assigns initial values to parameter names 'OUTDIR' and 'USER';
  2.)  it accepts from the caller any values the caller assigns for any of
       the parameters; 
  3.)  it assigns to parameter name 'SPEC' the following string (all
       values concatenated):  the value contained in parameter 'NAME', a
       period, and the value contained in parameter "EXT';
  4.)  it gets the time of the job's start and records it in the log file;
  5.)  it runs the user program 'UPDATE' and provides the input to the
       program,; 
  6.)  it calls the subordinate command file 'MAKRDY', passing it the
       value of the parameter 'SPEC'; 
  7.)  it copies the file named in parameter 'SPEC' from the username in
       'USER' to the username in 'OUTDIR',; 
  8.)  it redefines the value assigned to parameter name 'SPEC' to be
       'output.fil'; and 
  9.)  it gets the time of the job's completion and records it in the log 
       file.  
TYMCOM-X Job Processing System                                             Page 12
THE COMMAND FILE


      :PARAMETERS  OUTDIR= tymnet  NAME  EXT  USER = tymnet  SPEC 
      :DEFINE SPEC = "\NAME\.\EXT\" 
      :REMARK  Time of start of execution:  \$DAYTIME\.  
      .run (\USER\) update 
      *1 week 
      :REMARK  The next command runs the command file MAKRDY.CTL, providing 
      :REMARK    it the name of the output file as a parameter value.  
      :COM MAKRDY \SPEC\ 
      .copy (\USER\) \SPEC\ to (\OUTDIR\) \SPEC\ 
      :DEFINE SPEC = output.fil 
      :REMARK  Time of end of execution:  \$DAYTIME\.  
      :QUIT
   ~?hG