SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76

     1						SUBTTL	D.R. HANSON/DRH/RCM/VB		16-JUN-76
     2
     3					; COPYRIGHT 1972,1973,1976,1977 STEVENS INSTITUTE OF TECHNOLOGY
     4					; HOBOKEN, NEW JERSEY, 07030
     5					; ALL RIGHTS RESERVED.
     6
     7
     8					  ;DIRECTIVES
     9
    10						.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
    11						SALL			;SUPPRESS MACRO EXPANSIONS
    12	400000'					TWOSEG	400K		;TWO SEGMENTS
    13					  ;UNIVERSALS
    14
    15						SEARCH	JOBDAT		;JOBDATA ARE DEFINITIONS
    16						SEARCH	MACTEN		;DEC-10 COMMON MACROS
    17						SEARCH	SNOPRM		;SITBOL PARAMETER FILE
    18
    19					  ;VERSION NUMBER
    20
    21			000005			EXTVER==5		;MAJOR VERSION NUMBER
    22			000000			EXTMIN==0		;MINOR VERSION NUMBER
    23			000302			EXTEDT==302		;EDIT LEVEL
    24			000000			EXTWHO==0		;CUSTOM ARGUMENT
    25
    26					  ;TITLE
    27
    28						TITLE.	EXT,SNOEXT,<External Functions>
    29		457064	000000			EXTSIX==SIXBIT /EXT/	; SNOEXT ABBREVIATION IN SIXBIT
    30		426612	400000			EXTASC==ASCIZ /EXT/	; SNOEXT ABBREVIATION IN ASCII
    31						SALL
    32
    33
    34					  ;SHOW UNIVERSAL VERSION NUMBERS
    35
    36	400000'	043100	000450			SHOW.	%%JOBD		;JOBDAT'S  VERSION NUMBER
    37	400000'	000200	000025			SHOW.	%%MACT		;MACTEN'S VERSION NUMBER
    38	400000'	000500	000305			SHOW.	%%SNOP		;SNOPRM'S VERSION NUMBER
    39
    40						EXTTTL			; Title
    41						EXTPTX			; PASS2 assembly message
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 2
SNOEXT	MAC	18-Jan-67 10:47		Table of Contents

    42						SUBTTL	Table of Contents
    43
    44					;		Table of Contents for External Functions
    45					;
    46					;
    47					;			   Section			      Page
    48					;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
    49					;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
    50					;   3. Macro Definitions. . . . . . . . . . . . . . . . . . .    4
    51					;   4. Data Definitions . . . . . . . . . . . . . . . . . . .    5
    52					;   5. LOAD
    53					;        5.1.   Load an external function . . . . . . . . . .    7
    54					;        5.2.   Parse list of datatypes . . . . . . . . . . .    8
    55					;        5.3.   Set up EFBLOK . . . . . . . . . . . . . . . .    9
    56					;        5.4.   Fill the EFBLOK . . . . . . . . . . . . . . .   10
    57					;        5.5.   Load the external function. . . . . . . . . .   11
    58					;   6. EFCALL
    59					;        6.1.   Call an external function . . . . . . . . . .   12
    60					;        6.2.   Set up arguments for external function. . . .   13
    61					;        6.3.   Enter an external function. . . . . . . . . .   14
    62					;        6.4.   Return value from external function . . . . .   15
    63					;   7. UNLOAD
    64					;        7.1.   Unload an external function . . . . . . . . .   16
    65					;   8. GETDT
    66					;        8.1.   Determine datatype from string descriptor . .   17
    67					;   9. LNKCOD
    68					;        9.1.   Process Code Link Item Types. . . . . . . . .   18
    69					;  10. LNKEND - Process End Link Item Types . . . . . . . . .   20
    70					;  11. LNKENT - Process Entry Link Item Types . . . . . . . .   21
    71					;  12. LNKERR - Process invalid Link Item Types . . . . . . .   22
    72					;  13. LNKNAM - Process Name Link Item Types. . . . . . . . .   23
    73					;  14. LNKSYM - Process Symbol Link Item Types. . . . . . . .   24
    74					;  15. LNKJNK - Process ignorable block types . . . . . . . .   26
    75					;  16. LNKHSG - PROCESS HIGH SEGMENT LINK ITEM-TYPE . . . . .   27
    76					;  17. GETDAT - Routine to get data from a REL file . . . . .   28
    77					;  18. CODBLK
    78					;       18.1.   Allocate block for external function code . .   29
    79					;  19. CVTR50
    80					;       19.1.   Convert ASCII string to RADIX-50. . . . . . .   30
    81					;  20. PNTSTR
    82					;       20.1.   Point to ASCIZ string . . . . . . . . . . . .   32
    83					;  21. ADJSTK
    84					;       21.1.   Adjust the stack. . . . . . . . . . . . . . .   33
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 3
SNOEXT	MAC	18-Jan-67 10:47		REVISION HISTORY

    85						SUBTTL	REVISION HISTORY
    86
    87					COMMENT	\
    88
    89					START OF VERSION 5.
    90					124	ADD THIS MODULE.
    91					126	REMOVE DMOVE & DMOVEM MACROS TO THE PARAMETER FILE.
    92					130	Remove unused code.
    93					134	Add PORTAL entry points for execute only.
    94					137	FIX PROBLEM WITH CVTR50. Y.PER ==> Y.PCNT
    95					147	Use Y.???? instead of X.???? and use the correct macros.
    96					242	Don't use the POPR and PUSHR routines for just the P registers
    97					243	Start improved REL file handling.
    98					250	Fix typos in edit 243 and other errors
    99					256	Fix some more errors in edit 243 & add more code.
   100					302	Add a missing PORTAL where we return from an external function.
   101					\
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 4
SNOEXT	MAC	18-Jan-67 10:47		Macro Definitions

   102						SUBTTL	Macro Definitions
   103
   104
   105					;	GET	LOC
   106					;
   107					;  This  Macro  produces code to read the next word from the file
   108					;  whose I/O descriptor is at the top of  the  stack.   The  word
   109					;  read is stored in location LOC.
   110					;
   111						DEFINE	GET(LOC)  <
   112						DMOVE	T2,-1(STACK)		;; Pointer to stream block & fmt
   113						JSP	TLINK,READ##
   114						ERROR	12,4			;; Input error
   115						ERROR	12,6			;; EOF
   116						IFDIF	<Z><LOC>
   117					      <	MOVEM	Z,LOC >	  >
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 5
SNOEXT	MAC	18-Jan-67 10:47		Data Definitions

   118						SUBTTL	Data Definitions
   119					;		----------------
   120
   121					;
   122					;  Define DEC datatypes (Fortran-10 conventions)
   123					;
   124			000000		DANYDT==000000				; Unspecified
   125			000100		DIDT==	000100				; INTEGER
   126			000200		DRDT==	000200				; REAL
   127			000740		DSDT==	000740				; STRING
   128					;
   129					;  Symbol link item type constants (all shifted to RH of word)
   130					;
   131			040000		GDEF==4B<5+^D18>			; Global definition bits
   132			600000		GSYM==6B<2+^D18>			; Global reference bits
   133			100000		LSYM==1B<2+^D18>			; Local symbol bits
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 6
SNOEXT	MAC	18-Jan-67 10:47		Data Definitions

   134					;
   135					;  Pure data
   136					;
   137	400000'					RELOC	400000
   138
   139						 ;  Dispatch table for Link item types
   140
   141	400000'	000000	400472'		LNKDSP:	XWD	0,LNKERR		; Link item type 0
   142	400001'	000000	400360'			XWD	0,LNKCOD		; Link item type 1
   143	400002'	000000	400534'			XWD	0,LNKSYM		; Link item type 2
   144	400003'	000000	400606'			XWD	0,LNKHSG		; Link item type 3
   145	400004'	000000	400603'			XWD	0,LNKJNK		; Link item type 4
   146	400005'	000000	400447'			XWD	0,LNKEND		; Link item type 5
   147	400006'	000000	400473'			XWD	0,LNKNAM		; Link item type 6
   148	400007'	000000	400472'			XWD	0,LNKERR		;[243] Item type 7
   149	400010'	000000	400472'			XWD	0,LNKERR		;[243] Item type 10 - Local references
   150	400011'	000000	400472'			XWD	0,LNKERR		;[243] Item type 11 - Polish
   151	400012'	000000	400472'			XWD	0,LNKERR		;[243] Item type 12
   152	400013'	000000	400472'			XWD	0,LNKERR		;[243] Item type 13
   153	400014'	000000	400603'			XWD	0,LNKJNK		;[243] Item type 14 - Index
   154
   155			000014		LSTLKD==<.-LNKDSP-1>			; Last entry in Link dispatch
   156
   157
   158						 ;  Dispatch table for SITBOL datatypes
   159						 ;   (INTEGER, STRING, REAL)
   160
   161						 ;  Left half is corresponding DEC datatype
   162						 ;  Right half is pointer to return code
   163
   164	400015'	000000	400327'		DTDSP:	XWD	DANYDT,A.RET		; For any other non-null string
   165	400016'	000100	400323'			XWD	DIDT,I.RET		; For string INTEGER
   166	400017'	000200	400325'			XWD	DRDT,R.RET		; For string REAL
   167	400020'	000740	400300'			XWD	DSDT,ST.RET		; For string STRING
   168					;
   169			000003		LSTDTD==<.-DTDSP-1>			; Last entry in datatype dispatch
   170
   171
   172						 ;  Dispatch table to convert datatypes of
   173						 ;  arguments to external functions
   174
   175	400021'	000000	000000*		CDTDSP:	XWD	0,CVTINT##		; Convert to INTEGER
   176	400022'	000000	000000*			XWD	0,CVTRL##		; Convert to REAL
   177	400023'	000000	400753'			XWD	0,PNTSTR		; Point to ASCIZ string
   178					;
   179			000002		LSTCDD==<.-CDTDSP-1>			; Last entry in convert datatype
   180										;  dispatch
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 7
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Load an external function

   181						SUBTTL	LOAD -- Load an external function
   182					;
   183					;
   184					;    Primary routine, unstable
   185					;  
   186					;  Control transfers  to  this  routine  to  execute  the  built-in
   187					;  function LOAD.  The syntax of this function call is of the form
   188					;  
   189					;  	LOAD("F(dt1,dt2,...dtn)retdt","filename")
   190					;  
   191					;  where F is the external function name,  dt1  ...   dtn  are  the
   192					;  datatypes  of  the  arguments  to  be  passed,  and retdt is the
   193					;  datatype the function will return.  The second argument  to  the
   194					;  LOAD function is the filename of the REL file to be loaded.
   195					;  
   196					;  This routine parses the prototype, sets up an EFBLOK, and  links
   197					;  the  variable  block  for  the  function  to  this  EFBLOK.  The
   198					;  function is then loaded into the GRID.   The  following  storage
   199					;  areas are used:
   200					;
   201					;	P2		Points to the EFBLOK
   202					;	FLAP, FLAP+1	Descriptor for filename
   203					;	IGNOP		Address of variable block for function
   204					;	IGNOP+1		Start of descriptor pairs in EFBLOK
   205					;	IGNOP+2		PLINK save area
   206					;
   207
   208	400024'	202 04 0 00 000000#	LOAD::	MOVEM	PLINK,IGNOP##+2		; Save return address
   209	400025'	262 01 0 00 000000#		POP	STACK,FLAP##+1		; Save descriptor for second
   210	400026'	262 01 0 00 000000*		POP	STACK,FLAP##		;  argument (filename)
   211
   212	400027'	265 11 0 00 000000*		JSP	TLINK,STINIT##		; Initialize for parsing
   213										;  first argument
   214	400030'	003 01 0 00 000157 		 ERROR.	1,111			; Not a string?
   215	400031'	200 07 0 00 000000*		MOVE	S2,SYSCT##		; Use system character table
   216	400032'	205 10 0 00 010000 		MOVX	S3,Y.LP		; Break on "("
   217	400033'	265 11 0 00 000000*		JSP	TLINK,STRM##
   218	400034'	001 15 0 00 000107 		 ERROR	13,71			; What! No "(" ?
   219	400035'	265 11 0 00 000000*		JSP	TLINK,INSTAL##		; Enter function name in symbol
   220										;  table
   221	400036'	001 15 0 00 000111 		 ERROR	13,73			; Funny function name?
   222	400037'	202 00 0 00 000000*		MOVEM	Z,IGNOP##		; Save address of symbol table
   223										;  entry for function
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 8
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Parse list of datatypes

   224						SUBTTL	LOAD -- Parse list of datatypes
   225
   226
   227						 ;  Now pick up argument datatypes.
   228						 ;  The number of arguments for this function is the
   229						 ;  number of commas + 1.
   230
   231	400040'	201 04 0 00 000001 		MOVEI	P1,1			; Initialize argument counter
   232	400041'	205 10 0 00 005000 		MOVX	S3,Y.CM!Y.RP	; BREAK(",)")
   233	400042'	133 00 0 00 000000*	PARS.1:	IBP	STPTR##			; Hop over last
   234	400043'	370 00 0 00 000000*		SOS	CURSOR##		;  break character.
   235	400044'	265 11 0 00 400033*		JSP	TLINK,STRM		; String descriptor for this
   236										;  arg is pushed on stack.
   237	400045'	001 15 0 00 000111 		 ERROR	13,73
   238	400046'	306 16 0 00 000054 		CAIN	Q2,","			; If break char a comma,
   239	400047'	344 04 0 00 400042'		 AOJA	P1,PARS.1		;  bump counter and get next arg
   240
   241						 ;  Terminating ")" has been found.  String descriptors for
   242						 ;  datatype of each argument have been pushed on the stack.
   243
   244						 ;  Pickup the return datatype.
   245
   246	400050'	133 00 0 00 400042*		IBP	STPTR			; Hop over ")"
   247	400051'	370 00 0 00 400043*		SOS	CURSOR
   248	400052'	265 11 0 00 400044*		JSP	TLINK,STRM		; Break on ")" will fail
   249	400053'	255 00 0 00 000000 		JFCL				;  REM is pushed on stack
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 9
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Set up EFBLOK

   250						SUBTTL	LOAD -- Set up EFBLOK
   251
   252
   253						 ;  Allocate space for EFBLOK at GSURF in the GRID.
   254						 ;  Need EFARGS + 3 * (num of args) words.
   255						 ;  P1 contains the number of arguments.
   256
   257	400054'	200 00 0 00 000004 		MOVE	Z,P1			; Get number of args
   258	400055'	221 00 0 00 000003 		IMULI	Z,3			; 3 * (number of args)
   259	400056'	271 00 0 00 000007 		ADDI	Z,EFARGS		;  + EFARGS
   260
   261	400057'	265 15 0 00 000000*		JSP	QLINK,GCOLG##		; Expand GRID
   262	400060'	200 05 0 00 000000*		MOVE	P2,GSURF##		; Pointer to block
   263	400061'	272 00 0 00 400060*		ADDM	Z,GSURF##		; Update GSURF
   264						 ;	
   265	400062'	505 00 0 00 000423 		HRLI	Z,EFBLOK		; Get BTCODE
   266	400063'	202 00 0 05 000000 		MOVEM	Z,BTCODE&BLENG(P2)	; Set up block header
   267	400064'	402 00 0 05 000001 		CLEARM	GCFLD(P2)
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 10
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Fill the EFBLOK

   268						SUBTTL	LOAD -- Fill the EFBLOK
   269
   270
   271						 ;  Now begin filling in EFBLOK
   272
   273	400065'	505 06 0 00 000005 		HRLI	S1,FEAFL!FAAFL		; The FFLAGS
   274	400066'	540 06 0 00 000004 		HRR	S1,P1			;  and the FNARGS
   275	400067'	202 06 0 05 000002 		MOVEM	S1,FFLAGS&FNARGS(P2)
   276
   277	400070'	200 06 0 00 400773'		MOVE	S1,[ JSP  P2,EFCAL$## ]
   278	400071'	202 06 0 05 000003 		MOVEM	S1,FCODE(P2)		; The FCODE field
   279	400072'	402 00 0 05 000005 		CLEARM	EFFUNC(P2)		; Entry point pointer
   280
   281	400073'	210 06 0 00 000004 		MOVN	S1,P1			; Negative of number of args
   282	400074'	516 06 0 05 000006 		HRLZM	S1,EFARGS-1(P2)		;  preceeds list of arguments
   283
   284						 ;  At the top of the stack is a string descriptor for the
   285						 ;  return datatype.  
   286
   287	400075'	265 06 0 00 400342'		JSP	SLINK,GETDT		; What is return datatype?
   288	400076'	202 10 0 05 000004 		MOVEM	S3,EFRET(P2)		; Plug EFRET field
   289
   290						 ;  String descriptors giving the datatypes of the arguments
   291						 ;  are next on the stack. (In reverse order of course)
   292
   293						 ;  For each of these, plug the argument list entry
   294						 ;  and the DT field of the corresponding descriptor.
   295
   296	400077'	201 00 0 05 000007 		MOVEI	Z,EFARGS(P2)		; Set up pointer to first
   297	400100'	270 00 0 00 000004 		ADD	Z,P1			;  descriptor pair in EFBLOK
   298	400101'	202 00 0 00 000000#		MOVEM	Z,IGNOP+1		; Save it
   299
   300	400102'	361 04 0 00 400117'	FILL.1:	SOJL	P1,FILL.2		; Quit when all args done
   301	400103'	265 06 0 00 400342'		JSP	SLINK,GETDT		; What is datatype of this arg?
   302	400104'	550 15 0 00 000005 		HRRZ	Q1,P2			; Pointer to EFBLOK
   303	400105'	270 15 0 00 000004 		ADD	Q1,P1			;  + offset for this arg
   304	400106'	200 16 0 00 000004 		MOVE	Q2,P1			; Get offset to descriptor
   305	400107'	242 16 0 00 000001 		LSH	Q2,1			;  for this argument
   306	400110'	270 16 0 00 000000#		ADD	Q2,IGNOP+1		; Add offset to pointer
   307	400111'	516 07 0 16 000000 		HRLZM	S2,(Q2)			; Plug DT field of descriptor
   308	400112'	312 07 0 00 400774'		CAME	S2,[DANYDT,,0]		; For REAL, STRING, and INTEGER
   309	400113'	350 00 0 00 000016 		AOS	Q2			;  point to 2nd descriptor word
   310	400114'	540 07 0 00 000016 		HRR	S2,Q2			; Insert pointer
   311	400115'	202 07 0 15 000007 		MOVEM	S2,EFARGS(Q1)		; Plug entry in argument list
   312	400116'	254 00 0 00 400102'		 JRST	FILL.1			; Do remaining arguments
   313
   314
   315						 ;  Point the VFUNC field in the variable block for
   316						 ;  this function to this EFBLOK.
   317
   318	400117'	200 16 0 00 400037*	FILL.2:	MOVE	Q2,IGNOP		; Retrieve address of variable
   319										;  block
   320	400120'	201 16 0 16 000003 		MOVEI	Q2,VFUNC(Q2)		; Add offset to VFUNC field
   321	400121'	550 17 0 00 000005 		HRRZ	Q3,P2			; Pointer to EFBLOK
   322	400122'	265 15 0 00 000000*		JSP	QLINK,IFBLOK##
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 11
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Load the external function

   323						SUBTTL	LOAD -- Load the external function
   324
   325
   326						 ;  Retrieve descriptor for second argument to LOAD
   327						 ;  function (file name).  Set up a stream block for
   328						 ;  this file and process the Link Item types in the
   329						 ;  file.
   330
   331	400123'	200 00 0 00 400026*		MOVE	Z,FLAP			; From where we stashed it
   332	400124'	312 00 0 00 000000*		CAME	Z,NULLST##		; If this is the null string
   333	400125'	254 00 0 00 400132'		 JRST	NOTNUL
   334	400126'	200 06 0 00 000000*		MOVE	S1,SYSTR##		;  use the default external
   335	400127'	200 07 0 00 000000*		MOVE	S2,S.XLIB##		;   library file name
   336	400130'	202 06 0 00 400123*		DMOVEM	S1,FLAP
   337	400131'	202 07 0 00 000000#
   338
   339	400132'	261 01 0 00 400130*	NOTNUL:	PUSH	STACK,FLAP		; String descriptor to stack
   340	400133'	261 01 0 00 000000#		PUSH	STACK,FLAP+1
   341	400134'	400 00 0 00 000000 		CLEAR	Z,			; No file checking
   342	400135'	265 06 0 00 000000*		JSP	SLINK,CVT		; Convert to stream
   343	400136'	001 14 0 00 000015 		 ERROR	12,13			; Bad file spec
   344	400137'	001 17 0 00 000000 		 ERROR	15			; Can't ever happen
   345
   346	400140'	205 00 0 00 001000 		MOVX	Z,FMT.WM	;[246] Plug "word mode" format
   347	400141'	202 00 0 01 000000 		MOVEM	Z,(STACK)		;  into I/O descriptor
   348
   349	400142'	402 00 0 00 000000*		CLEARM	ECBPTR##			; External code block pointer
   350
   351	400143'	200 13 0 01 000000 	READ.0:	GET	Z,			; Read a word (Should be a
   352	400144'	200 12 0 01 777777 
   353	400145'	265 11 0 00 000000*
   354	400146'	001 14 0 00 000004 
   355	400147'	001 14 0 00 000006 
   356										;  LINK-10 Item type header)
   357	400150'	554 04 0 00 000000 		HLRZ	P1,Z			; So put item type in P1
   358	400151'	550 00 0 00 000000 		HRRZ	Z,Z			;  and num of data words in Z
   359	400152'	327 00 0 00 400161'		JUMPG	Z,READ.1		; YES THERE ARE DATA WORDS
   360
   361	400153'	200 13 0 01 000000 		 GET	Z,			; No data words, get rel bits
   362	400154'	200 12 0 01 777777 
   363	400155'	265 11 0 00 400145*
   364	400156'	001 14 0 00 000004 
   365	400157'	001 14 0 00 000006 
   366	400160'	254 00 0 00 400143'		 JRST	READ.0			;  and go for something more
   367										;   interesting.
   368
   369	400161'	202 00 0 00 000000*	READ.1:	MOVEM	Z,LCOUNT##		;[256] STORE THE COUNT
   370	400162'	476 00 0 00 000000#		SETOM	LCOUNT+1		;[256] INITIALIZE THE WORD
   371
   372	400163'	301 04 0 00 000000 		CAIL	P1,0			; Do we know what to do with
   373	400164'	303 04 0 00 000014 		CAILE	P1,LSTLKD		;  this item type?
   374	400165'	001 14 0 00 000040 		 ERROR	12,32			; If not, give error.
   375
   376						 ;  Call routine to process this link item type
   377
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 11-1
SNOEXT	MAC	18-Jan-67 10:47		LOAD -- Load the external function

   378	400166'	265 06 1 04 400000'		JSP	SLINK,@LNKDSP(P1)
   379	400167'	001 14 0 00 000040 		 ERROR	12,32			; Couldn't do it?
   380	400170'	254 00 0 00 400143'		 JRST	READ.0			; Successful return
   381										;  Go for next item type
   382
   383						 ;  Successful return from END item type
   384
   385	400171'	200 12 0 01 777777 		MOVE	T2,-1(STACK)		; Pointer to stream block
   386	400172'	200 14 0 12 000003 		MOVE	T4,STCF(T2)		; Current file offset
   387	400173'	271 14 0 12 000000 		ADDI	T4,0(T2)		; Point to pointer
   388	400174'	200 14 0 14 000000 		MOVE	T4,0(T4)		; Load I/O block pointer
   389	400175'	265 15 0 00 000000*		JSP	QLINK,CLS##		; Close the file
   390
   391	400176'	200 04 0 00 000000#		MOVE	PLINK,IGNOP+2		; Restore PLINK
   392	400177'	254 00 0 00 000000*		 JRST	RETNL1##		; POP I/O descriptor and
   393										;  return the null string
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 12
SNOEXT	MAC	18-Jan-67 10:47		EFCALL -- Call an external function

   394						SUBTTL	EFCALL -- Call an external function
   395					;
   396					;    Primary routine, unstable
   397					;
   398					;  This routine transfers control to an external function.   It  is
   399					;  invoked via the FCODE field in the EFBLOK for the function.  The
   400					;  arguments to be passed are converted  to  the  proper  type,  if
   401					;  required,  and  then  loaded into the EFBLOK.  Before control is
   402					;  passed to the external function, all registers containing active
   403					;  data are saved.  A flag (EF.FLG) is also set to indicate that an
   404					;  external function is being executed.  An error condition such as
   405					;  stack  overflow  could  prematurely return control to the SITBOL
   406					;  system  with  the  registers  in  an  unpredictable  state.   By
   407					;  checking  this  flag,  SITBOL can determine if the registers are
   408					;  valid and recover.
   409					;
   410					;  The standard Fortran-10 calling conventions are used for passing
   411					;  parameters and linking to the function.  AC  16  points  to  the
   412					;  argument list in the EFBLOK.  A
   413					;
   414					;	PUSHJ  17,entry
   415					;  
   416					;  transfers to the function entry point.
   417					;  
   418					;  When  the  function  returns,  the  previous state of the SITBOL
   419					;  system is restored.  On normal return from an external function,
   420					;  the  value returned is converted to the proper SITBOL descriptor
   421					;  and pushed onto the system stack.
   422					;
   423
   424	400200'	201 05 0 05 777774 	EFCALL::MOVEI	P2,-FCODE-1(P2)		; Get pointer to EFBLOK
   425	400201'	550 06 0 05 000002 		HRRZ	S1,FNARGS(P2)		; Get formal num of parameters
   426	400202'	274 00 0 00 000006 		SUB	Z,S1			; Compare with actual num passed
   427	400203'	302 00 0 00 000000 		CAIE	Z,0			; If necessary,
   428	400204'	265 15 0 00 400762'		JSP	QLINK,ADJSTK		;  adjust stack
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 13
SNOEXT	MAC	18-Jan-67 10:47		EFCALL -- Set up arguments for external function

   429						SUBTTL	EFCALL -- Set up arguments for external function
   430
   431
   432						 ;  Get offset to last descriptor pair in EFBLOK
   433						 ;    EFARGS + 3 * (num args) - 2
   434
   435	400205'	200 07 0 00 000006 		MOVE	S2,S1
   436	400206'	221 07 0 00 000003 		IMULI	S2,3
   437	400207'	271 07 0 05 000005 		ADDI	S2,EFARGS-2(P2)		; S2 points to descriptor
   438	400210'	550 10 0 00 000001 		HRRZ	S3,STACK		; S3 points to top of stack
   439
   440						 ;  All arguments with declared datatype of 'STRING' are
   441						 ;  converted to ASCIZ strings.  This must be done first
   442						 ;  since no garbage collections can occur after a descriptor
   443						 ;  is moved from the stack to the EFBLOK.
   444
   445	400211'	554 11 0 07 000000 	CVTST0:	HLRZ	T1,(S2)			; Get datatype
   446	400212'	302 11 0 00 004003 		CAIE	T1,SDT			; String?
   447	400213'	254 00 0 00 400222'		 JRST	CVTST1			; No.  On to the next.
   448	400214'	261 01 0 10 777777 		PUSH	STACK,-1(S3)		; This argument to
   449	400215'	261 01 0 10 000000 		PUSH	STACK,0(S3)		;  top of stack
   450	400216'	265 11 0 00 400722'		JSP	TLINK,CVTSTZ		; Convert to ASCIZ string
   451	400217'	003 01 0 00 000160 		 ERROR.	1,112			; Won't convert
   452	400220'	262 01 0 10 000000 		POP	STACK,0(S3)		; Replace original argument
   453	400221'	262 01 0 10 777777 		POP	STACK,-1(S3)		;  with new string
   454	400222'	275 07 0 00 000002 	CVTST1:	SUBI	S2,2			; Adjust
   455	400223'	275 10 0 00 000002 		SUBI	S3,2			;  pointers
   456	400224'	367 06 0 00 400211'		 SOJG	S1,CVTST0		; Check all arguments
   457
   458						 ;  Convert arguments and load into EFBLOK
   459
   460	400225'	550 06 0 05 000002 		HRRZ	S1,FNARGS(P2)		; Get num of parameters
   461	400226'	200 07 0 00 000006 		MOVE	S2,S1
   462	400227'	221 07 0 00 000003 		IMULI	S2,3			; S2 points to last descriptor
   463	400230'	271 07 0 05 000005 		ADDI	S2,EFARGS-2(P2)		;  pair in EFBLOK
   464
   465	400231'	554 11 0 07 000000 	CVTARG:	HLRZ	T1,(S2)			; Get datatype
   466	400232'	405 11 0 00 000077 		ANDI	T1,DTNUM		; Get datatype number
   467	400233'	371 00 0 00 000011 		SOSL	T1
   468	400234'	303 11 0 00 000002 		CAILE	T1,LSTCDD		; In dispatch table?
   469	400235'	254 00 0 00 400240'		 JRST	CVTAR1			; No conversion for this DT
   470	400236'	265 11 1 11 400021'		JSP	TLINK,@CDTDSP(T1)	; Convert to proper DT
   471	400237'	003 01 0 00 000160 		 ERROR.	1,112			; Can't convert that one
   472
   473						 ;  Descriptor at top of stack is plugged into
   474						 ;  EFBLOK
   475
   476	400240'	262 01 0 07 000001 	CVTAR1:	POP	STACK,1(S2)
   477	400241'	262 01 0 07 000000 		POP	STACK,0(S2)
   478	400242'	275 07 0 00 000002 		SUBI	S2,2			; Point to next descriptor
   479	400243'	367 06 0 00 400231'		 SOJG	S1,CVTARG		; Do all args
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 14
SNOEXT	MAC	18-Jan-67 10:47		EFCALL -- Enter an external function

   480						SUBTTL	EFCALL -- Enter an external function
   481
   482
   483						 ; Batten down the hatches and enter function
   484
   485	400244'	261 01 0 00 000004 		$PUSH	<P1,P2>		;[242] Save the prinmary registers
   486	400245'	261 01 0 00 000005 
   487	400246'	202 03 0 00 400117*		MOVEM	HSR,IGNOP		; History stack
   488	400247'	202 01 0 00 000000#		MOVEM	STACK,IGNOP+1		; "THE" stack
   489	400250'	202 02 0 00 000000#		MOVEM	SURF,IGNOP+2		; The SURF
   490	400251'	202 02 0 00 000121 		MOVEM	SURF,.JBFF		; Point JBFF to free area
   491
   492	400252'	200 17 0 00 000001 		MOVE	17,STACK		; Use system stack
   493	400253'	201 16 0 05 000007 		MOVEI	16,EFARGS(P2)		; Reg 16 points to arg list
   494	400254'	476 00 0 00 000000*		SETOM	EF.FLG##		; Set flag to indicate ext func
   495	400255'	350 00 0 00 000000*		AOS	$FNCLV##		; Bump &FNCLEVEL
   496	400256'	260 17 1 05 000005 		PUSHJ	17,@EFFUNC(P2)		; Enter function
   497	400257'	254 01 0 00 400260'		PORTAL	.+1			;[302] EXO entry
   498
   499	400260'	334 06 0 00 000000*		SKIPA	S1,S.RET##		; Successful return
   500	400261'	201 06 0 00 000000*		MOVEI	S1,S.FRET##		; Failure return
   501	400262'	202 06 0 00 000000*		MOVEM	S1,$RTNTP##		; Set &RETURN
   502	400263'	202 00 0 00 000006 		DMOVEM	Z,S1			; Save returned values
   503	400264'	202 01 0 00 000007 
   504
   505						 ;  Restore the world as we remembered it
   506
   507	400265'	200 03 0 00 400246*		MOVE	HSR,IGNOP
   508	400266'	200 01 0 00 000000#		MOVE	STACK,IGNOP+1
   509	400267'	200 02 0 00 000000#		MOVE	SURF,IGNOP+2
   510	400270'	262 01 0 00 000005 		$POP	<P2,P1>		;[242] Restore the primary registers
   511	400271'	262 01 0 00 000004 
   512	400272'	402 00 0 00 400254*		CLEARM	EF.FLG			; Everything is back to normal
   513	400273'	370 00 0 00 400255*		SOS	$FNCLV			; Back one level
   514
   515	400274'	200 00 0 00 400262*		MOVE	Z,$RTNTP
   516	400275'	306 00 0 00 400261*		CAIN	Z,S.FRET		; If function failed,
   517	400276'	254 00 0 04 000000 		JRST	0(PLINK)		;  return failure
   518
   519	400277'	254 00 1 05 000004 		JRST	@EFRET(P2)		; Return proper datatype
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 15
SNOEXT	MAC	18-Jan-67 10:47		EFCALL -- Return value from external function

   520						SUBTTL	EFCALL -- Return value from external function
   521
   522
   523						 ;  Return STRING
   524
   525	400300'	200 10 0 00 400775'	ST.RET:	MOVE	S3,[POINT 7,0(S1)]	; Set up byte pointer
   526	400301'	400 00 0 00 000000 		CLEAR	Z,			; Counter
   527	400302'	134 11 0 00 000010 	ST.R1:	ILDB	T1,S3			; Count up characters
   528	400303'	302 11 0 00 000000 		CAIE	T1,0			; Zero byte?
   529	400304'	344 00 0 00 400302'		 AOJA	Z,ST.R1			; Try again
   530
   531	400305'	322 00 0 00 000000*		JUMPE	Z,RETNUL##		; No chars?  Return null string
   532	400306'	200 11 0 00 000000 		MOVE	T1,Z			; Keep count of characters
   533
   534	400307'	265 15 0 00 000000*		JSP	QLINK,ASBLOK		; Get a string block
   535	400310'	001 13 0 00 000015 		 ERROR	11,13			; Must be a biggie!
   536	400311'	542 11 0 01 000000 		HRRM	T1,0(STACK)		; Add length
   537
   538	400312'	231 11 0 00 000005 		IDIVI	T1,5
   539	400313'	332 00 0 00 000012 		SKIPE	T2
   540	400314'	271 11 0 00 000001 		ADDI	T1,1			; T1 is num of words for string
   541
   542	400315'	550 12 0 01 777777 		HRRZ	T2,-1(STACK)		; Pointer to SBLOK
   543	400316'	271 12 0 00 000002 		ADDI	T2,LHDR			; Point to string in SBLOK
   544	400317'	271 11 0 12 777777 		ADDI	T1,-1(T2)		; Point to last word in block
   545	400320'	504 12 0 00 000006 		HRL	T2,S1			; Beginning of string
   546
   547	400321'	251 12 0 11 000000 		BLT	T2,0(T1)		; Move string
   548	400322'	254 00 0 04 000001 		JRST	1(PLINK)		; Return
   549
   550
   551						 ;  Return null string
   552
   553			000000*			N.RET==	RETNUL##	;[250] Return the null string
   554
   555
   556						 ;  Return INTEGER
   557
   558	400323'	205 07 0 00 002001 	I.RET:	MOVSI	S2,IDT
   559	400324'	254 00 0 00 400330'		 JRST	EF.RET			; Join common code
   560
   561
   562						 ;  Return REAL
   563
   564	400325'	205 07 0 00 002002 	R.RET:	MOVSI	S2,RDT
   565	400326'	254 00 0 00 400330'		 JRST	EF.RET			; Join common code
   566
   567
   568						 ;  Return descriptor
   569
   570	400327'	250 06 0 00 000007 	A.RET:	EXCH	S1,S2
   571
   572	400330'	261 01 0 00 000007 	EF.RET:	PUSH	STACK,S2		; First word of descriptor pair
   573	400331'	261 01 0 00 000006 		PUSH	STACK,S1		; Second word
   574	400332'	254 00 0 04 000001 		JRST	1(PLINK)		; Success
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 16
SNOEXT	MAC	18-Jan-67 10:47		UNLOAD -- Unload an external function

   575						SUBTTL	UNLOAD -- Unload an external function
   576					;
   577					;
   578					;    Primary routine, unstable
   579					;
   580					;  Control transfers to this routine  when  the  built-in  function
   581					;  UNLOAD  is  executed.   The  UNLOAD function takes 1 argument, a
   582					;  string giving the name of the function  to  be  unloaded.   This
   583					;  routine  removes  the  link  between  the variable block and the
   584					;  function block.  No storage is recovered.
   585					;
   586
   587	400333'	265 11 0 00 000000*	UNLD::	JSP	TLINK,CVTNAM##		; Get name
   588	400334'	003 01 0 00 000161 		 ERROR.	1,113			; Can't?
   589	400335'	550 16 0 01 777777 		HRRZ	Q2,-1(STACK)		; Pointer to var block
   590	400336'	271 16 0 00 000003 		ADDI	Q2,VFUNC		; Pointer to VFUNC field
   591	400337'	201 17 0 00 000000*		MOVEI	Q3,UNDEF$##		; "New" function
   592	400340'	265 15 0 00 400122*		JSP	QLINK,IFBLOK
   593
   594	400341'	254 00 0 00 400305*		JRST	RETNUL			; Return null string
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 17
SNOEXT	MAC	18-Jan-67 10:47		GETDT--Determine datatype from string descriptor

   595						SUBTTL	GETDT--Determine datatype from string descriptor
   596					;		-----  -----------------------------------------
   597					;
   598					;    Secondary routine, unstable
   599					;
   600					;  This  routine  takes  a string descriptor and returns the SITBOL
   601					;  datatype  associated  with  this  string,   the   DEC   datatype
   602					;  associated  with this string (F10 conventions), and a pointer to
   603					;  the code for processing this  datatype  when  returned  from  an
   604					;  external function.
   605					;
   606					;	String		SITBOL DT	DEC DT		Return code
   607					;
   608					;	any others	0		DANYDT		A.RET
   609					;	'INTEGER'	IDT (1)		DIDT		I.RET
   610					;	'REAL'		RDT (2)		DRDT		R.RET
   611					;	'STRING'	SDT (3)		DSDT		ST.RET
   612					;	null string	0		DANYDT		N.RET
   613					;
   614					;    Calling Sequence:
   615					;    ----------------
   616					;
   617					;	PUSH string descriptor on stack
   618					;	JSP	SLINK,GETDT
   619					;	normal return	
   620					;
   621					;    The stack is POPed in all cases.  On normal return
   622					;    S2(right) contains SITBOL datatype
   623					;    S2(left) contains DEC datatype
   624					;    S3 contains return code
   625					;
   626
   627	400342'	265 11 0 00 400035*	GETDT:	JSP	TLINK,INSTAL##		; Find variable block for
   628										;  this string.
   629	400343'	254 00 0 00 400355'		 JRST	GET.NL			; Must be null string
   630	400344'	200 07 0 00 000000 		MOVE	S2,Z			; Get address of var block
   631	400345'	554 07 0 07 000003 		HLRZ	S2,VBDT(S2)		; Get datatype field
   632	400346'	200 12 0 00 000007 		MOVE	T2,S2
   633	400347'	405 12 0 00 000077 		ANDI	T2,DTNUM		; Get datatype number
   634	400350'	303 12 0 00 000003 		CAILE	T2,LSTDTD		; In dispatch table?
   635	400351'	403 12 0 00 000007 		CLEARB	T2,S2			; No, then use first entry
   636
   637	400352'	500 07 0 12 400015'		HLL	S2,DTDSP(T2)		; Get DEC datatype
   638	400353'	550 10 0 12 400015'		HRRZ	S3,DTDSP(T2)		;  and pointer to return code
   639	400354'	254 00 0 06 000000 		JRST	0(SLINK)		; Return
   640
   641
   642						 ;  For null string
   643
   644	400355'	515 07 0 00 000000 	GET.NL:	HRLZI	S2,DANYDT
   645	400356'	201 10 0 00 400341*		MOVEI	S3,N.RET
   646	400357'	254 00 0 06 000000 		JRST	0(SLINK)		; Return
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 18
SNOEXT	MAC	18-Jan-67 10:47		LNKCOD -- Process Code Link Item Types

   647						SUBTTL	LNKCOD -- Process Code Link Item Types
   648					;
   649					;    Secondary routine, unstable
   650					;
   651					;  This routine relocates the data items as required and loads  the
   652					;  code  into  the GRID.  CODBLK is called to create and expand the
   653					;  JKBLOK containing  the  code.   Absolute  or  symbolic  starting
   654					;  addresses for code items are not allowed.
   655					;
   656					;    Calling Sequence:
   657					;    ----------------
   658					;
   659					;	IGNOP points to variable block for function being loaded
   660					;	PUSH I/O stream descriptor on stack
   661					;	Load Z with count of data words
   662					;	JSP	SLINK,LNKCOD
   663					;	error return
   664					;	normal return
   665					;
   666
   667	400360'	200 13 0 01 000000 	LNKCOD:	GET	S2		;[243] Get relocation bits
   668	400361'	200 12 0 01 777777 
   669	400362'	265 11 0 00 400155*
   670	400363'	001 14 0 00 000004 
   671	400364'	001 14 0 00 000006 
   672	400365'	202 00 0 00 000007 
   673	400366'	200 13 0 01 000000 		GET	S3		; Get starting address
   674	400367'	200 12 0 01 777777 
   675	400370'	265 11 0 00 400362*
   676	400371'	001 14 0 00 000004 
   677	400372'	001 14 0 00 000006 
   678	400373'	202 00 0 00 000010 
   679
   680	400374'	603 10 0 00 400000 		TLNE	S3,400000
   681	400375'	001 14 0 00 000044 		 ERROR	12,36		; Can't do symbolic start address
   682	400376'	607 07 0 00 200000 		TLNN	S2,200000
   683	400377'	001 14 0 00 000045 		 ERROR	12,37		; Can't do absolute start address
   684	400400'	242 07 0 00 000002 		LSH	S2,2		; Done with these relocation bits
   685	400401'	301 10 0 00 400000 		CAIL	S3,400000
   686	400402'	001 14 0 00 000046 		 ERROR	12,38		; Can't do high seg code
   687
   688	400403'	270 00 0 00 400161*		ADD	Z,LCOUNT##	;[250] Starting address + number of
   689									;  words to load
   690	400404'	275 00 0 00 000001 		SUBI	Z,1		; Don't count data word
   691									;  containing starting address
   692	400405'	200 12 0 00 400142*		MOVE	T2,ECBPTR	; Get pointer to ext code block
   693	400406'	265 11 0 00 400644'		JSP	TLINK,CODBLK	; Expand block for this code
   694	400407'	202 12 0 00 400405*		MOVEM	T2,ECBPTR	; Save pointer
   695
   696	400410'	271 10 0 12 000002 		ADDI	S3,LHDR(T2)	; St address + block address
   697	400411'	202 10 0 00 000000*		MOVEM	S3,LOCNTR##	;  + block header offset
   698									;   = location counter.
   699	400412'	201 10 0 00 000001 		MOVEI	S3,1		; Initialize counter to process
   700									;  data words.
   701
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 19
SNOEXT	MAC	18-Jan-67 10:47		LNKCOD -- Process Code Link Item Types

   702	400413'	200 13 0 01 000000 	COD.1:	GET	Z,			; Get data word
   703	400414'	200 12 0 01 777777 
   704	400415'	265 11 0 00 400370*
   705	400416'	001 14 0 00 000004 
   706	400417'	001 14 0 00 000006 
   707	400420'	201 16 0 00 000002 		MOVEI	Q2,LHDR			; Block header offset
   708	400421'	270 16 0 00 400407*		ADD	Q2,ECBPTR		;  + address of ext code block
   709										;   = RH relocation factor
   710	400422'	514 15 0 00 000016 		HRLZ	Q1,Q2			; Q1 is LH relocation factor
   711
   712	400423'	603 07 0 00 400000 		TLNE	S2,400000		; Ck LH relocation bit
   713	400424'	270 00 0 00 000015 		ADD	Z,Q1			; Relocate LH
   714	400425'	603 07 0 00 200000 		TLNE	S2,200000		; Ck RH relocation bit
   715	400426'	270 00 0 00 000016 		ADD	Z,Q2			; Relocate RH
   716	400427'	242 07 0 00 000002 		LSH	S2,2			; 2 less bits to worry about
   717
   718	400430'	202 00 1 00 400411*		MOVEM	Z,@LOCNTR		; Put in code block
   719	400431'	350 00 0 00 400430*		AOS	LOCNTR			; Bump location counter
   720	400432'	271 10 0 00 000001 		ADDI	S3,1			;  and loop counter
   721	400433'	311 10 0 00 400403*		CAML	S3,LCOUNT##	; When done
   722	400434'	254 00 0 06 000001 		JRST	1(SLINK)		;  return 
   723
   724	400435'	200 11 0 00 000010 		MOVE	T1,S3
   725	400436'	231 11 0 00 000022 		IDIVI	T1,^D18			; Every 18 data words
   726	400437'	326 12 0 00 400413'		  JUMPN	T2,COD.1		;  get a new set of rel bits
   727	400440'	200 13 0 01 000000 		GET	S2
   728	400441'	200 12 0 01 777777 
   729	400442'	265 11 0 00 400415*
   730	400443'	001 14 0 00 000004 
   731	400444'	001 14 0 00 000006 
   732	400445'	202 00 0 00 000007 
   733	400446'	254 00 0 00 400413'		  JRST	COD.1			;   and then continue loop.
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 20
SNOEXT	MAC	18-Jan-67 10:47		LNKEND - Process End Link Item Types

   734						SUBTTL	LNKEND - Process End Link Item Types
   735					;
   736					;    Secondary routine, stable
   737					;
   738					;  This routine expands the code block as  required  by  the  first
   739					;  data word.  It also checks for references to absolute addresses,
   740					;  and verifies that an entry point has been extablished.
   741					;
   742					;    Calling Sequence:
   743					;    ----------------
   744					;
   745					;	IGNOP points to variable block for function being loaded
   746					;	PUSH I/O stream descriptor on stack
   747					;	Load Z with count of data words
   748					;	JSP	SLINK,LNKEND
   749					;	error return
   750					;	unused return (normal return for other LNK--- routines)
   751					;	normal return (for LNKEND only)
   752					;
   753
   754	400447'	265 11 0 00 400616'	LNKEND:	JSP	TLINK,GETDAT	;[243] Get a data word
   755	400450'	001 17 0 00 000000 		 ERROR	15		;[243]
   756	400451'	200 07 0 00 000000 		MOVE	S2,Z		;[243] Copy the data word
   757	400452'	265 11 0 00 400616'		JSP	TLINK,GETDAT	;[243] Get the next data word
   758	400453'	001 17 0 00 000000 		 ERROR	15		;[243]
   759	400454'	250 00 0 00 000007 		EXCH	Z,S2		;[250] Num of locations required by
   760									;  the subprogram just loaded
   761	400455'	200 12 0 00 400421*		MOVE	T2,ECBPTR		; Expand code block
   762	400456'	265 11 0 00 400644'		JSP	TLINK,CODBLK		;  if necessary
   763
   764	400457'	302 07 0 00 000000 		CAIE	S2,0		;[243]
   765	400460'	001 14 0 00 000042 		 ERROR	12,34			; Absolute address in program
   766
   767	400461'	550 12 0 05 000005 		HRRZ	T2,EFFUNC(P2)		; External function entry point
   768	400462'	306 12 0 00 000000 		CAIN	T2,0
   769	400463'	001 14 0 00 000043 		 ERROR	12,35			; Entry point never established
   770
   771	400464'	254 00 0 06 000002 		JRST	2(SLINK)		; Normal return
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 21
SNOEXT	MAC	18-Jan-67 10:47		LNKENT - Process Entry Link Item Types

   772						SUBTTL	LNKENT - Process Entry Link Item Types
   773					;
   774					;    Secondary routine, stable
   775					;
   776					;  All data items in this item type are ignored.
   777					;
   778					;    Calling Sequence:
   779					;    ----------------
   780					;
   781					;	PUSH I/O stream descriptor on stack
   782					;	Load Z with count of data words
   783					;	JSP	SLINK,LNKENT
   784					;	error return
   785					;	normal return
   786					;
   787
   788
   789	400465'	001 14 0 00 000040 	LNKENT:	ERROR	12,32		;[256] THIS IS TEMPORARY.
   790					;LNKENT:	MOVE	S2,LCOUNT	;[250] Get the address of the var block
   791	400466'	261 01 0 07 000004 		PUSH	STACK,VNAME(S2)	;[250] Get the descriptor
   792	400467'	261 01 0 07 000005 		PUSH	STACK,VNAME+1(S2) ;[250] On the stack
   793	400470'	265 11 0 00 400670'		JSP	TLINK,CVTR50	;[250] Convert to a radix 50 symbol
   794	400471'	202 00 0 00 000000#		MOVEM	Z,IGNOS##+1	;[250] Store it
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 22
SNOEXT	MAC	18-Jan-67 10:47		LNKERR - Process invalid Link Item Types

   795						SUBTTL	LNKERR - Process invalid Link Item Types
   796					;
   797					;    Secondary routine, stable
   798					;
   799					;  This  routine  is invoked when a link item type not supported by
   800					;  the external  function  loader  is  encountered.   This  routine
   801					;  always fails.
   802					;
   803					;    Calling Sequence:
   804					;    ----------------
   805					;
   806					;	PUSH I/O stream descriptor on stack
   807					;	Load Z with count of data words
   808					;	JSP	SLINK,LNKERR
   809					;	error return
   810					;	normal return
   811					;
   812
   813	400472'	001 14 0 00 000040 	LNKERR:	ERROR	12,32			; Fail in style
   814
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 23
SNOEXT	MAC	18-Jan-67 10:47		LNKNAM - Process Name Link Item Types

   815						SUBTTL	LNKNAM - Process Name Link Item Types
   816					;
   817					;    Secondary routine, stable
   818					;
   819					;  All data items in this link item type are ignored.
   820					;
   821					;    Calling Sequence:
   822					;    ----------------
   823					;
   824					;	PUSH I/O stream descriptor on stack
   825					;	Load Z with count of data words
   826					;	JSP	SLINK,LNKNAM
   827					;	error return
   828					;	normal return
   829					;
   830
   831		770000	000000			NM$CPU==770000,,0	;[243] MASK FOR THE CPU TYPE IN THE BLOCK
   832		007777	000000			NM$TRA==007777,,0	;[243] MASK FOR THE TRANSLATOR NUMBER
   833
   834
   835	400473'	265 11 0 00 400616'	LNKNAM:	JSP	TLINK,GETDAT	;[243] Get a data word
   836	400474'	254 00 0 06 000001 		 JRST	1(SLINK)	;[243] SHORT BLOCK ?
   837	400475'	265 11 0 00 400616'		JSP	TLINK,GETDAT	;[243] Get the info
   838	400476'	001 17 0 00 000000 		 ERROR	15		;[256] ON WELL.
   839	400477'	602 00 0 00 777777 		TRNE	Z,-1		;[243] Require a common area ?
   840	400500'	001 14 0 00 000050 		 error	12,40		;[243] yes - Error
   841
   842	400501'	135 07 0 00 400776'		ldb	s2,[pointr (Z,nm$cpu)] ;[243] get the cpu type
   843	400502'	322 07 0 00 400505'		JUMPE	S2,LNAM.0	;[243] ZERO - ALL IS OK
   844	400503'	312 07 0 00 000000*		CAME	S2,CPUTYP##	;[243] Same cpu ?
   845	400504'	001 14 0 00 000051 		  ERROR	12,41		;[243] Different CPUs, it will not run
   846
   847
   848	400505'	135 07 0 00 400777'	LNAM.0:	LDB	S2,[POINTR (Z,NM$TRA)] ;[243] Get the translator that produced this
   849	400506'	303 07 0 00 000022 		CAILE	S2,TRALEN	;[243] In the table ?
   850	400507'	001 14 0 00 000052 		 ERROR	12,42		;[243] No - Unknown translator
   851	400510'	256 00 0 07 400512'		XCT	TRADSP(S2)	;[243] Issue error or do nothing
   852	400511'	254 00 0 06 000001 		 JRST	1(SLINK)	;[243] All is ok
   853
   854
   855					;[243] the following is the translator table
   856					;[243] An entry in this table either validates a translator or
   857					;[243] declairs it illegal
   858
   859	400512'	255 00 0 00 000000 	tradsp:	jfcl			;[243] 0 - unknown
   860	400513'	001 14 0 00 000053 		ERROR	12,43		;[243] 1 - F40 (HAHA)
   861	400514'	001 14 0 00 000054 		ERROR	12,44		;[243] 1 - COBOL
   862	400515'	001 14 0 00 000055 		ERROR	12,45		;[243] 3 - ALGOL
   863	400516'	001 14 0 00 000056 		ERROR	12,46		;[243] 4 - NELIAC
   864	400517'	001 14 0 00 000057 		ERROR	12,47		;[243] 5 - PL/1
   865	400520'	255 00 0 00 000000 		JFCL			;[243] 6 - BLISS-10
   866	400521'	001 14 0 00 000060 		ERROR	12,48		;[243] 7 - SAIL
   867	400522'	255 00 0 00 000000 		JFCL			;[243] 10 - FORTRAN-10
   868	400523'	255 00 0 00 000000 		JFCL			;[243] 11 - MACRO
   869	400524'	255 00 0 00 000000 		JFCL			;[256] 12 - FAIL
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 23-1
SNOEXT	MAC	18-Jan-67 10:47		LNKNAM - Process Name Link Item Types

   870	400525'	001 14 0 00 000061 		ERROR	12,49		;[256] 13 - BCPL
   871	400526'	255 00 0 00 000000 		JFCL			;[256] 14 - MIDAS
   872	400527'	001 14 0 00 000062 		ERROR	12,50		;[256] 15 - SIMULA
   873	400530'	001 14 0 00 000063 		ERROR	12,51		;[256] 16 - CBL74
   874	400531'	001 14 0 00 000064 		ERROR	12,52		;[256] 17 - CBL79
   875	400532'	255 00 0 00 000000 		JFCL			;[256] 20 - BLS36
   876	400533'	001 14 0 00 000065 		ERROR	12,53		;[256] 21 - BASIC (PLUS)
   877			000022		TRALEN==.-TRADSP		;[250] LENGTH OF THE TABLE
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 24
SNOEXT	MAC	18-Jan-67 10:47		LNKSYM - Process Symbol Link Item Types

   878						SUBTTL	LNKSYM - Process Symbol Link Item Types
   879					;		------  ------------------------------
   880					;
   881					;    Secondary routine, stable
   882					;
   883					;  Only global references and definitions are of interest.   Global
   884					;  references  cannot  be satisfied and result in an error message.
   885					;  Global definitions are checked to establish the entry  point  of
   886					;  the external function.
   887					;
   888					;    Calling Sequence:
   889					;    ----------------
   890					;
   891					;	IGNOP points to variable block for function being loaded
   892					;	PUSH I/O stream descriptor on stack
   893					;	Load Z with count of data words
   894					;	JSP	SLINK,LNKSYM
   895					;	error return
   896					;	normal return
   897					;
   898
   899	400534'	200 07 0 00 400265*	LNKSYM:	MOVE	S2,IGNOP		;[243] Get address of variable block
   900	400535'	261 01 0 07 000004 		PUSH	STACK,VNAME(S2)		;[243] String descriptor to
   901	400536'	261 01 0 07 000005 		PUSH	STACK,VNAME+1(S2)	;[243]  stack
   902
   903	400537'	265 11 0 00 400670'		JSP	TLINK,CVTR50		; Convert function name to
   904										;  RADIX-50
   905	400540'	661 00 0 00 040000 		TLO	Z,GDEF			; Set global definition bits
   906	400541'	202 00 0 00 000000#		MOVEM	Z,IGNOS+1		; Save function name
   907	400542'	400 10 0 00 000000 		CLEAR	S3,			; Initialize counter
   908
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 25
SNOEXT	MAC	18-Jan-67 10:47		LNKSYM - Process Symbol Link Item Types

   909	400543'	200 13 0 01 000000 	SYM.1:	GET	Z,			; Get relocation bits
   910	400544'	200 12 0 01 777777 
   911	400545'	265 11 0 00 400442*
   912	400546'	001 14 0 00 000004 
   913	400547'	001 14 0 00 000006 
   914
   915	400550'	200 13 0 01 000000 	SYM.2:	GET	S2			; Get first data word
   916	400551'	200 12 0 01 777777 
   917	400552'	265 11 0 00 400545*
   918	400553'	001 14 0 00 000004 
   919	400554'	001 14 0 00 000006 
   920	400555'	202 00 0 00 000007 
   921	400556'	200 13 0 01 000000 		GET	Z,			; Get second data word
   922	400557'	200 12 0 01 777777 
   923	400560'	265 11 0 00 400552*
   924	400561'	001 14 0 00 000004 
   925	400562'	001 14 0 00 000006 
   926
   927						 ;  If this is a global symbol reference, the external
   928						 ;  function loader can't properly handle it.
   929
   930	400563'	603 07 0 00 600000 		TLNE	S2,GSYM			; Any global bits set
   931	400564'	603 07 0 00 100000 		TLNE	S2,LSYM			; OK if local bit set too
   932	400565'	604 00 0 00 000000 		TRNA				; SKIP quickly
   933	400566'	001 14 0 00 000041 		 ERROR	12,33			; Can't do global refs
   934
   935						 ;  Is this symbol the entry point we are looking for?
   936
   937	400567'	312 07 0 00 000000#		CAME	S2,IGNOS+1
   938	400570'	254 00 0 00 400574'		 JRST	SYM.3		; No, On to the next entry.
   939
   940						 ;  This is the entry point for the function.  Plug
   941						 ;  the EFFUNC field in the EFBLOK for this function.
   942
   943	400571'	200 11 0 00 400455*		MOVE	T1,ECBPTR		; Relocate entry point to
   944	400572'	271 00 0 11 000002 		ADDI	Z,LHDR(T1)		;  external code block
   945	400573'	542 00 0 05 000005 		HRRM	Z,EFFUNC(P2)		; Plug EFBLOK
   946
   947	400574'	271 10 0 00 000002 	SYM.3:	ADDI	S3,2			; Increment counter
   948	400575'	311 10 0 00 400433*		CAML	S3,LCOUNT	;[250] When all data words done
   949	400576'	254 00 0 06 000001 		JRST	1(SLINK)		;  normal return
   950
   951	400577'	200 15 0 00 000010 		MOVE	Q1,S3
   952	400600'	231 15 0 00 000022 		IDIVI	Q1,^D18			; Every 18 words,
   953	400601'	326 16 0 00 400550'		 JUMPN	Q2,SYM.2
   954	400602'	254 00 0 00 400543'		 JRST	SYM.1			;  do something with those
   955										;   overhead words of rel bits
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 26
SNOEXT	MAC	18-Jan-67 10:47		LNKJNK - Process ignorable block types

   956						SUBTTL	LNKJNK - Process ignorable block types
   957
   958					; the following routine will process all block types that can be safely
   959					; ignored.  These block types include: 0, and 14.
   960					;
   961					; usage:
   962					;
   963					;	ignos - containing the number of data words
   964					;
   965					;	jsp	slink,lnkjnk
   966					;	(error return)		; not used
   967					;	(Normal Return)
   968
   969
   970	400603'	265 11 0 00 400616'	LNKJNK:	JSP	TLINK,GETDAT	;[243] Get the data word
   971	400604'	254 00 0 06 000001 		 JRST	1(SLINK)	;[243] Return
   972	400605'	254 00 0 00 400603'		JRST	.-2		;[243] Loop for all words
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 27
SNOEXT	MAC	18-Jan-67 10:47		LNKHSG - PROCESS HIGH SEGMENT LINK ITEM-TYPE

   973						SUBTTL	LNKHSG - PROCESS HIGH SEGMENT LINK ITEM-TYPE
   974
   975						; THE FOLLOWING ROUTINE WILL PROCESS THE LINK HIGH SEG
   976						; ITEM TYPE FOR THE SPECIAL CASE OF SOME F10 PROGRAMS
   977						; WHICH WILL NOT REFERENCE THE HIGH SEGMENT (I.E. NO FORTRAN-10 I/O).
   978						;
   979						; USAGE:
   980						;
   981						;	LCOUNT - CONTAINING THE COUNT OF DATA WORDS
   982						;
   983						;	JSP	SLINK,LNKHSG
   984						;	 (ERROR RETURN)
   985						;	 (NORMAL RETURN)
   986
   987
   988	400606'	001 14 0 00 000040 	LNKHSG:	ERROR	12,32		;[256] TEMPORARY.
   989					;LNKHSG:	JSP	TLINK,GETDAT	;[256] GET DATA
   990	400607'	001 17 0 00 000000 		 ERROR	15		;[256] CAN'T HAPPEN
   991	400610'	200 00 0 00 400575*		MOVE	Z,LCOUNT	;[256]	GET COUNT OF WORDS
   992	400611'	302 00 0 00 000002 		CAIE	Z,2		;[256] ARE THERE TWO WORDS?
   993	400612'	001 14 0 00 000046 		 ERROR	12,38		;[256] NOT FROM F10
   994	400613'	265 11 0 00 400616'		JSP	TLINK,GETDAT	;[256]	GET THE NEXT WORDS
   995									;[256] AND IGNOR EVERYTHING.
   996	400614'	001 17 0 00 000000 		 ERROR	15		;[256] WOOPS.
   997	400615'	254 00 0 06 000001 		JRST	1(SLINK)	;[256] RETURN TO CALLER.
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 28
SNOEXT	MAC	18-Jan-67 10:47		GETDAT - Routine to get data from a REL file

   998						SUBTTL	GETDAT - Routine to get data from a REL file
   999
  1000					; The following routine will return the next data word from the REL file
  1001					; all relocations words will be ignored.
  1002
  1003
  1004	400616'	350 12 0 00 000000#	GETDAT:	AOS	T2,LCOUNT+1	;[243] Increment the count
  1005	400617'	313 12 0 00 400610*		CAMLE	T2,LCOUNT##	;[243] Finished ?
  1006	400620'	254 00 0 00 400642'		 JRST	GETD.1		;[243] Yes - Clean up and return
  1007	400621'	231 12 0 00 000022 		IDIVI	T2,^D18		;[243] Relocation word next ?
  1008	400622'	202 11 0 00 000000*		DMOVEM	TLINK,TSAVE##	;[256] SAVE TLINK AND T2
  1009	400623'	202 12 0 00 000000#
  1010	400624'	326 13 0 00 400632'		JUMPN	T3,GETD.0	;[243] No - Ignore it
  1011	400625'	200 13 0 01 000000 		GET	Z		;[243] Get the relocation word
  1012	400626'	200 12 0 01 777777 
  1013	400627'	265 11 0 00 400560*
  1014	400630'	001 14 0 00 000004 
  1015	400631'	001 14 0 00 000006 
  1016
  1017	400632'	200 13 0 01 000000 	GETD.0:	GET	Z		;[243] Get the data word
  1018	400633'	200 12 0 01 777777 
  1019	400634'	265 11 0 00 400627*
  1020	400635'	001 14 0 00 000004 
  1021	400636'	001 14 0 00 000006 
  1022	400637'	200 12 0 00 000000#		DMOVE	TLINK,TSAVE	;[256] GET BACK TLINK AND T2
  1023	400640'	200 11 0 00 400622*
  1024	400641'	254 00 0 11 000001 		JRST	1(TLINK)	;[243] Give a good return
  1025
  1026					; Here at the end of the data block
  1027
  1028
  1029	400642'	476 00 0 00 000000#	GETD.1:	SETOM	LCOUNT+1		;[243] Reinitialize the count
  1030	400643'	254 00 0 11 000000 		JRST	(TLINK)		;[243] Return to the caller
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 29
SNOEXT	MAC	18-Jan-67 10:47		CODBLK--Allocate block for external function code

  1031						SUBTTL	CODBLK--Allocate block for external function code
  1032					;		------  -----------------------------------------
  1033					;
  1034					;    Tertiary routine,  unstable
  1035					;
  1036					;  This routine allocates a JKBLOK  into  which  the  code  for  an
  1037					;  external  function will be loaded.  The block begins at GSURF in
  1038					;  the GRID.  The first call to this routine creates the block  and
  1039					;  subsequent  calls  expand  it as needed.  (It is assumed that no
  1040					;  other storage allocation in the GRID  will  take  place  between
  1041					;  calls.)
  1042					;
  1043					;    Calling Sequence:
  1044					;    ----------------
  1045					;
  1046					;	T2 points to the start of the block (0 on first call)
  1047					;	Z is the number of words needed (not counting header)
  1048					;	JSP	TLINK,CODBLK
  1049					;	normal return
  1050					;
  1051					;    On return T2 points to the start of the block
  1052					;
  1053
  1054	400644'	326 12 0 00 400647'	CODBLK:	JUMPN	T2,CODB.1		; On first call
  1055	400645'	200 12 0 00 400061*		MOVE	T2,GSURF		;  set pointer to block
  1056	400646'	254 00 0 00 400651'		 JRST	CODB.2
  1057					;
  1058	400647'	550 13 0 12 000000 	CODB.1:	HRRZ	T3,BLENG(T2)		; Get current length
  1059	400650'	274 00 0 00 000013 		SUB	Z,T3			; How much do we need?
  1060
  1061	400651'	271 00 0 00 000002 	CODB.2:	ADDI	Z,LHDR			; Don't forget header words
  1062	400652'	323 00 0 11 000000 		JUMPLE	Z,(TLINK)		; Normal return if we already
  1063										;  have it.
  1064										; Otherwise,
  1065	400653'	265 15 0 00 400057*		JSP	QLINK,GCOLG##		; Expand GRID
  1066
  1067	400654'	200 15 0 00 400645*		MOVE	Q1,GSURF		; Points to beginning of new ext
  1068	400655'	273 00 0 00 400654*		ADDB	Z,GSURF			; Update GSURF
  1069
  1070	400656'	402 00 0 15 000000 		CLEARM	(Q1)			; Clear first word
  1071
  1072	400657'	504 15 0 00 000015 		HRL	Q1,Q1
  1073	400660'	271 15 0 00 000001 		ADDI	Q1,1
  1074	400661'	200 16 0 00 400655*		MOVE	Q2,GSURF
  1075	400662'	251 15 0 16 777777 		BLT	Q1,-1(Q2)		; Get them others
  1076
  1077	400663'	274 00 0 00 000012 		SUB	Z,T2			; New length of block
  1078	400664'	505 00 0 00 000417 		HRLI	Z,JKBLOK		; Plug datatype field
  1079	400665'	202 00 0 12 000000 		MOVEM	Z,BTCODE&BLENG(T2)	; Insert block header
  1080	400666'	402 00 0 12 000001 		CLEARM	GCFLD(T2)		;  and a little something for GC
  1081	400667'	254 00 0 11 000000 		JRST	(TLINK)			; And another successful return
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 30
SNOEXT	MAC	18-Jan-67 10:47		CVTR50--Convert ASCII string to RADIX-50

  1082						SUBTTL	CVTR50--Convert ASCII string to RADIX-50
  1083					;		------  --------------------------------
  1084					;
  1085					;    Tertiary routine, stable
  1086					;
  1087					;  This  routine  produces  a  RADIX-50  string   from   a   string
  1088					;  descriptor.  If the string is longer that 6 characters, only the
  1089					;  first 6 characters are used.
  1090					;
  1091					;    Calling Sequence:
  1092					;    ----------------
  1093					;
  1094					;	PUSH string descriptor on stack
  1095					;	JSP	TLINK,CVTR50
  1096					;	normal return
  1097					;
  1098					;    On return Z contains the RADIX-50 string
  1099					;
  1100
  1101	400670'	550 12 0 01 000000 	CVTR50:	HRRZ	T2,(STACK)		; Get length of string
  1102	400671'	265 15 0 00 000000*		JSP	QLINK,CVTPTR##		; Get byte pointer
  1103	400672'	000000	000000			 0				; Zero
  1104	400673'	001 17 0 00 000000 		 ERROR	15			; "Can't ever happen," he said
  1105
  1106	400674'	202 00 0 00 000014 		MOVEM	Z,T4			; Save byte pointer
  1107	400675'	303 12 0 00 000006 		CAILE	T2,6			; If length > 6
  1108	400676'	201 12 0 00 000006 		MOVEI	T2,6			;  only look at first 6 chars
  1109	400677'	400 00 0 00 000000 		CLEAR	Z,			; Z will contain RADIX-50 string
  1110
  1111	400700'	134 13 0 00 000014 	CVTR.1:	ILDB	T3,T4			; ASCII char to T3
  1112	400701'	200 15 0 13 000000*		MOVE	Q1,SYSCTB##(T3)		; Char set bits for this char
  1113
  1114	400702'	616 15 0 00 000000*		TDNN	Q1,X.R50##		; Valid RADIX-50 char?
  1115	400703'	400 13 0 00 000000 		CLEAR	T3,			; No, use null
  1116
  1117	400704'	602 15 0 00 400000 		TXNE	Q1,Y.UPS	; A-Z ?
  1118	400705'	275 13 0 00 000066 		SUBI	T3,"A"-13
  1119
  1120	400706'	602 15 0 00 200000 		TXNE	Q1,Y.LOWS	; a-z ?
  1121	400707'	275 13 0 00 000126 		SUBI	T3,"a"-13
  1122
  1123	400710'	603 15 0 00 000040 		TXNE	Q1,Y.NUM	; 0-9 ?
  1124	400711'	275 13 0 00 000057 		SUBI	T3,"0"-1
  1125
  1126	400712'	603 15 0 00 000100 		TXNE	Q1,Y.PER	; A period?
  1127	400713'	201 13 0 00 000045 		MOVEI	T3,45
  1128
  1129	400714'	602 15 0 00 000300 		TXNE	Q1,Y.DOLR!Y.PCNT	; A dollar or % symbol?
  1130	400715'	201 13 0 13 000002 		MOVEI	T3,46-"$"(T3)
  1131
  1132	400716'	221 00 0 00 000050 		IMULI	Z,50			; Shift string
  1133	400717'	270 00 0 00 000013 		ADD	Z,T3			; Tack on this character
  1134	400720'	367 12 0 00 400700'		 SOJG	T2,CVTR.1		; Do entire string
  1135
  1136	400721'	254 00 0 11 000000 		JRST	0(TLINK)		; Then a normal return
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 31
SNOEXT	MAC	18-Jan-67 10:47		CVTR50--Convert ASCII string to RADIX-50

  1137					;    	SUBTTL	CVTSTZ--Convert to ASCIZ string
  1138					;		------  -----------------------
  1139					;
  1140					;    Tertiary routine, unstable
  1141					;
  1142					;  This routine converts a SITBOL datatype to an ASCIZ string.  Any
  1143					;  datatype  that  can  be  converted  to  STRING  datatype  can be
  1144					;  converted to an ASCIZ string.
  1145					;
  1146					;    Calling Sequence:
  1147					;    ----------------
  1148					;
  1149					;	PUSH descriptor on stack
  1150					;	JSP	TLINK,CVTSTZ
  1151					;	error return
  1152					;	normal return
  1153					;
  1154					;    On  normal  return  a  string descriptor pointing to the SBLOK
  1155					;    containing an ASCIZ string will be on the top  of  the  stack.
  1156					;    The old value is only removed from the stack if the conversion
  1157					;    is successful.
  1158					;
  1159
  1160	400722'	202 11 0 00 400640*	CVTSTZ:	DMOVEM	TLINK,TSAVE##		; Save link and T2
  1161	400723'	202 12 0 00 000000#
  1162
  1163	400724'	265 11 0 00 000000*		JSP	TLINK,CVTSTR##		; Convert to string
  1164	400725'	254 00 1 00 400722*		JRST	@TSAVE			; Won't convert
  1165	400726'	200 12 0 00 000000#		DMOVE	TLINK,TSAVE
  1166	400727'	200 11 0 00 400725*
  1167	400730'	550 13 0 01 000000 		HRRZ	T3,0(STACK)		; Length of string
  1168	400731'	322 13 0 11 000001 		JUMPE	T3,1(TLINK)		; If null, we are done
  1169
  1170	400732'	265 15 0 00 400671*		JSP	QLINK,CVTPTR		; Byte pointer for string
  1171	400733'	000 00 0 00 000000 		Z				; Don't need base register
  1172	400734'	001 17 0 00 000000 		 ERROR	15			; It WILL be non-null string
  1173	400735'	200 12 0 00 000000 		MOVE	T2,Z			; Save byte pointer
  1174	400736'	201 00 0 13 000001 		MOVEI	Z,1(T3)			; Num chars for ASCIZ string
  1175
  1176	400737'	265 15 0 00 400307*		JSP	QLINK,ASBLOK##		; Get block for ASCIZ string
  1177	400740'	001 13 0 00 000015 		 ERROR	11,13			; String too long
  1178	400741'	550 14 0 01 777777 		HRRZ	T4,-1(STACK)		; Point to block
  1179	400742'	201 00 0 13 000001 		MOVEI	Z,1(T3)			; Num chars for ASCIZ string
  1180	400743'	552 00 0 01 000000 		HRRZM	Z,0(STACK)		; Plug length
  1181	400744'	200 15 0 00 401000'		MOVE	Q1,[POINT 7,LHDR(T4)]	; Byte pointer for new string
  1182
  1183	400745'	134 16 0 00 000012 	CVTMOV:	ILDB	Q2,T2			; Move characters
  1184	400746'	136 16 0 00 000015 		IDPB	Q2,Q1			;  to new block
  1185	400747'	367 13 0 00 400745'		 SOJG	T3,CVTMOV
  1186
  1187	400750'	400 00 0 00 000000 		CLEAR	Z,
  1188	400751'	136 00 0 00 000015 		IDPB	Z,Q1			; Add zero byte
  1189	400752'	254 00 0 11 000001 		JRST	1(TLINK)		; Return
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 32
SNOEXT	MAC	18-Jan-67 10:47		PNTSTR--Point to ASCIZ string

  1190						SUBTTL	PNTSTR--Point to ASCIZ string
  1191					;		------  ---------------------
  1192					;
  1193					;    Tertiary routine, stable
  1194					;
  1195					;  This  routine sets the pointer in an argument list for passing a
  1196					;  STRING datatype.
  1197					;
  1198					;    Calling Sequence:
  1199					;    ----------------
  1200					;
  1201					;	Load P2 with pointer to EFBLOK containing argument list
  1202					;	Load S1 with the argument number
  1203					;	PUSH the descriptor pointing to ASCIZ SBLOK on stack
  1204					;	JSP	TLINK,PNTSTR
  1205					;	normal return
  1206					;
  1207					;    On  return, the entry in the argument list will point directly
  1208					;    to the ASCIZ string.
  1209					;
  1210
  1211	400753'	550 12 0 01 777777 	PNTSTR:	HRRZ	T2,-1(STACK)		; Pointer to SBLOK with ASCIZ
  1212										;  string
  1213	400754'	322 12 0 11 000001 		JUMPE	T2,1(TLINK)		; Return if null
  1214	400755'	271 12 0 00 000002 		ADDI	T2,LHDR			; Point directly to ASCIZ string
  1215
  1216	400756'	200 13 0 00 000005 		MOVE	T3,P2			; Point to EFBLOK
  1217	400757'	271 13 0 06 000006 		ADDI	T3,EFARGS-1(S1)		; Point to argument in list
  1218	400760'	542 12 0 13 000000 		HRRM	T2,(T3)			; Set pointer to string
  1219	400761'	254 00 0 11 000001 		JRST	1(TLINK)		; All done
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 33
SNOEXT	MAC	18-Jan-67 10:47		ADJSTK--Adjust the stack

  1220						SUBTTL	ADJSTK--Adjust the stack
  1221					;		------  ----------------
  1222					;
  1223					;    Quaternary routine, stable
  1224					;
  1225					;  This routine adjusts the stack by Z descriptors.
  1226					;    If Z > 0, POP Z descriptors off stack.
  1227					;    If Z < 0, PUSH -Z null string descriptors on stack.
  1228					;
  1229					;    Calling Sequence:
  1230					;    ----------------
  1231					;
  1232					;	Load Z with adjustment count
  1233					;	JSP	QLINK,ADJSTK
  1234					;	normal return
  1235					;
  1236
  1237	400762'	322 00 0 15 000000 	ADJSTK:	JUMPE	Z,0(QLINK)		; Return
  1238	400763'	321 00 0 00 400767'		JUMPL	Z,ADJ.2
  1239
  1240
  1241						 ;  POP stack
  1242
  1243	400764'	274 01 0 00 000000*	ADJ.1:	SUB	STACK,XWD22##
  1244	400765'	366 00 0 00 400764'		 SOJN	Z,ADJ.1
  1245	400766'	254 00 0 15 000000 		JRST	0(QLINK)		; Return
  1246
  1247
  1248						 ;  PUSH null string on stack
  1249
  1250	400767'	261 01 0 00 400124*	ADJ.2:	PUSH	STACK,NULLST
  1251	400770'	261 01 0 00 000000#		PUSH	STACK,NULLST+1
  1252	400771'	346 00 0 00 400767'		 AOJN	Z,ADJ.2
  1253	400772'	254 00 0 15 000000 		JRST	0(QLINK)		; Return
  1254
  1255						END

NO ERRORS DETECTED

HI-SEG. BREAK IS 401001
PROGRAM BREAK IS 000000
CPU TIME USED 08:30.795

44P CORE USED
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page S-1
SNOEXT	MAC	18-Jan-67 10:47		SYMBOL TABLE

A.RET		400327'		E12$47		000000	sin	LCOUNT		400617'	ext	SURF		000002		
ADJ.1		400764'		E12$48		000000	sin	LHDR		000002	sin	SYM.1		400543'		
ADJ.2		400767'		E12$49		000000	sin	LNAM.0		400505'		SYM.2		400550'		
ADJSTK		400762'		E12$50		000000	sin	LNKCOD		400360'		SYM.3		400574'		
ASBLOK		400737'	ext	E12$51		000000	sin	LNKDSP		400000'		SYSCT		400031'	ext	
BLENG		000000	sin	E12$52		000000	sin	LNKEND		400447'		SYSCTB		400701'	ext	
BTCODE		000000	sin	E12$53		000000	sin	LNKENT		400465'		SYSTR		400126'	ext	
CDTDSP		400021'		E12$6		000000	sin	LNKERR		400472'		T1		000011		
CLS		400175'	ext	E13$71		000000	sin	LNKHSG		400606'		T2		000012		
COD.1		400413'		E13$73		000000	sin	LNKJNK		400603'		T3		000013		
CODB.1		400647'		E15$		000000	sin	LNKNAM		400473'		T4		000014		
CODB.2		400651'		ECBPTR		400571'	ext	LNKSYM		400534'		TLINK		000011		
CODBLK		400644'		EF.FLG		400272'	ext	LOAD		400024'	int	TRADSP		400512'		
CPUTYP		400503'	ext	EF.RET		400330'		LOCNTR		400431'	ext	TRALEN		000022	spd	
CURSOR		400051'	ext	EFARGS		000007	sin	LSTCDD		000002	spd	TSAVE		400727'	ext	
CVTAR1		400240'		EFBLOK		000423	sin	LSTDTD		000003	spd	UNDEF$		400337'	ext	
CVTARG		400231'		EFCAL$		400773'	ext	LSTLKD		000014	spd	UNLD		400333'	int	
CVTINT		400021'	ext	EFCALL		400200'	int	LSYM		100000	spd	VBDT		000003	sin	
CVTMOV		400745'		EFFUNC		000005	sin	N.RET		000000*	spd	VFUNC		000003	sin	
CVTNAM		400333'	ext	EFRET		000004	sin	NM$CPU	770000	000000	spd	VNAME		000004	sin	
CVTPTR		400732'	ext	ERR	001000	000000		NM$TRA	007777	000000	spd	X.R50		400702'	ext	
CVTR.1		400700'		ERR.	003000	000000		NOTNUL		400132'		XWD22		400764'	ext	
CVTR50		400670'		EXTASC	426612	400000	spd	NULLST		400767'	ext	Y.CM	001000	000000	spd	
CVTRL		400022'	ext	EXTEDT		000302	spd	P1		000004		Y.DOLR		000200	spd	
CVTSIO		400135'	ext	EXTMIN		000000	spd	P2		000005		Y.LOWS		200000	spd	
CVTST0		400211'		EXTSIX	457064	000000	spd	PARS.1		400042'		Y.LP	010000	000000	spd	
CVTST1		400222'		EXTVER		000005	spd	PLINK		000004		Y.NUM	000040	000000	spd	
CVTSTR		400724'	ext	EXTWHO		000000	spd	PNTSTR		400753'		Y.PCNT		000100	spd	
CVTSTZ		400722'		FAAFL		000004	sin	PORTAL	254040	000000		Y.PER	000100	000000	spd	
DANYDT		000000	spd	FCODE		000003	sin	Q1		000015		Y.RP	004000	000000	spd	
DIDT		000100	spd	FEAFL		000001	sin	Q2		000016		Y.UPS		400000	spd	
DRDT		000200	spd	FFLAGS		000002	sin	Q3		000017		Z		000000		
DSDT		000740	spd	FILL.1		400102'		QLINK		000015		$FNCLV		400273'	ext	
DTDSP		400015'		FILL.2		400117'		R.RET		400325'		$RTNTP		400274'	ext	
DTNUM		000077	sin	FLAP		400132'	ext	RDT		002002	sin	%%JOBD	043100	000450	spd	
E1$111		000000	sin	FMT.WM	001000	000000	spd	READ		400634'	ext	%%MACT	000200	000025	spd	
E1$112		000000	sin	FNARGS		000002	sin	READ.0		400143'		%%SNOP	000500	000305	spd	
E1$113		000000	sin	GCFLD		000001	sin	READ.1		400161'		.JBFF		000121		
E11$13		000000	sin	GCOLG		400653'	ext	RETNL1		400177'	ext	
E12$13		000000	sin	GDEF		040000	spd	RETNUL		400356'	ext	
E12$32		000000	sin	GET.NL		400355'		S.FRET		400275'	ext	
E12$33		000000	sin	GETD.0		400632'		S.RET		400260'	ext	
E12$34		000000	sin	GETD.1		400642'		S.XLIB		400127'	ext	
E12$35		000000	sin	GETDAT		400616'		S1		000006		
E12$36		000000	sin	GETDT		400342'		S2		000007		
E12$37		000000	sin	GSURF		400661'	ext	S3		000010		
E12$38		000000	sin	GSYM		600000	spd	SDT		004003	sin	
E12$4		000000	sin	HSR		000003		SLINK		000006		
E12$40		000000	sin	I.RET		400323'		ST.R1		400302'		
E12$41		000000	sin	IDT		002001	sin	ST.RET		400300'		
E12$42		000000	sin	IFBLOK		400340'	ext	STACK		000001		
E12$43		000000	sin	IGNOP		400534'	ext	STCF		000003	sin	
E12$44		000000	sin	IGNOS		000000	ext	STINIT		400027'	ext	
E12$45		000000	sin	INSTAL		400342'	ext	STPTR		400050'	ext	
E12$46		000000	sin	JKBLOK		000417	sin	STRM		400052'	ext	

SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Symbol cross reference

A.RET	   164	   570#
ADJ.1	  1243#	  1244
ADJ.2	  1238	  1250#	  1252
ADJSTK	   428	  1237#
ASBLOK	   534	  1176
BLENG	   266	  1058	  1079
BTCODE	   266	  1079
CDTDSP	   175#	   179	   470
CLS	   389
COD.1	   702#	   726	   733
CODB.1	  1054	  1058#
CODB.2	  1056	  1061#
CODBLK	   693	   762	  1054#
CPUTYP	   844
CURSOR	   234	   247
CVTAR1	   469	   476#
CVTARG	   465#	   479
CVTINT	   175
CVTMOV	  1183#	  1185
CVTNAM	   587
CVTPTR	  1102	  1170
CVTR.1	  1111#	  1134
CVTR50	   793	   903	  1101#
CVTRL	   176
CVTSIO	   342
CVTST0	   445#	   456
CVTST1	   447	   454#
CVTSTR	  1163
CVTSTZ	   450	  1160#
DANYDT	   124#	   164	   308	   644
DIDT	   125#	   165
DRDT	   126#	   166
DSDT	   127#	   167
DTDSP	   164#	   169	   637	   638
DTNUM	   466	   633
E1$111	   214#
E1$112	   451#	   471#
E1$113	   588#
E11$13	   535#	  1177#
E12$13	   343#
E12$32	   374#	   379#	   789#	   813#	   988#
E12$33	   933#
E12$34	   765#
E12$35	   769#
E12$36	   681#
E12$37	   683#
E12$38	   686#	   993#
E12$4	   354#	   364#	   670#	   676#	   705#	   730#	   912#	   918#	   924#	  1014#	  1020#
E12$40	   840#
E12$41	   845#
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Symbol cross reference

E12$42	   850#
E12$43	   860#
E12$44	   861#
E12$45	   862#
E12$46	   863#
E12$47	   864#
E12$48	   866#
E12$49	   870#
E12$50	   872#
E12$51	   873#
E12$52	   874#
E12$53	   876#
E12$6	   355#	   365#	   671#	   677#	   706#	   731#	   913#	   919#	   925#	  1015#	  1021#
E13$71	   218#
E13$73	   221#	   237#
E15$	   344#	   755#	   758#	   838#	   990#	   996#	  1104#	  1172#
ECBPTR	   349	   692	   694	   708	   761	   943
EF.FLG	   494	   512
EF.RET	   559	   565	   572#
EFARGS	   259	   282	   296	   311	   437	   463	   493	  1217
EFBLOK	   265
EFCAL$	   277
EFCALL	   424#
EFFUNC	   279	   496	   767	   945
EFRET	   288	   519
EXTASC	    30#
EXTEDT	    23#
EXTMIN	    22#
EXTSIX	    29#
EXTVER	    21#
EXTWHO	    24#
FAAFL	   273
FCODE	   278	   424
FEAFL	   273
FFLAGS	   275
FILL.1	   300#	   312
FILL.2	   300	   318#
FLAP	   209	   210	   331	   336	   337	   339	   340
FMT.WM	   346
FNARGS	   275	   425	   460
GCFLD	   267	  1080
GCOLG	   261	  1065
GDEF	   131#	   905
GET.NL	   629	   644#
GETD.0	  1010	  1017#
GETD.1	  1006	  1029#
GETDAT	   754	   757	   835	   837	   970	   994	  1004#
GETDT	   287	   301	   627#
GSURF	   262	   263	  1055	  1067	  1068	  1074
GSYM	   132#	   930
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Symbol cross reference

HSR	   487	   507
I.RET	   165	   558#
IDT	   558
IFBLOK	   322	   592
IGNOP	   208	   222	   298	   306	   318	   391	   487	   488	   489	   507	   508	   509	   899
IGNOS	   794	   906	   937
INSTAL	   219	   627
JKBLOK	  1078
LCOUNT	   369	   370	   688	   721	   948	   991	  1004	  1005	  1029
LHDR	   543	   696	   707	   944	  1061	  1181	  1214
LNAM.0	   843	   848#
LNKCOD	   142	   667#
LNKDSP	   141#	   155	   378
LNKEND	   146	   754#
LNKENT	   789#
LNKERR	   141	   148	   149	   150	   151	   152	   813#
LNKHSG	   144	   988#
LNKJNK	   145	   153	   970#
LNKNAM	   147	   835#
LNKSYM	   143	   899#
LOAD	   208#
LOCNTR	   697	   718	   719
LSTCDD	   179#	   468
LSTDTD	   169#	   634
LSTLKD	   155#	   373
LSYM	   133#	   931
N.RET	   553#	   645
NM$CPU	   831#	   842
NM$TRA	   832#	   848
NOTNUL	   333	   339#
NULLST	   332	  1250	  1251
P1	   231	   239	   257	   274	   281	   297	   300	   303	   304	   357	   372	   373	   378	   485
	   511
P2	   262	   266	   267	   275	   277	   278	   279	   282	   288	   296	   302	   321	   424	   425
	   437	   460	   463	   486	   493	   496	   510	   519	   767	   945	  1216
PARS.1	   233#	   239
PLINK	   208	   391	   517	   548	   574
PNTSTR	   177	  1211#
Q1	   302	   303	   311	   710	   713	   951	   952	  1067	  1070	  1072	  1073	  1075	  1112	  1114
	  1117	  1120	  1123	  1126	  1129	  1181	  1184	  1188
Q2	   238	   304	   305	   306	   307	   309	   310	   318	   320	   589	   590	   707	   708	   710
	   715	   953	  1074	  1075	  1183	  1184
Q3	   321	   591
QLINK	   261	   322	   389	   428	   534	   592	  1065	  1102	  1170	  1176	  1237	  1245	  1253
R.RET	   166	   564#
RDT	   564
READ	   353	   363	   669	   675	   704	   729	   911	   917	   923	  1013	  1019
READ.0	   351#	   366	   380
READ.1	   359	   369#
RETNL1	   392
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Symbol cross reference

RETNUL	   531	   553	   594
S.FRET	   500	   516
S.RET	   499
S.XLIB	   335
S1	   273	   274	   275	   277	   278	   281	   282	   334	   336	   337	   425	   426	   435	   456
	   460	   461	   479	   499	   500	   501	   502	   503	   525	   545	   570	   573	  1217
S2	   215	   307	   308	   310	   311	   335	   435	   436	   437	   445	   454	   461	   462	   463
	   465	   476	   477	   478	   558	   564	   570	   572	   630	   631	   632	   635	   637	   644
	   672	   682	   684	   712	   714	   716	   732	   756	   759	   764	   791	   792	   842	   843
	   844	   848	   849	   851	   899	   900	   901	   920	   930	   931	   937
S3	   216	   232	   288	   438	   448	   449	   452	   453	   455	   525	   527	   638	   645	   678
	   680	   685	   696	   697	   699	   720	   721	   724	   907	   947	   948	   951
SDT	   446
SLINK	   287	   301	   342	   378	   639	   646	   722	   771	   836	   852	   949	   971	   997
ST.R1	   527#	   529
ST.RET	   167	   525#
STACK	   209	   210	   339	   340	   347	   351	   352	   361	   362	   385	   438	   448	   449	   452
	   453	   476	   477	   485	   486	   488	   492	   508	   510	   511	   536	   542	   572	   573
	   589	   667	   668	   673	   674	   702	   703	   727	   728	   791	   792	   900	   901	   909
	   910	   915	   916	   921	   922	  1011	  1012	  1017	  1018	  1101	  1167	  1178	  1180	  1211
	  1243	  1250	  1251
STCF	   386
STINIT	   212
STPTR	   233	   246
STRM	   217	   235	   248
SURF	   489	   490	   509
SYM.1	   909#	   954
SYM.2	   915#	   953
SYM.3	   938	   947#
SYSCT	   215
SYSCTB	  1112
SYSTR	   334
T1	   445	   446	   465	   466	   467	   468	   470	   527	   528	   532	   536	   538	   540	   544
	   547	   724	   725	   943	   944
T2	   351	   352	   361	   362	   385	   386	   387	   539	   542	   543	   544	   545	   547	   632
	   633	   634	   635	   637	   638	   667	   668	   673	   674	   692	   694	   696	   702	   703
	   726	   727	   728	   761	   767	   768	   909	   910	   915	   916	   921	   922	  1004	  1005
	  1007	  1011	  1012	  1017	  1018	  1054	  1055	  1058	  1077	  1079	  1080	  1101	  1107	  1108
	  1134	  1173	  1183	  1211	  1213	  1214	  1218
T3	  1010	  1058	  1059	  1111	  1112	  1115	  1118	  1121	  1124	  1127	  1130	  1133	  1167	  1168
	  1174	  1179	  1185	  1216	  1217	  1218
T4	   386	   387	   388	  1106	  1111	  1178	  1181
TLINK	   212	   217	   219	   235	   248	   353	   363	   450	   470	   587	   627	   669	   675	   693
	   704	   729	   754	   757	   762	   793	   835	   837	   903	   911	   917	   923	   970	   994
	  1008	  1009	  1013	  1019	  1022	  1023	  1024	  1030	  1062	  1081	  1136	  1160	  1161	  1163
	  1165	  1166	  1168	  1189	  1213	  1219
TRADSP	   851	   859#	   877
TRALEN	   849	   877#
TSAVE	  1008	  1009	  1022	  1023	  1160	  1161	  1164	  1165	  1166
UNDEF$	   591
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Symbol cross reference

UNLD	   587#
VBDT	   631
VFUNC	   320	   590
VNAME	   791	   792	   900	   901
X.R50	  1114
XWD22	  1243
Y.CM	   232
Y.DOLR	  1129
Y.LOWS	  1120
Y.LP	   216
Y.NUM	  1123
Y.PCNT	  1129
Y.PER	  1126
Y.RP	   232
Y.UPS	  1117
Z	   222	   257	   258	   259	   263	   265	   266	   296	   297	   298	   331	   332	   341	   346
	   347	   357	   358	   359	   369	   426	   427	   502	   503	   515	   516	   526	   529	   531
	   532	   630	   672	   678	   688	   690	   713	   715	   718	   732	   756	   759	   794	   839
	   842	   848	   905	   906	   920	   944	   945	   991	   992	  1059	  1061	  1062	  1068	  1077
	  1078	  1079	  1106	  1109	  1132	  1133	  1173	  1174	  1179	  1180	  1187	  1188	  1237	  1238
	  1244	  1252
$FNCLV	   495	   513
$RTNTP	   501	   515
.JBFF	   490
SNOEXT - External Functions  %5(302)	MACRO %53B(1156)-1 21:49 14-Mar-88 Page 1
SNOEXT	MAC	18-Jan-67 10:47		D.R. HANSON/DRH/RCM/VB		16-JUN-76


Macro/Opdef cross reference

DMOVE	   351	   361	   667	   673	   702	   727	   909	   915	   921	  1011	  1017	  1022	  1165
DMOVEM	   336	   502	  1008	  1160
ERR	   218	   221	   237	   343	   344	   354	   355	   364	   365	   374	   379	   535	   670	   671
	   676	   677	   681	   683	   686	   705	   706	   730	   731	   755	   758	   765	   769	   789
	   813	   838	   840	   845	   850	   860	   861	   862	   863	   864	   866	   870	   872	   873
	   874	   876	   912	   913	   918	   919	   924	   925	   933	   988	   990	   993	   996	  1014
	  1015	  1020	  1021	  1104	  1172	  1177
ERR.	   214	   451	   471	   588
ERROR	   218	   221	   237	   343	   344	   354	   355	   364	   365	   374	   379	   535	   670	   671
	   676	   677	   681	   683	   686	   705	   706	   730	   731	   755	   758	   765	   769	   789
	   813	   838	   840	   845	   850	   860	   861	   862	   863	   864	   866	   870	   872	   873
	   874	   876	   912	   913	   918	   919	   924	   925	   933	   988	   990	   993	   996	  1014
	  1015	  1020	  1021	  1104	  1172	  1177
ERROR.	   214	   451	   471	   588
EXTPTX	    41
EXTTTL	    40
GET	   111#	   351	   361	   667	   673	   702	   727	   909	   915	   921	  1011	  1017
MOVX	   216	   232	   346
POINTR	   842	   848
PORTAL	   497
POS	   842	   848
SHOW.	    36	    37	    38
TITLE.	    28
TXNE	  1117	  1120	  1123	  1126	  1129
WID	   842	   848
$POP	   510
$PUSH	   485 j@	U