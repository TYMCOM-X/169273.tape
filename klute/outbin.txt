-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Finish Packet
PROCEDURE ID:      BI.finish.packet
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             none

OUTPUT:            none

GLOBAL:            outgoing.packet

-------------------------------------------------------------------------------

CALLED BY:         Pass Completed Packet  ! Valid Packet Layer

CALLS:             Send Reset             ! Transport Layer
                   Activate Timer
                   Get ACK
                   Assign Header
                   Put Packet With Header

-------------------------------------------------------------------------------

DESCRIPTION:

    This control procedure receives an outgoing valid packet from the Valid
Packet Layer, has the packet's header assigned to it, and then passes it on
for final processing (checksumming, etc.).

-------------------------------------------------------------------------------

PSEUDOCODE:

while looking.for.first.ACK do
   execute TR.send.reset
   set timeout.type to waiting.for.ACK
   execute BI.activate.timer using number.of.seconds
   execute BI.get.ACK
   if packet returned is an ACK then
      set looking.for.first.ACK to false
      set bottom.of.PID.range from first PID of ACK
      set top.of.PID.range from second PID of ACK
      set current.outgoing.PID to top.of.PID.range
      set greatest.outgoing.PID to bottom.of.PID.range

Execute BI.assign.header                     ! using outgoing.packet

Execute BI.put.packet.with.header            ! using outgoing.packet

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Assign Header
PROCEDURE ID:      BI.assign.header
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             none

OUTPUT:            none

GLOBAL:            outgoing.packet
                   current.outgoing.PID
                   room.in.packet

-------------------------------------------------------------------------------

CALLED BY:         Finish Packet

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    The Packet Type Character (PTC) and current Packet Identifier (PID) are
inserted as the first two bytes of the packet.

-------------------------------------------------------------------------------

PSEUDOCODE:

Insert data/command PTC as leftmost byte of outgoing.packet !'167 (w)
Increment current.outgoing.PID
If current.outgoing.PID > top.of.PID.range then             !'172
    set current.outgoing.PID = bottom.of.PID.range          !'040
Insert current.outgoing.PID as second leftmost byte of outgoing.packet
Decrement room.in.packet by 2

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Put Packet With Header
PROCEDURE ID:      BI.put.pkt.with.header
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             checksum

OUTPUT:            outgoing.packet.size

GLOBAL:            outgoing.packet
                   max.out.pkt.size
                   room.in.packet

-------------------------------------------------------------------------------

CALLED BY:         Finish Packet

CALLS:             Calculate Checksum
                   Send Packet

-------------------------------------------------------------------------------

DESCRIPTION:

    This procedure controls the appending of the packet's checksum bytes
and the sending of the packet.

-------------------------------------------------------------------------------

PSEUDOCODE:

Outgoing.packet.size = max.out.pkt.size - room.in.packet
Packet.to.chksum = outgoing.packet
Execute BI.calculate.checksum using packet.to.chksum
                                    outgoing.packet.size
                              returning checksum
Append checksum to end of outgoing.packet
Outgoing.packet.size = outgoing.packet.size + 2
Execute BI.send.packet using outgoing.packet.size   ! and outgoing.packet

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Calculate Checksum
PROCEDURE ID:      BI.calculate.checksum
PROCEDURE TYPE:    integer

-------------------------------------------------------------------------------

INPUT:             PARAMETERS:    packet.to.chksum (reference)
                                  outgoing.packet.size (value)

OUTPUT:            integer

-------------------------------------------------------------------------------

CALLED BY:         Put Packet With Header
                   Send Reset
                   Send ACK/NAK
                   Send RFR
                   Validate Checksum

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    Input to this procedure may be any type of packet with a header (data/cmd,
ACK, NAK, etc).  The packet's checksum is calculated and returned.

-------------------------------------------------------------------------------

PSEUDOCODE:

Calculate checksum using packet.to.chksum as follows:

    sum = 0
    for i = 1 to outgoing.packet.size
         sum = sum leftshifted 1 bit
         sum = sum + value(byte[i] of packet.to.chksum)
         while sum >= 2**14 do
              sum = sum - 2**14 + 1
    BI.calculate.checksum = sum

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Send Packet
PROCEDURE ID:      BI.send.packet
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             PARAMETERS:      outgoing.packet.size (value)

OUTPUT:            outgoing.packet.size

GLOBAL:            outgoing.packet
                   incoming.packet
                   timeout.type
                   number.of.seconds
                   current.outgoing.packet
                   last.outgoing.packet
                   current.outgoing.PID
                   greatest.outgoing.PID
                   in.closeup.mode
                   looking.for.first.ACK

-------------------------------------------------------------------------------

CALLED BY:         Put Packet With Header

CALLS:             Put Packet in Outgoing Window
                   Encode and Send Bytes (Transport Layer)
                   Get ACK
                   Activate Timer

-------------------------------------------------------------------------------

DESCRIPTION:

    Send packet controls sending packets to the network and receiving
acknowledgments from the micro upon receipt of the sent packets.
Packets are held in the outgoing window buffer until an acknowledgment
is received on the previous packet sent.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

PROCEDURE NAME:    Send Packet
PROCEDURE ID:      BI.send.packet

-------------------------------------------------------------------------------

PSEUDOCODE:

Execute BI.put.pkt.in.out.window                 ! using outgoing.packet
Set packet.sent to false
Do until packet.sent
    if current.outgoing.PID <= greatest.outgoing.PID then
         execute TR.encode.and.send.bytes using current.outgoing.packet
                                                outgoing.packet.size
         set timeout.type = waiting.for.ACK
         execute BI.activate.timer               ! using number.of.seconds
         set packet.sent to true
         if in.closeup.mode then
              set timeout.type = shut.off
              execute BI.activate.timer          ! using 0
    else
         execute BI.get.ACK                      ! returning incoming.packet
         if incoming.packet is an ACK then       ! is it the right ACK?
            if ((current.outgoing.PID = bottom.of.PID.range) AND
               (PID1 on ACK = top.of.PID.range)) OR
               (current.outgoing.PID = PID1 on ACK + 1) then
              set greatest.outgoing.PID to PID2 on incoming.packet
         else (NAK)
              execute TR.encode.and.send.bytes using last.outgoing.packet
                                                     outgoing.packet.size

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Put Packet in Outgoing Window
PROCEDURE ID:      BI.put.pkt.in.out.window
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             none

OUTPUT:            none

GLOBAL:            outgoing.packet
                   current.outgoing.packet
                   last.outgoing.packet

-------------------------------------------------------------------------------

CALLED BY:         Send Packet

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    An outgoing packet is placed in the outgoing window buffer, where it
waits until Send Packet has received an ACK on the previous packet and
is free to send to the micro.

-------------------------------------------------------------------------------

PSEUDOCODE:

set last.outgoing.packet to current.outgoing.packet      !save last packet sent
set current.outgoing.packet to outgoing.packet

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Get ACK
PROCEDURE ID:      BI.get.ACK
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             PTC.type

OUTPUT:            PTC.char

GLOBAL:            incoming.packet.
                   incoming.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Send Packet

CALLS:             Get Good Checksummed Packet
                   Determine PTC
                   Put Micro Abort Message

-------------------------------------------------------------------------------

DESCRIPTION:

    An expected ACK is read up from the Transport Layer. If it is actually
data/command (a message implying the micro is aborting) an error condition
occurs: the packet must be placed in the incoming window buffer and the
Application Layer must be forced to process it.

-------------------------------------------------------------------------------

PSEUDOCODE:

Execute BI.get.good.chksummed.pkt           ! returning incoming.packet
                                            ! incoming.packet.size
PTC.char = first byte of incoming.packet
Execute BI.determine.PTC using PTC.char
                         returning PTC.type
If PTC.type is d/c then                         !data/cmd (abort msg from micro)
    execute BI.put.micro.abort.msg           ! using incoming.packet
                                             ! incoming.packet.size

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Put Micro Abort Message
PROCEDURE ID:      BI.put.micro.abort.msg
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             none

OUTPUT:            none

GLOBAL:            incoming.packet
                   incoming.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Get ACK

CALLS:             Put Packet in Incoming Window
                   Get Unexpected Response       ! System Utility

-------------------------------------------------------------------------------

DESCRIPTION:

    This procedure controls aborting the transfer in the event that the micro
sends a message (command) during transfer TO the micro.  The command is put in
the incoming window buffer and the Application Layer is forced to handle the
command through a Valid Packet Layer procedure (this follows the protocol of
passing through adjacent layers).

-------------------------------------------------------------------------------

PSEUDOCODE:

Execute BI.put.pkt.in.inc.window                ! using incoming.packet
                                                ! incoming.packet.size
Execute SU.get.unexpected.response

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             BINARY
PROCEDURE NAME:    Send RFR
PROCEDURE ID:      BI.send.RFR
PROCEDURE TYPE:    untyped
-------------------------------------------------------------------------------

INPUT:             checksum

OUTPUT:            RFR.packet
                   outgoing.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Get Good Checksummed Packet
                   Check for Timeout

CALLS:             Calculate Checksum
                   Encode and Send Bytes (Transport Layer)

-------------------------------------------------------------------------------

DESCRIPTION:

    An RFR packet is created and sent to the micro when a timeout occurs
while waiting for an acknowledgement from the micro.  The packet contains
only an RFR packet type character and a checksum.

-------------------------------------------------------------------------------

PSEUDOCODE:

Assign RFR PTC to RFR.packet
Outgoing.packet.size = 1
Execute BI.calculate.checksum using RFR.packet
                                    outgoing.packet.size
                              returning checksum
Append checksum to RFR.packet
Outgoing.packet.size = 3
Execute TR.encode.and.send.bytes using RFR.packet
                                       outgoing.packet.size

-------------------------------------------------------------------------------

    