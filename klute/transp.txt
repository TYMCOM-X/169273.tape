------------------------------------------------------------------------

LAYER:            TRANSPORT

------------------------------------------------------------------------

COMPONENTS:
                  Encode and Send Bytes
                  Hex Encode and Send
                  Send Byte
                  Get Decoded Packet
                  Read Byte
                  Decode Bytes
                  Send Reset

------------------------------------------------------------------------

DESCRIPTION:

   This layer is responsible for sending bytes out on the communication
port and receiving bytes from the communication port.  The transport
layer knows what the leadin character, trailer character, and maximum
packet size are.  This layer also knows which bytes need to be encoded
before they are sent, and how to decode bytes received encoded.

   This layer also knows when the micro needs a "wake-up" call to begin
protocol mode communication and sends the proper sequence to the micro
so that his buffers are initialized.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Encode and Send Bytes
PROCEDURE ID:     TR.encode.and.send
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: chksummed.packet  (reference)
                              number.of.bytes   (value)

OUTPUT:           bytes on communications/command port
                  byte.to.encode

------------------------------------------------------------------------

CALLED BY:        Send Packet                       ! Binary Layer
                  Send ACK                          ! Binary Layer
                  Respond To Flow Control Packet    ! Binary Layer
                  Send RFR                          ! Binary Layer
                  Send Reset

CALLS:            Hex Encode and Send
                  Send Byte

------------------------------------------------------------------------

DESCRIPTION:

   This procedure sends the leadin byte (ESCape), looks at each
byte to be sent, does encoding when necessary, and sends the bytes
out the command port to the micro.  When there are no more bytes to
send, the end.of.packet byte is sent (CR).

------------------------------------------------------------------------

------------------------------------------------------------------------

PROCEDURE NAME:   Encode and Send Bytes
PROCEDURE ID:     TR.encode.and.send

------------------------------------------------------------------------

PSEUDOCODE:

init in.encode.mode to false
execute TR.send.byte using lead.in.character
read one byte from packet

Do until no more bytes in packet    ! number.of.bytes
if byte is not in transmittable set then  ! if not xlatetb[byte.value]
   if not in.encode.mode then
      execute TR.send.byte using shift.to.hex byte
      set in.encode.mode to true
   execute TR.hex.encode.and.send using byte
else  { byte is transmittable without encoding }
   if in.encode.mode then
      if not end.of.packet then
      get next packet byte
         if next packet byte is not in transmittable set then
            execute TR.hex.encode.and.send using current byte
            execute TR.hex.encode.and.send using next packet byte
         else
            execute TR.send.byte using shift.out.of.hex byte
            set in.encode.mode to false
            execute TR.send.byte using current byte
            execute TR.send.byte using next byte
      else { hit end.of.packet on read of next byte }
         execute TR.send.byte using shift.out.of.hex byte
         execute TR.send.byte using current byte
   else  { not in.encode.mode }
      execute TR.send.byte using byte
   if not end.of.packet then
      read next packet byte

execute TR.send.byte using end.of.packet byte

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Hex Encode and Send
PROCEDURE ID:     TR.hex.encode.and.send
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: input.byte

OUTPUT:           high.order
                  low.order

------------------------------------------------------------------------

CALLED BY:        Encode and Send Bytes

CALLS:            Send Byte

------------------------------------------------------------------------

DESCRIPTION:

   This procedure splits the input byte into two hex digits.  The high
order byte is sent out the command port first.

------------------------------------------------------------------------

PSEUDOCODE:

shift right 4 bits of input.byte into low.order
shift right 4 bits of input.byte into bit bucket
shift right 4 bits of input.byte into high.order
! convert to hex digits
do with low.order, high.order as byte.value
   case byte.value of
      [0] set byte.value to '060'   ! hex '0'
      [1] set byte.value to '061    ! hex '1'
      [2] set byte.value to '062    ! hex '2'
      [3] set byte.value to '063    ! hex '3'
      [4] set byte.value to '064    ! hex '4'
      [5] set byte.value to '065    ! hex '5'
      [6] set byte.value to '066    ! hex '6'
      [7] set byte.value to '067    ! hex '7'
      [8] set byte.value to '070    ! hex '8'
      [9] set byte.value to '071    ! hex '9'
      [10] set byte.value to '101    ! hex 'A'
      [11] set byte.value to '102    ! hex 'B'
      [12] set byte.value to '103    ! hex 'C'
      [13] set byte.value to '104    ! hex 'D'
      [14] set byte.value to '105    ! hex 'E'
      [15] set byte.value to '106    ! hex 'F'
execute TR.send.byte using high.order
execute TR.send.byte using low.order

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Send Byte
PROCEDURE ID:     TR.send.byte
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: input.byte

OUTPUT:           byte on communication/command port

------------------------------------------------------------------------

CALLED BY:        Encode and Send
                  Hex Encode and Send

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   This is a start!code routine which sends an 8-bit byte out the
command port.

------------------------------------------------------------------------

PSEUDOCODE:

move the character to be sent into register 1
set up the 8-bit mask
send the 8-bits

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Get Decoded Packet
PROCEDURE ID:     TR.get.decoded.packet
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            incoming.bytes
                  decoded.bytes

GLOBALS: max.incoming.packet.size
         incoming.packet
         incoming.packet.size

OUTPUT:           incoming.bytes
                  saved.byte


------------------------------------------------------------------------

CALLED BY:        Get Good Chksummed Packet    ! Binary Layer

CALLS:            Read Byte
                  Decode Bytes
                  Check For Timeout

------------------------------------------------------------------------

DESCRIPTION:

   This procedure starts collecting bytes coming in on the command port
when it sees a leadin character (@).  When the shift.to.hex character
is seen, it decodes bytes in pairs until the shift.out.of.hex character
is seen.  The procedure checks to be certain the maximum packet size
is not exceeded.  Loss of a trailer character (CR) can cause maximum
packet size exceeded.

Note:  Bytes are returned in Register 1 as integers.  They must then
be moved into the incoming.packet (integer array) using an 8-bit byte
pointer.

------------------------------------------------------------------------

------------------------------------------------------------------------

PROCEDURE NAME:   Get Decoded Packet
PROCEDURE ID:     TR.get.decoded.packet

------------------------------------------------------------------------

PSEUDOCODE:

init searching.for.lead.in.character to true
init in.decode.mode to false
init first.char to true
init End.of.Packet to false

while not End.of.Packet do
   execute TR.read.byte returning incoming.byte as integer value
   if incoming.byte = -1 then    ! no character read
      execute BI.check.for.timeout
   else
   If searching.for.lead.in.character then
      if incoming.byte = lead.in.character then
         initialize incoming.packet.size to 0
         clear incoming.packet
         set searching.for.lead.in.character to false
         discard lead.in.character
      else
         discard byte
   Else  { not searching.for.lead.in.char }
      increment incoming.packet.size
      if incoming.packet.size > maximum.packet.size then
         set searching.for.lead.in.character to true
         set in.decode.mode to false
         discard byte
      else  { within max.packet.size }
      { assume end.of.packet char can appear while in.decode.mode }
         if byte is end.of.packet character then
            discard end.of.packet character
            set end.of.packet to true
            decrement incoming.packet.size
         else
            if in.decode.mode then
               if first.char then
                  if incoming.byte is not shift.out.of.hex char then
                     save byte
                     set first.char to false
                  else
                     set in.decode.mode to false
                     discard shift.out.of.hex char
                     decrement incoming.packet.size
               else  { second char }
                  execute TR.decode.bytes using saved byte,incoming.byte
                                          returning integer value
                  stuff rightmost 8 bits of integer into incoming.packet
                  decrement incoming.packet.size
                  set first.char to true
            else   { not decoding }
               if shift.to.hex char then
                  set in.decode.mode, first.char to true
                  discard shift.to.hex
                  decrement incoming.packet.size
               else  { normal, non.encoded byte }
                  stuff byte into incoming.packet

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Read Byte
PROCEDURE ID:     TR.read.byte
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            incoming.byte

OUTPUT:           integer value

------------------------------------------------------------------------

CALLED BY:        Get Decoded Packet

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   This is a start!code routine which reads the command port and
returns either the byte that was waiting to be read or, if there was
no byte waiting, -1.

------------------------------------------------------------------------

PSEUDOCODE:

input character from port# -1   ! command port
   and skip if a character was actually read
put the character into Register 1   ! makes it the return value
if there was no character to put into Register 1
   set Register 1 to -1

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Decode Bytes
PROCEDURE ID:     TR.decode.bytes
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            PARAMETERS: high.order.byte   (value)
                              low.order.byte    (value)

OUTPUT:           integer value

------------------------------------------------------------------------

CALLED BY:        Get Decoded Packet

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   This procedure is handed two integers which need to be decoded into
one byte.  This is done by shifting the high.order.byte left 4 positions
and then performing a logical OR with the low.order.byte.

------------------------------------------------------------------------

PSEUDOCODE:

do with high.order.byte, then with low.order.byte as byte.value
   case byte.value of
      ['060] set byte.value to 0
      ['061] set byte.value to 1
      ['062] set byte.value to 2
      ['063] set byte.value to 3
      ['064] set byte.value to 4
      ['065] set byte.value to 5
      ['066] set byte.value to 6
      ['067] set byte.value to 7
      ['070] set byte.value to 8
      ['071] set byte.value to 9
      ['101] set byte.value to 10
      ['102] set byte.value to 11
      ['103] set byte.value to 12
      ['104] set byte.value to 13
      ['105] set byte.value to 14
      ['106] set byte.value to 15
   end case
logical shift left the high.order.byte 4 positions ! high := high LSH 4
logical OR the high.order.byte with the low.order.byte ! high := high LOR low
set TR.decode.bytes to the high.order.byte

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Send Reset
PROCEDURE ID:     TR.send.reset
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            chksummed.initial.ACK

OUTPUT:           ESCape
                  u
                  initial.ACK

------------------------------------------------------------------------

CALLED BY:        Send Packet    ! Binary Layer

CALLS:            Calculate Chksum  ! Binary Layer
                  Encode and Send

------------------------------------------------------------------------

DESCRIPTION:

   This procedure sends the sequence of characters to the micro which
instruct it to wake up and expect protocol traffic.  The micro responds
to this sequence by sending an ACK to the requestor.

------------------------------------------------------------------------

PSEUDOCODE:

send ESCape
send lower case u    ! wake up

create initial.ACK   ! x hex 20 hex 20
execute BI.calculate.chksum using initial.ACK, 3
                            returning integer value
append rightmost 16 bits of integer onto initial.ACK forming
                                     chksummed.initial.ACK
execute TR.encode.and.send using chksummed.initial.ACK, 5

------------------------------------------------------------------------

  