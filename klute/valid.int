
-------------------------------------------------------------------------------

LAYER:             VALID PACKET

-------------------------------------------------------------------------------

COMPONENTS:        Create Packet
                      Create Data Class Byte
                      Create Data Header
                      Add Buffer to Packet
                      Pass Completed Packet
                   Get Incoming Application Record
                      Fill Data Buffer
                      Build Application Command

-------------------------------------------------------------------------------

DESCRIPTION:

    The Valid Packet Layer is responsible for forming a packet to be sent to
the micro and for decomposing a packet received from the micro.  In an
outgoing transfer (to micro) commands or data and appropriate parameters
received from the Application Layer are placed in the outgoing packet.
When the packet is full it is passed off to the Binary Layer for further
processing.  In an incoming transfer (to host) a packet received from the
Binary Layer is broken down into commands or data and application parameters
which are then sent on to the Application Layer for processing.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Create a Packet
PROCEDURE ID:      VA.create.pkt
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             PARAMETERS:     application.record (reference)
                                   application.parameters: (value)
                                      record.type
                                      link.type
                                      who.sent
                                      importance
                                      cmd.type
                                   appl.rec.size (reference)
                                   EOF.seen(value)
                                   EOR.seen(value)

OUTPUT:            application.record
                   appl.record.ptr
                   application.parameters
                   DH.type
                   bytes.to.add
                   appl.rec.size

GLOBALS:           outgoing.packet
                   max.outgoing.packet.size
                   previous.application.parameters
                   room.in.packet

-------------------------------------------------------------------------------

CALLED BY:         Send Startup Cmds             !Application Layer
                   Transfer Out                  !Application Layer
                   Close Up                      !Application Layer
                   Abort Transfer                !System Utility

CALLS:             Create Data Class Byte
                   Create Data Header
                   Add Buffer to Packet
                   Pass Completed Packet

-------------------------------------------------------------------------------

DESCRIPTION:

    This procedure accepts commands, data and parameters from the Application
Layer and inserts them into an outgoing packet.  When a packet is full it is
handed off to the Binary Layer. EOF.seen is set on the last application.record
passed to this layer.  If what is being passed in is a command, the record.type
is command and the application.record contains the actual command number
(TYMFTP Appendix A-4), otherwise, the record.type is data and the application.
record contains file data.  If EOF.seen is true, force the packet to be sent.

   (Note that data compression will not be handled in this release.)

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Create Data Class Byte
PROCEDURE ID:      VA.create.DCB
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             application.parameters

OUTPUT:            none

GLOBAL:            outgoing.packet
                   room.in.packet
                   outgoing.packet.ptr

-------------------------------------------------------------------------------

CALLED BY:         Create a Packet

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    A data class byte is constructed from the application parameters the
procedure receives.  Using a 1-bit byte pointer, bits are placed in the
data class byte (a 36-bit word).  Using an 8-bit byte pointer, the rightmost
8-bits of the data class byte are inserted into either an empty packet or a
partial packet as the next byte.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Create Data Header
PROCEDURE ID:      VA.create.DH
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             DH.type
                   appl.rec.size

OUTPUT:            bytes.to add

GLOBAL:            outgoing.packet
                   room.in.packet
                   outgoing.packet.ptr

-------------------------------------------------------------------------------

CALLED BY:         Create a Packet

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    Depending upon the DH.type received an EOR, EOF, EOD or data/command byte-
count data header is created and inserted as the next byte in the packet.
The maximum value of a data/command data header is 31 because only the last
5 bits of the byte represent the number of bytes of data or command to follow.
(31 is the largest number that can be represented in 5 bits.)  So, for example,
if a record of data is 51 bytes long, a DH whose rightmost 5 bits = 31 would
be inserted, followed by 31 bytes of data, followed by a DH representing the
remaining 20 bytes, followed by the 20 bytes of data.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Add Buffer to Packet
PROCEDURE ID:      VA.add.buf.to.pkt
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             application.record
                   appl.record.ptr
                   bytes.to.add

OUTPUT:            application.record
                   appl.record.ptr

GLOBAL:            outgoing.packet
                   outgoing.packet.ptr

-------------------------------------------------------------------------------

CALLED BY:         Create a Packet

CALLS:             none

-------------------------------------------------------------------------------

DESCRIPTION:

    8-bit bytes from the application.record are inserted into the packet
according to the value of the previous data header byte (this would be
a data/cmd data header), found in bytes.to.add.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Pass Completed Packet
PROCEDURE ID:      VA.pass.cmpl.pkt
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             none

OUTPUT:            none

GLOBAL:            outgoing.packet
                   room.in.packet
                   max.outgoing.packet.size
                   outgoing.packet.ptr
                   outgoing.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Create a Packet

CALLS:             Finish Packet                 !Binary Layer

-------------------------------------------------------------------------------

DESCRIPTION:

    This procedure hands off a completed packet (which has yet to be assigned
a header, checksum, etc.) to the Binary Packet Layer.  It then returns a
cleared packet for the Valid Packet Layer to again fill.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Get Incoming Application Record
PROCEDURE ID:      VA.get.inc.app.rec
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             application.record
                   appl.record.ptr
                   appl.rec.size

OUTPUT:            PARAMETERS:     application.record (reference)
                                   application.parameters (reference):
                                      record.type
                                      link.type
                                      who.sent
                                      importance
                                      cmd.type
                                   appl.rec.size (reference)
                                   EOF.seen (reference)
                                   EOR.seen (reference)

                   application.record
                   appl.record.ptr
                   appl.rec.size

GLOBAL:            EOD
                   incoming.packet
                   incoming.packet.ptr
                   incoming.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Get Micro Response            !Application Layer
                   Transfer In                   !Application Layer
                   Get Unexpected Response       !System Utility

CALLS:             Get Incoming Packet           !Binary Layer
                   Fill Data Buffer
                   Build Application Command

-------------------------------------------------------------------------------

DESCRIPTION:

    A valid packet is taken from the Binary Packet Layer and broken into
individual commands or data (records, and if no EORs are found, then a
maximum of 144 bytes may be passed to the Application Layer at a time,
since we don't want to exceed the size of the application.record variable).
Application parameters are set up from data class bytes in the packet.
The length of the application.record in 8-bit bytes is also returned.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             VALID PACKET
PROCEDURE NAME:    Fill Data Buffer
PROCEDURE ID:      VA.fill.data.buffer
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             application.record
                   appl.record.ptr
                   appl.rec.size

OUTPUT:            application.record
                   appl.record.ptr
                   appl.rec.size
                   abort.type

GLOBAL:            incoming.packet
                   incoming.packet.pointer
                   incoming.packet.size

-------------------------------------------------------------------------------

CALLED BY:         Get Incoming Application Record

CALLS:             Abort Transfer      !System Utility

-------------------------------------------------------------------------------

DESCRIPTION:

    This procedure parses out one data header's worth of data from an incoming
packet and placed in the application.record. Expansion is done for binary
zeroes, ASCII blanks, EBCDIC blanks, and ASCII characters if necessary.
The appl.rec.size is set.  An abort occurs if a data header has an invalid
format.

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

LAYER:             Valid Packet
PROCEDURE NAME:    Build Application Command
PROCEDURE ID:      VA.bld.appl.cmd
PROCEDURE TYPE:    untyped

-------------------------------------------------------------------------------

INPUT:             application.record
                   appl.rec.size
                   appl.record.ptr

OUTPUT:            application.record
                   appl.rec.size
                   appl.record.ptr
                   abort.type

GLOBAL:            incoming.packet
                   incoming.packet.pointer
                   incoming.packet.size

------------------------------------------------------------------------------

CALLED BY:         Get Incoming Application Record

CALLS:             Abort Transfer                  !System Utility

------------------------------------------------------------------------------

DESCRIPTION:

    A command is parsed out from the incoming packet and returned with its
associated command data.  Expansion is done for binary zeroes, ASCII blanks,
EBCDIC blanks, and ASCII characters if necessary for the command data.
The appl.rec.size is set.  An abort occurs if a data header has an invalid
format.

-------------------------------------------------------------------------------

 