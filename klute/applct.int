------------------------------------------------------------------------

LAYER:            APPLICATION

------------------------------------------------------------------------

COMPONENTS:
                  File Transfer Driver
                  Get Commandline Parameters
                  Parse Commandline
                  Check Host File
                  Startup Abort
                  Initialize Everything
                  Get Positive Reply
                  Send Startup Commands
                  Get Micro Response
                  Handle Micro Response
                  Transfer Out
                  Read Host File
                  Transfer In
                  Write Host File
                  Close Host File
                  Close Up

------------------------------------------------------------------------

DESCRIPTION:

   This is the controller for the COPYPC.X program.  This layer parses the
commandline, sends startup commands to the micro, and waits for a
positive reply before beginning the actual transfer.  It is this layer's
responsibility to perform conversions to and from PDP-10 formatted bytes
and the standard 8-bit bytes which the Tymshare File Transfer Protocol
requires.  This layer also handles abnormal situations requiring program
abort.


------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   File Transfer Driver
PROCEDURE ID:     main program
PROCEDURE TYPE:   not applicable

------------------------------------------------------------------------

INPUT:            cmdline.params:  pc.filename, host.filename
                                   file.type, replace
                  startup.abort.type

GLOBALS: direction.of.transfer

OUTPUT:           cmdline.params
                  startup.abort.type
                  abort.type

------------------------------------------------------------------------

CALLED BY:        user

CALLS:            Get Commandline Parameters
                  Startup Abort
                  Initialize Everything
                  Get Positive Reply
                  Transfer In
                  Transfer Out
                  Close Up
                  Abort Transfer

------------------------------------------------------------------------

DESCRIPTION:

   This is the main program driver.  If Get Commandline Parameters returns
false then Startup Abort is called, otherwise the transfer proceeds.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Get Commandline Parameters
PROCEDURE ID:     AP.get.cmdline.params
PROCEDURE TYPE:   boolean

------------------------------------------------------------------------

INPUT:            commandline
                  cmdline.params

GLOBALS: host.filename
         file.type
         replace

OUTPUT:           PARAMETERS:   cmdline.params (reference)
                                startup.abort.type (reference)
                  commandline

------------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            Parse Commandline
                  Check Host File

------------------------------------------------------------------------

DESCRIPTION:

   This procedure reads the command line, calls its local procedure
AP.parse.cmdline to check its syntax, calls its local procedure
AP.check.host.file to determine whether or not the named file exists.
If there's an error, startup.abort.type is set.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Parse Commandline
PROCEDURE ID:     AP.parse.cmdline
PROCEDURE TYPE:   boolean

------------------------------------------------------------------------

INPUT:            commandline

GLOBALS: direction.of.transfer

OUTPUT:           cmdline.params
                  ! host.filename, pc.filename,
                    file.type, replace

------------------------------------------------------------------------

CALLED BY:        Get Commandline Parameters

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   This procedure parses out the commandline, determining the cmdline
parameters:  direction.of.transfer, host.filename, pc.filename,
file.type, replace.  If there is a syntax error, the procedure returns
false.


The program is invoked as follows:

-run copypc; KEYWORD <host filename> <pc filename> / b(inary r(eplace

where KEYWORD = fromhost | tohost | topc | frompc
      the / is optional but is required if either binary or replace
         is desired

------------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Check Host File
PROCEDURE ID:     AP.check.host.file
PROCEDURE TYPE:   integer

-----------------------------------------------------------------------

INPUT:            host.filename
                  replace

GLOBALS: direction.of.transfer

OUTPUT:

-----------------------------------------------------------------------

CALLED BY:        Get Commandline Parameters

CALLS:            none

-----------------------------------------------------------------------

DESCRIPTION:

For TOPC direction of transfer, determines whether host file is present.
For TOHOST direction of transfer, if file already exists, checks the
replace option to determine whether transfer may proceed.

-----------------------------------------------------------------------


-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Startup Abort
PROCEDURE ID:     AP.startup.abort
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: startup.abort.type   (value)

OUTPUT:           error message on user's terminal

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            none

-----------------------------------------------------------------------

DESCRIPTION:

   Prints appropriate error message depending upon the reason for the
abort.

-----------------------------------------------------------------------


-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Initialize Everything
PROCEDURE ID:     AP.init.everything

-----------------------------------------------------------------------

INPUT:




GLOBALS: command.table
         number.of.cmds.in.table    incoming.timeout.counter
         direction.of.transfer      outgoing.timeout.counter
         replace                    max.incoming.timeouts
         file.type                  max.outgoing.timeouts
         pc.filename                number.of.seconds
         EOF, EOR, EOD              two14th
         need.reset                 top.of.PID.range
         file.open                  bottom.of.PID.range
         aborting                   last.PID.ACKed
         in.startup.mode            current.incoming.PID
         in.closeup.mode            NAK.count, max.NAKS
         last.NAK.PID               RFR.received
         max.incoming.packet.size   max.outgoing.packet.size
         room.in.packet             timeout.type
         current.outgoing.packet    last.outgoing.packet
         xlatetb                    hex.table
         greatest.outgoing.PID      current.outgoing.PID

OUTPUT:

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            none

-----------------------------------------------------------------------

DESCRIPTION:

Initializes the terminal not to interfere with the file transfer, sets
proper values for the global communications variables, inits the
translate table values for those characters that need to be sent
encoded, and, depending upon the direction.of.transfer, sets the command
table values.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Get Positive Reply
PROCEDURE ID:     AP.get.positive.reply
PROCEDURE TYPE:   boolean

-----------------------------------------------------------------------

INPUT:            positive.reply.received

GLOBALS: command.table
         number.of.cmds.in.table

OUTPUT:           boolean value

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            Send Startup Cmds
                  Get Micro Response

-----------------------------------------------------------------------

DESCRIPTION:

   Send the appropriate set of commands to the micro and await his
response.  Transfer cannot proceed unless a positive reply to the
last command is received.


-----------------------------------------------------------------------


-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Send Startup Cmds
PROCEDURE ID:     AP.send.startup.cmds
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:

GLOBALS: command.table
         number.of.cmds.in.table

OUTPUT:           application.record,
                  application.parameters,
                  appl.rec.size,
                  EOF, EOR.seen

-----------------------------------------------------------------------

CALLED BY:        Get Positive Reply

CALLS:            Create Packet     ! Valid Packet Layer

-----------------------------------------------------------------------

DESCRIPTION:

   Get the startup commands from the various command tables and send
them to the Valid Packet Layer for packaging.  Force the packet to
be sent when the end of the command tables are reached by setting
EOF to true.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Get Micro Response
PROCEDURE ID:     AP.get.micro.response
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:
                  application.record
                  application.parameters
                  appl.rec.size
                  EOF.seen
                  EOR.seen

OUTPUT:           PARAMETERS: reply (reference)
                  appl.rec
                  importnt
                  c.type
                  a.rec.size
                  EOF.seen

-----------------------------------------------------------------------

CALLED BY:        Get Positive Reply
                  Close Up

CALLS:            Get Incoming Application Record
                  Handle Micro Response

-----------------------------------------------------------------------

DESCRIPTION:

   Loop until the end of the micro's responses is reached (EOF.seen),
get a response from the Valid Packet Layer, send it to Handle Micro
Response.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Handle Micro Response
PROCEDURE ID:     AP.handle.micro.response
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: application.record
                              application.parameters
                              appl.rec.size

GLOBALS: positive.reply.received
         in.closeup.mode
         direction.of.transfer

OUTPUT:           PARAMETERS: EOF.seen

                  abort.type

-----------------------------------------------------------------------

CALLED BY:        Get Micro Response
                  Transfer In
                  Get Unexpected Response       ! System Utility

CALLS:            Abort Transfer                ! system Utility

-----------------------------------------------------------------------

DESCRIPTION:

   This procedure interprets the micro's responses.  Anything important
and not a positive reply causes an abort.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Transfer Out
PROCEDURE ID:     AP.transfer.out
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: file.type   (value),
                              host.filename  (value)

                  appl.record
                  appl.rec.size
                  EOF
                  EOR.seen

GLOBALS:  file.open
          file.channel
          prev.record.type
          prev.link.type
          prev.who.sent
          prev.importance
          prev.cmd.type

OUTPUT:           application.parameters
                  application.record
                  appl.rec.size
                  EOF
                  file.type
                  EOR.seen

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            Read Host File
                  Create Packet     ! Valid Packet Layer
                  Abort Transfer    ! System Utility

                  SAIL intrinsics:  OPEN, LOOKUP
-----------------------------------------------------------------------

DESCRIPTION:

   This procedure does the actual transfer when the direction.of.transfer
is TOPC.  It opens the host file, reads the file.records until EOF
is encountered, sends the file.records to the valid packet
layer, and closes the host file.

   Since data is dealt with in 8-bit bytes using a byte pointer and an
integer array, it is necessary to keep track of the actual number of
8-bit bytes in the file.record.

   It is also necessary to determine whether an end-of-record was
encountered on reads.  For text files, end-of-record (EOR.seen) occurs
when the break character is not null (the usual end-of-line).  For
binary files, EOR.seen is indicated in the low-order 4 bits (32-35) of the
integer in which the end-of-record occurs.  The bit 32 is a 1 and
the bits 33-35 contain the actual number of bytes in the integer.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Read Host File
PROCEDURE ID:     AP.read.host.file
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: file.type   (value)

OUTPUT:           PARAMETERS: file.record (reference)
                              appl.rec.size (reference)
                              EOF.seen (reference)
                              EOR.seen (reference)

-----------------------------------------------------------------------

CALLED BY:        Transfer Out

CALLS:            SAIL intrinsics:  INPUT, ARRYIN, LOP

-----------------------------------------------------------------------

DESCRIPTION:

   Reads the file differently depending upon file type (AST or binary).
Binary files are assumed to have originated on the micro.  There
should be 4 8-bit bytes in each word of the file.  The last word
contains the number of bytes in it in its low-order 4 bits (32-35).
Binary file data is sent to the Valid Packet Layer 4 bytes per word.
If there are bytes left over, they are saved and inserted into the
next file to be sent.  End of Record (EOR) marks are stored
in bit 32 (set to 1) + bits 33-35 contain the number of bytes in the
integer containing the EOR mark.  At present, it is highly unlikely
that EORs will be encountered in binary files.

-----------------------------------------------------------------------


-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Transfer In
PROCEDURE ID:     AP.transfer.in
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: file.type   (value),
                              host.filename  (value)

                  application.parameters
                  application.record
                  EOF.seen
                  EOR.seen
                  appl.rec.size

GLOBALS: left.over

OUTPUT:           appl.record
                  appl.rec.size
                  file.type
                  EOF.seen
                  EOR.seen
                  application.record
                  application.parameters
                  host.filename
                  abort.type

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            Write Host File
                  Close Host File
                  Handle Micro Response
                  Get Incoming Application Record
                  Abort Transfer

-----------------------------------------------------------------------

DESCRIPTION:

   This procedure controls the actual transfer when the direction.of.transfer
is TOHOST.  It opens the host file, retrieves the data coming from the
micro from the valid packet layer, and write data to the host file.
When the EOF indicator is received from the valid packet layer, the
file is closed.  If the data coming from the valid packet layer is a
command, it is assumed the micro has a problem and control passes to
Handle Micro Command.  If the micro has sent an unable to continue command,
the process then aborts.  If some positive response comes through,
it is ignored and the transfer continues.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Write Host File
PROCEDURE ID:     AP.write.host.file
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: file.record (value),
                              file.type   (value),
                              file.rec.size (value),
                              EOF.seen    (value),
                              EOR.seen    (value)

                  GLOBALS:    left.over
                              saved.bytes
                              file.channel

OUTPUT:           another.record
                  aline
                  abort.type

-----------------------------------------------------------------------

CALLED BY:        Transfer In

CALLS:            SAIL intrinsics:  CPRINT, ARRYOUT
                  Abort Transfer

-----------------------------------------------------------------------

DESCRIPTION:

   This procedure looks at the file.type and performs the appropriate
method of writing the host file.  AST files are first converted from the
8-bit ASCII of the file.record's integer array to 7-bit ASCII in a string
variable, and then written to the file using CPRINT.  Binary files are
written using ARRYOUT.  On binary files, the last word written gets the
actual number of 8-bit bytes contained in the last word in the low-order
4 bits (bits 32 - 35).  All writing is done to a temporary file (COPYPC.TMP)
If the transfer completes normally, the close routine renames
the temporary file to the name the user gave as the host.filename.

   Binary files may have end-of-record indicators in them.  If the
EOR.seen boolean is true, set the bit 32 of the last integer to be
written to a 1, set bits 33 - 35 of this integer to the actual
number of 8-bit bytes in the integer.

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Close Host File
PROCEDURE ID:     AP.close.host.file
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:            PARAMETERS: host.filename  (value)

GLOBALS:    file.channel
            file.open
            replace

OUTPUT:

-----------------------------------------------------------------------

CALLED BY:        Transfer In

CALLS:            SAIL intrisics:   RENAME, CLOSE, RELEASE
                                    LOOKUP, OPEN

-----------------------------------------------------------------------

DESCRIPTION:

   If the replace option is in effect, delete the old file, then rename
the temp file.
Rename the temp file as the user's chosen file name (host.filename).

-----------------------------------------------------------------------

-----------------------------------------------------------------------

LAYER:            APPLICATION
PROCEDURE NAME:   Close Up
PROCEDURE ID:     AP.close.up
PROCEDURE TYPE:   untyped

-----------------------------------------------------------------------

INPUT:

GLOBALS:    in.closeup.mode
            positive.reply.received
            direction.of.transfer

OUTPUT:           application.record
                  application.parameters
                  appl.rec.size
                  EOF.seen
                  EOR.seen

-----------------------------------------------------------------------

CALLED BY:        File Transfer Driver

CALLS:            Create Packet        ! Valid Packet Layer
                  Get Micro Response

-----------------------------------------------------------------------

DESCRIPTION:

   Sends the micro a closeup command.  If the direction.of.transfer is
TOPC, waits for the micro's response to be certain the micro files
were closed.  Restores the user's terminal characteristics and clears
the input buffer (since TYM/COMM sends a close response whether or
not we wish to read it).

-----------------------------------------------------------------------

  @Y5p