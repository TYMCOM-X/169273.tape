------------------------------------------------------------------------

LAYER:            TRANSPORT

------------------------------------------------------------------------

COMPONENTS:
                  Encode and Send Bytes
                  Hex Encode and Send
                  Encode Bytes
                  Send Byte
                  Get Decoded Packet
                  Read Byte
                  Decode Bytes
                  Hex Decode
                  Send Reset

------------------------------------------------------------------------

DESCRIPTION:

   This layer is responsible for sending bytes out on the communication
port and receiving bytes from the communication port.  The transport
layer knows what the lead-in character, trailer character, and maximum
packet size are.  This layer also knows which bytes need to be encoded
before they are sent, and how to decode bytes received encoded.

   This layer also knows when the micro needs a "wake-up" call to begin
protocol mode communication and sends the proper sequence to the micro
so that his buffers are initialized.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Encode and Send Bytes
PROCEDURE ID:     TR.encode.and.send
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: packet  (reference)
                              number.of.bytes   (value)

GLOBALS:    xlatetb


OUTPUT:           bytes on communications/command port
                  byte.to.encode

------------------------------------------------------------------------

CALLED BY:        Send Packet                       ! Binary Layer
                  Send ACK                          ! Binary Layer
                  Respond To Flow Control Packet    ! Binary Layer
                  Send RFR                          ! Binary Layer
                  Send Reset                        ! Binary Layer

CALLS:            Hex Encode and Send
                  Send Byte

------------------------------------------------------------------------

DESCRIPTION:

   This procedure sends the lead-in byte (ESCape), looks at each
byte to be sent, does encoding when necessary, and sends the bytes
out the command port to the micro.  When there are no more bytes to
send, the end.of.packet byte is sent (CR).

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Hex Encode and Send
PROCEDURE ID:     TR.hex.encode.and.send
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: input.byte  (value)

OUTPUT:           high.order
                  low.order

------------------------------------------------------------------------

CALLED BY:        Encode and Send Bytes

CALLS:            Encode Bytes
                  Send Byte

------------------------------------------------------------------------

DESCRIPTION:

   Split the input byte into its high-order and low-order nibbles.  Use
the local procedure TR.encode.bytes to encode the two bytes, send the
high-order byte first.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Encode Bytes
PROCEDURE ID:     TR.encode.bytes
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            PARAMETERS: in.byte     (value)

OUTPUT:           integer

------------------------------------------------------------------------

CALLED BY:        Hex Encode and Send

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   The value of the byte is replaced by its ASCII code.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Send Byte
PROCEDURE ID:     TR.send.byte
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            PARAMETERS: input.byte     (value)

OUTPUT:           byte on communication/command port

------------------------------------------------------------------------

CALLED BY:        Encode and Send
                  Hex Encode and Send

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   This is a start!code routine which sends an 8-bit byte out the
command port.

------------------------------------------------------------------------


------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Get Decoded Packet
PROCEDURE ID:     TR.get.decoded.packet
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            byte.read
                  decoded.byte

GLOBALS: max.incoming.packet.size
         incoming.packet
         incoming.packet.size
         incoming.packet.ptr

OUTPUT:           byte.read
                  high.byte


------------------------------------------------------------------------

CALLED BY:        Get Good Chksummed Packet    ! Binary Layer

CALLS:            Read Byte
                  Decode Bytes
                  Handle Timeout               ! Binary Layer

------------------------------------------------------------------------

DESCRIPTION:

   This procedure starts collecting bytes coming in on the command port
when it sees a leadin character (@).  When the shift.to.hex character
is seen, it decodes bytes in pairs until the shift.out.of.hex character
is seen.  The procedure checks to be certain the maximum packet size
is not exceeded.  Loss of a trailer character (CR) can cause maximum
packet size exceeded.

Note: Bytes are returned as integers.  They must then be moved into the
incoming.packet (integer array) using an 8-bit byte pointer.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Read Byte
PROCEDURE ID:     TR.read.byte
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            PARAMETERS:    time.limit

                  incoming byte

OUTPUT:           integer value

------------------------------------------------------------------------

CALLED BY:        Get Decoded Packet

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

Wait for up to time.limit seconds for a character to be received on the
command port.  If no character is received, return -1, otherwise, return
the character in the low order 8 bits.

------------------------------------------------------------------------


------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Decode Bytes
PROCEDURE ID:     TR.decode.bytes
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            PARAMETERS: high.order.byte   (value)
                              low.order.byte    (value)

GLOBALS:    hex.table

OUTPUT:           integer value
                  searching.for.lead.in.character
                  in.decode.mode
                  first.char

------------------------------------------------------------------------

CALLED BY:        Get Decoded Packet

CALLS:            Hex Decode

------------------------------------------------------------------------

DESCRIPTION:

   Check to be sure the input bytes are decodable (hex.table entry is
set to true).  If they are, use the local procedure TR.hex.decode to
decode them, reconstruct the original value and return, otherwise,
return -1.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Hex Decode
PROCEDURE ID:     TR.hex.decode
PROCEDURE TYPE:   integer

------------------------------------------------------------------------

INPUT:            PARAMETERS: decode.byte

OUTPUT:           integer

------------------------------------------------------------------------

CALLED BY:        Decode Bytes

CALLS:            none

------------------------------------------------------------------------

DESCRIPTION:

   Translates ASCII code values into their integer equivalents.

------------------------------------------------------------------------

------------------------------------------------------------------------

LAYER:            TRANSPORT
PROCEDURE NAME:   Send Reset
PROCEDURE ID:     TR.send.reset
PROCEDURE TYPE:   untyped

------------------------------------------------------------------------

INPUT:            cksum

OUTPUT:           initial.ACK

------------------------------------------------------------------------

CALLED BY:        Finish Packet    ! Binary Layer

CALLS:            Calculate Chksum  ! Binary Layer
                  Encode and Send

------------------------------------------------------------------------

DESCRIPTION:

   Send the micro an initial ACK so he can reset his PIDs.

------------------------------------------------------------------------

   