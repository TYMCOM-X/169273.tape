
                            DATA STRUCTURES


Application Layer -

Abstract Symbolic Text (AST) files:
   Bytes are read into a string variable, one line at a time.
   From the string variable, the characters of the line are
   LOPed from the string, one at a time into an integer array, where it is
   translated from 7-bit ASCII into 8-bit ASCII using an 8-bit byte pointer.
   The 8-bit byte pointer deposits the bytes into an integer array.

   Bytes to be written are put into a string variable from the
   integer array in which they are passed from the Valid Packet Layer.
   This is the reverse of bytes read, but the process is the same,
   i.e. an 8-bit byte pointer is used to load and deposit bytes from
   the integer array into the string variable.

Binary files:
   Bytes are read into an array of integers with an 8-bit byte pointer
   used to extract each byte out of the words of the array.
   Data to be written is contained in an integer array with a byte
   pointer used to stuff each byte into the words of the array.

   Since binary files do not contain 'records', the record size of
   144 was chosen for writing binary files.  This size is larger
   than AST records (usually 80 but possibly as long as 140).

Command Table
   The Command Table is a group of parallel, in-memory arrays:
      integer appl.cmd
      integer link.type
      integer who.sent
      integer importance
      integer cmd.type
      string cmd.data
   Maximum size of the array is 7.
   The command table pointer is really the index into the array.
   The integer appl.cmd and the string cmd.data together form the
      application.record which is sent to the valid packet layer.

Lower three layers -

   The "packet" is built as 8-bit bytes stored in an integer array.
   Note that each word of the integer array contains four bytes with
   the low-order 4 bits unused.
   The actual number of bytes in the packet is kept track of so
   that how many 8-bit bytes are in the packet is known (incoming or
   outgoing.packet.size).

   When the "packet" is sent, it goes out the communication port
   one 8-bit byte at a time using the byte pointer to keep track
   of which byte is the current one being processed.


