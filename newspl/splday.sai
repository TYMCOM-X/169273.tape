entry

	DateSt, GetDay, LeapYear
;
begin  "SPLDAY"

require "(SAILIB)SAIL.DEF" source!file;
require "SPLSUB.DCL" source!file;

define calli!date = '14;
define Today     = {"Today"},     Aujourdhui = {"Aujourdhui"};
define Yesterday = {"Yesterday"};
define Tomorrow  = {"Tomorrow"};
Preset!with 0,3,3,6,1,4,6,2,5,0,3,5;
	    Own safe integer array MonthOffset[0:11];
Preset!with 31,28,31,30,31,30,31,31,30,31,30,31;
	    Own safe integer array MonthDays[0:11];
Preset!with "January","February","March","April",
	    "May","June","July","August",
	    "September","October","November","December";
	    Own safe string array MonthName[0:11];
Preset!with "Janvier","Fevrier","Mars","Avril",
	    "Mai","Juin","Juillet","Aout",
	    "Septembre","Octobre","Novembre","Decembre";
	    Own safe string array MoisName[0:11];
Preset!with "Sunday","Monday","Tuesday","Wednesday",
	    "Thursday","Friday","Saturday";
	    Own safe string array Weekday[0:6];
Preset!with "Dimanche","Lundi","Mardi","Mercredi",
	    "Jeudi","Vendredi","Samedi";
	    Own safe string array Semaine[0:6];

Own safe integer array F[0:4], G[0:4];		! today, proposed date;
Integer B,L,M,T;  String S;

simple boolean procedure LeapYear( Integer Year );
! ----------------------------------------------------------------------;
!									;
!	LeapYear	Returns TRUE if the specified year IS a		;
!			leap-year.  It assumes that every 4 years	;
!			but not every 100 years but every 400 years	;
!			there is (in fact) a leap-year.			;
!									;
! ----------------------------------------------------------------------;
Return( 0  =  (year mod   4) and
	0 neq (year mod 100) or
	0  =  (year mod 400) );


simple integer procedure DECdate;
! ----------------------------------------------------------------------;
!	Now re-calculate the date using the DEC formula			;
! ----------------------------------------------------------------------;
! begin ;
!    Print( "G: ",G[0]," ",G[1]," ",G[2]," ",G[4],crlf);
     Return( ( ( (G[2]*12) + G[1]) * 31) + G[0] );
! end;


simple procedure SetDate( Integer Dt );
! ----------------------------------------------------------------------;
!									;
!	SetDate		Setup array F with information about the	;
!			DEC-Date which was specified in Dt.		;
!									;
! ----------------------------------------------------------------------;
begin "SetDate"
    F[0]_ Dt mod 31; Dt _ Dt Div 31;		! Day of month  0-30;
    F[1]_ Dt mod 12;				! Month of year 0-11;
    F[2]_ Dt div 12;				! Year less 1964;
    F[3]_ If LeapYear( F[2] + 1964 )		! Remember leapyear count;
	   then 1 else 0;			!  as 1 if true, else 0;
    F[4]_ (3 + F[0]				! Wednesday + day of month;
	     + MonthOffset[ F[1] ]		!  + cumulative month offset;
	     + F[2]				!  + years offset;
	     + (If F[1] < 2 then 0 else F[3])	!  + current leapyear day;
	     + (F[2] lsh -2) + 1		!  + cumulative leap years;
		      ) mod 7;			! = Day of the week, 0=Sunday;
end "SetDate";

internal simple integer procedure GetDay( String DateLine; Integer Flag );
! ----------------------------------------------------------------------;
!									;
!	GetDay		Return a DEC-date corresponding to the		;
!			specified string.  Acceptable formats are:	;
!			"dd" which is the dd'th day of this month,	;
!			"dd-mm[-yy]" the dd'th day of the mm'th month,	;
!			"dd-mmm[-yy]" where mmm is jan,feb,mar,etc.,	;
!			"mm/dd[/yy]", "weekday" which finds the date	;
!			for the most previous monday-sunday.		;
!									;
!	     o  Dateline - the string to read the date from.		;
!	     o  Flag     - indicates if SINCE or AFTER processing	;
!			   is wanted:	Since = Flag < 0		;	
!					After = Flag > 0		;
!									;
! ----------------------------------------------------------------------;
begin "GetDay"
    Define ##Num = {"0123456789"};

SetDate( Calli(0,Calli!Date) );			! Setup current date;
ArrClr( G );					! initialize result array;
If Length( DateLine ) = 0			! if we want the default;
 then begin "give first of month"		! then pay the rent;
    ArrTran(G,F); G[0]_ 0;			! setup the first;
    Return( DECdate );				!  then return;
 end "give first of month";

S_ Token( DateLine );				! get first token;
If SubSet( S, ##Num )				! check for numeric;
 then begin "date format"
    T_ Cvd( S );				! convert number;
    If Length( Dateline ) = 0			! ? dd of this month;
     then If 0 < T leq MonthDays[ F[1] ]	!   ? within range;
	then begin				! Yes, setup the dd'th;
	    ArrTran(G,F); G[0]_ T-1;		!      day of this month;
	    If Flag < 0 and			!  check if before set;
	      (G[1]*31)+G[0] > (F[1]*31)+F[0]	!   and day is after...;
	     then G[2]_ G[2] - 1;		!   we must mean last year;
	    If Flag > 0 and			!  check if after set;
	      (G[1]*31)+G[0] < (F[1]*31)+F[0]	!   and day is before;
	     then G[2]_ G[2] + 1;		!   we must mean next year;
	    Return( DECdate );			!      and return;
	end
	else Return( -1 );			! No, Return error code -1;
    B_ 0;					! set initial break;
    If DateLine = "/"
     then begin "mm/dd/yy format"		! mm/dd [/yy] format;
	If 0 < T leq 12				! if within range;
	 then G[1]_ T-1				! then - set month of year;
	 else Return( -1 );			! else - byebye;
	B_ Lop( DateLine );			! remove "/" & remember it;
	S_ Token( DateLine );			! get next token;
	If not SubSet( S, ##Num )		! check for numeric;
	 then Return( -1 );			! no?  then bad format;
	T_ Cvd( S );				! convert to numeric;
	If 0 < T leq MonthDays[ G[1] ]		! ? within range;
	 then G[0]_ T-1				! Yes, set day of this month;
	 else Return(-1);			! No, give error return;
     end "mm/dd/yy format"
     else
      If DateLine = "-" or DateLine = " "	! allow spaces and dashes;
       then begin "dd-mm[m][-yy] format"	! for all DEC formats;
	B_ Lop( DateLine );			!  if it exists;
	S_ Token( DateLine );			! now get next part;
	If SubSet( S, ##Num )			! see if numeric;
	 then begin "use numeric month"		! Yes, use what we have;
	    M_ Cvd( S );			! convert to numeric;
	    If 0 < M leq 12			! ? within range;
	     then G[1]_ M-1			!   yes, set month value;
	     else Return( -1 );			!   no, give error return;
	 end "use numeric month"
	 else begin "convert month name"	! No, check for monthname;
	    M_ -1;				! initialize month;
	    For L_ 0 step 1 until 11		!  check month-name table;
	     do If Kequ(S,MonthName[L][1 for length(S)]) or
		   Kequ(S,MoisName[L][1 for length(S)])
		 then  If M = -1		!  a match!  ? first time;
			then M_ L		!  yes, set value;
			else Return( -1 );	!  no, give error;
	    If M < 0				! if not found;
	     then Return( -1 )			!  then illegal name;
	     else G[1]_ M;			!  else set month;
	 end "convert month name";
	If 0 < T leq MonthDays[ G[1] ]		! ? day within range;
	 then G[0]_ T-1				! Yes, set day of month;
	 else Return( -1 );			! No, give error return;
     end "dd-mm[m][-yy] format"			!   DEC formats;
     else Return( -1 );				! If neither format - error;
    If Length( DateLine ) = 0			! ? only dd-mm[m] specified;
     then begin "guess year"
	G[2]_ F[2];				! Yes, start with this year;
	If Flag < 0 and				!  if "before" today;
	   (G[1]*31)+G[0] > (F[1]*31)+F[0]	!  and date is after;
	 then G[2]_ G[2] - 1;			!   then we mean last year;
	If Flag > 0 and				!  if "after" today;
	   (G[1]*31)+G[0] < (F[1]*31)+F[0]	!  and date is before;
	 then G[2]_ G[2] + 1;			!   then we mean next year;	 
     end "guess year"
     else begin "get year"			! No, get the year;
	If DateLine neq B			! ? separated correctly;
	 then Return( -1 );			! no -- error return;
	Lop( DateLine );			! remove separator;
	S_ Token( DateLine );			! and eat last token;
	If not SubSet( S, ##Num )		! check for numerics;
	 then Return( -1 );			!  no? then give error;
	T_ Cvd( S );				! convert to numeric;
	If T > 99 then T_ T-1900;		! assume > 99 is 4 digits;
	If 64 leq T				! after conversion, if in;
	 then G[2]_ T-64			! range, set year;
	 else Return( -1 );			! return an error;
     end "get year";				! finish up year;
    If G[1] = 2 and not LeapYear( G[2]+1964 )	! if feb, non-leapyear;
     and G[0] > 28 then Return(-1);		!  complain if > 28 days;
 end "date format"
 else
  If Flag neq 0
   then begin "text format"
	ArrTran(G,F);				! copy today from data;
	If Kequ(S,Today[1 for length(S)]) or	! if we said TODAY;
	   Kequ(S,Aujourdhui[1 for length(S)])	!  in english or french;
	 then Return( DECdate );		!  then that's OK;
	M_ -1;					! begin unknown date;
	For L_ 0 step 1 until 6			! for each day of the week;
	 do If Kequ(S,Weekday[L][1 for length(S)]) or
	       Kequ(S,Semaine[L][1 for length(S)])
	     then If M = -1			! a match!  ? first time;
		   then M_ L			!  yes, set value;
		   else Return( -1 );		!  no, give error;
	If M < 0 then Return( -1 );		! if not found, give error;
	If Flag < 0				! if SINCE -- then subtract;
	 then begin "before today"
	    G[0]_ G[0]				! day of month;
		  - (If M = G[4]		!  minus day offest;
		      then 7			!   if same day then day-7;
		      else ((G[4]+7)-M) mod 7);	!    else figure offset;
	    If G[0] < 0 then begin		! if day too small, fixup;
		If G[1] = 0 then begin		!    if month too small;
		    G[2]_ G[2] - 1;		!       year_ year-1;
		    G[1]_ 12;			!       month_ december;
		 end
		 else G[1]_ G[1] - 1;		!   else subtract 1 month;
		G[0]_ G[0] + MonthDays[ G[1] ]	!  add in month field;
		      + (If G[3] = 1		!  + if leapyear;
			  then If G[1] > 1	!     and march-december;
			       then 1 else 0	!     add 1 for february;
			  else If G[1] = 1	!    if not leapyear;
			       then -1 else 0);	!     february is to high;
	     end;
	 end "before today"
	 else begin "after today"
	    G[0]_ G[0]				! day of month;
		  + (If M = G[4]		!  plus day offset;
		      then 7			!   same day means a week;
		      else ((M+7)-G[4]) mod 7);	!   else figure offset;
	    If G[0] > MonthDays[G[1]] or	! check for day overflow;
	       (G[1] = 1 and G[3] neq 1 and G[0] > 28)
	     then begin "increment month"	! yes, so fixup date;
		G[0]_ G[0] - MonthDays[G[1]]	!  subtract some days;
		      + (If G[1] = 1 and G[3] neq 1
			  then 1 else 0);	!  cover leap years;
		G[1]_ If G[1] < 11		! correct month offset;
		      then G[1] + 1		! by 1;
		      else 0;			! or by reset;
		If G[1] = 0 then G[2]_G[2] + 1;	! maybe reset year;
	     end "increment month"
	 end "after today"
   end "text format"
   else Return( -1 );				! error if not before/after;

Return( DECdate );

end "GetDay";

internal simple string procedure DateSt( Integer UseDate );
! ----------------------------------------------------------------------;
!									;
!	Datestring	Return a date in the form MM/DD/YY.		;
!									;
! ----------------------------------------------------------------------;
begin "DATSTR"
    SetDate( If UseDate geq 0			! If a good date ...;
	      then Usedate			!  then use given date;
	      else Calli(0,Calli!Date)   );	!  else use Today;
    F[2]_ F[2] + 1964;				! Year expressed in 4 digits;
    Return( Cvs(101+F[1])[2 for 2]&"/"&		!	Month/	0-padded;
	    Cvs(101+F[0])[2 for 2]&"/"&		!	Day/	0-padded;
	    Cvs(F[2])[3 for 2] );		!	Year	in 2 digits;
end "DATSTR";


internal simple integer procedure After( String Date );
! ----------------------------------------------------------------------;
!									;
!	After		Convert a datestring into a date on or after	;
!			the given date.					;
!									;
! ----------------------------------------------------------------------;
Return( GetDay( Date, 1 ) );


end "SPLDAY";
    