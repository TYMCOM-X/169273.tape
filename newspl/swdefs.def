
Comment

    User Macros:
	Declare!Switches(Switch-List)	Main definition macro
	  SW!SN(Name,Default,Flags)	Switch macro: Yes-No
	  SW!SS(Name,Default,Flag)	Switch macro: Value argument
	  SW!SL(Name,Default,Flag,List)	Switch macro: Text argument
	  SW!ARG(Argument,Value)	Argument macro: Associated value
	Generate!Switch!Code		Build switch processing code
	  ( InitDef, ApplyDef, Numeric, Printsw, Checksw )

    User Data Elements:
	$SW$LENGTH			Length of switch list
	$SW$OFFSET			Length of switch argument list
	$SW$Name     [ 1:$SW$Length ]	Table of switch names
	$SW$Value    [ 1:$SW$Length ]	Table of switch values
	$SW$Default  [ 1:$SW$Length ]	Table of switch defaults
	$SW$Offsets  [ 1:$SW$Length+1]	Table of offsets into arguments
	$SW$ArgString[ 1:$SW$Offset ]	Table of switch arguments
	$SW$ArgValue [ 1:$SW$Offset ]	Table of argument values

    Internal Macros:
	CVPSV(Par,Value)		If CVPS(Par) then Par else Value
	$SW$MakeArray			Internal macro
	$SW$MakeOffset			Internal macro
	$SW$Temp			Temp used internally

    Example:
	Declare!Switches([
	    SW!SN( EXIT )
	    SW!SN( RESTART, 1 )
	    SW!SN( ABORT, 0, SW$NFS )
	    SW!SS( LENGTH, 0, SW$INT )
	    SW!SS( LIMIT, -1, SW$NFS lor SW$VRQ )
	    SW!SS( TIME )
	    SW!SL( HELP, 1,,[ SW!ARG(TEXT,1)
			      SW!ARG(SWITCHES,2) ] )
	    SW!SL( SPACING, 1, SW$NOS, [ SW!ARG(SINGLE,1)
					 SW!ARG(DOUBLE,2)
					 SW!ARG(TRIPLE,3) ] )
	    SW!SS( TEST, -1, SW$NOS lor SW$VRQ )
	    ] )

    Switches are: EXIT, NOEXIT, RESTART, NORESTART, ABORT, NOABORT,
		  LENGTH[:num-arg] (argument is optional),
		  LIMIT:arg (argument required), TIME[:arg],
		  HELP, HELP:TEXT, HELP:SWITCHES, SPACING:SINGLE,
		  SPACING:DOUBLE, SPACING:TRIPLE, TEST:arg

;
Define Declare!Switches($SwCall) = {

Redefine $Sw$Length = 0, $Sw$Offset = 0;

Redefine $Sw$MakeArray(Arg) = {
Redefine $Sw$Temp = 0;
Redefine SW!SX (Nam,Def,Flg,Tab) = {
    Redefine $Sw$Temp = $Sw$Temp + 1;
    Arg Ifcr $Sw$Temp < $Sw$Length thenc , endc
    };
Preset!with $SwCall
};

Redefine $Sw$MakeOffset(Arg) = {
Redefine $Sw$Temp = 0;
Redefine SW!ARG(Txt,Val) = {
    Redefine $Sw$Temp = $Sw$Temp + 1;
    Arg Ifcr $Sw$Temp < $Sw$Offset thenc , endc
    };
Preset!with $SwCall
};

Redefine SW!SX (Nam,Def,Flg,Tab) = {
  Redefine $Sw$Length = $Sw$Length + 1;	
  Define sw}&{Nam = {$Sw$Value[}& cvs($Sw$Length) &{]};
};
$SwCall

$Sw$MakeArray(CvPS(Nam));	String  Array $Sw$Name[1:$Sw$Length];
$Sw$MakeArray(CvPSV(Def,-1));	Integer Array $Sw$Default[1:$Sw$Length];
$Sw$MakeArray(CvPSV(Flg,0));	Integer Array $Sw$Flag[1:$Sw$Length];

Redefine SW!ARG(Txt,Val) = {Redefine $SW$Offset = $Sw$Offset + 1;};
$Sw$MakeArray($Sw$Offset Tab), $Sw$Offset;
Integer Array $Sw$Offsets[1:$Sw$Length+1];

Redefine SW!SX (Nam,Def,Flg,Tab) = {Tab};
$Sw$MakeOffset( CvPS(Txt) );	String Array $Sw$ArgString[1:$Sw$Offset];
$Sw$MakeOffset( Val );		Integer Array $Sw$ArgValue[1:$Sw$Offset];

Integer Array $Sw$Value[1:$Sw$Length];
};


Define CvPSV(Arg,Val)= {Arg IFCR Length(CvPS(Arg))=0 THENC Val ENDC};
Define SW!SL(Nam,Def,Flg,Tab) =
    { SW!SX (Nam, CvPSV(Def,-1), CvPSV(Flg,0) lor SW$TXT, Tab) };
Define SW!SS(Nam,Def,Flg) =
    { SW!SX (Nam, CvPSV(Def,-1), CvPSV(Flg,0) lor SW$VRQ lor SW$INT) };
Define SW!SN(Nam,Def,Flg) =
    { SW!SX (Nam, CvPSV(Def,-1), CvPSV(Flg,0) lor SW$NOS) };

Define	SW$NFS = !Bit(0),  SW$LRG = !Bit(1),  SW$NUE = !Bit(2)
,	SW$VRQ = !Bit(3),  SW$OBV = !Bit(4),  SW$NOS = !Bit(5)
,	SW$NCM = !Bit(6);

Define	SW$INT = !Bit(18), SW$TXT = !Bit(19);

Define	$SwUNK = 0,	$SwDUP = 1,	$SwAMB = 2
,	$SwVRQ = 3,	$SwISV = 4,	$SwAMV = 5;

Define Generate!Switch!Code( Ini, App, Nmc, Prt, Chk ) = {

simple procedure }&{CvPS(Ini)}&{;	! Set to initial default (0,-1);
begin
    Own Integer Index;
    For Index _ 1 step 1 until $Sw$Length Do
	$Sw$Value[Index] _ If ($Sw$Flag[Index] Land SW$OBV) then 0 else -1;
end;
require }&{CvPS(Ini)}&{ initialization;

simple procedure }&{CvPS(App)}&{;
begin
    Own Integer Index;
    For Index _ 1 step 1 until $Sw$Length Do
	If  $Sw$Value[Index] = -1 then
	    $Sw$Value[Index] _ $Sw$Default[Index];
end;

simple boolean procedure }&{CvPS(Nmc)}&{( String S );
begin
    Own Integer Index;
    For Index _ 1 step 1 until Length(S) Do
	If ("0" leq S[Index for 1] leq "9") or
	   S[Index for 1] = "+" or
	   S[Index for 1] = "-"
	  then
	  else Return( False );
    Return( True );
end;

simple string procedure }&{CvPS(Prt)}&{(String Nam);
begin
    Integer V, C;
    For C _ 1 step 1 until $Sw$Length do
      If Kequ(Nam, $Sw$Name[C])
	then begin V _ C; Done; End;
    If V = 0 then Return( Null );
    If $Sw$Flag[V] land SW$INT
	then Return( Nam&":"&Cvs($Sw$Value[V]) );
    If $Sw$Flag[V] land SW$NOS then begin
	If $Sw$Value[V] = 0 then Return( "NO"&Nam );
	If $Sw$Value[V] = 1 then Return( Nam );
    end;
    If $Sw$Flag[V] land SW$TXT then begin
	For C _ $Sw$Offsets[V]+1 step 1 until $Sw$Offsets[V+1] do
	begin
	    If $Sw$ArgValue[C] = $Sw$Value[V]
		then Return( Nam&":"&$Sw$ArgString[C] );
	end;
    end;
    Return( Null );
end;

simple integer procedure }&{Chk}&{(String Txt, Val);
begin
    Integer C,V,No;
    V _ 0;
    For C _ 1 step 1 until $Sw$Length do begin
	If Kequ( Txt, $Sw$Name[C] )			! exact match /XXX;
	    then begin V _ C; No _ False; Done End;	! yes -- done;
	If Kequ( Txt, "NO" & $Sw$Name[C] )		! exact match /noXXX;
	    then begin V _ C; No _ True;  Done End;	! yes -- done;
	If Kequ( Txt, $Sw$Name[C][1 for length(Txt)])	! partial match /XXX;
	    then if V then Return( -$SwAMB )		! 2nd time -- error;
		else begin V _ C; No _ False End;	! 1st time -- ok;
	If Kequ(Txt,("NO" & $Sw$Name[C])[1 for length(Txt)])
	    then if V then Return( -$SwAMB )		! 2nd time -- error;
		else begin V _ C; No _ True  End;	! 1st time -- ok;
    end;
    If V = 0 then Return( -$SwUNK );			! switch not found?;
    If No and not ($Sw$Value[V] land SW$NOS)		! typed /no on;
			then Return( -$SwUNK );		!   wrong switch;
    If -1 neq $Sw$Value[V] and not ($Sw$Flag[V] land SW$OBV)
	then Return( -$SwDUP );				! duplicate switch?;
    If Length(Val) then begin
	If No and $Sw$Flag[V] land SW$OBV = 0		! typed /noXXX:value;
		then Return( -$SwISV );			! illegal if not L'OR;
	If $Sw$Flag[V] land SW$INT			! switch is numeric?;
	    then If }&{CvPS(Nmc)}&{(Val)		! typed /XXX:nnn?;
		then If $Sw$Flag[V] land SW$OBV		! yes -- does switch;
		    then $Sw$Value[V] _ $Sw$Value[V]	!    L'OR;
				    lor Cvd(Val)	!    Yes-- V_V|New;
		    else $Sw$Value[V] _ Cvd(Val)	!    No -- set value;
		else Return( -$SwISV );			! no  -- illegal;
	If $Sw$Flag[V] Land SW$TXT then begin		! switch is textual?;
	    Own Integer W;    W _ 0;			!   yes -- initialize;
	    For C _ $Sw$Offsets[V]+1 step 1 until	!   loop in table;
	      $Sw$Offsets[V+1] Do begin			!     for each entry;
		If Kequ(Val,$Sw$ArgString[C])		!   exact match?;
		    then begin W _ C; Done; End;	!   yes -- done;
		If Kequ(Val,($Sw$ArgString[C])[1 for length(Val)])
		    then If W then Return( -$SwAMV )	!   ambig value;
			    else W _ C;			!   set index;
	    end;
	    If W = 0 then Return( -$SwISV )		!   illegal value;
		else If $Sw$Flag[V] land SW$OBV		!   else check L'OR;
		  then If Not No			!     Yes.../No? ;
		    then  $Sw$Value[V] _ $Sw$Value[V]	!	Right! (/X);
				 lor  $Sw$ArgValue[W]	!         LOR value;
		    else  $Sw$Value[V] _ $Sw$Value[V]	!	Wrong! (/noX);
			    land lnot $Sw$ArgValue[W]	!         LAND value;
		  else $Sw$Value[V] _ $Sw$ArgValue[W];	!     No.. set value;
	end;
    end
    else begin						! value not typed;
	If $Sw$Flag[V] land SW$VRQ			! if value required;
	    then Return( -$SwVRQ );			! yes -- give error;
	$Sw$Value[V] _ If $Sw$Flag[V] land SW$NOS	! if /XXX or /noXXX;
	    then If No then 0 else 1			!   then set T or F;
	    else 1;					!   else default =1;
    end;
    Return( V );					! Return index;
end;

};					! End of Generate!Switch!Code macro;


   