;SUBLIB.KAB, TO PRECEDE SUBLIB IN ASSEMBLY
 
;SEQ747
 
 
.SBTTL ISOLATION ROUTINE SUBROUTINE FILE
        .IF NE,.REGSET
;SUBROUTINE TO ACTUALLY SET BITS IN THE ISOLATION ROUTINE'S
;BIT MAP TABLE. ASSEMBLE ONLY IF ROUTINE IS CALLED.
;ENTER ROUTINE WITH R1 HAS BIT REPRESENTING 'WHICH REG'
;TO SET (I.E. , AR,BR,AD,ARX,ETC.)
;ENTER ROUTINE WITH R0 POINTING TO THE ACTIVE BIT MAP TABLE.
;AND R3 POINTS TO ERROR STACK.
 
REGSET: PUSH    R0              ;SAVE A REGISTER
        SHOVE                   ;SAVE LOTS OF REGISTERS
        CMP     (R3)+,(R3)+     ;ADD 4 TO R3
        MOV     R3,100$         ;SET SOURCE ADDRESS(11) OF ACTUAL KL10 DATA
        MOVWRD                  ;AND MOVE IT AS FOLLOWS
100$:   .WORD   0               ;SOURCE ADDRESS FILLED IN
        .WORD   EBUF1           ;TO BE PLACED AT EBUF1
        CLR     R2              ;REGISTERS R2,R1 AND R0
        CLR     R1              ;WILL HOLD 36 BITS OF EXPECTED KL10 DATA
        BISB    6(R3),R2        ;GET BITS 24-27 OF EXPECTED
        SWAB    R2
        BISB    5(R5),R2        ;GET EXPECTED BITS 28-35
        BISB    10(R3),R1       ;GET EXPECTED BITS 4-11
        SWAB    R1
        BISB    7(R3),R1        ;GET EXPECTED BITS 12-19
        CLR     R0              ;CLEAN R0
        BISB    11(R3),R0       ;GET BITS 0-3
 
;SEQ748
 
;FIRST STEPS OF XOR (-A&B .OR. A&-B)
        MOV     #EBUF1,R4       ;GET ADDRESS OF ACTUAL RECEIVED DATA
        BIC     R2,(R4)+        ;(R4)=B...R2,R1,R0=A
        BIC     R1,(R4)+        ;PERFORM '-A&B'
        BIC     R0,(R4)+        ;USING 'BIC' INSTRUCTION
 
;(R3) ALSO POINTS TO ACTUAL KL10 DATA SO...
        BIC     (R3)+,R2        ;PERFORM THE STEP 'A&-B'
        BIC     (R3)+,R1        ;USING 'BIC' INSTRUCTION
        BIC     (R3)+,R0
 
;COMPLETE THE XOR BY 'ORING' OUR TWO RESULTS
        BIS     R0,-(R4)        ;LEAVE RESULT OF
        BIS     R1,-(R4)        ;XOR IN 36-BIT BUFFER
        BIS     R2,-(R4)        ;EBUF1
 
;NOW GET THE POINTER TO THE 36 BIT MASK
        MOV     -10(R3),R0      ;MASK PNTR WAS ON ERROR STACK
        BICB    (R0)+,(R4)+     ;MASK THE RESULTS
        BICB    (R0)+,(R4)+     ;OF THE XOR IN ORDER
        BICB    (R0)+,(R4)+     ;TO TURN IT INTO A
        BICB    (R0)+,(R4)+     ;'DISCREPANCY'
        BICB    (R0)+,(R4)+
        BICB    #360,-1(R4)     ;NO ODD BITS
        BICB    #377,(R4)       ;TURN 5 BYTES OF 36 BIT DATA INTO 3 WORDS
        GRAB    
        POP     R0              ;RESTORE ALL REGISTERS
 
;GO SET BITS IN THE BIT MAP TABLE - R1 HAD 'WHICH REG' BIT - R0 PNTS TO BIT MAP
 
        SHOVE                   ;SAVE SOME REGISTERS
        PUSH    R5              ;SAVE R5
        MOV     R0,R5           ;R5 WILL HOLD TABLE ADDRESS
        MOV     #EBUF1-1,R2     ;GET DISCREPANCY
        MOV     TURING,R3       ;WE'LL RUN A TURNING MACHINE
        MOV     #BRDPIK,R4      ;GET THE PNTR TO THE 'WHICH BOARD' MASKS
        PUSH    #6              ;COUNTER TO SAY WHEN ALL DONE
 
;SEQ749
 
;SIMPLY STATED, OUR TURING MACHINE MOVES LEFT ALWAYS, WITH
;REG R3 THE TAPE. THE 'C' BIT HOLDS THE ACTION. A '1' SAYS MAKS
;AND CHECK THE DISCREPANCY DATA FOR AN ERROR BIT. A '0' SAYS NO MASK
;ACTION, JUST UPDATE THE POINTERS.
 
1$:     ASL     R3              ;LOOK FOR THE NEXT ACTION
        BCC     4$              ;IF 'C'=0, GO UPDATE POINTERS
        BIT     #BIT0,R4        ;ODD OR EVEN ADDRESS IN R4
        BNE     3$              ;ODD ADDRESS SAYS DON'T DO ANYTHING
        INC     R2              ;EVEN ADDRESS SAYS SUPDATE R2 PNTR
3$:     MOVB    (R2),R0         ;DISCREPANCY DATA BYTE INTO R0
        BICB    (R4)+,R0        ;CHECK FOR AN ERROR BIT
        BEQ     1$              ;NO ERROR, GO BACK TO NEXT STATE
        BISB    R1,(R5)         ;ERROR FOUND, SET BIT IN BIT MAP TABLE
 
;UPDATE POINTERS HERE
 
2$:     JIFFO                   ;HOW MANY DISCREPANCY BITS FOR THIS BRD??
        DEC     R0              ;MORE THAN ONE?
        BLE     1$              ;BR IF ONLY ONE OR LESS
        BISB    R1,(R5)         ;SO SET 'MORE THAN ONE' BIT IN BIT MAP TABLE
        BR      1$              ;AND CONUE
4$:     ADD     #2,R5           ;MAKE R5 EVEN
        DEC     (SP)            ;DOWN COUNTER
        BGT     1$              ;NEXT STATE IF NOT FINISHED
        POP     R3              ;KEEP STACK STRAIGHT
 
        POP     R5              ;RESTORE R5
        GRAB                    ;RESORE REGISTERS
        RTS     PC              ;AND OUT
 
TURING: .WORD   ^B1011011010101100
BRDPIK: .BYTE   300             ;BRD 39 (30-35)
 
 
 
;SEQ750
 
        .BYTE   77              ;BRD 41 (24-29)
        .BYTE   360             ;BRD 41
 
        .BYTE   17              ;BRD 43 (18-23)
        .BYTE   374             ;BRD 43
 
        .BYTE   3               ;BRD 49 (12-17)
 
        .BYTE   300             ;BRD 51 (6-11)
 
        .BYTE   77              ;BRD 53 (0-5)
        .BYTE   360             ;BRD 53
        .EVEN
        .ENDC
 
;SEQ751
 
        .IF NE,.SEVBRD          ;ASEMBLE CODE ONLY IF USED
 
;SUBROUTINE TO GO INTO A BIT MAP TABLE AND SEE HOW MANY
;BRDS OF THE SAME REG HAVE FAILED. 'WHICH REG' IS PASSED TO
;THE ROUTINE IN R0, AND BIT MAP TABLE IS AN IN-LINE PARAMETER
;FOLLOWING THE SUBROUTINE CALL. THE NUMBER OF BRDS HAVING
;A FAILURE IN THE SAME REG IS RETURNED IN R0.
 
SEVBRD: PUSH    R1              ;SAVE REG
        PUSH    #0              ;USE STACK FOR A COUNT
        MOV     (R5)+,R1        ;GET THE TABLE TO BE TESTED
 
1$:     BITB    R0,(R1)         ;BIT SET FOR THIS BRD & REG
        BEQ     2$              ;BR IF NO
        INCB    (SP)            ;ADD 1 TO TOTAL IF YES
 
2$:     INCB    1(SP)           ;THIS COUNT SAYS HOW MANY BRDS HAVE BEEN TESTED
        ADD     #2,R1           ;ADVANCE TO NEXT BOARD INFO
        CMPB    #^D6,1(SP)      ;TESTED ALL YET?
        BGT     1$              ;BR IF NOT ALL TESTED YET
        MOVB    (SP)+,R0        ;PUT TOTAL BRD ERRORS COUNT IN R0
        POP     R1              ;RESTORE REG
  
        RTS     R5              ;AND DONE
 
        .ENDC
 
        .IF     NE,.CLREDP
;SUBROUTINE TO CLEAR THE 6 EDP BOARDS FROM
;AN 'UML' TABLE, ENTER THE SUBROUTINE WITH R0
;POINTING TO TH 'UML' TABLE TO BE CLEARED.
 
CLREDP:
        PUSH    R1              ;SAVE REGISTER
        MOV     #UMLEDP,R1      ;GET PNTR TO A BUFFER
        BIC     (R1)+,(R0)+     ;PROCEED TO CLEAR ALL
        BIC     (R1)+,(R0)+     ;EDP UML BITS FROM
        BIC     (R1)+,(R0)+     ;THE DESIRED UML TABLE
        BICB    1(R1),1(R0)     ;DON'T BOTHER THE 'HI PRIORITY' BOARD
        POP     R1              ;RESTORE THE REG
 
 
        RTS     PC
 
UMLEDP: UML<39,41,43,49,51,53>
        .ENDC
 
 
        .IF     NE,.EDP
 
;THIS IS TO BE FOLLOWED BY SUBLIB ITSELF.
 
