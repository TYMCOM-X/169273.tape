;ISO.KAB
.TITLE TEBOXB ISOLATION ROUTINE MODULES: ISOPRM,ISOMMAC
 
        .NLIST  CND,TOC,BEX
        .ENABLE ABS,AMA
        .=3000
PRGHLT= EMT!2           ;PROGRAM HALT, DON'T CHECK SWITCH
PNTAL=  EMT!24          ;PRINT ASCII LINE, ADDRESS IN R0
PNT36=  EMT!42          ;PRINT 36 BIT NUMBER, ADDRESS IN R0
WWADR=  EMT!75          ;WRITE CRAM ADDRESS
BURST=  EMT!131         ;BURST MBOX CLOCK
ECLOK=  EMT!135         ;EBOX CLOCK
PNT36B= EMT!134         ;PRINT 36 BIT NUMBER IN BINARY
DFVMA=  EMT!124         ;DIAGNOSTIC FUNCTION READ VMA
PNTDEC= EMT!37          ;PRINT DECIMAL NUMBER IN R0
DFRDMV= EMT!117         ;DIAGNOSTIC FUNCTION READ & MOVE
DFWRTT= EMT!141         ;DF WRITE, TRAILING PARAMETERS
DFRDT=  EMT!140         ;DF READ, TRAILING PARAMETER
DTEBAS= EMT!113         ;RETURN DTE20 BASE ADDRESS
$PMSG=  EMT!25          ;PRINT MESSAGE, TRAILING PARAMETER
PCRLF=  EMT!31          ;PRING CR-LF
PNTUML= 104532
        $$CLIT=$$LITT   ;LITERAL STORAGE ASSIGNMENT
LDAR=   77              ;LOAD THE AR
 
.MACRO  PMSG    $ARG
        $PMSG,$$CLIT
                .NLIST  SRC
                $$CLC=.
                .=$$CLIT
                .ASCIZ  %$ARG%
                $$CLIT=.
                .=$$CLC
                .LIST  SRC
.ENDM
 
 
.MACRO  PUSH    A
                .NLIST  SRC
        .IRP  B,<A>
MOV  B,-(SP)    ;PUSH B ON STACK
        .ENDR
                .LIST  SRC
.ENDM

.MACRO  POP    A
                .NLIST  SRC
        .IRP  B,<A>
        MOV    (SP)+,B          ;POP STACK INTO B
        .ENDR
                .LIST SRC
.ENDM
 
BLKO=2
DATAO=3
BLKI=0
DATAI=1
CONO=4
CONI=5
CONSZ=6
CONSO=7
APR=0
PI=4
PAG=10
CCA=14
TIM=20
MTR=24
 
 
 
 
 
 

.MACRO  S10.    A,B,C
.NLIST
        .NARG   XXX
        .IF     EQ <XXX-1>
          .WORD A
        .IFF
        .IF     EQ      C
        BP.     B
        .IFF
        BP.     -B
        .ENDC
        DF.     A
        .ENDC
.LIST
.ENDM   S10.

 
 
 
.MACRO WD36    A,B,C
  .NLIST    SRC
  .BYTE <377&C>,<<<C&7400>/400>!<<B&17>*20>>,<<B&7760>/20>
  .BYTE <A&377>,<<A&7400>/400>
  .LIST    SRC
.ENDM


 
 

.MACRO  I10    OP,CAC,CI,CAD,CXR
       ADH=0
       ADL=0
  .IF    NB,CAD
  .IRPC AD1,CAD
  .IIF  GE,<ADL-10000>,ADH=ADL/10000
  ADL=10*<ADL&7777>+AD1
  .ENDM
  .ENDC
  .IIF B,CAC,AC=0
  .IIF NB,CAC,AC=CAC
  .IIF B,CI,I=0
  .IIF NB,CI,I=CI
  .IIF B,CXR,XR=0
  .IIF NB,CXR,XR=CXR
.NLIST  SRC
  .BYTE <ADL&377>,<<ADL/400>!<ADH*200&377>>,<AC&1*200+<I*100+<XR*4>>+<ADH/2>>
  .BYTE <OP&37*10+<AC/2>>,<OP/40>
.LIST    SRC
.ENDM    I10

 
.MACRO  IO10    OP,DV,CI,AD,CXR
  I=0
  .IIF NB,CI,I=CI
  XR=0
.IIF  NB,CXR,XR=CXR
  .IF B,DV
  XOP=$'OP
XDV=$$'OP
  .IFF
  XOP=OP
  XDV=DV
  .ENDC
        ADH=0
        ADL=0
  .IRPC AD1,AD
.IIF GE,<ADL-10000>,ADH=ADL/10000
  ADL=10*<ADL&7777>+AD1
  .ENDM
.NLIST  SRC
  .BYTE <ADL&377>,<<ADL/400>!<ADH*200&377>>,<XOP&1*200+<I*100+<XR*4>>+<ADH/2>>
  .BYTE <XDV&374+<XOP/2>>,<XDV/400+16>
.LIST  SRC
.ENDM  IO10

 
 
R0=    %0               ;GENERAL REGISTERS
R1=    %1
R2=    %2
R3=    %3
R4=     %4
R5=    %5
R6=    %6
SP=    %6               ;STACK POINTER
PC=    %7               ;PROGRAM COUNTER

 
 
;*BIT ASSIGNMENTS

BIT00=  1
BIT0=   BIT00
BIT01=  2
BIT1=  BIT01
BIT02=  4
BIT2=   BIT02
BIT03=  10
BIT3=   BIT03
BIT04=  20
BIT4=   BIT04
BIT05=  40
BIT5=   BIT05

BIT06=  100
BIT6=   BIT06
BIT07=  200
BIT7=   BIT07
BIT08=  400
BIT8=   BIT08

BIT09=  1000
BIT9=   BIT09
BIT10=  2000
BIT11=  4000

BIT12=  10000
BIT13=  20000
BIT14=  40000
BIT15=  100000

 
 
.REM    %
        KL10 AC DEFINITIONS %
        
        AC0=    000000
        AC1=    000001
        AC2=    000002
        AC3=    000003
        AC4=    000004
        AC5=    000005
        AC6=    000006
        AC7=    000007
        AC10=   000010
        AC11=   000011
        AC12=   000012
        AC13=   000013
        AC14=   000014
        AC15=   000015
        AC16=   000016
        AC17=   000017
.REM    %
        KL10 INSTRUCTION OP CODES
        %
MOVE=   200
MOVEI=  201
MOVEM=  202
LSH=    242
BLT=    251
AOBJN=  253
JRST=   254
XCT=    256
;MAP=   257
ADD=    270
ADDI=   271
SUB=    274
SUBI=   275
CAIE=   302
CAIN=   306
CAIG=   307
CAME=   312
JUMPL=  321
JUMPGE= 325
JUMPN=  326
SKIP=   330
SKIPE=  332
AOS=    350
SOJGE=  365
SOJG=   367
SETZM=  402
ANDI=   405
IOR=    434
IORI=   435
SETOM=  476
HRLI=   505
HLLZS=  513
HRLZI=  515
HRRI=   541
HRRZI=  551
HRRZM=  552
TRNE=   602
TLNE=   603
TRNN=   606
TLNN=   607
TRZ=    620
TRZN=   626
TRC=    640
TRCE=   642

 
 
.SBTTL  *ISOMAC* ISOLATION ROUTINE MACROS
 
.MACRO  $SAVE
 
        MOV     R5,$$RET                ;SAVE RETURN ADDRESS TO DIACON
        MOV     R4,$$TAB                ;SAVE PTR TO DIACON'S DATA TABLE
        MOV     R3,$$ERS0               ;SAVE PTR TO BEGINNING OF ERROR STACK
        MOV     R2,$$ERS                ;SAVE PTR TO CURRENT ERROR STACK ENTRY 
 
        .ENDM
         
 
.MACRO  CLRUML  ARG
        .CLRUML=1
         
        .IF B,ARG
        JSR     PC,CLRUML
        .ENDC
 
        .IF  NB,ARG
        MOV     #ARG,R0
        JSR     PC,CLRUML
        .ENDC
 
        .ENDM
 
        
 
.MACRO  $CLRUML
 
        MOV     #$$UML,R0               ;START WITH $$UML CLEAR
        CLR     (R0)+
        CLR     (R0)+
        CLR     (R0)+
        CLR     (R0)
        .ENDM
 
 
.MACRO  $ABORT
 
.NLIST
.ABORT: PMSG    <\AN INCONSISTENCY EXISTS BETWEEN THE MAINLINE TEST>
        PMSG    <\AND THE ISOLATION ROUTINE OR ELSE THE ERROR STACK HAS>
        PMSG    <\BECOME POLLUTED. PLEASE RELOAD AND RERUN THE>
        PMSG    <\DIAGNOSTIC.>
        JMP     @$$RET
 
.LIST
.ENDM
 
.MACRO  $HELP
 
.NLIST
        PMSG<\TYPE "HC" FOR MORE HELP, "SED" TO CONTINUE TESTING.>
        PRGHLT
        PMSG<\\EACH SUBTEST LOADS AND CHECKS A FORCING MICROWORD TO THE>
        PMSG<\CR.  THE STATE OF THE CONTROL LOGIC SHOULD THEN BE THE NOMINAL>
        PMSG<\STATE, GIVEN BY THE TABLES AT THE BEGINNING OF THE INITIALIZATION>
        PMSG<\SECTION OF THE LISTING, MODIFIED BY ANY CHANGES IN THE MAINLINE>
        PMSG<\TEST CODE AND FURTHER MODIFIED BY THE VALUES FOR EACH SUBTEST>
        PMSG<\GIVEN IN THE TABLES AT THE END OF THE TEST LISTING.>
        PMSG<\\IF STANDARD TEST PATTERNS ARE USED, REFER TO THE HEADER OF>
        PMSG<\SUBROUTINE "PATTY" FOR THE EXACT BIT PATTERNS.>
        PMSG<\\IF A SIGNAL NAME IS CALLED OUT AS STUCK AT 1,>
        PMSG<\THE FAULT MIGHT BE ON ANY BOARD IN THAT RUN.  CONSULT>
        PMSG<\THE WIRE LIST IF REPLACING THE CALLED-OUT BOARD(S) DOES>
        PMSG<\NOT CORRECT THE PROBLEM.>
        JMP     @$$RET
.LIST
        .ENDM
 
 
 
.MACRO  $HELPM
.NLIST
        PMSG<\TYPE "HC" FOR MORE HELP, "SED" TO CONTINUE TESTING.>
        PRGHLT
        PMSG<\\THIS IS A MICROCODED TEST WHICH RUNS WITH CLOCK BURSTS.  REFER TO>
        PMSG<\THE LISTING OF THE EBOX MICROCODE FOR THE MICROWORDS USED AND THE>
        PMSG<\OPERATIONS PERFORMED.  TESTS WHICH USE "INCREMENTAL BURST" MODE>
        PMSG<\ALWAYS BEGIN WITH THE FIRST MICROWORD IN THE SEQUENCE AND BURST>
        PMSG<\THE EBOX CLOCK ONCE MORE THAN THE SUBTEST #, I.E. TWO FOR SUBTEST>
        PMSG<\ONE, SIX FOR SUBTEST FIVE ETC.>
        JMP     @$$RET
.LIST
.ENDM
 
 
.MACRO  $ERR36
 
.ERR36= 1
.TST36= 1
.XOR=   1
        JSR     PC,ERR36        ;RECONSTRUCT A 36-BIT ERROR
.ENDM
 
 
.MACRO  $TSTD
.TSTD=  1
.ERR8=  1
.BITCNT=        1
  JSR   PC,TSTD         ;SEE IF ONE BIT FAILURE
.ENDM
 
 
 
.MACRO  $TST36
 
.TST36= 1
        JSR     PC,TST36        ;COUNT 1'S IN $$BUF. ANS IN R0.
.ENDM
 
.MACRO  $ERR80
 
.ERR80= 1
.TST80= 1
.XOR=   1
  JSR   PC,ERR80                ;RECONSTRUCT A MICROWORD ERROR
.ENDM
  
 
.MACRO  $TST80
 
.TST80= 1
  JSR   PC,TST80                ;COUNT 1'S IN $$XOR.  ANS IN R0.
.ENDM
 
 
.MACRO  $DSNOOP
 
.DSNOOP=1
        JSR     PC,DSNOOP       ;FIND FAILING DATA PATH BOARDS
.ENDM
 
 
.MACRO  $CSNOOP
.CSNOOP=        1
  JSR   PC,CSNOOP               ;FIND FAILING CRAM BOARDS
.ENDM
 
 
.MACRO  $PARSE  P
.PARSE= 1
.ERR8=  1
.BITCNT=        1
  MOV #P,R0                     ;POINTER TO LIST
  JSR   PC,PARSE                ;SEE IF BITS ARE ON ERROR STACK
.ENDM
 
 
.MACRO  $FIND   P1,P2
.PARSE= 1
.ERR8=  1
.BITCNT=        1
  .BYTE P2              ;SEE IF INDEX P1 IS ON ERROR
  .BYTE P1              ;STACK WITH BITS P2 FAILING
.ENDM
 
 
.MACRO  $FEND   P1,P2
  .BYTE P2              ;SEE IF INDEX P1 IS ON ERROR
  .BYTE P1!BIT7         ;STACK WITH BITS P2 FAILING
.ENDM
 
 
.MACRO  $CCALL
.CCALL= 1
  JSR   PC,CCALL                ;SET FAILING CONTROL BOARD SLOTS
.ENDM
 
 .MACRO $PSTUCK
.PSTUCK=        1
  JSR   PC,PSTUCK               ;PRINT A STUCK LINE MESSAGE
.ENDM
 
 .MACRO $BITCNT
.BITCNT=        1
  JSR   PC,BITCNT               ;COUNT FAILING BITS
.ENDM
 
 .MACRO $ERR8
.ERR8=  1
  JSR   PC,ERR8         ;RECONSTRUCT A FAILING DCOMP BYTE
.ENDM
 
 
.MACRO  $AND
 
.ANDOR= 1
        JSR     PC,AND          ;AND 36-BITS IN $$BUF WITH $$AND
.ENDM
 
.MACRO  $OR
 
.ANDOR= 1
        JSR     PC,OR           ;OR 36-BITS IN $$BUF WITH $$OR
.ENDM
 
.MACRO  $XOR
 
.XOR=   1
        JSR     PC,XOR          ;COMPUTE XOR
.ENDM
 
.MACRO  $PNTUML T
.LIST   ME,MEB
        PNTUML          ;PRINT BOARD CALLOUTS
        .IF     NB,T
        .IFT
         .WORD T                ;UML TABLE POINTER
        .IFF
         .WORD  $$UML   ;IN $$UML
        .ENDC
.NLIST ME,MEB
.ENDM   $PNTUML
 
.MACRO  $SSET  SS,T
SLOT.   SS
.NLIST  SRC
 
.IF     B,T
  BIS   #B,WW+$$UML
.ENDC
 
.IF     NB,T
.NTYPE  ZZZ,T
 
.IF     NE,<ZZZ&70-10>
 BIS    #B,WW+T         ;SET BIT FOR SLOT SS
.ENDC
 
.IF     EQ,<ZZZ*70-10>
 BIS    #B,WW'T
.ENDC
 
.ENDC
.LIST   SRC
.ENDM   $SSET
 
.MACRO  $UML  SSS
        T=0
        W1=0
        W2=0
        W3=0
        W4=0
 
        .IRP    SS,<SSS>
        SLOT.   SS,T
        .IIF EQ,WW,     W1=W1!B
        .IIF EQ,<WW-2>, W2=W2!B
        .IIF EQ,<WW-4>, W3=W3!B
        .IIF EQ,<WW-6>, W4=W4!B
        .ENDM
        .NLIST  SRC
.WORD W1,W2,W3,W4
        .LIST   SRC
.ENDM   $UML
 
.MACRO  $STST   SS,T
SLOT.   SS
.NLIST  SRC
 
.IF     B,T
 BIT    #B,WW+$$UML
.ENDC
 
.IF     NB,T
.NTYPE  ZZZ,T
.IF     NE,<ZZZ&70-10>
 BIT    #B,WW+T         ;TEST BIT FOR SLOT SS
.ENDC
 
.IF     EQ,<ZZZ&70-10>
 BIT    #B,WW'T
.ENDC
 
.ENDC
.LIST   SRC
.ENDM   $STST
 
.MACRO  $SETHP  SS,T
.NLIST  SRC
.IF     B,T
  MOVB #^D'SS,$$UML+6
.ENDC
 
.IF     NB,T
.NTYPE  ZZZ,T
.IF     NE,<ZZZ&70-10>
  MOVB  #^D'SS,T+6
.ENDC
 
.IF     EQ,<ZZZ&70-10>
  MOVB #^D'SS,6'T
.ENDC
 
.ENDC
.LIST   SRC
.ENDM   $SETHP
 


.SBTTL *EQUATE* TRAP, DIAGNOSTIC FUNCTION & BIT DEFINITIONS
;TRAP DEFINITIONS FOR SUBROUTINE CALLS:

        CLRWRD =        TRAP
        SETWRD =        TRAP!1
        ROLWRD =        TRAP!2
        RORWRD  =       TRAP!3
        MOVWRD =        TRAP!4
        CLRMIC =        TRAP!5
        SHOVE =         TRAP!6
        GRAB =          TRAP!7
        AD =            TRAP!10
        AR =            TRAP!11
        BR      =       TRAP!12
        COND =          TRAP!13
        DISP =          TRAP!14
        FE =            TRAP!15
        FM      =       TRAP!16
        J       =       TRAP!17
        MEM     =       TRAP!20
        MQ      =       TRAP!21
        NUM     =       TRAP!22
        SC      =       TRAP!23
        SCAD =          TRAP!24
        SH      =       TRAP!25
        T       =       TRAP!26
        VMA     =       TRAP!27
        ADT     =       TRAP!30
        ART     =       TRAP!31
        BRT     =       TRAP!32
        CONDT   =       TRAP!33
        DISPT   =       TRAP!34
        FET     =       TRAP!35
        FMT     =       TRAP!36
        JT      =       TRAP!37
        MEMT    =       TRAP!40
        MQT     =       TRAP!41
        NUMT    =       TRAP!42
        SCT     =       TRAP!43
        SCADT   =       TRAP!44
        SHT     =       TRAP!45
        TT      =       TRAP!46
        VMAT    =       TRAP!47


;SEQ135

        MWORD   =       TRAP!50
        CHKMIC  =       TRAP!51
        M36     =       TRAP!52
        M36T    =       TRAP!53
        MICLD   =       TRAP!54
        ACSET   =       TRAP!55
        ACSTT   =       TRAP!56
        ARLOD2  =       TRAP!57
        DCOMP   =       TRAP!60
        MCOMP   =       TRAP!61
        RCOMP   =       TRAP!62
        P80     =       TRAP!63
        P36     =       TRAP!64
        P16     =       TRAP!65
        PATCON  =       TRAP!66
        CTLMCR  =       TRAP!67
        CTLCMP  =       TRAP!70
        ACREF   =       TRAP!71
        DATCOM  =       TRAP!72
        DATEVE  =       TRAP!73
        DATODD =        TRAP!74
        CLKMCR =        TRAP!75
        CLKCMP  =       TRAP!76
        IRMCR   =       TRAP!77
        IRCMP   =       TRAP!100
        CLEAR   =       TRAP!101
        CLRBUF  =       TRAP!102
        SETBUF  =       TRAP!103
        ROLBUF  =       TRAP!104
        RORBUF  =       TRAP!105
        CLR$M  =        TRAP!106
        FLGMCR  =       TRAP!107
        FLGCMP  =       TRAP!110
        COMBUF  =       TRAP!111
        SPARE   =       TRAP!112
        PI.CHK  =       TRAP!113
        MEMREQ  =       TRAP!114
        NOMEMR  =       TRAP!115
        NOCON0  =       TRAP!116
        XCTBUF  =       TRAP!117


;SEQ136

        XBUF0   =       TRAP!120
        STUFF   =       TRAP!121
        SCDMCR  =       TRAP!122
        SCDCMP  =       TRAP!123
        AR2SC   =       TRAP!124
        CA2SC  =        TRAP!125
        GETMIC  =       TRAP!126
        INCWRD  =       TRAP!127
        PARCHK  =       TRAP!130
        M.RESPSIM =     TRAP!131
        $PNTUML =       TRAP!132
        RUNCLK  =       TRAP!133
        CRMHLT  =       TRAP!134
        CRADRD  =       TRAP!135
        ECALT   =       TRAP!136
        EACALL  =       TRAP!137

;SEQ137

;DIAGNOSTIC FUNCTION & BIT DEFINITIONS:

;APR BOARD, M8539:
        EAPR    =       ^D13
        RAPR    =       110     ;USE DIAGNOSTIC FUNCTIONS 110-117.

;CLK BOARD, M8526:
        ECLK    =       ^D35    ;READ CLK DATA ON EBUS BITS 30-35.
        RCLK    =       100     ;USE DIAGNOSTIC FUNCTIONS 100-107.
        LCLK    =       40      ;LOAD CLOCK REGISTERS WITH 40-47.

;CON BOARD, M8525:
        ECON    =       ^D24    ;READ CON DATA ON EBUS BITS 18-24.
        RCON    =       130     ;USE DIAGNOSTIC FUNCTIONS 130-157.
;CRAM BOARD, M8528:
        RCRM    =       140     ;USE DIAGNOSTIC FUNCTIONS 140-147.

;CTL BOARD, M8527:
        ECTL    =       ^D31    ;READ CTL DATA ON EBUS BITS 24-28.
        RCTL    =       100     ;USE DIATGNOSTIC FUNCTIONS 100-107.

;VMA BOARD, M8523:
        RVMA    =       150     ;USE DIAGNOSTIC FUNCTIONS 150-157


;SEQ138

;IR BOARD, M8522:
        EIR     =       ^D17    ;READ IR DATA ON EBUS BITS 12-17.
        RIR     =       130     ;USE DIAGNOSTIC FUNCTIONS 130-137.

;MCL BOARD, M8530:
        EMCL    =       ^D23    ;RED MCL DATA ON EBUS BITS 18-23.
        RMCL    =       100     ;USE DIAGNOSTIC FDUNCTIONS 100-107.

;NEXT ADDRESS BOARD, M8511:
        ECRA    =       ^D5     ;READ CRA DATA ON EBUS BITS 0-5.
        RCRA    =       140     ;USE DIAGNOSTIC FUNCTIONS 140-147.

;SCAD BOARD, M8524:
        RSCAD   =       130     ;USE DIAGNOSTIC FUNCTIOS 130-137.


;SEQ139

;A FEW CONVENTIONS

        SUBNR   =       R5
        BRXIS0  =       BIT0
        BR.IS0  =       BIT0
        NOCARE  =       377
        ARXST   =       BIT1
        NEW.SC  =       BIT2
        NEG1    =       177777
        ZOT     =       0
;EQUATES NECESSARY AS INDEX POINTERS FOR DATA PATH "EDPTST" ROUTINE
        .ZERO   =       0
        .ONES   =       2
        .PATN   =       4
        .PATN1  =       6
        .PATN2   =       10
        .PATN3  =       12
        .PATN4  =       14
        .PATN5  =       16
        .PATN6  =       20
        .PATN7  =       22

        RETURN  =       3       ;MICRO-CODE FOR "RETURN"
        EACAL   =       1       ;MICRO-CODE FOR "EACALL"
 
;SOME CLOCK COUNT EQUATES NECESSARY FOR THE PI BOARD TEST
        MHZRAT  =       32      ;FINAL CLOCK RATE FOR KL10
        DRPCYC  =       ^D3     ;M-CLKS NECESSARY FOR PI CYCLE TO DROP
                                ;AFTER A PI DISMISS
        PI4CNT  =       ^D17+DRPCYC     ;NO.CLOCKS TO INITIATE A LOAD/TEST
                                ;SEQUENCE ON THE PI BOARD
        FRCXFR  =       <^D8*MHZRAT>+1  ;NO. CLOCKS TO CAUSE "PI XFER FORCE"
                                ; TO SET
 
;EQUATES FOR CRA6 EBUS DATA POINTERS
        EDATAA=0
        EDATAB=2
        EDATAC=4
        EDATAD=6
        EDATAE=10
        EDATAF  =12
        EDATAG=14
        EDATAH=16
        EDATAI=20
        NOEDAT=377
;ERROR FORMAT TYPE EQUATES:
        FT3=    12
        FT6=    14
        FTM36=   6
        FT10=   22
        DPAR=   120
        DPBR=   121
        DPMQ=   122
        DPFM=   123
        DPBRX=  124
        DPARX=  125
        DPADX=  126
        DPAD=   127
 
;SPECIAL EQUATES FOR ISOLATION ROUTINES
        ARERR   =BIT0
        ARXERR  =BIT3
        BRERR   =BIT1
        BRXERR  =BIT4
        MQERR   =BIT6
        ADERR   =BIT2
        ADXERR  =BIT5
        FMERR   =BIT7
 
 
 
 
;SOME MACHINE PARAMETERS:
 
        CBITS=  ^D75    ;TOTAL NUMBER OF CRAM BITS
        CBRD=   ^D14    ;CRAM BITS/BOARD (EXCEPT DRA)
 
;DEFAULTS FOR ISOLATION ROUTINE CONDITIONAL ASSEMBLY FALGS:
 
        .ERR8=  0
        .ERR36= 0
        .ERR80= 0
        .BITCNT=0
        .TSTD=  0
        .TST36= 0
        .TST80= 0
        .DSNOOP=0
        .CSNOOP=0
        .ANDOR= 0
        .XOR=   0
        .PARSE= 0
        .CCALL= 0
        .PSTUCK=0
        .JIFF=  0
        .BIC36= 0
        .REGSET=0
        .EDP=   1
        .CLRUML=0
        .  0
        .BIRDS= 0
        .CLREDP=0
        .SEVBRD=0
 
 
 
.SBTTL *ISOTAB* TABLE EQUATING BOARDS TO SLOTS
 
.RADIX 10
 
        APR=    34
        CLK=    32
        CON=    35
        CRA=    45
        CRM0=   52      ;CRM WITH N=0
        CRM4=   50      ;CRM WITH N=4
        CRM8=   44      ;CRM WITH N=8
        CRM12=  42      ;CRM WITH N=12
        CRM16=  40      ;CRM WITH N=16
        CSH=    23
        CTL=    36
        EDP0=   53      ;EDP WITH BITS 00-05
        EDP6=   51      ;EDP WITH BITS 06-11
        EDP12=  49      ;EDP WITH BITS 12-17
        EDP18=  43      ;EDP WITH BITS 18-23
        EDP24=  41      ;EDP WITH BITS 24-29
        EDP30=  39      ;EDP WITH BITS 30-35
        IR=     48
        MBX=    21
        MBZ=    20
        MCL=    47
        PAG=    30
        MTR=    33
        PI=     31
        SCD=    54
        SHM=    46
        SPARE=  13
        XLEFT=  06      ;TRANSLATOR FOR BITS 00-11
        XMID=   05      ;TRANSLATOR FOR BITS 12-23
        XRIGHT= 04      ;TRANSLATOR FOR BITS 24-35
        VMAPC=  38
 
.RADIX 8

 
 
 


.SBTTL  *EMAC*  EBOX DIAGNOSTIC MACRO DEFINITIONS
.MACRO  $CLRWD  LOC
        .IF NB LOC
        CLRWRD          ;CLEAR 5 BYTES BEGINNING
        .WORD LOC       ;WITH LOCATION LOC
        .ENDC
        .IF B LOC
        CLRBUF          ;CLEAR 36 BIT BUFFER
        .ENDC
        .ENDM
.MACRO  $SETWD  LOC
        .IF NB LOC
        SETWRD          ;SET ONES TO 36 BITS BEGINNING
        .WORD LOC       ;WITH LOCATION LOC
        .ENDC
        .IF B LOC
        SETBUF          ;1'S TO 36 BIT BUFFER
        .ENDC
        .ENDM
.MACRO  $ROLWD  LOC
        .IF NB LOC
        ROLWRD          ;ROTATE 36-BIT BUFFER AT LOC
        .WORD LOC               ;LEFT ONE BIT
        .ENDC
        .IF B LOC
        ROLBUF          ;ROTATE 36-BIT BUFFER LEFT
        .ENDC
        .ENDM
.MACRO  $RORWD  LOC
        .IF NB LOC
        RORWRD          ;ROTATE 36-0BIT BUFFER AT LOC
        .WORD LOC       ;RIGHT ONE BIT
        .ENDC
        .IF B LOC
        RORBUF          ;ROTATE 36-BIT BUFFER RIGHT
        .ENDC
        .ENDM

;SEQ117

.MACRO  $MOVWD  S,D
        MOVWRD          ;MOVE 5 BYTES

        .WORD S         ;FROM S
        .WORD D         ;TO D
        .ENDM
 
 
        .MACRO  UML     SSS
                T=0
                W1=0
                W2=0
                W3=0
                W4=0
                HP=0
                .IRP    SS,<SSS>
                .IF     EQ,HP
                        .NARG   A
                        .IIF GT,<A-1>,HP=^D'SS
                .ENDC
                SLOT.   SS,T
                .IIF EQ,WW,     W1=W1!B
                .IIF EQ,<WW-2>, W2=W2!B
                .IIF EQ,<WW-4>, W3=W3!B
                .IIF EQ,<WW-6>, W4=W4!B
                .ENDM
                .NLIST  SRC
        .WORD   W1,W2,W3
        .WORD   W4!HP
                .LIST   SRC
        .ENDM   UML
 
        .MACRO  SLOT.   SS,T
                S=^D'SS
                .IIF GT,<S-54.>,.ERROR          ;SLOT NUMBER TOO BIG
                .IIF LE,S,.ERROR                ;NEGATIVE SLOT NUMBER
                W=S/16.
                .IIF B,T,WW=2*W
                .IIF NB,T,WW=2*W+T
                B=1
                .REPT   16.*W+15.-S
                B=B+B
                .ENDM
        .ENDM   SLOT.
 
.MACRO  PNTID
          TRAP 125                              ;PRINT LOAD ID
.ENDM   PNTID
 
.MACRO PNTUML   T
        TRAP    132                     ;PRINT BOARD CALLOUTS
        .IF     NB,T
        .IFT
          .WORD T                       ;UML TABLE POINTER
        .ENDC
.ENDM   PNTUML
 
.MACRO  MSK36R
        $MSK36R=1
.IIF    NDF,TRAPS,      JSR     R5,MSK36R       ;36-BIT COMPARE
.IIF    DF,TRAPS,       TRAP    23              ;36-BIT COMPARE
.ENDM   MSK36R


 
 
 
 
        .MACRO  SSET    SS,T
        .NTYPE  ZZZ,T
        SLOT.   SS
        .NLIST  SRC
        .IF     EQ,<ZZZ&70-10>
        .IFF
          BIS   #B,WW+T ;SET BIT FOR SLOT SS
        .IFT
          BIS   #B,WW'T
        .ENDC
        .LIST   SRC
        .ENDM   SSET
 
        .MACRO  SETHP   SS,T
        .NLIST  SRC
        .NTYPE  ZZZ,T
        .IF     EQ,<ZZZ&70-10>
        .IFF
          MOVB  #^D'SS,T+6
        .IFT
           MOVB #^D'SS,6'T
        .ENDC
        .LIST   SRC
        .ENDM   SETHP
 
 
.MACRO  ISOINI
        CLRUML  STNDRD  ;CLEAR STANDARD UML TABLE
        MOV     R4,DATAPNT      ;SAVE PNTR TO DIACON DATA BLOCK
        MOV     R3,ERRDAT       ;SAVE PNTR TO ERR STACK BASE(FIRST FREE DATUM)
        MOV     R2,ERRPNT       ;SAVE PNTR TO ERROR STACK TOP(FIRST FREE)
        PUSH    R5              ;SET UP FOR MACRO 'FINI' AT EXIT TIME
.IF     NE,.EDP
          CLRUML        TMPUML  ;CLEAR STANDARD 'TEMP' UML TABLE IF EXISTS
        .ENDC
.ENDM
 
 
.MACRO  OR.UML  SRC,DST
        PUSH    <R0,R1>
        MOV     SRC,R1          ;GET SOURCE INTO R1
        MOV     DST,R0          ;GET DESTINATION INTO R0
        BIS     (R1)+,(R0)+             ;SET DESIRED UML
        BIS     (R1)+,(R0)+             ;BITS INTO DESTINATION
        BIS     (R1)+,(R0)+             ;UML TABLE
        CLRB    (R0)            ;CLEAR OLD PRIORITY
        BIS     (R1)+,(R0)+             ;SET NEW PRIORITY
        POP     <R1,R0>
        .ENDM
 
 
 
.MACRO  RSTINI
        MOV     DATAPNT,R4
        MOV     ERRDAT,R3
        MOV     ERRPNT,R2
.ENDM
 
 
 
.MACRO  FINI
        JMP     @(SP)+
.ENDM
 
 
 
.MACRO  RSTMBX
.IIF    NDF,TRAPS,      JSR     R5,RSTMBX       ;RESET KL
.IIF    DF,TRAPS,       TRAP    51              ;RESET KL
.ENDM   RSTMBX
 
 
.MACRO  STEXCT  ARG
        $STEXCT=1
        
.IIF    NDF,TRAPS,      JSR     R5,STEXCT               ;START EXECUTION
.IIF    DF,TRAPS,       TRAP    46                      ;START EXECUTION
          .WORD ARG                                     ;POINTER TO INSTRUCTION
.ENDM   STEXCT
 

.MACRO  STEP10  INSTR,EPNT
.IIF    NDF,TRAPS,      JSR     R5,STEP10       ;STEP TO EVENT OR BURST NXT WD POS
.IIF    DF,TRAPS,       TRAP    16              ;STEP TO EVENT OR BURST NXT WD POS
          .WORD INSTR                           ;INSTRUCTION TO EXECUTE
        S10.    EPNT
.ENDM   STEP10

 
 
.MACRO  FIND    ARG                     ;GENERATES FIND CALL
.IIF    NDF,TRAPS,      JSR     R5,FIND ;STEP TO EVENT
.IIF    DF,TRAPS                TRAP 14 ;STEP TO EVENT
        S10.    ARG
.ENDM   FIND


 
.MACRO  MSKDAT  EXP,MSK         ;GENERATES MSKDAT CALL
        $MSKDAT=1
.IIF    NDF,TRAPS,      JSR     R5,MSKDAT ;DTE20 COMPARE
.IIF    DF,TRAPS,       TRAP    25      ;DTE20 COMPARE
        .IF     B,MSK
        .IFT
          .WORD ZERO..
        .IFF
          .WORD MSK                     ;MASK POINTER
        .ENDC
          .WORD EXP                     ;EXPECTED POINTER
.ENDM   MSKDAT
 
 
 
.MACRO  XQT     A
        $XQT=1
        .IF     B,A
        .IFF
          MOV   #A,R0
        .ENDC
.IIF    NDF,TRAPS,      JSR     R5,XQT          ;DO EXECUTE ROUTINE
.IIF    DF,TRAPS,       TRAP    47              ;DO EXECUTE ROUTINE
.ENDM   XQT

 
 
 
 
 
 
 
.MACRO  CMP.F   S
        $CMP.F=1
.IIF    DF,TRAPS,       TRAP    76              ;SCAN THE ERROR STACK
          .WORD S                               ;SPEC TABLE POINTER
.ENDM   CMP.F
 

.MACRO  CMP.S   T,X,M
        $CMP.S=1
.NARG   XXX
        .IF     B,X
        .IFT
          XX=0
.IIF    NDF,TRAPS,      JSR     R5,CMPSG.
.IIF    DF,TRAPS,       TRAP    116
          .WORD 0
        .IFF
          XX=X
.NTYPE  ZZZ,X
.IF     LE<ZZZ&70-10>
.IIF    NDF,TRAPS,      JSR     R5,CMPSR.
.IIF    DF,TRAPS        TRAP    2
          MOV   XX,R1
.IFF
.IIF    NDF,TRAPS,      JSR     R5,CMPS.
.IIF    DF,TRAPS,       TRAP    1
          .WORD XX
        .ENDC
        .ENDC

          .WORD T
.IF     B,M
          .WORD 0
.IFF
MM=M
          .WORD 0
          .WORD ^CMM
.ENDC
.ENDM
 
.MACRO  BACKPL  .B      
        .IIF    NB,.B,  MOV     #.B,R0  ;THE NEW BACKPLANE # IS .8
        .IIF    DF,TRAPS,       TRAP 115
        .IIF    NDF,TRAPS,      JSR     R5,BACKPL
        .ENDM   BACKPL
 
 
 
        .MACRO  RANGE
        $RANGE=1
.IIF    DF,TRAPS,       TRAP    32              ;DETERMINE FAILING BIT RANGE
        .ENDM   RANGE
 
 
.MACRO  DF.     D
.NLIST  SRC
                .BYTE 200!D
.LIST   SRC
.ENDM

.MACRO  BP.     B
.IRP    B1,<B>
        B10=^D'B1
F=0
.IF     LT      B10
BX=-B10
F=1
.IFF
BX=B10
.ENDC
B11=^D35-BX
W11=B11/^D16
P11=B11-<W11*^D16>
.NLIST  SRC
                .BYTE <F*100>!<P11*4>!<W11>
.LIST   SRC
.ENDM
.ENDM


        .MACRO  ISORST
.IIF    DF,TRAPS,       TRAP    77              ;LOAD & GO TO A4 ISOLATOR
        .ENDM   ISORST

.MACRO  TBIT    N
BB=^D'N+12.
BBD=BB/16.
BM=1
.REPT <15.-<BB-<16.*BBD>>>
BM=BM+BM
.ENDM
.NLIST  SRC
          MOV   #^D'N,ERBIT
          BIT   #BM,@<.DAT1-<2*BBD>>
.LIST   SRC
.ENDM   TBIT

.MACRO  CLASS1  SRCASC,WHERE.,REGUML,?ORG,?R
        CLR     R4              ;R4 WILL KEEP TRACK OF WHERE IN THE MANY TABLES WE ARE
 
;THIS SECTION CHECKS THE 6 DATA PATH BOARDS FOR A
;CLASS 1 ERROR. A CLASS 1 ERROR IS ONE IN WHICH THE
;SAME REGISTER FAILED ACROSS MORE THAN ONE EDP BOARD.
;THIS TYPE OF FAILURE INDICATES A CONTROL LOGIC
;PROBLEM AS OPPOSED TO AN INDIVIUAL DATA PATH BRD
;REGISTER PROBLEM
ORG:    MOVB    SRCASC(R4),R0   ;GET THE REGISTER TO BE CHANGED
        SEVBRD  WHERE.          ;CHECK IT FOR MULTIPLE FAILURES
        DEC     R0              ;SEE IF MORE THAN 1 BRD HAD A FAILURE
        BLE     R               ;BR IF NOT CLASS 1 ERROR, THIS REG
 
;IF MORE THAN 1 BRD FAILED, IT'S A CLASS 1 ERROR. GO MAKE BRD CALLOUT.
 
        ASL     R4
        OR.UML  REGUML(R4),#STNDRD      ;GET CORRECT UML TABLE
        PNTUML  STNDRD          ;PINT UML TABLE
        FINI                    ;AND OUT - RETURN TO EXEC
 
R:      INC     R4              ;NEXT LIST ELEMENT
        CMP     #^D8,R4 ;ALL DONE YES?
        BGT     ORG             ;BR IF NO - 'CLASS 2' CHK IF YES

 
.ENDM
 
 
.REM    %
CALOUT IS A POINTER TO A LIST OF SUBROUTINE ENTRY POINTS. AN
ENTRY POINT FOR EACH EDP BOARD THAT CAN FAIL.
% 
.MACRO  CLASS2 SRCASC,WHERE,REGUML,CALOUT,?ORG,?ORG2,?R
;THIS SECTION OF CODE SEARCHES FOR CLASS 2 ERRORS,
;ERRORS WHICH ARE ONLY ON 1 BOARD, BUT ARE IN MULTIPLE
;BITS OF A REGISTER, INDICATING EITHER A MUX FAILURE OR
;A CONRTROL SIGNAL BUFFER FAILURE.
 
        CLR     R4              ;R4 WILL INDEX INTO THE LISTS AGAIN
ORG:    CLR     R1              ;USE R1 AS A BRD LIST INDEX
ORG2:   BITB    SRCASC(R4),WHERE+1(R1)  ;SEE IF 'MULTIPLY BIT FAILURE' FLAG IS SET
        BEQ     R               ;BR IF NOT MULTIPLE BIT FAILURE
;MULTIPLE   BIT FAILURE ON 1 BRD PUTS YOU HERE
        ASL     R4              ;MAKE R4 EVEN
        OR.UML  REGUML(R4),#STNDRD      ;UML TABLE TO PRINT
        JSR     PC,@CALOUT(R1)  ;GO SET THE UML BIT FOR THIS EDP BOARD
 
        PNTUML  STNDRD          ;PRINT SYMPTOM
        FINI            ;OUT
 
R:      ADD     #2,R1           ;UPDATE BRD PNTR
        CMP     #^D12,R1                ;CHECKED THIS REG, ON ALL BRDS
        BGT     ORG2            ;BACK IF NOT YES
        INC     R4              ;UPDATE REG PNTR
        CMP     #^D8,R4         ;DONE 'CLASS 2' CHECK YET?
        BGE     ORG             ;GR BACK IF NO
        
.ENDM
 
.REM    %
TABLE IS THE ADDRESS OF A 4 WORD BLOCK OR AN UNUSED UML TABLE
WHICH WILL BE USED FOR THE CALL OUT IN THIS CLASS OF ERROR
%
 
.MACRO  CLASS3  SRCASC,WHERE,TABLE,CALOUT,?ORG,?ORG2,?R,?S,?T
;FALL THRU FOR CLASS 3 CHECK. A CLASS 3 ERROR IS ONE IN
;WHICH ONLY 1 BIT FAILED ON 1 BRD. THIS CLASS OF FAILURE
;INDCATES THAT THE PROBLEM IS PROBABLY ON THE DATA PATH BOARDS
;THEMSELVES AND NOT IN THE CONTROL LOGIC. FOR THIS CLASS ERROR,
;WE CALL OUT THE FAILING BOARD, PLUS TH BOARD TO THE RIGHT OR LEFT
;OF IT.
 
        CLR     R4              ;R4 WILL INDEX INTO THE LISTS AGAIN
ORG:    CLR     R1              ;R1 WILL INDEX INTO THE BOARD LISTS
ORG2:   BITB    SRCASC(R4),WHERE(R1)    ;SEE IF A BIT FAILED FOR THIS BOARD
        BEQ     T               ;BR IF NO EE IF A BIT FAILED FOR THIS BOARDAILURE
 
;FALL THRU TO A CLASS 3 ERROR PRINT OUT
        TST     R1              ;IF = 0, THEN ONLY CALL FAILING BRD PLUS ITS RIGHT HAND
                                ;NEIGHBOR.
        BEQ     R               
        JSR     PC,@CALOUT-2(R1)        ;SET UML BIT IN UML TABLE
R:      CMP     #^D10,R1        ;IF=12 THEN WE'VE GONE OFF THE END OF THE TABLE
        BLE     S                       ;IF = 12, ONLY REPORT LEFT NEIGHBOR PLUS MAIN BOARD
        JSR     PC,@CALOUT+2(R1)        ;SET UML BIT IN UML TABLE
S:      JSR     PC,@CALOUT(R1)  ;FINALLY, SET ACTUAL FAILING BOARD
        PNTUML  STNDRD          ;PRINT SYMPTOM
        FINI                    ;AND OUT
T:      ADD     #2,R1           ;UPDATE BRD PNTR
        CMP     #^D12,R1                ;CHECKED THIS REG FOR ALL BRDS?
        BGT     ORG2            ;BACK IF NOT YET
        INC     R4              ;UPDATE REG PNTR
        CMP     #^D8,R4         ;DONE ALL CLASS 3 CHECK YET?
        BGT     ORG             ;BR BACK IF NO
 
.ENDM
 
.MACRO  CONFUS  UMLLST
 
;IF YOU EVER MAKE IT TO HERE IN THE CODE, THEN I AM CONFUSED. I DID
;NOT FIND THE ERROR DISCREPANCY AND AM GOING TO BAIL OUT BY CALLING
;OUT EVERY BOARD I CAN THINK OF.
 
        PNTUML  UMLLST          ;PRINT LOTS OF BRDS SINCE I'M CONFUSED
        FINI                    ;RETURN TO MONITOR
        
.ENDM
 
 
.MACRO  $BIC36  SRC,DST
        .BIC36=1
        PUSH    #SRC
        PUSH    #DST
        JSR     PC,BIC36
.ENDM
 
 
   
 
 
.MACRO  SETTAB  SRCTAB,BITMAP,?Q,?R,?S,?V
        .REGSET=1               ;ASSEMBLE 'REGSET' CODE
         RSTINI                 ;RESTORE ISOLATION REGISTER POINTERS
         $CLRMI BITMAP          ;CLEAR BITMAP TABLE TO INITIALLY ALL ZEROES
Q:      CMP     R2,R3           ;SEE IF MORE INFO ON ERROR STACK
        BLE     V               ;BR OUT IF NO MORE
        PUSH    R3              ;SAVE R3
        MOV     R3,R0           ;ERR STACK PNTR TO R0
        ADD     #16,R0          ;UPDATE PAST 'FTM36' TO 'FT10' FORMAT
        GETF10                  ;GET PNT TO F10 ASCII CHARACTER
        MOV     #1,R1           ;START WITH 'REG' BIT PNTR SET TO 'AR'
        MOV     #SRCTAB,R4      ;LIST OF ASCII DATA PATH REG NAMES
R:      CMPB    (R0),(R4)       ;FIRST CHAR MATCH??
        BNE     S                ;BR IF NO
        CMPB    1(R0),1(R4)     ;SECOND CHAR MATCH??
        BNE     S               ;BR IF NO
        CMPB    2(R0),2(R4)     ;THIRD CHAR MATCH??
        BNE     S               ;BR IF NO
 
;FALL THRU ON FIRST 3 CHAR MATCH
        POP     R3              ;WE'VE FOUND A REGISTER - PROCESS THE 'FTM36'
 
        MOV     #BITMAP,R0      ;GET ADDRESS
         JSR    PC,REGSET       ;GO FILL BIT MAP TABLE
         ADD    #32,R3          ;UPDATE ERR STACK PNTR TO 'NEXT ENTRY'
         BR     Q               ;SEE IF MORE ENTRIES
S:      ASL     R1              ;SHIFT WHICH REG BIT
        ADD #3,R4               ;UPDATE CHECKLIST PNTR
        BR      R               ;AND BACK TO BEGINNING
V:                              ;NEXT INSTRUCTION
.ENDM
 
 
.MACRO  SEVBRD  BITMP
        .SEVBRD=1
        JSR     R5,SEVBRD
        .WORD   BITMP
.ENDM
 
 
.MACRO  $CLRMI  LOC
        .IF NB LOC
        CLRMIC          ;CLEAR 12-BYTE MICROWORD
        .WORD LOC       ;BUFFER STARTING AT LOC
        .ENDC
        .IF B LOC
        CLR$M           ;CLEAR MICRO-WORD BUFFER
        .ENDC
.ENDM
 
 
.MACRO  JIFFO   ARG
        .JIFF=1         ;SET ASSEMBLY FLAG TO ASSEMBLE JIFFO CODE
        .IF NB ARG
         MOV    ARG,R0            ;ARGUMENT TO R0
         JSR    PC,JIFFO                ;JIFFO ROUTINE
        .ENDC
        .IF B ARG
         JSR    PC,JIFFO                ;JIFFO ROUTINE
        .ENDC
.ENDM
 
.MACRO  GETF10
        MOV     4(R0),R0        ;R0 NOW POINTS TO FIRST 4 ASCII CHARACTERS
.ENDM
 
 
 
.MACRO  $ARLO2  LOC
        MOV  #LOC,R0    ;LOAD THE AR (BUT NOT IR)
        ARLOD2          ;WITH DATA AT LOCATION LOC
        .ENDM

.MACRO  $DCOMP  MSK,FUNC,BYT,EXP,ERMSG
        DCOMP           ;DO BYTE TABLE COMPARE
        .WORD MSK               ;MASK TBLE STARTS AT MSK
        .WORD    FUNC   ;FUNCTION TABLE AT FUNC
        .WORD BYT       ;BYTE TABLE AT BYT
        .WORD EXP       ;EXPECTED DATA TABLE AT EXP
        .WORD ERMSG!BIT15       ;PRINT MSG AT ERMSG ON ERROR
        .ENDM
.MACRO  $MCOMP
        MCOMP           ;MODIFY DCOMP'S EXPECTED DATA
        .ENDM
.MACRO  $RCOMP
        RCOMP                   ;RESTORE DCOMPS EXPECTED DATA
        .ENDM

 
 
 
 
CMPS.: ;CLR     CPXDAD          ;NO DATA GENERATION
CPXDAD:;0                       ;DATA ADDRESS STORAGE
 
 
TRAPS:
 
        .=70000
STARTA:
ISOGO:
IGO:
 

   R@|?