
;SEQ605

.SBTTL *IEBUS0* ISOLATION ROUTINE FOR TEST 1 (EBUS0)

.REM    %
THIS TEST CHECKS THE EBUS BY READING THE AR (ALL 0'S) AND MQ (ALL 1'S)
ACROSS IT.  THE ISOLATION ROUTINE GOES A STEP FURTHER BY DOING ALL
POSSIBLE DIAGNOSTIC READS AND OR'ING AND AND'ING THE RESULTS.  ANY EBUS BITS
WHICH ARE STUCK AT 0 WILL CAUSE A 0 IN THE "OR".  STUCK AT 1 BITS WILL CAUSE
A 1 IUN THE "AND".  (TO ASSURE THAT ALL BITS HAVE BEEN FORED TO 1 - EVEN IF
THE MQ REGISTER HAS FAILED - THE AR IS LOADED WITH 1'S BEFORE
THE ABOVE SEQUENCE IS BEGUN).  IF NO EBUS BITS ARE STUCK, THE FAULT IS ISOLATED
AS A NORMAL      EDP FALURE.
        %

.ANDOR  =       1               ;TURN ON SUBROUTINE ASSEMBLY

IEBUS0: $SAVE           ;SAVE PARAMETERS PASSED BY DIACON
        $CLRUML                 ;CLEAR $$UML
        $SETWD  $$AND           ;INITIALIZE "AND" WORD TO ONES
        $CLRWD  $$OR            ;AND "OR" WORD TO ZERO
        $CLRWD  $$BUF           ;AND CLEAR THE 36-BIT BUFFER
        DFWRTT                  ;LOAD THE AR WITH 1'S
        .WORD   $$AND           ;POINTER TO ALL 1 DATA
        .WORD   LDAR            ;DIAGNOSTIC FUNCTION

        MOV     #$$BUF,R3       ;R3 POINTS TO 36-BIT BUFFER
        MOV     #100,R2         ;R2 HAS FIRST DIAGNOSTIC READ TO DO

READ:   MOV     R2,R0           ;PUT NEXT DIAGNOSTIC FN IN R0
        MOV     R3,R1           ;RESTORE DATA PTR TO R1
        DFRDMV                  ;READ THE DATA TO THE BUFFER
        $AND                    ;"AND" IT WITH "AND" DATA
        $OR                     ;"OR" IT WITH "OR" DATA
        INC     R2              ;NEXT DIAGNOSTIC READ
        CMP     #177,R2         ;DONE THEM ALL?
        BGE     READ            ;LOOP TILL DONE


;SEQ606

;INITIALIZE TO SEARCH "OR" WORD FOR STUCK AT 0 FAILING BITS:
        CLR     R4              ;R4 TELLS IF STUCK AT 0 OR 1
        $MOVWD  $$OR,$$BUF      ;ALL TESTING DONE ON BUFFER
        COM     (R3)+           ;COMPLIMENT DATA SO STUCKS ARE 1'S
        COM     (R3)+
        COMB    (R3)

;THIS CODE IS USED TO FIND BOTH KINDS OF STUCKS:

COMTST: $TST36          ;SEE HOW MANY FAILING BITS
        BCC     NOTONE          ;GO AROUND FOR MULTIPLE BITS

;HERE FOR FAILING SINGLE BIT, PRINT CORRECT UML TABLE, A MSG AND EXIT:

        CLR     R1              ;R1 WILL CONTAIN FIALING EBUS BIT #

        MOV     #EBUS0,$$PTR    ;INITIALIZE UML TABLE PTR TO BIT 0.

LOOK1S: BITB    #10,$$BUF+4     ;SEE IF LEFT HAND BIT IS SET
        BNE     FOUND1          ;EXIT IF IT IS

        $ROLWD  $$BUF           ;ELSE, ROLL 36-BIT DATA
        ADD     #10,$$PTR       ;UPDATE UML PTR
        INC     R1              ;AND BIT #
        BR      LOOK1S          ;AND LOOP TILL FOUND IT



;SEQ607

FOUND1: PNTUML          ;PRINT UML TABLE FOR STUCK BIT
        $$PTR:  0               ;PTR GOES HERE

        PMSG<\EBUS BIT >        ;TYPE A MSG - FIRST PART

        MOV     R1,R0           ;TYPE A NUMBER (EBUS BIT #)
        PNTDEC
        PMSG< IS STUCK AT >     ;MORE OF MSG
        TST     R4              ;PRINT TYPE OF STUCK
        BGT     1$              ;GO PRINT A 1

        PMSG<0.>                ;PRINT A 0.
        BR      COMMSG

1$:     PMSG<1.>                ;PRINT A 1


;SEQ608

COMMSG: PMSG<\\ANY ONE OF THE ABOVE LIST OF BOARDS MAY BE AT FAULT.>

        PMSG<\THIS FAULT IS BEST ISOLATED BY LOOKING AT THE EBUS LINE>
        PMSG<\AND PULLING BOARDS ONE AT A TIME UNTIL THE BOARD WHICH IS>


        PMSG<\HANGING THE BUS IS FOUND.  IF THIS FAILS, THE EBUS WIRING>
        PMSG<\IN THE BACKPLANE SHOULD BE CHECKED.>

        JMP     @$$RET          ;RETURN TO DIACON

;MAYBE DIDN'T FIND ANY STUCK BITS:

NOTONE: TST     R0              ;SEE IF # OR BITS WAS 0.
        BNE     MANY1S          ;GO AROUND IF NOT

;SEQ609

;HERE IF NO STUCK BITS:

        TST     R4              ;WHICH CASE AM I DOING
        BNE     DPFAIL          ;DONE BOTH, MUST BE DATA PATH FAILURE

;REINITIALIZE TO SEARCH "AND" WORD FOR STUCK AT 1 FAILURES;

        INC     R4              ;R4 SAYS "STUCK AT 1"
        $MOVWD  $$AND,$$BUF     ;PUT "AND" WORD IN BUFFER
        BR      COMTST          ;RESTART TEST SEQUENCE

;HERE FOR MULTIPLE STUCK BITS.  FIRST SEE IF ALL STUCK:

MANY1S: CMP     #^D36,R0        ;DID ALL BITS FAIL?
        BNE     XLTST           ;GO TEST FOR TRANSLATOR FAILURE, IF NOT

;HERE FOR ALL BITS STUCK:

        $PNTUML EALL            ;PRINT "ALL STUCK" TABLE

        PMSG<\\ALL>
        JSR     PC,COMPNT               ;PRINT COMMPART OF MSG
        PMSG<\IF NOT CTL BOARD, CHECK DIAGNOSTIC FUNCTION BUS AND DTE 20.>

        JMP     @$$RET          ;BACK TO DIACON




;SEQ610

;HERE TO LOOK FOR TRANSLATOR BOARD FAILURES:

XLTST:  CMP     #^D12,R0        ;XLATOR FAILURES ARE 12 BITS WIDE
        BNE     DUNNO           ;NOTHING I KNOW, TAKE LAST RESORT
        MOV     #$$BUF,R2       ;R2 POINTS TO BUFFER
        CMP     #7777,(R2)      ;IS IT RIGHT 12 BITS?
        BNE     MIDTST          ;NO, KEEP TESTING

        $PNTUML EXRITE          ;YES, CALL OUT BOARD
        PMSG<\\RIGHT 12>        ;PRINT WHICH BITS

COMOUT: JSR     PC,COMPNT       ;PRINT COMMON MSG
        JMP     @$$RET          ;DONE

MIDTST: INC     R2              ;POINT AT SECOND BYTE IN BUFFER
        CMPB    #360,(R2)+      ;SEE IF MIDDLE 12 BITS
        BNE     LFTST           ;NO, SEE ABOUT LEFT 12.

        CMPB    #377,(R2)+      ;STILL LOOKING AT BITS 12-23.
        BNE     DUNNO           ;STRANGE, TAKE LAST RESORT..

        $PNTUML EXMID           ;OK, CALL OUT BAORDS

        PMSG    <\\MIDDLE 12>   ;PRINT WHICH BITS
        BR      COMOUT          ;TAKE COMMON EXIT TO FINISH

LFTST:  CMP     #170000,(R2)+   ;SEE IF LEFT 12 BITS FAILING
        BNE     DUNNO           ;HUM...

        CMPB    #17,(R2)        ;STILL LOOKING AT 0-12
        BNE     DUNNO           ;HUM...

        $PNTUML EXLEFT          ;CALL OUT BOARDS
        PMSG<\\LEFT 12>         ;PRINT WHICH BITS
        BR      COMOUT          ;TAKE COMMON EXIT.


;SEQ611

;HERE IF STRANGE COMBINATION OF BITS STUCK:

DUNNO:  PMSG<\\THE FOLLOWING>   ;PRINT MSG
        JSR     PC,COMPNT       ;MORE
        PCRLF

        MOV     #$$BUF,R0       ;PRINT EBUS STUCKS
        PNT36B
        PMSG<\\CAN'T ISOLATE FAULT; POSSIBLE DIAG BUS, DTE20 OR MULTIPLE FAILURE!>

        JMP     @$$RET          ;EXIT, IGNOBLY
;HERE IF NO EBUS ERRORS TO ISOLATE THE DATA PATH FAILURE:

DPFAIL: MOV     $$TAB,R3        ;RETRIEVE DIACON'S TABLE PTR
        DEC     (R3)            ;SUBTRACT ONE FROM THE SUBTEST #
        $ERR36          ;GET XOR OF DATA & COUNT OF BAD BITS
        MOV     R0,R1           ;SAVE COUNT
        TST     R1              ;MAKE SURE SOME BITS WERE FOUND
        BNE     DPOK            ;GO RIGHT ON IF SOME WERE
        JMP     .ABORT          ;BLOW UP IF NOT
DPOK:   CMP     #^D36,R1        ;SEE IF ALL BITS BAD
        BNE     DPN36           ;GO AROUND IF NOT
        TST     (R3)            ;FOR 36-BIT CASE LOOK AT SUBTEST #
        BNE     DPSETC          ;SKIP IF NOT AR FAILURE (1ST BUFFER)

        $SSET   CRM4            ;AR -- COULD BE "ARM SEL" SIGNAL
        BR      DPSETC          ;GO SET CTL AND CLK BOARD SLOTS

DPN36:  $DSNOOP         ;IF NOT 36, SET FAILING EDP SLOTS
        CMP     #6,R1           ;SEE IF BOARD-WIDE FAILURE
        BNE     DPNOT6          ;GO ON IF NOT

DPSETC: $SSET   CLK             ;SET CLOCK BOARD'S SLOT
        $SSET   CTL             ;AND CTL BOARD'S SLOT

        $SETHP  CTL             ;BET ON CTL



;SEQ612


;PRINT UML TABLE & MSGS:

DPNOT6: $PNTUML $$UML           ;PRINT UML TABLE
        PMSG<\\NO>              ;FIRST PART
        MOV     #-1,R4          ;GET READY FOR COMMON MSG
        JSR     PC,COMPNT        ;COMMON PART
        TST     (R3)            ;REMEMBER WHICH SUBTEST
        BNE     MQFAIL          ;SO AS TO TYPE OUR RIGHT MSG

        PMSG<\\AR >             ;PRINT "AR"
        BR      PMORE           ;SKIP NEXT
MQFAIL: PMSG<\\MQ >

PMORE:  PMSG<FAILED TO INITIALIZE CORRECTLY.\FAILURE OF >
        CMP     #36,R1          ;HOW MANY BITS FAILED - 36?
        BEQ     NOEDP           ;SKIP IF ALL 9CAN'T BE EDP FAILURE)

        PMSG<REGISTER, MUX OR SELECT LINE ON EDP BOARD>
        CMP     #1,R1           ;HOW MANY - 1?
        BEQ     DPDONE          ;THEN CAN'T BE CONTROL LOGIC

        PMSG<\OR >


;SEQ613

NOEDP:  PMSG<A CONTROL LINE FROM THE CTL BOARD OR A CLOCK LINE>
        PMSG<\ALSO CHECK THE DIAG FUNCTION BUS WRITING>

DPDONE: JMP     @$$RET  ;AWAY!

;HERE TO BLOW UP AND GIVE UP:

        $ABORT

;THIS IS THE COMMON PRINT SUBROUTINE:

COMPNT: PMSG<EBUS BITS ARE STUCK AT >

        TST     R4              ;PRINT TYPE OF STUCK
        BGT     ONE             ;GO PRINT A 1
        BEQ     ZERO            ;GO PRINT A 0
        PMSG<0 OR 1>            ;PRINT 0 OR 1
        RTS     PC

ONE:    PMSG<1>         ;PRINT 1
        RTS     PC
ZERO:   PMSG<0>         ;PRINT 0

        RTS     PC              ;RETURN


;SEQ614

;HERE ARE THE COMPLETE UML TABLES FOR STUCK EBUS BITS:

EBUS0:  $UML    <6,10,20,31,45,53,1>
EBUS1:  $UML    <6,10,20,31,34,45,53,1>
EBUS2:  $UML    <6,10,20,31,45,53,54,1>
EBUS3:  $UML    <6,10,20,31,45,53,54,1>
EBUS4:  $UML    <6,10,20,31,45,53,54,1>
EBUS5:  $UML    <6,12,20,31,45,53,54,1>
EBUS6:  $UML    <6,9,12,20,31,34,51,54,1>
EBUS7:  $UML    <6,9,12,20,31,34,51,54,1>
EBUS8:  $UML    <6,12,20,31,34,51,52,54,1>
EBUS9:  $UML    <6,9,12,31,34,51,52,54,1>
EBUS10: $UML    <6,9,12,31,34,51,52,54,1>
EBUS11: $UML    <6,9,31,34,51,52,54,1>
EBUS12: $UML    <5,9,31,34,48,49,1>
EBUS13: $UML    <5,9,31,34,38,48,49,1>
EBUS14: $UML    <5,9,20,31,34,48,49,50,1>
EBUS15: $UML    <5,20,31,34,38,48,49,50,1>


;SEQ615

EBUS16: $UML    <5,11,20,31,34,48,49,50,1>
EBUS17: $UML    <5,20,31,34,38,49,50,1>
EBUS18: $UML    <5,11,20,33,35,43,47,1>
EBUS19: $UML    <5,11,20,33,35,38,43,47,1>
EBUS20: $UML    <5,20,28,33,35,43,44,47,1>
EBUS21: $UML    <5,20,28,33,35,38,43,44,47,1>
EBUS22: $UML    <5,20,23,33,35,43,44,47,1>
EBUS23: $UML    <5,20,23,33,35,38,43,44,47,1>
EBUS24: $UML    <4,20,23,33,35,36,41,1>
EBUS25: $UML    <4,20,23,33,36,38,41,1>
EBUS26: $UML    <4,20,23,33,36,41,42,1>
EBUS27: $UML    <4,22,23,33,36,38,41,42,1>
EBUS28: $UML    <4,22,23,33,36,41,42,1>
EBUS29: $UML    <4,22,23,33,38,41,42,1>
EBUS30: $UML    <4,21,22,32,33,39,1>

;SEQ616


EBUS31: $UML    <4,21,22,32,33,28,39,1>
EBUS32: $UML    <4,21,22,32,33,39,40,1>
EBUS33: $UML    <4,21,22,32,33,38,39,40,1>
EBUS34: $UML    <4,20,21,32,33,39,40,1>
EBUS35: $UML    <4,20,21,32,33,38,39,40,1>
EXLEFT: $UML    <XLEFT,CTL>
EXMID:  $UML    <XMID,CTL>
EXRITE: $UML    <XRIGHT,CTL>
EALL:   $UML    <CTL>


;SEQ617

.SBTTL ERR36 - SUBROUTINE TO RECONSTRUCT 36-BIT FAILURES

.REM    %
THUIS ROUTINE LOOKS FOR A "MSK36" FAILURE ON THE ERROR STACK AND PUTS THE
MASKED XOR OF ACTUAL AND EXPECTED DATA IN $$BUF.  THE NUMBER OF
FAILING BITS IS RETURNED IN R0 AND THE C-BIT IS SET FOR SINGLE-BIT
FAILURES.  IT EXPECTS LOCATION $$ERS0 TO CONTAIN A PTR TO THE ERROR
STACK BASE.  ITSUSES SUBROUTINES XOR AND TST36.


CALL:   JSR     PC,ERR36        ;RECONSTRUCT FAILING 36-BIT WORD IN $$BUF
        %

ERR36:  SHOVE                   ;SAVE REGISTERS
        MOV     R5,-(SP)        ;AND R5

;FIRST SEE IF STACK LOOKS OK AND ABORT IF NOT:

        MOV     $$ERS0,R0       ;GET PTR TO ERROR STACK BASE
        CMP     #6,(R0)+        ;CHECK FOR PROPER ERROR TYPE
        BEQ     DPXOR           ;GO RIGHT ON IF OK
        JMP     .ABORT          ;DOWN IN FLAMES IF NOT

;NOW RECONSTRUCT THE PROPERLY MASKED 36-BIT ERROR WORD FROM STACK INFO:

DPXOR:  MOV     #5,R1           ;DO 5 BYTES
        MOV     (R0)+,R5        ;SAVE MSK PTR IN R5
        MOV     R0,R2           ;PUT PTER TO ACTUAL IN R2
        ADD     R1,R0           ;UPDAT PTE TO EXPECTED
        MOV     R0,R3           ;PUT PTR TO EXPECTED IN R3
        MOV     #$$BUF,R4               ;PUT PTR TO OUTPUT BUFFER IN R4
        $XOR                    ;COMPUTE THE XOR

DPMSK:  BICB    (R5)+,(R4)+             ;MASK A BYTE
        DEC     R1              ;COUNT
        BGT     DPMSK           ;LOOP

;LOOK AT HOW MANY FAILING BITS:
        $TST36                  ;COUNT FAILING BITS
        MOV     (SP)+,R5        ;REWSTORE R5
        GRAB                    ;AND THE UTTERS
        RTS     PC              ;RETURN


;SEQ618

.SBTTL TST 36- SUBROUTINE TO COUNT 1'S IN 36-BIT WORD

.REM    %
THIS ROUTINE COUNTS THE NUBMER OF BITS IN $$BUF ON 1 AND RETURNS THE
COUNT IN R0.  IN ADDITION, THE C-BIT IS SET IF THE RESULT IS A SINGLE BIT.


CALL:   JSR     PC,TST36        ;COUNT BITS (ANS. IN R0)

        %
TST36:  SHOVE                   ;SAVE REGISTERS
        MOV     #$$BUF,R1       ;DATA PTR TO R1.
        CLR     R2              ;SET COUNT = 0
        MOV     #^D36,R3        ;DO A TOTAL OF 36 BITS
T36L:   BITB    #10,4(R1)       ;SEE IF L.H. DATA BIT SET
        BEQ     1$              ;GO AROUND IF NOT
                INC     R2      ;ELSE, BUMP COUNT


1$:     $ROLWD  $$BUF           ;ROTATE THE DATA LEFT ONE PLACE
        DEC     R3              ;DONE ONE MORE BIT
        BGT     T36L            ;LOOP TILL ALL DONE

        MOV     R2,R0           ;COPY THE COUNT TO R0
        CLC                     ;CLEAR C-BIT
        DEC     R2              ;WAS ONLY ONE BIT SET?
        BNE     2$              ;GO AROUND IF NOT
        SEC                     ;ELSE, SET C-BIT

2$:     GRAB                    ;RESTORE REGISTERS
        RTS     PC              ;AND RETURN


;SEQ619

.SBTTL AND & OR - SUBROUTINES FOR LOGICALLY ACCUMULATING 36-BIT DATA

.REM    %
THESE ROUTINES TAKE 36-BITS FROM A BUFFER, $$BUF, AND LOGICALLY AND
OR THE DATA INTO THE BUFFERS.  $$AND OR $$OR CONTIANED IN THE SUBROUTINES.
NO PARAMETERS ARE NEEDED.


CALL:   JSR     PC,AND          ;"AND" $$BUF TO $$AND

OR:     JSR     PC,OR           ;"OR" $$BUF TO $$OR

        %

AND:    SHOVE                   ;SAVE REGISTERS
        MOV     #$$BUF,R1               ;PTR TO BUFFER
        MOV     #$$AND,R2      ;PTR TO "AND" AREA
        MOV     #5,R3           ;COUNT BYTES

AND1:   MOVB    (R1)+,R4        ;GET A BYTE
        COM     R4              ;COMPLIMENT IT
        BICB    R4,(R2)+        ;AND IT
        DEC     R3              ;COUNT
        BGT     AND1            ;LOOP

        GRAB                    ;RETURN REGISTERS       
        RTS     PC              ;RETURN

$$AND:  0,0,0                   ;"AND" AREA

OR:     BIS     $$BUF,$$OR      ;OR A WORD
        BIS     $$BUF+2,$$OR+2  ;AND ANOTHER
        BISB    $$BUF+4,$$OR+4  ;AND A BYTE

        RTS     PC              ;RETURN

$$OR:   0,0,0           ;"OR" AREA


;SEQ620

.SBTTL DSNOOP - SUBROUTINE TO SET UML TABLE BITS FOR DATA PATH FAILURES

.REM    %
THIS ROUTINE ASSUMES THAT THE 36BIT BUFFER $$BUF CONTAINS THE RECONSTRUCTED
DISCREPENCY WORD FOR A DATA PATH COMPARE.  IT SETS SLOT BITS IN THE UML 
TABLE $$UML CORRESPONDING TO THE DATA PATH BOARD ON WHICH THE 1 BITS
IN $$BUF ARE GENERATED.

CALL:   JSR     PC,DSNOOP       ;SET EDP SLOTS IN ERROR

        %

DSNOOP: SHOVE                   ;SAVE REGISTERS
        MOV     #$$DSETS,R1     ;R1 PTS TO A TABLE OF BIT SET INSTRS
        CLR     R2              ;R2 WILL COUNT BOARDS

DOUTER: CLR     R3              ;R3 WILL COUNT BITS ON EACH BOARD

DINNER: BITB    #10,$$BUF+4     ;LOOK AT LEFT-HAND BUFFER BIT
        BEQ     DNOHIT          ;SKIP IF IT'S CLEAR
        JSR     PC,(R1)         ;A HIT! PUT A BIT IN $$UML

DNOHIT: $ROLWD  $$BUF           ;SHIFT DATA LEFT FOR NEXT IBT
        INC     R3              ;NEXT BIT
        CMP     #6,R3           ;RUN OFF A BOARD?
        BGT     DINNER          ;NO, DO NEXT BIT

        INC     R2              ;YES, NEXT BOARD
        CMP     #6,R2           ;DONE THEM ALL?
        BGT     DON             ;NO,  GO ON

        GRAB                    ;YES, RESTORE REGS
        RTS     PC              ;AND RETURN

DON:    ADD     #10,R1          ;MOVE INSTRUCTION PTR DOWN
        BR      DOUTER  ;AND DO NEXT BOARD

;SEQ621

$$DSETS:$SSET   EDP0            ;FINGER EDP FOR BITS 0-5
        RTS     PC              
        $SSET   EDP6            ;FINGER EDP FOR BITS 6-11
        RTS     PC
        $SSET   EDP12           ;FINGER EDP FOR BITS 12-17
        RTS     PC
        $SSET   EDP18           ;FINGER EDP FOR BITS 18-23
        RTS     PC
        $SSET   EDP24           ;FINGER EDP FOR BITS 24-29
        RTS     PC
        $SSET   EDP30           ;FINGER EDP FOR BITS 30-35
        RTS     PC



;SEQ622


.SBTTL XOR - SUBROUTINE TO COMPUTE THE XOR OF ANY NUMBER OF BYTES


.REM    %
THIS SUBROUTINE IS ENTERED WITH THE FOLLOWING INFORMATION IN THE REGISTERS:
        R1      =       NUMBER OF BYTES TO DO
        R2      =       PTR TO ONE OPERAND
        R3      =       PTR TO OTHER OPERAND
        R4      =       PTR TO RESULT ( MAY BE SAME AS EITHER OF ABOVE)
THE REGISTERS ARE RETURNED UNCGHANGED.

CALL:   MOV     #X,R4   ;ADDRESS OF 1ST BYTWE OF RESULT
        MOV     #B,R3   ;ADDRESS OF ONE OPERAND
        MOV     #A,R2   ;ADDRESS OF OTHER OPERAND
        MOV     #5,R1   ;DO 5 BYTES
        JSR     PC,XOR          ;COMPUTE XOR

        %

XOR:    SHOVE                   ;SAVE R1-R4
        MOV     R5,-(SP)        ;SVE R5 ON STACK

NEXTX:  TST     R1              ;DONE ALL?
        BLE     XIT             ;YES, GO AWAY

        MOVB    (R2),R0         ;NO GET "A" TO R0
        BICB    (R3),R0         ;NOW R0 HAS (A. .AND. .NOT. B)

        MOVB    (R3)+,R5        ;GET "B" IN R5
        BICB    (R2)+,R5                ;NOW R5 HAS (B .AND. .NOT. A)

        BISB    R5,R0           ;NOW R09 HAS (A .XOR. B)
        MOVB    R0,(R4)+        ;STUFF IT
        DEC     R1              ;DONE ANOTHER BYTE
        BR      NEXTX           ;MAYBE DO SOME MORE

XIT:    MOV     (SP)+,R5        ;RESTORE R5
        GRAB                    ;RESTORE REGISTERS 1 TO 4

        RTS     PC           ETURN


;SEQ623

.SBTTL *ISOEND* STORAGE FOR ISOLATION ROUINE PARAMETERS

$$RET:  0               ;RETURN ADDRESS TO DIACON
$$TAB:  0               ;PTR TO DIACON'S DATA TABLE
$$ERS0: 0               ;PTR TO ERROR STACK BASE
$$ERS:  0               ;PTR TO CURRENT ERROR STACK
$$UML:  0,0,0,0         ;STORAGE FOR BOARD CALLOUT TABLE
$$BUF:
$$XOR:  0,0,0,0,0,0     ;STORAGE FOR 36-BIT OR 80-BIT WORD

$$LITT  =       .               ;START OF LITERAL AREA
$$FF    =       $$CLIT          ;FIRST FREE
        .END    ISOGO           ;TRANSFER ADDRESS

iacX