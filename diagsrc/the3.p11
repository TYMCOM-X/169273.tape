
;SEQ632

.SBTTL  *ICRAM0*        ISOLATION ROUTINE FOR TEST 3 (ECRAM0)

.REM    %
THIS TEST SEES IF THE CR IS CLEARESD OUT ON RESET.  AN ERROR CAN BE CAUSED 
BY A CR CHIP FAILING TO SHIFT ZEROES IN (PERHAPS DUE TO A STUCK CONTROL LINE
OR CLOCK LINE ) OR A BAD DIAGNOSTIC MULTIPLEXER.  THE RESET SIGNAL CAN ALSO
NOT BE GETTING TO THE BOARD.
        %

ICRAM0: $SAVE           ;SAAVE DIACON'S PARAMETERS
        $CLRUML         ;CLEAR $$UML
        $ERR80          ;REMAKE 80-BIT ERROR COUNT BITS IN R09.
        BCC     NOT1            ;C-BIT SET TO SHOW SINGLE-BIT ERRORS

;SINGLE-BIT ERRORS COME HERE:
        $CSNOOP         ;SET CRAM SLOT OF FAILING BOARD
        $PNTUML $$UML           ;PRINT THE BOARD CALL OUTS
        JSR     PC,MSG1         ;PRINT FIRST PRT OF TEXTTPMSG<\PROBABLY THE CR BIT IS STUCK HIGH ON THE CRM BOARD OR ELSE>
        PMSG<\PROBABLY THE CR BIT IS STUCK HIGH ON THE CRM BOARD OR ELSE>

        PMSG<\THE DIAG MUX IS STUCK ON THAT BOARD.>
        JMP     @$$RET          ;BACK ON DIACON


;SEQ633


;MULTIPLE-BIT ERRORS HERE:

NOT1:   MOV     R0,R1           ;SAVE # OF FAILING BITS
        TST     R1              ;WAS IT NONE?
        BNE     SOME            ;CONTINUE IF NOT

        JMP     .ABORT          ;BAIL RIGHT OUT IF SO

SOME:   CMP     #CBITS,R1       ;WAS IT ALL?
        BNE     NOTALL          ;GO AROUND IF NOT

;HERE IF ALL BITS ARE HIGH:

        $PNTUML $$UML1          ;SUSPECT THE CLOCK AND CTL BOARDS
        JSR     PC,MSG1         ;PRINT 1ST PART OF TEXT

        PMSG<\SINCE THE REGISTER DID LOAD WITH ALL ONES, THE CLOCK IS OK.>
        PMSG<\FAULT IS PROBABLY DUE TO "MRESET" STUCK LOW ON CLK BOARD>
        PMSG<\OR IN BACKPLANE OR ELSE "CTL CRM SEL 1" STUCK HIGH ON>
        PMSG<\CTL OR IN BACKPLANE.>
        JMP     @$$RET          ;RETURN TO DIACON


;SEQ634

;HERE FOR SOME BITS HIGH:

NOTALL: $CSNOOP                 ;SET SLOTS OF FAILING BOARDS
        CMP     #CBRD,R1        ;IS THIS A BOARD WIDE FAILURE?
        BEQ     ABOARD          ;YES..HO SNOFF AROUND

        CMP     #5,R1           ;WE'D BETTER LOOK AT CRA'S MODULO TOO
        BEQ     ABOARD          ;SAME STORY

        CMP     #4,R1           ;THIS IS CHIP MODULO
        BEQ     ACHIP           ;GO TELL ABOUT IT

        CMP     #3,R1           ;THIS IS ALSO A CHI MODULO
        BEQ     ACHIP           ;AGAIN

;HERE FOR STRANGE CASE:

        $PNTUML $$UML           ;PRINT ALL BOARDS FOUND
        JSR     PC,MSG1         ;PRINT FIRST PART
        PMSG<\FAILING BITS DON'T SEEM IN ANY PATTERN, P[OSSIBLY MULTIPLE>
        PMSG<\FAULTS OR ODD BACKPLANE ERROR.  LOAD 1'S TO A CRAM LOC>
        PMSG<\AND DO A REPEAT MRESET TO "SCOP STUCK BITS.>

        JMP     @$$RET          ;BACK TO DIACON



;SEQ635

;HERE FOR CHIP FAILURE:

ACHIP:  $PNTUML $$UML           ;PRINT BOARD
        JSR     PC,MSG1         ;PRINT 1ST PART
        PMSG<\LOOKS LIKE A FAILING CR OR DIAG MUX CHIP.>
        JMP     @$$RET          ;BACK TO DIACON

;HERE FOR BOARD WIDE FAILURE:

ABOARD: $SSET   CLK             ;SUSPECT CCLOCK
        $SSET   CTL             ;AND CTL ("CTL CRM SEL 1")


        $PNTUML $$UML           ;PRINT 'EM
        JSR     PC,MSG1         ;SOME TEXT
        PMSG<\FAILURE PROBABLY DUE TO STUCK (LOW) "MRESET" LINE ON CLK OR CRM>
        PMSG<\OR IN THE BACKPLANE WIRING.  COULD ALSO BE DUE TO A STUCK (HIGH)>

        PMSG<\"CTL CRM SEL 1" LOINE ON CTL, CRM OR IN BACKPLANE.>

        JMP     @$$RET          ;DONE


;SEQ636

;FIRST PART OF MESSAGE:

MSG1:   PMSG<\\THE COMMAND REGISTER WAS INITIALIZED TO ALL 1'S AND IT>
                
        PMSG<\DID NOT SHIFT OUT ALL THE 1'S FOLLOWING MRESET.>

        RTS     PC              ;RETURN

;HERE IF ERROR STACK FOULED UP:

        $ABORT                  ;BAIL OUT!

;HERE IS A "CANNED" UJL TABLE FOR CLK & CTL BOARDS:

$$UML1:         $UML    <CLK,CTL>


;SEQ637

.SBTTL ERR80 - SUBROUTINE TO RECONSTRUCT MICROWORD FAILURES

.REM    %
THIS ROUTINE INSPECTS THE ERROR STACK FOR A "CHKMIC" DETECTED MICROWORD
FAILURE, RECONSTRUCTS THE MASKED XOR OF THE ACTUAL AND EXPECTED DATA,
AND RETURNS A COUNT OF THE FAILING BITRS IN R0.  IN ADDITION, THE C-BIT
IS SET FOR SINGLE-BIT FAILURES.  IT EXPECTS LOCATION $$ERS0 TO HAVE A PTR
TO THE ERROR STACK BASE AT ENTRY, AND LEAVES THE MASKED XOR MICROWORD AT $$XOR
FOR FURTHER USE.  IT JUMPS TO .ABORT IF THE STACK DOESN'T SEEM RIGHT.
THIS ROUTINE USES SUBROUTINES:  XOR AND TST80.

CALL:   JSR     PC,ERR80                ;RECONSTITUTE AN 80-BIT ERROR
        %
ERR80:  SHOVE                   ;SAVE R1-R4
        MOV     R5,-(SP)        ;AND R5

;CHECK ERROR TYPE:
        MOV     $$ERS0,R5       ;GET THE ERROR STACK PTR
        CMP     #FT6,(R5)+      ;SEE IF THIS IS CHKMIC STYLE ERROR
        BEQ     MERXOR          ;GO ON IF IT IS

        JMP     .ABORT          ;ELSE BAIL OUT!

;XOR THE ACTUAL AND EXPECTED AND PUT RESULT IN $$XOR:

MERXOR: MOV     #^D11,R1        ;DO 11 BYTES
        TST     (R5)+           ;ADVANCE PTR TO 1ST BYTE OF ACTUAL
        MOV     R5,R2           ;PUT PTR TO ACTUAL IN R2
        ADD     #13,R5          ;ADVANCE PTR TO 1ST BYTE OF EXPECTD
        MOV     R5,R3           ;PUT PTR TO EXPECTED IN R3
        MOV     #$$XOR,R4       ;PUT PTR TO OUTPUT AREA IN R 4
        $XOR                    ;COMPUTE THE XOR

;MASK THE RESULT:

        MOV     #$$CMSK,R5              ;PUT PTR TO NON-EX BITS MASK IN R5

MERMSK: BICB    (R5)+,(R4)+     ;MASK A BYTE
        DEC     R1              ;COUNT DOWN BYTES
        BGT     MERMSK          ;DO THEM ALL

;FIND OUT HOW MANY FIALING BITS THERE ARE AND EXIT:

        $TST80                  ;COUNT FAILIGBITS IN R0
MOV     (SP)+,R5        ;POP R5
        GRAB                    ;AND R1-R4
        RTS     PC              ;RETURN

;CRAM "MISSING-IN-ACTION" BIT MASK:


;SEQ638

        $$CMSK:  52525,5,0,0,0,177740


;SEQ639

.SBTTL  TST80 - SUBROUTINE TO COUNT 1'S IN A MICROWORD

.REM    %
THIS ROUTINE RETURNS A COUNT OF THE NUMBER OF "1" BITS IN $$XOR IN R0.
IN ADDITION THE C-BIT IS SET IF THE RESULT IS A SINGLE BIT.

CALL:   JSR     PC,TST80                ;PUT # OF 1 BITS IN R0

        %

TST80:  SHOVE                   ;SAVE R1-R4
        MOV     #$$XOR,R4       ;PUT DATA PTR IN R45
        CLR     R0              ;R0 WILL KEEP BIT TALLY
        MOV     #^D11,R1        ;R1 COUNT DOWN BYTS TO DO
OL80:   MOV     #^D8,R2         ;R2 COUNTS DOW  BITS/BYTE
        MOVB    (R4)+,R3        ;GET A BYTE OF DATA IN R3
 
IL80:   ASLB    R3              ;SHIFT DATA BYTE
        BCC     1$              ;SKIP IF DIDN'T SHIFT OUT A 1
        INC     R0              ;OTHERWISE COUNT IT

1$:     DEC     R2              ;DOWN THE BIT COUNT
        BGT     IL80            ;LOOP TIL CHECKED THEM ALL
        DEC     R1              ;THEN DOWN BYTE COUNT
        BGT     OL80            ;AND DO ALL OF THEM

        CMP     #1,R0           ;ONE FAILING BIT?
        BEQ     2$              ;YES, GO SET C-BIT

        CLC                     ;NO, CLEAR C-BIT
        BR      3$              ;AND RETURN

2$:     SEC             ;SET C-BIT
        
3$:     GRAB                    ;RETURN REGS
        RTS     PC              ;AND RETURN


;SEQ640

.SBTTL CSNOOP - SUBROUTINE TO SET CRM BRD BLOTS IN UML TABLE

.REM    %
THIS ROUTINE SETS CRAM BOARD SLOTS IN $$UML FOR ALL "1" BITSD IN $$XOR.

CALL:   JSR     PC,CSNOOP               ;SET UML BITS

        %
CSNOOP: SHOVE                   ;SAVE R1-R4
        MOV     #$$XOR,R0       ;RO PTS TO DATA IN BUFFER
        CLR     R1              ;R1 WILL BE EVEN-ODD TALLY
        MOV     #$$CSETS,R2     ;R2 POINTS TO TABLE OF SLOT SET INSTRS.
        MOV     R2,R3           ;SO DOES R3
        MOV     #^D20,R4        ;R4 COUNTS DOWN THE 20 TESTRS TO MAKE

CSLOOP: BIT     #1,R1           ;EVEN OR ODD?
        BNE     CSODD           ;IF ODD, GO AROUND

CSEVEN: BITB    #17,(R0)        ;EVEN - LOOK AT RIGHT-HAND 4 BITS
        BEQ     CSNODP          ;DON'T DISPATCH IF NOT ANY 1'S
        BR      CSDISP          ;BUT DO DISPATCH IF GOT ONE

CSODD:  BITB    #360,(R0)+      ;ODD - LOOK AT LEFT-HAND 4 BITS
        BEQ     CSNODP          ;AGAIN, NO 1'S = NO DISPATCH

CSDISP: PUSH    R0              ;SAVE R0

        JSR     PC,(R3)         ;DISPATCH - DOP BIS INSTRUCTION
        POP     R0              ;GET R0 BACK


CSNODP: ADD     #10,R3          ;MOVE DISPATCH PTR
        CMP     #$$CSETS+50,R3  ;BUT DON'T LET IT FALL OFF END
        BGT     CSBEO           ;PTR OK, GO BUMP EVEN-ODD TALLY
        MOV     R2,R3           ;PTR OFF ED, WRAP IT AROUND
CSBEO:  INC     R1              ;BUMP EVEN-ODD TALLY
        DEC     R4              ;ANOTHER TEST DONE
        BGT     CSLOOP          ;DO THEM ALL


;SEQ641
;NOW CHECK THE LAST BYTE FOR CRA/DISP FIELD ERRORS:

        TSTB    (R0)            ;LOOK AT 11 TH BYTE
        BEQ             CSEXIT  ;IF NO BITS, WRAP IT UP

        $SSET   CRA             'E;SE SET CRA BPARD SLOT

CSEXIT: GRAB                    ;GET BACK R1-R4
        RTS     PC              ;AND RETURN

;BIS INSTRUCTION TABLE:

$$CSETS:$SSET   CRM16           ;BIS INSTRUCTION FOR CRM N=16

        RTS     PC
        $SSET   CRM12           ;SAME FOR N=12

        RTS     PC
        $SSET   CRM8            ;AND N=8
        RTS     PC
        $SSET   CRM4            ;AND N=4
        RTS     PC
        $SSET   CRM0            ;AND N=0
        RTS     PC


;SEQ642

.SBTTL XOR - SUBROUTINE TO COMPUTE THE XOR OF ANY NUMBER OF BYTES

.REM    %
THIS SUBROUTINE IS ENTERED WITH THE FOLLOWING INFORMATION IN THE REGISTRS.
        R1      =       NUMBWER OF BYTES TO DO
        R2      =       PTR TO ONE OPERAND
        R3      =       PTR TO OTHER OPERAND
        R4      =       PTR TO RESULT (MAY BWE SAME AS EITHER OF ABOVE)

THE REGISTERS ARE RETURNED UNCYHANGED.

CALL:   MOV     #X,R4   ;ADDRESS OF 1ST BYTE OF RESULT
        MOV     #B,R3           ;ADDRESS OF ONE OPERAND
        MOV     #A,R2   ;ADDRESS OF OTHER OPERAND
        MOV     #5,R1   ;FO 5 BYTES
        JSR     PC,XOR  COMPUTE XOR
        %

XOR:    SHOVE                   ;SAVE R1-R4
        MOV     R5,-(SP)        ;SAVE R5 ONS TACK

NEXTX:  TST     R1              ;DONE ALL?
        BLE     XIT             ;YES, GO AWAY
        MOVB    (R2),R0 ;NO, GET "A" TO R0
        BICB    (R3),R0         ;NOW R0 HAS (A .AND. .NOT. B)

        MOVB    (R3)+,R5        ;GET "B" IN R5
        BICB    (R2)+,R5        ;NOW R5 HAS (B .AND. .NOT. A)

        BISB    R5,R0           ;NOW R0 HAD (A .XOR. B)
        MOVB    R0,(R4)+        ;STUFF IT
 
        DEC     R1              ;DONE ANOTHER BYTE
        BR      NEXTX           ;MAYBE DO SOME MORE

XIT:    MOV     (SP)+,R5        ;RESTORE R5
        GRAB                    ;RESTORE REGISTERS 1 TO 4

        RTS     PC              ;RETURN


;SEQ643

.SBTTL *ISOEND* STORAGE FOR ISOLATION ROUTINE PARAMTERS

$$RET:  0               ;RETURN ADDRESS TO DIACON
$$TAB:  0               ;PTRE TO DIACON'S DATA TABLE
$$ERS0: 0               ;PTR TO ERROR STACK BASE
        
$$ERS:  0               ;PTR TO CURRENT ERROR STACK

$$UML:  0,0,0,0         ;STORAGE FOR BOARD CALLOUT TABLE
        
$$BUF:
$$XOR:  0,0,0,0,0,0     ;STORAGE FOR 36-BIT OR 80-BIT WORD


$$LITT  =  .            ;START OF LITERAL AREA
$$FF    =  $$CLIT               ;FIRST FREE

        .END    ISOGO   ;TRANSFER ADDRESS

 