;DHE30.P11
 
;SEQ1093
 
.SBTTL *IMCL2*  ISOLATION ROUTINE FOR TEST 30 (EMCL2 MODEL B.)
 
.REM    %
THE TEST CHECKS THE MAJORITY OF LOGIC ON THE MCL BOARD. THE ISOLATION
ROUTINE HAS A TOUGH TIME BECAUE THRE ARE SO MANY PREVIOUSLY UNVERIFIED
SIGNALS COMING ONTO THE MCL INVOLVED.  IT COPES BY USING SUBTEST # AND
FAILING BIT GROUPS TO PCIK THE PROPER SIGNALS FOR ISOLATION.
%
 
IMCL2:  $SAVE                   ;SAVE THE DIACON'T PARAMETERS
        $CLRUML                 ;NO HOLDOVERS
        CMP     #2,(R4)         ;DISPATCH ON SUBTEST #
        BGT     D1              ;ONE
        BEQ     D2              ;TWO
        CMP     #4,(R4)
        BGT     D3              ;THREE
        BEQ     D4              ;FOUR
        CMP     #6,(R4)
        BGT     D5              ;FIVE
        BEQ     D6              ;SIX
        CMP     #^D8,(R4)
        BEQ     D8              ;EIGHT
        CMP     #^D11,(R4)
        BGT     D9              ;NINE
        BEQ     D11             ;ELEVEN
        CMP     #^D13,(R4)
        BEQ     D13             ;THIRTEEN
        CMP     #^D19,(R4)
        BEQ     D19             ;NINETEEN
        BR      MCLOUT          ;ALL THE REST
 
;DISPATCH TABLE (BEACUSE THE PDP11 DAN'T BRANCH VERY FAR):
 
D1:     JMP     ONE
D2:     JMP     TWO
D3:     JMP     THREE
D4:     JMP     FOUR
D5:     JMP     FIVE
D6:     JMP     SIX
D8:     JMP     EIGHT
D9:     JMP     NINE
D11:    JMP     ELEVEN
D13:    JMP     TRTEN
D19:    JMP     NINTEN
 
;SEQ1094
 
;HERE IF DOING SUBTESTS 7,10,OR 12-24
 
MCLOUT: $SSET   MCL             ;SET MCL'S SLOT
 
        JSR     PC,PUM1         ;PRINT SLOT & MCL MSG
 
HELP:   $HELP                   ;EXIT WITH HELP MSG
 
;HERE FOR SUBTEST #1:
 
ONE:    $PARSE  $$DRAX          ;LOOK FOR DRAM A00 OR A01 S@1
        TST     R0              ;ALL BITS ON STACK?
        BGE     ONE1            ;NO, GO AROUND
        MOV     #PDRAX,R1               ;YES, SET MSG TO DRAM A00 OR A01
        $SSET   IR              ;SET SLOT TO BE IR
        JMP     SA1OUT          ;PRINT
 
C121X:  $SSET   CRM12           ;SET BUFFER BOARDS'S SLOT
SA1OUT: MOV     #1,R2           ;MSG TO SAY 'S@1'
STKOUT: $SSET   MCL             ;SET MCL'S SLOT
        $SETHP  MCL             ;MAKE IT MOST LIKELY
STKNOM: JSR     PC,PUM1         ;PRINT SLOTS & BASIC MSG
        $PSTUCK         ;PRINT STUCK MSG
        BR      HELP            ;EXIT VIA HELP
 
ONE1:   $PARSE  $$CR40          ;LOOK FOR CR#4 S@1
        BCC     ONE2            ;NO, GO ON
        MOV     #PCR4,R1        ;YES, MSG PTR TO CR#04
        JMP     C81X            ;CALL IT OUT
 
;SEQ1095
 
ONE2:   $PARSE  $$DRA1          ;LOOK FOR DRAM A FIELD ERRORS
        BCC     ONE3            ;NONE, GO ON
        MOV     #PDRAS,R1               ;YES, PTR TO MSG
 
SA0OUT: CLR     R2              ;CLEAR S@1 FLAG
        JMP     STKOUT          ;PRINT IT
 
ONE3:   $PARSE  $$SHA           ;LOOK FOR SH-ARMM SEL1 S@0 ERRORS
        BCC     ONE4            ;NOPE, TRY NEXT
        MOV     #PSHARM,R1      ;YES, PTR TO MSG
C40X:   $SSET   CRM4            ;SET BUFFER'S SLOT
        BR      SA0OUT          ;PRINT
 
ONE4:   $PARSE  $$JRST          ;SEE IF IR JRST 0 S@0
        TST     R0              ;ALL PRESENT?
        BGE     ONE5            ;NO, TEST FURTHER
        CLR     R2              ;CLEAR S@1 FLAG
        MOV     #PJRST0,R1              ;PTR TO MSG
        $SSET   IR              ;SET SLOT TO IR
        JMP     SA0OUT          ;PRINT
ONE5:   MOV     #PAC0,R1        ;FOR REST, SUSPECT AC=0 S@1
        JMP     SA1OUT          ;PRINT
 
 
;SEQ 1096
 
;HERE FOR SUBTEST #2 ISOLATION:
 
TWO:    $PARSE  $$ACR0          ;SEE IF AC REF S@0
        TST     R0              ;ALL BITS ON STACK?
        BGE     TWO1            ;NO, GO AROUND
 
;SEE IF VMA IS CLEAR TO CAUSE AC REF:
 
        DFVMA                   ;READ THE VMA
        MOV     #$$BUF,R1       ;PTR TO BUFFER
        MOV     (R0)+,(R1)+      ;COPY RESULT TO $$BUF
        MOV     (R0)+,(R1)
        BIC     #177600,(R1)+   ;ZERO BITS 0-12
        CLRB    (R1)
 
        $TST36                  ;COUNT 1 BITS IN $$BUF
        CMP     #1,R0           ;HOW MANY?
        BGT     BADACR          ;IF NONE, AC REF MUST BE S@0
        BLT     BADVMA          ;IF MORE THAN ONE, VMA OR ADA SEL
 
;HERE IF SINGLE VMA BIT STUCK:
 
        $DSNOOP                 ;SET THAT DP'S SLOT
        $SSET   VMAPC           ;ALSO VMA
 
        JSR     PC, PUM2                ;PRINT MSG
 
        PMSG<\VMA 13-35 DID NOT CLEAR FOR THE AC REF.>
 
        PMSG<\TROUBLE MAY BE WITH AD BITS GOING TO VMA OR VMA ITSELF.>
 
VMAPNT: PMSG<\THE VMA IS (ONLY 13-35 ARE SIGNIFICANT):\>
 
        MOV     #$$BUF,R0               ;PRINT VMA
        PNT36
        JMP     HELP            ;AND EXIT
 
;HERE IF AC REF LOGIC STUCK:
 
BADACR: CLR     R2              ;OTHERWISE SUSPECT BAD AC REF, SHOW S@0
ACROUT: MOV     #PACREF,R1      ;PTR TO AC REF ID
        $SSET   CON             ;SUSPECT CON
        $SSET   CTL             ;AND CTL
        $SSET   VMAPC           ;AND VMA
 
;SEQ1097
 
        $SETHP  CON             ;CON LIKELY
 
        JSR     PC,PUM2         ;PRINT AC REF MSG
        PMSG<\VMA 13-35 CLEARED FOR THE AC REF.>
 
STK:    $PSTUCK                 ;PRINT STUCK MSG
        JMP     HELP            ;EXIT WITH HELP PRINT
 
;SEQ1098
 
;HERE IF MORE THAN ONE VMA BIT WRONG:
 
BADVMA: $SSET   VMAPC           ;SET VMA'S SLOT
        $SETHP  VMAPC           ;MAKE IT MOST LIKELY
        $SSET   CRM4            ;AND BUFFER
        JSR     PC,PUM2         ;PRINT MSG
        PMSG<\VMA 13-35 DID NOT CLEAR FOR AN AC REF.>
 
        PMSG<\TROUBLE MAY BE WITH "ADA SEL 2 24" OR "ADA SEL 2 30" STUCK AT 1 OR VMA ITSELF.>
        BR      VMAPNT
 
TWO1:   $PARSE  $$CR20          ;SEE IF CR#2 S@0
        TST     R0              ;ALL?
        BGE     MCLX            ;NO, JUST CALL OUT MCL BOARD
        MOV     #PCR2,R1        ;YES,, PTR TO I.D.
C80X:   $SSET   CRM8            ;SET BUFFER SLOT
        BR      SA0X            ;PRINT IT
 
;SEQ1099
 
;HERE FOR SUBTEST #3 ISOLATION:
 
 
THREE:  $PARSE  $$DRB0          ;SEE IF DRAM B01 S@0
        TST     R0              ;ALL BITS?
        BGE     THREE1          ;NO, GO ON
 
        MOV     #PDRB1,R1       ;YES, PUT IN MSG PTR
        BR      SA0X            ;AND PRINT
 
THREE1: $PARSE  $$VMAX          ;IS CR#03 S@0?
        BCC     MCLX            ;NO, JUST CALL OUT MCL
 
        MOV     #PVMAX,R1               ;YES, SET UP MSG PTR
        $SSET   CRM12           ;SET BUFFER'S SLOT
 
        BR      SA0X            ;PRINT IT
 
;HERE FOR SUBTEST #4 ISOLATION:
 
FOUR:   $PARSE  $$DRA0          ;COULD DRAM A FIELD BITS BE S@0?
        BCC     MCLX            ;NO, JUST CALL OUT MCL
 
        MOV     #PDRAS,R1       ;YES, SET UP PTR
SA0X:   JMP     SA0OUT          ;AND PRINT
 
;HERE FOR SUBTEST #5:
 
FIVE:   $PARSE  $$MEM1          ;SEE IF MEM01 S@1 ERROR
        TST     R0              ;ALL BITS?
        BLT     YES             ;YES, CALL OUT CRM8
 
MCLX:   JMP     MCLOUT          ;NO, JUST CALL OUT MCL
YES:    MOV     #PMEM1,R1       ;YES, SET UP MSG PTR
C81X:   $SSET   CRM8            ;SET BUFFER'S SLOT
 
        JMP     SA1OUT          ;PRINT
 
;SEQ1100
 
;HERE FOR SUBTEST #6:
 
SIX:    $PARSE  $$DRB1          ;LOOK FROM DRAM B01 S@1
        TST     R0              ;ALL BITS?
        BGE     MCLX            ;NO, GO ON
 
        MOV     #PDRB1,R1               ;YES, SET UP MSG PTR
SA1X:   JMP     SA1OUT          ;PRINT IT
 
;HERE FOR SUBTEST #8:
 
EIGHT:  $PARSE  $$ACR1          ;LOOK FOR AC REF S@1
        BCC     EIGHT1          ;NO, TEST FURTHER
 
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     ACROUT          ;PRINT
 
EIGHT1: $PARSE  $$CR30          ;LOOK FO CR03B S@0
        TST     R0              ;ALL PRESENT?
        BGE     MCLX            ;NO, JUST CALL OUT MCL
        MOV     #PCR3,R1        ;YES, SET MSG TO CR#03
        $SSET   CRM12           ;SET BUFFER BOARD SLOT
 
        JMP     SA0OUT          ;PRINT IT
 
;HERE FOR SUBTEST #9:
 
NINE:   $PARSE  $$VS1           ;SEE I 'IR TEST SAT' S@1 FAILURE
        TST     R0              ;FIND 'EM ALL?
        BGE     MCLX            ;NO, JUST CALL MCL
 
        $SSET   IR              ;YES, SET IR
        $SSET   CRM16           ;AND A BUFFER
        MOV     #PIRTS,R1       ;PTR TO STUCK MSG
        MOV     #1,R2           ;S@1
        BR      SA1X            ;GO PRINT
 
;HERE FOR SUBTEST #11:
 
ELEVEN: $PARSE  $$CR10          ;SEE IF CR#01 S@0
        TST     R0              ;ALL BITS?
        BGE     TRTEN           ;NO, TEST FURTHER
 
;SEQ1101
 
        MOV     #PCR1,R1                ;YES, SET PTR TO MSG
        JMP     C80X            ;PRINT
 
;HERE FOR SUBTEST THIRTEEN
 
TRTEN:  $PARSE  $$CR0X          ;SEE IF CR#00 S@1
        TST     R0              ;ALL PRESENT?
        BGE     TRTEN1          ;NO, TEST FURTHER
        MOV     #PCR0,R1        ;SET MSG FOR CR#00
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     C81X            ;PRINT IT
 
 
TRTEN1: $PARSE  $$CR1X          ;SEE IF CR#01 S@1
        TST     R0              ;ALL PRESENT?
        BGE     TRTEN2          ;NO, TEST FURTHER
        MOV     #PCR1,R1        ;SET MSG TO CR#01
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     C81X            ;PRINT IT
 
TRTEN2: $PARSE  $$CR2X          ;SEE IF CR#02 S@1
        TST     R0              ;ALL PRESENT?
        BGE     MCLX            ;NO, JUST PRINT MCL
        MOV     #PCR2,R1        ;YES,SET MSG TO CR#02
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     C81X            ;PRINT IT
 
;HERE FOR SUBTEST NINETEEN
 
NINTEN: $PARSE  $$CR3X          ;SEE IF CR#03 S@1
        TST     R0              ;ALL PRESENT?
        BGE     MCLX            ;NO, JUST CALLOUT MCL
        MOV     #PCR3,R1        ;YES, SET MSG TO CR#03
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     C81X            ;PRINT IT
 
;ABORTION:
 
        $ABORT
 
;MESSAGE TO TYPE: 
 
PUM1:   $PNTUML         ;PRINT SLOTS
        PMSG<\TESTING MCL BOARD - "MEM" DECODE, MEMORY REQUEST TYPE & ADDRESS MODE.>
 
 
;SEQ1102
 
        RTS     PC              ;RETURN
PUM2:   $PNTUML         ;CALL OUT SLOTS
        PMSG<\TESTING THE AC REF GATES ON CON.>
 
        RTS     PC              ;RETURN
 
;TABLE OF STUCK LINE I.D'S:
 
PCR3:   .ASCIZ/CRAM #03/
PCR4:   .ASCIZ/CRAM #04/
PJRST0: .ASCIZ/IR JRST 0/
PDRAX:  .ASCIZ/DRAM A00 OR A01/
PDRAS:  .ASCIZ/A DRAM "A" FIELD BIT/
PSHARM: .ASCIZ/-CRAM SH-ARMM SEL 1 A/
PIRTS:  .ASCIZ/-IR TEST SATISFIED, CRAM #07 F OR CRAM #08 F/
PACREF: .ASCIZ/CON AC REF/
PCR0:   .ASCIZ/CRAM #00/
PCR2:   .ASCIZ/CRAM #02/
PDRB1:  .ASCIZ/DRAM B 01/
PMEM1:  .ASCIZ/CRAM MEM 01/
PC1OR2: .ASCIZ/CRAM #01 OR 02/
PCR1:   .ASCIZ/CRAM #01/
PAC0:   .ASCIZ/IR AC=0/
PVMAX:  .ASCIZ/CRAM #03 B/
 
.EVEN
 
 
;SEQ1103
 
;PARSE TABLES:
 
$$DRAX: $FEND   32,2            ;18EA
$$CR30: $FEND   33,1            ;-EBOX MAP
$$CR40: $FEND   26,4            ;MCL XR PREVIOUS
$$DRA1: $FIND   26,42           ;VREAD&V AD
        $FIND   30,40           ;VWRITE
        $FIND   31,40           ;LAR
        $FIND   32,40           ;LARX
        $FEND   33,2            ;CYCREQ
$$SHA:  $FEND   32,4            ;MCL VMAX SEL1
$$VS1:  $FIND   22,40           ;VSEL2
        $FIND   23,40           ;VSEL1
        $FEND   30,2            ;LVCTX
$$VMAX: $FEND   30,4            ;VMAX EN
 
 
;SEQ1104
 
$$ACR0: $FIND   22,1            ;FMXFR
        $FIND   34,70           ;ARLS2,ARR LOAD, AR 0-8 L
        $FIND   35,30           ;ARR LOAD, AR 9-17 L
        $FEND   36,40           ;ARRS2
$$JRST: $FEND   33,2            ;MCL CYCLE REQUEST
        $FEND   36,40           ;ARRS2
$$CR20: $FIND   27,4            ;MCL XR PREVIOUS
        $FEND   31,4            ;VXS2
$$DRB0: $FIND   26,40           ;VREAD
        $FIND   27,20           ;REQEN
        $FIND   30,40           ;VWRITE
        $FIND   32,40           ;LARX
        $FEND   33,40           ;STORE
         
 
;SEQ1105
 
$$DRA0: $FIND   26,40           ;VREAD
        $FIND   27,40           ;VPAUSE
        $FIND   30,40           ;VWRITE
        $FEND   32,40           ;LARX
$$MEM1: $FIND   26,40           ;VREAD
        $FIND   31,40           ;LAR
        $FEND   32,40           ;LARX
$$DRB1: $FIND   27,20           ;REQ
        $FIND   30,40           ;VWRITE
        $FEND   33,42           ;VSTORE & CYCREQ
$$ACR1: $FEND   22,1            ;FMXFR
$$CR10: $FIND   27,4            ;MCL XR PREVIOUS
        $FIND   31,4            ;VXS2
        $FEND   32,4            ;VXS1
$$CR0X: $FEND   31,40           ;LDAR
$$CR1X: $FEND   32,40           ;LDARX
 
 
;SEQ1106
 
$$CR2X: $FEND   27,40           ;VPAUSE
$$CR3X: $FEND   30,40           ;VWRITE
 
  