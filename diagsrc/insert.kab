        .IF NE,.BIC36
;ROUTINE TO DO A 36-BIT 'BIT CLR'
BIC36:  PUSH    <R0,R1>
        MOV     20(SP),R0               ;;GET SOURCE ADDRESS
        MOV     6(SP),R1                ;GET DEST ADDRESS
        BICB    (R0+,(R1)+              ;DO THE BIT CLEAR
        BICB    (R0+,(R1)+
        BICB    (R0+,(R1)+
        BICB    (R0+,(R1)+
        BICB    (R0+,(R1)+
        POP     <R1,R0>                 ;RESTORE R0,R1
        MOV     (SP)+,(SP)              ;CLEAN STACK OF PASSED PARAMETERS
        MOV     (SP)+,(SP)
        RTS     PC                      ;AND RETURN
        .ENDC
 
 
;SEQ758
 
        .IF NE,.JIFF
 
;SUBRUTINE TO PERFORM JIFFO INSTRUCTION. INCLUDE THE CODE ONLY IF THE
;JIFFO INSTRUCTION IS USED IN THE ISOLATION ROUTINE - R0 HAS 16 BITS TO 'JIFFO'
 
JIFFO:  PUSH    R1              ;SAVE REG
        PUSH    #^D16                   ;SAVE COUNT OF HOW MANY BITS PER WORD
        CLR     R1              
1$:     ASL     R0              ;PUT A BIT IN THE 'C' BIT
        ADC     R1              ;ADD IT TO R1
        DEC     (SP)            ;DOWN COUNTER
        BGT     1$              ;BACK IF NOT DONE
        MOV     R1,R0           ;RETURN RESULT IN R0
        POP     R1              ;CLEAR CNT FROM STACK
        POP     R1              ;AND RESTORE R1
        RTS     PC              ;AND OUT
        .ENDC
 
 
;SEQ759
 
        .IF NE,.JLS
.REM    %
SUBROUTINE SEAGULL - POINT TO A UML TABLE AND POINT TO A DCOMP ERROR
STACK; SEAGULL WILL SCOPE OUT THE DCOMP FAILURE AND BY EXAMINING
FAILING DIAGNOSTIC FUNCTIONS AND EBUS BIT POSITIONS WILL SET THE UML TABLE BIT
TABLE BIT  FOR EVERY BOARD WHICH HAS PRODUCED AN ERRONEOUS SIGNAL OUT OF
SIGNAL OUT OF ITS DIAGNOSTIC MULTIPLEXORS. IT DOES THIS FOR EVERY
DCOMP INDEX/ACTUAL PAIR ON THE ERROR STACK.
CALLING SEQUENCE IS:
 
        ADDR-2 PUSH #UML        ;PUSH A PNTR TO DESIRED UML TABLE TO HAVE BITS SET
        ADDR-2  PUSH #ERRSTK    ;PUSH A PNTR TO THE 'FT3' ENTRY ON ERROR STACK
IJSR    PC,SEAGULL
 
ONLY R0 IS DESTROYED, ALL OTHER REGISTERS ARE LEFT INTACT.
THE STACK IS CLEANED UP.
NOTE: IF SEAGULL CAN'T FIND 'FT3' IT RETURNS WITH C-BIT SET.
%
 
SEAGULL:        CMP     @2(SP),#FT3     ;CHECK FOR A DCOMP ENTRY FIRST
        BNE     50$                     ;BR IF NONE - TAKE ERROR EXIT
        PUSH    R5                      ;START SAVING REGISTERS
        SHOVE
        MOV     14(SP),R5               ;GET ERR STACK PNTR TO R5
        MOV     R5,R4           ;COPY IN R4
        MOV     R5,R4           ;COPY IN R4
        ADD     #12,R4          ;R4 WILL FOLLOW INDEX/ACTUAL PAIRS
 
;NOW GET EXPECTED & ACTUAL DATA AND DO XOR
 
1$:     CLR     R2              ;CLEAR WORKING REGISTERS
        CLR     R3
        MOV     (R4),R1         ;GET INDEX/ACTUAL PAIR
        BISB    R1,R2           ;COPY OF 'B' ACTUAL
        BISB    R1,R3           ;COPY OF 'B' ACTUAL
        SWAB    R1              ;MAKE ACTUAL/INDEX PAIR
        PUSH    R1              ;STACK IT
        MOV     10(R5),R1               ;GET PNTR TO EXPECTED TABLE
        ADD     (SP),R1         ;GET PNTR TO EXPECTED ITSELF
        MOVB    (R1),R1         ;GET EXPECTED
        BIC     #177600,R1              ;OFF TRASH, R1='A' EXPECTED
 
;SEQ760
 
;XOR
 
        BIC     R1,R2           ;R2=-A&B
        BIC     R3,R1           ;R1=A&-B
        BIS     R1,R2           ;R2=XOR (DISCREPANCY)
        MOV     6(R5),R1        ;GET PNTR TO MASK TABLE
        ADD     (SP),R1         ;GET PNTR TO ACTUAL MASK
        BICB    (R1),R2         ;MASK XOR (NOW R2 HAS DISCREPANCY)
        BEQ     4$              ;BR IF NO DISCREPANCY
        $CLRWD  DISBUF          ;CLAR 36-BIT BUFFER
        MOV     4(R5),R0        ;GET PNTR TO BYTPNT TABLE
        ADD     (SP),R0         ;GET PNTR TO ACTUAL BYTPNT
        MOVB    (R0),R0         ;ACTUAL BYTPNT INTO R0
        MOV     R0,R1           ;COPY IN R1
        BIC     #177774,R0      ;MAKE R0 MOD 4
        MOVB    R2,DISBUF(R0)   ;SET DISCREPANCY IN 36-BIT BUFFER
        ASR     R1              ;BYTPNT INDEX GETS ROLLED
        ASR     R1              ;OFF THE END
        BEQ     3$              ;IF CNT IN R1=0, BYPASS NEXT CODE
2$:     $RORWD  DISBUF          ;ROTATE 36 BIT BUFFER
        DEC     R1              ;TO CORRECTLY JUSTIFY DISCREPANCY BYTE
        BNE     2$
3$:     MOV     2(R5),R0                ;GET PNT TO DIAG FCN TABLE
        ADD     (SP)+,R0                ;MAKE IT PNT TO ACTUAL DIAG FCN
        BISB    (R0),R1         ;GET DIAG FCN ITSELF INTO R1
        MOV     16(SP),-(SP)    ;PUSH DEST UML ONTO STACK
        MOV     #DISBUF,R0              ;ADDRESS OF DISCREPANCY IS IN R0
        JSR     PC,BIRDS        ;GO SET BITS
4$:     TST     (R4)+           ;ALL DONE?
        BGE     1$              ;BR IF NO
 
;FINISH UP CODE - CLEAN STACK
 
        GRAB            ;REGISTERS R1-R4
        POP     R5              ;AND R5
        POP     (SP)    ;POP ERR STACK PNTR DATUM
        POP     (SP)    ;POP ERR STACK PNTR DATUM
        CLC
        RTS     PC              ;RETURN
;ERROR EXIT
50$:    POP     (SP)            ;POP ERR STACK PNTR
        POP     (SP)            ;POP UML ADDRESS
        SEC                     ;SET 'C' BIT
        RTS     PC
        .ENDC
 
 
;SEQ761
 
        .IF NE,.BIRDS
.REM    %
BIRDS IS A SUBROUTINE TO ACTUALLY DO THE SETTING OF UML BITS FOR
ANY GIVEN DIAGNOSTIC FUNCTION AND 36 BIT ERROR DISCREPANCY.
CALLING SEQ IS:
        PUSH #UML TABLE ADDRESS
        MOV     ADDR OF 36 BIT DISCREPANCY,R0
        MOV     DIAG FCN,R1
        JSR     PC,BIRDS
%
 
BIRDS:  BIC     #177707,R1      ;NOW BEND
        ASR     R1              ;FOLD
        ASR     R1              ;SPINDLE & MUTILATE
        PUSH    R0              
        MOV     #TMPBUF,R0      ;CLEAR A TEMP UML TABLE
        CLR     (R0)+
        CLR     (R0)+
        CLR     (R0)+
        CLR     (R0)+
        POP     R0
        JMP     @DISPJ(R1)      ;AND DISPATCH TO SET THE UML BITS
DISPJ:  .WORD   PMCC    DIAG FCNS 100-107
        .WORD   AM      DIAG FCNS 110-117
        .WORD   EDP     DIAG FCNS 120-127
        .WORD   SIC     DIAG FCNS 130-137
        .WORD   CC      DIAG FCNS 140-147
        .WORD   VMAADR  DIAG FCNS 150-157
        .WORD   MBOX    DIAG FCNS 160-167
        .WORD   MBOX    DIAG FCNS 170-177
 
;SEQ762
 
PMCC:   BIT     #77,(R0)        ;CLK BOARD?
        BEQ     1$              ;NO
        SSET    CLK,TMPBUF      ;YES
 
1$:     BIT     #7400,(R0)      ;CTL BOARD?
        BEQ     2$              ;NO
        SSET    CTL,TMPBUF      ;YES
 
2$:     BIT     #170000,(R0)    ;MCL BOARD?
        BEQ     3$              ;NOT YET
        SSET    MCL,TMPBUF      ;YES
        BR      5$
 
3$:     BIT     #3,2(R0)        ;MCL BOARD?
        BEQ     4$              ;NO
        SSET    MCL,TMPBUF      ;YES
        BR      5$              ;END UP
 

4$:     SSET    PI,TMPBUF       ;MUST BE PI
5$:     JMP     GOAWAY
 
AM:     BIT     #7777,(R0)      ;MTR BOARD?
        BEQ     1$              ;NO
A
        SSET    MTR,TMPBUF      ;YES
        BR      2$
 
1$:     SSET    APR,TMPBUF      ;MUST BE AP
2$:     JMP     GOAWAY
EDP:    BIT     #77,(R0)        ;EDP 30-35?
        BEQ     1$              ;NO
        SASET   EDP30,TMPBUF    ;YES
 
1$:     BIT     #7700,(R0)      ;EDP 24-29?
        BEQ     2$              ;NO
        SSET    EDP24,TMPBUF    ;YES
 
2$:     BIT     #170000,(R0)    ;EDP 18-23?
        BEQ     3$              ;NOT YET
        SSET    EDP18,TMPBUF    ;YES
 
3$:     BIT     #3,2(R0)        ;EDP 18-23?
        BEQ     4$              ;NO
        SSET    EDP18,TMPBUF    ;YES
 
;SEQ763
 
4$:     BIT     #374,2(R0)      ;EDP 12-17?
        BEQ     5$              ;NO
        SSET    EDP12,TMPBUF    ;YES
        
5$:     BIT     #174000,2(R0)   ;EDP6-11?
        BEQ     6$              ;NO
        SSET    EDP6,TMPBUF     ;YES
 
6$:     BIT     #170000,2(R0)   ;EDP0-5?
        BEQ     7$              ;NOT YET
        SSET    EDP0,TMPBUF     ;YES
7$:             BIT     #17,4(R0)       ;EDP0-5?
        BEQ     8$              ;NO
        SSET    EDP0,TMPBUF     ;YES
 
8$:     JMP     GOAWAY
 
SIC:    BIT     #-1,(R0)        ;CON BOARD?
        BEQ     1$              ;NOT YET
        SSET    CON,TMPBUF      ;YES
 
1$:     BIT     #3,2(R0)        ;CON BOARD?
        BEQ             2$      ;NO
        SSET    CON,TMPBUF      ;YES
 
2$:     BIT     #374,2(R0)      ;IR BOARD?
        BEQ     3$              ;NO
        SSET    IR,TMPBUF       ;YES
 
3$:     BIT     #177400,2(R0)   ;SCD BOARD?
        BEQ     4$              ;NOT YET
        SSET    SCD,TMPBUF      ;YES
 
4$:     BIT     #3,4(R0)        ;SCD BOARD?
        BEQ     5$              ;NO
        SSET    SCD,TMPBUF      ;YES
 
5$:     JMP     GOAWAY
 
 
;SEQ764
 
CC:     BIT     #17,4(R0)       ;CRA BOARD?
        BEQ     1$              ;NOT YET
        SSET    CRA     ,TMPBUF ;YES
 
1$:     BIT     #140000,2(R0)   ;CRA BOARD?
        BEQ     2$              ;NO
        SSET    CRA,TMPBUF      ;YES
 
2$:     BIT     #17,(R0)        ;CRM16?
        BEQ     3$              ;NO
        SSET    CRM16,TMPBUF    ;YES
 
3$:     BIT     #1700,(R0)      ;CRM12?
        BEQ     4$              ;NO
        SSET    CRM12,TMPBUF    ;YES
 
 
;SEQ765
 
4$:     BIT     #170000,(R0)    ;CRM8?
        BEQ     5$              ;NO
        SSET    CRM8,TMPBUF     ;YES
 
5$:     BIT     #17,2(R0)       ;CRM4?
        BEQ     6$              ;NO
        SSET    CRM4,TMPBUF     ;YES
 
6$:     BIT     #1700,2(R0)     ;CRM0?
        BEQ     7$              ;NO
        SSET    CRM0,TMPBUF     ;YES
 
7$:     JMP     GOAWAY
 
VMAADR: SSET    VMAPC,TMPBUF    ;IF HERE - MUST BE VMA
        JMP     GOAWAY
 
MBOX:   BR      ZETURN          ;SUPER NO-OP
 
GOAWAY: MOV     2(SP),R0        ;GET PNT TO UML
        MOV     #TMPBUF,R1
        BIS     (R1)+,(R0)+     ;SET BITS IN
        BIS     (R1)+,(R0)+     ;CALLERS
        BIS     (R1)+,(R0)+     ;UML TABLE
        BIS     (R1)+,(R0)+     
ZETURN: MOV     (SP)+,(SP)      ;CLEAN STACK
        RTS     PC              ;RETURN
 
DISBUF: .BLKW   3
TMPBUF: .BLKW   4
.ENDC
 
   