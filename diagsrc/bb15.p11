
.SBTTL  STORAGE MODULE PARITY BIT ERROR ISOLATION ROUTINE
        .NLIST  CND,BEX
.REM    %
        DGKBB ISOLATION ROUTINE FOR TEST#15.
        %
$M15:   JSR     R5,MINIT                ;INIT ISOLATION ROUTINE
        GPW     14              ;GET TEST CONTROLLER
        MOVB    R0,CONTR                ;SAVE IT
        CLR     R0              ;MAKE COSM THINK LO HLF OF WD
        COSM                    ;CALL OUT STOR MOD
        PMSG    <INTERNAL MEM PARITY BIT FAILURE.\>
        TST     1$              ;ONE...ALL DONE
        SSET    7.,UML1         ;SBUS TRANSLATOR BD FOR PAR BIT
        BACKPLANE       4               ;CPU
        PNTUML  UML1
        PMSG    <IT IS ALSO POSSIBLE IN THIS CASE THAT THE PARITY BIT\>
        PMSG    <GOING OUT ON THE SBUS IS STUCK LOW, A CONDITION THAT\>
        PMSG    <THE MBOX TEST CANNOT DETECT.\>
1$:     JMP     (R5)            ;RETURN TO DIACON


;SEQ313

;-----SUBROUTINE TO CALL OUT A STORAGE MODULE SET.  THE SLOT NUMBERS ARE
;       DETERMINED BY THREE PARAMETERS: THE SUBTEST # - 1 IS THE
;       STORAGE MODULE; "CVONTR" HAS THE CONTROLLER # IN IT; R0 HAS THE
;       VALUE RETURNED BY "RANGE".  THIS ROUTINE USES UP UML3.
COSM:   ASR     R0              ;HALVE RANGE VALUE
        MOVB    3$(R0),R0       ;SLOT # FOR UPPER/LOWER EVEN SMO X-Y BD
        BEQ     2$              ;BR IF FAULT IN BOTH HALVES...NOP
        PUSHG   R0
        MOV     (R4),R0         ;GET SUBTEST #
        DEC     R0              ;MAKE IT SM #
        ADD     R0,(SP)         ;ADD IN SM OFFSET TO SLOT #
        ADD     R0,(SP)         
        ADD     R0,(SP)
        MOVB    CONTR,R0                ;GET CONR #
        BIT     #BIT0,R0        ;ODD CONTR?
        BEQ     1$              ;NO...SM SLOT 3 COMPLETE
        ADD     #28.,(SP)               ;ELSE ADD ODD CONTR OFFSET TO SLOT #
1$:     MOVB    CNTBNT(R0),R0   ;GET BACKPLANE #
        BACKPLANE                       ;SET IT
        POP     R0              ;SLOT # TO R0
        VSSET   UML3            ;SET X-Y DRIVER BOARD
        INC     R0
        VSSET   UML3            ;SET STACK BOARD
        INC     R0
        VSSET   UML3            ;SET SENSE-INHIBIT BOARD
        PNTUML  UML3
        PMSG    <BAD STORAGE MODULE.  REPLACE ENTIRE SET GIVEN ABOVE.\>
2$:     RTS     R5              ;RETURN TO CALLER
        
3$:     .BYTE   14.,14.,14.,14.,2.,2.,2.,2.,0.,14.,2.
        .EVEN
;-----SUBROUTINE TO SET A SLOT NUMBER, ACCORDING TO THE NUMBER IN R0,
;       IN THE GIVEN UML.
VSSET:  PUSH    R1              ;SAVER R1
        MOV     (R5)+,R1        ;GET UML ADR
        BR      VSSET1+2
VSSET1: PUSH    R1              ;SAVE UML ADR
        PUSH    R0              ;SAVE SLOT #
        BLE     1$              ;BR IF BAD SLOT #
        CMP     R0,#54.
        BLE     2$              ;BR IF GOOD #
1$:     PFORCE
        PMSG    <BAD SLOT #>
        FATAL
2$:     SR      R0,4            ;CALC ADR OF UML WD
        ADD     R0,KR1
        ADD     R0,R1   ;IN R1
        MOV     (SP),R0         ;CALC BIT POSITION
        BIC     #177760,R0
        PUSH    #0
        SEC
3$:     ROR     (SP)
        DEC     R0
        BGE     3$
        BIS     (SP)+,(R1)      ;SET BIT IN UML


;SEQ314

        POP     <R0,R1>         ;RESTORE REGS
        RTS     R5              ;RETURN
;-----SUBROUTINE TO CHECK FOR AND EXTRACT A PARAMETER WORD FROM THE
;       EWRROR STACK.  THE DATA PASSED TO THE SUBROUTINE IS THE DIS-
;       PLACEMENT OF THE 'FTPRM' OR 'FT10' ID FROM THE BEGINNING OF THE
;       ERROR STACK.  THE ADR OF WHICH SHD B IN R3.
GPW:    MOV     (R5)+,R0        ;GET DISP TO FTPRM IDENTIFIER
GPW1:   ADD     R3,R0           ;CALC ADR OF IDENTIFIER
        CMP     (R0)+,#FTPRM    ;IS IT THE CORRECT IDENTIFIER?
        BEQ     2$              ;YES...OK
        CMP     -(R0),#FT10     ;ELSE MAYBE IT'S THE OTHER
        BEQ     1$              ;YES...OK
        PMSG    <ERR STK PARAM WD EXPECTED BUT NOT FOUND\>
        FATAL
1$:     CMP     (R0)+,(R0)+     ;BYPASS FT10 GARBAGE
2$:     MOV     (R0),R0         ;RETURN PARAMETER WORD IN R0
        RTS     R5              ;DONE
        .EVEN
$$FF:   $$CLIT                  ;FIRST FREE
        $$LITT=.                ;START OF LITERAL AREA
.END    STARTA
