
.SBTTL  MA20/MB20 ADDRESS-TAG TEST ERROR ISOLATION ROUTINE
        .NLIST  CND,BEX
.REM    %
        DGKBB ISOLATION ROUTINE FOR TEST#17.
        %
$M17:   JSR     R5,MINIT                ;INIT ISOLATION ROUTINE
        GPW     0               ;GET CONTROLLER #
        MOV     R0,CONTR
        ADD     #4,R3           ;SKIP THE PARAM ON STK
        CMP     (R4),#10.       ;DID WE DIE IN SUBTEST 10?
        BNE     10$             ;NO...NOT A WP-INH-ON-BAD-ADR-PAR PROLEM
        
PMSG    <PROBLEM IS IN THE "MAC" OR "MAT" CONTROL BOARD.  WHEN AN ADDRESS WAS\>
PMSG    <SENT TO MEM WHICH HAD BAD ADDRESS PARITY, THE WRITE PROCEDED ANYWAY.\>
        JMP     (R5)            ;RETURN TO DIACON
10$:    ADRTAG          ;REDUCE THE ERROR DATA
        MOV     R0,R2           ;SAVE THE ERR CODE
        BNE     1$              ;BR IF ERR WASN'T NXM
        CCI             ;ELSE CALL OUT CONTR BD
PMSG    <GOT NXM DURING ADR TAG TEST.  THIS SHOULD NOT HAVE\>
PMSG    <HAPPENED\>
        JMP     (R5)            ;RETURN TO DIACON
1$:     CMP     R2,#6           ;CONTROLLER LEVEL ERROR?
        BLT     2$              ;NO...FIGURE OUT WHICH STOR MOD DIED
        CCI                     ;ELSE CALL OUT CONTROL BOARD
        JSR     R5,4$           ;PRINT ERR TYPE
        PMSG    < ERROR IN CONTROLLER BOARD\>
        JMP     (R5)            ;RETURN TO DIACON
2$:     MOV     R3,R0           ;GET 11 ADR OF 10 ADR
        ADD     #2,R0
        MOVB    1(R0),R1        ;GET LOW ORD ADR BITS
        MOVB    2(R0),R0        ;GET HI ORD ADR BITS
        ROL     R1              ;ALLIGN ADR FOR MB20
        ROL     R0
        BIT     #4,R0           ;WAS ADR BIT 18 SET?
        BNE     3$              ;YEP...GOT SM NOW
        ROL     R1              ;ELSE DO ONCE AGAIN FOR MA20
        ROL     R0
3$:     BIC     #177774,R0              ;ZAP ALL BUT SM BITS
        INC     R0              ;"SUBTEST #" =SM+1
        MOV     R0,(R4)
        MOV     R2,R0           ;GET ERR TYPE #
        ADD     #4,R0           ;MAKE PSEUDO-RANGE VALUE
        COSM                    ;CALL OUT THE STORAGE MODULE
        JSR     R5,4$           ;MENTION ERR TYPE
        PMSG    < ERROR IN STORAGE MODULE\>
        JMP     (R5)            ;RETURN TO DIACON
4$:     BIT     #1,R2           ;ADR DECODE OR READ-RESTORE ERR?
        BNE     5$              ;BR IF RD-RSTR
        PMSG    <ADDRESS DECODE>
        RTS     R5
5$:     PMSG    <READ RESTORE>
        RTS     R5


 

;SEQ319

;-----SUBROUTINE TO CALL OUT A STORAGE MODULE SET.  THE SLOT NUMBERS ARE
;       DETERMINED BY THREE PARAMETERS:  THE SUBTEST # - 1 IS THE
;       STORAGE MODULE; "CVONTR" HAS THE CONTROLLER # IN IT; RO HAS THE
;       VALUE RETURNED BY "RANGE".  THIS ROUTINE USES UP UML3.
COSM:   ASR     R0              ;HALVE RANGE VALUE
        MOVB    3$,(R0),R0      ;SLOT # FOR UPPER/LOWER EVEN SMO X-Y BD
        BEQ     2$              ;BR IF FAULT IN BOTH HALVES...NOP
        PUSH    R0
        MOV     (R4),R0         ;GET SUBTEST #
        DEC     R0              ;MAKE IT SM #
        ADD     R0,(SP)         ;ADD IN SM OFFSET TO SLOT #
        ADD     R0,(SP)
        ADD     R0,(SP)
        ADD     R0,(SP)
        MOVB    CONTR,R0                ;GET CONTR #
        BIT     #BIT0,R0        ;ODD CONTR?
        BEQ     1$              ;NO...SM SLOT # COMPLETE
        ADD     #28.,(SP)       ;ELSE ADD ODD CONTR OFFSET TO SLOT #
1$:     MOVB    CNTBNT(R0),R0   ;GET BACKPLANE #
        BACKPLANE               ;SET IT
        POP     R0              ;SLOT # TO R0
        VSSET   UML3            ;SET X-Y DRIVER BOARD
        INC     R0              
        VSSET   UML3            ;SET STACK BOARD
        INC     R0
        VSSET   UML3            ;SET SENSE-INHIBIT BOARD
        PNTUML  UML3
        PMSG    <BAD STORAGE MODULE.  REPALCE ENTIRE SET GIVEN ABOVE.\>
2$:     RTS     R5              ;RETURN TO CALLER
3$:     .BYTE   14.,14.,14.,14.,2.,2.,2.,2.,2.,0,14.,2.
        .EVEN
;-----SUBROUTINE TO TAKE THE CONTR # IN R0 AND DUMP THE UML
;       DATA FOR THE SBUS INTERFACE BOARD FOR THAT CONTROLLER.
CCIN:   MOVB    CONTR,R0                ;GET CONTR 3
        CMP     R0,#4           ;DMA20 CONTR?
        BNE     1$              ;BR IF NO
        SSET    3,UML4          ;ELSE SET DTR BD (M8560) IN DMA20
BR      3$
1$:     BIT     #1,R0           ;EVEN OR ODD MA20?
        BNE     2$              ;BR IF ODD
        SSET    26.,UML4        ;SET MAC BD FOR EVEN MA20 CONTR
        BR      3$
2$:     SSET    29.,UML4                ;SET MAC BD FOR ODD MA20 CONTR
3$:     MOVB    CNTBNT(R0),R0   ;GET 7 SET BACKPLANE #
        BACKPLANE
        RTS     R5
CCI:    JSR     R5,CCIN         ;SET UP FOR PRINT
        PNTUML  UML4
        RTS     R5              ;RETURN
;-----SUBROUTINE TO SET A SLOT NUMBER, ACCORDING TO THE NUMBER IN R0,
;       IN THE GIVEN UML.
VSSET:  PUSH    R1              ;SAVE R1
        MOV     (R5)+,R1        ;GWET UML ADR
        BR      VSSET1+2        
VSSET:  PUSH    R1              ;SAVE UML ADR



;SEQ320

        PUSH    R0              ;SAV SLOT #
        BLE     1$              ;ER IF BAD SLOT #
        CMP     R0,#54.
        BLE     2$              ;BR IF GOOD #
1$:     PFORCE
        PMSG    <BAD SLOT #\>
        FATAL
2$:     SR      R0,4            ;CALC ADR OF UML WD
        ADD     R0,R1
        ADD     R0,R1           
        MOV     (SP),R0 ;CALC BIT POSITION
        BIC     #177760,R0
        PUSH    #0
        SEC
3$:     R0R     (SP)
        DEC     R0
        BGE     3$
        BIS     (SP)+,(R1)      ;SET BIT IN UML
        POP     <R0,R1>         ;RESTORE RES
        RTS     R5              ;RETURN
;-----SUBROUTINE TO CHECK FOR AND EXTRACT A PARAMETER WORD FROM THE
;       ERROR STACK.  THE DATA PASSED TO THE SUBROUTINE IS THE DIS-
;       PLACEMENT OF THE 'FTPRM' OR 'FT10' ID FROM THE BEGINNING OF THE
;       ERROR STACK, THE ADR OF WHICH SHD B IN R3.
GPW:    MOV     9R5)+,R0        ;GET DISP TO FTPRM IDENTIFIER
GPW1:   ADD     R3,R0                   ;CALC ADR OF IDNTIFIER
        CMP     (R0)+,#FTPRM    ;IS IT THE CORRECT IDENTIFIER?
        BEQ     2$              ;YES...OK
        CMP     -(R0),#FT10     ;ELSE MAYBE IT'S THE OTHER
        BEQ     1$              ;YES...OK

        PMSG    <ERR STK PARAM WD EXPECTED BUT NOT FOUND\>
        FATAL
1$:     CMP     (R0)=,(R0)+     ;BYPASS FT10 GARBAGE
2$:     MOV     (R0),R0         ;RETURN PARAMETER WORD IN R0
        RTS     R5              ;DONE
;-----ADRTAG IS A SUBROUTINE USED TO REDUCE THE NUMEROUS ERROS WHICH
;       COULD OCCUR IN THE DIAGNOSTIC ADDRESS-TAG TEST DOWN TO A USABLE
;       NUMBER.  CODES RETURNED ARE:
;       0               NXM
;       2       18-35 STACK ADR DECODE PROBLEM

;       3       18-35 STACK READ-RESTORE PROBLEM
;       4       00-17 STACK ADR DECODE PROBLEM
;       5       00-17 STACK READ-RESTORE PROBLEM
;       6       CONTROLLER ADR DECODE PROBLEM
        
;       7       CONTROLLER READ-RESTORE PROBLEM
ADRTAG: CMP     6(R3),#FTDAT    ;IS SECOND ENTRY AN FTDAT?
        BNE     1$              ;NO...NOT A NXM ERROR
        CLR     R0              ;ELSE SET ERR CODE TO NXM
        RTS     R5              ;RETURN TO CALLER
1$:     PUSH    R3              ;SAVE ERR STK PTR
        ADD     #4+6,R3         ;BYPASS 4 ERRCOM ENTRIES ON STK
        CMP     (R3),#FTM36     ;FOUND THE WD DATA YET?
        BEQ     2$              ;YES...


;SEQ321

        ADD     #2*6,R3         ;ELSE SKIP 2 MORE ENTRIES
2$:     RNAGE                   ;LOCATE THE ERR RANGE
        POP     R3              ;RESET ERR STK PTR TO WHAT IT WAS
        ASR     R0              ;REDUCE THE RANGE SOME MORE
        MOVB    4$(R0),R0
        CMP     4$(R0),R0       ;DIE IN SUBTEST 3?
        BNE     3$              ;NO...WAS ADR DECODE PROBLEM
        INC     R0              ;ELSE WAS READ-RESTORE ERR
3$:     RTS     R5              ;DONE
4$:     .BYTE   2,2,2,2,4,4,4,4,6,2,4
        .EVEN
        .EVEN

$$FF:   $$CLIT                  ;FIRST FREE
        $$LITT=.                ;START OF LITERAL AREA
.END    STARTA
  