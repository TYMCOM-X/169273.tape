;SEQ647

.SBTTL *ICTL0* ISOLATION ROUTINE FOR TEST 4 (ECTL0).

.REM    %
IF ECTLO FAILS, ONE OR MORE CONTROL LOGIC SIGNALS DID NOT RESET CORRECTLY.
THE ISOLATION ROUTINE FIRST DETERMINES IF THE FAILURE IS DUE TO A FEW STUCK
BITS OR A LAGER GROUP.  IF IT IS A FEW BITS, IT IS PROBABLY ON THE BOARD
WHERE THE ERROR WAS DETECTED.  EXCEPTIONS ARE SEARCHED FOR FIRST THEN,
IF NONE ARE FOUND, SUBROUTINE "CCALL" IS USED TO GET THE SIMPLE CASES. SINCE
THE TEST FIRST SETS ALL STORAGE LOGIC TO ITS NON-RESET STATE BEFORE DOING
A RESET, MULTIPLE FAILURES ARE DUE TO EITHER FAILURE OF A CLOCK OR RESET LINE TO A
CONTROL BOARD (ALL BITS IN A GROUP BAD) OR FAILURE OF A FLIP-FLOP ENABLE LINE
(SOME OF THE BITS IN A GROUP BAD - FLOPS CAME UP RAMDOMLY ANDWERE
NEITHER SET NOR RESET).  THE ISOLATION ROUTINE RELIES HEAVILY ON A SUBROUTINE
CALLED "PARSE" WHICH SEARCHES FOR GROUPS OF FAILED BITS ON THE ERROR
STACK CALLED OUT IN A TABLE PASSED TO IT. (SEE HEADER OF SUBROUTINE
"PARSE" FOR MORE DETAIL).
        %

ICTLO:  $SAVE                   ;SAVE DIACON'S PARAMETERS
        $CLRUML                 ;CLEAR OUT UML TABLE
        $TSTD                   ;COUNT FAILING BITS IN R0
        MOV     R0,R5           ;SAVE COUNT IN R5
        BNE     1$              ;MAKE SURE THERE ARE SOME
        JMP     .ABORT          ;BOMB OUT IF NONE
1$:     CMP     #3,R0           ;A FEW BITS OR MANY?
        BGE     ICFEW           ;NOT MANY, GO CHECK FOR EXCEPTIONS

        JMP     ICMANY          ;MANY, GO SCOPE THAT OUT TOO...


;SEQ648


;HERE TO CHECK FOR CRAM #BITS STUCK AT 1:

ICFEW:  $PARSE  $$CR2E          ;IS "CRAM # 02" S@1?
        TST     R0              ;MUST FIND ALL BITS; DID WE?
        BGE     C1E             ;NO, TEST FURTHER

        MOV     #PCR2E,R1       ;YES, SET UP STUCK SIGNAL ID PTR
CR8:    $SSET   CRM8            ;PUT BOARD IN LIST
        $SETHP  CRM8            ;MAKE IT MOST LIKELY IN LIST

S1X:    $CCALL                  ;ADD CTL BOARDS TO LIST 
        MOV     #1,R2           ;SET S@1 FLAG FOR STUCK MSG
PANDS:  JSR     PC,PUM1         ;GO PRINT BORD LIST AND FIRST MSG
STUCK:  $PSTUCK                 ;PRINT STUCK SIGNAL MSG
        JMP     @$$RET  ;EXIT
C1E:    $PARSE  $$CR1E          ;IS "CRAM # 01 E" S@1?
        BCC     C3E             ;NO, GON ON
        MOV     #PCR1E,R1       ;YES, MSG PTR
        BR      CR8             ;TAKE COMMON CALL-OUT PATH

C3E:    $PARSE  $$CR3E          ;IS 'CRAM # 03 E" S@1?
        TST     R0              ;ALL BITS FOUND?
        BGE     C4E             ;NO, GO ALONG
        MOV     #PCR3E,R1       ;YES, STK MSG PTR
CR12:   $SSET   CRM12           ;PUT BOARD'S SLOT IN LIST
        $SETHP  CRM12           ;MAKE IT MOST LIKELY
        BR      S1X             ;COMON MSG CODE AND EXIT


;SEQ649

C4E:    $PARSE  $$CR4E          ;IS "CRAM # 04" S@1?
        BCC     C5E             ;NO, CONTINUE

        MOV     #PCR4E,R1       ;YES, PTR TO STK SIGNAL NAME
        BR      CR12            ;COMMON CAL-OUT

C5E:    $PARSE  $$CR5E          ;IS "CRAM # 0-5 E" S@1?
        TST     R0              ;BOTH BITS?
        BGE     C6E             ;NO, TEST FURTHER
        MOV     #PCR5E,R1       ;YES, STK MSG PTR
        BR      CR12            ;GO CALL OUT BOARDS

C6E:    $PARSE  $$CR6E          ;IS "CRAM # 06" S@1?
        TST     R0              ;BOTH BITS?
        BGE     C7E             ;NO, GO ON
        MOV     #PCR6E,R1       ;YES, STK MSG PTR
CR16:   $SSET   CRM16           ;PUT BOARD'S SLOT IN LIST

        $SETHP  CRM16           ;MAKE IT MOST LIKELY
        BR      S1X             ;TAKE COMMON EXIT
C7E:    $PARSE  $$CR7E          ;IS "CRAM # 07" S@1?
        TST     R0              ;BOTH BITS?
        BGE     C8E             ;NO, GO AROUND
        MOV     #PCR7E,R1       ;YES, MSG PTR
        BR      CR16            ;COMMON EXIT


;SEQ650

C8E:    $PARSE  $$CR8E          ;IS "CRAM # 08 E" S@1?
        TST     R0              ;BOTH BITS?
        BGE     C0D             ;NO, GO ON

        MOV     #PCR8E,R1       ;YES, SET MSG PTR
        BR      CR16            ;AND OFF TO TELL THE NEWS

C0D:    $PARSE  $$CR0D          ;IS "CRAM # 00 D" S@1?
        BCC     C1D             ;NO, GO ON
        MOV     #PCR0D,R1       ;YES, PTR TO STUCK SIGNAL ID
CR8A:   JMP     CR8             ;COMMON EXIT
C1D:    $PARSE  $$CR1D          ;IS "CRAM # 01 D" S@1?
        BCC     C3D             ;NO, CONTINUE

        MOV     #PCR1D,R1       ;YES, SET UP PTR
        BR      CR8A            ;AND TAKE COMMON EXIT
C3D:    $PARSE  $$CR3D          ;IS "CRAM # 03 D" S@1?
        TST     R0              ;BOTH BITS?
        BGE     C6D             ;NO, GON OBN
        MOV     #PCR3D,R1       ;YES, SET PTR
CR12A:  JMP     CR12            ;COMMON CALL OUT CODE

;SEQ651

C6D:    $PARSE  $$CR6D          ;IS "CRAM # 06 D" S@1?
        BCC     C7D             ;NO
        MOV     #PCR6D,R1       ;YES
CR16A:  BR      CR16            ;COMMON EXIT

C7D:    $PARSE  $$CR7D          ;IS "CRAM # 07 D" S@1?
        BCC     C8D             ;NO
        MOV     #PCR7D,R1       ;YES
        BR      CR16A           ;EXIT

C8D:    $PARSE  $$CR8D          ;IS "CRAM # 08 D" S@1?
        BCC     C3B             ;NO

        MOV     #PCR8D,R1       ;YES
        BR      CR16A           ;EXIT

C3B:    $PARSE  $$CR3B          ;IS "CRAM # 03 B" S@1?
        TST     R0              ;BOTH BITS?
        BGE     AD12            ;NO, CONTINUE TESTING
        MOV     #PCR3B,R1       ;YES, STK MSG PTR
        BR      CR12A           ;COMMON EXIT


;SEQ652

AD12:   $PARSE  $$AD12          ;AR ANY "12" SIGNALS S@1?
        BCC     AD9             ;NO, CONTINUE
        $SSET   CRM0            ;SET RELEVANT BOARDS
        $SSET   CRM4
        $SSET   EDP12
        $SSET   APR
        $SSET   IR
        JSR     PC,PUM1         ;SING 'EM OUT
        JSR     PC,PLISTM       ;PRINT LIST OF STUCKS HEADER
        PMSG<\  ADA SEL 2 12>
        PMSG<\  AD SEL 4 12>

        PMSG<\  AD SEL 8 12>
        PMSG<\ AD BOOLE 12>
        PMSG<\  AD 12 OR AD 12 A>
        PMSG<\  IR AC 12>
        JMP     @$$RET          ;EXIT


;SEQ653

AD9:    $PARSE  $$AD09          ;IS "AD 09" OR "IR AC 09" S@1?
        BCC     AD10            ;NO, GO ON
        MOV     #PAD09,R1       ;YES, SET UP STUCK MSG
ED6:    $SSET   EDP6            ;SET SLOT OF OFFENDING BOARD
        $SETHP  EDP6            ;MAKE IT MOST LIKELY
        JMP     S1X             ;COMMON EXIT

AD10:   $PARSE  $$AD10          ;IS "AD 10","AD 10 A" OR "IR AC 10" S@1?
        TST     R0              ;BOTH BITS FOUND?
        BGE     AD11            ;NO, GO ON
        MOV     #PAD10,R1       ;YES, SET UP MSG
        BR      ED6             ;COMMON EXIT

AD11:   $PARSE  $$AD11          ;IS "AD 11","AD 11 A" OR "IR AC 11" S@1?
        TST     R0              ;BOTH?
        BGE     AR1             ;NO

        MOV     #PAD11,R1       ;YES
        BR      ED6             ;EXIT


;SEQ654

;HERE TO LOOK FOR STUCK AR BITS:

AR1:    $PARSE  $$AR01          ;IS "AR 01 C" S@1?
        BCC     AR2             ;NO, GO ON

        MOV     #PAR01C,R1      ;YES, MSG
E0M:    $SSET   EDP0            ;ASET BOARD'S SSLOT

MCLX:   $SSET   MCL             ;AND MCL
        JMP     S1X             ;AND OUT

AR2:    $PARSE  $$AR02          ;IS "AR 02 C" S@1?
        BCC     AR3             ;NO

        MOV     #PAR02C,R1      ;YES
        BR      E0M             ;EXIT

AR3:    $PARSE  $$AR03          ;IS "AR 03 C" S@1?
        BCC     AR4             ;NO

        MOV     #PAR03C,R1      ;YES
        BR      E0M             ;EXIT

AR4:    $PARSE  $$AR04          ;IS "AR 04 C" S@1?
        BCC     AR5             ;NO
        MOV     #PAR04C,R1      ;YES
        BR      E0M             ;EXIT

AR5:    $PARSE  $$AR05          ;IS "AR 05 C" S@1?
        TST     R0              ;BOTH BITS?
        BGE     AR6             ;NO

        MOV     #PAR05C,R1      ;YES
        BR      E0M             ;EXIT


;SEQ655

AR6:    $PARSE  $$AR06          ;IS "AR 06 C" S@1?
        BCC     AR7             ;NO
        MOV     #PAR06C,R1      ;YES
E6M:    $SSET   EDP6            ;SET BOARD

        BR      MCLX            ;COMMON EXIT

AR7:    $PARSE  $$AR07          ;IS "AR 07 C" S@1?
        TST     R0              ;BOTH BITS?
        BGE     AR8             ;NO

        MOV     #PAR07C,R1      ;YES
        BR      E6M             ;OUT

AR8:    $PARSE  $$AR08          ;IS "AR 08 C" S@1?
        BCC     AR9             ;NO

        MOV     #PAR08C,R1      ;YES
        BR      E6M             ;OUT

AR9:    $PARSE  $$AR09          ;IS "AR 09 C" S@1?
        BCC     AR10            ;NO
        MOV     #PAR09C,R1      ;YES
        BR      E6M             ;OUT


;SEQ656

AR10:   $PARSE  $$AR10          ;IS "AR 10 C" S@1?
        BCC     AR11            ;NO
        MOV     #PAR10C,R1      ;YES
        BR      E6M             ;OUT

AR11:   $PARSE  $$AR11          ;IS "AR 11 C" S@1?
        BCC     AR12            ;NO
        MOV     #PAR11C,R1      ;YES
        BR      E6M             ;OUT

AR12:   $PARSE  $$AR12          ;IS 'AR 12C" S@1?
        BCC     MBOXF           ;NO, NOT AN AD FAILURE
        MOV     #PAR12C,R1      ;YES
        $SSET   EDP12           ;SET SLOT

        BR      MCLX            ;COMON EXIT


;SEQ657

;HERE TO LOOK FOR ERROR FLAGS FROM THE MBOX S@1:

MBOXF:  $PARSE  $$MBX           ;ANY MBOX ERROR ONDITIONS S@1?
        BCC     TRYXLF          ;NO, TRY NEXT

        $PNTUML $$MBS           ;YES, CALL OUT SOME MBOX BOARDS
        JSR     PC,PM1          ;PRINT MSG#1
        JMP     PMBOX           ;BACK TO DIACON AFTER MBOX MSG

TRYXLF: $PARSE  $$XLFT          ;IS "PWR WARN E" S@1?
        BCC     TRYCC           ;NO, TRY NEXT
        $SSET   XLEFT           ;YES, SET TRANSLATOR BRD'S SLOT
        MOV     #PWRW,R1                ;PUT PTR TO STUCK LINE ID
        JMP     S1X             ;AND TAKE "STUCK AT 1" EXIT

TRYCC:  $PARSE  $$CC            ;IS "SPEC CALL" S@1 ON CTTL OR CLK?
        BCC     SIMPLE          ;ALL OUT OF EXCEPTIONS, GO DO SIMPLE CASE
        $SSET   CTL             ;YES, SET CTL
        $SSET   CLK             ;AND CLK
        MOV     #PSPC,R1                ;SET UP STUCK LINE PTR
        JMP     S1X             ;AND GO PRINT INFOR AND EXIT


;SEQ658

;HERE TO ISOLATE A SIMPLE CASE (SINGLE BOARD FAULTS):

SIMPLE: $CCALL                  ;SET ALL SLOTS OF BITS PRESENT
        JSR     PC,PUM1         ;RINT UML TABLE AND MSG#1
        JMP     @$$RET          ;AND QUIT

;HERE TO ISOLATE MULITPLY FAILING BITS.
;BEGIN BY USING THE # OF BITS TO DISCOVER RESET STUCKS:

ICMANY: CMP     #^D46,R5                ;SEE IF MORE THAN 46 FAILING BITS
        BGT     ICLESS          ;NO, LOOK FURTHER

        $SSET   CLK             ;YES, CAN ONLY BE ON CLOCK BOARD
        JSR             PC,PUM1         ;PRINT UML & 1ST PART OF MSG
        JMP     PM2             ;2ND PART AND EXIT
        
;NOW USE "PARSE" TO LOOK FOR STUCK RESET TO INDIVIDUAL BOARDS:


ICLESS: $PARSE  $$R0AP          ;LOOK FOR RESET TO APR S@0.
        TST     R0              ;DID THEY ALL MATCH?
        BLT     1$              ;YES, GO TO IT

        CMP     #^D25,R0                ;I'LL EVEN ACCEPT 25 OUT OF 27 MATCH
        BGT     ICR0C           ;NOPE, GO TEST CON RESET SUCKS

1$:     $PNTUML $$R2S           ;PRINT UML TABLE
        JSR     PC,PM1          ;1ST MSG
        MOV     #PMR02,R1               ;SET UP FOR STUCK MSG
        CLR     R2              ;S@0 FOR MSG PRINTER
        JMP     STUCK           ;GO DO IT


;SEQ659

ICR0C:  $PARSE  $$R0CO          ;LOOK FOR RESET TO CON S@0
        BCC     ICR0M           ;NOPE, GO TEST MCL RESET STUCKS
        TST     R0              ;DID THEY ALL MATCH?
        BLT     1$              ;YES, GO TO IT
        CMP     #^D30,R0                ;I'LL TAKE 30 OUT OF 33
        BGT     ICR0M           ;STILL NO, GO TEST MCL

1$:     $SSET   CON             ;THIS CASE IS PROBABLY ON CON

ICX4:   JSR     PC,PUM1         ;PRINT UML & 1ST MSG
        MOV     #PMR04,R1       ;SET UP STK MSG
S0X:    CLR     R2              ;CLEAR THE S@1 FLAG FOR MSG
        JMP     PANDS           ;COMMON PRINT OUT CODE AND EXIT

ICR0M:  $PARSE  $$R0MC          ;LOOK FOR RESET TO MCL S@0
        BCC     ICR1CT          ;NOPE, GO CHECK FOR RESET S@1 ON CTL
        TST     R0              ;MATCH 'EM ALL?
        BLT     1$              ;YES, GO TO IT
        CMP     #^D13,R0        ;I;LL ACCEPT 13 OUT OF 15
        BGT     ICR1CT          ;STILL NO SAE

1$:     $SSET   MCL             ;THIS CASE IS PROBABLY ON MCL
        MOV     #PMR04,R1       ;SET UP STUCK MSG PTR
        BR      S0X             ;PRINT UML TABLE & MSG


;SEQ660

;NOW LOOK FOR RESET LINE S@1 CASE:

ICR1CT: CLR     R1              ;USE R1 TO ACCUMULATE RESULTS
        $PARSE  $$R1CT       ;LOOK FOR RESET TO CTL S@1
        TST     R0              ;FIND THEM ALL?
        BGE     ICR1CO  ;NO, GO CHECK CON BRD
        INC     R1              ;BUMP TALLY
ICR1CO: $PARSE  $$R1CO  ;LOOK FOR RESET TO CON S@1
        TST     R0              ;FIND THEM ALL?
        BGE     ICTST           ;NO, GO REMEMBER ABOUT CTL
        TST     R1              ;DID WE ALSO HAVE ALL CTL STUCK?
        BGT     ICRUN           ;YES, GO REPORT ENTIRE RUN STUCK
        $SSET   CON             ;NO, RESET S@1 ON CON
MR4X:   MOV     #PMR04,R1       ;STK MSG PTR
        JMP     S1X             ;DO THE PRINT OUT AND EXIT
ICRUN:  $PNTUML $$R1S           ;PRINT UML FOR BAD RESET RUN
        JSR     PC,PM1          ;AND 1ST MSG
        MOV     #PMR04,R1       ;SET UP STK MSG PTR
        MOV     #1,R2           ;SET S@1 FLAG
        JMP     STUCK           ;GO REPORT STUCK LINE AN EXIT
        
ICTST:  TST     R1              ;REMEMBER IF CTLK RESET WAS STUCK
        BEQ     ICR1MC          ;BO, GO TEST MCL
        $SSET   CTL             ;YES, SET CTL BOARD'S SLOT
        BR      MR4X            ;PRINT UML & MSG

ICR1MC: $PARSE  $$R1MC          ;SEE IF RESET S@1 ON MCL
        TST     R0              ;MATCH ALL?
        BGE     AD6             ;NO, GO TEST AD "06" GROUP
        $SSET   MCL             ;YES, RESET IS S@1 ON MCL
        BR      MR4X            ;GO PRINT UML & MSG


;SEQ661

;HERE TO LOOK FOR OTHER INTERESTING GROUPS OF BITS:
AD6:    $PARSE  $$AD6           ;ARE ANY OF THE "06" SIGNALS S@1?
        TST     R0              ;ALL THREE BITS?
        BGE     ICLACB          ;NO, GO ON
        $SSET   CRM0            ;YES, PUT ALL BOARDS IN LIST

        $SSET   CRM4            ;AND THIS ONE
        $SSET   APR             ;AND THIS
        JSR     PC,PUM1         ;PRINT LIST AND FIRST MSG
        JSR     PC,PLISTM       ;PRINT HEADER MSG FOR LIST OF STUCKS
        PMSG<\ADA SEL 2 06>
        PMSG<\, AD SEL 4 06>
        PMSG<\  AD SEL 8 06>
        PMSG<\  AD BOOLE 06>
        JMP     @$$RET          ;EXIT

ICLACB: $PARSE  $$LACB          ;IS "LOAD AC BLOCKS" STUCK?
        BCC     ICDOA           ;NO, GO SEE ABOUT "DATAO APR"
        MOV     #PLACB,R1       ;YES, LOAD STUCK SIGNAL PTR
        TST     R0      ;FIND ALL BITS?
        BLT     ICLAC1          ;YES, GO AROUND
        JSR     PC,PSUM11               ;NO, SIGNAL STUCK AT 0,S ET APR/CON,
S0XA:   JMP     S0X             ;PRINT TABLE, MSG AND EXIT

ICLAC1: JSR     PC,PSUM1A       ;NO RESET TO SIGNAL, SET CON, PRINT
        BR      S0XA            ;TABLE, MSG AND EXIT


;SEQ662

ICDOA:  $PARSE  $$DOA           ;SEE IF "DATAO APR" IS STUCK
        BCC     ICLPC           ;NO, GO SEE ABOUT "LOAD LPREV CONTEXT"
        MOV     #PDATO,R1               ;YES, LOAD PTR
        TST     R0              ;ALL BITS?
        BLT     ICDOA1          ;YES, GO AROUND
        JSR     PC,PSUM11               ;NO, SIGNAL IS S@!0,SET APR/CON
        BR      S0XA            ;PRINT TABLE, MSG AND EXIT

ICDOA1: JSR     PC,PSUM1A               ;NO RESET TO SIGNAL, SET CON, PRINT
        BR      S0XA            ;TABLE, MSG AND EXIT
ICLPC:  $PARSE  $$LPC           ;SEE IF "LOAD PREV CONTEXT" STUCK
        BCC     ICEBC           ;NO, GO SEE ABOUT 'COND/EBUS CTL"
        MOV     #PLPC,R1                ;YES, SET UP STK MSG PTR
        TST     R0              ;ALL?
        BLT     ICLPC1          ;YES, GO AROUND
        JSR     PC,PSUM11       ;NO, SIGNAL S@0...
        BR      S0XA

ICLPC1: JSR     PC,PSUM1A               ;NO RESET TO SIGNAL...
        BR      S0XA    
        
ICEBC:  $PARSE  $$EBC           ;ANY 'COND/EBUX CTL" STUCKS?
        BCC     ICMBC           ;NO, GO CHECK "COND/MBOX CTL"
        MOV     #PEBC,R1                ;YES, LOAD STUCK SIGNAL ID PTR
        TST     R0              ;ALL?
        BLT     ICEBC1          ;YES, GO AROUND

        JSR     PC,PSUM11               ;NO, SIGNAL IS S@0
        BR      S0XA            

ICEBC1: $SSET   APR             ;RESET BAD ON APR

        BR      S0XA

;SEQ663

ICMBC:  $PARSE  $$MBC           ;LOOK FOR "COND/MBOX CL" STUCKS
        BCC     ICREQ           ;NONE FOUND; TRY "REQ EN" TO APR
        TST     R0              ;ALL?
        BLT     ICEBC1          ;YES, RESET ON APR
        JSR     PC,PSUM11               ;NO, SIGNAL S@0
        BR      S0XA

ICREQ:  $PARSE  $$REQ           ;LOOK FOR "REQ EN" TO APR STUCKS
        BCC     ICEND           ;NO, GO TO FINISH
        $SSET   MCL             ;YES, SET MCL 
ICX6:   JSR     PC,PUM1         ;PRINT TABLE 7 MSG
        JMP     @$$RET          ;EXIT
;HERE IF STILL HAVEN'T ISOLATE DTHE FAULT:

ICEND:  JMP     SIMPLE          ;SET ANY CONTROL BOARDS AND CALL 'EM OUT
;HERE TO GIVE UP IN DEFEAT:
        $ABORT

;HERE ARE SOME "CANNED" UMLT ABLES:

$$MBS:  $UML            <APR,MBZ,MBX,CSH>

$$R1S:  UML     <CLK,CTL,CON,CRA,MCL,CRM8>
        $$R2S:  $UML    <CLK,APR>


;SEQ664

;INTERNAL SUBROUTINES TO PRINT UML TABLES AND MESSAGES:

PUM1:   $PARSE  $$VMAH          ;BEFORE PRINTING LOOK FOR SCD BRD
        BCC     PUM1A           ;NO, GO AND PRINT
        $SSET   SCD             ;YES, PUT SCD IN TABLE

PU $PNTUML         ;PRINT UML TABLE
PM1:    PMSG<\ONE OR MORE CONTROL LOGIC SIGNALS >

        PMSG<DID NOT INITALIZE CORRECTLY\FOLLOWING A RESET.>
        RTS     PC              ;RETURN

PM2:    PMSG<\PROBABLY RESET IS STUCK AT 0 ON THE CLOCK BOARD.>
        JMP     @$$RET          ;EXIT
PSUM11: $SSET   APR             ;SET APR';S SLOT
PSUM1A: $SSET   CON             ;SET CON'S SLOT
        RTS     PC              ;AND RETURN

PLISTM: PMSG<\THIS FAULT MAY BE CAUSE Y ANY OF THE FOLLOWING SIGNALS STUCK AT 1:>
        RTS     PC
PMBOX:  PMSG<\THIS FAULT IS PROBABLY DUE TO FAULTY MBOX INITIALIZATION.>

        PMSG<\RUNMBOXA (DGKBA) WHICH ISOLATES MBOX INITIALIZATION>
        PMSG<\PROBLEMS IN THE FIRST 4 TESTS.>
        JMP     @$$RET


;SEQ665


;HERE ARE THE STUCK SIGNAL MESSAGE IDENTIFIER STRINGS:

PCR1E:  .ASCIZ/"CRAM # 01 E"/
PCR2E:  .ASCIZ/"CRAM # 02 E"/
PCR3E:  .ASCIZ/"CRAM 3 03 E"/
PCR4E:  .ASCIZ/"CRAM # 04 E"/
PCR5E:  .ASCIZ/'CRAM # 05 E"/
PCR6E:  .ASCIZ/"CRAM # 06 E"/
PCR7E:  .ASCIZ/"CRAM # 07 E"/
PCR8E:  .ASCIZ/"CRAM # 08 E"/
PCR0D:  .ASCIZ/"CRAM # 00 D"/
PCR1D:  .ASCIZ/'CRAM # 01 D"/
PCR3D:  .ASCIZ/"CRAM # 03 D"/
PCR6D:  .ASCIZ/'CRAM # 06 D"/
PCR7D:  .ASCIZ/"CRAM # 07 D"/
PCR8D:  .ASCIZ/"CRAM # 08 D"/
PCR3B:  .ASCIZ/"CRAM # 03 B"/
PAD11:  .ASCIZ/"AD 11","AD 11 A" OR "IR AC 11"/
PAD10:  .ASCIZ/"AD 10","AD 10 A" OR "IR AC 10"/
PAD09:  .ASCIZ/"AD 09" OR "IR AC 09"/
PAR01C: .ASCIZ/"AR 01 C"/
PAR02C: .ASCIZ/"AR 02 C"/
PAR03C: .ASCIZ/"AR 03 C"/
PAR04C: .ASCIZ/"AR 04 C"/
PAR05C: .ASCIZ/"AR 05 C"/
PAR06C: .ASCIZ/"AR 06 C"/
PAR07C: .ASCIZ/"AR 07 C"/
PAR08C: .ASCIZ/"AR 08 C"/
PAR09C: .ASCIZ/"AR 09 C"/
PAR10C: .ASCIZ/"AR 10C"/
PAR11C: .ASCIZ/"AR 11 C"/
PAR12C: .ASCIZ/"AR 12 C"/
PWRW:   .ASCIZ/"PWR WARN E"/
PSPC:   .ASCIZ/"CLK SBR CALL"/
PMR02:  .ASCIZ/"MRESET 02"/
PMR04:  .ASCIZ/"MRESET 04"/
PLACB:  .ASCIZ/"CON LOAD AC BLOCKS"/
PDATO:  .ASCIZ/"CON DATAO APR"/
PLPC:   .ASCIZ/"CON LOAD PREVIOUS CONTEXT"/
PEBC:   .ASCIZ@"COND/EBUS CTL":@
PMBC:   .ASCIZ@"COND/MBOX CTL"@

        
.EVEN


;SEQ666

;HERE ARE THE TABLES OF BITS FOR "PARSE" TO LOOK FOR ON THE ERROR STACK:

;THERE LISTS ARE FOR STUCK CRAM # BITS AND AD BITS + SELECTS:

$$CR2E: $FIND   17,10           ;"-CON PC+1 INH"
        $FEND   20,2            ;"CON UCODE STATE 01"
$$CR1E: $FEND   20,2            ;"CON UCODE STATE 01"
$$CR3E: $FIND   21,2            ;;"CON UCODE STATE 03"
        $FEND   22,20           ;"CON SR 02"
$$CR4E: $FEND   21,2            ;"CON UCODE STATE 03"
$$CR5E: $FIND   20,20           ;"CON SR 00"
        $FEND   22,2            ;"CON UCOD STATE 05"
$$CR6E: $FIND   21,20           ;"CON SR 0-1"
        $FEND   22,2            ;"CON UCODE STATE 05"

$$CR7E: $FIND   22,20           ;"CON SR 02"
        $FEND   23,2            ;"CON UCODE STATE 07"


;SEQ667

$$CR8E: $FEND   23,22           ;"CON SR 03" AND "CON UCODE STATE 07"
$$CR0D: $FEND   3,1             ;"APR EBUS RETURN"
$$CR1D: $FEND   6,2             ;"-APR EBUS REQ"
$$CR3D: $FIND   2,4             ;"APR MBOX CTL 03"
        $FEND   7,20            ;"APR EBUX DEMAND"
$$CR6D: $FEND   3,4             ;"APR MBOX CTL 06"
$$CR7D: $FEND   6,100           ;"APR WR PT SEL 0"
$$CR8D: $FEND   7,100           ;"APR WR PT SEL 1"
$$CR3B: $FIND   11,40           ;"APR CWSX"
        $FEND   33,4            ;"MCL EA TYPE 09"


;SEQ668

$$AD6:  $FEND   12,160          ;APR FM ADR 2,4 & 10
$$AD12: $FEND   12,10           ;"APR FM ADR 1"
$$AD09: $FEND   12,100          ;"APR FM ADR 10"

$$AD10: $FEND   12,44           ;"APR FM ADR 4" & "APR F02 EN"
$$AD11: $FEND   12,24           ;"APR FM ADR 2" & "APR F02 EN"
$$AR01: $FEND   24,40           ;"VMA HELD OR PC 01"
$$AR02: $FEND   24,20           ;"VMA HELD OR PC 02"
$$AR03: $FEND   24,10           ;"VMA HELD OR PC 03"
$$AR04: $FEND   24,4            ;"VMA HELD OR PC 04"
$$AR05: $FIND   24,2            ;"VMA HELD OR PC 05"
        $FEND   30,20           ;"MCL VMA USER"


;SEQ669

$$AR06: $FEND   24,1            ;"VMA HELD OR PC 06"
$$AR07: $FIND   25,40           ;"VMA HELD OR PC 07"
        $FEND   31,20           ;"MCL VMA PUBLIC
$$AR08: $FEND   25,20           ;"VMA HELD OR PC 08"
$$AR09: $FEND   25,10           ;":VMA HELD OR PC 09"
$$AR10: $FEND   25,4            ;"VMA HELD OR PC 10"
$$AR11: $FEND   25,2            ;"VMA HELD OR PC 11"
$$AR12: $FEND   25,1            ;"VMA HELD OR PC 12"


;SEQ670

;THIS ONE FOR SINGLE BIT FAILURES WHICH MIGHT BE EITHER APR OR MBOX:

$$MBX:  $FIND   0,206           ;"APR SWEEP BUSY EN", SBUS & NXM ERR IN
        $FEND   10,340          ;APR MB PAR, CDIR P & S ADR P ERR IN

;THIS ONE FOR SINGLE BIT FAILURES WHICH MIGHT BE EITHER APR OR XLEFT:


$$XLFT: $FEND   10,20           ;"APR PWR FAIL IN"

;THIS ONE FOR FAILURES INVOLVING CTL OR CLK:
$$CC:   $FEND   43,10           ;"-CTL SPEC CALL"


;SEQ671

;THE FOLLOWING TABLES ARE FOR MULTIPLE-BIT FAILURES:

;TALBE FOR S@0 RESET LINE TO APR (TOTAL OF 27 BITS):

$$R0AP: $FIND   0,7             
        $FIND   2,4             
        $FIND   3,5
        $FIND   4,377
        $FIND   6,130
        $FIND   7,130
        $FIND   10,374
        $FEND   13,200


;SEQ672

;TABLE FOR S@0 RESET LINE TO CON (TOTAL OF 33 BITS):


$$R0CO: $FIND   1,17            ;RESET TO "LOAD AC BLOCKS "(4)
        $FIND   2,3             ;RESET TO "LOAD AC BLOCKS"(2)
        $FIND   5,36            ;RESET TO "DATAO APR"(4)
        $FIND   11,377          ;RESET TO "LOAD AC BLOCKS"(2) & "LOAD PREV CTX"(6)
        $FIND   12,200          ;RESET O "LOAD AC BLOCKS"(1)
        $FIND   14,160          ;RESET TO 'CONO PI"(3)
        $FIND   15,154          ;RESET TO 'CONO PAG"(4)
        $FIND   16,1            ;RESET TO "PI CYCLE"(1)
        $FIND   17,1            ;RESET TO "MEM CYCLE"(1)
        $FIND   20,2            ;RESET TO UCODE REG(1)
        $FIND   21,6            ;RESET TO "INSTR GO" & "UCODE REG(2)
        $FIND   22,2            ;RESET TO UCODE REG(1)
        $FEND   23,2            ;RESET TO UCODE REG(1)


;SEQ673

;TABLE FOR S@0 RESET LINE TO MCL (TOTAL OF 15 BITS):

$$R0MC: $FIND   13,13           ;RESET TO "REQ EN"(3)
        $FIND   26,40           ;RESET TO "REQ EN"(1)
        $FIND   27,50           ;RESET TO "REQ EN"(2)
        $FIND   30,70           ;RESET TO "REQ EN"(19 & "LOAD VMZ CTX"(2)
        $FIND   31,60           ;RESET TO "REQ EN"(1) & "LOAD VMA CTX(1)
        $FIND   32,60           ;RESET TO "REQ EN"(1) & "LOAD VMA CTX"(1)
        $FEND   33,60           ;RESET TO "REQ EN"(1) & "LOAD VMA CTX"(1)

;TABLE FOR S@1 RESET LINE TO CTL (TOTAL OF 12 BITS):


$$R1CT: $FIND   34,30           ;920)
        $FIND   35,30           ;(2)
        $FIND   36,20           ;(1)
        $FIND   37,20           ;(1)
        $FIND   40,20           ;(1)
        $FIND   41,30           ;(2)
        $FEND   42,30           ;(2)


;SEQ674


;TABLE FOR S@1 RESET LINE TO CON (TOTAL OF 3 BITS):

$$R1CO: $FIND   21,40           ;"LOAD SPEC INSTR"(1)
        $FIND   22,40           ;"-CON VMA SEL 2"(1)
        $FEND   23,40           ;"-CON VMA SEL 1"(1)

;TABLE FOR S@1 RESET LINE TO MCL (TOTAL OF 4 BITS):
        
$$R1MC: $FIND   26,2            ;"VMA GETS AD"(1)
        $FIND   27,20           ;"-REQ EN"(1)
        $FEND   30,6            ;;"-VMAX EN" & "LOAD VMA CTX"(2)



;SEQ675

;TABLE FOR "LOAD AC BLOCKS" STUCKS (ALL=9):
$$LACB: $FIND   1,17
        $FIND   2,3             
        $FIND   11,300
        $FEND   12,200

;TABLE FOR "DATAO APR" STUCK ERRORS(4):

$$DOA:  $FEND   5,36

;TABLE FOR "LOAD PREV CONTEXT" STUCK ERROS (ALL=6):

$$LPC:  $FEND   11,77


;SEQ676

;TABLE FOR "COND/EBUS CTL" STUCK ERRORS(ALL=6):

$$EBC:  $FIND   3,1             
        $FIND   6,30
        $FIND   7,30
        $FEND   13,200

;TABLE FOR "COND/MBOX CTL" STUCK ERRORS (ALL=4):

$$MBC:  $FIND   2,4
        $FIND   3,4
        $FIND   6,100   
        $FEND   7,100

;TABLE FOR "REQ EN" STUCK ERRORS ON APR (ALL=3):

$$REQ:  $FEND   13,13
        
;TABLE FOR "VMA HELD OR PC" ERRORS:

$$VMAH: $FIND   24,77
        $FEND   25,77

;SEQ677

.SBTTL ERR8 - SUBROUTINE TO RECONSTRUCT ONE DCOMP COMPARE

.REM    %
THIS ROUTINE DOES A "DCOMP" COMPARE OF ONE BYTE ON THE ERROR
STACK AND RETURNS THE XOR OF THE ACTUAL AND EXPECTED DATA IN R0.
R1 CONTAINS THE APPROPRIATE INDEX/ACTUAL DATA FROM THE ERROR STACK
AND R3 POINTS TO THE STACK BASE ON ENTRY.

CALL:   MOV     $$ERS0,R3       ;LOAD PTR TO ERROR STACK BASE
        MOV     14(R3),R1       ;GET 2ND INDEX/DATA WORD OFF STACK
        JSR     PC,ERR8         ;GET DIFFERING BITS IN R0.
        %

ERR8:   PUSH    R5              ;SAVE REGISTERS

        SHOVE
        MOV     R1,R5           ;COPY INDEX/ACTUAL WORD TO R5
        SWAB    R5              ;PUT INDEX ON RIGHT
        BIC     #177600,R5      ;STRIP OFF ACTUAL AND SIGN BIT OF INDEX
        MOV     10(R3),R4       ;GET PTR TO EXPECTED DATA TABLE BASE
        ADD     R5,R4           ;ADD INDEX
        MOVB    (R4),R2         ;AND USE RESULT TO FETCH DATA

        MOV     6(R3),R4                ;GET PTR TO MASK TABLE BASE
        ADD     R5,R4           ;ADD INDEX
        MOVB    (R4),R3         ;AND USE RESULT TO FETCH MASK.
        BIS     #177400,R3      ;ADD BITS OF LEFT HAND BYTE TO MASK.
        
        BIC     R3,R1           ;MASK ACTUAL
        BIC     R3,R2           ;MASK EXPECTED
        MOV     R1,R0           ;SECOND COPY OF ACTUAL FOR XOR
        BIC     R2,R0           ;(-EXP).(ACT) TO R0
        BIC     R1,R2           ;(-ACT).(EXP) TO R2
        BIS     R2,R0           ;"OR" OF RESULT TO R0
        GRAB                    ;RESTORE REGISTERS
        POP     R5
        RTS     PC              ;AND DONE.


;SEQ678

.SBTTL BITCNT - SUBROUTINE TO COUNT BIRS IN BYTE

.REM    %
THIS ROUTINE COUNTS THE "ONE" BITS IN THE RIGHT-HAND BYTE OF R0 AND
RETURNS THE TOTAL IN R0.  IN ADDITION, IF THE RESULTS IS 1, THE C-BIT IS SET.



CALL:   MOVB    #ABYTE,R0       ;PUT BYTE TO BE TESTD IN R0
        JSR     PC,BITCNT       ;GET BIT TALLY BACK INR0.

        %

BITCNT: SHOVE                   ;SAVE REGISTERS
        CLR     R1              ;CLEAR ONE
        MOV     #^D8,R2         ;SET SECOND TO 8

1$:     ASR     R0              ;SHIFT BYTE TO BE TESTED.
        BCC     2$              ;GO AROUND IF BIT SHIFTED OUT WAS 0

        INC     R1              ;ELSE COUNT THE 1 BIT IN R1.

2$:     DEC     R2              ;UPDATE BITS-LEFT-TO-TEST COUNT
        BGT     1$              ;CONTINUE TESTING UNTIL DONE
        MOV     R1,R0           ;PUT RESULT IN R0

        CLC                     ;CLEAR ONE-BIT FLAG
        DEC     R1              ;SEE IF RESULT WAS 1.
        BNE     3$              ;DONE IF NOT

        SEC                     ;SET ONE-BIT FLAG

3$:     GRAB                    ;RESTORE REGISRTERS
        RTS     PC              ;AND RETURN


;SEQ679

.SBTTL TSTD - SUBROUTINE TO COUNT FAILING BITS IN DCOMP ERRORS

.REM    %
THIS ROUTINE RETURNS A COUNT OF THE NUMBER OF FAILING BITS ON THE
STACK FROM A DCOMP ERROR IN R0.,  IN ADDITION, THE C-BIT IS SET IF THE
RESULT IS ONE.  IF THE STACK HAS THE WRONG ERROR TYPE, TSTD JUMPS TO
LOCATION .ABORT.  IT USES SUBROUTINES ERR8 AND BITCNT AND EXPECTS A
POINTEER TO THE ERROR STACK BASE IN LOCATION $$ERS0.

CALL:   JSR     PC,TSTD         ;COUNT FAILING DCOMP BITS

        %

TSTD:   SHOVE                   ;SAVE REGS
        MOV     $$ERS0,R3       ;PICK UP PTR TO ERROR STACK BASE
        CMP     #FT3,(R3)       ;LOOKING AT A DCOMP ERROR?
        BEQ     TSTDOK          ;CONTINUE IF SO...

        JMP     .ABORT          ;OTHERWISE FAIL.

TSTDOK: CLR     R2              ;START COUNT AT 0
        MOV     R3,R4           ;SECOND COPY OF PTR
        ADD     #12,R4          ;MAKE IT POINT TO 1ST INDEX/DATA PAIR

TDLOOP: MOV     (R4),R1         ;GET THIS DATA PAIR
        $ERR8                   ;RECONSTRUCT FAILING BYTE IN R0
        $BITCNT         ;COUNT BITS IN R0
        ADD     R0,R2           ;ACCUMULATE TOTAL IN R2
        TST     (R4)+           ;WAS THAT LAST DATA PAIR?
        BGE     TDLOOP          ;NO, DO NEXT

        MOV     R2,R0           ;YES, COPY ANSWER TO R0
        DEC     R2              ;LESSEN THE COUNT IN R2
        BEQ     TDONE           ;WAS COUNT 1?

        CLC                     ;NO, CLEAR C-BIT
        BR      TDEXIT          ;AND LEAVE

TDONE:  SEC                     ;ONLY ONE, SET C-BIT
TDEXIT: GRAB                    ;RESTORE REGS
        RTS     PC              ;AND RETURN


;SEQ680

.SBTTL - SUBROUTINE TO LOOK FOR CERTAIN DCOMP FAILURES ON ERROR STACK

.REM    %
THIS SUBROUTINE LOOKS TO SEE  IF ANY OR ALL OF A SPECIFIED LIST OF DIAGNOSTIC
FUNCTION/EBUS BITS ARE PRESENT AS DESCREPENCIES IN A DCOMP DETECTED ERROR
ON THE ERROR STACK.  IT EXPECTS A PTR TO THE LIST OF BITS TO CHECK FOR IN R0
AND A PTR TO THE ERROR STACK BASE IN LOCATION $$ERS0. THE LIST SHOULD BE
IN THE FORMAT:

LIST:   .BYTE   BITMASK         ;FIRST DATA BYTE WITH 1'S FOR BITS TO CHECK
        .BYTE   DCOMP INDEX             ;FIRST DCOMP INDEX

          ...
        .BYTE   BITMASK         ;LAST DATA BYTE
        .BYTE   INDEX!BIT7      ;LAST INDX WITH SIGN BIT SET

PARSE INDICATES ITS FINDING BY RETURNING R0 AS FOLLOWS:

        R0 = -1 MEANS ALL THE SPECIFIED BITS WERE FOUND
        R0 > 0  MEANS R0 CONTAINS THE NUMBER OF BITS FOUND
        R0 = 0  MEANS NONE OF THE BITS WAS FOUND

IN ADDITION, THE C-BIT IS RETURNED SET WHEN AT LEAST ONE SPECIFIED BIT IS FOUND.
IF THE STACK DOES NOT CONTAIN A DCOMPE RROR, THE EXIT TO .ABORT IS TAKEN.
THIS ROUTINE USES SUBROUTINES $ERR8 AND $BITCNT.

CALL:   MOV     #LIST,R0        ;PTR TO LIST
        JSR     PC,PARSE                ;CHECK THE STACK

        %
PARSE:  SHOVE                   ;SAVE R1-R4
        MOV     R5,-(SP)        ;AND R5

        MOV     R0,R5           ;SAVE PTR TO START OF LIST
        MOV     $$ERS0,R3       ;PICK UP PTR TO ERROR STACK BASE
        CLR     $$HITS  ;INITIALIZE "HITS" TO ZERO
        MOV     #-1,$$ALL       ;SET "PERFECT-SCORE" FLAG
        CMP     #FT3,(R3)       ;DOES STACK HAVE DCOMP ERROR ?
        BEQ     GETONE          ;IF YES, GET STARTED

        JMP     .ABORT          ;IF NO, SCUTTLE THE SHIP

;HERE FOR EACH ENTRY IN THE LIST

GETONE: MOV     (R5),R0         ;PUT NEXT LIST ENTRY IN R0
        MOV     (R5)+,-(SP)     ;AND ON THE STACK

        BIC     #100377,R0      ;ELIMINATE ALL BT INDEX

;HERE TO SEARCH ERROR STACK FOR THIS INDEX:

FINDEM: MOV     R3,R4           ;COPY OF ERROR STACK PTR TO R4
        ADD     #12,R4          ;MAKE IT POINT TO 1ST DATA WORD


;SEQ681

TRYONE:MOV      (R4),R1         ;GET NEXT DATA WORD TO R1
        BIC     #100377,R1      ;MASK ALL BUT INDEX
        CMP     R0,R1           ;IS IT THE ONE?
        BEQ             GOTEM           ;LEAVE LOOP IF SO

        TST     (R4)+           ;WAS IT THE LAST ENTRY ON STACK?
        BGE     TRYONE          ;NO, GO TRY THE NEXT ENTRY

;HERE IF I DIDN'T FIND THIS INDEX:
        CLR             $$ALL           ;WELL..THERE GOES OUT PERFECT RECORD
        BR      NXTONE          ;GO SEE IF MORE LIST ENTRIES TO DO

;HERE IF I DID:

GOTEM:  MOV     (R4),R1         ;GET LIST ENTRY OFF STACK
        $ERR8                   ;RECONSTRUCT FAILURE BYTE IN R0
        MOV     (SP),R1         ;GET LIST ENTRY OFF THE STACK
        BIC     #177400,R1      ;MASK OUT ALL BUT BITS TO MATCH
        
;HERE TO FIND OUT HOW MANY MATCH:

        MOV     R1,R2           ;GET SECOND COPY OF BITS TO MATCH
        COM     R2              ;"AND" IT WITH FAILED BITS AND LEAVE
        BIC     R2,R0           ;RESULT ("HITS") IN R0. 
        CMP     R0,R1           ;HAS THE RESULT "ALL"2
        BEQ     COUNTEM         ;IF YES, COUNT BITS FOUND.

        CLR     $$ALL           ;IF NO,,CLEAR "PERFECT SCORE" FLAG


COUNTEM:        $BITCNT                 ;COUNT 1'S IN R0 & RETURN COUNT IN R0
        ADD     R0,$$HITS       ;ADD RESULT TO THE TALLY

;HERE TO SEE IF THERE ARE MORE ENTRIES TO DO:

NXTONE:TST      (SP)+           ;SEE IF LAST ENTRY WAS END OF LIST
        BGE     GETONE          ;NO, GO PROCESS NEXT ONE

;HERE TO FINISH UP WHEN ENTIRE LIST HAS BEEN PROCESSED:

        MOV     (SP)+,R5        ;RESTORE R5
        GRAB                    ;AND R1-R4

        TST     $$ALL           ;SEE IF ALL WERE FOUND
        BEQ     NOTALL          ;IF NO, GO AROUND

        MOV     #-1,R0          ;YES, SET R0 NEGATIVE

ONEORM: SEC                     ;SET C-BIT FOR ONE OR MORE BIT FOUND
        RTS     PC              ;RETURN


;SEQ682

NOTALL: MOV     $$HITS,R0       ;PUT # BITS MATCHED IN R0
        BGT     ONEORM          ;IF NOT ZERO, TAKE ONE OR MORE EXIT
        CLC                     ;ELSE CLEAR C-BIT TO SHOW NONE FOUND
        RTS     PC              ;AND EXIT

$$ALL:  0               ;ALL MATCHED FLAG
$$HITS: 0                       ;COUNTER FOR BITS FOUND

;SEQ683

.SBTTL CCALL - SUBROUTINE TO SET SLOTS OF FAILING CONTROL BOARDS

.REM    %
THIS ROUTINE CHECKS THAT THE ERROR STACK HAS A DCOMP ERROR, THEN SETS CONTROL
LOGIC SLOTS FOR ANY BITS FOUND.  ERROR STACK BASE PTR ASSUMED IN $$ERS0.

CALL:   JSR     PC,CCALL                ;SET CONTROL BRD SLOTS

        %

CCALL:  MOV     R1,-(SP)                ;SAVE A REG
        MOV     $$ERS0,R1               ;PUT ERROR STK PTR IN IT
        CMP     #FT3,(R1)       ;DCOMP ERROR?
        BEQ     1$              ;GO ON IS YES
        JMP     .ABORT          ;ELSE FAIL
1$:     ADD     #12,R1          ;UPDATE TO PT AT 1ST DATA WORD
CCOOP:  MOV     (R1),R0         ;GET NEXT DATA WORD
        SWAB    R0              ;PUT INDEX ON RIGHT
        BIC     #177600,R0      ;ELIMINATE ALL BUT INDEX
        CMP     #13,R0          ;IS INDEX IN FIRST GROUP?
        BLT     1$              ;IF NO, GO ON CHECKING
        $SSET   APR             ;THIS ONES IN APR GROUP
        BR      CCEND           ;GO SEE IF MORE TO DO
1$:     CMP     #23,R0          ;IS INDEX IN 2ND GROUP?
        BLT     2$              ;IF NO, GO ON
        $SSET   CON             ;THIS ONES IN CON GROUP
        BR      CCEND           ;GO SEE IF MORE TO DO
2$:     CMP     #33,R0          ;IS INDEX IN 3RD GROUP?
        BLT     3$              ;IF NO, GO ON
        $SSET   MCL             ;THIS ONES IN MCL GROUP
        BR      CCEND           ;GO ON
3$:     CMP     #43,R0          ;IS INDEX IN 4TH GROUP?
        BGE     4$              ;OK IF SO
        JMP     .ABORT          ;OTHERWISE ITS AN ABORTION
4$:     $SSET   CTL             ;THIS ONES IN CTL GROUP

CCEND:  TST     (R1)+           ;WAS THAT LAST ENTRY ON STK?
        BGE     CCOOP           ;NO, GO DO NEXT
        MOV     (SP)+,R1        ;YES, RESTORE REG
        RTS     PC              ;AND EXIT



;SEQ684

.SBTTL PSTUCK - SUBROUTINE FOR TYPING STUCK LINE MESSAGES

.REM    %
THIS SUBROUTINE PRINTS THE MESSAGE:  'CHECK THAT X IS NOT STUCK AT Y"
WHERE X IS AN ASCII STRING POINTED TO BY R1 AND Y IS THE OCTAL CONTENTS
OF R2 (0 OR 1).
        %

PSTUCK: PMSG<\CHECK THAT  >             ;PRINT FIRST PART
        MOV     R1,R0           ;PUT PTR TO LINE I.D. IN R0
        PNTAL                   ;PRINT IT
        PMSG< IS NOT STUCK AT > ;PRINT NEXT PART
        TST     R2              ;SEE WHICH TYPE OF FAULT
        BGT     STUCK1          ;IT'S S@1
        BEQ     STUCK0          ;IT'S S@0
        PMSG<0 OR 1.>   ;ITS EITHER
        RTS     PC              ;RETURN

STUCK1: PMSG<1.>                ;S@1 MSG
        RTS     PC              ;RETURN

STUCK0: PMSG<0.>                ;S@0 MSG
        RTS     PC              ;RETURN


;SEQ685


.SBTTL *ISOEND* STORAGE FOR ISOLATION ROUTINE PARAMETERS

$$RET:  0               ;RETURN ADDRESS TO DIACON
$$TAB:  0               ;PTR TO DIACON'S DATA TABLE
        
$$ERS0: 0               ;PTR TO ERROR STACK BASE
        
$$ERS:  0               ;PTR TO CURRENT ERROR STACK
$$UML:  0,0,0,0         ;STORAGE FOR BOARD CALLOUT TABLE
$$BUF:                  
$$XOR:  0,0,0,0,0,0     ;STORAGE FOR 36-BIT OR 80-BIT WORD

$$LITT  =  .            ;START OF LITERAL AREA
$$FF    =  $$CLIT               ;FIRST FREE
        .END    ISOGO   ;TRANSFER ADDRESS

 6
}Q