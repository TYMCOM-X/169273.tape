SUBTTL MOVE - move commands

DEFINE MOV1 <
	X USER,1,CMDMUS,-1,-1 	; move user
	X REMOV,1,CMDMRU,-1,-1	; remove user after move
	X HOME,1,CMDMUH,-1,-1	; move home
	X MAIL,1,CMDMMI,-1,-1	; move home
>

	SUBCOM	([ASCIZ/Move :/],MOV,MOV1)
CMDMUS:
	TCR	(1)
	PUSHJ	P,GETACC	; get acctg circuit
	 JRST	GETCMD
	PUSHJ	P,GETCUD	; get cud circuit
	 JRST	GETCMD
	PUSHJ	P,GETHOO	; get old host
	 JRST	GETCMD
	PUSHJ	P,GETHON	; get new host
	 JRST	GETCMD
	MOVE	AC,OLDASY	; make sure old and new host same type.
	CAMN	AC,NEWASY
	 JRST	CMMUS0
	TYPSTR	([ASCIZ/New and old hosts must be same type./])
	PUSHJ	P,INORNO
	JRST	CMDMUS
CMMUS0:	MOVE	AC,NEWASY
	CAIE	AC,A370		; if 370's let them do a set pack.
	 JRST	 CMMUS1
	GETYR	([ASCIZ/Do you want to set a pack group ?/])
	 JRST	[PUSHJ	P,UNSPCK
		 JRST	CMMUS1]
	PUSHJ	P,SETPCK
CMMUS1:				; loop here for each username.
	TCR	(1)
	PUSHJ	P,GETUNM
	 JRST	CMMUSD		; all done.
	PUSHJ	P,GCREC		; get his cud record.
	 JRST	CMMUS1
	MOVE	AC1,NEWASY	; index for table.
	PUSHJ	P,@CMMUST-1(AC1) ; go to cmus10 or cmus94 or cmus37
	GETT	(/MOV/)		; do tattle tale.
	 JRST	CMMUS1		; or not.
	TTFSTR	([ASCIZ/Move User/])
	PUSHJ	P,STDUHD
	TTFSTR	([ASCIZ/Old Host :/],777,N)
	TTFNUM	(OLDHOS,D)
	TTFSTR	([ASCIZ/New Host :/],777,N)
	TTFNUM	(NEWHOS,D)
	SKIPN	PCKG
	 JRST	CMMU1B
	TTFSTR	([ASCIZ/Pack Group :/],777,N)
	TTFSTR	(PCKG,L.PKGP)
CMMU1B:	PUSHJ	P,RELTTF
	JRST	CMMUS1

CMUS10:	; move a user for tymcom-10
	SNDBYT	(OLDPRT,\B.LCOM,LMVLUD,I)
	SNDSTR	(OLDPRT,L.UNM,UNMSPC)
	PUSHJ	P,OLDA
	 SKIPA
	 JRST	CMUS1B
; if old lud host sent an error code, output it and finish with this name.
	TYPSTR	([ASCIZ/Old Lud Host - /],777,0,0,N)
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
	JRST	CMUS16
CMUS1B:	; get info from old lud host
	GETBYT	(OLDPRT,\B.GAN)
	 JRST	GETCMD
	MOVEM	AC1,LUXGAN
	GETBYT	(OLDPRT,\B.UUN)
	 JRST	GETCMD
	MOVEM	AC1,LUXUUN
	GETBYT	(OLDPRT,\B.DIS)
	 JRST	GETCMD
	MOVEM	AC1,LUXDIS
	GETBYT	(OLDPRT,\B.MIS)
	 JRST	GETCMD
	MOVEM	AC1,LUXMIS
	SETZM	LUXBUD
	TRNN	AC1,BUD.MI	; skip if budget info coming up.
	 JRST	CMUS11
	GETBYT	(OLDPRT,\B.BUD)
	 JRST	GETCMD
	MOVEM	AC1,LUXBUD
CMUS11:	MOVE	AC1,LUXMIS
	TRNN	AC1,INF.MI	; skip if init file info coming
	 JRST	CMUS12
	GETSTR	(OLDPRT,L.UNM,LUXUSN)
	GETSTR	(OLDPRT,L.INF,LUXPRN)
CMUS12:	GETBYT	(OLDPRT,3)
	 JRST	GETCMD
	MOVEM	AC1,LUXPRV
	GETBYT	(AC,3)
	 JRST	GETCMD
	MOVEM	AC1,LUXPR2
	GETBYT	(AC,\B.QUOT)
	 JRST	GETCMD
	MOVEM	AC1,LUXQIN
	GETBYT	(AC,\B.QUOT)
	 JRST	GETCMD
	MOVEM	AC1,LUXQOT
; now add it to the new host
	SNDBYT	(NEWPRT,\B.LCOM,AMVLUD,I)
	SNDSTR	(AC,L.UNM,UNMSPC)
	SNDBYT	(AC,\B.GAN,LUXGAN)
	SNDBYT	(AC,\B.UUN,LUXUUN)
	SNDBYT	(AC,\B.DIS,LUXDIS)
	SNDBYT	(AC,\B.MIS,LUXMIS)
	MOVE	AC1,LUXMIS
	TRNN	AC1,BUD.MI		; skip if sending budget
	 JRST	CMUS13
	SNDBYT	(NEWPRT,\B.BUD,LUXBUD)
CMUS13:	MOVE	AC1,LUXMIS
	TRNN	AC1,INF.MI		; skip if sending init file
	 JRST	CMUS14
	SNDSTR	(NEWPRT,L.UNM,LUXUSN)
	SNDSTR	(NEWPRT,L.INF,LUXPRN)
CMUS14:	SNDBYT	(AC,3,LUXPRV)
	SNDBYT	(AC,3,LUXPR2)
	SNDBYT	(AC,\B.QUOT,LUXQIN)
	SNDBYT	(AC,\B.QUOT,LUXQOT)
	PUSHJ	P,NEWA		; get answer from new host
	 JFCL			; always output info.
	TYPSTR	([ASCIZ/New Lud Host - /],777,0,0,N)
	MOVE	AC1,NEWANS
	PUSHJ	P,LUDAOT
	MOVE	AC,NEWANS
	CAIN	AC,2		; return two is ok here.
	 JRST	CMUSJ
	CAIE	AC,LUD.OK
	 JRST	CMUS16
CMUSJ:	PUSHJ	P,CMUADD	; add it to accounting.
	 JRST	CMUS21
; now try to build a circuit to the new entry on the new host.
	TYPSTR	([ASCIZ/Creating Ufd./])
	MOVEI	AC,TR.UFD
	MOVEM	AC,UFDTRY
CMUS15:	SOSGE	UFDTRY
	 JRST	CMUS16		; don't try any more
	MOVE	AC,[UFDLOG,,UFDLOG+1]
	SETZM	UFDLOG		; zero it out.
	BLT	AC,UFDLOG+UFDLEN-1
	MOVE	AC,[UNMSPC,,UFDLOG]	; move in the username.
	BLT	AC,UFDLOG+2
	MOVEI	AC,UFDLOG
	MOVEI	AC1,UFDLEN*5
	PUSHJ	P,CNTCHR	; get number of chars in username.
	MOVE	AC,UFDBP-1(AC1)	; get correct byte pointer.
	MOVEI	AC1,":"		; deposit the colon.
	IDPB	AC1,AC
	MOVE	AC1,NEWHOS
	MOVEI	AC2,UFDLOG
	PUSHJ	P,BLDCIR	; call circuit building routine.
	 JRST	CMUS15		; try again
	HRLZS	AC		; get ready to output to new port.
	HRRI	AC,.AXO8I
	AUXCAL	AC,.CR
	AUXCAL	AC,.CR
	HRRI	AC,.AXOST
	AUXCAL	AC,UFDST
	MOVEI	AC1,1
	SLEEP	AC1,		; give it a chance to take.
	HLRZS	AC
	ZAPCIR	AC,		; and zap the circuit.
	TYPSTR	([ASCIZ/Ufd Created./])
CMUS16:
	POPJ	P,

CMUS21:	; failed to add to acctng, reverse lud entry.
	SNDBYT	(NEWPRT,\B.LCOM,REMLUD,I)
	SNDSTR	(NEWPRT,L.UNM,UNMSPC)
	PUSHJ	P,NEWA
	 JFCL
	POPJ	P,


CMUS37:	; move a user for tymcom-370
	SNDBYT	(OLDPRT,\B.LCOM,LMVLUD,I)
	SNDSTR	(OLDPRT,L.UNM3,UNMSPC)
	PUSHJ	P,OLDA
	 SKIPA
	JRST	CMUS30
	TYPSTR	([ASCIZ/Old Lud Host -/],777,0,0,N)
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
	JRST	CMUS35
CMUS30:	SNDBYT	(NEWPRT,\B.LCOM,AMVLUD,I)
; the old VM/370 sends us input terminated by two bytes of 377.
; all we have to do here is pipeline everything over to the new host.
; single occurances of 377 bytes are simply transmitted.
	GETBYT	(OLDPRT)
	 JRST	GETCMD
	JRST	CMUS32
CMUS31:
	GETBYT	(OLDPRT)
	 JRST	GETCMD
CMUS32:	SNDBYT	(NEWPRT,1,AC1)
	CAIE	AC1,377
	 JRST	CMUS31
	GETBYT	(OLDPRT)
	 JRST	GETCMD
	SNDBYT	(NEWPRT,1,AC1)
	CAIE	AC1,377
	 JRST	CMUS31
	PUSHJ	P,NEWA
	 JFCL
	TYPSTR	([ASCIZ/New Lud Host -/],777,0,0,N)
	MOVE	AC1,NEWANS
	PUSHJ	P,LUDAOT
	MOVE	AC,NEWANS
	CAIN	AC,2
	 JRST	CMUS34
	CAIE	AC,LUD.OK
	 JRST	CMUS40
	TYPSTR	([ASCIZ/Mdisks :/],777,0,0,N)
CMUS33:	GETSTR	(NEWPRT,L.MDI,NUM)
	CAIN	AC1,377
	 JRST	CMUS34
	TYPSTR	(NUM,3,1,0,N)
	JRST	CMUS33
CMUS34:
	TCR	(1)
	PUSHJ	P,CMUADD
	 JRST	CMUS41
CMUS35:	POPJ	P,

CMUS40:
	PUSHJ	P,UNSPCK
	JRST	GETCMD

CMUS41:
	SNDBYT	(NEWPRT,\B.LCOM,REMLUD,I)
	SNDSTR	(NEWPRT,L.UNM3,UNMSPC)
	PUSHJ	P,NEWA
	 JFCL
	PUSHJ	P,UNSPCK
	JRST	GETCMD

CMUADD:	; add the new host
	SNDBYT	(ACTPRT,\B.ACOM,AUSACT,I)
	SNDBYT	(AC,\B.UUN,NMUUN)
	SNDBYT	(AC,\B.HST,NEWHOS)
	PUSHJ	P,AGANS
	 SKIPA
	AOS	0(P)
	MOVE	AC,ACANS
	TYPSTR	([ASCIZ/Accounting - /],777,0,0,N)
	MOVE	AC1,ACANS
	CAIN	AC1,2
	 AOS	0(P)
	PUSHJ	P,LUDAOT
	POPJ	P,

CMMUSD:
	PUSHJ	P,UNSPCK
	TRO	FLG,U.OKAY
	POPJ	P,

CMMUSE:
	POPJ	P,


CMMUST:	; table of addresses for procedure by system type
	EXP	CMUS10,CMUS94,CMUS37

SETPCK:	; set pack
	INSTR	([ASCIZ/Volid or Pack Group :/],PCKG,L.PKGP,T)
	SNDBYT	(NEWPRT,\B.LCOM,SPKLUD,I)
	SNDSTR	(NEWPRT,L.PKGP,PCKG)
	PUSHJ	P,NEWA
	 SKIPA
	 POPJ	P,
	MOVE	AC1,NEWANS
	PUSHJ	P,LUDAOT
	PUSHJ	P,INORNO
	JRST	SETPCK

UNSPCK:	; unset pack
	SKIPN	PCKG
	 JRST	UNSPC2
	MOVE	AC,NEWASY
	CAIE	AC,A370
	 JRST	UNSPC2
	SNDBYT	(NEWPRT,\B.LCOM,SAPLUD,I)
	PUSHJ	P,NEWA
	 JFCL
	SETZM	PCKG
UNSPC2:
	POPJ	P,
BADCIR:
        PUSHJ   P,GETACC
         JRST   GETCMD
        PUSHJ   P,GETCUD
         JRST   GETCMD
        PUSHJ   P,GETHOO
         JRST   GETCMD
        PUSHJ   P,GETUNM
         JRST   GETCMD
        PUSHJ   P,GCREC
         JRST   GETCMD
        SNDBYT  (OLDPRT,\B.LCOM,KNALUD,I)
        SNDBYT  (OLDPRT,L.UNM,UNMSPC)
        PUSHJ   P,OLDA
         JRST   GETCMD
CMDMRU:	; remove user after move (only if valid on new host)
	TCR	(1)
	PUSHJ	P,GETACC
	 JRST	GETCMD
	PUSHJ	P,GETCUD
	 JRST	GETCMD
	PUSHJ	P,GETHOO
	 JRST	GETCMD
	PUSHJ	P,GETHON
	 JRST	GETCMD
	MOVE	AC,OLDASY
	CAMN	AC,NEWASY
	 JRST	CMMRU0
	TYPSTR	([ASCIZ/New and old hosts must be same type./])
	PUSHJ	P,INORNO
	JRST	CMDMRU
CMMRU0:
CMMRU1:
	TCR	(1)
	PUSHJ	P,GETUNM
	 JRST	CMMRUD
	PUSHJ	P,GCREC
	 JRST	CMMRU1
	MOVE	AC1,NEWASY
	PUSHJ	P,@CMMRUT-1(AC1) ; go to cmru10, cmru94, or cmru37
	GETT	(/MOV/)
	 JRST	CMMRU1
	TTFSTR	([ASCIZ/Move Remove/])
	PUSHJ	P,STDUHD
	TTFSTR	([ASCIZ/Old Host :/],777,N)
	TTFNUM	(OLDHOS,D)
	TTFSTR	([ASCIZ/New Host :/],777,N)
	TTFNUM	(NEWHOS,D)
	PUSHJ	P,RELTTF
	JRST	CMMRU1

CMRU10:	; move remove for 10's
        JRST    CMRU1B
	SNDBYT	(NEWPRT,\B.LCOM,KNALUD,I)
	SNDSTR	(NEWPRT,L.UNM,UNMSPC)
	PUSHJ	P,NEWA
	 SKIPA
	 JRST	CMRU1B
	TYPSTR	([ASCIZ/New Lud Host - /],777,0,0,N)
	MOVE	AC1,NEWANS
	PUSHJ	P,LUDAOT
	TYPSTR	([ASCIZ/Username not removed from old host./])
	POPJ	P,
CMRU1B: SNDBYT	(OLDPRT,\B.LCOM,REMLUD,I)
	SNDSTR	(OLDPRT,L.UNM,UNMSPC)
	PUSHJ	P,OLDA
	 JFCL
	TYPSTR	([ASCIZ/Old Lud Host - /],777,0,0,N)
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
        GETBYT  (OLDPRT,\B.GAN)
         JRST   GETCMD
        GETBYT  (OLDPRT,\B.UUN)
         JRST   GETCMD
	PUSHJ	P,CMUREM
	POPJ	P,


CMRU37:	; move remove for 370
	SNDBYT	(NEWPRT,\B.LCOM,KNALUD,I)
	SNDSTR	(NEWPRT,L.UNM3,UNMSPC)
	PUSHJ	P,NEWA
	 SKIPA
	 JRST	CMRU3B
	TYPSTR	([ASCIZ/New Lud Host - /],777,0,0,N)
	MOVE	AC1,NEWANS
	PUSHJ	P,LUDAOT
	TYPSTR	([ASCIZ/Username not removed from old host./])
	POPJ	P,
CMRU3B:	SNDBYT	(OLDPRT,\B.LCOM,REMLUD,I)
	SNDSTR	(OLDPRT,\L.UNM3,UNMSPC)
	PUSHJ	P,OLDA
	 JFCL
	TYPSTR	([ASCIZ/Old Lud Host - /],777,0,0,N)
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
	PUSHJ	P,CMUREM
	POPJ	P,

CMUREM:	SNDBYT	(ACTPRT,\B.ACOM,RUSACT,I)
	SNDBYT	(ACTPRT,\B.UUN,NMUUN)
	SNDBYT	(ACTPRT,\B.HST,OLDHOS)
	PUSHJ	P,AGANS
	 JFCL
	TYPSTR	([ASCIZ/Accounting - /],777,0,0,N)
	MOVE	AC1,ACANS
	PUSHJ	P,LUDAOT
	POPJ	P,

CMMRUD:	; done
	TRO	FLG,U.OKAY
	POPJ	P,

CMMRUT:	EXP	CMRU10,CMRU94,CMRU37

CMDMUH: ; change user home (for class 2 group 1 users only)
        TCR     (1)
        PUSHJ   P,GETCUD        ; get cud circuit
         JRST   GETCMD
        PUSHJ   P,GETACC        ; get acct circuit
         JRST   GETCMD
CMMUH0:	INNUM	([ASCIZ/Old home : /],D)
	 JRST	[PUSHJ	P,INORNO
		 JRST	CMMUH0]
	MOVEM	AC1,OLDHOH
        PUSHJ   P,GETHOH        ; get home host number, must be tymshare
CMMUH1: TCR     (1)
        PUSHJ   P,GETUNM        ; get a username
         JRST   CMMUHD          ; done
        PUSHJ   P,GCREC         ; get cud record
         JRST   CMMUH1
        MOVE    AC,NMCLSS+1     ; get class number
        CAIE    AC,D.CLS        ; skip if standard
         JRST   CMMUHE          ; no go
        MOVE    AC,NMCLSS+2     ; get first word (group)
        CAIE    AC,GRP.CD!D.GRP ; skip if group 1
         JRST   CMMUHE          ; also no go
; if we get to here, then 1st position is class 2 group 1
        MOVEI   AC1,NMCLSS+3    ; address of 1st host record
        MOVEI   AC3,NMSZCS-3    ; number of possible entries
CMMUH2: MOVE    AC,0(AC1)       ; get entry
        TRZN    AC,HOM.CD       ; see if home host
         JRST   [AOJ    AC1,    ; no, try next one
                 SOJG   AC3,CMMUH2
                 JRST   CMUHE2]
	CAME	AC,OLDHOH	; skip if same as old home
	 JRST	[AOJ	AC1,
		 SOJG	AC3,CMMUH2
		 JRST	CMUHE2]
        MOVE    AC,HOMSYS       ; got it, get our new home sys
        TRO     AC,HOM.CD       ; flag it
        MOVEM   AC,0(AC1)       ; change it
; change the class
        SNDBYT  (CUDPRT,\B.CCOM,CCLMUD,I)
        PUSHJ   P,SNMCUD        ; send username
        SNDBYT  (CUDPRT,1,1,I)  ; position number always 1
        MOVEI   AC,NMCLSS+1     ; send the rest
        MOVEM   AC,CLSIND
        MOVE    AC,NMCLSS
        MOVEM   AC,CLSCTR
        SNDBYT  (CUDPRT,1,NMCLSS)
CMMUH3: SNDBYT  (CUDPRT,2,@CLSIND)
        SOSGE   CLSCTR
         JRST   CMMUH4
        AOS     CLSIND
        JRST    CMMUH3
CMMUH4: PUSHJ   P,SND40         ; send terminator
        PUSHJ   P,NGANS         ; get answer
         JFCL
        PUSHJ   P,NANOUT        ; type answer
        PUSHJ   P,GET40         ; get terminator
	GETT	(/MOV/)
	 JRST	CMMUH1
	TTFSTR	([ASCIZ/Move Home/])
	PUSHJ	P,STDUHD
	TTFSTR	([ASCIZ/New Home Host :/],777,N)
	TTFNUM	(HOMSYS,D)
	PUSHJ	P,RELTTF
	JRST    CMMUH1          ; do another user

CMMUHE: ; does not qualify
        TYPSTR  ([ASCIZ/Can only change class 2 group 1 users./])
        JRST    CMMUH1

CMUHE2:	; does not qualify
	TYPSTR	([ASCIZ/Old home not matched - home not changed./])
	JRST	CMMUH1

CMMUHD: ; done
        TRO     FLG,U.OKAY
        POPJ    P,
 
 
 
 
 
DEFINE RMV1 <
	X USER,1,CMDRMU,-1,-1 	; remove user
	X GAN,1,CMDRMG,U.PRV,-1	; remove gan
	X DEVIC,1,CMDRMD,-1,-1  ; remove device
>
 
	SUBCOM	([ASCIZ/Remove :/],RMV,RMV1)
CMDRMU: ; remove user from the lud and cancel the host from user in acctg.
	TCR	(1)
        PUSHJ   P,CHKFRA              ; check French validators' username
        TLNE    FLG2,V.EXQ!V.LSQ!V.PRQ
         JRST   CMDRM1
        TLNE    FLG,U.IMM
         JRST   CMDRM1
        TYPSTR  (WN1,777,0,1)
        TCR     (1)
CMDRM1: TRO     FLG2,V.NIR

DEFINE CAHS <
	X	(NAMOUP,GEAUSR,RWUSR)
	X	(HST1OT,GE1HST,RWH37)
	X	(SCMOUT,GETSCM,RWSCM,FLG2,V.NIR) ; if (not immediate) or req
>
	EXMMAC (CAH,CAHS,^D39,USRRQQ)

; code for remove user host starts here, only immediate mode and
; PROCESS command can enter the following codes
 
        PUSHJ   P,GETOLD
         JRST   GETCMD

; delete a host for a uun in accounting
 
        SNDBYT  (ACTPRT,\B.ACOM,RUSACT,I)
        SNDBYT  (AC,\B.UUN,NMUUN)     ; send uun
        SNDBYT  (AC,\B.HST,LUDNUM)
        PUSHJ   P,AGANS
         JRST   CAHSE2
 
; remove user from lud - will be treated  differently according to
; system type
  
        MOVE    AC,OLDASY             ; get accounting system type
        CAIN    AC,A370               ; skip if not 370
         JRST   CAH370
 
        ; remove user from pdp10 lud
 
	SNDBYT	(OLDPRT,\B.LCOM,REMLUD,I)	
        SNDSTR  (AC,L.UNM,UNMSPC)
        JRST    CAHDNE
 
CAH370: ; remove user from 370 lud
	SNDBYT	(OLDPRT,\B.LCOM,REMLUD,I)	
       	SNDSTR  (AC,L.UNM3,UNMSPC)
         JRST   CAHDNE
 
 
CAHDNE: PUSHJ   P,OLDA
         JRST   CAHSE4
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
        MOVE    AC,OLDASY
        CAIE    AC,A10                ; skip if pdp10
         JRST   REMVTT
        GETBYT  (OLDPRT,\B.GAN)       ; get gan
         JRST   GETCMD
        GETBYT  (OLDPRT,\B.UUN)       ; get uun
         JRST   GETCMD
; tattle
REMVTT: GETT    (/MOV/)
	 JRST	CAHST4
	TTFSTR	([ASCIZ/Remove User /])
	PUSHJ	P,STDUHD
        TTFSTR  ([ASCIZ/Host : /],777,N)
        TTFNUM  (HOST,D)
	PUSHJ	P,RELTTF
 
CAHST4:	TLNE	FLG2,V.PRQ		; skip if we are not processing req
	 JRST	CAHSTD			; if this is a request, finish up
	GETYR	([ASCIZ/Do Another?/])
         JRST   CAHSTD
	JRST	CAHST2			; ABRV'ST2 is the menu output section

CAHSTD:	; done, successful completion
	TRO	FLG,U.OKAY
	POPJ	P,
CAHSE2:	; error during delete user host in accounting
	TYPSTR	([ASCIZ/Error during Cancel User Host in Accounting./])
	MOVE	AC1,ACANS
	PUSHJ	P,LUDAOT
        JRST    CAHSE3
 
CAHSE3: ; after error, see if we can give him another chance
        TLNE    FLG2,V.PRQ            ; skip if not processing a request
         POPJ   P,
        GETYR   ([ASCIZ/Do you want to continue ?/])
         POPJ   P,
        JRST    CAHST2

CAHSE4:	; error during remove user from the lud
	TYPSTR	([ASCIZ/Error during Remove User from the Lud./])
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
        SNDBYT  (ACTPRT,\B.CCOM,REVACT,I)   ; reverse last acctg. entry
        PUSHJ   P,AGANS
         JRST   [TYPSTR  ([ASCIZ/Reverse Acctg. Entry not Working!/])
                 MOVE    AC1,ACANS
                 PUSHJ   P,LUDAOT
                 POPJ    P,]
        POPJ    P,

; end of code for removing user
WN1:    ASCIZ   -*** Please contact operation to stop billing for files, tapes etc.-
 
GEAUSR: ; input username and perform various checkings
        PUSHJ   P,GETUNM
         JRST   [PUSHJ   P,INORNO
                 JRST    GEAUSR]
        TLNE    FLG2,V.LSQ            ; skip if it is a type command
         POPJ   P,
        PUSHJ   P,GETCUD
         JRST   GETCMD
        PUSHJ   P,GCREC
         JRST   GEAUS2
        PUSHJ   P,CHKUUN              ; check access
         JRST   GEAUS2
        PUSHJ   P,GETACC
         JRST   GETCMD
        SNDBYT  (ACTPRT,\B.ACOM,LHOACT,I)  ; get all hosts for this user
        SNDBYT  (AC,\B.UUN,NMUUN)
        PUSHJ   P,AGANS
         JRST   [TYPSTR  ([ASCIZ/Error in listing hosts for this user/])
                 JRST    GEAUS2]
        PUSHJ   P,GHSTAC              ; input hosts
        MOVE    AC1,UAHSTP
        CAILE   AC1,1                 ; skip if number of hosts < 2
         JRST   GEAUS1
        CAIE    AC1,1                 ; skip if only one host
         JRST   [TYPSTR  ([ASCIZ/User is not valid on any host/])
                 JRST    GEAUS2]
        SETZM   FLG88
        PUSHJ   P,KLSOUT              ; check if home host is 88
        MOVE    AC,FLG88
        CAIE    AC,^D88               ; if home host is 88 then skip
         JRST   [TYPSTR  ([ASCIZ/User is not valid on more than 1 host/])
                 JRST    GEAUS2]
GEAUS1: TLNN    FLG2,V.EXC            ; skip if changing items
         POPJ   P,
        PUSHJ   P,CKHST1              ; check user valid on this host
         JRST   GEAUS2
        POPJ    P,
 
GEAUS2:
        TRNN    FLG,U.RFI             ; skip if this is from a request
         JRST    [PUSHJ   P,INORNO
                  JRST    GEAUSR]
        PUSHJ   P,REQERR
        POPJ    P,
 
GE1HST:
        INNUM   ([ASCIZ/Host :/],D)
         JRST   [PUSHJ   P,INORNO
                 JRST    GE1HST]
        JUMPE   AC1,.-1
        MOVEM   AC1,LUDNUM
        MOVEM   AC1,HOST
        TLNE    FLG2,V.LSQ
         POPJ   P,
        PUSHJ   P,CKHST1              ; check name valid on this host
         JRST   GE1HST
        POPJ    P,
CMDRMG: ; remove gan from one host
	TCR	(1)
        TLNE    FLG2,V.EXQ!V.LSQ!V.PRQ
         JRST   CMDRM2
        TLNE    FLG,U.IMM
         JRST   CMDRM2
        TYPSTR  (WN1,777,0,1)
        TCR     (1)
CMDRM2: TRO     FLG2,V.NIR

DEFINE RMGA <
	X	(GANOU1,GEAGAN,RWUSR)
        X       (HST1OT,GE1HST,RWH37)
	X	(SCMOUT,GETSCM,RWSCM,FLG2,V.NIR) ; if (not immediate) or req
>
	EXMMAC (RMG,RMGA,^D42,USRRQQ)

; code for remove gan from a host starts here, only immediate mode and
; PROCESS command can enter the following codes

        PUSHJ   P,GETOLD
         JRST   GETCMD
 
; cancel gan from the lud - will be treated differently according to
; system type
  
        MOVE    AC,OLDASY             ; get accounting system type
        CAIN    AC,A370               ; skip if not 370
         JRST   RMG370
 
        ; cancel gan  from pdp10 l
	SNDBYT	(OLDPRT,\B.LCOM,DACLUD,I)	
        SNDBYT  (AC,\B.GAN,NMGAN)
        JRST    RMGLU1
 
RMG370: ; cancel gan  from 370 lud
	SNDBYT	(OLDPRT,\B.LCOM,DACLUD,I)	
       	SNDBYT  (AC,\B.GAN,NMGAN)
         JRST   RMGLU1
 
 
RMGLU1: PUSHJ   P,OLDA
         JRST   RMGAE2
GUSRLO: GETSTR  (AC,L.UNM,UNMSPC)     ; input username
        CAIN    AC1,377               ; skip if not end
         JRST   RMGDNE                ; all done
        GETBYT  (OLDPRT,\B.GAN)       ; get gan
         JRST   GETCMD
        GETBYT  (OLDPRT,\B.UUN)       ; get uun
         JRST   GETCMD
        MOVEM   AC1,NMUUN
        GETBYT  (OLDPRT)              ; get one byte
         JRST   GETCMD
        CAIE    AC1,1
         JRST   RMGAE2
 
; delete a host from user in accounting
 
        SNDBYT  (ACTPRT,\B.ACOM,RUSACT,I)
        SNDBYT  (AC,\B.UUN,NMUUN)     ; send uun
        SNDBYT  (AC,\B.HST,LUDNUM)
        PUSHJ   P,AGANS
         JRST   RMGAE4
        JRST    GUSRLO
 
; tattle
 
RMGDNE: GETT    (/MOV/)
	 JRST	RMGAT4
	TTFSTR	([ASCIZ/Remove Gan  /])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF
        TYPSTR  ([ASCIZ/Entry Complete./])
 
RMGAT4:	TLNE	FLG2,V.PRQ		; skip if we are not processing req
	 JRST	RMGATD			; if this is a request, finish up
	GETYR	([ASCIZ/Do Another?/])
         JRST   RMGATD
	JRST	RMGST2			; ABRV'ST2 is the menu output section

RMGATD:	; done, successful completion
	TRO	FLG,U.OKAY
	POPJ	P,
 

RMGAE2:	; error during cancel gan from lud
	TYPSTR	([ASCIZ/Error during Cancel Gan from the Lud./])
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
        JRST    RMGAE3

RMGAE3: ; after error, see if we can give him  another chance
        TLNE    FLG2,V.PRQ            ; skip if not processing a request
         POPJ   P,
        GETYR   ([ASCIZ/Do you want to continue ?/])
         POPJ   P,
        JRST    RMGST2
 
RMGAE4: ; Error during deleting host for a user in acctg.
	TYPSTR	([ASCIZ/Error during Delete Host for the User in Accounting./])
        TYPSTR  (UNMSPC,L.UNM,1,0)
	MOVE	AC1,ACANS
	PUSHJ	P,LUDAOT
        POPJ    P,
 
; end of code for remove gan
  
GANOU1:
        TYPSTR  ([ASCIZ/Username in desired Gan :/],777,0,T.P0,N)
        TYPSTR  (UNMSPC,L.UNM,0,T.P2,N)
        TYPSTR  ([ASCIZ/        Gan --- /],777,0,0,N)
        TYPNUM  (NMGAN,O,1)
        POPJ    P,
 
GEAGAN: INSTR   ([ASCIZ/Username in desired Gan :/],UNMSPC,L.UNM,T)
        TLNE    FLG2,V.LSQ
         POPJ   P,
        MOVEI   AC,UNMSPC
        MOVEI   AC1,L.UNM
        PUSHJ   P,CNTCHR
        SKIPG   AC1
         JRST   [PUSHJ   P,INORNO
                 JRST    GEAGAN]
        PUSHJ   P,GETCUD
         JRST   GETCMD
        PUSHJ   P,GCREC
         JRST   [PUSHJ   P,INORNO
                 JRST    GEAGAN]
        MOVE    AC,NMDIST
        MOVEM   AC,DISRCT
        MOVE    AC,NMGAN
        MOVEM   AC,GLOBAC
        PUSHJ   P,GETACC
         JRST   GETCMD
        TLNN    FLG,U.CUS       ; skip if we are cus type
         JRST   GEAGAD
        SNDBYT  (ACTPRT,\B.ACOM,LCN2CT,I)
        SNDBYT  (ACTPRT,\B.UUN,NMUUN)
        PUSHJ   P,AGANS
         JRST   [PUSHJ   P,INORNO
                 JRST    GEAGAN]
        GETBYT  (ACTPRT,\B.CID)
         JRST   GETCMD
        MOVEM   AC1,CUSNUM
GEAGAD: TLNN    FLG,U.ASV
         JRST   .+3
        MOVE    AC1,MY.GAN
        MOVEM   AC1,GLOBAC
        PUSHJ   P,CHKGAN
         JRST   GEAGAN
        SNDBYT  (ACTPRT,\B.ACOM,LHOACT,I)  ; get hosts for this user
        SNDBYT  (AC,\B.UUN,NMUUN)
        PUSHJ   P,AGANS
         JRST   [TYPSTR  ([ASCIZ/Error in listing hosts for this user/])
                 JRST    GEAGAN]
        PUSHJ   P,GHSTAC              ; get and save hosts
        TLNN    FLG2,V.EXC
         POPJ   P,
        PUSHJ   P,CKHST1
         JRST   [PUSHJ   P,INORNO
                 JRST    GEAGAN]
        POPJ    P,

CMDRMD: ; remove user's device
	TCR	(1)
	TRO	FLG2,V.NIR

DEFINE RMDV <
	X	(HST1OT,GETH37,RWH37)
	X	(NAMOUP,GETUSR,RWUSR)
	X	(DEVOUT,GETDEV,RWMDI)
	X	(SCMOUT,GETSCM,RWSCM,FLG2,V.NIR) ; if (not immediate) or req
>
	EXMMAC (RMD,RMDV,^D43,USRRQQ)

; code for remove device address starts here, only immediate mode and
; PROCESS command can enter into following codes

	SNDBYT	(OLDPRT,\B.LCOM,RDVLUD,I)	; remove device
	SNDSTR	(AC,L.UNM3,UNMSPC)
	SNDSTR	(AC,B.MDI,MDISK)
	PUSHJ	P,OLDA
	 JRST	RMDVE2
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
; tattle
	GETT	/MOV/
	 JRST	RMDEV4
	TTFSTR	([ASCIZ/Remove Device/])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF
 
RMDEV4:	TLNE	FLG2,V.PRQ		; skip if we are not processing req
	 JRST	RMDEVD			; if this is a request, finish up
	GETYR	([ASCIZ/Do Another?/])
	 JRST	RMDEVD
	JRST	RMDST2			; ABRV'ST2 is the menu output section

RMDEVD:	; done, successful completion
	TRO	FLG,U.OKAY
	POPJ	P,

RMDVE2:	; error during remove device
	TYPSTR	([ASCIZ/Error during Remove Device./])
	MOVE	AC1,OLDANS
	PUSHJ	P,LUDAOT
	JRST	RMDVE3
 
RMDVE3:	; after error, see if we can give him another chance
        MOVE    AC,SIXUNM       
        CAMN    AC,[SIXBIT/VALADM/]   ; skip if not VALADM1 (army corp.)
         JRST   GETNON                ; for army corp. waste rest of input
	TLNE	FLG2,V.PRQ	; skip if not processing a request
	 POPJ	P,		; just return
	GETYR	([ASCIZ/Do you want to continue ?/])
	 POPJ	P,
	JRST	RMDST2

; end of code for remove device address
 
DEVOUT:
	TYPSTR	([ASCIZ/Device Addrs :/],777,0,T.P0,N)
	TYPSTR	(MDISK,B.MDI,0,T.P2)
	POPJ	P,
 
GETDEV:
	INSTR	([ASCIZ/Device Addrs :/],MDISK,B.MDI)
	POPJ	P,

 
; the following code is for special purpose.
 
SPCL1:  ; remove a list of usernames from a specific host.
        INNUM   ([ASCIZ/Host :/],D)
         JRST   GETCMD
        JUMPE   AC1,.-1
        MOVEM   AC1,LUDNUM
        MOVEM   AC1,HOST
        PUSHJ   P,GETOLD
         JRST   GETCMD
        
SLOP1:  PUSHJ   P,GETUNM
         JRST   GETCMD
        PUSHJ   P,GETCUD
         JRST   GETCMD
        PUSHJ   P,GCREC1
         JRST   SLOP1
 
; delete a host for a uun in accounting
 
        SNDBYT  (ACTPRT,\B.ACOM,RUSACT,I)
        SNDBYT  (AC,\B.UUN,NMUUN)     ; send uun
        SNDBYT  (AC,\B.HST,LUDNUM)
        PUSHJ   P,AGANS
         JRST   REM36
 
        ; remove user from pdp10 lud
 
REM36:  SNDBYT  (OLDPRT,\B.LCOM,REMLUD,I)
        SNDSTR  (AC,L.UNM,UNMSPC)
        PUSHJ   P,OLDA
         JRST   CAHSE4
        MOVE    AC1,OLDANS
        PUSHJ   P,LUDAOT
        GETBYT  (OLDPRT,\B.GAN)
         JRST   GETCMD
        GETBYT  (OLDPRT,\B.UUN)
         JRST   GETCMD
        JRST    SLOP1
 
        
 
 
 
CMDMMI: ; this routine move mailnames to a DEC host. Input can be a file;
        ; each line consists of three fields: UNAME, GAN and UUN.  They
        ; are separated by spaces. This file is actually created by X22
        ; command from accounting data base (USERDB).
        ; not we use code 24 in UPDLUD for adding the user into lud 29
        ; with init file (SYS)TYMVAL, also hard code LUXPRV and LUXPR2
        ; so that user will have default core 256k and xexec mode!
        MOVEI   AC,^D29
        MOVEM   AC,LUDNUM
        MOVEM   AC,HOST
        PUSHJ   P,GETOLD
         JRST   GETCMD
        MOVEI   AC1,^D229
        MOVEM   AC1,NMDIST
        MOVEI   AC1,120177
        MOVEM   AC1,LUXPRV
        MOVEI   AC1,^D40
        MOVEM   AC1,LUXQIN
        MOVEM   AC1,LUXQOT
        MOVEI   AC1,377
        MOVEM   AC1,LUXPR2
        SETZ    AC1,
        TRO     AC1,INF.MI            ; turn on init file bit
        MOVEM   AC1,LUXMIS
 
MAILOP:
        PUSHJ   P,GETUNM
         JRST   GETCMD
        PUSHJ   P,GEGANN
        PUSHJ   P,GEGUUN
	SNDBYT	(OLDPRT,\B.LCOM,AMVLUD,I)  ; use add user for move !
	SNDSTR	(AC,L.UNM,UNMSPC)
	SNDBYT	(AC,\B.GAN,NMGAN)
	SNDBYT	(AC,\B.UUN,NMUUN)
	SNDBYT	(AC,\B.DIS,NMDIST)
	SNDBYT	(AC,\B.MIS,LUXMIS)
	SNDSTR	(OLDPRT,L.UNM,INIUSP)    ; send username SYS
	SNDSTR	(OLDPRT,L.INF,INIFSP)    ; send file name TYMVAL
	SNDBYT	(AC,3,LUXPRV)
	SNDBYT	(AC,3,LUXPR2)
	SNDBYT	(AC,\B.QUOT,LUXQIN)
	SNDBYT	(AC,\B.QUOT,LUXQOT)
        PUSHJ   P,OLDA
         JRST   [TYPSTR  ([ASCIZ/Error!!!/])
                 JRST    GETCMD]
	MOVEI	AC,TR.UFD      ; create UFD
	MOVEM	AC,UFDTRY
CREUFD: SOSGE   UFDTRY
	 JRST	MAILOP
	MOVE	AC,[UFDLOG,,UFDLOG+1]
	SETZM	UFDLOG		; zero it out.
	BLT	AC,UFDLOG+UFDLEN-1
	MOVE	AC,[UNMSPC,,UFDLOG]	; move in the username.
	BLT	AC,UFDLOG+2
	MOVEI	AC,UFDLOG
	MOVEI	AC1,UFDLEN*5
	PUSHJ	P,CNTCHR	; get number of chars in username.
	MOVE	AC,UFDBP-1(AC1)	; get correct byte pointer.
	MOVEI	AC1,":"		; deposit the colon.
	IDPB	AC1,AC
	MOVE	AC1,OLDHOS
	MOVEI	AC2,UFDLOG
	PUSHJ	P,BLDCIR	; call circuit building routine.
	 JRST	CREUFD		; try again
	HRLZS	AC		; get ready to output to new port.
	HRRI	AC,.AXO8I
	AUXCAL	AC,.CR
	AUXCAL	AC,.CR
	HRRI	AC,.AXOST
	AUXCAL	AC,UFDST
	MOVEI	AC1,1
	SLEEP	AC1,		; give it a chance to take.
	HLRZS	AC
	ZAPCIR	AC,		; and zap the circuit.
        JRST    MAILOP
 
GEGTMZ: ; get timezone (a number) and set daylight saving bit
        INNUM   ([ASCIZ/TMZ :/],D)
         JRST   GETCMD
        TRO     AC1,TZMASK
        MOVEM   AC1,UATZ
        POPJ    P,
CMUS94:    JFCL
 
CMRU94:  
           JFCL
 wd+sr