SUBTTL STARTUP - initializing section
STPT:   TDZA    AC,AC           ; zero ac and skip if we start here
         SETO   AC,             ; set ac to -1 if we start here
        RESET
        MOVE    P,PDLP          ; get stack pointer
        SETZB   FLG,FLG2        ; reset all flags
        TLO     FLG,U.UPD       ; and set up to allow updates
        SKIPE   AC              ; skip if we started at STPT
         TLO    FLG2,V.OFS      ; set offset flag
        HRROI   AC,.GTLOG       ; set to get port info word
        GETTAB  AC,
         SETZ   AC,
  ;     TLNN    AC,(LG.TID)     ; skip if this is not an aux circuit
  ;      BOMB   (ERR.NX)
	SETO	AC,
	GETLCH	AC		; get our line characteristics word
	TLNE	AC,(LC.HDX)	; skip if not half duplex
	 TLO	FLG2,V.HDX	; set our hdx flag
	TLNE	FLG2,V.HDX
	 JRST	STPT2
        MOVEI   AC,1            ; set up to enter deferred echo mode
        MOVEM   AC,OLDDEF
        HRROI   AC,.AXEDE       ; prepare for def echo mode auxcal
        AUXCAL  AC,OLDDEF       ; do it.
STPT2:	MOVE    AC,[.CNSYS,,.GTCNF]
        GETTAB  AC,             ; get this system number
         SETZ   AC,
IFNDEF TEST, <
        CAIE    AC,RUNHOS       ; skip if it's the right system
         BOMB   (ERR.HO)
>
        HRROI   AC,.GTPRV       ; ready to get frame priv word
        GETTAB  AC,
         SETZ   AC,
	LDB	AC1,[POINT 6,AC,7] ; time zone
	MOVEM	AC1,MY.TZ	; save time zone
        TRNE    AC,JP.TYM       ; skip if not tymshare
         TLO    FLG,U.TYM       ; set tymshare flag
        TRNE    AC,JP.ASV       ; skip if not acct sup
         TLO    FLG,U.ASV       ; set acct sup bit in flg
        LDB     AC,[POINT 2,AC,28] ; isolate monitor mode bits
        MOVEI   AC1,ESC         ; move esc char code to ac1
        CAIN    AC,.JPMPD       ; skip if we're not in pdp mode
         MOVEI  AC1,CTRLC       ; move control c char code to ac1
        CAIN    AC,.JPMSU       ; skip if we're not in suds mode
         MOVEI  AC1,CTRLC
        MOVEM   AC1,ESCCHR      ; set escape character
        HRROI   AC,.GTLIC       ; set to get license word
        GETTAB  AC,
         SETZ   AC,
        MOVEM   AC,SAVLIC       ; save for later
        TRNE    AC,(LC.WC)      ; skip if no wc frame license
         TLO    FLG,U.WC        ; set write core flag
        TLNN    AC,(LC.AC)      ; skip if ac process license ok
         BOMB   (ERR.AC)        ; fatal - tell him so and exit
        TLNN    AC,(LC.WF)      ; skip if wf process license ok
         BOMB   (ERR.WF)
NOLPS:  ; status name and password checking should terminate here
        PUSHJ   P,GETPJ         ; check (pj)jobs.dat
         BOMB   (ERR.PJ)
	PUSHJ	P,PASGRD
        DATE    AC,             ; get dec format date
        IDIVI   AC,^D372        ; isolate year
        ADDI    AC,^D64         ; correct
        IDIVI   AC,^D10         ; separate digits
        IMULI   AC,^D10         ; form the decade portion
        MOVEM   AC,DECADE       ; int (year/10) * 10
        MOVEM   AC1,LYDIG       ; year mod 10
        SETZB   LPOST,LPOSF     ; initialize position counters
        SETZ    IF.P,           ; initialize input file index
  IFDEF DEBUG, <
        MOVE    AC,[.CHOPN,,TOUCHN]     ; set to start a tout file
        CHANIO  AC,TOUBLK               ; open the channel
         BOMB   (ERR.FI)
        MOVE    AC,[.CHENT,,TOUCHN]     ; set to do enter
        CHANIO  AC,TOULK
         BOMB   (ERR.FI)
        TLO     FLG,U.TOUT              ; set tout flag >
        HRLI    AC,.CHOPN               ; set to open terminal input
        HRR     AC,INCHN(IF.P)          ; get the channel number
        CHANIO  AC,INDBL1               ; open it
         BOMB   (ERR.FI)
; now get (db.dir)usrval.com and execute it (msgs and possible shut)
; if this is debug version, don't do it unless we started with offset.
 IFDEF DEBUG, <
        TLNN    FLG2,V.OFS              ; skip if started with offset
         JRST   NOCOM >
        AOJ     IF.P,                   ; increment channel index
        HRR     AC,INCHN(IF.P)          ; get channel number
        HRLI    AC,.CHOPN               ; open channel
        CHANIO  AC,INDBL2
         BOMB   (ERR.FI)
        HRLI    AC,.CHLK                ; look it up
        CHANIO  AC,INLK2
         JRST   [SOJ   IF.P,
                 JRST   NOCOM]
        TLO     FLG,U.IND		; set indirect flag
	TLO	FLG2,V.INI		; set init file flag
NOCOM:
  ;     TCR     (5)
  ;     TYPSTR  ([ASCIZ /User Validation System - ver/],777,0,0,N)
  ;     TYPNUM  ([REL],D,1,0,N)
  ;     TYPSTR  ([ASCIZ /./],1,0,0,N)
  ;     TYPNUM  ([VER],D)
 IFDEF DEBUG, <
  ;     TYPSTR ([ASCIZ /* Debug Version. */],777,7) >
 IFDEF TEST, <
  ;     TYPSTR  ([ASCIZ /* Test Version.  */],777,7) >
  ;     TCR     (2)
        HRROI   AC,.GTSTS       ; set to get frame status word
        GETTAB  AC,             ; get it
         SETZ   AC,
        TRO     AC,JB.JA2       ; set jacc2 bit
;IFNDEF DEBUG, <
;XSJL1:  SETJAL  AC,  >          ;  in frame status word
         JFCL
	HRLI	AC4,IA.REE
	HRRI	AC4,TRPVE1
	INTADR	AC4,
	 HALT
	HRLZI	AC4,.IAESC
	LSH	AC4,^D9
	TLO	AC4,2
	HLLOS	AC4
	TINASS	AC4,
	 HALT
	HRLZI	AC4,(1B0!1B2)
	INTENB	AC4,
	 HALT
        TLNN    FLG,U.CUS       ; skip if customer user
         JRST   STNOCU          ; no.. continue
        PUSHJ   P,GETACC        ; get accounting circuit
         BOMB   (ERR.CI)
        SNDBYT  (ACTPRT,\B.ACOM,LCN2CT,I)
        SNDBYT  (AC,\B.UUN,MY.UUN)
        GETBYT
         BOMB   (ERR.CI)
        CAIE    AC1,ACT.OK
         BOMB   (ERR.CI)
        GETBYT  (AC,\B.CID)
         BOMB   (ERR.CI)
        MOVEM   AC1,MY.CID
  IFDEF DEBUG, <
        TYPSTR  ([ASCIZ/Your cid is :/],777,0,0,N)
        TYPNUM  (MY.CID,D,1)  >
STNOCU:                                 ; here if not a customer user
        TCR     (1)
        TLO     FLG,U.EOL
	GETT	(/RUN/)
	 JRST	STNOC2
	PUSHJ	P,STDHDR
	PUSHJ	P,RELTTF
 
 
STNOC2:	 ; get handshake
        TLO     FLG,U.PRV
        TLO     FLG,U.IMM
        PUSHJ   P,X1234         ; get 1,2,3,4
         JFCL                   ; never comes to here
        TYPSTR  ([ASCIZ/@/],777,0,0,Y)     ; type at sign
        PUSHJ   P,Y1234         ; send 1,2,3,4
        
        PUSHJ   P,GETCUD        ; build circuit to the cud
         JRST   [MOVEI   AC,2
                 JRST    TYPER0]
        MOVEI   AC,1
        TYPNUM  (AC,D)          ; type 1 means ok
 
GETSIG: INNUM   (NONE,D)        ; get signal 1, 2, 3 or others
         JRST   GETSIG
        CAIN    AC1,1
         JRST   CHGOWN          ;  1 means change own psw
        CAIN    AC1,2           ;  2 means account sup changes others psw
         JRST   ASPCHG
        CAIN    AC1,3           ;  3 is the continuation of case 2
         JRST   CHGOTH
        JRST    X1234C          ;  other codes default to quit
 
 
CHGOWN: INSTR   (NONE,UNMSPC,L.UNM,T)        ; get username
 
        ; get ciphers for both old and new passwords
 
        PUSHJ   P,GOLPSW              ; get old psw and its cipher
        PUSHJ   P,INPPSW              ; get new psw
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
                 MOVEI   AC,4
                 JRST    TYPER1]
        MOVEM   AC1,NMPSW             ; save new psw cipher
        PUSHJ   P,CHK1                ; verify old password
 
CHG1:   SNDBYT  (CUDPRT,\B.CCOM,CPSMUD,I)  ; change psw
        PUSHJ   P,SNMCUD              ; send username
        SNDBYT  (CUDPRT,\B.CYP,NMPSW) ; send new password cipher
        PUSHJ   P,SND40               ; send terminator
        PUSHJ   P,NGANS
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
                 MOVEI   AC,6
                 JRST    TYPER2]
        PUSHJ   P,GET40               ; get terminator
  ;     TYPSTR  (@NPWSPC,L.PSW)       ; send new password back
        TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
        MOVEI   AC,1
        TYPNUM  (AC,D)
        JRST    GETSIG                ; get another change

ASPCHG:
        INSTR   (NONE,UNMSPC,L.UNM,T)        ; get acct. sup. name
        PUSHJ   P,GOLPSW              ; get old psw
        PUSHJ   P,CHK1                ; verify old psw
        PUSHJ   P,GCRECB                     ; get cud record
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)    ; username not found
                 MOVEI   AC,7
                 JRST    TYPER2]
        MOVE    AC,NMGAN
        MOVEM   AC,MY.GAN                    ; save acct. sup. gan
        MOVE    AC1,NMCPAR            ; load lic word
        TLNN    AC1,AS.CD             ; acct. sup?
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)
                 MOVEI   AC,^D9
                 TYPNUM  (AC,D)
                 JRST    GETSIG]
        
CHGOTH: INSTR   (NONE,UNMSPC,L.UNM,T)        ; get username
        PUSHJ   P,INPPSW                     ; get psw cipher
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
                 MOVEI   AC,4
                 JRST    TYPER1]
        MOVEM   AC1,NMPSW                    ; save new psw cipher
        PUSHJ   P,GCRECB                     ; get cud record
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)   ; username not found
                 MOVEI   AC,7
                 JRST    TYPER2]
        MOVE    AC,NMGAN
        CAME    AC,MY.GAN                    ; make sure in the same gan
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)
                 MOVEI   AC,^D8
                 TYPNUM  (AC,D)
                 JRST    GETSIG]
        JRST    CHG1                         ; go to change psw routine
 
GOLPSW: PUSHJ   P,INPPSW
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
                 MOVEI   AC,3
                 JRST    TYPER1]
        MOVEM   AC1,OMPSW             ; save old psw cipher
        POPJ    P,
 
 
        ; send old password cipher for verification
CHK1:   SNDBYT  (CUDPRT,\B.CCOM,CKPMUD,I)
        PUSHJ   P,SNMCUD              ; send name
        SNDBYT  (CUDPRT,\B.CYP,OMPSW) ; send old psw cipher
        PUSHJ   P,SND40
        PUSHJ   P,NGANS
         JRST   [TYPSTR  ([ASCIZ/a/],777,0,0,Y)      ; type lower case a
                 MOVEI   AC,5
                 JRST    TYPER2]
        PUSHJ   P,GET40
        POPJ    P,
 
X1234:  ; get handshake
        SETZ    AC4,
        SETTIM  AC4,            ; reset timer
         JFCL
        HRLI    AC4,IA.REE      ; for intadr
        HRRI    AC4,TRPVE1
        INTADR  AC4,            ; get ready to set timer interrupt
         POPJ   P,
        MOVE    AC4,[T.SEC,,T.SM1]      ; units and number
        SETTIM  AC4,            ; set the timer
         JFCL
        HRLI    AC4,.IATIM      ; set to enable timer interrupt
        HRRI    AC4,TIM.CH
        INTASS  AC4,            ; set it
         HALT
        MOVEM   P,SAVP0         ; save the current contents of stack pointer
        HRLZI   AC4,(1B0!1B1!1B2)
        INTENB  AC4,            ; enable channel 1
         HALT
        TRO     FLG,U.TMR       ; set timer interrupt flag
X1234B:
        INNUM   (NONE,D)        ; get a char in ac1
         JRST   X1234D
        CAIE    AC1,1           ; skip if 1
         JRST   X1234B
        INNUM   (NONE,D)        ; get a char
         JRST   X1234D
        CAIE    AC1,2
         JRST   X1234B
        INNUM   (NONE,D)
         JRST   X1234D
        CAIE    AC1,3
         JRST   X1234B
        INNUM   (NONE,D)
         JRST   X1234D
        CAIE    AC1,4
         JRST   X1234B
        AOS     0(P)
X1234D: HRLZI   AC4,IA.CLR      ; set to disable intadr
        INTADR  AC4,
         HALT
        TRZ     FLG,U.TMR       ; reset flag
        SETZ    AC4,
        SETTIM  AC4,
         JFCL
	HRLI	AC4,IA.REE
	HRRI	AC4,TRPVE1
	INTADR	AC4,
	 HALT
	HRLZI	AC4,(1B0!1B2)		; re-enable channel 2 (escape)
	INTENB	AC4,
	 JFCL
        POPJ    P,

X1234C: ; logoff if timeout
        HRLZI   AC,1
        LOGOFF  AC,

Y1234:  ; respond handshake
        MOVEI   AC1,1           ; starting char
        TYPNUM  (AC1,D)
        MOVEI   AC1,2           
        TYPNUM  (AC1,D)
        MOVEI   AC1,3
        TYPNUM  (AC1,D)
        MOVEI   AC1,4
        TYPNUM  (AC1,D)
        POPJ    P,
 
GCRECB: ; get cud record
        SETZM   NMSTRT                ; clear cud area
        MOVE    AC,[NMSTRT,,NMSTRT+1]
        BLT     AC,NMEND-1            ; do it
        SNDBYT  (CUDPRT,\B.CCOM,LUSMUD,I)
        PUSHJ   P,SNMCUD
        PUSHJ   P,SND40
        PUSHJ   P,NGANS
         POPJ   P,
        GETBYT  (CUDPRT)
         JRST   GETCMD
        GETBYT  (AC,\B.GAN)
         JRST   GETCMD
        MOVEM   AC1,NMGAN
        GETBYT  (AC)
         JRST   GETCMD
        GETBYT  (AC,\B.UUN)
         JRST   GETCMD
        GETBYT  (AC,\B.CPR)
         JRST   GETCMD
        LSH     AC1,^D8
        MOVEM   AC1,NMCPAR
        GETBYT  (AC,\B.CLN)
         JRST   GETCMD
        GETBYT  (AC,\B.CDST)
         JRST   GETCMD
        GETBYT  (AC,\B.IRC)
         JRST   GETCMD
        PUSHJ   P,GCCLS
        GETBYT  (AC,\B.PDT)
         JRST   GETCMD
        PUSHJ   P,GET40
        AOS     0(P)
        POPJ    P,
 
TYPER0: ; cud circuit error
        TYPNUM  (AC,D)
        JRST    CMDQUI          ; exit
 
TYPER1: ; get psw cipher error
        CAIN    AC,3
         JRST   TYER12
        TYPNUM  (AC,D)
        JRST    GETSIG          ; return and wait
TYER12: ; if error in getting old psw, we still have to eat up new psw to
        ; clear the circuit!
        INSTR   (NONE,NNMSPC,L.PO,T)
        MOVEI   AC,3
        TYPNUM  (AC,D)
        JRST    GETSIG
 
TYPER2: ; error in the cud
        TYPNUM  (AC,D)
        PUSHJ   P,GET40
        JRST    GETSIG          ; return and wait
CMDQUI: ; exit the program
 IFDEF DEBUG, < 
        HRRZ    AC,.JBDDT       ; starting address of ddt (if loaded)
        JUMPE   AC,CMDQU2       ; jump to cmdqu2 if no ddt
        MOVEM   AC,NUM          ; save it
        TYPSTR  ([ASCIZ /DDT/])
        JRST    @NUM            ; transfer to ddt
 >
CMDQU2: ; here if no ddt
        SETO    AC,             ; set to zap all circuits (if any)
        ZAPCIR  AC,             ; do it
        HRROI   AC,.AXEDE       ; set to restore original echo mode
	TLNN	FLG2,V.HDX	; skip if not full duplex
        AUXCAL  AC,OLDDEF
        EXIT                    ; and exit
GETCMD:
        JFCL
 
CMDCOM:
        JFCL
    