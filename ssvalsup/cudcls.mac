SUBTTL CUDCLS - do cud routines

SNMCUD: ; send username to cud
; uname must be in unmspc, with trailing blanks
        MOVEI   AC,UNMSPC       ; get address
        MOVEI   AC1,L.UNM       ; max size
        PUSHJ   P,CNTCHR        ; find actual size
        MOVEM   AC1,UNMCT       ; put in unmct for now
	MOVEM	AC1,UNMCT3	; for later
        IDIVI   AC1,4           ; find size mod 4
        JUMPE   AC2,SNMCU1      ; no remainder
        EXCH    AC2,UNMCT       ; so that difference will be positive
        SUBM    AC2,UNMCT       ; unmct has the nth char to set high bit on
        AOS     UNMCT           ; at least it does now.
        MOVE    AC1,AC2         ; total size of username in ac1
        IDIVI   AC1,4           ; find size mod 4 again
        MOVEI   AC1,4           ; set to find 4 - (size mod 4)
        SUB     AC1,AC2         ;  do it
        MOVEM   AC1,UNMCT2      ; unmct2 has the number of nulls to send
        JRST    SNMCU2          ; continue
SNMCU1: ; here when size mod 4 is zero
        SETZM   UNMCT2          ; send no nulls
        MOVE    AC2,UNMCT       ; get size of username
        SUBI    AC2,3           ; adjust
        MOVEM   AC2,UNMCT
SNMCU2: MOVE    AC,[POINT 7,UNMSPC]     ; get byte pointer
        MOVEM   AC,UNMBP
SNMC2B: ILDB    AC2,UNMBP       ; get a char
	SOSGE	UNMCT3		; see if any chars left
         JRST   SNMCU4          ; done with username
        SOSN    UNMCT           ; skip if this is not the char to set high bit
         JRST   [TRO AC2,200    ; set it
                 JRST   SNMCU3]
SNMCU3: ; here after setting high bit on char 
        SNDBYT  (CUDPRT)        ; send the char
        JRST    SNMC2B          ; do next char
SNMCU4: ; here when all of username sent, now do blanks
        SOSGE   UNMCT2          ; see if more trailing nulls needed
         JRST   SNMCU5          ;  no.. continue
        SNDBYT  (CUDPRT,1,0,I)  ; send a null
        JRST    SNMCU4          ; do the rest
SNMCU5:
        POPJ    P,              ; return

NNMCUD: ; send new username to cud
; uname must be in nnmspc, with trailing blanks
        MOVEI   AC,NNMSPC       ; get address
        MOVEI   AC1,L.UNM       ; max size
        PUSHJ   P,CNTCHR        ; find actual size
        MOVEM   AC1,UNMCT       ; put in unmct for now
	MOVEM	AC1,UNMCT3	; for later
        IDIVI   AC1,4           ; find size mod 4
        JUMPE   AC2,NNMCU1      ; no remainder
        EXCH    AC2,UNMCT       ; so that difference will be positive
        SUBM    AC2,UNMCT       ; unmct has the nth char to set high bit on
        AOS     UNMCT           ; at least it does now.
        MOVE    AC1,AC2         ; total size of username in ac1
        IDIVI   AC1,4           ; find size mod 4 again
        MOVEI   AC1,4           ; set to find 4 - (size mod 4)
        SUB     AC1,AC2         ;  do it
        MOVEM   AC1,UNMCT2      ; unmct2 has the number of nulls to send
        JRST    NNMCU2          ; continue
NNMCU1: ; here when size mod 4 is zero
        SETZM   UNMCT2          ; send no nulls
        MOVE    AC2,UNMCT       ; get size of username
        SUBI    AC2,3           ; adjust
        MOVEM   AC2,UNMCT
NNMCU2: MOVE    AC,[POINT 7,NNMSPC]     ; get byte pointer
        MOVEM   AC,UNMBP
NNMC2B: ILDB    AC2,UNMBP       ; get a char
	SOSGE	UNMCT3		; see if any chars left
         JRST   NNMCU4          ; done with username
        SOSN    UNMCT           ; skip if this is not the char to set high bit
         JRST   [TRO AC2,200    ; set it
                 JRST   NNMCU3]
NNMCU3: ; here after setting high bit on char 
        SNDBYT  (CUDPRT)        ; send the char
        JRST    NNMC2B          ; do next char
NNMCU4: ; here when all of username sent, now do blanks
        SOSGE   UNMCT2          ; see if more trailing nulls needed
         JRST   NNMCU5          ;  no.. continue
        SNDBYT  (CUDPRT,1,0,I)  ; send a null
        JRST    NNMCU4          ; do the rest
NNMCU5:
        POPJ    P,              ; return

GETPSW: ; get password cipher
; Password is always input from the terminal, regardless of any active
; com file, the prompts and messages are always output to the terminal
; regardless of the noterm flag.  Each character is input and passed on to
; the cud slave, the password is never present as a string in our
; address space.
; If we are reading this from a request file, then the password cipher,
; not the password itself, is input from file via innum.
	TRNE	FLG,U.RFI	; skip if input is from req file.
	 JRST	GETPSF		; input it from the file
        MOVEI   AC,IO.NEC
        SETMOD  AC,     ; disable echo
        TYPSTR  ([ASCIZ/Password :/],777,0,0,N,Y)
 	PUSHJ	P,PWMSK		; if this is a half duplex term, mask for psd.
        PUSHJ   P,INPPSW        ; get password cipher
         JRST   GETPSW
	TLNE	FLG,U.PRV	; skip if not privileged
	 PUSHJ	P,NULPW		; check if he wants a null password
GETPS2:
        MOVE    AC,NUM          ; inppsw puts length in num
        CAIGE   AC,PW.MIN       ; skip if we have minimum count
         JRST   GETPE1
        JUMPE   AC1,GETPE3      ; disallow zero cipher
        MOVEM   AC1,NMPSW       ; save cipher
; get cipher all over again, make sure it's the same as last
        TYPSTR  ([ASCIZ/Type again :/],777,0,0,N,Y)
	PUSHJ	P,PWMSK
        PUSHJ   P,INPPSW
         JRST   GETPSW
        CAME    AC1,NMPSW       ; skip if match
         JRST   GETPE2          ; no match
        SETZ    AC,
        SETMOD  AC,             ; re-enable echo
        AOS     0(P)
        POPJ    P,

NULPW:	;check if he wants null password
	SKIPE	NUM
	 POPJ	P,
	POP	P,AC		; waste one stack value
	SETZ	AC,
	SETMOD	AC,		; return echo
	GETYR	([ASCIZ/Do you want a null password ?/])
	 JRST	GETPSW
	MOVEI	AC,7400		; null pw cipher
	MOVEM	AC,NMPSW
	AOS	0(P)
	POPJ	P,

GETPSF:	; get password cipher from request file. Set non-alpha seen flag
   ;    INNUM   ([ASCIZ/password Cipher :/],D)
        INSTR   ([ASCIZ/Password Cipher :/],CNVHLD,^D11,T)
        MOVEI   AC,CNVHLD
        PUSHJ   P,CNVD0
	 SKIPA
	  AOS	0(P)
	MOVEM	AC1,NMPSW
	TLO	FLG2,V.NPS	; set non-apha char seen flag
	POPJ	P,

; here if we do not have enough chars in password
GETPE1: TYPSTR  ([ASCIZ/Must be at least/],777,0,0,N,Y)
        MOVEI   AC,PW.MIN       ; ready to type out number
        MOVEM   AC,NUM
        TYPNUM  (NUM,D,1,0,N,Y)
; now type out the rest
        TYPSTR  ([ASCIZ/chars long./],777,1,0,Y,Y)
        JRST    GETPSW
; here when the two ciphers don't match
GETPE2: TYPSTR  ([ASCIZ/Mismatch- try again./],777,0,0,Y,Y)
        JRST    GETPSW
; here when cipher is zero
GETPE3: TYPSTR  ([ASCIZ/Illegal password- try again./],777,0,0,Y,Y)
        JRST    GETPSW
COMMENT `
GETPE4:	; here when passwd does not contain embedded non-alpha chars.
IFDEF DEBUG, <
	MOVEM	AC1,NMPSW >	; save it
	TYPSTR	(PE4,777,0,0,Y,Y)
IFDEF DEBUG, <
	MOVE	AC1,NMPSW
	POPJ	P,	> 	; just return
IFNDEF DEBUG, <
	POP	P,AC
	JRST	GETPSW	> 	; input again.
`
PE4:	ASCIZ	`Password must contain one or more embedded non-alpha
characters (digits and/or spaces).`

INPPSW: ;  input a password from terminal and get cipher in ac1
	TLZ	FLG2,V.NPS!V.NPJ; unset non-alpha seen and non-alpha just seen
	TLO	FLG2,V.NPF	; set first char bit
        SNDBYT  (CUDPRT,\B.CCOM,LPCMUD,I) ; send command
        SETZM   NUM             ; zero out the count
INPPS1: INCHWL  AC2             ; input a char from cmd port
        CAIN    AC2,.CR         ; skip if not a carriage return
         JRST   INPPS2          ; done
        CAIL    AC2,LCA         ; skip if not lower case
         SUBI   AC2,BLNK        ; case map
        CAIGE   AC2,BLNK        ; skip if not a control char (allow space)
         JRST   INPPS1          ; ignore control characters
	TLZE	FLG2,V.NPF	; skip if not first char.
	 JRST	INPPSB
	TLZE	FLG2,V.NPJ	; skip if just-seen flag is off.
	 TLO	FLG2,V.NPS	; set non-alpha seen flag.
	CAIL	AC2,"A"		; skip if not alpha char.
	 JRST	INPPSB
	TLO	FLG2,V.NPJ	; set non-alpha just seen flag.
INPPSB:	SUBI    AC2,40          ; change to 940 ascii.
        SNDBYT  (CUDPRT)        ; send it
        AOS     NUM             ; increment count
        JRST    INPPS1          ; do another
INPPS2: SNDBYT  (CUDPRT,1,.CRCUD,I)     ; send 940 cr
        PUSHJ   P,SND40         ; send terminator
        PUSHJ   P,NGANS         ;get answer
         POPJ   P,              ; non-skip return
        GETBYT  (CUDPRT,\B.CYP) ; get the cipher
         JRST   GETCMD
        MOVEM   AC1,NUM1        ; save it
        PUSHJ   P,GET40         ; get terminator
        INCHRW  AC              ; waste the line feed
        TYPSTR  ([0],1,0,0,Y,Y)  ; like TCR(1) but with fortty on
        MOVE    AC1,NUM1        ; restore cipher to ac1
        AOS     0(P)
        POPJ    P,              ; skip return

PWMSK:	; make mask for half duples terminals.
; this assumes that a half duplex terminal will be a hardcopy device,
; not a crt.  The results if this is a crt is that the original prompt
; will be replaced by spaces.
	TLNN	FLG2,V.HDX	; skip if we are half duplex
	 POPJ	P,		;  or just return.
	MOVEM	LPOST,NUM	; save our last position on the tty line.
; 				  type out garbage chars for masking.
	TYPSTR	([ASCIZ/@#$@#$@#$@#$@#$@#$@#$@#$/],777,0,0,N,Y)
	MOVEI	AC,.CR		; type a carriage return, no line feed.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM		; retrieve last known line position.
	PUSHJ	P,SPACES	; type enough spaces to get to last position.
;				  type more garbage chars
	TYPSTR	([ASCIZ/#*##*##*##*##*##*##*##*#/],777,0,0,N,Y)
	MOVEI	AC,.CR		; type another cr, no line feed.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM
	PUSHJ	P,SPACES	; find last position again.
	TYPSTR	([ASCIZ/OOOOOOOOOOOOOOOOOOOOOOOO/],777,0,0,N,Y)
	MOVEI	AC,.CR		; one more time.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM
	PUSHJ	P,SPACES	; and we're all done.
	POPJ	P,

CYPNAM: ; get password cipher for string in @NUM2
; it is illegal to try to have a password same as the username
        MOVEI   AC,@NUM2
        MOVEI   AC1,L.UNM
        PUSHJ   P,CNTCHR
        CAIGE   AC1,PW.MIN      ; skip if name length >= pw length min
         JRST   [SETZ   AC1,
                 POPJ   P,]
        MOVEM   AC1,SAC         ; save length
        SNDBYT  (CUDPRT,\B.CCOM,LPCMUD,I)
        MOVE    AC1,SAC
        MOVEI   AC2,@NUM2
        PUSHJ   P,AUXSOT        ; send it
        SNDBYT  (CUDPRT,1,.CRCUD,I)     ; send cr
        PUSHJ   P,SND40         ; send terminator
        PUSHJ   P,NGANS         ; get answer
         JFCL
        GETBYT  (CUDPRT,\B.CYP) ; get cipher
         JRST   GETCMD
        MOVEM   AC1,NUM1

        PUSHJ   P,GET40         ; get terminator
        MOVE    AC1,NUM1        ; restore cipher to ac1
        POPJ    P,              ; return


SND40:  ; send a code 40
        SNDBYT  (CUDPRT,1,CUD.TR,I)
        POPJ    P,

NGANS:  GETBYT  (CUDPRT)        ; get a byte
         JRST   GETCMD
        MOVEM   AC1,NMANS       ; save it
        CAIN    AC1,CUD.OK
         AOS    0(P)
        POPJ    P,

GET40:
        GETBYT  (CUDPRT)        ; get code 40
         JFCL
        JUMPE   AC1,GET40
        CAIN    AC1,CUD.TR      ; skip if not 40
         POPJ   P,
GET402:	CAIN	AC1,255		; probably an inst trap on 940, output msg.
	 JRST	GET40D
	CAIGE	AC1,200
	 ADDI	AC1,40
	MOVE	AC,AC1
	PUSHJ	P,CHROUT
	GETBYT	(CUDPRT)
	 JRST	GET40D
	JRST	GET402
GET40D:	TCR
	TYPSTR	([ASCIZ/Contact Software Support immediately/],777,0,0,Y,Y)
	BOMB

BADCUD: PUSHJ   P,NANOUT
        PUSHJ   P,GET40
        JRST    GETCMD

ERRCUD: PUSHJ   P,NANOUT
        PUSHJ   P,GET40
        POPJ    P,

NANOUT: ; output cud answer message
        MOVE    AC1,NMANS               ; index into nanmsg
        CAILE   AC1,NANLEN              ; don't overflow
         SETZ   AC1,
        TYPSTR  (@NANMSG(AC1))
        POPJ    P,

NANMSG: [ASCIZ /Undefined Error./]
        [ASCIZ /Entry complete./]               ; 1
        [ASCIZ /Username not found in Cud./]           ; 2
        [ASCIZ /Username already used./]       ; 3
        [ASCIZ /File busy./]                    ; 4
        [ASCIZ /Out of sync./]                  ; 5
        [ASCIZ /Illegal command./]              ; 6
        [ASCIZ /Trouble with change file./]     ; 7
        [ASCIZ /Trouble with industry description file./] ; 8 (10)
        [ASCIZ /Trouble with industry base file./] ; 9 (11)
        [ASCIZ /File Busy./]                    ; 10 (12)
        [ASCIZ /Cannot delete last class for a username./] ; 11 (13)
        [ASCIZ /Too many classes for this username./]  ; 12 (14)
        [ASCIZ /Class not found./]              ; 13 (15)
        [ASCIZ /Class has no home/]             ; 14 (16)
        [ASCIZ /Bad password entered/]          ; 15 (17)
	[ASCIZ /Cud block full - username not allowed/] ; 16 (20)
        [ASCIZ /Operation error/]             ; 17 (21)
        [ASCIZ /Password does not match/]     ; 18 (22)
        [ASCIZ /No uun available/]            ; 19 (23)
NANLEN==.-NANMSG
    