SUBTTL CHGCOM - change commands
DEFINE CHG1 <
        X USER,1,CMDCUS,-1,-1     ; change user
	X MDISK,1,CMDCMI,-1,-1	; change mdisk
>
        SUBCOM  ([ASCIZ/Change :/],CHG,CHG1)
        POPJ    P,
DEFINE CUS1 <
        X PASSW,1,CMDCUP,-1,-1            ; change user password
        X HOME,1,CMDCUH,-1,-1           ; change user home
	X CLASS,1,CMDCUC,U.NET!U.PRV,-1 ; change user class
>

        SUBCOM  ([ASCIZ/Change User :/],CUS,CUS1)
DEFINE CMI1 <
	X CYLIN,1,CMDCMC,-1,-1	; change mdisk cylinders
>

	SUBCOM	([ASCIZ /Change Mdisk :/],CMI,CMI1)
CMDCUP: ; change user password
        TCR     (1)
        PUSHJ   P,WASLIN        ; no args allowed
        PUSHJ   P,GETCUD        ; get a cud circuit
         JRST   GETCMD
        PUSHJ   P,GETPSW        ; input password from term
         JRST   GETCMD
CMCUP1: TCR     (1)
        PUSHJ   P,GETUNM        ; get a username
         JRST   CMCUPD
; if we are not privileged, then we need to get cud record for access control.
; if no non-alpha was seen in the last password, need cud rec for exception
; checking.
	TLNN	FLG,U.PRV	; skip if privileged
	 JRST	CMCUP2		; go input cud record
	TLNE	FLG2,V.NPS	; skip if non-alpha not seen
	 JRST	CCUP2B		; skip over getting cud rec
CMCUP2:
        PUSHJ   P,GCREC         ; get cud record for uun check
         JRST   CMCUP1
CCUP2B:
        PUSHJ   P,CHKUUN        ; see if he's got access rights
         JRST   CMCUP1          ; no, do another
	PUSHJ   P,CYPNAM        ; cipher the username
        CAMN    AC1,NMPSW       ; cipher same as password cipher?
         JRST   CCUPE1          ; yes, not allowed.
	MOVE	AC,NMGAN	; get gan
	TLNE	FLG2,V.NPS	; skip if last password had no non-alphas
	 JRST	CMCUP3
	PUSHJ	P,PASGEX	; see if exempt from non-alpha stds
	 JRST	CCUPE2		; no, tell him he needs non-alphas
CMCUP3:
; now do the change user password
        SNDBYT  (CUDPRT,\B.CCOM,CPSMUD,I)
        PUSHJ   P,SNMCUD        ; send the username
        SNDBYT  (CUDPRT,\B.CYP,NMPSW) ; send password cipher
        PUSHJ   P,SND40         ; send terminator
        PUSHJ   P,NGANS         ; get answer
         JFCL
        PUSHJ   P,NANOUT        ; output answer
        PUSHJ   P,GET40         ; get terminator
	GETT	(/CUN/)		; get the tattle tale file
	 JRST	CMCUP1		; proceed without tattle feature
; output tattle tale info
	TTFSTR	([ASCIZ/Change User Password/])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF	; release tt file
        JRST    CMCUP1          ; do another name

CMCUPD: ; done changing passwords
        TRO     FLG,U.OKAY      ; set ok flag
        POPJ    P,              ; return

CCUPE1: ; error password and username ciphers are equal
        TYPSTR  (UNMSPC,L.UNM,0,0,N)
        TYPSTR  ([ASCIZ/- Bad Password- not changed./])
        JRST    CMCUP1  ; get another name

CCUPE2:	; needs non-alphas
	TYPSTR	(UNMSPC,L.UNM,0,0,N)
	TYPSTR	(PE4,777,1)
	JRST	CMCUP1	; get another name
CMDCUH: ; change user home (for class 2 group 1 users only)
        TCR     (1)
        PUSHJ   P,GETCUD        ; get cud circuit
         JRST   GETCMD
        PUSHJ   P,GETACC        ; get acct circuit
         JRST   GETCMD
        PUSHJ   P,GETHOH        ; get home host number, must be tymshare
CMCUH1: TCR     (1)
        PUSHJ   P,GETUNM        ; get a username
         JRST   CMCUHD          ; done
        PUSHJ   P,GCREC         ; get cud record
         JRST   CMCUH1
        PUSHJ   P,CHKUUN        ; check access
         JRST   CMCUH1
        MOVE    AC,NMCLSS+1     ; get class number
        CAIE    AC,D.CLS        ; skip if standard
         JRST   CMCUHE          ; no go
        MOVE    AC,NMCLSS+2     ; get first word (group)
        CAIE    AC,GRP.CD!D.GRP ; skip if group 1
         JRST   CMCUHE          ; also no go
; if we get to here, then 1st position is class 2 group 1
        MOVEI   AC1,NMCLSS+3    ; address of 1st host record
        MOVEI   AC3,NMSZCS-3    ; number of possible entries
CMCUH2: MOVE    AC,0(AC1)       ; get entry
        TRNN    AC,HOM.CD       ; see if home host
         JRST   [AOJ    AC1,    ; no, try next one
                 SOJG   AC3,CMCUH2
                 JRST   CMCUHE]
        MOVE    AC,HOMSYS       ; got it, get our new home sys
        TRO     AC,HOM.CD       ; flag it
        MOVEM   AC,0(AC1)       ; change it
; change the class
        SNDBYT  (CUDPRT,\B.CCOM,CCLMUD,I)
        PUSHJ   P,SNMCUD        ; send username
        SNDBYT  (CUDPRT,1,1,I)  ; position number always 1
        MOVEI   AC,NMCLSS+1     ; send the rest
        MOVEM   AC,CLSIND
        MOVE    AC,NMCLSS
        MOVEM   AC,CLSCTR
        SNDBYT  (CUDPRT,1,NMCLSS)
CMCUH3: SNDBYT  (CUDPRT,2,@CLSIND)
        SOSGE   CLSCTR
         JRST   CMCUH4
        AOS     CLSIND
        JRST    CMCUH3
CMCUH4: PUSHJ   P,SND40         ; send terminator
        PUSHJ   P,NGANS         ; get answer
         JFCL
        PUSHJ   P,NANOUT        ; type answer
        PUSHJ   P,GET40         ; get terminator
	GETT	(/CUN/)
	 JRST	CMCUH1
	TTFSTR	([ASCIZ/Change User Home/])
	PUSHJ	P,STDUHD
	TTFSTR	([ASCIZ/New Home Host :/],777,N)
	TTFNUM	(HOMSYS,D)
	PUSHJ	P,RELTTF
	JRST    CMCUH1          ; do another user

CMCUHE: ; does not qualify
        TYPSTR  ([ASCIZ/Can only change class 2 group 1 users./])
        JRST    CMCUH1

CMCUHD: ; done
        TRO     FLG,U.OKAY
        POPJ    P,
CMDCUC:	; change user network class
	TCR	(1)
	PUSHJ	P,GETCUD
	 JRST	GETCMD
	INNUM	([ASCIZ/Class position : /],D)
	 JRST	[PUSHJ	P,INORNO
		 JRST	CMDCUC]
	MOVEM	AC1,CLSWPO	; store it
	JUMPLE	AC1,CMCUC0	; must be ge 0, if not tell him so.
	CAIG	AC1,NMNCLS	; must be le largest position number.
	 JRST	CMCUCA
CMCUC0:	TYPSTR	([ASCIZ/Bad position number./])
	PUSHJ	P,INORNO
	JRST	CMDCUC
CMCUCA:	PUSHJ	P,GTUCLS
CMCUC1:	TCR	(1)
	PUSHJ	P,GETUNM
	 JRST	CMCUCD
	PUSHJ	P,GCREC
	 JRST	CMCUC1
	MOVE	AC1,CLSWPO
	SOJ	AC1,
	IMULI	AC1,NMSZCS
	SKIPG	NMCLSS(AC1)
	 JRST	CMCUCE
	SNDBYT	(CUDPRT,\B.CCOM,CCLMUD,I)
	PUSHJ	P,SNMCUD
	SNDBYT	(CUDPRT,1,CLSWPO)
	PUSHJ	P,CMAUCB
	GETT	(/CUN/)
	 JRST	CMCUC1
	TTFSTR	([ASCIZ/Change User Class/])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF
	JRST	CMCUC1

CMCUCD:
	TRO	FLG,U.OKAY
	POPJ	P,

CMCUCE:
	TYPSTR	([ASCIZ/No such class position./])
	JRST	CMCUC1
DEFINE ADD1 <
	X USER,1,CMDAUS,-1,-1	; add user
 >

	SUBCOM	([ASCIZ/Add :/],ADD,ADD1)
DEFINE AUS1 <
	X CLASS,1,CMDAUC,-1,-1
 >

	SUBCOM	([ASCIZ/Add User :/],AUS,AUS1)
CMDAUC:	 ; add user class
	TCR	(1)
	PUSHJ	P,GETCUD
	 JRST	GETCMD
	PUSHJ	P,GTUCLS	; get class info
CMAUC1:	TCR	(1)
	PUSHJ	P,GETUNM
	 JRST	CMAUCD
	PUSHJ	P,GCREC
	 JRST	CMAUC1
	SKIPE	NMCLSS+<NMNCLS-1>*NMSZCS	; skip if last pos empty
	 JRST	CMAUCE
	PUSHJ	P,CMAUC2
	GETT	(/CUN/)
	 JRST	CMAUC1
	TTFSTR	([ASCIZ/Add User Class./])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF
	JRST	CMAUC1

CMAUCD:
	TRO	FLG,U.OKAY
	POPJ	P,
CMAUCE:
	TYPSTR	([ASCIZ/Too many class positions./])
	 JRST	CMAUC1

CMAUC2:
	SNDBYT	(CUDPRT,\B.CCOM,ACLMUD,I)
	PUSHJ	P,SNMCUD
CMAUCB:	SNDBYT	(CUDPRT,1,CLSWRK)
	SNDBYT	(AC,\B.CLS,CLSWRK+1)
	MOVE	AC1,CLSWRK
	MOVEM	AC1,NUM
	MOVEI	AC1,CLSWRK+2
	MOVEM	AC1,NUM1
CMAUC3:	
	SNDBYT	(AC,\B.GRPH,@NUM1)
	AOS	NUM1
	SOSG	NUM
	 JRST	CMAUC4
	JRST	CMAUC3

CMAUC4:	PUSHJ	P,SND40
	PUSHJ	P,NGANS
	 JFCL
	PUSHJ	P,NANOUT
	PUSHJ	P,GET40
	POPJ	P,
DEFINE DEL1 <
	X USER,1,CMDDUS,-1,-1   ; delete user
 >
	SUBCOM	([ASCIZ/Delete :/],DEL,DEL1)
DEFINE DUS1 <
	X CLASS,1,CMDDUC,U.PRV!U.NET,-1	; del user class
 >

	SUBCOM ([ASCIZ/Delete User :/],DUS,DUS1)
CMDDUC:	; delete user class
	TCR	(1)
	PUSHJ	P,GETCUD
	 JRST	GETCMD
	INNUM	([ASCIZ/Class position :/],D)
	 JRST	[PUSHJ P,INORNO
		 JRST	CMDDUC]
	MOVEM	AC1,CLSWPO
	JUMPLE	AC1,CMDUC0
	CAIG	AC1,NMNCLS
	 JRST	CMDUC1
CMDUC0:	TYPSTR	([ASCIZ/Bad position number./])
	PUSHJ	P,INORNO
	JRST	CMDDUC
CMDUC1:	TCR	(1)
	PUSHJ	P,GETUNM
	 JRST	CMDUCD
	PUSHJ	P,GCREC
	 JRST	CMDDUC1
	MOVE	AC1,CLSWPO
	SOJ	AC1,
	IMULI	AC1,NMSZCS
	SKIPG	NMCLSS(AC1)
	 JRST	CMDUCE
	SNDBYT	(CUDPRT,\B.CCOM,RCLMUD,I)
	PUSHJ	P,SNMCUD
	SNDBYT	(CUDPRT,1,CLSWPO)
	PUSHJ	P,SND40
	PUSHJ	P,NGANS
	 JFCL
	PUSHJ	P,NANOUT
	PUSHJ	P,GET40
	GETT	(/CUN/)
	 JRST	CMDUC1
	TTFSTR	([ASCIZ/Delete User Class./])
	PUSHJ	P,STDUHD
	PUSHJ	P,RELTTF
	JRST	CMDUC1

CMDUCD:
	TRO	FLG,U.OKAY
	POPJ	P,

CMDUCE:
	TYPSTR	([ASCIZ/No such class position./])
	JRST	CMDUC1
CMDCMC: ; change mdisk cylinders
	TCR	(1)
	TRO	FLG2,V.NIR

DEFINE CMC <
	X	(HST1OT,GETH37,RWH37)
	X	(NAMOUP,GETUSR,RWUSR)
	X	(MDIOUT,GETMDI,RWMDI)
	X	(CYLOUT,GETCYL,RWCYL)
	X	(GRPOUT,GETGRP,RWGRP,AC,-1,U.PRV) ; only priv may chg packgrp
	X	(SCMOUT,GETSCM,RWSCM,FLG2,V.NIR) ; if (not immediate) or req
>
	EXMMAC (CMY,CMC,1,USRRQQ)

; code for change mdisk cylinders starts here

	SKIPN	PCKG
	 JRST	CMCMC1
	SNDBYT	(OLDPRT,\B.LCOM,SPKLUD,I)
	SNDSTR	(AC,L.PKGP,PCKG)
	PUSHJ	P,OLDA
	 JRST	CMCMCE		; error
	JRST	CMCMC3
CMCMC2:	SNDBYT	(OLDPRT,\B.LCOM,SAPLUD,I)
	PUSHJ	P,OLDA
	 JRST	CMCMCE
CMCMC3:	; set pack done, try for actual change now
	

	TRO	FLG,U.OKAY
	POPJ	P,
; end of code for change mdisk cylinders
HST1OT:
	TYPSTR	([ASCIZ/Host :/],777,0,T.P0,N)
	TYPNUM	(HOST,D,0,T.P2)
	POPJ	P,
NAMOUP:
	MOVEI	AC,UNMSPC
	PUSHJ	P,NAMOUT
	POPJ	P,

MDIOUT:
	TYPSTR	([ASCIZ/Mdisk :/],777,0,T.P0,N)
	TYPSTR	(MDISK,B.MDI,0,T.P2)
	POPJ	P,

CYLOUT:
	TYPSTR	([ASCIZ/Cylinders :/],777,0,T.P0,N)
	TYPNUM	(CYL,D,0,T.P2)
	POPJ	P,

GRPOUT:
	TYPSTR	([ASCIZ/Pack Grp :/],777,0,T.P0,N)
	TYPSTR	(PCKG,L.PKGP,0,T.P2)
	POPJ	P,

SCMOUT:
	TYPSTR	([ASCIZ/Comment :/],777,0,T.P0,N)
	TYPSTR	(SCM,L.SCM,0,T.P2)
	POPJ	P,

GETH37:	; input 370 host number
	INNUM	([ASCIZ/Host :/],D)
	 JRST	[PUSHJ	P,INORNO
		 JRST	GETH37]
	JUMPE	AC1,.-1
	MOVEM	AC1,LUDNUM
	MOVEM	AC1,HOST
	TLNE	FLG2,V.LSQ		; skip if not a list command
	 POPJ	P,			; return, no check on list
	PUSHJ	P,GETOLD		; build circuit
	 JRST	GETCMD
	MOVE	AC,OLDASY
	CAIN	AC,A370
	 JRST	GTH372
	TYPSTR	([ASCIZ/Cmd only available on Tymcom-370/])
	PUSHJ	P,INORNO
	JRST	GETH37
GTH372:
	TLNN	FLG2,V.EXC	; skip if changing items
	 POPJ	P,
	PUSHJ	P,CKUVAL	; check that username valid on this host
	 JRST	[PUSHJ	P,INORNO
		 JRST	GETH37]
	POPJ	P,

GETUSR:	; input the username
	PUSHJ	P,GETUNM
	 JRST	[PUSHJ	P,INORNO
		 JRST	GETUSR]
	TLNE	FLG2,V.LSQ	; skip this part if doing a list
	 POPJ	P,
	PUSHJ	P,GETCUD
	 JRST	GETCMD
	PUSHJ	P,GCREC
	 JRST	GETUR2
	PUSHJ	P,CHKUUN	; check access
	 JRST	GETUR2
GETUR1:
	PUSHJ	P,CKUVAL
	 JRST	GETUR2
	POPJ	P,
GETUR2:	; here when username does not match
	TRNN	FLG,U.RFI	; skip if this is from  a request
	 JRST	[PUSHJ	P,INORNO
		 JRST	GETUSR]
	PUSHJ	P,REQERR
	POPJ	P,

GETMDI:
	INSTR	([ASCIZ/Mdisk Addrs :/],MDISK,B.MDI)
	POPJ	P,

GETCYL:
	INNUM	([ASCIZ/Cylinders :/],D)
	 JRST	[PUSHJ	P,INORNO
		 JRST	GETCYL]
	MOVEM	AC1,CYL
	POPJ	P,

GETGRP:	; input pack group
	SETZM	PCKG
	TLNN	FLG,U.PRV	; skip if privileged
	 POPJ	P,
	INSTR	([ASCIZ/Pack or Group or (cr) :/],PCKG,L.PKGP,T)
	MOVE	AC,PCKG
	CAMN	AC,[ASCII/     /]
	 SETZM	PCKG
	POPJ	P,

GETSCM:	; get short 1 line comment
	TLNE	FLG2,V.EXQ!V.LSQ!V.PRQ	; skip if not request
	 JRST	GTSCM2
	TLNN	FLG,U.IMM		; skip if immediate
	 JRST	GTSCM2
	TRZ	FLG2,V.NIR
	POPJ	P,
GTSCM2:
	INSTR	([ASCIZ/Comment :/],SCM,L.SCM)
	POPJ	P,

CKUVAL:	; check if user is valid on this host
	MOVE	AC,OLDHOS
	CAME	AC,HOST
	 JRST	CKUVL2		; if no circuit, skip return
	SNDBYT	(OLDPRT,\B.LCOM,KNALUD,I)
	SNDSTR	(AC,L.UNM3,UNMSPC)
	PUSHJ	P,OLDA
	 JRST	[TYPSTR	([ASCIZ/Username -/],777,0,0,N)
		 MOVE	AC1,OLDANS
		 PUSHJ	P,LUDAOT
		 POPJ	P,]
CKUVL2:	AOS	0(P)	; skip return
	POPJ	P,

RWH37:	; write host to request file
	REQNOT	(REQ,HOST,D)
	POPJ	P,

RWUSR:	; write username to request file
	REQOUT	(REQ,UNMSPC,L.UNM)
	POPJ	P,

RWMDI:	; write mdisk to request file
	REQOUT	(REQ,MDISK,B.MDI)
	POPJ	P,

RWCYL:	; write cylinders to request file
	REQNOT	(REQ,CYL,D)
	POPJ	P,

RWGRP:	; write pack group
	REQOUT	(REQ,PCKG,L.PKGP)
	POPJ	P,

RWSCM:	; write 1 line comment
	REQOUT	(REQ,SCM,L.SCM)
	POPJ	P,
    