SUBTTL	LISCOM	- List Type Commands.
DEFINE	LIS1	<
	X [ASCIZ"ACCOUNT"],2,CMDLAC,U.PRV,-1	; LIST ACCOUNT
	X [ASCIZ"ALL"],1,CMDLAL,U.CST,-1	; LIST ALL (CUSTOMER)
	X [ASCIZ"ALL"],2,CMDLAL,U.PRV,-1	; LIST ALL (PRIVILEGE)
	X [ASCIZ"CUSTOMER"],1,CMDLCS,U.PRV,-1	; LIST CUSTOMER
	X [ASCIZ"GANPASS"],1,CMDLGP,U.PRV,-1	; LIST GANPASS
	X [ASCIZ"PROFILE"],1,CMDLUP,-1,-1	; LIST PROFILE
	X [ASCIZ"USERNAME"],1,CMDLUS,-1,-1	; LIST USERNAME
>
	SUBCOM	([ASCIZ"LIST"],LIS,LIS1)
DEFINE	LAL1	<
	X [ASCIZ"GANPASS"],1,CMDLAG,U.PRV,-1	; LIST ALL GANPASS
	X [ASCIZ"HOSTS"],1,CMDLAH,U.PRV,-1	; LIST ALL HOSTS
	X [ASCIZ"PROFILES"],1,CMDLAP,-1,-1	; LIST ALL PROFILES
	X [ASCIZ"USERNAMES"],1,CMDLAU,-1,-1	; LIST ALL USERNAMES
>
	SUBCOM	([ASCIZ"LIST ALL"],LAL,LAL1)
DEFINE	LCS1	<
	X [ASCIZ"GANS"],1,CMDLCG,-1,-1		; LIST CUSTOMER GANS
	X [ASCIZ"INFORMATION"],1,CMDLCI,-1,-1	; LIST CUSTOMER INFORMATION
	X [ASCIZ"USERNAMES"],1,CMDLCN,-1,-1	; LIST CUSTOMER USERNAMES
>
	SUBCOM	([ASCIZ"LIST CUSTOMER"],LCS,LCS1)
DEFINE	LUS1	<
	X [ASCIZ"CUD"],1,CMDLUC,U.PRV,-1	; LIST USER CUD
	X [ASCIZ"INFORMATION"],1,CMDLUI,-1,-1	; LIST USER INFORMATION
>
	SUBCOM	([ASCIZ"LIST USERNAME"],LUS,LUS1)

LISDON: TRO	FLG,U.OKAY
	POPJ	P,
; List Account
; (List all Users for GAN in TUSRDB)

CMDLAC: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. & CUD.
	JRST	GETCMD
	PUSHJ	P,GETGAN
	SNDBYT	(ACTPRT,\B.ACOM,LTYGCT,I)
	SNDBYT	(ACTPRT,\B.GAN,NMGAN)
	PUSHJ	P,AGANS		; GET ANSWER FROM ACTG.
	JRST	LACERR
	PUSHJ	P,GETODF		; GET OUTPUT DIRECTION
	TCR	(1)
	TYPSTR	([ASCIZ/The following Users are valid:/])
	TCR	(1)
	PUSHJ	P,GGNREC
CMLACD: TRNE	FLG,U.LFO
	PUSHJ	P,CLSODF
	JRST	LISDON
LACERR: TYPSTR	([ASCIZ/Not a valid GAN./])
	JRST	CMLACD
; List All GanPass

CMDLAG: TRO	FLG2,V.LAG
	PUSHJ	P,LKPWF
	JRST	PWF.NF
	TRO	FLG2,V.HDR
	MOVEI	AC,1
	MOVEM	AC,PAGCNT
CMLAG1: MOVE	AC,PAGCNT
	CAILE	AC,1000
	JRST	CMLAGD
	HRLI	AC,(1B7!1B17)
	PUSHJ	P,MP1PWP
	MOVE	AC1,[-1000,,0]
	HRRZ	AC2,TTFPAG
	LSH	AC2,11
	HRR	AC1,AC2
	MOVE	AC,PAGCNT
	SOJ	AC,
	LSH	AC,11
	MOVEM	AC,NMGAN
CMLAG2: MOVE	AC,0(AC1)
	JUMPE	AC,CMLAG3
	PUSH	P,AC1
	PUSH	P,AC
	MOVE	AC,NMGAN
	MOVEI	AC4,^D8
	PUSHJ	P,NUMOUT
	DMOVE	AC,NUMSP
	DMOVEM	AC,BLKTMP
	POP	P,AC
	TRZ	FLG2,V.NAO
	TLNE	AC,(1B17)
	TRO	FLG2,V.NAO
	HRRZS	AC
	MOVEI	AC4,^D10
	PUSHJ	P,NUMOUT
	DMOVE	AC,NUMSP
	DMOVEM	AC,BLKTMP+3
	MOVE	AC,[ASCII"  No "]
	TRZE	FLG2,V.NAO
	MOVE	AC,[ASCII"  Yes"]
	MOVEM	AC,BLKTMP+5
	PUSHJ	P,SPCINS
	SETZM	BLKTMP+6
	TRNE	FLG2,V.HDR
	PUSHJ	P,HDRLAG
	TYPSTR	(BLKTMP)
	POP	P,AC1
CMLAG3: AOS	NMGAN
	AOBJN	AC1,CMLAG2
	HRRZ	AC,TTFPAG
	HRLI	AC,1
	VCLEAR	AC,
	JFCL
	AOS	PAGCNT
	JRST	CMLAG1
CMLAGD: PUSHJ	P,CLSPWF
	TRZE	FLG2,V.HDR
	PUSHJ	P,[TCR	(1)
		   TYPSTR ([ASCIZ"No entries found."])
		   POPJ	P,]
	TRNE	FLG,U.LFO
	PUSHJ	P,CLSODF
	TRZ	FLG2,V.LAG
	JRST	LISDON

HDRLAG: ; Get output direction and display header for "List All Ganpass"
	TRZ	FLG2,V.HDR
	PUSHJ	P,GETODF
	TCR	(1)
	TYPSTR	([ASCIZ"Global    Min. Password  Non-Alpha"])
	TYPSTR	([ASCIZ"Account       Length      Option"])
	TYPSTR	([ASCIZ"-------   -------------  ---------"])
	TCR	(1)
	POPJ	P,
; List All Hosts for an UUN in TYMHST data base.

CMDLAH: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; GET ACTG. & CUD CIR.
	JRST	GETCMD		; CANNOT BUILD CIRCUITS
	PUSHJ	P,GVMAIL		; INPUT AN VERIFY A MAILNAME
	PUSHJ	P,HSTOUT
	JRST	LISDON
; List Customer Gans
; (List all Global Account Numbers for a Customer Number.)

CMDLCG: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,BLDACT
	JRST	GETCMD
CMLCG1: PUSHJ	P,GETCUS		; INPUT CUSTOMER NUMBER
	JRST	LISDON
	PUSHJ	P,GETODF
	SNDBYT	(ACTPRT,\B.ACOM,LCGACT,I)
	SNDBYT	(ACTPRT,\B.CID,CUSNUM)
	TCR	(1)
	MOVE	AC,CUSNUM
	MOVEI	AC4,^D10
	PUSHJ	P,NUMOUT
	DMOVE	AC,NUMSP
	DMOVEM	AC,TCUSNO
	TYPSTR	(LCGMSG)
	TCR	(1)
CMLCG2: GETBYT	(ACTPRT,\B.GAN,Y)
	JRST	GETCMD
	CAIN	AC1,377
	JRST	CMLCGD
	MOVEM	AC1,NUM
	TYPNUM	(NUM,O)
	JRST	CMLCG2
CMLCGD: TRNE	FLG,U.LFO
	PUSHJ	P,CLSODF
	JRST	LISDON
; List Customer Information
; (Outputs information about 1 customer.)

CMDLCI: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,BLDACT
	JRST	GETCMD
CMLCI1: PUSHJ	P,INASYS
	PUSHJ	P,GETCUS
	JRST	.-1
	PUSHJ	P,GCAREC
	JRST	LCIERR
	PUSHJ	P,LCAREC
	JRST	LISDON
LCIERR: TYPSTR	([ASCIZ/Error during List Customer Information./])
	PUSHJ	P,LUDAOT
	JRST	CMLCI1
; List Customer Names
; (List all Users for a customer)

CMDLCN: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. & CUD
	JRST	GETCMD		; CANNOT BUILD THE CIRCUITS.
	PUSHJ	P,GETCUS		; GET CUSTOMER NUMBER
	JRST	CMLCND
	SNDBYT	(ACTPRT,\B.ACOM,LUCACT,I)
	SNDBYT	(ACTPRT,\B.CID,CUSNUM)
	SNDBYT	(ACTPRT,\B.ASY,NINE,I)
	PUSHJ	P,AGANS		; GET ANSWER FROM ACTG.
	JRST	LCNERR
	PUSHJ	P,GETODF		; GET OUTPUT DIRECTION
	TCR	(1)
	TYPSTR	([ASCIZ/The following Users are valid:/])
	TCR	(1)
	PUSHJ	P,GGNREC
CMLCND: TRNE	FLG,U.LFO
	PUSHJ	P,CLSODF
	JRST	LISDON
LCNERR: TYPSTR	([ASCIZ/Not a Tymnet Customer Number./])
	JRST	CMLCND
; List User Cud

CMDLUC: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,BLDCUD
	JRST	GETCMD
CMLUC1: PUSHJ	P,GETUNM		; GET USER NAME
	JRST	LISDON
	PUSHJ	P,GCREC
	JRST	CMLUC2
	PUSHJ	P,RDPSWF
	PUSHJ	P,LCREC			; OUTPUT IT
	TRZ	FLG2,V.NAO
CMLUC2: TCR	(1)
	JRST	CMLUC1
; List All Usernames.

CMDLAU: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. & CUD.
	JRST	GETCMD
	PUSHJ	P,GTMNAM
	JRST	CMDLAU+1
	SNDBYT	(ACTPRT,\B.ACOM,LMUACT,I)
	SNDBYT	(ACTPRT,\B.UUN,MAIUUN)
	PUSHJ	P,AGANS		; GET ANSWER FROM ACTG.
	JRST	LAUERR
        TLNN    FLG,U.IFL
	PUSHJ	P,GETODF		; GET OUTPUT DIRECTION
	TCR	(1)
        TYPSTR  ([ASCIZ "               Home"])
        TYPSTR  ([ASCIZ "              System           GAN       UUN"])
        TYPSTR  ([ASCIZ "              ------          ------    ------"])
	TCR	(1)
	PUSHJ	P,GGNREC
CMLAUD: TRNE	FLG,U.LFO
	PUSHJ	P,CLSODF
	JRST	LISDON
LAUERR: TYPSTR	([ASCIZ "There is no username in your account."])
	JRST	CMLAUD
; List All Profiles.

CMDLAP: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. & CUD.
	JRST	GETCMD
	PUSHJ	P,GTMNAM
	JRST	CMDLAP+1
	SNDBYT	(ACTPRT,\B.ACOM,LMUACT,I)
	SNDBYT	(ACTPRT,\B.UUN,MAIUUN)
	PUSHJ	P,AGANS			; GET ANSWER FROM ACTG.
	JRST	LAPERR
	TLNN	FLG,U.IFL
	PUSHJ	P,GETODF
CMLAPL: TCR	(1)
	PUSHJ	P,GUNMFA
	JRST	CMLAUD
	PUSHJ	P,GCREC
	JRST	CMLAPL
	MOVEI	AC,UNMSPC
	PUSHJ	P,NAMOUT
	PUSHJ	P,ACPOUT
	JRST	CMLAPL
LAPERR: TYPSTR	([ASCIZ "There is no username in your account."])
	JRST	LISDON
; List GanPass

CMDLGP: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
CMLGPS: TCR	(1)
	PUSHJ	P,INPGAN
	JRST	LISDON
CMLGP4: PUSHJ	P,RDPSWF
	SKIPN	OLDPWR
	JRST	[TYPSTR	([ASCIZ"Entry not found for GAN"],777,0,0,N)
		 TYPNUM	(NMGAN,O,1)
		 JRST	CMLGPS]
	PUSHJ	P,PWLOUT
	PUSHJ	P,NAOOUT
	TRZ	FLG2,V.NAO
	JRST	CMLGPS
; List Profile

CMDLUP: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	TLNE	FLG,U.PRV
	JRST	CMLUP1
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. AND CUD.
	JRST	GETCMD
        JRST    CMLUP2
CMLUP1: PUSHJ	P,BLDCUD
	JRST	GETCMD
CMLUP2: PUSHJ	P,GETUNM
	JRST	LISDON
	PUSHJ	P,GCREC		; GET CUD RECORD
	JRST	CMLUP7
	TLNE	FLG,U.PRV
	JRST	CMLUP3
	PUSHJ	P,GTUREC		; GET A RECORD FROM TUSRDB
	JRST	CMLUP7
	PUSHJ	P,CKMNAM		; CHECK MAIL NAME AGAINST
	JRST	CMLUPE			; LOGGED IN USER NAME
CMLUP3: TRZE	FLG2,V.URC
	JRST	.+3
	MOVEI	AC,UNMSPC
	PUSHJ	P,NAMOUT		; OUTPUT USER NAME
	PUSHJ	P,ACPOUT
	TLNE	FLG,U.PRV
	JRST	CMLUP7
	JRST	LISDON
CMLUPE: TYPSTR	(ILLACC)
	TYPSTR	(PLSREU)
CMLUP7: TCR	(1)
	JRST	CMLUP2
; List User Information

CMDLUI: TRO	FLG2,V.LCM		; SET FLAG TO INDICATE LIST COMMAND
	PUSHJ	P,ACTCUD		; BUILDING CIRCUIT TO ACTG. & CUD.
	JRST	GETCMD
CMLUI1: PUSHJ	P,GETUNM
	JRST	LISDON
	PUSHJ	P,GCREC
	JRST	CMLUI2
	PUSHJ	P,GTUREC
	JRST	CMLUI2
	PUSHJ	P,CKMNAM
	JRST	CMLUIE
	PUSHJ	P,CKTRAC
	JRST	CMLUI2
	TRZE	FLG2,V.URC
	JRST	.+3
	MOVEI	AC,UNMSPC
	PUSHJ	P,NAMOUT
	PUSHJ	P,RDPSWF
	PUSHJ	P,PWLOUT
	PUSHJ	P,NAOOUT
	TRZ	FLG2,V.NAO
	MOVE	AC,TUCNO
	PUSHJ	P,CIDOUT
	MOVEI	AC,TUCNAM
	PUSHJ	P,CSNOUT
	PUSHJ	P,HOMOUT
	MOVE	AC,NMIRC
	PUSHJ	P,IRCOUT
	MOVEI	AC,TUMAIL
	PUSHJ	P,LMAILN
        TLNN    FLG,U.PRV
        JRST    LISDON
	MOVE	AC,TUCOST
	PUSHJ	P,CCOUT
CMLUI2: TCR	(1)
	JRST	CMLUI1
CMLUIE: TYPSTR	(ILLACC)
	TYPSTR	(PLSREU)
	JRST	CMLUI2

GCCLS:	; get class info from cud
	MOVEI	AC1,NMCLSS	; get address
	MOVEM	AC1,CLSIND
GCCLS2: GETBYT	(CUDPRT)		; input a byte
	JRST	GETCMD
	CAIN	AC1,377		; skip if not end of class info
	JRST	GCCLS4
	MOVEM	AC1,GRPCTR	; save number of groups
	MOVEM	AC1,@CLSIND	; save address
	AOS	CLSIND		; and increment by 1
	GETBYT	(AC,\B.CLS)	; get class
	JRST	GETCMD
	MOVEM	AC1,@CLSIND	; save the class number
	AOS	CLSIND		; increment pointer
GCLS2B: SOSGE	GRPCTR		; see if any hosts and groups left
	JRST	GCCLS3		; next
	GETBYT	(AC,\B.GRPH)	; get a host or group
	JRST	GETCMD
	MOVEM	AC1,@CLSIND	; save it
	AOS	CLSIND		; increment pointer
	JRST	GCLS2B
GCCLS3: AOS	CLSCTR		; increment position counter
	MOVE	AC1,CLSCTR	; compute new clsind
	IMULI	AC1,NMSZCS
	ADDI	AC1,NMCLSS
	MOVEM	AC1,CLSIND	; and save it
	JRST	GCCLS2		; do next class if any
GCCLS4:
	POPJ	P,		; all done, return

LCREC:	; output cud record to terminal
	TRZE	FLG2,V.URC
	JRST	.+3
	MOVEI	AC,UNMSPC	; address of username
	PUSHJ	P,NAMOUT	; output name
	MOVE	AC,NMGAN	; get gan
	PUSHJ	P,GANOUT	; output it
	MOVE	AC,NMUUN	; uun
	PUSHJ	P,UUNOUT
	MOVE	AC,NMDIST	; district
	PUSHJ	P,DISOUT
	MOVE	AC,NMIRC	; irc
	PUSHJ	P,IRCOUT
	PUSHJ	P,PDTOUT	; passdate from nmpmon, nmpday, nmpyr
	PUSHJ	P,PWLOUT	; Display min. password length
	PUSHJ	P,NAOOUT
	PUSHJ	P,CPROUT	; cparw from nmcpar
	PUSHJ	P,CLNOUT	; colon from nmcoln
	PUSHJ	P,CLSOUT	; classes
	POPJ	P,

NAMOUT:	; output username from address in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Username:/],777,0,0,N)
	TYPSTR	(@NUM,L.UNM,1)
	POPJ	P,

GANOUT:	; ouput the gan in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Global Account:/],777,0,0,N)
	TYPNUM	(NUM,O,1)
	POPJ	P,

UUNOUT:	; output the uun in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/UUN:/],777,0,0,N)
	TYPNUM	(NUM,O,1)
	POPJ	P,

DISOUT:	; output the district in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/District:/],777,0,0,N)
	TYPNUM	(NUM,D,1)
	POPJ	P,

PDTOUT:	; output date in nmpday,nmpmon,nmpyr
	MOVE	AC,[77,,777777]
	CAMN	AC,NMPDAT		; skip if not gfd only
	 POPJ	P,
	TYPSTR	([ASCIZ"Password changed:"],777,0,0,N)
	TYPNUM	(NMPMON,D,1,0,N)	; output the month
	MOVEI	AC,57		; 57 IS "/" CHARACTER
	PUSHJ	P,CHROUT
	TYPNUM	(NMPDAY,D,0,0,N)	; output the day
	MOVEI	AC,57
	PUSHJ	P,CHROUT
	TYPNUM	(NMPYR,D)		; output the year
	POPJ	P,

CPROUT:	; translate and output cud lic word
	TYPSTR	([ASCIZ/License:/],777,0,0,N)
	SKIPN	NMCPAR		; skip if some bits are set
	POPJ	P,
	MOVE	AC,NMCPAR
	TLNN	AC,TYM.CD
	JRST	CPROU2
	TYPSTR	([ASCIZ/Tymshare/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU2: TLNN	AC,PRM.CD
	JRST	CPROU3
	TYPSTR	([ASCIZ/Premium/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU3: TLNN	AC,LOS.CD
	JRST	CPROU4
	TYPSTR	([ASCIZ/Login Over Shut./],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU4: TLNN	AC,AS.CD
	JRST	CPROU5
	TYPSTR	([ASCIZ/Account Supervior/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU5: TLNN	AC,HSH.CD
	JRST	CPROU6
	TYPSTR	([ASCIZ/Hush/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU6: TRNN	AC,NML.CD
	JRST	CPROU7
	TYPSTR	([ASCIZ/No Multiple Login/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU7: TRNN	AC,NPC.CD
	JRST	CPRO7B
	TYPSTR	([ASCIZ/No Change Passsword/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPRO7B: TRNN	AC,GTW.CD
	JRST	CPROU8
	TYPSTR	([ASCIZ/Transparent Gate Way Option./],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU8: TRNN	AC,RUB.CD
	JRST	CPROU9
	TYPSTR	([ASCIZ/Rub/],777,0,T.P4)
	MOVE	AC,NMCPAR
CPROU9: TRNN	AC,SLW.CD
	JRST	CPROUA
	TYPSTR	([ASCIZ/Slow/],777,0,T.P4)
CPROUA:
	POPJ	P,		; all done with crarw

CLNOUT:	; translate and output colon option word
; this routine should always be called after cprout
	MOVE	AC,NMCOLN
	TLNE	AC,BIL.CD
	JRST	CLNOU1
	TYPSTR	([ASCIZ/Bill/],777,0,T.P4)
	JRST	CLNOU2
CLNOU1: TYPSTR	([ASCIZ/Non-Bill/],777,0,T.P4)
CLNOU2: MOVE	AC,NMCOLN
	TLNN	AC,CLN.CD
	JRST	CLNOU3
	TYPSTR	([ASCIZ/Ignore Colon Option./],777,0,T.P4)
	MOVE	AC,NMCOLN
CLNOU3: TLNN	AC,NPS.CD
	JRST	CLNOU4
	TYPSTR	([ASCIZ/No-Password Option./],777,0,T.P4)
CLNOU4:
	MOVE	AC,[77,,777777]
	CAME	AC,NMPDAT		; skip if gfd only
	POPJ	P,
	TYPSTR	([ASCIZ/GFD only/],777,0,T.P4)
	POPJ	P,

CLSOUT: ; OUTPUT CLASS INFO
	SETZM	CLSCTR			; ZERO CLASS POSITION
CLSOU2: ; MAJOR LOOP FOR OUTPUTTING CLASS INFO
	MOVE	AC1,CLSCTR		; COMPUTE CLASS INDEX
	IMULI	AC1,NMSZCS
	ADDI	AC1,NMCLSS
	SKIPN	0(AC1)			; CHECK IF DONE
	POPJ	P,			; ALL DONE
	MOVEM	AC1,CLSIND		; SAVE CLASS INDEX
	TCR	(1)
	AOS	CLSCTR			; INCREMENT CLASS POSITION
	MOVEI	AC,"("			; OUTPUT CLASS POSITION
	PUSHJ	P,CHROUT
	TYPNUM	(CLSCTR,D,0,0,N)
	MOVEI	AC,")"
	PUSHJ	P,CHROUT
	MOVE	AC,@CLSIND		; GET NUMBER OF ENTRIES IN THIS CLASS
	MOVEM	AC,GRPCTR
CLSWOT: TYPSTR	([ASCIZ"Class:"],777,0,T.P1,N)
	AOS	CLSIND
	MOVE	AC,@CLSIND		; GET CLASS NUMBER
	TRZ	FLG,U.UDF
	TRZE	AC,UDF.CD		; SKIP IF NOT SELF DEFINED CLASS
	JRST	CLSO2C
	TYPNUM	(@CLSIND,D,0,T.P2)	; OUTPUT CLASS NUMBER
	JRST	CLSO2B
CLSO2C: TRZ	AC,UDN.CD		; ZERO EXCEPTION CLASS BIT
	IDIVI	AC,2			; COMPUTE NO. OF ORIGINATING
	MOVEM	AC,CLSCT2		; HOST OR NODE
	TYPSTR	([ASCIZ"Self Defined"],777,0,T.P2,N)
	MOVE	AC,@CLSIND
	TRNN	AC,UDN.CD		; SKIP IF EXCEPTION CLASS BIT SET
	JRST	CLSO2D
	TYPSTR	([ASCIZ"- Exception Class"],777,1,0,N)
CLSO2D: TYPSTR	([ASCIZ"."])
	TRO	FLG,U.UDF
CLSO2B: SOSGE	GRPCTR			; SKIP IF HOSTS OR GROUPS LEFT
	JRST	CLSOU2			; CONTINUE TO OUTPUT ANOTHER CLASS
	AOS	CLSIND
	MOVE	AC,@CLSIND		; GET A HOST OR GROUP
	TRZN	AC,GRP.CD		; SKIP IF IT IS A GROUP
	JRST	CLSOU3
	TRZE	AC,HOM.CD		; SKIP IF IT IS NOT A HOME GROUP
	TRO	FLG,U.HOM		; SET HOME BIT
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ"Group:"],777,0,T.P1,N)
	TYPNUM	(NUM,D,0,T.P2,N)	; output the group number
	JRST	CLSOU4
CLSOU3: TRNN	FLG,U.UDF		; SKIP IF SELF DEFINED CLASS
	JRST	CLSO3C
	SKIPG	CLSCT2
	JRST	CLSO3C
	SOS	CLSCT2
	TRZE	AC,HOS.CD
	JRST	CLSO3B
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ"Originating Node:"],777,0,T.P1,N)
	TYPNUM	(NUM,O,1)
	JRST	CLSO2B
CLSO3B: MOVEM	AC,NUM
	TYPSTR	([ASCIZ"Originating Host:"],777,0,T.P1,N)
	TYPNUM	(NUM,D,1)
	JRST	CLSO2B
CLSO3C: TRZE	AC,HOM.CD		; CHECK IF HOME SYSTEM
	TRO	FLG,U.HOM		; SET HOME BIT
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ"Host:"],777,0,T.P1,N)
	TYPNUM	(NUM,D,0,T.P2,N)	; OUTPUT THE HOST
CLSOU4: TRZN	FLG,U.HOM		; OUTPUT HOME INDICATOR
	JRST	CLSOU5
	TYPSTR	([ASCIZ"(Home)"],777,0,T.P3,N)
CLSOU5: TCR	(1)
	JRST	CLSO2B			; GO DO NEXT HOST OR GROUP

; GET A RECORD IN TYMNET USER DATABASE (TUSRDB)

GTUREC: ; Get user information from TUSRDB
	SETZM	TUSTRT		; SET ALL TO ZEROES
	MOVE	AC,[TUSTRT,,TUSTRT+1]
	BLT	AC,TUEND-1		; CLEAR TYMNET USER RECORD
	SNDBYT	(ACTPRT,\B.ACOM,LTYMCT,I)	; SEND THE COMMAND
	SNDBYT	(AC,\B.UUN,NMUUN)
	GETBYT	(ACTPRT)
	JRST	GETCMD
	CAIE	AC1,ACT.OK		; SKIP IF OK
	JRST	GTURCE
	GETBYT	(AC,\B.CID)		; GET CUSTOMER NUMBER
	JRST	GETCMD
	MOVEM	AC1,TUCNO
	PUSHJ	P,GCNTUS		; GET CUSTOMER NAME
	PUSHJ	P,GMNTUS		; GET MAIL NAME
	GETBYT	(AC,\B.CC)		; GET COST CODE
	JRST	GETCMD
	MOVEM	AC1,TUCOST
	AOS	0(P)
	POPJ	P,
GTURCE: MOVEM	AC1,ACANS
	CAIE	AC1,3
	JRST	[PUSHJ	P,LUDAOT
		 POPJ	P,]
	TYPSTR	(UNMSPC,L.UNM,0,0,N)
	TYPSTR	([ASCIZ/not found in Accounting data base./],777,1)
	POPJ	P,

GCNTUS:	; GET CUSTOMER NAME FROM TUSRDB
	MOVEI	AC,TUCNAM
	PUSHJ	P,GTCNFA
	POPJ	P,

GMNTUS:	; GET MAIL NAME FROM TUSRDB
	GETSTR	(ACTPRT,L.UNM,TUMAIL)
	POPJ	P,

CIDOUT:	; output the cid in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Customer Number:/],777,0,T.P0,N)
	TYPNUM	(NUM,D,1)
	POPJ	P,

CSNOUT:	; output the customer name from address in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Customer Name:/],777,0,0,N)
	TYPSTR	(@NUM,L.CUSN,1)
	POPJ	P,

CCOUT:	; output the cost center number in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Cost Code:/],777,0,T.P0,N)
	TYPNUM	(NUM,D,1)
	POPJ	P,

LMAILN:	; OUTPUT THE MAIL NAME FROM ADDRESS IN AC
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ"Mailname:"],777,0,0,N)
	TYPSTR	(@NUM,L.UNM,1)
	POPJ	P,

CKMNAM: ;CHECK USER'S MAIL NAME AGAINST MAIL NAME
	TLNE	FLG,U.PRV		; SKIP IF TYMNET CUSTOMER
	JRST	CKMNMR
	MOVEI	AC,MY.UNM
	MOVEI	AC1,L.UNM
	PUSHJ	P,CNTCHR
	CMPSTR	(MY.UNM,TUMAIL,@AC1)
	POPJ	P,
CKMNMR: AOS	(P)
	POPJ	P,

COMSTR: HRLI	AC2,(POINT 7)
	HRLI	AC3,(POINT 7)
CMPST1: ILDB	AC,AC2
	ILDB	AC1,AC3
	CAME	AC,AC1
	POPJ	P,
	SOJG	AC4,CMPST1
	AOS	(P)
	POPJ	P,

FINHOM: SETZM	GHOME
	SETZM	HOMSYS
	MOVEI	AC1,NMCLSS
	SKIPN	(AC1)
	JRST	NOHOME
	MOVEM	AC1,CLSIND		; SAVE CLASS POINTER
	MOVE	AC,@CLSIND		; GET NO. OF GROUPS OR HOSTS
	SOS	AC
	MOVEM	AC,GRPCTR
	AOS	CLSIND
	MOVE	AC,@CLSIND		; GET CLASS NO.
	TRZN	AC,UDF.CD		; SKIP IF SELF-DEFINING
	JRST	FNHOM1
	TRZ	AC,UDN.CD		; ZERO NEGATIVE CLASS BIT
	IDIVI	AC,2
	ADDM	AC,CLSIND
	EXCH	AC,GRPCTR
	SUBM	AC,GRPCTR
FNHOM1: AOS	CLSIND
FNHOM2: MOVE	AC,@CLSIND
	TRNN	AC,HOM.CD		; SKIP IF THIS IS HOME SYSTEM
	JRST	FNHOM4
	TRNE	AC,GRP.CD		; SKIP IF THIS IS NOT THE GROUP
	JRST	FNHOM5
FNHOM3: AOS	(P)
	POPJ	P,
FNHOM4: TRNN	AC,GRP.CD		; SKIP IF THIS IS A GROUP
	MOVEM	AC,HOMSYS
	PUSHJ	P,CKNXT
	JRST	NOHOME
	JRST	FNHOM2
FNHOM5: ANDI	AC,ALHSTS
	MOVEM	AC,GHOME
	MOVE	AC,CLSIND
	MOVEM	AC,TCLIND
FNHOM6: PUSHJ	P,CKNXT
	JRST	NOHOME
	MOVE	AC,@CLSIND
	TRNE	AC,GRP.CD
	JRST	FNHOM6
	TRNN	AC,HOM.CD
	JRST	FNHOM6
	JRST	FNHOM3		; FOUND HOME SYSTEM & JUST TO RETURN
NOHOME: SKIPN	GHOME
	POPJ	P,
        MOVE    AC,TCLIND
        MOVEM   AC,CLSIND
	MOVE	AC,GHOME
	JRST	FNHOM3

CKNXT:	SOSGE	GRPCTR
	POPJ	P,
	AOS	CLSIND
	AOS	(P)
	POPJ	P,

HOMOUT: TYPSTR	([ASCIZ/Home System:/],777,0,T.P0,N)
	PUSHJ	P,FINHOM
	JRST	HOMOU2
	TRZ	FLG,U.HOM
	TRNE	AC,GRP.CD
	TRO	FLG,U.HOM
	ANDI	AC,HOMMSK
	MOVEM	AC,NUM
	TYPNUM	(NUM,D,1,0,N)
	TRZN	FLG,U.HOM
	JRST	HOMOU1
	TYPSTR	([ASCIZ/ (Group)/],777,0,T.P3,N)
HOMOU1: TCR	(1)
	POPJ	P,
HOMOU2: TYPSTR	([ASCIZ/User does not have home system./],777,0,^D14)
	POPJ	P,

GETGAN: ; Input a GAN from tal device.
	GETYR	([ASCIZ "Do you know the Global Account Number? (Y/N):"])
	JRST	GTGAGN
INGAGN: TCR	(1)
	PUSHJ	P,INPGAN
	JRST	INGAGN
	POPJ	P,
GTGAGN: TCR	(1)
GGNFUN: INSTR	(MEUNAM,UNMSPC,L.UNM,T)
	MOVEI	AC,UNMSPC
	MOVEI	AC1,L.UNM
	PUSHJ	P,CNTCHR
	SKIPG	AC1
	JRST	GTGAGN
	PUSHJ	P,GCREC
	JRST	GTGAGN
	TRNE	FLG2,V.LCM
	JRST	[MOVE	AC,NMGAN
		 PUSHJ	P,GANOUT
		 POPJ	P,]
	PUSHJ	P,CHKNET
	JRST	GTGAGN
	PUSHJ	P,GANASK		; Is GAN correct?
	JRST	GTGAGN			; No, go to get it again
	POPJ	P,

CKTRAC:	; CHECK TYMRES6 TO HAVE ACCESS TO A USER NAME
	TLNN	FLG,U.TR6
	JRST	CKTRA1
	TLNE	FLG2,V.EXQ!V.PRQ!V.LSQ
	JRST	CKTRA1
	MOVE	AC,[NMGAN,,SAVCRC]
	BLT	AC,SAVCRC+6
	MOVE	AC,[NMCLSS,,SAVCLS]
	BLT	AC,SAVCLS+NMSCLS-1
	MOVE	AC,[UNMSPC,,SAVUNM]
	BLT	AC,SAVUNM+2
	MOVE	AC,[TUMAIL,,UNMSPC]
	BLT	AC,UNMSPC+2
	TRO	FLG2,V.NTE		; SET FLAG FOR NO TYPE ERROR
	PUSHJ	P,GCREC
	JRST	CKTRA2
	TRZ	FLG2,V.NTE
	MOVE	AC,NMGAN
	CAIE	AC,TR6.GN
	JRST	CKTRA2
	MOVE	AC,[SAVUNM,,UNMSPC]
	BLT	AC,UNMSPC+2
	MOVE	AC,[SAVCRC,,NMGAN]
	BLT	AC,NMGAN+6
	MOVE	AC,[SAVCLS,,NMCLSS]
	BLT	AC,NMCLSS+NMSCLS-1
CKTRA1: AOS	(P)
	POPJ	P,
CKTRA2: TRZ	FLG2,V.NTE
	TYPSTR	(ILLACC)
	POPJ	P,

; GET AND OUTPUT LIST ACCOUNT OR LIST NAMES.

GGNREC: PUSHJ	P,GUNMFA		; INPUT USERNAME
	POPJ	P,
	TRO	FLG2,V.NTE		; SET FLAG FOR NO TYPE ERROR
	PUSHJ	P,GCREC		; GET CUD RECORD
	JRST	GGNRE4
	TRZ	FLG2,V.NTE
	DMOVE	AC,UNMSPC		; MOVE USERNAME
	DMOVEM	AC,BLKTMP		; TO OUTPUT AREA
	MOVE	AC,UNMSPC+2
	MOVEM	AC,BLKTMP+2
	PUSHJ	P,FINHOM		; FIND HOME SYSTEM
	JRST	GGNRE3		; NO HOME
        TRZ     FLG,U.HOM
        TRNE    AC,GRP.CD       ; SKIP IF NOT HOME GROUP
        TRO     FLG,U.HOM
	ANDI	AC,HOMMSK
	MOVEI	AC4,^D10		; SET FOR DECIMAL
	PUSHJ	P,NUMOUT
	MOVE	AC,NUMSP		; MOVE HOME SYSTEM
        MOVEM   AC,BLKTMP+3
        SETZB   AC,AC1
        TRZE    FLG,U.HOM
        DMOVE   AC,[ASCII" (Group)  "]
	DMOVEM	AC,BLKTMP+4		; TO OUTPUT AREA
GGNRE1: MOVE	AC,NMGAN
	MOVEI	AC4,10		; SET FOR OCTAL
	PUSHJ	P,NUMOUT
	DMOVE	AC,NUMSP		; MOVE GAN TO
	DMOVEM	AC,BLKTMP+6		; OUTPUT AREA
	MOVE	AC,NMUUN
	MOVEI	AC4,10
	PUSHJ	P,NUMOUT
	DMOVE	AC,NUMSP		; MOVE UUN TO
	DMOVEM	AC,BLKTMP+10		; OUTPUT AREA
GGNRE2: PUSHJ	P,SPCINS
	TYPSTR	(BLKTMP,^D50)
	JRST	GGNREC
GGNRE3: DMOVE	AC,[ASCII/No Home   /]
        DMOVEM  AC,BLKTMP+3
        SETZM   BLKTMP+5
	JRST	GGNRE1
GGNRE4: DMOVE	AC,UNMSPC
	DMOVEM	AC,BLKTMP
	MOVE	AC,UNMSPC+2
	MOVEM	AC,BLKTMP+2
	DMOVE	AC,[ASCII/- Username/]
	DMOVEM	AC,BLKTMP+3
	DMOVE	AC,[ASCII/ not found/]
	DMOVEM	AC,BLKTMP+5
        DMOVE   AC,[ASCII/ in the CU/]
	DMOVEM	AC,BLKTMP+7
        DMOVE   AC,[ASCII/D.        /]
	DMOVEM	AC,BLKTMP+11
	JRST	GGNRE2

SPCINS: MOVE	AC1,[POINT 7,BLKTMP]
	MOVEI	AC2,^D45
	MOVEI	AC3,40
SPCIN1: ILDB	AC,AC1
	SKIPN	AC
	DPB	AC3,AC1
	SOJG	AC2,SPCIN1
	POPJ	P,


; INPUT MAIL NAME

GTMNAM: TLNN	FLG,U.PRV
	JRST	GTMN2
GTMN1:	INSTR	([ASCIZ"Enter Mailname:"],UNMSPC,L.UNM,T)
	MOVE	AC,[UNMSPC,,MAINAM]
	BLT	AC,MAINAM+2
	TLNE	FLG2,V.LSQ!V.EXQ!V.PRQ
	JRST	GTMN2
	MOVEI	AC,UNMSPC
	MOVEI	AC1,L.UNM
	PUSHJ	P,CNTCHR
	SKIPG	AC1
	POPJ	P,
	PUSHJ	P,GCREC
	JRST	GTMN3
	MOVE	AC,NMGAN
	TLNN	FLG,U.TR6
	JRST	GTMN4
	CAIN	AC,TR6.GN
	JRST	GTMN4
	TYPSTR	([ASCIZ"You do not have access that mailname."])
	TYPSTR	(PLSREM)
	POPJ	P,
GTMN4:	MOVEM	AC,MAIGAN
	MOVE	AC,NMUUN
	MOVEM	AC,MAIUUN
GTMN2:	AOS	(P)
	POPJ	P,
GTMN3:	TCR	(1)
	JRST	GTMN1

GVMAIL: PUSHJ	P,GTMNAM
	JRST	GVMAI2
	SNDBYT	(ACTPRT,\B.ACOM,LMHACT,I) ; SEND CODE 223 = LIST ALL HOSTS
	SNDBYT	(AC,\B.UUN,MAIUUN)	; SEND THE UUN
	PUSHJ	P,AGANS		; GET ANSWER FROM ACTG.
	JRST	GVMAI1
	PUSHJ	P,GHSTAC
	POPJ	P,
GVMAI1: CAIE	AC1,3
	JRST	[TYPSTR ([ASCIZ/Error during List All Hosts for a mailname./])
		 PUSHJ	P,LUDAOT
		 JRST	GVMAI2]
	TLNN	FLG,U.PRV
	JRST	GVMAI3
	TYPSTR	(MAINAM,L.UNM,0,0,N)
	TYPSTR	([ASCIZ/ is not a valid mailname./],777)
GVMAI2: TLNN	FLG,U.PRV
	JRST	GETCMD
	TCR	(1)
	JRST	GVMAIL
GVMAI3: TYPSTR  ([ASCIZ/Your mailname not valid on any host./])
	TYPSTR	([ASCIZ/Please contact Tymnet's Validations Department/])
	TYPSTR	([ASCIZ/for adding one or more hosts to your mailname./])
	TCR	(1)
	JRST	GETCMD

GVUNM1: TCR	(1)
GVUNAM: PUSHJ	P,GETUNM
	POPJ	P,
	PUSHJ	P,GCREC
	JRST	GVUNM1
	PUSHJ	P,GTUREC
	JRST	GVUNM1
	PUSHJ	P,CKMNAM
	JRST	GVUNME
	PUSHJ	P,CKTRAC
	JRST	GVUNME
	AOS	(P)
	POPJ	P,
GVUNME: TYPSTR	(ILLACC)
	TYPSTR	(PLSREU)
	JRST	GVUNM1

GCAREC: SNDBYT	(ACTPRT,\B.ACOM,LCAACT,I) ; SEND CODE 50 = LIST CUS. ACCT.
	SNDBYT	(AC,\B.CID,CUSNUM)	; SEND 3 BYTES CUSTOMER NO. TO ACCT.
	SNDBYT	(AC,\B.ASY,ACTSYS)	; SEND 1 BYTE SYS. TYPE TO ACCT.
	PUSHJ	P,AGANS
	POPJ	P,		; NO RECORD FOUND, JUST RETURN
	MOVEI	AC,ACCNAM		; INPUT CUSTOMER NAME
	PUSHJ	P,GTCNFA
	GETBYT	(ACTPRT,\B.DIS)		; INPUT DISTRICT
	JRST	GETCMD
	MOVEM	AC1,ACCDIS
	GETBYT	(AC,\B.CC)		; INPUT COSTCODE & STORE IN ACCCC
	JRST	GETCMD
	MOVEM	AC1,ACCCC
	GETBYT	(AC,\B.DET)		; INPUT DETAIL CODE & STORE IN ACDETC
	JRST	GETCMD
	MOVEM	AC1,ACDETC
	GETBYT	(AC,\B.INV)		; INPUT INVOICE CODE AND STORE IN 
	JRST	GETCMD		; ACINVC
	MOVEM	AC1,ACINVC
	GETBYT	(AC,\B.MIN)		; INPUT MINIMUM CODE AND
	JRST	GETCMD		; STORE IN ACMINC
	MOVEM	AC1,ACMINC
	GETBYT	(AC,\B.SLS)		; INPUT SALESMAN NUMBER
	JRST	GETCMD		; AND STORE IN ACSLS
	MOVEM	AC1,ACSLS
	GETSTR	(AC,L.PO,ACPONM)		; PO NUMBER TO ACPONM
	GETBYT	(AC,\B.POMX)		; POMAX TO ACPOMX
	JRST	GETCMD
	MOVEM	AC1,ACPOMX
	GETBYT	(AC,\B.PODT)		; INPUT PO START DATE AND
	JRST	GETCMD		; STORE IN ACPSDM -> ACPSDM+2
	MOVEM	AC1,ACPSDT
	MOVE	AC,AC1
	MOVEI	AP,ACPSDM
	PUSHJ	P,CNVDT
	GETBYT	(ACTPRT,\B.PODT)		; INPUT PO STOP DATE AND
	JRST	GETCMD		; STORE IN ACPEDM -> ACPEDM+2
	MOVEM	AC1,ACPEDT
	MOVE	AC,AC1
	MOVEI	AP,ACPEDM
	PUSHJ	P,CNVDT
	GETBYT	(ACTPRT,\B.VPRI)		; INPUT VARIABLE PRICING FLAG
	JRST	GETCMD		; AND STORE IN ACVPF
	MOVEM	AC1,ACVPF
	GETBYT	(AC,\B.PRI)		; INPUT DEFAULT PRICING
	JRST	GETCMD		; AND STORE IN ACDEFP
	MOVEM	AC1,ACDEFP
	GETBYT	(AC,\B.FOCF)		; INPUT FLAT FOCUS FEE
	JRST	GETCMD		; AND STORE IN ACFOCF
	MOVEM	AC1,ACFOCF
	GETBYT	(AC,\B.PODT)		; INPUT ANNIVERSARY DATE
	JRST	GETCMD
	MOVE	AC,AC1
	MOVEI	AP,ANNVDM
	PUSHJ	P,CNVDT
	GETSTR	(ACTPRT,L.STRE,ACSTR1)	; GET STREET1
	GETSTR	(AC,L.STRE,ACSTR2)	; GET STREET2
	GETSTR	(AC,L.STRE,ACEXLN)	; GET EXTRA LINE
	GETSTR	(AC,L.CITY,ACCITY)	; GET CITY
	GETSTR	(AC,L.STAT,ACSTAT)	; GET STATE
	GETSTR	(AC,L.ZIP,ACZIP)		; GET ZIP CODE
	GETSTR	(AC,L.CTRY,ACCTRY)	; GET COUNTRY
	GETSTR	(AC,L.ATTN,ACATTN)	; GET ATTENTION LINE
	AOS	0(P)
	POPJ	P,

LCAREC: TRZE	FLG2,V.URC
	JRST	.+3
	MOVE	AC,CUSNUM
	PUSHJ	P,CIDOUT		; OUTPUT CUSTOMER NUMBER
	MOVEI	AC,ACCNAM
	PUSHJ	P,CSNOUT		; OUTPUT CUSTOMER NAME
	PUSHJ	P,DETOUT		; OUTPUT DETAIL CODE
	MOVE	AC,ACSLS
	PUSHJ	P,SLSOUT		; OUTPUT SALESMAN NUMBER
	PUSHJ	P,POOUT		; OUTPUT PO NUMBER
	MOVEI	AC,ACPSDM		; SETUP FOR PO START DATE
	PUSHJ	P,PODOUT		; OUTPUT PO START DATE
	MOVEI	AC,ACPEDM		; SETUP FOR PO STOP DATE
	PUSHJ	P,PODOUT		; OUTPUT PO STOP DATE
	PUSHJ	P,POMOUT		; OUTPUT PO LIMIT
	TYPSTR	([ASCIZ/Mailing Information:/])
	PUSHJ	P,ATNOUT		; OUTPUT ATTENTION LINE
	PUSHJ	P,ADROUT		; OUTPUT MAILING ADDRESS
	MOVE	AC,ACCDIS
	PUSHJ	P,DISOUT		; OUTPUT DISTRICT
	MOVE	AC,ACCCC
	PUSHJ	P,CCOUT		; OUTPUT COSTCODE
	POPJ	P,

DETOUT: TYPSTR	([ASCIZ/Listings:/],777,0,0,N)
	MOVE	AC1,ACDETC	;put detail code # in AC1
	CAILE	AC1,DETLEN	;if det.# <= LEN(DETTAB) use string from table
	JRST	DETOU2		;no such index into table so just type # value
	ADDI	AC1,DETTAB	;setup indexing into det.code table
	MOVEI	AC1,@-1(AC1)	;finish indexing setup
	MOVEM	AC1,NUM	 ;NUM has address of string to use
	TYPSTR	(@NUM,777,1)		; TYPE THE STRING @NUM
	POPJ	P,		;non-skip return...all done
DETOU2:	TYPNUM	(ACDETC,D,1,0,N)
	MOVEI	AC,BLNK
	PUSHJ	P,CHROUT
	MOVEI	AC,"-"
	PUSHJ	P,CHROUT
	TYPSTR	([ASCIZ/ Undefined detail code./])
	POPJ	P,

SLSOUT:	; output the salesman number in ac
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Salesman Number:/],777,0,0,N)
	TYPNUM	(NUM,D,1)
	POPJ	P,

POOUT:	TYPSTR	([ASCIZ/P.O. Number:/],777,0,0,N)
	TYPSTR	(ACPONM,L.PO,1)
	POPJ	P,

POMOUT: TYPSTR	([ASCIZ/P.O. Limit:/],777,0,0,N)
	MOVE	AC1,ACPOMX		;get ready for value test
	JUMPE	AC1,POMOU2		;if AC1/ACPOMX==0 goto POMOU2
	TYPNUM	(ACPOMX,D,1)
	POPJ	P,
POMOU2: TYPSTR	([ASCIZ/None /],777,1)
	POPJ	P,

PODOUT: MOVEM	AC,NUM		;ac/num must contain ACPSDM or ACPEDM
	CAIE	AC,ACPSDM	;if AC=ACPSDM then we're doing start date
	JRST	PODOU1		;skip 'start date' section
	TYPSTR	([ASCIZ/P.O. Start:/],777,0,0,N)
PODOU1: MOVE	AC,NUM		;restore original AC value to AC
	CAIE	AC,ACPEDM	;if AC=ACPEDM we're doing stop date
	JRST	PODOU2		;skip 'stop date' section
	TYPSTR	([ASCIZ/P.O. Stop:/],777,0,0,N)
	MOVEI	AC,40
	PUSHJ	P,CHROUT
PODOU2: MOVE	AC,@NUM	 ;put value of loc. in NUM in AC
	MOVEM	AC,NUM1	 ;move value (= ? date) to NUM1
	TYPNUM	(NUM1,D,1,0,N)
	MOVEI	AC,57	
	PUSHJ	P,CHROUT		; TYPE A SLASH
	AOS	NUM		;add one to NUM so as to reference day of date
	MOVE	AC,@NUM	 ;put value of day in AC
	MOVEM	AC,NUM1	 ;put it in NUM1
	TYPNUM	(NUM1,D,0,0,N)	;type the day subsect. of date
	MOVEI	AC,57
	PUSHJ	P,CHROUT
	AOS	NUM		;add one to NUM so as to reference year of date
	MOVE	AC,@NUM	 ;put value of	year in AC
	MOVEM	AC,NUM1	 ;put value of year in NUM1
	TYPNUM	(NUM1,D)	;type the year value
	POPJ	P,

ATNOUT:	; OUTPUT ATTN LINE
	TYPSTR	([ASCIZ/Attention:/],777,0,0,N)
	TYPSTR	(ACATTN,L.ATTN,1)
	POPJ	P,

ADROUT:	; OUTPUTS ADDRESS
	TYPSTR	(ACSTR1,L.STRE)
	MOVEI	AC,ACSTR2
	MOVEI	AC1,L.STRE
	PUSHJ	P,CNTCHR
	SKIPN	AC1
	JRST	ADROU0
	TYPSTR	(ACSTR2,L.STRE)
ADROU0:	MOVEI	AC,ACEXLN
	MOVEI	AC1,L.STRE
	PUSHJ	P,CNTCHR
	SKIPN	AC1
	JRST	ADROU1
	TYPSTR	(ACEXLN,L.STRE)
ADROU1: MOVEI	AC,ACCITY
	MOVEI	AC1,L.CITY
	PUSHJ	P,CNTCHR
	SKIPG	AC1
	JRST	ADROU2
	TYPSTR	(ACCITY,L.CITY,0,0,N)
ADROU2: MOVE	AC,ACSTAT
	CAMN	AC,[ASCIZ/  /]
	JRST	ADROU3
	MOVEI	AC,","
	PUSHJ	P,CHROUT
	MOVEI	AC,40
	PUSHJ	P,CHROUT
	TYPSTR	(ACSTAT,L.STAT,0,0,N)
ADROU3:	MOVE	AC,ACZIP
	CAMN	AC,[ASCII/     /]
	JRST	ADROU4
	TYPSTR	(ACZIP,L.ZIP,1)
ADROU4: SKIPN	LPOST
	JRST	ADROU5
	TCR	(1)
ADROU5: MOVE	AC,ACCTRY
	CAMN	AC,[ASCII/     /]
	POPJ	P,
	TYPSTR	(ACCTRY,L.CTRY)
	POPJ	P,

GHSTAC:	; GET VALID HOSTS FROM ACCTG FOR MAILNAME
	SETZM	UAHST
	MOVE	AC,[UAHST,,UAHST+1]
	BLT	AC,UAHSTP
	MOVEI	AC,UAHST
	MOVEM	AC,UAHSTP
	MOVE	AC,ACTPRT
GHSTA2: GETBYT	(AC,\B.HST,Y)
	JRST	GETCMD
	CAIN	AC1,377
	JRST	GHSTA3
	MOVEM	AC1,@UAHSTP
	AOS	UAHSTP
	JRST	GHSTA2		; GET NEXT ONE
GHSTA3: MOVE	AC1,UAHSTP
	SUBI	AC1,UAHST
	MOVEM	AC1,UAHSTP
	POPJ	P,

HSTOUT:	; OUTPUT HOSTS USER IS VALID ON
	TYPSTR	([ASCIZ/Hosts:/],777,0,0,N)
	SETZM	UAHSTC
HSTOU2: MOVE	AC1,UAHSTC		; GET COUNT
	CAML	AC1,UAHSTP		; SKIP IF LESS THAN TOTAL
	JRST	HSTOUD
	MOVE	AC1,UAHST(AC1)		; GET THE HOST NUMBER
	MOVEM	AC1,NUM
	MOVE	AC,LPOST		; GET OUR CURRENT POSITION
	TLNE	FLG,U.TOUT
	MOVE	AC,LPOSF
	CAIG	AC,^D65		; SKIP IF WE ARE OUT OF ROOM ON LINE
	JRST	HSTOU3
	TCR	(1)		; TYPE A CARRIAGE RETURN
	MOVEI	AC,7
	PUSHJ	P,TABS
HSTOU3: MOVE	AC,NUM
	CAIN	AC,ALHSTS
	JRST	HSTOU4
	TYPNUM	(NUM,D,1,0,N)		; TYPE THE HOST NUMBER
	JRST	HSTOU5
HSTOU4: TYPSTR	([ASCIZ/All Hosts./],777,1,0,N)
HSTOU5: AOS	UAHSTC		; INCREMENT COUNT
	JRST	HSTOU2		; DO THE REST
HSTOUD: TCR	(1)
	POPJ	P,
 
CNVDT:	; convert yymmdd in ac to three separate numbers
	IDIVI	AC,^D10000	; after: ac/ yy	ac1/ mmdd
	MOVEM	AC,2(AP)
	MOVE	AC,AC1
	IDIVI	AC,^D100	; after: ac/ mm	ac1/ dd
	MOVEM	AC,0(AP)
	MOVEM	AC1,1(AP)
	POPJ	P,

TYPDT:	; OUTPUTS YYMMDD IN AC TO TERMINAL/TOUT IN FORM MM/DD/YY
	MOVEI	AP,TMPMM
	PUSHJ	P,CNVDT
	TYPNUM	(TMPMM,D,1,0,N)
	MOVEI	AC,57		; 57= CHAR "/"
	PUSHJ	P,CHROUT
	TYPNUM	(TMPDD,D,0,0,N)
	MOVEI	AC,57
	PUSHJ	P,CHROUT
	TYPNUM	(TMPYY,D)
	POPJ	P,

ASKCHG:
	TCR	(1)
	GETYR	([ASCIZ "All entries correct? (Y/N):"])
	SKIPA
	POPJ	P,
	TCR	(1)
	JRST	GETCMD

CNFIRM: 
	TCR	(1)
	GETYR	([ASCIZ "All entries correct? (Y/N):"])
	SKIPA
	POPJ	P,
	AOS	(P)
	POPJ	P,

LTT:	; TO OUTPUT TO LIST COMMAND TATALE FILE, ALL LIST COMMANDS
	GETT	(/LIS/)
	POPJ	P,
	PUSHJ	P,STDHDR
	PUSHJ	P,RELTTF
	POPJ	P,

ERDISA: TYPSTR	(ILLACC)
	TYPSTR	([ASCIZ/Username is not in Tymnet district./])
	POPJ	P,

GETIRC:	; INPUT AN IRC
	INSTR	([ASCIZ/IRC Code:/],IRCDSC,4,T)
	MOVEI	AC,IRCDSC
	MOVEI	AC1,4
	PUSHJ	P,CNTCHR
	CAILE	AC1,4
	JRST	GTIRCE
	MOVE	AC,IRCDSC
	AND	AC,MSK(AC1)
	MOVEM	AC,IRCDSC
	PUSHJ	P,FNDIRC		; FIND IRC CODE
	JRST	GTIRCE
	MOVEM	AC1,NMIRC
	POPJ	P,
GTIRCE: TYPSTR	(MVLIRC)
	TCR	(1)
	JRST	GETIRC

FNDIRC:	; FIND AN IRC CODE - RETURN AC1 AND NMIRC/ IRC CODE.
	SETZ	AC1,		; PREPARE INDEX
	MOVEI	AC2,IRCTBL		; GET IRC TABLE LENGTH
	MOVE	AC,IRCDSC		; GET IRC DESCRIPTION
	CAMN	AC,[ASCIZ/N/]
	JRST	FNDIRR
	CAMN	AC,IRCTAB(AC1)		; SKIP IF NOT MATCH
	JRST	FNDIRR			; FOUND, SKIP RETURN
	AOS	AC1		; INCREMENT INDEX
	SOJG	AC2,.-3		; CONTINUE
	SKIPA
FNDIRR:	AOS	(P)
	POPJ	P,

IRCOUT:	; OUTPUT THE IRC IN AC
	JUMPL	AC,IRCOU2
	CAILE	AC,IRCTBL
	JRST	IRCOU2
	MOVE	AC1,AC
	MOVE	AC,IRCTAB(AC1)
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/IRC:/],777,0,0,N)
	TYPSTR	(NUM,4,1)
	POPJ	P,
IRCOU2: MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Undefined IRC code:/],777,0,0,N)
	TYPNUM	(NUM,D,1)
	POPJ	P,

ACPOUT: ; Access Profile Output
	MOVE	AC,NMCOLN
	TLNN	AC,CLN.CD
	JRST	ACPOU1
	TYPSTR	([ASCIZ/Ignore Colon Option./])
	MOVE	AC,NMCOLN
ACPOU1: TLNN	AC,NPS.CD
	JRST	ACPOU2
	TYPSTR	([ASCIZ/No-Password Option./])
ACPOU2: MOVE	AC,NMCPAR
	TLNN	AC,LOS.CD
	JRST	ACPOU3
	TYPSTR	([ASCIZ/Login Over Shut./])
	MOVE	AC,NMCPAR
ACPOU3: TRNE	AC,GTW.CD
	PUSHJ	P,TGWOU1
	PUSHJ	P,CLSOUT		; OUTPUT CLASS INFORMATION
	POPJ	P,

PWLOUT: ; Display minimum password length.
	SKIPN	OLDPWR
	POPJ	P,
	TYPSTR	([ASCIZ"Minimum Password Length:"],777,0,0,N)
	TYPNUM	(PWLEN,D,1)
	POPJ	P,

NAOOUT: ; Display Non-Alpha Option.
	TRNN	FLG2,V.NAO
	POPJ	P,
	TYPSTR	([ASCIZ"Passwords require at least one embbed non-alphabetic character."])
	POPJ	P,
GCREC:	; get a cud record for user in UNMSPC
	SETZM	NMSTRT		; clear entire cud rec area
	MOVE	AC,[NMSTRT,,NMSTRT+1]
	BLT	AC,NMEND-1	; do it
	PUSHJ	P,GETCUD	; build a circuit
	JRST	GETCMD
	SNDBYT	(CUDPRT,\B.CCOM,LUSMUD,I)	; send the command
	PUSHJ	P,SNMCUD	; send the username
	PUSHJ	P,SND40
	PUSHJ	P,NGANS		; get answer
	 PUSHJ	P,ERRCUD	; check for fatal error
	MOVE	AC,NMANS
	CAIE	AC,1
	 POPJ	P,		; we are not going to get a record
	GETBYT	(AC,4)		; get the gan
	JRST	GETCMD
	MOVEM	AC1,NMGAN
	GETBYT	(AC,4)		; get the uun
	JRST	GETCMD
	MOVEM	AC1,NMUUN
	GETBYT	(AC,\B.CPR)	; get cparw
	JRST	GETCMD
	LSH	AC1,^D8		; adjust
	MOVEM	AC1,NMCPAR
	GETBYT	(AC,\B.CLN)	; get colon word
	JRST	GETCMD
	LSH	AC1,^D16	; adjust
	TLZ	AC1,(1B14)	; don't know what this bit is
	MOVEM	AC1,NMCOLN
	GETBYT	(AC,\B.CDST)	; get district
	JRST	GETCMD
	MOVEM	AC1,NMDIST
;	GETBYT	(AC,\B.IRC)	; get irc code
;	JRST	GETCMD
;	MOVEM	AC1,NMIRC
	PUSHJ	P,GCCLS		; get class info
	GETBYT	(AC,\B.PDT)	; cubs format passdate
	JRST	GETCMD
	MOVEM	AC1,NMPDAT
	PUSHJ	P,GET40		; get terminator
        PUSHJ   P,CVPDAT
        AOS     0(P)
        POPJ    P,

CVPDAT: ; Convert an ISIS date to month, day, year
        MOVE    AC,NMPDAT
        MOVEM   AC,ISISDT
        MOVEI   AC,^D1974
	MOVEM	AC,NMPYR
	MOVEI	AC1,^D365
CVPDT1: CAMLE   AC1,ISISDT
	JRST	CVPDT2
        EXCH    AC1,ISISDT
        SUBM    AC1,ISISDT
        AOS     NMPYR
        MOVEI   AC1,^D365
        MOVE    AC,NMPYR
        PUSHJ   P,LYTEST
        AOJ     AC1,
        JRST    CVPDT1
CVPDT2: CAIN    AC1,^D366
        AOS     DAYSTB+1
        SETZ    AC1,
CVPDT3: MOVE    AC,DAYSTB(AC1)
        CAMLE   AC,ISISDT
        JRST    CVPDT4
        EXCH    AC,ISISDT
        SUBM    AC,ISISDT
        AOJA    AC1,CVPDT3
CVPDT4: AOJ     AC1,
        MOVEM   AC1,NMPMON
        MOVE    AC,ISISDT
        AOJ     AC,
        MOVEM   AC,NMPDAY
        MOVEI   AC,^D28
        MOVEM   AC,DAYSTB+1
        POPJ    P,

; Skip return if year is not a leap year.
; AC/ year (4-digit)
LYTEST: PUSH    P,AC1
        PUSH    P,AC
        IDIVI   AC,^D40
        POP     P,AC
        CAIN    AC1,0
        JRST    NOTLYR
        IDIVI   AC,4
        CAIN    AC1,0
        SKIPA
NOTLYR: AOS     -1(P)
        POP     P,AC1
        POPJ    P,
  m: