SUBTTL CIRCUT - circuit routines

GETACC: ; get a circuit to the accounting system
        TRNE    FLG,U.ACT       ; skip if we do not yet have an act circuit
         JRST   GETACD          ; sucessful return
        TYPSTR  ([ASCIZ/Building Circuit to the Val Accounting host./])
        MOVE    AC,ACTBP        ; byte pointer to cud10 login string
        MOVE    AC1,ACTHOS      ; acctg host number
        MOVEI   AC2,ACTSTR      ; login string
        PUSHJ   P,BLDCIR        ; build the circuit
         JRST   GETACE          ; error return
        MOVEM   AC,ACTPRT       ; save the port number
        TRO     FLG,U.ACT       ; set act circuit flag
        HRLZS   AC
        HRRI    AC,.AXO8I       ; set to type cr
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        HRRI    AC,.AXOST       ; set to run updlud
        AUXCAL  AC,PRGAC
        MOVE    AC,ACTPRT
        PUSHJ   P,G1234         ; get answer
         JRST   GETACE
        PUSHJ   P,S1234         ; send response
GETACD: AOS     (P)
        POPJ    P,

GETACE: 
        TRZ     FLG,U.ACT       ; set flag off
        SETZM   ACTPRT          ; zero port cell
        POPJ    P,

GETCUD: ; get a circuit to the cud
        TRNE    FLG,U.CUD               ; skip if we do not yet have a circuit
         JRST   GOTCUD          ; successful return
   ;    TYPSTR  ([ASCIZ/Building Circuit to the CUD host./])
        MOVE    AC,CUDBP        ; byte pointer to login string
        MOVE    AC1,CUDHOS      ; cud host number
        MOVEI   AC2,CUDSTR      ; login string address
        PUSHJ   P,BLDCIR        ; get a circuit
         JRST   GETCUE
        MOVEM   AC,CUDPRT       ; save the port number
        TRO     FLG,U.CUD       ; set cud circuit flag
        HRLZS   AC
        HRRI    AC,.AXO8I       ; set to type cr's
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        HLRZS   AC
        PUSHJ   P,G1234
         JRST   GETCUE
        PUSHJ   P,S1234
GOTCUD: AOS     0(P)            ; skip return
        POPJ    P,
GETCUE: TRZ     FLG,U.CUD       ; set flag off
        SETZM   CUDPRT          ; zero port cell
        POPJ    P,

GETOLD: ; get a circuit to the lud
        PUSHJ   P,GETACC        ; need an acctg circuit first
         JRST   GETOLE          ; reflect error return
        MOVE    AC,LUDNUM       ; get number of host we want
        CAMN    AC,OLDHOS       ; check if we allready have it
         JRST   GETOLY          ; all done, we allready have one
        SKIPE   AC1,OLDPRT      ; skip if no old circuit exists
         ZAPCIR AC1,            ; zap old circuit
        SETZM   OLDPRT          ; set oldprt to zero
        SETZM   OLDHOS          ; set oldhst to zero
        TRZ     FLG,U.OLD       ; reset old lud circuit bit
        CAME    AC,NEWHOS       ; see if we have it as a new host
         JRST   GETOL1          ; no .. continue
        MOVEM   AC,OLDHOS       ; swap it in as old host
        MOVE    AC,NEWPRT
        MOVEM   AC,OLDPRT
        MOVE    AC,NEWASY
        MOVEM   AC,OLDASY
        SETZM   NEWASY
        SETZM   NEWPRT
        SETZM   NEWHOS
        TRZ     FLG,U.NEW
        JRST    GETOLY          ; ta da!
GETOL1: ; oh well, have to do it the hard way
        SNDBYT  (ACTPRT,\B.ACOM,LHAACT,I) ; get ast from acctg
        SNDBYT  (ACTPRT,\B.HST,LUDNUM)
        PUSHJ   P,AGANS
         JRST   GETOE1
        GETBYT  (ACTPRT)
         JRST   GETCMD
        MOVEM   AC1,OLDASY
        TYPSTR  ([ASCIZ/Building Circuit to Lud host :/],777,0,0,N)
        TYPNUM  (LUDNUM,D,1,0,N)
        TYPSTR  ([ASCIZ/./])
        MOVE    AC3,OLDASY      ; get ast for index purposes
        MOVE    AC,@CSBP(AC3)   ; byte pointer to login str
        TLNN    FLG,U.PRV        ; skip if we have c/s
         MOVE   AC,@NCSBP(AC3)  ; replace with non c/s ptr
        MOVE    AC1,LUDNUM
        MOVEI   AC2,@CSPR(AC3)  ; get c/s login string
        TLNN    FLG,U.PRV
         MOVEI  AC2,@NCSPR(AC3) ; replace with non c/s
        PUSHJ   P,BLDCIR        ; get an aux login
         JRST   GETOLE
        MOVEM   AC,OLDPRT       ; save the port
        TRO     FLG,U.OLD       ; flag active old lud circuit
        HRLZS   AC              ; swap port into left half
        HRRI    AC,.AXOST       ; prepare to send asciz string
        AUXCAL  AC,PROJCD       ; with project code (usrval)
        HRRI    AC,.AXO8I       ; do some carriage returns
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        MOVE    AC3,OLDASY      ; get sys type for index
        MOVEI   AC1,@CSLPRG(AC3)        ; get c/s program name
        TLNN    FLG,U.PRV
         MOVEI  AC1,@NCLPRG(AC3)        ; replace with non c/s
        HRRI    AC,.AXOST       ; prepare to send it
        AUXCAL  AC,0(AC1)
        MOVE    AC,LUDNUM
        MOVEM   AC,OLDHOS       ; save the old host number
        MOVE    AC,OLDPRT       ; get the port
        PUSHJ   P,G1234         ; get handshake
         JRST   GETOLE
        PUSHJ   P,S1234         ; respond
GETOLY: ; got an old lud host ok
        TRO     FLG,U.OLD
        AOS     0(P)
        POPJ    P,
GETOE1: ; problem finding host in acctg
        TYPSTR  ([ASCIZ/Error locating host in acctg db./])
GETOLE: ; error getting old lud host
        TRZ     FLG,U.OLD
        SETZM   OLDHOS
        SETZM   OLDPRT
        SETZM   OLDASY
        POPJ    P,
NO940:  ; temp only, until 940 support in
        TYPSTR  ([ASCIZ/Tymcom-9 support not yet implemented./])
        POPJ    P,
GETNEW: ; get a circuit to the lud
        PUSHJ   P,GETACC        ; need an acctg circuit first
         JRST   GETNWE          ; reflect error return
        MOVE    AC,LUDNUM       ; get number of host we want
        CAMN    AC,NEWHOS       ; check if we allready have it
         JRST   GETNWY          ; all done, we allready have one
        SKIPE   AC1,NEWPRT      ; skip if no new circuit exists
         ZAPCIR AC1,            ; zap old circuit
        SETZM   NEWPRT          ; set newprt to zero
        SETZM   NEWHOS          ; set newhst to zero
        TRZ     FLG,U.NEW       ; reset new lud circuit bit
        CAME    AC,OLDHOS       ; see if we have it as a old host
         JRST   GETNW1          ; no .. continue
        MOVEM   AC,NEWHOS       ; swap it in as new host
        MOVE    AC,OLDPRT
        MOVEM   AC,NEWPRT
        MOVE    AC,OLDASY
        MOVEM   AC,NEWASY
        SETZM   OLDASY
        SETZM   OLDPRT
        SETZM   OLDHOS
        TRZ     FLG,U.OLD
        JRST    GETNWY          ; ta da!
GETNW1: ; oh well, have to do it the hard way
        SNDBYT  (ACTPRT,\B.ACOM,LHAACT,I) ; get ast from acctg
        SNDBYT  (ACTPRT,\B.HST,LUDNUM)
        PUSHJ   P,AGANS
         JRST   GETNE1
        GETBYT  (ACTPRT)
         JRST   GETCMD
        MOVEM   AC1,NEWASY
        TYPSTR  ([ASCIZ/Building Circuit to Lud host :/],777,0,0,N)
        TYPNUM  (LUDNUM,D,1,0,N)
        TYPSTR  ([ASCIZ/./])
        MOVE    AC3,NEWASY      ; get ast for index purposes
        MOVE    AC,@CSBP(AC3)   ; byte pointer to login str
        TLNN    FLG,U.PRV        ; skip if we have c/s
         MOVE   AC,@NCSBP(AC3)  ; replace with non c/s ptr
        MOVE    AC1,LUDNUM
        MOVEI   AC2,@CSPR(AC3)  ; get c/s login string
        TLNN    FLG,U.PRV
         MOVEI  AC2,@NCSPR(AC3) ; replace with non c/s
        PUSHJ   P,BLDCIR        ; get an aux login
         JRST   GETNWE
        MOVEM   AC,NEWPRT       ; save the port
        TRO     FLG,U.NEW       ; flag active new lud circuit
        HRLZS   AC              ; swap port into left half
        HRRI    AC,.AXOST       ; prepare to send asciz string
        AUXCAL  AC,PROJCD       ; with project code (usrval)
        HRRI    AC,.AXO8I       ; do some carriage returns
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        AUXCAL  AC,.CR
        MOVE    AC3,NEWASY      ; get sys type for index
        MOVEI   AC1,@CSLPRG(AC3)        ; get c/s program name
        TLNN    FLG,U.PRV
         MOVEI  AC1,@NCLPRG(AC3)        ; replace with non c/s
        HRRI    AC,.AXOST       ; prepare to send it
        AUXCAL  AC,0(AC1)
        MOVE    AC,LUDNUM
        MOVEM   AC,NEWHOS       ; save the new host number
        MOVE    AC,NEWPRT       ; get the port
        PUSHJ   P,G1234         ; get handshake
         JRST   GETNWE
        PUSHJ   P,S1234         ; respond
GETNWY: ; got an new lud host ok
        TRO     FLG,U.NEW
        AOS     0(P)
        POPJ    P,
GETNE1: ; problem finding host in acctg
        TYPSTR  ([ASCIZ/Error locating host in acctg db./])
GETNWE: ; error getting new lud host
        TRZ     FLG,U.NEW
        SETZM   NEWHOS
        SETZM   NEWPRT
        SETZM   NEWASY
        POPJ    P,

BLDCIR: ; bld a circuit, ac/ byte pointer  ac1/ host  ac2/ login address
        MOVEM   AC2,NUM         ; save the string address
        PUSHJ   P,MAKLOG        ; create login string
        MOVE    AC,NUM          ; restore address
        CREAUX  AC,             ; get the circuit
         JRST   BLDCER          ; no go
        AOS     0(P)            ; set to skip return
        POPJ    P,

BLDCER:
        MOVEM   AC,NUM
        HLRZS   AC              ; isolate host errors
        JUMPE   AC,SUPERR       ; it's a sup error
        CAIL    AC,MAXHER       ; max reasonable host error
         JRST   SUPERR          ; it's a sup
        MOVEM   AC,NUM
   ;    TYPSTR  ([ASCIZ/Circuit error - host code:/],777,0,0,N,Y)
  ;     TYPNUM  (NUM,D,1,0,Y,Y)
        POPJ    P,
SUPERR:
        HRRZ    AC,NUM                  ; get sup error code
        CAIE    AC,CXSHU%               ; skip if host unavailable
         JRST   SUPER2                  ; no.. continue
   ;    TYPSTR  ([ASCIZ/Circuit error - system unavailable/],777,0,0,Y,Y)
        POPJ    P,
SUPER2: CAIE    AC,CXSTO%               ; skip if timeout
         JRST   SUPER3                  ; no.. continue
   ;    TYPSTR  ([ASCIZ/Circuit error - timeout/],777,0,0,Y,Y)
        POPJ    P,
SUPER3: CAIE    AC,CXSLQ%               ; skip if queue too long
         JRST   SUPER4
   ;    TYPSTR  ([ASCIZ/Circuit error - queue too long/],777,0,0,Y,Y)
        POPJ    P,
SUPER4: MOVEM   AC,NUM
  ;     TYPSTR  ([ASCIZ/Circuit error - sup code:/],777,0,0,N,Y)
  ;     TYPNUM  (NUM,D,1,0,Y,Y)
        POPJ    P,

MAKLOG: ; make a login string
        PUSHJ   P,BINDEC
        MOVEI   AC1,SEMIC               ; set to put in the semi colon
        IDPB    AC1,AC                  ; do it
        POPJ    P,

G1234:  ; get handshake
        SETZ    AC4,
        SETTIM  AC4,            ; reset timer
         JFCL
        HRLI    AC4,IA.REE      ; for intadr
        HRRI    AC4,TRPVEC
        INTADR  AC4,            ; get ready to set timer interrupt
         POPJ   P,
        MOVE    AC4,[T.SEC,,T.SNM]      ; units and number
        SETTIM  AC4,            ; set the timer
         JFCL
        HRLI    AC4,.IATIM      ; set to enable timer interrupt
        HRRI    AC4,TIM.CH
        INTASS  AC4,            ; set it
         HALT
        MOVEM   P,SAVP0         ; save the current contents of stack pointer
        HRLZI   AC4,(1B0!1B1!1B2)
        INTENB  AC4,            ; enable channel 1
         HALT
        TRO     FLG,U.TMR       ; set timer interrupt flag
G1234B:
        PUSHJ   P,AINCHR        ; get a char in ac1
         JRST   G1234D
        CAIE    AC1,1           ; skip if 1
         JRST   G1234B
        PUSHJ   P,AINCHR        ; get a char
         JRST   G1234D
        CAIE    AC1,2
         JRST   G1234B
        PUSHJ   P,AINCHR
         JRST   G1234D
        CAIE    AC1,3
         JRST   G1234B
        PUSHJ   P,AINCHR
         JRST   G1234D
        CAIE    AC1,4
         JRST   G1234B
        AOS     0(P)
G1234D: HRLZI   AC4,IA.CLR      ; set to disable intadr
        INTADR  AC4,
         HALT
        TRZ     FLG,U.TMR       ; reset flag
        SETZ    AC4,
        SETTIM  AC4,
         JFCL
	HRLI	AC4,IA.REE
	HRRI	AC4,TRPVEC
	INTADR	AC4,
	 HALT
	HRLZI	AC4,(1B0!1B2)		; re-enable channel 2 (escape)
	INTENB	AC4,
	 JFCL
        POPJ    P,

G1234C: ; trap to here on timeout
        MOVE    P,SAVP0                 ; restore stack pointer
        HLRZS   AC                      ; set to zap the port
        ZAPCIR  AC,
        TYPSTR  ([ASCIZ/Circuit error - handshake timeout/],777,0,0,Y,Y)
        MOVEI   AC4,G1234D              ; address to dismiss to
        MOVEM   AC4,TRPVEC
        DISMIS

S1234:  ; respond handshake
        MOVEI   AC1,1           ; starting char
S1234B: CAIL    AC1,5           ; skip if less then 5
         JRST   S1234D          ; done
        PUSHJ   P,AONCHR        ; send the char
        AOJA    AC1,S1234B      ; do the rest
S1234D: MOVEM   AC,NUM
        TCR     (1)
        MOVE    AC,NUM          ; restore port number from num
        POPJ    P,

AINCHR: ; input a char from the aux port in ac, return char in ac1
        HRL     AC2,AC                  ; the port number
        HRRI    AC2,.AXI8C              ; prepare for auxcal
        AUXCAL  AC2,AC1
         JRST   AINCH2
 IFDEF DEBUG, <
        JFCL    >       ; for debug version, chg to ioneou ac1 to see chars
        AOS     0(P)
        POPJ    P,
AINCH2:
        PUSHJ   P,CHKPRT
         POPJ   P,
        JRST    AINCHR

CHKPRT: ; check aux circuits
        HRLI    AC1,-PTBLEN             ; length of port table
        HRRI    AC1,PTABL                ; address
        AUXRED  AC1,                    ; read ports
         JFCL
        TRNN    FLG,U.ACT               ; skip if we should have actg circuit
         JRST   CHKPR2
        MOVEM   AC,SAC                  ; save current port number
        MOVE    AC,ACTPRT               ; get act port number
        PUSHJ   P,CHKPRR                ; try to find it
         JRST   CHKPR2                  ; go check cud port
        TRZ     FLG,U.ACT               ; error return, reset flag
        SETZM   ACTPRT                  ; reset port number
        TYPSTR  ([ASCIZ/Accounting circuit zapped/],777,0,0,Y,Y)
        POPJ    P,
CHKPR2: TRNN    FLG,U.CUD
         JRST   CHKPR3
        MOVE    AC,CUDPRT               ; get cud port number
        PUSHJ   P,CHKPRR
         JRST   CHKPR3
        TRZ     FLG,U.CUD               ; reset cud port flag
        SETZM   CUDPRT                  ; reset port number
   ;    TYPSTR  ([ASCIZ/Cud circuit zapped/],777,0,0,Y,Y)
        TYPSTR  ([ASCIZ/a/],777,0,0,Y)   ; type lower case a
        MOVEI   AC,2
        TYPNUM  (AC,D)                ; type 2 to the terminal
        POPJ    P,
CHKPR3:
        TRNN    FLG,U.OLD       ; skip if we have an old-lud circuit
         JRST   CHKPR4
        MOVE    AC,OLDPRT       ; check it out
        PUSHJ   P,CHKPRR
         JRST   CHKPR4          ; still there
        TRZ     FLG,U.OLD       ; all gone
	TYPSTR	([ASCIZ/Lud host/],777,0,0,N,Y)
	TYPNUM	(OLDHOS,D,1,0,N,Y)
	TYPSTR	([ASCIZ/Circuit Zapped./],777,1,0,Y,Y)
        SETZM   OLDPRT
        SETZM   OLDHOS
        SETZM   OLDASY
        POPJ    P,
CHKPR4:
	TRNN	FLG,U.NEW
	 JRST	CHKPR5
	MOVE	AC,NEWPRT
	PUSHJ	P,CHKPRR
	 JRST	CHKPR5
	TRZ	FLG,U.NEW
	TYPSTR	([ASCIZ/Lud host/],777,0,0,N,Y)
	TYPNUM	(NEWHOS,D,1,0,N,Y)
	TYPSTR	([ASCIZ/Circuit Zapped./],777,1,0,Y,Y)
	SETZM	NEWPRT
	SETZM	NEWHOS
	SETZM	NEWASY
	POPJ	P,
CHKPR5:
        AOS     (P)
        POPJ    P,

CHKPRR: ; try to locate port in ac in table, skip return if not found
        SETZ    AC1,                    ; index
CHKPLP: SKIPGE  PTABL(AC1)
         JRST   CHKRR2                  ; not found
        CAMN    AC,PTABL(AC1)           ; skip if no match found yet
         JRST   CHKRR3                  ; found
        AOJA    AC1,CHKPLP              ; do the rest
CHKRR2: AOS     (P)
CHKRR3: POPJ    P,

AONCHR: ; output a char to aux port in ac, char from ac1
        HRL     AC4,AC                  ; the port number
        HRRI    AC4,.AXO8               ; get ready for auxcal
        AUXCAL  AC4,AC1                 ; do it
        POPJ    P,

G4BYT:  ; input 4 bytes
        MOVEI   AC3,4                   ; # of chars
        JRST    GAUXC                   ; do it
G3BYT:  ; input 3 bytes from the aux circuit, put into ac1
;         ac/ port
        MOVEI   AC3,3                   ; # of chars
        JRST    GAUXC                   ; do it
G2BYT:  ; input 2 bytes from aux circuit
        MOVEI   AC3,2
        JRST    GAUXC
G1BYT:  ; input 1 byte from aux circuit
        MOVEI   AC3,1
GAUXC:  ; input bytes from aux circuit
        SETZ    ACX,                    ; zero result field
GAUXC1:
        PUSHJ   P,GAUX                  ; get a byte
         POPJ   P,                      ; error
        TRZN    FLG,U.C377              ; skip if u.c377 is set
         JRST   GAUXC2                  ; don't bother
        CAIN    AC1,377
         JRST   GAUXD2                  ; terminate
GAUXC2:
        LSH     ACX,^D8                 ; shift previous value
        OR      ACX,AC1                 ; include current byte
        SOJG    AC3,GAUXC1              ; do the rest
GAUXD:
        MOVE    AC1,ACX                 ; move result to ac1
GAUXD2: AOS     0(P)                    ; return
        POPJ    P,

GAUX:   ; input chars from aux circuit, return result in ac1
;         ac/ port    ac2/ # of bytes
        SETZ    AC1,                    ; reset ac1
GAUX2:  PUSHJ   P,AINCHR                ; get a char
         JRST   GAUXE                   ; error
        AOS     (P)
GAUXE:  POPJ    P,

S4BYT:  ; send 4 bytes through aux circuit
        MOVEI   AC3,4                   ; number of bytes
        LSH     AC2,^D4                 ; left justify
        JRST    SAUXC
S3BYT:  ; send 3 bytes through aux circuit
;         ac/ port 
        MOVEI   AC3,3                   ; number of bytes
        LSH     AC2,L.UNM                ; left justify
        JRST    SAUXC
S2BYT:  ; send 2 bytes through aux circuit
        MOVEI   AC3,2                   ; number of bytes
        LSH     AC2,^D20           ; left justify
        JRST    SAUXC
S1BYT:  ; send 1 byte through aux circuit
        MOVEI   AC3,1                   ; number of bytes
        LSH     AC2,^D28                ; left justify
SAUXC:  ; send 1 2 3 or 4 bytes
SAUXC2: SETZ    AC1,            ; reset ac1
        LSHC    AC1,^D8         ; get a char in ac1
        PUSHJ   P,AONCHR        ; send it
        SOJG    AC3,SAUXC2      ; do the rest
        POPJ    P,

AUXSIN: ; input a string from aux circuit
; ac/ port
; ac1/ length
; ac2/ addr
        MOVE    AC3,AC1         ; move length in chars to ac3
        IDIVI   AC3,5           ; convert to words
        SKIPE   AC3+1           ; skip if no remainder
         AOJ    AC3,            ; round up
        MOVE    AC4,AC3         ; move rounded length to ac4
        ADD     AC4,AC2         ; add start addrs to get last word+1
        MOVEI   AC3,1(AC2)      ; prepare to clear area
        HRL     AC3,AC2         ; ac3/ start,,start+1
        SETZM   0(AC2)          ; zero first word
        BLT     AC3,-1(AC4)      ; clear area
        MOVEM   AC1,AUXIC       ; save count
        HRLI    AC2,(POINT 7)   ; make a byte pointer
        MOVEM   AC2,AUXIP       ; save it
AUXSI2: SOSGE   AUXIC           ; skip if we want more
         JRST   AUXSI3
        GETBYT  (AC)            ; get a byte
         JRST   GETCMD
        CAIN    AC1,377         ; skip if not end
         JRST   AUXSI3
        ADDI    AC1,BLNK        ; make ascii
        IDPB    AC1,AUXIP       ; deposit it
        JRST    AUXSI2
AUXSI3: ; end up here if we reach max count or if found a terminator
        POPJ    P,

AUXSOT: ; output a string to aux circuit
; ac/ port
; ac1/ length
; ac2/ addr
        MOVEM   AC1,SNDSCT      ; save the count
        HRLI    AC2,(POINT 7)   ; make a byte pointer
        MOVEM   AC2,SNDSBP      ; save it
AUXSO2: ILDB    AC2,SNDSBP      ; get a char
        SUBI    AC2,40          ; adjust
        SNDBYT  (AC,1,AC2)      ; send a byte
        SOSLE   SNDSCT          ; reduce count skip if none left
         JRST   AUXSO2          ; do next char
        POPJ    P,              ;  or return if done
 x'g