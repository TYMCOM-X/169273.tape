SUBTTL CUDCLS - do cud routines

SNMCUD: ; send username to cud
; uname must be in unmspc, with trailing blanks
        MOVEI   AC,UNMSPC       ; get address
        MOVEI   AC1,L.UNM       ; max size
        PUSHJ   P,CNTCHR        ; find actual size
        MOVEM   AC1,UNMCT       ; put in unmct for now
	MOVEM	AC1,UNMCT3	; for later
        IDIVI   AC1,4           ; find size mod 4
        JUMPE   AC2,SNMCU1      ; no remainder
        EXCH    AC2,UNMCT       ; so that difference will be positive
        SUBM    AC2,UNMCT       ; unmct has the nth char to set high bit on
        AOS     UNMCT           ; at least it does now.
        MOVE    AC1,AC2         ; total size of username in ac1
        IDIVI   AC1,4           ; find size mod 4 again
        MOVEI   AC1,4           ; set to find 4 - (size mod 4)
        SUB     AC1,AC2         ;  do it
        MOVEM   AC1,UNMCT2      ; unmct2 has the number of nulls to send
        JRST    SNMCU2          ; continue
SNMCU1: ; here when size mod 4 is zero
        SETZM   UNMCT2          ; send no nulls
        MOVE    AC2,UNMCT       ; get size of username
        SUBI    AC2,3           ; adjust
        MOVEM   AC2,UNMCT
SNMCU2: MOVE    AC,[POINT 7,UNMSPC]     ; get byte pointer
        MOVEM   AC,UNMBP
SNMC2B: ILDB    AC2,UNMBP       ; get a char
	SOSGE	UNMCT3		; see if any chars left
         JRST   SNMCU4          ; done with username
        SOSN    UNMCT           ; skip if this is not the char to set high bit
         JRST   [TRO AC2,200    ; set it
                 JRST   SNMCU3]
SNMCU3: ; here after setting high bit on char 
        SNDBYT  (CUDPRT)        ; send the char
        JRST    SNMC2B          ; do next char
SNMCU4: ; here when all of username sent, now do blanks
        SOSGE   UNMCT2          ; see if more trailing nulls needed
         JRST   SNMCU5          ;  no.. continue
        SNDBYT  (CUDPRT,1,0,I)  ; send a null
        JRST    SNMCU4          ; do the rest
SNMCU5:
        POPJ    P,              ; return

NNMCUD: ; send new username to cud
; uname must be in nnmspc, with trailing blanks
        MOVEI   AC,NNMSPC       ; get address
        MOVEI   AC1,L.UNM       ; max size
        PUSHJ   P,CNTCHR        ; find actual size
        MOVEM   AC1,UNMCT       ; put in unmct for now
	MOVEM	AC1,UNMCT3	; for later
        IDIVI   AC1,4           ; find size mod 4
        JUMPE   AC2,NNMCU1      ; no remainder
        EXCH    AC2,UNMCT       ; so that difference will be positive
        SUBM    AC2,UNMCT       ; unmct has the nth char to set high bit on
        AOS     UNMCT           ; at least it does now.
        MOVE    AC1,AC2         ; total size of username in ac1
        IDIVI   AC1,4           ; find size mod 4 again
        MOVEI   AC1,4           ; set to find 4 - (size mod 4)
        SUB     AC1,AC2         ;  do it
        MOVEM   AC1,UNMCT2      ; unmct2 has the number of nulls to send
        JRST    NNMCU2          ; continue
NNMCU1: ; here when size mod 4 is zero
        SETZM   UNMCT2          ; send no nulls
        MOVE    AC2,UNMCT       ; get size of username
        SUBI    AC2,3           ; adjust
        MOVEM   AC2,UNMCT
NNMCU2: MOVE    AC,[POINT 7,NNMSPC]     ; get byte pointer
        MOVEM   AC,UNMBP
NNMC2B: ILDB    AC2,UNMBP       ; get a char
	SOSGE	UNMCT3		; see if any chars left
         JRST   NNMCU4          ; done with username
        SOSN    UNMCT           ; skip if this is not the char to set high bit
         JRST   [TRO AC2,200    ; set it
                 JRST   NNMCU3]
NNMCU3: ; here after setting high bit on char 
        SNDBYT  (CUDPRT)        ; send the char
        JRST    NNMC2B          ; do next char
NNMCU4: ; here when all of username sent, now do blanks
        SOSGE   UNMCT2          ; see if more trailing nulls needed
         JRST   NNMCU5          ;  no.. continue
        SNDBYT  (CUDPRT,1,0,I)  ; send a null
        JRST    NNMCU4          ; do the rest
NNMCU5:
        POPJ    P,              ; return

; GETPSW is always input a password from the terminal, regardless
; of any active command file, the prompts and messages are always
; output to the terminal regardless of the noterm flag.
; Each characteris input and passed on to CUD slave, the password
; is never present as a string in our address space.
; If we are reading this from a request file,  then  the password
; cipher, not the password itself, is input from file via innum.

GETPSW: TRNE	FLG,U.RFI		; SKIP IF INPUT NOT FROM REQ. FILE
	JRST	GETPSF			; INPUT IT FROM THE FILE
	TLNE	FLG2,V.NWAC
	JRST	[TRO	FLG2,V.NAO	; Set Non-Alpha Option
		 GETYR	([ASCIZ"Do you want Non-Alpha Option? (Y/N):"])
		 TRZ	FLG2,V.NAO
		 PUSHJ	P,GTPSWL
		 TRNE	FLG2,V.NAO
		 TLO	AC1,(1B17)
		 MOVEM	AC1,NEWPWR
		 HRRZM	AC1,PWLEN
		 JRST	GETPWS]
	PUSHJ	P,RDPSWF
	SKIPN	OLDPWR
	JRST	[MOVEI	AC,PW.MIN
		 MOVEM	AC,PWLEN
		 TRZ	FLG2,V.NAO
		 JRST	GETPWS]
GETPWS: MOVEI	AC,IO.NEC
	SETMOD	AC,			; DISABLE ECHO
	TRNE	FLG2,V.CUP		; Change Password Command?
	JRST	GETNPW			; Yes
	TYPSTR	([ASCIZ"Enter Password:"],777,0,0,N,Y)
	JRST	GETPWC
GETNPW: TYPSTR	([ASCIZ"Enter New Password:"],777,0,0,N,Y)
GETPWC: MOVEI	AC,40
	PUSHJ	P,CHROUT
	PUSHJ	P,PWMSK			; IF HALF DUPLEX TER, MASK FOR PSD
	PUSHJ	P,INPPSW		; GET PASSWORD CIPHER
	MOVEM	AC1,NMPSW		; SAVE PASSWORD CIPHER
	PUSHJ	P,NULLPW		; CHECK IF USER WANTS NULL PASSWORD
	MOVE	AC,NUM			; INPPSW PUTS LENGTHS IN NUM
	CAILE	AC,PW.MAX		; SKIP IF PASSWORD NOT OVER 30 CHARS
	JRST	GETPE1
	CAMGE	AC,PWLEN		; Check for minimum password length
	JRST	GETPE2			; Password too short
	TRZE	FLG2,V.SCL		; SKIP IF NO SEMICOLON IN PASSWORD
	JRST	GETPE3
	JUMPE	AC1,GETPE4		; NOT ALLOW ZERO CIPHER
	CAMN	AC1,CYPUNM		; SKIP IF PASSWORD NOT SAME AS USERNAME
	JRST	GETPE5
	TRNE	FLG2,V.NAO
	JRST	[TLZN	FLG2,V.NPS	; Skip if embedded non-alpha char found
		 JRST	GETPE6
		 JRST	GETPWW]
GETPWW: CAIGE	AC,PW.WMN		; WARNING IF THE PASSWORD CONSISTS OF
	JRST	WRNPSW			; FEWER THAN 7 CHARACTERS
GETPWA: ; GET PASSWORD CIPHER ALL OVER AGAIN, MAKE SURE IT'S THE SAME AS LAST
	TRNN	FLG2,V.CUP
	JRST	GETPWB
	PUSHJ	P,CKOLDP
	JRST	GETPE8
GETPWB: TYPSTR	([ASCIZ/Enter it again:/],777,0,0,N,Y)
	MOVEI	AC,40
	PUSHJ	P,CHROUT
	PUSHJ	P,PWMSK
	PUSHJ	P,INPPSW
	CAME	AC1,NMPSW		; SKIP IF MATCH
	JRST	GETPE7			; TWO PASSWORDS DO NOT MATCH
	SETZ	AC,
	SETMOD	AC,			; RE-ENABLE ECHO
	AOS	0(P)
	POPJ	P,

GETPE1: ; HERE IF PASSWORD IS MORE THAN 30 CHACRACTERS.
	TYPSTR	(MPW2LG,777,0,0,Y,Y)
	JRST	GETPER
GETPE2: ; HERE IF PASSWORD IS SHORTER THAN 3 CHARACTERS.
	TYPSTR	([ASCIZ"Passwords must be a minimum of"],777,0,0,N,Y)
	TYPNUM	(PWLEN,D,1,0,N,Y)
	TYPSTR	([ASCIZ" characters long."],777,0,0,Y,Y)
	JRST	GETPER
GETPE3: ; HERE IF PASSWORD CONTAINS THE SEMICOLON.
	TYPSTR	(MPWCSC,777,0,0,Y,Y)
	JRST	GETPER
GETPE4: ; HERE WHEN PASSWORD CIPHER IS ZERO
	TYPSTR	(MPWZCF,777,0,0,N,Y)
	TYPSTR	([0],1,1,0,N,Y)
	JRST	GETPER
GETPE5: ; HERE WHEN PASSWORD IS SAME AS USERNAME ENTERED.
	TYPSTR	(MPWEUN,777,0,0,Y,Y)
	JRST	GETPER
GETPE6: ; HERE IF PASSWORD NOT CONTAIN ONE OR MORE EMBEDDED NON-ALPHA CHAR
	TYPSTR	(MPMC1A,777,0,0,Y,Y)
	JRST	GETPER
GETPE7: ; HERE WHEN THE TWO ENTERED PASSWORDS DO NOT MATCH.
	TYPSTR	(MNOMAT,777,0,0,N,Y)
	TYPSTR	([0],1,1,0,N,Y)
	JRST	GETPER
GETPE8: ; The new entered password is same as the old password.
	TYPSTR	(MNPSOP,777,0,0,Y,Y)
GETPER: TYPSTR	([ASCIZ/Please try again./],777,0,0,Y,Y)
	TYPSTR	([0],1,0,0,Y,Y)
	JRST	GETPWS
WRNPSW: ; THIS IS WARNING THAT PASSWORDS CONSIST OF FEWER THAN 7 CHARACTERS.
	TLNE	FLG,U.PRV		; SKIP IF CUSTOMER
	JRST	GETPWA			; JUST CONTINUE IF VALIDATORS
	SETZ	AC,
	SETMOD	AC,			; RE-ENABLE ECHO
	TYPSTR	(MWRNPW,777,0,0,Y,Y)
	GETYR	([ASCIZ "Do you want a longer password? (Y/N):"])
	JRST	[MOVEI	AC,IO.NEC	; DISABLE ECHO
		 SETMOD	AC,
		 TYPSTR	([0],1,0,0,Y,Y])
		 JRST	GETPWA]
	TYPSTR	([0],1,0,0,Y,Y])
	JRST	GETPWS
NULLPW: ; CHECK FOR A NULL PASSWORD AND NO PASSWORD OPTION
	SKIPE	NUM
	POPJ	P,
	POP	P,AC			; WASTE ONE STACK VALUE
	SETZ	AC,
	SETMOD	AC,			; RETURN ECHO
	GETYR	([ASCIZ "Do you wish to have the No-Password Option? (Y/N):"])
	JRST	.+4
	MOVE	AC,NMCOLN
	TLO	AC,NPS.CD		; SET NO PASSWORD BIT
	MOVEM	AC,NMCOLN
	MOVEI	AC,7400			; NULL PASSWORD CIPHER
	MOVEM	AC,NMPSW
	AOS	0(P)
	POPJ	P,

GETPSF:	; get password cipher from request file. Set non-alpha seen flag
	INSTR	([ASCIZ/Password Cipher:/],CNVHLD,^D11,T)
	MOVEI	AC,CNVHLD
	PUSHJ	P,CNVO0
	JRST	[SETZM	NMPSW
		 TLO	FLG2,V.RER
		 POPJ	P,]
	MOVEM	AC1,NMPSW
	TLO	FLG2,V.NPS		; SET NON-ALPHA CHAR SEEN FLAG
	AOS	(P)
	POPJ	P,

INPPSW: ; input a password from terminal and return password cipher in AC1.
	TLZ	FLG2,V.NPS!V.NPJ	; reset flags
	TLO	FLG2,V.NPF		; set first char bit
	TRO	FLG2,V.PSW		; set password input flag
	TRZ	FLG2,V.SCL
	SNDBYT	(CUDPRT,\B.CCOM,LPCMUD,I) ; send command
	SETZM	NUM			; zero out the count
INPPS1: INCHWL	AC2			; input a char from cmd port
	CAIN	AC2,.CR			; skip if not a carriage return
	JRST	DINPSW			; done
	CAIL	AC2,LCA			; skip if not lower case
	CAILE	AC2,LCZ
	SKIPA
	SUBI	AC2,BLNK		; case map
	CAIN	AC2,73			; NOT ALLOW SEMICOLON
	TRO	FLG2,V.SCL		; SET FLAG
	TLZE	FLG2,V.NPF		; skip if not first char.
	JRST	INPPSB
	TLZE	FLG2,V.NPJ		; skip if just-seen flag is off.
	TLO	FLG2,V.NPS		; set non-alpha seen flag.
	CAIL	AC2,"A"			; skip if less than char A
	CAILE	AC2,"Z"			; skip if less than or equal to char Z
	TLO	FLG2,V.NPJ		; set non-alpha just seen flag.
INPPSB:	SUBI	AC2,40			; change to 940 ascii.
	SNDBYT	(CUDPRT)		; send it
	AOS	NUM			; increment count
	JRST	INPPS1			; do another
DINPSW: SNDBYT	(CUDPRT,1,.CRCUD,I)	; send 940 cr
	PUSHJ	P,SND40			; send terminator
	GETBYT	(CUDPRT)		; get answer
	JRST	EINPSW
	MOVEM	AC1,NMANS
        CAIN    AC1,CUD.OK
        JRST    INPSW1
        CAIN    AC1,21
        JRST    [SETZ   AC1,
                 JRST   INPSW2]
	SETZ	AC,
	SETMOD	AC,
	INCHRW	AC
	TYPSTR ([0],1,0,0,Y,Y)
	CAILE	AC1,NANLEN
	SETZ	AC1,
	TYPSTR (@NANMSG(AC1),777,0,0,Y,Y)
	PUSHJ  P,GET40
	JRST	GETCMD
INPSW1:	GETBYT	(CUDPRT,\B.CYP)		; get the cipher
	JRST	EINPSW
INPSW2:	MOVEM	AC1,NUM1		; save it
	PUSHJ	P,GET40			; get terminator
	INCHRW	AC			; waste the line feed
	TYPSTR	([0],1,0,0,Y,Y)		; like TCR(1) but with fortty on
	MOVE	AC1,NUM1		; restore cipher to ac1
	POPJ	P,			; skip return
EINPSW: SETZ    AC,
        SETMOD  AC,
        INCHRW  AC
        JRST    GETCMD

PWMSK:	; make mask for half duples terminals.
; this assumes that a half duplex terminal will be a hardcopy device,
; not a crt.  The results if this is a crt is that the original prompt
; will be replaced by spaces.
	TLNN	FLG2,V.HDX	; skip if we are half duplex
	 POPJ	P,		;  or just return.
	MOVEM	LPOST,NUM	; save our last position on the tty line.
; 				  type out garbage chars for masking.
	TYPSTR	([ASCIZ/@#$@#$@#$@#$@#$@#$@#$@#$/],777,0,0,N,Y)
	MOVEI	AC,.CR		; type a carriage return, no line feed.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM		; retrieve last known line position.
	PUSHJ	P,SPACES	; type enough spaces to get to last position.
;				  type more garbage chars
	TYPSTR	([ASCIZ/#*##*##*##*##*##*##*##*#/],777,0,0,N,Y)
	MOVEI	AC,.CR		; type another cr, no line feed.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM
	PUSHJ	P,SPACES	; find last position again.
	TYPSTR	([ASCIZ/OOOOOOOOOOOOOOOOOOOOOOOO/],777,0,0,N,Y)
	MOVEI	AC,.CR		; one more time.
	PUSHJ	P,CHROUT
	MOVE	AC,NUM
	PUSHJ	P,SPACES	; and we're all done.
	POPJ	P,

GCYPUN: ; GET PASSWORD CIPHER FOR STRING IN @NUM2
	MOVEI	AC,@NUM2
	MOVEI	AC1,L.UNM
	PUSHJ	P,CNTCHR
        CAIGE   AC1,3
        JRST    [SETZ   AC1,
                 POPJ   P,]
	MOVEM	AC1,SAC			; SAVE LENGTH
	SNDBYT	(CUDPRT,\B.CCOM,LPCMUD,I)
	MOVE	AC1,SAC			; RESTORE LENGTH
        MOVEI   AC2,@NUM2
	PUSHJ	P,AUXSOT		; SEND IT
	SNDBYT	(CUDPRT,1,.CRCUD,I)	; SEND CR
	PUSHJ	P,SND40			; SEND TERMINATOR
	PUSHJ	P,NGANS			; GET ANSWER
	JFCL
	GETBYT	(CUDPRT,\B.CYP)		; GET CIPHER
	JRST	GETCMD
	MOVEM	AC1,NUM1
	PUSHJ	P,GET40			; GET TERMINATOR
	MOVE	AC1,NUM1		; RESTORE CIPHER TO AC1
	POPJ	P,			; Return


SND40:  ; send a code 40
        SNDBYT  (CUDPRT,1,CUD.TR,I)
        POPJ    P,

NGANS:  GETBYT  (CUDPRT)        ; get a byte
         JRST   GETCMD
        MOVEM   AC1,NMANS       ; save it
        CAIN    AC1,CUD.OK
         AOS    0(P)
        POPJ    P,

GET40:	; Get code 40
	GETBYT	(CUDPRT)
	JRST	GETCMD
	CAIN	AC1,CUD.TR		; Skip if not 40
	POPJ	P,			; Return
	CAIN	AC1,CUD.OK
	MOVEM	AC1,NMANS
	JRST	GET40

ERRCUD: TRZN    FLG2,V.NTE
        PUSHJ   P,NANOUT
        PUSHJ   P,GET40
        POPJ    P,

NANOUT: ; output cud answer message
        MOVE    AC1,NMANS               ; index into nanmsg
        CAILE   AC1,NANLEN              ; don't overflow
         SETZ   AC1,
        TYPSTR  (@NANMSG(AC1))
        POPJ    P,

NANMSG: UDFERR ; 0
MENTRY: [ASCIZ "MUD entry completed."] ; 1
        [ASCIZ "Username not found."] ; 2
        [ASCIZ "Username already exists."] ; 3
        [ASCIZ "CUD file busy."] ; 4
        [ASCIZ "Out of sync."] ; 5
        [ASCIZ "Illegal command."] ; 6
        [ASCIZ "Trouble with change file."] ; 7
        [ASCIZ "Trouble with industry description file."] ; 10
        [ASCIZ "Trouble with industry base file."] ; 11
        [ASCIZ "(12) CUD file busy."] ; 12
        [ASCIZ "Cannot delete last class for a username."] ; 13
        [ASCIZ "Too many classes for this username."] ; 14
        [ASCIZ "Class not found."] ; 15
        [ASCIZ "Class has no home."] ; 16
        [ASCIZ "Bad password entered."] ; 17
        [ASCIZ "Cud block full - Username not allowed."] ; 20
        [ASCIZ "General error (disk error, etc.)"] ; 21
        [ASCIZ "Password does not match."] ; 22
        [ASCIZ "No UUN available."] ; 23
NANLEN==.-NANMSG
