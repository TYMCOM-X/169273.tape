SUBTTL TAT - tattle tale file routines
COMMENT `
 The tattle tale files are written to in order to be able to trace
 activity.  The naming convention is (USEVAL)yymmdd.ext.  The 
 ext component reflects the type of commands traced by this file,
 for example 'run' for the file that is used each time the program
 is run, 'cun' for 'change user network options' type commands.

 Since these files are shared by all users, a file is always opened
 in single user update mode, a complete entry is appended, and the
 file is released.  There is no way to insure that nobody added any
 entries since the last time you released the file.

 The date, which is part of the filename, and the time entries in
 the files, are converted to pacific.  An eastern user making an entry
 at 1:00 am actually writes a 23:00 entry on the previous day's file.
 
 Note if V.LUD bit is on, which means if change user name or cancel user,
 the following routines will be used to write to files LUDUPD.NAM and
 LUDUPD.DEL in the directory VALDEV!
`

GETTTF: ; get tattle tale file for this process.
	MOVE	AC,[.CHREL,,TATCHN]
	CHANIO	AC,		; release channel
	MOVEI	AC,.IODMP	; mode
	MOVEM	AC,TATOPN
	HRLZI	AC,(SIXBIT/DSK/)
	MOVEM	AC,TATOPN+1
	SETZM	AC,TATOPN+2
	MOVE	AC,[.CHOPN,,TATCHN]
	CHANIO	AC,TATOPN	; open a channel.
	 JRST	GETTTF		; try again.
	PUSHJ	P,MAKTTN	; now try to enter the file. (get name).
	MOVE	AC,TATTXE	; get current extention for ttl file
	MOVEM	AC,TATEXT	; move in the extention
	SETZM	TATEXT+1
	MOVE	AC,[DB.DIR]	; get ppn
        TRNN    FLG2,V.LUD            ; skip if for lud updater
         JRST   .+2
        MOVE    AC,[LU.DIR]
	MOVEM	AC,TATDIR	; move in ppn
	SETZM	TATDIR+1
	MOVE	AC,[.CHLK,,TATCHN]	; prepare for lookup.
	TRZ	FLG,U.NTT	; reset new tattle tale file flag.
	CHANIO	AC,TATLK	; lookup the tt file.
	 TRO	FLG,U.NTT	; set new file flag.
	MOVE	AC,[DB.DIR]	; now do again for enter.
        TRNN    FLG2,V.LUD            ; skip if for lud updater
         JRST   .+2
        MOVE    AC,[LU.DIR]
	MOVEM	AC,TATDIR
	MOVE	AC,TATTXE	; get current extention
	MOVEM	AC,TATEXT
	SETZM	TATEXT+1
	SETZM	TATDIR+1
	MOVE	AC,[.CHENT,,TATCHN]
	CHANIO	AC,TATLK	; enter the file (update)
	 JRST	GETTER		; error.
	SETZM	TTBCT
	TRZE	FLG,U.NTT	; skip if not a new file
	 JRST	[PUSHJ	P,NTATB2	; go create a new file page.
	 	 JRST	GETTD4]
	MOVE	AC,TATLK+3	; get size (or ppn)
        TRNN    FLG2,V.LUD            ; skip if for lud updater
         JRST   GETTT1
        CAMN    AC,[LU.DIR]
         JRST   GETTTD
        JRST    GETTT3
GETTT1: CAMN    AC,[DB.DIR]     ; skip if it's size
	 JRST	GETTTD
GETTT3: HLRES   AC              ; isolate size
	JUMPGE	AC,[IDIVI AC,4	; size is in blocks, divide by 4 for pages.
		    JRST GETTT2]
	IDIVI	AC,1000		; divide by page size.
	SETCA	AC,		; make positive
	AOJ	AC,
	SKIPE	AC1		; skip if remainder is zero.
	 AOJ	AC,		; next page.
GETTT2:	; map existing file pages.
	MOVEM	AC,TTFPGM	; file page number to map.
	PUSHJ	P,FPG2MP	; find first free address space page to map to.
	HRLI	AC,(3B7!1B17)	; put in page count and protection bits.
	MOVEM	AC,TTFPAG	; move to virtual page word.
	MOVE	AC,[.CHMFP,,TATCHN]	; prepare for the mapping.
	CHANIO	AC,TTFPAG	; map the file page.
	 PUSHJ	P,TATPGE	; error  return.
GETTTD:
	PUSHJ	P,NTATB3	; make a byte ptr and counter for file page.
GETTD2:	SOSG	TATCNT		; skip if bytes left.
	 JRST	GETTD4
	MOVE	AC1,TATBP	; get byte pointer to ac1
	ILDB	AC,AC1		; get a byte.
	JUMPE	AC,GETTD3	; skip if a null.
	MOVEM	AC1,TATBP	; replace byte pointer.
	JRST	GETTD2		; get another byte.
GETTD3:	AOS	TATCNT		; add one to count, last char not used.
GETTD4: TRNE    FLG2,V.F99            ; skip if not write 99 file
         JRST   GETTDN
        TRNE    FLG2,V.LUD            ; skip if not lud updater
         JRST   GETTDN
        TTFSTR	([ASCIZ/**************/],777,N) ; output separator and hdr.
        MOVE	AC,DATUBL+1
        IDIVI   AC,^D3600	; convert to minutes
        IDIVI   AC,^D60		; convert to hours and minutes
        MOVEM   AC1,NUM1
        MOVEM   AC,NUM2
        TTFNUM  (NUM2,D,N,Y)
        TTFSTR  ([ASCIZ/:/],777,N,Y)
        TTFNUM  (NUM1,D)
GETTDN: AOS     0(P)
	POPJ	P,
GETTER:	; error opening tattle tale file for output. check for file busy.
	HRRZ	AC,TATEXT	; get error codes
	CAIN	AC,.ERFBM	; skip if not file busy
	 JRST	GETTR1
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Error opening TTF - error = /],777,0,0,N,Y)
	TYPNUM	(NUM,O,1,0,Y,Y)
	JRST	CMDQUI
GETTR1:
	MOVE	AC,[.CHREL,,TATCHN]
	CHANIO	AC,
	MOVE	AC,TTBCT	; get busy count
	CAIE	AC,3
	 JRST	GETTR2
	TYPSTR ([ASCIZ/TT file busy./])
GETTR2:	CAIN	AC,^D1000
	 JRST	GETTR3
	AOS	TTBCT
	JRST	GETTTF
GETTR3:	SETZM	TTBCT
	JRST	GETTTF

MAKTTN:	; create tattle tale file name
        TRNE    FLG2,V.LUD            ; skip if not lud updater
         JRST   MAKTT1
	TIMER	AC,		; get current time.
	MOVEM	AC,DATUBL+1	; move to datuuo block.
	DATE	AC,		; get date.
	MOVEM	AC,DATUBL	; move to block.
	HRLZ	AC,MY.TZ	; date and time is in my current time zone.
	HRRI	AC,10!40	; convert date and time to pdt.
	MOVEM	AC,DATUBL+2
	MOVEI	AC,DATUBL
	DATUUO	AC,		; do conversion.
	 JFCL
	MOVE	AC,DATUBL
	IDIVI	AC,^D31		; isolate day-1
	AOJ	AC1,		; isolate day
	MOVEM	AC1,AC2
	IDIVI	AC,^D12		; isolate month-1
	AOJ	AC1,
	IMULI	AC1,^D100	; left shift 2 decimal places
	ADDM	AC1,AC2
	ADDI	AC,^D64		; adjust year
	IMULI	AC,^D10000	; left shift into place
	ADDM	AC,AC2		; and add it to the rest
	MOVE	AC,AC2		; move to ac
	MOVEI	AC4,^D10	; for decimal conversion
	TRO	FLG,U.SIX	; set sixbit flag
	PUSHJ	P,NUMOUT	; convert to ascii
	TRZ	FLG,U.SIX	; reset sixbit flag
	MOVE	AC,NUMSP	; get the filename into ac
	MOVEM	AC,TATNM	; move to the correct location.
	POPJ	P,
MAKTT1: MOVE    AC,VALSP        ; define filename LUDUPD
        MOVEM   AC,TATNM
        POPJ    P,

GTODAY:	; create today's date in yymmdd format
	DATE	AC,		; get date.
	IDIVI	AC,^D31		; isolate day-1
	AOJ	AC1,		; isolate day
	MOVEM	AC1,AC2
	IDIVI	AC,^D12		; isolate month-1
	AOJ	AC1,
	IMULI	AC1,^D100	; left shift 2 decimal places
	ADDM	AC1,AC2
	ADDI	AC,^D64		; adjust year
	IMULI	AC,^D10000	; left shift into place
	ADDM	AC,AC2		; and add it to the rest
	MOVE	AC,AC2		; move to ac
        POPJ    P,

RELTTF:	; here to release tattle tale file
        TRNE    FLG2,V.F99            ; skip if not write 99 file
         JRST   RLETT1
        TRNE    FLG2,V.LUD            ; skip if not lud updater
         JRST   RLETT1
	TLO	FLG,U.CRLF
	PUSHJ	P,TTFCR		; output a crlf for luck.
RLETT1: MOVE    AC,TATCNT
	CAIL	AC,TATBYT	; skip if anything written on this page.
	 JRST	RELTT2		; no, just release the channel.
	HRRZ	AC,TTFPAG	; prepare to vclear last pages.
	JUMPE	AC,RELTT2
	HRLI	AC,1
	VCLEAR	AC,		; clear last pages.
	 PUSHJ	P,TATPGE
RELTT2:	MOVE	AC,[.CHREL,,TATCHN]
	CHANIO	AC,		; release the channel.
	POPJ	P,

TTFOUT:	; here to output a string to tattle tale file
	MOVEM	AC,SAC		; save string address
	PUSHJ	P,CNTCHR	; count chars.
        TRNE    FLG2,V.LUD      ; skip if not for lud updater
         PUSHJ  P,SNDCHK
TTFOU0: TRZ     FLG2,V.POCT
	MOVE	AC2,SAC		; retrieve address
	HRLI	AC2,(POINT 7)	; make into a byte pointer
TTFOU1:
	ILDB	AC,AC2		; get a char
	PUSHJ	P,CHRTTF	; output a char
	SOJG	AC1,TTFOU1	; do the rest
	TRZE	FLG,U.SBL	; skip if no suppress space
	 JRST	TTFOU2
	MOVEI	AC,BLNK		; follow with a space.
	PUSHJ	P,CHRTTF	; output it.
TTFOU2:	PUSHJ	P,TTFCR		; possible crlf.
	POPJ	P,

CHRTTF:	; output a char to tattle tale file
	SOSG	TATCNT
	 PUSHJ	P,NTATBU	; get a new page
	IDPB	AC,TATBP
	POPJ	P,

NTATBU:	PUSH	P,AC		; save ac ac1 and ac2
	PUSH	P,AC1
	PUSH	P,AC2
	PUSHJ	P,NTATBF	; go do it.
	POP	P,AC2		; restore acs.
	POP	P,AC1
	POP	P,AC
	POPJ    P,

NTATBF:	
	HRRZ	AC,TTFPAG		; get virtual page number.
	JUMPE	AC,NTATB2		; jump to ntatb2 if no old page exists.
	HRLI	AC,1			; count.
	VCLEAR	AC,			; clear old page.
	 PUSHJ	P,TATPGE		; error.
	SETZM	TTFPAG			; clear page number word.
NTATB2:	
	MOVE	AC,[.CHCFP,,TATCHN]	; prepare to create a new page
	SETOM	TTFPGM			; at the end of the file.
	CHANIO	AC,TTFPGM		; do it.
	 PUSHJ	P,TATPGE		; error.
	PUSHJ	P,FPG2MP		; f first free even page.
	HRLI	AC,(3B7!1B17)		; put in count and protection.
	MOVEM	AC,TTFPAG		; prepare for chanio.
	MOVE	AC,[.CHMFP,,TATCHN]
	CHANIO	AC,TTFPAG		; map new pages.
	 JRST	TATERR
NTATB3:	MOVEI	AC3,TATBYT		; number of bytes in a page.
	MOVEM	AC3,TATCNT		; refresh tatcnt.
	HRLZI	AC3,(POINT 7)		; make a byte pointer.
	HRRZ	AC,TTFPAG
	IMULI	AC,1000
	IOR	AC3,AC
	MOVEM	AC3,TATBP		; store byte pointer.
	POPJ	P,			; and return.

TATERR:	; tattle tale file output error routine
	MOVE	AC3,[.CHGS,,TATCHN]
	CHANIO	AC3,SAC
	TYPSTR	([ASCIZ/Error during TT output- status word :/],777,0,0,N)
	TYPNUM	(SAC,O,1)	; type file status word
	TYPSTR	([ASCIZ/Please report error to software support./])
	POPJ	P,

TATPGE:	; paging error
	MOVEM	AC,NUM
	TYPSTR	([ASCIZ/Paging error during TT output- code :/],777,0,0,N)
	TYPNUM	(NUM,O,1)
	TYPSTR	([ASCIZ/Please report error to software support./])
	POPJ	P,

TTFCR:	TLZN	FLG,U.CRLF	; output a crlf to tat file
	 JRST	TTFCR2
TTFCR1: MOVEI   AC,.CR
	PUSHJ	P,CHRTTF
	MOVEI	AC,.LF
	PUSHJ	P,CHRTTF
TTFCR2:	POPJ	P,

DECTTF: ; output decimal number to tattle tale file
        MOVEI   AC4,^D10		; set up for decimal conv.
        PUSHJ   P,NUMOUT		; convert to ascii.
        TTFSTR  (NUMSP,NUMSPL,N)	; output, crlf may be preset.
        MOVE    AC,NUM			; restore num.
        POPJ    P,

OCTTTF: ; output octal number to tattle tale file
        MOVEI   AC4,^D8			; prepare for octal conversion.
        TRO     FLG2,V.POCT           ; for calling TTFOUT
        PUSHJ   P,NUMOUT
        TTFSTR  (NUMSP,NUMSPL,N)
        MOVE    AC,NUM
        POPJ    P,			; return.

FPG2MP:	HRRZ	AC,.JBFF	; get address of highes lowseg occupied.
	IDIVI	AC,2000		; divide by pagesize * 2.
	SKIPE	AC+1		; skip if no remainder.
	 AOJ	AC,		; add one to quotient.
	IMULI	AC,2		; mul by 2 and get adrs of 1st free even page.
	POPJ	P,
 
SNDCHK:
        TRNE    FLG2,V.POCT           ; for printing oct number?
         POPJ   P,                    ; yes
        MOVEI   AC1,14                ; print 12 bytes buffer
        POPJ    P,
 