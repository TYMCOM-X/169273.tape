SUBTTL STARTUP - initializing section
STPT:   TDZA    AC,AC           ; zero ac and skip if we start here
         SETO   AC,             ; set ac to -1 if we start here
        RESET
        MOVE    P,PDLP          ; get stack pointer
        SETZB   FLG,FLG2        ; reset all flags
        TLO     FLG,U.UPD       ; and set up to allow updates
        SKIPE   AC              ; skip if we started at STPT
         TLO    FLG2,V.OFS      ; set offset flag
        HRROI   AC,.GTLOG       ; set to get port info word
        GETTAB  AC,
         SETZ   AC,
        TLNN    AC,(LG.TID)     ; skip if this is not an aux circuit
         BOMB   (ERR.NX)
	SETO	AC,
	GETLCH	AC		; get our line characteristics word
	TLNE	AC,(LC.HDX)	; skip if not half duplex
	 TLO	FLG2,V.HDX	; set our hdx flag
	TLNE	FLG2,V.HDX
	 JRST	STPT2
        MOVEI   AC,1            ; set up to enter deferred echo mode
        MOVEM   AC,OLDDEF
        HRROI   AC,.AXEDE       ; prepare for def echo mode auxcal
        AUXCAL  AC,OLDDEF       ; do it.
STPT2:	MOVE    AC,[.CNSYS,,.GTCNF]
        GETTAB  AC,             ; get this system number
         SETZ   AC,
IFNDEF TEST, <
        CAIE    AC,RUNHOS       ; skip if it's the right system
         BOMB   (ERR.HO)
>
        HRROI   AC,.GTPRV       ; ready to get frame priv word
        GETTAB  AC,
         SETZ   AC,
	LDB	AC1,[POINT 6,AC,7] ; time zone
	MOVEM	AC1,MY.TZ	; save time zone
      ; TRNE    AC,JP.TYM       ; skip if not tymshare
      ; TLO    FLG,U.TYM        ; set tymshare flag
        TRNE    AC,JP.ASV       ; skip if not acct sup
         TLO    FLG,U.ASV       ; set acct sup bit in flg
        LDB     AC,[POINT 2,AC,28] ; isolate monitor mode bits
        MOVEI   AC1,ESC         ; move esc char code to ac1
        CAIN    AC,.JPMPD       ; skip if we're not in pdp mode
         MOVEI  AC1,CTRLC       ; move control c char code to ac1
        CAIN    AC,.JPMSU       ; skip if we're not in suds mode
         MOVEI  AC1,CTRLC
        MOVEM   AC1,ESCCHR      ; set escape character
        HRROI   AC,.GTLIC       ; set to get license word
        GETTAB  AC,
         SETZ   AC,
        MOVEM   AC,SAVLIC       ; save for later
        TRNE    AC,(LC.WC)      ; skip if no wc frame license
         TLO    FLG,U.WC        ; set write core flag
        TLNN    AC,(LC.AC)      ; skip if ac process license ok
         BOMB   (ERR.AC)        ; fatal - tell him so and exit
        TLNN    AC,(LC.WF)      ; skip if wf process license ok
         BOMB   (ERR.WF)
        PUSHJ   P,DISGET        ; go get our district number
        SKIPGE  AC              ; district should be ge 0
         BOMB   (ERR.DI)        ; error getting district
        MOVEM   AC,MY.DIS       ; save our district
        HRROI   AC,.GTUNM       ; set to get first half of username
        GETTAB  AC,
         SETZ   AC,
        MOVEM   AC,SIXUNM       ; save it
        CAMN    AC,[SIXBIT/SBILL1/] ; skip if not service billing (SBILL1)
         TLO    FLG,U.DIS       ; treat SBILL1 as district users
        ;  CAMN    AC,[SIXBIT/SBILL1/] ; skip if not service billing (SBILL1)
         ;  TLO    FLG,U.SB1       ; U.SB1 will allow cha. cus. invoice comm.
        CAMN    AC,[SIXBIT/INTACT/] ; skip if not international (INTACT)
         TLO    FLG,U.DIS       ; treat INTACT as district users
        CAMN    AC,[SIXBIT/FUJIMO/] ; skip if not FUJIMOTO (marketing mgr.)
         TLO    FLG,U.DIS       ; treat FUFIMOTO as district users
        CAMN    AC,[SIXBIT/PSDMGR/] ; skip if not PSDMGR#
         TLO    FLG,U.DIS       ; treat PSDMGR#  as district users
        TRZ     AC,7777         ; mask off fifth and sixth chars
        CAMN    AC,[SIXBIT/DIST/] ; skip if not district name
         TLO    FLG,U.DIS       ; set district name bit in flg
        CAMN    AC,[SIXBIT/CUST/] ; skip if not district name
         TLO    FLG,U.CUS       ; set customer name bit in flg
        HRROI   AC,.GTUN1       ; set to get second half of username
        GETTAB  AC,
         SETZ   AC,
        MOVEM   AC,SIXUNM+1     ; save it
        PUSHJ   P,UNSA          ; translate sixbit username to ascii
        HRROI   AC,.GTAUN       ; set to get aun
        GETTAB  AC,
         SETZ   AC,
	CAMN	AC,[NET.AUN]	; is this TYMRES?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[ES1.AUN]	; is this TYMRES1?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[ES2.AUN]	; is this TYMRES2?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[ES3.AUN]	; is this TYMRES3?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[ES4.AUN]	; is this TYMRES4?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[ES5.AUN]	; is this TYMRES5?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[NT1.AUN]	; is this HQTECH1?
	 TLO	FLG,U.NET	; set network flag
	CAMN	AC,[SRA.AUN]	; is this SRA?
	 TLO	FLG,U.SRA	; set sra flag
        CAMN    AC,[FDM.AUN]    ; is this FDM of St. Louis?
         TLO    FLG,U.AP        ; set acct. control lic
        CAMN    AC,[ACT.AUN]    ; is this ACCNTRL?
         TLO    FLG,U.AP        ; set acct. control lic
        HLRZM   AC,MY.GAN       ; save gan
        HRRZM   AC,MY.UUN       ; save uun
        TLNE    FLG,U.NET       ; skip if we are not tymnet users
         JRST   NOLPS           ; bypass getting status password
        TLNE    FLG,U.AP
         JRST   NOLPS
GLPS:   PUSHJ   P,GETLIC        ; go get name and password
        CAMN    AC,MONE         ; -1 indicates an error return
         JRST   GLPS
  ;     TLNN    AC,(LC.AP)      ; skip if user has a/p lic
  ;      JRST   NOTAP           ; go check other lic (c/s)
  ;     MOVE    AC1,MY.DIS      ; get our dist.
  ;     CAIN    AC1,FIN.DI      ; skip if we're not finance district
  ;      TLO    FLG,U.AP        ; set finance bit
NOTAP:  TLNN    AC,(LC.CS)      ; skip if user has cs lic
         JRST   NOTCS           ; check for other licenses
        TLO     FLG,U.CS        ; set c/s bit in flg 
        JRST    NOLPS           ; skip over check for other lic.
NOTCS:  TLNN    AC,(LC.VL)      ; skip if user has validator lic
         BOMB   (ERR.LI)        ; he doesn't have minimum lic.
NOLPS:  ; status name and password checking should terminate here
        TLNE    FLG,U.AP
         TLZ    FLG,U.CS        ; don't give the privilege to acctg.
        TLNE    FLG,U.PRV
         TLO    FLG,U.IMM       ; priv users default to immediate mode
        PUSHJ   P,GETPJ         ; check (pj)jobs.dat
         BOMB   (ERR.PJ)
	PUSHJ	P,PASGRD
        DATE    AC,             ; get dec format date
        IDIVI   AC,^D372        ; isolate year
        ADDI    AC,^D64         ; correct
        IDIVI   AC,^D10         ; separate digits
        IMULI   AC,^D10         ; form the decade portion
        MOVEM   AC,DECADE       ; int (year/10) * 10
        MOVEM   AC1,LYDIG       ; year mod 10
        SETZB   LPOST,LPOSF     ; initialize position counters
        SETZ    IF.P,           ; initialize input file index
  IFDEF DEBUG, <
        MOVE    AC,[.CHOPN,,TOUCHN]     ; set to start a tout file
        CHANIO  AC,TOUBLK               ; open the channel
         BOMB   (ERR.FI)
        MOVE    AC,[.CHENT,,TOUCHN]     ; set to do enter
        CHANIO  AC,TOULK
         BOMB   (ERR.FI)
        TLO     FLG,U.TOUT              ; set tout flag >
        HRLI    AC,.CHOPN               ; set to open terminal input
        HRR     AC,INCHN(IF.P)          ; get the channel number
        CHANIO  AC,INDBL1               ; open it
         BOMB   (ERR.FI)
; now get (db.dir)usrval.com and execute it (msgs and possible shut)
; if this is debug version, don't do it unless we started with offset.
 IFDEF DEBUG, <
        TLNN    FLG2,V.OFS              ; skip if started with offset
         JRST   NOCOM >
        AOJ     IF.P,                   ; increment channel index
        HRR     AC,INCHN(IF.P)          ; get channel number
        HRLI    AC,.CHOPN               ; open channel
        CHANIO  AC,INDBL2
         BOMB   (ERR.FI)
        HRLI    AC,.CHLK                ; look it up
        CHANIO  AC,INLK2
         JRST   [SOJ   IF.P,
                 JRST   NOCOM]
        TLO     FLG,U.IND		; set indirect flag
	TLO	FLG2,V.INI		; set init file flag
NOCOM:
        TCR     (5)
        TYPSTR  ([ASCIZ /User Validation System - ver/],777,0,0,N)
        TYPNUM  ([REL],D,1,0,N)
        TYPSTR  ([ASCIZ /./],1,0,0,N)
        TYPNUM  ([VER],D)
 IFDEF DEBUG, <
        TYPSTR ([ASCIZ /* Debug Version. */],777,7) >
 IFDEF TEST, <
        TYPSTR  ([ASCIZ /* Test Version.  */],777,7) >
        TCR     (2)
        HRROI   AC,.GTSTS       ; set to get frame status word
        GETTAB  AC,             ; get it
         SETZ   AC,
        TRO     AC,JB.JA2       ; set jacc2 bit
;IFNDEF DEBUG, <
;XSJL1:  SETJAL  AC,  >          ;  in frame status word
         JFCL
	HRLI	AC4,IA.REE
	HRRI	AC4,TRPVEC
	INTADR	AC4,
	 HALT
	HRLZI	AC4,.IAESC
	LSH	AC4,^D9
	TLO	AC4,2
	HLLOS	AC4
	TINASS	AC4,
	 HALT
	HRLZI	AC4,(1B0!1B2)
	INTENB	AC4,
	 HALT
    ;   TLNN    FLG,U.CUS       ; skip if customer user
    ;    JRST   STNOCU          ; no.. continue
        JRST    STNOCU
                                ; customer only
    ; the following 14 lines will not be used since program either 
    ; branched to STNOCU  or  STCUST
        PUSHJ   P,GETACC        ; get accounting circuit
         BOMB   (ERR.CI)
        SNDBYT  (ACTPRT,\B.ACOM,LCN2CT,I)
        SNDBYT  (AC,\B.UUN,MY.UUN)
        GETBYT
         BOMB   (ERR.CI)
        CAIE    AC1,ACT.OK
         BOMB   (ERR.CI)
        GETBYT  (AC,\B.CID)
         BOMB   (ERR.CI)
        MOVEM   AC1,MY.CID
  IFDEF DEBUG, <
        TYPSTR  ([ASCIZ/Your cid is :/],777,0,0,N)
        TYPNUM  (MY.CID,D,1)  >
STNOCU:                                 ; here if not a customer user
        TCR     (1)
        TLO     FLG,U.EOL
	GETT	(/RUN/)
	 JRST	STNOC2
	PUSHJ	P,STDHDR
	PUSHJ	P,RELTTF
STNOC2:	JRST    GETCM1          ; transfer to command dispatcher
SUBTTL CMDPAR - command dispatcher

 DEFINE CMS1 <
        X CHANG,3,CMDCHG,-1,-1                  ; change command
        X QUIT,1,CMDQUI,-1,-1     ; quit
   IFDEF DEBUG, <
	X NREQF,5,CMDNRF,U.WC,-1  ; new request file command >
	X MOVE,1,CMDMOV,U.PRV,-1  ; move command
        X REMOV,3,CMDRMV,U.PRV!U.DIS,-1   ; remove command
        X LIST,1,CMDLIS,-1,-1     ; list command
        X TOUT,2,CMDTOU,-1,-1     ; tout command
        X COMMA,2,CMDCOM,-1,-1    ; commands command
        X !,1,CMDREM,-1,-1        ; remark command
        X NOTER,2,CMDNOT,U.IND,U.TOUT ; noterm command
        X CHECK,3,CMDCHK,-1,-1    ; check command
        X NOUPD,5,CMDROM,U.IND,-1 ; enter read only mode
        X IMMED,1,CMDIMM,U.PRV,-1  ; enter immediate mode execution
	X NEW,3,CMDNEW,U.NET!U.PRV!U.DIS!U.CUS!U.AP,U.IMM!U.UPD  ; new cmd
	X ADD,2,CMDADD,U.NET!U.PRV!U.DIS!U.CUS,U.IMM!U.UPD ; add cmd
	X DELET,2,CMDDEL,U.NET!U.PRV,-1    ; delete user netclass
	X TYPE,2,CMDTYP,U.IMM!U.AP,-1         ; type request
	X APPRO,2,CMDAPP,U.SRA!U.WC,U.IMM  ; approve by sra
        X REVIE,3,CMDREV,U.WC!U.AP,-1        ; review requests by julian/jan
	X EXAMI,1,CMDEXM,U.IMM,-1	; examine requests
	X PROCE,1,CMDPRO,U.IMM,-1	; process requests
	X HOLD,1,CMDHOL,U.IMM,-1	; hold
	X UNHOL,3,CMDUNH,U.IMM,-1	; unhold
	X ANSWE,2,CMDANS,U.IMM,-1	; answer request
	X ASK,2,CMDASK,-1,-1		; ask about request
	X SCAN,2,CMDSCN,-1,-1		; scan request file for my requests
	X NEEDS,3,CMDNEE,U.PRV!U.AP,-1  ; scan
	X CANCE,3,CMDCNC,U.PRV!U.DIS!U.AP!U.NET,-1     ; cancel command
	X UNLOC,3,CMDUNL,U.PRV!U.AP,U.AP!U.IMM!U.UPD	; unlock a locked req.
        X CHGDI,3,CMDPSD,U.WC,-1                ; process change cus. district
        X SET,2,CMDSET,U.PRV!U.NET,-1           ; set command
        X UNSET,3,CMDUNS,U.PRV!U.NET,-1         ; unset
        X GET,1,CMDGET,U.WC,-1                  ; get cid
        X REVER,3,CMDRSE,U.WC,-1                ; reverse new name in the cud
        X OCTAL,1,OCTREP,U.WC,-1                ; display octal representation
 >
 DEFINE X (A,B,C,D,E) <
        ASCII /A/
 >
CM1TAB: CMS1                    ; level 1 commands
CM1LEN==.-CM1TAB                ; size of level 1 commands table

 DEFINE X (A,B,C,D,E) <
        EXP     B
 >

CM1MIN: CMS1

 DEFINE X (A,B,C,D,E) <
        EXP     C
 >

CM1ADR: CMS1

 DEFINE X (A,B,C,D,E) <
        XWD     D,E
>
CM1FLG: CMS1

GETCMD: ; command dispatcher routine
        SETZM   NUMLEN
	SETZM	REQNUM
	SETZM	REQCOM
        TRZE    FLG,U.OKAY      ; skip if last command did not complete ok
         JRST   GETCM1          ;  continue
        TLNN    FLG,U.IND       ; skip if doing input fro indirect file
         JRST   GETCM1          ; if no ind file, it dosn't matter
	TLNE	FLG2,V.INI	; skip if not coming from init file
	 BOMB	(ERR.IN)
        TLZ     FLG,U.IND!U.NOTY; reset indfile bit
        SETZ    IF.P,           ; back to base device
        TLZ     FLG,U.EOL
        MOVE    AC,SAVFLG
        TLNE    AC,U.EOL
         TLO    FLG,U.EOL
        TYPSTR  ([ASCIZ/Input from indirect or com file terminated./])
        TCR     (1)
GETCM1:
	TRZ	FLG,U.RFI	; reset request input
	TLZ	FLG2,V.QUO!V.EXC!V.LSQ!V.EXQ!V.PRQ
	PUSHJ	P,CLRREQ
        MOVE    P,PDLP          ; reset stack pointer
        PUSHJ   P,WASLIN                ; eat up any remaining chars in line
        INSTR   ([ASCIZ /*/],STRSP,5,T)
        MOVEI   AC,STRSP
        MOVEI   AC1,5
        PUSHJ   P,CNTCHR
        JUMPE   AC1,GETCM1              ; no input
        MOVE    AC4,MSK(AC1)            ; get correct mask
        SETZ    AC2,                    ; prepare index
CM1LP:  HLLZ    AC,CM1FLG(AC2)
        TDNN    FLG,AC
         JRST   CM1LP1
        HRLZ    AC,CM1FLG(AC2)
        TDNN    FLG,AC
         JRST   CM1LP1
        MOVE    AC,CM1MIN(AC2)          ; get minimum char
        CAMGE   AC1,AC                  ; skip if enough chars input
         JRST   CM1LP1                  ; prepare for next check
        MOVE    AC,CM1TAB(AC2)          ; get string to compare to
        AND     AC,MSK(AC1)
        OR      AC,NMSK(AC1)
        CAMN    AC,STRSP                ; skip if not equal
         JRST   CM1LPD
CM1LP1:
        AOJ     AC2,                    ; increment index
        TLNN    FLG,U.CUS               ; skip if customer type
         JRST   CM1LP2
        CAIG    AC2,1                   ; only use first 2 commands
         JRST   CM1LP
        JRST    CM1LPE
CM1LP2: CAIG    AC2,CM1LEN              ; check if table exhausted
         JRST   CM1LP
        JRST    CM1LPE
CM1LPD: ; here when we have a match
        PUSHJ   P,@CM1ADR(AC2)          ; do the command
        SKIPA
        JRST    GETCM2
        TCR     (1)
GETCM2: JRST    GETCMD                  ; and go again
CM1LPE: ; here when no match is found
        PUSHJ   P,WASLIN
        MOVNI   ACX,CM1LEN              ; for aobjn
        HRLZS   ACX
        TYPSTR  ([ASCIZ/Options are : /])
        TLNN    FLG,U.CUS               ; skip if customer type user
         JRST   CM1LE2
        TYPSTR  ([ASCIZ/CHANGE/])
        TYPSTR  ([ASCIZ/QUIT/])
        JRST    GETCMD
CM1LE2: HLLZ    AC,CM1FLG(ACX)
        TDNN    FLG,AC
         JRST   CM1LE5
        HRLZ    AC,CM1FLG(ACX)
        TDNN    FLG,AC
         JRST   CM1LE5
        TYPSTR  (CM1TAB(ACX),5,0,2)     ; type from match table
CM1LE5: AOBJN   ACX,CM1LE2              ; do the rest
        TCR     (1)
        JRST    GETCMD

        EXIT
SUBTTL TIOCOM - tout, commands, remark (!), noterm, quit, & noupdate

CMDTOU: ; open a new tout file, closing any existing tout file
        INSTR   ([ASCIZ/Tout File :/],FILIN,25,S)
        MOVE    AC,[ASCII/OFF  /]       ; check if we want to disable tout
        CAMN    AC,FILIN                ; skip if filename is not OFF
         JRST   CMDTO2
        MOVEI   AP,TOUARG               ; set to parse filename
        PUSHJ   P,FNPAR                 ; parse the filename
        JUMPGE  AC,TOUER3               ; error from fnpar
        SETZM   TOUBLK                  ; prepare open block
        HRLZI   AC,TOUBUF               ; output ring buffer header
        MOVEM   AC,TOUBLK+2
        MOVE    AC,TOUDEV               ; device from fnpar
        MOVEM   AC,TOUBLK+1
        MOVE    AC,[.CHOPN,,TOUCHN]     ; prepare to open device
        CHANIO  AC,TOUBLK               ; do it
         JRST   TOUER1
        MOVE    AC,SAVLIC               ; get saved license word
        HRLS    AC                      ; make proc lic = frame lic
        SETLIC  AC,                     ; to disable wf proc license
        MOVE    AC,[.CHENT,,TOUCHN]     ; prepare to enter
        CHANIO  AC,TOULK                ; do it
         JRST   TOUER2
        MOVE    AC,SAVLIC               ; get saved license word
        SETLIC  AC,                     ; restore proc license
        PUSHJ   P,CHKLIC
        TLO     FLG,U.TOUT
        TRO     FLG,U.OKAY              ; set completion flag
        POPJ    P,

CMDTO2: ; turn off any existing tout file
        TLNN    FLG,U.TOUT              ; skip if we have a tout file
         JRST   CMDTO3
        MOVE    AC,[.CHREL,,TOUCHN]
        CHANIO  AC,                     ; release tout channel
CMDTO3: TLZ     FLG,U.TOUT              ; turn off tout flag
        POPJ    P,

TOUER1:
        TYPSTR  ([ASCIZ/Channel open failed/])
        TLZ     FLG,U.TOUT
        POPJ    P,
TOUER2:
        TYPSTR  ([ASCIZ/Enter failed/])
        TLZ     FLG,U.TOUT
        MOVE    AC,SAVLIC
        SETLIC  AC,
        PUSHJ   P,CHKLIC
        POPJ    P,
TOUER3:
        TYPSTR  ([ASCIZ/Error parsing filename/])
        PUSHJ   P,INORNO
        JRST    CMDTOU

CMDCOM: ; open a new com file, nest off existing file
        CAIL    IF.P,MAXINR-1           ; see if any channels left
         JRST   COMER1                  ; no, reject request
        INSTR   ([ASCIZ/Com File :/],FILIN,25,T,AC,N,N,N)
        MOVEI   AP,COMARG
        PUSHJ   P,FNPAR
        JUMPGE  AC,COMER2
        AOJ     IF.P,                   ; increment ind file index
        SETZM   COMBLK                  ; re to open channel
        MOVE    AC,INRTAB(IF.P)
        MOVEM   COMBLK+2
        MOVE    AC,COMDEV
        MOVEM   AC,COMBLK+1
        MOVE    AC,SAVLIC
        HRLS    AC
        SETLIC  AC,                     ; reduce proc lic to frame lic
        HRR     AC,INCHN(IF.P)          ; get the channel
        HRLI    AC,.CHOPN
        CHANIO  AC,COMBLK               ; open the channel
         JRST   COMER3
        HRLI    AC,.CHLK                ; prepare for lookup
        CHANIO  AC,COMLKB               ; lookup
         JRST   COMER4
        MOVE    AC,SAVLIC               ; restore license
        SETLIC  AC,
        PUSHJ   P,CHKLIC                ; make sure we still have minimum
        TLO     FLG,U.IND               ; set ind flag
        TRO     FLG,U.OKAY              ; set completion flag
        MOVEM   FLG,SAVFLG-1(IF.P)
        MOVE    AC,LASCHR
        MOVEM   AC,SAVLCH-1(IF.P)
        TRZ     FLG,U.PEK
        POPJ    P,

COMER1:
        TYPSTR  ([ASCIZ/Cannot open more com files/])
        JRST    GETCMD

COMER2:
        TYPSTR  ([ASCIZ/Error parsing filename/])
        PUSHJ   P,INORNO
        JRST    CMDCOM

COMER3:
        TYPSTR  ([ASCIZ/Channel open failed/])
        JRST    COMERR

COMER4:
        TYPSTR  ([ASCIZ/Lookup failed/])
        JRST    COMERR

COMERR:
        MOVE    AC,SAVLIC               ; restore lic
        SETLIC  AC,
        PUSHJ   P,CHKLIC
        SOJ     IF.P,                   ; reduce index
        JUMPE   IF.P,COMRR2             ; jump if this is base device
        TLO     FLG,U.IND
        SKIPA
COMRR2: TLZ     FLG,U.IND
        JRST    GETCMD

CMDREM: ; remark (!)
        PUSHJ   P,WASLIN                ; input rest of the line
        TRO     FLG,U.OKAY              ; set completion flag
        AOS     0(P)                    ; skip return to avoid tcr
        POPJ    P,

CMDQUI: ; exit the program
 IFDEF DEBUG, < 
        HRRZ    AC,.JBDDT       ; starting address of ddt (if loaded)
        JUMPE   AC,CMDQU2       ; jump to cmdqu2 if no ddt
        MOVEM   AC,NUM          ; save it
        TYPSTR  ([ASCIZ /DDT/])
        JRST    @NUM            ; transfer to ddt
 >
CMDQU2: ; here if no ddt
        SETO    AC,             ; set to zap all circuits (if any)
        ZAPCIR  AC,             ; do it
        HRROI   AC,.AXEDE       ; set to restore original echo mode
	TLNN	FLG2,V.HDX	; skip if not full duplex
        AUXCAL  AC,OLDDEF
        TLNE    FLG,U.CS        ; skip if not c/s
         JRST   CMDQU3
        TYPSTR  ENDMSG          ; type exit message
CMDQU3:
        EXIT                    ; and exit
ENDMSG: ASCIZ   `
Thank you.

 Computer Management Services Group - Resource Planning Dept.
`

CMDROM: ; enter no update mode (cmd usually in (db.dir)usrval.com)
        TLZN    FLG,U.UPD               ; set the flag
         JRST   CMDRO2
        TYPSTR  (ROMOD,777,0,0,Y,Y)
CMDRO2: TRO     FLG,U.OKAY
        POPJ    P,

ROMOD:  ASCIZ   `
Entering read-only mode,  Only information type commands (no updates)
will operate during this session of USRVAL.`

CMDNOT: ; turn off tty: echo
        TLNE    FLG,U.EOL               ; check if we have more input
         JRST   CMDNO1
        INSTR   (NONE,STRSP,5,S)        ; input option
        MOVE    AC,[ASCII/OFF  /]
        CAMN    AC,STRSP                ; skip if option was not OFF
         JRST   CMDNO2
CMDNO1: TLO     FLG,U.NOTY              ; turn off tty echo
        TRO     FLG,U.OKAY
        POPJ    P,

CMDNO2: TLZ     FLG,U.NOTY              ; turn on tty echo
        POPJ    P,


CMDIMM:  ; immediate mode command
        INSTR   ([ASCIZ/Immediate mode ON or OFF :/],NUM,5,S)
        MOVE    AC,NUM
        CAME    AC,[ASCII/ON   /]
         JRST   CMDIM2
        TLO     FLG,U.IMM       ; set the flag
        JRST    CMDIMD
CMDIM2: CAME    AC,[ASCII/OFF  /]
         JRST   CMDIME
        TLZ     FLG,U.IMM
        JRST    CMDIMD
CMDIMD: TRO     FLG,U.OKAY
        POPJ    P,
CMDIME: PUSHJ   P,INORNO
        JRST    CMDIMM
    j@	R