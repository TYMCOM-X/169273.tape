begin "Cusps"

Require "(SAILIB)Sail.Def" Source!File;
Require "Askit.Req"  Source!File;
Require "FilBrk.Req" Source!File;
Require "LexSub.Req" Source!File;
Require "LicSub.Req" Source!File;
Require "PrtSub.Req" Source!File;

Define	User = {F:U0[F!Pnt]}, User1 = {F:U1[F!Pnt]};	! Username;
Define	Name = {F:Fn[F!Pnt]}, Ext   = {F:Ex[F!Pnt]};	! File-Ext;
Define	Prot = {F:Pr[F!Pnt]}, Lic   = {F:Li[F!Pnt]};	! Prot-Lic;
Define	Ver  = {F:Vr[F!Pnt]}, Cksum = {F:Ck[F!Pnt]};	! Ver-Cksum;

Define	Sys!940 = { ('1 lsh 35) };			! Xerox XDS-940;
Define	Sys!PDP = { ('1 lsh 34) };			! DEC PDP-10;
Define	Sys!XX  = { ('1 lsh 33) };			! DEC 2020;
Define	Sys!370 = { ('1 lsh 32) };			! IBM 370's;

Define	Product!File = { "(CARL)CUSPS.SYS" };		! Data File;
Define	Nxt = { Wordin(F!Chan) };			! Next word from file;

Record!Class S (Integer Number; R!P (S) Next );
Record!Class F (Integer U0, U1, Fn, Ex, Pr, Li, Vr, Ck;	! File info;
		R!P (F) Next  );			! Link;
Record!Class T (Integer Trans, Archiv, Version, Dates;	! Transmittal info;
		String Who, Manager;			! Who Transmitted;
		R!P (F) File!List;			! List of files;
		R!P (S) System!List;			! List of systems;
		R!P (T) Next  );			! Link;
Record!Class P (String Program;				! Product Name;
		Integer System!Type;			! System Types;
		R!P (T) X!List;				! Transmittals;
		R!P (P) Next  );			! Link;

R!P (P) P!Pnt, P!Head;	! Product pointer, Head of product list;
R!P (T) T!Pnt;		! Transmittal pointer;
R!P (F) F!Pnt;		! File info pointer;
R!P (S) S!Pnt;		! System pointer;

Boolean Eof, Not!Aborting, Empty, File!Read, File!Written, File!Changed;
Integer Temp, Temp1, P!Count, P!Times, T!Count, T!Files, T!Systems;
Integer F!Chan, W!Date;
String Str;

!	** Commands **
    Abort
    Delete (*product), (*xmittal), (file), (system)
    Help
*   Insert (product), (xmittal), (file), (system)
    List (machine), (product), (xmittal), (file), (system), (who), (manager)
    Quit
*   Read (file)
    Type (machine), (product), (xmittal), (file), (system), (who), (manager)
*   Write (file)
;

Procedure Read!File;
begin "Read File"
    Open(F!Chan _ Getchan, "DSK", '10, 4,0, 512, 0, Eof_-1);
    If not EOF then begin "Lookup File"
	Lookup(F!Chan, Product!File, Eof_-1);
	If not EOF then begin "Read Header"
	    W!Date _ Nxt;
	    Print("Last Updated: ",Cvos(W!Date));
	    P!Count _ Nxt;
	    Print(" ",P!Count," products entered.",crlf);
	end "Read Header";
	While not EOF and P!Count > 0 do begin "Read Products"
	    Temp _ Nxt; Temp1 _ Nxt;
	    If Eof then DONE;
	    P!Count _ P!Count - 1;
	    If P!Head = Null!R
		then P!Pnt _ P!Head _ New!Record(P)
		else P!Pnt _ ( P:Next[P!Pnt] _ New!Record(P) );
	    P:Program[P!Pnt] _ Cvxstr(Temp) & Cvxstr(Temp1);
	    Temp _ Nxt;
	    P:System!Type[P!Pnt] _ Temp lsh -18;	! System Types;
	    P!Times _ Temp land '777777;		! # Transmittals;
	    For T!Count _ 1 step 1 until P!Times do begin "Read Transmittals"
		If P:X!List[P!Pnt] = Null!R
		    then T!Pnt _ P:X!List[P!Pnt] _ New!Record(T)
		    else T!Pnt _ ( T:Next[T!Pnt] _ New!Record(T) );
		Temp _ Nxt;
		T:Archiv[T!Pnt] _ Temp land '777777;
		T:Trans[T!Pnt]  _ Temp lsh -18;
		T:Version[T!Pnt]_ Nxt;
		T:Dates[T!Pnt]  _ Nxt;
		T:Who[T!Pnt]    _ Cvxstr(Nxt)&Cvxstr(Nxt)&Cvxstr(Nxt);
		T:Manager[T!Pnt]_ Cvxstr(Nxt)&Cvxstr(Nxt)&Cvxstr(Nxt);
		Temp _ Nxt;
		T!Systems _ Temp lsh -18;
		T!Files _ Temp land '777777;
		For Temp _ 1 step 1 until T!Files do begin "Read File List"
		    If T:File!List[T!Pnt] = Null!R
			then F!Pnt _ T:File!List[T!Pnt] _ New!Record(F)
			else F!Pnt _ ( F:Next[F!Pnt] _ New!Record(F) );
		    User _ Nxt; User1 _ Nxt;
		    Name _ Nxt; Ext _ Nxt;
		    Prot _ Nxt; Lic _ Nxt;
		    Ver  _ Nxt; Cksum _ Nxt;
		end; "Read File List"
		For Temp _ 1 step 1 until T!Systems do begin "Read Systems"
		    If T:System!List[T!Pnt] = Null!R
			then S!Pnt _ T:System!List[T!Pnt] _ New!Record(S)
			else S!Pnt _ ( S:Next[S!Pnt] _ New!Record(S) );
		    S:Number[S!Pnt] _ Nxt;
		end "Read Systems";
	    end "Read Transmittals";
	end "Read Products";
	If not EOF then begin "Read Trailer"
	    Temp _ Nxt;
	    If Temp = -1
		then Print( "Products read in successfully.",crlf)
		else Print( "Error reading products file, word = #",
			    Cvos(Temp),crlf);
	end "Read Trailer";
	Close(F!Chan);
    end "Lookup File"
    else Print( "Cannot find products file",crlf);
    Release(F!Chan);
end "Read File";

Procedure Write!File;
begin "Write File"
    Open(F!Chan _ Getchan, "DSK", '10, 0,4, 512, 0, Eof_-1);
    If not EOF then begin "Enter File"
	Enter(F!Chan, Product!File, Eof_-1);
	If not EOF then begin "Write Header"
	    WordOut(F!Chan, (Calli(0,'14) lsh 18) lor Calli(0,'23) );
	    P!Count _ 0;  P!Pnt _ P!Head;
	    While P!Pnt neq Null!R do begin "Count Products"
		P!Count _ P!Count + 1;
		P!Pnt _ P:Next[P!Pnt];
	    end;
	    WordOut(F!Chan, P!Count);
	end "Write Header";
	P!Pnt _ P!Head;
	While P!Pnt neq Null!R do begin "Write Products"
	    WordOut(F!Chan, CVsix(P:Program[P!Pnt][1 for 6]) );
	    WordOut(F!Chan, CVsix(P:Program[P!Pnt][7 for 6]) );
	    P!Times _ 0; T!Pnt _ P:X!List[P!Pnt];
	    While T!Pnt neq Null!R do begin "Count Transmittals"
		P!Times _ P!Times + 1;
		T!Pnt _ T:Next[T!Pnt];
	    end "Count Transmittals";
	    WordOut(F!Chan, !Xwd( P:System!Type[P!Pnt], P!Times) );
	    T!Pnt _ P:X!List[P!Pnt];
	    While T!Pnt neq Null!R do begin "Write Transmittals"
		WordOut(F!Chan, !Xwd( T:Trans[T!Pnt], T:Archiv[T!Pnt] ) );
		WordOut(F!Chan, T:Version[T!Pnt]);
		WordOut(F!Chan, T:Dates[T!Pnt]);
		WordOut(F!Chan, CvSix(T:Who[T!Pnt][1 for 6]) );
		WordOut(F!Chan, CvSix(T:Who[T!Pnt][7 for 6]) );
		WordOut(F!Chan, CvSix(T:Who[T!Pnt][13 for 6]) );
		WordOut(F!Chan, CvSix(T:Manager[T!Pnt][1 for 6]) );
		WordOut(F!Chan, CvSix(T:Manager[T!Pnt][7 for 6]) );
		WordOut(F!Chan, CvSix(T:Manager[T!Pnt][13 for 6]) );
		F!Pnt _ T:File!List[T!Pnt];  S!Pnt _ T:System!List[T!Pnt];
		T!Files _ T!Systems _ 0;
		While F!Pnt neq Null!R do begin
		    T!Files _ T!Files + 1; F!Pnt _ F:Next[F!Pnt]; end;
		While S!Pnt neq Null!R do begin
		    T!Systems _ T!Systems + 1; S!Pnt _ S:Next[S!Pnt]; end;
		WordOut(F!Chan, !Xwd( T!Systems, T!Files ) );
		F!Pnt _ T:File!List[T!Pnt];  S!Pnt _ T:System!List[T!Pnt];
		While F!Pnt neq Null!R do begin "Write File List"
		    WordOut(F!Chan, User); WordOut(F!Chan, User1);
		    WordOut(F!Chan, Name); WordOut(F!Chan, Ext);
		    WordOut(F!Chan, Prot); WordOut(F!Chan, Lic);
		    WordOut(F!Chan, Ver ); WordOut(F!Chan, Cksum);
		    F!Pnt _ F:Next[F!Pnt];
		end; "Write File List"
		While S!Pnt neq Null!R do begin "Write Systems"
		    WordOut(F!Chan, S:Number[S!Pnt]);
		    S!Pnt _ S:Next[S!Pnt];
		end "Write Systems";
		T!Pnt _ T:Next[T!Pnt];
	    end "Write Transmittals";
	    P!Pnt _ P:Next[P!Pnt];
	end "Write Products";
	WordOut(F!Chan, -1);		! Write trailer of -1;
	Close(F!Chan);
    end "Enter File";
    Release(F!Chan);
end "Write File";

R!P (F) Procedure Insert!File;
begin "Insert File"
    R!P (F) Pnt; String Usr, Fil, Extn, Ppn, Tmp; Boolean Dot, Err;

    Print( "File: "); Tmp _ Inchwl;
    If Length(Tmp) = 0 then Return( Null!R );
    Str _ GetFil(Tmp, Usr, Fil, Extn, Ppn, Dot, Err);
    If Err or Length(Str) = 0 then Return( Null!R );

    Pnt _ New!Record(F);
    If Length(Usr) = 0 then begin
	Print( "Directory: "); Usr _ Inchwl;
    end;
    F:U0[Pnt] _ CvSix(Usr[1 for 6]);
    F:U1[Pnt] _ CvSix(Usr[7 for 6]);
    F:Fn[Pnt] _ CvSix(Fil[1 for 6]);
    F:Ex[Pnt] _ CvSix(Extn[1 for 3]);
    Print( "Protection: "); F:Pr[Pnt] _ RdProt(Inchwl);
    Print( "License: "); F:Li[Pnt] _ LicRd(Inchwl);
    Print( "File version (if any): "); F:Vr[Pnt] _ Cvo(Inchwl);
    Print( "Checksum: "); F:Ck[Pnt] _ CvSix(Inchwl[1 for 6]);
    Return( Pnt );
end "Insert File";


R!P (S) Procedure Insert!System;
Begin "Insert System"
    R!P (S) Pnt;

    Print( "System #: "); Temp _ Cvd(Inchwl);
    If Temp = 0 then Return( Null!R ) else begin
	Pnt _ New!Record(S);
	S:Number[Pnt] _ Temp;
    end;
    Return( Pnt );
end "Insert System";

R!P (T) Procedure Insert!Transmittal;
Begin "Insert Transmittal"
    R!P (T) Pnt;

    Print( "Transmittal #: "); Str _ Inchwl;
    If Length(Str) then begin
	Pnt _ New!Record(T);					! Record;
	T:Trans[Pnt] _ Cvd(Str);				! Trans #;
    end else Return( Null!R );
    Print( "Archive #: "); T:Archiv[Pnt] _ Cvd(Inchwl);		! Archive #;
    Print( "Version #: "); T:Version[Pnt] _ Cvo(Inchwl);	! Oct Version;
    T:Dates[Pnt] _ !Xwd( Calli(0, '14), Calli(0, '14) );	! Today,Today;
    Print( "Programmer: "); T:Who[Pnt] _ Inchwl;		! Who done it;
    Print( "Manager: "); T:Manager[Pnt] _ Inchwl;		! Responsible;
    Print( "Enter files, end with an extra CR",Crlf);
    If Null!R neq F!Pnt _ Insert!File then begin			! Files;
	T:File!List[Pnt] _ F!Pnt;
	While Null!R neq F:Next[F!Pnt]_Insert!File do F!Pnt_F:Next[F!Pnt];
    end;
    Print( "Enter system numbers, end with an extra CR",Crlf);
    If Null!R neq S!Pnt _ Insert!System then begin			! Systems;
	T:System!List[Pnt] _ S!Pnt;
	While Null!R neq S:Next[S!Pnt]_Insert!System do S!Pnt_S:Next[S!Pnt];
    end;
    Return( Pnt );
end "Insert Transmittal";


Procedure Get!Transmittal;
Begin
    T!Pnt _ Insert!Transmittal;
    If T!Pnt neq Null!R then begin
	P:X!List[P!Pnt] _ T!Pnt;
	While Null!R neq T:Next[T!Pnt]_Insert!Transmittal do T!Pnt_T:Next[T!Pnt];
    end;
end;

Procedure Insert!Product;
Begin "Insert Product"
    Boolean Exists, New!P;
    String P!Name;

    Print("Product Name: "); P!Name _ Inchwl;
    P!Pnt _ P!Head;  Exists _ False;
    While P!Pnt neq Null!R and Not Exists do begin "Find Product"
	If Kequ( P!Name, P:Program[P!Pnt] ) then Exists _ True;
	If Not Exists then P!Pnt _ P:Next[P!Pnt];
    end "Find Product";
    If Not Exists then begin "Build Product Slot"
	New!P _ Askit("New Product? ");
	If New!P then begin "Setup Product Pointer"
	    If P!Head = Null!R then P!Pnt _ P!Head _ New!Record(P)
	     else begin "New Pointer"   R!P (P) P!Hld;
		P!Hld _ Null!R;
		P!Pnt _ P!Head;
		While P!Pnt neq Null!R and Not Exists do begin "Compare"
		    If LLT( P!Name, P:Program[P!Pnt] ) then Exists _ True;
		    If Not Exists then
		    begin P!Hld _ P!Pnt;  P!Pnt _ P:Next[P!Pnt]; end;
		end "Compare";
		If Not Exists then  P!Pnt _ P:Next[P!Hld] _ New!Record(P)
		 else begin "Move Pointers"
		    If P!Hld = Null!R then P!Hld _ P!Head _ New!Record(P)
		     else P!Hld _ (P:Next[P!Hld] _ New!Record(P));
		    P:Next[P!Hld] _ P!Pnt;
		    P!Pnt _ P!Hld;
		 end "Move Pointers";
		Exists _ False;			! Reset so we know * Later *;
	     end "New Pointer";
	end "Setup Product Pointer"
	else begin "Aborting"
	    Print( "Ok - Aborting entry",crlf);
	    Not!Aborting _ False;
	    Return;				! ** NOTE: Return **;
	end "Aborting";
    end "Build Product Slot";			! P!Pnt has a good record;
    P:Program[P!Pnt] _ P!Name;
    If New!P then Get!Transmittal;
end "Insert Product";

!	*** MAIN Program ***
;
    Not!Aborting _ True;
    Print( "Cusps v",cvos(!lh(memory['137])),crlf);
    Read!File;
    While Not!Aborting do Insert!Product;
    Write!File;


End "Cusps";
   