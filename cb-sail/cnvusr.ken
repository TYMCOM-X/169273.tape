!! title Rtn CVUser ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                               Rtn CVUser                                =
=                                                                         =
=                                                                         =
====================================+======================================


	Convert a PPN to a username.  This routine uses the slower of
	the two methods availible for finding the username.  If many
	lookups are anticipated, use the routine CV2User.


==========================================================================;


  simple string procedure CVUser (integer PPN);
  begin "CVUser"
    own integer array LkB[0:'30];
    own integer Chan;
    own integer Eof;


    LkB[0] _ arrinfo(LkB, 2);
    LkB[1] _ calli('16, '41);
    LkB[2] _ PPN;
    LkB[3] _ cvsix("UFD");

    open(Chan _ getchan, "DSK", '17, 0, 0, 0, 0, Eof);

    if (Eof) then
      return(null);

    chnior(Chan, LkB[0], 4);
    release(Chan);
    return(cv6str(LkB['27]) & cv6str(LkB['30]));
  end "CVUser";


! ==================================+======================================
==========================================================================;
!! title Rtn CV2User ;
! =========================================================================
====================================+======================================
=                                                                         =
=                                                                         =
=                              Rtn CV2User                                =
=                                                                         =
=                                                                         =
====================================+======================================


	Convert a PPN to a username.  This routine uses the faster of
	the known methods to find the username, and should be used when
	many conversions are anticipated.

	! <<  Recover the cache-logic from the original code in
	      (DWS)stream.sai.


==========================================================================;


  simple string procedure CV2User (integer PPN);
  begin "CV2User"
    own integer DUL;
    own integer DUL!EOF;
    own integer DUL!Block!Number;
    own integer array DUL!Block[0:127];
    own integer i;
    own integer hash;
    own integer lowitem;
    own integer lowvalue;
    own string  username;

  
    DUL _ -1;

    if (DUL < 0) then
    begin
      open(DUL _ getchan, "DSK", '16,0,0,DUL!EOF,DUL!EOF,DUL!EOF);
      lookup(DUL, "DUL.SYS[1,4]", DUL!EOF);
  
      if (DUL!EOF) then
	usererr(0,0,"Can't access (SYS)DUL.SYS");

      DUL!Block!Number _ -1;
    end;
  
    hash _ PPN mod 101 + 1;
    useti(DUL, hash);
  
    if (DUL!EOF) then
      username _ "[" & cvos(lh(PPN)) & "," & cvos(rh(PPN)) & "]"
    else
    begin
      while (true) do
      begin "search DUL"
  	if (hash neq DUL!Block!Number) then
	  arryin(DUL, DUL!Block[0], 128);

	DUL!Block!Number _ hash;
  
	for i _ 0 step 3 until 127 do
	begin "search block"
	  if (DUL!Block[i] = PPN) then
	    done "search DUL"
	  else if (DUL!Block[i] = 0) then
	    done "search DUL"
	  else if (DUL!Block[i] < 0) then
	    done "search block";
	end "search block";
  
	hash _ rh(DUL!Block[i]) + 1;
	useti(DUL, hash);
      end "search DUL";

      if (DUL!Block[i]) then
	username _ cv6str(DUL!Block[i+1]) & cv6str(DUL!Block[i+2])
      else
	username _ "[" & cvos(lh(PPN)) & "," & cvos(rh(PPN)) & "]";
    end;

    return(username);
  end "CV2User";


! ==================================+======================================
==========================================================================;
