begin	"ic9"
define	!	=	"comment",	CRLF	=	"('15&'12)",
	CR	=	'15,		LF	=	'12,
	ESC	=	'33,		BELL	=	'7,
	BS	=	'10,		ESCAPE	=	"start!code",
	NIL	=	"null!record",	AXCFS	=	'64,
	DEFAULT	=	'600000000000,	ECHOFF	=	'214,
	CLRTAB	=	"('33&'63)",	SETTAB	=	"('33&'61)",
	FORTAB	=	"('11)",	BCKTAB	=	"('33&'151)",
	ULON	=	"('33&'46&'144&'101)",
	ULOFF	=	"('33&'46&'144&'100)",
	CLRLAB	=	"('33&'46&'152&'100)",
	DSPLAB	=	"('33&'46&'152&'101)",
	VECTOR	=	"('33&'46&'141)",
	INSRTC	=	"('33&'121)",	INSRTO	=	"('33&'122)",
	INSRTL	=	"('33&'114)",	ERASEC	=	"('33&'120)",
	ERSEOL	=	"('33&'113)",	ERASEL	=	"('33&'115)",
	ERSCRN	=	"('33&'112)",	CMDPRT	=	-1,
	CTRLAT	=	'0,		CTRLA	=	'1,
	CTRLB	=	'2,		CTRLC	=	'3,
	CTRLD	=	'4,		CTRLE	=	'5,
	CTRLF	=	'6,		CTRLG	=	'7,
	CTRLH	=	'10,		CTRLI	=	'11,
	CTRLJ	=	'12,		CTRLK	=	'13,
	CTRLL	=	'14,		CTRLM	=	'15,
	CTRLN	=	'16,		CTRLO	=	'17,
	CTRLP	=	'20,		CTRLQ	=	'21,
	CTRLR	=	'22,		CTRLU	=	'25,
	CTRLV	=	'26,		CTRLW	=	'27,
	CTRLX	=	'30,		CTRLY	=	'31,
	CTRLZ	=	'32,		CTRLLB	=	'33,
	CTRLBR	=	'34,		CTRLRB	=	'35,
	CTRLUP	=	'36,		CTRLUS	=	'37,
	DLB	=	'177,		YES	=	0,	 
	NO	=	1,		READ	=	0,
	WRITE	=	1,		MODE	=	'750000,
	NEW	=	"new!record",	STRUCT	=	"record!class",
	BUFPTR	=	"record!pointer (buffer)",
	TXTPTR	=	"record!pointer (text)",
	NOCRLF	=	'10,		AXWID	=	'27;
STRUCT	text	(string      line;
		 TXTPTR      next,prev);
STRUCT	buffer	(BUFPTR      prv,link;
		 TXTPTR      min,cur,max);
BUFPTR	current,spare,first;
TXTPTR	wild,row;
integer	chr,
	curlin,
	curchr,
        expr,
	i,
	dskchn,
	dskeof,
	break;
string	junk,search;

integer procedure min(integer	a,b);
begin	"min" return(if a > b then b else a); end	"min";

integer procedure max(integer	a,b);
begin	"max" return(if a > b then a else b); end	"max";

procedure remark(string      arg);
begin	"remark" 
outstr(arg[1 for min(80,length(arg))]);
end	"remark";

procedure posn(integer	lin,col);
begin	"posn"
remark(VECTOR&cvs(min(23,lin))&"r"&cvs(min(79,col))&"C");
end	"posn";

integer procedure index(TXTPTR      ptr);
begin      "index"
integer i;
TXTPTR start;
i _ 0;
start _ buffer:min[current];
while start neq ptr do
  begin start _ text:next[start];
        i _ i + 1;
        if start = buffer:max[current] or
        start = buffer:min[current] then done;
  end;
return(i);
end      "index";

procedure newline(string      arg);
begin      "newline"
TXTPTR      ptr;
ptr _ NEW(text);
text:line[ptr] _ arg;
text:next[ptr] _ text:next[buffer:cur[current]];
text:prev[ptr] _ buffer:cur[current];
text:prev[text:next[ptr]] _ ptr;
text:next[text:prev[ptr]] _ ptr;
buffer:cur[current] _ ptr;
end      "newline";

procedure splat(integer	lin,col;
		TXTPTR	ptr);
begin      "splat"
integer i;
if ptr = buffer:min[current] then ptr _ text:next[ptr];
row _ ptr;
posn(0,0);
i _ 1;
while i leq 24 do
  begin
  if ptr = buffer:max[current] then
    begin remark(ERSEOL);
    end
  else
    begin remark(ERSEOL&text:line[ptr]);
          ptr _ text:next[ptr];
    end;
  if i neq 24 then remark(CRLF);
  i _ i + 1;
  end;
posn(lin,col);
end      "splat";

BUFPTR procedure getbuf(integer	bufnum);
begin	"getbuf"
integer i;
spare _ first;
i _ 0;
while spare neq NIL and i neq bufnum do
  begin i _ i + 1;
        spare _ buffer:link[spare];
        if spare = first then
          begin spare _ NIL;
                done;
          end;
  end;
return(spare);
end	"getbuf";

integer procedure fndbuf(reference BUFPTR      ptr);
begin      "fndbuf"
integer i;
ptr _ first;
i _ 0;
while ptr neq current do
  begin ptr _ buffer:link[ptr];
        i _ i + 1;
  end;
return(i);
end      "fndbuf";

integer procedure getpos(string	arg);
begin	"getpos"
integer i,j;
i _ 1;
j _ 0;
while i leq length(arg)-1 do
  begin if arg[i for 1] neq FORTAB then j _ j + 1
  else i _ i + (7 - (i mod 7));
  i _ i + 1;
  end;
return(i + 1);
end	"getpos";

string procedure getstr(integer	lin,col;
                        integer	lngth;
			boolean	kill;
			string	bol);
begin      "getstr"
integer      i;
junk _ NULL;
posn(lin,col);
while true do
  begin chr _ inchrw;
        if kill and length(junk) = 0 then remark(ERSEOL);
        if chr = DLB then
          begin if length(junk) > 0 then
                  begin if junk[INF for 1] neq FORTAB then 
                          remark(BS&ERASEC)
                        else 
                          posn(lin,getpos(bol&junk[1 for INF-1]));
                        junk _ junk[1 for INF - 1];
                  end;
                continue;
          end;
        if chr = CTRLU then
          begin posn(lin,col);
                while length(junk) > 0 do
                  begin chr _ lop(junk);
                        remark(ERASEC);
                  end;
                continue;
          end;
        if chr < " " and chr neq FORTAB then return(junk);
        if length(junk) geq lngth then
          begin remark(BELL);
                continue;
          end;
        remark(chr);
        junk _ junk & chr;
  end;
end      "getstr";

procedure diag(string      arg);
begin      "diag"
posn(0,40);
remark(arg&ERSEOL&BELL);
end     "diag";

string procedure cmmnd(integer	clr;
			string	arg;
			integer	bufnum);
begin	"cmmnd"
string local;
posn(0,0);
local _ "["&cvs(bufnum)&"]"&arg;
remark(local&ERSEOL);
return(getstr(0,length(local),clr,TRUE,local));
end	"cmmnd";  

integer procedure number;
begin      "number"
if chr = "$" then expr _ index(buffer:max[current])-1
else
  begin if expr = DEFAULT then expr _ (chr - "0")
        else expr _ expr * 10 + (chr - "0");
  end;
return(YES);
end      "number";

integer procedure getexp(integer      value);
begin
return(if expr = DEFAULT then value
       else expr);
end      "getexp";

integer procedure getfil(string		local;
			 integer      access);
begin      "getfil"
open(dskchn _ getchan,"DSK",MODE,5,5,100,0,dskeof);
if dskeof neq YES then diag("?Open channel `"&local&"'")
else
  begin lookup(dskchn,local,dskeof);
        if dskeof neq YES then
          begin if access = READ then diag("?Find file `"&local&"'")
                else
                  begin enter(dskchn,local,dskeof);
                        if dskeof neq YES then
                          diag("?Open file `"&local&"'")
                        else return(YES);
                  end;
          end
        else if access = WRITE then
          begin enter(dskchn,local,dskeof);
                if dskeof neq YES then
                  diag("?Open file `"&local&"'")
                else return(YES);
          end
        else return(YES);
  end;
return(NO);
end      "getfil";

procedure edt;
begin      "edt"
spare _ getbuf(getexp(DEFAULT));
if spare = NIL then
  begin spare _ NEW(buffer);
        if first = NIL then first _ spare
        else buffer:prv[spare] _ buffer:prv[first];
        buffer:link[spare] _ first;
        buffer:prv[first] _ spare;
        current _ spare;
        buffer:min[current] _ NEW(text);
        buffer:cur[current] _ buffer:min[current];
        buffer:max[current] _ NEW(text);
        text:next[buffer:min[current]] _ buffer:max[current];
        text:prev[buffer:min[current]] _ buffer:max[current];
        text:next[buffer:max[current]] _ buffer:min[current];
        text:prev[buffer:max[current]] _ buffer:min[current];
  end;
curlin _ 0;
curchr _ 0;
splat(curlin, curchr,buffer:cur[current]);
end      "edt";

procedure dnl;
begin	"dnl"
integer i;
if (i _ getexp(1)) leq 0 then return;
wild _ buffer:cur[current];
while i > 0 and text:next[wild] neq buffer:max[current] do
  begin wild _ text:next[wild];
        if curlin < 23 then  curlin _ curlin + 1
        else
          begin row _ text:next[row];
                posn(0,0);
                remark(ERASEL);
                posn(curlin,0);
                remark(text:line[wild]&ERSEOL);
          end;
        i _ i - 1;
  end;
buffer:cur[current] _ wild;
posn(curlin,getpos(text:line[wild][1 to curchr+1]));
end	"dnl";

procedure upl;
begin	"upl"
integer i;
i _ getexp(1);
wild _ buffer:cur[current];
while i > 0 and text:prev[wild] neq buffer:max[current] do
  begin wild _ text:prev[wild];
        if curlin > 0 then  curlin _ curlin - 1
        else
          begin row _ text:prev[row];
                posn(23,0);
                remark(ERASEL);
                posn(curlin,0);
                remark(INSRTL&text:line[wild]);
          end;
        i _ i - 1;
  end;
buffer:cur[current] _ wild;
posn(curlin,getpos(text:line[wild][1 to curchr+1]));
end	"upl";

procedure lft;
begin	"lft"
integer i;
TXTPTR save;
i _ getexp(1);
save _ buffer:cur[current];
while i > 0 do
  begin if curchr > 0 then curchr _ curchr - 1
        else
          begin expr _ 1;
                upl;
                if save = buffer:cur[current] then done
                else save _ buffer:cur[current];
                curchr _ length(text:line[save])-1;
          end;
        I _ I - 1;
  end;
posn(curlin,getpos(text:line[save][1 to curchr+1]));
end	"lft";

procedure rgt;
begin	"rgt"
integer i;
TXTPTR save;
i _ getexp(1);
save _ buffer:cur[current];
while i > 0 do
  begin if curchr < length(text:line[save])-1 then curchr _ curchr + 1
        else
          begin expr _ 1;
                dnl;
                if save = buffer:cur[current] then done
                else save _ buffer:cur[current];
                curchr _ 0;
          end;
        I _ I - 1;
  end;
posn(curlin,getpos(text:line[save][1 to curchr+1]));
end	"rgt";

procedure qit;
begin      "qit"
chr _ inchrw;
if chr = ESC then
  begin posn(46,0);
        remark(DSPLAB);
        call(1,"EXIT");
  end;
remark(BELL);
end      "qit";

procedure reposn;
begin	"reposn"
posn(0,0);
remark(text:line[row]&ERSEOL);
posn(curlin,curchr);
end
"reposn";

procedure rea;
begin      "rea"
while not equ(junk _ cmmnd(10,"read: ",fndbuf(current)),NULL) do
  begin if getfil(junk,READ) = YES then
          begin wild _ buffer:cur[current];
                while not dskeof do newline(input(dskchn,break));
                close(dskchn);
                release(dskchn);
                curlin _ 0;
                buffer:cur[current] _ wild;
                splat(curlin,curchr,buffer:cur[current]);
                return;
          end;
  end;
reposn;
end      "rea";

procedure wri;
begin      "wri"
while not equ(junk _ cmmnd(10,"write: ",fndbuf(current)),NULL) do
  begin if getfil(junk,WRITE) = YES then
          begin wild _ text:next[buffer:min[current]];
                while wild neq buffer:max[current] do
                  begin out(dskchn,text:line[wild]&CRLF);
                        wild _ text:next[wild];
                  end;
                close(dskchn);
                release(dskchn);
                done;
          end;
  end;
reposn;
end	"wri";

simple procedure setlch(integer	width);
ESCAPE
	hrlz   1,width;
	ttcall 7,1;
end;

! ic9;
auxclr(CMDPRT,memory[ECHOFF],AXCFS);
setbreak(break _ getchan, CR, LF, "INS");
setlch(NOCRLF);
auxclr(CMDPRT,160,AXWID);
remark(CLRTAB);
posn(0,0);
i _ 7;
while i leq 79 do
  begin posn(0,i);
        remark(SETTAB);
        i _ i + 8;
  end;
curlin _ 0;
curchr _ 0;
first _ NIL;
edt;
remark(ULON&"ready"&ULOFF&CLRLAB);
while true do
  begin case (chr _ inchrw) of
          begin ["0":"9"]["$"] if number = YES then continue;
              ! [DLB] dcl;
                [else] case (chr+'100) of
                         begin ! ["@"] atb; ! ["A"] adv; ! ["B"] bup;
                               ! ["C"] cpy; ! ["D"] dcr;   ["E"] edt;
                               ! ["F"] fnd; ! ["G"] got;   ["H"] lft;
                               ! ["I"] ins;   ["J"] dnl;   ["K"] upl;
                                 ["L"] rgt; ! ["M"] bol; ! ["N"] nxt;
                               ! ["O"] ovr; ! ["P"] prv;   ["Q"] qit;
                                 ["R"] rea; ! ["U"] dll;   ["W"] wri;
                               ! ["Y"] ynk; ! ["Z"] dlr; ! ["["] eol;
                               ! ["\"] brk; ! ["^"] tne; ! ["_"] teq;
                               [else] remark(BELL)
                         end
          end;
        if buffer:cur[current] = buffer:max[current] then
          buffer:cur[current] _ text:prev[buffer:cur[current]];
        expr _ DEFAULT;
  end;
end	"ic9"

 