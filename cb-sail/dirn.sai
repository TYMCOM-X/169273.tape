
begin

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)MFDSCN.REQ" source!file;
require "(SAILIB)DULWLD.REQ" source!file;
require "(SAILIB)CVPPN.REQ" source!file;
require "(SAILIB)DUL.REQ" source!file;


Own Integer BrkIO, Brkcom, BrkWld, Brk;
Own String  Text, NewText, Line;

record!class User( string Usr; integer PPN; r!p (user) Next );
r!p (user) Ulist, Uptr;

record!class Link( boolean Keep; string LName; r!p (link) Next, Group );
r!p (link) Llist, Lptr, Lgroup, Lhold;

record!class Mask( integer Flg,			! (+) true, (-) false;
			   File, Ext,  Ppn,	! filename.ext [p,pn];
			   Lsiz, Hsiz, Aut,	! min, max, authorppn;
			   Lic,  Pid,  Cks;	! license, pid, cksum;
		   string  Prj;			! project code;
		   r!p (Mask) Next );		! pointer to next;
r!p (mask) Mlist, Mptr;

record!class Name( integer File, Ext,  Ppn,	! filename.ext [p,pn];
			   Size, Prot, Mode,	! size, protect, mode;
			   Date, Time, Sec,	! creation date-time ;
			   Access, Status,	! access date, status;
			   Author,		! author ppn ;
			   Lic,  Pid,  Cks;	! license, pid, cksum;
		   string  Prj;			! project code;
		   r!p (Name) Next );		! pointer to next;
r!p (name) Nlist, Nptr;

boolean procedure WantUfd( Reference Integer UserAun );
begin
    Uptr_ Ulist;
    While ( null!record neq Uptr_ user:Next[Uptr] )
     do If user:Ppn[Uptr] = UserAun
	 then return( True );
    return( False )
end;


boolean procedure WantFile( Reference Integer Filename, Extension );
begin
    Return( True );
end;

boolean procedure WantThisOne( Integer Array LKB );
begin
    Boolean Var;
    Mptr_ Mlist;
    Var_ False;
    While ( null!record neq Mptr_ Mask:Next[Mptr] )
     do If  ( Mask:Ppn[Mptr] = LKB[!RBPPN] ) and
	    ( ( Mask:File[Mptr] = CvSix("*") ) or
	      ( Mask:File[Mptr] = LKB[!RBNAM] ) ) and
	    ( ( Mask:Ext[Mptr] = CvSix("*") ) or
	      ( Mask:Ext[Mptr] = (LKB[!RBEXT] land '777777000000) )  )
	 then Var_ Mask:Flg[Mptr];
    Return( Var )
end;

procedure
 FileProc( Reference Integer Chan, Count, Brk, FileEof; Integer Array LKB );
begin "file merge"
    If WantThisOne( LKB )
     then begin
	Print( "Want! ",Cvxstr(LKB[!RBNAM]),Crlf );
	Nptr_ name:Next[Nptr]_ new!record( name );
	name:File[ Nptr ]_  LKB[!RBNAM];
	name:Ext[ Nptr ]_   !lh( LKB[!RBEXT] );
	name:Ppn[ Nptr ]_   LKB[!RBPPN];
	name:Size[ Nptr ]_  LKB[!RBSIZ];
	name:Date[ Nptr ]_  ( (LKB[!RBEXT] land '140000) lsh -2)
			      lor (LKB[!RBPRV] land '7777);
	name:Time[ Nptr ]_  (LKB[!RBPRV] lsh -12) land '3777;
	name:Access[Nptr]_  LKB[!RBEXT] land '37777;
	name:Prot[ Nptr ]_  LKB[!RBPRV] lsh -27;
	name:Mode[ Nptr ]_  (LKB[!RBPRV] lsh -23) land '17;
	name:Author[Nptr]_  LKB[!RBAUT];
	name:Status[Nptr]_  LKB[!RBSTS];
	name:Lic[ Nptr ]_   LKB[!RBLIC];
	name:Pid[ Nptr ]_   LKB[!RBPID];
	name:Prj[ Nptr ]_   Cvastr(LKB[!RBPJC]) & Cvastr(LKB[!RBPJC+1])
			    & Cvastr(LKB[!RBPJC+2]);
    end
end;

procedure PrintList;
begin "printing"
    Nptr_ Nlist;
    While ( null!record neq Nptr_ name:Next[Nptr] )
     do Print(   CvXstr(name:File[Nptr]), ".",
		 CvXstr(name:Ext[Nptr]), name:Size[Nptr],
		 "  <",cvos(name:Prot[Nptr]),">", crlf );

end "printing";

integer procedure ReadPpn( integer loc );
begin

    Text_ Cv6str( memory[loc] ) & Cv6str( memory[loc+1] );
    Uptr_ Ulist;
    While ( null!record neq Uptr_ user:Next[Uptr] )
     do if Equ( Text,user:Usr[Uptr] )
	 then return( user:Ppn[Uptr] );

    Uptr_ user:Next[Uptr]_ new!record( user );
    user:Usr[Uptr]_ Text;
    user:Ppn[Uptr]_ CvPPN( Text );
    return( user:Ppn[Uptr] )

end;


procedure SetPpn( integer ppn );
begin

    Uptr_ Ulist;
    While ( null!record neq Uptr_ user:Next[Uptr] )
     do if ( ppn = user:Ppn[Uptr] )
	 then return;

    Uptr_ user:Next[Uptr]_ new!record( user );
    user:Ppn[Uptr]_ ppn;
    user:Usr[Uptr]_ CvUser( Ppn );

end;

ttyup( true );

setbreak(BrkIO_  getbreak, "=_",Null, "INS");
setbreak(BrkCom_ getbreak, ",", Null, "INS");
setbreak(BrkLst_ getbreak, "+-",Null, "INS");
setbreak(BrkWld_ getbreak, "#", Null, "INS");
MFDset( '17, 0,0, 0 );

while ( true )
 do begin

    Llist_ Lptr_ new!record( link );	! initialize link list;

    Print( "Dir: " );			! prompt user ;
    Line_ Inchwl;			! read a line ;

    While Length( Line )		! if non-blank ... proceed ;
     do begin "divvy up line"
	begin "one i/o spec"
	    ComText_ Scan( Line, BrkCom, Brk );
	    While Length( ComText )	! if entry non-blank, do wild ;
	     do begin
		LnkType_ If ( ComText = "+" or ComText = "-" )
			  then Lop( ComText )
			  else "+";
		LnkText_ Scan( ComText, BrkLnk, Brk );
		If Length( LnkText )
		 then begin
		    Link:Next[ Lptr ]_ new!recor( link );
		    

	end "one i/o spec";
     end "divvy up line";



	DULwld( 0, -1, WantPPN );
	UPtr_ Ulist;
	While ( null!record neq Uptr_ user:Next[ Uptr ] )
	 do UFDscn( user:PPN[ Uptr ], CvSix("*"), CvSix("*"),
			    -1, WantFile, FileProc );
	PrintList
     end
     else calli( 0, Calli!EXIT )
 end;

end;
begin
    Ulist_ Uptr_ new!record( user );	! initialize users list ;
    Mlist_ Mptr_ new!record( mask );	! initialize masks list ;
    Nlist_ Nptr_ new!record( name );	! initialize names list ;

	     then begin "one entry"
		Text_ Null;
		Brk_ 0;
		While Length( ComText ) or (Brk neq 0)
		 do Text_ Text & (If Brk = "#" then "?" else Null)
		    & Scan( ComText, BrkWld, Brk );

		Mptr_ Mask:Next[Mptr]_ new!record( mask );

		Mask:File[Mptr]_ cvfil(Text, Mask:Ext[Mptr], Mask:Ppn[Mptr]);
		If Mask:Ppn[Mptr] = 0
		 then Mask:Ppn[Mptr]_ Calli( !Xwd(-1,!GtPPN), Calli!GETTAB );
		If !lh( Mask:Ppn[Mptr] ) = 0
		 then Mask:Ppn[Mptr]_ ReadPpn( Mask:Ppn[Mptr] );
		SetPpn( Mask:Ppn[Mptr] );

		If ( 0 = (Mask:File[Mptr] lor Mask:Ext[Mptr]) )
		 then Mask:File[Mptr]_ Mask:Ext[Mptr]_ CvSix("*");

		Mask:Flg[Mptr]_ True;
	     end "one entry"

end;
