
begin

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)DULWLD.REQ" source!file;
require "LUDWLD.REQ" source!file;
require "MFDSCN.REQ" source!file;

record!class Link(  Integer PPN, Hash, Disk, Kill;
		    Boolean LUD, DUL, UFD;
		    String Name, User;  r!p (link) Next );

record!class Hash( Integer BadH; r!p (link) Info; r!p (hash) Next );

r!p (hash) HashList, Hptr;
r!p (link) UserList, Last, Lptr;

own integer User1, User2, L.Only, D.Only, U.Only, Total.PPNs;


procedure BadHash( Integer Bad; r!p (link) r );
begin
    hash:Next[ Hptr ]_ New!Record( hash );
    Hptr_ hash:Next[ Hptr ];
    hash:BadH[ Hptr ]_ Bad;
    hash:Info[ Hptr ]_ r
end;


Simple String procedure LPad( String S; Integer Size );
Return( ("               "&S)[16+length(s)-size for size] );


Simple String procedure RPad( String S; Integer Size );
Return( (S&"               ")[1 for size] );


Simple Integer Procedure LudHash;
Start!code
    define T1=1, T2=2, T3=3, T4=4, I=5, J=6, K=7, A='13, B='14, C='15;
    label Hash, Rnd1, Rnd2;
	MOVE	T1,USER1;
	MOVE	T2,USER2;
	SETZ	I,;
	MOVE	A,['555555555555];
	MOVE	B,['361275431652];
	MOVE	C,['612754316523];
	MOVEI	J,4;			! times to loop;
HASH:	ADD	B,T1;
	ROTC	T1,-'22;
	MOVEI	K,5;
RND1:	MOVE	T3,B(I);
	MUL	T3,[5*5*5*5*5*5*5*5*5*5*5*5*5*5*5];
	ADDM	T4,C(I);
	AOJE	I,RND2;
	MOVNI	I,1;
	TRNE	B,1;
	SKIPL	C;
	MOVEI	I,0;
	EXCH	A,C;
RND2:	SOJG	K,RND1;
	SOJG	J,HASH;
	XOR	C,B;
	XOR	C,A;
	MOVE	T1,C;
end;


procedure AddLink( Integer PPN, Type, Hash; String Username );
begin

    Last_ Lptr_ UserList;
    While ( Lptr_ link:Next[ Lptr ] ) and ( PPN > link:PPN[ Lptr ] )
     do Last_ Lptr;
    If ( not Lptr ) or ( PPN < link:PPN[ Lptr ] )
     then begin
	Total.PPNs_ Total.PPNs + 1;
	link:Next[ Last ]_ new!record( link );
	Last_ link:Next[ Last ];
	link:PPN[ Last ]_ PPN;
	link:Next[ Last ]_ Lptr;
     end
     else Last_ Lptr;

    Case Type of begin
	["D"] begin
	    link:DUL[ Last ]_ True;
	    link:Hash[ Last ]_ Hash;
	    link:Name[ Last ]_ Username;
	  end;
	["M"] begin
	    link:UFD[ Last ]_ True;
	    link:Disk[ Last ]_ Hash;
	    link:User[ Last ]_ Username;
	  end;
	["L"] begin
	    If ( Hash = 0 )
	     then link:Kill[ Last ]_ link:Kill[ Last ] + 1
	     else begin
		link:LUD[ Last ]_ True;
		If ( Hash neq link:Hash[ Last ] )
		 then BadHash( Hash, Last );
	     end
	  end;
	[else] Print( "Illegal Link record: [",Cvos(PPN),"]",Crlf )
     end;

end;


procedure DulPPN( Reference Integer PPN; Reference String Ident );
begin

    User1_ CvSix( Ident[1 for 6] );	! setup username  ;
    User2_ CvSix( Ident[7 for 6] );	!   for hashing   ;
    AddLink( PPN, "D", LudHash, Ident )	! Add the record  ;

end;


procedure LudPPN( Reference Integer PPN, Count; Integer Array Blk );
begin
    AddLink( PPN, "L", Blk[LUD!Hash], null )
end;


procedure FileProc( Reference Integer C, K, B, E; Integer Array LKB );
begin
    AddLink( LKB[!RBNAM], "M", LKB[!RBUSD],
		Cvxstr( LKB[!RBUNM] ) & Cvxstr( LKB[!RBUN1] )  )

end;

boolean procedure WantFile( Reference Integer Filename, Extension );
begin
    Return( Extension = CvSix("UFD") );
end;


Procedure StrainList;
begin
    Last_ Lptr_ UserList;
    While ( Lptr_ link:Next[ Lptr ] )
     do If ( link:LUD[ Lptr ] and link:DUL[ Lptr ] and link:UFD[ Lptr ] )
	 then link:Next[ Last ]_ link:Next[ Lptr ]
	 else Last_ Lptr;
 end;

String Procedure PrintLink( reference integer Count; r!p (link) r );
Return( Lpad( Cvs(Count_ Count+1), 3 ) &
	Lpad( Cvos( !lh( link:PPN[ r ] ) ), 7 ) &
	Lpad( Cvos( !rh( link:PPN[ r ] ) ), 7 ) &
	"  " & Rpad( link:Name[ r ], 12 )
      );

Procedure PrintList;
begin
    Lptr_ UserList;
    D.Only_ 0;  Print( Crlf, "DUL entries missing LUD entries:", Crlf );
    While ( Lptr_ link:Next[ Lptr ] )
     do If ( link:DUL[ Lptr ] ) and ( not link:LUD[ Lptr ] )
	 then Print( PrintLink( D.Only, Lptr ), crlf );
    If ( D.Only = 0 )
     then Print( "--None--", Crlf );

    Lptr_ UserList;
    D.Only_ 0;  Print( Crlf, "LUD entries missing DUL entries:", Crlf );
    While ( Lptr_ link:Next[ Lptr ] )
     do If ( link:LUD[ Lptr ] ) and ( not link:DUL[ Lptr ] )
	 then Print( PrintLink( L.Only, Lptr ), crlf );
    If ( L.Only = 0 )
     then Print( "--None--", Crlf );

    Lptr_ UserList;
    U.Only_ 0;  Print( Crlf, "UFD entry without LUD and DUL entries:", Crlf );
    While ( Lptr_ link:Next[ Lptr ] )
     do If ( link:UFD[ Lptr ] ) and ( not link:DUL[ Lptr ] )
		and ( not link:LUD[ Lptr ] )
	 then Print( PrintLink( U.Only, Lptr ), crlf );
    If ( U.Only = 0 )
     then Print( "--None--", Crlf );

    If Hptr neq HashList
     then Print( Crlf, "Duplicate hashes for same PPN:", Crlf,
		"      PPN        DUL Hash   DUL UserName", Crlf,
		"    Bad Hash     UFD Hash   UFD Name", Crlf, Crlf );
    Hptr_ HashList;
    While ( Hptr_ hash:Next[ Hptr ] )
     do begin
	Lptr_ hash:Info[ Hptr ];
	User1_ link:User[ Lptr ][1 for 6];
	User2_ link:User[ Lptr ][7 for 6];
	Print( Lpad( Cvos( !lh( link:PPN[ Lptr ] ) ), 7 ),
	       Lpad( Cvos( !rh( link:PPN[ Lptr ] ) ), 7 ),
	       Lpad( Cvos( link:Hash[ Lptr ] ), 14 ),
	       Rpad( link:Name[ Lptr ], 14 ), Crlf,
	       Lpad( Cvos( hash:BadH[ Hptr ] ), 14 ),
	       Lpad( Cvos( LudHash ), 14 ),
	       link:User[ Lptr ],
	       Crlf, Crlf );
     end

end;


begin "main program"

    Total.PPNs_ 0;			! Initialize count;
    UserList_ new!record( link );	! Dummy record at head of list ;
    Hptr_ HashList_ new!record( hash );	! Dummy record at head of list ;
    Print( "Reading DUL..." );		! Let the user know about this ;
    DulWld( 0, -1, DulPPN );		! Return "every" entry in DUL  ;

    Print( "LUD..." );			! Let the user know some more  ;
    LudWld( 0, -1, LudPPN );		! Return "every" entry in LUD  ;

    Print( "MFD..." );			! Let the user know the rest   ;
    UfdScn( !Xwd(1,1), Cvsix("*"), Cvsix("UFD"), -1, WantFile, FileProc );
    Print( "Done!", Crlf );		! We are done - all the UFD's  ;

    StrainList;		! ** remove "perfect" users from the list ** ;
    PrintList;		! ** print out all the "bad" records ** ;

    Call( 0, "EXIT" )			! Bye! ;

end "main program"

end;
