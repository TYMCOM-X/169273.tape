begin "ONCALL"

require "MySAIL.DEF" source!file;
require "DAYTIM.REQ" source!file;

require 100 new!items, pnames;

record!class resource ( string class, name, office, home, beeper, code );

record!class magician ( string action;
			record!pointer ( resource ) itemvar wizard;
			record!pointer ( magician ) next );

record!class schedule ( integer date;
			record!pointer ( magician ) wizard;
			record!pointer ( schedule ) next );

set resources, wizards;
list magicians, labels;

r!p ( resource ) r;
r!p ( resource ) itemvar ri;
r!p ( magician ) m;
r!p ( schedule ) schedules, s, t;

integer WizardLength;

Preset!with "        ", [7] "+-------", "+";
Safe String Array TopLine[-1 : 7];
Preset!with "        ", [7] "|       ", "|";
Safe String Array BlankLine[-1 : 7];
Safe String Array BorderLine[-1 : 7];
Safe String Array   DateLine[-1 : 7];
Safe String Array WizardLine[-1 : 7];
Safe String Array   FillLine[-1 : 7];

String  Line, NextDate, Letters, Alphabet;
Integer D1, D2, I, J, K, Count, Consec, Eol;
Boolean resource!found;

Procedure ReadResources;
begin "read resources"
    Own Integer Chan, Brk, Eof;

    Open( Chan_ Getchan, "DSK", '0, 1,0, 512, Brk, Eof_-1 );
    If ( Eof )
     then usererr( 0,0, "Serious DSK error - aborting!", "X" );
    Lookup( Chan, "ONCALL.RES", Eof_-1 );
    If ( Eof )
     then usererr( 0,0, "Cannot find file ONCALL.RES - aborting!", "X" );

    resources_ PHI;

    while not( Eof )
     do begin "read resource records"

	Line_ Input( Chan, Eol );
	If ( length( Line ) )
	 then begin "fill table"

	    r_ new!record( resource );
	    resource:Name[r]_   Line[ 1 for 20];
	    resource:Office[r]_ Line[21 for 12];
	    resource:Home[r]_   Line[34 for 12];
	    resource:Beeper[r]_ Line[47 for 12];
	    resource:Class[r]_  Line[60 for  1];
	    resource:Code[r]_   Line[62 for  4];
	    ri_ new( r );
	    new!pname( ri, Line[62 for 4] );
	    put ri in resources;

	 end "fill table";

     end "read resource records";

    Close( Chan );
    Release( Chan );

end "read resources";

Procedure ScheduleWizard;
begin "schedule a wizard"

    D1_ CvDate( Line[1 for 9] );

    s_ t_ schedules;

    while ( t_ schedule:Next[ t ] )
     do If ( D1 > schedule:Date[ t ] )
	 then s_ t
	 else done;

    If ( t and D1 = schedule:Date[ t ] )
     then begin "setup magician"

	m_ schedule:Wizard[ t ];

	while ( magician:Next[ m ] )
	 do m_ magician:Next[ m ];

     end "setup magician"
     else begin "add a record"

	s_ schedule:Next[ s ]_ new!record( schedule );

	If ( t )
	 then schedule:Next[ s ]_ t;

	schedule:Date[ s ]_ D1;
	m_ schedule:Wizard[ s ]_ new!record( magician );

     end "add a record";

    m_ magician:Next[ m ]_ new!record( magician );
    magician:Wizard[ m ]_ ri;
    magician:Action[ m ]_ Line[11 for 1];

end "schedule a wizard";

Procedure ReadSchedules;
begin "read schedules"
    Own Integer Chan, Brk, Eof;

    schedules_ s_ new!record( schedule );

    Open( Chan_ Getchan, "DSK", '0, 1,0, 512, Brk, Eof_-1 );
    If ( Eof )
     then usererr( 0,0, "Serious DSK error - aborting!", "X" );

    Lookup( Chan, "ONCALL.SCH", Eof_-1 );
    If ( Eof )
     then begin "use current wizards"

	print( "[Using current wizards from ONCALL.RES]"& crlf );
	s_ schedule:Next[ s ]_ new!record( schedule );
	m_ schedule:Wizard[ s ]_ new!record( magician );

	foreach ri such that ri in resources
	 do If ( kequ( resource:Class[ datum( ri ) ], "W" ) )
	     then begin "setup wizard"

		m_ magician:Next[ m ]_ new!record( magician );
		magician:Wizard[ m ]_ ri;
		magician:Action[ m ]_ "+";

	     end "setup wizard";

     end "use current wizards"
     else while not ( Eof )
      do begin "schedule wizards"

	Line_ Input( Chan, Eol );

	If ( length( Line ) )
	 then begin "got one"
	    
	    resource!found_ false;
	    foreach ri such that ri in resources
	     do If ( kequ( resource:Code[ datum( ri ) ], Line[13 for 4] ) )
		 then begin "really available"
		    resource!found_ true;
		    Done;
		 end "really available";

	    If ( resource!found )
	     then ScheduleWizard
	     else Print( "Non-existent scheduled resource: ", Line, Crlf );

	 end "got one";

     end "schedule wizards";

    Release( Chan );

end "read schedules";

String procedure PRec( r!p ( resource ) r );
begin "print resource record"

   Return(  resource:Name[ r ] &
	    resource:Office[ r ] & "  " &
	    resource:Home[ r ] & "  " &
	    resource:Beeper[ r ]
	 );

end "print resource record";


Procedure CycleMagicians;
begin "cycle magicians"

    ri_ lop( magicians );
    put ri in magicians after inf;

end "cycle magicians";


Procedure ChangeSchedule;
begin "change schedule"

    m_ schedule:Wizard[ s ];
    while ( m_ magician:Next[ m ] )
     do case magician:Action[ m ] of begin "take action"

      ["+"] begin
	    remove ( ri_ magician:Wizard[ m ] ) from wizards;
	    put ri in wizards;
	    if not( Props( ri ) )
	     then begin "label it"
		Props( ri )_ Lop( Alphabet );
		put ri in labels after inf;
	     end "label it";
	    remove all ri from magicians;
	    put ri in magicians before 1;
	    K_ 1;
	end;

      ["Y"]["y"] if not( magicians[1] = ri_ magician:Wizard[ m ] )
	     then begin
		remove all ri from magicians;
		if not( Props( ri ) )
		 then begin "label it"
		    Props( ri )_ Lop( Alphabet );
		    put ri in labels after inf;
		 end "label it";
		put ri in magicians before 1;
		K_ 1;
	    end;

      ["-"] begin
	    remove ( ri_ magician:Wizard[ m ] ) from wizards;
	    if ( ri = magicians[1] )
	     then K_ 1;
	    remove all ri from magicians;
	end;

      ["N"]["n"] if ( magicians[1] = ri_ magician:Wizard[ m ] )
	     then begin
		CycleMagicians;
		K_ 1;
	     end
	     else begin
		remove all ri from magicians;
		put ri in magicians after inf;
		K_1;
	     end;

      [else]
     end "take action";

end "change schedule";

Procedure BuildSchedule;
begin "build schedule"

    s_ schedules;
    wizards_ PHI;
    magicians_ labels_ NIL;

    while ( s_ schedule:Next[ s ] )		! foreach schedule line ;
     do If ( schedule:Date[ s ] leq D1 )	! if date prior to start ;
	 then begin "build permanent wizards"	!  then handle magician ;
	    m_ schedule:Wizard[ t_ s ];		! t_ save(s), m_ who ;
	    while ( m_ magician:Next[ m ] )	!  if magician list ;
	     do case magician:Action[ m ]	!  then take action ;
		 of begin "take action"
		  ["+"] put magician:Wizard[ m ] in wizards;
		  ["-"] remove magician:Wizard[ m ] from wizards;
		  [else]
		end "take action";
	 end "build permanent wizards"
	 else done;

    Alphabet_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    Print( Crlf& "On call as of ", CvSDat( D1 ), ":"& Crlf );
    foreach ri such that ri in wizards
     do begin "assign letters"

	Props( ri )_ Lop( Alphabet );
	Put ri in labels after inf;
	Put ri in magicians after inf;
	Print( "  "&Props( ri )&"  ", PRec( datum( ri ) ), Crlf );

     end "assign letters";

    If ( t and schedule:Date[ t ] leq D1 )
     then begin "setup first"
	t swap s;
	ChangeSchedule;
	t swap s;
     end "setup first";

    Print( Crlf &"Start position [A1]: " );
    Line_ Inchwl;

    If length( Line )
     then begin "set start position"

	For K_ 1 step 1 until length( magicians )
	 do if ( kequ( props( magicians[1] ), Line[1 for 1] ) )
	     then done
	     else CycleMagicians;

	K_ Cvd( Line[2 for 1] );

     end "set start position";

    If not( 1 leq K leq Consec )
     then K_ 1;

    print( "[Beginning with "& props( magicians[1] ),
	   ", day ", K, " of ", Consec, "]"& crlf );

    D2_ D1;
    Letters_ null;
    Do begin "build list"

	If ( length( wizards ) = 0 )
	 then usererr( 0,0, "No one available for "&CvSDat(D2), "X" );

	while not( magicians[1] in wizards )
	 do CycleMagicians;

	Print( " "& props( magicians[1] ) );
	Letters_ Letters & Props( magicians[1] );

	If (Consec < (K_ K + 1) )
	 then begin "reset count"
	    K_ 1;
	    CycleMagicians;
	  end "reset count";

	D2_ D2 + 1;

	while ( s )
	 do begin "check schedule"

	    If ( schedule:Date[ s ] leq D2 )
	     then ChangeSchedule
	     else done;

	    s_ schedule:Next[ s ];

	 end "check schedule";

    end "build list" until kequ( "01", CvSDat( D2 )[1 for 2] );

end "build schedule";

Procedure PrintCalendar;
begin "print calendar"

    Print( "Writing ", NextDate[1 for 3], NextDate[5 for 2], ".CAL" & Crlf );
    SetPrint(  NextDate[1 for 3] & NextDate[5 for 2] & ".CAL", "F" );
    SetFormat( 2, 0 );

    Print( Crlf & "           ", NextDate,
       "    Tymshare TYMCOM-X HOT LINE call list" & Crlf & Crlf & Crlf &
       "           sun     mon     tue     wed     thu     fri     sat" &
       Crlf );

	ArrTran( BorderLine, TopLine );
	ArrTran( DateLine, BlankLine );
	ArrTran( FillLine, BlankLine );
	ArrTran( WizardLine, BlankLine );

    D2_ (D1 + 3) mod 7;			! day of week  to start ;
    while ( D2 )
     do begin "blank days"
	D2_ D2 - 1;
	BorderLine[D2]_DateLine[D2]_FillLine[D2]_WizardLine[D2]_ "        ";
     end "blank days";

    Do begin "printing calendar"

	D2_ (D1 + 3) mod 7;		! day of week  to start ;

	DateLine[ D2 ]_   "| "&Cvs( Cvd( CvSDat( D1 )[1 for 2] ) )&"    ";
	WizardLine[ D2 ]_ "|    " & Lop( Letters ) & "  ";

	If ( D2 = 6 )
	 then begin "print this week"

	    For I_ -1 step 1 until 7 do Print( BorderLine[ I ] );
	    Print( Crlf );
	    For I_ -1 step 1 until 7 do Print( DateLine[ I ] );
	    Print( Crlf );
	    For I_ -1 step 1 until 7 do Print( WizardLine[ I ] );
	    Print( Crlf );
	    For I_ -1 step 1 until 7 do Print( FillLine[ I ] );
	    Print( Crlf );

	    ArrTran( BorderLine, TopLine );
	    ArrTran( DateLine, BlankLine );
	    ArrTran( FillLine, BlankLine );
	    ArrTran( WizardLine, BlankLine );

	 end "print this week";

     end "printing calendar" until kequ( "01", CvSDat(D1_D1+1)[1 for 2] );

    If ( D2 neq 6 )
     then begin "print last week"

	For I_ -1 step 1 until 7 do Print( BorderLine[ I ] );
	Print( Crlf );

	For I_ D2+1 step 1 until 6
	 do DateLine[I]_WizardLine[I]_FillLine[I]_BorderLine[I]_ Null;

	For I_ -1 step 1 until 7 do Print( DateLine[ I ] );
	Print( Crlf );
	For I_ -1 step 1 until 7 do Print( WizardLine[ I ] );
	Print( Crlf );
	For I_ -1 step 1 until 7 do Print( FillLine[ I ] );
	Print( Crlf );
	For I_ -1 step 1 until 7 do Print( BorderLine[ I ] );
	Print( Crlf & Crlf & Crlf );

     end "print last week";

end "print calendar";

begin "main program"

    SetBreak( Eol_ GetBreak, #lf&#ff, #cr, "INS" );

    ReadResources;
    ReadSchedules;

    D1_ Calli( 0, -'143 ) / 86400;	! # days since 1-jan-64 ;
    NextDate_ CvSDat( D1+(32-CvD(CvSDat(D1)[1 for 2])) )[4 to inf];
    Print( "Report month-year [", NextDate, "]: " );
    Line_ Inchwl;
    D1_ CvDate( "01-" &
	    (If length(Line[1 for 3]) then Line else NextDate )[1 for 3] &
      "-" & (If length(Line[5 for 2]) then Line else NextDate )[5 for 2] );
    NextDate_ CvSDat( D1 )[4 to inf];

    Print( "Consecutive days on call [1]? " );
    Line_ Inchwl;
    Consec_ If length(Line) then Cvd(Line) else 1;

    BuildSchedule;
    Print( Crlf );
    PrintCalendar;

    foreach ri such that ri in resources
     do If ( kequ(resource:Class[ datum( ri ) ], "*") )
	 then Print( "     *  ", PRec( datum( ri ) ), Crlf & Crlf & Crlf );

    Print( "           name                office         home         beeper" &
	   Crlf );

    foreach ri such that ri in labels
     do Print( "    """, props(ri) & """ ", PRec( datum(ri) ), Crlf );

    Print( Crlf );
    foreach ri such that ri in resources
     do If ( kequ(resource:Class[ datum( ri ) ], "C") or
	     kequ(resource:Class[ datum( ri ) ], "M") )
	 then Print( "        ", PRec( datum( ri ) ), Crlf );

    SetPrint( Null, "T" );

    Call( 1, "EXIT" );

end "main program";

end "ONCALL";
    