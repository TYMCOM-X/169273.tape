entry

	IntINI, IntTTY, IntAUX, IntZAP,  IntCause,
	ZAP!, NTQ!, ESC!, CZAP!, CORG!

;
Begin
require "(SAILIB)SAIL.DEF" source!file;
require "UUOSYM.DEF" source!file;
!get!definitions(tymint);
!get!definitions(proces);
require processes;

define	Int!ZAP      = 12
,	Int!NTQ      = 14
,	Int!ESC      = 16
,	Int!CYEL     = 18
,	Int!CORG     = 20
,	Int!CZAP     = 22
;

internal boolean ZAP!, NTQ!, ESC!, CZAP!, CORG!;	! interrupt causes;
Own integer AuxPort, AuxTrace;

Internal simple boolean procedure IntTrace( Boolean Trace );
AuxTrace_ Trace;

simple procedure ZAP;	ZAP! _ True;	! set flag;
simple procedure NTQ;	NTQ! _ True;	! set flag;
simple procedure ESC;	ESC! _ True;	! set flag;
simple procedure CYEL;
begin
    Auxclv( auxport, 0, !AXSOB );
    If AuxTrace then Print( "[Ax.YEL]" );
end;
simple procedure CORG;
begin
    CORG! _ True;	! set flag;
    If AuxTrace then Print( "[Ax.ORG]" );
end;
simple procedure CZAP;
begin
    CZAP! _ True;	! set flag;
    If AuxTrace then Print( "[Ax.CZAP]" );
end;

Internal simple procedure IntINI(Itemvar INTPRO);
intset (INTPRO,pstack(8));

Internal simple procedure IntTTY;
begin
    ZAP! _ NTQ! _ ESC! _ False;
    intmap (tinass( -1, !IAZAP,Int!ZAP),ZAP,0);  enable (newenb(Int!ZAP));
    intmap (intass(     !IANTQ,Int!NTQ),NTQ,0);  enable (newenb(Int!NTQ));
    intmap (tinass( -1, !IAESC,Int!ESC),ESC,0);  enable (newenb(Int!ESC));
end;


Internal simple procedure IntAux( Integer AuxP );
begin
    AuxPort_ AuxP;
    CZAP! _ CORG! _  False;
    intmap (tinass( AuxPort, !IAYEL, Int!CYEL),CYEL,0);
    enable (newenb(Int!CYEL));
    intmap (tinass( AuxPort, !IAORG, Int!CORG),CORG,0);
    enable (newenb(Int!CORG));
    intmap (tinass( AuxPort, !IAZAP, Int!CZAP),CZAP,0);
    enable (newenb(Int!CZAP));
end;

Internal simple procedure IntZap;
begin
    disable (newenb(Int!ZAP));		! circuit zapper;
    disable (newenb(Int!NTQ));		! notice to quit;
    disable (newenb(Int!ESC));		! user types <esc>;
    disable (newenb(Int!CYEL));		! ignore yellow balls;
    disable (newenb(Int!CORG));		! ignore orange balls;
    disable (newenb(Int!CZAP));		! circuit zapper;
end;

Internal simple procedure IntCause( integer intChan );
start!code
	move	1,intChan;	! channel with bits set;
	andi	1,'77;		! mask out newenb;
	movn	2,1;		! negate;
	movsi	1,'400000;	! set bit 0;
	rot	1,(2);		! rotate the right number of channels;
	tlo	1,'400000;	! set cause interrupt flag;
	calli	1,-'35;		! intact;
	 setom	!skip!;
end;

end;
