Define Generate!Switch!Code( xxx,yyy,zzz ) = {

simple procedure Initialize!switches;	! Set to initial default (0,-1);
begin
    Own Integer Index;
    For Index _ 1 step 1 until $Sw$Length Do
	$Sw$Value[Index] _ If ($Sw$Flag[Index] Land SW$OBV) then 0 else -1;
end;
require Initialize!switches initialization;

simple procedure Apply!switch!defaults;
begin
    Own Integer Index;
    For Index _ 1 step 1 until $Sw$Length Do
	If  $Sw$Value[Index] = -1 then
	    $Sw$Value[Index] _ $Sw$Default[Index];
end;

simple boolean procedure Numeric( String S );
begin
    Own Integer Index;
    For Index _ 1 step 1 until Length(S) Do
	If ("0" leq S[Index for 1] leq "9") or
	   S[Index for 1] = "+" or
	   S[Index for 1] = "-"
	  then
	  else Return( False );
    Return( True );
end;

simple string procedure print!switch(String Nam);
begin
    Integer V, C;
    For C _ 1 step 1 until $Sw$Length do
      If Kequ(Nam, $Sw$Name[C])
	then begin V _ C; Done; End;
    If V = 0 then Return( Null );
    If $Sw$Flag[V] land SW$INT
	then Return( Nam&":"&Cvs($Sw$Value[V]) );
    If $Sw$Flag[V] land SW$NOS then begin
	If $Sw$Value[V] = 0 then Return( "NO"&Nam );
	If $Sw$Value[V] = 1 then Return( Nam );
    end;
    If $Sw$Flag[V] land SW$TXT then begin
	For C _ $Sw$Offsets[V]+1 step 1 until $Sw$Offsets[V+1] do
	begin
	    If $Sw$ArgValue[C] = $Sw$Value[V]
		then Return( Nam&":"&$Sw$ArgString[C] );
	end;
    end;
    Return( Null );
end;

simple integer procedure checksw(String Txt, Val);
begin
    Integer C,V,No;
    V _ 0;
    For C _ 1 step 1 until $Sw$Length do begin
	If Kequ( Txt, $Sw$Name[C] )			! exact match /XXX;
	    then begin V _ C; No _ False; Done End;	! yes -- done;
	If Kequ( Txt, "NO" & $Sw$Name[C] )		! exact match /noXXX;
	    then begin V _ C; No _ True;  Done End;	! yes -- done;
	If Kequ( Txt, $Sw$Name[C][1 for length(Txt)])	! partial match /XXX;
	    then if V then Return( -$SwAMB )		! 2nd time -- error;
		else begin V _ C; No _ False End;	! 1st time -- ok;
	If Kequ(Txt,("NO" & $Sw$Name[C])[1 for length(Txt)])
	    then if V then Return( -$SwAMB )		! 2nd time -- error;
		else begin V _ C; No _ True  End;	! 1st time -- ok;
    end;
    If V = 0 then Return( -$SwUNK );			! switch not found?;
    If No and not ($Sw$Value[V] land SW$NOS)		! typed /no on;
			then Return( -$SwUNK );		!   wrong switch;
    If -1 neq $Sw$Value[V] and not ($Sw$Flag[V] land SW$OBV)
	then Return( -$SwDUP );				! duplicate switch?;
    If Length(Val) then begin
	If No and $Sw$Flag[V] land SW$OBV = 0		! typed /noXXX:value;
		then Return( -$SwISV );			! illegal if not L'OR;
	If $Sw$Flag[V] land SW$INT			! switch is numeric?;
	    then If Numeric(Val)			! typed /XXX:nnn?;
		then If $Sw$Flag[V] land SW$OBV		! yes -- does switch;
		    then $Sw$Value[V] _ $Sw$Value[V]	!    L'OR;
				    lor Cvd(Val)	!    Yes-- V_V|New;
		    else $Sw$Value[V] _ Cvd(Val)	!    No -- set value;
		else Return( -$SwISV );			! no  -- illegal;
	If $Sw$Flag[V] Land SW$TXT then begin		! switch is textual?;
	    Own Integer W;    W _ 0;			!   yes -- initialize;
	    For C _ $Sw$Offsets[V]+1 step 1 until	!   loop in table;
	      $Sw$Offsets[V+1] Do begin			!     for each entry;
		If Kequ(Val,$Sw$ArgString[C])		!   exact match?;
		    then begin W _ C; Done; End;	!   yes -- done;
		If Kequ(Val,($Sw$ArgString[C])[1 for length(Val)])
		    then If W then Return( -$SwAMV )	!   ambig value;
			    else W _ C;			!   set index;
	    end;
	    If W = 0 then Return( -$SwISV )		!   illegal value;
		else If $Sw$Flag[V] land SW$OBV		!   else check L'OR;
		  then If Not No			!     Yes.../No? ;
		    then  $Sw$Value[V] _ $Sw$Value[V]	!	Right! (/X);
				 lor  $Sw$ArgValue[W]	!         LOR value;
		    else  $Sw$Value[V] _ $Sw$Value[V]	!	Wrong! (/noX);
			    land lnot $Sw$ArgValue[W]	!         LAND value;
		  else $Sw$Value[V] _ $Sw$ArgValue[W];	!     No.. set value;
	end;
    end
    else begin						! value not typed;
	If $Sw$Flag[V] land SW$VRQ			! if value required;
	    then Return( -$SwVRQ );			! yes -- give error;
	$Sw$Value[V] _ If $Sw$Flag[V] land SW$NOS	! if /XXX or /noXXX;
	    then If No then 0 else 1			!   then set T or F;
	    else 1;					!   else default =1;
    end;
    Return( V );					! Return index;
end;

};					! End of Generate!Switch!Code macro;


