	.TITLE	LING - ASYNC LINE DRIVER TYPE G (SCC)
	.SBTTL	LING - TYMSHARE/DRE

	XLPAR				;DON'T LIST PARAMETER FILE

.IF NDF ..SAT
  ..SAT=!0
.ENDC

	CODE

	.SBTTL	LING - RESET ROUTINE

;THIS ROUTINE IS CALLED WHEN THE NODE IS STARTED OR RESTARTED
;	C(R4) = ADDRESS OF ADB
;	CALL	ASGINT

ASGINT::CLR	SDTXGP#(SD)		;Clear packet pointer
	MOVB	#10,ADGMSB#(R4)		;INITIALIZE MODEM CONTROL STATUS
	MOV	ADGRCV#(R4),R0		;Make pointer to recv reg
	CALL 	SCCRST			;RESET SCC CHANNEL
;	MOV	ADGCON#(R4),R0		;Make pointer to control reg
;	CLR	@R0			;Point to reg zero
;	MOVB	#9.,@R0			;Point at reset register
;	MOVB	#100,R1			;Put reset channel B command in reg
;	BIT	#10,R0			;Is ths channel A or B
;	BNE	20$			;Channel B
;	ASLB	R1			;Convert to reset channel A command
;20$:	MOVB	R1,@R0 			;Reset channel
	BIS	#$S1AVL,SDSTS1#(SD)	;Indicate socket is available
	BISB	#$A1AVL,ADSTS1#(R4)	;And that interface is available
	RETURN				;Thats all
SCCRST::CLR	6(R0)			;Point to reg zero
	MOVB	#9.,6(R0)		;Point at reset register
	MOVB	#100,R2			;Put reset channel B command in reg
	BIT	#10,R0			;Is ths channel A or B
	BNE	2$			;Channel B
	ASLB	R2			;Convert to reset channel A command
2$:	MOVB	R2,6(R0) 		;Reset channel
	RETURN
	.PAGE
	.SBTTL	LING - INTERRUPT LEVEL ROUTINES

;HERE FOR INPUT READY INTERRUPT
;BEFORE GETTING HERE THE FOLLOWING CODE HAS BEEN EXECUTED:
;	ASnIN:	PUSH	R4		;SAVE R4
;		MOV	#ADBn$,R4	;GET ADDRESS OF ADB
;		JMP	ASGINI		;GO TO COMMON ROUTINE

ASGINI::PUSH	R0			;SAVE R0 TOO
	PUSH	R1			;ALSO R1
	MOV	#21,@ADGCON#(R4)	;POINT TO STATUS REGISTER
	MOVB	@ADGSTA#(R4),R0		;SAVE STATUS BYTE (move ok since not SDLC)
	SWAB	R0
	BISB	@ADGRCV#(R4),R0
	TSTB	R0			;CHECK FOR NON-NULL
	BNE	10$
	TST	ADGST0#(R4)		;DID WE GET A BREAK INTERRUPT
	BPL	10$			;NO, JUST A NULL
;	MOV	#20,@ADGCON#(R4)	;Reset ext status latches
	BIC	#100000,ADGST0#(R4)	;CLEAR THE BIT
	BIS	#040000,R0		;TURN ON FRAMING ERROR BIT
10$:	CMP	#CTYRSR#,ADGCON#(R4)
	BNE	ASGIN3
	PUSH	R0			;SAVE CHARACTER
	BIC	#^C177,R0		;JUST 7 BITS
	CMP	#RS,R0			;IS IT SPECIAL?
	BNE	ASGIN2			;NO-GO ON
BPTINS::BPT				;YES-GO TO XDT IF ITS LOADED
	TST	(SP)+			;FIX UP THE STACK
	BR	DISMIS			;AND GO AWAY

;HERE IF NOT SPECIAL

ASGIN2:	POP	R0			;RESTORE CHARACTER
ASGIN3: MOV	#.LFDAT,R1		;DAFAULT TO DATA TYPE
	TBBE	040000,R0,2$		;TEST FOR BREAK
	MOV	#.LFBRK,R1		;SET BREAK TYPE
2$:	BIC	#^C377,R0		;CLEAR UPPER PART
	ADD	ADINDX#(R4),R0		;GET SDB ADDRESS FOR PORT
	BR	CALLTR			;GO CALL TERMINAL SERVICE

;HERE ON TRAP FROM BPT IF XDT NOT LOADED

	VECTOR	14,BPTLOC,7

BPTLOC:	CMP	#BPTINS+2,(SP)		;WAS IT FROM THE RIGHT PLACE?
	BEQ	2$			;YES-OK
	FSTOP	BPT			;[BAD BPT INSTRUCTION]

2$:	MOV	#ASGIN2,(SP)		;MODIFY RETURN ADDRESS
	RTI				;AND DISMISS
	.PAGE
;HERE FOR OUTPUT DONE OR BREAK INTERRUPT
;BEFORE GETTING HERE THE FOLLOWING CODE HAS BEEN EXECUTED:
;	ASnOU:	PUSH	R4		;SAVE R4
;		MOV	#ADBn$,R4	;GET ADDRESS OF ADB
;		JMP	ASGOUI		;GO TO COMMON ROUTINE

ASGOUI::PUSH	R0			;Save R0
;	TSTB	@ADGSTA#(R4)		;Test break/abort bit
;	BPL	20$			;Not break, handle transmit interrupt
	MOV	ADGCON#(R4),R0		;Get ready to read interrupt cause
;--DE11, V19 CHANGE CHECK FROM RR2 TO RR3 FOR TYPE OF INT CHECK
	BIC	#10,R0			;Make sre we are pointing to ch A
	MOV	#3,@R0			;Select RR3 in ch A
	BITB	ADGEST#(R4),-2(R0)	;Test the interrupt vector for Tx IP
	BNE	15$			;Tx interrupt ready, process it
;	TSTB	@ADGSTA#(R4)		;Test break/abort bit
;	BPL	10$			;Not start of break
	BIS	#100000,ADGST0#(R4)	;Set bit saying we saw bit
10$:	MOV	#20,@ADGCON#(R4)	;Reset ext status latches
	BR	DISMS0			;Done for now, wait for receive int
15$:
.IF NE ..BUG
	INCB	SAVRR0#+1	;COUNT UP AS INTR,BRK SET, BUT NO EXT INTR.
.ENDC
20$:
	PUSH	R1			;And R1
	MOVB	ADINDX#+1(R4),R0	;Find the SDB for this line
	ASL	R0
	MOV	T0SX#(R0),R0
	MOV	SDTXGP#(R0),R1		;Do we have a packet?
	BEQ	60$			;No-go on
	CMP	SDTXGP#(R0),#33		;ESCAPE FOR FUNNY OUTPUT?
	BNE	30$			;NE, NO
	PUSH	SD			;SAVE SD
	MOV	R0,SD			;
	MOV	#50,@ADGCON#(R4)	;Clear the transmit interrupt
	CALL	OUTRDY#			;GO DIRECTLY TO OUTPUT DISPATCH
	POP	SD
	BR	DISMIS
30$:
	TSTB	PKCNT(R1)		;Yes-anything in it now?
	BEQ	60$			;No
	PUSH	R2			;Yes-free up another register
.IF EQ ..SAT
	MOVB	SDTRLW#(R0),R2		;Get line width
	BEQ	40$			;If not specified
	CMPB	SDTRHP#(R0),R2		;At end of line now?
	BHIS	50$			;Yes-must stop here!
.ENDC
40$:	MOVB	PKPNT(R1),R2		;Yes-get next character
	ADD	R1,R2
	MOVB	PKDATA-1(R2),R2
	TBBE	140,R2,50$		;Stop output if not simple printing
					;  character
	INCB	PKPNT(R1)		;Simple character-bump pointer
	DECB	PKCNT(R1)		;And reduce count
.IF EQ	..SAT
	INC	COTCNT#			;Count the character output
.ENDC
	INCB	SDTRHP#(R0)		;bump the horizontal position
	MOVB	R2,@ADGXMT#(R4)		;Output the character
	POP	R2
	BR	DISMIS			;And go restore registers and dismiss

;Here if must stop output now

50$:	POP	R2
60$:	MOV	ADINDX#(R4),R0		;Get index
	CLR	R1			;Function = 0 = .LFRDY
	MOV	#50,@ADGCON#(R4)	;Clear the transmit interrupt
CALLTR:	CALL	TRINTR#			;Call terminal service
DISMIS:	POP	R1			;Restore R1
DISMS0:	POP	R0			;And R0
	MOV	#70,@ADGCON#(R4)	;Clear interrupt cause
	POP	R4			;And restore R4
	RTI				;Dismiss interrupt
	.PAGE
	.SBTTL	LING   - TEN-TIMES-A-SECOND ROUTINES

;GET HERE ONCE EACH TENTH SECOND AT MAIN PROGRAM LEVEL

	TNHSEC	ASGSEC			;PUT CALL INTO TEN-TIMES-A-SECOND LOOP

ASGSEC:	MOV	#ASGADB#,R4		;GET ADDRESS OF FIRST TYPE G ADB
ONCSE1:	TBBE	$A1AVL,ADSTS1(R4),10$	;GO ON IF INTERFACE NOT AVAILABLE
	MOV	@ADGSTA#(R4),R1		;Get a copy of the status bits
	BIC	#^C50,R1		;Get mode bits
	CMPB	R1,ADGMSB#(R4)		;Compare with modem status bits
	BEQ	10$			;No change
	PUSH	SD			;Save a register
	MOVB	ADINDX#+1(R4),R0	;Find the SDB for this line
	ASL	R0
	MOV	T0SX#(R0),SD		;Get the SDB pointer to the right reg for
	CALL	MODCHG			;Update modem changes
	POP	SD
10$:	MOV	ADNEXT#(R4),R4		;STEP TO NEXT ADB
	BNE	ONCSE1			;CONTINUE IF ANOTHER
RTN004:	RETURN				;NO MORE-FINISHED


MODCHG:	MOV	#20,@ADGCON#(R4)	;Reset external change latches
	MOVB	ADGMSB#(R4),R0		;Get the old values
	MOVB	R1,ADGMSB#(R4)		;Update changes
	XOR	R1,R0			;Form mask of changed values
;	because the way the hardware is build and the way crossovers are
;	made we have to change the meanings of DCD and CTS (to RI and DCD)
	BIT	#40,R0			;Did DCD change
	BEQ	30$			;No
	BIT	#40,R1			;Did DCD come on
	BNE	10$			;Yes
	CJMP	CARLOS#			;No
10$:	CJMP	CARDET#
30$:	BIT	#40,R0			;Did ring (DCD) change?
	BEQ	40$			;No
	BIT	#40,R1			;Did ring come on (DCD input)
	BEQ	40$			;No
	CJMP	RNGDET#
40$:	RETURN
	.PAGE
	.SBTTL	LING - OUTPUT ROUTINES

;Subroutine to output data character
;	C(R0) = Character to output
;	C(R1) = Address of packet for continued output
;	C(R4) = Address of ADB
;	C(SD) = Address of SDB
;	CALL	ASGOUT

ASGOUT::MOV	R1,SDTXGP#(SD)		;Store address of packet (if any)
	MOV	R0,@ADGXMT#(R4)		;Output the character
	RETURN				;And return

;Subroutine to perform output function
;	C(R0) = Function code
;	C(R4) = Address of ADB
;	CALL	ASGFNC

ASGFNC::ADD	R0,PC			;Dispatch on the function
	BR	SNDBRK			; 0 = .LFSBK	Send break
	BR	SETHWR			; 2 = .LFSET	Setup hardware
	BR	ANSWER			; 4 = .LFANS	Answer line (NO-OP)
	BR	HANGUP			; 6 = .LFFHG	Force hang-up (NO-OP)
	BR	STPOUT			;10 = .LFSTP	Stop output
	BR	ENDBRK			;12 = .LFEBK	End break
;	BR	SETBSY			;14 = .LFSBS	Set busy condition

;Here to disable output and asert the busy line to the modem

SETBSY:	BICB	#232,ADGWR5#(R4)	;TURN OFF DTR, BREAK, TXENB AND RTS BITS
	MOV	ADGCON#(R4),R0		;PUT CONTROL ADDRESS IN REG
	MOVB	#5,(R0)			;POINT TO WR5
	MOVB	ADGWR5#(R4),(R0)	;CLEAR TX ENABLE
	MOVB	#21,(R0)		;RESET EXT STATUS AND POINT TO WR1
	MOVB	#300,(R0)		;SET REQUEST MODE AND TURN OFF INTS
	CLRB	@ADGXMT#(R4)		;WRITE INTO XMTR AND TURN REQUEST BIT
	RETURN

;Here for stop output function

STPOUT:	CLR	SDTXGP#(SD)		;Clear packet pointer
	RETURN				;Thats all

;Here for start break command

SNDBRK:	BISB	#20,ADGWR5#(R4)		;TURN ON SEND BREAK BIT
	BR	HANGU1

;Here for end of break command

ENDBRK:	BICB	#20,ADGWR5#(R4)		;TURN OFF SEND BREAK BIT
	BR	HANGU1

;Here to answer data set

ANSWER:	BISB	#202,ADGWR5#(R4)	;TURN ON DTR AND RTS
	BR	HANGU1

;Here to hangup data set

HANGUP:	BICB	#202,ADGWR5#(R4) 	;TURN OFF DTR AND RTS
HANGU1:	MOV	#5,@ADGCON#(R4)		;POINT TO REGISTER 5
	MOVB	ADGWR5#(R4),@ADGCON#(R4) ;STORE UPDATED VALUE
;	BR	NULFNC

;Here for No-op

NULFNC:	CLC				;MAKE SURE C IS CLEAR
	RETURN

;HERE FOR ILLEGAL FUNCTION

BADFNC:	SEC				;SET C AS ERROR FLAG
	RETURN

;Here to setup hardware

SETHWR:	PUSH	R0
	PUSH	R2
;	MOV	ADGCON#(R4),R0		;Make pointer to control reg
;	CLR	@R0			;Point to reg zero
;	MOVB	#9.,@R0			;Point at reset register
;	MOVB	#100,R2			;Put reset channel B command in reg
;	BIT	#10,R0			;Is ths channel A or B
;	BNE	2$			;Channel B
;	ASLB	R2			;Convert to reset channel A command
;2$:	MOVB	R2,@R0 			;Reset channel
	MOVB	SDTRS3#(SD),R1		;Get output baud rate
	BIC	#^C$BRORT,R1
	ASHI	3,R1			;*8
	ADD	#ASGRAT,R1		;POINT TO FIRST ENTRY IN TABLE
	MOVB	WR3OFF(R1),ADGWR3#(R4)	;SET UP MASTER COPY OF WR3
	MOVB	WR4OFF(R1),ADGWR4#(R4)	;SET UP MASTER COPY OF WR4
	MOVB	WR5OFF(R1),ADGWR5#(R4)	;SET UP MASTER COPY OF WR5
	TBBE	$T4PAR,SDTRS4#(SD),4$	;Do we want parity handling?
	TBBN	$T1IMO,SDTRS1#(SD),4$	;Really?
	BICB	#200,ADGWR3#(R4)	;Change to 7-bit/char rcv
	BISB	#3,ADGWR4#(R4)		;Eanble parity, even
	BICB	#100,ADGWR5#(R4)	;Change to 7-bit/char trx
	TBBE	$T4ODD,SDTRS4#(SD),4$	;Want odd parity?
	BICB	#2,ADGWR4#(R4)		;YES, Change to odd parity
4$:
	MOV	ADGCON#(R4),R0		;POINT AT CONTROL REGISTER
	MOV	#SCCINI,R2		;POINT TO INITAILIZATION SEQUENCE
;+--KSB2
;	PUSH	#INILEN-3
	PUSH	#INILEN-5	;--KSB2,DON'T COUNT WR3,5,4,3 AND 5
	MOVB	(R2)+,@R0	;POINT TO WR3
	MOVB	(R1)+,@R0		;SET BITS IN THE HARDWARE
	MOVB	(R2)+,@R0	;POINT TO WR5
	MOVB	(R1)+,@R0		;SET BITS IN THE HARDWARE
;--KSB2
	MOVB	(R2)+,@R0		;POINT TO WR4
	MOVB	ADGWR4#(R4),@R0		;SET WR4
	INC	R1			;ADJUST THE POINTER
10$:	MOVB	(R2)+,@R0
	MOVB	(R1)+,@R0		;SET BITS IN THE HARDWARE
	DEC	(SP)
	BGT	10$			;CONTINUE IF MORE TO GO
	TST	(SP)+			;Clear the stack
	MOVB	(R2)+,@R0		;POINT TO WR3
	MOVB	ADGwr3#(R4),@R0		;SET wr3
	MOVB	(R2)+,@R0		;POINT TO wr5
	MOVB	ADGWR5#(R4),@R0		;SET WR5
	MOVB	(R2)+,@R0		;Point to interrupt vector
;	MOVB	ADGVEC#(R4),@(R0)	;Set up interrupt vector
	MOVB	ADGVEC#(R4),@R0		;Set up interrupt vector
	MOV	#ADDINI,R1		;GET LENGTH OF OTHER INITIALIZATION
20$:	MOVB	(R2)+,@R0
	SOB	R1,20$
	POP	R2
	POP	R0
	TST	@ADGRCV#(R4)		;CLAEAR OUT ANY JUNK
	BR	NULFNC			;DO OK RETURN

	PURE
SCCINI:	.BYTE	23,25,24,11.,12.,13.,3,5
INILEN=	.-SCCINI
	.BYTE	22		;POINT AT INTERRUPT ADDRESS VECTOR
	.BYTE	15.,200		;SET EXTERNAL STATUS REGISTER FRO BREAK
	.BYTE	9.,1		;SET STATUS AFFECTS VECTOR
	.BYTE	14.,203		;ENABLE BAUD RATE GENERATOR, USE PCLK AS
				; RB GEN CLOCK, AND BR GEN AS DPLL SOURCE
	.BYTE	21,23		;RESET EXT STATUS, RX INT ENABLE,TX INT ENABLE
	.BYTE	9.,11		;MAST INT ENABLE AND STATUS AFFECTS VECTOR BITS 1,2,3
ADDINI=	.-SCCINI-INILEN-1
	.EVEN
	CODE
	.PAGE
	.SBTTL	LING - ONCE-A-SECOND ROUTINE

;SUBROUTINE CALLED ONCE EACH SECOND AT MAIN PROGRAM LEVEL
;	THIS SUBROUTINE MAKES SURE THAT EACH SIO HAS ITS INTERRUPTS ENABLED!
;	CALL	ASGSEC
.if eq 1
		ONCSEC	ASGSEC

ASGSEC:	MOV	#ASGADB#,R4		;GET FIRST TYPE G ADB
2$:	TBBE	$A1AVL,ADSTS1#(R4),4$	;DOES THIS INTERFACE EXIST?
	MOV	#1,@ADGCON#(R4)		;YES-POINT AT INTERRUPT WORD
	MOV	#23,@ADGCON#(R4)	;SET ITS INTERRUPT ENABLE BITS!
4$:	MOV	ADNEXT#(R4),R4		;ADVANCE TO NEXT TYPE G ADB
	BNE	2$			;CONTINUE IF ANOTHER ONE THERE
	RETURN				;THATS ALL
.endc
	PURE
;	THIS TABLE HAS THE CONSTANTS FOR REGISTERS 4,3,5, AND 11 AND
;	 THE BAUD RATE GENERATOR

WR3OFF=!6		;define distance of write register 3 from ASGRAT
WR4OFF=!2
WR5OFF=!7

	.EVEN	
ASGRAT:	.BYTE	300,342,60,150		;WR3, WR5, WR4, WR11
	.WORD	<12288./96./32.>-2	; 0 =  AUTO-DETECT(9600)BAUD
	.BYTE	301,352			;WR3, WR5
.IIF NE	<.-ASGRAT-INILEN>,.ERROR ;MISMATCH IN INITILIZATION SEQUENCE LENGTH

	.BYTE	0,202,310,120
	.WORD	<19200./50.>-2		; 1 =    50   BAUD, 5 BITS, 1.5 STOP BITS
	.BYTE	1,212

	.BYTE	0,202,310,120
	.WORD	<19200./75.>-2		; 2 =    75   BAUD, 5 BITS, 1.5 STOP BITS
	.BYTE	1,212

	.BYTE	300,342,314,120
	.WORD	<19200./110.>-2		; 3 =   110   BAUD, 8 BITS, 2   STOP BITS
	.BYTE	301,352

	.BYTE	100,242,304,120
	.WORD	<19200./<269./2>>-2	; 4 =   134.5 BAUD, 7 BITS, 1   STOP BIT
	.BYTE	101,252

	.BYTE	300,342,304,120
	.WORD	<19200./150.>-2		; 5 =   150   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,120
	.WORD	<19200./200.>-2		; 6 =   200   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,120
	.WORD	<19200./300.>-2		; 7 =   300   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	100,242,304,120
	.WORD	<19200./300.>-2		;10 =   300   BAUD, 7 BITS, 1   STOP BIT
	.BYTE	101,252

	.BYTE	300,342,304,120
	.WORD	<19200./400.>-2		;11 =   400   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,120
	.WORD	<19200./600.>-2		;12 =   600   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,120
	.WORD	<19200./1200.>-2	;13 =  1200   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<1800./4>>-2	;14 =  1800   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<2000./4>>-2	;15 =  2000   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<2400./4>>-2	;16 =  2400   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<3600./4>>-2	;17 =  3600   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<4800./4>>-2	;20 =  4800   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<7200./4>>-2	;21 =  7200   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<9600./4>>-2	;22 =  9600   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<19200./<19200./4>>-2	;23 = 19200   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,120
	.WORD	<19200./100.>-2		;24 =   100   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,104,120
	.WORD	<1920./<3840./4>>-2	;25 = 38400   BAUD, 8 BITS, 1   STOP BIT
	.BYTE	301,352

	.BYTE	300,342,304,060
	.WORD	<19200./1200.>-2		;26 =    75/1200   BAUD, 1 BITS, 1 STOP BITS
	.BYTE	301,352

	.END

    