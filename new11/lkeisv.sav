.IFF 	;IF NOT USING ATC+X.25

	.SBTTL	LKEISV	- Input interrupt handler
;-----
; LKEISV - Processes input interrupts from the DUV-11/DUP-11 interface
;
; The following code has been executed to get here:
;	<input ready interrupt>
;	PUSH	R4			; Save R4
;	MOV	<address of DDB>,R4	; R4 --> DDB of link needing service
;	JMP	LKEISV			; Go to common input interrupt routine
;-----
LKEISV::
	PUSH	R0			; Save R0
	MOV	@DDLERB#(R4),R0		; Get byte from interface

.IF	EQ	<..DPV-1>	;IF USING DPV
	TBBE	<RXERR!RXABC!RXOVRN!RXABRT>,R0,10$  ;BRANCH IF NO ERROR
	TBBE	<RXERR!RXABC>,R0,5$	;BRANCH IF NOT CRC ERROR OR BIT MISSING
	INC	DDERCS#(R4)		;COUNT IT AS CHECKSUM ERROR
	BR	IABORT			;GO FREE PACKETS IF ANY

; GET HERE FOR DATA OVERRUN OR ABORT RECEIVED
;  IF ABORT RECEIVED, JUST FREE THE PACKETS IF ANY
;  IF DATA OVERRUN, THE RECEIVER MUST BE DISABLED MOMENTARILY SO THAT IT
;	WILL IGNORE THE REST OF THE CURRENT FRAME.
;
5$:
	TBBE	RXOVRN,R0,IABORT	;BRANCH IF NOT DATA OVERRUN(I.E. ABORT RCVD)
	INC	DDEROR#(R4)		;COUNT IT
	BR	IABOR0			;GO DISABLE RECEIVER AND FREE PACKETS

; NO ERROR INDICATION

10$:
	TBBE	RXSTRM,R0,20$		;BRANCH IF NOT SOM
	TST	DDLEIS#(R4)		;WAS INPUT IDLE?
	BEQ	15$			;YES, BRANCH
12$:	INC	DDERCS#(R4)		;NO, AN SOM IN THE MIDDLE OF A FRAME!
	BR	IABOR0			;GO DISABLE RECEIVER AND FREE PACKETS
15$:
	MOVB	DDLEK3#(R4),DDLEIK#(R4)	;SET FRAME BYTE COUNT TO MAX
	MOVB	#ER.UND,DDLEIZ#(R4)	;INIT INPUT STATUS TO UNDERFLOW (FRAME TOO SHORT)
	MOVB	R0,DDLEIA#(R4)		;SAVE FRAME ADDRESS BYTE
	MOV	#ICNTL,DDLEIS#(R4)	;NEXT STATE = GET FRAME CNTRL BYTE
;-----
; Don't really know what DPV will do if a bit string shorter than 32 bits and
;  with good CRC in the last 16 bits is received.  It is assumed here that 
;  DPV will turn on RSOM and REOM at the same time.
;-----
	TBBN	RXENDM,R0,IMSEND	;IF CLOSING FLAG SEEN, IT'S UNDERFLOW
	RTI04				;
20$:
	TST	DDLEIS#(R4)		;INPUT ACTIVE?
	BEQ	12$			;NO, GO RESET RECEIVER
	JMP	@DDLEIS#(R4)		;DISPATCH ON INPUT STATE

.IFF		;IF NOT USING DPV
	BPL	1$			; If no error, process  byte
	INC	DDEROR#(R4)		; Bump overrun error count
	BR	IABORT			; Might as well abort this input frame

1$:	BIC	#$RSTRP,@DDLERS#(R4)	; Clear device strip synch

	TBBN	$CRC,DDLEFG#(R4),ICCRC	; CRC bytes always computed into CRC
	TBBN	$DLE,DDLEFG#(R4),LKEIS1	; If DLE seen flag set, check DLE seq.

	CMPB	R0,#DLE			; This byte == DLE?
	BNE	ICCRC			; No - go calculate CRC-16 for byte
	BIS	#$DLE,DDLEFG#(R4)	; Yes - set DLE seen flag
	RTI04				; Return from interrupt
;-----
; Here to check for <DLE><STX>
;-----
LKEIS1:	BIC	#$DLE,DDLEFG#(R4)	; Clear DLE seen flag
	CMPB	R0,#STX			; Byte == STX?
	BNE	LKEIS2			; No

	TST	DDLEIF#(R4)		; In middle of previous frame?
	BEQ	1$			; No

	INC	DDERCS#(R4)		; Yes - bump checksum error count
	BR	IABOR1			; Discard frame info field

1$:	CLR	DDLECI#(R4)		; Clear input CRC
	MOVB	DDLEK3#(R4),DDLEIK#(R4)	; Set frame byte count to maximum
	MOVB	#ER.UND,DDLEIZ#(R4)	; Init input status to underflow
	MOV	#IADDR,DDLEIS#(R4)	; Input state <-- frame address byte
	RTI04				; Return from interrupt
;-----
; Here to check for <DLE><ETX>
;-----
LKEIS2:	TST	DDLEIS#(R4)		; Input active?
	BEQ	ISPURI			; No - spurious interrupt

	CMPB	R0,#ETX			; Byte == ETX?
	BNE	LKEIS3			; No - bypass
	MOV	#IENDTR,DDLEIS#(R4)	; Input state <-- end transparency
	BR	ICCRC			; Go calculate CRC
;-----
; Here to check for <DLE><SYN>, <DLE><DLE>, and frame abort (<DLE><???>)
;-----
LKEIS3:	CMPB	R0,#SYN			; Byte == SYN?
	BEQ	RTI000			; Yes - ignore it
	CMPB	R0,#DLE			; Byte == DLE?
	BNE	IABORT			; No - abort flag - abort frame
;-----
; Here to calculate partial CRC-16 for input byte
;-----
ICCRC:	TST	DDLEIS#(R4)		; Input active?
	BEQ	ISPURI			; No - spurious interrupt

	PUSH	R0			; Save registers
	PUSH	R1

	MOV	DDLECI#(R4),R1		; Get old partial CRC
	XOR	R1,R0			; XOR old CRC and new byte
	BIC	#177400,R0		; Clear high byte
	ASL	R0			; Convert to word index
	MOV	CRCTAB#(R0),R0		; Get modifier word
	CLRB	R1			; Clear low byte of old CRC
	SWAB	R1			; Move high byte of old CRC to low
	XOR	R0,R1			; XOR modifier and old CRC
	MOV	R1,DDLECI#(R4)		; Save new partial CRC

	POP	R1			; Restore registers
	POP	R0

	JMP	@DDLEIS#(R4)		; Dispatch to correct input state

;-----
; Here on unexpected interrupt when input is idle (spurious interrupt)
;-----
ISPURI:	INC	DDERSI#(R4)		; Bump spurious interrupt count

.IFTF
;-----
; Here to abort input frame
;-----
IABOR0:

.IFT		;IF USING DPV
;-----
; MOMENTARILY RESET 'RXREN' IN ORDER TO FORCE RECEIVER RE-SYNC.  THIS
;  IS REQUIRED FOR ANY ERROR WHICH TERMINATES THE RECEIVE OPERATION IN 
;  MID-FRAME.
;-----
	BIC	#RXREN,@DDLERS#(R4)
	BIS	#RXREN,@DDLERS#(R4)
.IFTF
IABORT:	TST	DDLEIF#(R4)		; Information field?
	BEQ	ISYNCH			; If no info field, search for synch

IABOR1:	PUSH	R1			; Save R1
	MOV	DDLEIF#(R4),R1		; Get 1st packet address
	CLR	DDLEIF#(R4)		; Clear packet list header

1$:	PUSH	(R1)			; Save forward packet link
	FREPKT				; Free the packet
	POP	R1			; Retrieve forward packet link
	BNE	1$			; Continue until whole list freed

	POP	R1			; Restore R1

;-----
; Here to establish character synchronization over the link
;   IT IS NOT NECESSARY FOR DPV TO ESTABLISH SYNCHRONIZATION ON THE NORMAL
;   COMPLETION OF A FRAME.
;-----
ISYNCH:
.IFF		;IF NOT USING DPV
	BIC	#$RSRCH,@DDLERS#(R4)	; Clear receiver search synch bit
	BIS	#<$RSRCH!$RSTRP>,@DDLERS#(R4) ; Set synch search & strip synch
	BIC	#<$DLE!$CRC>,DDLEFG#(R4); Clear frame transparency flags
.IFTF
	CLR	DDLEIS#(R4)		; Clear input state (go idle)
;-----
; Here to return from interrupt level
;-----
RTI000:	RTI04				; Return from interrupt
	.SBTTL	Protocol input states - frame address & control bytes
.IFF		;IF NOT USING DPV
;-----
; Here on frame address byte input
;-----
IADDR:	MOV	#ICNTL,DDLEIS#(R4)	; Input state <-- frame control byte
	MOVB	R0,DDLEIA#(R4)		; Save the address byte
	RTI04				; Return from interrupt
.IFTF
;-----
; Here on frame control byte input
;-----
ICNTL:
	MOVB	R0,DDLEIX#(R4)		; Save control byte
	CLRB	DDLEIZ#(R4)		; Frame format OK so far
.IFT		;IF USING DPV
	TBBN	RXENDM,R0,IMSEND	;BRANCH IF EOM RECEIVED
.IFTF
	MOV	#IINF0,DDLEIS#(R4)	; Input state <-- 1st byte of info fld
	RTI04				; Return from interrupt
	.SBTTL	Protocol input states - frame information field
;-----
; Here on first byte of information field
;-----
IINF0:	MOV	#IINFO,DDLEIS#(R4)	; Input state <-- rest of info field
	MOV	#DDLEIF#,DDLEIP#(R4)	; Let new packet code set 1st pkt ptr
	ADD	R4,DDLEIP#(R4)		;   by setting "link" of current to 1st
	MOV	#PKTYPE,DDLEIB#(R4)	; Start putting bytes into pkt type
	MOVB	#.P1MAX,DDLEIC#(R4)	; 1st pkt has more bytes (incl. header)
	BR	INEWP1			; Merge with new packet code

;-----
; Here to get a new packet for additional information field bytes
;-----
INEWPK:	MOV	#PKDATA,DDLEIB#(R4)	; Start putting bytes into pkt data
	MOVB	#PKCMAX,DDLEIC#(R4)	; Init packet byte counter

INEWP1:	PUSH	R1			; Save R1
	MAKPKT	.PLSTP#			; Get a free packet
	BCC	INEWP2			; Got a packet ==> go initialize it
	POP	R1			;RESTORE R1
;-----
; No packets available for frame information field bytes
;	***SHOULD MARK $IBUSY AND SEND RNR***
;-----
IBUSY:	INC	DDERNP#(R4)		; Bump "No Packets Available" count
	BR	IABOR0			; Go  re-synch the interface & clean up

;-----
; Here to initialize new packet for information field bytes
;-----
INEWP2:	MOV	R1,@DDLEIP#(R4)		; Set link to new packet
	MOV	R1,DDLEIP#(R4)		; Save link to new current packet
	ADD	R1,DDLEIB#(R4)		; Init packet byte pointer
	MOVB	#PKCMAX,PKCNT(R1)	; Set full packet count
	CLRB	PKTYPE(R1)		; Clear packet type
	CLRB	PKSOC(R1)		; Clear packet socket number
	CLRB	PKSEQ(R1)		; Clear packet sequence number
	POP	R1			; Restore R1

;-----
; Here to input a byte of the information field
;-----
IINFO:	TSTB	DDLEIK#(R4)		; Check frame byte count
	BNE	1$			; Still room left - stuff byte

	MOVB	#ER.OVF,DDLEIZ#(R4)	; Frame status <-- overflow
					;WHO IS GOING TO SEE THIS ???
	BR	IABOR0			; Go re-synch the interface & clean up

1$:	TSTB	DDLEIC#(R4)		; Check packet byte count
	BEQ	INEWPK			; Packet full ==> get new packet

	MOVB	R0,@DDLEIB#(R4)		; Put byte into packet
	INC	DDLEIB#(R4)		; Bump byte pointer
	DECB	DDLEIK#(R4)		; Bump frame byte count
	DECB	DDLEIC#(R4)		; Bump packet byte count

.IFT		;IF USING DPV, CHECK IF EOM RECEIVED
	TBBE	RXENDM,R0,5$		;BRANCH IF NOT EOM YET
	CLR	R0			; Clear residue in register
	BISB	DDLEIC#(R4),R0		; Get # of bytes until packet full
	NEG	R0			; Negate # bytes until full
	ADD	#PKCMAX,R0		; PKCMAX-(#bytes until full)=#bytes
	ADD	#PKCNT,DDLEIP#(R4)	; Point pkt ptr at PKCNT to store count
	MOVB	R0,@DDLEIP#(R4)		; Store packet byte counter in packet
	BR	IMSEND			;and send to mainloop
5$:
.IFTF

	RTI04				; Return from interrupt
	.SBTTL	Protocol input states - end frame & verify CRC

.IFF		;IF NOT USING DPV
;-----
; Here to end transparency
;-----
IENDTR:	MOV	#ICRC1,DDLEIS#(R4)	; Input state <-- CRC byte 1
	BIS	#$CRC,DDLEFG#(R4)	; Next bytes are CRC bytes
	TST	DDLEIF#(R4)		; Information field?
	BEQ	1$			; If no info field, return (RTI)

	CLR	R0			; Clear residue in register
	BISB	DDLEIC#(R4),R0		; Get # of bytes until packet full
	NEG	R0			; Negate # bytes until full
	ADD	#PKCMAX,R0		; PKCMAX-(#bytes until full)=#bytes
	ADD	#PKCNT,DDLEIP#(R4)	; Point pkt ptr at PKCNT to store count
	MOVB	R0,@DDLEIP#(R4)		; Store packet byte counter in packet
1$:	RTI04				; Return from interrupt

;-----
; Here on CRC byte 1
;-----
ICRC1:	MOV	#ICRC2,DDLEIS#(R4)	; Input state <-- CRC byte 2
	RTI04				; Return from interrupt

;-----
; Here on CRC byte 2 - end frame, verify, and send to main if CRC ok
;-----
ICRC2:	BIC	#$CRC,DDLEFG#(R4)	; Got 2nd CRC byte
	TST	DDLECI#(R4)		; Input CRC result == 0?
	BEQ	IMSEND			; Yes - frame assumed to be good
	INC	DDERCS#(R4)		; Bump checksum error count (CRC error)
	JMP	IABORT			; CRC result non-zero ==> discard frame

.IFTF
;-----
; Here to insert frame into input-to-main ring
;	*****IF ADDR=1 OR 3, PASS THE FRAME AS A COMMAND OR RESPONSE
;	*****OTHERWISE, DISCARD THE FRAME.
;-----
IMSEND:
	CMPB	DDLEIA#(R4),DDLERC#(R4)	; Input addr.=rcvd cmd addr. ?
	BEQ	10$			; Branch if yes
	CMPB	DDLEIA#(R4),DDLERR#(R4) ; Input addr. = rcvd response addr. ?
	BEQ	5$			; Branch if yes
	INC	DDERPC#(R4)		; Count it as a protocol error
	JMP	IABORT			; and ignore the frame
5$:
	BISB	#200,DDLEIZ#(R4)	; Input is a response, set the MSB of 
					; the input-to-main status 					; If the input is a command, leave the
					; If the input is a command, keep the
					; MSB of the status byte cleared.
10$:
	MOV	DDLEQP#(R4),R0		; Get input-to-main ring putter
	MOV	DDLEIF#(R4),(R0)+	; Store info field packet list header
	MOVB	DDLEIX#(R4),(R0)+	; Store frame control byte
	MOVB	DDLEIZ#(R4),(R0)+	; Store input to main status byte
	CMP	R0,DDLEQE#(R4)		; End of ring?
	BLO	1$			; No
	MOV	DDLEQB#(R4),R0		; Yes - reset putter to start of ring
1$:	CMP	R0,DDLEQT#(R4)		; Ring full?
	BNE	2$			; No - go resynch device
	INC	DDEROR#(R4)		; Yes - bump overrun error count
	JMP	IABORT			; Throw this frame away

2$:	MOV	R0,DDLEQP#(R4)		; Update ring putter
	CLR	DDLEIF#(R4)		; Clear packet list pointer
	JMP	ISYNCH			; Go resynch device

.ENDC		;INPUT INTERRUPT SERVICE ROUTINE
 