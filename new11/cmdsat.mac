	.TITLE	CMDSAT - TYMSAT COMMAND DECODER ROUTINES
	.SBTTL	CMDSAT - NEXILIS/JRG

	XLPAR

;DEFINE MACRO FOR INLINE MESSAGES

	.MACRO	INLMES	MES
	CALL	INLOUT#
	.ASCIZ	MES
	.EVEN
	.ENDM

.IF NDF ..IIX			;1/28/86- TAI, SMODE SUPPORT
 ..IIX=!0			;DEFAULT IIX TO 0
.ENDC

;GENERATE COMMAND DECODER ENTRY TABLE

	PURE

SATENT::.WORD	SATCMD		;.CXCMD =  0 - ENTER COMMAND LEVEL
	.WORD	CLRCMC#		;.CXCIN =  2 - COMMAND INTERRUPT
	.WORD	SATECL		;.CXECL =  4 - END OF COMMAND LINE
	.WORD	SATRST		;.CXRST =  6 - RESET COMMAND DECODER
	.WORD	SATACK		;.CXACK = 10 - CONNECT ACK PACKET
	.WORD	SATNAK		;.CXNAK = 12 - CONNECT NAK PACKET
	.WORD	SATDIS		;.CXDIS = 14 - DISCONNECT PACKET
	.WORD	JNKCPX#		;.CXDAK = 16 - DISCONNECT ACK PACKET

	CODE
	.PAGE
;HERE TO ENTER NETWORK COMMAND LEVEL
;	ENTRY INDEX = .CXCMD

SATCMD:	CALL	WATIDL#			;MAKE SURE OUTPUT IS IDLE
	BIS	#$T1CMD!$T1ECH!$T1ECM,SDTRS1#(SD);INDICATE COMMAND MODE
	CLRB	SDTRBS#(SD)		;MOVE DATA INTO COMMAND BUFFER ONLY FOR BREAKS
	BIC	#$T1DEM!$T1IMI!$T1IMO!$T1SOP,SDTRS1#(SD)
	BIS	#$T3LGI,SDTRS3#(SD)	;INDICATE LOGIN MODE
	MOVB	#$T2ELC,SDTRS2#(SD)	;SET TERMINAL PROFILE BITS
	BIC	#$T4HOE!$T4HIE,SDTRS4#(SD);DEFAULT IS NO INPUT OR OUTPUT HOLD
	MOV	#$T5LCO!$T5LCI!$T5XFC!$T5AOH!$T5BDE,SDTRS5#(SD)
	MOV	SDTPVC#(SD),R1		;GET PVC POINTER IF ANY
	BEQ	10$			;SKIP THIS TEST FOR A NON-PVC LINE
	TSTB	1(R1)			;SILENT PVC?
	BMI	SATCM2			;YES
10$:	MOV	#..MOD#,R1		;POINT TO HEADER MESSAGE
	CALL	OUTSTR#
	INLMES	<<CR><LF>"-">		;TYPE FIRST PART OF NODE # LINE
	MOV	#THSNOD#,R1		;TYPE NAME OF THIS NODE
	CALL	OUTSTR#
	INLMES	<"-">
	MOVB	SDSOC#(SD),R0		;GET SOCKET NUMBER = "PORT NUMBER"
	SWAB	R0			;PUT IT IN THE RIGHT POSITION
	ROR	R0
	MOV	R0,SDTRC3#(SD)		;SAVE IT
	CALL	OUTDIG			;OUTPUT 3 DIGITS
	CALL	OUTDIG
	CALL	OUTDIG
	INLMES	<"-">
SATCM2:	MAKPKT	.PLOPT#			;GET A PACKET
	BCS	RETMSG			;TELL THE USER TO HANG ON
	MOV	R1,R2			;CLEAR THE PACKET
	MOV	#24,R0
14$:	CLR	(R2)+
	SOB	R0,14$
	MOV	#.PTCON*400+37,PKCNT(R1);SETUP THE CONNECT PACKET

	MOV	#13*400+200,PKDATA(R1)
	MOVB	#.IDTR#,PKDATA+14(R1)
	MOVB	#3,PKDATA+31(R1)
	MOV	SDTPVC#(SD),R2		;Setup address of pvc string.
	BEQ	18$			;Branch if there isn't.
	MOVB	(R2),R2			;GET THE TERM TYPE
	BEQ	18$			;NO TERMINAL TYPE OVERRIDE
	SUB	#4,R2			;DE BIAS TERMINAL TYPE
	MOVB	R2,PKDATA+33(R1)	;STORE IN CONNECT PACKET
	BR	19$
18$:	MOVB	SDTRCT#(SD),PKDATA+33(R1);STORE TERMINAL TYPE
19$:	MOVB	SDTRS3#(SD),R0		;GET BAUD RATE
	BIC	#^C$T3ORT,R0
	MOVB	R0,PKDATA+34(R1)	;STORE IT IN THE CONNECT PACKET
	TBBE	$T4LCP,SDTRS4#(SD),20$	;LOCAL COPY TERMINAL?
	BISB	#002,PKDATA+35(R1)	;YES
20$:	TBBE	$T0ASK,SDTRS0#(SD),30$	;IS THE DEBUG ESCAPE ON
	TBBN	$T3ACA,SDTRS3#(SD),40$	;YES, DOES THE USER WANT IT
30$:	MOVB	SDSOC#(SD),PKDATA+5(R1)	;NO, GO TO TYMNET
	MOV	#"TY,PKDATA+6(R1)
	MOV	#"MN,PKDATA+10(R1)
	MOV	#"ET,PKDATA+12(R1)
35$:	
;----- 1/28/87- TAI    S-MODE SUPPORT PIR 1824
; set IIX request bit in Terminal side, pass IIX request to
; LNKPK side through PKDATA+27, bit 40 (octal) on

.IF NE ..IIX				;S-MODE IIX SUPPORT
	BICB	#40,PKDATA+27(R1)	;DEFAULT TO NOT SUPPORT IIX
	BIC	#$T1IIX,SDTRS1#(SD)	;NON-IIX REQUEST
        CLR     SDIXTP#(SD)             ;CLEAN UP TEMPORARY BUFFER PTR
	CLRB	SDIXCT#(SD)		;CLEAN UP LOAD MESSAGE LENGTH
	CMPB	SDTRTT#(SD),#T.CRTO	;PRISM TYPE TERMINAL?
	BNE	37$			;NO, DO NOTHING
	BIS	#$T1IIX,SDTRS1#(SD)	;SET IIX REQUEST BIT
	BISB	#40,PKDATA+27(R1)	;SET IIX IN CONNECT PKT
37$:
.ENDC
;------

	INCB	SDPCNT#(SD)		;BUMP PACKET COUNT
	CJMP	SNDPKT#			;AND SEND THE CONNECT PACKET
40$:	BIC	#$T3ACA,SDTRS3#(SD)	;CLEAR THE REQUEST FLAG
	MOVB	#.IDST#,PKDATA+4(R1)	;GO FOR STATUS DEVICE
	MOVB	#300,PKDATA+24(R1)	;SET PRIV
	BR	35$
;HERE IF DISCONNECTED OR OUT OF RESOURCES - HANG HIM UP!
RETMSG:	INLMES	<<CR><LF>"no path available...disconnecting">
HANGSH:	CJMP	HUNGUP#			;CLEAN UP AFTER HIM
	.PAGE
;HERE FOR DISCONNECT OR KILL PACKET
;	ENTRY INDEX = .CXDIS

SATDIS:	BIC	#$S1HLD,SDSTS1#(SD)	;MAKE SURE OUTPUT NOT HELD
	CALL	GETPKT#			;Get address of packet
	PUSHB	PKDATA(R1)		;SAVE THE REASON
	MOV	#.PTDAK*400,PKCNT(R1)	;CHANGE TO A DISCONNECT ACK PACKET
	CALL	PKTRTX#			;AND SEND IT BACK
;----- 2/27/87, DTAI
.IF NE ..IIX
	CALL	OUTMSG#
.ENDC
;----2/27/87

SATDI1:	BIS	#$T1CMD!$T1ECH!$T1ECM,SDTRS1#(SD);INDICATE COMMAND MODE
	BIC	#$T1DEM,SDTRS1#(SD)
	BIS	#$T3LGI,SDTRS3#(SD)	;INDICATE LOGIN MODE
	CLRB	SDTRBS#(SD)		;GO BACK INTO HOLD MODE
	POPB	R3			;RESTORE REASON CODE
	CMPB	#.ERSVR,R3		;SUPERVISOR REQUEST?
	BEQ	HANGSH			;YES-GO HANG HIM UP
	CMPB	#.ERSPR,R3		;SUPERVISOR PROBLEM?
	BEQ	RETMSG			;YES-ANOTHER REASON TO HANG HIM UP!
	CMPB	#.ERGWD,R3		;CHECK FOR NO UPLINE CONNECTION
	BEQ	RETMSG
	CMPB	#.ERPLS,R3		;WAS IT THE PLEASE SEE YOUR REP CODE
	BEQ	TIMOUT			;YES
	TST	SDTPVC#(SD)		;IS THIS A PVC LINE
	BNE	HANGSH
;--- 3/21/87, TAI - S-MODE SUPPORT 
;  Allow more time (2 seconds instead half second) for the long
;  load message to be displayed and parity state to be changed.
;  If load message longer than 16 decimal bytes, use 2 seconds
;   otherwise use half seconds
;
	MOV	#JIFO2#,R0		;DELAY FOR 1/2 SECOND
.IF NE ..IIX
	PUSH	R1			;RESPECT R1
	MOVB	SDIXCT#(SD),R1		;GET BYTE COUNT
	CMPB	R1,#20			;MORE THAN 16 DECIMAL BYTE?
	BLO	1$			;NO, USE 1/2 SECOND
	MOV	#JIFX2#,R0		;DELAY FOR 2 SECONDS
1$:	POP	R1
.ENDC
;---- 3/21/87

	MOV	#SATCM2,R1		;AND THEN START OVER!
	CJMP	TIMREQ#

TIMOUT:	INLMES	<<CR><LF>"please see your representative"<CR><LF>"if you are having trouble logging in">
	CJMP	HUNGUP#

;HERE TO RESET COMMAND DECODER (CALLED FROM CLEAR LOGIN MODE ROUTINE)
;	ENTRY INDEX = .CXRST

SATRST:	MOVB	#200,SDTRBS#(SD)	;SET BREAK SET FOR NORMAL MODE
	MOV	#SATCM2,R1		;CLEAR POSSIBLE TIMERS
	CALL	TIMKIL#
	MOV	#TIMOUT,R1
	CALL	TIMKIL#
	JMP	CLRCMC#			;CLEAR COMMAND BUFFER AND RETURN


;HERE FOR CONNECT NAK PACKET
;	ENTRY INDEX = .CXNAK

SATNAK:	BIC	#$S1HLD,SDSTS1#(SD)	;MAKE SURE OUTPUT NOT HELD
	CALL	GETPKT#			;Get address of packet
	PUSHB	PKDATA(R1)		;SAVE THE REASON
	CALL	JNKCPX#			;GIVE BACK THE PACKET
	BR	SATDI1			;CONTINUE
	.PAGE
;HERE FOR CONNECT ACK PACKET
;	ENTRY INDEX = .CXACK
;	C(R0) = FLAG BYTE FROM ACK PACKET

SATACK:	CALL	SNDTRP#			;MOVE ANY ACCUMULATED DATA TO COMMAND BUFFER
	BIC	#$T1CMD!$T1ECM!$T1SOP,SDTRS1#(SD) ;LEAVE COMMAND MODE
	MOV	#TIMOUT,R1		;Point to timeout address
	CALL	TIMKIL#			;Kill any prevous timer
	MOV	#JIFX90#,R0		;Set for 1.5 minute timeout
	MOV	#TIMOUT,R1
	CALL	TIMREQ#			;Put in timer request
	MOV	SDTPVC#(SD),R3		;Setup address of pvc string.
	BEQ	8$			;Branch if there isn't.
	PUSH	R3			;Save for later
	ADD	#2,R3			;Skip over control information
	BIS	#$T1ACT,SDTRS1#(SD)	;Turn off echo funny way
2$:	MOVB	(R3)+,R0		;Obtain next pvc string char.
	BEQ	6$			;Branch if end of pvc string.
	PUSH	R3			;PUTCHR CLOBBERS R3!
	CALL	TRDATA#			;Else, stuff pvc char in kbpkt.
	POP	R3			;RESTORE R3.
	BR	2$			;And go back for next pvc char.
6$:	CALL	SNDTRP#			;Flush out data
	BIC	#$T1ACT,SDTRS1#(SD)	;Turn echo back on
	POP	R3			;Get back start of pvc string
	TSTB	1(R3)			;Check for silent login
	BMI	10$			;Skip over this message 
	INLMES	<<CR><LF>"Circuit building in progress."> ;Inform user.
	BR	10$			;And go on.
8$:	INLMES	<<CR><LF>"please log in: "> ;TYPE TYMNET STYLE PROMPT
10$:	CALL	GETCMC#			;GET ANY SAVED INPUT
	 BR	 14$			;ALL DONE
	CALL	PUTCHR#			;SEND ON THE CHAR
	 NOP
	CMPB	#';,R0			;CHECK FOR DELIMITER
	BEQ	12$			;HANDLE END OF LINE
	CMPB	#ESC,R0			;CHECK FOR ESCAPE
	BNE	10$			;GO DO NEXT ONE
12$:	CALL	SNDTRP#			;START SHIPPING  DATA OFF TO HOST
	BR	10$			;CONTINUE WITH REST OF SAVED DATA

14$:	TBBN	$T3ECL,SDTRS3#(SD),20$	;BRANCH IF NOT END OF LINE
	MOV	#CR,R0			;STORE CR IN BUFFER
	CALL	PUTCHR#
	 NOP
	CALL	SNDTRP#			;START SHIPPING  DATA OFF TO HOST
	BR	10$

20$:	BIC	#$T3ECL,SDTRS3#(SD)	;CLEAR THIS BIT SO GETCMC WILL CONTINUE TO WORK
	MOV	#OUTGET#,SDTROD#(SD)	;RESET OUTPUT DISPATCH VECTOR
	TBBE	$T4SEL,SDTRS4#(SD),30$	;SELECTRIC TERMINAL?
	JMP	ENBKEY#			;YES-GO ENABLE ITS KEYBOARD

30$:	JMP	OUTGET#			;NO-THATS ALL!

SATECL:	RETURN
	.PAGE

	.SBTTL	CMDSAT - LOCAL SUBROUTINES

;SUBROUTINE TO OUTPUT VALUE AS SINGLE OCTAL DIGIT
;	CALL	OUTDIG

OUTDIG:	POP	SDTROD#(SD)		;PUT RETURN ADDRESS IN RIGHT PLACE
	CLR	R0			;GET NEXT 3 BITS
	MOV	#3,R2
2$:	ROL	SDTRC3#(SD)
	ROL	R0
	SOB	R2,2$
	ADD	#'0,R0			;CHANGE TO ASCII
	CJMP	OUTCHR#			;OUTPUT IT AND RETURN

	.END
