COPIER.DOC - Design specifications for COPIER program.
Initial layout 29-Jun-87 by Joe Smith.  Revised 3-Aug-87.


The program "COPIER" has been created to overcome the deficiencies in the
current TELECOPY process.  It is designed to be run by the general user.

Goals:

  o  Replaces the AFD for Automatic File Deployment.
  o  Maintains a list of important files and their checksums.
  o  Transfers only files that have been changed.
  o  Minimizes network traffic when verifying checksums.
  o  Minimizes disk I/O and CPU time when verifying checksums.
  o  Preserves creation date and time on files transferred.
  o  Preserves protection code and other file attributes.
  o  Never leaves a file half updated or with the wrong protection.
  o  Uses GFD to verify user has access to source and destination direcories.
  o  Transfer can be initiated from either source or destination system.
  o  Simple, self-documenting commands.
  o  Data file is readable, can be modified.
  o  Can be run on a daily basis without much overhead.
  o  Keeps a concise log of transfer results.
  o  Does not require license to run.

Non-goals:

  o  Does not preserve license (may be added in a later version).
  o  Does not copy files directly into SYS:.
  o  Does not require everything from the command line.

Comments:

  To avoid unnecessary disk I/O, COPIER does not recompute the checksum of
  every single file in the checksum-list unless explicitly asked to.

Comparison to AFD

  AFD master files are: AFDCOM.SAV,AFDPUT.SAV,AFDPT0,AFDPRP.D00,AFDAUX.SAV,
  AFDPT1,AFDPRP.D05, and optionally AFDAGE.SPC,AFDCLN.SPC.
  AFD slave files are:  AFDCOM.SAV,AFDMAS.SPC,AFDGT1,AFDGT2.SAV,AFDGT3,
  AFDGT4.SAV,AFDGT5,AFDGT6.SAV, and optionally AFDPRP.D02,AFDPRP.D04,
  AFDPRP.D06,AFDCLN.SPC,AFDAGE.SPC,AFDNCP.SPC.

  The "Automatic File Deployment" system requires 7 to 9 files on the
  master system, and 8 to 14 files on each slave.  COPIER requires only
  one file, and that file is the same both systems.  The one file can be
  created and maintained from within COPIER - no knowledge of an editor
  is required.

Comparison to RDIST

  RDIST recomputes the checksums of all files (which may take more than an
  hour) and does not post processing (does not preserve file attrubutes).
Internal operation:

1) COPIER can be run from either the source or the destination system.  The
   same commands can be given on either system - they specify the COPY TO
   system, the COPY FROM system(s), and the name of the checksum-list.
   The following is an example:
        .R COPIER                       ;Run the COPIER program from (SYS)
        *COPY FROM 95                   ;Source system is 95
        *COPY TO 26,31                  ;Destination systems
        *READ CHECKSUM-LIST TXSNET.CKS  ;List of files to check
        *RUN THEN LOGOUT                ;Start check and copy process

2) When given the command "READ CHECKSUM-LIST <file>", COPIER reads the
   specified file and calculates its signature.  (The signature is the
   checksum of the checksum-list file itself.)  COPIER types out all lines
   in the checksum-list that start with a colon and indicates it is done by
   outputting a line in the format of ":SIGNATURE is BACDEF".

Operation on the source (COPY FROM) system:

3) When the "RUN" command is given on the COPY FROM system, COPIER performs an
   "UPDATE CHECKSUM-LIST" operation.  A quick scan of the directory is made to
   see if any new files match the file list or if any old files have had their
   creation date changed.  Any differences are reported (and optionally logged)
   and the new checksums are added to the checksum-list.  The signature is
   recalculated if any part of the checksum-list has changed.

4) The COPY FROM system is the master; it builds aux circuits to all of the
   COPY TO systems one at a time and runs COPIER there.

5) The slave COPIER is told to GFD to the right directory and to "READ
   CHECKSUM-LIST".  If the slave reports the same signature as the master,
   then the checksum-list if up to date.  If the signatures don't match, the
   master COPIER starts a dialog with the slave until the slave's copy of the
   checksum-list is up to date.

6) The slave COPIER is told to "VERIFY CHECKSUM-LIST".  It uses the same
   algorithm as "UPDATE CHECKSUM-LIST" to determine which files have changed
   and verifys their checksums.  If the checksum and size match but the other
   attributes do not, COPIER does a "RENAME" on the file to give it the right
   attributes.  If the checksums do not match, COPIER creates a command file
   so that TELECOPY can pull a new copy of the file from the source system.

7) The slave COPIER is told to "RUN".  If no TELECOPY is needed, it simply
   logs out.  If files need to be transfered, the slave COPIER detaches,
   builds a command file for TELECOPY, and then runs TELECOPY.  The last
   line of the TELECOPY command file tells it to run COPIER, which will do
   post-copy clean up.

Operation on a destination (COPY TO) system:

1) 2) The first two steps are the same as in the previous example.

3) When the "RUN" command is given on a COPY TO system, COPIER builds an aux
   circuit to the COPY FROM system, and runs COPIER there.

4) COPIER running on the destination system is the master, it tells the slave
   COPIER on the source system to "UPDATE CHECKSUM-LIST".

5) COPIER on the destination system updates its checksum-list based on what
   differences the slave finds on the source system.  The updating continues
   until the signatures match.

6) The slave COPIER on the COPY FROM system is told to "LOGOUT".

7) COPIER on the destination then performs a "VERIFY CHECKSUM-LIST" operation.

8) If any files need to be updated, COPIER builds a command file for TELECOPY
   and runs it.  The last line of the TELECOPY command file tells it to run
   COPIER, which does post-copy clean up.

Additional commands:

LOG DIFFERENCES <file>  will keep a log of file discrepancies, including the
                        names of the files, the date/time any change was
                        noticed, and when the files were brought up to date.

RECHECK WEEKLY          forces all files to be looked up and checksummed
                        every seven days.  Checking only files with changed
                        creation dates is usually sufficient; a RECHECK will
                        catch changes that would otherwise be unnoticed.




Interaction with TELECOPY

COPIER is designed so that files are always pulled, never pushed.  TELECOPY
runs on the destination system and AUXMOX on the source system.  The only
change required to TELECOPY is the addition of the "CCLRUN <program>" command
which tells TELECOPY to run the specified program at its CCL entry point.

The first versions of COPIER need to worry about deficiencies in TELECOPY:

1) Creation date/time is changed.
2) File protection is forced to ALL RD NO.
3) File is updated instead of being superceded.  A zapped circuit can leave
   the file partially updated and completely unusable.

The first two problems are taken care of in the post-copy processing.  The
third problem is circumvented by using temporary file names.

All files arriving at the destination system have names in the form of
"nnnCOP.mmm" where nnn is the job number and mmm ranges from 001 to 999.
When TELECOPY gets to the end of its command list "nnnTEL.COM", the last
line is "CCLRUN (SYS)COPIER".  When run at its CCL entry point, COPIER reads
and deletes the files "nnnCOP.TMP", "nnnTEL.COM", and "nnnTEL.OUT".

The COP.TMP file has the COPY FROM, COPY TO, and CHECKSUM-LIST information.
Using the TEL.OUT and CHECKSUM-LIST files, COPIER locates the files that have
been successfully transfered, and copies them to the right file name using a
superceding ENTER.  After the copy, a RENAME is done to give the file the
right creation date and the temporary file is deleted.  This operation ensures
that the file is not left partially updated.  It also avoids the window where
the file exists but does not have the right protection.  If the job running
COPIER at this point has license, then existing file license may be preserved.

Most of the post-copy processing could be eliminated by fixing TELECOPY.
COPIER would still be needed, however, to do the pre-copy selection.
COPIER commands.

HELP <topic>			Give help on specified command
EXIT				Return to TYMCOM-X command level
QUIT				Alias for EXIT

GFD <directory>			Change default directory
COPY TO <host>			Define source system
COPY FROM <host-list>		Define destination system(s)

RUN THEN CONTINUE		Start the copy procedure, then get more commands
RUN THEN EXIT			Start copy, exit when done
RUN THEN LOGOUT			Start copy, logout when done
RUN				Same as RUN THEN CONTINUE
RUN DETACHED			Run detached, logout when done
RUN CHILD-FRAME			Create a child frame and run COPIER detached
				Alias for RUN

LOG DIFFERENCES <file>		Keep log of files which are different
LOG ALL <file>			Log a summary of all transactions
LOG NONE			Output information to the terminal only

CREATE CHECKSUM-LIST <file>	Create new checksum-list (use with INCLUDE)
READ CHECKSUM-LIST <file>	Read and calculate signature
UPDATE CHECKSUM-LIST <file>	Check files, update checksums, note differences
VERIFY CHECKSUM-LIST <file>	Check files for differences

RECHECK CHANGED			Read checksums on only files that have changed
RECHECK DAILY			Read all files if checksum-list is more
RECHECK WEEKLY			 than 1, 7, or 30 days old
RECHECK MONTHLY

INCLUDE <list,of,files>		Add to current :FILES line
EXCLUDE <list,of,files>		Add exceptions to :FILES line
REMOVE <files>			Remove file name from body of checksum-list
ADD <files>			Add file name to body but not :FILES line
READ FILE-LIST <file>		Same as "ADD @<file>"; reads list of names

CREATE CONTROL-FILE <file>	Creates a file for SUBMIT
Sample command files

Example 1:  Backing up TYM files for a private net.

  TXSNET.CTL - an XEXEC/SUBMIT control file.
    This file is put in the SUBMIT queue to run every day at 18:00 on system
    95, and every day at 06:00 on systems 26 and 31.
        .GFD TXSNET                     ;Go to where the files are
        .R COPIER                       ;Run the COPIER program from (SYS)
        *COPY FROM 95                   ;Source system is 95
        *COPY TO 26,31                  ;Destination systems
        *READ CHECKSUM-LIST TXSNET.CKS  ;List of files to check
        *RUN                            ;Start check and copy process
        *EXIT                           ;End of commands
    Files modified on the source system during the day will be transmitted to
    the destination systems at 6pm.  If the transfer can not be made for any
    reason (such as one of the hosts being down), then the destination system
    will try again at 6am.  If no files need to be transferred, this will be
    detected by a short dialog, which avoids needless network traffic.

 TXSNET.CKS - a self-identifying list of files and their attributes.
        :CHECKSUM-LIST format 1.0 created by (SYS)COPIER version 1(15)
        :DIRECTORY (TXSNET) timezone PACIFIC-DAYLIGHT checked 1-JUL-87
        :FILES ##6657.*,##6760.*,##2770.*-*.BAK
        :  NAME    CKSUM    DATE.TIME   PROT WORDS LICENSE VERSION
        ND6657.BND VIXKAL 870629.234501 B047 13239
        ... etc ...
    The first line of the checksum-list indicates the format of the remaining
    lines and identifies which program created it.  The second line identifies
    the directory name and the time zone for interpreting the dates and times.
    The third line is a list of wildcarded file specifications.  Any newly
    created files that match the specifications will be added to the checksum
    list.  Note that editor backup files (*.BAK) are excluded from the list.
    Lines starting with a colon and a space like the fourth line are treated
    as comments and ignored.  All lines starting with a colon are part of the
    header of the checksum-list.  The body of the checksum-list is a list of
    file names, checksums, and attributes of the files that are to be copied.


Example 2:  Copying from multiple directories.

  MYDIRS.CTL - an XEXEC/SUBMIT control file.
        .R COPIER
        *COPY FROM 62                   ;Source system is 62
        *COPY TO *                      ;Send to all PDP-10 hosts I am valid on
        *GFD SPL                        ;Switch directories while inside COPIER
        *READ CHECKSUM-LIST SAVDOC.CKS  ;*.SHR,*.SAV,*.DOC
        *RUN                            ;Start check and copy process
        *GFD                            ;Go back to my login directory
        *READ CHECKSUM-LIST MYINI.CKS   ;*.INI and such
        *RUN THEN EXIT                  ;Quit when copy process is done
    In this example, the two checksum-lists use the same COPY TO and COPY FROM
    systems.  Note that only each checksum-list can refer to only one directory
    and that the person running COPIER must have GFD access to that directory.
Format of CHECKSUM-LIST

        :CHECKSUM-LIST format 1.0 created by (SYS)COPIER version 1(15)
        :DIRECTORY (TXSNET) timezone PACIFIC-DAYLIGHT checked 1-JUL-87
        :FILES ##6657.*,##6760.*,##2770.*-*.BAK
        :  NAME    CKSUM    DATE.TIME    WORDS PROT LICENS
        ND6657.BND VIXKAL 870629.234501 013239 B047 000000
        ... etc ...

The first two lines are mandatory.

:CHECKSUM-LIST format <format> created by <program> version <version>

  The keywords "format", "created by", and "version" can be read in any
  order.  For files created using format 1.0, the fields are written in the
  order specified.  The entire file is rejected if the "format" field is not
  present or if the number before the decimal point is not "1".
  The "created by" field need only specify the directory and program name.
  The "version" field the contents of JOBVER decoded in the standard DEC
  format; ie "1(15)", "2A(374)", "777Z(377777)-7".

:DIRECTORY <directory> timezone <zone>-<DAYLIGHT/NODAYLIGHT> checked <date>

  To conserve space, the directory name is specified only once, and it applies
  to all file names that follow, up to the next :DIRECTORY line.
  The "timezone" field is optional, all date/time fields are assumed to be GMT
  if not present.  Its purpose is to make the checksum-list file more human
  readable by using the same times as reported by the TYMCOM-X "DIRECTORY"
  command.  The zone field is spelled out, such as "PACIFIC", "CENTRAL", etc,
  and matches that of the person that originally created the checksum-list.
  The "checked" field contains the date when a full checksum was performed.

:FILES <file-list>

  The file-list is pretty much anything that is acceptable to the TYMCOM-X
  "DIRECTORY" command.  Wildcards may be specified using "#", "?", and "*",
  files not to be included are preceded by "-", and "@" indicates an indirect
  file list.  If all the specifications don't fit on one line, they are split
  into multiple :FILES lines.  If there are no :FILES lines, then only the
  file name currently in the checksum-list are to be processed.

: COMMENT

  Any line starting with ": " (a colon and a space) is a comment.  The command
  "CREATE CHECKSUM-LIST" inserts a comment line describing the body of the
  checksum-list.  Comment lines may be added using an editor.
Body of the checksum-list

: 0000000111111111122222222223333333333444444444455555555556666666666
: 3456789012345678901234567890123456789012345678901234567890123456789
:  NAME    CKSUM    DATE.TIME   PROT WORDS LICENSE VERSION
ND6657.BND VIXKAL 870629.234501 B047 12345
A.SAV      VAVVAV 640101.000000 A777 0 777777 777BK(777777)-7

   Fixed length fields
01-10 = File name, including period, padded on the right with blanks.
11    = blank
12-17 = Checksum in standard TYMCOM-X form.
19-24 = Date in YYMMDD form, values of YY less than 59 are after 1-Jan-2000.
25    = period
25-31 = Time in HHMMSS form, evaluated in the appropriate timezone.
32    = blank
33    = Mode of file.  A=Ascii=0, L=Line=1, K=Katakana=2, I=Image=10,
   33   H=Image Binary=13, B=Binary=14, R=Dump Records=16, D=Dump=17.
34-36 = Protection code as a three-digit octal number
37    = blank
   Variable length fields, delimited by blanks
38-   = Size of the file in words (decimal).
  -   = blank if license and/or version is present
  -   = License as an octal number.  Not present if it and version are both 0.
  -   = blank if version is present (in which case license must be indicated)
  -   = Version number in TYMCOM-X form.

The following fields from the RIB are included:
  .RBPPN = PPN belonging to directory specified by :DIRECTORY
  .RBNAM = File name
  .RBEXT = File extension, creation date high bits
  .RBPRV = Protection, mode, creation date and time
  .RBSIZ = File size in words
  .RBVER = Version number of SAV, LOW, SHR, or EXE files
  .RBLIC = License, creation time in seconds, Katakana bit

The following fields from the RIB are verified on the destination system:
  .RBLIC = Left half bits other than above are zeroed
  .RBAUT = Author gets set to user running TELECOPY
  .RBALP = Allocated pages set by Monitor - holes get filled with zeros
  .RBPJC = Project code of user running TELECOPY
  .RBPID = Processor ID defaults to zero



[End of COPIER.DOC]

  