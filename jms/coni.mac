TOPS10 crash dump saved status					page 1

CDB = CPU Data Block.

On a dual-SMP system, there are two CPU Data Blocks.  The CDB for CPU 0 uses
names in the form of ".C0xxx", the CDB for CPU 1 uses ".C1xxx".  These are
both in low core.  Symbols in the form of ".CPxxx" are defined using high
virtual address (above 400000).  The EPTs of the two CPUs are different so that
when CPU0 references ".CPxxx" it is mapped to the core page containing ".C0xxx".
Likewise, CPU1 references to ".CPxxx" go to the core page containing ".C1xxx".
Note that if CPU0 dies with a CPU problem (such as Cram Parity Clock Stop),
CPU1 can take over and the system remains running.

  ;SBDIAG data
.CPAER:	0			;APR error - RDERA
.CPAEF:	0			;APR error - flags
.CPSB0:	4B4+0			;Controller=DMA20, function=0
.CPS0A:	0			;Answer from SBDIAG returned here
.CPSB1:	4B4+1			;Controller=DMA20, function=1
.CPS1A:	0			;Answer from SBDIAG returned here

;Here when a serious APR interupt was detected

APRNHT:	BLKI	PI,.CPAER	;Do a "RDERA" to read APR error register
	CONI	APR,.CPAEF	;Read APR error flags
	BLKO	PI,.CPSB0	;Do SBDIAG function 0
	BLKO	PI,.CPSB1	;Do SBDIAG function 1
	CONSZ	APR,1B24	;SBUS error?
	 STOPCD	.,CPU,SBE,	;++SBus Error
	CONSZ	APR,1B28	;Cache dir par?
	 STOPCD	.,CPU,CDE,	;++Cache Directory Parity error
				;Only other way to get here is if bit 29 set
	STOPCD	.,CPU,ADP,	;++Address Parity error

  ;Variables for stopcode processor
.CPDWD:	-1			;Incremented to 0 when stopcode in progress
.CPCPI:	0			;CONI PI goes here
.CPSPC:	0			;PC of stopcode

;Get here from the STOPCD macro, which generates "PUSHJ P,DIE".

DIE:	AOSE	.CPDWD		;Check the DIE word - it should have been -1
	 HALT	.+1		;Recursion in stopcode handler
	POP	P,.CPSPC	;Pop stopcode PC off the stack
	CONI	PI,.CPCPI	;Remember PI status
	CONO	PI,PI.TFP+177	;Turn off interrupts
	JSR	.CPSVA		;Save all AC sets
	MOVE	P,.CPEPD	;Set up new stack pointer
	PUSHJ	P,CPUSTS	;Read CPU status
	PUSHJ	P,DVCSTS	;Read device CONI status
	...			;Output messages, perhaps reload monitor
TOPS10 crash dump saved status						page 2

  ;Accumulators save area
.CPSVA:	0			;JSR here to save all AC blocks
	JRST	SVSETS		;Go do it
.CPCPG:	0			;Gets DATAI PAG to preserve AC block selection
.CPACA:	0			;Pointer to current block
.CPCAC:				;All non-reserved AC blocks stored here
.CPCA0:	BLOCK	20		;Contents of AC block 0
.CPCA1:	BLOCK	20		;Contents of AC block 1
.CPCA2:	BLOCK	20		;Contents of AC block 2
.CPCA3:	BLOCK	20		;Contents of AC block 3
.CPCA4:	BLOCK	20		;Contents of AC block 4
.CPCA5:	BLOCK	20		;Contents of AC block 5

;Routine to save all the general AC blocks.
;(AC blocks 6 and 7 belong to the microcode, saved at CPUSTS)

SVSETS:	DATAI	PAG,.CPCPG	;Remember which AC block is current
	DATAO	PAG,[1B0+1B8+0B11]	;Select AC block 1
	MOVEM	17,.CPCA1+17
	MOVEI	17,.CPCA1
	BLT	17,.CPCA1+16
	MOVE	17,.CPCA1+17
	DATAO	PAG,[1B0+2B8+0B11]	;Select AC block 2
	MOVEM	17,.CPCA2+17
	MOVEI	17,.CPCA2
	BLT	17,.CPCA2+16
	MOVE	17,.CPCA2+17
	DATAO	PAG,[1B0+3B8+0B11]	;Select AC block 3
	MOVEM	17,.CPCA3+17
	MOVEI	17,.CPCA3
	BLT	17,.CPCA3+16
	MOVE	17,.CPCA3+17
	DATAO	PAG,[1B0+4B8+0B11]	;Select AC block 4
	MOVEM	17,.CPCA4+17
	MOVEI	17,.CPCA4
	BLT	17,.CPCA4+16
	MOVE	17,.CPCA4+17
	DATAO	PAG,[1B0+5B8+0B11]	;Select AC block 5
	MOVEM	17,.CPCA5+17
	MOVEI	17,.CPCA5
	BLT	17,.CPCA5+16
	MOVE	17,.CPCA5+17
	DATAO	PAG,[1B0+0B8+0B11]	;Select AC block 0
	MOVEM	17,.CPCA0+17
	MOVEI	17,.CPCA0
	BLT	17,.CPCA0+16
	MOVE	17,.CPCA0+17
	LDB	17,[POINT 3,.CPCPG,8] ;Get number of current AC set
	IMULI	17,20		;Compute offset into .CPCAC of this set
	ADDI	17,.CPCA0	;Compute adress of this set
	MOVEM	17,.CPACA	;Save so FILDDT can do crash analysis
	MOVE	17,.CPCA0+17	;Restore AC 17 of set 0
	DATAO	PAG,.CPCPG	;Restore current AC set
	JRSTF	@.CPSVA		;Return to caller
TOPS10 crash dump saved status						page 3

;Routine to read the CPU status
;The number in parentheses is the offset into the crash data block

CPUSTS::APRID	.CPAPD		;(0) APRID
	CONI	APR,.CPACN	;(1) CONI APR,	000
	CONI	PI,.CPPIC	;(2) CONI PI,	004
	DATAI	PAG,.CPPGD	;(3) DATAI PAG,	010
	CONI	PAG,.CPPGC	;(4) CONI PAG,	010
	MOVE	T1,[.USMUO,,.CPUP0]
	BLT	T1,.CPUP0+3	;(5) UPT locs 424-427 (most recent MUUO)
	RDERA	.CPERA		;(11) RDERA
	CONI	RH20,.CPRHC+0	;(12) CONI RH20 540
	CONI	RH21,.CPRHC+1	;		544
	CONI	RH22,.CPRHC+2	;		550
	CONI	RH23,.CPRHC+3	;		554
	CONI	RH24,.CPRHC+4	;		560
	CONI	RH25,.CPRHC+5	;		564
	CONI	RH26,.CPRHC+6	;		570
	CONI	RH27,.CPRHC+7	;		574
	CONI	DTE0,.CPDTC+0	;(22) CONI DTEn 200
	CONI	DTE1,.CPDTC+1	;		204
	CONI	DTE2,.CPDTC+2	;		210
	CONI	DTE3,.CPDTC+3	;		214
	HRLZ	T1,.CPEPT	;(26) EPT locs 0-37 (channel control words)
	HRRI	T1,.CPEP0
	BLT	T1,.CPEP0+37
	MOVE	T1,.CPEPT	;(66) EPT locs 140-177 (DTE communication words)
	HRLI	T1,140(T1)
	HRRI	T1,.CPEP1
	BLT	T1,.CPEP1+37
	MOVE	T1,[.UPMP+500,,.CPUP1]
	BLT	T1,.CPUP1+3     ;(126) UPT locs 500-503 (page fault info)
	DATAO	PAG,[1B0+6B8]	;(132) AC block 6, regs 0-3 and 12
	MOVEM	0,.CP6+0	;  CST "and" mask
	MOVEM	1,.CP6+1	;  CST "or" data
	MOVEM	2,.CP6+2	;  CST base address
	MOVEM	3,.CP6+3	;  SPT base address
	MOVEM	12,.CP6+4	;  ???
	DATAO	PAG,[1B0+7B8]	;(136) AC block 7, regs 0-2
	MOVEM	0,.CP7+0	;  AR when AR/ARX parity fails
	MOVEM	1,.CP7+1	;  ARX when AR/ARX parity fails
	MOVEM	2,.CP7+2	;  I/O page fail word
	DATAO	PAG,.CPPGD	;Restore original AC block
	PUSHJ	P,REDSBD	;Read SBDIAG info for all possible controllers
	POPJ	P,
TOPS10 crash dump saved status						page 4

;SUBROUTINE TO READ AND STORE DEVICE STATUS (DEVICES ON THE I/O BUS)

DVCSTS::MOVSI	T1,-DVSLEN	;Length of device status table
	XCT	DVSXCT(T1)	;Do the I/O instruction
	AOBJN	T1,.-1		;Loop for all but the RHs
	HRLI	T1,-10		;Now do the eight RH20's
DVCST1:	LDB	T2,[POINT 7,DVSXCT(T1),9] ;Get the device code
	MOVE	T3,[CONI RH2,T3] ;Load CONI instruction to read into T3
	DPB	T2,[POINT 7,T3,9];Put device code in bits 3-9
	XCT	T3		;Do the CONI.  RH20 returns 0 in RH
	JUMPL	T3,DVCST2	;Jump if not an RH20 (CI/NI controller)
	MOVE	T3,[DATAO RH2,RH2IVI] ;Load DATAO instruction
	DPB	T2,[POINT 7,T3,9] ;Make it specific to this RH20
	XCT	T3		;Do the DATAO to select IVI register (#74)
	XCT	DVSXCT(T1)	;Now do the DATAI to read the IVI and store it
	POPJ	P,		;End of DVCSTS

RH2IVI:	74B5+1B6		;Select internal register 4 (Int Vector Index)

;TABLE OF INSTRUCTIONS TO EXECUTE TO FILL IN CDB ENTRIES BEGINNING AT CDB
;VARIABLE .CPDVS.  THE ORDER OF THIS TABLE SHOULD MATCH THE ENTRIES IN THE CDB.

DVSXCT:	CONI	TIM,.CPTMR	;020 KL interval timer
	CONI	MTR,.CPMTR	;024 KL meter
	CONI	TTY,.CPTTY	;120 Console TTY on KA or KI
	CONI	PTR,.CPPRA	;104 Paper tape reader on KI or I/O bus
	CONI	PTP,.CPPPA	;100 Paper tape punch on KI or I/O bus
	CONI	DLS,.CPDLS	;240 first DC10 data-line scanner
	CONI	DAC,.CPDAC	;320 first TD10 DECtape control (DTA)
	CONI	DAS,.CPDAS	;324 first TD10 DECtape status
	CONI	CR,.CPCRA	;150 first CR10 card reader
	CONI	LPT,.CPLPT	;124 first LP10 lineprinter
	CONI	PLT,.CPPLA	;140 first XY10 plotter
	CONI	TMS,.CPTMS	;344 first TM10 tape controller status
	CONI	TMC,.CPTMC	;340 first TM10 tape controller command
	CONI	DX10,.CPDX1	;220 DX10 STC tape controller (PDP-8)
	CONI	DSK,.CPDSK	;170 first  RC10 disk/drum controller
	CONI	FHD2,.CPFH2	;174 second RC10
	CONI	FSD,.CPFSD	;270 first  RH10 disk controller (RP04/RP06)
	CONI	FSD2,.CPFS2	;274 second RH10
	CONI	FSD3,.CPFS3	;360 third  RH10
	CONI	DPC,.CPDPC	;250 first  RP10 disk controller (RP02/RP03)
	CONI	DPC2,.CPDP2	;254 second RP10
	CONI	DPC3,.CPDP3	;260 third  RP10
	CONI	DPC4,.CPDP4	;264 fourth RP10
	CONI	DBS,.CP2DS	;334 second DECtape status (DTB)
	CONI	DBC,.CP2DC	;330 second DECtape control (DTB)
	CONI	DLC,.CPDLC	;064 first  DL10 control (UNIBUS interface)
	CONI	DLB,.CPDLB	;060 first  DL10 buffer
	CONI	DLC2,.CPDC2	;164 second DL10 control (UNIBUS interface)
	CONI	DLB2,.CPDB2	;160 second DL10 buffer
	CONI	CDP,.CPCDP	;110 first  CP10 card punch
	CONI	CDR2,.CPCRB	;154 second CR10 card reader
	CONI	LPT2,.CPLPB	;234 second LP10 lineprinter
	CONI	LPT3,.CPLPC	;230 third  LP10 lineprinter
	CONI	PLT2,.CPPLB	;144 second XY10 plotter
TOPS10 crash dump saved status						page 5
This is a continuation of the table started on page 4


	DATAI	APR,.CPDAK	;000 APR address break conditions
	DATAI	DSK,.CPDDK	;170 RC10
	DATAI	FHD2,.CPDH2	;174 RC10
	DATAI	FSD,.CPDFS	;270 RH10
	DATAI	FSD2,.CPDS2	;274 RH10
	DATAI	FSD3,.CPDS3	;360 RH10
	DATAI	DPC,.CPDDP	;250 RP10
	DATAI	DPC2,.CPDD2	;254 RP10
	DATAI	DPC3,.CPDD3	;260 RP10
	DATAI	DPC4,.CPDD4	;264 RP10
	DATAI	DLC,.CPDDC	;064 DL10
	DATAI	DLB,.CPDDB	;060 DL10
	DATAI	DLC2,.CPD2C	;164 DL10
	DATAI	DLB2,.CPD2B	;160 DL10
DVSLEN==.-DVSXCT		;Length of (non-RH20) I/O instruction table
	DATAI	RH20,.CPIVI+0	;540
	DATAI	RH21,.CPIVI+1	;544
	DATAI	RH22,.CPIVI+2	;550
	DATAI	RH23,.CPIVI+3	;554
	DATAI	RH24,.CPIVI+4	;560
	DATAI	RH25,.CPIVI+5	;564
	DATAI	RH26,.CPIVI+6	;570
	DATAI	RH27,.CPIVI+7	;574
				;End of table



The JSR instructions at locations 40+2*n point to the PC that was saved at
the time of the last interrupt.  The PC for interrupt channel 1 has significant
data if the machine was stuck in a loop.  Channel 7 is special - no hardware
device uses it - it is used as a low-priority interrupt to signal that the
scheduler should be run, and is called 60 times a second.

   