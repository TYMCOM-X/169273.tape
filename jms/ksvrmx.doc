


















                           KERMIT USER GUIDE


                       Fifth Edition, Revision 1



                         Frank da Cruz, editor

          Columbia University Center for Computing Activities
                        New York, New York 10027


                              27 July 1984











                   Copyright (C) 1981,1982,1983,1984
        Trustees of Columbia University in the City of New York

   Permission is granted to any individual or institution to copy or
     use this document and the programs described in it, except for
                    explicitly commercial purposes.





         This document is excerpted from the above-named manual
          for use at California State University at Long Beach


        Information specific to KERMIT implementations other than
        the MS-DOS version (IBM-PC compatible) has been excluded.

Preface to the 5th Edition                                        Page 1

                Preface to the 5th Edition (March 1984)

Since  the  4th  Edition  of the KERMIT Users Guide was produced in July
1983, the KERMITs have been flying thicker and faster than anyone  could
keep  up with.  Old versions have improved, and implementations for many
new systems have appeared.  It is no longer practical to even attempt to
cover all the implementations in  a  single  manual.    Therefore,  this
manual  will try to describe a sort of "ideal" KERMIT program, one which
has most of the features specified in the KERMIT Protocol Manual.   Most
real  KERMIT  programs will fall short of this description in some ways.
After the main, system-independent part of the manual there are sections
for several particular KERMIT programs,  emphasizing  their  differences
from  the ideal, at the time of this writing.  The system-dependent por-
tions of this manual will  rapidly  become  dated;  current  information
about  any  particular  KERMIT  program can be found in the accompanying
on-line help or documentation files, or built-in internal help text.

                  5TH EDITION, REVISION 1 (July 1984)

The major sections of the manual are relatively unchanged.  The chapters
describing DECSYSTEM-20, MS-DOS, CP/M-86, CP/M-80, and Apple DOS Kermits
have been updated to reflect new releases since last March.   Meanwhile,
a 2-part article  describing the  Kermit protocol was  published in  the
June and July 1984 issues of BYTE Magazine, which is recommended reading
for anyone who wants to know the  reasons why a protocol like Kermit  is
necessary.

                      HISTORY AND ACKNOWLEDGEMENTS

The KERMIT file transfer protocol was designed at the  Columbia  Univer-
sity  Center  for Computing Activities (CUCCA) in 1981-82 mainly by Bill
Catchings and Frank da Cruz.  Bill wrote the first two programs, one for
the DECSYSTEM-20 and one for a CP/M-80 microcomputer.

The initial objective was to allow users of our DEC-20 and IBM timeshar-
ing systems to archive their files on microcomputer floppy disks.    The
design  owes  much  to  the ANSI and ISO models, and ideas were borrowed
from similar projects at Stanford University and the University of Utah.
The protocol was designed to accommodate the "sensitive"  communications
front  end of the full-duplex DEC-20 system as well as the peculiarities
of half-duplex IBM mainframe communications.  The protocol was soon  im-
plemented  successfully  on  our IBM 4341 systems under VM/CMS by Daphne
Tzoar of CUCCA.

Meanwhile it was becoming apparent that KERMIT was useful for more  than
just file archiving; IBM PCs were beginning to appear in the offices and
departments,  and there arose a general need for file transfer among all
our systems.  Daphne soon had prepared an IBM PC implementation.

After our initial success with KERMIT, we presented it at conferences of
user groups like DECUS and SHARE, and we began to get  requests  for  it
from  other  sites.    Since  we  had  written down a description of the
protocol, some sites wrote their own implementations for new  computers,
or  adapted one of our implementations to run on additional systems, and
sent back these new versions to us so that  we  could  share  them  with

Preface to the 5th Edition                                        Page 2


others.    In  this  way, KERMIT has grown to support about 50 different
systems; it has been sent on magnetic tape from Columbia to hundreds  of
sites in dozens of countries, and has reached hundreds or thousands more
through various user groups and networks.

To  date,  contributions  to  the  KERMIT  effort  have been made by in-
dividuals at the following institutions: Stevens Institute  of  Technol-
ogy,  Cornell  University,  Rutgers  University,  Cerritos  College, the
University of Toronto, the University of  Tennessee  at  Knoxville,  the
University  of  California  at  Berkeley,  the University of Toledo, the
University of Texas at  Austin,  the  University  of  Michigan,  Oakland
University,  the University of Wisconsin, University College Dublin, the
University of Washington, ABC-Klubben Stockholm, the Helsinki University
of Technology, the US National Institutes of Health,  Digital  Equipment
Corporation,  The  SOURCE  Telecomputing,  Hewlett-Packard Laboratories,
Litton Data Systems, RCA Laboratories, Atari Computer, the University of
Chicago, SPSS Inc, and others.   The list grows constantly.

The  Kermit  protocol  was  named  after  Kermit  the Frog, start of the
television series THE MUPPET SHOW, and is used by permission  of  Henson
Associates, Inc.


                        CUSTOMIZING THIS MANUAL

Although  this  manual was produced at Columbia University, all attempts
have been made to keep it free of site-specific information.    However,
due  to the large number of KERMIT implementations, descriptions of each
one would make the manual unnecessarily thick.  Therefore, the manual is
sent from Columbia with specific documentation about a selection of sys-
tems.  Some of these descriptions may not be of interest at  your  site,
while others that are may be lacking.

Each  site,  upon  receiving a KERMIT tape, may decide which versions of
KERMIT are important to it, and include the appropriate documentation in
this manual.  This is most conveniently done if your site has the Scribe
text formatting system (from UNILOGIC Ltd in Pittsburgh PA,  USA),  with
which  this  manual was produced.  Scribe runs on a wide variety of sys-
tems.  There are also Scribe subsets, such as Perfect Writer  and  Final
Word, that run on various microcomputers.

The  system-specific  parts  of  the KERMIT User Guide are included with
"@INCLUDE" statements at the end of the  Scribe  source  file  for  this
manual,  whose  filename  is  USER.MSS.   You may add or delete @INCLUDE
statements to suit your needs, and run the result through the text  for-
matter to produce a customized manual.

Not all system-specific documentation is provided in .MSS (Scribe input)
format,  since  some  KERMIT  contributors  do  not have Scribe at their
sites.  In that case, you will either have to add Scribe formatting com-
mands, or else enclose the whole subfile in @VERBATIM brackets.

If you do not have SCRIBE, you may still use an editor to delete or  add
sections to the finished documentation file, though the results will not
be  as  satisfactory  --  the table of contents, index, and page numbers
will not be automatically adjusted.

Preface to the 5th Edition                                        Page 3


If  you are running a version of KERMIT for which adequate documentation
has not been provided (after all, this is a distributed,  volunteer  ef-
fort!),  please feel free to write some, preferably in Scribe input for-
mat, and send it back to Columbia so that others may  benefit  from  it.
Likewise if you produce a new implementation of KERMIT.

Ordering Information                                              Page 4


Ordering Information

The  KERMIT software is free and available to all.  Columbia University,
however, cannot afford to distribute free software on the scale required
for KERMIT.  Therefore, to defray our costs for  media,  printing,  pos-
tage,  materials,  labor,  and  computing  resources,  we must request a
moderate distribution fee from sites that request KERMIT  directly  from
Columbia.  The schedule is as follows:

    Complete KERMIT Distribution            $100.00
       (Tape, Users Guide, and Protocol Manual)

    Printed Documents                       $5.00 each
       (Users Guide, Protocol Manual, or Any Source Listing)

Other  sites are free to redistribute KERMIT on their own terms, and are
encouraged to do so, with the following stipulations: KERMIT should  not
be  sold  for  profit;  credit  should be given where it is due; and new
material should be sent back to Columbia University at the address below
so that we can maintain a definitive and comprehensive set of KERMIT im-
plementations for further distribution.

To order KERMIT from Columbia University, send a letter  requesting  ei-
ther:

 (a)  The manuals or source listings you desire (specify each one), or

 (b)  A 9-track magnetic tape in one of the following formats:

      System            Tape Format                     Densities
      TOPS-10           BACKUP/Interchange, Unlabeled   1600
      TOPS-20           DUMPER, Unlabeled               1600
      IBM VM/CMS        EBCDIC, CMS Format              1600, 6250
                           or EBCDIC, OS Standard Label 1600, 6250
      UNIX              TAR                             1600
      Other             ASCII, ANSI Label, Format ``D'' 1600

      (Specify  system,  format,  and density.)  The "Kermit collection"
      has grown so large that we can no longer fit it on a 2400' reel of
      magnetic tape at 800bpi.  One copy of each manual will be included
      with the tape.  We will supply the tape, packaging, and postage.

We can only make tapes in the formats listed above.  We  cannot  produce
floppy  disks;  bootstrapping  procedures  are  provided  to  allow  the
microcomputer versions to be downloaded from the mainframe for which the
tape is produced.  The tape includes all source programs, documentation,
and, when practical,  binaries  or  hex.    Unfortunately,  our  limited
resources  to  not  allow  us  to  provide  automatic  updates to KERMIT
recipients when new implementations, documentation, or bug fixes appear.

Send your letter to:

    KERMIT Distribution
    Columbia University Center for Computing Activities
    7th Floor, Watson Laboratory
    612 West 115th Street

Ordering Information                                              Page 5


    New York, N.Y.  10025

Please  list the machines and operating systems you expect to run KERMIT
on, specify the tape format or the listings desired, and mention whether
there are additional systems for which you  require  KERMIT  or  if  you
might be interested in attempting your own implementation for a new sys-
tem.    Make  checks payable to Columbia University Center for Computing
Activities.

KERMIT is available to users of the BITNET network via a server at  host
CUVMA.    BITNET users may type ``SMSG RSCS MSG CUVMA KERMSRV HELP'' for
further information.  KERMIT is also available to users of ARPANET,  via
anonymous  FTP from host COLUMBIA-20, in the area PS:<KERMIT>.  And KER-
MIT is distributed regularly by various computer  user  groups  such  as
DECUS and SHARE.

Since  new KERMIT programs are added -- and old ones improved -- so fre-
quently, sites that use KERMIT heavily are encouraged to contact  Colum-
bia two or three times a year for news.

No  warranty  of  the  software nor of the accuracy of the documentation
surrounding it is expressed or implied,  and  neither  the  authors  nor
Columbia  University acknowledge any liability resulting from program or
documentation errors.

Introduction                                                      Page 6


1. Introduction

Everyone  wants to get computers talking to one another.  There are many
ways to do this, and most of them are very expensive.  But there is  one
way that is cheap and relatively easy: connect the two computers through
their terminal (TTY) ports, tricking one computer (or both) into believ-
ing  that the other is a terminal.  This can be expected to work because
the standard for connecting computers to terminals is almost universally
followed, in both hardware (plug and signal: EIA  RS-232)  and  software
(character  code: ASCII).  Once two computers are connected in this way,
cooperating programs can be run on each  to  achieve  the  desired  com-
munication by means of a communication protocol.

Why is a protocol necessary at all?  Three major problems occur when you
try to connect two computers via TTY line:

   1. Noise  --  It  is rarely safe to assume that there will be no
      electrical interference on a line; any long or switched  data
      communication  line  will  have  occasional  interference, or
      noise, which typically results in garbled  or  extra  charac-
      ters.  Noise corrupts data, perhaps in subtle ways that might
      not be noticed until it's too late.

   2. Synchronization  --  Data  must  not  come in faster than the
      receiving machine can handle it.  Although line speeds at the
      two ends of the connection may match, the  receiving  machine
      might not be able to process a steady stream of input at that
      speed.   Its central processor may be too slow or too heavily
      loaded, or its buffers too full or too small.    The  typical
      symptom  of  a  synchronization  problem  is  lost data; most
      operating systems will simply discard incoming data they  are
      not prepared to receive.

   3. Line Outages -- A line may stop working for short periods be-
      cause  of  a  faulty  connector,  loss  of  power, or similar
      reason.  On dialup or switched connections, such intermittent
      failures will cause carrier to drop and the connection to  be
      closed, but for any connection in which the carrier signal is
      not used, the symptom will be lost data.

To   prevent  corruption  of  data  and  to  synchronize  communication,
cooperating computers can send control information to one another at the
same time that they are transferring data.  This intermingling  of  con-
trol  information  with  data,  and  the resulting actions, constitute a
"protocol".

KERMIT is such a protocol.  It is specifically designed for transfer  of
sequential  files  over ordinary serial telecommunication lines.  KERMIT
is not necessarily better than many other terminal-oriented file  trans-
fer protocols but it is free, it is well documented, and it has been im-
plemented compatibly on a variety of microcomputers and mainframes.

KERMIT transfers data by encapsulating it in "packets" of control infor-
mation.    This  information includes a synchronization marker, a packet
number to allow detection of lost packets, a  length  indicator,  and  a
  "checksum" to allow verification of the data.  Lost or corrupt packets

Introduction                                                      Page 7


are  detected,  and retransmission is requested.  Duplicated packets are
discarded.  In addition, various special control packets allow cooperat-
ing KERMITs to connect and disconnect from each other  and  to  exchange
various  kinds  of information.  Very few assumptions are made about the
capabilities of either computer, so the KERMIT protocol can work between
many different kinds of systems.


                      ORGANIZATION OF THIS MANUAL

Section 2, How to Use KERMIT, tells all you need  to  know  to  transfer
text files in most cases, and shows some specific examples.

If  you  follow  the examples in Section 2 but you can't make a terminal
connection or you can't transfer files successfully, consult Section  3,
When Things Go Wrong.

If  you  expect to be a heavy user of KERMIT, you should read Section 4,
KERMIT Commands, which describes all the features of KERMIT  in  detail.
You  may  find  that  familiarity with the material in this section will
help you get past difficulties that can crop up when you are making  new
kinds  of  connections or transferring unusual kinds of files.  You will
also find descriptions of some advanced file  management  features  that
have been omitted from the earlier sections.

Section  5,  KERMIT Implementations, briefly lists the systems for which
KERMIT is available  as  of  this  writing.    The  subsequent  chapters
describe  selected  particular implementations.  You should read the ap-
propriate section for each system with which you are using KERMIT;  each
section  describes the file naming conventions and other system features
that are important to KERMIT users, and lists the  KERMIT  commands  for
that system mainly in terms of their differences from the "ideal" KERMIT
described in section 4.

How to Use KERMIT                                                 Page 8


2. How to Use KERMIT

KERMIT  is  a protocol for reliable file transfer between computers over
the ordinary serial telecommunication lines that  are  used  to  connect
terminals  to  computers.    The mechanics of using KERMIT to get a file
transferred can be confusing until you get the hang of  it.    A  little
background material might make the process a bit easier to understand.

KERMIT is probably the cheapest way to put two computers into communica-
tion.   The required hardware is usually already available, the software
is free, and all components run as ordinary user programs, with no  sys-
tem  modifications.    This is in sharp contrast to a communication net-
work, where there are dedicated high-speed communications  channels  and
drivers,  expensive  software,  and so forth.  The network provides more
services than KERMIT, usually at higher speed,  and  with  greater  con-
vce,  because  the  network  is usually part of the system.  When a
network is not available, KERMIT can fill in.  But since KERMIT  is  not
integrated with any particular system, but rather grafted on top of many
different systems, it requires some extra work from those who use it.


2.1. The KERMIT Program

KERMIT  embodies  a set of rules for transferring files reliably between
computers.  In general, one computer is a large system (a host, for  in-
stance  a  timesharing  system  with many terminals), and the other is a
                      1
personal computer (PC) .  The host believes that the PC is  an  ordinary
terminal.    In order for the KERMIT protocol to occur, a KERMIT program
must be running on each end of the communication  line  --  one  on  the
host, one on the PC.

The  two  Kermit  programs  exchange  messages in a special language all
their own, the Kermit protocol.  The dialog runs  something  like,  "Hi!
I'm  going  to  be  sending files to you.  When you send messages to me,
please don't make them more than 80 characters long, and  if  you  don't
hear anything from me for 15 seconds, wake me up, OK?"  "OK." "Now, here
comes  a  file  called  FOO.TXT, OK?"  "OK." "Here's the first piece..."
"Got it." "Good, here's the second piece..."   "That  second  piece  was
junk."  "Well,  then here it is again..."  Et cetera.  You don't see any
of this.  It's all packed into a concise code which the two Kermits  can
understand; they do all the worrying about transmission, error checking,
character  set  translation,  and  so  forth.   Each message is called a
packet, and each packet is in a special format that all Kermits can  un-
derstand.







_______________

  1
   Host-to-host and PC-to-PC connections are also possible.

How to Use KERMIT                                                 Page 9


2.2. Talking to Two Computers at Once

Your  task is just to get the two Kermits started.  The confusion arises
because you have to use a single keyboard and screen to talk to two dif-
ferent computers, two different programs.  Let's  talk  about  a  common
                                                  2
case:   you are sitting at a personal computer (PC ), which has a serial
communication port.  The serial port is connected  to  a  host  computer
                          3
using, say, a dialup modem .

Normally,  when  you use your PC, you are "talking" directly to it; your
commands are interpreted directly by the PC's  operating  system  (CP/M,
MS-DOS,  UNIX,  whatever),  or  by  some program that runs on the PC (an
editor, a text formatter, space invaders...).  The version of Kermit  on
your PC is a program like any other, but it has a special ability to ei-
ther  interpret  your commands directly, like other programs, or to pass
everything you type through to the  host.    When  you  tell  Kermit  to
  CONNECT, it sends every character you type out the serial port, and it
will put every character that comes in the serial port onto the  screen.
This is called virtual terminal service -- one computer acts "virtually"
as  though  it were a terminal on another.  You are now "talking" to the
host, and the PC is ignoring you.

Kermit, like most programs, has a prompt.  The prompt  is  a  symbol  it
types  on the left margin to indicate that it is ready for you to type a
command.  Kermit's prompt is normally "Kermit-xx>".  The  xx  identifies
the  implementation  of  Kermit;  the  Kermit that runs on the DEC-20 is
called "Kermit-20" and its prompt is "Kermit-20>"; the Kermit that  runs
on  Z80  and  8080-based  microcomputers  is  called "Kermit-80" and its
                                                               4
prompt is "Kermit-80>"; the Kermit on the IBM PC is "Kermit-86" , and so
forth.  If you become confused about who you are talking to, the  prompt
should  provide  a clue.  In addition, most Kermits print an informative
message like 

  [Connecting to remote host, type CTRL-]C to return]

when you CONNECT, and type another message like 

  [Connection closed, back at PC]

_______________

  2
   The terms PC, micro, microcomputer, and workstation will all be  used
loosely in this document to denote a single-user system.

  3
   The  actual  means  of  connection isn't important in this case -- it
also could be a direct line to the host, some  kind  of  switched  line,
etc.

  4
   Although  the processor in the IBM PC is an 8088, it is programmed as
though it were an 8086.

How to Use KERMIT                                                Page 10


when you return.

Having  "connected" to the host, there must be a way for you to get back
to the PC.  This is accomplished by  an  escape  sequence.    As  Kermit
passes your characters through to the host, it checks each one to see if
it's  a  special  predefined  escape  character.   When the PC sees this
character, it stops ignoring you -- you are once again "talking" to  the
PC,  not  the  host.   The escape character is normally chosen to be one
that you will not need to type while talking to the host, and  one  that
is hard to type by accident -- it's usually a control character, such as
Control-],  which is accomplished by holding down the key marked CTRL or
CONTROL and typing the  indicated  character  (in  this  case,  a  right
bracket  "]").    The  CTRL  key  works  just like a SHIFT key.  Control
characters are written either as CTRL-A or ^A, where A is the  character
to be typed while holding down CTRL.


2.3. Transferring a File

To transfer a file, you must first get the attention of the PC's operat-
ing  system.  This is normally done by starting the PC, possibly insert-
ing your system floppy disk first.  Once you're at command level on your
PC, you run Kermit.  Then you tell Kermit to CONNECT you  to  the  host.
Now  you're  talking  to  the host -- at this point you must log in, and
then run Kermit on the host.

Now you have a Kermit on each end of the wire.  The next step is to tell
each Kermit what to do.  Suppose you want to transfer a  file  from  the
host  to  the PC; you would first tell the host Kermit to SEND the file,
then "escape" back to the PC Kermit and tell it  to  receive  the  file.
The transfer begins -- you can sit back and watch, or go make yourself a
sandwich.   The PC Kermit will continuously show packet and retry counts
on your screen, and will notify you when the transfer is complete.

The desired file is now on your PC's disk.  The Kermit protocol has  en-
sured  that  the  file  arrived  correctly and completely.  Now you must
clean up after yourself: CONNECT back to the host, exit from  Kermit  on
the  host,  log  out  from the host, "escape" back to PC Kermit and exit
from it.  Now you can do whatever you had planned for your file --  edit
it, print it on your PC printer, etc.

The  KERMIT protocol, and most Kermit programs, allow you to send a file
reliably from the host to the PC, from the PC to the host, from host  to
host,  or PC to PC, usually without any special regard for the nature of
the particular machines involved.  Most implementations also allow files
to be sent in groups, with a  single  command,  such  as  "Send  all  my
Fortran  files!"    The scenario for each of these is always the same as
above -- only the details of how to establish the actual connection dif-
fer.

KERMIT works best with "printable" files -- files composed only of  let-
ters,  digits,  punctuation  marks, carriage returns, tabs, and so forth
-- since these can be represented on almost any kind of computer.   KER-
MIT  is also able to transfer "binary" files -- files such as executable
programs -- composed of arbitrary bit patterns, but  binary  files  nor-
mally  are  meaningful  only  to  the kind of computer on which they are

How to Use KERMIT                                                Page 11


generated.  Nevertheless, KERMIT can usually move such files from system
A  to  system  B  (where  they are not much use) and back to system A in
their original condition, although in some cases some special care  must
be taken to accomplish this.

Now  that  we  have a basic understanding of what KERMIT does and how it
works, let's look at some more concrete examples.   First  you  need  to
know what the basic Kermit commands are.


2.4. Basic KERMIT Commands

These  are  generic  descriptions  of  the  most  basic Kermit commands.
Detailed  descriptions  will  come  later.    In   these   descriptions,
local refers to the system that you are using directly, remote refers to
the system to which you are CONNECTed via Kermit.  Commands may take one
or  more  operands  on  the  same line, and are terminated by a carriage
return.

SEND filespec   Send the file or file group specified by  filespec  from
                this  Kermit  to  the  other.   The name of each file is
                passed to the other Kermit in a special control  packet,
                so  it  can  be stored there with the same name.  A file
                group    is    usually    specified     by     including
                "wildcard"  characters  like  "*" in the file specifica-
                tion.  Examples:

                  send foo.txt
                  send *.for

                Some implementations of Kermit may not support  transfer
                of  file groups; these versions would require a separate
                SEND command for each file to be transferred.

RECEIVE         Receive a file or file group from the other Kermit.   If
                an  incoming  file  name  is  not legal, then attempt to
                transform it to a similar legal name,  e.g. by  deleting
                illegal  or  excessive characters.  The name thus formed
                cannot  be  guaranteed  to  be  unique,  in  which  case
                previously  existing  files  could be overwritten.  Some
                versions of Kermit attempt to prevent  this  by  warning
                you  of filename collisions and taking, or allowing for,
                evasive action.

CONNECT         Make a "virtual terminal" connection to the remote  sys-
                tem.    On a PC or micro, this usually means to send all
                keyboard input out the serial port, and display all  in-
                put  from  the  serial  port on the screen.  To "escape"
                from a virtual terminal connection, type Kermit's escape
                character (e.g. CTRL-], control-rightbracket),  followed
                by the letter "C" for "Close Connection".

SET             Establish  various nonstandard settings, such as CONNECT
                escape character,  file  characteristics,  communication
                line number, parity, or flow control.

How to Use KERMIT                                                Page 12


SHOW            Display the values of SET options.

HELP            Type a summary of KERMIT commands and what they do.

EXIT            Exit from KERMIT back to the host operating system.

?               Typed  anywhere  within a KERMIT command:  List the com-
                mands, options, or operands that are  possible  at  this
                point.    This command may or may not require a carriage
                return, depending on the host operating system.


2.5. Real Examples

Kermit can be used in several ways: from a PC that  is  connected  to  a
larger host computer; from a host computer which is connected to another
host; from one PC to another.


2.5.1. PC to Host

In  this  example, the user is sitting at an IBM Personal Computer (PC),
which is connected through its serial port to a DECSYSTEM-20  host  com-
puter.    The  IBM PC is local, the DEC-20 is remote.  This example will
also apply almost literally to any other microcomputer implementation of
Kermit.

You have started up your PC and have the Kermit program  on  your  disk.
Begin  by running Kermit on the PC.  Use Kermit's CONNECT command to be-
come a terminal to the DEC-20.  In fact, the  PC  emulates  the  popular
Heath-19  (or VT52) terminal, so it is desirable to tell the DEC-20 that
your terminal is one of these.  Login  on  the  DEC-20  and  run  Kermit
there.   Here is an example of this procedure with commands you type un-
derlined:

                                               5
  A>kermit              ! Run Kermit on the PC. 
  Kermit V1.20

  Kermit-86>            ! This is the Kermit prompt for the PC.
  Kermit-86>connect     ! Connect to the DEC-20.
  [Connecting to host, type control-] to return to PC.
  Baud rate is 9600, connecting over COM1.]

                        ! You are now connected to the DEC-20.
  CU20B                 ! The system prints its herald.
  @terminal heath-19    ! Set your terminal type (optional).
  @login my-id password ! Login using normal login method.

  (At this point, the DEC-20 prints various messages.)

_______________

  5
   Everthing from a "!" mark to the end of line is commentary, not  sys-
tem typeout or part of a command.

How to Use KERMIT                                                Page 13



  @kermit               ! Run Kermit on the DEC-20.
  Kermit-20>            ! This is Kermit-20's prompt.

You are now ready to transfer files between the two machines.

The  following  example illustrates how to send files from the DEC-20 to
the PC.  Note the use of the "*" wildcard character  to  denote  a  file
group.

  Kermit-20>send *.for  ! Send all my FORTRAN files.
  ^]c                   ! Now return back to the PC by
                        ! typing the escape sequence, in this case
                        ! ^]C (Control-] followed by "C")
  [Back at PC.]
  Kermit-86>receive     ! Tell the PC files are coming.

If you take more than about 5 seconds to get back to Kermit-86 and issue
the  RECEIVE command, the first packets from Kermit-20 may arrive prema-
turely and appear on your screen, but no harm will be done  because  the
packet will be retransmitted by the DEC-20 until the PC acknowledges it.

Once the connection is established, the PC will show you what is happen-
ing  --  it  first  clears the screen and waits for incoming packets; as
packets arrive, the current file name and packet  number  will  be  con-
tinuously  displayed  on  the screen.  When the PC's "Kermit-86>" prompt
returns to your screen, the transfer is done.  During file transfer, the
microcomputer screen looks something like this:



                  IBM PC Kermit-86 V1.20

  Number of Packets:  294                       Receiving...
  Number of Retries:    2
  File Name:   FOO.TXT



The packet and retry counts are continuously updated, and  the  word  in
the  upper right tells the status of the transfer -- receiving, sending,
complete, interrupted, or failed.

When the transfer is complete (most versions of KERMIT sound a  beep  to
wake you up), you must CONNECT back to the DEC-20 host, EXIT from Kermit
there, logout, and "escape back" to the PC as you did previously.

  Kermit-86>connect     ! Get back to the DEC-20.
  [Connecting to host. Type CTRL-]C to return to PC.]
  Kermit-20>            ! Here we are.
  Kermit-20>exit        ! Get out of Kermit-20.
  @logout               ! Logout from the DEC-20.

  Logged out Job 55, User MY-ID, Account MY-ACCOUNT, TTY 146,
    at 24-Jan-84 15:18:56,  Used 0:00:17 in 0:21:55

How to Use KERMIT                                                Page 14



  ^]c                   ! Now "escape" back to the PC,
  [Back at PC.]
  Kermit-86>exit        ! and exit from the PC's Kermit.

The files you transferred should now be on your PC disk.

To  send  files  from  the PC to the DEC-20, follow a similar procedure.
First follow the instructions in the previous section to log in  to  the
DEC-20  through  the  PC.    Then  in  response  to  the  host  Kermit's
"Kermit-20>" prompt you type RECEIVE rather than SEND.  Now escape  back
to  the PC and use the SEND command to send the local PC files to DEC-20
host.  The PC will show you the progress  of  the  transmission  on  its
screen.

When the "Kermit-86>" prompt indicates that the transmission is complete
you  should  follow  the procedure shown above to logout from the DEC-20
host, except that you may first wish to confirm that the files have been
stored correctly in your directory on the DEC-20.


2.5.2. Host to Host

This section describes use of Kermit between two hosts.    A  "host"  is
considered  to  be  a  large  or multi-user system, whose distinguishing
characteristic is that it has multiple terminals.   Use  of  Kermit  for
host-to-host file transfers differs from the PC-to-host case in that the
line  your  terminal  is  connected  to is not the same as the line over
which the data is being transferred, and that some special commands  may
have to be issued to allow one Kermit to conform to unusual requirements
of the other host.

In  this  example, you are already logged in to a DEC-20, and you use an
  autodialer  to  connect  to   an   IBM   370-series   system   running
VM/CMS  through DEC-20 TTY port 12.  The autodialer, in this example, is
invoked from program called DIAL (idealized here,  for  simplicity),  to
which you merely supply the phone number.

  @dial 765-4321/baud:1200
  765-4321, baud 1200
  [confirm]
  Dialing your number, please hold...
  Your party waiting is on TTY12:
  @

Other  methods exist for connecting two hosts with a serial line.  Dedi-
cated hookups can be made simply by running an  EIA  cable  between  TTY
                             6
ports  on  the  two  systems.   For connecting to remote systems when no

_______________

  6
   Such a connection, by the  way,  usually  requires  the  receive  and
transmit  leads  (pins  2 and 3) be swapped in one of the RS-232 connec-
tors; this is called a "null modem" cable.

How to Use KERMIT                                                Page 15


autodialer  is  available,  a manual dialup connection is also possible,
           7
but tricky.  If you have a microcomputer that supports KERMIT,  you  may
find it easier to first transfer from host A to the micro, then from the
micro to host B. 

The following procedure would be the same in any case, once a connection
is made.

  @
  @kermit               ! Run Kermit on the DEC-20.
  Kermit-20>set ibm     ! Turn on handshaking, parity, local echo.
  Kermit-20>set line (to tty) 12 ! Indicate the line we'll use.
  Kermit-20>connect     ! And connect to it.
  [KERMIT-20: Connecting over TTY12:, type <CTRL-Y>C to return.]

  VM/370 ONLINE         ! The IBM system prints its herald.

  .login myuserid mypassword                  ! Login to IBM system.

  LOGON AT 20:49:21 EST THURSDAY 01/20/84
  CUVMB SP/CMS PUT 8210 01/19/84
  .
  .kermit
  KERMIT-CMS>.send profile exec ! Send a file.
  ^Yc                   ! KERMIT-20's escape sequence typed here.
  [KERMIT-20: Connection Closed. Back at DEC-20.]
  Kermit-20>receive     ! Tell Kermit-20 to RECEIVE.

The transfer takes place now; Kermit-20 will print the names of incoming
files,  followed  by  dots or percents to indicate the packet traffic (a
dot for every 5 packets successfully transferred, a  percent  for  every
timeout  or retransmission).  It is complete when when you see "[OK]", a
beep is sounded, and the Kermit-20 prompt next appears.  At  that  point
we  connect  back  to the remote IBM system, exit from the remote Kermit
and log out.

  .
  PROFILE.EXEC.1 ..%%.[OK]
  Kermit-20>connect     ! Get back to IBM and clean up.
  [KERMIT-20: Connecting over TTY12:, type <CTRL-Y>C to return.]






_______________

  7
   Here's one way: log in on port x on your system, and  assign  another
port,  y,  to  which you have physical access.  Unplug the terminal from
port y, and connect the terminal to a dialup modem.  Dial up the  remote
computer  and  log in on it.  Now, using a null modem cable, connect the
modem directly to port y. Go back to your terminal on port x, run Kermit
from it, and CONNECT to port y. 

How to Use KERMIT                                                Page 16



  KERMIT-CMS>.
  KERMIT-CMS>.exit
  R;
  .
  SP/CMS
  .logout

  CONNECT= 00:03:01 VIRTCPU= 000:00.12 TOTCPU= 000:00.60
  LOGOFF AT 20:52:24 EST THURSDAY 01/20/84

  ^Yc                   ! Type Kermit-20's escape sequence
  [KERMIT-20: Connection Closed. Back at DEC-20.]
  Kermit-20>exit        ! All done with Kermit.

That's  the whole procedure.  The file is in your DEC-20 directory, com-
pletely readable, as PROFILE.EXEC --  note  that  KERMIT-CMS  translated
from  the  IBM  EBCDIC  character encoding into standard ASCII, and con-
verted the space between the file name and file type to a dot.

To send a file from the local host to the remote host, we  would  merely
have reversed the SEND and RECEIVE commands in the example above.


2.5.3. Micro to Micro

Kermit   also   works   between   personal   computers  (microcomputers,
workstations).  The difference here is that commands are  typed  on  two
keyboards,  rather  than  a single one.  This is because a personal com-
puter normally only accepts commands from its own keyboard.  If  one  PC
Kermit  CONNECTs  to  another,  there will normally be no program on the
other side to listen.

Making the physical connection between two micros is tricky.  If the two
                            8
units are in close proximity , you can connect their serial ports with a
null modem cable.  However, different micros have different requirements
-- some may want a male connector on their serial port, others a female;
                                                                      9
many require that certain of the RS-232 signals be held  high  or  low .
In  any  case,  you  must also make sure the port speeds are the same at
both ends.

_______________

  8
   Why would you want to run Kermit between two PCs  that  are  next  to
each other?  One good reason is that if they are different models, their
floppy disks are probably incompatible.

  9
   By  wiring  certain  of  the  pins in the connector together; for in-
stance, some micros want DTR (Data Terminal Ready, pin 20)  to  be  held
high,  and  this might be accomplished by connecting it to CTS (Clear To
Send, pin 5).  See EIA Standard RS-232-C, and  the  appropriate  manuals
for your micro.

How to Use KERMIT                                                Page 17


Connections  at  longer  distances can be made via dialup, providing the
required modems are available (one side needs autoanswer capability), or
using any kind of dedicated or switched circuit that  may  be  available
--  PBX,  port contention unit, almost anything you can plug an EIA con-
nector into.

In this example, a DEC VT180 "Robin" CP/M microcomputer is connected  to
a  Intertec  "SuperBrain"  CP/M micro, using a female-to-male null modem
cable.  Getting the cable right is the hard part.  The connection can be
tested by running Kermit and issuing the CONNECT command on  both  ends:
typein from each micro should appear on the screen of the other.

Suppose  you  want  to  send a file FOO.HEX from the Robin to the Super-
Brain.  Proceed as follows:

   1. Run Kermit on the SuperBrain, and give the RECEIVE command:

        A>kermit
        Intertec SuperBrain Kermit-80 - V3.7
        Kermit-80>receive

   2. Run Kermit on the  Robin,  and  give  the  SEND  command  for
      FOO.HEX.

        A>kermit
        DEC VT18X Kermit-80 - V3.7
        Kermit-80>send foo.hex

      Watch  the  packets  fly.    When you get the next Kermit-80>
      prompt, the transfer is done, and you can EXIT from both Ker-
      mits.

The key point is to start the receiving end first -- most  microcomputer
Kermits  do  not  include a timeout facility, and if the receiver is not
ready to receive when the sender first sends, there will be  a  protocol
deadlock.


2.6. Another Way -- The KERMIT Server

So  far,  we  have  been describing the bare-bones version of the KERMIT
protocol.  An optional extension to the protocol includes the concept of
a Kermit server.  A KERMIT server is a Kermit program that does not  in-
teract  directly  with  the  user, but only with another Kermit program.
You do not type commands to a Kermit server, you merely start it at  one
end  of  the connection, and then type all further commands at the other
end.

Not all implementations of Kermit can be servers, and not all  know  how
to talk to servers -- but most of the major ones can and do.  The server
is  run  on  the  remote computer, which would normally be a large host,
such as the DEC-20.  You must still connect to the remote host to log in
and start the server, but you no longer have to tell one  side  to  SEND
and  the  other to RECEIVE, nor must you connect back to the remote side
to clean up and log out when you're done.  Using the server, you can  do
as  many  send and receive operations as you like without ever having to

How to Use KERMIT                                                Page 18


connect  back  to the remote host.  Some servers also provide additional
services, such as directory listings, file deletion, or disk  usage  in-
quiries.

A  Kermit server is just a Kermit program running in a special mode.  It
acts much like ordinary Kermit does after you give it a RECEIVE  command
--  it  waits  for a message from the other Kermit, but in this case the
message is a command telling what to do, normally to send or to  receive
a  file or group of files.  After escaping back to the local system, you
can give as many SEND and GET commands as  you  like,  and  when  you're
finished transferring files, you can give the BYE command, which sends a
message  to  the remote Kermit server to log itself out.  You don't have
to connect back to the remote host and clean up.  However, if  you  want
to  connect  back to the host, you can use the FINISH command instead of
BYE, to shut down the Kermit server on the remote host  without  logging
it off, allowing you to CONNECT back to your job there.

Here's an example of the use of a Kermit server.  The user is sitting at
a CP/M-80 microcomputer and a DEC-20 is the remote host.

  A>kermit              ! Run Kermit on the micro.
  Kermit V3.9A

  Kermit-80>            ! This is the micro Kermit's prompt.
  Kermit-80>connect     ! Connect to the DEC-20.
  [Connecting to remote host.  Type CTRL-]C to return to micro.]

  CU20E                 ! The DEC-20 prints its herald.
  @login my-id password ! Log in normally.

(The DEC-20 prints various login messages here.)

  @kermit               ! Run Kermit-20 normally
  Kermit-20>server      ! Tell it to be a server.

  Kermit Server running on DEC-20 host.  Please type your escape
  sequence to return to your local machine.  Shut down the server by
  typing the Kermit BYE command on your local machine.

  ^]c                   ! Now escape back to the micro.
  [Connection closed, back at micro.]
  Kermit-80>get *.pas   ! Get all my DEC-20 Pascal programs.
  Kermit-80>send foo.*  ! Send all the "foo" files from my micro.
  Kermit-80>exit        ! Exit from Kermit back to CP/M.
  A>

(Here you can do some work on the micro, edit files, whatever you like.)

  A>kermit              ! Run Kermit-80 some more.
  Kermit-80>send file.pas                     ! Send another file.
  Kermit-80>bye         ! That's all.  Shut down the Kermit server.
  A>                    ! Back at CP/M automatically.

This  is  much simpler.  Note that once you've started the Kermit Server
on the remote end, you can run Kermit as often as you like on the  micro
without having to go back and forth any more; just make sure to shut the

How to Use KERMIT                                                Page 19


server down when you're done by typing the BYE command.

Here are basic the commands available for talking to servers.

SEND filespec   Sends  a  file  or file group from the local host to the
                remote host in the normal way.

GET filespec    Ask the remote host to send a file or file group.    Ex-
                ample:  

                  get *.c

                This  command is exactly equivalent to typing "send *.c"
                at the remote host followed by "receive"  on  the  local
                host.    Note  that the local Kermit does not attempt to
                validate the filespec.  If the server cannot  parse  it,
                or  cannot  access  the  specified file(s), it will send
                back an appropriate error message.

BYE             Shut down the remote server and exit from Kermit.   This
                will  cause the job at the remote end to log itself out.
                You need not connect back and clean up unless you get an
                error message in response to this command (for instance,
                if your logged-out disk quota is exceeded on the  remote
                host).

FINISH          Shut  down  the server without having it log itself out,
                and don't exit from Kermit.  A subsequent  CONNECT  com-
                mand  will  put you back at your job on the remote host,
                at system command level.

When Things Go Wrong                                             Page 20


3. When Things Go Wrong

Connecting  two  computers can be a tricky business, and many things can
go wrong.  Before you can transfer files at all, you must  first  estab-
lish  terminal  communication.   But successful terminal connection does
not necessarily mean that file transfer will also work.  And  even  when
file transfer seems to be working, things can happen to ruin it.


3.1. Communication Line Problems

If  you  have a version of KERMIT on your microcomputer, but the CONNECT
command doesn't seem to work at all, please:

   - Make sure all the required physical connections have been made
     and have not wiggled loose.  If you are using  a  modem,  make
     sure the carrier light is on.

   - If  you  have more than one connector on your micro, make sure
     you are using the right one.

   - Make sure that the port is  set  to  the  right  communication
     speed,  or  baud  rate.  Some versions of KERMIT have a built-
     SET BAUD command, others require that you set  the  baud  rate
     using a system command or setup mode before you start the KER-
     MIT  program.   Use the SHOW command to find out what the cur-
     rent baud rate is.

   - Make sure that the other communication line  parameters,  like
     parity,  bits  per  character, handshake, and flow control are
     set correctly.

You must consult the appropriate manuals for the systems  and  equipment
in question.

If  all settings and connections appear to be correct, and communication
still does not take place, the fault may be in  your  modem.    Internal
modems  (i.e.  those  that  plug  in  to a slot inside the microcomputer
chassis) are not recommended for use with KERMIT.    Many  microcomputer
KERMIT  programs  are  written to control the communication hardware ex-
plicitly; internal modems can interfere with that control.

KERMIT normally expects to have full control of the communication  port.
However,  it  is  sometimes  the case that some communications equipment
controls the line between the two computers on either end.  Examples in-
clude modems (particularly "smart" modems), port contention or selection
units, multiplexers, local networks, and wide-area networks.  Such equi-
pment can interfere with the KERMIT file transfer  protocol  in  various
ways:

   - It  can impose parity upon the communication line.  This means
     that the 8th bit of each character is used by the equipment to
     check for correct transmission.  Use of parity will:

        * Cause  packet  checksums  to  appear  incorrect  to   the
          receiver  and foil any attempt at file transfer.  In most

When Things Go Wrong                                             Page 21


          cases, not even the first packet will get through.

        * Prevent the use of the 8th bit for binary file data.

     If  terminal  connection  works  but  file  transfer does not,
     parity is the most likely culprit.  To overcome  this  impedi-
     ment,  you  should find out what parity is being used, and in-
     form the KERMITs on each side (using the SET  PARITY  command)
     so that they can:

        * Compose and interpret the checksums correctly.

        * Employ  a  special  encoding  to allow 8-bit data to pass
          through the 7-bit communication channel.

     Many packet-switched networks, such as  GTE  TELENET,  require
                      10
     parity to be set.  

   - Communications equipment can also interpret certain characters
     in  the data stream as commands rather than passing them along
     to the other side.  For instance, you might find your  "smart"
     modem  suddenly  disconnecting  you and placing a call to Tas-
     mania.  The only way to work around such problems  is  to  put
     the  device  into  "transparent"  or "binary" mode.  Most com-
     munication devices have a way to  do  this;  consult  the  ap-
     propriate  manual.   In some cases, transparent mode will also
     cancel the parity processing and allow the use of the 8th  bit
     for data.


3.2. The Transfer is Stuck

There  are various ways in which Kermit file transfers can become stuck,
but since many hosts are capable of generating timeout  interrupts  when
input  doesn't  appear  quickly enough, they can usually resend or "NAK"
(negatively acknowledge) lost packets.    Nevertheless,  if  a  transfer
seems to be stuck, you can type RETURN on the keyboard of most micros to
simulate a timeout.

An interesting exception is the IBM mainframe (VM/CMS) Kermit -- it can-
not  time  out its "virtual console" (i.e. the user's terminal), so when
using Kermit from a micro to an IBM host, occasional manual wakeups  may
be necessary.

The  following  sections  discuss  various  reasons  why  a  transfer in
progress could become stuck.  Before examining these,  first  make  sure
that you really have a Kermit on the other end of the line, and you have
issued the appropriate command: SEND, RECEIVE, or SERVER.  If the remote
side  is  not a server, remember that you must connect back between each
transfer and issue a new SEND or RECEIVE command.

_______________

  10
    TELENET uses MARK parity.

When Things Go Wrong                                             Page 22


3.3. The Micro is Hung

The micro itself sometimes becomes hung for reasons beyond Kermit's con-
trol,  such  as  power fluctuations.  If the micro's screen has not been
updated for a long time, then the micro may be hung.   Try  these  steps
(in the following order):

   - Check  the  connection.   Make sure no connectors have wiggled
     loose from their sockets.  If you're using a modem, make  sure
     you  still have a carrier signal.  Reestablish your connection
     if you have to.

   - Press RETURN to wake the micro up.  This should clear  up  any
     protocol deadlock.  Several RETURNs might be necessary.

   - If  the problem was not a deadlock, restart the micro and then
     restart Kermit, CONNECT back to the host, get back to your job
     or login again, and restart the transfer.   You  may  have  to
     stop and restart Kermit on the remote host.


3.4. The Remote Host Went Away

If  your  local  system  is  working but the transfer is hung, maybe the
remote host or the remote KERMIT program crashed.  Get back  to  command
level  on the local KERMIT (on microcomputer implementations, you may be
able  to  do  this  by  typing  about  five  RETURNs,  or  one  or  more
Control-C's).    Issue the CONNECT command so that you can see what hap-
pened.  If the remote system has crashed then you will have to wait  for
it to come back, and restart whatever file that was being transferred at
the time.


3.5. The Disk is Full

If  your  local  floppy disk or remote directory fills up, the Kermit on
the machine where this occurs will inform you  and  then  terminate  the
transfer.    You can continue the transfer by repeating the whole proce-
dure either with a fresh floppy or after  cleaning  up  your  directory.
Some  KERMIT  programs  allow you to continue the sequence where it left
off, for instance on the DEC-20 by using the SEND command and  including
the name of the file that failed in the "(INITIAL)" field:  

  Kermit-20>send *.for (initial) foo.for

See  the Kermit-20 command summary for further information about the in-
itial filespec.

When Things Go Wrong                                             Page 23


3.6. Message Interference

You  may  find  that  file transfers fail occasionally and upredictably.
One explanation could be that terminal messages  are  being  mixed  with
your  file  packet  data.  These could include system broadcast messages
(like "System is going down in 30 minutes"), messages from  other  users
("Hi   Fred,  what's  that  KERMIT  program  you're  always  running?"),
notifications that you have requested ("It's 7:30,  go  home!"  or  "You
have  mail from...").  Most KERMIT programs attempt to disable intrusive
messages automatically, but not all can be guaranteed to do so.  It  may
be necessary for you to "turn off" such messages before starting KERMIT.


3.7. Host Errors

Various  error conditions can occur on the remote host that could effect
file transmission.  Whenever any such error occurs,  the  remote  Kermit
normally attempts to send an informative error message to the local one,
and  then  breaks transmission, putting you back at Kermit command level
on the local system.


3.8. File is Garbage

There are certain conditions under which Kermit can  believe  it  trans-
ferred a file correctly when in fact, it did not.  The most likely cause
has  to  do with the tricky business of file attributes, such as text vs
binary, 7-bit vs 8-bit, blocked vs stream, and so forth.    Each  system
has its own peculiarities, and each KERMIT has special commands to allow
you to specify how a file should be sent or stored.  However, these dif-
ficulties usually crop up only when sending binary files.  Textual files
should normally present no problem between any two KERMIT programs.


3.9. Junk after End of File

When transferring a text file from a microcomputer to a mainframe, some-
times  you  will find extraneous characters at the end of the file after
it arrives on the target system.  This is  because  many  microcomputers
don't  have a consistent way of indicating the end of a file.  CP/M is a
good example.  The minimum unit of storage on a CP/M floppy is a "block"
of 128 bytes.  Binary files always consist of a whole number of  blocks,
but  a  text  file can end anywhere within a block.  Since CP/M does not
record a file's byte count, it uses the convention of  marking  the  end
with  an imbedded Control-Z character.  If your microcomputer version of
KERMIT is not looking for this character, it will send the  entire  last
block,  which  may  contain  arbitrary  junk after the "real" end of the
file.  To circumvent this problem, most microcomputer KERMITs have  com-
mands  like  SET  FILE ASCII or SET FILE TEXT to instruct KERMIT to obey
the CTRL-Z convention.  Some microcomputer  KERMITs  operate  in  "text"
mode by default, others in "binary" or "block" mode.

KERMIT Commands                                                  Page 24


4. KERMIT Commands

An  "ideal" KERMIT program will be described here, which has most of the
features specified in the KERMIT Protocol Manual.    No  KERMIT  program
will  have  all  these commands or support all these options.  The exact
form of some of the commands may differ from version to version.    Some
KERMIT programs may support system-dependent options not described here.
The  intention  of  this  description  is  to  provide a base from which
specific KERMIT programs can be described in terms of their  differences
from the "ideal."


4.1. Remote and Local Operation

Some KERMIT programs can be run in two ways, remote and local.  A remote
Kermit  is  usually  running on a mainframe, which you have CONNECTed to
through a PC or other computer.  When KERMIT  runs  remotely,  all  file
transfer  is  done  over the job's controlling terminal line -- the same
line over which you logged in, and to which you would  type  interactive
commands.    What  the  system thinks is your terminal is really another
computer, usually a microcomputer, running its own copy of Kermit.

When KERMIT is in "local mode", file transfer is done over  an  external
device,  such  as a microcomputer's serial communication port, or an as-
signed terminal line on a mainframe.  The local Kermit is  connected  in
some  way  (like a dialout mechanism) to another computer, again running
its own copy of Kermit.  A local Kermit is in control of the  screen,  a
remote Kermit has no direct access to it.  Microcomputer KERMITs usually
run  in local "mode", whereas mainframe Kermits usually need to be given
some special command to run in local mode.   Some  commands  make  sense
only for remote Kermits, others only for local, still others can be used
with  either.    Local and remote operation of KERMIT is shown schemati-
cally here:

 PC is Local, Mainframe is Remote:

KERMIT Commands                                                  Page 25



            Communication
            Line                             (Packets)
            +---------------/  /-----------------+  Other terminals
            |                                    |  |  |  |
            |                                    |  |  |  |
  PC        |     LOCAL              Mainframe   |  |  |  |  REMOTE
 +----------+----------+            +------------+--+--+--+--------+
 |   Serial Port       |            |            |                 |
 |                     |            |            |                 |
 |                     |            |            |                 |
 |  +---------------+  |            |            Your job's        |
 |  | Packets: 724  |  |            |            terminal line     |
 |  | Retries:   7  |  |            |                              |
 |  | File: FOO.BAR |  |            |                              |
 |  +---------------+  |            |                              |
 |   Screen            |            |                              |
 |                     |            |                              |
 +---------------+-----+            +------------------------------+
                 |
                 | (Commands)
                 |
    +------------+---------+
     \       Keyboard       \
      +----------------------+
                 You



The  KERMIT  program  on  the  PC is a local Kermit.  It can control the
screen, the keyboard, and the port separately, thus it  can  update  the
screen  with  status  information,  watch for interrupt signals from the
keyboard, and transfer packets on the communications port,  all  at  the
same time.

The  KERMIT  program  running  on the mainframe is a remote Kermit.  The
user logs in to the mainframe through a terminal port.   The  host  com-
puter  cannot tell that the user is really coming in through a microcom-
puter.  The keyboard, screen, and port functions  are  all  combined  in
user's  mainframe  terminal  line.  Therefore a remote Kermit is cut off
from your screen and keyboard during file transfer.

A KERMIT server is always remote, and must get its commands from a local
KERMIT.  The following descriptions will indicate when a command must be
remote or local.


4.2. Command Interface

Most implementations (the UNIX version is the major exception)  have  an
interactive  keyword-style  command interface, modeled after that of the
DECSYSTEM-20,  which  is  roughly  as  follows:  In  response   to   the
"Kermit-xx>"  prompt  you  may type a keyword, such as SEND, RECEIVE, or
EXIT, possibly followed by additional  keywords  or  operands,  each  of
which  is  called  a  field.   You can abbreviate keywords (but not file
names) to any length that makes  them  distinguishable  from  any  other

KERMIT Commands                                                  Page 26


keyword  valid for that field.  You can type a question mark at any time
to get information about what's expected or valid at that  point.    The
ESC  and "?"  features work best on full duplex systems (all but the IBM
mainframe, so far), where the program can "wake up" immediately and per-
form the required function.  On half duplex or record-oriented  systems,
the  ESC  feature  is  not  available,  and the "?"  requires a carriage
return to follow.

In this example, the user types "set" and then a question mark  to  find
out  what  the  SET options are.  The user then continues the command at
the point where the question mark was typed, adding a  "d"  and  another
question  mark  to  see  what set options start with "d".  The user then
adds a "u" to select "duplex" (the only  SET  option  that  starts  with
"du")  followed  by an ESC (shown here by a dollar sign) to complete the
current field and issue the guide word "(to)" for  the  next  one,  then
another  question  mark to see what the possibilities are, and so forth.
The command is finally terminated by a carriage return.  Before carriage
return is typed, however, the command can  be  edited  using  RUBOUT  or
other  command editing keys.  Finally, the same command is entered again
with a minimum  of  keystrokes,  with  each  field  abbreviated  to  its
shortest  unique  length.   In the example, the parts the user types are
underlined; all the rest is system typeout:


  Kermit-20>set ? one of the following:
   debugging        delay             duplex            escape
   file             handshake         IBM               line
   parity           receive           send
  Kermit-20>set d? one of the following:
   debugging   delay        duplex
  Kermit-20>set du$plex (to) ? one of the following:
   full   half
  Kermit-20>set duplex (to) h$alf
  Kermit-20>set du h


4.3. Notation

In the command descriptions, the following notation is used:

anything    A parameter - the symbol in italics is replaced  by  an  ar-
            gument of the specified type (number, filename, etc).

[anything]  An  optional  field.    If  omitted,  it  defaults to an ap-
            propriate value.

number      A whole number, entered in prevailing notation of  the  sys-
            tem.

character   A  single  character,  entered  literally,  or  as  a number
            (perhaps octal or hexadecimal) representing the ASCII  value
            of the character.

floating-point-number
            A  "real"  number, possibly containing a decimal point and a
            fractional part.

KERMIT Commands                                                  Page 27


filespec    A  file specification, i.e. the name of a file, possibly in-
            cluding a search path, device or directory  name,  or  other
            qualifying  information,  and possibly containing "wildcard"
            or pattern-matching characters to denote a group of files.

^X          A control  character  may  be  written  using  "uparrow"  or
            "caret" notation, since many systems display control charac-
            ters  this  way.  Control characters are produced by holding
            down the key marked CTRL  or  Control  and  typing  the  ap-
            propriate character, e.g. X. 

Commands  are shown in upper case, but can be entered in any combination
of upper and lower case.

KERMIT Commands                                                  Page 28


4.4. Summary of KERMIT Commands

Here  is a brief list of KERMIT commands as they are to be found in most
KERMIT programs.  The following sections will describe these commands in
detail.

For exchanging files:
    SEND, RECEIVE, GET

For connecting to a remote host:
    CONNECT, SET LINE, SET PARITY, SET DUPLEX, SET  HANDSHAKE,  SET  ES-
    CAPE, SET FLOW-CONTROL

For acting as a server:
    SERVER

For talking to a server:
    BYE, FINISH, GET, SEND, REMOTE

Setting nonstandard transmission and file parameters:
    SET BLOCK-CHECK, SET DEBUG, SET DELAY, SET FILE, SET INCOMPLETE, SET
    PARITY, SET RETRY;
    SET  SEND  (or RECEIVE) END-OF-LINE, START-OF-PACKET, PACKET-LENGTH,
    PAUSE, TIMEOUT, PADDING

For defining "macros" of SET commands:
    DEFINE

For interrupting transmission:
    Control-X, Control-Z, Control-C, Control-E

Getting information:
    HELP, STATISTICS, SHOW

Executing command files:
    TAKE

For recording the history of a file transfer operation:
    LOG TRANSACTIONS

For non-protocol file capture or transmission:
    LOG SESSION, TRANSMIT

For closing log files:
    CLOSE

Leaving the program:
    EXIT, QUIT

If you have a file called KERMIT.INI in your default or home disk,  KER-
MIT  will  execute an automatic TAKE command on it upon initial startup.
KERMIT.INI may contain any KERMIT commands, for instance  SET  commands,
or DEFINEs for SET macros to configure KERMIT to various systems or com-
munications  media.   Note: Your particular implementation of KERMIT may
use a different name for this file.

KERMIT Commands                                                  Page 29


4.5. The SEND Command

Syntax:

Sending a single file:  

    SEND nonwild-filespec1 [filespec2]

Sending multiple files:  

    SEND wild-filespec1 [filespec2]

The  SEND  command  causes  a file or file group to be sent to the other
system.  There are two  forms  of  the  command,  depending  on  whether
filespec1 contains "wildcard" characters.  Use of wildcard characters is
the  most  common method of indicating a group of files in a single file
specification.  For instance if FOO.FOR is  a  single  file,  a  FORTRAN
program named FOO, then *.FOR might be a group of FORTRAN programs.


  Sending a File Group

If  filespec1  contains wildcard characters then all matching files will
be sent, in directory-listing order (according to  the  ASCII  collating
sequence)  by  name.  If a file can't be opened for read access, it will
be skipped.  The initial file in a wildcard group can be specified  with
the  optional  filespec2.  This allows a previously interrupted wildcard
transfer to continue from where it left off, or it can be used  to  skip
some files that would be transmitted first.


  Sending a Single File

If  filespec1  does not contain any wildcard characters, then the single
file specified by filespec1 will be sent.  Optionally, filespec2 may  be
used  to specify the name under which the file will arrive at the target
system; filespec2 is not parsed or validated locally in  any  way.    If
filespec2 is not specified, the file will be sent with its own name.


  SEND Command General Operation

Files  will  be  sent  with  their  filename  and filetype (for instance
FOO.BAR,  no  device  or  directory  field,  no  generation  number   or
attributes).    If  communication  line  parity  is  being used (see SET
PARITY), the sending KERMIT will request that the other KERMIT accept  a
special  kind  of prefix notation for binary files.  This is an advanced
feature, and not all KERMITs have it; if the other KERMIT does not agree
to use this feature, binary files cannot be sent correctly.

The sending KERMIT will also ask the other KERMIT whether it can  handle
a  special  prefix  encoding  for  repeated characters.  If it can, then
files with long strings of repeated characters will be transmitted  very
efficiently.   Columnar data, highly indented text, and binary files are
the major beneficiaries of this technique.

KERMIT Commands                                                  Page 30


  SEND Remote Operation

If you are running KERMIT remotely (for instance, from a microcomputer),
you should "escape back" to your local Kermit within a reasonable amount
of  time and give the RECEIVE command.  Don't take more than a minute or
two to complete the switch, or KERMIT may "time out"  and  give  up  (in
that  case, you'll have to CONNECT back to the remote system and reissue
the SEND command).


  SEND Local Operation

If you're running KERMIT locally, for instance on a  microcomputer,  you
should  have already run KERMIT on the remote system and issued either a
RECEIVE or a SERVER command.

Once you give KERMIT the SEND command, the name of  each  file  will  be
printed  on  your screen as the transfer begins, and information will be
displayed to indicate the packet traffic.  When the specified  operation
is complete, the program will sound a beep, and the status of the opera-
tion  will  be indicated by a message like OK, Complete, Interrupted, or
Failed.

If you see many packet retry indications,  you  are  probably  suffering
from a noisy connection.  You may be able to cut down on the retransmis-
sions  by  using  SET  SEND PACKET-LENGTH to decrease the packet length;
this will reduce the probability that a given packet will  be  corrupted
by noise, and reduce the time required to retransmit a corrupted packet.

If  you  notice  a file being sent which you do not really want to send,
you may cancel the operation immediately by typing either  Control-X  or
Control-Z.    If your are sending a file group, Control-X will cause the
current file to be skipped, and KERMIT will go  on  to  the  next  file,
whereas Control-Z will cancel sending the entire group and return you to
KERMIT-20 command level.


4.6. The RECEIVE Command

Syntax:  RECEIVE [filespec]

The  RECEIVE command tells KERMIT to wait for the arrival a file or file
group sent by a SEND command from the other system.  If only one file is
being received, you may include the optional filespec  as  the  name  to
store the incoming file under; otherwise, the name is taken from the in-
coming  file header.  If the name in the header is not a legal file name
on the local system, KERMIT will attempt to  transform  it  to  a  legal
name.

If  an  incoming file has the same name as an existing file, KERMIT will
either overwrite the old file or else try to create a new  unique  name,
depending on the setting of FILE WARNING.

If  you  have  SET PARITY, then 8th-bit prefixing will be requested.  If
the other side cannot do this, binary files cannot be  transferred  cor-
rectly.  The sending KERMIT may also request that repeated characters be

KERMIT Commands                                                  Page 31


compressed.

If  an  incoming  file does not arrive in its entirety, KERMIT will nor-
mally discard it; it will not appear in your directory.  You may  change
this behavior by using the command SET INCOMPLETE KEEP, which will cause
as much of the file as arrived to be saved in your directory.


  RECEIVE Remote Operation

If  your  are  running  KERMIT  remotely, you should escape back to your
local Kermit and give the SEND command.  You should do this within about
two minutes, or KERMIT may time out and give up; if  this  happens,  you
can CONNECT back to the remote system and reissue the RECEIVE command.


  RECEIVE Local Operation

If you are running KERMIT locally, you should already have issued a SEND
       11
command   to the remote KERMIT, and then escaped back to DEC-20 Kermit.

As  files arrive, their names will be shown on your screen, along with a
continuous display the packet traffic.

If a file begins to arrives that you don't really want, you can  attempt
to  cancel  it by typing Control-X; this sends a cancellation request to
the remote Kermit.  If the remote Kermit understands this  request  (not
all  implementations  of  Kermit  support this feature), it will comply;
otherwise it will continue to send.  If a file group is being sent,  you
can request the entire group be cancelled by typing Control-Z.


4.7. GET

LOCAL ONLY -- Syntax: GET [remote-filespec]

The GET command requests a remote KERMIT server to send the file or file
group  specified  by  remote-filespec.  Note the distinction between the
RECEIVE and GET commands: RECEIVE puts KERMIT into a passive wait state,
whereas GET actively sends a command to a server.

The GET command can be used only when KERMIT is  local,  with  a  KERMIT
server on the other end of the line.  This means that you must have CON-
NECTed  to  the  other  system,  logged in, run KERMIT there, issued the
SERVER command, and escaped back to the local KERMIT.

The remote filespec is any string that can be a legal file specification
for the remote system; it is not parsed or validated locally.  As  files
arrive,  their names will be displayed on your screen, along with a con-

_______________

  11
    not SERVER -- use the GET command to receive  files  from  a  KERMIT
server.

KERMIT Commands                                                  Page 32


tinuous  indication  of  the packet traffic.  As in the RECEIVE command,
you may type Control-X to request that the current incoming file be can-
celled, Control-Z to request that the  entire  incoming  batch  be  can-
celled.

If  the  remote KERMIT is not capable of server functions, then you will
probably get an error message back from it like "Illegal  packet  type".
In this case, you must connect to the other Kermit, give a SEND command,
escape back, and give a RECEIVE command.

Optional  Syntax:  If you are requesting a single file, you may type the
GET command without a filespec.  In  that  case,  Kermit  programs  that
implement  the  optional  GET  syntax  will  prompt  you  for the remote
filespec on the subsequent line, and the name to store it under when  it
arrives on the line after that:

  Kermit-MS>get
   Remote Source File: aux.txt
   Local Destination File: auxfile.txt


4.8. SERVER

REMOTE ONLY -- Syntax: SERVER

The  SERVER  command  instructs KERMIT to cease taking commands from the
keyboard and to receive all further instructions in the form  of  KERMIT
packets  from  another system.  A KERMIT server must be remote; that is,
you must be logged in to the system through another computer, such as  a
microcomputer.   In addition, your local KERMIT should have commands for
communicating with remote servers; these include GET, FINISH, and BYE.

After issuing this command, escape back to your local system  and  issue
SEND,  GET,  BYE,  FINISH, or other server-oriented commands from there.
If your local KERMIT does not have a BYE command, then it does not  have
the  full ability to communicate with a KERMIT server and you should not
put the remote KERMIT into SERVER mode.  If your local KERMIT does  have
a  BYE  command,  use it to shut down and log out the KERMIT server when
you are done with it.

Any nonstandard parameters should be selected with SET  commands  before
putting  KERMIT  in  server mode, in particular the block check type and
special file modes.


4.9. BYE

LOCAL ONLY -- Syntax: BYE

When running as a local Kermit talking to a KERMIT server, use  the  BYE
command  to  shut down and log out the server.  This will also close any
debugging log files and exit from the local KERMIT.

KERMIT Commands                                                  Page 33


4.10. FINISH

LOCAL ONLY -- Syntax: FINISH

When running as a local Kermit talking to a remote KERMIT server use the
FINISH  command  to  shut down the server without logging out the remote
job, so that you can CONNECT back to it.  Also, close any  local  debug-
ging log file.


4.11. REMOTE

LOCAL ONLY -- Syntax: REMOTE command

When  running  in local mode, talking to a remote KERMIT server send the
specified command to the remote server.  If the server does  not  under-
stand  the  command  (all of these commands are optional features of the
KERMIT protocol), it will reply with  a  message  like  "Unknown  KERMIT
server command".  If does understand, it will send the results back, and
they will be displayed on the screen.  The REMOTE commands are:

CWD [directory] Change  Working  Directory.    If  no  directory name is
                provided, the server will change to the  default  direc-
                tory.    Otherwise, you will be prompted for a password,
                and the server will attempt to change to  the  specified
                directory.    If  access is not granted, the server will
                provide a message to that effect.

DELETE filespec Delete the specified file or files.  The  names  of  the
                files that are deleted will appear on your screen.

DIRECTORY [filespec]
                The  names  of  the  files  that  match  the  given file
                specification will be displayed on your screen.   If  no
                file  specification is given, all files from the current
                directory will be listed.

DISK [directory]
                Provide information about  disk  usage  in  the  current
                directory,  such  as the quota, the current storage, the
                amount of remaining free space.

HELP            Provide a list of the functions that are available.

HOST [command]  Pass the given command  to  the  server's  host  command
                processor,  and  display  the  resulting  output on your
                screen.

KERMIT [command]
                Pass the given command, which is expressed in the server
                KERMIT's own interactive-mode  command  syntax,  to  the
                server  for execution.  This is useful for changing set-
                tings, logging, and other functions.

RUN program-name [command-line-argument]
                Have the remote KERMIT run the  indicated  program  with

KERMIT Commands                                                  Page 34


                the  indicated  command  line;  send the results back to
                your screen.

PROGRAM [command]
                Send the command to the program started by  most  recent
                REMOTE  RUN  program,  and  display  the  results on the
                screen.  If no command is given, send newline character.

TYPE filespec   Display the contents  of  the  specified  file  on  your
                screen.


4.12. LOCAL

Syntax: LOCAL command

Execute the specified command on the local system -- on the system where
KERMIT to which your are typing this command is running.  These commands
provide  some  local  file management capability without having to leave
the KERMIT program, which is particularly useful on microcomputers.

CWD [directory] "Change Working Directory" to the specified directory.

DELETE filespec Delete the specified file or files.

DIRECTORY [filespec] Provide a directory listing of the specified files.

Some KERMIT programs may provide commands for these or  other  functions
in  the  syntax of their own system, when this would cause no confusion.
For instance, CP/M KERMIT may use ERA in place of LOCAL DELETE.


4.13. CONNECT

LOCAL ONLY -- Syntax: CONNECT [terminal-designator]

Establish a terminal connection to the system at the other  end  of  the
communication  line.    On  a microcomputer, this is normally the serial
port.  On a mainframe, you will have to specify a terminal  line  number
or  other  identifier, either in the CONNECT command itself, or in a SET
LINE command.  Get back to the local KERMIT by typing the escape charac-
ter followed by a single character "command".  Several  single-character
commands are possible:

  C   Close the connection and return to the local KERMIT.
  S   Show status of the connection.
  B   Send a BREAK signal.
  0   (zero) Send a NUL (0) character.
  P   Push  to  the  local system command processor without breaking the
      connection.
  Q   Quit logging session transcript.
  R   Resume logging session transcript.
  ?   List all the possible single-character arguments.
  ^] (or whatever you have set the escape character to be)
      Typing the escape character twice sends one copy of it to the con-
      nected host.

KERMIT Commands                                                  Page 35


You  can use the SET ESCAPE command to define a different escape charac-
ter, and SET PARITY, SET DUPLEX, SET FLOW-CONTROL, SET HANDSHAKE to  es-
tablish or change those parameters.


4.14. HELP

Syntax: HELP

Typing HELP alone prints a brief summary of KERMIT and its commands, and
possibly  instructions  for  obtaining  more detailed help on particular
topics.  Most KERMIT implementations also allow the use of "?" within  a
command to produce a short help message.


4.15. TAKE

TAKE filespec

Execute  KERMIT  commands from the specified file.  The file may contain
contain any valid KERMIT commands, including other TAKE commands.


4.16. EXIT, QUIT

EXIT

Exit from KERMIT.

QUIT is a synonym for EXIT.


4.17. The SET Command

Syntax: SET parameter [option] [value]

Establish or modify various parameters for  file  transfer  or  terminal
connection.

When a file transfer operation begins, the two KERMITs automatically ex-
change  special  initialization messages, in which each program provides
the other with certain information about itself.  This  information  in-
cludes the maximum packet size it wants to receive, the timeout interval
it wants the other KERMIT to use, the number and type of padding charac-
ters  it  needs,  the  end-of-line  character it needs to terminate each
packet (if any), the block check type, the desired prefixes for  control
characters, characters with the "high bit" set, and repeated characters.
Each  KERMIT  program  has  its  own  preset  "default" values for these
parameters, and you normally need not concern yourself with them.    You
can  examine  their  values  with  the  SHOW command; the SET command is
provided to allow you to change them in order to adapt to  unusual  con-
ditions.

The following parameters may be SET:

BAUD-RATE       Set the speed of the current communications port

KERMIT Commands                                                  Page 36


BLOCK-CHECK     Packet transmission error detection method
DEBUGGING       Mode or log file
DELAY           How long to wait before starting to send
DUPLEX          For  terminal  connection,  full  (remote  echo) or half
                (local echo)
ESCAPE          Character for terminal connection
FILE            For setting file parameters  like  name  conversion  and
                byte size
FLOW-CONTROL    Selecting flow control method, like XON/XOFF
HANDSHAKE       For turning around half duplex communication line
IBM             Set things up for communicating with an IBM mainframe
INCOMPLETE      What to do with an incomplete file
LINE            Terminal  line  to  use  for terminal connection or file
                transfer
PARITY          Character parity to use
PORT            For switching communication ports
PROMPT          For changing the program's command prompt
RECEIVE         Various parameters for receiving files
RETRY           How many times to retry a packet before giving up
SEND            Various parameters for sending files

The DEFINE command may be used to compose "macros" by combining SET com-
mands.  The SET commands are now described in detail.


SET BAUD-RATE

Set or change the baud rate (approximate translation: transmission speed
in bits per second) on the  currently  selected  communications  device.
The  way  of  specifying  the baud rate varies from system to system; in
most cases, the actual number (such as 1200 or 9600) is typed.   Systems
that  do not provide this command generally expect that the speed of the
line has already been set appropriately outside of KERMIT.


SET BLOCK-CHECK

KERMIT normally uses a 1-character block check, or "checksum",  on  each
packet.   The sender of the packet computes the block check based on the
other characters in the packet, and the receiver recomputes it the  same
way.    If these quantities agree, the packet is accepted and the trans-
mission proceeds.  If they disagree, the packet is rejected  and  trans-
mitted again.

However,  the  block check is not a foolproof method of error detection.
The normal single-character KERMIT block check is only a 6-bit  quantity
(the  low  order 8 bits of the arithmetic sum folded upon itself).  With
                                                   6
only six bits of accuracy, the chances are one in 2  --  that  is,  1/64
--  that  an error can occur which will not be detected in the checksum,
assuming that all errors are equally likely.

You can decrease the probability that an error can slip through, at  the
expense of transmission efficiency, by using the SET BLOCK-CHECK command
to  select  more  rigorous  block  check  methods.   Note that all three
methods will detect any single-bit error, or any error in an odd  number

KERMIT Commands                                                  Page 37


of bits.  The options are:

1-CHARACTER-CHECKSUM:
                The normal single-character 6-bit checksum.

2-CHARACTER-CHECKSUM:
                A 2-character, 12-bit checksum.  Reduces the probability
                of  an error going undetected to 1/4096, but adds an ex-
                tra character to each packet.

3-CHARACTER-CRC:
                A 3-character, 16-bit  Cyclic  Redundancy  Check,  CCITT
                format.    In  addition  to  errors in any odd number of
                bits, this method detects double bit errors,  all  error
                bursts of length 16 or less, and more than 99.99% of all
                possible  longer  bursts.   Adds two extra characters to
                each packet.

The single character checksum has proven to be quite adequate  in  prac-
tice,  much more effective than straightforward analysis would indicate,
since all errors are not equally likely, and a simple checksum  is  well
suited  to  catching  the  kinds  of errors that are typical of telecom-
munication lines.  The other methods should be requested only  when  the
connection is very noisy.

Note  that  the 2- and 3-character block checks are not available in all
versions of KERMIT; if the other KERMIT is not capable of performing the
higher-precision block checks, the transfer will automatically  use  the
standard single-character method.


SET DEBUG

Syntax: SET DEBUG options

Record  the  packet  traffic, either on your terminal or in a file.  Op-
tions are:

STATES          Show  Kermit  state  transitions  and   packet   numbers
                (brief).

PACKETS         Display each incoming and outgoing packet (lengthy).

LOG-FILE        Log  the selected information (STATES or PACKETS) to the
                specified file.  If log file not specified, then use the
                terminal if local.

OFF             Don't  display  debugging  information  (this   is   the
                default).    If debugging was in effect, turn it off and
                close any log file.

KERMIT Commands                                                  Page 38


SET DELAY

Syntax: SET DELAY number

Specify how many seconds to wait before sending the first packet after a
SEND command.  Use when remote and SENDing files back to your local Ker-
mit.   This gives you time to "escape" back and issue a RECEIVE command.
The normal delay is 5 seconds.  In local mode  or  server  mode,  KERMIT
does not delay before sending the first packet.


SET DUPLEX

Syntax: SET DUPLEX keyword

For use when CONNECTed to a remote system.  The keyword choices are FULL
and  HALF.  FULL means the remote system echoes the characters you type,
HALF means the local system echoes them.  FULL is the  default,  and  is
used  by  most  hosts.    HALF  is  necessary  when  connecting  to  IBM
mainframes.  Half duplex is also called "local echo".


SET ESCAPE

Syntax: SET ESCAPE character

Specify or change the character you want to use to "escape" from  remote
connections  back  to  KERMIT.    This would normally be a character you
don't expect to be using on the remote system, perhaps a control charac-
ter like ^\, ^], ^^, or ^_.  Most versions of KERMIT use one of these by
default.  After you type the escape character, you must follow it  by  a
single-character  "argument", such as "C" for Close Connection.  The ar-
guments are listed above, under the description of the CONNECT command.


SET FILE

Syntax: SET FILE parameter keyword

Establish file-related parameters.  Depending on the characteristics  of
the  system, it may be necessary to tell KERMIT how to fetch an outbound
file from the disk, or how to  store  an  incoming  file.    The  actual
parameters you can specify in this command will vary from system to sys-
tem,  and  you should consult the documentation for your particular ver-
sion of KERMIT.  Some examples would be byte size (PDP-10 architecture),
record length or  block  size  (record  oriented  systems),  end-of-file
detection method (on microcomputers).

This  can  be  a very important command if you intend to transfer binary
files, but is normally unecessary for transmitting textual files.

KERMIT Commands                                                  Page 39


SET FLOW-CONTROL

Syntax: SET FLOW-CONTROL option

For  communicating  with full duplex systems.  System-level flow control
is not necessary to the KERMIT protocol, but it can help to  use  it  if
the  same  method is available on both systems.  The most common type of
flow control on full duplex systems is XON/XOFF.


SET HANDSHAKE

Syntax: SET HANDSHAKE option

For communicating with half duplex systems.  This lets you  specify  the
line  turnaround  character  sent by the half duplex host to indicate it
has ended its transmission and is granting you permission  to  transmit.
When  a  handshake  is set, KERMIT will not send a packet until the half
duplex  host  has  sent  the  specified  character  (or  a  timeout  has
occurred).  The options may include:

    NONE    No handshake; undo the effect of any previous SET HANDSHAKE.
    XOFF    Control-S.
    XON     Control-Q.
    BELL    Control-G.
    CR      Carriage Return, Control-M.
    LF      Linefeed, Control-J.
    ESC     Escape, Control-[.


SET INCOMPLETE

Syntax: SET INCOMPLETE option

Specify  what  to  do when a file transfer fails before it is completed.
The options are DISCARD (the default) and KEEP.   If  you  choose  KEEP,
then  if  a transfer fails to complete successfully, you will be able to
keep the incomplete part that was received.


SET LINE

Syntax: SET LINE [terminal-designator]

Specify the terminal line to use for file transfer  or  CONNECT.    This
command  is  found  on  mainframe KERMITs, which normally run in "remote
mode" using their own controlling terminal for file transfer.   Specify-
ing  a  separate  line  puts the program in "local mode."  If no line is
specified, revert to the job's controlling terminal,  i.e.  go  back  to
"remote mode."

KERMIT Commands                                                  Page 40


SET PORT

Syntax: SET PORT terminal-designator

Specify the communications port for file transfer or CONNECT.  This com-
mand  is  found  on microcomputer KERMITs that run in "local" mode.  SET
PORT does not change the remote/local status but simply selects  a  dif-
ferent port for local operation.


SET PARITY

Syntax: SET PARITY keyword

Parity is a technique used by communications equipment for detecting er-
rors on a per-character basis; the "8th bit" of each character acts as a
check  bit for the other seven bits.  KERMIT uses block checks to detect
errors on a per-packet basis, and it  does  not  use  character  parity.
However,  some  systems  that KERMIT runs on, or equipment through which
these systems communicate, may be using character  parity.    If  KERMIT
does  not know about this, arriving data will have been modified and the
block check will appear to be wrong, and packets will be rejected.

If parity is being used on the communication line, you must inform  both
KERMITs,  so the desired parity can be added to outgoing characters, and
stripped from incoming ones.  SET PARITY should be used for  communicat-
ing with hosts that require character parity (IBM mainframes are typical
examples)  or  through  devices  or networks (like GTE TELENET) that add
parity to characters that pass through them.  Both KERMITs should be set
to the same parity.  The specified parity is used both for terminal con-
nection (CONNECT) and file transfer (SEND, RECEIVE, GET).

The choices for SET PARITY are:

  NONE  (the default) eight data bits and no parity bit.
  MARK  seven data bits with the parity bit set to one.
  SPACE seven data bits with the parity bit set to zero.
  EVEN  seven data bits with the parity bit  set  to  make  the  overall
        parity even.
  ODD   seven  data  bits  with  the  parity bit set to make the overall
        parity odd.

NONE means no parity processing is done, and the 8th bit of each charac-
ter can be used for data when transmitting binary files.

If you have set parity to ODD, EVEN, MARK, or SPACE, then advanced  ver-
sions of KERMIT will request that binary files will be transferred using
8th-bit-prefixing.    If  the  KERMIT  on the other side knows how to do
8th-bit-prefixing (this is an optional feature of the  KERMIT  protocol,
and not all implementations of KERMIT have it), then binary files can be
transmitted  successfully.  If NONE is specified, 8th-bit-prefixing will
not be requested.

KERMIT Commands                                                  Page 41


SET PROMPT

This  allows  you  to change the program's prompt.  This is particularly
useful if you are using KERMIT to transfer files between two systems  of
the  same  kind,  in which case you can change the prompts of the KERMIT
programs involved to include appropriate distinguishing information.


SET SEND

SET SEND parameter

Parameters for outgoing packets, as follows:

END-OF-LINE character
        The ASCII character to be used as a line terminator for packets,
        if one is required by  the  other  system,  carriage  return  by
        default.    You  will  only have to use this command for systems
        that require a line terminator other than carriage return.

PACKET-LENGTH number
        Maximum packet length to  send  between  10  and  94  (decimal).
        Shortening  the  packets might allow more of them to get through
        through without error on noisy communication lines.  Lengthening
        the packets increases the throughput on clean lines.

TIMEOUT number
        How many seconds to wait for a packet before trying again.

PAUSE floating-point-number
        How many seconds to pause before sending each data packet.  Set-
        ting this to a nonzero value may allow some slow systems  enough
        time  to  consolidate  itself  packet before the next packet ar-
        rives.  Normally, no per-packet pausing is done.

PADDING number, PADCHAR character
        How much padding to send before a  packet,  if  the  other  side
        needs  padding, and what character to use for padding.  Defaults
        are no padding, and NUL (0) for the padding character.

QUOTE character
        What printable character to use for quoting of  control  charac-
        ters,  "#" (43) by default.  There should be no reason to change
        this.

START-OF-PACKET character
        The start-of-packet character is the only control character used
        "bare" by the KERMIT protocol.  It is Control-A by default.   If
        a bare Control-A causes problems for your communication hardware
        or software, you can use this command to select a different con-
        trol  character  to  mark  the start of a packet.  You must also
        issue the reciprocal command (SET  RECEIVE  START-OF-PACKET)  to
        the  KERMIT  on  the  other  system  (providing  it  has  such a
        command).

KERMIT Commands                                                  Page 42


SET RECEIVE

Syntax: SET RECEIVE parameter

Parameters to request or expect for incoming packets, as follows:

END-OF-LINE character
        Carriage return (15) by default.

PACKET-LENGTH number
        Maximum  length  packet for the other side to send, decimal num-
        ber, between 10 and 94, decimal.

TIMEOUT number
        How many seconds the other Kermit should wait for a  packet  be-
        fore asking for retransmission.

PAUSE floating-point-number
        How  many  seconds to pause before acknowledging a packet.  Set-
        ting this to a nonzero value will slow down the  rate  at  which
        data  packets  arrive,  which  may be necessary for systems that
        have "sensitive" front ends and cannot accept input  at  a  high
        rate.

PADDING number, PADCHAR character
        How  many  padding  characters  to  request before each incoming
        packet, and what the padding character should be.    No  KERMITs
        are  known  to need padding, and if one did, it would request it
        without your having to tell it to do so.    This  command  would
        only be necessary, therefore, under very unusual circumstances.

QUOTE character
        What  printable  character to use for quoting of control charac-
        ters, "#" (43) by default.  There should be no reason to  change
        this.

START-OF-PACKET character
        The control character to mark the beginning of incoming packets.
        Normally SOH (Control-A, ASCII 1) (see SET SEND START-OF-PACKET,
        above).


SET RETRY

SET RETRY option number

Set the maximum number of retries allowed for:

INITIAL-CONNECTION
        How  many  times  to  try  connecting before giving up, normally
        something like 15.

PACKETS How many times to try sending a particular packet before  giving
        up,  normally 5.  If a line is very noisy, you might want to in-
        crease this number.

KERMIT Commands                                                  Page 43


4.18. DEFINE

DEFINE macroname [set-parameters]

Define  a "SET macro" to allow convenient association of one or more SET
parameters with a mnemonic keyword of your choice.  The  SET  parameters
are  a list of one or more SET options, separated by commas.  If you use
KERMIT to communicate with several different kinds of systems,  you  may
set up a macro for each, for instance:

 DEFINE IBM PARITY MARK, DUPLEX HALF, HANDSHAKE XON
 DEFINE UNIX PARITY NONE, DUPLEX FULL, HANDSHAKE NONE
 DEFINE TELENET PARITY MARK, RECEIVE TIMEOUT 20

You may then type SET IBM, SET UNIX, and so forth to set all the desired
parameters  with  a  single  command.  It is convenient to include these
definitions in your KERMIT.INI file.

Another other handy use for SET macros would be for rapid adaptation  to
different conditions of line noise:

 DEFINE CLEAN BLOCK-CHECK 1, SEND PACKET-LENGTH 94, RETRY PACKET 5
 DEFINE NOISY BLOCK-CHECK 2, SEND PACKET-LENGTH 60, RETRY PACKET 10
 DEFINE VERY-NOISY BLOCK 3, SEND PACKET 40, RETRY PACKET 20

You may redefine an existing macro in the same manner as you defined it.
You can undefine an existing macro by typing an empty DEFINE command for
it, for instance:

 DEFINE IBM

You  can list all your macros and their definitions with the SHOW MACROS
command.


4.19. SHOW

Syntax: SHOW [option]

The SHOW command displays the values of the parameters settable  by  the
SET  command.   If a particular option is not requested, a complete dis-
play will be provided.


4.20. STATISTICS

Give statistics about the most recent file transfer, such as  the  total
number of characters transmitted, the effective baud rate, and so forth.

KERMIT Commands                                                  Page 44


4.21. LOG

Syntax: LOG [option] [filespec]

Log the specified entity to the specified log file.

TRANSACTIONS    Direct  KERMIT  to  log transactions, such as files suc-
                cessfully sent or received or files that  could  not  be
                successfully  sent or received.  A transaction is useful
                recording the progress of a long,  unattended  multifile
                transfer.

SESSION         Create a transcript of a CONNECT session, when running a
                local  KERMIT  connected  to  a  remote  system,  in the
                specified file.  The log is closed  when  connection  is
                closed.     In  some  implementations,  logging  can  be
                "toggled" by typing the connect  escape  character  fol-
                lowed  by  Q  (Quit  logging)  or  R (Resume logging) or
                similar single-character commands.   Session-logging  is
                useful  for recording dialog with an interactive system,
                and for "capturing" from systems that don't have KERMIT.
                No guarantee can be made that the file will arrive  cor-
                rectly  or  completely,  since  no  error checking takes
                place.

DEBUGGING       Record debugging  information  in  the  specified  file.
                There  may  be several options to select the desired in-
                formation --  entire  packets,  state  transitions,  etc
                -- available via the SET DEBUGGING command.


4.22. TRANSMIT

Syntax: TRANSMIT filespec

Send  the  contents  of  the  specified file to the other system "bare",
without protocol, packets, error checking, or retransmission.  This com-
mand is useful for sending standard logon or connection  sequences,  and
for  sending  files to systems that don't have KERMIT.  No guarantee can
be made that the target system will receive the file correctly and  com-
pletely.    When  receiving  a file, the target system would normally be
running a text editor in text collection mode.

KERMIT Implementations                                           Page 45


5. KERMIT Implementations

Kermit  has  been written for a wide variety of systems, both mainframes
and microcomputers.  Kermit is  not  written  in  a  portable  language;
rather,  each  implemenation  is written in the language best suited for
the particular machine.  The specification, given in the Kermit Protocol
Manual, is  quite  general  and  allows  implementation  on  almost  any
machine.

Here's a brief table summarizing the known Kermit implementations, as of
this  writing.    This list is constantly growing, and may be far out of
date by the time you read it.

    Machine             Operating System    Language
    DECsystem-10,20     TOPS-10,20          MACRO-10,20
    IBM 370 Series      VM/CMS, MVS/TSO     IBM Assembler
    IBM 370 Series      MTS                 Pascal
    CDC Cyber 170       NOS                 Fortran-77
    Sperry/Univac-1100  EXEC                EXEC Assembler
    Honeywell           MULTICS             PL/I
    DEC VAX-11          VMS                 Bliss-32, Macro-32
    DEC PDP-11          RT,RSX,RSTS,MUMPS   MACRO-11 & others
    DEC Pro-300 Series  P/OS                Bliss-16, Macro-11
    VAX,PDP-11,SUN,etc  UNIX                C
    PRIME               PRIMOS              PL/P
    HP3000, Univac, etc Software Tools      Ratfor
    HP1000              RTE                 Fortran
    Apollo              Aegis               Fortran
    Terak, HP-98x6, IBM PC                  UCSD p-System 
    8080, 8085, or Z80  CP/M-80             ASM
    8086, 8088          PC-DOS, MS-DOS      MS MASM-86
    8086, 8088          CP/M-86             DR ASM86
    Apple II 6502       Apple DOS           DEC-10/20 CROSS
    TRS80 I, III        TRSDOS              Z80 Assembler
    Atari               DOS                 Action!

The 8080 version runs on  the  DEC  VT180,  DECmate  II  (CP/M),  Heath/
Zenith-89  and 100, Superbrain, Apple II/Z80, TRS-80 II (CP/M), Osborne,
Kaypro, and others.  There are 8086 MS DOS versions for the IBM PC,  DEC
Rainbow,  Wang  PC, Compaq, Heath/Zenith-100, HP-150, Tandy 2000, Victor
9000, and others.  The 8086 CP/M-86 version runs on the DEC Rainbow  and
the NEC APC.

The  remainder  of  the  KERMIT User Guide is devoted to descriptions of
selected KERMIT implementations.  If a description of  your  version  of
KERMIT does not appear, look in the KERMIT area on your mainframe for an
on-line  documentation  file.   Even if your version is described below,
the version of the manual you are reading may be out of date and the on-
line information may be more current.

                                                                      46


9. MS-DOS KERMIT

Program:    Daphne Tzoar and Jeff Damens, Columbia University; contribu-
            tions by many others.
Language:   Microsoft Macro Assembler (MASM)
Documentation:
            Frank  da  Cruz,  Columbia  University; Herm Fischer, Litton
            Data Systems, Van Nuys CA.
Version:    2.26
Date:       July 1984


Kermit-MS Capabilities At A Glance:

  Local operation:                   Yes
  Remote operation:                  Yes
  Transfers text files:              Yes
  Transfers binary files:            Yes
  Wildcard send:                     Yes
  ^X/^Y interruption:                Yes
  Filename collision avoidance:      Yes
  Can time out:                      Yes
  8th-bit prefixing:                 Yes
  Repeat count prefixing:            Yes
  Alternate block checks:            Yes
  Terminal emulation:                Yes
  Communication settings:            Yes
  Transmit BREAK:                    Yes
  IBM mainframe communication:       Yes
  Transaction logging:               No
  Session logging:                   Yes
  Raw transmit:                      No
  Act as server:                     Yes
  Talk to server:                    Yes
  Advanced server functions:         No
  Advanced commands for servers:     Yes
  Local file management:             Yes
  Handle file attributes:            No
  Command/init files:                Yes
  Command macros:                    Yes

Kermit-MS is a program that implements the KERMIT file transfer protocol
for the IBM PC and several  other  machines  using  the  same  processor
family  (Intel  8088  or  8086)  and  operating system family (PC-DOS or
MS-DOS, henceforth referred to collectively  as  MS-DOS,  versions  1.1,
2.0,  and  2.1,  and thereafter).  This section will describe the things
you should know about the MS-DOS file system in order to make  effective
use of Kermit, and then it will describe the Kermit-MS program.

Version  2  of MS-DOS Kermit runs on a variety of systems, including the
IBM PC and XT, the HP-150, the DEC Rainbow 100 and 100+ (MS-DOS 2.05 and
above), the Wang PC, and there is a "generic" MS-DOS version.  Version 1
was adapted at various stages of development to run on other systems  as
well,   including   the   Heath/Zenith  100,  Tandy  2000,  Victor  9000
(Sirius-1), and Seequa Chameleon, and is still available for those  sys-
tems until support for them and others is added to version 2.

                                                                      47


The program operates under version 1.1 or 2.0 and above of DOS, although
some  features  require  the  functionality  of  2.0.    It  runs in ap-
proximately 80K of memory -- over and  above  the  memory  used  by  DOS
--  which means that your system should have at least 128K of RAM to use
version 2 of MS-DOS Kermit; smaller systems may still use Version 1.


9.1. The MS-DOS File System

The features of the MS-DOS file system of greatest  interest  to  KERMIT
users  are  the form of the file specifications, and the distinction be-
tween pre-MS-DOS 2.0 file names and newer file names which allow  direc-
tory paths.


9.1.1. File Specifications

MS-DOS 2.x file specifications are of the form 

  DEVICE:\PATHNAME\NAME.TYPE

where  the  DEVICE is a single character identifier (for instance, A for
the first floppy disk, C for the first fixed disk,  D  for  a  RAM  disk
emulator),  PATHNAME  is  up  to 63 characters of identifier(s) (up to 8
characters each) surrounded by reverse slashes, NAME is an identifier of
up to 8 characters, and TYPE is an identifier of up to 3  characters  in
length.  Device and pathname may be omitted.  The first backslash in the
pathname may be omitted if the specified path is relative to the current
directory.    In the path field, "." means current directory, ".." means
parent directory.  Some DOS implementations (like Wang)  may  use  slash
"/" rather than backslash in the path field.

Pathname  is normally omitted, and cannot be specified for MS-DOS 1.x or
with those commands which allow MS-DOS 1.x use.   Device  and  directory
pathnames,  when  omitted, default to either the user's current disk and
directory, or to the current directory search path as specified  in  the
DOS  PATH  environment  variable,  depending on the context in which the
file name appears.

    When this manual says that a file is searched for "in  the  cur-
    rent path," it means that the PATH is searched first, and if the
    file  is not found, then Kermit-MS looks on the current disk and
    directory.  If the PATH environment variable  is  empty,  Kermit
    looks only at the current disk and directory.

NAME.TYPE is normally sufficient to specify a file, and only this infor-
mation is sent along by Kermit-MS with an outgoing file.

The  device,  path, name, and type fields may contain uppercase letters,
digits, and the special characters "-" (dash), "_" (underscore), and "$"
(dollar sign).   (For  use  only  among  MS-DOS  processors,  additional
filename  special  characters  allowed are "#&!%'`(){}".  DOS 1.x allows
others as well.).  There are no imbedded  or  trailing  spaces.    Other
characters  may  be not be included; there is no mechanism for "quoting"
otherwise illegal characters in filenames.    The  fields  of  the  file
specification  are set off from one another by the punctuation indicated

                                                                      48


above.

The  name  field is the primary identifier for the file.  The type, also
called the extension or suffix, is an indicator  which,  by  convention,
tells  what kind of file we have.  For instance FOO.BAS is the source of
a BASIC program named FOO;  FOO.OBJ  might  be  the  relocatable  object
module  produced  by  compiling  FOO.BAS; FOO.EXE could be an executable
program produced by linking FOO.OBJ, and so forth.  .EXE  and  .COM  are
the normal suffixes for executable programs.

The  MS-DOS  allows  a  group  of files to be specified in a single file
specification by including the special "wildcard" characters, "*" and "?
".  A "*" matches any string of characters from the current position  to
the  end of the field, including no characters at all; a "?" matches any
single character.  Here are some examples:

  *.BAS   All files of type BAS (all BASIC source files) in the  current
          directory.

  FOO.*   Files of all types with name FOO.

  F*.*    All files whose names start with F. 

  F?X*.*  All  files whose names start with F and contain X in the third
          position, followed by zero or more characters.

  ?.*     All files whose names are exactly one character long.

Wildcard notation is used on many computer systems in similar ways,  and
it  is  the  mechanism  most  commonly used to instruct Kermit to send a
group of files.

    Note: Kermit-MS uses the "?" character for help  while  commands
    are  being  typed, so the single-character wildcard in Kermit-MS
    commands is "=" rather than "?".  For example 

      Kermit-MS>send =.*

    would send files of all  types  whose  names  were  exactly  one
    character long.

Kermit-MS  users should bear in mind that other (non-MS-DOS) systems may
use different wildcard characters.  For instance the DEC-20 uses "%" in-
stead of "?" as the single character wildcard; when using  Kermit-MS  to
request a wildcard file group from a KERMIT-20 server, the Kermit-MS "="
must be replaced by the DEC-20 "%".


9.1.2. File Formats

MS-DOS  systems  store files as bulk collections of 8 bit bytes, with no
particular differences between text, program  code,  and  binary  files.
ASCII  text files consist of lines separated by carriage-return-linefeed
sequences (CRLFs), which conforms exactly to the way  Kermit  represents
text  files  during  transmission.   Since a non-MS-DOS receiving system
might need to make distinctions as to file type, you  may  need  to  use

                                                                      49


various  SET functions on the remote system to inform it that the incom-
ing file is of some particular (non-default) type, such as binary.    In
transmitting files between Kermit-MS's, regardless of file contents, the
receiving MS-DOS system is equally capable of processing text, code, and
data,  and  in  fact  has  no knowledge of how the bytes in the file are
used.

MS-DOS (unlike CP/M) is capable of pinpointing  the  end  of  file  with
precision  by keeping a byte count in the directory, so one would expect
no particular  confusion  in  this  regard.    However,  certain  MS-DOS
programs  continue to use the CP/M convention of terminating a text file
with a Control-Z character, and won't operate correctly unless this ter-
minating byte is present.  Therefore, Kermit-MS users should be aware of
a special SET EOF option for both incoming and outbound files, described
below.

Non-MS-DOS systems may well be confused by nonstandard ASCII files  from
Kermit-MS.   Files produced by Easywriter or Word Star, for example, may
need to be converted to conventional ASCII format prior to  transmission
by  commonly  available  "exporter"  programs.   Spreadsheet or database
files usually need special formatting to  be  meaningful  to  non-MS-DOS
recipients  (though  they can be transmitted between MS-DOS systems with
Kermit-MS).  Furthermore, files created by word processors (such as BLUE
or Easy Writer) that store formatting data at the end of the file, after
the control-Z and before physical end, will require  special  processing
via  SET  EOF to strip the formatting data, lest they confuse non-MS-DOS
recipients.


9.2. Program Operation

Kermit-MS can be  run  interactively,  from  a  batch  file,  or  as  an
"external"  DOS  command.    Commands  consist  of  one  or more fields,
separated by "whitespace" -- one or more spaces or tabs.

Upon initial startup, the program executes any  commands  found  in  the
file  MSKERMIT.INI  in  the  current path.  This initialization file may
contain command macro definitions, communications settings  for  one  or
more  ports,  or  any  other  Kermit-MS  commands.    Here  is  a sample
MSKERMIT.INI file:

  set warning on  ; Enable filename collision avoidance.
  ;
  ; Define some macros
  ;
  define unix set local-echo off, set flow xon, set timer off
  def ibm set parity odd, set local on, set handsh xon, set timer on
  def modem set port 2, set baud 1200
  def noisy set block-check 3, set send packet-length 40
  ;
  ; Select a port
  ;
  set port 1      ; Select COM1 for communications,
  set baud 4800   ; setting the speed to 4800 baud,
  connect         ; and make a terminal connection.

                                                                      50


Note  that  comments may be included by prefixing them with a semicolon.
The program can be run in several ways.


Interactive Operation:

To run Kermit-MS interactively, invoke  the  program  from  DOS  command
level by typing its name.  When you see the command's prompt, 

  Kermit-MS>

you  may type Kermit commands repeatedly until you are ready to exit the
program, for example:

  A>
  A>kermit

  IBM PC Kermit-MS V2.26
  Type ? for help

  Kermit-MS>send foo.*

    informational messages about the files being sent

  Kermit-MS>get bar.*

    informational messages about the files being received

  Kermit-MS>exit
  A>

During interactive operation, you may edit the command you're  currently
typing  to  erase  the character most recently typed (BACKSPACE or DEL),
the most recent field (CTRL-W), or the entire command (CTRL-U).  In  ad-
dition, you may use the help ("?") and recognition (ESC) features freely
while  typing  Kermit-MS  commands.  A question mark typed at almost any
point in a command produces a brief description of what is  expected  or
possible  at  that  point;  for  this reason, Kermit-MS uses "=" for the
single-character match wildcard in local filenames.  ESC  typed  at  any
point,  even  in  a  local  filename, will cause the current field to be
filled out if what you have typed so far is sufficient to  identify  it,
and  will leave you in position to type the next field (or to type a "?"
to find out what the next field is); otherwise, the program will beep at
you and wait for you to type further characters.

Some Kermit-MS commands, like GET, SHOW KEY, SET KEY, may prompt for ad-
ditional information on subsequent lines.  If you have  reached  one  of
these  prompts  and  then  wish  to  cancel  the  command,  you may type
Control-C.

Summary of Kermit-MS Command Characters:

  BACKSPACE     Delete the character most recently typed.  May be  typed
                repeatedly  to  delete  backwards.    You  may  also use
                DELETE, RUBOUT, or equivalent keys.

                                                                      51


  CTRL-W        Delete  the most recent "word", or field, on the command
                line.  May be typed repeatedly.

  CTRL-U        Delete the entire command line.

  CTRL-C        Cancel  the  current   command   and   return   to   the
                "Kermit-MS>" prompt.

  ?             Type a brief message describing what you are expected to
                type in the current field.

  ESC           If  enough  characters have been supplied in the current
                field (keyword or file name) to  uniquely  identify  it,
                supply  the  remainder  of the field and position to the
                next field of the command.  Otherwise, sound a beep.

  =             Wildcard character for  matching  single  characters  in
                filenames, equivalent to MS-DOS "?".


Command Line Invocation:

Kermit-MS  may also be invoked with command line arguments from DOS com-
mand level, for instance:

  A>kermit send foo.bar

or

  A>kermit set port 1, set baud 9600, connect

In this case, help  and  recognition  are  not  available  (because  the
program  won't  start  running  until  after you type the entire command
line), and Kermit-MS will exit after completing the specified command or
commands.    Therefore,  when  invoked  with  command  line   arguments,
Kermit-MS  will behave as if it were an external DOS command, like MODE.
Note that several commands may be given on the command  line,  separated
by commas.


Batch Operation:

Like  other  MS-DOS programs, Kermit-MS may be operated under batch with
either command line arguments and/or TAKE files; Kermit  will  also  run
interactively  if invoked from batch, but it will read commands from the
keyboard and not the batch file.


9.3. Kermit-MS Commands

MS-DOS Kermit implements a large subset of the commands of "ideal"  Ker-
mit.  Here's a brief summary:

          BYE  to remote server.
        CLOSE  log file and stop logging remote session.
      CONNECT  as terminal to remote system.

                                                                      52


       DEFINE  macros of Kermit-MS commands.
       DELETE  local files.
    DIRECTORY  listing of local files.
           DO  a macro expansion.
         EXIT  from Kermit-MS.
       FINISH  Shut down remote server.
          GET  remote files from server.
         HELP  about Kermit-MS.
        LOCAL  prefix for local file management commands.
          LOG  remote terminal session.
       LOGOUT  remote server.
         PUSH  to MS-DOS command level.
         QUIT  from Kermit-MS
      RECEIVE  files from remote Kermit.
       REMOTE  prefix for remote file management commands.
          RUN  an MS-DOS program.
         SEND  files to remote Kermit.
       SERVER  mode of remote operation.
          SET  various parameters.
         SHOW  various parameters.
        SPACE  inquiry.
       STATUS  inquiry.
         TAKE  commands from file.

The  remainder  of  this  section concentrates on the commands that have
special form or meaning for MS-DOS Kermit.  Not  all  of  the  following
commands  are  necessarily  available on all MS-DOS systems, and some of
the commands may work somewhat differently between DOS versions.


9.3.1. Commands for File Transfer

The file transfer commands are SEND, GET, and RECEIVE.


                            THE SEND COMMAND

Syntax:  SEND filespec1 [filespec2]

The SEND command causes a file or file group to be sent from  the  local
MS-DOS system to the Kermit on the remote system.  The remote Kermit may
be running in either server or interactive mode; in the latter case, you
should  already have given it a RECEIVE command and escaped back to your
PC.

filespec1 may contain a device designator, like "A:"  and  the  wildcard
characters  "*"  and/or "=".  The current release of Kermit-MS, however,
does not allow pathnames in the SEND command file specification.

If filespec1 contains wildcard characters then all matching  files  will
be  sent,  in  the same order that MS-DOS would show them in a directory
listing.  If filespec1 specifies a single file, you may direct Kermit-MS
to send that file with a different name, given in filespec2.    For  in-
stance, in the command 

  Kermit-MS>send foo.bar framus.widget

                                                                      53


filespec2  begins  with the first nonblank character after filespec1 and
ends with the carriage return; thus it may contain blanks or  other  un-
usual  characters  that may be appropriate on the target machine.  Lower
case letters in filespec2 are raised to upper case for transmission.

If a file can't be opened for  read  access,  standard  MS-DOS  recovery
procedures will take place.  For example:

  Not ready error reading drive A
  Abort, Retry, Ignore?

If you select "Abort," you will be returned to DOS.

Files will be sent with their MS-DOS filename and filetype (for instance
FOO.TXT,  no device or pathname).  Each file is sent as is, with no con-
versions done on the data, except for possibly adding or deleting a ter-
minating Control-Z character (see the SET EOF command).

Once you give Kermit-MS the SEND command, the name of each file will  be
displayed  on  your  screen  as  the transfer begins; packet, retry, and
other counts will be displayed along with informational messages  during
the  transfer.    If  the file is successfully transferred, you will see
"Complete", otherwise  there  will  be  an  error  message.    When  the
specified operation is done, the program will sound a beep.

Several  single-character commands may be given while a file transfer is
in progress:

  ^X  (Control-X) Stop sending the current file and go on  to  the  next
      one, if any.

  ^Z  Stop sending this file, and don't send any further files.

  ^C  Return  to Kermit-MS command level immediately without sending any
      kind of notification to the remote system.

  ^E  Like ^C, but send an Error packet to the remote Kermit in  an  at-
      tempt to bring it back to server or interactive command level.

  CR  Simulate a timeout: resend the current packet, or NAK the expected
      one.

Control-X  and Control-Z send the proper protocol messages to the remote
Kermit to bring it gracefully to the desired state.    Control-C  leaves
the  remote  Kermit  in  whatever  state it happens to be in.  Control-E
"aborts" any protocol that is taking place.


                          THE RECEIVE COMMAND

Syntax: RECEIVE [filespec]

The RECEIVE command tells Kermit-MS to receive a file or file group from
the other system.  Kermit-MS simply waits for the file to  arrive;  this
command  is  not to be used when talking to a Kermit server (use GET for
that).  You should already have issued a SEND command to the remote Ker-

                                                                      54


mit and escaped back to Kermit-MS before issuing the RECEIVE command.

If the optional filespec is provided, store the incoming file under that
name.    The filespec may include a device designator, or may consist of
only a device designator.  The incoming file is stored on the default or
specified device (current directory in DOS 2.0 and thereafter).   If  no
name  was  specified,  the  name from the incoming file header packet is
used; if that name is not a  legal  MS-DOS  file  name,  Kermit-MS  will
delete  excessive characters from it, and will change illegal characters
to the letter X.

If the optional filespec was provided, but more than one  file  arrives,
the  first  file  will  be  stored  under  the  given  filespec, and the
remainder will be stored under their own names,  but  on  the  specified
device.

If an incoming file does not arrive in its entirety, Kermit-MS will nor-
mally  discard it; it will not appear in your directory.  You may change
this behavior by using the command SET INCOMPLETE KEEP, which will cause
as much of the file as arrived to be saved in your directory.

The same single-character commands are available as during SEND:

  ^X  Request that the remote Kermit stop sending the current file,  and
      proceed  to  the  next one immediately.  Since this is an optional
      feature of the Kermit protocol, the remote Kermit might not  honor
      the request.

  ^Z  Request that the remote Kermit terminate the entire transfer; this
      is  also  an  optional feature that may or may not be supported by
      the remote Kermit.

  ^C, ^E, and CR operate in the same way as they do during SEND.

If the incoming file has the same name as a file  that  already  exists,
and  WARNING is set ON, Kermit-MS will change the incoming name (and in-
form you how it renamed it) so as not  to  obliterate  the  pre-existing
file.   If WARNING is OFF, the original file will be overwritten; if you
type ^X or ^Z to interrupt the transfer, you'll either get a partial new
file, or else both the old and the new file of that name will  be  lost,
depending  on  SET  INCOMPLETE.  In any case, when WARNING is off, files
with the same name as incoming files will not survive.

Caution: If an incoming file's name  (the  part  before  the  dot)  cor-
responds  to an MS-DOS device name, such as NUL, COM1, CON, AUX, or PRN,
output will go to that device, rather than to a  file  with  that  name.
This is a feature of MS-DOS.

                                                                      55


                            THE GET COMMAND

Syntax: GET remote-filespec

The GET command requests a remote KERMIT server to send the file or file
group  specified by remote-filespec.  This command can be used only when
Kermit-MS has a KERMIT server on the other end of the connection.   This
means  that  you must have CONNECTed to the other system, logged in, run
KERMIT there, issued the SERVER command, and escaped back (e.g. ^]C)  to
the  local  Kermit-MS.  If the remote Kermit does not have a SERVER com-
mand, then you should use SEND and RECEIVE as described above.

You may use the GET command to specify a different name for storing  the
incoming.    Just  type  GET  alone  on a line, and you will be prompted
separately for the remote filespec and the local filespec:

  Kermit-MS>get
   Remote Source File: com1.txt
   Local Destination File: xcom1.txt

If more than one file arrives, only the first will be renamed.

The remote filespec is any string that can be a legal file specification
for the remote system; it is not parsed or validated locally.    It  can
contain  whatever wildcard or file-group notation is valid on the remote
system.  As files arrive, their names will be displayed on your  screen,
along  with packet traffic statistics and status messages.  You may type
^X to request that the current incoming file be cancelled, ^Z to request
that the entire incoming batch be cancelled, and ^C or ^E to return  im-
mediately to the Kermit-MS> prompt, exactly as described for the RECEIVE
command.


9.3.2. Commands for Connecting and Disconnecting

The CONNECT command connects your PC as a terminal to the remote system,
so that you can start up Kermit there.  The BYE, FINISH, and LOGOUT com-
mands allow you to shut down a remote Kermit server.

BYE             When  communicating with a remote KERMIT server, use the
                BYE command to shut down the server, log  out  its  job,
                and exit from Kermit-MS to DOS.

FINISH          Like BYE, FINISH shuts down the remote server.  However,
                FINISH  does not log out the server's job.  You are left
                at Kermit-MS prompt level so that you can  connect  back
                to the job on the remote system.

LOGOUT          The  LOGOUT command is identical to the BYE command, ex-
                cept you will remain at Kermit-MS prompt  level,  rather
                than exit to DOS, so that you can establish another con-
                nection.

                                                                      56


The CONNECT Command

Establish  an interactive terminal connection to the system connected to
the currently selected communications port (e.g.  COM1  or  COM2)  using
full duplex (remote) echoing and no parity unless otherwise specified in
previous  SET  commands.    Get  back  to Kermit-MS by typing the escape
character followed by the letter C. The escape character is Control-] by
default.

You can use the SET ESCAPE command to define a different escape  charac-
ter,  and  on some systems (including the PC and XT) you can SET BAUD to
change the baud rate, and SET PORT to switch between ports.

Terminal emulation is described in greater detail in section 9.4 below.


9.3.3. Commands for File Management

Kermit-MS provides commands or managing both local and remote files.


                          THE REMOTE COMMANDS

The REMOTE keyword is a prefix for a number of commands.   It  indicates
that  the command is to be performed by the remote Kermit, which must be
running as a server.  Note that not all Kermit servers  are  capable  of
executing  all  these  commands,  and some Kermit servers may be able to
perform functions for which Kermit-MS does not yet have the  correspond-
ing  commands.  In case you send a command the server cannot execute, it
will send back a message stating that the command is unknown to it.   If
the  remote  server can execute the command, it will send the results to
your screen.  Here are the REMOTE commands which Kermit-MS may issue:

CWD [directory] Change Working Directory on the remote host.  Change the
                default source and destination area  for  file  transfer
                and  management.    You will be prompted for a password,
                which will be erased as you type it.    If  you  do  not
                supply  a  password  (i.e.  you  type  only  a  carriage
                return), the server will attempt to access the specified
                directory without a password.  If you do  not  supply  a
                directory  name,  your default or login directory on the
                remote system will be assumed.

DELETE filespec Delete the specified file or files on the remote system.
                In response, the remote host should display  a  list  of
                the files that were or were not successfully deleted.

DIRECTORY [filespec]  The remote system will provide a directory listing
                of the specified files.  If no files are specified, then
                all  files  in  the  default  area  (the current working
                directory) will be listed.

HELP            The remote  host  tells  what  server  functions  it  is
                capable of.

HOST [command]  Send  the command to the remote system's command proces-

                                                                      57


                sor for execution.

SPACE [directory]
                Provide  a  brief summary of disk usage in the specified
                area on the remote host.  If none specified, the default
                or current area will be summarized.

TYPE filespec   Display the contents of the  specified  remote  file  or
                files on the screen.


                           THE LOCAL COMMAND

The  LOCAL  keyword  is a prefix for a number of commands.  It indicates
that the specified command is to be executed on the local MS-DOS system.
The LOCAL prefix may be omitted.  The local commands available are:

DELETE filespec Deletes the specified file or files.   As  in  DOS,  the
                names of the deleted files are not listed, only the mes-
                sage  "file(s)  deleted"  or "file(s) not found", and if
                you give the command "delete *.*", Kermit-MS will prompt
                "Are you sure?", like DOS.

DIRECTORY [filespec]  Lists the names,  sizes,  and  creation  dates  of
                files  that  match  the given file specification.  If no
                filespec is given, the command is equivalent to DIR *.*.

SPACE           Performs the  MS-DOS  CHKDSK  function  by  running  the
                CHKDSK  program  from  the current path, or default disk
                under DOS 1.1.

RUN filespec    Runs the specified file, which must be in .EXE  or  .COM
                format,  from  the  specified  path  or according to the
                value of the PATH variable if no path  was  included  in
                the  filespec.    This  command  requires  MS-DOS 2.0 or
                higher.

PUSH            Invokes an MS-DOS command processor  "under"  Kermit-MS,
                either  COMMAND.COM or whatever shell you have specified
                with COMSPEC.  When you return  to  Kermit-MS  (for  in-
                stance,  by  typing  the  MS-DOS EXIT command), you will
                find Kermit-MS as you left it, with all settings intact.
                This command only works in MS-DOS 2.0 or higher.

The local RUN command has various uses, one of which  is  to  supplement
the  features  of Kermit-MS.  For instance, suppose there is an involved
procedure that you regularly perform on a certain remote system --  this
might include giving commands to a modem to dial the system, looking for
a particular herald or prompt, performing a login command sequence, run-
ning a selected application, and then running Kermit to send the results
back  to your PC.  You could write a program in the compiled language of
your choice, say C or BASIC, to send the desired commands to your  modem
and  the  remote  system and to look for the appropriate responses.  You
could put all this in a Kermit-MS TAKE command file (see below), like

                                                                      58


  run update.com
  receive

The  program,  called UPDATE in this case, does everything up to and in-
cluding starting Kermit sending  from  the  remote  system.    When  the
program  terminates,  the next Kermit-MS command, "receive," is executed
from the command file.  When the end of the command file is reached, in-
teractive operation is resumed.


                            THE TAKE COMMAND

Syntax: TAKE filespec

Execute Kermit commands from the specified file, which  may  include  an
explicit  path;  if no path is specified, the value of the PATH variable
is used; if PATH has no value, then the current disk and  directory  are
searched.  The command file may include TAKE commands, but it cannot in-
clude  characters  to be sent to a remote host during terminal emulation
(i.e. after a CONNECT command).  A command  file  may  include  comments
prefixed by semicolons.


                            THE LOG COMMAND

Syntax: LOG filespec

Specifies  that all characters that appear on your screen during CONNECT
will be recorded in the specified file.  This allows  you  to  "capture"
files  from  a  remote  system  that  doesn't have Kermit, as well as to
record remote command typescripts.  The log is closed when you EXIT from
Kermit-MS or when you issue an explicit CLOSE command.


9.3.4. The SERVER Command

Kermit-MS is capable of acting as a Kermit server, providing file trans-
fer for users coming in through one of the  communication  ports.    The
current  version  of Kermit-MS can send files (the user on the other end
types the GET command), receive files (the user types  SEND),  and  ter-
minate, giving control back to the console (user types BYE).

To  put Kermit-MS into server mode, first issue any desired SET commands
to select and configure the desired port, and then type the SERVER  com-
mand.   Kermit-MS will await all further instructions from the user Ker-
mit on the other end of the connection, which may be hardwired  or  con-
nected through an autoanswer modem.  For example:

  Kermit-MS>set port 1
  Kermit-MS>set baud 1200
  Kermit-MS>set timer on
  Kermit-MS>set warning on
  Kermit-MS>server

                                                                      59


9.3.5. The SET Command

Syntax: SET parameter [value]

Establish  or  modify  various  parameters for file transfer or terminal
connection.  You can examine their values with the SHOW command.    Note
that  there  is  no  "set  ibm"  command;  IBM  mainframe  communication
parameters may be selected with a command macro (see below).   The  fol-
lowing SET commands are available in Kermit-MS:

                BAUD  Communications port line speed
                BELL  Whether to beep at the end of a transaction
    BLOCK-CHECK-TYPE  Level of error checking for file transfer
               DEBUG  Display packet contents during file transfer
        DEFAULT-DISK  Default disk drive for file i/o
         DESTINATION  Default destination device for incoming files
         END-OF-LINE  Packet terminator
                 EOF  Method for determining or marking end of file
              ESCAPE  Escape character for CONNECT
        FLOW-CONTROL  Enable or disable XON/XOFF
           HANDSHAKE  Half-duplex line turnaround option
             HEATH19  Heath/Zenith-19 terminal emulation
          INCOMPLETE  What to do with an incompletely received file
                 KEY  Specify key redefinitions, or "keystroke macros"
          LOCAL-ECHO  Specify which host does the echoing during CONNECT
              PARITY  Character parity to use
                PORT  Select a communications port
              PROMPT  Change the "Kermit-MS>" prompt to something else
             RECEIVE  Request remote Kermit to use specified parameters
              REMOTE  For running Kermit-MS interactively from back port
                SEND  Use the specified parameters during file transfer
           TAKE-ECHO  Control echoing of commands from TAKE files
               TIMER  Enable/disable timeouts during file transfer
             WARNING  Specify how to handle filename collisions

The SET commands that are peculiar to MS-DOS Kermit are now described in
greater detail.  The others behave as in "ideal" Kermit.


SET BAUD

Syntax: SET BAUD rate

Set  the  speed  of  the currently selected terminal communications port
(COM1 by default) to 300, 1200, 1800, 2400, 4800, 9600 or  other  common
baud  rate.    Some implementations do not support this command.  In any
case, Kermit-MS leaves the current communication port settings alone un-
less you issue explicit SET commands to change them.


SET BELL

Syntax: SET BELL ON or OFF

Specifies whether bell (beeper) should sound upon completion of  a  file
transfer operation.

                                                                      60


SET DEBUG

Syntax: SET DEBUG ON or OFF

ON      Display  the  Kermit  packet  traffic on your screen during file
        transfer.  If the debugger is loaded,  transfer  control  to  it
        when CTRL-C is typed.  In Heath-19 terminal emulation on the IBM
        PC, display unusual control characters in uparrow notation.

OFF     Don't  display  debugging information (this is the default).  If
        debugging was in effect, turn it off.


SET DEFAULT-DISK

Syntax: SET DEFAULT-DISK x:

Specify the default disk drive to use for file transfer, directory list-
ings, and so forth.  Equivalent to typing the DOS command  for  changing
disks.


SET DESTINATION

Syntax: SET DESTINATION device

Specify the device for incoming files, DISK or PRINTER.  SET DESTINATION
PRINTER will cause incoming files to be spooled directly to the printer.
The normal destination is DISK.


END-OF-LINE

Syntax: SET END-OF-LINE number

If  the  remote  system needs packets to be terminated by anything other
than carriage return, specify the decimal value  of  the  desired  ASCII
character.


SET EOF

Syntax: SET EOF option

Controls how the end of file is handled.  The options are:

CTRL-Z          Append  a  Control-Z character to the end of an incoming
                file, unless it already ends with a Control-Z.   Certain
                MS-DOS text editors and other applications require files
                to  be  in  this  format.  For outbound files, treat the
                first Control-Z as the end of file, and do not  send  it
                nor any characters following it.

NOCTRL-Z        (Default)  Store  incoming files exactly as is, and send
                MS DOS files exactly as  is  (according  to  their  byte
                count).

                                                                      61


SET ESCAPE

Syntax: SET ESCAPE character

Specify  the  control  character you want to use to "escape" from remote
connections back to Kermit-MS.  The default  is  normally  ^]  (Control-
Rightbracket).  The  character is entered literally, and should normally
be chosen from the ASCII control range.


SET FLOW-CONTROL

Syntax: SET FLOW-CONTROL option

Specify the full duplex  flow  control  to  be  done  on  the  currently
selected  port.    The  current  options  are  XON/XOFF  and  NONE.  The
specified type of flow control will be done during both terminal  emula-
tion  and file transfer.  If set to XON/XOFF, HANDSHAKE is automatically
set to OFF.


SET HANDSHAKE

Syntax: SET HANDSHAKE option

Specify any half-duplex handshaking to be done on the currently selected
port.  The options are BELL, CR, LF, NONE, XOFF, or XON.  The  specified
handshaking will be done during file transfer only.  If HANDSHAKE is set
to anything other than NONE, FLOW-CONTROL is automatically set to OFF.


SET HEATH19

Syntax: SET HEATH19 ON or OFF

Specify  whether Kermit-MS should use its built-in software facility for
emulating a Heath/Zenith-19 (H19) terminal.

ON      During CONNECT, incoming characters are to be examined  for  H19
        terminal  screen control commands (escape sequences), and if en-
        countered, the commands are to be emulated  on  the  PC  screen.
        The  H19  codes are a superset of the popular DEC VT52 codes, so
        if your system does not support the Heath-19, you  may  tell  it
        that  your  terminal  type  is  VT52  (or  one  of the many VT52
        compatibles).  The Heath-19 codes are listed  in  section  9.10,
        below.

OFF     All  incoming  characters  will  be  sent  to the screen "bare",
        through DOS.  If you have loaded a device driver  into  DOS  for
        the CON: device, such as ANSI.SYS, then that driver will be able
        to  interpret  the codes itself. Most non-IBM systems have their
        own screen control code interpreter built into DOS or  firmware,
        or available as a loadable device driver.

See section 9.4 for details about terminal emulation.

                                                                      62


SET KEY

Syntax: SET KEY key-specifier

Specifies  that when the designated key is struck during terminal emula-
tion, the associated character string is sent.  The key-specifier is one
of the keywords F1, F2, ..., or SCAN followed by a scan code.    Systems
that have a BACKSPACE key also include BACKSPACE as a keyword.

If SCAN is used, it is followed by a decimal number to indicate the scan
code  of  the  key, which you would ascertain from your system reference
manual, or else by using the  Kermit-MS  SHOW  KEY  command.    SET  KEY
prompts  you  on  a new line for the definition string.  Certain charac-
ters, like ESC and CR, may not be entered literally into the string, but
can be included by inserting escape codes of the form \ooo, a  backslash
followed  by  a  2-  or  3-digit octal number corresponding to the ASCII
value of the desired character.  If some other key redefinition package,
like  ProKey,  has  been  loaded,  then  its  redefinitions  will   take
precedence over Kermit's.

The  SET  KEY  command is illustrated in the terminal emulation section,
9.4, below.


SET LOCAL-ECHO

Syntax: SET LOCAL-ECHO option

Specify how characters are echoed during terminal emulation on the  cur-
rently  selected port.  ON specifies that characters are to be echoed by
Kermit-MS (because neither the remote computer  nor  the  communications
circuitry  has  been  requested  to  echo), and is appropriate for half-
duplex connections.  LOCAL-ECHO is  OFF  by  default,  for  full-duplex,
remote echo operation.

When  you SET LOCAL-ECHO ON, the current HANDSHAKE (if any) is automati-
cally enabled and full-duplex FLOW-CONTROL is automatically turned  off.
When you SET LOCAL-ECHO OFF, HANDSHAKE is also disabled, and the current
mode  of  FLOW-CONTROL  (if  any)  is  enabled.  If this behavior is un-
desired, you may override it by typing explicit  SET  HANDSHAKE  or  SET
FLOW commands after entering the SET LOCAL-ECHO command.


SET PARITY

Syntax: SET PARITY keyword

Specify  the character parity to be used on the currently selected port.
The choices for SET PARITY are NONE (the default), ODD, EVEN, MARK,  and
SPACE.  NONE means no parity processing is done, and the 8th bit of each
character can be used for data when transmitting binary files.

You  will  need to SET PARITY to ODD, EVEN, MARK, or possibly SPACE when
communicating with a system, or over a network, or through modems,  con-
centrators, multiplexers, or front ends that require or impose character
parity  on  the  communication line.  For instance, GTE Telenet requires

                                                                      63


MARK parity.  If you neglect to SET PARITY when the communications equi-
pment requires it, the symptom may be that terminal emulation works par-
tially, and file transfer does not work at all.

If you have set parity to ODD, EVEN, MARK, or SPACE, then Kermit-MS will
request  that  binary files will be transferred using 8th-bit-prefixing.
If the other side knows how to do 8th-bit-prefixing (this is an optional
feature of the KERMIT protocol, and not all  implementations  of  KERMIT
have it), then binary files can be transmitted successfully.  If NONE is
specified,  8th-bit-prefixing will not be requested.  Note that there is
no advantage to using parity; it only slows Kermit file  transfer  down.
The  SET  PARITY  command  is  provided only to allow Kermit to adapt to
hardware that insists upon using parity.


SET PORT

Syntax: SET PORT number

On machines with more than one communications port, select the  port  to
use  for  file  transfer  and CONNECT.  This command lets you use a dif-
ferent asynchronous adapter, or switch between two or more  simultaneous
remote  sessions.    Subsequent  SET  BAUD, PARITY, HANDSHAKE, FLOW, and
LOCAL-ECHO commands will apply to this port only.  SET  PORT  1  selects
COM1, SET PORT 2 selects COM2.


SET REMOTE

Syntax: SET REMOTE ON or OFF

If  you  wish  to run Kermit-MS interactively through the back port, for
instance after the operator has done CTTY COM1, you must give  the  com-
mand SET REMOTE ON; this suppresses the file transfer display screen, so
that the display won't interfere with the file transfer itself.


SET RECEIVE

Syntax: SET RECEIVE parameter value

At  the  beginning of a protocol operation, request the remote Kermit to
use the given value specified parameter, or inform  Kermit-MS  that  the
remote Kermit will be using it.

PACKET-LENGTH   Ask  the  remote  Kermit  to  use  the specified maximum
                length for packets that it sends to Kermit-MS.  The nor-
                mal (and maximum) length is 94.   Use  this  command  to
                shorten packets if the communication line is noisy; this
                will  decrease  the probability that a particular packet
                will be corrupted, and will  reduce  the  retransmission
                overhead  when  corruption  occurs, but it will increase
                the protocol overhead.

PADCHAR         Ask the remote Kermit to use the given character for in-
                terpacket padding.  Kermit-MS should never  require  any

                                                                      64


                padding.

PADDING         Ask the remote Kermit to insert the given number of pad-
                ding  characters  before  each  packet  it  sends.  This
                should never be necessary.

START-OF-PACKET The remote Kermit will be marking the beginning of pack-
                ets with something other than Control-A.  This  will  be
                necessary  only  if the hosts or communication equipment
                involved cannot pass a Control-A through as data.

TIMEOUT         Ask the remote Kermit to time out after the given number
                of seconds if a packet expected from Kermit-MS  has  not
                arrived.   Use this command to change the normal timeout
                interval.


SET SEND

Syntax: SET SEND parameter value

PACKET-LENGTH   Use the specified maximum length for  outbound  packets.
                Normally,  Kermit-MS uses whatever length the other Ker-
                mit requests.

PADCHAR         Use the specified  character  for  interpacket  padding.
                Some hosts may require some padding characters (normally
                NUL or DEL) before a packet.

PADDING         How many padding characters to use between packets, nor-
                mally zero.

QUOTE           Use  the  indicated  printable  character  for prefixing
                (quoting) control characters and  other  prefix  charac-
                ters.  The only reason to change this would be for send-
                ing a very long file that contains very many "#" charac-
                ters (the normal control prefix) as data.

START-OF-PACKET Mark the beginning of outbound packets with some control
                character  other than Control-A.  This will be necessary
                only if the remote host or the communication channel in-
                volved cannot accept a Control-A as data.    The  remote
                host  must have been given the corresponding SET RECEIVE
                START-OF-PACKET command.

TIMEOUT         Change Kermit-MS's normal timeout interval; this command
                is effective only if TIMER is set to be ON; it  is  nor-
                mally   OFF  so  that  the  remote  KERMIT  can  control
                timeouts.

                                                                      65


SET TAKE-ECHO

Syntax: SET TAKE-ECHO ON or OFF

Specifies  whether  screen  display  should occur during implicit or ex-
plicit TAKE operations on MSKERMIT.INI or other Kermit-MS command files,
and during evaluation of macro definitions.  Handy for finding errors in
command files.


SET TIMER

Syntax: SET TIMER ON or OFF

Enable or disable the timer that is used during file transfer  to  break
the  deadlock  that  occurs when an expected packet does not arrive.  By
default, the timer is OFF, because Kermit-MS is usually used in conjunc-
tion with a mainframe that is doing its own timeouts.    During  a  file
transfer,  it  is  sufficient  for one side to do the timing out and the
mainframe is usually better equipped to adjust timeout  intervals  based
on  system  load or other conditions.  The timer should be set ON if you
are communicating with a system that cannot do  timeouts,  such  as  IBM
VM/CMS Kermit.


SET WARNING

Syntax: SET WARNING option

Specify  what to do when an incoming file has the same name as an exist-
ing file in the default directory of the default device.  If ON,  Kermit
will  warn  you  when  an incoming file has the same name as an existing
file, and automatically rename the incoming file (as  indicated  in  the
warning  message) so as not to destroy (overwrite) the pre-existing one.
If OFF, the pre-existing file is destroyed, even if  the  incoming  file
does not arrive completely.


9.3.6. The SHOW Command

Syntax: SHOW option

Currently,  most  parameters  that  may be altered with SET commands are
displayed by the STATUS command.  The SHOW command is used for  display-
ing macro definitions and key redefinitions.

The  SHOW  MACROS  command  displays  the  definitions  of all currently
defined macros.

The SHOW KEY command allows you to determine the scan code  produced  by
pressing  a  given  key,  so that you can construct a SET KEY command to
redefine the key.  If the key already has a redefinition in effect, that
too will be displayed.  In this example, a DEC Rainbow  user  determines
the  scan  code for the accent grave key, and then redefines that key to
send ESC:

                                                                      66


  Kermit-MS>show key
  Press a key: `
    Scan Code:  96
    Definition:
  Kermit-MS>set key scan 96
  Definition string: \33
  Kermit-MS>show key
  Press a key: `
    Scan Code:  96
    Definition: \33
  Kermit-MS>

The SHOW KEY command only works on certain systems.


9.3.7. Command Macros

Kermit-MS  provides  a  facility  for  combining commands into "macros."
Command macro definitions may be included  in  your  MSKERMIT.INI  file,
TAKEn  explicitly from a specified file, or typed interactively, and may
be invoked with the DO command.


                           THE DEFINE COMMAND

Kermit-MS command macros are constructed with the DEFINE command.    The
syntax is 

  DEFINE macro-name  [command [, command [, ...]]]

Any Kermit-MS commands may be included.  Example:

  define telenet set parity mark, set baud 1200, connect


                             THE DO COMMAND

A  Kermit-MS  command  macro  is  invoked using the DO command.  For in-
stance, Kermit-MS comes with a  predefined  macro  to  allow  convenient
setup for IBM communications; to invoke it, you would type 

  do ibm

The  IBM macro is defined as "parity mark, handshake xon, local-echo on,
timer on".  You can delete or replace this definition by  adding  a  new
(perhaps null) definition, such as 

  define ibm parity even, handshake cr, local-echo on, timer on

or 

  define ibm

                                                                      67


9.4. Terminal Emulation

When you issue the CONNECT command, your PC acts as a terminal connected
to  a  remote computer through the currently selected port.  The charac-
ters you type are sent out the port, and characters that arrive  at  the
port  are displayed on your screen.  If you have not previously issued a
SET PORT command, COM1 is used.  If you have SET LOCAL-ECHO ON  for  the
selected  port,  then Kermit-MS will display characters on the screen as
you type them.  If LOCAL-ECHO is OFF, then XON/XOFF flow control will be
done unless you have SET FLOW-CONTROL OFF.  If you have  SET  PARITY  to
anything  other  than NONE, Kermit-MS will add the appropriate parity to
each outbound character, and strip any parity from incoming ones.  While
CONNECTed, you can also communicate with an autodialer or "smart  modem"
to  control  the  communications line, hang it up, and the like; for in-
stance, typing +++ to a Hayes-like modem will allow you to  follow  that
by dialing or hangup commands.

If  Heath-19  emulation  is  being  done,  incoming  characters  will be
monitored for H19/VT52 escape sequences.  These will be interpreted  ac-
cording  to the table in section 9.10.  In addition, keys on the numeric
keypad will send H19/VT52 sequences unless you disable this  feature  in
some  way,  for instance by pressing Num Lock on the IBM PC keyboard, or
with key redefinitions.

    Caution: On some systems, such as the IBM PC and  XT,  Kermit-MS
    accesses  the  screen  memory memory directly to perform certain
    H19 emulation functions  such  as  character  insert/delete  and
    screen scroll.  Without direct screen memory access, these func-
    tions  would  be  painfully  slow.   Although Kermit-MS has been
    tested successfully on a variety of monochrome and  color  adap-
    ters  and  monitors,  there  may  be combinations for which this
    method could cause video problems, such as snow.    Should  this
    occur,  you  can alleviate the problem by setting HEATH19 emula-
    tion OFF.  In that  case,  however,  you  remove  not  only  the
    problems,  but  also  the  desirable features of emulation.  But
    Kermit-MS does permit you to load  an  external  console  device
    driver,  such  as  IBM's ANSI.SYS, to provide any desired screen
    control.

Here are the terminal emulation options for the systems  presently  sup-
ported by Kermit-MS:

  System         EscChar   Cabilities   Terminal Service
  IBM PC, XT       ^]      R M P K      Heath19 emulation
  DEC Rainbow      ^]      R   P K      VT102 firmware
  HP-150           ^]      R            HP-2623 firmware
  Wang PC          ^A                   Wang firmware
  Generic DOS      ^]                   Depends on system

Under Capabilities, R means rollback, M means mode line, P means printer
control, and K means key redefinition.

IBM PC/XT Kermit can disable Heath-19 emulation and use an external con-
sole device driver like ANSI.SYS instead.

When you first issue the CONNECT command, a message (on some systems, an

                                                                      68


inverse  video  "mode line") will display the most important facts about
the connection you've just established, so that you can quickly diagnose
any problems.  The items displayed in the mode line include  the  escape
character,  port number, the baud rate, the parity, the echo, and how to
get help, for instance:

+---------------------------------------------------------------------+
|EscChar:^],Port:1,Baud:9600,Parity:None,Echo:Remote,Type ^]? for Help|
+---------------------------------------------------------------------+

The escape character is used to regain the attention of Kermit-MS.  When
you type the escape character, Kermit-MS waits for you to follow it with
a single character command.  For instance, the  single-character-command
"?"  produces  a  list  of  available single character commands, such as
this:

  ?   Help -- prints the available single-character commands.
  C   Close the connection and return to Kermit-MS prompt level.
  S   Show the status of the connection.
  B   Send a BREAK signal to the port.
  0   (the digit zero) Send a NUL (ASCII 0) to the port.
  Q   Temporarily quit logging the remote session.
  R   Resume logging the remote session.
  M   Toggle the mode line, i.e. turn it off if it is on & vice versa.
  ^]  (or whatever you have set the escape character to be)
      Typing the escape character twice sends one copy of it to the con-
      nected host.

Typing any other character (except the space bar,  which  is  the  "null
command")  after  the escape character will cause Kermit-MS to beep, but
will do no harm.  The escape character can be changed to something other
than Control-Rightbracket by using the SET ESCAPE command.

Kermit-MS includes several advanced features  for  use  during  terminal
emulation,  including  screen scroll, printer control, and key redefini-
tions.


Screen Scroll

Kermit-MS provides several pages of screen memory, which may be scrolled
up and down using keys as follows:

  Function            IBM PC/XT   Rainbow           HP-150
  Screen Down         PgDn        PrevScreen        Prev
  Line Down           Ctrl-PgDn   Ctrl-PrevScreen   Shift-UpArrow
  Screen Up           PgUp        NextScreen        Next
  Line Up             Ctrl-PgUp   Ctrl-NextScreen   Shift-DownArrow
  Top of Memory       Home
  Bottom of Memory    End

There is presently no way to assign these functions to other keys.

                                                                      69


Printer Control

A  locally  attached  printer may be controlled in the normal manner, on
most systems.  Pushing the "Print Screen" key (shifted on some  systems)
will  cause the current contents of the screen to be printed or spooled;
holding down CTRL while depressing Print Screen will start or  stop  the
spooling  of  incoming  characters to the printer.  ^P or ^N are sent to
the host during terminal emulation, and do not toggle printing, as  they
do when you're talking directly to DOS.

CTRL-Print-Screen  can be simulated with the Kermit-MS LOG PRN and CLOSE
commands.


Key Redefinitions

Key redefinitions are useful for defining "keystroke  macros"  of  login
sequences,  frequently issued commands, and so forth, and for setting up
the terminal for use with host resident software designed to  work  with
terminals  that send predefined sequences from their function keys.  For
instance, here's a key redefinition file for arranging the  DEC  Rainbow
keyboard into the normal ASCII keyboard layout:

  ; Make shift-comma send a left angle bracket
  set key scan 556
  <
  ; Shift-period sends a right angle bracket
  set key scan 558
  >
  ; Accent grave is where ESC is supposed to be
  set key scan 96
  \33
  ; Put accent grave on the ESC function key
  set key f11
  `

The  SET  KEY  facility may be used provide the PC with a "meta" key for
use with editors like EMACS or TVEDIT that can use "meta characters"  as
commands.   A meta key is a shift key whose effect is to turn on the 8th
(parity) bit of the character.  For instance, on the  IBM  PC  the  scan
codes  produced  by  holding  down  ALT  together with other keys can be
determined using SHOW KEY, and then 8-bit ASCII equivalents with the 8th
bit turned on can be defined using SET KEY; if the scan code produced by
typing ALT-a, i.e. the letter "a" (ASCII 141, octal) with  the  ALT  key
held  down,  is  2078  (decimal),  you  would set the META equivalent to
141+200=341 (octal), or "\341" in octal SET KEY notation:

  Kermit-MS>sho key
  Press a key: ALT-a
    Scan Code: 2078
    Definition:
  Kermit-MS>set key scan 2078
  Definition String: \341

Whenever you type ALT-a with this definition in effect,  Kermit-MS  will
transmit octal 341, rather than 141.

                                                                      70


9.6. Compatibility with Older Versions of MS-DOS Kermit

MS-DOS  Kermit  supports  many  different systems.  Like CP/M-80 KERMIT,
this support was added to the program piecemeal, at  many  sites,  using
conditional assembly.  However, before allowing the program to grow into
a  complicated  monolith like CP/M-80 KERMIT, we have broken the program
up into separate modules,  with  system  dependencies  isolated  into  a
single  module consisting of compact collections of low-level primitives
for console and port i/o.

The last monolithic (single source file) release of  MS-DOS  Kermit  was
1.20.    To this and earlier versions was added support for systems like
the Seequa Chameleon, the Tandy 2000, the Victor 9000, the  Heath/Zenith
100,  and  others.    Eventually,  support  for these systems may be in-
tegrated with the new modular version.  Meanwhile, implementations based
on these old versions will have at least the  following  incompatibilies
from the version described here:

   - RECEIVE filespec is used instead of GET filespec.  There is no
     GET  command  in  older  versions, and no way to specify a new
     name for an incoming file.
   - No LOCAL or REMOTE commands.
   - No 8th-bit  prefixing,  repeat  counts,  CRCs  or  2-character
     checksums.
   - No TAKE or initialization files.
   - No command macros or command line arguments.
   - No terminal session logging.

and others, depending on the specific version.


9.7. What's Missing

Kermit-MS  has plenty of room for improvement.  Features that need to be
improved or added include:

   - A built-in facility for sending files "raw" to the remote sys-
     tem, obeying current settings for parity, flow control,  hand-
     shake,  and so forth.  This might include a script interpreta-
     tion  facility  to  allow  remote  sessions  to  be  conducted
     automatically.  For the present, this can be accomplished with
     a  user-supplied  program  invoked with the Kermit-MS RUN com-
     mand.

   - Additional  functionality  when   running   in   server   mode
     --  directory  listings,  file deletion, execution of DOS com-
     mands, etc.

                                                                      71


   - More commands when talking to remote servers -- REMOTE RENAME,
     COPY, STATUS, WHO, etc.

   - Filename  conversion  options  (normal form, handling of fully
     qualified filespecs, etc.).

   - Transaction file logging.

   - Improved command parsing; for instance, accept default  values
     for omitted trailing fields.

   - A better built-in help facility.

   - Support for Kermit file attribute packets.

   - The Kermit-MS program is quite large.  Much of the size is due
     to  the deliberate decision to provide support for versions of
     MS-DOS prior to 2.0.  At some point, this  support  should  be
     removed.    This  will not only reduce the size of the program
     considerably, but also provide much more flexibility.

                                                                      72


9.10. Heath/Zenith-19 Control Codes

The  Heath/Zenith-19  terminal is equivalent to the DEC VT52 with exten-
sions for line and character insertion and deletion.  Items marked  with
an asterisk are not currently supported by Kermit-MS H19 emulation.


Cursor Functions

  Sequence    Mnemonic    Definition
   ESC H      HCUH        Cursor Home
   ESC C      HCUF        Cursor Forward
   ESC D      HCUB        Cursor Backward
   ESC B      HCUD        Cursor Down
   ESC A      HCUU        Cursor Up
   ESC I      HRI         Reverse Index
  *ESC n      HCPR        Cursor Position Report
  *ESC j      HSCP        Save Cursor Position
  *ESC k      HRCP        Set Cursor to Previously Saved Position
   ESC Y      HDCA        Direct Cursor Addressing, 1-based:
                          31+line# 31+col# (same as VT52)



Erasing and Editing

  Sequence    Mnemonic    Definition
   ESC E      HCD         Clear Display (Shift Erase)
   ESC b      HBD         Erase Beginning of Display
   ESC J      HEOP        Erase to End of Page (Erase Key)
   ESC l      HEL         Erase Entire Line
   ESC o      HEBL        Erase Beginning of Line
   ESC K      HEOL        Erase to End of Line
   ESC L      HIL         Insert Line
   ESC M      HDL         Delete Line
   ESC N      HDCH        Delete Character
   ESC @      HEIM        Enter Insert Character Mode
   ESC O      HERM        Exit Insert Character Mode



Configuration

  Sequence    Mnemonic    Definition
  *ESC z      HRAM        Reset to Power-Up Configuration
  *ESC r Bn   HMBR        Modify Baud Rate: Bn=
                            A=110,  B=150,  C=300, D=600,  E=1200,
                            F=1800, G=2000, H=2400, I=3600, J=4800,
                            K=7200, L=9600, M=19200

  *ESC x Ps   HSM         Set Mode(s): Ps=
                            1 = Enable 25th line
                            2 = No key click
                            3 = Hold screen mode
                            4 = Block cursor
                            5 = Cursor off

                                                                      73


                            6 = Keypad shifted
                            7 = Alternate keypad mode
                            8 = Auto line feed on CR
                            9 = Auto CR on line feed

  *ESC y Ps   HRM         Reset mode(s): Ps=
                            1 = Disable 25th line
                            2 = Enable key click
                            3 = Exit hold screen mode
                            4 = Underscore cursor
                            5 = Cursor on
                            6 = Keypad unshifted
                            7 = Exit alternate keypad mode
                            8 = No auto line feed
                            9 = No auto CR

  *ESC <      HEAM        Enter ANSI Mode



Modes of Operation

  Sequence    Mnemonic    Definition
  *ESC [      HEHS        Enter Hold Screen Mode
  *ESC \      HXHS        Exit Hold Screen Mode
   ESC p      HERV        Enter Reverse Video Mode
   ESC q      HXRV        Exit Reverse Video Mode
  *ESC F      HEGM        Enter Graphics Mode
  *ESC G      HXGM        Exit Graphics Mode
  *ESC t      HEKS        Enter Keypad Shifted Mode
  *ESC u      HXKS        Exit Keypad Shifted Mode
  *ESC =      HAKM        Enter Alternare Keypad Mode
  *ESC >      HXAM        Exit Alternate Keypad Mode



  Additional Operations

  Sequence    Mnemonic    Definition
  *ESC }      HDK         Keyboard Disable
  *ESC {      HEK         Keyboard Enable
   ESC v      HEWA        Wrap Around at End of Line
   ESC w      HXWA        Discard at End of Line
   ESC Z      HID         Identify as VT52 (ESC / K)
  *ESC ]      HX25        Transmit 25th Line
  *ESC #      HXMP        Transmit Page

  The  Heath-19  transmits  the  following  sequences,  but  it will not
  respond to them if they are received.  Kermit-MS  will  transmit  them
  only if they are programmed with SET KEY.

   ESC S      HF1         Function Key #1
   ESC T      HF2         Function Key #2
   ESC U      HF3         Function Key #3
   ESC V      HF4         Function Key #4
   ESC W      HF5         Function Key #5

                                                                      74


   ESC P      HF7         Function Key #7
   ESC Q      HF8         Function Key #8
   ESC R      HF9         Function Key #9

                                                                      75


Index

                                                RECEIVE   53
          ANSI.SYS   61                         Recognition   50
          Autodialer   67
                                                Smart Modem   67
          Batch Operation of Kermit-MS   51
          Baud Rate   59                        Telenet   62
          Beeper   59                           Timeout   65
          Bell   59
          Binary Files   63                     Warning   65
                                                Wildcard   48
          Cancelling a File Transfer   53, 54
          Command Files   65
          Command Macro   66
          CONNECT   67
          Control-X   53, 54
          Control-Z   53, 54

          Debugging   60
          DEFINE   66
          DO Command   66

          Eighth-Bit Prefix   63
          EMACS   69
          End Of File   49, 60
          EOF   60
          Escape Character for CONNECT   61

          File Renaming   65
          File Warning   65
          Flow Control   61

          Handshake   61
          Heath-19 Terminal Emulation   61, 67,
                  72
          Help   50

          IBM PC   46
          Incomplete File Disposition   54

          Key Redefinition   62

          Local Echoing   62

          Macro   66
          META Key   69
          Mode Line   67
          Modem   67
          MS-DOS   46

          Parity   62
          PC-DOS   46

                                                                       i


                           Table of Contents

9. MS-DOS KERMIT                                                      46

9.1. The MS-DOS File System                                           47
     9.1.1. File Specifications                                       47
     9.1.2. File Formats                                              48
9.2. Program Operation                                                49
9.3. Kermit-MS Commands                                               51
     9.3.1. Commands for File Transfer                                52
     9.3.2. Commands for Connecting and Disconnecting                 55
     9.3.3. Commands for File Management                              56
     9.3.4. The SERVER Command                                        58
     9.3.5. The SET Command                                           59
     9.3.6. The SHOW Command                                          65
     9.3.7. Command Macros                                            66
9.4. Terminal Emulation                                               67
9.6. Compatibility with Older Versions of MS-DOS Kermit               70
9.7. What's Missing                                                   70
9.10. Heath/Zenith-19 Control Codes                                   72

Index                                                                 75

   >c:l