	search	rtsmki
	search	fmath
	$module	random
	entry	rand1.
	entry	rand0.
	extern	sfor.2

rinit:	hrloi	r1,1		;initialize default seed
	movem	r1,$rand(pda)
	popj	top,

rand1.:	move	r1,@0(top)
	move	r0,@r1
	jrst	rand.
rand0.:
	move	r0,$rand(pda)	;use last seed
rand.:
	setom	$inrt(pda)
	tlz	r0,760000
	cain	r0,0
	hrloi	r0,1
	mul	r0,k
	ashc	r0,4
	lsh	r1,-4
	add	r0,r1
	tlze	r0,760000
	addi	r0,1
	movem	r0,$rand(pda)
	hlrz	r1,r0
	fsc	r1,216
	hrli	r0,0
	fsc	r0,174
	fad	r0,r1
	jrst	sfor.2		;go return

k:	byte	(18)4544,503720
	$end	rand,rinit
	prgend
	search	rtsmki
	search	fmath
	$module	sglexp
	entry	ii.exp,ri.exp,rr.exp
	extern	fsave.,sfor.1,exp1.,exp2.,exp3.
	$single
	$temp	froutine,1

ii.exp:
	movei	r1,exp1.
	jrst	do.exp

ri.exp:
	movei	r1,exp2.
	jrst	do.exp

rr.exp:
	movei	r1,exp3.

do.exp:
	jsp	r0,fsave.
	movem	r1,froutine
	aos	r1,-$maxlocals(top)
	move	r0,@-1(r1)
	move	r1,@0(r1)
	$getpsa	sglfortran
	dmovem	r0,parm1
	hrlzi	r1,-2
	movem	r1,length
	movei	basis,addr1
	jfcl	17,.+1		; MUST clear overflow flags first
	pushj	top,@froutine
	hrlzi	r1,-1
	movem	r1,length
	jrst	sfor.1
	$end	sglexp
	prgend
	search	rtsmki
	search	fmath
	$module	diexp
	$double
	entry	di.exp
	extern	dexp2.,dsave.,dfor.2

di.exp:
	jsp	r0,dsave.
	aos	r1,-$maxlocals(top)
	move	r0,@0(r1)	;get i
	dmove	dtemp,@-1(r1)	;get x
	$getpsa	dblfortran
	dmovem	dtemp,parm1
	movem	r0,parm2
	hrlzi	r1,-2
	movem	r1,length
	movei	basis,addr1
	jfcl	17,.+1
	pushj	top,dexp2.
	hrlzi	dtemp,-1
	movem	dtemp,length
	jrst	dfor.2
	prgend
	search	rtsmki
	search	fmath
	$module	rsqrt
        entry   r.sqrt

r.sqrt:
        $sfortran(sqrt)
	$end	rsqrt
        prgend
        search  rtsmki
	search	fmath
	$module	dsqrt
        entry   d.sqrt

d.sqrt:
        $dfortran(dsqrt)
	$end	dsqrt
        prgend
        search  rtsmki
	search	fmath
	$module	rln
        entry   r.ln

r.ln:
        $sfortran(alog)
        prgend
        search  rtsmki
	search	fmath
	$module	dln
        entry   d.ln

d.ln:
        $dfortran(dlog)
	$end	dln
        prgend
        search  rtsmki
	search	fmath
	$module	rlog
        entry   r.log

r.log:
        $sfortran(alog10)
	$end	rlog
        prgend
        search  rtsmki
	search	fmath
	$module	dlog
        entry   d.log

d.log:
        $dfortran(dlog10)
	$end	dlog
        prgend
        search  rtsmki
	search	fmath
	$module	rexp
        entry   r.exp

r.exp:
        $sfortran(exp)
	$end	rexp
        prgend
        search  rtsmki
	search	fmath
	$module	dexp
        entry   d.exp

d.exp:
        $dfortran(dexp)
	$end	dexp
        prgend
        search  rtsmki
	search	fmath
	$module	rsin
        entry   r.sin

r.sin:
        $sfortran(sin)
	$end	rsin
        prgend
        search  rtsmki
	search	fmath
	$module	dsin
        entry   d.sin

d.sin:
        $dfortran(dsin)
	$end	dsin
        prgend
        search  rtsmki
	search	fmath
	$module	rasin
        entry   r.asin

r.asin:
        $sfortran(asin)
	$end	rasin
        prgend
        search  rtsmki
	search	fmath
	$module	dasin
	$excpt
	$double
        entry   d.asin
	extern	datan.,dfor.2,dsqrt.,dsave.
	extern	f1.0.,piov2.

;
; calculate arcsin (x) as arctan (x/sqrt(1-x**2))
;

d.asin:
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1	;get parameter
	$getpsa	dblfortran
	dmovem	r0,parm2	;temp
	jumpge	r0,.+2
	dmovn	r0,r0
	camle	r0,f1.0.
	jrst	error
	camn	r0,f1.0.
	jumpn	r1,error
	dmove	r0,parm2
	dfmp	r0,r0		;squared
	dmovn	r0,r0		;-x**2
	jfcl	17,.+1
	dfad	r0,f1.0.	;1.0-x**2
	jumpe	r0,zero
	jumpl	r0,error
	dmovem	r0,parm1
	movei	basis,addr1
	jfcl	17,.+1
	pushj	top,dsqrt.
	dmove	dtemp,parm2
	dfdv	dtemp,r0		;x/sqrt(1-x**2)
	dmovem	dtemp,parm1
	jfcl	17,.+1
	pushj	top,datan.
	jrst	dfor.2

zero:	dmove	r0,piov2.	;pi div 2
	skipge	parm2
	dmovn	r0,r0
	jrst	dfor.2		;go return

error:
	move	psa,2+rsave
	$unframe
	aos	0(top)	;in case he continues
	move	r0,0(top)
	$errload (r1,$exmth,$mthas,$true)
	$rtsignal
        prgend
        search  rtsmki
	search	fmath
	$module	rsinh
        entry   r.sinh

r.sinh:
        $sfortran(sinh)
	$end	rsinh
        prgend
        search  rtsmki
	search	fmath
	$module	dsinh
	$double
        entry   d.sinh
	entry	d.cosh

	extern	dexp.,f1.0.,dfor.2,dsave.

d.sinh:
	setom	1+$maxlocals(top)	;remember it was sinh
	jrst	.+2
d.cosh:
	setzm	1+$maxlocals(top)	;remember as cosh
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1	;get parameter
	$getpsa	dblfortran
	dmovem	r0,parm1
	move	r1,1(top)	;sinh/cosh flag
	movem	r1,parm2
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,dexp.
	dmove	dtemp,f1.0.	;get floating 1.0
	dfdv	dtemp,r0		;exp (-x)
	skipe	parm2		;if it was sinh
	dmovn	dtemp,dtemp	;then negate
	dfad	r0,dtemp
	fsc	r0,-1		;divide by 2.0
	jrst	dfor.2		;go return

	$end	dsinh
        prgend
        search  rtsmki
	search	fmath
	$module	rcos
        entry   r.cos

r.cos:
        $sfortran(cos)
	$end	rcos
        prgend
        search  rtsmki
	search	fmath
	$module	dcos
        entry   d.cos

d.cos:
        $dfortran(dcos)
	$end	dcos
        prgend
        search  rtsmki
	search	fmath
	$module	racos
        entry   r.acos

r.acos:
        $sfortran(acos)
	$end	racos
        prgend
        search  rtsmki
	search	fmath
	$module	dacos
	$excpt
	$double
        entry   d.acos
	extern	dfor.2,pi.,f1.0.,piov2.,dsave.
	extern	dsqrt.,datan.
	extern	forer.

;
; calculate arccos (x) as arctan (sqrt(1-x**2)/x)
;

d.acos:
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	dtemp,@r1	;get parameter
	jumpe	dtemp,zero
	$getpsa	dblfortran
	dmovem	dtemp,parm2
	jumpge	dtemp,.+2
	dmovn	dtemp,dtemp
	camle	dtemp,f1.0.
	jrst	error
	camn	dtemp,f1.0.
	jumpn	1+dtemp,error
	dmove	dtemp,parm2
	dfmp	dtemp,dtemp
	dmovn	dtemp,dtemp
	jfcl	17,.+1
	dfad	dtemp,f1.0.	;1-x**2
	jumpl	dtemp,error
	dmovem	dtemp,parm1
	movei	basis,addr1
	jfcl	17,.+1
	pushj	top,dsqrt.

	dfdv	r0,parm2
	dmovem	r0,parm1
	jfcl	17,.+1
	pushj	top,datan.
	skipge	parm2
	dfad	r0,pi.
	jrst	dfor.2

zero:	dmove	r0,piov2.
	jrst	dfor.2

error:
	dmove	dtemp,rsave
	move	psa,2+rsave
	$unframe
	aos	0(top)
	move	r0,0(top)
	$errload (r1,$exmth,$mthac,$true)
	$rtsignal
        prgend
        search  rtsmki
	search	fmath
	$module	rcosh
        entry   r.cosh

r.cosh:
        $sfortran(cosh)
	$end	rcosh
        prgend
        search  rtsmki
	search	fmath
	$module	rtan
	$single
        entry   r.tan

	extern	fsave.,sin.,sfor.1,cos.

r.tan:
	jsp	r0,fsave.
	move	r1,@-$maxlocals(top)
	move	r1,@r1		;get parameter
	$getpsa	sglfortran
	movem	r1,parm1
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,cos.
	movem	r0,parm2	;save cos
	jfcl	17,.+1
	pushj	top,sin.
	fdvr	r0,parm2	;calculate tan = sin/cos
	jrst	sfor.1		;go return
	$end	rtan
        prgend
        search  rtsmki
	search	fmath
	$module	dtan
	$double
        entry   d.tan
	extern	dsin.,dcos.,dfor.2,dsave.

d.tan:
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1		;get parameter
	$getpsa	dblfortran
	dmovem	r0,parm1
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,dcos.
	dmovem	r0,parm2	;save
	jfcl	17,.+1
	pushj	top,dsin.
	dfdv	r0,parm2	;tan = sin/cos
	jrst	dfor.2		;go return
	$end	dtan
        prgend
        search  rtsmki
	search	fmath
	$module	rtanh
        entry   r.tanh

r.tanh:
        $sfortran(tanh)
	$end	rtanh
        prgend
        search  rtsmki
	search	fmath
	$module	dtanh
	$double
        entry   d.tanh

	extern	dexp.,dfor.2,f1.0.,dsave.
	$temp	ltemp,2

d.tanh:
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1		;get parameter
	$getpsa	dblfortran
	dmovem	r0,parm1
	movei	basis,addr1	;addr of paramterlist
	jfcl	17,.+1
	pushj	top,dexp.	;exp(x)
	dmove	dtemp,r0
	dmovem	exp3,ltemp	;free temp registers
	dmove	exp3,f1.0.	;floating 1.0
	dfdv	exp3,dtemp	;invert
	dfsb	r0,exp3		;exp(x)-exp(-x)
	dfad	dtemp,exp3	;exp(x)+exp(-x)
	dfdv	r0,dtemp		;tanh
	dmove	exp3,ltemp	;restore temp registers
	jrst	dfor.2		;go return

	$end	dtanh
        prgend
        search  rtsmki
	search	fmath
	$module	rctn
	$single
        entry   r.ctn

	extern	fsave.,cos.,sin.,sfor.1

r.ctn:
	jsp	r0,fsave.
	move	r1,@-$maxlocals(top)
	move	r1,@r1		;get parameter
	$getpsa	sglfortran
	movem	r1,parm1
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,sin.
	movem	r0,parm2	;save sin
	jfcl	17,.+1
	pushj	top,cos.
	fdvr	r0,parm2	;calculate ctn = cos/sin
	jrst	sfor.1		;go return
	$end	rctn
        prgend
        search  rtsmki
	search	fmath
	$module	dctn
	$double
        entry   d.ctn
	extern	dsin.,dcos.,dfor.2,dsave.

d.ctn:
	jsp	r0,dsave.
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1		;get parameter
	$getpsa	dblfortran
	dmovem	r0,parm1
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,dsin.
	dmovem	r0,parm2	;save sin
	jfcl	17,.+1
	pushj	top,dcos.
	dfdv	r0,parm2	;ctn = cos/sin
	jrst	dfor.2		;go return
	$end	dctn
        prgend
        search  rtsmki
	search	fmath
	$module	ratn
        entry   r.atn

r.atn:
        $sfortran(atan)
	$end	ratn
        prgend
        search  rtsmki
	search	fmath
	$module	datn
        entry   d.atn

d.atn:
        $dfortran(datan)
	$end	datn
        prgend
        search  rtsmki
	search	fmath
	$module	ratn2
	$single
        entry   r.atn2
	extern	fsave.,atan2,sfor.1

r.atn2:
	jsp	r0,fsave.
	aos	r1,-$maxlocals(top)
	move	r0,@-1(r1)	;get first parameter
	move	r1,@0(r1)	;get second parameter
	$getpsa	sglfortran
	dmovem	r0,parm1
	movei	basis,addr1
	hrlzi	r0,-2
	movem	r0,length
	jfcl	17,.+1
	pushj	top,atan2
	hrlzi	ftemp,-1
	movem	ftemp,length
	jrst	sfor.1		;go return

	$end	ratn2
        prgend
        search  rtsmki
	search	fmath
	$module	datn2
	$double
        entry   d.atn2,dd.exp
	extern	datn2.,dfor.2,dsave.,dexp3.
	$temp	temploc,2
	$temp	froutine,1


dd.exp:
	movei	r1,dexp3.
	jrst	do.it

d.atn2:
	movei	r1,datn2.

do.it:
	jsp	r0,dsave.
	movem	r1,froutine
	move	r1,@-$maxlocals(top)
	dmove	r0,@r1		;get first parameter
	dmovem	r0,temploc
	aos	r1,-$maxlocals(top)
	dmove	r0,@0(r1)	;get second parameter
	$getpsa	dblfortran
	dmovem	r0,parm2
	dmove	r0,temploc
	dmovem	r0,parm1
	movei	basis,addr1	;addr of parameterlist
	hrlzi	r1,-2
	movem	r1,length
	jfcl	17,.+1
	pushj	top,@froutine
	hrlzi	dtemp,-1
	movem	dtemp,length
	jrst	dfor.2		;go return

	$end	datn2
        prgend
	search	rtsmki
	search	fmath
	$module	sfor
	$single
	entry	sfor.,sfor.1
	extern	forer.,fsave.	;required
	intern	sfor.2
	extern	rt.reg
	$static	parms,5

;
; common code to call a single precision fortran
; library function. On entry:
;	(r1) = address of routine to be called
;	@0(top) = ZRO R,@ADDR(INDEXR)
;	  where R is the result register and
;	  @ADDR(INDEXR) is the address of the operand
;

sfor.:
	jsp	r0,fsave.
	move	r0,@-$maxlocals(top)	;get addr of parameter
	move	r0,@r0		;parameter value
	$getpsa	sglfortran
	movem	r0,parm1	;in parameterlist
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1		;prevent bogus overflows
	pushj	top,0(r1)	;actual fortran call

;
; First alternate entry point. Assumes:
;
;	(1) regs FTEMP - BASIS saved by FSAVE
;	(2) locals preserved by $FRAME in FSAVE.
;	(3) return value in R0
;

sfor.1:
	$restore rsave,ftemp,basis
	$unframe

;
; Second alternate entry point. Assumes:
;
;	(1) all registers restored
;	(2) all locals freed
;	(3) return address points to last argument word
;

sfor.2:
	jsp	r1,.+1		;get the PC flags
	tlz	r1,440140	;clear the error indicators
	hrri	r1,flagsok
	jrstf	@r1		;clear in PC word, now
flagsok:
	aos	r1,0(top)	;bump return address
	ldb	r1,rt.reg	;get result exp1 R
	movem	r0,0(r1)
	setzm	$inrt(pda)
	popj	top,		;all done

;
; S.INIT initializes the parameterlist locations.
;
s.init:	hrlzi	r1,-1
	movem	r1,length
	movei	r1,parm1
	movei	exp1,parm2
	dmovem	r1,addr1
	popj	top,

	$end	sglfortran,s.init

	prgend
	search	rtsmki
	$module	sfor2
	entry	sfor.2
	extern	rt.reg
;
; SFOR.2 is called by by random and exponentiation routines
; and may be required even if double precision selected.
;
sfor.2:
	jsp	r1,.+1		;get the PC flags
	tlz	r1,440140	;clear the error indicators
	hrri	r1,flagsok
	jrstf	@r1		;clear in PC word, now
flagsok:
	aos	r1,0(top)	;bump return address
	ldb	r1,rt.reg	;get result exp1 R
	movem	r0,0(r1)
	setzm	$inrt(pda)
	popj	top,		;all done
	prgend
	search	rtsmki
	search	fmath
	$module	dfor
	$double
	entry	dfor.,dfor.1,dfor.2,pi.,piov2.
	intern	f1.0.
	intern	dbl.bp
	extern	forer.,dsave.	;required
	$static	parms,7

;
; common code to call a double precision fortran routine.
; On entry:
;	(r1) = address of routine to call
;	@0(top) = ZRO R,@ADDR(INDEXR)
;	 where R,R+1 are the result registers and
;	 @ADDR(INDEXR) is the address of the operand
;

dfor.:	
	jsp	r0,dsave.	;save regs and preserve locals
	move	r0,@-$maxlocals(top)	;get addr of parameter
	dmove	dtemp,@r0	;get parameter value

;
; First alternate entry point.  Assumes:
;
;	(1) registers dtemp - basis saved by DSAVE.
;	(2) locals preserved with $FRAME by DSAVE.
;	(3) parameter in regs DTEMP and DTEMP+1
;

dfor.1:
	$getpsa	dblfortran
	dmovem	dtemp,parm1	;save value
	movei	basis,addr1	;addr of parameterlist
	jfcl	17,.+1
	pushj	top,0(r1)	;actual call

;
; Second alternate entry point. Assumes
;
;	(1) result in registers R0 and R1
;	(2) regs saved and preserved as in DFOR.1
;	(3) return address points to last of parameter list
;

dfor.2:
	aos	dtemp,-$maxlocal(top)	;bump return address
	ldb	dtemp,dbl.bp	;get result reg
	movem	dtemp,target	;register target for result
	jsp	dtemp,.+1		;get the PC flags
	tlz	dtemp,440140	;clear the error indicators
	hrri	dtemp,flagsok
	jrstf	@dtemp		;clear in PC word, now
flagsok:
	$restore rsave,dtemp,basis
	$unframe
	dmovem	r0,@$maxlocals+target
	setzm	$inrt(pda)
	popj	top,		;and done

dbl.bp:	point	4,-1(dtemp),12
f1.0.:	dec	1.0
	exp	0
pi.:	byte	(18)202622,077325,021026,430215
piov2.:	byte	(18)201622,077325,021026,430215

;
; D.INIT initializes the parameterlist
;
d.init:	hrlzi	r1,-1
	movem	r1,length
	movei	r1,parm1
	movei	exp1,parm2
	dmovem	r1,addr1
	popj	top,

	$end	dblfortran,d.init
	prgend
	search	rtsmki
	$module	fcst
	entry	f1.0.
;
; Constants required by some math routines.
;

f1.0.:	dec	1.0
	prgend
	search	rtsmki
	search	fmath
	$module	fsave
	entry	fsave.
	$single

fsave.:
	$frame
	$save	rsave,ftemp,basis
	setom	$inrt(pda)
	jrst	@r0
	prgend
	search	rtsmki
	search	fmath
	$module	dsave
	$double
	entry	dsave.

dsave.:
	$frame
	$save	rsave,dtemp,basis
	setom	$inrt(pda)
	jrst	@r0
	end
   