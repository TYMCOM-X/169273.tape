	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IORDB

	entry	RDBIN.
	extern	NTXER.,CKEOF.,NTXDI.

	$TEMP	TRDSIZ,1
	$LOCAL	RDSIZ,1
	$LOCAL	WAGMAN,1
	$LOCAL	REGSAV,3

; RDBIN. - read variable length binary file.  Explode the args, check for
;   deferred errors, and then use the TENIO call RDBLKR to get the data.
;   EOF is treated just like any other file -- you get EOFCNT reads past
;   it, then BOOM.

RDBIN.:	MOVEI	R1,3		; three words of args
	ADDB	R1,0(TOP)
	MOVEI	R0,@-1(R1)	; the last arg -- words to read
	MOVEM	R0,TRDSIZ	; remember
	MOVEI	R0,@-2(R1)	; the core addr
	MOVEI	R1,@-3(R1)	; the file block
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	SKIPLE	0,ERRORS(R1)	; any deferred errors?
	JRST	NTXDI.		;   yes, go die
	SETZM	0,$IOERR(PDA)	; clear error cells
	SETZM	0,$EXTST(PDA)
	SKIPE	EXP1,EOFWRD(R1)	; is EOF already set?
	JRST	RDBEOF		;   yes, go count down

	MOVE	EXP1,R0		; load core addr
	MOVE	EXP2,RDSIZ	; number of words to read
	MOVE	EXP3,CURSOR(R1)	; load PASCAL cursor
	SUBI	EXP3,1		; convert to zero-based file addr
	RDBLKR	EXP1,CHNUM(R1)	; do it
	JRST	RDNOTO		; not open??
	JRST	RDBEOF		; RDBLKR saw read beyond eof
	ADDI	EXP3,1		; reconvert TENIO cursor to PASCAL cursor
	MOVEM	EXP3,CURSOR(R1)	;   and store
	JSP	R0,CKEOF.	; see if cursor > extent

RDBOUT:	$RESTOR	REGSAV,EXP1,EXP3
	$UNMASK
	$UNFRAME
	POPJ	TOP,0

RDBEOF:	HRRZI	EXP1,0(EXP1)	; isolate eof count
	SOJGE	EXP1,RDBEOK	; if still non-neg, we're done
	MOVEI	EXP1,EOFERR	; else pick up proper error code
	JRST	NTXER.		;   and split
RDBEOK:	HRRM	EXP1,EOFWRD(R1)	; store new EOF count
	JRST	RDBOUT		;   and split

RDNOTO:	HRRZI	EXP2,OPNINP	; make sure file was opened for input
	TDNN	EXP2,STATUS(R1)	;   if it was output only, call it
	JRST	RDBEOF		;   input end of file, not input error
	MOVEM	EXP1,$EXTST(PDA)	; call TENIO's return extstatus
	LDERR	EXP1,INPOPN	; file not open???
	JRST	NTXER.		;   forget it
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOWRB

	entry	WRBIN.
	extern	NTXER.,NTXDI.,CKEOF.

	$TEMP	TWRSIZ,1
	$LOCAL	WRSIZ,1
	$LOCAL	WAGMAN,1
	$LOCAL	REGSAV,3


; WRBIN. -- write with field width to binary file.  Like RDBIN., explode
;   the arg list, check for deferred errors, and go.  If the file is
;   either random or update, we have to manually check for EOF (following
;   the input model of (cursor > extent).

WRBIN.:	MOVEI	R1,3		; three args
	ADDB	R1,0(TOP)
	MOVEI	R0,@-1(R1)	; get the write size
	MOVEM	R0,TWRSIZ
	MOVEI	R0,@-2(R1)	; get core addr
	MOVEI	R1,@-3(R1)	;   and file block addr
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	SKIPLE	0,ERRORS(R1)	; deferred errors?
	JRST	NTXDI.		;   yes, split
	SETZM	0,$IOERR(PDA)	; clear error cells
	SETZM	0,$EXTST(PDA)

	MOVE	EXP1,R0		; load core addr
	MOVE	EXP2,WRSIZ	;   and record size
	MOVE	EXP3,CURSOR(R1)	; get pascal cursor
	SUBI	EXP3,1		; convert to file word addr
	WRBLKR	EXP1,CHNUM(R1)	;   and write it out
	JRST	WRNOTO		;   must not be open
	ADDI	EXP3,1		; convert new cursor to PASCAL
	MOVEM	EXP3,CURSOR(R1)	;   and save
	MOVE	R0,[RANDOM,,OPNINP]	; must check for either being true
	TDNE	R0,STATUS(R1)	; skip if both clear
	JSP	R0,CKEOF.	;   else manually set EOF

WRBOUT:	$RESTOR	REGSAV,EXP1,EXP3
	$UNMASK
	$UNFRAME
	POPJ	TOP,0

WRNOTO:	MOVEM	EXP1,$EXTST(PDA)	; save tenio return code
	LDERR	EXP1,REWERR	; rewrite required
	JRST	NTXER.
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOGET

	entry	GET.
	extern	NTXER.,NTXDI.,FILLC.

	$LOCAL	REGSAV,3

; GET. -- get for non-text files (typed files).  After checking for
;   deferred errors, use the FILLC. fill component routine.

GET.:	MOVEI	R1,1		; one ARG
	ADDB	R1,0(TOP)
	MOVEI	R1,@-1(R1)	; the file block addr
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	SKIPLE	0,ERRORS(R1)	; deferred errors?
	JRST	NTXDI.		;   yep.
	SETZM	0,$IOERR(PDA)	; clear error cells
	SETZM	0,$EXTST(PDA)
	SKIPE	EXP1,EOFWRD(R1)	; is it EOF already?
	JRST	GETEND		;   yes, count them up.
	AOS	0,CURSOR(R1)	; increment cursor before operation
	JSP	R0,FILLC.	; fill the component
	JRST	GETOUT		; noskip -- must have been OK

GETEOF:	MOVEM	EXP1,$EXTST(PDA)	; save tenio code
	MOVE	R0,[EOFBIT,,EOFCNT-1]	; EOF word
	MOVEM	R0,EOFWRD(R1)
GETOUT:	$RESTOR	REGSAV,EXP1,EXP3
	$UNFRAME
	$UNMASK
	POPJ	TOP,0

GETEND:	HRRZI	EXP1,0(EXP1)	; isolate EOF countdown
	SOJGE	EXP1,GETOK	; if non-negative, still OK
	MOVEI	EXP1,EOFERR	;   else load up error code
	JRST	NTXER.		;   and split
GETOK:	HRRM	EXP1,EOFWRD(R1)	; set new count
	JRST	GETOUT		;   and split normally

GETNOT:	MOVEM	EXP1,$EXTST(PDA)
	LDERR	EXP1,INPOPN	; file not open properly
	JRST	NTXER.		;   hit it
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOPUT

	entry	PUT.
	extern	NTXDI.,CKEOF.,NTXER.

	$LOCAL	REGSAV,3

; PUT. -- put for non-text (typed) files.  Check for deferred errors, then
;   just write out the component.   Like WRBIN., we have to check for 
;   either a random or update file, and set EOF manually.

PUT.:	MOVEI	R1,1		; one file block arg
	ADDB	R1,0(TOP)
	MOVEI	R1,@-1(R1)
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	SKIPLE	0,ERRORS(R1)	; deferred errors?
	JRST	NTXDI.		;   yes, go die.
	SETZM	0,$IOERR(PDA)	; clear all error cells
	SETZM	0,$EXTST(PDA)

	MOVE	EXP2,XRFWRD(R1)	; load base type size
	MOVE	EXP1,COMPTR(R1)	; load core addr for write
	MOVE	EXP3,CURSOR(R1)	; load our file cursor
	SUBI	EXP3,1		; make it zero-based
	IMULI	EXP3,0(EXP2)	; convert into word address in file
	WRBLKR	EXP1,CHNUM(R1)	; write it out
	JRST	PUNOTO		;   not open
	MOVE	EXP2,EXP3	; get new word cursor (36 bits!!! MCM)
	IDIV	EXP2,XRFWRD(R1)	; divide by base type size
	ADDI	EXP2,1		; increment, to make it one-based
	MOVEM	EXP2,CURSOR(R1)	;   and store  .
	MOVE	R0,[RANDOM,,OPNINP]	; must check for either one
	TDNE	R0,STATUS(R1)	; well, is either bit set?
	JSP	R0,CKEOF.	;   yes, determine EOF by hand

PUTOUT:	$RESTOR	REGSAV,EXP1,EXP3
	$UNFRAME
	$UNMASK
	POPJ	TOP,0		; later

PUNOTO:	MOVEM	EXP1,$EXTST(PDA)	; record TENIO's error code
	LDERR	EXP1,REWERR	; "rewrite required"
	JRST	NTXER.		; split gracefully
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOSEE

	entry	SEEK.
	extern	NTXER.,NTXDI.,CKEOF.,FILLC.,IOERR.

	$LOCAL	REGSAV,3

; SEEK. -- position cursor.  We don't make a distinction between binary
;   and typed files, thus the XRFWRD of a binary file must be one.
;   We do, however, make sure the RANDOM bit is set.  Finally, if the
;   file is open for input and is typed, we must fill the component with
;   the cursor-th record in the file.

SEEK.:	MOVEI	R1,2		; two args
	ADDB	R1,0(TOP)
	MOVE	R0,@-1(R1)	; contents is position to seek
	MOVEI	R1,@-2(R1)	; file block
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	SKIPLE	0,ERRORS(R1)	; deferred error?
	JRST	NTXDI.		;   yes, kill it.
	SETZM	0,$IOERR(PDA)	; clear error cells
	SETZM	0,$EXTST(PDA)

	HRLZI	EXP1,RANDOM	; make sure random bit is set
	TDNN	EXP1,STATUS(R1)
	JRST	NOTRAN		;   forget you, jack
	JUMPLE	R0,NEGCUR	; what????

	MOVEM	R0,CURSOR(R1)	; ok, set cursor
	JSP	R0,CKEOF.	;   and manually figure EOF
	SKIPE	0,EOFWRD(R1)	; if EOF true, then we're done
	JRST	SKROUT
	SETCM	R0,STATUS(R1)	; else pick up complemented status word
	TRNN	R0,TYPFIL+OPNINP	; if both bits clear (set in orig.)
	JSP	R0,FILLC.	; then fill the component
	JRST	SKROUT		;   and split
	MOVEI	EXP1,INTERR	; fillc skipped -- something strange
	JRST	NTXER.		;   flag it immediately

SKROUT:	$RESTOR	REGSAV,EXP1,EXP3
	$UNFRAME
	$UNMASK
	POPJ	TOP,0

NOTRAN:	LDERR	EXP1,RANERR	; error code
	JRST	NTXER.

NEGCUR:	LDERR	EXP1,ILLCUR
	JRST	NTXER.
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOFSZ

	entry	FILSZ.
	extern	CKEOF.

	$LOCAL	REGSAV,3

; FILSZ. -- extent of a file variable.  This maps into the size of the file.
;   Just ask TENIO.  It's important to return the CURSOR value of the last
;   record in EXP2 from CKEOF, 'cuz that's what we use.

FILSZ.:	MOVEI	R1,1		; one arg
	ADDB	R1,0(TOP)
	MOVEI	R1,@-1(R1)	; file block
	$MASK
	$FRAME
	$SAVE	REGSAV,EXP1,EXP3
	JSP	R0,CKEOF.	; go get the goods
	MOVE	R1,EXP2		;   return them in R1
	$RESTOR	REGSAV,EXP1,EXP3
	$UNFRAME
	$UNMASK
	POPJ	TOP,0
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOMS1

	entry	CKEOF.
	extern	TENIO.,BUF.0,PASUO.

; CKEOF. -- manually check for cursor being greater then extent.   Ask
;   TENIO for extent, carefully returning it in EXP2 for FILSZ.  Set
;   EOF properly if beyond EOF.

CKEOF.:	NOTEF	EXP1,CHNUM(R1)	; get the good stuff
	JRST	@R0		; just return, the hell with it
	IDIV	EXP2,XRFWRD(R1)	; convert to record cardinal
	SETZM	0,EOFWRD(R1)	; clear EOF for now
	CAML	EXP2,CURSOR(R1)	; is extent less then cursor?
	JRST	@R0		; no, we're cool
	MOVE	EXP1,[EOFBIT,,EOFCNT-1]	; get thing to put into EOFWRD
	MOVEM	EXP1,EOFWRD(R1)	;   and put it
	JRST	@R0		; get out
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOMS2

	entry	FILLC.
	extern	TENIO.,BUF.0,PASUO.

; FILLC. -- fill component.  Used by GET. and SEEK., get the record in
;   the file pointed to by CURSOR, and put it into the component of
;   the file block.  Don't modify CURSOR.  If end of file encountered,
;   take a skip return.

FILLC.:	MOVE	EXP3,CURSOR(R1)	; load cursor
	SUBI	EXP3,1		; convert to zero-based
	MOVE	EXP2,XRFWRD(R1)	; get size of read
	IMULI	EXP3,0(EXP2)	; convert record cursor to word cursor
	MOVE	EXP1,COMPTR(R1)	; core addr of component
	RDBLKR	EXP1,CHNUM(R1)	; get the stuff
	JRST	@R0		; not open -- just return
	ADDI	R0,1		;   eof -- skip return
	JRST	@R0
	prgend
	search	RTSYM
	search	IOSYM
	search	OPDEFS
	sall
	$MODULE	IOMS3

	entry	NTXER.,NTXDI.
	extern	IOERR.

	$LOCAL	REGSAV,3

; NTXER. -- non-text file error detected.  Error code in EXP1.  If the
;   file is not trapping, bomb out right away.  Else set RH of errors.

NTXER.:	HRLZI	R0,ETRAP	; check file for trapping
	TDNE	R0,STATUS(R1)
	JRST	NTRECO		; yes, just record error
	MOVEI	R1,0(EXP1)	; put error code in R1
NTXDIE:	POP	TOP,R0		;   user return addr in R0
	JRST	IOERR.		;   and split

NTRECO:	MOVEM	EXP1,ERRORS(R1)	; install error for next time
	MOVEM	EXP1,$IOERR(PDA)	; remember in file and global cell
	$RESTOR	REGSAV,EXP1,EXP3	; take normal error return
	$UNFRAME
	$UNMASK
	POPJ	TOP,0

NTXDI.:	HRRZ	R1,ERRORS(R1)	; get deferred error code
	JRST	NTXDIE		;   and die with it
	end
