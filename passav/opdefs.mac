	UNIVERSAL OPDEFS - Replace Several DEC Defined Op Codes
	SUBTTL	(Do Them One Better)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;									;
;	This assembly contains OPDEFs and symbol definitions that	;
;	are a bit more mnemonic than those provided by DEC and are	;
;	thus likely to be a bit more useful.  Most of the OPDEFs	;
;	redefine the skips and jumps in order to describe them as	;
;	positive, negative, or zero (a la IBM) instead of comparing	;
;	them directly to zero.  Others include definitions for the	;
;	tests which allow skips on zero (instead of equal) and replace	;
;	the DEC unconditional skip mnemonic (Always) with SKP, and more	;
;	mnemonic descriptions for simple jump and no op.  There are	;
;	also definitions for a few CALLIs, TTCALLs, and control char-	;
;	acters that get common use.					;
;									;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
;	JUMPs and SKIPs
;
	OPDEF	JUMPM[JUMPL 0,0]; Jump if minus
	OPDEF	JUMPZ[JUMPE 0,0]; Jump if zero
	OPDEF	JUMPNP[JUMPLE 0,0]; Jump if not positive
	OPDEF	JUMPNM[JUMPGE 0,0]; Jump if not minus
	OPDEF	JUMPNZ[JUMPN 0,0]; Jump if not zero
	OPDEF	JUMPP[JUMPG 0,0]; Jump if positive
;
	OPDEF	SKIPM[SKIPL 0,0]; The same for SKIP
	OPDEF	SKIPZ[SKIPE 0,0]
	OPDEF	SKIPNP[SKIPLE 0,0]
	OPDEF	SKIPNM[SKIPGE 0,0]
	OPDEF	SKIPNZ[SKIPN 0,0]
	OPDEF	SKIPP[SKIPG 0,0]
	OPDEF	SKP[SKIPA 0,0]	; SKP means skip, guys
;
;	Add and subtract one and jump and skip.  (Hop scotch.)
;
	OPDEF	AOJM[AOJL 0,0]	; Same for AOJ
	OPDEF	AOJZ[AOJE 0,0]
	OPDEF	AOJNP[AOJLE 0,0]
	OPDEF	AOJNM[AOJGE 0,0]
	OPDEF	AOJNZ[AOJN 0,0]
	OPDEF	AOJP[AOJG 0,0]
	OPDEF	AOJMP[AOJA 0,0]	; Always is a bad mnemonic
;
	OPDEF	AOSM[AOSL 0,0]	; Same for AOS
	OPDEF	AOSZ[AOSE 0,0]
	OPDEF	AOSNP[AOSLE 0,0]
	OPDEF	AOSNM[AOSGE 0,0]
	OPDEF	AOSNZ[AOSN 0,0]
	OPDEF	AOSP[AOSG 0,0]
	OPDEF	AOSKP[AOSA 0,0]	; Add one and (always) skip
	OPDEF	AONS[AOS 0,0]	; Add one, no skip
;
	OPDEF	SOJM[SOJL 0,0]	; SOJ comes next
	OPDEF	SOJZ[SOJE 0,0]
	OPDEF	SOJNP[SOJLE 0,0]
	OPDEF	SOJNM[SOJGE 0,0]
	OPDEF	SOJNZ[SOJN 0,0]
	OPDEF	SOJP[SOJG 0,0]
	OPDEF	SOJMP[SOJA 0,0]	; Subtract one and (always) jump
;
	OPDEF	SOSM[SOSL 0,0]	; Save our ship here
	OPDEF	SOSZ[SOSE 0,0]
	OPDEF	SOSNP[SOSLE 0,0]
	OPDEF	SOSNM[SOSGE 0,0]
	OPDEF	SOSNZ[SOSN 0,0]
	OPDEF	SOSP[SOSG 0,0]
	OPDEF	SOSKP[SOSA 0,0]
	OPDEF	SONS[SOS 0,0]
;
;	The TEST group.  First replace the E(quals) with Z(ero).
;
	OPDEF	TRNZ[TRNE 0,0]	; Test right
	OPDEF	TRZZ[TRZE 0,0]
	OPDEF	TRCZ[TRCE 0,0]
	OPDEF	TROZ[TROE 0,0]
;
	OPDEF	TLNZ[TLNE 0,0]	; Test left
	OPDEF	TLZZ[TLZE 0,0]
	OPDEF	TLCZ[TLCE 0,0]
	OPDEF	TLOZ[TLOE 0,0]
;
	OPDEF	TDNZ[TDNE 0,0]	; Test direct
	OPDEF	TDZZ[TDZE 0,0]
	OPDEF	TDCZ[TDCE 0,0]
	OPDEF	TDOZ[TDOE 0,0]
;
	OPDEF	TSNZ[TSNE 0,0]	; Test swapped
	OPDEF	TSZZ[TSZE 0,0]
	OPDEF	TSCZ[TSCE 0,0]
	OPDEF	TSOZ[TSOE 0,0]
;
;	Now replace the A(lways) with SK(i)P.  We don't bother to
;	redefine the no modification instructions, since they are
;	not normally useful (JMP .+2 is faster and does the same
;	thing).
;
	OPDEF	TRZSKP[TRZA 0,0]; Test right
	OPDEF	TRCSKP[TRCA 0,0]
	OPDEF	TROSKP[TROA 0,0]
;
	OPDEF	TLZSKP[TLZA 0,0]; Test left
	OPDEF	TLCSKP[TLCA 0,0]
	OPDEF	TLOSKP[TLOA 0,0]
;
	OPDEF	TDZSKP[TDZA 0,0]; Test direct
	OPDEF	TDCSKP[TDCA 0,0]
	OPDEF	TDOSKP[TDOA 0,0]
;
	OPDEF	TSZSKP[TSZA 0,0]; Test swapped
	OPDEF	TSCSKP[TSCA 0,0]
	OPDEF	TSOSKP[TSOA 0,0]
;
;	JMP, NOP, and miscellaneous definitions.
;
	OPDEF	JMP[JRST 0,0]	; Fast jump. (Nothing gets restored.)
	OPDEF	NOP[TRN 0,0]	; Fastest no op
	OPDEF	SVC[CALLI 0,0]	; Common system dispatch call
	OPDEF	ADJSP[105B8]	; DEC hasn't caught up with the KL10
	OPDEF	ADJBP[133B8]	; yet
	OPDEF	XJ[247B8]	; Hosannas to Dave Moon
	OPDEF	EXTEND[123B8]	; If he isn't there, this stuff is
;
;	EXTEND Sub op codes.
;
	OPDEF	CMPSL[1B8]	; CoMPare String, skip if Less
	OPDEF	CMPSE[2B8]	; CoMPare String, skip if Equal
	OPDEF	CMPSLE[3B8]	; CoMPare String, skip if Less or Equal
	OPDEF	EDIT[4B8]	; Process string by pattern
	OPDEF	CMPSGE[5B8]	; CoMPare String, skip if Greater or Equal
	OPDEF	CMPSN[6B8]	; CoMPare String, skip if Not equal
	OPDEF	CMPSG[7B8]	; CoMPare String, skip if Greater
	OPDEF	CVTDBO[10B8]	; ConVerT Decimal to Binary by Offset
	OPDEF	CVTDBT[11B8]	; ConVerT Decimal to Binary by Translation
	OPDEF	CVTBDO[12B8]	; ConVerT Binary to Decimal with Offset
	OPDEF	CVTBDT[13B8]	; ConVerT Binary to Decimal with Translation
	OPDEF	MOVSO[14B8]	; MOVe String, byte Offset
	OPDEF	MOVST[15B8]	; MOVe String, byte Translation
	OPDEF	MOVSLJ[16B8]	; MOVe String Left Justified
	OPDEF	MOVSRJ[17B8]	; MOVe String Right Justified
;
;	Kortecrap, or definitions for a file system.
;
	OPDEF	RDBLK[1B8]	; Al calls it "BLI"
	OPDEF	RDBLKR[2B8]	; "BLIR"
	OPDEF	WRBLK[3B8]	; "BLO"
	OPDEF	WRBLKR[4B8]	; "BLOR"
	OPDEF	OPENF[5B8]	; "ASNU" (Yuch!)
	OPDEF	CLOSEF[6B8]	; "DSNU" (No better)
	OPDEF	RDWRD[7B8]	; "FWI"
	OPDEF	RDWRDR[10B8]	; "FWIR"
	OPDEF	WRWRD[11B8]	; "FWO"
	OPDEF	WRWRDR[12B8]	; "FWOR"
	OPDEF	FLUSHF[13B8]	; (Al never flushed his files)
	OPDEF	TRUNCF[14B8]	; (or truncated them, either)
	OPDEF	NAMEF[15B8]	; (Return name--new function)
	OPDEF	FIOSVC[16B8]	; (Dispatch on E--new subfunctions)
	OPDEF	NOTEF[17B8]	; "RDSTA"--a better try
	OPDEF	POINTF[20B8]	; "SETCUR"
	OPDEF	TERMIN[21B8]	; "TCI"
	OPDEF	TYPE[22B8]	; "TCO"
	OPDEF	RDTERM[23B8]	; "LNI"
	OPDEF	TYPLIN[24B8]	; "LNO"
	OPDEF	TERCTL[25B8]	; "SETTER"
	OPDEF	TERSNS[26B8]	; "RDTER"
	OPDEF	PURGEI[27B8]	; "POPIN"
	OPDEF	PURGEO[30B8]	; "POPOUT" (by the way, this isn't so bad!)
	OPDEF	TERHLT[31B8]	; "STPTER"
;
;	TTCALLs.
;
INCHRW==	0		; Input one character immediately
OUTCHR==	1		; Output one character
INCHRS==	2		; Input immediate character, skip success
OUTSTR==	3		; Output a string
INCHWL==	4		; Input one character after line break
INCHSL==	5		; Input character and skip if line complete
CLRBFI==	11		; Clear input buffer
CLRBFO==	12		; Clear output buffer
SKPINC==	13		; Skip if character in input buffer
SKPINL==	14		; Skip if line break has occurred
IONEOU==	15		; Output one eight bit character
;
;	CALLIs, or, more rationally, SVCs.
;
RESET.==	0		; Flush everything
DEVCHR==	4		; Get device characteristics
CORE.==		11		; Expand or contract core
EXIT.==		12		; Abort this veil
DATE.==		14		; Get polynomial date
APRENB==	16		; Enable arithmetic processor traps
MSTIME==	23		; Get day time in milliseconds
GETPPN==	24		; Get current project-programmer number
RUNTIM==	27		; Get compute time of job
PJOB.==		30		; Get job number
SLEEP.==	31		; Wait for a time
RUN.==		35		; Transfer control (XCTL) elsewhere
SETUWP==	36		; Set or clear high segment write protect
GETSEG==	40		; Fetch new high segment
GETTAB==	41		; Fetch monitor table entry
SETNAM==	43		; Set program name in monitor
TMPCOR==	44		; Access temporary in-core files
DEVNAM==	64		; Get physical name for device, UDX, channel
HIBER.==	72		; Allow job to hibernate
WAKE.==		73		; Awaken a hibernating job
PATH.==		110		; Examine or change file search path
TRMNO.==	115		; Return job's terminal number
TRMOP.==	116		; Perform terminal functions
RESDV.==	117		; Blast a single channel
IONDX.==	127		; Return UDX for a device
PIINI.==	135		; Initialize processor interrupt stuff
PISYS.==	136		; Control processor interrupt system
DEBRK.==	137		; Return from software interrupt
PAGE.==		145		; Handle page faults
FILOP.==	155		; One shot file open/close
;
;	Control characters
;
NUL==		0		; ^@ NULl (shift ^P)
SOH==		1		; ^A Start Of Header
STX==		2		; ^B Start Of teXt
ETX==		3		; ^C End of TeXt
EOT==		4		; ^D End Of Transmission
ENQ==		5		; ^E ENQuiry
ACK==		6		; ^F ACKnowledgement
BEL==		7		; ^G BELl
BS==		10		; ^H BackSpace
HT==		11		; ^I Horizontal Tab
LF==		12		; ^J Line Feed
VT==		13		; ^K Vertical Tab
FF==		14		; ^L Form Feed
CR==		15		; ^M Carriage Return
SO==		16		; ^N Shift Out
SI==		17		; ^O Shift In
DLE==		20		; ^P Data Link Escape
DC1==		21		; ^Q Device Control 1 (X-on)
DC2==		22		; ^R Device Control 2 (Tape on)
DC3==		23		; ^S Device Control 3 (X-off)
DC4==		24		; ^T Device Control 4 (Tape off)
NAK==		25		; ^U Negative AcKnowledgement
SYN==		26		; ^V SYNchronize
ETB==		27		; ^W End of Text Block
CAN==		30		; ^X CANcel
EM==		31		; ^Y End of Medium or Mode (I'm not sure)
SUB==		32		; ^Z SUBstitute
ESC==		33		; ^[ ESCape (shift ^K)
FS==		34		; ^\ Form Separator (shift ^L)
GS==		35		; ^] Group Separator (shift ^M)
RS==		36		; ^^ Record Separator (shift ^N)
US==		37		; ^_ Unit Separator (shift ^O)
DEL==		177		; DELete (rubout)
;
	END
