	universal	ovrtsm
;
;    +--------------------------------------------------------------+
;    |                                                              |
;    |                          R T S Y M                           |
;    |                          - - - - -                           |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    PURPOSE:  This universal file contains the  general  macros  and
;       symbols  used  by  the PASCAL runtime.  It is searched at the
;       start of every module.
;    
;    ----------------------------------------------------------------

;
; Useful opdefs.
;

	opdef	adjsp	[105000000000]
	opdef	adjbp	[ibp]
	opdef	portal	[jrst	1,]
	opdef	arg	[0]
	opdef	zro	[0]

;
; Misc definitions
;

	$true==1
	$false==0
	$nil==377777
	fv==4		;function return offset

;
; Default register equates
;

	R0==0		;Scratch
	R1==1		;Scratch
	EXP1==2		;Expression
	EXP2==3		;Expression
	EXP3==4		;Expression
	EXP4==5		;Expression
	EXP5==6		;Expression
	EXP6==7		;Expression
	INDEX1==10	;Index
	INDEX2==11	;Index
	INDEX3==12	;Index
	INDEX4==13	;Index
	PSA==14		;Base of Pseudo-Static Area
	PDA==15		;Base of PASCAL Data Area
	BASIS==16	;Base of stack frame
	TOP==17		;Top of stack frame

;
; Assigned offsets in the PDA (preliminary).
;
	$pdasize==50	;;max size of pda
	$maski==0	;;mask interupts if nonzero
	$str==1		;byte ptr from last string move
	$iochar==2
	$iofile==3
	$iocnnl==4
	$bfpnt==6	;file buffers in stack
	$stack==7	;top of stack
	$sglfortran==10	;for interface to single prec fortran library routines
	$rtbase==11	;runtime storage for debugger
	$dbbase==12
	$stbase==13
	$retadr==14	;return after interupts
	$rand==15	;seed for random
	$misc==16
	$qfit==17	;quick fir
	$modfit==17	;mod fit
	$ppgrb==20
	$tenio==21
	$iocls==22
	$ioicm==23
	$iontw==24
	$ten17==25
	$ovltv==26
	$ioerr==27
	$extst==30
	$strlen==31
	$interrupt==32	;for ONESCAPE
	$dblfortran==33	;for interface to double prec fortran library routines
	$dumpio==34	;link to dumpio statics
	$pfid==35	;for prfid

;
; $GETPDA loads the base of the Pascal Data Area into the
; PDA base reg.
;
	define	$getpda,<
	hlrz	pda,.jbsa##>

;
; $GETPSA loads a modules PSA address into the PSA reg.
;
	define	$getpsa (modid),<
	move	psa,$'modid(pda)>

;
; Relocation macros
;

; $RELOC initializes relocation counters and specifies
; high segment relocation
;
	define	$RELOC,<
	twoseg
	$loc==-1	;-1=high segment relocation
			; 0=low segment relocation
			;+1=absolute relocation
	$hiloc==400000
	$loloc==0
	$absloc==0
	reloc	400000>

;
; $HIGH specifies high segment relocation
;

	define $HIGH,<
	ifge	$loc,<
		ife	$loc,<$loloc==.>
		$loc==-1
		reloc	$hiloc>>

;
; $LOW specifies low segment relocation
;

	define	$LOW,<
	ifn	$loc,<
		ifl	$loc,<$hiloc==.>
		$loc==0
		reloc	$loloc>>

;
; $ABS specifies absolute location at a given address
;

	define	$ABS (addr),<
	ifl	$loc,<$hiloc==.>
	ife	$loc,<$loloc==.>
	$loc==1
	loc	addr>

;
; $LIT assures literals will be placed in the high segment
;

	define	$LIT,<
	ifge	$loc,<$HIGH>
	lit>

;
; $MODULE initializes everything.
;

	define	$MODULE (modname),<
	title	modname
	$reloc
	$stats==$false		;default no counting
	if1	<
		$maxtemp==0
		$maxlocal==0
		$maxstatic==0>>

;
; $FRAME adjusts the stack to protect any locals.
;

	define	$FRAME,<
	ifg	$maxlocal,<
	adjsp	top,$maxlocal>>

;
; $UNFRAME frees the storage allocated by $FRAME.
;

	define	$UNFRAME,<
	ifg	$maxlocal,<
	adjsp	top,-$maxlocal>>

;
; $CALL calls another routine, protecting temporaries if any.
;

	define	$CALL (routine),<
	ifg	$maxtemp,<
	adjsp	top,$maxtemp>
	pushj	top,routine
	ifg	$maxtemp,<
	adjsp	top,-$maxtemp>>

;
; $RETURN frees locals with $UNFRAME, if necessary, before a POPJ.
;

	define	$RETURN,<
	ifg	$maxlocal,<
	$unframe>
	popj	top,>

;
; $TEMP declares a temporary on the stack.
;
	define	$TEMP (name,tsize),<
	if1	<
	ifl	tsize,<
	printx	<?	Bad size in definition of temporary>>>
	if1	<
	ifdef	.'name,<
	printx	<?	Name conflict in definition of temporary>>>
	ifndef	name,<
	.'name==$maxtemp+1
	$maxtemp==$maxtemp+tsize
	define	name,<.'name(top)>>>

;
; $LOCAL defines a local on the stack.
;

	define	$LOCAL (name,lsize),<
	if1	<
	ifl	lsize,<
	printx	<?	Bad size in definition of local>>>
	if1	<
	ifdef	.'name,<
	printx	<?	Name conflict in definition of local>>>
	ifndef	name,<
	.'name==$maxlocal+1
	$maxlocal==$maxlocal+lsize
	define	name,<.'name-$maxlocal(top)>>>

;
; $STATIC defines a location in the PSA.
;

	define	$STATIC (name,ssize),<
	if1	<
	ifl	ssize,<
	printx	<?	Bad size in definition of static>>
	ifdef	.'name,<
	printx	<?	name conflict in definition of static>>
	.'name==$maxstatic
	$maxstatic==$maxstatic+ssize>
	define	name,<.'name(PSA)>>

;
; $END is invoked at the end of the module to emit a PSA
; request, if necessary.
;

	define	$END (modname,init<>,exit<>),<
	$needpsa==$false
	ifg	$maxstatic,<$needpsa==$true>
	ifdif	<init><>,<$needpsa==$true>
	ifdif	<exit><>,<$needpsa==$true>
	ifg	$needpsa,<
	if1	<
	ifidn	<modname><>,<
	printx	<?	Module name required with $END>>>
	extern	P.'modname
	intern	S.'modname
	intern	I.'modname
	intern	X.'modname
	S.'modname==$maxstatic
	I.'modname==init
	X.'modname==exit>>

;
; $PSAREQUEST emits a PSA request block
;

	define	$PSAREQUEST (modid),<
	$module	P'modid
	entry	p.'modid
	extern	s.'modid
	extern	i.'modid
	extern	x.'modid
p.'modid:
	xwd	$'modid,s.'modid
	xwd	i.'modid,x.'modid>

;
; $CHECK enables statistics collection by $COUNT
;

	define	$CHECK,<
	$stats==$true>

;
; $COUNT marks events if stats collecton is enabled
;

	define	$COUNT (counter),<
	ifg	$stats,<
	ifndef	counter,<
	ifndef	.'counter,<
	.'counter==$maxstatic
	$maxstatic==$maxstatic+1
	define	counter,<.'counter(psa)>>>
	aos	counter>>

;
; $SAVE saves registers
;

	define	$SAVE (addr,first<-1>,last<-1>),<
	ifge	first,<$first==first>
	ifl	first,<$first==exp1>
	ifge	last,<$last==last>
	ifl	last,<$last==psa>
	if1	<
	ifl	$last-$first,<
	printx	<?	Illegal register specification in $SAVE>>>
	$len==$last-$first
	ifge	$len-6,<
	ifn	$first,<
	$offset==0>
	ife	$first,<
	movem	$first,addr
	$offset==1
	$first==$first+1>
	hrlzi	r0,$first
	hrri	r0,$offset+addr
	blt	r0,$len+addr>
	ifl	$len-6,<
	ife	$len,<
	movem	$first,addr>
	ifge	$len-1,<
	dmovem	$first,addr
	ife	$len-2,<
	movem	$first+2,2+addr>
	ifge	$len-3,<
	dmovem	$first+2,2+addr
	ife	$len-4,<
	movem	$first+4,4+addr>
	ife	$len-5,<
	dmovem	$first+4,4+addr>>>>>

;
; $RESTORE restores the registers saved by $SAVE
;

	define	$RESTORE (addr,first<-1>,last<-1>),<
	ifge	first,<$first==first>
	ifl	first,<$first==exp1>
	ifge	last,<$last==last>
	ifl	last,<$last==psa>
	if1	<
	ifl	$last-$first,<
	printx	<?	Illegal register specification in $RESTORE>>>
	$len==$last-$first
	ifge	$len-6,<
	$offset==0
	ife	$first,<
	$first==$first+1
	$offset==1>
	hrlzi	r0,$offset+addr
	hrri	r0,$first
	blt	r0,$last
	ifn	$offset,<
	move	r0,addr>>
	ifl	$len-6,<
	ife	$len,<
	move	$first,addr>
	ifge	$len-1,<
	dmove	$first,addr
	ife	$len-2,<
	move	$first+2,2+addr>
	ifge	$len-3,<
	dmove	$first+2,2+addr
	ife	$len-4,<
	move	$first+4,4+addr>
	ife	$len-5,<
	dmove	$first+4,4+addr>>>>>

;
; $DOUUO drops an instruction followed by PORTALs (for UUOs and XCTs)
;

	define $DOUUO (OP,AC,EA,S0,S1,S2) <
	  OP	AC,EA		;; the instruction
	 PORTAL	S0		;; and the return to hiseg
	ifdif <S1> <>,<PORTAL	S1>
	ifdif <S2> <>,<PORTAL	S2>  >

;
; $MASK and UNMASK shiled critical sections from interrupts.
;
	define	$MASK,<
	aos	$maski(pda)>

	define	$UNMASK,<
	sosg	$maski(pda)	;nested interrupt masks?
	pushj	top,escap.##>	;no, check for interrupt pending

;
; $ERROR generates a call to a runtime error routine.
;
	define	$ERROR (routine),<
	ifndef	routine,<
	extern	routine>
	jsp	r1,routine>

;
; $fterror reports a fatal runtime error.
;
	define	$fterror (message),<
	pushj	top,twait.##
	outstr	message
	move	r0,0(top)
	pushj	top,wrtpc.##
	jrst	die.##>

;
; $RTERROR generates the instruction sequence required to
; report a runtime error entry point.
;
	define $RTERROR (text),<
	extern	rt.err

	movei	r0,text
	jrst	rt.err>

;
; $PSERROR generates a runtime error routine called from
; compiler generated code (not a runtime detected error).
;

	define	$PSERROR (text),<
	extern	ps.err

	movei	r0,text
	jrst	ps.err>

	end
