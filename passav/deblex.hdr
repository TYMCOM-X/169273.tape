(*   +--------------------------------------------------------------+
     |                                                              |
     |                         D E B L E X                          |
     |                         - - - - - -                          |
     |                                                              |
     +--------------------------------------------------------------+
     
     PURPOSE:  DEBLEX is the Pascal Debugger's lexical analyzer.
     
     ENTRY POINTS:
     
        LEX$SCAN    given LEX SCAN  REC  (declared  in  debug@debug$)
                    describing  the  present  state  of  the  lexical
                    scanning, LEX$SCAN will scan the next  token  (if
                    necessary),  update LEX SCAN REC (if scanning was
                    necessary), and set STATUS  if  and  only  if  an
                    error  was  detected.  The  only  errors detected
                    here are  missing  string  delimiter,  bad  radix
                    code, and digits illegal for the given radix.
     
        LEX$KEYWORD is intended as a convenience for scanning command
                    names and  display  command  keywords.  It  skips
                    over  blanks, tabs, and other control characters,
                    looking for a sequence of letters, which it  will
                    return.
     
     NOTES: 
             When  most  special  characters  are  scanned, the TKIND
        field of the "static" state record LEX_SCAN_REC  is  changed,
        but    the    record    of    more    detailed    information
        LEX_SCAN_REC.NEXT_TOKEN is only  changed  when  the  specific
        token_kind requires it.  For example:  the cons_node field (a
        value_node) of lex_scan_rec.next_token is only  changed  when
        it  must  be used to store a constant (a string, real number,
        or integer).  Some callers take explicit advantage  of  this:
        for  example,  if  an  intconst  is  scanned,  and a slash is
        expected to follow it, scanning of the  slash  won't  destroy
        the integer constant value.  The caller can "scan ahead", and
        only extract the integer after verifying the expected syntax.
             Since what fields of the NEXT_TOKEN field,  and  of  the
        value_node  it  contains,  are defined depends on the kind of
        token, and since our allowing the NEXT_TOKEN to "lag  behind"
        means  two  different tokens are sometimes being described by
        the state record, there  are  two  differenet  TKIND  fields.
        LEX_SCAN_REC.TKIND  always  specifies  the kind of token just
        scanned.  LEX_SCAN_REC.NEXT_TOKEN.TKIND specifies the kind of
        token  that  was scanned when the NEXT_TOKEN token_record was
        changed.
     
             Integer  constants  without  an  explicit  radix  are  a
        problem,  since  the  radix  to  be  used  is only known from
        context.  In that case, the number  will  be  interpreted  in
        both  decimal,  and the machine's address radix.  Both values
        are preserved, and  the  status  codes  resulting  from  each
        interpretation  are  saved  too.  It  is  left  to  the final
        consumer to  ensure  that  the  appropriate  status  code  is
        utilized   as  appropriate.  This  is,  for  the  most  part,
        encapsulated in EXT$SCALAR and EXT$ADDRESS.
     
     ---------------------------------------------------------------- *)
