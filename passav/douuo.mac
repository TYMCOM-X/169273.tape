;    +----------------------------------------------------------------+
;    I                                                                I
;    I                          D O U U O                             I
;    I                          - - - - -                             I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    PURPOSE: This  routine  is  a  PASCAL-callable,  super-generalized
;       routine to execute a PDP-10 UUO.
;
;    USAGE:
;       TYPE
;         UUO_OP = 1..100B;
;         UUO_AC = 0..17B;
;         UUO_ACNUM = 0..(*max. number you want to pass*);
;         UUO_ACBLK = ARRAY[UUO_ACNUM] OF INTEGER;
;         UUO_ADDR = 0..777777B;
;	  UUO_RET = (NOSKIP,SKIP1,SKIP2);
;
;       EXTERNAL FUNCTION DOUUO (
;       	OP: UUO_OP;	(* op code *)
;       	VAR ACBLK: UUO_ACBLK;	(*ac's in/out*)
;       	ACNUM: UUO_ACNUM;	(*number ac's in/out*)
;       	AC: UUO_AC;		(*ac value in UUO*)
;       	ADDR: UUO_ADDR):	(*address field in UUO*)
;		UUO_RET;	(*indicates how UUO returned*)
;
;    INPUT: 
;
;       OP         Opcode  for  UUO.  UUO's  are  in the range 1..100B,
;                  but in fact this routine is quite willing to execute
;                  a normal instruction if UUO_OP is so defined.
;
;       ACNUM      Number  of  registers  to  be loaded into AC,  AC+1,
;                  ...  before executing UUO.  Same set of registers is
;                  stored back after execution of UUO.  If ACNUM=0,  no
;                  registers are loaded before or returned after.
;
;       ACBLK      Registers in and out as described by ACNUM.
;
;       AC         Accumulator field for UUO.  If AC>0,  registers  AC,
;                  AC+1,  ...  will  be  loaded  before UUO if ACNUM is
;                  also >0.  If  AC=0,  but  ACNUM>0,  then  AC2,  AC3,
;                  ...  will  be  loaded  from  ACBLK.  If  both AC and
;                  ACNUM =0,  the accumulator field of the UUO will  be
;                  zero.
;
;       ADDR       The  address  field of the UUO.  If you wish to have
;                  the  actual  address  of  something,  you  can  pass
;                  ORD(ADDRESS(whatever)) to this argument.
;
;    OUTPUT:
;
;       DOUUO      Function  value  indicates whether UUO skip returned
;		   as follows:
;		   NOSKIP...UUO did not skip
;		   SKIP1....UUO did .+2 (skip) return
;		   SKIP2....UUO did .+3 (double skip)
;
;       ACBLK      Registers after UUO according to ACNUM.
;
;    ------------------------------------------------------------------

	TITLE	douuo -- generalized PASCAL-callable UUO routine
	TWOSEG
	RELOC	400000

	ENTRY	DOUUO

;	offset of function value from stack pointer

	FV=4

;	parameter equates

	OP=2
	ACBLK=3
	ACNUM=4
	AC=5
	ADDR=6

;	here begins the code...

;	first, determine the register to put into the uuo

DOUUO:	JUMPG	AC,.+3		;if caller told us, we know
	JUMPE	ACNUM,.+2	;if no registers to load, use zero
	MOVEI	AC,2		;else if ac=0, acnum>0, use ac2

;	now, assemble the uuo instruction and save in savuuo

	LSH	OP,4		;make room for ac in op register
	OR	OP,AC		;or in accumulator field
	LSH	OP,5		;now position two fields at top of right hw
	HRL	ADDR,OP		;and flip into left hw of addr register
	MOVEM	ADDR,SAVUUO	;fin

;	see if there are registers to load

	MOVEM	ACNUM,SAVNUM	;savnum>0 indicates registers to store after UUO
	JUMPE	ACNUM,XCTUUO	;go execute if nothing to load

;	construct BLT words for before and after and load registers

	MOVE	0,AC		;use 0 as BLT ac, as it cannot be loaded
	HRL	0,ACBLK		;0--> BLT ac for loading registers
	MOVSM	0,BLTAC		;bltac--> BLT ac for returning registers
	ADD	AC,ACNUM	;compute BLT effective address for load
	SUBI	AC,1
	MOVEM	AC,BLTIN	;BLT address for load
	ADD	ACBLK,ACNUM	;now compute it for returning registers
	SUBI	ACBLK,1
	MOVEM	ACBLK,BLTOUT
	BLT	0,@BLTIN	;load the registers

;	execute the UUO

XCTUUO:	MOVEI	0,2		;for setting fcn value after uuo
	XCT	0,SAVUUO
	SUBI	0,1		;no skip = 0
	SUBI	0,1		;skip = 1
	MOVEM	0,FV(17)		;double skip = 2; return it

;	check for registers to return and return them

	SKIPG	0,SAVNUM
	POPJ	17,0		;none to return
	MOVE	0,BLTAC
	BLT	0,@BLTOUT
	POPJ	17,0

;	local storage

	RELOC	0
SAVUUO:	BLOCK	1		;constructed uuo placed here
SAVNUM:	BLOCK	1		;acnum saved here
BLTAC:	BLOCK	1		;BLT ac for storing registers here
BLTIN:	BLOCK	1		;BLT effective address for loading
BLTOUT:	BLOCK	1		;BLT effective address for storing

	END
