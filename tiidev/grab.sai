
begin "grab!main"

require "(jlacombe)mylib.sai" source!file;
require "(sailib)frmrun.req" source!file;

define CCL = 1;			! flag to use CCL entry to editor;
define !GTPPN = 2, !GTAUN = -'23, !GTUNM = -'22, !GTUN1 = -'21;
				!  GETTAB entries;

integer PARENBREAK, SEMIBREAK, SPCCOMSEMISLSHBREAK, DOTBREAK, SLASHBREAK,
	BRACKETBREAK, ASTERBREAK, CH, FLAG, BRK, EOF, sourceppn, 
	userppn, prmpt!type;

string cmd!line, source, edit!spec, hold!source, file, extension, 
	sem!file, garbage, master!file, list!semaphore, sourcedir,
	tempa, tempb;

simple string procedure cvusername(integer PPN);

begin "convert"
	return(cvos(PPN lsh(-18))&","&cvos(PPN land '777777));
end "convert";


procedure create!file( string file!spec);

begin "create"
        open(CH_getchan,"DSK",0,0,5,1024,BRK,EOF);
	enter(CH,file!spec,FLAG);
	rename(CH, file!spec, '447, FLAG);	! set RD RD NO protection;
	release(CH);
end "create";


procedure delete!file(string file!spec);

begin "delete!file"
	open(CH_getchan,"DSK",0,5,5,20,BRK,EOF);
	lookup(CH,file!spec,FLAG);
	rename(CH,file!spec,'047,FLAG);		! reset to owner-delete;
	lookup(CH,file!spec,FLAG);
	rename(CH,null,'047,FLAG);		! delete the file.;
	release(CH);
end "delete!file";


integer procedure framerun  (string objectfile, editor);
!  This routine runs the editor which is passed in the calling line 
	on the file which is passed in the calling line.  The 
	editting session is carried out in a child frame, created by
	the subroutine call FRMRUN, and when the user leaves the editor
	control is returned to this program.;

begin "framerun"

string tempfile, editversion;
own integer Flag, Status, Code, i, index;
preload!with "PEAK","VUE","EDITOR","TECOX";
	own string array EDLIST[1:4];

! Scan the EDLIST array for best match with editor to setup editversion.;

for i _ 1 step 1 until arrinfo(EDLIST,2) do 
	if KEQU(editor, EDLIST[i][1 to length(editor)])	then index _ i; 
editversion _ case index of (
[1] "(SYS)PEAK",
[2] "(FTSYS)VUE",
[3] "(SYS)EDITOR",
[4] "(MIKERUDE)TECOX",
[else] "(SYS)EDITOR"
);
! Note--In order to use TECO successfully from this program, the user
	must be gfd'ed to his own directory.;

! Set up tempfile and objectfile in the appropriate form for the
	selected editor. ;

if KEQU(editversion,"(SYS)PEAK") 
	then tempfile _ "EDS" 
	else tempfile _ "EDT";
objectfile _ " "&objectfile;

! if KEQU(editversion,"(FTSYS)VUE") then print(crlf,
"*****************************************************************",crlf,
"        VUE is frowned upon!  Learn PEAK. -- the mgmt",crlf,
"*****************************************************************",crlf);

!  For debug, but I'll leave it in.;
!  print("editor: ",editversion," tempcore file: ",tempfile,crlf);
!  print("objectfile: ",objectfile,crlf);
print(crlf,"Off to GRABland ..... ");

	status _ FRMRUN(editversion, flag _ CCL, Code, 
		tempfile, objectfile);	

	if status = 0 
	then print("Return from the editor without a hitch.",crlf) 
	else 
		begin "read error code"
			if status = 10402 
			then print("Bad news--program error: ",code,crlf) 
			else print("Bad news--error status: ",status,crlf)
		end "read error code";
return(status);
end "framerun";


!  This routine copies srcfile to destfile, writing over destfile 
	if it already exists.  Its use in this program is to write
	the file from TIIDEV into the user's directory.;

procedure copy(string srcfile, destfile);
begin "copy"
	integer inchan, outchan;

	open(inchan_getchan,"DSK",'10,5,0,'7777,BRK,EOF);
	lookup(inchan,srcfile,FLAG);
	open(outchan_getchan,"DSK",'10,0,5,0,BRK,EOF);
	enter(outchan,destfile,FLAG);
		if FLAG
		then print("ENTER returned FLAG=",cvos(FLAG),crlf);
	inout(inchan,outchan,-1);	! xfr data until EOF;
	release(inchan); release(outchan);
end "copy";


! This routine copies the file over a write-protected file
	by changing its protection and then deleting it.
	After copying source over destination we reset the
	write-protection.;

procedure recopy(string source, destination);
begin "recopy"
	integer inchan, outchan;

	open(inchan_getchan,"DSK",'10,5,0,'7777,BRK,EOF);
	lookup(inchan,source,FLAG);
	open(outchan_getchan,"DSK",'10,0,5,0,BRK,EOF);
	lookup(outchan,destination,FLAG);
 	rename(outchan,destination,'7,FLAG);	! reset protection;
	lookup(outchan,destination,FLAG);
	rename(outchan,null,'7,FLAG);		! delete old version;
	enter(outchan,destination,FLAG);	! create new version;
		if FLAG
		then print("ENTER returned FLAG=",cvos(FLAG),crlf);
	inout(inchan,outchan,-1);		! write over old file;
	rename(outchan,destination,'447,FLAG);	! reset protection;
	release(inchan);release(outchan);
end;


!  Create a semaphore file in the source directory with credit 
	going to the logged-in-user.;

procedure make!sem!file(string owner!for!now);
begin
	open ( CH _ getchan, "DSK", 0, 0, 5, 1024, BRK, EOF);
	enter(CH,sem!file,FLAG);
	out(CH,owner!for!now&" has this file."&crlf);
	rename(CH,sem!file,'447,FLAG);	! set RD RD NO prot;
	release(CH);
end;

!  Delete the semaphore file created by this program earlier.  Its
	name was kept around as a global variable.;

procedure delete!sem!file;
begin;
	open(CH_getchan,"DSK",0,5,5,20,BRK,EOF);
	lookup(CH,sem!file,FLAG);
	rename(CH,sem!file,'047,FLAG);	! reset to owner-delete;
	lookup(CH,sem!file,FLAG);
	rename(CH,null,'047,FLAG);		! delete the sem-file.;
	release(CH);
end;


procedure strip!directory(reference string file!spec);

begin "strip!dir"
string maybe;

! Read filespec which is possibly of form "(dir)file.ext" and make it of
form "file.ext";

maybe _ scan(file!spec,PARENBREAK,BRK);
! file!spec is whatever remains after the parentheses;
if not file!spec then file!spec _ maybe;
! if scan went to end of string there was no directory specified;
end "strip!dir";

procedure get!file!from!user(integer prmpt!type; reference string source);
begin "read!it!in"
	string temp1, temp2, prmpt!strng;

!	This routine reads in a file spec from the user, checking that
the user types in valid extension (some editors are choosier than
others) and that the specified file does exist.;

if prmpt!type = 1 then prmpt!strng _ "Type file to edit: "
	else prmpt!strng _ "File not found.  Keep trying: ";
do  	begin "get!good!file"
		print(prmpt!strng);
		source _ inchwl;
		source _ scan(source,SPCCOMSEMISLSHBREAK,BRK);
		temp1 _ source;
		temp2 _ scan(temp1,DOTBREAK, BRK);
		if length (temp1) > 3 then source _ " ";
		strip!directory(source);
	end  "get!good!file"
	until exists(source&"["&cvusername(sourceppn)&"]");
end "read!it!in";

!	This routine scans the mster!file to see if the file requested
	has been grabbed by another user.  It returns 1 if the file
	has been grabbed, and 0 if the file is free.;

integer procedure already!grabbed(string hold!source);
begin "already!grabbed"
	string file, somebody;
	integer inchan, code, delay!bar;

do delay!bar _ 0 until not exists(list!semaphore);
create!file(list!semaphore);
!   Now its safe to fool with the master!file;
open(inchan_getchan,"DSK",0,16,0,1024,BRK,EOF);
lookup(inchan,master!file,FLAG);
while file _ input(inchan,SLASHBREAK)
do begin "step!through"
	if KEQU( file ,hold!source)
	then begin
		somebody _ input(inchan,ASTERBREAK);
		release(inchan);
		delete!file(list!semaphore);
		return(code _ 1);
		end
	else begin 
		somebody _ input(inchan,ASTERBREAK);
		end
end "step!through";
release(inchan);
delete!file(list!semaphore);
return(code _ 0);
end "already!grabbed";


procedure add!to!use!list(string file!spec, grabber);
begin "add!to!list"
	string contents;
	integer outchan, EOF, delay!bar;

	do delay!bar _ 0 until not exists(list!semaphore);
	create!file(list!semaphore);
	!   Now it's safe to fool with the master!file;
! Release write protection so we can update the file.;
	open(outchan_getchan,"DSK",0,5,5,1024,BRK,EOF);
	lookup(outchan,master!file,FLAG);
! Buffer the current file in the program--assumes no parentheses in file.;
	contents _ input(outchan,PARENBREAK);
	rename(outchan,master!file,'047,FLAG);
! Append the file spec and user for this session,and output it.;
	lookup(outchan,master!file,FLAG);
	enter(outchan,master!file,FLAG);
	out(outchan,contents&file!spec&"/"&grabber&"*");
	close(outchan,0);
! Restore the write protection.;
	lookup(outchan,master!file,FLAG);
	rename(outchan,master!file,'447,FLAG);
	release(outchan);
	delete!file(list!semaphore);
end "add!to!list";


procedure remove!from!use!list(string file!spec, grabber);

begin "remove!from!list"
	string rdfile, garbuser, newfile, rest, user;
	integer chan, delay!bar;

	do delay!bar _ 0 until not exists(list!semaphore);
	create!file(list!semaphore);
	!   Now its safe to fool with the master!file;
	open(chan_getchan,"DSK",0,5,0,1024,BRK,EOF);
	lookup(chan,master!file,FLAG);
	while rdfile _ input(chan,SLASHBREAK) do
		if KEQU(rdfile, file!spec) 
		then begin "terminate"
			garbuser _ input(chan,ASTERBREAK);
			newfile _ newfile&(rest_input(chan,PARENBREAK));
			end "terminate"
		else newfile _ 
			newfile&rdfile&"/"&(user_input(chan,ASTERBREAK))&"*";
	release(chan);
! lift the write protection so we can update it;
	open(chan_getchan,"DSK",0,5,5,1024,BRK,EOF);
	lookup(chan,master!file,FLAG);
	rename(chan,master!file,'047,FLAG);
! write out the file as it is now;
	enter(chan,master!file,FLAG);
	out(chan,newfile);
	close(chan,0);
! restore the write protection;
	lookup(chan,master!file,FLAG);
	rename(chan,master!file,'447,FLAG);
	release(chan);
	delete!file(list!semaphore);
end "remove!from!list";


procedure inuse;

begin "inuse"
	string reply, file, somebody, questor, work!file, original!file;

open(CH _ getchan,"DSK",0,5,0,32,BRK,EOF);
lookup(CH,master!file,FLAG);
do begin "who!has!it"
	file _ input(CH,SLASHBREAK);
	somebody _ input(CH,ASTERBREAK);
	end "who!has!it"
until KEQU(hold!source, file);
release(CH);

questor _ cv6str(gettab(-1,!GTUNM))&cv6str(gettab(-1,!GTUN1));
			! read username from system tables;
if KEQU(somebody, questor) then 
	begin "crash!recover"
	print(
"Existing semaphore is yours.
Do you want to write the file in your directory over the one
in ",sourcedir," (releasing it if you don't have one there)?  ");
	reply _ inchwl;
	if KEQU(reply,"yes"[1 to length(reply)]) then 
		begin "restore"
		work!file _ hold!source&"["&cvusername(userppn)&"]";
		original!file _ hold!source&"["&cvusername(sourceppn)&"]";
		if exists(work!file)
			then begin
				recopy(work!file,original!file);
			print("Copy completed and file released.",crlf);
				end
		else print(
work!file," was lost. No recovery possible from this program.
File has been released.",crlf);
		remove!from!use!list(hold!source, questor);
		end "restore"
	else  begin print ("
You're hoarding this file.  To release it, run grab, and answer 'yes.'",crlf);
		return; end
	end "crash!recover"
else print("Sorry.  ",somebody," beat you to it.",crlf);
end "inuse";

procedure session( string source!file, editor!name);
	begin "session" 
string reply, questor, work!file, original!file;

! list the file as in-use in the logged-in user's name.;
	questor _ cv6str(gettab(-1,!GTUNM))&cv6str(gettab(-1,!GTUN1));
	add!to!use!list( hold!source, questor);

! copy the file in question to user's directory;
	work!file _ source!file&"["&cvusername(userppn)&"]";
	original!file _ source!file&"["&cvusername(sourceppn)&"]";
	copy(original!file,work!file);
	if framerun(work!file, editor!name) then 
		begin
		remove!from!use!list(hold!source, questor);
		print("Copy to source not performed.",crlf);
		end
	else 
		begin "how!to!wrapup"
		print("
Recopy ",work!file," back to ",sourcedir,"?",crlf,
"(<cr> is 'yes')");
	reply _ inchwl;
	if length(reply) and KEQU(reply,"nope"[1 to length(reply)]) then 
		begin "suppress!recopy"
		remove!from!use!list(hold!source, questor);
		print("
Releasing file, but not recopying ",work!file," over source file.",crlf);
		end "suppress!recopy"
	else
		begin "desired!end"
!	Change the file's write-protection in original!file file-directory
	via a 'rename' call and write our finished version over it.;
		recopy(work!file,original!file);
		remove!from!use!list(hold!source, questor);
!	Here is the place to update the grab.history file for the file,
	the date, and the user.;
		print("
Copied ",work!file," to source, and released file.",crlf);
		end "desired!end"
	end "how!to!wrapup";
	end "session";

! set up break tables for input control.;
breakset(DOTBREAK_getbreak,".","ins");		! terminate scan on .;
breakset(SPCCOMSEMISLSHBREAK_getbreak," ,;/","ins");	! terminate on
space, semicolon, comma, slash;
breakset(ASTERBREAK_getbreak,"*","ins");	! terminate on asterisk;
breakset(SEMIBREAK_getbreak,";","ins");		! terminate on semicolon;
breakset(PARENBREAK_getbreak,")","ins");	! terminate on right paren;
breakset(SLASHBREAK_getbreak,"/","ins");	! terminate scan on slash;
breakset(BRACKETBREAK_getbreak,"[","ins");	! terminate scan on bracket;

!  Here is the main controlling routine.;

print("GRAB.  (version 1.01)",crlf);
userppn _ gettab(-1,!GTAUN);
	! read user's Accounting User Number from system tables;
sourcedir _ "TIIDEV";		! in case user not GFD'ed to sourcedir;
sourceppn _ cvppn(sourcedir);
master!file _ "GRAB.USE"&"["&cvusername(sourceppn)&"]";
list!semaphore _ "GRAB.SEM"&"["&cvusername(sourceppn)&"]";

garbage _ scan(cmd!line _ rescancommandline,SEMIBREAK,BRK);
	! strip to semi-colon in "RUN GRAB <file.ext editor>" command line;
if cmd!line
then begin "read!cmd!line"
	source _ scan(cmd!line,SPCCOMSEMISLSHBREAK,BRK);
	edit!spec _ cmd!line;
	tempa _ source; tempb _ scan(tempa, DOTBREAK, BRK);
	if length(tempa) > 3 then source _ " ";
	strip!directory(source);
	if not exists(source&"["&cvusername(sourceppn)&"]")
	then	begin 
		prmpt!type _ 0; get!file!from!user(prmpt!type, source);
		end
	end "read!cmd!line"
else	begin
	prmpt!type _ 1; get!file!from!user(prmpt!type, source);
	end;
if not edit!spec then 
	do begin "get!editor"
		   print("What's your editor?  Type ? for choices: ");
		   edit!spec _ inchwl; 
		   if edit!spec = "?" then print("PEAK, VUE, EDITOR",crlf); 
	   end "get!editor"
	until not edit!spec = "?";

!  Set up some global variables for reference.;

hold!source _ source;		! save the file name without the directory;
file _ scan(source,DOTBREAK,BRK);		! strip the extension;
extension _ source;		! this is just to say that extension is left;

!  Now we're set up to run--the next statement is the program.;

if not already!grabbed(hold!source) then session( hold!source, edit!spec)
	else inuse;

end "grab!main";

