DEFINE Blanklines(x) = {for i_1 upto x do print(crlf)},
       Loop(x)       = {for i_1 upto x do},
       Writeln(S)    = {Print(S&crlf)},
       Write(S)      = {Print(S&null)};
integer BrkChar;
preload!with 
	     "SATURDAY",
	     "SUNDAY",
	     "MONDAY",
	     "TUESDAY",
	     "WEDNESDAY",
	     "THURSDAY",
	     "FRIDAY";
string array weekday [0:6] ;

simple procedure Bomb( String msg );
usererr( 0,0,msg,"X" );

Internal String Procedure Rev(String Str);
BEGIN
String S;
While Length(Str) do
  S_(lop(str)&S);
Return(S);
end;

Internal Boolean Procedure SubSet(String STR, Substr);
comment SubSet returns true if all the characters in string STR;
comment are some subset of those in string SUB;
begin "SUBSET"
  own boolean array Chars[0:'177]; ! one position for each ASCII char ;

    if ( length( STR ) = 0  or  length( subSTR ) = 0 )
     then return( false );

    arrclr( Chars );
    while ( length( subSTR ) )
     ! array position corresponding with ASCII value of each char
       in "subSTR" is set with "true" ;
     do Chars[ lop( subSTR ) ]_ true;

    while ( length( STR ) )
     ! if array position corresponding with ASCII value of each char
       in "STR" is was not set to "true" then function returns "false" ;
     do if not( Chars[ lop( STR ) ] )
	 then return( false );

    return( true );
 
end "SUBSET";
 
Internal String Procedure GetText( String Chars );
begin "GetText" ! GetText is passed a string of delimiters as follows: ;
    String S;   !   GetText(#lf).  Returns string up to delimeter.     ;
    Integer C;
 
   S := Null;
   While not( SubSet( Chars, C := INCHRW ) ) do
      begin "create string"
         If (C = '177) or (C = #bs) then
            begin "backup a bit"
               If (length(S)) then  comment true if S has length > 0;
                  begin "something there"
                     If ((S[inf-1 for 1] = #cr) and
                        (S[inf for 1] = #lf)) then
                        begin "do last line"
                           S := S[1 to inf-2];
                                         comment S gets substring from 1st
                                                 char to 3rd from last;
                           For c := Length(S) step -1 until 1 do
                                         comment C gets length of the string
                                           then steps back to last lf;
                              begin "find last lf"
                                 If (S[C for 1] = #lf) then
                                    begin "show line"
                                         comment print from last lf to end;
                                       Print(S[C+1 to inf]);
                                         comment since S[C] was found to be the
                                           last lf, print all from S[C+1];
                                       Done;  comment terminates "For" loop;
                                    end "show line"
                                 else
                                    If (C = 1) then
                                       Print(S);
                              end "find last lf";
                        end "do last line"
                     else
                        begin "erase one character"
                               Boolean None;
                           None := (S[inf for 1] < #bs)        or
                                   (#cr < S[inf for 1] < #esc) or
                                   (#esc < S[inf for 1] < " ");
                           S := S[1 to inf-1]; comment S gets all of S but last ch;
                           If (C neq #bs) then
                              Print(#bs);
                           Print(" " & #bs);  comment cursor now under a blank;
                        end "erase one character";
                  end "something there"
               else
                  Print(#bel);
            end "backup a bit"
         else
            s := S & C; comment add new char onto end of S;
      end "create string";
   Return(S);
end "GetText";
 
Internal String Procedure GetDate;
Begin "GetDate"
  integer Day,Month,Year,Raw;
  Raw_calli(0,'14);
  Month_((Raw DIV 31) MOD 12) + 1;
  Day_(Raw MOD 31) + 1;Year_(Raw DIV 365) + 64;
  Return(CVS(Month)&"/"&CVS(DAY)&"/"&CVS(Year));
End "GetDate";

Internal String Procedure GetTime;
Begin "GetTime"
  string sHours,sMinutes;
  integer Hours,Minutes,Raw;
  Raw_calli(0,'23);
  Hours_((Raw DIV 1000) DIV 3600);
  Minutes_(((Raw DIV 1000)-(Hours * 3600)) DIV 60);
  if Hours < 10 then
    sHours_("0"&CVS(Hours))
  else
    sHours_(CVS(Hours));
  if Minutes < 10 then
    sMinutes_("0"&CVS(Minutes))
  else
    sMinutes_(CVS(Minutes));
  Return(sHours&":"&sMinutes);
End "GetTime";

Internal String Procedure GetUserName;
  Return( cv6str(calli(-'22,'41)) & cv6str(calli(-'21,'41)) );

simple integer procedure IntRead( string msg );
begin
	string s ; integer i;
print( msg );
do i _ intscan( s _ inchwl,BrkChar )
until not BrkChar = -1;
return( i );
end;

simple real procedure RealRead( string msg );
begin
	string s ; real r;
print( msg );
do r _ realscan( s _ inchwl,BrkChar )
until not BrkChar = -1;
return( r );
end;

integer procedure CreateNewFil(String NameForTheNewFile); ! create a new file;
BEGIN
	integer eof,NewFilChan;
open(NewFilChan_getchan,"DSK",0,0,4,0,0,eof);
enter(NewFilChan,NameForTheNewFile,eof);
if eof then
  usererr(eof,2,"Can't enter "&NameForTheNewFile);
return(NewFilChan);
END;

integer procedure OpenFil(String NameOfTheFile);
! Open a currently existing file ;
BEGIN
	integer eof,
		FilChan;
open(FilChan_getchan,"DSK",0,2,0,500,0,eof);
LookUp(FilChan,NameOfTheFile,eof);
if eof then
  usererr(eof,2,"Can't LookUp "&NameOfTheFile);
return(FilChan);
END;

simple boolean procedure YES(string TheQuestion);
BEGIN
	string line;
while true do
  BEGIN "asking"
    print(crlf,TheQuestion&" (Y OR N)? ");
    Line_inchwl;
    case line of BEGIN
      ['131] ['171] ['000] return(true);
      ['116] ['156] return(false);
      else          Continue
    END; ! case ;
  END "asking";
END;! YES ;

simple string procedure prompt(string PromptLine);
BEGIN
	string line;
  print(crlf,PromptLine," ");
  if EQU(Line_inchwl,null) then
    return( null )
  else
    return(line);
END;

simple integer procedure ZELLER( integer day,month,year );
comment This procedure uses Zellers congruence to figure the day of the
	week on which any day falls.
	Returns 0 - 6 (Saturday - Friday). ;
begin
	integer m;
  if month > 2 then
    m _ month
  else
    begin
      m _ month + 12;
      year _ year - 1;
    end;

return( ( day + 2 * m + trunc(0.6 * (m + 1 )) + year
      + year div 4 - year div 100 + year div 400 + 2) mod 7 );
end;

simple integer procedure Today;
comment Returns today's weekday.
	0 - 1 ( Saturday - Friday ) ;
begin
	integer day,month,year,m;
  line _ GetDate;
  month _ intscan( line,BrkChar );
  day _ intscan( line,BrkChar );
  year _ intscan( line,BrkChar );
  year _ year + 1900;
  if month > 2 then
    m _ month
  else
    begin
      m _ month + 12;
      year _ year - 1;
    end;

return( (day + 2 * m + trunc(0.6 * (m + 1 )) + year
      + year div 4 - year div 100 + year div 400 + 2) mod 7 ) ;

end;

simple integer procedure Days(integer d,m,y);
begin
	integer days;
if ( y < 1920 ) or ( y > 1999 ) then
  Bomb("?ERROR: date must be > 1919 and < 2000.")
else
  begin
    y _ y - 1920;
    case m of begin
      [ 1  ] days _ 0  ;        [ 2  ] days _ 31  ;
      [ 3  ] days _ 59  ;       [ 4  ] days _ 90  ;
      [ 5  ] days _ 120  ;      [ 6  ] days _ 151  ;
      [ 7  ] days _ 181  ;      [ 8  ] days _ 212  ;
      [ 9  ] days _ 243  ;      [ 10 ] days _ 273  ;
      [ 11 ] days _ 304  ;      [ 12 ] days _ 334  
    end;
  days _ days + y * 365 + y div 4 + 1 + d;
  if ( y mod 4 = 0 ) and ( m <= 2 ) then
    days _ days - 1;
  return(days);
  end;
end;

simple string procedure DispDate( integer displacement );
begin
	integer t,yr,dir,mo,da,dif;
simple integer procedure Mon(integer num);
begin
  if num < 32 then return( 1 );
  if num > 31 and num < 60 then return( 2 );
  if num > 59 and num < 91 then return( 3 );
  if num > 90 and num < 121 then return( 4 );
  if num > 120 and num < 152 then return( 5 );
  if num > 151 and num < 182 then return( 6 );
  if num > 181 and num < 213 then return( 7 );
  if num > 212 and num < 244 then return( 8 );
  if num > 243 and num < 274 then return( 9 );
  if num > 273 and num < 305 then return( 10 );
  if num > 304 and num < 335 then return( 11 );
  if num > 334 and num < 367 then return( 12 );
end;

t _ (displacement div 365) * 365;
yr _displacement div 365 + 1920 ;
dif _displacement - t - ( (displacement div 365 ) div 4 ) ;
mo _ mon( dif - 1 );
    case mo of begin
      [ 1  ] da _  dif - 1 -0    ;      [ 2  ] da _  dif - 1 -31    ;
      [ 3  ] da _  dif - 1 -59    ;      [ 4  ] da _  dif - 1 -90    ;
      [ 5  ] da _  dif - 1 -120    ;      [ 6  ] da _  dif - 1 -151    ;
      [ 7  ] da _  dif - 1 -181    ;      [ 8  ] da _  dif - 1 -212    ;
      [ 9  ] da _  dif - 1 -243    ;      [ 10 ] da _  dif - 1 -273    ;
      [ 11 ] da _  dif - 1 -304    ;      [ 12 ] da _  dif - 1 -334  
    end;
  return( cvs(mo)&" "&cvs(da)&" "&cvs(yr) );
end;

string procedure upper( String rawstring );
begin
	string temp; integer char;
temp _ null;
while length( rawstring ) do
  begin
    char _ lop( rawstring );
    temp _ temp & ( if "a" LEQ char LEQ "z" then
			char - '40
		    else
			char );
  end;
return( temp );
end;

simple string procedure MonthName( integer mo );
return( case mo of (
	   null,
	   "January",
	   "February",
	   "March",
	   "April",
	   "May",
	   "June",
	   "July",
	   "August",
	   "September",
	   "October",
	   "November",
	   "December"
                	)
      );

simple integer procedure  DayToNum( String Day );
begin
  if EQU( upper(Day[1 for 2]) , "SA" ) then return( 0 );
  if EQU( upper(Day[1 for 2]) , "SU" ) then return( 1 );
  if EQU( upper(Day[1 for 3]) , "MON" ) then return( 2 );
  if EQU( upper(Day[1 for 2]) , "TU" ) then return( 3 );
  if EQU( upper(Day[1 for 1]) , "W" ) then return( 4 );
  if EQU( upper(Day[1 for 3]) , "THU" ) then return( 5 );
  if EQU( upper(Day[1 for 2]) , "FR" ) then return( 6 )
  else return( 7 ); ! error ;
end;

simple integer procedure pos( integer n );
return( if n GEQ 0 then n
	else -n );

simple procedure dayout( string day );
! Given day, i.e., "mo","TU",etc., prints next date ;
  begin
	integer m,d,y,tod,disp,NewDay; string NewDate;
    tod _ today;
    Str _ GetDate;
    m _ intscan( Str , BrkChar );
    d _ intscan( Str , BrkChar );
    y _ intscan( Str , BrkChar ) + 1900;
    disp _ days( d,m,y );
    j _ DayToNum( day );
    NewDay _ disp + pos( j ) - tod;
    if j LEQ tod then
      NewDay _ NewDay + 7;
    NewDate _ DispDate( NewDay );
    print( NewDate,".",crlf );
  end;

simple string procedure DelLdBlanks( string S );
begin
	string X;
while EQU( S[1 for 1]," " ) do
  X _ lop( S );
return( S );
end;

