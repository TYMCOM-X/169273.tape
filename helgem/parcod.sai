require "Parse and encode" message;

simple integer procedure HowMany( string S,Target ); 
! returns number of times "Target" appears in string S;
begin
	string NextWord;
	integer count;
  count_ 0;
  while length( S ) > 0 do 	! check the whole string;
    begin
      NextWord_ LopWord( S );	! get next word;
      if EQU( NextWord,Target ) then	! is it same as "Target";
	count_ count + 1;	! if so, increment counter;
    end;
  return( count );
end; ! HowMany;

simple boolean procedure ModUsedBefore( string m );
! the same modifier cannot be used twice in an expression;
begin
	integer i;
  for i_ 0 upto NumMods - 1 do
    begin "find a match"
      if equ( m,GoodMods[ i ] ) then
	begin "match found"
	  if ModCheck[ i ]  then
	    begin
	      S$ErrMsg_ "NO MORE THAN ONE " & GoodMods[ i ] & " CAN BE USED";
	      return( true );
	    end
	  else
	    begin
	      ModCheck[ i ]_ true; ! set the flag;
	      return( false ); ! no problem;
	    end;
	end "match found";
    end "find a match";
end;

simple boolean procedure UNIT( string S; reference string S$ErrMSG  );
! returns true with S$ErrMSG = null if a valid unit was passed;
! returns false with S$ErrMSG = null if a fragment of a valid unit was passed;
! returns false with S$ErrMSG containing an error message if what was passed
  contains a violation of the syntax;
begin
	boolean DOW,MOY,Cyclic;
	integer MM,DD,YY,cycle,Diff,TGTDay,BaseDayNum,NextDate,base;
	string Str,BaseDay;
  if B$Trace then print( crlf,"Unit Rec'd: <",S,">" );
  Cyclic_ false; ! becomes true if "every" is found;
  B$MDYUnit_ false; ! becomes true if the unit was MM/DD/YYYY or MMM DD, YYYY;
  Str_ LopWord( S ); ! get first word;

  if EQU( Str,"TODAY" ) then
    begin
      PutType( TypS ) ;
      PutConn( EndCon ) ;
      SREF( TodaysDisp );
      B$Coded_ true;
      return( true );
    end;

  if EQU( Str,"TOMORROW" ) then
    begin
      PutType( TypS ) ;
      PutConn( EndCon ) ;
      SREF( TodaysDisp + 1);
      B$Coded_ true;
      return( true );
    end;

  if EQU( Str,"EVERY" ) then
    begin
      Cyclic_ true;
      Cycle_ 1;
      if length( S ) = 0 then
	begin ! "every" can't stand alone;
	  return( false );
	end;
      Str_ LopWord( S ); ! get word after "every";
    end; ! string = every;

  if ValidMOY( Str ) then ! is the word a month such as "MARCH"?;
    begin 
      if Cyclic then ! "every" was encountered previously;
	begin ! expressions such as "every August" are invalid;
	  S$ErrMSG_ "EVERY cannot be followed by a date or month";
	  return( false );
	end;
      MM_ MoToNum( Str ); ! convert the month name to a number 0-11;
      if length( S ) = 0 then ! month name must be followed by something.;
	return( false ); ! return false but no error since it may come next time;
      Str_ LopWord( S ); ! more to string so get next word;
      if ValidNum( Str ) then ! month had better be followed by a number;
	begin
	  DD_ cvd( Str ); ! DD holds the day;
	  if length( S ) = 0 then ! so far so good but return false for more;
	    return( false );
	  Str_ LopWord( S ); ! there is more so check for year number;
	  if ValidNum( Str ) then ! need number for year here;
	    begin
	      YY_ cvd( Str[inf - 1 to inf] ); ! store the year in YY;
	      if cvd( GetTodDate[inf - 1 to inf] ) > YY then
	        begin
	          S$ErrMSG_ "DATE TOO FAR IN THE PAST OR YEAR > 1999";
	          return( false );
	        end;
	      B$Coded_ true;
	      PutType( TypS ) ;
	      PutConn( EndCon ) ;
	      SREF( CvDate( MM + 1,DD,YY ) );
	      B$MDYUnit_ true;
	      return( true );
	    end
	  else
	    begin ! month and day followed by something other than a year;
	      S$ErrMSG_ "Month must be followed by DD YYYY";
	      return( false );
	    end
	end
      else
	begin ! month followed by something other than a day number;
	  S$ErrMSG_ "Month must be followed by DD YYYY";
	  return( false );
	end;
    end;

  if EQU( Str,"EVERY" ) then ! "EVERY" here means fatal trouble;
    begin
      if Cyclic then
	S$ErrMSG_ "CONSECUTIVE EVERY'S"
      else
	S$ErrMSG_ "EVERY must be in first position of a unit ";
      return( false ); 
    end;

  if ValidNum( Str ) then ! a number encountered at beginning of unit or;
    begin                  !   after an "EVERY";
      cycle_ cvd( Str ); ! store the number in "cycle";
      if length( S ) = 0 then ! so far so good, return for more;
	return( false );
      Str_ LopWord( S ); ! stuff left in string so get next word;

      if EQU( Str,"EVERY" ) then ! such as in "10TH [OF] EVERY MONTH";
	begin
	  Str_ LopWord( S ); ! get next;
	  if EQU( Str,null ) then
	    return( false );
	end;

      if EQU( Str[ 1 for 5 ],"MONTH" ) then
	begin 

	  if not B$Coded then ! must be expression such as "EVERY nTH MONTH";
	    begin
	      B$Coded_ true;
	      PutMoMult( Cycle );
	      PutConn( EndCon ) ;
	      PutType( TypN ) ; ! 1;
	      PutBody( 1 ) ;
	      return( true );
	    end
	  else ! such as "... OF EVERY nTH MONTH";
	    begin
	      if cycle > 9 then ! multiplier must be < 10;
	        cycle_ 9;
	    end;

	  if B$DayCyc then ! first unit of this same expression was days;
	    begin
	      B$Coded_ true;
	      PutType( TypN );
	      PutBody( I$DayCyc ); ! set body to day cycle as "10TH D; 
	      PutMoMult( Cycle );
	      PutConn( EndCon ) ;
	    end
	  else ! second part of exp as "1ST WED OF EVERY [cycle] MONTH";
	    begin 
	      B$Coded_ true;
	      PutMoMult( Cycle );
	      PutConn( EndCon ) ;
	    end;

	  B$MonUnit_ true; ! second unit of 2 unit exp must be month unit;
	  return( true );
	end ;

      if ValidDOW( Str ) then ! for example: "EVERY MONDAY" or "2ND WED";
	begin
!	  if cycle > 9 then ! must be < 10;
!	    cycle_ 9;
	  B$Coded_ true;
	  PutMult( Cycle ) ;
	  PutType( TypW ) ;
	  PutBody( DayToNum( Str ) ) ;
	  PutConn( EndCon ) ;
	  return( true );
	end;

      if EQU( Str[1 for 3], "DAY" ) then ! as in "EVERY nTH DAY";
	begin
	  I$DayCyc_ Cycle;
	  if Cycle > 31 then
	    PutMult( 1 ) ;
	  B$Coded_ true;
	  B$DayCyc_ true; ! a cyclic day unit has been coded;
	  PutMult( 1 ) ;
	  PutType( TypN ) ;  ! 2;
	  PutBody( cycle ) ;
	  PutConn( endcon ) ;
	  if NOT cyclic then
	    PutMult( 1 );
	  return( true );
	end;

      S$ErrMSG_ S$ErrMSG & "(" & Str & ")" & "EXPECTED 'MONTH' OR 'DAY' OR A DAY OF THE WEEK";
      return( false );
    end ! if validnum;

  else

    begin
      if EQU( Str[ 1 for 5 ],"MONTH" ) then ! as "EVERY MONTH";
	begin 

	  if not B$Coded then ! whole exp is "EVERY MONTH" or "MONTH";
	    begin
	      B$Coded_ true;
	      PutMoMult( Cycle );
	      PutConn( EndCon ) ;
	      PutBody( 1 ); 
	      PutType( TypN ); ! 3;
	    end
	  else
	    begin
	      if B$DayCyc then ! second half of exp as: "nTH DAY OF EVERY;
	        begin                                  !  [cycle] MONTHS";
		  B$Coded_ true;
		  PutType( TypN ); ! 4;
		  PutMoMult( Cycle );
		  PutBody( I$DayCyc ); 
		  PutConn( EndCon ) ;
	        end
	      else ! it's the second unit of exp as "3RD MOND OF EVERY MONTH";
	        begin 
		  B$Coded_ true;
		  PutMoMult( 1 );
		  PutConn( EndCon ) ;
	        end;
	    end;

	  B$MonUnit_ true; ! second unit of 2 unit exp must be month unit;
	  return( true );
	end;

      if ValidDOW( Str ) then ! as in "EVERY MONDAY" ( with no skip );
	begin
          if Cycle = 0 then
	    begin
	      base_ TodaysDisp;
              TGTday_ DayToNum( Str );
              BaseDay_ GetDOW( CvSDat( base ) );
              BaseDayNum_ DayToNum( BaseDay );
              if BaseDayNum = TGTday then
        	Diff_ 0
              else
        	if BaseDayNum < TGTday then
        	  Diff_ abs( BaseDayNum - TGTday )
        	else
        	  Diff_ 7 - ( BaseDayNum - TGTday );
              NextDate_ base + diff; 
 	      B$Coded_ true;
	      PutType( TypS );
	      PutConn( EndCon );
              if NextDate = base then
        	SREF( NextDate + 7 )
              else
        	SREF( NextDate );
	      B$MDYUnit_ true;
	      return( true );
	    end;
!	    Cycle_ 1;  ! stand alone DOW becomes an every;
	  B$Coded_ true;
	  PutMult( Cycle ) ;
	  PutType( TypW ) ;
	  PutBody( DayToNum( Str ) ) ;
	  PutConn( EndCon ) ;
	  return( true );
	end;

      if EQU( Str[1 for 3], "DAY" ) then ! as in "EVERY DAY" ( with no skip );
	begin
	  if cycle = 0 then ! need to know how many days;
	    begin
	      S$ErrMSG_ "NEED HOW MANY DAYS OR EVERY DAY";
	      return( false );
	    end;
	  B$Coded_ true;
	  B$DayCyc_ true; ! a cyclic day unit has been coded;
	  PutMult( 1 ) ;
	  PutType( TypN ) ; ! 5;
	  PutBody( cycle ) ;
	  PutConn( endcon ) ;
	  return( true );
	end;

      ! can't get past here without error;
      S$ErrMSG_ S$ErrMSG & "(" & Str & ")" & "EXPECTED 'MONTH' OR 'DAY' OR A DAY OF THE WEEK";
      return( false );
    end;

end; ! proc UNIT;

simple boolean procedure ValidExpression( string S;
					  reference string S$ErrMSG  );
! returns true with S$ErrMSG = null if a valid expression was passed;
begin
	string SS;
  SS_ null;
  if B$Trace then print( crlf,"Exp Rec'd: <",S,">" );

  while true do ! get rid of leading blanks;
    if EQU( S[1 for 1] , " " ) then
      S_ S[ 2 to inf ]
    else
      done;
    
  while not UNIT( SS,S$ErrMSG ) do
    begin 
      if equ( S,null ) and equ( S$ErrMSG,null )  then 
	                    ! if what was passed to UNIT was not enough for a;
	                  ! valid unit and there is none left then must be 86;
	S$ErrMSG_ "INVALID FRAGMENT ";
      SS_ SS & LopWord( S ) & " "; ! add next word to string, then retry UNIT;
      if EQU( S$ErrMSG,null ) then ! string passed to UNIT was not enough to be
	continue                ! valid but no detectable error yet.;
      else
	return( false ); ! error;
    end;

  if B$Trace then print( crlf );
  B$DayCyc_ false;
  SS_ null;
  if length( S ) > 0 then ! must be another unit ( better be a month unit ) .;
    begin ! check second unit of expression;
      B$MonUnit_ false; ! initialize,  B$MonUnit will become true if the next;
			!  unit found is a month unit;

      while not UNIT( SS,S$ErrMSG ) do ! same routine as above;
	begin 
	  if equ( S,null ) and equ( S$ErrMSG,null )  then 
	    ! nothing valid yet but no more so error;
	    S$ErrMSG_ "INVALID FRAGMENT ";
	  SS_ SS & LopWord( S ) & " ";
	  if EQU( S$ErrMSG,null ) then
	    continue ! 4;
	  else
	    return( false ); ! error detected in UNIT;
	end;

      if B$Trace then print( crlf );
      if NOT B$MonUnit then
	begin  ! second unit must be a month unit;
	  S$ErrMSG_ "SECOND UNIT IN TWO UNIT EXPRESION MUST BE A MONTH UNIT";
	  return( false );
	end;
    end; ! end checking second unit;

  if length( S ) > 0 then ! can't be more than 2 unit to the expression;
    begin
      S$ErrMSG_  "EXTRA TERMS: " & s;
      return( false );
    end
  else
    return( true );
end;
  
boolean procedure ValidGrp( string S; reference string S$ErrMSG  );
begin 
	string SS,NextWord,LatestMod,ModNum;
  SS_ LatestMod_ null;
  NextWord_ LopWord( S );

  while true do ! get all until a modifier or end;
    begin
      if ValidModifier( NextWord ) then	! mod found;
	begin
	  if EQU( SS,null ) then
	    begin ! this condition indicates a mod. not followed by a date.;
	      S$ErrMSG_ "DOUBLE MODIFIERS"; 
	      return( false );
	    end
	  else
	    begin
	      LatestMod_ NextWord; ! store the modifier;
	      done; ! leave block to evaluate SS as expression;
	    end ! else;
	end
      else
	begin
	  SS_ SS & NextWord & " ";
	  if length( S ) = 0 then
	    done
	  else
	    NextWord_ LopWord( S );
	end;
    end;  ! while true;

  if NOT ValidExpression( SS,S$ErrMSG ) then
    begin
      S$ErrMSG_ S$ErrMSG & "," & "  INVALID EXPRESSION!";
      return( false );
    end
  else
    if length( S ) = 0 then  ! if end of string;
      begin
	if EQU( LatestMod,null ) then
	  begin
	    if GREF = 0 then
	      SREF( TodaysDisp );
	    I$Position_ I$Position + 2;		! add all on;
	    If I$Position > E!Length then
	      begin
	        S$ErrMSG_ "TOO MANY EXPRESSIONS. MAX = " & cvs( MaxExps );
	        return( false );
	      end
	    else
	      return( true );
	  end 
	else
	  begin		! some junk left over in string so something wrong;
	    S$ErrMSG_ "INVALID DATE";
	    return( false );
	  end
      end;

  if GREF = 0 then
    SREF( TodaysDisp );
  I$Position_ I$Position + 2;
  If I$Position > E!Length then
    begin
      S$ErrMSG_ "TOO MANY EXPRESSIONS. MAX = " & cvs( MaxExps );
      return( false );
    end;

  S_ LatestMod & " " & S; ! modifier which caused break is put back;
  ! there is more to expression after a mod so get it;
  while true do
    begin
      SS_ LatestMod_ null;

      while true do
	begin
	  NextWord_ LopWord( S );
	  if ValidModifier( NextWord ) then
	    begin
	      if EQU( LatestMod,null ) then
	        begin
	          LatestMod_ NextWord;
	          if ModUsedBefore( LatestMod ) then
	            return( false );
	          if EQU( LatestMod,"AND" ) then
	            begin
	              NextWord_ LopWord( S );
	              if ValidModifier( NextWord ) then
	                LatestMod_ NextWord
	              else
	                S_ S & " " & NextWord;
	            end;
	          case LatestMod[1 for 1] of begin
    		    [ "A" ] ModNum_ cvs( AftCon );
    		    [ "B" ] ModNum_ cvs( BefCon );
    		    [ "S" ] ModNum_ cvs( StaCon );
    		    [ "U" ] ModNum_ cvs( UntCon );
     		    [ "E" ] ModNum_ cvs( ExcCon )
	          end;
	          if length( NextWord ) > 0 then
	            continue ! 3;
	          else
	            if EQU( SS,null ) then
	              begin
	                S$ErrMSG_ "CONTIGUOUS MODIFIERS";
	                return( false ); ! ##;
	              end
	            else
	              done;
	        end   ! if EQU( LatestMod,null );
	      else
	        begin
	          LatestMod_ NextWord;
	          S_ LatestMod & " " & S;
	          done;
	        end   ! else;
	    end 				! if validmodifier;
	  else
	    begin
	      SS_ SS & " " & NextWord;
	      if EQU( LatestMod,null ) then
	        begin
	          S$ErrMSG_ "MODIFIER EXPECTED";
	          return( false ); 
	        end
	      else
	        if length( S ) > 0 then
	          begin
	            continue; ! 2;
	          end
	        else
	          done;
	    end; ! else;
	end;  ! while true; 

      if ValidExpression( SS,S$ErrMSG ) then
	begin
	  if length( S )  > 0 then
	    begin
	      B$Coded_ true;
	      I$Position_ I$Position - 2;
	      PutConn( ModNum ) ;
	      I$Position_ I$Position + 2;
  	      if GREF = 0 then
 	        SREF( TodaysDisp );
	      I$Position_ I$Position + 2;
	      If I$Position > E!Length then
	        begin
	          S$ErrMSG_ "TOO MANY EXPRESSIONS. MAX = " & cvs( MaxExps );
	          return( false );
	        end;
	      continue; ! 1;
	    end 	! if length > 0;
	  else
	    begin
	      if cvd( ModNum ) < 4 then
	        if Not B$MDYUnit then
	          begin
	            S$ErrMSG_ "NEED A DATE AFTER UNTIL/STARTING/REFERENCE." & crlf &
	                     "  EX: STARTING MMM DD, YYYY .";
	            return( false );                
	          end;
	      B$Coded_ true;
	      I$Position_ I$Position - 2;
	      PutConn( ModNum ) ;
	      I$Position_ I$Position + 2;
  	      if GREF = 0 then
	        SREF( TodaysDisp );
	      I$Position_ I$Position + 2;
	      If I$Position > E!Length then
	        begin
	          S$ErrMSG_ "TOO MANY EXPRESSIONS. MAX = " & cvs( MaxExps );
	          return( false );
	        end
	      else
	        return( true );
	    end
	end	! if valid expression;
      else
	return( false );

    end; ! while true;

end; ! ValidGrp;

simple boolean procedure ValidGroup( string S; reference string S$ErrMSG  );
begin
	string OneString,SS;
	integer ANDcount;

  ANDcount_ HowMany( S,"AND" );
  while true do
    begin
      OneString_ S_ " " & S; ! first word not a modifier so replace.;
      if ANDcount > 0 then
	OneString_ LopUpto( S,"AND" ); ! get everthing upto next "and";
      if ValidGrp( OneString,S$ErrMSG ) then ! should be a valid group;
	begin
	  if ANDcount > 0 then 		! there is another "and" ahead;
	    begin
	      B$Coded_ true;
	      I$Position_ I$Position - 2;
	      PutConn( cvs( AndCon ) ) ;
	      I$Position_ I$Position + 2;
	    end;
	  ANDcount_ ANDcount - 1;
	  if ANDcount < 0 then
	    return( true );
	  continue;
	end
      else
	return( false );
    end; ! while true;
  end;
  

simple procedure parse( reference String S$ErrMSG );
begin
  if NOT Validgroup( S$Scanned,S$ErrMSG ) then
    print( "?",S$ErrMSG,crlf );
  if B$Trace then print( crlf );
  if NOT EQU( S$BadTerms,null ) then
    print(crlf,"UNIMPLEMENTED TERMS: " , S$BadTerms , crlf );
end;

   