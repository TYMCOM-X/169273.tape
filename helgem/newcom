simple string procedure Response( string prompt, default );
BEGIN "Response"
	string response;
print( crlf, prompt );
if length( response_ inchwl ) = 0 then
  return( default )
else
  return( response )
END "Response";

simple string procedure ForceReply( string prompt, default; procedure help );
while true do
  BEGIN "ForceReply"
  	string reply;
  while length( reply_ Response( prompt, default ) ) = 0 do ;
  if equ( reply, "?" ) or kequ( reply, "HELP" ) then
    help
  else
    return( reply );
  END "ForceReply";

simple integer procedure GetCommand( string prompt, default;
					string array commands );	
BEGIN "get command"

	simple procedure ShowCommands;
	BEGIN "List commands"
		integer index;
	print( crlf, "The acceptable commands are: ", commands[ lower ] );
	for index_ lower+1 step 1 until upper do
	  print ", ", commands[ index ] );
	print( crlf );
	END "List commands";

if arrinfo( commands, -1 ) neq -1 then ! insure one dimentional string-array. ;
  BEGIN "fatal"
  print( "program error" );
  call( 0,"EXIT" );
  END "fatal" ;

lower_ arrinfo( commands, 1 );
upper_ arrinfo( commands, 2 );
while true do
  BEGIN "a command"
	string reply;
	integer index, header;
  reply_ ForceReply( prompt, default, ShowCommands );

  ! first check for exact match. ;
  for index_ lower upto upper do
    if equ( reply, commands[ index ] ) then
      return( index );

  ! Now look for partial matches. ;
  header_ lower - 1;
  for index_ lower upto upper do
    if kequ( reply, commands[ index ][ 1 for length( reply ) ] ) then
      if header < lower then
        header_ index		! first partial match. ;
      else
        BEGIN "ambiguous command"
	if header leq upper then
	  print( crlf, "??? Ambiguous.  Could be: ", commands[ header ] );
        header_ upper + 1;
        print( " or ", commands[ index ] );
        END "ambiguous command";
  if lower leq header leq upper then
    return( header );
  END "a command" ;

END "get command";

while true do
  CASE GI!CmdNum_ GetCommand( SubmitPrompt, default, Commands ) of
