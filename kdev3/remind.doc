Ken Dawson

EECS 583 - Operating Systems I

28-Jul-86





                      Summary of Programming Project

                           Summer Quarter, 1986





        This project forms the foundation of a rudimentary "reminder"

facility for MSDOS running on IBM and compatible personal computers.  A

"reminder" is a message which a user wishes to be displayed at some

specific time during the day, perhaps accompanied by some bells beeping or

the screen flashing, in order to remind him of a meeting or a doctor's

appointment, or perhaps to go home.



        Ordinarily, in a multiprogramming environment, this type of feature

would be provided by the user's favorite operating system, implemented by a

dedicated system process.  The user would type a command or call a

subroutine from a system subroutine library in order schedule the message.

This system process would then insert the message in a list of similar

events (not necessarily just messages to be typed out, but possibly

programs to be run) according to how long in the future it will occur.



        The mechanism by which the next event is triggered is usually for

the process to put iteself to sleep, requesting of the operating system to

be awakened when the event should be initiated.  If another user wishes to

schedule an event, the system process is awakened prematurely to deal with

that request, and fall soundly back to sleep.



        The sad truth is that personal computing under MSDOS does not

support multiprogramming, and this makes this scenario tragically

inappropriate.



        One of the friendlier aspects of MSDOS as an operating system,

however, is that it has no enemies.  It is a single user system, and you,

the user, must know what you're doing or else you wouldn't be there.

Therefore, it will let you grab hold of any interrupt it owns, including

the the timer interrupt.  As well, it allows programs to deposit portions

of themselves in memory "permanently", usually attached to some interrupt,

in order to provide functionality which looks a lot like multiprogramming.



        REMINI is one such memory resident program, which captures the

timer interrupt in order to implement the heart of this reminder facility.

The system clock fires at the rate of approximately 18.2 ticks per second,

and the timer ISR in REMINI counts down to each second boundry at the rate

of 18 per second.  Then, after 5 seconds have elapsed, it decrements it one

more, to adjust for the .2 seconds difference.  At each second interval, it

decrements the time remaining to the next event.  And on each tick it calls

the event handler ISR.  If the event in question triggers, then a flag is

set on the call indicating this fact, and the event handler takes over.



        The event handler is responsible for managing the processing of an

event.  Normally a rather pedestrian task, when implemented in a timer

interrupt, it can be exciting.  The question is ever, "how long should I

linger here?", within the clock interrupt, stealing from productive system

time.  There is an analytical upper limit:  no more than 1/18.2 seconds.

But it should be substantially less than that.  REMINI uses one DOS

function call as its limit.  Ultimately, this means that a message will

be emitted one character per tick, and the event handler must sequence

through its stages using a state variable to keep track of where it should

be this time.



        Peculiar things can happen when you combine this multistage

operation with queueing of asynchronously arriving requests.  This is why

the event buffer for the moment is one deep.  The fact that this is merely

a prototype step in the development of the ultimate product is also

attributable to the complexity of maintaining this queue, as well as the

unaccustomed rigors of multisegmented interrupt programming.

