
MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 1
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

1	begin	"MONDOC"
2	
3	require '3 version;
4	
5	require "(SAILIB)SAIL.DEF" source!file;
6	require "(SAILIB)EXTEND.REQ" source!file;
7	
8	
9	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 2
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

10	
11	string MySys,Today,UName;
12	
13	define	Dashes = {"------------------------------------------------"};
14	integer MemChan;		! channel for .MEM file;
15	integer MemSize;		! # of last existant .MEM file page;
16	integer MemVer;			! numeric MEM file version;
17	integer MemPtr;			! word pointer to file;
18	integer AppPtr;			! append pointer to file;
19	r!p(MAP1) MemPages;		! list of pages;
20	
21	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 3
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

22	
23	simple procedure Ini;
24	begin
25	    setformat(-2,0);
26	    MySys _ cvs(calli(!xwd('33,'11),'41));
27	    Today _ StDate(calli(0,'14),0);
28	    UName _ cv6str(calli(-'22,'41)) & cv6str(calli(-'21,'41));
29	end;
30	require ini initialization;
31	
32	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 4
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

33	procedure OpenMemFile (string FileName, How);
34	begin	"OpenMemFile"
35	    Integer MemEof;
36	    Integer Array MemInfo[1:6];
37	
38	    Open( MemChan_ getchan,"DSK",'17, 0,0, 0,0, MemEof_ -1 );
39	
40	    Lookup( MemChan, FileName, MemEof_ -1 );
41	    If ( MemEof )
42	     then usererr( 0,0, "Mem file lookup problem", "X" );
43	
44	    FileInfo( MemInfo );
45	    MemSize_ MemInfo[ 6 ];
46	
47	    If ( How = "W"  or  How = "w" )
48	     then begin "update file"
49		Own Integer EntryCount;
50	
51		EntryCount_ 0;
52		Enter( MemChan, FileName, MemEof_ -1 );
53		If ( MemEof )
54		 then If ( !rh( MemEof ) = 3 )
55		     then do begin
56	
57			If not( EntryCount )
58			 then Print( Crlf& "Mem file busy, please wait..." );
59			Calli( !xwd( 1,5 ), '72 );
60			Enter( MemChan, FileName, MemEof_ -1 );
61			EntryCount_ EntryCount + 1;
62	
63		     end until ( !rh( MemEof ) neq 3 );
64		     else usererr( 0,0, "Mem file enter problem", "X" );
65	
66	     end "update file";
67	
68	    AppPtr_ 0;
69	
70	end	"OpenMemFile";
71	
72	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 5
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

73	procedure CloseMemFile;
74	begin	"CMemFile"
75	    define !chFTR = '45;
76	    Integer I;
77	
78	    I_ Chniov( MemChan, MemSize+AppPtr, !chFTR );
79	    if not( !SKIP! )
80	     then usererr( I,2, "!CHFTR failed: ","X" );
81	
82	    Close( MemChan );
83	    Release( MemChan );
84	
85	end	"CMemFile";
86	
87	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 6
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

88	procedure MapRO (integer Ptr);
89	begin	"MapRO"
90	
91	    ! o UnMaps 2nd read-page.                           ;
92	    ! o Replicates 1st read-page into 2nd read-page.    ;
93	    !   UnMaps 1st read-page.                           ;
94	    ! o Maps page (ptr) into 1st read-page.             ;
95	
96	    ! - Ptr is a word address.                          ;
97	
98	end	"MapRO";
99	
100	procedure MapRW (integer Ptr);
101	begin	"MapRW"
102	
103	    ! o UnMaps 1st write-page.                          ;
104	    ! o Replicates 2nd write-page into 1st write-page.  ;
105	    ! o Unmaps 2nd write-page.                          ;
106	    ! o Maps or creates page (ptr) into 2nd write-page. ;
107	
108	    ! - Ptr is a word address.                          ;
109	
110	end	"MapRW";
111	
112	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 7
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

113	simple integer procedure ReadWord;
114	begin	"ReadWord"
115	    Own integer Read1, Read2;
116	
117	    integer W;
118	    if MemPtr < 0 then return(0);
119	    while MemPages = null!record or MemPtr < MAP1:ui[MemPages] 
120		do MapRW (MemPtr);
121	    W_ MAP1:a[MemPages][MemPtr land '777];
122	    MemPtr_ MemPtr -1;
123	    return (W);
124	end	"ReadWord";
125	
126	simple string procedure ReadLine;
127	begin	"ReadLine"
128	    own integer W,P,C; string S;
129	    S_ null;
130	    do begin "getchar"
131		if P=0 then begin 
132		    if MemPtr < 0 then return (S);
133		    W_ ReadWord; 
134		    if W and AppPtr < 0 then AppPtr_ MemPtr +1;
135		    P_ 5; 
136		end;
137		C_ W lsh (P*7-36) land '177;
138		P_ P -1;
139		if C > '40 then S_ C & S;
140	    end until C=#lf;
141	    return (S);
142	end	"ReadLine";
143	
144	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 8
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

145	
146	simple procedure WriteLine (string S);
147	begin	"WL"
148	    while MemPages = null!record or AppPtr > MAP1:ui[MemPages]+'777
149		do MapRW (AppPtr);
150	    S_ cvastr(MAP1:a[MemPages][AppPtr land '777]) & S & crlf;
151	    while length(S) do begin
152		while MemPages = null!record or AppPtr > MAP1:ui[MemPages]+'777
153		  do MapRW (AppPtr);
154		MAP1:a[MemPages][AppPtr land '777]_ cvasc(S[1 for 5]);
155		S_ S[6 to inf];
156		AppPtr_ AppPtr + 1;
157	    end;
158	    AppPtr_ AppPtr - 1;
159	end	"WL";
160	
161	simple procedure WriteHeading (string S);
162	begin	"WH"
163	    WriteLine (null);
164	    WriteLine (S);
165	    WriteLine (Dashes[1 for length(S)]);
166	end	"WH";
167	
168	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 9
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

169	string	MinVer;			! global for default if <CR>;
170	boolean	TextMin;		! no min head follows last text;
171	
172	simple procedure ParseMEM;
173	comment
174		There are two types of headers in the file: major and minor.
175		MinVer is the last minor header which has text after it.
176		MajVer is the last major header which has text after it.
177		Note that this routine scans the file backwards.
178	;
179	begin	"ParseMEM"
180	    boolean TextFlag;
181	    string S,Min1;
182	    TextFlag_ TextMin_ false; 
183	    MinVer_ Min1_ null;
184	    setformat(-3,0);
185	    do begin
186		S_ ReadLine;
187		if equ(S,dashes[1 for length(S)]) then S_ null;
188		if S="/" and length(S)<7 
189		    then if TextFlag 
190			then if length(MinVer)=0 
191			    then MinVer_ S 
192			    else
193			else Min1_ S
194		else if length(S) then begin
195		    TextFlag_ true;
196		    if length(Min1)=0 then TextMin_ true;
197		end;
198	    end until MemPtr < 0 or length(MinVer);
199	    if length(MinVer)=0 then
200		if TextFlag or length(Min1)=0 
201		    then usererr(0,0,"?cant parse .MEM file","X")
202		    else begin
203			MinVer_ Min1;
204		    end;
205	end	"ParseMEM";
206	
207	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 10
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

208	string procedure NameMEM;
209	! return the version number from the name of the appropriate .MEM file;
210	begin	"NameMEM"
211	    integer Flag, Chan,Eof;
212	    MEMver_ 030;
213	    setformat(-3,0);		! 3 digits;
214	    open(Chan_getchan,"DSK",0,0,0, 0,0,EOF);
215	    if EOF then usererr(EOF,2,"?open failure for DSK: ","X");
216	    Flag_ false;
217	    do begin
218		lookup(Chan,"P"&cvs(MEMver_MEMver+1)&".MEM",Eof);
219	    end until (MEMver > 099) or ((Flag_ Flag or not Eof) and Eof);
220	    if MEMver > 099 then return(null);
221	    MEMver_ MEMver - 1;
222	    release(Chan);
223	    return("P" & cvs(MEMver) & ".MEM");
224	end 	"NameMEM";
225	
226	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 11
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

227	integer LinBrk,MNB1,MNB2,MNB3,MNB4;
228	
229	simple procedure IniBreak;
230	begin
231	    setbreak(LinBrk_getbreak,#lf&#ff,#cr,"SINF");
232	    setbreak(MNB1_getbreak,"-",null,"SINK");
233	    setbreak(MNB2_getbreak,"0123456789",null,"RINK");
234	    setbreak(MNB3_getbreak,"/",null,"SINK");
235	    setbreak(MNB4_getbreak,"-0123456789",null,"RINK");
236	end;
237	require IniBreak initialization;
238	
239	simple procedure MonParse (
240		string S;
241		reference string A,B,C );
242	!
243		P033/FA01-2
244	         AAA B CC
245	;
246	begin
247	    own integer I;
248	    scan(S,MNB2,I);
249	    A_scan(S,MNB3,I);
250	    B_scan(S,MNB4,I);
251	    C_scan(S,MNB1,I);
252	end ;
253	
254	

MONDOC.SAI                              created 23-Jun-84 00:36                                          Page 12
Program Listing                         by CRFSYM %5 at 18-Sep-86 20:07

255	!	M A I N   P R O G R A M	;
256	
257	string SName;			! temp name;
258	integer B;			! break character;
259	boolean NoMEM;		       	! there is no .MEM file;
260	
261	NoMEM_ true;
262	if length(SName_ NameMEM) then begin "MemFileFound"
263	    OpenMemFile ( SName );
264	    ParseMEM;
265	    if AppPtr < 0 then usererr(0,0,
266	    	"?.MEM file is empty! Don't do that to me!","X");
267	    NoMEM_ false;
268	end "MemFileFound";
269	if NoMEM then usererr(0,0,"?no .MEM file","X");
270	
271	print("[updating ",SName," entry for ",MinVer,"]",crlf);
272	print("Enter comments (or ?):",crlf);
273	WriteLine(null);
274	do begin
275	    string S;
276	    S_ inchwl; B_ !SKIP!;
277	    if equ(S,"?") then begin print("
278	Enter any number of lines of text to be appended to the log (",SName,").
279	A line of the form 
280	    @<filename>
281	will include the contents of the named file in the log at that point.
282	A line ending with ^D,^Z or <ESC> will terminate the log entry and add
283	a signature in the form 
284	    /<username><date>
285	Warning: text is appended as it is typed!  There is no need to 'lock'
286	the .MEM file by renaming it - it is opened in single user update mode.
287	"); continue end;
288	    if B neq #cr then begin
289		string X;
290		X_ "/"& UName& " "& Today;
291		if length(S) + length(X) + 2 > 72 then X_ crlf& X
292		else if length(S) > 0 then X_ "  "& X
293		else ;
294		S_ S& X;
295		print (X,crlf);
296	    end;
297	    if S="@" 
298		then begin "file"
299		    integer C,B,E;
300		    open(C_getchan,"DSK",1,4,0,256,B,E);
301		    lookup(C,S[2 to inf],E);
302		    if E then print("?cant read file ",S[2 to inf],crlf);
303		    while not E do WriteLine(input(C,LinBrk));
304		    release(C);
305		end "file"
306		else WriteLine(S);
307	end until B neq #cr;
308	CloseMemFile;
309	
310	end	"MONDOC" .
311	

MONDOC.SAI                User defined Screated 23-Jun-84 00:36                                          Page 13
Cross Reference                         by CRFSYM %5 at 18-Sep-86 20:07

!CHFTR                      78
!RH                         54    63
!SKIP!                      79   276
!XWD                        26    59
#CR                        231   288   307
#FF                        231
#LF                        140   231
.                          310
A                          121   150   154   241   249
APPPTR                      18    68    78   134   134   148   149   150   152   153   154   156   156   158   158   265
B                          241   250   258   276   288   299   300   307
C                          128   137   139   139   140   241   251   299   300   301   303   304
CALLI                       26    27    28    28    59
CHAN                       211   214   218   222
CHNIOV                      78
CLOSE                       82
CLOSEMEMFILE                73   308
CRLF                        58   150   271   272   291   295   302
CV6STR                      28    28
CVASC                      154
CVASTR                     150
CVS                         26   218   223
DASHES                     165   187
E                          299   300   301   302   303
ENTER                       52    60
ENTRYCOUNT                  49    51    57    61    61
EOF                        211   214   215   215   218   219   219
EQU                        187   277
FILEINFO                    44
FILENAME                    33    40    52    60
FLAG                       211   216   219   219
GETBREAK                   231   232   233   234   235
GETCHAN                     38   214   300
HOW                         33    47    47
I                           76    78    80   247   248   249   250   251
INCHWL                     276
INI                         23    30
INIBREAK                   229   237
INPUT                      303
LINBRK                     227   231   303
LOOKUP                      40   218   301
MAP1                        19   119   121   148   150   152   154
MAPRO                       88
MAPRW                      100   120   149   153
MEMCHAN                     14    38    40    52    60    78    82    83
MEMEOF                      35    38    40    41    52    53    54    60    63
MEMINFO                     36    44    45
MEMPAGES                    19   119   119   121   148   148   150   152   152   154
MEMPTR                      17   118   119   120   121   122   122   132   134   198
MEMSIZE                     15    45    78
MEMVER                      16   212   218   218   219   220   221   221   223
MIN1                       181   183   193   196   200   203
MINVER                     169   183   190   191   198   199   203   271
MNB1                       227   232   251
MNB2                       227   233   248
MNB3                       227   234   249
MNB4                       227   235   250
MONPARSE                   239
MYSYS                       11    26
NAMEMEM                    208   262
NOMEM                      259   261   267   269
OPEN                        38   214   300
OPENMEMFILE                 33   263
P                          128   131   135   137   138   138
PARSEMEM                   172   264
PTR                         88   100
R!P                         19
READ1                      115
READ2                      115
READLINE                   126   186
READWORD                   113   133
RELEASE                     83   222   304
S                          128   129   132   139   139   141   146   150   150   151   154   155   155   161   164   165
                           181   186   187   187   187   188   188   191   193   194   240   248   249   250   251   275
                           276   277   291   292   294   294   297   301   302   306
SCAN                       248   249   250   251
SETBREAK                   231   232   233   234   235

MONDOC.SAI                User defined Screated 23-Jun-84 00:36                                          Page 14
Cross Reference                         by CRFSYM %5 at 18-Sep-86 20:07

SETFORMAT                   25   184   213
SNAME                      257   262   263   271   278
STDATE                      27
TEXTFLAG                   180   182   189   195   200
TEXTMIN                    170   182   196
TODAY                       11    27   290
UI                         119   148   152
UNAME                       11    28   290
USERERR                     42    64    80   201   215   265   269
W                          117   121   123   128   133   134   137
WRITEHEADING               161
WRITELINE                  146   163   164   165   273   303   306
X                          289   290   291   291   291   292   292   294   295
    