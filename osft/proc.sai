begin "XEXEC-II"

require "(SAILIB)SAIL.DEF" source!file;
! require "(MPL)UUOSYM.DEF" source!file;
require "(CARL)JQUEUE.DEF" source!file;
require "(CARL)JQUE.REQ" source!file;

record!class job( Integer Run, Seq, Opt; r!p (job) Nxt );
r!p (job) jobs, tjob, njob, ljob;

Own integer Seq;
Safe integer array Rec[ 0 : E!Length-1 ];

Simple Boolean Procedure NextRecord;
begin "next record"
    arrclr( Rec );
    dpb( Seq, point( 18, Rec[E!Status], 35 ) );
    return( GetRec( Rec ) );
end "next record";

jobs_ new!record( job );			! initialize queue list ;
Seq_ -1;

! set Q!WLock - no writes allowed ;
! clear Q!New - scheduler was here ;

While ( NextRecord )				! while records exist   ;
 do begin "sort queue"

    njob_ jobs;					! begin at top of list  ;
    while ( njob_ job:Nxt[tjob_njob] )		!  until the empty list ;
     do if ( Rec[E!Runtime] < job:Run[njob] )	!  if runtime < job:Run ;
	 then done;				!   then fall to insert ;

    tjob_ job:Nxt[tjob]_ new!record( job );	! create the new record ;
    job:Nxt[tjob]_ njob;			! keep any forward ptrs ;
    job:Run[tjob]_ Rec[E!Runtime];		! copy runtime  & seq # ;
    job:Seq[tjob]_ ldb( point( 18, Rec[E!Status], 35 ) );

    Seq_ 0;					! loop through them all ;

 end "sort queue";

tjob_ jobs;
while ( tjob_ job:Nxt[tjob] )
 do begin "process queue"
    Print( "Seq: ", job:Seq[tjob], " Run: ", cvos( job:Run[tjob] ), crlf );
 end "process queue";

ClsQue;

end 	"XEXEC-II" $
