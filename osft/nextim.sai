
entry
	NexTim
;

begin "Next Run Time"

require "(SAILIB)SAIL.DEF"   source!file;
require "(CARL)JQUEUE.DEF"   source!file;
require "(HELGEM)SUBMIT.DEF" source!file;
require "(HELGEM)DAYTIM.REQ" source!file;

redefine PutMult(x)   = { DPB( x, PMult(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine PutType(x)   = { DPB( x, PType(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine PutMoMult(x) = { DPB( x, PMoMult( memory[ ArrAddr + GI!Pos ] ) ) };
redefine PutBody(x)   = { DPB( x, PBody(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine PutConn(x)   = { DPB( x, PConn(   memory[ ArrAddr + GI!Pos ] ) ) };

redefine GetMult     = { LDB( PMult(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine GetType     = { LDB( PType(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine GetMoMult   = { LDB( PMoMult( memory[ ArrAddr + GI!Pos ] ) ) };
redefine GetBody     = { LDB( PBody(   memory[ ArrAddr + GI!Pos ] ) ) };
redefine GetConn     = { LDB( PConn(   memory[ ArrAddr + GI!Pos ] ) ) };

redefine SREF(x) = { DPB( x, PDate( memory[ ArrAddr + GI!Pos + 1 ] ) ) };
redefine GREF      = { LDB( PDate( memory[ ArrAddr + GI!Pos + 1 ] ) ) };

redefine STIM(x) = { DPB( x, PTime( memory[ ArrAddr + GI!Pos + 1 ] ) ) };
redefine GTIM      = { LDB( PTime( memory[ ArrAddr + GI!Pos + 1 ] ) ) };



integer
	DateGen
,	NewDatTim
,	Earliest
,	DatesInArr
,	TotDats
,	LimitDate
,	ExcCount
,	i
,	NewConn
,	FailedDates
,	GI!Pos
,	ExcBase
,	UsersZone
,	GMTBase
;

boolean
	 Exceptions	! becomes true if "exception" connector found ;
;

preload!with
"JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE",
"JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER";
own safe string array Mos[ 0:NumMnths - 1 ];

preload!with
"SATURDAY","SUNDAY","MONDAY",
"TUESDAY","WEDNESDAY","THURSDAY","FRIDAY";
own safe string array WkDay[ 0:NumWkDay - 1 ];

own integer array DateArr[1:E!MaxItem,1:2];
own integer array ExcpArr[1:E!MaxItem,1:2];



simple integer procedure GetDaOfWeek( integer dis );
! ----------------------------------------------------------------------;
!									;
!	GetDaOfWeek							;
!		Given a displacement in days from 1-Jan-64, determine	;
!		the day of the week as 0-6 where 0 = Saturday.		;
!									;
! ----------------------------------------------------------------------;
return( (dis + 4) mod 7 );



simple integer procedure YearNumb( integer disp );
! returns the year (0-99) of the displacement;
! better way is ((CONST<days 0-1/1/1964> + disp) - leap-years) div 365 ;
BEGIN
	String date;
  date_ CvSDat( disp );
  return( cvd( date[inf - 1 to inf] ) );
END;



simple integer procedure MonthNumb( integer disp );
! returns the month (0-11) of the displacement;
BEGIN
	integer i;
	String date;
  date_ CvSDat( disp );
  for i_ 0 upto 11 do			! check array for match;
    if KEQU( date[ 4 for 3 ],Mos[ i ][ 1 for 3 ] ) then
      return( i );
END;



simple integer procedure DaOfMonth( integer disp );
! returns the day-of-the-month (1-31) of the displacement;
BEGIN
	String date;
  date_ CvSDat( disp );
  return( cvd( date[1 for 2] ) );
END;


simple integer procedure typeW( integer ArrAddr; integer baseDT );
BEGIN
    integer
	NextDate
,	ref
,	BaseDayNum
,	RefDayNum
,	diff
,	dd
,	RefYear
,	RefMOY
,	RefDOM
,	FDOM
,	FDOMday
,	NextMonth
,	BODY
,	MULT
,	MOMULT
;

  ref_ GREF;
  BODY_ GetBody;
  MULT_ GetMult;
  MOMULT_ GetMoMult;
  if !lh( BaseDt ) < ref then ! first date must be after Ref Date ;
    baseDT_ !xwd( ref,!rh( BaseDT ) );

  ! ______________________________________________________________________;
  ! Unit such as "EVERY FRIDAY";
  ! ______________________________________________________________________;
  if MULT = 1 and MOMULT = 0 then 
    BEGIN
    BaseDayNum_ GetDaOfWeek( !lh( BaseDT ) );	! Get day of the base ;
    if BaseDayNum = BODY then	! Is it the day we're looking for ;
      Diff_ 0				! No Difference ;
    else				! They are not the same ;
      if BaseDayNum < BODY then		! Figure the difference ;
        Diff_ abs( BaseDayNum - BODY )
      else
        Diff_ 7 - ( BaseDayNum - BODY );

    NextDate_ !lh( BaseDT ) + diff; 	! Figure next instance of BODY ;
    if NextDate = !lh( BaseDT )  then		! Cannot return it if same ;
      BEGIN
      if not GTIM > !rh( BaseDT ) then		! Req'd time is > base time;
        return( NextDate + 7 )		!   so next date is next week ;
      else				! Req'd time is earlier than base ;
	return( nextdate );		!   so next this is date/time ;
      END
    else
      BEGIN
      return( NextDate );			! > base so return it ;
      END
    END
  else

  ! ______________________________________________________________________;
  ! Unit such as "EVERY 4TH FRIDAY";
  ! ______________________________________________________________________;
  if MULT > 1 and MOMULT = 0 then 
    BEGIN
    RefDayNum_ GetDaOfWeek( Ref );	! Get day-of-the-week of reference ;
    if RefDayNum = BODY then		
      Diff_ 0				! Difference between ref & TGT days ;
    else
      if RefDayNum < BODY then	! If ref day comes before TGT day ;
        Diff_ abs( RefDayNum - BODY ) ! Days to back up from TGT to ref ;
      else
        Diff_ 7 - ( RefDayNum - BODY ); ! Days forward from ref to TGT ;

    ref_ ref + diff;	! Move from ref day to first instance of TGT day ;

    while ref < !lh( BaseDT ) do 		! Until we pass the base ;
      ref_ ref + ( 7 * MULT );	!    keep adding 7*Multiplier ;

    if ref = !lh( BaseDT ) then			! Happens to equal the base ;	
      if not GTIM > !rh( BaseDT ) then	! i.e., next run is not later today ;
        return( ref + ( 7 * MULT ) ) ! Then move to next ;
      else
	return( ref )	
    else
      return( ref );	! date is on future day so don't worry about time ;
    END
  else

  ! ______________________________________________________________________;
  ! Unit such as "2nd WED OF EVER MONTH";
  ! ______________________________________________________________________;
  if MULT > 0 and MOMULT > 0 then 
    BEGIN
    RefDOM_ DaOfMonth( ref ); ! get day of month of ref;
    RefMoy_ MonthNumb( Ref ); ! get month of the ref date;
    RefYear_ YearNumb( Ref ); ! get Year of the ref date;
    FDOM_ ref - RefDOM - 1; ! get disp of first day of ref month;
    FDOMDay_ GetDaOfWeek( FDOM ); ! get day of week of FDOM;
    if FDOMday = BODY then
      Diff_ 0 			! No difference ;
    else
      if FDOMday < BODY then	
        Diff_ abs( FDOMday - BODY )	! Figure the difference ;
      else
        Diff_ 7 - ( FDOMday - BODY );	! same ;
    if MULT = 9 then
      BEGIN 			! find last whatever of ref month;
      dd_ FDOM + diff + 28;
      if MonthNumb( dd ) = RefMoy then
	dd_ dd - 7;
      END
    else
      dd_ FDOM + diff + ( ( MULT - 1 ) * 7 ); ! push to req'd day ;

    if dd > !lh( BaseDT ) then
      BEGIN
      return( dd );
      END;
    NextMonth_ RefMOY; 			! start with ref month;
    while true do 
      BEGIN
      NextMonth_ NextMonth + MOMULT; ! Advance the number of months ;
      if NextMonth > 12 then		   ! If we overrun December ;
        BEGIN
	NextMonth_ NextMonth - 12;
	RefYear_ RefYear + 1;
        END;
      FDOM_ CvDate( NextMonth + 1,1,RefYear ); ! get 1st day of next mo;
      FDOMday_ GetDaOfWeek( FDOM );      ! what day-of-the-week;
      if FDOMday = BODY then		! See above ;
        Diff_ 0
      else
        if FDOMday < BODY then
       	  Diff_ abs( FDOMday - BODY )
        else
          Diff_ 7 - ( FDOMday - BODY );
      if MULT = 9 then
        BEGIN 				! find last whatever of ref month;
	dd_ FDOM + diff + 28;
	if MonthNumb( dd ) = NextMonth or DaOfMonth( dd ) < 10 then
	  dd_ dd - 7;
        END
      else
        dd_ FDOM + diff + ( ( MULT - 1 ) * 7 );

      if dd > !lh( BaseDT ) or dd = !lh( BaseDT ) then
        BEGIN
	if GTIM > !rh( BaseDT ) then	! Same day but later time ;
          return( dd );
	if dd > !lh( BaseDT ) then	! Same day but later time ;
          return( dd );
        END
      END
    END
  ! ______________________________________________________________________;

END;


simple integer procedure typeN( integer ArrAddr; integer baseDT );
BEGIN
	integer baseDOM,baseMOY,baseYear,NextMonth,FDOM,NextDOM,
		RefMOY,RefDOM,RefYear,dd,BODY,ref,MOMULT;
  ref_ GREF;
  BODY_ GetBody;
  MOMULT_ GetMoMult;
  if MOMULT = 0 then		! such as "EVERY nTH DAY";
    BEGIN
    dd_ ref;				! start with ref date ;
    while true do
      BEGIN
      if dd > !lh( BaseDT ) then
        return( dd );
      if dd = !lh( BaseDT ) then
        if GTIM > !rh( BaseDT ) then
          return( dd );
      dd_ dd + BODY;
      END
    END
  else
    BEGIN
    if !lh( BaseDt ) < ref then ! first date must be after Ref Date ;
      baseDT_ !xwd( ref,!rh( BaseDT ) );
    if MOMULT = 1 then ! as "25TH DAY OF EVERY MONTH";
      BEGIN
      baseDOM_ DaOfMonth( !lh( baseDT ) ); ! get day of month of base;
      baseMoy_ MonthNumb( !lh( BaseDT ) ); ! get month of the base date;
      baseYear_ YearNumb( !lh( BaseDT ) ); ! get Year of the base date;
      if BODY > BaseDOM then 	! may be in this month;
        BEGIN
	NextDom_ CvDate( baseMOY + 1,BODY,baseYear );	
        END
      else
        BEGIN
        if BODY = BaseDOM then
	  if GTIM > !rh( BaseDT ) then
	    return( CvDate( baseMOY + 1,BODY,baseYear ) );
	NextMonth_ baseMOY + 2;	! else next month;
	if NextMonth > 12 then	! Overran December ;
	  BEGIN
	  NextMonth_ NextMonth - 12;
	  baseYear_ baseYear + 1;	! Happy New Year! ;
	  END;
	NextDOM_ CvDate( NextMonth,BODY,baseYear );
        END;
      return( NextDOM );
      END;	 ! if MOMULT = 1;

    if MOMULT > 1 then	! as "25TH DAY OF EVERY 3RD MONTH";
      BEGIN
      RefDOM_ DaOfMonth( ref ); ! get day of month of ref;
      RefMoy_ MonthNumb( ref ); ! get month of the ref date;
      RefYear_ YearNumb( ref ); ! get Year of the ref date;
      nextDOM_ CvDATE( RefMoy + 1,BODY,RefYear );
      if nextDOM > !lh( BaseDT ) then ! if the base happens to be target day;
	return( nextDOM ); ! good enough;
      if nextDOM = !lh( BaseDT ) then
	if GTIM > !rh( BaseDT ) then
	  return( NextDOM );

      NextMonth_ RefMOY - ( MOMULT - 1 );
      while true do 
        BEGIN
        NextMonth_ NextMonth + MOMULT;
        if NextMonth > 12 then
          BEGIN
          NextMonth_ NextMonth - 12;
          RefYear_ RefYear + 1;
          END;
        nextDOM_ CvDate( NextMonth + 1,BODY,RefYear );
        if BODY = 32 then
          BEGIN 
          while MonthNumb( NextDOM ) = NextMonth do
            NextDOM_ NextDOM - 1;
          END;
        if nextDOM > !lh( BaseDT ) then
          return( NextDOM );
        if nextDOM = !lh( BaseDT ) then
	  if GTIM > !rh( BaseDT ) then
	    return( NextDOM );
        END
      END	
    END
END;

simple integer procedure TypeT( integer ArrAddr; integer base );
begin
	integer REFTIM,MinDay,H,M,Brk,BaseTime,DaysAhead,ref,BODY;
	string Frac;
  BODY_ GetBody;
  ref_ GREF;
  MinDay_ 1440;
  DaysAhead_ 0;
  Frac_ CvSTim( GTIM );
  H_ intscan( Frac,Brk );
  M_ intscan( Frac,Brk );
  REFTIM_ M + ( 60 * H );

  if ref > !lh( base ) then
    base_ !xwd( ref,0 );  			! After midnight of ref date ;
  Frac_ CvSTim( !rh( Base ) );
  H_ intscan( Frac,Brk );
  M_ intscan( Frac,Brk );
  BaseTime_ M + ( 60 * H );

  while REFTIM GEQ BaseTime do
    REFTIM_ REFTIM - BODY;

  while REFTIM LEQ BaseTime do
    BEGIN
    REFTIM_ REFTIM + BODY; 	
    if REFTIM GEQ MinDay then ! New time is in next day ;
      BEGIN
      REFTIM_ REFTIM - MinDay;
      DaysAhead_ 1 ;
      done;
      END
    END;

  M_ REFTIM MOD MinDay;
  H_ REFTIM DIV 60;
  M_ M - ( H * 60 );
  return( !xwd(!lh( base) + DaysAhead,
          TFract( cvs(H)&":"&cvs(M)&":00" ) )
        );
  
END;



simple integer procedure typeS( integer ArrAddr; integer base );
BEGIN
  integer ref;
  ref_ GREF;

!  if ref = 262143 then
    return( -1 );			! Startup. ;

  if ref = !lh( base ) then
    if GTIM > !rh( base ) then
      return( ref );

  if ref > !lh( base ) then
    return( ref )
  else
    return( 0 );
END;



simple integer procedure FindModif( integer ArrAddr; integer ConnSought );
! search Array for connector ConnSought;
! If connector is found then return the date, as "AFTER 3/3/86.";
! else return 0;
BEGIN
	integer Dat;
  GI!Pos_ E!Descriptor;		! BEGIN at the BEGINning;
  While true do
    BEGIN
    if GetConn =  ConnSought then	! does it match what is asked for;
      BEGIN
      GI!Pos_ GI!Pos + D!Length; ! date is in next GI!Poss;
      Dat_ !xwd( GREF,GTIM );
      return( Dat );		! return the date;
      END;
    if GetConn = EndCon then		! at END so go no furthur;
      BEGIN
      return( 0 );
      END;
    GI!Pos_ GI!Pos + D!Length;	! proceed to next word;
    END
END;


internal simple integer procedure NexTim( integer ArrAddr, BasDatTim );
! ----------------------------------------------------------------------;
!									;
!	NexTim		Routine to return the next available runtime	;
!			date based on the date supplied.		;
!									;
! ----------------------------------------------------------------------;
BEGIN "figure"

  UsersZone_ LDB( point( 6, memory[ ArrAddr+E!Privs ], 7 ) );
  GMTBase_ CvtDTM( BasDatTim, UsersZone, '20 );

  ExcCount_ 1; 				! exception array index;
  Exceptions_ false;	 		! true if "EXCEPT" connector is found ;
  FailedDates_ 0; 	 		! Count dates not used due to except's;
  LimitDate_ FindModif( ArrAddr, BefCon ); ! See if there's a before date.;
  if LimitDate = 0 then 		! There was no before connector. ;
    BEGIN
    LimitDate_ FindModif( ArrAddr, UntCon ) ; 	! check for an until. ;
    LimitDate_ LimitDate + 1;     		! If "UNTIL" found then add 1 ;
    if LimitDate = 1 then           		! i.e., not found ;
      LimitDate_ 0;				! So no limit date.;
    END;
  GI!Pos_ E!Descriptor; ! go to beginning of the date code ;
  while true do
    BEGIN "find a date"
    arrclr( DateArr );
    arrclr( ExcpArr );
    TotDats_ 0;
    ExcBase_ 99999;
    
    ! ----------------------------------------------------------------------;
    ! Figure next run date for each date unit within the expression.
    ! Load into DateArr until an "EXCEPT" connector is found. From that
    ! point on, load run dates into ExcpArr.
    ! ----------------------------------------------------------------------;
    while true do
      BEGIN "load date arrays"
      TotDats_ TotDats + 1; 
      NewConn_ GetConn;
      DateGen_ NewDatTim_ 0;
      case GetType of 
        BEGIN
        [ TypW ] DateGen_   typeW( ArrAddr, GMTBase );
        [ TypN ] DateGen_   typeN( ArrAddr, GMTBase );
        [ TypS ] DateGen_   typeS( ArrAddr, GMTBase );
        [ TypT ] NewDatTim_ typeT( ArrAddr, GMTBase )
        END; 
      if DateGen = 262143 then
        return( -1 );			! Startup. ;

      if DateGen > 0 then
        NewDatTim_ !xwd( DateGen,GTIM ); 		! load run time ;

      if !lh( NewDatTim ) < ExcBase then 		! save earliest date ;
        ExcBase_ !lh( NewDatTim );
      if Exceptions then			! if Exception has been found ;
        BEGIN
	ExcpArr[ExcCount,1]_ NewDatTim; 	! All following are exceptions;
	ExcCount_ ExcCount + 1;			! Increment exception count ;
        END
      else
        BEGIN					! no exception found yet ;
        DateArr[TotDats,1]_ NewDatTim;		! latest date into array ;
	DateArr[TotDats + 1,2]_ NewConn;	! keep connector with the date;
        if NewConn = ExcCon then                ! is connector an ExcCon? ;
 	  Exceptions_ true;		        ! All further dates are exceptions;
        if Exceptions then	                ! if Exception has been found ;
          GMTBase_ !xwd( ExcBase - 1, !rh( GMTBase ) );
        END;
      if GetConn = EndCon then
	done
      else					! else get next part, continue;
        GI!Pos_ GI!Pos + D!Length; 
      END "load date arrays";
    ! ----------------------------------------------------------------------;


    ! ----------------------------------------------------------------------;
    ! Get the earliest run date from DateArr, move it to "Earliest".
    ! ----------------------------------------------------------------------;
    Earliest_ DateArr[1,1];
    DatesInArr_ TotDats - ExcCount + 1 ;
    if DatesInArr > 1 then
      for i_ 2 upto DatesInArr do 
        BEGIN
        if DateArr[i,1] < Earliest and DateArr[i,2] neq 69 and 
	    DateArr[i,1] > 0 then
          Earliest_ DateArr[i,1]; 	   ! get lowest next date from array ;
        END;
    ! ----------------------------------------------------------------------;

    if LimitDate > 0 and Earliest > LimitDate - 1 then
      BEGIN  
      return( 0 );		      ! there is no date before a before date;
      END;


    ! ----------------------------------------------------------------------;
    ! If there is an Earliest, then see if it is overruled by any exceptions.
    ! If not excepted then return the date 
    !    else go back to beginning of "find a date" to find a later "Earliest".
    ! ----------------------------------------------------------------------;
    if Earliest > 0 then
      BEGIN						! there is a new date ;
      if ExcCount > 1 then 		! if there are exceptions;
        BEGIN
	for i_ 1 upto ExcCount - 1 do
	  BEGIN				! check found date against exceptions ;
	  if Earliest = ExcpArr[ i,1 ] then		! date = an exception ;
	    BEGIN
	    GMTBase_ Earliest; ! next date found must be > current date ;
	    ExcCount_ 1;			! re-init exception aray index;
	    Exceptions_ false;
	    GI!Pos_ E!Descriptor; 		! back to beginning ;
	    FailedDates_ FailedDates + 1;
	    if FailedDates > 365 then 		! no more than 365 attempts ;
	      BEGIN 
	    ! print( crlf,"NO DATES BEFORE ", CvSDat( !lh( Earliest ) ) );
	      return( 0 ); 			! All dates excepted;
	      END;
	    continue "find a date"; 		! try again ;
	    END
	  END;
        return( CvtDTM( Earliest, '20, UsersZone ) );
        END					! no exception to date ;
      else
        return( CvtDTM( Earliest, '20, Users) );
      END					! there were no exceptions. ;
    else
      return( 0 ); 				! no further dates were found ;
    ! ----------------------------------------------------------------------;

    if NewConn = EndCon then
      done;
    END "find a date";
END "figure";

! print( crlf,"BAS:",!lh( GMTBase )," ",CvSTim( !rh( GMTBase ) )," " );
! print( crlf,"DateGen=",DateGen );
! print( crlf,"NEW:",!lh( NewDatTim )," ",CvSTim( !rh( NewDatTim ) )," " );
!     for i_ 1 upto TotDats - ExcCount + 1 do
!       print(crlf,"DateArr[",i,",1]=",
!       !lh( DateArr[i,1] ),"-",
!       CvSTim( !rh( DateArr[i,1] ) ) );
! 
!     for i_ 1 upto TotDats - ExcCount + 1 do
!       print(crlf,"ExcpArr[",i,",1]=",
!       !lh( ExcpArr[i,1] ),"-",
!       CvSTim( !rh( ExcpArr[i,1] ) ) );  
! 
! print( crlf,"GREF=",GREF );

END "Next Run Time";
   ] jd