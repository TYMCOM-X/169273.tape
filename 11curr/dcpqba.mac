	.SBTTL	DCPQBA ROM Contents
	.TITLE	DCP Q-bus address decoder ROM

;  This source builds the contents of the Q-bus address decoder for the
;  DCP unit.  The ROM contians 512 4-bit words.  Each 4-bit word specifies
;  the characteristics of a 16-byte block of Q-bus address space.  Within
;  each 4-bit word, one bit indicates whether or not that 16-byte block
;  is part of the bootstrap ROM, and another bit specifies whether that
;  16-byte block contains the Command/Status Registers (CSR).

;  Initialize for our type of ROM; start ROM address at zero.
	ROMINIT	,,,<DCP Q-bus address decoder>
	.DOT.=0				;Set starting ROM addr to zero

;  Define the ROM data bits used for each function.
	CSADRL=D0			;D1 zero indicates CSR
	BRADRL=D1			;D2 zero indicates boot ROM
	REST=D2 ! D3			;Bits D2 and D3 are unused

;  Define our INVERT to mark a block as part of no Q-bus device.
;  Note that CSADRL and BRADRL are active-low signals, so ones are
;  placed in the INVERT mask for them.
	INVERT=<REST & UNUSED> ! CSADRL ! BRADRL



;  Define addresses of Q-bus devices.
;  The addresses are assumed to be within the I/O address space of a
;  PDP-11, i.e. the upper 4K words decimal.
	CSR=162000			;Address of block of CSR from Q-bus
	BOOTR=173000			;Address of boot ROM from Q-bus
	BOOTS=256.			;Size of boot ROM in bytes

	RCSR=CSR-160000/16.		;Convert 16-byte block addr in I/O space
	RBOOTR=BOOTR-160000/16.
	RBOOTS=BOOTS/16.		;Size of boot ROM in 16-byte blocks

	.IF	GT,RBOOTR-RCSR		;See if must do RCSR first
	   .REPT	RCSR		;Fill in up to RCSR addr
	      MAP	<^C.DOT. & .AFLD>
	      .DOT. = .DOT.+1
	   .ENDR
	   MAP	<^C.DOT. & .AFLD>,CSADRL	;Put down RCSR bit
	   .DOT. = .DOT.+1
	.ENDC

	.REPT	RBOOTR-.DOT.		;Fill in up to boot ROM addr
	   MAP	<^C.DOT. & .AFLD>
	   .DOT. = .DOT.+1
	.ENDR


	.REPT	RBOOTS			;Mark all boot ROM pages
	   MAP	<^C.DOT. & .AFLD>,BRADRL
	   .DOT. = .DOT.+1
	.ENDR

	.IF	LT,RBOOTR-RCSR		;See if did boot ROM first
	   .IF	GT,.DOT.-RCSR		;If tried to overlap, croak
		.ERROR	47	;Illegal - can't overlap ROM and RCSR addresses.
	   .ENDC
	   .REPT	RCSR-.DOT.	;Fill in up to RCSR addr
	      MAP	<^C.DOT. & .AFLD>
	      .DOT. = .DOT.+1
	   .ENDR
	   MAP	<^C.DOT. & .AFLD>,CSADRL	;Mark RCSR
	   .DOT. = .DOT.+1
	.ENDC

	.REPT	.ASIZ-.DOT.		;Fill in the rest with default
	   MAP	<^C.DOT. & .AFLD>
	   .DOT. = .DOT.+1
	.ENDR

	ENDRMC				;Mark end of .RMC file
	.END
 