.sec Disk I/O,DiskIO:
.ind disk structure; ind structure;
.ind file system;
The disk units of a system are not normally dealt with individually but
are grouped into "structures".  The current monitor supports only one
disk structure (DSKB), but in the future, there may be many.  The
monitor organizes a disk structure so that, rather than appearing as a
fixed number of disk units each containing a fixed number of pages, it
appears to contain an arbitrary number of "directories" (or UFDs, for
User File Directories), each containing a variable number of
variable-sized "files".

A disk file has a name consisting of four parts:

.b!list
--The name of the structure it is stored on
--The name of the UFD in which it is contained
--The file's name
--The file's extension
.e!list

For example,
.b!ex
	DSKB: (SYS)SYSTAT.SAV
.e!ex
is on the structure DSKB in the directory SYS;
its name is SYSTAT and its extension is SAV.
A program could access this file by initializing the device DSKB
(see {SecRef OPEN} and {ChanioRef !CHOPN}),
then executing a file-selection UUO, such as LOOKUP, to
specify the directory and the file's name and extension.


.sec Device Names,DskNam:
Each file structure has a four-letter
SIXBIT name.
There is currently only one structure,
and its name is DSKB.

The structure specified when a channel is initted
is the structure that will be searched
by subsequent file-selection UUOs
on that channel.

Normally,
a program will init the generic device
.b!ex
	DSK
.e!ex
which causes the monitor to refer to
the frame's "search list"
to determine which structures
to search
on subsequent operations.
Since there is currently only one disk structure,
specifying DSK as the device
is equivalent to specifying DSKB.
.
.sec Logical Unit Names,DskLogNam:
.ind logical unit names; ind unit names;
Each disk unit in a structure has a
five-letter SIXBIT name, e.g.,
.b!ex
	DSKB0	for the first unit in the structure
	DSKB1	for the second, etc.
.e!ex
If a program inits a particular logical
unit,
subsequent operations which
allocate disk space
(such as appending to a file or creating a file)
will attempt to do so on the specified unit,
but file selection operations
will still search the entire structure.
.endSec DskLogNam:
.
.sec Physical Unit Names,DskPhyNam:
.ind physical unit names;
Each type of disk controller
has a two-letter SIXBIT name.
The only controller type currently supported is BP, which controls
3330-compatible disk drives.

Each controller of a particular type
has a three-letter SIXBIT name,
e.g.,
.b!ex
	BPA	the first 3330 controller
	BPB	the second, etc.
.e!ex

Each particular unit on a controller
has a four-letter SIXBIT name,
e.g.,
.b!ex
	BPA0	the first 3330 on the first controller
	BPA1	the second 3330, etc.
.e!ex

If a program inits a particular controller type, controller, or physical
unit, subsequent operations which allocate disk space (such as
appending to a file or creating a file) will attempt to do so on the
specified controller type, controller, or unit, but file selection
operations will still search the entire structure within which it is
contained.
.endSec DskPhyNam:
.
.sec Abbreviations,DskAbrev:
The generic name DSK
can be abbreviated
to DS or D.
.endSec DskAbrev:
.
.endSec DskNam:


.sec Buffered I/O,DskBufIO:
Buffered disk i/o can be performed in ASCII, ASCII line, extended
ASCII (also called Katakana), image, image binary, or binary mode.

In ASCII and ASCII line mode, the byte size is 7 bits;  in extended
ASCII, it is 9 bits;  in image, image binary and binary it is 36 bits.
Regardless of the mode used, the user's buffer is treated as containing
36 bit words.

The standard buffer size is 131 words (128 for data + 3 for
the header).  The monitor will always assume that the user
is providing standard-sized buffers.
If a program, for example, attempts disk input into a 64-word
buffer with 3-word header, the 64 words immediately following
the buffer will be written over.
.endSec DskBufIO:


.sec Dump I/O,DskDumpIO:
Either dump or dump records mode I/O can be done on disk.  The two
behave identically:  on input, the data is read as specified;  on
output, records which are not a multiple of 128 words will be
followed by enough 0 words to reach the next 128 word boundary.
.endSec DskDumpIO:


.sec Disk Files,DskFile:
.ind file, disk file
A disk file consists of the data that is contained in the file and the
information that the operating system needs to retrieve that data.
All file data is stored in pages, each 512 words long.  If there are
less than 512 words of data to be put into a page the data will be
followed by enough 0 words to reach 512.

Previous versions of the monitor supported integrel units of 128 words
called blocks.  Each block corresponded to a formatted disk sector of
128 words.  There are 4 blocks to a page.  P033 and later monitors no
longer perform file I/O operations using blocks.  However, since the
standard disk buffer contains 128 words for data, the monitor now
handles all block-related file I/O (including standard buffered and
dump mode I/O) by simulating these operations.

Older programs continue to work as before, with the extra work being
handled by the monitor.  New programs should be written using the file
and memory mapping calls to take advantage the speed gained by direct
access to file data.  See {SecRef VCREAT}, {ChanioRef !CHMFP} and
{ChanioRef !CHCFP} for more information.

.sec Directories,DskDir:
.ind directory; ind disk directory;
A directory is a specially-formatted file which serves as an index
to other files on the disk.  It maps file names and extensions into
physical page addresses on the disk.
The file system has directories arranged in a 2-level tree structure:

.b!list
--The master file directory (MFD) is at the root of the tree.  It is
the master index to all the user file directories (UFDs) on the system.
--The user file directory (UFD) is at the next level of the tree.  It
contains pointers to data about each file belonging to a particular user.
.e!list

.
.sec Master File Directory,MFD:
.ind MFD; ind master file directory;
The master file directory or MFD is an index to all the individual user
file directories on a structure.  This directory is special.  The file
system maintains a separate pointer so that this file can be located by
the monitor.

The system searches the MFD to locate
the information for a particular UFD.

The "name" of a UFD is its owner's PPN;  the "extension" is SIXBIT UFD.

The master file directory itself is a UFD with the username "UFD".  It
can be looked up by passing the name word to LOOKUP a pointer to SIXBIT
UFD (or the 36-bit value "1,,1") and the extension "UFD".
.endSec MFD:
.
.sec User File Directory,UFD:
.ind UFD; ind user file directory;
A user file directory (UFD) is what the system searches to find a
particular file.

A structure's MFD is in many ways
just a special case of a UFD,
and a UFD just a special kind of file.
The differences are that
.b!list
--Only the MFD can contain pointers to UFD's
--A program cannot directly perform i/o
on a UFD
--The privilege bits (see {secRef FileProt})
of a UFD or MFD are interpreted differently
than those of a non-directory file
.e!list
.endSec UFD:
.
.sec Reading a Directory,DskDirIO:
An unlicensed process cannot directly read
a directory as though it were a file.
The monitor does, however,
provide a system call for reading
the contents of a directory.

To examine the contents of a directory,
a program first selects the directory
for input using the LOOKUP UUO,
(by setting the !RBNAM word of the LOOKUP block to the PPN of
the desired UFD, and the !RBEXT word to SIXBIT "UFD")
and then executes
the {ChanioRef !CHUFD}.
.endSec DskDirIO:
.
.use CHANIO.UFD;
.QueueTab UFDBIT;
.endSec DskDir:

.sec Frame Search List,DskSList:
.ind frame search list; ind search list;
When a frame inits DSK rather than a specific
disk structure,
the monitor determines which structures
to search
on subsequent file-selection operations
by examining the frame's "frame search list".
Since only one structure,
DSKB,
is currently supported,
the contents of the frame search list
are currently of no concern
to the user.
.endSec DskSList:
.
     
     
     

     
     
.sec Storage Allocation Table,SAT:
.ind SAT; ind storage allocation table;
.ind M-bit; ind F-bit;
Each page of a file structure
may
.b!list
--Be part of some file
--Be mapped into the address space of some process
(see {secRef Paging})
--Be defective
.e!list

On each structure is a file called (SYS)SAT.SYS
(SAT standing for Storage Allocation Table).
The file contains two bits for every
disk page:
.b!list
--The Mapped bit (or M-bit),
which is set if the page is currently
mapped into some process's address space
--The File bit (or F-bit),
which is set if the page is bad,
or if it is currently part of a file
.e!list
.endSec SAT:
     
     
     

     
     
.sec File Organization,FileOrg:
.ind RIB; ind retrieval information block; ind prime RIB;
.ind secondary RIB; ind file organization; ind spare RIB;
A directory entry for a file points to
a "retrieval information block"
(RIB)
for that file.
The RIB contains data about the protection,
ownership, size, etc., of the the file,
and a number of "retrieval pointers".

If the file is not too large (about 300 pages),
the retrieval pointers point to the
disk pages containing the actual data of
the file.

If the file is extremely large,
the retrieval pointers in the
"prime RIB" point to
"secondary RIB" (or "spare RIB") pages which
in turn contain retrieval pointers which point
to the data pages.

Storage for a file is always allocated
in units of pages,
although,
for compatibility with older monitors,
many numbers are given in "blocks"
of 200(octal) words.
There is also no preallocation
of storage to the file,
although the appearance of
the old preallocation system
is maintained.
.endSec FileOrg:
     
     
     

     
     
.sec File Access Protection,FileProt:
.ind file owner; ind file protection; ind protection;
A frame is said to be a (nondirectory) file's "owner"
if that frame's AUN matches the
file's PPN in both halves,
or if the right half of the frame's PPN
matches the right half of the file's
PPN.
A frame which is not the owner of a file
is considered to be in the same project as the file
if the left half of its PPN matches
the left half of the file's PPN.

Each (nondirectory) file has a 9-bit
"protection code"
associated with it.
The code consists of three 3-bit fields:
.b!list
--The left 3 bits are used when
the accessor is the file's owner
--The middle 3 bits are used when the
accessor is not the file's owner
but is in the same project as the file
--The right 3 bits are used when neither
is the case
.e!list
Each of the three 3-bit protection codes
can take a value from 0 through 7,
with 7 providing the greatest protection
(least access). The codes
are described in {TabRef TAB1}.

The owner of a file can always change its protection
with a RENAME.
.
.QueueTab TAB1;
.
.sec License,LicFile:
A process having {RF} license
gets Read access to any (nondirectory) file;
a process having {WF} license
gets All access.

A process having {HF} license
gets Read access to all (nondirectory) files
whose project number match its own;
a process having {WP} license gets
All access.

A process having {JL} license  gets All access
to any file in the stream accounting UFD.

A process having {HF} license 
whose FPN matches a file's PPN
gets the maximum of its normal access to that file
and the access it would have
if its programmer number matched the file's.
.endSec LicFile:
.sec Disk Files with PIDs,DskPID:
A file may be marked with a PID, making it
available for special access by a process running with
the same PID.  The special access/protection mechanisms
made available by PIDs are discussed fully on {secRef PID}.
.endSec DskPID:
.endSec FileProt:
     
     
     

     
     
.sec Directory Access Protection,UFDProt:
.ind UFD protection; ind directory protection;
A frame is said to be a directory's "owner"
if the frame's AUN matches the directory's
file name.
A frame which is not the owner of a directory
is considered to be in the same project as the directory
if the left half of the frame's PPN
matches the left half of the directory's PPN.

Each directory has a 9-bit protection code
associated with it,
which is broken down into three 3-bit
fields in the same way as the file protection
code.
The project and programmer numbers of a
directory are the left and right halves
of its "name" (since its PPN is always 1,,1).

Each of the three bits of a directory's protection code
controls a different access
and the three can be set in any combination.
The bits are shown in {TabRef TAB2}.
.
.QueueTab TAB2;
.
.sec License,LicUFD:
A process having {JL} or {WA} license 
can access any directory as if it were
a nondirectory file with All access.
(This includes reading and writing it directly).

A process having {WF} license
can change the protection of a directory
with RENAME.

A process having {HF} license
whose FPN matches the directory's PPN
gets the maximum of its normal access to that directory
and the access it would
if its programmer number matched the directory's.
.endSec LicUFD:
.
.endSec UFDProt:
     
     
     

     
     
.sec File Selection,FileSel:
.ind file selection; ind lookup; ind create; ind supercede;
.ind update; ind rename; ind delete;
The basic operations relating to file selection are:
.b!list
--LOOKUP; Look up an existing file,
read its RIB data,
and make it available for input.
--CREATE; Create a new file
of zero length,
set its initial RIB data,
and make it available for input.
When it is closed,
delete the current directory entry
for the file if there is one
and make a new entry pointing to the file
being closed.
--SUPERSEDE; Create a new file
of zero length
to replace an identically-named
existing file,
set its initial RIB data
(optionally inheriting values from
the existing file),
and make it available for input and output.
When the file is closed,
delete the directory entry
for the file
if there still is one
and make a new entry pointing to the file
being closed.
--UPDATE; Look up an existing file,
read (and optionally modify elements of)
its RIB data,
and make it available for input and output.
A file cannot be selected for single-user update
unless there are no processes currently
updating (in single or multiple user mode)
the file;
once a file is selected for single-user update,
no process can select that file for updating
(in either mode) until it is closed.
--UPDATE (multiple-user); Look up an existing file,
read (and optionally modify elements of)
its RIB data,
and make it available for input and output.
A file cannot be selected for multiple-user
update if some process is currently
updating the file in single-user mode;
once a file is selected for multiple-user update,
no process can select that file for
single-user update until it is closed.
--RENAME; Change the name, extension,
directory, or other RIB data
of an existing file.
--DELETE; Delete an existing file.
.e!list
There are fewer UUOs than operations.
The appropriate UUOs or UUO sequences
for the above operations are
.b!list
--LOOKUP; Execute a LOOKUP UUO.
--CREATE; Execute an ENTER UUO.
--SUPERSEDE; Execute an ENTER UUO.
--UPDATE (single-user); Execute a LOOKUP UUO
followed by an ENTER UUO specifying the same
file.
--UPDATE (multiple-user); Execute a LOOKUP UUO
followed by a .CHMEN CHANIO specifying the same
file name.
--RENAME; Execute a RENAME UUO
specifying the new data.
--DELETE; Execute a RENAME UUO
specifying a 0 filename.
.e!list
.sec File State Transitions,FilState:
When the basic operations listed above are performed
on a file, its state changes.  The monitor keeps track
of the state of every file in the system, and allows
the basic operations to be performed only in accordance
with the state-transition diagram shown in {tabRef FILSTA}.
.QueueTab FILSTA;
.endSec FilState:
.sec Argument Blocks,ArgBlocks:
The {UuoRef LOOKUP},
{UuoRef ENTER},
{ChanioRef !CHMEN},
and {UuoRef RENAME}
all take as their argument
the address of a data block
which is essentially the same for
the four UUOs.

There is a short and an extended form of argument
block.  The two are distinguished by the
left half of the first word (word) 0,
which must be nonzero for a short block
and 0 for an extended block.

The short form lookup block is described in {tabRef SLKB}
and the long (extended) form in {tabRef EXTLKB}.
Each entry in the tables has associated with it a group
of protection codes which are described in {TabRef TAB13}.
.
.QueueTab TAB13;
.QueueTab SLKB;
.QueueTab EXTLKB;
.endSec ArgBlocks:
.
.use CHANIO.ENT;
.use CHANIO.LK;
.use CHANIO.MEN;
.use CHANIO.REN;
.use ENTER.UUO;
.use LOOKUP.UUO;
.use RENAME.UUO;
.
.sec File Selection Error Codes,FSErr:
The LOOKUP, ENTER, RENAME, RUN, RUNSEG, GETSEG and equivalent
CHANIO functions, and CHANIO fn !CHMEN
all return error codes from {TabRef TAB15}.
.
.QueueTab TAB15;
.endSec FSErr:
.
.sec Closing a Disk File,DiskClose:
The {UuoRef CLOSE}
for a disk device
closes the file currently selected on the channel
and allows a new file to be selected
(without having to release and re-init the device).
The file name, extension, and ppn are remembered
until the next file selection operation,
however,
so the sequence LOOKUP CLOSE RENAME is
permissible,
though probably an error.

On closing a file
that was open for input,
the disk device-dependent code
normally updates the access date of the
file to the current date.
This action can be inhibited by setting
CL.ACS in the CLOSE argument.

On closing a file that was being created or superseded,
the monitor normally deletes the old version
of the file (if there was one)
and rep it with the file being closed.
This action can be inhibited
by setting CL.RST in the CLOSE argument.
.endSec DiskClose:
.
.sec Setting File License,SetFileLic:
.ind file license; ind license;
When a process supersedes or updates
a file which has license set
(c<.RBLIC right> nonzero),
the file's license is reduced,
if necessary,
to roughly that of the process modifying the file.
The exact algorithm by which ENTER computes
the file license (<result>) is:
.b!nest
Let <result> be 0 if the file is being created,
or the file's current license if it is being
updated or superseded.

If the project number (left half)
of the process's PPN differs from that of the file,
clear {HF} license from <result> unless the
process has {WF} license,
and set the read(write) privilege field
of <result> to 0 if it was previously
set to read(write) project.

If the project numbers match but the programmer
numbers (right half) do not,
clear {HF} license from <result> unless the process
has {WF} or {WP} license.

If <result> specifies greater read(write) privilege
than the current process has,
set <result>'s read(write) privilege field to 0.
Turn off any other license bits
(with the exception of {HF} license)
in <result> that are not set for the current process.
.e!nest
If the ENTER is extended,
and specifies a new set of license bits
(<want>),
ENTER performs a further computation
to obtain the license (again <result>):
.b!nest
Let <max> be the maximum of the current process
license (minus {HF} license) and <result>,
and let <want> be the license argument
supplied by the program.

Set <result> = <want>.

If the project number (left half)
of the process's PPN differs from that of the file,
clear {HF} license from <result> unless
<max> contains {HF} or {WF} license,
and set the read(write) privilege field
of <result> to 0 if it neither <want>
nor <max> contain greater than read(write)
project.

If the project numbers match but the programmer
numbers (right half) do not,
clear {HF} license from <result> unless
<max> contains {HF}, {WF},
or {WP} license.

If <result> specifies greater read(write) privilege
than <max> contains,
set <result>'s read(write) privilege field to 0.
Turn off any other license bits
(with the exception of {HF} license)
in <result> that are not set in <max>.
.e!nest
<result> is now the license actually set for the file.
.endSec SetFileLic:
.
.endSec FileSel:
     
     
     

     
     
.sec File Positioning,FilePos:
.ind file position; ind file pointer;
The monitor maintains
for each channel initted to a disk device
a "file pointer" which specifies
the disk block to be referenced by the next
input or output operation.

Any process which has initted a disk device
and selected a file on a channel
can set the "file pointer" for that
channel to some relative block within
the file.
There are two positioning operations,
USETI and USETO
(and several variations on each).
USETI is normally used before an
input operation and USETO before an output.
The major differences are:
.b!list
--USETO requires that an ENTER have been done;
USETI works if either a LOOKUP or ENTER
has been done
--USETI, if given a file position past the
end-of-file,
will set IO.EOF in the file status bits
and set the file pointer to point
to the block after the last block of the file;
USETO will expand the file out to the
specified block.
.e!list
USETI and USETO take as arguments a "file block number",
which is 1 to specify the first block of the file.
.
.sec Super USETI/USETO,SupUSET:
.ind super IO; ind super USETI; ind super USETO; ind super mode;
A process which has {WA} or {RA} license 
can init a channel to a disk structure or device
and then perform a "super USETI" or "super USETO"
operation
to set the file pointer to some block on
that structure or device.

A super USETI or USETO counts as a file-selection
operation in that
i/o can be performed on a disk device
if and only if either a file has been selected
with LOOKUP or ENTER,
or the channel is in "super mode"
as a result of having had a super USETI or USETO
done on it.

Super USETI and USETO take as arguments a "disk block number",
which is 0 to specify the first block of
the structure or device.

A disk device channel may also be put into super mode
by a {ChanioRef !CHSMP} operation. Once in super mode, ordinary
IN, OUT, INPUT and OUTPUT UUOs or the !CHSMP UUO may be used
to perform data access.
.endSec SupUSET:
.
.use USETI.UUO;
.use USETO.UUO;
.use SEEK.UUO;
.endSec FilePos:

     
     
.sec Direct File Page Manipulation,FilPag:
.ind file page manipulation;
.ind exchange file pages;
.ind delete file pages;
.ind map file pages;
.ind create file pages;
There are several operations
supplied by the monitor
for directly manipulating pages
of a file
(in addition to the basic mapping operation
supplied by {chanioRef !CHMFP}:
a page can be created
at some point in the file where a page does
not already exist;
a page can be deleted from some point in the file;
or two file pages can be exchanged.

It should be noted that,
to the monitor,
a "file" is basically just a set of pages.
The file's RIB contains a map pointing
to the pages making up the file,
and that map can be thought of as being similar
to a process's map.

When a process maps a file page,
it is actually just mapping into its address
space the disk page
which is currently pointed to
by the appropriate slot in the file's RIB.
If process A maps page 12 of the file
and process B subsequently exchanges
page 12 with page 13,
process A will still be using the same disk
page it was using before,
with the result that
it will now be using what process B
(and subsequent mappers)
see as page 13 of the file.

In brief,
the delete, create, and exchange operations
only affect the RIB entries
for the file.
They have no effect on any of the pages of
the file which may be currently mapped by any process.
.
.use CHANIO.CFP;
.use CHANIO.DFP;
.use CHANIO.XFP;
.use CHANIO.VMP;
.endSec FilPag:
.sec Specialized File Manipulation,SpecFManip:
Three CHANIOs are available to fill other file
control needs
.b!list
--{chanioRef !CHFTR} allows the caller to
move the EOF point
--{chanioRef !CHFFI} allows the caller to search
the RIB structure of a file for "interesting" pages:
the next "hole" page, or the next "real" page, for
example
--{chanioRef !CHMGN} allows several updaters
of a file to interlock with one another as they
attempt to update
.e!list
.use CHANIO.FTR
.use CHANIO.FFI
.use CHANIO.MGN
.endSec SpecFManip:
     
     
     

     
     
.sec Reading Information,DskInfo:
.
.sec Disk Characteristics,DskChar:
A program can obtain the characteristics
of a disk device or class of disk devices
with the DSKCHR UUO.
The UUO returns a data block of the form
described in {TabRef TAB3}.
.

The <name> (word 0) is supplied by the program
and can be in one of seven forms:
.b!list
--the generic device DSK or a logical name
ASSIGNed to it
--a structure name (DSKB))
--a unit within a structure (DSKB1)
--a controller class (BP)
--a controller (BPA)
--a unit within a controller (BPA1)
.e!list
The UUO also returns a word of
status bits described in {TabRef TAB4}.
.
.use CHANIO.UGF;
.use DSKCHR.UUO;
.endSec DskChar:
.
.sec Disk Unit/Structure Names,UniStr:
These UUOs allow a program to obtain
names of all the disk units (SYSPHY)
or disk structures (SYSSTR)
in a system.
.
.use GOBSTR.UUO;
.use JOBSTR.UUO;
.use STRUUO.UUO;
.use SYSPHY.UUO;
.use SYSSTR.UUO;
.endSec UniStr:
.
.use UGETF.UUO;
.endSec DskInfo:

     
     
.sec Validating and Flushing,Validate:
.ind Flushing;
.use CHANIO.VRB;
.use DSKCLR.UUO;
.endSec Validate:
.
.QueueTab DSKFSB;
.
.endSec DiskIO:
 4 	G