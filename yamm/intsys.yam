.sec Interrupt System and Sleeping,SoftInt:
.
.sec Trapping Arithmetic and Stack Overflow,TrapOver:
.ind arithmetic overflow; ind stack overflow; ind PDL OV;
.ind trapping stacck overflow; ind trapping arithmetic overflow;
On encountering an integer or floating-point
overflow condition in user mode,
the KI-10 hardware executes the instruction
found in location 421 of the user process table;
on encountering stack overflow or underflow
it executes the instruction found
in location 422.
This provides an efficient means for the user
program to trap such errors without
incurring monitor overhead.
.
The monitor normally stores a JFCL as the
arithmetic overflow trap instruction.
To set the instruction to be executed on
integer or floating-point arithmetic overflow,
the program executes
the {CalliRef SETTR1}.

The monitor normally stores an instruction
which will cause it to abort the current frame
as the stack over/underflow trap instruction.
To set the instruction to be executed on
stack over or underflow,
the program executes
the {CalliRef SETTR2}.
.
.use SETTR1.UUO;
.use SETTR2.UUO;
.endSec TrapOver:

     
.sec APRENB Interrupt System,APRENBint:
.ind APRENB interrupts;
The APRENB interrupt system
provides for dispatch to a user-supplied
routine
on any of the events shown in table {TabRef APRENB}.

When an enabled APRENB condition occurs
and the APRENB interrupt system is active,
the monitor will
.b!list
--Store a representation of the current
processor status into .JBCNI of the "Job Data Area".
Where appropriate, the bits stored are those which
would have resulted from a CONI APR instruction
executed on a KA-10 processor.

--Store the current program counter into
 .JBTPC of the "Job Data Area".

--Disable all APRENB interrupt causes
if AP.REN is 0,
or all but AP.UUO and AP.CLK if AP.REN is 1.
An exception occurs on UUO traps,
where all causes but AP.CHR, AP.BRK, and AP.ESC
are disabled.

--Jump to the address stored in .JBAPR of the
"Job Data Area".
An exception can occur on AP.UUO traps:
if the last APRENB executed
specified a separate address for them
the monitor will jump there instead.
.e!list
An AP.CHR, AP.BRK, or AP.ESC trap will be deferred
if it occurs while another APRENB trap is in
progress.

To dismiss from an APRENB interrupt,
the {CalliRef DISMIS} is used.
Note that it is not used in the same manner when
dismissing from APRENB interrupts as it is from INTADR interrupts.
.
.QueueTab APRENB;
.use APRENB.UUO;
.endSec APRENBint:

     
.sec INTADR Interrupt System,INTADRsys:
.ind INTADR interrupts;
The INTADR interrupt system has 35
software interrupt channels,
with a priority structure
such that channel 1 has the highest,
and channel 35 the lowest priority.
At any given time,
each channel has three bits of state information
associated with it:
.b!list
--It may either be enabled or disabled.

--It may have an interrupt currently in progress.

--It may have an interrupt pending.
.e!list
Each channel can be selectively enabled or disabled,
or the system as a whole can be
enabled or disabled
(preserving the states of the individual
channels)
or reset
(disabling each channel
and clearing its
in-progress and pending bits).
.
.sec Initializing the INTADR System,INTADRini:
The INTADR system uses a 70-word transfer vector
to save the current PC and fetch the
trap routine's address
when initiating interrupts.
The format of the trap vector is
.b!ex
	word 0	channel 1 old PC address
	word 1	channel 1 trap routine address
	word 2	channel 2 old PC address
	word 3	channel 2 trap routine address
	...
.e!ex
To set up the INTADR system,
the program executes
the {CalliRef INTADR}.

The proper use of the INTADR system is to first
initialize the vector with words 0,2,4..set to
zero, words 1,3,5..set to the entry points of
the routines for each PI level.  Then issue
the {calliRef INTADR}, followed by the
appropriate TINASS and/or INTASS UUO to
assign causes.

Once everything is set up, issue the {calliRef INTENB}
to begin accepting interrupts.

Each PI routine should end its execution with a 
{calliRef DISMIS}, which will return via the
appropriate PC in the transfer vector.

.endSec INTADRini:
.
.sec Assigning Causes to Channels,INTADRass:
Each possible interrupt cause
can be assigned to one of the software interrupt channels,
or ignored.
An interrupt channel can have several causes
assigned to it
but it then becomes difficult to determine
what actually caused a given interrupt.

Assignment of port causes is handled by the {CalliRef TINASS}.
The port causes are shown in {TabRef TINASS}.

General causes are assigned with the {CalliRef INTASS}.
The general causes are shown in {TabRef INTASS}.
.
.QueueTab TINASS;
.QueueTab INTASS;
.
.endSec INTADRass:
.
.use INTADR.UUO;
.use TINASS.UUO;
.use INTASS.UUO;
.use INTRMT.UUO;
.queueTab INTRMT;
.use SETTIM.UUO;
.use INTENB.UUO;
.use REDPIP.UUO;
.use INTACT.UUO;
.use DISMIS.UUO;
.endSec INTADRsys:

     
.sec Sleeping,Sleeping:
The HIBER and SLEEP UUOs do not affect the ability of a
process to continue receiving timer interrupts generated
by the {calliRef SETTIM} and {CalliRef INTASS}.
.use HIBER.UUO;
.use SLEEP.UUO;
.use WAKE.UUO;
.
.endSec Sleeping:

     
.sec APRENB/INTADR Interaction,APRENB!INTADR:
The APRENB and INTADR systems cannot both
be in effect at the same time.
Doing a RESET or an APRENB will turn on
the APRENB system;
doing an INTADR will turn on the INTADR system.

If an APRENB trap is enabled for arithmetic
or stack overflow,
it will "undo" (respectively)
a previous SETTR1 or SETTR2.
Similarly,
a SETTR1 or SETTR2 will "undo"
the enabling of an APRENB
arithmetic or stack overflow trap.

If a HIBER and an interrupt are enabled for the
same condition,
the interrupt will be taken and the HIBER
will be continued (the monitor will assume that
it is the sleep condition of the HIBER that
is being interrupted) rather than returning.
.endSec APRENB!INTADR:
.
.endSec SoftInt:
