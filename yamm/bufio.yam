.sec Buffered Mode I/O,BufIO:
Buffered-mode i/o involves the transfer of data
between i/o devices (or monitor buffers)
and a ring of buffers in the user's
address space.
Although P034 maintains the appearance of allowing
simultaneous transfer of data and user processing of that
data, this is true of only certain devices, notably
magnetic tape.  Disk device transfers are handled
synchronously: no user process runs while the monitor
transfers data to/from the user address space.

To perform buffered input (output),
a program must do the following:
.b!list
--Init a channel for the input (output),
specifying a buffered data mode
(ASCII, Katakana, Image, Image Binary,
or Binary)
and supplying the address of a three-word
input (output) buffer ring header.

--Set up a buffer ring and make the buffer ring header
point to it.
The program can allocate the buffers itself
and set the pointer;
it can execute an INBUF (OUTBUF)
to cause the monitor to allocate a specified
number of standard-sized buffers;
or it can do nothing,
in which case the first input (output)
operation
will do an INBUF (OUTBUF) allocating
a buffer-ring of N standard-sized buffers, where N is
standard for each device.

--If doing output,
execute an OUT or OUTPUT;
this causes the monitor to set up a byte pointer
and byte count in the output buffer ring header
through which the program can store its
first bufferful of data.

--If doing input,
execute an IN or INPUT;
this causes the monitor to obtain a bufferful
of data from the device
and to set up a byte pointer and byte count
in the input buffer ring header
through which the program can read its
first bufferful of data.

--Read data bytes from
(write data bytes to)
the buffer,
decrementing the byte count each time,
until the count becomes zero.
Then perform another IN or INPUT
(OUT or OUTPUT)
to get another buffer,
and repeat the process.

--When input (output) is complete,
release the channel.
.e!list
     
     
     
     
.sec Buffer Ring Headers,BufHdr:
.ind use bit;ind buffered I/O use bit;
The buffer ring header has the format
.b!ex
	word 0  bit 0	use bit
	word 0  rh	current buffer
	word 1		byte pointer
	word 2		byte count
.e!ex
The <use bit> is 1 if no i/o has yet been done
using this buffer ring.
It is set to 1 by the monitor
at channel-init time,
and cleared at the first i/o operation,
and should not be altered by programs.

The <current buffer> address is 0 if no buffer
ring has been set up;
otherwise,
it is the address of the second word
(word 1)
of the buffer currently being filled or emptied
by the program.
If the monitor finds the use bit 1
and the current buffer address 0
when attempting an i/o operation,
it will perform an INBUF (or OUTBUF)
setting up a ring of two standard-size buffers.

The <byte pointer> and <byte count> words
are stored into the header by the monitor
at the completion of an i/o operation.
The byte pointer is set to point
at the byte before the first byte of the
buffer
so that the program can do ILDBs or IDPBs,
and the byte count is set to the number of
words in the buffer
times the number of bytes per word
for the channel's data mode.

The byte size field of the byte pointer
is set by the monitor at channel-init time,
and should not be altered by the program.
.endSec BufHdr:
     
     
     
     
.sec Buffer Format,BufFmt:
.ind ring buffer;
.ind buffer ring;
Each buffer in a buffer ring has the format
.b!ex
	word 0  bits 18-35	file status bits
	word 1  bit 0		use bit
	word 1  bits 2-17	buffer size (words)
	word 1  bits 18-35	next buffer
	word 2  bits 0-17	checksum (if any)
	word 2  bits 18-35	word count
	word 3			data
	...
	word (<word count>+2)	data
	word (<word count>+3)	unused
	...
	word (<buffer size>-1)	unused
.e!ex
The <use bit> is 1 if the buffer is available
to the emptier,
and 0 if it is available to the filler.

The <buffer size> field contains the total size
of the buffer,
including the three header words (word 0 through word 2).

The <next buffer> address contains the address
of the second word
(word 1)
of the next buffer in the ring.

On binary mode card or paper tape input,
the <checksum> field contains the checksum
read at the start of the input record
and the <word count> field the word count read.
IO.DTE will be set if the monitor's computed
checksum differs from the read value,
and IO.BKT will be set if an unexpected
end-of-file occured (the count read was
too big for the physical medium)
or if the count read was greater than the buffer size.

On input from other devices
and other modes,
the <checksum> field is unused
and the <word count> contains
the number of words actually read from
the device.

On output, the <word count> originally
in the buffer is normally ignored,
and the number of words to output
is computed by the monitor
from the current value of the byte pointer
in the buffer ring header.
If, however,
the IO.UWC bit is set in the file status bits,
the monitor will use the <word count>
in the buffer instead.
.endSec BufFmt:
     
     
     
     
.sec Buffer Setup,BufSetup:
.ind setup; ind buffer setup;
.ind ring setup;
There are three ways to set up
a buffer ring:
entirely "by hand",
using INBUF or OUTBUF,
and letting the monitor allocate
the ring by default.
.
.sec User-Constructed Buffer Rings,UserRing:
.
.sec Reading Standard Buffer Size,BufSiz:
Each device has a standard buffer size
and a standard-sized buffer ring.
If a program is constructing its own
buffer ring
and wants to make it standard,
it can read the standard sizes by executing
the {CalliRef DEVSIZ}.
.endSec BufSiz:
.
.sec Initial Conditions,InitCond:
At the time of the first i/o operation
using a particular buffer ring,
the monitor expects to find
.b!list
--Each buffer's <use bit> set to 0.

--Each buffer's <buffer size> set correctly.

--Each buffer's <next buffer> address
pointing to the second word
(word 1)
of the next buffer in the ring.

--The <current buffer> address in the buffer's
buffer ring header pointing to
the second word
(word 1)
of one of the buffers in the ring.

--The <use bit> of the buffer ring header
set to 1.
.e!list
.endSec InitCond:
.
.endSec UserRing:
.
.sec Monitor-Constructed Buffer Rings,MonRing:
To cause the monitor to set up an
input or output buffer ring for a channel,
the program executes one of
{ChanioRef !CHIBF} or {UuoRef INBUF} to setup input buffers,
or one of
{ChanioRef !CHOBF} or {UuoRef OUTBUF} to setup output buffers.

Buffers may be moved once they have been setup (regardless
of who set them up) by performing the
{ChanioRef !CHMBF} or {CalliRef MOVBUF} to inform the monitor
of the change.
.endSec MonRing:
.
.use CHANIO.IBF;
.use CHANIO.MBF;
.use CHANIO.OBF;
.use DEVSIZ.UUO;
.use INBUF.UUO;
.use MOVBUF.UUO;
.use OUTBUF.UUO;
.
.endSec BufSetup:
     
     
     
     
.sec Buffered I/O Operations,BufIOOper:
.ind buffered input; ind buffered output;
.sec Buffered Input Calls,BufInCalls:
To cause the monitor to fill empty buffers in a buffer
ring, the caller uses one of {UuoRef IN},{ChanioRef !CHIN},
{UuoRef INPUT}, or {ChanioRef !CHIPT}:
.b!ex
	IN	channel, newbuf
	normal return
	  error return
.!sag
	MOVE	ac, [.CHIN,,channel]
	CHANIO	ac, newbuf
	normal return
	  error return
.!sag
	INPUT	channel, newbuf
	only return
.!sag
	MOVE	ac, [.CHIPT,,channel]
	CHANIO	ac, newbuf
	only return
.!sag
where <newbuf> is 0 normally and the address of the next buffer 
	if switching buffer rings
.e!ex
If <channel> is not initted,
.abort(|HT!IUC|);

If output is currently in progress for the device,
wait for it to complete.

If <newbuf> is nonzero,
wait for i/o to stop in the current input
ring,
then switch to the buffer ring containing
the buffer at <newbuf>.
If necessary, start filling that buffer,
and wait until it is full or
until an input error occurs.

If <newbuf> is zero,
start filling, if necessary,
the buffer following the current buffer in the input ring,
and wait until the input is complete
or an input error occurs.

Check the error bits (bits 18-22)
of the device's file status bits.
For IN and .CHIN,
skip-return if any are set and nonskip-return
if all are clear,
updating the input buffer ring header
to point to the buffer just filled.
For INPUT and .CHIPT,
cause an i/o-error software interrupt
if any are set,
and return in either case,
updating the input buffer ring header
to point to the buffer just filled.
.endSec BufInCalls:
.sec Buffered Output Calls,BufOutCalls:
To cause the monitor to free up a buffer
for output,
the program executes one of
{UuoRef OUT},{ChanioRef !CHOUT},{UuoRef OUTPUT}, or
{ChanioRef !CHOPT}.
.b!ex
	OUT	channel, newbuf
	normal return
	  error return
.!sag
	MOVE	ac, [.CHOUT,,channel]
	CHANIO	ac, newbuf
	normal return
	  error return
.!sag
	OUTPUT	channel, newbuf
	only return
.!sag
	MOVE	ac, [.CHOPT,,channel]
	CHANIO	ac, newbuf
	only return
.!sag
where <newbuf> is 0 normally and the address of the next buffer 
	if switching buffer rings
.e!ex
If <channel> is not initted,
.abort(|HT!IUC|);

If input is currently in progress on the device,
wait for it to finish.

If <newbuf> is nonzero,
wait for i/o to stop in the current buffer ring,
then switch to the buffer ring containing
the buffer at <newbuf>.
If necessary, start emptying that buffer,
and wait until the output is complete
or an output error occurs.

In <newbuf> is zero,
start emptying, if necessary,
the buffer following the current buffer in
the output ring,
and wait until the output is complete
or an output error occurs.

Check the error bits (bits 18-22)
of the device's file status bits.
For OUT and .CHOUT,
skip-return if any are set and nonskip-return
if all are clear,
updating the output buffer ring header
to point to the buffer just emptied.
For OUTPUT and .CHOPT,
cause an i/o-error software interrupt
if any are set,
and return in either case,
updating the output buffer ring header
to point to the buffer just emptied.
.endSec BufOutCalls:
.endSec BufIOOper:
     
     
     
.
.sec I/O synchronization,IOSynch:
(The information below is not applicable to every device;
in particular, DSK devices do not behave exactly as described
below).

For an input buffer ring,
the monitor begins filling buffers
whenever the program
does an input operation
and there are fewer than two full buffers
available,
and stops when it reaches a buffer
that the program has not yet emptied.
(Except that, for ports, the monitor
will not begin filling buffers
until an input operation has been executed
with no full buffers available).

For an output buffer ring,
the monitor begins emptying buffers
whenever the program
does an output operation
and the monitor finds no empty buffers available,
and stops when it reaches a buffer
that the program has not yet filled.

Setting the IO.SYN bit in the file status word
will cause the monitor to stop after
filling (on input)
or
emptying (on output)
one buffer,
thus keeping i/o exactly synchronized
with the program.
.endSec IOSynch:
.
.sec Buffered I/O Errors,BufErr:
(The information below is not applicable to every device;
in particular, DSK devices do not any longer mask off error
bits until the program reaches the buffer in which the
error occurred;  the monitor does not know which block
of 128 words within a page has suffered an error since
it deals with DSK devices strictly on a page basis).

Each time it finishes filling an input buffer
or emptying an output buffer,
the monitor stores the appropriate device's
file status bits into the right half of word 0
of that buffer.
If an i/o error occurs,
the monitor will store the status bits immediately,
and stop further i/o on the buffer ring.

The status-reading UUOs (GETSTS, STATZ, STATO),
and the error-return/normal-return mechanism
of the IN and OUT UUOs
read the current value of the device's
file status bits,
except that for disk and magtape input
the error bits are masked off if the program
has not yet reached the buffer affected by the error.

If the monitor has read ahead of the user
from a device other than disk or magtape,
the program may receive an error indication
before it actually reaches the bad data.
In such a case,
the program must check the status bits in each
buffer
if it wants to read all of the "good" data.
.endSec BufErr:
.endSec BufIO:
 