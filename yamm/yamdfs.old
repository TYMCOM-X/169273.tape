.TITLE AREA heading LINES Line1-4 TO Line1-2;
.AREA Text LINES Line1 TO LineN;
.TITLE AREA footing LINE LineN+3;
.PLACE Text;
.
.MACRO single space $( BREAK ; SPREAD _ 1 ; )$
.MACRO double space $( BREAK ; SPREAD _ 2 ; )$
.MACRO triple space $( BREAK ; SPREAD _ 3 ; )$
.
.!hf _ FALSE;
.!eh _ !oh _ !ef _ !of _ !sh _ NULL
.
.MACRO every heading ( L, C, R ) $(
.!eh _ !oh _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.MACRO every footing (L, C, R) $(
.!ef _ !of _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.MACRO even heading (L, C, R) $(
.!eh _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.MACRO odd heading (L, C, R) $(
.!oh _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.MACRO sub heading (T) $(
.!sh _ !hf _ "T" ;
.)$;
.
.MACRO even footing (L, C, R) $(
.!ef _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.MACRO odd footing (L, C, R) $(
.!of _ !hf _ (IF "C" = NULL THEN "LR" ELSE "L_CR") ;
.)$
.
.RECURSIVE MACRO standard titles $(
.   BEGIN
.	NOFILL;
.	TURN ON "_{";
.	INDENT 0,0;
.	IF EVEN PAGE
.	    THEN START		<< EVEN NUMBERED PAGES >>
.		PLACE HEADING;
.		!eh;
.		SKIP;
.		!sh;
.		PLACE FOOTING;
.		!ef;
.		END
.	    ELSE START		<< ODD NUMBERED PAGES >>
.		PLACE HEADING;
.		!oh;
.		SKIP;
.		!sh;
.		PLACE FOOTING;
.		!of;
.		END;
.	TURN OFF;
.   END
.)$
.
.MACRO NullPage $(
.BEGIN CENTER 
.   SKIP TO COLUMN 1;
.   SKIP TO HALF-2;
.   }##*##
.   }*###*
.   }##*##
.END
.)$;
.IF NOT DECLARATION(TwoSides) THEN TwoSides _ FALSE;
.MACRO EvenPage $(
.   IF TwoSides AND ODD PAGE THEN NullPage;
.)$;
.MACRO OddPage $(
.   IF TwoSides AND EVEN PAGE THEN NullPage;
.)$;
.
.BEFORE PAGE $( IF !hf THEN standard titles ;; )$
.
.RECURSIVE MACRO eval (EXPRESSION) $(EXPRESSION)$
.
.MACRO while (condition, action) $(
.REPEAT $(IF condition THEN START action END ELSE DONE)$
.)$
.
.MACRO until (condition, action) $(
.REPEAT $(ACTION ; IF CONDITION THEN DONE )$
.)$
.
.MACRO debug (HERALD)  $(
.IF DEBUGFLAG
.  THEN START "DEBUG"
.	  IF "HERALD" NEQ NULL THEN TTY _ "HERALD" ;
.	  PUB!DEBUG ;
.	END "DEBUG" ;
.)$
.
.MACRO bugoff $( DEBUGFLAG _ 0 ; )$
.
.underline _ "_"
.
.MACRO library (filename) $( REQUIRE "filename" SOURCE!FILE; )$;
.
.PICHAR "."('177 '0); PICHAR "G"('177 '11); PICHAR "g"('177 '11) ;
.PICHAR ""('177 '12); PICHAR ""('177 '13); PICHAR "-"('177 '14);
.PICHAR "+"('177 '15) ;
.
.TURN ON "{";
.APART;
.
.
.  << Special Macros mostly for use in defining the remaining ones
.     and defaults for spacing, tab handling, etc. >>
.
.MAXTEMPLATE _ 7500
.
.  << These two variables appear in many different routines.  >>
.
.setorigmargs _ needresetmargs _ FALSE;
.
.MACRO inf $()$
.
.RECURSIVE MACRO undefine (mac) $( MACRO mac $()$ )$
.
.MACRO skipc $( SKIP TO LINE 1 )$
.
.  << Standard fractions of the current area >>
.
.MACRO full $( (LINE+LINES) )$
.MACRO half $( full/2 )$
.MACRO third $( full/3 )$
.MACRO quarter $( full/4 )$
.
.Spaces _ "                                                          ";
.
.IF NOT DECLARATION( standardspacing ) THEN standardspacing _ 2;
.AT NULL $( IF NOT FILLING THEN SKIP )$
.CRSPACE;
.TABBREAK;
.INDENT 8;
.COMPACT;
.BREAK;
.SPREAD _ standardspacing;
.TURN ON "#{";
.TURN OFF "[]-";

.IF NOT DECLARATION(BugNote) THEN MACRO BugNote (A,B) $(;)$;

.odd heading (
.	|{DATE}|,
.	|{(IF LENGTH(SCnt!) THEN SCnt! ELSE NULL)}|,
.	|{SecName}|
.);
.even heading (
.	|{SecName}|,
.	|{(IF LENGTH(SCnt!) THEN SCnt! ELSE NULL)}|,
.	|YAMM second draft|
.);
.every footing (,|{(Page!)}|,);
.
.StandardSpacing _ 1;
.


.  << Underlining macros for the user>>
.
.MACRO underlinebetween (initial, terminator) $(
.   AT "initial" $(}{)$;
.   AT "terminator" $(}{)$;
.)$;
.
.  << For the diablo:  text between initial and terminator is over-
.     printed 4 times; otherwise does normal underline. >>
.
.MACRO emboldenbetween (initial, terminator) $(
.IF XCRIBL
.   THEN START
.	AT "initial" $(SNEAK "N")$;
.	AT "terminator" $(SNEAK "F")$;
.	END
.   ELSE START
.	AT "initial" $(}{)$;
.	AT "terminator" $(}{)$;
.	END
.)$;
.
.  << For the diablo:  text between initial and terminator is over-
.     printed 4 times AND underlined; otherwise does normal underline.>>
.
.MACRO underboldbetween (initial, terminator) $(
.IF XCRIBL
.   THEN START
.	AT "initial" $(SNEAK "N"}{)$;
.	AT "terminator" $(}{SNEAK "F")$;
.	END
.   ELSE START
.	AT "initial" $(}{)$;
.	AT "terminator" $(}{)$;
.	END
.)$;
.
.
.  << For the DIABLO this one will change to RED ribbon >>
.
.MACRO RedBetween (initial, terminator) $(
.IF XCRIBL
.   THEN START
.	AT "initial" $(SNEAK "B")$;
.	AT "terminator" $(SNEAK "A")$;
.	END
.   ELSE START
.	AT "initial" $(}{)$;
.	AT "terminator" $(}{)$;
.	END
.)$;

.  <<  This replaces the standard front macro; it avoids
.      the overhead of first storing it as a macro and then
.      immediately calling it for a one-time only use. >>
.
.sechead _ "Section";
.sshead _ "Subsection";
.
.IF NOT DECLARATION ( underlinehead ) THEN  underlinehead _ TRUE;
.IF NOT DECLARATION ( indexhead ) THEN  indexhead _ "Index";
.IF NOT DECLARATION ( contentshead )
.   THEN contentshead _ "Table of Contents";
.
.IF NOT DECLARATION ( sepsec ) THEN  sepsec _ 3;
.IF NOT DECLARATION ( sepss ) THEN  sepss _ 2;
.IF NOT DECLARATION ( sepsss ) THEN  sepsss _ 1;
.IF NOT DECLARATION ( sepssss ) THEN  sepssss _ 1;
.IF NOT DECLARATION ( sepSssss ) THEN  sepSssss _ 1;
.IF NOT DECLARATION ( sepSsssss ) THEN  sepSsssss _ 1;
.IF NOT DECLARATION ( secbottom ) THEN  secbottom _ 5;
.IF NOT DECLARATION ( TitleSkip ) THEN TitleSkip _ 2;
.
.IF NOT DECLARATION ( nocontents ) THEN  nocontents _ FALSE;
.
.secname _ ssname _ sssname _ ssssname _ sssssname _ ssssssname _ NULL
.
.IF NOT DECLARATION ( GroupTables ) THEN GroupTables _ FALSE;
.


.<<	Standard Front >>;
.
.COUNT SCnt PRINTING "1";
.COUNT Page IN SCnt PRINTING "!-1";
.COUNT SsCnt IN SCnt PRINTING "!.1";
.COUNT SssCnt IN SsCnt PRINTING "!.1";
.COUNT SsssCnt IN SssCnt PRINTING "!.1";
.COUNT SssssCnt IN SsssCnt PRINTING "!.1";
.COUNT SsssssCnt IN SssssCnt PRINTING "!.1";
.
.IF NOT DECLARATION(!SecRef) THEN !SecRef _ 0;
.IF NOT DECLARATION(!PageRef) THEN !PageRef _ NOT !SecRef;
.
.MACRO SecDef (label) $(
.   IF LENGTH("label") THEN START
.	BugNote ("SecDef ","label");
.	IF !PageRef THEN START
.	    ;;eval("label Page!");;
.	END ELSE START
.	    ;;eval("label "&SecLevel&"Cnt!");;
.	END;
.   END
.)$;
.
.SecLevel _ NULL;
.
.MACRO Sec (Name,Label) $(
.   SecLevel _ SecLevel & "S";
.   IF LENGTH(SecLevel) > 6 THEN Debug("Sec-overflow: label");
.   ;;eval(SecLevel[1 to 6]&" (|Name|,|Label|)");;
.   BEGIN "Label"
.)$;
.
.MACRO endSec (Label) $(
.   	DoTables;
.   END "Label";
.   if LENGTH(SecLevel)=0 THEN Debug("Sec-underflow: label");
.   SecLevel _ SecLevel[2 to inf];
.   if LENGTH(SecLevel)=0 THEN START ;;EndS;; END;
.)$;
.
.MACRO DoHead (name,label) $(
.   Depth _ LENGTH(SecLevel);
.   SecDef |label|;
.   !Page _ Page!;
.   Tmp _ eval(SecLevel&"Cnt!");
.   Tmp _ Tmp & spaces[LENGTH(Tmp) to Depth*3+2]
.
.   !Sec _ (IF Depth > 2 	<< handle main Table of Contents >>
.	THEN spaces[1 for Depth*3+3]
.	ELSE Tmp);
.   IF Depth = 1 THEN SEND Cont $(SKIP)$;
.   IF Depth LEQ CDepth THEN SEND Cont
.	$(BREAK}{!Sec}name####{!Page}{BREAK)$;
.
.   !Sec _ (IF Depth > 3 	<< handle local Table of Contents >>
.	THEN spaces[1 for Depth*3+3]
.	ELSE Tmp);
.   IF Depth = 2 THEN START SC!Send $(}<C>{SKIP)$ END;
.   IF Depth > 1 THEN START SC!Send
.	$(}<C>{!Sec}name####{!Page}{BREAK)$ END;
.
.   BRK _ null;
.   tmp _ SCAN (tmp_"name",":",null,"IS",brk);
.   IF brk NEQ ":" THEN ind! |name|;	<< handle index >>
.
.   !Sec _ eval(SecLevel&"Cnt!");	<< handle headings >>
.   IF Depth > 1 THEN BEGIN 
.	PREFACE 0;
.	INDENT 0,LENGTH(!Sec)+4;
.	TURN ON "{#";
.	}{!Sec}####name{
.	TURN OFF;
.   END CONTINUE;
.)$;


.<< SC!Def and SM!Def are used internally only, by Sec >>;
.MACRO SC!Def (name) $(
.	macro SC!Portion $(PORTION name)$
.	macro SC!Send $(HasSecCont _ TRUE; SEND name)$
.	macro SC!Insert $(INSERT name)$
.)$
.MACRO SM!Def (name) $(
.	macro SM!Portion $(PORTION name)$
.)$

.MACRO SC!send $(MACRO foo)$;	<<define to be a no-op>>

.MACRO S (name,label) $(
.   SecName _ "name";
.   SSName _ SSSName _ SSSSName _ SSSSSName _ SSSSSSName _ NULL;
.   SC!Def "C"&SCnt;
.   SM!Def "M"&SCnt;
.   HasSecCont _ FALSE;
.   SC!Insert;
.   SM!Portion;
.   COUNT Page IN SCnt PRINTING "!-1";
.   NEXT Page;
.   NEXT SCnt;
.   TTY_"Section "&SCnt!&": Name";
.   SkipC;
.   SKIP TitleSkip;
.   DoHead (|name|,|label|);
.   begin "SecBlk"
.	INDENT 0,LENGTH(SCnt!)+4;
.	TURN ON "{#";
.	CENTER
.	}{SecHead}#{SCnt!}
.	}name
.	SKIP 3;
.	TURN OFF;
.   end "SecBlk";
.   CONTINUE;
.)$ << end macro Sec >>;

.MACRO EndS $(
.   DoTables;
.   EvenPage;
.   begin "LocalContents"
.	COUNT Page IN SCnt PRINTING "!-i";
.	Page _ 0;
.	SC!Portion;
.	FILL;
.	NOJUST; 
.	SPREAD _ 1;
.	INDENT 0,16,0;
.	PREFACE 0;
.	RETAIN;
.	TURN ON "{\#_";
.	IF HasSecCont THEN START "SecCont"
.	    BEGIN "ContHdr"
.	        CENTER;
.	        }{SecHead}#{SCnt!}
.	        }{SecName}
.	        SKIP 1;
.	        }{ContentsHead}
.	        SKIP 3;
.	    END "ContHdr";
.	    Tmp _ NULL;
.	    AT "<" x ">" $(
.		IF "x"=Tmp
.		    THEN BREAK
.		    ELSE START
.			IF "x"="C" THEN START
.			    Sub Heading |SubSection|
.			    BREAK; 
.			    "SubSection";
.			    SKIP 1;
.			END;
.			IF "x"="T" THEN START
.			    Sub Heading |Table|
.			    SKIP 2;
.			    "Table";
.			    SKIP 1;
.			END;
.			Tmp _ "x";
.		    END;
.		)$;
.	    RECEIVE "<>";
.	END "SecCont";
.	!SH _ SecName _ NULL;
.	TURN OFF;
.	MACRO SC!send $(MACRO foo)$;
.	EvenPage;
.   end "LocalContents";
.)$ << end macro EndSec >>;



.MACRO Ss (name, label ) $(
.   SsName _ "name";
.   SssName _ SsssName _ SssssName _ SSSSSSName _ NULL;
.   NEXT SsCnt!;
.   IF LINES < (sepss+secbottom+SPREAD) THEN skipc;
.   IF sepss NEQ 0 THEN START SKIP sepss END;
.   DoHead |name|,|label|;
.)$ << end macro Ss >>;
.
.MACRO Sss (name, label ) $(
.   SssName _ "name";
.   SsssName _ SssssName _ SSSSSSName _ NULL;
.   NEXT SssCnt;
.   IF LINES < (SepSss+SecBottom+SPREAD) THEN SkipC;
.   IF SepSss NEQ 0 THEN START SKIP SepSss END;
.   DoHead |name|,|label|;
.)$ << end macro Sss >>;
.
.MACRO ssss (name, label ) $(
.   SsssName _ "name";
.   SssssName _ SSSSSSName _ NULL;
.   NEXT SsssCnt;
.   IF LINES < (SepSsss+SecBottom+SPREAD) THEN SkipC;
.   IF SepSsss NEQ 0 THEN START SKIP SepSsss END;
.   DoHead |name|,|label|;
.)$ << end macro Ssss >>;
.
.MACRO Sssss (name, label ) $(
.   SssssName _ "name";
.   SsssssName _ NULL;
.   NEXT SssssCnt;
.   IF LINES < (SepSssss+SecBottom+SPREAD) THEN SkipC;
.   IF SepSssss NEQ 0 THEN START SKIP SepSssss END;
.   DoHead |name|,|label|;
.)$ << end macro Sssss >>;
.
.MACRO Ssssss (name, label ) $(
.   SsssssName _ "name";
.   NEXT SsssssCnt;
.   IF LINES < (SepSsssss+SecBottom+SPREAD) THEN SkipC;
.   IF SepSsssss NEQ 0 THEN START SKIP SepSsssss END;
.   DoHead |name|,|label|;
.)$ << end macro Ssssss >>;
.


.<<	Stuff for Non-Sections (appendix, glossary, index, etc.) >>;
.
.FirstNonSec _ TRUE;

.MACRO NonSec (Title, label) $(
.   IF FirstNonSec THEN START
.	COUNT SCnt PRINTING "A";
.	COUNT SSCnt PRINTING $()$;	NEXT SSCnt!;
.	COUNT SSSCnt PRINTING $()$;	NEXT SSSCnt!;
.	COUNT SSSSCnt PRINTING $()$;	NEXT SSSSCnt!;
.	COUNT SssssCnt PRINTING $()$;	NEXT SssssCnt!;
.	COUNT SsssssCnt PRINTING $()$;	NEXT SsssssCnt!;
.	SEND Cont
.	    $(SKIP 2}Appendix{SKIP)$;
.	FirstNonSec _ FALSE;
.   END;
.   COUNT Page IN SCnt PRINTING "!-1";
.   Page _ Page! _ NULL;
.   SecName _ "title";
.   NEXT SCnt;
.   IF LENGTH("label") THEN START label SCnt!; END;
.   SkipC;
.   TURN ON "";
.   ONCE CENTER;
.	}title
.   TURN OFF;
.   SEND Cont
.	$(}5title####{SCnt!}-1{BREAK)$;
.)$ << end macro NonSec >>;
.


.<<	Macros for Glossary	>>;
.
.HasGlossary _ FALSE;
.
.AT "!<" words ":" definition ">" $(
.   HasGlossary _ TRUE;
.   wrds _ "words";
.   word _ SCAN (wrds,"+",,"IS");
.   SEND Glossary
.	$(}!<{word}:definition>{)$;
.   REPEAT $(
.	IF LENGTH(wrds)=0 THEN DONE;
.	word! _ SCAN(wrds,"+",,"IS");
.	SEND Glossary
.	    $(}!<{word!}:See {word}.>{)$;
.   )$;
.)$;
.
.<<	What this all means is that an entry like
.	!<PPN+Project Programmer Number:
.		The word [GAN,,UUN]>
.	Will produce the following in the Glossary:
.	PPN:   The word [GAN,,UUN].
.	Project Programmer Number:    See PPN.
.>>
.


.<<	Macros for Call Index	>>;
.
.HasUUOSym _ HasNamIndex _ HasNumIndex _ FALSE;
.
.MACRO CallDef (Op!,Ac!,E!,Fn!,OpName,FnName,Desc) $(
.START "CallDef"
.   Key _ (Op!+1000)[2 to 4]
.	& (Ac!+100)[2 to 3]
.	& (E!+500)
.	& (IF length("Fn!") THEN (Fn!+100) ELSE "000");
.   Cal _ "op code Op!";
.   IF (Op! = 47) and LENGTH("E!") THEN Cal _ "CALLI ac,E!";
.   IF (Op! = 51) and LENGTH("Ac!") THEN Cal _ "TTCALL Ac!,e";
.   IF LENGTH("Fn!") THEN Cal _ "   fn Fn!";
.   Nam _ (IF LENGTH("FnName") THEN "FnName" ELSE "OpName");
.   Pag _ Page!;
.
.<< Below handles the SENDs for the three indexes >>
.
.   HasNumIndex _ HasNamIndex _ TRUE;
.   SEND NumIndex $(}<{Key}>{Cal}\{Nam}\{Pag}\Desc{)$;
.   SEND NamIndex $(}<OpNameFnName>{Cal}\{Nam}\{Pag}\Desc{)$;
.   ;;eval("ind! |"&Nam&"|");;
.
.<< Below handles the SENDs for UUOSYM >>
.
.   HasUUOSym _ TRUE;
.   OpDef _ "[Op!{}_9" &
.   	(IF LENGTH("Ac!") THEN "+Ac!{}_5" ELSE NULL) & 
.	",,E!]";
.   IF ^"Desc"[1 to 10]="(OBSOLETE)"
.	THEN IF LENGTH("Fn!")=0 	<< obsolete definition >>
.	    THEN SEND UUOSym $(}<{Key}>;     OpName (15){OpDef}\;Desc{)$
.	    ELSE SEND UUOSym $(}<{Key}>;   FnName==(15)Fn!\;Desc{)$
.	ELSE IF LENGTH("Fn!")=0 	<< current definition >>
.	    THEN SEND UUOSym $(}<{Key}>OPDEF OpName (15){OpDef}\;Desc{)$
.	    ELSE SEND UUOSym $(}<{Key}>    FnName==(15)Fn!\;Desc{)$;
.
.END "CallDef"
.)$ <<end macro CallDef>>;
.
.MACRO ByteDef (Sym!,Val!,Desc!) $( 
.   HasUUOSym _ TRUE;
.   IF LENGTH("Val!") 
.	THEN IF LENGTH("Sym!")
.	    THEN SEND UUOSym $(}<ZZZ>    Sym!==(14)Val!\;Desc!{)$
.	    ELSE SEND UUOSym $(}<ZZZ>;   ==(14)Val!\;Desc!{)$
.	ELSE     SEND UUOSym $(}<ZZZ>;   Sym!==\;Desc!{)$;
.)$;
.
.MACRO Byte (Sym!,Val!,Desc!) $( 
.	BREAK;
.	ByteDef (|Sym!|,|Val!|,|Desc!|);
.	}Sym!\Val!\Desc!
.)$;
.MACRO !Byte (Sym!,Val!,Desc!) $(
.	CONTINUE;
.	ByteDef (|Sym!|,|Val!|,|Desc!|);
.	}Sym!\Val!\Desc!
.)$;
.
.MACRO ARdef (Oct,Nam,RWX,Lic,Desc) $(
.<<	TMP!_"MACRO nam $(}desc Rights (nam){)$";   >>;
.<<	TTY_TMP!;  >>;
.<<	;;eval(TMP!);;  >>;
.	BREAK;
.	ByteDef (|Nam|,|Oct|,|desc|);
.	}Oct\Nam\RWX\Lic\Desc
.)$;
.
.MACRO ByteHead (desc) $(
.   HasUUOSym _ TRUE;
.   SEND UUOSym $(!skip 2}<ZZZ>subttl desc{!skip 1)$;
.)$;
.
.MACRO Tit (Titl,Label,Pigy) $(
.   IF LENGTH("Pigy")=0
.	THEN SKIP SepSsssss;
.   SecDef (|Label|);
.   BEGIN NOFILL CONTINUE;
.	}{(Spaces[1 for LENGTH(SsssssCnt!)])}####Titl{
.   END;
.   IF LENGTH("Pigy")=0 THEN eval("begin ""Label"" ");
.)$;
.
.MACRO EndTit (Label) $(
.   END "Label";
.)$;
.


.<< The following system call macros cause new sections >>
.
.MACRO AuxcalDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF length("Pigy")
.	THEN "DoHead |Name: Desc (AUXCAL#fn#!Fn)|,Name:;"
.	ELSE "Sec |Name: Desc (AUXCAL#fn#!Fn)|,Name:;"));;
.   CallDef (42,,,!Fn,AUXCAL,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("aux!"&"Name"&": Tmp");;
.)$;
.MACRO AuxcalRef (label) $(
.   Tmp _ "aux!"&"label";
.   }label UUO (AUXCAL#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO FrmopDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF length("Pigy")
.	THEN "DoHead |Name: Desc (FRMOP#fn#!Fn)|,Name:;"
.	ELSE "Sec |Name: Desc (FRMOP#fn#!Fn)|,Name:;"));;
.   CallDef (44,,,!Fn,FRMOP,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("fo!"&"Name"&": Tmp");;
.)$;
.MACRO FrmopRef (label) $(
.   Tmp _ "fo!"&"label";
.   }label UUO (FRMOP#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO ChanioDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF length("Pigy")
.	THEN "DoHead |Name: Desc (CHANIO#fn#!Fn)|,Name:;"
.	ELSE "Sec |Name: Desc (CHANIO#fn#!Fn)|,Name:;"));;
.   CallDef (43,,,!Fn,CHANIO,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("chn!"&"Name"&": Tmp");;
.)$;
.MACRO ChanioRef (label) $(
.   Tmp _ "chn!"&"label";
.   }label UUO (CHANIO#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO TtcallDef (Ac,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.	THEN "DoHead |Name: Desc (TTCALL#Ac)|,Name:;"
.	ELSE "Sec |Name: Desc (TTCALL#Ac)|,Name:;"));;
.   CallDef (51,Ac,,,Name,,|Desc|);
.   Tmp _ "Ac";
.   ;;eval("tt!"&"Name"&": Tmp");;
.)$;
.MACRO TtcallRef (label) $(
.   Tmp _ "tt!"&"label";
.   }label UUO (TTCALL#{[3]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO CalliDef (E,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.	THEN "DoHead |Name: Desc (CALLI#E)|,Name:;"
.	ELSE "Sec |Name: Desc (CALLI#E)|,Name:;"));;
.   CallDef (47,,E,,Name,,|Desc|);
.   Tmp _ "E";
.   ;;eval("cal!"&"Name"&": Tmp");;
.)$;
.MACRO CalliRef (label) $(
.   Tmp _ "cal!"&"label";
.   }label UUO (CALLI#{[4]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO UuoDef (!Op,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.	THEN "DoHead |Name: Desc (op#code#!Op)|,Name:;"
.	ELSE "Sec |Name: Desc (op#code#!Op)|,Name:;"));;
.   CallDef (!Op,,,,Name,,|Desc|);
.   Tmp _ "!Op";
.   ;;eval("uuo!"&"Name"&": Tmp");;
.)$;
.MACRO UuoRef (label) $(
.   Tmp _ "uuo!"&"label";
.   }label UUO (op#code#{[3]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO TmpcorDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.	THEN "DoHead |Name: Desc (TMPCOR#fn#!Fn)|,Name:;"
.	ELSE "Sec |Name: Desc (TMPCOR#fn#!Fn)|,Name:;"));;
.   CallDef (47,,44,!Fn,TMPCOR,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("tmp!"&"Name"&": Tmp");;
.)$;
.MACRO TmpcorRef (label) $(
.   Tmp _ "tmp!bel";
.   }label UUO (TMPCOR#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO WsctlDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.	THEN "DoHead |Name: Desc (WSCTL#fn#!Fn)|,Name:;"
.	ELSE "Sec |Name: Desc (WSCTL#fn#!Fn)|,Name:;"));;
.   CallDef (47,,-74,!Fn,WSCTL,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("wsc!"&"Name"&": Tmp");;
.)$;
.MACRO WsctlRef (label) $(
.   Tmp _ "wsc!"&"label";
.   }label UUO (WSCTL#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO SetuuoDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.   	THEN "DoHead |Name: Desc (SETUUO#fn#!Fn)|,Name:;"
.   	ELSE "Sec |Name: Desc (SETUUO#fn#!Fn)|,Name:;"));;
.   CallDef (47,,75,!Fn,SETUUO,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("set!"&"Name"&": Tmp");;
.)$;
.MACRO SetuuoRef (label) $(
.   Tmp _ "set!"&"label";
.   }label UUO (SETUUO#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO XchargDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.   	THEN "DoHead |Name: Desc (XCHARG#fn#!Fn)|,Name:;"
.   	ELSE "Sec |Name: Desc (XCHARG#fn#!Fn)|,Name:;"));;
.   CallDef (47,,-60,!Fn,Xcharg,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("xc!"&"Name"&": Tmp");;
.)$;
.MACRO XchargRef (label) $(
.   Tmp _ "xc!"&"label";
.   }label UUO (XCHARG#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.
.MACRO RefbitDef (!Fn,Name,Desc,Pigy) $(
.   ;;eval((IF LENGTH("Pigy")
.   	THEN "DoHead |Name: Desc (Refbit#fn#!Fn)|,Name:;"
.   	ELSE "Sec |Name: Desc (Refbit#fn#!Fn)|,Name:;"));;
.   CallDef (47,,-73,!Fn,Refbit,Name,|Desc|);
.   Tmp _ "!Fn";
.   ;;eval("rf!"&"Name"&": Tmp");;
.)$;
.MACRO RefbitRef (label) $(
.   Tmp _ "rf!"&"label";
.   }label UUO (Refbit#fn#{[2]eval(Tmp)}, see#{SecRef label}){
.   ind label;
.)$;
.

.<<	Index stuff for main token index >>;
.
.AT "%<" phrase ">" $(
.	UsingIndex _ TRUE;
.	"phrase";
.	SEND Indx
.	    $(}<{Page!}=phrase={)$;
.)$;
.
.MACRO Ind (X) $(
.START "Ind"
.   UsingIndex _ TRUE;
.   SEND Indx
.   	$(}<{Page!}=X={)$;
.END "Ind"
.)$;
.
.MACRO Ind! (X) $(
.START "Ind!"
.   UsingIndex _ TRUE;
.   SEND Indx
.   	$(}<{Page!}#=X={)$;
.END "Ind!"
.)$;
.
.MACRO BeginInd $(
.   IND
.)$;
.
.MACRO EndInd (X) $(
.START "EndInd"
.   UsingIndex _ TRUE;
.   TURN ON "{";
.   SEND Indx
.   	$(}<{Page!}=X={)$;
.   TURN OFF;
.END "EndInd"
.)$;
.


.<<	Macros and defaults for appendices. >>
.
.FirstApp _ TRUE;
.
.IF NOT DECLARATION ( apphead ) THEN  apphead _ "Appendix";
.IF NOT DECLARATION ( appprint ) THEN  appprint _ "A";
.IF NOT DECLARATION ( appfigprint ) THEN  appfigprint _ "A";
.IF NOT DECLARATION ( apptabprint ) THEN  apptabprint _ "A";
.IF NOT DECLARATION ( appskip ) THEN  appskip _ 3;
.IF NOT DECLARATION ( sepapp ) THEN  sepapp _ 3;
.IF NOT DECLARATION ( appbottom ) THEN  appbottom _ 7;
.
.COUNT appcnt PRINTING appprint;
.
.MACRO appendix (name, label) $(
.   DoTables;
.   SecName _ "name";
.   SsName _ SssName _ SsssName _ SsssssName _ NULL;
.   NonSec name;
.   NEXT appcnt!;
.   IF LENGTH("label") THEN START label SCnt!; END;
.   SKIP appskip;
.)$ << end macro Appendix >>;
.
.MACRO AppRef (lbl) $( }{apphead} {SCnt! lbl)$;
.
.  << Macros for portions, section headings, page labels, and counter. >>
.
.acknowledging _ abstracting _ usingindex _ FALSE ;
.
.MACRO abstract $( abstracting _ TRUE; SEND abst )$
.
. << Both spellings used since people find it hard to keep straight which
.    one is used for the macro name.  >>
.
.MACRO acknowledgements $( acknowledging _ TRUE; SEND acks )$
.
.MACRO acknowledgments $( acknowledging _ TRUE; SEND acks )$
.
.MACRO titlepage $( SEND titl )$
.
.IF !PageRef THEN START
.	MACRO SecRef (lbl) $( Page! lbl;
.		BugNote ("SecRef ",lbl) )$
.   END
.ELSE START
.	MACRO SecRef (lbl) $( SsssssCnt! lbl;
.		BugNote ("SecRef ",lbl) )$
.   END;
.
.MACRO subsecname $(
.ssecname _ secname;
.IF ssname NEQ NULL THEN ssecname _ ssname;
.IF sssname NEQ NULL THEN ssecname _ sssname;
.IF ssssname NEQ NULL THEN ssecname _ ssssname;
.IF Sssssname NEQ NULL THEN ssecname _ Sssssname;
.IF Ssssssname NEQ NULL THEN ssecname _ Ssssssname;
.ssecname ;
.)$
.
.  << Macros for controlling basic text formatting. >>
.
.MACRO blankline $(
.TABSPACE;
.AT NULL $( IF FILLING THEN BREAK ELSE SKIP )$
.)$
.
.MACRO autogroup $(
.AT NULL $( IF FILLING THEN START APART; BREAK; GROUP END ELSE SKIP )$;
.)$;
.
.MACRO ByHand $(
.BEGIN "ByHand"
.  NOFILL
.  NOJUST
.  INDENT 0
.  SPREAD _ 1;
.)$
.
.MACRO EndHand $(
.END "ByHand"
.CONTINUE
.)$
.
.IF NOT DECLARATION ( crownspacing ) THEN  crownspacing _ 1;
.
.MACRO crown (X,Y,Z) $(
.BEGIN "crown"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	    origind _ INDENT1;
.	  END;
.  BREAK;
.  IF "X" NEQ NULL THEN CInd1 _ X ELSE CInd1 _ 0;
.  IF "Y" NEQ NULL THEN CInd2 _ Y ELSE CInd2 _ 8;
.  IF "Z" NEQ NULL THEN CInd3 _ Z ELSE CInd3 _ 0;
.  INDENT CInd1, CInd2, CInd3;
.  SPREAD _ crownspacing;
.)$
.
.MACRO endcrown $(
.END "crown"
.CONTINUE
.)$
.
.IF NOT DECLARATION ( quotespacing ) THEN  quotespacing _ 1;
.
.MACRO quote (q1, q2, q3 ) $(
.BEGIN "quote"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origind _ INDENT1;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	  END;
.  IF "q1" NEQ NULL THEN INDENT q1 ELSE INDENT -8;
.  NARROW (IF "q2" = NULL THEN 8 ELSE q2),(IF "q3" = NULL THEN 0 ELSE q3);
.  SPREAD _ quotespacing;
.)$
.
.MACRO endquote $(
.END "quote"
.CONTINUE
.)$
.
.!spaces _ "#####################################################################" ;
.!hyphens _ "--------------------------------------------------------------" ;
.
.MACRO fraction (num, den) $(
.TURN ON "{^[]&#" ;
.N _ "num" ;
.D _ "den" ;
.ln _ LENGTH(N) ;
.ld _ LENGTH(D) ;
.IF ln > ld
.  THEN START D _ !spaces[1 TO (ln-ld) DIV 2] & D ; lmax _ ln ; END ;
.  ELSE START N _ !spaces[1 TO (ld-ln) DIV 2] & N ; lmax _ ld ; END ;
.}^[{N}]&[{D}]&[{(!hyphens[1 TO lmax])}]
.TURN OFF ;
.)$







.  << List macros.  >>
.
.IF NOT DECLARATION ( listspacing ) THEN  listspacing _ 1;
.
.MACRO List (Inden, LeftMarg, RightMarg, PrintForm) $(
.BEGIN "list"
.  IF NOT setorigmargs
.    THEN START
.	    setorigmargs _ TRUE;
.	    origind _ INDENT1;
.	    origlmarg _ lmarg;
.	    origrmarg _ rmarg;
.	  END;
.  lindent1 _ INDENT1;
.  lindent2 _ INDENT2;
.  IF "leftmarg" = NULL THEN lmar _ 8 ELSE lmar _ leftmarg;
.  IF "rightmarg" = NULL THEN rmar _ 8 ELSE rmar _ rightmarg;
.  BREAK
.  SPREAD _ listspacing
.  NARROW lmar,rmar
.  INDENT2 _ 0;
.  FILL
.  IF "inden" = NULL THEN INDENT1 _ 4 ELSE INDENT1 _ inden;
.  IF "printform" = NULL
.    THEN START COUNT lists FROM 1 TO 100 PRINTING "1)"; END
.    ELSE START COUNT lists FROM 1 TO 100 PRINTING "printform"; END
.)$;
.
.MACRO item $(
.NEXT lists
{lists!}##{
.)$
.
.MACRO endlist $(
.  INDENT Lindent1, LIndent2
.END "list"
.CONTINUE
.)$
.


.  << Settings for tables and figures.  >>
.
.IF NOT DECLARATION ( gottab ) THEN  gottab _ FALSE;
.IF NOT DECLARATION ( tabname ) THEN  tabname _ "Table";
.IF NOT DECLARATION ( tablisthead ) THEN  tablisthead _ "List of Tables";
.
.
.MACRO standard back $( LIBRARY |YAMBAK.DFS| ; )$
.
.IF NOT DECLARATION(titleing) THEN titleing _ TRUE;
.IF titleing THEN START INSERT titl END;
.INSERT cont;
.INSERT tble;
.
.MACRO table (!title,!size,!tabs1,!tabs2,!lbl) $(
.BEGIN "table"
.   IF LINES < !size THEN SKIP TO COLUMN 1;
.   IF LINE THEN GROUP;
.   Tmp _ (IF LENGTH("!lbl") THEN "!lbl." ELSE UseFile);
.   T1 _ SCAN(Tmp,".",NULL,"IS");
.   eval("tab!"&T1&":") NEXT TabCnt!;
.   gottab _ TRUE;
.   IF AdjustTab THEN ADJUST ELSE NOJUST;
.   BEGIN "TabHdr"
.	TURN ON "{#\";
.	SEND tble $(
.	    }${SecName}${TabCnt!}(5)!title####{Page!}{BREAK)$;
.	SC!Send $(
.	    }<T>{TabCnt!}(5)!title####{Page!}{BREAK)$;
.	ind |!title|;
.	CENTER;
.	SKIP 2;
.	}{tabname}#{TabCnt!}
.	}!title
.	SKIP 2;
.	TURN OFF;
.   END "TabHdr";
.   Tmp _ "!tabs1";
.   REPEAT $( IF LENGTH(Tmp)=0 THEN DONE;
.   	T1 _ SCAN(Tmp,",",NULL,"IS") )$;
.   Tmp _ "!tabs1";
.   IF LENGTH("!tabs2") THEN Tmp _ Tmp & ",!tabs2";
.   Crown (0,T1-1,0);
.	eval("TABS "&Tmp);
.	PREFACE 0;
.	RETAIN;
.	AT "--" $( CONTINUE )$;
.	AT "==" $( BREAK )$;
.)$;
.
.MACRO endTable $(
.   endCrown;
.   !sh _ NULL;			<< cancel sub headings (if any) >>
.   SKIP 1;
.END "table"
.)$;
.
.MACRO TabHead (T) $(
.   Sub Heading |T|;
.   }T
.)$;
.
.<< TABREF is called by the user to refer to a table >>
.
.TabQueue _ NULL;
.
.MACRO TabRef ( label ) $(
.START
.   BugNote |TabRef label|;
.   Tmp _ "tab!"&"label";
.   }{TabName}#{eval("TabCnt! "&Tmp)}{
.END
.)$
.
.  << UseTab is called when a table is required...if the table is
.	already declared, then the call is ignored >>
.
.MACRO QueueTab (TabName) $(
.   Queue (TabQueue, "TabName")
.)$;
.
.<< QUEUE macros: use strings as queues >>
.
.MACRO Queue! (Q, ITEM, size) $(
.Q _ Q & (IF size = NULL
.	    THEN "ITEM"
.	    ELSE "           "[1 TO size-LENGTH("ITEM")] & "ITEM")
.)$
.
.MACRO Unqueue! (Q, itemvar, size) $(
.START 
.   itemvar _ Q[1 TO size];
.   Q _ Q[size+1 TO inf];
.END
.)$
.
.MACRO Queue (Q, ITEM) $(
.START
.   len _ LENGTH("ITEM");
.   Queue! (Q, len, 3);
.   Queue! (Q, "ITEM", len) ;
.END
.)$
.
.MACRO Unqueue (Q, itemvar) $(
.START 
.   Unqueue! (Q, len, 3);
.   Unqueue! (Q, itemvar, len);
.END
.)$
.
.<< DoTables will empty the table queue right now! >>
.
.MACRO DoTables $(
.   REPEAT $(
.	IF LENGTH(TabQueue)=0 THEN DONE;
.	Unqueue (TabQueue,Tmp);
.	IF NOT eval("DECLARATION(tab!"&Tmp&")") THEN START
.	    UseFile _ Tmp & ".TAB";
.	    require UseFile source!file;
.	END;
.   )$
.)$;
.
.PORTION main;

J2 