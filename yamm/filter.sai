begin "FILTER - program to extract files from PUB output"

require 2 version;
require "(WRS)SAIL.DEF" source!file;

!	
This program will examine the first non-blank character of each line in 
the PUB output file and perform the following actions:
	^B	copy rest of line to DSK:UUOSYM.MAC
It will interpret the code copied into UUOSYM.MAC and attempt to 
translate into various other languages.  The output files generated 
follow the following naming conventions:
	UUOSYM.xxx		! definitions with comments
	UUODEF.xxx		! definitions without comments (fast)
where xxx is the standard extension for the language.
;

simple string procedure ocSAI (integer I);
! convert from integer to SAIL octal constant;
if I < 0 
    then return("-'"&cvos(-I))
    else return("'"&cvos(I));

simple string procedure ocBLI (integer I);
! convert from integer to BLISS octal constant;
if I < 0 
    then return("-#"&cvos(-I))
    else return("#"&cvos(I));

simple string procedure ocMAC (integer I);
! convert from integer to MACRO octal constant;
if I < 0 
    then return("-"&cvos(-I))
    else return(cvos(I));

simple string procedure idSAI (string MID);
! convert from macro identifier to SAIL identifier;
begin	"idSAIL"
    integer C; string SID;
    SID _ null;
    while length(MID) do case C_lop(MID) of begin
	["."] SID_SID& "!";
	["%"] SID_SID& "#";
	["$"] SID_SID& "$";
	else SID_SID& C end;
    return (SID);
end	"idSAIL";

simple integer procedure !o (string S);
! convert from MACRO octal constant to integer;
case S of begin
    ["+"] return (cvo(S[2 to inf]));
    ["-"] return (-cvo(S[2 to inf]));
    else return (cvo(S))
end;

integer procedure Index (
	string	SRC;		! the source string;
	string	TAR );		! the target string;
begin	"INDEX"
    integer SL,T1;
    SL _ length(SRC); T1 _ lop(TAR);
    while length(SRC) > length(TAR) do 
	if lop(SRC)=T1 and equ(SRC[1 for length(TAR)],TAR)
	    then return(SL-length(SRC));
    return (0);
end;

string procedure Bracket (
	string	S;
	string	L;
	string	R );
begin	"BRACKET"
    integer LI,RI;
    LI _ index (S,L);
    if LI=0 then return(null);
    S _ S[LI+length(L) to inf];
    RI _ index (S,R);
    if RI=0 then return(null);
    S _ S[1 to RI-1];
    while RI _ index(S," ") do S _ S[1 to RI-1] & S[RI+1 to inf];
    return (S);
end	"BRACKET";

integer	SemBrk,SemIgn,LinBrk,CtrlBBrk;	! break table id's;
define 	stNULL=0,
	stTITLE=1,
	stSUBTTL=2,
	stOPDEF=3,
	stEXTDEF=4,
	stEQU=5,
	stERR=6;

integer procedure Trans (
	string MAC;		! the macro code;
	reference string TXT;	! the non-comment portion;
	reference string ID;	! the identifier being defined;
	reference integer OP;	! the OP code field;
	reference integer AC;	! the AC field;
	reference integer E;	! the E field;
	reference integer V1;	! the byte value;
	reference integer V2;	! the bit # of rightmost bit of V1;
	reference string COM );	! text following semi (semis removed);
! this procedure will return a value which denotes the type of statement
  encountered:
	stNULL		TXT,COM is defined
	stTITLE		TXT,ID,COM 
	stSUBTTL	TXT,ID,COM
	stOPDEF		TXT,ID,OP,COM
	stEXTDEF	TXT,ID,OP,AC,E,COM
	stEQU		TXT,ID,V1,V2,COM
	stERR		COM
;
begin	"TRANS"
    integer Brk;
    TXT _ scan (MAC,SemBrk,BRK);
    COM _ scan (MAC,SemIgn,BRK);
    while TXT=" " do BRK_lop(TXT);
    if length(TXT)=0 then return(stNULL);
    if equ(TXT[1 to 5],"TITLE") then begin "TITLE"
	ID _ TXT[6 to inf];
	while ID=" " do BRK_lop(ID);
	return(stTITLE);
    end "TITLE";
    if equ(TXT[1 to 6],"SUBTTL") then begin "SUBTTL"
	ID _ TXT[7 to inf];
	while ID=" " do BRK_lop(ID);
	return(stSUBTTL);
    end "SUBTTL";
    if equ(TXT[1 to 5],"OPDEF") then begin "OPDEF/EXTDEF"
	string S1,S2;
	ID _ bracket(TXT,"OPDEF","[");
	OP _ !o(bracket(TXT,"[","B8"));
	AC _ !o(S1_bracket(TXT,"B8",","));
	if length(S2_bracket(TXT,"<",">"))
	    then E _ !o(S2)
	    else E _ !o(S2_( if length(S1)
		then bracket(TXT,",","]")
		else bracket(TXT,"B8","]") ));
	if length(S1) or length(S2)
	    then return(stEXTDEF) 
	    else return(stOPDEF);
    end "OPDEF/EXTDEF";
    if index(TXT,"==") then begin "EQU"
	integer BI;
	string VAL;
	ID _ bracket("|"&TXT,"|","==");
	VAL _ bracket(TXT&"|","==","|");
	BI _ index(Val,"B");
	if BI then begin "shifted"
	    V1 _ !o(Val[1 to BI-1]);
	    V2 _ cvd(Val[BI+1 to inf]);
	end "shifted" else begin "unshifted"
	    V1 _ !o(Val);
	    V2 _ 35;
	end "unshifted";
	return(stEQU);
    end "EQU";
    print (crlf, "?unrecognized statement: ",TXT,";",com);
    return(stERR);
end	"TRANS";
	
define	LDef (ext) = {
    integer ext}&{SYM,ext}&{DEF;
    redefine OpenFiles = cvms(OpenFiles) & {
    	open(}&cvps(ext)&{SYM_getchan,"DSK",1,0,2, 0,0,EOF);
	if EOF then usererr(rh(EOF),2,"?cannot open DSK: ","X");
	enter(}&cvps(ext)&{SYM,"UUOSYM.}&cvps(ext)&{",EOF);
	if EOF then usererr(rh(EOF),2,"?cannot enter DSK:UUOSYM.}&cvps(ext)&{ ","X");
    	open(}&cvps(ext)&{DEF_getchan,"DSK",1,0,2, 0,0,EOF);
	if EOF then usererr(rh(EOF),2,"?cannot open DSK: ","X");
	enter(}&cvps(ext)&{DEF,"UUODEF.}&cvps(ext)&{",EOF);
	if EOF then usererr(rh(EOF),2,"?cannot enter DSK:UUODEF.}&cvps(ext)&{ ","X");
    };
    redefine CloseFiles = cvms(CloseFiles) & {
	close(}&cvps(ext)&{SYM); release(}&cvps(ext)&{SYM);
	close(}&cvps(ext)&{DEF); release(}&cvps(ext)&{DEF);
	print(crlf,"  UUOSYM.}&cvps(ext)&{, UUODEF.}&cvps(ext)&{");
    };
};  
define	OpenFiles = null;
define	CloseFiles = {print(crlf,"Files created:");};

string	FN;			! file name of source file;
string	S;			! string from source;
string	TXT;			! non-comment text;
string	COM;			! comment text;
integer	EOF,BRK,ICH;		! channel, i/o variables;
integer LineCnt; 		! selected line counter;
define BlipMsk = '77; 		! blip every 64 lines;

LDef (BLI);			! define stuff for BLISS;
LDef (MAC);			! define stuff for MACRO;
LDef (SAI);			! define stuff for SAIL;
    
setbreak (LinBrk_1,lf,cr,"FINS");
setbreak (SemBrk_2,";",null,"KINS");
setbreak (SemIgn_3,null,";","FINS");
setbreak (CtrlBBrk_4,'2&'3&lf&ff," ","FINS");

ttyup(true);
open(ICH _ getchan,"DSK",bit(23)+0,5,0, 256,BRK,EOF);

ttyup(true);
print("Input file [YAMM.DOC]: ");
FN _ inchwl;
if length(FN)=0 then FN _ "YAMM.DOC";
lookup(ICH,FN,EOF);
if EOF then begin
    lookup(ICH,FN&".DOC",EOF);
    if not EOF then FN_FN & ".DOC";
end;
if EOF then usererr(EOF,2,"?file "& FN &" not found: ","S");

OpenFiles;

!	translate !
;
LineCnt _ 0;
print (FN);
cprint(SAISYM, "define",crlf);
while not EOF do begin "MAIN"
    string S,TXT,ID,COM; integer OP,AC,E,V1,V2;
    if length(input(ICH,CtrlBBrk))=0 then case BRK of begin "FlagCheck" 
    [2] begin "CopyLine"
	S _ input(ICH,LinBrk);
	if (LineCnt _ LineCnt + 1) land BlipMsk = 0 
	    then print (" ",LineCnt);
	case TRANS(S,TXT,ID,OP,AC,E,V1,V2,COM) of begin "st"
	[stNULL] [stERR] begin "NULL"
	    cprint(BLIDEF, crlf);
	    cprint(MACDEF, crlf);
	    cprint(SAIDEF, crlf);
	end "NULL";
	[stTITLE] begin "TITLE"
	    cprint(BLIDEF, "module ",ID,"= !",COM,crlf,"begin",crlf);
	    cprint(BLISYM, "module ",ID,"=",crlf,"begin",crlf);
	    cprint(MACDEF, "universal UUOSYM",crlf,
			   "subttl",ht,ID," ",COM,crlf);
	    cprint(MACSYM, "universal UUOSYM",crlf,
			   "subttl",ht,ID,crlf,crlf);
	    cprint(SAIDEF, "comment ",ID," ",COM,";"&crlf);
	    cprint(SAISYM, "comment ",ID,";"&crlf);
	end "TITLE";
	[stSUBTTL] begin "SUBTTL"
	    cprint(BLIDEF, "%%%  ",ID," ",COM," %%%"&crlf);
	    cprint(MACDEF, "subttl",ht,ID," ",COM,crlf);
	    cprint(SAIDEF, "comment  ",ID," ",COM,";"&crlf);
	end "SUBTTL";
	[stOPDEF] begin "OPDEF"
	    cprint(MACDEF, "OPDEF"&ht,ID,ht&"[",ocMAC(OP),"B8]"&ht&";",COM,crlf);
	    cprint(MACSYM, "OPDEF ",ID," [",ocMAC(OP),"B8]",crlf);
	    cprint(SAIDEF, "define uuo!",ID,"=",ocSAI(OP)," lsh 27;",
		"  comment ",COM,";"&crlf);
	    cprint(SAISYM, "uuo!",ID,"=",ocSAI(OP)," lsh 27,",crlf);
	end "OPDEF";
	[stEXTDEF] begin "EXTDEF"
	    cprint(MACDEF, "OPDEF"&ht,ID,ht&"[",ocMAC(OP),"B8 ",
		ocMAC(AC),",",ocMAC(E),"]"&ht&";",COM,crlf);
	    cprint(MACSYM, "OPDEF ",ID," [",ocMAC(OP),"B8 ",
		ocMAC(AC),",",ocMAC(E),"]",crlf);
	    cprint(SAIDEF, "define uuo!",ID,"=",ocSAI(
		(OP lsh 27)+(AC lsh 23)+(E land '777777) ),
		";  comment ",COM,";"&crlf );
	    cprint(SAISYM, "uuo!",ID,"=",ocSAI(
		(OP lsh 27)+(AC lsh 23)+(E land '777777) ),","&crlf);
	    case OP of begin
		['047] begin "CALLI"
		    cprint(SAIDEF, "define calli!",ID,"=",ocSAI(E),
			";  comment ",COM,";"&crlf);
		    cprint(SAISYM, "calli!",ID,"=",ocSAI(E),","&crlf);
		end "CALLI";
		['051] begin "TTCALL"
		    cprint(SAIDEF, "define ttcall!",ID,"=",ocSAI(AC),
			";  comment ",COM,";"&crlf);
		    cprint(SAISYM, "ttcall!",ID,"=",ocSAI(AC),","&crlf);
		end "TTCALL";
	    else end;
	end "EXTDEF";
	[stEQU] begin "EQU"
	    cprint(BLIDEF, "bind ?",ID,"=",ocBLI(V1),";    ! ",COM,crlf);
	    cprint(BLISYM, "bind ?",ID,"=",ocBLI(V1),";",crlf);
	    cprint(MACDEF, S,crlf);
	    cprint(MACSYM, TXT,crlf);
	    cprint(SAIDEF, "define ",idSAI(ID),"=", ocSAI(V1),
		(if V2=35 then null else " lsh "&cvs(35-V2)),
		"; comment ",COM,";",crlf);
	    cprint(SAISYM, idSAI(ID),"=",
		ocSAI(V1 lsh (35-V2)),",",crlf);
	end "EQU";
	else usererr(0,1,"?fatal program error") end "st";
    end "CopyLine";
    [3] done "MAIN";
    else end "FlagCheck";
end "MAIN";

cprint(BLIDEF, crlf&crlf&"end;"&crlf);
cprint(BLISYM, "end;"&crlf);
cprint(MACDEF, crlf&crlf&"UUOSYM==1"&crlf&"end"&crlf);
cprint(MACSYM, crlf&crlf&"UUODEF==1"&crlf&"end"&crlf);
cprint(SAIDEF, crlf&"define UUOSYM=true;"&crlf);
cprint(SAISYM, "UUODEF=true;"&crlf);

CloseFiles;

end $

 