.procedure !pin (CMD,num,nam,desc,WAT,BKA,IMG) $(
.eval((IF CMD
.       THEN ";ttcallDef (num,nam,|desc|);"
.       ELSE ";auxcalDef (num,nam,|desc|);"));
.b!ex
.if CMD then start
        nam     addr
.end else start
        MOVE    ac, [port,,nam]
        AUXCAL  ac, addr
.end
.if CMD then start
.       if WAT then start
        only return
.       end else start
        no-data return
        success return
.       end
.end else start
.       if WAT then start
          error return
        normal return
.       end else start
        error/no-data return
        success return
.       end
.!axport
.end
.e!ex
.if not CMD then start
.!axstart

.if IMG then start
Place the port in image state.
.end
If
.end else start
If the frame is detached, or if
.end
there are no
.if not BKA then start
break
.end
characters in the port's input buffer,
.if WAT then start
cause an i/o wait software interrupt if the frame
is enabled for one
(setting .JBTPC to point to the nam),
otherwise wait until
.if CMD then start
the frame is attached-to or
.end
a
.if not BKA then start
break
.end
character arrives.
.end else start
just return.
.end

Remove one
.if IMG then start
8-bit
.end else start
7-bit (8-bit if the port's data mode is IO.KAT)
.end
character from the input buffer,
and store it, right-justified with leading bits zero,
into <addr>.

.if WAT and CMD then start
Return.
.end else start
Skip-return.
.end
.endSec nam:
.)$
.procedure !pout(CMD,num,nam,desc,IMM,IMG,STR,PTR) $(
.eval((IF CMD
.       THEN ";ttcallDef (num,nam,|desc|);"
.       ELSE ";auxcalDef (num,nam,|desc|);"));
.b!ex
.if CMD then start
        nam     addr
.end else start
        MOVE    ac, [port,,nam]
        AUXCAL  ac, addr
.end
        only return
.if not CMD then start
.SKIP; APART; GROUP;
.!axport
.end
.e!ex
.if CMD then start
If the frame is detached,
cause an i/o wait software interrupt if the frame
is enabled for one
(setting .JBTPC to point to the nam),
otherwise wait until the frame is attached-to.
.end else start
.!axstart
.end

.if STR or PTR then start
For each character in
.if STR then start
the ASCIZ string pointed to by <addr>,
.end else start
the null-terminated string pointed to by
the byte pointer in c(<addr>),
.end
.b!nest
If the port's output buffer is full,
.if PTR then start
cause an i/o error software interrupt
if the frame is enabled for one
(setting .JBTPC to point to the nam,
and modifying c(<addr>) to point to the
character that would have been output next),
otherwise
.end
wait until there is room in the buffer
.if STR then start
(regardless of whether the frame
has enabled an i/o wait software interrupt)
.end
.}.

Deposit the character in the port's output buffer.
.if PTR then start
(If the byte size is greater than 8 bits,
only the rightmost 8 bits of each byte will
be deposited, and if the level-9 bit is 1,
the character will be deposited as an image character).
.end
.e!nest
.end else start
Let <char> be
.if IMM then start
the effective address, <addr>.
.end else start
c(<addr>).
.end
Deposit
.if IMG then start
the rightmost 8 bits of <char>
as an image character
.end else start
the rightmost 7 bits of <char>
(8 bits if the port's data mode is IO.KAT)
.end
into the port's output buffer.
.end

return.
.endSec nam:
.)$
