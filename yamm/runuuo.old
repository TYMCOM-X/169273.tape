.calliDef +35,RUN,|load and run a program|;
.b!ex
	MOVE	ac, [start,,addr]
	RUN	ac,
	  error return	; <ac> := error code
	; normal return is to .JBSA of the loaded program
	; + <start>
.!sag
where <addr> points to a block of the form
	SIXBIT /device name/
	SIXBIT /file name/
	SIXBIT /file extension/
	0	; ignored
	ppn
	license,,core
.!sag
and <ppn> is one of
	0 (or negative) : the current process's PPN
	0,,[SIXBIT /username/] : the AUN of the
	    specified (two-word) username
	project number,,programmer number : that PPN
.!sag
and <error code> is an error code from {tabRef TAB15}
.e!ex
Perform a RESET UUO.
Set JBTNAM to the specified file name.
Perform an OPEN operation for the specified device:
if it fails
.SEGERR(|a <device name> NOT AVAILABLE|)

Attempt to LOOKUP, in the following order,
.b!ex
<file name> . SHR
<file name> . HGH
<file name> . <file extension>
    (or <file name> . SAV if <file extension> = 0)
<file name> . SWR
.e!ex
If none of the LOOKUPs succeeds,
.SEGERR(|a <file name> NOT FOUND|)
If a LOOKUP succeeds,
proceed using that file
(that is, using the first file successfully
looked-up).

Perform a VCLEAR operation on all pages
but page 0 of the current process's address space.
Set c(.JBREL right) and c(.JBHRL) = 0.

Let <core request> initially = <core>.
Let <size> be <core request> if the device is a magtape,
or the file's size if the device is a disk.

If the file's extension is SHR, HGH, or SWR,
.b!nest
If <core request> > the file's size,
decrease <core request> by <size>.

If the device is a disk,
.b!nest
.MAPHS(|abort the current frame
.with a xxx PAGES NEEDED message|,
.|abort the current frame
.with a TRANSMISSION ERROR message|)
.e!nest
Otherwise, the device must be a magtape:
.b!nest
.READHS(|abort the current frame
.with a xxx PAGES NEEDED message|,
.|abort the current frame
.with a TRANSMISSION ERROR message|)
.e!nest
Set
c(.JBVER),
c(.JBHRL left),
rh(.JBREN),
c(.JBCOR),
c(.JB41),
and c(.JBSA)
from the corresponding locations in the
vestigial "Job Data Area".
Clear the rest of the "Job Data Area" locations
from .JBSA through .JBDA.
Clear .JBDDT.

If <file extension> was 0,
and c(.JBCOR left) is an address below .JBDA,
clear page 0 above .JBDA.
Starting with page 1,
create enough private read/write pages
to include the address
in c(.JBCOR right), rounded up to the next 1K boundary.
Set c(.JBREL right) to the highest address
created.

If <file extension> was nonzero,
or the address stored in c(.JBCOR left) was above
c(.JBDA),
LOOKUP
<file name>.<file extension>
or <file name>.LOW (respectively):
if the LOOKUP fails,
abort the current frame with a
<file name> NOT FOUND message.
Let <size> be <core request> if the device is a magtape,
or the file's size if the device is a disk.
If <size> > 128K,
abort the current frame with an
xxx PAGES NEEDED message.
otherwise,
load the file as described below
for non-(SHR, HGH, SWR) files.
.e!nest
If the extension is not SHR, HGH, or LOW:
.b!nest
Let <needed> be the address of the highest location
needed to load a file of <size> words starting
at the location after .JBSVM,
rounded up to the next 1K boundary.
If <core request> is nonzero
but is less, when rounded up to the next 1K,
than <needed>,
abort the current frame with an
xxx PAGES NEEDED message.
Otherwise,
perform a VCREAT UUO to allocate pages up to
the larger of <needed> or <core request>
(aborting the frame with an xxx PAGES NEEDED message
if it fails),
then perform a WSCTL UUO to add those pages to
the current process's working set,
ignoring any error return.
Set c(.JBREL) = the highest address created.

Perform an INPUT UUO to read the file into
memory starting at the address after .JBSVM:
if INPUT signals an error,
abort the current frame with a TRANSMISSION ERROR
message.
If the first word read was negative,
expand the file read (see below).

Let <needed> be c(.JBCOR right) after reading in the file,
or the highest address created to read in the
file if c(.JBCOR right) is 0.
If <core request> is nonzero and less than
<wanted>, abort the current frame with a
xxx PAGES NEEDED message.
Otherwise, perform the equivalent of a CORE UUO
for the maximum of <needed> and <core request>:
if it fails,
abort the current frame with a
xxx PAGES NEEDED message;
otherwise,
set c(.JBREL right) = the maximum of <needed> and <core request>.

Set c(.JB41) = c(.JBS41).
.e!nest
.GTJBFN(!run!)
.
.endSec RUN:
