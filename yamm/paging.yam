.sec Paging,Paging:
.ind paging;
.
.sec Hardware Paging,HardPage:
.ind virtual address;
.ind physical address;
The KI-10 hardware splits each 18-bit address into
two parts -- a 9-bit page number
and a 9-bit word address within that page.
It converts this two-part "virtual address"
into a "real address" (the address of a word in core)
by indexing into a
"page table" with the page number to obtain the
high-order bits of the real core address,
then OR-ing-in the word address to obtain the low-order
bits.

Each of the 512 entries in a hardware page
table also contains an "accessible" bit
and a "writable" bit.
If a user process attempts a memory reference
to a page whose "accessible" bit is off,
that operation will trap to the monitor;
similarly, if it attempts to write
into a page whose "writable" bit is off,
the operation will be trapped.
.endSec HardPage:
     
     
     


     
.sec Software Paging,SoftPage:
.ind logical page table; ind virtual address space;
.ind user address space; ind map; ind user map;
The monitor maintains a "logical page table",
or map,
for each process,
which it uses to set up the hardware map
while that process is running.

The main difference between the two
is that the logical page table
entries contain disk page addresses
while the hardware page table entries
contain core page addresses.
A disk page is said to be "mapped to" a
virtual page
if the logical page table entry for that
virtual page
contains the address of that disk page;
a disk page is said to be "mapped into a process's
address space"
if that page is mapped to some
virtual page for that process.
.
.sec Page Types,PageType:
.ind private page; ind file page;
.ind nonexistent page;
A virtual page may either exist or not exist; it "exists" if it has some
disk page mapped to it and does not exist otherwise.

The monitor will signal an "illegal memory reference"
if a frame attempts to reference a nonexistent page.

A disk page which is part of some file is a "file page"; all
other disk pages are available for allocation as new file pages
or as "private" pages--virtual memory pages created by
the {calliRef CORE} or {calliRef VCREAT} which disappear
once the process(es) using them disappear, or when all
users of them remove them from their address spaces with
{calliRef VREMOV}.

The total number of existent pages in a frame's
map cannot be greater than
the current value of the .JPCOR
field of the frame's Frame Privilege Word.
.endSec PageType:
.
.sec Working Sets,WorkSet:
.ind working set;
.ind monitor working set; ind user working set;
Each entry in a frame's map
has an "in-working-set" bit.
Before running a frame,
the monitor checks every existent virtual page
in the frame's map whose "in-working-set" bit is on,
brings its disk page into core
if it is not already there,
and sets up the corresponding hardware map entry
to point to the core page.

The monitor will signal a "page fault"
if a frame attempts to reference an
existent virtual page whose "in-working-set" bit
is zero.

To the monitor, the "working set" of a process
is that set of its pages whose "in-working-set" bits are 1.
The monitor charges a frame
for (1) its working set size over time,
and (2) for each addition to its
working set.

The actual working set of a process
(that is, the set of pages which it must have in core
to run efficiently) will often be
smaller than the total number of pages mapped,
and its membership fairly stable over time.
To run a program economically,
it is necessary to make the
state of the "in-working-set" bits
reflect the actual working set of the process.
Some techniques for doing this
are discussed on {secRef WSCont}.
.endSec WorkSet:
.
.sec Sharing,Sharing:
.ind shared page;
If a disk page is referred to by
more than one map entry,
that page is said to be "shared".
(Even private pages can be shared,
since the {CalliRef VREPLC} can make two entries
in a process's map refer to the same
private page).

The monitor guarantees that,
if two running processes have the same
disk page in their working sets,
their hardware page tables will be pointing
to the same core page.
(The same is true if one process
has the same page appearing twice in its
map).
.endSec Sharing:
.
.sec Protection,PageProt:
.ind maximally-writable page;
.ind current page protection;
.ind copy-on-write page;
.ind COW page;
.ind read-only page;
.ind page protection;
Each entry in a frame's map
has a "maximally-writable" bit
and a "current protection" field.
The current protection
can be "read-only",
"copy-on-write",
or "read/write".
A process can change the current protection for a page,
with the exception that only maximally-writable
pages can have their protection set to read/write.

If a process attempts to store data into a read-only
page,
the monitor will signal an illegal memory reference
for that page.

If a process attempts to store data into
a copy-on-write page,
the monitor will create a new private page
(maximally-writable and currently read/write),
copy the contents of the referenced page into it,
replace the old page with the new one in the
map,
and then restart the store operation.

All private pages are maximally-writable.
A page mapped from a file will be maximally-writable
if and only if
(1) the process had done a successful ENTER on the
file before mapping the page
and (2) the process had at least
update access to the file
at the time of the ENTER.
.endSec PageProt:
.
.endSec SoftPage:
     
     
     


     
.sec Creating Private Pages,CrePrivPag:
There are several methods by which a private page may be added
to a frames address space.
The direct method is to execute the {CalliRef VCREAT}.
The subtler methods include the {CalliRef CORE},
as well as other UUOs which call the CORE UUO.
.
.QueueTab TAB28;
.use VCREAT.UUO;
.QueueTab TAB29;
.
.endSec CrePrivPag:

     
.sec Unmapping Virtual Pages,UnMap:
The two UUOs VCLEAR and VREMOV remove one or more
pages from a process's map.
When the last remaining reference to a particular
private page is removed (and only then),
the page will be deleted; a particular disk
page will retain its contents as long as 
(and only as long as) it is either in some process's map
or part of a file.

To unmap a page,
a program executes one of
{CalliRef VCLEAR} or {CalliRef VREMOV}.
.
.use VCLEAR.UUO;
.use VREMOV.UUO;
.
.endSec UnMap:

     
.sec Replicating Virtual Pages,Replicate:
The current contents of a range of map entries
can be copied (possibly with changed current protection)
into some other nonoverlapping range.
This can be used to make the same page
appear in different places in a process's address space,
or, when followed by a VREMOV on the old range,
to move some set of pages without having to
copy their contents.

The process executes
{CalliRef VREPLC}.
.
.use VREPLC.UUO;
.
.endSec Replicate:

     
.sec Mapping File Pages,MapFile:
After a file has been properly setup on a channel
using the calls described on {secRef DiskIO},
the process may map pages of the file into any previously
nonexistent virtual page
in its own frame or any other frame to which it has !ARCHM rights.
This functions is performed by the {ChanioRef !CHMFP}.
.
.use CHANIO.MFP;
.
.endSec MapFile:
     
     
     


     
.sec Mapping Absolute Disk Pages,SuperMap:
.ind super mapping;
A process having {RA} or {WA} license 
can map arbitrary pages of a disk structure
or disk unit into its address space
using the {ChanioRef !CHSMP}.
(For more details on the interpretation of the disk address
argument,
refer to {ChanioRef !CHSMP} and {secRef SupUSET}.  For an explanation of
"super mode" see {secRef SupUSET}.)
.
Note that at the present time "copy-on-write" is not implemented in this
"super-mapping".  Super-mapping must presently be done either read-only
or read-write.
.
.use CHANIO.SMP;
.
.endSec SuperMap:
     
     
     


     
.sec Changing Page Protection,ChProt:
To change the current protection on
a range of pages,
a process executes
{CalliRef VPROT}.
.
.use VPROT.UUO;
.QueueTab TAB30;
.
.endSec ChProt:
     
     
     


     
.sec Working Set Control,WSCont:
A program may modify its %<user working set> by executing
the various functions of the {CalliRef WSCTL}.
When the user is performing user working set control,
the monitor disables %<monitor working set control>.
.
.sec |WSmax, WSlim, WSsiz|,WSparam:
.ind WSMAX; ind WSLIM; ind WSSIZ;
The monitor maintains,
for each frame,
a "maximum working set size limit" (WSMAX),
a "current working set size limit" (WSLIM),
and a "current working set size" (WSSIZ)
value.

If a process is not trapping page faults,
the monitor will add each page faulted-for
to its working set,
but will throw a page out before doing so
if WSSIZ has reached WSLIM.

A program can set WSLIM to any value not exceeding
WSMAX. The RUN and GET operations
set WSLIM to equal WSMAX when a core image file is loaded.

The user can set WSMAX with the command
.b!ex
SET WSMAX <# of pages>
.e!ex
Doing so sets WSLIM and WSMAX to the specified
number of pages,
and removes enough pages from the
current program's working set to bring
WSSIZ down to the new WSLIM.

A program can read WSSIZ, WSLIM, or WSMAX by executing
the appropriate functions of the {CalliRef WSCTL}.
.endSec WSparam:
.
.use WSCTL.UUO;
.use WSCTL.RNG;
.use WSCTL.RSZ;
.use WSCTL.STL;
.use WSCTL.RBM;
.use WSCTL.RLM;
.use WSCTL.RMX;
.QueueTab TAB31;
.
.endSec WSCont:
     
     
     


     
.sec Prereferencing Pages,PreRefPag:
When a page is added to a process's working set,
the monitor does not immediately make it present
in core.
The {CalliRef PREREF} has the effect of referencing a
page, but does not block if the page is not
present in core; this will inform the monitor
(in the case the page is not present) that the
process needs attention.  In addition,
PREREF returns a bit indicating whether a real
reference by the program to the page
would cause the program to block.
.
.use PREREF.UUO;
.QueueTab PREREF;
.
.endSec PreRefPag:
.sec Uninterruptible Page Copy,AtomicPage:
A user program may be suspended between any two
machine instructions, in principle, and the physical
machine might be assigned to process some other
program entirely.  Certain individual instructions
can also be interrupted:  notably the BLT (Block
Transfer) instruction.  This may be unacceptable to
some processors which need to make several 
changes to a data page "in one operation" so that
a database on disk reflects either all of the
changes or none of them.  To meet this need
the monitor provides the {CalliRef BLTPAG}, which
will uninterruptibly copy data from one page to
another.
.
.use BLTPAG.UUO;
.
.endSec AtomicPage:

     
.sec Paging Related Errors,PagErr:
.ind paging errors;
There are three kinds of error which can occur
when a program tries to access a page:
an "illegal memory reference" will occur
if it tries to access a nonexistent
page,
or if it tries to write on a page that
is write-protected (read-only);
a "page fault" will occur if it
tries to access a page which
is not in its working set;
a "page error" will occur
if it tries to access a page
which has suffered an irrecoverable i/o error
in the process of being transferred
to or from disk.
.
.sec Illegal Memory Reference,IllMemRef:
.ind illegal memory reference;
.ind ILL MEM REF;
Illegal memory references can be trapped using
either the APRENB or INTADR interrupt system.
When an illegal memory reference occurs,
the monitor stores the hardware page fail
word for the page in .JBPFN of the frame
data area.  The right half of this word
is the address causing the ill mem ref,
so the left 9 bits of that halfword
are the offending page's page number.
The {CalliRef PAGSTS} can be used
to determine whether the ill mem ref was
caused by accessing a nonexistent page
or by writing into a write-protected page.
.endSec IllMemRef:
.
.sec Page Errors,PErr:
When a page error occurs,
the monitor will note the fact
by setting error bits associated with the page.
Page errors occur both when a page is being
written to disk
and read into core from disk.

In neither case
does a process receive an immediate interrupt.
Page output errors are reflected to a program
when (if) it tries to validate the page.
Page input errors normally cause the .IAERR software interrupt
when a program tries to access the page.
The {CallIRef PERSET} may be executed to cause these errors
to be ignored, not causing the interrupt.
.
.use PERSET.UUO;
.QueueTab PERSET;

The monitor maintains two page-error status-words for each
process:  one for page-errors which could not be handled
by the user for some reason (trap not enabled, etc.) and thus
had to be handled by the monitor, and one for errors handled
by the process.  The format of the two words is identical,
and is shown in {tabRef PGESTS}.  To read/clear these
words, issue {calliRef PGESTS}.
.use PGESTS.UUO;
.queueTab PGESTS;
.endSec PErr:
.sec Validating Pages,ValPage:
A program can ensure that a range of pages
is written to the disk
by using the {CalliRef VALPAG},
which initiates the writing of all the dirty
pages in that range to disk,
and optionally waits until the writes are complete.
Note that the RIB of a file open on a channel can also be forced
out using the {ChanioRef !CHVRB}.
.
.use VALPAG.UUO;
.QueueTab VALPAG;
.
.endSec ValPage:
.endSec PagErr:
     
.sec Page Faults,Fault:
When a page fault occurs,
say for page <page>,
the monitor will execute the following algorithm:
.b!nest
If WSSIZ < WSLIM then
.b!nest
If an .IAFLL software interrupt can be taken,
take it;
otherwise,
add <page> to the process's working set,
and repeat the interrupted instruction.
.e!nest
Otherwise (WSSIZ >= WSLIM),
.b!nest
If an .IAFEL software interrupt can be taken,
take it;
otherwise,
remove pages from the process's working set
until WSSIZ is 1 less than WSLIM,
then add <page> to the working set,
and repeat the interrupted instruction.
.e!nest
Where "a <x> interrupt can be taken" means
that the process is currently running
in user mode (the fault did not, for example,
happen as the monitor was trying to reference
a UUO argument),
that the process has enabled
(using INTASS) the <x> interrupt,
and that no higher-priority software interrupt
is in-progress or pending for that process.
.e!nest
Note that even if the program chooses to "see" no
page faults at all
(by choosing not to enable for either interrupt condition),
it can still have some effect on its paging behavior
by setting WSLIM,
which determines the point at which
page faults will cease to cause its working set to expand.
.
.sec Page Fault Word,PFW:
The monitor maintains two page fault words
for each 
process:
one for the last fault which trapped to the
user,
and one for the last fault handled by the
monitor.

The format of a page fault word is
described in {TabRef PGFSTS}.
.
.QueueTab PGFSTS;
.
.endSec PFW:
.
.use PGFSTS.UUO;
.use PGRSTS.UUO;
.queueTab PGRSTS;
.endSec Fault:
     
     
.sec Page Reference Bits,RefBits:
.ind page reference bits; ind reference bits;
The monitor associates a reference bit
with each map entry.
The bit is set whenever a page is referenced
by the process
and cleared
.b!list
--When the program does a VREMOV or VCLEAR and
specifies that it should be cleared
--When the program does a REFBIT UUO
explicitly clearing it
.e!list
The monitor will cause a .IAREF software interrupt
whenever a process attempts to a access a page
with reference bit 0
if the interrupt has been enabled.

The main purpose of reference bits is to enable
a process managing its own working set
to determine which of its pages
it has touched over some period of time.
A program manipulates the reference bits of its pages
with
the {CalliRef REFBIT}.
.
.use REFBIT.UUO;
.use REFBIT.RBM
.use REFBIT.SBM
.use REFBIT.RNG
.QueueTab TAB36;
.
.endSec RefBits:
     
     
     


     
.sec Virtual Page Information,PagInf:
.
.sec Page Status Word,PSW:
A program can obtain a page status word
for any existent virtual page.
The word has the format
described in {TabRef TAB37}.

Note that the PS.FIL bit indicates whether the page
was part of a file at the time it was mapped.
If the file page it was mapped from is deleted
(e.g., using .CHDFP), PS.FIL will remain on.
The {calliRef VFSTAT}, on the other hand,
indicates whether a particular virtual page
is currently part of a file.
To read the status word for a page,
a program executes
the {CalliRef PAGSTS}.
.
.QueueTab TAB37;
.QueueTab PAGSTS;
.use PAGSTS.UUO;
.
.endSec PSW:
.
.sec Testing for File Membership,VFS:
A program can find out whether a particular page
is currently mapped from a file or whether it is private
(note that being private does not necessarily mean
a page is unshared)
by executing
the {CalliRef VFSTAT}.
(Note also that VFSTAT tests for a page's CURRENT
membership in any file, whereas the PS!FIL bit returned
by {calliRef PAGSTS} reports its membership AT THE TIME
of the VMAP).

Using the {calliRef VPGFIL} a program can find out the
name of the file from which any page was mapped,
in case this information is not known already.  This
permits, for example, a GETSEG'd program to read
the file name from which it was loaded in order to pass this
name on to another program which may want to return.
.use VFSTAT.UUO;
.use VPGFIL.UUO;
.queueTab VPGFIL;
.endSec VFS:
.
.sec Disk Retrieval Pointers,DskPtr:
To read the disk retrieval pointer for
the disk page mapped to a particular
virtual page,
a program executes
the {CalliRef VDSKPT}.
.
.use VDSKPT.UUO;
.
.endSec DskPtr:
.
.endSec PagInf:
     
     
     
.QueueTab TAB39;
.
.endSec Paging:
 