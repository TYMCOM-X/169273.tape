.sec General I/O,GenIO:
     
.sec |Channels & I/O Initialization|,Channels:
Each process has 48 %<software i/o channels>.
The {UuoRef INIT}, {UuoRef OPEN}, and the {ChanioRef !CHOPN},
take a %<channel> number and a device name:
they assign the device to the calling process,
and associate it with the specified channel.
The device (and the channel) are said to be
"initted" when this has been done.

For each device,
the monitor maintains a "%<device data block>"
(or %<DDB>),
which holds data identifying the device
and describing its current status.
Each initted channel in a process points to some
device data block.
Since the disk is a shared device,
the monitor creates a copy of a master disk DDB
for each channel that inits the disk.
If more than one channel inits the same
non-disk device,
the channels will share the same DDB.
.endSec Channels:
     
     
     
.sec Device Assignment,Assignment:
A device must be "assigned" to a process
in order for that process to use it.
Devices other than the disk
may not be assigned to more than one process
at a time.

When a program inits a device,
the device is "%<assigned by program>" to
the process;
it remains assigned until the program
releases it (or until it or the monitor does a RESET,
which will release all assigned-by-program devices).

When a user types the ASSIGN command
.ind ASSIGN command;
.b!ex
	ASSIGN <device name>
.e!ex
the device is "%<assigned by console>" to the
frame;
it remains assigned until the user types
.ind DEASSIGN command;
.b!ex
	DEASSIGN <device name>
.e!ex
or logs out.

A process which has {TD} license
can take any device currently
"assigned by program" to it,
and reassign that device "by console"
either to itself or to some other frame,
using the {CalliRef REASSI},
or the %<REASSIGN command>.
.sec Device Availability,Availability:
All devices are assigned to some frame.
Devices which are completely unavailable
to the system are "assigned by program"
to frame 0.
Devices which are available to users
are "assigned by console" to frame 0.

If a process has {GD} license,
it can init a device which is available
(i.e., which is "assigned by program" to
frame 0).

If a frame has {GD} license,
the user can use the ASSIGN command to
assign a device which is available.

The device DSK can always be assigned,
without {GD} license,
as can a frame's command port or any port
assigned to the frame in creating an aux circuit
(see {secRef CREAUX}).
.endSec Availability:
.sec Logical Names,LogicalNames:
The ASSIGN command can take an optional
second argument specifying
a "%<logical name>" for the device being assigned:
.b!ex
	ASSIGN <device physical name> <device logical name>
.e!ex
Subsequent inits on <logical name>
will be redirected to the specified
<device physical name>.
For example,
.b!ex
	ASSIGN LPT PTP
.e!ex
will cause subsequent paper-tape-punch-directed output
to go to the line printer.

In many UUOs which take device names,
the program can specify a "physical-only" search,
in which case logical name assignments are ignored.
.endSec LogicalNames:
.sec Device Names,DevName:
When processing a UUO which specifies
a device name,
the monitor must find the appropriate DDB.
The algorithm is:

If the UUO does not specify a physical-only search,
look for a device whose logical name matches the
argument: use its DDB.

If that fails, check whether the argument is
the generic name for disk, "DSK",
or "DS" or "D";
or whether it is a disk structure name ("DSKB");
or whether it is a disk unit name:
if it is,
use a copy of the master disk DDB.

If that fails, look for a device whose
physical name matches the argument:
use its DDB.

If that fails, and the argument is "TTY",
use the current frame's command port's DDB.
.endSec DevName:
.endSec Assignment:
     
     
     
.sec Channel Numbers,ChanNum:
The monitor originally passed %<channel numbers>
using the ac field of the i/o UUOs,
limiting the maximum number of channels
to 16.
The {UuoRef CHANIO} was added to allow the number
of channels to be increased.
.endSec ChanNum:
     
     
     
.sec Closing channels,Closing:
Most devices have some notion of a "file".
Several files may be read or written on a device
before that device is released;
the {ChanioRef !CHCLS} or {UuoRef CLOSE}
can be used by a program to inform the
monitor that it intends to finish
the processing of the current file.

The exact operation of CLOSE depends
on the data mode the device was initted in
and on the device initted.
.endSec Closing:
     
     
     
.sec Releasing Channels,Releasing:
When a process is finished with a channel,
it should execute a {ChanioRef !CHREL} or {UuoRef RELEAS}
to disassociate the device with the channel.
The {CalliRef RESET} will release all channels automatically.
.endSec Releasing:
     
     
     
.sec File Status Bits,FileStatus:
The monitor maintains a file status word
for each device.
The right half of that word can be manipulated
by user programs,
and its bits are called the "file status bits".
Some file status bits are device-dependent:
those which are not are described in table {TabRef FSB}.
.QueueTab FSB;

.sec Data Modes,DataModes:
There are eight standard data modes that can be specified
for a device. The behavior of the modes
differs from device to device,
but the general arrangement is
shown in table {TabRef MODES}.
.QueueTab MODES;
.endSec DataModes:

.sec |Reading, Testing and Setting|,FS!RTS:
To read the file status bits for a channel,
a program executes the {ChanioRef !CHGS} or {UuoRef GETSTS}.

A program may test the file status bits for a channel
by executing the {ChanioRef !CHSO} or {UuoRef STATO}
to test for bits which are set,
or the {ChanioRef !CHSZ} or {UuoRef STATZ}
to test for bits which are clear.

Finally,
a program may set the file status bits for a channel
by executing the {ChanioRef !CHSS} or {UuoRef SETSTS}.
.endSec FS!RTS:
.endSec FileStatus:
     
.sec Device Characteristics,DevChar:
Since a program may be getting a logical device when it performs
an OPEN UUO,
a means has been provided for the program to determine the type
of device that it is working with.
The program may execute the {CalliRef DEVCHR} or {CalliRef GETCHR}
to obtain a word describing the device.
The format of this word is given in {TabRef TAB18}.
.QueueTab TAB18;
.endSec DevChar:

.sec Device Manipulation,DevMan:
There is a family of UUOs which take either
a channel number or a device name for an
argument
and return information about the device.
In what follows,
a "device descriptor" is either a channel number
or the SIXBIT name of some device.
A %<device descriptor> is "invalid" if
(1) it is a channel number and the channel
it specifies is not initted
or
(2) it is a device name and the device cannot
be found.

.sec Reassigning Devices,DevReassi:
A process which has a device assigned "by program"
to it
can assign that device "by console" to itself
(or any other process having the same AUN
or, given {TD} license,
any other process at all)
by executing
the {CalliRef REASSI}.
.endSec DevReassi:

.sec Wait until inactive,DevWait:
In order to wait for a device to stop transfering data,
that is,
become %<inactive>,
a program may execute the {ChanioRef !CHWT} or {CalliRef WAIT}.
Several UUOs automatically wait for their device or all devices
to become inactive.
.endSec DevWait:
.
.use CHANIO.WT;
.use DEVCHR.UUO;
.use DEVNAM.UUO;
.use DEVPPN.UUO;
.use DEVSTS.UUO;
.use GETCHR.UUO;
.use REASSI.UUO;
.use SYSDVF.UUO;
.QueueTab SYSDVF;
.use WAIT.UUO;
.
.endSec DevMan:
     
.Sec |Major I/O UUOs|,MajIOUUO:
.use CHANIO.UUO;
.use INIT.UUO;
.use OPEN.UUO;
.use IN.UUO
.use INPUT.UUO
.use CHANIO.IN
.use CHANIO.IPT
.use OUT.UUO
.use OUTPUT.UUO
.use CHANIO.OUT
.use CHANIO.OPT
.use RESET.UUO;
.use CHANIO.CLS;
.use CHANIO.GS;
.use CHANIO.OPN;
.use CHANIO.REL;
.use CHANIO.SO;
.use CHANIO.SS;
.use CHANIO.SZ;
.use CLOSE.UUO;
.use RELEAS.UUO;
.use GETSTS.UUO;
.use SETSTS.UUO;
.use STATO.UUO;
.use STATZ.UUO;
.use CHANIO.NXT;
.endSec MajIOUUO:
.endSec GenIO:
  