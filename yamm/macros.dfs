.MACRO WC $(}Write Core (WC){)$;
.MACRO RC $(}Read Core (RC){)$;
.MACRO OP $(}Operator (OP){)$;
.MACRO SY $(}Systat (SY){)$;
.MACRO GD $(}Get Device (GD){)$;
.MACRO TD $(}Transfer Device (TD){)$;
.MACRO ST $(}Structure (ST){)$;
.MACRO HF $(}Home File (HF){)$;
.MACRO JL $(}Jacct (JL){)$;
.MACRO AC $(}Auxiliary Circuit (AC){)$;
.MACRO XC $(}XCharge (XC){)$;
.MACRO RP $(}Read Project (RP){)$;
.MACRO RF $(}Read File (RF){)$;
.MACRO RA $(}Read Absolute (RA){)$;
.MACRO WP $(}Write Project (WP){)$;
.MACRO WF $(}Write File (WF){)$;
.MACRO WA $(}Write Absolute (WA){)$;

.MACRO b!ex $(
.       BEGIN "ex"
.       GROUP; NOFILL; SKIP;
.)$;
.MACRO e!ex $(
.       APART;
.       END "ex";
.)$;
.
.MACRO b!nest $(
.       BEGIN "nest"
.       NARROW 4,4;
.)$;
.MACRO e!nest $(
.       WIDEN;
.       END "nest";
.)$;
.
.MACRO b!list $(List -4,8,4;Preface 0;at "--" $(item)$ )$;
.MACRO e!list $(endList)$;
.
.MACRO !sag $( ; SKIP ; APART ; GROUP ; )$;
.
.MACRO b!ftab(ch1,ch2,tabstr,lfcol) $(
.   BEGIN "ftab"
.       group;
.       TABS tabstr;
.       if "ch1" neq null then start ("ch1"); continue; end;
.       if "ch2" neq null then start ("ch2"); continue; end;
.       if "ch1" neq null or "ch2" neq null then skip 1;
.       fill;
.       b!!ind("0,(lfcol)-1,0");
.)$
.MACRO e!ftab $(
.       apart;
.   END "ftab";
.)$
.
.MACRO b!nftab(ch1,ch2,tabstr,lfcol) $(
.   BEGIN "nftab"
.       group;
.       TABS tabstr;
.       if "ch1" neq null then start ("ch1"); continue; end;
.       if "ch2" neq null then start ("ch2"); continue; end;
.       if "ch1" neq null or "ch2" neq null then skip 1;
.       nofill;
.       indent 0,(lfcol)-1,0;
.)$
.MACRO e!nftab $(
.       apart;
.   END "nftab";
.)$

.macro ABORT(!hstatus!) $(
abort the process and store halt status !hstatus! for the frame.
.)$;

.macro SEGERR(!hstatus!) $(
take the error return unless the error return location
contains a HALT instruction,
in which case abort the operation
and store halt status
!hstatus!
for the frame.
.)$

.macro MAPHS(!falcor!,!other!) $(
If the file's size is greater than '377777 words,
abort the operation and store halt status
!falcor!
for the frame.

Otherwise, perform a VMAP UUO,
mapping the file's pages read-only
into the current process's address space,
starting at virtual page '400:
if VMAP signals an error,
abort the operation and store halt status
!other!
for the frame.
If the file's extension is SWR,
make the pages maximally-writable.

Perform a WSCTL UUO to add the mapped pages
to the current process's working set,
and ignore any error return.
If the number of pages mapped was odd,
create a private page above the mapped pages,
to make the total number of words
a multiple of 1K.
Set c(.JBHRL left) = 0,
c(.JBHRL right) = the highest address of the highest page
mapped or created.
.)$

.macro READHS(!falcor!,!other!) $(
Read one standard-length magtape record into
locations starting at '400000.
Then, based on c(.JBHRN left) in the vestigial "job data area"
(part of the record just read in),
input successive records until all the file has been
read:
if an unexpected EOF occurs,
abort the operation and store halt status
!falcor!
for the frame.

Perform a VPROT UUO to make all the pages just
created and read-into
read-only.
If the number of pages is odd,
create a private page above them,
to make the total number of words
a multiple of 1K.
Set c(.JBHRL right) = the highest address
read-into or created.
.)$

.macro PPNDEF $(
ppn = 0 to specify the current frame's PPN
   or GAN,,UUN
   or 0,,[SIXBIT /user name/]
.)$

.macro GTJBFN(!caller!) $(
Set <passed license> to minimum of
<license> and the current process license
(but set the read(write) privilege to 0
if <license>'s read(write) privilege is
greater than the current process's).
If the device is a magtape,
or if the device is a disk and
the file's ppn differs from the frame's
FPN,
clear the LC!HF bit in <passed license>.

Set the <execute only> bit of the frame privilege word
if
an execute-only file was read,
or if a file with extension SWR that had nonzero license
(or to which the current process did not have update access)
was loaded
.if "!caller!" = "run" then start
as the high segment;
otherwise, clear it.
.end else start
; leave it set if it was already set at the time
of the RUNSEG;
and clear it otherwise.
.end

If the device is a magtape,
let <file license> be 0.
If the device is a disk and only a single file was loaded,
let <file license> be its license word.
If the device is a disk and both a low and a high segment
file were loaded,
let <file license> be the minimum of the two
files' license words
(but set the read(write) privilege to 0 if
the files' read(write) privileges are not the same).

Set the process' current license
and the frame's saved license
to the maximum of <passed license>,
<file license>,
and the frame's current license.

If the device is a disk,
let the process' PID be:
.myList;
--<file PID> if only one file was loaded
--<file PID> if both high and low files were loaded and
the files have identical PID
--zero if two files were loaded with different PID
.endList;

Write a type 0 accounting record for the current frame.

.)$

.macro RNGT0(!caller!) $(
If c(.JBREL) >= '400000,
take the error return.
Perform an OPEN operation for the specified device:
if it fails
.SEGERR(|HT!DNA|)

Attempt to LOOKUP, in the following order,
.b!ex
<file name> . SHR
<file name> . HGH
<file name> . SWR
.e!ex
If none of the LOOKUPs succeeds,
.SEGERR(|HT!FNF|)
If a LOOKUP succeeds,
proceed using that file
(that is,
using the first file
successfully looked-up).

Perform a VCLEAR operation
on all pages from '400 through '777
of the current process's address space.
If
.if "!caller!" = "runseg" then start
RUNSEG
.end else start
GETSEG
.end
was called from an address >= '400000,
subsequent <error return>s will instead
abort the operation with either a
HT!TRE or HT!PGN halt status, depending on the device.
(This is due to the fact that the caller's program no
longer exists to which the monitor could return).

If the device is a magtape,
.b!nest
.READHS(|HT!TRE|,|HT!TRE|)
.e!nest
Otherwise, the device must be a disk:
.b!nest
.MAPHS(|HT!PGN|,|HT!TRE|)
.e!nest
.if "!caller!" = "getseg" then start
Perform a RELEASE operation for channel 0,
then skip-return.
.end else start
.GTJBFN(runseg)

Set c(.JBVER), c(.JBREN right), c(.JBCOR),
c(.JB41) and c(.JBSA right)
from the corresponding locations in
the vestigial "job data area."
Set c(.JBREN left) and c(.JBDDT) = 0.

Perform the equivalent of an APRENB UUO
with an argument of 0.

.RNSEG
.end
.)$

.macro RNSEG $(
Let <starting increment> be <start>.
If the JP!EXO bit was previously set in the frame
privilege word,
clear all but 1B35 of <starting increment>.
If the new <starting increment> is not either 0 or 1,
clear the current process license
and the current frame's saved license.
Add <starting increment> to c(.JBSA).
If the result is between 0 and '77, abort the operation
and store halt status HT!NSA.

Enter the loaded program at the address stored in
c(.JBSA).
.)$
.T _ 1; F _ 0;
.procedure !axport $(
.SKIP; APART; GROUP;
where <port> is -1 to specify the frame's command port,
or the port number of some port owned by the frame
.)$
.procedure !axstart $(
If <port> is -1 and the frame is detached,
or if <port> is not -1 and the specified port
does not exist or does not belong to the frame,
return.
.)$
.procedure !pin (CMD,num,nam,desc,WAT,BKA,IMG) $(
.eval((IF CMD
.       THEN ";ttcallDef (num,nam,|desc|);"
.       ELSE ";auxcalDef (num,nam,|desc|);"));
.b!ex
.if CMD then start
        nam     addr
.end else start
        MOVE    ac, [port,,nam]
        AUXCAL  ac, addr
.end
.if CMD then start
.       if WAT then start
        only return
.       end else start
        no-data return
        success return
.       end
.end else start
.       if WAT then start
          error return
        normal return
.       end else start
        error/no-data return
        success return
.       end
.!axport
.end
.e!ex
.if not CMD then start
.!axstart

.if IMG then start
Place the port in image state.
.end
If
.end else start
If the frame is detached, or if
.end
there are no
.if not BKA then start
break
.end
characters in the port's input buffer,
.if WAT then start
cause an i/o wait software interrupt if the frame
is enabled for one
(setting .JBTPC to point to the nam),
otherwise wait until
.if CMD then start
the frame is attached-to or
.end
a
.if not BKA then start
break
.end
character arrives.
.end else start
just return.
.end

Remove one
.if IMG then start
8-bit
.end else start
7-bit (8-bit if the port's data mode is IO.KAT)
.end
character from the input buffer,
and store it, right-justified with leading bits zero,
into <addr>.

.if WAT and CMD then start
Return.
.end else start
Skip-return.
.end
.endSec nam:
.)$
.procedure !pout(CMD,num,nam,desc,IMM,IMG,STR,PTR) $(
.eval((IF CMD
.       THEN ";ttcallDef (num,nam,|desc|);"
.       ELSE ";auxcalDef (num,nam,|desc|);"));
.b!ex
.if CMD then start
        nam     addr
.end else start
        MOVE    ac, [port,,nam]
        AUXCAL  ac, addr
.end
        only return
.if not CMD then start
.SKIP; APART; GROUP;
.!axport
.end
.e!ex
.if CMD then start
If the frame is detached,
cause an i/o wait software interrupt if the frame
is enabled for one
(setting .JBTPC to point to the nam),
otherwise wait until the frame is attached-to.
.end else start
.!axstart
.end

.if STR or PTR then start
For each character in
.if STR then start
the ASCIZ string pointed to by <addr>:
.end else start
the null-terminated string pointed to by
the byte pointer in c(<addr>):
.end
.b!nest
If the port's output buffer is full,
.if PTR then start
cause an i/o error software interrupt
if the frame is enabled for one
(setting .JBTPC to point to the nam,
and modifying c(<addr>) to point to the
character that would have been output next),
otherwise wait until there is room in the buffer.
.end
.if STR then start
wait until there is room in the buffer
(regardless of whether the frame
has enabled an i/o wait software interrupt).
.end
.}

Deposit the character in the port's output buffer.
.if PTR then start
(If the byte size is greater than 8 bits,
only the rightmost 8 bits of each byte will
be deposited, and if the level-9 bit is 1,
the character will be deposited as an image character).
.end
.e!nest
.end else start
Let <char> be
.if IMM then start
the effective address, <addr>.
.end else start
c(<addr>).
.end
Deposit
.if IMG then start
the rightmost 8 bits of <char>
as an image character
.end else start
the rightmost 7 bits of <char>
(8 bits if the port's data mode is IO.KAT)
.end
into the port's output buffer.
.end

Return.
.endSec nam:
.)$
   