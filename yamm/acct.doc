
	  September 6, 1984		    1			      Accounting


					_______	_                                        Section	1
					__________                                        Accounting

				    Table of Contents



	  SubSection


	  1.1	   Special charging    1-1
	  1.1.1	      XCHARG: modify charges (CALLI -60)    1-1
			 .XCSAV: save charging data (XCHARG fn 0)    1-1
			 .XCRSC: read saved charges (XCHARG fn 1)    1-2
			 .XCRCC: read current charges (XCHARG fn 2)    1-2
			 .XCSET: set charges (XCHARG fn	4)    1-2
			 .XCTRN: write transaction charges (XCHARG fn 5)    1-3
			 .XCTCC: Write TRU Component Checkpoint
			  (XCHARG fn 6)	   1-3
	  1.1.2	      Saving Charges	1-4
	  1.1.3	      Reading Current Charges	 1-4
	  1.1.4	      Setting Charges	 1-5
	  1.1.5	      TRU Component Checkpoint	  1-5

	  1.2	   Royalty Charging    1-5
	  1.2.1	      PUTROY: Put Royalty Record in Stream (CALLI -124)	   1-5
	  1.2.2	      TYMCHG: add TRU charges (CALLI -56)    1-6

	  1.3	   Writing Stream Records    1-6
	  1.3.1	      PUTLSA: write local stream acctg record (CALLI -63)    1-6
	  1.3.2	      PUTSAR: write stream acctg record	(CALLI -62)    1-7

	  1.4	   Stream Accounting Data    1-8


	  Table

	  1-1	   XCHARG functions by number	 1-1
	  1-3	   .XCSET Error	Codes	 1-3
	  1-4	   XCHARG Charge Table Entries	  1-4
	  1-6	   Stream Royalty Record Words 5,6,7,10	   1-6
	  1-8	   PUTSAR error	codes	 1-8
	  1-8b	   Stream Accounting Record Types    1-8
	  1-9	   Stream Accounting Record Lengths    1-9
	  1-9b	   Stream Record Std. Header words 0-4	  1-9
	  1-9c	   Stream Record types 0-6 (GET/RUN etc) format	   1-9
	  1-9d	   Change Project-Code Record words 5-7	   1-10
	  1-10	   System Initialization Record	words 0-1    1-10
	  1-10b	   Date	Change Record words 0-5	   1-10
	  1-10c	   Local Stream	Accounting Record words	5-7    1-10
	  1-10d	   SETLIC/SETE Record words 5-7	   1-11
	  1-11	   License-Setting RUN Record words 0-2	   1-11
	  1-11b	   LOGINN Record words 3-6    1-11
	  1-11c	   Uptime Record words 0-2    1-11
	  1-11d	   Restart Record words	0-1    1-12
	  1-12	   Stream Error	Record words 0-1    1-12
	  1-13	   LOGOUT and CHKPNT stream record format    1-13
	  1-14	   XCHARG stream record	format	  1-14

					   1-i
	  September 6, 1984		    1			      Accounting





					_______	_                                        Section	1
					__________                                        Accounting





		 _______ ________          1.1	 Special charging

	  The  XCHARG  UUO (CALLI -60,	pg. 1-1)  is used  to  alter  the normal
	  system charges being accumulated for the current frame.

		   _______ ______ _______ ______ ____          1.1.1	   XCHARG: modify charges (CALLI -60)

		  MOVE	  ac, [-count,,addr]
		  XCHARG  ac,
		    error return
		  normal return

	  addr:	  <function code>
		  <arguments>

	  If the  function code	is  invalid, error-return.  (see  Table	1-1  for
	  functions) Otherwise,	perform	the specified XCHARG function.

		     _______ ____ ________ ____	_______	__ __          1.1.1.1    .XCSAV: save charging data	(XCHARG	fn 0)

		  MOVE	  ac, [-1,,[.XCSAV]]
		  XCHARG  ac,
		    HALT
		  normal return

	  Save the charging data shown in Table	1-4  and skip-return.


					_____ ___                                        Table 1-1
				______ _________ __ ______                                XCHARG functions by number


	  Function Name	     Description

	    fn 0   .XCSAV    save charging data
	    fn 1   .XCRSC    read saved	charges
	    fn 2   .XCRCC    read current charges
	    fn 3	     (obsolete)	reset charges
	    fn 4   .XCSET    set charges
	    fn 5   .XCTRN    write transaction charge
	    fn 6   .XCTCC    write tru checkpoint
	    fn 7   .XCUCF    use tru charging factor







					   1-1
	  Accounting			    1			YAMM edition 2.1


		     _______ ____ _____	_______	_______	__ __          1.1.1.2    .XCRSC: read saved	charges	(XCHARG	fn 1)

		  MOVE	  ac, [-count,,addr]
		  XCHARG  ac,
		    error return
		  normal return

	  where	<addr> points to a <count>-long	table of the form
		  wd 0	  .XCRSC  ; function code
		  wd 1	  mask	  ; see	Table 1-4
		  wd 2+		  ; see	below

	  If the process has not done an .XCSAV, or if <count> less than 2, take
	  the error return.  If	c<addr+1>=0 read the saved charge that	is given
	  when	c<mask>=0  into	addr+2	and  skip return.   Otherwise,	for each
	  marked bit set  (as indicated	by  c<mask>), deposit the  saved charges
	  beginning at	addr+2 and continuing  for length <count>.   Skip return
	  upon completion.

		     _______ ____ _______ _______ _______ __ __          1.1.1.3    .XCRCC: read current charges (XCHARG fn 2)

		  MOVE	  ac, [-count,,addr]
		  XCHARG  ac,
		    error return
		  normal return

	  where	<addr> points to a <count>-long	block of the form
		  wd 0	  .XCRCC  ; function code
		  wd 1	  mask	  ; see	Table 1-4
		  wd 2+		  ; see	below

	  If <count> less  than	2, take	the  error return.  If	c<addr+1>=0 read
	  the current charge that is  given when c<mask>=0 into	addr+2	and skip
	  return.  Otherwise, for each marked bit set (as indicated by c<mask>),
	  deposit the  current charges	beginning at  addr+2 and  continuing for
	  length <count>.  Skip	return upon completion.	 Otherwise, Skip-return.
	  Note that the	process	need not do an .XCSAV before reading the current
	  charges.

		     _______ ___ _______ _______ __ __          1.1.1.4    .XCSET: set charges (XCHARG fn 4)

		  MOVE	  ac, [-count,,addr]
		  XCHARG  ac,
		    error return  ; c(<ac>) := error code
		  normal return

	  where	<addr> points to a <count>-long	block of the form
		  wd 0	  .XCSET  ; function code
		  wd 1	  mask	  ; see	Table 1-4
		  wd 2+		  ; see	below

	  If the process does not  have	XCharge	(XC) license, or if  the process
	  has not done an .XCSAV, or if	<count>	less than 4 or greater	than the
	  number  of  components  +  2,	or  if	the  system  is	 running without
	  accounting, or if <mask> has any bit <j> set where <j> is greater than
	  <count>-2, take the error return; otherwise, let <errmsk> initially be
	  0,  and  for	<j>  from 0  to	 min(<count>-2,	 the  number  of savable
	  components), perform the following:

					   1-2
	  September 6, 1984		    1			      Accounting


	      If c(<addr>+2+<j>) is less than the corresponding	 saved value
	      or more than the corresponding current value, set	<errmsk> bit
	      <j>  and leave  the  component unchanged;	 otherwise,  set the
	      corresponding charge component to	c(<addr>+2+<j>).

	  IF any bits are set in <errmsk>, error-return; otherwise, skip-return.

		     _______ _____ ___________ _______ _______ __ __          1.1.1.5    .XCTRN: write transaction charges (XCHARG fn 5)

		  MOVE	  ac, [-count,,addr]
		  XCHARG  ac,
		    error return  ; ac/	error code
		  normal return

	  addr:	  wd 0	  .XCTRN  ; function code
		  block	n	  ; user supplied data
	  count=  .-addr

	  If the process  does not have	XCharge	 (XC) license, or if  <count> is
	  less than 2, or  if <count> is greater than  '27, or if the  system is
	  running without accounting, take the error return; otherwise,	 write a
	  transaction  record  containing  the specified  data	into  the stream
	  accounting file as record type '17.

	  The user supplied data may contain up	to '26 words.  The format of the
	  data must be	agreed upon by the  user and the  accounting department.
	  No signifigance is placed on the data	by the operating system.


					_____ ___                                        Table 1-3
				    ______ _____ _____                                    .XCSET Error Codes


	  code	 condition

	  0	 process does not have XCharge (XC) license
	  1	 no save (.XCSAV) done
	  2	 system	running	without	accounting
	  3	 bad component value; bits 0-32	of AC is <errmsk>
	  4	 bad <count>
	  5	 too many bits in <mask>


		     _______ _____ ___ _________ __________ _______ __ __          1.1.1.6    .XCTCC: Write TRU Component Checkpoint (XCHARG fn 6)

		  MOVE	  AC,[-count,,[.XCTCC]]
		  XCHARG  AC,
		    error return  ;AC contains <error code>
		  normal return	  ;AC unchanged

	  Where	the <error code> is from Table 1-3 .

	  The value of <count> is ignored by the system; (this	calling	sequence
	  has been chosen to be	consistent with	that of	other XCHARG functions).

	  If the caller	lacks XCharge  (XC) license, or	if no  stream accounting
	  is active, take the error return.


					   1-3
	  Accounting			    1			YAMM edition 2.1


	  Generate a TRU component  checkpoint record in the  accounting stream,
	  which	records	 the value of  each component at  the time of  the call.
	  Take the normal return.

		   ______ _______          1.1.2	   Saving Charges

	  A process (with or without XCharge (XC) license) can save  the current
	  charging data	 into the  monitor's table by  executing the  .XCSAV UUO
	  (XCHARG fn 0,	pg. 1-1).


					_____ ___                                        Table 1-4
			       ______ ______ _____ _______                               XCHARG Charge Table Entries


	  mask GETTAB	description

	  0    .GTKM2	kilo-core microcycles (high-order)
	  1    .GTKM1	kilo-core microcycles (low-order)
	  2    .GTMC2	microcycles (high-order)
	  3    .GTMC1	microcycles (low-order)
	  4    .GTELP	kilo-core seconds (elapsed time*size)
	  5    .GTBCS	kilo-core break	characters input
	  6    .GTCIN	characters input
	  7    .GTCOT	characters output
	  10   .GTBET	block i/o elapsed time (seconds)
	  11   .GTBIO	block i/o characters
	  12   .GTSRN	kilo-core ENTERs + RENAMEs
	  13   .GTSLK	kilo-core LOOKUPs
	  14   .GTSIN	kilo-core disk blocks read
	  15   .GTSOT	kilo-core disk blocks written
	  16   .GTERN	# ENTERs + # RENAMEs
	  17   .GTDLK	# LOOKUPs
	  20   .GTRCT	disk blocks read
	  21   .GTWCT	disk blocks written
	  22   .GTMPC	# VCREATs + (4 * # .CHMFPs)
	  23   .GTPWS	# pages	added to working set
	  24		kilo-core pages	added to wkg set (high-order)
	  25		kilo-core pages	added to wkg set (low-order)


		   _______ _______ _______          1.1.3	   Reading Current Charges

	  The current charges  can all be obtained  from GETTAB	tables,	 but the
	  .XCRCC UUO (XCHARG fn	2, pg. 1-2) is more convenient to use,	since it
	  reads	the charges into a table of the	same format as used by the other
	  XCHARG functions.












					   1-4
	  September 6, 1984		    1			      Accounting


		   _______ _______          1.1.4	   Setting Charges

	  The  normal	use  of	  the  above  three   XCHARG  functions	  by  an
	  XCHARG-licensed program is as	follows: first,	do an .XCSAV to	save the
	  current charges; then	process	a transaction; then do an .XCRSC  and an
	  .XCRCC to read the saved and current charges,	compute, for each charge
	  component, what the frame is to be charged (the result must be between
	  the corresponding saved and current values); then do an .XCSET to pass
	  the monitor to the computed charges.

	  It is	important to note that the .XCRSC and .XCRCC functions	read the
	  selected  components into  contiguous	locations  into	the  user's data
	  block, but the .XCSET	function expects to find each component	value in
	  the position it would	be in if <mask>	were all ones.	The  easiest way
	  to accomplish	this is	to always read all charge components  when doing
	  an .XCRSC or .XCRCC.

	  To set the  charges, a program  executes the .XCSET  UUO (XCHARG fn 4,
	  pg. 1-2).

		   ___ _________ __________          1.1.5	   TRU Component Checkpoint

	  Certain XC-licensed programs	may use	another	XCHARG	function, .XCTCC
	  UUO (XCHARG fn 6, pg.	1-3), to place a TRU Component Checkpoint record
	  in the accounting  stream.  Such records  are	useful in  analyzing the
	  resource demands placed upon the system by heavily-used programs.


		 _______ ________          1.2	 Royalty Charging

	  Any program can add a	royalty	charge to the current frame's  TRU count
	  by  executing	the  TYMCHG UUO	 (CALLI	-56, pg. 1-6).	 Any  process or
	  program running on the Tymcom-X  may have one	or more	 Royalty Product
	  ID's associated with it according to product licensing agreement files
	  maintained by	 Tymshare Marketing.  A	 Royalty product can  record the
	  fact	that it	 was  executed by  issuing the	PUTROY	UUO (CALLI -124,
	  pg. 1-5).  Persons  wishing to have  Royalty Product ID's  assigned to
	  their	programs should	contact	Marketing.

		   _______ ___ _______ ______ __ ______	______ _____          1.2.1	   PUTROY: Put Royalty Record in Stream	(CALLI -124)

		  MOVE	  ac,[BYTE (1)<flag> (35)<royalty product ID>]
		  PUTROY  ac,
		   error return	  ; AC unchanged
		  normal return	  ; AC unchanged

	  The meaning of <flag>	will be:
	  <flag>=0	  This record signals the beginning of a
			  Royalty session
	  <flag>=1	  This record signals the end of a Royalty session


	  If the accounting system  is not operating (stream  accounting records
	  are not being	written	to accounting files) then take the error return;
	  otherwise write a stream record as shown in table Table 1-6 .

	  <royalty product ID>'s are not  to be	invented by the	callers	 of this
	  UUO; they must  be cleared thru Marketing  to	be certain that	 they do
	  not conflict with those in use for other Royalty Products.
					   1-5
	  Accounting			    1			YAMM edition 2.1


		   _______ ___ ___ _______ ______ ____          1.2.2	   TYMCHG: add TRU charges (CALLI -56)

		  MOVE	  ac, [charge]
		  TYMCHG  ac,
		  skip return only

	  where	<charge> is the	number of TRUs to add

	  Let <TRUs> be	<charge> logically  ANDed with '377.  Add <TRUs>  to the
	  frame's  added-charge	 word,	unless doing  so  would	 make  that word
	  overflow, and	return.


					_____ ___                                        Table 1-6
			   ______ _______ ______ _____ ________                           Stream Royalty Record Words 5,6,7,10


	  word	 bits	 contents;

	  5		 program name (JBTNAM)
	  6		 program source	UFD (JBTFPN)
	  7		 current contents of premium cell JBTSOK
	  10	 0	 <begin/end flag> 0 implies that this record signals the
			 beginning of a	Royalty	session. 1 implies the end of a
			 session.
		 1-35	 Royalty Product ID



		 _______ ______	_______          1.3	 Writing Stream	Records

	  Any program can,  once and only once	during its execution,  execute a
	  PUTLSA UUO  (CALLI -63, pg. 1-6) to  output a	local  stream accounting
	  record.  The record output has the same format as a RUN record, except
	  that the program name	field is specified by the caller of PUTLSA.  The
	  UUO is useful	for tracking variant versions of a program.

	  A process  with Jacct	(JL)  license can cause	 the monitor to	 write a
	  LOGINN, CHKPNT, LOGOUT, or  uptime record by executing the  PUTSAR UUO
	  (CALLI -62, pg. 1-7).

		   _______ _____ _____ ______ _____ ______ ______ ____          1.3.1	   PUTLSA: write local stream acctg record (CALLI -63)

		  MOVE	  ac, [SIXBIT /identifier/]
		  PUTLSA  ac,
		  only return

	  If a	PUTLSA has  already been done  since the  last RUN/RUNSEG/START,
	  just return; otherwise, write	a PUTLSA stream	accounting record, using
	  <identifier> for word	5 unless <identifier> is null (c(<ac>) =  0), in
	  which	case using the current program name, then return.








					   1-6
	  September 6, 1984		    1			      Accounting


		   _______ _____ ______	_____ ______ ______ ____          1.3.2	   PUTSAR: write stream	acctg record (CALLI -62)

		  MOVEI	  AC, ADDR
		  PUTSAR  AC,
		    error return  ; AC/	error code
		  normal return

	  where	<addr> points to a block of the	form
		  wd 0	bits 0-8    type
			bits 30-35  record length
		  wd 1+		    ; contents of record

	  If the system	is running without accounting, or if the process  is not
	  licensed to write  a record of type  <type>, or if <record  length> is
	  incorrect for	a record of type  <type>, or if	<type> is bad,	take the
	  error	 return;  otherwise, write  a  stream accounting  record  of the
	  specified type, from	the <record length>  words of data  beginning at
	  <addr>+1, and	skip-return.

	  Currently, Jacct (JL)	 license is required to	 write each of	the four
	  writable record types	(40-43).






































					   1-7
	  Accounting			    1			YAMM edition 2.1


					_____ ___                                        Table 1-8
				    ______ _____ _____                                    PUTSAR error codes


	  code	 condition

	  0	 system	running	without	accounting
	  1	 insufficient license
	  2	 bad <record length> for the type
	  3	 bad <type>



		 ______	__________ ____          1.4	 Stream	Accounting Data

	  The monitor  writes records of  accounting information which	are read
	  from a pseudo-device called ACT by a program called CHKPNT  and stored
	  by it	into daily accounting files.

	  The monitor writes  stream accounting	records	for  certain significant
	  events such as the running of	a program outside of a	user's directory
	  or  the  setting  of	license	 by  a	process.   In  addition, certain
	  privileged programs  (such as	LOGINN,	 LOGOUT	and CHKPNT)  can request
	  the monitor to write stream accounting records by using the PUTSAR UUO
	  (CALLI -62, pg. 1-7),	and any	program	can write a single  local stream
	  accounting record (for purposes of tracking) once during its execution
	  by using the PUTLSA UUO (CALLI -63, pg. 1-6).


					_____ ____                                        Table 1-8b
			      ______ __________	______ _____                              Stream Accounting	Record Types


	  type	 description

	  0	 GET/RUN/R command, RUN/RUNSEG UUO
	  1	 EXIT UUO, ac field 0
	  2	 EXIT UUO, ac field nonzero
	  3	 SETNAM	UUO
	  4	 START command
	  5	 REENTER command
	  6	 DDT command
	  7	 project code changed
	  10	 .XCSET	XCHARG function	executed
	  11	 system	initialization
	  12	 date or time change during timesharing
	  13	 PUTLSA	record
	  14	 SETLIC	UUO
	  15	 SETE UUO
	  16	 license set by	RUN UUO
	  40	 LOGINord
	  41	 CHKPNT	record
	  42	 LOGOUT	record
	  43	 uptime	record (written	by CHKPNT when it comes	up)
	  400	 CHKPNT	restart	(only words 0 and 1 present)
	  401	 error (inconsistent data from ACT) (only wds 0	and 1)
	  402	 dummy (used to	pad to the end of a disk block)


					   1-8
	  September 6, 1984		    1			      Accounting


					_____ ___                                        Table 1-9
			     ______ __________ ______ _______                             Stream Accounting Record Lengths


	  type	 length	(octal words)

	  0-6	 10
	  7	 10
	  10	 36
	  11	 2
	  12	 6
	  13	 10
	  14	 10
	  15	 10
	  16	 3
	  40	 7
	  41	 41
	  42	 41
	  43	 3



					_____ ____                                        Table 1-9b
			   ______ ______ ____ ______ _____ ___                           Stream Record Std. Header words 0-4


	  word	 bits  contents

	  0	 0-8   type
		 9-17  frame number
		 18-28 terminal	type info or 0
		 29-35 length (including this word)
	  1	 lh    date in days since 1 Jan	1964 GMT
		 rh    time in seconds since midnight GMT
	  2	       frame AUN
	  3	       high-order TRUs (except LOGINN record)
	  4	       low-order TRUs (except LOGINN record)



					_____ ____                                        Table 1-9c
		       ______ ______ _____ ___ ________	____ ______                       Stream Record types 0-6 (GET/RUN	etc) format


	  word	 contents

	  0-4	 Standard Stream Header
	  5	 SIXBIT	program	name
	  6	 progran ppn (frame FPN)
	  7	 .GTSOK	contents TYMCHG	UUO (CALLI -56,	pg. 1-6)









					   1-9
	  Accounting			    1			YAMM edition 2.1




					_____ ____                                        Table 1-9d
			   ______ ____________ ______ _____ ___                           Change Project-Code Record words 5-7


	  word	 bit   contents

	  5	       chars 1-5 of new	project	code (ASCII)
	  6	       chars 6-10 of new project code
	  7	 0-13  chars 11-12 of new project code
		 14-34 0
		 35    project code verify bit



				       _____ ____                                       Table 1-10
			  ______ ______________	______ _____ ___                          System Initialization	Record words 0-1


	  word	 contents

	  0	 standard header, but frame = 0
	  1	 same contents as word 0



				       _____ _____                                       Table 1-10b
			       ____ ______ ______ _____	___                               Date Change Record words	0-5


	  word	 contents

	  0-4	 standard header; word 1 contains old date and time
	  5	 new date,,time



				       _____ _____                                       Table 1-10c
			 _____ ______ __________ ______	_____ ___                         Local Stream Accounting Record	words 5-7


	  word	 contents

	  5	 SIXBIT	program	name or	PUTLSA argument
	  6	 program ppn (JBTFPN)
	  7	 .GTSOK	contents (see TYMCHG UUO (CALLI	-56, pg. 1-6))












					   1-10
	  September 6, 1984		    1			      Accounting




				       _____ _____                                       Table 1-10d
			       ___________ ______ _____	___                               SETLIC/SETE Record words	5-7


	  word	 contents

	  5	 SIXBIT	program	name
	  6	 program ppn (frame FPN)
	  7	 license set



				       _____ ____                                       Table 1-11
			   _______________ ___ ______ _____ ___                           License-Setting RUN Record words 0-2


	  word	 contents

	  0	 standard header
	  1	 standard date,,time word
	  2	 license set



				       _____ _____                                       Table 1-11b
				 ______	______ _____ ___                                 LOGINN	Record words 3-6


	  word	 contents

	  3	 chars 1-5 of project code given to LOGINN
	  4	 chars 6-10
	  5	 chars 11-12 (left-justified)
	  6	 32 bits of supervisor data for	line



				       _____ _____                                       Table 1-11c
				 ______	______ _____ ___                                 Uptime	Record words 0-2


	  word	 contents

	  0	 standard header, but frame number = 0
	  1	 standard date,,time format
	  2	 jiffies since system loaded











					   1-11
	  Accounting			    1			YAMM edition 2.1




				       _____ _____                                       Table 1-11d
				 _______ ______	_____ ___                                 Restart Record	words 0-1


	  word	 contents

	  0	 standard header, but frame number = 0
	  1	 standard date,,time format



				       _____ ____                                       Table 1-12
			      ______ _____ ______ _____	___                              Stream Error Record words	0-1


	  word	 contents

	  0	 standard header, but frame number = 0
	  1	 date,,time of last good record	read






































					   1-12
	  September 6, 1984		    1			      Accounting


				       _____ ____                                       Table 1-13
			  ______ ___ ______ ______ ______ ______                          LOGOUT and CHKPNT stream record format


	  word	   contents

	  0 - 4	   standard header Table 1-9b
	  5	   blocks of storage for the AUN logging out.  -1 if CHKPNT
			 record	or if other frames remain logged-in under this
			 AUN
	  6	   high-order kilo-core-microcycles
	  7	   low-order kilo-core microcycles
	  10	   lookups
	  11	   lookups*size
	  12	   size*(enters+renames)
	  13	   size*blocks read
	  14	   size*block written
	  15	   tymnet chars	input
	  16	   tymnet chars	output
	  17	   size*seconds	elapsed
	  20	   seconds connected (excludes detached	time)
	  21	   size*break chars
	  22	   blocks read
	  23	   blocks written
	  24	   supervisor login info low-order 32 bits
	  25	   enters+renames
	  26	   remote peripheral (RMT620) seconds (obsolete)
	  27	   remote peripheral chars input/output	(obsolete)
	  30	   premium charge (contents of JBTSOK)
	  31	   port	Block I/O elapsed seconds
	  32	   port	Block I/O chars	transferred
	  33	   hi-order microcycles
	  34	   low-order microcycles
	  35	   mapped pages	+ created pages
	  36	   pages put into working set
	  37	   hi-order size*(pages	put in working set0
	  40	   low-order size*(pages put in	working	set)






















					   1-13
	  Accounting			    1			YAMM edition 2.1


				       _____ ____                                       Table 1-14
			       ______ ______ ______ ______                               XCHARG stream record format



	  The values in	words 10 (octal) through 35 of XCHARG records are
	  differences between values which were	current	at the moment XCHARG was
	  executing, and values	supplied by the	user or	previously saved.  In
	  effect, these	amounts	were "given away".

	  word	 contents

	  0-4	 standard stream header
	  5	 SIXBIT	program	name
	  6	 progran ppn (frame FPN)
	  7	 .GTSOK	contents
	  10	 .GTKM2	Table 1-4
	  11	 .GTKM1
	  12	 .GTMC2
	  13	 .GTMC1
	  14	 .GTELP
	  15	 .GTBCS
	  16	 .GTCIN
	  17	 .GTCOT
	  20	 .GTBET
	  21	 .GTBIO
	  22	 .GTSRN
	  23	 .GTSLK
	  24	 .GTSIN
	  25	 .GTSOT
	  26	 .GTERN
	  27	 .GTDLK
	  30	 .GTRCT
	  31	 .GTWCT
	  32	 .GTMPC
	  33	 .GTPWS
	  34	 hi-order .GTPWS*size
	  35	 low-order .GTPWS*size

	  see also Table



















					   1-146 