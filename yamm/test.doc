
          December 5, 1984                  1               Frames and Processes


                                        Section 1                                        _______ _
                                   Frames and Processes                                   ______ ___ _________

                                    Table of Contents



          SubSection


          1.1      Frame Identification    1-1
          1.1.1       Account User Numbers (AUN,PPN,FPN)    1-1
          1.1.2       User and Process Names    1-2
          1.1.3       CHGPPN: change frame PPN (CALLI +74)    1-2
          1.1.4       GETPPN: get frame PPN (CALLI +24)    1-2
          1.1.5       PJOB: get frame number (CALLI +30)    1-2
          1.1.6       SETNAM: set frame name (CALLI +43)    1-2

          1.2      Privilege    1-3
          1.2.1       SETPRV: set frame privilege word (CALLI -11)    1-3
          1.2.2       SETMAL: set mail-waiting bit (CALLI -17)    1-5
          1.2.3       SETMAI: set new mail waiting bit (CALLI -145)    1-5
          1.2.4       SETINA: set inactivity timeout (CALLI -146)    1-5

          1.3      Frame License    1-6
          1.3.1       CHKLIC: check settable license (CALLI -31)    1-6
          1.3.2       SETE: set frame license (CALLI -7)    1-7
          1.3.3       SETLIC: set process license (CALLI -10)    1-8

          1.4      Frame Status    1-8
          1.4.1       SETJAL: set frame status bits (CALLI -21)    1-8

          1.5      Session control operations    1-10
          1.5.1       LOGIN: log a frame in (CALLI +15)    1-10
          1.5.2       Project Codes    1-10
                         CHPRJ: change project code (CALLI -61)    1-11
          1.5.3       Restricted Command Mode    1-11
                         SETRCF: set restricted cmnd file (CALLI -57)    1-12
          1.5.4       Special Command Mode    1-12
          1.5.5       Logout On Stop    1-12
          1.5.6       LOGOUT: log a frame out (CALLI +17)    1-12
          1.5.7       Alternate Logout Program    1-12
                         LOGOFF: Run Alternate Logout Program
                          (CALLI -130)    1-12
                         SETALP: Set Alternate Logout Program
                          (CALLI -127)    1-13
          1.5.8       EVICT: Cause Notice to Quit Interrupt (CALLI -134)    1-13
          1.5.9       HANG: hang a port or frame or frames (CALLI -32)    1-14

          1.6      Frame Generation and Control Operations    1-14
          1.6.1       Per Frame Program Number    1-15
          1.6.2       Universal Frame ID    1-15
          1.6.3       Frame Descriptors    1-15
                         Absolute FD    1-16
                         Other Frame FD    1-17
                            SETOTF: set other-frame FD (CALLI -126)    1-17
                         Handles    1-17
                            Family FD's    1-18
                            Created Handle    1-18
                                           1-i

          Frames and Processes              1                   YAMM edition 2.1

          SubSection
          1.6.4       Access Rights    1-18
                         Maximum Frame Rights    1-18
                         Handle Rights vs. Effective Rights    1-21
          1.6.5       FRMOP: Frame Operation (op code 044)    1-21
          1.6.6       Tree manipulation FRMOPs    1-24
                         .FOCFM: create frame (FRMOP fn 1)    1-24
                         .FOGFT: Graft Frame Subtree (FRMOP fn 24)    1-26
          1.6.7       Memory manipulation FRMOPs    1-27
                         .FORVA: read frame virtual address (FRMOP fn 2)    1-27
                         .FOWVA: write frame virtual address
                          (FRMOP fn 3)    1-27
                         .FOREP: VREPLC to/from another frame
                          (FRMOP fn 7)    1-27
                         .FOVRM: VREMOV in another frame (FRMOP fn 10)    1-28
                         .FOVCL: VCLEAR in another frame (FRMOP fn 11)    1-28
                         .FOGET: Setup frame core image from file
                          (FRMOP fn 32)    1-28
                         .FOSAV: SAVE frame core image on file
                          (FRMOP fn 34)    1-28
                         .FOSSA: SAVE frame core image on SHR file
                          (FRMOP fn 35)    1-28
          1.6.8       State manipulation FRMOPs    1-29
                         .FOJMP: gate jump to frame (FRMOP fn 0)    1-29
                         .FOSAA: start frame at absolute address
                          (FRMOP fn 4)    1-30
                         .FOHLT: halt frame (FRMOP fn 5)    1-31
                         .FORPC: Read Frame PC (FRMOP fn 6)    1-31
                         .FOCLR: Clear a Frame (FRMOP fn 14)    1-31
                         .FOSVA: start frame at vector address
                          (FRMOP fn 22)    1-31
                         .FOHST: Read Halt Status Block (FRMOP fn 23)    1-32
                         .FOCON: continue frame (FRMOP fn 25)    1-34
                         .FOGIN: Gate-jump Initialization (FRMOP fn 26)    1-34
                         .FORUN: RUN program in frame (FRMOP fn 33)    1-34
                         .FOSTP: stop frame for non-privileged user
                          (FRMOP fn 41)    1-35
                         .FOFCF: force command on frame (FRMOP fn 42)    1-35
                         .FOCPC: change project code for frame
                          (FRMOP fn 43)    1-35
          1.6.9       Rights and Handles FRMOPs    1-36
                         .FOCFH: Create Handle (FRMOP fn 12)    1-36
                         .FODFH: Destroy Handle (FRMOP fn 13)    1-38
                         .FORSI: Read Standard Access Rights Info
                          (FRMOP fn 15)    1-38
                         .FORAR: Read Handle Access Rights (FRMOP fn 16)    1-39
                         .FORER: Read Handle Effective Rights
                          (FRMOP fn 17)    1-39
                         .FOSMF: Set Max Frame Rights (FRMOP fn 20)    1-40
                         .FOCHR: Change Handle Rights (FRMOP fn 21)    1-40
                         .FOVCH: Validate Child Rights (FRMOP fn 27)    1-40
                         .FOCAR: Read Child Access Rights (FRMOP fn 30)    1-41
                         .FOCER: Read Child Effective Rights
                          (FRMOP fn 31)    1-41
                         .FORFA: Read Frame Attribute (FRMOP fn 36)    1-41
                         .FOWFA: Write Frame Attribute (FRMOP fn 37)    1-41
                         .FOXFA: Exchange Frame Attributes (FRMOP fn 40)    1-41
          1.6.10      EXIT: stop frame execution (CALLI +12)    1-42
          1.6.11      FLEXIT: fail exit, don't continue (CALLI -142)    1-42
          1.6.12      FLSTOP: fail exit, continue allowed (CALLI -147)    1-43
                                           1-ii

          December 5, 1984                  1               Frames and Processes

          SubSection
          1.6.13      SETSTV: set start vector address (CALLI -137)    1-43

          1.7      Temporary files    1-43
          1.7.1       TMPCOR: do TMPCOR file i/o (CALLI +44)    1-44
          1.7.2       .TCRRF: read TMPCOR file (TMPCOR fn 1)    1-44
          1.7.2       .TCRDF: delete TMPCOR file (TMPCOR fn 2)    1-44
          1.7.3       .TCRWF: write TMPCOR file (TMPCOR fn 3)    1-44
          1.7.4       .TCRRD: read TMPCOR directory (TMPCOR fn 4)    1-45
          1.7.4       .TCRDD: clear TMPCOR directory (TMPCOR fn 5)    1-45
          1.7.5       .TCRFS: get free space count (TMPCOR fn 0)    1-45


          Table

          1-4      Frame Privilege Word    1-4
          1-7      Frame License Bits    1-7
          1-9      Frame Status Word    1-9
          1-16     Frame Descriptor Format    1-16
          1-20     Access Rights Definitions    1-20
          1-22     FRMOP standard error codes    1-22
          1-23     FRMOP calls by function    1-23
          1-24     FRMOP functions by number    1-24
          1-26     .FOCFM error codes    1-26
          1-32     System Start Vector Indicies    1-32
          1-33     Halt Status Classes & Types    1-33
          1-37     Rules for .FOCFH handle creation    1-37
          1-39     .FORSI Item Numbers    1-39
































                                          1-iii

          December 5, 1984                  1               Frames and Processes





                                        Section 1                                        _______ _
                                   Frames and Processes                                   ______ ___ _________




          Tymcom-X  provides  slots  called "frames"  in  which  virtual address
          spaces  may  be  created and  programs  run.   Previous  monitors have
          allowed only  one address space  to be created  by an  incoming Tymnet
          circuit.   Since this  address space  was the  root of  all activities
          generated by the user, it became known as a "job".  P034/C allows many
          such  address spaces  to be  generated in  a controlled  fashion  by a
          single terminal user or incoming circuit.  Therefore "job"  has become
          an ambiguous term.

          The entire complex of activities invoked by such a user or  circuit is
          known as a "session".  We  have attempted to eliminate the  word "job"
          from this manual, using  instead "session" and "frame", where  each is
          appropriate.

          All of the information kept by  the monitor about a frame is  keyed on
          an Absolute Frame number.  This number is assigned by the monitor when
          it  receives a  login message  from Tymnet,  or when  a  frame creates
          another frame.  Absolute Frame numbers are reassigned when a  frame is
          killed (logged out).

          More information about how frames operate upon one another to create a
          multi-frame session can be found on 1-14.


          1.1    Frame Identification                 _____ ______________

          1.1.1    Account User Numbers (AUN,PPN,FPN)                   _______ ____ _______ _____________

          An  Account User  Number (AUN)  consists of  an 18-bit  Global Account
          Number (GAN) and  an 18-bit Universal User  Number (UUN).  The  AUN is
          used to identify  a frame for  accounting and some  security purposes.
          It is similar to DEC's PPN:  the term PPN is used in this  document to
          refer to those AUNs associated with the file system, and in some cases
          the  terms "project  number" and  "GAN", and  "programmer  number" and
          "UUN" are used interchangibly.

          A frame has associated with it three AUNs:
              1)  the "frame AUN" is  the AUN corresponding to  the username
                  under which the frame logged in
              2)  the "frame PPN" is initially the same as the frame AUN but
                  may  be changed  by the  CHGPPN UUO  (CALLI +74, pg. 1-2).
                  It  identifies  the  default  directory  for  file  access
                  operations; it and the frame AUN together  determine which
                  files a frame is considered to own (see )
              3)  the "frame FPN" is the AUN corresponding to  the directory
                  from which the  current (or last)  program was run.   If a
                  process is  running with  Home File  (HF) the  file system
                  will allow it access to files in the FPN directory.


                                           1-1

          Frames and Processes              1                   YAMM edition 2.1


          1.1.2    User and Process Names                   ____ ___ _______ _____

          There are two names which are maintained for each frame:
              1)  the user name which corresponds to the accounting  AUN and
                  is the name  supplied by the user  when logging in  to the
                  system.
              2)  the  process  name  which  is  the  name  of  the  program
                  currently loaded in the frame's virtual memory.
          The  user name  is provided  by the  LOGIN UUO  (CALLI +15, pg. 1-10).
          The  process  name  is  automatically  set  by  the  RUN  UUO (CALLI ,
          pg. )  as well  as the  RUN and  GET commands.   A process  may change
          its  own name  by executing  a SETNAM  UUO (CALLI +43,  pg. 1-2).  The
          loader typically  does a  SETNAM to the  name of  the program  it just
          loaded.

          1.1.3    CHGPPN: change frame PPN (CALLI +74)                   _______ ______ _____ ___ ______ ____

                  MOVE    AC, [ppn]
                  CHGPPN  AC,
                    error return  ; no Jacct (JL) license
                  normal return

          If  the process  does  not have  Jacct  (JL) license,  take  the error
          return; otherwise, set the frame PPN to <ppn> and skip-return.

          1.1.4    GETPPN: get frame PPN (CALLI +24)                   _______ ___ _____ ___ ______ ____

                  GETPPN  AC,
                  return1
                  return2

          Set AC to the frame PPN.  Nonskip-return if JB.JAC = 0, or if JB.JAC =
          1 and this  is the only frame  running with this PPN.   Skip-return is
          JB.JAC = 1 and there are other frames running with this PPN.

          1.1.5    PJOB: get frame number (CALLI +30)                   _____ ___ _____ ______ ______ ____

                  PJOB    AC,
                  only return

          Set AC to the caller's Absolute Frame number, and return.

          1.1.6    SETNAM: set frame name (CALLI +43)                   _______ ___ _____ ____ ______ ____

                  MOVE    AC, [SIXBIT /program name/]
                  SETNAM  AC,
                  only return

          Set the frame's program name to <program name> and clear the frame FPN
          (this effectively turns off Home File (HF) license, since there are no
          files with PPN 0,,0).








                                           1-2

          December 5, 1984                  1               Frames and Processes


          1.2    Privilege                 _________

          The initial value  of .GTPRV for a  frame is provided either  when the
          LOGINN program  performs a  LOGIN UUO  (CALLI +15, pg. 1-10),  or when
          another frame performs a  .FOCFM UUO (FRMOP fn 1, pg. 1-24).   Some of
          the  bits  and  fields   in  the  privilege  word   actually  describe
          privileges, and cannot be changed without license; others, such as the
          monitor mode or time zone fields, can be altered by anyone.

          1.2.1    SETPRV: set frame privilege word (CALLI -11)                   _______ ___ _____ _________ ____ ______ ____

                  MOVE    AC, priv
                  SETPRV  AC,
                  only return

          where <priv> is a frame privilege word, as shown in Table 1-4 

          Set those fields in the current frame's frame privilege word which are
          marked  with "*"  in  Table 1-4  to  the the  corresponding  fields of
          <priv>, leaving the unmarked fields unchanged.  If the JP.COR field is
          greater than JP.CRM, reduce it to JP.CRM.

          Return.




































                                           1-3

          Frames and Processes              1                   YAMM edition 2.1


                                        Table 1-4                                         _____ ___ 
                                   Frame Privilege Word                                   _____ _________ ____


          Symbol   Bits      Description

          * - indicates that this field is settable with the SETPRV UUO, (see
                             1-3).

          JP.LOS   1B0       * logout on stop
          JP.NAT   1B1       * no attach at login
          JP.DST   1B2       * daylight savings applies
          JP.ZON   37B7      * applicable time zone (see Table ).
          JP.MAI   1B8       new mail-waiting
          JP.INA   1B9       * use default inactivity timeout
          JP.CMD   1B10      * special command mode
          JP.COR   177B17    * max core for frame
                             (max / 4) + 1 where max is the maximum number of
                             pages that can exist in the frame's address space
                             at any one time.  This field can be set to any
                             value up to the value stored in JP.CRM
          JP.EXO   1B18      execute only program
          JP.DOP   3B20      * disconnect options
                             one of the following which determine the action
                             taken upon disconnect (circuit zapper received on
                             command port):
                             .JPLOG    0         Logout on disconnect
                             .JPDET    1         Detach on disconnect
                             .JPCON    2         Continue on disconnect
                             .JPDTO    3         Detach (15 min timeout)
          JP.TYM   1B21      Tymshare proprietary
          JP.ASV   1B22      account supervisor
          JP.MAL   1B23      mail-waiting
                             set by the SETMAL UUO, and cleared by the command
                             processor when it prints the "MAIL WAITING"
                             message.
          JP.XOG   1B24      execute only get
                             Set by the monitor while it is in the process of
                             loading an execute-only program.
          JP.BUD   1B25      tru budget beind
          JP.RCM   1B26      * restricted command mode.
          JP.MOD   3B28      * monitor mode
                             .JPMPD    0         PDP-10 mode
                             .JPMXE    1         XEXEC mode
                             .JPMXJ    2         XEXECJ (Japan)  mode
                             .JPMSU    3         SUDS mode
          JP.CRM   177B35    maximum value for JP.COR which can be set by SETPRV












                                           1-4

          December 5, 1984                  1               Frames and Processes


          1.2.2    SETMAL: set mail-waiting bit (CALLI -17)                   _______ ___ ____________ ___ ______ ____

                  MOVEI   AC, addr
                  SETMAL  AC,
                  only return

          where <addr> points to a word containing 0 to set mail-waiting
                  for all frames, or to a (2-word) SIXBIT username to set
                  mail-waiting for all frames logged-in to that username.

          If the current process cannot delete a file in SYS that has ALL  NO NO
          protection, just return.

          If c(<addr>)  = 0,  set the mail-waiting  bit for  every frame  in the
          system and return.

          If c(<addr>) is nonzero, set  the mail-waiting bit for every  frame in
          the  system  logged-in with  the  username pointed  to  by  <addr> and
          return.

          1.2.3    SETMAI: set new mail waiting bit (CALLI -145)                   _______ ___ ___ ____ _______ ___ ______ _____

                  MOVEI   ac, addr
                  SETMAI  ac,
                  only return

          This is  the same  as SETMAL  (CALLI-17) except  that JP.MAI  gets set
          instead of JP.MAL.

          1.2.4    SETINA: set inactivity timeout (CALLI -146)                   _______ ___ __________ _______ ______ _____

                  MOVEI   AC, limit in minutes
                  SETINA  AC,
                    error return
                  normal return

          If the  limit requested  by the user  is greater  than 17  bits, error
          return; otherwise, set the timeout limit to c(AC) in minutes.  When no
          job activity occurs within this limit, the process will be  evicted if
          enabled for eviction, otherwise it will be hung (killed  regardless of
          hang/zap action  specified by  user).  (See  also .GTMOD  GETTAB table
          )   If   the  inactivity   logout   bit  is   set   (see   SETINA  UUO
          (CALLI -146, pg. 1-5)),  the frame  will receive a  notice to  quit if
          there has been no activity for the time limit set (or the default time
          limit of 15 minutes).  The inactivity logout limit can also be  set or
          reset by the command

                  SET [NO]AUTOLOGOUT n

          where "n" is the time limit in minutes.









                                           1-5

          Frames and Processes              1                   YAMM edition 2.1


          1.3    Frame License                 _____ _______

          The monitor maintains three licenses for each frame, each one being an
          18-bit quantity laid out  as in Table 1-7 .  Frame license  belongs to
          the frame itself and represents the "baseline" from which  all process
          license  is  set.   Process  license  belongs  to  each  process which
          inhabits the frame; it is re-initialized when the PNO changes  and can
          be set by  the SETLIC UUO (CALLI -10,  pg. 1-8).  File license  can be
          used to set up process license if the file is loaded into the frame by
          the monitor.

          When the monitor loads a frame from a file, it sets up the process and
          saved licenses  from the  maximum of  the file  license and  the frame
          license  (see ).   The saved  license is  retained by  the  monitor so
          that  a process  can reduce  its license  with SETLIC  UUO (CALLI -10,
          pg. 1-8) and then restore it.

          The CORE n (where  n is not 0),  SSAVE, SAVE, and FINISH  commands set
          the saved and process licenses back to the frame license.

          A program  can read  the current  frame and  process license  from the
          .GTLIC  GETTAB  table.   See Table .   The  process  license  bits are
          in the left half of the  word returned and the frame license  bits are
          in the right half.

          1.3.1    CHKLIC: check settable license (CALLI -31)                   _______ _____ ________ _______ ______ ____

                  MOVE    AC, [bits,,addr]
                  CHKLIC  AC,
                  only return

          where <bits> is:

                  '1  to use c(<addr>+1) in place of the current
                      frame's process,,frame license
                  '2  to check the license settable for a file
                      rather than the license settable for the frame

          and <addr> points to a block of the form:

                  wd 0    proc,,frame lic desired (or 0,,file lic)
                  wd 1    proc,,frame current license (if '1 bit is set)
                  wd 2    XOR of file and frame PPN (if '2 bit is set)

          If the '1 bit of <bits> is set,

              let  <cproc> be  c(<addr>+1 left)  and <cframe>  be c(<addr>+1
              right); otherwise  let them be  the current process  and frame
              licenses.

          If the '2 bit of <bits> is set,

              Set <dlic> to c(<addr> right).  Turn off those bits  in <dlic>
              which  a   process  whose  license   was  <cproc>   and  whose
              relationship  to the  owner of  the file  was as  specified by
              c(<addr>+2).  Set AC right to <dlic>.

          Otherwise,

                                           1-6

          December 5, 1984                  1               Frames and Processes


              Set <dproc> to c(<addr> left) and <dframe> to c(<addr> right).
              Turn off those  bits in <dproc>  and <dframe> which  a process
              running  with  frame  license  <cframe>  and  process  license
              <cproc>  could  not  set  with  a  SETLIC  UUO.   Set   AC  to
              <dproc>,,<dframe>.

          Return.


                                        Table 1-7                                         _____ ___ 
                                    Frame License Bits                                    _____ _______ ____


          name     bits  function

          LC.WC    1B0   Write Core (POKE UUO)
          LC.RC    1B1   Read Core (VPEEK UUO)
          LC.OP    1B2   Operator (SETUUO UUO)
          LC.SY    1B3   SYSTAT (read protected GETTAB tables)
          LC.GD    1B4   Get Devices (INIT devices other than TTY and DSK)
          LC.TD    1B5   Transfer Devices (REASSI UUO)
          LC.ST    1B6   Manipulate Structures (manipulate file structures using
                         STRUUO UUO)
          LC.HF    1B7   Home Files (allow access as owner to files whose PPN
                         matches the frame FPN)
          LC.JL    1B8   Privileged System Program (set restricted bits in the
                         frame status word; set JBTAUN, JBTPPN, etc; read/write
                         any UFD)
          LC.AC    1B9   Auxiliary Circuits (build more than two aux circuits;
                         build an aux circuit to a AUN other than the frame's
                         own)
          LC.XC    1B10  XCHARG (adjust charges using the XCHARG UUO)
          LC.RPS   3B15  read privileges (a field)
                         .LCRP    1     read project
                         .LCRF    2     read files
                         .LCRA    3     read absolute
          LC.WPS   3B17  write privileges (a field)
                         .LCWP    1     write project
                         .LCWF    2     write files
                         .LCWA    3     write absolute


          1.3.2    SETE: set frame license (CALLI -7)                   _____ ___ _____ _______ ______ ___

                  MOVEI   AC, [
                          ASCII /password word 1/
                          ASCIZ /password word 2/
                          password number
                          0,,desired license
                  ]
                  SETE    AC,
                    error return
                  normal return

          Hash the two-word password  supplied and check the result  against the
          hash code stored for <password  number> in the monitor: if the  two do
          not match, error-return.


                                           1-7

          Frames and Processes              1                   YAMM edition 2.1


          Set  the frame  license  to <desired  license> after  turning  off any
          license in <desired license> that is not permitted by the  license for
          <password number> in the monitor tables, and setting the  read (write)
          privilege to 0 if <desired license> specifies more privilege than that
          table entry; then skip-return.

          1.3.3    SETLIC: set process license (CALLI -10)                   _______ ___ _______ _______ ______ ____

                  MOVE    AC, [process,,frame]
                  SETLIC  AC,
                  only return

          Let  <max> be  the  maximum of  the  current frame  license  and saved
          license.

          Set the process license to <process> after turning off any  license in
          <process>  that is  not set  in <max>,  and setting  the  read (write)
          privilege to 0 if <process> specifies more privilege than <max>.

          If <max> does not have Write  Core (WC) set, set <max> to  the current
          frame  license.   (Note  that  Write Core  (WC)  was  not  required to
          increase frame license under previous monitors.)

          Set the  frame license  to <frame>  after turning  off any  license in
          <frame> that is not set in <max>, turning off Home File  (HF) license,
          and setting the read (write) privilege to 0 if <frame>  specifies more
          privilege than <max>.

          Return.


          1.4    Frame Status                 _____ ______

          The  frame  status word  contains  various bits  which  are  mostly of
          interest to  the monitor.  The  JB.JAC and JB.LOG  bits can be  set or
          cleared by  any process  with Jacct  (JL) license,  and JB.JA2  by any
          process.

          The frame status word can be read from the .GTSTS GETTAB table.

          1.4.1    SETJAL: set frame status bits (CALLI -21)                   _______ ___ _____ ______ ____ ______ ____

                  MOVE    AC, status
                  SETJAL  AC,
                    error return
                  normal return

          If the process has Jacct (JL) license, set JB.JAC, JB.LOG,  and JB.JA2
          in the frame status word  from the corresponding bits of  <status> and
          skip-return.

          If the  process does not  have Jacct (JL)  license, set JB.JA2  in the
          frame status word  from the corresponding  bit of <status>,  then take
          the normal return if the JB.JAC  and JB.LOG bits in the two  match and
          the error return if they do not.




                                           1-8

          December 5, 1984                  1               Frames and Processes


                                        Table 1-9                                         _____ ___ 
                                    Frame Status Word                                    _____ ______ ____


          * - settable with SETJAL UUO (CALLI -21, pg. 1-8)

          Symbol   Bits     Description

          JB.RUN   1B0      Frame is runnable
          JB.CMW   1B1      Waiting to execute command
                            set only if monitor-level command (e.g. RUN, WHO,
                            FILES, LOG etc.) is pending but cannot immediately
                            be executed
          JB.MRQ   1B2      Frame has page faulted and needs the swapper to swap
                            something in; OR the monitor has swapped out the
                            frame's context pages
          JB.JNA   1B3      Frame number assigned
          JB.JER   1B4      A monitor-detected error has occurred - causes the
                            CONTINUE command to fail
          JB.ESC   1B9      An escape was typed while the frame was in command
                            mode and not in input wait
          JB.WSC   37B14    Wait state code (zero if process is running) see
                            (Table )
          JB.LOG   1B15     * Frame is logged in - cleared by the LOGOUT program
                            just before executing the LOGOUT UUO (settable with
                            SETJAL if process has Jacct (JL) license)
          JB.JRQ   1B16     Frame must be requeued
          JB.JAC   1B17     * Frame cannot be stopped; this makes the frame
                            immune to escapes and to the HALT command (settable
                            with SETJAL if process has Jacct (JL) license)
          JB.WSA   1B18     Frame needs monitor working-set adjustment.
          JB.WAK   1B19     WAKE pending (see , )
          JB.JA2   1B20     * Frame shouldn't be stopped.  A nonprivileged
                            version of JB.JAC (settable with SETJAL)
          JB.UTR   1B21     Trap to user on UUO exit
          JB.DCN   1B22     Waiting for oper action
          JB.SCH   1B23     Frame must be rescheduled
          JB.PRF   1B24     The frame has prereferenced a page that was not in
                            core
          JB.SIP   1B25     The swapper is currently bringing in pages for the
                            frame
          JB.SCP   1B26     The swapper has taken away pages from the frame
                            (cleared when the frame's in-core-protect time is
                            reset)
          JB.ECP   1B27     Exit in child frame pending.
          JB.KJP   1B29     KJOB pending for this frame.













                                           1-9

          Frames and Processes              1                   YAMM edition 2.1


          1.5    Session control operations                 _______ _______ __________

          1.5.1    LOGIN: log a frame in (CALLI +15)                   ______ ___ _ _____ __ ______ ____

                  MOVE    AC, [-count,,addr]
                  LOGIN   AC,
                  only return     ;no return if this contains a HALT

          where <addr> points to a block of <count> words:

          JBTPPN   wd 0   initial frame PPN
          JBTPRV   wd 1   initial frame privilege word
          JBTAUN   wd 2   initial frame AUN
          JBTUNM   wd 3   first word of SIXBIT username
          JBTUN1   wd 4   second word of SIXBIT username
                   wd 5   ASCII characters 1-5 of project code
                   wd 6   ASCII characters 6-10 of project code
                   wd 7   ASCII characters 11-12 of project code

          If JB.LOG is set for the frame (already logged-in), abort  the process
          and store halt status HT.ILU for the frame.

          Copy as many words as  are defined or specified by  <count>, whichever
          is smaller, into  the appropriate monitor  tables.  Set JB.LOG  in the
          frame status  word.  If JP.COR  is greater than  JP.CRM, set  JP.COR =
          JP.CRM.

          If the  instruction following  the LOGIN  UUO is  a HALT,  perform the
          equivalent of  a RELEAS UUO  for all initted  channels, type  a prompt
          sequence on  the command  port, and  put the  port into  command mode;
          otherwise just return.

          If project code is supplied in words 5-7, WRTACR is called to  write a
          LOGINN stream  record.  The  project code information  is in  the same
          form as the argument block to CHPRJ UUO (CALLI -61, pg. 1-11).

          1.5.2    Project Codes                   _______ _____

          The monitor keeps  a "project code" for  each frame.  The notion  of a
          project code is different from the notion of a frame's project number,
          or GAN.  The project code is set by the CHPRJ UUO (which, in  turn, is
          executed by LOGINN and PROJEC after they have verified,  if necessary,
          that the user is authorized to use that project code).

          The monitor also has a "project code verify" bit for each frame, which
          is also  set by  CHPRJ.  Until a  frame's project-code-verify  bit has
          been set, no license is required to change its project code;  after it
          has been set, XCharge (XC) or Read Project (RP) license is required.

          The  monitor writes  a stream  acounting record  every time  a frame's
          project code is changed.  It  also stores a frame's project  code (and
          its verify bit)  into a three-word field  (.RBPJC) in the RIB  of each
          non-UFD file created by the frame.  (The .RBPJC field in UFDs  is used
          by the LOGINN and PROJEC programs to store information  specifying how
          to (or whether to) verify project codes).

          To change  a frame's project  code, a program  executes the  CHPRJ UUO
          (CALLI -61, pg. 1-11).

                                           1-10

          December 5, 1984                  1               Frames and Processes


          1.5.2.1    CHPRJ: change project code (CALLI -61)                     ______ ______ _______ ____ ______ ____

                  MOVE    AC, [bits,,addr]
                  CHPJC   AC,
                    error return
                  normal return

          where <bits> is:
                  0   to read current project code and verify bit
                  1   to set project code but not change verify bit
                  3   to set both project code and verify bit

          where <addr> points to a block of the form:

                  wd 0            chars 1-5 of project code
                  wd 1            chars 6-10 of project code
                  wd 2 bits 0-13  chars 11-12 of project code
                  wd 2 bits 14-34 0
                  wd 2 bit 35     project-code-verify bit

          If <bits> = 0, store the current project code  and project-code-verify
          bit values into the block at <addr>, and skip-return.

          If <bits> = 1 or 3, error-return if the project-code-verify bit is set
          for the  frame and the  process does not  have either XCharge  (XC) or
          Write Absolute (WA) license.

          If <bits> = 1, set the frame's project code from the block  at <addr>,
          leaving the verify bit unchanged, and skip-return.

          If <bits> = 3, set both  the project code and the verify bit  from the
          block at <addr>, and skip-return.

          1.5.3    Restricted Command Mode                   __________ _______ ____

          If  the JP.RCM  bit is  set  in a  frame's frame  privilege  word, the
          monitor will process only the commands

                  EXIT    HALT    DETACH  CONTINUE
                  LOGOUT  KJOB    BYE

          If any other  command is typed, the  monitor will execute  the frame's
          "restricted  command  file".   That  restricted  command  program will
          receive the monitor parsed command name in SIXBIT in user AC 1.

          The restricted command file  is specified by executing the  SETRCF UUO
          (CALLI -57, pg. 1-12).












                                           1-11

          Frames and Processes              1                   YAMM edition 2.1


          1.5.3.1    SETRCF: set restricted cmnd file (CALLI -57)                     _______ ___ __________ ____ ____ ______ ____

                  MOVEI   AC, [
                          SIXBIT /filename/
                          ppn
                  ]
                  SETRCF  AC,
                  only return

          Set the frame's restricted command  file to be the file  <filename> in
          the directory <ppn> and return.

          1.5.4    Special Command Mode                   _______ _______ ____

          If the JP.CMD bit  is set in a  frame's frame privilege word,  and the
          user types an  illegal command, the  monitor will execute  the frame's
          "restricted command  program".  That  restricted command  program will
          receive the monitor parsed command name in SIXBIT in user AC 1.

          The restricted  command program is  specified by executing  the SETRCF
          UUO (CALLI -57, pg. 1-12).

          1.5.5    Logout On Stop                   ______ __ ____

          If the JP.LOS bit is  set in the frame's frame privilege  word, LOGOUT
          will be forced on  the frame if the  frame is being stopped.   If this
          bit is  set, Restriced  Command Mode will  be forced  on the  frame at
          command dispatch time.

          JP.LOS  can  be  set  with  SETUUO  UUO  (CALLI ,  pg. ),  but  cannot
          be cleared.

          1.5.6    LOGOUT: log a frame out (CALLI +17)                   _______ ___ _ _____ ___ ______ ____

                  LOGOUT
                  ; no return

          If JB.LOG is 1, just do an EXIT UUO.

          Otherwise,  release  all  resources held  by  the  frame,  restore its
          command port to the initial state, stop the frame, and clear its frame
          status word.

          1.5.7    Alternate Logout Program                   _________ ______ _______

          1.5.7.1    LOGOFF: Run Alternate Logout Program (CALLI -130)                     _______ ___ _________ ______ _______ ______ _____

                  MOVSI   AC,<start-addr-increment>
                  LOGOFF  AC,
                    error return          ; can't run required program
                  no-ALP-set return       ; KJOB pending and no ALP



          The KJOB  pending bit  is set by  the LOGOUT  program when  the LOGOFF
          sequence is begun.

          If "KJOB pending" is set for the caller's process, and if an Alternate

                                           1-12

          December 5, 1984                  1               Frames and Processes


          Logout  Program  has  been  established  by  SETALP  UUO  (CALLI -127,
          pg. 1-13)   then   attempt   a  RUN   UUO   (CALLI ,   pg. )   on  the
          Alternate Logout Program  (ALP). If "KJOB pending"  is set but  no ALP
          has been set, take the <no-ALP-set> return.

          If the RUN succeeds, do not  return to the caller.  If the  RUN fails,
          abort the process and store halt status HC.xxx for the frame.

          If "KJOB pending" is not set, run (SYS)LOGOUT.

          1.5.7.2    SETALP: Set Alternate Logout Program (CALLI -127)                     _______ ___ _________ ______ _______ ______ _____

                  MOVEI   AC,<addr>
                  SETALP  AC,
                   error return   ;AC unchanged
                  normal return   ;AC unchanged

          where the arguments at <addr> are:

          ADDR:   SIXBIT /<device>/
                  PPN
                  SIXBIT /<filename>/


          If an Alternate  Logout Program has  already been established  for the
          caller, or if the logout  process is already underway, take  the error
          return.

          Store <filename> and  <PPN> for later  use by LOGOFF  UUO (CALLI -130,
          pg. 1-12).

          1.5.8    EVICT: Cause Notice to Quit Interrupt (CALLI -134)                   ______ _____ ______ __ ____ _________ ______ _____

                  MOVE    AC,[<flag>,,<frame>]
                  EVICT   AC,
                   error  return
                  normal return   ;AC contains <channel number>

          where <flag> is as follows:

                  1   cause the interrupt
                  0   simply return <channel number>

          If the caller does not have .ARHLT rights to <frame>, or if  the frame
          does not exist, take the error return without modifying AC.

          Set AC to  the software interrupt channel  on which .IANTQ  (notice to
          quit)  is assigned  for the  target frame.   If the  interrupt  is not
          assigned in the target frame, set AC to 0 and take the normal return.

          If EV.NTQ  was set in  lh(AC), cause an  interrupt on  the appropriate
          channel for the target frame.

          EVICT also sets PV.LOS (logout  on stop) in the target frame  to force
          logout if the program terminates without explicitly logging out.

          Take the normal return.


                                           1-13

          Frames and Processes              1                   YAMM edition 2.1


          1.5.9    HANG: hang a port or frame or frames (CALLI -32)                   _____ ____ _ ____ __ _____ __ ______ ______ ____

                  MOVE    AC, [bits,,frame or port]
                  HANG    AC,
                    error return
                  normal return

          where <bits> is:

                  '20   to not detach before logout
                  '10   to hang a line already hung
                   '4   to hang all frames then go to "BOOTS LOADED"
                   '2   to force logout even if the frame has JP.DET or JP.TIM s
                   '1   is specifying a frame rather than a port number

          If the process does not  have Write Core (WC) license, take  the error
          return.

          If <bits>='10,

              If <port> is logged-in, take the error return.

              Otherwise send  a zapper  on the  (already zapped)  <port> and
              take the normal return.

          Otherwise, if <port> does not exist or is not logged-in, or if <frame>
          does not exist, take the error return.

          If  the '4  bit is  set  in <bits>,  set the  system  super-shut, then
          perform the equivalent of a HANG  UUO with <bits> = '2 for  every port
          in the system.

          If the '1 bit is set in <bits> (indicating that a frame rather  than a
          port is being specified), proceed as if that frame's command  port had
          been specified.   (If the frame  is running detached,  attach it  to a
          fake port and proceed).

          Simulate the effect of a  circuit zapper arriving at the  port, except
          that, if the port is a frame's command port and bit '2 is set in bits,
          always  force a  logout for  the frame  regardless of  the  setting of
          JP.TIM and JP.DET in its frame privilege word.

          Note that even a successful self-hang takes the normal return  and the
          job continues to run until the next clock tick.


          1.6    Frame Generation and Control Operations                 _____ __________ ___ _______ __________

          A variety of operations are available as subfunctions of the FRMOP UUO
          (op code 044, pg. 1-21) to allow any process to create,  delete, move,
          and control the contents and privileges of other frames.  For  a quick
          summary, see Table 1-23 .

          These operations allow a process to exercise all the control over what
          goes on in another  frame that could be  exercised by the user  at his
          terminal under previous monitors.  The result is that a  terminal user
          can develop a session  which consists of numerous address  spaces [the
          different  frames] with  different programs  in them,  related  to one

                                           1-14

          December 5, 1984                  1               Frames and Processes


          another in a hierarchy known as  a "frame tree".  A session is  a tree
          of frames  whose root frame  is ordinarily created  by the  monitor in
          response to a network login message.

          This root frame may contain any process, although in many  cases users
          will choose to have it contain the system executive program XEXEC.

          The  root  frame  may create  "children"  (subordinate  frames), place
          programs  in those  child frames,  run them  in parallel  or serially,
          control   their   input/output  abilities,   handle   their  exception
          conditions (ILL MEM REF, etc.), give access to them to other processes
          in  the  system,  and  even "hand  them  off"  (graft  them)  to other
          sessions.

          1.6.1    Per Frame Program Number                   ___ _____ _______ ______

          For  each frame  the  system maintains  a Program  Number.   Every GET
          operation on a  frame causes its PNO  to be incremented.  For  a given
          frame, then, the PNO uniquely identifies the program or process in the
          frame.  If a new program is placed in the frame, process  handles (see
          1-17) to the previous  program become invalid because the  new program
          is identified by a new PNO.

          The operations which change a frame's PNO are:
              1)  .FOGET and GET command
              2)  .FORUN, RUN command, and RUN UUO
              3)  .FOCLR

          1.6.2    Universal Frame ID                   _________ _____ __

          For each  frame the  system maintains  a Universal  Frame ID  which is
          assigned at  creation of the  frame and is  guaranteed unique  to that
          frame  during  any incarnation  of  the system  (i.e.,  between system
          bring-up and crash or take-down).  Absolute Frame Numbers on the other
          hand, do not uniquely identify frames, since a frame occupying  slot N
          might be destroyed and another frame created later in the same slot N.
          The new  frame would, however,  have a  new UID by  which it  could be
          distinguished from the  old frame in  that same Absolute  Frame Number
          slot.

          1.6.3    Frame Descriptors                   _____ ___________

          Frame Descriptors are  the means by which  a user program  talks about
          frames.  Frame Descriptors (FD's)  come in several types  described in
          Table 1-16 .   An  FD  is  an  18-bit  quantity.  In  Table 1-16   the
          bit-positions  are  shown  assuming  that the  FD  is  in  a low-order
          half-word, as is the case with most FRMOP arguments.

          The  subtype  field is  ignored  for  those types  which  do  not have
          subtypes.  For instance, an Absolute FD (type 0) has no  subtypes; the
          subtype field is treated as being 0, so that the Absolute FD functions
          like a "job number" functioned under previous monitors.  Likewise, the
          FD.SLF  has no  subtype; nor  is the  data field  used; if  the caller
          passes 777777 as his FD, he  is referring to himself, in the  same way
          that -1 has  traditionally referred to  "self" in UUOs  under previous
          monitors.

          Any fields which  are documented as "ignored"  should be set  to zero,

                                           1-15

          Frames and Processes              1                   YAMM edition 2.1


          with  the exception  of  777777 for  FD.SLF.  Non-zero  data  in these
          fields may produce strange results in the future.

          1.6.3.1    Absolute FD                     ________ __

          FD.ABS handles  exist automatically by  their nature.  An  Absolute FD
          (FD.ABS)  will  work  only  if  some  (depending  on   the  operation)
          combination of the following conditions are met:
              1)  caller has Systat (SY) license
              2)  caller has JP.TYM (Tymshare Proprietary) privilege
              3)  caller has Read Core (RC) or Write Core (WC) license
              4)  caller is parent of target
              5)  caller has same AUN as target
              6)  caller  has  same GAN  as  target, and  caller  has JP.ASV
                  (Acct. Supv.) privilege

          In the last 2  cases, the caller is  given access to the  target frame
          equivalent to Systat (SY) license.


                                       Table 1-16                                        _____ ____ 
                                 Frame Descriptor Format                                 _____ __________ ______



          the frame descriptor format looks like TSXXXX
          where each character is an octal digit as follows:

                  T    = type code
                  S    = subtype code
                  XXXX = index (abs frame no, handle index, etc)

          the values for these fields are as follows:

          FD.ABS   0B20  absolute type FD
                         X field is frame number
          FD.FAM   1B20  family type FD
                         FM.CHL   0B23  child subtype
                                  X field is child frame number
                         FM.PAR   1B23  parent subtype
          FD.OTF   2B20  "other" frame
                         uses FD specified by SETOTF UUO (CALLI -126, pg. 1-17)
          FD.CRH   3B20  created handle type FD
                         X field is handle index
                         CH.FRM   0B23  frame handle subtype
                         CH.PRO   1B23  process handle subtype
                         CH.LIC   2B23  license handle subtype
          FD.SLF   7B20  self
                         S and X fields are ignored










                                           1-16

          December 5, 1984                  1               Frames and Processes


          1.6.3.2    Other Frame FD                     _____ _____ __

          Passing a FD of type FD.OTF causes the system to use the FD  which was
          most  recently given  to the  SETOTF UUO  (CALLI -126,  pg. 1-17).  In
          addition  to FRMOP,  the following  UUOs will  operate on  the "other"
          frame if the appropriate flag is set in their arguments:
              1)  VPROT UUO (CALLI , pg. )
              2)  PAGSTS UUO (CALLI , pg. )
              3)  VALPAG UUO (CALLI , pg. )
              4)  PREREF UUO (CALLI , pg. )
              5)  VCREAT UUO (CALLI , pg. )
              6)  VREMOV UUO (CALLI , pg. )
              7)  VCLEAR UUO (CALLI , pg. )
              8)  VREPLC UUO (CALLI , pg. )
              9)  .CHMFP UUO (CHANIO fn , pg. )

          1.6.3.2.1    SETOTF: set other-frame FD (CALLI -126)                       _______ ___ ___________ __ ______ _____

                  MOVEI   AC,FD
                  SETOTF  AC,
                    error return
                  normal return   ; AC/ previous "other frame" FD if any

          If <FD> is of type FD.OTF, take the error return.

          Exchange the  FD in  AC with  the monitor's  "other frame"  FD storage
          location.  Take the normal return.

          This "other frame" FD can be used by subsequent UUOs to operate on the
          indicated  frame without  explicitly passing  the FD  to the  UUO. See
          .CHMFP UUO (CHANIO fn , pg. ) for example.

          1.6.3.3    Handles                     _______

          A "handle"  is a  system construct which  is a  means of  accessing or
          changing data associated with a frame.  It may be useful to consider a
          handle as a "path"  between frames.  The most significant  facts about
          handles are:
              1)  A handle describes the operations for which its holder may
                  use  it upon  the object  (target frame)  which  it names.
                  These are the Handle Access Rights
              2)  A handle may be passed from frame to frame.
          These two  facts are an  important part of  the basis  of constructing
          "capability-based systems"--that is, systems of programs  which cannot
          talk about  or affect  anything except those  other objects  for which
          they  have been  given a  name.   The "name"  or "path"  given  to any
          program is the FD itself.












                                           1-17

          Frames and Processes              1                   YAMM edition 2.1


          1.6.3.3.1    Family FD's                       ______ ____

          Some   handles  are   generated  automatically   by  the   .FOCFH  UUO
          (FRMOP fn 12,  pg. 1-36).  The FD's  for  these handles  are  the type
          FD.FAM, subtypes  FM.CHL and FM.PAR.  They govern the  effects parents
          can have upon their children and vice-versa.

          1.6.3.3.2    Created Handle                       _______ ______

          The .FOCFH UUO (FRMOP fn 12, pg. 1-36) produces "created  handles", or
          FD's of type FD.CRH.  Created handles are of three subtypes:
              1)  Frame Handle.  A frame handle is valid for as long  as the
                  frame it points to exists.  If the frame is destroyed, the
                  handle becomes invalid but may continue to exist  for some
                  time.
              2)  Process Handle.  A Process handle is valid only so long as
                  the program  within the  target frame  is not  replaced by
                  another program. In  other words, a process  handle grants
                  access to one incarnation of a program.
              3)  Licensed Handle.  A  Licensed handle grants access  to its
                  target  absolute  frame number  according  to  the license
                  stored in the handle.  (An Absolute Frame  Descriptor also
                  can function  as a licensed  handle because the  access it
                  grants is determined by the process license of  the caller
                  at the moment the Absolute FD is used.)

          1.6.4    Access Rights                   ______ ______

          A system of Access Rights (AR) bits allows a very subtle  and flexible
          set of security measures  to be developed between  processes executing
          in the system.  Access Rights define the ability of a frame to perform
          certain functions.  See Table 1-20  for the names and meanings of AR's
          currently defined.

          1.6.4.1    Maximum Frame Rights                     _______ _____ ______

          Every frame  has some Access  Rights, and the  full set of  the Access
          Rights that it has at any one time is called the Maximum Frame Rights;
          these  are  the maximum  rights  which  any CH.FRH  to  the  frame may
          possess.  When a frame is created, the Maximum Frame Rights  (MFR) are
          initialized to ALL rights (as listed in Table 1-20 ).  When  a program
          is loaded into the frame with the monitor's RUN or GET operations, the
          protection code of the  file and the PPN  of the frame into  which the
          file is being  loaded determine the setting  of the MFR: the  frame is
          either the file's Owner (same PPN), project-mate (same GAN) or is part
          of "the public".  In addition,  licenses on the frame and  file affect
          the initial MFR.  These are the conditions:
              1)  if  the  file  is  Execute-Only  (see  )  set  the  MFR to
                  allow  only  a  limited set  of  control  functions  to be
                  applied to the frame.  Prevent any operations  which would
                  break Execute-Only security, such as .FORVA.
              2)  if the file  has more license than  the frame, but  is not
                  Execute-Only, set the MFR  to allow frame handles  to read
                  information about the  frame and exercise the  limited set
                  of control functions which are allowed in the Execute-Only
                  case.   Prevent  any  operations which  could  be  used to
                  exploit the license.
              3)  if neither of these conditions applies, set the MFR to ALL
                  rights.
                                           1-18

          December 5, 1984                  1               Frames and Processes


          Another way of setting the MFR is to use the .FOSMF  UUO (FRMOP fn 20,
          pg. 1-40).  This operation  allows a frame to  set its own MFR  or the
          MFR of any other frame to which it has .ARSMF access.

          Note that a process  has the option of  setting its own MFR  down from
          their initial values in order to protect any information it  wishes to
          keep to itself.

          Note also that if a  frame wishes to access another frame,  and either
          manipulate that frame or gather information about that frame,  then it
          must have the proper license to do so.  See Table 1-20 .
















































                                           1-19

          Frames and Processes              1                   YAMM edition 2.1


                                       Table 1-20                                        _____ ____ 
                                Access Rights Definitions                                ______ ______ ___________


          oct name    when   lic          description

          0   .ARRDM  R      RC           Read Map
                                          find out things about a map (i.e.,
                                          VPGSTS, WSCTL to read WS size, etc.)
          1   .ARCHM  W      WC           Change Map
                                          do VREMOV,VCREAT,.CHMFP, .FOREP to
                                          other frame, etc.
          2   .ARRAC  R      RC           Read ACs
          3   .ARWAC  W      WC           Write ACs
          4   .ARVAR  R      RC           Read VM data
                                          also VREPLC or .FOREP with protection
                                          .PRRO, etc.
          5   .ARVAW  W      WC           Write VM data
                                          also VREPLC or .FOREP with protection
                                          .PRRW
          6   .ARHLT  W      WC           Halt frame
          7   .ARSTP  X      WC           Stop frame
                                          like escape/^C, this is trappable by
                                          the target frame
          10  .ARHNG  W      WC           Hang frame
          11  .ARCLR  X      WC           Clear frame and release devices
                                          frame must be stopped first
          12  .ARSVA  X      WC           Start at Vector Address
                                          see .FOSVA UUO (FRMOP fn 22,
                                          pg. 1-31)
          13  .ARSAA  W      WC           Start at Arbitrary Address
          14  .ARRVA  W      WC           Restart at Vector Address
          15  .ARRAA  W      WC           Restart at Arbitrary Address
          16  .ARRUN  X      TP,SY,AUN    Read User Name
                                          also allows checking JBTSTS to see if
                                          logged-in.  See Table 1-9 .
          17  .ARRDS  R      SY,AUN       Read Frame State
                                          read PC,Halt Status Block. See
                                          Table 1-33 .
          20  .ARRAD  R      SY,AUN       Read Accounting Data
                                          read TRU components, etc.
          21  .ARRFI  R      SY,AUN       Read Frame Information
                                          read AUN,PPN,UID, etc.
          22  .ARRPI  R      SY,AUN       Read Process Info
                                          read FPN,Process Name, PNO, etc.
          23  .ARSMF  W      WC           Set Max Frame Rights
                                          (set in the MFR of a frame on GET or
                                          RUN operations only if the frame has
                                          write access to the file named in
                                          order to prevent creation of handles
                                          to an EXO or RDO program which have
                                          .ARSMF rights over the program)
          24  .ARWAK  W      WC           Do Wake UUO on frame
          25  .ARATT  W      JL,AUN       Attach Port
          26  .ARDET  W      WC           Take Port away (Detach)
          27  .ARTKP  W      WC           Take parent away from frame
          30  .ARGVP  W      JL           Give parent to frame
          31  .ARGVC  W      WC           Give child to frame

                                           1-20

          December 5, 1984                  1               Frames and Processes


          Explanations:          _____________
          oct   octal Access Right number
          name  symbol name for this AR number
          when  conditions under which this AR is set in initial MFR
                "W"   set when JP.EXO is off AND Process License
                      is less than or equal to Frame License
                "R"   set when JP.EXO is off AND Process License
                      is greater than Frame License, and under "W" conditions
                "X"   set when JP.EXO is set and under "R" and "W" conditions
          lic   license which grants this AR.
                "AUN" means frames have same AUN, or caller has JP.ASV
                      and his GAN matches that of target frame
                "TP" means JP.TYM set in JBTPRV


          1.6.4.2    Handle Rights vs. Effective Rights                     ______ ______ ___ _________ ______

          Every  FD (and  thus every  handle) has  associated with  it a  set of
          "handle access rights", or  "handle rights", which are the  rights for
          which  the  handle may  possibly  be exercised  on  its  target frame.
          However, if the target frame  has reduced its MFR, some handles  to it
          may  contain rights  which are  not presently  effective.   A handle's
          "effective rights" are those for  which it is currently good  over the
          target frame.  Effective rights may or may not be identical  to handle
          rights.  These two sets of rights may be read with
              1)  .FORAR UUO (FRMOP fn 16, pg. 1-39)
              2)  .FORER UUO (FRMOP fn 17, pg. 1-39)
              3)  .FOCAR UUO (FRMOP fn 30, pg. 1-41)
              4)  .FOCER UUO (FRMOP fn 31, pg. 1-41)

          1.6.5    FRMOP: Frame Operation (op code 044)                   ______ _____ _________ ___ ____ ____

                  MOVE    AC,[function,,FD]
                  FRMOP   AC,addr
                    error return          ; AC/ error code
                  normal return

          where
           FD       = a frame descriptor
           addr     = address of the argument or argument block
           function = one of the functions of Table 1-23 

          Perform  <function>   on  the  indicated   frame.   If  an   error  is
          encountered, return an error code from Table 1-22  (except as noted).















                                           1-21

          Frames and Processes              1                   YAMM edition 2.1


                                       Table 1-22                                        _____ ____ 
                                FRMOP standard error codes                                _____ ________ _____ _____


          Name     Code  Description
          FENOH%   1     no handle in slot
          FEBDI%   2     Bad (nonmatching) universal ID number
          FENRT%   3     no rights to do operation
          FEBDF%   4     bad frame number
          FENLC%   5     not enough license
          FEUND%   6     undefined frame descriptor type
          FENCH%   7     not a child
                         FD said child, but gave non-child frame number
          FECLP%   10    cannot lock context pages
          FEBAR%   11    bad access rights code
          FENPR%   12    no parent
                         (frame without a parent asked for its parent)
          FEBFD%   13    bad family dispatch type
          FEBDH%   14    bad handle index number in FD
          FEBFN%   15    bad FRMOP function code
          FEADB%   16    address bad
                         replicate failed in .FORVA or .FOWVA
          FEIOE%   17    page I/O error
          FEALR%   20    already running
          FEALH%   21    already halted
          FECSJ%   22    cannot stop frame with JACCT set
          FEFHE%   23    handle descriptor expected, not given
          FEFHU%   24    handle (index) already used
          FENFH%   25    no frame handle indices left
          FEBCN%   26    bad count
          FEBTN%   27    bad table number
          FEBHT%   30    bad handle type
          FECCH%   31    cannot create handle (access failure)
          FEBSV%   32    bad start vector offset
          FECII%   33    cannot make child its own inferior in frame tree
          FECCF%   34    cannot continue frame
          FECFJ%   35    cannot do frame jump
                         target frame PC not in user mode
          FEREM%   36    rights exceed maximum
                         rights in target handle exceed max specifications
                         All FRMOPs except .FOREP, .FOVRM, .FOCLR return these
                         error codes in AC right half.  .FOREP and friends
                         return these codes in AC bits 0-5, VP in bits 8-17, and
                         the VREPLC, VCLEAR or VREMOV error code (see
                         Table ) in AC right half.














                                           1-22

          December 5, 1984                  1               Frames and Processes


                                       Table 1-23                                        _____ ____ 
                                 FRMOP calls by function                                 _____ _____ __ ________


          Name     Code  AR req'd.        Description

          Tree manipulation

          .FOCFM   1     -none-           create frame (1-24)
          .FOGFT   24    .ARGVC,.ARGVP    graft frame (1-26)


          Memory manipulation

          .FORVA   2     .ARVAR           read virtual address (1-27)
          .FOWVA   3     .ARVAW           write virtual address (1-27)
          .FOREP   7     .ARCHM           replicate pages to/from frame (1-27)
          .FOVRM   10    .ARCHM           VREMOV for other frame (1-28)
          .FOVCL   11    .ARCHM           VCLEAR for other frame (1-28)
          .FOGET   32    .ARVAW           GET file into frame (1-28)
          .FOSAV   34    .ARVAR           SAVE frame on file (1-28)
          .FOSSA   35    .ARVAR           SSAVE frame on file (1-28)


          State manipulation

          .FOJMP   0     .ARSVA or .ARSAA Gate Jump to frame (1-29)
          .FOSAA   4     .ARSAA           start at absolute address (1-30)
          .FOHLT   5     .ARHLT           halt frame (1-31)
          .FORPC   6     .ARRDS           read user mode PC (1-31)
          .FOCLR   14    .ARCLR           clear stopped frame (1-31)
          .FOSVA   22    .ARSVA           start at start vector (1-31)
          .FOHST   23    .ARRDS           read halt status block (1-32)
          .FOCON   25    .ARSVA           continue frame (1-34)
          .FOGIN   26    -none-           Gate jump Init (1-34)
          .FORUN   33    .ARVAW           RUN program in frame (1-34)
          .FOSTP   41    .ARSTP           halt frame (1-35)
          .FOFCF   42    .ARVAW           force command on frame (1-35)
          .FOCPC   43    .ARFFI           change project code for frame (1-35)


          Rights and Handles

          .FOCFH   12    -none-           create frame handle (1-36)
          .FODFH   13    -none-           destroy frame handle (1-38)
          .FORSI   15    -none-           return standard access rights info
                                          (1-38)
          .FORAR   16    -none-           read handle's access rights (1-39)
          .FORER   17    -none-           read handle's effective rights (1-39)
          .FOSMF   20    .ARSMF           set maximum frame rights (1-40)
          .FOCHR   21    -none-           change rights for handle (1-40)
          .FOVCH   27    -none-           Validate Child's rights (1-40)
          .FOCAR   30    -none-           Read Child-to-Parent Handle Access
                                          Rights (1-41)
          .FOCER   31    -none-           Read Child-to-Parent Handle Effective
                                          Rights (1-41)
          .FORFA   36    .ARRFI           read frame attributes (1-41)
          .FOWFA   37    -none-           write frame attributes (1-41)
          .FOXFA   40    .ARRFI           exchange frame attributes (1-41)
                                           1-23

          Frames and Processes              1                   YAMM edition 2.1


                                       Table 1-24                                        _____ ____ 
                                FRMOP functions by number                                _____ _________ __ ______


          Function Name     Description

            fn 0   .FOJMP   Gate Jump to frame (1-29)
            fn 1   .FOCFM   create frame (1-24)
            fn 2   .FORVA   read virtual address (1-27)
            fn 3   .FOWVA   write virtual address (1-27)
            fn 4   .FOSAA   start at absolute address (1-30)
            fn 5   .FOHLT   halt frame (1-31)
            fn 6   .FORPC   read user mode PC (1-31)
            fn 7   .FOREP   replicate pages to/from frame (1-27)
            fn 10  .FOVRM   VREMOV for other frame (1-28)
            fn 11  .FOVCL   VCLEAR for other frame (1-28)
            fn 12  .FOCFH   create frame handle (1-36)
            fn 13  .FODFH   destroy frame handle (1-38)
            fn 14  .FOCLR   clear stopped frame (1-31)
            fn 15  .FORSI   return standard access rights info (1-38)
            fn 16  .FORAR   read handle's access rights (1-39)
            fn 17  .FORER   read handle's effective rights (1-39)
            fn 20  .FOSMF   set maximum frame rights (1-40)
            fn 21  .FOCHR   change rights for handle (1-40)
            fn 22  .FOSVA   start at start vector (1-31)
            fn 23  .FOHST   read halt status block (1-32)
            fn 24  .FOGFT   graft frame (1-26)
            fn 25  .FOCON   continue frame (1-34)
            fn 26  .FOGIN   Gate jump Init (1-34)
            fn 27  .FOVCH   Validate Child's rights (1-40)
            fn 30  .FOCAR   Read Child-to-Parent Handle Access Rights (1-41)
            fn 31  .FOCER   Read Child-to-Parent Handle Effective Rights (1-41)
            fn 32  .FOGET   GET file into frame (1-28)
            fn 33  .FORUN   RUN program in frame (1-34)
            fn 34  .FOSAV   SAVE frame on file (1-28)
            fn 35  .FOSSA   SSAVE frame on file (1-28)
            fn 36  .FORFA   read frame attributes (1-41)
            fn 37  .FOWFA   write frame attributes (1-41)
            fn 40  .FOXFA   exchange frame attributes (1-41)
            fn 41  .FOSTP   halt frame (1-35)
            fn 42  .FOFCF   force command on frame (1-35)
            fn 43  .FOCPC   change project code for frame (1-35)


          1.6.6    Tree manipulation FRMOPs                   ____ ____________ ______

          1.6.6.1    .FOCFM: create frame (FRMOP fn 1)                     _______ ______ _____ ______ __ __












                                           1-24

          December 5, 1984                  1               Frames and Processes



                  MOVSI   AC,.FOCFM
                  FRMOP   AC,addr
                    error return  ; AC/ error code from Table 1-26 
                  normal return   ; AC/ child frame desc

          addr:   flags,,CNT
                  JBTPPN
                  JBTPRV          ; Table 1-4
                  JBTAUN          ; AUN for new frame
                  JBTUNM          ; sixbit username for given AUN
                  JBTUN1          ;
                  <license>       ; iff CF.LIC set

          where CNT is the number (0-5) of login data words that follow the head
                  word; this number does NOT include the license word, if any

          and <license> is the license bits to pass to child frame; license can 
                  the same or less than caller, but not more; non-privileged cal
                  can set non-privilege bits

          and flags are:

                  CF.OLD==1B0     ; this word is -count,,addr (old way)
                  CF.LOG==1B17    ; run LOGINN in child
                  CF.LIC==1B16    ; pass frame license of parent to child

          **********************************************************************
          **                                                                   *
          ** Note:  Older programs may use the following format for .FOCFM.    *
          **        However, this is no longer supported and should be changed *
          **        to the new format when encountered in older programs.      *
          **                                                                   *
          **********************************************************************

                  MOVSI   AC,.FOCFM
                  FRMOP   AC,[-count,,addr]
                    error return  ; AC/ error code from Table 1-26 
                  normal return   ; AC/ child frame desc

          addr:   JBTPPN          ; PPN for new frame
                  JBTPRV          ; Table 1-4
                  JBTAUN          ; AUN for new frame
                  JBTUNM          ; sixbit username for given AUN
                  JBTUN1          ;

          Create a new frame and make it a child of the caller.  Give  the frame
          the parameters given at addr.   If a parameter is not  specified (i.e.
          not  included  in count),  or  the job  is  not licensed  to  set that
          parameter, use  the corresponding parameter  from the frame  doing the
          UUO.

          If no error is detected,  skip return with the child  frame descriptor
          (see 1-15) in the AC.

          If an  error is  detected, non-skip  return with  the error  code (see
          Table 1-26 ) in the AC.


                                           1-25

          Frames and Processes              1                   YAMM edition 2.1


                                       Table 1-26                                        _____ ____ 
                                    .FOCFM error codes                                    ______ _____ _____


          name     code description
          CF.NRD   0    no disk room
          CF.FCE   1    frame capacity exceeded
          CF.BAL   2    bad arg no license
          CF.DDB   3    cannot create command port DDB


          1.6.6.2    .FOGFT: Graft Frame Subtree (FRMOP fn 24)                     _______ _____ _____ _______ ______ __ ___

                  MOVE    AC,[.FOGFT,,<FD of subtree root>]
                  FRMOP   AC,[<FD of destination frame>]
                   error return           ;AC/ Table 1-22
                  normal return

          where
           <FD of subtree root> is the FD of the root frame of a subtree
           of some existing frame tree, which is to be moved by the .FOGFT

           <FD of destination frame> is 0 or the FD of a new prospective
           parent for the subtree being moved.  If 0, the subtree is going
           to become a free-standing tree in its own right.

          If <FD  of destination frame>  is non-zero, take  the error  return if
          either
              1)  the caller is  missing .ARGVC over the  destination frame,
                  or
              2)  the caller is missing .ARGVP over the subtree being moved.

          If <FD of destination frame> is a member of the subtree rooted  in <FD
          of subtree root>, take the error return (since this would  destroy the
          tree-structure by making it into a graph).

          Take the  error return  if the  caller lacks  .ARTKP over  the subtree
          being moved, AND that subtree currently has a parent.

          Invalidate the  child-to-parent handle of  <FD of subtree>.   Give the
          new parent (if any) a handle to its new child with the same  AR's that
          existed in the parent-to-child handle of <FD of subtree> before it was
          moved.   Move the  subtree  as requested.   Leave  the MFR  of  <FD of
          subtree> unmodified.

          Take the normal return.













                                           1-26

          December 5, 1984                  1               Frames and Processes


          1.6.7    Memory manipulation FRMOPs                   ______ ____________ ______

          1.6.7.1    .FORVA: read frame virtual address (FRMOP fn 2)                     _______ ____ _____ _______ _______ ______ __ __

                  MOVE    AC,[.FORVA,,FD]
                  FRMOP   AC,addr
                    error return          ; AC/ Table 1-22
                  normal return

          addr:   <address>
                  <data>

          The contents of the virtual  address <address> in the target  frame is
          copied into <data>.

          For Access Rights required, see Table 1-23 .

          1.6.7.2    .FOWVA: write frame virtual address (FRMOP fn 3)                     _______ _____ _____ _______ _______ ______ __ __

                  MOVE    AC,[.FOWVA,,FD]
                  FRMOP   AC,addr
                    error return          ; AC/ Table 1-22
                  normal return

          addr:   <address>
                  <data>

          <data>  is copied  into the  virtual address  <address> in  the target
          frame.

          For Access Rights required, see Table 1-23 .

          1.6.7.3    .FOREP: VREPLC to/from another frame (FRMOP fn 7)                     _______ ______ _______ _______ _____ ______ __ __

                  MOVE    AC,[.FOREP,,FD]
                  FRMOP   AC,addr
                   error return           ;AC/ bits 0-5 see Table 1-22
                                               bits 6-35 see Table 
                  normal return

          addr:   <otfflg>B1+<prot>B7+<count>B17,,destination VP
                  <otfflg>B1,,source VP

          where
           <otfflg> = 1 to indicate frame specified by FD
                      0 to indicate calling frame
           <prot>   is from Table 
           <count>  is 1 to 777 specifying a range of pages

          Refer  to  the  VREPLC  UUO  (CALLI ,  pg. )  for  discussion  of this
          operation.  .FOREP differs only in that <otfflg> can be used  to cause
          the replicate to operate between the caller and target frame.







                                           1-27

          Frames and Processes              1                   YAMM edition 2.1


          1.6.7.4    .FOVRM: VREMOV in another frame (FRMOP fn 10)                     _______ ______ __ _______ _____ ______ __ ___
          1.6.7.4    .FOVCL: VCLEAR in another frame (FRMOP fn 11)                     _______ ______ __ _______ _____ ______ __ ___

                  MOVE    AC,[.FOVRM or .FOVCL,,FD]
                  FRMOP   AC,
                   error return           ;AC/ bits 0-5 see Table 1-22
                                               bits 6-35 see Table 
                  normal return

          See   VCLEAR   UUO   (CALLI ,   pg. )   and   VREMOV    UUO   (CALLI ,
          pg. )  for  a  discussion  of  these  operations.   .FOVRM  and .FOVCL
          differ only in that they operate on the frame specified by FD.

          1.6.7.5    .FOGET: Setup frame core image from file (FRMOP fn 32)                     _______ _____ _____ ____ _____ ____ ____ ______ __ ___


                  MOVE    AC,[.FOGET,,FD]
                  FRMOP   AC,addr
                   error return           ;AC/ Table 1-22
                  normal return

          addr:   EXP     count           ;number of arguments passed
                  SIXBIT  /device/
                  XWD     gan,uun
                  SIXBIT  /filename/
                  SIXBIT  /ext/           ;best left zero = unspecified
                  XWD     license,core
          count=  .-addr-1


          If any  of the conditions  named in Table 1-22  are present,  take the
          error  return.   The  AR  required to  perform  .FOGET  are  listed in
          Table 1-23 .

          Initiate  the  GET  operation  (see  GETSEG  UUO  (CALLI ,  pg. )  and
          RUN  UUO  (CALLI ,  pg. ))   into  the  target  frame  and   take  the
          normal return.

          The caller must examine the  halt status block of the target  frame to
          determine whether the GET completed successfully.  It is  possible for
          .FOGET to take  the normal return but  for the operation to  fail. For
          example, the named file may not be found.  This would result in a halt
          status  of  HT.FNF  (see  Table 1-33 ).   A  successful  GET operation
          results in HT.JSU.

          1.6.7.6    .FOSAV: SAVE frame core image on file (FRMOP fn 34)                     _______ ____ _____ ____ _____ __ ____ ______ __ ___
          1.6.7.6    .FOSSA: SAVE frame core image on SHR file (FRMOP fn 35)                     _______ ____ _____ ____ _____ __ ___ ____ ______ __ ___












                                           1-28

          December 5, 1984                  1               Frames and Processes




                  MOVE    AC,[.FOSAV or .FOSSA,,FD]
                  FRMOP   AC,addr
                   error return           ;AC/ Table 1-22
                  normal return

          addr:   EXP     count           ;number of arguments passed
                  SIXBIT  /device/
                  XWD     gan,uun
                  SIXBIT  /filename/
                  SIXBIT  /ext/           ;assumed /SHR/ or /SAV/ if 0
                  XWD     0,core
          count=  .-addr-1


          If any  of the conditions  named in Table 1-22  are present,  take the
          error return.   The AR  required by  .FOSAV and  .FOSSA are  listed in
          Table 1-23 .

          Initiate the  SAVE operation  (see )  from the  target frame  onto the
          specified file.  Take the normal return.

          The caller must examine the  halt status block in the target  frame to
          determine that the operation completed successfully.  If the UUO takes
          the normal return, it is still possible that the SAVE may not succeed.
          For example, the target frame may not have the ability to ENTER a file
          in the named directory; this would result in a halt status  of HT.EUF.
          A successful SAVE will result in HT.JSV.

          1.6.8    State manipulation FRMOPs                   _____ ____________ ______

          1.6.8.1    .FOJMP: gate jump to frame (FRMOP fn 0)                     _______ ____ ____ __ _____ ______ __ __

                  MOVE    AC,[.FOJMP,,<FD.CRH index number>]
                   or
                  MOVEI   AC,<FD.CRH index number> ;.FOJMP=0
                  FRMOP   AC,addr
                   error return           ;AC/ Table 1-22
                  normal "return"         ;AC's may all be changed

          addr:   0B17 + <start address>
              or
          addr:   1B17 + <start vector index>

          <FD.CRH index number>  is the index field  (low order 12 bits)  of the
          caller's created handle to  the target frame (see Table 1-16  ).  This
          deviation from the usual calling convention is done for efficiency.

          If <FD.CRH index  number> is invalid, or  if the caller does  not have
          .ARSAA  or .ARSVA  (as appropriate)  over the  target, take  the error
          return.

          Stop the caller frame with PC pointing at the normal return  from this
          FRMOP.  Continue processing in the target frame at the PC specified at
          <addr>.  (Note that  the target frame PC  is typically at a  gate jump
          UUO, to cause the target frame to effectively "return" from  this UUO,
          the SV.CON start vector may be used; see Table 1-32 .)

                                           1-29

          Frames and Processes              1                   YAMM edition 2.1


          Several facts should be noted about the facility provided by .FOJMP:
              1)  any frame wishing to  .FOJMP at a target frame  must first
                  create a handle to that target.
              2)  the  AC's are  completely shared  between the  jumping and
                  target frame.
              3)  the target frame can return to the original  jumping frame
                  at the normal "return" from the .FOJMP FRMOP by performing
                  its own .FOJMP with the CONTINUE vector index set.
              4)  if the target frame does return in any way, any  AC's used
                  by  the  target  but  not restored  will  be  seen  by the
                  original  jumping  frame.   This  can  facilitate  passing
                  information between otherwise disjoint address spaces.
              5)  the state  of the  command port, if  any, is  unchanged by
                  .FOJMP.
              6)  .FOJMP is fast enough to make it practical to use it  as a
                  subroutine call mechanism between frames.  It  is flexible
                  enough to implement more elaborate control structures such
                  as co-routines.
              7)  .FOJMP is not guaranteed  to work if the target  frame has
                  not  previously  done  a  .FOGIN  or  .FOJMP  of  its own,
                  although  there are  certain states  wherein it  can work.
                  The best  practice is  to initialize  a target  frame with
                  .FOGIN UUO (FRMOP fn 26, pg. 1-34).
              8)  a frame  which is stopped  because processing  jumped into
                  another frame via .FOJMP  can be restarted by  the monitor
                  command interpreter or by any frame owning a  handle which
                  allows starting that frame.  If this happens, the contents
                  of that frame's AC's are undefined.

          1.6.8.2    .FOSAA: start frame at absolute address (FRMOP fn 4)                     _______ _____ _____ __ ________ _______ ______ __ __

                  MOVE    AC,[.FOSAA,,FD]
                  FRMOP   AC,addr
                    error return          ; AC/ Table 1-22
                  normal return

          addr:   1B0+<address>           ; start at <address> in target
                      or
          addr:   <location>              ; start at address found in given
                                          ; location of target frame

          The target frame is started at the specified address.

          The second form, where the location of the start address is specified,
          is useful  for starting at  an address stored  in .JBSA,  .JBDDT, etc.
          The start address  is read from the  specified location in  the target
          frame and the frame is started at that address.

          For Access Rights required, see Table 1-23 . The target frame must not
          be running.









                                           1-30

          December 5, 1984                  1               Frames and Processes


          1.6.8.3    .FOHLT: halt frame (FRMOP fn 5)                     _______ ____ _____ ______ __ __

                  MOVE    AC,[.FOHLT,,FD]
                  FRMOP   AC,
                    error return          ; AC/ Table 1-22
                  normal return

          The target frame will be halted or set to halt when it next runs.

          For Access Rights required, see Table 1-23 . The target frame may have
          JB.JA2 set  and may be  trapping ^C.  The  target frame must  not have
          JB.JAC set (see Table 1-9 ).

          1.6.8.4    .FORPC: Read Frame PC (FRMOP fn 6)                     _______ ____ _____ __ ______ __ __

                  MOVE    AC,[.FORPC,,FD]
                  FRMOP   AC,addr
                    error return          ; AC/ Table 1-22
                  normal return

          Return the last known user mode PC for the target frame in <addr>.  If
          no  user  mode PC  is  known (ie.  just  finished a  RUN  UUO (CALLI ,
          pg. )),  return  zero.  If  the  frame is  currently  executing  a UUO
          (ie. the PC is in exec mode), return the PC of the UUO.

          For Access Rights required, see Table 1-23 .

          1.6.8.5    .FOCLR: Clear a Frame (FRMOP fn 14)                     _______ _____ _ _____ ______ __ ___

                  MOVE    AC,[.FOCLR,,FD]
                  FRMOP   AC,
                   error return           ;AC/ Table 1-22
                  normal return

          If the target frame is not stopped, take the error return.

          Set up the target to run a program which will have the same  effect as
          the "CORE  0" command,  particularly, VCLEAR  all memory,  release all
          devices, set the MFR to all  AR, and set the parent to self  rights to
          all AR.

          Take the normal return.  Upon receiving the normal return,  the caller
          cannot assume that the target is clear until the target halts.

          1.6.8.6    .FOSVA: start frame at vector address (FRMOP fn 22)                     _______ _____ _____ __ ______ _______ ______ __ ___

                  MOVE    AC,[.FOSVA,,FD]
                  FRMOP   AC,[<start vector index>]
                    error return          ; AC/ Table 1-22
                  normal return

          Positive start vector indicies specify the corresponding  offsets into
          a table in the target frame's  address space (which may or may  not be
          set  up).   The  table   is  specified  by  SETSTV   UUO  (CALLI -137,
          pg. 1-43).   Negative start  vector indicies  specify  system standard
          start locations as indicated in Table 1-32 .

          The  target frame  must be  halted.  For  Access Rights  required, see

                                           1-31

          Frames and Processes              1                   YAMM edition 2.1


          Table 1-23 . If <start vector  index> is invalid (which can  happen if
          no start vector has been set  up in the target frame), take  the error
          return.

          Start the target frame at the address specified by the contents of the
          vector location  selected by  <start vector  index>.  Take  the normal
          return.


                                       Table 1-32                                        _____ ____ 
                               System Start Vector Indicies                               ______ _____ ______ ________


          Name     Index Description
          SV.NSA   -1    normal start address (as found in .JBSA)
          SV.CCL   -2    CCL start address (normal plus one)
          SV.REN   -3    REENTER start address (as found in .JBREN)
          SV.DDT   -4    DDT start address (as found in .JBDDT)
          SV.CON   -5    CONTINUE start address


          1.6.8.7    .FOHST: Read Halt Status Block (FRMOP fn 23)                     _______ ____ ____ ______ _____ ______ __ ___

                  MOVE    AC,[.FOHST,,FD]
                  FRMOP   AC,addr
                   error return   ;ac/ Table 1-22
                  normal return

          addr:   <count>         ;number of words to return starting at
                                  ;addr+1 as follows:

          addr+1/ <halt class>,,<halt type> (see Table 1-33 )
          addr+2/ halt count
          addr+3/ PC of last halt or exit
          addr+4/ PC of last UUO
          addr+5/ sixbit <device name> if relevant
          addr+6/ class/type dependent data word
          addr+7/ another class/type dependent data word

          The system maintains for every frame a Halt Status Block which records
          significant information  when a frame  stops processing.   Frames stop
          processing for a variety of  reasons, some good and some not.   All of
          these are  recorded in  the Halt  Status Block,  which is  readable by
          another process with .ARRDS.

          The Halt Count at ADDR+2 can  be used to determine if the data  is new
          since the last time  the block was read.   If the target frame  is not
          halted, the Halt Status Block  does not reflect the frame  state, only
          the conditions prevailing at the last halt.

          If <count>  is negative,  zero or greater  than the  length of  a Halt
          Status block, or if the caller lacks .ARRDS over the target,  take the
          error return.

          Return as  much of the  Halt Status Block  as allowed by  <count>, and
          take the normal return.



                                           1-32

          December 5, 1984                  1               Frames and Processes


                                       Table 1-33                                        _____ ____ 
                               Halt Status Classes & Types                               ____ ______ _______ _ _____



          class   code description
                       type    code description

          HC.MEM  0    Memory Violations
                       HT.PCO  0    PC Out of Bounds
                       HT.IMR  1    Illegal Memory Reference
                       HT.WRV  2    Write Violation
                       HT.ADC  3    Address Check for Device X
                       HT.IMU  4    Ill Mem Ref in UUO
                       HT.IIA  5    Illegal Interrupt Address
                       HT.ABK  6    Address Break
                       HT.POV  7    PDL Overflow

          HC.SYS  1    System-Related Errors
                       HT.PIO  0    Page I/O Error
                       HT.DFL  1    Disk Full during copy of .PRCW page
                       HT.PHE  2    Paging Hardware Error
                       HT.TPL  3    Too many Pages Locked, Cannot handle fault
                       HT.CIO  4    Context Page I/O Error
                       HT.PAR  5    Parity Error(s). All Core Removed

          HC.DEV  2    Device Related Errors
                       HT.OCI  0    Output device Cannot Input
                       HT.ICO  1    Input device Cannot Output
                       HT.IDM  2    Illegal Data Mode for device X
                       HT.IUC  3    I/O to Unassigned Channel
                       HT.HDV  4    Hung Device
                       HT.DOP  5    Device X OPR action requested

          HC.ILL  3    Illegal Instruction Traps
                       HT.ILU  0    Illegal UUO
                       HT.UUE  1    UUO error
                       HT.ILI  2    Illegal Instruction
                       HT.HLT  3    Halt

          HC.EXI  4    Frame Exits
                       HT.EXI  0    Exit
                       HT.EX1  1    Exit 1,
                       HT.FEX  2    Fail Exit
                       HT.TLE  3    Time Limit Exceeded
                       HT.JSU  4    <filename> setup
                       HT.JSV  5    <filename> saved
                       HT.FCL  6    frame cleared

          HC.RUN  5    RUN,RUNSEG & GETSEG UUO errors
                       HT.TRE  0    Transmission Error
                       HT.PGN  1    N Pages Required
                       HT.DNA  2    Device Not Available
                       HT.FNF  3    <filename.ext> not found
                       HT.NSF  4    Not a Save File
                       HT.EUF  5    <filename.ext> Attempted Enter UUO Failed
                       HT.CAN  6    Core Argument Not specified (magtape only)
                       HT.MHB  7    Magtape Hiseg Format Bad
                       HT.RMF  10   Remap UUO Fatal error
                                           1-33

          Frames and Processes              1                   YAMM edition 2.1


                       HT.MGF  11   Magtape GET failure
                       HT.NSA  12   No Start Address


          1.6.8.8    .FOCON: continue frame (FRMOP fn 25)                     _______ ________ _____ ______ __ ___

                  MOVE    AC,[.FOCON,,FD]
                  FRMOP   AC,
                    error return          ; AC/ Table 1-22
                  normal return

          The target frame is started  at its current PC.  This  is functionally
          equivalent to .FORPC UUO (FRMOP fn 6, pg. 1-31) followed by .FOSAA UUO
          (FRMOP fn 4, pg. 1-30).

          For Access Rights required, see Table 1-23 . The target frame must not
          be running and must not have JB.JER on in JBTSTS (see Table 1-9 ).

          1.6.8.9    .FOGIN: Gate-jump Initialization (FRMOP fn 26)                     _______ _________ ______________ ______ __ ___

                  MOVE    ac,[.FOGIN,,0]
                  FRMOP   ac,
                   error return   ;ac/ Table 1-22
                  normal "return"

          Perform the normal FRMOP checks. Stop the calling frame and  leave its
          PC  pointing  at the  normal  "return" location.   The  caller  is now
          properly initialized to be gate jumped to with .FOJMP UUO (FRMOP fn 0,
          pg. 1-29)  from  another  frame.   Either  .FOCON   UUO  (FRMOP fn 25,
          pg. 1-34) or .FOJMP UUO  (FRMOP fn 0, pg. 1-29) will cause  this frame
          to begin execution at the normal "return" location.

          The state of the caller's command port is unchanged by gate jumping.

          1.6.8.10    .FORUN: RUN program in frame (FRMOP fn 33)                      _______ ___ _______ __ _____ ______ __ ___


                  MOVE    AC,[.FORUN,,FD]
                  FRMOP   AC,addr
                   error return           ;AC/ Table 1-22
                  normal return

          addr:   XWD     start-incr,count
                  SIXBIT  /device/
                  XWD     gan,uun
                  SIXBIT  /filename/
                  SIXBIT  /file extension/        ;best left zero = unspecified
                  XWD     license,core
          count=.-addr-1


          The  meaning of  the  items in  the block  at  <addr> is  the  same as
          explained  for   the  RUN   UUO  (CALLI ,  pg. ).    If  any   of  the
          conditions named in Table 1-22  are true, take the error  return.  The
          AR required by .FORUN are listed in Table 1-23 .

          If <count>  is less than  5 (i.e.  does not specify  all of  the items
          shown above), substitute 0 for the unspecified items.

                                           1-34

          December 5, 1984                  1               Frames and Processes


          Initiate  the  RUN  operation  (see  RUN  UUO  (CALLI ,   pg. ))  into
          the target frame.

          Take the normal return.

          The caller  of .FORUN  can determine  that the  .FORUN is  complete by
          examining the halt  status block of the  target frame.  The  fact that
          .FORUN returns normally does not mean that the operation will complete
          without error  in the target  frame.  For example,  if the  named file
          cannot be found, the target  frame will halt with halt  status HT.FNF.
          See Table 1-33 . A successful RUN will result in HT.JSU.

          1.6.8.11    .FOSTP: stop frame for non-privileged user (FRMOP fn 41)                      _______ ____ _____ ___ ______________ ____ ______ __ ___

                  MOVE    AC,[.FOSTP,,FD]
                  FRMOP   AC,
                    error return          ; AC/ Table 1-22
                  normal return

          The target  frame will be  halted or  set to halt  when it  next runs.
          This is accomplished by forcing  a HALT command (which may  by trapped
          by the target frame).

          Requires .ARSTP access right only.

          The target frame must not have JB.JAC set (see Table 1-9 ).

          1.6.8.12    .FOFCF: force command on frame (FRMOP fn 42)                      _______ _____ _______ __ _____ ______ __ ___

                  MOVE    AC,[.FOFCF,,FD]
                  FRMOP   AC,addr
                    error return
                  normal return

          ADDR:   SIXBIT/command string/

          Command string must be either KJOB, DETACH, HALT or INITIA.  Any other
          command string will error return.   If the command is valid,  then put
          the tty in command mode and force the command on the frame.  The index
          into the table where the command string is found is returned in AC.

          1.6.8.13    .FOCPC: change project code for frame (FRMOP fn 43)                      _______ ______ _______ ____ ___ _____ ______ __ ___

                  MOVE    AC,[.FOCPC,,FD]
                  FRMOP   AC,addr
                    error return
                  normal return

          addr:   wd0     <bits>          see CHPRJ UUO (CALLI -61, pg. 1-11)
                  wd1                     chars 1-5 of project code
                  wd2                     chars 6-10 of project code
                  wd3     bits 0-13       chars 11-12 of project code
                  wd3     bits 14-34      0
                  wd3     bit 35          project code verify bit (PJCUFY)

          In order to set or change the project code the user must have WP or XC
          license.  A non-privileged user may set the project code by  running a
          program which has license at login time when the CHPJC call (see CHPRJ

                                           1-35

          Frames and Processes              1                   YAMM edition 2.1


          UUO (CALLI -61, pg. 1-11)) sets the PJCUFY (this process  is performed
          only for users subject to verification).

          1.6.9    Rights and Handles FRMOPs                   ______ ___ _______ ______

          1.6.9.1    .FOCFH: Create Handle (FRMOP fn 12)                     _______ ______ ______ ______ __ ___

                  MOVE    AC,[.FOCFH,,<source FD>]
                  FRMOP   AC,addr
                   error return           ;AC/ Table 1-22
                  normal return           ;AC/ new handle FD

          addr:   <subtype>,,<FD of new handle>
                  <count>,,<location>

          location: <count> words of AR bits


          where
           <subtype> is:

                  0B17    frame handle
                  1B17    process handle
                  2B17    license handle

           <FD of new handle> is:

                  <FD.CRH>B20+<index>B35

            where <index> is 77777 to allocate first free <created handle index>
                  <index> is <created handle index> to use that specific index

          <location> is   address of AR bit table (in caller's address space)
                          to use in setting AR for the new handle

          <count> is      length of AR bit table, or 0 to set AR of new
                          handle to max allowable.

          If <FD of new handle> is  not of type FD.CRH, or if  <index> specifies
          an out-of-range  or currently  used <created  handle index>,  take the
          error return.

          If <index>=77777,  allocate a new  <created handle index>,  taking the
          error return if none exists.

          Create a new handle to  the frame specified by <source FD>,  giving it
          the  subtype  specified by  <bits>  and AR  specified  by  <count> and
          <location>.  The rules governing conversion of handles  are summarized
          in Table 1-37 .

          A <created handle index> is  a small integer much like a  software I/O
          channel number; every created handle FD has a data field which  has in
          it a <created handle index>, not an absolute frame number.  The system
          keeps, for each frame, a small array of information about  all handles
          created by that  frame; the created  handle indices select  handles in
          that array.  The  size of this array  is a system parameter  which may
          change from time to time.


                                           1-36

          December 5, 1984                  1               Frames and Processes


          If  <count>=0,  set  the AR  for  the  new handle  to  the  maximum AR
          allowable for the handle; otherwise,  set the AR according to  the bit
          table at <location>. If <count> specifies less than a  full complement
          of AR bits, assume that unspecified bits are 0.

          Set AC to the <FD of new handle>, including the  directly-specified or
          newly-allocated <index>, and take the normal return.


                                       Table 1-37                                        _____ ____ 
                             Rules for .FOCFH handle creation                             _____ ___ ______ ______ ________


          source FD type   new FD type resultant attributes



          license          license     max AR = AR of source
                                       license := license of source
                           frame       max AR = AR of source
                           process     max AR = AR of source,
                                       PNO := current PNO of target
          frame            license     license := process-license
                                       of .FOCFH caller
                           frame       max AR = AR of source
                           process     max AR = AR of source ANDed
                                       with MFR of target
                                       PNO := current PNO of target
          process          license     license := process-license
                                       of .FOCFH caller
                           frame       illegal: may not create frame handle
                                       from process handle
                           process     max AR = AR of source,
                                       PNO := PNO of source
          absolute FD      license     license := process-license
                                       of .FOCFH caller
                           frame       license := process-license
                                       of .FOCFH caller
                           process     license := process-license
                                       of .FOCFH caller
                                       PNO := current PNO of target
          .FOCFH treates source FD's of other types as follows:

          Source FD       Treated as
          FM.CHL          CH.FRM
          FM.PAR          CH.PRO
          FD.SLF          CH.PRO  with all AR set.

          To create a licensed handle with max rights
          based on the process-license of the caller (rather
          than on the license in the source handle), use
          a Frame, Process or Absolute FD as source handle.







                                           1-37

          Frames and Processes              1                   YAMM edition 2.1


          1.6.9.2    .FODFH: Destroy Handle (FRMOP fn 13)                     _______ _______ ______ ______ __ ___

                  MOVE    ac,[.FODFH,,FD]
                  FRMOP   ac,
                   error return   ;ac/Table 1-22
                  normal return

          The handle designated by FD is destroyed. If it is of type FD.CRH, the
          appropriate  <created  handle  index>  (see  .FOCFH  UUO (FRMOP fn 12,
          pg. 1-36)) is marked free.  Naturally, the frame to which FD refers is
          totally unaffected by the .FODFH.

          1.6.9.3    .FORSI: Read Standard Access Rights Info (FRMOP fn 15)                     _______ ____ ________ ______ ______ ____ ______ __ ___

                  MOVE    AC,[.FORSI,,<item>]
                  FRMOP   AC,addr
                   error return   ;AC/ Table 1-22
                  normal return   ;AC/ number of highest currently-defined
                                  ; access right

          ADDR:   <count>,,TABLE
          TABLE:  BLOCK <count>   ;for return of access rights bits

          where <item> is from Table 1-39 


          Return a bit string in TABLE describing the access rights requested by
          <item>.  As much of the  bitstring as <count> allows is  returned.  If
          <count> = 0, do not return any bitstring.  Set AC to the number of the
          highest currently defined AR and take the normal return.

          .FORSI  with <count>  = 0  should be  used by  programs which  wish to
          allocate  precisely the  right-sized argument  block for  other FRMOPs
          such  as .FORER  UUO (FRMOP fn 17,  pg. 1-39) which  manipulate access
          rights.  If N  is returned by .FORSI,  then the exact number  of words
          needed for argument blocks is the result of


                  (N + 35) / 36 (integer divide)




















                                           1-38

          December 5, 1984                  1               Frames and Processes


                                       Table 1-39                                        _____ ____ 
                                   .FORSI Item Numbers                                   ______ ____ _______


          name     item  description

          .SREXO   0     max frame rights for execute-only processes, and
                         processes loaded from licensed SWR files or files
                         read-protected against the caller
          .SRLIC   1     max frame rights for process with license greater than
                         the frame it lives in
          .SRALL   2     all rights defined by monitor
          .SRRCL   3     AR conferred by Read Core (RC) license
          .SRSYL   4     AR comferred by Systat (SY) license
          .SRTYM   5     AR conferred by JP.TYM privilege
          .SRAUN   6     AR conferred by having same AUN or JP.ASV and same GAN
          .SRJLL   7     AR conferred by Jacct (JL) license
          .SRWCL   10    AR conferred by Write Core (WC) license


          1.6.9.4    .FORAR: Read Handle Access Rights (FRMOP fn 16)                     _______ ____ ______ ______ ______ ______ __ ___
          1.6.9.4    .FORER: Read Handle Effective Rights (FRMOP fn 17)                     _______ ____ ______ _________ ______ ______ __ ___

                  MOVE    ac,[.FORAR or .FORER,,FD]
                  FRMOP   ac,addr
                   error return   ;ac/ Table 1-22
                  normal return

          ADDR:   <count>,,TABLE
          TABLE:  BLOCK <count>   ;words to return info as follows:

              word   contents
              0      subtype,,frame number (see Table 1-16 )
              1      UID           except FD.ABS (see 1-15)
              2      PNO           process handles only (see 1-15)
              3-n    access bits

          If <count> is  greater than the number  of words needed to  return all
          currently defined rights-bits,  take the error return.   (To determine
          the proper number of words, see .FORSI UUO (FRMOP fn 15, pg. 1-38))

          These two  FRMOPs return rights  associated with a  particular handle.
          .FORAR returns the AR of the handle itself.  .FORER returns the rights
          for which the handle  is currently good, which  may or may not  be the
          same as  the AR  of the  handle.  See  1-18, .FOSMF  UUO (FRMOP fn 20,
          pg. 1-40) and 1-21.  For FD.ABS,  the UID and PNO fields  are returned
          zero.  Note that  any process which needs  to know the  absolute frame
          number of a frame  to which it has a  handle can find out  that number
          with either of these FRMOPs.










                                           1-39

          Frames and Processes              1                   YAMM edition 2.1


          1.6.9.5    .FOSMF: Set Max Frame Rights (FRMOP fn 20)                     _______ ___ ___ _____ ______ ______ __ ___

                  MOVE    ac,[.FOSMF,,FD]
                  FRMOP   ac,addr
                   error return   ;ac/ Table 1-22
                  normal return

          ADDR:   <count>,,TABLE
          TABLE:  BLOCK <count>   ;for return of access rights bits
                                  ;  (see Table 1-20 )

          If the caller lacks .ARSMF rights on the target frame, take  the error
          return.

          See 1-18.  Set the MFR for  frame specified by FD.  If <count>  is too
          small to specify all AR  bits, set unspecified bits to 0.   If <count>
          is 0, set maximum rights allowed.  Take the normal return.

          1.6.9.6    .FOCHR: Change Handle Rights (FRMOP fn 21)                     _______ ______ ______ ______ ______ __ ___

                  MOVE    ac,[.FOCHR,,FD]
                  FRMOP   ac,addr
                   error return   ;ac/ Table 1-22
                  normal return

          ADDR:   <count>,,TABLE
          TABLE:  BLOCK <count>   ;for return of access rights bits
                                  ;  (see Table 1-20 )

          If FD is of type FD.ABS or FD.SLF, take the error return.

          If the AR's  at LOCATION are  less than the  current AR of  the handle
          specified by FD,  set the handle AR  to the requested values  and take
          the normal return.

          Otherwise,  unless  FD is  a  process  handle, set  the  handle  AR to
          <requested AR> AND <current AR> and take the error return.  If FD is a
          process handle, set  the AR to the  <requested AR>, invalidate  PNO in
          the handle, and take the normal return.

          1.6.9.7    .FOVCH: Validate Child Rights (FRMOP fn 27)                     _______ ________ _____ ______ ______ __ ___

                  MOVE    ac,[.FOVCH,,<FD of child>]
                  FRMOP   ac,addr
                   error return   ;ac/ Table 1-22
                  normal return

          ADDR:   <count>,,TABLE
          TABLE:  BLOCK <count>   ;for return of access rights
                                  ;  (see Table 1-20 )

          If <count> is 0, use the rights in the child-to-parent handle.  If the
          rights in the handle  of the child specified  by <FD of child>  do not
          exactly  match those  specified,  take the  error  return.  Otherwise,
          validate  that child-to-parent  handle.   It will  remain  valid until
          another program is run in the parent frame (i.e., until the PNO of the
          parent changes).  Take the normal return.


                                           1-40

          December 5, 1984                  1               Frames and Processes


          1.6.9.8    .FOCAR: Read Child Access Rights (FRMOP fn 30)                     _______ ____ _____ ______ ______ ______ __ ___
          1.6.9.8    .FOCER: Read Child Effective Rights (FRMOP fn 31)                     _______ ____ _____ _________ ______ ______ __ ___

                  MOVE    ac,[.FOCAR or .FOCER,,<FD of child>]
                  FRMOP   ac,addr
                   error return   ;ac/Table 1-22
                  normal return

          ADDR:   <count>,,TABLE

          TABLE:  BLOCK <count>   ;for return of access rights bits
                                  ;  (see Table 1-20 )

          Every child that is created owns an automatically-generated  handle to
          its parent known as its child-to-parent handle; this  handle describes
          what the child can do to its parent.

          Child-to-parent  handles  are  always  process  handles.   This causes
          child-to-parent handles to  remain valid only  so long as  the program
          (i.e., the PNO) in the parent frame remains the same.

          .FOCAR  and  .FOCER  allow  any  parent  to  read  the  info   in  the
          child-to-parent handle of each of  its children, in order to  find out
          what the children would  like to be able  to (and actually can)  do to
          it, the parent.  These FRMOPs are used to help a parent  judge whether
          or  not  to  attempt  to validate  a  child's  handle  via  .FOVCH UUO
          (FRMOP fn 27, pg. 1-40).

          Store at LOCATION information  from the child-to-parent handle  of the
          child specified by <FD of child>.  The format of the data  returned at
          LOCATION is  as described in  .FORAR UUO (FRMOP fn 16,  pg. 1-39). See
          1-21 for more discussion of Effective Rights vs. Handle Rights.

          1.6.9.9    .FORFA: Read Frame Attribute (FRMOP fn 36)                     _______ ____ _____ _________ ______ __ ___
          1.6.9.9    .FOWFA: Write Frame Attribute (FRMOP fn 37)                     _______ _____ _____ _________ ______ __ ___
          1.6.9.9    .FOXFA: Exchange Frame Attributes (FRMOP fn 40)                     _______ ________ _____ __________ ______ __ ___

                  MOVE    ac,[FN,,FD]
                  FRMOP   ac,addr
                   error return
                  normal return

          ADDR:   attribute  ,,<argument address>
                        or
          ADDR:   0,,<argument block address>
          ADDR+1: -count,,<attribute list address>

          On  error return,  FRMOP error  is in  AC right,  positive  index into
          argument/attribute table is in AC left.

          .FORFA,  .FOWFA, and  .FOXFA allow  the user  to read  or  write frame
          attributes  which  are  otherwise  unobtainable  by  the  other  FRMOP
          functions or other UUOs.

              attribute  description                        form
              1          the originating port for FD        full word

          It is intended that more attributes will be added as the  need arises.

                                           1-41

          Frames and Processes              1                   YAMM edition 2.1


          The user  will then  be able  to specify  a list  of attributes  and a
          negative count of  the attributes sought,  or an address  containing a
          block of arguments.  This block will either contain space to which all
          the frame's attributes will be  deposited on a .FORFA or else  it will
          contain attributes that will be written into the specified location so
          as to indicate a new attribute for frame FD.

          1.6.10    EXIT: stop frame execution (CALLI +12)                    _____ ____ _____ _________ ______ ____

                  EXIT
                   or
                  EXIT    1,

          Clear JB.JAC and JB.JA2.

          If the accumulator field of the EXIT call is 0,

              Perform a RELEAS for  each initted channel.  Perform  a RESET.
              Set JB.ERR.

          If the frame is detached, and has no parent frame,

              do a HANGUP  for the frame if  JP.TIM is set;  otherwise, wait
              for someone to attach to it.

          (If the frame is detached,  but has a parent frame, terminate  the UUO
          here with no further action.)

          If the accumulator field of the EXIT call was 0, move the string CR LF
          "EXIT" into the command port's output buffer.

          Print CR LF <WATCH data if any> CR LF CR LF <prompt character>  on the
          command port, and place the frame in command level.

          1.6.11    FLEXIT: fail exit, don't continue (CALLI -142)                    _______ ____ _____ _____ ________ ______ _____

                  MOVE    AC, [frame exit error code]
                  FLEXIT

          where <frame exit error code> is either 0,,<octal number> or
          SIXBIT <one word error message>


          Clear JB.JAC and JB.JA2.

          Perform  a RELEAS  for each  initted channel.   Perform a  RESET.  Set
          JB.ERR.

          If the frame is detached, and has no parent frame, do a HANGUP for the
          frame if JP.TIM is set; otherwise, wait for someone to attach to it.

          (If the frame is detached,  but has a parent frame, terminate  the UUO
          here with no further action.)

          Print CR LF "?fail exit"  <frame exit error code> "at  user" <location
          number> CR LF CR LF <prompt character> on the command port,  and place
          the frame in command level.


                                           1-42

          December 5, 1984                  1               Frames and Processes


          The <frame exit error code> also appears in the halt status  block, if
          any (see .FOHST UUO (FRMOP fn 23, pg. 1-32)).

          1.6.12    FLSTOP: fail exit, continue allowed (CALLI -147)                    _______ ____ _____ ________ _______ ______ _____

                  MOVE    AC, [frame exit error code]
                  FLSTOP

          where <frame exit error code> is either 0,,<octal number> or
          SIXBIT <one word error message>

          (The <frame exit error code> also appears in the halt status block,
          if any.)


          Clear JB.JAC and JB.JA2.

          If the frame is detached, and has no parent frame, do a HANGUP for the
          frame if JP.TIM is set; otherwise, wait for someone to attach to it.

          (If the frame is detached,  but has a parent frame, terminate  the UUO
          here with no further action.)

          Print CR LF "?fail stop"  <frame exit error code> "at  user" <location
          number> CR LF CR LF on  the command port.  The frame is not  placed at
          command level, and no prompt is printed.  Although the job is stopped,
          it may be continued.

          1.6.13    SETSTV: set start vector address (CALLI -137)                    _______ ___ _____ ______ _______ ______ _____

                  MOVE    ac,[<count>,,<addr>]
                  SETSTV  ac,
                    error return
                  normal return

          <count> locations starting at  <addr> contain start addresses  in bits
          18-35.   These   addresses  may  be   specified  by  the   .FOSVA  UUO
          (FRMOP fn 22,  pg. 1-31)  by giving  their  displacement  from <addr>.
          This is intended to provide a  means for a program to be started  at a
          fixed number of addresses without the parent frame having knowledge of
          the actual address and without  the need for the parent frame  to have
          the rights to start at an arbitrary address.

          The  RESET  UUO  (CALLI ,  pg. )  does  not  clear  the  vector.   The
          vector is cleared only when a new program is setup in the frame.


          1.7    Temporary files                 _________ _____

          The monitor provides each frame  with a small number of  small in-core
          "files", intended for such functions as passing command  lines between
          programs.  The TMPCOR files have three-character (SIXBIT)  file names.
          Since there is only limited space in the monitor for such files, it is
          possible that a  program will be unable  to create a TMPCOR  file.  To
          get around this problem,  a convention exists where, after  trying and
          failing to create a TMPCOR  file, a program creates a disk  file whose
          name is

                  <3-digit decimal frame #><TMPCOR filename>.TMP
                                           1-43

          Frames and Processes              1                   YAMM edition 2.1


          and a program which fails to find a TMPCOR file likewise  searches for
          the appropriate disk file.

          1.7.1    TMPCOR: do TMPCOR file i/o (CALLI +44)                   _______ __ ______ ____ ___ ______ ____

                  MOVE    ac, [function,,addr]
                  TMPCOR  ac,
                    error return
                  normal return

          1.7.2    .TCRRF: read TMPCOR file (TMPCOR fn 1)                   _______ ____ ______ ____ _______ __ __
          1.7.2    .TCRDF: delete TMPCOR file (TMPCOR fn 2)                   _______ ______ ______ ____ _______ __ __

                  MOVE    ac, [.TCRRF or .TCRDF,,addr]
                  TMPCOR  ac,
                    error return
                  normal return

          where <addr> points to a block of the form
                  wd 0    SIXBIT /file name/,, 0
                  wd 1    -length,,base-1

          If the TMPCOR file specified by <file name> is not found,  set c(<ac>)
          to the number of words of TMPCOR storage available to the process, and
          nonskip-return.

          Otherwise, copy  up to <length>  words of the  TMPCOR file  named into
          locations starting at <base>, set c(<ac>) to the actual length (so the
          program can tell if its buffer was too short), delete the  TMPCOR file
          if this is a .TCDRF, then skip-return.

          1.7.3    .TCRWF: write TMPCOR file (TMPCOR fn 3)                   _______ _____ ______ ____ _______ __ __

                  MOVE    ac, [.TCRWF,,addr]
                  TMPCOR  ac,
                    error return
                  normal return

          where <addr> points to a block of the form
                  wd 0    SIXBIT /file name/,,0
                  wd 1    -length,,base-1

          If a TMPCOR  file with the specified  name already exists,  delete it.
          Check <length> against the number of words of free space available: if
          there is not enough room for  the new file, set c(<ac>) to  the number
          of free words and error-return.

          Otherwise, create a new TMPCOR file, store into it the  <length> words
          starting  at <base>,  set c(<ac>)  to the  number of  free  words left
          (after creating the file), and skip-return.









                                           1-44

          December 5, 1984                  1               Frames and Processes


          1.7.4    .TCRRD: read TMPCOR directory (TMPCOR fn 4)                   _______ ____ ______ _________ _______ __ __
          1.7.4    .TCRDD: clear TMPCOR directory (TMPCOR fn 5)                   _______ _____ ______ _________ _______ __ __

                  MOVE    ac, [.TCRRD or .TCRDD,,addr]
                  TMPCOR  ac,
                    JFCL  ; never taken
                  only return

          where <addr> points to a block of the form
                  wd 0    unused
                  wd 1    -length,,base-1

          Set c(<ac>) to  the number of files  in the frame's  TMPCOR directory.
          Read  up  to <length>  directory  entries into  locations  starting at
          <base>, clear the directory if this is a .TCRDD, then skip-return.

          The entries are of the form

                  SIXBIT /file name/,,length

          1.7.5    .TCRFS: get free space count (TMPCOR fn 0)                   _______ ___ ____ _____ _____ _______ __ __

                  MOVSI   ac, .TCRFS
                  TMPCOR  ac,
                    JFCL  ; never taken
                  only return

          Set c(<ac>) to the number of words of TMPCOR storage available  to the
          process, and skip-return.






























                                           1-45
  xK}C