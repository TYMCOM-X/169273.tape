9    Processor ID Mechanism

9.1    Purpose of PID's

PID's extend the basic Tymshare file protection mechanisms and provide
a way of associating the  charge for disk storage with  the processors
(programs)  which  manipulate  that  storage,  rather  than  with  the
directory  in  which   it  resides.   PID's   may  also  be   used  as
validity-stamps to ensure the integrity of data.  PID's were developed
to allow processors or  groups of cooperating processors  to implement
their own file protection policies different from those offered by the
monitor.

9.2    Definition of PID

A PID is a  36-bit quantity whose left half  is the UUN of  some valid
user  and  whose  right  half  is  an  index  number.    Under  normal
circumstances, a user  can manipulate only  those PID's that  have his
UUN in  their left half;  he can arbitrarily  select the index  in the
right half.  This allows a user to allocate his own PID's, eliminating
the requirement that some central Tymshare authority do so.

The value 0, when specified in a PID argument or returned as a  PID by
a UUO, represents the  absence of a PID.  No PID may be  created whose
left half (UUN part) is zero, except by programs having Write Absolute
(WA) or Write  File (WF) license.   These zero-UUN PID's  are reserved
for system use.

A PID becomes  associated with a processor  (i.e., a program)  in much
the same way that license is associated with the processor: some other
processor with  authority to do  so issues an  ENTER or RENAME  UUO on
<processor>.SAV (or .SHR, etc.) with the new PID in .RBPID, word 40 of
the  extended LOOKUP/ENTER/RENAME  block.  When  <processor>  is later
executed, this PID  becomes associated with  the process and  gives it
authority to  access files  with matching PID's  in ways  described on
9-2.

9.3    Issuing PID's

A processor is authorized to issue  a PID if any of the  following are
true:
    1)  The PID is zero.  (A process can clear the PID on any file
        to which it has at least append access);
    2)  The PID in .RBPID exactly matches the PID of the executing
        process;
    3)  The UUN-part  of the PID  exactly matches the  UUN-part of
        the AUN of the executing process;
    4)  The process has Write File (WF) license.  The PID can have
        any value.
To issue a PID,  a processor must have  ENTER or RENAME access  to the
file.   To issue  the  PID (that  is, to  place  it on  the  file) the
processor  must  execute  an extended  ENTER  or  RENAME,  placing the
desired PID in .RBPID in the extended LOOKUP/ENTER/RENAME block.

9.4    Authority Conferred by a PID

A process  executing with PID  xx can successfully  gain any  level of
access to a file  having PID xx, even  if the directory in  which this
file resides is protected  against LOOKUP's.  This ability  is enabled
by setting bit 20 of .RBCNT in the extended LOOKUP/ENTER/RENAME block.
See 9-1.  In  particular, this means that  the protection on  the file
can  be changed  to prevent  the owner  of the  directory in  which it
resides from modifying or deleting the file.  For example, if  you ran
a processor  with PID  xx it could  create a  file in  your directory,
place PID xx on it, set the protection to NO NO NO, and  implement its
own protection scheme with which you could not interfere.

Note that  no processor (with  or without PID)  can be  guaranteed the
ability to search an arbitrary directory for files with  matching PID;
all that a PID guarantees the holder is the ability to gain  access to
a file with matching PID whose location and name he knows.

9.5    Executing with a PID

A PID becomes associated with  a program's execution if the  file from
which  the  program was  run  has a  PID.   As with  license,  the PID
disappears if the user meddles with the program (provides  an argument
to the START  command, etc.).  If the  process issues a RUN  or RUNSEG
UUO,  the  old  PID  remains  in  effect  until  the  new  file(s) are
successfully  set up;  then  the PID  is set  to  the PID  of  the new
file(s).  If, in a  RUN UUO, the low  file PID differs from  the hiseg
file PID,  the new PID  will be set  to zero.  A  GETSEG UUO  will not
affect a process' PID.  The RUN, GET, SAVE, and SSAVE  operations will
clear  a  process'  PID  and  saved  PID  (see  9-3)  before  any file
accesses  are  done.  The  CLOSE,  FINISH, CORE  and  START <argument>
commands are considered meddling and will clear out the PID  and saved
PID.  In general,  any command that  would reset process  license will
also clear PID's.

9.6    Manipulating the PID

The PIDSET  UUO (CALLI -122,  pg. 9-3) allows  a process  to set,clear
and read the PID under which it is executing.  Whenever a process with
non-zero PID sets  or clears the PID  it is first saved.   This <saved
PID> can later be  restored.  A process may set  its PID to 0,  to the
saved PID (if any), or  to any PID whose left half  (UUN-part) matches
the right half (UUN-part) of the process' logged-in AUN.

The purpose of allowing processors to clear and restore their PID's is
to allow them to control selectively their special access priviledges.
In particular, a processor may  wish to clear its PID before  any RUN,
GET or SAVE operation to prevent the PID authority from being  used by
these operations.

9.6.1    PIDSET: Manipulate Process' PID (CALLI -122)

        MOVE AC,[<pid>]
        PIDSET AC,
         error return   ;AC/ current PID
        normal return

If <pid> is zero,  or current process license includes  Write Absolute
(WA) or WF license, or the process AUN matches the left half of <pid>,
or <pid>  = <saved PID>,  then set process'  PID to <pid>,  set <saved
PID> to previous PID if it  was non-zero, set AC to previous  PID, and
take the normal return.  Otherwise set AC to current PID and  take the
error return.

9.7    PID Handling on ENTER and RENAME

For all RENAMEs  and ENTERs, the  old file PID  is set to  zero.  This
forces  processors  to specify  PID's  directly,preventing inadvertent
spread of the PID.  The new PID in .RBPID is checked; if it is zero or
-1, the new file PID becomes zero.   if it is not zero or -1,  the new
PID in  .RBPID must  pass the tests  described on  9-2.  If  the tests
fail,  the new  file PID  becomes  zero; otherwise  it is  set  to the
requested value.

If .RBPID  is unspecified because  the count in  an extended  ENTER or
RENAME is less than .RBPID or because a short ENTER or RENAME is done,
the PID  argument will  be assumed to  be zero.   This means  that any
ENTER or RENAME on a file will result in that file's PID becoming zero
unless .RBPID is specifically set to a non-zero value.

9.8    PID's and Storage Accounting

Bit 6 in .RBLIC for a file will be set if and only if the PID  for the
file is non-zero.  This bit may  be examined in the UFD entry  for the
file to find out whether the file has a PID without doing a  LOOKUP on
the file.  Bit 6 in .RBLIC of the UFD rib will also be set for any UFD
which has special PID storage accounting.

Files  which have  PID's  are not  charged according  to  the standard
accounting  policies but  rather according  to special  PID accounting
schemes  developed  to  meet  the  needs  of  processors  using PID's.
Contact Marketing for more information.  Please note that  even though
a file  with a PID  may not be  charged according to  standard storage
charging policies, its space is counted against the storage  quota for
the directory in which it resides.
