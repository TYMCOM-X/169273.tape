.calliDef -44,CREAUX,|create an aux circuit|;
.b!ex
	MOVE	ac, [nozap + [ASCIZ /login string/]]
	CREAUX	ac,
	  error return
	normal return

where <nozap> = CX.NZP (1B17) to inhibit zapping the circuit when
	the process does a {CalliRef RESET}
.byteHead |CREAUX control bits|;
.byteDef CX!NZP,1B17,|don't zap on RESET|;

<login string> is a valid username, in uppercase ASCII, 
	optionally followed by a colon and host number,
	followed by a semicolon, carriage-return, or NUL
.e!ex
Let <string> be null.
Copy characters from <login string> to <string>
until <string> is 29 characters long,
or until a carriage-return, semicolon, or NUL
character has been copied.
If the last character copied was not a carriage-return
or semicolon,
append a semicolon to <string>.

If the current process does not have
{AC} license,
scan <string> up to the first colon
(or the end of <string>) and compare that
initial segment with the process's UNM.
If it does not match,
take the error return.

If the current process does not have AC
license,
and it already has built two aux circuits,
take the error return.

Output a login message to TYMNET,
and pass <string> as the login string.
If the login protocol fails,
take the error return.

Create a DDB for the new port,
error-returning if there is no room for one;
assign the port "by console" to the frame,
mark it, if CX.NZP was set,
so that it will not automatically be zapped
on a RESET,
store its port number into <ac>,
and skip-return.
.
.endSec CREAUX:
