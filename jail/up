COMMENT \HISTORY
AUTHOR,REASON
021  102100000013 \;

COMMENT \
VERSION 17-1(11) 21-APR-81 by SDD avoid illegal symbol "-1"
VERSION 17-1(10) 09-JUL-80 by SDD insist segment Globals in dispatch table
VERSION 17-1(7) 22-FEB-80 by SDD use SEGLOC, for segment base, end UPWRT with releases
VERSION 17-1(6) 29-JAN-80 by SDD TENEX: use true segment size for SSAVE 
VERSION 17-1(5) 18-JAN-80 by SDD merge TAILOR, UP.TNX, fix some UP.TNX
VERSION 17-1(4) 5-30-74 BY RLS BUG #SL# REMAIN COMPATIBLE WITH TOPS10
VERSION 17-1(3) 1-11-74 BY JRL CMU SWITCHES
VERSION 17-1(2) 12-8-73 BY JRL REMOVE MOST SPECIAL STANFORD CHARS
VERSION 17-1(1) 11-20-73 BY RFS CHANGE `PRINT' TO `SPRINT' MACRO
VERSION 17-1(0) 7-26-73 BY RHT BY RHT TO KEEP UP THE VERSION NUMBER 
VERSION 15-2(1) 12-2-71 BY DCS INSTALL VERSION NUMBER

\;

ENDLOW:	;label to distinguish this code from lowseg data area
SLOF:	SLOFIL
	SIXBIT /REL/
	0
	0

NOTENX <
MYFIL:	FILXXX
STANFO < SIXBIT	/SEG/ ;> SIXBIT	/SHR/	;all but SUAI call these .SHR
	0
	0
>;NOTENX

LOCSM:	LOCSYM
STOPOK:	0	;flag to COPY as to whether to emit error message

TENX <
?RENSW__0	;not for making a TENEX segment
>;TENX

IFNDEF SEGPAG, <
 IFDEF  SEGLOC, <?SEGPAG__SEGLOC/1000>
 IFNDEF SEGLOC, <?SEGPAG__400>		;normal high segment base 400000
>; IFNDEF SEGPAG

IFNDEF SEGLOC, <?SEGLOC__SEGPAG*1000>

IFN SEGPAG*1000-SEGLOC, <PRINTX *SEGLOC and SEGPAG disagree*>

?SEGS__1
?LOWER__0
?UPPER__1
STSW(GLOBSW,0)
CMU <
STSW(GASSW,0)
GGAS <
DEFINE UPPER <GASSUP>
>;GGAS
>;CMU
	TITLE UPPER 
BEGIN UPPER1

A_1
B_2
C_3
D_4
E_5

^UPWRT:
UPGOT:
TENX<
	JSYS	RESET
	HRRZ	A,JOBSYM	;DELETE SYMBOL TABLE
>;TENX
NOTENX<
	CALL6(0,RESET)		;RESET!
	HLRZ	A,JOBSA		;DELETE SYMBOL TABLE
>;NOTENX
	MOVEI	A,-FIRLOC-1(A)
	HRRZM	A,ASIZ		;SIZE OF SEC. SEG. -1
	ADDI	A,SEGLOC	;relocate to second segment
	MOVEI	B,FIRLOC-SEGLOC	;to "undo" PHASEing
	HRRZM	A,TOP2(B)	;TOP2 WORD.....
NOTYMSHR <;This isn't the HISEG symbol table address anyway 
	SETZM	SEGLOC+11(B)	;NO 2D SEGMENT SYMBOL TABLE
>;NOTYMSHR
TYMSHR <;simulating more of the vestigal Job Data Area
	SUBI	A,SEGLOC-1	;for .JBHRN (hiseg size,,reenter addr)
	HRLZM	A,SEGLOC+3(B)
>;TYMSHR
TENX<
;move the code to the desired destination
	MOVE	B,[XWD FIRLOC,SEGLOC]
	BLT	B,(A)
;reset the entry vector
	MOVEI	A,400000	;this fork
	MOVE	B,[JRST	400010]	;entry vector indicates JOBSA for start
	JSYS	SEVEC

;;now save it away with SSAVE
GTSEG:	HRROI	A,[ASCIZ /
Type name for segment file
assembled name is /]
	JSYS	PSOUT

;;figure out T20/TENEX, get appropriate name
	MOVE	B,[XWD 112,11]	;GETTAB to get system type
	CALLI	B,41		;THe only non-emulated CALLI
	 MOVEI	B,030000	;if it failed, must be (very old) TENEX
	LDB	B,[POINT 6,B,23];TENEX has this field=3, TOPS20 has 4
	SETZ	A,		;Assume TENEX
	CAIE	B,3
	 MOVEI	A,2		;nope, use TOPS20
	MOVE	A,[FILXXX]+1(A)	;get string pointer
	MOVE	C,A		;AND save it temporarily for null input
	JSYS	PSOUT
	HRROI	A,[ASCIZ /
*/]
	JSYS	PSOUT
	HRLZI	A,400003	;output, jfn!jfn, short form
	MOVE	B,[XWD 100,101]	;I/O to primary
	JSYS	GTJFN
	 JRST	.+2
	 JRST	NAMOK
	CAIN	A,600115		;error GJFX33 (null name)
	 JRST	[HRROI	A,[ASCIZ / Using assembled name. /]
		JSYS	PSOUT
		HRLZI	A,400001	;output, string pointer
		MOVE	B,C		;Pick up name again
		JSYS	GTJFN
		 JRST	.+1
		JRST	NAMOK]
	HRROI	A,[ASCIZ /
Can't GTJFN segment file, try again./]
	JRST	GTSEG

NAMOK:
;SSAVE the segment
	HRLI	A,400000	;this fork
	HRRZI	B,SEGLOC-1000	;calculate -number of pages in high seg
	SUB	B,FIRLOC+12	;get last address in upper segment
	ASH	B,=9		;put in left half (-page count)
	HRRI	B,520000+SEGPAG	;right half: COW,READ,XCT from SEGPAG
	SETZ	3,
	JSYS	SSAVE
	JSYS	RLJFN
	 JRST	[HRROI	A,[ASCIZ /
Couldn't RLJFN the segment file???/]
		JSYS	PSOUT
		JSYS	HALTF]
>;TENX

NOTENX,<
	INIT 1,17
	SIXBIT /DSK/		;THE FILE SYSTEM!
	0			;NO BUFFERS.
	SPRINT	<NO DISK TODAY>
	
	HLLZS	MYFIL+1
	SETZM	MYFIL+2 
	SETZM	MYFIL+3

	ENTER	1,MYFIL		;THE VERY SAME.
	SPRINT	<NO DISK TODAY>

	MOVN	A,ASIZ
	HRLI	A,-1(A)		;MAKE UP IOWD.
	HRRI	A,FIRLOC-1	;LIKE SO......
	MOVEM	A,DUMPR
	OUTPUT	1,DUMPR
	RELEASE	1,
>;NOTENX
COMMENT \
 THE INTERNAL SYMBOLS FROM THIS UPPER SEGMENT WILL NOW BE
COPIED INTO THE LOWER SEGMENT .REL FILE, TO PROVIDE UPPER/LOWER
LINKAGES.  THIS ELIMINATES THE NEED FOR THE LOADER TO KNOW ANYTHING 
ABOUT STRANGE SAIL UPPER SEGMENTS
\

	INIT	1,14		;INPUT
	'DSK   '
	IBUF
	SPRINT	<NO DISK TODAY>
	SETZM	SLOF1+2
	SETZM	SLOF1+3
	LOOKUP	1,SLOF1		;GET SAILOW.REL OR SOMETHING
	SPRINT	<WHERE IS LOWER?>
	INIT	2,14		;OUTPUT
	'DSK   '
	XWD	OBUF,0
	SPRINT	<NO DISK TODAY>
	HLLZS	SLOF+1
	SETZM	SLOF+2
	SETZM	SLOF+3
	ENTER	2,SLOF		;PUT SAME
	SPRINT	<CAN'T MAKE NEW SAILOW>
	HLRE	3,JOBSYM	;get size of symbol table
	MOVMS	3
	HRRZ	2,JOBSYM
	ADD	2,3		;PNT PAST END OF SYMBOL TABLE
	HRRZM	2,JOBFF		;IF NO DDT, LOADER HAS WIPED SYMTAB
	INBUF	1,2
	OUTBUF	2,2
	setzm	stopok		;better be able to copy for a while
	HLLZS	SMTAB		;SOME INITIALIZATION (NOT MUCH)
FOR II_1,4 <
	JSP	1,COPY		;COPY FIRST FOUR WORDS (NAME BLOCK)
>
	LSH	3,-1		;#SYMBOLS
NOTYMSHR <
	MOVE	TEMP,[RADIX50 0,UPPER] ;LOOK FOR THIS PROGRAM
LP1:	CAMN	TEMP,(2)
	JRST	LOOP
	SUBI	2,2
	SOJG	3,LP1
	HALT			;DIDN'T FIND IT
>;NOTYMSHR
LOOP:	SUBI	2,2		;BACK UP ONE ENTRY
	JSP	6,COPSYM	;COPY ONE ENTRY IF INTERNAL
	SOJG	3,LOOP		;GET ALL OF THEM
	JSP	6,FORSYM	;FORCE REMAINING OUT
	setom	stopok		;now it is ok to stop.
	JSP	1,COPY		;COPY REST OF FILE
	JRST	.-1		;WILL NOT RETURN ON EOF

COPY:	SOSLE	IBUF+2		;INPUT ROUTINE
	 JRST	OKIN
	INPUT	1,0		;SURELY YOU'VE SEEN THESE BEFORE?
	STATZ	1,20000		;EOF?
	 jrst  [skipn	stopok		;in allowable place?
		 sprint <Unexpected EOF on LOWER.REL>	; no, complain
		releas	1,		;drop LOWER
		releas	2,		;finish up the output file
		TENX < JSYS HALTF ;> CALL6(0,EXIT)	;and lets stop
		]
	STATZ	1,740000	;ERROR?
	 SPRINT	<INPUT DATA ERROR IN SAILOW UPDATE>
OKIN:	ILDB	4,IBUF+1	;GET ONE
OUTWD:	SOSG	OBUF+2		;OUTPUT ROUTINE
	OUTPUT	2,
	IDPB	4,OBUF+1
	JRST	(1)

COPSYM:
NOTYMSHR <;lets just copy out the right symbols and forget the checking
	LDB	4,[POINT 4,(2),3] ;SYMBOL TYPE
	SKIPE	LOCSM		;IF LOCAL SYMBOLS WANTED
	 JUMPN	4,ALLTHM	;then copy everything but module names
	SOJN	4,(6)		;ignore everything but internals
	MOVE	4,1(2)		;lets check it carefully
	CAIL	4,DSPBAS
	 CAIL	4,DSPBAS+DSPLEN
	  JRST	(6)		;only copy GLOBALs in the dispatch table
>;NOTYMSHR
TYMSHR <;Lets be very precise about having good values
	SKIPN	4,(2)		;get the radix-50 symbol
	 JRST	(6)		;somehow, zeros get in the table
	TLZ	4,740000	;strip type bits
	CAMLE	4,[RADIX50 0,%%%%%%]	;should only have 6 characters
	 JRST	BADSYM		;otherwise it is an illegal symbol
	IDIVI	4,50		;make sure no characters are blanks
				;note that this also checks for symbol=0
	JUMPE	5,BADSYM	;illegal to have imbedded or trailing sp
	JUMPN	4,.-2		;loop until full name checked
	LDB	4,[POINT 4,(2),3] ;SYMBOL TYPE
	MOVSI	5,740600	;check type code (allow 0,4,10,14,44,50)
			;bits are 0:10, 14:24, 30:40, 44:54, 60:70, 74.
	LSH	5,(4)
	JUMPGE	5,BADSYM
	JUMPE	4,[PUSH	P,6	;always ignores PROGRAM symbols
		   SPRINT <
--Program: >
		   MOVE	4,(2)	;note: Program has "code"=0 already
		   JRST	PR5]
	CAIE	4,11		;suppressed global is also GLOBAL
	 SOJN	4,[SKIPN LOCSM		;if suppressing locals
		    JRST (6)		;then just return
		   MOVE	4,1(2)		;otherwise, lets not keep locals
		   CAIL	4,ENDLOW	;which come from this program
		   CAILE 4,FIRLOC
		    JRST ALLTHM		;all other locals are kept
		    JRST (6)]		;but these are dropped
;dont copy (or complain about) JOBxxx or .JBxxx
	LDB	4,[POINT 32,(2),35]	;just get the name
	IDIVI	4,50*50			;check for JOBxx and .JBxx
	CAIE	4,<RADIX50 0,JOB>
	 CAIN	4,<RADIX50 0,.JB>
	  JRST	(6)			;and quietly flush those symbols
	IDIVI	4,50			;similarly for JOBxxx and .JBxxx
	CAIE	4,<RADIX50 0,JOB>
	 CAIN	4,<RADIX50 0,.JB>
	  JRST	(6)
	MOVE	5,6		;usually non-dispatch also thrown away
	SKIPE	LOCSM		;unless want local symbols
	 MOVEI	5,ALLTHM	;in which case we keep almost everything

	MOVE	4,1(2)			;now check the value
	TLNN	4,-1		;all desired globals are addresses
	CAIGE	4,140		;not in the job data area
	 JRST	GFLUSH
	CAIGE	4,ENDLOW
	 JRST	ALLTHM		;the real low-seg variables area
;	CAIG	4,FIRLOC
;	 JRST	GFLUSH		;from this program (very evil)
;	CAIG	4,SEGLOC
;	 JRST	GFLUSH		;"trash" things like DDT and friends 
	CAIGE	4,DSPBAS
	 JRST	GFLUSH		;highseg below dispatch vector 
	CAIGE	4,DSPBAS+DSPLEN
	 JRST	ALLTHM		;the actual dispatch vector entries

				;globals without dispatch vector entries
	SPRINT <
GLOBAL in HIGH-SEG, but not DISPATCH table: >
LOCOUT:				;complain and re-label as LOCAL
	PUSH	P,5		;save what we want to do with "locals"
	PUSHJ	P,SYMSHO	;show the current value of symbol
	MOVSI	4,140000	;and make it local (type 10) in fact
	XORM	4,(2)
	POPJ	P,		;then either output it or skip it

GFLUSH: SPRINT <
GLOBAL definition in unexpected value range:>
	JRST	LOCOUT

BadSym:	SPRINT <
Invalid radix-50 code or symbol: >
	PUSH	P,6		;where to eventually return to
SYMSHO:
	MOVE	5,1(2)		;get the entire value
	MOVSI	4,400000	;keep a flag to say when done
	TLNN	5,-1		;lets suppress LH=0
	 ROTC	4,=18
	ROTC	4,3		;get the first digit, and lets go
OUTMOR:	ANDI	4,7		;get rid of other garbage
	OUTCHI	"0"(4)		;put out a character
	ROTC	4,3
	JUMPN	5,OUTMOR
	SPRINT < = RADIX50 >
	MOVE	4,(2)		;get the entire radix-50 word
	SETZ	5,
	ROTC	4,3		;get the high order digit of the code
	LSH	4,-3		;re-justify the symbol word
	OUTCHI	"0"(5)		;output the first digit
	MOVEI	5,"0"		;and the high bit of the next digit
	TLZE	4,040000	;finish cleaning up the symbol
	 MOVEI	5,"4"
	OUTCHI	(5)		;output second code digit
	OUTCHI	","		;delimit the symbol
PR5:	IDIVI	4,50
	HRLM	5,(P)
	JUMPE	4,.+2
	 PUSHJ	P,PR5
	HLRZ	5,(P)
	CAIG	5,12		;blanks show as "/" 
	 ADDI	5,"0"-1
	CAIG	5,44
	 ADDI	5,"A"-13
	CAIG	5,47
	 MOVE	5,["."
		   "$"
		   "%"]-45(5)
	OUTCHI	(5)
	POPJ	 P,
;;>;TYMSHR

ALLTHM:	AOS	SMTAB		;MAKE ROOM FOR 2
	AOS	5,SMTAB
	HRRZS	5		;INDEX TO SYMBOL BLOCK
	MOVE	4,(2)
	MOVEM	4,SMTAB(5)
	MOVE	4,1(2)		;MAKE THE TRANSFERS
	MOVEM	4,SMTAB+1(5)
	CAIGE	5,22		;FULL?
	JRST	(6)		;NO, DONE
FORSYM:	HRRZ	5,SMTAB		;GET COUNT
	JUMPE	5,(6)		;RETURN IF EMPTY
	MOVNI	5,2(5)		;FOR BLOCK TYPE AND RELOC WORDS
	HRLS	5		;AOBJN PTR
	HRRI	5,SMTAB
OLP:	MOVE	4,(5)		;WORD TO GO OUT
	JSP	1,OUTWD		;OUT IT GOES
	AOBJN	5,OLP		;GET ALL
	HLLZS	SMTAB
	JRST	(6)		;THAT'S ALL
SMTAB:	XWD	2,0		;BLOCK TYPE (SYMBOLS)
	0			;NEVER RELOCATE THESE
	BLOCK	22		;ROOM FOR SYMBOLS

IBUF:	BLOCK	3
OBUF:	BLOCK	3

SLOF1:	SIXBIT	/LOWER/		;ALWAYS
	SIXBIT	/REL/		;LOWER FOR INPUT
	0
	0

DUMPR:	BLOCK	2
	ASIZ:	0
	AONE:	XWD FIRLOC,SEGLOC

	LIT
FIRLOC:

BEND UPPER1

?%FIRLOC:
PHASE segloc		;MAGIC ....
NOTYMSHR <
	0		;segment+0	=.JBHSA: copy of .JBSA
	REPEAT 10,<
	0>
	0		;segment+11 -- JOBSYM POINTER.
>;NOTYMSHR
TYMSHR <
	0		;segment+0	=.JBHSA: copy of .JBSA
	0		;segment+1	=.JBH41: copy of .JB41
	0		;segment+2	=.JBHCR: copy of .JBCOR
	0		;segment+3	=.JBHRN: lh(.JBHRL),,rh(.JBREN)
	.VERSION	;segment+4	=.JBHVR: copy of .JBVER
	FILXXX		;segment+5	=.JBHNM: high segm name on SAVE
	0		;segment+6	=.JBHSM: points to hiseg symbols
	(SEGPAG)	;segment+7	=.JBHGA: (9)0 (9)origin (18)0
			;segment+10	=.JBHDA: hiseg data area start
	XWD DSPCNT-DSPLEN,DSPCNT	;shows dispatch vector free,used
	DSPBAS		; segment+11: where the dispatch table starts
>;TYMSHR

?TOP2:	0			;segment+12: TOP SEC SEG ADDRESS.
GLOB <
?GLBPNT:	0	;400013
	BLOCK GLBAR	;400014 -- GLOBAL AREA ..... !!!!
>;GLOB

CMU <
 GGAS <
?GLBPNT:	0	;400013
	BLOCK	GLBAR	;400014
GAS:0
?GAS_GAS
GASS_GAS
INTERNAL GAS,GASS
 >;GGAS
>;CMU
INTERNAL %ALLOC

   