* options word for INTSET is now defaultable
	INTSET( process.item, options )
	=> INTSET( process.item, options(0) )

* new TTYUP definition:
  was:	boolean.oldOption _ TTYUP( boolean.makeUpperCase )
  Now:	integer.oldOption _ TTYUP( integer.option )
		where integer.option is: 0 -> no case conversion
					-1 -> force to UPPER case
					 1 -> force to lower case
	Note that TRUE is defined to be -1, and this is therefore
	compatible with old source code.

* new BREAKSET/SETBREAK options: 
  "C" (convert to lower-case) Similar to "K" mode, but changes 
	"A":"Z" to "a":"z".

  "U" (un-omit) Omit characters specified by exclusion.  (When you
	want to specify "omit everything BUT the following characters").

  "T" (Token mode) This changes slightly the meaning of characters
	which are both break AND omit characters.  When such characters
	are encountered at the beginning of a source stream, they are
	treated as ignore characters, but they revert to their break
	property after the first non-omit character is encountered.
	Sample:	(think of space and tab where the "." and "-" are)
		SETBREAK( word_GETCHAN, "ABCDEF", ".-", "XRT" )
	  scanning: "ABCD--......E.F..--..G-H+I"
	    yields: ABCD[-]; E[.]; F[.]; G[-]; H[+]; repeats: Null[+]
	WARNINGS:
	  (1) If the break table has "Append" set, and the break is one
		of the Break AND Omit characters, the character will be
		appended to the result string despite its omitness.
		(But never as the first character of the result).
	  (2) An INPUT which stops because the "COUNT" ran out may have
		stopped just before some omits, so be careful when 
		collecting strings with: 
			s_INPUT(c,tbl); 
			WHILE brk=0 DO s_ s & INPUT(c,tbl); 

  "B" (Break mode) Turns off Token mode.

  "1"-"9" (break table size) The break tables contain separate entries 
	for each possible N-bit character.  In addition, an entry is
	kept for "all others".  If a byte encountered by SCAN or INPUT 
	cannot be represented in an N-bit byte (ie its value is not in 
	the range [0:2^N-1]), the "all others" entry is used.  These
	entries indicate whether or not the character is an "omit" and
	whether or not it is a "break" character.  The size of the table
	is changed by this command, so this should be the first option
	used in a SETBREAK.  GETBREAK returns tables initially set to 
	7 bits.  The "all others" entries in the break table are changed
	indirectly when I,X,O, or U modes specify the break or omit set,
	and directly whenever a value supplied in one of those modes
	exceeds the size of the break table it is to affect.  

* new definition of SETBREAK:
	Because of some of the new BREAKSET modes (in particular the 
    byte size and "Un-omit" modes), SETBREAK now has a (slightly)
    different definition.  Basically the differnce is that the 
    "Omit" specification is done later in order to allow setting
    the table size first.  The new definition is:
	PROCEDURE SETBREAK( INTEGER tbl; STRING breaks, omits, modes );
	BEGIN	INTEGER mode;
	WHILE LENGTH( modes )
	   DO IF "U" NEQ (mode_ LOP( modes )) NEQ "u"
		 THEN BREAKSET( tbl, breaks, mode )
		 ELSE BEGIN
			BREAKSET( tbl, omits, "U" );
			omits_ NULL
		      END;
	IF LENGTH( omits ) THEN BREAKSET( tbl, omits, "O" );
	END;
* New compile-time evaluatable functions: CMPSTR, KEQU, KMPSTR, WIDTH

integer_ CMPSTR( "str1", "str2" )
	Compares two strings (pads the shorter with 0's if necessary),
    and returns information about which is "greater" and where the
    character in which they differ is.  If the return value is 0, the
    strings are "equal" (not necessarily EQU because of the padding).
    If the return value is negative, str1 is "less" than str2.  The
    absolute value of the result is the character position where they
    first differ.
	To test the order (<,>,=,NEQ,GEQ,LEQ) of two strings,
	  for:		str1 <relation> str2
	  use:	CMPSTR( str1, str2 ) <relation> 0
    Functional equivalent:
	INTEGER PROCEDURE cmpstr( STRING str1, str2 );
	BEGIN	INTEGER c1,c2, pos;
	c1_ LOP( str1 );
	c2_ LOP( str2 );
	FOR pos_ 1 STEP 1 WHILE c1 = c2
	  DO  BEGIN
		IF LENGTH( str1 ) = 0 = LENGTH( str2 ) THEN RETURN(0);
		c1_ LOP( str1 );
		c2_ LOP( str2 );
	      END;
	RETURN( IF c1 < c2 THEN -pos ELSE pos )
	END;

boolean_ KEQU( "str1", "str2" )
	Checks two strings for equality ignoring case mis-matches.  
    Otherwise, this is like EQU.	[ KEQU("aBc", "AbC") is TRUE ]
    Functional equivalent: 
	EQU( SCANC(str1,null,null,"IK"), SCANC(str2,null,null,"IK") )

integer_ KMPSTR( "str1", "str2" )
	A case-independent version of CMPSTR.  It behaves as if the two
    strings were forced to upper-case before the comparison.  Note that
    this means that "[" is treated as greater than both "A" and "a".
    Functional equivalent: 
	CMPSTR( SCANC(str1,null,null,"IK"), SCANC(str2,null,null,"IK") )

integer_ WIDTH( "str" )
	If the length of the string is 0 then WIDTH is 0, otherwise this
    is the byte size of the specified string.

SCAN returns a string of the same byte size as its argument string.
INPUT returns a string of the same byte size as the byte pointer in
	its buffer pointer.

Null & anyString	Returns anyString.
anyString & Null	Returns anyString.
integer & Null		Returns a seven-bit string.
Null & integer		Returns a seven-bit string.
integer & integer	Returns a seven-bit string.
nonNull & nonNull	Complains if both arguments are not the same 
			width.  Width of the result is the MAX width.
nonNull & integer	Width of the result is the width of the string.
integer & nonNull	Width of the result is the width of the string.


* New functions: CMCAT, CHAR!W, STR!W, STMAKE

"result"_ CMCAT( "str1", "str2" );
	Just like "&" concatenation, but no error message.

"character"_ CHAR!W( character, byteSize(0) );
	If byteSize is 0, use 7 (the SAIL default size). If byteSize is
	now OK (ie between 1 and 36), return a string of length 1 and
	width = byteSize.  Otherwise give an error message.

"newstring"_ STR!W( "str", byteSize(0) );
	Coerce string to specified width.
   Functional equivalent:
	IF LENGTH(str) THEN RETURN(NULL);
	newstring_ CHAR!W( LOP(str), ByteSize );
	WHILE LENGTH(str) DO newstring_ newstring & LOP(str);
	RETURN( newstring );

"stringCopy"_ STMAKE( BytePointer, len, ByteSize(0) );
	Make a SAIL string whose width is ByteSize (or the byte size 
	from BytePointer if ByteSize is 0) by getting len bytes from
	the byte pointer.
   Functional equivalent:
	IF len LEQ 0 THEN RETURN(NULL);
	IF ByteSize=0 THEN ByteSize_ LDB( POINT( 6, BytePointer, 12 ) );
	stringCopy_ CHAR!W( ILDB(BytePointer), ByteSize );
	FOR len_ len-1 STEP -1 UNTIL 1
		DO stringCopy_ stringCopy & ILDB(BytePointer);
	RETURN( stringCopy ); 


* new "function" ADJBP( integer  amountToMove, BytePointer )
	Compiles in-line to either the "ADJUST BYTE POINTER" op-code 
    (KL,2020), or to a LUUO which simulates the instruction.  This is 
    compile-time evaluateable.  Note that "alignment is preserved".

* old "function" BBPP( ByteSize, @word, BitNumber ) [build byte pointer]
	Like POINT, but may be "folded" by the compiler into a sequence
    of instructions (or even a constant) rather than a procedure call.

* old Unknown (?) feature of "require"
	Several require clauses may follow "REQUIRE" (although 
    SOURCE!FILE must end a require list).  Example:
		REQUIRE " hi" MESSAGE, "20A" COMPILER!SWITCHES;

* new COMPILER!SWITCHES option:
	SWITCH name: "A", option: 40 
	meaning: use "ADJBP" opcode, not UUO for ADJBP statement.
UUOs:
	 2	FLOAT	integer => real		AC <= MEM
	 3	FIXUUO	real => integer		AC <= MEM
	 4	IOERR.	Error message in I/O processing
	 5	ERR.	Other error message	AC=code, MEM is ASCIZ
	 6	SIXPNT	
	 7	ARERR	array access error
	10	RECUUO	[obsolete?]
	11	DECPNT
	12	OCTPNT
	13	ERRSPL
	14	SNGL	long real => real	AC <= MEM,MEM+1
	15	PUUO	(but only on TENEX)
new:	16	DFIX	long real => integer	AC <= MEM,MEM+1
new:	17	DFLOAT	integer => long real 	AC,AC+1 <= MEM
new:	20	ADJUBP	"adjust byte pointer"	AC <= advance(MEM,AC)

 