proposed scheme for teaching DSKCLN to do mapping:

Problem:
It is felt that DSKCLN takes an inordinate amount of time to do its
thing.  Corporate viewpoint is that when DSKCLN is running, the system
(i.e., hardware) is ready for users (i.e., can be generating income),
but must be super-shut for the 30-40 minutes of DSKCLN run time.

Desire:
Improve program performance.

Solution:
During analysis of the current version, it was discovered that the I/O
is being done with "old-style" UUOs (i.e., Tops-10 style).  When DSKCLN
needs a page from the disk, the program will block until the request is
satisfied.  This happens because "old-style" I/O does not allow the user
to do mapping.  Teach DSKCLN to do mapping and pre-referencing so the
disk page will already be in core when it is needed, and the program
will not block nearly so often waiting for a page to come in.

important considerations:
It is desirable to minimize the changes to existing code and logic; to
get the most performance increase, a major rewrite would be necessary.
Currently, the program uses a 1000 (octal) word area called BUF into
which the page is read.  There are over 70 references to BUF in the
code, and changing all those to do some sort of indirection would be a
major task in itself (not to mention just figuring out an addressing
scheme that would handle all the different ways that BUF is referenced).
A way to do mapping and pre-referencing that fits the existing flow of
the program must be found.

General logic flow of DSKCLN:
1. Read home blocks for each unit.  Do some consistency checks on them,
and get disk location of MFD RIB, SAT RIBs, BAT blocks, etc.
2. Read in the SATs for each unit.
3. Read RIB for the MFD and do some consistency checks on it.
4. For each UFD in MFD do:
	a. Read the RIB for the UFD and do consistency checks.
	b. For each file RIB in the UFD do:
		i. Read the RIB and do consistency checks.

All the while, keep up with which pages are allocated, make a new set of
SATs in core, collapse RIBs if neccessary, and twiddle various status
bits.  The I/O gets fast and furious when the program is processing
individual UFDs, and this would be the logical place to try to optimize.
For each file in a given UFD, DSKCLN must read in the prime RIB and any
spare RIBs.  He currently tries to optimize the disk seeks in a routine
called FNDSEK (and a couple of alternate entries), which is called from
the UFD processing routine.  The routine named PAGRED (alternate entry
PAGRD1) actually does the UUO to bring the page into BUF.  When it's all
over, write out the new SATs and complain about any bad errors found.

the scheme:

Turn FNDSEK into a mapping and prereferencing routine, PAGRED into
pointer manipulating routine.  Maybe PAGRED can replicate the
appropriate page to BUF, although simply BLTing 1000 words may be
faster.  PAGRED will have to have some way of knowing if FNDSEK is
active; if FNDSEK is not active (i.e., we are not processing a UFD),
then PAGRED must do the mapping himself.  Maybe just make a separate
routine to use in place of PAGRED when FNDSEK is active.  This may not
work, though, because PAGRED gets called out of RIBCHK, which is called
from everywhere.  So, maybe use a flag for FNDSEK active and a table for
status of each unit (i.e., if it has a map+pre-ref in progress, and if
so, what page is it getting).  Will have to do some memory management
stuff, too.  Currently, he has a routine called GETCOR that he calls.
It is using a CORE UUO, and keeps up with where the highest addressable
location is.  When in-core tables are being built, he calls GETCOR every
now and then.  GETCOR will have to know about the disk cache page(s) for
each unit.  BUF will have to be put on a page boundary if he ever maps
directly there.  Probably GETCOR should also be modernized.  He already
thinks in pages throughout the rest of the program, so it's kind of
absurd that he still uses a CORE UUO to do memory management.  Since DDT
goes in at 140 and the program on top of it, it appears best to put the
disk cache in high memory.  BUF must be "hard-wired", so put it on page
777.
