begin	"GENAFD"

require "(SAILIB)SAIL.DEF" Source!file;
require "(WRS)ARGS.REQ" source!file;
require "(WRS)FLIB.REQ" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require '1 version;

string item OUTFILE, INFILE;

string PJC;
simple procedure PJCini;
begin
    integer I;
    PJC := cvstr(calli(!xwd(0,!gtCNF),calli!GETTAB))&
	cvstr(calli(!xwd(1,!gtCNF),calli!GETTAB));
    for I := 2 upto 10 do if PJC[I for 1]="-" then PJC := PJC[1 to I-1];
end;
require PJCini initialization;

procedure Save;
begin	"SAVE"
    r!p(file) OutF, InpF;
    if not props(OUTFILE) then datum(OUTFILE) := datum(INFILE)& "[.XMT";
    OutF := fOpen( datum(OUTFILE), "wxb14M4E:.XMT" );
    InpF := fOpen( datum(INFILE), "rob14M4E" );
    file:LKB[InpF][!rbPJC] := cvasc( PJC[1 for 5] );
    file:LKB[InpF][!rbPJC+1] := cvasc( PJC[6 for 5] );
    file:LKB[InpF][!rbPJC+2] := cvasc( PJC[11 for 5] );
    if not file:EOF[InpF] then begin
	inout( file:Chan[InpF],file:Chan[OutF],-1 );
	arryout(file:Chan[OutF],memory['20],'777 land -file:LKB[InpF][!rbSIZ]);
	arryout(file:Chan[OutF],file:LKB[InpF][0],file:LKB[InpF][0]+1);
	wordout(file:Chan[OutF],0);
    end;
    fClose( OutF );
    fClose( InpF );
end	"SAVE";

argparse( OUTFILE, INFILE, {}, Args );
if not props(INFILE) then usererr(0,0,"No input file specified.","X");
Save;

end	"GENAFD"
$
