CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 1
S.MAC	13-JAN-88 11:55		S.MAC - with system parameter file for P035/D, January 1988

     1				SUBTTL	S.MAC - with system parameter file for P035/D, January 1988
     2
     3				IF2,<IFNDEF LISTSN,<TAPE>>	;Skip to PASS2 in all but COMMON.LST
     4				;THIS MODULE ASSEMBLED WITH KL-10 PARAMETER FILE - KLSYM.MAC
     5
     6					IF2,<IFNDEF LISTSN,<		;LIST KLSYM.MAC IN COMMON ONLY
     7								TAPE>>
     8				TITLE CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES
     9
    10					STOPCD(,ENTRY,CORE1)^
    11					ENTRY	CORE1		;For library searches
    12	000000'	260040	000000*	CORE1::PUSHJ	P,DIE		;**** Default stopcode for "CORE1" ****
    13	000001'	435762	452100		SIXBIT	/CORE1/  	;Title of module
    14	000002'	000000	000000		S$NONAME,,0		;?NONAME stopcode "CORE1+nnn(nnnnnn)"
    15			000000'	S$NAME==CORE1			;For STOPCDs with no arguments
    16					SALL>
    17				^
    18
    19
    20				;ERROR CODE MACRO
    21
    22				DEFINE ERRCOD(N,SYM,LABEL)<
    23					XP SYM,N
    24				IFGE <7-N>,<XP LABEL,ERR0'N>
    25				IFL <7-N>,<XP LABEL,ERR'N>
    26				>;END ERRCOD MACRO DEFINITION.
    27
    28			400000		XP FL.USR,(1B0)		;FLAG IN UUOS THAT SAYS DO
    29								; PROTECTION CHECK ON VP FOR USER, NOT EXEC.
    30
    31				;*;  DEFINE CALMAP,<>
    32				DEFINE LSTCHK,<JFCL>	;MAKE SURE CORE LISTS ARE OK
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 2
CORE1.MAC	28-OCT-87 17:05		S.MAC - with system parameter file for P035/D, January 1988

    33				;SMALL ROUTINE TO CLEAR ONCE MODULES OUT OF EXEC MAP.
    34				INTERNAL CLRONC
    35
    36	000003'	201300	000003	CLRONC:	MOVEI	T1,3		;THREE MODULES.
    37	000004'	400340	000000		SETZ	T2,		;
    38	000005'	200246	000014'	CLRLOP:	MOVE	U,TBLSIZ-1(T1)	;GET U/ NO.
    39	000006'	242240	777767		LSH	U,-9		;OF PAGES IN THIS MODULE.
    40	000007'	200406	000017'		MOVE	T3,TBLPTR-1(T1)	;T3/ SLOT BYTE PNTR.
    41	000010'	136340	000010		IDPB	T2,T3		;CLEAR A SLOT.
    42	000011'	367240	000010'		SOJG	U,.-1		;CONTINUE FOR THIS MODULE.
    43	000012'	367300	000005'		SOJG	T1,CLRLOP	;CONTINUE FOR ALL THREE MODULES.
    44	000013'	701220	000000*		CLRPTA			;CLEAR ENTIRE PAGING MEMORY
    45	000014'	263040	000000		POPJ	P,		;RETURN.
    46
    47				DEFINE TBLS
    48				< X ONC
    49				  X OND
    50				  X REF>
    51
    52				DEFINE X(A)
    53				<A'LNP
    54				EXTERN A'LNP>
    55	000015'	000000	000000*	TBLSIZ: TBLS
    56	000016'	000000	000000*
    57	000017'	000000	000000*
    58
    59				DEFINE X(A)
    60				<EPTPGP (%'A'.N-1)>
    61	000020'	002200	000365*	TBLPTR: TBLS
    62	000021'	222200	000370*
    63	000022'	002200	000373*
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 3
CORE1.MAC	28-OCT-87 17:05		S.MAC - with system parameter file for P035/D, January 1988

    64				;EXTERNAL DECLARATIONS
    65
    66				;EXTERNALS IN THE SWAPPER
    67
    68				EXTERNAL CAPPGN,RIPPGN,SWPIO,PROT
    69				EXTERNAL PFLCNT,PFWCNT,PFICNT,VRACNT,TOTACT
    70
    71				;EXTERNALS IN COMMON FOR PGY TABLES
    72
    73				EXTERNAL PAGWAK	
    74				EXTERN PGYADR,PGYBPL,PGYFPL,PGYCHT,PGYDIO,PGYDRT,PGYERR
    75				EXTERNAL PGYLMJ,PGYLMV,PGYLST,PGYSIP,PGYSOP,PGYSPB,PGYSPO,PGYSPT,PGYUSE
    76				EXTERNAL PGYATB,PGYPGO,PGYSIO
    77				EXTERNAL PGYSTS,PGPSIP,PGPSOP,PGPDRT
    78				EXTERNAL USRMAX
    79
    80				;EXTERNALS IN PICON
    81
    82				EXTERNAL TSTKTP,TAKTRP
    83
    84				;EXTERNALS IN COMMON FOR UPT
    85
    86				EXTERNAL UPTMWB,UPTUFI,UPTXFI,UPTUEI,UPTXEI,UPTUWB,VPUMAX,%SAT.C,%RIB.C
    87				EXTERNAL UPTAGE, UPTELD, UPTMAT
    88				EXTERNAL AGECPW, AGEMAX, AGESIZ
    89				EXTERNAL AGEHST, AGEPTR
    90				EXTERNAL %RB2.C,%UPS,%UPT,%UPLMS,%UPS.N,NCTXPG,%UPLMA,%COW,%COW.N
    91				EXTERNAL %UPT.N,JBYSAL,JBYSLL,JBYPER,JBYREF
    92				EXTERNAL UPTRPT,UPYUWL,UPYUWM,JBYPPP,JBYUWS,UPTLDC
    93				EXTERNAL UPTURI,UPTXRI,UPTUII,UPTXII
    94
    95				;EXTERNALS IN COMMOD FOR SPT DEFINITIONS
    96
    97				EXTERNAL SPTATB,SPTEN1,SPTVIR,SPPVIR,SPTPNO
    98
    99				;EXTERNALS IN COMMON FOR LMAP DEFINITIONS
   100
   101				EXTERNAL LMYCUR,UP4LDA,LM3ATB,LM3CUR
   102				EXTERNAL LM3CUR,LM3HDA,LM3LMJ,LM3LMV,LM3SPB
   103				EXTERNAL LM3SPO,LM3SPT,LMASRP,LMMEXS,LMPACT,CLKCHL
   104				EXTERNAL LMPREF,LMPSHR,LMPSUP,LMPVIR,LMPNER,UPTNTV
   105				EXTERNAL LMPSHR,LMPACT,LM3ERR,LMMERR,LMPDER,LMPDTE
   106				EXTERNAL LMPVIR,LMPMXW,MAXCPR
   107
   108				;EXTERNALS IN CLOCK1, SCHED1
   109
   110				EXTERNAL WSCHED,SWQ,CALSWP,SIOCNT,SIOBOM,SIPTOT
   111				EXTERNAL STLBTM		;BIT MAP FOR STOLEN PAGES.
   112				EXTERNAL TIMEF
   113
   114				;MISCELLANEOUS IN COMMON
   115
   116				EXTERNAL SAVE3,BITTBL,JOB,CPOPJ,CPOPJ1,SAVE2,SAVE1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 3-2
CORE1.MAC	28-OCT-87 17:05		S.MAC - with system parameter file for P035/D, January 1988

   117				EXTERNAL TPOPJ1,WRTCHP,TPOPJ
   118				EXTERNAL CURUPT,EPT,CTXTAB
   119				IFCPU (KI),<EXTERNAL TIMCHN>
   120				EXTERNAL PJBSTS,MWSLIM,USEMAX,ADRNCT,ADRDUM
   121
   122				;JOB TABLE DEFINITIONS IN COMMON
   123
   124				EXTERNAL JBTSTS,JBYMWL,JBYMWS,JBTCTX,JBTMPC,JBYRPT
   125				EXTERNAL JBTPGO,JBTIOA,JBTPIP,JBYACT
   126				EXTERNAL JBTAJF
   127
   128				;EXTERNALS IN FILE SYSTEM
   129
   130				EXTERNAL CNVATP,DABBIT,KREPLC,ATBSTS
   131				EXTERNAL SRCSPT,ATPMXU,ATBMWC,ATMMWC,INCUMC
   132				EXTERNAL RBMASK
   133				EXTERNAL OHTNUM,SRCOHT,OHTDER,OHTDTE,OHTPAR,OHTTAB
   134
   135				;EXTERNALS IN ERRCON
   136
   137				;EXTERNALS IN COMMOD
   138
   139				EXTERNAL STRDDB,STRBTS,SRPNDS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 4
CORE1.MAC	28-OCT-87 17:05		CORUUO FOR VM SYSTEM

   140				SUBTTL CORUUO FOR VM SYSTEM
   141
   142				EXTERN IOWAIT,TIMADJ,HSEXIS,UPTREL,UPTHRL,KILLHS
   143				EXTERN JOBREL,JOBHRL,STRTAL,CORXPN,KILPGS,STRDDB
   144				EXTERN SG.SWR,UPTSTS,JBTUPM,PVYCOR
   145
   146				COMMENT ! ROUTINE CORUUO - KERNEL OF VM SYSTEM CORE UUO
   147				PURPOSE: EXPAND/CONTRACT HIS CORE IMAGE BETWEEN 0 & JOBREL
   148					400000 & JOBHRL, ADJUST JOBREL/JOBHRL AND UPT COPIES,
   149					AND RETURN (AC)=ALLOWED CORE, IN 1K UNITS
   150
   151				EXPECTS:	T1/ HIARG,,LOARG	J/JOB   M/USER AC #
   152					UPTREL/ AS LEFT BY LAST CORE/RUN/RUNSEG (NOT
   153						NECESSAIRILY LAST EXISTING ADDRESS IN "LOWSEG"--
   154						HE MAY HAVE VCREATED PAGES HIMSELF)
   155					UPTHRL/ AS LEFT BY LAST CORE/RUN/RUNSEG/REMAP ETC.
   156					UPTSTS/ SG.SWR SET IF IMAGE MAPPED FROM .SWR FILE
   157
   158				FUNCTION:
   159				1. JUST RETURN AVAIL CORE IN 1K IF T1= 0 ARG FROM USER
   160				2. WAIT FOR ALL IO (MAG TAPE) TO STOP
   161				3. USER WANTS LOWSEG SIZE CHANGED IF LOARG .NE. 0; ROUND
   162				   IT TO NEXT 1K, EXPAND/CONTRACT AS NECESSARY. EXPAND MEANS
   163				   VCREATE PAGES FROM PRESENT TOP OF SEGMENT UP TO ROUNDED
   164				   LOARG VALUE. ANY FAILURE MEANS USER HAS A PAGE IN THERE
   165				   ALREDY OR IS GOING OVER SIZE LIMITS.  CONTRACT MEANS
   166				   VCLEAR PAGES FROM ROUNDED LOARG+1 TO PRESENT END OF SEGMENT.
   167				 SOULDNT   EVER FAIL
   168				4. HE WANTS HISEG SIZE CHANGED IF HIARG.NE. 0; ROUND
   169				IT UP; IF NO HISEG EXISTS BY HAVING DONE A REMAP,RUN,
   170				GET,ETC., QUIT ERROR RETURN NOW. IF ROUNDED HIARG.LT.400000,
   171				KILL (VCLEAR) ENTIRE HISEG & RETURN SIZE IN 1K.
   172				5. IF HE WANTS TO EXPAND OR CONTRACT HIS HISEG, HE MAY ONLY
   173				DO SO IF HE HAS MAX-WRITE PRIV TO ALL THE PAGES (BUT ONLY
   174				PAGE 400 IS CHECKED). IF THE HISEG CAME FROM A .SWR FILE,
   175				ERROR RETURN BECAUSE CORE UUO CANNOT CREATE SHAREABLE PAGES
   176				WHICH IS WHAT OLD CORUUO DID; EXPAND/CONTRACT HIS PRIVATE
   177				HISEG BY VCREATING OR VCLEARING PRIVATE PAGES.
   178				6. RETURN SIZE IN 1K. SKIP RTN,SUCCESS
   179
   180				!
   181
   182	000023'			CORUUO::
   183	000023'	322300	000075'		JUMPE	T1,SIZCOR
   184	000024'	261040	000006		PUSH	P,T1
   185	000025'	260040	000000*		PUSHJ	P,IOWAIT	;WAIT FOR ALL IO TO STOP
   186	000026'	260040	000000*		PUSHJ	P,TIMADJ	;ADJUST CHARGE & UPDATE SPACE-TIME COUNTS
   187	000027'	550301	000000		HRRZ	T1,(P)		;T1_LOARG
   188	000030'	322300	000047'		JUMPE	T1,CORUHI	;NO CHANGE TO LOW SEG
   189	000031'	435300	001777		IORI	T1,1777
   190	000032'	542301	000000		HRRM	T1,(P)
   191	000033'	305300	400000		CAIGE	T1,400000
   192	000034'	254000	000037'		  JRST	CORLO1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 4-2
CORE1.MAC	28-OCT-87 17:05		CORUUO FOR VM SYSTEM

   193	000035'	260040	000000*		PUSHJ	P,HSEXIS	;SKIP IF NO HS
   194	000036'	254000	000074'		  JRST	CORERR		;HAS HS ALREADY, CANT ASK FOR >128K
   195	000037'	550301	000000	CORLO1:	HRRZ	T1,(P)		;T1/ REQUESTED HIGHEST ADDR
   196	000040'	550340	000000*		HRRZ	T2,%UPT+UPTREL	;GET CURRENT HIGHEST ADDRESS
   197								;TRIED TO USE JOBREL, BUT DUMB LOADER WIPES IT OUT BEFORE DOING
   198				 CORE UUO.
   199	000041'	260040	000112'	CORLO2:	PUSHJ	P,CORXK		;EXPAND/CONTRACT
   200	000042'	254000	000074'		  JRST	CORERR		;SOME TROUBLE
   201	000043'	550301	000000		HRRZ	T1,(P)		;T1/NEW END LOW SEG
   202	000044'	542300	000000*		HRRM	T1,%UPT+UPTREL
   203	000045'	260040	000136'		UXCTTU	<MOVEM T1,JOBREL> ; XCT THIS
   204	000046'	256200	006322'
   205	
   206	000047'	554301	000000	CORUHI:	HLRZ	T1,(P)		;T1/HIARG
   207	000050'	322300	000073'		JUMPE	T1,COROK	;NO CHANGE TO HS
   208	000051'	435300	001777		IORI	T1,1777
   209	000052'	506301	000000		HRLM	T1,(P)
   210	000053'	260040	000035*		PUSHJ	P,HSEXIS	;SKIP IF NO HS
   211	000054'	254000	000056'		  JRST	.+2
   212	000055'	254000	000074'		JRST	CORERR		;MAY NOT CREATE HS WITH CORUUO
   213	000056'	554301	000000		HLRZ	T1,(P)
   214	000057'	305300	400000		CAIGE	T1,400000
   215					  JRST	[PUSHJ P,KILLHS	;ZAP WHOLE HS
   216	000060'	254000	006323'			 JRST  COROK]
   217	000061'	200340	000000*		MOVE	T2,%UPT+UPTSTS
   218	000062'	603340	000000*		TLNE	T2,SG.SWR	;CAN NEVER EXPAND/CONTRACT ".SWR" SEGMENT
   219	000063'	254000	000074'		  JRST	CORERR
   220	000064'	550340	000000*		HRRZ	T2,%UPT+UPTHRL	;T2/CURRENT HIGHEST HS ADDR
   221								;T1/STILL HAS REQUESTED HIGHEST HS ADDR
   222	000065'	260040	000112'		PUSHJ	P,CORXK		;EXPAND/CONTRACT
   223								;NOTE THAT ANY ADDED PAGES ARE PRIV RDW !
   224	000066'	254000	000074'		  JRST	CORERR		;SOME TROUBLE
   225	000067'	554301	000000		HLRZ	T1,(P)		;NEW END OF HISEG
   226	000070'	542300	000000*		HRRM	T1,%UPT+UPTHRL	
   227	000071'	260040	000136'		UXCTBU <HRRM T1,JOBHRL>	;LEAVE LH ALONE
   228	000072'	256200	006325'
   229	000073'	350001	777777	COROK:	AOS	-1(P)		;RETURN IS BEHIND HIARG,,LOARG AT (P)
   230	000074'	262040	000006	CORERR:	POP	P,T1		;FIX STACK. DO NOT NEED USERS ARG
   231	000075'	200100	000000*	SIZCOR:	MOVE	J,JOB		;PROBABLY UNNECESSARY
   232	000076'	135300	000000*		LDB	T1,PVYCOR	;HIS CORE SIZE LIMIT
   233	000077'	271300	000001		ADDI	T1,1		;CONVERT TO PAGES..
   234	000100'	242300	000002		LSH	T1,2		;4*(PVYCOR+1)
   235	000101'	554342	000000*		HLRZ	T2,JBTUPM(J)	;HIS PRESENT SIZE . NOTE !!!
   236								;18 MAY 77 EVS & AA AGREE TO KEEP LH(JBTUPM)
   237								;=NUMBER OF EXISTENT PAGES BETWEEN 0 & 777
   238				PRINTF(<[CORUUO @SIZCOR+5 Use DRBSTR instead of STRDDB]>)
   239	000102'	201400	000000*		MOVEI	T3,STRDDB	;Current Structure pointer ** later in DRB **
   240	000103'	270350	000000*		ADD	T2,STRTAL(T3)	;HOPEFULLY IN PAGES. CHECK THIS OUT
   241	000104'	315340	000006		CAMGE	T2,T1
   242	000105'	200300	000007		  MOVE	T1,T2
   243	000106'	242300	777777		LSH	T1,-1		;RETURN IN 1K
   244	000107'	256200	006326'		UMOVEM	T1,(M)
   245	000110'	255000	000000		LSTCHK
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 4-3
CORE1.MAC	28-OCT-87 17:05		CORUUO FOR VM SYSTEM

   246	000111'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 5
CORE1.MAC	28-OCT-87 17:05		CORUUO FOR VM SYSTEM

   247				COMMENT @ ROUTINE CORXK
   248				FUNCTION: TO EXPAND OR KILL CORE, WHERE T1/ NEW REQUESTED
   249					HIGHEST ADDR FOR THE (HI/LO) SEGMENT, AND T2/ CURRENT
   250					HIGHEST ADDR FOR THE SAME SEGMENT.
   251				CALL:	MOVE T1,REQUEST
   252					MOVE T2,CURRENT END
   253					PUSHJ P,CORXK
   254					 ERROR RETURN	;CORXPN COULDNT SUCCEED
   255					SUCCESS RETURN
   256				DESTROYS: T1,T2,T3,T4,PG,W
   257				RESTRICTIONS:
   258
   259				@
   260
   261	000112'	242300	777767	CORXK:	LSH	T1,-9		;LAST REQUESTED PAGE
   262	000113'	242340	777767		LSH	T2,-9		;CURRENT LAST PAGE
   263	000114'	316300	000007		CAMN	T1,T2
   264	000115'	254000	000000*		  JRST	CPOPJ1
   265	000116'	317300	000007		CAMG	T1,T2
   266					  JRST	[ADDI  T1,1
   267						 AOS   (P)
   268	000117'	254000	006327'			 PJRST KILPGS]	;KILL FROM REQUEST+1 TO CURRENT
   269	000120'	250300	000007		EXCH	T1,T2		;T1/CURRENT END; T2/REQUESTED END
   270	000121'	332000	000006		SKIPE	T1		;IF CURRENT=0 CREATE FROM 0 TO REQUEST,
   271	000122'	271300	000001		  ADDI	T1,1		;ELSE CREATE FROM CURRENT+1 TO REQUEST
   272	000123'	261040	000006		PUSH	P,T1		;EXPAND FROM T1 TO T2. SAVE T1 INCASE FAILURE
   273	000124'	260040	000000*		PUSHJ	P,CORXPN
   274	000125'	634400	000010		  TDZA	T3,T3		;FAILED. T3/0
   275	000126'	201400	000001		MOVEI	T3,1		;SUCC, T3/1
   276	000127'	262040	000006		POP	P,T1		;START PG
   277	000130'	326400	000115*		JUMPN	T3,CPOPJ1	;SUCCESS,SKIP RTN
   278	000131'	554340	000012		HLRZ	T2,W		;ERROR VP #
   279	000132'	275340	000001		SUBI	T2,1		;T2/LAST VP CREATED
   280	000133'	317340	000006		CAMG	T2,T1		;CREATED AT LEAST ONE?
   281	000134'	263040	000000		  POPJ	P,		;NO, NO CLEANUP TO DO
   282	000135'	324740	000000*		PJRST	KILPGS		;YES, KILL T1 TO T2--ALL PAGES WHICH
   283								;DID GET CREATED. NON-SKIP RTN FROM CORXK
   284
   285
   286				COMMENT ;@@SUBROUTINE DOXCT
   287				@@PURPOSE PERFORM AN EXECUTIVE EXECUTE TO USER SPACE REGARDLESS
   288				OF THE SETTING OF PC.UIO
   289				@@ENTRY CALLED VIA UXCTFU, UXCTTU, AND UXCTBU MACROS. DO NOT CALL
   290				DIRECTLY.
   291				@@ACCUM PRESERVES ALL ACS
   292				@@EXIT ALWAYS SKIP RETURNS (OVER THE EXECUTIVE EXECUTE).
   293				@@FUNCTION IF PC.UIO ALREADY SET, JUST RETURN. ELSE
   294				TURN ON PC.UIO, IF KL SET PREVIOUS AC BLOCKS TO USER,
   295				XCT THE EXECUTIVE XCT, IF KL SET ORIGINAL AC BLOCKS BACK,
   296				AND RETURN, RESTORING PC FLAGS.
   297				@@;
   298
   299				EXTERNAL UPTACP
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 5-2
CORE1.MAC	28-OCT-87 17:05		CORUUO FOR VM SYSTEM

   300
   301	000136'	261040	000006	DOXCT::	PUSH	P,T1
   302	000137'	265300	000140'		JSP	T1,.+1
   303	000140'	603300	004000		TLNE	T1,PC.UIO	;ALREADY ON?
   304	000141'	254000	000000*		JRST	TPOPJ		;YES, JUST RETURN AND DO THE INSTRUCTION.
   305	000142'	510300	000000*	IFNCPU (KI),<HLLZ T1,%UPT+UPTACP;GET AC BLOCK INFO
   306	000143'	621300	000700		TLZ	T1,(LG.PAC)	;MAKE PREVIOUS BLOCK BE USER
   307	000144'	701140	000006		WRUBR	T1
   308				>;END IFCPU (KI)
   309	000145'	262040	000006		POP	P,T1		;RESTORE T1 IN CASE INSTRUCTION INVOLVES IT.
   310	000146'	254120	006332'		JRSTF	@[PC.UIO,,.+1]	;SET USER IOT
   311	000147'	256021	000000		XCT	@(P)		;DO THE EXEC XCT
   312	000150'	254000	000152'		  JRST	.+2		;NOT A SKIP
   313	000151'	350001	000000		AOS	(P)		;SKIP, GO YET ONE FURTHER
   314	000152'	350001	000000		AOS	(P)		;SKIP OVER THE ARGUMENT
   315	000153'	701140	000000*	IFNCPU (KI),<WRUBR %UPT+UPTACP>	;IF KL, RESET AC BLOCKS
   316	000154'	261040	000006		PUSH	P,T1		;save T1
   317	000155'	200301	777777		MOVE	T1,-1(P)	;get flags in LH
   318					HRRI	T1,[ POP P,T1	;put addr of code to do return in RH
   319	000156'	541300	006333'			     POPJ P, ]
   320	000157'	254120	000006		JRSTF	@T1		;restore flags and return
   321
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 6
CORE1.MAC	28-OCT-87 17:05		KCREAT

   322				SUBTTL KCREAT
   323
   324				COMMENT ! ENTRY UCREAT -- COME HERE FROM UUOCON ON USER UUO
   325				FUNCTION: SET UP AC'S FOR KERNEL CALL, CALL VCREAT KERNEL,
   326					  RETURN ERRORS TO USER IF ANY, EXIT
   327				USER UUO CALL: MOVE AC,[<PROT>B7+<COUNT>B17+VP#]
   328					VCREAT AC,
   329					 ERROR RETURN, AC/ VP#,,ERROR CODE
   330					SUCCESS RETURN, AC UNCHANGED
   331				EXPECTS: J/ JOB; W/ USER AC#; T1/CONTENTS USER AC
   332				!
   333
   334	000160'	265440	001566'	UCREAT::JSP	T4,DOUUO	;PUSHJ TO KCREAT WITH ARGS IN RIGHT PLACES.
   335	000161'	201700	000045		MOVEI	P3,.ARCHM	;VCREAT NEEDS CHANGE MAP ACCESS
   336	000162'	260040	000000*		PUSHJ	P,SWRUPX	;WRITE LOCK %UPX FOR CORRECT JOB
   337					  JRST	[MOVSS T1
   338						 HRRI  T1,CROFF%
   339						 DPB   P3,FDEERP<T1> ;PUT IN SUB CODE
   340	000163'	254000	006336'			 POPJ  P,]	;GIVE ERROR RETURN.
   341
   342				COMMENT ! ROUTINE KCREAT -- KERNEL
   343				FUNCTION: CREATE PRIVATE,VIRGIN,MAXIMALLY-WRITEABLE,
   344					UNVIOLATED,UNSHARED,INACTIVE,NO-ERROR PAGES NOT IN
   345					USER OR MONITOR WORKING SET, BEGINNING AT <VP#>
   346					& CONTINUING FOR <COUNT> PAGES. IF AN ERROR OCCURRS,
   347					RETURN NO-SKIP T1/VP#,,CODE WHERE VP# IS THE PAGE
   348					NUMBER BEING PROCESSED WHEN ERROR OCCURRED.
   349				EXPECTS: T1/ <USER BIT>,<PROT>,<COUNT>,VP#
   350					J/JOB
   351				DESTROYS: T1-T4,P1-P4,1B0 IN F
   352				RESTRICTIONS: MONITOR ROUTINES WHICH PUSHJ TO KCREAT SHOULD
   353				 BEWARE OF AC'S AND SET 1B0 OF T1 TO 1 IF IT WANT USER PROTECTION.
   354
   355				CALL:	PUSHJ P,KCREAT
   356					 ERROR RETURN, T1/ VP#,,CODE
   357					SUCCESS RETURN
   358				ERROR CODES:
   359				!
   360					ERRCOD(0,CRBCN%,KCEBCN)	;BAD COUNT ARGUMENT
   361					ERRCOD(1,CRBVP%,KCEBVP)	;BAD VPMENT, OUT OF RANGE.
   362					ERRCOD(2,CRBPR%,KCEBPR)	;BAD PROTECTION ARGUMENT
   363					ERRCOD(3,CREXV%,KCEEXV)	;VP ALREADY EXISTS
   364					ERRCOD(4,ZZ,ZZ)		;(VP DOES NOT EXIST GLOBAL CODE)
   365					ERRCOD(5,CRLIM%,KCELIM)	;EXCEEDED EXISTING PAGE LIMIT (PVYCOR)
   366					ERRCOD(6,CRDFL%,KCEDFL)	;DISK FULL
   367					ERRCOD(7,CROFF%,KCEOFF) ;"OTHER FRAME" FAILURE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 7
CORE1.MAC	28-OCT-87 17:05		KCREAT

   368				EXTERN GETPAG,MBIT,UUYCTG,UUYCPR
   369
   370	000164'	702600	400000*	KCREAT:: NOCHARGE		;TURN OFF THE CLOCK.
   371	000165'	603300	400000		TLNE	T1,FL.USR	;COPY USER BIT INTO SIGN BIT OF F FROM
   372	000166'	665200	400000		  TLOA	F,FL.USR	;SIGN BIT OF T1
   373	000167'	621200	400000		  TLZ	F,FL.USR
   374	000170'	135340	000000*		LDB	T2,UUYCPR	;T2/PROT FROM T1 ARG.
   375	000171'	332000	000007		SKIPE	T2
   376	000172'	303340	000000*		  CAILE	T2,MAXCPR
   377	000173'	254000	001553'		  JRST	KCEBPR		;FAIL BAD PROT
   378
   379	000174'	200600	000007		MOVE	P1,T2
   380
   381	000175'	135340	000000*		LDB	T2,UUYCTG	;T2/COUNT FROM T1 ARG.
   382	000176'	322340	001551'		JUMPE	T2,KCEBCN	;0 COUNT ILLEGAL
   383	000177'	550640	000006		HRRZ	P2,T1
   384	000200'	213000	000007		MOVNS	T2		;T2/-COUNT
   385	000201'	504640	000007		HRL	P2,T2		;P2/-COUNT,,START VP#
   386	000202'	135300	000076*		LDB	T1,PVYCOR	;MAX 2K BLOCKS CORE ALLOWED
   387	000203'	271300	000001		ADDI	T1,1		;CONVERT TO PAGES ALLOWED..
   388	000204'	242300	000002		LSH	T1,2		;PGS=4*(PVYCOR+1)
   389	000205'	504600	000006		HRL	P1,T1		;KEEP IN LH(P1) DURING LOOP BELOW
   390	000206'	400540	000000		SETZ	M,		;DSK RET PTR FOR GETPAG CALLS.
   391
   392	000207'			VCREA1:	;WHILE AOBJN P2, ALLOCATE DISK PG FOR W=RH(P2)
   393					;AND SETUP LMAP SLOT--UNLESS PAGE ALREADY EXISTS
   394					;OR IS INVALID OR NO DSK AVAILABLE.
   395					;J/JOB; F/USER AC# +(1B0) IF USER CALL
   396					;P1/ PVYCOR,,PROTECTION;  W/ VP# IN PROCESS
   397	
   398	000207'	550500	000015		HRRZ	W,P2
   399	000210'	265440	002647'		JSP	T4,VPCHK	;LEGITIMATE PG NO?
   400	000211'	254000	001552'		 JRST	KCEBVP		;NO
   401	000212'	303500	000777		CAILE	W,777		;IF EXEC CALLED TO CREATE A PER-
   402	000213'	254000	000221'		  JRST	VCREA2		;PROCESS PG, NO NEED TO CK. (JBTUPM LH
   403								;COUNTS USER PGS 0 - 777 ONLY)
   404	000214'	554440	000014		HLRZ	T4,P1		;PERMISSABLE MAX NO. PAGES
   405	000215'	554402	000101*		HLRZ	T3,JBTUPM(J)	;T3/CURRENT COUNT OF EXISTENT PGS
   406	000216'	271400	000001		ADDI	T3,1		;T3/TOTAL PGS AFTER THIS ALLOCATED
   407	000217'	313400	000011		CAMLE	T3,T4		;IN BOUNDS?
   408	000220'	254000	001556'		  JRST	KCELIM		;CREATED TOO MANY PAGES
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 8
CORE1.MAC	28-OCT-87 17:05		KCREAT

   409	000221'	260040	004660'	VCREA2:	PUSHJ	P,REDLMX	;GET P3, P4 SLOT. (NEED REF BIT)
   410	000222'	603700	000000*		TLNE	P3,LMMEXS
   411	000223'	254000	001554'		  JRST	KCEEXV		;TRYING TO CREATE PAGE THAT ALREADY EXISTS.
   412	000224'	201302	000000*		MOVEI	T1,DABBIT(J)	;GET DUMMY ATB POINTER
   413	000225'	137300	000000*		DPB	T1,LM3ATB	;PUT INTO LMAP SLOT
   414				PRINTF(<[VCREATE @VCREA2+5 checking for DSKCLN -- Use DRBSTR not STRDDB]>)
   415	000226'	201340	000000*		MOVEI	T2,SRPNDS	;IF DSKCLN HASN'T RUN YET,
   416	000227'	612340	000000*		TDNE	T2,STRDDB+STRBTS
   417					  JRST	[MOVE T2,ADRDUM
   418	000230'	254000	006342'			 JRST VCREA3]	;CREATE VP TO "DUMMY" DISK ADDRESS.
   419	000231'	260040	000000*		PUSHJ	P,CNVATP	;CONVERT ATB POINTER INTO ADDRESS
   420	000232'	260040	000000*		PUSHJ	P,INCUMC	;INCREMENT UNSHARED MAP COUNT
   421	000233'	201400	000000*		MOVEI	T3,ATPMXU	;MAX WRITE COUNT WILL GO TO NON-ZERO
   422	000234'	436406	000000*		IORM	T3,ATBSTS(T1)
   423	000235'	350406	000000*		AOS	T3,ATBMWC(T1)	;INCREMENT AND GET MAX WRITE COUNT
   424	000236'	606400	000000*		TRNN	T3,ATMMWC	;OVERFLOW?
   425	000237'	256000	000000'		 STOPCD 		;YES. CRASH.
   426	000240'	200400	000006		MOVE	T3,T1		;GET ATB ADDRESS INTO T3 FOR GETPAG
   427	000241'	201300	000000*		MOVEI	T1,MBIT
   428	000242'	200340	000013		MOVE	T2,M		;TRY TO BE CONTIGUOUS WITH LAST ONE.
   429								;WITH; ON T2/0,JUST CALL GETAPG
   430								;ALLOCATE DISK EVEN IF STRTAL IS .LE. 0.
   431								; SO OPERS CAN CLEAN UP DISK.
   432	000243'	260040	000000*		PUSHJ	P,GETPAG	;ALLOCATE & RETURN T2/NEXT RETREIVAL PTR.
   433	000244'	254000	001557'		  JRST	KCEDFL		;FULL..SOMEBODY SNUCK IN
   434	000245'	202340	000013		MOVEM	T2,M		;REMEMBER FOR NEXT VP CREATED.
   435	000246'	550740	000007	VCREA3:	HRRZ	P4,T2		;P4/ LOW 17 BITS + EXTRA BIT OF RETR. PTR.
   436	000247'	405740	377777		ANDI	P4,377777	;P4/LOW 17 BITS
   437	000250'	242340	000000*		LSH	T2,-LMASRP	;HIGH 10 BITS IN POSITION
   438	000251'	137340	000000*		DPB	T2,LM3HDA	;FOR DEPOSIT IN P3
   439	000252'	621700	000000*		TLZ	P3,LMMERR!LMPSHR!LMPACT
   440	000253'	661700	000000*		TLO	P3,LMPVIR!LMPMXW
   441	000254'	137600	000000*		DPB	P1,LM3CUR	;PROTECTION
   442	000255'	260040	004730'		PUSHJ	P,SETLMX	;EXPECTS W,P3,P4 - LDC COUNT IS NOT INCREMENTED
   443	000256'	205300	000001		MOVSI	T1,1		;INCREMENT COUNT OF
   444	000257'	307500	000777		CAIG	W,777		;EXISTENT PAGES IN 0 - 777
   445	000260'	272302	000215*		  ADDM	T1,JBTUPM(J)	;EXISTENT PAGES FOR USER
   446	000261'	350002	000000*		AOS	JBTMPC(J)	;CHARGE FOR IT. 1/4 THE RATE FOR MAPPING
   447	000262'	350000	000261*		AOS	JBTMPC		;SYSTEM TOTAL
   448	000263'	350000	000270'		AOS	VCRECT		;PERFORMANCE COUNTER
   449	000264'	332000	000000*		SKIPE	TIMEF		;MAKE SURE THAT WE GO THRU SCHEDULER IF CLOCK HAS TICKED,
   450	000265'	260040	000000*		 PUSHJ	P,WSCHED	;SO THAT BIG ARGS WON'T TIE THINGS UP.
   451	000266'	253640	000207'		AOBJN	P2,VCREA1
   452	000267'	254000	000130*		JRST	CPOPJ1
   453
   454	000270'	000000	000000	VCRECT:: EXP 0		;COUNT OF VCREATE'D PAGES.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 9
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   455				SUBTTL KREMOV/KCLEAR
   456
   457				COMMENT #
   458				@@SUBROUTINE KREMOV/KCLEAR
   459				@@PURPOSE
   460				KERNEL SUBROUTINE TO REMOVE VM PAGES.
   461				KREMOV COMPLAINS ABOUT NON-EXISTENT PAGES, KCLEAR DOES NOT.
   462				BOTH ROUTINES ERROR RETURN ON AN IO ERROR.
   463				@@ENTRY
   464				EXPECTS T1/ USER'S ARG, PLUS BIT 0 IS SET IFF CAME FROM
   465				USER MODE. J CONTAINS FRAME NUMBER OF TARGET FRAME, %UPX ITS CONTEXT PAGES.
   466				@@ACCUM
   467				DESTROYS P1-P4, T1-T4, S, F, W, U, AND PG.
   468				@@EXIT
   469				SKIP RETURNS UNLESS ERROR, IN WHICH CASE IT NON-SKIP RETURNS.
   470				ON NON-SKIP RETURN, LH(T1) CONTAINS THE NO. OF THE VM PAGE
   471				ON WHICH THE FAILURE OCCURRED, AND RH(T1) CONTAINS THE ERROR
   472				CODE AS FOLLOWS:  FALCTG,FALDVR,FALNEX,FALOPE,FALOFF.
   473				@@ #
   474
   475				INTERN KREMOV,KCLEAR
   476				EXTERNAL DNDADS,IOSERR,IOSHRE,IOSHWE,IOSSAE,CBREMV,JBTCLB
   477				EXTERNAL LMPDER,LMPDTE
   478				EXTERNAL PRRCHK,OHTNUM,REMOHT,RIBELB,UFRCHK
   479				EXTERNAL MAPRWL,ATBLIC,DNDADS
   480
   481				;FLAGS IN LH(F)
   482
   483			400000	MF.VCL==(1B0)			;ON IF VCLEAR. MUST BE SIGN BIT.
   484			200000	MF.CRF==(1B1)			;CLEAR REF BIT FLAG.
   485			100000	MF.NEL==(1B2)			;NO ERROR LOGGING. IF SET, GUARANTEED
   486								; NOT TO USE %RIB OR %RB2.
   487			040000	MF.OTF==(1B3)			;USE "OTHER FRAME" TO DO THE REMOVE.
   488
   489			002000	RM.CRF==(1B7)			;CLEAR REFERENCE BIT ARGUMENT
   490			004000	RM.NEL==(1B6)			;NO ERROR LOGGING (USED BY EXEC ONLY)
   491			200000	RM.OTF==(1B1)			;"OTHER FRAME" BIT FROM UUO ARG
   492
   493
   494				EXTERN ATBDUM,ATBRIB,ATPCRE,ATPSUP,ATPUFE,DECRMV,DECUPM
   495				EXTERN DRBRIB,FALNEX,FALOPE,FNYUFP,GETSAT,MAPCML,FALOFF
   496				EXTERN MAPRLS,MAPWTL,MAPXCH,RBREAL,RELLOK,RELSAT,RIBLCW
   497				EXTERN RIBSTS,RIPUFE,SETARR,UFDERR,UFPERR,UPDADS,VUOOUT
   498				EXTERN STRDDB,STRBTS,SRPNDS,IPOPJ
   499				EXTERNAL UPTLKJ,%UPLMX,UPTLKC,OTFFLG
   500
   501
   502
   503	000271'	634200	000004	KREMOV:	TDZA	F,F		;INIT FLAGS IN LH(F)
   504	000272'	205200	400000	KCLEAR:	MOVSI	F,MF.VCL	;FLAG THAT THIS IS VCLEAR.
   505
   506				    ;GET AND CHECK THE ARGS.
   507	000273'	260040	000000*		PUSHJ	P,SETARR	;P2/CONTIG, W/1ST DEST PAGE NO.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 9-2
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   508	000274'	263040	000000		  POPJ	P,		;GIVE ERROR RETURN, CODE IN T1.
   509	000275'	603600	002000		TLNE	P1,RM.CRF	;CLEAR REF BIT BIT ON?
   510	000276'	661200	200000		TLO	F,MF.CRF	;FLAG TO CLEAR REF BITS.
   511	000277'	603600	004000		TLNE	P1,RM.NEL	;IF NO ERROR LOGGING,
   512	000300'	661200	100000		TLO	F,MF.NEL	;NO BAT BLOCKS, MARK FILE, OR ANYTHING.
   513	000301'	603600	200000		TLNE	P1,RM.OTF	;USER WANTS OTHER FRAME?
   514	000302'	661200	040000		TLO	F,MF.OTF	;YES, SET THE FLAG.
   515	000303'	261040	000015		PUSH	P,P2		;SAVE CONTIG ON STACK, DECREMENT IT THERE.
   516
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 10
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   517				    ;START THE PAGES OUT.
   518	000304'	261040	000012		PUSH	P,W		;SAVE W AND M FROM VALID.
   519	000305'	261040	000013		PUSH	P,M		; NEED W, AND CLAIM TO PRESERVE M.
   520								; VALID LEAVES J SETUP TO C(JOB).
   521	000306'	325200	000315'		JUMPGE	F,REMV14	;JUMP IF REMOVE.
   522
   523				      ;HERE FOR CLEAR.  SKIP OVER NON-EXISTENT PAGES, BECAUSE
   524				      ;WE DON'T CARE ABOUT THEM.
   525	000307'	515440	000222*	REMOV1:	HRLZI	T4,LMMEXS	;DON'T CARE ABOUT
   526	000310'	612452	000000*	REMV11:	TDNE	T4,%UPLMX(W)	;NON-EXIST PAGES.
   527	000311'	254000	000315'		JRST	REMV14		;THIS PAGE EXISTS.
   528	000312'	201512	000001		MOVEI	W,1(W)		;TRY THE NEXT
   529	000313'	367640	000310'	REMV12:	SOJG	P2,REMV11	;PAGE.
   530	000314'	254000	000350'		JRST	REMV18		;ALL DONE. NO EXISTENT PAGES.
   531				      ;HERE TO START VALIDATION/START.
   532	000315'	551312	000000	REMV14:	HRRZI	T1,(W)		;SET UP T1/ CONTIG,, START PAGE
   533	000316'	506640	000006		HRLM	P2,T1		;NO., FOR VALID.
   534	000317'	603200	040000		TLNE	F,MF.OTF	;USE OTHER CONTEXT?
   535	000320'	661300	000000*		TLO	T1,OTFFLG	;YES, TELL VALID
   536	000321'	261040	000015		PUSH	P,P2		;SAVE THE ACS THAT WE CARE ABOUT
   537	000322'	261040	000004		PUSH	P,F		;INSIDE THIS LOOP, THAT
   538	000323'	261040	000012		PUSH	P,W		;VALID DESTROYS.
   539	000324'	260040	001124'		PUSHJ	P,VALID		;TRY TO VALID ALL THE REST.
   540	000325'	254000	000332'		  JRST	REMV16		;FAILED.
   541	000326'	262040	000012		POP	P,W		;WON, ALL THE REST
   542	000327'	262040	000004		POP	P,F		;ARE
   543	000330'	262040	000015		POP	P,P2		;DONE.
   544	000331'	254000	000350'		JRST	REMV18		;
   545	000332'	262040	000012	REMV16:	POP	P,W		;HERE ON VALIDATION FAILED.
   546	000333'	262040	000004		POP	P,F		;
   547	000334'	262040	000015		POP	P,P2		;
   548	000335'	551346	000000		HRRZI	T2,(T1)		;WHAT WAS
   549	000336'	306340	000005		CAIN	T2,VLIOE%	;I/O ERROR?
   550	000337'	254000	000343'		  JRST	REMV17		;YES, CATCH IT LATER.
   551	000340'	302340	000004		CAIE	T2,VLNVP%	;ERROR?
   552	000341'	256000	006344'		 STOPCD (.,STOP,REMVPG,,<Remove virtual page - Error>)
   553				  ;;REMV16+7
   554	000342'	325200	000350'		JUMPGE	F,REMV18	;NON-EXS ON REMOV WILL BE FATAL,
   555	000343'	271652	000000	REMV17:	ADDI	P2,(W)		;CLEAR, AND WE SAW A NON-
   556	000344'	554500	000006		HLRZ	W,T1		;EXIST PAGE.  GO SEE
   557	000345'	201512	000001		MOVEI	W,1(W)		;WHETHER THE REST
   558	000346'	275652	000000		SUBI	P2,(W)		;EXIST OR
   559	000347'	327640	000307'		JUMPG	P2,REMOV1	;NOT.
   560	000350'	262040	000013	REMV18:	POP	P,M		;RESTORE M AND W NOW.
   561	000351'	262040	000012		POP	P,W		;
   562
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 11
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   563				    ;HERE TO REMOVE EACH PAGE.
   564
   565				      ;DO A VALIDATE/WAIT.
   566	000352'	205300	000307*	REMOV2:	MOVSI	T1,LMMEXS	;IF PAGE EXISTS,
   567	000353'	612312	000310*		TDNE	T1,%UPLMX(W)	;THEN GO AND
   568	000354'	254000	000360'		JRST	REMV21		; VALIDATE/WAIT IT.
   569	000355'	321200	000416'		JUMPL	F,REMOV9	;NON-EXISTENT. JUMP TO CONTINUE IF VCLEAR.
   570	000356'	201340	000004		MOVEI	T2,VLNVP%	;FATAL IF
   571	000357'	254000	000424'		JRST	REMFAL		;REMOVE.
   572	000360'	551312	000000	REMV21:	HRRZI	T1,(W)		;BUILD ARG
   573	000361'	505300	000001		HRLI	T1,1		;FOR A ONE PAGE
   574	000362'	603200	040000		TLNE	F,MF.OTF	;OTHER CONTEXT?
   575	000363'	665300	002000*		TLOA	T1,VL.WAT+OTFFLG ;YES, SET WAIT AND OTHER FLAG
   576	000364'	661300	002000		TLO	T1,VL.WAT	;NO, JUST SET WAIT.
   577	000365'	260040	000654'		PUSHJ	P,GVALID	;DO THE VALIDATE/WAIT FOR CORRECT FRAME.
   578	000366'	254000	000370'		  JRST	.+2		;ERROR.
   579	000367'	254000	000374'		JRST	REMV23		;OKAY.
   580	000370'	551346	000000		HRRZI	T2,(T1)		;WHAT WAS THE ERROR TYPE?
   581	000371'	302340	000005		CAIE	T2,VLIOE%	;IO ERROR?
   582	000372'	256000	000341'		 STOPCD (,XCT,REMVPG);;	;Remove virtual page - Error    ;;REMV21+12
   583	000373'	325200	000424'		JUMPGE	F,REMFAL	;I/O ERRORS ARE FATAL IF NOT VCLEAR.
   584								; (IF LMPNER SET, WON'T GET THIS.)
   585	000374'	332002	000000*	REMV23:	SKIPE	JBTCLB(J)	;THIS JOB IN A CLUB?
   586	000375'	260040	000000*		PUSHJ	P,CBREMV	;IF CLB PAG, PUNT JOB FROM CLB.
   587	000376'	260040	004655'		PUSHJ	P,GETLMX	;GET LMAP SLOT IN P3 AND P4.
   588
   589				      ;DEACTIVATE THE LMAP SLOT.
   590	000377'	303500	000000*		CAILE	W,VPUMAX	;CONTEXT PAGE?
   591	000400'	261040	000017		PUSH	P,P4		;YES, SAVE FOR BELOW.
   592	000401'	260040	004322'		PUSHJ	P,DEALMA	;DEACTIVATE LMAP SLOT.
   593	000402'	303500	000377*		CAILE	W,VPUMAX	;CONTEXT PAGE?
   594					JRST	[SOS %UPT+UPTLDC
   595	000403'	254000	006347'			 JRST REMV24]	;WILL STORE IT LATER SO %UPT WILL STILL BE SETUP
   596	000404'	603200	200000		TLNE	F,MF.CRF	;IF CLEARING REF BIT,
   597	000405'	621700	000000*		TLZ	P3,LMPREF	;MAY AS WELL DO IT NOW.
   598	000406'	260040	004726'		PUSHJ	P,STOLMX	;NO.  STORE IN CASE RESCHEDULED.
   599
   600				;NOTE: CODE BELOW CHANGES P3, AND P4 WHEN UPTLDC IS 0.
   601				; ASSUMES THAT INACTIVE SLOTS ARE NEVER CHANGED!
   602				; OTHER JOBS CAN'T CHANGE, SINCE WE HAVE CONTEXT PAGE WRITE LOCK.
   603
   604	000407'	260040	003740'		PUSHJ	P,RMXMWS	;TAKE OUT OF MWS.
   605	000410'	307500	000777		CAIG	W,777		;ALSO MABE OUT OF
   606	000411'	260040	003614'		PUSHJ	P,RMXUWS	;UWS.
   607
   608				;CALL THE REMOVE KERNEL ROUTINE
   609
   610	000412'	260040	000435'	REMV24:	PUSHJ	P,REMKRN
   611	000413'	303500	000402*		CAILE	W,VPUMAX	;CONTEXT PAGE?
   612	000414'	262040	000017		POP	P,P4		;YES.  RESTORE SLOT.
   613	000415'	260040	004730'		PUSHJ	P,SETLMX	;COUNT IS ZERO THRUOUT THIS CODE, JUST SET LMAP CONTENTS.
   614
   615				    ;IS THERE ANOTHER PAGE TO DO?
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 11-2
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   616	000416'	373001	000000	REMOV9:	SOSLE	(P)		;CONTIG IS ON STACK. FINISHED?
   617	000417'	344500	000352'		AOJA	W,REMOV2	;NO, DO NEXT PAGE.
   618	000420'	262040	000006		POP	P,T1		;YES, GET STACK RIGHT AND FALL
   619								; INTO REMOUT.
   620
   621				    ;HERE TO FINISH UP SUCCESSFULLY.
   622	000421'	260040	000000*	REMOUT:	PUSHJ	P,RELSAT	;POSSIBLY RELEASE A SAT.
   623	000422'	260040	000026*		PUSHJ	P,TIMADJ	;SIZE HAS CHANGED, DUMP CHARGE STUFF.
   624	000423'	254000	000267*		JRST	CPOPJ1		;RETURN.
   625
   626				    ;ERROR EXIT.
   627	000424'	262040	000017	REMFAL:	POP	P,P4		;TAKE CONTIG OFF THE STACK.
   628	000425'	201300	000000*		MOVEI	T1,FALNEX	;
   629	000426'	302340	000004		CAIE	T2,VLNVP%	;
   630	000427'	201300	000000*		MOVEI	T1,FALOPE	;
   631	000430'	261040	000006		PUSH	P,T1		;
   632	000431'	260040	000422*		PUSHJ	P,TIMADJ
   633	000432'	260040	000421*		PUSHJ	P,RELSAT	;
   634	000433'	262040	000006		POP	P,T1		;
   635	000434'	254000	000000*		JRST	VUOOUT
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 12
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   636				COMMENT ;@@SUBROUTINE REMKRN
   637				@@PURPOSE LMAP SLOT LOCATION DEPENDENT PART OF REMOVE
   638				@@ENTRY	P3,P4/LMAP SLOT (MUST BE INACTIVE AND NOT IN MWS)
   639					J/ FRAME NUMBER OF FRAME TO REMOVE A PAGE FROM
   640					W/ VP NUMBER OF PAGE TO REMOVE
   641					F/ MF.NEL SET IN LH IF NO ERROR LOGGING
   642
   643				UPTLDC FOR MAP WHERE P3 AND P4 CAME FROM MUST BE ZERO (REMKRN RESCHEDULES)
   644				MUST ENTER WITH C(J)'S CONTEXT PAGES LOCKED, UNLESS CALLER KNOWS
   645				NO ONE ELSE WILL TRY TO REMOVE OR CREATE THEM (%UPX CASE).
   646				IF PAGE REMOVED IS A CONTEXT PAGE, CALL WITH USE COUNT INCREMENTED
   647				(PGYUSE).
   648				CALLER RESPONSIBLE FOR DOING VALIDATE IF NECESSARY, CHECKING
   649				EXISTENCE OF LMAP SLOT VP, REMOVING FRAME FROM THE VP'S CLUB
   650				CLEARING REFERENCE BIT.
   651				@ACCUM P1-P4, T1-T4, S, U, PG. (J, F, W NOT CHANGED)
   652				@@EXIT MAY HAVE A SAT ON EXIT (MUST CALL RELSAT).
   653				NON-EXISTENT SLOT IN P3 AND P4 TO STORE BACK INTO LMAP.
   654				JBTUPM DECREMENTED IF NECESSARY.
   655				@@;
   656
   657	000435'	260040	004744'	REMKRN::PUSHJ	P,GETDPA	;GET DISK ADDRESS IN T2
   658	000436'	316340	000000*		CAMN	T2,ADRDUM	;THIS A "DUMMY" DISK PAGE?
   659	000437'	254000	000652'		 JRST	REMOV8		;YES, JUST BREAK SLOT APART.
   660	000440'	200600	000007		MOVE	P1,T2		;REMEMBER IT IN P1
   661	000441'	607700	000000*		TLNN	P3,LMPSUP	;IF SUPER, DON'T CALL THIS.
   662	000442'	260040	004771'		 PUSHJ	P,GETATB	;GET ATB ADDRESS IN T1
   663	000443'	200640	000006		MOVE	P2,T1		;REMEMBER IT IN P2
   664	000444'	607700	000000*		TLNN	P3,LMPDER	;COPY EXISTING ERROR BITS INTO S
   665	000445'	634000	000000		 TDZA	S,S		;NOT SET
   666	000446'	201000	200000		  MOVEI	S,IODERR	;IS SET, SET IN S
   667	000447'	603700	000000*		TLNE	P3,LMPDTE	;DATA ERROR?
   668	000450'	660000	100000		 TRO	S,IODTER	;YES.
   669	000451'	260040	000666'		PUSHJ	P,UPDERS	;SET BITS IN S, LOOKING AT PGY IF ANY AND OHT
   670	000452'	603700	000000*		TLNE	P3,LMMERR	;IF LMAP HAS SEEN ERROR AND
   671	000453'	603000	000000*		TLNE	S,IOSHWE	;THERE HASN'T BEEN AN OUTPUT ERROR
   672	000454'	334000	000000		 SKIPA
   673	000455'	661000	000000*		TLO	S,IOSHRE	;THEN THERE MUST HAVE BEEN READ ERROR.
   674	000456'	607000	000000*		TLNN	S,IOSERR	;ANY ERRORS?
   675	000457'	254000	000554'		 JRST	REMOV3		;NO.
   676				PRINTF(<[REMOVE +++ Checking DSKCLN done flag for error log - use DRBSTR]>)
   677	000460'	201300	000226*		MOVEI	T1,SRPNDS	;IF DSKCLN HASN'T FINISHED OR
   678	000461'	616300	000000*		TDNN	T1,STRDDB+STRBTS
   679	000462'	603200	100000		TLNE	F,MF.NEL	;NO ERROR LOGGING,
   680	000463'	254000	000554'		 JRST	REMOV3		;THEN DON'T LOG - IT TOUCHES RIBS.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 13
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   681				;HERE IF PAGE BEING REMOVED HAD ERRORS. MUST SET BITS IN RIB
   682				; AND UFD AND UFD RIB IF PAGE IS STILL IN FILE IT CAME FROM.
   683				; MUST UPDATE BAT BLOCK IF PAGE HAD A DATA ERROR.
   684
   685				;Change in P035/C02 to make 3650 device error show up in BAT pages.
   686				;*;	TRNN	S,IODERR	;DON'T LOG DEVICE ERRORS
   687				;*;	TRNN	S,IODTER	;IF ONLY DATA ERROR
   688				;*;	 SKIPA
   689	000464'	602000	300000		TRNE	S,IODTER!IODERR	;Log device errors same as data errors
   690	000465'	260040	000736'		 PUSHJ	P,UPERBT	;Unmapping bad file page - update BAT page
   691
   692	000466'	603700	000441*		TLNE	P3,LMPSUP	;SUPER PAGE?
   693	000467'	254000	000500'		 JRST	REMV25		;YES, DON'T MUCK WITH RIBS.
   694
   695	000470'	331015	000000*		SKIPL	ATBDUM(P2)	;IF PRIVATE PAGE OR
   696	000471'	336315	000000*		SKIPN	T1,ATBRIB(P2)	;FILE HAS BEEN DELETED,
   697	000472'	254000	000554'		 JRST	REMOV3		;DON'T MARK RIB OR UFD
   698
   699	000473'	661300	000000*		TLO	T1,RBREAL	;MAKE IT HOLY
   700	000474'	661000	000020		TLO	S,IO		;MAP IT WRITE LOCKED.
   701	000475'	260040	000000*		PUSHJ	P,MAPRWL	;GET RIB IN %RIB
   702	000476'	260040	000000*		PUSHJ	P,PRRCHK	;CHECK IT AGAINST DRB,FNB,ATB
   703	000477'	254000	000554'		  JRST	REMOV3		;FORGET IT (MAY HAVE BEEN DELETED)
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 14
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   704				;EITHER THIS IS SUPER PAGE OR RIB IS LOCKED DOWN. GET SAT
   705				; SO EITHER WE SET "F" BIT FOR SUPER PAGE IF PAGE WAS FREE
   706				; AND JUST HAD DATA ERROR, OR IF NOT SUPER CHECK TO SEE IF
   707				; PAGE IS STILL IN THE FILE.
   708
   709	000500'	200340	000014	REMV25:	MOVE	T2,P1		;GET DP
   710	000501'	661340	000473*		TLO	T2,RBREAL	;MAKE IT ACCEPTABLE
   711	000502'	201300	000000*		MOVEI	T1,MAPCML	;GET SAT COMPLETELY LOCKED
   712	000503'	260040	000000*		PUSHJ	P,GETSAT	;GET IT
   713	000504'	661000	000000*		  TLO	S,IOSSAE	;BAD SAT. FLAG THIS IN S
   714	000505'	261040	000006		PUSH	P,T1		;SAVE MASK
   715	000506'	261040	000010		PUSH	P,T3		; AND INDEX
   716	000507'	261055	000470*		PUSH	P,ATBDUM(P2)	;SAVE, SO STACK IS RIGHT AT REMOV31
   717	000510'	260040	000666'		PUSHJ	P,UPDERS	;FILL US IN ON NEW ERRORS
   718	000511'	200301	777776		MOVE	T1,-2(P)
   719	000512'	200401	777777		MOVE	T3,-1(P)	;RESTORE THESE, UPDERS MASHED THEM.
   720	000513'	607700	000466*		TLNN	P3,LMPSUP	;IS THIS A SUPER PAGE?
   721	000514'	254000	000531'		 JRST	REMV26		;NO, HANDLE NORMALLY
   722	000515'	606000	300000		TRNN	S,IODERR!IODTER	;ANY ERRORS?
   723	000516'	254000	000527'		 JRST	REM25A		;NO, JUST NORMAL SUPER PAGE.
   724	000517'	606000	200000		TRNN	S,IODERR	;YES. IF DEVICE ERR ON, FORGET IT
   725	000520'	603000	000504*		TLNE	S,IOSSAE	;JUST DATA ERROR. IF SAT OK,
   726	000521'	254000	000527'		 JRST	REM25A		;SO MUCH FOR THAT.
   727	000522'	612310	377000		TDNE	T1,%SAT+FBITS(T3);IF PAGE IS STILL USED,
   728	000523'	616310	377400		TDNN	T1,%SAT+MBITS(T3);THEN FORGET IT
   729	000524'	254000	000527'		 JRST	REM25A
   730	000525'	412310	377000		ANDCAM	T1,%SAT+FBITS(T3);ELSE SET "F" BIT. THIS IS SO A PROGRAM
   731								; CAN CAUSE "BAD" FREE PAGE TO GET INTO
   732								; BAT BLOCKS AND GET "F" BIT SET BY DOING
   733								; SUPER I/O TO ALL DISK PAGES.
   734	000526'	260040	000000*		PUSHJ	P,DNDADS	;DECREMENT DISK COUNTS - 1 LESS PAGE
   735	000527'	274040	006351'	REM25A:	SUB	P,[3,,3]	;GET STUFF OFF STACK
   736	000530'	254000	000652'		JRST	REMOV8		;AND JUST BREAK SLOT APART.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 15
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   737				;HERE FOR A NON-SUPER PAGE WITH AN ERROR. SEE IF ITS STILL
   738				; IN THE FILE, AND MARK RIB AND UFD IF SO.
   739
   740	000531'	607000	000520*	REMV26:	TLNN	S,IOSSAE	;IF BAD SAT, ASSUME ITS IN THE FILE
   741	000532'	616310	377000		TDNN	T1,%SAT+FBITS(T3);"F" BIT STILL SET (0) ?
   742	000533'	334000	000000		 SKIPA			;YES, MARK RIB
   743	000534'	254000	000566'		JRST	REMV31		;NO, SKIP THIS STUFF
   744
   745	000535'	554300	000000		HLRZ	T1,S		;GET BITS OF INTEREST IN T1
   746	000536'	405300	000456*		ANDI	T1,IOSERR	;ONLY RELEVANT ONES
   747	000537'	436300	376000*		IORM	T1,%RIB+RIBSTS	;
   748	000540'	205300	000000*		MOVSI	T1,RIPUFE	;SET THIS IN RIBLIC
   749	000541'	436300	376000*		IORM	T1,%RIB+RIBLCW	;SO NO  ONE BELIEVES LICENSE.
   750	000542'	200300	000014		MOVE	T1,P1		;GET COPY OF DISK ADDRESS SO WE CAN
   751	000543'	661300	000501*		TLO	T1,RBREAL	; TURN RBREAL ON IN IT
   752	000544'	202300	376000*		MOVEM	T1,%RIB+RIBELB	;THIS IS THE BAD PAGE, PUT IT HERE
   753								; SO ITS NOT GIVEN BACK WHEN FILE IS DELETED.
   754	000545'	205300	000000*		MOVSI	T1,ATPUFE	;SET THIS IN ATBLIC
   755	000546'	436315	000000*		IORM	T1,ATBLIC(P2)	;SO CURRENT USERS KNOW OF THE ERROR
   756	000547'	260040	000000*		PUSHJ	P,RELLOK	;RELEASE RIB NOW, WE'RE DONE.
   757	000550'	200315	000234*		MOVE	T1,ATBSTS(P2)	;IF FILE IS STILL IN UFD,
   758	000551'	606300	000000*		TRNN	T1,ATPDEL!ATPCRE!ATPSUP ;THESE WON'T BE SET.
   759	000552'	260040	000710'		 PUSHJ	P,UPERUF	;UPERUF WON'T FIND IT IF IT DISAPPEARS AFTER THIS.
   760	000553'	274040	006351'		SUB	P,[3,,3]	;SAT WAS RELEASED, FALL THRU AND
   761								; GET IT AGAIN.
   762
   763
   764				;HERE FOR PAGE WITHOUT ERROR, TO GET THE SAT.
   765
   766	000554'	603700	000513*	REMOV3:	TLNE	P3,LMPSUP	;IF SUPER SLOT,
   767	000555'	254000	000652'		 JRST	REMOV8		;JUST GO BREAK SLOT APART.
   768								;(SUPER MUST NOT TOUCH SAT, IN CASE ITS DSKCLN)
   769	000556'	200340	000014		MOVE	T2,P1		;GET DISK ADDRESS
   770	000557'	661340	000543*		TLO	T2,RBREAL	;MAKE IT HOLY
   771	000560'	201300	000502*		MOVEI	T1,MAPCML	;GET SAT COMPLETELY LOCKED SO NO ONE
   772								; CAN RUN IN THIS CODE FOR SAME PAGE TOGETHER.
   773	000561'	260040	000503*		PUSHJ	P,GETSAT
   774	000562'	661000	000531*		  TLO	S,IOSSAE	;BAD SAT, FLAG IT
   775	000563'	261040	000006		PUSH	P,T1		;SAVE MASK AND
   776	000564'	261040	000010		PUSH	P,T3		;INDEX
   777	000565'	261055	000507*		PUSH	P,ATBDUM(P2)	;SAVE STATE OF PRIVATE/FILE,
   778								; SINCE ATB CAN GO AWAY AFTER DECRMV.
   779
   780				;PAGES THAT HAD ERRORS, THEREFORE GET THE SAT, REJOIN HERE.
   781
   782	000566'	260040	000000*	REMV31:	PUSHJ	P,DECRMV	;DECREMENT ATB, SPT COUNTS, ETC.
   783					  JRST	[SUB P,[3,,3]	;NOT LAST USER,
   784	000567'	254000	006352'			 JRST REMOV8]	;SO ADJUST STACK POINTER AND GO.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 16
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   785				;HERE WHEN LAST USER OF THIS PAGE, WITH SAT COMPLETELY LOCKED
   786				; SO WE KNOW IT WILL STAY THAT WAY.
   787
   788	000570'	260040	000666'		PUSHJ	P,UPDERS	;SEE IF ANY NEW ERRORS LATELY.
   789	000571'	262040	000011		POP	P,T4		;GET ATBDUM BIT IN T4
   790	000572'	262040	000010		POP	P,T3		;SAT INDEX IN T3
   791	000573'	262040	000006		POP	P,T1		;SAT MASK IN T1
   792
   793	000574'	321440	000620'		JUMPL	T4,REMOV4	;IF PAGE IS NOT FROM A FILE, SKIP THIS STUFF.
   794	000575'	603000	000562*		TLNE	S,IOSSAE	;IF SAT ERROR, ASSUME ITS IN THE FILE.
   795	000576'	254000	000604'		 JRST	REMV36		;(RIBELB WILL NOT MATCH ANY POINTERS IN THE RIB)
   796	000577'	612310	377000		TDNE	T1,%SAT+FBITS(T3);IS PAGE STILL IN FILE?
   797	000600'	254000	000620'		 JRST	REMOV4		;NOT ANYMORE, SKIP THIS AND TREAT LIKE A PRIVATE PAGE.
   798	000601'	612310	377400		TDNE	T1,%SAT+MBITS(T3);CLEAR "M" BIT NOW.
   799	000602'	256000	006354'		 STOPCD (.,DISK,BACRFP,,<SAT (M) Bit already clear - File Page>);;REMV31+14
   800								;MAKE FULL DSKCLN RUN, IN CASE THIS WAS BECAUSE OF MULTIPLE USE
   801				 IN 2 OR MORE FILES
   802	000603'	436310	377400		IORM	T1,%SAT+MBITS(T3);(CLEAR MEANS MAKE BIT = 1)
   803
   804				;HERE FOR FILE PAGE. IF ANY READ ERRORS, AND NO WRITE ERRORS,
   805				; TAKE PAGE OUT OF CHT. MAYBE NEXT GUY WILL BE LUCKIER AND
   806				; GET GOOD DATA FROM THE DISK.
   807
   808	000604'	607000	000536*	REMV36:	TLNN	S,IOSERR	;ANY ERRORS TO SPEAK OF?
   809	000605'	254000	000650'		 JRST	REMOV7		;NO.
   810	000606'	322140	000650'		JUMPE	PG,REMOV7	;ALREADY OUT OF CORE?
   811	000607'	603000	000453*		TLNE	S,IOSHWE	;IF WRITE ERROR, LEAVE IN CORE.
   812	000610'	254000	000651'		 JRST	REMV71		;(TAKE OUT OF OHT).
   813	000611'	260040	005513'		PUSHJ	P,REMWAT	;WAIT FOR I/O TO STOP ON PAGE.
   814	000612'	260040	000666'		PUSHJ	P,UPDERS	;GET ANY NEW HAPPENINGS IN S
   815	000613'	603000	000607*		TLNE	S,IOSHWE	;WRITE ERROR NEWLY MADE?
   816	000614'	254000	000651'		 JRST	REMV71		;YES. DON'T TAKE IT OUT OF CHT
   817	000615'	322140	000652'		JUMPE	PG,REMOV8	;JUMP IF SNUCK OUT OF CORE DURING REMWAT.
   818	000616'	260040	004477'		PUSHJ	P,REMCHR	;OK, TAKE CP OUT OF CHT.
   819	000617'	254000	000652'		  JRST	REMOV8		;NO WRITE ERRORS, SO ITS NOT IN OHT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 17
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   820				;HERE FOR PRIVATE PAGE, LAST USER IS REMOVING IT.
   821				; TAKE IT OUT OF CHT SO WE DON'T BOTHER WRITING IT
   822				; OUT IF ITS DIRTY.
   823
   824	000620'			REMOV4:;Change in P035/C02 to make 3650 device error show up in BAT pages.
   825				;*;	TRNE	S,IODERR!IODTER	;IF ONLY DATA ERROR IS ON,
   826				;*;	TRNN	S,IODTER	;
   827	000620'	606000	300000		TRNN	S,IODERR!IODTER	;Log device errors same as data errors
   828	000621'	254000	000625'		 JRST	REMV41		;No errors
   829	000622'	607200	100000		TLNN	F,MF.NEL	;IF ERROR LOGGING NOT DISABLED,
   830	000623'	260040	000736'		 PUSHJ	P,UPERBT	;I/O error on private core page - update BAT
   831	000624'	254000	000633'		JRST	REMOV5		; AND CONVENIENTLY FORGET TO TURN "M" BIT OFF.
   832
   833	000625'	603000	000575*	REMV41:	TLNE	S,IOSSAE	;IF BAD SAT, CAN'T TOUCH %SAT OR UPDADS
   834	000626'	254000	000633'		 JRST	REMOV5
   835	000627'	612310	377400		TDNE	T1,%SAT+MBITS(T3);MAKE SURE "M" BIT IS NOT OFF ALREADY
   836	000630'	256000	006357'		 STOPCD (.,DISK,BACRVP,,<SAT (M) Bit already clear - Virtual Page>)
   837				 ;;REMV41+3
   838						;IN CASE THIS WAS MULTIPLY USED PAGE, RUN SLOW DSKCLN TO CHECK ALL FILES
   839	000631'	436310	377400		IORM	T1,%SAT+MBITS(T3);TURN IT OFF (SET TO 1)
   840	000632'	260040	000000*		PUSHJ	P,UPDADS	;INCREMENT DISK ALLOCATIONS COUNTS.
   841
   842	000633'	260040	000666'	REMOV5:	PUSHJ	P,UPDERS	;GET NEW ERROR STATUS, PG
   843	000634'	322140	000650'		JUMPE	PG,REMOV7	;GO IF NOT IN CORE ANYMORE.
   844	000635'	260040	005513'		PUSHJ	P,REMWAT	;WAIT FOR I/O TO STOP
   845	000636'	260040	000666'		PUSHJ	P,UPDERS	;GET PG AGAIN.
   846	000637'	322140	000650'		JUMPE	PG,REMOV7	;GO IF SNUCK AWAY.
   847	000640'	550300	000012	        HRRZ    T1,W            ;CLEAR LEFT HW FOR COMPARE
   848	000641'	301300	000000*		CAIL	T1,VPUMAX-NCTXPG;IF ITS CONTEXT PAGE AND
   849					 JRST	[LDB  T1,PGYUSE	;USE COUNT INCREMENTED
   850						JUMPN T1,REMOV6	;DO IT A LITTLE DIFFERENTLY
   851	000642'	254000	006362'			JRST  .+1]
   852	000643'	260040	004477'		PUSHJ	P,REMCHR	;TAKE CP OUT OF CHT
   853	000644'	254000	000650'		JRST	REMOV7		;AND DO THE REST.
   854
   855				;IF ITS A CONTEXT PAGE, HAVE TO DECREMENT USE COUNT, WHICH
   856				; IS ARTIFICALLY INCREMENTED BY KILUPT SO THE CORE PAGE
   857				; IS LOCKED IN CORE WHILE CONTEXT PAGES ARE GOING AWAY.
   858
   859	000645'	260040	005235'	REMOV6:	PUSHJ	P,DECUSE	;REMCHR WILL CHOKE ON NON-ZERO PGYUSE
   860	000646'	260040	004477'		PUSHJ	P,REMCHR	;TAKE CP OUT OF CHT
   861	000647'	260040	005211'		PUSHJ	P,INCUSE	;CORE PAGE WILL NOT BE USED IF THIS IS UP.
   862
   863	000650'	603000	000613*	REMOV7:	TLNE	S,IOSHWE	;IF IN THE OHT,
   864				REMV71:	  PUSHJ	P,[MOVE T2,P1	;GET DP IN T2
   865	000651'	260040	006365'			   PJRST REMOHT] ;TAKE DP OUT OF OHT NOW.
   866
   867				;WHETHER LAST USER OR NOT, FINISH THIS PAGE UP HERE.
   868
   869	000652'	404700	006367'	REMOV8:	AND	P3,[(LMPREF)]	;CLEAR ALL BUT REF BIT.
   870	000653'	324740	000000*		PJRST	DECUPM		;DECREMENT JBTUPM IF NECESSARY AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 18
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   871				;QUICK AND DIRTY TINY SUBR TO SAVE ACS FROM VALIDATE KERNEL ROUTINE.
   872				;REPLACES VALPAG T1,.
   873
   874
   875	000654'	261040	000012	GVALID:	PUSH	P,W
   876	000655'	261040	000004		PUSH	P,F
   877	000656'	261040	000013		PUSH	P,M
   878	000657'	260040	001124'		PUSHJ	P,VALID
   879	000660'	254000	000662'		  JRST	.+2
   880	000661'	350001	777775		AOS	-3(P)
   881	000662'	262040	000013		POP	P,M
   882	000663'	262040	000004		POP	P,F
   883	000664'	262040	000012		POP	P,W
   884	000665'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 19
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   885				COMMENT ;@@SUBROUTINE UPDERS/PAGERR
   886				@@PURPOSE AFTER KNOWN RESCHEDULE POINTS IN REMOVE, UPDATE
   887				AC S TO REFLECT THE CURRENT STATE OF THE FOLLOWING BITS:
   888				IODERR,IODTER,IOSHWE,IOSHRE.
   889				@@ENTRY UPDERS -  P1 CONTAINS DISK PAGE FOR VP, S CONTAINS ERROR BITS
   890				UP TO NOW.
   891				PAGERR - PG CONTAINS CORE PAGE, T2 CONTAINS DISK ADDRESS,
   892				 S CONTAINS ERROR BITS UP TO NOW.
   893				@@ACCUM USES T1-T4
   894				@@EXIT UPDERS -  PG RETURNED ZERO IF DP NOT IN CORE, ELSE CORE PAGE NUMBER
   895				OF DP.  BOTH -  IOSHDW AND IOSHRE IN LH(S) UPDATED, AND
   896				IODERR AND IODTER IN RH(S) UPDATED FROM OHT AND PGY
   897				TABLE.
   898				@@RESTRICTIONS
   899				@@FUNCTION UPDERS - SEARCH CHT FOR DP, GO TO PAGERR OR PAGER1
   900				DEPENDING ON WHETHER PAGE IS IN CORE OR NOT, RESPECTIVELY.
   901				PAGERR - UPDATE PROPER BITS FROM PGY TABLE AND OHT.
   902				@@;
   903
   904				EXTERNAL SRCOHT,OHTTAB,OHTPAR,OHTDER,OHTDTE
   905				EXTERNAL PGYERR
   906
   907	000666'	200340	000014	UPDERS:	MOVE	T2,P1		;GET DP INTO RIGHT AC
   908	000667'	260040	004454'		PUSHJ	P,SRCCHT	;SEE IF IN CORE
   909	000670'	254000	000676'		  JRST	PAGER1		;NOT IN CORE, DON'T BOTHER WITH PGYERR
   910								;FALL THRU INTO PAGERR
   911
   912	000671'	135300	000000*	PAGERR::LDB	T1,PGYERR	;GET ERROR BITS FOR INPUT ERRORS
   913	000672'	322300	000676'		JUMPE	T1,PAGER1	;GO IF NONE
   914	000673'	242300	000017		LSH	T1,^D35-^D20	;GET INTO 1B19 AND 1B20.
   915	000674'	434000	000006		IOR	S,T1
   916	000675'	661000	000455*		TLO	S,IOSHRE	;AND FLAG THAT A HARD READ ERROR HAPPENED.
   917
   918	000676'	332000	000000*	PAGER1:	SKIPE	OHTNUM		;JUST RETURN IF NO OUTPUT ERRORS.
   919	000677'	260040	000000*		PUSHJ	P,SRCOHT	;YES, IS OUR DP ONE OF THEM?
   920	000700'	263040	000000		  POPJ	P,		;NO, S OK.
   921	000701'	554311	000000*		HLRZ	T1,OHTTAB(T4)	;YES. GET BITS
   922	000702'	602300	000000*		TRNE	T1,OHTPAR!OHTDER ;THESE BOTH SET
   923	000703'	660000	200000		TRO	S,IODERR	;DEVICE ERROR BIT.
   924	000704'	602300	000000*		TRNE	T1,OHTDTE	;THIS SETS
   925	000705'	660000	100000		TRO	S,IODTER	;DATA ERROR
   926	000706'	661000	000650*		TLO	S,IOSHWE	;FLAG A HARD WRITE ERROR.
   927	000707'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 20
CORE1.MAC	28-OCT-87 17:05		KREMOV/KCLEAR

   928				COMMENT ;@@SUBROUTINE UPERUF
   929				@@PURPOSE MARK UFD RIB AND UFD ENTRY FOR FILE THAT
   930				HAS GONE BAD.
   931				@@ENTRY ATB ADDRESS IN P2
   932				NOTHING IN %RIB
   933				IOSHWE, IOSHRE SET IN LH(S)
   934				@@ACCUM SETS IO IN S
   935				USES T1-T4
   936				@@EXIT ALWAYS NON-SKIP RETURN. PROPER BITS UPDATED IF POSSIBLE.
   937				@@RESTRICTIONS DRB COUNT FOR UFD MUST BE UP.
   938				CALLER MUST SET ATPUFE.
   939				@@FUNCTION GET UFD RIB, SET IOSERR BITS IN RIBSTS IN
   940				LH OF UFD'S RIBSTS. SEARCH UFD FOR ENTRY FOR BAD FILE,
   941				SET UFPERR BIT.
   942				@@;
   943
   944				EXTERNAL FNBDRB,DRRSRC,DRRBLK
   945
   946	000710'	550315	000000*	UPERUF:	HRRZ	T1,ATBFNB(P2)	;FNB
   947	000711'	550306	000000*		HRRZ	T1,FNBDRB(T1)	;DRB
   948	000712'	200306	000000*		MOVE	T1,DRBRIB(T1)	;GET RIB FOR UFD
   949	000713'	661300	000557*		TLO	T1,RBREAL	;MAKE IT HOLY.
   950	000714'	661000	000020		TLO	S,IO		;GET IT WRITE LOCKED
   951	000715'	260040	000475*		PUSHJ	P,MAPRWL	; SO NO ONE DELETES THE FILE
   952	000716'	260040	000000*		PUSHJ	P,UFRCHK	;CHECK THE RIB
   953	000717'	263040	000000		  POPJ	P,		;ITS BAD, RIB IS RELEASED, RETURN.
   954	000720'	510300	000000		HLLZ	T1,S		;COPY IOSERR BITS
   955	000721'	621300	000000*		TLZ	T1,-1-IOSERR	;JUST IOSERR BITS
   956	000722'	436300	376000*		IORM	T1,%RIB+RIBSTS	;SET IN LH OF UFD'S RIBSTS
   957	000723'	261040	000016		PUSH	P,P3		;SAVE THIS.
   958	000724'	550715	000710*		HRRZ	P3,ATBFNB(P2)	;GET FNB IN P3
   959	000725'	135300	000000*		LDB	T1,FNYUFP	;GET PAGE TO SEARCH
   960	000726'	262040	000016		POP	P,P3
   961	000727'	260040	000000*		PUSHJ	P,DRRBLK	;GET THAT PAGE
   962	000730'	263040	000000		  POPJ	P,		;DRRBLK RELEASED UFD RIB, JUST RETURN.
   963	000731'	260040	000000*		PUSHJ	P,DRRSRC	;SEARCH UFD FOR FILE WHOSE ATB IS IN P2
   964	000732'	324740	000547*		  PJRST	RELLOK		;COULD NOT FIND IT. RELEASE THE BLOCK AND RETURN.
   965	000733'	201300	000000*		MOVEI	T1,UFPERR	;OK, HAVE IT
   966	000734'	436307	376000*		IORM	T1,%RIB+UFDERR(T2) ;SET THE BIT FOR THE FILE.
   967	000735'	324740	000732*		PJRST	RELLOK		;GIVE PAGE BACK AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 21
CORE1.MAC	28-OCT-87 17:05		UPDATE BAT BLOCKS IF THEY NEED IT

   968				SUBTTL	UPDATE BAT BLOCKS IF THEY NEED IT
   969
   970				EXTERNAL LPNBAT,LP2BAT,BATSLF,BATFIR,BASNBB,BANNBB,BATNBB,BATELB,BATPAT
   971				EXTERNAL BATCNT,BATCOD,CODBAT,BATNAM,GETER1,BA1NBB,RBYPN1,RB1PNO,THSDAT
   972
   973				;Call with disk pointer in P1
   974
   975	000736'	200300	000014	UPERBT:	MOVE	T1,P1		;GET DISK ADDRESS, INCLUDING UNIT FIELD
   976	000737'	661300	000713*		TLO	T1,RBREAL	;MAKE IT ACCEPTABLE.
   977	000740'	201340	000000*		MOVEI	T2,LPNBAT	;GET FIRST BAT PAGE NUMBER
   978	000741'	137340	000000*		DPB	T2,RBYPN1	;Deposit page number into pointer in T1
   979	000742'	201140	000000*		MOVEI	PG,%RIB.C
   980	000743'	260040	000000*		PUSHJ	P,MAPWTL	;Primary BAT page into %RIB
   981	000744'	200300	000014		MOVE	T1,P1		;AGAIN
   982	000745'	661300	000737*		TLO	T1,RBREAL
   983	000746'	201340	000000*		MOVEI	T2,LP2BAT	;2nd BAT this time
   984	000747'	137340	000741*		DPB	T2,RBYPN1	;Deposit page number into pointer in T1
   985	000750'	201140	000000*		MOVEI	PG,%RB2.C
   986	000751'	260040	000743*		PUSHJ	P,MAPWTL	;Secondary BAT page into %RB2
   987	000752'	201340	000740*		MOVEI	T2,LPNBAT	;THIS IS WHAT IT SHOULD BE
   988	000753'	260040	001072'		PUSHJ	P,BATCHK	;CHECK TO SEE IF ITS GOOD
   989	000754'	254000	001031'		  JRST	FSTBAD		;IT IS NOT
   990	000755'	201340	000746*		MOVEI	T2,LP2BAT	;Primary good, fix secondary
   991	000756'	200300	376000*	UPRBT1:	MOVE	T1,%RIB+BATSLF	;GET SLF FROM GOOD BLOCK (IN %RIB)
   992	000757'	137340	000747*		DPB	T2,RBYPN1	;PUT IN PAGE NUMBER OF OTHER
   993	000760'	202300	375000*		MOVEM	T1,%RB2+BATSLF	;AND PUT IN SECOND BLOCK
   994
   995				COMMENT ~	Format of the BAT page
   996				BATNAM:	SIXBIT/BAT/	;000 Name of the page
   997				BATFIR:	-772,,004	;001 AOBJN to area for storing pairs
   998				BATPAT:	0		;002 Total number of bad pages
   999				BATCNT:	0		;003 Number of distinct bad regions
  1000					PHASE 0		;004 Each pair has the following format
  1001				BATNBB:	BYTE (9)RPT(9)0(18)THSDAT ;(even) Repeat count and date (1B9 if no date)
  1002				BATELB:	BYTE (17)0(19)DPN	  ;(odd)  Disk page number (no RBREAL or UNIT)
  1003					DEPHASE		;BA1NBB is byte pointer to count in %RIB+BATNBB(T1)
  1004					BLOCK	776-<.-BATFIR>	;Room for ^D253 region pairs
  1005				BATCOD:	CODBAT		;776 CODBAT=505050
  1006				BATSLF:	RBREAL+<UNI>B16+(either LPNBAT=2 or LB2BAT=7)
  1007				~  ;End of COMMENT
  1008
  1009	000761'	200300	376000*		MOVE	T1,%RIB+BATFIR	;GET AOBJN PNTR
  1010	000762'	135440	000000*		LDB	T4,RB1PNO	;GET PAGE FROM P1
  1011	000763'	336006	376000	UPRBT0:	SKIPN	%RIB(T1)	;ARE WE AT FIRST BLANK SPOT?
  1012	000764'	254000	001017'		 JRST	UPRBT2		;YES, JUST INSERT
  1013	000765'	135340	000000*		LDB	T2,BA1NBB	;NUMBER OF PAGES IN REGION
  1014	000766'	200406	376000*		MOVE	T3,%RIB+BATELB(T1);FIRST PAGE
  1015	000767'	270340	000010		ADD	T2,T3		;THIS IS LAST PAGE
  1016	000770'	275400	000001		SUBI	T3,1
  1017	000771'	271340	000001		ADDI	T2,1		;NOW T3 IS PAGE BEFORE FIRST, T2 PAGE AFTER LAST
  1018	000772'	311440	000010		CAML	T4,T3
  1019	000773'	313440	000007		CAMLE	T4,T2
  1020	000774'	254000	001026'		 JRST	UPRBT3		;NOT IN THIS REGION AT ALL
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 21-2
CORE1.MAC	28-OCT-87 17:05		UPDATE BAT BLOCKS IF THEY NEED IT

  1021	000775'	312440	000010		CAME	T4,T3
  1022	000776'	316440	000007		CAMN	T4,T2		;CHECK IF AT BOUNDRIES
  1023	000777'	334000	000000		 SKIPA
  1024	001000'	254000	001014'		  JRST	BATUPD		;IF ALREADY IN REGION, DON'T COMPLAIN
  1025	001001'	135340	000765*		LDB	T2,BA1NBB
  1026	001002'	301340	000000*		CAIL	T2,<-1-<-1_BASNBB>>	;IS IT ALREADY MAX?
  1027	001003'	254000	001026'		 JRST	UPRBT3		;YES, CAN NOT UPDATE IN THIS REGION
  1028	001004'	271340	000001		ADDI	T2,1		;ONE MORE BAD PAGE
  1029	001005'	137340	001001*		DPB	T2,BA1NBB	;UPDATE
  1030	001006'	316400	000011		CAMN	T3,T4		;IS IT AT START?
  1031	001007'	370006	376000*		 SOS	%RIB+BATELB(T1)	;YES, DEC STARTING BLOCK
  1032	001010'	350000	376000*	BATUP2:	AOS	%RIB+BATPAT	;ONE MORE PAGE BAD TOTAL
  1033	001011'	200300	006370'		MOVE	T1,[%RIB,,%RB2]	;MAKE SECONDARY BAT PAGE
  1034	001012'	251300	374777*		BLT	T1,%RB2+BATSLF-1; A DUPLICATE OF PRIMARY
  1035	001013'	256000	006371'	BADPAG:: STOPCD	(.+1,EVENT,BADPAG,PRTPG1,<Bad spot detected>);;BATUP2+3
  1036	001014'	201140	000750*	BATUPD:	MOVEI	PG,%RB2.C
  1037	001015'	260040	000000*		PUSHJ	P,MAPRLS
  1038	001016'	324740	000735*		PJRST	RELLOK		;ALL DONE
  1039
  1040				;FOUND AN EMPTY SLOT
  1041	001017'	252300	001014'	UPRBT2:	AOBJP	T1,BATUPD	;IN CASE NOT ROOM FOR BOTH WORDS
  1042	001020'	202446	375777*		MOVEM	T4,%RIB+BATELB-1(T1)	;FIRST NULL REGION, ENTER NEW
  1043	001021'	337440	000000*		SKIPG	T4,THSDAT	;TODAY'S DATE
  1044	001022'	201440	000001		 MOVEI	T4,1		;Force nonzero
  1045	001023'	552446	375777*		HRRZM	T4,%RIB+BATNBB-1(T1)
  1046	001024'	350000	376000*		AOS	%RIB+BATCNT	;Number of distinct bad regions
  1047	001025'	254000	001010'		JRST	BATUP2		;AND GO WRITE
  1048
  1049				;TRY NEXT REGION
  1050	001026'	252300	001014'	UPRBT3:	AOBJP	T1,BATUPD	;GIVE UP IF AOBJN RUNS OUT
  1051	001027'	253300	000763'		AOBJN	T1,UPRBT0	;TAKE 2 WORDS, DOUBLE INCR ADDRESS
  1052	001030'	254000	001014'		JRST	BATUPD		;RAN OUT OF ROOM
  1053
  1054				;FIRST BAT BLOCK IS BAD
  1055	001031'	260040	000000*	FSTBAD:	PUSHJ	P,MAPXCH	;FIRST ONE IS BAD, GET 2ND INTO %RIB
  1056	001032'	200340	000755*		MOVE	T2,LP2BAT
  1057	001033'	260040	001072'		PUSHJ	P,BATCHK	;CHECK IT
  1058	001034'	254000	001037'		  JRST	SECBAD		;BOTH BAD, JUST RELEASE
  1059	001035'	201340	000752*		MOVEI	T2,LPNBAT	;Secondary good, primary needs fixing
  1060	001036'	254000	000756'		JRST	UPRBT1		;GET READY TO UPDATE AND REWRITE BOTH
  1061
  1062	001037'	201300	361100	SECBAD:	MOVEI	T1,^D123456	;Bogus value when 2nd is also bad
  1063	001040'	202300	376000*		MOVEM	T1,%RIB+BATPAT
  1064	001041'	254000	001013'		JRST	BADPAG		;Output stopcode
  1065
  1066
  1067	001042'	260040	000000*	PRTPG1:	PUSHJ	P,INLMES##	;Routine called by STOPCD(BADPAG)
  1068	001043'	413034	420346		 ASCIZ	/Bad spot on /
	001044'	703376	420336
	001045'	671000	000000
  1069	001046'	135300	000000*		LDB	T1,RB1UNI##
  1070	001047'	200306	000000*		MOVE	T1,UNTTBL##(T1)
  1071	001050'	200346	000000*		MOVE	T2,UNINAM##(T1)	;BPA0, BPB17, etc
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 21-3
CORE1.MAC	28-OCT-87 17:05		UPDATE BAT BLOCKS IF THEY NEED IT

  1072	001051'	260040	000000*		PUSHJ	P,PRNAME##
  1073	001052'	260040	001042*		PUSHJ	P,INLMES##
  1074	001053'	261016	567322		 ASCIZ	/, unit=/
	001054'	721720	000000
  1075	001055'	135300	001046*		LDB	T1,RB1UNI##
  1076	001056'	260040	000000*		PUSHJ	P,PRTOCT##	;Logical unit (DSKB0=0, etc)
  1077	001057'	260040	001052*		PUSHJ	P,INLMES##
  1078	001060'	203414	163712		 ASCIZ	/ page=/
	001061'	364000	000000
  1079	001062'	135300	000762*		LDB	T1,RB1PNO##
  1080	001063'	260040	001056*		PUSHJ	P,PRTOCT##	;Page within unit
  1081	001064'	260040	001057*		PUSHJ	P,INLMES##
  1082	001065'	203075	772734		 ASCIZ	/ count=/
	001066'	721720	000000
  1083	001067'	200300	376000*		MOVE	T1,%RIB+BATPAT
  1084	001070'	260040	000000*		PUSHJ	P,PRTDEC##	;Total bad spots on this unit
  1085	001071'	324740	000000*		PJRST	CRLF##
  1086
  1087				;VALIDITY CHECK THE BAT PAGE
  1088
  1089	001072'	200300	000014	BATCHK:	MOVE	T1,P1		;GET UNIT FROM DISK POINTER
  1090	001073'	661300	000745*		TLO	T1,RBREAL
  1091	001074'	137340	000757*		DPB	T2,RBYPN1	;Deposit page # into T1
  1092	001075'	200340	376000*		MOVE	T2,%RIB+BATCOD
  1093	001076'	316300	376000*		CAMN	T1,%RIB+BATSLF	;See if self-pointer matches
  1094	001077'	302340	000000*		CAIE	T2,CODBAT	; and code word is good
  1095	001100'	263040	000000		 POPJ	P,
  1096	001101'	260040	000000*		PUSHJ	P,GETER1	;Check read status for page in %RIB
  1097	001102'	326300	000000*		JUMPN	T1,CPOPJ	;No good if it got a read error
  1098	001103'	335300	376000*		SKIPGE	T1,%RIB+BATFIR	;Check if AOBJN pointer got clobbered after
  1099	001104'	602300	777000		TRNE	T1,777000	; ONCDSK blessed it.  Must have negative LH and
  1100	001105'	263040	000000		 POPJ	P,		; RH must start within the page.
  1101	001106'	574340	000006		HLRE	T2,T1		;Negative word count
  1102	001107'	213000	000007		MOVNS	T2		;Positive
  1103	001110'	270300	000007		ADD	T1,T2
  1104	001111'	307340	000776		CAIG	T2,776		;Count must not be too high
  1105	001112'	602300	777000		TRNE	T1,777000	;Pointer must stay within the page
  1106	001113'	263040	000000		 POPJ	P,
  1107	001114'	204300	376000*		MOVS	T1,%RIB+BATNAM	;Check LH of first word in the page
  1108	001115'	306300	424164		CAIN	T1,'BAT'
  1109	001116'	350001	000000		 AOS	(P)		;GOOD RETURN
  1110	001117'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 22
CORE1.MAC	28-OCT-87 17:05		VALIDATE/WAIT

  1111				SUBTTL VALIDATE/WAIT
  1112
  1113				;FORMAT OF UUO CALL:
  1114				;
  1115				;	MOVE	AC,[BITS+COUNT,,PAGE NUMBER] ;1B7 = WAIT
  1116				;					;1B0 = USER BIT
  1117				;	VALPAG	AC,
  1118				;	  <ERROR RETURN>	;AC/VP#,,ERROR CODE
  1119				;	<SUCCESS RETURN>
  1120
  1121				;BIT DEFINITIONS FOR UUO CALL
  1122
  1123			200000		XP VL.OTF,(1B1)		;OTHER FRAME
  1124			002000		XP VL.WAT,(1B7)		;WAIT.
  1125			004000		XP VL.VPP,(1B6)		;VALIDATE EVEN IF ITS PRIVATE.
  1126			001777		XP VL.CNT,1777		;MASK FOR COUNT.
  1127				;ERROR CODES
  1128
  1129					ERRCOD(0,VLBCN%,VLEBCN)	;BAD COUNT
  1130					ERRCOD(1,VLBVP%,VLEBVP)	;BAD VIRTUAL PAGE ARG
  1131					ERRCOD(2,ZZ,ZZ)		;(BAD PROTECTION, UNUSED FOR VALIDATE)
  1132					ERRCOD(3,ZZ,ZZ)		;(VP ALREADY EXISTS, UNUSED)
  1133					ERRCOD(4,VLNVP%,VLENVP)	;VP DOES NOT EXIST
  1134					ERRCOD(5,VLIOE%,VLEIOE)	;I/O ERROR TRYING TO WRITE VP OUT.
  1135					ERRCOD(6,VLOFF%,VLEOFF)	;"OTHER FRAME" FAILURE, SUBCODE IN 0-5.
  1136
  1137	001120'	265440	001566'	UVALID::JSP	T4,DOUUO	;SAVE USER AC NUMBER, PUSHJ TO .+1
  1138	001121'	201700	000045		MOVEI	P3,.ARCHM	;VALPAG NEEDS CHANGE MAP ACCESS.
  1139	001122'	260040	000000*		PUSHJ	P,SRDUPX	;READ LOCK %UPX ACCORDING TO C(P1)
  1140					  JRST	[MOVSS T1
  1141						 HRRI T1,VLOFF%
  1142						 DPB P3,FDEERP<T1>
  1143	001123'	254000	006375'			 POPJ P,]
  1144
  1145	001124'	702600	400000*	VALID::	NOCHARGE		;TURN OFF CHARGING CLOCK.
  1146	001125'	335000	000006		SKIPGE	T1		;IS THIS FOR EXEC OR USER
  1147	001126'	665200	400000		 TLOA	F,FL.USR	;USER.
  1148	001127'	621200	400000		  TLZ	F,FL.USR	;EXEC.
  1149	001130'	200600	000006		MOVE	P1,T1		;GET ARG IN SAFE PLACE
  1150	001131'	135640	006401'		LDB	P2,[POINT 10,P1,17] ;GET COUNT
  1151	001132'	322640	001551'		JUMPE	P2,VLEBCN	;BAD COUNT
  1152	001133'	525655	777777		HRLOI	P2,-1(P2)	;GET COUNT-1,,-1
  1153	001134'	445654	000000		EQVI	P2,(P1)		;COMPLEMENT COUNT, PUT ADDR IN RH
  1154
  1155	001135'	200500	000015		MOVE	W,P2		;GET POINTER IN W SO VP IS IN RH(W)
  1156
  1157	001136'	400140	000000	VALID0:	SETZ	PG,		;IN CASE THIS IS PRIVATE PAGE.
  1158								; ONLY REPORT OUTPUT ERRORS.
  1159	001137'	550300	000012		HRRZ	T1,W		;GET VP
  1160	001140'	303300	000413*		CAILE	T1,VPUMAX	;IF ITS A CONTEXT PGE,
  1161	001141'	303300	001034		CAILE	T1,VPMAX	;THEN DO NOTHING.
  1162	001142'	254000	001144'		 JRST	.+2		;ILLEGAL OR NOT CONTEXT PGE.
  1163	001143'	254000	001224'		JRST	VALD4A
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 22-2
CORE1.MAC	28-OCT-87 17:05		VALIDATE/WAIT

  1164	001144'	265440	002647'		JSP	T4,VPCHK	;IS VP OK?
  1165	001145'	254000	001552'		  JRST	VLEBVP		;NO, GIVE ERROR CODE
  1166	001146'	260040	004655'		PUSHJ	P,GETLMX	;GET CONTENTS OF LMAP SLOT
  1167	001147'	607700	000352*		TLNN	P3,LMMEXS	;EXISTS?
  1168	001150'	254000	001555'		 JRST	VLENVP		;NO, GIVE AN ERROR.
  1169	001151'	603700	000554*		TLNE	P3,LMPSUP	;THIS A SUPER SLOT?
  1170	001152'	254000	001160'		 JRST	VALD0A		;YES, ALWAYS TRY TO WRITE.
  1171	001153'	260040	004771'		PUSHJ	P,GETATB	;GET ATB ADDRESS
  1172	001154'	603600	004000		TLNE	P1,VL.VPP	;TREAT PRIVATE LIKE FILE PAGES?
  1173	001155'	254000	001160'		 JRST	VALD0A		;YES, DO EVERYTHING.
  1174	001156'	335006	000550*		SKIPGE	ATBSTS(T1)	;FILE PAGE?
  1175	001157'	254000	001221'		 JRST	VALID4		;NO, DO NOTHING, STEP TO NEXT VP
  1176	001160'	661200	200000	VALD0A:	TLO	F,(1B1)		;FLAG THAT THIS IS THE FIRST TIME
  1177	001161'	260040	005024'	VALID1:	PUSHJ	P,GETCPX	;GET CORE PAGE NUMBER, EVEN IF
  1178								; THIS SLOT IS INACTIVE.
  1179	001162'	254000	001221'		  JRST	VALID4		;NOT IN CORE, DON'T START IT. CHECK FOR ERRORS.
  1180	001163'	135300	000000*		LDB	T1,PGYSTS	;GET PAGE STATUS BITS
  1181	001164'	606300	000000*		TRNN	T1,PGPSIP	;IF SWAPPED IN, GOOD COPY IS ON THE DISK.
  1182	001165'	606300	000000*		TRNN	T1,PGPDRT	;IF CLEAN, NOTHING TO DO.
  1183	001166'	254000	001221'		 JRST	VALID4		;THE EASY WAY OUT
  1184	001167'	135340	000000*		LDB	T2,PGYDIO	;GET DIO COUNT. MUST WAIT FOR
  1185	001170'	326340	001175'		JUMPN	T2,VALD2A	; DIO TO STOP ELSE THE DIO WILL MAKE
  1186								; THE PAGE DIRTY WITHOUT SETTING PGYDRT NONZERO.
  1187	001171'	606300	000000*		TRNN	T1,PGPSOP	;SWAP OUT GOING AND ITS DIRTY?
  1188								; IF SO, HAVE TO WAIT FOR IT BEFORE CAN DO ANYTHING.
  1189	001172'	254000	001205'		 JRST	VALID3		;NO, JUST START IT OUT.
  1190	001173'	627200	200000		TLZN	F,(1B1)		;FIRST TIME? IF NOT AND SWAP OUT
  1191	001174'	254000	001221'		 JRST	VALID4		; IS IN PROG, SOMEONE STARTED IT OUT
  1192								; AFTER WE WAITED, SO ITS OK.
  1193	001175'	375000	000000*	VALD2A:	SOSGE	%UPT+UPTLDC	;"THROW AWAY" LMAP DATA IN P3 AND P4
  1194	001176'	256000	000000'		 STOPCD 		;BAD COUNT
  1195	001177'	261040	000002		PUSH	P,J		;Save current target frame
  1196	001200'	200100	000075*		MOVE	J,JOB		;Set up for PAGWAT
  1197	001201'	260040	005524'		PUSHJ	P,PAGWAT	;HAVE TO WAIT FOR IT TO FINISH BEFORE
  1198	001202'	262040	000002		POP	P,J		;Restore target frame
  1199	001203'	260040	004655'		PUSHJ	P,GETLMX	;GET SLOT DATA AGAIN.
  1200	001204'	254000	001161'		JRST	VALID1		;CHECKING IT OUT AGAIN.
  1201
  1202	001205'	260040	001266'	VALID3:	PUSHJ	P,PERCHK	;UPDATE SLOT FOR ERRORS,
  1203	001206'	254000	001556'		  JRST	VLEIOE		;WAS ONE AND HE'S NOT IGNORING.
  1204	001207'	474300	000000		SETO	T1,		;OK, START IT OUT
  1205	001210'	137300	000000*		DPB	T1,PGYSOP
  1206	001211'	135300	000000*		LDB	T1,PGYUSE	;DO WE HAVE TO CHANGE COUNTS?
  1207	001212'	326300	001216'		JUMPN	T1,VALD3A	;NO IF USED STILL.
  1208	001213'	375000	005122'		SOSGE	DFRPGN		;YES, WAS DIRTY FREE, NOW CAP
  1209	001214'	256000	000000'		 STOPCD
  1210	001215'	350000	000000*		AOS	CAPPGN		;ONE MORE CLEAN AVAIL IN PROGRESS
  1211	001216'	260040	004726'	VALD3A:	PUSHJ	P,STOLMX	;STORE SLOT BACK, IN CASE ERROR BITS ARE ON.
  1212	001217'	260040	000000*		PUSHJ	P,SWPIO		;MAKING IT CLEAN.
  1213	001220'	260040	004655'		PUSHJ	P,GETLMX	;GET NEW SLOT, WITH W BIT CLEAR.
  1214	001221'	260040	001266'	VALID4:	PUSHJ	P,PERCHK	;UPDATE ERRORS
  1215	001222'	254000	001556'		  JRST	VLEIOE		;GIVE ERROR, STOLMX ALREADY CALLED.
  1216	001223'	260040	004726'		PUSHJ	P,STOLMX	;STORE SLOT BACK IN CASE ERROR BITS CHANGED.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 22-3
CORE1.MAC	28-OCT-87 17:05		VALIDATE/WAIT

  1217	001224'	603200	400000	VALD4A:	TLNE	F,FL.USR	;USER ASKED?
  1218	001225'	260040	000000*		 PUSHJ	P,WRTCHP	;YES, CHARGE FOR THIS.
  1219	001226'	253500	001136'		AOBJN	W,VALID0	;AND LOOP FOR NEXT PAGE
  1220
  1221	001227'	607600	002000		TLNN	P1,VL.WAT	;OK, ALL STARTED OUT. NEED TO WAIT?
  1222	001230'	324740	000423*		 PJRST	CPOPJ1		;NO, GIVE GOOD RETURN.
  1223								;YES, GO DO IT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 23
CORE1.MAC	28-OCT-87 17:05		VALIDATE/WAIT

  1224				;ROUTINE TO WAIT
  1225				; NOTE THAT CANNOT TELL THE DIFFERENCE BETWEEN PAGE WE JUST
  1226				; STARTED OUT IN THE VALIDATE LOOP AND A PAGE THAT WAS DIRTY
  1227				; WHICH SOMEONE (PERIODIC CLEANER OR SWAP RESERVER)
  1228				; STARTED OUT. SINCE WE PERSONALLY STARTED OUT ALL DIRTY
  1229				; PAGES ABOVE, THE ONLY ONES THAT COULD HAVE SOP ON AND
  1230				; ARE CLEAN ARE THOSE THAT GOT WRITTEN IN SINCE WE
  1231				; STARTED VALIDATING, AND WE DON'T HAVE TO WAIT FOR THOSE.
  1232				; BUT WE DO ANYWAY, SINCE CAN'T TELL THESE FROM ONES WE STARTED
  1233				; OUT OURSELVES. NOTE THAT THE PAGE CAN BE DEACTIVATED BY THE SWAP
  1234				; OUT ROUTINE, BUT THIS IS OK BECAUSE IF WE CATCH IT N CORE
  1235				; AND WAIT WE ARE GUARANTEED TO BE AWAKENED, SINCE
  1236				; DEACTIVATION DOES NOT TOUCH THE PGYPGO CHAIN.
  1237
  1238	001231'	200500	000015		MOVE	W,P2		;SETUP AOBJN POINTER AGAIN.
  1239	001232'	260040	004655'	VALID5:	PUSHJ	P,GETLMX	;GET LMAP SLOT DATA
  1240	001233'	603700	001151*		TLNE	P3,LMPSUP	;IF THIS IS A SUPER SLOT
  1241	001234'	254000	001242'		 JRST	VALID6		;THEN GO WAIT.
  1242	001235'	260040	004771'		PUSHJ	P,GETATB	;GET ATB ADDRESS
  1243	001236'	603600	004000		TLNE	P1,VL.VPP	;VALIDATE PRIVATE PAGES TOO?
  1244	001237'	254000	001242'		 JRST	VALID6		;YES, DON'T SKIP.
  1245	001240'	335006	001156*		SKIPGE	ATBSTS(T1)	;FILE PAGE
  1246	001241'	254000	001261'		 JRST	VALID7		;NO, DON'T WORRY ABOUT IT.
  1247	001242'	260040	005024'	VALID6:	PUSHJ	P,GETCPX	;IN CORE?
  1248	001243'	254000	001261'		  JRST	VALID7		;NO, DON'T HAVE TO WAIT FOR IT. CHECK FOR
  1249								; ERRORS AND DO NEXT PAGE.
  1250	001244'	135300	000000*		LDB	T1,PGYSIP	;YES. COMING IN?
  1251	001245'	326300	001261'		JUMPN	T1,VALID7	;YES, DON'T WAIT
  1252	001246'	135300	001210*		LDB	T1,PGYSOP	;ON ITS WAY OUT
  1253	001247'	322300	001261'		JUMPE	T1,VALID7	;YES, EITHER WE DIDN'T START IT OUT
  1254								; OR IT IS FINISHED NOW.
  1255	001250'	375000	000000*		SOSGE	%UPT+UPTLDC	;THROW AWAY LMAP DATA
  1256	001251'	256000	000000'		 STOPCD
  1257	001252'	261040	000002		PUSH	P,J		;Save current target frame
  1258	001253'	200100	001200*		MOVE	J,JOB		;Set up for PAGWAT
  1259	001254'	260040	005524'		PUSHJ	P,PAGWAT	;MAY NOT HAVE BEEN STARTED OUT BY
  1260								; US, BUT WAIT IN CASE IT WAS.
  1261								;MAY BE DIRTY, BUT IF IT IS,
  1262								; CALLER DIDN'T DIRTY IT.
  1263	001255'	262040	000002		POP	P,J		;Restore target frame
  1264	001256'	260040	004655'		PUSHJ	P,GETLMX	;GET SLOT AGAIN.
  1265	001257'	260040	005024'		PUSHJ	P,GETCPX	;GET CP AGAIN TO SEE IF ERRORS HAPPENED.
  1266	001260'	255000	000000		  JFCL			;PG RETURNED ZERO HERE.
  1267	001261'	260040	001266'	VALID7:	PUSHJ	P,PERCHK	;UPDATE SLOT'S ERROR BITS
  1268	001262'	254000	001556'		  JRST	VLEIOE		;GIVE ERROR, SLOT STORED ALREADY
  1269	001263'	260040	004726'		PUSHJ	P,STOLMX	;STORE SLOT IN CASE ERRORS CAME ON.
  1270	001264'	253500	001232'	VALID8:	AOBJN	W,VALID5	;STEP TO NEXT PGE
  1271	001265'	324740	001230*		PJRST	CPOPJ1		;AND GIVE GOOD RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 24
CORE1.MAC	28-OCT-87 17:05		VALIDATE/WAIT

  1272				COMMENT ;@@SUBROUTINE PERCHK
  1273				@@PURPOSE USED BY VALIDATE UUO TO UPDATE LMYERR BITS IN
  1274				LMAP SLOT, AND TO INDICATE WHETHER OR NOT TO GIVE USER
  1275				ERROR RETURN.
  1276				@@ENTRY P3,P4 CONTAIN LMAP SLOT CONTENTS
  1277				W CONTAINS VP NUMBER
  1278				PG CONTAINS EITHER 0 IF DP NOT IN CORE OR CP NUMBER.
  1279				@@ACCUM USES T1-T4, S
  1280				@@EXIT P3, P4 CONTAIN NEW LMAP DATA (ERROR BITS MAY HAVE CHANGED)
  1281				NON-SKIP IF THERE IS AN ERROR, PAST OR PRESENT, FOR THE
  1282				 VP, WITH LMAP SLOT CONTENTS ALREADY STORED (CALLER JUST GIVES ERROR RETURN)
  1283				SKIP RETURN IF NO ERRORS OR IF THERE ARE ERRORS AND CALLER IS
  1284				 IGNORING THEM (LMPNER). SLOT CONTENTS NOT STORED.
  1285				@@RESTRICTIONS
  1286				@@FUNCTION IF PG IS NON-ZERO, GET PGYERR BITS.
  1287				SEARCH OUTPUT ERROR HASH TABLE FOR DISK ADDRESS, UPDATE
  1288				ERROR BITS. GET SLOT'S ERROR BITS, OR IN ANY NEWLY FOUND
  1289				ERROR BITS, STORE ERROR BITS BACK IN SLOT. IF ANY ERROR
  1290				BITS ARE ON AND SLOT NOT IGNORING ERRORS, CALL STOLMA
  1291				AND GIVE NON-SKIP RETURN. ELSE GIVE SKIP RETURN WITH
  1292				SLOT DATA STILL IN P3,P4.
  1293				@@;
  1294
  1295				EXTERNAL OHTTAB,OHTDER,OHTPAR,OHTDTE
  1296
  1297	001266'	400000	000000	PERCHK:	SETZ	S,		;CAN'T USE SKIPE S, TRICK
  1298	001267'	332000	000003		SKIPE	PG		;IF DP IS IN CORE,
  1299	001270'	135000	000671*		LDB	S,PGYERR	;GET ERROR BITS FROM PGY
  1300	001271'	336000	000676*		SKIPN	OHTNUM		;ANY OHT ENTRIES AT ALL? (USUALLY NOT)
  1301	001272'	254000	001303'		JRST	PERCK1		;NORMAL CASE, GO OR INTO LMAP SLOT
  1302	001273'	260040	004744'		PUSHJ	P,GETDPA	;SOME ENTRIES, SEARCH FOR DP IN T2
  1303	001274'	260040	000677*		PUSHJ	P,SRCOHT	;THERE?
  1304	001275'	254000	001303'		  JRST	PERCK1		;NO.
  1305	001276'	200311	000701*		MOVE	T1,OHTTAB(T4)	;YES, GET BITS IN T1
  1306	001277'	603300	000000*		TLNE	T1,OHTDER!OHTPAR ;PARITY SAME AS DEVICE ERROR
  1307	001300'	660000	000002		TRO	S,IODERR_-^D15
  1308	001301'	603300	000704*		TLNE	T1,OHTDTE	;DATA ERROR? (COULDN'T READ RECORD HEADER)
  1309	001302'	660000	000001		TRO	S,IODTER_-^D15
  1310	001303'	135300	000000*	PERCK1:	LDB	T1,LM3ERR	;GET BITS ALREADY SET
  1311	001304'	434300	000000		IOR	T1,S		;OR IN NEW ONES
  1312	001305'	137300	001303*		DPB	T1,LM3ERR	;PUT BACK INTO P3
  1313	001306'	607700	000000*		TLNN	P3,LMPNER	;CALLER'S SLOT IGNORING ERROR?
  1314	001307'	326300	004672'		PJUMPN	T1,STOLMA	;YES, STORE SLOT AND GIVE ERROR RETURN
  1315	001310'	254000	001265*		JRST	CPOPJ1		;NO, GIVE SKIP RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 25
CORE1.MAC	28-OCT-87 17:05		PRE-REFERENCE

  1316				SUBTTL PRE-REFERENCE
  1317
  1318				;UUO CALL:
  1319				;	MOVEI	AC,<PAGE NUMBER>
  1320				;	PREREF	AC,
  1321				;	  <ERROR RETURN>	;AC/VP#,,ERROR CODE.
  1322				;	<SUCCESS RETURN>	AC/1B0 SET IF PAGE READY TO TOUCH
  1323				;				AC/1B0 RESET IF TOUCHING PG WOULD CAUSE BLOCKING
  1324
  1325					ERRCOD(0,ZZ,ZZ)		;UNUSED
  1326					ERRCOD(1,PRBVP%,PREBVP)	;BAD VP ARG
  1327					ERRCOD(2,ZZ,ZZ)		;(PROTECTION)
  1328					ERRCOD(3,ZZ,ZZ)		;(VP ALREADY EXISTS)
  1329					ERRCOD(4,PRNVP%,PRENVP)	;NON-EXISTENT VIRTUAL PAGE.
  1330					ERRCOD(5,PRNIW%,PRENIW)	;NOT IN USER WORKING SET.
  1331					ERRCOD(6,PROFF%,PREOFF)	;"OTHER FRAME" FAILURE, SUBCODE IN 0-5.
  1332
  1333				;PURPOSE: PRE-LOADS A PAGE SO USER'S CHANCES
  1334				; OF FAULTING FOR THE PAGE ARE LESS
  1335				;FUNCTION: SEE IF PAGE IS IN USER WORKING SET. IF NOT, GIVE
  1336				; ERROR RETURN. IF SO, PUT PAGE IN MONITOR WORKING SET.
  1337				; IF PAGE IS ACTIVE (MAY STILL HAVE SWAP IN IN PROGRESS
  1338				; OR MAY STILL BE VIRGIN), JUST RETURN. IF PAGE WAS OK TO
  1339				; REFERENCE, USER WILL BE ABLE TO ACCESS THE PAGE.
  1340				; IF PAGE WAS NOT IN CORE, TURN ON PRE-REFERENCE BIT
  1341				; SO THAT SWAPPER WILL BRING THE PAGE, ALONG WITH ALL THE
  1342				; OTHER INACTIVE MWS PAGES, INTO CORE AND ACTIVATE
  1343				; THEM. RETURN. WHETHER USER WILL FAULT FOR THE PAGE IN THAAT
  1344				; CASE DEPENDS ON WHETHER OR NOT SWAPPER ACTIVATES IT BEFORE
  1345				; USER REFERENCES IT.
  1346
  1347				;NOTE: PREREF EXPECTS AC M TO CONTAIN USER AC# AT ALL
  1348				;TIMES.
  1349
  1350
  1351	001311'	265440	001566'	UPRERF::JSP	T4,DOUUO	;PUSHJ TO PREREF, GIVE PROPER RETURN.
  1352	001312'	201700	000050		MOVEI	P3,.ARVAR	;DOESN'T DO ANYTHING THAT REPLICATE READ ONLY DOESN'T DO
  1353	001313'	260040	001122*		PUSHJ	P,SRDUPX	;MUST MAKE SURE DON'T GET INTO REMOVE CODE WHILE ACTIVATING.
  1354								; REMOVE ASSUMES NO ONE ELSE ACTIVATES THE PAGE.
  1355					  JRST	[MOVSS T1	;GET VP IN LH
  1356						 HRRI T1,PROFF% ;ERROR CODE
  1357						 DPB P3,FDEERP<T1>
  1358	001314'	254000	006375'			 POPJ P,]
  1359
  1360	001315'	335000	000006	PREREF::SKIPGE	T1		;TRANSFER EXEC/USER BIT TO 1B0 OF F
  1361	001316'	665200	400000		 TLOA	F,FL.USR
  1362	001317'	621200	400000		TLZ	F,FL.USR
  1363	001320'	550500	000006		HRRZ	W,T1		;GET ADDRESS IN W
  1364	001321'	265440	002647'		JSP	T4,VPCHK	;IS IT IN RANGE
  1365	001322'	254000	001552'		  JRST	PREBVP		;NO, GIVE ERROR RETURN, NOT IN RANGE
  1366	001323'	301500	000777		CAIL	W,777		;EXEC PER PROCESS PAGE
  1367	001324'	254000	001327'		 JRST	PRERF1		;YES, SKIP UWS CHECK
  1368	001325'	260040	005365'		PUSHJ	P,TSTUWS	;USE PAGE. MUST BE IN UWS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 25-2
CORE1.MAC	28-OCT-87 17:05		PRE-REFERENCE

  1369	001326'	254000	001556'		  JRST	PRENIW		;IS NOT, GIVE ERROR CODE.
  1370
  1371	001327'	260040	004655'	PRERF1:	PUSHJ	P,GETLMX	;GET LMAP SLOT DATA
  1372	001330'	607700	001147*		TLNN	P3,LMMEXS	;EXISTS
  1373	001331'	254000	001555'		 JRST	PRENVP		;NO.
  1374	001332'	260040	003660'		PUSHJ	P,PRFMWS	;PUT IT INTO MWS, DON'T WAIT FOR SWAP
  1375	001333'	260040	004726'		PUSHJ	P,STOLMX	;SET LMAP SLOT DATA, NEW A BIT MAYBE
  1376	001334'	603700	000000*		TLNE	P3,LMPACT	;PAGE ACTIVE NOW
  1377	001335'	254000	001342'		 JRST	PRERF2		;CHECK WHETHER TO RETURN 1B0 TO USER
  1378	001336'	201300	004000		MOVEI	T1,PRF		;NO, MAKE SWAPPER BRING IT IN
  1379	001337'	436302	000000*		IORM	T1,JBTSTS(J)
  1380	001340'	476000	000000*		SETOM	CALSWP		;MAYBE SWAPPER CAN DO IT NOW.
  1381	001341'	254000	001345'		JRST	PRERF3		;SKIP RETURN & RESET 1B0 USER AC
  1382
  1383	001342'	260040	005017'	PRERF2:	PUSHJ	P,GETCPA	;GET PG/PHYS PAGE
  1384	001343'	135300	001244*		LDB	T1,PGYSIP	;IF SWAP-IN NOT IN PROGRESS
  1385	001344'	332000	000006		SKIPE	T1		;RETURN 1B0 SET
  1386	001345'	625500	777777	PRERF3:	TLZA	W,-1		;RETURN LH USER AC ALL ZEROS
  1387	001346'	505500	400000		 HRLI	W,(1B0)		;SWAP NOT GOING, PAGE NOW AVAILABLE
  1388	001347'	256200	006402'		UMOVEM	W,(M)		;<BIT>,,VP
  1389	001350'	254000	001310*		JRST	CPOPJ1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 26
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1390				SUBTTL WORKING SET CONTROL UUOS
  1391
  1392				;UUO CALL:
  1393				;
  1394				;	MOVE	AC,[FUNCTION #,,ADDR]
  1395				;	WSCTL	AC,
  1396				;	  <ERROR RETURN>	;AC/ VP#(IF RELEVANT, ELSE 0),,ERROR CODE.
  1397				;	<SUCCESS RETURN>
  1398				;
  1399				;ADDR CONTAINS DIFFERENT THINGS FOR THE DIFFERENT FUNCTIONS.
  1400
  1401				;FUNCTION CODES:
  1402
  1403			000000		XP .WSRBM,0		;READ BIT MAP OF WS, LIMIT AND SIZE TOO.
  1404			000000		  XP .WSBTM,0		;FIRST WORD OF BIT MAP
  1405
  1406			000001		XP .WSRNG,1		;ADD/REMOVE BY RANGE
  1407			002000		  XP WS.ADD,(1B7)	;IF ON SAYS TO ADD, IF OFF, REMOVE.
  1408
  1409			000002		XP .WSSTL,2		;SET WS LIMIT
  1410								;ADDR CONTAINS THE LIMIT.
  1411
  1412			000003		XP .WSRSZ,3		;READ SIZE
  1413
  1414			000004		XP .WSRLM,4		;READ LIMIT
  1415
  1416			000005		XP .WSRMX,5		;READ MAX LIMIT (SET BY CONSOLE COMMAND)
  1417
  1418				;ERROR CODES:
  1419
  1420					ERRCOD(0,WSBCN%,WSEBCN)	;BAD COUNT
  1421					ERRCOD(1,WSBVP%,WSEBVP)	;BAD VP NUMBER
  1422					ERRCOD(2,ZZ,ZZ)		;PROTECTION
  1423					ERRCOD(3,ZZ,ZZ)		;(VP ALREADY EXISTS)
  1424					ERRCOD(4,WSNVP%,WSENVP)	;VP DOES NOT EXIST AND SHOULD
  1425					ERRCOD(5,WSBFN%,WSEBFN)	;BAD FUNCTION NUMBER
  1426					ERRCOD(6,WSRTM%,WSERTM)	;TRYING TO READ TOO MUCH OF BIT MAP
  1427					ERRCOD(7,WSATM%,WSEATM);ADDED TOO MUCH, EXCEEDED LIMIT
  1428					ERRCOD(10,WSLOM%,WSELOM);ATTEMPT TO SET LIMIT OVER MAX LIMIT
  1429					ERRCOD(11,WSLUS%,WSELUS);ATTEMPT TO SET LIMIT BELOW MINIMUM (3P) SIZE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 27
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1430	001351'	265440	001566'	UWSCTL::JSP	T4,DOUUO	;DO THE PUSHJ, SAVE ERROR CODE
  1431
  1432				;CANNOT PUSHJ TO WSCTL UNLESS PC.UIO IS OFF, SINCE IT DOES
  1433				; UMOVES TO GET ARGS.
  1434				;Upon entry at WSCTL, T1 contains caller's argument address in RH,
  1435				; LH has WSCTL function code plus sign bit (bit 0) if PC.USR was
  1436				; on at call to DOUUO.
  1437
  1438	001352'	702600	400000*	WSCTL:	NOCHARGE	;TURN OFF THE CLOCK.
  1439	001353'	400500	000000		SETZ	W,		;IN CASE W NOT SETUP.
  1440	001354'	623300	400000		TLZE	T1,FL.USR	;SKIP IF CALLED FOR EXEC
  1441	001355'	665200	400000		TLOA	F,FL.USR	;SET SIGN BIT OF IF IF USER WAS ON
  1442	001356'	621200	400000		TLZ	F,FL.USR	;EXEC, SO CLEAR THE BIT.
  1443	001357'	550540	000006		HRRZ	M,T1		;GET BLOCK ADDRESS
  1444	001360'	577000	000006		HLRES	T1		;GET FUNCTION NUMBER IN T1
  1445	001361'	321300	001556'		JUMPL	T1,WSEBFN	;ERROR, BAD FUNCTION CODE
  1446	001362'	303300	000005		CAILE	T1,MAXWSF	;TOO BIG?
  1447	001363'	254000	001556'		JRST	WSEBFN		;YES, GIVE ERROR
  1448	001364'	200346	000000*		MOVE	T2,BITTBL(T1)	;Get bit corresponding to fn code
  1449	001365'	616340	001405'		TDNN	T2,WSMAP	;Does this function clear MWS adj?
  1450	001366'	254000	001372'		  JRST	WSCTL1		;No, not ever
  1451	001367'	201340	400000		MOVEI	T2, JWSADJ
  1452	001370'	603200	400000		TLNE	F, FL.USR	;IF BEING CALLED BY USER,
  1453	001371'	412342	001337*		ANDCAM	T2, JBTSTS(J)	;  TURN OFF MWS ADJUSTMENT
  1454	001372'			WSCTL1:
  1455	001372'	241300	777777		ROT	T1,-1		;DIVIDE BY 2
  1456	001373'	335000	000006		SKIPGE	T1		;USE RH IF FUNCTION IS ODD
  1457	001374'	334346	001402'		SKIPA	T2,WSDSP(T1)	;ELSE
  1458	001375'	204346	001402'		MOVS	T2,WSDSP(T1)	;USE LEFT HALF
  1459	001376'	350001	000000		AOS	(P)		;ASSUME SKIP RETURN
  1460	001377'	260047	000000		PUSHJ	P,(T2)		;DO THE FN
  1461	001400'	370001	000000		  SOS	(P)		;GIVE ERROR RETURN
  1462	001401'	263040	000000		POPJ	P,		;AND RETURN.
  1463
  1464				;DISPATCH TABLE FOR WSCTL UUO
  1465
  1466	001402'	001406'	001420'	WSDSP:	RDWSMP,,WSRNGE		;(0,1)READ BIT MAP, SET BY RANGE
  1467	001403'	001471'	001504'		STWSLM,,WSRDSZ		;(2,3)SET LIMIT, READ SIZE
  1468	001404'	001507'	001512'		WSRDLM,,WSRDMX		;(4,5)READ LIMIT, READ MAX LIMIT
  1469
  1470			000005	MAXWSF==<.-WSDSP>*2-1		;MAXIMUM FUNCTION NUMBER
  1471
  1472				;;
  1473				;; Bit map which indicates which of the WSCTL functions should
  1474				;; clear JBTSTS<JWSADJ>.  If bit is zero, JBTSTS<JWSADJ> should
  1475				;; not be changed.  Note: this will obviously work only for 36 or
  1476				;; fewer WSCTL function codes.
  1477				;;
  1478
  1479	001405'	300000	000000	WSMAP:	EXP 1B<.WSRNG>+1B<.WSSTL>
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 28
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1480				;FUNCTION .WSRBM, READ WORKING SET BIT MAP INTO USER'S ARG BLOCK.
  1481
  1482	001406'	256200	006403'	RDWSMP:	UMOVE	P1,(M)		;GET COUNT
  1483	001407'	541553	000001		HRRI	M,1(M)		;ADVANCE TO NEXT USER LOC
  1484	001410'	323600	001350*		JUMPLE	P1,CPOPJ1	;IF USER'S COUNT WAS .LE. 0,
  1485								;JUST GIVE GOOD RETURN
  1486	001411'	303600	000017		CAILE	P1,<<^D512+^D35>/^D36> ;IF TOO LARGE,
  1487	001412'	254000	001557'		JRST	WSERTM		;GIVE ERROR.
  1488
  1489				;NOW RETURN HIM THE BIT MAP FOR UWS
  1490
  1491	001413'	205300	000000*		MOVSI	T1,%UPT+UPTUWB	;SOURCE
  1492	001414'	541313	000000		HRRI	T1,(M)		;DESTINATION IN USER AREA
  1493	001415'	271613	777777		ADDI	P1,-1(M)	;LAST WORD TO TRANSFER TO
  1494	001416'	256200	006404'		XCTTU	<BLT T1,(P1)> ;PUT INTO USER'S AREA
  1495	001417'	254000	001410*		JRST	CPOPJ1		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 29
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1496				;FUNCTION .WSRNG, ADD OR REMOVE PAGES FROM UWS BY RANGES.
  1497				;
  1498				;USER LOCATION CONTAINS COUNT,,FIRST PAGE. BIT 7 IS ON IF
  1499				; PAGES ARE TO BE ADDED TO WORKING SET, OFF IF TO
  1500				; BE REMOVED.
  1501
  1502	001420'	260040	000431*	WSRNGE:	PUSHJ	P,TIMADJ	;RECORD SIZE CHARGING ELEMENTS
  1503								;BEFORE JBYUWS CHANGES.
  1504	001421'	256200	006405'		UMOVE	T1,(M) 		;GET USER ARG
  1505	001422'	135500	006406'		LDB	W,[POINT 10,T1,17] ;NUMBER PAGES TO DO
  1506	001423'	322500	001551'		JUMPE	W,WSEBCN	;BAD COUNT
  1507	001424'	525512	777777		HRLOI	W,-1(W)		;GET COUNT-1,,-1
  1508	001425'	445506	000000		EQVI	W,(T1)		;COMPLEMENT LH, GET ADDR IN RH
  1509	001426'	607300	002000		TLNN	T1,WS.ADD	;ADD OR REMOVE?
  1510	001427'	254000	001460'		JRST	WSREMV		;REMOVE.
  1511
  1512	001430'	135600	000000*		LDB	P1,UPYUWL	;GET LIMIT FOR CHECKING
  1513	001431'	205640	001330*		MOVSI	P2,LMMEXS	;TO CHECK FOR EXISTENCE
  1514	001432'	550240	000012		HRRZ	U,W		;REMEMBER START VP FOR CHARGING.
  1515	001433'	135300	000000*	WSRAD1:	LDB	T1,JBYUWS	;GET NEW SIZE
  1516	001434'	311300	000014		CAML	T1,P1		;STILL BELOW?
  1517					JRST	[PUSHJ P,WSTCHG ;NO, ERROR, CAN'T ADD MORE
  1518	001435'	254000	006407'			JRST WSEATM]	;
  1519	001436'	265440	002647'		JSP	T4,VPCHK	;ALLOWED TO MESS WITH THIS?
  1520					JRST	[PUSHJ P,WSTCHG	;
  1521	001437'	254000	006411'			JRST WSEBVP]	;
  1522	001440'	616652	000000*		TDNN	P2,%UPLMA(W)	;EXISTS?
  1523					JRST	[PUSHJ P,WSTCHG ;NO, ERROR
  1524	001441'	254000	006413'			JRST WSENVP]	;
  1525	001442'	260040	005365'		PUSHJ	P,TSTUWS	;THERE ALREADY?
  1526	001443'	254000	001445'		  JRST	.+2		;NO
  1527	001444'	254000	001455'		JRST	WSRAD2		;YES, DO NEXT ONE.
  1528	001445'	260040	005267'		PUSHJ	P,SETUWS	;OK, ADD IT TO UWS
  1529	001446'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP SLOT DATA IN P3,P4
  1530	001447'	603700	001233*		TLNE	P3,LMPSUP	;IF SUPER PAGE
  1531	001450'	254000	001453'		JRST	WSRA1A		;THEN DON'T MESS WITH ATB
  1532	001451'	603700	000000*		TLNE	P3,LMPVIR	;IF ITS VIRGIN, MAY BE A FREE ONE
  1533					JRST	[PUSHJ P,GETATB
  1534						 SKIPGE ATBDUM(T1) ;IS IT A PRIVATE PAGE?
  1535						 AOJA U,.+1	;YES, CHARGE FOR ONE LESS
  1536	001452'	254000	006415'			 JRST .+1]	;RETURN BACK.
  1537	001453'	260040	003663'	WSRA1A:	PUSHJ	P,CINMWS	;TRY TO PUT INTO MWS
  1538	001454'	260040	004672'		PUSHJ	P,STOLMA	;PUT LMAP SLOT DATA BACK.
  1539	001455'	253500	001433'	WSRAD2:	AOBJN	W,WSRAD1	;AND CONTINUE
  1540	001456'	260040	001515'		PUSHJ	P,WSTCHG	;CHARGE IF USER CALLED.
  1541	001457'	254000	001417*		JRST	CPOPJ1		;OK, RETURN.
  1542
  1543	001460'	265440	002647'	WSREMV:	JSP	T4,VPCHK	;OK FOR CALLER TO CHANGE?
  1544	001461'	254000	001552'		  JRST	WSEBVP		;NO, GIVE ERROR
  1545	001462'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP SLOT DATA
  1546	001463'	607700	001431*		TLNN	P3,LMMEXS	;IF SLOT DOES NOT EXIST,
  1547	001464'	254000	001467'		JRST	WSREM1		;SKIP THE WORK.
  1548	001465'	260040	003607'		PUSHJ	P,REMUWS	;POSSIBLY TAKE OUT OF MWS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 29-2
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1549	001466'	260040	004672'		PUSHJ	P,STOLMA	;PUT SLOT DATA BACK
  1550	001467'	253500	001460'	WSREM1:	AOBJN	W,WSREMV	;AND TO WHOLE RANGE
  1551	001470'	254000	001457*		JRST	CPOPJ1		;GIVE SUCCESS RETURN
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 30
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1552				;FUNCTION .WSSTL, SET WORKING SET LIMIT.
  1553
  1554	001471'	256200	006405'	STWSLM:	UMOVE	T1,(M) 		;GET DESIRED LIMIT
  1555	001472'	135340	000000*		LDB	T2,UPYUWM	;GET MAX IT CAN BE SET TO
  1556	001473'	313300	000007		CAMLE	T1,T2		;UNDER OR = TO THE MAX?
  1557	001474'	254000	001561'		JRST	WSELOM		;NO, ERROR
  1558	001475'	305300	000003		CAIGE 	T1,3		;CANT SET BELOW 3 ELSE
  1559	001476'	254000	001562'		JRST 	WSELUS		;SYSTEM CAN HANG IN I/O BLTS,ETC.
  1560	001477'	137300	001430*		DPB	T1,UPYUWL	;OK, SET NEW LIMIT
  1561	001500'	135340	001433*		LDB	T2,JBYUWS	;GET SIZE NOW
  1562	001501'	313340	000006		CAMLE	T2,T1		;IF SIZE IS NOW GREATER THAN LIMIT,
  1563	001502'	260040	003535'		PUSHJ	P,UWSRPL	;MAKE IT LESS ( DOES ONE TOO MANY PAGES, BUT TOO BAD.)
  1564	001503'	324740	001470*		PJRST	CPOPJ1		;AND RETURN.
  1565
  1566				;FUNCTION .WSRSZ READ WORKING SET SIZE
  1567				; AC HAS FN,,ADDR TO RETURN SIZE IN
  1568
  1569	001504'	135300	001500*	WSRDSZ:	LDB	T1,JBYUWS	;GET UWS SIZE
  1570	001505'	256200	006326'		UMOVEM	T1,(M)		;RETURN IT
  1571	001506'	254000	001503*		JRST	CPOPJ1		;AND GO BACK.
  1572
  1573				;FUNCTION .WSRLM READ WORKING SET LIMIT
  1574
  1575	001507'	135300	001477*	WSRDLM:	LDB	T1,UPYUWL	;GET LIMIT
  1576	001510'	256200	006326'		UMOVEM	T1,(M)		;RETURN IT
  1577	001511'	254000	001506*		JRST	CPOPJ1		;AND RETURN
  1578
  1579				;FUNCTION .WSRMX READ MAX LIMIT SET BY CONSOLE COMMAND
  1580
  1581	001512'	135300	001472*	WSRDMX:	LDB	T1,UPYUWM	;GET MAX LIMIT
  1582	001513'	256200	006326'		UMOVEM	T1,(M)
  1583	001514'	254000	001511*		JRST	CPOPJ1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 31
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1584				;ROUTINE TO CALL TO CHARGE FOR PAGES ADDED TO USER WORKING SET.
  1585				; U CONTAINS "ADJUSTED" FIRST PAGE NUMBER ADDED TO WORKING SET.
  1586				; ADJUSTMENT IS MADE BY INCREMENTING IT FOR EVERY VIRGIN PRIVATE
  1587				; PAGE WE ADD TO UWS, THEREBY CHARGING FOR ONE LESS PAGE.
  1588				; NOTE THAT ONLY VIRGIN BIT IS CHECKED, SO IF WE REPLICATE
  1589				; A VIRGIN PAGE AND THEN VIOLATE IT, THE ORIGINAL COPY
  1590				; STILL HAS VIRGIN BIT ON AND CAN BE ADDED TO UWS FREE.
  1591				; THIS IS FOR SAKE OF SAVING TIME. (TSTVIR TOO LONG TO CALL).
  1592				;DESTROYS T1-T4.
  1593
  1594	001515'	607200	400000	WSTCHG:	TLNN	F,FL.USR	;DON'T CHARGE IF MONITOR IS PUTTING PAGES INTO UWS
  1595	001516'	263040	000000		POPJ	P,		;BYE.
  1596	001517'	210440	000005		MOVN	T4,U		;GET -START
  1597	001520'	271452	000000		ADDI	T4,(W)		;GET -START+END (END-START)
  1598	001521'	324740	001523'		PJRST	CHGPWS		;AND CHARGE, RETURN.
  1599
  1600
  1601				COMMENT #
  1602				@@SUBROUTINE CHGPWS
  1603				@@PURPOSE
  1604				SUBR TO CHARGE FOR ADDING N PAGES TO THE UWS.
  1605				@@ENTRY
  1606				EXPECTS T4/ NO. OF PAGES ADDED, AND J/ JOB NUMBER.
  1607				@@ACCUM
  1608				DESTROYS T1-T4.
  1609				@@ #
  1610
  1611				EXTERN JBTPWS,JBTPWL,JBTPWH,GTCGSZ
  1612
  1613
  1614			000144	CHGF==^D100			;F.
  1615	001522'	000003	664520	CGF104: <CHGF+1>*23420		;23420=10000.
  1616
  1617	001523'	272442	000000*	CHGPWS:: ADDM	T4,JBTPWS(J)
  1618	001524'	272440	001523*		ADDM	T4,JBTPWS
  1619	001525'	260040	000000*		PUSHJ	P,GTCGSZ	;GET T1/ CHARGING SIZE OF JOB.
  1620	001526'	221311	000000		IMULI	T1,(T4)		;T1/WSS*P.
  1621	001527'	220300	001522'		IMUL	T1,CGF104	;T1/WSS*P*(F+1)*10000.
  1622	001530'	271440	000144		ADDI	T4,CHGF		;T4/(F+P).
  1623	001531'	231311	000000		IDIVI	T1,(T4)		;(WSS*P*(F+1)*10000.)/(F+P).
  1624	001532'	200342	000000*	CHGPW4:	MOVE	T2,JBTPWL(J)	;ADD TO THE COUNT FOR
  1625	001533'	270340	000006		ADD	T2,T1		;THE JOB, TAKING
  1626	001534'	623340	400000		TLZE	T2,400000	;CARE
  1627	001535'	350002	000000*		AOS	JBTPWH(J)	;OF OVERFLOW.
  1628	001536'	202342	001532*		MOVEM	T2,JBTPWL(J)	;
  1629	001537'	200340	001536*		MOVE	T2,JBTPWL	;DITTO FOR THE
  1630	001540'	270340	000006		ADD	T2,T1		;SYSTEM COUNT.
  1631	001541'	623340	400000		TLZE	T2,400000	;
  1632	001542'	350000	001535*		AOS	JBTPWH		;
  1633	001543'	202340	001537*		MOVEM	T2,JBTPWL	;
  1634	001544'	263040	000000		POPJ	P,
  1635
  1636
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 31-2
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1637
  1638				COMMENT #
  1639				@@SUBROUTINE CHGUPA
  1640				@@PURPOSE
  1641				SUBR TO CHARGE FOR MAKING US DO THE UPRA FOR N PAGES.
  1642				@@ENTRY
  1643				EXPECTS T4/ NO. OF PAGES AND J/ JOB NUMBER.
  1644				@@ACCUM
  1645				DESTROYS T1-T4.
  1646				@@ #
  1647
  1648	001545'	260040	001525*	CHGUPA:	PUSHJ	P,GTCGSZ	;GET T1/ CHARGING SIZE OF JOB.
  1649	001546'	221311	000000		IMULI	T1,(T4)		;TIMES NO. OF TIMES WE DID UPRA.
  1650	001547'	221300	000144		IMULI	T1,^D100	;1% OF ADD TO UWS SIZE.
  1651	001550'	254000	001532'		JRST	CHGPW4		;
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 32
CORE1.MAC	28-OCT-87 17:05		WORKING SET CONTROL UUOS

  1652				;ERROR RETURNS
  1653
  1654	001551'	265300	001563'	ERR00:	JSP	T1,ECOD		;(0)
  1655	001552'	265300	001563'	ERR01:	JSP	T1,ECOD		;(1)
  1656	001553'	265300	001563'	ERR02:	JSP	T1,ECOD		;(2)
  1657	001554'	265300	001563'	ERR03:	JSP	T1,ECOD		;(3)
  1658	001555'	265300	001563'	ERR04:	JSP	T1,ECOD		;(4)
  1659	001556'	265300	001563'	ERR05:	JSP	T1,ECOD		;(5)
  1660	001557'	265300	001563'	ERR06:	JSP	T1,ECOD		;(6)
  1661	001560'	265300	001563'	ERR07:	JSP	T1,ECOD		;(7)
  1662	001561'	265300	001563'	ERR10:	JSP	T1,ECOD		;(10)
  1663	001562'	265300	001563'	ERR11:	JSP	T1,ECOD		;(11)
  1664	001563'	275300	001552'	ECOD:	SUBI	T1,ERR00+1	;COMPUTE ERR CODE
  1665	001564'	504300	000012		HRL	T1,W		;T1/ VP#,,CODE
  1666	001565'	263040	000000		POPJ	P,		;RETURN.
  1667
  1668				;ROUTINE TO INTERFACE BETWEEN UUOCON AND NEW VIRTUAL PAGE
  1669				; UUO KERNALS. SAVES USER AC NUMBER, SETS SIGN BIT OF T1
  1670				; TO 0 IF EXEC MODE CALL, 1 IF USER MODE CALL, CALLS THE
  1671				; UUO KERNAL. IF UUO KERNAL GIVES ERROR CODE, IT WILL BE
  1672				; IN T1, SO RESTORE USER AC NUMBER AND STORE THE ERROR CODE
  1673				; IN USER'S AC. IF UUO KERNAL GIVES SKIP RETURN, JUST
  1674				; POP M OFF STACK AND GIVE SKIP RETURN TO UUOCON. CALL:
  1675				;
  1676				;
  1677				;	JSP	T4,DOUUO
  1678				;UUO:	<UUO CODE TO PUSHJ TO>
  1679				;
  1680				;
  1681				EXTERNAL PDNMUP
  1682
  1683	001566'	205400	010000	DOUUO:	MOVSI	T3,PC.USR	;IS THE CALL FROM USER?
  1684	001567'	612401	000000*		TDNE	T3,PDNMUP(P)	;GET PC FROM DEFINED PLACE ON STACK RELATIVE TO HERE.
  1685	001570'	665300	400000		TLOA	T1,FL.USR	;YES, SET THIS IS USER BIT
  1686	001571'	621300	400000		TLZ	T1,FL.USR	;NO, IS EXEC CALL.
  1687	001572'	261040	000013		PUSH	P,M		;SAVE USER AC NUMBER
  1688	001573'	260051	000000		PUSHJ	P,(T4)		;CALL THE UUO KERNAL WITH USER ARG IN T1
  1689					  JRST	[POP P,M
  1690						 UMOVEM T1,(M)	;SAVE VP,,ERROR CODE IN USER AC
  1691	001574'	254000	006421'			 POPJ P,]	;RETURN
  1692	001575'	324740	000000*		PJRST	TPOPJ1		;GET M OFF STACK AND GIVE SUCCESS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 33
CORE1.MAC	28-OCT-87 17:05		PAGSTS UUO

  1693				SUBTTL PAGSTS UUO
  1694
  1695				COMMENT ! ENTRY UPGSTS -- COME HERE FROM UUOCON DISPATCH
  1696
  1697				EXPECTS: M & W/ USER AC #
  1698					J/JOB
  1699					T1/ C(USER AC) = <OTFFLG>B1+VP#
  1700				FUNCTION: CALL KERNEL VIA LOCAL INTERFACE ROUTINE WHICH SETS
  1701					UP AC'S ETC.
  1702
  1703				UUO CALLED: MOVE AC,[<OTFFLG>B1+VP#]
  1704					    PAGSTS AC,
  1705						ERR RETURN, AC/VP#,,0 (ILLEGAL VP#)
  1706					    SUCCESS RETURN, AC/ DATA
  1707				!
  1708
  1709	001576'	265440	001566'	UPGSTS::JSP	T4,DOUUO
  1710	001577'	201700	000044		MOVEI	P3,.ARRDM	;NEED READ MAP ACCESS TO SEE PAGE STATUS.
  1711	001600'	260040	000162*		PUSHJ	P,SWRUPX	;GET CORRECT CONTEXT PAGES IN %UPX
  1712					  JRST	[MOVSS T1
  1713						 HRRI  T1,PSOFF%
  1714						 DPB   P3,FDEERP<T1>
  1715	001601'	254000	006336'			 POPJ  P,]
  1716				;*;	JRST	VPGSTS		;Continue on next page
  1717
  1718				COMMENT ! ROUTINE VPGSTS -- KERNEL (called only by the PAGSTS UUO)
  1719				EXPECTS: T1/<USER>,,VP#  J/JOB, M/USER AC#
  1720				FUNCTION: RETURN T1/ STATUS INFO FOR VP TO USER LOC (M)
  1721				RESTRICTION: MONITOR ROUTINES WISHING TO PUSHJ DIRECTLY HERE
  1722					MUST SET 1B0=<USER> IN T1 IF USER PROTECTION IS
  1723					DESIRED (VP>777 ILLEGAL) OR CLEAR IT IF MONITOR
  1724					PROTECTION DESIRED (VP > VPUMAX ILLEGAL). ALSO
  1725					WATCH OUT FOR P3,P4 CLOBBERED AND NOTE THIS ROUTINE
  1726					STORES IN USER SPACE AT (M)
  1727				DESTROYS: T1-T4,PG,P1,P3,P4, 1B0 IN F
  1728				CALL:	MOVEI T1,VP#  OR MOVE T1,[<USER>,,VP#]
  1729					MOVE J,JOB
  1730					PUSHJ P,VPGST
  1731					 ERR RETURN, VP# ILLEGAL, T1/VP#,,0
  1732					SUCCESS RETURN, T1/DATA AS FOLLOWS:
  1733				!
  1734
  1735				;THE NAMES OF PAGSTS BITS, DEFINED GLOBALLY FOR OTHER MODULES
  1736			400000	XP PS.UWS,(1B0)		;IN USER WORKING SET
  1737			200000	XP PS.REF,(1B1)		;THE REFERENCE BIT
  1738			100000	XP PS.MXW,(1B2)		;ON IF THE PAGE CAN BE PROTECTED READ/WRITE
  1739			040000	XP PS.SUP,(1B3)		;ON IF THE PAGE IS A SUPER PAGE
  1740			020000	XP PS.DER,(1B4)		;DEVICE ERROR
  1741			010000	XP PS.DTE,(1B5)		;DATA ERROR
  1742			030000	  XP PS.DDE,(1B4!1B5)	;MASK.
  1743			004000	XP PS.DRT,(1B6)		;ON IF PAGE NOT DIRTY OR SWAP OUT GOING.
  1744			002000	XP PS.NER,(1B7)		;IGNORE ERRORS IN EFFECT FOR THIS PAGE
  1745			001000	XP PS.OER,(1B8)		;PAGE HAS AN OUTPUT ERROR - STATUS BITS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 33-2
CORE1.MAC	28-OCT-87 17:05		PAGSTS UUO

  1746							; ARE THE OR OF OUTPUT AND INPUT ERROR STATUS.
  1747			000400	XP PS.PAR,(1B9)		;PARITY ERROR ON DIRTY PAGE. SOMETIMES
  1748							; PS.DER IS ALSO SET WITH THIS.
  1749			000010	XP PS.FIL,1B32		;ON IF THE PAGE WAS ORIGINALLY MAPPED FROM A FILE
  1750							; (MAY NOT BE IN THE FILE ANYMORE).
  1751			000007	XP PS.CPR,7B35		;CURR PROT (CPRRED,CPRCOW,CPRRDW) OR
  1752							;ZERO IF PG NON-EXISTENT
  1753
  1754
  1755				;ERROR CODES:
  1756
  1757					ERRCOD(0,ZZ,ZZ)		;(BAD COUNT)
  1758					ERRCOD(1,PSBVP%,PSEBVP)	;BAD VP NUMBER
  1759					ERRCOD(7,PSOFF%,PSEOFF) ;"OTHER FRAME" FAILURE, SUBCODE IN 0-5.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 34
CORE1.MAC	28-OCT-87 17:05		PAGSTS UUO

  1760				;Continuation of PAGSTS uuo
  1761				;*; INTERN VPGSTS   ;(label is never referenced, could be eliminated)
  1762	001602'	550500	000006	VPGSTS:	HRRZ W,T1	;VP
  1763	001603'	621200	400000		TLZ F,FL.USR	;THIS WILL GET SET IF USER LIMITATIONS
  1764	001604'	603300	400000		TLNE T1,FL.USR	;DESIRED ON VP#
  1765	001605'	661200	400000		TLO F,FL.USR	;SEE VPCHK
  1766	001606'	265440	002647'		JSP T4,VPCHK	;LEGIT VP# IN W?
  1767	001607'	254000	001552'		 JRST PSEBVP	;GRONK
  1768	001610'	261040	000013		PUSH P,M
  1769	001611'	260040	004660'		PUSHJ P,REDLMX	;RETURN P3,P4 LMAP SLOT DATA
  1770	001612'	201600	000000		MOVEI P1,0
  1771	001613'	607700	001463*		TLNN P3,LMMEXS	;IF PG DOESNT EXIST, RETURN
  1772	001614'	254000	001660'		JRST VPGSX	;ONLY PS.REF AND PS.CPR=0
  1773				;BEGIN CODE FOR EXISTENT SLOTS ONLY
  1774	001615'	603700	001447*		TLNE P3,LMPSUP	;IF SUPER, NO ATB ADDR
  1775	001616'	254000	001622'		JRST VPGST2
  1776	001617'	260040	004771'		PUSHJ P,GETATB	;RETURN T1/ATB ADDR
  1777	001620'	331006	001240*		SKIPL ATBSTS(T1)	;FILE PAGE ? (ATBDUM=1B0)
  1778	001621'	660600	000010		TRO P1,PS.FIL	;NOTE THE FACT
  1779	001622'	260040	005364'	VPGST2:	PUSHJ P,TSXUWS	;SKIP IF UWS BIT ON
  1780	001623'	334000	000000		  SKIPA
  1781	001624'	661600	400000		TLO P1,PS.UWS
  1782	001625'	603700	001615*		TLNE P3,LMPSUP
  1783	001626'	661600	040000		TLO P1,PS.SUP
  1784	001627'	135340	001305*		LDB T2,LM3ERR	;BOTH ERROR BITS
  1785	001630'	137340	006424'		DPB T2,[POINT 2,P1,5]	;PS.DDE ARE 1B4 1B5
  1786	001631'	603700	000000*		TLNE P3,LMPMXW
  1787	001632'	661600	100000		TLO P1,PS.MXW
  1788	001633'	603700	001306*		TLNE P3,LMPNER	;COPY IGNORE ERROR BIT TO RETURN ARG
  1789	001634'	661600	002000		TLO P1,PS.NER
  1790	001635'	135340	000254*		LDB T2,LM3CUR	;T2/CURR PROT
  1791	001636'	434600	000007		IOR P1,T2
  1792	001637'	260040	004744'		PUSHJ P,GETDPA	; GET T2/DISK RETR. PTR.
  1793	001640'	336000	001271*		SKIPN OHTNUM	;ANY OUTPUT ERRORS INSYSTEM?
  1794	001641'	254000	001653'		JRST VPGS2A	;NO
  1795	001642'	260040	001274*		PUSHJ P,SRCOHT	;SEE IF THIS PAGE IS IN OHT
  1796	001643'	254000	001653'		  JRST	VPGS2A	;NO, OK.
  1797	001644'	661600	001000		TLO P1,PS.OER	;YES, TELL USER
  1798	001645'	200311	001276*		MOVE T1,OHTTAB(T4)	;GET OHT DATA
  1799	001646'	603300	000000*		TLNE T1,OHTPAR	;PARITY ERROR?
  1800	001647'	661600	000400		TLO P1,PS.PAR	;YES, SET RETURN ARG BIT FOR IT
  1801	001650'	135300	006425'		LDB T1,[POINT 2,T1,1] ;GET ERROR STATUS BITS
  1802	001651'	242300	000036		LSH T1,^D35-^L<PS.DTE>+^D18 ;POSITION FOR RETURN ARG
  1803	001652'	434600	000006		IOR P1,T1	;OR THESE INTO EXISTING ERROR BITS.
  1804	001653'	260040	005024'	VPGS2A:	PUSHJ P,GETCPX	;IN CORE?
  1805	001654'	254000	001660'		  JRST VPGSX	;NOT IN CORE, DONT SET PS.DRT
  1806	001655'	135400	001163*	VPGST3:	LDB T3,PGYSTS
  1807	001656'	602400	000000*		TRNE T3,PGPSOP!PGPDRT	;IF EITHER DRT OR SOP SET,
  1808	001657'	661600	004000		TLO P1,PS.DRT	;TELL USER NO GOOD DISK COPY
  1809				;END OF CODE FOR DEFINITELY EXISTENT VP SLOTS
  1810	001660'	603700	000405*	VPGSX:	TLNE P3,LMPREF
  1811	001661'	661600	200000		TLO P1,PS.REF
  1812	001662'	262040	000013		POP P,M		;USER AC# TO RETURN DATA INTO
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 34-2
CORE1.MAC	28-OCT-87 17:05		PAGSTS UUO

  1813	001663'	256200	006426'		UMOVEM P1,(M)
  1814	001664'	254000	001514*		JRST CPOPJ1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 35
CORE1.MAC	28-OCT-87 17:05		VPGFIL UUO

  1815				SUBTTL VPGFIL UUO
  1816
  1817				COMMENT ! ENTRY VPGFIL -- COME HERE FROM UUOCON DISPATCH
  1818
  1819				UUO CALLED BY USER:
  1820					MOVE AC,[-COUNT,,BLOCK]
  1821					VPGFIL AC,
  1822					 ERROR AC/VP#,,CODE
  1823					SUCCESS AC UNCHANGED, BLOCK HAS NEW DATA
  1824				BLOCK:	VP#	(ARGUMENT; REST OF BLOCK IS RETURN DATA)
  1825					<BITS>   1B0 SET IF FILE MARKED FOR DELETION
  1826					SIXBIT /STRUCTURE/
  1827					SIXBIT /FILENAME/
  1828					SIXBIT /EXT/
  1829					ZERO
  1830					PPN
  1831					ZERO
  1832
  1833				FUNCTION: RETURN THE FILENAME,ETC. FROM WHICH VP WAS MAPPED.
  1834					(RETURN AS MUCH OF THE INFO AS <COUNT> ALLOWS IN BLOCK.)
  1835
  1836				EXPECTS: M/ USER AC #
  1837					J/ JOB
  1838					T1/ <-COUNT>,,<BLOCK ADDR>
  1839				CALL THE UUO KERNEL VIA DOUUO INTERFACE.
  1840
  1841				!
  1842
  1843				;ERR CODES
  1844					ERRCOD (0,ZZ,ZZ)		;NOT USED
  1845					ERRCOD (1,PFBVP%,VPFBVP)	;BAD VP#
  1846					ERRCOD (2,ZZ,ZZ)		;NOT USED
  1847					ERRCOD (3,ZZ,ZZ)		;NOT USED
  1848					ERRCOD (4,PFNEX%,VPFNEX)	;NON-EXISTENT PG
  1849					ERRCOD (5,ZZ,ZZ)		;NOT USED
  1850					ERRCOD (6,PFNFP%,VPFNFP)	;NOT FILE PAGE
  1851	
  1852				; NOTE: FOR SUPER PAGES, THE STRUCTURE-NAME & ZEROS ARE RETURNED
  1853
  1854	001665'			VPGFIL::
  1855	001665'	200600	000006		MOVE P1,T1	;P1/USER AOBJN DURING WHOLE UUO
  1856	001666'	252600	001664*		AOBJP P1,CPOPJ1	;SUCCEED NO DATA WRITTEN IF COUNT=-1
  1857	001667'	256200	006427'		UHRRZ W,-1(P1)	;W/VP#
  1858	001670'	265440	001566'		JSP T4,DOUUO	;PUSHJ TO .+1
  1859
  1860				COMMENT ! KPGFIL -- UUO KERNAL VPGFIL UUO
  1861				EXPECTS: T1/1B0 SET FOR USER PAGE PROTECTION, ELSE EXEC
  1862					W/ VP#
  1863					P1/ USER AOBJN FOR DATA TO BE WRITTEN
  1864				DESTROYS: PRACTICALLY EVERYTHING: S,U,W,P1-P4,T1-T4,PG,..
  1865				RESTRICTIONS: WRITES ON USER SPACE AT (P1). PC.UIO MUST BE ON.
  1866					ANYBODY PUSHJ'ING HERE MUST SET PC.UIO AND 1B0 IN T1
  1867					UNLESS EXEC PAGE PRIVS DESIRED.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 35-2
CORE1.MAC	28-OCT-87 17:05		VPGFIL UUO

  1868				!
  1869
  1870	001671'	603300	400000	KPGFIL:	TLNE	T1,FL.USR
  1871	001672'	665200	400000		  TLOA	F,FL.USR	;TRANSFER <USER> TO F, FOR VPCHK
  1872	001673'	621200	400000		  TLZ	F,FL.USR
  1873	001674'	265440	002647'		JSP	T4,VPCHK
  1874	001675'	254000	001552'		 JRST	VPFBVP		;CRUMMY VP
  1875	001676'	260040	004623'		PUSHJ	P,GETLMA	;RETURN P3,P4 SLOT DATA
  1876	001677'	607700	001613*		TLNN	P3,LMMEXS	;EXISTS?
  1877	001700'	254000	001555'		  JRST	VPFNEX
  1878	001701'	603700	001625*		TLNE	P3,LMPSUP	;SUPER PAGE?
  1879					  JRST	[SETZB  S,P2	;YES,RETURN ALL ZEROS
  1880						SETZB   P3,P4	;EXCEPT STRNAM
  1881	001702'	254000	006430'			JRST    KPFSP]	;GO PICK UP IN U
  1882								;BESIDES, SUPER PAGES HAVE NO ATB
  1883	001703'	260040	004771'		PUSHJ	P,GETATB		;GET T1/ATB, CLOB PG
  1884	001704'	335006	001620*		SKIPGE	ATBSTS(T1)	;ATBDUM SET?
  1885	001705'	254000	001741'		  JRST	KPFUU1		;YES,PRIVATE PAGE. ERROR
  1886	001706'	550346	000724*		HRRZ	T2,ATBFNB(T1)	;T2/FNB
  1887	001707'	550407	000711*		HRRZ	T3,FNBDRB(T2)	;T3/DRB
  1888	001710'	200006	001704*		MOVE	S,ATBSTS(T1)	;PREPARE TO RETURN <BITS>
  1889	001711'	606000	000000*		TRNN	S,ATPDEL		;MARKED FOR DELETION?
  1890	001712'	634000	000000		  TDZA	S,S		;NO
  1891	001713'	205000	400000		  MOVSI	S,(1B0)
  1892	001714'	200647	000000*		MOVE	P2,FNBNAM(T2)	;SIXBIT/FILENAME/
  1893	001715'	514707	000000*		HRLZ	P3,FNBEXT(T2)	;SIXBIT/EXT/
  1894	001716'	200750	000000*		MOVE	P4,DRBNAM(T3)	;PPN
  1895
  1896	001717'			KPFSP:	;COME HERE ALSO IF SUPER PAGE
  1897				PRINTF(<[PGFSP Setup U/STRNAM -- USE proper DRBSTR instead of STRDDB]>)
  1898	001717'	201240	000102*		MOVEI	U,STRDDB	;Get proper structure pointer
  1899	001720'	200245	000000*		MOVE	U,STRNAM(U)	;DONE WITH SLOT DATA
  1900	001721'	375000	000000*		SOSGE	%UPT+UPTLDC
  1901	001722'	256000	000000'		 STOPCD
  1902
  1903					;NOW U/STR S/<BITS> P2/FILENAME P3/EXT P4/PPN
  1904					;RETURN AS MUCH OF THIS AS POSSIBLE
  1905
  1906	001723'	256200	006433'		UMOVEM	S,(P1)
  1907	001724'	252600	001666*		AOBJP	P1,CPOPJ1
  1908	001725'	256200	006434'		UMOVEM	U,(P1)
  1909	001726'	252600	001724*		AOBJP	P1,CPOPJ1
  1910	001727'	256200	006435'		UMOVEM	P2,(P1)
  1911	001730'	252600	001726*		AOBJP	P1,CPOPJ1
  1912	001731'	256200	006436'		UMOVEM	P3,(P1)
  1913	001732'	252600	001730*		AOBJP	P1,CPOPJ1
  1914	001733'	256200	006437'		XCTBU	<SETZM	(P1)>
  1915	001734'	252600	001732*		AOBJP	P1,CPOPJ1
  1916	001735'	256200	006440'		UMOVEM	P4,(P1)
  1917	001736'	252600	001734*		AOBJP	P1,CPOPJ1
  1918	001737'	256200	006437'		XCTBU	<SETZM	(P1)>
  1919	001740'	254000	001736*		JRST	CPOPJ1
  1920
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 35-3
CORE1.MAC	28-OCT-87 17:05		VPGFIL UUO

  1921
  1922
  1923	001741'			KPFUU1:	;VP WAS PRIVATE
  1924	001741'	375000	000000*		SOSGE	%UPT+UPTLDC
  1925	001742'	256000	000000'		 STOPCD
  1926	001743'	254000	001557'		JRST	VPFNFP		;ERROR EXIT NOT FILE PAGE
  1927
  1928				EXTERN ATBFNB,ATPDEL,DRBNAM,FNBDRB,FNBEXT,FNBNAM,STRNAM
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 36
CORE1.MAC	28-OCT-87 17:05		REFBIT UUO

  1929				SUBTTL REFBIT UUO
  1930				COMMENT ! ENTRY URFBIT -- ENTER HERE FROM UUOCON DISPATCH
  1931				EXPECTS: T1/FUNCTION,,LOC    M/ USER AC#
  1932				!
  1933	001744'	265440	001566'	URFBIT::	JSP T4,DOUUO	;SAVES M,SETS <USER> IN T1 ACCORDING TO CALLER
  1934							;& CALLS KERNEL,FOLLOWING IMMEDIATELY.
  1935
  1936				COMMENT ! ROUTINE VRFBIT -- REFBIT UUO KERNL
  1937				FUNCTION: DECODE REFBIT FUNCTION NOS., DISPATCH TO REQUIRED
  1938					CODE. 0: READ REFBITS INTO BITMAP; 1: SET REFBITS
  1939					FROM USER BITMAP; 2: SET/CLEAR REFBITS BY PAGE RANGE.
  1940				EXPECTS: T1/<USER>1B0+<FUNCTION>B17+USERLOC
  1941				RESTRICTIONS: MONITOR ROUTINES WISHING TO PUSHJ HERE SHOULD SET
  1942					<USER> PROPERLY IN T1. NOTE THAT THESE ROUTINES READ/WRITE
  1943					ON USER SPACE.
  1944				!
  1945
  1946				;FUNCTION CODES
  1947
  1948			000000		XP .RFRBM,0	;RETURN BIT MAP
  1949
  1950			000001		XP .RFSBM,1	;SET REF BITS BY A BIT MAP.
  1951
  1952			000002		XP .RFRNG,2	;SET/CLEAR BY RANGE
  1953			002000		  XP RF.SET,(1B7) ;IF ON, SET, IF OFF, CLEAR.
  1954
  1955				;ERROR CODES:
  1956
  1957					ERRCOD(0,RFBCN%,RFEBCN)	;BAD COUNT
  1958					ERRCOD(1,RFBVP%,RFEBVP)	;BAD VP NUMBER
  1959					ERRCOD(2,ZZ,ZZ)		;PROTECTION IS BAD
  1960					ERRCOD(3,ZZ,ZZ)		;(VP ALREADY EXISTS)
  1961					ERRCOD(4,ZZ,ZZ)		;(VP DOES NOT EXIST)
  1962					ERRCOD(5,RFBFN%,RFEBFN)	;BAD FUNCTION NUMBER
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 37
CORE1.MAC	28-OCT-87 17:05		REFBIT UUO

  1963	001745'			VRFBIT:
  1964	001745'	621200	400000		TLZ F,FL.USR	;KEEP <USER> IN F. SEE VPCHK
  1965	001746'	623300	400000		TLZE T1,FL.USR	;TEST & CLEAR <USER> IN T1
  1966	001747'	661200	400000		TLO F,FL.USR	;USER PROT IN FORCE
  1967	001750'	550540	000006		HRRZ M,T1	;M/LOC
  1968	001751'	557000	000006		HLRZS T1		;T1/FUNCTION #
  1969	001752'	303300	000003		CAILE T1,MAXRUF
  1970	001753'	254000	001556'		JRST RFEBFN
  1971	001754'	241300	777777		ROT T1,-1
  1972	001755'	200346	001761'		MOVE T2,%RUTB(T1)	;
  1973	001756'	607300	400000		TLNN T1,(1B0)		;FUNCTION # ODD? NO NEED TO SWAP
  1974	001757'	207000	000007		MOVSS T2
  1975	001760'	254007	000000		JRST (T2)
  1976
  1977	001761'	002013'	002031'	%RUTB:	RFBT0,,RFBT1
  1978	001762'	001763'	001556'		RFBT2,,RFEBFN
  1979			000003	MAXRUF==<.-%RUTB>*2-1
  1980
  1981
  1982				COMMENT ! ROUTINE RFBT2 - REFBIT FUNCTION 2, SET/CLEAR BY RANGE
  1983				EXPECTS: M/ USER LOC, F/<USER> IN 1B0
  1984					LOC/ <SET/CLEAR>B7+<COUNT>B17+<START VP#>
  1985				FUNCTION: SET OR CLEAR THE REFBITS FOR COUNT PAGES BEGINNING
  1986					WITH START VP. ERROR 10 IF COUNT=0. ERROR 6 IF BAD VP.
  1987				DESTROYS: T1,T4,F,W,P3,P4,T2
  1988				!
  1989
  1990	001763'			RFBT2:
  1991	001763'	256200	006405'		UMOVE T1,(M)
  1992	001764'	541200	000000		HRRI F,0	;RH(F) WILL BE 0 FOR CLEAR,
  1993	001765'	603300	002000		TLNE T1,RF.SET	;OR 1 FOR SET
  1994	001766'	541200	000001		HRRI F,1
  1995	001767'	550500	000006		HRRZ W,T1	;VP
  1996	001770'	135300	006406'		LDB T1,[POINT 10,T1,17]
  1997	001771'	322300	001551'		JUMPE T1,RFEBCN	;COUNT 0 ILLEG
  1998	001772'	213000	000006		MOVNS T1
  1999	001773'	504500	000006		HRL W,T1	;W/ -COUNT,,VP#  AOBJN
  2000	001774'	550340	000004		HRRZ T2,F	;NOW T2/0 OR 1 FOR CLEAR/SET ARG REFBC
  2001	001775'			RFBT2A:
  2002	001775'	265440	002647'		JSP T4,VPCHK	;W/VP# LEGIT?
  2003	001776'	254000	001552'		JRST RFEBVP
  2004	001777'	260040	002002'		PUSHJ P,REFBC	;CHANGE REFBIT. TAKES T2/ 0 OR 1. CLOB P3,P4
  2005	002000'	253500	001775'		AOBJN W,RFBT2A		;LOOP FOR COUNT PAGES
  2006	002001'	254000	001740*		JRST CPOPJ1
  2007
  2008				COMMENT ! REFBC - LITTLE ROUTINE TO CHANGE REFBIT & PGE.A
  2009				EXPECTS: T2/ 0 OR 1, TO CLEAR OR SET REFBIT
  2010					W/ VP#
  2011				DESTROYS: P3,P4,T1
  2012				NOTE: RESETS PGE.A WHEN RESETTING REFBIT FOR A SLOT. DOESNT
  2013					HURT IF SLOT IS INACTIVE/NON-EXISTENT PG.
  2014				!
  2015
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 37-2
CORE1.MAC	28-OCT-87 17:05		REFBIT UUO

  2016	002002'			REFBC:
  2017	002002'	260040	004623'		PUSHJ P,GETLMA	;GET P3,P4 SLOT
  2018	002003'	607700	001677*		TLNN P3,LMMEXS	;IF DOESNT EXIST,
  2019	002004'	350000	000000*		AOS 	%UPT+UPTLDC	;AOS FOR STOLMA
  2020	002005'	326340	002010'		JUMPN T2,REFBC1
  2021	002006'	620740	400000		TRZ P4,PGE.A
  2022	002007'	625700	001660*		TLZA P3,LMPREF
  2023	002010'			REFBC1:
  2024	002010'	661700	002007*		TLO P3,LMPREF
  2025	002011'	260040	004672'		PUSHJ P,STOLMA
  2026	002012'	263040	000000		POPJ P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 38
CORE1.MAC	28-OCT-87 17:05		REFBIT UUO

  2027				COMMENT ! ROUTINE RFBT0 - REFBIT FUNCTION 0 RETURN BITMAP TO USER
  2028				FUNCTION: RETURN A BITMAP TO USER FOR VP 0 TO 777 STOPPING
  2029					SOONER IF USER <COUNT> OF BITMAP WORDS RUNS OUT.
  2030				EXPECTS: M/LOC
  2031					LOC/ <COUNT> OF WORDS FOLLOWING
  2032					LOC+1/ BITMAP TO BE WRITTEN BEGINNING HERE..
  2033					..
  2034					LOC+COUNT/ BITMAP QUITS HERE
  2035				DESTROYS: T1,U,W,P1,P3,P4
  2036				!
  2037
  2038	002013'			RFBT0:
  2039	002013'	256200	006403'		UMOVE P1,(M)	;COUNT
  2040	002014'	221600	000044		IMULI P1,^D36
  2041	002015'	540240	000013		HRR U,M		;CONSTRUCT BYTE PTR IN U FOR
  2042	002016'	505240	000100		HRLI U,(POINT 1,0,35)	;DEPOSITING 1 BIT AT A TIME
  2043	002017'	205500	777001		MOVSI W,-777	;W/AOBJN FOR VP 0 THRU 777
  2044	002020'			RFBT0A:
  2045	002020'	361600	002001*		SOJL P1,CPOPJ1	;RAN OUT OF BITMAP SPACE YET?
  2046	002021'	256040	006441'		XCTBU <ILDB T1,U> ;TOUCH USER PAGE. MAY FAULT & SET REFBIT
  2047	002022'	205340	002010*		MOVSI T2,LMPREF
  2048	002023'	616352	001440*		TDNN T2,%UPLMA(W)
  2049	002024'	634300	000006		TDZA T1,T1	;SLOT REFBIT=0, T1:=0
  2050	002025'	201300	000001		MOVEI T1,1	;SLOT BIT=1
  2051	002026'	256040	006442'		XCTBU <DPB T1,U> ; GIVE TO USER, SHOULDNT FAULT
  2052	002027'	253500	002020'		AOBJN W,RFBT0A	;CONTINUE UNTIL PG 777 DONE
  2053	002030'	254000	002020*		JRST CPOPJ1
  2054
  2055				COMMENT ! ROUTINE RFBT1 - FUNC 1 SET REFBITS FROM BITMAP
  2056				RUNCTION: READ A BITMAP LIKE DESCRIBED ABOVE & SET REFBITS
  2057					FOR PAGES 0 TO 777. IF BITMAP RUNS OUT SOONER,
  2058					CLEAR REFBITS FOR PAGES FROM THERE TO 777.
  2059				EXPECTS: M/LOC, LOC THRU LOC+COUNT AS ABOVE
  2060				DESTROYS: T1,T2,U,W,P1,P3,P4
  2061				!
  2062
  2063	002031'			RFBT1:
  2064	002031'	256200	006403'		UMOVE P1,(M)	;COUNT
  2065	002032'	221600	000044		IMULI P1,^D36
  2066	002033'	201240	000001		MOVEI U,1	;TRAVELLING BIT, CYCLES AROUND U
  2067	002034'	205500	777001		MOVSI W,-777	;W/ AOBJN FOR VP 0 TO 777
  2068	002035'			RFBT1A:
  2069	002035'	602240	000001		TRNE U,1	;TIME TO ADVANCE (M)? DO BEFORE ROT BIT TO SIGN POSN
  2070	002036'	541553	000001		HRRI M,1(M)
  2071	002037'	241240	777777		ROT U,-1	;CYCLE BIT AROUND
  2072	002040'	361600	002042'		SOJL P1,RFBT1B	;BITMAP RAN OUT, FORCE REFBIT_0
  2073	002041'	256200	006443'		XCTBU <TDNN U,(M)>	;SKIP IF USER BITMAP=1 THIS PAGE
  2074								;MAY FAULT & SET REFBIT.
  2075	002042'	634340	000007	RFBT1B:	TDZA T2,T2	;USER BIT WAS 0,T2_0 AND SKIP
  2076	002043'	201340	000001		MOVEI T2,1
  2077	002044'	260040	002002'		PUSHJ P,REFBC	;TAKE T2,CLOB T1,P3,P4
  2078	002045'	253500	002035'		AOBJN W,RFBT1A
  2079	002046'	254000	002030*		JRST CPOPJ1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 39
CORE1.MAC	28-OCT-87 17:05		VPROT UUO

  2080				SUBTTL VPROT UUO
  2081
  2082				EXTERNAL FD2FNO,FD2WLK,FD2WL1,SRDUPX,SWRUPX,UPTOFD
  2083				COMMENT ! ENTRY UPROT -- COME HERE FROM UUOCON DISPATCH
  2084				EXPECTS: T1/<OTFFLG>B1+<PROT>B7+<COUNT>B17+<START VP>
  2085					M/ USER AC#	J/JOB
  2086				FUNCTION: CALL KERNEL VIA DOUUO INTERFACE WHICH
  2087					SAVES M IN PDL AND SETS <USER> PROPERLY
  2088					IN 1B0 OF T1.
  2089					WILL NOT TRY TO GET UPX IF OWN CONTEXT PAGES, SO UPX ROUTINES
  2090					CAN DO VPROT UUOS.
  2091				!
  2092
  2093	002047'			UPROT::
  2094	002047'	265440	001566'		JSP T4,DOUUO	;CALL KERNEL, FOLLOWS DIRECTLY
  2095	002050'	200640	000006		MOVE	P2,T1	;GET OTF FLAG IN SAFE PLACE.
  2096	002051'	607640	000320*		TLNN	P2,OTFFLG	;WANTS "OTHER" PAGES?
  2097	002052'	254000	002065'		JRST	UPROT1		;NO, GO LOCK UPT.
  2098	002053'	200740	000000*		MOVE	P4,%UPT+UPTOFD	;GET FRAME DESCRIPTOR IN P4
  2099	002054'	260040	000000*		PUSHJ	P,FD2FNO	;GET OTHER FRAME'S IDENTITY
  2100					  JRST	[MOVS T1,P2	;VP,,?
  2101						 HRRI T1,PTOFF%
  2102						 DPB P3,FDEERP<T1> ;PUT SUB ERROR CODE IN
  2103	002055'	254000	006444'			 POPJ P,]
  2104	002056'	316100	000000*		CAMN	J,%UPT+UPTJOB	;IF OTHER IS SAME AS US,
  2105	002057'	254000	002064'		JRST	UPROT2		;GO TURN OFF OTFFLG IN P2 AND USE UPT
  2106	002060'	201700	000045		MOVEI	P3,.ARCHM	;NEED CHANGE MAP ACCESS TO DO VPROT
  2107	002061'	260040	000000*		PUSHJ	P,FD2WL1	;DO ACCESS CHECKING, SETUP J, LOCK %UPX
  2108					  JRST	[MOVS T1,P2
  2109						 HRRI T1,PTOFF%
  2110						 DPB P3,FDEERP<T1> ;PUT SUB ERROR CODE IN.
  2111	002062'	254000	006444'			 POPJ P,] ;ERROR RETURN.
  2112	002063'	254000	002067'		JRST	UPROT3
  2113	002064'	621640	002051*	UPROT2:	TLZ	P2,OTFFLG	;USING UPT INSTEAD.
  2114	002065'	260040	002360'	UPROT1:	PUSHJ	P,WLKUPT	;GET UPT WRITE LOCKED
  2115	002066'	256000	000000'		 STOPCD 		;ALWAYS CAN GET OUR OWN.
  2116	002067'	200300	000015	UPROT3:	MOVE	T1,P2		;GET ARG BACK INTO T1
  2117	002070'	260040	002101'		PUSHJ	P,KVPROT	;CALL THE KERNEL
  2118	002071'	334000	000000		  SKIPA			;ERROR RETURN
  2119	002072'	350001	000000		AOS	(P)		;INDICATE SUCCESS TO CALLER
  2120	002073'	261040	000006		PUSH	P,T1		;SAVE POSSIBLE ERROR CODE
  2121	002074'	607640	002064*		TLNN	P2,OTFFLG	;IF HAVE UPX LOCK,
  2122					JRST	[PUSHJ P,UNWUPT
  2123	002075'	254000	006450'			 JRST TPOPJ]	;DON'T, RELEASE UPT LOCK
  2124	002076'	260040	002540'		PUSHJ	P,ULDUPX	;THEN RELEASE WRITE LOCK AND LOCKDOWN.
  2125	002077'	262040	000006		POP	P,T1		;IN CASE WE'RE GIVING ERROR RETURN
  2126	002100'	263040	000000		POPJ	P,		;BYE.
  2127
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 40
CORE1.MAC	28-OCT-87 17:05		VPROT UUO

  2128				COMMENT ! ROUTINE VPROT - KERNEL
  2129				FUNCTION: SET <PROT> ON <COUNT> PAGES BEGINNING
  2130					AT <START VP>. ON ERROR RETURN, VP#,,ERROR CODE RETURNED
  2131					IN AC.
  2132
  2133				EXPECTS: T1/<USER>B0+<OTFFLG>B1+<PROT>B7+<COUNT>B17+VP#
  2134					%UPT OR %UPX HAS PROPER CONTEXT PAGES WRITE LOCKED,
  2135					OTFFLG SET IF IN %UPX, ELSE IN %UPT.
  2136				DESTROYS: W,F,T1-T4,P1,P3-P4
  2137				RESTRICTIONS: MONITOR CALLERS WISHING TO PUSHJ TO VPROT
  2138					SHOULD SET <USER>B0 IN T1 IF USER RESTRICTIONS
  2139					DESIRED ON VP RANGE. THIS ROUTINE
  2140					DOES NOT WRITE ON USER SPACE.
  2141				!
  2142
  2143
  2144				;BITS
  2145
  2146			002000		XP PT.PRT,(1B7)		;LAST BIT OF PROTECTION FIELD.
  2147			000001		XP PT.CNT,(1B17)	;LAST BIT OF COUNT FIELD.
  2148
  2149				;ERROR CODES
  2150
  2151					ERRCOD(0,PTBCN%,PTEBCN)	;BAD COUNT
  2152					ERRCOD(1,PTBVP%,PTEBVP)	;BAD VP NUMBER
  2153					ERRCOD(2,PTBPR%,PTEBPR)	;BAD PROTECTION CODE
  2154					ERRCOD(3,ZZ,ZZ)		;(VP ALREADY EXISTS)
  2155					ERRCOD(4,PTNVP%,PTENVP)	;VP DOES NOT EXIST, HAS TO.
  2156					ERRCOD(5,PTPRF%,PTEPRF)	;PROTECTION FAILURE
  2157					ERRCOD(6,ZZ,ZZ)		;UNUSED.
  2158					ERRCOD(7,PTOFF%,PTEOFF)	;"OTHER FRAME" FAILURE, SUBCODE IN 0-5.
  2159
  2160
  2161	002101'	603300	400000	KVPROT::TLNE	T1,FL.USR	;KEEP <USER> IN SIGN BIT OF F,
  2162	002102'	665200	400000		  TLOA	F,FL.USR	;SEE VPCHK ROUTINE
  2163	002103'	621200	400000		  TLZ	F,FL.USR
  2164	002104'	607300	002074*		TLNN	T1,OTFFLG	;NEEDS OTHER CONTEXT?
  2165	002105'	625200	002104*		  TLZA	F,OTFFLG	;YES, PUT THE BIT IN F
  2166	002106'	661200	002105*		  TLO	F,OTFFLG
  2167	002107'	550500	000006		HRRZ	W,T1		;W/VP#
  2168	002110'	135600	000170*		LDB	P1,UUYCPR	;GET PROTECTION WANTED IN P1
  2169	002111'	332000	000014		SKIPE	P1
  2170	002112'	303600	000172*		CAILE	P1,MAXCPR
  2171	002113'	254000	001553'		  JRST	PTEBPR		;BAD PROT
  2172	002114'	135300	000175*		LDB	T1,UUYCTG	;GET COUNT IN T1.
  2173	002115'	322300	001551'		JUMPE	T1,PTEBCN	;COUNT 0 ILLEGAL
  2174	002116'	213000	000006		MOVNS	T1
  2175	002117'	504500	000006		HRL	W,T1	;W/-COUNT,,VP#
  2176
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 41
CORE1.MAC	28-OCT-87 17:05		VPROT UUO

  2177	002120'			VPROT1:	;AOBJN LOOP ON W.  P1/PROT; P3,P4/LMAP SLOT DATA;
  2178					;IF PAGE NON-EXISTENT,ERROR;
  2179					; IF REQUESTED PROT SAME
  2180					;AS OLD PROT, NEXT PAGE. IF MAX-WRITE OFF BUT WANTS
  2181					;RDW PROT, ERROR 4; SET PROT. CLEAR PGE.W &SET A.M. FLAG
  2182					;IF VP ACTIVE. RETURN DATA TO LMAP SLOT;
  2183					;(CLEARING PGE.W BECAUSE MAY BE SETTING NON-RDW
  2184					;PROT ON PREVIOUSLY-RDW PAGE, OR MAY BE SETTING RDW
  2185					;ON PAGE WHICH IS STILL CLEAN.)
  2186
  2187	002120'	265440	002647'		JSP	T4,VPCHK
  2188	002121'	324740	001552'		  PJRST	PTEBVP		;GIVE BVP ERR CODE AND RETURN ERROR.
  2189	002122'	603200	002106*		TLNE	F,OTFFLG
  2190					  JRST	[PUSHJ  P,GETLMX
  2191	002123'	254000	006452'			 JRST   .+2]
  2192	002124'	260040	004623'		PUSHJ	P,GETLMA
  2193	002125'	607700	002003*		TLNN	P3,LMMEXS
  2194	002126'	324740	001555'		  PJRST	PTENVP		;BAD VIRTUAL PAGE ERROR.
  2195	002127'	135300	001635*		LDB	T1,LM3CUR
  2196	002130'	312300	000014		CAME	T1,P1
  2197	002131'	254000	002135'		  JRST	VPROT5		;CHANGING THE PROT
  2198	002132'	375000	000000*		SOSGE	%UPT+UPTLDC	;NOT CHANGING, THROW AWAY SLOT DATA
  2199	002133'	256000	000000'		 STOPCD
  2200	002134'	254000	002147'		JRST	VPROT3		;DO NEXT PAGE
  2201
  2202	002135'	607700	001631*	VPROT5:	TLNN	P3,LMPMXW
  2203	002136'	302600	000003		  CAIE	P1,CPRRDW
  2204	002137'	254000	002141'		  JRST	.+2
  2205	002140'	254000	002151'		  JRST	VPROT4
  2206	002141'	137600	002127*		DPB	P1,LM3CUR	;DEPOSIT PROT IN P3
  2207	002142'	603700	001334*		TLNE	P3,LMPACT	;IF ACTIVE,
  2208	002143'	620740	100000		TRZ	P4,PGE.W	;RESET PGE.W AND
  2209	002144'	603200	002122*		TLNE	F,OTFFLG
  2210					  JRST	[PUSHJ  P,STOLMX
  2211	002145'	254000	006454'			 JRST   .+2]
  2212	002146'	260040	004672'		PUSHJ	P,STOLMA
  2213	002147'	253500	002120'	VPROT3:	AOBJN	W,VPROT1
  2214	002150'	254000	002046*		JRST	CPOPJ1
  2215
  2216	002151'	375000	000000*	VPROT4:	SOSGE	%UPT+UPTLDC	;THROW AWAY LMAP DATA
  2217	002152'	256000	000000'		 STOPCD
  2218	002153'	324740	001556'		PJRST	PTEPRF		;SETUP PROT FAILURE ERR CODE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 42
CORE1.MAC	28-OCT-87 17:05		TRAP INFORMATION UUOS

  2219				SUBTTL TRAP INFORMATION UUOS
  2220
  2221				;UUOS TO READ AND CLEAR PAGE FAIL STATUS, PAGE ERROR STATUS.
  2222				; CALL FOR THIS CLASS OF UUOS:
  2223				;
  2224				;	MOVE	AC,[-COUNT,,ADDR]
  2225				;	PGFSTS	AC,		;OR PGRSTS, PERSTS, PILSTS
  2226				;	  <ERROR RETURN>
  2227				;	<SUCCESS RETURN>
  2228				;
  2229				;CURRENTLY, TWO LOCATIONS CAN BE RETURNED.
  2230			000000		XP .PFUWD,0		;USER INFORMATION WORD
  2231			000001		XP .PFXWD,1		;EXEC INFORMATION WORD
  2232
  2233				;THE USER WORD IS ALWAYS USED JUST PRIOR TO GIVING THE USER
  2234				; A TRAP WE KNOW HE CAN TAKE IMMEDIATELY WHEN THE
  2235				; RELEVANT CONDITION OCCURS. THE EXEC WORD IS ALWAYS USED
  2236				; IF THE RELEVANT CONDITION OCCURS BUT THE USER CANNOT
  2237				; BE GIVEN A TRAP FOR SOME REASON (INCLUDING NOT
  2238				; ENABLED). THE EXEC INFORMATION WORD IS ALWAYS THE MOST
  2239				; RECENT INFORMATION STORED.
  2240
  2241				;FORMAT OF THE TWO WORDS IS IDENTICAL. RH CONTAINS PAGE NUMBER.
  2242				; LH CONTAINS BITS.
  2243
  2244				;BITS FOR PGFSTS:
  2245
  2246			400000		XP FI.VAL,(1B0)	;FOR QUICK CHECKING, MEANS VALID INFO (MAKES IT NON-ZERO)
  2247			200000		XP FI.SAL,(1B1)	;SIZE AT LEAST LIMIT
  2248
  2249				;BITS IN LH FOR PERSTS:
  2250
  2251			400000		XP EI.VAL,(1B0)  ;MEANS IT MEANS SOMETHING.
  2252			000010		XP EI.PAR,(1B14) ;PARITY ERROR ON DIRTY PAGE.
  2253			000004		XP EI.OER,(1B15) ;OUTPUT ERROR HAS OCCURED.
  2254			000002		XP EI.DER,(1B16) ;DEVICE ERROR
  2255			000001		XP EI.DTE,(1B17) ;DATA ERROR
  2256
  2257				;FORMAT OF PGISTS WORDS IS ADDRESS IN LEFT HALF, SOFT PAGE FAIL
  2258				; WORD BITS IN RH (SEE S.MAC, SPFW.? DEFINITIONS).
  2259
  2260				;FORMAT OF PGRSTS: RH CONTAINS ADDRESS (NOT PAGE NUMBER) AND
  2261				; LH CONTAINS FOLLOWING BITS:
  2262
  2263			400000		XP	RI.VAL,(1B0)	;JUST VALID BIT, NO OTHERS NEEDED
  2264
  2265				;ERROR CODES FOR THIS CLASS OF UUOS
  2266
  2267				ERRCOD(0,FIBCN%,PGSBCN)	;BAD COUNT.
  2268
  2269
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 43
CORE1.MAC	28-OCT-87 17:05		TRAP INFORMATION UUOS

  2270	002154'	201600	000000*	UPISTS::MOVEI	P1,%UPT+UPTUII
  2271	002155'	254000	002162'		JRST	UPPSTS
  2272	002156'	201600	000000*	UPRSTS::MOVEI	P1,%UPT+UPTURI
  2273	002157'	254000	002162'		JRST	UPPSTS
  2274	002160'	334600	006456'	UPESTS::SKIPA	P1,[%UPT+UPTUEI]	;ADDRESS OF TWO WORD VECTOR.
  2275	002161'	201600	000000*	UPFSTS::MOVEI	P1,%UPT+UPTUFI		;DITTO.
  2276	002162'	400500	000000	UPPSTS:	SETZ	W,		;SO ERROR CODE WORKS RIGHT
  2277	002163'	325300	002174'		JUMPGE	T1,UPFSTE	;BAD COUNT IF POSITIVE.
  2278	002164'	400340	000000		SETZ	T2,		;READ AND CLEAR
  2279	002165'	250354	000000		EXCH	T2,.PFUWD(P1)	;GET USER INFO WORD
  2280	002166'	256200	006457'		UMOVEM	T2,(T1)		;GIVE IT TO USER.
  2281	002167'	252300	002150*		AOBJP	T1,CPOPJ1	;JUMP IF DONE, ELSE NEXT LOC.
  2282	002170'	400340	000000		SETZ	T2,
  2283	002171'	250354	000001		EXCH	T2,.PFXWD(P1)	;GET AND CLEAR EXEC INFO WORD
  2284	002172'	256200	006457'		UMOVEM	T2,(T1)		;GIVE TO USER.
  2285	002173'	252300	002167*		AOBJP	T1,CPOPJ1	;JUMP IF COUNT NOT TOO BIG.
  2286
  2287	002174'	201300	000000	UPFSTE:	MOVEI	T1,FIBCN%	;GIVE THIS ERROR CODE
  2288	002175'	256200	006326'		UMOVEM	T1,(M)		;BACK INTO USER AC
  2289	002176'	263040	000000		POPJ	P,		;AND GIVE HIM ERROR RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 44
CORE1.MAC	28-OCT-87 17:05		TRAP INFORMATION UUOS

  2290				;UUO TO SET/CLEAR THE IGNORE ERROR BITS ON VIRTUAL PAGES.
  2291				;
  2292				;CALL:
  2293				;
  2294				;	MOVE	AC,[PE.NER+<COUNT>B17,,START PAGE]
  2295				;	PERSET	AC,
  2296				;	  <ERROR RETURN>
  2297				;	<SUCCESS RETURN>
  2298				;BITS:
  2299				;
  2300					XP PE.NER,(1B7)		;SAYS SET THE IGNORE ERROR BIT. IF OFF, CLEAR THE IGNORE BITS.
  2301			002000
  2302
  2303				; ERROR CODES:
  2304
  2305				ERRCOD(0,PEBCN%,PERBCN)		;BAD COUNT
  2306				ERRCOD(1,PEBVP%,PERBVP)		;BAD VP ARG
  2307				ERRCOD(2,ZZ,ZZ)			;UNUSED
  2308				ERRCOD(3,ZZ,ZZ)			;UNUSED
  2309				ERRCOD(4,PENVP%,PERNVP)		;VP DOESN'T EXIST AND SHOULD
  2310
  2311	002177'	265440	001566'	UPESET::JSP	T4,DOUUO	;SETUP THINGS
  2312	002200'	603300	400000		TLNE	T1,FL.USR	;USER FLAG ON?
  2313	002201'	665200	400000		  TLOA	F,FL.USR	;YES
  2314	002202'	621200	400000		  TLZ	F,FL.USR	;NO
  2315	002203'	135340	006406'		LDB	T2,[POINT 10,T1,17] ;GET COUNT
  2316	002204'	525507	777777		HRLOI	W,-1(T2)	;GET COUNT-1,,-1 IN W
  2317	002205'	445506	000000		EQVI	W,(T1)		;GET PAGE NUMBER IN RH, -COUNT IN LH
  2318	002206'	322340	001551'		JUMPE	T2,PERBCN	;BAD COUNT, GIVE ERROR RETURN IF 0
  2319	002207'	200600	006460'		MOVE	P1,[PUSHJ P,PERSE2]	;ASSUME CLEAR
  2320	002210'	603300	002000		TLNE	T1,PE.NER	;WANTS THEM SET?
  2321	002211'	200600	006461'		  MOVE	P1,[IORM P3,%UPLMA(W)] ;YES, THIS WILL DO IT.
  2322	002212'	205700	001633*		MOVSI	P3,LMPNER	;THE BIT TO DO.
  2323	002213'	205640	002125*		MOVSI	P2,LMMEXS	;FOR QUICK CHECKING.
  2324
  2325	002214'	265440	002647'	PERSE1:	JSP	T4,VPCHK	;THIS PAGE OK?
  2326	002215'	254000	001552'		  JRST	PERBVP		;NO, GIVE ERROR
  2327	002216'	616652	002023*		TDNN	P2,%UPLMA(W)	;EXISTS?
  2328	002217'	254000	001555'		  JRST	PERNVP		;NO, TELL HIM ABOUT IT.
  2329	002220'	256000	000014		XCT	P1		;OK, SET OR CLEAR THE BIT
  2330	002221'	253500	002214'		AOBJN	W,PERSE1	;AND DO NEXT VP
  2331	002222'	254000	002173*		JRST	CPOPJ1		;DONE, GIVE GOOD RETURN.
  2332
  2333				;HERE TO CLEAR IGNORE ERROR BIT. CLEAR "A" BIT SO NEXT REF WILL
  2334				; FAULT, DISCOVERING THE ERROR, IF ANY.
  2335
  2336	002223'	260040	004623'	PERSE2:	PUSHJ	P,GETLMA	;ALREADY KNOW IT EXISTS
  2337	002224'	621700	002212*		TLZ	P3,LMPNER	;CLEAR THE BIT
  2338	002225'	603700	000452*		TLNE	P3,LMMERR	;ANY ERRORS ON SLOT?
  2339	002226'	620740	600000		  TRZ	P4,PGE.A!PGE.P	;YES, GIVE TRAP OR ERROR MSG NEXT TIME.
  2340	002227'	260040	004672'		PUSHJ	P,STOLMA	;PUT NEW DATA BACK
  2341	002230'	205700	002224*		MOVSI	P3,LMPNER	;RESTORE THIS
  2342	002231'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 45
CORE1.MAC	28-OCT-87 17:05		UUO TO RETURN VP'S DISK POINTER

  2343				SUBTTL UUO TO RETURN VP'S DISK POINTER
  2344
  2345				;UUO USED BY DSKCLN TO FIND OUT WHOSE FILE PAGES HAVE BEEN
  2346				; WIPED OUT BY ALLOCATING CORE TO RUN DSKCLN'S CORE IMAGE,
  2347				; USED BY SIMIO TO ALLOW UPDATING OF I/O STATISTICS.
  2348				;
  2349				;REQUIRES RA OR EXEC MODE CALLER.
  2350				;
  2351				;CALL:
  2352				;
  2353				;	MOVEI	AC,VP#
  2354				;	VDSKPT	AC,
  2355				;	  <ERROR RETURN>
  2356				;	<NORMAL RETURN>		;RETRIEVAL POINTER RETURNED IN AC.
  2357				;
  2358				;FORMAT OF RETRIEVAL POINTER SAME AS THAT FOUND IN RIBS AND THROUGHOUT
  2359				; THE SYSTEM.
  2360				;
  2361				;ERRORS:
  2362
  2363				ERRCOD(0,ZZ,ZZ)			;UNUSED
  2364				ERRCOD(1,VDBVP%,VDEBVP)		;BAD VP NUMBER
  2365				ERRCOD(2,ZZ,ZZ)			;UNUSED
  2366				ERRCOD(3,ZZ,ZZ)			;UNUSED
  2367				ERRCOD(4,VDNVP%,VDENVP)		;VP DOES NOT EXIST, SHOULD
  2368				ERRCOD(5,VDNEL%,VDENEL)		;NOT ENOUGH LICENSE
  2369
  2370	002232'	265440	001566'	UVDSKP::JSP	T4,DOUUO	;SETUP T1, STACK
  2371				KVDSKP:	JUMPGE	T1,[TLZ F,FL.USR ;IF EXEC MODE CALLED, CLEAR FLAG
  2372	002233'	325300	006462'			    JRST KVDSK1];AND HE'S OK
  2373	002234'	661200	400000		TLO	F,FL.USR	;NOT EXEC CALLER, HAS TO HAVE RA
  2374	002235'	135340	000000*		LDB	T2,JBYRPT	;GET PROCESS READ LICENSE
  2375	002236'	302340	000003		CAIE	T2,3		;IF HAS RA, OK
  2376	002237'	254000	001556'		JRST	VDENEL		;USER MODE AND NO LICENSE, BOMB OUT
  2377
  2378	002240'	550500	000006	KVDSK1:	HRRZ	W,T1		;OK, GET VP IN W
  2379	002241'	265440	002647'		JSP	T4,VPCHK	;IN RANGE?
  2380	002242'	254000	001552'		  JRST	VDEBVP		;NO, THIS CALLER CAN'T SAY THAT PAGE.
  2381	002243'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP DATA IN P3 AND P4
  2382	002244'	607700	002213*		TLNN	P3,LMMEXS	;MUST EXIST
  2383	002245'	254000	001555'		  JRST	VDENVP		;DOES NOT
  2384	002246'	260040	004744'		PUSHJ	P,GETDPA	;OK, GET DISK POINTER IN T2
  2385	002247'	375000	000000*		SOSGE	%UPT+UPTLDC	;THROW AWAY LMAP DATA NOW
  2386	002250'	256000	000000'		 STOPCD 		;UNDERFLOW
  2387	002251'	256200	006464'		UMOVEM	T2,(M)		;RETURN IT TO USER
  2388	002252'	254000	002222*		JRST	CPOPJ1		;OK, RETURN
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 46
CORE1.MAC	28-OCT-87 17:05		BLTPAG UUO

  2389				SUBTTL BLTPAG UUO
  2390
  2391				;THE PURPOSE OF THE BLTPAG UUO IS TO ALLOW A SET OF MODIFICATIONS
  2392				; TO A PAGE TO OCCUR SIMULTANEOUSLY (I.E. NO RESCHEDULE HAPPENS)
  2393				; AND IN SUCH A WAY THAT IF THE SYSTEM CRASHES, THE PAGE EITHER
  2394				; CONTAINS ALL THE CHANGES OR NONE OF THE CHANGES.
  2395
  2396				;CALL IS:
  2397				;	MOVEI	AC,[1ST SOURCE WORD,,1ST DESTINATION WORD
  2398				;		    LAST DESTINATION WORD]
  2399				;	BLTPAG	AC,
  2400				;	  <ERROR>
  2401				;	<SUCCESS>
  2402
  2403				;ALL SOURCE DATA MUST COME FROM ONE VIRTUAL PAGE, AND ALL DESTINATION
  2404				; LOCATIONS MUST BE IN THE SAME PAGE, OR AN ERROR RETURN IS GIVEN.
  2405
  2406				;ERROR CODES:
  2407
  2408					ERRCOD(0,BUCBB%,BUECBB)	;CAN'T BLT BACKWARDS (LAST DEST LESS THAN OR EQUAL TO F
  2409				IRST DEST ADDR)
  2410					ERRCOD(1,BUNWP%,BUENWP)	;SOURCE OR DESTINATION DATA NOT WITHIN ONE PAGE.
  2411					ERRCOD(2,BUCLP%,BUECLP)	;CAN'T LOCK DESTINATION PAGE (TOO MANY LOCKERS)
  2412
  2413				EXTERNAL PGPDIO,DIOMAX
  2414
  2415	002253'	260040	002260'	BLTPAG::PUSHJ	P,BLTPG0	;DO THE REAL WORK
  2416	002254'	334000	000000		  SKIPA
  2417	002255'	254000	002252*		 JRST	CPOPJ1		;SUCCESS.
  2418	002256'	256200	006465'		XCTTU	<HRRZM T1,(M)>	;STORE ERROR CODE
  2419	002257'	263040	000000		POPJ	P,		;AND GIVE ERROR RETURN.
  2420
  2421				;NOTE CODE BELOW MUST SAVE M FOR STORING ERROR CODE.
  2422
  2423	002260'	256200	006466'	BLTPG0:	UMOVE	P1,(T1)		;1ST SOURCE,,1ST DESTINATION
  2424	002261'	256200	006467'		UMOVE	P2,1(T1)	;LAST DESTINATION ADDRESS
  2425	002262'	307654	000000		CAIG	P2,(P1)		;MAKE SURE LAST DESTINATION ADDRESS IS GREATER
  2426								; THAN FIRST DESTINATION ADDRESS
  2427	002263'	254000	001551'		  JRST	BUECBB		;CAN'T BLT BACKWARDS.
  2428	002264'	550300	000015		HRRZ	T1,P2		;LAST DESTINATION ADDR
  2429	002265'	430300	000014		XOR	T1,P1		;SEE IF PAGE NUMBERS OF DESTINATION 1ST AND LAST MATCH
  2430	002266'	602300	777000		TRNE	T1,777000	;SKIP IF SAME PAGE
  2431	002267'	254000	001552'		  JRST	BUENWP		;NOT IN SAME PAGE.
  2432	002270'	200700	000015		MOVE	P3,P2		;COMPUTE TRANSFER COUNT
  2433	002271'	275714	000000		SUBI	P3,(P1)		;GET COUNT-1
  2434	002272'	554300	000014		HLRZ	T1,P1		;GET FIRST SOURCE ADDR
  2435	002273'	270300	000016		ADD	T1,P3		;COMPUTE END SOURCE ADDR
  2436	002274'	651300	000014		TSC	T1,P1		;DO XOR OF RH(T1) AND LH(P1) IN RH(T1)
  2437	002275'	602300	777000		TRNE	T1,777000	;SKIP IF SAME PAGE NUMBER.
  2438	002276'	254000	001552'		  JRST	BUENWP		;SOURCE NOT WITHIN ONE PAGE
  2439
  2440				;NOW LOCK DESTINATION PAGE IN CORE, AND LOOP TILL GET SOURCE
  2441				; PAGE IN CORE WITH DESTINATION PAGE NO I/O IN PROGRESS.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 46-2
CORE1.MAC	28-OCT-87 17:05		BLTPAG UUO

  2442				; THEN COPY AND RETURN.
  2443
  2444	002277'	550500	000015	BLTUU1:	HRRZ	W,P2		;GET VIRTUAL PAGE NUMBER
  2445	002300'	242500	777767		LSH	W,-^D9		;
  2446	002301'	256200	006470'		XCTFU	<MOVES (P2)>	;DRAG IT INTO CORE, WRITE ON IT SO
  2447								; IT GETS CONVERTED IF ITS COW
  2448	002302'	260040	004626'		PUSHJ	P,REDLMA	;READ LMAP SLOT.
  2449	002303'	260040	005017'		PUSHJ	P,GETCPA	;GET CP NUMBER IN PG
  2450	002304'	135300	001167*		LDB	T1,PGYDIO	;GET DIO COUNT
  2451	002305'	301300	000000*		CAIL	T1,DIOMAX	;MAKE SURE ITS NOT TOO HIGH
  2452	002306'	254000	001553'		  JRST	BUECLP		;CAN'T LOCK PAGE
  2453	002307'	205300	000000*		MOVSI	T1,PGPDIO	;INCREMENT DIO COUNT, LOCKS IT IN CORE
  2454	002310'	272320	002304*		ADDM	T1,@PGYDIO
  2455	002311'	201300	002323'		MOVEI	T1,BLTULP	;IN CASE WE GET I/O ERROR OR SOMETHING,
  2456	002312'	202302	000000*		MOVEM	T1,JBTABT(J)	;SETUP JBTABT TO DECREMENT DIO FOR C(PG)
  2457
  2458	002313'	554340	000014	BLTUU2:	HLRZ	T2,P1		;GET SOURCE ADDRESS
  2459	002314'	256200	006471'		XCTFU	<MOVE T1,(T2)>	;MAKE SURE ITS IN CORE SO NO RESCHEDULE
  2460								; (OTHERWISE SOMEONE COULD START DEST OUT)
  2461	002315'	135300	001246*		LDB	T1,PGYSOP	;DEST PAGE GOING OUT NOW?
  2462	002316'	322300	002321'		JUMPE	T1,BLTUU3	;NO, CAN COPY NOW.
  2463	002317'	260040	005524'		PUSHJ	P,PAGWAT	;YES, MUST WAIT FOR CURRENT I/O TO CEASE
  2464	002320'	254000	002313'		JRST	BLTUU2		;AND TRY AGAIN.
  2465
  2466	002321'	256240	006472'	BLTUU3:	XCTBU	<BLT P1,(P2)>	;DO THE LONG AWAITED BLT
  2467	002322'	354001	000000		AOSA	(P)		;GIVE GOOD RETURN AND FALL INTO BLTULP+1
  2468
  2469				;HERE FROM JBTABT OR SUCCESSFUL END OF BLTPAG UUO TO UNLOCK DESTINATION
  2470
  2471	002323'	256200	006473'	BLTULP:	UMOVE	PG,PG		;GET BACK CP TO UNLOCK
  2472	002324'	700600	000400		WRPI	LI.PIF		;MAKE SURE NO ONE CHANGES
  2473	002325'	135300	002310*		LDB	T1,PGYDIO	;GET COUNT
  2474	002326'	375000	000006		SOSGE	T1
  2475	002327'	256000	000000'		 STOPCD 		;ITS BAD
  2476	002330'	137300	002325*		DPB	T1,PGYDIO	;OK, STORE IT BACK
  2477	002331'	700600	000200		WRPI	LI.PIN
  2478	002332'	402002	002312*		SETZM	JBTABT(J)	;OK TO CLEAR THIS NOW.
  2479	002333'	336000	000006		SKIPN	T1		;WAKE JOBS WAITING ON
  2480	002334'	260040	000000*		PUSHJ	P,PAGWAK	; DIO UP
  2481	002335'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 47
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2482				SUBTTL %UPX HANDLERS
  2483				COMMENT ;@@SUBROUTINE OTFSET
  2484				@@PURPOSE ROUTINE FOR SETOTF UUO.
  2485				@@ENTRY T1 CONTAINS USER'S AC (FRAME DESCRIPTOR)
  2486				@@ACCUM ALL ACS USED (UUO ROUTINE)
  2487				@@EXIT LEAVES THE DESCRIPTOR IN %UPT+UPTOFD
  2488				@@;
  2489
  2490	002336'	200340	000006	OTFSET::MOVE	T2,T1		;GET COPY
  2491	002337'	405340	700000		ANDI	T2,700000	;JUST DESCRIPTOR TYPE
  2492	002340'	306340	200000		CAIN	T2,.FDOTF	;DO NOT ALLOW ENDLESS LOOPS
  2493	002341'	263040	000000		  POPJ	P,		;BAD.
  2494	002342'	250300	000000*		EXCH	T1,%UPT+UPTOFD	;SET NEW ONE, GET OLD VALUE
  2495	002343'	256200	006326'		UMOVEM	T1,(M)		;PUT OLD VALUE BACK IN USER AC
  2496	002344'	254000	002255*		JRST	CPOPJ1		;AND GIVE SUCCESS RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 49
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2497				COMMENT ;@@SUBROUTINE WLKUPX/WLKUPT
  2498				@@PURPOSE GET FRAME'S CONTEXT PAGES INTO %UPX/%UPT WRITE LOCKED
  2499				@@ENTRY ENTER AT WLKUPX TO WRITE LOCK AND MAP C(J) CONTEXT PAGES IN %UPX.
  2500					ENTER AT WLKUPT TO WRITE LOCK CURRENT JOBS CONTEXT PAGES.
  2501				@@ACCUM T1-T4,PG
  2502				@@EXIT NON-SKIP RETURN IF CANNOT GET PAGES INTO %UPX
  2503					SKIP RETURN IF PAGES IN %UPX/%UPT AND INTERLOCKED.
  2504				@@RESTRICTIONS ENTRY AT WLKUPX ASSUMES PAGES ARE NOT LOCKED DOWN YET.
  2505				IF THEY ARE, LKDUPX WILL GO THRU EXTRA WORK FOR NOTHING, BUT ALL
  2506				ELSE WILL WORK OK.
  2507				@@RESTRICTIONS RESCHEDULES FOR CONTEXT PAGE WRITE INTERLOCK.
  2508				NOTE: MUST NOT RESCHEDULE OUT OF THIS ROUTINE, ELSE INTERLOCK WON'T
  2509				WORK. HENCE, DEPENDS ON PAGE FAULT NOT RESCHEDULING WHEN FAULT FOR WRITE INTO UPX.
  2510				@@FUNCTION IF ENTER AT WLKUPX, GET CONTEXT PAGES LOCKED DOWN FOR C(J). WRITE ENABLE %UPX
  2511				IN ANTICIPATION OF STORING CURRENT FRAME NUMBER INTO %UPX+UPTLKJ
  2512				OR UPDATING %UPX+UPTLKW.
  2513				FOR WLKUPX AND WLKUPT: IF NO ONE OWNS THE LOCK, JUST STORE
  2514				THE CURRENT FRAME'S NUMBER INTO %UPX/%UPT+UPTLKJ. IF SOMEONE OWNS
  2515				THE LOCK, ADD CURRENT FRAME TO END OF CONTEXT PAGE WAIT QUEUE
  2516				FOR THESE CONTEXT PAGES AND GO INTO CW WAIT. ON WAKEUP,
  2517				HAVE THE LOCK, SO STORE CURRENT FRAME NUMBER INTO %UPX/%UPT+UPTLKJ AND
  2518				RETURN.
  2519				@@;
  2520
  2521				EXTERN %UPX,UPTJOB,UPTLKW,UPTLKJ,JBTPGO,WSCHED,CWQ,JBTSTS
  2522
  2523	002345'	200300	000000*	WLKUPX::MOVE	T1,%UPT+UPTJOB	;GET CALLER'S FRAME NUMBER
  2524	002346'	316300	000000*		CAMN	T1,%UPX+UPTLKJ	;IF CALLER ALREADY HAS THE LOCK,
  2525	002347'	316100	000000*		  CAMN	J,%UPX+UPTJOB	;HE IS NOT ALLOWED TO ASK FOR DIFFERENT CONTEXT PAGES
  2526	002350'	254000	002353'		  JRST	WLKUX0		;OK, JUST RE-LOCKING (NESTED CALLS)
  2527	002351'	312300	000000*		CAME	T1,%UPX+UPTJOB	;EXCEPTION IS IF CALLER HAS UPT LOCKED AND
  2528								;IS TRYING TO LOCK SOMETHING ELSE IN UPX.
  2529								; (CASE WHERE HE HAS OWN UPT LOCKED IN UPX AND TRIES TO LOCK SO
  2530				MEONE
  2531								; ELSE IN UPX IS NOT CAUGHT.)
  2532					 STOPCD 			;ALREADY HAD SOMEONE ELSE WRITE LOCKED IN UPX OTHER THA
  2533	002352'	256000	000000'	N SELF.
  2534	002353'	260040	002477'	WLKUX0:	PUSHJ	P,LKDUPX	;LOCKDOWN C(J)'S CONTEXT PAGES FIRST
  2535	002354'	263040	000000		  POPJ	P,		;CAN'T EVEN GET THEM LOCKED DOWN
  2536	002355'	260040	002443'		PUSHJ	P,WENUPX	;WRITE ENABLE %UPX AND GROUP
  2537	002356'	201440	000000*		MOVEI	T4,%UPX		;GO LOCK THE CONTEXT PAGES IN %UPX
  2538	002357'	324740	002361'		PJRST	WLKUPN
  2539
  2540	002360'	201440	000000*	WLKUPT::MOVEI	T4,%UPT		;HERE TO WRITE LOCK THE CONTEXT PAGES IN %UPT (SELF)
  2541	002361'	200340	000000*	WLKUPN:	MOVE	T2,%UPT+UPTJOB	;GET CURRENT FRAME NUMBER IN T2
  2542	002362'	336411	000000*		SKIPN	T3,UPTLKJ(T4)	;SKIP IF CANNOT HAVE LOCK YET
  2543	002363'	254000	002404'		JRST	WLKUP2		;CAN HAVE IT.
  2544	002364'	316340	000010		CAMN	T2,T3		;HAVE IT FROM PREVIOUS LEVEL?
  2545	002365'	254000	002404'		  JRST	WLKUP2		;YES, GO INCREMENT COUNT.
  2546	002366'	204311	000000*		MOVS	T1,UPTLKW(T4)	;FIRST,,OLD LAST
  2547	002367'	322300	002375'		JUMPE	T1,WLKUP1	;JUMP IF NO ONE ON THE LIST.
  2548								; (USUAL CASE, WE HOPE)
  2549								;(CURRENT FRAME NUMBER STILL IN T2)
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 49-2
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2550	002370'	542346	000000*		HRRM	T2,JBTPGO(T1)	;OLD LAST POINTS TO NEW LAST
  2551	002371'	513007	002370*		HLLZS	JBTPGO(T2)	;NEW LAST INDICATES END WITH 0.
  2552	002372'	540300	000007		HRR	T1,T2		;NEW LAST,,FIRST
  2553	002373'	206311	002366*		MOVSM	T1,UPTLKW(T4)	;STORE NEW LAST,,FIRST HERE.
  2554	002374'	254000	002400'		JRST	WLKUWT		;GO WAIT FOR LOCKER BEFORE US TO WAKE US UP.
  2555
  2556	002375'	504340	000007	WLKUP1:	HRL	T2,T2		;US,,US
  2557	002376'	202351	002373*		MOVEM	T2,UPTLKW(T4)
  2558	002377'	513007	002371*		HLLZS	JBTPGO(T2)	;NO ONE IS AFTER US YET.
  2559
  2560				;HERE WITH C(T2) EQUAL TO CURRENT FRAME NUMBER.
  2561
  2562	002400'	201300	000000*	WLKUWT:	MOVEI	T1,CWQ		;CONTEXT PAGE WAIT QUEUE
  2563	002401'	137300	006474'		DPB	T1,[POINT JWSIZ,JBTSTS(T2),JWPOS]
  2564	002402'	350001	000000		AOS	(P)		;WE WILL GET IT
  2565	002403'	324740	000265*		PJRST	WSCHED		;RETURN WITH THE LOCK. UNWUP? WILL SET UPTLKJ AND UPTLKW.
  2566
  2567				;HERE WITH THE CONTEXT PAGE WRITE LOCK.
  2568
  2569	002404'	350011	000000*	WLKUP2:	AOS	UPTLKC(T4)	;INCREMENT # TIMES WE LOCKED
  2570	002405'	552351	002362*		HRRZM	T2,UPTLKJ(T4)	;REMEMBER THAT WE ARE OWNER OF WRITE LOCK.
  2571	002406'	254000	002344*		JRST	CPOPJ1		;OK TO WRITE IN THEM NOW.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 50
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2572				COMMENT ;@@SUBROUTINE UNWUPX/UNWUPT
  2573				@@PURPOSE RELEASE WRITE LOCK FOR CONTEXT PAGES (IN UPT OR UPX).
  2574				@@ENTRY ENTER AT UNWUPX TO RELEASE LOCK ON %UPX CONTEXT PAGES.
  2575					ENTER AT UNWUPT TO RELEASE LOCK FOR %UPT CONTEXT PAGES.
  2576				CURRENT FRAME MUST HAVE CONTEXT PAGES WRITE LOCKED.
  2577					ENTER AT UNIUPT TO RELEASE LOCK FOR %UPT CONTEXT PAGES AND
  2578					  JUST RETURN IF LOCK NOT HELD BY CURRENT FRAME.
  2579				@@ACCUM T1-T4
  2580				@@EXIT UNWUPX: CURRENT FRAME HAS %UPX LOCKED DOWN
  2581					UNWUPT, UNIUPT: WRITE LOCK ON CURRENT CONTEXT PAGES RELEASED.
  2582				@@FUNCTION CRASH IF CALLING FRAME DOESN'T OWN THE WRITE LOCK FOR
  2583				CONTEXT PAGES (IF NOT UNIUPT).  IF NO WAITERS FOR LOCK, JUST CLEAR UPTLKJ
  2584				AND RETURN. IF WAITERS, WAKE NEXT ONE UP.
  2585				IF NEXT FRAME TO GET LOCK GETS CONTEXT PAGE SWAP ERROR ON THE WAY IN,
  2586				THE SWAP ERROR RECOVERY CODE WILL WAKE NEXT
  2587				@@;
  2588
  2589				EXTERNAL REQUE,PJBSTS,RNQ
  2590
  2591	002407'	200300	000000*	UNIUPT::MOVE	T1,%UPT+UPTJOB
  2592	002410'	312300	000000*		CAME	T1,%UPT+UPTLKJ	;DOES CALLER HAVE LOCK?
  2593	002411'	263040	000000		  POPJ	P,		;NO, JUST RETURN
  2594	002412'	334400	006475'	UNWUPT::SKIPA	T3,[%UPT]
  2595	002413'	201400	002356*	UNWUPX::MOVEI	T3,%UPX		;INDEX BY T3
  2596	002414'	400300	000000		SETZ	T1,		;MAKE SURE WE HAD IT, CLEAR IT
  2597	002415'	250310	002405*		EXCH	T1,UPTLKJ(T3)
  2598	002416'	312300	000000*		CAME	T1,%UPT+UPTJOB
  2599	002417'	256000	006476'		 STOPCD (.,STOP,ULKNME,,<Unlock UPx - Not mine error>)
  2600				 ;;UNWUPX+4
  2601
  2602	002420'	372010	002404*		SOSE	UPTLKC(T3)	;ONE LESS LEVEL NEEDS LOCK
  2603					  JRST	[MOVEM T1,UPTLKJ(T3) ;HIGHER LEVEL NEEDS IT, PUT LOCK FRAME NUMBER BACK
  2604	002421'	254000	006501'			 POPJ  P,]	;AND RETURN DOING NOTHING BUT SOS COUNT.
  2605								; HERE IF ALL LEVELS HAVE RELEASED IT
  2606
  2607				;HERE TO WAKE UP POSSIBLE NEXT JOB IN CONTEXT PAGE WAIT QUEUE
  2608
  2609	002422'	200440	000002		MOVE	T4,J		;SAVE J IN T4
  2610	002423'	200110	002376*		MOVE	J,UPTLKW(T3)
  2611	002424'	322100	002437'		JUMPE	J,RELUW2	;NO ONE TO WAKE UP, JUST WRITE PROTECT %UPX AND RETURN.
  2612	002425'	651100	000002		TSC	J,J
  2613	002426'	322100	002431'		JUMPE	J,RELUW1	;GO IF ONE JOB ON QUEUE
  2614	002427'	200110	002423*		MOVE	J,UPTLKW(T3)	;GET CONTENTS BACK AGAIN
  2615	002430'	540102	002377*		HRR	J,JBTPGO(J)	;GET NEXT WAITER
  2616	002431'	250110	002427*	RELUW1:	EXCH	J,UPTLKW(T3)	;NO MORE WAITERS
  2617	002432'	552110	002415*		HRRZM	J,UPTLKJ(T3)	;SAY THAT HE HAS IT NOW.
  2618	002433'	350010	002420*		AOS	UPTLKC(T3)	;INCREMENT LOCK COUNT FOR HIM.
  2619	
  2620	002434'	201300	000000*		MOVEI	T1,RNQ
  2621	002435'	137300	000000*		DPB	T1,PJBSTS	;PUT INTO SATISFIED STATE
  2622	002436'	260040	000000*		PUSHJ	P,REQUE
  2623	002437'	200100	000011	RELUW2:	MOVE	J,T4		;RESTORE J
  2624	002440'	306400	002360*		CAIN	T3,%UPT		;IF RELEASING %UPT LOCK,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 50-2
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2625	002441'	263040	000000		POPJ	P,		;JUST RETURN, UPT ALWAYS WRITE ENABLED.
  2626				;	JRST	WPRUPX		;%UPX, FALL INTO WPRUPX TO WRITE PROTECT %UPX.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 51
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2627				COMMENT ;@@SUBROUTINE WPRUPX/WENUPX
  2628				@@PURPOSE WRITE PROTECT/WRITE ENABLE %UPX GROUP
  2629				@@ENTRY
  2630				@@ACCUM DESTROYS T1-T4
  2631				@@EXIT ALWAYS NON-SKIP RETURN
  2632				@@FUNCTION IF PAGES MAPPED IN %UPX ARE ANOTHER FRAME'S PAGES,
  2633				JUST DO VPROT TO WRITE ENABLE/DISABLE THEM. ELSE, THEY ARE CURRENT
  2634				FRAMES, SO SET/CLEAR PGE.W BIT APPROPRIATELY AND CLEAR THE PAGE
  2635				TABLE FOR THOSE VIRTUAL PAGES WHOSE MAP SLOTS WE CHANGED.
  2636				@@;
  2637
  2638
  2639
  2640				EXTERNAL NCTXPG,%UPX.N
  2641
  2642	002442'	634440	000011	WPRUPX:	TDZA	T4,T4		;INDICATE WRITE PROTECT
  2643	002443'	201440	000001	WENUPX:	MOVEI	T4,1		;INDICATE WRITE ENABLE
  2644
  2645	002444'	200300	000000*		MOVE	T1,%UPX+UPTJOB	;SEE IF %UPX CONTEXT PAGES SAME AS
  2646	002445'	316300	000000*		CAMN	T1,%UPT+UPTJOB	;%UPT
  2647					POPJ	P,		;YES, DON'T NEED TO WRITE ENABLE OR PROTECT THEM, ALWAYS WRITE 
  2648	002446'	263040	000000	ENABLED TO SAVE CLRPT EXECUTIONS,
  2649								; WHICH ARE SLOW ON THE 2020.
  2650
  2651				;HERE IF CURRENT JOB'S CONTEXT PAGES NOT IN %UPX.
  2652
  2653					MOVE	T1,[<CPRRED>B7+<NCTXPG>B17+%UPX.N+CNVVPN
  2654	002447'	200311	006503'			    <CPRRDW>B7+<NCTXPG>B17+%UPX.N+CNVVPN](T4)
  2655								;GET APPROPRIATE ARG
  2656	002450'	047300	777710		VPROT	T1,
  2657	002451'	256000	000000'		 STOPCD
  2658	002452'	263040	000000		POPJ	P,		;RETURN.
  2659
  2660				;HERE IF %UPX SAME PAGES AS %UPT. CAN'T DO VPROT, PAGES DON'T REALLY EXIST.
  2661
  2662	002453'	200400	000000*	WPRUX1:	MOVE	T3,UPYPXM	; [UPTPTR(%UPX.N-1)]
  2663	002454'	400340	000000		SETZ	T2,
  2664	002455'	134300	000010	WPRUX2:	ILDB	T1,T3		;GET NEXT SLOT
  2665					XCT	[TRZ T1,PGE.W
  2666	002456'	256011	006505'			 TRO T1,PGE.W](T4) ;EITHER SET OR CLEAR W BIT.
  2667	002457'	137300	000010		DPB	T1,T3		;PUT SLOT BACK
  2668	002460'	701107	002413*		CLRPTO	%UPX(T2)	;AND SAY MAP HAS CHANGED.
  2669	002461'	271340	001000		ADDI	T2,1000		;NEXT ADDRESS
  2670	002462'	305340	000000*		CAIGE	T2,<NCTXPG*1000> ;NO MORE TO DO?
  2671	002463'	254000	002455'		JRST	WPRUX2		;YET ANOTHER
  2672	002464'	263040	000000		POPJ	P,		;DONE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 52
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2673				COMMENT ;@@SUBROUTINE ABTCPL
  2674				@@PURPOSE CALLED FROM CHKABT AFTER JBTABT ROUTINE CALL
  2675				TO GIVE UP ANY CONTEXT PAGE LOCKS THE FRAME MIGHT HAVE
  2676				@@ENTRY J/ FRAME NUMBER
  2677				@@ACCUM T1-T4
  2678				@@EXIT ALWAYS NON-SKIP RETURN
  2679				@@RESTRICTIONS THE CALLER MUST BE PREPARED TO LOSE THE CONTEXT
  2680				PAGE LOCK IF HE GETS IT THEN GETS AN I/O ERROR, ILL MEM REF, ETC.
  2681				IF THE CALLER HAS LEFT THE STATE OF THE CONTEXT PAGES INVOLVED
  2682				IN AN INCONSISTENT STATE, THEY WILL REMAIN IN THAT STATE UNLESS
  2683				HE HAS SETUP A JBTABT ROUTINE TO FIX THEM UP AGAIN.
  2684				@@FUNCTION FOR ALL CONTEXT PAGE LOCKS THE JOB MIGHT HAVE,
  2685				SET THE LOCK LEVEL COUNT (UPTLKC) TO 1, AND CALL UNWUP? FOR
  2686				THE LOCK TO GET RID OF IT.
  2687				@@;
  2688
  2689	002465'	312100	000000*	ABTCPL::CAME	J,%UPT+UPTLKJ	;WE ARE LOCKING?
  2690	002466'	254000	002472'		JRST	ABTCP1		;NO, CHECK %UPX
  2691	002467'	201300	000001		MOVEI	T1,1
  2692	002470'	202300	000000*		MOVEM	T1,%UPT+UPTLKC	;MAKE THE COUNT 1 SO WE WILL GET RID OF THE LOCK
  2693	002471'	260040	002412'		PUSHJ	P,UNWUPT	;RELEASE IT
  2694	002472'	312100	000000*	ABTCP1:	CAME	J,%UPX+UPTLKJ	;WE ARE LOCKING %UPX?
  2695	002473'	263040	000000		POPJ	P,		;NO, DONE
  2696	002474'	201300	000001		MOVEI	T1,1
  2697	002475'	202300	000000*		MOVEM	T1,%UPX+UPTLKC	;MAKE COUNT 1 SO LOCK WILL GO AWAY
  2698	002476'	324740	002540'		PJRST	ULDUPX		;AND GIVE THE LOCK BACK.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 53
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2699				COMMENT ;@@SUBROUTINE LKDUPX
  2700				@@PURPOSE LOCKDOWN THE CONTEXT PAGES FOR C(J) IN %UPX.
  2701				GUARANTEES THAT REFERENCING THE PAGES
  2702				IN THE %UPX GROUP WILL NOT CAUSE RESCHEDULING. THIS IS
  2703				NECESSARY TO READ TWO OR MORE RELATED ITEMS WITHOUT
  2704				INTERRUPTION.
  2705				@@ENTRY C(J) HAS THE FRAME NUMBER WHOSE CONTEXT PAGES ARE TO BE LOCKED DOWN
  2706				@@ACCUM USES T1-T4,PG
  2707				@@EXIT SKIP RETURN IF CONTEXT PAGES LOCKED OK, NON-SKIP IF NOT.
  2708				IF ERROR RETURN GIVEN, J DOES NOT CONTAIN ORIGINAL VALUE.
  2709				@@FUNCTION IF PAGES ALREADY IN, RETURN. ELSE CALL MAPUPX TO GET
  2710				CORRECT PAGES MAPPED INTO %UPX. IF CANNOT, GIVE ERROR RETURN.
  2711				IF CAN, AND CURRENT JOB'S PAGES ARE NOT IN %UPX, RETURN. ELSE
  2712				SET ALL LOCK BITS FIRST, SO SUBSEQUENT CALL TO SETMWS
  2713				DOESN'T REPLACE ANY OF THE %UPX PAGES IF THEY ARE ALREADY IN
  2714				THE MWS. CALL SETMWS FOR ALL %UPX PAGES TO GET THEM INT MWS
  2715				SO SWAPPER WILL BRING THEM IN.  THEN REFERENCE ALL %UPX PAGES WITH A READ INSTRUCTION,
  2716				(AFTER THE FIRST REFERENCE, THE SWAPPER SHOULD HAVE THEM ALL READY
  2717				TO GO, BUT IN CASE IT DOESN'T, READING ALL THE PAGES SHOULD
  2718				LOCK THEM ALL IN FOR SURE.)
  2719				CHECK I/O ERROR BITS. IF THEY ARE ALL CLEAR,  GIVE SUCCESS RETURN.
  2720				ELSE, IF I/O ERROR BITS ON FOR ANY %UPX PAGE, GIVE ERROR RETURN,
  2721				LEAVE CURRENT JOB'S CONTEXT PAGES IN %UPX.
  2722				@@;
  2723
  2724				EXTERNAL LMPLOK,LMMERR,%UPLMA,NCTXPG,%UPX.N
  2725
  2726	002477'	261040	000012	LKDUPX::PUSH	P,W		;SAVE W
  2727	002500'	316100	000000*		CAMN	J,%UPX+UPTJOB	;ALREADY MAPPED?
  2728								; (UPTJOB HAS -1 IF JOB LOGGED OUT, SO NO MATCH.)
  2729	002501'	254000	002504'		JRST	LKDUX0		;YES.
  2730	002502'	260040	002556'		PUSHJ	P,MAPUPX	;MAKE SURE RIGHT CONTEXT PAGES ARE IN %UPX
  2731	002503'	254000	002532'		  JRST	WPOPJ		;I/O ERROR OR SOMETHING
  2732	002504'	316100	000000*	LKDUX0:	CAMN	J,%UPT+UPTJOB	;OUR OWN CONTEXT PAGES MAPPED?
  2733	002505'	254000	002531'		JRST	WPOPJ1		;YES, NO NEED TO MESS WITH LOCK BITS OR ANYTHING.
  2734	002506'	200500	006507'		MOVE	W,[-NCTXPG,,%UPX.N+CNVVPN]
  2735	002507'	205300	000000*		MOVSI	T1,LMPLOK	;BIT TO LOCK THINGS.
  2736	002510'	436312	002216*	LKDUX1:	IORM	T1,%UPLMA(W)	;SET LOCK BIT
  2737	002511'	253500	002510'		AOBJN	W,LKDUX1	;FOR ALL PAGES IN %UPX GROUP
  2738	002512'	200500	006510'		MOVE	W,[-NCTXPG,,%UPX.N+CNVVPN] ;SET ALL LOCK BITS BEFORE
  2739								; CALLING SETMWS SO REPLACER DOESN'T TAKE
  2740								; THE ONES WE'RE GOING TO LOCK
  2741								; IF THEY ARE ALREADY IN THE MWS.
  2742	002513'	261040	000002		PUSH	P,J		;SAVE TARGET JOB'S NUMBER
  2743	002514'	200100	000000*		MOVE	J,%UPT+UPTJOB	;GET CURRENT JOB'S NUMBER FOR SETMWS
  2744	002515'	260040	005370'	LKDUX2:	PUSHJ	P,TSTMWS	;IN MWS ALREADY
  2745	002516'	260040	005276'		  PUSHJ	P,SETMWS	;NO, PUT IT IN MWS
  2746	002517'	253500	002515'		AOBJN	W,LKDUX2	;FOR ALL %UPX PAGES
  2747	002520'	262040	000002		POP	P,J		;GET TARGET JOB NUMBER BACK.
  2748
  2749				;HAD TO PUT THEM ALL IN MWS SO WE DON'T GO THRU THE SWAPER NCTXPG TIMES.
  2750
  2751	002521'	200500	006511'		MOVE	W,[-NCTXPG,,%UPX.N] ;LAST TIME
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 53-2
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2752	002522'	201340	002460*		MOVEI	T2,%UPX		;TO GET AT LMAP SLOT
  2753	002523'	205400	002225*		MOVSI	T3,LMMERR	;ERROR BITS TO TEST
  2754	002524'	200307	000000	LKDUX3:	MOVE	T1,(T2)		;REFERENCE THE PAGE
  2755	002525'	612412	002510*		TDNE	T3,%UPLMA(W)	;ANY ERROR BITS COME ON?
  2756	002526'	254000	002534'		JRST	LKDUX4		;GO GET CURRENT JOBS PAGES BACK AND GIVE ERROR RETURN.
  2757	002527'	271340	001000		ADDI	T2,1000		;NEXT REFERENCE ADDRESS
  2758	002530'	253500	002524'		AOBJN	W,LKDUX3	;FOR ALL %UPX PAGES
  2759	002531'	350001	777777	WPOPJ1:	AOS	-1(P)		;THEY ARE ALL NOW LOCKED IN.
  2760	002532'	262040	000012	WPOPJ:	POP	P,W
  2761	002533'	263040	000000		POPJ	P,
  2762
  2763	002534'	200100	000000*	LKDUX4:	MOVE	J,%UPT+UPTJOB
  2764	002535'	260040	002556'		PUSHJ	P,MAPUPX	;GET THEM IN %UPX
  2765	002536'	256000	000000'		 STOPCD 		;SHOULD ALWAYS BE ABLE TO GET THEM
  2766	002537'	254000	002532'		JRST	WPOPJ		;POP OFF W AND GIVE ERROR RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 54
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2767				COMMENT ;@@SUBROUTINE ULDUPX
  2768				@@PURPOSE RELEASE LOCKDOWN ON %UPX
  2769				@@ENTRY
  2770				@@ACCUM T1-T4
  2771				@@EXIT
  2772				@@FUNCTION RELEASE WRITE LOCK IF CALLER HAS IT. IF CALLER STILL HAS LOCK
  2773				AFTER RELEASEING IT, AN UPPER LEVEL HAS THE LOCK, SO JUST REURN. ELSE
  2774				IF CALLER'S CONTEXT PAGES ARE IN %UPX, RETURN, ELSE CLEAR THE LOCK BITS FOR THE %UPX PAGES AND 
  2775				RETURN.
  2776				QUESTION: SHOULD %UPX PAGES BE TAKEN OUT OF MWS AT THIS POINT?
  2777				@@;
  2778
  2779	002540'	200300	000000*	ULDUPX::MOVE	T1,%UPT+UPTJOB
  2780	002541'	312300	000000*		CAME	T1,%UPX+UPTLKJ	;WE HAVE THIS LOCKED?
  2781	002542'	254000	002547'		JRST	ULDUX1		;NO, DON'T MESS WITH LOCK
  2782	002543'	260040	002413'		PUSHJ	P,UNWUPX	;YES, GET RID OF ONE LEVEL OF THE LOCK
  2783	002544'	200300	000000*		MOVE	T1,%UPT+UPTJOB	;GET CALLER'S FRAME NUMBER BACK
  2784	002545'	316300	000000*		CAMN	T1,%UPX+UPTLKJ	;IF CALLER STILL HAS LOCK,
  2785	002546'	263040	000000		POPJ	P,		;DON'T TAKE THE LOCKDOWN OFF, STILL NEED IT.
  2786	002547'	316300	000000*	ULDUX1:	CAMN	T1,%UPX+UPTJOB	;IF CALLER'S OWN CONTEXT PAGES ARE IN %UPX,
  2787	002550'	263040	000000		POPJ	P,		;THERE IS NOTHING TO DO.
  2788	002551'	200440	006512'		MOVE	T4,[-NCTXPG,,%UPX.N+CNVVPN]
  2789	002552'	205400	002507*		MOVSI	T3,LMPLOK
  2790	002553'	412411	002525*	RELUR1:	ANDCAM	T3,%UPLMA(T4)	;CLEAR LOCK BIT
  2791	002554'	253440	002553'		AOBJN	T4,RELUR1	;FOR ALL PAGES IN %UPX GROUP
  2792	002555'	263040	000000		POPJ	P,		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 55
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2793				COMMENT ;@@SUBROUTINE MAPUPX
  2794				@@PURPOSE SETUP %UPX WITH ANOTHER FRAME'S CONTEXT PAGES
  2795				@@ENTRY J CONTAINS FRAME NUMBER FOR DESIRED CONTEXT PAGES.
  2796					CALLER SHOULD CHECK TO SEE IF CORRECT PAGES ALREADY THERE
  2797					BY CHECKING %UPX+UPTJOB.
  2798				@@ACCUM USES T1-T4,W,PG
  2799				@@EXIT ERROR RETURN IF FRAME NO LONGER EXISTS (?)
  2800					(CURRENT JOB'S CTX PAGES MAPPED IN %UPX ON ERRORS).
  2801					SKIP RETURN IF FRAME'S CONTEXT PAGES SUCCESSFULLY MAPPED
  2802					INTO %UPX.
  2803				@@FUNCTION IF OTHER JOB'S CONTEXT PAGES ARE IN %UPX, REMOVE THEM
  2804				BY CALLING UPXRMV (AVOID RECURSION). IF MAPPING OWN CONTEXT PAGES INTO %UPX, COPY
  2805				SLOTS FROM %UPT'S SLOTS CLEARING PAGE TABLE AND RETURN.
  2806				ELSE MAP OTHER JOB'S SLOTS IN WITH MAPKRN. IF MAPKRN FAILS,
  2807				REMOVE %UPX GROUP, MAP OWN SLOTS INTO %UPX, AND GIVE ERROR RETURN.
  2808				ELSE SET IGNORE I/O ERROR BITS FOR %UPX, RETURN.
  2809				@@;
  2810
  2811				EXTERN %UPT,UPTJOB,%UPX.N,%UPT.N,JOBATB,CTXTAB,LMPMXW,LMPNER
  2812				EXTERN UPYPTM,UPYPXM,USYPTN,EPYPSM
  2813				EXTERN MAPKRN,%UPLMA,NCTXPG,RBREAL,LMMRED,SAVE4
  2814
  2815
  2816	002556'	265440	000000*	MAPUPX::JSP	T4,SAVE4	;SAVE P1-P4.
  2817	002557'	200300	000000*		MOVE	T1,%UPX+UPTJOB	;SEE IF FOREIGN CTX PAGES ARE IN %UPX
  2818	002560'	316300	000000*		CAMN	T1,%UPT+UPTJOB	;SKIP IF SO
  2819	002561'	254000	002563'		JRST	MAPUX0		;OUR OWN, JUST OVERWRITE SLOTS.
  2820	002562'	260040	002624'		PUSHJ	P,UPXRMV	;REMOVE %UPX PAGES, AVOIDING USE OF %UPX.
  2821	002563'	316100	000000*	MAPUX0:	CAMN	J,%UPT+UPTJOB	;SET TO CURRENT JOB'S?
  2822	002564'	254000	002614'		JRST	MAPUPC		;YES, GO REMOVE %UPX AND COPY MAP SLOTS
  2823	002565'	200500	006513'		MOVE	W,[-NCTXPG,,%UPX.N+CNVVPN] ;AOBJN POINTER
  2824
  2825				;CODE BELOW HAS TO CHECK CTX STATUS BITS IN CASE JOB GOES AWAY BETWEEN MAPS.
  2826	002566'	260040	000000*	MAPUX1:	PUSHJ	P,JOBATB	;GET ATB ADDRESS IN T1
  2827	002567'	200342	000000*		MOVE	T2,JBTCTX(J)	;GET STATUS BITS AGAIN
  2828	002570'	607340	120000		TLNN	T2,CTXVIR+CTXSWE;IF NOTHING THERE YET OR SWAP ERROR, NO GOOD.
  2829	002571'	607340	200000		TLNN	T2,CTXCEX	;OK SO FAR, IF THEY EXIST, GIVE THEM.
  2830	002572'	254000	002611'		JRST	MAPUXE		;NO GOOD, RETURN.
  2831	002573'	135352	000000*		LDB	T2,CTXTAB-<%UPX.N+CNVVPN>(W) ;GET DISK ADDRESS
  2832	002574'	661340	001073*		TLO	T2,RBREAL	;MAKE IT TASTY TO MAPKRN
  2833	002575'	205700	000000*		MOVSI	P3,LMMRED	;MAX WRITE, READ ONLY.
  2834	002576'	260040	000000*		PUSHJ	P,MAPKRN	;MAP IN NEXT CONTEXT PAGE.
  2835	002577'	254000	002611'		  JRST	MAPUXE		;ERROR FROM MAPKRN, GET OWN PAGES IN%UPX AND ERROR RETURN.
  2836	002600'	661700	002230*		TLO	P3,LMPNER	;IGNORE I/O ERRORS.
  2837	002601'	260040	004674'		PUSHJ	P,SETLMA	;STORE LMAP SLOT BACK.
  2838	002602'	253500	002566'		AOBJN	W,MAPUX1	;AND DO NEXT %UPX PAGE.
  2839	002603'	200302	002567*		MOVE	T1,JBTCTX(J)	;MAKE SURE DIDN'T GO AWAY BEFORE LAST MAPKRN CALL
  2840	002604'	607300	120000		TLNN	T1,CTXVIR+CTXSWE
  2841	002605'	607300	200000		TLNN	T1,CTXCEX	;NOT VIRGIN, NO ERRORS, AND MUST EXIST
  2842	002606'	254000	002611'		JRST	MAPUXE		;NO GOOD, GET RID OF THEM AND RETURN.
  2843	002607'	350001	000000		AOS	(P)		;GIVE GOOD RETURN, AND
  2844	002610'	324740	000432*		PJRST	RELSAT		;GIVE BACK SAT IF WE HAVE IT.
  2845
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 55-2
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2846	002611'	260040	002610*	MAPUXE:	PUSHJ	P,RELSAT	;GIVE BACK SAT IF WE HAVE IT.
  2847	002612'	260040	002624'		PUSHJ	P,UPXRMV	;CLEAR EVERYTHING MAPKRN DID.
  2848	002613'	370001	000000		SOS	(P)		;GET OWN PAGES IN AND GIVE ERROR RETURN.
  2849				;	JRST	MAPUPC
  2850
  2851
  2852				;HERE TO MAP CURRENT JOBS CONTEXT PAGES INTO %UPX
  2853
  2854	002614'	200440	002453*	MAPUPC:	MOVE	T4,UPYPXM	; [UPTPTR(%UPX.N-1)]
  2855	002615'	200400	000000*		MOVE	T3,UPYPTM	; [UPTPTR(%UPT.N-1)]
  2856	002616'	200500	006514'		MOVE	W,[-NCTXPG,,%UPX.N+CNVVPN]
  2857	002617'	134300	000010	MAPUC1:	ILDB	T1,T3
  2858	002620'	136300	000011		IDPB	T1,T4
  2859	002621'	260040	002655'		CLRPTW			;CLEAR PT FOR PAGE WHOSE NUMBER IS IN W
  2860	002622'	253500	002617'		AOBJN	W,MAPUC1
  2861	002623'	254000	002406*		JRST	CPOPJ1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 56
CORE1.MAC	28-OCT-87 17:05		%UPX HANDLERS

  2862				COMMENT ;@@SUBROUTINE UPXRMV
  2863				@@PURPOSE REMOVE %UPX PAGES WITHOUT REQUIRING CURRENT FRAME'S
  2864				CONTEXT PAGES TO BE IN %UPX.
  2865				@@ENTRY ONE OR MORE PAGES MAPPED INTO %UPX. (NON-EXISTENT ONES
  2866				WILL BE IGNORED).
  2867				%UPX PAGES MUST NOT BE LOCKED DOWN (LMPLOK).
  2868				@@ACCUM W, PG, P1-P4.
  2869				@@EXIT J STILL HAS FRAME NUMBER.
  2870				@@;
  2871
  2872				EXTERNAL SAVE4,RELSAT
  2873
  2874	002624'	261040	000000	UPXRMV:	PUSH	P,S
  2875	002625'	261040	000005		PUSH	P,U
  2876	002626'	261040	000004		PUSH	P,F
  2877	002627'	261040	000002		PUSH	P,J
  2878	002630'	200100	000000*		MOVE	J,%UPT+UPTJOB	;GET CALLER'S JOB NUMBER, REMMWS NEEDS IT.
  2879
  2880	002631'	400200	000000		SETZ	F,		;CLEAR NO ERROR LOGGING FLAG IN LH OF F
  2881	002632'	200500	006515'		MOVE	W,[-NCTXPG,,%UPX.N+CNVVPN] ;AOBJN POINTER FOR PAGES TO REMOVE
  2882
  2883	002633'	260040	004626'	UPXRM1:	PUSHJ	P,REDLMA	;GET LMAP SLOT - LEAVE LDC COUNT ZERO FOR REMKRN.
  2884	002634'	607700	002244*		TLNN	P3,LMMEXS	;EXISTS?
  2885	002635'	254000	002641'		JRST	UPXRMN		;NO, GO DO NEXT ONE.
  2886	002636'	260040	003733'		PUSHJ	P,REMMWS	;TAKE PAGE OUT OF MWS, DEACTIVATE IT
  2887	002637'	260040	000435'		PUSHJ	P,REMKRN	;REMOVE THE SLOT
  2888	002640'	260040	004674'		PUSHJ	P,SETLMA	;STORE IT BACK, COUNT WAS ZERO
  2889	002641'	253500	002633'	UPXRMN:	AOBJN	W,UPXRM1	;DO NEXT
  2890
  2891	002642'	262040	000002		POP	P,J
  2892	002643'	262040	000004		POP	P,F
  2893	002644'	262040	000005		POP	P,U
  2894	002645'	262040	000000		POP	P,S
  2895	002646'	324740	002611*		PJRST	RELSAT		;GIVE SAT BACK.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 57
CORE1.MAC	28-OCT-87 17:05		MISC. ROUTINES

  2896				SUBTTL MISC. ROUTINES
  2897
  2898				;ROUTINE TO CHECK VALIDITY OF PAGE CONTAINED IN RH(W).
  2899				; CALLED  WITH SIGN BIT OF F = 0 IF UUO DONE BY USR,
  2900				; SIGN BIT 0 IF CALLED BY EXEC. CALLED BY JSP T4,VPCHK.
  2901
  2902	002647'	201300	000777	VPCHK:	MOVEI	T1,777		;ASSUME USER CALLED
  2903	002650'	607200	400000		TLNN	F,FL.USR	;SKIP IF TRUE
  2904	002651'	201300	001140*		MOVEI	T1,VPUMAX	;NO, EXEC LIMIT
  2905	002652'	305312	000000		CAIGE	T1,(W)		;IS MAX EQUAL OR GREATER THAN PAGE?
  2906	002653'	254011	000000		JRST	(T4)		;NO, ERROR
  2907	002654'	254011	000001		JRST	1(T4)		;YES, OK.
  2908
  2909				IFNCPU (KI),<
  2910				;ROUTINE TO INVALIDATE PGE TABLE ENTRY FOR PAGE WHOSE NUMBER
  2911				; IS IN RH(W). PRESERVES ALL ACS. NEVER CALL DIRECTLY -
  2912				; USE CLRPTW MACRO.
  2913
  2914	002655'	606500	777000	CLPTW::	TRNN	W,777000	;USER PAGE?
  2915	002656'	254120	006516'		JRSTF	@[PC.UIO,,CLPTW1] ;YES,GO CLEAR FOR USER MAP
  2916	002657'	241500	000011		ROT	W,^D9		;MAKE INTO ADDRESS
  2917	002660'	701112	340000		CLRPTO	<-<CNVVPN*1000>(W)>		;CLEAR 1 LINE OF PAGE TABLE
  2918	002661'	241500	777767		ROT	W,-^D9		;BACK TO ORIGINAL
  2919	002662'	263040	000000		POPJ	P,		;RETURN.
  2920
  2921	002663'	241500	000011	CLPTW1:	ROT	W,^D9		;CONVERT TO ADDRESS
  2922	002664'	256200	006517'		XCTBU	<CLRPT (W)>	;CLEAR LINE OF PAGE TABLE FOR USER.
  2923	002665'	241500	777767		ROT	W,-^D9		;BACK TO ORIGINAL VALUE.
  2924	002666'	262041	000000		POP	P,(P)		;MUST RESTORE USER IOT
  2925	002667'	254121	000001		JRSTF	@1(P)		;RETURN WITH ORIGINAL SETTING OF USER IOT
  2926				>;END IFNCPU (KI)
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 58
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  2927				SUBTTL PAGE FAULT HANDLER
  2928
  2929				COMMENT;@@SUBROUTINE PAGFLU/PAGFLE
  2930				@@PURPOSE HANDLE ALL NON-SPECIAL PAGE FAULTS FOR SYSTEM
  2931				@@ENTRY PAGE FAULT WORD IN T1 (KI HARDWARE FORMAT)
  2932				FAULT PC ON STACK
  2933				@@ACCUM T1-T4, P1-P4, F, J (SETUP TO CURRENT JOB NUMBER)
  2934				@@EXIT NON-SKIP IF REFERENCE WAS SUCCESSFUL OR IF
  2935				TRAP IS TO BE TAKEN FOR WORKING SET.  USER PAGE FAULTS
  2936				SHOULD ALWAYS DISMISS THRU USRXIT SO TRAPS WILL HAPPEN
  2937				IMMEDIATELY, IF NON-SKIP IS GIVEN.
  2938				SKIP RETURN IF REFERNCE DID NOT SUCCEED FOR SOME REASON.
  2939
  2940				ERROR CODE RETURNED IN RH OF T1, VP RETURNED IN LH OF T1
  2941				AND IN W. 0-777 ARE CORRESPONDING USER PAGES,
  2942				1000-1037 ARE EXEC PER PROCESS PAGES 340-377.
  2943				VP NUMBER UNSPECIFIED FOR EXEC PAGES GEQ 400.
  2944				F CONTAINS THE SOFT PAGE FAULT WORD
  2945				M CONTAINS THE ADDRESS (PAGE BOUNDARY ON KI) OF THE
  2946				OFFENDING REFERENCE.
  2947				@@RESTRICTIONS GUARANTEED NOT TO RESCHEDULE IF JUST FAULTING FOR
  2948				A WRITE AND PAGE IS ALREADY IN CORE. (SOME ROUTINES DEPEND ON THIS.)
  2949				@@FUNCTION 1) GIVE ERROR IF ITS FOR EXEC PAGE 400 OR GREATER.
  2950				2) DISPATCH TO PCBFLT IF VIRTUAL PAGE IS ONE RESERVED FOR PCBS.
  2951				3) SET REFERENCE BIT
  2952				4) HANDLE USER WORKING SET - GIVE TRAP IF POSSIBLE AND NECESSARY
  2953				5) GET PAGE INTO MWS IF NOT THERE, ACTIVATE IT IF NECESSARY
  2954				6) FOR UNSHARED FILE PAGES, SEARCH SPT TO SEE IF IT BECAME SHARED
  2955				 WHILE THIS SLOT WAS INACTIVE. IF SO, SET THIS SLOT
  2956				 TO SHARED SO ALL ACTIVE SLOTS ARE CORRENT W.R.T. SHARED BIT.
  2957				7) FOR PRIVATE PAGES, CHECK TO SEE IF ITS VIRGIN. IF SO,
  2958				 CLEAR VIRGIN BIT IN SPT AND ZERO OUT CORE PAGE. SKIP ERROR CHECKING,
  2959				 SINCE PAGE SHOULD HAVE NEVER BEEN READ OR WRITTEN YET.
  2960				8) CHECK ERRORS, HANDLE ERROR TRAP STUFF.
  2961				9) SET ACCESS BIT IF ALL OK SO FAR.
  2962				10) IF USER IS NOT TRYING TO WRITE OR IS AND "W" BIT IS ON, RETURN.
  2963				11) (USER TRYING TO WRITE AND "W" BIT IS OFF) GIVE ERROR RETURN
  2964				 (SKIP) IF PROTECTION IS READ ONLY. IF ITS COW,
  2965				 DO COW STUFF (REPLICATE, REMOVE, VCREAT, COPY, REMOVE)
  2966				IF READ WRITE, MARK PAGE DIRTY AND SET "W" BIT.
  2967				12) RETURN.
  2968
  2969				NOTE: IT IS IMPORTANT THAT IF THE LMAP SLOT IS IN P3 AND 4 AND
  2970				A ROUTINE IS CALLED THAT UPDATES THE SLOT AND THE PGY INFORMATION
  2971				TOGETHER, THE SLOT MUST BE STORED, OR ELSE THE SLOT AND PGY
  2972				TABLE STUFF WILL BE INCONSISTENT (E.G. LMA CHAIN, PGY POINTING
  2973				TO INACTIVE SLOT, SINGLE UNSHARED ACTIVE SLOT WITH PGYATB ZERO
  2974				BECAUSE SETSHR WAS CALLED BUT SLOT NEVER STORED BACK).
  2975				@@;
  2976
  2977				;ERROR CODES RETURNED IN RH(T1) IF SKIP RETURN:
  2978
  2979				ERRCOD(0,PFBER%,PFEBER)		;BAD EXEC REF - FAULT FOR EPT OR CONTEXT PGE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 58-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  2980				ERRCOD(1,PFNXP%,PFENXP)	;NON-EXISTENT USER OR EXEC PER PROCESS PAGE REFERENCE
  2981				ERRCOD(2,PFWRT%,PFEWRT)	;WRITE FAILURE FOR USER OR EXEC PER PROCESS PAGE
  2982				ERRCOD(3,PFSWE%,PFESWE)	;SWAP OR PARITY ERROR
  2983				ERRCOD(4,PFDFC%,PFEDFC)	;DISK FUL DURING WRITE IN COW PAGE.
  2984				ERRCOD(5,PFCWS%,PFECWS)	;ATTEMPT TO WRITE INTO COW SUPER PAGE.
  2985				ERRCOD(6,PFABK%,PFEABK)	;ADDRESS BREAK. FAULT WORD RETURNED IN F.
  2986				ERRCOD(7,PFHPF%,PFEHPF)	;HARDWARE PAGE FAULT ERROR. FAULT WORD RETURNED IN F.
  2987				ERRCOD(10,PFNEC%,PFENEC)	;NOT ENOUGH CORE TO MWSRPL (DUE TO DIO LOCKS)
  2988
  2989				;MACRO TO SHORTEN KEYSTROKES:
  2990
  2991				DEFINE PGFERR(ERR)<	SALL
  2992					JRST	[PUSHJ P,PFE'ERR
  2993						 JRST FLTBRF]
  2994					XALL>
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 59
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  2995	002670'	634200	000004	PAGFLE::TDZA	F,F		;INDICATE THAT ITS EXEC REF
  2996	002671'	205200	400000	PAGFLU::MOVSI	F,FL.USR	;INDICATE THAT USER CAUSED PAGE FAULT
  2997	002672'	200100	001253*		MOVE	J,JOB		;SETUP J.
  2998	002673'	702640	000007		CHGSTS	T2	;SAVE CLOCK STATE
  2999	002674'	702600	400000*		NOCHARGE		;DON'T CHARGE FOR UCYCLES
  3000	002675'	261040	000007		PUSH	P,T2		;
  3001				IFCPU (KI),<
  3002					LDB	W,[POINT 9,T1,17] ;GET PAGE NUMBER
  3003					MOVE	M,W		;GET ADDRESS OF PAGE BOUNDARY IN M
  3004					LSH	M,^D9
  3005					DPB	T1,[POINT 6,F,23] ;GET 0AWST IN 18-23.
  3006					TLNE	T1,(PFW.U)	;TRANSFER MAP SELECT BIT TO
  3007					TRO	F,SPFW.U	;PROPER PLACE
  3008					TRNE	F,SPFW.H	;ADDRESS BREAK OR HARD FAIL?
  3009					JRST	SPCFLT		;YES.
  3010					TRNN	F,SPFW.U	;IF TO EXEC MAP, GO TO EXCFLT.
  3011					JRST	EXCFLT		;ITS TO EXEC SPACE, GO CHECK IT.
  3012				>;END IFCPU (KI)
  3013
  3014				IFNCPU (KI),<
  3015	002676'	135500	006520'		LDB	W,[POINT 9,T1,26] ;GET VIRTUAL PAGE NUMBER IN W
  3016	002677'	550540	000006		HRRZ	M,T1		;GET ADDRESS IN M
  3017	002700'	544200	000006		HLR	F,T1		;THIS IS EASY - JUST GET INTO RH SO BIT 0
  3018								; IS FREE FOR COPY OF PC.USR
  3019	002701'	602200	200000		TRNE	F,SPFW.H	;ADDRESS BREAK OR HARD PAGE FAIL?
  3020	002702'	254000	003371'		JRST	SPCFLT		;YES, HANDLE EARLY.
  3021	002703'	606200	400000		TRNN	F,SPFW.U	;REF IS TO USER ADDR SPACE?
  3022	002704'	254000	003404'		JRST	EXCFLT		;NO, HAVE TO SEE WHATS GOING ON.
  3023				>;END IFNCPU (KI)
  3024
  3025				;BACK HERE FROM EXCFLT IT FAULT WAS FOR REGULAR EXEC PER PROCESS
  3026				; VP. 1000 = 340.
  3027
  3028	002705'	350000	000000*	USRFLT:	AOS	PFLCNT		;COUNT TOTAL PAGE FAULTS
  3029	002706'	336000	000002		SKIPN	J		;NO FAULTS FROM NULLJOB
  3030	002707'	256000	006521'		 STOPCD (.,CPU,PFLJB0,,<Page fault in jobs 0>)
  3031				 ;;PAGFLU+15
  3032	002710'	332000	000000*		SKIPE	%UPT+UPTLDC	;NO SLOTS AROUND, WE HOPE (12 times last year)
  3033	002711'	256000	006524'		 STOPCD (.,STOP,PFLLDC,,<Page fault with LDC nonzero>)
  3034				 ;;USRFLT+3
  3035	002712'	262040	000014		POP	P,P1		;GET CLOCK WORD OFF STACK
  3036					JSP	P2,[PUSHJ P,WLKUPT
  3037						    STOPCD 		;NEVER SHOULD HAPPEN.
  3038						   PUSHJ P,(P2) ;RETURN TO CALLER
  3039						     SKIPA
  3040						   AOS (P)
  3041						   PUSH P,T1	;SAVE POSSIBLE ERROR CODE
  3042						   PUSHJ P, UNWUPT
  3043						   POP P,T1
  3044	002713'	265640	006527'			   POPJ P,]  ;GET RID OF LOCK AND RETURN.
  3045	002714'	261040	000014		PUSH	P,P1		;PUT CLOCK WORD BACK ONTO STACK.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 60
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3046	002715'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP CONTENTS FROM %UPT
  3047	002716'	607700	002634*		TLNN	P3,LMMEXS	;DOES VP EXIST?
  3048	002717'	254000	006540'		PGFERR(NXP)
  3049	002720'	667700	002022*		TLON	P3,LMPREF	;IS REF BIT ON ALREADY? (SET IT)
  3050	002721'	606200	400000		TRNN	F,SPFW.U	;NOT ON, IF EXEC'S MAP, FORGET TRAPS
  3051	002722'	254000	002740'		JRST	USRRBO		;EXEC MAP OR REF BIT ON.
  3052	002723'	200600	000013		MOVE	P1,M		;CONSTRUCT FAULT INFO WORD IN P1
  3053	002724'	661600	400000		TLO	P1,RI.VAL	;VALID INFO BIT
  3054	002725'	135300	000000*		LDB	T1,JBYREF	;GET INTERRUPT CHANEL IF ANY
  3055	002726'	322300	002737'		JUMPE	T1,USRRB2	;IF NONE, GO STORE IN EXEC WORD AND LEAVE BIT ON
  3056	002727'	260040	000000*		PUSHJ	P,TSTKTP	;TRY TO SET THE TRAP, SKIP IF CAN'T TAKE IT
  3057	002730'	254000	002733'		  JRST	USRRB1		;OK, TRAP IF THIS FAULT IS FROM SER MODE PC
  3058	002731'	260040	000000*		PUSHJ	P,TAKTRP	;CAN'T TRAP NOW, SET IT FOR LATER
  3059	002732'	254000	002737'		JRST	USRRB2		;AND GO STORE INTO EXEC FAULT WORD
  3060	002733'	325200	002737'	USRRB1:	JUMPGE	F,USRRB2	;IF EXEC MODE, STORE INTO EXECC FAULT WORD
  3061	002734'	621700	002720*		TLZ	P3,LMPREF	;USER MODE, CLEAR REF BIT, LET USER SET IT HIMSELF
  3062	002735'	202600	000000*		MOVEM	P1,%UPT+UPTURI	;USER IS GETTING TRAP, STORE THAT
  3063	002736'	254000	003360'		JRST	FLTGRF		;AND RETURN TO USER'S TRAP ROUTINE.
  3064	002737'	202600	000000*	USRRB2:	MOVEM	P1,%UPT+UPTXRI	;TELL USER THAT SOMETHING WENT ON BEHIND
  3065								; HIS BACK AND CONTINUE FAULT PROCESSING
  3066	002740'	303500	000777	USRRBO:	CAILE	W,777		;PAGES IN THE EXEC PER PROCESS AREA
  3067	002741'	254000	003012'		JRST	USRIUW		;ARE NOT PART OF UWS SYSTEM
  3068	002742'	550300	000012		HRRZ	T1, W
  3069	002743'	231300	000000*		IDIVI	T1, AGECPW	;T1/ AGE CELL WD#, T2/ AGE CELL # IN WD
  3070	002744'	400400	000000		SETZ	T3,
  3071	002745'	137407	000000*		DPB	T3, AGEPTR(T2)	;SET AGE = 0
  3072	002746'	602200	100000		TRNE	F,SPFW.A	;IF A BIT IS ON, MUST BE IN UWS AND ACCESSIBLE
  3073	002747'	254000	003145'		JRST	USRCWR		;SO GO CHECK WRITE.
  3074	002750'	260040	005365'		PUSHJ	P,TSTUWS	;IS PAGE IN UWS ALREADY?
  3075	002751'	254000	002753'		  JRST	USRFL1		;NO
  3076	002752'	254000	003012'		JRST	USRIUW		;YES. SEE WHATS GOT TO BE DONE.
  3077								;NO. PUT PAGE IN UWS FIRST. FALL THRU
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 61
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3078				;HERE IF FAULT PAGE WAS NOT IN UWS. TRAP TO USER IF CAN, AND
  3079				; USER WILL DETERMINE WHICH PAGE TO REPLACE TO GET THIS ONE
  3080				; IN UWS.  IF CANNOT TRAP TO USER OR TRAPS NOT ENABLED,
  3081				; USE MONITOR USER WORKING SET PAGE REPLACEMENT ALGORITHM
  3082
  3083	002753'	135640	001504*	USRFL1:	LDB	P2,JBYUWS	;INTO P2 WITH SIZE SO WILL HANG AROUND
  3084	002754'	135300	001507*		LDB	T1,UPYUWL	;LIMIT
  3085	002755'	274640	000006		SUB	P2,T1		;P2 GETS SIZE-LIMIT
  3086	002756'	200600	000012		MOVE	P1,W		;GET FAULT WORD STARTED WITH VP NUMBER
  3087	002757'	242600	000011		LSH	P1,^D9		;CONVERT TO ADDRESS
  3088	002760'	661600	600000		TLO	P1,FI.VAL!FI.SAL	;ASSUME SIZE .GE. LIMIT
  3089	002761'	135300	000000*		LDB	T1,JBYSAL	;GETUP CHANNEL NUMBER FOR THAT
  3090	002762'	325640	002765'		JUMPGE	P2,USRFL2	;JUMP IF SIZE .GE. LIMIT
  3091	002763'	621600	200000		TLZ	P1,FI.SAL	;NO, SIZE UNDER LIMIT
  3092	002764'	135300	000000*		LDB	T1,JBYSLL	;GET CHANNEL FOR THAT TRAP
  3093	002765'	322300	002775'	USRFL2:	JUMPE	T1,USRFL4	;SAVE SOME TIME IF NO CHANNEL ASSIGNED
  3094
  3095	002766'	260040	002727*		PUSHJ	P,TSTKTP	;CAN WE TAKE THE TRAP NOW?
  3096	002767'	254000	002772'		  JRST	USRFL3		;YES, OK
  3097	002770'	260040	002731*		PUSHJ	P,TAKTRP	;NO. MAKE IT HAPPEN WHEN IT CAN
  3098	002771'	254000	002775'		JRST	USRFL4		;GO DO REPLACEMENT IN MONITOR
  3099
  3100	002772'	325200	002775'	USRFL3:	JUMPGE	F,USRFL4	;GO IF FAULT WAS IN EXEC MODE, CAN'T TRAP
  3101	002773'	202600	000000*		MOVEM	P1,%UPT+UPTUFI	;STORE AS THE USER INFO WORD.
  3102	002774'	254000	003360'		JRST	FLTGRF		;AND RETURN, USER GETS TRAP NOW.
  3103
  3104				;HERE IF CAN'T TAKE THE TRAP FOR ANY REASON. STORE FAULT
  3105				; INFO WORD IN THE EXEC INFO SLOT, EVEN IF NOTHING IS ENABLED.
  3106				; THIS IS PRIMARILY USEFUL FOR SHOWING USER THAT MONITOR
  3107				; CHANGED HIS WORKING SET.
  3108
  3109	002775'	202600	000000*	USRFL4:	MOVEM	P1,%UPT+UPTXFI	;STORE IN EXEC INFO SLOT
  3110	002776'	322640	003001'		JUMPE	P2,USRFL5	;IF SIZE EQUAL TO LIMIT, DON'T CALL TIMADJ,
  3111								; SIZE IS STAYING THE SAME
  3112	002777'	260040	001420*		PUSHJ	P,TIMADJ	;SIZE IS CHANGING, ADJUST CHARGES
  3113	003000'	321640	003004'		JUMPL	P2,USRFL6	;IF SIZE IS ALREADY UNDER LIMIT, NO REPLACEMENT.
  3114	003001'	260040	004672'	USRFL5:	PUSHJ	P,STOLMA	;PROTECT LMAP SLOT FROM UWSRPL
  3115	003002'	260040	003535'		PUSHJ	P,UWSRPL	;SIZE WAS AT LEAST LIMIT, REPLACE UNTIL ITS UNDER.
  3116	003003'	260040	004623'		PUSHJ	P,GETLMA	;GET IT BACK AGAIN.
  3117	003004'	260040	005267'	USRFL6:	PUSHJ	P,SETUWS	;SET THE UWS BIT FOR PAGE
  3118	003005'	603700	001451*		TLNE	P3,LMPVIR	;IF ITS VIRGIN,
  3119					JRST	[TLNE P3,LMPSUP	;IF SUPER SLOT, DON'T TRY TO GET ATB,
  3120						 JRST USRAUW	; JUST MAKE IT FREE.
  3121						 PUSHJ P,GETATB ;GET ATB TO SEE IF ITS PRIVATE.
  3122						 SKIPGE ATBDUM(T1) ;SKIP IF ITS A FILE PAGE
  3123						 JRST USRAUW	;VIRGIN PRIVATE, ITS FREE.
  3124	003006'	254000	006542'			 JRST .+1]	;VIRGIN FILE PAGE, CHARGE.
  3125	003007'	201440	000001		MOVEI	T4,1		;CHARGE THE USER FOR
  3126	003010'	260040	001523'		PUSHJ	P,CHGPWS	;THIS .
  3127	003011'	254000	003012'		JRST	USRAUW
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 62
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3128				;HERE IF PAGE WAS ALREADY IN UWS (USRIUW)
  3129
  3130	003012'			USRIUW:
  3131
  3132				;HERE IF PAGE WAS IN UWS (USRIUW) OR WAS JUST ADDED TO UWS (USRAUW)
  3133
  3134	003012'	602200	100000	USRAUW:	TRNE	F,SPFW.A	;FAULT WORD SAYS ACCESS FAILURE?
  3135	003013'	254000	003145'		JRST	USRCWR		;NO, CHECK WRITE BIT
  3136
  3137				;PUT PAGE IN MWS, ACTIVATE IT, AND MAKE SURE SWAPIN NOT IN PROGRESS
  3138
  3139	003014'	260040	003621'		PUSHJ	P, FLTMWS
  3140					  JRST	[		;NO BUMPABLE PAGES & AT MWS LIMIT
  3141						PUSHJ	P, STOLMA
  3142						PGFERR(NEC)^	SALL
  3143					JRST	[PUSHJ P,PFENEC
  3144						 JRST FLTBRF]
  3145					XALL^
  3146	003015'	254000	006552'		  ]
  3147
  3148				;PAGE IS NOW ACTIVE, READY FOR USER TO REFERENCE. IF
  3149				; ITS A FILE PAGE, UPDATE STATUS FROM UNSHARED TO SHARED IF
  3150				; SPT ENTRY EXISTS. IF ITS A PRIVATE PAGE, DON'T NEED TO DO
  3151				; THAT SINCE WHEN PRIVATE PAGES BECOME SHARED THE ORIGINAL
  3152				; UNSHARED SLOT GETS UPDATED. BUT HAVE TO SEE IF THE PRIVATE
  3153				; PAGE IS VIRGIN. IF SO, MUST CLEAR VIRGIN AND ZERO THE
  3154				; PAGE.
  3155
  3156	003016'	603700	001701*	USRIU2:	TLNE	P3,LMPSUP	;IS THIS A SUPER SLOT?
  3157	003017'	254000	003064'		JRST	USRIU5		;YES, NO MESSING AROUND.
  3158	003020'	260040	004771'		PUSHJ	P,GETATB	;GET ATB ADDR IN T1
  3159	003021'	335006	001710*		SKIPGE	ATBSTS(T1)	;IS THIS A FILE PGE?
  3160	003022'	254000	003032'		JRST	USRIU3		;NO, GO CHECK FOR VIRGIN
  3161	003023'	321700	003064'		JUMPL	P3,USRIU5	;IF SHARED LMPSHR, DON'T SEARCH SPT
  3162
  3163				;UNSHARED FILE PAGE. SEE IF DP IS IN SPT. IF SO, CHANGE THIS
  3164				; SLOT'S STATUS TO SHARED
  3165
  3166	003024'	260040	004744'		PUSHJ	P,GETDPA	;GET DP ADDRESS IN T2
  3167	003025'	260040	000000*		PUSHJ	P,SRCSPT	;SEE IF DP IS IN SPT
  3168	003026'	254000	003064'		  JRST	USRIU5		;NO, GO CHECK LMMERR, DON'T UPDATE.
  3169	003027'	260040	004440'		PUSHJ	P,SETSHR	;YES. UPDATE STATUS TO SHARED
  3170	003030'	260040	004674'		PUSHJ	P,SETLMA	;STORE SO PGY AND LMAP AGREE IN CASE WE ERROR EXIT
  3171								;BUT STILL KEEP SLOT DATA OUT.
  3172	003031'	254000	003064'		JRST	USRIU5		;AND GO CHECK PGYERR
  3173
  3174				;HERE IF PAGE IS PRIVATE, IT MAY BE VIRGIN.
  3175
  3176	003032'	627700	003005*	USRIU3:	TLZN	P3,LMPVIR	;PRIVATE VIRGIN? (ACTLMA UPDATED LMPVIR)
  3177	003033'	254000	003064'		JRST	USRIU5		;NO.
  3178	003034'	325700	003040'		JUMPGE	P3,USRIU6	;YES. IF UNSHARED, DON'T NEED TO CLEAR SPT VIRGIN BIT.
  3179	003035'	260040	005033'		PUSHJ	P,GETSPT	;GET SPT ENTRY
  3180	003036'	205340	000000*		MOVSI	T2,SPPVIR	;CLEAR VIRGIN BIT
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 62-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3181	003037'	412346	000000*		ANDCAM	T2,SPTVIR(T1)	;SO OTHERS WILL KNOW WE FIXED IT UP.
  3182	003040'	660740	720000	USRIU6:	TRO	P4,PGE.A!PGE.P!PGE.C!PGE.W ;SO WE CAN CLEAR IT
  3183	003041'	260040	004674'		PUSHJ	P,SETLMA	;PUT P4 IN UPT
  3184	003042'	200300	000012		MOVE	T1,W		;GET VP NUMBER IN T1
  3185	003043'	602200	400000		TRNE	F,SPFW.U	;WAS FAULT TO USER ADDR SPACE?
  3186	003044'	254120	006554'		JRSTF	@[PC.UIO,,.+2]	;YES, MAKE SURE WE REFERENCE THAT
  3187	003045'	275300	000440		SUBI	T1,CNVVPN	;NO, CONVERT TO REAL EXEC PAGE NUMBER
  3188								; AND LEAVE USER I/O OFF.
  3189	003046'	507000	000006		HRLS	T1		;GET PAGENUMBER,,PAGENUMBER
  3190	003047'	242300	000011		LSH	T1,^D9		;GET ADDRESS,,ADDRESS
  3191	003050'	201346	000777		MOVEI	T2,777(T1)	;GET END ADDRESS
  3192	003051'	336000	000006		SKIPN	T1		;IF PAGE 0,
  3193	003052'	334300	006555'		SKIPA	T1,[20,,21]	;THIS IS POINTER TO USE
  3194	003053'	271300	000001		ADDI	T1,1		;ELSE GET ADDRESS,,ADDRESS+1
  3195					XCTBU	<SETZM -1(T1)> ;CLEAR FIRST WORD
  3196	003054'	256200	006556'
  3197	003055'	256240	006557'		XCTBU	<BLT T1,(T2)> ;CLEAR THE REST
  3198	003056'	201300	000001		MOVEI	T1,1		;NOW MARK THE PAGE DIRTY
  3199	003057'	260040	005017'		PUSHJ	P,GETCPA	;SETUP PG
  3200	003060'	137300	000000*		DPB	T1,PGYDRT	;MAKE IT DIRTY SO DISK PAGE GETS ZEROED
  3201	003061'	620740	100000		TRZ	P4,PGE.W	;TURN OFF W BIT AGAIN
  3202	003062'	260040	004674'		PUSHJ	P,SETLMA	;PUT GOOD SLOT DATA BACK
  3203								; IN CASE FAULT STILL FAILS WRITE PROTECT)
  3204	003063'	254000	003145'		JRST	USRCWR		;CANNOT BE ERRORS, BITS ALREADY SET.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 63
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3205	003064'	400600	000000	USRIU5:	SETZ	P1,		;START OUT WITH ZERO.
  3206	003065'	336000	001640*		SKIPN	OHTNUM		;ANY OHT ENTRIES?
  3207	003066'	254000	003102'		JRST	USRI5D		;NO, SKIP CHECK THEN.
  3208	003067'	260040	004744'		PUSHJ	P,GETDPA	;GET DP ADDRESS
  3209	003070'	260040	001642*		PUSHJ	P,SRCOHT	;IS DP IN OHT?
  3210	003071'	254000	003102'		  JRST	USRI5D		;NO, ITS OK SO FAR.
  3211	003072'	661600	000004		TLO	P1,EI.OER
  3212	003073'	200311	001645*		MOVE	T1,OHTTAB(T4)	;GET ENTRY, SO CAN CHECK BITS
  3213	003074'	603300	000000*		TLNE	T1,OHTDER	;DEVICE ERROR
  3214	003075'	661600	000002		TLO	P1,EI.DER
  3215	003076'	603300	001301*		TLNE	T1,OHTDTE	;DATA ERROR
  3216	003077'	661600	000001		TLO	P1,EI.DTE
  3217	003100'	603300	001646*		TLNE	T1,OHTPAR	;PARITY ERROR ON OUTPUT (PAGE IS GONE FROM CORE.)
  3218	003101'	661600	000010		TLO	P1,EI.PAR	;YES, FLAG THAT.
  3219	003102'	260040	005017'	USRI5D:	PUSHJ	P,GETCPA	;GET CP NUMBER IN PG
  3220	003103'	135300	001270*		LDB	T1,PGYERR	;GET INPUT ERROR BITS
  3221					JUMPE	T1,[JUMPE P1,USRIU7 ;IF NO INPUT ERROR OR OUTPUT ERRORS, SKIP THIS
  3222	003104'	322300	006560'			    JRST .+1]	;ELSE CONTINUE.
  3223	003105'	602300	000002		TRNE	T1,IODERR_-^D15	;COPY DEVICE AND DATA TO P1
  3224	003106'	661600	000002		TLO	P1,EI.DER
  3225	003107'	602300	000001		TRNE	T1,IODTER_-^D15
  3226	003110'	661600	000001		TLO	P1,EI.DTE
  3227	003111'	603600	000012		TLNE	P1,EI.PAR!EI.DER ;PARITY OR DEVICE CAUSES
  3228	003112'	661700	000444*		TLO	P3,LMPDER	;DEVICE ERROR TO GET SET IN SLOT
  3229	003113'	603600	000001		TLNE	P1,EI.DTE	;DATA ERROR SETS
  3230	003114'	661700	000447*		TLO	P3,LMPDTE	;DATA ERROR.
  3231								;NO NEED TO CHECK LMAP ERROR BITS -
  3232								; DP WILL BE IN OHT UNTIL LAST USER,
  3233								; IF CP ERROR BITS GO AWAY, LET HIM HAVE GOOD DATA.
  3234	003115'	435612	000000		IORI	P1,(W)		;GET PAGE NUMBER IN RH
  3235	003116'	661600	400000		TLO	P1,EI.VAL	;PUT VALID DATA BIT ON
  3236	003117'	603700	002600*		TLNE	P3,LMPNER	;IGNORE ERRORS ON THIS PAGE?
  3237					JRST	[MOVEM P1,%UPT+UPTXEI ;YES, STORE INFO INTO EXEC WORD
  3238	003120'	254000	006562'			 JRST USRIU7]	;AND IGNORE THE ERROR
  3239	003121'	303500	000777		CAILE	W,777		;USER'S PAGE?
  3240	003122'	254000	003141'		  JRST	USRI5B		;NO, DON'T GIVE TRAP TO USER FOR MONITOR'S PROBLEM.
  3241	003123'	135300	000000*		LDB	T1,JBYPER	;GET CHANNEL NUMBER FOR I/O ERRORS
  3242	003124'	322300	003141'		JUMPE	T1,USRI5B	;JUMP IF NOT ENABLED
  3243	003125'	260040	002766*		PUSHJ	P,TSTKTP	;TRY TO TAKE TRAP
  3244	003126'	254000	003131'		  JRST	USRI5A		;OK, GO GIVE IT TO HIM NOW.
  3245	003127'	260040	002770*		PUSHJ	P,TAKTRP	;CAN'T TAKE NOW, GIVE IT LATER.
  3246	003130'	254000	003141'		JRST	USRI5B
  3247
  3248	003131'	321200	003137'	USRI5A:	JUMPL	F,USRI5C	;IF USER MODE, JUST GO TRAP.
  3249	003132'	260040	003345'		PUSHJ	P,SWEDRS	;CAN WE STOP HERE?
  3250	003133'	254000	003135'		  JRST	.+2		;YES. LMAP SLOT STORED NOW.
  3251	003134'	254000	003141'		JRST	USRI5B		;NO. RE-DO CODE, STORE PAGE IN XEI FOR USRSWE IN UUOCON
  3252	003135'	202600	000000*		MOVEM	P1,%UPT+UPTUEI	;CAN GIVE TRAP NOW, STORE FOR USER
  3253	003136'	254000	006564'		PGFERR	(SWE)
  3254	003137'	202600	000000*	USRI5C:	MOVEM	P1,%UPT+UPTUEI	;OK, STORE FOR THE USER
  3255	003140'	254000	003360'		JRST	FLTGRF		;AND DISMISS, GIVING TRAP.
  3256
  3257	003141'	202600	000000*	USRI5B:	MOVEM	P1,%UPT+UPTXEI	;PUT INTO EXEC FAULT WORD IN CASE HE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 63-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3258								; RESTARTS PROGRAM OR SOMETHING.
  3259	003142'	260040	003345'		PUSHJ	P,SWEDRS	;MAKE SURE NOT IN BAD PLACE TO ILL MEM REF (LOOKUP, ETC)
  3260					  PGFERR(SWE)^	SALL
  3261	003143'	254000	006564'
  3262				;	JRST	USRFL7		;IGNORE ERROR. FALL THRU.
  3263								; CAN'T STOP ANYONE WITH RESOURCE AND JBTABT NOT SETUP.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 64
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3264	003144'	660740	600000	USRIU7:	TRO	P4,PGE.A!PGE.P	;OK TO SET ACCESS NOW, SINCE ITS IN UWS,
  3265								; AND MWS, LMPREF=1, ACTIVE, NO SWAP INS,
  3266								; NOT VIRGIN, AND NO SWAP ERRORS.
  3267
  3268				;HERE IF PAGE IS ACCESSIBLE. MAYBE CAN'T WRITE.
  3269
  3270	003145'	602200	010000	USRCWR:	TRNE	F,SPFW.T	;TRIED TO WRITE AND
  3271	003146'	602740	100000		TRNE	P4,PGE.W	;WRITE BIT OFF?
  3272	003147'	254000	003360'		 JRST	FLTGRF		;NO, JUST RETURN
  3273
  3274	003150'	135300	002141*		LDB	T1,LM3CUR	;GET CURRENT PROTECTION
  3275					JRST	@[.+1		;ILLEGAL, CRASH
  3276						 USRBWR		;BAD REF, TRIED TO WRITE.
  3277						 USRCOW		;COPY ON WRITE
  3278	003151'	254026	006566'			 USRRDW](T1)	;READ/WRITE. MAKE IT DIRTY
  3279
  3280					 STOPCD (.,STOP,PFLPR0,,<Page fault writing - Page protection 0>);;USRCWR+5
  3281	003152'	256000	006572'			 	]	;Optional RH is routine to call, LH for data >
  3282								;PROTECTION FIELD WAS ZERO
  3283
  3284	003153'	375000	000000*	USRBWR:	SOSGE	%UPT+UPTLDC	;THROW AWAY LMAP DATA NOW.
  3285					 STOPCD			;COUNT WENT BAD.
  3286	003154'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3287					PGFERR(WRT)^	SALL
  3288	003155'	254000	006575'
  3289
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 65
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3290				;HERE TO MAKE PRIVATE UNSHARED PAGES AND SUPER PAGES
  3291				; READ/WRITE FROM COPY-ON-WRITE.
  3292
  3293	003156'	201300	000003	USRRD0:	MOVEI	T1,CPRRDW	;NEW PROTECTION CODE
  3294	003157'	137300	003150*		DPB	T1,LM3CUR	;NEW PROTECTION IS READ/WRITE
  3295								; FALL THRU AND MAKE IT DIRTY TOO.
  3296
  3297				;HERE IF GOT A WRITE FAULT TRYING TO WRITE INTO A READ/WRITE
  3298				; PAGE. IT MUST HAVE BEEN CLEAN WHEN ACTIVATED. MARK IT DIRTY
  3299				; (MAY BE DIRTY NOW IF SOMEONE ELSE DIRTIED IT AFTER THIS SLOT
  3300				; WAS ACTIVATED).
  3301
  3302	003160'	607700	002142*	USRRDW:	TLNN	P3,LMPACT	;MAKE SURE ITS ACTIVE
  3303					 STOPCD 		;PAGE TABLE DIDN'T GET CLEARED.
  3304	003161'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3305	003162'	660740	100000		TRO	P4,PGE.W	;ALLOW WRITE
  3306	003163'	200140	000017		MOVE	PG,P4		;GET CORE PAGE ADDRESS, BITS
  3307	003164'	405140	017777		ANDI	PG,17777	;JUST CORE PAGE NUMBER
  3308	003165'	474300	000000		SETO	T1,
  3309	003166'	137300	003060*		DPB	T1,PGYDRT	;MAKE CORE PAGE DIRTY IF IT WASN'T BEFORE
  3310	003167'	254000	003360'		JRST	FLTGRF		;AND DISMISS
  3311
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 66
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3312				;HERE IF TRYING TO WRITE INTO A COPY-ON-WRITE PAGE
  3313				; WARNING!!! UUOS THAT WRITE INTO COW PAGES HAD BETTER NOT
  3314				; HAVE CB, RIB, OR SAT, OR ANYTHING ELSE KCREAT, KCLEAR,
  3315				; OR KREPLC MIGHT WANT. DO SETMM FIRST IF UUO HAS THESE RESOURCES.
  3316
  3317	003170'	603700	003016*	USRCOW:	TLNE	P3,LMPSUP	;WRITING INTO COW SUPER SLOTS
  3318	003171'	254000	003266'		JRST	NOSCOW		;THIS IS A NO NO.
  3319	003172'	260040	004771'		PUSHJ	P,GETATB	;GET ATB ADDRESS IN T1
  3320	003173'	335006	003021*		SKIPGE	ATBSTS(T1)	;SKIP IF A FILE PAGE
  3321	003174'	325700	003156'		JUMPGE	P3,USRRD0	;JUMP IF UNSHARED PRIVATE. JUST MAKE READ/WRITE
  3322
  3323	003175'	260040	004672'		PUSHJ	P,STOLMA	;SAVE SLOT CONTENTS IN UPT
  3324	003176'	261040	000012		PUSH	P,W		;SAVE VP NUMBER
  3325	003177'	261040	000004		PUSH	P,F		;SAVE FAULT WORD
  3326	003200'	261040	000013		PUSH	P,M		;AND ADDRESS
  3327	003201'	200100	000000*		MOVE	J,%UPT+UPTJOB	;GET OWN CTX PAGES IN %UPX FOR KERNEL ROUTINES
  3328	003202'	260040	002345'		PUSHJ	P,WLKUPX
  3329					 STOPCD 		;SHOULD ALWAYS BE ABLE TO GET OUR OWN.
  3330	003203'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3331	003204'	200300	006577'		MOVE	T1,[<CPRRED>B7!1B17!%COW.N+CNVVPN] ;ARG FOR REPLICATE
  3332	003205'	200340	000012		MOVE	T2,W		;PAGE TO BE THE SOURCE
  3333	003206'	260040	000000*		PUSHJ	P,KREPLC	;MAP SAME PAGE IN %COW
  3334					 STOPCD 		;COULDN'T FOR SOME REASON
  3335	003207'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3336	003210'	200301	777776		MOVE	T1,-2(P)	;GET VP NUMBER AGAIN
  3337	003211'	505300	000001		HRLI	T1,(1B17)	;COUNT OF 1
  3338	003212'	260040	000272'		PUSHJ	P,KCLEAR	;REMOVE IT
  3339					 STOPCD 		;SHOULD HAVE BEEN THERE
  3340	003213'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3341	003214'	200301	777776		MOVE	T1,-2(P)	;GET USER'S VP NUMBER AGAIN
  3342	003215'	505300	006001		HRLI	T1,(<CPRRDW>B7!1B17) ;NOW CREATE A NEW ONE THERE
  3343	003216'	260040	000164'		PUSHJ	P,KCREAT	;MAKE
  3344	003217'	254000	003321'		  JRST	NOCREA		;MAYBE DISK IS FULL . . .
  3345	003220'	261040	000000*		PUSH	P,%UPLMA+%COW.N+CNVVPN ;SAVE LMPNER FOR OLD PAGE.
  3346	003221'	205340	003117*		MOVSI	T2,LMPNER
  3347	003222'	436340	000000*		IORM	T2,%UPLMA+%COW.N+CNVVPN ;IGNORE ERRORS WHEN WE FAULT
  3348	003223'	550301	777775		HRRZ	T1,-3(P)	;GET VP NUMBER
  3349	003224'	436346	002553*		IORM	T2,%UPLMA(T1)	;ALSO IGNORE ERRORS IN USER'S NEW PAGE.
  3350								;USER PAGE NUMBER ALREADY IN T1
  3351	003225'	305300	001000		CAIGE	T1,1000		;IF THIS IS A USER PAGE,
  3352	003226'	254120	006600'		JRSTF	@[PC.UIO,,.+2]	;MAKE SURE WE REFERENCE USER SPACE.
  3353	003227'	275300	000440		SUBI	T1,CNVVPN	;EXEC SPACE, CONVERT TO REAL PAGE NUMBER.
  3354	003230'	242300	000011		LSH	T1,^D9		;ADDRESS TO BLT TO
  3355	003231'	505300	000000*		HRLI	T1,%COW		;ADDRESS TO BLT FROM (OLD PAGE)
  3356	003232'	200340	000006		MOVE	T2,T1		;GET COPY OF DESTINATION START
  3357	003233'	606300	777777		TRNN	T1,-1		;IF ITS PAGE 0,
  3358	003234'	270300	006601'		ADD	T1,[20,,20]	;DON'T SMASH REAL ACS WITH SHADOW ACS.
  3359					XCTTU	<BLT T1,777(T2)> ;DO WHOLE PAGE (WILL FAULT)
  3360	003235'	256200	006602'
  3361	003236'	205300	002523*		MOVSI	T1,LMMERR	;GET ERROR MASK
  3362	003237'	205340	003221*		MOVSI	T2,LMPNER	;AND IGNORE ERROR BIT
  3363	003240'	612300	000000*		TDNE	T1,%UPLMA+%COW.N+CNVVPN
  3364								;ANY ERRORS HAPPEN ON %COW?
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 66-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3365								; (IGNORE THOSE ON USER PGE, HE'LL SEE THEM LATER)
  3366	003241'	612341	000000		TDNE	T2,(P)		;YES, IGNORING?
  3367	003242'	254000	003245'		JRST	USRCO1		;NO ERRORS OR IGNORING.
  3368	003243'	260040	003350'		PUSHJ	P,SWEDR0	;UH-OH. MAKE SURE WE CAN STOP
  3369	003244'	254000	003271'		  JRST	COWERR		;CAN. UNDO THIS MESS AND RETURN.
  3370	003245'	200300	006603'	USRCO1:	MOVE	T1,[1B17!%COW.N+CNVVPN] ;REMOVE %COW NOW
  3371	003246'	260040	000272'		PUSHJ	P,KCLEAR	;TAKE IT AWAY
  3372	003247'	256000	000000'		 STOPCD 		;COULDN'T!
  3373	003250'	260040	002540'		PUSHJ	P,ULDUPX	;UNLOCKDOWN AND RELEASE UPX.
  3374	003251'	262040	000006		POP	P,T1		;GET ORIGINAL LMPNER SETTING BACK
  3375	003252'	262040	000013		POP	P,M
  3376	003253'	262040	000004		POP	P,F
  3377	003254'	262040	000012		POP	P,W		;RESTORE VIRTUAL PAGE
  3378	003255'	205340	003237*		MOVSI	T2,LMPNER	;GET READY TO SET IT
  3379	003256'	607300	003255*		TLNN	T1,LMPNER	;WAS IT ON?
  3380	003257'	412352	003224*		ANDCAM	T2,%UPLMA(W)	;NO, ITS ALWAYS ON HERE, JUST TURN IT OFF.
  3381	003260'	205340	003236*		MOVSI	T2,LMMERR	;CHECK FOR ERRORS
  3382	003261'	616352	003257*		TDNN	T2,%UPLMA(W)	;ANY? IF NOT, JUST
  3383	003262'	254000	003361'		JRST	FLTGR1		; RETURN, DON'T CALL STOLMA.
  3384	003263'	260040	004623'		PUSHJ	P,GETLMA	;AN ERROR HAPPENED,
  3385	003264'	620740	600000		TRZ	P4,PGE.A!PGE.P	;FORCE FAULT ON NEW COW PAGE.
  3386	003265'	254000	003360'		JRST	FLTGRF		;STORE SLOT AND REFAULT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 67
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3387				;HERE WHEN TRYING TO WRITE INTO A SUPER COW PAGE.
  3388
  3389	003266'	375000	000000*	NOSCOW:	SOSGE	%UPT+UPTLDC	;THROW AWAY LMAP SLOT
  3390	003267'	256000	000000'		 STOPCD
  3391	003270'	254000	006604'		PGFERR(CWS)
  3392
  3393				;HERE IF WE GET I/O ERROR DURING COW PAGE PROCESSING.
  3394				;(P) IS USER'S ORIGINAL LMPNER SETTING, -3(P) IS VP NUMBER.
  3395
  3396	003271'	261040	000000*	COWERR:	PUSH	P,%UPLMA+%COW.N+CNVVPN ;SAVE ERROR BITS
  3397	003272'	205300	000001		MOVSI	T1,(1B17)	;COUNT OF 1
  3398	003273'	540301	777774		HRR	T1,-4(P)	;GET VP NUMBER
  3399	003274'	260040	000272'		PUSHJ	P,KCLEAR	;GET RID OF PRIVATE USER PAGE.
  3400					 STOPCD 		;SHOULD HAVE WORKED.
  3401	003275'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3402	003276'	205300	004001		MOVSI	T1,(<CPRCOW>B7!1B17)
  3403	003277'	540301	777774		HRR	T1,-4(P)	;GET READY TO REPLICATE
  3404	003300'	201340	000440*		MOVEI	T2,%COW.N+CNVVPN ;THE ORIGINAL USER PAGE
  3405	003301'	260040	003206*		PUSHJ	P,KREPLC
  3406					 STOPCD 		;WE ARE INTOLERANT HERE.
  3407	003302'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3408	003303'	200300	006606'		MOVE	T1,[1B17!%COW.N+CNVVPN]
  3409	003304'	260040	000272'		PUSHJ	P,KCLEAR	;GOODBYE COW
  3410					 STOPCD 		;GOODBYE SYSTEM
  3411	003305'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3412	003306'	260040	002540'		PUSHJ	P,ULDUPX	;RELEASE UPX LOCK NOW.
  3413	003307'	262040	000006		POP	P,T1		;GET ERROR BITS
  3414	003310'	404300	006607'		AND	T1,[<LMMERR>B17]
  3415	003311'	262040	000007		POP	P,T2		;LMPNER SETTING
  3416	003312'	262040	000013		POP	P,M
  3417	003313'	262040	000004		POP	P,F		;ADDRESS AND FAULT WORD OFF STACK.
  3418	003314'	262040	000012		POP	P,W		;AND VP NUMBER
  3419	003315'	434312	003261*		IOR	T1,%UPLMA(W)	;SET ERROR BITS IN SLOT.
  3420	003316'	621300	003256*		TLZ	T1,LMPNER	;IF THIS WASN'T OFF, WE WOULDN'T BE HERE
  3421	003317'	202312	003315*		MOVEM	T1,%UPLMA(W)	;NEW SLOT CONTENTS.
  3422	003320'	254000	003361'		JRST	FLTGR1		;AND GO REDO THE FAULT. THIS TIME,
  3423								; ERROR BITS ARE SET IN USERS PAGE,
  3424								; SO HE'LL GET I/O ERROR MESSAGE.
  3425
  3426				;HERE ON VCREAT ERROR RETURN DURING COW PROCESSING
  3427				; USER'S VP NUMBER IS IN -2(P).
  3428
  3429	003321'	553000	000006	NOCREA:	HRRZS	T1
  3430	003322'	302300	000006		CAIE	T1,CRDFL%	;DISK FULL?
  3431					 STOPCD 		;NO, STOP
  3432	003323'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3433	003324'	336002	002332*		SKIPN	JBTABT(J)	;IF INSIDE BAD PLACE,
  3434	003325'	260040	000000*		PUSHJ	P,DRSCHK	;WE SHOULD HAVE WRITTEN FIRST.
  3435	003326'	254000	003330'		  JRST	.+2
  3436					 STOPCD 		;OR ELSE THIS WILL HAPPEN.
  3437	003327'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3438	003330'	205300	004001		MOVSI	T1,(<CPRCOW>B7!1B17)
  3439	003331'	540301	777776		HRR	T1,-2(P)	;GET DESTINATION VP (USER'S)
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 67-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3440	003332'	201340	000440*		MOVEI	T2,%COW.N+CNVVPN	;WHERE HIS ORIGINAL DP IS.
  3441	003333'	260040	003301*		PUSHJ	P,KREPLC
  3442					 STOPCD 		;CAN'T GET BACK
  3443	003334'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3444	003335'	200300	006610'		MOVE	T1,[1B17!%COW.N+CNVVPN]
  3445	003336'	260040	000272'		PUSHJ	P,KCLEAR	;GET RID OF %COW
  3446					 STOPCD^
  3447	003337'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3448	003340'	260040	002540'		PUSHJ	P,ULDUPX	;RELEASE UPX LOCK.
  3449	003341'	262040	000013		POP	P,M		;GET ADDRESS AD
  3450	003342'	262040	000004		POP	P,F		;SOFTWARE FAULT WORD OFF STACK.
  3451	003343'	262040	000012		POP	P,W		;GET VP OFF STACK
  3452					PGFERR(DFC)^	SALL
  3453	003344'	254000	006611'
  3454
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 68
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3455				COMMENT;@@SUBROUTINE SWEDRS/SWEDR0
  3456				@@PURPOSE TELL WHEN TO IGNORE I/O ERRORS. IF GET AN I/O ERROR
  3457				DURING LOOKUP, RENAME, AND ENTER, JBTABT IS NOT SETUP,
  3458				SO IF WE GIVE PAGE FAIL ERROR AND STOP JOB, IT STILL HAS
  3459				RIB. ASSUMPTION IS THAT IT IS TOO DIFFICULT
  3460				TO BACK OUT OF THESE UUOS. SO WE IGNORE THE ERROR
  3461				FOR NOW AND SET A UPTSTS BIT AND UTRP, SO JOB GETS
  3462				STOPPED BEFORE RETURNING TO USER IN USRXIT. UUO COULD
  3463				DO SOMETHING USER DIDN'T WANT IT TO IN THIS CASE-
  3464				POTENTIAL SECURITY PROBLEM.
  3465				@@ENTRY ENTER AT SWEDRS IF HAVE LMAP SLOT, SWEDR0 IF NOT.
  3466				J HAS JOB NUMBER.
  3467				@@ACCUM USES T1
  3468				@@EXIT NON-SKIP IF OK TO GIVE ERROR, SKIP IF NOT OK
  3469				@@RESTRICTIONS CALLED ONLY IN CONTEXT OF JOB IN (J)
  3470				@@FUNCTION IF JBTABT NOT SETUP AND JOB HAS DISK RESOURCE,
  3471				SET UPSSWE AND UTRP, GIVE SKIP RETURN, ELSE
  3472				STORE LMAP SLOT BACK AND GIVE NON-SKIP RETURN.
  3473				@@;
  3474
  3475				EXTERN JBTABT,DRSCHK,UPSSWE,UPTSTS,JBTSTS
  3476
  3477	003345'	260040	003350'	SWEDRS:	PUSHJ	P,SWEDR0	;DO THE WORK
  3478	003346'	324740	004672'		  PJRST	STOLMA		;AND STORE SLOT SO CAN GO TO FLTBRF
  3479	003347'	254000	002623*		JRST	CPOPJ1		;GIVE SKIP RETURN LIKE SWEDR0 DID.
  3480
  3481	003350'	336002	003324*	SWEDR0:	SKIPN	JBTABT(J)
  3482	003351'	260040	003325*		PUSHJ	P,DRSCHK	;
  3483	003352'	263040	000000		  POPJ	P,		;CAN FAIL.
  3484	003353'	205300	000000*		MOVSI	T1,UPSSWE	;HAVE TO IGNORE NOW, BOMB LATER.
  3485	003354'	436300	000000*		IORM	T1,%UPT+UPTSTS
  3486	003355'	201300	040000		MOVEI	T1,UTRP
  3487	003356'	436302	001371*		IORM	T1,JBTSTS(J)	;SO USRXIT WILL SEE UPSSWE
  3488	003357'	254000	003347*		JRST	CPOPJ1		;GIVE SKIP RETURN, BETTER CONTINUE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 69
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3489	003360'	260040	004672'	FLTGRF:	PUSHJ	P,STOLMA	;RETURN SLOT DATA TO SLOT
  3490	003361'			FLTGR1:
  3491	003361'	255000	000000	FLTGR2:	LSTCHK^JFCL^
  3492	003362'	262040	000007		POP	P,T2		;GET CLOCK STATE OFF STACK
  3493	003363'	602340	010000		TRNE	T2,CHGON	;IS CLOCK TO BE BACK ON
  3494					CHARGE	^SALL
  3495	003364'	702600	432000*	^	;YES, TURN IT BACK ON.
  3496	003365'	262040	000007		POP	P,T2		;IN CASE SOMEONE TOUCHED PC.UIO
  3497	003366'	254120	000007		JRSTF	@T2		;RETURN TO CALLER
  3498
  3499	003367'	350001	777777	FLTBRF:	AOS	-1(P)		;GIVE ERROR RETURN
  3500	003370'	254000	003361'		JRST	FLTGR1		;AND RETURN
  3501
  3502				;HERE ON ADDRESS BREAK AND OTHER 20+X FAULTS
  3503
  3504	003371'	135300	006613'	SPCFLT:	LDB	T1,[POINT 5,F,23]	;GET CODE
  3505	003372'	302300	000023		CAIE	T1,PF.ABK	;ADDRESS BREAK
  3506	003373'	254000	006614'		PGFERR(HPF)
  3507					PGFERR(ABK)^	SALL
  3508	003374'	254000	006616'
  3509
  3510				;HERE IF CAN'T ACTIVATE SLOT AT PAGE FAULT LEVEL. MUST
  3511				; WAIT FOR SWAPPER TO ACTIVATE IT, AND THEN CONTINUE WITH
  3512				; THE REST OF PAGE FAULT.
  3513
  3514	003375'	260040	004672'	SWPWAT:	PUSHJ	P,STOLMA	;SAVE SLOT CONTENTS
  3515	003376'	205300	100000		MOVSI	T1,MRQ		;SET SWAPPER ATTENTION BIT
  3516	003377'	436302	003356*		IORM	T1,JBTSTS(J)
  3517	003400'	350000	000000*		AOS	PFWCNT		;COUNT OF TIMES HAD TO CALL SWAPPER.
  3518	003401'	476000	001340*		SETOM	CALSWP		;TELL SCHEDULER TO CALL SWAPPER.
  3519	003402'	260040	002403*		PUSHJ	P,WSCHED	;GO WAIT FOR SWAPPER TO DO US
  3520	003403'	324740	004623'		PJRST	GETLMA		;AND SETUP SLOT CONTENTS AGAIN
  3521
  3522				;HERE FROM BEGINNING OF PAGFLT IF FAULT WAS TO EXEC SPACE.
  3523				; SEE IF LEGAL. IF LEGAL, SEE IF PCBS. IF NOT, ADJUST THE VP
  3524				; NUMBER FROM 340+X TO 1000+X
  3525
  3526	003404'	271500	000440	EXCFLT:	ADDI	W,CNVVPN	;YES, ADJUST VP NUMBER
  3527	003405'	307500	002651*		CAIG	W,VPUMAX	;JUST EXEC PER PROCESS NORMAL SLOT?
  3528	003406'	254000	002705'		JRST	USRFLT		;AND GO REJOIN
  3529
  3530	003407'	307500	001037	EXCFL1:	CAIG	W,1037		;IF EXEC EPT PAGE OR
  3531	003410'	307500	001034		CAIG	W,VPMAX		;CONTEXT PAGE
  3532					PGFERR(BER)^	SALL
  3533	003411'	254000	006620'
  3534					MOVE	PG,[%RB2.C
  3535						    %RIB.C
  3536	003412'	200152	005565'			    %SAT.C]-<%RB2.N+CNVVPN>(W) ;OTHERWISE, ITS A PCB.
  3537					PFALL	PCBFLT		;GO DO PCB STUFF.
  3538
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 70
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3539				;HERE ON PCB PAGE FAULTS.
  3540
  3541				EXTERN PPCBIO,PCBPAG
  3542				EXTERN STACML,STAWLN,STAWTL,STAWTU,STDPRE,STDREA,STDWAG,STDWRT
  3543				EXTERN WAIT1,%CTBYP,%CTSTS,%SAT.C,%RIB.C,%RB2.C,%CTUPT
  3544				EXTERN DSKPIN,DSKPIF,PCISTS,PGYERR
  3545
  3546				DEFINE DSKOFF <WRPI DSKPIF>
  3547				DEFINE DSKON <WRPI DSKPIN>
  3548
  3549				;HERE WITH CONTROL BLOCK ADDRESS IN PG AND JOB NUMBER IN J.
  3550				; SOFT PAGE FAIL WORD IN F.
  3551				;DESTROYS T1-T4.
  3552
  3553				    ;SET UP T2/ PCB ADDRESS AND T3/ REQUEST STATUS.
  3554	003413'	261040	000014	PCBFLT:	PUSH	P,P1		;SAVE P1.
  3555	003414'	550300	000002		HRRZ	T1,J
  3556	003415'	135403	000000*		LDB	T3,%CTSTS(PG)	;REQUEST STATUS.
  3557	003416'	336363	000000*		SKIPN	T2,@%CTUPT(PG)	;T2/ PCB ADDRESS.
  3558					 STOPCD	(.,JOB,PCBFL1,,<Error detected at PCBFLT>);;PCBFLT+4
  3559	003417'	256000	006625'			 	]	;Optional RH is routine to call, LH for data >
  3560
  3561				    ;IF FAULT TO WRITE, CHECK USER ASKED PERMISSION.
  3562	003420'	606200	010000		TRNN	F,SPFW.T	;FAULT TO WRITE?
  3563	003421'	254000	003431'		 JRST	PCBFL4		;NO.
  3564	003422'	302400	000000*		CAIE	T3,STAWTU	;YES.  IS
  3565	003423'	306400	000000*		CAIN	T3,STAWTL	;IT
  3566	003424'	254000	003431'		 JRST	PCBFL4		;OKAY
  3567	003425'	302400	000000*		CAIE	T3,STACML	;TO
  3568	003426'	306400	000000*		CAIN	T3,STAWLN	;WRITE?
  3569	003427'	254000	003431'		 JRST	PCBFL4		;YES, IF WTU/WTL/CML/ OR WLN.
  3570					 STOPCD			;NO.
  3571	003430'	256000	000000'	IFE S$NONAME-S$NONAME,< XCT S$NAME ;**** unnamed STOPCD ****>
  3572
  3573				    ;BRANCH ON DATA PRESENT.
  3574	003431'	700600	000000*	PCBFL4:	DSKOFF^WRPI DSKPIF^
  3575	003432'	135300	000000*		LDB	T1,PCISTS	;T1/ PCB STATUS.
  3576	003433'	135603	000000*		LDB	P1,%CTBYP(PG)	;P1/ MAP SLOT CONTENTS.
  3577	003434'	606300	000000*		TRNN	T1,STDPRE	;IS DATA PRESENT?
  3578	003435'	254000	003454'		 JRST	PCBFL6		;NO.
  3579	003436'	700600	000000*		DSKON^WRPI DSKPIN^
  3580
  3581				      ;HERE ON DATA PRESENT.
  3582	003437'	660600	400000	PCBFL5:	TRO	P1,PGE.A	;SET THE SLOT ACCESSIBLE.
  3583	003440'	606200	010000		TRNN	F,SPFW.T	;WAS IT A FAULT TO WRITE?
  3584	003441'	254000	003450'		 JRST	PCBFDN		;NO.
  3585	003442'	660600	100000		TRO	P1,PGE.W	;YES, ALSO SET SLOT WRITEABLE.
  3586	003443'	201440	000001	PCBFD0:	MOVEI	T4,1		;SET
  3587	003444'	261040	000003		PUSH	P,PG		;THE
  3588	003445'	554147	000000*		HLRZ	PG,PCBPAG(T2)	;PAGE
  3589	003446'	137440	003166*		DPB	T4,PGYDRT	;TO
  3590	003447'	262040	000003		POP	P,PG		;DIRTY.  (DATA MODIFIED.).
  3591	003450'	137603	003433*	PCBFDN:	DPB	P1,%CTBYP(PG)	;
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 70-2
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3592	003451'	262040	000014		POP	P,P1		;
  3593					CLRPTW	^SALL
  3594	003452'	260040	002655'	^		;CLEAR PAGE TABLE ENTRY FOR THIS PAGE.
  3595					PJRST	FLTGR1		;GO RESTORE CLOCK, CLEAR PAGING MEMORY FOR THIS PAGE AND DISMIS
  3596	003453'	324740	003361'	S
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 71
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3597				    ;HERE ON DATA NOT PRESENT.
  3598	003454'	302400	003426*	PCBFL6:	CAIE	T3,STAWLN	;IS THIS WRITE LOCK NEW?
  3599	003455'	254000	003462'		 JRST	PCBFL7		;NO.
  3600	003456'	606300	000000*		TRNN	T1,STDWRT!STDWAG!STDREA ;YES. NEED TO WAIT FOR IO?
  3601					 JRST	[TRO T1,STDPRE	;NO.
  3602						DPB  T1,PCISTS
  3603						PUSH P,PG	;CLEAR PGYERR.
  3604						HLRZ PG,PCBPAG(T2) ;
  3605						SETZ T3,	;
  3606						DPB  T3,PGYERR	;
  3607						POP  P,PG	;
  3608						DSKON
  3609	003457'	254000	006630'			JRST PCBFL9]	;SET SLOT AND DATA PRESENT.
  3610	003460'	200600	000006		MOVE	P1,T1		;NEED TO WAIT FOR IO.
  3611	003461'	254000	003465'		JRST	PCBFL8		;
  3612
  3613				    ;HERE TO REQUEST THE PAGE CONTENTS.
  3614	003462'	200600	000006	PCBFL7:	MOVE	P1,T1		;SAVE THE OLD PCB STATUS.
  3615	003463'	660300	000000*		TRO	T1,STDREA	;SET DATA
  3616	003464'	137300	003432*		DPB	T1,PCISTS	;READ IN THE PCB.
  3617				       ;POSSIBLY REQUEST THAT THE PAGE BE READ IN.
  3618	003465'	261040	000010	PCBFL8:	PUSH	P,T3		;SAVE T3 FROM PPCBIO AND PAGWAT.
  3619	003466'	602600	000000*		TRNE	P1,STDREA!STDWRT!STDWAG ;IO IN PROG FOR THIS PCB?
  3620	003467'	254000	003476'		 JRST	PCBF85		;YES, NO NEED TO START IT.
  3621	003470'	400440	000000		SETZ	T4,		;FLAG READ.
  3622	003471'	261040	000003		PUSH	P,PG		;CLEAR PGYERR.
  3623	003472'	554147	003445*		HLRZ	PG,PCBPAG(T2)	;
  3624	003473'	137440	003103*		DPB	T4,PGYERR	;
  3625	003474'	262040	000003		POP	P,PG		;
  3626	003475'	260040	000000*		PUSHJ	P,PPCBIO	;REQ THE READ. (EXPECTS T2&T4).
  3627	003476'	700600	003436*	PCBF85:	DSKON
  3628	003477'	261040	000007		PUSH	P,T2		;
  3629	003500'	261040	000003		PUSH	P,PG		;WAIT FOR
  3630	003501'	554147	003472*		HLRZ	PG,PCBPAG(T2)	;FINPCB TO
  3631	003502'	260040	005524'		PUSHJ	P,PAGWAT	;WAKE US UP.
  3632	003503'	262040	000003		POP	P,PG		;
  3633	003504'	262040	000007		POP	P,T2		;RESTORE PCB ADDRESS.
  3634	003505'	262040	000010		POP	P,T3		;RESTORE STATUS.
  3635	003506'	135603	003450*		LDB	P1,%CTBYP(PG)	;RESTORE THE MAP SLOT.
  3636	003507'	302400	003454*		CAIE	T3,STAWLN	;
  3637	003510'	254000	003437'		 JRST	PCBFL5		;GO PROCESS DATA PRESENT.
  3638	003511'	700600	003431*		DSKOFF
  3639	003512'	135300	003464*		LDB	T1,PCISTS	;
  3640	003513'	435300	003434*		IORI	T1,STDPRE	;
  3641	003514'	137300	003512*		DPB	T1,PCISTS	;
  3642	003515'	700600	003476*		DSKON
  3643	003516'	660600	500000	PCBFL9:	TRO	P1,PGE.A!PGE.W	;
  3644	003517'	254000	003443'		JRST	PCBFD0		;
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 72
CORE1.MAC	28-OCT-87 17:05		PAGE FAULT HANDLER

  3645				COMMENT ;@@SUBROUTINE TSTVIR
  3646				@@PURPOSE CHECK TO SEE IF A VIRTUAL PAGE IS VIRGIN. UPDATE
  3647				LMPVIR BIT. IF A PRIVATE PAGE IS VIRGIN, IT MEANS THAT
  3648				THE FIRST PERSON TO REFERENCE IT WILL CONNECT A PAGE OF
  3649				ZEROES TO THE DP. IF A FILE PAGE IS VIRGIN, IT MEANS TO
  3650				TRY TO START THE FILE PAGE DATA INTO CORE WITHOUT
  3651				CALLING THE SWAPPER.
  3652				@@ENTRY P3,P4 HAVE LMAP DATA.
  3653				@@ACCUM USES T1-T4.
  3654				@@EXIT RETURNS P3, P4 UPDATED (LMPVIR UPDATED.)
  3655				NON-SKIP IF PAGE IS NOT VIRGIN. SKIP RETURN IF PAGE IS VIRGIN,
  3656				WITH C(T1) NEGATIVE IS VP IS A FILE PGE OR SUPER PAGE, POSITIVE IF
  3657				VP IS PRIVATE.
  3658				@@FUNCTION GIVE NON-SKIP RETURN IF LMPVIR IS OFF.
  3659				ELSE GET ATB FOR VP, SKIP RETURN T1 NEGATIVE IF VP IS A FILE
  3660				PAGE. ELSE IF VP IS PRIVATE UNSHARED, GIVE SKIP
  3661				RETURN WITH C(T1) POSITIVE. ELSE GET SPT ENTRY ADDRESS FROM GETSPT,
  3662				AND IF SPT VIRGIN BIT IS ON IN SPT ENTRY, GIVE SKIP RETURN
  3663				WITH C(T1) POSITIVE (SPT ENTRY ADDRESS). IF SPT VIRGIN BIT
  3664				IN SPT IS OFF, CLEAR LMPVIR IN P3 AND GIVE NON-SKIP RETURN.
  3665				@@;
  3666
  3667	003520'	607700	003032*	TSTVIR::TLNN	P3,LMPVIR	;ANY POSSIBILITY OF BEING VIRGIN?
  3668	003521'	263040	000000		 POPJ	P,		;NO, JUST NON-SKIP RETURN.
  3669	003522'	603700	003170*		TLNE	P3,LMPSUP	;IF ITS A SUPER SLOT,
  3670					 JRST	[SETO T1,	;RETURN T1 NEGATIVE, ITS LIKE A FILE PAGE
  3671	003523'	254000	006641'			 JRST CPOPJ1]	;ITS VIRGIN, TOO.
  3672	003524'	260040	004771'		PUSHJ	P,GETATB	;GET ATB ADDRESS IN T1
  3673	003525'	460306	003173*		SETCM	T1,ATBSTS(T1)	;ATPDUM MUST BE 1B0! T1 -VE IF FILE PAGE
  3674	003526'	321300	003357*		JUMPL	T1,CPOPJ1	;IF ITS VIRGIN FILE PAGE, WE'RE DONE.
  3675	003527'	325700	003526*		JUMPGE	P3,CPOPJ1	;IF UNSHARED PRIVATE PAGE, DONE.
  3676	003530'	260040	005033'		PUSHJ	P,GETSPT	;SHARED PRIVATE. GET SPT ENTRY
  3677	003531'	331006	003037*		SKIPL	SPTVIR(T1)	;VIRGIN BIT ON? (MUST BE 1B0)
  3678	003532'	625700	003520*		 TLZA	P3,LMPVIR	;NO, CLEAR LMPVIR AND GIVE NON-SKIP
  3679	003533'	350001	000000		AOS	(P)		;YES, GIVE SKIP RETURN, T1 IS POSITIVE.
  3680	003534'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 73
CORE1.MAC	28-OCT-87 17:05		USER WORKING SET PAGE REPLACEMENT

  3681				SUBTTL USER WORKING SET PAGE REPLACEMENT
  3682
  3683				COMMENT ;@@SUBROUTINE UWSRPL
  3684				@@PURPOSE FIND A PAGE IN THE UWS TO GET RID OF WHEN
  3685				USER PAGE FAULTS FOR A PAGE NOT IN HIS UWS AND UWS SIZE
  3686				= UWS LIMIT.
  3687				@@ENTRY J HAS JOB NUMBER, %UPT+UPTRPT CONTAINS CURRENT REPLACEMENT
  3688				POINTER. PAGE WE ARE REPLACING FOR MUST NOT ALREADY BE IN UWS,
  3689				ELSE IT MAY GET TAKEN OUT.
  3690				@@ACCUM USES T1-T4, P3,P4. PRESERVES J AND W.
  3691				@@TABLES UWS TABLE
  3692				@@EXIT J AND W SETUP AS CALLED.
  3693				%UPT+UPTRPT HAS NEW REPLACEMENT POINTER. UWS SIZE GUARANTEED
  3694				TO BE UNDER LIMIT.  CALLER MUST CLEAR THE ASSOCIATIVE MEMORY.
  3695				@@FUNCTION
  3696					LASTPAGE := (UPT.RPT + 1) MOD 777
  3697				AGAIN:	DEJAVU := -1
  3698					MAXAGE := -1
  3699					OLDPAGE := -1
  3700					PRESTEP P := FIRST PAGE IN UWS >= LASTPAGE
  3701						IF NO SUCH P
  3702							LASTPAGE := 0
  3703							CONTINUE
  3704						IF DEJAVU = -1
  3705							DEJAVU := P
  3706						ELSEIF P = DEJAVU
  3707							BREAK
  3708						IF P.AGE > MAXAGE
  3709							MAXAGE := P.AGE
  3710							OLDPAGE := P
  3711					REMOVE OLDPAGE FROM UWS
  3712					IF UWS SIZE >= UWS LIMIT
  3713						GOTO AGAIN
  3714					UPT.RPT := OLDPAGE
  3715				@@;
  3716
  3717	003535'	265440	000000*	UWSRPL:	JSP	T4, SAVE2	;SAVE P1 AND P2
  3718	003536'	265440	004075'		JSP	T4, SAVFMU	;AND F AND M AND U
  3719	003537'	261040	000012		PUSH	P, W		;AND W
  3720	003540'	261040	000000		PUSH	P, S		;AND S
  3721
  3722	003541'	135440	002753*		LDB	T4, JBYUWS
  3723	003542'	135300	002754*		LDB	T1, UPYUWL
  3724	003543'	275446	777777		SUBI	T4, -1(T1)
  3725	003544'	260040	001545'		PUSHJ	P, CHGUPA	;CHARGE FOR THE REPLACEMENTS
  3726
  3727	003545'	477600	000015	UWSRP1:	SETOB	P1, P2		;P1/ OLDEST PAGE SEEN, P2/ DEJAVU PAGE
  3728	003546'	474000	000000		SETO	S,		;S/ AGE OF OLDEST PAGE SEEN
  3729	003547'	350500	000000*		AOS	W, %UPT+UPTRPT	;W/ NEXT PAGE TO TRY BUMPING
  3730	003550'	405500	000777		ANDI	W, 777		;(MOD 777)
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 74
CORE1.MAC	28-OCT-87 17:05		USER WORKING SET PAGE REPLACEMENT

  3731	003551'	265200	005405'	UWSRP2:	JSP	F, NXTUWS	;F/ NEXT UWS PAGE
  3732					JRST	[		;IF NONE,
  3733						SETZ	W,
  3734						JRST	UWSRP2	; RETRY FROM PAGE 0
  3735	003552'	254000	006643'		]
  3736
  3737				    ;HERE WITH W/ A UWS PAGE
  3738
  3739	003553'	325640	003556'		JUMPGE	P2, UWSRP3	;IF THIS IS THE FIRST PAGE SEEN,
  3740	003554'	550640	000012		HRRZ	P2, W		;  REMEMBER THE PAGE NUMBER
  3741	003555'	254000	003560'		JRST	UWSRP4
  3742	003556'	306652	000000	UWSRP3:	CAIN	P2, 0(W)	;ELSEIF WE'VE BEEN HERE BEFORE,
  3743	003557'	254000	003571'		JRST	UWSRP5		;  THE SEARCH IS DONE
  3744
  3745	003560'	550300	000012	UWSRP4:	HRRZ	T1, W
  3746	003561'	231300	002743*		IDIVI	T1, AGECPW	;T1/ AGE CELL WORD, T2/ CELL # IN WORD
  3747	003562'	135347	002745*		LDB	T2, AGEPTR(T2)	;T2/ AGE OF PAGE W
  3748	003563'	317340	000000		CAMG	T2, S		;IF AGE <= MAXAGE,
  3749	003564'	254013	000000		JRST	(M)		;  GO TRY ANOTHER PAGE
  3750	003565'	265400	004107'		JSP	T3,REPOK	;SEE IF PAGE IS BUMPABLE
  3751	003566'	202340	000000		MOVEM	T2, S		;S/ MAXIMUM AGE SEEN SO FAR
  3752	003567'	552500	000014		HRRZM	W, P1		;P1/ OLDEST PAGE SEEN SO FAR
  3753	003570'	254013	000000		JRST	(M)		;GO LOOK FOR AN OLDER ONE
  3754
  3755				    ;HERE WITH P1/ THE OLDEST PAGE'S PAGE NUMBER
  3756
  3757	003571'	202500	000000*	UWSRP5:	MOVEM	W, %UPT+UPTRPT	;UPDATE POINTER
  3758	003572'	265200	005444'		JSP	F, FINXWS	;UNDO NXTUWS'S DAMAGE
  3759	003573'	335500	000014		SKIPGE	W, P1		;W/ OLDEST PAGE
  3760	003574'	256000	000000'		 STOPCD
  3761	003575'	260040	004623'		PUSHJ	P, GETLMA	;GET PAGE W'S SLOT
  3762	003576'	260040	003607'		PUSHJ	P, REMUWS	;REMOVE PAGE P FROM UWS
  3763	003577'	260040	004672'		PUSHJ	P, STOLMA
  3764	003600'	135300	003541*		LDB	T1, JBYUWS	;T1/ UWS SIZE
  3765	003601'	135340	003542*		LDB	T2, UPYUWL	;T2/ UWS LIMIT
  3766	003602'	311300	000007		CAML	T1, T2		;IF SIZE >= LIMIT
  3767	003603'	254000	003545'		JRST	UWSRP1		;  GO BUMP ANOTHER PAGE
  3768
  3769	003604'	262040	000000		POP	P, S
  3770	003605'	262040	000012		POP	P, W		;RESTORE S AND W
  3771	003606'	263040	000000		POPJ	P,		;AND P1-P2 AND F AND M AND U
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 75
CORE1.MAC	28-OCT-87 17:05		REMOVE FROM UWS

  3772				SUBTTL REMOVE FROM UWS
  3773
  3774				COMMENT ;@@SUBROUTINE REMUWS
  3775				@@PURPOSE TAKE VP OUT OF UWS, GIVE MWS HANDLERS A CHANCE TO
  3776				TAKE IT OUT OF MWS IF THEY WANT TO. CALLED BY USER WORKING SET
  3777				PAGE REPLACEMENT, REMOVE FROM UWS UUO.
  3778				@@ENTRY P3, P4 CONTAIN LMAP SLOT DATA, W CONTAINS VP NUMBER
  3779				@@ACCUM PRESERVES P1-P4, USES T1-T4.
  3780				@@EXIT P3 AND P4 HAVE NEW LMAP SLOT DATA. CALLER MUST STORE
  3781				THEM BACK. PAGE IS OUT OF UWS, MAY OR MAY NOT BE IN MWS. ACCESS
  3782				BIT IS CLEARED. CALLER RESPONSIBLE FOR CLEARING A.M.
  3783				@@RESTRICTIONS
  3784				@@FUNCTION CLEAR UWS BIT FOR PAGE, DECREMENT UWS SIZE.
  3785				TURN OFF ACCESS BIT. CALL CRMMWS TO GIVE MWS HANDLERS A CHANCE
  3786				TO REMOVE IT FROM MWS IF THEY DESIRE TO DO SO.
  3787				@@;
  3788
  3789	003607'	260040	005365'	REMUWS::PUSHJ	P,TSTUWS	;IS IT IN UWS?
  3790	003610'	263040	000000		  POPJ	P,		;NO, NOTHING TO DO.
  3791	003611'	260040	005327'		PUSHJ	P,CLRUWS	;CLEAR UWS BIT IN TABLE, DECRMENT SIZE
  3792	003612'	620740	400000		TRZ	P4,PGE.A	;CLEAR ACCESS BIT IN UPT
  3793	003613'	324740	003730'		PJRST	CRMMWS		;AND TAKE OUT OF MWS POSSIBLY.
  3794
  3795				;RMXUWS IS THE SAME AS REMUWS EXCEPT IT OPERATES IN %UPX, AND DOESN'T
  3796				; CALL CONDITIONAL REMOVE FROM MWS ROUTINE.
  3797
  3798	003614'	260040	005364'	RMXUWS::PUSHJ	P,TSXUWS	;IS IT IN UWS?
  3799	003615'	263040	000000		  POPJ	P,		;NO, NOTHING TO DO
  3800	003616'	260040	005326'		PUSHJ	P,CLXUWS	;TURN OFF UWS BIT
  3801	003617'	620740	400000		TRZ	P4,PGE.A	;MAKE SURE ACCESS BIT TURNED OFF
  3802	003620'	263040	000000		POPJ	P,		;LET CALLER DO SOMETHING ABOUT MWS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 76
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3803				SUBTTL MWS HANDLING
  3804
  3805				COMMENT ;@@SUBROUTINE FLTMWS
  3806				@@PURPOSE PUT A PAGE IN THE MWS FOR SURE, ACTIVATE THE PAGE,
  3807				AND MAKE SURE SWAP IN IS NOT IN PROGRESS, I.E. MAKE PAGE
  3808				READY TO BE REFERENCED BY THE USER. CALLED FROM PAGE FAULT
  3809				CODE. SKIP-RETURNS IF IT SUCCEEDED, NONSKIP-RETURNS IF MWSRPL
  3810				COULDN'T MAKE ROOM FOR THE PAGE (AND WE NEEDED ROOM).
  3811				@@ENTRY J,W,P3,P4 SETUP FOR SLOT TO BE PUT INTO MWS.
  3812				@ACCUM PRESERVES P1-P2. USES T ACS.
  3813				@@EXIT P3,P4 CONTAIN UPDATED LMAP SLOT DATA.
  3814				DOES NOT AFFECT THE ACCESS BIT IN UPT, CALLER MUST SET IT IF
  3815				DESIRED.
  3816				CALLER MUST CLEAR THE A.M.
  3817				@@RESTRICTIONS ONLY CALLED FROM UUO LEVEL FOR CURRENT JOB
  3818				WHEN %UPT IS ADDRESSABLE SO STOLMA AND GETLMA CAN BE
  3819				CALLED.
  3820				@@FUNCTION IF PAGE IS IN MWS ALREADY, TO SEE IF ITS ACTIVE
  3821				IF PAGE IS NOT IN MWS AND MWS SIZE IS UP TO MWS LIMIT
  3822				(MWSLIM)
  3823				THEN DO MWS PAGE REPLACEMENT ALGORITHM. INSERT NEW PAGE
  3824				IN MWS BIT TABLE, INCREMENT MWS SIZE. IF PAGE IS NOT ACTIVE,
  3825				TRY TO ACTIVATE IT. IF CANNOT, CALL SWAPPER, AND ON RETURN,
  3826				CHECK TO SEE IF ITS ACTIVE AGAIN. IF ITS ACTIVE, MAKE
  3827				SURE SWAP IN IS NOT IN PROGRESS (USER NOT ALLOWED TO TOUCH
  3828				PAGE IF SO).
  3829				IF MWSRPL CAN'T MAKE ROOM NONSKIP-RETURN OTHERWISE SKIP-RETURN.
  3830				@@;
  3831
  3832	003621'	260040	005370'	FLTMWS:	PUSHJ	P,TSTMWS	;IN MWS ALREADY?
  3833	003622'	254000	003624'		  JRST	.+2
  3834	003623'	254000	003643'		JRST	FLTMW4		;YES, GO SEE IF ITS ACTIVE
  3835	003624'	303500	000777		CAILE	W, 777		;IS IT A USER PAGE?
  3836	003625'	254000	003642'		JRST	FLTMW3		;NO -- ALWAYS ADD IT
  3837	003626'	350002	000000*		AOS	JBTAJF(J)	;BUMP MWS-FAULT COUNT
  3838	003627'	200302	003377*		MOVE	T1, JBTSTS(J)
  3839	003630'	606300	400000		TRNN	T1, JWSADJ	;IF MWS ADJUST IN EFFECT
  3840	003631'	254000	003634'		JRST	FLTMW1
  3841	003632'	332000	000000*		SKIPE	%UPT+UPTMAT	;AND THERE'RE REPLACEABLE PAGES,
  3842	003633'	254000	003640'		JRST	FLTMW2		;  THROW THEM OUT
  3843	003634'	135300	000000*	FLTMW1:	LDB	T1, JBYMWS	;T1/ # MWS PAGES
  3844	003635'	200340	000000*		MOVE	T2, MWSLIM
  3845	003636'	305307	000000*		CAIGE	T1, -NCTXPG(T2)	;IF OVER GLOBAL MWS LIMIT
  3846	003637'	254000	003642'		JRST	FLTMW3
  3847	003640'	260040	003745'	FLTMW2:	PUSHJ	P,MWSRPL	;THROW PAGES OUT TO MAKE ROOM
  3848	003641'	263040	000000		  POPJ	P,		;CAN'T MAKE ROOM
  3849	003642'	260040	005276'	FLTMW3:	PUSHJ	P,SETMWS	;SET THE MWS BIT, INCREMENT SIZE
  3850	003643'	350001	000000	FLTMW4:	AOS	(P)		;PREPARE FOR SUCCESS-RETURN
  3851
  3852	003644'	603700	003160*	FLTMW5:	TLNE	P3,LMPACT	;ACTIVE?
  3853	003645'	254000	003651'		JRST	FLTMW6		;YES, MAKE SURE NO SWAP INS.
  3854	003646'	350000	000000*		AOS	PFICNT		;TIMES FAULTED FOR INACTIVE PGE
  3855	003647'	260040	004130'		PUSHJ	P,ACTLMA	;NO, TRY TO ACTIVATE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 76-2
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3856					  JRST	[PUSHJ P,SWPWAT	;WASN'T IN CORE, MAKE SWAPPER WORK
  3857	003650'	254000	006645'			 JRST FLTMW5]	;AND MAKE SURE ITS STILL THERE
  3858	003651'	260040	005017'	FLTMW6:	PUSHJ	P,GETCPA	;GET CORE PAGE ADDRESS FROM LMAP SLOT
  3859	003652'	135300	001343*		LDB	T1,PGYSIP	;GET SWAP IN IN PROGRESS BIT
  3860	003653'	322300	001102*		JUMPE	T1,CPOPJ	;READY TO GO IF NO SWAP IN
  3861	003654'	260040	004672'		PUSHJ	P,STOLMA	;STORE IN CASE IT CHANGES
  3862	003655'	260040	005524'		PUSHJ	P,PAGWAT	;GO WAIT FOR SWAP IN TO STOP
  3863	003656'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP SLOT AGAIN
  3864	003657'	254000	003644'		JRST	FLTMW5		;AND MAKE SURE ITS STILL AROUND BEFORE
  3865								;CHECKING PGYSIP AGAIN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 77
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3866				COMMENT ;@@SUBROUTINE PRFMWS
  3867				@@PURPOSE PUT A PAGE IN THE MWS FOR SURE, TRY TO ACTIVATE PAGE,
  3868				IF CAN'T JUST GIVE UP. CALLED FROM PREREFERENCE.
  3869				@@ENTRY J,W,P3,P4 SETUP FOR SLOT TO BE PUT INTO MWS
  3870				@@ACCUM PRESERVES P1-P2. USES T ACS
  3871				@@EXIT P3,P4 CONTAIN UPDATED LMAP SLOT DATA, CALLER MUST
  3872				CLEAR THE A.M. ACCESS BIT MAY BE CHANGED.
  3873				@@FUNCTION IF PAGE IS ALREADY IN MWS, GO SEE IF ITS ACTIVE, AND
  3874				IF NOT, TRY TO ACTIVATE IT. GIVE UP IF NOT IN CORE. IF
  3875				PAGE IS NOT IN MWS, PUT INTO MWS, REPLACING A  MWS PAGE
  3876				IF NECESSARY, AND TO THE ABOVE.
  3877				@@;
  3878
  3879	003660'	260040	005370'	PRFMWS:	PUSHJ	P,TSTMWS	;IN MWS YET
  3880	003661'	254000	003666'		  JRST	CINMW1		;NOT YET, PUT IT THERE.
  3881	003662'	254000	003704'		JRST	CINMW5		;YES, TRY TO ACTIVATE IT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 78
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3882				COMMENT ;@@SUBROUTINE CINMWS, CINMW1, CINMW5
  3883				@@PURPOSE GIVE PAGE A CHANCE TO GET INTO THE MWS, MAY OR MAY
  3884				NOT GET INTO MWS. CALLED FROM INSERT IN UWS UUO
  3885				@@ENTRY P3,P4 CONTAIN LMAP DATA, J,W SETUP TO JOB AND VP.
  3886				@@ACCUM PRESERVES P1,P2. USES T1-T4, CHANGES P3,P4
  3887				@@EXIT CALLER MUST CLEAR A.M. P3 AND P4 CONTAIN NEW LMAP SLOT
  3888				DATA.
  3889				@@FUNCTION IF NOT IN MWS ALREADY, DECIDE WHETHER OR NOT
  3890				TO PUT IT INTO THE MWS. IF DECIDE NOT TO, JUST RETURN.
  3891				NEXT CHECK IF PAGE IS ACTIVE. IF NOT, TRY TO ACTIVATE IT.
  3892				IF CANNOT, JUST RETURN. IF PAGE IS ACTIVE, AND NO SWAP IN
  3893				IN PROGRESS, IS IN UWS, REF BIT IS ON AND ERROR BIT AND VIRGIN
  3894				BIT ARE OFF, SET ACCESS AND PUBLIC IN UPT WORD IN P4.
  3895				@@;
  3896
  3897	003663'	260040	005370'	CINMWS:	PUSHJ	P,TSTMWS	;IN ALREADY?
  3898	003664'	254000	003666'		  JRST	.+2		;NO, SEE IF IT SHOULD GO IN
  3899	003665'	254000	003704'		JRST	CINMW5		;IN ALREADY, SEE IF ITS ACTIVE
  3900
  3901				;HERE IF NOT IN MWS YET. MAYBE IT WILL GO IN, MAYBE NOT.
  3902
  3903				;	JFCL			;CALL ROUTINE TO SEE IF IT SHOULD GO IN
  3904				;	  POPJ	P,		;NO, JUST RETURN.
  3905
  3906	003666'	303500	000777	CINMW1:	CAILE	W, 777		;IS IT A USER PAGE?
  3907	003667'	254000	003703'		JRST	CINMW4		;NO -- ALWAYS PUT IT IN
  3908	003670'	200302	003627*		MOVE	T1, JBTSTS(J)
  3909	003671'	606300	400000		TRNN	T1, JWSADJ	;IF MWS IS IN EFFECT
  3910	003672'	254000	003675'		JRST	CINMW2
  3911	003673'	332000	000000*		SKIPE	%UPT+UPTMAT	;AND THERE'RE REPLACEABLE PAGES,
  3912	003674'	254000	003701'		JRST	CINMW3		;  THROW THEM OUT
  3913	003675'	135300	003634*	CINMW2:	LDB	T1, JBYMWS	;T1/ # MWS PAGES
  3914	003676'	200340	003635*		MOVE	T2, MWSLIM
  3915	003677'	305307	000000*		CAIGE	T1, -NCTXPG(T2)	;IF SIZE >= LIMIT
  3916	003700'	254000	003703'		JRST	CINMW4
  3917	003701'	260040	003745'	CINMW3:	PUSHJ	P, MWSRPL	;THROW PAGES OUT TO MAKE ROOM
  3918	003702'	263040	000000		  POPJ	P,		;CAN'T MAKE ROOM
  3919	003703'	260040	005276'	CINMW4:	PUSHJ	P,SETMWS	;SET THE MWS BIT AND INCREMENT SIZE
  3920
  3921				;HERE IF PAGE IS IN MWS. SEE IF ITS ACTIVE
  3922
  3923	003704'	603700	003644*	CINMW5:	TLNE	P3,LMPACT	;IS IT ACTIVE?
  3924	003705'	254000	003710'		JRST	CINMW6		;YES, GO SEE IF CAN SET THE ACCESS BIT
  3925	003706'	260040	004130'		PUSHJ	P,ACTLMA	;TRY TO ACTIVATE IT
  3926	003707'	263040	000000		  POPJ	P,		;CANNOT, FORGET THE A BIT.
  3927
  3928				;HERE TO TRY TO SET THE ACCESS BIT AND AVOID A FAULT
  3929
  3930	003710'	260040	005017'	CINMW6:	PUSHJ	P,GETCPA	;GET CORE PAGE ADDRESS IN PG
  3931	003711'	135300	003652*		LDB	T1,PGYSIP	;IS SWAP IN IN PROGRESS?
  3932	003712'	326300	003653*		JUMPN	T1,CPOPJ	;FORGET IT IF SO
  3933	003713'	260040	005365'		PUSHJ	P,TSTUWS	;OK, IS IT IN UWS?
  3934	003714'	263040	000000		  POPJ	P,		;NO, MAKE HIM FAULT
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 78-2
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3935	003715'	336000	003065*		SKIPN	OHTNUM		;ANYTHING IN OHT?
  3936	003716'	254000	003723'		JRST	CINMW7		;NO, CONTINUE
  3937	003717'	260040	004744'		PUSHJ	P,GETDPA	;SEARCH IT
  3938	003720'	260040	003070*		PUSHJ	P,SRCOHT	;IF ITS HAD AN OUTPUT ERROR,
  3939	003721'	254000	003723'		  JRST	CINMW7		;NO
  3940	003722'	263040	000000		POPJ	P,		;THEN DON'T SET "A" BIT, FORCE FAULT.
  3941	003723'	603700	002734*	CINMW7:	TLNE	P3,LMPREF	;IS REF BIT ON AND
  3942	003724'	603700	000000*		TLNE	P3,LMMERR!LMPVIR	;ERROR AND VIRGIN OFF?
  3943	003725'	263040	000000		POPJ	P,		;NOT READY TO TURN ACCESS BIT ON
  3944	003726'	660740	600000		TRO	P4,PGE.A!PGE.P	;OK TO LET USER REFERENCE RIGHT AWAY.
  3945	003727'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 79
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3946				COMMENT ;@@SUBROUTINE CRMMWS
  3947				@@PURPOSE CONDITIONALLY REMOVE PAGE FROM MWS. MAYBE WE'RE FEELING
  3948				GENEROUS AND WILL LEAVE IT IN ANYWAY. CALLED BY REMOVE FROM UWS
  3949				UUO.
  3950				@@ENTRY THE USUAL - P3,P4 CONTAIN LMAP SLOT DATA, J AND W
  3951				CONTAIN JOB AND VP NUMBER OF PAGE.
  3952				@@ACCUM USES T1-T4, PG, CHANGES P3,P4
  3953				@@EXIT CALLER SHOULD NOT RELY ON THIS ROUTINE TO CLEAR
  3954				THE ACCESS BIT, ALTHOUGH IT WILL IF THE PAGE IS
  3955				AACTUALLY REMOVED FROM THE MWS.
  3956				@@FUNCTION IF PAGE IS NOT IN MWS, JUST RETURN.
  3957				DECIDE WHETHER OR NOT TO TAKE THIS PAGE OUT OF MWS.
  3958				IF NOT, JUST RETURN. IF SO, GO DEACTIVATE SLOT AND
  3959				CLEAR MWS BIT FOR PAGE, DECREMENT MWS SIZE AND RETURN.
  3960				@@;
  3961
  3962	003730'	260040	005370'	CRMMWS:	PUSHJ	P,TSTMWS	;IN MWS ALREADY?
  3963	003731'	263040	000000		  POPJ	P,		;NO, DO NOTHING
  3964				;	JFCL			;TAKE OUT OF MWS?
  3965				;	  POPJ	P,		;NO, DON'T TAKE IT OUT.
  3966	003732'	324740	003735'		PJRST	REMMW1		;YES, TAKE IT OUT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 80
CORE1.MAC	28-OCT-87 17:05		MWS HANDLING

  3967				COMMENT ;@@SUBROUTINE REMMWS
  3968				@@PURPOSE MAKE SURE PAGE COMES OUT OF MWS. CALLED BY REMOVE,
  3969				MWS REPLACEMENT ALGORITHM
  3970				@@ENTRY P3, P4 CONTAIN LMAP SLOT DATA, J AND W CONTAIN
  3971				JOB AND VP NUMBER.
  3972				@@ACCUM DESTROYS PG, T1-T4. PRESERVES P1,P2. CHANGES P3,P4
  3973				@@EXIT DEACTIVATED SLOT DATA IN P3,P4. CALLER MUST STORE
  3974				SLOT DATA BACK INTO UPT, CLEAR THE A.M.
  3975				@@FUNCTION IF PAGE IS NOT IN MWS, JUST RETURN.
  3976				IF PAGE IS IN MWS, DEACTIVATE THE SLOT, CLEAR THE MWS BIT
  3977				AND DECREMENT THE MWS SIZE. CALL A ROUTINE TO SEE
  3978				IF MWS SHOULD HAVE ANOTHER PAGE ADDED TO REPLACE THE ONE JUST
  3979				TAKEN OUT, AND RETURN.
  3980				@@;
  3981
  3982	003733'	260040	005370'	REMMWS::PUSHJ	P,TSTMWS	;IN MWS ALREADY?
  3983	003734'	263040	000000		  POPJ	P,		;NOT THERE, DO NOTHING.
  3984
  3985				;HERE FROM CONDITIONAL REMOVE FROM MWS
  3986
  3987	003735'	260040	004322'	REMMW1:	PUSHJ	P,DEALMA	;DEACTIVATE THE SLOT
  3988	003736'	260040	005337'		PUSHJ	P,CLRMWS	;TURN OFF MWS BIT AND DECREMENT SIZE
  3989	003737'	324740	003712*		PJRST	CPOPJ		;AND FINISH UP BY CALLING ROUTINE TO
  3990								; POSSIBLY ADD ANOTHER PAGE TO MWS.
  3991
  3992	003740'	260040	005367'	RMXMWS::PUSHJ	P,TSXMWS	;IN MWS ALREADY?
  3993	003741'	263040	000000		  POPJ	P,		;NO, NOTHING TO DO
  3994	003742'	260040	004322'		PUSHJ	P,DEALMA	;CAN'T HAVE ACTIVE SLOT NOT IN MWS
  3995	003743'	260040	005336'		PUSHJ	P,CLXMWS	;TURN OFF MWS BIT, ADJUST COUNTS
  3996	003744'	324740	003737*		PJRST	CPOPJ		;AND POSSIBLY ADD ANOTHER PAGE TO MWS.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 81
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  3997				SUBTTL	MONITOR WORKING SET PAGE REPLACEMENT
  3998
  3999				;MWSREP FUNCTION CODES
  4000
  4001			000000	.MRFNA==0	;PAGE FAULT, DON'T DO MWS ADJUSTMENT
  4002			000001	.MRFDA==1	;PAGE FAULT, DO DO MWS ADJUSTMENT
  4003			000002	.MRADJ==2	;DO MWS ADJUSTMENT
  4004
  4005				COMMENT #
  4006				@@SUBROUTINE MWSRPL
  4007				@@PURPOSE CALLED WHEN A PAGE WANTS OR NEEDS TO GET INTO THE MWS
  4008				AND EITHER (1) MWS SIZE >= MWSLIM (THERE'S NO ROOM), OR (2)
  4009				MWS ADJUSTMENT IS IN EFFECT AND UPT.MAT > 0 (THERE'RE PAGES IN
  4010				THE MWS THAT OUGHT TO BE REPLACED).
  4011				@@ENTRY	P3,P4/ LMAP SLOT FOR THE PAGE THAT WANTS IN
  4012					W/ ITS VP NUMBER
  4013					J/ JOB NUMBER
  4014				@@ACCUM	DESTROYS T1-T4, PRESERVES J AND W, POSSIBLY MODIFIES P4.
  4015				@@TABLES (SEE MWSREP)
  4016				@@EXIT SKIP-RETURNS IF THERE'S ROOM FOR THE NEW PAGE
  4017				(MWS SIZE < MWSLIM), NONSKIP-RETURNS IF THERE'S NOT
  4018				@@ #
  4019
  4020	003745'	260040	004672'	MWSRPL:	PUSHJ	P, STOLMA	;SAVE P3 AND P4
  4021	003746'	261040	000014		PUSH	P, P1
  4022	003747'	261040	000015		PUSH	P, P2
  4023	003750'	261040	000012		PUSH	P, W		;AND P1, P2, AND W
  4024	003751'	201600	400000		MOVEI	P1, JWSADJ
  4025	003752'	612602	003670*		TDNE	P1, JBTSTS(J)	;IF DOING MWS ADJUSTMENT,
  4026	003753'	334600	006647'		SKIPA	P1, [.MRFDA]	;SAY SO,
  4027	003754'	201600	000000		MOVEI	P1, .MRFNA	;ELSE SAY NO
  4028	003755'	260040	003764'		PUSHJ	P, MWSREP	;DO THE ACTUAL WORK
  4029	003756'	254000	003760'		JRST	.+2
  4030	003757'	350001	777775		AOS	-3(P)		;RECORD THE SUCCESS (IF ANY)
  4031	003760'	262040	000012		POP	P, W
  4032	003761'	262040	000015		POP	P, P2
  4033	003762'	262040	000014		POP	P, P1
  4034	003763'	324740	004623'		PJRST	GETLMA		;RESTORE W AND P3 AND P4
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 82
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4035				COMMENT	#
  4036				@@SUBROUTINE MWSREP
  4037				@@PURPOSE THROWS OLDEST PAGES OUT OF J'S MWS ACCORDING TO THE
  4038				FUNCTION CODE PASSED IN P1 BY THE CALLER:
  4039					.MRFNA	(FAULTED, NO ADJUSTMENT)
  4040						THROW OUT PAGES UNTIL MWSSIZE < MWSLIM
  4041					.MRADJ	(ADJUST MWS)
  4042						THROW OUT PAGES UNTIL MWSSIZE < MWSLIM
  4043						AND ALL "ELDERLY" PAGES HAVE BEEN DISCARDED
  4044					.MRFDA	(FAULTED, DO ADJUSTMENT)
  4045						THROW OUT PAGES UNTIL MWSSIZE < MWSLIM
  4046						AND ALL "ELDERLY" PAGES HAVE BEEN DISCARDED
  4047						AND THE OLDEST "MATURE" PAGE HAS BEEN DISCARDED
  4048				@@ENTRY	P1/ FUNCTION CODE (SEE ABOVE), J/ JOB NUMBER.
  4049				@@ACCUM	DESTROYS T1-T4 AND P1-P4 AND W.
  4050				@@TABLES UPTMWB (MWS BIT TABLE) AND UPTAGE (PAGE AGE TABLE).
  4051				@@EXIT SKIP-RETURNS IF MWSSIZE < MWSLIM, NONSKIP-RETURNS OTHERWISE
  4052				@@FUNCTION
  4053					LASTPAGE := (UPT.RPT + 1) MOD 777
  4054				AGAIN:	IF MWS SIZE = 0
  4055						IF MWS LIMIT = 0
  4056							NONSKIP:RETURN
  4057						ELSE
  4058							SKIP-RETURN
  4059					DEJAVU := -1
  4060					MAXAGE := IF MWS SIZE > MWS LIMIT {0}
  4061						  ELSE CASE FUNCTION OF
  4062						  {.MRFNA: -1; .MRFDA: AGEMAT-1; .MRADJ: AGEELD-1}
  4063					OLDPAGE := -1
  4064					PRESTEP P := FIRST PAGE IN MWS >= LASTPAGE
  4065						IF NO SUCH P OR P > 777
  4066							LASTPAGE := 0
  4067							CONTINUE
  4068						IF DEJAVU = -1
  4069							DEJAVU := P
  4070						ELSEIF P = DEJAVU
  4071							BREAK
  4072						IF P.DIO > 0
  4073							CONTINUE
  4074						IF P.AGE > MAXAGE
  4075							MAXAGE := P.AGE
  4076							OLDPAGE := P
  4077					IF OLDPAGE NEQ -1
  4078						REMOVE OLDPAGE FROM MWS
  4079						IF FUNCTION = .MRFDA AND MAXAGE >= AGEELD
  4080						ORIF MWS SIZE >= MWS LIMIT
  4081							GOTO AGAIN
  4082						UPT.RPT := OLDPAGE
  4083						SKIP-RETURN
  4084					ELSEIF MWS SIZE >= MWS LIMIT
  4085						NONSKIP-RETURN
  4086					ELSE
  4087						SKIP-RETURN
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 82-2
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4088				@@ #
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 83
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4089	003764'	265440	004075'	MWSREP:	JSP	T4, SAVFMU	;SAVE F AND M AND U
  4090	003765'	261040	000003		PUSH	P, PG		;SAVE PG
  4091	003766'	261040	000000		PUSH	P, S		;SAVE S
  4092	003767'	200300	003676*		MOVE	T1, MWSLIM
  4093	003770'	275300	000000*		SUBI	T1, NCTXPG
  4094	003771'	261040	000006		PUSH	P, T1		;0(P)/ MWS SIZE UPPER BOUND
  4095
  4096	003772'	135300	003675*	MWSRP1:	LDB	T1, JBYMWS	;T1/ MWS SIZE
  4097	003773'	135340	000000*		LDB	T2, JBYPPP	;T1/ # MWS PAGES FOR SIMIO
  4098	003774'	276300	000007		SUBM	T1, T2		;T2/ # MWS PAGES SUBJECT TO REPLACEMENT
  4099	003775'	322340	004066'		JUMPE	T2, MWSRP8	;LEAVE IF THERE AREN'T ANY
  4100	003776'	311301	000000		CAML	T1, 0(P)	;IF OVER LIMIT OR AT LIMIT,
  4101	003777'	634000	000000		 TDZA	S, S		;DISCARD ANY PAGE
  4102					MOVE	S, @[		;ELSE SET MINIMUM AGE FROM FUNCTION:
  4103						[0]		;.MRFNA -- THROW OUT ANY PAGE
  4104						AGEMAT		;.MRFDA -- MATURE PAGES ONLY
  4105						AGEELD		;.MRADJ -- ELDERLY PAGES ONLY
  4106	004000'	200034	006651'				](P1)
  4107	004001'	370000	000000		SOS	S		;S/ OLDEST UNBUMPABLE PAGE AGE
  4108	004002'	563000	000014		HRROS	P1		;P1/ OLDEST PAGE SEEN,,FUNCTION CODE
  4109	004003'	474640	000000		SETO	P2,		;P2/ DEJAVU PAGE
  4110	004004'	350500	000000*		AOS	W,%UPT+UPTRPT	;W/ NEXT PAGE TO TRY BUMPING
  4111	004005'	405500	000777		ANDI	W,777		;(MOD 777)
  4112				; Change at MWSRP2 in P035/C02 - fix infinite loop caused when all the
  4113				;user's pages had already been paged out before MWSREP was called.
  4114				;In particular, all of physical core had been filled by multiple copies
  4115				;of MEMEXR when a page fault occurred in a job that had no pages in its
  4116				;MWS (it was running in the ACs).  Don't call NXTMWS more than twice.
  4117	004006'	265200	005410'		JSP	F,NXTMWS	;W/ NEXT MWS PAGE
  4118	004007'	254000	004016'		  JRST	MWSR2B		;None found, retry starting from page 0
  4119	004010'	303500	000777		CAILE	W,777		;IF NOT USER PAGE,
  4120	004011'	254000	004015'		 JRST	MWSR2A		; TRY AGAIN (but don't loop forever)
  4121	004012'	325640	004025'	MWSRP2:	JUMPGE	P2,MWSRP3	;IF THIS IS THE FIRST PAGE SEEN,
  4122	004013'	550640	000012		HRRZ	P2,W		;  REMEMBER THE PAGE NUMBER
  4123	004014'	254000	004027'		JRST	MWSRP4
  4124
  4125	004015'	265200	005444'	MWSR2A:	JSP	F,FINXWS	;Clean up stack (because page was found)
  4126	004016'	400500	000000	MWSR2B:	SETZ	W,		;Reset back to page 0
  4127	004017'	265200	005410'		JSP	F,NXTMWS	; and try one more time
  4128	004020'	254000	004066'		  JRST	MWSRP8		;No pages in core, user running in ACs
  4129	004021'	307500	000777		CAIG	W,777		;Must not be per-process page
  4130	004022'	254000	004012'		 JRST	MWSRP2		;Found user page on 2nd try
  4131	004023'	265200	005444'		JSP	F,FINXWS	;Clean up stack (because page was found)
  4132	004024'	254000	004066'		JRST	MWSRP8		;2nd try also unsuitable, give up
  4133
  4134	004025'	306652	000000	MWSRP3:	CAIN	P2, 0(W)	;ELSEIF WE'VE BEEN HERE BEFORE,
  4135	004026'	254000	004043'		 JRST	MWSRP6		;  THE SEARCH IS DONE
  4136
  4137				    ;HERE WITH W/ A USER MWS PAGE, TO CHECK IF IT'S THE OLDEST
  4138				    ;SO FAR AND, IF SO, IF IT'S BUMPABLE
  4139
  4140	004027'	550300	000012	MWSRP4:	HRRZ	T1, W
  4141	004030'	231300	003561*		IDIVI	T1, AGECPW	;T1/ AGE CELL WORD, T2/ CELL # IN WORD
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 83-2
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4142	004031'	135347	003562*		LDB	T2, AGEPTR(T2)	;T2/ AGE OF PAGE W
  4143	004032'	317340	000000		CAMG	T2, S		;IF AGE <= MAXAGE,
  4144	004033'	254013	000000		JRST	(M)		;  GO TRY ANOTHER PAGE
  4145	004034'	265400	004107'		JSP	T3,REPOK	;SEE IF PAGE IS BUMPABLE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 84
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4146				    ;HERE WHEN AN OLDEST-SO-FAR BUMPABLE PAGE HAS BEEN FOUND,
  4147				    ;TO LEAVE THE LOOP EARLY IF IT'S AN ELDERLY PAGE AND WE'RE
  4148				    ;DISCARDING ALL ELDERLY PAGES
  4149
  4150	004035'	202340	000000	MWSRP5:	MOVEM	T2, S		;S/ MAXIMUM AGE SEEN SO FAR
  4151	004036'	506500	000014		HRLM	W, P1		;P1.LH/ OLDEST PAGE SEEN SO FAR
  4152	004037'	201300	000000		MOVEI	T1, .MRFNA
  4153	004040'	302314	000000		CAIE	T1, 0(P1)	;IF FUNCTION = FAULT-NO-ADJUST
  4154	004041'	315340	006215'		CAMGE	T2, AGEELD	;OR AGE < ELDERLY,
  4155	004042'	254013	000000		JRST	(M)		;  KEEP LOOKING FOR THE OLDEST
  4156
  4157				    ;HERE WHEN WE EXIT FROM THE OLDEST-PAGE SEARCH
  4158				    ;P1.LH/ THE PAGE # OF THE OLDEST PAGE, OR -1
  4159				    ;IF NO BUMPABLE PAGE WAS FOUND
  4160
  4161	004043'	265200	005444'	MWSRP6:	JSP	F, FINXWS	;  UNDO NXTMWS'S DAMAGE
  4162	004044'	321600	004066'		JUMPL	P1, MWSRP8	;IF WE FOUND A BUMPABLE PAGE,
  4163	004045'	554500	000014		HLRZ	W, P1		;  W/ OLDEST PAGE
  4164	004046'	202500	000000*		MOVEM	W, %UPT+UPTRPT	;  UPDATE POINTER
  4165	004047'	260040	004623'		PUSHJ	P, GETLMA	;  GET PAGE W'S SLOT
  4166	004050'	260040	003733'		PUSHJ	P, REMMWS	;  REMOVE PAGE W FROM MWS
  4167	004051'	260040	004672'		PUSHJ	P, STOLMA
  4168	004052'	135300	003772*		LDB	T1, JBYMWS	;  T1/ MWS SIZE
  4169	004053'	311301	000000		CAML	T1, 0(P)	;  IF SIZE >= LIMIT,
  4170	004054'	254000	003772'		JRST	MWSRP1		;    TRY TO BUMP ANOTHER PAGE
  4171	004055'	201300	000000		MOVEI	T1, .MRFNA
  4172	004056'	306314	000000		CAIN	T1, 0(P1)	;  IF FN WASN'T FAULT-WITH-NO-ADJUST
  4173	004057'	254000	004062'		JRST	MWSRP7
  4174	004060'	311000	006215'		CAML	S, AGEELD	;  AND AGE >= ELDERLY,
  4175	004061'	254000	003772'		JRST	MWSRP1		;    TRY TO BUMP ANOTHER PAGE
  4176	004062'	262040	000006	MWSRP7:	POP	P, T1		;  ELSE SUCCESS-RETURN
  4177	004063'	262040	000000		POP	P, S
  4178	004064'	262040	000003		POP	P, PG
  4179	004065'	254000	003527*		JRST	CPOPJ1
  4180
  4181				    ;HERE WHEN THE OLDEST-PAGE SEARCH FOUND NO BUMPABLE PAGE
  4182
  4183	004066'	262040	000007	MWSRP8:	POP	P, T2		;T2/ MWS SIZE LIMIT
  4184	004067'	262040	000000		POP	P, S
  4185	004070'	262040	000003		POP	P, PG
  4186	004071'	135300	004052*		LDB	T1, JBYMWS	;T1/ MWS SIZE
  4187	004072'	315300	000007		CAMGE	T1, T2		;IF WE'RE UNDER THE LIMIT,
  4188	004073'	350001	000000		AOS	(P)		;  SUCCESS-RETURN
  4189	004074'	263040	000000		POPJ	P,		;ELSE FAIL-RETURN
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 85
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4190	004075'	261040	000004	SAVFMU:	PUSH	P,F
  4191	004076'	261040	000013		PUSH	P,M
  4192	004077'	261040	000005		PUSH	P,U
  4193	004100'	260051	000000		PUSHJ	P,(T4)
  4194	004101'	254000	004103'		  JRST	.+2
  4195	004102'	350001	777775		AOS	-3(P)
  4196	004103'	262040	000005		POP	P,U
  4197	004104'	262040	000013		POP	P,M
  4198	004105'	262040	000004		POP	P,F
  4199	004106'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 86
CORE1.MAC	28-OCT-87 17:05		MONITOR WORKING SET PAGE REPLACEMENT

  4200				COMMENT ;@@SUBROUTINE REPOK.
  4201				@@PURPOSE CHECK TO SEE IF PAGE SELECTED BY WS ALG IS OK TO REPLACE.
  4202				@@ENTRY T3-<SUCCESS RETURN ADDR, M<-FAIL RETURN ADDR, W, PG,
  4203				  DESIRED LMAP SELECTED.
  4204				@@ACCUM T1.
  4205				@@CALLS GETLMA.
  4206				@@FUNCTION CHECK TO SEE IF PAGE SELECTED FOR REPLACEMENT HAS DIO
  4207				  UP OR IS LOCKED.  RETURN TO CALLER ACCORDINGLY.
  4208				@@;
  4209
  4210	004107'			REPOK:
  4211	004107'	260040	004626'		PUSHJ	P, REDLMA	;P3, P4/ LMAP SLOT FOR W
  4212								;(WE'RE JUST LOOKING)
  4213	004110'	607700	003704*		TLNN	P3, LMPACT	;IF IT'S NOT ACTIVATED,
  4214	004111'	254010	000000		JRST	(T3)		;  IT'S OK TO REPLACE
  4215	004112'	603700	002552*		TLNE	P3,LMPLOK	;CAN'T TOUCH IT IF ITS LOCKED
  4216	004113'	254013	000000		JRST	(M)		;SORRY CHARLIE.
  4217	004114'	550140	000017		HRRZ	PG, P4
  4218	004115'	405140	017777		ANDI	PG, 17777	;PG/ CORE PAGE #
  4219	004116'	135300	002330*		LDB	T1, PGYDIO	;T1/ DIRECT I/O COUNT: IF NONZERO,
  4220	004117'	326313	000000		JUMPN	T1, (M)		;  GO TRY ANOTHER PAGE
  4221	004120'	254010	000000		JRST	(T3)		;PAGE IS OK TO REPLACE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 87
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4222				SUBTTL ACTIVATE LMAP SLOT
  4223
  4224				COMMENT ;@@SUBROUTINE ACTLMS
  4225				@@PURPOSE ACTIVATES AN LMAP SLOT FOR THE SWAPPER. JUST
  4226				LIKE ACTLMA EXCEPT CORE PAGE NUMBER IS IN PG AND %UPS IS
  4227				PRESERVED
  4228				@@ENTRY P3,P4 HAVE LMAP SLOT, PG HAS CORE PAGE NUMBER,
  4229				JOB NUMBER IN J, VP NUMBER IN RH(W). LH(W) CAN BE ANYTHING.
  4230				ENTER AT ACTLMS FOR NORMAL ACTIVATION.
  4231				ENTER AT ACTLMS-1 FOR SETTING THE "STOLEN BIT MAP" BIT. (USED BY
  4232				  NAILIT IN THE SWAPPER FOR MARKING PAGE AS STOLEN.)
  4233				@@ACCUM USES T1-T4.
  4234				@@EXIT SLOT NOW ACTIVE, CALLER MUST STORE BACK
  4235				INTO LMAP EVENTUALLY. PG STILL HAS CORE PGE NUMBER.
  4236				ALWAYS NON-SKIP RETURNS.  %UPS PRESERVED.
  4237				@@FUNCTION SEE ACTLMA.
  4238				@@;
  4239
  4240	004121'	260040	005324'		PUSHJ	P,SETSTL	;SET SWAPPER'S STOLEN BIT.
  4241	004122'	603700	004110*	ACTLMS::TLNE	P3,LMPACT	;ALREADY ACTIVE?
  4242	004123'	263040	000000		  POPJ	P,		;YES, THEN JUST RETURN.
  4243	004124'	603700	002716*		TLNE	P3,LMMEXS	;CRASH IF NON-EXISTENT
  4244	004125'	260040	004203'		PUSHJ	P,ACTLM0	;DO THE WORK
  4245	004126'	256000	006654'		 STOPCD (.,STOP,LAFUPS,,<LMAP Activation Failure - %UPS preserved>);;ACTLMS+4
  4246								;SOMETHING WENT WRONG
  4247	004127'	324740	004573'		PJRST	MAPUPS		;MAKE SURE UPS HAS C(J)'S LMAP
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 88
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4248				COMMENT ;@@SUBROUTINE ACTLMA
  4249				@@PURPOSE ACTIVATE LMAP SLOT FOR FLTMWS, CINMWS
  4250				@@ENTRY P3, P4 CONTAIN LMAP SLOT, JOB IN J, VP NUMBER
  4251				IN RH(W), LH(W) CAN BE ANYTHING.
  4252				MUST HAVE UPT WRITE LOCKED, SO THAT WE DON'T ACTIVATE A SLOT WHILE
  4253				ANOTHER FRAME IS REMOVING IT. (CALLER'S RESPONSIBILITY).
  4254				@@ACCUM USES T1-T4, PG
  4255				@@EXIT NON-SKIP RETURN IF CANNOT ACTIVATE PAGE NOW.
  4256				SKIP RETURN IF PAGE IS ACTIVATED. PG CONTAINS CP NUMBER
  4257				FOR ACTIVE LMAP SLOT, P3, P4 CONTAIN NEW LMAP SLOT CONTENTS,
  4258				MUST BE STORED BACK INTO LMAP. VIRGIN BIT STATE IS CORRECTED
  4259				(MUST BE RE-CORRECTED IF RESCHEDULING TAKES PLACE, BUT THEN
  4260				LMAP SLOT MAY NO LONGER BE ACTIVE IF RESCHEDULING TAKES PLACE.)
  4261				@@FUNCTION CRASH IF PAGE OUT OF RANGE OR DOES NOT EXIST.
  4262				JUST RETURN IF PAGE IS ALREADY ACTIVE. ELSE, GET DP ADDRESS
  4263				FROM SLOT AND SEARCH CHT FOR THE CP NUMBER. IF NOT IN CHT,
  4264				AND NOT VIRGIN PAGE, GIVE NON-SKIP RETURN. IF IS A VIRGIN PGE,
  4265				TRY TO GET A FREE PGE. IF CAN PUT CP INTO CHT FOR DP, CONTINUE
  4266				WITH ACTIVATION. (ACTLMS ENTERS AT THIS POINT).
  4267				IF SWAP IN IN PROGRESS, USE COUNT UP, CP IS DIRTY, CONTINUE.
  4268				IF SWAP OUT NOT IN PROGRESS, AND CLEAN AVAIL PAGE COUNT IS UP,
  4269				CONTINUE, ELSE GIVE ERROR RETURN. IF SWAP OUT IN PROGRESS,
  4270				AND CLEAN IN PROGRESS COUNT IS UP, CONTINUE, ELSE ERROR RETURN.
  4271				(VIRGIN PAGE ENTERS AT THIS POINT). INCREMENT CP'S
  4272				USE COUNT, CHANGE CP'S LIST, ADJUST NECESSARY COUNTS BY
  4273				CALLING INCUSE. IF SUPER SLOT, JUST PUT ONTO LMA CHAIN.
  4274				IF NOT SUPER SLOT, SET EITHER PGYATB OR PGYSPT DEPENDING ON WHETHER
  4275				THE SLOT IS UNSHARED OR SHARED. IF SLOT IS SHARED
  4276				AND PGYATB IS SET, SCAN LMA CHAIN FOR SINGLE UNSHARED ACTIVE
  4277				LMAP SLOT AND CHANGE ITS STATUS TO SHARED.
  4278				(SUPER SLOT REJOINS HERE). PUT SLOT ON LMA CHAIN, INCREMENT
  4279				JBYACT AND TOTACT, IF PAGE IS DIRTY AND PROTECTION
  4280				IS READ/WRITE, SET PGE.W IN P4 (UPT CONTENTS).
  4281				SKIP RETURN WITH P3,P4 CONTAINING NEW LMAP SLOT DATA FOR ACTIVE
  4282				SLOT.
  4283				@@;
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 89
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4284	004130'	550300	000012	ACTLMA::HRRZ	T1,W		;GET VP NUMBER
  4285	004131'	603700	004124*		TLNE	P3,LMMEXS	;CRASH IF SLOT NON-EXISTENT.
  4286	004132'	303300	001034		CAILE	T1,VPMAX	;ANY GOOD?
  4287	004133'	256000	006657'		 STOPCD (.,STOP,LAFPOR,,<LMAP Activation Failure - Page out of range>);;ACTLMA+4
  4288	004134'	603700	004122*		TLNE	P3,LMPACT	;ALREADY ACTIVE?
  4289	004135'	254000	004065*		JRST	CPOPJ1		;YES, NOTHING TO DO.
  4290	004136'	260040	004744'		PUSHJ	P,GETDPA	;GET DISK ADDRESS OF SLOT IN T2
  4291	004137'	260040	004454'		PUSHJ	P,SRCCHT	;IN CORE ALREADY?
  4292	004140'	254000	004146'		  JRST	ACTNC1		;NO
  4293	004141'	260040	003520'		PUSHJ	P,TSTVIR	;MAKE SURE LMPVIR IS CORRECTED ON RETURN
  4294	004142'	254000	004177'		  JRST	ACTLAS		;NOT VIRGIN, GO ACTIVEATE SOME MORE.
  4295	004143'	335000	000006		SKIPGE	T1		;IF THIS IS A FILE PAGE IN CORE,
  4296	004144'	621700	003532*		TLZ	P3,LMPVIR	;DOESN'T NEED A VIRGIN START.
  4297	004145'	254000	004177'		JRST	ACTLAS		;GO DO THE REST.
  4298
  4299				;HERE IF DP WAS NOT IN CHT. IF ITS NOT VIRGIN, CAN'T DO
  4300				; ANYTHING. ELSE IF ITS PRIVATE, TRY TO GET A FREE PAGE
  4301				; SO THAT PAGE FAULT CAN FIX IT UP. IF NOT, ACTIVATE FAILS.
  4302				; IF ITS A FILE PAGE, TRY TO GET A FREE PAGE. IF NOT,
  4303				; ACTIVATE FAILS, ELSE START I/O INTO THE PAGE.
  4304
  4305	004146'	260040	003520'	ACTNC1:	PUSHJ	P,TSTVIR	;IS IT VIRGIN?
  4306	004147'	263040	000000		  POPJ	P,		;NO, CAN'T DO ANYTHING FOR HIM.
  4307	004150'	321300	004161'		JUMPL	T1,ACTNCF	;JUMP IF THIS IS A FILE PAGE.
  4308	004151'	337000	005120'		SKIPG	CAVPGN		;PRIVATE. ANY FREE PAGES?
  4309	004152'	263040	000000		 POPJ	P,		;NO, CAN'T DO THE ACTIVATE NOW.
  4310	004153'	350000	000000*		AOS	VRACNT		;CAN DO IT, COUNT ONE MORE DONE.
  4311	004154'	260040	005077'		PUSHJ	P,GETFRE	;GET A FREE PAGE
  4312	004155'	256000	000000'		  STOPCD 		;BUT CAVPGN WAS .GT. 0!
  4313	004156'	260040	004744'		PUSHJ	P,GETDPA	;GET DP FOR VP
  4314	004157'	260040	004547'		PUSHJ	P,INSCHT	;PUT INTO CHT SO OTHERS FIND IT.
  4315	004160'	254000	004177'		JRST	ACTLAS		;AND GO TO DO THE REST.
  4316
  4317				;HERE FOR "VIRGIN" FILE PAGE, WHICH MEANS TRY TO START IT
  4318				; IN WITHOUT THE SWAPPER'S HELP.
  4319
  4320	004161'	337000	005120'	ACTNCF:	SKIPG	CAVPGN		;TRY TO TAKE A CLEAN AVAIL PAGE
  4321					 JRST	[AOS SIOBOM	;KEEP TRACK OF FAILURES
  4322	004162'	254000	006662'			 POPJ P,]	;CAN'T DO ACTIVATE RIGHT NOW.
  4323								;(LEAVE LMPVIR ON IN CASE WE GET ANOTHER CHANCE (PRFMWS))
  4324	004163'	621700	004144*		TLZ	P3,LMPVIR	;SUCCESS.
  4325	004164'	350000	000000*		AOS	SIOCNT		;PROCLAIM SUCCESS TO THE WATCHFUL EYE.
  4326	004165'	350000	000000*		AOS	SIPTOT		;SWAP IN DONE DECREMENTS THIS
  4327	004166'	260040	005077'		PUSHJ	P,GETFRE	;GET THE PAGE WE WERE PROMISED
  4328	004167'	256000	000000'		  STOPCD 		;CAVPGN WAS .GT. 0 . . .
  4329	004170'	375000	005120'		SOSGE	CAVPGN		;OK, DECREMENT THIS NOW
  4330	004171'	256000	000000'		 STOPCD 		;BUT WAS JUST POSITIVE.
  4331	004172'	260040	004744'		PUSHJ	P,GETDPA	;GET DP FOR VP
  4332	004173'	260040	004547'		PUSHJ	P,INSCHT	;PUT IT INTO CHT
  4333	004174'	474300	000000		SETO	T1,
  4334	004175'	137300	003711*		DPB	T1,PGYSIP	;SET SWAP IN IN PROGRESS
  4335	004176'	260040	001217*		PUSHJ	P,SWPIO		;START THE I/O
  4336
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 89-2
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4337	004177'	260040	004203'	ACTLAS:	PUSHJ	P,ACTLM0	;DO THE REAL WORK
  4338	004200'	263040	000000		  POPJ	P,		;SORRY, COULDN'T DO IT
  4339	004201'	260040	004674'		PUSHJ	P,SETLMA	;VALIDATE SLOT SO CALLERS CAN THROW IT AWAY
  4340								;BUT SLOT IS STILL CONSIDERED TO BE OUT
  4341	004202'	254000	004135*		JRST	CPOPJ1		;GOOD RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 90
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4342				;COMMON ACTIVATE ROUTINE FOR ACTLMA AND ACTLMS.
  4343
  4344	004203'	135300	001655*	ACTLM0:	LDB	T1,PGYSTS	;GET CP STATUS BITS
  4345	004204'	602300	000000*		TRNE	T1,PGPSIP!PGPDRT ;IF SIP OR DIRTY,
  4346	004205'	254000	004217'		JRST	ACTLM2		;CAN ALWAYS HAVE IT
  4347	004206'	135340	001211*		LDB	T2,PGYUSE	;IF USE COUNT UP, CAN
  4348	004207'	326340	004217'		JUMPN	T2,ACTLM2	; CAN ALWAYS HAVE IT
  4349	004210'	606300	001171*		TRNN	T1,PGPSOP	;IF SWAP OUT IN PROGRESS,
  4350	004211'	254000	004215'		JRST	ACTLM1		;(NOT, ITS CLEAN FREE PAGE)
  4351	004212'	337000	001215*		SKIPG	CAPPGN		;CAN HAVE IT IF CAPPGN IS UP
  4352	004213'	263040	000000		POPJ	P,		;SORRY, CAN'T HAVE IT.
  4353	004214'	254000	004217'		JRST	ACTLM2		;OK, GO ACTIVATE.
  4354
  4355	004215'	337000	005120'	ACTLM1:	SKIPG	CAVPGN		;CP IS CLEAN FREE, CAN GRAB IF CAVPGN IS UP
  4356	004216'	263040	000000		POPJ	P,		;SORRY, CAN'T HAVE IT.
  4357
  4358	004217'	260040	005211'	ACTLM2:	PUSHJ	P,INCUSE	;INCREMENT USE COUNT, CHANGE LISTS,
  4359								; ADJUST COUNTS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 91
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4360				;HERE WHEN PAGE IS IN CORE, ALL READY TO PUT ON LMA CHAIN, ETC.
  4361
  4362	004220'	603700	003522*	ACTLM3:	TLNE	P3,LMPSUP	;IF ITS A SUPER SLOT,
  4363	004221'	254000	004261'		JRST	ACTLM5		;JUST PUT IT ON LMA CHAIN.
  4364	004222'	321700	004226'		JUMPL	P3,ACTLM4	;JUMP IF SHARED (LMPSHR)
  4365	004223'	135400	000225*		LDB	T3,LM3ATB	;GET ATB POINTER
  4366	004224'	137400	000000*		DPB	T3,PGYATB	;REMEMBER ATB POINTER
  4367	004225'	254000	004261'		JRST	ACTLM5		;AND GO PUT INTO CHAIN
  4368
  4369				;HERE IF WE'RE ACTIVATING A SHARED SLOT. REMEMBER THE SPT
  4370				; ADDRESS IN PGYSPT. IF PGYATB SET, MUST FIND
  4371				; THE SINGLE UNSHARED ACTIVE SLOT AND CHANGE ITS STATUS TO SHARED.
  4372
  4373	004226'	135400	000000*	ACTLM4:	LDB	T3,LM3SPT	;GET SPT POINTER
  4374	004227'	137400	000000*		DPB	T3,PGYSPT	;SAVE IN PGY TABLE
  4375	004230'	135400	004224*		LDB	T3,PGYATB	;IF NO SINGLE UNSHARED MEMBER,
  4376	004231'	322400	004261'		JUMPE	T3,ACTLM5	;JUST PUT ONTO LMA CHAIN
  4377
  4378				;LMA CHAIN CONSISTS OF ONE UNSHARED LMAP SLOT, AND POSSIBLY
  4379				; OTHER SUPER SLOTS. (FIRST ACTIVE SHARED SLOT TO GO
  4380				; ON LMA CHAIN ALWAYS UPDATES AN ACTIVE UNSHARED SLOT
  4381				; ON THE CHAIN). UPDATE THE UNSHARED SLOT'S LMAP SLOT AND
  4382				; MAKE IT SHARED.
  4383
  4384	004232'	261040	000016		PUSH	P,P3		;SAVE P3,P4,J,W
  4385	004233'	261040	000017		PUSH	P,P4
  4386	004234'	261040	000002		PUSH	P,J
  4387	004235'	261040	000012		PUSH	P,W
  4388	004236'	261040	000004		PUSH	P,F		;MUST PRESERVE F,M,U
  4389	004237'	261040	000013		PUSH	P,M
  4390	004240'	261040	000005		PUSH	P,U
  4391	004241'	265200	005467'		JSP	F,SCNLMC	;SCAN THE LMA CHAIN
  4392	004242'	256000	000000'		 STOPCD 		;WE HAVE TO FIND HIM
  4393	004243'	603700	000000*		TLNE	P3,LMPSHR	;IF ITS SHARED,
  4394	004244'	256000	000000'		 STOPCD 		;WE'RE IN BIG TROUBLE.
  4395	004245'	603700	004220*		TLNE	P3,LMPSUP	;THIS HIM?
  4396	004246'	254013	000000		JRST	(M)		;NO, CHECK THE NEXT ONE.
  4397	004247'	135440	004227*		LDB	T4,PGYSPT	;YES, GET SPT POINTER FOR SETSHR.
  4398	004250'	260040	004440'		PUSHJ	P,SETSHR	;YES. CHANGE HIS STATUS
  4399	004251'	265200	005507'		JSP	F,FINLMC	;FIX STACK UP
  4400	004252'	262040	000005		POP	P,U
  4401	004253'	262040	000013		POP	P,M
  4402	004254'	262040	000004		POP	P,F
  4403	004255'	262040	000012		POP	P,W
  4404	004256'	262040	000002		POP	P,J
  4405	004257'	262040	000017		POP	P,P4		;RESTORE ORIGINAL LMAP SLOT CONTENTS
  4406	004260'	262040	000016		POP	P,P3
  4407
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 92
CORE1.MAC	28-OCT-87 17:05		ACTIVATE LMAP SLOT

  4408	004261'	135300	000000*	ACTLM5:	LDB	T1,PGYLMJ	;GET OLD FIRST MEMBER OF LMA CHAIN
  4409	004262'	135340	000000*		LDB	T2,PGYLMV	;JOB AND VP NUMBERS
  4410	004263'	137300	000000*		DPB	T1,LM3LMJ	;SLOT WE'RE DOING POINTS
  4411	004264'	137340	000000*		DPB	T2,LM3LMV	; TO OLD FIRST ELEMENT
  4412	004265'	137100	004261*		DPB	J,PGYLMJ	;THIS SLOT IS NEW FIRST MEMBER
  4413	004266'	137500	004262*		DPB	W,PGYLMV	;VP NUMBER TOO
  4414	004267'	661700	004134*		TLO	P3,LMPACT	;SLOT IS ACTIVE NOW
  4415	004270'	135300	000000*		LDB	T1,JBYACT	;ONE MORE ACTIVE PGE
  4416	004271'	350000	000006		AOS	T1
  4417	004272'	303300	001035		CAILE	T1,VPMAX+1	;TOO HIGH?
  4418	004273'	256000	004133'		 STOPCD (,XCT,LAFPOR)
  4419					;YES, SOMEONE MADE A MISTAKE.   ;;ACTLM5+12
  4420	004274'	350000	000000*		AOS	TOTACT		;ONE MORE SYSTEM WIDE ACTIVE PAGE.
  4421	004275'	137300	004270*		DPB	T1,JBYACT
  4422	004276'	201743	020000		MOVEI	P4,PGE.C(PG)	;SETUP UPT CONTENTS
  4423	004277'	135300	003446*		LDB	T1,PGYDRT	;IF DIRTY AND
  4424	004300'	322300	004202*		JUMPE	T1,CPOPJ1	;(DON'T SET W BIT, SKIP RETURN)
  4425	004301'	135300	003157*		LDB	T1,LM3CUR	;PROTECTION IS READ/WRITE
  4426	004302'	306300	000003		CAIN	T1,CPRRDW	;THEN
  4427	004303'	660740	100000		TRO	P4,PGE.W	;CAN SET "W" BIT TOO.
  4428	004304'	254000	004300*		JRST	CPOPJ1		;SKIP RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 93
CORE1.MAC	28-OCT-87 17:05		DEACTIVATE LMAP SLOT

  4429				SUBTTL DEACTIVATE LMAP SLOT
  4430				COMMENT ;@@SUBROUTINE DEALMS
  4431				@@PURPOSE DEACTIVATE AN LMAP SLOT FOR THE SWAPPER
  4432				@@ENTRY P3,P4 CONTAIN LMAP SLOT DATA,
  4433				RH(W) CONTAINS VP NUMBER  (LH(W) CAN BE NON-ZERO),
  4434				J CONTAINS JOB NUMBER
  4435				@@ACCUM USES T1-T4
  4436				@@EXIT RETURNS WITH P3, P4 DEACTIVATED LMAP SLOT DATA,
  4437				PG CONTAINS FORMER CORE PAGE NUMBER. %UPS
  4438				HAS LMAP OF C(J).
  4439				@@FUNCTION CRASH IF PGYDIO SET OR PAGE OUT OF RANGE.
  4440				SEE DEALMA FOR REMAINING FUNCTION.
  4441				@@;
  4442
  4443	004305'	550300	000012	DEALMS::HRRZ	T1,W		;GET PAGE NUMBER
  4444	004306'	303300	001034		CAILE	T1,VPMAX	;IS IT IN RANGE?
  4445	004307'	256000	006664'		 STOPCD (.,STOP,LDFPOR,,<LMAP Deactivation Failure - Page out of range>);;DEALMS+2
  4446								;AFRAID NOT.
  4447	004310'	607700	004267*		TLNN	P3,LMPACT	;ALREADY INACTIVE?
  4448	004311'	263040	000000		  POPJ	P,		;YES, NO WORK TO DO.
  4449	004312'	260040	005017'		PUSHJ	P,GETCPA	;GET CORE PAGE NUMBER
  4450	004313'	135300	004116*		LDB	T1,PGYDIO	;DIRECT I/O IN PROGRESS?
  4451	004314'	332000	000006		SKIPE	T1		;IF SO, CALLER GOOFED
  4452	004315'	256000	000000'		 STOPCD 		;SO HE DID.
  4453	004316'	260040	004336'		PUSHJ	P,DEALM1	;DO THE WORK
  4454	004317'	331002	002603*		SKIPL	JBTCTX(J)	;THIS WILL BE OFF IF CALLED FROM
  4455	004320'	263040	000000		POPJ	P,		;SWOCTX, WHICH WILL RESTORE IT ITSELF.
  4456	004321'	324740	004573'		PJRST	MAPUPS		;RESTORE %UPS AND RETURN
  4457
  4458
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 94
CORE1.MAC	28-OCT-87 17:05		DEACTIVATE LMAP SLOT

  4459				COMMENT ;@@SUBROUTINE DEALMA
  4460				@@PURPOSE DEACTIVATE AN LMAP SLOT THAT CAME FROM %UPT
  4461				@@ENTRY P3,P4 CONTAIN LMAP SLOT DATA, RH(W) CONTAINS
  4462				VP NUMBER, LH(W) CAN BE NON-ZERO, J CONTAINS JOB NUMBER.
  4463				@@ACCUM USES T1-T4,PG
  4464				@@EXIT RETURNS WITH FORMER CORE PAGE NUMBER IN PG, LMAP DATA
  4465				OF DEACTIVATED SLOT IN P3,P4.
  4466				@@FUNCTION CRASH IF PAGE OUT OF RANGE. IF ALREADY DEACTIVATED,
  4467				RETURN. GO INTO SW WAIT IF DIO IS STILL IN PROGRESS FOR
  4468				CP. IF INACTIVE WHEN DIO FINISHES, RETURN. IF NOT, TURN
  4469				OFF ACTIVE BIT IN LMAP DATA, DECREMENT JBYACT AND TOTACT.
  4470				TAKE PAGE OFF LMA CHAIN, MAKE LMAP DATA LOOK LIKE
  4471				INACTIVE SLOT AGAIN. CLEAR PGYATB IF THIS
  4472				IS AN UNSHARED SLOT. FINISH BY CALLING DECUSE
  4473				FOR CP, WHICH MAY CHANGE CP LIST AND COUNTS. ALWAYS NON-SKIP RETURN.
  4474				@@;
  4475
  4476	004322'	550300	000012	DEALMA::HRRZ	T1,W		;GET VP NUMBER
  4477	004323'	303300	001034		CAILE	T1,VPMAX	;ANY GOOD?
  4478	004324'	256000	004307'		 STOPCD (,XCT,LDFPOR)
  4479					;NO.
  4480	004325'	607700	004310*	DEALM0:	TLNN	P3,LMPACT	;ALREADY INACTIVE?
  4481	004326'	263040	000000		 POPJ	P,		;YES, ALL DONE.
  4482	004327'	260040	005017'		PUSHJ	P,GETCPA	;LOAD CORE PAGE ADDRESS
  4483	004330'	135300	004313*		LDB	T1,PGYDIO	;ANY DIRECT I/O IN PROGRESS?
  4484	004331'	322300	004336'		JUMPE	T1,DEALM1	;IF NO DIRECT I/O, CONTINUE.
  4485	004332'	260040	004672'		PUSHJ	P,STOLMA	;STORE IN CASE IT CHANGES
  4486	004333'	260040	005524'		PUSHJ	P,PAGWAT	;YES, WAIT UNTIL THE DIRECT I/O  FINISHES.
  4487	004334'	260040	004623'		PUSHJ	P,GETLMA	;GET LMAP (MAYBE NEW) CONTENTS AGAIN
  4488	004335'	254000	004325'		JRST	DEALM0		;AND SEE IF ITS STILL ACTIVE.
  4489	004336'	621700	004325*	DEALM1:	TLZ	P3,LMPACT	;NO LONGER ACTIVE NOW
  4490	004337'	135300	004275*		LDB	T1,JBYACT	;DECREMENT ACTIVE COUNT
  4491	004340'	607700	004112*		TLNN	P3,LMPLOK	;MAKE SURE NOT TRYING TO DEACTIVATE LOCKED VP
  4492	004341'	375000	000006		  SOSGE	T1
  4493	004342'	256000	000000'		 STOPCD 		;TOO MANY DEACTIVATES.
  4494	004343'	137300	004337*		DPB	T1,JBYACT
  4495	004344'	370000	004274*		SOS	TOTACT		;ONE LESS SYSTEM WIDE ACTIVE PAGE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 95
CORE1.MAC	28-OCT-87 17:05		DEACTIVATE LMAP SLOT

  4496				;FIRST TAKE THIS SLOT OUT OF LMA CHAIN. EASY IF ITS THE FIRST ON
  4497				; THE CHAIN, OTHERWISE HAVE TO TRAVERSE CHAIN TO FIND ITS
  4498				; PREDECESSOR.
  4499
  4500
  4501	004345'	135400	004263*		LDB	T3,LM3LMJ	;GET NEXT SLOT ON LMA CHAIN
  4502	004346'	135440	004264*		LDB	T4,LM3LMV	;FOR LATER
  4503	004347'	135300	004265*		LDB	T1,PGYLMJ	;GET FIRST LMAP POINTER
  4504	004350'	135340	004266*		LDB	T2,PGYLMV	;IN T1 AND T2
  4505	004351'	316100	000006		CAMN	J,T1		;IS THE FIRST ON CHAIN THE ONE
  4506	004352'	302352	000000		CAIE	T2,(W)		; WE'RE REMOVING?
  4507	004353'	254000	004357'		JRST	DEALM2		;NO, GO SEARCH CHAIN
  4508	004354'	137400	004347*		DPB	T3,PGYLMJ	;YES, ONE AFTER ONE WE'RE REMOVING
  4509	004355'	137440	004350*		DPB	T4,PGYLMV	;IS NEW FIRST ONE
  4510	004356'	254000	004414'		JRST	DEALM5		;FIX SLOT UP AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 96
CORE1.MAC	28-OCT-87 17:05		DEACTIVATE LMAP SLOT

  4511				;HERE IF SLOT IS SHARED AND NOT THE FIRST ON THE LMA CHAIN.
  4512				; FIND THE SLOT BEFORE THE ONE WE'RE REMOVING AND POINT IT
  4513				; TO THE ONE AFTER THE ONE WE'RE REMOVING. T1 AND T2 CONTAIN
  4514				; LMAP POINTER FOR FIRST LMAP SLOT ON CHAIN, J AND W STILL
  4515				; CONTAIN LMAP POINTER FOR SLOT WE'RE REMOVING, P3 AND P4
  4516				; STILL CONTAIN DEACTIVATING SLOT'S DATA.
  4517
  4518	004357'	250400	000014	DEALM2:	EXCH	T3,P1		;GET NEXT SLOT ON CHAIN INTO BETTER
  4519	004360'	250440	000015		EXCH	T4,P2		;ACS
  4520	004361'	261040	000010		PUSH	P,T3		;SAVE P1
  4521	004362'	261040	000011		PUSH	P,T4		;SAVE P2
  4522	004363'	261040	000016		PUSH	P,P3		;SAVE GOOD LMAP DATA
  4523	004364'	261040	000017		PUSH	P,P4		;SAVE POSSIBLE CORE ADDRESS
  4524	004365'	261040	000002		PUSH	P,J		;SAVE LMAP POINTER TO LMAP WE'RE
  4525	004366'	261040	000012		PUSH	P,W		; TAKING OUT OF CHAIN
  4526
  4527	004367'	326300	004371'	DEALM3:	JUMPN	T1,.+2		;IF RAN OUT OF CHAIN MEMBERS
  4528	004370'	256000	000000'		 STOPCD 		; CRASH, NO ONE POINTED TO SLOT
  4529	004371'	200100	000006		MOVE	J,T1		;GET READY TO LOOK AT THIS SLOT
  4530	004372'	200500	000007		MOVE	W,T2
  4531	004373'	260040	004573'		PUSHJ	P,MAPUPS	;MAKE LMAP ADDRESSABLE
  4532	004374'	200712	000000*		MOVE	P3,%UPLMS(W)	;GET LMAP WORD WE NEED
  4533	004375'	135300	004345*		LDB	T1,LM3LMJ	;GET LMAP SLOT IT POINTS TO
  4534	004376'	135340	004346*		LDB	T2,LM3LMV
  4535	004377'	200401	000000		MOVE	T3,(P)		;GET GARBAGE,,PAGE NUMBER
  4536	004400'	316301	777777		CAMN	T1,-1(P)	;DOES IT POINT TO ONE WE'RE REMOVING?
  4537	004401'	302350	000000		CAIE	T2,(T3)
  4538	004402'	254000	004367'		JRST	DEALM3		;NO, STEP TO NEXT SLOT
  4539	004403'	137600	004375*		DPB	P1,LM3LMJ	;YES, POINT PREVIOUS TO NEXT
  4540	004404'	137640	004376*		DPB	P2,LM3LMV
  4541	004405'	202712	004374*		MOVEM	P3,%UPLMS(W)	;STORE LMAP CONTENTS
  4542	004406'	262040	000012		POP	P,W		;RESTORE OLD REMOVED LMAP POINTER
  4543	004407'	262040	000002		POP	P,J
  4544	004410'	262040	000017		POP	P,P4		;RESTORE POSSIBLE CORE PAGE ADDRESS
  4545	004411'	262040	000016		POP	P,P3		;RESTORE OLD LMAP CONTENTS
  4546	004412'	262040	000015		POP	P,P2		;AND P2 AND P1
  4547	004413'	262040	000014		POP	P,P1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 97
CORE1.MAC	28-OCT-87 17:05		DEACTIVATE LMAP SLOT

  4548				;HERE AFTER SLOT HAS BEEN REMOVED FROM LMA CHAIN.
  4549				; CORE PAGE NUMBER IS IN PG, PREVIOUS SLOT JOB AND VP
  4550				; ARE IN P1 AND P2, SLOT CONTENTS IN P3 AND P4, JOB
  4551				; AND VP OF SLOT WE'RE DEACTIVATING IN J AND W.
  4552				; FIX SLOT CONTENTS BACK UP ACCORDING TO WHAT KIND
  4553				; OF SLOT IT IS.
  4554				; (MAKE SURE WE DON'T DESTROY POSSIBLE CORE PAGE ADDRESS IN
  4555				; P4 SO THAT REMOVE CAN TURN THE A AND W BITS BACK ON
  4556				; IF ITS REMOVING THE CONTEXT PAGES)
  4557
  4558	004414'			DEALM5:
  4559	004414'	321700	004434'	DEALM6:	JUMPL	P3,DEALM7	;JUMP IF SHARED
  4560	004415'	135300	004230*		LDB	T1,PGYATB	;GET ATB POINTER
  4561	004416'	603700	004245*		TLNE	P3,LMPSUP	;SUPER SLOT?
  4562	004417'	474300	000000		SETO	T1,		;YES, MAKE IT UNREASONABLE
  4563	004420'	137300	004223*		DPB	T1,LM3ATB	;SET ATB FIELD
  4564	004421'	400300	000000		SETZ	T1,		;GET READY TO CLEAR PGYATB
  4565	004422'	607700	004416*		TLNN	P3,LMPSUP	;BUT NOT IF ITS SUPER SLOT
  4566	004423'	137300	004415*		DPB	T1,PGYATB	;CLEAR IT.
  4567	004424'	135340	000000*		LDB	T2,PGYADR	;GET DISK ADDRESS
  4568	004425'	316340	000436*		CAMN	T2,ADRDUM	;DUMMY PAGE?
  4569					JRST	[DPB T1,PGYDRT	;YES, CLEAN IT UP SO DOESN'T TRY TO GO OUT
  4570						 SETO T1,
  4571						 DPB T1,PGYADR	;BACK TO NOTHING IN CP
  4572	004426'	254000	006667'			 JRST .+1]
  4573	004427'	137340	000000*		DPB	T2,UP4LDA	;STORE LOW ORDER
  4574	004430'	242340	000000*		LSH	T2,-LMASRP	;RIGHT JUSTIFY HI ORDER
  4575	004431'	137340	000251*		DPB	T2,LM3HDA	;HI ORDER
  4576	004432'	620740	400000		TRZ	P4,PGE.A	;TURN OFF "A" BIT
  4577	004433'	324740	005235'		PJRST	DECUSE		;DECREMENT PG USE COUNT AND RETURN.
  4578
  4579	004434'	135340	004247*	DEALM7:	LDB	T2,PGYSPT	;GET SPT POINTER
  4580	004435'	137340	004226*		DPB	T2,LM3SPT	;PUT BACK INTO SLOT
  4581	004436'	620740	400000		TRZ	P4,PGE.A	;MAKE SURE ACCESS BIT IS OFF
  4582	004437'	324740	005235'		PJRST	DECUSE		;DECREMENT PG USE COUNT AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 98
CORE1.MAC	28-OCT-87 17:05		CHANGE LMAP STATUS

  4583				SUBTTL CHANGE LMAP STATUS
  4584
  4585				COMMENT ;@@SUBROUTINE SETSHR
  4586				@@PURPOSE CHANGE AN UNSHARED LMAP SLOT'S STATUS TO SHARED
  4587				USED WHEN ACTIVATING THE FIRST SHARED SLOT SHARING DP WITH
  4588				AN ALREADY ACTIVE UNSHARED SLOT.
  4589				USED IN REPLICATE TO CHANGE THE STATUS OF "SOURCE" PAGE TO
  4590				SHARED, TO DECREASE NUMBER OF TIMES ACTIVATE HAS TO
  4591				SEARCH SPT.
  4592				@@ENTRY T4 CONTAINS SPT POINTER (BASE+OFFSET), P3 AND
  4593				P4 CONTAIN LMAP SLOT DATA, J CONTAINS JOB NUMBER.
  4594				@@ACCUM DESTROYS PG, T ACS
  4595				@@EXIT P3, P4 CONTAIN MODIFIED LMAP SLOT DATA, NOW SHARED
  4596				T4 STILL CONTAINS SPT POINTER.
  4597				@@RESTRICTIONS LMAP SLOT IN P3, P4 MUST NOT BE SHARED ALREADY
  4598				SLOT MUST NOT BE SUPER-SLOT.
  4599				@@CALLS GETDPA, SRCCHT
  4600				@@FUNCTION CRASH IF SLOT IS SUPER OR SHARED.
  4601				IF SLOT IS ACTIVE (UNSHARED), CLEAR OUT PGYATB
  4602				(THERE IS NO LONGER AN UNSHARED SLOT ON LMA CHAIN), SET
  4603				PGYSPT FROM ARG IN T4.  IF SLOT IS INACTIVE, JUST SET
  4604				SPT POINTER IN SLOT AND RETURN.
  4605				@@;
  4606
  4607	004440'	607700	004422*	SETSHR::TLNN	P3,LMPSUP	;CRASH IF SLOT IS SUPER.
  4608	004441'	663700	004243*		TLOE	P3,LMPSHR	;SET SHARED BIT.
  4609	004442'	256000	000000'		 STOPCD 		;WAS SUPPOSED TO BE UNSHARED
  4610	004443'	607700	004336*		TLNN	P3,LMPACT	;IS IT ACTIVE UNSHARED?
  4611	004444'	254000	004452'		  JRST	SETSH1		;NO
  4612	004445'	260040	005017'		PUSHJ	P,GETCPA	;GET CORE PGE NUMBER IN PG
  4613	004446'	400300	000000		SETZ	T1,		;CLEAR PGYATB (CAN ONLY BE ONE
  4614	004447'	137300	004423*		DPB	T1,PGYATB	; SLOT THAT NEEDS IT)
  4615	004450'	137440	004434*		DPB	T4,PGYSPT	;STORE SPT POINTER IN PGYSPT
  4616	004451'	263040	000000		POPJ	P,		;AND RETURN.
  4617				;HERE IF SLOT IS INACTIVE.
  4618
  4619	004452'	137440	004435*	SETSH1:	DPB	T4,LM3SPT	;JUST PUT SPT POINTER IN SLOT
  4620	004453'	263040	000000		POPJ	P,		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 99
CORE1.MAC	28-OCT-87 17:05		CHT HANDLERS

  4621				SUBTTL CHT HANDLERS
  4622
  4623				COMMENT ;@@SUBROUTINE SRCCHT
  4624				@@PURPOSE IF THE SPECIFIED DISK PAGE IS IN CORE, GET ITS CORE
  4625				PAGE NUMBER FROM THE CORE HASH TABLE
  4626				@@ENTRY T2 CONTAINS DISK ADDRESS
  4627				@@ACCUM PRESERVES T2, DESTROYS ALL OTHER T ACS.
  4628				@@TABLES CHT BUCKET TABLE, PGY TABLES
  4629				@@GLOBAL
  4630				@@EXIT GIVES SKIP RETURN IF DISK ADDRESS IS IN CORE, WITH
  4631				CORE PAGE NUMBER IN AC PG. T4 CONTAINS EITHER NEGATIVE OFFSET
  4632				INTO CHT BUCKET TABLE OR POSITIVE CORE PAGE NUMBER OF CORE PAGE THAT
  4633				PRECEDES THE ONE IN PG IN THE CHT HASH CHAIN.
  4634				GIVES ERROR RETURN IF THE DISK PAGE IS NOT IN CORE, WITH PG
  4635				CONTENTS ZERO AND T4 CONTAINING EITHER NEGATIVE OFFSET INTO
  4636				CHT BUCKET TABLE OR POSITIVE PAGE NUMBER OF LAST
  4637				CORE PAGE IN DP'S CHT HASH CHAIN.
  4638				@@CALLS
  4639				@@FUNCTION SEE ABOVE
  4640				@@;
  4641
  4642	004454'	603340	000000*	SRCCHT::TLNE	T2,RBMASK	;MAKE SURE NO BAD BITS ON
  4643	004455'	256000	006673'		 STOPCD (.,STOP,CHTFLS,,<CHT Failure - Search: RBMASK bits on>);;SRCCHT+1
  4644								;CALLER LEFT THEM ON
  4645	004456'	200440	000007		MOVE	T4,T2		;GET COPY OF DISK ADDRESS
  4646	004457'	404440	004476'		AND	T4,CHTMSK	;GET BUCKET NUMBER
  4647	004460'	241440	777777		ROT	T4,-1		;TURN INTO INDEX
  4648					JUMPL	T4,[HRRZ PG,@CHTPTR ;ODD, GET RH
  4649	004461'	321440	006676'			    JRST .+2]
  4650	004462'	554160	004475'		HLRZ	PG,@CHTPTR	;EVEN, GET LH
  4651	004463'	241440	000001		ROT	T4,1		;BACK TO BUCKET NUMBER
  4652	004464'	213000	000011		MOVNS	T4		;T4 GETS -VE OFFSET INTO CHT BUCKET TABLE
  4653	004465'	322140	003744*		JUMPE	PG,CPOPJ	;IF NULL ENTRY, GIVE NON-SKIP
  4654
  4655	004466'	135300	004424*	SRCCH1:	LDB	T1,PGYADR	;GET DISK ADDRESS OF THIS CORE PAGE
  4656	004467'	316300	000007		CAMN	T1,T2		;IS THIS THE ONE WE WANT
  4657	004470'	254000	004304*		  JRST	CPOPJ1		;YES, GIVE GOOD RETURN
  4658	004471'	200440	000003		MOVE	T4,PG		;NO, T4 GETS PREVIOUS PAGE
  4659	004472'	135140	000000*		LDB	PG,PGYCHT	;NEXT CP ON CHAIN
  4660	004473'	326140	004466'		JUMPN	PG,SRCCH1	;AND CHECK NEXT ONES DISK ADDRESS
  4661	004474'	263040	000000		POPJ	P,		;WE'VE RUN OUT, GIVE NON-SKIP RETURN
  4662
  4663
  4664
  4665	004475'	000011	000000	CHTPTR::.-.(T4)			;FILLED IN BY ONCE TO ADDRESS OF CHT BUCKET TABLE
  4666	004476'	000000	000000	CHTMSK::.-.			;FILLED IN BY ONCE TO MASK TO TURN DP INTO BUCKET NUMBER
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 100
CORE1.MAC	28-OCT-87 17:05		CHT HANDLERS

  4667				COMMENT ;@@SUBROUTINE REMCHT/REMCHR
  4668				USED TO TERMINATE THE ASSOCIATION BETWEEN A CORE PAGE AND A DISK PAGE.
  4669				CALLED FROM GETFRE, GETRES, REMOVE AFTER DEALLOCATING THE DISK PAGE.
  4670				@@PURPOSE REMOVE CORE PAGE FROM CORE HASH TABLE
  4671				@@ENTRY CORE PAGE NUMBER IN PG
  4672				CALL AT REMCHT IF NO USERS OF CP ALLOWED.
  4673				CALL AT REMCHR (REMOVE ENTRY POINT) IF MAY BE SUPER MAPPER AROUND.
  4674				@@ACCUM SMASHES ALL T ACS
  4675				@@TABLES PGY TABLES
  4676				@@GLOBAL
  4677				@@EXIT CORE PAGE NUMBER CALLED WITH IN PG
  4678				@@RESTRICTIONS USE COUNT FOR CP MUST BE ZERO.
  4679				CALLER RESPONSIBLE FOR VALIDATING BEFORE CALL IF NECESSARY
  4680				TO WRITE DATA BACK TO DISK. I/O MUST NOT BE IN PROGRESS.
  4681				@@CALLS SRCCHT
  4682				@@FUNCTION IF CALLED AT REMCHR, IF PGYUSE NON-ZER, MAKE SURE PGYJOB
  4683				IS ALSO NON-ZERO, ELSE CRASH. IF PGYUSE WAS NON-ZERO, JUST RETURN DOING
  4684				NOTHING. FALL INTO REMCHT.
  4685				(REMCHT) CALL SRCCHT TO GET THE PREVIOUS CORE PAGE ON THE HASH CHAIN. FIX UP
  4686				PGYCHT POINTER OF PREVIOUS PAGE TO POINT TO PAGE AFTER THE
  4687				ONE THAT IS BEING REMOVED. IF THERE IS NO PREVIOUS
  4688				CORE PAGE, THEN PUT PAGE NUMBER OF CORE PAGE AFTER ONE
  4689				BEING REMOVED IN CHT BUCKET TABLE.  ZERO PGYADR FOR CORE PAGE.
  4690				IF PAGE IS DIRTY, MAKE IT CLEAN AVAILABLE.
  4691				@@;
  4692
  4693	004477'	135300	004206*	REMCHR::LDB	T1,PGYUSE	;GET COUNT
  4694	004500'	322300	004505'		JUMPE	T1,REMCH0	;IF ZERO, NORMAL CHT REMOVE
  4695	004501'	135340	004354*		LDB	T2,PGYLMJ	;NON-ZERO, MAKE SURE SOMEONE ON HERE
  4696	004502'	326340	004465*		JUMPN	T2,CPOPJ	;IF SO, JUST RETURN DOING NOTHING.
  4697	004503'	256000	006700'		 STOPCD (.,STOP,CHTFNJ,,<CHT Failure - Remove: No job in use list>);;REMCHR+4
  4698								;PGYUSE INCREMENTED BUT NO ONE ON LMA CHAIN.
  4699	004504'	135300	004477*	REMCHT::LDB	T1,PGYUSE	;USE COUNT SHOULD BE ZERO
  4700	004505'	135340	004203*	REMCH0:	LDB	T2,PGYSTS	;MAKE SURE I/O NOT IN PROGRESS
  4701	004506'	606340	000000*		TRNN	T2,PGPSIP!PGPSOP
  4702	004507'	332000	000006		SKIPE	T1
  4703	004510'	256000	006703'		 STOPCD (.,STOP,CHTFIU,,<CHT Failure - Remove: In use/IO in progress>);;REMCH0+3
  4704	004511'	135340	004466*		LDB	T2,PGYADR	;GET DISK ADDRESS IN T2 FOR SRCCHT
  4705	004512'	316340	000000*		CAMN	T2,ADRNCT	;IS THIS IN THE CHT?
  4706	004513'	263040	000000		 POPJ	P,		;NO, JUST RETURN.
  4707	004514'	261040	000003		PUSH	P,PG		;SAVE PG FROM SRCCHT.
  4708	004515'	260040	004454'		PUSHJ	P,SRCCHT	;GET CORE PAGE ADDR BEFORE ONE IN PG
  4709	004516'	256000	006706'		 STOPCD (.,STOP,CHTFNF,,<CHT Failure - Remove: CP not found in CHT>);;REMCH0+11
  4710								;NO, CP HAD VALID DP ADDR BUT NOT IN CHT!
  4711	004517'	262040	000006		POP	P,T1		;GET CORE PAGE NUMBER OFF STACK
  4712								; (SRCCHT RETURNED IT IN PG)
  4713	004520'	312300	000003		CAME	T1,PG		;MAKE SURE ITS THE SAME
  4714	004521'	256000	006711'		 STOPCD (.,STOP,CHTFMU,,<CHT Failure - Remove: Multiply used PGYADR>);;REMCH0+14
  4715								;TWO PAGES WITH SAME PGYADR?
  4716	004522'	135300	004472*		LDB	T1,PGYCHT	;GET NEXT CORE PAGE NUMBER
  4717	004523'	323440	004530'		JUMPLE	T4,REMCH1	;JUMP IF NO PREVIOUS MEMBER OF HASH CHAIN
  4718	004524'	250440	000003		EXCH	T4,PG		;POINT TO PREVIOUS CP'S PGY TABLE
  4719	004525'	137300	004522*		DPB	T1,PGYCHT	;PREVIOUS POINTS TO NEXT AFTER ONE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 100-2
CORE1.MAC	28-OCT-87 17:05		CHT HANDLERS

  4720								; BEING REMOVED
  4721	004526'	250440	000003		EXCH	T4,PG		;GET RIGHT PAGE BACK IN PG
  4722	004527'	254000	004534'		JRST	REMCH2		;CLEAR PGYADR AND RETURN
  4723
  4724	004530'	217000	000011	REMCH1:	MOVMS	T4		;CONVERT BACK TO CHT BUCKET TABLE INDEX
  4725	004531'	241440	777777		ROT	T4,-1		;TURN BUCKET NUMBER INTO INDEX
  4726					JUMPL	T4,[HRRM T1,@CHTPTR ;ODD, LH
  4727	004532'	321440	006714'			    JRST .+2]
  4728	004533'	506320	004475'		HRLM	T1,@CHTPTR	;EVEN, RH.
  4729	004534'	474300	000000	REMCH2:	SETO	T1,		;SET ALL PGYADR BITS AS A FLAG
  4730	004535'	137300	004511*		DPB	T1,PGYADR	;MAKE PGYADR ILLEGAL
  4731	004536'	400300	000000		SETZ	T1,		;ZERO THIS SO WE CAN
  4732	004537'	137300	003473*		DPB	T1,PGYERR	;CLEAR OUT ERROR BITS, TOO
  4733	004540'	135300	004277*		LDB	T1,PGYDRT	;IS THIS PAGE DIRTY?
  4734	004541'	361300	004502*		SOJL	T1,CPOPJ	;JUMP IF NOT.
  4735	004542'	137300	004540*		DPB	T1,PGYDRT	;WAS DIRTY, MAKE IT CLEAN
  4736	004543'	260040	005105'		PUSHJ	P,INCCAV	;EITHER AVAILABLE OR ONE MORE I/O CORE PAGE.
  4737	004544'	370000	005122'		SOS	DFRPGN		;NOT DIRTY ANYMORE.
  4738	004545'	201440	000000		MOVEI	T4,CFR.N	;PUT ONTO BEGINNING OF CLEAN FREE LIST
  4739	004546'	324740	005143'		PJRST	PUTLSB		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 101
CORE1.MAC	28-OCT-87 17:05		CHT HANDLERS

  4740				COMMENT ;@@SUBROUTINE INSCHT
  4741				@@PURPOSE INSERT DISK PAGE INTO CORE HASH TABLE FOR A CORE PAGE
  4742				AND SET PGYADR FROM DISK ADDRESS ARG.
  4743				@@ENTRY T2 CONTAINS DISK PGE NUMBER, PG CONTAINS CORE PAGE NUMBER
  4744				@@ACCUM PRESERVES T2, USES OTHER T ACS, PRESERVES PG
  4745				@@TABLES PGY TABLES, CHT START TABLE
  4746				@@GLOBAL
  4747				@@EXIT RETURNS WITH DISK PAGE IN T2, CORE PAGE IN PG
  4748				@@CALLS SRCCHT
  4749				@@FUNCTION PUT DISK PAGE NUMBER IN PGYADR
  4750				CALL SRCCHT TO FIND THE LAST CORE PAGE IN HASH CHAIN
  4751				CRASH IF DISK PAGE ALREADY IN CORE HASH TABLE. PUT CORE PAGE
  4752				AT THE END OF THE DISK PAGE'S CHT HASH CHAIN. ZERO PGYCHT
  4753				FOR CORE PAGE TO INDICATE THE END OF THE HASH CHAIN.
  4754				@@;
  4755
  4756	004547'	137340	004535*	INSCHT::DPB	T2,PGYADR	;SET NEW DISK PAGE NUMBER FOR CORE PAGE
  4757	004550'	316340	004425*		CAMN	T2,ADRDUM	;IF DUMMY DISK PAGE,
  4758	004551'	263040	000000		POPJ	P,		;JUST RETURN.
  4759	004552'	261040	000003		PUSH	P,PG		;SAVE NEW CORE PAGE NUMBER
  4760	004553'	260040	004454'		PUSHJ	P,SRCCHT	;GET LAST CORE PAGE ON DP'S HASH CHAIN
  4761	004554'	254000	004556'		  JRST	.+2		;HAD BETTER NOT BE IN CHT
  4762	004555'	256000	006716'		 STOPCD (.,STOP,CHTFDP,,<CHT Failure - Insert: Duplicate page>);;INSCHT+6
  4763								;DP WAS ALREADY IN CHT!
  4764	004556'	262040	000003		POP	P,PG		;RESTORE NEW CORE PAGE
  4765	004557'	323440	004564'		JUMPLE	T4,INSCH1	;JUMP IF CHAIN WAS EMPTY
  4766	004560'	250140	000011		EXCH	PG,T4		;OLD LAST CHAIN ELEMENT IN PG, NEW IN T4
  4767	004561'	137440	004525*		DPB	T4,PGYCHT	;OLD LAST ONE NOW POINTS TO NEW LAST ONE
  4768	004562'	200140	000011		MOVE	PG,T4		;NEW CORE PAGE BACK IN PG
  4769	004563'	254000	004570'		JRST	INSCH2		;GO ZERO PGYCHT AND RETURN
  4770
  4771	004564'	217000	000011	INSCH1:	MOVMS	T4		;GET INDEX INTO SYSCHT
  4772	004565'	241440	777777		ROT	T4,-1		;GET FROM BUCKET # TO INDEX
  4773					JUMPL	T4,[HRRM PG,@CHTPTR
  4774	004566'	321440	006721'			    JRST .+2]	;ODD, RH
  4775	004567'	506160	004475'		HRLM	PG,@CHTPTR	;EVEN, LH.
  4776
  4777	004570'	400300	000000	INSCH2:	SETZ	T1,		;CLEAR OUT PGYCHT TO INDICATE
  4778	004571'	137300	004561*		DPB	T1,PGYCHT	;THE END OF THE HASH CHAIN
  4779	004572'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 102
CORE1.MAC	28-OCT-87 17:05		CONTEXT PAGE MAPPING AND REFERENCING

  4780				SUBTTL CONTEXT PAGE MAPPING AND REFERENCING
  4781				COMMENT ;@@SUBROUTINE MAPUPS
  4782				@@PURPOSE MAKE A JOB'S LMAP AND UPT ADDRESSABLE IN SWAPPER CODE
  4783				THROUGH EXEC (NOT PER PROCESS) MAP SLOT.
  4784				@@ENTRY J CONTAINS JOB NUMBER
  4785				@@ACCUM T1,T3,T4.  PRESERVES T2, LIKE GSLOT USED TO.
  4786				@@GLOBAL
  4787				@@EXIT J CONTAINS JOB NUMBER, EXEC ADDRESS %UPS CONTAINS
  4788				LMAP AND UPT. %UPT ACCESSES ARE NOT LIMITED TO %UPT+777, I.E.
  4789				THE LMAP TAKES UP MORE THAN ONE PAGE AND THIS ROUTINE SETS UP
  4790				ALL REQUIRED PAGES IN JOB'S CONTEXT PAGES.
  4791				@@RESTRICTIONS
  4792				@@CALLS
  4793				@@FUNCTION IF CURRENT CONTEXT PAGES IN %UPS ARE ALREADY SET
  4794				UP FOR JOB IN J, RETURN. ELSE PICKUP CORE PAGE NUMBER
  4795				OF HARDWARE UPT FROM JBTUPM. CRASH IF ITS 0.
  4796				ELSE MAKE IT ADDRESSABLE THRU %UPS+0. CLEAR THE A.M.,
  4797				MAKE THE REST OF THE PAGES ADDRESSABLE BY COPYING
  4798				MAP SLOTS FOR %UPT+1,2, . . . FROM %UPS INTO THE EPT.
  4799				CLEAR THE A.M., SETUP UPSJOB AND RETURN.
  4800				@@ ;
  4801
  4802	004573'	316100	004622'	MAPUPS::CAMN	J,UPSJOB	;ALREADY THERE?
  4803	004574'	263040	000000		  POPJ	P,		;YES, JUST RETURN
  4804	004575'	261040	000007		PUSH	P,T2		;SAVE PRECIOUS T2 FOR COMCON
  4805	004576'	550442	000260*		HRRZ	T4,JBTUPM(J)	;GET CORE PAGE NUMBER OF HARDWARE UPT
  4806	004577'	405440	017777		ANDI	T4,17777	;JUST THE PAGE NUMBER
  4807	004600'	336000	000011		SKIPN	T4		;MAKE SURE ITS SETUP
  4808	004601'	256000	000000'		 STOPCD			;CONTEXT PAGES NOT AROUND
  4809	004602'	660440	520000		TRO	T4,PGE.A!PGE.W!PGE.C	;MAKE ACCESSIBLE, WRITABLE, CACHED.
  4810	004603'	200300	000000*		MOVE	T1,EPYPSM	;POINTER TO PUT SLOT ENTRIES [EPTPTR(%UPS.N-1)]
  4811	004604'	136440	000006		IDPB	T4,T1		;PUT INTO EPT MAP SLOT
  4812	004605'	701100	000000*		CLRPTO	%UPS		;CAUSE NEW MAPPING TO GO INTO EFFECT
  4813
  4814				;ASSUME NCTXPG IS ALWAYS GREATER THAN 1
  4815
  4816	004606'	200400	000000*		MOVE	T3,USYPTN	;GET POINTER TO OTHER MAP SLOTS [UPSPTR(%UPT.N)]
  4817	004607'	201340	777777*		MOVEI	T2,NCTXPG-1	;NUMBER OF OTHERS TO DO
  4818	004610'	134440	000010	MAPUP1:	ILDB	T4,T3		;GET NEXT CONTEXT PAGE MAP SLOT
  4819	004611'	136440	000006		IDPB	T4,T1		;PUT IT INTO EPT FOR %UPS+?
  4820	004612'	367340	004610'		SOJG	T2,MAPUP1	;AND LOOP FOR ALL REMAINING CONTEXT PAGES
  4821
  4822	004613'	202100	004622'		MOVEM	J,UPSJOB	;STORE JOB NUMBER OF NEW UPS
  4823	004614'	201300	000000*		MOVEI	T1,<NCTXPG-2>*1000
  4824	004615'	701106	001000*	MAPUP2:	CLRPTO	%UPS+1000(T1)
  4825	004616'	275300	001000		SUBI	T1,1000		;NEXT LOWER PAGE
  4826	004617'	325300	004615'		JUMPGE	T1,MAPUP2	;KEEP GOING TILL DONE.
  4827	004620'	262040	000007		POP	P,T2		;RESTORE
  4828	004621'	263040	000000		POPJ	P,		;RETURN.
  4829
  4830	004622'	000000	000000	UPSJOB::0			;JOB NUMBER WHOSE CONTEXT PGES
  4831								; ARE MAPPED IN %UPS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 103
CORE1.MAC	28-OCT-87 17:05		CONTEXT PAGE MAPPING AND REFERENCING

  4832				COMMENT ;@@SUBROUTINE GETLMA/GETLMS/GETLMX
  4833					   REDLMA/REDLMS/REDLMX
  4834				@@PURPOSE GET THE CONTENTS OF AN LMAP SLOT INTO P3 AND P4
  4835				@@ENTRY AC W CONTAINS VIRTUAL PAGE NUMBER OF
  4836				DESIRED SLOT, %UPT/%UPS/%UPX IS SETUP TO ADDRESS THE DESIRED LMAP
  4837				ENTER AT GETLM? TO GET LMAP SLOT FOR MODIFICATION,
  4838				ENTER AT REDLM? IF ONLY WANT TO READ THE SLOT, AND WON'T BE
  4839				  RESCHEDULING AND USING THE DATA.
  4840				@@ACCUM T1. PRESERVES ALL OTHERS.
  4841				@@TABLES
  4842				@@GLOBAL
  4843				@@EXIT P3 CONTAINS LMAP SLOT DATA, P4 CONTAINS EXTENSION OF LMAP
  4844				DATA FROM THE UPT (USUALLY THE LOW ORDER DISK ADDRESS)
  4845				@@RESTRICTIONS CALLER MUST EITHER CALL STOLMA OR DECREMENT
  4846				UPTLDC BY HAND WHEN HE IS DONE WITH THE SLOT AND IT REPRESENTS
  4847				AN EXISTENT VP. IF CALLER FETCHED A NON-EXISTENT VP SLOT AND
  4848				TURNED IT INTO AN EXISTENT SLOT (VCREAT, MAP, REPLICATE)
  4849				CALLER MUST INCREMENT UPTLDC BEFORE CALLING STOLMA/STOLMS.
  4850				@@CALLS
  4851				@@FUNCTION GETS LMAP SLOT DATA FROM LMAP SLOT INTO P3 AND P4.
  4852				IF THE SLOT'S VP EXISTS, INCREMENT THE COUNT OF EXISTENT
  4853				VP SLOTS THAT ARE CURRENTLY BEING KEPT IN P3 AND P4 BY
  4854				ANYONE.
  4855				@@ ;
  4856
  4857				DEFINE GETLM(MAP,LDC,%A)<
  4858				IFIDN <MAP> <T> <GETLMA::>
  4859				IFIDN <MAP> <S> <GETLMS::>
  4860				IFIDN <MAP> <X> <GETLMX::>
  4861					MOVE	P3,%UP'MAP+UPTLMA##(W)
  4862					TLNE	P3,LMMEXS	;;IF SLOT DOESN'T EXIST, DON'T INCREMENT
  4863					AOSA	%UP'LDC+UPTLDC	;;LDC. DON'T DO MOVE AGAIN MOST OF THE TIME.
  4864				IFIDN <MAP> <T> <REDLMA::>
  4865				IFIDN <MAP> <S> <REDLMS::>
  4866				IFIDN <MAP> <X> <REDLMX::>
  4867					MOVE	P3,%UP'MAP+UPTLMA##(W)
  4868					HRRZ	T1,W
  4869					CAILE	T1,VPMAX	;;CHECK HERE, DON'T SMASH LOCATIONS IN REST OF UPT.
  4870				
  4871					 STOPCD (.,STOP,LRFPR'MAP,,<LMAP Read Failure: Page out of range>)
  4872					ROT	T1,-1
  4873					JUMPL	T1,%A
  4874					HLRZ	P4,%UP'MAP(T1)
  4875					POPJ	P,
  4876				%A:	HRRZ	P4,%UP'MAP(T1)
  4877					POPJ	P,
  4878				>;END GETLM MACRO DEFINITION
  4879
  4880				;GENERATE THE ROUTINES
  4881
  4882	004623'	200712	000000*	GETLM(T,T)
  4883	004624'	603700	004131*
  4884	004625'	354000	000000*
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 103-2
CORE1.MAC	28-OCT-87 17:05		CONTEXT PAGE MAPPING AND REFERENCING

  4885	004626'	200712	000000*
  4886	004627'	550300	000012
  4887	004630'	303300	001034
  4888	004631'	256000	006723'
  4889	004632'	241300	777777
  4890	004633'	321300	004636'
  4891	004634'	554746	002440*
  4892	004635'	263040	000000
  4893	004636'	550746	004634*
  4894	004637'	263040	000000
  4895	004640'	200712	000000*	GETLM(S,S)
  4896	004641'	603700	004624*
  4897	004642'	354000	000000*
  4898	004643'	200712	000000*
  4899	004644'	550300	000012
  4900	004645'	303300	001034
  4901	004646'	256000	006726'
  4902	004647'	241300	777777
  4903	004650'	321300	004653'
  4904	004651'	554746	004605*
  4905	004652'	263040	000000
  4906	004653'	550746	004651*
  4907	004654'	263040	000000
  4908	004655'	200712	000000*	GETLM(X,T)
  4909	004656'	603700	004641*
  4910	004657'	354000	000000*
  4911	004660'	200712	000000*
  4912	004661'	550300	000012
  4913	004662'	303300	001034
  4914	004663'	256000	006731'
  4915	004664'	241300	777777
  4916	004665'	321300	004670'
  4917	004666'	554746	002522*
  4918	004667'	263040	000000
  4919	004670'	550746	004666*
  4920	004671'	263040	000000
  4921							;;GETTING FROM %UPX INCREMENTS OWN LDC COUNT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 104
CORE1.MAC	28-OCT-87 17:05		CONTEXT PAGE MAPPING AND REFERENCING

  4922				COMMENT ;@@SUBROUTINE STOLMA/STOLMS/STOLMX
  4923				@@PURPOSE PUT THE CONTENTS OF LMAP SLOT STORED IN P3 AND P4 BACK
  4924				INTO THE LMAP
  4925				@@ENTRY AC  CONTAINS VIRTUAL PAGE NUMBER OF DESIRED SLOT,
  4926				%UPT/%UPS/%UPX IS SETUP TO ADDRESS THE DESIRED LMAP
  4927				@@ACCUM T1. PRESERVES ALL OTHERS.
  4928				@@TABLES
  4929				@@GLOBAL
  4930				@@EXIT
  4931				@@CALLS
  4932				@@FUNCTION
  4933				@@ ;
  4934
  4935				DEFINE STOLM(MAP,LDC,%A)<
  4936				IFIDN <MAP> <T> <STOLMA::>
  4937				IFIDN <MAP> <S> <STOLMS::>
  4938				IFIDN <MAP> <X> <STOLMX::>
  4939					SOSGE	%UP'LDC+UPTLDC
  4940					 STOPCD (.,STOP,LSFUF'MAP,,<LMAP Store Failure - LDC Count underflow>)
  4941				IFIDN <MAP> <T> <SETLMA::>
  4942				IFIDN <MAP> <S> <SETLMS::>
  4943				IFIDN <MAP> <X> <SETLMX::>
  4944					MOVEM	P3,%UP'MAP+UPTLMA##(W) ;STORE BACK P3.
  4945					HRRZ	T1,W
  4946					CAILE	T1,VPMAX
  4947					 STOPCD (.,STOP,LSFPR'MAP,,<LMAP Store Failure - Page out of range>)
  4948					ROT	T1,-1
  4949					JUMPL	T1,%A
  4950					HRLM	P4,%UP'MAP(T1)
  4951					CLRPTW			;;IN CASE ITS IN CURRENT MAP
  4952								;;(HAVE TO DO IT AFTER IN CASE INST FETCH DRAGS SLOT INTO PAGIN
  4953				G MEMORY)
  4954					POPJ	P,
  4955				%A:	HRRM	P4,%UP'MAP(T1)
  4956					CLRPTW			;;IN CASE IST IN CURRENT MAP
  4957					POPJ	P,
  4958				>;END STOLM MACRO DEFINITION
  4959
  4960				;NOW GENERATE THE ROUTINES
  4961
  4962	004672'	375000	000000*	STOLM(T,T)
  4963	004673'	256000	006734'
  4964	004674'	202712	000000*
  4965	004675'	550300	000012
  4966	004676'	303300	001034
  4967	004677'	256000	006737'
  4968	004700'	241300	777777
  4969	004701'	321300	004705'
  4970	004702'	506746	004636*
  4971	004703'	260040	002655'
  4972	004704'	263040	000000
  4973	004705'	542746	004702*
  4974	004706'	260040	002655'
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 104-2
CORE1.MAC	28-OCT-87 17:05		CONTEXT PAGE MAPPING AND REFERENCING

  4975	004707'	263040	000000
  4976	004710'	375000	000000*	STOLM(S,S)
  4977	004711'	256000	006742'
  4978	004712'	202712	000000*
  4979	004713'	550300	000012
  4980	004714'	303300	001034
  4981	004715'	256000	006745'
  4982	004716'	241300	777777
  4983	004717'	321300	004723'
  4984	004720'	506746	004653*
  4985	004721'	260040	002655'
  4986	004722'	263040	000000
  4987	004723'	542746	004720*
  4988	004724'	260040	002655'
  4989	004725'	263040	000000
  4990	004726'	375000	000000*	STOLM(X,T)
  4991	004727'	256000	006750'
  4992	004730'	202712	000000*
  4993	004731'	550300	000012
  4994	004732'	303300	001034
  4995	004733'	256000	006753'
  4996	004734'	241300	777777
  4997	004735'	321300	004741'
  4998	004736'	506746	004670*
  4999	004737'	260040	002655'
  5000	004740'	263040	000000
  5001	004741'	542746	004736*
  5002	004742'	260040	002655'
  5003	004743'	263040	000000
  5004							;%UPX USES %UPT+UPTLDC.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 105
CORE1.MAC	28-OCT-87 17:05		LMAP DATA ACQUISITION

  5005				SUBTTL LMAP DATA ACQUISITION
  5006
  5007				COMMENT ;@@SUBROUTINE GETDPA
  5008				@@PURPOSE OBTAIN THE DISK ADDRESS ASSOCIATED WITH AN LMAP
  5009				SLOT, WHICH IS OBTAINED IN DIFFERENT WAYS DEPENDING ON
  5010				THE STATE OF THE LMAP SLOT.
  5011				@@ENTRY JOB NUMBER IN J, LMAP SLOT CONTENTS IN P3, P4
  5012				@@ACCUM PRESERVES T1 (IN CASE ATB ADDRESS IS IN IT)
  5013				ALL OTHER ACS EXCEPT T2-T4, PG.
  5014				@@TABLES SPT, PGY
  5015				@@GLOBAL
  5016				@@EXIT RETURNS DISK PAGE ADDRESS IN T2
  5017				@@RESTRICTIONS LMAP SLOT MUST NOT HAVE NON-EXISTENT STATUS.
  5018				@@FUNCTION IF SLOT NON-EXISTENT, CRASH.  IF SLOT IS ACTIVE,
  5019				GET DISK ADDRESS FROM PGYADR OF CORE ADDRESS IN P4.
  5020				IF SLOT IS NOT ACTIVE, GET DISK ADDRESS FROM SPT IF SLOT
  5021				HAS SHARED STATUS, FROM LMAP SLOT IF SLOT IS NON-SHARED.
  5022				@@ ;
  5023
  5024	004744'	607700	004656*	GETDPA::TLNN	P3,LMMEXS	;EXISTS?
  5025	004745'	256000	000000'		 STOPCD			;NO, CRASH
  5026	004746'	603700	004443*		TLNE	P3,LMPACT	;ACTIVE?
  5027	004747'	254000	004763'		JRST	GETDP3		;YES, GO GET FROM PGY TABLE
  5028
  5029	004750'	325700	004756'	GETDP1:	JUMPGE	P3,GETDP2	;JUMP IF NON-SHARED
  5030	004751'	135400	000000*		LDB	T3,LM3SPB	;SHARED. GET SPT BASE
  5031	004752'	135340	000000*		LDB	T2,LM3SPO	;AND OFFSET
  5032	004753'	271407	000000*		ADDI	T3,SPTEN1(T2)	;COMPUTE SPT ENTRY ADDRESS
  5033	004754'	200350	000000*		MOVE	T2,SPTPNO(T3)	;GET DISK ADDRESS FROM SPT ENTRY
  5034	004755'	254000	004766'		JRST	GETDP4		;CHECK IT AND RETURN.
  5035
  5036	004756'	135400	004431*	GETDP2:	LDB	T3,LM3HDA	;GET HIGH DISK ADDRESS FROM LMAP SLOT
  5037	004757'	135340	004427*		LDB	T2,UP4LDA	;GET LOW ORDER DISK ADDRESS
  5038	004760'	242400	000000*		LSH	T3,LMASRP	;POSITION HIGH ORDER
  5039	004761'	434340	000010		IOR	T2,T3		;GET WHOLE ADDRESS IN T2
  5040	004762'	254000	004766'		JRST	GETDP4		;CHECK IT AND RETURN.
  5041
  5042	004763'	550140	000017	GETDP3:	HRRZ	PG,P4		;GET UPT SLOT CONTENTS
  5043	004764'	405140	017777		ANDI	PG,17777	;JUST CORE ADDRESS
  5044	004765'	135340	004547*		LDB	T2,PGYADR	;GET DISK ADDRESS FROM PGY TABLE
  5045
  5046	004766'	316340	004512*	GETDP4:	CAMN	T2,ADRNCT	;IF NO REAL DATA IN CP, THEN CRASH
  5047	004767'	256000	000000'		 STOPCD			;TRYING TO GET GARBAGE DATA.
  5048	004770'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 106
CORE1.MAC	28-OCT-87 17:05		LMAP DATA ACQUISITION

  5049				COMMENT ;@@SUBROUTINE GETATB
  5050				@@PURPOSE OBTAIN ACCESS TABLE ADDRESS FROM AN LMAP SLOT
  5051				@@ENTRY P3,P4 CONTAIN LMAP SLOT POINTER DATA
  5052				@@ACCUM PRESERVES ALL ACS EXCEPT T1 AND PG.
  5053				@@TABLES
  5054				@@GLOBAL
  5055				@@EXIT ATB ADDRESS IN T1. IF SLOT IS ACTIVE, PG HAS CP, ELSE IS UNCHANGED.
  5056				@@RESTRICTIONS LMAP SLOT MUST EXIST. CANNOT BE SUPER SLOT.
  5057				@@CALLS
  5058				@@FUNCTION IF SLOT IS UNSHARED AND NOT ON I/O CHAIN,
  5059				PICKUP ATB POINTER FROM LMAP SLOT.  IF SLOT IS ON I/O CHAIN,
  5060				FIND SLOT AT THE END OF THE I/O CHAIN AND USE THAT INSTEAD
  5061				OF CALLER'S SLOT TO FIND ATB ADDRESS. IF SLOT IS NOT IN I/O
  5062				CHAIN AND IS SHARED, GET ATB ADDRESS FROM PGYSPT AND SPT
  5063				IF ACTIVE, ELSE GET IT FROM LM3SPT AND SPT IF INACTIVE.
  5064				@@;
  5065
  5066	004771'	607700	004440*	GETATB::TLNN	P3,LMPSUP	;CAN'T BE SUPER SLOT
  5067	004772'	607700	004744*		TLNN	P3,LMMEXS	;SLOT EXISTS?
  5068	004773'	256000	000000'		 STOPCD			;NO, ERROR.
  5069
  5070	004774'	325700	005007'	GETAT1:	JUMPGE	P3,GETAT3	;IF UNSHARED, GET FROM SLOT OR PGYATB.
  5071	004775'	607700	004746*		TLNN	P3,LMPACT	;SHARED. ACTIVE?
  5072	004776'	254000	005004'		JRST	GETAT2		;NO, GO GET FROM SLOT, THEN SPT
  5073	004777'	550140	000017		HRRZ	PG,P4		;GET UPT SLOT
  5074	005000'	405140	017777		ANDI	PG,17777	;JUST CORE PAGE ADDRESS
  5075	005001'	135300	000000*		LDB	T1,PGYSPB	;GET SPT TABLE BASE
  5076	005002'	550306	000000*		HRRZ	T1,SPTATB(T1)	;GET ATB ADDRESS FROM SPT
  5077	005003'	263040	000000		POPJ	P,		;AND RETURN.
  5078
  5079				;SHARED, INACTIVE
  5080
  5081	005004'	135300	004751*	GETAT2:	LDB	T1,LM3SPB	;GET SPT BASE ADDRESS FROM SLOT
  5082	005005'	550306	005002*		HRRZ	T1,SPTATB(T1)	;GET ATB ADDRESS FROM SPT
  5083	005006'	263040	000000		POPJ	P,		;RETURN WITH ATB ADDR IN T1
  5084
  5085				;HERE IF UNSHARED.
  5086
  5087	005007'	607700	004775*	GETAT3:	TLNN	P3,LMPACT	;ACTIVE?
  5088	005010'	254000	005015'		JRST	GETAT4		;NO, JUST GET FROM SLOT
  5089	005011'	550140	000017		HRRZ	PG,P4		;YES, GET CORE PAGE ADDRESS
  5090	005012'	405140	017777		ANDI	PG,17777
  5091	005013'	135300	004447*		LDB	T1,PGYATB	;GET ATB POINTER
  5092	005014'	324740	000231*		PJRST	CNVATP		;CONVERT TO ADDRESS AND RETURN.
  5093
  5094	005015'	135300	004420*	GETAT4:	LDB	T1,LM3ATB	;GET ATB POINTER FROM LMAP SLOT
  5095	005016'	324740	005014*		PJRST	CNVATP		;CONVERT TO ADDRESS AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 107
CORE1.MAC	28-OCT-87 17:05		LMAP DATA ACQUISITION

  5096				COMMENT ;@@SUBROUTINE GETCPA
  5097				@@PURPOSE GET CORE PAGE ADDRESS FROM AN ACTIVE LMAP SLOT
  5098				@@ENTRY P3,P4 CONTAIN LMAP SLOT CONTENTS
  5099				@@ACCUM PRESERVES ALL ACS
  5100				@@TABLES
  5101				@@GLOBAL
  5102				@@EXIT CORE PAGE NUMBER IN PG
  5103				@@RESTRICTIONS SLOT MUST BE ACTIVE
  5104				@@CALLS
  5105				@@FUNCTION IF SLOT IS INACTIVE, CRASH. ELSE GET CORE PAGE
  5106				ADDRESS FROM P4.
  5107				@@ ;
  5108
  5109	005017'	607700	005007*	GETCPA::TLNN	P3,LMPACT	;ACTIVE?
  5110	005020'	256000	000000'		 STOPCD			;NO, CRASH
  5111	005021'	550140	000017		HRRZ	PG,P4		;GET UPT CONTENTS
  5112	005022'	405140	017777		ANDI	PG,17777	;JUST CORE PAGE ADDRESS
  5113	005023'	263040	000000		POPJ	P,		;RETURN WITH IT.
  5114
  5115				COMMENT ;@@SUBROUTINE GETCPX
  5116				@@PURPOSE GET CORE PAGE ADDRESS FROM AN LMAP SLOT (ACTIVE OR INACTIVE).
  5117				(IF LMAP SLOT IS ACTIVE, CAN TAKE A SHORT CUT AND AVOID CHT SEARCH.)
  5118				THIS ROUTINE EXISTS SEPARATELY FROM GETCPA BECAUSE THERE ARE
  5119				CALLERS OF GETCPA THAT KNOW SLOT IS SUPPOSED TO BE ACTIVE.
  5120				@@ENTRY P3,P4 CONTAIN LMAP SLOT CONTENTS
  5121				@@ACCUM DESTROYS T1-T4.
  5122				@@EXIT IF SLOT'S DP IS IN CORE, RETURNS SKIP WITH CP # IN PG.
  5123				IF SLOT'S DP IS NOT IN CORE, RETURNS NON-SKIP WITH C(PG) ZERO.
  5124				@@CALLS GETDPA, SRCCHT.
  5125				@@FUNCTION IF SLOT IS ACTIVE, PICKUP CP FROM P4 AND RETURN.
  5126				IF SLOT IS INACTIVE, CALL GETDPA TO GET DP, CALL SRCCHT
  5127				TO GET POSSIBLE CP NUMBER.
  5128				@@;
  5129
  5130	005024'	607700	005017*	GETCPX::TLNN	P3,LMPACT	;SLOT ACTIVE?
  5131	005025'	254000	005031'		JRST	GETCP1		;NO, MUST DO IT THE HARD WAY.
  5132	005026'	550140	000017		HRRZ	PG,P4		;GET MAP SLOT CONTENTS.
  5133	005027'	405140	017777		ANDI	PG,17777	;JUST CP ADDRESS
  5134	005030'	254000	004470*		JRST	CPOPJ1		;AND GIVE SKIP RETURN.
  5135
  5136	005031'	260040	004744'	GETCP1:	PUSHJ	P,GETDPA	;GET DP ADDRESS FOR SRCCHT
  5137	005032'	324740	004454'		PJRST	SRCCHT		;AND MAYBE GET CP IN PG, RETURN SKIP OR NON-SKIP.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 108
CORE1.MAC	28-OCT-87 17:05		LMAP DATA ACQUISITION

  5138				COMMENT ;@@SUBROUTINE GETSPT
  5139				@@PURPOSE GET SPT ENTRY ADDRESS AND SPT POINTER FROM AN LMAP SLOT
  5140				@@ENTRY P3 AND P4 CONTAIN LMAP DATA
  5141				@@ACCUM USES T2. IF SLOT IS ACTIVE, PG GETS CP NUMBER, ELSE IS UNCHANGED.
  5142				@@EXIT SPT ENTRY ADDRESS IN T1, SPT POINTER IN T4.
  5143				@@RESTRICTIONS SLOT MUST NOT BE A SUPER SLOT
  5144				@@FUNCTION IF SUPER OR NOT SHARED, CRASH. ELSE IF ACTIVE,
  5145				GET SPT INFORMATION FROM PGY TABLE OF THE CORE PAGE.
  5146				IF NOT ACTIVE, GET THE SPT INFORMATION FROM THE LMAP SLOT.
  5147				@@;
  5148
  5149	005033'	335000	000016	GETSPT::SKIPGE	P3		;IF NOT SHARED SLOT OR
  5150	005034'	603700	004771*		TLNE	P3,LMPSUP	;ITS A SUPER SLOT,
  5151	005035'	256000	000000'		 STOPCD			;BAD.
  5152	005036'	607700	005024*		TLNN	P3,LMPACT	;IF NOT ACTIVE,
  5153	005037'	254000	005050'		JRST	GETSP1		;GO GET THE STUFF FROM THE SLOT
  5154	005040'	550140	000017		HRRZ	PG,P4		;GET CORE PAGE AND OTHER BITS
  5155	005041'	405140	017777		ANDI	PG,17777	;JUST THE CORE PAGE NUMER IN PG
  5156	005042'	135440	004450*		LDB	T4,PGYSPT	;GET POINTER IN T4
  5157	005043'	135300	005001*		LDB	T1,PGYSPB	;GET BASE ADDRESS IN T1
  5158	005044'	135340	000000*		LDB	T2,PGYSPO	;OFFSET INTO ENTRIES IN T2
  5159	005045'	271307	004753*		ADDI	T1,SPTEN1(T2)	;COMPUTE ENTRY ADDRESS
  5160	005046'	326440	004541*		JUMPN	T4,CPOPJ	;AND GIVE RETURN IF IT WAS THERE.
  5161	005047'	256000	000000'		 STOPCD			;SOMEONE FORGOT TO SET PGYSPT
  5162
  5163	005050'	135440	004452*	GETSP1:	LDB	T4,LM3SPT	;GET POINTER IN T4
  5164	005051'	135300	005004*		LDB	T1,LM3SPB	;BASE OF SECTION IN T1
  5165	005052'	135340	004752*		LDB	T2,LM3SPO	;OFFSET INTO ENTRIES IN T2
  5166	005053'	271307	005045*		ADDI	T1,SPTEN1(T2)	;COMPUTE ENTRY ADDRESS
  5167	005054'	326440	005046*		JUMPN	T4,CPOPJ	;RETURN IF THERE WAS A POINTER
  5168	005055'	256000	000000'		 STOPCD			;BAD SLOT FORMAT.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 109
CORE1.MAC	28-OCT-87 17:05		CORE PAGE GETTERS

  5169				SUBTTL CORE PAGE GETTERS
  5170
  5171				COMMENT ;@@SUBROUTINE GETRES
  5172				@@PURPOSE USED BY SWAPPER TO GET A RESERVED PAGE TO START A SWAP IN
  5173				@@ENTRY CRSPGN, CAVPGN, ARSPGN SETUP.
  5174				@@ACCUM SMASHES T1-T4.
  5175				@@TABLES
  5176				@@GLOBAL
  5177				@@EXIT RETURNS WITH PAGE TO USE IN PG
  5178				@@RESTRICTIONS ONLY CALLED IF CALLER HAS PREVIOUSLY RESERVED
  5179				AT LEAST ONE PAGE BY CALLING SWPRES AND STILL HAS AT LEAST
  5180				ONE RESERVED PAGE LEFT.  CALLER MUST CAUSE PAGE TO CHANGE LISTS,
  5181				OR ELSE SOMEONE ELSE COULD GET SAME PAGE.
  5182				@@CALLS
  5183				@@FUNCTION IF CRSPGN NON-ZERO, DECREMENT IT,
  5184				INCREMENT CAVPGN, TAKE FIRST PAGE
  5185				ON CLEAN FREE LIST, TAKE OUT OF CHT AND GIVE GOOD RETURN.
  5186				IF CRSPGN IS ZERO AND CAVPGN IS NON-ZERO, ABANDON A RESERVED IN
  5187				PROGRESS PAGE (MUST BE ONE SINCE CALLER HAS RESERVED PAGES)
  5188				TAKE A CLEAN AVAILABLE PAGE, TAKE IT OUT OF CHT,
  5189				LEAVE CAVPGN INCREMENTED FOR IT AND RETURN.
  5190				@@;
  5191
  5192	005056'	337000	005121'	GETRES::SKIPG	CRSPGN		;ANY CLEAN RESERVED PAGES?
  5193	005057'	254000	005066'		JRST	GETRE1		;NO, TRY FOR AN AVAILABLE ONE
  5194	005060'	370000	005121'		SOS	CRSPGN		;TAKE IT
  5195	005061'	350000	005120'		AOS	CAVPGN		;LEAVE THIS INCREMENTED, INCUSE DECREMENTS IT.
  5196	005062'	550140	005112'		HRRZ	PG,CFRLST	;GET FIRST PAGE ON CLEAN FREE LIST
  5197	005063'	350001	000000		AOS	(P)		;GIVE GOOD RETURN AND
  5198	005064'	326140	004504'		JUMPN	PG,REMCHT	;TAKE OUT OF CHT AND RETURN.
  5199	005065'	256000	000000'		 STOPCD			;SOMETHING IS NOT RIGHT.
  5200
  5201	005066'	337000	005120'	GETRE1:	SKIPG	CAVPGN		;CAN WE USE A CLEAN AVAILABLE?
  5202	005067'	263040	000000		POPJ	P,		;NO, FAIL.
  5203								;YES, LEAVE IT INCREMENTED
  5204	005070'	350000	004212*		AOS	CAPPGN		;AND TRANSFER A PAGE FROM RES SOP TO
  5205								; CLEAN AVAIL SOP.
  5206	005071'	375000	000000*		SOSGE	RIPPGN
  5207	005072'	256000	000000'		 STOPCD			;COUNTS AND LIST DID NOT MATCH
  5208	005073'	550140	005112'		HRRZ	PG,CFRLST	;GIVE CALLER FIRST PAGE ON LIST
  5209	005074'	350001	000000		AOS	(P)		;GIVE SUCCESS RETURN
  5210	005075'	326140	004504'		JUMPN	PG,REMCHT	;TAKE PAGE OFF CHT IF ITS THERE
  5211								; AND RETURN
  5212	005076'	256000	000000'		 STOPCD			;SOMETHING WENT WRONG.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 110
CORE1.MAC	28-OCT-87 17:05		CORE PAGE GETTERS

  5213				COMMENT ;@@SUBROUTINE GETFRE
  5214				@@PURPOSE GET NEXT CLEAN AVAILABLE PAGE NUMBER IN PG
  5215				@@ENTRY CAVPGN SETUP CORRECTLY
  5216				@@ACCUM SMASHES T1-T4.
  5217				@@TABLES
  5218				@@GLOBAL
  5219				@@EXIT RETURNS CORE PAGE NUMBER IN PG, CAVPGN STILL INCREMENTED FOR IT.
  5220				@@RESTRICTIONS CALLER MUST CHANGE RETURNED CORE PAGE'S LIST
  5221				IMMEDIATELY, OR ELSE ANOTHER CALLER WILL GET SAME PAGE.
  5222				@@CALLS
  5223				@@FUNCTION IF NO CLEAN AVAILABLE PAGES LEFT, ERROR RETURN.
  5224				ELSE RETURN FIRST CORE PAGE ON CLEAN FREE LIST IN PG.
  5225				@@ ;
  5226
  5227	005077'	337000	005120'	GETFRE::SKIPG	CAVPGN		;ANY TO GET?
  5228	005100'	263040	000000		 POPJ	P,		;NO, ERROR
  5229								;LEAVE CAVPGN INCREMENTED.
  5230	005101'	550140	005112'		HRRZ	PG,CFRLST
  5231	005102'	350001	000000		AOS	(P)		;SET FOR SUCCESS RETURN AND
  5232	005103'	326140	004504'		JUMPN	PG,REMCHT	;TAKE OFF CHT IF ITS THERE.
  5233	005104'	256000	006756'		 STOPCD (.,STOP,GETFR1,,<GETFRE List was empty, but CAVPGN nonzero>)
  5234
  5235
  5236				COMMENT;@@SUBROUTINE INCCAV
  5237				@@PURPOSE EITHER RETURN CLEAN FREE PAGE TO I/O PAGE POOL
  5238				OR CLEAN AVAILABLE POOL, DEPENDING ON STATE OF IOPPGN.
  5239				CALLED FROM DECUSE, REMCHT, SODCHK, SIDCHK. SWIBAD DOES NOT
  5240				CALL (SEE COMMENT THERE.)
  5241				@@ENTRY IOPPGN, CAVPGN SETUP
  5242				@@ACCUM USES T1.
  5243				@@EXIT RETURN WITH EITHER IOPPGN OR CAVPGN ADJUSTED.
  5244				ALWAYS NON-SKIP RETURN.
  5245				@@FUNCTION IF NUMBER OF CORE PAGES RESERVED FOR "I/O"
  5246				NOT UP TO QUOTA, DECREMENT IOPPGN (ONE MORE IO PAGE AVAIL)
  5247				AND RETURN, ELSE INCREMENT CAVPGN AND RETURN.
  5248				@@;
  5249
  5250	005105'	214300	005124'	INCCAV::MOVM	T1,IOPPGN	;GET NUMBER OF IO PAGES HAVE NOW.
  5251	005106'	315300	005123'		CAMGE	T1,IOPQTA	;SKIP IF HAVE ENOUGH ALREADY.
  5252	005107'	374000	005124'		SOSA	IOPPGN		;NOT ENOUGH, GIVE ONE TO I/O POOL.
  5253	005110'	350000	005120'		AOS	CAVPGN		;ENOUGH, GIVE ONE TO AVAILABLE POOL.
  5254	005111'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 111
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST HANDLING

  5255				SUBTTL CORE PAGE LIST HANDLING
  5256
  5257				COMMENT \
  5258				AT ANY GIVEN TIME, A PAGE CAN BE IN ONE OF THE FOLLOWING LISTS:
  5259
  5260				CFRLST - CLEAN FREE LIST. THIS LIST IS DIVIDED INTO TWO SETS,
  5261				  WHOSE MEMBERS ARE REPRESENTED IN THE COUNTS CAVPGN AND
  5262				  CRSPGN. CAVPGN REPRESENTS THE CLEAN AVAILABLE PAGES, AND
  5263				  CRSPGN REPRESENTS THE CLEAN RESERVED PAGES, THAT IS, THOSE
  5264				  PAGES SET ASIDE FOR SWAPPING ACTIVITY.  THERE IS ONLY
  5265				  ONE CLEAN FREE LIST INSTEAD OF A CLEAN ACTIVE AND A CLEAN
  5266				  RESERVED LIST, SINCE IT IS NOT USEFUL TO DISTINGUISH
  5267				  ACTIVE FROM RESERVED PAGES ON A PAGE BY PAGE BASIS.  ALL THAT
  5268				  MATTERS IS THAT A CERTAIN NUMBER OF CLEAN FREE PAGES
  5269				  BE SET ASIDE FOR USE BY JOBS THAT HAVE BEEN PROMISED PAGES TO
  5270				  SWAP THINGS INTO.
  5271
  5272				DFRLST - DIRTY FREE LIST.  PAGES GET ONTO THE DIRTY FREE LIST
  5273				  WHEN SOMEONE THAT WAS USING THEM MADE THEM DIRTY AND THEN
  5274				  EVERYONE REMOVED THE PAGE FROM THEIR WORKING SETS, MAKING
  5275				  THE PAGE FREE. (FILE PAGES THAT ARE REMOVED, RATHER THAN
  5276				  JUST TAKEN OUT OF THE WORKING SET, ARE NOT FOUND HERE, SINCE
  5277				  THEY MUST BE WRITTEN BACK TO THE DISK BEFORE THE REMOVE CALL
  5278				  RETURNS TO THE CALLER. PRIVATE PAGES REMOVED FROM ALL JOBS'
  5279				  ADDRESS SPACES ARE NOT FOUND HERE EITHER, SINCE THE DATA
  5280				  THEY CONTAIN IS JUST THROWN AWAY BY MARKING THE CORE PAGE CLEAN.
  5281				  DFRPGN CONTAINS THE NUMBER OF PAGES ON THIS LIST.
  5282
  5283				USELST - THIS IS WHERE PAGES, BOTH CLEAN AND DIRTY, ARE FOUND IF
  5284				  THERE IS NO SWAP OUT IN PROGRESS AND THE USE COUNT FOR
  5285				  THE CORE PAGE IS NON-ZERO.
  5286
  5287				SPRLST - SWAP IN PROGRESS LIST. BOTH SWAP IN IN PROGRESS AND
  5288				  SWAP OUT IN PROGRESS PAGES ARE FOUND HERE.
  5289
  5290				SODLST - SWAP OUT DONE LIST. DISK INTERRUPT LEVEL TRANSFERS
  5291				  PAGES FROM SPRLST TO HERE WHEN A SWAP OUT COMPLETES FOR THEM.
  5292
  5293				SIDLST - SWAP IN DONE LIST. SAME AS SWAP OUT DONE LIST, BUT FOR
  5294				  SWAP IN COMPLETE PAGES.
  5295
  5296				\
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 112
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST HANDLING

  5297				;DEFINITIONS OF LIST HEADERS, COUNTS
  5298
  5299				DEFINE NXTLST(A)<
  5300					XP A'.N,ZZ
  5301					ZZ==ZZ+1
  5302				A'LST::0>
  5303
  5304			000000		ZZ==0		;START WITH LIST 0
  5305
  5306	005112'			LSTLST::
  5307	005112'	000000	000000	NXTLST(CFR)
  5308	005113'	000000	000000	NXTLST(DFR)
  5309	005114'	000000	000000	NXTLST(USE)
  5310	005115'	000000	000000	NXTLST(SOD)
  5311	005116'	000000	000000	NXTLST(SID)
  5312	005117'	000000	000000	NXTLST(SPR)
  5313
  5314					PURGE SPRLST	;ORIGINATES IN UNIT DATA BLOCK, NOT HERE.
  5315
  5316				;COUNTS
  5317
  5318	005120'	000000	000000	CAVPGN::0		;CLEAN AVAILABLE COUNT
  5319	005121'	000000	000000	CRSPGN::0		;CLEAN RESERVED COUNT
  5320	005122'	000000	000000	DFRPGN::0		;DIRTY FREE COUNT
  5321
  5322				;I/O CORE PAGE LOCATIONS.
  5323
  5324				EXTERN M.IQTA
  5325
  5326	005123'	000000	000000*	IOPQTA::EXP M.IQTA		;NUMBER OF I/O PAGES TO RESERVE
  5327	005124'	000000	000000*	IOPPGN::EXP -M.IQTA		;-VE NUMBER OF I/O PGES AVAILABLE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 113
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST HANDLING

  5328				COMMENT ;@@SUBROUTINE PUTLST/PUTLSB
  5329				@@PURPOSE TAKE A PHYSICAL CORE PAGE OFF ONE LIST AND PUT
  5330				IT ONTO THE BACK/FRONT OF A NEW LIST.
  5331				@@ENTRY ENTER AT PUTLST TO PUT PAGE AT END OF LIST,
  5332				AT PUTLSB TO PUT PAGE AT BEGINNING OF LIST.
  5333				T4 CONTAINS CORE PAGE LIST CODE (???.N, WHERE ???
  5334				REPRESENTS USE, CFR, DFR, SPR, SOD, SID.), PG CONTAINS
  5335				CORE PAGE NUMBER TO TRANSFER.
  5336				@@ACCUM DESTROYS ALL T ACS. PRESERVES PG, ALL OTHER ACS.
  5337				@@TABLES PGY TABLES, LSTLST (TRANSLATION FROM LIST CODE
  5338				TO LIST HEAD ADDRESS TABLE)
  5339				@@GLOBAL
  5340				@@EXIT CORE PAGE NUMBER STILL IN PG. CORE PAGE ON THE NEW LIST.
  5341				@@RESTRICTIONS CANNOT BE USED TO PUT PAGE ON SWAP IN PROGRES
  5342				LIST OR TAKE IT OFF SWAP IN PROGRESS LIST, SWPENQ AND
  5343				SWPINT DO THIS BY HAND.
  5344				@@CALLS REMLST (REMOVE CORE PGE FROM A LIST)
  5345				@@FUNCTION CALLS REMLST TO REMOVE THE PAGE FROM ITS OLD
  5346				LIST. INSERT THE CORE PAGE AT THE END OF THE NEW LIST
  5347				(IMPORTANT SO THAT FREE CORE PAGES CIRCULATE, IN CASE A JOB
  5348				MAPS AND REMOVES A SINGLE PAGE, SO THAT SAME CORE
  5349				PAGE DOES NOT GET USED OVER AND OVER AGAIN)
  5350				@@;
  5351
  5352	005125'	306440	000005	PUTLST::CAIN	T4,SPR.N	;TRYING TO PUT ONTO SPR LIST?
  5353	005126'	256000	000000'		 STOPCD			;YES, ONLY SWPENQ DOES THAT.
  5354	005127'	260040	005167'		PUSHJ	P,REMLST	;TAKE CORE PAGE OFF OLD LIST
  5355	005130'	137440	000000*		DPB	T4,PGYLST	;SET NEW LIST NUMBER
  5356
  5357	005131'	554311	005112'		HLRZ	T1,LSTLST(T4)	;GET OLD LAST MEMBER
  5358	005132'	322300	005161'		JUMPE	T1,PUTLS2	;JUMP IF LIST IS EMPTY
  5359	005133'	137300	000000*		DPB	T1,PGYBPL	;NEW LAST POINTS BACK TO OLD LAST
  5360	005134'	250300	000003		EXCH	T1,PG		;ADDRESS OLD LAST
  5361	005135'	137300	000000*		DPB	T1,PGYFPL	;OLD LAST POINTS FORWARD TO NEW LAST
  5362	005136'	250300	000003		EXCH	T1,PG		;NEW PAGE BACK INTO PG
  5363	005137'	506151	005112'		HRLM	PG,LSTLST(T4)	;NEW LAST POINTED TO BY LH OF LSTLST
  5364	005140'	400300	000000		SETZ	T1,		;CLEAR OUT FORWARD LINK OF NEW LAST
  5365	005141'	137300	005135*		DPB	T1,PGYFPL	;
  5366	005142'	263040	000000		POPJ	P,		;AND RETURN.
  5367
  5368	005143'	306440	000005	PUTLSB::CAIN	T4,SPR.N	;ERROR IF MESSING WITH I/O LIST
  5369	005144'	256000	000000'		 STOPCD
  5370	005145'	260040	005167'		PUSHJ	P,REMLST
  5371	005146'	137440	005130*		DPB	T4,PGYLST	;NEW LIST NUMBER
  5372	005147'	550311	005112'		HRRZ	T1,LSTLST(T4)	;GET OLD FIRST
  5373	005150'	322300	005161'		JUMPE	T1,PUTLS2	;IF EMPTY, MAKE THIS THE ONLY ENTRY
  5374	005151'	137300	005141*		DPB	T1,PGYFPL	;OK,NEW FIRST POINTS TO OLD FIRST
  5375	005152'	250300	000003		EXCH	T1,PG		;ADDRESS OLD FIRST
  5376	005153'	137300	005133*		DPB	T1,PGYBPL	;OLD FIRST POINTS BACK TO NEW FIRST
  5377	005154'	250300	000003		EXCH	T1,PG		;GET NEW PAGE BACK INTO PG
  5378	005155'	542151	005112'		HRRM	PG,LSTLST(T4)	;NEW FIRST IS FIRST POINTER
  5379	005156'	400300	000000		SETZ	T1,		;CLEAR OUT BACK LINK IN NEW FIRST
  5380	005157'	137300	005153*		DPB	T1,PGYBPL
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 113-2
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST HANDLING

  5381	005160'	263040	000000		POPJ	P,		;AND RETURN
  5382
  5383
  5384				;HERE IF LIST WAS EMPTY. BOTH HALVES OF HEADER POINT TO ONLY PAGE
  5385				; ON THE LIST, BOTH FPL AND BPL ARE ZERO
  5386
  5387	005161'	137300	005151*	PUTLS2:	DPB	T1,PGYFPL	;T1 IS ZERO. ZERO PGYFPL
  5388	005162'	137300	005157*		DPB	T1,PGYBPL	; AND PGYBPL, THIS IS FIRST AND LAST MEMBER
  5389	005163'	200300	000003		MOVE	T1,PG		;COPY OF PAGE NUMBER
  5390	005164'	507000	000006		HRLS	T1		;NUMBER,,NUMBER
  5391	005165'	202311	005112'		MOVEM	T1,LSTLST(T4)	;STORE THIS PAGE AS FIRST AND LAST
  5392	005166'	263040	000000		POPJ	P,		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 114
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST HANDLING

  5393				;ROUTINE TO REMOVE A CORE PAGE FROM THE LIST IT IS ON
  5394				; CURRENTLY.  ENTER WITH PG CONTAINING THE CORE PAGE NUMBER,
  5395				; PGYLST CONTAINING THE CURRENT LIST CODE.  SMASHES
  5396				; ALL T ACS EXCEPT T4, WHICH IS PRESERVED.
  5397
  5398	005167'	135300	005162*	REMLST::LDB	T1,PGYBPL	;GET OLD LAST IN T1
  5399	005170'	135340	005161*		LDB	T2,PGYFPL	;GET OLD NEXT IN T2
  5400	005171'	135400	005146*		LDB	T3,PGYLST	;GET LIST NUMBER IN T3
  5401	005172'	306400	000005		CAIN	T3,SPR.N	;TRYING TO TAKE OFF SWAP IN PROG LIST?
  5402	005173'	256000	000000'		 STOPCD			;YES, ERROR, THIS IS DONE SPECIALLY
  5403
  5404				;FIRST POINT OLD LAST PAGE FORWARD TO OLD NEXT PAGE.  IF THERE IS
  5405				; NO OLD LAST PAGE (PAGE BEING REMOVED IS THE FIRST IN THE
  5406				; LIST) THEN POINT FORWARD HEADER POINTER AT OLD NEXT.
  5407				; (IF OLD NEXT DOES NOT EXIST, I.E. REMOVED PAGE IS ONLY ONE,
  5408				; WILL STORE A ZERO IN FORWARD HEADER POINTER).
  5409
  5410	005174'	326300	005177'		JUMPN	T1,REMLS1	;JUMP IF OLD LAST EXISTS.
  5411	005175'	542350	005112'		HRRM	T2,LSTLST(T3)	;DOESN'T. HEADER FORWARD POINTER
  5412	005176'	254000	005202'		JRST	REMLS2		; POINTS TO OLD NEXT PAGE.
  5413
  5414	005177'	250300	000003	REMLS1:	EXCH	T1,PG		;MAKE OLD LAST "ADDRESSABLE"
  5415	005200'	137340	005170*		DPB	T2,PGYFPL	;OLD LAST POINTS FORWARD TO OLD NEXT
  5416	005201'	250300	000003		EXCH	T1,PG		;GET PAGES BACK WHERE THEY BELONG
  5417
  5418				;NOW POINT OLD NEXT PAGE BACKWARD TO OLD LAST PAGE. IF THERE
  5419				; IS NO OLD NEXT PAGE, THEN POINT BACKWARD HEADER POINTER
  5420				; TO OLD LAST PAGE, WHICH IS THE NEW LAST PAGE ON THE LIST.
  5421				; IF THERE IS NO OLD LAST PAGE EITHER, BACKWARD HEADER
  5422				; POINTER IS SET TO ZERO.
  5423
  5424	005202'	326340	005205'	REMLS2:	JUMPN	T2,REMLS3	;JUMP IF THERE IS AN OLD NEXT PGE
  5425	005203'	506310	005112'		HRLM	T1,LSTLST(T3)	;NOT ONE. BACKWARD HEADER POINTER
  5426	005204'	263040	000000		POPJ	P,		; POINTS TO OLD LAST PAGE, IF THERE
  5427								; IS ONE. RETURN.
  5428
  5429	005205'	250340	000003	REMLS3:	EXCH	T2,PG		;MAKE OLD NEXT PAGE "ADDRESSABLE"
  5430	005206'	137300	005167*		DPB	T1,PGYBPL	;OLD NEXT POINTS BACK TO OLD LAST
  5431	005207'	250340	000003		EXCH	T2,PG		;RESTORE REMOVED PAGE TO PG
  5432	005210'	263040	000000		POPJ	P,		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 115
CORE1.MAC	28-OCT-87 17:05		CORE PAGE USE COUNT HANDLING

  5433				SUBTTL CORE PAGE USE COUNT HANDLING
  5434				COMMENT ;@@SUBROUTINE INCUSE
  5435				@@PURPOSE INCREMENT CORE PAGE USE COUNT, TRANSFER CORE PAGE
  5436				TO NEW LIST IF NECESSARY, ADJUST CAVPGN, DFRPGN, RIPPGN, CAPPGN
  5437				@@ENTRY PG CONTAINS THE PHYSICAL CORE PAGE NUMBER (INDEX TO ITS
  5438				PGY ENTRY), CAVPGN (NUMBER OF CLEAN AVAILABLE PAGES)
  5439				CONTAINS NUMBER OF CLEAN AVAILABLE PAGES, DFRPGN CONTAINS
  5440				NUMBER OF DIRTY FREE PAGES, RIPPGN CONTAINS NUMBER OF SWAP
  5441				OUT IN PROGRESS PAGES THAT ARE RESERVED, CAPPGN CONTAINS
  5442				NUMBER OF CLEAN AVAILABLE SWAP OUT IN PROGRESS PAGES.
  5443				@@ACCUM
  5444				@@TABLES
  5445				@@GLOBAL
  5446				@@EXIT RETURNS WITH PG PRESERVED
  5447				@@RESTRICTIONS IF SWAP OUT IS IN PROGRESS AND PGYRES IS SET,
  5448				CALLER IS RESPONSIBLE FOR MAKING SURE CAPPGN IS NOT ZERO.
  5449				IF PAGE IN PG IS CLEAN FREE, CALLER IS RESPONSIBLE FOR
  5450				MAKING SURE CAVPGN IS NON-ZERO.
  5451				@@CALLS
  5452				@@FUNCTION INCREMENT USE COUNT. IF USE COUNT IS GREATER THAN ONE,
  5453				JUST RETURN (PAGE IS ALREADY IN USE, SO OK). IF SWAP IN
  5454				IS IN PROGRESS, JUST RETURN. IF SWAP OUT IN PROGRESS
  5455				AND PAGE IS DIRTY, ITS AVAILABLE SO RETURN. IF SWAP OUT
  5456				IS IN PROGRESS AND PAGE IS CLEAN, AND CAPPGN IS NON-ZERO,
  5457				DECREMENT CAPPGN AND RETURN. IF PAGE IS FREE WITH NO SWAPPING
  5458				IN PROGRESS, IF ITS DIRTY, DECREMENT DFRPGN, PUT ON
  5459				USE LIST AND RETURN. IF ITS CLEAN AND CAVPGN IS NON-ZERO,
  5460				DECREMENT CAVPGN PUT ON USE LIST AND RETURN.
  5461				@@ ;
  5462
  5463	005211'	350320	004504*	INCUSE::AOS	T1,@PGYUSE	;INCREMENT PGYUSE DIRECTLY
  5464	005212'	606300	000000*		TRNN	T1,USEMAX	;OVERFLOW TO ZERO?
  5465	005213'	256000	006761'		 STOPCD (.,STOP,PGUSEO,,<Page Use Error: Count increment overflow>);;INCUSE+2
  5466	005214'	602300	777777*		TRNE	T1,USEMAX-1	;IS IT EQUAL TO 1?
  5467	005215'	263040	000000		  POPJ	P,		;NO, WE'RE THRU.
  5468	005216'	135300	004505*		LDB	T1,PGYSTS	;GET CP STATUS
  5469	005217'	602300	001164*		TRNE	T1,PGPSIP	;SWAP IN IN PROGRESS?
  5470	005220'	263040	000000		  POPJ	P,		;YES, JUST RETURN.
  5471	005221'	602300	004210*		TRNE	T1,PGPSOP	;SWAP OUT?
  5472	005222'	254000	005230'		  JRST	INCUS1		;YES, SEE IF ITS DIRTY TOO
  5473	005223'	606300	001165*		TRNN	T1,PGPDRT	;WAS FREE.
  5474	005224'	374000	005120'		  SOSA	CAVPGN		;CLEAN FREE
  5475	005225'	370000	005122'		SOS	DFRPGN		;DIRTY FREE
  5476	005226'	201440	000002		MOVEI	T4,USE.N	;PUT CP ONTO USE LIST AND
  5477	005227'	324740	005125'		PJRST	PUTLST		;RETURN.
  5478
  5479	005230'	602300	005223*	INCUS1:	TRNE	T1,PGPDRT	;SWAP OUT IN PROG. DIRTY?
  5480	005231'	263040	000000		  POPJ	P,		;YES, CAN JUST TAKE IT.
  5481	005232'	375000	005070*		SOSGE	CAPPGN		;CLEAN, CAN ONLY HAVE IT IF CAPPGN
  5482	005233'	256000	000000'		 STOPCD			; IS UP. ELSE CALLER GOOFED.
  5483	005234'	263040	000000		POPJ	P,		;RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 116
CORE1.MAC	28-OCT-87 17:05		CORE PAGE USE COUNT HANDLING

  5484				COMMENT ;@@SUBROUTINE DECUSE
  5485				@@PURPOSE DECREMENT CORE PAGE USE COUNT, TRANSFER CORE PAGE TO
  5486				FREE LIST IF COUNT GOES TO ZERO.
  5487				@@ENTRY PG CONTAINS CORE PAGE NUMBER OF CORE PAGE
  5488				@@ACCUM USES T1-T4.
  5489				@@TABLES
  5490				@@GLOBAL
  5491				@@EXIT PG CONTAINS CORE PAGE NUMBER DECUSE WAS CALLED WITH
  5492				@@RESTRICTIONS PAGE MUST NOT HAVE DIRECT I/O IN PROGRESS OR
  5493				HAVE ANY SLOTS STILL ON LMA CHAIN.
  5494				@@CALLS
  5495				@@FUNCTION DECREMENT CORE PAGE USE COUNT. IF SWAP IN
  5496				IN PROGRESS, RETURN. IF CORE PAGE IS NOW FREE, ZERO PGYATB AND
  5497				PGYSPT. IF SWAP OUT IS IN PROGRESS AND PAGE IS
  5498				DIRTY, JUST RETURN. IF SWAP OUT IS IN PROG AND PAGE IS
  5499				CLEAN, INCREMENT CLEAN AVAILABLE IN PROGRESS COUNT AND
  5500				RETURN.  IF CORE PAGE USE COUNT STILL NON-ZERO,
  5501				RETURN. ELSE, PAGE IS NOW FREE. IF CLEAN, INCREMENT CLEAN
  5502				AVAILABLE COUNT AND PUT ONTO CLEAN FREE LIST. IF DIRTY,
  5503				INCREMENT DIRTY FREE COUNT AND PUT ONTO DIRTY FREE LIST.
  5504				RETURN.
  5505				@@ ;
  5506
  5507	005235'	370360	005211*	DECUSE::SOS	T2,@PGYUSE	;DECREMENT PGYUSE DIRECTLY
  5508	005236'	646340	005212*		TRCN	T2,USEMAX	;IF WENT TO ZERO,
  5509	005237'	254000	005243'		  JRST	DECUS0		;THEN FIX THINGS.
  5510	005240'	646340	005236*		TRCN	T2,USEMAX	;DID IT GO TO ALL ONES?
  5511	005241'	256000	006764'		 STOPCD (.,STOP,PGUSEU,,<Page Use Error: Count decrement underflow>);;DECUSE+4
  5512	005242'	263040	000000		POPJ	P,		;NO, JUST RETURN, USE COUNT STILL UP.
  5513
  5514	005243'	400340	000000	DECUS0:	SETZ	T2,		;ZERO OUT
  5515	005244'	137340	005013*		DPB	T2,PGYATB	;PGYATB AND PGYSPT
  5516	005245'	137340	005042*		DPB	T2,PGYSPT
  5517	005246'	135300	004330*		LDB	T1,PGYDIO	;CRASH IF DIO ON OR
  5518	005247'	135340	004501*		LDB	T2,PGYLMJ	;STILL AN ACTIVE SLOT
  5519	005250'	336000	000006		SKIPN	T1
  5520	005251'	332000	000007		SKIPE	T2
  5521	005252'	256000	006767'		 STOPCD (.,STOP,PGUSEA,,<Page Use Error: Slot still active>);;DECUS0+7
  5522	005253'	135300	005216*		LDB	T1,PGYSTS	;GET CP STATUS BITS
  5523	005254'	602300	005217*		TRNE	T1,PGPSIP	;SWAP IN GOING?
  5524	005255'	263040	000000		POPJ	P,		;YES, DON'T TOUCH LISTS AND COUNTS
  5525	005256'	405300	000000*		ANDI	T1,PGPSOP!PGPDRT ;THESE MUST BE 1B34 AND 1B35!
  5526					XCT	[JRST DECUS1	;CLEAN FREE
  5527						 JRST DECUS2	;DIRTY FREE
  5528						 AOS  CAPPGN	;CLEAN IN PROGRESS
  5529	005257'	256006	006772'			 POPJ P,](T1)	;DIRTY IN PROGRESS
  5530	005260'	263040	000000		POPJ	P,		;FOR THE AOS.
  5531
  5532				;HERE FOR CLEAN FREE PAGES
  5533
  5534	005261'	201440	000000	DECUS1:	MOVEI	T4,CFR.N
  5535	005262'	260040	005105'		PUSHJ	P,INCCAV	;EITHER MAKE AVAILABLE OR IN I/O POOL.
  5536	005263'	324740	005125'		PJRST	PUTLST
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 116-2
CORE1.MAC	28-OCT-87 17:05		CORE PAGE USE COUNT HANDLING

  5537
  5538				;HERE FOR DIRTY FREE PGES
  5539
  5540	005264'	201440	000001	DECUS2:	MOVEI	T4,DFR.N
  5541	005265'	350000	005122'		AOS	DFRPGN
  5542	005266'	324740	005125'		PJRST	PUTLST
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 117
CORE1.MAC	28-OCT-87 17:05		WORKING SET BIT HANDLING

  5543				SUBTTL WORKING SET BIT HANDLING
  5544
  5545				;ROUTINES TO SET, CLEAR, TEST EITHER USER WORKING SET OR
  5546				; MONITOR WORKING SET BITS.  INCREMENT OR DECREMENT THE
  5547				; CORRECT COUNT, IF APPROPRIATE.
  5548				; CALL WITH VP NUMBER IN RH(W) (LH CAN BE ANYTHING), JOB IN J, UPT ADDRESSABLE THRU %UPT.
  5549				; ROUTINE NAMES:
  5550				; SET - SETUWS, SETMWS, SETSTL
  5551				; CLEAR - CLRUWS, CLRMWS
  5552				; TEST - TSTUWS, TSTMWS
  5553
  5554
  5555	005267'	135400	003600*	SETUWS::LDB	T3,JBYUWS	;GET SIZE
  5556	005270'	350000	000010		AOS	T3
  5557	005271'	303400	001000		CAILE	T3,1000		;TOO HIGH?
  5558	005272'	256000	000000'		 STOPCD			;YES, CRASH.
  5559	005273'	137400	005267*		DPB	T3,JBYUWS
  5560	005274'	200440	006776'		MOVE	T4,[IORM T2,%UPT+UPTUWB(T1)]
  5561	005275'	254000	005372'		JRST	FBITWS
  5562
  5563	005276'	606500	777000	SETMWS::TRNN	W,777000		;USER PAGE?
  5564	005277'	254000	005306'		JRST	SETMW1			;YES.
  5565	005300'	135400	003773*		LDB	T3, JBYPPP	;NO -- ADJUST JBYPPP TOO
  5566	005301'	350000	000010		AOS	T3
  5567	005302'	303400	000077		CAILE	T3, 77
  5568	005303'	256000	000000'		 STOPCD
  5569	005304'	137400	005300*		DPB	T3, JBYPPP
  5570	005305'	254000	005315'		JRST	SETMW2
  5571	005306'	550300	000012	SETMW1:	HRRZ	T1, W
  5572	005307'	231300	004030*		IDIVI	T1, AGECPW	;T1/ AGE CELL WD #, T2/ CELL IN WD #
  5573	005310'	135347	004031*		LDB	T2, AGEPTR(T2)	;T2/ AGE
  5574	005311'	311340	006215'		CAML	T2, AGEELD
  5575	005312'	350000	000000*		AOS	%UPT+UPTELD
  5576	005313'	311340	006214'		CAML	T2, AGEMAT
  5577	005314'	350000	000000*		AOS	%UPT+UPTMAT	;ADJUST AGE COUNTS
  5578	005315'	135400	004071*	SETMW2:	LDB	T3, JBYMWS
  5579	005316'	350000	000010		AOS	T3
  5580	005317'	303400	001777		CAILE	T3, 1777
  5581	005320'	256000	000000'		 STOPCD
  5582	005321'	137400	005315*		DPB	T3, JBYMWS
  5583	005322'	200440	006777'		MOVE	T4,[IORM T2,%UPT+UPTMWB(T1)]
  5584	005323'	254000	005372'		JRST	FBITWS
  5585
  5586	005324'	200440	007000'	SETSTL::MOVE	T4,[IORM T2,STLBTM(T1)] ;SET BIT IN STOLEN BIT MAP.
  5587	005325'	254000	005372'		JRST	FBITWS
  5588
  5589	005326'	334440	007001'	CLXUWS::SKIPA	T4,[%UPX]
  5590	005327'	201440	004705*	CLRUWS::MOVEI	T4,%UPT
  5591	005330'	135400	005273*		LDB	T3,JBYUWS
  5592	005331'	375000	000010		SOSGE	T3
  5593	005332'	256000	000000'		 STOPCD
  5594	005333'	137400	005330*		DPB	T3,JBYUWS
  5595	005334'	270440	007002'		ADD	T4,[ANDCAM T2,UPTUWB(T1)] ;MAKE INTO BIT CLEARING INSTRUCTION
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 117-2
CORE1.MAC	28-OCT-87 17:05		WORKING SET BIT HANDLING

  5596	005335'	254000	005372'		JRST	FBITWS
  5597
  5598	005336'	334440	007001'	CLXMWS::SKIPA	T4,[%UPX]		;DO EVERYTHING TO UPX
  5599	005337'	201440	005327*	CLRMWS::MOVEI	T4,%UPT		;DO EVERYTHING TO %UPT
  5600	005340'	606500	777000		TRNN	W,777000		;USER PAGE?
  5601	005341'	254000	005347'		JRST	CLRMW1		;YES.
  5602	005342'	135400	005304*		LDB	T3, JBYPPP	;NO -- ADJUST JBYPPP TOO
  5603	005343'	375000	000010		SOSGE	T3
  5604	005344'	256000	000000'		 STOPCD
  5605	005345'	137400	005342*		DPB	T3, JBYPPP
  5606	005346'	254000	005356'		JRST	CLRMW2
  5607	005347'	550300	000012	CLRMW1:	HRRZ	T1, W
  5608	005350'	231300	005307*		IDIVI	T1, AGECPW	;T1/ AGE CELL WD #, T2/ AGE CELL IN WD
  5609	005351'	135347	005310*		LDB	T2, AGEPTR(T2)	;T2/ AGE
  5610	005352'	311340	006214'		CAML	T2, AGEMAT
  5611	005353'	370011	000000*		  SOS	UPTMAT(T4)
  5612	005354'	311340	006215'		CAML	T2, AGEELD
  5613	005355'	370011	000000*		  SOS	UPTELD(T4)	;ADJUST AGE COUNTS
  5614	005356'	135400	005321*	CLRMW2:	LDB	T3,JBYMWS
  5615	005357'	375000	000010		SOSGE	T3
  5616	005360'	256000	000000'		 STOPCD
  5617	005361'	137400	005356*		DPB	T3,JBYMWS
  5618	005362'	270440	007003'		ADD	T4,[ANDCAM T2,UPTMWB(T1)]
  5619	005363'	254000	005372'		JRST	FBITWS
  5620
  5621	005364'	334440	007004'	TSXUWS::SKIPA	T4,[TDNN T2,%UPX+UPTUWB(T1)]
  5622	005365'	200440	007005'	TSTUWS::MOVE	T4,[TDNN T2,%UPT+UPTUWB(T1)]
  5623	005366'	254000	005372'		JRST	FBITWS
  5624
  5625	005367'	334440	007006'	TSXMWS::SKIPA	T4,[TDNN T2,%UPX+UPTMWB(T1)]
  5626	005370'	200440	007007'	TSTMWS::MOVE	T4,[TDNN T2,%UPT+UPTMWB(T1)]
  5627	005371'	254000	005372'		JRST	FBITWS
  5628
  5629	005372'	550300	000012	FBITWS:	HRRZ	T1,W		;GET VP NUMBER
  5630	005373'	303300	003405*		CAILE	T1,VPUMAX	;CONTEXT PGES NOT ALLOWED
  5631	005374'	256000	000000'		 STOPCD			;NOT IN RANGE
  5632	005375'	231300	000044		IDIVI	T1,^D36		;GET WORD INDEX IN T1, BIT IN T2
  5633	005376'	200347	001364*		MOVE	T2,BITTBL(T2)	;FROM BIT NUMBER TO ACTUAL BIT
  5634	005377'	256000	000011		XCT	T4		;SET CLEAR OR TEST
  5635	005400'	263040	000000		POPJ	P,		;NON-SKIP
  5636	005401'	254000	005030*		JRST	CPOPJ1		;SKIP.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 118
CORE1.MAC	28-OCT-87 17:05		WORKING SET BIT HANDLING

  5637				;ROUTINE TO SCAN ADDRESS SPACE BIT TABLE
  5638				; AND RETURN FIRST PAGE GREATER THAN OR EQUAL TO
  5639				; VIRTUAL PAGE NUMBER IN W. CALLED AS FOLLOWS:
  5640				;	JSP	F,NXTUWS	;THE FIRST TIME
  5641				;	  <NO MORE PAGES IN RANGE>
  5642				;	<NEXT PAGE IN W>
  5643				;		.
  5644				;		.
  5645				;	JRST	(M)		;GO FOR NEXT PAGE
  5646				;	   OR
  5647				;	JSP	F,FINXWS	;IF DON'T WANT TO SCAN ANYMORE
  5648				;
  5649				;IF THE CALLER DOES NOT DESIRE TO SCAN ANY MORE PAGES
  5650				; AFTER HAVING RECEIVED A PAGE FROM NXTUWS, CALLER MUST
  5651				; CALL FINXWS (JSP F,FINXWS) TO FIX UP STACK, UPON WHICH
  5652				; SOME THINGS ARE SAVED.  NO NEED TO CALL FINXWS AFTER
  5653				; GETTING NON-SKIP RETURN.
  5654
  5655	005402'	200400	007010'	NXTSTL::MOVE	T3,[STLBTM(T4)]	;EFFECTIVE ADDRESS OF STOLEN BIT TABLE.
  5656	005403'	205440	777761		MOVSI	T4,-<VPMAX+^D35>/^D36 ;AOBJN POINTER
  5657	005404'	254000	005413'		JRST	NXTWS1		;GO TO IT.
  5658
  5659	005405'	200400	007011'	NXTUWS:	MOVE	T3,[%UPT+UPTUWB(T4)] ;EFFECTIVE ADDRESS OF BITS
  5660	005406'	205440	777761		MOVSI	T4,-<^D512+^D35>/^D36 ;GET AOBJN POINTER TO TABLE
  5661	005407'	254000	005413'		JRST	NXTWS1		;JOIN COMMON CODE
  5662
  5663	005410'	334400	007012'	NXTMWS::SKIPA	T3,[%UPT+UPTMWB(T4)]	;E FOR MWS
  5664	005411'	200400	007013'	NXSMWS::MOVE	T3,[%UPS+UPTMWB(T4)]	;IF UPT IS IN %UPS
  5665	005412'	205440	777761		MOVSI	T4,-<VPMAX+^D35>/^D36 ;GET AOBJN POINTER
  5666
  5667	005413'	322500	005423'	NXTWS1:	JUMPE	W,NXTWS2	;JUMP IF SCANNING FROM PAGE 0
  5668	005414'	200300	000012		MOVE	T1,W		;GET COPY OF STARTING PAGE
  5669	005415'	231300	000044		IDIVI	T1,^D36		;GET WORD AND BIT NUMBER OF THAT PAGE
  5670	005416'	507000	000006		HRLS	T1		;GET WORD NUMBER,,WORD NUMBER
  5671	005417'	270440	000006		ADD	T4,T1		;ADJUST AOBJN POINTER (DO A FEW AOBS)
  5672	005420'	200260	000010		MOVE	U,@T3		;GET THE RIGHT WORD FULL OF BITS
  5673	005421'	242247	000000		LSH	U,(T2)		;REPOSITION TO THE VP CALLED WITH
  5674	005422'	364500	005441'		SOJA	W,NXTWS6	;W MUST BE ONE LESS THAN PAGE WHOSE
  5675								; BIT IS IN BIT 0 OF U. GO SEE
  5676								; IF ANY MORE 1S LEFT AT ALL.
  5677
  5678	005423'	336260	000010	NXTWS2:	SKIPN	U,@T3		;PICKUP A WORD FULL OF BITS
  5679	005424'	254000	005442'		JRST	NXTWS5		;NO ONES IN IT
  5680	005425'	200511	005450'		MOVE	W,PGENUM(T4)	;GET PAGE NUMBER - 1 THIS WORD STARTS WITH
  5681	005426'	243240	005430'	NXTWS3:	JFFO	U,.+2		;FIND A ONE
  5682	005427'	254000	005442'		JRST	NXTWS5		;RAN OUT
  5683	005430'	242246	000001		LSH	U,1(T1)		;GET RID OF THE ONE WE JUST FOUND
  5684	005431'	271506	000001		ADDI	W,1(T1)		;ADJUST W TO REPRESENT BIT JUST FOUND
  5685	005432'	261040	000010	NXTWS4:	PUSH	P,T3		;SAVE BIT WORD EFFECTIVE ADDRESS
  5686	005433'	261040	000011		PUSH	P,T4		;SAVE AOBJN POINTER
  5687	005434'	261040	000005		PUSH	P,U		;SAVE SHIFTED BIT WORD
  5688	005435'	265544	000001		JSP	M,1(F)		;CALL THE CALLER BACK
  5689	005436'	262040	000005		POP	P,U		;RESTORE BIT WORD, ETC.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 118-2
CORE1.MAC	28-OCT-87 17:05		WORKING SET BIT HANDLING

  5690	005437'	262040	000011		POP	P,T4
  5691	005440'	262040	000010		POP	P,T3
  5692	005441'	326240	005426'	NXTWS6:	JUMPN	U,NXTWS3	;IF MORE BITS TO LOOK AT, LOOK.
  5693	005442'	253440	005423'	NXTWS5:	AOBJN	T4,NXTWS2	;STEP TO NEXT WORD
  5694	005443'	254004	000000		JRST	(F)		;NO BITS LEFT, JUST GIVE NON-SKIP RETURN
  5695
  5696				;JSP F, HERE IF THROUGH SCANNING FOR NOW
  5697
  5698	005444'	262040	000005	FINXWS::POP	P,U
  5699	005445'	262040	000011		POP	P,T4		;THESE WERE LEFT ON STACK
  5700	005446'	262040	000010		POP	P,T3		;WHEN NXT?WS CALLED BACK
  5701	005447'	254004	000000		JRST	(F)		;RETURN.
  5702
  5703				;TABLE TRANSLATING BIT TABLE WORD NUMBER TO PAGE NUMBER -1
  5704
  5705		777777	777777		ZZ==-1		;START WITH -1
  5706
  5707	005450'			PGENUM:
  5708				REPEAT <VPMAX+^D35>/^D36,<
  5709					ZZ
  5710					ZZ==ZZ+^D36
  5711				>
  5712	005450'	777777	777777
  5713	005451'	000000	000043
  5714	005452'	000000	000107
  5715	005453'	000000	000153
  5716	005454'	000000	000217
  5717	005455'	000000	000263
  5718	005456'	000000	000327
  5719	005457'	000000	000373
  5720	005460'	000000	000437
  5721	005461'	000000	000503
  5722	005462'	000000	000547
  5723	005463'	000000	000613
  5724	005464'	000000	000657
  5725	005465'	000000	000723
  5726	005466'	000000	000767
  5727
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 119
CORE1.MAC	28-OCT-87 17:05		WORKING SET BIT HANDLING

  5728				;CO-ROUTINE TO SCAN THROUGH THE LMA CHAIN FOR CORE PAGE WHOSE
  5729				; NUMBER IS IN PG. RETURNS WITH P3,P4 SET TO LMAP SLOT CONTENTS
  5730				; OF NEXT LMAP ON CHAIN, J JOB NUMBER, W VIRTUAL PAGE NUMBER.
  5731				; CALLER IS REQUIRED TO CONTINUE CALLING SCNLMC UNTIL THE
  5732				; NON-SKIP RETURN IS GIVEN, SINCE SCNLMC LEAVES THINGS ON THE
  5733				; STACK WHEN IT CALLS THE CALER BACK.
  5734
  5735	005467'	135100	005247*	SCNLMC::LDB	J,PGYLMJ	;GET FIRST JOB NUMBER IN CHAIN
  5736	005470'	322104	000000		JUMPE	J,(F)		;NON-SKIP IF LMA CHAIN EMPTY
  5737	005471'	135500	004355*		LDB	W,PGYLMV	;GET VP NUMBER
  5738	005472'	402000	004622'		SETZM	UPSJOB		;FORCE NEW SETUP OF %UPS
  5739
  5740	005473'	260040	004573'	SCNLM1:	PUSHJ	P,MAPUPS	;MAKE NEXT LMAP ADDRESSABLE
  5741	005474'	260040	004640'		PUSHJ	P,GETLMS	;GET LMAP SLOT DATA IN P3,P4
  5742	005475'	135300	004404*		LDB	T1,LM3LMV	;GET NEXT ON CHAIN NOW IN CASE THIS
  5743	005476'	261040	000006		PUSH	P,T1		;CHANGES
  5744	005477'	135300	004403*		LDB	T1,LM3LMJ	;AND J
  5745	005500'	261040	000006		PUSH	P,T1
  5746	005501'	265544	000001		JSP	M,1(F)		;CALL THE CALLER, GIVE SKIP RETURN
  5747	005502'	260040	004710'		PUSHJ	P,STOLMS	;WHO MUST RETURN HERE (WE HAVE STUFF
  5748								; ON THE STACK) STORE P3,P4
  5749	005503'	262040	000002		POP	P,J		;GET NEXT LMAP SLOT
  5750	005504'	262040	000012		POP	P,W		;DESCRIPTOR IN J AND W
  5751	005505'	326100	005473'		JUMPN	J,SCNLM1	;GO IF THERE IS ONE
  5752	005506'	254004	000000		JRST	(F)		;NO MORE, GIVE NON-SKIP RETURN
  5753
  5754				;HERE IF DON'T WANT TO SCAN LMA CHAIN ANYMORE
  5755
  5756	005507'	260040	004710'	FINLMC::PUSHJ	P,STOLMS	;PUT BACK POSSIBLY MODIFIED LMAP SLOT
  5757	005510'	262040	000006		POP	P,T1		;TAKE JUNK OFF STACK
  5758	005511'	262040	000006		POP	P,T1
  5759	005512'	254004	000000		JRST	(F)		;AND RETURN.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 120
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5760				SUBTTL I/O WAITING FOR PAGES
  5761
  5762				COMMENT ;@@SUBROUTINE REMWAT
  5763				@@PURPOSE WAIT UNTIL ALL I/O IS CLEAR FOR A CORE PAGE.
  5764				CALLED FROM REMOVE. CALLERS THAT ONLY NEED I/O OF
  5765				A CERTAIN TYPE TO FINISH, MAYBE ONLY ONCE (VALIDATE) SHOULD
  5766				CALL PAGWAT THEMSELVES, CHECKING FOR
  5767				THE CORRECT I/O CONDITION THAT THEY NEED TO FINISH.
  5768				@@ENTRY CORE PAGE NUMBER IN PG, JOB NUMBER IN J
  5769				@@ACCUM USES T1.
  5770				@@EXIT ALL I/O FOR CP GUARANTEED TO BE OFF.
  5771				@@RESTRICTIONS CALLER MUST STORE LMAP SLOT CONTENTS BACK
  5772				IN CASE SWAPPER DEACTIVATES THE SLOT.
  5773				@@FUNCTION IF ALL I/O CLEAR FOR PAGE, RETURN. ELSE
  5774				CALL PAGWAT. UPON RETURN FROM WAIT, CHECK I/O AGAIN.
  5775				@@;
  5776
  5777	005513'	135300	000000*	REMWAT::LDB	T1,PGYSIO	;ANY SWAP I/O?
  5778	005514'	326300	005517'		JUMPN	T1,REMWT1	;YES, GO WAIT
  5779	005515'	135300	005246*		LDB	T1,PGYDIO	;OR DIRECT I/O?
  5780	005516'	322300	005054*		JUMPE	T1,CPOPJ	;NO, ALL I/O GONE, RETURN.
  5781	005517'	261040	000002	REMWT1:	PUSH	P,J		;Save target frame
  5782	005520'	200100	002672*		MOVE	J,JOB		;Make sure right job goes into page wait
  5783	005521'	260040	005524'		PUSHJ	P,PAGWAT	;WAIT FOR WHATEVER IS GOING TO FINISH
  5784	005522'	262040	000002		POP	P,J		;Restore target frame
  5785	005523'	254000	005513'		JRST	REMWAT		;AND MAKE SURE NO OTHER I/O IS GOING.
  5786
  5787				COMMENT ;@@SUBROUTINE PAGWAT
  5788				@@PURPOSE WAIT UNTIL ALL I/O IS INACTIVE FOR A CP.
  5789				CALLED FROM DEALMS, REMOVE.
  5790				@@ENTRY CORE PAGE IN PG, JOB IN J
  5791				@@ACCUM USES T1. PRESERVES PG,J.
  5792				@@EXIT RETURNS WHEN I/O THAT WAS IN PROGRESS FOR PAGE
  5793				@@RESTRICTIONS ONLY CALLED FOR CURRENTLY RUNNING JOB AT
  5794				UUO LEVEL.
  5795				AT TIME OF CALL COMPLETES. MAY BE ANOTHER I/O OPERATION IN
  5796				PROGRESS AGAIN, SO CALLER MUST CHECK ALL I/O FLAGS
  5797				AGAIN. WHEN THEY ARE CLEAR, CALLER CAN PROCEED.
  5798				@@RESTRICTIONS CALLER MUST NOT RESCHEDULE
  5799				AFTER FINALLY GETTING THE PAGE WITH NO I/O.
  5800				CALLER MUST STORE LMAP SLOT CONTENTS BACK IN CASE
  5801				SWAPPER DEACTIVATES THE SLOT.
  5802				@@FUNCTION TURN PIS OFF AND MAKE SURE SOME KIND OF I/O IS
  5803				STILL GOING FOR THE PAGE (COULD INTERRUPT AND CALL PAGWAK
  5804				AFTER CALLER CHECKS I/O AND BEFORE WE GET HERE).
  5805				PUT JOB ON PAGE I/O WAIT QUEUE FOR
  5806				CP. CALL WSCHED. JOB WILL WAKE UP WHEN CURRENT (OR
  5807				NEXT, IF NO CURRENT) I/O OPERATION ON THE PAGE COMPLETES.
  5808				@@;
  5809
  5810	005524'	312100	005520*	PAGWAT::CAME	J,JOB		;Current job going onto PGO list?
  5811	005525'	256000	007014'		 STOPCD (.,STOP,PGWNME,,<Page Wait queue error: Not me>)
  5812				  ;;PAGWAT+1
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 120-2
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5813	005526'	700600	000400		WRPI	LI.PIF		;KEEP INTERRUPT LEVEL FROM SNEAKING IN
  5814	005527'	135300	005513*		LDB	T1,PGYSIO	;ANY SWAPPING GOING ON
  5815	005530'	326300	005533'		JUMPN	T1,PAGWT1	;YES, GO PUT JOB ON LIST
  5816	005531'	135300	005515*		LDB	T1,PGYDIO	;NO, ANY DIRECT I/O
  5817					JUMPE	T1,[WRPI LI.PIN ;NO, JUST TURN PI BACK ON AND DISMISS
  5818	005532'	322300	007017'			    POPJ P,]
  5819	005533'	135300	000000*	PAGWT1:	LDB	T1,PGYPGO	;GET OLD FIRST ON QUEUE
  5820	005534'	137100	005533*		DPB	J,PGYPGO	;MAKE THIS THE FIRST
  5821	005535'	542302	002430*		HRRM	T1,JBTPGO(J)	;NEW FIRST POINTS TO OLD FIRST
  5822	005536'	201300	000000*		MOVEI	T1,SWQ		;PUT INTO SWAP WAIT
  5823	005537'	137300	002435*		DPB	T1,PJBSTS	;DO NOT CALL REQUE, CURRENT JOB.
  5824	005540'	700600	000200		WRPI	LI.PIN		;TURN PI BACK ON.
  5825	005541'	324740	003402*		PJRST	WSCHED	;RETURN WHEN THIS OPERATION IS DONE.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 121
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5826				;ROUTINE TO TEST FOR ANY ACTIVE DEVICES
  5827
  5828				;CALL:	MOVE	J,JOB NUMBER OR HIGH SEG NUMBER
  5829				;	PUSHJ	P,ANYACT
  5830				;	DEVICES	ACTIVE
  5831				;	DEVICES	NOT ACTIVE EXCEPT POSSIBLY TTY
  5832
  5833
  5834					INTERN	ANYACT
  5835
  5836	005542'	550442	000000*	ANYACT:	HRRZ T4,JBTIOA(J)
  5837	005543'	322440	005401*		JUMPE T4,CPOPJ1	;ZERO, NO LOCK IN CORE ACTIVITY
  5838	005544'	263040	000000		POPJ P,		;SOME I/O IN PROGRESS
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 122
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5839					INTERN	GET4WD,GIV4WD,GETWDS,GIVWDS,SETZRS
  5840					EXTERN	SAVE4,FREPTR,LOCORE,FCREQ,FCAVAL
  5841
  5842				;SUBROUTINE TO GET "FREE" CORE
  5843				;ENTER GET4WD: T2=# 4 WORD BLOCKS TO GET
  5844				;ENTER GETWDS: T2=# WORDS TO GET
  5845				;RETURN CPOPJ IF NOT AVAILABLE, WITH T2=LARGEST HOLE AVAILABLE
  5846				;RETURN CPOPJ1 IF GOTTEN, WITH T1=LOC OF CORE
  5847	005545'	271340	000003	GETWDS:	ADDI	T2,3		;CONVERT TO 4 WORD BLOCKS
  5848	005546'	240340	777776		ASH	T2,-2
  5849	005547'	265440	002556*	GET4WD:	JSP	T4,SAVE4	;SAVE P1-P4
  5850	005550'	200600	000000*	GET4W1:	MOVE	P1,FREPTR	;SET AOBJN WORD FOR FREE-CORE TABLE
  5851	005551'	400640	000000		SETZ	P2,		;BEST-SO-FAR =0
  5852	005552'	550700	000007		HRRZ	P3,T2		;P3=HOW MUCH WE WANT
  5853	005553'	260040	005726'		PUSHJ	P,GETZ		;GET C(P3) ZERO BITS
  5854	005554'	254000	005600'		  JRST	GETCR1		;NOT AVAILABLE - ERROR RETURN
  5855	005555'	550300	000017		HRRZ	T1,P4		;LOC OF 1ST WORD WITH 0'S
  5856	005556'	550340	005550*		HRRZ	T2,FREPTR	;LOC OF START OF TABLE
  5857	005557'	274300	000007		SUB	T1,T2		;T1=RELATIVE LOC OF 1ST 0
  5858	005560'	221300	000044		IMULI	T1,^D36		;36 BITS PER WORD
  5859	005561'	554340	000017		HLRZ	T2,P4		;LOC OF 1ST 0 IN WORD
  5860	005562'	213000	000007		MOVNS	T2		;-LOC OF 1ST BIT
  5861	005563'	271307	000044		ADDI	T1,^D36(T2)	;COMPUTE STARTING BIT LOCATION
  5862	005564'	242300	000002		LSH	T1,2		;*4=ADDRESS
  5863	005565'	313300	005574'		CAMLE	T1,MAXCOR	;GET ROUGH ESTIMATE OF MAX
  5864	005566'	202300	005574'		MOVEM	T1,MAXCOR	; FREE CORE USED
  5865	005567'	270300	000000*		ADD	T1,LOCORE	;+START OF TABLE=ACTUAL LOC
  5866	005570'	260040	005773'		PUSHJ	P,SETOS		;SET 1'S IN TABLE FOR THIS CORE
  5867	005571'	334340	000016		 SKIPA T2,P3		;SOMEONE SNUCK IN AN TOOK CORE - RESET T2
  5868	005572'	254000	005543*		JRST	CPOPJ1		;GOT THE CORE - GOOD RETURN
  5869	005573'	254000	005550'		JRST GET4W1		;AND TRY AGAIN
  5870
  5871	005574'	000000	000000	MAXCOR:	0			;HIGHEST FREE CORE BLOCK ASSIGNED
  5872
  5873	005575'	000001	000000	MCRHDR:	1,,0			;FOR GETLNK GETTAB
  5874	005576'	005574'	005577'		MAXCOR,,MCRNAM		;VALUE,,NAME
  5875	005577'	554170	435762	MCRNAM:	SIXBIT "MAXCOR"
  5876					.LINK	1,MCRHDR
  5877
  5878				;HERE WHEN COULDN'T1 GET ENOUGH FREE CORE
  5879	005600'			GETCR1:
  5880	005600'	243700	005601'		JFFO	P3,.+1		;Get log(base 2) of request size
  5881	005601'	350017	005607'		AOS	NOCORE(P4)	;Log the log of the failure
  5882	005602'	336340	000015		SKIPN T2,P2		;SET T2 TO LARGEST HOLE FOUND
  5883	005603'	263040	000000		POPJ P,			;IF NOTHING JUST TAKE ERROR RETURN
  5884	005604'	331000	000000*		SKIPL FCREQ		;GOT SOMETHING, WAS THERE A WAITER?
  5885	005605'	476000	000000*		SETOM FCAVAL		;YES, START HIM
  5886	005606'	263040	000000		POPJ P,
  5887
  5888	005607'			NOCORE:	BLOCK	^D37		;Enough for all powers of 2 (plus one)
  5889								; in a word
  5890
  5891	005654'	000001	000000	DMPHDR:	1,,0			;For GETLNK GETTAB
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 122-2
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5892	005655'	005657'	005656'		DMPVAL,,DMPNAM
  5893	005656'	565743	576245	DMPNAM:	SIXBIT	"NOCORE"
  5894	005657'	000000	005607'	DMPVAL:	NOCORE
  5895					.LINK	1,DMPHDR
  5896
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 123
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5897				;SUBROUTINE TO RETURN "FREE" CORE
  5898				;ENTER GIVWDS: T1=# WDS. TO RETURN, T2=START ADR. OF CORE
  5899				;ENTER GIV4WD: T1=# 4 WRD. BLOCKS TO RETURN, T2=START ADR. OF CORE
  5900	005660'	271300	000003	GIVWDS:	ADDI	T1,3		;CONVERT TO # 4WD. BLOCKS
  5901	005661'	240300	777776		ASH	T1,-2
  5902	005662'	274340	005567*	GIV4WD:	SUB	T2,LOCORE	;GET ADR. RELATIVE TO START OF TABLE
  5903	005663'	242340	777776		LSH	T2,-2		;/4 TO CONVERT TO BITS
  5904	005664'	231340	000044		IDIVI	T2,^D36		;COMPUTE WORD LOC, STARTING BIT
  5905	005665'	507000	000007		HRLS	T2		;WORD POSITION IN BOTH HALVES
  5906	005666'	270340	005556*		ADD	T2,FREPTR	;SET AOBJN WORD FOR TABLE
  5907	005667'	331000	005604*		SKIPL FCREQ	;AANY CORE WAITERS?
  5908	005670'	476000	005605*		SETOM FCAVAL	;YES, GET THEM STARTED
  5909								;FALL INTO SETZRS
  5910
  5911				;SUBROUTINE TO SET ZEROS IN A TABLE
  5912				;ARG	T1=HOW MANY BITS TO CLEAR
  5913				;	T2=AOBJN POINTER FOR TABLE
  5914				;	T3=POSITION IN WORD OF FIRST BIT TO CLEAR
  5915				;	(0=BIT 0, 1=BIT 1, ETC.)
  5916
  5917				INTERN	SETZRS
  5918	005671'	307300	000002	SETZRS:	CAIG	T1,2		;MARK SIZE OF CLEAR
  5919	005672'	334440	000006		  SKIPA	T4,T1
  5920	005673'	201440	000003		MOVEI	T4,3
  5921	005674'	350011	005707'		AOS	ZERS-1(T4)
  5922	005675'	205440	400000		MOVSI	T4,400000	;SET A BIT
  5923	005676'	213000	000010		MOVNS	T3
  5924	005677'	242450	000000		LSH	T4,(T3)		;POSITION TO 1ST BIT TO RETURN
  5925	005700'	616447	000000	GIVCR2:	TDNN	T4,(T2)	;BIT REALLY SET?
  5926	005701'	256000	000000'		 STOPCD
  5927	005702'	412447	000000		ANDCAM	T4,(T2)		;YES,CLEAR A BIT
  5928	005703'	363300	005516*		SOJLE	T1,CPOPJ	;THROUGH IF T1=0
  5929	005704'	241440	777777		ROT	T4,-1		;POSITION TO NEXT BIT
  5930	005705'	327440	005700'		JUMPG	T4,GIVCR2	;GO CLEAR IT IF IN SAME WORD
  5931	005706'	253340	005700'		AOBJN	T2,GIVCR2	;STEP TO NEXT WORD
  5932	005707'	256000	000000'		 STOPCD			;PAST TOP OF TABLE - ERROR
  5933
  5934	005710'			ZERS:	BLOCK 3
  5935	005713'			ONES:	BLOCK 3
  5936
  5937	005716'	724562	572100	ZNMTAB:	SIXBIT /ZERO1/
  5938	005717'	724562	572200		SIXBIT /ZERO2/
  5939	005720'	724562	575500		SIXBIT /ZEROM/
  5940	005721'	575645	210000		SIXBIT /ONE1/
  5941	005722'	575645	220000		SIXBIT /ONE2/
  5942	005723'	575645	550000		SIXBIT /ONEM/
  5943
  5944	005724'	000006	000000		6,,0
  5945					.LINK 1,.-1
  5946	005725'	005710'	005716'		ZERS,,ZNMTAB
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 124
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5947					INTERN	GETZ,GETZR,SETOS
  5948			200000	STRTAD==200000
  5949
  5950				;SUBROUTINE TO FIND N CONSECUTIVE 0'S IN A TABLE
  5951				;ENTER WITH P1 = AOBJN WORD TO THE TABLE
  5952				;P2 = PREVIOUS BEST SO FAR
  5953				;RH(P3)= HOW MANY,  BIT STRTAD =1 IF START LOC SPECIFIED
  5954				;EXIT CPOPJ1 IF FOUND, WITH P4 = WHERE THE HOLE IS
  5955				;EXIT CPOPJ IF UNSUCCESSFUL, P2 = LARGEST HOLE FOUND
  5956				;P1-P4 CHANGED
  5957	005726'	603700	200000	GETZ:	TLNE	P3,STRTAD	;START LOC SPECIFIED?  (NOTE THAT ENTRY TO ROUTINE
  5958								; IS AT GETZR IF START LOC SPECIFIED)
  5959	005727'	263040	000000		POPJ	P,		;YES, ERROR RETURN
  5960	005730'	201440	000044		MOVEI	T4,^D36		;NO. SET UP COUNT
  5961	005731'	460314	000000		SETCM	T1,(P1)		;WORD TO INVESTIGATE
  5962	005732'	322300	005762'		JUMPE	T1,GETZ4		;FULL IF 0
  5963	005733'	327300	005754'		JUMPG	T1,GETZ3		;1ST BIT UNAVAILABLE IF POSITIVE
  5964	005734'	450300	000000	GETZ1:	SETCA	T1,		;SET TO REAL CONTENTS
  5965	005735'	243300	005737'		JFFO	T1,.+2		;COUNT THE NUMBER OF 0'S
  5966	005736'	201340	000044		MOVEI	T2,^D36		;36 OF THEM
  5967	005737'	200400	000007	GETZR:	MOVE	T3,T2		;SHIFT COUNT (T3 CAN BE >36 AT GETZ2)
  5968	005740'	202600	000017		MOVEM	P1,P4		;SAVE POSITION IN P4
  5969	005741'	506440	000017		HRLM	T4,P4		;LOC OF HOLE
  5970	005742'	301416	000000	GETZ2:	CAIL	T3,(P3)		;FOUND ENOUGH?
  5971	005743'	254000	005572*		JRST	CPOPJ1		;YES. GOOD RETURN
  5972	005744'	303415	000000		CAILE	T3,(P2)		;NO. BEST SO FAR?
  5973	005745'	541650	000000		HRRI	P2,(T3)		;YES. SAVE IT
  5974	005746'	275447	000000		SUBI	T4,(T2)		;DECREASE POSITION COUNTER
  5975	005747'	323440	005763'		JUMPLE	T4,GETZ5	;0'S ON END
  5976	005750'	603700	200000		TLNE	P3,STRTAD	;THIS HOLE NOT GOOD ENOUGH
  5977	005751'	263040	000000		POPJ	P,		;ERROR RETURN IF START ADDRESS GIVEN
  5978	005752'	450300	000000		SETCA	T1,		;NOW WE WANT TO COUNT 1'S
  5979	005753'	242307	000001		LSH	T1,1(T2)		;REMOVE BITS WE ALREADY LOOKED AT
  5980	005754'	243300	005755'	GETZ3:	JFFO	T1,.+1		;NUMBER OF (REAL) 1'S
  5981	005755'	242307	000000		LSH	T1,(T2)		;GET RID OF THEM
  5982	005756'	306440	000044		CAIN	T4,^D36		;1ST POSITION IN WORD?
  5983	005757'	271440	000001		ADDI	T4,1		;YES, SUBTRACT REAL JFFO COUNT
  5984	005760'	275447	000001		SUBI	T4,1(T2)	;DECREASE POSITION COUNT
  5985	005761'	327440	005734'		JUMPG	T4,GETZ1	;TRY NEXT 0 - HOLE
  5986	005762'	253600	005726'	GETZ4:	AOBJN	P1,GETZ		;1'S ON END - START FRESH AT NEXT WORD
  5987
  5988				;HERE IF THE DESIRED SIZE NOT YET FOUND, BUT THE WORD HAD 0'S ON THE END
  5989	005763'	252600	005703*	GETZ5:	AOBJP	P1,CPOPJ	;THROUGH IF END OF SAT
  5990	005764'	335314	000000		SKIPGE	T1,(P1)		;NEXT WORD POSITIVE?
  5991	005765'	254000	005726'		JRST	GETZ		;NO. THIS HOLE NOT GOOD ENOUGH
  5992	005766'	243300	005770'		JFFO	T1,.+2		;YES. COUNT THE 0'S
  5993	005767'	201340	000044		MOVEI	T2,^D36		;36 0'S
  5994	005770'	271407	000000		ADDI	T3,(T2)		;ADD TO PREVIOUS ZERO-COUNT
  5995	005771'	201440	000044		MOVEI	T4,^D36		;RESET T4
  5996	005772'	254000	005742'		JRST	GETZ2		;AND TEST THIS HOLE
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 125
CORE1.MAC	28-OCT-87 17:05		I/O WAITING FOR PAGES

  5997				;SUBROUTINE TO MARK BITS AS TAKEN IN TABLE
  5998				;USES ACS AS RETURNED FROM GETZ
  5999				;CHANGES P4, RESPECTS T1
  6000	005773'	201416	000000	SETOS:	MOVEI	T3,(P3)		;NUMBER OF CLUSTERS TO MARK
  6001	005774'	303400	000002		CAILE T3,2
  6002	005775'	201400	000003		MOVEI T3,3
  6003	005776'	350010	005712'		AOS ONES-1(T3)
  6004	005777'	201416	000000		MOVEI T3,(P3)	;RECORD SIZE OF FIELD
  6005	006000'	201340	000001		MOVEI	T2,1		;SET A BIT
  6006	006001'	554440	000017		HLRZ	T4,P4		;LOC OF FIRST BIT TO MARK
  6007	006002'	242351	777777		LSH	T2,-1(T4)	;POSITION IT
  6008	006003'	612357	000000	SETO1:	TDNE	T2,(P4)		;BIT ALREADY =1?
  6009	006004'	256000	000000'		 STOPCD			;YES,SOMEONE SNUCK IN,SHOULDNT HAPPEN
  6010	006005'	436357	000000		ORM	T2,(P4)		;MARK A BIT
  6011	006006'	241340	777777		ROT	T2,-1		;STEP TO NEXT BIT
  6012	006007'	337000	000007		SKIPG	T2		;NEXT WORD?
  6013	006010'	350000	000017		AOS	P4		;YES
  6014	006011'	367400	006003'		SOJG	T3,SETO1	;GO MARK NEXT
  6015	006012'	254000	005743*		JRST	CPOPJ1		;AND RETURN
  6016
  6017				COMMENT ! THIS CODE IS NOW OBSOLETE. USED TO COME HERE FROM SETO1+1
  6018				;HERE IF ONE OF THE BITS WE ARE TRYING TO SET IS ALREADY A 1
  6019				;THIS CAN HAPPEN BY INTERRUPTING OUT OF GET4WD, AND TAKING BLOCKS
  6020				;FOR AN EXTENDED PUSH DOWN LIST
  6021				SETO2:	SUBI	T3,(P3)		;T3=-# OF BITS ALREADY SET
  6022				SETO3:	JUMPGE	T3,CPOPJ	;RETURN IF ALL SET BITS CLEARED
  6023					SKIPG	T2		;BIT IN PREVIOUS WORD?
  6024					SOS	P4		;YES
  6025					ROT	T2,1		;STEP TO PREVIOUS BIT
  6026					ANDCAM	T2,(P4)		;CLEAR IT
  6027					AOJA	T3,SETO3	;AND TEST NEXT BIT
  6028				!
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 126
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST CHECKER

  6029				SUBTTL CORE PAGE LIST CHECKER
  6030
  6031				;CALLED FROM VARIOUS PLACES TO MAKE SURE PHYSICAL CORE
  6032				; PAGE LISTS AND COUNTS ARE OK.
  6033
  6034				EXTERNAL MAXPCB,MEMSZP
  6035
  6036	006013'	261040	000006	CHKLST::PUSH	P,T1
  6037	006014'	261040	000007		PUSH	P,T2
  6038	006015'	261040	000010		PUSH	P,T3
  6039	006016'	261040	000011		PUSH	P,T4
  6040	006017'	261040	000003		PUSH	P,PG
  6041	006020'	700640	000006		RDPI	T1		;GET PI STATUS
  6042	006021'	261040	000006		PUSH	P,T1		;SAVE STATE OF LI.PIN/LI.PIF
  6043
  6044	006022'	402000	006203'		SETZM	CHKCNT		;ZERO THE COUNT TABLE
  6045	006023'	200300	007021'		MOVE	T1,[CHKCNT,,CHKCNT+1]
  6046	006024'	251300	006210'		BLT	T1,CHKCNT+SPR.N
  6047	006025'	336140	000000*		SKIPN	PG,MAXPCB	;GET
  6048	006026'	256000	000000'		 STOPCD
  6049	006027'	271140	000001		ADDI	PG,1		;FIRST CORE PAGE IN SYSTEM
  6050	006030'	700600	000400		WRPI	LI.PIF	;TURN OFF PI SYSTEM WHILE CHECKING.
  6051
  6052	006031'	311140	000000*	CHKLP1:	CAML	PG,MEMSZP	;DONE?
  6053	006032'	254000	006042'		JRST	CHKL1A		;YES.
  6054	006033'	135300	005171*		LDB	T1,PGYLST	;GET LIST NUMBER
  6055	006034'	350006	006203'		AOS	CHKCNT(T1)	;COUNT IT
  6056	006035'	201440	000010		MOVEI	T4,PTRPGL-1	;GET HIGHEST TABLE ENTRY
  6057	006036'	256011	006106'		XCT	PTRPGY(T4)	;PICK UP PGY DATA
  6058	006037'	256026	006117'		XCT	@INSTYP(T1)	;CHECK FOR VALIDITY
  6059	006040'	256000	000000'		 STOPCD			;NO GOOD.
  6060	006041'	344140	006031'		AOJA	PG,CHKLP1	;NO, DO NEXT
  6061
  6062	006042'	201300	000001	CHKL1A:	MOVEI	T1,DFR.N	;NOW CHECK COUNTS
  6063	006043'	200340	005120'	CHKLP2:	MOVE	T2,CAVPGN	;GET TOTAL NUMBER OF CFRLST PAGES
  6064	006044'	270340	005121'		ADD	T2,CRSPGN
  6065	006045'	302300	000000		CAIE	T1,CFR.N	;DOING CFRLST?
  6066	006046'	200340	005122'		MOVE	T2,DFRPGN	;NO, DOING DFRLST
  6067	006047'	312346	006203'		CAME	T2,CHKCNT(T1)	;MATCHES WHAT WE COUNTED?
  6068	006050'	256000	000000'		 STOPCD			;NO
  6069	006051'	365300	006043'		SOJGE	T1,CHKLP2	;DO NEXT LIST
  6070
  6071	006052'	201300	000005		MOVEI	T1,SID.N+1	;GET 1 + LAST LIST TO DO
  6072	006053'	254000	006070'		JRST	CHKLP4
  6073
  6074	006054'	135340	006033*	CHKLP3:	LDB	T2,PGYLST	;GET LIST
  6075	006055'	312340	000006		CAME	T2,T1		;ON THE LIST IT CAME FROM?
  6076	006056'	256000	000000'		 STOPCD			;NO
  6077	006057'	135340	005206*		LDB	T2,PGYBPL	;GET LAST PAGE
  6078	006060'	312340	000010		CAME	T2,T3		;BACK LINK ANY GOOD?
  6079	006061'	256000	000000'		 STOPCD			;NO
  6080	006062'	200400	000003		MOVE	T3,PG		;NEW PREVIOUS FOR NEXT TIME.
  6081	006063'	135140	005200*		LDB	PG,PGYFPL	;GET NEXT PAGE ON THIS LIST
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 126-2
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST CHECKER

  6082	006064'	326140	006054'		JUMPN	PG,CHKLP3	;JUMP IF MORE ON THIS LIST
  6083
  6084	006065'	554146	005112'		HLRZ	PG,LSTLST(T1)	;GET WHAT HEADER SAYS IS LAST PAGE
  6085	006066'	312140	000010		CAME	PG,T3		;IS IT REALLY?
  6086	006067'	256000	000000'		 STOPCD			;NO, CONFUSION ABOUT LAST MEMBER
  6087	006070'	361300	006075'	CHKLP4:	SOJL	T1,CHKLP5	;GO IF DONE
  6088	006071'	550146	005112'		HRRZ	PG,LSTLST(T1)	;GET FIRST IN NEXT LIST
  6089	006072'	400400	000000		SETZ	T3,		;FIRST PREVIOUS IS ZERO
  6090	006073'	326140	006054'		JUMPN	PG,CHKLP3	;AND GO CHECK THE LIST IF ANYTING IN IT
  6091	006074'	254000	006070'		JRST	CHKLP4		;NOTHING THERE, DO NEXT LIST
  6092
  6093	006075'	262040	000006	CHKLP5:	POP	P,T1		;GET PI STATUS
  6094	006076'	602300	000200		TRNE	T1,LI.PIN		;WAS SYSTEM ON?
  6095	006077'	700600	000200		WRPI	LI.PIN		;YES, TURN IT BACK ON.
  6096	006100'	262040	000003		POP	P,PG
  6097	006101'	262040	000011		POP	P,T4
  6098	006102'	262040	000010		POP	P,T3
  6099	006103'	262040	000007		POP	P,T2
  6100	006104'	262040	000006		POP	P,T1
  6101	006105'	263040	000000		POPJ	P,
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 127
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST CHECKER

  6102				;TABLES FOR CHKLST
  6103
  6104				;TABLE OF LDB INSTRUCTIONS TO GET VARIOUS DATA THINGS OUT OF
  6105				; PGY TABLES
  6106
  6107	006106'	135300	004175*	PTRPGY:	LDB	T1,PGYSIP
  6108	006107'	135300	002315*		LDB	T1,PGYSOP
  6109	006110'	135300	005531*		LDB	T1,PGYDIO
  6110	006111'	135300	005245*		LDB	T1,PGYSPT
  6111	006112'	135300	005244*		LDB	T1,PGYATB
  6112	006113'	135300	005467*		LDB	T1,PGYLMJ
  6113	006114'	135300	005534*		LDB	T1,PGYPGO
  6114	006115'	135300	005235*		LDB	T1,PGYUSE
  6115	006116'	135300	004542*		LDB	T1,PGYDRT
  6116
  6117			000011	PTRPGL==.-PTRPGY		;LENGTH
  6118
  6119				;PARALLEL TABLES FOR EACH CORE PAGE TYPE TO CHECK ABOVE DATA.
  6120
  6121				;TABLE OF THE TABLES, INDEXED BY CORE PAGE LIST NUMBER
  6122
  6123	006117'	000011	006126'	INSTYP:	CFRPGY(T4)
  6124	006120'	000011	006137'		DFRPGY(T4)
  6125	006121'	000011	006150'		USEPGY(T4)
  6126	006122'	000011	006172'		SOPPGY(T4)
  6127	006123'	000011	006161'		SIPPGY(T4)
  6128	006124'	000000	007022'		[JFCL]		;CHKLP1+6/ XCT @INSTYP(T1)	;CHECK FOR VALIDITY
  6129	006125'	000000	007022'		[JFCL]		;CHKLP1+7/  STOPCD		;NO GOOD.
  6130
  6131	006126'	332000	000006	CFRPGY:	SKIPE	T1
  6132	006127'	332000	000006		SKIPE	T1
  6133	006130'	332000	000006		SKIPE	T1
  6134	006131'	332000	000006		SKIPE	T1
  6135	006132'	332000	000006		SKIPE	T1
  6136	006133'	332000	000006		SKIPE	T1
  6137	006134'	332000	000006		SKIPE	T1
  6138	006135'	332000	000006		SKIPE	T1
  6139	006136'	332000	000006		SKIPE	T1
  6140
  6141	006137'	332000	000006	DFRPGY:	SKIPE	T1
  6142	006140'	332000	000006		SKIPE	T1
  6143	006141'	332000	000006		SKIPE	T1
  6144	006142'	332000	000006		SKIPE	T1
  6145	006143'	332000	000006		SKIPE	T1
  6146	006144'	332000	000006		SKIPE	T1
  6147	006145'	255000	000000		JFCL		;PGY COULD BE SET
  6148	006146'	332000	000006		SKIPE	T1
  6149	006147'	336000	000006		SKIPN	T1
  6150
  6151	006150'	255000	000000	USEPGY:	JFCL
  6152	006151'	255000	000000		JFCL
  6153	006152'	255000	000000		JFCL
  6154	006153'	255000	000000		JFCL
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 127-2
CORE1.MAC	28-OCT-87 17:05		CORE PAGE LIST CHECKER

  6155	006154'	255000	000000		JFCL
  6156	006155'	255000	000000		JFCL
  6157	006156'	255000	000000		JFCL
  6158	006157'	336000	000006		SKIPN	T1		;USE COUNT MUST BE NON-ZERO.
  6159	006160'	255000	000000		JFCL
  6160
  6161	006161'	336000	000006	SIPPGY:	SKIPN	T1
  6162	006162'	332000	000006		SKIPE	T1
  6163	006163'	332000	000006		SKIPE	T1
  6164	006164'	332000	000006		SKIPE	T1
  6165	006165'	332000	000006		SKIPE	T1
  6166	006166'	332000	000006		SKIPE	T1
  6167	006167'	332000	000006		SKIPE	T1
  6168	006170'	332000	000006		SKIPE	T1
  6169	006171'	332000	000006		SKIPE	T1
  6170
  6171	006172'	332000	000006	SOPPGY:	SKIPE	T1
  6172	006173'	336000	000006		SKIPN	T1
  6173	006174'	332000	000006		SKIPE	T1
  6174	006175'	332000	000006		SKIPE	T1
  6175	006176'	332000	000006		SKIPE	T1
  6176	006177'	332000	000006		SKIPE	T1
  6177	006200'	332000	000006		SKIPE	T1
  6178	006201'	332000	000006		SKIPE	T1
  6179	006202'	332000	000006		SKIPE	T1
  6180
  6181
  6182	006203'			CHKCNT:	BLOCK	SPR.N+1
  6183				SUBTTL PAGE AGEING
  6184
  6185				COMMENT @
  6186
  6187				THERE IS AN AGE CELL FOR EACH OF A JOB'S PAGE SLOTS (ONE FOR EACH
  6188				VIRTUAL PAGE NUMBER). THE CELLS ARE STORED IN THE TABLE UPTAGE
  6189				IN THE JOB'S UPT. THE AGE CELLS RECORD THE TIME SINCE THE LAST
  6190				REFERENCE TO THE CORRESPONDING VIRTUAL PAGES.
  6191
  6192				WHEN A JOB IS CREATED, ALL ITS PAGE SLOTS ARE GIVEN AN AGE OF 0.
  6193
  6194				EVERY TIME AN ACCESS-BIT FAULT OCCURS FOR A PAGE, ITS AGE IS
  6195				SET TO 0.
  6196
  6197				EVERY C(AGENTV) TICKS A JOB RUNS, AGEPAG IS CALLED TO INCREMENT
  6198				THE AGE CELLS. IT ADDS ONE TO THE AGE OF EVERY PAGE, AND
  6199				CLEARS THE PAGE'S ACCESS BIT IF ITS AGE WENT FROM 0 TO 1.
  6200
  6201				A PAGE WHICH HASN'T BEEN ACCESSED IN C(AGEMAT) AGEPAG CALLS
  6202				IS TERMED A "MATURE" PAGE. A PAGE WHICH HASN'T BEEN ACCESSED
  6203				IN C(AGEELD) AGEPAG CALLS IS TERMED AN "ELDERLY" PAGE. ALL
  6204				ELDERLY PAGES ARE ALSO MATURE PAGES.
  6205
  6206				IN A JOB SUBJECT TO MWS ADJUSTMENT (JBTSTS JWSADJ BIT SET),
  6207				MWSRPL WILL REMOVE ALL THE ELDERLY PAGES AND THE OLDEST
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 127-3
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6208				MATURE PAGE EACH TIME IT IS CALLED.
  6209
  6210				IN A JOB SUBJECT TO MWS ADJUSTMENT, AGEPAG WILL CALL MWSREP
  6211				AT THE END OF ITS COMPUTATIONS IF IT FOUND MORE THAN C(ADJNAP)
  6212				ELDERLY PAGES, AND MWSREP WILL REMOVER THEM ALL FROM THE MWS.
  6213
  6214				THUS (WITH MWS ADJUSTMENT IN EFFECT), A "YOUNG" (RECENTLY-
  6215				ACCESSED) PAGE WILL NEVER BE REMOVED FROM THE MWS, A "MATURE"
  6216				BUT NOT "ELDERLY" PAGE WILL BE REMOVED ONLY TO MAKE ROOM FOR
  6217				A PAGE THE JOB HAS FAULTED FOR, AND AN "ELDERLY" PAGE WILL
  6218				BE REMOVED AT THE EARLIEST CONVENIENT TIME.
  6219
  6220				THIS PAGE REPLACEMENT STRATEGY IS DESCRIBED BY ALAN JAY SMITH
  6221				IN "A MODIFIED WORKING SET PAGING ALGORITHM", IEEETC V. C-25,
  6222				NO. 9 (SEPTEMBER 1976), AND WAS USED, MORE OR LESS, IN A
  6223				TIME-SHARING SYSTEM FOR THE SPECTRA 70, DESCRIBED BY MARC
  6224				FOGEL IN "THE VMOS PAGING ALGORITHM", SIGOPS V. 8, NO. 1
  6225				(JANUARY 1974).
  6226
  6227				@
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 128
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6228				;VARIOUS CELLS FOR PAGE AGEING AND PAGE REPLACEMENT CODE
  6229
  6230	006211'	000000	000000	AGECAL:	0		;NUMBER OF CALLS TO AGEPAG
  6231	006212'	000000	000000	AGEADJ:	0		;NUMBER OF CALLS FROM AGEPAG TO MWSREP
  6232
  6233	006213'	000000	000170	AGENTV::^D120		;PAGE AGE UNIT IN TICKS WHILE RUNNING
  6234	006214'	000000	000006	AGEMAT:	^D6		;"MATURE" PAGE MINIMUM AGE
  6235	006215'	000000	000006	AGEELD:	^D6		;"ELDERLY" PAGE MINIMUM AGE
  6236
  6237	006216'	000000	000012	ADJNAP:	^D10		;IF AGEPAG FINDS MORE THAN THIS MANY
  6238							;ELDERLY PAGES IN MWS, IT CALLS MWSREP
  6239
  6240	006217'	000000	000000	ADJMWS::0		;SET TO -1, TURNING ON MWS ADJUSTMENT,
  6241							;BY DSKCLN'S CALL TO DSKCLR. ON EVERY
  6242							;RESET UUO, THE JOB'S JWSADJ BIT IS
  6243							;SET ACCORDING TO ADJMWS.
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 129
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6244				COMMENT #
  6245				@@SUBROUTINE AGEPAG
  6246				@@PURPOSE ADJUST THE AGE FIELDS OF THE CURRENT JOB'S PAGES, AND
  6247				(IF MWS ADJUST IN EFFECT) THROW OUT THE OLD ONES:
  6248
  6249					FOR F FROM 0 TO 777
  6250						IF P.AGE < AGEMAX
  6251							P.AGE :+ 1
  6252						IF P EXISTS
  6253							AGEHST [P.AGE] :+ 1
  6254							IF P.AGE = 1
  6255								P.ACCESS := 0
  6256							IF P.AGE = AGEELD AND P IN MWS
  6257								UPT.ELD :+ 1
  6258							IF P.AGE = AGEMAT AND P IN MWS
  6259								UPT.MAT :+ 1
  6260					IF ADJMWS AND UPT.ADJ AND UPT.ELD > ADJNAP
  6261						CALL MWSRPL
  6262
  6263				@@ENTRY CALLED ONLY AT UUO LEVEL (FROM RESCHEDULING CODE WHEN
  6264				%UPT+UPTNTV GETS DECREMENTED TO 0)
  6265				@@ACCUM DESTROYS T1-T4
  6266				@@EXIT NONSKIP-RETURNS
  6267				@@ #
  6268
  6269	006220'	322100	005763*	AGEPAG::JUMPE	J, CPOPJ
  6270	006221'	261040	000014		PUSH	P, P1
  6271	006222'	261040	000015		PUSH	P, P2
  6272	006223'	261040	000016		PUSH	P, P3
  6273	006224'	261040	000017		PUSH	P, P4
  6274	006225'	261040	000012		PUSH	P, W		;SAVE P1-P4 AND W
  6275
  6276	006226'	350000	006211'		AOS	AGECAL		;COUNT NUMBER OF CALLS
  6277	006227'	515500	777001		HRLZI	W, -777		;W/ PAGE # AOBJN POINTER
  6278	006230'	201440	005350*		MOVEI	T4, AGECPW	;T4/ # AGE CELLS PER WORD
  6279	006231'	201600	000000*		MOVEI	P1, %UPT+UPTAGE	;P1/ ADDR OF 1ST AGE CELL WORD
  6280	006232'	200354	000000		MOVE	T2, 0(P1)	;T2/ OLD AGE CELL WORD	
  6281
  6282	006233'	242400	000000*	AGEPG1:	LSH	T3, AGESIZ	;MAKE ROOM FOR NEW AGE CELL
  6283	006234'	400300	000000		SETZ	T1,
  6284	006235'	246300	006233*		LSHC	T1, AGESIZ	;T1/ OLD AGE CELL (FROM T2)
  6285	006236'	305300	000000*		CAIGE	T1, AGEMAX	;IF P.AGE < AGEMAX,
  6286	006237'	350000	000006		AOS	T1		;  P.AGE :+ 1
  6287	006240'	436300	000010		IORM	T1, T3		;DEPOSIT THE NEW AGE CELL
  6288	006241'	200712	003317*		MOVE	P3, %UPLMA(W)
  6289	006242'	607700	004772*		TLNN	P3, LMMEXS	;IF PAGE DOESN'T EXIST,
  6290	006243'	254000	006272'		JRST	AGEPG4		;  GO ON TO THE NEXT ONE
  6291	006244'	350006	000000*		AOS	AGEHST(T1)	;UPDATE HISTOGRAM
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6292	006245'	302300	000001		CAIE	T1, 1		;IF AGE = 1,
  6293	006246'	254000	006255'		JRST	AGEPG2
  6294	006247'	260040	004623'		PUSHJ	P, GETLMA	;  P3,P4/ LMAP SLOT
  6295	006250'	607700	006242*		TLNN	P3, LMMEXS	;  IF IT DOESN'T EXIST
  6296	006251'	256000	000000'		 STOPCD 		;    WE SHOULDN'T BE HERE
  6297	006252'	620740	400000		TRZ	P4, PGE.A	;  CLEAR ACCESS BIT
  6298	006253'	260040	004672'		PUSHJ	P, STOLMA	;  PUT THE SLOT BACK
  6299	006254'	201300	000001		MOVEI	T1, 1
  6300	006255'	316300	006214'	AGEPG2:	CAMN	T1, AGEMAT	;IF PAGE JUST BECAME MATURE
  6301	006256'	254000	006261'		JRST	AGEPG3
  6302	006257'	312300	006215'		CAME	T1, AGEELD	;OR ELDERLY,
  6303	006260'	254000	006272'		JRST	AGEPG4
  6304	006261'	550700	000012	AGEPG3:	HRRZ	P3, W
  6305	006262'	231700	000044		IDIVI	P3, ^D36
  6306	006263'	200716	000000*		MOVE	P3, %UPT+UPTMWB(P3)
  6307	006264'	616717	005376*		TDNN	P3, BITTBL(P4)	;AND IT'S IN THE MWS,
  6308	006265'	254000	006272'		JRST	AGEPG4
  6309	006266'	316300	006215'		CAMN	T1, AGEELD
  6310	006267'	350000	000000*		AOS	%UPT+UPTELD
  6311	006270'	316300	006214'		CAMN	T1, AGEMAT
  6312	006271'	350000	000000*		AOS	%UPT+UPTMAT	;  BUMP THE APPROPRIATE COUNT(S)
  6313
  6314	006272'	367440	006277'	AGEPG4:	SOJG	T4, AGEPG5	;IF AGE CELL WORD EXHAUSTED,
  6315	006273'	202414	000000		MOVEM	T3, 0(P1)	;  STORE THE NEW WORD
  6316	006274'	350000	000014		AOS	P1		;  ADVANCE THE POINTER
  6317	006275'	200354	000000		MOVE	T2, 0(P1)	;  GET THE NEXT AGE CELL WORD
  6318	006276'	201440	006230*		MOVEI	T4, AGECPW	;  RESET COUNTER
  6319	006277'	253500	006233'	AGEPG5:	AOBJN	W, AGEPG1	;LOOP UNTIL NO MORE PAGES
  6320
  6321	006300'	200302	003752*		MOVE	T1, JBTSTS(J)
  6322	006301'	606300	400000		TRNN	T1, JWSADJ	;IF MWS ADJUST IS IN EFFECT
  6323	006302'	254000	006312'		JRST	AGEPG6
  6324	006303'	200300	000000*		MOVE	T1, %UPT+UPTELD
  6325	006304'	317300	006216'		CAMG	T1, ADJNAP	;AND THERE'RE TOO MANY OLD PAGES,
  6326	006305'	254000	006312'		JRST	AGEPG6
  6327	006306'	350000	006212'		AOS	AGEADJ		;COUNT NUMBER OF MWS ADJUSTMENTS
  6328	006307'	201600	000002		MOVEI	P1, .MRADJ
  6329	006310'	260040	003764'		PUSHJ	P, MWSREP	;  CALL MWSREP TO THROW THEM OUT
  6330	006311'	255000	000000		  JFCL
  6331
  6332	006312'	200300	006213'	AGEPG6:	MOVE	T1, AGENTV
  6333	006313'	202300	000000*		MOVEM	T1, %UPT+UPTNTV	;RESTORE RECOMPUTATION INTERVAL
  6334	006314'	262040	000012		POP	P, W
  6335	006315'	262040	000017		POP	P, P4
  6336	006316'	262040	000016		POP	P, P3
  6337	006317'	262040	000015		POP	P, P2
  6338	006320'	262040	000014		POP	P, P1
  6339	006321'	263040	000000		POPJ	P,		;RESTORE P1-P4 AND W, AND RETURN
  6340
  6341	006322'	202300	000000*		$END	(COR)

  6342	006323'	260040	000000*

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-2
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6343	006324'	254000	000073'

  6344	006325'	542300	000000*

  6345	006326'	202313	000000

  6346	006327'	271300	000001

  6347	006330'	350001	000000

  6348	006331'	324740	000135*

  6349	006332'	004000	000147'

  6350	006333'	262040	000006

  6351	006334'	263040	000000

  6352	006335'	360600	000006

  6353	006336'	207000	000006

  6354	006337'	541300	000007

  6355	006340'	137700	006335'

  6356	006341'	263040	000000

  6357	006342'	200340	004550*

  6358	006343'	254000	000246'

  6359	006344'	260040	000000*

  6360	006345'	624555	666047

  6361	006346'	000001	000000

  6362	006347'	370000	000000*

  6363	006350'	254000	000412'

  6364	006351'	000003	000003

  6365	006352'	274040	006351'

  6366	006353'	254000	000652'

  6367	006354'	260040	006344*

  6368	006355'	424143	624660

  6369	006356'	000010	000000
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-3
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6370	006357'	260040	006354*

  6371	006360'	424143	626660

  6372	006361'	000010	000000

  6373	006362'	135300	006115*

  6374	006363'	326300	000645'

  6375	006364'	254000	000643'

  6376	006365'	200340	000014

  6377	006366'	324740	000000*

  6378	006367'	000000*	000000

  6379	006370'	376000	375000

  6380	006371'	260040	000000*

  6381	006372'	424144	604147

  6382	006373'	400006	000000

  6383	006374'	000000	001042'

  6384	006375'	207000	000006

  6385	006376'	541300	000006

  6386	006377'	137700	006335'

  6387	006400'	263040	000000

  6388	006401'	221200	000014

  6389	006402'	202513	000000

  6390	006403'	200613	000000

  6391	006404'	251314	000000

  6392	006405'	200313	000000

  6393	006406'	221200	000006

  6394	006407'	260040	001515'

  6395	006410'	254000	001560'

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-4
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6396	006411'	260040	001515'

  6397	006412'	254000	001552'

  6398	006413'	260040	001515'

  6399	006414'	254000	001555'

  6400	006415'	260040	004771'

  6401	006416'	335006	000565*

  6402	006417'	344240	001453'

  6403	006420'	254000	001453'

  6404	006421'	262040	000013

  6405	006422'	256200	006326'

  6406	006423'	263040	000000

  6407	006424'	360200	000014

  6408	006425'	420200	000006

  6409	006426'	202613	000000

  6410	006427'	550514	777777

  6411	006430'	403000	000015

  6412	006431'	403700	000017

  6413	006432'	254000	001717'

  6414	006433'	202014	000000

  6415	006434'	202254	000000

  6416	006435'	202654	000000

  6417	006436'	202714	000000

  6418	006437'	402014	000000

  6419	006440'	202754	000000

  6420	006441'	134300	000005

  6421	006442'	137300	000005

  6422	006443'	616253	000000
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-5
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6423	006444'	204300	000015

  6424	006445'	541300	000007

  6425	006446'	137700	006335'

  6426	006447'	263040	000000

  6427	006450'	260040	002412'

  6428	006451'	254000	000141*

  6429	006452'	260040	004655'

  6430	006453'	254000	002125'

  6431	006454'	260040	004726'

  6432	006455'	254000	002147'

  6433	006456'	000000	000000*

  6434	006457'	202346	000000

  6435	006460'	260040	002223'

  6436	006461'	436712	006241*

  6437	006462'	621200	400000

  6438	006463'	254000	002240'

  6439	006464'	202353	000000

  6440	006465'	552313	000000

  6441	006466'	200606	000000

  6442	006467'	200646	000001

  6443	006470'	203015	000000

  6444	006471'	200307	000000

  6445	006472'	251615	000000

  6446	006473'	200140	000003

  6447	006474'	250507	006300*

  6448	006475'	000000	005337*

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-6
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6449	006476'	260040	006357*

  6450	006477'	655453	565545

  6451	006500'	000001	000000

  6452	006501'	202310	002432*

  6453	006502'	263040	000000

  6454	006503'	000000	000000*

  6455	006504'	000000	000000*

  6456	006505'	620300	100000

  6457	006506'	660300	100000

  6458	006507'	000000*	000440*

  6459	006510'	000000*	000440*

  6460	006511'	000000*	000000*

  6461	006512'	000000*	000440*

  6462	006513'	000000*	000440*

  6463	006514'	000000*	000440*

  6464	006515'	000000*	000440*

  6465	006516'	004000	002663'

  6466	006517'	701112	000000

  6467	006520'	111100	000006

  6468	006521'	260040	006476*

  6469	006522'	604654	524220

  6470	006523'	000004	000000

  6471	006524'	260040	006521*

  6472	006525'	604654	544443

  6473	006526'	000001	000000

  6474	006527'	260040	002360'

  6475	006530'	256000	000000'
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-7
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6476	006531'	260055	000000

  6477	006532'	334000	000000

  6478	006533'	350001	000000

  6479	006534'	261040	000006

  6480	006535'	260040	002412'

  6481	006536'	262040	000006

  6482	006537'	263040	000000

  6483	006540'	260040	001552'

  6484	006541'	254000	003367'

  6485	006542'	603700	005034*

  6486	006543'	254000	003012'

  6487	006544'	260040	004771'

  6488	006545'	335006	006416*

  6489	006546'	254000	003012'

  6490	006547'	254000	003007'

  6491	006550'	260040	001561'

  6492	006551'	254000	003367'

  6493	006552'	260040	004672'

  6494	006553'	254000	006550'

  6495	006554'	004000	003046'

  6496	006555'	000020	000021

  6497	006556'	402006	777777

  6498	006557'	251307	000000

  6499	006560'	322600	003144'

  6500	006561'	254000	003105'

  6501	006562'	202600	000000*

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-8
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6502	006563'	254000	003144'

  6503	006564'	260040	001554'

  6504	006565'	254000	003367'

  6505	006566'	000000	003152'

  6506	006567'	000000	003153'

  6507	006570'	000000	003170'

  6508	006571'	000000	003160'

  6509	006572'	260040	006524*

  6510	006573'	604654	606220

  6511	006574'	000001	000000

  6512	006575'	260040	001553'

  6513	006576'	254000	003367'

  6514	006577'	000000	000000*

  6515	006600'	004000	003230'

  6516	006601'	000020	000020

  6517	006602'	251307	000777

  6518	006603'	000000	000000*

  6519	006604'	260040	001556'

  6520	006605'	254000	003367'

  6521	006606'	000000	000000*

  6522	006607'	000000	000000*

  6523	006610'	000000	000000*

  6524	006611'	260040	001555'

  6525	006612'	254000	003367'

  6526	006613'	140500	000004

  6527	006614'	260040	001560'

  6528	006615'	254000	003367'
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-9
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6529	006616'	260040	001557'

  6530	006617'	254000	003367'

  6531	006620'	260040	001551'

  6532	006621'	254000	003367'

  6533	006622'	000000	001014*

  6534	006623'	000000	000742*

  6535	006624'	000000	000000*

  6536	006625'	260040	006572*

  6537	006626'	604342	465421

  6538	006627'	000002	000000

  6539	006630'	660300	003513*

  6540	006631'	137300	003514*

  6541	006632'	261040	000003

  6542	006633'	554147	003501*

  6543	006634'	400400	000000

  6544	006635'	137400	004537*

  6545	006636'	262040	000003

  6546	006637'	700600	003515*

  6547	006640'	254000	003516'

  6548	006641'	474300	000000

  6549	006642'	254000	006012*

  6550	006643'	400500	000000

  6551	006644'	254000	003551'

  6552	006645'	260040	003375'

  6553	006646'	254000	003644'

  6554	006647'	000000	000001

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-10
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6555	006650'	000000	000000

  6556	006651'	000000	006650'

  6557	006652'	000000	006214'

  6558	006653'	000000	006215'

  6559	006654'	260040	006625*

  6560	006655'	544146	656063

  6561	006656'	000001	000000

  6562	006657'	260040	006654*

  6563	006660'	544146	605762

  6564	006661'	000001	000000

  6565	006662'	350000	000000*

  6566	006663'	263040	000000

  6567	006664'	260040	006657*

  6568	006665'	544446	605762

  6569	006666'	000001	000000

  6570	006667'	137300	006116*

  6571	006670'	474300	000000

  6572	006671'	137300	004765*

  6573	006672'	254000	004427'

  6574	006673'	260040	006664*

  6575	006674'	435064	465463

  6576	006675'	000001	000000

  6577	006676'	550160	004475'

  6578	006677'	254000	004463'

  6579	006700'	260040	006673*

  6580	006701'	435064	465652

  6581	006702'	000001	000000
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-11
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6582	006703'	260040	006700*

  6583	006704'	435064	465165

  6584	006705'	000001	000000

  6585	006706'	260040	006703*

  6586	006707'	435064	465646

  6587	006710'	000001	000000

  6588	006711'	260040	006706*

  6589	006712'	435064	465565

  6590	006713'	000001	000000

  6591	006714'	542320	004475'

  6592	006715'	254000	004534'

  6593	006716'	260040	006711*

  6594	006717'	435064	464460

  6595	006720'	000001	000000

  6596	006721'	542160	004475'

  6597	006722'	254000	004570'

  6598	006723'	260040	006716*

  6599	006724'	546246	606264

  6600	006725'	000001	000000

  6601	006726'	260040	006723*

  6602	006727'	546246	606263

  6603	006730'	000001	000000

  6604	006731'	260040	006726*

  6605	006732'	546246	606270

  6606	006733'	000001	000000

  6607	006734'	260040	006731*

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-12
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6608	006735'	546346	654664

  6609	006736'	000001	000000

  6610	006737'	260040	006734*

  6611	006740'	546346	606264

  6612	006741'	000001	000000

  6613	006742'	260040	006737*

  6614	006743'	546346	654663

  6615	006744'	000001	000000

  6616	006745'	260040	006742*

  6617	006746'	546346	606263

  6618	006747'	000001	000000

  6619	006750'	260040	006745*

  6620	006751'	546346	654670

  6621	006752'	000001	000000

  6622	006753'	260040	006750*

  6623	006754'	546346	606270

  6624	006755'	000001	000000

  6625	006756'	260040	006753*

  6626	006757'	474564	466221

  6627	006760'	000001	000000

  6628	006761'	260040	006756*

  6629	006762'	604765	634557

  6630	006763'	000001	000000

  6631	006764'	260040	006761*

  6632	006765'	604765	634565

  6633	006766'	000001	000000

  6634	006767'	260040	006764*
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-13
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING


  6635	006770'	604765	634541

  6636	006771'	000001	000000

  6637	006772'	254000	005261'

  6638	006773'	254000	005264'

  6639	006774'	350000	005232*

  6640	006775'	263040	000000

  6641	006776'	436346	000000*

  6642	006777'	436346	000000*

  6643	007000'	436346	000000*

  6644	007001'	000000	004741*

  6645	007002'	412346	000000*

  6646	007003'	412346	000000*

  6647	007004'	616346	000000*

  6648	007005'	616346	000000*

  6649	007006'	616346	000000*

  6650	007007'	616346	000000*

  6651	007010'	000011	007000*

  6652	007011'	000011	000000*

  6653	007012'	000011	000000*

  6654	007013'	000011	000000*

  6655	007014'	260040	006767*

  6656	007015'	604767	565545

  6657	007016'	000001	000000

  6658	007017'	700600	000200

  6659	007020'	263040	000000

  6660	007021'	006203'	006204'

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 130-14
CORE1.MAC	28-OCT-87 17:05		PAGE AGEING

  6661	007022'	255000	000000

  6662						;End of CORE1  (CORLIT: COREND:)
  6663
NO ERRORS DETECTED
PROGRAM BREAK IS 007045
11K CORE USED
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

ABTCP1		002472'		BATCHK		001072'		CINMW1		003666'		CTXCEX		200000	SIN
ABTCPL		002465'	INT	BATCNT		000000	EXT	CINMW2		003675'		CTXSWE		020000	SIN
ACTLAS		004177'		BATCOD		000000	EXT	CINMW3		003701'		CTXTAB		000000	EXT
ACTLM0		004203'		BATELB		000000	EXT	CINMW4		003703'		CTXVIR		100000	SIN
ACTLM1		004215'		BATFIR		000000	EXT	CINMW5		003704'		CURUPT		000000	EXT
ACTLM2		004217'		BATNAM		000000	EXT	CINMW6		003710'		CWQ		002400'	EXT
ACTLM3		004220'		BATNBB		000000	EXT	CINMW7		003723'		DABBIT		000224'	EXT
ACTLM4		004226'		BATPAT		000000	EXT	CINMWS		003663'		DEALM0		004325'	
ACTLM5		004261'		BATSLF		000000	EXT	CLKCHL		000000	EXT	DEALM1		004336'	
ACTLMA		004130'	INT	BATUP2		001010'		CLPTW		002655'	INT	DEALM2		004357'	
ACTLMS		004122'	INT	BATUPD		001014'		CLPTW1		002663'		DEALM3		004367'	
ACTNC1		004146'		BITTBL		006264'	EXT	CLRLOP		000005'		DEALM5		004414'	
ACTNCF		004161'		BLTPAG		002253'	INT	CLRMW1		005347'		DEALM6		004414'	
ADJMWS		006217'	INT	BLTPG0		002260'		CLRMW2		005356'		DEALM7		004434'	
ADJNAP		006216'		BLTULP		002323'		CLRMWS		005337'	INT	DEALMA		004322'	INT
ADRDUM		006342'	EXT	BLTUU1		002277'		CLRONC		000003'	INT	DEALMS		004305'	INT
ADRNCT		004766'	EXT	BLTUU2		002313'		CLRPT	701100	000000		DECRMV		000566'	EXT
AGEADJ		006212'		BLTUU3		002321'		CLRUWS		005327'	INT	DECUPM		000653'	EXT
AGECAL		006211'		BUCBB%		000000	SIN	CLXMWS		005336'	INT	DECUS0		005243'	
AGECPW		006276'	EXT	BUCLP%		000002	SIN	CLXUWS		005326'	INT	DECUS1		005261'	
AGEELD		006215'		BUECBB		001551'	SIN	CNVATP		005016'	EXT	DECUS2		005264'	
AGEHST		006244'	EXT	BUECLP		001553'	SIN	CNVVPN		000440	SIN	DECUSE		005235'	INT
AGEMAT		006214'		BUENWP		001552'	SIN	CODBAT		001077'	EXT	DFR.N		000001	SIN
AGEMAX		006236'	EXT	BUNWP%		000001	SIN	CORE1		000000'	ENT	DFRLST		005113'	INT
AGENTV		006213'	INT	CALSWP		003401'	EXT	COREND		007044'	INT	DFRPGN		005122'	INT
AGEPAG		006220'	INT	CAPPGN		006774'	EXT	CORERR		000074'		DFRPGY		006137'	
AGEPG1		006233'		CAVPGN		005120'	INT	CORLIT		006322'	INT	DIE		007014'	EXT
AGEPG2		006255'		CBREMV		000375'	EXT	CORLO1		000037'		DIOMAX		002305'	EXT
AGEPG3		006261'		CFR.N		000000	SIN	CORLO2		000041'		DMPHDR		005654'	
AGEPG4		006272'		CFRLST		005112'	INT	COROK		000073'		DMPNAM		005656'	
AGEPG5		006277'		CFRPGY		006126'		CORUHI		000047'		DMPVAL		005657'	
AGEPG6		006312'		CGF104		001522'		CORUUO		000023'	INT	DNDADS		000526'	EXT
AGEPTR		005351'	EXT	CHGF		000144	SPD	CORXK		000112'		DOUUO		001566'	
AGESIZ		006235'	EXT	CHGON		010000	SIN	CORXPN		000124'	EXT	DOXCT		000136'	INT
ANYACT		005542'	INT	CHGPW4		001532'		COWERR		003271'		DRBNAM		001716'	EXT
ATBDUM		006545'	EXT	CHGPWS		001523'	INT	CPOPJ		006220'	EXT	DRBRIB		000712'	EXT
ATBFNB		001706'	EXT	CHGUPA		001545'		CPOPJ1		006642'	EXT	DRRBLK		000727'	EXT
ATBLIC		000546'	EXT	CHKCNT		006203'		CPRCOW		000002	SIN	DRRSRC		000731'	EXT
ATBMWC		000235'	EXT	CHKL1A		006042'		CPRRDW		000003	SIN	DRSCHK		003351'	EXT
ATBRIB		000471'	EXT	CHKLP1		006031'		CPRRED		000001	SIN	DSKPIF		003511'	EXT
ATBSTS		003525'	EXT	CHKLP2		006043'		CPUKI		000001	SPD	DSKPIN		006637'	EXT
ATMMWC		000236'	EXT	CHKLP3		006054'		CPUTYP		000002	SPD	ECOD		001563'	
ATPCRE		000000	EXT	CHKLP4		006070'		CPZZ		000001	SPD	EI.DER		000002	SIN
ATPDEL		001711'	EXT	CHKLP5		006075'		CRBCN%		000000	SIN	EI.DTE		000001	SIN
ATPMXU		000233'	EXT	CHKLST		006013'	INT	CRBPR%		000002	SIN	EI.OER		000004	SIN
ATPSUP		000000	EXT	CHTFDP		004555'	INT	CRBVP%		000001	SIN	EI.PAR		000010	SIN
ATPUFE		000545'	EXT	CHTFIU		004510'	INT	CRDFL%		000006	SIN	EI.VAL		400000	SIN
BA1NBB		001005'	EXT	CHTFLS		004455'	INT	CREXV%		000003	SIN	EPT		000000	EXT
BACRFP		000602'	INT	CHTFMU		004521'	INT	CRLF		001071'	EXT	EPTEBR		000000	EXT
BACRVP		000630'	INT	CHTFNF		004516'	INT	CRLIM%		000005	SIN	EPTPG0		000200	SIN
BADPAG		001013'	INT	CHTFNJ		004503'	INT	CRMMWS		003730'		EPYPSM		004603'	EXT
BANNBB		000000	EXT	CHTMSK		004476'	INT	CROFF%		000007	SIN	ERR00		001551'	
BASNBB		000000	EXT	CHTPTR		004475'	INT	CRSPGN		005121'	INT	ERR01		001552'	
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131-2
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

ERR02		001553'		GETCPX		005024'	INT	IPOPJ		000000	EXT	LDFPOR		004307'	INT
ERR03		001554'		GETCR1		005600'		ITMCHN		000000	EXT	LG.PAC	000700	000000	SPD
ERR04		001555'		GETDP1		004750'		J		000002	INT	LI.PIF		000400	SPD
ERR05		001556'		GETDP2		004756'		JBTABT		003350'	EXT	LI.PIN		000200	SPD
ERR06		001557'		GETDP3		004763'		JBTAJF		003626'	EXT	LKDUPX		002477'	INT
ERR07		001560'		GETDP4		004766'		JBTCLB		000374'	EXT	LKDUX0		002504'	
ERR10		001561'		GETDPA		004744'	INT	JBTCTX		004317'	EXT	LKDUX1		002510'	
ERR11		001562'		GETER1		001101'	EXT	JBTIOA		005542'	EXT	LKDUX2		002515'	
EXCFL1		003407'		GETFR1		005104'	INT	JBTMPC		000262'	EXT	LKDUX3		002524'	
EXCFLT		003404'		GETFRE		005077'	INT	JBTPGO		005535'	EXT	LKDUX4		002534'	
F		000004	INT	GETLMA		004623'	INT	JBTPIP		000000	EXT	LM3ATB		005015'	EXT
FALNEX		000425'	EXT	GETLMS		004640'	INT	JBTPWH		001542'	EXT	LM3CUR		004301'	EXT
FALOFF		000000	EXT	GETLMX		004655'	INT	JBTPWL		001543'	EXT	LM3ERR		001627'	EXT
FALOPE		000427'	EXT	GETPAG		000243'	EXT	JBTPWS		001524'	EXT	LM3HDA		004756'	EXT
FBITS		000000	SPD	GETRE1		005066'		JBTSTS		006474'	EXT	LM3LMJ		005477'	EXT
FBITWS		005372'		GETRES		005056'	INT	JBTUPM		004576'	EXT	LM3LMV		005475'	EXT
FCAVAL		005670'	EXT	GETSAT		000561'	EXT	JBYACT		004343'	EXT	LM3SPB		005051'	EXT
FCREQ		005667'	EXT	GETSP1		005050'		JBYMWL		000000	EXT	LM3SPO		005052'	EXT
FD2FNO		002054'	EXT	GETSPT		005033'	INT	JBYMWS		005361'	EXT	LM3SPT		005050'	EXT
FD2WL1		002061'	EXT	GETWDS		005545'	INT	JBYPER		003123'	EXT	LMASRP		004760'	EXT
FD2WLK		000000	EXT	GETZ		005726'	INT	JBYPPP		005345'	EXT	LMMERR		003260'	EXT
FI.SAL		200000	SIN	GETZ1		005734'		JBYREF		002725'	EXT	LMMEXS		006250'	EXT
FI.VAL		400000	SIN	GETZ2		005742'		JBYRPT		002235'	EXT	LMMRED		002575'	EXT
FIBCN%		000000	SIN	GETZ3		005754'		JBYSAL		002761'	EXT	LMPACT		005036'	EXT
FINLMC		005507'	INT	GETZ4		005762'		JBYSLL		002764'	EXT	LMPDER		003112'	EXT
FINXWS		005444'	INT	GETZ5		005763'		JBYUWS		005333'	EXT	LMPDTE		003114'	EXT
FL.USR		400000	SIN	GETZR		005737'	INT	JOB		005524'	EXT	LMPLOK		004340'	EXT
FLTBRF		003367'		GIV4WD		005662'	INT	JOBATB		002566'	EXT	LMPMXW		002135'	EXT
FLTGR1		003361'		GIVCR2		005700'		JOBHRL		006325'	EXT	LMPNER		003316'	EXT
FLTGR2		003361'		GIVWDS		005660'	INT	JOBREL		006322'	EXT	LMPREF		003723'	EXT
FLTGRF		003360'		GTCGSZ		001545'	EXT	JWPOS		000016	SIN	LMPSHR		004441'	EXT
FLTMW1		003634'		GVALID		000654'		JWSADJ		400000	SIN	LMPSUP		006542'	EXT
FLTMW2		003640'		HSEXIS		000053'	EXT	JWSIZ		000005	SIN	LMPVIR		004163'	EXT
FLTMW3		003642'		INCCAV		005105'	INT	KCEBCN		001551'	SIN	LMYCUR		000000	EXT
FLTMW4		003643'		INCUMC		000232'	EXT	KCEBPR		001553'	SIN	LOCORE		005662'	EXT
FLTMW5		003644'		INCUS1		005230'		KCEBVP		001552'	SIN	LP2BAT		001032'	EXT
FLTMW6		003651'		INCUSE		005211'	INT	KCEDFL		001557'	SIN	LPNBAT		001035'	EXT
FLTMWS		003621'		INLMES		001064'	EXT	KCEEXV		001554'	SIN	LRFPRS		004646'	INT
FNBDRB		001707'	EXT	INSCH1		004564'		KCELIM		001556'	SIN	LRFPRT		004631'	INT
FNBEXT		001715'	EXT	INSCH2		004570'		KCEOFF		001560'	SIN	LRFPRX		004663'	INT
FNBNAM		001714'	EXT	INSCHT		004547'	INT	KCLEAR		000272'	INT	LSFPRS		004715'	INT
FNYUFP		000725'	EXT	INSTYP		006117'		KCREAT		000164'	INT	LSFPRT		004677'	INT
FREPTR		005666'	EXT	IO		000020	SIN	KILLHS		006323'	EXT	LSFPRX		004733'	INT
FSTBAD		001031'		IODERR		200000	SIN	KILPGS		006331'	EXT	LSFUFS		004711'	INT
GET4W1		005550'		IODTER		100000	SIN	KPFSP		001717'		LSFUFT		004673'	INT
GET4WD		005547'	INT	IOPPGN		005124'	INT	KPFUU1		001741'		LSFUFX		004727'	INT
GETAT1		004774'		IOPQTA		005123'	INT	KPGFIL		001671'		LSTLST		005112'	INT
GETAT2		005004'		IOSERR		000604'	EXT	KREMOV		000271'	INT	M		000013	INT
GETAT3		005007'		IOSHRE		000675'	EXT	KREPLC		003333'	EXT	M.IQTA		005123'	EXT
GETAT4		005015'		IOSHWE		000706'	EXT	KVDSK1		002240'		MAPCML		000560'	EXT
GETATB		004771'	INT	IOSSAE		000625'	EXT	KVDSKP		002233'		MAPKRN		002576'	EXT
GETCP1		005031'		IOWAIT		000025'	EXT	KVPROT		002101'	INT	MAPRLS		001015'	EXT
GETCPA		005017'	INT	IPOPJ		000000	EXT	LAFPOR		004133'	INT	MAPRWL		000715'	EXT
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131-3
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

MAPUC1		002617'		NXTWS1		005413'		PERNVP		001555'	SIN	PGYFPL		006063'	EXT
MAPUP1		004610'		NXTWS2		005423'		PERSE1		002214'		PGYLMJ		006113'	EXT
MAPUP2		004615'		NXTWS3		005426'		PERSE2		002223'		PGYLMV		005471'	EXT
MAPUPC		002614'		NXTWS4		005432'		PF.ABK		000023	SIN	PGYLST		006054'	EXT
MAPUPS		004573'	INT	NXTWS5		005442'		PFABK%		000006	SIN	PGYPGO		006114'	EXT
MAPUPX		002556'	INT	NXTWS6		005441'		PFBER%		000000	SIN	PGYSIO		005527'	EXT
MAPUX0		002563'		OHTDER		003074'	EXT	PFBVP%		000001	SIN	PGYSIP		006106'	EXT
MAPUX1		002566'		OHTDTE		003076'	EXT	PFCWS%		000005	SIN	PGYSOP		006107'	EXT
MAPUXE		002611'		OHTNUM		003715'	EXT	PFDFC%		000004	SIN	PGYSPB		005043'	EXT
MAPWTL		000751'	EXT	OHTPAR		003100'	EXT	PFEABK		001557'	SIN	PGYSPO		005044'	EXT
MAPXCH		001031'	EXT	OHTTAB		003073'	EXT	PFEBER		001551'	SIN	PGYSPT		006111'	EXT
MAXCOR		005574'		ONCLNP		000015'	EXT	PFECWS		001556'	SIN	PGYSTS		005253'	EXT
MAXCPR		002112'	EXT	ONDLNP		000016'	EXT	PFEDFC		001555'	SIN	PGYUSE		006362'	EXT
MAXPCB		006025'	EXT	ONES		005713'		PFEHPF		001560'	SIN	PJBSTS		005537'	EXT
MAXRUF		000003	SPD	OTFFLG		002144'	EXT	PFENEC		001561'	SIN	PJRST	324740	000000	
MAXWSF		000005	SPD	OTFSET		002336'	INT	PFENXP		001552'	SIN	PJUMPN	326000	000000	
MBIT		000241'	EXT	P		000001	INT	PFESWE		001554'	SIN	PPCBIO		003475'	EXT
MBITS		000400	SPD	P1		000014	INT	PFEWRT		001553'	SIN	PRBVP%		000001	SIN
MCRHDR		005575'		P2		000015	INT	PFHPF%		000007	SIN	PREBVP		001552'	SIN
MCRNAM		005577'		P3		000016	INT	PFICNT		003646'	EXT	PRENIW		001556'	SIN
MEMSZP		006031'	EXT	P4		000017	INT	PFLCNT		002705'	EXT	PRENVP		001555'	SIN
MF.CRF		200000	SPD	PAG		000010	SPD	PFLJB0		002707'	INT	PREOFF		001557'	SIN
MF.NEL		100000	SPD	PAGER1		000676'		PFLLDC		002711'	INT	PREREF		001315'	INT
MF.OTF		040000	SPD	PAGERR		000671'	INT	PFLPR0		003152'	INT	PREREF	047000	777703	
MF.VCL		400000	SPD	PAGFLE		002670'	INT	PFNEC%		000010	SIN	PRERF1		001327'	
MO.AEN		020000	SPD	PAGFLU		002671'	INT	PFNEX%		000004	SIN	PRERF2		001342'	
MO.AO		010000	SPD	PAGWAK		002334'	EXT	PFNFP%		000006	SIN	PRERF3		001345'	
MO.LAC		400000	SPD	PAGWAT		005524'	INT	PFNXP%		000001	SIN	PRF		004000	SIN
MO.TON		002000	SPD	PAGWT1		005533'		PFSWE%		000003	SIN	PRFMWS		003660'	
MRQ		100000	SIN	PC.UIO		004000	SIN	PFWCNT		003400'	EXT	PRNAME		001051'	EXT
MTR		000024	SPD	PC.USR		010000	SIN	PFWRT%		000002	SIN	PRNIW%		000005	SIN
MWSLIM		003767'	EXT	PCBF85		003476'		PG		000003	INT	PRNVP%		000004	SIN
MWSR2A		004015'		PCBFD0		003443'		PGE.A		400000	SIN	PROFF%		000006	SIN
MWSR2B		004016'		PCBFDN		003450'		PGE.C		020000	SIN	PROT		000000	EXT
MWSREP		003764'		PCBFL1		003417'	INT	PGE.P		200000	SIN	PRRCHK		000476'	EXT
MWSRP1		003772'		PCBFL4		003431'		PGE.W		100000	SIN	PRTDEC		001070'	EXT
MWSRP2		004012'		PCBFL5		003437'		PGENUM		005450'		PRTOCT		001063'	EXT
MWSRP3		004025'		PCBFL6		003454'		PGPDIO		002307'	EXT	PRTPG1		001042'	
MWSRP4		004027'		PCBFL7		003462'		PGPDRT		005230'	EXT	PS.CPR		000007	SIN
MWSRP5		004035'		PCBFL8		003465'		PGPSIP		005254'	EXT	PS.DDE		030000	SIN
MWSRP6		004043'		PCBFL9		003516'		PGPSOP		005221'	EXT	PS.DER		020000	SIN
MWSRP7		004062'		PCBFLT		003413'		PGSBCN		001551'	SIN	PS.DRT		004000	SIN
MWSRP8		004066'		PCBPAG		006633'	EXT	PGUSEA		005252'	INT	PS.DTE		010000	SIN
MWSRPL		003745'		PCISTS		006631'	EXT	PGUSEO		005213'	INT	PS.FIL		000010	SIN
NCTXPG		003770'	EXT	PDNMUP		001567'	EXT	PGUSEU		005241'	INT	PS.MXW		100000	SIN
NOCORE		005607'		PE.NER		002000	SIN	PGWNME		005525'	INT	PS.NER		002000	SIN
NOCREA		003321'		PEBCN%		000000	SIN	PGYADR		006671'	EXT	PS.OER		001000	SIN
NODIE		006371'	EXT	PEBVP%		000001	SIN	PGYATB		006112'	EXT	PS.PAR		000400	SIN
NOSCOW		003266'		PENVP%		000004	SIN	PGYBPL		006057'	EXT	PS.REF		200000	SIN
NXSMWS		005411'	INT	PERBCN		001551'	SIN	PGYCHT		004571'	EXT	PS.SUP		040000	SIN
NXTMWS		005410'	INT	PERBVP		001552'	SIN	PGYDIO		006110'	EXT	PS.UWS		400000	SIN
NXTSTL		005402'	INT	PERCHK		001266'		PGYDRT		006667'	EXT	PSBVP%		000001	SIN
NXTUWS		005405'		PERCK1		001303'		PGYERR		006635'	EXT	PSEBVP		001552'	SIN
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131-4
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

PSEOFF		001560'	SIN	REMLS3		005205'		RIBSTS		000000	EXT	SOD.N		000003	SIN
PSOFF%		000007	SIN	REMLST		005167'	INT	RIPPGN		005071'	EXT	SODLST		005115'	INT
PT.CNT		000001	SIN	REMMW1		003735'		RIPUFE		000540'	EXT	SOPPGY		006172'	
PT.PRT		002000	SIN	REMMWS		003733'	INT	RM.CRF		002000	SPD	SPCFLT		003371'	
PTBCN%		000000	SIN	REMOHT		006366'	EXT	RM.NEL		004000	SPD	SPFW.A		100000	SIN
PTBPR%		000002	SIN	REMOUT		000421'		RM.OTF		200000	SPD	SPFW.H		200000	SIN
PTBVP%		000001	SIN	REMOV1		000307'		RMXMWS		003740'	INT	SPFW.T		010000	SIN
PTEBCN		001551'	SIN	REMOV2		000352'		RMXUWS		003614'	INT	SPFW.U		400000	SIN
PTEBPR		001553'	SIN	REMOV3		000554'		RNQ		002434'	EXT	SPPVIR		003036'	EXT
PTEBVP		001552'	SIN	REMOV4		000620'		S		000000	INT	SPR.N		000005	SIN
PTENVP		001555'	SIN	REMOV5		000633'		S$CPU		000004	SIN	SPTATB		005005'	EXT
PTEOFF		001560'	SIN	REMOV6		000645'		S$DISK		000010	SIN	SPTEN1		005053'	EXT
PTEPRF		001556'	SIN	REMOV7		000650'		S$ENTR	777777	777775	SIN	SPTPNO		004754'	EXT
PTNVP%		000004	SIN	REMOV8		000652'		S$EVEN		000006	SIN	SPTVIR		003531'	EXT
PTOFF%		000007	SIN	REMOV9		000416'		S$HALT	777777	777777	SIN	SRCCH1		004466'	
PTPRF%		000005	SIN	REMUWS		003607'	INT	S$INFO		000005	SIN	SRCCHT		004454'	INT
PTRPGL		000011	SPD	REMV11		000310'		S$JOB		000002	SIN	SRCOHT		003720'	EXT
PTRPGY		006106'		REMV12		000313'		S$NAME		000000'	SPD	SRCSPT		003025'	EXT
PUTLS2		005161'		REMV14		000315'		S$NONA		000000	SIN	SRDUPX		001313'	EXT
PUTLSB		005143'	INT	REMV16		000332'		S$PATC		000007	SIN	SRPNDS		000460'	EXT
PUTLST		005125'	INT	REMV17		000343'		S$STOP		000001	SIN	STACML		003425'	EXT
PVYCOR		000202'	EXT	REMV18		000350'		S$TEMP		000000	SPD	STAWLN		003507'	EXT
PX.MEM		000004	SPD	REMV21		000360'		S$XCT	777777	777776	SIN	STAWTL		003423'	EXT
PX.SRC		000001	SPD	REMV23		000374'		SAVE1		000000	EXT	STAWTU		003422'	EXT
PXCT	256000	000000		REMV24		000412'		SAVE2		003535'	EXT	STDPRE		006630'	EXT
RB1PNO		001062'	EXT	REMV25		000500'		SAVE3		000000	EXT	STDREA		003463'	EXT
RB1UNI		001055'	EXT	REMV26		000531'		SAVE4		005547'	EXT	STDWAG		000000	EXT
RBMASK		004454'	EXT	REMV31		000566'		SAVFMU		004075'		STDWRT		000000	EXT
RBREAL		002574'	EXT	REMV36		000604'		SCNLM1		005473'		STLBTM		007010'	EXT
RBYPN1		001074'	EXT	REMV41		000625'		SCNLMC		005467'	INT	STOLMA		004672'	INT
RDPI	700640	000000		REMV71		000651'		SECBAD		001037'		STOLMS		004710'	INT
RDWSMP		001406'		REMVPG		000341'	INT	SETARR		000273'	EXT	STOLMX		004726'	INT
REDLMA		004626'	INT	REMWAT		005513'	INT	SETLMA		004674'	INT	STRBTS		000000	EXT
REDLMS		004643'	INT	REMWT1		005517'		SETLMS		004712'	INT	STRDDB		001717'	EXT
REDLMX		004660'	INT	REPOK		004107'		SETLMX		004730'	INT	STRNAM		001720'	EXT
REFBC		002002'		REQUE		002436'	EXT	SETMW1		005306'		STRTAD		200000	SPD
REFBC1		002010'		RF.SET		002000	SIN	SETMW2		005315'		STRTAL		000103'	EXT
REFLNP		000017'	EXT	RFBCN%		000000	SIN	SETMWS		005276'	INT	STWSLM		001471'	
RELLOK		001016'	EXT	RFBFN%		000005	SIN	SETO1		006003'		SWEDR0		003350'	
RELSAT		002646'	EXT	RFBT0		002013'		SETOS		005773'	INT	SWEDRS		003345'	
RELUR1		002553'		RFBT0A		002020'		SETSH1		004452'		SWPIO		004176'	EXT
RELUW1		002431'		RFBT1		002031'		SETSHR		004440'	INT	SWPIO	701640	000000	
RELUW2		002437'		RFBT1A		002035'		SETSTL		005324'	INT	SWPWAT		003375'	
REM25A		000527'		RFBT1B		002042'		SETUWS		005267'	INT	SWQ		005536'	EXT
REMCH0		004505'		RFBT2		001763'		SETZRS		005671'	INT	SWRUPX		001600'	EXT
REMCH1		004530'		RFBT2A		001775'		SG.SWR		000062'	EXT	T1		000006	INT
REMCH2		004534'		RFBVP%		000001	SIN	SID.N		000004	SIN	T2		000007	INT
REMCHR		004477'	INT	RFEBCN		001551'	SIN	SIDLST		005116'	INT	T3		000010	INT
REMCHT		004504'	INT	RFEBFN		001556'	SIN	SIOBOM		006662'	EXT	T4		000011	INT
REMFAL		000424'		RFEBVP		001552'	SIN	SIOCNT		004164'	EXT	TAKTRP		003127'	EXT
REMKRN		000435'	INT	RI.VAL		400000	SIN	SIPPGY		006161'		TBLPTR		000020'	
REMLS1		005177'		RIBELB		000000	EXT	SIPTOT		004165'	EXT	TBLSIZ		000015'	
REMLS2		005202'		RIBLCW		000000	EXT	SIZCOR		000075'		THSDAT		001021'	EXT
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131-5
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

TIMADJ		002777'	EXT	UPTLDC		000000	EXT	USRIU7		003144'		VLENVP		001555'	SIN
TIMEF		000264'	EXT	UPTLKC		002433'	EXT	USRIUW		003012'		VLEOFF		001557'	SIN
TOTACT		004344'	EXT	UPTLKJ		006501'	EXT	USRMAX		000000	EXT	VLIOE%		000005	SIN
TPOPJ		006451'	EXT	UPTLKW		002431'	EXT	USRRB1		002733'		VLNVP%		000004	SIN
TPOPJ1		001575'	EXT	UPTLMA		000000	EXT	USRRB2		002737'		VLOFF%		000006	SIN
TSTKTP		003125'	EXT	UPTMAT		005353'	EXT	USRRBO		002740'		VPCHK		002647'	
TSTMWS		005370'	INT	UPTMWB		007003'	EXT	USRRD0		003156'		VPFBVP		001552'	SIN
TSTUWS		005365'	INT	UPTNTV		000000	EXT	USRRDW		003160'		VPFNEX		001555'	SIN
TSTVIR		003520'	INT	UPTOFD		000000	EXT	USYPTN		004606'	EXT	VPFNFP		001557'	SIN
TSXMWS		005367'	INT	UPTREL		000000	EXT	UTRP		040000	SIN	VPGFIL		001665'	INT
TSXUWS		005364'	INT	UPTRPT		000000	EXT	UUYCPR		002110'	EXT	VPGS2A		001653'	
U		000005	INT	UPTSTS		000000	EXT	UUYCTG		002114'	EXT	VPGST2		001622'	
UCREAT		000160'	INT	UPTUEI		000000	EXT	UVALID		001120'	INT	VPGST3		001655'	
UFDERR		000000	EXT	UPTUFI		000000	EXT	UVDSKP		002232'	INT	VPGSTS		001602'	
UFPERR		000733'	EXT	UPTUII		000000	EXT	UWSCTL		001351'	INT	VPGSX		001660'	
UFRCHK		000716'	EXT	UPTURI		000000	EXT	UWSRP1		003545'		VPMAX		001034	SIN
ULDUPX		002540'	INT	UPTUWB		007002'	EXT	UWSRP2		003551'		VPROT	047000	777710	
ULDUX1		002547'		UPTXEI		000000	EXT	UWSRP3		003556'		VPROT1		002120'	
ULKNME		002417'	INT	UPTXFI		000000	EXT	UWSRP4		003560'		VPROT3		002147'	
UNINAM		001050'	EXT	UPTXII		000000	EXT	UWSRP5		003571'		VPROT4		002151'	
UNIUPT		002407'	INT	UPTXRI		000000	EXT	UWSRPL		003535'		VPROT5		002135'	
UNTTBL		001047'	EXT	UPXRM1		002633'		VALD0A		001160'		VPUMAX		005373'	EXT
UNWUPT		002412'	INT	UPXRMN		002641'		VALD2A		001175'		VRACNT		004153'	EXT
UNWUPX		002413'	INT	UPXRMV		002624'		VALD3A		001216'		VRFBIT		001745'	
UP4LDA		004757'	EXT	UPYPTM		002615'	EXT	VALD4A		001224'		VUOOUT		000434'	EXT
UPDADS		000632'	EXT	UPYPXM		002614'	EXT	VALID		001124'	INT	W		000012	INT
UPDERS		000666'		UPYUWL		003601'	EXT	VALID0		001136'		WAIT1		000000	EXT
UPERBT		000736'		UPYUWM		001512'	EXT	VALID1		001161'		WENUPX		002443'	
UPERUF		000710'		URFBIT		001744'	INT	VALID3		001205'		WLKUP1		002375'	
UPESET		002177'	INT	USE.N		000002	SIN	VALID4		001221'		WLKUP2		002404'	
UPESTS		002160'	INT	USELST		005114'	INT	VALID5		001232'		WLKUPN		002361'	
UPFSTE		002174'		USEMAX		005240'	EXT	VALID6		001242'		WLKUPT		002360'	INT
UPFSTS		002161'	INT	USEPGY		006150'		VALID7		001261'		WLKUPX		002345'	INT
UPGSTS		001576'	INT	USRAUW		003012'		VALID8		001264'		WLKUWT		002400'	
UPISTS		002154'	INT	USRBWR		003153'		VCREA1		000207'		WLKUX0		002353'	
UPPSTS		002162'		USRCO1		003245'		VCREA2		000221'		WPOPJ		002532'	
UPRBT0		000763'		USRCOW		003170'		VCREA3		000246'		WPOPJ1		002531'	
UPRBT1		000756'		USRCWR		003145'		VCRECT		000270'	INT	WPRUPX		002442'	
UPRBT2		001017'		USRFL1		002753'		VDBVP%		000001	SIN	WPRUX1		002453'	
UPRBT3		001026'		USRFL2		002765'		VDEBVP		001552'	SIN	WPRUX2		002455'	
UPRERF		001311'	INT	USRFL3		002772'		VDENEL		001556'	SIN	WRPI	700600	000000	
UPROT		002047'	INT	USRFL4		002775'		VDENVP		001555'	SIN	WRTCHP		001225'	EXT
UPROT1		002065'		USRFL5		003001'		VDNEL%		000005	SIN	WRUBR	701140	000000	
UPROT2		002064'		USRFL6		003004'		VDNVP%		000004	SIN	WS.ADD		002000	SIN
UPROT3		002067'		USRFLT		002705'		VL.CNT		001777	SIN	WSATM%		000007	SIN
UPRSTS		002156'	INT	USRI5A		003131'		VL.OTF		200000	SIN	WSBCN%		000000	SIN
UPSJOB		004622'	INT	USRI5B		003141'		VL.VPP		004000	SIN	WSBFN%		000005	SIN
UPSSWE		003353'	EXT	USRI5C		003137'		VL.WAT		002000	SIN	WSBVP%		000001	SIN
UPTACP		000000	EXT	USRI5D		003102'		VLBCN%		000000	SIN	WSCHED		005541'	EXT
UPTAGE		000000	EXT	USRIU2		003016'		VLBVP%		000001	SIN	WSCTL		001352'	
UPTELD		005355'	EXT	USRIU3		003032'		VLEBCN		001551'	SIN	WSCTL	047000	777704	
UPTHRL		000000	EXT	USRIU5		003064'		VLEBVP		001552'	SIN	WSCTL1		001372'	
UPTJOB		000000	EXT	USRIU6		003040'		VLEIOE		001556'	SIN	WSDSP		001402'	
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88 PAGE 131-6
CORE1.MAC	28-OCT-87 17:05		SYMBOL TABLE

WSEATM		001560'	SIN	..0003		004670'		
WSEBCN		001551'	SIN	..0004		004705'		
WSEBFN		001556'	SIN	..0005		004723'		
WSEBVP		001552'	SIN	..0006		004741'		
WSELOM		001561'	SIN	.ARCHM		000045	SIN	
WSELUS		001562'	SIN	.ARRDM		000044	SIN	
WSENVP		001555'	SIN	.ARVAR		000050	SIN	
WSERTM		001557'	SIN	.FDOTF		200000	SIN	
WSLOM%		000010	SIN	.MRADJ		000002	SPD	
WSLUS%		000011	SIN	.MRFDA		000001	SPD	
WSMAP		001405'		.MRFNA		000000	SPD	
WSNVP%		000004	SIN	.PFUWD		000000	SIN	
WSRA1A		001453'		.PFXWD		000001	SIN	
WSRAD1		001433'		.RFRBM		000000	SIN	
WSRAD2		001455'		.RFRNG		000002	SIN	
WSRDLM		001507'		.RFSBM		000001	SIN	
WSRDMX		001512'		.WSBTM		000000	SIN	
WSRDSZ		001504'		.WSRBM		000000	SIN	
WSREM1		001467'		.WSRLM		000004	SIN	
WSREMV		001460'		.WSRMX		000005	SIN	
WSRNGE		001420'		.WSRNG		000001	SIN	
WSRTM%		000006	SIN	.WSRSZ		000003	SIN	
WSTCHG		001515'		.WSSTL		000002	SIN	
ZERS		005710'		
ZNMTAB		005716'		
ZZ		001033	SIN	
%COW		003231'	EXT	
%COW.N		000000	EXT	
%CTBYP		003506'	EXT	
%CTSTS		003415'	EXT	
%CTUPT		003416'	EXT	
%ONC.N		000754	SIN	
%OND.N		000761	SIN	
%RB2		375000	SIN	
%RB2.C		006622'	EXT	
%RB2.N		000375	SIN	
%REF.N		000770	SIN	
%RIB		376000	SIN	
%RIB.C		006623'	EXT	
%RUTB		001761'		
%SAT		377000	SIN	
%SAT.C		006624'	EXT	
%UPLMA		006461'	EXT	
%UPLMS		004405'	EXT	
%UPLMX		000353'	EXT	
%UPS		004723'	EXT	
%UPS.N		000000	EXT	

CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

ABTCP1	  2690	  2694#
ABTCPL	  2689#
ACTLAS	  4294	  4297	  4315	  4337#
ACTLM0	  4244	  4337	  4344#
ACTLM1	  4350	  4355#
ACTLM2	  4346	  4348	  4353	  4358#
ACTLM3	  4362#
ACTLM4	  4364	  4373#
ACTLM5	  4363	  4367	  4376	  4408#
ACTLMA	  3855	  3925	  4284#
ACTLMS	  4241#
ACTNC1	  4292	  4305#
ACTNCF	  4307	  4320#
ADJMWS	  6240#
ADJNAP	  6237#	  6325
ADRDUM	   120%	   417	   658	  4568	  4757
ADRNCT	   120%	  4705	  5046
AGEADJ	  6231#	  6327
AGECAL	  6230#	  6276
AGECPW	    88%	  3069	  3746	  4141	  5572	  5608	  6278	  6318
AGEELD	  4105	  4154	  4174	  5574	  5612	  6235#	  6302	  6309
AGEHST	    89%	  6291
AGEMAT	  4104	  5576	  5610	  6234#	  6300	  6311
AGEMAX	    88%	  6285
AGENTV	  6233#	  6332
AGEPAG	  6269#
AGEPG1	  6282#	  6319
AGEPG2	  6293	  6300#
AGEPG3	  6301	  6304#
AGEPG4	  6290	  6303	  6308	  6314#
AGEPG5	  6314	  6319#
AGEPG6	  6323	  6326	  6332#
AGEPTR	    89%	  3071	  3747	  4142	  5573	  5609
AGESIZ	    88%	  6282	  6284
ANYACT	  5834	  5836#
ATBDUM	   494%	   695	   716	   777	  1534	  3122
ATBFNB	   946	   958	  1886	  1928%
ATBLIC	   479%	   755
ATBMWC	   131%	   423
ATBRIB	   494%	   696
ATBSTS	   130%	   422	   757	  1174	  1245	  1777	  1884	  1888	  3159	  3320	  3673
ATMMWC	   131%	   424
ATPCRE	   494%	   758
ATPDEL	   758	  1889	  1928%
ATPMXU	   131%	   421
ATPSUP	   494%	   758
ATPUFE	   494%	   754
BA1NBB	   971%	  1013	  1025	  1029
BACRFP	   799#
BACRVP	   836#
BADPAG	  1035#	  1064
BANNBB	   970%
BASNBB	   970%	  1026
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

BATCHK	   988	  1057	  1089#
BATCNT	   971%	  1046
BATCOD	   971%	  1092
BATELB	   970%	  1014	  1031	  1042
BATFIR	   970%	  1009	  1098
BATNAM	   971%	  1107
BATNBB	   970%	  1045
BATPAT	   970%	  1032	  1063	  1083
BATSLF	   970%	   991	   993	  1034	  1093
BATUP2	  1032#	  1047
BATUPD	  1024	  1036#	  1041	  1050	  1052
BITTBL	   116%	  1448	  5633	  6307
BLTPAG	  2415#
BLTPG0	  2415	  2423#
BLTULP	  2455	  2471#
BLTUU1	  2444#
BLTUU2	  2458#	  2464
BLTUU3	  2462	  2466#
BUCBB%	  2408#
BUCLP%	  2411#
BUECBB	  2408#	  2427
BUECLP	  2411#	  2452
BUENWP	  2410#	  2431	  2438
BUNWP%	  2410#
CALSWP	   110%	  1380	  3518
CAPPGN	    68%	  1210	  4351	  5204	  5481	  5528
CAVPGN	  4308	  4320	  4329	  4355	  5195	  5201	  5227	  5253	  5318#	  5474	  6063
CBREMV	   476%	   586
CFR.N	  4738	  5307#	  5534	  6065
CFRLST	  5196	  5208	  5230	  5307#
CFRPGY	  6123	  6131#
CGF104	  1615#	  1621
CHGF	  1614#	  1615	  1622
CHGON	  3493
CHGPW4	  1624#	  1651
CHGPWS	  1598	  1617#	  3126
CHGUPA	  1648#	  3725
CHKCNT	  6044	  6045	  6046	  6055	  6067	  6182#
CHKL1A	  6053	  6062#
CHKLP1	  6052#	  6060
CHKLP2	  6063#	  6069
CHKLP3	  6074#	  6082	  6090
CHKLP4	  6072	  6087#	  6091
CHKLP5	  6087	  6093#
CHKLST	  6036#
CHTFDP	  4762#
CHTFIU	  4703#
CHTFLS	  4643#
CHTFMU	  4714#
CHTFNF	  4709#
CHTFNJ	  4697#
CHTMSK	  4646	  4666#
CHTPTR	  4648	  4650	  4665#	  4726	  4728	  4773	  4775
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

CINMW1	  3880	  3906#
CINMW2	  3910	  3913#
CINMW3	  3912	  3917#
CINMW4	  3907	  3916	  3919#
CINMW5	  3881	  3899	  3923#
CINMW6	  3924	  3930#
CINMW7	  3936	  3939	  3941#
CINMWS	  1537	  3897#
CLKCHL	   103%
CLPTW	  2859	  2914#	  3594	  4971	  4974	  4985	  4988	  4999	  5002
CLPTW1	  2915	  2921#
CLRLOP	    38#	    43
CLRMW1	  5601	  5607#
CLRMW2	  5606	  5614#
CLRMWS	  3988	  5599#
CLRONC	    34	    36#
CLRUWS	  3791	  5590#
CLXMWS	  3995	  5598#
CLXUWS	  3800	  5589#
CNVATP	   130%	   419	  5092	  5095
CNVVPN	  2653	  2654	  2734	  2738	  2788	  2823	  2831	  2856	  2881	  2917	  3187	  3331	  3345	  3347
	  3353	  3363	  3370	  3396	  3404	  3408	  3440	  3444	  3526	  3536
CODBAT	   971%	  1094
CORE1	    11	    12#	    15
COREND	  6662#
CORERR	   194	   200	   212	   219	   224	   230#
CORLIT	  6341#
CORLO1	   192	   195#
CORLO2	   199#
COROK	   207	   216	   229#
CORUHI	   188	   206#
CORUUO	   182#
CORXK	   199	   222	   261#
CORXPN	   143%	   273
COWERR	  3369	  3396#
CPOPJ	   116%	  1097	  3860	  3932	  3989	  3996	  4653	  4696	  4734	  5160	  5167	  5780	  5928	  5989
	  6269
CPOPJ1	   116%	   264	   277	   452	   624	  1222	  1271	  1315	  1389	  1484	  1495	  1541	  1551	  1564
	  1571	  1577	  1583	  1814	  1856	  1907	  1909	  1911	  1913	  1915	  1917	  1919	  2006	  2045
	  2053	  2079	  2214	  2281	  2285	  2331	  2388	  2417	  2496	  2571	  2861	  3479	  3488	  3671
	  3674	  3675	  4179	  4289	  4341	  4424	  4428	  4657	  5134	  5636	  5837	  5868	  5971	  6015
CPRCOW	  3402	  3438
CPRRDW	  2203	  2654	  3293	  3342	  4426
CPRRED	  2653	  3331
CPUKI	   119	   305	   315	  2909	  3001	  3014
CPUTYP	   119	   305	   315	  2909	  3001	  3014
CPZZ	   119#	   119	   305#	   305	   315#	   315	  2909#	  2909	  3001#	  3001	  3014#	  3014
CRBCN%	   360#
CRBPR%	   362#
CRBVP%	   361#
CRDFL%	   366#	  3430
CREXV%	   363#
CRLF	  1085%	  1085
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

CRLIM%	   365#
CRMMWS	  3793	  3962#
CROFF%	   338	   367#
CRSPGN	  5192	  5194	  5319#	  6064
CTXCEX	  2829	  2841
CTXSWE	  2828	  2840
CTXTAB	   118%	  2811%	  2831
CTXVIR	  2828	  2840
CURUPT	   118%
CWQ	  2521%	  2562
DABBIT	   130%	   412
DEALM0	  4480#	  4488
DEALM1	  4453	  4484	  4489#
DEALM2	  4507	  4518#
DEALM3	  4527#	  4538
DEALM5	  4510	  4558#
DEALM6	  4559#
DEALM7	  4559	  4579#
DEALMA	   592	  3987	  3994	  4476#
DEALMS	  4443#
DECRMV	   494%	   782
DECUPM	   494%	   870
DECUS0	  5509	  5514#
DECUS1	  5526	  5534#
DECUS2	  5527	  5540#
DECUSE	   859	  4577	  4582	  5507#
DFR.N	  5308#	  5540	  6062
DFRLST	  5308#
DFRPGN	  1208	  4737	  5320#	  5475	  5541	  6066
DFRPGY	  6124	  6141#
DIE	    11	    11%	    12	   552	   799	   836	  1035	  2599	  3030	  3033	  3281	  3559	  4245	  4287
	  4445	  4643	  4697	  4703	  4709	  4714	  4762	  4888	  4901	  4914	  4963	  4967	  4977	  4981
	  4991	  4995	  5233	  5465	  5511	  5521	  5811
DIOMAX	  2413%	  2451
DMPHDR	  5891#	  5895
DMPNAM	  5892	  5893#
DMPVAL	  5892	  5894#
DNDADS	   476%	   479%	   734
DOUUO	   334	  1137	  1351	  1430	  1683#	  1709	  1858	  1933	  2094	  2311	  2370
DOXCT	   203	   227	   301#
DRBNAM	  1894	  1928%
DRBRIB	   495%	   948
DRRBLK	   944%	   961
DRRSRC	   944%	   963
DRSCHK	  3434	  3475%	  3482
DSKPIF	  3544%	  3574	  3638
DSKPIN	  3544%	  3579	  3608	  3627	  3642
ECOD	  1654	  1655	  1656	  1657	  1658	  1659	  1660	  1661	  1662	  1663	  1664#
EI.DER	  2254#	  3214	  3224	  3227
EI.DTE	  2255#	  3216	  3226	  3229
EI.OER	  2253#	  3211
EI.PAR	  2252#	  3218	  3227
EI.VAL	  2251#	  3235
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

EPT	    44	    61	    62	    63	   118%
EPTEBR	    44	    44%
EPTPG0	    61	    62	    63
EPYPSM	  2812%	  4810
ERR00	   360	  1129	  1325	  1420	  1654#	  1664	  1757	  1844	  1957	  2151	  2267	  2305	  2363	  2408
	  2979
ERR01	   361	  1130	  1326	  1421	  1655#	  1758	  1845	  1958	  2152	  2306	  2364	  2410	  2980
ERR02	   362	  1131	  1327	  1422	  1656#	  1846	  1959	  2153	  2307	  2365	  2411	  2981
ERR03	   363	  1132	  1328	  1423	  1657#	  1847	  1960	  2154	  2308	  2366	  2982
ERR04	   364	  1133	  1329	  1424	  1658#	  1848	  1961	  2155	  2309	  2367	  2983
ERR05	   365	  1134	  1330	  1425	  1659#	  1849	  1962	  2156	  2368	  2984
ERR06	   366	  1135	  1331	  1426	  1660#	  1850	  2157	  2985
ERR07	   367	  1427	  1661#	  1759	  2158	  2986
ERR10	  1428	  1662#	  2987
ERR11	  1429	  1663#
EXCFL1	  3530#
EXCFLT	  3022	  3526#
F	   372	   373	   503	   504	   510	   512	   514	   521	   534	   537	   542	   546	   554	   569
	   574	   583	   596	   679	   829	   876	   882	  1147	  1148	  1176	  1190	  1217	  1361	  1362
	  1441	  1442	  1452	  1594	  1763	  1765	  1871	  1872	  1964	  1966	  1992	  1994	  2000	  2162
	  2163	  2165	  2166	  2189	  2209	  2313	  2314	  2371	  2373	  2876	  2880	  2892	  2903	  2995
	  2996	  3017	  3019	  3021	  3050	  3060	  3072	  3100	  3134	  3185	  3248	  3270	  3325	  3376
	  3417	  3450	  3504	  3562	  3583	  3731	  3758	  4117	  4125	  4127	  4131	  4161	  4190	  4198
	  4388	  4391	  4399	  4402	  5688	  5694	  5701	  5736	  5746	  5752	  5759
FALNEX	   495%	   628
FALOFF	   495%
FALOPE	   495%	   630
FBITS	   727	   730	   741	   796
FBITWS	  5561	  5584	  5587	  5596	  5619	  5623	  5627	  5629#
FCAVAL	  5840%	  5885	  5908
FCREQ	  5840%	  5884	  5907
FD2FNO	  2082%	  2099
FD2WL1	  2082%	  2107
FD2WLK	  2082%
FI.SAL	  2247#	  3088	  3091
FI.VAL	  2246#	  3088
FIBCN%	  2267#	  2287
FINLMC	  4399	  5756#
FINXWS	  3758	  4125	  4131	  4161	  5698#
FL.USR	    28#	   371	   372	   373	  1147	  1148	  1217	  1361	  1362	  1440	  1441	  1442	  1452	  1594
	  1685	  1686	  1763	  1764	  1765	  1870	  1871	  1872	  1964	  1965	  1966	  2161	  2162	  2163
	  2312	  2313	  2314	  2371	  2373	  2903	  2996
FLTBRF	  3048	  3144	  3253	  3261	  3288	  3391	  3453	  3499#	  3506	  3508	  3533
FLTGR1	  3383	  3422	  3490#	  3500	  3595
FLTGR2	  3491#
FLTGRF	  3063	  3102	  3255	  3272	  3310	  3386	  3489#
FLTMW1	  3840	  3843#
FLTMW2	  3842	  3847#
FLTMW3	  3836	  3846	  3849#
FLTMW4	  3834	  3850#
FLTMW5	  3852#	  3857	  3864
FLTMW6	  3853	  3858#
FLTMWS	  3139	  3832#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

FNBDRB	   944%	   947	  1887	  1928%
FNBEXT	  1893	  1928%
FNBNAM	  1892	  1928%
FNYUFP	   495%	   959
FREPTR	  5840%	  5850	  5856	  5906
FSTBAD	   989	  1055#
GET4W1	  5850#	  5869
GET4WD	  5839	  5849#
GETAT1	  5070#
GETAT2	  5072	  5081#
GETAT3	  5070	  5087#
GETAT4	  5088	  5094#
GETATB	   662	  1171	  1242	  1533	  1776	  1883	  3121	  3158	  3319	  3672	  5066#
GETCP1	  5131	  5136#
GETCPA	  1383	  2449	  3199	  3219	  3858	  3930	  4449	  4482	  4612	  5109#
GETCPX	  1177	  1247	  1265	  1804	  5130#
GETCR1	  5854	  5879#
GETDP1	  5029#
GETDP2	  5029	  5036#
GETDP3	  5027	  5042#
GETDP4	  5034	  5040	  5046#
GETDPA	   657	  1302	  1792	  2384	  3166	  3208	  3937	  4290	  4313	  4331	  5024#	  5136
GETER1	   971%	  1096
GETFR1	  5233#
GETFRE	  4311	  4327	  5227#
GETLMA	  1529	  1545	  1875	  2017	  2192	  2336	  2381	  3046	  3116	  3384	  3520	  3761	  3863	  4034
	  4165	  4487	  4882#	  6294
GETLMS	  4895#	  5741
GETLMX	   587	  1166	  1199	  1213	  1239	  1264	  1371	  2190	  4908#
GETPAG	   368%	   432
GETRE1	  5193	  5201#
GETRES	  5192#
GETSAT	   495%	   712	   773
GETSP1	  5153	  5163#
GETSPT	  3179	  3676	  5149#
GETWDS	  5839	  5847#
GETZ	  5853	  5947	  5957#	  5986	  5991
GETZ1	  5964#	  5985
GETZ2	  5970#	  5996
GETZ3	  5963	  5980#
GETZ4	  5962	  5986#
GETZ5	  5975	  5989#
GETZR	  5947	  5967#
GINST	   204#	   204	   205	   228#	   228	   229	   244#	   244	   245	  1388#	  1388	  1389	  1482#	  1482
	  1483	  1494#	  1494	  1495	  1504#	  1504	  1505	  1554#	  1554	  1555	  1570#	  1570	  1571	  1576#
	  1576	  1577	  1582#	  1582	  1583	  1690#	  1690	  1813#	  1813	  1814	  1857#	  1857	  1858	  1906#
	  1906	  1907	  1908#	  1908	  1909	  1910#	  1910	  1911	  1912#	  1912	  1913	  1914#	  1914	  1915
	  1916#	  1916	  1917	  1918#	  1918	  1919	  1991#	  1991	  1992	  2039#	  2039	  2040	  2046#	  2046
	  2047	  2051#	  2051	  2052	  2064#	  2064	  2065	  2073#	  2073	  2074	  2280#	  2280	  2281	  2284#
	  2284	  2285	  2288#	  2288	  2289	  2387#	  2387	  2388	  2418#	  2418	  2419	  2423#	  2423	  2424
	  2424#	  2425	  2446#	  2446	  2447	  2459#	  2459	  2460	  2466#	  2466	  2467	  2471#	  2471	  2472
	  2495#	  2495	  2496	  2922#	  2922	  2923	  3196#	  3196	  3197	  3197#	  3198	  3360#	  3360	  3361
GIV4WD	  5839	  5902#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

GIVCR2	  5925#	  5930	  5931
GIVWDS	  5839	  5900#
GTCGSZ	  1611%	  1619	  1648
GVALID	   577	   875#
HSEXIS	   142%	   193	   210
INCCAV	  4736	  5250#	  5535
INCUMC	   131%	   420
INCUS1	  5472	  5479#
INCUSE	   861	  4358	  5463#
INLMES	  1067%	  1067	  1073%	  1073	  1077%	  1077	  1081%	  1081
INSCH1	  4765	  4771#
INSCH2	  4769	  4777#
INSCHT	  4314	  4332	  4756#
INSTYP	  6058	  6123#
IO	   700	   950
IODERR	   666	   689	   722	   724	   827	   923	  1307	  3223
IODTER	   668	   689	   722	   827	   925	  1309	  3225
IOPPGN	  5250	  5252	  5327#
IOPQTA	  5251	  5326#
IOSERR	   476%	   674	   746	   808	   955
IOSHRE	   476%	   673	   916
IOSHWE	   476%	   671	   811	   815	   863	   926
IOSSAE	   476%	   713	   725	   740	   774	   794	   833
IOWAIT	   142%	   185
IPOPJ	   498%
ITMCHN	   370	   370%	  1145	  1438	  2999	  3495
J	   231	   235	   405	   412	   445	   446	   585	  1195	  1196	  1198	  1257	  1258	  1263	  1379
	  1453	  1617	  1624	  1627	  1628	  2104	  2456	  2478	  2525	  2609	  2610	  2611	  2612	  2613
	  2614	  2615	  2616	  2617	  2623	  2689	  2694	  2727	  2732	  2742	  2743	  2747	  2763	  2821
	  2827	  2839	  2877	  2878	  2891	  2997	  3029	  3327	  3433	  3481	  3487	  3516	  3555	  3837
	  3838	  3908	  4025	  4386	  4404	  4412	  4454	  4505	  4524	  4529	  4543	  4802	  4805	  4822
	  5735	  5736	  5749	  5751	  5781	  5782	  5784	  5810	  5820	  5821	  5836	  6269	  6321
JBTABT	  2456	  2478	  3433	  3475%	  3481
JBTAJF	   126%	  3837
JBTCLB	   476%	   585
JBTCTX	   124%	  2827	  2839	  4454
JBTIOA	   125%	  5836
JBTMPC	   124%	   446	   447
JBTPGO	   125%	  2521%	  2550	  2551	  2558	  2615	  5821
JBTPIP	   125%
JBTPWH	  1611%	  1627	  1632
JBTPWL	  1611%	  1624	  1628	  1629	  1633
JBTPWS	  1611%	  1617	  1618
JBTSTS	   124%	  1379	  1453	  2521%	  2563	  3475%	  3487	  3516	  3838	  3908	  4025	  6321
JBTUPM	   144%	   235	   405	   445	  4805
JBYACT	   125%	  4415	  4421	  4490	  4494
JBYMWL	   124%
JBYMWS	   124%	  3843	  3913	  4096	  4168	  4186	  5578	  5582	  5614	  5617
JBYPER	    91%	  3241
JBYPPP	    92%	  4097	  5565	  5569	  5602	  5605
JBYREF	    91%	  3054
JBYRPT	   124%	  2374
JBYSAL	    91%	  3089
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

JBYSLL	    91%	  3092
JBYUWS	    92%	  1515	  1561	  1569	  3083	  3722	  3764	  5555	  5559	  5591	  5594
JOB	   116%	   231	  1196	  1258	  2997	  5782	  5810
JOBATB	  2811%	  2826
JOBHRL	   143%	   228
JOBREL	   143%	   204
JWPOS	  2563
JWSADJ	  1451	  3839	  3909	  4024	  6322
JWSIZ	  2563
KCEBCN	   360#	   382
KCEBPR	   362#	   377
KCEBVP	   361#	   400
KCEDFL	   366#	   433
KCEEXV	   363#	   411
KCELIM	   365#	   408
KCEOFF	   367#
KCLEAR	   475	   504#	  3338	  3371	  3399	  3409	  3445
KCREAT	   370#	  3343
KILLHS	   142%	   215
KILPGS	   143%	   268	   282
KPFSP	  1881	  1896#
KPFUU1	  1885	  1923#
KPGFIL	  1870#
KREMOV	   475	   503#
KREPLC	   130%	  3333	  3405	  3441
KVDSK1	  2372	  2378#
KVDSKP	  2371#
KVPROT	  2117	  2161#
LAFPOR	  4287#	  4418
LAFUPS	  4245#
LDFPOR	  4445#	  4478
LG.PAC	   306
LI.PIF	  2472	  5813	  6050
LI.PIN	  2477	  5817	  5824	  6094	  6095
LISTSN	     3	     6
LKDUPX	  2534	  2726#
LKDUX0	  2729	  2732#
LKDUX1	  2736#	  2737
LKDUX2	  2744#	  2746
LKDUX3	  2754#	  2758
LKDUX4	  2756	  2763#
LM3ATB	   101%	   413	  4365	  4563	  5094
LM3CUR	   101%	   102%	   441	  1790	  2195	  2206	  3274	  3294	  4425
LM3ERR	   105%	  1310	  1312	  1784
LM3HDA	   102%	   438	  4575	  5036
LM3LMJ	   102%	  4410	  4501	  4533	  4539	  5744
LM3LMV	   102%	  4411	  4502	  4534	  4540	  5742
LM3SPB	   102%	  5030	  5081	  5164
LM3SPO	   103%	  5031	  5165
LM3SPT	   103%	  4373	  4580	  4619	  5163
LMASRP	   103%	   437	  4574	  5038
LMMERR	   105%	   439	   670	  2338	  2724%	  2753	  3361	  3381	  3414	  3942
LMMEXS	   103%	   410	   525	   566	  1167	  1372	  1513	  1546	  1771	  1876	  2018	  2193	  2323	  2382
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	  2884	  3047	  4243	  4285	  4883	  4896	  4909	  5024	  5067	  6289	  6295
LMMRED	  2813%	  2833
LMPACT	   103%	   105%	   439	  1376	  2207	  3302	  3852	  3923	  4213	  4241	  4288	  4414	  4447	  4480
	  4489	  4610	  5026	  5071	  5087	  5109	  5130	  5152
LMPDER	   105%	   477%	   664	  3228
LMPDTE	   105%	   477%	   667	  3230
LMPLOK	  2724%	  2735	  2789	  4215	  4491
LMPMXW	   106%	   440	  1786	  2202	  2811%
LMPNER	   104%	  1313	  1788	  2322	  2337	  2341	  2811%	  2836	  3236	  3346	  3362	  3378	  3379	  3420
LMPREF	   104%	   597	   869	  1810	  2022	  2024	  2047	  3049	  3061	  3941
LMPSHR	   104%	   105%	   439	  4393	  4608
LMPSUP	   104%	   661	   692	   720	   766	  1169	  1240	  1530	  1774	  1782	  1878	  3119	  3156	  3317
	  3669	  4362	  4395	  4561	  4565	  4607	  5066	  5150
LMPVIR	   104%	   106%	   440	  1532	  3118	  3176	  3667	  3678	  3942	  4296	  4324
LMYCUR	   101%
LOCORE	  5840%	  5865	  5902
LP2BAT	   970%	   983	   990	  1056
LPNBAT	   970%	   977	   987	  1059
LRFPRS	  4901#
LRFPRT	  4888#
LRFPRX	  4914#
LSFPRS	  4981#
LSFPRT	  4967#
LSFPRX	  4995#
LSFUFS	  4977#
LSFUFT	  4963#
LSFUFX	  4991#
LSTLST	  5306#	  5357	  5363	  5372	  5378	  5391	  5411	  5425	  6084	  6088
M	   244	   390	   428	   434	   519	   560	   877	   881	  1388	  1443	  1482	  1483	  1492	  1493
	  1504	  1554	  1570	  1576	  1582	  1687	  1689	  1690	  1768	  1812	  1813	  1967	  1991	  2039
	  2041	  2064	  2070	  2073	  2288	  2387	  2418	  2495	  3016	  3052	  3326	  3375	  3416	  3449
	  3749	  3753	  4144	  4155	  4191	  4197	  4216	  4220	  4389	  4396	  4401	  5688	  5746
M.IQTA	  5324%	  5326	  5327
MAPCML	   495%	   711	   771
MAPKRN	  2813%	  2834
MAPRLS	   496%	  1037
MAPRWL	   479%	   701	   951
MAPUC1	  2857#	  2860
MAPUP1	  4818#	  4820
MAPUP2	  4824#	  4826
MAPUPC	  2822	  2854#
MAPUPS	  4247	  4456	  4531	  4802#	  5740
MAPUPX	  2730	  2764	  2816#
MAPUX0	  2819	  2821#
MAPUX1	  2826#	  2838
MAPUXE	  2830	  2835	  2842	  2846#
MAPWTL	   496%	   980	   986
MAPXCH	   496%	  1055
MAXCOR	  5863	  5864	  5871#	  5874
MAXCPR	   106%	   376	  2170
MAXPCB	  6034%	  6047
MAXRUF	  1969	  1979#
MAXWSF	  1446	  1470#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

MBIT	   368%	   427
MBITS	   728	   798	   802	   835	   839
MCRHDR	  5873#	  5876
MCRNAM	  5874	  5875#
MEMSZP	  6034%	  6052
MF.CRF	   484#	   510	   596
MF.NEL	   485#	   512	   679	   829
MF.OTF	   487#	   514	   534	   574
MF.VCL	   483#	   504
MO.AEN	  3495
MO.AO	  3495
MO.LAC	   370	  1145	  1438	  2999	  3495
MO.TON	  3495
MRQ	  3515
MTR	   370	  1145	  1438	  2998	  2999	  3495
MWSLIM	   120%	  3844	  3914	  4092
MWSR2A	  4120	  4125#
MWSR2B	  4118	  4126#
MWSREP	  4028	  4089#	  6329
MWSRP1	  4096#	  4170	  4175
MWSRP2	  4121#	  4130
MWSRP3	  4121	  4134#
MWSRP4	  4123	  4140#
MWSRP5	  4150#
MWSRP6	  4135	  4161#
MWSRP7	  4173	  4176#
MWSRP8	  4099	  4128	  4132	  4162	  4183#
MWSRPL	  3847	  3917	  4020#
NCTXPG	    90%	   848	  2640%	  2653	  2654	  2670	  2724%	  2734	  2738	  2751	  2788	  2813%	  2823	  2856
	  2881	  3845	  3915	  4093	  4817	  4823
NOCORE	  5881	  5888#	  5894
NOCREA	  3344	  3429#
NODIE	    11%	  1035
NOSCOW	  3318	  3389#
NXSMWS	  5664#
NXTMWS	  4117	  4127	  5663#
NXTSTL	  5655#
NXTUWS	  3731	  5659#
NXTWS1	  5657	  5661	  5667#
NXTWS2	  5667	  5678#	  5693
NXTWS3	  5681#	  5692
NXTWS4	  5685#
NXTWS5	  5679	  5682	  5693#
NXTWS6	  5674	  5692#
OHTDER	   133%	   904%	   922	  1295%	  1306	  3213
OHTDTE	   133%	   904%	   924	  1295%	  1308	  3215
OHTNUM	   133%	   478%	   918	  1300	  1793	  3206	  3935
OHTPAR	   133%	   904%	   922	  1295%	  1306	  1799	  3217
OHTTAB	   133%	   904%	   921	  1295%	  1305	  1798	  3212
ONCLNP	    55	    56%
ONDLNP	    56	    57%
ONES	  5935#	  6003
OTFFLG	   499%	   535	   575	  2096	  2113	  2121	  2164	  2165	  2166	  2189	  2209
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

OTFSET	  2490#
P	    12	    45	   184	   185	   186	   187	   190	   193	   195	   199	   201	   203	   206	   209
	   210	   213	   215	   222	   225	   227	   229	   230	   246	   267	   272	   273	   276	   281
	   301	   309	   311	   313	   314	   316	   317	   318	   319	   336	   340	   409	   419	   420
	   432	   442	   450	   507	   508	   515	   518	   519	   536	   537	   538	   539	   541	   542
	   543	   545	   546	   547	   552	   560	   561	   577	   586	   587	   591	   592	   598	   604
	   606	   610	   612	   613	   616	   618	   622	   623	   627	   631	   632	   633	   634	   657
	   662	   669	   690	   701	   702	   712	   714	   715	   716	   717	   718	   719	   734	   735
	   756	   759	   760	   773	   775	   776	   777	   782	   783	   788	   789	   790	   791	   799
	   813	   814	   818	   830	   836	   840	   842	   844	   845	   852	   859	   860	   861	   864
	   875	   876	   877	   878	   880	   881	   882	   883	   884	   908	   919	   920	   927	   951
	   952	   953	   957	   960	   961	   962	   963	   980	   986	   988	  1035	  1037	  1055	  1057
	  1067	  1072	  1073	  1076	  1077	  1080	  1081	  1084	  1095	  1096	  1100	  1106	  1109	  1110
	  1139	  1143	  1166	  1171	  1177	  1195	  1197	  1198	  1199	  1202	  1211	  1212	  1213	  1214
	  1216	  1218	  1239	  1242	  1247	  1257	  1259	  1263	  1264	  1265	  1267	  1269	  1302	  1303
	  1353	  1358	  1368	  1371	  1374	  1375	  1383	  1459	  1460	  1461	  1462	  1502	  1517	  1520
	  1523	  1525	  1528	  1529	  1533	  1537	  1538	  1540	  1545	  1548	  1549	  1563	  1595	  1619
	  1634	  1648	  1666	  1684	  1687	  1688	  1689	  1691	  1711	  1715	  1768	  1769	  1776	  1779
	  1792	  1795	  1804	  1812	  1875	  1883	  2004	  2017	  2025	  2026	  2077	  2099	  2103	  2107
	  2111	  2114	  2117	  2119	  2120	  2122	  2124	  2125	  2126	  2190	  2192	  2210	  2212	  2289
	  2319	  2336	  2340	  2342	  2381	  2384	  2415	  2419	  2448	  2449	  2463	  2467	  2480	  2481
	  2493	  2534	  2535	  2536	  2564	  2593	  2599	  2604	  2622	  2625	  2647	  2658	  2672	  2693
	  2695	  2726	  2730	  2742	  2744	  2745	  2747	  2759	  2760	  2761	  2764	  2782	  2785	  2787
	  2792	  2820	  2826	  2834	  2837	  2843	  2846	  2847	  2848	  2859	  2874	  2875	  2876	  2877
	  2883	  2886	  2887	  2888	  2891	  2892	  2893	  2894	  2919	  2924	  2925	  3000	  3030	  3033
	  3035	  3036	  3038	  3040	  3041	  3042	  3043	  3044	  3045	  3046	  3048	  3056	  3058	  3074
	  3095	  3097	  3112	  3114	  3115	  3116	  3117	  3121	  3126	  3139	  3141	  3143	  3158	  3166
	  3167	  3169	  3170	  3179	  3183	  3199	  3202	  3208	  3209	  3219	  3243	  3245	  3249	  3253
	  3259	  3261	  3281	  3288	  3319	  3323	  3324	  3325	  3326	  3328	  3333	  3336	  3338	  3341
	  3343	  3345	  3348	  3366	  3368	  3371	  3373	  3374	  3375	  3376	  3377	  3384	  3391	  3396
	  3398	  3399	  3403	  3405	  3409	  3412	  3413	  3415	  3416	  3417	  3418	  3434	  3439	  3441
	  3445	  3448	  3449	  3450	  3451	  3453	  3477	  3482	  3483	  3489	  3492	  3496	  3499	  3506
	  3508	  3514	  3519	  3533	  3554	  3559	  3587	  3590	  3592	  3594	  3603	  3607	  3618	  3622
	  3625	  3626	  3628	  3629	  3631	  3632	  3633	  3634	  3668	  3672	  3676	  3679	  3680	  3719
	  3720	  3725	  3761	  3762	  3763	  3769	  3770	  3771	  3789	  3790	  3791	  3798	  3799	  3800
	  3802	  3832	  3847	  3848	  3849	  3850	  3855	  3856	  3858	  3861	  3862	  3863	  3879	  3897
	  3917	  3918	  3919	  3925	  3926	  3930	  3933	  3934	  3937	  3938	  3940	  3943	  3945	  3962
	  3963	  3982	  3983	  3987	  3988	  3992	  3993	  3994	  3995	  4020	  4021	  4022	  4023	  4028
	  4030	  4031	  4032	  4033	  4090	  4091	  4094	  4100	  4165	  4166	  4167	  4169	  4176	  4177
	  4178	  4183	  4184	  4185	  4188	  4189	  4190	  4191	  4192	  4193	  4195	  4196	  4197	  4198
	  4199	  4211	  4240	  4242	  4244	  4245	  4287	  4290	  4291	  4293	  4305	  4306	  4309	  4311
	  4313	  4314	  4322	  4327	  4331	  4332	  4335	  4337	  4338	  4339	  4352	  4356	  4358	  4384
	  4385	  4386	  4387	  4388	  4389	  4390	  4398	  4400	  4401	  4402	  4403	  4404	  4405	  4406
	  4445	  4448	  4449	  4453	  4455	  4481	  4482	  4485	  4486	  4487	  4520	  4521	  4522	  4523
	  4524	  4525	  4531	  4535	  4536	  4542	  4543	  4544	  4545	  4546	  4547	  4612	  4616	  4620
	  4643	  4661	  4697	  4703	  4706	  4707	  4708	  4709	  4711	  4714	  4736	  4758	  4759	  4760
	  4762	  4764	  4779	  4803	  4804	  4827	  4828	  4888	  4892	  4894	  4901	  4905	  4907	  4914
	  4918	  4920	  4963	  4967	  4971	  4972	  4974	  4975	  4977	  4981	  4985	  4986	  4988	  4989
	  4991	  4995	  4999	  5000	  5002	  5003	  5048	  5077	  5083	  5113	  5136	  5197	  5202	  5209
	  5228	  5231	  5233	  5254	  5354	  5366	  5370	  5381	  5392	  5426	  5432	  5465	  5467	  5470
	  5480	  5483	  5511	  5512	  5521	  5524	  5529	  5530	  5535	  5635	  5685	  5686	  5687	  5689
	  5690	  5691	  5698	  5699	  5700	  5740	  5741	  5743	  5745	  5747	  5749	  5750	  5756	  5757
	  5758	  5781	  5783	  5784	  5811	  5818	  5838	  5853	  5866	  5883	  5886	  5959	  5977	  6036
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	  6037	  6038	  6039	  6040	  6042	  6093	  6096	  6097	  6098	  6099	  6100	  6101	  6270	  6271	  6272
	  6273	  6274	  6294	  6298	  6329	  6334	  6335	  6336	  6337	  6338	  6339
P1	   379	   389	   404	   441	   509	   511	   513	   660	   709	   750	   769	   864	   907	   975
	   981	  1089	  1149	  1150	  1153	  1172	  1221	  1243	  1482	  1484	  1486	  1493	  1494	  1512
	  1516	  1770	  1778	  1781	  1783	  1785	  1787	  1789	  1791	  1797	  1800	  1803	  1808	  1811
	  1813	  1855	  1856	  1857	  1906	  1907	  1908	  1909	  1910	  1911	  1912	  1913	  1914	  1915
	  1916	  1917	  1918	  2039	  2040	  2045	  2064	  2065	  2072	  2168	  2169	  2170	  2196	  2203
	  2206	  2270	  2272	  2274	  2275	  2279	  2283	  2319	  2321	  2329	  2423	  2425	  2429	  2433
	  2434	  2436	  2458	  2466	  3035	  3045	  3052	  3053	  3062	  3064	  3086	  3087	  3088	  3091
	  3101	  3109	  3205	  3211	  3214	  3216	  3218	  3221	  3224	  3226	  3227	  3229	  3234	  3235
	  3237	  3252	  3254	  3257	  3554	  3576	  3582	  3585	  3591	  3592	  3610	  3614	  3619	  3635
	  3643	  3727	  3752	  3759	  4021	  4024	  4025	  4026	  4027	  4033	  4106	  4108	  4151	  4153
	  4162	  4163	  4172	  4518	  4539	  4547	  5850	  5961	  5968	  5986	  5989	  5990	  6270	  6279
	  6280	  6315	  6316	  6317	  6328	  6338
P2	   383	   385	   398	   451	   515	   529	   533	   536	   543	   547	   555	   558	   559	   663
	   695	   696	   716	   755	   757	   777	   946	   958	  1150	  1151	  1152	  1153	  1155	  1238
	  1513	  1522	  1879	  1892	  1910	  2095	  2096	  2100	  2108	  2113	  2116	  2121	  2323	  2327
	  2424	  2425	  2428	  2432	  2444	  2446	  2466	  3036	  3038	  3083	  3085	  3090	  3110	  3113
	  3727	  3739	  3740	  3742	  4022	  4032	  4109	  4121	  4122	  4134	  4519	  4540	  4546	  5851
	  5882	  5972	  5973	  6271	  6337
P3	   335	   339	   410	   439	   440	   597	   661	   664	   667	   670	   692	   720	   766	   869
	   957	   958	   960	  1138	  1142	  1167	  1169	  1240	  1313	  1352	  1357	  1372	  1376	  1530
	  1532	  1546	  1710	  1714	  1771	  1774	  1782	  1786	  1788	  1810	  1876	  1878	  1880	  1893
	  1912	  2018	  2022	  2024	  2102	  2106	  2110	  2193	  2202	  2207	  2321	  2322	  2337	  2338
	  2341	  2382	  2432	  2433	  2435	  2833	  2836	  2884	  3047	  3049	  3061	  3118	  3119	  3156
	  3161	  3176	  3178	  3228	  3230	  3236	  3302	  3317	  3321	  3667	  3669	  3675	  3678	  3852
	  3923	  3941	  3942	  4213	  4215	  4241	  4243	  4285	  4288	  4296	  4324	  4362	  4364	  4384
	  4393	  4395	  4406	  4414	  4447	  4480	  4489	  4491	  4522	  4532	  4541	  4545	  4559	  4561
	  4565	  4607	  4608	  4610	  4882	  4883	  4885	  4895	  4896	  4898	  4908	  4909	  4911	  4964
	  4978	  4992	  5024	  5026	  5029	  5066	  5067	  5070	  5071	  5087	  5109	  5130	  5149	  5150
	  5152	  5852	  5867	  5880	  5957	  5970	  5976	  6000	  6004	  6272	  6288	  6289	  6295	  6304
	  6305	  6306	  6307	  6336
P4	   435	   436	   591	   612	   627	  1880	  1894	  1916	  2021	  2098	  2208	  2339	  3182	  3201
	  3264	  3271	  3305	  3306	  3385	  3792	  3801	  3944	  4217	  4385	  4405	  4422	  4427	  4523
	  4544	  4576	  4581	  4891	  4893	  4904	  4906	  4917	  4919	  4970	  4973	  4984	  4987	  4998
	  5001	  5042	  5073	  5089	  5111	  5132	  5154	  5855	  5859	  5881	  5968	  5969	  6006	  6008
	  6010	  6013	  6273	  6297	  6307	  6335
PAG	    44
PAGER1	   909	   913	   918#
PAGERR	   912#
PAGFLE	  2995#
PAGFLU	  2996#
PAGWAK	    73%	  2480
PAGWAT	  1197	  1259	  2463	  3631	  3862	  4486	  5783	  5810#
PAGWT1	  5815	  5819#
PC.UIO	   303	   310	  2915	  3186	  3352
PC.USR	  1683
PCBF85	  3620	  3627#
PCBFD0	  3586#	  3644
PCBFDN	  3584	  3591#
PCBFL1	  3559#
PCBFL4	  3563	  3566	  3569	  3574#
PCBFL5	  3582#	  3637
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

PCBFL6	  3578	  3598#
PCBFL7	  3599	  3614#
PCBFL8	  3611	  3618#
PCBFL9	  3609	  3643#
PCBFLT	  3538	  3554#
PCBPAG	  3541%	  3588	  3604	  3623	  3630
PCISTS	  3544%	  3575	  3602	  3616	  3639	  3641
PDNMUP	  1681%	  1684
PE.NER	  2301#	  2320
PEBCN%	  2305#
PEBVP%	  2306#
PENVP%	  2309#
PERBCN	  2305#	  2318
PERBVP	  2306#	  2326
PERCHK	  1202	  1214	  1267	  1297#
PERCK1	  1301	  1304	  1310#
PERNVP	  2309#	  2328
PERSE1	  2325#	  2330
PERSE2	  2319	  2336#
PF.ABK	  3505
PFABK%	  2985#
PFBER%	  2979#
PFBVP%	  1845#
PFCWS%	  2984#
PFDFC%	  2983#
PFEABK	  2985#	  3508
PFEBER	  2979#	  3533
PFECWS	  2984#	  3391
PFEDFC	  2983#	  3453
PFEHPF	  2986#	  3506
PFENEC	  2987#	  3143
PFENXP	  2980#	  3048
PFESWE	  2982#	  3253	  3261
PFEWRT	  2981#	  3288
PFHPF%	  2986#
PFICNT	    69%	  3854
PFLCNT	    69%	  3028
PFLJB0	  3030#
PFLLDC	  3033#
PFLPR0	  3281#
PFNEC%	  2987#
PFNEX%	  1848#
PFNFP%	  1850#
PFNXP%	  2980#
PFSWE%	  2982#
PFWCNT	    69%	  3517
PFWRT%	  2981#
PG	   810	   817	   843	   846	   979	   985	  1036	  1157	  1298	  2471	  3306	  3307	  3534	  3556
	  3557	  3576	  3587	  3588	  3590	  3591	  3603	  3604	  3607	  3622	  3623	  3625	  3629	  3630
	  3632	  3635	  4090	  4178	  4185	  4217	  4218	  4422	  4648	  4650	  4653	  4658	  4659	  4660
	  4707	  4713	  4718	  4721	  4759	  4764	  4766	  4768	  4773	  4775	  5042	  5043	  5073	  5074
	  5089	  5090	  5111	  5112	  5132	  5133	  5154	  5155	  5196	  5198	  5208	  5210	  5230	  5232
	  5360	  5362	  5363	  5375	  5377	  5378	  5389	  5414	  5416	  5429	  5431	  6040	  6047	  6049
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	  6052	  6060	  6080	  6081	  6082	  6084	  6085	  6088	  6090	  6096
PGE.A	  2021	  2339	  3182	  3264	  3385	  3582	  3643	  3792	  3801	  3944	  4576	  4581	  4809	  6297
PGE.C	  3182	  4422	  4809
PGE.P	  2339	  3182	  3264	  3385	  3944
PGE.W	  2208	  2665	  2666	  3182	  3201	  3271	  3305	  3585	  3643	  4427	  4809
PGENUM	  5680	  5707#
PGPDIO	  2413%	  2453
PGPDRT	    77%	  1182	  1807	  4345	  5473	  5479	  5525
PGPSIP	    77%	  1181	  4345	  4701	  5469	  5523
PGPSOP	    77%	  1187	  1807	  4349	  4701	  5471	  5525
PGSBCN	  2267#
PGUSEA	  5521#
PGUSEO	  5465#
PGUSEU	  5511#
PGWNME	  5811#
PGYADR	    74%	  4567	  4571	  4655	  4704	  4730	  4756	  5044
PGYATB	    76%	  4366	  4375	  4560	  4566	  4614	  5091	  5515	  6111
PGYBPL	    74%	  5359	  5376	  5380	  5388	  5398	  5430	  6077
PGYCHT	    74%	  4659	  4716	  4719	  4767	  4778
PGYDIO	    74%	  1184	  2450	  2454	  2473	  2476	  4219	  4450	  4483	  5517	  5779	  5816	  6109
PGYDRT	    74%	  3200	  3309	  3589	  4423	  4569	  4733	  4735	  6115
PGYERR	    74%	   905%	   912	  1299	  3220	  3544%	  3606	  3624	  4732
PGYFPL	    74%	  5361	  5365	  5374	  5387	  5399	  5415	  6081
PGYLMJ	    75%	  4408	  4412	  4503	  4508	  4695	  5518	  5735	  6112
PGYLMV	    75%	  4409	  4413	  4504	  4509	  5737
PGYLST	    75%	  5355	  5371	  5400	  6054	  6074
PGYPGO	    76%	  5819	  5820	  6113
PGYSIO	    76%	  5777	  5814
PGYSIP	    75%	  1250	  1384	  3859	  3931	  4334	  6107
PGYSOP	    75%	  1205	  1252	  2461	  6108
PGYSPB	    75%	  5075	  5157
PGYSPO	    75%	  5158
PGYSPT	    75%	  4374	  4397	  4579	  4615	  5156	  5516	  6110
PGYSTS	    77%	  1180	  1806	  4344	  4700	  5468	  5522
PGYUSE	    75%	   849	  1206	  4347	  4693	  4699	  5463	  5507	  6114
PJBSTS	   120%	  2589%	  2621	  5823
PPCBIO	  3541%	  3626
PRBVP%	  1326#
PREBVP	  1326#	  1365
PRENIW	  1330#	  1369
PRENVP	  1329#	  1373
PREOFF	  1331#
PREREF	  1360#
PRERF1	  1367	  1371#
PRERF2	  1377	  1383#
PRERF3	  1381	  1386#
PRF	  1378
PRFMWS	  1374	  3879#
PRNAME	  1072%	  1072
PRNIW%	  1330#
PRNVP%	  1329#
PROFF%	  1331#	  1356
PROT	    68%
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

PRRCHK	   478%	   702
PRTDEC	  1084%	  1084
PRTOCT	  1076%	  1076	  1080%	  1080
PRTPG1	  1035	  1067#
PS.CPR	  1751#
PS.DDE	  1742#
PS.DER	  1740#
PS.DRT	  1743#	  1808
PS.DTE	  1741#	  1802
PS.FIL	  1749#	  1778
PS.MXW	  1738#	  1787
PS.NER	  1744#	  1789
PS.OER	  1745#	  1797
PS.PAR	  1747#	  1800
PS.REF	  1737#	  1811
PS.SUP	  1739#	  1783
PS.UWS	  1736#	  1781
PSBVP%	  1758#
PSEBVP	  1758#	  1767
PSEOFF	  1759#
PSOFF%	  1713	  1759#
PT.CNT	  2147#
PT.PRT	  2146#
PTBCN%	  2151#
PTBPR%	  2153#
PTBVP%	  2152#
PTEBCN	  2151#	  2173
PTEBPR	  2153#	  2171
PTEBVP	  2152#	  2188
PTENVP	  2155#	  2194
PTEOFF	  2158#
PTEPRF	  2156#	  2218
PTNVP%	  2155#
PTOFF%	  2101	  2109	  2158#
PTPRF%	  2156#
PTRPGL	  6056	  6117#
PTRPGY	  6057	  6107#	  6117
PUTLS2	  5358	  5373	  5387#
PUTLSB	  4739	  5368#
PUTLST	  5352#	  5477	  5536	  5542
PVYCOR	   144%	   232	   386
PX.MEM	   204	   228	   244	  1388	  1482	  1494	  1504	  1554	  1570	  1576	  1582	  1690	  1813	  1857
	  1906	  1908	  1910	  1912	  1914	  1916	  1918	  1991	  2039	  2046	  2051	  2064	  2073	  2280
	  2284	  2288	  2387	  2418	  2423	  2424	  2446	  2459	  2466	  2471	  2495	  2922	  3196	  3197
	  3360
PX.SRC	  2046	  2051	  2466	  3197
RB1PNO	   971%	  1010	  1079%	  1079
RB1UNI	  1069%	  1069	  1075%	  1075
RBMASK	   132%	  4642
RBREAL	   496%	   699	   710	   751	   770	   949	   976	   982	  1090	  2813%	  2832
RBYPN1	   971%	   978	   984	   992	  1091
RDWSMP	  1466	  1482#
REDLMA	  2448	  2883	  4211	  4885#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

REDLMS	  4898#
REDLMX	   409	  1769	  4911#
REFBC	  2004	  2016#	  2077
REFBC1	  2020	  2023#
REFLNP	    57	    58%
RELLOK	   496%	   756	   964	   967	  1038
RELSAT	   496%	   622	   633	  2844	  2846	  2872%	  2895
RELUR1	  2790#	  2791
RELUW1	  2613	  2616#
RELUW2	  2611	  2623#
REM25A	   723	   726	   729	   735#
REMCH0	  4694	  4700#
REMCH1	  4717	  4724#
REMCH2	  4722	  4729#
REMCHR	   818	   852	   860	  4693#
REMCHT	  4699#	  5198	  5210	  5232
REMFAL	   571	   583	   627#
REMKRN	   610	   657#	  2887
REMLS1	  5410	  5414#
REMLS2	  5412	  5424#
REMLS3	  5424	  5429#
REMLST	  5354	  5370	  5398#
REMMW1	  3966	  3987#
REMMWS	  2886	  3982#	  4166
REMOHT	   478%	   865
REMOUT	   622#
REMOV1	   525#	   559
REMOV2	   566#	   617
REMOV3	   675	   680	   697	   703	   766#
REMOV4	   793	   797	   824#
REMOV5	   831	   834	   842#
REMOV6	   850	   859#
REMOV7	   809	   810	   843	   846	   853	   863#
REMOV8	   659	   736	   767	   784	   817	   819	   869#
REMOV9	   569	   616#
REMUWS	  1548	  3762	  3789#
REMV11	   526#	   529
REMV12	   529#
REMV14	   521	   527	   532#
REMV16	   540	   545#
REMV17	   550	   555#
REMV18	   530	   544	   554	   560#
REMV21	   568	   572#
REMV23	   579	   585#
REMV24	   595	   610#
REMV25	   693	   709#
REMV26	   721	   740#
REMV31	   743	   782#
REMV36	   795	   808#
REMV41	   828	   833#
REMV71	   812	   816	   864#
REMVPG	   552#	   582
REMWAT	   813	   844	  5777#	  5785
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

REMWT1	  5778	  5781#
REPOK	  3750	  4145	  4210#
REQUE	  2589%	  2622
RF.SET	  1953#	  1993
RFBCN%	  1957#
RFBFN%	  1962#
RFBT0	  1977	  2038#
RFBT0A	  2044#	  2052
RFBT1	  1977	  2063#
RFBT1A	  2068#	  2078
RFBT1B	  2072	  2075#
RFBT2	  1978	  1990#
RFBT2A	  2001#	  2005
RFBVP%	  1958#
RFEBCN	  1957#	  1997
RFEBFN	  1962#	  1970	  1978
RFEBVP	  1958#	  2003
RI.VAL	  2263#	  3053
RIBELB	   478%	   752
RIBLCW	   496%	   749
RIBSTS	   497%	   747	   956
RIPPGN	    68%	  5206
RIPUFE	   497%	   748
RM.CRF	   489#	   509
RM.NEL	   490#	   511
RM.OTF	   491#	   513
RMXMWS	   604	  3992#
RMXUWS	   606	  3798#
RNQ	  2589%	  2620
S	   665	   666	   668	   671	   673	   674	   689	   700	   713	   722	   724	   725	   740	   745
	   774	   794	   808	   811	   815	   827	   833	   863	   915	   916	   923	   925	   926	   950
	   954	  1297	  1299	  1307	  1309	  1311	  1879	  1888	  1889	  1890	  1891	  1906	  2874	  2894
	  3720	  3728	  3748	  3751	  3769	  4091	  4101	  4102	  4107	  4143	  4150	  4174	  4177	  4184
S$CPU	  3030	  3031
S$DISK	   799	   800	   836	   837
S$ENTR	    11	    17	   425	   553	   582	   800	   837	  1036	  1194	  1209	  1256	  1901	  1925	  2115
	  2199	  2217	  2386	  2475	  2533	  2600	  2657	  2765	  3031	  3034	  3037	  3282	  3286	  3304
	  3330	  3335	  3340	  3372	  3390	  3401	  3407	  3411	  3432	  3437	  3443	  3447	  3560	  3571
	  3760	  4246	  4288	  4312	  4328	  4330	  4392	  4394	  4418	  4446	  4452	  4478	  4493	  4528
	  4609	  4644	  4698	  4704	  4710	  4715	  4763	  4808	  4889	  4902	  4915	  4964	  4968	  4978
	  4982	  4992	  4996	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207	  5212	  5234
	  5353	  5369	  5402	  5466	  5482	  5512	  5522	  5558	  5568	  5581	  5593	  5604	  5616	  5631
	  5812	  5926	  5932	  6009	  6048	  6059	  6068	  6076	  6079	  6086	  6296
S$EVEN	   552	   799	   836	  1035	  1036	  2599	  3030	  3033	  3281	  3559	  4245	  4287	  4445	  4643
	  4697	  4703	  4709	  4714	  4762	  4888	  4901	  4914	  4963	  4967	  4977	  4981	  4991	  4995
	  5233	  5465	  5511	  5521	  5811
S$HALT	    11	   425	   552	   582	   799	   836	  1035	  1194	  1209	  1256	  1901	  1925	  2115	  2199
	  2217	  2386	  2475	  2533	  2599	  2657	  2765	  3030	  3033	  3037	  3281	  3286	  3304	  3330
	  3335	  3340	  3372	  3390	  3401	  3407	  3411	  3432	  3437	  3443	  3447	  3559	  3571	  3760
	  4245	  4287	  4312	  4328	  4330	  4392	  4394	  4418	  4445	  4452	  4478	  4493	  4528	  4609
	  4643	  4697	  4703	  4709	  4714	  4762	  4808	  4888	  4901	  4914	  4963	  4967	  4977	  4981
	  4991	  4995	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207	  5212	  5233	  5353
	  5369	  5402	  5465	  5482	  5511	  5521	  5558	  5568	  5581	  5593	  5604	  5616	  5631	  5811
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	  5926	  5932	  6009	  6048	  6059	  6068	  6076	  6079	  6086	  6296
S$INFO	   552	   799	   836	  1035	  2599	  3030	  3033	  3281	  3559	  4245	  4287	  4445	  4643	  4697
	  4703	  4709	  4714	  4762	  4888	  4901	  4914	  4963	  4967	  4977	  4981	  4991	  4995	  5233
	  5465	  5511	  5521	  5811
S$JOB	  3559	  3560
S$NAME	    15#	   425	  1194	  1209	  1256	  1901	  1925	  2115	  2199	  2217	  2386	  2475	  2533	  2657
	  2765	  3037	  3286	  3304	  3330	  3335	  3340	  3372	  3390	  3401	  3407	  3411	  3432	  3437
	  3443	  3447	  3571	  3760	  4312	  4328	  4330	  4392	  4394	  4452	  4493	  4528	  4609	  4808
	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207	  5212	  5353	  5369	  5402	  5482
	  5558	  5568	  5581	  5593	  5604	  5616	  5631	  5926	  5932	  6009	  6048	  6059	  6068	  6076
	  6079	  6086	  6296
S$NONA	    14	    17	   425	   553	   583	   800	   837	  1036	  1194	  1209	  1256	  1901	  1925	  2115
	  2199	  2217	  2386	  2475	  2533	  2600	  2657	  2765	  3031	  3034	  3037	  3282	  3286	  3304
	  3330	  3335	  3340	  3372	  3390	  3401	  3407	  3411	  3432	  3437	  3443	  3447	  3560	  3571
	  3760	  4246	  4288	  4312	  4328	  4330	  4392	  4394	  4419	  4446	  4452	  4479	  4493	  4528
	  4609	  4644	  4698	  4704	  4710	  4715	  4763	  4808	  4889	  4902	  4915	  4964	  4968	  4978
	  4982	  4992	  4996	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207	  5212	  5234
	  5353	  5369	  5402	  5466	  5482	  5512	  5522	  5558	  5568	  5581	  5593	  5604	  5616	  5631
	  5812	  5926	  5932	  6009	  6048	  6059	  6068	  6076	  6079	  6086	  6296
S$PATC	   552	   799	   836	  1035	  2599	  3030	  3033	  3281	  3559	  4245	  4287	  4445	  4643	  4697
	  4703	  4709	  4714	  4762	  4888	  4901	  4914	  4963	  4967	  4977	  4981	  4991	  4995	  5233
	  5465	  5511	  5521	  5811
S$STOP	   552	   553	  2599	  2600	  3033	  3034	  3281	  3282	  4245	  4246	  4287	  4288	  4445	  4446
	  4643	  4644	  4697	  4698	  4703	  4704	  4709	  4710	  4714	  4715	  4762	  4763	  4888	  4889
	  4901	  4902	  4914	  4915	  4963	  4964	  4967	  4968	  4977	  4978	  4981	  4982	  4991	  4992
	  4995	  4996	  5233	  5234	  5465	  5466	  5511	  5512	  5521	  5522	  5811	  5812
S$TEMP	    11#	    11	   425#	   425	   552#	   552	   582#	   582	   799#	   799	   836#	   836	  1035#	  1035
	  1194#	  1194	  1209#	  1209	  1256#	  1256	  1901#	  1901	  1925#	  1925	  2115#	  2115	  2199#	  2199
	  2217#	  2217	  2386#	  2386	  2475#	  2475	  2533#	  2533	  2599#	  2599	  2657#	  2657	  2765#	  2765
	  3030#	  3030	  3033#	  3033	  3037#	  3037	  3281#	  3281	  3286#	  3286	  3304#	  3304	  3330#	  3330
	  3335#	  3335	  3340#	  3340	  3372#	  3372	  3390#	  3390	  3401#	  3401	  3407#	  3407	  3411#	  3411
	  3432#	  3432	  3437#	  3437	  3443#	  3443	  3447#	  3447	  3559#	  3559	  3571#	  3571	  3760#	  3760
	  4245#	  4245	  4287#	  4287	  4312#	  4312	  4328#	  4328	  4330#	  4330	  4392#	  4392	  4394#	  4394
	  4418#	  4418	  4445#	  4445	  4452#	  4452	  4478#	  4478	  4493#	  4493	  4528#	  4528	  4609#	  4609
	  4643#	  4643	  4697#	  4697	  4703#	  4703	  4709#	  4709	  4714#	  4714	  4762#	  4762	  4808#	  4808
	  4888#	  4888	  4901#	  4901	  4914#	  4914	  4963#	  4963	  4967#	  4967	  4977#	  4977	  4981#	  4981
	  4991#	  4991	  4995#	  4995	  5025#	  5025	  5047#	  5047	  5068#	  5068	  5110#	  5110	  5151#	  5151
	  5161#	  5161	  5168#	  5168	  5199#	  5199	  5207#	  5207	  5212#	  5212	  5233#	  5233	  5353#	  5353
	  5369#	  5369	  5402#	  5402	  5465#	  5465	  5482#	  5482	  5511#	  5511	  5521#	  5521	  5558#	  5558
	  5568#	  5568	  5581#	  5581	  5593#	  5593	  5604#	  5604	  5616#	  5616	  5631#	  5631	  5811#	  5811
	  5926#	  5926	  5932#	  5932	  6009#	  6009	  6048#	  6048	  6059#	  6059	  6068#	  6068	  6076#	  6076
	  6079#	  6079	  6086#	  6086	  6296#	  6296
S$XCT	    17	   425	   553	   582	   583	   800	   837	  1036	  1194	  1209	  1256	  1901	  1925	  2115
	  2199	  2217	  2386	  2475	  2533	  2600	  2657	  2765	  3031	  3034	  3037	  3282	  3286	  3304
	  3330	  3335	  3340	  3372	  3390	  3401	  3407	  3411	  3432	  3437	  3443	  3447	  3560	  3571
	  3760	  4246	  4288	  4312	  4328	  4330	  4392	  4394	  4418	  4419	  4446	  4452	  4478	  4479
	  4493	  4528	  4609	  4644	  4698	  4704	  4710	  4715	  4763	  4808	  4889	  4902	  4915	  4964
	  4968	  4978	  4982	  4992	  4996	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207
	  5212	  5234	  5353	  5369	  5402	  5466	  5482	  5512	  5522	  5558	  5568	  5581	  5593	  5604
	  5616	  5631	  5812	  5926	  5932	  6009	  6048	  6059	  6068	  6076	  6079	  6086	  6296
SAVE1	   116%
SAVE2	   116%	  3717
SAVE3	   116%
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

SAVE4	  2813%	  2816	  2872%	  5840%	  5849
SAVFMU	  3718	  4089	  4190#
SCNLM1	  5740#	  5751
SCNLMC	  4391	  5735#
SECBAD	  1058	  1062#
SETARR	   497%	   507
SETLMA	  2837	  2888	  3170	  3183	  3202	  4339	  4964#
SETLMS	  4978#
SETLMX	   442	   613	  4992#
SETMW1	  5564	  5571#
SETMW2	  5570	  5578#
SETMWS	  2745	  3849	  3919	  5563#
SETO1	  6008#	  6014
SETOS	  5866	  5947	  6000#
SETSH1	  4611	  4619#
SETSHR	  3169	  4398	  4607#
SETSTL	  4240	  5586#
SETUWS	  1528	  3117	  5555#
SETZRS	  5839	  5917	  5918#
SG.SWR	   144%	   218
SID.N	  5311#	  6071
SIDLST	  5311#
SIOBOM	   110%	  4321
SIOCNT	   110%	  4325
SIPPGY	  6127	  6161#
SIPTOT	   110%	  4326
SIZCOR	   183	   231#
SOD.N	  5310#
SODLST	  5310#
SOPPGY	  6126	  6171#
SPCFLT	  3020	  3504#
SPFW.A	  3072	  3134
SPFW.H	  3019
SPFW.T	  3270	  3562	  3583
SPFW.U	  3021	  3050	  3185
SPPVIR	    97%	  3180
SPR.N	  5312#	  5352	  5368	  5401	  6046	  6182
SPRLST	  5312#	  5314
SPTATB	    97%	  5076	  5082
SPTEN1	    97%	  5032	  5159	  5166
SPTPNO	    97%	  5033
SPTVIR	    97%	  3181	  3677
SRCCH1	  4655#	  4660
SRCCHT	   908	  4291	  4642#	  4708	  4760	  5137
SRCOHT	   133%	   904%	   919	  1303	  1795	  3209	  3938
SRCSPT	   131%	  3167
SRDUPX	  1139	  1353	  2082%
SRPNDS	   139%	   415	   498%	   677
STACML	  3542%	  3567
STAWLN	  3542%	  3568	  3598	  3636
STAWTL	  3542%	  3565
STAWTU	  3542%	  3564
STDPRE	  3542%	  3577	  3601	  3640
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

STDREA	  3542%	  3600	  3615	  3619
STDWAG	  3542%	  3600	  3619
STDWRT	  3542%	  3600	  3619
STLBTM	   111%	  5586	  5655
STOLMA	  1314	  1538	  1549	  2025	  2212	  2340	  3114	  3141	  3323	  3478	  3489	  3514	  3763	  3861
	  4020	  4167	  4485	  4962#	  6298
STOLMS	  4976#	  5747	  5756
STOLMX	   598	  1211	  1216	  1269	  1375	  2210	  4990#
STRBTS	   139%	   416	   498%	   678
STRDDB	   139%	   143%	   239	   416	   498%	   678	  1898
STRNAM	  1899	  1928%
STRTAD	  5948#	  5957	  5976
STRTAL	   143%	   240
STWSLM	  1467	  1554#
SWEDR0	  3368	  3477	  3481#
SWEDRS	  3249	  3259	  3477#
SWPIO	    68%	  1212	  4335
SWPWAT	  3514#	  3856
SWQ	   110%	  5822
SWRUPX	   336	  1711	  2082%
T1	    36	    38	    40	    43	   183	   184	   187	   188	   189	   190	   191	   195	   201	   202
	   204	   206	   207	   208	   209	   213	   214	   225	   226	   228	   230	   232	   233	   234
	   241	   242	   243	   244	   261	   263	   265	   266	   269	   270	   271	   272	   276	   280
	   301	   302	   303	   305	   306	   307	   309	   316	   317	   318	   320	   337	   338	   339
	   371	   383	   386	   387	   388	   389	   412	   413	   422	   423	   426	   427	   443	   445
	   532	   533	   535	   548	   556	   566	   567	   572	   573	   575	   576	   580	   618	   628
	   630	   631	   634	   663	   677	   678	   696	   699	   711	   714	   718	   727	   728	   730
	   741	   745	   746	   747	   748	   749	   750	   751	   752	   754	   755	   757	   758	   771
	   775	   791	   796	   798	   802	   835	   839	   847	   848	   849	   850	   912	   913	   914
	   915	   921	   922	   924	   946	   947	   948	   949	   954	   955	   956	   959	   965	   966
	   975	   976	   981	   982	   991	   993	  1009	  1011	  1014	  1031	  1033	  1034	  1041	  1042
	  1045	  1050	  1051	  1062	  1063	  1069	  1070	  1071	  1075	  1079	  1083	  1089	  1090	  1093
	  1097	  1098	  1099	  1101	  1103	  1105	  1107	  1108	  1140	  1141	  1142	  1146	  1149	  1159
	  1160	  1161	  1174	  1180	  1181	  1182	  1187	  1204	  1205	  1206	  1207	  1245	  1250	  1251
	  1252	  1253	  1305	  1306	  1308	  1310	  1311	  1312	  1314	  1355	  1356	  1357	  1360	  1363
	  1378	  1379	  1384	  1385	  1440	  1443	  1444	  1445	  1446	  1448	  1455	  1456	  1457	  1458
	  1491	  1492	  1494	  1504	  1505	  1508	  1509	  1515	  1516	  1534	  1554	  1556	  1558	  1560
	  1562	  1569	  1570	  1575	  1576	  1581	  1582	  1620	  1621	  1623	  1625	  1630	  1649	  1650
	  1654	  1655	  1656	  1657	  1658	  1659	  1660	  1661	  1662	  1663	  1664	  1665	  1685	  1686
	  1690	  1712	  1713	  1714	  1762	  1764	  1777	  1798	  1799	  1801	  1802	  1803	  1855	  1870
	  1884	  1886	  1888	  1965	  1967	  1968	  1969	  1971	  1972	  1973	  1991	  1993	  1995	  1996
	  1997	  1998	  1999	  2046	  2049	  2050	  2051	  2095	  2100	  2101	  2102	  2108	  2109	  2110
	  2116	  2120	  2125	  2161	  2164	  2167	  2172	  2173	  2174	  2175	  2195	  2196	  2277	  2280
	  2281	  2284	  2285	  2287	  2288	  2312	  2315	  2317	  2320	  2371	  2378	  2418	  2423	  2424
	  2428	  2429	  2430	  2434	  2435	  2436	  2437	  2450	  2451	  2453	  2454	  2455	  2456	  2459
	  2461	  2462	  2473	  2474	  2476	  2479	  2490	  2494	  2495	  2523	  2524	  2527	  2546	  2547
	  2550	  2552	  2553	  2562	  2563	  2591	  2592	  2596	  2597	  2598	  2603	  2620	  2621	  2645
	  2646	  2653	  2656	  2664	  2665	  2666	  2667	  2691	  2692	  2696	  2697	  2735	  2736	  2754
	  2779	  2780	  2783	  2784	  2786	  2817	  2818	  2839	  2840	  2841	  2857	  2858	  2902	  2904
	  2905	  3015	  3016	  3017	  3041	  3043	  3054	  3055	  3068	  3069	  3084	  3085	  3089	  3092
	  3093	  3122	  3159	  3181	  3184	  3187	  3189	  3190	  3191	  3192	  3193	  3194	  3196	  3197
	  3198	  3200	  3212	  3213	  3215	  3217	  3220	  3221	  3223	  3225	  3241	  3242	  3274	  3278
	  3293	  3294	  3308	  3309	  3320	  3331	  3336	  3337	  3341	  3342	  3348	  3349	  3351	  3353
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	  3354	  3355	  3356	  3357	  3358	  3360	  3361	  3363	  3370	  3374	  3379	  3397	  3398	  3402	  3403
	  3408	  3413	  3414	  3419	  3420	  3421	  3429	  3430	  3438	  3439	  3444	  3484	  3485	  3486
	  3487	  3504	  3505	  3515	  3516	  3555	  3575	  3577	  3600	  3601	  3602	  3610	  3614	  3615
	  3616	  3639	  3640	  3641	  3670	  3673	  3674	  3677	  3723	  3724	  3745	  3746	  3764	  3766
	  3838	  3839	  3843	  3845	  3859	  3860	  3908	  3909	  3913	  3915	  3931	  3932	  4092	  4093
	  4094	  4096	  4098	  4100	  4140	  4141	  4152	  4153	  4168	  4169	  4171	  4172	  4176	  4186
	  4187	  4219	  4220	  4284	  4286	  4295	  4307	  4333	  4334	  4344	  4345	  4349	  4408	  4410
	  4415	  4416	  4417	  4421	  4423	  4424	  4425	  4426	  4443	  4444	  4450	  4451	  4476	  4477
	  4483	  4484	  4490	  4492	  4494	  4503	  4505	  4527	  4529	  4533	  4536	  4560	  4562	  4563
	  4564	  4566	  4569	  4570	  4571	  4613	  4614	  4655	  4656	  4693	  4694	  4699	  4702	  4711
	  4713	  4716	  4719	  4726	  4728	  4729	  4730	  4731	  4732	  4733	  4734	  4735	  4777	  4778
	  4810	  4811	  4819	  4823	  4824	  4825	  4826	  4886	  4887	  4889	  4890	  4891	  4893	  4899
	  4900	  4902	  4903	  4904	  4906	  4912	  4913	  4915	  4916	  4917	  4919	  4965	  4966	  4968
	  4969	  4970	  4973	  4979	  4980	  4982	  4983	  4984	  4987	  4993	  4994	  4996	  4997	  4998
	  5001	  5075	  5076	  5081	  5082	  5091	  5094	  5157	  5159	  5164	  5166	  5250	  5251	  5357
	  5358	  5359	  5360	  5361	  5362	  5364	  5365	  5372	  5373	  5374	  5375	  5376	  5377	  5379
	  5380	  5387	  5388	  5389	  5390	  5391	  5398	  5410	  5414	  5416	  5425	  5430	  5463	  5464
	  5466	  5468	  5469	  5471	  5473	  5479	  5517	  5519	  5522	  5523	  5525	  5529	  5560	  5571
	  5572	  5583	  5586	  5595	  5607	  5608	  5618	  5621	  5622	  5625	  5626	  5629	  5630	  5632
	  5668	  5669	  5670	  5671	  5683	  5684	  5742	  5743	  5744	  5745	  5757	  5758	  5777	  5778
	  5779	  5780	  5814	  5815	  5816	  5817	  5819	  5821	  5822	  5823	  5855	  5857	  5858	  5861
	  5862	  5863	  5864	  5865	  5900	  5901	  5918	  5919	  5928	  5961	  5962	  5963	  5964	  5965
	  5978	  5979	  5980	  5981	  5990	  5992	  6036	  6041	  6042	  6045	  6046	  6054	  6055	  6058
	  6062	  6065	  6067	  6069	  6071	  6075	  6084	  6087	  6088	  6093	  6094	  6100	  6107	  6108
	  6109	  6110	  6111	  6112	  6113	  6114	  6115	  6131	  6132	  6133	  6134	  6135	  6136	  6137
	  6138	  6139	  6141	  6142	  6143	  6144	  6145	  6146	  6148	  6149	  6158	  6161	  6162	  6163
	  6164	  6165	  6166	  6167	  6168	  6169	  6171	  6172	  6173	  6174	  6175	  6176	  6177	  6178
	  6179	  6283	  6284	  6285	  6286	  6287	  6291	  6292	  6299	  6300	  6302	  6309	  6311	  6321
	  6322	  6324	  6325	  6332	  6333
T2	    37	    41	   196	   217	   218	   220	   235	   240	   241	   242	   262	   263	   265	   269
	   278	   279	   280	   374	   375	   376	   379	   381	   382	   384	   385	   415	   416	   417
	   428	   434	   435	   437	   438	   548	   549	   551	   570	   580	   581	   629	   658	   660
	   709	   710	   769	   770	   864	   907	   966	   977	   978	   983	   984	   987	   990	   992
	  1013	  1015	  1017	  1019	  1022	  1025	  1026	  1028	  1029	  1056	  1059	  1071	  1091	  1092
	  1094	  1101	  1102	  1103	  1104	  1184	  1185	  1448	  1449	  1451	  1453	  1457	  1458	  1460
	  1555	  1556	  1561	  1562	  1624	  1625	  1626	  1628	  1629	  1630	  1631	  1633	  1784	  1785
	  1790	  1791	  1886	  1887	  1892	  1893	  1972	  1974	  1975	  2000	  2020	  2047	  2048	  2075
	  2076	  2278	  2279	  2280	  2282	  2283	  2284	  2315	  2316	  2318	  2374	  2375	  2387	  2458
	  2459	  2490	  2491	  2492	  2541	  2544	  2550	  2551	  2552	  2556	  2557	  2558	  2563	  2570
	  2663	  2668	  2669	  2670	  2752	  2754	  2757	  2827	  2828	  2829	  2831	  2832	  2998	  3000
	  3071	  3180	  3181	  3191	  3197	  3332	  3346	  3347	  3349	  3356	  3360	  3362	  3366	  3378
	  3380	  3381	  3382	  3404	  3415	  3440	  3492	  3493	  3496	  3497	  3557	  3588	  3604	  3623
	  3628	  3630	  3633	  3747	  3748	  3751	  3765	  3766	  3844	  3845	  3914	  3915	  4097	  4098
	  4099	  4142	  4143	  4150	  4154	  4183	  4187	  4347	  4348	  4409	  4411	  4504	  4506	  4530
	  4534	  4537	  4567	  4568	  4573	  4574	  4575	  4579	  4580	  4642	  4645	  4656	  4695	  4696
	  4700	  4701	  4704	  4705	  4756	  4757	  4804	  4817	  4820	  4827	  5031	  5032	  5033	  5037
	  5039	  5044	  5046	  5158	  5159	  5165	  5166	  5399	  5411	  5415	  5424	  5429	  5431	  5507
	  5508	  5510	  5514	  5515	  5516	  5518	  5520	  5560	  5573	  5574	  5576	  5583	  5586	  5595
	  5609	  5610	  5612	  5618	  5621	  5622	  5625	  5626	  5633	  5673	  5847	  5848	  5852	  5856
	  5857	  5859	  5860	  5861	  5867	  5882	  5902	  5903	  5904	  5905	  5906	  5925	  5927	  5931
	  5966	  5967	  5974	  5979	  5981	  5984	  5993	  5994	  6005	  6007	  6008	  6010	  6011	  6012
	  6037	  6063	  6064	  6066	  6067	  6074	  6075	  6077	  6078	  6099	  6280	  6317
T3	    40	    41	   239	   240	   274	   275	   277	   405	   406	   407	   421	   422	   423	   424
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

	   426	   715	   719	   727	   728	   730	   741	   776	   790	   796	   798	   802	   835	   839	  1014
	  1015	  1016	  1018	  1021	  1030	  1683	  1684	  1806	  1807	  1887	  1894	  2542	  2544	  2594
	  2595	  2597	  2602	  2603	  2610	  2614	  2616	  2617	  2618	  2624	  2662	  2664	  2667	  2753
	  2755	  2789	  2790	  2855	  2857	  3070	  3071	  3556	  3564	  3565	  3567	  3568	  3598	  3605
	  3606	  3618	  3634	  3636	  3750	  4145	  4214	  4221	  4365	  4366	  4373	  4374	  4375	  4376
	  4501	  4508	  4518	  4520	  4535	  4537	  4816	  4818	  5030	  5032	  5033	  5036	  5038	  5039
	  5400	  5401	  5411	  5425	  5555	  5556	  5557	  5559	  5565	  5566	  5567	  5569	  5578	  5579
	  5580	  5582	  5591	  5592	  5594	  5602	  5603	  5605	  5614	  5615	  5617	  5655	  5659	  5663
	  5664	  5672	  5678	  5685	  5691	  5700	  5923	  5924	  5967	  5970	  5972	  5973	  5994	  6000
	  6001	  6002	  6003	  6004	  6014	  6038	  6078	  6080	  6085	  6089	  6098	  6282	  6287	  6315
T4	   334	   399	   404	   407	   525	   526	   789	   793	   921	  1010	  1018	  1019	  1021	  1022
	  1030	  1042	  1043	  1044	  1045	  1137	  1164	  1305	  1351	  1364	  1430	  1519	  1543	  1596
	  1597	  1617	  1618	  1620	  1622	  1623	  1649	  1688	  1709	  1766	  1798	  1858	  1873	  1933
	  2002	  2094	  2187	  2311	  2325	  2370	  2379	  2537	  2540	  2542	  2546	  2553	  2557	  2569
	  2570	  2609	  2623	  2642	  2643	  2654	  2666	  2788	  2790	  2791	  2816	  2854	  2858	  2906
	  2907	  3125	  3212	  3586	  3589	  3621	  3624	  3717	  3718	  3722	  3724	  4089	  4193	  4397
	  4502	  4509	  4519	  4521	  4615	  4619	  4645	  4646	  4647	  4648	  4651	  4652	  4658	  4665
	  4717	  4718	  4721	  4724	  4725	  4726	  4738	  4765	  4766	  4767	  4768	  4771	  4772	  4773
	  4805	  4806	  4807	  4809	  4811	  4818	  4819	  5156	  5160	  5163	  5167	  5352	  5355	  5357
	  5363	  5368	  5371	  5372	  5378	  5391	  5476	  5534	  5540	  5560	  5583	  5586	  5589	  5590
	  5595	  5598	  5599	  5611	  5613	  5618	  5621	  5622	  5625	  5626	  5634	  5655	  5656	  5659
	  5660	  5663	  5664	  5665	  5671	  5680	  5686	  5690	  5693	  5699	  5836	  5837	  5849	  5919
	  5920	  5921	  5922	  5924	  5925	  5927	  5929	  5930	  5960	  5969	  5974	  5975	  5982	  5983
	  5984	  5985	  5995	  6006	  6007	  6039	  6056	  6057	  6097	  6123	  6124	  6125	  6126	  6127
	  6278	  6314	  6318
TAKTRP	    82%	  3058	  3097	  3245
TBLPTR	    40	    61#
TBLSIZ	    38	    55#
THSDAT	   971%	  1043
TIMADJ	   142%	   186	   623	   632	  1502	  3112
TIMEF	   112%	   449
TOTACT	    69%	  4420	  4495
TPOPJ	   117%	   304	  2123
TPOPJ1	   117%	  1692
TSTKTP	    82%	  3056	  3095	  3243
TSTMWS	  2744	  3832	  3879	  3897	  3962	  3982	  5626#
TSTUWS	  1368	  1525	  3074	  3789	  3933	  5622#
TSTVIR	  3667#	  4293	  4305
TSXMWS	  3992	  5625#
TSXUWS	  1779	  3798	  5621#
U	    38	    39	    42	  1514	  1535	  1596	  1898	  1899	  1908	  2041	  2042	  2046	  2051	  2066
	  2069	  2071	  2073	  2875	  2893	  4192	  4196	  4390	  4400	  5672	  5673	  5678	  5681	  5683
	  5687	  5689	  5692	  5698
UCREAT	   334#
UFDERR	   497%	   966
UFPERR	   497%	   965
UFRCHK	   478%	   952
ULDUPX	  2124	  2698	  2779#	  3373	  3412	  3448
ULDUX1	  2781	  2786#
ULKNME	  2599#
UNINAM	  1071%	  1071
UNIUPT	  2591#
UNTTBL	  1070%	  1070
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

UNWUPT	  2122	  2594#	  2693	  3042
UNWUPX	  2595#	  2782
UP4LDA	   101%	  4573	  5037
UPDADS	   497%	   840
UPDERS	   669	   717	   788	   814	   842	   845	   907#
UPERBT	   690	   830	   975#
UPERUF	   759	   946#
UPESET	  2311#
UPESTS	  2274#
UPFSTE	  2277	  2287#
UPFSTS	  2275#
UPGSTS	  1709#
UPISTS	  2270#
UPPSTS	  2271	  2273	  2276#
UPRBT0	  1011#	  1051
UPRBT1	   991#	  1060
UPRBT2	  1012	  1041#
UPRBT3	  1020	  1027	  1050#
UPRERF	  1351#
UPROT	  2093#
UPROT1	  2097	  2114#
UPROT2	  2105	  2113#
UPROT3	  2112	  2116#
UPRSTS	  2272#
UPSJOB	  4802	  4822	  4830#	  5738
UPSSWE	  3475%	  3484
UPTACP	   299%	   305	   315
UPTAGE	    87%	  6279
UPTELD	    87%	  5575	  5613	  6310	  6324
UPTHRL	   142%	   220	   226
UPTJOB	  2104	  2521%	  2523	  2525	  2527	  2541	  2591	  2598	  2645	  2646	  2727	  2732	  2743	  2763
	  2779	  2783	  2786	  2811%	  2817	  2818	  2821	  2878	  3327
UPTLDC	    92%	   594	  1193	  1255	  1900	  1924	  2019	  2198	  2216	  2385	  3032	  3284	  3389	  4884
	  4897	  4910	  4962	  4976	  4990
UPTLKC	   499%	  2569	  2602	  2618	  2692	  2697
UPTLKJ	   499%	  2521%	  2524	  2542	  2570	  2592	  2597	  2603	  2617	  2689	  2694	  2780	  2784
UPTLKW	  2521%	  2546	  2553	  2557	  2610	  2614	  2616
UPTLMA	  4882%	  4882	  4885%	  4885	  4895%	  4895	  4898%	  4898	  4908%	  4908	  4911%	  4911	  4964%	  4964
	  4978%	  4978	  4992%	  4992
UPTMAT	    87%	  3841	  3911	  5577	  5611	  6312
UPTMWB	    86%	  5583	  5618	  5625	  5626	  5663	  5664	  6306
UPTNTV	   104%	  6333
UPTOFD	  2082%	  2098	  2494
UPTREL	   142%	   196	   202
UPTRPT	    92%	  3729	  3757	  4110	  4164
UPTSTS	   144%	   217	  3475%	  3485
UPTUEI	    86%	  2274	  3252	  3254
UPTUFI	    86%	  2275	  3101
UPTUII	    93%	  2270
UPTURI	    93%	  2272	  3062
UPTUWB	    86%	  1491	  5560	  5595	  5621	  5622	  5659
UPTXEI	    86%	  3237	  3257
UPTXFI	    86%	  3109
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

UPTXII	    93%
UPTXRI	    93%	  3064
UPXRM1	  2883#	  2889
UPXRMN	  2885	  2889#
UPXRMV	  2820	  2847	  2874#
UPYPTM	  2812%	  2855
UPYPXM	  2662	  2812%	  2854
UPYUWL	    92%	  1512	  1560	  1575	  3084	  3723	  3765
UPYUWM	    92%	  1555	  1581
URFBIT	  1933#
USE.N	  5309#	  5476
USELST	  5309#
USEMAX	   120%	  5464	  5466	  5508	  5510
USEPGY	  6125	  6151#
USRAUW	  3120	  3123	  3127	  3134#
USRBWR	  3276	  3284#
USRCO1	  3367	  3370#
USRCOW	  3277	  3317#
USRCWR	  3073	  3135	  3204	  3270#
USRFL1	  3075	  3083#
USRFL2	  3090	  3093#
USRFL3	  3096	  3100#
USRFL4	  3093	  3098	  3100	  3109#
USRFL5	  3110	  3114#
USRFL6	  3113	  3117#
USRFLT	  3028#	  3528
USRI5A	  3244	  3248#
USRI5B	  3240	  3242	  3246	  3251	  3257#
USRI5C	  3248	  3254#
USRI5D	  3207	  3210	  3219#
USRIU2	  3156#
USRIU3	  3160	  3176#
USRIU5	  3157	  3161	  3168	  3172	  3177	  3205#
USRIU6	  3178	  3182#
USRIU7	  3221	  3238	  3264#
USRIUW	  3067	  3076	  3130#
USRMAX	    78%
USRRB1	  3057	  3060#
USRRB2	  3055	  3059	  3060	  3064#
USRRBO	  3051	  3066#
USRRD0	  3293#	  3321
USRRDW	  3278	  3302#
USYPTN	  2812%	  4816
UTRP	  3486
UUYCPR	   368%	   374	  2168
UUYCTG	   368%	   381	  2172
UVALID	  1137#
UVDSKP	  2370#
UWSCTL	  1430#
UWSRP1	  3727#	  3767
UWSRP2	  3731#	  3734
UWSRP3	  3739	  3742#
UWSRP4	  3741	  3745#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

UWSRP5	  3743	  3757#
UWSRPL	  1563	  3115	  3717#
VALD0A	  1170	  1173	  1176#
VALD2A	  1185	  1193#
VALD3A	  1207	  1211#
VALD4A	  1163	  1217#
VALID	   539	   878	  1145#
VALID0	  1157#	  1219
VALID1	  1177#	  1200
VALID3	  1189	  1202#
VALID4	  1175	  1179	  1183	  1191	  1214#
VALID5	  1239#	  1270
VALID6	  1241	  1244	  1247#
VALID7	  1246	  1248	  1251	  1253	  1267#
VALID8	  1270#
VCREA1	   392#	   451
VCREA2	   402	   409#
VCREA3	   418	   435#
VCRECT	   448	   454#
VDBVP%	  2364#
VDEBVP	  2364#	  2380
VDENEL	  2368#	  2376
VDENVP	  2367#	  2383
VDNEL%	  2368#
VDNVP%	  2367#
VL.CNT	  1126#
VL.OTF	  1123#
VL.VPP	  1125#	  1172	  1243
VL.WAT	   575	   576	  1124#	  1221
VLBCN%	  1129#
VLBVP%	  1130#
VLEBCN	  1129#	  1151
VLEBVP	  1130#	  1165
VLEIOE	  1134#	  1203	  1215	  1268
VLENVP	  1133#	  1168
VLEOFF	  1135#
VLIOE%	   549	   581	  1134#
VLNVP%	   551	   570	   629	  1133#
VLOFF%	  1135#	  1141
VPCHK	   399	  1164	  1364	  1519	  1543	  1766	  1873	  2002	  2187	  2325	  2379	  2902#
VPFBVP	  1845#	  1874
VPFNEX	  1848#	  1877
VPFNFP	  1850#	  1926
VPGFIL	  1854#
VPGS2A	  1794	  1796	  1804#
VPGST2	  1775	  1779#
VPGST3	  1806#
VPGSTS	  1762#
VPGSX	  1772	  1805	  1810#
VPMAX	  1161	  3531	  4286	  4417	  4444	  4477	  4887	  4900	  4913	  4966	  4980	  4994	  5656	  5665
	  5708
VPROT1	  2177#	  2213
VPROT3	  2200	  2213#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

VPROT4	  2205	  2216#
VPROT5	  2197	  2202#
VPUMAX	    86%	   590	   593	   611	   848	  1160	  2904	  3527	  5630
VRACNT	    69%	  4310
VRFBIT	  1963#
VUOOUT	   497%	   635
W	   278	   398	   401	   444	   518	   526	   528	   532	   538	   541	   545	   555	   556	   557
	   558	   561	   567	   572	   590	   593	   605	   611	   617	   847	   875	   883	  1155	  1159
	  1219	  1238	  1270	  1363	  1366	  1386	  1387	  1388	  1439	  1505	  1506	  1507	  1508	  1514
	  1522	  1539	  1550	  1597	  1665	  1762	  1857	  1995	  1999	  2005	  2043	  2048	  2052	  2067
	  2078	  2167	  2175	  2213	  2276	  2316	  2317	  2321	  2327	  2330	  2378	  2444	  2445	  2726
	  2734	  2736	  2737	  2738	  2746	  2751	  2755	  2758	  2760	  2823	  2831	  2838	  2856	  2860
	  2881	  2889	  2905	  2914	  2916	  2917	  2918	  2921	  2922	  2923	  3015	  3066	  3068	  3086
	  3184	  3234	  3239	  3324	  3332	  3377	  3380	  3382	  3418	  3419	  3421	  3451	  3526	  3527
	  3530	  3531	  3536	  3719	  3729	  3730	  3733	  3740	  3742	  3745	  3752	  3757	  3759	  3770
	  3835	  3906	  4023	  4031	  4110	  4111	  4119	  4122	  4126	  4129	  4134	  4140	  4151	  4163
	  4164	  4284	  4387	  4403	  4413	  4443	  4476	  4506	  4525	  4530	  4532	  4541	  4542	  4882
	  4885	  4886	  4895	  4898	  4899	  4908	  4911	  4912	  4964	  4965	  4978	  4979	  4992	  4993
	  5563	  5571	  5600	  5607	  5629	  5667	  5668	  5674	  5680	  5684	  5737	  5750	  6274	  6277
	  6288	  6304	  6319	  6334
WAIT1	  3543%
WENUPX	  2536	  2643#
WLKUP1	  2547	  2556#
WLKUP2	  2543	  2545	  2569#
WLKUPN	  2538	  2541#
WLKUPT	  2114	  2540#	  3036
WLKUPX	  2523#	  3328
WLKUWT	  2554	  2562#
WLKUX0	  2526	  2534#
WPOPJ	  2731	  2760#	  2766
WPOPJ1	  2733	  2759#
WPRUPX	  2642#
WPRUX1	  2662#
WPRUX2	  2664#	  2671
WRTCHP	   117%	  1218
WS.ADD	  1407#	  1509
WSATM%	  1427#
WSBCN%	  1420#
WSBFN%	  1425#
WSBVP%	  1421#
WSCHED	   110%	   450	  2521%	  2565	  3519	  5825
WSCTL	  1438#
WSCTL1	  1450	  1454#
WSDSP	  1457	  1458	  1466#	  1470
WSEATM	  1427#	  1518
WSEBCN	  1420#	  1506
WSEBFN	  1425#	  1445	  1447
WSEBVP	  1421#	  1521	  1544
WSELOM	  1428#	  1557
WSELUS	  1429#	  1559
WSENVP	  1424#	  1524
WSERTM	  1426#	  1487
WSLOM%	  1428#
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

WSLUS%	  1429#
WSMAP	  1449	  1479#
WSNVP%	  1424#
WSRA1A	  1531	  1537#
WSRAD1	  1515#	  1539
WSRAD2	  1527	  1539#
WSRDLM	  1468	  1575#
WSRDMX	  1468	  1581#
WSRDSZ	  1467	  1569#
WSREM1	  1547	  1550#
WSREMV	  1510	  1543#	  1550
WSRNGE	  1466	  1502#
WSRTM%	  1426#
WSTCHG	  1517	  1520	  1523	  1540	  1594#
ZERS	  5921	  5934#	  5946
ZNMTAB	  5937#	  5946
ZZ	   204#	   204	   228#	   228	   244#	   244	   364#	  1131#	  1132#	  1325#	  1327#	  1328#	  1388#	  1388
	  1422#	  1423#	  1482#	  1482	  1494#	  1494	  1504#	  1504	  1554#	  1554	  1570#	  1570	  1576#	  1576
	  1582#	  1582	  1690#	  1690	  1757#	  1813#	  1813	  1844#	  1846#	  1847#	  1849#	  1857#	  1857	  1906#
	  1906	  1908#	  1908	  1910#	  1910	  1912#	  1912	  1914#	  1914	  1916#	  1916	  1918#	  1918	  1959#
	  1960#	  1961#	  1991#	  1991	  2039#	  2039	  2046#	  2046	  2051#	  2051	  2064#	  2064	  2073#	  2073
	  2154#	  2157#	  2280#	  2280	  2284#	  2284	  2288#	  2288	  2307#	  2308#	  2363#	  2365#	  2366#	  2387#
	  2387	  2418#	  2418	  2423#	  2423	  2424#	  2424	  2446#	  2446	  2459#	  2459	  2466#	  2466	  2471#
	  2471	  2495#	  2495	  2922#	  2922	  3196#	  3196	  3197#	  3197	  3360#	  3360	  5304#	  5307	  5307#
	  5308	  5308#	  5309	  5309#	  5310	  5310#	  5311	  5311#	  5312	  5312#	  5705#	  5712	  5713	  5713#
	  5714	  5714#	  5715	  5715#	  5716	  5716#	  5717	  5717#	  5718	  5718#	  5719	  5719#	  5720	  5720#
	  5721	  5721#	  5722	  5722#	  5723	  5723#	  5724	  5724#	  5725	  5725#	  5726	  5726#	  5727	  5727#
ZZ1	   204#	   204	   228#	   228	   244#	   244	  1388#	  1388	  1482#	  1482	  1494#	  1494	  1504#	  1504
	  1554#	  1554	  1570#	  1570	  1576#	  1576	  1582#	  1582	  1690#	  1690	  1813#	  1813	  1857#	  1857
	  1906#	  1906	  1908#	  1908	  1910#	  1910	  1912#	  1912	  1914#	  1914	  1916#	  1916	  1918#	  1918
	  1991#	  1991	  2039#	  2039	  2046#	  2046	  2051#	  2051	  2064#	  2064	  2073#	  2073	  2280#	  2280
	  2284#	  2284	  2288#	  2288	  2387#	  2387	  2418#	  2418	  2423#	  2423	  2424#	  2424	  2446#	  2446
	  2459#	  2459	  2466#	  2466	  2471#	  2471	  2495#	  2495	  2922#	  2922	  3196#	  3196	  3197#	  3197
	  3360#	  3360
%COW	    90%	  3355
%COW.N	    90%	  3331	  3345	  3347	  3363	  3370	  3396	  3404	  3408	  3440	  3444
%CTBYP	  3543%	  3576	  3591	  3635
%CTSTS	  3543%	  3556
%CTUPT	  3543%	  3557
%ONC.N	    61
%OND.N	    62
%RB2	   993	  1033	  1034
%RB2.C	    90%	   985	  1036	  3534	  3543%
%RB2.N	  3536
%REF.N	    63
%RIB	   747	   749	   752	   956	   966	   991	  1009	  1011	  1014	  1031	  1032	  1033	  1042	  1045
	  1046	  1063	  1083	  1092	  1093	  1098	  1107
%RIB.C	    86%	   979	  3535	  3543%
%RUTB	  1972	  1977#	  1979
%SAT	   727	   728	   730	   741	   796	   798	   802	   835	   839
%SAT.C	    86%	  3536	  3543%
%UPLMA	    90%	  1522	  2048	  2321	  2327	  2724%	  2736	  2755	  2790	  2813%	  3345	  3347	  3349	  3363
	  3380	  3382	  3396	  3419	  3421	  6288
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Symbol cross reference

%UPLMS	    90%	  4532	  4541
%UPLMX	   499%	   526	   567
%UPS	    90%	  4812	  4824	  4895	  4897	  4898	  4904	  4906	  4976	  4978	  4984	  4987	  5664
%UPS.N	    90%
%UPT	    90%	   196	   202	   217	   220	   226	   305	   315	   594	  1193	  1255	  1491	  1900	  1924
	  2019	  2098	  2104	  2198	  2216	  2270	  2272	  2274	  2275	  2385	  2494	  2523	  2540	  2541
	  2591	  2592	  2594	  2598	  2624	  2646	  2689	  2692	  2732	  2743	  2763	  2779	  2783	  2811%
	  2818	  2821	  2878	  3032	  3062	  3064	  3101	  3109	  3237	  3252	  3254	  3257	  3284	  3327
	  3389	  3485	  3729	  3757	  3841	  3911	  4110	  4164	  4882	  4884	  4885	  4891	  4893	  4910
	  4962	  4964	  4970	  4973	  4990	  5560	  5575	  5577	  5583	  5590	  5599	  5622	  5626	  5659
	  5663	  6279	  6306	  6310	  6312	  6324	  6333
%UPT.N	    91%	  2811%
%UPX	  2521%	  2524	  2525	  2527	  2537	  2595	  2645	  2668	  2694	  2697	  2727	  2752	  2780	  2784
	  2786	  2817	  4908	  4911	  4917	  4919	  4992	  4998	  5001	  5589	  5598	  5621	  5625
%UPX.N	  2640%	  2653	  2654	  2724%	  2734	  2738	  2751	  2788	  2811%	  2823	  2831	  2856	  2881
..0001	  4890	  4893#
..0002	  4903	  4906#
..0003	  4916	  4919#
..0004	  4969	  4973#
..0005	  4983	  4987#
..0006	  4997	  5001#
.ARCHM	   335	  1138	  2106
.ARRDM	  1710
.ARVAR	  1352
.FDOTF	  2492
.MRADJ	  4003#	  6328
.MRFDA	  4002#	  4026
.MRFNA	  4001#	  4027	  4152	  4171
.PFUWD	  2230#	  2279
.PFXWD	  2231#	  2283
.RFRBM	  1948#
.RFRNG	  1952#
.RFSBM	  1950#
.WSBTM	  1404#
.WSRBM	  1403#
.WSRLM	  1414#
.WSRMX	  1416#
.WSRNG	  1406#	  1479
.WSRSZ	  1412#
.WSSTL	  1409#	  1479
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Macro/Opdef cross reference

CHARGE	  3494
CHGSTS	  2998
CLRPT	  2668	  2917	  2922	  4812	  4824
CLRPTA	    44
CLRPTO	  2668	  2917	  4812	  4824
CLRPTW	  2859	  3593	  4971	  4974	  4985	  4988	  4999	  5002
DSKOFF	  3546#	  3574	  3638
DSKON	  3547#	  3579	  3608	  3627	  3642
EPTPGP	    61	    62	    63
EPTPGS	    61	    62	    63
ERRCOD	    22#	   360	   361	   362	   363	   364	   365	   366	   367	  1129	  1130	  1131	  1132	  1133
	  1134	  1135	  1325	  1326	  1327	  1328	  1329	  1330	  1331	  1420	  1421	  1422	  1423	  1424
	  1425	  1426	  1427	  1428	  1429	  1757	  1758	  1759	  1844	  1845	  1846	  1847	  1848	  1849
	  1850	  1957	  1958	  1959	  1960	  1961	  1962	  2151	  2152	  2153	  2154	  2155	  2156	  2157
	  2158	  2267	  2305	  2306	  2307	  2308	  2309	  2363	  2364	  2365	  2366	  2367	  2368	  2408
	  2410	  2411	  2979	  2980	  2981	  2982	  2983	  2984	  2985	  2986	  2987
FDEERP	   339	  1142	  1357	  1714	  2102	  2110
GETLM	  4857#	  4882	  4895	  4908
IFCPU	   119	  3001
IFNCPU	   305	   315	  2909	  3014
LSTCHK	    32#	   245	  3491
NOCHAR	   370	  1145	  1438	  2999
NXTLST	  5299#	  5307	  5308	  5309	  5310	  5311	  5312
PFALL	  3537
PGFERR	  2991#	  3048	  3142	  3253	  3260	  3287	  3391	  3452	  3506	  3507	  3532
PJRST	   268	   282	   865	   870	   964	   967	  1038	  1085	  1222	  1271	  1564	  1598	  1692	  2188
	  2194	  2218	  2538	  2565	  2698	  2844	  2895	  3478	  3520	  3595	  3793	  3966	  3989	  3996
	  4034	  4247	  4456	  4577	  4582	  4739	  5092	  5095	  5137	  5477	  5536	  5542	  5825
PJUMPN	  1314
PRINTF	   238	   414	   676	  1897
PXCT	   204	   228	   244	  1388	  1482	  1494	  1504	  1554	  1570	  1576	  1582	  1690	  1813	  1857
	  1906	  1908	  1910	  1912	  1914	  1916	  1918	  1991	  2039	  2046	  2051	  2064	  2073	  2280
	  2284	  2288	  2387	  2418	  2423	  2424	  2446	  2459	  2466	  2471	  2495	  2922	  3196	  3197
	  3360
PXGEN	   204	   228	   244	  1388	  1482	  1494	  1504	  1554	  1570	  1576	  1582	  1690	  1813	  1857
	  1906	  1908	  1910	  1912	  1914	  1916	  1918	  1991	  2039	  2046	  2051	  2064	  2073	  2280
	  2284	  2288	  2387	  2418	  2423	  2424	  2446	  2459	  2466	  2471	  2495	  2922	  3196	  3197
	  3360
RDPI	  6041
STOLM	  4935#	  4962	  4976	  4990
STOPCD	    10	   425	   552	   582	   799	   836	  1035	  1194	  1209	  1256	  1901	  1925	  2115	  2199
	  2217	  2386	  2475	  2532	  2599	  2657	  2765	  3030	  3033	  3037	  3280	  3285	  3303	  3329
	  3334	  3339	  3372	  3390	  3400	  3406	  3410	  3431	  3436	  3442	  3446	  3558	  3570	  3760
	  4245	  4287	  4312	  4328	  4330	  4392	  4394	  4418	  4445	  4452	  4478	  4493	  4528	  4609
	  4643	  4697	  4703	  4709	  4714	  4762	  4808	  4888	  4901	  4914	  4963	  4967	  4977	  4981
	  4991	  4995	  5025	  5047	  5068	  5110	  5151	  5161	  5168	  5199	  5207	  5212	  5233	  5353
	  5369	  5402	  5465	  5482	  5511	  5521	  5558	  5568	  5581	  5593	  5604	  5616	  5631	  5811
	  5926	  5932	  6009	  6048	  6059	  6068	  6076	  6079	  6086	  6296
TBLS	    48#	    55	    61
UHRRZ	  1857
UMOVE	  1482	  1504	  1554	  1991	  2039	  2064	  2423	  2424	  2471
UMOVEM	   244	  1388	  1570	  1576	  1582	  1690	  1813	  1906	  1908	  1910	  1912	  1916	  2280	  2284
	  2288	  2387	  2495
CORE1 - LOGICAL AND PHYSICAL CORE ALLOCATION ROUTINES	MACRO 12.5-46.0 14:32 13-JAN-88
CORE1.MAC	28-OCT-87 17:05		Macro/Opdef cross reference

UXCTBU	   227
UXCTTU	   203
VPROT	  2656
WRPI	  2472	  2477	  3574	  3579	  3608	  3627	  3638	  3642	  5813	  5817	  5824	  6050	  6095
WRUBR	   307	   315
X	    53#	    55	    56	    57	    60#	    61	    62	    63
XCTBU	   228	  1857	  1914	  1918	  2046	  2051	  2073	  2466	  2922	  3195	  3197
XCTFU	  1482	  1504	  1554	  1991	  2039	  2064	  2423	  2424	  2446	  2459	  2471
XCTTU	   204	   244	  1388	  1494	  1570	  1576	  1582	  1690	  1813	  1906	  1908	  1910	  1912	  1916
	  2280	  2284	  2288	  2387	  2418	  2495	  3359
XP	    28	   360	   361	   362	   363	   364	   365	   366	   367	  1123	  1124	  1125	  1126	  1129
	  1130	  1131	  1132	  1133	  1134	  1135	  1325	  1326	  1327	  1328	  1329	  1330	  1331	  1403
	  1404	  1406	  1407	  1409	  1412	  1414	  1416	  1420	  1421	  1422	  1423	  1424	  1425	  1426
	  1427	  1428	  1429	  1736	  1737	  1738	  1739	  1740	  1741	  1742	  1743	  1744	  1745	  1747
	  1749	  1751	  1757	  1758	  1759	  1844	  1845	  1846	  1847	  1848	  1849	  1850	  1948	  1950
	  1952	  1953	  1957	  1958	  1959	  1960	  1961	  1962	  2146	  2147	  2151	  2152	  2153	  2154
	  2155	  2156	  2157	  2158	  2230	  2231	  2246	  2247	  2251	  2252	  2253	  2254	  2255	  2263
	  2267	  2300	  2305	  2306	  2307	  2308	  2309	  2363	  2364	  2365	  2366	  2367	  2368	  2408
	  2410	  2411	  2979	  2980	  2981	  2982	  2983	  2984	  2985	  2986	  2987	  5307	  5308	  5309
	  5310	  5311	  5312
$END	  6341 N ]