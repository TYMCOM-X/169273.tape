CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 1
S.MAC	13-JAN-88 11:55		S.MAC - with system parameter file for P035/D, January 1988

     1				SUBTTL	S.MAC - with system parameter file for P035/D, January 1988
     2
     3				IF2,<IFNDEF LISTSN,<TAPE>>	;Skip to PASS2 in all but COMMON.LST
     4				;THIS MODULE ASSEMBLED WITH KL-10 PARAMETER FILE - KLSYM.MAC
     5
     6					IF2,<IFNDEF LISTSN,<		;LIST KLSYM.MAC IN COMMON ONLY
     7								TAPE>>
     8				TITLE CPXKON - Kontroller routine for IBM disks on an SA-10 channel
     9				;Created by Joe Smith from BPXKON as part of the 3650 project, November 1985.
    10
    11					STOPCD(,ENTRY,CPXKON)^
    12					ENTRY	CPXKON		;For library searches
    13	000000'	260040	000000*	CPXKON::PUSHJ	P,DIE		;**** Default stopcode for "CPXKON" ****
    14	000001'	436070	535756		SIXBIT	/CPXKON/  	;Title of module
    15	000002'	000000	000000		S$NONAME,,0		;?NONAME stopcode "CPXKON+nnn(nnnnnn)"
    16			000000'	S$NAME==CPXKON			;For STOPCDs with no arguments
    17					SALL>
    18				^
    19			000000		ND	FTDPAG,0	;Use UNIBLK instead of UNIPAG
    20
    21				;The KL invokes the CSHUNL macro to unload the cache so that the SA10 can
    22				;read the correct data from core memory.  There are no other CPU dependencies.
    23
    24				;         Table of Contents for CPXKON (modified BPXKON)
    25				;
    26				;
    27				;			   Section			      Page
    28				;
    29				;    1. List of entry points . . . . . . . . . . . . . . . . .   2
    30				;    2. SA10/DISK
    31				;         2.1   Status bits  . . . . . . . . . . . . . . . . .   3
    32				;         2.2   CONI bits  . . . . . . . . . . . . . . . . . .   3
    33				;         2.3   Channel commands . . . . . . . . . . . . . . .   4
    34				;    3. BPXINT
    35				;         3.1   Interrupt handler  . . . . . . . . . . . . . .   5
    36				;         3.2   Dismiss interrupt  . . . . . . . . . . . . . .   5
    37				;         3.3   Read buffered log  . . . . . . . . . . . . . .   6
    38				;         3.4   Start unit . . . . . . . . . . . . . . . . . .   6
    39				;         3.5   Control-Unit end . . . . . . . . . . . . . . .   7
    40				;         3.6   Handle position done interrupt . . . . . . . .   7
    41				;         3.7   Decode error sense bytes . . . . . . . . . . .   7
    42				;         3.8   Data check . . . . . . . . . . . . . . . . . .   7
    43				;         3.9   Data tranfer interrupt . . . . . . . . . . . .   9
    44				;         3.10  SA-10 detected error (NXM, Parity, etc)  . . .  11
    45				;    4. READ/WRITE
    46				;         4.1   Description  . . . . . . . . . . . . . . . . .  12
    47				;         4.2   BPXRED - set up for reading  . . . . . . . . .  13
    48				;         4.3   BPXWRT - set up for writing  . . . . . . . . .  13
    49				;         4.4   BPXSSO - Set up search address . . . . . . . .  14
    50				;         4.5   BPXSSC - Set up a SEEK command . . . . . . . .  14
    51				;         4.6   BPXSSR - Set up a search ID= & TIC . . . . . .  15
    52				;         4.7   BPXSDA - Set device address  . . . . . . . . .  15
    53				;    5. BPXADD
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 1
CPXKON.MAC	20-SEP-87 12:59		S.MAC - with system parameter file for P035/D, January 1988

    54				;         5.1   Add a page to the request list.  . . . . . . .  16
    55				;         5.2   BPXA0/BPXA1/BPXA4 - Add to channel command l .  17
    56				;         5.3   TRNCNT - Truncate count on track boundry . . .  17
    57				;         5.4   SETCMD - Set up new SEARCH, TIC, and READ/WR .  18
    58				;         5.5   SETXFR - Set up transfer commands  . . . . . .  18
    59				;    6. BPXFIN - Finish up the command list  . . . . . . . . .  19
    60				;    7. STRTUP - Start up the disk unit  . . . . . . . . . . .  19
    61				;    8. BPXPOS - Position request  . . . . . . . . . . . . . .  19
    62				;    9. BPXSTP - Stop disk unit if HUNG TIMER goes off . . . .  19
    63				;   10. BPXUPA - Skip return if Kontroller is up . . . . . . .  19
    64				;   11. BPXCPY - Determine capacity and status of unit . . . .  20
    65				;   12. BPXHRD - Nothing special for hard errors . . . . . . .  20
    66				;   13. BPXSFT - Nothing special for soft errors . . . . . . .  20
    67				;   14. BPXOFS - Nothing special for offset recovery . . . . .  20
    68				;   15. Capacity test data for 3330 or 3350  . . . . . . . . .  21
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 2
CPXKON.MAC	20-SEP-87 12:59		List of entry points

    69				SUBTTL	List of entry points
    70
    71				COMMENT ~
    72				  ;Routines for ONCDSK
    73				BPXCPY - Capacity test
    74				BPXUPA - Skip return if Kontroller is up
    75				  ;Routines for I/O
    76				BPXRED - Prepare for reading (BPXADD may by called several times before BPXFIN)
    77				BPXWRT - Prepare for writing    "       "       "       "       "       "
    78				BPXADD - Specifies next physical core address to be read/written
    79				BPXFIN - End of request, start unit specified to BPXRED/BPXWRT
    80				  ;Routines to select best unit
    81				BPXPOS - Position to cylinder
    82				BPXLTM - Instead of returning latency time, this routine reads buffered log
    83				BPXSTP - Stop and restart hung device
    84				  ;Interrupt level routine
    85				BPXINT - Interrupt routine - calls FILINT when done
    86				  ;Error recovery
    87				BPXHRD - Capture status of hard errors
    88				BPXSFT - Capture status of soft errors
    89				BPXOFS - Do track-offset adjustment
    90				BPXRCL - Recalibrate by movings heads to cylinder 0
    91				~  ;End COMMENT
    92
    93
    94				;GENERAL FILSER EXTERNALS
    95
    96					EXTERNAL KCMDTA,KCMERR,KCMOFL,KCMRER,KCMPOS,%OFLER,%OFLFM
    97
    98				;ENTERNALS IN KONTROLER DATA BLOCK AND DEV DEPENDENT KON DATA
    99
   100					EXTERNAL BPXCUB
   101					EXTERNAL KONBMX,KONBSU,KONPTR,KONCHN,KONCPY
   102
   103				;CHANNEL EXTERNALS
   104					EXTERNAL CHNGO,CHNSTB,CHNCLR,CHNBMX,CHNIIE,CHNACT,CHNMER
   105
   106				;UNIT EXTERNALS
   107					EXTERNAL UNICOM,UNPDEV,UNICYL,UNYBPY,UNYPPY,UNYBPT,UNYPPT,UNICHR
   108				IFE FTDPAG,<EXTERN UNIBLK>		;Old name for UNIPAG
   109				IFN FTDPAG,<EXTERN UNIPAG>		;Formerly UNIBLK
   110					EXTERNAL UNYPUN,UNIPPU,UNYUTP,UNISWC,UNIACT,UNIONC
   111					EXTERNAL UNICNA,UNICNC,UNICCC,UNIRCT
   112					EXTERNAL UNISNS,UNISND,UNISNC,UNISVC,UNISCM
   113
   114				;IN COMMON FOR PAGE DATA (WHEN FIXING ERRORS)
   115					EXTERNAL EPT.PN,EPT,CURUPT
   116
   117				;GENERAL EXTERNALS
   118					EXTERNAL CPOPJ,CPOPJ1
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 3
CPXKON.MAC	20-SEP-87 12:59		SA10/DISK -- Fake CONI bits (reported to FILIO)

   119				SUBTTL	SA10/DISK -- Fake CONI bits (reported to FILIO)
   120
   121			000040	ERRCMR== 1B30	;COMMAND REJECT
   122			000100	ERRBOP== 1B29	;BUS OUT PARITY
   123			000200	ERRBIP== 1B28	;BUS IN PARITY
   124			000400	ERRPRT== 1B27	;PROTECTION (SET FILE MASK) FAILURE
   125			001000	ERRUNK== 1B26	;UNKNOWN ERROR (NO BITS CHECK BUT UNIT CHECK)
   126			002000	ERROVR== 1B25	;OVERRUN
   127			004000	ERRNXM== 1B24	;NXM
   128			010000	ERRPAR== 1B23	;PARITY ERROR
   129			020000	ERRSRC== 1B22	;SEARCH ERROR (NO RECORD FOUND)
   130			040000	ERRINV== 1B21	;INVALID TRACK FORMAT
   131			100000	ERRRCV== 1B20	;RECOVERABLE DATA CHECK
   132			200000	ERRDTA== 1B19	;UNRECOVERABLE DATA CHECK
   133			400000	ERRCNT== 1B18	;COUNT ERROR (CHANNEL TERMINATION)
   134			000001	ERRBSY==(1B17)	;BUSY
   135			000002	ERRATN==(1B16)	;ATTENTION FLAG
   136			000004	ERRUXC==(1B15)	;UNIT EXCEPTION
   137			000010	ERREQP==(1B14)	;PERMANENT EQUIPMENT CHECK
   138			000020	ERREQC==(1B13)	;EQUIPMENT CHECK
   139			000040	ERRLEN==(1B12)	;LENGTH ERROR
   140			000100	ERRCON==(1B11)	;CONTROL ERROR
   141			000200	ERRSEL==(1B10)	;SELECT ERROR
   142			000400	ERRWPT==(1B9)	;WRITE PROTECT ERROR (COMMAND REJECT ALSO ON)
   143
   144				SUBTTL	SA10/DISK -- Status word
   145
   146				  ;SA-10 channel error bits
   147			000000	ESTAT== (0B1)	;Ending status (transfer complete)
   148			200000	ISTAT== (1B1)	;Initial status (transfer could not be started)
   149			400000	ASTAT== (2B1)	;Async status (drive on-line, seek done)
   150			600000	DSTAT== (3B1)	;Dummy status (from PINT or from SET STATUS)
   151			100000	SELER== (1B2)	;SELECT ERROR
   152			040000	BUSIER==(1B3)	;BUS IN PARITY ERROR
   153			020000	CONERR==(1B4)	;CONTROL ERROR
   154				;	(1B5)	;(always zero)
   155			004000	LENERR==(1B6)	;LENGTH ERROR
   156			002000	PINT==  (1B7)	;Program requested interrupt (from command list)
   157
   158				  ;Storage Control Unit bits
   159			001000	ATTEN== (1B8)	;ATTENTION
   160			000400	STSMOD==(1B9)	;STATUS MODIFIER (when set with BUSY means C.U. Busy)
   161			000200	CUEND== (1B10)	;CONTROL UNIT END
   162			000100	BUSY==  (1B11)	;BUSY
   163			000040	CHEND== (1B12)	;CHANNEL END
   164			000020	DEVEND==(1B13)	;DEVICE END
   165			000010	UCHK==  (1B14)	;UNIT CHECK
   166			000004	UXCP==  (1B15)	;UNIT EXCEPTION
   167
   168				  ;The rest of the word at CHNSTB(PG) is 8 bits of device address, 12 bits zero
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 4
CPXKON.MAC	20-SEP-87 12:59		SA10/DISK -- Channel commands

   169				SUBTTL	SA10/DISK -- Channel commands
   170
   171			000004	SENSE==4	;SENSE
   172			000005	BPXWT==5	;WRITE
   173			000006	BPXRD==6	;READ
   174			000206	READMT==206	;READ MULTITRACK (not used - it reads R0 data)
   175			000007	SEEK==7		;SEEK
   176			000013	SEEKCY==13	;SEEK CYLINDER (USED FOR SEEK UUO)
   177			000022	RCOUNT==22	;READ COUNT
   178			000023	RECAL==23	;RECALIBRATE
   179			000043	SETSEC==43	;SET SECTOR
   180			000061	SRCIDE==61	;SEARCH ID=
   181			000244	RRBL==244	;READ AND RESET BUFFERED LOG
   182
   183				;SA-10 CONTROL BITS
   184
   185			000200	NOMEMT==200	;NO MEMORY TRANSFER
   186			000040	XCTCMD== 40	;EXECUTE THIS COMMAND (NO-OP IF THIS BIT IS OFF)
   187			000020	CHAIN==  20	;CHAIN TO NEXT COMMAND
   188			000002	IGNLEN==  2	;IGNORE LENGTH ERROR
   189			000001	OFFSET==  1	;BYTE MODE OFFSET (so SEARCH ID= and SEEK can use same data)
   190			000000	TRWORD== 00	;TRANSFER WORD MODE (BYTES 1-4 + HALF 5, 6-9 + OTHER HALF 5)
   191			000010	TRBYTE== 10	;TRANSFER BYTE MODE (32 BITS PER WORD)
   192			000100	TRBIT== 100	;TRANSFER BIT STREAM MODE (NATURAL MODE)
   193			000110	TRTAPE==110	;TRANSFER TAPE COMPATABILITY (DEC 36-BIT CORE DUMP)
   194
   195			000070	BYTMOD==TRBYTE+CHAIN+XCTCMD	;Send SEEK and SEARCH ID= bytes to controller
   196							;IGNLEN removed from BYTMOD since the count is exact
   197			000242	NOXFR==NOMEMT+XCTCMD+IGNLEN	;No memory transfer (for RECAL and NO-OP)
   198			000160	WRDMOD==TRBIT+XCTCMD+CHAIN	;Read/write 36 bit data as 9 byte per word pair
   199
   200			200000	TICBIT==(1B1)	;BIT FOR TIC
   201
   202					DEFINE XOR(A,B),<A!B-A&B>
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 5
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Interrupt handler

   203				SUBTTL	BPXINT -- Interrupt handler
   204
   205				;At this point J points to the Kontroller Data Block,
   206				; PG points to the Channel Data block, and
   207				; M points to the SA-10 Data Block
   208
   209	000003'	200323	000000*	BPXINT::MOVE	T1,@CHNSTB(PG)	;Get the status word (location 305 in low core)
   210	000004'	350700	000000*		AOS	P3,SAXPTR##	;Save last ^D512 status words
   211	000005'	405700	000777		ANDI	P3,777		;Wrap within the buffer
   212	000006'	202700	000004*		MOVEM	P3,SAXPTR##
   213	000007'	202316	000000*		MOVEM	T1,SAXBUF##(P3)
   214	000010'	135700	002504'		LDB	P3,[POINT 4,T1,23] ;Get unit # (P3 used in @KONPTR)
   215	000011'	200262	000000*		MOVE	U,@KONPTR(J)	;Get pointer to unit CB (BPA0CB, etc)
   216	000012'	331003	000003*		SKIPL	CHNSTB(PG)	;If SA10 detected a memory error
   217	000013'	603300	165314		TLNE	T1,ANYERR	; or any other error
   218	000014'	254000	000053'		 JRST	ERRCHK		;Check for unusual condition
   219	000015'	607300	002400		TLNN	T1,PINT!STSMOD	;Not tested by ANYERR, and not expected
   220	000016'	607300	000020		TLNN	T1,DEVEND	;Device end must be on to get data
   221	000017'	254000	000541'		 JRST	ERROR		;Should never happen
   222
   223				;If an attempt is made to start I/O on both halves of a 3652, the following
   224				;sequence of status words are returned:
   225				;    6uuu----	Previous tranxfer succeeded
   226				;		Here is where I/O to 301 and 341 are both started (by mistake)
   227				;20410341----	Initial: unit 341 is busy and cannot start requested I/O
   228				;    6301----	Request to 301 succeeded (301 and 341 both not busy now)
   229				;40002341----	Async: unit 341 device end, note that CH end is not set
   230				;		Here is where 341 needs to be restarted
   231				;    6341----	Request to 341 succeeded
   232
   233	000020'	403600	000015		SETZB	P1,P2		;No error, P1 has fake CONI, P2 SYNDROM
   234	000021'	261040	000015		PUSH	P,P2		; and fake DATAI is on the stack
   235	000022'	603300	000040		TLNE	T1,CHEND	;Channel End and Device End both on?
   236	000023'	254000	000030'		 JRST	DATACK		;Yes, xfer succeeded
   237	000024'	350000	000165'		AOS	BPBUSY		;No, DEVEND without CHEND means the disk
   238	000025'	550345	000000*		HRRZ	T2,UNICOM(U)	; is no longer busy, and the request
   239	000026'	260040	000076'		PUSHJ	P,STRTU		; that was pre-empted by the other half
   240	000027'	254000	000045'		JRST	DISMS1		; of the 3652 can start now.
   241
   242	000030'	322240	000045'	DATACK:	JUMPE	U,DISMS1	;WE GET HERE AFTER STATUS READ
   243	000031'	200305	000025*		MOVE	T1,UNICOM(U)	;Get addr of command list in RH
   244	000032'	135340	002505'		LDB	T2,[POINT 8,(T1),15]	;AND GET FIRST COMMAND
   245	000033'	306340	000007		CAIN	T2,SEEK		;IS IT A SEEK (HEAD AND CYL)
   246	000034'	254000	000411'		 JRST	DATA		;YES, THEN IT WAS A DATA TRANS
   247	000035'	302340	000023		CAIE	T2,RECAL
   248	000036'	306340	000013		CAIN	T2,SEEKCY
   249	000037'	254000	000171'		 JRST	POSINT		;POSITION INTERRUPT, RECAL OR SEEK UUO OR ERROR
   250	000040'	306340	000244		CAIN	T2,RRBL		;READ AND RESET BUFFERED LOG?
   251	000041'	254000	000170'		 JRST	POSNTS		;TREAT AS POSITION INTERUPT AND CHECK SENSE BYTE
   252	000042'	336006	000000		SKIPN	(T1) 		;IS ENTIRE WORD 0?
   253	000043'	254000	000171'		 JRST	POSINT		;YES, MUST BE ON-LINE
   254	000044'	254000	000207'		JRST	ERRSEN		;A TIC FOR THE SENSE
   255
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 5-2
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Dismiss interrupt

   256				SUBTTL	BPXINT -- Dismiss interrupt
   257
   258	000045'	262040	000006	DISMS1:	POP	P,T1		;ADJUST STACK
   259	000046'	205300	700000	DISMIS:	MOVSI	T1,(1B0!1B1!1B2)
   260	000047'	412303	000012*		ANDCAM	T1,CHNSTB(PG)	;Reset memory error bits
   261	000050'	256003	000000*		XCT	CHNGO(PG)	;Restart the SA10 channel (in case it lost GO)
   262	000051'	256003	000000*		XCT	CHNCLR(PG)	; and clear status flag
   263	000052'	263040	000000		POPJ	P,		;All done with this disk interrupt
   264
   265			165314	ANYERR==UCHK!BUSY!CUEND!LENERR!CONERR!BUSIER!SELER!ATTEN!UXCP
   266
   267				;HERE IF ANY ERROR BIT WAS SET
   268
   269	000053'	603300	000010	ERRCHK:	TLNE	T1,UCHK		;IS IT A UNIT CHECK
   270	000054'	254000	000062'		 JRST	RDSTS		;YES, WE MUST DO A READ STATUS
   271	000055'	603300	000100		TLNE	T1,BUSY
   272	000056'	254000	000116'		 JRST	CHKBSY		;CHECK BUSY
   273	000057'	603300	000200		TLNE	T1,CUEND	;CONTROL UNIT END?
   274	000060'	254000	000125'		 JRST	KONENC		;IF SO, RESTART WAITING DEVICES
   275	000061'	254000	000541'		JRST	ERROR		;ASSUME ERROR CONDITION
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 6
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Read buffered log

   276				SUBTTL	BPXINT -- Read buffered log
   277
   278	000062'	332005	000000*	RDSTS:	SKIPE	UNISVC(U)	;HAVE WE ALREADY SET UP THE SENSE?
   279					 JRST	[MOVE	T2,UNICOM(U) ;Yes, address of command list in RH
   280	000063'	254000	002506'			 JRST	RDSTSS]	  ;AND GO
   281	000064'	200403	000047*		MOVE	T3,CHNSTB(PG)	;HERE TO READ STATUS, SAVE SECOND
   282	000065'	200410	000001		MOVE	T3,1(T3)	;OF STATUS STORED BY SA-10
   283	000066'	202405	000062*		MOVEM	T3,UNISVC(U)	;HAS COUNT INFO
   284	000067'	201405	000000*		MOVEI	T3,UNISNS(U)
   285	000070'	505400	200000		HRLI	T3,TICBIT	;SET UP FOR TIC TO SENSE
   286	000071'	200345	000031*		MOVE	T2,UNICOM(U)
   287	000072'	250407	000000		EXCH	T3,(T2)		;SET IT AND GET OLD COMMAND
   288	000073'	202405	000000*		MOVEM	T3,UNISCM(U)	;Saved command
   289	000074'	260040	000076'	RDSTSS:	PUSHJ	P,STRTU		;GET UNIT READY TO START
   290	000075'	254000	000046'		JRST	DISMIS		;AND GET OUT OF INTERRUPT
   291
   292				SUBTTL	BPXINT -- Start unit
   293
   294	000076'	200402	000000*	STRTU:	MOVE	T3,KONBSU(J)	;Base is 300 (hex C0)
   295	000077'	270400	000016		ADD	T3,P3		;Generate unit number for the SA10
   296	000100'	505340	001500	STRTU1:	HRLI	T2,(15B11)	;"Start code" for the block-mux
   297	000101'	137400	002510'		DPB	T3,[POINT 8,T2,7];Combine unit number with the start code
   298	000102'	554402	000000*		HLRZ	T3,KONBMX(J)	;Get address of block multiplexor list
   299	000103'	270400	000016		ADD	T3,P3		;Address within block-mux list
   300	000104'	202350	000000		MOVEM	T2,(T3)		;Store addr of command list in block mux list
   301	000105'	200347	000000		MOVE	T2,(T2)		;Get first command
   302	000106'	404340	002511'		AND	T2,[BYTE (8)0,377,377,0]	;Keep CMD and UNIT only
   303	000107'	434345	000000*		IOR	T2,UNICYL(U)	;Put cylinder # in low-order 12 bits
   304	000110'	660340	004000		TRO	T2,4000		;Set this nonzero to signify command
   305	000111'	350400	000006*	T3,SAXPTR##	;Increment pointer
   306	000112'	405400	000777		ANDI	T3,777		;Wrap within buffer
   307	000113'	202400	000111*		MOVEM	T3,SAXPTR##
   308	000114'	202350	000007*		MOVEM	T2,SAXBUF##(T3)	;Store command for debugging
   309	000115'	263040	000000		POPJ	P,
   310
   311				;Here on a BUSY indication.  BUSY+STSMOD means control unit (3674) is busy.
   312
   313	000116'	607300	000400	CHKBSY:	TLNN	T1,STSMOD	;IS IT BUSY AND STATUS MODIFIER
   314	000117'	254000	000153'		 JRST	DEVBSY		;NO, SOME TYPE OF DEVICE BUSY
   315	000120'	210340	000016	CUBSY:	MOVN	T2,P3		;CONTROL UNIT BUSY
   316	000121'	205400	400000		MOVSI	T3,(1B0)	;SET A MASK THAT UNIT NEEDS RESTART
   317	000122'	242407	000000		LSH	T3,(T2)
   318	000123'	436402	000000*		IORM	T3,BPXCUB(J)
   319	000124'	603300	000200		TLNE	T1,CUEND	;CHECK FOR CONTROL UNIT END ALSO
   320	000125'	260040	000127'	KONENC:	 PUSHJ	P,KONEND	;YES, RESTART WAITERS
   321	000126'	254000	000046'		JRST	DISMIS		;AND JUST DISMIS IF NOT
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 7
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Control-Unit end

   322				SUBTTL	BPXINT -- Control-Unit end
   323
   324				;Memorex 3672 and Ampex control units handle 2 strings = 16 disks (0-17)
   325				;Memorex 3674 handles 4 strings = 32 disks (00-37) if no logical volumes
   326				;Memorex 3674 + 4 strings of 3652 = 64 logical volumes (00-77)
   327				;   When CUEND comes in, we need to start all waiting units that are
   328				; connected to the control unit.  The old BPXKON assumes only 16 disks
   329				; per controller.  But if we attempt to start I/O on unit 340 and the
   330				; controller is busy, then when it becomes not busy it will report the
   331				; lowest unit assigned to the controller.  The code added here will
   332				; restart units 340-377 when not-busy comes in on unit 300.
   333
   334	000127'	261040	000002	KONEND:	PUSH	P,J		;Save KON address
   335					   ;This *HACK* is to allow 3 strings on one 3674 controller
   336	000130'	201100	000000*		MOVEI	J,BPACB##	;*HACK* Start at 1st string *HACK*
   337					   ;The *HACK* is supposed to fix THUNG problems on F38
   338	000131'	510302	000123*	KONEN1:	HLLZ	T1,BPXCUB(J)	;Get mask of 16 unit busy flags
   339	000132'	553002	000131*		HRRZS	BPXCUB(J)	;Clear them in KON data block
   340	000133'	201700	000000		MOVEI	P3,0		;Start with relative unit 0
   341	000134'	621300	000003		TLZ	T1,(1B16!1B17)	;Keep only bits 0-15 (2 strings per KON)
   342	000135'	326300	000142'		JUMPN	T1,CRST		;Continue if interrupt for this KON
   343	000136'	554302	000000*	KONEN2:	HLRZ	T1,KONCHN(J)	;Pointer to next KON
   344	000137'	322300	000000*		JUMPE	T1,JPOPJ##	;No next kontroller, unaccountable interrupt
   345	000140'	200100	000006		MOVE	J,T1		;Switch to next set of 16 units
   346	000141'	254000	000131'		JRST	KONEN1		;See if 3rd or 4th string caused CUEND
   347				IF2,<PRINTX [Hack at KONEN1 needs to be eliminated]>
   348
   349	000142'	243300	000144'	CRST:	JFFO	T1,.+2		;Find first unit that was busy
   350	000143'	254000	000136'		 JRST	KONEN2		;Got all of them, now try BPB and BPC
   351	000144'	242307	000001		LSH	T1,1(T2)	;Get rid of bit JFFO found
   352	000145'	270700	000007		ADD	P3,T2		;Update unit number (00-17)
   353	000146'	336262	000011*		SKIPN	U,@KONPTR(J)	;Get pointer to unit's CB (indexed by P3)
   354	000147'	344700	000142'		 AOJA	P3,CRST		;No such unit
   355	000150'	550345	000071*		HRRZ	T2,UNICOM(U)	;Point to channel command list
   356	000151'	260040	000076'		PUSHJ	P,STRTU		;Restart unit
   357	000152'	344700	000142'		AOJA	P3,CRST		;And check for more on this KON
   358
   359				;31-Jan-87 It is not an error to get a device busy.  It simply means
   360				;  that this half of the 3652 disk can not start anything until the
   361				;  other half completes its transfer.  The old code retried the xfer
   362				;  immediately, and said "hard error" after 100 busies in a row.  /JMS
   363
   364	000153'	603300	000220	DEVBSY:	TLNE	T1,CUEND!DEVEND	;Is it BUSY+<DEVEND!CUEND>
   365					 JRST	[AOS	BPSTRD	  ;Count # of times got BUSY+CUEND
   366	000154'	254000	002512'			 JRST	RDSTS]	  ;Treat as UNIT CHECK, read sense bytes
   367	000155'	205300	400000		MOVSI	T1,(1B0)	;Just plain device busy
   368	000156'	436305	000000*		IORM	T1,UNISTS##(U)	;Remember this fact
   369	000157'	205300	000001		MOVSI	T1,1		;Count this occurrance
   370	000160'	272300	000165'		ADDM	T1,BPBUSY	; in LH of BPBUSY
   371	000161'	254000	000046'		JRST	DISMIS		;Wait for ASTAT!DEVEND
   372
   373	000162'			BPDATA:	BLOCK	4
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 7-2
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Control-Unit end

   374	000166'	000004	000000		4,,0		;4 entries ,, link for GETLNK
   375					.LINK 1,.-1	;LOADER will fix-up RH of prevous word
   376					BPDATA,,[SIXBIT /BPSTRD/
   377						 SIXBIT /BPXMAX/
   378						 SIXBIT /BPXFAK/
   379	000167'	000162'	002514'			 SIXBIT /BPBUSY/]
   380			000162'	BPSTRD=:BPDATA+0	;# of times BUSY+<CUEND!DEVEND> occured
   381			000163'	BPXMAX=:BPDATA+1	;Maximum requested pages for a single transfer
   382			000164'	BPXFAK=:BPDATA+2	;# of times TRNCNT filled up UNICOM
   383			000165'	BPBUSY=:BPDATA+3	;# of BUSY alone ,, # of DEVEND without CHEND
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 8
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Handle position done interrupt

   384				SUBTTL	BPXINT -- Handle position done interrupt
   385
   386	000170'	350005	000000*	POSNTS:	AOS	UNISNC(U)	;INCREMENT SENSE COUNT (READ AND RESET LOG)
   387	000171'	210340	000016	POSINT:	MOVN	T2,P3		;GET SET TO GENERATE A BIT FOR DEVICE
   388	000172'	205300	400000		MOVSI	T1,(1B0)
   389	000173'	242307	000000		LSH	T1,(T2)
   390	000174'	612302	000000*		TDNE	T1,KONCPY(J)
   391	000175'	254000	002261'		 JRST	BPXCNX		;THIS IS THE RESULT OF A CAPACITY TEST
   392	000176'	505300	000000*	POSDIS:	HRLI	T1,KCMPOS
   393	000177'	403601	000000		SETZB	P1,(P)		;NO CONI OR DATAI INFO
   394	000200'	262040	000010	FILDIS:	POP	P,T3		;GET DATAI TO CORRECT PLACE
   395	000201'	200345	000150*	FILDS1:	MOVE	T2,UNICOM(U)
   396	000202'	402007	000000		SETZM	(T2)		;ZERO OUT COMMAND AREA SO RECOGNIZE ON-LINE
   397	000203'	200340	000014		MOVE	T2,P1		;CONI
   398	000204'	256003	000050*		XCT	CHNGO(PG)	;Set GO and PIA
   399	000205'	256003	000051*		XCT	CHNCLR(PG)	;AND CLEAR STATUS FLAG
   400	000206'	254000	000000*		JRST	FILINT##	;Go tell FILIO
   401
   402
   403				SUBTTL	BPXINT -- Decode error sense bytes
   404
   405	000207'	200345	000073*	ERRSEN:	MOVE	T2,UNISCM(U)
   406	000210'	350005	000170*		AOS	UNISNC(U)	;COUNT A SENSE DONE
   407	000211'	202346	000000		MOVEM	T2,(T1)		;RESTORE THE FIRST COMMAND
   408	000212'	201300	000000		MOVEI	T1,0		;ALSO ZERO UNISVC FOR NEXT SENSE
   409	000213'	250305	000066*		EXCH	T1,UNISVC(U)	;AND THE COUNT INFO
   410	000214'	200343	000064*		MOVE	T2,CHNSTB(PG)
   411	000215'	202307	000001		MOVEM	T1,1(T2)
   412	000216'	261040	000005		PUSH	P,U		;AT END OF SENSE, RESTART WAITERS
   413	000217'	261040	000016		PUSH	P,P3		;THIS TAKES CARE OF BUSY, CUEND
   414	000220'	260040	000127'		PUSHJ	P,KONEND	;WHICH MUST WAIT FOR SENSE TO FINISH
   415	000221'	262040	000016		POP	P,P3		;NORMALLY NO WAITERS SO MAKES LITTLE
   416	000222'	262040	000005		POP	P,U		;OR NO DIFF IF NOT BUSY, CUEND
   417	000223'	326600	000030'		JUMPN	P1,DATACK	;FORGET IT IF SOME OTHER ERROR DETECTED
   418	000224'	510345	000000*		HLLZ	T2,UNISND(U)	;GET STATUS BITS
   419	000225'	621340	000003		TLZ	T2,(1B16!1B17)	;Check only bits 0-15
   420	000226'	243340	000232'		JFFO	T2,BYT0		;CHECK FOR ANY ON
   421	000227'	540345	000201*		HRR	T2,UNICOM(U)	;LOOKS LIKE ENVIRON DATA
   422	000230'	260040	000076'		PUSHJ	P,STRTU
   423	000231'	254000	000045'		JRST	DISMS1		;JUST RESTART UNIT
   424
   425	000232'	254030	000233'	BYT0:	JRST	@BYT0T(T3)	;DISPATCH ON BIT
   426
   427	000233'	000000	000314'	BYT0T:	CMDRJC	;COMMAND REJECT BYTE 0 BIT 0
   428	000234'	000000	000266'		OFLIN	;OFF-LINE (INTERVENTION REQUIRED) BYTE 0 BIT 1
   429	000235'	000000	000263'		BUSOPA	;BUSS OUT PARITY ERROR BYTE 0 BIT 2
   430	000236'	000000	000277'		EQCHK	;EQUIPMENT CHECK BYTE 0 BIT 3
   431	000237'	000000	000326'		DTACHK	;DATA CHECK BYTE 0 BIT 4
   432	000240'	000000	000254'		OVRUN	;PERMANENT OVERRUN BYTE 0 BIT 5
   433	000241'	000000	000306'		UNKNO	;UNKNOWN, BIT UNUSED BYTE 0 BIT 6
   434	000242'	000000	000306'		UNKNO	;UNKNOWN, BIT UNUSED BYTE 0 BIT 7
   435
   436
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 8-2
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Decode error sense bytes

   437	000243'	000000	000306'	BYT1T:	UNKNO	;UNKNNOWN PERMANENT ERROR OTHER SHOULD BE ON
   438						;BYTE 1 BIT 0
   439	000244'	000000	000311'		INVTRK	;INVALID TRACK BYTE 1 BIT 1
   440	000245'	000000	000306'		UNKNO	;UNKNOWN EOC BYYTE 1 BIT 2
   441	000246'	000000	000306'		UNKNO	;UNKNOWN UNUSED BYTE 1 BIT 3
   442	000247'	000000	000310'		NOREC	;NO RECORD FOUND BYTE 1 BIT 4
   443	000250'	000000	000253'		PROTEC	;FILE PROTECTED BYTE 1 BIT 5
   444	000251'	000000	000306'		UNKNO	;WRITE INHIBITED CMD REJECT SHOULD BE ON BYTE 1 BIT 6
   445	000252'	000000	000306'		UNKNO	;OPERATION INCOMPLETE, OTHER SHOULD BE ON TOO BYTE 1 BIT 7
   446
   447
   448	000253'	664600	000400	PROTEC:	TROA	P1,ERRPRT	;PROTECT ERROR
   449	000254'	660600	002000	OVRUN:	 TRO	P1,ERROVR	;DATA OVERRUN
   450	000255'	200640	000322'	ERRNO:	MOVE	P2,RTYZRO	;NO RETRYS
   451	000256'	200305	000001*	ERRCOM:	MOVE	T1,UNISND+1(U)	;PHYSICAL DRIVE NUMBER IS HERE
   452	000257'	202301	000000		MOVEM	T1,(P)
   453	000260'	336005	000000*	ERRCM1:	SKIPN	UNIRCT(U)	;HAS RETRY PATTERN BEEN SET YET?
   454	000261'	202645	000260*		 MOVEM	P2,UNIRCT(U)	;NO, SET IT
   455	000262'	254000	000030'		JRST	DATACK		;AND CHECK ON TRANSFER
   456
   457	000263'	660600	000100	BUSOPA:	TRO P1,ERRBOP
   458	000264'	200640	000323'	ERRONE:	MOVE P2,RTYONE	;ONE RETRY
   459	000265'	254000	000256'		JRST ERRCOM
   460
   461	000266'	200305	000001*	OFLIN:	MOVE	T1,UNISND+1(U)
   462	000267'	202301	000000		MOVEM	T1,(P)
   463	000270'	135340	000000*		LDB	T2,UNYPUN
   464	000271'	213000	000007		MOVNS	T2
   465	000272'	205300	400000		MOVSI	T1,(1B0)
   466	000273'	242307	000000		LSH	T1,(T2)
   467	000274'	412302	000174*	OFLIN2:	ANDCAM	T1,KONCPY(J)	;TURN OFF CAPACITY TEST BIT IF OFF-LINE
   468	000275'	205300	000000*		MOVSI	T1,KCMOFL
   469	000276'	254000	000200'		JRST	FILDIS		;Dismiss interrupt and go to FILINT
   470
   471	000277'	205300	001000	EQCHK:	MOVSI	T1,(1B8)
   472	000300'	616305	000224*		TDNN	T1,UNISND(U)
   473	000301'	665600	000020		 TLOA	P1,ERREQC
   474	000302'	665600	000010		TLOA	P1,ERREQP	;Permanent equipment check
   475	000303'	334640	000324'	ERRTEN:	SKIPA	P2,RTYTEN
   476	000304'	254000	000255'		 JRST	ERRNO		;NO RETRY ON PERM ERROR
   477	000305'	254000	000256'		JRST	ERRCOM		;10 RETRIES ON CORRECTABLE ERROR
   478
   479	000306'	660600	001000	UNKNO:	TRO	P1,ERRUNK	;UNKNOWN ERROR
   480	000307'	254000	000303'		JRST	ERRTEN		;RETRY 10 TIMES
   481
   482	000310'	664600	020000	NOREC:	TROA	P1,ERRSRC	;CALL IT A SEARCH ERROR
   483	000311'	660600	040000	INVTRK:	 TRO	P1,ERRINV
   484	000312'	200640	000325'	ERRDT0:	MOVE	P2,RTYDT0	;DATA ERROR, 0 RETRYS
   485	000313'	254000	000256'		JRST	ERRCOM
   486
   487	000314'	660600	000040	CMDRJC:	TRO	P1,ERRCMR
   488	000315'	205300	000010		MOVSI	T1,(1B14)
   489	000316'	612305	000300*		TDNE	T1,UNISND(U)
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 8-3
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Decode error sense bytes

   490	000317'	661600	000400		TLO	P1,ERRWPT	;WRITE PROTECT ERROR
   491	000320'	254000	000255'		JRST	ERRNO
   492
   493					DEFINE SYND(RTY,RCL,RRT,MOD)
   494				<	XWD RRT+200000+UNPDEV*MOD,RCL_9+RTY>
   495
   496	000321'	000000*	000144	RTYCNT:	SYND (^D100,0,0,1)
   497	000322'	000000*	000000	RTYZRO:	SYND(0,0,0,1)
   498	000323'	000000*	000001	RTYONE:	SYND(1,0,0,1)
   499	000324'	000000*	000012	RTYTEN:	SYND(^D10,0,0,1)
   500	000325'	000000*	000000	RTYDT0:	SYND(0,0,0,0)
   501
   502				SUBTTL	BPXINT -- Data check
   503
   504	000326'	205300	000001	DTACHK:	MOVSI	T1,(1B17)	;SEE IF CORRECTABLE
   505	000327'	616305	000316*		TDNN	T1,UNISND(U)
   506	000330'	254000	000407'		 JRST	DTAUNC		;NO, NOT CORRECTABLE
   507	000331'	135700	002520'		LDB	P3,[POINT 24,UNISND+5(U),23]	;GET SYNDROME BYTES
   508	000332'	242700	000014		LSH	P3,^D12		;LEFT JUSTIFY
   509	000333'	201740	000000		MOVEI	P4,0
   510	000334'	135600	002521'		LDB	P1,[POINT 16,UNISND+4(U),15]
   511	000335'	135640	002522'		LDB	P2,[POINT 8,UNISND+3(U),31]
   512	000336'	137640	002523'		DPB	P2,[POINT 8,P1,19]	;HERE IS THE RESTART DISP
   513	000337'	135640	002524'		LDB	P2,[POINT 16,UNISND+4(U),31]	;HERE IS THE ERROR DISP
   514	000340'	274600	000015		SUB	P1,P2		;NUMBER OF BYTES TO OFFSET FROM START
   515	000341'	242600	000003		LSH	P1,3		;CONVERT P1 TO NUMBER OF BITS
   516	000342'	231600	000044		IDIVI	P1,^D36		;NOW HAVE WORDS IN P1, BITS IN P2
   517	000343'	213000	000015		MOVNS	P2
   518	000344'	246715	000000		LSHC	P3,(P2)		;AND SHIFT SYNDROM TO DOUBLE WORD POSITION
   519	000345'	326700	000350'		JUMPN	P3,GORCV	;SEE IF ANY LEFT IN P3
   520	000346'	271600	000001		ADDI	P1,1		;NO, 1 EXTRA WORD
   521	000347'	250700	000017		EXCH	P3,P4		;AND GET BITS TO P3
   522	000350'	550303	000214*	GORCV:	HRRZ	T1,CHNSTB(PG)	;GET POINTER TO COMMAND CHAIN
   523	000351'	370646	000001		SOS	P2,1(T1)	;POINTS TO FIRST DATA WORD OF RECORD
   524	000352'	331015	000000		SKIPL	(P2)		;POINTER ALWAYS POINTS 1 AFTER 1ST DATA WD
   525	000353'	344640	000352'		AOJA	P2,.-1		;GET IT TO POINT TO LAST
   526	000354'	271640	000002		ADDI	P2,2		;IF LAST RECORD, NOW 1 AFTER HALT
   527	000355'	553000	000015		HRRZS	P2		;AND GET RID OF COUNT. NOW LOOKS LIKE TO END OF RECORD
   528	000356'	250646	000001		EXCH	P2,1(T1)	;GET THE OLD WORD PNTS TO 1ST TRANS
   529	000357'	135300	002525'	LOKRCV:	LDB	T1,[POINT 11,(P2),11]	;GET COUNT
   530	000360'	213000	000006		MOVNS	T1
   531	000361'	405300	003777		ANDI	T1,3777
   532	000362'	313300	000014		CAMLE	T1,P1		;IS IT LESS OR EQUAL TO OFFSET COUNT
   533	000363'	254000	000372'		 JRST	FNDRCV		;IF YES, WE HAVE FOUND THE TRANS WORD
   534	000364'	274600	000006		SUB	P1,T1		;DECREMENT OFFSET REMAINING
   535	000365'	331015	000000		SKIPL	(P2)		;AND IF MORE TRANSFER WORDS
   536	000366'	344640	000357'		AOJA	P2,LOKRCV	;TRY NEXT BLOCK OF DATA
   537	000367'	201600	100000	FINRCV:	MOVEI	P1,ERRRCV
   538	000370'	201640	000000		MOVEI	P2,0		;ALL DONE, RECOVERABLE ERR AND NOT RETRY
   539	000371'	254000	000256'		JRST	ERRCOM
   540
   541				;Change EPT so %ERR points to the page with correctable data
   542
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 8-4
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Data check

   543	000372'	135340	002526'	FNDRCV:	LDB	T2,[POINT 24,(P2),35]
   544	000373'	322340	000403'		JUMPE	T2,NOTRN	;NO TRANSFER IF ADDRESS IS 0
   545	000374'	270340	000014		ADD	T2,P1		;ADD IN THE OFFSET
   546	000375'	135300	002527'		LDB	T1,[POINT 13,T2,26]	;PAGE NUMBER
   547	000376'	405340	000777		ANDI	T2,777		;AND DISP WITHIN PAGE
   548	000377'	660300	700000		TRO	T1,PGE.A!PGE.W!PGE.P	;SET ACCESS
   549	000400'	137300	002530'		DPB	T1,[EPTPGP (%ERR.N)]
   550	000401'	701100	777000		CLRPTO	%ERR		;CLEAR PAGE TABLE ENTRY FOR %ERR
   551	000402'	432707	777000		XORM	P3,%ERR(T2)	;FIX UP THE ERROR
   552	000403'	322740	000367'	NOTRN:	JUMPE	P4,FINRCV	;IF REST OF BYTES 0, DONE
   553	000404'	200700	000017		MOVE	P3,P4
   554	000405'	201740	000000		MOVEI	P4,0		;MOVE BYTES AND SET REMAINDER TO
   555	000406'	344600	000357'		AOJA	P1,LOKRCV	;COUNT OF 1 MORE, LET COMMON CODE LOOK
   556
   557	000407'	660600	200000	DTAUNC:	TRO	P1,ERRDTA	;UNRECOVERABLE
   558	000410'	254000	000255'		JRST	ERRNO		;NO MORE RETRIES
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 9
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Data tranfer interrupt

   559				SUBTTL	BPXINT -- Data tranfer interrupt
   560
   561				;Here from BPXINT when CHNSTB(PG) says there were no errors
   562
   563	000411'	200303	000350*	DATA:	MOVE	T1,CHNSTB(PG)	;GET SET TO COUNT WORDS TRANS
   564	000412'	370306	000001		SOS	T1,1(T1)	;THIS IS THE TERMINATE WORD
   565	000413'	550405	000000*		HRRZ	T3,UNISWC(U)	;Saved word count (of last transfer)
   566	000414'	554345	000413*		HLRZ	T2,UNISWC(U)	;EXPECTED END command word
   567	000415'	306346	000000		CAIN	T2,(T1)		;Did channel execute last command in list?
   568	000416'	254000	000465'		 JRST	DTADON		;YES, ALL OK
   569								;No, need to find where it went wrong
   570	000417'	553005	000414*		HRRZS	UNISWC(U)	;FOR COUNT CHECKING
   571	000420'	550345	000227*		HRRZ	T2,UNICOM(U)	;POINTER TO COMMAND LIST
   572	000421'	201400	000000		MOVEI	T3,0		;COUNT SO FAR
   573
   574				;Decode the command list
   575
   576	000422'	335447	000000	CNTLP:	SKIPGE	T4,(T2)		;BIT 0 ONLY ON FOR HALT IN DATA TANS
   577	000423'	254000	000454'		 JRST	CNTDON		;IT IS A HALT
   578	000424'	306346	000000		CAIN	T2,(T1)		;DO WE END NOW?
   579	000425'	254000	000454'		 JRST	CNTDON		;YES, FINISHED COUNTING
   580	000426'	607440	100000		TLNN	T4,(1B2)	;THIS IS THE EXECUTE BIT
   581	000427'	344340	000422'		 AOJA	T2,CNTLP	;IF NOT ON, THIS MUST BE TIC
   582	000430'	607440	020000		TLNN	T4,(1B4)	;CHECK BYTE MODE
   583	000431'	344340	000440'		 AOJA	T2,DTATRN	;NOT BYTE MODE, MUST BE DATA
   584	000432'	271340	000001		ADDI	T2,1		;CHECK FOR TRANSFER
   585	000433'	306346	000000	BYTARG:	CAIN	T2,(T1)
   586	000434'	254000	000454'		 JRST	CNTDON		;ENDED HERE
   587	000435'	335007	000000		SKIPGE	(T2)
   588	000436'	344340	000422'		 AOJA	T2,CNTLP	;NEGATIVE IS LAST TRANS
   589	000437'	344340	000433'		AOJA	T2,BYTARG	;ELSE MORE TRANSFER WORDS
   590
   591	000440'	135440	002531'	DTATRN:	LDB	T4,[POINT 11,(T2),11]	;GET COUNT FIELD
   592	000441'	306346	000000		CAIN	T2,(T1)
   593	000442'	254000	000450'		 JRST	LSTCNT		;IF TERMINATE HERE, THIS IS PARTIAL COUNT
   594	000443'	640440	003777		TRC	T4,3777		;ONES COMPLEMENT
   595	000444'	271411	000001		ADDI	T3,1(T4)	;INCREMENT COUNT
   596	000445'	335007	000000		SKIPGE	(T2)
   597	000446'	344340	000422'		 AOJA	T2,CNTLP	;NEGATIVE IS LAST TRANSFER
   598	000447'	344340	000440'		AOJA	T2,DTATRN	;MORE DATA
   599
   600	000450'	135300	002532'	LSTCNT:	LDB	T1,[POINT 11,T1,11]	;PARTIAL TRANS, GET REMAINING COUNT
   601	000451'	274300	000011		SUB	T1,T4		;SUBTRACT ORIGINAL COUNT
   602	000452'	405300	003777		ANDI	T1,3777		;JUST IN CASE ALL REALLY TRANS (T1=0)
   603	000453'	270400	000006		ADD	T3,T1
   604	000454'	316405	000417*	CNTDON:	CAMN	T3,UNISWC(U)	;IS IT THE SAME?
   605	000455'	254000	000465'		 JRST	DTADON		;YES, FINISHED
   606	000456'	660600	400000	CNTBAD:	TRO	P1,ERRCNT	;SET COUNT ERROR FLAG
   607	000457'	332001	000000		SKIPE	(P)		;IS THERE DATAI INFO
   608	000460'	254000	000465'		 JRST	DTADON		;YES, SOME OTHER ERROR ALSO
   609	000461'	476001	000000		SETOM	(P)		;FLAG SOFT ERROR
   610	000462'	200640	000321'		MOVE	P2,RTYCNT
   611	000463'	336005	000261*		SKIPN	UNIRCT(U)
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 9-2
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Data tranfer interrupt

   612	000464'	202645	000463*		 MOVEM	P2,UNIRCT(U)	;SET TO RETRY
   613
   614	000465'			DTADON:				;Word count in T3, error bit in P1
   615				IFE FTDPAG,<
   616	000465'	271400	000177		ADDI	T3,177		;MUST BE EVEN NUMBER OF RECORDS
   617	000466'	242400	777771		LSH	T3,W2BLSH	;NUMBER OF BLOCKS TRANSFERED
   618				>
   619				IFN FTDPAG,<
   620					ADDI	T3,777		;Round up to full page
   621					LSH	T3,W2PLSH
   622				>
   623	000467'	336300	000010		SKIPN	T1,T3		;Number of sectors
   624	000470'	350300	000010		 AOS	T1,T3		;At least one
   625	000471'	270305	000000*		ADD	T1,UNICCC(U)	;ADD IN COUNT SO FAR
   626	000472'	505300	000000*		HRLI	T1,KCMDTA	;CODE FOR DATA TRANSMITTED OK
   627	000473'	322600	000500'		JUMPE	P1,FILFAK	;FINISHED, JUMP IF NO ERRORS
   628	000474'	606600	100000		TRNN	P1,ERRRCV	;IS IT RECOVERABLE DATA?
   629	000475'	665300	000000*		 TLOA	T1,KCMERR	;Hard error
   630	000476'	661300	000000*		  TLO	T1,KCMRER	;Recoverable error
   631	000477'	254000	000200'		JRST	FILDIS		;Dismiss interrupt and go to FILINT
   632					PFALL	FILFAK
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 10
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- Data tranfer interrupt

   633				;HERE TO REGENERATE COMMAND LIST WITHOUT CALLING FILIO
   634
   635	000500'	336005	000000*	FILFAK:	SKIPN	UNICNA(U)	;IS THERE MORE TO DO (NEXT CYLINDER)?
   636	000501'	254000	000200'		 JRST	FILDIS		;NO MORE TO REGEN
   637	000502'	272405	000471*		ADDM	T3,UNICCC(U)	;INCREASE BLOCK COUNT
   638				;The following instruction removed in P034/P31
   639				;It does not work with the upgraded SA10 - they're too fast
   640				;*;	XCT	CHNGO(PG)	;SET GO BEFORE BUILDING COMMAND LIST!
   641	000503'	256003	000205*		XCT	CHNCLR(PG)	;;AND CLEAR STATUS FLAG
   642	000504'	262040	000017		POP	P,P4		;GARBAGE WORD
   643
   644				COMMENT & WE KNOW THAT THIS TRANSFER WILL BE ON RECORD 1 OF
   645				THE HEAD NUMBERED ONE HIGHER THAN THE FIRST TRANSFER THE
   646				LAST TIME. ALSO THE SEEK, SET SECTOR, SEARCH ID EQUAL, READ OR WRITE
   647				ARE ALREADY SET UP. ALL WE HAVE DO DO IS MODIFY THE ADDRESS OF
   648				THE SEEK AND SET SECTOR AND CALL THE ADD ROUTINE.  &
   649
   650	000505'	350000	000164'		AOS	BPXFAK		;Count # of times thru here
   651	000506'	260040	000605'		PUSHJ	P,BPXSET	;SET UP P1 AND P3
   652	000507'	201300	000001		MOVEI	T1,1
   653	000510'	137300	002533'		DPB	T1,[POINT 8,(P3),23]	;RECORD 1
   654	000511'	205300	000004		MOVSI	T1,(BYTE (8) 0,1)	;NOW INCREMENT THE HEAD NUMBER
   655	000512'	273316	000000		ADDB	T1,(P3)
   656	000513'	135300	002534'		LDB	T1,[POINT 16,T1,15]	;NOW GET JUST THE HEAD
   657	000514'	135640	000000*		LDB	P2,UNYBPT	;Blocks per track (18 or 20 or 25 or 28)
   658	000515'	242640	000007		LSH	P2,B2WLSH	;# of word per track
   659	000516'	220300	000015		IMUL	T1,P2		;# of words from start of cylinder
   660	000517'	135740	000000*		LDB	P4,UNYPPY	;Pages per cylinder
   661	000520'	242740	000011		LSH	P4,P2WLSH	;Words until end of cylinder
   662	000521'	274740	000006		SUB	P4,T1		;P4 gets words until end of cylinder
   663	000522'	135300	000000*		LDB	T1,UNYUTP	;Get unit type
   664	000523'	550306	002411'		HRRZ	T1,RECTBL(T1)	;Get addr of table (ignore T4 in LH)
   665	000524'	200306	000000		MOVE	T1,(T1)		;Get info for first record in table
   666	000525'	202316	000001		MOVEM	T1,1(P3)	;SET SECTOR data for record 1
   667	000526'	505614	000004		HRLI	P1,4(P1)	;NOW SET UP FOR MORE ADDITIONS
   668	000527'	271600	000011		ADDI	P1,^D9
   669	000530'	275700	000003		SUBI	P3,3
   670	000531'	402005	000454*		SETZM	UNISWC(U)
   671	000532'	504700	000644'		HRL	P3,BPBRK1	;NOT IMMEDIATE IN CASE CHANGED FOR BREAKPOINTS
   672	000533'	200305	000000*		MOVE	T1,UNICNC(U)	;Continue word count
   673	000534'	200345	000500*		MOVE	T2,UNICNA(U)	;Continue word address
   674	000535'	402005	000534*		SETZM	UNICNA(U)	;IN CASE THIS ONE FINISHES IT
   675	000536'	260040	000731'		PUSHJ	P,BPXAD1	;Add request to command list (using T1&T2)
   676	000537'	255000	000000		  JFCL
   677	000540'	324740	001060'		PJRST	BPXFIN		;AND GO
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 11
CPXKON.MAC	20-SEP-87 12:59		BPXINT -- SA-10 detected error (NXM, Parity, etc)

   678				SUBTTL	BPXINT -- SA-10 detected error (NXM, Parity, etc)
   679
   680	000541'	403600	000015	ERROR:	SETZB	P1,P2
   681	000542'	261040	000014		PUSH	P,P1		;SET DATAI AND CONI, RETRY INFO
   682	000543'	476001	000000		SETOM	(P)		;FLAG AS CHANNEL IN DATAI WORD
   683	000544'	335003	000411*		SKIPGE	CHNSTB(PG)
   684	000545'	254000	000571'		 JRST	MEMERR		;MEMORY ERROR
   685	000546'	603300	100000		TLNE	T1,SELER
   686	000547'	254000	000566'		 JRST	SELERR		;SELECT ERROR TRY AGAIN
   687	000550'	200640	000321'		MOVE	P2,RTYCNT	;SET FOR LOTS OF RETRYS
   688	000551'	603300	004000		TLNE	T1,LENERR	;LENGTH ERROR
   689	000552'	661600	000040		 TLO	P1,ERRLEN
   690	000553'	603300	020000		TLNE	T1,CONERR
   691	000554'	661600	000100		 TLO	P1,ERRCON
   692	000555'	603300	040000		TLNE	T1,BUSIER
   693	000556'	660600	000200		 TRO	P1,ERRBIP
   694	000557'	603300	000100		TLNE	T1,BUSY
   695	000560'	661600	000001		 TLO	P1,ERRBSY
   696	000561'	603300	001000		TLNE	T1,ATTEN
   697	000562'	661600	000002		 TLO	P1,ERRATN
   698	000563'	603300	000004		TLNE	T1,UXCP
   699	000564'	661600	000004		 TLO	P1,ERRUXC
   700	000565'	254000	000260'		JRST	ERRCM1		;CHECK ON DATA NOW
   701
   702	000566'	661600	000200	SELERR:	TLO	P1,ERRSEL
   703	000567'	200640	000323'		MOVE	P2,RTYONE	;ONE RETRY
   704	000570'	254000	000260'		JRST	ERRCM1
   705
   706	000571'	200640	000321'	MEMERR:	MOVE	P2,RTYCNT	;LOST OF RETRYS
   707	000572'	200303	000000*		MOVE	T1,CHNMER(PG)
   708	000573'	660300	000001		TRO	T1,1		;FLAG NO STATUS INFORMATION BUT MEM DATA
   709	000574'	202301	000000		MOVEM	T1,(P)
   710	000575'	200303	000544*		MOVE	T1,CHNSTB(PG)
   711	000576'	603300	200000		TLNE	T1,1B19		;HALVES HAVE BEEN SWITCHED
   712	000577'	660600	010000		 TRO	P1,ERRPAR
   713	000600'	603300	100000		TLNE	T1,1B20
   714	000601'	660600	004000		 TRO	P1,ERRNXM
   715	000602'	205300	700000		MOVSI	T1,7B20
   716	000603'	412303	000575*		ANDCAM	T1,CHNSTB(PG)	;RESET ERROR BITS
   717	000604'	254000	000260'		JRST	ERRCM1
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 12
CPXKON.MAC	20-SEP-87 12:59		READ/WRITE -- Description

   718				SUBTTL	READ/WRITE -- Description
   719
   720				COMMENT &
   721				THESE ROUTINES SET UP THE START OF THE COMMAND LIST FOR A
   722				READ OR WRITE. UNICOM(U) POINTS TO THE COMMAND LIST AREA.
   723				COMMANDS ARE BUILT FROM THE FRONT (LOW ADDRESS) DOWN AND
   724				DATA (FOR SEEK SET SECTOR ETC) FROM THE BACK UP. AFTER
   725				BPXWRT OR BPXRED IS CALLED, THE DATA IS AS FOLLOWS
   726
   727				  UNICOM+0/	A SEEK COMMAND
   728					+1/	 THE DATA TRANSFER FOR THE SEEK (points to #3)
   729					+2/	A SET SECTOR COMMAND
   730					+3/	 THE DATA TRANSFER FOR THE SET SECTOR  (points to END)
   731				#1	+4/	A SEARCH ID =
   732					+5/	 THE DATA TRANSFER FOR THE SEARCH (points to #3)
   733					+6/	A TIC TO THE SEARCH AT #1
   734					+7/	THE READ OR WRITE COMMAND
   735				#2	+10/	...
   736					.../	HALTS TO START OF DATA
   737					.../	...
   738				#3	.../	THE DATA FOR THE SEEK (AND SEARCH ID=)
   739					.../	(2 WORDS)
   740				  (END) .../	THE DATA FOR THE SET SECTOR COMMAND
   741
   742				REGISTERS P1, P2, P3, AND P4 ARE ALSO SET UP FOR BPXADD AND BPXFIN.
   743				P1 LEFT HALF POINTS TO THE SEARCH (#1)
   744				P1 RIGHT HALF POINTS TO THE FIRST FREE COMMAND LOCATION (#2+1)
   745
   746				P2 CONTAINS THE NUMBER OF WORDS LEFT TO END OF TRACK OR END OF
   747					CYLINDER WHICHEVER COMES FIRST
   748
   749				P3 LEFT HALF CONTAINS A DISPATCH ADDRESS FOR BPXADD
   750				P3 RIGHT HALF CONTAINS A POINTER TO THE NEXT PLACE TO PUT A
   751					SEARCH DATA LIST (#3-2)
   752
   753				P4 CONTAINS THE NUMBER OF WORDS LEFT TO END OF CYLINDER
   754					FOR TRANSFER CONTINUATION AT INTERUPT LEVEL
   755				&
   756
   757				;SET UP P1 AND P3
   758
   759	000605'	550605	000420*	BPXSET:	HRRZ	P1,UNICOM(U)	;P1 points to where command words go
   760	000606'	564705	000605*		HLRO	P3,UNICOM(U)	;Size of command area (room for 18 blocks)
   761	000607'	213000	000016		MOVNS	P3		;(takes 7 words in list to transfer 1 block)
   762	000610'	271714	777776		ADDI	P3,-2(P1)	;Start 2 words from the end
   763	000611'	402005	000213*		SETZM	UNISVC(U)	;Clear save count in case hung restart
   764	000612'	263040	000000		POPJ	P,		;P1 and P3 set up
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 13
CPXKON.MAC	20-SEP-87 12:59		READ/WRITE -- BPXRED - set up for reading

   765				SUBTTL	READ/WRITE -- BPXRED - set up for reading
   766				SUBTTL	READ/WRITE -- BPXWRT - set up for writing
   767
   768	000613'	334340	002535'	BPXWRT::SKIPA	T2,[BYTE (8) WRDMOD,BPXWT]
   769	000614'	205340	340030	BPXRED:: MOVSI	T2,(BYTE (8) WRDMOD,BPXRD)
   770	000615'	135400	000270*		LDB	T3,UNYPUN	;Get relative unit number (00 to 17)
   771	000616'	270402	000076*		ADD	T3,KONBSU(J)	;Add offset to first unit's address
   772	000617'	137400	002536'		DPB	T3,[POINT 8,T2,23] ;Put 8-bit device address in with command
   773	000620'	402005	000502*		SETZM	UNICCC(U)	;No continuation count so far
   774	000621'	402005	000535*		SETZM	UNICNA(U)	;No continuation address
   775	000622'	260040	000605'		PUSHJ	P,BPXSET	;Set P1 to command area, P3 to argument area
   776	000623'	275700	000001		SUBI	P3,1		;Reserve 1 word for set sector argument
   777	000624'	202354	000007		MOVEM	T2,7(P1)	;Store the read or write command
   778
   779	000625'	260040	000646'		PUSHJ	P,BPXSSO	;Set up search data, T4+P2+P4
   780	000626'	135400	000522*		LDB	T3,UNYUTP	;Get unit type (T4 has record #)
   781	000627'	200430	002411'		MOVE	T3,@RECTBL(T3)	;Translate record number to SET SECTOR byte
   782	000630'	202416	000004		MOVEM	T3,4(P3)	;Store for SET SECTOR command
   783
   784	000631'	260040	000676'		PUSHJ	P,BPXSSC	;Generate seek command
   785	000632'	641340	000220		TLC	T2,(BYTE (8) 0,XOR (SETSEC,SEEK)) ;Change SEEK to SET SECTOR
   786	000633'	202354	000000		MOVEM	T2,(P1)		;Store SET SECTOR command
   787	000634'	201416	000004		MOVEI	T3,4(P3)	;Address of byte
   788	000635'	505400	777700		HRLI	T3,(BYTE (12) -1);One byte
   789	000636'	202414	000001		MOVEM	T3,1(P1)	;Now have SET SECTOR command
   790	000637'	271600	000002		ADDI	P1,2		;Increment into command list
   791	000640'	507000	000014		HRLS	P1		;Save pointer to the SEARCH ID
   792	000641'	260040	000706'		PUSHJ	P,BPXSSR	;Set up the SEARCH ID=
   793	000642'	271600	000002		ADDI	P1,2		;Increment into command list
   794	000643'	402005	000531*		SETZM	UNISWC(U)	;No saved word count
   795
   796				COMMENT &
   797				USING BPXA1 CAUSES A PROBLEM IF BREAKPOINTS ARE SET, SINCE THE CHANNEL WILL
   798				START BEFORE THE COMMAND LIST IS COMPLETED.
   799				CHANGE BPBRK1 FROM <HRLI P3,BPXA1> TO <HRLI P3,BPXA0> WHEN DEBUGGING.
   800				&
   801	000644'	505700	000741'	BPBRK1:	HRLI	P3,BPXA0	;Routine for BPXADD to call (used to be BPXA1)
   802	000645'	263040	000000		POPJ	P,		;Finished, P1-P4 must be preserved for BPXADD
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 14
CPXKON.MAC	20-SEP-87 12:59		READ/WRITE -- BPXSSO - Set up search address

   803				SUBTTL	READ/WRITE -- BPXSSO - Set up search address
   804
   805				;Called from BPXRED, BPXWRT, BPXPOS with disk page number in UNIPAG
   806				;Returns T4 = Record number (1-18, 1-5, or 1-7)
   807				;	 P2 = words to end of track
   808				;	 P4 = words to end of cylinder
   809				;	Stores CYL,HEAD,REC data in two words pointed to by P3
   810				;	Also sets UNICYL(U) to the target cylinder
   811
   812	000646'			BPXSSO:
   813				IFE FTDPAG,<
   814	000646'	200405	000000*		MOVE	T3,UNIBLK(U)	;Get requested disk block address
   815	000647'	242400	777776		LSH	T3,B2PLSH	;Convert to pages
   816				>
   817				IFN FTDPAG,<
   818					MOVE	T3,UNIPAG(U)	;Get requested disk page address
   819				>
   820	000650'	135740	000517*		LDB	P4,UNYPPY	;Get pages per cylinder
   821	000651'	230400	000017		IDIV	T3,P4		;T3 gets cylinder, T4 position within cylinder
   822	000652'	202405	000107*		MOVEM	T3,UNICYL(U)	;Set current cylinder
   823	000653'	137400	002537'		DPB	T3,[POINT 32,(P3),31]	;Set 2 bytes of 0 and 2 bytes of CYL
   824	000654'	274740	000011		SUB	P4,T4		;Find pages to end-of-cylinder
   825	000655'	242740	000011		LSH	P4,P2WLSH	;# of words until end of cylinder
   826
   827				;Determine head # and record #.  Blocks 1-18, pages 1-5, pages 1-7
   828
   829	000656'	200400	000011		MOVE	T3,T4		;Page number within cylinder
   830	000657'	331005	000000*		SKIPL	UNICHR(U)	;Formatted in blocks?
   831	000660'	242400	000002		 LSH	T3,P2BLSH	;Yes, convert to block within cylinder
   832	000661'	135640	000000*		LDB	P2,UNYPPT	;Get pages per track  (3330=5, 3350=7)
   833	000662'	331005	000657*		SKIPL	UNICHR(U)	;Formatted in blocks?
   834	000663'	135640	000514*		 LDB	P2,UNYBPT	;Yes, get blocks per track (3330=18)
   835	000664'	230400	000015		IDIV	T3,P2		;T3 gets head number, T4 record within track
   836	000665'	137400	002540'		DPB	T3,[POINT 16,1(P3),15]	;Set head number
   837	000666'	274640	000011		SUB	P2,T4		;Find records to end of track
   838	000667'	335005	000662*		SKIPGE	UNICHR(U)	;Formatted in pages?
   839	000670'	242640	000002		 LSH	P2,P2BLSH	;Yes, get blocks until end of track
   840	000671'	242640	000007		LSH	P2,B2WLSH	;# of words until end of track
   841	000672'	271440	000001		ADDI	T4,1		;Record numbers start at 1 not 0
   842	000673'	137440	002541'		DPB	T4,[POINT 8,1(P3),23]	;Set record number
   843	000674'	275700	000002		SUBI	P3,2		;Adjust data pointer
   844	000675'	263040	000000		POPJ	P,
   845
   846
   847				SUBTTL	READ/WRITE -- BPXSSC - Set up a SEEK command
   848
   849				;Some command (READ or WRITE) is in T2.
   850				;P1 is updated to point past the SEEK command
   851				;P3 is points to two before where the SEEK data is stored
   852
   853	000676'	621340	777774	BPXSSC:	TLZ	T2,(BYTE (8) 377,377)	;Leave device number
   854	000677'	661340	164034		TLO	T2,(BYTE (8) BYTMOD+IGNLEN,SEEK)
   855	000700'	202354	000000	BPXSC1:	MOVEM	T2,(P1)		;Store SEEK or SEEKCY command
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 14-2
CPXKON.MAC	20-SEP-87 12:59		READ/WRITE -- BPXSSC - Set up a SEEK command

   856	000701'	205400	777200		MOVSI	T3,(BYTE (12) -6) ;SEEK data is 6 bytes
   857	000702'	541416	000002		HRRI	T3,2(P3)	;Where the SEEK data bytes are
   858	000703'	202414	000001		MOVEM	T3,1(P1)	;Store pointer to seek data
   859	000704'	271600	000002		ADDI	P1,2		;Increment to next command location
   860	000705'	263040	000000		POPJ	P,
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 15
CPXKON.MAC	20-SEP-87 12:59		READ/WRITE -- BPXSSR - Set up a search ID= & TIC

   861				SUBTTL	READ/WRITE -- BPXSSR - Set up a search ID= & TIC
   862
   863	000706'	621340	777774	BPXSSR:	TLZ	T2,(BYTE (8) 377,377)	;Leave device number
   864	000707'	661340	162304		TLO	T2,(BYTE (8) BYTMOD+OFFSET,SRCIDE) ;Search ID equal
   865	000710'	202354	000000		MOVEM	T2,(P1)		;(offset so SRCIDE and SEEK use same data)
   866	000711'	505400	777300		HRLI	T3,(BYTE (12) -5) ;Search data is 5 bytes
   867	000712'	541416	000002		HRRI	T3,2(P3)	;Address of data bytes
   868	000713'	202414	000001		MOVEM	T3,1(P1)	;Store pointer for command
   869	000714'	550400	000014		HRRZ	T3,P1		;Address of this search command
   870	000715'	661400	200000		TLO	T3,TICBIT	;Generate TIC to SEARCH ID=
   871	000716'	202414	000002		MOVEM	T3,2(P1)	;Store TIC
   872	000717'	271600	000003		ADDI	P1,3		;Increment to next command location
   873	000720'	263040	000000		POPJ	P,
   874
   875
   876				SUBTTL	READ/WRITE -- BPXSDA - Set device address
   877				;Returns with T2 containing only the device address
   878
   879	000721'	135340	000615*	BPXSDA:	LDB	T2,UNYPUN	;Get unit number
   880	000722'	270342	000616*		ADD	T2,KONBSU(J)	;Offset for device address of first unit
   881	000723'	405340	000377		ANDI	T2,377
   882	000724'	242340	000014		LSH	T2,^D<35-23>	;Position to 3rd byte (bits 16-23)
   883	000725'	263040	000000		POPJ	P,
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 16
CPXKON.MAC	20-SEP-87 12:59		BPXADD -- Add a page to the request list.

   884				SUBTTL	BPXADD -- Add a page to the request list.
   885
   886				COMMENT &
   887				T1 has number of pages, T2 has physical memory page number.
   888				P1(RH) points to next free word in command list.
   889				P1(LH) points to the SEARCH ID= command as set up by BPXSSR.
   890				P2 has words until end of track
   891				P4 has words until end of cylinder
   892				P3(RH) points to next free double word for storing record # bytes.
   893				P3(LH) is one of the following:
   894
   895				BPXA0	Add a transfer, do not start unit.
   896				BPXA1	Add a transfer then start unit (DOES NOT WAIT FOR BPXFIN).
   897				BPXA4	Add a transfer but set up the SEARCH ID= and data for search.
   898				TRNHD1	Need a SEEK HEAD to go to next track in current cylinder.
   899				&
   900
   901				;P034/P05 Changed to use pages instead of words.
   902				;	  T1 has number of pages to transfer, T2 has physical page number
   903				;T1 is almost always 1 on a multi-pack system
   904
   905	000726'	313300	000163'	BPXADD::CAMLE	T1,BPXMAX	;Save biggest request
   906	000727'	202300	000163'		 MOVEM	T1,BPXMAX	;For curiosity's sake
   907				IFN FTDPAG,<
   908					LSH	T1,P2WLSH	;# of words to transfer
   909					LSH	T2,P2WLSH	;Word address of physical page in memory
   910				>
   911	000730'	271340	000001		ADDI	T2,1		;Increment transfer address (for SETCA & ADD)
   912	000731'	261040	000007	BPXAD1:	PUSH	P,T2		;Continue here from interrupt level (FILFAK)
   913	000732'	554400	000016		HLRZ	T3,P3		;Dispatch address in LH of P3
   914	000733'	254010	000000		JRST	(T3)		;Goto BPXA0,BPXA1,BPXA4,TRNHD1
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 17
CPXKON.MAC	20-SEP-87 12:59		BPXADD -- BPXA0/BPXA1/BPXA4 - Add to channel command list

   915				SUBTTL	BPXADD -- BPXA0/BPXA1/BPXA4 - Add to channel command list
   916
   917				;BPXA0 - Use search arg from BPXSSR, don't start disk yet
   918				;BPXA1 - Use search arg from BPXSSR, start disk unit before list is completed
   919				;BPXA4 - Call SETCMD to build search arg, don't start disk yet
   920				;  T1 has word count, stack has modified word address
   921				;WARNING: Use BPXA1 at your own risk.  It's safer to use BPXA0
   922
   923	000734'	260040	001043'	BPXA1:	PUSHJ	P,SETXFR	;Set up the transfer (1 block or 1 page)
   924	000735'	202414	777777		MOVEM	T3,-1(P1)	;Store word count and address
   925	000736'	260040	001063'		PUSHJ	P,STRTUP	;Start channel (before command list is done!!!)
   926	000737'	254000	000743'		JRST	BPXAC3		;Go do next block or page
   927
   928				;Loop back here to add 1 block at a time to transfer list
   929				;On a 3330 formatted in blocks, some page requests are split across tracks.
   930
   931	000740'	260040	001030'	BPXA4:	PUSHJ	P,SETCMD	;Inc record number, build search ID= for it
   932	000741'	260040	001043'	BPXA0:	PUSHJ	P,SETXFR	;Set up the transfer (1 block or 1 page)
   933	000742'	202414	777777		MOVEM	T3,-1(P1)	;Store word count and address
   934
   935	000743'	323640	000751'	BPXAC3:	JUMPLE	P2,TRNCNT	;End of track or command list full
   936	000744'	505700	000740'		HRLI	P3,BPXA4	;Set new dispatch address
   937	000745'	327300	000740'		JUMPG	T1,BPXA4	;Do more records if count nonzero
   938	000746'	350001	777777	T2POP1:	AOS	-1(P)		;Skip return (meaning OK to add more)
   939	000747'	262040	000007	T2POPJ:	POP	P,T2		;Clean up stack
   940	000750'	263040	000000		POPJ	P,
   941
   942				SUBTTL	BPXADD -- TRNCNT - Truncate count on track boundry
   943
   944				;Get here from BPXAC3 when P2=0, meaning end of track.
   945				;If there is room in UNICOM to continue building a command list, then reset
   946				;P2 to a smaller limit and continue on next surface.  If there is not room in
   947				;UNICOM, then set UNICNA+UNICNC to call FILFAK when command list is done.
   948				;Called with word address on stack, remaining word count in T1
   949
   950	000751'	323740	000747'	TRNCNT:	JUMPLE	P4,T2POPJ	;Give error return of at end of cylinder
   951	000752'	135440	002542'		LDB	T4,[POINT 8,3(P3),23]	;Get last record number
   952	000753'	135400	000663*		LDB	T3,UNYBPT	;Get highest block number
   953	000754'	335005	000667*		SKIPGE	UNICHR(U)	;Formatted in pages?
   954	000755'	135400	000661*		 LDB	T3,UNYPPT	;Get highest page number
   955	000756'	312440	000010		CAME	T4,T3		;Last record on the track?
   956	000757'	254000	000747'		 JRST	T2POPJ		;No, command list area in UNICOM is full
   957
   958				;Hit end of current track.  See if can continue building list for next head.
   959	000760'			CPXBP1::	;Temp label for DDT
   960	000760'	261040	000010		PUSH	P,T3		;Save max record #
   961	000761'	550400	000016		HRRZ	T3,P3		;Get end of free space
   962	000762'	275414	000002		SUBI	T3,2(P1)	;See how much more will fit in UNICOM
   963	000763'	231400	000007		IDIVI	T3,5+2		;5 command words, 2 words of data per request
   964	000764'	262040	000011		POP	P,T4
   965	000765'	313400	000011		CAMLE	T3,T4		;More than enough room for a track?
   966	000766'	200400	000011		 MOVE	T3,T4		;Yes, stop at end of track
   967	000767'	335005	000754*		SKIPGE	UNICHR(U)	;If formatted in pages,
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 17-2
CPXKON.MAC	20-SEP-87 12:59		BPXADD -- TRNCNT - Truncate count on track boundry

   968	000770'	242400	000002		 LSH	T3,P2BLSH	; temporarily convert to blocks
   969	000771'	242400	000007		LSH	T3,B2WLSH	;Number of words
   970	000772'	323300	001003'		JUMPLE	T1,TRNCN1	;Just reset P2 if no more words to transfer
   971	000773'	311300	000017		CAML	T1,P4		;Almost impossible for T1 to exceed P4
   972	000774'	200300	000017		 MOVE	T1,P4		;Don't let transfer cross cylinder
   973	000775'	200740	000006		MOVE	P4,T1		;Fake end of cylinder to be after this transfer
   974	000776'	317300	000010		CAMG	T1,T3		;Will remainder of transfer fit in UNICOM?
   975	000777'	254000	001006'		 JRST	TRNHED		;Yes, switch to new head
   976	001000'	262045	000621*		POP	P,UNICNA(U)	;No, set continue address for interrupt level
   977	001001'	202305	000533*		MOVEM	T1,UNICNC(U)	;Set continue word count for FILFAK
   978	001002'	263040	000000		POPJ	P,		;Error return, no more possible this time
   979
   980	001003'	305400	001000	TRNCN1:	CAIGE	T3,1000		;Room for one more page? (4 more blocks)
   981	001004'	254000	000747'		 JRST	T2POPJ		;No, say out of room
   982	001005'	505700	001015'		HRLI	P3,TRNHD1	;Set new dispatch address
   983	001006'	135640	000753*	TRNHED:	LDB	P2,UNYBPT	;Get # of words per track
   984	001007'	242640	000007		LSH	P2,B2WLSH	; ...
   985	001010'	311640	000010		CAML	P2,T3		;Is calculated limit in T3 smaller?
   986	001011'	200640	000010		 MOVE	P2,T3		;Yes, enough room to handle only this much
   987	001012'	311640	000017		CAML	P2,P4		;Don't go past end of cylinder
   988	001013'	200640	000017		 MOVE	P2,P4		;P2 and P4 both set up now
   989	001014'	323300	000746'		JUMPLE	T1,T2POP1	;Just skip return if done with this request
   990
   991				;Time to start a new surface.  Select next head.
   992
   993	001015'	120416	000002	TRNHD1:	DMOVE	T3,2(P3)	;Get previous track and head numbers
   994	001016'	630440	002543'		TDZ	T4,[BYTE (8) 0,0,377]	;Zero record number
   995	001017'	270440	002544'		ADD	T4,[BYTE (8) 0,1,001]	;Increment head number, set record 1
   996	001020'	124416	000000		DMOVEM	T3,(P3)		;New CYL,HEAD,RECORD
   997	001021'	554340	000014		HLRZ	T2,P1		;Get pointer to most recent SEARCH ID=
   998	001022'	200347	000003		MOVE	T2,3(T2)	;Get device # from READ or WRITE command
   999	001023'	275700	000002		SUBI	P3,2		;Fake up P3 since BPXSSC uses 2(P3)
  1000	001024'	260040	000676'		PUSHJ	P,BPXSSC	;Build a SEEK command to next head, this cyl
  1001	001025'	271700	000002		ADDI	P3,2		;Cancel SUBI P3,2
  1002	001026'	260040	001033'		PUSHJ	P,SETCM1	;Copy rest of SEARCH,TIC,READ
  1003				;Word count in T1, word address on stack
  1004	001027'	254000	000741'		JRST	BPXA0		;And add another block/page to the list
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 18
CPXKON.MAC	20-SEP-87 12:59		BPXADD -- SETCMD - Set up new SEARCH, TIC, and READ/WRITE commands

  1005				SUBTTL	BPXADD -- SETCMD - Set up new SEARCH, TIC, and READ/WRITE commands
  1006				;This makes a modified copy of the data set up by a previous call to BPXSSR
  1007
  1008	001030'	120416	000002	SETCMD:	DMOVE	T3,2(P3)	;Get the 6 bytes of data for SEARCH ID=
  1009	001031'	271440	010000		ADDI	T4,1B23		;Inc record # (count in P2 prevents overflow)
  1010	001032'	124416	000000		DMOVEM	T3,(P3)		;Store new SEARCH ID= data
  1011
  1012				;Enter here from TRNHD1
  1013
  1014	001033'	200400	000014	SETCM1:	MOVE	T3,P1		;LH = addr of SEARCH, RH = first avail word
  1015	001034'	251414	000004		BLT	T3,4(P1)	;Copy SEARCH,TRANS,TIC,READ,TRANS
  1016	001035'	542714	000001		HRRM	P3,1(P1)	;Update TRANS for SEARCH
  1017	001036'	542614	000002		HRRM	P1,2(P1)	;Update addr in TIC
  1018	001037'	507000	000014		HRLS	P1		;LH = addr of most recent SEARCH
  1019	001040'	271600	000005		ADDI	P1,5		;Now P1 is set for next time
  1020	001041'	275700	000002		SUBI	P3,2		;And P3
  1021	001042'	263040	000000		POPJ	P,
  1022
  1023
  1024				SUBTTL	BPXADD -- SETXFR - Set up transfer commands
  1025				;T1 has word count, -1(P) has word address
  1026				;P2 has words to end of track, P4 has words to end of cylinder
  1027				;Returns T3 = data for READ command
  1028				;  T1,-1(P),P2,P4 updated
  1029
  1030	001043'	201400	000200	SETXFR:	MOVEI	T3,200		;128 words per block
  1031	001044'	335005	000767*		SKIPGE	UNICHR(U)	;Formatted in pages?
  1032	001045'	201400	001000		 MOVEI	T3,1000		;Yes, 512 words per page
  1033				;*;	CAMLE	T3,T1		;Less than a full page?
  1034				;*;	 MOVE	T3,T1		;Yes, do a partial block
  1035	001046'	272405	000643*		ADDM	T3,UNISWC(U)	;Words to be transfered
  1036	001047'	274300	000010		SUB	T1,T3		;Adjust count
  1037	001050'	274640	000010		SUB	P2,T3		;Words remaining on track
  1038	001051'	274740	000010		SUB	P4,T3		;Words remaining on cylinder
  1039	001052'	200341	777777		MOVE	T2,-1(P)	;Word address in PDP-10 memory
  1040	001053'	272401	777777		ADDM	T3,-1(P)	;Update transfer address
  1041	001054'	450400	000000		SETCA	T3,		;Two's complement = one's complement + 1
  1042	001055'	241400	777764		ROT	T3,-^D12	;BYTE(12)^-WORDCOUNT(24)-1
  1043	001056'	270400	000007		ADD	T3,T2		;T2 has had 1 added to it
  1044	001057'	263040	000000		POPJ	P,		;T3 has BYTE(12)-WORDCOUNT(24)ADDRESS
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 19
CPXKON.MAC	20-SEP-87 12:59		BPXFIN - Finish up the command list

  1045				SUBTTL	BPXFIN - Finish up the command list
  1046				;P1 points to next word in command list, P2 has words to end of cylinder
  1047
  1048	001060'	205400	400000	BPXFIN::MOVSI	T3,(BYTE (8) 200) ;HALT command
  1049	001061'	202414	000000		MOVEM	T3,(P1)		;Set HALT and do not wait for CLEAR STATUS
  1050	001062'	506605	001046*		HRLM	P1,UNISWC(U)	;Save end of unit pointer
  1051					PFALL	STRTUP		;Start unit and return
  1052
  1053				SUBTTL	STRTUP - Start up the disk unit
  1054
  1055	001063'	550345	000606*	STRTUP:	HRRZ	T2,UNICOM(U)	;Address of first word in command list
  1056	001064'	505340	001500		HRLI	T2,(15B11)	;Set status to START DEVICE
  1057	001065'	135400	002545'		LDB	T3,[POINT 8,(T2),23]	;Get unit number
  1058	001066'	137400	002510'		DPB	T3,[POINT 8,T2,7]	;Store in 1st byte of T2
  1059	001067'	274402	000722*		SUB	T3,KONBSU(J)	;Get first relative unit number
  1060	001070'	554442	000102*		HLRZ	T4,KONBMX(J)	;Address of start of block mux device list
  1061	001071'	270400	000011		ADD	T3,T4		;Addr for this unit
  1062	001072'	202350	000000		MOVEM	T2,(T3)		;Store pointer to command list
  1063	001073'	200347	000007		MOVE	T2,7(T2)	;Get read or write command
  1064	001074'	404340	002511'		AND	T2,[BYTE (8)0,377,377,0]	;Keep CMD and UNIT only
  1065	001075'	434345	000652*		IOR	T2,UNICYL(U)	;Put cylinder # in low-order 12 bits
  1066	001076'	660340	004000		TRO	T2,4000		;Set this nonzero to signify command
  1067	001077'	350400	000113*		AOS	T3,SAXPTR##	;Increment pointer
  1068	001100'	405400	000777		ANDI	T3,777		;Wrap within buffer
  1069	001101'	202400	001077*		MOVEM	T3,SAXPTR##
  1070	001102'	202350	000114*		MOVEM	T2,SAXBUF##(T3)	;Store command for debugging
  1071	001103'	550342	000136*		HRRZ	T2,KONCHN(J)	;Get channel block address
  1072	001104'	256007	000000*		XCT	CHNIIE(T2)	;Enable interrupts
  1073	001105'	256007	000204*		XCT	CHNGO(T2)	;Tell it to go
  1074	001106'	263040	000000		POPJ	P,
  1075
  1076				SUBTTL	BPXPOS - Position request
  1077
  1078	001107'	260040	000605'	BPXPOS::PUSHJ	P,BPXSET	;Set up command addresses in P1 and P3
  1079	001110'	260040	000646'		PUSHJ	P,BPXSSO	;Set up SEEK and SEARCH commands
  1080	001111'	260040	000721'		PUSHJ	P,BPXSDA	;Set device address in T2
  1081	001112'	661340	164054		TLO	T2,(BYTE (8) BYTMOD+IGNLEN,SEEKCY) ;Use other seek command
  1082	001113'	260040	000700'		PUSHJ	P,BPXSC1	;Set the SEEK
  1083	001114'	254000	001060'		JRST	BPXFIN		;Store HALT, start device
  1084
  1085				;RECALIBRATE REQUEST
  1086
  1087	001115'	260040	000721'	BPXRCL::PUSHJ	P,BPXSDA	;Set device address in T2
  1088	001116'	661340	504114		TLO	T2,(BYTE (8) NOXFR,RECAL) ;No transfer of data, do a RECAL
  1089	001117'	200605	001063*		MOVE	P1,UNICOM(U)	;Set up P1 to command list
  1090	001120'	202314	000000		MOVEM	T1,(P1)		;Store at beginning of list
  1091	001121'	344600	001060'	BPXRCC:	AOJA	P1,BPXFIN	;Increment P1, store HALT, start device
  1092
  1093				;Perform latency calculation for disk page number specified in T1.
  1094				; The latency is the time required for the disk to rotate until the requested
  1095				; page is under the heads.  The number of milliseconds is returned in T1.
  1096
  1097				;Actually, this routine reads the buffered error log from SA10 since
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 19-2
CPXKON.MAC	20-SEP-87 12:59		BPXPOS - Position request

  1098				;reading the rotational position sensing returns invalid data.
  1099
  1100	001122'	260040	000605'	BPXLTM::PUSHJ	P,BPXSET	;Set up P1 and P3 to point to command list
  1101	001123'	260040	000721'		PUSHJ	P,BPXSDA	;Set the device address
  1102	001124'	661340	165220		TLO	T2,(BYTE (8) BYTMOD+IGNLEN,RRBL) ;Read and reset buffered log
  1103	001125'	202354	000000		MOVEM	T2,(P1)		;Store in command list
  1104	001126'	205400	775000		MOVSI	T3,(BYTE (12) -^D24) ;Want to get 24 bytes back
  1105	001127'	541405	000327*		HRRI	T3,UNISND(U)	;Store SENSE data here
  1106	001130'	202414	000001		MOVEM	T3,1(P1)
  1107	001131'	344600	001121'		AOJA	P1,BPXRCC	;Increment P1 twice and start device
  1108
  1109				SUBTTL	BPXSTP - Stop disk unit if HUNG TIMER goes off
  1110				;Preserves T1, error return if device not going, skip if it is now stopped
  1111
  1112	001132'			STPPTR:	BLOCK	1		;Copy of SAXPTR
  1113	001133'			SAXSTP:	BLOCK	1000		;Copy of SAXBUF after a HUNG or THUNG
  1114
  1115	002133'	200340	002546'	BPXSTP::MOVE	T2,[SAXBUF##,,SAXSTP]
  1116	002134'	251340	002132'		BLT	T2,SAXSTP+777	;Save tracks for hung device
  1117	002135'	200340	001101*		MOVE	T2,SAXPTR##
  1118	002136'	202340	001132'		MOVEM	T2,STPPTR	;Save pointer into ring buffer
  1119	002137'	135340	000721*		LDB	T2,UNYPUN	;GET THE UNIT NUMBER
  1120	002140'	554402	001070*		HLRZ	T3,KONBMX(J)	;AND THE BLOCK MUX ADDRESS
  1121	002141'	270340	000010		ADD	T2,T3
  1122	002142'	135400	002547'		LDB	T3,[POINT 4,(T2),11]	;GET THE CONTROL CODE
  1123	002143'	306400	000017		CAIN	T3,17		;AND SEE IF ITS STOP
  1124	002144'	263040	000000		 POPJ	P,		;YES, FORCE UNIT RESTART
  1125	002145'	550342	001103*		HRRZ	T2,KONCHN(J)	;GET A POINTER TO CHANNEL
  1126	002146'	200407	000000*		MOVE	T3,CHNACT(T2)	;COUNT OF INTERUPTS THIS CHANNEL
  1127	002147'	312405	000000*		CAME	T3,UNIACT(U)	;SAME AS FOR UNIT
  1128	002150'	254000	002155'		 JRST	BPXST2		;NO, MAYBE MISSED GO OR SOME OTHER
  1129								;UNIT HAS DONE A SEL RESET OR JUST
  1130								;WAITING FOR SOMEONE ELSE
  1131	002151'	200407	001105*		MOVE	T3,CHNGO(T2)	;AN APPROPRIATE COMMAND
  1132	002152'	640400	000700		TRC	T3,7B29		;CONVERT GO TO RESET (SELECTIVE)
  1133	002153'	256000	000010		XCT	T3		;ISSUE IT
  1134	002154'	354007	002146*		AOSA	CHNACT(T2)	;AND PREVENT ONES FROM OTHER UNITS
  1135								;SEL RESET SHOULD CAUSE CONTROL CHECK ON HUNG UNIT
  1136	002155'	202405	002147*	BPXST2:	 MOVEM T3,UNIACT(U)	;SO WE KNOW NEXT TIME THROUGH
  1137	002156'	256007	001104*		XCT	CHNIIE(T2)	;ENABLE AND GO JUST IN CASE
  1138	002157'	256007	002151*		XCT	CHNGO(T2)	;WE MAY HAVE LOST A CONO BIT
  1139	002160'	254000	000000*		JRST	CPOPJ1		;FORCE NO RESTART IN DEV INDEP. CODE
  1140
  1141				SUBTTL	BPXUPA - Skip return if Kontroller is up
  1142
  1143	002161'	550402	002145*	BPXUPA::HRRZ	T3,KONCHN(J)
  1144	002162'	135340	002550'		LDB	T2,[POINT 7,CHNGO(T3),9]	;GET DEVICE
  1145	002163'	200300	002551'		MOVE	T1,[CONI T1]
  1146	002164'	137340	002552'		DPB	T2,[POINT 7,T1,9]
  1147	002165'	256000	000006		XCT	T1
  1148	002166'	322300	000000*		JUMPE	T1,CPOPJ	;NONE, NO SA-10
  1149	002167'	260040	002205'		PUSHJ	P,RSTSA
  1150	002170'	550342	001067*		HRRZ	T2,KONBSU(J)
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 19-3
CPXKON.MAC	20-SEP-87 12:59		BPXUPA - Skip return if Kontroller is up

  1151	002171'	201300	002203'		MOVEI	T1,UPCHK
  1152	002172'	260040	002211'		PUSHJ	P,DOIT
  1153	002173'	323300	002166*		JUMPLE	T1,CPOPJ	;DID NOT, GIVE UP
  1154	002174'	205300	100000		MOVSI	T1,SELER
  1155	002175'	612311	000000		TDNE	T1,(T4)		;IS IT SELECT ERROR?
  1156	002176'	263040	000000		 POPJ	P,		;YES, OFF-LINE
  1157	002177'	201310	000000*		MOVEI	T1,CHNBMX(T3)
  1158	002200'	661300	600000		TLO	T1,600000
  1159	002201'	202311	777777		MOVEM	T1,-1(T4)	;RESET LIST BASE POINTER TO BLOCK MULTIPLEXER MODE
  1160	002202'	254000	002160*		JRST	CPOPJ1
  1161
  1162	002203'	504014	000000	UPCHK:	BYTE (8) NOXFR,3	;NO-OP
  1163	002204'	000000	000000		0
  1164
  1165	002205'	200310	002157*	RSTSA:	MOVE	T1,CHNGO(T3)	;RESET SA-10
  1166	002206'	541300	600000		HRRI	T1,1B18!1B19
  1167	002207'	256000	000006		XCT	T1
  1168	002210'	263040	000000		POPJ	P,
  1169
  1170	002211'	200450	000603*	DOIT:	MOVE	T4,CHNSTB(T3)	;POINTER TO BASE ADR
  1171	002212'	137340	002553'		DPB	T2,[POINT 8,(T1),23]	;SET DEVICE
  1172	002213'	661300	200000		TLO	T1,(1B1)
  1173	002214'	250311	777777		EXCH	T1,-1(T4)	;SET CMD
  1174	002215'	402011	000000		SETZM	(T4)
  1175	002216'	261040	000006		PUSH	P,T1
  1176				IFCPU (KL),<;IF KL, MUST SWEEP CACHE TO GET COMMAND TO MEMORY.
  1177	002217'	260040	000000*		CSHUNL			;START SWEEP, GET OLD NUMBER IN T1
  1178	002220'	316300	000000*		CAMN	T1,CSUCNT##	;WAIT UNTIL NUMBER INCREMENTS
  1179	002221'	254000	002220'		 JRST	.-1		;BEFORE SETTING GO FLAG IN CHANNEL.
  1180				>;END IFCPU (KL)
  1181	002222'	200310	002205*		MOVE	T1,CHNGO(T3)
  1182	002223'	620300	000007		TRZ	T1,7		;CLEAR PIA
  1183	002224'	256000	000006		XCT	T1
  1184	002225'	201300	141520		MOVEI	T1,^D50000
  1185	002226'	336011	000000		SKIPN	(T4)
  1186	002227'	367300	002226'		SOJG	T1,.-1
  1187	002230'	262051	777777		POP	P,-1(T4)
  1188	002231'	263040	000000		POPJ	P,
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 20
CPXKON.MAC	20-SEP-87 12:59		BPXCPY - Determine capacity and status of unit

  1189				SUBTTL	BPXCPY - Determine capacity and status of unit
  1190
  1191	002232'	135340	002137*	BPXCPY::LDB	T2,UNYPUN
  1192	002233'	210400	000007		MOVN	T3,T2
  1193	002234'	205300	400000		MOVSI	T1,(1B0)	;SET A BIT FLAG THAT UNIT IS IN TEST
  1194	002235'	242310	000000		LSH	T1,(T3)
  1195	002236'	436302	000274*		IORM	T1,KONCPY(J)
  1196	002237'	260040	000721'		PUSHJ	P,BPXSDA	;Set device address in T2
  1197	002240'	661340	164054		TLO	T2,(BYTE (8) BYTMOD+IGNLEN,SEEKCY)
  1198	002241'	200305	001117*		MOVE	T1,UNICOM(U)
  1199	002242'	202346	000000		MOVEM	T2,(T1)
  1200	002243'	200340	002314'		MOVE	T2,SEK600	;A SEEK TO CYL 600
  1201	002244'	202346	000001		MOVEM	T2,1(T1)
  1202	002245'	205340	400000		MOVSI	T2,(BYTE (8) 200)
  1203	002246'	202346	000002		MOVEM	T2,2(T1)
  1204	002247'	201300	001130		MOVEI	T1,^D600
  1205	002250'	202305	001075*		MOVEM	T1,UNICYL(U)
  1206	002251'	402005	000000*		SETZM	UNIONC(U)	;Set to 0 until seek to cyl 600 is done
  1207	002252'	135700	002232*		LDB	P3,UNYPUN
  1208	002253'	550345	002241*		HRRZ	T2,UNICOM(U)	;BASE ADDRESS OF CMD LST
  1209	002254'	260040	000076'		PUSHJ	P,STRTU		;PUT THE START IN THE BLOCK MUX LIST
  1210	002255'	550302	002161*		HRRZ	T1,KONCHN(J)
  1211	002256'	256006	002156*		XCT	CHNIIE(T1)	;MAKE SURE INTERUPT ENABLED
  1212	002257'	256006	002222*		XCT	CHNGO(T1)	;SET GO FLAG
  1213	002260'	263040	000000		POPJ	P,
  1214
  1215
  1216				;Status bits returned during capacity test of a 3650
  1217				;200503000000	Status modifier + busy (control unit is busy for 300-317)
  1218				;204303000000	Length error + CU end + busy on unit 300
  1219				;000063000000	CH end + dev end on 300 (control unit not busy anymore)
  1220				;000073000000	CH end + dev end + unit check on 300 (seek to cyl 600 failed)
  1221				;000063000000	CH end + dev end (read count on record 0 succeeded)
  1222				;000063000000	CH end + dev end (read primary HOM page succeeded)
  1223				;000063000000	CH end + dev end (read secondary HOM page succeeded)
  1224				;000073010000	CH end + dev end + unit check on 301 (seek to cyl 600 failed)
  1225				;000063010000	  repeat these 4 for each unit on BPA
  1226				;000063010000	
  1227				;000063010000	
  1228				;200503400000	Status modifier + busy (control unit is busy for 340-357)
  1229				;		  repeat above for each unit
  1230
  1231				;HERE WHEN WE GET AN INTERUPT FROM THE UNIT IN TEST
  1232
  1233	002261'	200345	002250*	BPXCNX:	MOVE	T2,UNICYL(U)	;T1 has KONCPY bit
  1234	002262'	302340	001130		CAIE	T2,^D600	;Attempt to seek to cylinder 600?
  1235	002263'	254000	002355'		 JRST	BPXCP2		;No, check sense bits
  1236	002264'	622600	000040		TRZE	P1,ERRCMR	;Is COMMAND REJECT on?
  1237	002265'	634400	000010		 TDZA	T3,T3		;Yes, 3350/3650 does not go up to 600
  1238	002266'	201400	000001		  MOVEI	T3,1		;No, 3330/3675 won't reject this command
  1239	002267'	137400	000626*		DPB	T3,UNYUTP	;0=3350, 1=3330 (2=3350-pages, 3=3330-pages)
  1240	002270'	326600	002352'		JUMPN	P1,ERROFL	;Anything else is an error, call it OFF-LINE
  1241	002271'	262040	000006		POP	P,T1		;Clear stack
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 20-2
CPXKON.MAC	20-SEP-87 12:59		BPXCPY - Determine capacity and status of unit

  1242	002272'	402005	002261*		SETZM	UNICYL(U)	;The next test will position to 0
  1243	002273'	550345	002253*		HRRZ	T2,UNICOM(U)	;Start of command list
  1244	002274'	540300	000007		HRR	T1,T2		;Destination
  1245				IF2,<PRINTX Need to re-implement the write-enable test for 3650>
  1246				REPEAT 0,<	;IF 3330-I AND 3330-II ONLY
  1247					HRLI	T1,WRT100		;NOW TRY TO WRITE ON RECORD 100
  1248					BLT	T1,11(T2)		;PUT IN COMMAND LIST
  1249					ADDM	T2,6(T2)		;ADJUST THE TIC
  1250					LDB	T3,UNYPUN
  1251					ADD	T3,KONBSU(J)		;GENERATE UNIT NUMBER
  1252					DPB	T3,[POINT 8,0(T2),23]	;IN SEEKCY
  1253					DPB	T3,[POINT 8,2(T2),23]	;AND IN SEEK
  1254					DPB	T3,[POINT 8,4(T2),23]	;AND IN SEARCH ID =
  1255					DPB	T3,[POINT 8,7(T2),23]	;AND IN WRITE
  1256				>  ;End IFE FT3350
  1257	002275'	505300	002333'		HRLI	T1,RED001		;Now read COUNT field on record 001
  1258	002276'	251307	000013		BLT	T1,13(T2)		;Put in command list
  1259	002277'	272347	000006		ADDM	T2,6(T2)		;Adjust the TIC
  1260	002300'	272347	000010		ADDM	T2,10(T2)		;Where to store the data
  1261	002301'	135400	002252*		LDB	T3,UNYPUN
  1262	002302'	270402	002170*		ADD	T3,KONBSU(J)		;Generate unit number (300-377)
  1263	002303'	137400	002545'		DPB	T3,[POINT 8,0(T2),23]	;Put in SEEKCY
  1264	002304'	137400	002554'		DPB	T3,[POINT 8,2(T2),23]	; and in SEEK
  1265	002305'	137400	002555'		DPB	T3,[POINT 8,4(T2),23]	; and in SEARCH ID =
  1266	002306'	137400	002556'		DPB	T3,[POINT 8,7(T2),23]	; and in READ COUNT
  1267									;T3 has unit, T2 points from UNICOM
  1268	002307'	260040	000100'		PUSHJ	P,STRTU1		;FILL IN BLOCK MX LIST
  1269	002310'	254000	000046'		JRST	DISMIS			;AND GO
  1270
  1271				SUBTTL	BPXHRD - Nothing special for hard errors
  1272	002311'	263040	000000	BPXHRD::POPJ	P,		;The sense bytes have already been read
  1273
  1274				SUBTTL	BPXSFT - Nothing special for soft errors
  1275	002312'	263040	000000	BPXSFT::POPJ	P,		;The sense bytes have already been read
  1276
  1277				SUBTTL	BPXOFS - Nothing special for offset recovery
  1278	002313'	263040	000000	BPXOFS::POPJ	P,		;The IBM controller has already done it
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350

  1279				SUBTTL	Capacity test data for 3330 or 3350
  1280
  1281				;3330-II has 808 cylinders.  The attempt to seek to cylinder 600 will succeed.
  1282				;3350 has only 555 cylinders.  The attempt to seek to cylinder 600 will fail.
  1283
  1284	002314'	000000	000000*	SEK600:	BYTE (12) -6 (24) .+1	;6 bytes, address
  1285	002315'	000000	022600		BYTE (16) 0,^D600,0	;Bin 0, cylinder 600, head 0
	002316'	000000	000000
  1286
  1287				;Test for write-enable, attempt to write one byte into record 100.
  1288				;PAKCOP formats the disk to have records 1-18 and 100.
  1289
  1290	002317'	164054	000000	WRT100:	BYTE (8) BYTMOD+IGNLEN,SEEKCY	;+0 Use SEEKCY to fake test at DATACK+3
  1291	002320'	000000	000000*		BYTE (12) -6 (24) SEK0		;+1
  1292	002321'	164034	000000		BYTE (8) BYTMOD+IGNLEN,SEEK	;+2 So it really positions
  1293	002322'	000000	000000*		BYTE (12) -6 (24) SEK0		;+3
  1294	002323'	166304	000000		BYTE (8) BYTMOD+IGNLEN+OFFSET,SRCIDE ;+4 Search for record 100
  1295	002324'	000000	000000*		BYTE (12) -5 (24) SEK0		;+5
  1296	002325'	200000	000004		TICBIT,,<.-2>-WRT100		;+6 Transfer back to +4
  1297	002326'	164024	000000		BYTE (8) BYTMOD+IGNLEN,BPXWT	;+7
  1298	002327'	000000	000000*		BYTE (12) -1 (24) SEK0		;+10 Write 1 byte of zero
  1299	002330'	400000	000000		BYTE (8) 200			;+11 End of command list
  1300
  1301	002331'	000000	000000	SEK0:	BYTE (16) 0,0,0 (8) 100		;BIN 0 CYL 0 HEAD 0 REC 100
	002332'	000001	000000
  1302
  1303				;Read the COUNT field of CYL 0 HEAD 0 REC 1
  1304
  1305	002333'	164054	000000	RED001:	BYTE (8) BYTMOD+IGNLEN,SEEKCY	;+0 Use SEEKCY to fake test at DATACK+3
  1306	002334'	000000	000000*		BYTE (12) -6 (24) SEK1		;+1
  1307	002335'	164034	000000		BYTE (8) BYTMOD+IGNLEN,SEEK	;+2 So it selects right head
  1308	002336'	000000	000000*		BYTE (12) -6 (24) SEK1		;+3
  1309	002337'	166304	000000		BYTE (8) BYTMOD+IGNLEN+OFFSET,SRCIDE ;+4 Search for record 1
  1310	002340'	000000	000000*		BYTE (12) -5 (24) SEK1		;+5
  1311	002341'	200000	000004		TICBIT,,<.-2>-RED001		;+6 Transfer back to +4
  1312	002342'	164110	000000		BYTE (8) BYTMOD+IGNLEN,RCOUNT	;+7 Read COUNT field
  1313	002343'	777000	000012		BYTE (12) -8 (24) RED002-RED001	;+10 Store 8 bytes at +12 and +13
  1314	002344'	400000	000000		BYTE (8) 200			;+11 End of command list
  1315	002345'	000000	000000	RED002:	BYTE (8) 0,0,0,0,0,0,0,0 ;+12,+13 Count stored here, DL in last 2 bytes
	002346'	000000	000000
  1316
  1317	002347'	000000	000000	SEK1:	BYTE (16) 0,0,0 (8) 1		;BIN 0 CYL 0 HEAD 0 REC 1
	002350'	000000	010000
  1318
  1319	002351'	334340	002557'	ERROF2:	SKIPA	T2,[%OFLFM]	;Say OFF-LINE because of format
  1320	002352'	201340	000000*	ERROFL:	 MOVEI	T2,%OFLER	;Say OFF-LINE because of error
  1321	002353'	202345	002251*	ERROF1:	MOVEM	T2,UNIONC(U)	;Store %OFLER or %OFLFM
  1322	002354'	254000	000274'		JRST	OFLIN2		;Send OFF-LINE signal
  1323
  1324				;T1 has KONCPY bit
  1325
  1326	002355'	201400	000000	BPXCP2:	MOVEI	T3,0		;In case we can write
  1327				REPEAT 0,<	;IF 3330-I AND 3330-II ONLY
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21-2
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350

  1328					JUMPE	P1,BPXCDN	;Finished, no error
  1329					MOVEI	T2,%OFLFM	;Get code for bad format
  1330					TRNE	P1,ERRSRC	;Did search for record 100 fail?
  1331					 JRST	ERROF1		;Yes, not in TYMCOM-X format, mark as off-line
  1332					TDZ	P1,[ERRWPT,,ERRCMR];Reset bits that come on when write protected
  1333					JUMPN	P1,ERROFL	;If any other bit set, it is an error
  1334					MOVSI	T3,(1B1)	;Set this bit to say write protect
  1335				>  ;End FT3350
  1336	002356'	202405	002353*	BPXCDN:	MOVEM	T3,UNIONC(U)	;Store 1B1 for write-protect, 0 if OK
  1337	002357'	135400	002267*		LDB	T3,UNYUTP	;0=3350-B, 1=3330-B
  1338	002360'	550345	002273*		HRRZ	T2,UNICOM(U)	;Point to start of command list
  1339	002361'	135340	002560'		LDB	T2,[POINT 16,RED002+1-RED001(T2),31]
  1340	002362'	306340	004400		CAIN	T2,^D<512*9/2>	;Is data length 2304 bytes?
  1341	002363'	271400	000002		 ADDI	T3,2		;Yes, 2=3350-P, 3=3330-P
  1342	002364'	137400	002357*		DPB	T3,UNYUTP	;0&1 = blocks, 2&3 = pages
  1343	002365'	205340	001000		MOVSI	T2,(0B0+1B8)	;1 block per record when formatted in blocks
  1344	002366'	335010	002405'		SKIPGE	CPYDAT(T3)	;Unit formatted in pages?
  1345	002367'	205340	404000		 MOVSI	T2,(1B0+4B8)	;Yes, set the sign bit, 4 blocks per record
  1346	002370'	202345	001044*		MOVEM	T2,UNICHR(U)
  1347	002371'	135340	002402'		LDB	T2,CPYBPT	;Blocks per track
  1348	002372'	137340	001006*		DPB	T2,UNYBPT
  1349	002373'	135340	002403'		LDB	T2,CPYPPC	;Pages per cylinder
  1350	002374'	137340	000650*		DPB	T2,UNYPPY
  1351	002375'	135340	002404'		LDB	T2,CPYPPU	;Pages per unit
  1352	002376'	202345	000000*		MOVEM	T2,UNIPPU(U)
  1353	002377'	412302	002236*		ANDCAM	T1,KONCPY(J)	;Reset test bit
  1354	002400'	402005	000210*		SETZM	UNISNC(U)	;Zero sense count
  1355	002401'	254000	000176'		JRST	POSDIS		;And give interrupt to FILIO at FILINT
  1356
  1357	002402'	360510	002405'	CPYBPT:	POINT  5,CPYDAT(T3),5	;Blocks per track
  1358				;;;BPC:	POINT 10,CPYDAT(T3),15	;Blocks per cylinder
  1359	002403'	261010	002405'	CPYPPC:	POINT  8,CPYDAT(T3),13	;Pages per cylinder = BPC/4
  1360				;;;BPU:	POINT 20,CPYDAT(T3),35	;Blocks per unit
  1361	002404'	022210	002405'	CPYPPU:	POINT 18,CPYDAT(T3),33	;Pages per unit = BPU/4
  1362
  1363				;3330 has 18 blocks per track, 19 heads, 808 cylinders,  68680 pages
  1364				;3330 has  5 pages per track,  19 heads, 808 cylinders,  76760 pages
  1365				;3350 has  7 pages per track,  30 heads, 555 cylinders, 116550 pages
  1366					RADIX 10
  1367				;*;	BYTE (1) 0 (5) 18 (10) 18*19-2(20)<18*19-2>*404	;3330-I  (100 megabytes)
  1368					      ;Pages, B/track, B/cylinder, Blocks per unit
  1369	002405'	315661	452644	CPYDAT:	BYTE (1) 0 (5) 25 (10) 25*30-2(20)<25*30-2>*555 ;3650 in blocks
  1370	002406'	222521	030440		BYTE (1) 0 (5) 18 (10) 18*19-2(20)<18*19-2>*808	;3330-II (200 megabytes)
  1371	002407'	746441	616430		BYTE (1) 1 (5) 4*7(10) 4*7*30 (20) 28*30*555	;3350/3650 in pages
  1372	002410'	642761	127540		BYTE (1) 1 (5) 4*5(10) 4*5*19 (20) 20*19*808	;3330-II in pages
  1373
  1374					RADIX	8	;This table must be in same order as CPYDAT
  1375	002411'	000011	002443'	RECTBL:	Z B3650-1(T4)					;3650 in blocks
  1376	002412'	000011	002414'		Z B3330-1(T4)					;3330 in blocks
  1377	002413'	000011	002474'		Z P3650-1(T4)					;3650 in pages
  1378	002414'	000011	002436'		Z P3330-1(T4)					;3330 in pages
  1379
  1380				;THIS TABLE IS GENERATED ON THE BASIS OF DATA FROM READ SECTOR
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21-3
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350

  1381				;  See PAKCOP.MAC for the calculation that produces these numbers.
  1382				;3330 = 18 blocks @ 2,9,15,22,29,36,42,49,56,63,69,76,83,90,97,103,110,117
  1383				;3330 =  5 pages  @ 2,       25,       48,        71,      95
  1384				;3350 =  7 pages  @ 1,   17,    34,    50,     66,    83,    99
  1385				;3350 = 25 blocks @
  1386				;1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121
  1387
  1388					DEFINE RECGEN (A)
  1389				<IRP A <	BYTE (8) A>>
  1390
  1391	002415'	004000	000000	B3330:	RECGEN <002,011,017,026,035,044,052,061,070,077> ;18 blocks
  1392	002416'	022000	000000
  1393	002417'	036000	000000
  1394	002420'	054000	000000
  1395	002421'	072000	000000
  1396	002422'	110000	000000
  1397	002423'	124000	000000
  1398	002424'	142000	000000
  1399	002425'	160000	000000
  1400	002426'	176000	000000
  1401	002427'	212000	000000		RECGEN <105,114,123,132,140,147,156,165>;174	 ; on 3330
  1402	002430'	230000	000000
  1403	002431'	246000	000000
  1404	002432'	264000	000000
  1405	002433'	300000	000000
  1406	002434'	316000	000000
  1407	002435'	334000	000000
  1408	002436'	352000	000000
  1409
  1410	002437'	004000	000000	P3330:	RECGEN <2,31,60,107,137>;166		;5 pages on 3330 (20 blocks)
  1411	002440'	062000	000000
  1412	002441'	140000	000000
  1413	002442'	216000	000000
  1414	002443'	276000	000000
  1415
  1416	002444'	002000	000000	B3650:	RECGEN <001,006,013,020,025,032,037,044,051,056,063,070,075> ;25 blocks
  1417	002445'	014000	000000
  1418	002446'	026000	000000
  1419	002447'	040000	000000
  1420	002450'	052000	000000
  1421	002451'	064000	000000
  1422	002452'	076000	000000
  1423	002453'	110000	000000
  1424	002454'	122000	000000
  1425	002455'	134000	000000
  1426	002456'	146000	000000
  1427	002457'	160000	000000
  1428	002460'	172000	000000
  1429	002461'	204000	000000		RECGEN <102,107,114,121,126,133,140,145,152,157,164,171>;177 ; on 3350
  1430	002462'	216000	000000
  1431	002463'	230000	000000
  1432	002464'	242000	000000
  1433	002465'	254000	000000
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21-4
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350

  1434	002466'	266000	000000
  1435	002467'	300000	000000
  1436	002470'	312000	000000
  1437	002471'	324000	000000
  1438	002472'	336000	000000
  1439	002473'	350000	000000
  1440	002474'	362000	000000
  1441
  1442	002475'	002000	000000	P3650:	RECGEN <1,21,41,61,101,121,141>;161	;7 pages on 3350 (28 blocks)
  1443	002476'	042000	000000
  1444	002477'	102000	000000
  1445	002500'	142000	000000
  1446	002501'	202000	000000
  1447	002502'	242000	000000
  1448	002503'	302000	000000
  1449
  1450	002504'	140400	000006		$END	(CPX)

  1451	002505'	241006	000000

  1452	002506'	200345	002360*

  1453	002507'	254000	000074'

  1454	002510'	341000	000007

  1455	002511'	001777	770000

  1456	002512'	350000	000162'

  1457	002513'	254000	000062'

  1458	002514'	426063	646244

  1459	002515'	426070	554170

  1460	002516'	426070	464153

  1461	002517'	426042	656371

  1462	002520'	143005	000005*

  1463	002521'	242005	000004*

  1464	002522'	041005	000003*

  1465	002523'	201000	000014

  1466	002524'	042005	000004*

  1467	002525'	301315	000000

  1468	002526'	003015	000000
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21-5
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350


  1469	002527'	111500	000007

  1470	002530'	002200	000377*

  1471	002531'	301307	000000

  1472	002532'	301300	000006

  1473	002533'	141016	000000

  1474	002534'	242000	000006

  1475	002535'	340024	000000

  1476	002536'	141000	000007

  1477	002537'	044016	000000

  1478	002540'	242016	000001

  1479	002541'	141016	000001

  1480	002542'	141016	000003

  1481	002543'	000003	770000

  1482	002544'	000004	010000

  1483	002545'	141007	000000

  1484	002546'	000000*	001133'

  1485	002547'	300407	000000

  1486	002550'	320710	002257*

  1487	002551'	700240	000006

  1488	002552'	320700	000006

  1489	002553'	141006	000000

  1490	002554'	141007	000002

  1491	002555'	141007	000004

  1492	002556'	141007	000007

  1493	002557'	000000	000000*

  1494	002560'	042007	000013

CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 21-6
CPXKON.MAC	20-SEP-87 12:59		Capacity test data for 3330 or 3350

  1495						;End of CPXKON (CPXLIT: CPXEND:)
  1496
NO ERRORS DETECTED
PROGRAM BREAK IS 002561
7K CORE USED
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 22
CPXKON.MAC	20-SEP-87 12:59		SYMBOL TABLE

ANYERR		165314	SPD	BYTARG		000433'		EPTPG0		000200	SIN	KCMRER		000476'	EXT
ASTAT		400000	SPD	BYTMOD		000070	SPD	EQCHK		000277'		KONBMX		002140'	EXT
ATTEN		001000	SPD	CHAIN		000020	SPD	ERRATN		000002	SPD	KONBSU		002302'	EXT
B2PLSH	777777	777776	SPD	CHEND		000040	SPD	ERRBIP		000200	SPD	KONCHN		002255'	EXT
B2WLSH		000007	SPD	CHKBSY		000116'		ERRBOP		000100	SPD	KONCPY		002377'	EXT
B3330		002415'		CHNACT		002154'	EXT	ERRBSY		000001	SPD	KONEN1		000131'	
B3650		002444'		CHNBMX		002177'	EXT	ERRCHK		000053'		KONEN2		000136'	
BPACB		000130'	EXT	CHNCLR		000503'	EXT	ERRCM1		000260'		KONENC		000125'	
BPBRK1		000644'		CHNGO		002550'	EXT	ERRCMR		000040	SPD	KONEND		000127'	
BPBUSY		000165'	INT	CHNIIE		002256'	EXT	ERRCNT		400000	SPD	KONPTR		000146'	EXT
BPDATA		000162'		CHNMER		000572'	EXT	ERRCOM		000256'		LENERR		004000	SPD
BPSTRD		000162'	INT	CHNSTB		002211'	EXT	ERRCON		000100	SPD	LOKRCV		000357'	
BPXA0		000741'		CLRPT	701100	000000		ERRDT0		000312'		LSTCNT		000450'	
BPXA1		000734'		CMDRJC		000314'		ERRDTA		200000	SPD	MEMERR		000571'	
BPXA4		000740'		CNTBAD		000456'		ERREQC		000020	SPD	NODIE		000000	EXT
BPXAC3		000743'		CNTDON		000454'		ERREQP		000010	SPD	NOMEMT		000200	SPD
BPXAD1		000731'		CNTLP		000422'		ERRINV		040000	SPD	NOREC		000310'	
BPXADD		000726'	INT	CONERR		020000	SPD	ERRLEN		000040	SPD	NOTRN		000403'	
BPXCDN		002356'		CPOPJ		002173'	EXT	ERRNO		000255'		NOXFR		000242	SPD
BPXCNX		002261'		CPOPJ1		002202'	EXT	ERRNXM		004000	SPD	OFFSET		000001	SPD
BPXCP2		002355'		CPUKL		000002	SPD	ERROF1		002353'		OFLIN		000266'	
BPXCPY		002232'	INT	CPUTYP		000002	SPD	ERROF2		002351'		OFLIN2		000274'	
BPXCUB		000132'	EXT	CPXBP1		000760'	INT	ERROFL		002352'		OVRUN		000254'	
BPXFAK		000164'	INT	CPXEND		002560'	INT	ERRONE		000264'		P		000001	INT
BPXFIN		001060'	INT	CPXKON		000000'	ENT	ERROR		000541'		P1		000014	INT
BPXHRD		002311'	INT	CPXLIT		002504'	INT	ERROVR		002000	SPD	P2		000015	INT
BPXINT		000003'	INT	CPYBPT		002402'		ERRPAR		010000	SPD	P2BLSH		000002	SPD
BPXLTM		001122'	INT	CPYDAT		002405'		ERRPRT		000400	SPD	P2WLSH		000011	SPD
BPXMAX		000163'	INT	CPYPPC		002403'		ERRRCV		100000	SPD	P3		000016	INT
BPXOFS		002313'	INT	CPYPPU		002404'		ERRSEL		000200	SPD	P3330		002437'	
BPXPOS		001107'	INT	CPZZ		000001	SPD	ERRSEN		000207'		P3650		002475'	
BPXRCC		001121'		CRST		000142'		ERRSRC		020000	SPD	P4		000017	INT
BPXRCL		001115'	INT	CSUCNT		002220'	EXT	ERRTEN		000303'		PG		000003	INT
BPXRD		000006	SPD	CSUNL		002217'	EXT	ERRUNK		001000	SPD	PGE.A		400000	SIN
BPXRED		000614'	INT	CUBSY		000120'		ERRUXC		000004	SPD	PGE.P		200000	SIN
BPXSC1		000700'		CUEND		000200	SPD	ERRWPT		000400	SPD	PGE.W		100000	SIN
BPXSDA		000721'		CURUPT		000000	EXT	ESTAT		000000	SPD	PINT		002000	SPD
BPXSET		000605'		DATA		000411'		FILDIS		000200'		PJRST	324740	000000	
BPXSFT		002312'	INT	DATACK		000030'		FILDS1		000201'		POSDIS		000176'	
BPXSSC		000676'		DEVBSY		000153'		FILFAK		000500'		POSINT		000171'	
BPXSSO		000646'		DEVEND		000020	SPD	FILINT		000206'	EXT	POSNTS		000170'	
BPXSSR		000706'		DIE		000000'	EXT	FINRCV		000367'		PROTEC		000253'	
BPXST2		002155'		DISMIS		000046'		FNDRCV		000372'		RCOUNT		000022	SPD
BPXSTP		002133'	INT	DISMS1		000045'		FTDPAG		000000	SIN	RDSTS		000062'	
BPXUPA		002161'	INT	DOIT		002211'		GORCV		000350'		RDSTSS		000074'	
BPXWRT		000613'	INT	DSTAT		600000	SPD	IGNLEN		000002	SPD	READMT		000206	SPD
BPXWT		000005	SPD	DTACHK		000326'		INVTRK		000311'		RECAL		000023	SPD
BUSIER		040000	SPD	DTADON		000465'		ISTAT		200000	SPD	RECTBL		002411'	
BUSOPA		000263'		DTATRN		000440'		J		000002	INT	RED001		002333'	
BUSY		000100	SPD	DTAUNC		000407'		JPOPJ		000137'	EXT	RED002		002345'	
BYT0		000232'		EPT		000000	EXT	KCMDTA		000472'	EXT	RRBL		000244	SPD
BYT0T		000233'		EPT.PN		000000	EXT	KCMERR		000475'	EXT	RSTSA		002205'	
BYT1T		000243'		EPTPG0		000200	SIN	KCMOFL		000275'	EXT	RTYCNT		000321'	
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88 PAGE 22-2
CPXKON.MAC	20-SEP-87 12:59		SYMBOL TABLE

RTYDT0		000325'		UNICNC		001001'	EXT	
RTYONE		000323'		UNICOM		002506'	EXT	
RTYTEN		000324'		UNICYL		002272'	EXT	
RTYZRO		000322'		UNIONC		002356'	EXT	
S$ENTR	777777	777775	SIN	UNIPPU		002376'	EXT	
S$HALT	777777	777777	SIN	UNIRCT		000464'	EXT	
S$NAME		000000'	SPD	UNISCM		000207'	EXT	
S$NONA		000000	SIN	UNISNC		002400'	EXT	
S$TEMP	777775	000000	SPD	UNISND		001127'	EXT	
S$XCT	777777	777776	SIN	UNISNS		000067'	EXT	
SAXBUF		001102'	EXT	UNISTS		000156'	EXT	
SAXPTR		002135'	EXT	UNISVC		000611'	EXT	
SAXSTP		001133'		UNISWC		001062'	EXT	
SEEK		000007	SPD	UNKNO		000306'		
SEEKCY		000013	SPD	UNPDEV		000000	EXT	
SEK0		002331'		UNYBPT		002372'	EXT	
SEK1		002347'		UNYBPY		000000	EXT	
SEK600		002314'		UNYPPT		000755'	EXT	
SELER		100000	SPD	UNYPPY		002374'	EXT	
SELERR		000566'		UNYPUN		002301'	EXT	
SENSE		000004	SPD	UNYUTP		002364'	EXT	
SETCM1		001033'		UPCHK		002203'		
SETCMD		001030'		UXCP		000004	SPD	
SETSEC		000043	SPD	W2BLSH	777777	777771	SPD	
SETXFR		001043'		WRDMOD		000160	SPD	
SRCIDE		000061	SPD	WRT100		002317'		
STPPTR		001132'		XCTCMD		000040	SPD	
STRTU		000076'		%ERR		777000	SIN	
STRTU1		000100'		%ERR.N		000777	SIN	
STRTUP		001063'		%OFLER		002352'	EXT	
STSMOD		000400	SPD	%OFLFM		002557'	EXT	
T1		000006	INT	
T2		000007	INT	
T2POP1		000746'		
T2POPJ		000747'		
T3		000010	INT	
T4		000011	INT	
TICBIT		200000	SPD	
TRBIT		000100	SPD	
TRBYTE		000010	SPD	
TRNCN1		001003'		
TRNCNT		000751'		
TRNHD1		001015'		
TRNHED		001006'		
TRTAPE		000110	SPD	

CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

ANYERR	   217	   265#
ASTAT	   149#
ATTEN	   159#	   265	   696
B2PLSH	   815
B2WLSH	   658	   840	   969	   984
B3330	  1376	  1391#
B3650	  1375	  1416#
BPACB	   336%	   336
BPBRK1	   671	   801#
BPBUSY	   237	   370	   383#
BPDATA	   373#	   376	   380	   381	   382	   383
BPSTRD	   365	   380#
BPXA0	   801	   932#	  1004
BPXA1	   923#
BPXA4	   931#	   936	   937
BPXAC3	   926	   935#
BPXAD1	   675	   912#
BPXADD	   905#
BPXCDN	  1336#
BPXCNX	   391	  1233#
BPXCP2	  1235	  1326#
BPXCPY	  1191#
BPXCUB	   100%	   318	   338	   339
BPXFAK	   382#	   650
BPXFIN	   677	  1048#	  1083	  1091
BPXHRD	  1272#
BPXINT	   209#
BPXLTM	  1100#
BPXMAX	   381#	   905	   906
BPXOFS	  1278#
BPXPOS	  1078#
BPXRCC	  1091#	  1107
BPXRCL	  1087#
BPXRD	   173#	   769
BPXRED	   769#
BPXSC1	   855#	  1082
BPXSDA	   879#	  1080	  1087	  1101	  1196
BPXSET	   651	   759#	   775	  1078	  1100
BPXSFT	  1275#
BPXSSC	   784	   853#	  1000
BPXSSO	   779	   812#	  1079
BPXSSR	   792	   863#
BPXST2	  1128	  1136#
BPXSTP	  1115#
BPXUPA	  1143#
BPXWRT	   768#
BPXWT	   172#	   768	  1297
BUSIER	   152#	   265	   692
BUSOPA	   429	   457#
BUSY	   162#	   265	   271	   694
BYT0	   420	   425#
BYT0T	   425	   427#
BYT1T	   437#
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

BYTARG	   585#	   589
BYTMOD	   195#	   854	   864	  1081	  1102	  1197	  1290	  1292	  1294	  1297	  1305	  1307	  1309	  1312
CHAIN	   187#	   195	   198
CHEND	   163#	   235
CHKBSY	   272	   313#
CHNACT	   104%	  1126	  1134
CHNBMX	   104%	  1157
CHNCLR	   104%	   262	   399	   641
CHNGO	   104%	   261	   398	  1073	  1131	  1138	  1144	  1165	  1181	  1212
CHNIIE	   104%	  1072	  1137	  1211
CHNMER	   104%	   707
CHNSTB	   104%	   209	   216	   260	   281	   410	   522	   563	   683	   710	   716	  1170
CMDRJC	   427	   487#
CNTBAD	   606#
CNTDON	   577	   579	   586	   604#
CNTLP	   576#	   581	   588	   597
CONERR	   153#	   265	   690
CPOPJ	   118%	  1148	  1153
CPOPJ1	   118%	  1139	  1160
CPUKL	  1176
CPUTYP	  1176
CPXBP1	   959#
CPXEND	  1495#
CPXKON	    12	    13#	    16
CPXLIT	  1450#
CPYBPT	  1347	  1357#
CPYDAT	  1344	  1357	  1359	  1361	  1369#
CPYPPC	  1349	  1359#
CPYPPU	  1351	  1361#
CPZZ	  1176#	  1176
CRST	   342	   349#	   354	   357
CSUCNT	  1178%	  1178
CSUNL	  1177%	  1177
CUBSY	   315#
CUEND	   161#	   265	   273	   319	   364
CURUPT	   115%
DATA	   246	   563#
DATACK	   236	   242#	   417	   455
DEVBSY	   314	   364#
DEVEND	   164#	   220	   364
DIE	    12	    12%	    13
DISMIS	   259#	   290	   321	   371	  1269
DISMS1	   240	   242	   258#	   423
DOIT	  1152	  1170#
DSTAT	   150#
DTACHK	   431	   504#
DTADON	   568	   605	   608	   614#
DTATRN	   583	   591#	   598
DTAUNC	   506	   557#
EPT	   115%	   549
EPT.PN	   115%
EPTPG0	   549
EQCHK	   430	   471#
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

ERRATN	   135#	   697
ERRBIP	   123#	   693
ERRBOP	   122#	   457
ERRBSY	   134#	   695
ERRCHK	   218	   269#
ERRCM1	   453#	   700	   704	   717
ERRCMR	   121#	   487	  1236
ERRCNT	   133#	   606
ERRCOM	   451#	   459	   477	   485	   539
ERRCON	   140#	   691
ERRDT0	   484#
ERRDTA	   132#	   557
ERREQC	   138#	   473
ERREQP	   137#	   474
ERRINV	   130#	   483
ERRLEN	   139#	   689
ERRNO	   450#	   476	   491	   558
ERRNXM	   127#	   714
ERROF1	  1321#
ERROF2	  1319#
ERROFL	  1240	  1320#
ERRONE	   458#
ERROR	   221	   275	   680#
ERROVR	   126#	   449
ERRPAR	   128#	   712
ERRPRT	   124#	   448
ERRRCV	   131#	   537	   628
ERRSEL	   141#	   702
ERRSEN	   254	   405#
ERRSRC	   129#	   482
ERRTEN	   475#	   480
ERRUNK	   125#	   479
ERRUXC	   136#	   699
ERRWPT	   142#	   490
ESTAT	   147#
FILDIS	   394#	   469	   631	   636
FILDS1	   395#
FILFAK	   627	   632	   635#
FILINT	   400%	   400
FINRCV	   537#	   552
FNDRCV	   533	   543#
FTDPAG	    19	    19#	   108	   109	   615	   619	   813	   817	   907
GORCV	   519	   522#
IGNLEN	   188#	   197	   854	  1081	  1102	  1197	  1290	  1292	  1294	  1297	  1305	  1307	  1309	  1312
INVTRK	   439	   483#
ISTAT	   148#
J	   215	   294	   298	   318	   334	   336	   338	   339	   343	   345	   353	   390	   467	   771
	   880	  1059	  1060	  1071	  1120	  1125	  1143	  1150	  1195	  1210	  1262	  1353
JPOPJ	   344%	   344
KCMDTA	    96%	   626
KCMERR	    96%	   629
KCMOFL	    96%	   468
KCMPOS	    96%	   392
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

KCMRER	    96%	   630
KONBMX	   101%	   298	  1060	  1120
KONBSU	   101%	   294	   771	   880	  1059	  1150	  1262
KONCHN	   101%	   343	  1071	  1125	  1143	  1210
KONCPY	   101%	   390	   467	  1195	  1353
KONEN1	   338#	   346
KONEN2	   343#	   350
KONENC	   274	   320#
KONEND	   320	   334#	   414
KONPTR	   101%	   215	   353
LENERR	   155#	   265	   688
LISTSN	     3	     6
LOKRCV	   529#	   536	   555
LSTCNT	   593	   600#
MEMERR	   684	   706#
NODIE	    12%
NOMEMT	   185#	   197
NOREC	   442	   482#
NOTRN	   544	   552#
NOXFR	   197#	  1088	  1162
OFFSET	   189#	   864	  1294	  1309
OFLIN	   428	   461#
OFLIN2	   467#	  1322
OVRUN	   432	   449#
P	    13	   234	   239	   258	   263	   289	   309	   320	   334	   356	   393	   394	   412	   413
	   414	   415	   416	   422	   452	   462	   607	   609	   642	   651	   675	   681	   682	   709
	   764	   775	   779	   784	   792	   802	   844	   860	   873	   883	   912	   923	   925	   931
	   932	   938	   939	   940	   960	   964	   976	   978	  1000	  1002	  1021	  1039	  1040	  1044
	  1074	  1078	  1079	  1080	  1082	  1087	  1100	  1101	  1124	  1149	  1152	  1156	  1168	  1175
	  1177	  1187	  1188	  1196	  1209	  1213	  1241	  1268	  1272	  1275	  1278
P1	   233	   393	   397	   417	   448	   449	   457	   473	   474	   479	   482	   483	   487	   490
	   510	   512	   514	   515	   516	   520	   532	   534	   537	   545	   555	   557	   606	   627
	   628	   667	   668	   680	   681	   689	   691	   693	   695	   697	   699	   702	   712	   714
	   759	   762	   777	   786	   789	   790	   791	   793	   855	   858	   859	   865	   868	   869
	   871	   872	   924	   933	   962	   997	  1014	  1015	  1016	  1017	  1018	  1019	  1049	  1050
	  1089	  1090	  1091	  1103	  1106	  1107	  1236	  1240
P2	   233	   234	   450	   454	   458	   475	   484	   511	   512	   513	   514	   517	   518	   523
	   524	   525	   526	   527	   528	   529	   535	   536	   538	   543	   610	   612	   657	   658
	   659	   680	   687	   703	   706	   832	   834	   835	   837	   839	   840	   935	   983	   984
	   985	   986	   987	   988	  1037
P2BLSH	   831	   839	   968
P2WLSH	   661	   825
P3	   210	   211	   212	   213	   214	   295	   299	   315	   340	   352	   354	   357	   387	   413
	   415	   507	   508	   518	   519	   521	   551	   553	   653	   655	   666	   669	   671	   760
	   761	   762	   776	   782	   787	   801	   823	   836	   842	   843	   857	   867	   913	   936
	   951	   961	   982	   993	   996	   999	  1001	  1008	  1010	  1016	  1020	  1207
P3330	  1378	  1410#
P3650	  1377	  1442#
P4	   509	   521	   552	   553	   554	   642	   660	   661	   662	   820	   821	   824	   825	   950
	   971	   972	   973	   987	   988	  1038
PG	   209	   216	   260	   261	   262	   281	   398	   399	   410	   522	   563	   641	   683	   707
	   710	   716
PGE.A	   548
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

PGE.P	   548
PGE.W	   548
PINT	   156#	   219
POSDIS	   392#	  1355
POSINT	   249	   253	   387#
POSNTS	   251	   386#
PROTEC	   443	   448#
RCOUNT	   177#	  1312
RDSTS	   270	   278#	   366
RDSTSS	   280	   289#
READMT	   174#
RECAL	   178#	   247	  1088
RECTBL	   664	   781	  1375#
RED001	  1257	  1305#	  1311	  1313	  1339
RED002	  1313	  1315#	  1339
RRBL	   181#	   250	  1102
RSTSA	  1149	  1165#
RTYCNT	   496#	   610	   687	   706
RTYDT0	   484	   500#
RTYONE	   458	   498#	   703
RTYTEN	   475	   499#
RTYZRO	   450	   497#
S$ENTR	    12	    18
S$HALT	    12
S$NAME	    16#
S$NONA	    15	    18
S$TEMP	    12#	    12
S$XCT	    18
SAXBUF	   213%	   213	   308%	   308	  1070%	  1070	  1115%	  1115
SAXPTR	   210%	   210	   212%	   212	   305%	   305	   307%	   307	  1067%	  1067	  1069%	  1069	  1117%	  1117
SAXSTP	  1113#	  1115	  1116
SEEK	   175#	   245	   785	   854	  1292	  1307
SEEKCY	   176#	   248	  1081	  1197	  1290	  1305
SEK0	  1291	  1293	  1295	  1298	  1301#
SEK1	  1306	  1308	  1310	  1317#
SEK600	  1200	  1284#
SELER	   151#	   265	   685	  1154
SELERR	   686	   702#
SENSE	   171#
SETCM1	  1002	  1014#
SETCMD	   931	  1008#
SETSEC	   179#	   785
SETXFR	   923	   932	  1030#
SRCIDE	   180#	   864	  1294	  1309
STPPTR	  1112#	  1118
STRTU	   239	   289	   294#	   356	   422	  1209
STRTU1	   296#	  1268
STRTUP	   925	  1051	  1055#
STSMOD	   160#	   219	   313
T1	   209	   213	   214	   217	   219	   220	   235	   243	   244	   252	   258	   259	   260	   269
	   271	   273	   313	   319	   338	   341	   342	   343	   344	   345	   349	   351	   364	   367
	   368	   369	   370	   388	   389	   390	   392	   407	   408	   409	   411	   451	   452	   461
	   462	   465	   466	   467	   468	   471	   472	   488	   489	   504	   505	   522	   523	   528
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

	   529	   530	   531	   532	   534	   546	   548	   549	   563	   564	   567	   578	   585	   592	   600
	   601	   602	   603	   623	   624	   625	   626	   629	   630	   652	   653	   654	   655	   656
	   659	   662	   663	   664	   665	   666	   672	   685	   688	   690	   692	   694	   696	   698
	   707	   708	   709	   710	   711	   713	   715	   716	   905	   906	   937	   970	   971	   972
	   973	   974	   977	   989	  1036	  1090	  1145	  1146	  1147	  1148	  1151	  1153	  1154	  1155
	  1157	  1158	  1159	  1165	  1166	  1167	  1171	  1172	  1173	  1175	  1178	  1181	  1182	  1183
	  1184	  1186	  1193	  1194	  1195	  1198	  1199	  1201	  1203	  1204	  1205	  1210	  1211	  1212
	  1241	  1244	  1257	  1258	  1353
T2	   238	   244	   245	   247	   248	   250	   279	   286	   287	   296	   297	   300	   301	   302
	   303	   304	   308	   315	   317	   351	   352	   355	   387	   389	   395	   396	   397	   405
	   407	   410	   411	   418	   419	   420	   421	   463	   464	   466	   543	   544	   545	   546
	   547	   551	   566	   567	   571	   576	   578	   581	   583	   584	   585	   587	   588	   589
	   591	   592	   596	   597	   598	   673	   768	   769	   772	   777	   785	   786	   853	   854
	   855	   863	   864	   865	   879	   880	   881	   882	   911	   912	   939	   997	   998	  1039
	  1043	  1055	  1056	  1057	  1058	  1062	  1063	  1064	  1065	  1066	  1070	  1071	  1072	  1073
	  1081	  1088	  1102	  1103	  1115	  1116	  1117	  1118	  1119	  1121	  1122	  1125	  1126	  1131
	  1134	  1137	  1138	  1144	  1146	  1150	  1171	  1191	  1192	  1197	  1199	  1200	  1201	  1202
	  1203	  1208	  1233	  1234	  1243	  1244	  1258	  1259	  1260	  1263	  1264	  1265	  1266	  1319
	  1320	  1321	  1338	  1339	  1340	  1343	  1345	  1346	  1347	  1348	  1349	  1350	  1351	  1352
T2POP1	   938#	   989
T2POPJ	   939#	   950	   956	   981
T3	   281	   282	   283	   284	   285	   287	   288	   294	   295	   297	   298	   299	   300	   305
	   306	   307	   308	   316	   317	   318	   394	   425	   565	   572	   595	   603	   604	   616
	   617	   623	   624	   637	   770	   771	   772	   780	   781	   782	   787	   788	   789	   814
	   815	   821	   822	   823	   829	   831	   835	   836	   856	   857	   858	   866	   867	   868
	   869	   870	   871	   913	   914	   924	   933	   952	   954	   955	   960	   961	   962	   963
	   965	   966	   968	   969	   974	   980	   985	   986	   993	   996	  1008	  1010	  1014	  1015
	  1030	  1032	  1035	  1036	  1037	  1038	  1040	  1041	  1042	  1043	  1048	  1049	  1057	  1058
	  1059	  1061	  1062	  1067	  1068	  1069	  1070	  1104	  1105	  1106	  1120	  1121	  1122	  1123
	  1126	  1127	  1131	  1132	  1133	  1136	  1143	  1144	  1157	  1165	  1170	  1181	  1192	  1194
	  1237	  1238	  1239	  1261	  1262	  1263	  1264	  1265	  1266	  1326	  1336	  1337	  1341	  1342
	  1344	  1357	  1359	  1361
T4	   576	   580	   582	   591	   594	   595	   601	   824	   829	   837	   841	   842	   951	   955
	   964	   965	   966	   994	   995	  1009	  1060	  1061	  1155	  1159	  1170	  1173	  1174	  1185
	  1187	  1375	  1376	  1377	  1378
TICBIT	   200#	   285	   870	  1296	  1311
TRBIT	   192#	   198
TRBYTE	   191#	   195
TRNCN1	   970	   980#
TRNCNT	   935	   950#
TRNHD1	   982	   993#
TRNHED	   975	   983#
TRTAPE	   193#
TRWORD	   190#
U	   215	   238	   242	   243	   278	   279	   283	   284	   286	   288	   303	   353	   355	   368
	   386	   395	   405	   406	   409	   412	   416	   418	   421	   451	   453	   454	   461	   472
	   489	   505	   507	   510	   511	   513	   565	   566	   570	   571	   604	   611	   612	   625
	   635	   637	   670	   672	   673	   674	   759	   760	   763	   773	   774	   794	   814	   822
	   830	   833	   838	   953	   967	   976	   977	  1031	  1035	  1050	  1055	  1065	  1089	  1105
	  1127	  1136	  1198	  1205	  1206	  1208	  1233	  1242	  1243	  1321	  1336	  1338	  1346	  1352
	  1354
UCHK	   165#	   265	   269
UNIACT	   110%	  1127	  1136
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Symbol cross reference

UNIBLK	   108%	   814
UNICCC	   111%	   625	   637	   773
UNICHR	   107%	   830	   833	   838	   953	   967	  1031	  1346
UNICNA	   111%	   635	   673	   674	   774	   976
UNICNC	   111%	   672	   977
UNICOM	   107%	   238	   243	   279	   286	   355	   395	   421	   571	   759	   760	  1055	  1089	  1198
	  1208	  1243	  1338
UNICYL	   107%	   303	   822	  1065	  1205	  1233	  1242
UNIONC	   110%	  1206	  1321	  1336
UNIPPU	   110%	  1352
UNIRCT	   111%	   453	   454	   611	   612
UNISCM	   112%	   288	   405
UNISNC	   112%	   386	   406	  1354
UNISND	   112%	   418	   451	   461	   472	   489	   505	   507	   510	   511	   513	  1105
UNISNS	   112%	   284
UNISTS	   368%	   368
UNISVC	   112%	   278	   283	   409	   763
UNISWC	   110%	   565	   566	   570	   604	   670	   794	  1035	  1050
UNKNO	   433	   434	   437	   440	   441	   444	   445	   479#
UNPDEV	   107%	   496	   497	   498	   499	   500
UNYBPT	   107%	   657	   834	   952	   983	  1348
UNYBPY	   107%
UNYPPT	   107%	   832	   954
UNYPPY	   107%	   660	   820	  1350
UNYPUN	   110%	   463	   770	   879	  1119	  1191	  1207	  1261
UNYUTP	   110%	   663	   780	  1239	  1337	  1342
UPCHK	  1151	  1162#
UXCP	   166#	   265	   698
W2BLSH	   617
WRDMOD	   198#	   768	   769
WRT100	  1290#	  1296
XCTCMD	   186#	   195	   197	   198
%ERR	   550	   551
%ERR.N	   549
%OFLER	    96%	  1320
%OFLFM	    96%	  1319
CPXKON - Kontroller routine for IBM disks on an SA-10 channel	MACRO 12.5-46.0 14:31 13-JAN-88
CPXKON.MAC	20-SEP-87 12:59		Macro/Opdef cross reference

CLRPT	   550
CLRPTO	   550
CSHUNL	  1177
EPTPGP	   549
EPTPGS	   549
IFCPU	  1176
ND	    19
PFALL	   632	  1051
PJRST	   677
RECGEN	  1389#	  1391	  1401	  1410	  1416	  1429	  1442
STOPCD	    11
SYND	   494#	   496	   497	   498	   499	   500
XOR	   202#	   785
$END	  1450   z sK