entry S!Init, S!Ent, S!Get;

begin "symbol table module"

  require "(sailib)sail.def" source!file;
  require "parser.def" source!file;

  own string array Symbol!Table[ 0 : SYMBOLTABLESIZE - 1 ];
  own integer array Symbol!Type[ 0 : SYMBOLTABLESIZE - 1 ];

ifc SCOPE thenc
  own integer array Symbol!Scope[ 0 : SYMBOLTABLESIZE - 1 ];
endc

! Initialize the module ;

internal simple procedure S!Init;
  begin

    if ( memory[ '137 ] neq PARSERVERSION ) then
      usererr( 0,0,"SYMTAB version is out of synch!" );

    arrclr( Symbol!Table, NULL );
ifc SCOPE thenc
    arrclr( Symbol!Scope, 0 );
endc

  end;
! Routine to return the offset into the symbol table for a string ;
!  Returns -1 if we run out of symbol table ;

integer simple procedure Hasher( string Sym );
  begin
    own integer i, hash;

ifc FOLDCASE thenc
    hash := (( Sym[1 for 1] land '77 ) + length( Sym )) mod SYMBOLTABLESIZE;
elsec
    hash := ( Sym[1 for 1 ] + length( Sym )) mod SYMBOLTABLESIZE;
endc
    i := hash;
    do begin
      if ( Symbol!Table[ i ] = NULL ) then return( i );
ifc FOLDCASE thenc
      if ( kequ( Sym, Symbol!Table[ i ] )) then return( i );
elsec
      if ( equ( Sym, Symbol!Table[ i ] )) then return( i );
endc
      i := i + 1;
      if ( i = SYMBOLTABLESIZE ) then i := 0;
    end until ( i = hash );

    usererr( 0,0, "Symbol table overflow" );
  end;

! Return the offset of the symbol in the symbol table, or -1 if
!  none is found. ;

internal integer procedure S!Get( string Sym );
  begin
    own integer i;
    i := Hasher( Sym );
    if ( Symbol!Table[ i ] = NULL ) then return( -1 );
    return( i );
  end;

! Return the offset of the symbol in the symbol table.  Make a new
!  symbol table entry if none is found. ;

internal integer procedure S!Ent( string Sym);
  begin
    own integer i;
    i := Hasher( Sym );
    if ( Symbol!Table[ i ] = NULL ) then
      Symbol!Table[ i ] := Sym;
    return( i );
  end;

end "symbol table module" ;
