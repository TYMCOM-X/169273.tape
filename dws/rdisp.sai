Entry;

begin "Redisplay for a Cannonical CRT"

  require "(sailib)sail.def" source!file;
  require "{}[]" delimiters;

define	TOPS20 = {false},
	TYMCOMX = {not TOPS20};
! The following information "lives" in this module, and is shared
! between the terminal abstraction and the redisplay.
;

! Name and enumerated type of the terminal. ;

internal string T!Name;
integer T!Enum;

! We make certain information about the terminal available to the world. ;

integer	T!Lines,	! # lines on screen for this terminal ;
	T!MaxS,		! # lines max to try scrolling  ;
	T!Width;	! # characters on a line ;

integer	T!Row,		! Last row we left the cursor on ;
	T!Col;		! Last column we left the cursor on ;

! For the insert/delete character/line operations, it is assumed that
! the terminal can do deletes if it can do inserts. ;

internal
boolean	T!ICP,		! The terminal can do insert char ops ;
	T!ILP,		! The terminal can do insert line ops ;
	T!ELP;		! The terminal can erase to end-of-line ;

integer	T!CPC,		! The cost of doing cursor positioning ;
	T!ELC,		! The cost of erasing lines ;
	T!ICC,		! The cost of inserting characters ;
	T!ILC;		! The cost of inserting lines ;

! Other information hidden in this module ;

IFCR TYMCOMX THENC
  own integer T!LCH;		! terminal line characteristics ;
  own integer T!XON;		! terminal XON setting ;
ENDC

IFCR TOPS20 THENC
  own integer SaveRTIW;		! character interrupt word ;
  own integer SaveRFMOD;	! terminal mode word ;
ENDC

! Characters are buffered to make i/o a bit more efficient. ;

define TERMBUFFERSIZE = 125;

integer array T!Buffer[ 0 : ( TERMBUFFERSIZE / 5 ) + 1 ];
integer T!Buf!BP, T!Buf!Cnt;
! The following set of macros set up the terminal definition tables.
! Take care not to move semicolons around if changing things.
!  (Thanks here to Ken Dawson) ;

define
  !!Cnt = 0,
  !!Term  = {preload!with },
  !!Alias = {preload!with },
  !!Enum  = {preload!with },
  !!Lines = {preload!with },
  !!MaxS  = {preload!with },
  !!Width = {preload!with },
  !!CPC   = {preload!with },
  !!ELP   = {preload!with },
  !!ELC   = {preload!with },
  !!ILP   = {preload!with },
  !!ICP   = {preload!with };

define TTY( Term, Alias, Enum, Lines,MaxS,Width, CPC,ELP,ELC,ILP,ICP ) =
{
  redefine
    !!Cnt = !!Cnt + 1,
    !!Term = cvms( !!Term ) & {Term, },
    !!Alias = cvms( !!Alias ) & {Alias, },
    !!Enum  = cvms( !!Enum  ) & {Enum, },
    !!Lines = cvms( !!Lines ) & {Lines, },
    !!MaxS  = cvms( !!MaxS  ) & {MaxS, },
    !!Width = cvms( !!Width ) & {Width, },
    !!CPC   = cvms( !!CPC   ) & {CPC, },
    !!ELP   = cvms( !!ELP   ) & {ELP, },
    !!ELC   = cvms( !!ELC   ) & {ELC, },
    !!ILP   = cvms( !!ILP   ) & {ILP, },
    !!ICP   = cvms( !!ICP   ) & {ICP, };
};

define TTX( Term, Alias, Enum, Lines,MaxS,Width, CPC,ELP,ELC,ILP,ICP ) =
{
  redefine
    !!Cnt = !!Cnt + 1,
    !!Term  = cvms( !!Term  ) & {Term;  string array T!!Term[  1 : !!Cnt ];},
    !!Alias = cvms( !!Alias ) & {Alias; string array T!!Alias[ 1 : !!Cnt ];},
    !!Enum  = cvms( !!Enum  ) & {Enum; integer array T!!Enum[  1 : !!Cnt ];},
    !!Lines = cvms( !!Lines ) & {Lines; integer array T!!Lines[ 1 : !!Cnt ];},
    !!MaxS  = cvms( !!MaxS  ) & {MaxS; integer array T!!MaxS[ 1 : !!Cnt ];},
    !!Width = cvms( !!Width ) & {Width; integer array T!!Width[ 1 : !!Cnt ];},
    !!CPC   = cvms( !!CPC   ) & {CPC;  integer array T!!CPC[ 1 : !!Cnt ];},
    !!ELP   = cvms( !!ELP   ) & {ELP;  integer array T!!ELP[ 1 : !!Cnt ];},
    !!ELC   = cvms( !!ELC   ) & {ELC;  integer array T!!ELC[ 1 : !!Cnt ];},
    !!ILP   = cvms( !!ILP   ) & {ILP;  integer array T!!ILP[ 1 : !!Cnt ];},
    !!ICP   = cvms( !!ICP   ) & {ICP;  integer array T!!ICP[ 1 : !!Cnt ];};

  !!Term
  !!Alias
  !!Enum
  !!Lines
  !!MaxS
  !!Width
  !!CPC
  !!ELP
  !!ELC
  !!ILP
  !!ICP
};
! Now build the terminal tables.  If you change anything here be careful
! about not placing semicolons after the macro invocations.  Also, the
! last macro, and ONLY the last macro, MUST be a TTX() ;


TTY( "H19",    "H19",    1, 24,24,80, 4,1,2,1,0 )
TTY( "Z19",    "H19",    1, 24,24,80, 4,1,2,1,0 )
TTY( "VT52",   "VT52",   1, 24,24,80, 4,1,2,1,0 )

TTY( "TYM444", "Tym444", 2, 24,24,80, 8,1,2,1,0 )
TTY( "444",    "Tym444", 2, 24,24,80, 8,1,2,1,0 )
TTY( "HP2621", "Tym444", 2, 24,24,80, 8,1,2,1,0 )

TTY( "TYM425", "Tym425", 3, 24,5,80, 4,1,2,0,0 )
TTY( "425",    "Tym425", 3, 24,5,80, 4,1,2,0,0 )
TTY( "ADM31",  "Tym425", 3, 24,5,80, 4,1,2,0,0 )
TTY( "ADM31A", "Tym425", 3, 24,5,80, 4,1,2,0,0 )
TTY( "TYM420", "Tym420", 3, 24,5,80, 4,1,2,0,0 )
TTY( "420",    "Tym420", 3, 24,5,80, 4,1,2,0,0 )
TTY( "ADM1",   "Tym420", 3, 24,5,80, 4,1,2,0,0 )
TTY( "ADM1A",  "Tym420", 3, 24,5,80, 4,1,2,0,0 )

TTY( "A1200",  "A1200",  4, 24,24,80, 4,0,0,0,0 )

TTY( "ADDS",   "ADDS",   5, 24,24,80, 4,1,2,0,0 )

TTY( "VT100",  "VT100",  6, 24,24,80, 8,1,3,0,0 )

TTY( "Tym430", "Tym430", 7, 24, 0,80, 4,0,0,0,0 )
TTY( "430",    "Tym430", 7, 24, 0,80, 4,0,0,0,0 )
TTX( "ADM3A",  "Tym430", 7, 24, 0,80, 4,0,0,0,0 )
! Get the user's terminal type, and set up some information about the
!  terminal, such as its screen size, capabalities, ... ;

procedure T!GetTermType;
  begin "get terminal type"
    string Term;
    integer I;

    I := -1;

IFCR TYMCOMX THENC
    Term := cv6str( auxclv( -1, I, '100 ) );		! get tty type ;
    if ( equ( Term, "______" ) ) then Term := NULL;	! not implemented ;
ENDC
IFCR TOPS20 THENC
    Term := "Tym444";	! ** hack ** ;
ENDC

    while ( true ) do
      begin "ask for terminal type"

	if ( Term = NULL ) then
	  begin
	    print( "Terminal Type? " );
IFCR TYMCOMX THENC
	    Term := inchwl;
	    I := cvsix( Term );
	    auxclv( -1, I, '100 );
ENDC
IFCR TOPS20 THENC
	    Term := InTTY;
ENDC
	  end;

	for I := 1 upto !!Cnt do
	  if ( kequ( Term, T!!Term[ I ] )) then
	    begin
	      T!Enum := T!!Enum[ I ];
	      T!Name := T!!Alias[ I ];
	      T!Lines := T!!Lines[ I ];
	      T!MaxS := T!!MaxS[ I ];
	      T!Width := T!!Width[ I ];
	      T!CPC := T!!CPC[ I ];
	      T!ELP := T!!ELP[ I ];
	      T!ELC := T!!ELC[ I ];
	      T!ILP := T!!ILP[ I ];
	      T!ICP := T!!ICP[ I ];
	      return;
	    end;

	if ( equ( Term, "?" ) or kequ( Term, "help" )) then
	  begin
	    print( crlf & "Supported terminals are:" & crlf );
	    for I := 1 upto !!Cnt do
	      if ( not kequ( T!!Alias[ I ], Term )) then
		begin
		  print( "  ", T!!Alias[ I ], crlf );
		  Term := T!!Alias[ I ];
		end;
	    print( crlf );
	  end
	else
	  begin
	    print( crlf & "Unknown terminal type: ", Term, crlf );
	    print( "Type ? for a list of supported types." & crlf&crlf );
	  end;

	Term := NULL;

      end "ask for terminal type";

  end "get terminal type";
! Initialize the module.  This involves saving the current state of
! the monitor with respect to the terminal, turning off the echo ... ;

internal procedure T!Init;
  begin

    T!GetTermType;

IFCR TYMCOMX THENC
    Begin!Code
	seto	1,;
	ttcall	6,1;		! getlch 1;
	movem	1,T!LCH;	! save them ;
	tlo	1,'220;		! set some magic bits ;
	ttcall	7,1;		! setlch 1;
	hrroi	1,'64;
	auxcal	1,'714;		! set no-echo, break on all bits ;
	setzm	T!XON;		! want the xon bit off ;
	hrroi	1,'55;
	auxcal	1,T!XON;	! turn it off, save old value ;
	jfcl;
      end;
ENDC
IFCR TOPS20 THENC
    start!code
	movei 1,-5;
	rtiw;
	movem 2,SaveRTIW;
	tlz 2,'040004;		! turn off ^C, ^O interrupts ;
	trz 2,'100000;		! turn off ^T interrupt ;
	hrrzi 1,-5;
	stiw;
	hrrzi 1,-1;
	rfmod;
	movem 2,SaveRFMOD;
	hrrzi 1,-1;
	trz 2,'300;		! 8 bit image i/o ;
	sfmod;
    end;
ENDC

    T!Buf!BP := point( 7, T!Buffer[ 0 ], -1 );
    T!Buf!Cnt := 0;

  end;
! Reset the terminal (or at least the line characteristics) to roughly
!  how we found it.  Position the cursor to the bottom of screen. ;

forward internal simple procedure T!CPos( integer Row, Col );
forward internal simple procedure T!Flush;

internal procedure T!Fini;
  begin

    T!Cpos( T!Lines, 1 );
    T!Flush;

IFCR TYMCOMX THENC
    Begin!Code
	hrli	1,'41;		! wait for output to complete ;
	hrri	1,5;		! wait 5 seconds before timeout ;
	calli	1,'72;		! hiber will send yellow ball ;
	 jfcl;			! ignore timeout (so we lose...) ;
	move	1,T!LCH;	! restore original line characteristics ;
	ttcall	7,1;		! setlch 1;
	hrroi	1,'64;		! turn off bits in file status word ;
	auxcal	1,0;		! clear the bits ;
	 jfcl;
	hrroi	1,'55;
	auxcal	1,T!XON;	! restore xon setting ;
         jfcl;
      end;
ENDC

IFCR TOPS20 THENC
    start!code
	movei 1,-5;
	move 2,SaveRTIW;
	stiw;
	hrrzi 1,-1;
	move 2,SaveRFMOD;
	sfmod;
    end;
ENDC

  end;
! Oops, re-init the terminal ;

internal procedure T!RSet;
  begin "reset the terminal"

IFCR TYMCOMX THENC
    Begin!Code
	seto	1,;
	ttcall	6,1;		! getlch 1;
	tlo	1,'220;		! set some magic bits ;
	ttcall	7,1;		! setlch 1;
	hrroi	1,'64;
	auxcal	1,'714;		! set no-echo, break on all bits ;
	setz	2,;
	hrroi	1,'55;
	auxcal	1,2;
	jfcl;
      end;
ENDC

IFCR TOPS20 THENC
    start!code
	movei 1,-5;
	move 2,SaveRTIW;
	tlz 2,'040004;		! turn off ^C, ^O interrupts ;
	trz 2,'100000;		! turn off ^T interrupt ;
	stiw;
	hrrzi 1,-1;
	move 2,SaveRFMOD;
	trz 2,'300;		! 8 bit image i/o ;
	sfmod;
    end;
ENDC

  end "reset the terminal";
! Routine to tell if typeahead is present ;

internal boolean procedure T!ChrP;
  begin "typeahead?"
    own integer CharThere;

IFCR TYMCOMX THENC
    start!code
	hrroi	1,'10;		! 1/  -1,,10 ;
	auxcal	1,;		! skip if input ;
	 tdca	1,1;		!  zero t1 and skip ;
	seto	1,;		! set 1 to -1 ;
	movem	1,CharThere;	! store the result ;
    end;
ENDC

IFCR TOPS20 THENC
    start!code
	setzm CharThere;
	hrrzi 1,-1;
	sibe;			! skip if buffer empty ;
	  movem 2,CharThere;	!  not empty, save count ;
    end;
ENDC

    return( CharThere );

  end "typeahead?";
! Routine to get a 7 bit image character from the terminal. ;

internal integer procedure T!GetC;
  begin "get a character"
    integer C;

IFCR TYMCOMX THENC
    start!code
	label getc, waitc, gotc;
getc:	hrroi	1,1;		! -1,,1 (.axi8s) ;
	auxcal	1,2;		! input image character and skip ;
	  jrst	waitc;		! no character, block for one ;
	jrst	gotc;		! have a character, go home ;
waitc:	hrroi	1,0;		! -1,,0 (.axi8c ) ;
	auxcal	1,2;		! block until input ;
	  jfcl;
gotc:	andi	2,'177;		! and to 7 bits ;
	movem	2,C;		! Save the character ;
      end;
ENDC

IFCR TOPS20 THENC
    start!code
	hrrzi 1,-1;		! read from the console ;
	bin;			! get a byte ;
	andi 2,'377;		! mask to 7 bits ;
	movem 2,C;		! save ;
    end;
ENDC

    return( C );

  end "get a character";
! Routine to flush the terminal buffer ;

internal simple procedure T!Flush;
  begin "flush"

    idpb( 0, T!Buf!BP );

IFCR TYMCOMX THENC
    auxclr( -1, T!Buffer[ 0 ], '52 );	! pseudo outstr ;
ENDC

IFCR TOPS20 THENC
    start!code
	movei 2,access( T!Buffer[ 0 ] );
	setz 3,;
	hrrzi 1,-1;			! write to our console ;
	sout;				! dump the string ;
    end;
ENDC

    T!Buf!BP := point( 7, T!Buffer[ 0 ], -1 );
    T!Buf!Cnt := 0;

  end "flush";
! Routine to buffer a character for output ;

internal simple procedure T!Buf( integer Char );
  begin "buffer a character"

    if ( T!Buf!Cnt = ( TERMBUFFERSIZE - 1 )) then T!Flush;

    idpb( Char, T!Buf!BP );
    T!Buf!Cnt := T!Buf!Cnt + 1;

  end "buffer a character";
! Routine to output a 7 bit character to the terminal ;

internal simple procedure T!OutC( integer Char );
  begin "print a character"

    if ( Char < " " ) then
      begin
        if ( Char = #CR ) then
          T!Col := 1
        else if ( Char = #LF ) then
          T!Row := T!Row + 1
	else if ( Char = #BS ) then
	  T!Col := T!Col - 1;
      end
    else
      begin
	T!Col := T!Col + 1;
	if ( T!Col > T!Width ) then	! we just got lost ;
	  T!Col := -999;
      end;

    T!Buf( Char );

  end "print a character";
! Routine to beep the bell
;

internal simple procedure T!Bell;
  begin "beep"

IFCR TYMCOMX THENC
    auxclv(-1,'7,'3);
ENDC

IFCR TOPS20 THENC
    start!code;
	hrrzi 1,-1;		! aim at our console ;
	hrrzi 1,'7;		! with a bell ;
	bout;			! launch it ;
    end;
ENDC

  end "beep";
! Routine to erase the screen for a T!Enum terminal. ;

internal simple procedure T!ES;
  begin "clear the screen"

    T!Row := 1;		! update state variables ;
    T!Col := 1;
    case T!Enum of
      begin
	[1] [2]
	  begin
	    T!Buf( #ESC ); T!Buf( "H" );
	    T!Buf( #ESC ); T!Buf( "J" );
	  end;
	[3]
	  begin
	    T!Buf( '36 );
	    T!Buf( #ESC ); T!Buf( "Y" );
	    T!Buf( #ESC ); T!Buf( ":" );
	  end;
	[4]
	  begin
	    T!Buf( #ESC ); T!Buf( '51 );
	  end;
	[5]
	  begin
	    T!Buf( #FF );
	  end;
	[6]
	  begin
	    T!Buf( #ESC ); T!Buf( "[" ); T!Buf( "H" );
	    T!Buf( #ESC ); T!Buf( "[" ); T!Buf( "2" ); T!Buf( "J" );
	  end;
	[7]
	  T!Buf( '32 )
      end;

  end "clear the screen";
! Routine to erase to end of line. ;

internal simple procedure T!EL;
  begin "erase to end of line"

    case T!Enum of
      begin
	[1] [2] [5]
	  begin
	    T!Buf( #ESC ); T!Buf( "K" );
	  end;
	[3]
	  begin
	    T!Buf( #ESC ); T!Buf( "T" );
	  end;
	[4]
	  begin
	    T!Buf( #ESC ); T!Buf( '43 ); T!Buf( 80 - T!Col );
	  end;
	[6]
	  begin
	    T!Buf( #ESC ); T!Buf( "[" ); T!Buf( "K" );
	  end
      end;

  end "erase to end of line";
! Routine to position the cursor. ;

internal simple procedure T!CPos( integer Row, Col );
  begin "position the cursor"
    own integer Temp1, Temp2;

    case T!Enum of
      begin
	[1] [5]
	  begin
	    T!Buf( #ESC ); T!Buf( "Y");
	    T!Buf( Row + '37 ); T!Buf( Col + '37 );
	  end;
	[2]
	  begin
	    T!Buf( #ESC ); T!Buf( "&" ); T!Buf( "a" );
	    if ( true ) then
	      begin
		Temp1 := Row - 1;
		Temp2 := Temp1 div 10;
		if ( Temp2 > 0 ) then
	  	  T!Buf( Temp2 + "0" );
		Temp2 := Temp1 mod 10;
		T!Buf( Temp2 + "0" );
		T!Buf( "y" );
	      end;
	    if ( true ) then	! if ( Col neq T!Col ) then ;
	      begin
		Temp1 := Col - 1;
		Temp2 := Temp1 div 10;
		if ( Temp2 > 0 ) then
		  T!Buf( Temp2 + "0" );
		Temp2 := Temp1 mod 10;
		T!Buf( Temp2 + "0" );
	      end;
	    T!Buf( "C" );
	  end;
	[3][7]
	  begin
	    T!Buf( #ESC ); T!Buf( "=" );
	    T!Buf( Row + '37 );
	    T!Buf( Col + '37 );
	  end;                                                         
	[4]
	  begin
	    T!Buf( #ESC ); T!Buf( '40 );
	    T!Buf( Col + '37 );
	    T!Buf( ( 24 - Row ) + '40 );
	  end;
	[6]		! vt100 ;
	  begin
	    T!Buf( #ESC ); T!Buf( "[" );
	    Temp1 := Row;
	    Temp2 := Temp1 div 10;
	    if ( Temp2 > 0 ) then
	      T!Buf( Temp2 + "0" );
	    Temp2 := Temp1 mod 10;
	    T!Buf( Temp2 + "0" );
	    T!Buf( ";" );
	    Temp1 := Col;
	    Temp2 := Temp1 div 10;
	    if ( Temp2 > 0 ) then
	      T!Buf( Temp2 + "0" );
	    Temp2 := Temp1 mod 10;
	    T!Buf( Temp2 + "0" );
	    T!Buf( "H" );
	  end
      end;

    T!Row := Row;
    T!Col := Col;

  end "position the cursor";
! Insert N spaces at the cursor ;

internal simple procedure T!IC( integer N );
  begin "insert spaces"

    case T!Enum of
      begin
	[1] begin end;
	[2] begin
	      T!Buf( #ESC ); T!Buf( "Q" );
	      while ( N ) do
		begin
		  T!Buf( " " );
		  N := N - 1;
		end;
	      T!Buf( #ESC ); T!Buf( "R" );
	    end;
	[3] while ( N ) do
	      begin
		T!Buf( #ESC ); T!Buf( "Q" );
		N := N - 1;
	      end;
	[4] begin end
      end;

  end "insert spaces";
! Delete N characters at the cursor ;

internal simple procedure T!DC( integer N );
  begin "delete spaces"

    case T!Enum of
      begin
	[1] begin end;
	[2] while ( N ) do
	      begin
		T!Buf( #ESC ); T!Buf( "P" );
		N := N - 1;
	      end;
	[3] while ( N ) do
	      begin
		T!Buf( #ESC ); T!Buf( "W" );
		N := N - 1;
	      end;
	[4] begin end
      end;

  end "delete spaces";
! Routine to insert a blank line at the cursor. ;

internal simple procedure T!IL;
  begin "insert a line"

    case T!Enum of
      begin
	[2] [1]
	  begin
	    T!Buf( #ESC );  T!Buf( "L" );
	  end;
	[3]
	  begin
	    T!Buf( #ESC );  T!Buf( "E" );
	  end;
	[4]
	  begin
	    T!Buf( #ESC );  T!Buf( '45 );
	  end
      end;

  end "insert a line";
! Routine to delete the line at the cursor. ;

internal simple procedure T!DL;
  begin "delete a line"

    case T!Enum of
      begin
	[2] [1]
	  begin
	    T!Buf( #ESC );  T!Buf( "M" );
	  end;
	[3]
	  begin
	    T!Buf( #ESC );  T!Buf( "R" );
	  end;
	[4]
	  begin
	    T!Buf( #ESC );  T!Buf( '44 );
	  end
      end;

  end "delete a line";
! ************************  R E D I S P L A Y  *************************
! *                                                                    *
! *  Herein is an implementation of the D.W.S. Redisplay algorithm,    *
! *  which incorporates some of the ideas from the FINE redisplay,     *
! *  the UNIX EMACS redisplay, and from James Gosling's talk on re-    *
! *  displays at the 1981 ACM SIGPLAN conference on Text Manipulation, *
! *  but tries to be less CPU intensive, as people here in the "real   *
! *  world" get charged for the cycles they use.  So it goes.          *
! *                                                                    *
! *  Dave W. Smith,  September '81                                     *
! *                                                                    *
! **********************************************************************
!
! The Redisplay works roughly as follows:
!
! 1.  Slide the old hash vector along the new hash vector to find an
!     adjustment where the number of matches is a maximum.  (This will
!     be 0 is nothing has scrolled, -n if text is to be scrolled down,
!     +n if text is to be scrolled up).
!
! 2.  Adjust the physical screen vertically, using insert/delete line
!     operations if available.
!
! 3.  For each line do:
!
!     A.  Scan new and old lines to find the character position, if any        where the lines begin to differ.  If the lines don't differ,
!         then proceed to the next line.
!
!     B.  Slide the remaining section of the old line along the remaining
!         section of the new line, looking an for an adjustment which
!         maximizes character matches.
!
!     C.  Adjust the line horizontally, using insert/delete character if
!         available.
!
!     D.  Proceeding from the point of initial difference, fix characters
!         as needed.
!
!     Various heuristics are applyed here and there to minimize the number
!     of characters which must be sent to fix the screen.
! ;
! *********************  Internal data structures *********************** ;

! The Redisplay's image of the screen is kept as a packed array of
! integers (with 5 characters packed into a word), which is accessed by
! pointing a byte pointer into it. ;

  safe integer array R!Buf[ 1 : 25, 1 : 27 ];

! Each line of text on the screen has an associated hash value which is
! used as an efficient way of telling when lines should be moved up or
! down on the screen by comparing it against the hash vector for the
! desired screen image. ;

  safe integer array R!Hash[ 1 : 25 ];
  safe integer array W!Hash[ 1 : 25 ];

! keep the hash of a blank line around. ;

  own integer BlankHash;

! we also want to keep track of the cursor ;

  internal integer R!Row, R!Col;
! (Re)Initialize the Redisplay by clearing the physical screen, setting
! the cursor pointers to home, filling the internal screen with <CR>s,
! and reinitializing the hash vector. ;

internal procedure R!Init;
  begin
    integer I;

    T!ES;				! clear the screen ;
    T!Flush;

    for R!Row := 1 upto 25 do
      for R!Col := 1 upto 27 do
        R!Buf[ R!Row, R!Col ] := cvasc("     ");

    BlankHash := 0;			! Compute hash for a blank line ;
    for I := 1 upto ( T!Lines div 5 ) do
      BlankHash := ( BlankHash rot 3 ) xor cvasc( "     " );

    for R!Row := 1 upto 25 do	! Save the hashes ;
      R!Hash[ R!Row ] := BlankHash;

  end;
! procedure to get the cursor to ( R!Row, R!Col ) by whatever devious and
!  nefarious means we see fit. ;

simple procedure R!SetCursor( integer array Buffer );
  begin "move cursor"
    own integer Dist, BP;

    ! If we're moving up, punt.  Few terminals can handle this. ;
    ! Also, if we're lost, punt. ;

    if (( R!Row < T!Row ) or ( T!Col < 0 )) then
      begin
	T!CPos( R!Row, R!Col );
	return;
      end;

    ! if we want the cursor to move down, see if we can't get there
    ! using line feeds, then let the 'same row' code do the rest ;

    if ( R!Row > T!Row ) then
      begin
	Dist := ( R!Row - T!Row ) + abs( R!Col - T!Col );
	if ( Dist > T!CPC ) then
	  begin
	    T!CPos( R!Row, R!Col );
	    return;
	  end;
	Dist := R!Row - T!Row;		! get us to the correct row ;
	while ( Dist ) do
	  begin
	    T!OutC( #LF );
	    Dist := Dist - 1;
	  end;
      end;

! continued ... ;
! continued ... ;

    ! Here we handle cursor movement within a row.  Checks are made to
    ! see if it may be cheaper to use backspaces or character rewrites
    ! to get us where we want to go. ;

    if ( T!Col = R!Col ) then		! the trivial case ;
      return
    else if ( R!Col < T!Col ) then	! do the backspace check ;
      begin
	Dist := T!Col - R!Col;
	if ( Dist < T!CPC ) then	! cheaper to backspace? ;
	  while ( Dist ) do		 ! yes - use backspaces ;
	    begin
	      T!OutC( #BS );
	      Dist := Dist - 1;
	    end
	else
	  T!CPos( R!Row, R!Col );	 ! no - punt ;
      end
    else  ! R!Col > T!Col ;
      begin
	Dist := R!Col - T!Col;
	if ( Dist < T!CPC ) then	! cheaper to rewrite characters? ;
	  begin
	    BP := point( 7, Buffer[ R!Row, 1 ], -1 );	 ! yes, do it ;
	    Dist := T!Col;
	    while ( Dist ) do
	      begin
		ibp( BP );
		Dist := Dist - 1;
	      end;
	    Dist := R!Col - T!Col;
	    while ( Dist ) do
	      begin
		T!OutC( ldb( BP ) );
		ibp( BP );
		Dist := Dist - 1;
	      end;
	  end
	else
	  T!CPos( R!Row, R!Col );	 ! no - punt ;
      end;

  end "move cursor";
! **********************  The ReDisplay proper  ********************** ;

! It is extremely dangerous to even consider touching this.  Think twice,
! then decide not to.  If a particular type of terminal is having problems,
! you are better off looking in the terminal abstraction.
;

internal simple procedure R!Disp( integer array Buffer;
				  boolean PuntIfKeyHit;
				  integer FinalRow, FinalColumn );
  begin "redisplay"
    own integer Old!BP, Old!C, New!BP, New!C, Cursor!BP;
    own integer Line, FirstLineChanged, LineAdjustment, LinesChanged;
    own integer Sweep, SweepSize, SweepCnt;
    own integer ScanHi, ScanLow;
    own integer ThisAdj, ThisAdjCnt, BestAdj, BestAdjCnt;
    own integer NewIdx, OldIdx, ChangeP;
    own integer BufferLength, BufferWidth;

    if ( PuntIfKeyHit and T!ChrP ) then return;

    BufferLength := arrinfo( Buffer, 2 );
    BufferWidth := arrinfo( Buffer, 4 );

    for Line := 1 upto T!Lines do
      begin
	own integer Hash, Chunk;
	Hash := 0;
	for Chunk := 1 upto BufferWidth do
	  Hash := ( Hash rot 3 ) xor Buffer[ Line, Chunk ];
	W!Hash[ Line ] := Hash;
      end;

    if ( T!ILP ) then
      begin "vertical adjustment"

	label EndOfVerticalAdjustment;

	! Find first, and number of, lines changed. ;

        FirstLineChanged := 0;
	LinesChanged := 0;
	for Line := (T!Lines - 2) downto 1 do
	  if ( R!Hash[ Line ] neq W!Hash[ Line ] ) then
	    begin
	      FirstLineChanged := Line;
	      LinesChanged := LinesChanged + 1;
	    end;

	if ( LinesChanged and
	    ( Buffer[FirstLineChanged,1] = R!Buf[FirstLineChanged,1] )) then
	  begin
	    FirstLineChanged := FirstLineChanged + 1;
	    LinesChanged := LinesChanged - 1;
	  end;

	if ( LinesChanged <= 2 ) then goto EndOfVerticalAdjustment;

	! Find the best adjustment factor by comparing the hash vectors ;

	SweepSize := ( T!Lines - 1 ) - FirstLineChanged;
	BestAdj := 0; BestAdjCnt := 0;
	ScanHi := ( SweepSize - 1 );
	ScanLow := - ScanHi;

	for ThisAdj := ScanHi downto ScanLow do
	  begin "comb"
	    NewIdx := FirstLineChanged;
	    if ( ThisAdj > 0 ) then NewIdx := NewIdx + ThisAdj;
	    OldIdx := FirstLineChanged;
	    if ( ThisAdj < 0 ) then OldIdx := OldIdx - ThisAdj;

	    SweepCnt := SweepSize - abs( ThisAdj );
	    ThisAdjCnt := 0;

	    for Sweep := 1 upto SweepCnt do
	      begin
		if ( R!Hash[ OldIdx ] = W!Hash[ NewIdx ] ) then
		  ThisAdjCnt := ThisAdjCnt + 1;
		OldIdx := OldIdx + 1;
		NewIdx := NewIdx + 1;
	      end;

	    if ( ThisAdjCnt > BestAdjCnt ) then
	      begin
		BestAdj := ThisAdj;
		BestAdjCnt := ThisAdjCnt;
	      end;
	  end "comb";

	! second heueristic - may not want to move the first line changed. ;

	if ( BestAdj > 0 ) then
	  if ( Buffer[FirstLineChanged,1] = R!Buf[FirstLineChanged,1] ) then
	    begin
	      FirstLineChanged := FirstLineChanged + 1;
	      LinesChanged := LinesChanged - 1;
	    end;

	! Don't exceed T!MaxS ;

	if ( abs( BestAdj ) > T!MaxS ) then goto EndOfVerticalAdjustment;

! continued ... ;
! continued ... ;

	! Adjust the screen with insert/delete line ops ;

	if ( BestAdj < 0 ) then
	  begin
	    T!CPos( FirstLineChanged, 1 );
	    for Line := -1 downto BestAdj do T!DL;
	    T!CPos( T!Lines - 1 + BestAdj, 1 );
	    for Line := -1 downto BestAdj do T!IL;
	    for R!Row := FirstLineChanged upto ( T!Lines - 2 ) do
	      begin
		Line := R!Row - BestAdj;
		if ( Line < ( T!Lines - 1 ) ) then
		  begin
		    for R!Col := 1 upto BufferWidth do
		      R!Buf[ R!Row, R!Col ] := R!Buf[ Line, R!Col ];
		    R!Hash[ R!Row ] := R!Hash[ Line ];
		  end
		else
		  begin
		    for R!Col := 1 upto BufferWidth do
		      R!Buf[ R!Row, R!Col ] := cvasc("     ");
		    R!Hash[ R!Row ] := BlankHash;
		  end;
	      end;
	  end
	else if ( BestAdj > 0 ) then
	  begin
	    T!CPos( T!Lines - 1 - BestAdj , 1 );
	    for Line := 1 upto BestAdj do T!DL;
	    T!CPos( FirstLineChanged, 1 );
	    for Line := 1 upto BestAdj do T!IL;
	    for R!Row := ( T!Lines - 2 ) downto FirstLineChanged do
	      begin
		Line := R!Row - BestAdj;
		if ( Line < FirstLineChanged ) then
		  begin
		    for R!Col := 1 upto BufferWidth do
		      R!Buf[ R!Row, R!Col ] := cvasc("     ");
		    R!Hash[ R!Row ] := BlankHash;
		  end
		else
		  begin
		    for R!Col := 1 upto BufferWidth do
		      R!Buf[ R!Row, R!Col ] := R!Buf[ Line, R!Col ];
		    R!Hash[ R!Row ] := R!Hash[ Line ];
		  end;
	      end;
	  end;

	T!Flush;

EndOfVerticalAdjustment:

      end "vertical adjustment";

! continued ... ;
! continued... ;

    ! Now do fixups on a line by line basis ;

    for R!Row := 1 upto ( T!Lines min ( BufferLength * 5 )) do
      begin "each row"
	own integer NewLength, OldLength, I, Temp!New!BP, Temp!Old!BP;

	if ( PuntIfKeyHit and T!ChrP ) then
	  begin
	    T!Flush;
	    return;
	  end;

	OldIDX := location( R!Buf[ R!Row, 1 ] );
	NewIDX := location( Buffer[ R!Row, 1 ] );
	start!code
	  label loop;
	  setzm	ChangeP;	! no changes seen yet ;
	  move 1,BufferWidth;
	  move 2,OldIDX;	! point to old words ;
	  move 3,NewIDX;	! point to new words ;
	loop:
	  move 4,(2);		! pick up old value ;
	  came 4,(3);		! compare with new value ;
	   setom ChangeP;	! a change! ;
	  addi 2,1;
	  addi 3,1;
	  sojg 1,loop;
	end;
	if ( not ChangeP ) then continue "each row" ;

	New!BP := point( 7, Buffer[ R!Row, 1 ], 6 );
        Old!BP := point( 7, R!Buf[ R!Row, 1 ], 6 );

	Temp!New!BP := New!BP;
	Temp!Old!BP := Old!BP;
	NewLength := OldLength := 0;

	for I := 1 upto (T!Width min ( BufferWidth * 5 )) do
	  begin
	    if ( ldb( Temp!New!BP ) neq " " ) then NewLength := I;
	    if ( ldb( Temp!Old!BP ) neq " " ) then OldLength := I;
	    ibp( Temp!New!BP );  ibp( Temp!Old!BP );
	  end;

	! look for the first difference between the two lines ;
        ! compute the adjustment factor ;
        ! adjust the line with insert/delete character ;

! continued ... ;
! continued ... ;

	! now fix the rest of the line ;

	Cursor!BP := 0;
        R!Col := 1;

	while ( R!Col <= ( T!Width min ( BufferWidth * 5 ))) do
	  begin "fix a line"

	    Old!C := ldb( Old!BP );
	    New!C := ldb( New!BP );

	    if (( R!Col > NewLength ) and ( Old!C neq " "  ) and T!ELP ) then
	      begin
		if ( R!Col <= OldLength ) then
		  begin
		    R!SetCursor( Buffer );
		    T!El;
		  end;
		done;
	      end
	    else if ( New!C neq Old!C ) then
	      begin
		R!SetCursor( Buffer );
		T!OutC( New!C );
		Cursor!BP := New!BP;  ibp( Cursor!BP );
	      end;

	    ibp( Old!BP );
	    ibp( New!BP );
	    R!Col := R!Col + 1;

	  end "fix a line" ;

! continued ... ;
! continued ... ;

	! here do do end of line bookkeeping ;

	for R!Col := 1 upto BufferWidth do
	  R!Buf[ R!Row, R!Col ] := Buffer[ R!Row, R!Col ];
	R!Hash[ R!Row ] := W!Hash[ R!Row ];

      end "each row" ;


    ! Now put the cursor to rest ;

    if ( FinalRow and FinalColumn ) then
      begin
	R!Row := FinalRow;
	R!Col := FinalColumn;
	R!SetCursor( Buffer );
      end;

    T!Flush;

  end "redisplay";


end "Redisplay for a Cannonical CRT";
  !l_