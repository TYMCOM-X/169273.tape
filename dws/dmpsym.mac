title	dmpsym - loadable goody to dump symbol tables when reentered
subttl	dave w. smith, 19-aug-81

if1,<printx	[offset 0 is full dump]>
if1,<printx	[offset 1 is program name dump]>

	loc	124	; .jbren
	exp dmpsym	; so we can reenter
	reloc 0

	pdlsiz==16	; local stack size

	a1==	1	; some scratch regs
	a2==	2	;  "     "      "
	a3==	3	;  "     "      "
	a4==	4	;  "     "      "
	symp==	5	; pointer into symbol table
	symc==	6	; counter
	p==	17	; fortran's stack

dmpsym:	jrst	[setzm dmptyp		; dump type = 0
		 jrst dmpsy1]
	jrst	[setom dmptyp		; dump type -1
		 jrst dmpsy1]
dmpsy1:	movem	p,savacs+p		; save the old stack pointer
	move	p,[iowd pdlsiz,ourpdl]	; set up our stack pointer
	movem	a1,savacs+a1		; save some work registers
	movem	a2,savacs+a2
	movem	a3,savacs+a3
	movem	a4,savacs+a4
	movem	symp,savacs+symp
	movem	symc,savacs+symc

	hrrz	symp,116		; point to low seg symbol table
	hlre	symc,116		; symbol table count

	jumpn	symp,dmplow
	 outstr	[asciz/!No Lowseg Symbols!
/]
	 jrst	dmphgh
dmplow:
outstr	[asciz/Lowseg symbols:
/]
	pushj	p,dmplst
	outstr	crlf

dmphgh:	skipn	115
	 jrst	done
	hrrz	symp,400006		; point to hiseg symbol table
	jumpe	symp,done
	outstr	[asciz/Hiseg symbols:
/]
	pushj	p,dmplst
	outstr	crlf

done:
	move	a1,savacs+a1		; restore old registers
	move	a2,savacs+a2
	move	a3,savacs+a3
	move	a4,savacs+a4
	move	symp,savacs+symp
	move	symc,savacs+symc
	move	p,savacs+p
	exit	1,			; back to whatever awaits ...
; dmplst - routine to dump the symbol table pointed to by symp
;
; wastes on all registers.

dmplst:	setzm	column			; start in column 0

loop:
	move	a2,column
	cain	a2,3
	 jrst	[setzm	column
		 outstr	crlf
		 jrst .+1]

	skipn	dmptyp			; looking for program names?
	 jrst	loop1			; no, don't bother checking
	move	a3,(symp)		; get a copy of the symbol
	setz	a2,			; make some clean room for it
	lshc	a2,4			; shift in the code bits
	lsh	a2,2			; justify the code
	jumpe	a2,loop1		; type 0 is program name
	came	a2,14			; block type?
	 jrst	loopb
loop1:	setz	a2,			; clear a2
	move	a3,(symp)		; copy symbol to a3
	lshc	a2,3			; shift 3 bits into a2
	addi	a2,"0"			; make it ascii
	outchr	a2			; and print it
	setz	a2,			; clear a2 again
	lshc	a2,1			; shift in one more bit
	lsh	a2,2			; adjust it
	addi	a2,"0"			; make it ascii
	outchr	a2			; and print it
	outchr	[" "]			; space over one

	move	a1,(symp)		; pick up the symbol name
	pushj	p,rad50t		; type out the symbol name

	outchr	[" "]			; space over a bit

	move	a1,1(symp)		; pick up the symbol value
	pushj	p,typoct		; type it out in octal

	outstr	[asciz/    /]		; some more spaces
	aos	column			; kick the column count

loopb:	addi	symp,2			; point to the next symbol
	addi	symc,2
	jumpe	symc,loopx		; out of symbols yet?
	jrst	loop

loopx:	outstr	crlf
	popj	p,
; rad50t - type out the rad50 symbol in a1
;
; trashes a1-a3

rad50t:	tlz	a1,740000		; clear out non rad50 bits
	movei	a3,6			; setup a counter

rad50l:	idivi	a1,50
	push	p,rad50(a2)		; push the correct character
	sojg	a3,rad50l

	movei	a3,6			; reset counter

rad50p:	pop	p,a2			; pop the characters
	outchr	a2			; and print them
	sojg	a3,rad50p

	popj	p,			; back to caller

rad50:	exp " ","0","1","2","3","4","5","6","7","8","9"
	exp "A","B","C","D","E","F","G","H","I","J","K","L","M"
	exp "N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
	exp ".","$","%"


; typoct - type the value of a1 out in octal
;
; trashes a1-a3

typoct:	move	a3,a1			; we want the value in a3
	movei	a1,^d12			; and a counter in 6

typocl:	setz	a2,			; clear a2
	lshc	a2,3			; shift some bits into it
	addi	a2,"0"			; make it look like ascii
	outchr	a2			; and print it
	sojg	a1,typocl		; iterate until finished

	popj	p,			; back to caller
; impure storage and such

crlf:	byte(7)15,12,0
dmptyp:	block	1			; type of dump to do
column:	block	1
savacs:	block	20
ourpdl:	block	pdlsiz			; some local storage

	end
