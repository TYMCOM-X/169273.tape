begin "terms"

  require "(sailib)sail.def" source!file;
  require "terms.hdr" source!file;

  define TermDefFile = {"TERMS.DEF"};

  !		*****************
  !		**  T E R M S  **
  !		*****************
  !
  !  Caveat:  Define your terms carefully!
  !
  !  Update program for the terminal definition (TERMS.DEF) file.
  !
  !  Dave W. Smith,  May 11, '82 ;

! Internal storeage and such ;


! Stuff used for I/O ;

integer IChan, OChan, EOF, EOF!Out;


! Working storeage for TERMS.DEF ;

integer TermIdx;
integer array TermRec[ 1 : 100, 1 : T$RecSize ];

! A prototype record ;

integer array WorkRec[ 1 : T$RecSize ];

! Read and interlock the terminal definition file ;

procedure ReadTermsDef;
  begin
    integer Flag, I, NEntries;
    integer array LKB[ 0 : 5 ];

    TermIdx := 0;

    open( IChan := getchan, "DSK", '14,4,0,128,0, EOF );
    lookup( IChan, TermDefFile, Flag );
    if ( Flag ) then
      begin
	if ( Flag land '777777 ) then
	  usererr( 0,0,"Lookup error "&cvos(Flag)&" for TERMS.DEF","x");
	print( "[Creating new TERMS.DEF]", crlf );
      end
    else
      begin
	fileinfo( LKB );
	NEntries := LKB[ 5 ] div T$RecSize;
	while ( true ) do
	  begin "read file"
	    if ( TermIdx = NEntries ) then done "read file";
	    TermIdx := TermIdx + 1;
	    for I := 1 upto T$RecSize do
	      TermRec[ TermIdx, I ] := wordin( IChan );
	  end "read file";
      end;
    print( "[", NEntries, " Terminal(s) defined in TERMS.DEF]", crlf );
    close( IChan );

    ! Now interlock the file ;

    open( OChan := getchan, "DSK", '14,0,4,512,0, EOF!Out );
    enter( OChan, TermDefFile, Flag );
    if ( Flag ) then
      begin
	print( "Enter error "&cvos(Flag)&" for TERMS.DEF","X" );
	release( OChan );
      end;

  end;

! Write out the terminal definition file (which we already have
! interlocked) and make sure that it's protected correctly ;

procedure WriteTermsDef;
  begin
    integer Flag, I, J;

    for I := 1 upto TermIdx do
      for J := 1 upto T$RecSize do
	wordout( OChan, TermRec[ I,J ] );

    print( "[TERMS.DEF written]", crlf );

    rename( OChan, TermDefFile, '755, Flag );
    if ( Flag ) then
      print( "% Protection on TERMS.DEF may be bad", crlf );

    close( OChan );

  end;
! Routine to look at a string and return a number ;

integer procedure CVNumber( string S );
  begin
    if ( S = "'" ) then
      begin
	lop( S );
	return( cvo( S ));
      end
    else
      return( cvd( S ));
  end;


! Routine to return true if answered "Y" or "y" ;

boolean procedure IsYes( string S );
  begin
    return(( S = "Y" ) or ( S = "y" ));
  end;

! Disect a line to make a string ;

procedure MakeString( string Line;
		      integer Bytes;
		      reference integer Addr );
  begin
    integer BP, I, Temp;
    string SaveLine;

    SaveLine := Line;
    BP := point( 7, Addr, -1 );
    I := 0;

    while ( I < Bytes ) do
      begin
	while ( Line = " " ) do lop( Line );
	if ( not length( Line )) then done;
	Temp := lop( Line );
	if ( Temp = "'" ) then
	  begin
	    if (( Line >= "0" ) and ( Line <= "7" )) then
	      begin
		Temp := 0;		
		while (( Line >= "0" ) and ( Line <= "7" )) do
		  Temp := Temp * 8 + lop( Line ) - '60;
	      end;
	    idpb( Temp, BP );
	  end
	else
	  begin
	    idpb( Temp, BP );
	  end;
	I := I + 1;
      end;

    if ( length( Line )) then
      print( "% Results may be bogus", crlf );

  end;
! Routine to pretty print a string ;

procedure PrintString( reference integer Addr );
  begin
    integer I, BP, Temp;

    BP := point( 7, Addr, -1 );    
    I := 0;
    while ( Temp := ildb( BP )) do
      begin
	if ( I ) then print( " " );
	if (( Temp > '40 ) and ( Temp < '177 )) then
	  outchr( Temp )
	else
	  print( "'", cvos( Temp ));
	I := I + 1;
      end;
  end;
! Edit the definition that's set up in WorkRec ;

procedure EditWorkRec;
  begin
    string Line;

    print( crlf );

    print( "Terminal Name  [",cv6str( WorkRec[ T$Name ] ),"]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$Name ] := cvsix( Line );

    print( "Lines on screen [",WorkRec[ T$Lines ],"]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$Lines ] := CVNumber( Line );

    print( "Columns on screen [",WorkRec[ T$Width ],"]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$Width ] := CVNumber( Line );

    print( "String to home cursor [" );
    PrintString( WorkRec[ T$HomeStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$HomeStr ] );

    print( "String to clear screen [" );
    PrintString( WorkRec[ T$ClearStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$ClearStr ] );

    print( "String to erase to end-of-line [" );
    PrintString( WorkRec[ T$EraseStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$EraseStr ] );

    print( "String to delete a line [" );
    PrintString( WorkRec[ T$KillStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$KillStr ] );

    print( "String to insert a line [" );
    PrintString( WorkRec[ T$InsertStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$InsertStr ] );

    print( "String to start hi-lite [" );
    PrintString( WorkRec[ T$HiLiteOnStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$HiLiteOnStr ] );

    print( "String to stop hi-lite [" );
    PrintString( WorkRec[ T$HiLiteOffStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$HiLiteOffStr ] );

    ! now for the cursor stuff ;

    print( "Is the cursor addressed as (Row,Column) [" );
    if ( WorkRec[ T$RowFirst ] ) then
      print( "Y]: " )
    else
      print( "N]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$RowFirst ] := IsYes( Line );

    print( "Are cursor coordinates output in ASCII [" );
    if ( WorkRec[ T$ASCII ] ) then
      print( "Y]: " )
    else
      print( "N]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$ASCII ] := IsYes( Line );

    print( "Offset applied to Row [",WorkRec[ T$RowOffSet ],"]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$RowOffSet ] := CVNumber( Line );

    print( "Offset applied to Column [",WorkRec[ T$ColumnOffSet ],"]: " );
    if ( Line := inchwl ) then
      WorkRec[ T$ColumnOffSet ] := CVNumber( Line );

    print( "Cursor preamble string [" );
    PrintString( WorkRec[ T$PreambleStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$PreambleStr ] );

    print( "Cursor separator string [" );
    PrintString( WorkRec[ T$SeparatorStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$SeparatorStr ] );

    print( "Cursor Terminator string [" );
    PrintString( WorkRec[ T$TerminatorStr ] );
    print( "]: " );
    if ( Line := inchwl ) then
      MakeString( Line, 4, WorkRec[ T$TerminatorStr ] );

    print( crlf );
    
  end;
! Procedure to list the Terminals on file ;

procedure ListCommand;
  begin
    integer I;

    if ( not TermIdx ) then
      begin
	print( "% No Terminals Defined (yet)", crlf );
	return;
      end;

    print( crlf & "Terminals defined are:" & crlf & crlf );
    for I := 1 upto TermIdx do
      begin
	print( I, ".  ", cv6str(TermRec[ I, T$Name ]), crlf );
      end;
    print( crlf );

  end;
! Edit a definition ;

procedure EditCommand;
  begin
    integer I, J, N;

    print( "Definition to Edit? " );  N := cvsix(inchwl);

    I := 1;
    while ( I <= TermIdx ) do
      begin
	if ( N = TermRec[ I, T$Name ] ) then done;
	I := I + 1;
      end;
    if ( I > TermIdx ) then
      begin
	print( "% Not found" & crlf );
	return;
      end;
    for J := 1 upto T$RecSize do
      WorkRec[ J ] := TermRec[ I, J ];

    EditWorkRec;

    if ( N = WorkRec[ T$Name ] ) then
      begin
	for J := 1 upto T$RecSize do
	  TermRec[ I, J ] := WorkRec[ J ];
      end
    else
      begin "possibly new record"
	print( "Replace old entry for ",cv6str(N),"? " );
	if ( IsYes( inchwl )) then
	  begin
	    for J := 1 upto T$RecSize do
	      TermRec[ I, J ] := WorkRec[ J ];
	  end
	else
	  begin
	    for I := 1 upto TermIdx do
	      if ( N = TermRec[ I, T$Name ] ) then
		begin
		  print( "Replace old entry for ",cv6str(N),"? " );
		  if ( IsYes( inchwl )) then
		    begin
		      for J := 1 upto T$RecSize do
			TermRec[ I, J ] := WorkRec[ J ];
		      return;
		    end;
		end;
	    TermIdx := TermIdx + 1;
	    for J := 1 upto T$RecSize do
	      TermRec[ TermIdx, J ] := WorkRec[ J ];
	  end;
      end "possibly new record";
  end;
! Routine to create a new record ;

procedure AddCommand;
  begin
    integer I, J, N;

    arrclr( WorkRec );

    EditWorkRec;

    N := WorkRec[ T$Name ];

    for I := 1 upto TermIdx do
      if ( N = TermRec[ I, T$Name ] ) then
	begin
	  print( "Replace old entry for ",cv6str(N),"? " );
	  if ( IsYes( inchwl )) then
	    begin
	      for J := 1 upto T$RecSize do
		TermRec[ I, J ] := WorkRec[ J ];
	      return;
	    end;
	end;

    TermIdx := TermIdx + 1;
    for J := 1 upto T$RecSize do
      TermRec[ TermIdx, J ] := WorkRec[ J ];
      
  end;

! The main command loop ;

procedure CommandLoop;
  begin
    string Line;
    define AB = {[1 for length(Line)]};

    while ( true ) do
      begin
	print( "*" );  Line := inchwl;
	if ( not Line ) then continue;

	if ( kequ( Line, "QUIT" AB )) then
	  done
	else if ( kequ( Line, "LIST" AB )) then
	  ListCommand
	else if ( kequ( Line, "EDIT" AB )) then
	  EditCommand
	else if ( kequ( Line, "ADD" AB )) then
	  AddCommand
	else if ( kequ( Line, "?" AB )) then
	  print( "No help, sorry", crlf )
	else
	  print( "Eh?", crlf );
      end;
  end;



! Top Level Logic (such as it is) ;


  ReadTermsDef;

  CommandLoop;

  WriteTermsDef;


end "terms"
    