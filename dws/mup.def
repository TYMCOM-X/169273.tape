!  Definitions for the Robot Microprocessor hardware.
;

! Registers ;

define	$PC = 0;		! The 10 bit program counter ;
define	$Op = 1;		! The last opcode executed ;
define	$Ac = 2;		! The 10 bit accumulator ;
define	$ST = 3;		! The 10 bit status register ;

! Bits/Masks in the Status register ;

define	ST$C = '0001;		! The 'carry' bit ;
define	ST$Z = '0002;		! The 'zero' bit ;
define	ST$P = '0004;		! The 'positive' bit ;
define  ST$O = '0010;		! The 'overflow' bit ;
define	ST$4 = '0020,
	ST$5 = '0040,
	ST$6 = '0100,
	ST$7 = '0200,
	ST$8 = '0400,
	ST$9 = '1000;
!  Layout of the MuP Opcode
!
!   9 8 7 6 5 4 3 2 1 0
!    \ \ \ \ \ \ \ \ \ \_
!     \ \ \ \ \ \ \ \ \__ \
!      \ \ \ \ \ \ \ \___  \ instruction information
!	\ \ \ \ \ \ \____  /
!	 \ \ \ \ \ \_____ /
!	  \ \ \ \ \______ 
!	   \ \ \ \_______ \ instruction class
!	    \ \ \________ / 
!	     \ \_________  2nd byte is immediate data
!	      \__________  2 byte instruction
;

define	Op$2Byte = '1000;
define	Op$Immed = '0400;

define	Op$I$Jmp = '0 lsh 4;		! flow control instructions ;
define	Op$I$Mov = '1 lsh 4;		! data move instructions ;
define	Op$I$Log = '2 lsh 4;		! logical operations ;
define	Op$I$Mth = '3 lsh 4;		! math operations ;

define	Op$I$IO  = '7 lsh 4;		! I/O operations ;
! The macros for building the opcode tables
;

define	!!Cnt = 0,
	!!OpT = {preload!with },
	!!OpV = {preload!with };

define X( OpT, OpV ) = {
  redefine !!Cnt = !!Cnt + 1,
	   !!OpT = cvms( !!OpT ) & {OpT, },
	   !!OpV = cvms( !!OpV ) & {OpV, };
};

define X!End = {
  redefine !!Cnt = !!Cnt + 1,
	   !!OpT = cvms( !!OpT ) & {NULL; string array OpT[1:!!Cnt]; },
	   !!OpV = cvms( !!OpV ) & {0; integer array OpV[1:!!Cnt]; };
  require " [Tables Expanded]" message;

!!OpT;
!!OpV

};
! The instruction set proper ;

! Flow control instructions ;

X( "NOP",	                      Op$I$Jmp + 0 );

X( "J",		Op$2Byte + Op$Immed + Op$I$Jmp + 1 );
X( "JEQ",	Op$2Byte + Op$Immed + Op$I$Jmp + 2 );
X( "JNE",	Op$2Byte + Op$Immed + Op$I$Jmp + 3 );
X( "JG",	Op$2Byte + Op$Immed + Op$I$Jmp + 4 );
X( "JL",	Op$2Byte + Op$Immed + Op$I$Jmp + 5 );
X( "JC",	Op$2Byte + Op$Immed + Op$I$Jmp + 6 );
X( "JNC",	Op$2Byte + Op$Immed + Op$I$Jmp + 7 );

X( "CALL",	Op$2Byte + Op$Immed + Op$I$Jmp + 8 );

X( "RET",			    + Op$I$Jmp + 9 );

! Data move instructions ;

X( "LOAD",	Op$2Byte +            Op$I$Mov + 0 );
X( "LDI",	Op$2Byte + Op$Immed + Op$I$Mov + 1 );
X( "LOADSP",	Op$2Byte + Op$Immed + Op$I$Mov + 2 );
X( "STORE",	Op$2Byte +            Op$I$Mov + 3 );
X( "EXCH",			      Op$I$Mov + 4 );

! Logical & test instructions ;

X( "AND",	Op$2Byte +            Op$I$Log + 0 );
X( "ANDI",	Op$2Byte + Op$Immed + Op$I$Log + 1 );
X( "OR",	Op$2Byte +	      Op$I$Log + 2 );
X( "ORI",	Op$2Byte + Op$Immed + Op$I$Log + 3 );
X( "XOR",	Op$2Byte +            Op$I$Log + 4 );
X( "XORI",	Op$2Byte + Op$Immed + Op$I$Log + 5 );
X( "ROT",       Op$2Byte + Op$Immed + Op$I$Log + 6 );
X( "ROTC",      Op$2Byte + Op$Immed + Op$I$Log + 7 );

X( "CMP",	Op$2Byte +            Op$I$Log + 8 );
X( "CMI",	Op$2Byte + Op$Immed + Op$I$Log + 9 );
X( "BIT",	Op$2Byte + Op$Immed + Op$I$Log + 10 );

! Math instructions ;

X( "ADD",	Op$2Byte +            Op$I$Mth + 0 );
X( "ADDI",	Op$2Byte + Op$Immed + Op$I$Mth + 1 );
X( "SUB",	Op$2Byte +            Op$I$Mth + 2 );
X( "SUBI",	Op$2Byte + Op$Immed + Op$I$Mth + 3 );

! I/O instructions ;

X( "IN",	Op$2Byte + Op$Immed + Op$I$IO + 0 );
X( "MOVE",	                      Op$I$IO + 1 );
X( "BACKUP",			      Op$I$IO + 2 );
X( "RIGHT",			      Op$I$IO + 3 );
X( "FIRE",			      Op$I$IO + 4 );

X!End;
