module buffer = begin
machop calli = #047;
bind GapSize=100;
bind MaxBufs=100;

external coresize,relcore,getppn,toprompt,dotmpcor,quit,cucl,ttyzap;
external open,buffers,lookup,enter,close,rename,errstr,ctrlg;
external dmpin,dmpout,munchi,muncho,filescan;
external writeloss,writestring,wrtsix,wrtnum,wrtoct,getstr;
external lowptr,hptr,curline,ppn,defdsk,dskbfh,dskbuf;
external p,lowend,hend,hbot,flush,flubfr,scrmod,muline,cclflag;
external vector bnames;
external vector bfblk1[8];	!where we keep the buffer name.
external vector bfblk2[8];	!and storage for another.
external vector filblk[8];

global allbufs [MaxBufs],allmod[MaxBufs];
global curbuf = 0;
global autoinc,autotime,autowrit;
global xbuffer[30],tp;			% watch for .tp problems %
Bind Errtab = plit (
	plit asciz 'File Not Found',			! ERFNF%
	plit asciz 'Incorrect PPN',			! ERIPP%
	plit asciz 'Protection Failure',		! ERPRT%
	plit asciz 'File Being Modified',		! ERFBM%
	plit asciz 'Already Existing File',		! ERAEF%
	plit asciz 'Illegal Sequence of UUOs',		! ERISU%
	plit asciz 'Transmission Error',		! ERTRN%
	plit asciz 'Not a Saved File',			! ERNSF%
	plit asciz 'Not Enough Core',			! ERNEC%
	plit asciz 'Device Not Available',		! ERDNA%
	plit asciz 'No such Device',			! ERNSD%
	plit asciz 'Illegal Monitor Call',		! ERILU%
	plit asciz 'No Room or Quota Exceeded',		! ERNRM%
!	plit asciz 'Write Lock Error',			! ERWLK%
!	plit asciz 'Not Enough Monitor School',		! ERNET%
!	plit asciz 'Partial Allocation Only',		! ERPOA%
!	plit asciz 'Block not Free',			! ERBNF%
!	plit asciz 'Cannot Supercede Directory',	! ERCSD%
!	plit asciz 'Cannot Rename a NON-empty SFD',	! ERDNE%
!	plit asciz 'Sub-Directory Not Found',		! ERSNF%
!	plit asciz 'Search List Empty',			! ERSLE%
!	plit asciz 'Cannot Create SFD too Deep',	! ERLVL%
!	plit asciz 'No Create or Enter',		! ERNCE%
!	plit asciz 'Segment Not on Swapping space',	! ERSNS%
!	plit asciz 'File Cannot be Updated',		! ERFCU%
!	plit asciz 'Low Segment Overlaps High Segment',	! ERLOH%
!	plit asciz 'Not Logged In',			! ERNLI%
!	plit asciz 'File has Outstanding Locks set',	! ERENQ%
!	plit asciz 'Bad EXE File Directory',		! ERBED%
!	plit asciz 'Bad Extension for an EXE File',	! ERBEE%
!	plit asciz 'EXE Directory Too Big',		! ERDTB%
!	plit asciz 'Network Capacity Exceeded',		! ERENC%
!	plit asciz 'Task Not Available',		! ERTNA%
!	plit asciz 'Unknown Network Node'		! ERUNN%
		);
Bind MaxErr = #14;


Global Routine ErrFile( prompt, err ) = begin
    ToPrompt(.prompt);
    If .err<0,18> leq Maxerr
     then Writestring(.Errtab[.err<0,18>])
     else WrtOct(.err<0,18>)
end;

global routine bufnam(request) = begin
    external getjob;
    local job,chr;
    routine Hexdigit(number) = 
	if .number lss 10 then return(.number+#20)	! .n + sixbit "0"
	  else return (.number+#27);			! .n + sixbit "A"-10.

    Job_getjob();
    request<6,6>_Hexdigit(.Job<4,4>);
    request<0,6>_Hexdigit(.Job<0,4>);
    Return(.request)
end;


global routine existsbuf (bname) = begin
  incr i from 0 to MaxBufs-1 do
    if .bname eql .allbufs[.i] then return 1;
  return 0
end;


global routine gbnum (bname) =
    incr i from 0 to MaxBufs-1 do
	if .allbufs[.i] eql .bname then return .i;

global routine gbmod(bname) = .allmod[gbnum(.bname)];

global routine bufinit = begin
    incr i from 0 to MaxBufs-1 do allbufs[.i]_0;
    incr i from 0 to MaxBufs-1 do allmod[.i]_0;
    allbufs[0]_bufnam(sixbit 'main');
    (bfblk1+1)_.allbufs[0];
    (bfblk2+1)_.allbufs[0];
    (bfblk2+4)_ getppn()		! buffers in user's directory
end;

global routine AddBuf (bname) = begin
    incr i from 0 to MaxBufs-1 do begin
	if .bname eql .allbufs[.i] then return 0;
	if .allbufs[.i] eql 0 then begin
	    allbufs[.i]_.bname;
	    return 1
	end
    end;
    if .allbufs[MaxBufs-1] neq 0 then begin
	ToPrompt(plit asciz'Too many buffers');
	decr i from MaxBufs-2 to 0 do allbufs[.i+1]_.allbufs[.i]
    end;
    allbufs[0]_.bname;
    return 1
end;


global routine LstBuf = begin
    ToPrompt(plit asciz'');
    incr i from 0 to MaxBufs-1 do begin
	if .allbufs[.i] eql 0 then exitcompound;
	if .allmod[.i] neq 0 then writeloss("*");
	WrtSix(allbufs[.i]);
	writeloss("(");WrtNum(.i);writestring(plit asciz ') ')
    end
end;

Routine setupbuffer(Prompt,Block,Name,Ext,User) = Begin
    local stringspace [Maxbufs], Pnt;
    muline_1;
    scrmod_1;
    flush_0;
    .Block _ .defdsk;
    If .Name neq 0 then (.Block+1) _ .Name;
    If .Ext  neq 0 then (.Block+2) _ .Ext;
    (.Block+3) _ 0;
    (.Block+4) _ .User;
    If .User eql 0 then begin (.Block+6) _ 0; (.Block+7) _ 0 end;
    ToPrompt(.Prompt);
    Pnt_(Stringspace)<36,7>;
    getstr(.Pnt);
    if not (filescan (Pnt,.Block)) then return 0;
    if .flush then return 0;
    return 1
end;

global routine combuf (autop) = begin
	local tp,newbuf;
	local dskbuf[128];	!the disk buffer.

	!newbuf if created a new buffer.
	!autop if we are doing an autosave operation.

	if .autop eql 0 then newbuf_AddBuf(.(bfblk1+1));
	if .autop eql 2 then (Addbuf(.(bfblk1+1));newbuf_0);

	if .autop neq 2 or .(bfblk1+1) neq .(bfblk2+1)
	 then begin
	    open (2,#16,.bfblk2,0);
	    if not enter (2,bfblk2+1)
	     then begin
		ErrFile(plit asciz'Buffer enter error: ',.(bfblk2+2));
		close(2);
		return 0
	     end
	     else begin
		dskbuf_.hend;
		(dskbuf+1)_.hbot;
		(dskbuf+2)_.lowend;
		(dskbuf+3)_.curline;
		(dskbuf+4)_.filblk;	! device name
		(dskbuf+5)_.(filblk+1);	! file name
		(dskbuf+6)_.(filblk+2);	! extension
		(dskbuf+7)_.ppn;	! ppn
		dmpout(dskbuf,#200);	! the status record.
		dmpout(.p,.hend/5+1);	! the main buffer.
		close (2);
		if .autop eql 1
		 then return		!if an autosave call.
	     end
	end;
	lowend_1;		!zap the file
	hbot_.hend;		!totally.
	bfblk2_.defdsk;
	(bfblk2+1)_.(bfblk1+1);
	(bfblk2+2)_sixbit 'vue';
	(bfblk2+3)_0;
	(bfblk2+4)_getppn();
	open (2,#16,.bfblk1,0);

	!now we lookup file and init the buffer if it wasn't there
	!previously or if the thing there is OLD.
	curbuf_gbnum(.(bfblk1+1));     !set the buffer number.

	if .newbuf or (not lookup (2,bfblk1+1))
	 then begin
	    filblk_.defdsk;
	    (filblk+1)_sixbit 'delete';
	    (filblk+2)_0;
	    ppn_0;
	    close(2);
	    return
	end;
	dmpin(2,dskbuf,#200);	!read the header page in.
	hend_.dskbuf;
	hbot_.(dskbuf+1);
	lowend_.(dskbuf+2);
	curline_.(dskbuf+3);
	while 1 do begin
	    if .(#121) geq .p+.hend/5+1 then exitloop;
	    coresize(512)
	end;
	filblk_.(dskbuf+4);		!the device
	(filblk+1)_.(dskbuf+5);		!the file name
	(filblk+2)_.(dskbuf+6);		!the extension
	ppn_.(dskbuf+7);		!the ppn
	dmpin(2,.p,.dskbuf/5+1);	!read in .hend characters.
	close (2)
    end;

global routine SelBuf = begin
    If not Setupbuffer(plit asciz'Select Buffer: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn()  )
	then return Ctrlg();
    ToPrompt(plit asciz'');
    combuf(0)
end;
global routine UCtrlo = begin
    If not Setupbuffer(plit asciz'Buffer Name: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn() )
	then return ctrlg();
    combuf(2)
end;


global routine ctrlxi = begin
    local lfilblk[8];
    allmod[.curbuf]_1;
    If not Setupbuffer(plit asciz'Insert File: ', lfilblk, 0, 0, 0)
	then return ctrlg();
    open (2,0,.lfilblk,dskbfh<0,0>);
    buffers (2,1,1,dskbuf); !get a disk buffer formatted.
    if lookup (2,lfilblk+1)
     then munchi()
     else ErrFile(plit asciz'File error - ',.(lfilblk+2));
    close (2)
end;

Global Routine Filbuf( prompt ) = Begin
    lowptr_ (.p+1+gapsize/5)<36,7>;	! Begin at the position
    lowend_ 1+5+gapsize;		!  just after the gap.
    hend_ 1+5+gapsize;			! Set the end of the buffer
    hbot_ 1+5+gapsize;			!  to the end of the gap.
    ppn_.(filblk+4);			! Current ppn
    open (2,0,.filblk,dskbfh<0,0>);	! Current file block
    buffers (2,1,1,dskbuf);		! ..get a formatted disk buffer.
    if lookup (2,filblk+1)		! if file exists,
     then munchi()			!  then read it into memory
     else ErrFile(.prompt,.(filblk+2));	!  else complain bitterly.
    close (2);				! Finished with input file.
    hend_ .lowend;			! Set the end of the buffer.
    lowend_1;				! Reset the counts and pointers
    lowptr_ (.p)<36,7>;			!  for the beginning of the
    hbot_1+5+gapsize;			!  buffer, and the first
    hptr_ (.p+1+gapsize/5)<29,7>;	!  position after the gap.
    allmod[.curbuf]_0;			! Clear modified flag.
    relcore()				! Release extra core
end;


global routine ctrlxr = begin
    If not Setupbuffer(plit asciz'Read File: ', Filblk, 0, 0, 0)
	then return ctrlg();
    Filbuf(plit asciz'Read ');
end;

global routine ctrlxv = begin local device,ext,tmpblk[8],existed;
    If not Setupbuffer(plit asciz'Visit File: ', Tmpblk, 0, 0, 0)
	then return ctrlg();
    existed_existsbuf(.(tmpblk+1));	! Does .tmpblk buffer exist?
    ToPrompt(plit asciz'');
    bfblk1_.defdsk;
    (bfblk1+1)_.(tmpblk+1);
    (bfblk1+2)_sixbit 'vue';
    (bfblk1+3)_0;
    (bfblk1+4)_getppn();
    combuf(0);
    if not .existed then begin
	    filblk_.tmpblk;
	    (filblk+1)_.(tmpblk+1);
	    (filblk+2)_.(tmpblk+2);
	    (filblk+3)_.(tmpblk+3);
	    (filblk+4)_.(tmpblk+4);
	    (filblk+6)_.(tmpblk+6);
	    (filblk+7)_.(tmpblk+7);
	    Filbuf(plit asciz'Visit ')
    end
end;
global routine autoloss = begin
	local tp;
	if .autoinc eql 0 then return;		% autosave mode ?    %
	if .allmod[.curbuf] eql 0 then return;	% anything to save ? %
	autotime_.autotime+1;			% increment timer.   %
	if .autotime lss .autowrit+.autoinc then return; % Time yet? %
	autowrit_.autotime;			% bump counter level %
	ToPrompt(plit asciz 'Starting...');	% going ... going .. %
	combuf(1);
	close (2);
	writestring(plit asciz 'Saved')		% gone.              %
    end;
global routine cclstuff = begin
register foo;

if dotmpcor(sixbit 'EDT',2,xbuffer,30) lss 0 then
   dotmpcor(sixbit 'EDS',2,xbuffer,30);

(filblk+4)_0; !default to our ppn.
filblk_.defdsk;
tp_xbuffer<29,7>;
if not (filescan (tp,filblk)) then return ctrlg();
filbuf(plit asciz'Edit ');
scrmod_1;
muline_1
end;

global routine cclmultix( xeflag ) = begin
machop jrst = #254;
register foo;
local ep;

incp(tp);
ep_.tp; 
while 1 do begin
    if scani(ep) eql "!" then begin
	    replacen(ep,"?M");	!bash ! to ?m
	    exitloop
    end;
    if scann(ep) eql 0 then if .xeflag then cucl() else quit()
end;
filblk_0;
(filblk+1)_0;
(filblk+2)_0;
(filblk+3)_0;
(filblk+4)_0;
(filblk+5)_0;
if not (filescan (tp,filblk)) then return ctrlg();
if .filblk eql 0 then filblk _ sixbit 'dsk';
if .(filblk+2) eql sixbit'low' then (filblk+2)_0;      !bug in get.shr!
foo_filblk<0,0>;
foo_.foo + 1 ^ 18;
calli (foo,#35);	! Run UUO ???
jrst(4,0)
end;		!for the procedure
routine commonwrite = begin
    local file, ext, prot;		! a few temps

    open (2,0,.filblk,dskbfh<0,0>^18);	! open channel for output
    file_ .(filblk+1);			! copy filename
    ext_ .(filblk+2)<18,18>;		!  and extension
    prot_ 0;				! initially 0
    (filblk+2)_ sixbit 'bak';		! set with bak
    if lookup (2,filblk+1)		! if "filename.bak" exists
     then begin				!  then
	(filblk+1)_ 0;			!    try to delete it.
	if not rename (2,filblk+1)
	 then begin
	    close(2);
	    return ErrFile(plit asciz'Rename failed: ',.(filblk+2))
	 end
     end;
    (filblk+1)_ .file;			! restore filename
    (filblk+2)_ .ext^18;		!   and extension
    (filblk+4)_ .ppn;			!   and ppn
    if lookup (2,filblk+1)		! if an "old" file exists
     then begin				!  then rename it to .bak
	(filblk+2)<18,18>_ sixbit 'bak'^(-18);
	prot_ .(filblk+3)<27,9>;	!    remember the protection
	if not rename (2,filblk+1)
	 then begin
	    close(2);
	    return ErrFile(plit asciz'Rename failed: ',.(filblk+2))
	 end
     end;
    buffers (2,1,0,dskbuf);		! setup output buffer
    (filblk+2)_ .ext^18;		! restore correct extension
    (filblk+3)_ 0;			! clear prot-mode-date-time
    (filblk+4)_ .ppn;			! use last ppn.
    if not enter (2,filblk+1)		! attempt to create file
     then begin
	close(2);
	return ErrFile(plit asciz'Enter failed: ',.(filblk+2))
    end;
    if not muncho (.lowend-1,(.p)<36,7>) or		% write low half? %
       not muncho (.hend-.hbot, (.p+(.hbot-2)/5)	% write high half? %
		    <29-7*(.hbot-2-5*((.hbot-2)/5)),7>)
     then begin
	close(2);
	return errstr(plit asciz'Write error, file NOT saved.')
     end
     else writestring(plit asciz'File written.');
    close(2);				! close file (also does release)
    open (2,0,.filblk,0);		! open channel (again) no buffers
    lookup (2,filblk+1);		! lookup file for rename
    (filblk+3)<27,9>_ .prot;		! change protection
    (filblk+4)_ .ppn;			! reset ppn
    rename (2,filblk+1);		! rename (setting protection)
    allmod[.curbuf]_0;			! clear buffer modified flag
    return 1				! done.
end;

global routine ctrlxw = begin
    If not SetupBuffer(plit asciz 'Write File: ', Filblk, 0, 0, 0)
	then return ctrlg();
    ppn_.(filblk+4);
    commonwrite()
end;

routine finishbuffer = if .allmod[.curbuf] eql 0 then
    ToPrompt(plit asciz 'No changes made.')
else begin
    combuf(1);  close (2);
    ToPrompt(plit asciz 'Writing buffer...');
    flubfr();
    return commonwrite()
end;

routine exitbuffer( xeflag ) = begin
    If not finishbuffer() then return Writestring(plit asciz 'Error!');
    ttyzap();
    if .cclflag neq 0 then cclmultix( .xeflag )
	    else if .xeflag then cucl() else quit()
end;

global routine ctrlxs = finishbuffer();
global routine ctrlxe = exitbuffer( 1 );
global routine ctrlxf = exitbuffer( 0 );


end eludom
   