module window = begin

!structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;
structure strs[i,j]=
    ( .strs + ((.j-1)/5) + ((.i-1)*27) ) <36-((((.j-1) mod 5)+1)*7),7>;

bind
    maxlmap=41,			! max # displayable lines
    mapstatus=-1,		! status-line buffer #
    mapecho=-2,			! echo-line(s) buffer #
    mapwndbrk=-3;		! window-break buffer #

global linemap[maxlmap];	! maps each line to a window

bind wndbrk=plit asciz
'|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||';

external ctrlz,goxy,defwindow,writestring,bfblk1,bfblk2,curlin,getchxr;
external lowend,getppn,defdsk,combuf,moveback,moveforward,scrmod,inwind;
external muline,linesz,toprompt,scrsze,scrlen,clearline,screen,physlin;
external repcount,modpos,echosize,maxss,clearscreen,ctrlg,redisp;
external altptr,hbot,hend,metaz;
external ctrlp2,scroff,ttyin2,normalvideo,inversevideo,sefmod;
external WhiteLine;

map strs screen;

bind numwnd=8;
global wndorg[numwnd];		       !place on screen of window.
global wndfre[numwnd];		       !is the window free or not.
global wndcrl[numwnd];		       !save curlin value of window.
global wndsiz[numwnd];		       !size on screen of window.
global wndlow[numwnd];		       !lowend value for window.
global wndbuf[numwnd];		       !name of the buffer.
global curwin;			       !value of the current window.

routine newindow = begin
    incr i from 0 to numwnd-1
     do if .wndfre[.i] eql 1 then return .i;	!if found one.
    ToPrompt(plit asciz 'Too many windows');
    return -1
end;


global routine ToStatus =
begin
	incr i from 1 to .linesz do screen[.modpos+1,1]_"?M";
	AltPtr_ (Screen[.modpos+1,1])<36,7>
end;
global routine FromStatus = AltPtr_0;


global routine winit = begin
    ttyin2();				! setup length & height.
    curwin_0;
    wndorg[0]_1;			! initially top of screen.
    wndsiz[0]_.modpos;			! size of window.
    wndfre[0]_0;			! we are also not free.
    incr i from 0 to maxlmap-1
     do linemap[.i]_0;			! mark lines in my window.
    linemap[.modpos+1]_ mapstatus;	! mark status line.
    incr i from .modpos+2 to .modpos+.echosize
     do linemap[.i]_ mapecho;		! mark echo area.
    incr i from 2 to numwnd-1
     do wndfre[.i]_1;			! mark windows as free.
    incr i from 1 to .maxss
     do screen[.i,1]_"?M"		! mark all screen lines blank.

! The other fields do not matter as they are taken from the current
! values of things like the buffer name and .lowend.
end;

global routine wset (awindow) = begin
    ! This routine is called to set a new window.

    inwind_1;
    scrmod_1;			       !mark everything to go.
    muline_1;
    if .awindow eql .curwin then return; !see if this is necessary?

    wndlow[.curwin]_.lowend;	       !remember where in the buffer.
    wndcrl[.curwin]_.curlin;	       !and the current line.
    wndbuf[.curwin]_.(bfblk2+1);       !and the buffer name.

    !Now we set the values of all the stuff and switch to the right window.
    curwin_.awindow;		       !switch now.
    if .wndbuf[.curwin] neq .(bfblk2+1) then begin
	!Come here if we are in the wrong buffer.
	bfblk1_.defdsk;
	(bfblk1+1)_.wndbuf[.curwin];   !place to go.
	(bfblk1+2)_sixbit 'vue';
	(bfblk1+3)_0;
	(bfblk1+4)_getppn();
	combuf(0)		       !go there.
    end;

    !Now we are in the right buffer, but our position is probably
    !wrong.
    if .lowend gtr .wndlow[.curwin] then
	if .lowend gtr .lowend-.wndlow[.curwin] then
	    moveback(.lowend-.wndlow[.curwin]);
    
    if .lowend lss .wndlow[.curwin] then
	if .hend-.hbot geq .wndlow[.curwin]-.lowend then
	    moveforward(.wndlow[.curwin]-.lowend);

    !Now we are in the right place, but the position on the screen
    !where we put the cursor could be bogus.

    curlin_.wndcrl[.curwin];
    scrlen_.wndsiz[.curwin];
    scrsze_.scrlen;

    !Now we are done.
    return
end;
global routine uctrlc = begin local ctr;
    !^XC creates a new window. Uses .curlin as the place to split it.
    ctr_newindow();			! get new window.
    if .ctr lss 0 or			! no window available?
       .curlin leq 0 or			! strange line error?
       .wndsiz[.curwin]-.curlin-1 leq 0	! screen too small?
     then return ctrlg();

    redisp(0);				! setup screen.
    ctrlp2();				! back up a line.
    wndorg[.ctr]_.wndorg[.curwin]+.curlin+1;
    wndfre[.ctr]_0;			! this window in use.
    wndsiz[.ctr]_.wndsiz[.curwin]-.curlin-1;
    wndsiz[.curwin]_.curlin;		! this is our size.
    wndlow[.ctr]_.lowend;		! remember buffer location.
    wndcrl[.ctr]_.curlin;		! and current line.
    wndbuf[.ctr]_.(bfblk2+1);		! and the buffer name.
    goxy(1,.physlin);
    linemap[.wndorg[.ctr]-1]_mapwndbrk;	! mark it as having dashes.
    incr i from .wndorg[.ctr]		! mark from origin
       to .wndorg[.ctr]+.wndsiz[.ctr]-1	!  for size
     do linemap[.i]_.ctr;		!  as in this window #.

    WhiteLine();
    writestring(wndbrk);
    normalvideo();

    wset(.ctr);			       !switch to the new window.
    return
end;
global routine ctrll  = begin local lastdone,oldwin;
	oldwin_.curwin;
	if .sefmod then curlin_.scrsze/2;
	if .curlin eql 0 then curlin_1;
	if .repcount gtr 1 and .repcount leq .scrsze then curlin_.repcount;
	if .repcount gtr .scrsze then curlin_.scrsze;
	repcount_1;
	defwindow(1,1,.linesz,.modpos+.echosize);
	clearscreen();
	incr i from 1 to .modpos+.echosize do screen[.i,1]_"?M"; % new lines %
	scrmod_1;
	muline_1;
	lastdone_-1;		       !last window displayed
	incr i from 1 to .modpos+.echosize do begin
	    if .linemap[.i] lss 0 then begin
		defwindow(1,1,.linesz,.modpos+.echosize);
		if .linemap[.i] eql mapwndbrk then begin
		    goxy(1,.i);
		    WhiteLine();
		    writestring(wndbrk);
		    normalvideo()
		end
	    end
	    else if .linemap[.i] neq .lastdone then begin
		lastdone_.linemap[.i];
		wset(.lastdone);
		redisp(0)	       !0 means do not watch for ttyio.
	    end
	end;
	wset(.oldwin)		       !reset the window now.
end;
global routine uctrlp = begin local nextwindow;	! move up one window.
    nextwindow_-1;
    incr i from 1 to .modpos do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] lss 0 then exitcompound;
	nextwindow_.linemap[.i]
    end;
    if .nextwindow lss 0 then return ctrlg();	!no previous window.
    wset(.nextwindow)
end;

global routine uctrln = begin local nextwindow;	! move down one window.
    nextwindow_-1;
    decr i from .modpos to 1 do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] lss 0 then exitcompound;
	nextwindow_.linemap[.i]
    end;
    if .nextwindow lss 0 then return ctrlg();	!no previous window.
    wset(.nextwindow)
end;
global routine uctrld = begin local nextwindow,reali,backp;
    !Come here to destroy a window. Must not be the top window of
    !the screen, since we melt it in with the top window.

    backp_1;
    nextwindow_-1;
    incr i from 1 to .modpos do begin
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] lss 0 then (reali_.i;exitcompound[2]);
	nextwindow_.linemap[.i]
    end;
    if .nextwindow lss 0 then begin
	backp_0;
	decr i from .modpos to 1 do begin
	    if .linemap[.i] eql .curwin then exitloop;
	    if .linemap[.i] lss 0 then(reali_.i;exitcompound[2]);
	    nextwindow_.linemap[.i]
	end
    end;
    if .nextwindow lss 0 then return ctrlg();

    incr j from 1 to 132 do
	screen[.reali,.j]_"_";    !mark line with ___ as hit.

    !Otherwise there is a next window, and we melt now.
    wndsiz[.nextwindow]_.wndsiz[.nextwindow]+.wndsiz[.curwin]+1;
    wndfre[.curwin]_1;
    incr i from .wndorg[.curwin] to .wndorg[.curwin]+.wndsiz[.curwin]-1 do
	linemap[.i]_.nextwindow;
    if .backp then linemap[.wndorg[.curwin]-1]_.nextwindow
    else linemap[.wndorg[.nextwindow]-1]_.nextwindow;
    if not .backp then wndorg[.nextwindow]_.wndorg[.curwin];
    wset(.nextwindow)
end;
global routine ctrlx2 = begin local ctr;
    ! ^X2 creates a new window. Uses wndsiz/2 to split it.
    if .repcount eql 1
     then curlin_.wndsiz[.curwin]/2
     else curlin_ if .repcount+1 gtr .wndsiz[.curwin]
		   then return ctrlg()
		   else .repcount+1;
    ctr_newindow();
    if .ctr lss 0 or
       .curlin-1 leq 0 or
       .wndsiz[.curwin]-.curlin leq 0 then return ctrlg();

    if .inwind then redisp(0);	       !fix up screen first.
    repcount_1;
    wndorg[.ctr]_.wndorg[.curwin]+.curlin;
    wndfre[.ctr]_0;
    wndsiz[.ctr]_.wndsiz[.curwin]-.curlin;
    wndsiz[.curwin]_.curlin-1;
    wndlow[.ctr]_.lowend;			!remember where we are.
    wndcrl[.ctr]_.curlin-1;			!and this too.
    wndbuf[.ctr]_.(bfblk2+1);			!the buffer name.
    linemap[.wndorg[.ctr]-1]_mapwndbrk;		!mark it as having dashes.
    incr i from .wndorg[.ctr] to .wndorg[.ctr]+.wndsiz[.ctr]-1 do
	linemap[.i]_.ctr;
    goxy(1,.curlin+.scroff);
    WhiteLine();
    writestring(wndbrk);
    normalvideo();
    wset(.ctr);
    return
end;
routine growin( dir ) = begin local index,nextwindow;
    nextwindow_-1;
    decr i from .modpos to 1 do begin		! determine next window.
	if .linemap[.i] eql .curwin then exitloop;
	if .linemap[.i] geq 0 then nextwindow_.linemap[.i]
    end;
    if .nextwindow lss 0 then return ctrlg();	! no following window.
    if not .dir and .wndsiz[.curwin]-.repcount lss 1 then return ctrlg();
    if .dir and .repcount geq .wndsiz[.nextwindow] then return ctrlg();
    index_.wndorg[.curwin]+.wndsiz[.curwin];	!the line of dashes.
    if .dir
     then begin					! make it larger by .repcount
	incr i from .index to .index+(.repcount-1) do linemap[.i]_.curwin;
	linemap[.index+.repcount]_mapwndbrk;
	wndsiz[.curwin]_.wndsiz[.curwin]+.repcount;
	wndorg[.nextwindow]_.wndorg[.nextwindow]+.repcount;
	wndsiz[.nextwindow]_.wndsiz[.nextwindow]-.repcount
     end
     else begin					! make it smaller by .repcount
	decr i from .index to .index-(.repcount-1) do linemap[.i]_.nextwindow;
	linemap[.index-.repcount]_mapwndbrk;
	wndsiz[.curwin]_.wndsiz[.curwin]-.repcount;
	wndorg[.nextwindow]_.wndorg[.nextwindow]-.repcount;
	wndsiz[.nextwindow]_.wndsiz[.nextwindow]+.repcount
     end;
end;

global routine uctrlz = growin( 1 );
global routine ctrlxz = growin( 0 );


global routine metabang = ! move current line to top or bottom of screen.
    If .repcount eql 1
	then incr i from 1 to .curlin-1 do ctrlz()
	else incr i from .curlin to .wndsiz[.curwin]-1-.echosize do metaz();

end eludom
  