module vuecmd = begin

!
!  Our own internal storage::
! (to be moved later?)
!
bind kilsiz = 5000;		! size of kill buffer

bind abbrevsize=1000, abbrevs=100;

own abbrevspace[AbbrevSize/5+2];
own abold[abbrevs],abosize[abbrevs];
own abnew[abbrevs],abnsize[abbrevs];
own abfreep,abssize,absp;


!
!  The following symbols are define elsewhere:
!
external

	hptr,			! pointer to "next" character
	lowptr,			! pointer to "previous" character
	p,			! beginning of the current buffer
	lowend,			! end of buffer before pointer
	hbot,			! beginning of buffer after gap
	hend,			! end of the current buffer

	mark,			! location of the current mark
	sst,			! search string array
	allmod,			! buffer modified array

	lpos,			! last known line position
	pcolumn,		! physical column on screen
	curline,		! current line on the screen
	curbuf,			! current buffer we are in
	scrsze,			! size of the screen in lines

	lasmov,			! flag for last was a move
	laskil,			! flag for last was a kill
	killer,			! "kill" flag for last command
	killen,			! length of kill buffer
	kilptr,			! pointer into kill buffer
	kilbuf,			! the kill buffer

	escvalue,		! the value of the <esc> key
	abortvalue,		! the value of the <abort> key
	indent,			! the left margin (spaces to indent)
	iudent,			! the right margin (last position)
	commentpos,		! place to put the comment
	abbrex,			! flag for expanded abbreviations
	spaces,			! flag for using spaces instead of tabs
	jstins,			! flag for justifying upon insert
	filins,			! flag for filling upon insert
	bsback,			! flag for handling count for backspaces
	sosmod,			! flag for ?L == page mark (page mode)
	tabsize,		! the size of a tab character (:= 8)
	tabwidth,		! the width of a tab (until tabstops)

	muline,			! flag for multi-line change
	scrmod,			! flag for screen modified

	distbl,			! dispatch table pointer
	cnames,			! list of command names
	cfuncts,		! list of command functions
	pnames,			! list of environment variables
	plocs,			! list of storage locs for env. vars

	flush,			! flag for "input" flushed
	comchar,		! character value of the last command
	repcount;		! repeat count for the command

!
!  External procedures::
!
external

	readch,			! read a character (tty, macro, file)
	readcc,			! read a command character (meta-etc)
	writeloss,		! write a character handling ^ and $
	writestring,		! write a string using writeloss(s)
	wrtsix,			! write a sixbit word as a string
	wrtnum,			! write a number as a string
	wrtoct,			! write a number as an octal string
	toPrompt,		! write a message on prompt line
	fromPrompt,		! reset prompt line pointer
	toStatus,		! point to status line
	fromStatus,		! reset status line pointer

	munchline,		! print a prompt and read a response
	getnum,			! read a number (octal or decimal)
	symbol,			! read and find a function name

	ctrll,			! (WINDOW) clear and redraw window
	makbox,			! paint a box and it's contents

	errstr,			! print message and abort (abort)
	zapmac,			! pop out of everything
	ttyzap,			! clear tty and finish up
	quit,			! quit the program - saving nothing

	moveforward,		! move n bytes forward in the buffer
	moveback,		! move n bytes backward in the buffer
	getchxr,		! get value of character at position n
	updatecursor,		! calculate new position given old+char
	getpos,			! get the current position on the line
	therep,			! true if at matchstring location

	insertchar,		! insert a character into the buffer
	killforward,		! kill a byte forward in the buffer
	delforward,		! delete a byte forward in the buffer
	delbackward,		! delete a byte backward in the buffer

	abbtype,		! true if char is abbreviation terminator
	jsttype,		! returns type of text character 0-6
	eolBreak,		! true if char is end-of-line char
	whtBreak,		! true if char is horiz whitespace
	fmtBreak,		! true if char is pub/scribe ".@" fmt
	whitespace,		! true if char is whitespace
	apbreak,		! true if point is after paragraph break
	wbreak,			! true if char is alpha-numeric

	getIndent,		! get the indentation for this line
	setIndent,		! set the indentation for this line
	just,			! text justification with margins

	ctrln2,			! move down to next line start
	ctrlp2;			! move back to previous line start

!
!  General ABORT functions::
!

global routine abortC =			! USER ABORT
    errstr(plit asciz'Comment??????');


global routine ctrlc = begin		! EXIT QUIT
    ttyzap();				! zap the tty stuff
    quit()				!  and exit to the exec
end;


!
!  Movement inside the buffer::
!

global routine ctrlf =			! MOVE FORWARD CHARACTER
    if .hend neq .hbot			! if not at end of buffer
     then moveforward(1)		!  then move
     else return zapmac();		!  else bomb-out


global routine metaf = begin		! MOVE FORWARD WORD
    while .hend neq .hbot		! while not at end of buffer
     do if whitespace(scann(hptr))	!   and inside whitespace
	 then moveforward(1)		!   then move past whitespace
	 else exitloop;			!   else continue
    while .hend neq .hbot		! while not at end of buffer
     do if wbreak(moveforward(1))	!   move forward until
	 then return;			!   a whitebreak, then return
    return zapmac()			! if reach end then bomb-out
end;


global routine ctrlb =			! MOVE BACK CHARACTER
    if .lowend gtr 1			! if not at beginning of buffer
     then moveback(1)			!  then backup
     else return zapmac();		!  else bomb-out

global routine metab = begin		! MOVE BACK WORD
    while .lowend gtr 1			! if not at beginning of buffer
     do if whitespace(scann(lowptr))	!   and inside whitespace
	 then moveback(1)		!   then backup past whitespace
	 else exitloop;			!   else continue
    while .lowend gtr 1			! if not at beginning of buffer
     do begin				!  then backup
	moveback(1);			!    until whitespace
	if wbreak(scann(lowptr))	!    and return
	 then return
     end;
    return zapmac()			! if hit beginning then bomb-out
end;

!
!  Larger movement -- Line, Page, Text
!

Global routine BegLin =			! MOVE TO BEGINNING OF LINE
    while .lowend gtr 1			! while not at beginning of buffer
     do if eolBreak(scann(lowptr))	!  do  moveback
	 then return			!  until previous characer is
	 else moveback(1);		!  an end of line character

Global routine EndLin =			! MOVE TO END OF LINE
    while .hend neq .hbot		! while not at end of buffer
     do if eolBreak(scann(hptr))	!  do moveforward
	 then return			!  until next character is
	 else moveforward(1);		!  an end of line character


Global routine BegPag = begin		! MOVE TO BEGINNING OF PAGE
    while .lowend gtr 1			! while not at beginning of buffer
     do if scann(lowptr) eql "?L"	! do if previous is a page mark
	 then exitloop			!  then done
	 else moveback(1);		!  else backup one
    muline_1;				! mark multi-line change
    scrmod_1;				! mark screen modified
    curline_1				! current line is top of page
end;

Global routine EndPag = begin		! MOVE TO END OF PAGE
    while .hend neq .hbot		! while not at end of buffer
      do if scann(hptr) eql "?L"	! do if next is page mark
	  then exitloop			!   then done
	  else moveforward(1);		!   else move to next
    muline_1;				! mark multi-line change
    scrmod_1;				! mark screen modified
    if .curline gtr .scrsze		! if current line not on the screen
     then curline_.scrsze-1		!  then set it near the bottom
end;


global routine BegTxt = begin		! MOVE TO BEGINNING OF TEXT
    moveback (.lowend-1);		! backup to before first char
    muline_1;				! mark multi-line change
    scrmod_1;				! mark screen modified
    curline_1				! set current line to top
end;

global routine EndTxt = begin		! MOVE TO END OF TEXT
    moveforward (.hend-.hbot);		! move each character until end
    muline_1;				! mark multi-line change
    scrmod_1;				! mark screen modified
    if .curline gtr .scrsze		! if current line not on the screen
     then curline_.scrsze-1		!  then set it near the bottom
end;

!
!  Movement up and down by text lines
!

global routine ctrln = begin local pos;
    if not .lasmov then GetPos(pcolumn);
    incr i from 1 to .repcount do ctrln2();
    pos_1;
    incr i from 1 to .pcolumn-1
     do if .pos geq .pcolumn or eolBreak(scann(hptr))
	 then exitloop
	 else begin
	    pos _ updatecursor(scann(hptr),.pos);
	    ctrlf()
	 end;
    repcount _ 1
end;


global routine ctrlp = begin local pos;
    if not .lasmov then GetPos(pcolumn);
    incr i from 1 to .repcount do ctrlp2();
    pos_1;
    incr i from 1 to .pcolumn-1 do
	if .pos geq .pcolumn or eolBreak(scann(hptr))
	 then exitloop
	 else begin
	    pos _ updatecursor(scann(hptr),.pos);
	    ctrlf()
	 end;
    repcount _ 1
end;

Global routine PrevVC =			! MOVE TO PREVIOUS VISIBLE CHARACTERA
    while .lowend gtr 1			! while not at beginning of buffer
     do if whitespace(scann(lowptr))	! if previous character is whitespace
	 then moveback(1);		!  then move past it.

Global routine NextVC =			! MOVE TO NEXT VISIBLE CHARACTER
    while .hend neq .hbot		! while not at end of buffer
     do if whitespace(scann(hptr))	! if next character is whitespace
	 then moveforward(1);		!  then move past it.

Global routine BegPar = begin		! MOVE TO BEGINNING OF PARAGRAPH
    until apbreak(.lowend)		! while not after paragraph break
     do ctrlp2();			!  backup a line
    if fmtBreak(scann(hptr))		! if this is a format line
     then ctrln2();			!  then move down one line
    NextVC()				! find next visible character
end;

Global routine EndPar = begin		! MOVE TO END OF PARAGRAPH
    do ctrln2() until
	apbreak(.lowend) or
	eolBreak(scann(hptr)) or
	.hend eql .hbot;
    if .hbot lss .hend
     then ctrlp2();
    EndLin()
end;

Global routine Lastpage = begin		! MOVE TO TOP OF PREVIOUS PAGE
    local c;

    c_.lowend;				! save point (don't move)
    While .c gtr 1
     do begin
	c_.c-1;
	If getchxr(.c) eql "?L"
	 then exitloop			! Backup past ^L
     end;
    If getchxr(.c) neq "?L"
     then return abortC();		! If none "Error"
    While .c gtr 1
    do begin
	if getchxr(.c-1) eql "?L"
	 then exitloop;			! Backup to next ^L
	c_.c-1				!  or beginning.
     end;
    If .c neq .lowend
     then begin				! See if we moved.
	moveback(.lowend-.c);		!  and do the work!
	curline_1;
	scrmod_1;
	muline_1
     end
end;


Global routine Nextpage = begin		! MOVE TO TOP OF NEXT PAGE
    local cnt,pnt;

    cnt_ 0;				! initialize count
    pnt_ .hptr;				! copy pointer
    incr i from 1 to .hend-.hbot	! for each character past point
     do begin
	cnt_ .cnt+1;			!  increment counter
	if scann(pnt) eql "?L"		!  if next character is a page mark
	 then exitloop			!   then done
	 else incp(pnt)			!   else bump pointer
     end;
    if .cnt gtr 0			! if we found a page mark
     then begin
	moveforward(.cnt);		! then move forward past it
	muline_ 1;			!  mark multi-line change
	scrmod_ 1;			!  mark screen modified
	curline_ 1			!  set current line to top
    end
    else return abortC()		! else complain.
end;

global routine ctrlv = begin		! MOVE FORWARD WINDOW/SCREEN
    muline_1;
    scrmod_1;
    incr i from 1 to
	(if .curline leq .scrsze and .curline geq 1
		    then .scrsze-.curline
		    else .scrsze)
	    do if ctrln2() then exitloop;
    if .hend neq .hbot then curline_1		!if not at the end of the file.
end;

global routine metav = begin		! MOVE BACKWARD WINDOW/SCREEN
    muline_1;
    scrmod_1;
    incr i from 1 to
	    (if .curline leq .scrsze and .curline geq 1
			    then .scrsze+.curline-2
			    else .scrsze)
	    do if ctrlp2() then
		if .curline leq 0 then begin   !properly past top of screen.
		    ctrln2();		       !show predecessor.
		    exitloop
		end;
    curline_1
end;

global routine metacn =			! MOVE TO END OF WINDOW
    incr i from 1 to .scrsze-.curline	! for the remaining line count
     do if ctrln2()			! do move-down-one-line
	 then begin			!  checking for end of page
	    moveback(1);		!  backup over the page mark
	    curline_ .lpos;		!  reset line to last known
	    exitloop			! finished
	 end
	 else lpos_ .curline;		! remembering the last line


global routine metacp =			! MOVE TO START OF WINDOW
    incr i from 1 to .curline		! for each line position
     do ctrlp2();			! move up one line

!
!  MARK related commands::
!

global routine NoMark =			! COMPLAIN ABOUT MARK
    errstr(plit asciz'Mark not set.');


global routine ClrMrk = begin		! CLEAR MARK
    repcount_1;				! reset any repeat count
    mark_0;				! clear the mark
    ToPrompt(plit asciz 'Mark cleared')	! and print a message
end;


global routine SetMrk =			! SET MARK
    if .repcount eql 1			! if no repeat count
     then begin				! then continue
	mark_.lowend;			!  set the mark to point
	ToPrompt(plit asciz 'Mark set')	!  and print a message
    end
    else ClrMrk();			! else clear mark


global routine ExcMrk =			! EXCHANGE MARK AND POINT
    begin local tmark;

    if .mark eql 0			! if no mark set, then abort
     then return NoMark();
    if .mark eql .lowend		! if mark eql point
     then return .mark;			!   then return point
    tmark_.lowend;			! save the point
    if .mark gtr .lowend+.hend-.hbot	! if mark too large
     then return EndTxt();		!   then move to end
    if .mark lss .lowend		! if mark before point
     then moveback (.lowend-.mark)	!   then backup
     else moveforward (.mark-.lowend);	!   else go forward
    return (mark_.tmark)		! return old point
end;


!
!  More movement -- uses fake mark
!

global routine ctrlz = begin		! MOVE WINDOW DOWN
    local omark,ocurline;

    omark_.mark;			! save mark
    ocurline_.curline;			! save line
    mark_.lowend;			! mark = point
    metacp();				! move to top of screen
    incr i from 1 to .repcount		! for each count
     do ctrln2();			!  move down a buffer line
    curline_1;				! mark current line = 1
    if .ocurline-.repcount gtr 0	! if old-line is on screen
     then ExcMrk();			!  then exchange positions
    mark_.omark;			! restore mark
    muline_1;				! mark multi-line change
    scrmod_1				! mark screen modified
end;



global routine metaz = begin		! MOVE WINDOW UP
    local omark,ocurline;

    omark_.mark;			! save mark
    ocurline_.curline;			! save current line
    mark_.lowend;			! set mark = point
    metacp();				! move to bottom of screen
    incr i from 1 to .repcount		! backup repeat-count lines
     do ctrlp2();			! from the bottom
    curline_1;				! set current line at top
    if .ocurline+.repcount leq .scrsze	! if old-line on screen
     then ExcMrk();			!  then exchange positions
    mark_.omark;			! restore mark
    muline_1;				! mark multi-line change
    scrmod_1				! mark screen modified
end;

!
!  Kill buffer releated commands::
!

global routine appkbf =			! APPEND TO KILL BUFFER
    killer_1;				! Flag last command as a kill.


global routine clrkbf = begin		! CLEAR KILL BUFFER
    killen_0;				! Size of KILL'd Text = 0
    kilptr_(kilbuf)<36,7>		! Point to beginning of buffer
end;


global routine inskbf = begin		! INSERT KILL BUFFER
    local tp;
    tp_(kilbuf)<36,7>;			! Get pointer to KILL'd text
    incr i from 1 to .killen		! For each char until length
     do insertchar(scani(tp))		!  do insert character
end;

!
!  Text Inserting::
!

global routine abinit = begin		! INITIALIZE ABBREV SPACE
    abssize_0;
    absp_0;
    abfreep_(abbrevspace)<36,7>
end;


global routine abspace = begin		! check for abbreviation expansion
    local tp,bp;

    incr i from 0 to .absp-1
     do begin				! once per abbrev.
	if .abosize[.i] eql 0		! if no size,  try next one
	 then exitcompound;

	if (bp_.lowend-.abosize[.i]-1) lss 0
	 then exitcompount;		! if no room in buffer, try next

	if wbreak(getchxr(.bp))		! must be preceeded by break
	 then exitcompound;		! else try next one

	tp_.abold[.i];			! point to abbreviation
	incr j from 1 to .abosize[.i]	! for each character - compare
	 do if scani(tp) neq getchxr(.bp+.j)
	     then exitcompound;		! if no match, try next one

	incr j from 1 to .abosize[.i]	! For size of old string
	 do delbackward();		! delete it
	tp_.abnew[.i];			! reset pointer
	incr j from 1 to .abnsize[.i]	! For size of new string
	 do insertchar(scani(tp));	! insert it

	return				! done.
    end;
    return -1				! not found
end;

Global Routine myspace = begin
    local cpos;

    if (.hend neq .hbot) and		! if inside buffer and
	not eolBreak(scann(hptr))	!    not at eol
     then return;			!  then do nothing

    BegLin();				! else go to line start
    cpos_1;				! set position to 1
    while (.hend neq .hbot) and		! count to end-of line
	  not eolBreak(scann(hptr))
     do begin
	cpos_ if .bsback and		!  possibly treating
		 "?H" eql scann(hptr)	!  backspace as special
		then if .cpos gtr 1	!    (if not first char)
			then .cpos - 1 else .cpos
		else updatecursor(scann(hptr),.cpos);
	moveforward(1)			! one character at a time.
     end;

    if .cpos leq .iudent then return;	! if cpos leq right-margin

    while (.lowend gtr 1) and		! delete trailing white
	  whitespace(scann(lowptr))	! at the end of line
     do delbackward();

    while (.lowend gtr 1) and 		! backup over non-white
	  not whitespace(scann(lowptr))	! until next break
     do moveback(1);

    while (.lowend gtr 1) and		! delete this whitespace
	  whitespace(scann(lowptr))	! back to next non-white
     do delbackward();

    insertchar("?M");			! insert a CR
    setIndent(.indent);			! indent by proper amount 
    EndLin()				! and skip to eol

end;


Global routine SelfI (char) = Begin	! SELF INSERT
    Own TChar;				! Need type across calls
    Bind Spc = 4, Csp = 5;		! Define types from justify code

    If .AbbrEx				! if expanding abbreviations
     then If AbbType(.char)		!  then if abbrev-terminator
	   then abspace();		!        then attempt expansion
    If .JstIns				! if justifying inserts
     then begin				!  then
	TChar_ JstType(.char);		!   get text type
	If .Tchar eql Spc or		!   if a space
	   .Tchar eql CSp		!   or conto a space
	 then myspace();		!    then do justification
	If .Tchar eql CSp		!   if convert to space
	 then char_ " "			!    then change it to space
      end;
    InsertChar(.char)			! insert the given character
end;

global routine ctrlq = begin		! QUOTE CHARACTER INSERT
    comchar_ readch();			! read a character
    incr i from 1 to .repcount		! for each rep-count
     do insertchar(.comchar);		! insert the character directly
    repcount_ 1				! fixup repcount and return
end;

global routine ctrlo  = begin		! OPEN WHITE LINE
    insertchar("?M");			! insert eol
    moveback(1)				! and backup over it
end;

!
!  Make room for abbreviation code, find and define::
!

routine findab( abbr ) = begin	! FIND AN ABBREV
    local tp;

    incr i from 0 to .absp-1		! for each abbreviation
     do begin

	if ..abbr neq .abosize[.i]	! if the size doesn't match
	 then exitcompound;		!  then try next one

	tp_.abold[.i];			! setup pointer

	incr j from 1 to .abosize[.i]	! see if it matches
	 do if scani(tp) neq .((.abbr)[.j])
	     then exitcompound;		! if not, then try next

	return .i			! got one, so return it
     end;
    return -1				! not found
end;


global routine abdefine = begin
    local tp,tc,line[132];

    if .repcount neq 1
     then begin
	repcount_1;
	return abinit()
     end;

    if .absp geq abbrevs
     then return errstr(plit asciz'Too many abbreviations.');

    munchline(line,plit asciz'Abbreviation <esc>: ',.EscValue);
    tp_findab(line);
    if .tp neq -1
     then abosize[.tp]_0;		! delete any existing abbrev
    tp_.abfreep;			! first free byte.
    abold[.absp]_.tp;			! remember it.
    incr k from 1 to .line		! read in the data.
     do begin
	replacei(tp,.line[.k]);		! copy user response
	if .abssize geq abbrevsize
	 then return errstr(plit asciz'Too many chars in abbreviations');
	abssize_.abssize+1
     end;
    abosize[.absp]_.line;		! set the count.
    munchline(line,plit asciz' will be expanded to <esc>: ',.EscValue);
    abnew[.absp]_.tp;			! and again do so.
    incr k from 1 to .line
     do begin
	replacei(tp,.line[.k]);
	if .abssize geq abbrevsize
	 then return errstr(plit asciz'Too many chars in abbreviations');
	abssize_.abssize+1
     end;
    abnsize[.absp]_.line;
    abfreep_.tp;
    absp_.absp+1
end;

!
!  Search movement::
!

global routine ctrlr = begin		! REVERSE STRING SEARCH

    if not munchline (sst,plit asciz'Reverse Search: ',.EscValue)
     then return errstr(plit asciz'Reverse Search aborted.');

    decr i from .lowend-.sst[0] to 1
     do if therep(sst,.i)
	 then begin
	    moveback(.lowend-.i);
	    if .repcount eql 1
	     then return
	     else repcount_.repcount-1
	 end;

    return errstr(plit asciz'Reverse Search Failed')

end;

global routine ctrls = begin

    if not munchline (sst,plit asciz'Search: ',.EscValue)
     then return errstr(plit asciz'Search aborted.');

    incr i from .lowend to .lowend+.hend-.hbot-.sst+1
     do if therep (sst,.i)
	 then begin
	    moveforward(.i+.sst[0]-.lowend);
	    if .repcount eql 1
	     then return
	     else repcount_.repcount-1
	end;

    return errstr(plit asciz'Search failed')

end;

!
!  Text deletion and killing::
!

global routine ctrld =			! DELETE FORWARD CHARACTER
    if .hbot neq .hend			! if not at end of buffer
     then killforward(0)		!   then delete a character
     else return zapmac();		!   else bomb-out


global routine metad =  begin		! DELETE FORWARD WORD
    while .hend neq .hbot		! while not at end of buffer
     do if whitespace(scann(hptr))	!   and inside whitespace
	 then killforward(0)		!   then move past whitespace
	 else exitloop;			!   else continue
    while .hend neq .hbot		! while not at end of buffer
     do begin				!  then delete forward
	killforward(0);			!   until whitespace is
	if wbreak(scann(hptr))		!   found, then return
	 then return
     end;
    return zapmac()			! if reach end then bomb-out
end;


global routine rubout =			! DELETE BACKWARD CHARACTER
    if .lowend gtr 1			! if not at beginning of buffer
     then delbackward()			!  then rubout a character
     else zapmac();			!  else bomb-out

global routine metadel = begin		! DELETE BACKWARD WORD
    while .lowend gtr 1			! while not at beginning of buffer
     do if whitespace(scann(lowptr))	! and inside whitespace
	 then delbackward()		!   then rubout characters
	 else exitloop;			!   else continue
    while .lowend gtr 1			! while not at beginning of buffer
     do begin				!  then rubout characters
	delbackward();			!  until we reach whitespace
	if wbreak(scann(lowptr))	!    then return
	 then return
     end;
    return zapmac()			! if we hit the beginning bomb-out
end;

routine killtext(killflag) = begin local n,tp;
    if .mark eql 0 then return NoMark();
    if .lowend gtr .mark then ExcMrk();		! mark must be after lowend
    killer _ 1;
    if not(.laskil) then clrkbf();
    n_.mark-.lowend;				!how much to kill.
    if (.n+.killen) gtr 5*kilsiz then begin %kill buffer overflow%
	if .killflag then begin %do we want to kill it anyway?%
	    while 1 do begin    %ask the question until "Y" or "N"%
		ToPrompt(plit
		    asciz 'Text too large to save, Delete it?? (Y or N): ');
		tp_readch();
		Writeloss(.tp);
		if .tp eql "Y" or .tp eql "y" or .tp eql "N" or .tp eql "n"
		    then (Writestring(plit asciz' ..Deleting...');
			  FromStatus();		! extra clear won't hurt.
			  exitloop)
		    else begin
			ToStatus();
			Writestring(plit asciz 'Please type "Y" or "N"');
		    end
	    end; %while 1%
	    if .tp eql "Y" or .tp eql "y" then exitcompound else return
	end
	else begin %if not .killflag -- we are copying%
	    ToPrompt(plit asciz 'Text too large to copy!');
	    Return
	end  %if .killflag%
    end; %kill buffer overflow%

    while 1 do begin
	if .n eql 0 then exitloop;		%nothing to delete/copy%
	if .hbot eql .hend then exitloop;	% bad mark %
	if .killen lss 5*kilsiz then		% make sure within limits %
	    replacei(kilptr,scann(hptr));	% copy the character %
	if .killflag then killforward(0)	% kill it? %
		     else moveforward(1);	% no -- just skip it %
	n_.n-1;					% decrement "to do" %
	killen_.killen+1			% increment "done"  %
    end;

    if .killflag then ToPrompt(plit asciz 'Text Killed')
		 else ToPrompt(plit asciz 'Text Copied');

    if .killen gtr 5*kilsiz then (killen_5*kilsiz); % shrink if too big %
    mark _ 0
end;

global routine ctrlw = killtext(1);

global routine metcw = killtext(0);

global routine metaw = begin		! KILL TO SEARCH STRING
    local loc;

    loc_ .lowend;			! remember our point
    if .repcount neq 1			! if no argument
     then ctrls()			!  then search forward
     else ctrlr();			!  else backward
    if .lowend neq .loc			! if we moved
     then begin				!  then we have something
	mark_ .loc;			!  so, set the mark
	ctrlw()				!  and delete the text
     end
end;					! if not, leave mark intact


global routine metak = begin		! KILL HORIZONTAL WHITESPACE
    if .hend eql .hbot			! if at end of the buffer
     then return zapmac();		!  then bomb-out
    while .hend neq .hbot and		! while not at end of buffer
	  whtBreak(scann(hptr))		! and inside whitespace
     do delforward();			!  delete forward
    scrmod_ 1				! mark screen modified
end;


global routine ctrlk  = begin local rep,cc;
    killer _ 1;
    if not(.laskil) then clrkbf();
    incr rep from 1 to .repcount do begin
	if .hend eql .hbot then return zapmac();	% prevent overflows %
	cc_ scann(hptr);				%  prime the loop   %
	if .cc eql #15 then killforward(1)		% a blank line case %
	else until .cc eql #15 do begin			% until end of line %
	    if .cc eql #14 and .sosmod then exitloop;	% ? end of page ?   %
	    killforward(1);
	    if .hend eql .hbot then return zapmac();	% ? end of text ?   %
	    cc _ scann(hptr)				% - get character - %
	end	% until eol %
    end;	% incr rep ... loop %
    repcount _ 1;					% say we are done   %
    if .killen eql 5*kilsiz then
	ToPrompt(plit asciz 'Too much text deleted -- not all was saved!')
end;	% ctrl k %

global routine killmultiline  = begin local rep,cc;
    killer _ 1;
    if not(.laskil) then clrkbf();
    incr rep from 1 to .repcount do begin
	if .hend eql .hbot then return zapmac();
	cc_ scann(hptr);				% to prime the loop %
	if .cc eql #15 and .repcount eql 1 then		% single C-K case   %
	    Return (killforward(1));
	until .cc eql #15 do begin			% until end of line %
	    if .cc eql #14 and .sosmod then exitloop;	% ? end of page ?   %
	    killforward(1);
	    if .hend eql .hbot then return zapmac();	% ? end of text ?   %
	    cc _ scann(hptr)				% - get character - %
	end;  % until eol %
	if .repcount eql 1 then exitloop;		% single C-K case   %
	if .cc eql #15 then killforward(1)		% finish the line   %
    end;	% incr rep ... loop %
    repcount _ 1;					% say we are done   %
    if .killen eql 5*kilsiz then
	ToPrompt(plit asciz 'Too much text deleted -- not all was saved!')
end;	% ctrl k %

!
!  Text modification -- swapping
!

global routine ctrlt = begin		! TRANSPOSE CHARACTERS
    local ch;

    if .lowend lss 3			! if nothing to do
     then return abortC();		!  complain to the user
    lpos_ .curline;			! save current line;
    ch_ moveback(1);			! backup between characters
    if eolBreak( copynn(hptr,lowptr) )	! overwrite it with next
     then muline_1;			!  and check for eol char
    if eolBreak( replacen(hptr,.ch) )	! replace next with previous
     then muline_1;			!  and check for eol char
    moveforward(1);			! put cursor back
    curline_ .lpos;			! put line position back
    allmod[.curbuf]_1;			! mark buffer modified
    scrmod_ 1				! mark screen modified
end;


!
!  Set right and left margins
!

routine lftrgtpos = begin
    local lowsave, linpos, char;
    linpos_ .repcount;
    repcount_ 1;
    if .linpos leq 1
     then begin
	lowsave_ .lowend;
	BegLin();
	if .lowend eql .lowsave
	 then return 1;
	linpos_ 1;
	char_ scann(hptr);
	incr i from .lowend to .lowsave-1
	 do begin
	    if .bsback and .char eql "?H"
	     then linpos_ if .linpos gtr 1
			 then .linpos - 1
			 else .linpos
	     else linpos_ updatecursor(.char,.linpos);
	    char_ moveforward(1)
	 end
     end;
    return .linpos
end;


Global routine SetLft = indent_ lftrgtpos() - 1;
Global routine SetRgt = iudent_ lftrgtpos();

routine NoJust =
    errstr(plit asciz 'Nothing to Justify');


global routine metaj = begin
	local leftmar,rightmar,topara;

	if .lowend eql 1 and (.hend-.hbot eql 0)
	 then return NoJust();

	leftmar  _ (if .indent geq 0 then .indent else 0);
	rightmar _ (if .repcount gtr 1 then .repcount else .iudent);
	repcount _ 1;

	topara _ .lowend;
	BegPar();
	if apbreak(.lowend) and .lowend gtr .topara
	 then begin
	    moveback(.lowend-.topara);
	    return NoJust()
	 end;
	if eolBreak(scann(hptr))
	 then begin
	    moveforward(.topara-.lowend);
	    return NoJust()
	 end;

	just(.leftmar,.rightmar);

	if .hend - .hbot eql 1
	 then
	    if eolBreak(scann(hptr))
	     then moveforward(1);
	muline _ 1;
	scrmod _ 1
	end;

global routine ctrlar = begin		! INVERT CASE CHARACTER
    local char;

    if .hend eql .hbot			! if at end of buffer
     then return zapmac();		!  then bomb-out

    char_ scann(hptr);			! copy current character

    if .char geq "a" and .char leq "z"	! if it's lower case
     then replacen(hptr,.char-32)	!   then make it upper
    else
     if .char geq "A" and .char leq "Z"	! if it's upper case
      then replacen(hptr,.char+32);	!   then make it lower

    if .char neq scann(hptr)		! if the character changed
     then begin				!  then
	allmod[.curbuf]_1;		!   mark the buffer modified
	scrmod_ 1			!   and the screen modified
     end;

    moveforward(1)			! pass the character
end;

global routine metaar = begin		! INVERT CASE WORD
    while .hend neq .hbot		! while not at end of buffer
     do if whitespace(scann(hptr))	! and inside whitespace
	 then moveforward(1)		!   then move past whitespace
	 else exitloop;			!   else continue

    while .hend neq .hbot		! while not at end of buffer
     do begin
	ctrlar();			! invert case character
	if wbreak(scann(hptr))		! until whitespace or break
	 then return			!  then return
     end;
    return zapmac()			! if at end then bomb-out
end;


global routine metcar = begin		! INVERT CASE REGION
    if .mark eql 0			! if no region setup, complain
     then return NoMark();
    if .mark leq .lowend		! if point after mark
     then ExcMrk();			!  then exchange
    incr i from .lowend to .mark-1	! invert case of each
     do ctrlar();			!  character until mark
    mark_0				! clear the mark
end;

!
!  Indenting routines
!

Global Routine ctrlj = begin		! INDENT NEXT TO MARGIN
    local lindent;

    lindent_ GetIndent( 0 );		! get line indentation
    EndLin();				! move to end of line
    insertchar("?M");			! insert a CR
    SetIndent( .lindent )		! insert the correct spacing

end;


Global Routine untabline = begin	! UNINDENT LINE
    SetIndent(GetIndent(1)-.tabwidth);	! indent - 1 tabwidth
    EndLin()				! wait at end of line
end;


Global Routine toleft = begin		! UNINDENT REGION
    if .mark eql 0 then			! if no region is declared
     return NoMark();			!  then complain

    BegLin();				! else move to beginning of line
    ExcMrk();				! swap places with mark
    BegLin();				! move to beginning of line

    if .mark gtr .lowend		! if at beginning of region
     then ExcMrk();			!  then move to end of region

    while .lowend geq .mark		! while we are past mark
     do begin
	incr i from 1 to .repcount	!  for each repeat count
	 do untabline();		!   untabify the line
	ctrlp2();			!  backup one line.
	if .lowend eql 1		!  if we've reached the beginning
	 then return			! then return
     end;
    ctrln2()
end;

Global Routine tabline = begin		! INDENT LINE
    SetIndent(GetIndent(1)+.tabwidth);	! indent + 1 tabwidth
    EndLin()				! wait at end of line
end;


Global Routine toright = begin		! INDENT REGION
    if .mark eql 0 then			! if no region is declared
     return NoMark();			!  then complain

    BegLin();				! else move to beginning of line
    ExcMrk();				! swap places with mark
    BegLin();				! move to beginning of line

    if .mark gtr .lowend		! if at beginning of region
     then ExcMrk();			!  then move to end of region

    while .lowend geq .mark		! while we are past mark
     do begin
	incr i from 1 to .repcount	!  for each repeat count
	 do tabline();			!   tabify the line
	ctrlp2();			!  backup one line.
	if .lowend eql 1		!  if we've reached the beginning
	 then return			! then return
     end;
    ctrln2()				! move back over line
end;

global routine metarp = begin		! MOVE TO MATCHING RIGHT PAREN
    local count, moves, leftparen, rightparen;

    rightparen_ SELECT leftparen_ scann(hptr)
	of NSET
	    "(": ")";
	    "[": "]";
	    "{": "}";
	    "<": ">";
	    "`": "'";
	    """": """";
	    OTHERWISE: return abortC()
	TESN;
    count_1;
    moves_0;
    do begin
	moves_.moves+1;
	ctrlf();
	if scann(hptr) eql .rightparen
	 then count_.count-1
	 else if scann(hptr) eql .leftparen
	       then count_.count+1;
	if .count neq 0 and .hend eql .hbot
	 then begin
	    while .moves gtr 0
	     do begin ctrlb(); moves_.moves-1 end;
	    return abortC()
	 end
     end until .count eql 0
end;

global routine metalp = begin		! MOVE TO MATCHING LEFT PAREN
    local count, moves, leftparen, rightparen;

    leftparen_ SELECT rightparen_ scann(hptr)
	of NSET
	    ")": "(";
	    "]": "[";
	    "}": "{";
	    ">": "<";
	    "'": "`";
	    """": """";
	    OTHERWISE: return abortC()
	TESN;
    count_1;
    moves_0;
    do begin
	moves_.moves+1;
	ctrlb();
	if scann(hptr) eql .leftparen
	 then count_.count-1
	 else if scann(hptr) eql .rightparen
	       then count_.count+1;
	if .count neq 0 and .lowend eql 1
	 then begin
	    while .moves gtr 0
	     do begin ctrlf(); moves_.moves-1 end;
	    return abortC()
	 end
     end until .count eql 0
end;

Global Routine docomment = begin	! MOVE AND INSERT COMMENT STRING
    local temp,goal;

    BegLin();				! First find length of line
    temp_1;
    while .hbot neq .hend
     do begin
	if eolBreak(scann(hptr))
	 then exitloop;
	temp_updatecursor(scann(hptr),.temp);
	moveforward()
     end;
    goal_.commentpos;			!the goal place to go.
    while .temp gtr .goal
     do goal_.goal + .tabwidth;
    while .temp lss .goal
     do if .spaces or
	   .goal-.temp lss .tabsize
	 then begin
	    insertchar(" ");
	    temp_.temp+1
	 end
	 else begin
	    insertchar("?I");
	    temp_updatecursor("?I",.temp)
	 end;

    insertchar("!")
end;

global routine DayTime = begin
    local val;
    external flubfr,Pdate,Ptime;

    Writeloss(" ");
    Flubfr();
    PDate(-1,.Val_-1);
    Writeloss(" ");
    Flubfr();
    PTime(-1,.Val_-1)
end;

global routine debcor = begin
    local val;

    val _ GetNum(Writestring(plit asciz' loc: '));
    Writeloss(" "); WrtOct(.val); Writestring(plit asciz '/  ');
    WrtOct(.(.val)<18,18>); Writestring(plit asciz',,');
    WrtOct(.(.val)< 0,18>);
    Writeloss(" "); Wrtnum(.(.val)<0,36>); Writestring(plit asciz'. ');
    Writestring(plit asciz' |'); WrtSix((.val)<0,36>); Writeloss("|")
end;

global routine uctrll = begin		! COPY KEY
    local old,new;

    ToPrompt(plit asciz'Copy key:');	! get the old key
    old_ readcc();			!  from the user

    if .old eql .AbortValue		! if user types abort
     then return abortC();		!  then pop out of this

    WriteString(plit asciz' to new key:');
    new_ readcc();			! get the new key

    if .new eql .AbortValue		! again, if the user aborts
     then return abortC();		!  then pop out of this

    (@distbl)[.new]_.(@distbl)[.old]	! all ok, make the copy
end;


global routine bindkey = begin
    local key,name;

    ToPrompt(plit asciz'Function Name: ');
    name _ Symbol(CNames);
    if .flush
     then return abortC();
    if .name leq 0 then return abortC();
    Writestring(plit asciz'Key: ');
    key _ readcc();
    if .key eql .AbortValue
      then return abortC();
    (@distbl)[.key]_.CFuncts[.name];
    repcount_1
end;

Global routine metas = begin local I,Temp;

    routine ListParameters = begin local Idx;
	Idx _ 1;				! Skip the first one [0]
	While .Pnames[.Idx] neq 0 do begin
	    scrmod_ 1;
	    MakBox( 1, .PNames[.Idx], ..PLocs[.Idx] );
	    Idx _ .Idx + 1
	end;
	MakBox( -1, 0, 0 )
    end;

    scrmod _ 0;
    Do begin
	ToPrompt(plit asciz 'Parameter: ');
	I _ Symbol(PNames);
	If .I eql 0 then ListParameters()
    end until .I neq 0 or .flush;
    If .flush then ToPrompt(plit asciz'Aborted')
    else begin
	If .I gtr 0 then begin
	    Writestring(plit asciz' Old value was ');
	    WrtNum(..PLocs[.I]);
	    Temp _ GetNum(Writestring(plit asciz', New value: '));
	    If .flush then ToPrompt(plit asciz'Aborted')
	    else .PLocs[.I] _ .Temp
	end
    end;
    If .scrmod then Ctrll()
end;

Global routine extend = begin
    local i;

    routine ListCommands = begin local Idx;
	Idx _ 1;				! Skip the first one [0]
	While .Cnames[.Idx] neq 0 do begin
	    scrmod_ 1;
	    If .Cfuncts[.Idx] neq 0
	     then MakBox( 0, .CNames[.Idx], 0 );
	    Idx _ .Idx + 1
	end;
	MakBox( -1, 0, 0 )
    end;

    scrmod _ 0;
    Do begin
	ToPrompt(plit asciz 'Meta-X ');	! Print M-X
	I _ Symbol(CNames);
	If .I eql 0 then ListCommands()
    end until .I neq 0 or .flush;
    if .flush
     then return abortC();
    If .scrmod
     then Ctrll();

    if .i gtr 0
     then while .repcount gtr 0
	   do begin
		if ..CFuncts[.i] neq 0
		 then (.Cfuncts[.i])();
		repcount _ .repcount -1
	   end;
    repcount_1
end;

Global Routine metam = begin
    local tp,glbuffer[25],thack;
    external flush,getstr,modblk,filescan;

    flush_0;
    ToPrompt(plit asciz 'Mode Package: ');
    tp_(glbuffer)<36,7>;
    getstr(.tp);
    thack_.(modblk+1);
    if not (filescan (tp,modblk)) then return abortC();
    if .flush then return abortC();
    return  Select .(modblk+1) of NSET
	sixbit'text':		jstins_ 1;
	sixbit'abbrev':		abinit();
	sixbit'init':		(abinit();jstins_ 0);
	Otherwise:
	    Begin
	(modblk+1)_.thack;
	ErrStr(plit asciz'Bad mode, one of (text abbrev init)');
	    end;
    TESN
end;

end eludom
  Iod