module curses = begin

external physpos,physlin,scrsze,linesz,linmax,ttytyp,ttype;
external PutCh,PutString,PutOct,PutNum,PutPad,PutBCD;
external Writeloss,Writestring;
external inwind,modpos,scrlen,scroff,wndsiz;
external altptr,flubfr,gettty,getwid,getlen;

global wndpea=0, baudrate=1200, echosize=3, montty=-1;
global XTFxps=1, XTFyps=1;

global Clines, Ccols;

Macro
Xs(x,s)= ((x and #777)^s)$,
Byt4( B1, B2, B3, B4) = Xs(B1,27) or Xs(B2,18) or Xs(B3,9) or (B4 and #777)$;
Global routine exert( ttyString ) = begin
register ch, ptr;	! ptr must be a register to work right %%%%
local finished;

routine Padding = begin
    ch _ scani(ptr);				! Get padding character
    incr p from 1 to (4*.baudrate)/1200 do putch(.ch)
end;

routine DoOut = begin
    ch _ case scani(ptr) of set			! Get item to output
	 0;					!	null
	.Physpos-.XTFxps;			!	.X
	.Physlin-.XTFyps;			!	.Y
    tes;
    case scani(ptr) of set			! Decide how to print it
	0;					!   0	nothing!
	PutCh(.ch);				!   1	character
	PutCh(.ch-1);				!   2	zero offset char
	PutCh(.ch+#37);				!   3	printing char
	PutNum(.ch);				!   4	decimal number
	PutNum(.ch-1);				!   5	zero based number
	PutOct(.ch);				!   6	octal number
	PutBCD(.ch-1);				!   7	zero based BCD format
	PutPad(.ch-1,2);			!   8	zero based number (2)
	PutPad(.ch-1,3)				!   9	zero based number (3)
    tes
end;

    ptr_(.ttyString-1)<0,9>;			! Set pointer to string
    finished _ 0;				! True when we are done
    while not .finished do begin		! While not finished...
	ch _ scani(ptr);			!   get character
	if (.ch and #400) neq 0			!     if negative, then
	    then ch _ .ch or #777777777000;	!     make it really!
	if .ch gtr 0 then putch(.ch)		!   if printable -- print
	  else case -.ch of set			!   else %special%
	    Finished_1;				!   0	Set finished flag!
	    Padding();				!   1	Pad function [char]
	    Flubfr();				!   2	Buffer flush
	    DoOut()				!   3	Output [item][mode]
	  tes
    end;					! end "not finished"
end;						! end "exert( String )"


global routine ttyini = begin
	Clines _ GetLen()+1;
	if .Clines eql 1 then Clines_24;    !check for .tt ps lossage
	Ccols _ GetWid();		    ! [CB] Use system's idea of width
	if .Ccols eql 0 then Ccols _ 80;    ! [CB] if none set then 80;
	if .Ccols gtr 132 then Ccols_132    ! [CB] max with = 132
end;
global routine ttyin2 = begin
    external CSTpos, CSTclr, CSTins, CSTdel;

    linesz_.Ccols-1;
    modpos_24-.echosize;
    scrsze_.modpos;

    CSTpos _ 9;
    CSTclr _ 2;
    CSTins _ 2;
    CSTdel _ 6
end;

global routine delchar (times) =
    incr i from 1 to .times do Exert(plit( Byt4("?[","P",0,0) ));

global routine inschar (times) =
    incr i from 1 to .times do begin
	physpos _ .physpos+1;
	Exert(plit( Byt4("?[","Q"," ","?["), Byt4("R",0,0,0) ) )
    end;
global routine inslin (times) =
    incr i from 1 to .times do Exert(plit( Byt4("?[","L",0,0) ));

global routine dellin (times) =
    incr i from 1 to .times do Exert(plit( Byt4("?[","M",0,0) ));

global routine clearscreen = begin
    ttyini();
    physpos_1;    physlin_1;
    Exert(plit( Byt4("?[","H","?[","J"), Byt4(-2,0,0,0) ) )
end;
global routine clreos = Exert(plit( Byt4("?[","J",0,0) ));

global routine ttyzap = clearscreen();

global routine leftmargin = begin
    putch(13);    physpos_1
end;

global routine defwindow (x,y,c,l) = begin
! x,y is the position to start
! c   is the length of the window,  l   is its depth, in lines.
    scroff_.y-1;    scrlen_.l
end;

global routine clearline = Exert(plit( Byt4("?[","K",-2,0) ));

global routine goxy (xloc,yloc) = begin
    if .xloc eql .physpos and .yloc eql .physlin then return;
    physlin_.yloc;
    physpos_.xloc;
    Exert(plit(
	Byt4("?[", "&", "a", -3),
	Byt4(   2,   4, "y", -3),
	Byt4(   1,   4, "C",  0)  ) )
end;

global routine home = begin
    physpos_1;    physlin_1;
    Exert(plit( Byt4("?[", "H", 0, 0) ))
end;

global routine ToPrompt(foo) =
begin
	defwindow(1,1,.linesz,.modpos+.echosize);
	goxy(1,.modpos+2);
	clearline();
	Writestring(.foo);	! Must use Writeloss;
	inwind_1
end;
global routine FromPrompt = AltPtr_0;

global routine normalvideo =;
global routine inversevideo =;

Global Routine WhiteLine = begin
    InverseVideo();
    ClearLine()
end;

global routine Asktty = begin

register savtyp;

Routine SelectTTY(Sometype) = 23;
Routine CaseTTY(Sometype) = sixbit'HP2621';
Routine Getusr = begin
    ToPrompt(plit asciz  ' Using HP2621  as your terminal type ');
    return sixbit 'HP2621';
end;

If .Montty eql -1 then begin		! Upon initialization...
    Montty _ Gettty();			!   Ask the monitor for a type
    Savtyp _ SelectTTY(.Montty);	! See if it's in our table
    If .Savtyp neq 0 then begin		! (YES) - Accept it
	Ttype  _ CaseTTY(.Savtyp);	!   Set NAME to Terminal NAME
	Ttytyp _ .Savtyp;		!   Set number to given value
	Return 1;			!   Return .TRUE.
    end;
end;
While 1 do begin
    Montty _ Getusr();			! Ask the user for a type
    Savtyp _ SelectTTY(.Montty);	! See if it's in our table
    If .Savtyp eql 0			! (NO)  - Reject it
	then Return 0			!   .False.
	else begin			! (YES) - Accept it
	    Ttype  _ CaseTTY(.Savtyp);	!   Set NAME to Terminal NAME
	    Ttytyp _ .Savtyp;		!   Set number to given value
	    Return 1;			!   Return .TRUE.
	end;
end;

end;

end eludom
