**********************************************************************
*
*	M A S T E R     I N V E N T O R Y     S Y S T E M
*
**********************************************************************

IDENTIFICATION DIVISION.
PROGRAM-ID. MASTYM.
AUTHOR. JIM WESTLAKE.
REMARKS. TYMAINT-10 INVENTORY SYSTEM - MASTER ROUTINES.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
SPECIAL-NAMES.
	CHANNEL (1) IS TOP.

INPUT-OUTPUT SECTION.
FILE-CONTROL.
	SELECT MAST-FILE ASSIGN TO DSK
	ACCESS MODE IS INDEXED
	SYMBOLIC KEY IS MAST-KEY
	RECORD KEY IS M-REC-KEY
	RECORDING MODE IS SIXBIT.

	SELECT NAME-FILE ASSIGN TO DSK
	ACCESS MODE IS INDEXED
	SYMBOLIC KEY IS N-KEY
	RECORD KEY IS N-SITE-NO
	RECORDING MODE IS SIXBIT.

	SELECT HIST-FILE ASSIGN TO DSK
	ACCESS MODE IS INDEXED
	SYMBOLIC KEY IS HIST-KEY
	RECORD KEY IS H-REC-KEY
	RECORDING MODE IS SIXBIT.
**********************************************************************
*
*	F I L E     D E S C R I P T I O N S
*
**********************************************************************
DATA DIVISION.
FILE SECTION.

FD	MAST-FILE
	COPY FDMAST.
******************************
*	FILE DESC (CONT)
******************************

FD	NAME-FILE
	COPY FDNAME.
******************************
*	FILE DESC (CONT)
******************************

FD	HIST-FILE
	COPY FDHIST.
**********************************************************************
*
*	W O R K I N G     S T O R A G E 
*
**********************************************************************

WORKING-STORAGE SECTION.

******************************
*	ACCUMULATORS
******************************

77	I			PIC 999 VALUE ZERO USAGE COMP.

******************************
*	ISAM FILE KEYS
******************************

01	MAST-KEY.
	02	M-K-PN-PL.
	  04	M-K-PARTNO	PIC X(11).
	  04	M-K-PL		PIC X.
01	WS-MAST-FLAG		PIC X.

01	N-KEY			PIC 99.

01	HIST-KEY.
	02	H-K-PN-PL.
	  04	H-K-PARTNO	PIC X(11).
	  04	H-K-PL		PIC X.
	02	H-K-ENTRY-NO	PIC 9999.
01	WS-HIST-FLAG		PIC X.

******************************
*	CONTROL FLAGS &
*	RESPONSE LOCS
******************************

01	WS-ENA			PIC 9 USAGE DISPLAY-6.
01	WS-PL			PIC X USAGE DISPLAY-7.
01	WS-ANS			PIC X USAGE DISPLAY-7.
01	WS-SUB-OPT		PIC X USAGE DISPLAY-7.
01	RET-CODE		PIC 9 USAGE COMP.
01	RET-CODE-SAVE		PIC 9 USAGE COMP.
01	WS-REWRITE-FLAG		PIC X VALUE SPACES.
01	WS-MACRO-ARG.
	02	WS-MACRO-ARG-1.
	  04	FILLER		PIC X(5) USAGE DISPLAY-6.
	  04	WS-MACRO-ARG-N	PIC X    USAGE DISPLAY-6.
	02	WS-MACRO-ARG-2.
	  04	FILLER		PIC X(5) USAGE DISPLAY-6.
	  04	WS-MACRO-ARG-EN	PIC X    USAGE DISPLAY-6.

01	ITEM-NAME.
	02	ITEM-CHAR	PIC X.
	02	FILLER		PIC XXX.
******************************
*	DATE/TIME CONTROL LOCS.
******************************
01	WS-TEMP-DATE USAGE DISPLAY-7.
	02	WSTY		PIC 99.
	02	WSTM		PIC 99.
	02	WSTD		PIC 99.
	02	WSTH		PIC 99.
	02	WSTMIN		PIC 99.
	02	WSTSEC		PIC 99.
01	WS-DATE USAGE DISPLAY-7.
	02	WS-MONTH	PIC 99.
	02	FILLER		PIC X VALUE '-'.
	02	WS-DAY		PIC 99.
	02	FILLER		PIC X VALUE '-'.
	02	WS-YEAR.
		04 WS-YEAR-DIGIT-1	PIC 9.
		04 WS-YEAR-DIGIT-2	PIC 9.
01	JULIAN-DATE.
	02	JULIAN-YEAR	PIC 9.
	02	JULIAN-DAY	PIC 999.
01	DATE-TABLE-DATA.
	02	FILLER		PIC 999 VALUE ZERO.
	02	FILLER		PIC 999 VALUE 31.
	02	FILLER		PIC 999 VALUE 59.
	02	FILLER		PIC 999 VALUE 90.
	02	FILLER		PIC 999 VALUE 120.
	02	FILLER		PIC 999 VALUE 151.
	02	FILLER		PIC 999 VALUE 181.
	02	FILLER		PIC 999 VALUE 212.
	02	FILLER		PIC 999 VALUE 243.
	02	FILLER		PIC 999 VALUE 273.
	02	FILLER		PIC 999 VALUE 304.
	02	FILLER		PIC 999 VALUE 334.
	02	FILLER		PIC 999 VALUE 366.
01	DATE-TABLE REDEFINES DATE-TABLE-DATA.
	02	DATE-TBL	PIC 999 OCCURS 13 TIMES.


*FOLLOWING TO CONVERT BACK FROM JULIAN DATE

01	WS-JULIAN-DATE.
	02	WS-CONV-YEAR	PIC 9.
	02	WS-CONV-DAY	PIC 999.
01	WS-DATE-OUT.
	02	WS-MONTH-OUT	PIC 99.
	02	WS-D-SEP-1	PIC X.
	02	WS-DAY-OUT	PIC 99.
	02	WS-D-SEP-2	PIC X.
	02	WS-YEAR-OUT.
	  04	WS-YEAR-OUT-1	PIC 9.
	  04	WS-YEAR-OUT-2	PIC 9.
******************************
*	PARTS DATA LOCATIONS
******************************

01	WS-MAST-KEY-SAVE.
	02	WS-MAST-PN-PL-SAVE.
	  04	WS-MAST-PN-SAVE		PIC X(11).
	  04	WS-MAST-PL-SAVE		PIC X.
01	WS-PARTNO		PIC X(11).
01	WS-QUAN			PIC 9999 VALUE ZERO.
01	WS-BAL			PIC S9999 VALUE ZERO.
01	WS-ORD-QUAN		PIC S9999.
01	WS-MAX-EXT		PIC 9999.
01	WS-AGE			PIC 999.
******************************
*	WORKING COPIES OF MAST-REC
******************************

01	WS-MAST-REC-SAVE	PIC X(90) USAGE DISPLAY-6.

01	WS-MAST-REC
	COPY WSMAST.
******************************
*	MESSAGES, ETC
******************************

01	PRODUCT-LINE-TABLE.
	02	PL-DEC		PIC X(3) VALUE 'DEC' USAGE DISPLAY-7.
	02	PL-IBM		PIC X(3) VALUE 'IBM' USAGE DISPLAY-7.
	02	PL-XEROX	PIC X(5) VALUE 'XEROX' USAGE DISPLAY-7.

01	MSG-ASTICS	PIC X(30) VALUE '******************************'
					USAGE IS DISPLAY-7.
01	MSG-INVALID	PIC X(12) VALUE '** INVALID -' USAGE DISPLAY-7.
01	MSG-PN-OR-DOT	PIC X(12) VALUE 'P/N OR <.> -' USAGE DISPLAY-7.
01	WRITE-ERROR-MESSAGE USAGE DISPLAY-7.
	02	FILLER		PIC X(19) VALUE 'ERROR ATTEMPTING A '.
	02	W-E-MSG-TYPE	PIC X(7)  VALUE SPACES.
	02	FILLER		PIC X(18) VALUE ' TO THE PARTS FILE'.
**********************************************************************
*
*	P R O C E D U R E     D I V I S I O N
*
**********************************************************************

PROCEDURE DIVISION.
******************************
DECLARATIVES.
******************************

MAST-BUSY SECTION.
	USE AFTER STANDARD ERROR PROCEDURE ON MAST-FILE OPEN.

MAST-BUSY-ROUTINE.
	DISPLAY '<MAST-FILE BUSY - WAITING...>'.
	ENTER MACRO WAIT.

NAME-BUSY SECTION.
	USE AFTER STANDARD ERROR PROCEDURE ON NAME-FILE OPEN.

NAME-BUSY-ROUTINE.
	DISPLAY '<NAME-FILE BUSY - WAITING...>'.
	ENTER MACRO WAIT.

******************************
END DECLARATIVES.
******************************
MAIN-PROGRAM SECTION.
START-PROGRAM-HERE.

******************************
*	STARTUP ROUTINE
******************************

	MOVE SPACES TO WS-MACRO-ARG.
	ENTER MACRO INVINI USING WS-MACRO-ARG.
	IF WS-MACRO-ARG-1 = 'RUN' AND WS-MACRO-ARG-EN NUMERIC
		MOVE WS-MACRO-ARG-EN TO WS-ENA;
	ELSE, ENTER MACRO LOGOFF.
	DISPLAY 'TYMAINT-10 INVENTORY SYSTEM'.
	PERFORM DATE.
	DISPLAY WS-DATE '    <' JULIAN-DATE '>'.
	DISPLAY ' '.
GET-PRODUCT-LINE.
	DISPLAY 'ENTER P/L - (D)EC, (I)BM, (X)EROX, (H)P, (V)ARIAN -'
		 WITH NO ADVANCING.
	ACCEPT M-K-PL.
	IF M-K-PL NOT = "D" AND M-K-PL NOT = 'I' AND M-K-PL NOT = 'X'
	  AND M-K-PL NOT = 'H' AND M-K-PL NOT = 'V'
		DISPLAY MSG-INVALID WITH NO ADVANCING
		GO TO GET-PRODUCT-LINE.
GET-PRODUCT-LINE-END.
	MOVE M-K-PL TO WS-PL.
******************************
*	PROCEDURE DISPATCH
******************************

PROC.
	DISPLAY 'PROCEDURE: ' WITH NO ADVANCING.
	ACCEPT WS-ANS.
	IF WS-ANS = 'A' GO TO ADD-RECORD;
	ELSE, IF WS-ANS = 'C' GO TO CHANGE-ITEM;
	ELSE, IF WS-ANS = 'D' GO TO DELETE-RECORD;
	ELSE, IF WS-ANS = 'E' OR WS-ANS = 'Q'
		IF WS-ENA = ZERO
			STOP RUN;
		ELSE, ENTER MACRO LOGOFF;
	ELSE, IF WS-ANS = 'H' GO TO HISTORY;
	ELSE, IF WS-ANS = 'L'
		MOVE 'LISTYM' TO WS-MACRO-ARG
		MOVE WS-ENA TO WS-MACRO-ARG-EN
		ENTER MACRO RUNNIT USING WS-MACRO-ARG;
	ELSE, IF WS-ANS = 'P' GO TO DISPLAY-RECORDS;
	ELSE, GO TO NEXT-GROUP.
	GO TO PROC.
NEXT-GROUP.
	IF WS-ANS = 'S'
		MOVE 'SITTYM' TO WS-MACRO-ARG
		MOVE WS-ENA TO WS-MACRO-ARG-EN
		ENTER MACRO RUNNIT USING WS-MACRO-ARG;
	ELSE, IF WS-ANS = 'T' GO TO TYPE-RECORD;
	ELSE, IF WS-ANS = 'X' GO TO CROSS-REFERENCE;
	ELSE, IF WS-ANS = 'Y'
		MOVE 'RECTYM' TO WS-MACRO-ARG
		MOVE WS-ENA TO WS-MACRO-ARG-EN
		ENTER MACRO RUNNIT USING WS-MACRO-ARG;
	ELSE, IF WS-ANS = 'Z'
		MOVE 'CONTYM' TO WS-MACRO-ARG
		MOVE WS-ENA TO WS-MACRO-ARG-EN
		ENTER MACRO RUNNIT USING WS-MACRO-ARG;
	ELSE, IF WS-ANS = '?' GO TO HELP;
	ELSE, DISPLAY WS-ANS ' IS INVALID'
		DISPLAY 'TYPE ? FOR LIST OF VALID COMMANDS'
		GO TO PROC.
**********************************************************************
*
*	HELP - TYPE LIST OF VALID COMMANDS AT 'PROC' LEVEL
*
**********************************************************************

HELP.
	DISPLAY ' '.
	DISPLAY 'PROCEDURES:'.
	DISPLAY '	A	ADD RECORD TO FILE'.
	DISPLAY '	C	CHANGE ANY ITEM IN MASTER RECORD'.
	DISPLAY '	D	DELETE MASTER RECORD'.
	DISPLAY '	E	EXIT'.
	DISPLAY '	H	USAGE HISTORY LISTING'.
	DISPLAY '	L	ENTER LISTYM - LISTING PROGRAM'.
	DISPLAY '	P	DISPLAY PARTS OR HIST RECORDS'
	DISPLAY '	Q	QUIT (EXIT)'.
	DISPLAY '	S	ENTER SITTYM (SITE INVENTORY PROGRAM)'.
	DISPLAY '	T	TYPE MASTER RECORD'.
	DISPLAY '	X	ADD CROSS-REFERENCE RECORDS'.
	DISPLAY '	Y	ENTER RECTYM - RECOMMENDED SPARES'.
	DISPLAY '	Z	ENTER CONTYM - CONTROL PROGRAM'.
	DISPLAY '	?	TYPE THIS TEXT'.
	GO TO PROC.
************************************************************
*	ROUTINE TO ADD RECORDS TO THE MASTER PARTS FILE
*	CALLED FROM 'PROC'  (A)
*************************************************************

ADD-RECORD.
	PERFORM NEW-ROUTINE.
	DISPLAY 'ADD RECORDS TO MASTER FILE'.
ADD-REC-LOOP.
	PERFORM CLOSE-MAST-OUT THRU CLOSE-MAST-OUT-END.
	DISPLAY MSG-PN-OR-DOT WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 2
		GO TO ADD-REC-DOIT.
	IF RET-CODE = 0 OR RET-CODE = 9
		GO TO PROC.
	IF (RET-CODE = 1 OR RET-CODE = 4) AND M-PL NOT = SPACES
		DISPLAY M-K-PARTNO ' ALREADY EXISTS'
		GO TO ADD-REC-LOOP.
	MOVE RET-CODE TO RET-CODE-SAVE.
	DISPLAY M-K-PARTNO ' EXISTS WITH BLANK P/L - ADD ANOTHER ? '
		WITH NO ADVANCING.
	PERFORM YES-NO.
	IF WS-ANS = 'N'
		GO TO ADD-REC-LOOP.
	DISPLAY 'ENTER P/L FOR ORIGINAL ENTRY - ' WITH NO ADVANCING.
ADD-GET-PREV-PL.
	PERFORM GET-PRODUCT-LINE.
	IF M-K-PL = WS-PL
	    DISPLAY '* CURRENT P/L = ' WS-PL ' PREV MUST BE DIFFERENT'
		GO TO ADD-GET-PREV-PL.
	MOVE MAST-KEY TO WS-MAST-KEY-SAVE.
	MOVE MAST-REC TO WS-MAST-REC.
	IF RET-CODE-SAVE = 1 AND M-REV-CREF NOT = SPACES
		GO TO ADD-FIX-TARGET-PTRS.
	IF RET-CODE-SAVE NOT = 4
		GO TO ADD-REC-GO.
ADD-FIX-REV-PTR.
	MOVE M-CREF-PN-PL TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		GO TO FWD-CREF-ERROR.
	IF M-CREF = 'X'
		GO TO FWD-CREF-ERROR.
******************************
*	ADD (CONT)
******************************

ADD-FIX-REV-PTR-1.
	IF M-REV-CREF-PN = WS-PARTNO
		GO TO ADD-FIX-REV-PTR-2;
	ELSE, IF M-REV-CREF = SPACES
		GO TO REV-CREF-ERROR.
	MOVE M-REV-CREF TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		GO TO REV-CREF-ERROR.
	GO TO ADD-FIX-REV-PTR-1.
ADD-FIX-REV-PTR-2.
	MOVE WS-MAST-PN-PL-SAVE TO M-REV-CREF.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	GO TO ADD-REC-GO.

ADD-FIX-TARGET-PTRS.
	MOVE M-REV-CREF TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		GO TO REV-CREF-ERROR.
	MOVE WS-MAST-PL-SAVE TO M-CREF-PL.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	IF M-REV-CREF NOT = SPACES
		GO TO ADD-FIX-TARGET-PTRS.

ADD-REC-GO.
	MOVE WS-MAST-KEY-SAVE TO MAST-KEY.
	IF WS-MAST-FLAG NOT = 'O' AND WS-MAST-FLAG NOT = 'B'
		PERFORM OPEN-IO-MAST-FILE THRU OPEN-IO-MAST-FILE-END.
	MOVE WS-MAST-REC TO MAST-REC.
	PERFORM WRITE-MAST-REC THRU WRITE-MAST-REC-END.
	MOVE SPACES TO MAST-REC M-K-PL.
	MOVE 1 TO M-FLAG.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	MOVE WS-PL TO M-K-PL.
ADD-REC-DOIT.
	MOVE SPACES TO MAST-REC.
	PERFORM ACCEPT-OPT-DESC-VPN-VC.
	DISPLAY 'PRICE: ' WITH NO ADVANCING.
	ACCEPT M-PRICE.
	PERFORM GET-RR-CODE THRU GET-RR-CODE-END.
	PERFORM VERIFY-OK.
	IF RET-CODE = 0
		DISPLAY 'ABORTING THIS RECORD'
		GO TO ADD-REC-LOOP.
	PERFORM WRITE-MAST-REC THRU WRITE-MAST-REC-END.
	GO TO ADD-REC-LOOP.
**********************************************************************
*	CHANGE-ITEM - ROUTINE TO CHANGE ANY ITEM IN A SELECTED RECORD.
*	CALLED FROM 'PROC'  (C)
*
*	IF CHANGE PARTNO, NEW PART NUMBER WILL BE PUT INTO EXISTING
*	RECORD & MAST-KEY & RECORD WRITTEN. THE OLD RECORD WILL 
*	THEN BE DELETED.
*
**********************************************************************

CHANGE-ITEM.
	PERFORM NEW-ROUTINE.
	DISPLAY 'CHANGE RECORDS'.
CHANGE-LOOP.
	PERFORM CLOSE-MAST-OUT THRU CLOSE-MAST-OUT-END.
	DISPLAY ' '.
	DISPLAY MSG-PN-OR-DOT WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 1
		GO TO CHANGE-CMD;
	ELSE, IF RET-CODE = 0 OR RET-CODE = 2
		DISPLAY MAST-KEY ' NON-EXISTANT'
		GO TO CHANGE-LOOP;
	ELSE, IF RET-CODE = 4
		DISPLAY 'THIS IS A CREF RECORD--PROCEED ? '
			WITH NO ADVANCING
		PERFORM YES-NO
		IF WS-ANS = 'Y'
			GO TO CHANGE-CMD;
		ELSE, DISPLAY '** ABORTING **'
			GO TO CHANGE-LOOP;
	ELSE, IF RET-CODE = 9
		GO TO PROC.
******************************
*	CHANGE (CONT)
******************************

CHANGE-CMD.
	DISPLAY 'CHANGE WHAT ? ' WITH NO ADVANCING.
	ACCEPT ITEM-NAME.
	IF ITEM-NAME = 'PARTNO' OR ITEM-CHAR = 'P'
		GO TO CHANGE-PARTNO;
	ELSE, IF ITEM-CHAR = 'D'
		IF M-CREF  NOT = SPACES
			DISPLAY '* CANNOT CHANGE DESC IN CREF RECORD *'
			GO TO CHANGE-CMD;
		ELSE, DISPLAY 'DESC = ' M-DESC '   DESC - '
			WITH NO ADVANCING
			ACCEPT M-DESC;
	ELSE, IF ITEM-NAME = 'C' OR ITEM-NAME = 'COST'
	    DISPLAY 'PRICE = ' M-PRICE '    PRICE - ' WITH NO ADVANCING
		ACCEPT M-PRICE;
	ELSE, IF ITEM-NAME = 'VPN'
		DISPLAY 'VPN = ' M-VPN '    VPN - ' WITH NO ADVANCING
		ACCEPT M-VPN;
	ELSE, IF ITEM-NAME = 'VC'
		DISPLAY 'VC = ' M-VC '    VC - ' WITH NO ADVANCING
		ACCEPT M-VC;
	ELSE, IF ITEM-CHAR = 'O'
	    DISPLAY 'OPTION = ' M-OPT '   OPTION - ' WITH NO ADVANCING
		ACCEPT M-OPT;
	ELSE, IF ITEM-CHAR = 'R'
		DISPLAY 'R/R CODE = ' M-RR '    ' WITH NO ADVANCING
		PERFORM GET-RR-CODE THRU GET-RR-CODE-END;
	ELSE, IF ITEM-CHAR = '.' GO TO CHANGE-GO;
	ELSE, IF ITEM-CHAR = '?' GO TO CHANGE-HELP;
	ELSE, DISPLAY '* INVALID - TYPE ? FOR HELP *'.
	GO TO CHANGE-CMD.

CHANGE-HELP.
	DISPLAY 'VALID FIELDS ARE:'.
	DISPLAY '(P)ARTNO	PART NUMBER'.
	DISPLAY '(D)ESC		DESCRIPTION'.
	DISPLAY 'VPN		VENDOR P/N OR GENERIC'.
	DISPLAY 'VC		VENDOR CODE'.
	DISPLAY 'OPT		OPTION USED ON'.
	DISPLAY 'C		COST (PRICE)'.
	DISPLAY 'R		R/R CODE'.
	DISPLAY '.		END OF CHANGES TO THIS P/N'.
	GO TO CHANGE-CMD.
******************************
*	CHANGE (CONT)
******************************

CHANGE-GO.
	DISPLAY 'OK?  ' WITH NO ADVANCING.
	PERFORM YES-NO.
	IF WS-ANS = 'N'
		DISPLAY '* ABORTING *'
		GO TO CHANGE-LOOP.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	DISPLAY M-PARTNO ' HAS BEEN CHANGED'.
	GO TO CHANGE-LOOP.

CHANGE-PARTNO.
	IF M-CREF = 'X' OR M-REV-CREF NOT = SPACES
		DISPLAY '** THIS REC IN CREF LINK - CANNOT CHANGE P/N'
		DISPLAY '** MUST DELETE, THEN ADD NEW NUMBER'
		GO TO CHANGE-LOOP.
	MOVE MAST-KEY TO WS-MAST-KEY-SAVE.
	DISPLAY 'NEW PART NUMBER - ' WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE NOT = 2
		DISPLAY MAST-KEY ' IS AN EXISTANT PART NUMBER - ABORTED'
		GO TO CHANGE-LOOP.
	DISPLAY 'CHANGING ' WS-MAST-KEY-SAVE ' TO ' MAST-KEY ' -- OK? '
		WITH NO ADVANCING.
	PERFORM YES-NO.
	IF WS-ANS = 'N'
		DISPLAY '** ABORTING**'
		GO TO CHANGE-LOOP.
	PERFORM WRITE-MAST-REC THRU WRITE-MAST-REC-END.
	MOVE WS-MAST-KEY-SAVE TO MAST-KEY.
	PERFORM DELETE-MAST-REC THRU DELETE-MAST-REC-END.
	DISPLAY 'CHANGE COMPLETE'.
	GO TO CHANGE-LOOP.
**********************************************************************
*	CROSS-REFERENCE - ROUTINE TO ADD CREF RECORDS TO FILE.
*	CALLED FROM 'PROC'.
*	WILL DELETE ANY CURRENT RECORD ENTERED AS 'CREF FROM'.
**********************************************************************

CROSS-REFERENCE.
	PERFORM NEW-ROUTINE.
	DISPLAY 'ADD CROSS-REFERENCE RECORDS TO FILE'.
	DISPLAY ' '.
CROSS-REF-LOOP.
	PERFORM CLOSE-MAST-OUT THRU CLOSE-MAST-OUT-END.
	DISPLAY 'CREF FROM ' MSG-PN-OR-DOT WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 0 OR RET-CODE = 9
		DISPLAY 'EXIT CREF'
		GO TO PROC.
	IF RET-CODE = 1
		MOVE MAST-REC TO WS-MAST-REC
		MOVE 'R' TO WS-REWRITE-FLAG;
	ELSE, IF RET-CODE = 4
		DISPLAY '* CANNOT CREF A CREF RECORD *'
		DISPLAY '* MUST DELETE, THEN CREF *'
		GO TO CROSS-REF-LOOP;
	ELSE, MOVE SPACES TO WS-MAST-REC
		MOVE M-K-PARTNO TO M1-REC-PN-PL
		MOVE 'W' TO WS-REWRITE-FLAG.
	DISPLAY 'P/N TO REF - ' WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 0 OR RET-CODE = 9
		DISPLAY '**ERROR**'
		GO TO CROSS-REF-LOOP;
	ELSE, IF RET-CODE = 2
		DISPLAY MAST-KEY ' NON-EXISTANT - ABORTING'
		GO TO CROSS-REF-LOOP;
	ELSE, IF RET-CODE = 4
		DISPLAY 'CANNOT CREF TO A *CREF* RECORD'
		GO TO CROSS-REF-LOOP;
	ELSE, IF M1-REC-KEY = M-REC-KEY
		DISPLAY '* CANNOT CREF NUMBER TO ITSELF *'
		GO TO CROSS-REF-LOOP.
	IF M-PRICE = ZERO
		MOVE M1-PRICE TO M-PRICE.
	IF M-REC-QUAN = ZERO
		MOVE M1-REC-QUAN TO M-REC-QUAN.
******************************
*	CROSS-REF  (CONT)
******************************

	IF (M-OPT = SPACES OR M-OPT = 'SYSTEM')
	AND M1-OPT NOT = SPACES
		MOVE M1-OPT TO M-OPT;
	ELSE, IF M-OPT = M1-OPT
		NEXT SENTENCE;
	ELSE, DISPLAY 'FM OPT= ' M1-OPT ' TO OPT= ' M-OPT
		DISPLAY 'OPTION - ' WITH NO ADVANCING
		ACCEPT M-OPT
		MOVE M-OPT TO M1-OPT.
	IF M-VC = SPACES
		MOVE M1-VC TO M-VC.
	IF M-VPN = SPACES
		MOVE M1-VPN TO M-VPN.
	MOVE 'X' TO M1-CREF.
	MOVE 'SEE' TO M1-CREF-SEE.
	MOVE M-REC-PN-PL TO M1-CREF-PN-PL.
	IF M-REV-CREF = SPACES
		MOVE M1-REC-PN-PL TO M-REV-CREF
		MOVE ZERO TO RET-CODE;
	ELSE, MOVE 1 TO RET-CODE.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	IF RET-CODE = ZERO
		GO TO CROSS-REF-GO.
CREF-REV-LOOP.
	MOVE M-REV-CREF TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		DISPLAY '** ERROR IN REV-CREF CHAINING **'
		GO TO FILE-ERROR-LOCK.
	IF M-REV-CREF NOT = SPACES
		GO TO CREF-REV-LOOP.
	MOVE M1-REC-PN-PL TO M-REV-CREF.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.

CROSS-REF-GO.
	MOVE M1-REC-KEY TO MAST-KEY.
	MOVE WS-MAST-REC TO MAST-REC.
	IF WS-REWRITE-FLAG = 'R'
		PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END;
	ELSE, PERFORM WRITE-MAST-REC THRU WRITE-MAST-REC-END.
	GO TO CROSS-REF-LOOP.
************************************************************
*	ROUTINE TO DELETE RECORDS FROM MASTER FILE
*	CALLED FROM 'PROC'  (D)
************************************************************

DELETE-RECO	PERFORM NEW-ROUTINE.
	DISPLAY 'ENTER PART NUMBER(S) <CR> TO DELETE'.
	DISPLAY 'TYPE <.> WHEN FINISHED'.
DELETE-REC-LOOP.
	PERFORM CLOSE-MAST-OUT THRU CLOSE-MAST-OUT-END.
	DISPLAY 'P/N: ' WITH NO ADVANCING.
	ACCEPT MAST-KEY.
	IF MAST-KEY = '.'
		GO TO PROC.
	PERFORM OPEN-IO-MAST-FILE THRU OPEN-IO-MAST-FILE-END.
	READ MAST-FILE INVALID KEY
		DISPLAY MAST-KEY ' NON-EXISTANT'
		GO TO DELETE-REC-LOOP.
	IF M-FLAG NOT = 1
		GO TO DELETE-REC-PL-BLANK.
	MOVE WS-PL TO M-K-PL.
	READ MAST-FILE INVALID KEY
		DISPLAY MAST-KEY ' NON-EXISTANT'
		GO TO DELETE-REC-LOOP.
DELETE-REC-PL-BLANK.
	IF M-CREF = 'X'
		DISPLAY '* CREF RECORD DELETED *'
		GO TO DELETE-LINK-REV-CREF.
	IF M-REV-CREF NOT = SPACES
		DISPLAY '* THIS IS A CREF TARGET REC - NOT DELETED'
		GO TO DELETE-REC-LOOP.
	IF M-SITES = ZERO
		GO TO DELETE-REC-DOIT.
	DISPLAY '*THIS ITEM STOCKED ON ' M-SITES ' SITES - NOT DELETED'.
	GO TO DELETE-REC-LOOP.
******************************
*	DELETE MASTER (CONT)
******************************

DELETE-LINK-REV-CREF.
	MOVE M-REV-CREF TO M1-REV-CREF.
	MOVE MAST-KEY TO WS-MAST-KEY-SAVE.
	MOVE M-CREF-PN-PL TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		GO TO FWD-CREF-ERROR.
DELETE-LINK-REV-CREF-1.
	IF M-REV-CREF = WS-MAST-PN-PL-SAVE
		GO TO DELETE-LINK-REV-CREF-2;
	ELSE, IF M-REV-CREF = SPACES
		GO TO REV-CREF-ERROR.
	MOVE M-REV-CREF TO M-K-PN-PL.
	READ MAST-FILE INVALID KEY
		GO TO REV-CREF-ERROR.
	GO TO DELETE-LINK-REV-CREF-1.
DELETE-LINK-REV-CREF-2.
	MOVE M1-REV-CREF TO M-REV-CREF.
	PERFORM REWRITE-MAST-REC THRU REWRITE-MAST-REC-END.
	MOVE WS-MAST-KEY-SAVE TO MAST-KEY.

DELETE-REC-DOIT.
	PERFORM DELETE-MAST-REC THRU DELETE-MAST-REC-END.
	GO TO DELETE-REC-LOOP.
************************************************************
*	DISPLAY RECORDS - DISPLAYS A SELECTED RECORD FROM
*		MASTER OR HISTORY FILE AS IT EXISTS
*	CALLED FROM 'PROC'
************************************************************

DISPLAY-RECORDS.
	DISPLAY 'ENTER (P)ARTS-REC, (H)IST-REC, OR (E)ND - '
		WITH NO ADVANCING.
DISPLAY-REC-LOOP.
	ACCEPT WS-SUB-OPT.
	IF WS-SUB-OPT NOT = 'P' AND WS-SUB-OPT NOT = 'H'
		GO TO PROC.
	DISPLAY 'P/N- ' WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE NOT = 1 AND RET-CODE NOT = 4
		DISPLAY M-K-PARTNO ' NOT IN MASTER FILE'
		GO TO DISPLAY-REC-END.
	IF WS-SUB-OPT = 'P'
		DISPLAY MAST-REC
		GO TO DISPLAY-REC-END.
DISPLAY-HIST-REC.
	PERFORM OPEN-HIST-FILE THRU OPEN-HIST-FILE-END.
	MOVE M-K-PN-PL TO H-K-PN-PL.
	DISPLAY 'REC# ' WITH NO ADVANCING.
	ACCEPT H-K-ENTRY-NO.
	READ HIST-FILE INVALID KEY
		DISPLAY HIST-KEY ' NON-EXISTANT'
		GO TO DISPLAY-REC-END.
	DISPLAY HIST-REC.
DISPLAY-REC-END.
	DISPLAY 'TYPE P,H, OR E -' WITH NO ADVANCING.
	GO TO DISPLAY-REC-LOOP.
**********************************************************************
*
*	HISTORY FILE CHECK AND LIST ROUTINES
*	CALLED FROM 'PROC'  (H)
*
**********************************************************************

HISTORY.
	PERFORM NEW-ROUTINE.
	DISPLAY 'USAGE HISTORY ROUTINES'.
HISTORY-CHECK.
	PERFORM OPEN-I-MAST-FILE THRU OPEN-I-MAST-FILE-END.
	PERFORM OPEN-HIST-FILE THRU OPEN-HIST-FILE-END.
HISTORY-CHECK-OPT.
	DISPLAY 'TYPE (E)ACH USAGE, OR (S)UMMARY - ' WITH NO ADVANCING.
	ACCEPT WS-SUB-OPT.
	IF WS-SUB-OPT NOT = 'E' AND WS-SUB-OPT NOT = 'S'
		DISPLAY 'INVALID - RETYPE'
		GO TO HISTORY-CHECK-OPT.
HISTORY-CHECK-LOOP.
	DISPLAY MSG-PN-OR-DOT WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 1
		GO TO HISTORY-CHECK-READ;
	ELSE, IF RET-CODE = 0 OR RET-CODE = 4
		GO TO HISTORY-CHECK-LOOP;
	ELSE, IF RET-CODE = 2
		MOVE '** NOT IN MASTER FILE' TO M-DESC
		GO TO HISTORY-CHECK-READ;
	ELSE, GO TO PROC.
HISTORY-CHECK-READ.
	MOVE M-K-PARTNO TO H-K-PARTNO.
	MOVE ZERO TO H-K-ENTRY-NO.
	READ HIST-FILE INVALID KEY
		GO TO HISTORY-CHECK-NO-USAGE.
	IF H-QUAN = 0
		GO TO HISTORY-CHECK-NO-USAGE.
	MOVE ZERO TO WS-QUAN.
	MOVE H-QUAN TO WS-MAX-EXT.
	DISPLAY MAST-KEY  '    ' M-DESC.
******************************
*	HISTORY-CHECK  (CONT)
******************************

HISTORY-CHECK-ITEM-LOOP.
	ADD 1 TO H-K-ENTRY-NO.
	READ HIST-FILE INVALID KEY
		GO TO HIST-FILE-SEQ-ERROR.
	IF WS-SUB-OPT NOT = 'E'
		GO TO HISTORY-SKIP-EACH.
	MOVE H-DATE TO WS-JULIAN-DATE.
	PERFORM DATE-CONV THRU DATE-CONV-END.
	IF H-XFER = SPACES
	  DISPLAY 'SITE# ' H-SITE-NO ' USED ' H-QUAN ' ON ' WS-DATE-OUT;
	ELSE, DISPLAY 'SITE# ' H-SITE-NO ' SHIPPED ' H-QUAN ' TO SITE# '
-	 H-XFER-SITE ' ON ' WS-DATE-OUT.
HISTORY-SKIP-EACH.
	ADD H-QUAN TO WS-QUAN.
	IF H-K-ENTRY-NO < WS-MAX-EXT
		GO TO HISTORY-CHECK-ITEM-LOOP.
	DIVIDE WS-QUAN BY WS-MAX-EXT GIVING WS-BAL.
	DISPLAY WS-MAX-EXT ' ENTRIES - TOTAL USED = ' WS-QUAN.
	DISPLAY 'AVERAGE ITEMS/USAGE = ' WS-BAL.
HISTORY-CHECK-LAST-LINE.
	DISPLAY '**************'.
	GO TO HISTORY-CHECK-LOOP.
HISTORY-CHECK-NO-USAGE.
	DISPLAY '** NO USAGE FOR ' MAST-KEY.
	GO TO HISTORY-CHECK-LAST-LINE.
************************************************************
*	ROUTINE TO TYPE ALL INFO IN A PARTS RECORD
*	CALLED FROM 'PROC'
************************************************************

TYPE-RECORD.
	PERFORM OPEN-I-MAST-FILE THRU OPEN-I-MAST-FILE-END.
	PERFORM OPEN-HIST-FILE THRU OPEN-HIST-FILE-END.
	PERFORM NEW-ROUTINE.
	DISPLAY 'TYPE PARTS RECORDS'
TYPE-REC-LOOP.
	DISPLAY ' '.
	DISPLAY MSG-PN-OR-DOT WITH NO ADVANCING.
	PERFORM SEARCH-PARTNO THRU SEARCH-PARTNO-END.
	IF RET-CODE = 1
		GO TO TYPE-REC-DOIT.
	IF RET-CODE = 4
		GO TO TYPE-REC-LOOP.
	IF RET-CODE = 2 OR RET-CODE = 0
		DISPLAY MAST-KEY ' NON-EXISTANT'
		GO TO TYPE-REC-LOOP.
	IF RET-CODE = 9
		GO TO PROC.
TYPE-REC-DOIT.
	DISPLAY 'P/N: ' M-PARTNO '  DESC: ' M-DESC.
	DISPLAY 'VC: ' M-VC '   V-P/N: ' M-VPN.
	DISPLAY 'PRICE: ' M-PRICE '    R/R CODE: ' M-RR.
	MOVE M-K-PN-PL TO H-K-PN-PL.
	MOVE ZERO TO H-K-ENTRY-NO.
	READ HIST-FILE INVALID KEY
		GO TO TYPE-REC-NO-USAGE.
	IF H-QUAN = ZERO
		GO TO TYPE-REC-NO-USAGE.
	MOVE H-QUAN TO H-K-ENTRY-NO.
	READ HIST-FILE INVALID KEY
		GO TO HIST-FILE-SEQ-ERROR.
	MOVE H-DATE TO WS-JULIAN-DATE.
	PERFORM DATE-CONV THRU DATE-CONV-END.
	DISPLAY 'LAST USED ON ' WS-DATE-OUT.
	IF M-REV-CREF = SPACES
		GO TO TYPE-REC-LOOP.
	DISPLAY 'POINTED TO BY FOLLOWING PART NUMBERS:'.
TYPE-REC-CREF.
	DISPLAY M-REV-CREF.
	MOVE M-REV-CREF TO MAST-KEY.
	READ MAST-FILE INVALID KEY
		DISPLAY '** REVERSE CROSS-REF ERROR **'
		GO TO TYPE-REC-LOOP.
	IF M-REV-CREF = SPACES
		GO TO TYPE-REC-LOOP;
	ELSE, GO TO TYPE-REC-CREF.

TYPE-REC-NO-USAGE.
	DISPLAY '* NO RECORDED USAGE *'.
	GO TO TYPE-REC-LOOP.
************************************************************
*
*	ROUTINE TO ACCEPT A PART NUMBER AND SEE IF IT EXISTS IN FILE
*
*	RETURN CODES:
*	0	PART NUMBER TYPED = SPACES OR <CR>
*	1	PART NUMBER EXISTS - RECORD IS IN MAST-REC
*	2	PART NUMBER NON-EXISTANT
*	4	CROSS-REFERENCE RECORD
*	9	'.' WAS TYPED AS PART NUMBER
*
************************************************************

SEARCH-PARTNO.
	PERFORM OPEN-I-MAST-FILE THRU OPEN-I-MAST-FILE-END.
	ACCEPT WS-PARTNO.
	IF WS-PARTNO = SPACES
		MOVE 0 TO RET-CODE
		GO TO SEARCH-PARTNO-END.
	IF WS-PARTNO = '.'
		MOVE 9 TO RET-CODE
		GO TO SEARCH-PARTNO-END.
	MOVE WS-PARTNO TO M-K-PARTNO.
	MOVE SPACES TO M-K-PL.
SEARCH-PARTNO-READ.
	READ MAST-FILE INVALID KEY
		MOVE 2 TO RET-CODE
		GO TO SEARCH-PARTNO-END.
	IF M-FLAG NOT = 1
		GO TO SEARCH-PARTNO-CHECK-CREF.
	IF M-K-PL NOT = SPACES
		GO TO FILE-ERROR-LOCK.
	MOVE WS-PL TO M-K-PL.
	GO TO SEARCH-PARTNO-READ.
SEARCH-PARTNO-CHECK-CREF.
	IF M-CREF = 'X'
		DISPLAY 'CREF RECORD -- ' M-DESC
		MOVE 4 TO RET-CODE
		GO TO SEARCH-PARTNO-END.
	MOVE 1 TO RET-CODE.
SEARCH-PARTNO-END. EXIT.
************************************************************
*
*	THE FOLLOWING TWO ROUTINES ACCEPT DATA FOR THE PARTS RECORD
*
************************************************************

ACCEPT-OPT-DESC-VPN-VC.
	DISPLAY 'DESCRIPTION: ' WITH NO ADVANCING.
	ACCEPT M-DESC.
	DISPLAY 'VENDOR P/N: ' WITH NO ADVANCING.
	ACCEPT M-VPN.
	DISPLAY 'VC: ' WITH NO ADVANCING.
	ACCEPT M-VC.
	DISPLAY 'OPTION: ' WITH NO ADVANCING.
	ACCEPT M-OPT.
ACCEPT-OPT-DESC-VPN-VC-END.


GET-RR-CODE.
	DISPLAY 'R/R CODE - ' WITH NO ADVANCING.
	ACCEPT M-RR.
	IF M-RR NOT = 'R' AND M-RR NOT = 'E'
		DISPLAY '* INVALID - VALID CODES ARE:'
		DISPLAY 'R	REPAIRABLE'
		DISPLAY 'E	EXPENDABLE'
		GO TO GET-RR-CODE.
GET-RR-CODE-END. EXIT.

************************************************************
*
*	ROUTINES TO GET A RESPONSE AS INDICATED
*
************************************************************

YES-NO.
	ACCEPT WS-ANS.
	IF WS-ANS = 'Y' MOVE 1 TO RET-CODE;
	ELSE, IF WS-ANS = 'N' MOVE 0 TO RET-CODE;
	ELSE, DISPLAY 'Y OR N ONLY'
		GO TO YES-NO.
YES-NO-END. EXIT.

VERIFY-OK.
	DISPLAY 'OK? ' WITH NO ADVANCING.
	PERFORM YES-NO.
VERIFY-OK-END.
************************************************************
*	ROUTINE TO PRINT ASTICS & A BLANK
*		FOR EACH NEW ROUTINE ENTERED
************************************************************

NEW-ROUTINE.
	DISPLAY MSG-ASTICS.
	IF WS-PL = 'D'
		DISPLAY PL-DEC;
	ELSE, IF WS-PL = 'I'
		DISPLAY PL-IBM;
	ELSE, IF WS-PL = 'X'
		DISPLAY PL-XEROX;
	ELSE, DISPLAY '** PRODUCT LINE NOT SET **'.
	DISPLAY ' '.
NEW-ROUTINE-END.
************************************************************
*	DATE - ROUTINE TO FORMAT 'TODAY' AND COMPUTE JULIAN DATE
*	CALLED FROM FIRST PHASE OF PROCEDURE DIVISION
************************************************************

DATE.
	MOVE TODAY TO WS-TEMP-DATE.
	MOVE WSTM TO WS-MONTH, I.
	MOVE WSTD TO WS-DAY.
	MOVE WSTY TO WS-YEAR.
	MOVE DATE-TBL (I) TO JULIAN-DAY.
	ADD WSTD TO JULIAN-DAY.
	MOVE WS-YEAR-DIGIT-2 TO JULIAN-YEAR.
DATE-END.


******************************
* ROUTINE TO CONV BACK FM JULIAN
* CALLED W/ JULIAN DATE IN WS-JULIAN-DATE
******************************

DATE-CONV.
	IF WS-CONV-DAY > 365
		MOVE '*ERROR*' TO WS-DATE-OUT
		GO TO DATE-CONV-END.
	MOVE 1 TO I.
DATE-CONV-LOOP.
	IF DATE-TBL(I) NOT > WS-CONV-DAY
		ADD 1 TO I
		GO TO DATE-CONV-LOOP.
	SUBTRACT 1 FROM I.
	MOVE I TO WS-MONTH-OUT.
	SUBTRACT DATE-TBL(I) FROM WS-CONV-DAY GIVING WS-DAY-OUT.
	MOVE WS-YEAR-DIGIT-1 TO WS-YEAR-OUT-1.
	MOVE WS-CONV-YEAR TO WS-YEAR-OUT-2.
	MOVE '-' TO WS-D-SEP-1 WS-D-SEP-2.
DATE-CONV-END. EXIT.
**********************************************************************
*
*	FILE OPEN/CLOSE/READ/WRITE ROUTINES
*
**********************************************************************

OPEN-I-MAST-FILE.
	IF WS-MAST-FLAG = 'I' OR WS-MAST-FLAG = 'B'
		GO TO OPEN-I-MAST-FILE-END.
	IF WS-MAST-FLAG NOT = SPACES
		CLOSE MAST-FILE.
	OPEN INPUT MAST-FILE.
	MOVE 'I' TO WS-MAST-FLAG.
OPEN-I-MAST-FILE-END. EXIT.

OPEN-O-MAST-FILE.
	IF WS-MAST-FLAG = 'O' OR WS-MAST-FLAG = 'B'
		GO TO OPEN-O-MAST-FILE-END.
	IF WS-MAST-FLAG NOT = SPACES
		CLOSE MAST-FILE.
	MOVE MAST-REC TO WS-MAST-REC-SAVE.
	OPEN OUTPUT MAST-FILE.
	MOVE WS-MAST-REC-SAVE TO MAST-REC.
	MOVE 'O' TO WS-MAST-FLAG.
OPEN-O-MAST-FILE-END. EXIT.

OPEN-IO-MAST-FILE.
	IF WS-MAST-FLAG = 'B'
		GO TO OPEN-IO-MAST-FILE-END.
	IF WS-MAST-FLAG NOT = SPACES
		CLOSE MAST-FILE.
	MOVE MAST-REC TO WS-MAST-REC-SAVE.
	OPEN I-O MAST-FILE.
	MOVE WS-MAST-REC-SAVE TO MAST-REC.
	MOVE 'B' TO WS-MAST-FLAG.
OPEN-IO-MAST-FILE-END. EXIT.

CLOSE-MAST-OUT.
	IF WS-MAST-FLAG = 'O' OR WS-MAST-FLAG = 'B'
		CLOSE MAST-FILE
		MOVE SPACES TO WS-MAST-FLAG.
CLOSE-MAST-OUT-END. EXIT.

CLOSE-MAST-FILE.
	IF WS-MAST-FLAG NOT = SPACES
		CLOSE MAST-FILE
		MOVE SPACES TO WS-MAST-FLAG.
CLOSE-MAST-FILE-END. EXIT.
******************************
*	FILE OPEN/CLOSE/ETC (CONT)
******************************

OPEN-HIST-FILE.
	IF WS-HIST-FLAG = SPACES
		OPEN INPUT HIST-FILE
		MOVE 'I' TO WS-HIST-FLAG.
OPEN-HIST-FILE-END. EXIT.

CLOSE-HIST-FILE.
	IF WS-HIST-FLAG NOT = SPACES
		CLOSE HIST-FILE
		MOVE SPACES TO WS-HIST-FLAG.
CLOSE-HIST-FILE-END. EXIT.

WRITE-MAST-REC.
	IF WS-MAST-FLAG NOT = 'B' AND WS-MAST-FLAG NOT = 'O'
		PERFORM OPEN-O-MAST-FILE THRU OPEN-O-MAST-FILE-END.
	WRITE MAST-REC INVALID KEY
		GO TO WRITE-ERROR.
WRITE-MAST-REC-END. EXIT.

REWRITE-MAST-REC.
	PERFORM OPEN-IO-MAST-FILE THRU OPEN-IO-MAST-FILE-END.
	REWRITE MAST-REC INVALID KEY
		GO TO REWRITE-ERROR.
REWRITE-MAST-REC-END. EXIT.

DELETE-MAST-REC.
	IF WS-MAST-FLAG = 'B'
		GO TO DELETE-MAST-GO.
	IF WS-MAST-FLAG NOT = SPACES
		CLOSE MAST-FILE.
	OPEN I-O MAST-FILE.
	MOVE 'B' TO WS-MAST-FLAG.
DELETE-MAST-GO.
	DELETE MAST-REC INVALID KEY
		GO TO DELETE-ERROR.
DELETE-MAST-REC-END. EXIT.
************************************************************
*
*	**** E R R O R     R O U T I N E S *****
*	FOLLOWING ARE ROUTINES CALLED WHEN AN INVALID KEY RETURN
*	IS GIVEN ON AN ATTEMPT TO WRITE THE PARTS FILES
*
************************************************************

WRITE-ERROR.
	MOVE 'WRITE' TO W-E-MSG-TYPE.
	GO TO X-WRITE-ERROR.

REWRITE-ERROR.
	MOVE 'REWRITE' TO W-E-MSG-TYPE.
	GO TO X-WRITE-ERROR.

DELETE-ERROR.
	MOVE 'DELETE' TO W-E-MSG-TYPE.
	GO TO X-WRITE-ERROR.

X-WRITE-ERROR.
	DISPLAY WRITE-ERROR-MESSAGE.
X-ERROR-ALL.
	DISPLAY 'MAST-KEY =' MAST-KEY.
	DISPLAY 'MAST-REC:'.
	DISPLAY MAST-REC.
	GO TO FILE-ERROR-LOCK.

HIST-WRITE-ERROR.
	MOVE 'WRITE' TO W-E-MSG-TYPE.
	GO TO H-WRITE-ERROR.

HIST-REWRITE-ERROR.
	MOVE 'REWRITE' TO W-E-MSG-TYPE.
	GO TO H-WRITE-ERROR.

H-WRITE-ERROR.
	DISPLAY 'ERROR ATTEMPTING A ' WITH NO ADVANCING.
	DISPLAY W-E-MSG-TYPE ' TO THE HISTORY FILE'.
H-ERROR-ALL.
	DISPLAY 'HIST-KEY =' HIST-KEY.
	DISPLAY 'HIST-REC =' HIST-REC.
	GO TO FILE-ERROR-LOCK.
HIST-FILE-SEQ-ERROR.
	DISPLAY 'SEQUENCE ERROR IN HISTORY-FILE'.
	GO TO H-ERROR-ALL.
**********************************************************************
*
*	CROSS REFERENCE LINKAGE ERROR ROUTINES
*
**********************************************************************

FWD-CREF-ERROR.
	DISPLAY '** FORWARD CROSS-REFERENCE ERROR **'.
	GO TO CREF-ERROR-ALL.

REV-CREF-ERROR.
	DISPLAY '** REVERSE CROSS-REFERENCE ERROR **'.
CREF-ERROR-ALL.
	DISPLAY 'WS-PARTNO = ' WS-PARTNO '	' WITH NO ADVANCING.
	GO TO X-ERROR-ALL.
**********************************************************************
*
*	** PARTS ACCOUNT LOCK ROUTINE **
*	CALLED WHENEVER FILE LINKAGE ERRORS ARE DETECTED
*	THIS ROUTINE WILL SET THE LOCK BIT FOR ACCT # 00
*	LOCKING OUT ALL LOGINS TO THE INVENTORY ACCOUNT
*
**********************************************************************

FILE-ERROR-LOCK.
	DISPLAY MSG-ASTICS.
	DISPLAY '** FILE ERRORS DETECTED - LOCKING INVENTORY ACCT'.
	OPEN I-O NAME-FILE.
	MOVE ZERO TO N-KEY.
	READ NAME-FILE INVALID KEY
		DISPLAY '* ERROR READING NAME RECORD ZERO *'
		GO TO LOCK-EXIT.
	MOVE 9 TO N-LOCK.
	REWRITE NAME-REC INVALID KEY
		DISPLAY '** ERROR LOCKING INVENTORY ACCOUNT **'.
LOCK-EXIT.
	ENTER MACRO LOGOFF.
   :a2Lc