


                      






                   BLISS CHANGES AND NEW FEATURES

                         Richard K. Johnsson

                            June 20, 1974





                              ABSTRACT

          This   document   contains   a   description   of  the
     differences and new features encountered in the switch from
     the CMU  supported BLISS/10 compiler  to the  DEC supported
     BLISS/10 compiler.
New BLIS10 Documentation                                            i


                          TABLE OF CONTENTS


I     Introduction  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  1

II    BREG No Longer a Register .  .  .  .  .  .  .  .  .  .  .  .  1

III   The LEAVE Construct .  .  .  .  .  .  .  .  .  .  .  .  .  .  1

IV    New BINDing Constructs .  .  .  .  .  .  .  .  .  .  .  .  .  2

V     The IFSKIP Construct   .  .  .  .  .  .  .  .  .  .  .  .  .  2

VI    The REQUIRE Declaration   .  .  .  .  .  .  .  .  .  .  .  .  3

VII   FIX, FLOAT and FNEG .  .  .  .  .  .  .  .  .  .  .  .  .  .  3

VIII  The OFFSET Construct   .  .  .  .  .  .  .  .  .  .  .  .  .  3

IX    SIX12 Support .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  3

X     Special Characters in Identifiers  .  .  .  .  .  .  .  .  .  4

XI    Lower Case Identifiers .  .  .  .  .  .  .  .  .  .  .  .  .  4

XII   Restrictions on Global Names .  .  .  .  .  .  .  .  .  .  .  4

XIII  New Listing Format  .  .  .  .  .  .  .  .  .  .  .  .  .  .  4

XIV   New Format for Warning and Error Messages   .  .  .  .  .  .  4

XV    Version Number Construct  .  .  .  .  .  .  .  .  .  .  .  .  5

XVI   Change of Default Module Name   .  .  .  .  .  .  .  .  .  .  5

XVII  New Reserved Words  .  .  .  .  .  .  .  .  .  .  .  .  .  .  5
New BLIS10 Documentation                                            1


I.  Introduction

     This  document is  intended to  document changes,  new features,
etc.  which  are a  part  of the  new  BLIS10 compiler  at  CMU.  The
compiler   is   essentially   DEC's   version   4(106)   with  slight
modifications to make it compatible with the CMU  environment.  There
are  also  a  few  slight improvements.   The  reader  is  refered to
SYS:BLIS10.DOC which is DEC's documentation of some of  these changes
for complete information.  Items from that file which are of interest
are reproduced here.  Some features present in the CMU compiler which
have not been generally documented before are also presented here.


II.  BREG No Longer a Register

     The runtime register BREG has been changed to a  memory location
in order to free an additional working register.  The memory location
is automatically declared EXTERNAL in the outer block of  all modules
with  the  name ".BREG"  (see  Section X).   The  memory  location is
actually allocated in the  module which contains the  routine prologs
(usually the  one that  declares STACK).  In  order to  maintain some
degree of  compatibility with  older programs (I  can't think  of any
other reason), the default assignments of the other runtime registers
remains the same (i.e. SREG=0, FREG=2, VREG=3).  By  default register
1 is now a working  register.  Programs which use BREG as  a register
(other than for coroutines) should declare

          RESERVE(1)

in the module head and

          BIND BREG=1<0,36>;

in the outer block.  Programs that use BREG for its  intended purpose
may declare

          BIND BREG=?.BREG;

at the outer block or  may use the question mark  notation throughout
the module.

     Note: For compatibility, routines in the Bliss  Library (BLILIB)
will RESERVE register 1.


III.  The LEAVE Construct

     Labels,  the  LABEL  declaration  and  the  LEAVE  construct are
implemented as described in  the BLISS/11 manual.  The syntax  of the
LEAVE construct is:

          LEAVE <label> WITH <expression>

which causes control to  leave the labeled expression.   The optional
WITH part gives the expression the value specified.  The default WITH
value is zero.
New BLIS10 Documentation                                            2


     Note:  The  LEAVE  construct  makes  the  old   EXIT  constructs
obsolete, however the EXIT  constructs will continue to be  valid for
the forseeable  future.  Someday  all EXITs  except EXITLOOP  will be
removed from the language (as in Bliss/11).


IV.  New BINDing Constructs

     GLOBAL BIND  is now implemented.   WARNING: the  compiler cannot
tell the difference between EXTERNALs that refer to storage locations
and  EXTERNALs that  will be  fulfilled by  a GLOBAL  BIND.   I.e. by
default EXTERNALs that refer to GLOBAL BINDS will have <0,36> pointer
specifications.  A  GLOBAL BIND  may not  have more  than 18  bits of
precision (beware of negative numbers).

     NAMES and INDEXES are constructs for use in PLIT specifications.
The following are equivalent:

          BIND X=PLIT(
                             0,
                             27,
                  GORP NAMES 36,
                THUD INDEXES 21,
                             "A");

          and

          BIND X=PLIT(0,27,36,21,"A");
          BIND GORP=X[2], THUD=3;

Either NAMES or INDEXES may  be preceeded by GLOBALLY to  produce the
corresponding GLOBAL BIND.

     WARNING:  At  present  GLOBAL  BINDs  must  be  to  compile time
constants.  There is no known  plan to change this.  GLOBAL  BINDs to
PLITs  may be  accomplished using  GLOBALLY NAMES.   GLOBAL  BINDs to
other symbols should not be necessary.

     Note: In  order to  make DDT debugging  easier, GLOBAL  BIND and
GLOBALLY INDEXES values which are  LSS 16 will not be  recognized for
typeout by DDT (see DDT documentation of $K).


V.  The IFSKIP Construct

     Syntax: IFSKIP e1 THEN e2 ELSE e3

     Semantics:  If  the  evaluation  of  e1  causes  a  skip,  e2 is
evaluated; otherwise e3 is evaluated.  e1 may include a parameterless
routine call which has a skip return.  A typical use is
New BLIS10 Documentation                                            3


          BEGIN
          MACHOP LOOKUP = #76;
           ...
          IFSKIP LOOKUP(CHAN,SPEC)
              THEN OK
              ELSE ERROR;
           ...
          END


VI.  The REQUIRE Declaration

     Informally the syntax is "REQUIRE filespec;" where filespec is a
standard  file  specification  of  the  form  dev:file.ext[ppn].  CMU
userids  may  be  used.   Nothing  should  appear  on  the  same line
following the ";" which terminates the declaration.  The semantics is
that  the text  of  the named  file is  read  as if  it  replaced the
declaration in the source.  REQUIREs may be nested to six  levels (if
you can think of a use for that).

     WARNING:  Dev,  file  and  ext in  the  filespec  must  parse as
identifiers (i.e.  must begin  with a  letter).  Strange  results may
occur if any of these  identifiers has been previously declared  by a
BIND (other declarations not affected).


VII.  FIX, FLOAT and FNEG

     FIX, FLOAT and FNEG  are unary operators (not  functions!) which
do the obvious  things to the bit  pattern presented as  the operand.
Because of the representation used in the PDP-10, FNEG is not usually
needed in simple expressions ("-" will work just as well and generate
better code).  FIX and  FLOAT have precedence 5, FNEG  has precedence
7.


VIII.  The OFFSET Construct

     The expression OFFSET(X) where X is a local or  formal evaluates
(at compile time) to the offset of X from FREG.  Locals have positive
offsets,  formals have  negative offsets.   This construct  should be
particularly useful to POOMAS users.


IX.  SIX12 Support

     The /D  command string  switch or the  DEBUG declaration  in the
module head will generate  linkages to a debugging module  (see SIX12
documentation).   The routine  named in  a TIMER  declaration  of the
module head is called before and after the main body of the code with
parameters  1^35  and  #377777^18  respectively.   Individual routine
linkages are via UUO 037.   The effective address of each UUO  is the
routine address.  The AC field is even for routine entry and  odd for
routine exit.  If no TIMER declaration is present in the main module,
TIMER=EXTERNAL(SIX12) is assumed.
New BLIS10 Documentation                                            4


X.  Special Characters in Identifiers

     The three special characters "%", "$", and "." are now  legal as
characters within an identifier when that identifier is  preceeded by
a question mark.  Therefore the following is now legal:

          EXTERNAL ?.JBSYM;  ...  SYMADR _ .?.JBSYM;  ...



XI.  Lower Case Identifiers

     Upper  and  lower   case  alphabetics  are  now   equivalent  in
identifiers.   Lower  case  characters are  converted  to  upper case
before being inserted in the symbol table.  This change has no effect
on lower case characters in string constants.


XII.  Restrictions on Global Names

     Names declared as  globals (i.e. GLOBAL, GLOBAL  ROUTINE, GLOBAL
BIND,  GLOBALLY  INDEXES,   GLOBALLY  NAMES)  will  be   checked  for
uniqueness to six characters with all other names declared  global in
the  same module.   Other  names are  checked for  uniqueness  to ten
characters.


XIII.  New Listing Format

     A  listing file  produced with  the /M  switch or  MLIST  in the
module head  is in a  form which is  suitable for input  to MACRO-10.
Loading the REL file produced  directly by BLISS will produce  a core
image identical  to that  produced by  loading the  corresponding REL
file produced from the listing by MACRO-10 exclusive of  symbol table
information.


XIV.  New Format for Warning and Error Messages

     In  accordance  with  DEC  standard,  warning  messages  are now
preceeded by "%"  and error messages by  "?".  Error messages  are of
the form  "xBLSabr message"  where "x"  is either  "%" or  "?", "BLS"
identifies   the  BLISS   compiler,  "abr"   is  a   three  character
abbreviation  of the  error condition,  and "message"  is a  one line
English description  of the  condition.  The  message portion  of the
output  may be  suppressed by  using the  /-A switch  in  the command
string or the declaration NOENGLISH in the module head or  a SWITCHES
declaration.  (The opposites are /A and ENGLISH.)
New BLIS10 Documentation                                            5


XV.  Version Number Construct

     A version  number construct  has been added  to the  module head
syntax.  The form is:

          MODULE name(VERSION=<vno>,...)=

          where:

          <vno>    ::=  <major> [<minor>] ( <edit> ) [-<who>]
          <major>  ::=  <octal> in range 0-777
          <minor>  ::=  letter (A-Z)
          <edit>   ::=  <octal> in range 0-777777
          <who>    ::=  oit

The square brackets are not part of the syntax but indicate  that the
<minor> and -<who> may be omitted.  The default values are null and 0
respectively.

     A standard use of the VERSION construct might look like

          MODULE DRIVER(STACK,VERSION=4A(106)-2)=

which will load the standard format version number into  location 137
(.JBVER).


XVI.  Change of Default Module Name

     A module  with no  module head will  be compiled  as if  it were
preceeded by  "MODULE MAIN=".  Formerly  the default module  name was
the name  of the  REL file  produced.  WARNING:  loading two  or more
modules  with  the default  module  name together  will  cause loader
errors (multiply defined globals).


XVII.  New Reserved Words

     The new reserved words are:

          GLOBALLY
          NAMES
          INDEXES
          OFFSET
          IFSKIP
          REQUIRE
  