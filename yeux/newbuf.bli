module vuebuf = begin

external
	scrmod, muline,

	open, close,
	lookup, enter, rename,
	abortC,
	writeloss, writestring,
	wrtsix, wrtnum, wrtoct,
	getstr;

! Hmmmm.

global autoinc, autotime, autowrit;	! Auto checkpoint information
global killer, laskil, lasmov;		! Kill flags
global kbfbeg, kbfptr, kbfsiz, kbflen;	! Kill buffer information

Bind Errtab = plit (
	plit asciz 'File Not Found',			! ERFNF%
	plit asciz 'Incorrect PPN',			! ERIPP%
	plit asciz 'Protection Failure',		! ERPRT%
	plit asciz 'File Being Modified',		! ERFBM%
	plit asciz 'Already Existing File',		! ERAEF%
	plit asciz 'Illegal Sequence of UUOs',		! ERISU%
	plit asciz 'Transmission Error',		! ERTRN%
	plit asciz 'Not a Saved File',			! ERNSF%
	plit asciz 'Not Enough Core',			! ERNEC%
	plit asciz 'Device Not Available',		! ERDNA%
	plit asciz 'No such Device',			! ERNSD%
	plit asciz 'Illegal Monitor Call',		! ERILU%
	plit asciz 'No Room or Quota Exceeded',		! ERNRM%
!	plit asciz 'Write Lock Error',			! ERWLK%
!	plit asciz 'Not Enough Monitor School',		! ERNET%
!	plit asciz 'Partial Allocation Only',		! ERPOA%
!	plit asciz 'Block not Free',			! ERBNF%
!	plit asciz 'Cannot Supercede Directory',	! ERCSD%
!	plit asciz 'Cannot Rename a NON-empty SFD',	! ERDNE%
!	plit asciz 'Sub-Directory Not Found',		! ERSNF%
!	plit asciz 'Search List Empty',			! ERSLE%
!	plit asciz 'Cannot Create SFD too Deep',	! ERLVL%
!	plit asciz 'No Create or Enter',		! ERNCE%
!	plit asciz 'Segment Not on Swapping space',	! ERSNS%
!	plit asciz 'File Cannot be Updated',		! ERFCU%
!	plit asciz 'Low Segment Overlaps High Segment',	! ERLOH%
!	plit asciz 'Not Logged In',			! ERNLI%
!	plit asciz 'File has Outstanding Locks set',	! ERENQ%
!	plit asciz 'Bad EXE File Directory',		! ERBED%
!	plit asciz 'Bad Extension for an EXE File',	! ERBEE%
!	plit asciz 'EXE Directory Too Big',		! ERDTB%
!	plit asciz 'Network Capacity Exceeded',		! ERENC%
!	plit asciz 'Task Not Available',		! ERTNA%
!	plit asciz 'Unknown Network Node'		! ERUNN%
		);
Bind MaxErr = #14;


Global Routine ErrFile( prompt, err ) = begin
    ToPrompt(.prompt);
    If .err<0,18> leq Maxerr
     then Writestring(.Errtab[.err<0,18>])
     else WrtOct(.err<0,18>)
end;

global routine bufnam(request) = begin
    external getjob;
    local job,chr;

    routine Hexdigit(number) =		! Convert number to Sixbit
	if .number lss 10		! if < 10, add 0 else add A
	 then return .number+#20	!   .n + sixbit "0"
	 else return .number+#27;	!   .n + sixbit "A"-10.

    Job_ getjob();			! Get the frame/process No.
    request<6,6>_ Hexdigit(.Job<4,4>);	! 5th char_ first part
    request<0,6>_ Hexdigit(.Job<0,4>);	! 6th char_ 2nd part
    Return(.request)			! return "request"+job
end;


global routine existsbuf (buf) = begin	! TRUE IF BUFFER EXISTS
    incr i from 0 to MaxBufs-1		! for each buffer
     do if .buf eql .allbufs[.i]	!  if name is in the list
	 then return 1;			!   then TRUE
    return 0				! else not there, FALSE
end;


global routine gbnum (buf) =		! BUFFER NUMBER, buf must exist
    incr i from 0 to MaxBufs-1		! for each buffer
     do if .allbufs[.i] eql .buf	!  if name is in the list
	 then return .i;		!   then return list index

global routine gbmod (buf) =		! BUFFER MODIFIED?
    .allmod[ gbnum(.buf) ];

global routine bufunm =			! UNMODIFY BUFFER
    allmod[ .curbuf ]_ 0;		! clear flag for current buffer

!
!  Kill buffer related commands::
!

global routine addkbf = begin		! ADD to SIZE of KILL BUFFER
    movbuf();				! move the buffer forward 1 page
    kbfsiz_ .kbfsiz + 512*5		! increment size to match
end;


global routine appkbf =			! APPEND TO KILL BUFFER
    killer_1;				! Flag last command as a kill.


global routine clrkbf = begin		! CLEAR KILL BUFFER
    kbflen_0;				! Size of KILL'd Text = 0
    kbfptr_(.kbfbeg)<36,7>		! Point to beginning of buffer
end;


global routine inskbf = begin		! INSERT KILL BUFFER
    kbfptr_ (.kbfbeg)<36,7>;		! Get pointer to KILL BUFFER
    incr i from 1 to .kbflen		! For each char until length
     do insertchar(scani(kbfptr))	!  do insert character
end;

global routine bufini = begin		! initialize buffers

!	Buf_ GetChn();
!	Filescan( plit asciz'DSK:###VUE.TMP', VueTmp );
!	Open( Buf, VueTmp );
!	If not Lookup( Buf, VueTmp )
!	 then begin
!	    Enter( Buf, VueTmp );
!	    Create.Buffer.File;
!	    Close( Buf, 0 );
!	    Open( Buf, VueTmp );
!	    Lookup( Buf, VueTmp );
!	 end;
!	Map( Buffer.Directory );
!	Map( Echo.Buffer );
!	Map( Status.Buffer );
!	Map( Divider.Buffer );
!	Map( Kill.Buffer );
!	Map( Scratch.Buffer );
!	Set Current.buffer = Scratch.Buffer;


    kbfbeg_ coresize(512);		! Get one page for kill buffer
    kbfsiz_ 512*5;			! Set initial size of buffer
    kbfptr_ (.kbfbeg)<36,7>;		! Set pointer	! clrkbf()
    kbflen_ 0;				! Clear length	! ...

    p_ coresize(512);			! Get some memory space.
    lowend_ 1;				! Begin at the beginning.
    lowptr_ (.p)<36,7>;			! Setup ildb pointer for low-buf

    hbot_ 2500-GapSize;			! Set the bottom/end of
    hend_ 2500-GapSize;			!   data after the gap.
    hptr_(.p+((2500-GapSize)/5))<36,7>;	! Setup ildb pointer for high-buf
    incp(hptr)				!   point at first char.
end;

global routine AddBuf (buf) = begin
    incr i from 0 to MaxBufs-1
     do begin
	if .buf eql .allbufs[.i]
	 then return 0;
	if .allbufs[.i] eql 0
	 then begin
	    allbufs[.i]_.buf;
	    return 1
	 end
     end;
    if .allbufs[MaxBufs-1] neq 0
     then begin
	ToPrompt(plit asciz'Too many buffers');
	decr i from MaxBufs-2 to 0
	 do allbufs[.i+1]_.allbufs[.i]
     end;
    allbufs[0]_.buf;
    return 1
end;


global routine LstBuf = begin
    ToPrompt(plit asciz'');
    incr i from 0 to MaxBufs-1
     do begin
	if .allbufs[.i] eql 0
	 then exitcompound;
	if .allmod[.i] neq 0
	 then writeloss("*");
	WrtSix(allbufs[.i]);
	Writeloss("(");
	WrtNum(.i);
	Writestring(plit asciz ') ')
     end
end;

Routine setupbuffer(Prompt,Block,Name,Ext,User) = Begin
    local stringspace [Maxbufs], Pnt;

    muline_1;
    scrmod_1;
    flush_0;
    If .Name neq 0
     then (.Block[BlkNam]) _ .Name;
    If .Ext  neq 0
     then (.Block[BlkExt]) _ .Ext;
    (.Block[BlkPpn]) _ .User;
    ToPrompt(.Prompt);
    Pnt_(Stringspace)<36,7>;
    getstr(.Pnt);
    if not (filescan (Pnt,.Block))
     then return 0;
    return (not .flush)
end;

global routine combuf (Auto) = begin	! READ/WRITE BUFFERS
    local new,chan;

    if .Auto eql 0			! if not "old" or "auto"
     then new_ AddBuf(.(bfblk1+1));	!  then check for new buffer
    if .Auto eql 2			! if an old buffer read
     then (Addbuf(.(bfblk1+1));new_ 0);	!  then add buffer, mark "old"

	! New if creating a new buffer.
	! Auto if doing an autosave.

    if .Auto neq 2 or			! if not a .....
       .(bfblk1+1) neq .(bfblk2+1)	!    or buffer name differs
     then begin				!  then
	bufblk[BlkChn]_ getchn();	!    open channel
	open(.bufblk[BlkChn], bufblk);	!    attempt to enter file
	if not enter(.bufblk[BlkChn], bufblk)
	 then begin			!    if problems, complain
	    ErrFile(plit asciz'Buffer enter error: ',.(bufblk[BlkExt]));
	    close(.bufblk[BlkChn]);	!       close channel
	    return 0			!       and return
	 end;
	pcopy_ .p;			! make a copy of p (begin buf)
	dmpout(DmpBfr,#200);		! dump the status record.
	dmpout(.p,.hend/5+1);		! dump the main buffer.
	close(.bufblk[BlkChn]);		! close the channel
	if .Auto eql 1			! if an autosave call
	 then return			!  then we are done.
     end;
    lowend_1;				! make believe we've got
    hbot_.hend;				! a completely "new" buffer
    bufblk[BlkChn]_ getchn();
    bufblk[BlkDev]_ .defdsk;		! build a "bliss" file block
    bufblk[BlkNam]_ .bfblk1[Blknam];
    bufblk[BlkExt]_ sixbit 'vue';	! dev: file .vue [,]
    open (.bufblk[BlkChn],bufblk);	! open the device ('dsk')

    ! now we lookup file and init the buffer if it wasn't there
    ! previously or if the thing there is OLD.

    curbuf_gbnum(.(bfblk1+1));		! get the buffer number.

    if .new or (not lookup (2,bfblk1+1))
     then begin				! "new" or can't find "old"
	filblk_.defdsk;			! dev_  'dsk'
	(filblk+1)_sixbit 'delete';	! file_ 'delete'
	(filblk+2)_0;			! ext_  ''
	ppn_0;				! ppn_  [,]
	close(2);			! done... so return
	return				! bye-bye
     end;
    dmpin(2,DmpBfr,#200);		! read in the header
    while .(#121) lss .p+.hend/5+1	! while .jbff < memory needed
     do coresize(512);			!  get more memory
    dmpin(2,.p,.hend/5+1);		! read in the buffer
    close (2)				! and close the file
end;

global routine SelBuf = begin
    If not Setupbuffer(plit asciz'Select Buffer: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn()  )
	then return abortC();
    ToPrompt(plit asciz'');
    combuf(0)
end;

global routine UCtrlo = begin
    If not Setupbuffer(plit asciz'Buffer Name: ', Bfblk1,
		Bufnam(sixbit 'main'), Sixbit 'vue', Getppn() )
	then return abortC();
    combuf(2)
end;


global routine ctrlxi = begin
    local lfilblk[8];
    allmod[.curbuf]_1;
    If not Setupbuffer(plit asciz'Insert File: ', lfilblk, 0, 0, 0)
	then return abortC();
    open (2,0,.lfilblk,dskbfh<0,0>);
    buffers (2,1,1,dskbuf);		! get a disk buffer formatted.
    if lookup (2,lfilblk+1)
     then munchi()
     else ErrFile(plit asciz'File error - ',.(lfilblk+2));
    close (2)
end;

Global Routine Filbuf( prompt ) = Begin
    lowptr_ (.p+1+gapsize/5)<36,7>;	! Begin at the position
    lowend_ 1+5+gapsize;		!  just after the gap.
    hend_ 1+5+gapsize;			! Set the end of the buffer
    hbot_ 1+5+gapsize;			!  to the end of the gap.
    ppn_.(filblk+4);			! Current ppn
    open (2,0,.filblk,dskbfh<0,0>);	! Current file block
    buffers (2,1,1,dskbuf);		! ..get a formatted disk buffer.
    if lookup (2,filblk+1)		! if file exists,
     then munchi()			!  then read it into memory
     else ErrFile(.prompt,.(filblk+2));	!  else complain bitterly.
    close (2);				! Finished with input file.
    hend_ .lowend;			! Set the end of the buffer.
    lowend_1;				! Reset the counts and pointers
    lowptr_ (.p)<36,7>;			!  for the beginning of the
    hbot_1+5+gapsize;			!  buffer, and the first
    hptr_ (.p+1+gapsize/5)<29,7>;	!  position after the gap.
    allmod[.curbuf]_0;			! Clear modified flag.
    relcore()				! Release extra core
end;


global routine ctrlxr = begin
    If not Setupbuffer(plit asciz'Read File: ', Filblk, 0, 0, 0)
	then return abortC();
    Filbuf(plit asciz'Read ');
end;

global routine ctrlxv = begin
    local device,ext,tmpblk[8],existed;

    If not Setupbuffer(plit asciz'Visit File: ', Tmpblk, 0, 0, 0)
	then return abortC();
    existed_existsbuf(.(tmpblk+1));	! Does .tmpblk buffer exist?
    ToPrompt(plit asciz'');		! Clear comment line
    bfblk1_.defdsk;
    (bfblk1+1)_.(tmpblk+1);
    (bfblk1+2)_sixbit 'vue';
    (bfblk1+3)_0;
    (bfblk1+4)_getppn();
    combuf(0);
    if not .existed
     then begin
	filblk_.tmpblk;
	(filblk+1)_.(tmpblk+1);
	(filblk+2)_.(tmpblk+2);
	(filblk+3)_.(tmpblk+3);
	(filblk+4)_.(tmpblk+4);
	(filblk+6)_.(tmpblk+6);
	(filblk+7)_.(tmpblk+7);
	Filbuf(plit asciz'Visit ')
     end
end;
global routine autoloss = begin
    local tp;

    if .autoinc eql 0			! autosave mode ?
     then return;
    if .allmod[.curbuf] eql 0		! anything to save ?
     then return;
    autotime_.autotime+1;		! increment timer.
    if .autotime lss .autowrit+.autoinc	! Time yet?
     then return;
    autowrit_.autotime;			! bump counter level
    ToPrompt(plit asciz 'Starting...');	! going ... going ..
    combuf(1);				! auto-save buffer
    writestring(plit asciz 'Saved')	! gone.
end;

global routine cclstuff = begin
    register foo;

    if dotmpcor(sixbit 'EDT',2,xbuffer,30) lss 0
     then dotmpcor(sixbit 'EDS',2,xbuffer,30);

    (filblk+4)_ 0;			! default to our ppn.
    filblk_ .defdsk;			! setup dev_ 'dsk'
    tp_ xbuffer<29,7>;			! pointer into buffer
    if not (filescan (tp,filblk))	! If file-string is bad
     then return abortC();		!  then abort
    filbuf(plit asciz'Edit ');		! Try to get file
    muline_ 1;				! Mark multi-line change
    scrmod_ 1				! Mark screen modified
end;

global routine cclmultix( xeflag ) = begin
    machop jrst = #254;
    register foo;
    local ep;

    incp(tp);
    ep_.tp; 
    while 1
     do begin
	if scani(ep) eql "!"
	 then begin
	    replacen(ep,"?M");	!bash ! to ?m
	    exitloop
	 end;
	if scann(ep) eql 0
	 then if .xeflag
	       then cucl()
	       else quit()
     end;
    filblk_0;
    (filblk+1)_0;
    (filblk+2)_0;
    (filblk+3)_0;
    (filblk+4)_0;
    (filblk+5)_0;
    if not (filescan (tp,filblk))
     then return abortC();
    if .filblk eql 0
     then filblk_ sixbit 'dsk';
    if .(filblk+2) eql sixbit'low'
     then (filblk+2)_0;			! bug in get.shr!
    foo_filblk<0,0>;
    foo_.foo + 1 ^ 18;
    calli (foo,#35);			! Run UUO ???
    jrst(4,0)
end;

routine commonwrite = begin
    local file, ext, prot;		! a few temps

    open (2,0,.filblk,dskbfh<0,0>^18);	! open channel for output
    file_ .(filblk+1);			! copy filename
    ext_ .(filblk+2)<18,18>;		!  and extension
    prot_ 0;				! initially 0
    (filblk+2)_ sixbit 'bak';		! set with bak
    if lookup (2,filblk+1)		! if "filename.bak" exists
     then begin				!  then
	(filblk+1)_ 0;			!    try to delete it.
	if not rename (2,filblk+1)
	 then begin
	    close(2);
	    return ErrFile(plit asciz'Rename failed: ',.(filblk+2))
	 end
     end;
    (filblk+1)_ .file;			! restore filename
    (filblk+2)_ .ext^18;		!   and extension
    (filblk+4)_ .ppn;			!   and ppn
    if lookup (2,filblk+1)		! if an "old" file exists
     then begin				!  then rename it to .bak
	(filblk+2)<18,18>_ sixbit 'bak'^(-18);
	prot_ .(filblk+3)<27,9>;	!    remember the protection
	if not rename (2,filblk+1)
	 then begin
	    close(2);
	    return ErrFile(plit asciz'Rename failed: ',.(filblk+2))
	 end
     end;
    buffers (2,1,0,dskbuf);		! setup output buffer
    (filblk+2)_ .ext^18;		! restore correct extension
    (filblk+3)_ 0;			! clear prot-mode-date-time
    (filblk+4)_ .ppn;			! use last ppn.
    if not enter (2,filblk+1)		! attempt to create file
     then begin
	close(2);
	return ErrFile(plit asciz'Enter failed: ',.(filblk+2))
    end;
    if not muncho (.lowend-1,(.p)<36,7>) or		% write low half? %
       not muncho (.hend-.hbot, (.p+(.hbot-2)/5)	% write high half? %
		    <29-7*(.hbot-2-5*((.hbot-2)/5)),7>)
     then begin
	close(2);
	return errstr(plit asciz'Write error, file NOT saved.')
     end
     else writestring(plit asciz'File written.');
    close(2);				! close file (also does release)
    open (2,0,.filblk,0);		! open channel (again) no buffers
    lookup (2,filblk+1);		! lookup file for rename
    (filblk+3)<27,9>_ .prot;		! change protection
    (filblk+4)_ .ppn;			! reset ppn
    rename (2,filblk+1);		! rename (setting protection)
    allmod[.curbuf]_0;			! clear buffer modified flag
    return 1				! done.
end;

global routine ctrlxw = begin
    If not SetupBuffer(plit asciz 'Write File: ', Filblk, 0, 0, 0)
	then return abortC();
    ppn_.(filblk+4);
    commonwrite()
end;

routine finishbuffer = if .allmod[.curbuf] eql 0 then
    ToPrompt(plit asciz 'No changes made.')
else begin
    combuf(1);  close (2);
    ToPrompt(plit asciz 'Writing buffer...');
    flubfr();
    return commonwrite()
end;

routine exitbuffer( xeflag ) = begin
    If not finishbuffer() then return Writestring(plit asciz 'Error!');
    ttyzap();
    if .cclflag neq 0 then cclmultix( .xeflag )
	    else if .xeflag then cucl() else quit()
end;

global routine ctrlxs = finishbuffer();
global routine ctrlxe = exitbuffer( 1 );
global routine ctrlxf = exitbuffer( 0 );


end eludom
    