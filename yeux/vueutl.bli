module vueutl = begin

!
!  This module contains mostly utility routines, that is those
!  routines which are not dedicated to a single function and tend
!  to be used by many parts of the editor.
!

!
!  Variables defined elsewhere::
!
external

	p, lowend, lowptr,		! buffer address, count, pointer
	hbot, hend, hptr,		! buffer bottom, top, pointer
	mark,				! location of the mark
	percnt,				! percent of the way into buffer
	curline,			! the current line on the screen
	ocline,				! copy of old curline
	physlin, physpos,		! physical line, position on screen
	curbuf,				! current buffer
	bfrpag, bfrlin,			! page, line in the current buffer
	kbfsiz, kbflen, kbfptr,		! kill buffer size, length, pointer
	killer, laskil, lasmov,		! kill flag, last-kill, last-move

	EscValue,			! escape value
	MetaPrefix, XPrefix,		! meta prefix, C-X prefix value
	DelValue,			! delete value
	AbortValue,			! control-G (command abort) value

	Vuetyp, Modblk, Submod,		! vue type, mode and submode
	Ttype, Ttytype,			! terminal type number and name

	indent, iudent,			! left,right margins (0,72)
	indend,				! indenting flag
	spaces,				! flag for spaces rather than tabs
	crwnin,				! flag for indent crown (JUSTIFY)
	tabwidth, tabsize, tabstops,	! indentation width, tab width, etc.
	sosmod,				! flag for page mode
	bsback,				! flag for counting backspaces as -1
	statusline,			! flag for displaying status line
	silent,				! flag for output to screen

	modpos,				! text window size
	spacect,			! ? space count
	commentpos,			! comment character position
	autoinc, autotime,		! variables for auto save
	autowrit, autoloss,		!  and checkpoint facility

	nowait,				! flag for terminal wait (readch)
	scrmod,				! screen modified flag
	muline,				! multi-line change flag
	cmdlvl,				! command level count
	newcount,			! macro-character needed flag
	allmod,				! buffer modified flag
	defdsk,				! definition of "dsk"
	ppn,				! user id

	comchar,			! actual command character
	repeat,				! command repeat count
	flush,				! input flush flag
	scrsze, maxss,			! screen size, max screen size
	distbl;				! dispatch table pointer

!
!  The following routines are declared elsewhere::
!
external

	getstr, filescan,		! get a string, filespec
	jsttype,			! get justification type 0-6
	redisp;				! main redisply routine

!
!  The following routines are in module VUEBUF
!
external

	appkbf,				! append to kill buffer
	clrkbf,				! clear kill buffer
	inskbf,				! insert kill buffer
	addkbf;				! add to size of kill buffer

!
!  The following routines are in module VUEMAN
!
external
	zapmac;

!
!  The following routines are in module VUECMD
!
external
	beglin, endlin,			! beginning of line, end of line
	begtxt, endtxt,			! beginning of text, end of text
	SelfI,				! self-insertion command
	excmrk;				! exchange mark and point

!
!  The following routines are in module CURSOR
!
external

	Goxy,				! position cursor on screen
	Clearscreen,			! clear entire screen
	ClrEos,				! clear to end of screen
	ClearLine;			! clear to end of line


!
!  The following routines are in module VIEW
!
external
	Readch, Readcc,			! read a character, a command
	TtyIdle,			! true if nothing in input buffer
	WrtNum,				! write a number as a string
	Writeloss,			! write a possibly funny character
	Writestring, PutString,		! write a string, put a string
	ToPrompt,			! print a message in prompt area
	ToStatus, FromStatus,		! point to and reset status pointer
	flubfr,				! flush the output buffer

	moveforward,			! move forward in the buffer
	moveback,			! move backward in the buffer
	eolBreak, eolType,		! test character (eol)
	whtBreak, fmtBreak,		! test character (wht, fmt)
	pbreak, blankline,		! test for par-break/blank-line
	getchxr,			! get character from the buffer
	updatecursor,			! calculate line position + char

	getppn, getaun,			! get ppn and aun from monitor
	coresize, relcore, corecheck;	! perform memory manipulations


Global routine MakBox( flag, str, num ) = begin

!
!  Flag::
!    if  negative then close the box
!    if  -2 close the box and "fake" a pause
!    if  -1 close the box and return
!    if   0 then print only the string pointed to by Str
!    if   1 then print both the string "str" and the number "num"
!
!  Str::
!    a pointer to an asciz string, usually (plit asciz 'text')
!
!  Num::
!    an integer value, printed if "flag" is > 0
!
!  Internal data::
!
own
	InTheBox,			! Flag that we're inside the box
	BoxIndex;			! Use this as box-line index

bind
	BoxTop = plit asciz'+---------------------------------------+',
	BoxSize  =  14,			! how many lines in the box
	StartRow =  2,			! row to put initial boxtop
	StartCol =  12,			! col to put initial "|"
	TextCol  =  StartCol + 4,	! col to put the text
	ResultCol = StartCol + 28,	! col to put "optional" number
	StopCol  =  StartCol + 40;	! col to put final "|"


    if .flag geq 0 and not .InTheBox	! if first-time
     then begin
	InTheBox_ 1;			! mark the box in-use
	BoxIndex_ 1;			! set the initial line
	ClearScreen();			! clear the screen
	Goxy(startcol,.BoxIndex+startrow);
	Writestring( BoxTop )		! draw a boxtop and
     end;				!    fall through

    if .InTheBox			! "if" in the box
     then begin
	if .flag eql -1			!  if this is the end
	 then begin
	    If .BoxIndex eql 1		!   unless nothing done
	     then return -1;		!    return
	    InTheBox_ 0;		!   else mark the box un-used
	    Goxy(startcol,.BoxIndex+startrow+1);
	    Writestring( BoxTop );	!    draw the bottom line
	    ClrEos();			!    clear to end of screen
	    Return -1			!    and return
	 end;

	if .flag geq 0			! if not closing box
	 then begin			!  then print a line
	    BoxIndex_ .BoxIndex + 1;	!    bump the line pointer
	    Goxy(startcol,.BoxIndex+startrow);
	    Writeloss("|");		!    print the initial "|"
	    ClearLine();		!    clear the rest of the line
	    Goxy(textcol,.BoxIndex+startrow);
	    PutString(.str);		!    print the text

	    If .flag			!    check for a number
	     then begin			!    if so, then position
		Goxy(resultcol,.BoxIndex+startrow);
		WrtNum(.num)		!      and print the number
	     end;			!    ...continue...

	    Goxy(stopcol,.BoxIndex+startrow);
	    Writeloss("|")		!    and finish the line
	 end;

	If .BoxIndex gtr BoxSize or	! check for box overflow
	   .flag eql -2			!   or a "fake" pause
	 then begin			! if so, then
	    Register Bx,Bq;
	    If .BoxIndex eql 1		! as long something was done
	     then return;		!  then continue, otherwise return
	    Bx_ .BoxIndex+1+startrow;	!  calculate distance
	    BoxIndex_ 1;		!  reset the index to top
	    Goxy(startcol,.Bx);
	    Writestring( BoxTop );	!  paint the bottom line
	    If .flag eql -2
	     then ClrEos();		!  and remove garbage

	    Goxy(startcol,.Bx+2);
	    Writestring( plit asciz'-- Type a space to continue --' );
	    Bq_ (readch() eql " ");	!  and wait for a response
	    Goxy(startcol,.Bx+2);	!  clean-up by
	    ClrEos();			!  erasing the "--type--" message
	    return .Bq
	 end
	 else return 1			! return true if all went ok

     end;
    return -1				! else return -1 (we're done)
end;

Global routine WrtSix (word) = Begin
    local chr,tp;

    tp_(.word)<36,6>;
    Incr i from 1 to 6 do begin
	chr_scani(tp);
	If .chr neq 0 then writeloss(.chr+#40)
    end
end;

global routine killforward(flag)  = begin local ch;
    if .hbot eql .hend			! if we don't have anything
     then return zapmac();		!  past pointer, then pop return
    ch_ scann(hptr);			! copy character
    incp(hptr);				! then position to next
    if .flag				! if we-are-killing
     then begin				!  then
	if .kbflen geq .kbfsiz		!    check for room
	 then AddKbf();			!    if none -- make some
	replacei(kbfptr,.ch);		!    copy character to killbuffer
	kbflen_ .kbflen+1		!    and increment size
     end;
    if eolBreak(.ch) then muline_ 1;	! if end-of-line then mark multi
    if .mark neq 0 and			! if we have a mark
       .lowend lss .mark		! and it is past point
     then mark_ .mark-1;		!  then back it up 1
    hbot_ .hbot+1;			! move counter
    allmod[.curbuf]_ 1;			! mark buffer modified
    scrmod_ 1				! mark screen modified
end;

global routine delforward = killforward(0);
global routine delbackward  = begin
    moveback(1);
    killforward(0)
end;

global routine insertchar(ch) =  begin
    corecheck();			! make sure a place to put it
    replacei(lowptr,.ch);		! deposit character
    if eolBreak(.ch)			! if end-of-line
     then begin				!  then add to line counts
	curline_ .curline+1;		!  used by buffer/screen
	bfrlin_ .bfrlin+1;		!  used only by buffer
	muline_ 1			!  multi-line changes
     end;
    if .ch eql "?L"			! if page-mark
     then begin				!  then reset counts
	bfrlin_ 0;			!  of lines to 0
	bfrpag_ .bfrpag+1		!  and increment pages
     end;
    if .mark neq 0 and			! if mark exists
       .lowend lss .mark		!  and is past point
     then mark_ .mark+1;		!  then move it forward
    lowend_ .lowend+1;			! increment counter also
    scrmod_ 1;				! mark screen modified
    allmod[.curbuf]_ 1;			! mark buffer modified
end;

Global Routine GetIndent( killflag ) = begin
    register char;
    local width;

    width_ 0;
    BegLin();
    while WhtBreak( char_scann(hptr) )
     do begin
	if .hend eql .hbot then exitloop;
	width_ if .char eql " "
		  then .width + 1
		  else (((.width div 8) * 8) + 8);
	if .killflag
	 then killforward(0)
	 else moveforward(1)
    end;
    return .width
end;

Global Routine SetIndent( count ) = begin
    if .count lss 1 then return;
    if .spaces
     then
	incr i from 1 to .count do insertchar(" ")
     else begin
	incr i from 1 to .count div .tabsize do insertchar("?I");
	incr i from 1 to .count mod .tabsize do insertchar(" ")
     end
end;


Global routine GetPos (npcol) = begin
    local place,temp;

!This routine tells you what column you will be in, when the
! redisplay will finally calms down.

    place_.lowend;
    while 1 do begin		       !decrement from lowend-1 down.
	if .place eql 1 then exitloop; !we have found start of line.
	temp_getchxr(.place-1);
	if .temp eql "?M" or (.temp eql "?L" and .sosmod) then exitloop;
	place_.place-1
    end;

! Now move forward.
    .npcol_1;
    incr i from .place to .lowend-1 do begin !all the stuff to where we are
	temp_getchxr(.i);	       !get the data.
	.npcol_updatecursor(.temp,..npcol)
    end
end;


global routine echord = begin local tp;
    tp_readch();		! read a character
    if .tp eql #177 or .tp eql #10 or
       .tp eql .DelValue or .tp eql .abortvalue then begin
	flush_1;		!mark it as a loss.
	writestring(plit asciz 'Aborted')
    end;
    writeloss(.tp);		! print it out.
    return .tp
end;

global routine errstr (foo) = begin
    silent_ 0;
    ToPrompt(.foo);
    repeat_ 1;
    cmdlvl_ 0;
    return 0
end;


global routine munchnnl (line,prompt,terminator) = begin local tc,i;
    writestring(.prompt);
    i_1;
    while .i lss 132 do begin
	tc_readch();			! read a character.
	if .tc eql #177 or .tc eql #10 or .tc eql .DelValue then begin
	    if .i leq 1 then exitcompound[2];
	    i_.i-1;
	    if .(.line+.i) gtr "?Z"
		then goxy(.physpos-1,.physlin)
		else goxy(.physpos-1,.physlin);
	    clearline();
	    .line_.i-1;
	    exitcompound[2]
	end;
	if .tc eql .terminator then begin
	    flubfr();
	    return 1
	end;				! if we are done.
	if .tc eql 7 then return 0;	!lossage
	if .tc eql "?Q" then tc _ readch();
	writeloss(.tc);
	(.line+.i)_.tc;			! set the char.
	.line_.i;
	i_.i+1
    end					! the inner loop.
end;					! the routine.


global routine munchline(line,prompt,terminator) = begin local retval;
    ToPrompt(plit asciz'');
    retval_munchnnl(.line,.prompt,.terminator);
    WriteLoss("$");
    flubfr();
    return .retval
end;

global routine ctrln2  = begin
    while .hend neq .hbot
     do begin
	moveforward(1);
	if eolBreak(scann(lowptr))
	 then return eolType(scann(lowptr))
     end;
    return zapmac()
end;


global routine ctrlp2  = begin
    while .lowend gtr 1
     do begin
	moveback(1);
	if eolBreak(scann(hptr))
	 then return (BegLin();eolType(scann(lowptr)))
     end;
    return zapmac()
end;

!
! chopline is called when JUST notices that the word it is currently
! building exceeds the right margin.  the first arg to chopline
! is the location of the last word break seen.  chopline will insert a
! carriage return at the appropriate place, and trim trailing blanks
! from the preceding line.  the left-margin is preserved assuming the
! value of ldent.  it returns the new value of linpos.
!

routine chopline (lastbreak, linpos, ldent) = begin
    if .lastbreak eql -1		! if no break seen
     then return .linpos;		!  then cant't break yet
    moveback(.lowend - .lastbreak);	! move to after the break
    while whtBreak(scann(lowptr))	! delete any whitespace
     do delbackward();			!  preceeding the break
    insertchar("?M");			! insert <cr>
    setIndent(.ldent);			! insert any margin
    return if .ldent geq 0
	    then .ldent+1 else 1	! return margin+1
end;

!
! JUST is called with the cursor pointing to the start
! of a paragraph.  JUST will and justify text from that
! point up to the next paragraph break.
!
! method of justification:
!	tabs and carriage-returns are converted to single spaces
!	multiple blanks are compressed to one
!	sentence breaks followed by zero or more )>]'"}
!		will be followed by exactly two blanks
!	blank is the only word separator
!	final trailing whitespace will be deleted
!

global routine just (linlft,linrgt) = begin
    register char;		! a temp to save getchxr calls.
    own blankctr;		! how many blanks can slip by
    own linpos;			! where we are on the line
    own lastbreak;		! where to break on overflow
    own lft,rgt;		! hack since can't access in gathertoken

    routine gathertoken( arg ) = begin			! common split code
	moveforward(1);					! pass the character
	linpos _ updatecursor(.char,.linpos);		! update position
	if .linpos gtr .rgt				! if too large
	 then begin					!  then break it
	    linpos_chopline(.lastbreak,.linpos,.lft);	!  returning position
	    lastbreak _ -1				!  set break flag
	 end;
	 if .arg gtr 0					! if nonzero, then
	  then blankctr _ .arg;				! set blank count.
    end;

    blankctr _ 0;			! initially zap spaces.
    lastbreak _ -1;			! can't break until after first item
    lft _ .linlft;			! hack for gathertoken
    rgt _ .linrgt;			! hack for gathertoken

    while blankline(.lowend)		! skip over any initial blank lines
     do ctrln2();
    linpos _ GetIndent( 1 );		! get current indenture
    if .crwnin and .linpos lss .linlft	! if want crown and smaller
     then linpos_ .linpos+.linlft;	!  then add otherwise use current
    SetIndent( .linpos );		! set crown of paragraph

    until pbreak(.lowend) and		! justify through next par-break
	not (.lowend eql 1 and		!   but ignore the beginning of
	     .hend-.hbot neq 0)		!   the buffer if it's not empty.
     do begin				! main justify loop
	char _ scann(hptr);		! look at a buffer character
	case JstType( .char ) of set	! perform necessary operations

	    gathertoken( 1 );		! [0] control - punctuation
	    gathertoken( 1 );		! [1] alpha numerics
	    gathertoken( 2 );		! [2] terminal punctuation
	    gathertoken( 0 );		! [3] enclosing punctuation

	    begin			! [4] space logic
		if .blankctr eql 0
		 then delforward()		! delete multiple spaces
		 else while .blankctr gtr 0	!   or allow as many
		  do begin			!   as necessary
		    blankctr _ .blankctr - 1;
		    if " " eql scann(hptr)
		     then moveforward(1)	! skipping existing ones
		     else insertchar(" ");	! or creating needed ones.
		    linpos _ .linpos + 1;	! count characters on line
		    lastbreak _ .lowend		! remember as last break
		 end
	    end;

	    replacen(hptr," ");		! [5] convert character to space
	    
	    if .bsback			! [6] special backspace logic
	     then begin			!     for when ^H doesn't count
		moveforward(1);			! pass the position
		if .linpos gtr 1		! and decrement
		 then linpos _ .linpos - 1;	! if anything there
		blankctr _ 1			! set spacing flag
	     end
	     else gathertoken( 1 );	!     else treat as normal break

	tes
     end;
    if scann(hptr) eql " "		! remove extra spaces
     then delforward();			!  at the end
    while scann(lowptr) eql " "		! in both directions.
     do delbackward();
 end;

Global routine dostat = begin
    External Wrtoct,Mail,Filblk,Bfblk2;
    Bind JBver = #137, JBddt = #74;

! VUE %1(74)-3 (HP2621 INIT) MAIN04  File:(YEUX)STATUS.BLI  --51%-- * {Mail}

! show.name	VUE
! show.version	%1(74)-3
! show.ddt	+DDT
! show.process	MAIL, MAGNUM, EDITOR, DIR, HELP, SEARCH
! show.terminal	HP2621
! show.mode	INIT, ABBREV, TEXT, BLISS
! show.flags	SEARCH, PAGE, CENTER, SAVE, STATUS, WRAP
! show.personality  BAUD, MULTIPLIER, INDENT, MARGINS, COMMENTPOS
!		ESC, META, XPREFIX, DELCHAR, DELLINE, STATUSPOS
!		WIDTH, HEIGHT
! show.buffer	MAINxx
! show.file	STATUS.BLI
! show.lookup	DSK:(YEUX)STATUS.BLI
! show.position	--TOP-- --51%-- --END--
! show.content	-Empty- -ReadOnly-
! show.changed	*
! show.mail	{Mail}
! show.date	dd-Mmm-yy
! show.time	hh:mm:ss PST

    if not .statusline then return;
    ToStatus();
    writestring(plit asciz ' VUE ');

    if .JBver<0,36> neq 0 then begin
	writeloss("%"); wrtoct(.JBver<24,9>);
	if .JBver<18,6> neq 0 then writeloss(.JBver<18,6>+"@");
	if .JBver<0,18> neq 0 then
	    begin writeloss("("); wrtoct(.JBver<0,18>); writeloss(")") end;
	if .JBver<33,3> neq 0 then
	    begin writeloss("-");writeloss(.JBver<33,3>+"0") end;
	writeloss(" ")
    end;

    if .vuetyp neq 0 then begin WrtSix(vuetyp); writeloss(" ") end;
    if .JBddt<0,36> neq 0 then writestring(plit asciz '+DDT ');

    Writeloss("(");
	WrtSix(ttype); Writeloss(" "); WrtSix(modblk+1);
	if .submod neq 0 then begin writeloss(" "); WrtSix(submod) end;
    writes(plit asciz ') ');
    
    WrtSix(bfblk2+1);			! buffer name
    writestring(plit asciz '  ');
    If .filblk neq 0 then begin WrtSix(filblk); Writeloss(":") end;
    If .(filblk+5) neq 0 then begin
	Writeloss("("); WrtSix(filblk+5); WrtSix(filblk+6); Writeloss(")")
    end;
    WrtSix(filblk+1);			! Filename part
    if .(filblk+2)<18,18> neq 0
     then begin
	Local E;
	E_ .(filblk+2)<18,18>^18;
	writeloss(".");
	WrtSix(E)
     end;
    
    writestring (plit asciz '  --');	! a separation.
    percnt_.lowend*100/(.lowend+.hend-.hbot);
    if .lowend eql 1 then writestring(plit asciz'TOP--')
    else if .hend eql .hbot then writestring(plit asciz'BOT--')
    else begin
	writeloss(.percnt/10+"0");
	writeloss(.percnt-10*(.percnt/10)+"0");
	writestring(plit asciz'%--');
    end;

    if .allmod[.curbuf] then writestring(plit asciz' *');

    if mail() then writestring(plit asciz' {Mail}');

    FromStatus();
    return
end;

end eludom
 z