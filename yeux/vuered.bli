module redisplay = begin

! Thanks to  Mike Kazar, Craig Everhart, James Gosling & C. Leiserson
!   for their inspiration and help with writing this module

external
	defwindow,		! define a window on the screen
	writeloss,		! write a possibly "funny" character
	goxy,			! position the cursor
	updatecursor,		! calculate screen line position
	leftmargin,		! move the cursor to the left margin
	clearline,		! clear to end of current line
	dostatus,		! print the status line
	flubfr,			! flush the character buffer
	inschar,		! insert a blank on the screen
	delchar,		! delete a char on the screen
	inslin,			! insert a line on the screen (scroll down)
	dellin,			! delete a line on the screen (scroll up)
	getchxr,		! get a buffer character
	ttyidle,		! check for tty input

	screen,			! array containing the screen image
	sosmod,			! page mode indicator for (^L) action
	muline,			! multi-line indicator
	scrmod,			! scroll mode indicator
	scroff,			!
	scrsze,			! size of the screen height
	linesz,			! size of the screen width
	modpos,			! size of the display area
	echosize,		! size of the echo area
	wndorg,			! origin of the current window
	wndsiz,			! size of the current window
	wndpea,			! ???
	curwin,			! current window index (numeric)
	curline,		! current line on the screen

	lowend,			! current position in buffer
	hend,			! loc of end of buffer
	hbot,			! loc of bottom of buffer
	physlin,		! physical position on screen (line #)
	physpos,		! physical position on line   (char #)

	silent,			! typeout indicator
	ttytyp;			! terminal type index

! Costs: (Initially!)

Global
    CSTlin = -1,	! Cost of redrawing a line		(?)
    CSTchr =  1,	! Cost of outputting a character	(1)
    CSTpos =  4,	! Cost of repositioning the cursor	(4)
    CSTdel =  5,	! Cost of deleting a line		(5)
    CSTins =  5,	! Cost of inserting a line		(5)
    CSTclr =  2;	! Cost of clearing to end of line	(2)

global inwind=(0);
global ohash[30],nhash[30],linmax[30]=(30:1);
own ypos[30],xpos[30],cpos[30];

structure dynas[i,j]=.dynas+(.j)+(.i)*30;
structure strs[i,j]=
    ( .strs + ((.j-1)/5) + ((.i-1)*27) ) <36-((((.j-1) mod 5)+1)*7),7>;

map strs screen;

global routine idc (firstchar,line) = begin
! firstchar: the first character position of the buffer to be updated.
! line:      the current line on the screen.
!

    own bchr, schr;			! buffer char, screen char
    own mypos, myscreenpos;		! buffer pos,  screen pos
    own crpos, crscreenpos;		! buffer eol,  screen eol
    own prefix, suffix;			! prefix size, suffix size
    own preend;				! end position of prefix
    own different;			! true if lines are diferrent
    own distance;			! distance to move text
    own eobuffer;			! true if end of buffer line
    own eoscreen;			! true if end of screen line
    own i;
    own myphyspos,endphyspos,fudge;



    mypos_ .firstchar;			! char position in buffer
    myscreenpos_ myphyspos_ 1;		! beginning of line
    endphyspos_ 1;			! end of line ( at first )
    eobuffer_ eoscreen_ 0;		! flags to designate ends

    prefix_ different_ 0;			! no differences, none same
    preend_ .firstchar-1;		! where end of prefix would be.

    while 1 do begin			! read until 2 lines differ

	If ( "?M" eql bchr_ getchxr(.mypos) )
	 then eobuffer_ 1
	 else mypos_ .mypos+1;		! increment positions

	If ( "?M" eql schr_ .screen[.line,.myscreenpos] )
	 then eoscreen_ 1
	 else myscreenpos_ .myscreenpos+1;

	if .eoscreen and .eobuffer	! done?
	 then exitloop;			! yes.. bye.

	if ( .linesz lss endphyspos_ updatecursor( .schr, .endphyspos ) )
	 then return;			! line too long? - no wrap yet

	if ( .bchr neq .schr )		! different?
	 then different_ 1;		! yes, set flag

	if ( not .different )
	 then begin
	    prefix_ .prefix+1;		! update prefix length
	    myphyspos_ .endphyspos	! new screen position
	 end
	 else
	    if ( .bchr eql "?I" or .schr eql "?I" )
	     then return		! tabs not allowed -- [ sigh ]
    end;

! Note: mypos & myscreenpos are now at end of line.

    if ( not .different )		! nothing to do?
     then return;			! same same - return

! find the common prefix length and carriage return positions

    preend_ .firstchar + .prefix;	! add length of prefix
    crpos_ .mypos-.firstchar+1;		! length of buffer line
    crscreenpos_ .myscreenpos;		! length of screen line

    if ( .crscreenpos eql .crpos )	! lines the same length
     then return;			! means no insert/delete char

! Now scan backwards getting the suffix length.

    suffix_ -1;				! initially -1
    while 1 do begin
	if ( .screen[.line,.myscreenpos] eql getchxr(.mypos) )
	 then suffix_ .suffix+1;
	if ( .myscreenpos eql .prefix+1 )
	 then exitloop;
	if ( .mypos eql .preend+1 )
	 then exitloop;

	myscreenpos_ .myscreenpos-1;
	mypos_ .mypos-1
    end;

! Now we have all the information.  If it is worthwhile, we
! should now do the operations.

    if ( .suffix eql 0 )
     then return;			! no matching suffix?

    goxy(.myphyspos,.line-.wndorg[.curwin]+1+.scroff);	% new screen line %

    fudge_ .myphyspos;
    if .crpos-1 gtr .suffix+.prefix then begin		% insert %
	distance_ .crpos-1-.suffix-.prefix;
	incr i from .prefix+1 to .prefix+.distance do
	    fudge_ updatecursor(getchxr(.firstchar+.i-1),.fudge);
	if .distance gtr .suffix then return;		% unnecessary? %
	decr i from 132-.distance to .prefix do		% clean screen %
	    screen[.line,.i+.distance]_ .screen[.line,.i];
	incr i from .prefix+1 to .prefix+.distance do	% set new char %
	    screen[.line,.i]_ " ";			% excess space %
	inschar(.fudge-.myphyspos)			% excess space %
    end
    else if .crscreenpos-1 gtr .suffix+.prefix then begin	% delete %
	distance_ .crscreenpos-1-.suffix-.prefix;
	incr i from .prefix+1 to .prefix+.distance do
	    fudge_ updatecursor(.screen[.line,.i],.fudge);
	if .distance gtr .suffix then return;		% unnecessary? %
	incr i from .prefix+1 to 132-.distance do	% clean screen %
	    screen[.line,.i]_ .screen[.line,.i+.distance];
	delchar(.fudge-.myphyspos)			% excess space %
    end;
end;		% end idc %

routine cost(i,j) =
    if .ohash[.j] eql .nhash[.i] then 0
    else if .nhash[.i] eql 0 then .CSTclr
    else .CSTchr*(.nhash[.i]^(-18))+.CSTpos;


routine draw(i) = if .nhash[.i] eql 0 then 0 else .CSTchr*(.nhash[.i]^(-18));


routine merge (cstyle,comptr) = begin
    local lasti;
    lasti_ -1;
    incr i from .comptr+1 to .modpos+.echosize do begin
	if .cstyle eql .ypos[.i] then if .lasti neq -1 then begin
	    if .xpos[.lasti]-1 eql .xpos[.i] then begin
		cpos[.i]_ 0;
		cpos[.lasti]_ .cpos[.lasti]+1;
		xpos[.lasti]_ .xpos[.lasti]-1;
	    end
	    else if (.xpos[.i] geq .xpos[.lasti]) and
		    (.xpos[.i] leq .xpos[.lasti]+.cpos[.lasti]) then begin
		cpos[.i]_ 0;
		cpos[.lasti]_ .cpos[.lasti]+1;
	    end
	end
	else lasti_ .i;
    end;
end;

routine caliad (argplace) = begin
    local a,b,temp,tdir,netpos,dist;
    local i,j,place,tc,ofst,dif,comptr;
    local dir[900],dyn[900],lasti;
    register tr;

    map dynas dyn;
    map dynas dir;

! This routine calculates in nhash the new line hashed values, and uses
! the values of ohash for the old values thereof.

! It uses dynamic programming to calculate the minimum cost of a
! redisplay.  The .dyn[.i,.j] array contains the cost of changing the
! first j lines of the old screen to the first i lines of the new
! screen.

%
The array dir is used to remember where we came from, i.e.  if
.dyn[.i,.j] was calculated from dyn[i-1,j] then it is 1, if it is
calculated from dyn[i,j-1] then it is 2.  It is four if we came
diagonally. C'est la vie.
% 
    place_ .argplace;
    a_ .wndorg[.curwin];
    b_ .wndorg[.curwin]+.wndsiz[.curwin]-1;
    incr i from 1 to .a-1 do ohash[.i]_ 0;	!zap other parts of old zone.
    incr i from .b+1 to .modpos+.echosize
     do ohash[.i]_ 0;				!zap old hash array.
    incr i from 1 to .modpos+.echosize
     do nhash[.i]_ 0;				!zap new hash array.
    incr i from .a to .b do begin		!once per line
	nhash[.i]_ 0;				!initialize it.
	while 1 do begin			!once per character of line
	    tc_ getchxr(.place);			!get the char
	    if .tc eql "?M" then exitloop;	!done with this line
	    nhash[.i]_ .nhash[.i]+.tc+1^18;	!calculate hash.
	    if (.tc eql "?L") and .sosmod then place_ .hend; !end of page.
	    place_ .place+1;
	end;
	place_ .place+1;				!skip the carriage return
    end;					!done with the hash.
    incr i from 0 to .modpos+.echosize do begin
	dyn[.i,0]_ if .i geq 1 then .CSTins+.CSTpos+.dyn[.i-1,0]+Draw(.i)
		else 0;
	dyn[0,.i]_ (.CSTdel*.i)+.CSTpos;
	dir[.i,0]_ 1;
	dir[0,.i]_ 2;
    end;
    incr i from 1 to .modpos+.echosize do begin
	incr j from 1 to .modpos+.echosize do begin

! First we check to see if we are going diagonally, i.e. if we do no
! insert or delete line operations, we just convert line j of the old
! screen into line i of the new one by either deciding it is the same
! or by deciding that it is different and thus needs to be rewritten.
	    dir[.i,.j]_ 4;			!we are going diagonally.
	    dyn[.i,.j]_ .dyn[.i-1,.j-1]+Cost(.i,.j);

! Another possibility is that we are going to just do a simple delete
! line operation.
	    temp_ .dyn[.i,.j-1]+.CSTdel+.CSTpos;	!simplest case.
	    if .temp leq .dyn[.i,.j] then begin
		dyn[.i,.j]_ .temp;
		dir[.i,.j]_ 2;
	    end;

	    if .i eql .modpos+.echosize then temp_ .dyn[.i,.j-1]; !delline in last column.

	    if .temp lss .dyn[.i,.j] then begin
		dyn[.i,.j]_ .temp;
		dir[.i,.j]_ 2;
	    end;

! Lastly we could be doing an insert line.  Here we add in the cost of
! drawing the new line, plus the cost of doing the insertline operation.
	    temp_ .dyn[.i-1,.j]+.CSTins+.CSTpos+Draw(.i);

! Check to see if we are doing better than the previous attempt.
	    if .temp leq .dyn[.i,.j]  then begin
		dyn[.i,.j]_ .temp;
		dir[.i,.j]_ 1;
	    end;

!insert line in last column.
	    if .j eql .modpos+.echosize then temp_ .dyn[.i-1,.j]+Draw(.i);

	    if .temp lss .dyn[.i,.j]  then begin
		dyn[.i,.j]_ .temp;
		dir[.i,.j]_ 1;
	    end;

	end;				!inner loop
    end;				!outer loop.

! Now we calculate the command list by walking back along
! the array dyn.  We walk backwards along the same path
! that we used to get here. We use .dir to get back.  It also
! tells us when we have a potential ins/del line operation to

    comptr_ .modpos+.echosize;
    i_ .modpos+.echosize;
    j_ .modpos+.echosize;
    while 1 do begin
	if .i eql 0 and .j eql 0 then exitloop; !done?

	if .dir[.i,.j] eql 2 then begin
	    if .i eql .modpos+.echosize then exitcompound;
	    xpos[.comptr]_ .j;
	    ypos[.comptr]_ 2;       !ypos has the command to do.
	    comptr_ .comptr-1;
	end;

	if .dir[.i,.j] eql 1 then begin
	    if .j eql .modpos+.echosize then exitcompound;
	    xpos[.comptr]_ .j+1;
	    ypos[.comptr]_ 1;       !ypos has the command to do.
	    comptr_ .comptr-1;
	end;

	tdir_ .dir[.i,.j];
	if .tdir eql 1 then i_ .i-1
	else if .tdir eql 2 then j_ .j-1
	else begin
	    i_ .i-1;
	    j_ .j-1;
	end;
    end;

! Now we can go from .comptr+1 to .modpos+.echosize to get the commands.
! Now we have the command list, xpos has the nhash values
! and ypos tells us if we are to do a delline or an insline.
    netpos_ 0;
    ofst_ 0;
    if not .wndpea then begin
	incr i from .comptr+1 to .modpos+.echosize do begin  !count net shift.
	    dif_ .xpos[.i]-(.ofst+.ypos[.i]);
	    if .ypos[.i] eql 1 then dif_ 1
		else if .ypos[.i] eql 2 then dif_ -1
		else dif_ 0;

	    if .dif eql 0 then exitcompound;
	    if .dif gtr 0 then begin
		netpos_ .netpos+.dif;      !insert line.
		ofst_ .ofst+.dif;
	    end
	    else begin
		netpos_ .netpos+.dif;
		ofst_ .ofst+.dif;
	    end;
	end;

! Now we position to the right place.
! Note that if there are more ins than del lines,
! we have to work to ensure status line stays in one place.

	if .netpos gtr 0 then begin ! More insert lines than delete lines.
	    temp_ .physlin;
	    goxy(.physpos,.wndsiz[.curwin]+.scroff-.netpos+1);
	    dellin(.netpos);
	    goxy(.physpos,.temp);
	end;
    end;	% end if not .wndpea %

    ofst_ 0;	!total amount the screen has shifted so far.
		!check that things are in the window.
    decr i from .modpos+.echosize to .comptr + 1 do begin
	if .xpos[.i] lss .a then xpos[.i]_ .a;
	if .xpos[.i] gtr .b+1 then xpos[.i]_ .b+1;
    end;

! Next we iterate through the array merging like commands, setting the
! count in the variable cpos instead of a default of 1.
    incr i from .comptr+1 to .modpos+.echosize do cpos[.i]_ 1;
    merge(1,.comptr);
    merge(2,.comptr);

    decr l from 2 to 1 do
    incr i from .comptr+1 to .modpos+.echosize do begin	!do the commands.

	dif_ .cpos[.i];
	if .dif eql 0 then exitcompound;	!nothing to do->leave.
	if .ypos[.i] eql 1 and .l eql 1 then begin ! the insert line code.
	    goxy(.physpos,1-.a+.scroff+.xpos[.i]); !go to the line.

	    decr ki from .scrsze+.a-1 to .xpos[.i]+.dif
		do (ohash[.ki]_ .ohash[.ki-.dif];
		    incr kj from 1 to 132 do begin
			tr_ .screen[.ki-.dif,.kj];
			screen[.ki,.kj]_ .tr;
			if .tr eql "?M" then exitloop;
		    end);

	    inslin(.dif);
	    incr ll from .comptr+1 to .modpos+.echosize do
		if .xpos[.ll] gtr .xpos[.i] then xpos[.ll]_ .xpos[.ll]+1;
	    incr j from 1 to .dif do begin
		screen[.j-1+.xpos[.i],1]_ "?M";
		ohash[.j-1+.xpos[.i]]_ 0;
	    end;

	    ofst_ .ofst+1;
	    exitcompound[2];
	end
	else if .l eql 2 and .ypos[.i] eql 2 then begin
	    goxy(.physpos,1-.a+.xpos[.i]+.scroff);
	    incr ki from .xpos[.i] to .a-1+.scrsze-.dif
		do (ohash[.ki]_ .ohash[.ki+.dif];
		    incr j from 1 to 132 do begin
			tr_ .screen[.ki+.dif,.j];
			screen[.ki,.j]_ .tr;
			if .tr eql "?M" then exitloop;
		    end);

	    dellin(.dif);
	    incr ll from .comptr+1 to .modpos+.echosize do
		if .xpos[.ll] gtr .xpos[.i] then xpos[.ll]_ .xpos[.ll]-1;
	    incr ki from 1 to .dif do begin
		screen[.a-1+.scrsze+1-.ki,1]_ 13;
		ohash[.a-1+.scrsze+1-.ki]_ 0
	    end;

	    ofst_ .ofst-1;
	    exitcompound[2];
	end;
    end;

!come here when done, we have adjusted the screen correctly.
    if .netpos lss 0 then begin
! More delete lines than insert lines.
	temp_ .physlin;
	goxy(.physpos,.wndsiz[.curwin]+.scroff+.netpos+1);
	inslin(-.netpos);
	goxy(.physpos,.temp);
    end;

    return;
end;

global routine redisp (checkflag) = begin

register i,cchar;
own posifirst;
local n,k,firstchar,screenpos,physcreenpos,linbeg,linend,
	npos,mushed,temp,tline,earlyzap,mustclear,curlm;


if .silent then return 0;		!if should be quiet.

mushed_ 0;				!how many modified lines.
posifirst_ 1;				!default current line.

! n is the place where current line is to appear on the screen.
! k is how far we will really go. differs if very near the top of the
! screen.

n_ if(.curline gtr .scrsze or .curline lss 1) then begin
		scrmod_ 1;
		muline_ 1;
		curline_ .scrsze/4+1
		end
	else .curline;
k_ 0;

decr i from .lowend-1 do begin
    if .i lss 1 then begin
	firstchar_ 1;		!underflow thru top of screen
	curline_ .k+1;
	exitloop
    end;

    if (getchxr(.i) eql "?L") and .sosmod then begin
	firstchar_ .i+1;
	if .k eql 0 then posifirst_ .firstchar;
	curline_ .k+1;
	exitloop
    end;
	
    if getchxr(.i) eql "?M" then begin
	k_ .k+1;			! a carriage return
	if .k eql 1 then posifirst_ .i+1
    end;

    if .n eql .k then begin
	firstchar_ .i+1;		! back the proper number of lines.
	exitloop
    end
end;				! decrement loop

! now we redo from firstchar down. we assume firstchar points
! at the start of a line which is to go at the first position
! of the screen.

if .inwind then begin
    inwind_ 0;
    defwindow(1,.wndorg[.curwin],.linesz,.wndsiz[.curwin])
end;

if .muline and
    (case .ttytyp of set
	 0;   0;   0;   0;   0;		! tty, superb, adm, xxx, beehive
	 0;   1;   0;   0;   1;		! xxx, concep, xxx, xxx, dm2500
	 1;   0;   0;   1;   1;		! vt100, xxx, xxx, h1500, hkit19
	 0;   0;   0;   0;   0;		! dm1500, act4, vt52, xxx, xxx
	 1;   1;   0;   1;   0;		! t1061, mime4, xxx, hp2621, xxx
	 0;   0;   1;   1;   0;		! xxx, xxx, H19, Adm-31, xxx
	 1;				! h2000
	tes)
	    then
	    caliad(.firstchar);		! insert / delete lines.

if (not .muline or not .scrmod) then firstchar_ .posifirst;

! above takes care of case where only doing one line.

	! idea is that if muline=0 then only redo current line
	! also, only giveup on type-ahead if there is multiline stuff to do.

npos_ .linesz;			!in case it gets lost past posn 132.

linbeg_ .wndorg[.curwin];		! beginning line
linend_ .linbeg+.wndsiz[.curwin]-1;	! ending line
if (not .muline or not .scrmod)
 then begin
    linbeg_ .curline;
    linend_ .curline
 end;

incr i from .linbeg to .linend		! i is the line we are doing.
 do begin
    if ( not ttyidle() and .checkflag )
     then return 0;

    if (case .ttytyp of set		!  << speed improvement >>
	  0;   0;   0;   0;   0;	! tty, superb, adm, xxx, beehive
	  0;   1;   0;   0;   0;	! xxx, concep, xxx, xxx, dm2500
	  1;   0;   0;   0;   1;	! vt100, xxx, xxx, h1500, hkit19
	  0;   0;   0;   0;   0;	! dm1500, act4, vt52, xxx, xxx
	  1;   0;   0;   1;   0;	! t1061, mime4, xxx, hp2621, xxx
	  0;   0;   1;   1;   0;	! xxx, xxx, H19, Adm-31, xxx
	  0;				! h2000
    tes)
     then idc( .firstchar, .i );

    screenpos_ 1;			!number of characters into the line.
    physcreenpos_ 1;			!number of cursor spaces into same line.
    ohash[.i]_ 0;			!initialize the line's hash to zero.
    mustclear_ 1;			!if we must clear-to-end of line.
    earlyzap_ 0;			!not zapped yet.
    curlm_ 0;				!init it properly.
    while 1 do begin			! loop for each char in the line.
	if .firstchar eql .lowend then npos_ .physcreenpos;
					!means that we are at the current position.
	cchar_ getchxr(.firstchar);	!save calls to getchxr

	if ( .cchar neq "?M" )		! keep length for stupid terminals.
	 then curlm_ updatecursor(.cchar,.physcreenpos);

	if (.cchar eql "?L") and .sosmod
	 then firstchar_ .hend;
	if ( .screen[.i,.screenpos] eql .cchar )hen begin
	    if ( .cchar neq "?M" )	! i=line number, screenpos=char pos
	     then ohash[.i]_ .ohash[.i]+.cchar+1^18;
	    physcreenpos_ updatecursor(.cchar,.physcreenpos); !hacks tabs,etc.
	    firstchar_ .firstchar+1;
	    screenpos_ .screenpos+1;
	    if .cchar eql "?M" then exitloop;
	end 			!the if statement.
	else begin
	    if (.screen[.i,.screenpos] eql "?M")
	    and .screenpos+1 leq 132 then begin
		screen[.i,.screenpos+1]_ "?M";
		mustclear_ 0;	!already past there.
	    end;
	    tline_ .i-.wndorg[.curwin]+1+.scroff; ! get cursor to correct line

				!next print damaged section of line.
	    mushed_ .mushed+1;
	    if .cchar neq "?M" then ohash[.i]_ .ohash[.i]+.cchar+1^18;
	    firstchar_ .firstchar+1;
	    if .screenpos leq 132 then begin
		temp_ .screen[.i,.screenpos];
		if (not .earlyzap) and (.temp neq "?M") and ((.temp eql "_ ")
		   or (.cchar eql "_ ")	or (updatecursor(.cchar,1)  neq 2)
		   or (updatecursor(.temp,1)  neq 2)) 	then begin
		    earlyzap_ 1;
		    if .physcreenpos lss .linesz
			then goxy (.physcreenpos,.tline)
			else goxy (.linesz,.tline);
		    clearline();
		    incr temp from .screenpos to 132
		     do screen[.i,.temp]_ "?M";
		end;
		screen[.i,.screenpos]_ .cchar;
		screenpos_ .screenpos+1;
	    end;
	    if .cchar eql "?M" then begin
		if .mustclear then begin
		    incr temp from .screenpos to 132
		     do screen[.i,.temp]_ "?M";
		    if .physcreenpos lss .linesz
			then goxy (.physcreenpos,.tline)
			else goxy (.linesz,.tline);
		    clearline();
		end;
		flubfr();
		exitloop[1];
	    end;		! (done with the line)
				!keep pos known
	    if .physcreenpos lss .linesz
		then goxy (.physcreenpos,.tline) !and place
		else goxy (.linesz,.tline);
	    if .physpos lss .linesz then writeloss (.cchar);
	    physcreenpos_ .physpos;
!	end; !line print loop
	end; !else clause
    end; ! intraline while loop
    linmax[.i]_ .curlm;		!now store it.
end;				!loop for whole screen (i)

dostatus();
defwindow(1,.wndorg[.curwin],.linesz,.wndsiz[.curwin]);

!here we should update the cursor to the place where it should be.

goxy(if .npos lss .linesz then .npos else .linesz,  .scroff+.curline);

1 				! return a 0 if succeeded completely.
end;


end eludom
  ]@[@