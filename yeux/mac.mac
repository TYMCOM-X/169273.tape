Title	VUEMAC	Macro support subroutines for VUE
Subttl	VUEMAC	By Carl A Baltrunas - Tymshare Inc -


	Entry	Chnior, Chniov		; Channel functions
	Entry	Call, Calli		; Monitor Calls TOPS-10/TYMCOM-X
	Entry	GetInf			; Monitor Call (Tymcom-X GETTABs)
	Entry	Skip			; Success/Failure flag
	Entry	Mapped			; Artificial page status
	Entry	TmpNam			; Get PJOB'NAM as filename

	Entry	DpyIni, DpyZzz		; Display initialization/finish
	Entry	DpyOut			; Display typeout

	Entry	Quiet, Silent		; Toggle typeout
	Entry	AltPtr			; Alternate output pointer

	Entry	WrtChr, PutChr		; Output character
	Entry	WrtStr, PutStr		; Output string
	Entry	WrtNum, PutNum		; Output number
	Entry	WrtOct, PutOct		; Output octal number

Subttl	VUEMAC	Definitions

	Search	Jobdat

;Register Definitions -- See BLISS Manual

	s=0		; Sreg - PDL & Argument stack
	t=1		; SuperTemp - Don't expect anything
	f=2		; Freg - Frame stack register
	v=3		; Vreg - Value register
	a=4		; Temp
	b=5		; Temp
	c=6		; Temp
	d=7		; Temp
	e=10		; Temp

	Twoseg		; Generate Shareable code

	Reloc	400000	; Starting at normal address.

Subttl	VUEMAC	TYMCOM-X / TOPS-10 Definitions 

Opdef	Auxcal	[042000,,0]	; Terminal / Aux Circuit calls
Opdef	Chanio	[043000,,0]	; Channel / File calls
Opdef	PJrst	[Jrst]		; Documentation..Jrst to Popj
Opdef	VFStat	[Calli -77]	; Virtual/File page Status
Opdef	Pjob	[Calli 30]	; Get my job/frame number
Opdef	Gettab	[Calli 41]	; Get monitor table info
Opdef	Hiber	[Calli 72]	; Hibernate/sleep awhile

.Axi8c==0	; Input character image and wait
.Axi8s==1	; Input character image and skip
.Axo8i==4	; Output character image immediate
.Axptr==5	; Output string using byte pointer
.Axsic==10	; skip if character
.Axsyb==12	; send yellow ball (Tymnet)
.Axobr==16	; Read Output baud rate code
.Axwid==27	; Terminal Width
.Axics==45	; input character and skip
.Axost==52	; Outstr to Aux port
.Axrvx==55	; reverse ^S/^Q enable
.Axcfs==64	; Setmod for Aux port
.Axttp==100	; Read terminal type

io.nee==1b27	; no-escape-echo bit
io.nec==1b28	; no-echo bit
io.fcs==1b29	; full-character-set bit

.ioimg==10	; image mode io
.iobin==14	; binary

Subttl	VUEMAC	Chnior	Chniov

;Chnior - routine to perform a TYMCOM-X chanio monitor call
;
; call:
;	Push	s,[chan]	Chnior ( .chan, block, .funct )
;	Push	s,[block]	    or
;	Push	s,[funct]	Chniov ( .chan, .value, .funct )
;	Pushj	s,Chnior
;	<only return>		.v = results from register
;				.skip = -1 IFSKIP, else 0
;
Chniov:
Chnior:	move	t,s			; copy stack pointer
	hrlz	v,-1(t)			; setup function,,chan
	hrr	v,-3(t)			; one part at a time
	move	t,-2(t)			; get address
	setom	skip			; set skip variable
	chanio	v,(t)			; xct
	  setzm	skip			; report no-skip
	popj	s,			; return


	RELOC

skip:	Block	1			; variable T/F IFSKIP

	RELOC

Subttl	VUEMAC	Call	Calli

;CALL - Tops-10 and Tymcom-X monitor calls
;
;	Push	s,[argument]		CALL( Arg, sixbit 'NAME' )
;	Push	s,[sixbit/NAME/]
;	Pushj	s,CALL
;	 <only return>			result in .VREG
;
; SKIP is True (-1) if the call skipped and False (0) otherwise.
;
CALL:	Setom	Skip			; Initially True
	Move	v,s			; Copy arguments
	Move	t,-1(v)			;  call name
	Move	v,-2(v)			;  call arg
	Call	v,t			; Perform the call
	  Setzm	Skip			;  Clear skip
	Popj	s,


;CALLI - Tops-10 and Tymcom-X monitor calls
;
;	Push	s,[argument]		Calli( Arg, Function )
;	Push	s,[function]
;	Pushj	s,Calli
;	 <only return>			result in .VREG
;
; SKIP is True (-1) if the call skipped and False (0) otherwise.
;
CALLI:	Setom	Skip			; Initially True
	Move	v,s			; Copy arguments
	Move	t,-1(v)			;  call name
	Move	v,-2(v)			;  call arg
	Calli	v,(t)			; Perform the call
	  Setzm	Skip			;  Clear skip
	Popj	s,

Subttl	VUEMAC	Mapped

;MAPPED - Mapped page status
;
;	Push	s,[page]
;	Pushj	s,MAPPED		v _ MAPPED( .page )
;	  <only return>
;
Mapped:	Move	v,s			; Copy stack
	Move	v,-1(v)			; Get virtual page number
	VFSTAT	v,			; See if mapped to a file
	  Tdza	v,v			;   Illegal - Clear & Skip
	 Movei	v,1			; Good page - Set to True
	Popj	s,			; Return value to user


Subttl	VUEMAC	GetInf	TmpNam

;GETINF - Monitor Table Info
;
;	Push	s,[Index]		v _ GetInf( .Index, .Table )
;	Push	s,[Table]
;	Pushj	s,GETINF
;	  <only return>
;
Getinf:	Move	v,s			; Copy stack
	Hrl	v,-2(v)			; Get the index
	Hrr	v,-1(v)			; Get the table
	Gettab	v,			; Query the monitor
	  Setz	v,			; Return 0 if error
	Popj	s,			; Return



;TMPNAM - Get Temp-file name using Arg
;
;	Push	s,[sixbit 'ARG']	FILE_ TMPNAM( sixbit 'ARG' );
;	Pushj	s,TMPNAM
;	  <only return>
;
TmpNam:	push	s,a			; Save a register
	pjob	v,			; Get the job number
	idivi	v,^D10			; Divide
	push	s,a			; Save remainder
	idivi	v,^D10			; Divide
	movei	v,'0'(v)		; Make into sixbit digit
	lsh	v,6			; And shift
	movei	a,'0'(a)		; Make into sixbit digit
	add	v,a			; Add into result
	lsh	v,6			; And shift
	pop	s,a			; Restore first remainder
	movei	a,'0'(a)		; Make into sixbit digit
	add	v,a			; Add into result
	lsh	v,^D18			; And shift
	move	a,s			; Get stack pointer
	hlr	v,-2(a)			; Get name argument
	pop	s,a			; Restore register
	popj	s,			; And return


Subttl	VUEMAC	DpyIni	DpyZzz

;DPYINI	- Save Characteristics & Setup Display
;
;	Pushj	s,DPYINI		DPYINI()
;	  <only return>
;
DpyIni:	seto	v,			; Get the tty characteristics
	getlch	v			; Of your own port
	movem	v,tymtty		; Remember them
	tlo	v,220			; Magic bits NFC!NCM
	setlch	v			; Now setup special ones
	setzm	inirvx			; clear ^S/^Q flag
	hrroi	v,.Axo8i		; Output immediate character
	Auxcal	v,0			; A null!
	Pushj	s,DpySYB		; and a yellow ball
	hrroi	v,.Axrvx		; then turn off backpressure
	Auxcal	v,inirvx		;   capability via ^S/^Q
	Setom	tspeed			; Get the terminal speed
	hrroi	v,.Axobr		; ... for output anyway.
	Auxcal	v,tspeed		;  .. save it for later
	Hrroi	v,.Axcfs		; Now setup port status
	Auxcal	v,io.nee!io.nec!io.fcs!.iobin
DpySYB:	hrroi	v,.AxSYB		; then follow it
	Auxcal	v,			;   by a yellow ball
	move	v,[Xwd 41,5]		;   wait for an orange ball
	Hiber	v,			;   for up to 5 seconds.
	  jfcl				;   Ignore errors.
Cpopj:	Popj	s,			; Then Return

;DpyZzz	- Restore terminal characteristics
;
;	Pushj	s,DpyZzz		DpyZzz()
;	  <only return>
;
DpyZzz:	Pushj	s,DpySYB		; send a yellow ball
	move	a,tymtty		; Remember these characteristics?
	Setlch	a			; Now set them back
	hrroi	a,.Axrvx		; ^S/^Q
	push	s,inirvx		; Make sure this doesn't get clobberred
	Auxcal	a,inirvx		; restore it
	pop	s,inirvx		;  ...
	Popj	s,			; Then return

	RELOC

tymtty:	block	1			; tty characteristics (tymshare)
inirvx:	block	1			; saved state of xon-xoff (.axrvx)
tspeed:	block	1			; tty speed (we think)

	RELOC

Subttl	VUEMAC	Quiet

;Quiet	- Toggle the state of .SILENT
;
;	Pushj	s,Quiet			Quiet()
;
quiet:	Move	v,silent		; Get flag
	Jumpn	v,quiet0		; If non zero - Make zero
	Setom	silent			; else make non-zero
	popj	s,			; Return.
quiet0:	Setzm	silent			; Make zero
	popj	s,			; Return.


	RELOC

silent:	Block	1			; output flag

	RELOC

Subttl	VUEMAC	Putchr	Putchi	Putchv

;PutChr	- Output a character (put it into the display buffer)
;
;	Push	s,[char]		PutChr(.char)
;	Pushj	s,PutChr
;	  <only return>
;
putchr:	move	v,s			; Get the character
	move	v,-1(v)			;   from the top of the stack
putchi:	skipe	silent			; If we're being quiet
	  popj	s,			;   then don't say a word
putchv:	skipe	altptr			; Skip (normal) if no alternate pointer
	  jrst	putalt			;   else deposit into alternate buffer
	jumpe	v,putchz		; Zero bytes must get special handling.
	sosge	dpycnt			; Any room left?
	  pushj	s,dpyout		;   No -- Flush the display buffer
	idpb	v,dpyptr		; Put it into the display buffer
	popj	s,			; and Return


putchz:	pushj	s,dpyout		; flush buffer so we can type null
	hrroi	v,.Axo8i		; setup for output
	auxcal	v,0			; output a null
	popj	s,			; and Return


putalt:	idpb	v,altptr		; deposit byte
	popj	s,			; and Return


	RELOC

altptr:	Block	1			; pointer to alternate output
dpyptr:	Block	1			; pointer to display output

dpysiz==^D100				; size of display buffer
dpycnt:	Block	1			; count of bytes left in buffer
dpybuf:	Block	dpysiz/4		; display buffer (4 bytes per)
	Block	1			; extra word for ASCIZ-like-ness

	RELOC

Subttl	VUEMAC	DpyOut

;DpyOut	- Output the display buffer
;
;	Pushj	s,DpyOut		DpyOut()
;	  <only return>
;
DpyOut:	push	s,v			; Save our character
	setz	v,			; Put a NULL character
	idpb	v,dpyptr		;   at the end of the buffer
	movei	v,dpybuf		; Get the address of the buffer
	hrli	v,(Point ^D9)		; Make a byte pointer (9-bits)
	movem	v,dpyptr		; Store it for next time
	movei	v,dpysiz		; Calculate the buffer size
	movem	v,dpycnt		; Store it for next time
	hrroi	v,.Axptr		; Output String to aux-port using
	Auxcal	v,dpyptr		;   buffer ending at first null
	pop	s,v			; Restore our character
	Popj	s,			; And return

Subttl	VUEMAC	PutOct	WrtOct	PutNum	WrtNum

;Output number routines - names are obvious

PutOct:	Tdza	t,t			; *PUT*
WrtOct:	seto	t,			; *Wrt*
	movem	t,PutWrt		; Set flag.
	movei	t,10			; Octal
	movem	t,Radix			; For the divisor
	move	v,s			; Get the dividend
	move	v,-1(v)			; From the stack
	Jrst	PutRdx			; -----

PutNum:	Tdza	t,t			; *Put*
WrtNum:	seto	t,			; *Wrt*
	movem	t,PutWrt		; Set flag.
	movei	t,12			; Decimal
	movem	t,Radix			; For the divisor
	move	v,s			; Get the dividend
	move	v,-1(v)			; From the stack
	jumpge	v,PutRdx		; -------
	skipe	silent			; Do we really need to do this work?
	  popj	s,			; No! -- Don't bother
	movm	v,v			; Get magnitude
	push	s,v			; Save it
	movei	v,"-"			; Get sign
	pushj	s,chrout		; And print it
	pop	s,v			; Restore number
PutRdx:	skipe	silent			; Do we have any work to do?
	  popj	s,			; No! -- Go home
PutRd0:	idiv	v,Radix			; Divide by radix - remainder in "a"
	exch	s,v			; Swap
	hrlm	a,(v)			; Store remainder on stack
	exch	s,v			; Swap
	skipe	v			; Are we done?
	pushj	s,PutRd0		; No -- Get next digit
	exch	s,a			; Swap
	hlrz	v,(a)			; Get digit to print
	exch	s,a			; Swap
	movei	v,"0"(v)		; Make printable
	pjrst	chrout			; Output character


	RELOC

PutWrt:	Block	1			; flag for *Put* vs *Write*
Radix:	Block	1			; radix to write number in

	RELOC

Subttl	VUEMAC	Putstr	Wrtstr

;Putstr -	Routine to write a string to the screen.
;Wrtstr -	Routine to write a string to the screen taking care of
;		possibly funny characters.
;
;	Push	s,[Asciz /TEXT/]	PutStr(plit asciz 'TEXT');
;	Pushj	s,???str		WrtStr(plit asciz 'TEXT');
;	  <only return>
;
PUTSTR:: Tdza	v,v			;  global routine putstr(foo)
WRTSTR:: Seto	v,			;  global routine wrtstr(foo)
	Movem	v,PutWrt		;  Set put/wrt flag
	Skipe	Silent			;   If .silent
	  Popj	s,			;       then return;
	Move	v,s			;
	Hrrzi	v,@-1(v)		;   WS$Ptr _ Point 7,.foo
	Hrli	v,(Point 7)		;
	Movem	v,WS$Ptr		;
WS$LP:	Ildb	v,WS$Ptr		;   v_scani(WS$Ptr);
	 Jumpe	v,Cpopj			;   if .v eql 0 then return;
	pushj	s,chrout		;   Put char into the buffer;
	Jrst	WS$LP			; end while .v neq 0;

chrout:	Skipe	PutWrt			; consider status of *Put* ! *Wrt*
	  PJrst	Wrtchv			; *Wrt*
	PJrst	Putchv			; *Put*


	RELOC

WS$Ptr:	Block	1			; constructed pointer to string

	RELOC

Subttl	VUEMAC	WrtChr

Extern	Physpos				; horizontal line pos
Extern	EscValue			; value of ESC code
Extern	LeftMargin			; move to left-margin function

;WrtChr -	Routine to write a possibly funny character
;
;	Push	s,[char]		WrtChr("char");
;	Pushj	s,WrtChr
;	  <only return>
;
WRTCHR::				; Global routine wrtchr(foo)
	Skipe	Silent			;   If .silent
	  Popj	s,			;       then return;
	Move	v,s			;
	Move	v,-1(v)			; v _ .foo
WRTCHV:	Cail	v," "			; If .foo geq " "
	Cail	v,177			;     and lss .Rubout
	  Jrst	WRTCH0			; NO
	Pushj	s,PUTCHV		;     Putchv(.foo)
	Aos	Physpos			;     Physpos _ Physpos+1
	  Popj	s,			;   end; Return;

WRTCH0:	Cain	v,15			; else If .foo eql #cr
	Jrst	LEFTMARGIN		;         then return Leftmargin()
	Caie	v,11			; else If .foo eql #tab
	  Jrst	WRTCH2			; NO
	Push	s,t			;       then begin (saving t)
	Movei	t,^d8			;
	Move	v,PHYSPOS		;	 *Updatecursor(#tab,.Physpos)*
	Andi	v,7			;
	Sub	t,v			;	 Incr t
	Addm	t,PHYSPOS		;	    from 1
	Movei	v," "			;	    to   8 - (.Physpos and 7)
	Pushj	s,PUTCHV		;	  do Putchv(" ")
	Sojg	t,.-1			;
	Pop	s,t			;	 end (restoring t)
	Popj	s,			;	Return;

WRTCH2:	Came	v,ESCVALUE		; else If .foo eql .EscValue
	  Jrst	WRTCH4			; NO
	Movei	v,"$"			;      then
	Pushj	s,PUTCHV		;	  Putchv("$")
	Aos	PHYSPOS			;	  Physpos _ .Physpos + 1
	Popj	s,			;	  Return

WRTCH4:	Cain	v,177			; else if .foo eql .Rub
	  Movni	v,35			;	then foo _ "#"-#100;
	Push	s,v			; else+rubout ...
	Movei	v,"^"			;
	Pushj	s,PUTCHV		;	  Putchv("^")
	Pop	s,v			;
	Movei	v,100(v)		;
	Pushj	s,PUTCHV		;	  Putchv(.foo+#100)
	Aos	PHYSPOS			;
	Aos	PHYSPOS			;	  Physpos _ .Physpos + 2
	Popj	s,			;	Return;


	end
  