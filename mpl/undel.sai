begin "undelete"

require "(SAILIB)SAIL.DEF" source!file;
define VER={1};
require VER version;
define left(word)={word land '777777000000};
define LC.ECS={!bit(2)};
!	This program works in conjunction with Dirit to undelete
	deleted files.  When Dirit is passed the /3 switch and a
	file is deleted, the file is renamed to ######.tmp.  That is,
	it is soft deleted.  Soft deleted files may be reclaimed
	up to the point when they are expunged by either Gfd, Logout,
	or the Undel "purge" command.  This program can be called
	directly or a command string may be passed to it with the
	monitor Undel command.
;
!get!module(extend);
record!pointer(any!class) UFR;
integer PPN,EOF,Errcode,Inichan,Brkcr,
	Tabspdel,Tabspbk,Tabextbk,Tabspdotdel,Tabflush,Tabsw,Tabcomfl,
	Tabnonspbk;
string Cmd;
boolean ALREADYINIT;

simple procedure Endprog;
begin
    call(0,"reset");
    call(0,"exit");
end;    

simple procedure Errxit(integer Value,Code; string Msg);
begin
    print (Msg);
    if Code=1 then print (Value);
    print (crlf);
    Endprog;
end;

simple procedure Dskopenerr;
    if Eof then Errxit(Eof,1,"?Error opening DSK: ");

simple procedure Diritinierr;
    Errxit(!rh(Errcode),1,"?Dirit.ini file selection error ");

simple boolean procedure Endisini;
begin
    open(Inichan_getchan,"DSK",0,1,1,'776*5,Brkcr,Eof);
    Dskopenerr;
    lookup(Inichan,"Dirit.ini",errcode);
    if Errcode then
        if !rh(Errcode) then
            Diritinierr
        else return(false)
    else return(true);
end;

simple boolean procedure Slash3;
begin
    boolean Found;
    Cmd_"";
    Found_false;
    do begin
            Cmd_Cmd&input(Inichan,Tabsw);
            if not Eof then begin
                input(Inichan,Tabnonspbk);
                if Brkcr="3" then Found_true
                else Cmd_Cmd&"/"&Brkcr;
            end;
        end
    until Eof;
    if Cmd[inf-1 to inf] neq crlf then
        Errxit(0,0,"?Dirit.ini not terminated by crlf");
    return(Found);
end;

simple procedure Supdirini;
begin
    enter(Inichan,"Dirit.ini",Errcode);
    if Errcode then Diritinierr;
    useto(Inichan,1);
    out(Inichan,Cmd);
    close(Inichan);
end;

procedure UFDINI;
begin
    own integer CHAN;
    if not ALREADYINIT then begin "UFDINIT"
        ALREADYINIT_true;
        PPN _ call(0,"GETPPN");
        CHAN _ getchan;
        open(CHAN,"DSK",0,0,0, 0,0,EOF);
        Dskopenerr;
        begin "LOOKUP"
        integer array X[0:3];
        X[0] _ 3;
        X[1] _ !hl(1)+!hr(1);
        X[2] _ PPN;
        X[3] _ cvsix("UFD");
        chnior(CHAN,X[0],4);
        end "LOOKUP";
        if not !SKIP! then Errxit(PPN,1,"?can't lookup UFD: ");
    end "UFDINIT";
    UFR _ INIUFR("*","TMP",CHAN,'52);
end;
simple boolean procedure WildMatch (string Name, Ename);
begin
   if not equ (Ename, "*") then begin
      if length (Ename) < length (Name) then return (false);
      while length (Ename) do begin
         integer En;
         if lop (Name) neq (En_lop (Ename)) and En neq "#" then
            return (false);
      end;
   end;
   return (true);
end;
simple string procedure STTIME (integer TIME);
begin
    string X;
    integer A,B;
    getformat(A,B);
    setformat(2,0);
    X _ cvs(TIME%3600);
    setformat(-2,0);
    X _ X & ":" & cvs(TIME%60 mod 60) & ":" & cvs(TIME mod 60);
    setformat(A,B);
    return(X);
end;

simple integer procedure Getlch;
begin
    integer I;
    start!code
        setom I;
        ttcall 6,I;
    end;
    return (I);
end;
ifcr compiler!switch("B") thenc usererr(0,0,0,"B"); endc;

begin "MAIN" ! main program;
boolean CMDSW;
integer CHAN;
string COMLINE;
CHAN _ getchan;
open(CHAN,"DSK",0,0,0, 0,0,EOF);
Dskopenerr;
ttyup(true);
setbreak (TABCOMFL_getbreak," ,/","","IR");
setbreak (TABSW_getbreak,"/"," ","I");
breakset (TABNONSPBK_getbreak," ","X");
setbreak (TABSPDEL_getbreak," ","","XR");
setbreak (TABSPBK_getbreak," ,","","IR");
setbreak (TABEXTBK_getbreak," .,","","IR");
setbreak (TABSPDOTDEL_getbreak," .","","XR");
breakset (TABFLUSH_getbreak,",","I");
CMDSW_LC.ECS land Getlch;
if CMDSW then begin
    string LINE;
    backup;
    scan(LINE_inchwl,TABSPDEL,BRKCR);
    scan(LINE,TABCOMFL,BRKCR);
    COMLINE_scan(LINE,TABSW,BRKCR);
    if not length(LINE) and BRKCR neq "/" then
        CMD_"RECOVER"
    else begin
        scan(LINE,TABSPDEL,BRKCR);
        CMD_scan(LINE,TABSPBK,BRKCR);
        COMLINE_COMLINE&LINE;
    end;
    case CMD of begin
        ["BEGIN"] CMDSW_false;
        [null] CMD_"/";
    else end;
end;
if not CMDSW then print (crlf,"   File Undeleter - Version ",VER,crlf,crlf);
do begin "CMDLOOP"
    boolean INTERACTIVE,Found;
    integer BRK,Nopgfil,Recpgs,Filsiz;
    Found_false;
    Recpgs_Filsiz_Nopgfil_0;
    if not CMDSW then begin
        print ("*");
        scan(COMLINE_inchwl,TABSPDEL,BRKCR);
        CMD_scan(COMLINE,TABSPBK,BRKCR);
    end;
    INTERACTIVE_false;
    BRK_0;
    case CMD of begin
        ["LIST"] BRK_#cr;
        ["RECOVER"] BRK_#dc2;
        ["PURGE"] BRK_#EOT;
        ["SELECT"] INTERACTIVE_true;
        ["ENABLE"]
            begin
                if not Endisini then Cmd_"/3"&crlf
                else if not Slash3 then begin
                        Cmd_Cmd[1 to inf-2]&"/3"&crlf;
                        if length(Cmd) geq '776*5 then
                            usererr(0,0,"?Dirit.ini too big");
                    end else
                        continue "CMDLOOP";
                Supdirini;
                continue "CMDLOOP";
            end;
        ["DISABLE"]
            if not Endisini then continue "CMDLOOP" else
                begin
                    if Slash3 then
                        if equ(Cmd,crlf) then begin
                            rename(Inichan,0,0,Errcode);
                            if Errcode then Diritinierr;
                        end
                        else Supdirini;
                    continue "CMDLOOP";
                end;
        ["QUIT"] done "CMDLOOP";
        [null] continue "CMDLOOP";
    else begin 
        string SW;
        if CMDSW then SW_"/" else SW_"";
        print ("
One of the following...
   ",SW,"list <files> - list specified deleted files
   ",SW,"recover <files> - recover specified deleted files
   ",SW,"purge <files> - expunge specified deleted files
   ",SW,"select <files> - select action on a per file basis
   ",SW,"enable - enable soft delete
   ",SW,"disable - disable soft delete",crlf,
            if not CMDSW then "   quit - end program"&crlf&crlf else
                "   /begin - enter undelete program
If no command is given, ""/recover"" is assumed"&crlf);
            continue "CMDLOOP";
        end
    end;
    if not BRK=#cr then print (crlf);
    do begin "LISTLOOP"
        string EXPNAME,EXPEXT;
        ufdini;
        scan(COMLINE,TABSPDEL,BRKCR);
        EXPNAME_scan(COMLINE,TABEXTBK,BRKCR);
        scan(COMLINE,TABSPDOTDEL,BRKCR);
        EXPEXT_scan(COMLINE,TABSPBK,BRKCR);
        scan(COMLINE,TABFLUSH,BRKCR);
        if not (length(EXPNAME) or length(EXPEXT)) then EXPEXT_"*";
        if not length(EXPNAME) then EXPNAME_"*";
        do begin "main loop"
            define LBS = '40;
            integer array U[0:3],X[0:LBS];
            if not NXTUFR(U,UFR) then done;
            X[0] _ arrinfo(X,2);
            X[1] _ PPN;
            X[2] _ U[0];
            X[3] _ U[1];
            chnior(CHAN,X[0],4);
            if not !SKIP! then continue;
            if (X[6]=0) or (X[7]=0) or
                not (wildmatch(cv6str(X[7]),EXPNAME) and
                wildmatch(cv6str(left(X['13])),EXPEXT)) then continue;
            FOUND_true;
            X[1] _ X[6];    ! restore PPN;
            X[2] _ X[7];    ! restore NAME;
            X[3] _ X['13];  ! restore EXT;
            X[6]_X[7]_X['13]_0;
            do begin "prompt"
                integer TEMP;
                string NewFile, UNM;
                NEWFILE_null;
                print(
                    if not INTERACTIVE and (BRK=#cr) then crlf else "",
                    if X[1] neq PPN then
                        (UNM_lokdul(X[1]))&
                        "            "[1 for 15-length(UNM)]
                    else "",
                    cvxstr(X[2]),
                    if Temp_length(cv6str(left(X[3]))) then "." else " ",
                    cv6str(left(X[3])),
                    "   "[1 for (3-Temp)],
                    "; ",
                    "   "[1 for 3-length(cvs(Filsiz_(U[2]+3)%4))],
                    Filsiz,
                    " page",
                    if Filsiz=1 then "; " else "s;",
                    " created ",
                    " "[1 for 9-length(UNM_STDATE(!lh(U[3]),'31))]&UNM,
                    " ",
                    STTIME(!rh(U[3])));
                if INTERACTIVE then begin "interact"
                    print (if X[1] neq PPN then crlf&"  " else ""," = ");
                    NewFile _ inchwl;
                    BRK _ !SKIP!;
                    if NewFile = "?" then begin
                        print("
    One of the following...
      <^R> - rename to old name
      <cr> - skip it
      <^D> - expunge it
      <name><^R> - rename to new name
      <name><cr> - rename to new name

");                     continue "prompt";
                    end;
                end "interact";
                if (BRK=#dc2) and (length(NewFile)=0) then begin
                    chnior(CHAN,X[0],'11);
                    if !SKIP! then begin
                        print(" [okay]",crlf);
                        continue "main loop";
                    end else begin
                        print(" [rename failed]",crlf);
                        if INTERACTIVE then continue "prompt"
                            else continue "main loop";
                        end;
                end;
                if length(NewFile)=0 and BRK neq #eot then continue "main loop";
                X[2] _ cvfil (NewFile,TEMP,X[1]);
                X[3] _left(TEMP)+!rh(X[3]);
                chnior(CHAN,X[0],'11);
                if !SKIP! then begin
                    if BRK neq #eot then print(" [okay]",crlf)
                    else begin
                            print(" [expunged]",crlf);
                            Recpgs_Recpgs+Filsiz;
                            Nopgfil_Nopgfil+1;
                        end;
                    continue "main loop";
                end else begin
                    if BRK neq #dc2 and BRK neq #eot then
                         print("               ");
                    print(" [rename failed]",crlf);
                    continue "prompt";
                end;
                usererr(0,0,"?impossible condition","X");
            end "prompt" until 0; ! loop terminates by CONTINUE;
        end "main loop" until 0; ! loop terminates by DONE;
    end "LISTLOOP" until not length(COMLINE) and BRKCR neq ",";
    if FOUND then
        print (crlf,if not INTERACTIVE and BRK=#cr
            and not CMDSW then crlf else "");
    if Nopgfil>1 then
        print ("Total pages recovered = ",Recpgs,crlf,
            if not Cmdsw then crlf else "");
end "CMDLOOP" until CMDSW; ! loop terminates by DONE or CMDSW true;
Endprog;
end "MAIN";
end $