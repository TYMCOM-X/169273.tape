TITLE	TYPBAT - Types the BAT page - list of bad spots on the disk
SUBTTL	Created 28-May-87 by Joe Smith

	LOC <JOBVER=:137>	;Revision history
EXP	6	;16-Nov-87/JMS	Output logical name with all error messages.
;	5	; 2-Oct-87/JMS	Handle page I/O errors.
;	4	; 7-Jul-87/JMS	Minor formatting changes.
;	3	;11-Jun-87/JMS	Fix CHK0 to check all of BAT vs BT2.
;	2	;29-May-87/JMS	Output range of blocks where appropriate.
;	1	;28-May-87/JMS	Created from TYPBAT routine in ONCDSK.
	RELOC

IF2,<PRINTX License required: RA>
;Note: It is possible to read BAT pages without RA by reading SYS:HOME.SYS
;sequentially, looking for pages that start with SIXBIT/BAT/.

	T4=1+<T3=1+<T2=1+<T1=1+<F=0>>>>
	P4=1+<P3=1+<P2=1+<P1=1+<U=1+T4>>>>
	P=17

	OPDEF	PJRST	[JUMPA 17,]
	OPDEF	SWAPIN	[SETM]
	OPDEF	PERSET	[CALLI -72]
	OPDEF	PAGSTS	[CALLI -71]
	OPDEF	DATUUO	[CALLI -55]
	OPDEF	VCLEAR	[CALLI -66]
	OPDEF	CHANIO	[043B8]
	.CHSMP==43	;Super map function of CHANIO
	CHN==0		;I/O channel

P2BLSH==2		;Pages to blocks
W2PLSH==-^D9		;Words to pages

%BAT= 376000		;Virtual address for reading in first BAT page
  %BAT.N=%BAT_W2PLSH
%BT2=%BAT+1000		;Virtual address for reading in second BAT page
  %BT2.N=%BT2_W2PLSH
;Definitions from (M33)COMMOD.MAC

LPNBAT==2	;Primary BAT is logical page 2
LP2BAT==7	;Secondary BAT is logical page 7
RBREAL==200000	;Denotes valid retrieval pointer
RBUNIT==(377B16);Unit field of ret ptr
RBYUNI:	POINT  8,T2,16	;Unit field (from Ret Ptr in T2)
RBYPNO:	POINT 19,T2,35	;Page field (from Ret Ptr in T2)

BATNAM==0	;CONTAINS SIXBIT /BAT/ FOR IDENTIFICATION
BATFIR==1	;LH=-MAX. POSSIBLE NO. OF WORDS FOR BAD REGIONS MAP PROGRAM
		; AND MONITOR CAN ADD BEFORE PAGE FILLS UP
		;RH=REL ADR. WITHIN THIS PAGE OF FIRST BAD REGION PAIR
		; MAP PROGRAM FORCES LH TO BE EVEN NUMBER.
BATPAT==2	;TOTAL NUMBER OF BAD PAGES

BATCNT==3	;NO. OF DISTINCT BAD REGION WORD PAIRS

BATREG==4	;FIRST BAD REGION WORD GOES HERE.
BRMAX==BATCOD-BATREG	;MAX LENGTH OF AREA FOR APPENDING BAD REGIONS

BATNBB==0	;(1 OF 2 WORDS) NUMBER OF BAD SECTORS-1 IN THIS BAD REGION
  BATNUM==777	;MAX NUMBER OF BAD PAGES IN A REGION-1
  BASNBB==^D9	;BYTE SIZE
  BANNBB==^D8	;BYTE PTR. POS.
MAPBIT==1B9	;SET BY MAP PROGRAM IF DATE IS UNKNOWN TO MAKE NON-ZERO
		;BITS 18-35 ARE DATE OF ENTRY IN TYMCOM-X FORMAT
BAYNBB:	POINT BASNBB,BATNBB(T2),BANNBB		;BYTE PTR

BATELB==1	;(2 OF 2 WORDS) ERROR LOGICAL SECTOR ADR. WITHIN UNIT
		;BLOCK NUMBER IF FORMATTED IN BLOCKS, ELSE PAGE NUMBER

BATCOD==776	;CONTAINS UNLIKELY CODE, LH=0, RH=CODBAT
CODBAT==505050	;UNLIKELY CODE FOR BAT PAGE
BATSLF==777	;BITS 0-16=0, RH=THIS PAGE ADDR WITHIN UNIT

;Definitions for DSKCHR values
	UNICHR==5		;Unit characteristics
	UNIPPU==6		;Pages per unit
	UNILOG==14		;Logical unit number (such as DSKB7)
	UNINAM==15		;Name of unit (such as BPA11)
	UNIHID==16		;Home page ID (such as 220017)

;Definitions for UNICHR
  ;;1B0		;;Sign bit set if formatted in pages, clear if in blocks
UNYBPR:	POINT  8,UNICHR(U),8	;Blocks per record (1 or 4)
UNYBPT:	POINT  9,UNICHR(U),17	;Blocks per track, for BPXKON,RMXKON
UNYPPT:	POINT  7,UNICHR(U),15	;Pages per track, for APXKON,CPXKON
UNYBPY:	POINT 18,UNICHR(U),35	;Blocks per cylinder, for BPXKON,RMXKON
UNYPPY:	POINT 16,UNICHR(U),33	;Pages per cyl, for FILIO,APXKON,CPXKON,REFSTR
SUBTTL	Main program

STR:	SIXBIT	/DSKB/
START:	JFCL			;No CCL entry
	MOVE	P,[IOWD PDLEN,PDL]
	MOVEI	U,DSKBLK	;LH is unit #, RH points to unit data block
	MOVE	T2,STR
	MOVEM	T2,DSKBLK+0
	PUSHJ	P,PRNAME	;Output "DSKB"
	MOVE	T1,[DSKLEN,,DSKBLK]
	DSKCHR	T1,		;Get stats on first unit in STR
	  HALT
	MOVEI	T1,[ASCIZ / has /]
	PUSHJ	P,CONMES
	MOVE	T1,UNIPPU(U)	;Pages per unit
	LDB	T2,UNYPPY	;Pages per cylinder
	IDIV	T1,T2		;# of cylinders
	PUSHJ	P,PRTDIG
	MOVEI	T1,[ASCIZ / cylinders, /]
	PUSHJ	P,CONMES
	LDB	T1,UNYBPY	;Blocks per cylinder
	TRO	T1,3		;Round up (BPY is rounded down to multiple of 4)
	LDB	T2,UNYBPT	;Blocks per track
	IDIV	T1,T2		;Tracks per cylinder
	PUSHJ	P,PRTDIG
	MOVEI	T1,[ASCIZ / heads, /]
	PUSHJ	P,CONMES
	LDB	T1,UNYBPT	;Blocks per track
	LDB	T4,UNYBPR	;Blocks per record
	IDIV	T1,T4		;Records per track
	PUSHJ	P,PRTDIG
	MOVEI	T1,[ASCIZ / records per track, /]
	CAIN	T4,1
	 MOVEI	T1,[ASCIZ / blocks per track, /]
	CAIN	T4,4
	 MOVEI	T1,[ASCIZ / pages per track, /]
	PUSHJ	P,CONMES
	MOVE	T1,UNIPPU(U)
	PUSHJ	P,PRTDIG
	MOVEI	T1,[ASCIZ / pages per unit./]
	PUSHJ	P,CRLFOP
	PUSHJ	P,CRLF		;Blank line

;Loop to type out BAT pages for each unit of the disk structure

NEXTU:	PUSHJ	P,REDBAT	;Read in both BAT pages
	  JRST	DONEU		;Can't read, maybe no such unit
	PUSHJ	P,TYPBAT	;Display contents
;*;	PUSHJ	P,CRLF
DONEU:	ADD	U,[1,,0]	;Increment LH
	TLNN	U,100		;Stop after 77
	 JRST	NEXTU		;Do next unit of STR
	MOVEI	T1,[ASCIZ /Done./]
	PUSHJ	P,CRLFOP
	EXIT	1,
	EXIT
SUBTTL	TYPBAT - Count number of bad spots

TYPBAT:		REPEAT 0,<;The next few lines are in ONCDSK only
	MOVEI	T1,[ASCIZ /Type unit name  /]
	PUSHJ	P,CONMES
	PUSHJ	P,OPOUT
	PUSHJ	P,GETUNI
	  POPJ	P,
	SETZM	BATMAN
	PUSHJ	P,CHKBAT
	  JFCL			;IGNORE ERRORS.
>  ;End REPEAT 0
	MOVE	T2,UNINAM(U)	;Physical unit name
	PUSHJ	P,PRNAME
	MOVE	T2,UNINAM(U)
	TRNN	T2,7700		;BPx0 thru BPx7?
	 PUSHJ	P,PRSPC		;Yes, output leading blank
	MOVE	T2,UNILOG(U)	;Logical name (such as DSKB1)
	TRNN	T2,77		;DSKB0 thru DSKB7?
	 PUSHJ	P,PRSPC		;Yes, output leading blank
	MOVEI	T3,"("
	PUSHJ	P,COMTYO
	PUSHJ	P,PRNAME	;DSKBnn
	MOVEI	T3,":"
	PUSHJ	P,COMTYO
	MOVE	T2,UNIHID(U)	;Home block ID
	PUSHJ	P,PRNAME
	MOVEI	T3,")"
	PUSHJ	P,COMTYO
	MOVE	T2,%BAT+BATFIR	;Get AOBJN pointer
	ADDI	T2,%BAT
	SETZB	P3,P1		;P1 IS PAGE COUNT, P3 REGION COUNT.
TYPBT1:	SKIPN	BATNBB(T2)
	 JRST	TYPBT2		;DONE.
	ADDI	P3,1		;1 REGION.
	LDB	T1,BAYNBB	;(uses T2 as index reg)
	ADDI	P1,1(T1)	;THIS MANY PAGES.
	AOBJP	T2,TYPBT2
	AOBJN	T2,TYPBT1
TYPBT2:	MOVEI	T1,[ASCIZ /  (counts do not agree)/]
	CAMN	P1,%BAT+BATPAT	;Page total
	CAME	P3,%BAT+BATCNT	;Count of regions
	 PUSHJ	P,CONMES
	MOVE	T1,P1
	PUSHJ	P,PR6DIG	;Output number in 6-character field
	MOVEI	T1,[ASCIZ / bad pages in /]
	PUSHJ	P,CONMES
	MOVE	T1,P3
	PUSHJ	P,PRTDIG
	MOVEI	T1,[ASCIZ / distinct regions./]
	PUSHJ	P,CRLFOP
	JUMPE	P3,TYPBT9	;Just CRLF if none
	MOVEI	T1,[ASCIZ /Do you want a list of bad spots? /]
	PUSHJ	P,YESNO		;Skip if "Y"
	  POPJ	P,		;Done if "N" or no bad spots
;Output the bad spots

	MOVE	P2,%BAT+BATFIR	;Reset AOBJN pointer
	ADDI	P2,%BAT
TYPBT3:	SKIPN	BATNBB(P2)	;Zero marks end
	 JRST	TYPBT9
	MOVE	T2,P2		;Set up T2 for BAYNBB
	LDB	T1,BAYNBB	;Get repeat count
	JUMPN	T1,TYPBT4	;Zero means single page
	MOVEI	T1,[ASCIZ / 1 page  at /]
	PUSHJ	P,CONMES
	JRST	TYPBT5

TYPBT4:	ADDI	T1,1		;Add 1 to repeat count
	PUSHJ	P,PR2DIG	;Output leading blank if needed
	MOVEI	T1,[ASCIZ / pages at /]
	PUSHJ	P,CONMES

TYPBT5:	MOVE	T1,BATELB(P2)	;Get page address
	PUSHJ	P,PRT22A	;19-bit octal number
	MOVE	T1,BATELB(P2)	;Page address
	LSH	T1,P2BLSH	;Convert to blocks
	LDB	T2,UNYBPY	;Blocks per cylinder
	IDIV	T1,T2
	LDB	T3,UNYBPT	;Blocks per track
	IDIV	T2,T3
	LDB	T4,UNYBPR	;Blocks per record
	SKIPN	T4		;If old monitor,
	 MOVEI	T4,1		; formatted in blocks
	IDIV	T3,T4
;*;	ADDI	T2,1		;SYSTAT and ERRCHK used to start with head 1
	ADDI	T3,1		;Everyone numbers records starting at 1
	PUSH	P,T3		;Record (T4 = block in record = 0)
	PUSH	P,T2		;Head
	PUSH	P,T1		;Cyl
	MOVEI	T1,[ASCIZ / = cylinder/]
	PUSHJ	P,CONMES
	POP	P,T1
	PUSHJ	P,PR4DIG
	MOVEI	T1,[ASCIZ /, head/]
	PUSHJ	P,CONMES
	POP	P,T1
	PUSHJ	P,PR3DIG
	MOVEI	T1,[ASCIZ /, record/]	;Entire page is 1 record if in pages
	SKIPL	UNICHR(U)		;If formatted in blocks,
	 MOVEI	T1,[ASCIZ /, records/]	; all 4 blocks are marked as unuseable
	PUSHJ	P,CONMES
	MOVE	T1,(P)
	PUSHJ	P,PR3DIG
	POP	P,T1
	SKIPGE	UNICHR(U)	;Formatted in pages?
	 JRST	TYPBT6		;Yes, done
	MOVEI	T3,"-"		;No, output range of blocks
	PUSHJ	P,COMTYO
	ADDI	T1,3		;4th block in page
	LDB	T2,UNYBPT
	CAMLE	T1,T2		;If end block is past # of blocks per track
	 SUB	T1,T2		; then it is on the next track
	PUSHJ	P,PR2DIG	;Output ending block number
TYPBT6:	PUSHJ	P,SPACE3
	HRRZ	T2,BATNBB(P2)	;Get date
	PUSHJ	P,TYPDAT	;Convert and output it
	PUSHJ	P,CRLF
	AOBJP	P2,CPOPJ	;Increment by 2
	AOBJN	P2,TYPBT3	;Loop

TYPBT9:	SKIPGE	ERRCNT		;Blank if inconsistency errors
	SKIPE	%BAT+BATCNT	;If any were found,
	 PUSHJ	P,CRLF		; output a blank link
	POPJ	P,		;End of TYPBAT
SUBTTL	Read BAT pages

;REDBAT - read BAT pages.  U has unit # in LH

REDBAT:	MOVE	T1,STR		;Structure name
	MOVEM	T1,DSKBLK+0
	HLRZ	T1,U		;Unit number
	IDIVI	T1,10		;Divide by 8
	ADDI	T2,'0'		;Unit # in sixbit
	DPB	T2,[POINT 6,DSKBLK+0,29]
	DPB	T1,[POINT 6,DSKBLK+0,35] ;Blank out 6th character
	JUMPE	T1,REDBT1	;Done if single digit
	ADDI	T1,'0'		;2 digits
	DPB	T1,[POINT 6,DSKBLK+0,29] ;Tens
	DPB	T2,[POINT 6,DSKBLK+0,35] ;Units
REDBT1:	MOVE	T1,[DSKLEN,,DSKBLK]
	DSKCHR	T1,		;Get disk characteristics
	  POPJ	P,		;No such unit
	SETZB	T1,T3
	MOVE	T2,DSKBLK+0	;Device name (same as UNILOG(U))
	OPEN	CHN,T1		;Open channel to disk
	  POPJ	P,		;Should never happen
	SETOM	ERRCNT		;Reset error counter

;Map the pages into core

	MOVE	T1,[2B17+%BAT.N]
	VCLEAR	T1,		;Unmap previous contents
	  JFCL
	MOVE	T1,[.CHSMP,,CHN];Super-map
	CHANIO	T1,[1B7+1B17+%BAT.N
		    LPNBAT]	;Primary BAT page
	  JRST	REDERR
	MOVE	T1,[.CHSMP,,CHN];Super-map
	CHANIO	T1,[1B7+1B17+%BT2.N
		    LP2BAT]	;Secondary BAT page
	  JRST	REDERR
	MOVE	T1,[1B7+2B17+%BAT.N]
	PERSET	T1,		;Ignore I/O errors on these 2 pages
	  JRST	REDERR

	SWAPIN	T1,%BAT		;Read in 1st page
	MOVEI	T2,%BAT.N
	PAGSTS	T2,		;Check on 1st BAT page status
	  JRST	REDERR
	MOVEI	T1,[ASCIZ /Read error on 1st BAT page/]
	TLNE	T2,(3B5)	;Any errors?
	 PUSHJ	P,STLFOP

	SWAPIN	T1,%BT2		;Read in 2nd page
	MOVEI	T2,%BT2.N
	PAGSTS	T2,		;Check on 1st BAT page status
	  JRST	REDERR
	MOVEI	T1,[ASCIZ /Read error on 2nd BAT page/]
	TLNE	T2,(3B5)	;Any errors?
	 PUSHJ	P,STLFOP

;Consistancy check on BAT page

REDBT2:	MOVSI	T2,'BAT'	;First word of the page should be SIXBIT/BAT/
	MOVEI	T3,CODBAT	;Word 776 should be this code
	MOVEI	T1,[ASCIZ /First BAT page not initialized!/]
	CAMN	T2,%BAT+BATNAM	;Page fault to read in page, compare
	CAME	T3,%BAT+BATCOD
	 PUSHJ	P,STLFOP
	MOVEI	T1,[ASCIZ /Second BAT page not initialized!/]
	CAMN	T2,%BAT+BATNAM	;Page fault to read in page, compare
	CAME	T3,%BAT+BATCOD
	 PUSHJ	P,STLFOP

;Verify self pointers

	HLRZ	T1,U		;Unit #
	MOVE	T2,[RBREAL,,LPNBAT]
	DPB	T1,RBYUNI	;This is what 1st BAT pointer should look like
	MOVE	T3,T2		;Duplicate
	ADDI	T3,LP2BAT-LPNBAT;This is what 2nd BAT pointer should look like
	CAMN	T2,%BAT+BATSLF
	CAME	T3,%BT2+BATSLF
	 SKIPA			;Mismatch
	  JRST	CHK0		;OK
	MOVEI	T1,[ASCIZ /BAT self pointers are not set up properly./]
	PUSHJ	P,STLFOP	;Output error message
	MOVEI    T1,[ASCIZ /Self pointers = /]
	PUSHJ	P,STMES
	MOVE	T1,%BAT+BATSLF
	PUSHJ	P,HWDPNT
	PUSHJ	P,SPACE3
	MOVE	T1,%BT2+BATSLF
	PUSHJ	P,HWDPNT
	PUSHJ	P,CRLF

;Verify that the second BAT page is a duplicate of the first

CHK0:	MOVSI	P1,-777		;Compare first 511 words
	MOVEI	P2,0		;No mismatches yet
CHK1:	MOVE	T3,%BAT(P1)
	CAME	T3,%BT2(P1)
	 PUSHJ	P,BATDIF	;The two BAT pages are not identical
	AOBJN	P1,CHK1
CPOPJ1:	AOS	(P)
CPOPJ:	POPJ	P,


REDERR:	MOVEI	T1,[ASCIZ /
? Error trying to read BAT pages - do you have RA (Read Absolute) license?/]
	PJRST	CRLFOP		;Give non-skip return

;Here if BAT pages do not agree

BATDIF:	MOVEI	T1,[ASCIZ /Mismatch primary BAT vs secondary BAT./]
	SKIPN	P2		;Has message been output before?
	 PUSHJ	P,STLFOP
	ADDI	P2,1		;Note it
	MOVEI	T1,[ASCIZ /BAT+/]
	PUSHJ	P,STMES
	HRRZ	T1,P1		;The index
	PUSHJ	P,PRTOCT
	MOVEI	T1,[ASCIZ ./  .]
	PUSHJ	P,CONMES
	MOVE	T1,%BAT(P1)	;Primary BAT data
	PUSHJ	P,HWDPNT	;Output 36 bits octal
	PUSHJ	P,SPACE3
	MOVE	T1,%BT2(P1)	;Secondary BAT data
	PUSHJ	P,HWDPNT
	PJRST	CRLF

;Output unit name then message from T1

STMES:	TLZA	T1,400000	;Clear flag
STLFOP:	 TLO	T1,400000	;Set flag
	PUSH	P,T1		;Save message
	AOSN	ERRCNT		;First error message?
	 PUSHJ	P,CRLF		;Yes, seperate with blank line
	MOVE	T2,UNINAM(U)
	PUSHJ	P,PRNAME	;Print physical name
	MOVEI	T1,[ASCIZ /: /]
	PUSHJ	P,CONMES
	POP	P,T1		;Pointer to message
	JUMPGE	T1,CONMES	;No CRLF if flag not set
	PJRST	CRLFOP		;Output it and CRLF
;Routine to output the date

TYPDAT:	JUMPE	T2,NODATE	;Call with 14-bit TYMSHARE date in T2
	MOVEI	T1,0		;No time-of-day
	MOVSI	P4,400020	;Convert from TYM-GMT to DEC-local
	PUSHJ	P,DATCOM	;Returns 15-bit date in T2
	  POPJ	P,		;Illegal date
	IDIVI	T2,^D<31*12>	;T2/Year
	ADDI	T2,^D64
	PUSH	P,T2
	IDIVI	T3,^D31		;T3/Month, T4/Day
	PUSH	P,T3
	MOVEI	T1,1(T4)
	PUSHJ	P,PR2DIG	;Day (with leading blank if needed)
	POP	P,T1
	MOVE	T1,MONTAB(T1)	;"-Mmm-"
	MOVEM	T1,DATBLK+0	;DATBLK+1 has 0 in bits 0-6
	MOVEI	T1,DATBLK+0
	PUSHJ	P,CONMES	;Output month
	POP	P,T1
	PJRST	P,PR2DIG	;Year

NODATE:	MOVEI	T1,[ASCIZ /(no date)/]
	PJRST	CONMES

;User-mode equivilant of DATCOM routine
DATCOM:	MOVEM	T2,DATBLK+0	;Date
	MOVEM	T1,DATBLK+1	;Time
	MOVEM	P4,DATBLK+2	;Format
	MOVEI	T1,DATBLK
	DATUUO	T1,		;Convert from 14-bit TYM-GMT to 15-bit DEC
	  POPJ	P,
	MOVE	T2,DATBLK+0	;Date
	MOVE	T1,DATBLK+1	;Time
	JRST	CPOPJ1		;Success

MONTAB:	ASCII/-Jan--Feb--Mar--Apr--May--Jun--Jul--Aug--Sep--Oct--Nov--Dec-/
SUBTTL	Subroutines (extracted from ONCDSK, ERRCON, etc)

YESNO:	JRST	CPOPJ1		;Output message in T1, get answer, skip if "Y"

SPACE3:	MOVEI	T1,[ASCIZ /   /];3 blanks
	PJRST	CONMES

CRLFOP:	PUSHJ	P,CONMES	;Output message T1 points to first
	PJRST	CRLF

DECLOP:	PUSHJ	P,TYPDEC	;T1 points to ASCIZ string, P1 has number
CRLF:	MOVEI	T1,[ASCIZ /
/]
CONMES:	TLCE	T1,377777	;If LH is 000000
	TLCN	T1,377777	; or 777777
	 HRLI	T1,(POINT 7,)	;Make byte pointer
CONLOP:	ILDB	T3,T1		;Get a char
	JUMPE	T3,CPOPJ	;Stop at null
	PUSHJ	P,COMTYO	;Output char in T3
	JRST	CONLOP

HWDPNT::PUSH	P,T1		;SAVE T1 FOR RH
	HLRZS	T1		;KEEP JUST LH
	PUSHJ	P,OCTPNT	;PRINT AS 6 OCTAL DIGITS
PRT22B:	MOVEI	T1,[ASCIZ /,,/]	;PRINT THE TWO COMMAS
	PUSHJ	P,CONMES
PRT22C:	POP	P,T1		;RESTORE T1 FOR RH
	PJRST	OCTPNT		;PRINT RH AND RETURN

;SUBROUTINE TO PRINT 22 BIT OCTAL ADDRESS
;CALL:	MOVE	T1,22 BIT ADDRESS
;	PUSHJ	P,PRT22A
;	ALWAYS RETURN

PRT22A::PUSH	P,T1		;SAVE 22 BIT ADDRESS
	HLRZ	T1,(P)		;GET HIGH ORDER HALF
	JUMPE	T1,PRT22C	;IS IT 0 (USUALLY EXCEPT BIG SYSTEMS)
	 PUSHJ	P,PRTDI8	;NO, PRINT AS LEADING 0 SUPPRESSED OCTAL
	JRST	PRT22B		;PRINT ",," AND 6 DIGITS

OCTPNT::HRLZ	T1,T1		;MOVE TO LH FOR ROTATING
	TRO	T1,700000	;SETUP AN END FLAG

OCTP1:	ROT	T1,3		;GET NEXT OCTAL DIGIT
	TLNN	T1,777777	;WAS THAT FLAG?
	 POPJ	P,		;YES, DO NOT PRINT IT
	PUSH	P,T1		;SAVE T1 OVER I/O ROUTINE
	PUSHJ	P,PRTNUM	;NO, PRINT OCTAL DIGIT
	POP	P,T1		;RESTORE T1
	HRRI	T1,0		;CLEAR RH
	JRST	OCTP1		;GET NEXT OCTAL DIGIT
;Decimal output routines

PR6DIG:	CAIGE	T1,^D100000	;Output leading blanks if not 6 digits
	 PUSHJ	P,PRSPC
PR5DIG:	CAIGE	T1,^D10000
	 PUSHJ	P,PRSPC
PR4DIG:	CAIGE	T1,^D1000
	 PUSHJ	P,PRSPC
PR3DIG:	CAIGE	T1,^D100
	 PUSHJ	P,PRSPC
PR2DIG:	CAIGE	T1,^D10
	 PUSHJ	P,PRSPC
	JRST	PRTDIG

TYPDEC:	PUSHJ	P,CONMES	;Output message in T1
	MOVE	T1,P1		;Then number in P1
RADX10:
PRTDIG::IDIVI	T1,12		;DIVIDE BY 10
	HRLM	T2,(P)		;RT ON PD LIST
	JUMPE	T1,.+2		;FINISHED?
	PUSHJ	P,PRTDIG	;NO, CALL S OR F
PRTNMM:	HLRZ	T1,(P)		;YES, GET LAST NUMBER
PRTNUM:	MOVEI	T3,"0"(T1)	;CONVERT TO ASCII
	PJRST	COMTYO		;AND TYPE IT OUT

;RECURSIVE OCTAL PRINT ROUTINE
;CALL:	MOVE T1,<OCTAL NUMBER>
	PUSHJ P,PRTOCT

PRTDI8::
PRTOCT::IDIVI	T1,10		;DIVIDE BY 8
	HRLM	T2,(P)		;PUT ON STACK
	JUMPE	T1,PRTNMM	;FINISHED?
	PUSHJ	P,PRTDI8	;NO - LOOP
	PJRST	PRTNMM		;OUTPUT

;Routine to output sixbit name
;CALL	MOVE U,ADDRESS OF LDB
;	MOVE T2,NAME
;	PUSHJ P,PRNAME

PRNAME::JUMPE	T2,CPOPJ	;Stop when no more (no trailing blanks)
	MOVEI	T1,0
	LSHC	T1,6		;SHIFT IN NEXT CHAR.
	MOVEI	T3,40(T1)	;CONVERT SIXBIT TO ASCII
	PUSHJ	P,COMTYO	;OUTPUT CHARACTER
	JRST	PRNAME
;All output is done via T3 and COMTYO

PRSPC:	MOVEI	T3," "
COMTYO:	OUTCHR	T3		;Low level output routine
	POPJ	P,

PDL:	BLOCK	<PDLEN==20>		;Stack
DSKBLK:	BLOCK	<DSKLEN==UNIHID+1>	;For DSKCHR uuo
DATBLK:	BLOCK	3			;For DATUUO
ERRCNT:	BLOCK	1			;Count of error message this unit

	END	START

     