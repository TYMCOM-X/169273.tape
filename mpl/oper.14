TITLE OPER - GIVE LICENSE TO OPERATORS
if1,<printx License required: WC RC OP SY GD TD ST JL AC XC RA WA>

JOBVER==137
LOC JOBVER
	14		; Mar '82 /WRS
RELOC

T1=1
T2=2
T3=3
T4=4

NM1=7
NM2=10
DESLIC=11
ACCUM=12
T=13
C=14
F=15
PNTR=16
P=17

PSW==1	;CHANEL FOR PASSWORD FILE
TTY==2

LICTAB==-20
LICWC==(1B0)
LIKLOK==14
JBTPRV==6
TYMEX==200
.GTAUN==-23	;get AUN for tattle record
LICOPR==1B20	;OPER LICENSE

BFNM1==0
BFNM2==1
BFPSW==2
BFLIC==3

ARRAY PDL[40],BUF[1000],IBUF[3]

DEB==0

STPT:	JFCL
	RESET
	MOVE P,[IOWD 40,PDL]
	INIT PSW,16
IFN DEB,<SIXBIT /DSK/>
IFE DEB,<SIXBIT /SYS/>
	0
	JRST NODSK
	INIT TTY,0
	SIXBIT /TTY/
	IBUF
	JRST GETOUT
	LOOKUP PSW,PASNAM
	 JRST NOPFIL
IFE DEB,<MOVE T1,PASNAM+LIKLOK
	TRNN T1,LICWC
	JRST NOPFIL>
	SETZB DESLIC,SAVCHR#
	SETZM CANTWK#			;[12] can't play with license yet
	RESCAN
	INPUT TTY,0		       ;PRIME INPUT ROUTINE
	PUSHJ P,SCAN
	JUMPN C,GETBAD		       ;SHOULD NOT BE A SPECIAL CHR THERE
	MOVE T1,ACCUM
	MOVE T2,[SIXBIT /OPER/]
FNDCMN:	TRNE T1,77		       ;FIND END OF STRING READ
	JRST CKMTCH		       ;THATS IT
	LSHC T1,-6		       ;RIGH JUSTIFY. SHIFTS 0'S INTO T2
	JRST FNDCMN
CKMTCH:	CAME T1,T2
	JRST	[SETZM SAVCHR
		INPUT TTY,0
		JRST .+1]	       ;TRY ON NEXT LINE
SCNLIC:	PUSHJ P,SCAN
	JUMPE C,FNDLIC
	CAIE C,4			;^D is good for XEXEC hackers
	 CAIN C,33			;<ESC> MEANS PASSWORD TO FOLLOW
	  JRST DEFALT
	CAIGE C," "
	JRST ENDINS		       ;TAKE AS END
	JRST SCNLIC		       ;OTHERWISE IGNORE SPECIALS

FNDLIC:	MOVSI T,-TBLEN
        CAME ACCUM,LICABR(T)
	 AOBJN T,.-1
	JUMPGE T,GETBAD		       ;ERROR IF NOT FOUND
	LDB F,LICBP(T)		       ;SEE WHAT CURRENT VAULUE IS
	CAMGE F,LICVAL(T)	       ;IN CASE TYPES RF RP
         MOVE F,LICVAL(T)
        DPB F,LICBP(T)
	MOVE F,LICTWK(T)		;[12] see if we can adjust the lic
	IORM F,CANTWK			;[12] for fixing rf, wr, etc.
	JRST SCNLIC
DEFALT:	SETZM SAVCHR
	SETSTS TTY,200
	PUSHJ P,CNVNAM		;convert user name to oper name
	SKIPN DESLIC		; <all> is default if break is <esc>
	  SETOM DESLIC
	JRST PASS

ENDINS:	INPUT TTY,0		       ;GET TO NEXT LINE
        PUSHJ P,RDNAM
	SETSTS TTY,200
	PUSHJ P,PROMPT

PASS:	INPUT TTY,0		       ;NEXT LINE
	SKIPN DESLIC
	  MOVEI DESLIC,LICOPR	; OP is default if break is <cr>
	MOVEM DESLIC,TCLICR	; save license requested for tattle tale
	PUSHJ P,RDPAS		; read and hash password
	MOVE T1,X		; get hash for password given by user
	MOVEM T1,TCHASH		; save it for tattle tale
	ifn <1+nm1-nm2>,<printx NM1,NM2 are not sequential!>
	DMOVEM NM1,TCNAME	; save the name for tattle tale
	SETZM TCERR		; no errors yet!
	PUSHJ P,FNDNAM	       	       ;lookup name in file
	  JRST [MOVEI T1,TCERRn	       ;NAME NOT IN FILE
		MOVEM T1,TCERR
		PUSHJ P,TATTLE
		JRST GETBAD]
	MOVE T1,X
	CAME T1,BUF+BFPSW(PNTR)
	  JRST [MOVEI T1,TCERRp	       ;Passwords don't match
		MOVEM T1,TCERR
		PUSHJ P,TATTLE
		JRST GETBAD]
	HRRZ T2,BUF+BFLIC(PNTR)	; license we can have
	SKIPGE DESLIC		; if DESLIC is <0, flag to get all
	  HRRZ DESLIC,T2	; give him all he's allowed

brk:	SKIPN CANTWK		; [12] can we play with this lic?
	 JRST TWK2		; [12] no, don't try
	LDB T3,[POINT 2,T2,35]	; [12] see what we can set for write
	LDB T4,[POINT 2,DESLIC,35] ; [12] what did we ask for?
	JUMPE T3,TWK1		; [12] if can't have any, don't try
	CAILE T4,(T3)		; [12] ask for more than we can have?
	 DPB T3,[POINT 2,DESLIC,35]
TWK1:	LDB T3,[POINT 2,T2,33]	; [12] likewise for read
	LDB T4,[POINT 2,DESLIC,33]
	JUMPE T3,TWK2		; [12] if can't have any, don't try
	CAILE T4,(T3)
	 DPB T3,[POINT 2,DESLIC,33]
TWK2:

	HRRZ T1,DESLIC		; license we want
	MOVEM DESLIC,TCLICR	; save as license requested
	MOVEI T,T1
	HRLI T,1
	CHKLIC T,		; find out what we can have from sys
	HRROS T			; keep our license for writting stream

DOSET:	SETLIC T,		; try to set that
	MOVEM T,TCLICG		; save in case GETTAB fails
        HRROI T,LICTAB
        GETTAB T,
	 SKIPA
	  MOVEM T,TCLICG	; save license granted for tattle tale
	PUSHJ P,TATTLE	       	; do this now - get it out of the way
	HRRZ T1,TCLICG		; restore license obtained
	CAIN DESLIC,(T1)	; did we get all we wanted?
	 JRST GETFIN	       	; yes - go away
	OUTSTR [ASCIZ /
Did not set/]		       	; no - print msg, go find whats missing
	MOVSI T1,-TBLEN
	MOVEI T2,T	       	; this is RH of kludge byte pointer
CHKLP:	LDB C,LICBP(T1)	       ; get what we asked for
	CAME C,LICVAL(T1)      ; did we ask for this license?
	 JRST NOCHK	       ; no - go on to next
	HLL T2,LICBP(T1)       ; kludge byte pointer to T
	LDB C,T2	       ; get what we got
	SKIPN LICTWK(T1)	; [12] ignore the "tweakable" names
	CAMN C,LICVAL(T1)	; did we get it?
	 JRST NOCHK		; [12] yes or ignored
	OUTSTR LICFUL(T1)	; no - type its name
NOCHK:	AOBJN T1,CHKLP
GETFIN:	SETSTS TTY,0	       ; turn echo back on, etc.
	OUTSTR [0]	       ; make sure it happens right away
GETOUT:	EXIT 1,
	JRST .-1

GETBAD:	SETSTS TTY,0
	CLRBFI	;CLEAR BUFFER IN CASE OF TYPE AHEAD
	OUTSTR [BYTE(7)15,12,7,"?"]
	JRST GETOUT
NODSK:	OUTSTR [ASCIZ /CAN NOT INIT DISK/]
	JRST GETOUT

NOPFIL:	OUTSTR [ASCIZ /NO PASSWORD FILE/]
	JRST GETOUT

PASNAM:	14
	0
	SIXBIT /DRWSPR/
	SIXBIT /EPO/
	REPEAT 11,<0>

COM:	IOWD 1000,BUF
	0

CPOPJ1:	AOS (P)
	POPJ P,

TATREC:	44B8+TATSIZ		; type, job, termid, length
	block 1			; date(days past),,time(secs GMT)
TCAUN:	block 1			; .GTAUN login PPN
	SIXBIT "OPER"		; cusp name
TCNAME:	block 2			; Radix-50 
TCHASH:	block 1			; Hash of password supplied
TCLICR:	block 1			; License requested
TCLICG:	block 1			; License Granted
TCERR:	block 1			; Reason for failure:
    TCERR0==0			; no error
    TCERRN==1			; name not valid
    TCERRP==2			; password didn't match
    TCERRS==3			; not authorized on this system
TATSIZ==.-TATREC

;	call TATTLE to write a tattle tale record

TATTLE:	PJOB	T1,
	DPB	T1,[point 9,TATREC,17]
	HRROI	T1,.GTAUN
	GETTAB	T1,
	 HALT	.
	MOVEM	T1,TCAUN
	MOVEI 	T1,TATREC
	PUTSAR 	T1,
	 SKIPN 	T1		; no accounting - oh well
	  POPJ 	P,
	OUTSTR 	[asciz "?fatal PUTSAR error"]
	EXIT 	1,		; planned loophole
	POPJ 	P,

ARRAY X[5]

RDPAS:	MOVE T1,[555555555555]
	MOVEM T1,X
	MOVEM T1,X+2
	MOVEM T1,X+4
	MOVE T1,[361275431652]
	MOVEM T1,X+1
	MOVEM T1,X+3
	MOVEI T3,0
PSWLP:	PUSHJ P,GNCH
	CAIE C,15
	CAIN C,12
	POPJ P,
	ADDM C,X
	ADDM C,X+3
	MOVEI T4,40
RAND:	MOVE T1,X(T3)
	MUL T1,[5*5*5*5*5*5*5*5*5*5*5*5*5*5*5]
	ADDM T2,X+1(T3)
	CAIE T3,3
	AOJA T3,RAND1
	MOVE T3,X+4
	ADDM T3,X
	LSH T3,-42
RAND1:	SOJG T4,RAND
	JRST PSWLP
	DEFINE CHRCNV
<	X1 (40,0)
	X1 (100,52)
	X1 (52,52)
	X1 (47,53)
	X1 (44,54)
	X2 (54,72,33)
	X2 (101,132,1)
>

	DEFINE X1 (A,B)
<	RELOC CHRTAB+A-40
	B
	RELOC>

	DEFINE X2(A,B,C)
<	XX=C
	RELOC CHRTAB+A-40
	REPEAT B-A+1,<XX
	XX==XX+1>
	RELOC>

CHRTAB:	REPEAT 100,<54>
	CHRCNV

ACMCHR:	CAILE C,140
	SUBI C,40	;CONVERT UPPER CASE
ACMCH2:	MOVE T3,NM1	;SAVE HIGH ORDER PART
	MOVE NM1,NM2
	IMULI T3,^D45
	MULI NM1,^D45
	ADD NM1,T3	;DOUBLE PRECISION MULTIPLY
	ADD NM2,CHRTAB-40(C)
	POPJ P,

CNVNAM: HRROI T1,-22
	GETTAB T1,
	 JRST GETBAD
	MOVEM T1,UNM
	HRROI T1,-21
	GETTAB T1,
	 JRST GETBAD
	MOVEM T1,UNM+1
	MOVE T1,[POINT 6,UNM]
	MOVEI T2,^D12
	SETZB NM1,NM2
CNV1:	ILDB C,T1
	ADDI C,40
	PUSHJ P,ACMCHR
	SOJG T2,CNV1
	POPJ P,

UNM:	BLOCK 2

RDNAM:	SETZB NM1,NM2
	MOVEI T2,^D12
RDNM0:	PUSHJ P,GNCH
	CAIN C," "
	 JRST RDNM0
	SKIPA
RDNM1:	 PUSHJ P,GNCH
	CAIGE C,40
	 JRST FINNAM
	PUSHJ P,ACMCHR
	SOJG T2,RDNM1
	POPJ P,

FINNAM:	MOVEI C," "
	PUSHJ P,ACMCH2
	SOJG T2,FINNAM
	POPJ P,
PROMPT:	HRROI T1,JBTPRV
	GETTAB T1,
	 MOVEI T1,0
	TRNN T1,TYMEX
	JRST	[OUTSTR [ASCIZ /
./]
		POPJ P,]
	OUTSTR [ASCIZ /
-/]
	POPJ P,

FNDNAM:	MOVEI T1,1
	MOVEM T1,FILOC#
FNDLP1:	USETI PSW,@FILOC
	INPUT PSW,COM
	STATZ PSW,20000
	POPJ P,
	MOVSI PNTR,-^D73
FNDLP2:	CAMN NM1,BUF+BFNM1(PNTR)
	CAME NM2,BUF+BFNM2(PNTR)
	SKIPA
	JRST CPOPJ1
FNDLP3:	ADDI PNTR,6
	AOBJN PNTR,FNDLP2
	MOVEI T1,4
	ADDM T1,FILOC
	JRST FNDLP1


SCAN:	SKIPN C,SAVCHR
SCAN1:	PUSHJ P,GNCH
	CAIN C," "
	JRST SCAN1
        PUSHJ P,LET
        JRST SCNAM
	SETZM SAVCHR
        POPJ P,
SCNAM:  SETZM ACCUM
        MOVE T,[POINT 6,ACCUM]
SCNAM1:	SUBI C,40
	TLNE T,770000
	IDPB C,T
	PUSHJ P,GNCH
	PUSHJ P,LET
	JRST SCNAM1
	MOVEM C,SAVCHR
	MOVEI C,0
	POPJ P,

NUM:    CAIL C,"0"
        CAILE C,"9"
	AOS (P)
        POPJ P,
LET:    CAIL C,"A"
        CAILE C,"Z"
	JRST NUM
	POPJ P,

GNCH:	SOSGE IBUF+2
	INPUT TTY,0
	ILDB C,IBUF+1
	JUMPE C,GNCH
	CAILE C,137
	SUBI C,40	;CONVERT TO UPPER CASE
	POPJ P,
DEFINE LICENS <
	X (775617,18,35,ALL,1)	; everything thats defined 
	X (371416,18,35,MOST,1)	; RC OP SY GD TD JL AC RA WF
	X (240016,18,35,SOME,1)	; RC SY RA WF
	X (240014,18,35,READ,1)	; RC SY RA
	X (000000,18,35,NONE,0)
	X (1,1,18,WC,0)
        X (1,1,19,RC,0)
        X (1,1,20,OP,0)
        X (1,1,21,SY,0)
        X (1,1,22,GD,0)
        X (1,1,23,TD,0)
        X (1,1,24,ST,0)
        X (1,1,26,JL,0)
	X (1,1,27,AC,0)
	X (1,1,28,XC,0)
        X (1,2,33,RP,0)
        X (2,2,33,RF,0)
        X (3,2,33,RA,0)
        X (1,2,35,WP,0)
        X (2,2,35,WF,0)
        X (3,2,35,WA,0)
>
DEFINE X(A,B,C,D,E)
	<SIXBIT /D/>
LICABR: LICENS
TBLEN==.-LICABR

DEFINE X(A,B,C,D,E)
	<POINT B,DESLIC,C>
LICBP:  LICENS

DEFINE X(A,B,C,D,E)
	<A>
LICVAL: LICENS

DEFINE X (A,B,C,D,E)
	<ASCII / 'D/>
LICFUL:	LICENS

DEFINE X(A,B,C,D,E)
	<E>
LICTWK:	LICENS

	END STPT
    