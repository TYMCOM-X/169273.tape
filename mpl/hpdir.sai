begin "HPDIR"
    require "SAIL.DEF" source!file;
    require 2 version;

!	version 2 - 1/31/79 W.R.Soley, Added the default of
	*.*/SIZ/CRE if no FileSpec given.  Fixed DIRED.CMD to
	be a TEMP file by bit 8 of RBLIC.
;

!	define Help messages;

define Help = {"
The FileSpec is a list of file names which may contain wild cards
followed by a list of dirit-like switches.  The filenames may
be seperated by any of '+-,'.  The '-' will exclude the given
FileSpec from the current group as in dirit.  The following
switches are allowed:
"};

define Commands = {esc & "h" & esc & "J
While, HPDIR is running, files are selected and deselected by
combinations of the following single character commands:
  +;	Named files will be selected (default)
  -	Named files will be deselected
  :	Names all files from cursor to next file named
  [	View top page of directory
  ]	View bottom page of directory
  ^	View next page of directory
  .	ReView the current page of the directory
  =_	Peek at the file named next
  <lf>	View previous page of directory
  <esc><ctrl-D><ctrl-C>  Exits from HPDIR and writes command file
A file is 'named' by typeing the single letter shown in the left
margin.  A range of files may be named by typeing <letter>:<letter>.
"};

!	define switches;

define	SCount = 1;
define	SwitchLetterDef = {};
define	SwitchNameDef = {};
define	SW (N,L) = {
	redefine SCount = SCount + 1;
	redefine SwitchNameDef = cvms(SwitchNameDef)&
		{"}&scanc(cvps(N),null,null,"SIK")&{",};
	redefine Help = cvms(Help)&{&"  /}&cvps(N)&crlf&{"};
	redefine SwitchLetterDef = cvms(SwitchLetterDef)&
		{"}&cvps(L)&{",}};

sw	(ACcess, A);
sw	(ALpha, T);
sw	(AUthor, O);
sw	(Creation, C);
sw	(Extension, E);
sw	(License, B);
sw	(Mode, M);
sw	(PROJect, W);
sw	(PROTection, P);
sw	(Reverse, R);
sw	(SEconds, J);
sw	(SIze, S);
sw	(STAtus, Z);
sw	(STOrage, H);
sw	(Temps, K);
sw	(Ufdbits, G);

redefine SwitchNameDef = cvms(SwitchNameDef) & {null};
redefine SwitchLetterDef = cvms(SwitchLetterDef) & {0};
preload!with SwitchNameDef; string array SName[1:SCount];
preload!with SwitchLetterDef; integer array SLetter[1:SCount];

external boolean RPGSW;
external boolean !SKIP!;
integer Eof, Brk, I,J;

define any!letter = {"A"]["B"]["C"]["D"]["E"]["F"]["G"]["H"]}
		  & {["I"]["J"]["K"]["L"]["M"]["N"]["O"]["P"]}
		  & {["Q"]["R"]["S"]["T"]["U"]["V"]["W"]["X"};

simple procedure COMPLAIN(string TEXT);
begin "COMPLAIN"
  outstr(TEXT);
  call(0,"EXIT");
  end "COMPLAIN";

simple string procedure XXX;
begin "XXX"
  own string FN;
  own integer A,B;
  getformat(A,B);
  setformat(-3,0);
  FN:=CVS(CALL(0,"PJOB"));
  setformat(A,B);
  return(FN);
  end "XXX";

SIMPLE STRING PROCEDURE MYNAME;
BEGIN
  DEFINE !GTPRG = '777777000003, !GTFPN = -'25;
  RETURN(CV6STR(CALL(!GTPRG,"GETTAB"))
    &"["&CVOS(CALL(!GTFPN,"GETTAB")LSH -18)
    &","&CVOS(CALL(!GTFPN,"GETTAB")LAND '777777)&"]");
  END;

simple procedure CallDirit (string Com!Str);
BEGIN
  OWN INTEGER I,ERR;
  OWN STRING STR;
  OWN INTEGER ARRAY RUN!BLOCK[0:5];
  STR:=COM!STR&"DSK:"&MYNAME&"!"&13&10;
  TMPOUT("DIR",STR,ERR);
  IF ERR THEN BEGIN
    OPEN(1,"DSK",0,0,5,0,0,0);
    ENTER(1,XXX&"DIR.TMP",ERR);
    IF ERR THEN
      COMPLAIN("?CAN'T CREATE TEMP FILE");
    OUT(1,STR);
    CLOSE(1); RELEASE(1);
    END;
  RUN!BLOCK[0]:=CVSIX("SYS");
  RUN!BLOCK[1]:=CVSIX("DIRIT");
  I:=LOCATION(RUN!BLOCK[0])+'1000000;
  CALL(I,"RUN");
  COMPLAIN("?UNABLE TO RUN SYS:DIRIT");
  END;

simple string procedure Parse (string Com);
begin
  string P,S;
  integer Chan;
  setbreak(10,"@",null,"SINK");
  setbreak(11,",/+-;_@",null,"RINK");
  setbreak(12,".",null,"SINK");
  setbreak(13,lf&ff,cr,"SINK");
  P _ null;
  while length(Com) do begin
    P _ P & scan(Com,10,Brk);
    if Brk=0 then continue;
    S _ scan(Com,11,Brk);
    open(Chan_getchan,"DSK",1,2,0,256,Brk,Eof);
    lookup(Chan,S,Eof);
    if Eof then
	lookup(Chan, scan(S,12,Brk)&".CMD", Eof);
    while not Eof do
	P _ P & input(Chan,13) & (if Brk then "," else null);
    release(Chan);
    Com _ P & Com;
    P _ null;
    end;
  Com _ P;
  setbreak(10,"/"," "&ht,"SINK");
  P _ scan(Com, 10, Brk);
  while Brk do begin "Switch"
    S _ scan(Com, 10, Brk);
    for i_1 upto SCount do 
      if equ(S,SName[i][1 for length(S)]) then done;
    if i=SCount then return("?");
    P _ P & "/" & SLetter[i];
    end "Switch";
  return ("DSK:"&XXX&"DED.TMP_"&P&crlf);
  end;

record!class FD (string File; record!pointer (FD) Next);
record!pointer (FD) Head,Tail,P;
integer Chan,Cnt,C;
string Line,F;

begin "Main"
    define Eol = 1, Trim = 2;
    setbreak (Eol, lf&ff, cr, "SINK");
    setbreak (Trim, null, " "&ht, "SINK");
    ttyup(true);

    if not RPGSW then do begin
	print ("File specs: ");
	Line _ inchwl;
	if length(Line)=0 then Line _ "*.*/SIZ/CRE";
	if Line = "?"
	  then print(Help)
	  else begin
	    Line _ Parse(Line);
	    if Line = "?" then begin
		print ("?Bad switch, type ' for help", crlf);
		continue;
		end;
	    CallDirit (Line);
	    end;
	end until Line neq "?";

    print (esc&"&a0y0C"&esc&"J");
    open (Chan_getchan,"DSK",1,2,0, 256,Brk,Eof);
    lookup (Chan, XXX & "DED.TMP", Eof);
    if Eof then Complain ("No Dirit output file!");
    
    Cnt _ 0; Head _ Tail _ null!record;
    for i _ 4 step -1 until 0 do input(Chan,Eol);
    while not Eof do begin "readin"
 	p _ new!record (FD);
	fd:File[p] _ input(Chan, Eol);
	if Eof then done;
	if Tail
	    then fd:Next[tail] _ p
	    else Head _ p;
	tail _ p;
	Cnt _ Cnt + 1;
	end "readin";
    rename (Chan, null, 0, Eof);
    release (Chan);

    auxclr(-1, memory['300], '32);

begin "Dynamic"
    string array File[1:cnt+24];
    integer array Sts[1:cnt+24];

    integer Dot, Ptr, Cmd, Mode;
    define Select = 1, DeSelect = 2;

    simple procedure Address (integer LineNo);
	print(esc&"&a",LineNo-1,"Y"&cr);
    
    simple procedure Display (integer Pos);
    begin "Display"
	if Pos = Dot+12
	    then begin "Scroll"
		Address (24);
		for i_1 upto 12 do print(lf);
		Address (11);
		for i_Pos+11 upto Pos+23 do
		    print (lf, "    ", File[i], cr);
		end "Scroll"
	    else begin "Refresh"
		print (esc&"&a0y0C"&esc&"J");
		print ("    ", File[Pos], cr);
		for i_Pos+1 upto Pos+23 do
		    print (lf, "    ", File[i], cr);
		end "Refresh";
	for i_0 upto 23 do begin "Label"
	    print (if i then lf else esc&"&a0y0C");
	    case Sts[Pos+i] of begin
		[Select] print (" -"&("A"+i), cr);
		[DeSelect] print (("A"+i)&"- ", cr)
	    end; end "Label";
	Dot _ Pos;
	end "Display";

    simple procedure ApplyMode (integer Pos);
    begin "ApplyMode"
	integer j;
	if Mode leq 0 
	    then Mode _ -Mode
	    else Ptr _ Pos;
	if (Ptr < Dot) or
	    (Ptr > Pos) or
	    (Pos > Dot+23) then begin "Wrong!"
		print (bel);
		return;
		end "Wrong!";
	for i_Ptr upto Pos do begin "Apply"
	    if Sts[i]=0 then begin
		print (bel);
		continue;
		end;
	    Sts[i] _ Mode;
	    Address (j_i-Dot+1);
	    case Mode of begin
		[Select] print (" -"&("@"+j), cr);
		[DeSelect] print (("@"+j)&"- ", cr)
	    end; end "Apply";
	end "ApplyMode";

    simple string procedure cvFName (string F);
    begin
	F _ F[1 for 6] & "." & F[9 for 3];
	return (scan(F, Trim, Brk));
	end;

procedure Peek (integer Pos);
begin
    integer Chan,Eof,Brk;
    if (Pos < Dot) or
	(Pos > Dot+23) or
	(Sts[Pos] = 0) then begin
	    print(bel);
	    return;
	    end;
    Ptr _ Pos;
    setbreak(9,lf&ff,cr,"SINF");
    open (Chan_getchan,"DSK",bit(23)+1,2,0, 80,Brk,Eof);
    lookup (Chan, cvFName(File[Pos]), Eof);
    if Eof then begin
	print(bel);
	release(Chan);
	return;
	end;
    while not Eof do begin "Page"
        print(esc&"&a0y0C"&esc&"J", File[Pos], crlf, lf);
        I _ 2;
        while I < 23 do begin "Line"
	    print (input(Chan, 9), crlf);
	    I _ I+1;
	    end "Line";
	if Eof
	    then print ("[ end ] ")
	    else print ("[ more ] ");
	if (i_inchrw)=cr then inchrw;
	if i=" " or i=cr or i=lf
	    then continue
	    else done;
	end "Page";
    release(Chan);
    Display (Dot);
    Address (Pos-Dot+1);
    end;

!	Enter TMP file routine;

procedure TmpEnter (integer Chan; string File; reference integer Eof);
begin
    integer array LB[0:'14];
    LB[0] _ arrinfo(LB,2);
    LB[2] _ cvsix(File);
    LB[3] _ cvsix("CMD");
    LB['14] _ bit(8);
    chnior(Chan,LB[0],5);
    Eof _ not !SKIP!;
    end;

    P _ Head;
    for i _ 1 upto Cnt do begin
	File[i] _ fd:File[p];
	p _ fd:Next[p];
	end;
    arrclr(Sts,DeSelect);
    for i _ Cnt+1 upto Cnt+24 do
	Sts[i] _ File[i] _ null;

Mode _ Select;
Ptr _ Dot _ 1;
display (1);
while true do begin "interact"
    case Cmd _ inchrw of  begin "DoWhat"
	["+"][";"] "Select"
	    Mode _ Select;
	["-"] "Deselect"
	    Mode _ Deselect;
	[":"] "Range"
	    Mode _ -Mode;
	["^"] "Scroll"
	    Display (Dot+12 min Cnt);
	[lf] "UnScroll"
	    Display (Dot-12 max 1);
	["["] "Top"
	    Display (1);
	["]"] "Bottom"
	    Display (Cnt-23 max 1);
	["."] "ReWrite"
	    Display (Dot);
	["_"]["="] "Peek"
	    Peek (Dot + inchrw - "A");
	["?"] begin "Help"
	    print (Commands);
	    Address (24);
	    print ("[ enter space to continue ] ");
	    if inchrw=cr then inchrw;
	    Display (Dot);
	    end;
	[eot][esc][etx] done;
	[any!letter] begin "Apply"
	    ApplyMode (Dot + Cmd - "A");
	    Ptr _ Dot + Cmd - "A";
	    end;
	[cr] inchrw;
	else print (bel) end;
    if Cmd neq ":" then Mode _ abs(Mode);
    end "interact";

!	Create the output file;

Address (24);
open (Chan_getchan, "DSK",1,0,2, 0,0,Eof);
TmpEnter (Chan, "HPDIR", Eof);
if Eof then complain("DSK:HPDIR.CMD enter uuo failed!");
C _ 0;
for i_1 upto Cnt do
    if Sts[i]=Select then begin
	F _ cvFName(File[i]);
	C _ C + 1;
	Cprint (Chan, F, crlf);
	end;
close(Chan); Release(Chan);
print (crlf, C, " files written to HPDIR.CMD");
call (0,"EXIT");
end; end; end
