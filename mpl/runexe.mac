Title	Runexe	Program to map-in an EXE file and run it!
Subttl	Carl A Baltrunas	Tymshare TSG 1981

	SEARCH	Carl,Macten,JOBDAT,UUOSYM
	SALL

	EXTERNAL SCANER,SCN$LK,SCN$SW
	EXTERNAL GETWRD,OUTOCT,OUTDEC,OUTSIX,$$$TYC

;	Note: $$$TYC == 0 if ";!" are characters and -1 if comments

	.REQUEST DSK:TYMSCN.REL		; SUBROUTINES
	.REQUEST DSK:TYMCAB.REL		; SUBROUTINES

	IFNDEF .PTPPN,<.PTPPN==2>	;[X] Path ppn location

	VER==1		;VERSION NUMBER
	EDIT==14	;EDIT NUMBER

DEFINE VERSION(VER,EDIT)<
	LOC 137
	BYTE	(3)0(9)<VER>(6)0(18)<EDIT>
	RELOC
>

	VERSION	VER,EDIT	;SETUP VERSION

	Chan==0			; Channel to read EXE file on.
	Psize==20		; Size this program CAN be. (with DDT!)

	SUBTTL	Revision History

;
;  1	Change all "HALT ."'s to error messages /CAB 2-Oct-81
;  2	Remove unnecessary working-set control code /CAB 2-Oct-81
;  3	Type out PC of error instructions (debugging aid) /CAB 3-Oct-81
;  4	Removed by edit 10. /CAB 3-Oct-81
;  5	Move High-seg check so that relocated highseg pages which
;	overlap pages in use by this program don't screw us.
;	/CAB 3-Oct-81
;  6	Removed by edit 12. /CAB 3-Oct-81
;  7	Added code to do RESCAN and read a full file spec from the
;	terminal.  Also remembers start offset which can be overridden
;	by the newly added /RUNOFF and /NORUN switches.
;  10	Added the /GET switch and removed edit [4].  /CAB 22-Jan-82
;  11	Forced /RUNOFFSET and /NORUNOFFSET to comply with each other
;	and to override the environment.  ENV < /NORUN < /RUNOFF as
;	far as priority.  /CAB 22-Jan-82
;  12	Added /MAP and /NOMAP switches and Removed Edit [6].  /CAB 22-Jan-82
;  13	Reworked edits 10-12 renaming switches and adding the heuristic
;	to attempt to do the right thing for segments.  Also worked on
;	patch to REMAP error.  /CAB 23-Jan-82
;  14	Added message to /GET switch to type xxxxxx SETUP.  /CAB 23-Jan-82
;

	SUBTTL	Initialization section

RUNEXE:	Tdza	F,F			;Clear & skip normally
	Seto	F,			; or set -1 for RPG entry point.
	Movem	F,runoff		;Now, remember this.
	RESET				;RESET ANY & ALL I/O LINES
	STORE	T1,T2,P,0		;CLEAR AC'S
	MOVE	P,[IOWD 100,PDL]	;SETUP PDL LIST
	RESCAN				;SETUP TO READ USER TYPED LINE
	SETOM	$$$TYC			;Make sure ; and ! are comments
	Movei	T1,Swtblk		;Get switch block
	Pushj	P,SCN$SW		;Tell the scanner they exist
	 Skpinl				;Skip if the RESCAN worked
	  Jrst	Main			;Now, Get some input
Runex0:	SETZ	T1,			;MAKE SURE WE'RE READY HERE
	PUSHJ	P,GETWRD		;LOOK FOR A WORD (SOMETHING)
;	push	p,t1
;	exch	t1,t2
;	pushj	p,outsix
;	outstr	Crlf
;	exch	t1,t2
;	pop	p,t1
	JUMPL	T1,MAIN			;HMM--RAN OUT BEFORE WE GOT ONE
	CAIN	T1,';'			;  WILL DO.
	  JRST	MAIN0			; ...
	HRROI	F,.GTPRG		;THE PROGRAM NAME IS ALSO A HINT
	GETTAB	F,			;  AS TO THE UPCOMING WORDS
	  JRST	Runex0			;(OOPS LOOP AGAIN)
	CAMN	F,T2			;  SKIP IF HE TYPED MY NAME
	  Jrst	Main0			;Ok!
	JRST	Runex0			;(NOTE: THIS WON'T WORK FOR "R","RU","RUN" .EXE)
	SUBTTL	File scanner loop

E$$FNF:	Outstr	[asciz\
?EXEFNF File \]
	Skipn	Direct+.Rbunm		; Is there a (username)?
	  Jrst	E$$FN0			; No! Skip a little
	Outchr	["("]			; First part.
	Move	T1,Direct+.Rbunm	; Get it
	Pushj	P,Outsix		; And print it.
	Skipe	T1,Direct+.Rbunm+1	; Second part
	  Pushj	P,Outsix		; ...
	Outchr	[")"]			; Done Name.
E$$FN0:	Move	T1,Direct+.Rbnam	; Get name
	Pushj	P,Outsix		; Print it.
	Outchr	["."]			; Print a dot.
	Hllz	T1,Direct+.Rbext	; Get the extension
	Pushj	P,Outsix		; Print it.
	Outstr	[Asciz\ Not Found
\]
Eatlin:	Skpinl				;Input waiting?
	  Jrst	Main			;No---Don't try to read anything.
	Pushj	P,Getwrd		;Get a word?
	Jumpge	T1,Eatlin		;Else loop until none left.
MAIN:	SETZ	T1,			;CLEAR INPUT FLAG (EOL),, SWITCHES
	Outstr	[Asciz\EXE File: \]
MAIN0:	PUSHJ	P,SCANER		;READ A FILE SPECIFICATION
	  Jrst	Main			; Is there an error return?
	Jumpn	T1,E$$JNK		;Junk at end of line?
	Skipe	Sw.Hgh			;[11] If /HIGHSEG not set skip
	 Skipn	Sw.Map			;[11] /HIGHSEG set, check /MAP
	  Caia				;[11] Not (/Highseg and /MAP)
	 Jrst	W$$MES			;[11] Both -- Give error & Reset
	Skipn	SW.HLP			;Does he want help?
	  Jrst	Findfile		;NO!  Continue
	Move	T2,[Xwd -Sw.Len,SWTEXT]	;Get a pointer...
	Outstr	[Asciz\
Runexe %1(12) - Program to run EXE format files

Switches:
\]
	Outstr	@(T2)			;Print the text
	Aobjn	T2,.-1			;  listed for each switch
	Outstr	[Asciz\
EXE File:  <Type your file here>  [ /<optional switche(s)> ]

\]
	Jrst	Eatlin			;  Eat the rest & return

	Subttl	File search section

Findfile:
	MOVE	T1,[35,,DIRECT]		;LOOKUP BLOCK FOR FILE-SPEC IF ANY
	MOVE	T2,[^D9,,PATH]		;PATH. BLOCK FROM SCANER
	MOVE	T3,[4,,MASK]		;FILE MASK
	MOVE	T4,[^D9,,PMASK]		;PATH MASK
	PUSHJ	P,SCN$LK		;LOOK & SEE WHAT HE TYPED...
	Skipn	Direct+.Rbnam		;Do we have a file typed?
	  Jrst	Main			;No! So try again.
	SETZ	T1,			;CLEAR CHECK COUNTER
	MOVEI	T1,35			;GET SIZE OF LOOKUP BLOCK
	MOVEM	T1,DIRECT		;  FOR THE DIRECTORY TO READ

	OPEN	CHAN,OPNBLK		;OPEN A CHANNEL
	  Jrst	E$$OPN			;[1] Can't open device DSK?

	Movsi	T2,'EXE'		; Default extension to EXE
	Skipn	Direct+.Rbext		;   if it isn't there.
	  Movem	T2,Direct+.RBEXT	; ...
	Move	T2,Path+.Ptppn		; (Magic # .Ptppn ==2) Get PPN
	Seto	T1,			;   and get -1 for compare
	Came	T1,Path			; If default username (== -1)
	Skipn	Path			; or empty name then, default
	  Movem	T2,Direct+.RBPPN	;    a real ppn instead of PATH.
	LOOKUP	CHAN,DIRECT		;LOOKUP THE FILE
	  Jrst	E$$FNF			;[1] Can't find file

	Subttl	File checkout routine -- Must be an EXE file

	Hrrz	P1,.Jbrel		; Coresize-1 in words
	Aoj	P1,			; Fix the -1
	Movem	P1,Offset		; Remember this
	Iori	P1,1777			; Round up to next highest K block
	Core	P1,			; Tell the system we're using it.
	  Jrst	E$$COR			; No?  -- Something is wrong.
	Move	P1,Offset		; Restore value for page.
	Lsh	P1,-^D9			; Convert to pages
	Movem	P1,Pages		; Get memory page # we want to use!
	Hll	P1,[1b7+1b17]		; Make ready, .prro!1 page
	Push	P,P1			; Save this here.
	Vclear	P1,			; Now remove that page *** !
	  Jrst	E$$VCL			; Not typically possible! So STOP!
	Movei	P2,1			; From file page (1)
	Move	T1,[.Chmfp,,chan]	; Read in the page map page
	Chanio	T1,P1
	  Jsr	E$$MFP			;[3][1] Can't map file page
	Move	P1,Offset		; Get the offset figure
	Hlrz	T1,(P1)			; Check code.
	Caie	T1,1776			;  for 1776,,count
	  Jsr	E$$FMT			;[3]  OOPS!


; It is an EXE file -- Let's check now to see if we need to MAP it?

	Hrrz	T1,(P1)			; Get count
	Lsh	T1,-1			; Convert to number of pairs in block
	Movns	T1			; Negate
	Hrlz	T1,T1			; Convert to -n,,0
	Hrr	T1,Offset		;	-n,,pageoffset
	Movsi	T2,(1b0)		; Set bit 0 -- SV%HIS -- highseg bit
	Setz	T3,			; Begin with a clean slate
Mapchk:	Tdnn	T2,1(T1)		; Is this page-group in the highseg?
	  Jrst	Chknxt			; No!  Skip this stuff
	Ldb	T4,[point 13,2(T1),35]	; Get the process page #
	Skipn	T3			; SKip if we've been here before
	  Hrr	T3,T4			; Copy first page in left half
	Cain	T4,400			; Is it page 400?
	  Tlo	T3,-1			; Yes! Flag it as /HIGHSEG-wanted
Chknxt:	Aoj	T1,			; Increment first part
	Aobjn	T1,Mapchk		; Do next pair
	Move	T2,[Xwd 1777,1]		; Get End-of-map,,Len=1 constant
	Came	T2,1(T1)		;  and make sure we made it ok!
	  Jsr	E$$FMT			;[3] Nope, Bad EXE format!
	Skipn	Sw.Hgh			;[13] Segment switch?
	  Jrst	Chkmap			;[13]  No!  Do other things
	Setzm	Sw.Map			;[13] Yes--Clear /MAP
	Skipn	T3			;[13] Do we have a high segment?
	 Outstr	[Asciz\
%EXEHSI	/HIGHSEG switch ignored -- Program has only one segment

\]
	Skipe	T3			;[13] Do we have a high segment?
	 Tlne	T3,-1			;[13] Yes--Normal start address?
	   Jrst	Chkcor			;[13]   Either no segment or normal
	  Jrst	W$$IHA			;[13] Tell the user about bad address

Chkmap:	Skipn	T3			;[13] Highseg?
	  Jrst	Chkcor			;[13] No!
	Tlnn	T3,-1			;[13] SKip if /MAP unnecessary
	  Setom	Sw.Map			;[13] Need it, so use it.

	Subttl	File appears to be ok -- setup core correctly

Chkcor:	Move	P1,(P)			; Get page # we want to use!
	Vclear	P1,			; Now remove that page *** !
	  Jrst	E$$VCL			; Not typically possible! So STOP!
	Move	P1,(P)			; Make sure we didn't change any.
	Movei	P2,2			; From file page (2)
	Move	T1,[.Chmfp,,chan]	; Read in the job data area?
	Chanio	T1,P1
	  Jsr	E$$MFP			;[3][1] Can't map file page (p1)(p2)
	Move	P1,Offset		; Use offset into block.
	Move	T1,.Jbcor(P1)		; Get core needed for lowseg
	Iori	T1,1777			; Round up to next highest K block
	Movem	T1,Jbcor		; Be mnemonic!
	Tlz	T1,777777		; Zap half.
	Aoj	T1,			; Add 1 to use pages
	Lsh	T1,-^D9			; And convert!
	Skipe	Sw.Map			;[11] Are we ONLY mapping?
	  Jrst	Skipseg			;[11] Yes!  Skip this drivel.
	Subi	T1,400			; Don't forget this one!
	Movem	T1,Hghpag		; Highpage! Offset.
	Move	T1,.Jbhrl(P1)		; Likewise... for High-seg if any
	Skipe	T1			; High!?
	Movei	T1,-400000(T1)		; Clear left half & 400000 bit
	Movem	T1,Jbhrl		; Be mnemonic!
Skipseg:Pop	P,P1			;[11] Restore code from above!
	Vclear	P1,			; Now remove that page *** !
	  Jrst	E$$VCL			;[1] Not typically possible! So STOP!
	Hrrz	T1,Jbcor		; Lowcore.
	Skipn	Sw.Map			;[11] No addition if ONLY mapping.
	  Add	T1,Jbhrl		; Add high -- If any!
	Iori	T1,1777			; Round up to next K block
	Movem	T1,Finals-Finalb+Smlcor	; Save to make core smaller later.
	Hrrz	T2,.Jbrel		; Get my current core!!!
	Camg	T1,T2			; Do I need More?
	  Jrst	Nocore			; No!  Don't take any away either!
	Core	T1,			; Get the core.
	  Jrst	E$$COR			;[1] OOPS!


Nocore:	Move	P1,Pages		; Get page # we want to use!
	Hll	P1,[1b7+1b17]		; Make ready, .prro!1 page
	Vclear	P1,			; Now remove that page *** !
	  Jrst	E$$VCL			; Not typically possible! So STOP!
	Movei	P2,1			; From file page (1)
	Move	T1,[.Chmfp,,chan]	; Read in the page map page
	Chanio	T1,P1
	  Jsr	E$$MFP			;[3][1] Can't map file page
	Move	P1,Offset		; Get the offset figure
	Hlrz	T1,(P1)			; Check code. (AGAIN!)
	Caie	T1,1776			;  for 1776,,count (to be sure).
	  Jsr	E$$FMT			;[3]  OOPS!

	Hrrz	T1,(P1)			; Get count
	Lsh	T1,-1			; Convert to number of pairs in block
	Movns	T1			; Negate
	Hrlz	T1,T1			; Convert to -n,,0
	Hrr	T1,Offset		;	-n,,pageoffset
	Subttl	Main processing Loop

Loop:	Ldb	T3,[point 13,1(T1),35]	; Get the file page # (-1)
	Ldb	T2,[point 13,2(T1),35]	; Get the process page #
	Ldb	T4,[point  9,2(T1),8]	; Get the repeat count -1
	Skipe	Sw.Map			;[11] Are we ONLY mapping?
	  Jrst	Addone			;[11] Yes!  Skip this drivel.
	Cail	T2,400			;[5] Check if it's high-seg
	  Add	T2,Hghpag		;[5] Blam!  Make lowseg!!!
Addone:	Camle	T2,Pages		; Do something special-pages in core
	  Jrst	Normal			;  else skip to the normal routine
	Aoj	T3,			; Increment physical page # in file
	Jumpe	T4,Justadd		; If repeat = 0, then add to list
	Movem	T3,Base(T2)		; Otherwise, Add one here
	Cain	T3,1			; If File-page = 1, make zeroes
	  Setz	T3,			;   and make sure it stays = 1!
	Aoj	T2,			; Increment process page #
	Soja	T4,Addone		; Decrement repeat by 1 & Loop

Normal:	Jumpe	T3,Donext		; Well?  Why clear then create?
	Aoj	T3,			; Increment file page # for real
	Aoj	T4,			; Increment count for real
	Hrl	T2,T4			; Copy as Repeat,,Process-page
	Tlo	T2,2000			; Add reference bit!
	Vclear	T2,			; First clear the page
	  Jrst	E$$VCL			; Error trying to clear it???
	Tlz	T2,2000			; Clear bit!
	Tlo	T2,4000			; Equiv to 2b7, (Copy on Write)
	Move	[.Chmfp,,chan]		; Setup UUO call to map the page
	Chanio	T2			; Map the page
	  Jsr	E$$MFP			;[3]  Error mapping the page ???
	 Caia				; Skip! and do next pair!
Justad:	Movem	T3,Base(T2)		; Set page in table (Must be r/w)
DoNext:	Aoj	T1,			; Increment first part
	Aobjn	T1,Loop			; Do next pair
	Move	T2,[Xwd 1777,1]		; Get End-of-map,,Len=1 constant
	Came	T2,1(T1)		;  and make sure we made it ok!
	  Jsr	E$$FMT			;[3] Nope, Bad EXE format!
	Skipe	T2,.Jbddt		; Skip if DDT!
	 Outstr	[Asciz\
% DDT loaded!
\]

	Subttl	Last part of code - Beginning of Phasing

Lastpt:
	Skipe	Sw.Map			;[11] Are we ONLY mapping?
	  Jrst	Last1			;[11] Apparently so, no drivel.
	Move	T1,Hghpag		; Get the high-seg start page
	Movei	T1,400(T1)		; and make it real again.
	Lsh	T1,^D9			; Shift it to make words.
	Soj	T1,			; Subtract to get top address
	Skipn	Jbhrl			; Should we have a high segment?
	  Setz	T1,			; No-- Set value to 0
	Move	P3,T1			; Save the REMAP? value!
Last1:	Skipn	Sw.Get			;[14] Are we going to RUN it?
	  Jrst	Skpget			;[14] Yes! Skip the get stuff
	Move	T1,Direct+.Rbnam	;[14] Who are we?
	Pushj	P,OutSix		;[14] Print it.
	Outstr	[Asciz\ SETUP
\]					;[14] Make it look like a .Get
Skpget:	Move	P1,Offset		; Save this since it's going away
	Move	P2,Pages		; .. Ditto ..  (Pages in use by us)
	Move	P4,Direct+.Rbppn	; Get the ppn for the file
	Movem	P4,Finals-Finalb+Pounce+Runppn	; Store it
	Move	P4,Devblk		; Get run device
	Movem	P4,Finals-Finalb+Pounce+Rundev	; Store it
	Move	P4,Direct+.Rbnam	; .. Ditto ..  (Name for SETNAM)
	Movem	P4,Finals-Finalb+Pounce+Runfile	; Store it
	Move	M1,SW.MAP		;[11] Remember segment switch
	Hrlzi	T1,(Jrst)		;[13] Get the default start instruction
	Skipe	SW.RUNOFF		;[10] Requested RUNOFF ?
	  Aoj	T1,			;[10] Yes--Use start + 1
	Skipn	SW.GET			;[10] IS this a /GET ?
	  Jrst	Stoadr			;[13] No... process normally
	Movsi	T1,(Jfcl)		;[13] Get a no-op
	Movem	T1,Finals-Finalb+Pounce+Get	;[13] Store it in table
	Move	T1,[Exit 1,]		;[13] Get the start instruction
Stoadr:	Movem	T1,Finals-Finalb+Pounce+Tail	;[13] Store it.
	Move	T1,Base			;[13] Get last page in file to do
	Movem	T1,Finals-Finalb+Pounce+Page	;[13] Remember it.
	Move	T1,[Base,,140]		; Copy page list to page 0
	Blt	T1,Finalb-1		; -- max of Psize words! --
	Movsi	T1,Finals		; Get the address of this code
	Hrri	T1,Finalb		; And where to put it!
	Blt	T1,Finalb+Finalz-1	; -- Copy Code --
	Jrst	Finalb			; Bye!

	Xlist
	lit
	var
	list
	Subttl	Phased code for last few pages

Finals:	Phase	140+Psize		; Just to remind me!!!


Finalb:	Movsi	T1,(P2)			; Subtract 1 & set as the count
	Tlo	T1,2000			; Set 1b7 to remove reference bits
	Hrri	T1,1			; Begin at page 1
	Vclear	T1,			; All Gone!!! Now set them up!
	  Jrst	F$$VCL			;[1] Huh?
	Movn	T1,P2			; Get count as -n
	Movss	T1			; Now swap
	Hrri	T1,141			; Begin with first page (must b one)

Finall:	Skipn	T3,(T1)			; Do we have a page?
	  Jrst	Paged			; Not any more!
	Movei	T2,-140(T1)		; Process page #
	Hrli	T2,(2b7!1b17)		; Set C-o-W & 1 page
	Move	[.Chmfp,,chan]		; Get ready!
	Chanio	T2			; Create page! (read from file)
	  Jrst	F$$MFP			;[1] Why not???
Paged:	Aobjn	T1,Finall		; Loop on pages that were in core

; Now do page 0

Page0:	Move	T1,Smlcor		;[13] Make core smaller for remap
	Core	T1,			;[13] Assuming that it's necessary.
	  Jrst	F$$COR			;[13] Hmmm. A problem?
	Jumpn	M1,Pager		;[11] If ONLY mapping, skip this.
	Skipn	P3			; Don't remap if no high-seg
	  Jrst	Pager			; .
	 Remap	P3,			; .
	  Jrst	F$$REM			; Give error msg
Pager:	Setnam	P4,			; Remember??  This was our name!

	Movsi	17,Pounce		; Begin here!
	Blt	17,17			; Copy all!
	Jrst	Head			; Go to Phased code

Smlcor:	Block	1			;[13] Place for core size


F$$COR:	Outstr	[Asciz/
? Core reduction error
/]
	Exit
F$$REM:	Outstr	[Asciz/
? Remap error
/]
	Exit
F$$VCL:	Outstr	[Asciz/
? Vclear error
/]
	Exit
F$$MFP:	Outstr	[Asciz/
? Chanio File page MAP error
/]
	Exit

	lit
	var
	Subttl	Phased AC block for last page of file

Pounce:
	Phase 0
	Xwd	0,1		;  0	; Smash ac's to 1's
MFP:	Exp	2b7!1b17	;  1	; Set C-o-W & 1 page for page 0
Page:	Exp	0-0		;  2	; Page # in file (filled in later)
Head:	Vclear	4,		;  3	; Clear page 0!
	1b7!1b17		;  4	;  *** Only Error possible ***
	Chanio	6,MFP		;  5	; Create page! (read from file) T1-2
	Xwd	.Chmfp,chan	;  6	; Map file page (illegal instruction)
	Hrrz	T1,.Jbcor	;  7	; Get core argument used
	Movem	T1,.Jbrel	; 10	; Set JOBREL so everything works!
	Hrrz	T1,.Jbsa	; 11	; Start address! (OR EXIT)
Get:	Addm	T1,Tail		; 12	; Set instruction
	Blt	.		; 13	; Clear Acs up to here (assumes 0/=1)
Tail:	Jrst	0-0		; 14	; Done!
RunDev:	Z			; 15	; Gets Run device (filled in later)
RunFil:	Z			; 16	; Gets Run filename (filled in later)
RunPPN:	Z			; 17	; Gets Run PPN (filled in later)
		Dephase	; Ac Block
	Dephase		; Final pages


Finalz==.-Finals
	Subttl	SWITCH information for the scanner

;SW	SWITCH, Address, Default, Flags

	SW$GLB==1B18		; GLOBAL -- PRESET FIRST TIME ONLY
	SW$FIL==1B19		; PER-FILE  PRESET EACH CALL
	SW$UNQ==1B20		; SWITCH IS UNIQUE ON 1 CHAR
	SW$ARG==1B21		; ARGUMENT ACCEPTED	

Swtblk:	SW.LEN,,SWNAME		; Length of block ,, Sixbit names
	SWDEFT,,SWADDR		; Default values  ,, Address of values

Define DOSCAN<

SW GET,SW.GET,0,SW$FIL,<Get     Do not run this file - only GET it>
SW HELP,SW.HLP,0,SW$FIL!SW$UNQ,<Help    Types this message>
SW HIGHSEG,SW.HGH,0,SW$FIL,<Highseg Force standard segmentation>
SW MAP,SW.MAP,0,SW$FIL,<Map     Force mapping for all segments>
SW RUNOFF,SW.RUN,0,SW$FIL,<Runoff  RUN this program at the RPG start address>

>


Define SW(Switch,Adr,Def,Flag,Text)< <Sixbit \Switch\> >
SWNAME:	Doscan						; Switch names
	Sw.len==.-SWNAME

Define SW(Switch,Adr,Def,Flag,Text)< Xwd Flag,Adr >
SWADDR:	Doscan						; Addresses

Define SW(Switch,Adr,Def,Flag,Text)< Exp Def >
SWDEFT:	Doscan						; Default values

Define SW(Switch,Adr,Def,Flag,Text)<[Asciz\    'Text'
\]>
SWTEXT:	Doscan

Define SW(Switch,Adr,Def,Flag,Text)< Adr: Exp Def >
	Doscan						; Actual values

	SUBTTL	Messages and data for messages

E$$MFP:	z		;[3] This word is for the caller
	Outstr [asciz/
? Error mapping file /]
	Hrrz	T1,P1
	Pushj	P,OUTDEC##
	Outchr	["|"]
	Move	T1,P2
	Pushj	P,OUTDEC
	Hrrz	T1,E$$MFP		;[3]
E$T$PC:	Outstr	[asciz/ at user PC /]	;[3]
	Subi	T1,2			;[3] Backup 2 for loc of chanio call
	Pushj	P,OUTOCT##		;[3]
	Jsp	T1,Errmsg
Crlf:	asciz/
/

E$$VCL:	Jsp	T1,Errmsg
Asciz/
? Vclear error
/
E$$Jnk:	Jsp	T1,Errmsg
Asciz/
? Junk at end of line
/
E$$Opn:	Jsp	T1,Errmsg
Asciz/
? Cannot OPEN device 'DSK'
/
E$$Cor:	Jsp	T1,Errmsg
Asciz/
? Not Enough Core
/

W$$MES:	Outstr	[Asciz\
%EXEMES	Mutually Exclusive Switches /HIGHSEG and /MAP

\]
	Jrst	Eatlin		;[13] Return to main loop

W$$IHA:	Outstr	[Asciz/
HA	Illegal High-seg starting Address /]
	Hrrz	T1,T3		;[13] Page Address
	Lsh	T1,^D9		;[13] Shift into pace
	Pushj	P,Outoct##	;[13] Print address
	Outstr	[Asciz\ using /HIGHSEG
\]
	Jrst	Chkcor		;[13] Return to rest of code

E$$Fmt:	z			;[3] Put caller's adr here
	Outstr	[Asciz/
? Bad EXE file format /]
	Move	T1,1(t1)	; hack
	Move	16,T1		; hack hack
	Pushj	P,Outoct##	;
	Hrrz	T1,E$$Fmt	;[3] Get PC
	Jrst	E$T$PC		;[3] Print it out

Errmsg:	Outstr	(T1)
	Exit			;For now, just exit!
	Subttl	Data areas

DIRECT:	Exp	35
	Z
	Z
	Sixbit	/EXE/
	BLOCK	36-4		;SETUP BLOCK FOR DIRECTORIES

Path:	BLOCK	11		;Path (username)
Mask:	BLOCK	4		;File mask
PMask:	BLOCK	11		; Wild Path?

OPNBLK:	17			;SET MODE DUMP
DEVBLK:	SIXBIT	/DSK/		;SIXBIT/DSK/
	XWD	0,0		;BUFFER SPACE

Runoff:	Block	1		; Start address offset
Offset:	Block	1		; Page offset
Pages:	Block	1		; Number of pages
Jbcor:	Block	1		; Copy of .JBCOR
Jbhrl:	Block	1		; Copy of .JBHRL
Hghpag:	Block	1		; Where to do the remap
Base:	Block	Psize		; List for special pages (this program)

PDL:	BLOCK	100			;SETUP PDL LIST

	END	Runexe
    H J