comment -  S T R E A M . R E Q  -  stream scanning module definitions.
!
!  A module of routines to make the writing of custom stream account
!  scanning programs easier.  See the end of this file for a sample.
!
!  Require this file and the rest will surely follow.
!  
!  Dave W. Smith,   December 4, '81 ;

comment
! Request of link/loader that the module be loaded. ;

require "(mpl)stream" load!module;

comment
! S!Init *must* be called first to set up the package. ;

external procedure S!Init;

comment
! S!BDate *must* be called to set the starting date.  If S!NDays
! is not called to tell the package how many days to process, it
! will proceed until 5 consecutive stream accounting files are
! not found. ;

external procedure S!BDate( integer Month, Day, Year );
external procedure S!NDays( integer N );

comment
! S!IUser and S!XUser are called to add users to the inclusion or
! exclusion list.  If not called, the defaults are to include all
! users and exclude none.  User names may be passed with or without
! enclosing parenthesis. Return true iff the username was good. ;

external boolean procedure S!IUser( string UserName );
external boolean procedure S!XUser( string UserName );

comment
! S!IPPN and S!XPPN are special cases of S!IUser and S!XUser -- They
! use the same table internally.  However, halfword values may be
! passed to, for example, include or exclude an entire GAN. ;

external boolean procedure S!IPPN( integer PPN );
external boolean procedure S!XPPN( integer PPN );

comment
! S!IProg and S!XProg are called to add programs to the inclusion or
! exclusion list for programs, which is seperate from the lists for
! users.  ProgSpec is of the form:
!	<ProgSpec> ::= prog | '(' user ')' prog | '(' user ')'
! The first case is for any program of name "prog", the second is
! for a specific incarnation, and the third means any program run
! from "(User)".  The defaults if neither S!IProg or S!XProg are
! called is to include all programs and exclude none.  Both return
! true iff ProgSpec was valid. ;

external boolean procedure S!IProg( string ProgSpec );
external boolean procedure S!XProg( string ProgSpec );

comment
! S!XOwners sets a bit which causes the exclusion of those records
! where the user owns the program. ;

external procedure S!XOwners;

comment
! S!IType and S!XType are called to add record types to inclusion or
! exclusion list.  They behave as expected, and return true iff the
! type name was valid. ;

external boolean procedure S!IType( string TypeName );
external boolean procedure S!XType( string TypeName );

comment
! S!INode and S!XNode are called to add node names to inclusion or
! exclusion lists.  They behave as above, but return false if the
! node name is unknown.  (Node names may be passed as octal strings).
! S!IPort and S!XPort perform the same function for ports. ;

external boolean procedure S!INode( string NodeName );
external boolean procedure S!XNode( string NodeName );
external boolean procedure S!IPort( integer PortNum );
external boolean procedure S!XPort( integer PortNum );

comment
! S!Scan *must* be called if you really want anything done.  It scans
! the stream accounting files applying inclusion and exclusion criteria
! against each record found, and calls the routine which you pass it,
! (UserProc), when good records are found.  The flag "Silence" tells
! S!Scan wether or not it is safe to issue messages.  (Silence should be
! true if you plan to run detached).  "MyPage", if supplied and if
! non-zero, tells S!Scan to scan through a page which you supply.
!
! Note:
!  UserProc is passed the stream record, so should be declared:
!	procedure UserProc( integer array StreamRecord );

external procedure S!Scan( procedure UserProc;
			   boolean Silence;
			   integer MyPage(0) );

comment
! S!Str is called by "UserProc" to retrieve a formatted representation
! of a record found by S!Scan. ;

external string procedure S!Str;
comment
! S!Job returns the job number which pertains to this record. ;

external integer procedure S!Job;

comment
! S!Node and S!Port return the node and port that a job logged in from. ;

external string procedure S!Node( integer Job );
external integer procedure S!Port( integer Job );

comment
! S!Opr returns the last OPR or SETE name that the job used sucessfully. ;

external string procedure S!Opr( integer Job );

comment
! S!Tru returns the last TRU value seen for a job. ;

external long real procedure S!Tru( integer Job );

comment
! CVPPN is provided for your convenience.  It translates a username to
! a PPN.  lh( ppn ) = 0 --> bad username. ;

external integer procedure CVPPN( string UserName );

comment
! CVTRU is provided for your convenience.  It translates a double-word
! TRU value from stream record format to long real. ;

external long real procedure CVTRU( reference integer DOUBLE.WORD.TRUS );

comment	 An example of how to dump the entire stream (should you want to):
comment
comment		begin "of massive stream dumper"
comment
comment		  require "(mpl)stream.req" source!file;
comment
comment		  procedure Demon( integer array Rec );
comment		    print( S!Str );
comment
comment		  S!Init;
comment		  S!BDate( 1,1,81 );
comment		  S!Scan( Demon, false );
comment
comment		end "of massive stream dumper" ;

comment -  E N D   O F  S T R E A M . R E Q  ;
