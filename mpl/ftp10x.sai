begin	"FTP10X"

require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require 3 version;

define PasswordMask = {"###############+++++++++++++++OOOOOOOOOOOOOOO"};

item ZapProcedure;
procedure ZapHandler;
begin
    usererr(0,0,"??circuit zapped (oh dear)","X");
end;
simple procedure ZapHandlerIni;
assign(AuxDead_ZapProcedure,ZapHandler);
require ZapHandlerIni initialization;

simple string procedure GetLine(integer T(0));
begin	"GetLine"
    integer CH;
    string L;
    if T < 60 
	then T _ T * 1000
	else T _ T lor !bit(17);
    L _ null;
    do begin 
    	calli(AuxPort*!bit(8)+!hl('110)+T,calli!HIBER);
    	auxclv(AuxPort,0,!AXSIC);
    	if !SKIP! 
	    then case CH _ AuxIn land '177 of begin
		[#lf] done;
		['000]['177] ;
		else L _ L & CH end
	    else begin !SKIP! _ false; return(L) end;
    end until !lh(AuxPort);
    !SKIP! _ true;
    return (L);
end	"GetLine";

procedure SendLine(string S);
begin
    integer C;
    if S[inf for 1] neq #cr then S _ S & #cr;
    while length(S) do AuxOut(lop(S));
    do C _ AuxIn land '177 until C = #lf;
end;

boolean procedure !Csync;
begin
    integer C;
    AuxOut(3);
    AuxSync("^C"&#lf,15);
    do begin
	C _ AuxIn(5) land '177;
	if not !SKIP! then begin "timeout"
	    print("?cant sync with tenex exec",crlf);
	    return(false) end;
    end until C="@" or C="!" or !lh(AuxPort);
    return(!lh(AuxPort)=0);
end;

simple boolean procedure Index (string A,B);
begin
    integer I,X,LB;
    X _ length(A)-(LB_length(B))+1;
    for I _ 1 upto X do if equ(A[i for LB],B) then return(I);
    return(0);
end;

procedure Connect;
begin
    integer P,Int; string S;
    
    simple procedure GateWay;
    begin
	integer CH;
	if equ(S[inf-44 to inf],PasswordMask)
	    then S_ S[1 to inf-45]& " ";
	print( ">",S );  S_ null;
	auxcli(-1,'300,!AXCFS);	! echo off;
	do begin "login"
	    CH_ inchrs;  if CH=#lf then CH_ 0;
	    if CH > 0 then auxclv( AuxPort,CH,!AXO8 );
	    CH_ AuxIn( 1 ) land '177;
	    if CH > 0 then outchr( CH );
	end until CH=#lf or !lh(AuxPort);
	auxcli(-1,0,!AXCFS);	! echo on;
    end;

    print("Tymnet host # ");
    S _ ":" & inchwl;

    for P _ 1 upto 3 do begin
        creaux(S);
	if !SKIP! then done;
	if P=3 
	    then begin print("?not connected"); return end
	    else print("%retrying...");
	calli(10,calli!SLEEP);
	print(crlf);
    end;
    for P_1 upto 32 do auxclv(Auxport,'377,!AXO8);
    S _ null;
    Int _ 30;
    do begin
	P _ AuxIn(int) land '177;  Int _ 3;
	if !SKIP!
	    then case P of begin
		[#cr] ;
		[#lf] if length(S) then begin
		    print("> ",S,crlf);
		    S _ null;  Int _ 30  end;
		["@"] if length(S)=0
		    then done
		    else S _ S & P;
		[0]['177] Int_ 30;
		else S _ S & P
	    end
	    else if S[inf-1 for 1]=":" or S[inf for 1]=":"
		then GateWay
		else begin
		    print("?probably not a tenex system",crlf);
		    print("?not connected",crlf);
		    AuxZap;
		    return 
		end;
    end until !lh(AuxPort);	    
    print("[connected]",crlf);
end;

procedure Login;
begin
    integer C;
    string S;
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    auxclv(Auxport,0,!AXCBI);
    if not !Csync then return;
    S _ "LOGIN";
    print("username: ");
    S _ S & " " & inchwl;
    print("password: ");
    auxcli(-1,'200,!AXCFS);	! echo off;
    S _ S & " " & inchwl;
    auxcli(-1,0,!AXCFS);	! echo on;
    print(crlf,"account: ");
    S _ S & " " & inchwl;
    AuxOut(S&#cr);
    S _ 0;
    do case C _ AuxIn land '177 of begin
    	["?"] begin print("?not accepted",crlf); return end;
	["@"] if length(S)
	    then S _ S & C
	    else done;
	[#cr][#lf] if length(S) then begin
	    if S then print("> ",S,crlf);
	    S _ null end;
	else S _ S & C
    end until !lh(Auxport);
    SendLine("REFUSE LINKS"); AuxSync("@");
    SendLine("REFUSE ADVISE"); AuxSync("@");
    SendLine("REFUSE SYSTEM"); AuxSync("@");
    SendLine("REFUSE AUTOLOGOUT"); AuxSync("@");
    SendLine("TERM NVT"); AuxSync("@");
    SendLine("FORMFEED"); AuxSync("@");
    SendLine("WIDTH 0"); AuxSync("@");
    print("[accepted]",crlf);
end;

procedure Enable;
begin
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    if not !Csync then return;
    SendLine("ENA");
    do case AuxIn land '177 of begin
	["@"] print("?cant enable",crlf);
	["!"] print("[enabled]",crlf);
	else continue
    end until true;
end;

procedure Disable;
begin
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    if not !Csync then return;
    SendLine("DIS");
    do case AuxIn land '177 of begin
	["@"] print("[disabled]",crlf);
	["!"] print("?cant disable",crlf);
	else continue
    end until true;
end;

procedure Quit;
begin
    string S;
    if not !lh(AuxPort) and !Csync then begin 
	SendLine("LOGOUT");
	do begin
	    S _ GetLine(5);
	    if length(S) then print("> ",S,crlf);
	end until not !SKIP!;
    end;
    AuxZap;
    quick!code uuo!EXIT end;
end;

procedure directory;
begin
    integer CNT,C,B,E;
    string INFILE,OUTFILE,S;
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    if not !Csync then return;
    print("file group (tenex): ");
    INFILE _ inchwl;
    if !SKIP!=#esc then begin
	INFILE _ INFILE & #esc;
	print(crlf) end;
    print("output file (local): ");
    OUTFILE _ inchwl;
    if !SKIP!=#esc then begin
	print("?no default",crlf);
	return end;
    AuxOut("DIR "&infile&","&#cr);
    do case AuxIn land '177 of begin
	["?"] begin
	    print("?cant find/read file group",crlf);
	    auxclv(auxport,0,!AXCBI);
	    return end;
	[#lf] done;
	else
    end until !lh(auxport);
    if equ(OUTFILE,"TTY:") or index("TERMINAL",OUTFILE)=1
	then open(C_getchan,"TTY",0,0,4, 0,0,E)
	else open(C_getchan,"DSK",0,0,4, 0,0,E);
    enter(C,OUTFILE,E);
    if E then begin
	print("?cant enter output file",crlf);
	release(C);
	return end;
    SendLine("DATE");
    SendLine("LENGTH");
    SendLine(null);		! confirm;
    CNT _ 0;
    while true do begin
	S _ GetLine(2);
	if !SKIP! 
	    then S _ S & #lf
	    else if equ(S,"@") or equ(S,"!") then done;
	cprint(C,S);
	CNT _ CNT + length(S);
    end;
    close(C); release(C);
    print("[",CNT," characters]",crlf);
end;

procedure get;
begin
    integer CNT,C,B,E;
    string INFILE,OUTFILE,S;
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    if not !Csync then return;
    print("input file (tenex): ");
    INFILE _ inchwl;
    if !SKIP!=#esc then begin
	INFILE _ INFILE & #esc;
	print(crlf) end;
    print("output file (local): ");
    OUTFILE _ inchwl;
    if !SKIP!=#esc then begin
	OUTFILE _ INFILE;
	print(" = ",INFILE,crlf) end;
    AuxOut("COPY "&infile&" TTY:"&#cr);
    do case AuxIn land '177 of begin
	["?"] begin
	    print("?cant find/read input file",crlf);
	    auxclv(auxport,0,!AXCBI);
	    return end;
	["]"] done;
	else
    end until !lh(auxport);
    if equ(OUTFILE,"TTY:") or index("TERMINAL",OUTFILE)=1
	then open(C_getchan,"TTY",0,0,4, 0,0,E)
	else open(C_getchan,"DSK",0,0,4, 0,0,E);
    enter(C,OUTFILE,E);
    if E then begin
	print("?cant enter output file",crlf);
	release(C);
	return end;
    SendLine(null);		! confirm;
    CNT _ 0;
    while true do begin
	S _ GetLine(2);
	if !SKIP! 
	    then S _ S & #lf
	    else if equ(S,"@") or equ(S,"!") then done;
	cprint(C,S);
	CNT _ CNT + length(S);
    end;
    close(C); release(C);
    print("[",CNT," characters]",crlf);
end;

procedure send;
begin
    integer CNT,C,B,E;
    string INFILE,OUTFILE,S;
    if !lh(AuxPort) then begin print("?not connected",crlf); return end;
    if not !Csync then return;
    print("input file (local): ");
    INFILE _ inchwl;
    if !SKIP!=#esc then begin
	print("?no default",crlf);
	return end;
    print("output file (tenex): ");
    OUTFILE _ inchwl;
    if !SKIP!=#esc then begin
	OUTFILE _ INFILE;
	print(" = ",INFILE,crlf) end;
    AuxOut("COPY TTY: "&outfile&#cr);
    do case AuxIn land '177 of begin
	["?"] begin
	    print("?cant write output file",crlf);
	    auxclv(auxport,0,!AXCBI);
	    return end;
	["]"] done;
	else
    end until !lh(auxport);
    open(C_getchan,"DSK",0,4,0, 256,B,E);
    lookup(C,OUTFILE,E);
    if E then begin
	print("?cant lookup input file",crlf);
	release(C);
	return end;
    SendLine(null);		! confirm;
    S _ GetLine(4);
    if !SKIP! then begin
	print("> ",S,#lf);
	print("?cant write output file",crlf);
	release(C);
	return end;
    CNT _ 0;
    setbreak(1,#lf,#cr&#ctrl("A")&#ctrl("C")&#ctrl("Q")&#ctrl("Z")&'177,"INS");
    while not E do begin
	S _ input(C,1);
	if E then done;
	SendLine(S);
	CNT _ CNT + length(S) +1;
    end;
    AuxOut(#ctrl("Z"));
    close(C); release(C);
    print("[",CNT," characters]",crlf);
end;

begin	"MAIN"
    external boolean RPGSW;
    AuxTrace _ RPGSW;
    ttyup(true);
    print("FTP-tenex version ",memory['137],crlf);
    while true do begin "cmdloop"
	print("*");
	case inchwl of begin
	["C"] connect;
	["D"] directory;
	["E"] enable;
	["G"] get;
	["L"] login;
	["S"] send;
	["T"] print("[",
		(if AuxTrace_not AuxTrace then null else "no "),
		"trace]",crlf);
	["Q"] quit;
	[0] ;
	["?"] print("one of:
  Connect	- connect to tenex host (specify Tymnet host or gateway no)
  Login		- login to tenex host
  Get		- get text file
  Send		- send text file
  Directory	- get directory of tenex files
  Enable	- enable tenex privileges
  Trace		- toggle trace switch
  Quit		- quit
");
	else print("type ? for help",crlf) end
    end "cmdloop";
end "MAIN";
end "FTP10X" $

 