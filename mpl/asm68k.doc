                                                              November 17, 1983















                        *    **** *   *  ****  ***  *   *
                       * *  *     ** ** *     *   * *  * 
                      *****  ***  * * * ****   ***  ***  
                      *   *     * *   * *   * *   * *  * 
                      *   * ****  *   *  ***   ***  *   *



       -- RELOCATABLE MACRO ASSEMBLER FOR THE M68000 MICRO-PROCESSOR --



                              Manual Prepared by:
                                   MICROTEC

                                  Revised by:
                                   John Kopf
                          NETWORK TECHNOLOGY DIVISION
                               November 17, 1983










     ====================================================================
     |       THIS DOCUMENT IS THE SOLE PROPERTY AND CONFIDENTIAL        |
     |       INFORMATION  OF  TYMSHARE,  INC.,  AND  MAY  NOT BE        |
     |       COPIED  IN  WHOLE OR IN PART  OR  DISCLOSED  TO ANY        |
     |       THIRD PARTY  WITHOUT THE PRIOR  WRITTEN  CONSENT OF        |
     |       TYMSHARE.                                                  |
     ====================================================================





                                M68000 Assembler Manual              ASM68K.DOC
                                                              November 17, 1983







                                   TABLE OF CONTENTS

        Section                                                            Page



        1.   INTRODUCTION                                                     1


        2.   ASSEMBLER LANGUAGE                                               2
          2.1   Statements                                                    4
          2.2   Comment Statement                                             4
          2.3   Symbolic Addressing                                           5


        3.   SYNTAX                                                           7
          3.1   Character Set                                                 7
          3.2   Constants                                                     8
          3.3   Symbols                                                      10
          3.4   Registers                                                    10
          3.5   Assembly Location Counter                                    11
          3.6   Expressions                                                  12


        4.   INSTRUCTIONS AND ADDRESS MODES                                  14
          4.1   Instructions                                                 14
          4.2   Qualifiers                                                   14
          4.3   Registers                                                    15
          4.4   Operands                                                     16
          4.5   Address Modes                                                17
             4.5.1    Register Direct Modes                                  17
             4.5.2    Memory Address Modes                                   18
             4.5.3    Special Address Modes                                  18

          4.6   Variants of Instruction Types                                19
          4.7   Assembler Syntax for the Addressing Modes                    20


        5.   DIRECTIVES                                                      23
          5.1   ORG - Begin Absolute Section                                 24
          5.2   END - End of Assembly                                        25
          5.3   EQU - Equate a Symbol to an Expression                       25
          5.4   SET - Equate a Symbol to an Expression                       26
          5.5   REG - Define Register List                                   27
          5.6   DC - Define Constant                                         27
          5.7   DS - Define Storage                                          28
          5.8   DCB - Define Constant Block                                  29
          5.9   SPC - Space Lines On Listing                                 30

                                M68000 Assembler Manual              ASM68K.DOC
                                                              November 17, 1983


          5.10  PAGE - Advance Listing Form to Next Page                     30
          5.11  TTL - Set Program Heading                                    31
          5.12  LIST - Turn On Source Listing                                31
          5.13  NOLIST - Turn Off Source Listing                             32
          5.14  LLEN - Change Length of Listing Output Line                  32
          5.15  NOOBJ - Suppress Creation of the Output Object Module        32
          5.16  OPT - Set the Options Specified                              33
          5.17  IF - Conditional Assembly Statement                          35
          5.18  IFC - Conditional Assembly String Equality Test Statement    35
          5.19  IFNC - Conditional Assembly String Inequality Test Statement 35
          5.20  ELSE - Conditional Assembly Converse                         36
          5.21  ENDC - End Conditional Assembly Code                         37
          5.22  INCLUDE - Include Source File                                38


        6.   MACROS                                                          39
          6.1   Macro Heading                                                39
          6.2   Macro Body                                                   40
          6.3   Macro Terminator                                             41
          6.4   Macro Call                                                   41
          6.5   LOCAL - Define Local Symbol                                  43
          6.6   MEXIT - Alternate Macro Exit                                 45
          6.7   Macro Parameter Count                                        45


        7.   RELOCATION                                                      47
          7.1   Program Sections                                             47
          7.2   Linking                                                      50
          7.3   Relocatable Symbols                                          50
          7.4   Relocatable Expressions                                      51
          7.5   Relocation Directives                                        51
             7.5.1    SECT  -  Specify Noncommon Section                     52
             7.5.2    SECTION  -  Specify Noncommon Section                  52
             7.5.3    COMMON  -  Specify Common Section                      52
             7.5.4    XDEF  -  Specify External Definition                   53
             7.5.5    XREF  -  Specify External Reference                    54
             7.5.6    IDNT  -  Specify Module Name                           55


        8.   USER CONTROL OF ADDRESSING MODES                                56
          8.1   Base Displacement Addressing - Introduction                  59
             8.1.1    The USING Directive                                    60
             8.1.2    The ENDU directive                                     61

          8.2   Definition of a Base Register                                61
          8.3   Programmer Responsibility                                    62
          8.4   Resolution of Ambiguous Operands with Base-Reg. Addressing   62


        9.   HOW TO USE THE ASSEMBLER                                        65
          9.1   Invocation                                                   65
             9.1.1    Example                                                67


                                M68000 Assembler Manual              ASM68K.DOC
                                                              November 17, 1983


          9.2   Assembler Listing                                            67
          9.3   The Object Module                                            69
          9.4   Symbol Record                                                70
          9.5   Header Record                                                70
          9.6   Data Record                                                  70
          9.7   Record Count Record                                          71
          9.8   Terminator Record                                            71
          9.9   Cross Reference Format                                       72


                                     APPENDICES
                                     ==========


        I.   ASSEMBLER ERROR CODES                                           74


        II.  ASCII AND EBCDIC CODES                                          77


                                      INDEX
                                      =====                                  78
































                                M68000 Assembler Manual              ASM68K.DOC
        INTRODUCTION                                          November 17, 1983






                                   1 -  INTRODUCTION


             MICROTEC  has  developed  a Relocatable  Macro  Assembler  for the
        Motorola  68000 microprocessor  that translates  symbolic  machine code
        into  either  relocatable  object  code,  which  may  be  processed  by
        MICROTEC'S Linking Loader, or directly into absolute object code.

             The 68000 Assembler is  easy to use and understand.   The mnemonic
        Operation Codes as  well as Assembler  Directives are similar  to those
        utilized  by  Motorola  in  their  literature  and  in  their  software
        products.  This has been done to eliminate the necessity of  learning a
        new assembly language.

             The  assembler is  a two-pass  program that  issues  helpful error
        messages,  produces an  easily read  program listing  with a  symbol or
        cross  reference table,  and outputs  a computer  readable  absolute or
        relocatable object (load) module.

             The assembler  features relocation, macro  capability, conditional
        assembly, symbolic and relative addressing, forward references, complex
        expression evaluation, cross reference  listing and a versatile  set of
        directives.  Additionally, the assembler is capable of  generating data
        in  several number  based  systems as  well  as both  ASCII  and EBCDIC
        character  codes.   These  features  aid  the   programmer/engineer  in
        producing well documented, working programs in a minimum of time.

             To better understand the 68000 microprocessor and  the instruction
        set, the user is referred to the Motorola literature and  in particular
        the Motorola 68000 16-Bit Microprocessor User's Manual.




















        1                       M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER LANGUAGE                                    November 17, 1983






                                2 -  ASSEMBLER LANGUAGE


             The  assembler  language provides  a  means to  create  a computer
        program.   The  features of  the  Assembler are  designed  to  meet the
        following goals:

               o       Programs are easy to create

               o       Programs are easy to modify

               o       Programs are easy to read and understand

               o       A machine readable load module is generated

             This  assembler language  has  been developed  with  the following
        features:

               o       Symbolic   machine   operation   codes  (opcodes,
                       directives)

               o       Symbolic address assignments and references

               o       Relative addressing

               o       Data creation statements

               o       Storage reservation statements

               o       Assembly listing control statements

               o       Address constants

               o       Character codes in ASCII or EBCDIC

               o       Comments and remarks for documentation

               o       Cross reference table listing

               o       Relocatable or absolute object module

               o       Conditional assembly capability

               o       Macro capability

             An  assembly language  program is  a program  written  in symbolic
        machine language and is comprised of statements.  A statement is either
        a symbolic instruction, a directive, a macro statement, or a comment.


        2                       M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER LANGUAGE                                    November 17, 1983


             The symbolic machine instruction is a written specification  for a
        particular machine operation expressed by symbolic operation  codes and
        sometimes symbolic addresses or operands.

             For example:

                                ISAM    MOVE    MEM,D2

             where:

               ISAM -  is  a  symbol  which  will  represent  the memory
                       address of the instruction.

               MOVE -  is a  symbolic op-code  which represents  the bit
                       pattern of the MOVE instruction.

               MEM  -  is a symbol representing a memory address.

               D2   -  is a symbolic keyword representing  data register
                       number 2.

             A directive statement is a statement which is not  translated into
        a machine instruction, but rather is interpreted as a directive  to the
        assembler program.  For example:

                                ABAT    DC      DELT

             where:

               ABAT -  is  a symbol.   The  assembler is  to  assign the
                       memory  address  of  the first  byte  of  the two
                       allocated bytes to this symbol.

               DC   -  is  a  directive  which  directs   the  assembler
                       program to allocate two bytes of memory.

               DELT -  is  a   symbol  representing  an   address.   The
                       assembler  is  directed to  place  the equivalent
                       memory address into the two allocated bytes.















        3                       M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER LANGUAGE                                    November 17, 1983


                                    2.1  Statements


             Statements are always written  in a particular format  as depicted
        below:

           LABEL FIELD    OPERATION FIELD    OPERAND FIELD    COMMENT FIELD

             The statement  is assumed  to be  written as  an 80  character (or
        less) record.

             The Label  Field is  provided to assign  symbolic names  to memory
        addresses or values.  The Label Field may begin in any column if  it is
        terminated by  a colon or  it may  begin in column  one with  the colon
        omitted.  A statement may consist of only a label.

             The Operation  Field is provided  to specify a  symbolic operation
        code, a directive, or a macro call.  If present, this field must either
        begin beyond column one or be separated from the Label Field by  one or
        more blanks or tabs or a colon.

             The  Operand  Field  is  provided  to  specify  arguments  for the
        operation in the  Operation Field.  The  Operand Field, if  present, is
        separated from the Operation Field by one or more blanks or tabs.

             The Comment Field is provided to enable the assembly language user
        to optionally  place a message  stating the purpose  of a  statement or
        group of statements.   For those operations which  may or may  not take
        operands,  the Comment  Field must  be preceded  by a  semicolon  or an
        exclamation point.  These are the END, ORG and ENDU  directives.  Also,
        if a statement contains the == operator, the Comment Field, if present,
        must be introduced by a semicolon or exclamation point.

             A statement  may be completely  blank in which  case a  blank line
        will appear on the output listing.






                                2.2  Comment Statement


             A Comment Statement  is a statement that  is not processed  by the
        assembler program.  It is merely reproduced on the assembly listing.  A
        comment statement is indicated by encoding an asterisk, a semicolon, or
        an exclamation point as the  first nonblank character on a  line.  This
        may  be  in  any  column.  Blank  lines  are  also  treated  as comment
        statements.

                        ! THIS IS A COMMENT STATEMENT


        4                       M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER LANGUAGE                                    November 17, 1983


                               2.3  Symbolic Addressing


             When  writing  statements  in  symbolic  machine  language,  i.e.,
        assembler  language, the  machine operation  code is  usually expressed
        symbolically.   For example  the machine  instruction that  rotates the
        contents of Data Register 1 left one bit may be expressed as:

                                ROL     #1,D1

             When translating  this symbolic operation  code and  its arguments
        into  machine  language for  the  68000 the  assembler  defines  a word
        containing $E3,  $59 at  the memory location  indicated by  the current
    ssembly Location Counter.  The address of the translated byte is known
        because the Assembly Location Counter  is always set to the  address of
        the byte currently being assembled.

             The user  can optionally  attach a label  to such  an instruction.
        For example:

                        SAVR    ROL     #1,D1

             The  assembler, upon  seeing a  valid symbol  in the  label field,
        assigns the equivalent address to the label.  The equivalent address is
        the value  contained in  the Assembly Location  Counter.  In  the given
        example, if  the ROL instruction  is to be  stored at the  address 128,
        then the symbol SAVR will be  set to the value 128 for the  duration of
        the assembly.

             The symbol could  then be used anywhere  in the source  program to
        refer to the instruction  location.  The important concept is  that the
        address of the instruction need  not be known; only the symbol  need be
        used to refer to the instruction location.

             Thus when  jumping to  the ROL instruction  above, the  user could
        write:

                                JMP     SAVR

             When  the jump  instruction is  translated by  the  assembler, the
        address of the  ROL instruction is placed  in the address field  of the
        instruction.

             It is also possible to use symbolic addresses which are near other
        locations  to refer  to those  locations without  defining  new labels.
        This may be done through use of the + and - operators.  For example:

                                JMP     BEG+6
                        BEG     MOVE    D1,D2
                                CMPI.B  #$2F,(A3)
                                ROL     #2,D1

                                ADDQ    #7,PAUL

        5                       M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER LANGUAGE                                    November 17, 1983


             In the above example, the instruction " JMP BEG+6 " refers  to the
        ROL instruction.  BEG+6  means the address of  BEG plus 6  bytes.  This
        type of addressing is not recommended as the variation in the number of
        bytes  per  instruction will  tend  to cause  references  to  the wrong
        location.  Here,  for instance, the  MOVE instruction requires  2 bytes
        and the CMPI instruction 4 bytes, but this is far from obvious.
















































        6                       M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983






                                      3 -  SYNTAX


             The Assembler  Language is a  language like any  other.  It  has a
        character set, vocabulary, rules of grammar, and allows  individuals to
        define new words or elements.  The rules that describe the language are
        termed the syn tax of the language.

             For a symbol, expression, or statement in assembler language to be
        translated by  the assembly  program, it must  be written  correctly in
        accord with the rules of syntax described below.






                                  3.1  Character Set


             The following  list of  c haracters are  those the  assembler will
        recognize.

             They are  the only  valid characters  and any  others except  in a
        comment field will generate  an error.  Some of the  special characters
        have no previously defined meaning except as a character constant.

             The  assembler  maps lower  case input  into upper  case everwhere
        EXCEPT  inside quoted  strings.  Thus  ABc and  abC represent  the same
        symbol,  which  is  printed  in the  symbol  table  or  cross reference
        listing, and appears in the object file, as ABC.

                                 Alphabetic Characters

                  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                  a b c d e f g h i j k l m n o p q r s t u v w x y z

                                  Numeric Characters

                                  0 1 2 3 4 5 6 7 8 9

                                  Special Characters








        7                       M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


                      blank                            /  slash
                   >  greater than                     $  dollar
                   <  less than                        *  asterisk
                   '  single quote                     (  left parenthesis
                   ,  comma                            )  right parenthesis
                   +  plus sign                        @  commercial at
                   -  minus sign                       .  period
                   &  ampersand                        :  colon
                   !  exclamation                      ;  semi-colon
                   "  double quote                     =  equal sign
                   #  sharp                            ?  question mark
                   %  percent                          _  underbar
                   \  backslash






                                    3.2  Constants


             A  constant is  an invariant  quantity.  It  may be  an arithmetic
        value  or  a character  code.   There are  several  ways  of specifying
        constants in this assembler language.

             Decimal  constants  may  be  defined  as  a  sequence  of  numeric
        characters  optionally  pr  eceded  by a  plus  or  a  minus  sign.  If
        unsigned, the value is assumed to be positive.

             In most  cases, constants must  be contained in  one, two  or four
        bytes.  A one byte constant can contain an unsigned number with a value
        from 0 to 255.  A two byte  unsign ed number can range from 0  to 65535
        and  a four  byte value  can  range from  0 to  4,296,967,295.   When a
        constant is negative, its equivalent two's complement representation is
        generated  and  placed  in  the  field  specified.   A  one  byte two's
        complement signed n umber may range from -128 to +127, a two byte two's
        complement signed  number may range  from -32768 to  +32767 and  a four
        byte two's  complement signed number  may range from  -2,148,483,648 to
        +2,148,483,647.  Note  that the interpretation  of numbers whose  mos t
        significant  bit is  set may  be either  a large  positive number  or a
        negative number;  for example, the  one byte number  $FF may  be either
        +255  or  -1 depending  on  the usage.   The  assembler  will correctly
        recognize  such numbers  in  either form,  but the  user  is  generally
        responsible for their interpretation.

             All constants  are evaluated  as 32  bit quantities,  i.e., modulo
        2**32.  Whenever an attempt is made to place a constant in a  field for
        which it is too large, an error message is generated by the assembler.

             Other  numbered  constants  are  defined  by  utilizing  a special
        character  before  the  constant.   The  following  list  indicates the


        8                       M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


        available descriptors  and their meaning.   If no descriptor  is given,
        the number is assumed to be decimal.

                             % - binary
                             @ - octal
                             $ - hexadecimal

             Examples of these constants are:

             %10011    25        $FF       -@1377     255     $173F4d5

             An  ASCII  or  EBCDIC  character  constant  may  be  specified  by
        enclosing one or more characters within quote marks and  preceding them
        with an A for ASCII or an E for EBCDIC.  If no descriptor is specified,
        the string  is assumed to  be ASCII.  A  character constant may  be one
        character for byte fields, one  or two characters for word  fields, and
        up to four characters for  a 32 bit field.  Constants shorter  than the
        length  of the  field are  right justified  within the  field,  and the
        remainder of the field is zero-filled.

             Examples of this constant form are:

                                ADD.B   #'Z',D2
                                EOR     #E'0',CCR
                                ANDI    #A'aB',D7
                                MOVE.L  #'JUMP',(A2)

             A character  string may  be specified by  using the  DC directive.
        Character  strings   must  follow  the   format  described   for  these
        directives.  Characters in a string may be specified as ASCII or EBCDIC
        in a manner similar to the character constant.

             Examples  of  the character string are:

                                A'TELETYPE CODES'               ; these two are
                                a'teletype codes'               ; different
                                E'terminal codes'
                                ' 123.7'

             Note that one byte of memory is allocated for each character  in a
        string.  When a string is specified in a DC.B directive, characters are
        stored in sequential bytes  of memory beginning at the  first available
        byte.

             To generate the code for a single quotation mark in  the character
        constant or  string it  must be  specified as  two single  quote marks.
        Example:

                                'DON''T'

             The code for a single quote mark will be generated once  for every
        two quote marks that appear contiguously within the character string.


        9                       M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


                                     3.3  Symbols


             A symbol is  a sequence of characters.   The first character  in a
        symbol must be  alphabetic or one  of the special  characters: question
        mark (?), period (.), or underbar(_).  Subsequent characters may be any
        of these or numbers  (but excluding period).  Other  special characters
        may  not be  used in  a symbol,  except in  local symbols  within macro
        definitions; these may include the sequence (\@).  Imbedded  blanks are
        not permitted.  Since the assembler generates local symbols  that start
        with a  question mark, it  is recommended that  they be avoided  by the
        user.

             Only the first 8 characters of a symbol are used by  the Assembler
        to define that symbol; the remaining characters are for documentation.

             Symbol  information  is  stored internally  in  a  table.  Because
        symbols are  stored in  a compact variable-length  format, there  is no
        fixed maximum number  of symbols which fills  up the table.   The table
        can hold roughly 200 symbols of average length 6 characters.

             Symbols are used to represent arithmetic values, memory addresses,
        bit arrays (masks), etc.

             Examples of valid symbols:

           .HERE
           LAB1
           mask                 ; (same as MASK)
           L234567890123        ; (truncated to L2345678)

             Examples of invalid symbols:

           HERE.                ; ("." in other then first character position)
           ABORT*               ; (contains special character)
           1LAR                 ; (begins with a numeric)
           PAN N                ; (imbedded blank, symbol is PAN)






                                    3.4  Registers


             The assembler has  internally defined the symbolic  register names
        that Motorola  uses in  their assembly language  to denote  the various
        hardware registers.  The registers are:

             32-bit address registers - A0,A1,A2,A3,A4,A5,A6,A7
             32-bit data registers    - D0,D1,D2,D3,D4,D5,D6,D7
             control registers        - SP,CCR,SR,USP,PC

        10                      M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


             Users may also  define their own  keywords to represent  the above
        predefined registers with the EQU directive.  In this case  the operand
        of the EQU must consist only of one of the above registers.

             For example:

                        COUNT   EQU     d4
                                ADD.B   #1,COUNT

             would be the same as:

                                ADD.B   #1,D4

             Registers and keywords  defined by the user  will not appear  in a
        symbol table or cross reference listing.

             Finally, the predefined symbol  NARG (described in the  chapter on
        Macros) is used to represent the number of arguments passed in  a macro
        call.






                            3.5  Assembly Location Counter


             During  the assembly  process the  assembler maintains  a variable
        that always contains the  address of the current memory  location being
        assembled.  This variable is called the Assembly Location  Counter.  It
        is used by the assembler to assign addresses to assembled bytes, but is
        also available to the programmer.

             The character "*"  is the symbolic  name of the  Location Counter.
        It may  be used like  any other symbol,  but it may  not appear  in the
        label field.

             When using  the asterisk  (*) the  programmer may  think of  it as
        expressing the idea: " * = address of myself.  "

             For example:

                        10      JMP     *

             The jump instruction is  in location 10.  The  instruction directs
        the microprocessor to "jump  to myself." The Assembly  Location Counter
        in  this example  contains the  value 10  and the  instruction  will be
        translated to a  jump to location 10  from location 10.  This  could be
        used when waiting for an interrupt.

             The  Assembly Location  Counter should  not be  confused  with the


        11                      M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


        hardware Program Counter (PC).  The PC always contains a value  2 bytes
        greater than the Assembly  Location Counter; this is often  the address
        of the next instruction to be executed.






                                   3.6  Expressions


             An expression is a sequence  of one or more symbols,  constants or
        other expressions separated  by arithmetic operators.   Expressions are
        evaluated left to  right subject to  the precedence of  operators shown
        below.  Parentheses may be used  to establish the correct order  of the
        arithmetic  operators and  it is  recommended they  be used  in complex
        expressions involving operators such as >>, &, =, etc.

             The operators and their precedence are:

                Precedence             Operator

                    1                  ==         (test for existing operand)
                    2                  +          (unary plus)
                                       -          (unary minus)
                                       "          (logical NOT)
                    3                  *          (multiplication)
                                       /          (division)
                                       >>         (shift right)
                                       <<         (shift left)
                    4                  +          (addition)
                                       -          (subtraction)
                    5                  =          (equality)
                                       <>         (not equality)
                                       >          (greater than)
                                       >=         (greater or equal)
                                       <          (less than)
                                       <=         (less or equal)
                    6                  &          (logical AND)
                    7                  !          (logical OR)
                                       !!         (exclusive OR)

             The == operator is used  to determine if an operand  exists.  This
        is further described in the chapter on Macros.

             The comparison operators =,  >=, etc., return a logical  True (all
        one bits) if the comparison is  true and a logical False (zero)  if the
        comparison is not true.  All operands are considered to be  unsigned 32
        bit values.  For example:

                                IF      DATA=5


        12                      M68000 Assembler Manual              ASM68K.DOC
        SYNTAX                                                November 17, 1983


             The shift operators (>>,  <<) shift the argument that  goes before
        the operator right or left the number of bits specified by the argument
        that follows  the operator.   Zeros are  shifted into  the high  or low
        order bits.  For example:

                                DC.B    2<<BIT

             Note that  imbedded blanks  are not  allowed in  expressions.  The
        assembler interprets spaces as termination characters.

             An expression must  resolve to a single  unique value that  can be
        contained in 32 bits.  Consequently, character strings longer than four
        characters  are  not  permitted in  expressions.   All  expressions are
        evaluated  modulo  2**32.  Whenever  an  attempt is  made  to  place an
        expression in a one or two byte field and the calculated result  is too
        large  to  fit,  an  error message  is  generated.   Examples  of valid
        expressions:

                    PAM+3                            LOOP+(ADDR>>8)
                    (PAM+$45)/CAL                    VAL1=VAL2
                    IDAM&255

































        13                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983






                          4 -  INSTRUCTIONS AND ADDRESS MODES


             The 68000  Assembler Language allows  for 32-bit  addressing.  The
        Linking Loader (and all current 68000 microprocessors) allows  for only
        24 bits of address.   Motorola's solution to this problem,  followed by
        Microtec, is  to allow   full 32-bit addressing  in the  Assembler; the
        loader  produces error messages  when it detects addresses   beyond the
        24 bit range.  The current Assembler will thus function properly should
        Motorola produce a compatible 32-bit machine in the future.






                                   4.1  Instructions


             The Microtec Assembler instruction set and the legal  operands for
        various instructions  are identical  to those  defined by  Motorola, as
        described in the 16-bit Microprocessor User's Manual (MC68000M).






                                    4.2  Qualifiers


             Instruction mnemonics  may in  some cases  have a  qualifier (also
        called extension) separated from  the mnemonic by a period.   The usual
        use of the qualifier field is to specify the scope of operation  of the
        instruction.  For  this purpose the  recognized codes are  ".B" (byte),
        ".W" (word), and ".L" (longword).   If an instruction which may  have a
        size code does not have  one, ".W" is the default.  A  few instructions
        use the qualifier field to force the assembler to override its defaults
        in choosing the  short or long form  of an instruction;  the recognized
        codes in this case are ".S" (short) and ".L" (long).










        14                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983



             The following instructions recognize the size codes .B,.W and .L:

                 ADD                 CMPI                OR
                 ADDI                CMPM                ORI
                 ADDQ                EOR                 ROL
                 ADDX                EORI                ROR
                 AND                 LSL                 ROXL
                 ANDI                LSR                 ROXR
                 ASL              ** MOVE                SUB
                 ASR                 NEG                 SUBI
                 CLR                 NEGX                SUBQ
                 CMP                 NOT                 SUBX
                                                         TEST

            **(but not to or from the Status Register or User Stack Pointer)

             The following  instructions recognize only  the size codes  .W and
        .L:

                 ADDA                MOVEM
                 CMPA                MOVEP
                 EXT                 SUBA
                 MOVEA

             The following  instructions recognize the  shortness codes  .L and
        .S:

                 JMP
                 JSR
                 Bcc






                                    4.3  Registers


             The 68000  has sixteen 32-bit  registers for the  programmer's use
        and  a 24-bit  program counter.   The eight  32-bit Data  Registers are
        numbered from D0 to D7.  They are used to contain data for  byte, word,
        and  longword  operations.   The  eight  32-bit  Address  Registers are
        numbered from A0 to A7.   They are used as software stack  pointers and
        base address  registers, and  may be  used for  word and  longword data
        operations.  Register A7 is the system stack pointer and may  be called
        "SP" as well.  The program counter contains the address of the location
        two bytes beyond the beginning of the currently  executing instruction.
        The  user mnemonic  PC  does not  directly access  the  program counter
        register  but is  used to  force the  use of  program  counter relative
        addressing modes.  Other special registers are the user  stack pointer,


        15                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


        status  registers, and  condition code  register; these  are accessible
        only to  a few  instructions which are  described in  Motorola's 16-bit
        Microprocessor User's Manual.






                                     4.4  Operands


             In general instructions have  zero, one or two operands,  and some
        may have  either one or  two.  All  address modes may  be used  for any
        particular  instruction's  operand.   The legal  address  modes  for an
        instruction  vary  in an  irregular  way which  is  fully  described in
        Appendix B  of the Motorola  16-bit Microprocessor User's  Manual.  For
        two-operand instructions the first operand is the Source and the second
        is the Destination.



































        16                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983








                                  4.5  Address Modes


             There are twelve different address modes defined in  the Assembler
        Language, as follows:


            Register Direct Modes

                   I)  Data Register Direct
                  II)  Address Register Direct

            Memory Address Modes

                 III)  Address Register Indirect
                  IV)  Address Register Indirect with Postincrement
                   V)  Address Register Indirect with Predecrement
                  VI)  Address Register Indirect with Displacement
                 VII)  Address Register Indirect with Displacement and Index

            Special Address Modes
               Memory References

                VIII)  Absolute Short Address
                  IX)  Absolute Long Address
                   X)  Program Counter with Displacement
                  XI)  Program Counter with Displacement and Index

               Nonmemory Reference
                 XII)  Immediate

             In  this manual  the modes  will frequently  be referenced  by the
        Roman numerals found in the above table.





                    4.5.1  Register Direct Modes

             The  Register  Direct Modes  act  directly on  the  contents  of a
        register, either a  data register or  an address register  depending on
        the mode.





        17                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


                    4.5.2  Memory Address Modes

             The  Memory  Address  Modes specify  a  location  in  memory.  The
        Address Register Indirect Mode provides the address of this location in
        an address register.  The Address Register Indirect  with Postincrement
        Mode provides the address of this location in an Address  Register and,
        after using the address, increments the register by one, two,  or four,
        depending upon whether  the scope of the  operation is byte  (.B), word
        (.W),   or  longword   (.L).   The   Address  Register   Indirect  with
        Predecrement Mode decrements an  Address Register by one, two  or four,
        depending upon whether the size of the operand is byte (.B), word (.W),
        or longword (.L), and then uses the resulting contents of  the register
        as the address of  the memory location.  The Address  Register Indirect
        with Displacement Mode calculates the address of the memory  operand as
        the sum of the contents of an address register and a  sign-extended 16-
        bit  displacement;  it  requires 2  bytes  of  extension.   The Address
        Register  Indirect  with  Displacement and  Index  Mode  calculates the
        address of the memory operand as the sum of the contents of  an Address
        Register, the contents of an Index Register (which may be an Address or
        a Data  Register) and  a sign-extended  8-bit displacement.   The Index
        Register involved may use either all 32 bits or 16  bits sign-extended.
        This addressing mode requires 2 bytes of extension.





                    4.5.3  Special Address Modes

             The first two Special Address Modes refer to a location  in memory
        by its  actual address,  either 16  bits sign-extended  (Absolute Short
        Mode, 2 bytes of extension)  or 32 bits (Absolute Long Mode, 4 bytes of
        extension).   Since 16-bit  addresses are  sign-extended, the  areas of
        memory addressable by  them are from 0  to $7FFF and from  $FFFF8000 to
        $FFFFFFFF.  (In the Loader, however,  the high area is from  $FF8000 to
        $FFFFFF.   The  only problem  this  causes is  that  absolute addresses
        specified  between  $FF8000  and  $FFFFFF  in  the  assembler  are  not
        recognized as short-addressable.  If it is necessary to  place absolute
        code in the high short addressable part of memory and to refer to it by
        short  addressing  modes,   the  absolute  code  should   be  assembled
        separately and referred to as  XREF.S.  This will result in the  use of
        Absolute  Short  mode in  most  cases, although  the  modes  with 8-bit
        displacements will never be used.)

             The next two Special Address  Modes refer to a location  in memory
        by  means  of its  distance  from the  current  program  counter.  (The
        program counter contains  the address of  the word following  the first
        word of  the instruction.) The  Program Counter with  Displacement Mode
        calculates the  address of  this location  by adding  the value  of the
        program counter to a  sign-extended 16-bit displacement; it  requires 2
        bytes of  extension.  The Program  Counter with Displacement  and Index
        Mode calculates the address of this location by adding the value of the


        18                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


        program  counter,  the contents  of  an index  register  (which  may be
        address  or data, and  may use the entire 32  bits or the low  order 16
        bits,  sign-extended),  and  a  sign-extended  8-bit  displacement;  it
        requires 2 bytes of extension.

             The  68000 microprocessor  may only  address odd  memory locations
        when  the  instruction is  operating  on a  single  byte.   Neither the
        assembler nor the loader checks for this; in many cases such as indexed
        addressing  modes  neither  the  assembler  or  loader  are  capable of
        checking for this situation.

             The  final  Special Address  Mode  provides data  directly  in the
        instruction (Immediate mode).  The  number of bits used and  the number
        of  bytes  of  extension  varies  with  the  instruction  and  with the
        qualifier.  Immediate data is always evaluated first as a 32-bit value.
        If the  instruction requires  fewer than 32  bits the  most significant
        bits are checked and discarded.   In most cases, if the  bits discarded
        are all 0  or all 1, the  instruction assembles normally, while  if the
        bits discarded are mixed zeros and ones, a V flag (warning) is printed.
        However, the ADDQ,  SUBQ, and all  Shift instructions require  that the
        immediate  value be  between 1  and 8  inclusive; the  TRAP instruction
        requires that the  immediate value be between  0 and 15  inclusive; the
        MOVEQ and  LINK instructions  (whose immediate  data are  sign extended
        before use) require that the bits discarded match the  most significant
        bit  retained.   If  the  rules  are  violated  for  these  exceptional
        instructions, the instruction does not assemble.

             The use of the  Status Register (SR) and Condition  Codes Register
        (CCR) is described in some  places in Motorola documentation as  a 13th
        address mode, although it is represented internally the same way as the
        Immediate  mode.  The  Status Register  mode is  available only  to the
        ANDI, EORI and ORI instructions.  For these instructions  the mnemonics
        SR and CCR are considered identical and the code produced is defined to
        be a reference to the SR or to the CCR based on whether the instruction
        qualifier is .W (SR) or .B (CCR).  The MOVE instruction also allows the
        operands SR and CCR,  but the code generated is  sufficiently different
        from  the usual  MOVE instruction  that these  variants  are considered
        separate instructions in Motorola's documentation.






                          4.6  Variants of Instruction Types


             Certain generic  instruction types  may be  coded by  the assembly
        language program with pairs of arguments other than those legal for the
        actual mnemonic.  The Microtec Assembler then treats the instruction as
        though its mnemonic  was a particular  variant of the  actual mnemonic.
        The variants recognized by the assembler are:


        19                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


              Generic       Variants

              ADD           ADD,ADDA,ADDQ,ADDI
              AND           AND,ANDI
              CMP           CMP,CMPA,CMPM,CMPI
              EOR           EOR,EORI
              MOVE          MOVE,MOVEA,MOVEQ
              OR            OR,ORI
              SUB           SUB,SUBA,SUBQ,SUBI

             For example:

           D250         ADD  (A0),D1
           D2D0         ADD  (A0),A1       ; ADDA
           5E50         ADD  #7,(A0)       ; ADDQ
           0650 FFFF    ADD  #$ffff,(a0)   ; ADDI

             When the ADD and SUB instructions take on the arguments #1,D4, for
        example, which are legal for  either the ADDQ or the ADDI  variant, the
        assembler chooses ADDQ  or SUBQ since these are two bytes  shorter than
        ADDI.  A programmer may force  the ADDI form by specifying ADDI  as the
        mnemonic.

             Variants may also be specified as mnemonics.  This coding practice
        is recommended as it is easier to understand the resulting code.






                    4.7  Assembler Syntax for the Addressing Modes


             For certain ways of specifying operands the Assembler creates just
        one address  mode.  Others  may result  in one  of several  modes.  The
        following discussion describes how the Assembler makes such decisions.

               An      represents an address register

               Dn      represents a data register

               Rn      represents  either an  address or  data register.
                       The assembler does not recognize the mnemonic Rn

               <abs exp> represents an absolute expression

               <rel exp> represents a relocatable expression

               <exp>   represents  either  an  absolute  or  relocatable
                       expression



        20                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


               {}      represent  a  field  which  may  or  may  not  be
                       present.  Commas within the brackets  represent a
                       choice of elements if the field is present.

             The operands  Dn   and  An  always  result in the  Register Direct
        modes, I and II respectively.

             The operands "(An)","(An)+",and "-(An)" always result in the first
        three Memory Address modes, III, IV and V respectively.

             The  operand "#<exp>"  results in  the Immediate  mode  (XII).  An
        absolute  expression  must be  within  a certain  size  range  which is
        dependent  on  the  instruction and  qualifier  code.   16-  and 32-bit
        immediate data can be relocated; smaller fields cannot.

             Remaining syntaxes  are ambiguous, because  of the  possibility of
        Base Registers.  These are described in Chapter 8.  If a  Base Register
        is a possible interpretation of an operand, it is always chosen.  Users
        must explicitly designate Base Registers in order for there to  be any;
        for the majority of users who  will not do this, the remainder  of this
        paragraph describes what happens when there are no Base Registers.

             The  operand "  <abs exp>(An)  " is  resolved as  Address Register
        Indirect  with  Displacement  (VI).   The  <abs  exp>  is  used  as the
        displacement.  It must evaluate to a 16-bit value (sign-extended) or an
        error will occur.

              The   operands  "<abs   exp>(Dn)","<abs  exp>(Rn.W)"   and  "<abs
        exp>(Rn.L)" are invalid.

             The operands "<rel exp>(Rn{.W,.L})" result in Program Counter with
        Displacement and Index mode (XI) provided the <rel exp> is known  to be
        in the same section (See Chapter 7) as the instruction; otherwise, they
        are invalid.  The specified register is used as an index register.  The
        .L qualifier  on the register  indicates all  32 bits of  it are  to be
        used; the .W or no qualifier indicates the low order 16 bits are  to be
        used, sign-extended.  The displacement is calculated by subtracting the
        current PC  from the <rel  exp>; this  value must fit  in 8  bits sign-
        extended or an error occurs.

             The operands "<abs exp>(An,Rn{.W,.L})" result in  Address Register
        Indirect with Displacement and Index mode (VII).  The <abs exp> is used
        as the displacement; it must evaluate to an 8-bit value (sign-extended)
        or an error occurs.  The first register is the address register and the
        second is the  index register, with qualifiers  as above (or  the index
        register only).

             The operands "<rel exp>(An,Rn{.W,.L})" are invalid.   The operands
        "<exp>(Dn,Rn{.W,.L})" are invalid.

             The   operand  "<exp>(PC)"   results  in   Program   Counter  with
        Displacement mode (X).  The displacement is calculated to be  the value


        21                      M68000 Assembler Manual              ASM68K.DOC
        INSTRUCTIONS AND ADDRESS MODES                        November 17, 1983


        of the <exp>  minus the current value  in the program counter  (not the
        location counter).  If  the operand is not  in the same section  as the
        instruction but is elsewhere in the current module, the value  used for
        calculating  the displacement  is the  offset of  the operand  from the
        beginning of its section,  and the displacement is resolved  finally by
        the Linker.  If  the operand is an  external reference, the  value used
        for calculating the displacement is 0, and the displacement is resolved
        finally by the Linker.   Both the final displacement calculated  by the
        Linker and the displacement calculated by the assembler must  be within
        16 bits sign-extended; if not, an error occurs.

             The operand "<exp>(PC,Rn{.W,.L})" results in Program  Counter with
        Displacement and Index mode (XI).  The displacement is calculated to be
        the value of the <exp>  minus the current value in the  program counter
        (not  the  location  counter).   Since  8-bit  displacements   are  not
        relocatable the  operand must  be in  the same  section in  the current
        module as the instruction and  the displacement must evaluate to  an 8-
        bit sign-extended value, or an error will occur.

             The operand <exp> results in one of the modes VIII, IX, or X.  The
        assembler chooses one of  these modes based on complicated  rules which
        are fully explained in Chapter 8, User Control of Addressing Modes.  In
        most cases good results will  be obtained by allowing the  assembler to
        use its default action.






























        22                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983






                                    5 -  DIRECTIVES


             The assembler directives are written as ordinary statements in the
        assembler language,  but rather than  being translated  into equivalent
        machine language,  they are  interpreted as  commands to  the assembler
        itself.

             Through use of these directives, the Assembler will reserve memory
        space,  define bytes  of data,  assign values  to symbols,  control the
        output listing, etc.

             This  chapter  describes  all  directives  except  those primarily
        associated  with  macro  assembly,  base  displacement  addressing, and
        relocation.

             The directives described in this chapter are:

                ORG             Begin an Absolute Section
                END             End of Assembly
                EQU             Equate a Symbol to an Expression (permanent)
                SET             Equate a Symbol to an Expression (temporary)
                REG             Define a Register List
                DC              Define Constant Value
                DS              Define Storage
                DCB             Define Constant Block
                SPC             Space lines on listing
                PAGE            Advance Listing Form to Next Page
                TTL             Set Program Heading
                LIST            List the Assembly
                NOLIST          Don't List the Assembly
                LLEN            Set Length of Line in Assembler Listing
                NOOBJ           Don't Create Object File
                OPT             Set Options for Assembly
                IF              Conditional Assembly Statement
                IFC             Conditional Assembly String Equality Test
                IFNC            Conditional Assembly String Inequality Test
                ELSE            Conditional Assembly Converse
                ENDC            End Conditional Assembly
                INCLUDE         Include Source File

             In the following descriptions, brackets, { }, are used to indicate
        optionality.  If  more than one  item appears within  the same  pair of
        brackets, a choice is indicated.






        23                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                           5.1  ORG - Begin Absolute Section


             The  ORG directive  is  used to  begin an  absolute  section.  The
        Location Counter is  set to the value  of the operand, if  present.  If
        there is no operand the  Location Counter is set to  immediately follow
        the last preceding  absolute section, if there  was one.  If  the first
        ORG in a program has no operand the Location Counter is set to  0.  All
        subsequent bytes will  be assigned sequential addresses  beginning with
        the address in the Location Counter.

             If the  program does  not have  an ORG,  SECT or  COMMON statement
        before the  first code-generating  statement, an ORG  0 is  assumed and
        assembly begins at location zero in the absolute program section.  That
        is, the program will not be relocatable.

             Example:

                                ORG     $100

             The general form is:

                {label} ORG{.qualifier} {expression}

             where:

           label - is an optional label which if present will be equated to the
               value of the Location Counter after this Counter is set.
           qualifier - may be S or L.  ORG.S is interpreted as both ORG and OPT
               F.  ORG.L is  interpreted as both ORG  and OPT -F.  ORG  with no
               qualifier does not alter the F option.
           expression - a value which will replace the contents of the Assembly
               Location Counter;  bytes subsequently assembled will be assigned
               memory addresses beginning with this value.  This expression may
               contain no forward, undefined, or relocatable symbols (including
               external refs.) The form " * +or- d " is legal, and the value of
               * used in this case is the ending value of the previous absolute
               section, or 0 for the first absolute section.

             If {expression} is not present but a comment field is present, the
        latter must be preceded by semicolon (;) or exclamation mark (!).













        24                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                              5.2  END - End of Assembly


             The END directive  is used to inform  the assembler that  the last
        source statement has been read  and to indicate a load  module starting
        address.   Any  statements  following the  END  directive  will  not be
        processed.

             Specifying  a  load address  in  this directive  also  informs the
        loader  that this  is a  main program.   If multiple  load  modules are
        combined by  the Linking  Loader, only  one module  may specify  a load
        address and hence be a main program.

             Example:

                                END     MAIN

             The general form is:

                                END     {expression}

             where:

           expression - is an address that is  placed in the end record  of the
               load module and informs the loader where program execution is to
               begin.  If this expression is not specified the load  address is
               set to zero for absolute assembly.

             If {expression} is not present but a comment field is present, the
        latter must be preceded by semicolon (;) or exclamation mark (!).






                      5.3  EQU - Equate a Symbol to an Expression


             The  EQU directive  causes the  assembler to  assign  a particular
        value  to a  new  label.  This  value may  be  an absolute  value  or a
        relocatable section value (see Chapter 7).

             This directive may also be used to define new keywords to  be used
        instead of the predefined assembler keywords.  This allows the  user to
        assign meaningful names to processor registers.

             Example:

                        SEVEN   EQU     D7
                        INDEX   EQU     A5

             The general form is:

        25                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                label   EQU     expression
                label   EQU     keyword

             where:

           label - is a symbol defined by this statement.
           expression - is an  expression whose value  will be assigned  to the
               given  label  for  the duration  of  the  current  assembly.  An
               attempt to reequate the same label will result in an error.  Any
               symbols used in the  expression must be defined  previously.  An
               external symbol may not be used in the expression.
           keyword - is  a  keyword  defined  by  the  assembler  or  a  symbol
               previously defined by this directive as a keyword.






                      5.4  SET - Equate a Symbol to an Expression


             The SET directive sets a symbol equal to a particular  value.  But
        unlike the EQU directive,  multiple SET directives for the  same symbol
        may  be placed  in a  source program.   The most  recent  SET directive
        determines  the value  of  the symbol  until another  SET  directive is
        processed.

             Like EQU, this directive may also be used to define new keywords.

             Example:

                        GO      SET     5
                        GO      SET     GO+10

             The general form is:

                label   SET     expression

             where:

           label - is a symbol defined by this statement
           expression - is a  value that  will be assigned  to the  given label
               until changed by another SET directive.  Any symbols used in the
               expression must be  previously defined.  An external  symbol may
               not be used in the expression.








        26                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                            5.5  REG - Define Register List


             This  directive assigns  a symbolic  name to  a register  list for
        future use in the MOVEM  instruction.  The symbol may not  be redefined
        anywhere else in the program.

             Example:

                        SAVE    REG     A1-A5/D0/D2-D4/D7
                                MOVEM   (A6),SAVE

             The standard format is:

                label   REG     register-list

             where:

           label - is a symbol whose value is to be defined
           register-list - list of  registers in the  format recognized  by the
               MOVEM instruction.  This is:
               A single register, or
               A  range of  consecutive registers  of the  same type  (A  or D)
                  denoted by the lowest and highest registers to be transferred
                  separated by a hyphen (lower one must come first), or
               Any combination of the above separated by a slash






                               5.6  DC - Define Constant


             The DC directive is  used to define up  to 70 bytes of  data.  The
        assembler will allocate two bytes per operand for a DC.W or DC  with no
        qualifier  and four  bytes per  operand for  a DC.L  regardless  of the
        operands.   For  a  DC.B  the  assembler  will  allocate  one  byte per
        character for character string operands and will allocate one  byte per
        operand  for all  other  operands.  All  expressions  (except character
        strings in a DC.B) must evaluate  to a value which fits in  this number
        of bytes or  an error is generated.   Negative values are  stored using
        their two's complement representation.

             If an odd number of bytes is entered in a DC.B directive,  the odd
        byte on the right will  be skipped and the Location Counter  aligned to
        an even value unless  the next statement is  another DC.B, a DS.B  or a
        DCB.B .  The byte skipped over is not initialized in any way.

             DC.W,  DC  with  no  qualifier,  and  DC.L  statements   may  have
        relocatable expressions as operands.  DC.B statements may not.


        27                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


             Example:  (with generated bytes shown)

        4142 4344       DC.B    'ABCDEfghi'     ; this assumes user has
        4566 6768                               ; installed lower case
        69
        45              DC.B    'E'
        0065            DC      'e'
        0000 0045       DC.L    'E'
        3132 3334       DC.L    '1234'
        000A 0005       DC.W    10,5,7
        0007
        00FF            DC      $FF

             The general form is:

                {label} DC{.qualifier}  operand1{,operand2,...}

             where:

           label - is an optional label  which will be assigned the  address of
               the first byte defined.
           qualifier - may be  .B for byte  data, .W for  word data, or  .L for
               longword data.  Default is .W
           operand - for .L or .W, an expression which evaluates to a 32 or 16-
               bit value respectively.  Character strings for .L or .W may thus
               be  no  more than  4  or 2  characters  long  respectively.  All
               expressions are  calculated as 32-bit  values;  for .W  the most
               significant 16 bits are discarded, and if the bits discarded are
               neither all zeroes nor all ones a V flag (warning)  is produced.
               For .B, an  expression which should  evaluate to an  8-bit value
               (either zero-filled  or one-filled,  as for  .W) or  a character
               constant or  an ASCII  or EBCDIC  character string  of up  to 70
               characters.






                               5.7  DS - Define Storage


             This directive is used to reserve a block of  sequential locations
        of  memory.  This  directive merely  causes the  program counter  to be
        advanced  and   hence,  the   contents  of   the  reserved   bytes  are
        unpredictable.  Locations may be  reserved in units of bytes,  words or
        longwords.

             This directive causes the location counter to be aligned to a word
        boundary unless the .B qualifier is used.  The form DS 0 may be used to
        force  alignment  between  two  DC.B,  DS.B  or  DCB.B   statements  if
        necessary.


        28                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


             Example:

                        JAKE    DS      $62
                        MOE     DS.B    100

             The general form is:

                {label} DS{.qualifier}  size

             where:

           label - is an optional label  which will be assigned the  address of
               the first byte allocated.
           qualifier - defines the units in which storage is allocated.  May be
               .B for bytes, .W for words, or .L for longwords.  Default is .W
           size - a value which specifies  the number of units to  be allocated
               by this directive.  Any symbols used in this expression  must be
               previously defined.   The final expression  may not  contain any
               relocatable terms.






                           5.8  DCB - Define Constant Block


             The  DCB directive  causes the  assembler to  allocate a  block of
        bytes,  words  or  longwords depending  on  the  qualifier.   Each unit
        allocated is set  to the same given  value.  This directive  causes the
        location  counter  to be  aligned  to  a word  boundary  unless  the .B
        qualifier is specified.

             Use of the DCB directive  causes the assembler to generate  a byte
        of code  for each byte  (not unit) allocated.   This can lead  to large
        object files, and it is therefore suggested that storage be initialized
        by a loop at runtime in most cases.

             Example:

                        DCB.L   100,$FFFFFFFF

             The general form is:

                {label} DCB{.qualifier} length,value

             where:

           label - is an optional label  which will be assigned the  address of
               the first byte allocated.
           qualifier - defines the units in which storage is measured.   May be
               .B for bytes, .W for words, or .L for longwords.  Default is .W.

        29                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


           length - an  absolute expression  defining  the number  of  units of
               storage to  allocate.  The expression  may not  contain forward,
               undefined or external references.
           value - the value  to which  each unit is  initialized.  This  is an
               absolute expression  which may  contain forward  references (but
               not relocatables or externals).






                           5.9  SPC - Space Lines On Listing


             This directive  causes one or  more blank lines  to appear  on the
        output  listing.   It  enables the  programmer  to  format  the program
        listing for easier  reading.  The directive  itself does not  appear on
        the program listing.

             The user  may also use  a blank source  statement to  insert blank
        lines on the program listing.

             Example:

                                SPC     7

             The general form is:

                        SPC     expression

             where:

           expression - must evalute to an absolute value which  determines how
               many lines are to be skipped.  This value may not be relocatable
               but may contain forward references.






                    5.10  PAGE - Advance Listing Form to Next Page


             This directive instructs the assembler  to skip to the top  of the
        next page on the listing form.  Its purpose is to make program listings
        easier to read.  Some programmers prefer to start each subroutine  on a
        new page.

             The general form is:

                        PAGE

        30                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                            5.11  TTL - Set Program Heading


             This directive is used to print a heading at the beginning of each
        page of the listing.  The default heading defined by the  assembler is:
        " 68000 ASSEMBLER VER .  MR.  ".  For a user specified title  to appear
        on the  first page of  the output listing,  this directive must  be the
        first statement in the program.

             Example:

                                TTL     'TEST PROGRAM'

             The general form is:

                        TTL     'heading'

             where:

           heading - title which will be placed at the beginning of  each page.
               Up to 60 characters may  be used in the heading  with additional
               characters being  ignored.  The heading  is delimited  by single
               quotes, but if the  terminating quote is not present,  the first
               60 characters will be used.






                          5.12  LIST - Turn On Source Listing


             This directive  causes a  listing of the  assembly to  be printed.
        This  is the  default.  (The  OPT S  directive is  another way  cause a
        listing of the assembly to be printed.)

             The general form is:

                        LIST














        31                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                        5.13  NOLIST - Turn Off Source Listing


             This directive suppresses printing of the assembler  listing.  The
        OPT -S directive is another way to achieve this.

             The general form is:

                        NOLIST






                   5.14  LLEN - Change Length of Listing Output Line


             This  directive  changes the  length  of the  line  on  the source
        listing.  the user specifies the  new length, which must be  between 37
        and 116 inclusive.  The maximum  of 116 allows printing of the  full 80
        columns of the input source.  The default value for the line  length is
        108.

             This directive does not affect the header lines at the top of each
        page, which are printed in a format of fixed length.

             The general form is:

                        LLEN    n

             where:

           n -  is an  absolute expression  whose value is  between 37  and 116
               inclusive.  Forward references are allowed.






              5.15  NOOBJ - Suppress Creation of the Output Object Module


             This directive  suppresses creation of  the output  object module.
        The OPT -O directive is another way to achieve this.

             The general form is:

                        NOOBJ




        32                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                         5.16  OPT - Set the Options Specified


             The OPT directive may be used to generate listings of the elements
        specified,  to influence  the assembler's  choice of  address  modes in
        ambiguous situations,  and to  control the form  of the  object output.
        The defaults in the assembler are: the source text, symbol table, macro
        expansions, and conditional  assembly statements not assembled  are all
        listed, an  object module  in relocatable format  is produced,  and the
        symbol  table is  not  placed into  the object  module.   References to
        unknown locations  will use  an absolute address  mode unless  the user
        specifically  requests  otherwise.   Forward  references  and  external
        references not associated  with a section name  will leave room  for an
        absolute long address.  A  relative branch to a forward  reference will
        use the long (16-bit displacement) form of the instruction.

             To turn an  option on, use the  single letter as shown  below.  To
        turn an option off, use  the letter preceded by a minus  sign.  Default
        settings for options are shown below.

             Error  messages  are  always  listed  regardless  of  the elements
        specified.  In particular,  the E option may  be used to generate  in a
        separate file, a listing consisting only of error messages.

             Example:

                        OPT     -X,B            ; do not list cross reference
                                                ; table but put symbol
                                                ; table in object module

             The general form is:

                        OPT     {A,B,C,D,E,F,G,I,M,O,P,R,S,T,X, or any of
                                these letters preceded by -}

             where:

           A - (Absolute)  specifies that  this will  be an  absolute assembly.
               All relocation directives are  flagged as errors and  the object
               module is in Motorola S-Record hexadecimal format.   This option
               should  only be  turned  on.  It  must be  specified  before any
               statement that generates object code.  (Default=OFF)
           B - (Branch) specifies  that forward  references in  relative branch
               instructions (Bxx)  will use the  short form of  the instruction
               (8-bit   displacement).    This   option   affects    only   Bxx
               instructions.  (Default=OFF)
           C - specifies that any lines of data, after the first,  generated by
               the DC.B directive will  be listed.  NOTE: this option  does not
               affect the DCB directive.  (Default=ON)
           D - (Debug) specifies that the symbol table will be placed  into the
               object module, either absolute  or relocatable, and may  be used
               for debugging.   This option must  also be specified  before any
               instruction that generates object code.  (Default=OFF)

        33                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


           E - (Error) specifies that errors will also be listed to  a separate
               error file (Logical unit KTERM which is set in Subroutine INIT).
               This is useful if the user wants the normal output listing to go
               to a line printer and  the errors only to appear at  a terminal.
               If a listing  of errors only is  desired, the user may  turn the
               source listing off and only the errors will appear on the normal
               output device.  (Default=OFF)
           F - (Forward  reference)  specifies  that  forward  references which
               assume an absolute address mode will use the short form  (16 bit
               address).  This option does not cause any instruction to  use an
               absolute address mode.  It applies to all instructions which may
               use  absolute  address  modes,  specifically  excluding  the Bxx
               instructions.  (Default=OFF)
           G - (Generated-by-system)  specifies  any  system  generated symbols
               (see Chapter 6) will be listed in the symbol or  cross reference
               table  and   in  the  object   module  (if  OPT   D  specified).
               (Default=OFF)
           I - (If)  specifies  that  the  instructions  not  assembled  due to
               conditional assembly statements be listed (Default=ON)
           M - (Macro) specifies  that expanded  macros will  be listed  in the
               program listing (Default=ON)
           O - (Object) specifies that the object module will be produced.  The
               NOOBJ directive is another way to specify OPT -O.  (Default=ON)
           P - (Program counter relative)  specifies that program  counter with
               displacement address  mode will be  used on  backward references
               within the absolute section  provided that this address  mode is
               legal  for the  instruction and  provided that  the displacement
               from the program counter  fits within the 16-bit  field provided
               for it.  This option  does not affect references either  from or
               to a relocatable section.  (Default=OFF)
           R - (Relocatable) specifies  that program counter  with displacement
               address  mode  will be  used  on references  from  a relocatable
               section to a relocatable  section (the same or another)  for all
               instructions for  which this is  a legal addressing  mode.  This
               does not affect forward references.   If R is on and  a backward
               reference within a relocatable section results in a displacement
               larger than 16 bits, this is considered an error.  (Default=OFF)
           S - (Source)  specifies  the  source  text  will  be   listed.   The
               directives LIST and NOLIST are  other ways to specify OPT  S and
               OPT -S respectively.  (Default=ON)
           T - (Table) specifies the symbol table will be listed.  (Default=ON)
           X - (Cross) specifies that the cross reference table will be listed.
               This parameter  overrides the  T option  if specified.   Thus if
               both T  and X  are specified,  a cross  reference table  will be
               generated (see page 8-8).  (Default=OFF)









        34                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                       5.17  IF - Conditional Assembly Statement


             The IF directive may be used to conditionally assemble source text
        between the  IF directive  and the  ELSE or  ENDC directive.   When the
        expression in  the operand  field evaluates to  an non-zero  value, the
        code will  be assembled.   If the  expression evaluates  to a  value of
        zero, the code will not  be assembled.  IF statements may be  nested up
        to 16 levels and appear at any place within the source text.

             Logical  operators return  a value  of -1  for TRUE  and  zero for
        FALSE.

             Example:

                                IF      SYSTEM

             The general form is:

                        IF      expression

             where:

           expression - evaluates to  a value which  determines whether  or not
               the assembly between the IF and the following ELSE or  ENDC will
               take  place.   Any  symbols  used  in  this  expression  must be
               previously defined.  The expression may not be relocatable.






            5.18  IFC - Conditional Assembly String Equality Test Statement







          5.19  IFNC - Conditional Assembly String Inequality Test Statement


             The IFC  and IFNC  directives provide  a way  to test  whether two
        strings  are  or  are  not  equal.   Depending  on  the  result  of the
        comparison, following statements  up to the next  ELSE or ENDC  will or
        will not be assembled  (like the IF statement).  These  directives take
        two string arguments, both  optional, separated by a comma.   The first
        string consists of all characters  from the first one after the  IFC or
        IFNC  which  is not  a  blank or  tab,  up to  and  including  the last
        character before the  first comma.  The  second string consists  of all


        35                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


        characters from the first one after the first comma to the last  one on
        the  line which  is  not a  blank or  tab,  or to  the  first semicolon
        (comment delimiter).  Either string may be null.  The first  string may
        not contain commas or leading blanks or tabs; the second string may not
        contain semicolons or trailing blanks or tabs.

             This format is not 100% compatible with Motorola's, which requires
        single quotes as delimiters around the strings.  Strings in  quotes may
        be compared, of course.   Note, however, that macro  parameters between
        quotes are not expanded.

             Examples:

                IFC     'STRING','STRING'       ; equal- assembly continues
                IFNC    'string', 'string'      ; unequal (blank in 2nd string)
                                                ; assembly continues
                IFC     '\1','\2'               ; always unequal
                IFC     \1,\2                   ; parameters are expanded
                IFC     string,string   ; unequal (no comment delimiter)

             The general form is:

                        IFC     {string1},{string2}
                        IFNC    {string1},{string2}

             where:

           string1 - may not contain leading blanks, leading tabs or commas
           string2 - may  not  contain   trailing  blanks,  trailing   tabs  or
               semicolons Other than this any characters may be in the strings






                      5.20  ELSE - Conditional Assembly Converse


             The ELSE directive  is used in  conjunction with the  IF directive
        and is the converse of the  IF.  When the argument of the  IF directive
        evaluates to zero,  all statements between  the ELSE directive  and the
        next  ENDC  are  assembled.   When the  argument  of  the  IF directive
        evaluates to a non-zero value all statements between the ELSE directive
        and the next ENDC are not assembled.

             The ELSE directive is optional and can only appear once  within an
        IF-ENDC block.

             Example:




        36                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                                IF      MAIN
                                -
                                ELSE
                                -
                                ENDC

             The general form is:

                        ELSE






                      5.21  ENDC - End Conditional Assembly Code


             The  ENDC directive  is  used to  inform the  Assembler  where the
        source code subject to the conditional assembly statement ends.  In the
        case of nested IF statements, an ENDC is paired with the most recent IF
        statement.

             Example:

             In the following code, if  the expression SUM-4 is equal  to zero,
        the  instructions  between  the  IF and  ELSE  directives  will  not be
        assembled and those  between the ELSE and  ENDC will be  assembled.  If
        SUM-4 is non-zero,  the opposite occurs.   To inhibit listing  the non-
        assembled instructions the OPT -I directive may be used.

                                MOVE    #22,D2
                                IF      SUM-4
             assembled if       {ORI    #200,D3
             SUM-4 is non-zero  {ADD    D0,VALUE+3
                                ELSE
             assembled if       {ORI    #$1F,D3
             SUM-4 is zero      {ROL    #1,D0
                                ENDC

             The general form is:

                        ENDC











        37                      M68000 Assembler Manual              ASM68K.DOC
        DIRECTIVES                                            November 17, 1983


                          5.22  INCLUDE - Include Source File


             The INCLUDE Directive may be used to insert an external  file into
        the input source code stream at Assembly time.  INCLUDE  statements may
        be be nested (up to a level of three files); they have some limitations
        when  combined with  macro  calls.  A  macro  call may  include  a FILE
        directive.  But  if an Include  File is invoked  by a macro  call, then
        that Include File may not contain any additional macro calls.

             Example:

                                INCLUDE EXTERNAL.DEF

             The general form is:

                INCLUDE file name

             Where:

           filename - The name of the host computer file to be inserted  in the
               Assembly Source File
































        38                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983






                                      6 -  MACROS


             A macro is  a sequence of  instructions that can  be automatically
        inserted in the assembly source text by encoding a  single instruction,
        the macro call.  The macro  definition is written only once and  can be
        called  any  number  of  times.   The  macro  definition   may  contain
        parameters  which can  be changed  for each  call.  The  macro facility
        simplifies the  coding of  programs, reduces  the chance  of programmer
        error, and makes programs easier to understand as the source  code need
        only be changed in one location, the macro definition.

             A macro definition consists of three parts; a heading, a body, and
        a  terminator.  This  definition must  precede any  macro call  to this
        macro.  A macro may be redefined at any place in the program.  The most
        recent  definition of  a macro  name  will be  used when  the  macro is
        called.  A standard assembler mnemonic (e.g.: OR) may also be redefined
        by defining a macro with the name OR.  In this case all subsequent uses
        of  the  OR instruction  in  the program  will  cause the  macro  to be
        expanded.






                                  6.1  Macro Heading


             The  heading, which  consists of  the directive  MACRO,  gives the
        macro a name and defines any formal parameters.

             The standard form is:

                label   MACRO   {parameter list}

             Where:

           Label - specifies the macro name and may be any user defined symbol.
               This name may be the same as other program defined symbols since
               it has meaning  only in the  operation field.  For  example, TAB
               could be the name of a symbol as well as a macro.
               If a  macro name  is identical  to a  machine instruction  or an
               assembler  directive, the  mnemonic is  redefined by  the macro.
               Once a mnemonic has been  redefined as a macro, there is  no way
               of returning that name to be a standard instruction mnemonic.  A
               macro name may also be redefined as a new macro with a new body.
           The operand  field of  the MACRO  line contains  the names  of dummy


        39                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


               formal parameters in the order in which they occur on  the macro
               call.  Each parameter is  a symbol and multiple  parameters must
               be separated by commas.   The symbols used as  formal parameters
               are  known only  to  the macro  definition  and may  be  used as
               regular symbols outside the macro.
               Formal parameters need not  be named if the user  prefers.  They
               can  be  referenced  as  (in  effect)  first-parameter,  second-
               parameter,...  However, null  formal parameters are  not allowed
               if  followed  by  any  non-null  parameters;  therefore, unnamed
               parameters must either come  at the end of the  macro definition
               line or must be assigned a dummy name.






                                    6.2  Macro Body


             The first line of code following the MACRO directive which  is not
        a LOCAL directive is the start of the macro body.  These statements are
        placed in  a macro file  for use  when the macro  is called.   During a
        macro call,  an error  will be  generated if  another macro  is defined
        within a macro.  No statements  in a macro definition are  assembled at
        definition time; they are simply stored in the macro file until called,
        at which time they are inserted  in the source code at the  position of
        the macro call.

             The name of  a formal parameter  specified on the  MACRO directive
        may appear within the macro body in any field.  If a  parameter exists,
        it is marked, and the real corresponding parameter from the  macro call
        will  be substituted  when  the macro  is called.   Parameters  are not
        recognized in  a comment  statement or, provided  the comment  field is
        prefixed by semicolon (;) or exclamation mark (!), in the comment field
        of a statement.

             Alternatively, parameters may be referenced in the form \n where n
        is a non-negative integer.   Parameter \0 is the  qualifier (extension)
        of the macro call and may appear only as a qualifier on opcodes  in the
        macro body.  (This  is the only format  in which this qualifier  can be
        referenced).   Parameters \1,\2...\9,\A,...\Z  are  the first,second...
        real parameters on the macro call line.











        40                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


                                 6.3  Macro Terminator


             The  ENDM directive  terminates  the macro  definition.   During a
        Macro definition an ENDM  must be found before another  MACRO directive
        may be used.  An END directive that is found during a  macro definition
        will  terminate the  macro  definition as  well as  the  assembly.  The
        format of the ENDM directive is as follows:

                {label} ENDM

             where:

           label - is an optional label  which becomes the symbolic  address of
               the first byte of memory following the inserted macro.






                                    6.4  Macro Call


             A macro may be called by encoding the macro name in  the operation
        field of the statement.  The format of the call is shown below.

                        name{.qualifier}        {parameter list}

             where:

           label - is an optional label which will be assigned a value equal to
               the current program counter.
           name - is the name of the macro called.  This name should be defined
               by the MACRO directive or an error message will be generated.
           qualifier - an optional qualifier which may be B,W,L or S.   This is
               passed to the macro as parameter \0 .
           parameter list - is a list of parameters separated by commas.  These
               parameters  may  be constants,  symbols,  expressions, character
               strings or any other text separated by commas.

             The parameters in the  macro call are actual parameters  and their
        names may  be different than  the formal parameters  used in  the macro
        definition.  The actual parameters  will be substituted for  the formal
        parameters in the order in which they are written.  Commas may  be used
        to reserve a  parameter position.  In this  case the parameter  will be
        null,  that  is contain  no  actual characters.   The  formal parameter
        corresponding to a null actual parameter is simply removed during macro
        expansion.  Exception:  If the  qualifier (actual  parameter 0)  is not
        present, and formal parameter \0 appears as the qualifier of  an opcode
        (for example, OR.\0 D1,D2 ) the period preceding the formal \0  is also
        removed to prevent a  syntax error.  Any parameters not  specified will


        41                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


        also be  null.  The parameter  list is terminated  by a blank,  tab, or
        semicolon.

             All actual  parameters are  passed as  character strings  into the
        macro definiton statements.  Thus symbols are passed by name and not by
        value.  In other words, if a symbol's value is changed in the macro, in
        its expansion  it will also  have the new  value outside of  the macro.
        Thus  SET  directives  within  a macro  body  may  alter  the  value of
        parameters passed to the macro.

             During  the  macro  expansion,  the  assembler  recognizes certain
        characters to have special meaning.  The double-ampersand (&&)  is used
        to  concatenate  the  text  of  the  definition  line  and  any  actual
        parameters.   During  macro expansion,  a  double-ampersand immediately
        preceding or immediately following a named formal parameter  is removed
        and the substitution of the actual parameter occurs at that  point.  If
        the  double-ampersand is  not immediately  adjacent to  a  named formal
        parameter, the double-ampersand is not removed and remains part  of the
        definition line.   Double-ampersands within  character strings  are not
        recognized  as concatenation  operators.  Formal  parameters referenced
        via the \n format are automatically concatenated with adjacent symbols,
        if any, and in this case the double-ampersand is not recognized.

             The angle brackets  (< >), are  used to delimit  actual parameters
        that may contain other delimiters.  When the left bracket is  the first
        character of any parameter, all characters between it and  the matching
        right  bracket  are  considered  part  of  that  parameter.   The outer
        brackets  are removed  when  the parameter  is substituted  in  a line.
        Angle brackets may  be nested for use  within nested macro  calls.  The
        brackets are the  only way to pass  a parameter that contains  a blank,
        comma, or other  delimiter.  For example,  to use the  instruction "ROL
        #1,D1" as an actual parameter would require placing <ROL #1,D1>  in the
        actual  parameter list.   A  null parameter  may consist  of  the angle
        brackets with no  intervening characters.  The  characters < and  > may
        not  be  passed as  parameters.   Parameter \0  may  not  contain angle
        brackets.

             An example of a macro call and its expansion is shown below.  Note
        that expanded code is marked with plus signs.

        Definition:     GET     MACRO   W,Y,Z
                                MOVE    #w,D5
                                ROL     #1,D5
                                y
                        z       JMP     \4
                                ADD.\0  #5,D0
                                ENDM

        Call:                   -
                        LOOP    GET.B   200,<BRA DATA>,ENTRY,MAIN
                                JMP     FIRST
                                -


        42                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


        Expanded                -
        Macro:                  -
                        LOOP    GET.B   200,<BRA DATA>,ENTRY,MAIN
                +               MOVE    #200,D5
                +               ROL     #1,D5
                +               BRA     DATA
                +       ENTRY   JMP     MAIN
                +               ADD.B   #5,D0
                                JMP     FIRST

             The operator double equal sign (== ), read exists, may be  used to
        determine if  a parameter is  present or not  in the macro  call.  This
        operator returns a true value (all ones) if any operand follows  the ==
        and a false  value (all zeros)  otherwise.  For example,  the following
        code checks if the second parameter is present.

                        MSET    MACRO   DATA,MEM
                                IF      ==MEM
                                MOVE    #DATA,MEM
                                ELSE
                                MOVE    #DATA,(A1)
                                ENDM

             The == operator may  be used in combination with  other operators.
        It takes  as its  argument the  entire remainder  of the  line up  to a
        comment  delimiter (if  present) or  the end  of the  line.  Therefore,
        using  other operators  to the  right  of ==  is useless.   Also,  if a
        comment  field  is  to  follow an  ==  operator,  it  must  be prefixed
        semicolon (;) or exclamation mark (!).  A parameter consisting entirely
        of blank characters will test as null.






                           6.5  LOCAL - Define Local Symbol


             All labels,  including those within  macros, are global,  that is,
        known, to the entire program.  A macro which contains a label and which
        is  called more  than once  will cause  a duplicate  label error  to be
        generated.  To avoid this  problem, the user may declare  labels within
        macros to be  local to the  macro.  Each time  the macro is  called the
        assembler assigns each local symbol a system generated unique symbol of
        the  form ??nnnn.   Thus the  first local  symbol will  be  ??0000, the
        second ??0001, etc.   The assembler does not  start at ??0000  for each
        macro but increases the  count for each local symbol  encountered.  The
        symbols  defined  in  this  directive  are  treated  like  formal macro
        parameters and hence may be used in the operand field  of instructions.
        The operand  field of the  LOCAL directive may  not contain  any formal
        parameters  defined  on  the  MACRO  directive  line.   As  many  LOCAL


        43                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


        directives as necessary may  be included within a macro  definition but
        they must occur  immediately after the  MACRO directive and  before the
        first line of the macro  body.  LOCAL directives that appear  outside a
        macro definition will generate an error.

             The assembler will  also recognize Motorola's method  of declaring
        local symbols (for compatibility with existing code).  The  string "\@"
        denotes the presence of a local symbol.  The full name of the symbol is
        formed  by concatenating  "\@" with  any adjacent  symbol(s).  Example:
        "DON\@T" counts  as one  local symbol.   The total  length of  a symbol
        formed in this way should not exceed 8 characters, or the assembler may
        not resolve  it correctly.   At macro expansion  time the  entire local
        symbol is  replaced by  a symbol of  the form  ??nnnn, just  like named
        local symbols.  This form may be mixed with named local symbols without
        conflict (although this is not recommended).

             Local symbols declared by the "\@" construction may not be present
        in a LOCAL statement.  They are recognized as they appear.

             The \@ format is NOT RECOMMENDED FOR NEW CODE, as it  obscures the
        meaning  of  the  macro  definition  without  adding  clarity   to  the
        expansion.

             Example of local symbol usage:

        Definition:     WAIT    MACRO   TIME
                                LOCAL   LAB1
                        LAB2\@  MOVE.B  #TIME,D0
                        LAB1    DBLE    D0,LAB2\@
                                ENDM

        First call (with TIME=5)
                +       ??0001  MOVE.B  #5,D0
                +       ??0000  DBLE    D0,??0001

        Second call (with TIME=$FF)
                +       ??0003  MOVE.B  #$FF,D0
                +       ??0002  DBLE    D0,??0003

             The standared form is:

                        LOCAL   symbol list

             where:

           symbol list - is a list of  symbols separated by commas that  are to
               be defined local to this macro.







        44                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


                           6.6  MEXIT - Alternate Macro Exit


             The MEXIT directive provides an alternate method for terminating a
        macro expansion.  During a  macro expansion, an MEXIT  directive causes
        expansion of the current macro  to stop and all code between  the MEXIT
        and the ENDM for this macro to be ignored.  If macros are nested, MEXIT
        causes  code  generation  to  return to  the  previous  level  of macro
        expansion.  Note, an MEXIT or an ENDM may be used to terminate  a macro
        expansion,  but  only  an  ENDM  may  be  used  to  terminate  a  macro
        definition.

             In the following example, the code following the MEXIT will not be
        assembled if DATA is non-zero.

                        STORE   MACRO   DATA
                                -
                                -
                                IF      DATA
                                MEXIT
                                ENDC
                                -
                                -
                                ENDM

             The standard form is:

                {label} MEXIT

             where:

           label - is an optional label which will be given the address  of the
               current location counter.






                              6.7  Macro Parameter Count


             The special  symbol NARG may  be used by  those users who  need to
        know the number of parameters passed on the macro call statement to the
        macro.  This symbol  is used like any  other symbol and  represents the
        number of actual parameters passed to the macro, not  formal parameters
        defined in the macro definition.  The symbol should only be used within
        a macro although  its value is  set to zero  outside of a  macro.  This
        symbol is  typically used  when generating  tables within  macros along
        with  conditional  assembly  statements.   This  count  only represents
        parameters which are not null.  For example:



        45                      M68000 Assembler Manual              ASM68K.DOC
        MACROS                                                November 17, 1983


        Definition:     GEN     MACRO   P1,P2,P3
                                IF      NARG
                                DC.B    P1,NARG
                                GEN     P2,P3
                                ENDC
                                ENDM

        Macro Call:     ADD1    EQU     $7F
                        ADD2    EQU     3
                                GEN     ADD1,ADD2

        Expansion:
                +               IF      NARG    (value of NARG)
        7F02    +               DC.B    ADD1,NARG
                +               GEN     ADD2,
                +               IF      NARG
        0301    +               DC.B    ADD2,NARG
                +               GEN     ,
                +               IF      NARG
                +               DC.B    ,NARG   ; not executed
                +               GEN     ,       ; not executed
                +               ENDC
                +               ENDC
                +               ENDC

             Note that the value of NARG is not displayed in the expansion, any
        more than the value of any other symbol.  In the example above the DC.B
        directive is used so that the value of NARG can be seen.


























        46                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983






                                    7 -  RELOCATION


             The  object  module  produced  by  this  assembler  may  be  in  a
        relocatable format.  This allows the user to write programs whose final
        addresses will be adjusted by Microtec's Linking Loader and also allows
        individual  program  modules  to be  changed  without  reassembling the
        complete program.  Separate object modules can be linked  together into
        a final program.

             Relocatable  programming provides  many advantages  for  the user.
        Actual memory addresses  are of no concern  until the final  load time.
        Large programs may be  easily separated into smaller  pieces, developed
        separately, and linked together.  If one piece contains an  error, only
        that one need  be reassembled.  Once  developed, a library  of routines
        may be used  by many users.  The  Loader will adjust addresses  to meet
        each user's requirements.






                                 7.1  Program Sections


             To take  advantage of relocatability,  the user  should understand
        the concept  of program  sections and how  separate object  modules are
        linked together.   A program section  is that part  of a  program which
        contains its own location  counter and is a logically  distinct section
        of the  program.  At load  time the addresses  for each section  may be
        specified separately.

             Sections are identified by names which follow the  syntactic rules
        for symbols.   The assembler  keeps track  of section  names separately
        from all other symbols.  Section names may duplicate labels or register
        names without conflict.  Section  names may appear in COMMON,  SECT and
        XREF directives.

             This  assembler  provides  for  sixteen  program  sections.   Each
        section  has two  attributes:  the  common/noncommon attribute  and the
        short/long attribute.

             A  section  becomes  Common  when its  name  appears  in  a COMMON
        directive,  and  becomes Noncommon  when  its name  appears  in  a SECT
        directive.  It is a fatal error for the same section name to  appear in
        both directives.  The  Loader loads all  common sections with  the same
        name (from different modules) into the same place in memory.  Otherwise
        Common and Noncommon sections are treated alike.

        47                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


             Common sections may  contain neither 68000 instructions  nor code-
        generating directives (DC, DCB).

             In a  given assembly a  section name may  first appear in  an XREF
        directive (See XREF directive); when this occurs, the assembler accepts
        the name  as a valid  new section  name and assigns  the Long  or Short
        attribute to  it as declared  in the XREF  directive, but does  not yet
        assign the common or noncommon attribute to it.

             The common  or noncommon  attribute may be  set by  the subsequent
        occurence of  a SECT  or COMMON  directive that  uses the  same section
        name.   However,   if  the  current   assembly  does  not   assign  the
        common/noncommon attribute the Linking Loader may do so.  In  the later
        instance the section name must appear in a SECT or COMMON  directive in
        another assembly, one whose object module is included in the load.

             A  section becomes  short  when its  name appears  in  a COMMON.S,
        SECT.S, or XREF.S directive.  It becomes long when its name  appears in
        any of  these directives  without the  .S extension.   If a  section is
        short in one place and long in another place, a warning is produced and
        the section is  designated as short  thereafter.  The loader  will load
        all short  sections into  the areas of  memory addressable  with 16-bit
        absolute addresses.  (These areas are from 0 to $7FFF and  from $FF8000
        to $FFFFFF.)  In certain  situations the assembler  will choose  a more
        compact address mode when a  reference is made to a short  section (see
        Chapter 8 for details).  Otherwise short and long sections  are treated
        alike.

             Table A-7 on the following page, shows precisely how this  type of
        a section is handled by the assembler.

             Typically  a section  will  contain either  instructions  or data.
        This allows the  user to place the  sections in a  RAM/ROM environment.
        Common sections are generally used for program variables that reside in
        RAM.  Common  sections are  analagous to named  COMMON in  Fortran.  As
        with  non-relocatable  assemblers,  users  may  also  specify  absolute
        addresses when assembling a program.  In this case the  object modules,
        even if in relocatable format, will contain instructions or  data which
        will reside in the specified memory locations.

             Certain Motorola operating systems, for example EXORMACS, make use
        of  entities  called  segments.   These have  nothing  to  do  with the
        sections discussed here and should not be confused with them.











        48                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                                       TABLE A-7

        Previous   |
        Section    |......  new statement in which section name appears .......
        attributes |   XREF   |  XREF.S  |   SECT   |  SECT.S  |COMMON |C'M'N.S
         ----------------------------------------------------------------------
                   |XREF-ONLY |XREF-ONLY |NONCOMMON |NONCOMMON |COMMON |COMMON
          UNDEFINED|   LONG   |  SHORT   |  LONG    |  SHORT   | LONG  | SHORT
         ----------------------------------------------------------------------
          XREF-ONLY|XREF-ONLY |XREF-ONLY*|NONCOMMON |NONCOMMON*|COMMON |COMMON
            LONG   |   LONG   |  SHORT   |  LONG    |  SHORT   | LONG  | SHORT
         ----------------------------------------------------------------------
          XREF-ONLY|XREF-ONLY*|XREF-ONLY |NONCOMMON*|NONCOMMON |COMMON*|COMMON
           SHORT   |  SHORT   |  SHORT   | SHORT    |   SHORT  | SHORT |SHORT
         ----------------------------------------------------------------------
          COMMON   | COMMON   |COMMON*   |          |          |COMMON |COMMON*
            LONG   |  LONG    |  SHORT   | ERROR    | ERROR    | LONG  | SHORT
         ----------------------------------------------------------------------
          COMMON   | COMMON*  |COMMON    |          |          |COMMON*|COMMON
           SHORT   |  SHORT   | SHORT    | ERROR    | ERROR    | SHORT | SHORT
         ----------------------------------------------------------------------
          NONCOMMON|NONCOMMON |NONCOMMON*| NONCOMMON|NONCOMMON*|       |
           LONG    |  LONG    | SHORT    | LONG     | SHORT    | ERROR | ERROR
         ----------------------------------------------------------------------
          NONCOMMON|NONCOMMON*|NONCOMMON |NONCOMMON*|NONCOMMON |       |
           SHORT   |  SHORT   |  SHORT   | SHORT    | SHORT    | ERROR | ERROR
         ----------------------------------------------------------------------

           * = 'W' FLAG PRODUCED (WARNING)

             Table A-7  illustrates how a  section is assigned  attributes.  An
        example of how to use this table follows:

             The  first  time  a  section  name  appears,  it  has  no previous
        attributes; the first horizontal row of the table, marked undefined, is
        appropriate.  Suppose  the name first  appears in an  XREF.S statement;
        afterwards it  will be  short but neither  common nor  noncommon (XREF-
        only).   If  the  name  later  appears for  a  second  time  in  a SECT
        statement, it is then assigned the Noncommon attribute as well and  a W
        flag is produced.














        49                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                                     7.2  Linking


             The  object  modules produced  by  the assembler  are  combined or
        linked  together  by  a  Linking  Loader.   The  Loader   converts  all
        relocatable addresses into  absolute addresses and  resolves references
        from one  module to  another.  Linkage between  modules is  provided by
        external definitions (XDEF), external references (XREF), as well as the
        Common Sections.  External definitions are defined in one object module
        and made available to all other object modules via the  Linking Loader.
        External references are symbols referenced in one module but defined in
        another module.  The  Linking Loader combines the  external definitions
        from one program  with the external  references from other  programs to
        obtain  the  final  addresses.  A  program  may  contain  both external
        references and definitions.






                               7.3  Relocatable Symbols


             Each symbol in the assembler has associated with it a  symbol type
        which denotes the symbol  as absolute or relocatable.   If relocatable,
        it also  indicates the  section to which  the symbol  belongs.  Symbols
        whose  values  are  not  dependent  upon  program  origin  are absolute
        symbols.   Symbols  whose  values change  when  the  program  origin is
        changed are called  relocatable symbols.  External references  are also
        considered  relocatable.   Absolute and  relocatable  symbols  may both
        appear in an absolute or relocatable program section.

               NOTE:   Relocatable symbols may  not appear in  a program
                       where the OPT A directive has been specified.

             Absolute symbols are defined as follows:

           1.  A symbol  in the label  field of an  instruction which is  in an
               absolute section of code.
           2.  A symbol is made equal  to an absolute expression by the  EQU or
               SET directive.  This occurs even if the program is  assembling a
               relocatable section.

             Relocatable symbols are defined as follows:

           1.  A symbol in the label  field of an instruction when  the program
               is assembling a relocatable section.
           2.  A symbol is made equal to a relocatable expression by the EQU or
               SET directives.
           3.  External references are relocatable.
           4.  A  reference  to the  location  counter (*)  while  assembling a
               relocatable section is relocatable.

        50                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                             7.4  Relocatable Expressions


             The  relocatability  of   an  expression  is  determined   by  the
        relocation of  the symbols that  comprise the expression.   All numeric
        constants  are  considered absolute.   Relocatable  expressions  may be
        combined to produce: an absolute expression, a  relocatable expression,
        or in certain instances, illegal expressions.  The following list shows
        those expressions whose result is relocatable: (ABS denotes an absolute
        symbol, constant, or expression and REL denotes a relocatable symbol or
        expression)

                ABS+REL         REL+ABS         REL-ABS

             In addition,  the following expressions  are valid and  produce an
        absolute   expression.    Both  relocatable   subexpressions   must  be
        relocatable in the same program section.

                REL=REL         REL<>REL                REL<=REL
                REL<REL         REL>=REL                REL>REL
                REL-REL

             Relocatable  symbols that  appear  in expressions  with  any other
        operators will cause  an error, e.g;  REL*REL.  Any combination  of two
        relocatable  symbols   from  different  sections,   including  external
        references (XREF), is an error.






                              7.5  Relocation Directives


             The  following pages  describe those  directives in  the assembler
        that pertain primarily to relocation.  The directives are:

              SECT              Specify Noncommon Section
              SECTION           Specify Noncommon Section
              COMMON            Specify Common Section
              XDEF              Specify External Definition
              XREF              Specify External Reference
              IDNT              Specify Module Name










        51                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                    7.5.1  SECT  -  Specify Noncommon Section





                    7.5.2  SECTION  -  Specify Noncommon Section

             The SECT directive specifies  to the assembler that  the following
        statements should  be assembled in  the relocatable  section specified.
        This section remains in effect  until an ORG or COMMON or  another SECT
        directive is assembled  that specifies a different  section.  Initially
        all section location counters are set to zero.

             The user may alternate between the various sections  with multiple
        section directives within one program.  The assembler will maintain the
        current value of the location counter for each section.

             The section name may be any symbol.

             Example:

                                        SECTION SECT1
                                        SECT.S  CODE

                {label} SECT{.S}        sname
                {label} SECTION{.S}     sname

             where:

           label - an optional label which will be assigned the address  of the
               current location counter.
           .S - the optional extension  which designates this section  as being
               short
           sname - the section name. No unnamed sections are allowed.





                    7.5.3  COMMON  -  Specify Common Section

             The COMMON directive specifies to the assembler that the following
        statements should be assembled in the relocatable mode using the common
        section specified.

             The user may alternate between the various sections  with multiple
        section directives within one program.  The assembler will maintain the
        current value of the location counter for each section.

             No executable code may  be placed in a common  section, therefore,
        any directives that generate code, or any instructions used in a common


        52                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


        section will  be flagged  with a warning.   Typically the  DS directive
        will be used to allocate storage within the common section.

             Example:

                                COMMON  P

             The standard form is:

                {label} COMMON{.S}      sname

             where:

                 all operands are the same as for the SECT directive.





                    7.5.4  XDEF  -  Specify External Definition

             This directive specifies a list of symbols which will be given the
        external  definition  attribute.   These  symbols  will  then  be  made
        available  to other  modules  by the  Linking Loader  to  establish the
        necessary linkage between modules.  Symbols appearing in this directive
        are placed in the object module.

             This directive  may appear  anywhere within  the program  and each
        symbol may be declared in only one directive.

             Symbols declared with this directive but which are not  defined in
        the program will be flagged as undefined on the output listing.

             Example:

                                XDEF    SCAN,LABEL,COSINE

             The standard form is:

                        XDEF    symbol list

             where:

           symbol list - is a list of symbols separated by commas which specify
               the names defined in this module and available to other modules.









        53                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                    7.5.5  XREF  -  Specify External Reference

             This directive specifies a list of symbols which will be given the
        external reference attribute, and optionally assigns to each symbol the
        name of a relocatable  section.  These are symbols that  are referenced
        in  this  program  module but  defined  within  another  program.  This
        directive provides  the linkage  to those  symbols through  the Linking
        Loader.

             This directive  may appear  anywhere within  the program  and each
        symbol may be declared in only one directive.

             Specifying  the section  name of  an external  reference sometimes
        affects the assembler's choice  of address mode (see Chapter  8).  Also
        during the Linking process  the Loader will verify that  the externally
        referenced symbol is indeed in the specified section.

             It  is not  possible to  specify that  an external  reference lies
        within an absolute section beause absolute sections do not have names.

             A  section name  applies to  all symbols  following it,  until the
        appearance of another section name or the end of the statement.   It is
        legal for a  section name to appear  only in XREF statements.   In this
        case,  however, it  counts  toward the  total of  16  allowable section
        names.

             Example:

                                XREF    PROC1,PROC2,SECT1:INPUT,OUTPUT

             The standard form is:

                        XREF{.S}        {sname:}symbol{,{sname:}symbol,...}

             where:

           .S - means that all symbols in  the statement will be placed  in the
               area  of  memory  accessible  by  16-bit  addresses.   Also, any
               section name appearing in the statement is designated as short.
           sname - is a section name
           symbol - is the name of a symbol referenced in this module  which is
               defined in a different module.












        54                      M68000 Assembler Manual              ASM68K.DOC
        RELOCATION                                            November 17, 1983


                    7.5.6  IDNT  -  Specify Module Name

             The IDNT directive is used  to assign a name to the  object module
        produced by the assembler.  Only one IDNT directive should appear  in a
        program.  The module name is  a handle used by the Linking  Loader when
        combining programs and  is the name  displayed on the  Linking Loader's
        load map.

             If an  IDNT directive is  not specified by  the user,  the default
        name MODULE is  used.  CAUTION: The Linking  Loader does not  allow two
        modules to  have the same  name (not even  MODULE) and it  is therefore
        recommended that the IDNT directive be used in all programs.

             Example:

                        MULT    IDNT

             The standard form is:

                name    IDNT

             where:

           name - is the name  to be placed in  the object module  denoting the
               module name to the loader.  This name must follow all  the rules
               of  a symbol.   This  name appears  in  the label  field  of the
               statement.   In the  Mircotec  Assembler, operand  field  of the
               statement is ignored.  In the Motorola Assembler, the  syntax is
               of the form:

                name    IDNT      <version>,<revision> [<descr>]
           Other Assemblers may  have other uses  for these fields.   Since 68K
               Assembly Source is obtained from various sources,  and different
               Assemblers may  be used  in the future,  it is  recommended that
               such differences be kept for future compatibility.



















        55                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983






                         8 -  USER CONTROL OF ADDRESSING MODES


             The  default choice  for address  mode in  all cases  except those
        where it is known that a more compact mode will work is  Absolute Long.
        Since this mode generates the longest machine codes, requiring  4 bytes
        of extension, users will want to choose a more compact and  faster mode
        in some cases.  The choice of mode may be controlled in several ways:

           1)  Relocatable sections or external references may be  specified as
               short (See Chapter 7 for further information).  This  means that
               any references  to those sections  and external  references will
               use Absolute Short mode in preference to Absolute Long  (but not
               in  preference to  other  modes).  Short  sections  and external
               references are always  placed in the short-addressable  areas of
               memory by the Linking Loader.
           2)  The option flag P may be set via the OPT directive.  This causes
               all references  to a  known absolute  location from  an absolute
               location to use Program Counter with Displacement mode, provided
               the displacement is within 16-bit range.
           3)  The option flag R may be set via the OPT directive.  This causes
               all  references from  a  relocatable location  to  a relocatable
               location,  including  external  locations  known  to  be   in  a
               relocatable section  because the section  name was  specified on
               the  XREF directive,  to use  Program Counter  with Displacement
               mode.   Most such  references will  have to  be resolved  by the
               Loader.  This option is dangerous to use because those locations
               which are  not within  16-bit displacement  from the  current PC
               will cause errors, either  in the assembler or the  Loader; this
               will not happen if the default Absolute Long mode is used.
           4)  The option flag F may be set via the OPT directive.  This causes
               all  forward   references  except   those  in   relative  branch
               instructions (Bcc)  to allocate only  2 bytes for  the extension
               rather than the default of 4 bytes.  This option is dangerous to
               use since it is possible  that a location can only  be addressed
               by Absolute Long mode, in which case there will not be  room for
               the address and an error will result.  With the default setting,
               however, even if 4 bytes are allocated a 2-byte  addressing mode
               may be selected finally (in accordance with the following table)
               in which case the final 2 bytes will be filled with a NOP.
           5)  The  option flag  B  may be  set  via the  OPT  directive.  This
               applies  only to  the relative  branch instructions,  Bcc.  This
               causes forward  references in one  of these instructions  to use
               the shorter  form of the  instruction, with  8-bit displacement.
               Here again  it is possible  that there may  not be room  for the
               actual displacement and unnecessary errors may occur.
           6)  Individual Bcc, JMP and JSR  instructions may use the .S  and .L
               qualifiers on the  opcode to use the  short or long form  of the


        56                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


               instruction.  On  the Bcc instructions  use of  these qualifiers
               forces the  appropriate form.  On  the JMP and  JSR instructions
               use of these qualifiers does not force an absolute  address mode
               to be  chosen in  those cases  where a  PC with  displacement is
               known  to  work;  however  if  an  absolute  mode  is  used, the
               qualifier  will force  the choice  of short  or long  unless the
               reference  is known  to  exist in  short-addressable  memory.  A
               Bcc.S instruction  may not  reference the  immediately following
               statement since this would result in an 8-bit displacement of 0,
               which would cause the hardware to take the following word as the
               16-bit  displacement rather  than  as an  instruction.   Also, a
               Bcc.S may  not reference an  external reference or  any location
               outside the instruction section (since the Loader cannot resolve
               8-bit displacements.)

             The assembler's rules for  choosing an address mode for  <exp> are
        summarized in the following table.  The user should note  the following
        facts carefully before using the table:

               1)      The  table  does not  apply  to the  Bcc  or DBcc
                       instructions  which  always  use  Program Counter
                       plus Displacement mode.

               2)      The  final choice  between addressing  modes VIII
                       and IX may be specifiedby the .S or  .L qualifier
                       on   the   JMP  and   JSR   instructions.   These
                       qualifiers will not cause an absolute mode  to be
                       used instead  of mode X;   nor will they  cause a
                       reference  to a  location known  to be  in short-
                       addressable memory to use absolute long mode.
























        57                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983



        Type of
        Instruction                             Expression Type
        Section
        -----------------------------------------------------------------------
                   |      <abs exp>                 <rel exp>          unknown
                   |                                              (forward ref)
                   |   -------------------     ----------------    ------------
         ABS       |   If OPT P is set and     If section of       If OPT F is
                   |   the displacement is     operand is short    set then
                   |   within 16-bit range     then VIII           2 bytes
                   |   then X                    else              allocated
                   |     else                      IX               else
                   |      if operand is                              4 bytes
                   |      in short-                                  allocated
                   |      addressable memory
                   |      then VIII
                   |        else
                   |          IX
         REL       |    If operand is in       If OPT R is set     If OPT F is
                   |    short-addressable      then X (erroneous   set then
                   |    memory then VIII       if resulting        2 bytes
                   |      else                 displacement        allocated
                   |        IX                 outside 16-bit       else
                   |                           range)               4 bytes
                   |                             else               allocated
                   |                               If operand and
                   |                               instruction are
                   |                               in same section
                   |                               and displacemnt
                   |                               within 16 bits
                   |                               then X
                   |                                 else
                   |                                   if section of
                   |                                   operand is
                   |                                   short then
                   |                                   VIII
                   |                                     else
                   |                                      IX















        58                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


        Type of
        Instruction
        Section                            Expression Type
        -----------------------------------------------------------------------
                  |          External Reference            External Reference
                  |        in Specified Section          in Unspecified Section
                  |        ------------------------      ----------------------
         ABS      |      If section of operand is      If operand was defined
                  |      short then VIII               in XREF.S or if OPT F
                  |        else                        set then VIII
                  |        IX                          else
                  |                                        IX
                  |
                  |
         REL      |      If OPT R set then X           If operand was defined
                  |        else                        in XREF.S or if OPT F
                  |          If section of operand     set then VIII
                  |          is short then VIII          else
                  |            else                        IX
                  |              IX






                   8.1  Base Displacement Addressing - Introduction


             It is desirable to avoid absolute effective address  formats since
        those formats allow  a load module  to be placed  in only one  place in
        program memory; also, Absolute Long is the most  time-consuming address
        mode.  Program counter relative formats have the advantage  of position
        independence; however,  they are not  easy for a  person to read  as PC
        relative  addresses  to  the  same  location  are  different   in  each
        instruction  that  references  the  same  location.   Also  they cannot
        usually occur as destination operands, and they are limited to a 16-bit
        displacement from  the current instruction  location.  There  are times
        when  a  programmer  would  prefer to  see  an  address  relative  to a
        specified  location  in  primary  memory  rather  than  to  the program
        counter,  i.e., in  a base-displacement  format.  This  is particularly
        true when addressing arrays or other data structures.

             Base-displacement  addressing  may be  handled  explicitly  by the
        programmer.  For example, given the following data area:

                TEMP    DS      $40
                CONST   DC      $10
                ARRAY1  DS.L    $10
                ARRAY2  DS.L    $10
                RESULT  DS.L    $10



        59                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


             Assume the programmer  chooses to load A6  with the value  of TEMP
        and then make references  to the other data locations  as displacements
        from this  base address.   For example,  to move  the first  element of
        ARRAY1 to D1, this will work:

                        MOVE.L  ARRAY1-TEMP(A6),D1

             Here the absolute  expression ARRAY1-TEMP causes the  assembler to
        make use of Address Register Indirect with Displacement mode.

             To  aid the  programmer  in using  base-displacement  formats, the
        USING  directive  will  designate  a  register  as  a base-displacement
        register  and  inform  the  assembler  of  its  contents  at  the time.
        Following this directive, references  to locations near the  address in
        A6 will automatically be expressed as displacements from  this address.
        For example, the following  statement informs the assembler that  A6 is
        hereafter to be a base  register and that its current contents  are the
        address of TEMP:

                        USING   TEMP,A6

             Now when the assembler sees the following statement:

                        MOVE.L  ARRAY1,D1

             which might normally resolve to Absolute Long mode,  for instance,
        it checks its  base registers and  discovers that the  value associated
        with  A6  is near  ARRAY1.   This  being the  case,  it  calculates the
        displacement  of  ARRAY1 from  TEMP  and uses  register  A6  in Address
        Register Indirect plus Displacement  address mode.  In other  words, it
        is equivalent to writing:

                        MOVE.L  ARRAY1-TEMP(A6),D1

               Note:   The programmer should  not alter the  contents of
                       the base register.  This works correctly  only if
                       A6 still contains the address of TEMP at the time
                       of the MOVE.L instruction.





                    8.1.1  The USING Directive

             The syntax of the USING Directive is:

                USING{!}        <eff. address>,An{,{<min range>}{,<max range>}}

             where:

           !   is the optional qualifier which causes the assembler to generate


        60                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


               code as if the instruction "LEA <effective address>,An" had been
               submitted. In other words, it loads the desired address into the
               base  register.  In  the absence  of the  exclamation  point the
               register is assumed to  already contain the base  address, which
               prevents the generation of a redundant load instruction.
           <effective address>  is  an  expression  containing  no  forward  or
               external  references  which  is  interpreted  as  an  address in
               memory.  The expression may be absolute or relocatable.
           An  is the address register which is declared as a base register.
           <min range>  is  the  lowest allowable  displacement  from  the base
               register.  References to locations in memory  whose displacement
               from  the <effective  address> are  smaller than  this parameter
               will not result in a base displacement format.  <min  range> may
               not be less than -32768  and must be less than the  <max range>.
               Default is -32768 (full 16 bit displacement).
           <max range>  is the   highest allowable  displacement from  the base
               register.  <max range> may not  be more than +32767 and  must be
               greater than <min range>.  Default is +32767.





                    8.1.2  The ENDU directive

             This  directive is  used to  terminate base  register  usage.  Its
        syntax is:

                        ENDU    {An,{Am,...}}

             Each register named in the directive is marked as no  longer being
        a base  register.  If  no registers  are named  all base  registers are
        terminated.  If a  comment is given and  ENDU is used with  no argument
        the comment must be introduced  by a semicolon (;) or  exclamation mark
        (!).

             The appearance  of another USING  directive with the  same address
        register also terminates the previous usage.






                          8.2  Definition of a Base Register


             A base register is described by the following items:

               <address>:  The value in the USING directive which was at
                       that time  supposed to be  in the  register.  The
                       assembler records this  value and uses it  as the


        61                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


                       base address regardless of subsequent  changes to
                       the actual value in the register.

               <section>:  section in which <address> resides.

               <range>:    valid range  of displacement  from <address>.
                       By default  this is -32768  to +32767 but  may be
                       overridden  with  the  USING  directive.   A base
                       displacement  format  is  never  produced  for an
                       address  whose  displacement  from  <address>  is
                       outside the  legal range.   (External references,
                       however,  are  not  checked  against  the <range>
                       since their location is not known.)

             A further restriction  on the <range>  field occurs when  the mode
        resulting from base register  usage would be Address  Register Indirect
        with  Displacement and  Index.  Since  this mode  allows only  an 8-bit
        displacement the range of displacements allowed is limited to  at value
        between -128 and +127.  This does not mean that specified displacements
        inside this range  are extended; if the  user specified -2,1000  as the
        range, for  example, the actual  range for this  address mode  would be
        -2,+127.






                            8.3  Programmer Responsibility


             The programmer is responsible for guarding the contents of  a base
        register after it has been defined.  The assembler does not monitor any
        changes  in its  contents; the  only validity  checks performed  are to
        determine that an operand is within range of a base register.






            8.4  Resolution of Ambiguous Operands with Base-Reg. Addressing


             In all cases, the following conditions must be satisfied:

           a)  if it is possible for a base register to be used, it is used.
           b)  for a base displacement to be considered, the operand must be in
               the same  section as  a base register  and (except  for external
               references) must be within range.
           c)  base displacement will only be considered if the addressing mode
               that would result is a legal address mode for the instruction.


        62                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983


           d)  operands containing an external reference which does not  have a
               section  associated  with  it  cannot  be  translated   to  base
               displacement addressing.

             The following hierarchy of rules determines base  register address
        modes.  Each rule takes precedence over all that follow it.

           1)  Instructions with  implicit PC reference  (Bcc, DBcc)  never use
               base displacement modes.
           2)  Operands  with  an  explicit  reference  to  PC,   for  example:
               <exp>(PC) are considered for  base displacement modes as  if the
               PC  were  not   present,  according  to  the   following  rules.
               (However, if the  base displacement proves unacceptable,  the PC
               applies again; such operands never result in an absolute address
               mode.)
           3)  The  operand  <exp>  is  considered  for  translation   to  base
               displacement addressing.  If it satisfies  b) and c)  above, the
               operand resolves to Address Register Indirect  plus Displacement
               mode.
           4)  The operand  <exp>(Rn{.W,.L}) is  considered for  translation to
               base  displacement  addressing,  except  that  <abs  exp>(An) is
               always assumed to be Address Register Indirect with Displacement
               regardless of any base  registers.  If the operand  satisfies b)
               and c) above, the operand resolves to Address  Register Indirect
               with Displacement and Index.  However,   this format only allows
               for 8 bits of displacement, hence any external reference in such
               an <exp> is an error.
           5)  If more than one base register is within range of an  operand at
               a  known location,  the one  with the  smallest number  is used,
               though this  is of  little consequence.  If  more than  one base
               register is within  range of an  operand at an  unknown location
               (external reference) the one with the largest range is used.
           6)  If  the  operand  is  not  eligible  for  translation   to  base
               displacement addressing, the  rules given previously  (See pages
               4-3 through 4-5 and 8-1 through 8-4) apply.

             Example of Base Register Usage (Adapted from Motorola):

















        63                      M68000 Assembler Manual              ASM68K.DOC
        USER CONTROL OF ADDRESSING MODES                      November 17, 1983



                SECT.S  SECT0
        TEMP    DS      $40
        CONST   DC      $10
        ARRAY1  DS.L    $10
        ARRAY2  DS.L    $10
        RESULT  DS.L    $10

                XREF    SECT0:XLOC,SECT1:XLAB

                SECT    SECT1
        START   CLR.L   D0

                USING!  START,A5        ; loads address of START into A5
                USING!  CONST,A6,0      ; loads address of CONST into A6
                                        ; minimum of range is 0

        LOOP    MOVE.L  ARRAY1(D0),D1   ; equivalent to:
                                        ;  MOVE.L ARRAY1-CONST(A6,D0),D1
                ADD.L   ARRAY2(D0),D1   ; equivalent to:
                                        ;  ADD.L  ARRAY2-CONST(A6,D0),D1
                MOVE.L  D1,RESULT(D0)   ; illegal since RESULT is out of 8-bit
                                        ; range from CONST and operand has no
                                        ; legal interpretation except base reg.
                ADDQ    #4,D0
                CMP.L   #4*$10,D0
                BGT     LOOP

        JTABL   JSR     SUB1
                JSR     SUB2
                JSR     XLOC(PC)        ; equivalent to:
                                        ;  JSR     XLOC-CONST(A6)
                MOVE    XLAB,D2         ; equivalent to:
                                        ;  MOVE    XLAB-START(A5),D2
                ADD     XLAB(A0.L),D2   ; equivalent to:
                                        ;  ADD     XLAB-START(A5,A0.L),D2
                JMP     JTABL(D7)       ; equivalent to:
                                        ;  JMP     JTABL-START(A5,D7)
                MOVE    D2,TEMP         ; not translated since TEMP
                                        ; is out of range
                                        ; from A6 (less than 0, specified
                                        ; min. displacement).
                                        ; Absolute short mode
                ENDU                    ; terminate all base registers
                MOVE    CONST,D4        ; no base registers.
                                        ; Absolute short mode

                END






        64                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983






                             9 -  HOW TO USE THE ASSEMBLER


             The Assembler is  a two pass program  in which the source  text is
        scanned  twice.  During  the  first pass  the labels  are  examined and
        placed into the  symbol table.  Certain  errors may be  detected during
        this pass; these will be displayed on the output listing.

             During Pass Two, the object code is generated,  symbolic addresses
        are resolved, and a listing and object module is produced.   Errors not
        detected during Pass One will be detected during Pass Two.

             At  the end  of the  Assembly process  a symbol  table or  a cross
        reference table may be displayed.

             During the various  passes, the current  pass is displayed  on the
        terminal.

             During  pass  2,  any  errors  encountered  will  be  normally  be
        displayed  on  the  terminal;   if so,  an  error  count  will  also be
        displayed.

             The following steps are taken to assemble a program:

           1.  Write  a  program  utilizing  68000  mnemonics  and  directives,
               encoding the  argument fields  with constants,  labels, symbolic
               addresses, etc.
           2.  Execute ASM68K,  such that the  program from step  1 is  used as
               input.
           3.  Get listing and object module as output.






                                    9.1  Invocation


             In order to run the assembler, it is necessary to provide  it with
        the names of the  file to be assembled.   There are two valid  forms of
        invoking the assembler:

                Either- -R (2311DOC)ASM68K;COMMAND
                                -or-
                        -R (2311DOC)ASM68K

             The latter form  will then prompt for  a command;  in  both cases,
        COMMAND will be of the same format:

        65                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


                either- COMAND
                        -or-
                        @CMD.FIL

             In  the latter  case,  further input  is taken  from  CMD.FIL (the
        command file;  this will  contain further instances of  COMAND.  Nested
        command  files are  not,  however, supported;   CMD.FIL  cannot contain
        further instances of "@").

             COMAND can in turn have several formats:

                Either- FILE.SPC
                                -or-
                        FILE.SPC /OPTIONS
                                -or-
                        /OPTIONS FILE.SPC

               NOTE:   The  options field  of the  command  is optional;
                       however, if present, it should be  seperated from
                       the FILE field by at least one  delimiter (blank,
                       TAB).

             FILE.SPC is the file specification:

                Either- [(DIRECTORY)]IFILE[.EXT]

               In this case, [...] are optional;  the specified file  is opened
               as the input file.  Files named IFILE.xxx are also opened in the
               current directory (the  one you're invoking the  assembler from)
               for the  appropriate output  operation.  NOTE...These  files are
               opened even if they are not used...directory housekeeping may be
               appropriate (the  DIR command  will flag  these unused  files as
               having file size = 1).

                -or-    OFILE=[(DIRECTORY)]IFILE[.EXT]
               The same rules apply as in the previous case, except  that IFILE
               is the Input file  name;  OFILE is the  name to be used  for the
               Output files.

             Output files created are:

                FILE.LIS        - the listing file (/FORTRAN conventions)
                FILE.SRE        - S-REcords file

             OPTIONS specifications are of the format:

                        /ABC-DEF

             The "-" turns  the following options  OFF;  a subsequent  "/" will
        turn the  following options ON.   Unrecognized options are  reported to
        the terminal and are then ignored.  Options are scanned left  to right,
        and the  last usage  selected is  used.  The  available options  are as
        described in the manual, and are reported here ("*" means normally ON):

        66                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


                A       Absolute assembly
                B       Branch -- Bxx will use short form
                C*      DC.B subsequent lines will be listed
                D       Debug -- place symbol table into object
                E*      Error -- write errors to TTY
                F       Forward References use short form
                G       Generated by system
                I*      IF -- list unassembled IF's
                M*      Macro -- list assembled Macro bodies
                O*      Object -- produce object module
                P       Program Counter Relative
                R       Relocatable
                S*      Source -- list source text
                T*      Table -- list symbol table
                X       Cross - list cross reference table





                    9.1.1  Example

             The command:

        -R (2311DOC)ASM68K;/X FILE.SA

             performs the following functions:

           1.  Runs the assembler ("ASM68K"),
           2.  Sets the cross-reference option ("/X"),
           3.  Opens the  file "FILE.SA"  (in the  current directory)  for file
               input,
           4.  Opens the file FILE.LIS for listing output,
           5.  Opens the file FILE.SRE for Object-output,
           6.  In addition, the assembler  opens several unique .TMP  files for
               additional  storage during  execution;  these  are  deleted upon
               exit.






                                9.2  Assembler Listing


             During  Pass Two  of  the assembly  process a  program  listing is
        produced.   The  listing  displays all  information  pertaining  to the
        assembled program;  both assembled  data and the users  original source
        statements.

             The  listing  may be  used  as a  documentation  tool  through the


        67                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


        inclusion of  comments and  remarks that describe  the function  of the
        particular program section.

             The  main  purpose  of  the listing  is  to  convey  all pertinent
        information about the assembled program, i.e., the memory addresses and
        their values.  The relocatable object module, also produced during Pass
        Two, contains the address and value information but in a format that is
        not easily read.

             The following information is encountered on the listing:

           o   Each page has a header, containing:
               -   The source-file name;
               -   The Title (from the TTL directive);
               -   The Date of the assembly;
               -   The Page number.
               in addition, the  body of the  listing also has  standard column
               headings:
           o   When the assembler detects error conditions during  the assembly
               process,  the column  titled  "Err" will  contain  error code(s)
               describing the errors in the associated line of source code.  An
               explanation  of  the  individual error  codes  is  given  in the
               Apppendix.
           o   The column titled  "Source line" contains decimal  numbers which
               correspond to the source  lines of code.  These may  be suffixed
               with the characters  "a", "b", or  "c";  the suffix  denotes the
               level of INCLUDE file used -- the number is then the line-number
               within that file.
           o   The column titled "Ref. line" contains decimal numbers which are
               assigned to the  listing lines.  These  numbers are used  with a
               cross reference table.  They  will diverge from the  source line
               numbers if INCLUDE files or MACRO invocations are used.
           o   The column  titled "Address" contains  a value  which represents
               the first memory address of any data generated by this statement
               or the value of an EQU or SET directive.
           o   To  the right  of the  address  are up  to three  words  of data
               generated by  this statements  ("Value").  Additional  words are
               shown  on  subsequent  lines.   The  first   hexadecimal  number
               represents one word of data  to be stored in the  memory address
               and the memory address plus one.  If there are  additional words
               they will be be stored in subsequent memory locations.
           o   To  the right  of the  data words  are the  assembler relocation
               flags.  The flags are:
               R - relocatable operand,
               E - external operand.
               If one operand is relocatable and the other external, an  E will
               be displayed.
           o   The users original source statements are reproduced to the right
               of the above information.  Macro expansions are preceded  with a
               plus sign.
           o   At  the end  of  the listing  the assembler  prints  the message
               "ASSEMBLER ERRORS =  " with a  cumulative count of  errors.  The


        68                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


               assembler  substitutes  two  words  of  NOP's  when   it  cannot
               translate a particular opcode and so provides room  for patching
               the program if desired.
           o   A symbol table or cross reference table is generated at  the end
               of the assembly listing.   The table lists all  symbols utilized
               in alphabetic order along with any relocation types as described
               above.






                                9.3  The Object Module


             As  part of  the Pass  Two processing,  the assembler  produces an
        object module.  The object module is a machine readable computer output
        in the  form of  a sequential  text file.   The output  module contains
        specifications for loading the memory of the target  microprocessor and
        provides the necessary linkage to link object modules together.  If the
        user has specified  an absolute assembly with  the OPT A  directive, an
        absolute object module is produced in Motorola S-Record format.

             The relocatable object module may be read into  Microtec's Linking
        LOADER  (See LNK68K.DOC)  which  will then  convert it  to  an absolute
        program in Motorola  S-Record hexadecimal format.  The  absolute object
        module may then be loaded into a development system or used  to program
        a PROM.

             The format of the absolute object module is described below.  This
        module consists  of symbol table  information, data  specifications for
        loading  memory,  as  well  as a  module  starting  address  record and
        terminator record.

                $$
                symbol records
                $$
                header record
                data records
                record count record
                terminator record












        69                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


                                  9.4  Symbol Record


             As many symbol  records as needed may  be contained in  the object
        module,  however, a  module may  contain no  symbol records.   A sample
        record is shown below.

                APPLE $00000000  LABEL1 $0FFFFFFF  MEM $000003AB






                                  9.5  Header Record


             Each object module has exactly one header record.  Its format is:

                S00600004844521B

             where:

           'S0'     identifies the record as a header record
           '06'     is the number of bytes following this one
           '0000'   is the address field, which is ignored
           '484452' is 'HDR' in ASCII
           '1B'     is the checksum






                                   9.6  Data Record


             A Data  Record specifies  data bytes  that are  to be  loaded into
        memory.

               1 2    3 4   5 6 7 8 9 10    11 ... 41 42   43 44

              S  I   byte       load       data ..data      check
                 D   count     address       1       n       sum

             where:

           Column 1  contains "S"  which  indicates the  start of  a  record in
               Motorola S-Record format.
           Column 2 contains  a digit  identifying the  record type.   For Data
               Records this digit is 2.
           Columns 3 and 4 contain the  count of the number of  bytes following


        70                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


               this one within the record.  The count includes the checksum but
               not the byte count itself.
           Columns 5 through 10 contain the load address.  The first  data byte
               is to  be loaded  into this address,  subsequent bytes  into the
               next sequential  addresses.  Columns  5 and  6 contain  the high
               order address byte, columns 9 and 10 the low order address byte.
           Columns 11 through  42 (or less  if not 16  data bytes)  contain the
               specifications for up to 16 bytes of data.

             The last two columns in the data record contain a checksum for the
        record.  To calculate this the sum of the values of all bytes  from the
        byte count up  to the last data  byte, inclusive, is taken  modulo 256,
        and this result subtracted from 255.






                               9.7  Record Count Record


             This record contains the  number of data records preceding,  for a
        check.  Its format  is the same  as that of a  Data Record with  the id
        (Column 2) set  to 5, the byte  count (columns 3 and  4) set to  03, no
        address field, and two data bytes  which are set to the number  of data
        records in this file.  (The high order byte is in columns 5 and 6.) The
        checksum is calculated as usual.






                                9.8  Terminator Record


             A Terminator Record has the same format as a Data Record  with the
        ID (Column 2) set to 8, the byte count (columns 3 and 4) set to  04 and
        the load address field (columns 5 through 10) either set to zero  or to
        the starting address specified in the END directive.  There are no data
        bytes.












        71                      M68000 Assembler Manual              ASM68K.DOC
        HOW TO USE THE ASSEMBLER                              November 17, 1983


                              9.9  Cross Reference Format


             The cross reference option is normally turned off.  To turn  it on
        use  OPT  X, to  turn  it off  use  OPT -X  (see  OPT  directive).  The
        assembler  will produce  either  a cross  reference table  or  a symbol
        table.  The cross  reference table will be  produced if OPT X  has been
        specified.  References may be accumulated only during selected portions
        of the program  by turning the cross  reference option on and  off.  To
        obtain the cross reference listing, however, the option must  be turned
        on before the END directive.  Typically the OPT X directive will be one
        of the first statements in the source program and never turned off.

             The cross  reference listing  includes the  mnemonic name  of each
        symbol and  its value.   Any flags  on the  left of  the value  are the
        relocation types of the symbols.  Under REFERENCE, a value  preceded by
        a minus sign indicates that the symbol was defined on that  line.  Line
        numbers not preceded by a minus sign indicate a reference to  a symbol.
        Note that for  SET symbols or  for multiply-defined symbols,  more than
        one definition may appear for the symbol.


































        72                      M68000 Assembler Manual              ASM68K.DOC
                                                              November 17, 1983



























                      *   ****  ****  ***** *   * ****  ***** *   *
                     * *  *   * *   * *     **  * *   *   *    * * 
                    ***** ****  ****  ****  * * * *   *   *     *  
                    *   * *     *     *     *  ** *   *   *    * * 
                    *   * *     *     ***** *   * ****  ***** *   *
























        73                      M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER ERROR CODES                                 November 17, 1983






                          APPENDIX I.   ASSEMBLER ERROR CODES



             If errors in the  source program are detected during  the assembly
        process, an indication of the  type of error is printed on  the listing
        on the same line as the statement in error.

             The following list should serve as a guide to diagnose  the error.
        The listing always displays a total error count.

               A -     Argument  error.   The  argument  is  missing  or
                       contains an illegal character, etc.   Mismatch on
                       common/noncommon section type.

               C -     Macro  Substitution  error.    When  substituting
                       actual   macro   parameters   for   formal  macro
                       parameters, the 80  column source line  limit was
                       exceeded.

               D -     Duplicate Label.  The label in the  statement has
                       previously appeared in the label field.   A label
                       on  a  SET  directive  previously  appeared  in a
                       statement other than  a SET directive or  a label
                       on  a statement  other than  a SET  directive now
                       appears on a SET directive.  A label appears more
                       than once in an XDEF or XREF directive.  A symbol
                       defined in an XREF directive appears in the label
                       field of some statement.  Keyword appears  in the
                       label field or in an XDEF or XREF directive.

               E -     Relocation  error.  The  instruction  contains an
                       operand that violates  a rule of  relocation.  An
                       operand that should be absolute is relocatable or
                       an EQU, SET, or ORG directive makes  reference to
                       an  external  symbol.   A  relocatable expression
                       appears   in  an   absolute  only   assembly.   A
                       displacement  from   the  location   counter  has
                       exceeded the maximum  number of bits  allowed for
                       the displacement in the instruction (8 or 16).

               F -     Format error.   The instruction has  been written
                       in a format  which is not permitted.   This error
                       usually  indicates  a  trailing  comma   and  the
                       instruction  is  assembled  properly.   Too  many
                       operands  (the  leftmost  ones  are   used).   An
                       instruction  with two  operands does  not  have a
                       legal combination of address modes;  however, the


        74                      M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER ERROR CODES                                 November 17, 1983


                       instruction is  legal with the  first of  the two
                       existing operands.

               K -     Keyword  error.   An  assembler  keyword  is used
                       where it  is not  allowed or  used in  an illegal
                       manner, e.g., MOVE D1+1,D2.

               L -     Label  error.    A  label  contains   an  invalid
                       character or starts with a numeric character.

               M -     Missing Label.  This statement requires a label.

               N -     Macro  Nesting  error.  When  nesting  macros the
                       buffer available for macro parameters is full.

               O -     Opcode error.  The opcode mnemonic is not a valid
                       instruction, directive, or a macro call.   Also a
                       macro   defined   within   another    macro,   or
                       conditional   assembly   statements   nested  too
                       deeply.   ELSE,   ENDC,  or  ENDM   used  without
                       preceding  IF  or  MACRO.   LOCAL  directive used
                       outside  of  MACRO  body or  more  than  one IDNT
                       directive in program.  Invalid extension for this
                       opcode.    (DEC   version   only)   Nested   FILE
                       directives.

               Q -     Questionable operands.  The  operand(s) specified
                       with  this  instruction  are  not  valid  for the
                       instruction or the combination of operands is not
                       valid when used together.  E.g., CLR A6.  Too few
                       operands.

               R -     Illegal register usage.   The error refers  to an
                       operand of the form <exp> (<register>) and occurs
                       in two cases:

                       1)  <exp> is an external reference and <register>
                       is not PC.

                       2)  <exp> is absolute, no base register is within
                       range of <exp>, and <register> is not PC or An.

               S -     Syntax error.  A rule of syntax has been violated
                       in  this statement.   Parentheses are  not nested
                       properly  or  possibly  two  operators  appear in
                       sequence, e.g., +-5.

               T -     Table  Overflow error.   Symbol table  or section
                       name  table  is full  -  assembly  continues.  An
                       attempt  was  made  to  define  too  many macros.
                       Location counter advanced to a value  larger than
                       $FFFFFFFF.  In this case the value is made modulo
                       2**32.

        75                      M68000 Assembler Manual              ASM68K.DOC
        ASSEMBLER ERROR CODES                                 November 17, 1983


               U -     Undefined symbol.   There is  a symbolic  name in
                       the operand field  which has never  been defined.
                       The  symbol should  have been  previously defined
                       for certain directives and was not, but  may have
                       been  defined  after  the  directive.   A  symbol
                       declared on  the XDEF directive  was not  used in
                       the program.

               V -     Value error.  An evaluated expression or constant
                       is  out  of range  for  the field  of  the actual
                       machine  instruction  in   which  it  is   to  be
                       contained.  Usually applies to immediate  data or
                       data in a DC directive.

               W -     Warning.    A  relocation   directive   has  been
                       specified during  an absolute  assembly.  Attempt
                       to generate data in a COMMON  section.  Statement
                       is ignored.  Mismatch on long/short section type;
                       in this  case the statement  is accepted  and the
                       section type set to short.

               CROSS REFERENCE  OVERFLOW AT  xxxx.  The  cross reference
                       file  has  been filled.   Assembly  continues and
                       references stop.   Enlarge cross  reference table
                       or file.





























        76                      M68000 Assembler Manual              ASM68K.DOC
        ASCII AND EBCDIC CODES                                November 17, 1983






                         APPENDIX II.   ASCII AND EBCDIC CODES



             The Assembler will  recognize only the following  characters.  The
        equivalent codes are expressed in hexadecimal notation.

        CHARACTER ASCII EBCDIC   CHARACTER ASCII EBCDIC   CHARACTER ASCII EBCD

            0      30     F0         V       56    E5         a       61    81
            1      31     F1         W       57    E6         b       62    82
            2      32     F2         X       58    E7         c       63    83
            3      33     F3         Y       59    E8         d       64    84
            4      34     F4         Z       5A    E9         e       65    85
            5      35     F5                                  f       66    86
            6      36     F6         blank   20    40         g       67    87
            7      37     F7         !       21    5A         h       68    88
            8      38     F8         "       22    7F         i       69    89
            9      39     F9         #       23    7B         j       6A    91
                                     $       24    5B         k       6B    92
            A      41     C1         %       25    6C         l       6C    93
            B      42     C2         &       26    50         m       6D    94
            C      43     C3         '       27    7D         n       6E    95
            D      44     C4         (       28    4D         o       6F    96
            E      45     C5         )       29    5D         p       70    97
            F      46     C6         *       2A    5C         q       71    98
            G      47     C7         +       2B    4F         r       72    99
            H      48     C8         ,       2C    6B         s       73    A2
            I      49     C9         -       2D    60         t       74    A3
            J      4A     D1         .       2E    4B         u       75    A4
            K      4B     D2         /       2F    61         v       76    A5
            L      4C     D3                                  w       77    A6
            M      4D     D4         :       3A    7A         x       78    A7
            N      4E     D5         ;       3B    5E         y       79    A8
            O      4F     D6         <       3C    4C         z       7A    A9
            P      50     D7         =       3D    7E
            Q      51     D8         >       3E    6E
            R      52     D9         ?       3F    6F
            S      53     E2         @       40    7C
            T      54     E3         _       5F    6D
            U      55     E4         \       5C    E0

               NOTE:   Backslash ( )  is  only  valid  within   a  Macro
                       definition.  Lower case letters work only  if the
                       user   has  installed   them  according   to  the
                       Installation Notes.




        77                      M68000 Assembler Manual              ASM68K.DOC
        INDEX                                                 November 17, 1983


                                         INDEX

        Absolute Long Mode  18                Program Counter with Displacement
        Absolute Short Mode  18                  Mode  18
        Address Modes  17@
        Address Register Indirect
           Mode  18                           Qualifiers  14@
        Address Register Indirect with
           Displacement and Index
           Mode  18                           Register Direct Modes  17@
        Address Register Indirect with        Registers  10@, 15@
           Displacement Mode  18
        Address Register Indirect with
           Postincrement Mode  18             SECT Directive  52@
        Address Register Indirect with        SECTION Directive  52@
           Predecrement Mode  18              Special Address Modes  18@
        Assembly Location Counter  11@        Statements  4@
                                              Status Register mode  19
                                              Symbolic Addressing  5@
        Comment Field  4                      Symbols  10@
        Comment Statement  4@
        COMMON DIRECTIVE  52@
        Constants  8@                         USING Directive  60@


        ENDU directive  61@                   Variants of Instruction
        Expressions  12@                         Types  19@


        IDNT Directive  55@                   XDEF Directive  53@
        Immediate mode  19                    XREF Directive  54@
        Instructions  14@


        Label Field  4


        Macro Body  40@
        Macro Call  41@
        Macro Heading  39@
        Macro Terminator  41@
        Memory Address Modes  18@
        MEXIT - Alternate Macro Exit  45@


        odd  19
        Operand Field  4
        Operands  16@
        Operation Field  4


        Program Counter with Displacement
           and Index Mode  18

        78                      M68000 Assembler Manual              ASM68K.DOC
  V m