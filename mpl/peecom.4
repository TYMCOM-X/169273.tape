begin "PEECOM"

require "(SAILIB)SAIL.DEF" source!file;
require "UUOSYM.DEF" source!file;
require !Xwd('100,'4) version;

External Boolean RPGSW;

Preload!with ['2000]0;
Own Integer Array VirtualStorage[ 0 : '2000-1 ];
Own Integer Array Info[ 1 : 6 ];

Own Integer BasePage, Byte, More, Pos;
Own Integer Command, Chan, Eof, Table, Slash, Break;
String File, Line, Name, Text;

simple procedure SetupBasePage;
begin
    BasePage _ (Location(VirtualStorage[0]) +'777) lsh -9;
    Calli( !Xwd( '2001, BasePage ), calli!VCLEAR );
end;
require SetupBasePage initialization;

simple procedure SetupName;
begin
    Name_ cv6str( Calli( !Xwd( -1, !gtNAM ), calli!GETTAB ) );
end;
require SetupName initialization;

simple boolean procedure NewFilePage( Integer FilePage );
begin
    own integer array arg[0:1];
    Arg[ 0 ]_ !Xwd( '2001, BasePage );	! <.prro>b7 + 1b17,,base;
    Arg[ 1 ]_ FilePage;			! use newest file-page;
    Chnior( Chan, Arg[0], !chMFP );	! map file page;
    Return( !Skip! );			! cannot map page;
end;

simple boolean procedure dorescan;
begin!code
    seto 1,;
    ttcall 6,1;
    trz 1,'777777;
    tlz 1,'677777;
end;


Open(Chan_getchan,"DSK",'17,0,0,0,0,Eof_-1);
Do begin
    If RPGSW
     then begin "RPG"
	integer C,B,E; string F; integer array T[0:1];
	Line _ TMPIN( "PEC", E );
	if E then begin "No PEC.TMP file"
	    F _ cvs( 1000+Calli(0,calli!PJOB) )[2 to 4]&"PEC.TMP";
	    open(C_getchan,"DSK",1,4,0,256,B,E);
	    lookup(C,F,E);
	    if E
	     then begin "no temp disk file"
		print("?cant read ",F," error code '",cvos(!rh(E)),crlf );
		calli( 0,calli!Exit )
	     end "no temp disk file";
	    Line _ null;		! make sure no ill side-effects;
	    Do Line _ Line & input(C,0) until E;
	    rename(C,null,0,E);
	    release(C)
	 end "No PEC.TMP file"
	 else begin "delete TMP file"
	    T[0] _ Cvsix("PEC");
	    T[1] _ 0;
	    calli(!Xwd(!TCRDF,T[0]), calli!TMPCOR);	! Delete it;
	 end "delete TMP file"
     end "RPG"
     else If DoRescan
	   then begin "NOT RPG"
		Backup;
		Setbreak(Table_ Getbreak,";",null,"KINS");
		Line_ Text_ Inchsl(Command);
		Scan(Line,Table,Break);
		If ( length( Line ) = 0 )
		 then begin "still nothing"
		    If ( length( Text ) )
		     then begin "check command line"
			Relbreak(Table);
			Setbreak(Table_ Getbreak," "&#ht,null,"KINS");
			Line_ Text;
			Scan(Line,Table,Break);
		     end "check command line";
		 end "still nothing";

		Relbreak(Table)
	   end "NOT RPG";

    If Length(Line)=0
     then begin "PROMPT"
	Print("Logfile? ");
	Line _ Inchwl
     end "PROMPT";
    Setbreak(Slash_ Getbreak,"/",crlf,"KINS");
    File_ Scan(Line,Slash,Break);
    if ( length( File ) = 0 )
     then begin "nothing to do"
	Print( "nothing to do" & crlf );
	calli( 0, calli!EXIT );
     end "nothing to do";
    Pos_ If ( Break = "/" )
	  then Cvd( Line ) - 1
	  else 0;
    Lookup(Chan,File,Eof_-1);
    If Eof
     then begin
	Integer NewEof;
	Lookup(Chan, File&".LOG", NewEof_-1);
	If NewEof
	 then begin
	    Print("File ",File," not found (",cvos(!rh(Eof)),")",crlf);
	    File _ null
	 end
	 else begin
	    File_ File&".LOG";
	    Eof_ False
	 end;
	If ( Eof ) and ( RPGSW )
	 then Calli( 0, calli!EXIT );
     end
end until not Eof;

If ( RPGSW )
 then Print( Crlf, "[Running ", Name, " for file: ", File,
	    (If Pos > 0 then " /"&Cvs(Pos) else ""), " ]", Crlf );


If ( Pos > 0 )
 then Print( " ..." )			! let them know it continued;
 else Pos_ 0;				! else insure integrity;
Eof_ Pos lsh -9;			! initial position;
Pos_ Pos land '777;			! initial word pos;
While ( More_ NewFilePage( Eof_ Eof+1 ) )
 do begin "MAINLOOP"			! while pages to map do...;
    begin!code
	label loop, retry, sleep, MgnFct, MgnUpd, over, done;
	Move	1,BasePage;	! get page to start;
	Lsh	1,9;		! shift to make address;
	Add	1,Pos;		! add in any difference;
	Hrli	1,'440700;	! make a point 7,xxx,0;
	Movem	1,Byte;		! store in pointer;
	Movei	2,'200;		! get hibernation counter;
	Movei	3,512;		! set count of chars;
	Sub	3,Pos;		! get difference in word count;
	Imuli	3,5;		! number of characters;
	Setzm	Pos;		! do this only once;
	Hrroi	4,'51;		! -1,,.axOCI;
loop:	Ibp	Byte;		! point to first byte;
retry:	Ldb	1,Byte;		! get a byte;
	Jumpe	1,sleep;	! ignore if nulls;
	Auxcal	4,(1);		! otherwise print it;
	Sojg	3,loop;		! loop for a whole page;
	Jrst	done;		! done;

sleep:	Move	1,Byte;		! address being looked at;
	Caile	3,5;		! last word on page?;
	Skipn	1(1);		! no, is next word nonzero?;
	 Skipa;			! go to sleep;
	  Jrst	loop;		! skip over null in file;
	Movsi	1,!chMGN;	! manipulate interlock call;
	Hrr	1,Chan;		! for the current file;
	Chanio	1,MgnFct;	! see if file being updated;
	  Jfcl;			! ignore errors;
	Skipn	MgnUpd;		!  if non-zero then continue;
	  Jrst	over;		!    else it's all over;
	Calli	2,calli!hiber;	! sleep;
	 Jfcl;			! ignore errors;
	Jrst	retry;		! loop for next character;

MgnFct:	3;			! data -- 0,,3 file being updated?;
MgnUpd:	0;			! data -- 0=no 1=yes;

over:	Setzm	More;		! nomore - Bye;
done:
    end;
    Calli( !Xwd( '2001, BasePage ), calli!VCLEAR );
    If not ( More )
     then done;
end;

    Calli( !Xwd( '6001, BasePage ), calli!VCREAT );
    Close(Chan, CL!RST);	! don't create / supersede file;
    Release(Chan);
    Call(1,"EXIT");

end $

