begin	"PCOM"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)TYMINT.DEF" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require "CLONE.REQ" source!file;

item	INTPRO;
forward simple procedure TIM;
forward simple procedure CHR;
forward simple procedure ZAP;
forward simple procedure ORG;
forward simple procedure NTQ;
simple procedure IntIni(integer Port);
begin
    intmap (intass(!IATIM,10),TIM,0);
    intmap (tinass(Port,!IACHR,11),CHR,0);
    intmap (tinass(Port,!IAZAP,12),ZAP,0);
    intmap (tinass(Port,!IAORG,13),ORG,0);
    intmap (intass(!IANTQ,14),NTQ,0);
    enable (newenb(10));
    enable (newenb(11));
    enable (newenb(12));
    enable (newenb(13));
    enable (newenb(14));
end;

integer PORT,FD;

simple procedure SPROUT;
begin
    integer P;
    P _ calli(0,calli!CREPTY);
    if not !SKIP! then usererr(P,2,"?CREPTY error: ","X");
    PORT _ !lh(P);
    auxcli(PORT,'214,!AXCFS);
    start!code
	MOVSI	1,!FOCFM;
	SETOM	!SKIP!;
	uuo!FRMOP 1,[0];
	 SETZM	!SKIP!;
	MOVEM	1,FD;
    end;
    if not !SKIP! then usererr(FD,2,"?.FOCFM error: ","X");
    start!code
	HRRO	1,FD;
	HRLI	2,'200000;
	HRR	2,P;
	MOVEI	1;
	SETOM 	!SKIP!;
	uuo!RETACH;
	 SETZM	!SKIP!;
    end;
    if not !SKIP! then usererr(0,0,"?RETACH error","X");
    print("[frame ",FD land '777," created]",crlf);
end;

simple procedure OutPtr (integer PORT; string S);
begin!code
	MOVEI	1,!AXOPC;	! output while room;
	HRL	1,PORT;
	AUXCAL	1,-1(SP);	! output through pointer;
end ;

string S,SLOGOUT,IFile,OFile,Disposition;
integer IChan,OChan,BRK,LineNo;
boolean Detach!,EOF;

boolean TIM!;
simple procedure TIM;
EOF _ TIM! _ true;	! terminate commands file and wake up SYNC;

simple procedure CHR;
begin	! called when a character is received from the port;
    integer C;
    while true do begin
	auxclr(Port,C,!AXI8S);
	if !SKIP! 
	    then begin
		wordout(OChan,C);
		auxclv(-1,C,!AXO8);
	    end
	    else done;
    end;
    auxclv(Port,0,!AXLDE);
end;

boolean ZAP!;
simple procedure ZAP;
begin
    disable (newenb(11));
    disable (newenb(12));
    calli(Port,calli!ZAPCIR);	! good form? ;
    EOF _ ZAP! _ true;	! terminate commands file and wake up SYNC;
end;

boolean ORG!;
simple procedure ORG;
ORG! _ true; 		! wake up SYNC;

boolean NTQ!;
simple procedure NTQ;
EOF _ NTQ! _ true; 	! terminate commands file and wake up SYNC;

simple procedure SYNC;
begin	! synchronize with slave;
    ORG! _ false;
    auxclv(PORT,0,!axSYB);	! send yellow ball;
    do 
	calli(3000,calli!HIBER)
    until ORG! or TIM! or ZAP! or NTQ!;
    ! orange ball interrupt procedure sets ORG!;
end;

simple procedure BrkIni;
begin
    setbreak(1,#lf,null,"SINF");		! read line;
    setbreak(2,#lf&";/",#cr,"SINK");		! read command;
    setbreak(3,#lf&#cr&#ht&" ",null,"RXNK");	! eat white space;
    setbreak(4,#lf&#ht&" !@#$%^&*()_+-=~`{}[]|\:;'<>,.?/"&'42,#cr,"RINK");
end;
require BrkIni initialization;

string procedure TOK (reference string S);
begin
    string S1;
    scan(S,3,BRK);
    S1 _ scan(S,4,BRK);
    if length(S1) = 0 then S1 _ lop(S);
    scan(S,3,BRK);
    return(S1);
end;

integer array VarVal ["A":"Z"];
string array VarStr ["A":"Z"];

procedure ASSIGN (string CMD);
begin
    integer V;
    V _ TOK(CMD);	! get variable name;
    TOK(CMD); 		! eat "=";
    if "A" leq V leq "Z" 
	then VarVal[V] _ cvd(TOK(CMD));
end;

procedure COM (string CMD);
begin
end;

procedure DETACH;
begin
    Detach! _ true;
    CLONE;
end;

procedure ESCAPE;
begin!code
    label HALTW,HALTX,CLRW,CLRX;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 JFCL;
	JUMPG 1,CLRX;		! don't hassle if halted;
	MOVE 1,FD;
	TRZ 1,'770000;		! do absolute so license will help;
	HRLI 1,!foHLT;
	uuo!FRMOP 1,;		! return to monitor;
	 JRST CLRX;		! assume already halted (oh well);
HALTW:	MOVEI 1,1;
	uuo!SLEEP 1,;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ 1,;
	JUMPL 1,HALTW;		! sleep until child halts;
HALTX:	MOVE 1,FD;
	TRZ 1,'770000;
	HRLI 1,!foCLR;
	uuo!FRMOP 1,;		! clear frame;
	 JFCL;
CLRW:	MOVEI 1,1;
	uuo!SLEEP 1,;
	MOVS 1,FD;
	TLZ 1,'770000;
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ 1,;
	JUMPL 1,CLRW;		! sleep until child halts;
	MOVE 1,FD;
	uuo!SETOTF 1,;
	 JRST CLRX;
	MOVSI 1,'206001;	! 1 page at 0 R/W in other frame;
	uuo!VCREAT 1,;
	 JRST CLRX;
	MOVE 1,FD;
	HRLI 1,!foWVA;
	SETZ 2,;		! address;
	HRROI 3,!GTPRV;		
	uuo!GETTAB 3,;		! data = JBTPRV for us;
	 JRST CLRX;
	uuo!FRMOP 1,2;		! write in AC0;
	 JRST CLRX;
	MOVEI 2,1;		! address;
	MOVE 3,[uuo!SETPRV];	! data;
	uuo!FRMOP 1,2;
	 JRST CLRX;
	MOVEI 2,1;		! address;
	MOVE 3,[uuo!EXIT];	! data;
	uuo!FRMOP 1,2;
	 JRST CLRX;
	HRLI 1,!foSAA;
	MOVE 2,['400000000001];	! start address;
	uuo!FRMOP 1,2;
	 JFCL;
CLRX:	PUSHJ P,SYNC;		! stay in sync with slave;
end;

procedure GOTO (string CMD);
begin
    string S;
    S _ "::"& TOK(CMD);
    lookup(IChan,IFile,EOF);
    if EOF then usererr(EOF,2,"?cant reopen input file "& IFile& ": ", "X");
    LineNo _ 1;
    do begin
	LineNo _ LineNo +1;
	if equ(input(IChan,2),S) then return;
    end until EOF;
end;

simple procedure QUIT;
EOF _ true;

boolean STOP!;		! tell world why we stoped;
simple procedure STOP;
STOP! _ EOF _ true;

procedure TIME (string CMD);
calli(!xwd(1,60*cvd(TOK(CMD))),calli!SETTIM);

recursive procedure COMMAND (string CMD);
begin	"COMMAND"
    string KW;
    if CMD = ":" then lop(CMD);
    KW _ TOK(CMD);
    if KW = ":" then ! ignore label here;
    else if BRK = "=" then ASSIGN(KW&CMD)
    else if equ(KW,"AFTER") then 
    else if equ(KW,"COM") then COM (CMD)
    else if equ(KW,"DEFINE") then 
    else if equ(KW,"DETACH") then DETACH
    else if equ(KW,"ESCAPE") then ESCAPE
    else if equ(KW,"FIND") then
    else if equ(KW,"GO") or equ(KW,"GOTO") then GOTO(CMD)
    else if equ(KW,"IF") then
    else if equ(KW,"LOOK") then
    else if equ(KW,"PAUSE") then
    else if equ(KW,"QUIT") then QUIT
    else if equ(KW,"RESTART") then 
    else if equ(KW,"STOP") then STOP
    else if equ(KW,"TIME") then TIME (CMD)
    else if equ(KW,"UNLESS") then 
    else if equ(KW,"WAIT") then
    else ;
end	"COMMAND";

string MyName;
MyName _ cv6str(calli(!xwd(-1,!GTUNM),calli!GETTAB)) &
    cv6str(calli(!xwd(-1,!GTUN1),calli!GETTAB));
ttyup(true);

backup;
S _ inchwl;				! read monitor command line;
scan(S,2,BRK);				! look for semicolon;
if BRK neq ";" then begin
    string CB,T;
    integer I;
    CB _ compiler!banner;
    for I _ 1 upto 12 do begin
	T _ TOK(CB);
	case I of begin
	[1][5][6][7][8][10][11][12] print(T);
	[2] print(" version of ");
	[9] print(T," ");
	else end;
    end;
    print(crlf,"input file: "); 
    S _ inchwl;
end;
IFile _ scan(S,2,BRK);			! scan filename;
Detach! _ (BRK = "/") and equ(S,"DETACH"[1 to length(S)]);
					! scan switches (only 1);

open(IChan_getchan,"DSK",0,4,0, 1024,BRK,EOF);
lookup(IChan,IFile,EOF);		! input file;
if EOF then usererr(EOF,2,"?cant read input file: ","X");
OFile _ input(IChan,2);
if lop(OFile) neq ":" then usererr(0,0,"?error in command file:"& crlf&
	"file must begin with"& crlf&
	"	:outputfile"& crlf&
	"command"& crlf, "X");
if length(OFile)=0 then OFile _ "PCOM."& cvs(calli(0,calli!PJOB));
open(OChan_getchan,"DSK",0,0,4, 0,0,EOF);
enter(OChan,OFile,EOF);			! output file;
if EOF then usererr(EOF,2,"?cant write output file: ","X");

SPROUT;				! create child frame and PTY to it;
if Detach! then DETACH;		! don't tie up the terminal;
calli(!xwd(2,60),calli!SETTIM);	! default timeout is 1 hour;
IntIni (Port);			! enable interrupts;

LineNo _ 1;
while not EOF do begin
    string S;
    S _ input(IChan,1);		! input line;
    if EOF then done;
    LineNo _ LineNo +1;		! count it;
    if S = ":"			! check for begin with colon;
	then Command(S)		!	process PCOM command;
	else begin		!	send command to slave job;
	    OutPtr(Port,S);
	    SYNC end;
end;
release(IChan);			! don't need this any more;
if ZAP! 
    then begin			! start a new frame;
	SPROUT;
	IntIni (PORT) end
    else ESCAPE;		! force command level;
DISPOSITION _ "completed";
if TIM! then DISPOSITION _ "aborted: timeout at line "& cvs(LineNo);
if NTQ! then DISPOSITION _ "aborted: killed by operator at line "& cvs(LineNo);
if ZAP! then DISPOSITION _ "abended: lost circuit to slave at line "& cvs(LineNo);
if STOP! then DISPOSITION _ "aborted: :STOP at line "& cvs(LineNo);
if Detach! then OutPtr(Port,"SEND "&MyName&#cr&
    cv6str(calli(!xwd(-1,!GTNAM),calli!GETTAB))&
    " job "&IFile&" "&disposition&"."&#cr&
    "Output recorded in file "&OFile&"."&#cr&#ctrl("D") );
OutPtr(Port,"LOGOUT"&#cr);
while not ZAP! 			! wait for zapper;
    do calli(3000,calli!HIBER);
release(OChan);
if Detach! then calli(0,calli!LOGOFF);
print(crlf,"[job ",IFile," ",disposition,"]");

end $

