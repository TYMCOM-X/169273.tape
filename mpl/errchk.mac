TITLE ERRCHK - PRINT ERROR INFORMATION GATHERED BY CHKPNT
T1=1
T2=2
T3=3
T4=4
T5=5
T6=6
T7=7

P=17
PTR=16
C=15
TYP=14          ;TYPE OF DEVICE FOR ERROR PRINTING IN LONG MODE
FL=0

FIL==1
LPT==2
TMP==3

OPDEF OCHI [3B8]
OPDEF OCHR [1B8]
OPDEF OSTR [2B8]

        LOC 41
        JSR UUO0
        RELOC

JOBVER==137
        INTERNAL JOBVER
        LOC JOBVER
        9
        RELOC
        
ARRAY BUF[200],PDL[40],DCNV,OBUF[3]

COM:    IOWD 200,BUF
        0

EXTERNAL JOBFF,JOBREL

JBTLIC==-20
LICSYS==(1B3)
RECDAT==0       ;RELATIVE LOCATION OF DATE (LH) AND TIME (RH) IN RECORD
RECDEF==1       ;TYPE IN RH IF -1 IN LH OTHERWISE NOT ERROR TYPE

FLGDSK==400000  ;THE OUTPUT IS TO A DSK FILE
FLGOPN==200000  ;THE OUTPUT FILE IS OPEN
FLGDAT==100000  ;DATE HAS BEEN OUTPUT

DEB==0  ;DEBUG FLAG
STPT:   RESET
        MOVEI FL,0
        MOVE P,[IOWD 40,PDL]
IFE DEB,<       HRROI T1,JBTLIC
        GETTAB T1,
         MOVEI T1,0
        TRNE T1,LICSYS  ;DOES HE HAVE SYSTAT LIC?
        JRST LICOK      ;YES
        HRLS T1
        SETLIC T1,      ;NO, SET JOB LIC AS  PROCESS LIC>
LICOK:  INIT FIL,16
IFE DEB,<       SIXBIT /SYS/>
IFN DEB,<       SIXBIT /DSK/>
        0
        JRST NODSK
        MOVEI T1,^D10
        MOVEM T1,RADIX# ;SET READ RADIX
        SETZM STRTIM#
        MOVEI T1,^D<24*60*60>   ;MIDNIGHT
        MOVEM T1,STPTIM#
        SETZM ELMERR#   ;NO ERRORS TO SUPRESS
        SETZM CNTERR#   ;CONTINUOUS ERROR MODE
        SETZM SHTFRM#   ;NOT IN SHORT FORM (EXPANDED)
        SETZM ELMLST#   ;NO UNITS TO SUPRESS
        SETZM HRDFLG#   ;HARD AND SOFT ERRORS
        SETOM ONLERR#   ;NO ERROR SELECTION
        SETZM ONLNAM#   ;NO SPECIAL UNIT SELECTION
        SETZM FRECOR#
        SETZM UNILST#
        SETZM SKPERR#   ;SKIP ALL ERRORS (ENVIRON ONLY)
        SETZM USESNS#   ;INCLUDE SENSE BYTES
        SETZM USEENV#   ;INCLUDE ENVIRONMENTAL DATA
CMDLP:  OUTSTR [ASCIZ /
*/]
        SETZM SAVCHR#
        PUSHJ P,SCAN
        TRNN FL,IDENT
        JRST TRMLOK
        MOVE T4,[-CMDLEN,,CMDTAB]
        PUSHJ P,CMDSRC
         JRST TYPHLP
        XCT CMDDSP(T3)  ;FOUND COMMAND
CMDDON: PUSHJ P,WTLF
        JRST CMDLP

WTLF:   CAIN C,12
        POPJ P,
        INCHWL C
        JRST WTLF

TRMLOK: TRNE FL,TERMF
        JRST CMDDON
TYPHLP: PUSHJ P,WTLF
        OUTSTR [ASCIZ /TYPE HELP FOR HELP/]
        JRST CMDLP

NODSK:  OUTSTR [ASCIZ /
CAN NOT INIT SYS/]
        EXIT
NUMF==1
TERMF==2
IDENT==4

SCAN:   TRZ FL,NUMF!TERMF!IDENT
        SKIPN C,SAVCHR
SKPSP:  INCHWL C
        CAIN C," "
        JRST SKPSP
        CAIG C,"9"
        CAIGE C,"0"
        JRST IDNCHK
        MOVEI T1,0
NUMIN:  IMUL T1,RADIX
        ADDI T1,-"0"(C)
        INCHWL C
        CAIG C,"9"
        CAIGE C,"0"
        SKIPA
        JRST NUMIN
        MOVEM C,SAVCHR
        TRO FL,NUMF
        POPJ P,

IDNCHK: CAIL C,140
        SUBI C,40
        CAIG C,"Z"
        CAIGE C,"A"
        JRST TRMCHK
        MOVE T1,[POINT 6,ACCUM]
        SETZM ACCUM#
LETIN:  SUBI C,40
        TLNE T1,770000
        IDPB C,T1
        INCHWL C
        CAIG C,"Z"
        CAIGE C,"A"
        SKIPA
        JRST LETIN
        CAIG C,"9"
        CAIGE C,"0"
        SKIPA
        JRST LETIN
        MOVEM C,SAVCHR
        TRO FL,IDENT
        POPJ P,

TRMCHK: CAIN C,15
        TRO FL,TERMF
        SETZM SAVCHR
        POPJ P,
CMDSRC: MOVE T1,ACCUM
        PUSHJ P,MAKMSK
MSKDON: HLLZ T3,T4
        HRLI T4,T3
        MOVEM T4,SRCPTR#
        MOVEI T4,0
CMDSR0: CAMN T1,@SRCPTR
        JRST CPOPJ1
        MOVE T5,@SRCPTR
        AND T5,T2
                CAME T1,T5
        JRST CMDSR1
        JUMPN T4,CPOPJ
        MOVE T4,T3
CMDSR1: AOBJN T3,CMDSR0
        JUMPE T4,CPOPJ
        MOVE T3,T4
CPOPJ1: AOS (P)
CPOPJ:  POPJ P,
        DEFINE CMDS
<       X QUIT,<JRST DOEXIT>
        X DATE,<PUSHJ P,SRTTST>
        X HELP,<PUSHJ P,DOHLP>
        X ERROR,<PUSHJ P,SETERR>
        X START,<PUSHJ P,SETSTR>
        X STOP,<PUSHJ P,SETSTP>
        X CONTIG,<SETOM CNTERR>
        X ONEDAY,<SETZM CNTERR>
        X SORT,<SETOM SRTFLG>
        X UNSORT,<SETZM SRTFLG>
>

        DEFINE X (A,B)
<       <SIXBIT /A/>>

CMDTAB: CMDS
CMDLEN==.-CMDTAB

        DEFINE X(A,B)
<       B>

CMDDSP: CMDS

DOEXIT: PUSHJ P,WTLF
        EXIT

DOHLP:  PUSHJ P,WTLF
        OUTSTR HLPMS
        POPJ P,

HLPMS:  ASCIZ /
COMMANDS ARE:

QUIT    QUIT
ERROR   SET ERROR CONDITIONS DESIRED
   ERROR        ALL
   ERROR DPA3   ONLY DPA3
   ERROR -DPA3  EXCLUDE DPA3
   ERROR DP     ONLY DISK PACKS
   ERROR DPA    ONLY PACKS ON CONTROLLER A
   ERROR 4000   ONLY ERRORS WITH CONI BIT 4000
   ERROR -4000  EXCLUDE ERRORS WITH CONI BIT 4000
   ERROR HARD   ONLY HARD ERRORS
   ERROR -HARD  INCLUDE BOTH HARD AND SOFT ERRORS
   ERROR SHORT  ERRORS IN SHORT FORM (ACTUAL BITS)
   ERROR -SHORT ERRORS IN LONG FORM (NAMES OF BITS)
   ERROR SENSE  INCLUDE SENSE DATA IN ERROR PRINTOUT
   ERROR -SENSE EXCLUDE SENSE DATA
   ERROR ENVIRO INCLUDE ENVIRONMENTAL DATA IN PRINTOUT
   ERROR -ENVIRO EXCLUDE ENVIRONMENTAL DATA
   ERROR ALL    SAME AS JUST ERROR
   ERROR -ALL   SUPPRESS ALL ERRORS (JUST SENSE AND ENVIRO IF ON)

   MORE THAN ONE ERROR COMMAND MAY BE INCLUDED ON A SINGLE LINE
   AS ERROR SENSE ENVIRO -FT -FH
DATE    SET DATE AND PRINT DATA
START   SET STARTING TIME
STOP    SET ENDING TIME
CONTIG  START AND THE DATE AND TIME SPECIFIED AND REPEAT ERROR
        REPORTING FOR EACH DATE THROUGH TODAY
ONEDAY  TURN OFF CONTIG MODE
SORT    SORT ERRORS BY DEVICE
UNSORT  SORT ERRORS BY TIME
/
SETSTR: PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST    [SETZM STRTIM
                POPJ P,]
        TRNN FL,NUMF
        JRST ILLCMD
        IDIVI T1,^D100
        IMULI T1,^D60
        ADD T1,T2
        IMULI T1,^D60
        MOVEM T1,STRTIM
        POPJ P,

ILLCMD: PUSHJ P,WTLF
        OUTSTR [ASCIZ /ILLEGAL COMMAND/]
        POPJ P,

SETSTP: PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST    [MOVEI T1,^D<24*60*60>
                MOVEM T1,STPTIM
                POPJ P,]
        TRNN FL,NUMF
        JRST ILLCMD
        IDIVI T1,^D100
        IMULI T1,^D60
        ADD T1,T2
        IMULI T1,^D60
        MOVEM T1,STPTIM
        POPJ P,

SRTTST: MOVE    T1,SRTFLG       ;GET SRTFLG
        CAMN    T1,[-1]         ;IS OUTPUT TO BE SORTED?
        JRST    START           ;IF SO, GO TO START
        MOVE    T1,[SIXBIT /ERRCHK/] ;INIT OUTPUT FILE
        MOVEM   T1,LPTNAM+2
        MOVE    T1,[SIXBIT /TTY/] ;OUTPUT ERRORS TO TTY
        MOVEM   T1,TTYCHN+1
        TRZ     FL,FLGOPN       ;MAKE SURE TTY IS INITIALIZED
        PUSHJ   P,GETDAT        ;CALL GETDAT
        CLOSE   LPT,            ;COMPLETE TTY OUTPUT
        JRST    FINISH          ;GO TO FINISH
START:  MOVE    T1,[SIXBIT /DSK/] ;CHANGE ERROR OUTPUT TO DSK
        MOVEM   T1,TTYCHN+1
        PJOB    T1,             ;GET JOB NUMBER
        MOVE    T2,[POINT 3,T1,17] ;INIT BYTE PTR TO JOB #
        MOVE    T3,[POINT 6,LPTNAM+2] ;INIT BYTE PTR TO FILE NAME
        MOVEI   T4,6            ;INIT CNTR TO LENGTH OF NAME
TMPNAM: ILDB    T5,T2           ;GET BYTE FROM JOB #
        ADDI    T5,20           ;CONVERT TO SIXBIT
        IDPB    T5,T3           ;PUT BYTE IN FILE NAME
        SOJG    T4,TMPNAM       ;CONTINUE UNTIL NAME WRITTEN
        OPEN    LPT,TTYCHN      ;OPEN DSK CHANNEL
        JRST    DSKBSY          ;IF ERROR, GO TO DSKBSY
        LOOKUP  LPT,LPTNAM      ;IS THERE AN OLD TMP FILE?
        JFCL                    ;IGNORE ERROR
        RENAME  LPT,DELBLK      ;IF SO, DELETE IT
        JFCL                    ;IGNORE ERROR
        TRZ     FL,FLGOPN       ;MAKE SURE FILE IS OPENED
        PUSHJ   P,GETDAT        ;CALL GETDAT
        CLOSE   LPT,            ;CLOSE TMP FILE
        MOVE    T1,[SIXBIT /TTY/] ;RESUME ERROR OUTPUT TO TTY
        MOVEM   T1,TTYCHN+1
        MOVE    T1,ERRFLG       ;GET ERRFLG
        CAMN    T1,[-1]         ;NO ERRORS FOUND?
        JRST    FINISH          ;IF SO, GO TO FINISH
        OPEN    TMP,DSKCHN      ;OPEN DSK CHANNEL
        JRST    DSKBSY          ;IF ERROR, GO TO DSKBSY
        LOOKUP  TMP,LPTNAM      ;LOOKUP TMP FILE
        JRST    NOFILE          ;IF ERROR, GO TO NOFILE
        INPUT   TMP,CMDLST      ;READ FILE INTO SRTBUF
        STATZ   TMP,740000      ;ERROR WHILE READING FILE?
        JRST    RDERR           ;IF SO, GO TO RDERR
        STATZ   TMP,20000       ;END OF FILE DETECTED?
        SKIPA
        JRST    BUFOVR          ;IF SO, GO TO BUFOVR
        MOVE    T1,[POINT 7,SRTBUF] ;INIT BYTE PTR TO SRTBUF
        MOVEI   T2,LIST         ;INIT PTR TO LIST
        MOVEI   T3,3(T2)        ;CREATE LIST HDR
        HRLZM   T3,2(T2)
        MOVEI   T3,0            ;INIT ENTRY LENGTH CNTR
        MOVEI   T7,DATTBL       ;INIT DATTBL PTR
LOAD:   ILDB    T4,T1           ;GET BYTE FROM SRTBUF
        CAIN    T4,0            ;BUFFER EMPTY?
        JRST    EOF             ;IF SO, GO TO EOF
        ADDI    T3,1            ;INCREMENT ENTRY LENGTH
        CAIE    T4,12           ;BEGINNING OF RECORD?
        JRST    TIMTST          ;IF NOT, GO TO TIMTST
        MOVEM   T1,PTRSAV       ;ELSE, SAVE SRTBUF PTR
        MOVEM   T3,CTRSAV       ;AND ENTRY LENGTH
        JRST    LOAD            ;GO TO LOAD
BUFOVR: OUTSTR  [ASCIZ /BUFFER CAPACITY EXCEEDED - ABORTING
/]
        JRST    FINISH          ;GO TO FINISH
EOF:    MOVE    T4,CTRSAV       ;GET LENGTH OF LAST ENTRY
        ADDI    T4,2            ;ADD 2 FOR EXTRA CR/LF
        MOVEM   T4,2(T2)        ;WRITE IT TO LIST
        MOVE    T1,PTRSAV       ;ADD EXTRA CR/LF TO LAST ENTRY
        MOVEI   T4,15
        IDPB    T4,T1
        MOVEI   T4,12
        IDPB    T4,T1
        JRST    SORT            ;GO TO SORT
DATTST: CAIE    T4,"-"          ;DATE RECORD FOUND?
        JRST    LOAD            ;IF NOT, GO TO LOAD
        ILDB    T4,T1           ;LOAD NEXT BYTE
        ADDI    T3,1            ;INCREMENT ENTRY LENGTH
        CAIG    T4,"Z"          ;IS THIS CHAR ALPHA?
        CAIGE   T4,"A"
        JRST    LOAD            ;IF NOT, GO TO LOAD
        MOVE    T4,PTRSAV       ;GET BYTE PTR TO RECORD
        MOVEM   T4,0(T7)        ;WRITE IT TO DATTBL
        MOVE    T4,CTRSAV       ;GET ENTRY LENGTH
        MOVEM   T4,DATCTR       ;WRITE IT TO DATCTR
        SETOM   DATFLG          ;SET DATFLG
        JRST    LOAD            ;GO TO LOAD
TIMTST: CAIE    T4,":"          ;TIME RECORD FOUND?
        JRST    DATTST          ;IF NOT, GO TO DATTST
        MOVE    T4,DATFLG       ;GET DATFLG
        CAME    T4,[-1]         ;IS FLAG SET?
        JRST    LENGTH          ;IF NOT, GO TO LENGTH
        SETZM   DATFLG          ;RESET DATFLG
        MOVE    T4,CTRSAV       ;GET LENGTH OF DATE RECORD
        SUB     T4,DATCTR
        MOVEM   T4,1(T7)        ;WRITE IT TO DATTBL
        MOVE    T4,CTRSAV       ;GET LENGTH OF LAST ENTRY
        SUB     T4,1(T7)
        MOVEM   T4,2(T2)        ;WRITE IT TO LIST
        ADDI    T7,2            ;INCREMENT DATTBL PTR
        JRST    LENGTH+2        ;GO TO LENGTH+2
LENGTH: MOVE    T4,CTRSAV       ;GET LENGTH OF LAST ENTRY
        MOVEM   T4,2(T2)        ;WRITE IT TO LIST
        SUB     T3,CTRSAV       ;INIT LENGTH OF NEXT ENTRY
        MOVEI   T4,3(T2)        ;GET ADR OF NEXT ENTRY IN LIST
        CAIN    T4,ENDLST       ;IS LIST AREA FULL?
        JRST    LSTOVR          ;IF SO, GO TO LSTOVR
        HRLM    T4,2(T2)        ;LINK THIS ENTRY TO IT
        MOVEM   T4,T2           ;INCREMENT LIST PTR
        IBP     T1              ;SKIP TO UNIT NAME
        IBP     T1
        IBP     T1
        ADDI    T3,3            ;INCREMENT ENTRY LENGTH
        MOVEI   T5,4            ;INIT CNTR TO UNIT NAME LENGTH
        MOVE    T6,[POINT 7,UNISAV] ;INIT BYTE PTR TO UNISAV
UNIT:   ILDB    T4,T1           ;GET BYTE FROM SRTBUF
        IDPB    T4,T6           ;PUT BYTE IN UNISAV
        ADDI    T3,1            ;INCREMENT ENTRY LENGTH
        SOJG    T5,UNIT         ;CONTINUE UNTIL NAME IS SAVED
        MOVE    T4,UNISAV       ;GET UNIT NAME
        MOVEM   T4,0(T2)        ;WRITE IT TO LIST
        MOVE    T4,PTRSAV       ;GET BYTE PTR
        MOVEM   T4,1(T2)        ;WRITE IT TO LIST
        JRST    LOAD            ;GO TO LOAD
LSTOVR: OUTSTR  [ASCIZ /LIST AREA FULL - ABORTING
/]
        JRST    FINISH          ;GO TO FINISH
SORT:   SUBI    T2,LIST         ;GET # OF ENTRIES IN LIST
        IDIVI   T2,3
        MOVEM   T2,ENTCTR       ;AND SAVE # IN ENTCTR
SETUP:  MOVEI   T7,0            ;SET FLAG TO 0
        MOVEI   T1,LIST         ;INIT LAST TO LIST HDR
        HLRZ    T2,2(T1)        ;INIT CURRENT TO LINK(LAST)
        HLRZ    T3,2(T2)        ;INIT NEXT TO LINK(CURRENT)
        MOVE    T4,ENTCTR       ;INIT CNTR TO LIST LENGTH
        SUBI    T4,1            ;NUMBER OF PASSES IS 1 LESS
COMPAR: MOVE    T5,0(T2)        ;GET CURRENT DEVNAM
        CAMG    T5,0(T3)        ;IS IT LESS THAN THE NEXT?
        JRST    SHIFT           ;IF SO, GO TO SHIFT
        MOVEI   T7,1            ;ELSE, SET FLAG TO 1
        HLRZ    T5,2(T1)        ;SAVE LINK(LAST)
        HLRZ    T6,2(T2)        ;SET LINK(LAST) TO LINK(CURRENT)
        HRLM    T6,2(T1)
        HLRZ    T6,2(T3)        ;SET LINK(CURRENT) TO LINK(NEXT)
        HRLM    T6,2(T2)
        HRLM    T5,2(T3)        ;SET LINK(NEXT) TO LINK SAVED
        EXCH    T2,T3           ;SWAP NEXT AND CURRENT
SHIFT:  HLRZ    T1,2(T1)        ;SET LAST TO LINK(LAST)
        HLRZ    T2,2(T2)        ;SET CURRENT TO LINK(CURRENT)
        HLRZ    T3,2(T3)        ;SET NEXT TO LINK(NEXT)
        SOJG    T4,COMPAR       ;IF NOT END OF LIST, GO TO COMPAR
        CAIN    T7,0            ;IS FLAG = 0?
        JRST    TYPOUT          ;IF SO, GO TO TYPOUT
        JRST    SETUP           ;ELSE, GO TO SETUP
TYPOUT: OPEN    LPT,TTYCHN      ;OPEN TTY CHANNEL
        JRST    TTYBSY          ;IF ERROR, GO TO TTYBSY
        ENTER   LPT,LPTNAM      ;OPEN OUTPUT FILE
        JRST    TTYBSY          ;IF ERROR, GO TO TTYBSY
        MOVE    T1,ENTCTR       ;INIT CNTR TO # OF ENTRIES
        MOVEI   T2,LIST         ;INIT PTR TO LIST HDR
NEXT:   HLRZ    T2,2(T2)        ;GET NEXT ERROR ENTRY ON LIST
        HRRZ    T3,1(T2)        ;GET PTR TO ENTRY
        MOVEI   T5,DATTBL       ;GET PTR TO DATTBL
DATSRH: HRRZ    T6,0(T5)        ;GET PTR TO NEXT DATE
        CAIN    T6,0            ;NO DATES LEFT?
        JRST    DATOUT          ;IF SO, GO TO DATOUT
        CAMG    T3,T6           ;DOES ENTRY FOLLOW DATE?
        JRST    DATOUT          ;IF NOT, GO TO DATOUT
        ADDI    T5,2            ;INCREMENT DATTBL PTR
        JRST    DATSRH          ;GO TO DATSRH
DATOUT: SUBI    T5,2            ;BACKUP 1 DATTBL ENTRY
        MOVE    T3,0(T5)        ;GET BYTE PTR TO DATE RECORD
        MOVE    T4,1(T5)        ;GET BYTE COUNT FOR DATE RECORD
        CAMN    T3,DATSAV       ;HAS DATE ALREADY BEEN TYPED?
        JRST    ERROUT          ;IF SO, GO TO ERROUT
        MOVEM   T3,DATSAV       ;SAVE NEW DATE PTR
        PUSHJ   P,PUT           ;CALL PUT
ERROUT: MOVE    T3,1(T2)        ;GET BYTE PTR TO ERROR ENTRY
        HRRZ    T4,2(T2)        ;GET BYTE COUNT FOR ERROR ENTRY
        PUSHJ   P,PUT           ;CALL PUT
        SOJG    T1,NEXT         ;CONTINUE UNTIL NO ENTRIES LEFT
        JRST    FINISH          ;GO TO FINISH
PUT:    SOSG    OBUF+2          ;DECREMENT BYTE COUNT
        JRST    PUTBUF          ;IF BUFFER FULL, GIVE TO MONITOR
NXTCHR: ILDB    T5,T3           ;LOAD BYTE FROM ENTRY
        IDPB    T5,OBUF+1       ;PUT BYTE IN BUFFER
        SOJG    T4,PUT          ;CONTINUE UNTIL NO BYTES LEFT
        POPJ    P,              ;RETURN TO CALLING POINT
FINISH: CLOSE   LPT,            ;COMPLETE TTY OUTPUT
        MOVEI   T1,SRTBUF       ;GET PTR TO SRTBUF
BUFCLR: SETZM   0(T1)           ;CLEAR SRTBUF
        CAIE    T1,ENDBUF-1
        AOJA    T1,BUFCLR
        MOVEI   T1,LIST         ;GET PTR TO LIST
LSTCLR: SETZM   0(T1)           ;CLEAR LIST AREA
        CAIE    T1,ENDLST-1
        AOJA    T1,LSTCLR
        MOVEI   T1,DATTBL       ;GET PTR TO DATTBL
TABCLR: SETZM   0(T1)           ;CLEAR DATTBL
        CAIE    T1,ENDTBL-1
        AOJA    T1,TABCLR
        SETZM   ERRFLG          ;RESET ERRFLG
        SETZM   DATSAV          ;CLEAR DATSAV
        POPJ    P,              ;RETURN TO CALLING POINT
PUTBUF: OUTPUT  LPT,0           ;GIVE BUFFER TO MONITOR
        STATZ   LPT,740000      ;ERROR DURING OUTPUT?
        JRST    WTERR           ;IF SO, GO TO WTERR
        JRST    NXTCHR          ;ELSE, GO TO NXTCHR
DSKBSY: OUTSTR  [ASCIZ /UNABLE TO INIT DSK/]
        JRST    FINISH
TTYBSY: OUTSTR  [ASCIZ /UNABLE TO INIT TTY/]
        JRST    FINISH
NOFILE: OUTSTR  [ASCIZ /UNABLE TO LOCATE TMP FILE/]
        JRST    FINISH
RDERR:  OUTSTR  [ASCIZ /ERROR WHILE READING TMP FILE/]
        JRST    FINISH
WTERR:  OUTSTR  [ASCIZ /ERROR DURING TTY OUTPUT/]
        JRST    FINISH
TTYCHN: 0
        0
        OBUF,,0
DSKCHN: 17
        SIXBIT  /DSK/
        0
CMDLST: IOWD    6000,SRTBUF
        0
SRTBUF: BLOCK   6000
ENDBUF==.
LIST:   BLOCK   600
ENDLST==.
DATTBL: BLOCK   60
ENDTBL==.
DELBLK: BLOCK   4
ERRFLG: BLOCK   1
SRTFLG: BLOCK   1
DATFLG: BLOCK   1
UNISAV: BLOCK   1
DATSAV: BLOCK   1
PTRSAV: BLOCK   1
CTRSAV: BLOCK   1
DATCTR: BLOCK   1
ENTCTR: BLOCK   1
GETDAT: PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST TODAY
        TRNE FL,IDENT
        JRST MONNAM
        TRNN FL,NUMF
        JRST ILLCMD
        MOVE T6,T1
GOTMON: PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST ILLCMD
        TRNN FL,NUMF
        JRST GOTMON
        MOVE T5,T1
GOTDAY: PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST ILLCMD
        TRNN FL,NUMF
        JRST GOTDAY
        CAILE T1,^D1900
        SUBI T1,^D1900
        SUBI T1,^D64
        JUMPL T1,ILLCMD
        IMULI T1,^D12
        ADDI T1,-1(T6)
        IMULI T1,^D31
        ADDI T1,-1(T5)
        MOVEM T1,DESDAT#
        JRST SRCFIL

TODAY:  DATE T1,
        MOVEM T1,DESDAT
        JRST SRCFIL

MONNAM: MOVE T4,[-MONLEN,,MONTAB]
        PUSHJ P,CMDSRC
         JRST D
        MOVEI T6,1(T3)
        JRST GOTMON

MONTAB: <SIXBIT /JANUARY/>
        <SIXBIT /FEBRUARY/>
        <SIXBIT /MARCH/>
        <SIXBIT /APRIL/>
        <SIXBIT /MAY/>
        <SIXBIT /JUNE/>
        <SIXBIT /JULY/>
        <SIXBIT /AUGUST/>
        <SIXBIT /SEPTEMBER/>
        <SIXBIT /OCTOBER/>
        <SIXBIT /NOVEMBER/>
        <SIXBIT /DECEMBER/>
MONLEN==.-MONTAB

SRCFIL: MOVEI PTR,0
        MOVE T1,DESDAT
        MOVEM T1,DCNV   ;IN CASE CONVERSION NEEDED
        PUSHJ P,CNVNAM
        LOOKUP FIL,NAME
         SKIPA
        JRST RDFIL              ;GOT IT
        SETZM DCNV+1
        MOVEI T1,400000
        MOVEM T1,DCNV+2
        MOVEI T1,DCNV
        DATUUO T1,
         JFCL
        MOVE T1,DCNV    ;THIS IS FOR OLD STYLE DATES. ONE REC/WEEK
        SUBI T1,3
        IDIVI T1,7
        IMULI T1,7
        ADDI T1,3
        MOVEM T1,DCNV
        MOVSS DCNV+2    ;REVERSE CONVERSION
        MOVEI T1,DCNV
        DATUUO T1,
         JFCL
        MOVE T1,DCNV
        PUSHJ P,CNVNAM
        LOOKUP FIL,NAME
         JRST NOFIL
        JRST RDFIL

NAME:   3
        0
        0
        SIXBIT /DAT/
CNVNAM: IDIVI T1,^D31   ;CONVERT DATE IN T1 TO MMDDYY IN SIXBIT
        ADDI T2,1       ;DAYS
        PUSH P,T2
        IDIVI T1,^D12
        ADDI T1,^D64
        CAIL T1,^D100
        SUBI T1,^D100   ;SO 200X COMES OUT 0X
        EXCH T1,(P)     ;NOW YEAR ON STACK
        PUSH P,T1       ;NOW DAY THEN YEAR
        AOS T1,T2       ;MONTH
        MOVE T3,[POINT 6,NAME+2]
        PUSHJ P,SXDCV   ;CONVERT
        POP P,T1        ;DD
        PUSHJ P,SXDCV
        POP P,T1        ;YY
SXDCV:  IDIVI T1,^D10
        ADDI T1,'0'
        IDPB T1,T3
        ADDI T2,'0'
        IDPB T2,T3
        POPJ P,
NOFIL:  PUSHJ P,WTLF
        HRRZ T1,NAME+3
        JUMPN T1,NOLIC
        OUTSTR [ASCIZ /CAN NOT FIND DATA FILE/]
        POPJ P,

NOLIC:  OUTSTR [ASCIZ /NOT ENOUGH LICENSE/]
        POPJ P,

GETREC: AOBJN PTR,CONBUF
        INPUT FIL,COM
        STATZ FIL,20000
        POPJ P,
        MOVSI PTR,-8
        HRRI PTR,BUF
        JRST BUFRET

CONBUF: ADDI PTR,17
BUFRET: SKIPN (PTR)
        JRST GETREC
        AOS (P)
        POPJ P,
ELMMSK==2       ;MASK IN ELIMINATE LIST
ELMNAM==1       ;NAME IN ELIMINATE LIST

SETERR: PUSH P,RADIX
        MOVEI T1,^D8
        MOVEM T1,RADIX  ;RADIX MUST BE SET TO 8 FOR ERROR READIN
        PUSHJ P,SCAN
        TRNE FL,TERMF
        JRST RSTERR     ;NOTHING, RESET ALL ERROR FLAGS
NXTSER: TRNE FL,NUMF
        JRST    [SETZM ELMERR
                MOVEM T1,ONLERR ;SELECT SINGLE ERROR TYPE
                JRST LEVERR]
        TRNE FL,IDENT
        JRST ERRIDN     ;HARD OR A UNIT NAME
        CAIN C,"-"      ;SPECIAL, MIGHT BE -
        JRST ERRMIN     ;YES, DESELECTING SOME ERROR
ERRCER: POP P,RADIX
        JRST ILLCMD     ;ERROR

RSTERR: SETZM HRDFLG
        SETZM ONLNAM
        SETOM ONLERR
        SETZM ELMERR
        SETZM USESNS
        SETZM USEENV
        SETZM SKPERR
        SETZM SHTFRM
LEVER1: MOVEI T1,ELMLST
        PUSHJ P,SETFRE
LEVERR: TRNN FL,TERMF   ;IF NOT END OF LINE (FROM ERR<RET>)
        PUSHJ P,SCAN    ;SCAN FOR SOMETHING ELSE
        TRNN FL,TERMF   ;IF END OF LINE, DONE NOW
        JRST NXTSER     ;ELSE TRY FOR SOMETHING ELSE
        POP P,RADIX
        POPJ P,

ERRIDN: MOVE T4,[-ECMLEN,,ECMTAB]
        PUSHJ P,CMDSRC
         JRST ERRUNM    ;NOT FOUND, A UNIT NAME
        XCT ECMDSP(T3)
        JRST LEVERR

ERRUNM: MOVE T1,ACCUM
        MOVEM T1,ONLNAM ;SET NAME
        PUSHJ P,MAKMSK  ;MAKE A MASK
        MOVEM T2,ONLMSK#
        JRST LEVER1     ;AND RESET ELIMINATED UNITS
ERRMIN: PUSHJ P,SCAN
        TRNE FL,NUMF
        JRST    [SETOM ONLERR
                MOVEM T1,ELMERR ;ELIMINATE ERROR TYPE
                JRST LEVERR]
        TRNN FL,IDENT
        JRST ERRCER     ;MUST BE ERROR
        MOVE T4,[-ECMLEN,,ECMTAB]
        PUSHJ P,CMDSRC
         JRST ERRMUN    ;ASSUME - UNIT NAME
        XCT ECMMDS(T3)
        JRST LEVERR

ERRMUN: SETZM ONLNAM    ;REMOVE POSITIVE SELECTION
        MOVEI T4,ELMLST
ELMSRC: HRRZ T2,(T4)
        JUMPE T2,ELMNEW ;LOOK FOR END OF LIST
        MOVE T4,T2
        JRST ELMSRC

ELMNEW: PUSHJ P,GETCOR
        SETZM (T2)
        HRLM T2,ELMLST
        HRRM T2,(T4)    ;LINK IN NEW BLOCK
        MOVE T4,T2      ;SAVE LINK POINTER
                MOVE T1,ACCUM
        MOVEM T1,ELMNAM(T4)     ;SAVE NAME
        PUSHJ P,MAKMSK
        MOVEM T2,ELMMSK(T4)     ;AND MASK
        JRST LEVERR

MAKMSK: MOVEI T2,0
        MOVSI T3,770000
MAKMS1: TDNN T1,T3
        POPJ P, ;DONE
        IOR T2,T3
        LSH T3,-6
        JUMPN T3,MAKMS1
        POPJ P,

        DEFINE ECMDS
<       X HARD,<SETOM HRDFLG>,<SETZM HRDFLG>
        X SHORT,<SETOM SHTFRM>,<SETZM SHTFRM>
        X ALL,<JRST RSTERR>,<SETOM SKPERR>
        X ENVIRONMENTAL,<SETOM USEENV>,<SETZM USEENV>
        X SENSE,<SETOM USESNS>,<SETZM USESNS>
>

        DEFINE X (A,B,C)
<       <SIXBIT /A/>>

ECMTAB: ECMDS
ECMLEN==.-ECMTAB
        DEFINE X (A,B,C)
<       B>
ECMDSP: ECMDS           ;POSITIVE ACTION
        DEFINE X (A,B,C)
<       C>
ECMMDS: ECMDS           ;NEGATIVE ACTION
RDFIL:  SETZM SNREC#
        TRZ FL,FLGDAT   ;NO DATE OUTPUT YET
LOOP:   PUSHJ P,GETREC
         JRST FILDON
        SKIPL RECDEF(PTR)
        JRST LOOP       ;NOT FOR US
        HLRZ T1,RECDAT(PTR)
        CAME T1,DESDAT
        JRST LOOP
        SETOM SNREC     ;WE HAVE A RECORD FOR THAT DATE
        HRRZ T1,RECDAT(PTR)
        CAML T1,STPTIM
        JRST FILDON     ;RECORDS ARE IN SEQ, THIS IS TOO LATE
        HRRZ T1,RECDEF(PTR)
        CAIL T1,ERRTYP
        JRST LOOP       ;UNKNOWN TYPE
        SETOM SNREC
        XCT ERRTAB(T1)
        JRST LOOP

ERRTAB: PUSHJ P,UNIERR
        PUSHJ P,MTAERR
        PUSHJ P,SETRST  ;RESTART MESSAGE
        PUSHJ P,FTAERR  ;IBM TAPE ERROR (FT'S)
        PUSHJ P,UNISNS  ;SENSE DATE (BP)
        PUSHJ P,FTASNS  ;SENSE DATA (FT)
        PUSHJ P,PARERR  ;PARITY ERROR
        JFCL
        JFCL

ERRTYP==.-ERRTAB

FILDON: TRNE FL,FLGDSK
        JRST FILDN1     ;DO NOT RELEASE DISK
        RELEASE LPT,
        TRZ FL,FLGOPN
FILDN1: SKIPE CNTERR
        JRST CHKDAT     ;POSSIBLY CONTINUE
        SKIPN SNREC
        JRST NORCD      ;NO RECORDS FOR DATE
        TRNE FL,FLGDAT  ;IF DATE PRINTED, THEN AT LEAST ONE RECORD
        POPJ P,
        PUSHJ P,WTLF
        OUTSTR [ASCIZ /NONE/]
        SETOM   ERRFLG          ;TELL SRTTST NO ERRORS FOUND
        POPJ P,

NORCD:  PUSHJ P,WTLF
        OUTSTR [ASCIZ /NO RECORDS SEEN FOR DATE/]
        POPJ P,

CHKDAT: DATE T1,
        CAMG T1,DESDAT  ;FINISHED?
        POPJ P,         ;YES
        AOS DESDAT      ;TRY NEXT DAY
        TRZ FL,FLGDAT   ;SO NEXT DATE WILL PRINT
        JRST SRCFIL
UUO0:   0
        PUSH P,T1
        LDB T1,[POINT 9,40,8]
        CAILE T1,3
        JRST UUOERR
        JRST @UUOTAB(T1)

UUOERR: OUTSTR [ASCIZ /UUO ERROR/]
        EXIT

UUOTAB: JRST UUOERR
        JRST UUOCHR
        JRST UUOSTR
        JRST UUOCHI

UUOCHR: MOVE T1,@40
UUOCH1: PUSHJ P,OCHR
UUOXIT: POP P,T1
        JRST @UUO0

UUOCHI: HRRZ T1,40
        JRST UUOCH1

OCHR:   SOSG OBUF+2
        OUTPUT LPT,0
        IDPB T1,OBUF+1
        POPJ P,

UUOSTR: PUSH P,T2
        HRRZ T2,40
        HRLI T2,(POINT 7,0)
UUOST1: ILDB T1,T2
        JUMPE T1,UUOST2
        PUSHJ P,OCHR
        JRST UUOST1
UUOST2: POP P,T2
        JRST UUOXIT

OUTDEC: IDIV T2,RADIX
        HRLM T3,(P)
        SKIPE T2
        PUSHJ P,OUTDEC
        HLRZ T2,(P)
        OCHI "0"(T2)
        POPJ P,

OUTOCT: PUSH P,RADIX
        PUSH P,[10]
        POP P,RADIX
        PUSHJ P,OUTDEC
        POP P,RADIX
        POPJ P,

DEC4:   CAIL T2,^D1000
        JRST OUTDEC
        OCHI " "
DEC3:   CAIL T2,^D100
        JRST OUTDEC
        OCHI " "
DEC2:   CAIGE T2,^D10
        OCHI " "
        JRST OUTDEC
OUTSIX: MOVEI T2,0
        LSHC T2,6
        OCHI " "(T2)
        JUMPN T3,OUTSIX
        POPJ P,

OUTHLF: PUSH P,RADIX
        MOVEI T2,^D8
        MOVEM T2,RADIX
        HLRZ T2,T4
        JUMPE T2,NOLEFT
        PUSHJ P,OUTDEC
        OCHI ","
NOLEFT: HRRZ T2,T4
        PUSHJ P,OUTDEC
        POP P,RADIX
        OCHI " "
                POPJ P,

TIMOUT: MOVE T2,T4
        IDIVI T2,^D60
        IDIVI T2,^D60
        MOVE T4,T3      ;SAVE MIN
        PUSHJ P,OUTDEC
        OCHI ":"
        MOVE T2,T4
        CAIGE T2,^D10
        OCHI "0"
        JRST OUTDEC

OPNFIL: TROE FL,FLGOPN
        POPJ P,
        OPEN LPT,TTYCHN
        JRST LPTWAT
LPTGOT: ENTER LPT,LPTNAM
        JRST NOENT
        MOVEI T2,LPT
        DEVNAM T2,
         MOVEI T2,0
        HLRZS T2
        CAIN T2,'DSK'
        TRO FL,FLGDSK
        POPJ P,

LPTWAT: PUSHJ P,WTLF
        OUTSTR [ASCIZ /LPT BUSY - WAITING
/]
LPTWT1: MOVEI T2,^D10
        SLEEP T2,
        OPEN LPT,TTYCHN
        JRST LPTWT1
        JRST LPTGOT

NOENT:  PUSHJ P,WTLF
        OUTSTR [ASCIZ /CAN NOT ENTER OUTPUT FILE/]
        EXIT

LPTNAM: 3
        0
        0
        SIXBIT /TMP/

OUTDAT: TLZ FL,FERRST   ;TURN OFF RESTART WHEN PRINTING DATE
        PUSH P,T1
        OSTR [ASCIZ /
/]
        MOVE T1,DESDAT
        IDIVI T1,^D31
        ADDI T2,1
        PUSHJ P,OUTDEC
        IDIVI T1,^D12
        OSTR @MONASC(T2)
        MOVEI T2,^D64(T1)
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
/]
        POP P,T1
        POPJ P,

        DEFINE XMON (A)
<IRP A,<[ASCIZ /-A-/]>>

MONASC: XMON <JAN,FEB,MAR,APR,MAY,JUNE,JULY,AUG,SEPT,OCT,NOV,DEC>
;FLAG BITS

FERRST==1       ;IN LEFT HALF, RESTART DETECTED
FERHRD==2       ;HARD ERROR
FERDSK==4       ;ERROR IS IN DISK

;INFORMATION IN A RECORD

RECRUN==2       ;RUNTIME FOR RECORDER (IN TRU)
RECNAM==3       ;UNIT NAME
RECID==4        ;UNIT ID
RECHRD==5       ;NUMBER OF HARD ERRORS
RECSOF==6       ;NUMBER OF SSOFT ERRORS
RECHCI==7       ;HARD CONI
RECSCI==10      ;SOFT CONI
RECHBN==11      ;LOGICAL BLOCK NUMBER
RECSDI==12      ;SOFT DATAI
RECHDI==13      ;HARD DATAI
RECRET==14      ;RETRY COUNT

;INFORMATION IN CORE LIST

CORNAM==1       ;NAME
RECSBN==15      ;SOFT LOGICAL BLOCK NUMBER
CORID==2        ;ID
CORSOF==3       ;SOFT DATA COUNT
CORHRD==4       ;HARDATA COUNT

;ALSO USED FOR MAGTAPE

CORCNT==2       ;NUMBER OF ERRORS
CORHNG==2       ;HUNG COUNT FOR FTA
CORWRT==3       ;NUMBER OF REWRITES
CORWOK==4       ;NUMBER OF RECORDS CORRECTLY REWRITTEN
CORWFL==5       ;NUMBER OF RECORDS ON WHICH REWRITE FAILED
CORROK==6       ;NUMBER OF RECORDS ON WHICH REREAD WORKED
CORRFL==7       ;NUMBER OF RECORDS ON WHICH REREAD FAILED

CORSIZ==10      ;SIZE OF CORE BLOCK

;MTA RECORDS

REMCNI==5       ;CONI
REMCNT==4       ;ERROR COUNT
REMWRT==6       ;NUMBER OF REWRITES TRIED
        REMWOK==10      ;NUMBER OF REWRITES SUCCESSFUL
REMWFL==7       ;NUMBER OF REWRITES WHICH FAILED
REMROK==11      ;NUMBER OF REREADS SUCCEDING
REMRFL==12      ;NUMBER OF REREADS FAILING

;FTA RECORDS

REFROK==4       ;READ RECOVERED
REFRFL==5       ;READ UNRECOVERED
REFWOK==6       ;WRITE RECOVERED
REFWFL==7       ;WRITE UNRECOVERED
REFSCI==10      ;SOFT CONI
REFHCI==11      ;HARD CONI
REFHNG==12      ;HUNG COUNT
REFHFC==13      ;HUNG FUNCTION
REFCIH==14      ;HUNG CONI
SETRST: TLOA FL,FERRST  ;FLAG A RESTART
SETRS1: TLZ FL,FERRST   ;RESTART OFF (FIRST TIME
        HRRZ T1,JOBFF
        MOVEI T1,UNILST
        JRST SETFRE     ;PUT ON FREE CORE LIST

FNDLNK: MOVEI T1,UNILST ;FIND UNIT IN UNIT LIST
FNDLN1: HRRZ T2,(T1)
        JUMPE T2,NEWLNK ;REACHED END, NEED A NEW ONE
        MOVE T1,T2
        MOVE T2,CORNAM(T1)
        CAMN T2,RECNAM(PTR)
        POPJ P,         ;FOUND IT
        JRST FNDLN1     ;TRY AGAIN

NEWLNK: PUSHJ P,GETCOR  ;GET SOME CORE SPACE
        SETZM (T2)      ;ZERO LINK
        HRRM T2,(T1)    ;LINK IN
        HRLM T2,UNILST  ;RECORD END
        MOVE T1,T2
        MOVE T2,RECNAM(PTR)
        MOVEM T2,CORNAM(T1)
XXZ==CORNAM+1
        REPEAT CORSIZ-CORNAM-1,<SETZM XXZ(T1)
XXZ==XXZ+1>             ;CLEAR EXTRA WORDS
        POPJ P,

GETCOR: HRRZ T2,FRECOR
        JUMPN T2,[HRRZ T2,(T2)  ;FREE CORE, GET LINK
                EXCH T2,FRECOR  ;AND REMOVE FIRST EL
                POPJ P,]
        MOVE T2,JOBFF
        ADDI T2,CORSIZ
        CAMG T2,JOBREL
        JRST COROK
        IORI T2,1777
        CORE T2,
         JRST NOCOR
COROK:  MOVEI T2,CORSIZ
        EXCH T2,JOBFF
        ADDM T2,JOBFF
        POPJ P,

NOCOR:  PUSHJ P,WTLF
        OUTSTR [ASCIZ /NOT ENOUGH CORE AVAILABLE/]
        EXIT

SETFRE: SKIPN T2,(T1)   ;ANY CORE IN USE?
        POPJ P,         ;NO
        MOVSS T2        ;GET POINTER TO END IN R.H. FOR INDEX
        HRRZ T3,FRECOR
        HRRM T3,(T2)    ;LINK CURRENT FREE ON END
        HLRZM T2,FRECOR ;SET START OF LIST
        SETZM (T1)      ;ZERO ORIGINAL LIST
        POPJ P,
;COMMON UNIT CODE. FIRST FIND OUT IF UNIT TO BE IGNORED

COMUNI: SKIPN ONLNAM    ;ONLY ONE UNIT OR TYPE?
        JRST NOTONL     ;NO
        MOVE T2,RECNAM(PTR)
        AND T2,ONLMSK
        CAMN T2,ONLNAM
        JRST ONLOK      ;ONLY UNIT OK
        TLNN FL,FERDSK
        POPJ P,         ;ONLY DISKS HAVE ID'S
        MOVE T2,RECID(PTR)
        AND T2,ONLMSK
        CAMN T2,ONLNAM
        JRST ONLOK
        POPJ P,         ;NOT THE ONE WE WANT

NOTONL: MOVEI T2,ELMLST ;SEE IF UNIT TO BE IGNORED
ELMCHK: HRRZ T2,(T2)
        JUMPE T2,ONLOK  ;OUT OF UNITS TO IGNORE
        MOVE T3,RECNAM(PTR)
        AND T3,ELMMSK(T2)
        CAMN T3,ELMNAM(T2)
        POPJ P,         ;SKIP IT
        TLNN FL,FERDSK
        JRST ELMCHK     ;CHECK NEXT
        MOVE T3,RECID(PTR)      ;FOR DISK CHECK ID ALSO
        AND T3,ELMMSK(T2)
        CAMN T3,ELMNAM(T2)
        POPJ P,
        JRST ELMCHK

ONLOK:  AOS (P)         ;AT LEAST ONE SKIP RETURN
        TLZ FL,FERHRD   ;RESET HARD ERROR FLAG
        PUSHJ P,FNDLNK  ;GET A CORE BLOCK FOR UNIT
        HRRZ T2,RECDAT(PTR)
        CAML T2,STRTIM
        AOS (P)         ;A GOOD RECORD
        POPJ P,         ;SKIP TO HERE IF TOO EARLY

COMOP1: PUSHJ P,OPNFIL  ;OPEN OUTPUT FILE IF NEEDED
        TRON FL,FLGDAT
        PUSHJ P,OUTDAT  ;OUTPUT DATE IF NEEDED
        OSTR [ASCIZ /
/]
        TLZE FL,FERRST
        OSTR [ASCIZ /

RESTART

/]
        HRRZ T4,RECDAT(PTR)
        PUSHJ P,TIMOUT
        OCHI 11         ;TAB
        POPJ P,

COMOPN: PUSHJ P,COMOP1
        MOVE T3,RECNAM(PTR)
        JRST OUTSIX
CORPRM==2       ;STORE PARITY COUNT HERE IN CORE BLOCK
CORFND==3       ;COUNT OF NUMBER FOUND HERE

PRMCNT==2       ;NUMBER OF INTERUPTS
PRMFND==3       ;NUMBER FOUND
PRMADR==4       ;ADDRESS
PRMWRD==5       ;WORD
PRMPC==6        ;PC

PARERR: MOVSI T1,'APR'
        EXCH T1,RECNAM(PTR)
        MOVEM T1,PARIDS#        ;FAKE NAME IN RECNAM FOR COMMON RTNS
        TLZ FL,FERDSK
        SKIPN SKPERR
        PUSHJ P,COMUNI
         POPJ P,
         JRST PARUPD    ;JUST UPDATE
        MOVE T2,PARIDS
        MOVEM T2,RECNAM(PTR)
        MOVE T2,PRMCNT(PTR)
        SUB T2,CORPRM(T1)
        JUMPE T2,PARUP1 ;JUST UPDATE IF UNCHANGED
        JUMPG T2,PARER1 ;GO PRINT
PARRST: PUSHJ P,SETRST
        MOVSI T2,'APR'
        MOVEM T2,RECNAM(PTR)    ;AGAIN
        PUSHJ P,FNDLNK
        MOVE T2,PARIDS
        MOVEM T2,RECNAM(PTR)
PARER1: PUSHJ P,COMOP1
        MOVE T2,PRMCNT(PTR)
        SUB T2,CORPRM(T1)
        SKIPE SHTFRM
        JRST PARSHT
        OSTR [ASCIZ /PARITY ERRORS /]
        PUSHJ P,OUTDEC
        MOVE T2,PRMFND(PTR)
        SUB T2,CORFND(T1)
        JUMPLE T2,NOPRF ;SAY NONE FOUND
        OSTR [ASCIZ /
        FOUND /]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
        LAST ADDRESS /]
        MOVE T2,PRMADR(PTR)
        PUSHJ P,OUTOCT
        OSTR [ASCIZ /
        CONTENTS /]
        MOVE T4,PRMWRD(PTR)
        PUSHJ P,OUTHLF
        MOVE T4,PRMPC(PTR)
        OSTR [ASCIZ /
        PC /]
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /
/]
        JRST PARUP1

NOPRF:  OSTR [ASCIZ /
        NONE FOUND
/]
        JRST PARUP1

PARUPD: MOVE T1,PARIDS
        MOVEM T2,RECNAM(PTR)
PARUP1: MOVE T2,PRMCNT(PTR)
        MOVEM T2,CORPRM(T1)
        MOVE T2,PRMFND(PTR)
        MOVEM T2,CORFND(T1)
        POPJ P,

PARSHT: OSTR [ASCIZ /PAR. ERR. /]
        PUSHJ P,OUTDEC
        MOVE T2,PRMFND(PTR)
        SUB T2,CORFND(T1)
        OSTR [ASCIZ / FND /]
        PUSHJ P,OUTDEC
        MOVE T2,PRMADR(PTR)
        OSTR [ASCIZ / LOC /]
        PUSHJ P,OUTOCT
        MOVE T4,PRMWRD(PTR)
        OSTR [ASCIZ / /]
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /
/]
        JRST PARUP1
UNIERR: TLO FL,FERDSK
        SETZM PRVERR#   ;NO SENSE DATA NEEDED IF PRINTING
        SKIPN SKPERR
        PUSHJ P,COMUNI
         POPJ P,        ;DO NOT KEEP UNIT
         JRST UPDUNI    ;TOO EARLY
        MOVE T2,CORID(T1)
        JUMPE T2,CHKERR ;MUST BE A NEW ENTRY
        CAME T2,RECID(PTR)
FRCRST: JRST    [PUSHJ P,SETRST ;NEED TO FORCE RESTART
                PUSHJ P,FNDLNK  ;REFIND UNIT
                JRST CHKERR]    ;UNIT CORE BLOCK IS NOW NEW
CHKERR: HRRZ T2,RECHRD(PTR)
        HRRZ T3,CORHRD(T1)
        SUB T2,T3
        JUMPL T2,FRCRST ;CHECK FOR DECREASED ERROR COUNT
        HLRZ T3,RECHRD(PTR)
        HLRZ T4,CORHRD(T1)
        SUB T3,T4
        JUMPL T3,FRCRST
        ADD T2,T3       ;KEEP A TOTAL OF ERRORS
        SKIPE T2
        TLO FL,FERHRD   ;HARD ERROR
        HRRZ T3,RECSOF(PTR)
        HRRZ T4,CORSOF(T1)
        SUB T3,T4
        JUMPL T3,FRCRST
        ADD T2,T3
        HLRZ T3,RECSOF(PTR)
        HLRZ T4,CORSOF(T1)
        SUB T3,T4
        JUMPL T3,FRCRST
        ADD T2,T3
        JUMPE T2,UPDUNI ;NO ERRORS, JUST PASS OVER IT
        SKIPE HRDFLG
        TLNE FL,FERHRD
        SKIPA
        JRST UPDUNI     ;IF ONLY WANT HARD ERRORS AND NOT HARD IGNORE
        SETOM PRVERR    ;THERE WAS AN ERROR PRINTED
        PUSHJ P,COMOPN  ;OPEN OUTPUT
        OCHI "("        ;UNIT NAME ALREADY PRINTED, PRINT ID
        MOVE T3,RECID(PTR)
        PUSHJ P,OUTSIX
        OSTR [ASCIZ /)  /]
        MOVE T4,RECHRD(PTR)
        SUB T4,CORHRD(T1)
        HLRZ T2,T4
        JUMPE T2,NOHDV
        OSTR [ASCIZ /HDEV /]
        PUSHJ P,OUTDEC
        OCHI " "
NOHDV:  HRRZ T2,T4
        JUMPE T2,NOHDAT
        OSTR [ASCIZ /HDAT /]
        PUSHJ P,OUTDEC
        OCHI " "
NOHDAT: MOVE T4,RECSOF(PTR)
        SUB T4,CORSOF(T1)
        HLRZ T2,T4
        JUMPE T2,NOSDV
        OSTR [ASCIZ /SDEV /]
        PUSHJ P,OUTDEC
        OCHI " "
NOSDV:  HRRZ T2,T4
        JUMPE T2,NOSDAT
        OSTR [ASCIZ /SDAT /]
        PUSHJ P,OUTDEC
NOSDAT: OSTR [ASCIZ /
        /]
        SKIPN SHTFRM
        JRST UNILNG     ;PRINT LONG FORM
        TLNN FL,FERHRD
        JRST NOUHER     ;NOT HARD ERROR
        OSTR [ASCIZ /HCNI /]
        MOVE T4,RECHCI(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /HDATAI /]
                MOVE T4,RECHDI(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /LBN /]
        MOVE T2,RECHBN(PTR)
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
        /]
NOUHER: OSTR [ASCIZ /SCNI /]
        MOVE T4,RECSCI(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /SDATAI /]
        MOVE T4,RECSDI(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /RET /]
        HRRZ T2,RECRET(PTR)
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / SLBN /]
        MOVE T2,RECSBN(PTR)
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
/]
UPDUNI: MOVE T2,RECHRD(PTR)
                MOVEM T2,CORHRD(T1)
        MOVE T2,RECSOF(PTR)
        MOVEM T2,CORSOF(T1)
        MOVE T2,RECID(PTR)
        MOVEM T2,CORID(T1)      ;IN CASE THIS IS THE FIRST TIME
        POPJ P,
UNILNG: MOVSI TYP,-TYPLEN       ;FIND THE UNIT TYPE
        HLRZ T2,RECNAM(PTR)
        TRZ T2,77               ;KEEP FIRST TWO WORDS OF UNIT NAME
        CAME T2,TYPTAB(TYP)
        AOBJN TYP,.-1
        JUMPGE TYP,BANUNT
        TLNN FL,FERHRD          ;IS YTHERE A HARD ERROR?
        JRST NOUHLN             ;NO, JUST SOFT
        OSTR [ASCIZ /HARD ERROR DATA
/]
        MOVE T4,TYPCNI(TYP)     ;A POINTER TO THE NAMES OF CONI BITS
        MOVE T2,RECHCI(PTR)
        PUSHJ P,OUTBTS
        MOVE T2,RECHDI(PTR)
        PUSHJ P,@TYPDTI(TYP)
        OSTR [ASCIZ /
/]
        MOVE T2,RECHBN(PTR)
        PUSHJ P,@TYPBLK(TYP)
        OCHI 11
NOUHLN: OSTR [ASCIZ /SOFT ERROR DATA
/]
        MOVE T4,TYPCNI(TYP)
        MOVE T2,RECSCI(PTR)
        PUSHJ P,OUTBTS
        MOVE T2,RECSDI(PTR)
        PUSHJ P,@TYPDTI(TYP)
        MOVE T2,RECSBN(PTR)
        PUSHJ P,@TYPBLK(TYP)
        OSTR [ASCIZ /   NUMBER OF RETRIES /]
        HRRZ T2,RECRET(PTR)
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
/]
        JRST UPDUNI
;HERE IS THE DISPATCH INFORMATION FOR THE UNITS

TYPTAB: 'FH '
        'DP '
        'BP '
TYPLEN==.-TYPTAB

BANUNT: OSTR [ASCIZ /
CAN NOT FIND UNIT TYPE
/]
        JRST UPDUNI

TYPCNI: EXP FHCNI,DPCNI,BPCNI
TYPDTI: EXP FHDTI,DPDTI,BPDTI
TYPBLK: EXP FHBLK,DPBLK,BPBLK

        DEFINE AQ (A)
<[ASCIZ ^A^]>

FHCNI:  REPEAT ^D18,<0>
        AQ <CHANNEL TERMINATE ERROR>
        AQ <SEARCH ERROR>
        AQ <UNIT ERROR>
        AQ <TRACK ERROR>
        AQ <NOT READY>
        AQ <POWER FAILURE>
        AQ <DEVICE PAIRTY ERROR>
        AQ <DATA PARITY ERROR>
        AQ <CONTROL WORD PARITY ERROR>
        AQ <NO SUCH MEMORY>
        AQ <ILLEGAL WRITE>
        AQ <DATA LATE>
        REPEAT 6,<0>

DPCNI:  REPEAT ^D14,<0>
        AQ <CONTROL WORD PARITY ERROR>
        AQ <SECTOR PARITY ERROR>
        AQ <CHANNEL DATA PARITY ERROR>
        AQ <DISK WORD PARITY ERROR>
        AQ <CHANNEL TERMINATE ERROR>
        AQ <END OF CYLINDER>
        AQ <POWER FAILURE>
        AQ <SEARCH ERROR>
        AQ <DATA LATE>
        AQ <NO SUCH MEMORY>
        0
        AQ <NOT READY>
        AQ <ILLEGAL WRITE>
        AQ <ILLEGAL DATAO>
        AQ <SECTOR ADDRESS ERROR>
        AQ <SURFACE ADDRESS ERROR>
        REPEAT 6,<0>
BPCNI:  REPEAT ^D9,<0>
        AQ <WRITE PROTECT ERROR>
        AQ <SELECT ERROR>
        AQ <CONTROL ERROR>
        AQ <LENGTH ERROR>
        AQ <EQUIPMENT CHECK>
        AQ <PERMANENT EQUIPMENT CHECK>
        AQ <UNIT EXCEPTION>
        AQ <ATTENTION FLAG>
        AQ <BUSY>
        AQ <COUNT ERROR>
        AQ <UNRECOVERABLE DATA CHECK>
        AQ <RECOVERABLE DATA CHECK>
        AQ <INVALID TRACK FORMAT>
        AQ <SEARCH ERROR>
        AQ <CORE PARITY ERROR>
        AQ <NO SUCH MEMORY>
        AQ <DATA LATE>
        AQ <UNKNOWN ERROR>
        AQ <PROTECTION FAILURE>
        AQ <BUS IN PARITY ERROR>
        AQ <BUS OUT PARITY ERROR>
        AQ <COMMAND REJECT>
        REPEAT 5,<0>

OUTBTS: JFFO T2,.+2     ;LOOK FOR A BIT
        POPJ P,         ;DONE
        LSH T2,1(T3)    ;SHIF OFF END
        ADD T4,T3       ;INCREMENT POINTER
        SKIPN (T4)
        AOJA T4,OUTBTS  ;IGNORE IF 0
        OSTR [ASCIZ /     /]
        OSTR @(T4)      ;TELL WHAT BIT MEANS
        OSTR [ASCIZ /
/]
        AOJA T4,OUTBTS

DPBLK:  IDIVI T2,^D200  ;GET CYLINER IN T2
        PUSH P,T3
        OSTR [ASCIZ /     CYLINDER /]
        PUSHJ P,DEC4
        OSTR [ASCIZ / HEAD /]
        POP P,T2
        IDIVI T2,^D10
        PUSH P,T3
        PUSHJ P,DEC2
        OSTR [ASCIZ / RECORD /]
        POP P,T3
        PUSHJ P,DEC2
        OSTR [ASCIZ /
/]
        POPJ P,
DPDTI:  PUSH P,T2
        OSTR [ASCIZ /     DRIVE /]
        LDB T2,[POINT 3,(P),2]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / CYLINER /]
        LDB T2,[POINT 8,(P),10]
        MOVEI T3,1B23
        TDNE T3,(P)
        TRO T2,400
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / SECTOR COUNTER /]
        LDB T2,[POINT 5,(P),22]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
/]
        MOVEI T4,DPDTTB
        POP P,T2
        JRST OUTBTS

DPDTTB: REPEAT ^D11,<0>
        AQ <POSITION FAILURE>
        AQ <HEADS IN POSITION>
        AQ <DISK ON LINE>
        AQ <FILE UNSAFE>
        AQ <NO SUCH DRIVE>
        AQ <READ ONLY>
        AQ <WRITE HEADER LOCKOUT>
        REPEAT ^D9,<0>
        AQ <ATTN 0>
        AQ <ATTN 1>
        AQ <ATTN 2>
        AQ <ATTN 3>
        AQ <ATTN 4>
        AQ <ATTN 5>
        AQ <ATTN 6>
        AQ <ATTN 7>
        0

FHBLK:  IDIVI T2,^D40
        PUSH P,T3
        OSTR [ASCIZ /     TRACK /]
        PUSHJ P,DEC4
        POP P,T2
        LSH T2,1
        OSTR [ASCIZ / SECTOR /]
        PUSHJ P,DEC2
        OSTR [ASCIZ /
/]
        POPJ P,
FHDTI:  PUSH P,T2
        LDB T2,[POINT 6,(P),23]
        OSTR [ASCIZ /     PARITY REGISTER /]
                PUSHJ P,OUTOCT
        OSTR [ASCIZ / UNIT /]
        LDB T2,[POINT 2,(P),27]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / SECTOR /]
        LDB T2,[POINT 4,(P),31]
        SKIPE T2
        PUSHJ P,OUTDEC
        POP P,T2
        ANDI T2,17
        PUSHJ P,OUTDEC
        OSTR [ASCIZ /
/]
        POPJ P,

BPBPT==^D<18*19-2>      ;BLOCKS PER TRACK ON 230

BPBLK:  IDIVI T2,BPBPT
        PUSH P,T3
        OSTR [ASCIZ /     CYLINDER /]
        PUSHJ P,DEC4
        POP P,T2
        IDIVI T2,^D18
        PUSH P,T3
        OSTR [ASCIZ / HEAD /]
        PUSHJ P,DEC2
        OSTR [ASCIZ / RECORD /]
        POP P,T2
        ADDI T2,1
        PUSHJ P,DEC2
        MOVE T2,BPDTSV
        TRNE T2,1
        JRST BPBLK1
        PUSH P,T2
        OSTR [ASCIZ / CONTROL /]
        LDB T2,[POINT 2,(P),1]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / DRIVE /]
        LDB T2,[POINT 6,(P),7]
        MOVSI T3,-10
DRVLPF: CAMN T2,[EXP 70,61,52,43,34,25,16,7](T3)
        JRST DRVLP1
        AOBJN T3,DRVLPF
        OSTR [ASCIZ /UNKNOWN/]
        SKIPA
DRVLP1: OCHI "A"(T3)
        POP P,T2
BPBLK1: OSTR [ASCIZ /
/]
        POPJ P,
BPDTI:  MOVEM T2,BPDTSV#        ;SAVE DATAI
        CAMN T2,[-1]
        JRST    [OSTR [ASCIZ /  NO SENSE DATA
/]
                POPJ P,]
        TRNE T2,1
        JRST MEMSNS     ;MEMORY SENSE DATA
        PUSH P,T2
        LDB T2,[POINT 4,(P),27]
        JRST @[EXP FMT0,FMT1,FMT2,FMT3,FMT4,FMT5,FMT6
                REPEAT 11,<FMTU>](T2)

FMTU:   OSTR [ASCIZ /     UNKNOWN MESSAGE/]
FMTC:   OSTR [ASCIZ /
/]
        POP P,T2
        POPJ P,

FMT0:   OSTR [ASCIZ /     PROGRAM ERROR OR SYSTEM CHECK
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT0T(T2)
        JRST FMTC

FMT0T:  AQ <NO MESSAGE>
        AQ <INVALID COMMAND>
        AQ <INVALID SEQUENCE>
        AQ <CCW COUNT LESS THAN REQUIRED>
        AQ <DATA VALUE NOT AS REQUIRED>
        AQ <DIAGNOSTIC WRITE NOT PERMITTED>
        AQ <CHANNEL DISCONTINUED RETRY>
        AQ <CHANNEL RETURNED WITH INCORRECT RETRY CCW>
        AQ <23FD - NOT READY>
        AQ <23FD - HARD SEEK CHECK>
        AQ <23FD HARD READ CHECK>
        AQ <IMPROPER DEFFECTIVE TRACK POINTER>
        AQ <SERDES MALFUNCTION - NO ST 4'S>
        AQ <DIAGNOSTIC WRITE CONTROL CODE MISMATCH>
        AQ <CONTROL STORAGE BUSY WITH MICRODIAGNOSTIC>
        AQ <RETRY BYTE COUNT/SECTOR VALUE INCORRECT>
FMT1:   OSTR [ASCIZ /     DISK DRIVE EQUIPMENT CHECK
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT1T(T2)
        JRST FMTC

FMT1T:  AQ <NO MESSAGE>
        AQ <SET TARGET ERROR>
        AQ <NOT USED>
        AQ <NO WRITE GATE AT DRIVE>
        AQ <NO WRITE CURRENT SENSE>
        AQ <NOT USED>
        AQ <TRANSMIT CYLINDER ERROR>
        AQ <TRANSMIT HEAD ERROR>
        AQ <TRANSMIT DIFFERENCE ERROR>
        AQ <FILE STATUS NOT AS EXPECTED>
        AQ <SEEK ERROR>
        AQ <SEEK INCOMPLETE ON RETRY>
        AQ <NO INTERRUPT FROM DRIVE>
        REPEAT 3,<AQ <NOT USED>>

FMT2:   OSTR [ASCIZ /     STORAGE CONTROL EQUIPMENT CHECK
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT2T(T2)
        JRST FMTC

FMT2T:  AQ <NO MESSAGE>
        AQ <ECC P1 OR P3 COMPARE FAILURE>
        AQ <ECC P2 COMPARE FAILURE>
        REPEAT 15,<AQ <NOT USED>>
FMT3:   OSTR [ASCIZ /     STORAGE CONTROL - CONTROL CHECK
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT3T(T2)
        JRST FMTC

FMT3T:  AQ <NO MESSAGE>
        REPEAT 17,<AQ <NOT USED>>

FMT4:   OSTR [ASCIZ /     DATA CHECK WITHOUT DISPLACEMENT
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT4T(T2)
        JRST FMTC

FMT4T:  AQ <HA FIELD ECC UNCORRECTABLE>
        AQ <COUNT FIELD ECC UNCORRECTABLE>
        AQ <KEY FIELD ECC UNCORRECTABLE>
        AQ <DATA FIELD ECC UNCORRECTABLE>
        AQ <HA FIELD NO SYNC BYTE FOUND>
        AQ <COUNT FIELD NO SYNC BYTE FOUND>
        AQ <KEY FIELD NO SYNC BYTE FOUND>
        AQ <DATA FIELD NO SYNC BYTE FOUND>
        AQ <NOT USED>
        AQ <AM DETECTION FAILURE ON RETRY>
        REPEAT 6,<AQ <NOT USED>>

FMT5:   OSTR [ASCIZ /     DATA CHECK WITH DISPLACEMENT
          /]
        LDB T2,[POINT 4,(P),31]
        OSTR @FMT5T(T2)
        JRST FMTC
FMT5T:  AQ <HA FIELD CORRECTABLE>
        AQ <COUNT FIELD CORRECTABLE>
        AQ <KEY FIELD CORRECTABLE>
        AQ <DATA FIELD CORRECTABLE>
        REPEAT 14,<AQ <NOT USED>>

FMT6:   OSTR [ASCIZ %     USAGE/ERROR STATISTICS%]
        JRST FMTC

MEMSNS: OSTR [ASCIZ /     MEMORY ERROR LOCATION /]
        PUSH P,T2
        LDB T2,[POINT 22,(P),24]
        PUSHJ P,OUTOCT
        OSTR [ASCIZ / BIT /]
        LDB T2,[POINT 6,(P),30]
        PUSHJ P,OUTDEC
        JRST FMTC
MTAERR: TLZ FL,FERDSK
        SKIPN SKPERR
        PUSHJ P,COMUNI
         POPJ P,        ;NOT INTERESTED IN THIS UNIT
         JRST MTAUPD    ;JUST UPDATE INFORMATION
        MOVE T2,REMCNT(PTR)     ;COUNT FROM POINTER
        SUB T2,CORCNT(T1)
        JUMPE T2,CPOPJ  ;NO INFORMATION
        JUMPG T2,MTAOK1         ;OK
MTARST: JRST    [PUSHJ P,SETRST
                PUSHJ P,FNDLNK
                JRST MTAOK1]
MTAOK1: MOVE T2,REMWFL(PTR)
        SUB T2,CORWFL(T1)
        JUMPL T2,MTARST
        MOVE T3,REMRFL(PTR)
        SUB T3,CORRFL(T1)
        JUMPL T3,MTARST
        ADD T2,T3
        SKIPE T2
        TLO FL,FERHRD   ;CALL IT A HARD ERROR
        MOVE T3,REMWRT(PTR)
        SUB T3,CORWRT(T1)
        JUMPL T3,MTARST
        MOVE T3,REMWOK(PTR)
        SUB T3,CORWOK(T1)
        JUMPL T3,MTARST
        MOVE T3,REMROK(PTR)
        SUB T3,CORROK(T1)
        JUMPL T3,MTARST
        SKIPE HRDFLG
        TLNE FL,FERHRD
        SKIPA
        JRST MTAUPD     ;WANT ONLY HARD ERRORS
        PUSHJ P,COMOPN  ;OPEN OUTPUT AND GENERATE NAME
        MOVE T2,REMCNT(PTR)
        SUB T2,CORCNT(T1)
        SKIPN SHTFRM
        JRST MTALNG
        OSTR [ASCIZ / ERRS /]
        PUSHJ P,OUTDEC
        MOVE T2,REMWRT(PTR)
        SUB T2,CORWRT(T1)
        JUMPE T2,MTR1
        OSTR [ASCIZ / WRT /]
        PUSHJ P,OUTDEC
MTR1:   MOVE T2,REMWOK(PTR)
        SUB T2,CORWOK(T1)
        JUMPE T2,MTR2
        OSTR [ASCIZ / WRT OK /]
        PUSHJ P,OUTDEC
MTR2:   MOVE T2,REMWFL(PTR)
        SUB T2,CORWFL(T1)
        JUMPE T2,MTR3
        OSTR [ASCIZ / WRT FL /]
        PUSHJ P,OUTDEC
MTR3:   MOVE T2,REMROK(PTR)
        SUB T2,CORROK(T1)
        JUMPE T2,MTR4
        OSTR [ASCIZ / RD OK /]
        PUSHJ P,OUTDEC
MTR4:   MOVE T2,REMRFL(PTR)
        SUB T2,CORRFL(T1)
        JUMPE T2,MTR5
        OSTR [ASCIZ / RD FL /]
        PUSHJ P,OUTDEC
MTR5:   OSTR [ASCIZ /
        CONI /]
        MOVE T4,REMCNI(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ /
/]
MTAUPD: MOVE T2,REMCNT(PTR)
        MOVEM T2,CORCNT(T1)
        MOVE T2,REMWRT(PTR)
        MOVEM T2,CORWRT(T1)
        MOVE T2,REMWFL(PTR)
        MOVEM T2,CORWFL(T1)
        MOVE T2,REMWOK(PTR)
        MOVEM T2,CORWOK(T1)
        MOVE T2,REMROK(PTR)
        MOVEM T2,CORROK(T1)
        MOVE T2,REMRFL(PTR)
        MOVEM T2,CORRFL(T1)
        POPJ P,
MTALNG: OSTR [ASCIZ / NUMBER OF ERRORS /]
        PUSHJ P,OUTDEC
        MOVE T2,REMWRT(PTR)
        SUB T2,CORWRT(T1)
        JUMPE T2,MTAL1  ;NO REWRITES
        OSTR [ASCIZ /
        WRITE RETRYS, NUMBER /]
        PUSHJ P,OUTDEC
        MOVE T2,REMWOK(PTR)
        SUB T2,CORWOK(T1)
        JUMPE T2,MTAL2
        OSTR [ASCIZ / SUCCESSFUL /]
        PUSHJ P,OUTDEC
MTAL2:  MOVE T2,REMWFL(PTR)
        SUB T2,CORWFL(T1)
        JUMPE T2,MTAL1
        OSTR [ASCIZ / FAILED /]
        PUSHJ P,OUTDEC
MTAL1:  MOVE T2,REMROK(PTR)
        ADD T2,REMRFL(PTR)
        SUB T2,CORROK(T1)
        SUB T2,CORRFL(T1)
        JUMPE T2,MTAL3
        OSTR [ASCIZ /
        READ RETRYS, NUMBER /]
        PUSHJ P,OUTDEC
        MOVE T2,REMROK(PTR)
        SUB T2,CORROK(T1)
        JUMPE T2,MTAL4
        OSTR [ASCIZ / SUCCESSFUL /]
        PUSHJ P,OUTDEC
MTAL4:  MOVE T2,REMRFL(PTR)
        SUB T2,CORRFL(T1)
        JUMPE T2,MTAL3
        OSTR [ASCIZ / FAILED /]
        PUSHJ P,OUTDEC
MTAL3:  OSTR [ASCIZ /
        CONI
/]
        MOVEI T4,MTACNI
        MOVE T2,REMCNI(PTR)
        PUSHJ P,OUTBTS
        OSTR [ASCIZ /
/]
        JRST MTAUPD
MTACNI: REPEAT ^D11,<0>
        AQ <CONTROL WORD PARITY ERROR>
        AQ <NO SUCH MEMORY>
        AQ <DATA PARITY ERROR>
        REPEAT 4,<0>
        AQ <UNIT HUNG>
        0
        0
                AQ <ILLEGAL>
        AQ <TAPE PARITY ERROR>
        AQ <END OF FILE>
        0
        AQ <READ COMPARE ERROR>
        AQ <RECORD LENGTHS DIFFER>
        AQ <DATA LATE>
        AQ <BAD TAPE>
        REPEAT 7,<0>
FTAERR: TLZ FL,FERDSK
        SETZM PRVERR    ;NO SENSE DATA NEEDED
        SKIPN SKPERR
        PUSHJ P,COMUNI
         POPJ P,        ;NOT INTERESTED
         JRST FTAUPD    ;JUST UPDATE
        MOVE T3,REFHNG(PTR)     ;HUNG COUNT
        SUB T3,CORHNG(T1)
        JUMPL T3,FTARST ;NEEDS RESTART IF NEG
        MOVE T2,REFWOK(PTR)
        SUB T2,CORWOK(T1)
        JUMPL T2,FTARST ;WRITE RECOVERYS
        ADD T3,T2
        MOVE T2,REFWFL(PTR)
        SUB T2,CORWFL(T1)
        JUMPL T2,FTARST
        ADD T3,T2
        MOVE T2,REFROK(PTR)
        SUB T2,CORROK(T1)
        JUMPL T2,FTARST
        ADD T3,T2
        MOVE T2,REFRFL(PTR)
        SUB T2,CORRFL(T1)
        JUMPL T2,FTARST
        ADD T3,T2
        JUMPE T3,CPOPJ  ;NOTHING TO UPDATE, IGNORE RECORD
FTAOK1: MOVE T2,REFRFL(PTR)
        ADD T2,REFWFL(PTR)
        ADD T2,REFHNG(PTR)
        SUB T2,CORHNG(T1)
        SUB T2,CORWFL(T1)
        SUB T2,CORRFL(T1)       ;IF T2 IS POS, THIS IS HARD ERR
        JUMPG T2,FTAHRD
        SKIPE HRDFLG
        JRST FTAUPD     ;ONLY WANT HARD ERRORS, UPDATE ONLY
FTAHRD: PUSHJ P,COMOPN
        SETOM PRVERR
        SKIPN SHTFRM
        JRST FTALNG     ;LONG ERROR MESSAGE
        MOVE T2,REFWOK(PTR)
        SUB T2,CORWOK(T1)
        JUMPLE T2,FTAR1
        OSTR [ASCIZ / WRT RT /]
        PUSHJ P,OUTDEC
FTAR1:  MOVE T2,REFWFL(PTR)
        SUB T2,CORWFL(T1)
        JUMPLE T2,FTAR2
        OSTR [ASCIZ / WRT FL /]
        PUSHJ P,OUTDEC
        FTAR2:  MOVE T2,REFROK(PTR)
        SUB T2,CORROK(T1)
        JUMPLE T2,FTAR3
        OSTR [ASCIZ / RD RT /]
        PUSHJ P,OUTDEC
FTAR3:  MOVE T2,REFRFL(PTR)
        SUB T2,CORRFL(T1)
        JUMPLE T2,FTAR4
        OSTR [ASCIZ /RD FL /]
        PUSHJ P,OUTDEC
FTAR4:  MOVE T2,REFHNG(PTR)
        SUB T2,CORHNG(T1)
        JUMPLE T2,FTAR5
        OSTR [ASCIZ / HUNG /]
        PUSHJ P,OUTDEC
FTAR5:  MOVE T2,REFWFL(PTR)
        ADD T2,REFRFL(PTR)
        SUB T2,CORWFL(T1)
        SUB T2,CORRFL(T1)
        JUMPLE T2,FTAR6
        OSTR [ASCIZ /
        HCNI CONI /]
        MOVE T4,REFHCI(PTR)
        PUSHJ P,OUTHLF
        JRST FTAR7
FTAR6:  MOVE T2,REFWOK(PTR)
        ADD T2,REFROK(PTR)
        SUB T2,CORWOK(T1)
        SUB T2,CORROK(T1)
        JUMPLE T2,FTAR8
FTAR7:  OSTR [ASCIZ /
        SCNI CONI /]
        MOVE T4,REFSCI(PTR)
        PUSHJ P,OUTHLF
FTAR8:  MOVE T2,REFHNG(PTR)
        SUB T2,CORHNG(T1)
        JUMPLE T2,FTAR9
        OSTR [ASCIZ /
        HUNG CONI /]
        MOVE T4,REFCIH(PTR)
        PUSHJ P,OUTHLF
        OSTR [ASCIZ / FUNCT /]
        MOVE T2,REFHFC(PTR)
        PUSHJ P,OUTDEC
FTAR9:  OSTR [ASCIZ /
/]
FTAUPD: MOVE T2,REFWOK(PTR)
        MOVEM T2,CORWOK(T1)
        MOVE T2,REFWFL(PTR)
        MOVEM T2,CORWFL(T1)
        MOVE T2,REFROK(PTR)
        MOVEM T2,CORROK(T1)
        MOVE T2,REFRFL(PTR)
        MOVEM T2,CORRFL(T1)
        MOVE T2,REFHNG(PTR)
        MOVEM T2,CORHNG(T1)
        POPJ P,
FTARST: PUSHJ P,SETRST
        PUSHJ P,FNDLNK
        JRST FTAOK1

FTALNG: MOVE T2,REFWOK(PTR)
        SUB T2,CORWOK(T1)
        JUMPLE T2,FTAL1
        OSTR [ASCIZ /
        WRITE RETRYS, NUMBER /]
        PUSHJ P,OUTDEC
        MOVE T2,REFWFL(PTR)
        SUB T2,CORWFL(T1)
        OSTR [ASCIZ / FAILED /]
        PUSHJ P,OUTDEC
FTAL1:  MOVE T2,REFROK(PTR)
        SUB T2,CORROK(T1)
        JUMPLE T2,FTAL2
        OSTR [ASCIZ /
        READ RETRYS, NUMBER /]
        PUSHJ P,OUTDEC
        MOVE T2,REFRFL(PTR)
        SUB T2,CORRFL(T1)
        OSTR [ASCIZ / FAILED /]
        PUSHJ P,OUTDEC
FTAL2:  MOVE T2,REFWFL(PTR)
        ADD T2,REFRFL(PTR)
        SUB T2,CORWFL(T1)
        SUB T2,CORRFL(T1)
        JUMPE T2,FTAL3
        OSTR [ASCIZ /
        HARD CONI
/]
        MOVEI T4,FTACNI
        MOVE T2,REFHCI(PTR)
        PUSHJ P,OUTBTS
FTAL3:  MOVE T2,REFWOK(PTR)
        ADD T2,REFROK(PTR)
        SUB T2,CORWOK(T1)
        SUB T2,CORROK(T1)
        JUMPLE T2,FTAL4
        OSTR [ASCIZ /
        SOFT CONI
/]
        MOVEI T4,FTACNI
        MOVE T2,REFSCI(PTR)
        PUSHJ P,OUTBTS
FTAL4:  MOVE T2,REFHNG(PTR)
        SUB T2,CORHNG(T1)
        JUMPLE T2,FTAL5
        OSTR [ASCIZ /
        TIME HUNG /]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / FUNCTION /]
        MOVE T2,REFHFC(PTR)
        CAIL T2,HFCCNT  ;SEE IF TOO LARGE
        MOVEI T2,HFCCNT ;POINT TO UNKNOWN
        OSTR @HFCNAM(T2)
        OSTR [ASCIZ /
        SA-10 CONI
/]
        MOVEI T4,SAXCNI
        MOVE T2,REFCIH(PTR)
        PUSHJ P,OUTBTS
FTAL5:  OSTR [ASCIZ /
/]
        JRST FTAUPD

HFCNAM: AQ <UNKNOWN>
        AQ <REWIND>
        AQ <WRITE TAPE MARK>
        AQ <SKIP RECORD>
        AQ <BACKSPACE RECORD>
        AQ <REWIND AND UNLOAD>
        AQ <ERASE GAP>
        AQ <SKIP FILE>
        AQ <BACKSPACE FILE>
        AQ <UGETF SENSE>
        AQ <READ>
        AQ <WRITE>
HFCCNT==.-HFCNAM
        AQ <UNKNOWN>

FTACNI: 0
        AQ <SELECT ERROR>
        AQ <BUS IN PARITY ERROR>
        AQ <CONTROL ERROR>
        AQ <EQUIPMENT CHECK>
        AQ <INTERVENTION REQUIRED>
        AQ <COMMAND REJECT>
        AQ <NOT CAPABLE>
        AQ <BUSY>
        AQ <CAN'T SENSE>
        AQ <MEMORY ERROR>
        AQ <BUS OUT CHECK>
        AQ <OVERRUN>
        AQ <DATA CHECK ON ERASE GAP>
        AQ <DATA CHECK ON WRITE OR WRITE TAPE MARK>
        AQ <DATA CHECK ON READ>
        AQ <ID BURST CHECK>
                REPEAT ^D20,<0>
SAXCNI: REPEAT ^D18,<0>
        AQ <PI REQUEST>
        AQ <PARITY ERROR>
        AQ <NON-EXISTENT MEMORY>
        AQ <INTERUPT ENABLE CHL 0>
        AQ <INTERUPT ENABLE CHL 1>
        AQ <INTERUPT ENABLE CHL 2>
        AQ <INTERUPT ENABLE CHL 3>
        AQ <GO CHL 0>
        AQ <GO CHL 1>
        AQ <GO CHL 2>
        AQ <GO CHL 3>
        AQ <STATUS CHL 0>
        AQ <STATUS CHL 1>
        AQ <STATUS CHL 2>
        AQ <STATUS CHL 3>
        REPEAT 3,<0>
FTASNS: TLZ FL,FERDSK
        SKIPE USESNS
        PUSHJ P,COMUNI
         POPJ P,
         POPJ P,
PRTSNT: SKIPN PRVERR    ;DO WE NEED SENSE DATA?
        POPJ P,         ;NO, EXIT
        PUSHJ P,COMOPN
        OSTR [ASCIZ / LAST SENSE
/]
PRTSNS: MOVEI T1,6      ;FALL INTO HERE
        MOVE T6,[POINT 8,4(PTR)]        ;POINTER TO SENSE BYTES
PRTSN1: MOVEI T5,4
        OCHI 11
PRTSN2: ILDB T2,T6
        PUSHJ P,OUTHEX
        CAILE T5,1
        OCHI ","
        SOJG T5,PRTSN2
        OSTR [ASCIZ /
/]
        SOJG T1,PRTSN1
        POPJ P,

OUTOC1: CAIL T2,100
        JRST OUTOCT
        OCHI "0"
        CAIGE T2,10
        OCHI "0"
        JRST OUTOCT

UNISNS: TRO FL,FERDSK
        PUSHJ P,COMUNI
         POPJ P,
         POPJ P,
        LDB T2,[POINT 24,4(PTR),23]
        CAIN T2,20
        JRST UNIENV     ;ENVIRON
        SKIPN USESNS
        POPJ P,
        JRST PRTSNT

UNIENV: SKIPN USEENV
        POPJ P,
        PUSHJ P,COMOPN
        OSTR [ASCIZ / ENVIRONMENTAL DATA
        CONTROL /]
        LDB T2,[POINT 2,5(PTR),1]
        PUSHJ P,OUTDEC
        OSTR [ASCIZ / DRIVE /]
        LDB T2,[POINT 6,5(PTR),7]
        MOVSI T3,-10
DRVEV1: CAMN T2,[EXP 70,61,52,43,34,25,16,7](T3)
        JRST DRVEV2
        AOBJN T3,DRVEV1
        OSTR [ASCIZ /UNKNOWN/]
        SKIPA
DRVEV2: OCHI "A"(T3)
        OSTR [ASCIZ /
/]
        OSTR [ASCIZ /   BYTES READ,SEARCHED /]
        LDB T2,[POINT 32,6(PTR),31]
        PUSHJ P,OUTDCC
        LDB T2,[POINT 16,7(PTR),15]
        JUMPE T2,ENVR1
        OSTR [ASCIZ /
        CORRECTABLE DATA CHECKS /]
        PUSHJ P,OUTDCC
ENVR1:  LDB T2,[POINT 16,7(PTR),31]
        JUMPE T2,ENVR2
        OSTR [ASCIZ /
                RETRY DATA CHECKS /]
        PUSHJ P,OUTDCC
ENVR2:  OSTR [ASCIZ /
        SEEKS /]
        LDB T2,[POINT 16,10(PTR),15]
        PUSHJ P,OUTDCC
        LDB T1,[POINT 1,10(PTR),16]     ;INTERFACE IDENT
        LDB T2,[POINT 8,10(PTR),31]
        JUMPE T2,ENVR3
        OSTR [ASCIZ /
        SEEK ERRORS /]
        PUSHJ P,OUTDCC
ENVR3:  LDB T2,[POINT 8,11(PTR),7]
        JUMPE T2,ENVR4
        OSTR [ASCIZ /
        COMMAND OVERRUN INTERFACE /]
        OSTR ACTAB(T1)
        PUSHJ P,OUTDCC
ENVR4:  LDB T2,[POINT 8,11(PTR),15]
        JUMPE T2,ENVR5
        OSTR [ASCIZ /
        DATA OVERRUN INTERFACE /]
        OSTR ACTAB(T1)
        PUSHJ P,OUTDCC
ENVR5:  LDB T2,[POINT 8,11(PTR),23]
        JUMPE T2,ENVR6
        OSTR [ASCIZ /
        COMMAND OVERRUN INTERFACE /]
        OSTR BDTAB(T1)
        PUSHJ P,OUTDCC
ENVR6:  LDB T2,[POINT 8,11(PTR),31]
        JUMPE T2,ENVR7
        OSTR [ASCIZ /
        DATA OVERRUN INTERFACE /]
        OSTR BDTAB(T1)
        PUSHJ P,OUTDCC
ENVR7:  OSTR [ASCIZ /
/]
        POPJ P,

ACTAB:  ASCIZ /A /
        ASCIZ /C /
BDTAB:  ASCIZ /B /
        ASCIZ /D /

OUTDCC: CAIGE T2,^D1000
        JRST OUTDEC     ;JUST PRINT IF SMALL
        IDIVI T2,^D1000
        HRLM T3,(P)     ;DIVIDE INTO 3 DIGIT HUNKS
        PUSHJ P,OUTDCC
        OCHI ","
        HLRZ T2,(P)
        CAIL T2,^D100
        JRST OUTDEC     ;NO EXTRA ZEROS NEEDED
        OCHI "0"        ;AT LEAST 1 EXTRA
        CAIGE T2,^D10
        OCHI "0"        ;AND POSSIBLY 2 ZEROS NEEDED
        JRST OUTDEC

OUTHEX: IDIVI T2,20
        PUSHJ P,HEXDG
        MOVE T2,T3
HEXDG:  CAIG T2,^D9
        TROA T2,"0"
        ADDI T2,"A"-^D10
        OCHR T2
        POPJ P,

        END STPT
  `;N-