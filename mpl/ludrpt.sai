
Begin "LUDRPT"

require "(SAILIB)SAIL.DEF" source!file;

define
	LUD!PPN    = 0			! PPN  = Gan,,Uun ;
,	LUD!DIST   = 1			! DIST = Tymshare district ;
,	LUD!SIZE   = 2			! SIZE = Lud entry size ;
,	LUD!PRIV   = 3			! PRIV = User Privilages ;
,	LUD!HASH   = 4			! HASH = Hashed user name ;
,	LUD!BUDGET = 5			! BUDGET word (if present) ;
,	LUD!USER   = 5			! FILE:USERNAME if INIT ;
;

define	LUDMAX = 16;			! Enough? for large entries ;

Own Integer Array E[1:128];		! One disk block = 1/4 page ;
Own Integer Array L[0:LUDMAX];		! lots of room for LUD entry ;
Own Integer Deleted,Normal;		! flags for selection ;
Own Integer L.Eof, L.Chan;		! internal file variables ;
Own Integer L.PPN, L.Ptr, L.Size;	! internal variables ;

Own Integer MemAdr,Block;

Internal Procedure LudWld( Integer PPN, Mask; Procedure UserProc );
begin

    Open( L.Chan_ GetChan, "SYS", '10, 1,0, 512, 0, L.Eof_ -1 );
    If L.Eof
     then Usererr(0,0,"Cannot init SYS, try again later...","X");
    Lookup( L.Chan, "LUD.SYS", L.Eof_ -1 );
    If L.Eof
     then Usererr(0,0,"Cannot read LUD," & Crlf &
		      "Please contact your Tymshare representative","X");


    L.PPN_ PPN lor Mask;		! Setup PPN Mask ;

    While not L.Eof			! While data is readable ;
     do begin "read file"
	Arryin( L.Chan, E[1], 128 );	! Read a block ;
	If L.Eof and !Rh( L.EoF ) = 0	! If e-o-f and nothing read ;
	 then done;			!  then we are done ;
	Block_ Block + 1;		! Increment block number ;
	MemAdr_ (MemAdr + '177) Land '777600;
	L.Ptr_ 1;			! Init pointer ;
	While L.Ptr leq 128   and	! While pointer is in range ;
	     E[ L.Ptr ] neq 0		!   and data is non-null ;
	 do begin "scan block"
	    If L.PPN = ( E[ L.Ptr ] lor Mask )
	     then begin "found entry"
		ArrClr( L );
		L.Size_ E[ L.Ptr+LUD!SIZE ] land '177;
		ArrBlt( L[ 0 ], E[ L.Ptr ], L.Size min LUDMAX );
		UserProc( E[ L.Ptr ], L.Size min LUDMAX, L )
	     end "found entry";
	    L.Ptr_ L.Ptr + L.Size;
	    MemAdr_ MemAdr + L.Size;
	 end "scan block";
     end "read file";
    Release( L.Chan );
end;



Procedure LPROC( Reference Integer PPN, Size; Integer Array Blk );
begin
    Own Integer LudXtra;

    If ( Blk[LUD!HASH] )
     then begin
	If ( not Normal ) then Return;
     end
     else begin
	If ( not Deleted ) then Return;
     end;

    LudXtra_ 0;

    Print( Cvos(!lh(PPN)),",",Cvos(!rh(PPN))," ",BLOCK," ",Cvos(MEMADR),Size);

    Print( If ( Blk[LUD!HASH] )
	    then "  "
	    else " D" );

    If ( Blk[LUD!SIZE] land  !bit(4) )
     then begin
	LudXtra_ LudXtra + 1;
	SetFormat(12,0);
	Print( Blk[LUD!BUDGET] );
        SetFormat(6,0);
     end
     else begin
	If (  Blk[LUD!SIZE] land !bit(27) )
	 then Print( "            " )
     end;

    If (  Blk[LUD!SIZE] land !bit(27) )
     then begin
	Print( "  (",Cv6Str(Blk[LUD!USER+1+LudXtra]),
	       Cv6Str(Blk[LUD!USER+2+LudXtra]),")",
	       Cv6Str(Blk[LUD!USER+LudXtra])               );
     end;

    Print( Crlf );

end;


    TtyUp( True );
    SetFormat(6,0);
    Print( "List Normal entries? " );
    Normal_ ( "Y" = Inchwl );
    Print( "List Deleted entries? " );
    Deleted_ ( "Y" = Inchwl );
    MemAdr_ Block_ 0;
    LudWld( 0, -1, LPROC );

end "LUDRPT";

