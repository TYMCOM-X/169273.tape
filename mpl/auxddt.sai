BEGIN
  INTEGER PORT,BYTE!SIZE,BYTE!MASK,WORD!SIZE;
  external boolean !SKIP!;
  REQUIRE "INTLIB.SAI" SOURCE!FILE;

SIMPLE INTEGER PROCEDURE CREAUX(STRING LOG!STR);
BEGIN
  INTEGER ERRCD;
  STRING LS;
  LS:=LOG!STR;
  START!CODE
    HRRZ LS;
    SETZM ERRCD;
    CALLI -'44;
      MOVEM ERRCD;
    MOVEM PORT;
    END;
  IF ERRCD THEN PORT:=0;
  if ERRCD=0 
	then print("Circuit completed.",crlf)
	else print("Circuit error: ",cvos(ERRCD),crlf);
  RETURN(ERRCD);
  END;

SIMPLE PROCEDURE ZAPCIR;
BEGIN
  START!CODE
    MOVE PORT;
    CALLI -'45;
    END;
  END;

SIMPLE INTEGER PROCEDURE IMAGE!IN;
BEGIN
  DEFINE !AXI8C = 0;
  INTEGER IC;
  AUXCLR(PORT,IC,!AXI8C);
  RETURN(IC);
  END;

SIMPLE PROCEDURE IMAGE!OUT(INTEGER IC);
BEGIN
  DEFINE !AXO8 = 3;
  AUXCLR(PORT,IC,!AXO8);
  END;

SIMPLE BOOLEAN PROCEDURE CHR!RDY;
BEGIN
  DEFINE !AXSIC = '10;
  AUXCLV(PORT,0,!AXSIC);
  RETURN(!SKIP!);
  END;

SIMPLE BOOLEAN PROCEDURE LINE!RDY;
BEGIN
  DEFINE !AXSIC = '10;
  AUXCLV(-1,0,!AXSIC);
  RETURN(!SKIP!);
  END;

SIMPLE PROCEDURE COMPLAIN(STRING MSG);
BEGIN
  OUTSTR(MSG);
  WHILE TRUE DO CALL(0,"EXIT");
  END;

SIMPLE STRING PROCEDURE EXT!(INTEGER CHR);
BEGIN
  STRING X;
  X:=9&CVOS(CHR)&9;
  CHR:=CHR LAND '177;
  IF CHR<'40 THEN X:=X&"^"&(CHR+'100)
  ELSE X:=X&CHR;
  RETURN(X);
  END;

REQUIRE "{}()" DELIMITERS;

DEFINE HELPMSG = {26&"
Valid commands are:
""<string>	Sends string as is
'<string>	Same as "" but with parity
^<string>	Sends the string as control chars (subtracts
		'100 from them)
.<decimal#>	Sends character with given ascii code
!<decimal#>	Same as . but with parity
#<octal#>	Breaks # into 4 bytes (high order 1st)
#n:<octal#>	Breaks # into n bytes (high order 1st)
=<octal#>,<octal#> ... <octal#>
		Displays value of given bytes packed into
		an integer (all in octal) - opposite of #
$		Zaps circuit and returns to monitor
(<string>)	Sends string in 4 byte words, last word has
		the sign bit on (parity)
<octal#>	Sends character with given ascii code
?		Types this message
B<decimal#>	Sets the value of BYTE!SIZE to given number
		defining the number of bits in a byte for
		# and = commands only.
W<decimal#>	Sets the value of WORD!SIZE to given number
		defining the number of bytes in a word for
		# command only
"};

COMMENT
  THE FOLLOWING MACROS HANDLE THE EXECUTION OF COMMANDS RECIEVED
  FROM THE TERMINAL AT INTERRUPT LEVEL IN PROCEDURE TTY!SERVICE;

DEFINE HELP =
{ OUTSTR(HELPMSG)};

DEFINE ASCII =
{ WHILE TTYLINE DO IMAGE!OUT(LOP(TTYLINE))};

DEFINE ASCIIP =
{ WHILE TTYLINE DO IMAGE!OUT(LOP(TTYLINE)+'200)};

DEFINE CTRL =
{ WHILE TTYLINE DO IMAGE!OUT(LOP(TTYLINE)-'100)};

DEFINE UNPACK =
{ BEGIN
  IF (TTYLINE[2 FOR 1]=":")OR(TTYLINE[2 FOR 1]=" ") 
    THEN BEGIN
      I:=CVO(TTYLINE[3 TO INF]);
      J:=TTYLINE[1 FOR 1]-"0";
      END
    ELSE BEGIN
      I:=CVO(TTYLINE);
      J:=WORD!SIZE;
      END;
  FOR K:=J-1 STEP -1 UNTIL 0 DO
    IMAGE!OUT((I LSH -BYTE!SIZE*K)LAND BYTE!MASK);
  END};

DEFINE PACK =
{ BEGIN
  I:=0;
  WHILE TTYLINE DO
    I:=(I LSH BYTE!SIZE) + CVO(SCAN(TTYLINE,10,BREAK));
  OUTSTR(CVOS(I)&13&10);
  END};

DEFINE KILL =
{ BEGIN
  ZAPCIR;
  WHILE TRUE DO CALL(0,"EXIT");
  END};

DEFINE DECIMAL =
{ IMAGE!OUT(CVD(TTYLINE))};

DEFINE DECIMALP =
{ IMAGE!OUT(CVD(TTYLINE)LOR '200)};

DEFINE USERNAME =
{ BEGIN
  IF TTYLINE[INF FOR 1]=")"
    THEN TTYLINE:=TTYLINE[1 TO INF-1];
  WHILE TTYLINE DO BEGIN
    IF LENGTH(TTYLINE) > 4
      THEN IMAGE!OUT(LOP(TTYLINE))
      ELSE IMAGE!OUT(LOP(TTYLINE)LOR '200);
    IMAGE!OUT(LOP(TTYLINE));
    IMAGE!OUT(LOP(TTYLINE));
    IMAGE!OUT(LOP(TTYLINE));
    END;
  END};

DEFINE OCTAL =
{ IMAGE!OUT(CVO(TTYCOM&TTYLINE))};

DEFINE SET!B =
{ BEGIN
  BYTE!SIZE:=CVD(TTYLINE);
  BYTE!MASK:=-1 LSH (BYTE!SIZE-36);
  END};

DEFINE SET!W =
{ BEGIN
  WORD!SIZE:=CVD(TTYLINE);
  END};

SIMPLE PROCEDURE ZAP!SERVICE;
BEGIN
  COMPLAIN("?CIRCUIT ZAPPED");
  END;

SIMPLE PROCEDURE AUX!SERVICE;
BEGIN
  WHILE CHR!RDY DO OUTSTR(EXT!(IMAGE!IN)&13&10);
  END;

SIMPLE PROCEDURE TTY!SERVICE;
BEGIN
  STRING TTYLINE;
  INTEGER I,BREAK,J,K,TTYCOM;
  WHILE LINE!RDY DO BEGIN "LOOP-FOR-CHARS"
    TTYLINE:=INCHWL;
    TTYCOM:=LOP(TTYLINE);
    IF TTYCOM="?" THEN HELP
    ELSE IF TTYCOM="""" THEN ASCII
    ELSE IF TTYCOM="'" THEN ASCIIP
    ELSE IF TTYCOM="^" THEN CTRL
    ELSE IF TTYCOM="#" THEN UNPACK
    ELSE IF TTYCOM="=" THEN PACK
    ELSE IF TTYCOM="$" THEN KILL
    ELSE IF TTYCOM="." THEN DECIMAL
    ELSE IF TTYCOM="!" THEN DECIMALP
    ELSE IF TTYCOM="(" THEN USERNAME
    ELSE IF ("0" LEQ TTYCOM)AND(TTYCOM LEQ "9") THEN OCTAL
    ELSE IF TTYCOM="B" THEN SET!B
    ELSE IF TTYCOM="W" THEN SET!W
    ELSE OUTSTR("?Type ""?"" for help"&13&10);
    END "LOOP-FOR-CHARS";
  END;

SIMPLE PROCEDURE SETUP;
BEGIN
  INT!INIT;
  CALLI('1003777777,TINASS); COMMENT CHAR ON TTY:;
  CALLI('1002000000+PORT,TINASS); COMMENT CHAR ON AUX:;
  CALLI('7001000000+PORT,TINASS); COMMENT ZAP ON AUX:;
  SERVICE(1,ZAP!SERVICE);
  SERVICE(2,AUX!SERVICE);
  SERVICE(3,TTY!SERVICE);
  CALLI(-1,INTENB);
  END;

BEGIN "MAIN"
  SETBREAK(10,", ",NULL,"INS");
  OUTSTR("*");
  IF CREAUX(INCHWL&";") THEN COMPLAIN("?CREAUX FAILED");
  SETUP;
  WHILE TRUE DO CALL(60,"SLEEP");
  END "MAIN";
END
