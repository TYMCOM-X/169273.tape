begin

require "(SAILIB)SAIL.DEF" source!file;
!get!module(APPEND);

define NL = {('15&'12)};

define LOWMSG = 1;
define HIGHMSG = 9;

preset!with
"insufficient access to source frame",
"source frame does not exist",
"insufficient access to target frame",
"target frame does not exist",
"port not attached to source frame",
"port already attached to target frame",
"forced command pending on port",
"attaching aux circuit as command port",
"no room for ddb"
; string array retmsg[LOWMSG:HIGHMSG];

integer array blk[0:1];

simple integer procedure doretach(
	integer source, target;
	integer bits;
	integer port
); begin
	external integer !skip!;
	integer ac;

	blk[0] _ (source lsh 18) lor (target land '777777);
	blk[1] _ (bits lsh 18) lor (port land '777777);
	ac _ calli(location(blk[0]),-'135);
	if not !skip! then begin
		if LOWMSG <= ac <= HIGHMSG then
			outstr(retmsg[ac])
		else
			outstr("error "&cvos(ac));
		outstr(NL);
		return(-1);
	end else
		return(ac);
end;

simple integer procedure takeport(integer job);
	return(doretach(job,-1,'400000,-1));

simple procedure giveport(integer port; integer job);
	doretach(-1,job,0,port);

simple procedure fin;
	call(0,"exit");

define	firstuun = '3000003,
	seconduun = '3000003;

integer markchan, markB, markE;
boolean marking;

boolean procedure findmark( integer aun );
	return( (aun = firstuun) or (aun = seconduun) );

procedure tracemark( integer mine, his; string muser, huser );
	if ( findmark( mine ) or findmark( his ) ) then begin
		marking _ false;
		open(markchan_getchan,"DSK",0,4,4,512,markB,markE_-1);
		if markE then return;
		append(markchan,"(MPL)LINK.LOG",markE_-1);
		if markE then return;
		out(markchan,NL&"User "&muser&" linking to "&huser&NL
			&"================================="&NL);
		marking _ true;
	end
	else marking _ false;

procedure quitmark;
	if marking then begin
		out(markchan,NL&"================================="&NL
			&"Link Broken"&NL);
		close(markchan);
		release(markchan);
		marking _ false;
	end;

define ACI8S = '1;
define ACO8 = '3;
define SLEEP = '31;

simple boolean procedure getc(
	integer port;
	reference integer char
); begin
	external integer !skip!;
	auxclr(port,char,ACI8S);
	char _ char land '177;
	return(!skip!);
end;

simple boolean procedure putc(integer port; integer char);
	auxclv(port,char,ACO8);

procedure puts(integer port; string s);
	while length(s) do
		putc(port,lop(s));

simple procedure hiber(integer seconds);
	calli(seconds,SLEEP);

procedure talk(integer port); begin
	integer c;
	boolean got1;

	procedure outc(integer C);
	begin
	    PutC(-1,C);
	    PutC(port,C);
	    if marking then out(markchan,C);
	    if C = '15 then begin
	        PutC(-1,'12);
	        PutC(port,'12);
		if marking then out(markchan,'12);
	    end;
	end;

	auxclr(-1,memory['214],'64);
	auxclr(port,memory['214],'64);
	while true do begin
	    procedure dofile;
	    begin
		integer Chnl,E; string F;
		outstr(13&10&"input file (or ^B to send one): ");
		F _ inchwl;
		if length(F)=0 then return;
		open(Chnl_getchan,"DSK",0,4,0, 0,0,E);
		lookup(Chnl,F,E);
		while not E do outc(wordin(Chnl));
		release(Chnl);
		C _ 0;
	    end;
		got1 _ false;
		if getc(-1,c) then begin
			if c = ("P" land '037) then
				done;
			if c = ("B" land '037) then
				dofile;
			got1 _ true;
			outc(C);
		end;
		if getc(port,c) then begin
			if c = ("P" land '037) then
				done;
			if c = ("B" land '037) then
				dofile;
			got1 _ true;
			outc(C);
		end;
		if not got1 then
			hiber(1);
	end;
end;

integer myjob, hisjob, myaun, hisaun;
string myunm, hisunm;

procedure dolink; begin
	integer port;

	port _ takeport(hisjob);
	if port neq -1 then begin
		tracemark(myaun,hisaun,myunm,hisunm);
		puts(port,NL&"Link from "&myunm
		&" job "&cvs(myjob)&". "
		&"Type ^P to break."&NL);
		puts(-1,"Link established. "
		&"Type ^P to break."&NL);
		talk(port);
		puts(-1,NL&"Breaking link...");
		puts(port,NL&"Link broken."&NL);
		giveport(port,hisjob);
		puts(-1," Link broken."&NL);
		quitmark;
	end;
end;


define LH(w) = {((w) lsh -18)};

simple integer procedure gettab(integer job, tbl);
	return(calli((job lsh 18) lor (tbl land '777777),'41));

define !GTUNM = -'22;
define !GTUN1 = -'21;

string procedure getunm(integer job);
	return(cv6str(gettab(job,!GTUNM))
	      &cv6str(gettab(job,!GTUN1)));

define !GTSTS = 0;
define JB!RUN = {(1 lsh (35-0))};
define JB!JA2 = {(1 lsh (35-20))};
define JB!JNA = {(1 lsh (35-3))};

simple boolean procedure exists(integer job); begin
	integer sts;

	sts _ gettab(job,!GTSTS);
	return(!skip! and (sts land JB!JNA));
end;

simple boolean procedure busy(integer job);
	return(gettab(job,!GTSTS) land JB!RUN);

define !GTPRG = '3;

string procedure getprg(integer job);
	return(cv6str(gettab(job,!GTPRG)));

define !GTLIN = -'27;

simple boolean procedure attached(integer job);
	return(LH(gettab(job,!GTLIN)) neq 0);

define !GTAUN = -'23;

define !GTLIC = -'20;
define LC!OP = {(1 lsh (35-2))};
define LC!SY = {(1 lsh (35-3))};

define !GTPRV = '6;
define JP!ASV = {(1 lsh (35-22))};
define JP!TYM = {(1 lsh (35-21))};

integer mylic, myprv;

simple boolean procedure friendof(integer job); begin
	integer aun;

	aun _ gettab(job,!GTAUN);
	return(myaun = aun
	or (myprv land JP!ASV) and LH(myaun) = LH(aun));
end;

simple boolean procedure way4(integer job);
	return(mylic land LC!SY or friendof(job));

simple boolean procedure way1(integer job);
	return(myprv land JP!TYM or way4(job));

simple boolean procedure busylink(integer job);
	return(mylic land LC!OP or friendof(job));

define !GTCNF = '11;
define !GNNJB = '15;

define CLIST = 0, CJOB = 1, CUNM = 2;

simple boolean procedure find1(integer c); begin
	integer j, lj, hj;
	boolean commaflag;
	boolean headflag;
	integer count;

	count _ 0;
	headflag _ c neq CLIST;
	commaflag _ false;
	if c = CJOB then begin
		lj _ hj _ hisjob;
		if lj < 1 or lj >= gettab(!GNNJB,!GTCNF) then begin
			outstr("Bad job number."&NL);
			return(false);
		end;
	end else begin
		lj _ 1;
		hj _ gettab(!GNNJB,!GTCNF)-1;
	end;
	for j _ lj step 1 until hj do
	if exists(j)
	and way1(j)
	and attached(j)
	and j neq myjob
	and (c neq CUNM or equ(getunm(j),hisunm))
	and (not busy(j) or busylink(j)) then begin
		hisjob _ j;
		hisunm _ getunm(j);
		hisaun _ gettab(j,!GTAUN);
		count _ count+1;
		if headflag then begin
			case c of begin
			[CJOB]	outstr("User ");
			[CUNM]	outstr("Job ");
			else end;
			headflag _ false;
		end;
		if commaflag then begin
			outstr(", ");
			commaflag _ false;
		end;
		case c of begin
		[CLIST]	outstr(cvs(j)&" "&hisunm);
		[CJOB]	outstr(hisunm);
		[CUNM]	outstr(cvs(j));
		else end;
		if way4(j) then
			outstr(" <"&getprg(j)&">");
		if busy(j) then
			outstr(" (busy)");
		if c = CLIST then
			outstr(NL)
		else
			commaflag _ true;
	end;
	if c = CLIST then begin
		if count = 0 then
			outstr("No jobs available."&NL);
		return(false);
	end else begin
		if count = 0 then
			outstr("Not available.");
		outstr(NL);
		return(count = 1);
	end;
end;

define SETJAL = -'21;

integer c;
string line;
label restart, first, again;

restart:
	ttyup(true);
	myunm _ getunm(-1);
	myjob _ calli(0,'30);

	mylic _ gettab(-1,!GTLIC) lsh 18;
	myaun _ gettab(-1,!GTAUN);
	myprv _ gettab(-1,!GTPRV);
	if not (myprv land JP!TYM) then begin
		outstr("Not available.");
		fin;
		goto restart;
	end;
	calli(gettab(-1,!GTSTS) lor JB!JA2,SETJAL);

	outstr("to (job,username,?,CR to exit): ");
	goto first;
again:
	outstr("to: ");
first:
	line _ inchwl;
	if length(line) = 0 then begin
		fin;
		goto restart;
	end else if line[1 for 1] >= "0"
	and line[1 for 1] <= "9" then begin
		hisjob _ cvd(line);
		if not find1(CJOB) then
			goto again;
	end else if line[1 for 1] = "?" then begin
		find1(CLIST);
		goto again;
	end else begin
		hisunm _ line;
		if not find1(CUNM) then
			goto again;
	end;
	if hisjob = myjob then begin
		outstr("That's you!"&NL);
		goto again;
	end;
	if busy(hisjob) then begin
		outstr("Link anyway? (y or n): ");
		line _ inchwl;
		if line[1 for 1] = "Y" then begin
			if not busylink(hisjob) then begin
				outstr("You need oper license."&NL);
				goto again;
			end;
		end else
			goto again;
	end;
	dolink;
end

end
 