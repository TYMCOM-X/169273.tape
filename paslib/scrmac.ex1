#DOCUMENT(A Sample Using SCRMAC,<:August 17, 1981:>,,15)
#TITLE_PAGE_1("#title,Part of SCRMAC User's Manual,&
SCRMAC Version 1.1,Responsible: Programming Languages,&
Prepared by: S. M. Kennedy,"<:Last Updated: #date:>)
#FOOTNOTES(LEFT)
#PAR_DEFAULT(,4)
#SECT(Explaining Some SCRMAC Macros)
In the following document I will try to explain the
uses of some of the SCRMAC macros used when preparing 
a document.
The best way to use this example is to look at the text
containing the SCRMAC macro calls while reading this
final Scribed text.
#PAR()
For starters this section is a Level 1 section. The
sections to follow (1.1 ... 1.4) are Level two sections
and in order to get to Level 2  I must use a
<:#BEGINLEVEL:> macro. 
#BEGINLEVEL
#SECT(The DOCUMENT MACRO)
The <:#DOCUMENT:> macro is used in this document giving
a  title and a date (enclosed in PMF text quotes,
'<:<:' and ':>:>', because the date parameter contains
a comma).  The third parameter is omitted and thus the
page length will default to 66 lines. The fourth
parameter sets the left margin to 15 spaces instead of
the default value of 10. Since the last parameter is
not given the right paren is used to omit trailing
parameters and thus the page width will be set to its
default value of 75.
#SECT(The TITLE_PAGE_1 Macro)
Following the <:#DOCUMENT:>  macro is the
<:#TITLE_PAGE_1:> macro. There are ^uonly|u two places
this macro may be used: immediately following the
<:#DOCUMENT:> macro, or after the <:#TOC:> macro as
the last line of the document.
#PAR()
In this example I have used all six possible parameters
to the macro to illustrate how they are all placed on
the title page. All the parameters of this macro are
optional and if not given will default to the null
string\-\however if null, they ^uwill|u still take up
a line on the page.
#PAR()
Take note of the parameter list of this macro. The
first parameter uses the '<:#title:>' literal which
holds the title of  the document as given to the
<:#DOCUMENT:> macro. The last parameter uses the
'<:#date:>' literal for the date of the document.
If these literals are used as a parameter or part of a
parameter to a macro the ^uvery|u first character of
the paramater ^umust|u be a quote, '"', as done in the
<:#TITLE_PAGE_1:> macro. Also the parameter list for
the macro is spread out over three lines. To do this
an ampersand ^umust|u be the last character
on the lines that are to be continued.
#PAR()
Notice in the preceding paragraphs the use of "^^u" and
"||u" for  underlining the words "only", "will",
"very", and "must". This method ^uis|u necessary.
Using ampersands to ^uunderline|u will usually not work
correctly because they are a special character used for
other purposes by the PMF preprocessor.
#SECT(The FOOTNOTES Macro)
After the <:#TITLE_PAGE_1:> macro I have used the
<:#FOOTNOTES:> macro. This will put level one section
titles and appendix titles as  footnotes at the bottom
of all pages containing text for these sections.
I have specified that I want my footnotes to be on the
"LEFT"; they may also be "CENTER"ed or
put on the "RIGHT".
#PAR()
It is recommended that if footnotes are used that level
one sections are always started on the top of a new
page. This will insure that the footnotes will
correctly reflect the section on the page. If  level
one sections are not started at the top of a new page,
footnotes can not be guaranteed to correspond to the
section(s) of text on the page.
#SECT(The SECT Macro)
The <:#SECT:> macro is used to begin sections. The
section title is printed with the section number and
also a table of contents entry is made for the section.
Section numbers are handled by SCRMAC and Scribe so the
only parameter to the <:#SECT:> macro is the title.
Spacing around the section titles is handled by
<:#SECT's:> current default values and may be
controlled by the user (Section 2.).
#PAR()
#SECT(The PAR Macro)
Next, notice the use of the <:#PAR:> macro. Paragraphs
immediatly following section titles will automatically
be indented according to the first line indentation
default value ( I changed my default value  from zero
to four using a DEFAULT macro - explained in
Section 2.1\). Paragraphs not following section titles
may be started using the <:#PAR:> macro. The one used
above with no parameters, <:#PAR():>, will use the
current default values to skip one line and indent the
first line four spaces.
#PAR()
Now I am ready to end Section One and return to Level
one. To return to Level one I use the <:#ENDLEVEL:>
macro. Following the end of this section I will begin a
new Level one section, Section Two.
#ENDLEVEL
#SECT(Using Default And Pop Macros)
#BEGINLEVEL
#SECT(Default Macros)
Default macros are used to change the current default
values used by a macro. Initially the default values
are set by the <:#DOCUMENT:> macro, but they may be
changed by the user at any point in the document.
#PAR()
The <:#PAR_DEFAULT:> macro used in the beginning of
this document changes the default value for the first
line indentation of paragraphs used by the <:#PAR:>
macro. <:#DOCUMENT:> initially sets the default values
to skip one line before the new paragraph, and to 
leave the first line of the paragraph without any
indentation (indentation=0). The macro used above will
leave the lines skipped unchanged, but changes the
indentation to four. Now when <:#PAR:> is used with no
parameters, <:#PAR():>, it will be the same as using
<:#PAR(1,4):>.
#SECT(The Pop Macros)
To change <:#PAR's:> default values back to their
values before the last <:#PAR_DEFAULT:> macro call,
the <:#PAR_POP:> macro should be used
(^uNot|u <:#PAR_DEFAULT(1,0):> !!). I will use the
<:#PAR_POP:> macro after this paragraph to show the
default values are changed back to one and zero.
#PAR_POP
#PAR()
Notice that this is the beginning of the new paragraph,
but the default indentation is changed back to zero.
I would really like my paragraphs indented so I will
use another <:#PAR_DEFAULT:> macro call to change the
indentation from zero to six.
#PAR_DEFAULT(,6)
#ENDLEVEL
#SECT(Figure and Margin Macros)
The Figure and Margin macros can be very useful for
handling certain situations encountered while preparing
a document.
#BEGINLEVEL
#SECT(The Figure Macros)
The Figure macros,<:#BEGINFIGURE:> and <:ENDFIGURE:>,
are used in pairs around text that should be put in
Scribe's verbatim mode (this may include a figure,
example command lines, etc. the user does not want
incorporated into Scribed paragraphs). To illustrate
the use of the Figure macros here is an example:
#BEGINFIGURE(14,,,2)
*--------------------------------------------------*
|                                                  |
|   the first parameter guarantees I have 14 lines |
|   before the end of the page so my figure is not |
|   split between pages.                           |
|                                                  |
|   the figure will be indented the default of     |
|   five spaces from the left margin.              |
|                                                  |
|   as specified by the fourth parameter of the    |
|   macro call, two lines will be skipped after    |
|   the <:#ENDFIGURE:> call.                           |
|                                                  |
*--------------------------------------------------*
#ENDFIGURE
After the <:#ENDFIGURE:> call I return to the Scribe
justification mode.
#SECT(The Margin Macros)
The Margin macros, <:#BEGINMARGIN:> and <:#ENDMARGIN:>,
can be useful for indenting sections of text relative
to the current margins. The Margin macros have been
set up so nesting of the macros is allowed (see below
for an example).
#BEGINMARGIN()
Here we have moved our margins in on both sides five
spaces relative to the old margins (five is the
default value).
#BEGINMARGIN(10,0)
Now the left margin is moved in ten more spaces, while
the right margin is unchanged. This was done by
specifying explicitly in the <:#BEGINMARGIN:> call
that these indentations were wanted. Also notice a line
is skipped after the <:#BEGINMARGIN:> call. A line will
also be skipped after each <:#ENDMARGIN:> call (one
skipped line is the default for both after the
<:#BEGINMARGIN:>, and after the <:#ENDMARGIN:>).
#ENDMARGIN
Now we are back out to the first indentation after
using <:#ENDMARGIN:>. I would also like to point out
that the other macros may be used within the new
margins.
#PAR()
New paragraphs may be started, and anything else that
may normally be used with SCRMAC may be used within
the new margins.
#ENDMARGIN
Now that I am back to the original margins I will end
my discussion of the Margin macros.
#ENDLEVEL
#SECT(The ITEM Macros)
In this section I would like to illustrate how the ITEM
macros can be used to produce four types of lists by
varying the parameters to the ITEM macros.
#BEGINLEVEL
#SECT(Numbered Lists)
The first and probably most common type of list is one
with a number associated with each item of the list:
a numbered list. The following is a simple example of
this type of list:
#BEGINITEM()
#ITEM()the first item
#ITEM()the second item
#ITEM()the third item
#ITEM()this fourth item is very long to show how
the second line of an item is handled.
#ENDITEM
#PAR(0)
Notice that all the default values were used in the
<:#BEGINITEM:> macro call. Also notice that the text of
the items ^uimmediately|u follow the closing
parenthesis of the <:#ITEM:> macro call. This  will
insure that the indentation  of the item
text is correct.
The fourth item shows how multi-line items are indented.
Multi-line items are handled similarly for the first three
types of lists (Sections 4.1, 4.2, and 4.3).
#SECT(Lists With Numbers and Labels)
In this section I will show a list with both numbers
and labels on items of the list. For this type of list
the item text indentation will usually have to be
increased to accommodate both the item number and the
item label, and not run over into the item text area.
#BEGINITEM(10)
#ITEM(MDSI)Manufacturing Data Systems, Inc.
#ITEM(ANC)Advanced Numerical Control
#ITEM(PDT)Product Development and Technology
#ENDITEM
#SECT(Lists With Labels Only)
In this example only labels will be placed before the
item text(no  numbers). In order to do this zero must
be specified for the  "start\number" parameter in the
<:#BEGINITEM:> macro call to turn off the numbering
of items.
#BEGINITEM(5,,0)
#ITEM(I)Roman numeral one.
#ITEM(II)Roman numeral two.
#ITEM(III)Roman numeral three.
#ITEM(IV)Roman numeral four.
#ENDITEM
#PAR(0)
Notice that the indentaton was again increased to make
room for the label. The default indentation is
initially set up to accommodate a list with numbers
only.
#SECT(Lists With No Numbers or Labels)
The last type of list is a special case of the <:ITEM:>
macro. When an item does not have a number or label put
before the item text the first line of item text is not
indented, but any subsequent lines of text for the same
item are indented the specified amount. Here is an
example of this type of list:
#BEGINITEM(10,1,0)
#ITEM()This is the first item of the list.
#ITEM()This is the second item of the list which should
require more than one line thus showing how these types
of items are indented.
#ENDITEM
#ENDLEVEL
#SECT(The Table of Contents Macro)
The last macro I would like to show you is the <:#TOC:>
macro. It is placed  after the last line of document
text. For every <:#SECT:> title and every <:#APPENDIX:>
title (of which I have none in this document - see
SCRMAC User's Manual for an example) an entry will be
put in the table of contents along with the
corresponding page number. Upon completion of the
document processing, the table of contents may be then
taken from the back of the document and placed at the
beginning. Following this last sentence I will put in
the <:#TOC:> macro call.
#TOC
   