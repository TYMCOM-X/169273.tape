#define(#com,comments,)



#com(##################################################################
     #                                                                #
     #                  S C R M A C   P A C K A G E                   #
     #                  -----------   -------------                   #
     #                                                                #
     #        The SCRMAC Package is a set of macros which are         #
     #     used in conjunction with PMF and SCRIBE to produce         #
     #     section oriented documents. The macros are PMF             #
     #     macros and PMF is used as a preprocessor to SCRIBE.        #
     #                                                                #
     ##################################################################









     LAST REVISED:


	  DATE:   Monday  November 16, 1981


	  TIME:  8:00 AM


	  CHANGE: NOPASCAL macro added to the DOCUMENT macro



)







#com(*******************************************************
		       # F I X _ T I T L E
     *******************************************************

	The macro #FIX_TITLE is used by #DOCUMENT and #SECT
	when printing titles and TOC entries. It checks
	the titles for "'"s and if found doubles them and
	returns a new title that will print correctly.		)

#define(#fix_title,title,&
#literal(#old_title,"#eval(title))&
#literal(#index_apos,"#search("#old_title,'))&
#if("#index_apos,&
#literal(#after_apos,"#substr("#old_title,"#num("#index_apos + 1)))&
#substr("#old_title,1,"#num("#index_apos))'&
#fix_title(#after_apos)&
#undef(#after_apos),&
#old_title)&&
#undef(#old_title)&
#undef(#index_apos)&
)   #com( END #FIX_TITLE )
























#com(*******************************************************
		       # P O P _ E R R O R
     *******************************************************

	The #POP_ERROR macro prints out a message that
	indicates a POP macro has been used when there
	was no previous DEFAULT macro call. It is used
	by all the POP macros in the event of this type
	of error. The type of macro(sect,par,...) is
	passed in to be printed. The error message that
	is printed is long enough to cause an "output
	line too long" error when SCRIBE is run.	)

#define(#pop_error,macro_type,&
$VERBATIM
$ macro_type&_POP USED TOO MANY TIMES
**********************************************************************
***** macro_type&_POP USED WITHOUT A MATCHING macro_type&_DEFAULT ****
*********************************************************************&
**********************************************************************
$JUSTIFY
)   #com( END #POP_ERROR )























#com(*******************************************************
			# D O C U M E N T
     *******************************************************

	The DOCUMENT macro sets several document wide parameters.
	It should be called once at the beginning of the document.

	The first parameter is the title of the document (default: the null string);
	the second parameter is the date (default: the null string);
	the third parameter is the page length (default 66);
	the fourth parameter is the left margin size (default 10);
	the fifth parameter is the page width (as would be specified
	in a scribe $WIDTH directive) (default 75).

	PMF text quotes ('<:' and ':>') should be used to bracket
	any of the parameters which include commas, e.g.,

	#document(this is the title,<:March 16, 1981:>,,5).

	As show in the above example, commas must be used to 
	indicate any non-trailing omitted parameters.

	Scribe directives are emitted to set the page length,
	the left margin size and the page width.  A title
	directive is emitted.  The first title line includes the
	title parameter left justified and the page number right
	justified.  The second title line includes the date
	parameter left justified.

	The title, date, left margin and page width are used
	to define PMF literals and thus may be used outside
	the document macro.  The literals defined are named
	#TITLE, #DATE, #LEFT_MARGIN and #PAGE_WIDTH.  )












#define(#document,the_title,date,page_length,left_margin,page_width,&
&
#nopascal
&
#literal(#title,the_title)&
&
#literal(#date,date)&
&
#if(page_length,&
#literal(#page_length,page_length),&
#literal(#page_length,66))&
$LENGTH #page_length
&
#if(left_margin,&
#literal(#left_margin,left_margin),&
#literal(#left_margin,10))&
$MARGIN #left_margin
&
#if(page_width,&
#literal(#page_width,page_width),&
#literal(#page_width,75))&
$WIDTH #page_width
&
#if("#title,&
#literal(#blanks,                                        &
                                                          )&
#literal(#pad_count,&
"#num("#page_width-#left_margin-#length("#title)))&
#literal(#pad,"#substr("#blanks,1,"#num("#pad_count-7)))&
$TITLE LEFT <:':>#fix_title("#title)&#pad&Page <:\' LEFT ':>#date<:':> )
&
&
#com(	Set up standard tab positions with literals, emit
	Scribe commands for these positions and to turn the
	default page numbering off. Also initialize some
	internal 'bookeeping' macros.				)&
&
#literal(#tab_1,09)&
#literal(#tab_2,17)&
#literal(#tab_3,25)&
#literal(#tab_4,33)&
#literal(#tab_5,41)&
#literal(#tab_6,49)&
#literal(#tab_7,57)&
#literal(#tab_8,65)&
$TABS #tab_1<:,:>#tab_2<:,:>#tab_3<:,:>#tab_4<:,:>&
#tab_5<:,:>#tab_6<:,:>#tab_7<:,:>#tab_8
&
$NUMBER off&&
#literal(#level,1)&
#literal(#first_sect_flag,first)&
&
&
#com(	The following literals are used in #sect(defined below) spacing:
	  #skip_before_l1  :  # lines to skip BEFORE level 1 titles
	  #skip_after_l1   :  # lines to skip AFTER  level 1 titles
	  #skip_before_l2  :  # lines to skip BEFORE level 2 titles
	  #skip_after_l2   :  # lines to skip AFTER  level 2 titles
	  #skip_before_l3  :  # lines to skip BEFORE level 3 titles  
	  #skip_after_l3   :  # lines to skip AFTER  level 3 titles   )&
&
#literal(#skip_before_l1,"#page_length)&
#literal(#skip_after_l1,2)&
#literal(#skip_before_l2,3)&
#literal(#skip_after_l2,2)&
#literal(#skip_before_l3,2)&
#literal(#skip_after_l3,1)&
&
&
#com(	The following literals are used in #BEGINFIGURE and
	#ENDFIGURE for spacing around the figure and
	indenting the figure. Their default values are set
	here.							)&
&
#literal(#skip_before_figure,1)&
#literal(#skip_after_figure,1)&
#literal(#figure_indent,5)&
#literal(#figure_indentation,)&
#literal(#lines_after_figure,)&
&
&
#com(	Two literals are defined here that will be used by #PAR
	as default values for  1.the number of spaces to skip
	before the beginning of a new paragraph, and  2.the number
	of spaces to indent the first line of the paragraph.	    )&
&
#literal(#lines_before_par,1)&
#literal(#first_line_indent,0)&
&
&
&
&
#com(	The default values used by the ITEM macros and
	some working literals are initialized here.		)&
&
#literal(#item_indentation,4)&
#literal(#skip_before_each_item,0)&
#literal(#start_number,1)&
#literal(#skip_before_first_item,1)&
#literal(#skip_after_last_item,1)&
#literal(#save_next_number,1)&
#literal(#count,0)&
#literal(#backslashes,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)&
&
&
#com(  Default values for indenting with #BEGINMARGIN
       are initialized here. 				)&
&
#literal(#left_indent,5)&
#literal(#right_indent,5)&
#literal(#left_indenture,0)&
#literal(#right_indenture,0)&
#literal(#lines_before_margin,1)&
#literal(#lines_after_margin,1)&
#literal(#lines_after_mar,)&
&
&
#com(	Literals used by the #FOOTNOTES macro are declared
	and initialized here. #center is assigned two blanks
	because the default for footnoting is centering and
	there is no actual "CENTER" directive as there is for 
	left or right justifying footnotes. Footnotes start
	turned off.						)&
&
#literal(#center,  )&
#literal(#footnote_type,OFF)&
&
&
#com(	  The default value for the table of contents
	padding of level 3 ... level n section titles
	is initialized here.			      )&
&
#literal(#tocpad,)&
#literal(#toc_more_pad,   )&
#literal(#toc_indent,3)&
&
&
#com(	Literals are declared and initialized here that
	insure that the user does not use a POP macro
	if it has no corresponding DEFAULT macro used
	previously.					)&
&
#literal(#sect_default_level,0)&
#literal(#par_default_level,0)&
#literal(#figure_default_level,0)&
#literal(#item_default_level,0)&
#literal(#toc_default_level,0)&
#literal(#margin_default_level,0)&
#literal(#tab_default_level,0)&
&
&
)   #com( END #DOCUMENT )




























#com(*******************************************************
			    # S E C T
     *******************************************************

	The #SECT macro should be used at the beginning
	of each section.  The section title is the only
	parameter to this macro.

	The Scribe commands emitted depend on the current
	section level.  In all cases the section number
	and title are emitted and a table of contents
	entry is emitted.  Details such as spacing before and
	after the section title depend on the section level
	and the current SECT default values.			 )

#define(#sect,title,&
$PARAGRAPH 0
&
#com( Level 1??? )&
#if("#eqn("#level,1 ),&
#if("#nec("#footnote_type,OFF),&
$FOOTNOTES   #footnote_type  <:':>#fix_title(title)<:':>&)
#if("#eqc("#first_sect_flag,first),&
#assign(#first_sect_flag,not_first)&
#if("#ltn("#skip_before_l1,"#page_length),&
$SKIP #skip_before_l1),&
#if("#gen("#skip_before_l1,"#page_length),&
$PAGE,&
$SKIP #skip_before_l1))
$NEED #num("#skip_after_l1 + 3)
$SECTION
$ENTRY ''
$ENTRY <:'^#	:>#upc("#fix_title(title))<:	\':>
$ENTRY ''
^#\\<:&:>title<:&:>
$SKIP #skip_after_l1,
&
#com( Level 2 ??? )&
#if("#eqn(2,"#level),
$SKIP #skip_before_l2
$NEED #num("#skip_after_l2 + 3)
$SECTION
$ENTRY <:'^#	:>#fix_title(title)<:	\':>
^#\\title
$SKIP #skip_after_l2,
&
#com( Level >=3 ??? )&
$SKIP #skip_before_l3
$NEED #num("#skip_after_l3 + 3)
$SECTION
$ENTRY <:'^#	:>#tocpad&#fix_title(title)<:	\':>
^#\\title
$SKIP #skip_after_l3 ))
&
$PARAGRAPH #first_line_indent&
)   #com( END #SECT )


































#com(*******************************************************
		      # B E G I N L E V E L
     *******************************************************

	The #BEGINLEVEL macro should be used just before any 
	#SECT macro  which begins a lower
	level of sections.  It emits a Scribe $LEVEL +1
	command and updates internal macros which keep
	track of the current level and control
	the indentation of table of contents entries. )

#define(#beginlevel,&
#assign( #level,"#num("#level + 1 ))&
#if("#gtn("#level,2),&
#literal(#temp,#tocpad)&
#assign(#tocpad,"#temp&#toc_more_pad)&
#undef(#temp))&&
$LEVEL +1&
)   #com( END #BEGINLEVEL )


























#com(*******************************************************
			# E N D L E V E L
     *******************************************************

	The #ENDLEVEL macro should be used where ever the
	section level should increase.  The scribe directive
	$LEVEL -1 is emitted and internal bookeeping macros
	for keeping track of the current section level and
	the current table of contents indentation are
	updated. )

#define(#endlevel,&
#assign( #level,"#num("#level - 1 ))&
#if("#gen("#level,3),&
#assign(#tocpad,"#substr("#tocpad,"#toc_indent + 1)),&
#assign(#tocpad,))&&
$LEVEL -1&
)   #com( END #ENDLEVEL )



























#com(*******************************************************
			     # P A R
     *******************************************************

	#PAR will set up paragraphs according the given parameters.
	The first parameter corresponds to the number of spaces to
	skip before the first line of the new paragraph. The second
	parameter corresponds to the number of spaces to skip
	to indent the first line of the paragraph. If a parameter
	is specified with the #PAR call it is used, otherwise the
	current default value is used.				    )

#define(#par,lines_before,first_line_ind,&
&
#if(lines_before,&
$SKIP lines_before,&
$SKIP #lines_before_par)
&
$NEED 2  &
&
#if(first_line_ind,&
$PARAGRAPH  first_line_ind,&
$PARAGRAPH #first_line_indent)&
)   #com( END #PAR )





















#com(*******************************************************
		     # B E G I N F I G U R E
     *******************************************************

	The #BEGINFIGURE macro may be used before text in verbatim
	mode.  Four (optional) parameters may be supplied.  If the
	first parameter is present it is used as the argument for
	the Scribe $NEED directive;  if omitted, no $NEED directive
	will be emitted.  The second parameter is the relative 
	number of spaces which the figure should be indented; if 
	omitted the current default value is used. The third parameter 
	is the number of lines to skip before the figure, and the 
	fourth is the number of lines to skip after the figure. If 
	the first, second or third parameters are omitted their 
	current default values will be used. If the fourth 
	parameter is omitted but the third parameter is given then
	the number of lines skipped after the figure will be the
	same as before the figure. If neither the third or fourth
	parameters are given then both default values will be used.   )

#define(#beginfigure,lines_needed,indenture,lines_before,lines_after,&
&
#if(lines_before,&
$SKIP lines_before ,&
$SKIP #skip_before_figure )&
&
#if(lines_needed,&
$NEED lines_needed )&
&
#if(indenture, &
#assign(#figure_indentation,indenture), &
#assign(#figure_indentation,#figure_indent))&
&
$IND +#figure_indentation
$VERBATIM &
&
#if(lines_after,&
#assign(#lines_after_figure,lines_after),&
#if(lines_before,&
#assign(#lines_after_figure,lines_before),&
#assign(#lines_after_figure,"#skip_after_figure)))&
)   #com( END #BEGINFIGURE )



#com(*******************************************************
		      # E N D _ F I G U R E
     *******************************************************

	The #ENDFIGURE must be used following any verbatim text
	which was preceded by the #BEGINFIGURE macro.  No
	parameters are required.  The following Scribe
	directives are emitted: $JUS, $IND +n, $SKIP m.  The
	indenture value 'n' and the skip value 'm' are from
	the previous #BEGINFIGURE macro call.		    )

#define(#endfigure,&
$JUS
$IND -#figure_indentation
$SKIP #lines_after_figure&
)   #com( END #ENDFIGURE )





























#com(*******************************************************
		       # B E G I N I T E M
     *******************************************************

	The #BEGINITEM macro is used to start a list of "items".
	There are five possible parameters to this macro which
	all use default values if the parameter is not given 
	explicitly. The first is the indentation for the text
	in the list - not the numbering or labels. The second
	parameter is the number of lines to skip before each
	item of the list(first item not included - see below).
	The third item has three possible cases if it is given.
	If it is positive it is the number of the first item
	following this macro. If it is negative numbering of
	items of the list will continue from where it left off
	on the last list. If the third parameter is zero then
	the numbering of items will be turned off. The last
	two parameters specify the number of lines to be skipped
	before the list starts and after the list ends
	respectively. The default values used if a parameter is
	not specified are, in order: 4, 0, 1, 1, and 1.		)

#define(#beginitem,indent_,skip_before_each,start_number,&
skip_before_list,skip_after_list,&
&
#if(indent_,&
#literal(#item_indent,indent_),&
#literal(#item_indent,"#item_indentation))&
&
#if(skip_before_each,&
#literal(#before_each_item,skip_before_each),&
#literal(#before_each_item,"#skip_before_each_item))&
&
#if(start_number,&
#if("#gen(start_number,0),&
#literal(#item_number,start_number),&
#literal(#item_number,"#save_next_number)),&
#if("#gen("#start_number,0),&
#literal(#item_number,"#start_number),&
#literal(#item_number,"#save_next_number)))&
#undef(#save_next_number)&
&
#if(skip_before_list,&
#literal(#before_list,skip_before_list),&
#literal(#before_list,"#skip_before_first_item))&
&
#if(skip_after_list,&
#literal(#after_list,skip_after_list),&
#literal(#after_list,"#skip_after_last_item))&
&
$INDENT LEFT +#item_indent
&
#if("#gen("#num("#before_list - #before_each_item),0),&
$SKIP #num("#before_list - #before_each_item),&
$SKIP 0&)&
)   #com( END #BEGINITEM )


































#com(*******************************************************
			    # I T E M
     *******************************************************

	The #ITEM macro is used to form lists. Its only
	parameter is a label for the item on the list -
	this defaults to the null string if omitted. The
	macro emits a $PARAGRAPH directive so the numbers
	and labels will be left of the item text (which
	should imediately follow the #ITEM macro on the
	same line). The item number and a label are put
	before the item text, and the item number is 
	incremented if necessary.			   )

#define(#item,label,&
#assign(#count,0)&
$SKIP #before_each_item   &
$PARAGRAPH -&#item_indent
&
#if("#nec("#item_number,0),&
#if("#and("#len("#item_number,9),"#gen("#item_indent,4)),\&
#assign(#count,1))&
#item_number&.\&
#assign(#count,"#num("#count + #length("#item_number) + 2))&
#assign(#item_number,"#num("#item_number + 1)))&
&
#if(label,&
label&\&
#assign(#count,"#num("#count + #length(label) + 1))&
#assign(#count,"#num("#item_indent - #count))&
#if("#gtn("#count,0),#substr("#backslashes,1,"#count)))&&
)    #com( END #ITEM )













#com(*******************************************************
			 # E N D I T E M
     **************************************************

	#ENDITEM is used to end a list. It readjusts the
	indentation, skips the perscribed number of lines,
	saves the "would-be" next item number, and undefines the
	literals used by the #ITEM macro.  There are no 
	parameters to #ENDITEM.					)

#define(#enditem,&
$INDENT -&#item_indent
$SKIP #after_list&&
#literal(#save_next_number,"#item_number)&
#undef(#item_indent)&
#undef(#before_each_item)&
#undef(#item_number)&
#undef(#before_list)&
#undef(#after_list)&
)   #com( END #ENDITEM )

























#com(*******************************************************
		     # B E G I N M A R G I N
     *******************************************************

 	The #BEGINMARGIN macro will change the indenture(s) that scribe
	uses when formatting output."left_indent" and "right_indent",
	if specified, will move the margins LEFT and RIGHT
	"left_indent" and "right_indent" spaces respectively. The
	third and fourth parameters specify the number of lines to
	skip after the #BEGINMARGIN call and after the #ENDMARGIN call
	respectively. If the first, second, or third parameters
	are omitted their default values will be used. If the fourth
	parameter is omitted but the third is given, the number of
	lines skipped after the #ENDMARGIN call will be the same
	as the number skipped after the #BEGINMARGIN call. If both the
	third and fourth parameters are not given then both default
	values will be used.					      )

#define(#beginmargin,left_indent,right_indent,lines_before,lines_after,&
&
#if(lines_before,&
$SKIP lines_before  ,&
$SKIP #lines_before_margin  )&
&
#if(left_indent,&
#literal(#left_indenture,left_indent)&
#if("#gen("#num(left_indent),0),&
$INDENT LEFT  +left_indent  ,&
$INDENT LEFT   left_indent   ),&
#literal(#left_indenture,"#left_indent)&
#if("#gen("#num("#left_indent),0),&
$INDENT LEFT  +#left_indent  ,&
$INDENT LEFT   #left_indent  ))&
&
#if(right_indent,&
#literal(#right_indenture,right_indent)&
#if("#gen("#num(right_indent),0),&
$INDENT RIGHT +right_indent,&&
$INDENT RIGHT  right_indent),&
#literal(#right_indenture,"#right_indent)&
#if("#gen("#num("#right_indent),0),&
$INDENT RIGHT  +#right_indent,&&
$INDENT RIGHT   #right_indent)&)&
&
&
#if(lines_after,&
#assign(#lines_after_mar,lines_after),&
#if(lines_before,&
#assign(#lines_after_mar,lines_before),&
#assign(#lines_after_mar,"#lines_after_margin)))&
)   #com( END #BEGINMARGIN )







































#com(*******************************************************
		       # E N D M A R G I N
     *******************************************************

	The #ENDMARGIN will return the margins to the columns they
	were set at preceding the last #BEGINMARGIN call. Also a $SKIP
	directive will be omitted to skip 'm' number of lines
	where 'm' is set in the preceding #BEGINMARGIN call. No
	parameters are needed for the #ENDMARGIN macro.		      )

#define(#endmargin,&
&
#if("#gen("#num("#left_indenture),0),&
$INDENT LEFT  -#left_indenture  ,&
$INDENT LEFT  +#substr("#left_indenture,2)  )&
&
#if("#gen("#num("#right_indenture),0),&
$INDENT RIGHT  -#right_indenture ,&
$INDENT RIGHT  +#substr("#right_indenture,2) )&
&
$SKIP #lines_after_mar &
&
#undef(#left_indenture)&
#undef(#right_indenture)&
)   #com( END #ENDMARGIN )




















#com(*******************************************************
			# A P P E N D I X
     *******************************************************

	The #APPENDIX macro is used to generate an appendix
	heading.  Its only parameter is the appendix title.
	The Scribe commands emitted are the simliar to those
	for level 1 sections except section numbers are not
	used. 							)

#define(#appendix,title,&
#if("#nec("#footnote_type,OFF),&
$FOOTNOTES  #footnote_type  <:':>title<:':>&)&
$PAGE
$SKI 2
$ENTRY ''
$ENTRY <:':>#fix_title(title)<:	\':>
$ENTRY ''
^U&title&|U
$SKIP 2
$PARAGRAPH #first_line_indent&
)   #com( END #APPENDIX )























#com(*******************************************************
		       # F O O T N O T E S
     *******************************************************

	The #FOOTNOTES macro is used if the user wishes to
	have level one section titles put as footnotes on
	the bottom of the pages. There is one possible
	parameter which will indicate how the footnote is
	to be placed on the bottom of the page. The
	instructions to #FOOTNOTES that SCRMAC recognizes
	are "CENTER" to have footnotes centered, "LEFT" to
	have footnotes left justified, "RIGHT" to have
	footnotes right justified, and "OFF" to turn off
	all footnoting. If #FOOTNOTES is used with a null
	parameter then it will default to "CENTER" foot-
	notes. If a parameter given is not one of the
	instructions mentioned above the macro will be
	ignored. Instructions to #FOOTNOTES may be in
	upper or lower case ; #FOOTNOTES converts each
	instruction to lower case internally.			)

#define(#footnotes,instruction,&
&
#if("#or("#not(instruction),"#eqc("#lwc(instruction),center)),&
#assign(#footnote_type,"#CENTER),&
&
#if("#eqc("#lwc(instruction),left),&
#assign(#footnote_type,LEFT),&
&
#if("#eqc("#lwc(instruction),right),&
#assign(#footnote_type,RIGHT),&
&
#if("#eqc("#lwc(instruction),off),&
#assign(#footnote_type,OFF)&
$FOOTNOTES OFF&
&
)))))   #com( END #FOOTNOTES )








#com(*******************************************************
                    # T I T L E _ P A G E _ 1
     *******************************************************

	The #TITLE_PAGE_1 macro can be used to generate a title
	page for a document. The two parameters 'title1' and
	'title2' will be centered and placed aprox. one third
	down the page. The parameters 'foot1', 'foot2', 'foot3',
	and 'foot4' will be placed left justified, one per line,
	about six lines above the bottom of the page.

	The #TITLE_PAGE_1 macro, if used, must be used in one
	of two places in the original macro so page numbering
	in the document is handled correctly. #TITLE_PAGE_1
	can be placed imediatly following the #DOCUMENT macro,
	or following the #TOC macro.				)

#define(#title_page_1,title1,title2,foot1,foot2,foot3,foot4,&
#literal(#one_third_down,"#num("(#page_length/3)-7))&
#literal(#skip_to_feet,"#num("#page_length-(7+#one_third_down+3+4+9)))&
$TITLE ''
&$PAGE
$CENTER
$SKIP #one_third_down
title1
$SKIP 1
title2
$SKIP #skip_to_feet
$JUSTIFY LEFT
$PARAGRAPH 0
#if(foot1,foot1,\)
$PARAGRAPH 0
#if(foot2,foot2,\)
$PARAGRAPH 0
#if(foot3,foot3,\)
$PARAGRAPH 0
#if(foot4,foot4,\)
$TITLE LEFT <:':>#fix_title("#title)&#pad&Page <:\' LEFT ':>#date<:':> 
$NUMBER 1
$JUSTIFY
&$PAGE&
)



#com(*******************************************************
			     # T O C
     *******************************************************

	The #TOC macro is used to create the table of contents.
	It has no parameters.  It emits Scribe commands to
	generate a nice looking (as defined by the writer of
	these macros) table of contents. )

#literal( #toc,"<:
$MARGIN 10
$PAGE
$FOOTNOTES OFF
$TITLE LEFT <:':>#fix_title("#title)<:' LEFT ':>#date<:':>
$SKI 3
$CEN
^UTable of Contents|U
$SKI 2
$VER
$TABS 10,60
SECTION		PAGE
$TABS 10,62
$TOC:>
)   #com( END #TOC )





















#com(*******************************************************
			    # M E M O
     *******************************************************

	The #MEMO macro may be used to generate a standard memo
	heading.
	
	Parameters 'tostr', 'fromstr', 'datestr', 'subjectstr', 
	and 'ccstr' are simply placed after the corresponding
	memo heading lines, e.g., 'To:', 'From:', etc. The 'ccstr'
	parameter is optional; if omitted then the 'CC:' heading
	is also omitted.					    )

#define(#memo,tostr,fromstr,datestr,subjectstr,ccstr,&
$PAGE
$SKIP 2  $INDENT +10
$PARAGRAPH -10
To:\\\\\\\\tostr
$SKIP $PARAGRAPH -10
From:\\\\\\fromstr
$SKIP $PARAGRAPH -10
Date:\\\\\\datestr
$SKIP $PARAGRAPH -10 
Subject:\\\subjectstr
#if(ccstr,&
$JUSTIFY LEFT
$SKIP $PARAGRAPH -10
CC:\\\\\\\\ccstr
$JUSTIFY&)
$SKIP 3  $INDENT -10 &
)   #com( END #MEMO )














#com(*******************************************************
		    # S E C T _ D E F A U L T
     *******************************************************

	The #SECT_DEFAULT macro is used to change the default
	values for the literals needed to skip lines before
	and after section titles. There are six possible
	parameters corresponding to the following literals:
	   1. lines skipped before level 1 section titles
	       (if equal to page length title will start
	        on the top of the next page              )
	   2. lines skipped after  level 1 section titles,
	   3. lines skipped before level 2 section titles,
	   4. lines skipped after  level 2 section titles,
	   5. lines skipped before level 3+ section titles,
	   6. lines skipped after  level 3+ section titles.
	If any parameter is omitted its default value will
	remain unchanged.					   )

#define(#sect_default,before_l1,after_l1,before_l2,after_l2,&
before_l3,after_l3,&
#if(before_l1,&
#literal(#skip_before_l1,before_l1),&
#literal(#skip_before_l1,"#skip_before_l1))&
#if(after_l1,&
#literal(#skip_after_l1,after_l1),&
#literal(#skip_after_l1,"#skip_after_l1))&
&
#if(before_l2,&
#literal(#skip_before_l2,before_l2),&
#literal(#skip_before_l2,"#skip_before_l2))&
#if(after_l2,&
#literal(#skip_after_l2,after_l2),&
#literal(#skip_after_l2,"#skip_after_l2))&
&
#if(before_l3,&
#literal(#skip_before_l3,before_l3),&
#literal(#skip_before_l3,"#skip_before_l3))&
#if(after_l3,&
#literal(#skip_after_l3,after_l3),&
#literal(#skip_after_l3,"#skip_after_l3))&
&
#assign(#sect_default_level,"#num("#sect_default_level + 1))&
$SKIP 0&
)   #com( END #SECT_DEFAULT )
#com(*******************************************************
			# S E C T _ P O P
     *******************************************************

	The #SECT_POP macro will reset the #SECT literals back
	to their values prior to the last #SECT_DEFAULT call.
	No parameters are needed.				)

#define(#sect_pop,&
#if("#gtn("#sect_default_level,0),&
#assign(#sect_default_level,"#num("#sect_default_level - 1))&
#undef(#skip_before_l1)&
#undef(#skip_after_l1)&
#undef(#skip_before_l2)&
#undef(#skip_after_l2)&
#undef(#skip_before_l3)&
#undef(#skip_after_l3),&
#pop_error(SECT))&&
$SKIP 0&
)   #com( END #SECT_POP )

























#com(*******************************************************
		     # P A R _ D E F A U L T
     *******************************************************

	#PAR_DEFAULT resets the default values for the literals
	involved in the #PAR macro. There are two possible
	parameters. The first will reset the number of lines
	skipped before the new paragraph. The second will reset
	the first line indenture of paragraphs. If a parameter
	is not given its default value will not be changed.	)

#define(#par_default,before_par,ind_first_line,&
&
#if(before_par,&
#literal(#lines_before_par,before_par),&
#literal(#lines_before_par,"#lines_before_par))&
&
#if(ind_first_line,&
#literal(#first_line_indent,ind_first_line),&
#literal(#first_line_indent,"#first_line_indent))&
&
#assign(#par_default_level,"#num("#par_default_level + 1))&
$SKIP 0&
)   #com( END #PAR_DEFAULT )





















#com(*******************************************************
			 # P A R _ P O P
     *******************************************************

	When #PAR_POP is called it resets the values for the
	literals used in #PAR back to their values immediatly
	preceding the last #PAR_DEFAULT macro call. No
	parameters are needed.					)

#define(#par_pop,&
#if("#gtn("#par_default_level,0),&
#assign(#par_default_level,"#num("#par_default_level - 1))&
#undef(#lines_before_par)&
#undef(#first_line_indent),&
#pop_error(PAR))&&
$SKIP 0&
)   #com( END #PAR_POP )




























#com(*******************************************************
		  # F I G U R E _ D E F A U L T
     *******************************************************

	The #FIGURE_DEFAULT macro is used to reset the default
	literals used in #BEGINFIGURE and #ENDFIGURE. Three
	parameters may be specified. The first resets the
	relative indenture for figures. The second is the number
	of lines skipped after the #BEGINFIGURE macro call, and
	the third is the number of lines skipped after the 
	#ENDFIGURE macro call. Any parameter not given will
	retain its current default value.			   )

#define(#figure_default,new_indent,lines_before,lines_after,&
&
#if(new_indent,&
#literal(#figure_indent,new_indent),&
#literal(#figure_indent,"#figure_indent))&&
&
#if(lines_before,&
#literal(#skip_before_figure,lines_before),&
#literal(#skip_before_figure,"#skip_before_figure))&&
&
#if(lines_after,&
#literal(#skip_after_figure,lines_after),&
#literal(#skip_after_figure,"#skip_after_figure))&&
&
#assign(#figure_default_level,"#num("#figure_default_level + 1))&
$SKIP 0&
)   #com( END #FIGURE_DEFAULT )















#com(*******************************************************
		      # F I G U R E _ P O P
     *******************************************************

	The #FIGURE_POP macro resets the values of the #BEGINFIGURE
	and #ENDFIGURE literals back to their values immediatly
	before the last #FIGURE_DEFAULT macro call. No parameters
	are needed for #FIGURE_POP.				      )

#define(#figure_pop,&
#if("#gtn("#figure_default_level,0),&
#assign(#figure_default_level,"#num("#figure_default_level - 1))&
#undef(#figure_indent)&
#undef(#skip_before_figure)&
#undef(#skip_after_figure),&
#pop_error(FIGURE))&&
$SKIP 0&
)   #com( END #FIGURE_POP )



























#com(*******************************************************
		    # I T E M _ D E F A U L T
     *******************************************************

	The #ITEM_DEFAULT macro is used to change the default
	values used by the ITEM macros. The possible parameters
	correspond exactly to those of the #BEGINITEM macro.
	If a parameter is given its value will replace the
	current default value for that parameter. If a 
	parameter is omitted its default value will remain 
	unchanged.						)

#define(#item_default,new_indent,new_skip_before_each,new_start_number,&
new_before_first_item,new_after_last_item,&
&
#if(new_indent,&
#literal(#item_indentation,new_indent),&
#literal(#item_indentation,"#item_indentation))&
&
#if(new_skip_before_each,&
#literal(#skip_before_each_item,new_skip_before_each),&
#literal(#skip_before_each_item,"#skip_before_each_item))&
&
#if(new_start_number,&
#literal(#start_number,new_start_number),&
#literal(#start_number,"#start_number))&
&
#if(new_before_first_item,&
#literal(#skip_before_first_item,new_before_first_item),&
#literal(#skip_before_first_item,"#skip_before_first_item))&
&
#if(new_after_last_item,&
#literal(#skip_after_last_item,new_after_last_item),&
#literal(#skip_after_last_item,"#skip_after_last_item))&
#assign(#item_default_level,"#num("#item_default_level + 1))&
$SKIP 0&
)   #com( END #ITEM_DEFAULT )








#com(*******************************************************
                        # I T E M _ P O P
     *******************************************************

	The #ITEM_POP macro is used to return the default values
	used by the ITEM macros back to the values they held
	prior to the last #ITEM_DEFAULT macro call. There
	are no pasameters to this macro.			)

#define(#item_pop,&
#if("#gtn("#item_default_level,0),&
#assign(#item_default_level,"#num("#item_default_level - 1))&
#undef(#item_indentation)&
#undef(#skip_before_each_item)&
#undef(#start_number)&
#undef(#skip_before_first_item)&
#undef(#skip_after_last_item),&
#pop_error(ITEM))&
$SKIP 0&
)   #com( END #ITEM_POP )

























#com(*******************************************************
		  # M A R G I N _ D E F A U L T
     *******************************************************

	#MARGIN_DEFAULT allows the user to change the default
	literal values associated with the #BEGINMARGIN and
	#ENDMARGIN macros. The four possible parameters for 
	#MARGIN_DEFAULT (in order) are: the new relative
	indenture from the left margin, the new relative
	indenture from the right margin, the new number of
	lines to skip after the #BEGINMARGIN call, and the new 
	number of lines to skip after the #ENDMARGIN call. If
	any of the parameters are omitted their default values
	will remain unchanged.					)

#define(#margin_default,new_left,new_right,new_before,new_after,&
&
#if(new_left,&
#literal(#left_indent,new_left),&
#literal(#left_indent,"#left_indent))&
&
#if(new_right,&
#literal(#right_indent,new_right),&
#literal(#right_indent,"#right_indent))&
&
#if(new_before,&
#literal(#lines_before_margin,new_before),&
#literal(#lines_before_margin,"#lines_before_margin))&&
&
#if(new_after,&
#literal(#lines_after_margin,new_after),&
#literal(#lines_after_margin,"#lines_after_margin))&&
&
#assign(#margin_default_level,"#num("#margin_default_level + 1))&
$SKIP 0 )   #com( END #MARGIN_DEFAULT )










#com(*******************************************************
		      # M A R G I N _ P O P
     *******************************************************

	#MARGIN_POP reinstates the margins that were in effect
	immediatly preceding the last #MARGIN_DEFAULT call.    )

#define(#margin_pop,&
#if("#gtn("#margin_default_level,0),&
#assign(#margin_default_level,"#num("#margin_default_level - 1))&
#undef(#left_indent)&
#undef(#right_indent)&
#undef(#lines_before_margin)&
#undef(#lines_after_margin),&
#pop_error(MARGIN))&&
$SKIP 0&
)   #com( END #MARGIN_POP )




























#com(*******************************************************
		     # T O C _ D E F A U L T
     *******************************************************

	The #TOC_DEFAULT macro is used to change the indenture
	of level 3 ... level n section titles in the table of
	contents. Only one parameter is necessary corresponding
	to the number of spaces to indent these section titles.
	Calling this macro with no parameters is meaningless.    )

#define(#toc_default,new_indent,&
&
#if(new_indent,
#literal(#toc_indent,new_indent)&
#literal(#toc_more_pad,"#substr("#blanks,1,"#num("#toc_indent)))&
#if("#gen("#level,3),&
#assign(#tocpad,&
"#substr("#blanks,1,"#num("#toc_indent * (#level - 2))))))&&
&
#assign(#toc_default_level,"#num("#toc_default_level + 1))&
$SKIP 0&
)   #com( END #TOC_DEFAULT )























#com(*******************************************************
			 # T O C _ P O P
     *******************************************************

	The #TOC_POP macro will change the indenture used for
	level 3 ... level n section title entries in the table
	of contents back to the indenture immediatly before
	the last #TOC_DEFAULT macro call. No parameters are
	needed.							)

#define(#toc_pop,&
#if("#gtn("#toc_default_level,0),&
#assign(#toc_default_level,"#num("#toc_default_level - 1))&
#undef(#toc_more_pad)&
#undef(#toc_indent)&
#if("#gen("#level,3),&
#assign(#tocpad,&
"#substr("#blanks,1,"#num("#toc_indent * (#level - 2)))),&
#assign(#tocpad,)),&&
#pop_error(TOC))&&
$SKIP 0&
)   #com( END #TOC_POP )























#com(*******************************************************
		     # T A B _ D E F A U L T
     *******************************************************

	The #TAB_DEFAULT macro allows users to set their own tab
	settings if the current default settings are not sufficient.
	A total of eight parameters may be given corresponding to
	the eight tab settings allowed by Scribe. Zero to eight
	consecutive parameters may be specified. If trailling
	parameters are omitted their corresponding tab settings
	will be set to appear as spaces(eg. if five parameters
	5, 10, 15, 25, and 30 are specified the last three
	settings will be 31, 32, and 33). If no parameters are
	given tab settings will be 1, 2, 3, 4, 5, 6, 7, and 8.	    )

#define(#tab_default,tab1,tab2,tab3,tab4,tab5,tab6,tab7,tab8,&
&
#if(tab1,#literal(#tab_1,tab1),#literal(#tab_1,1))&
#if(tab2,#literal(#tab_2,tab2),#literal(#tab_2,"#num("#tab_1 + 1)))&
#if(tab3,#literal(#tab_3,tab3),#literal(#tab_3,"#num("#tab_2 + 1)))&
#if(tab4,#literal(#tab_4,tab4),#literal(#tab_4,"#num("#tab_3 + 1)))&
#if(tab5,#literal(#tab_5,tab5),#literal(#tab_5,"#num("#tab_4 + 1)))&
#if(tab6,#literal(#tab_6,tab6),#literal(#tab_6,"#num("#tab_5 + 1)))&
#if(tab7,#literal(#tab_7,tab7),#literal(#tab_7,"#num("#tab_6 + 1)))&
#if(tab8,#literal(#tab_8,tab8),#literal(#tab_8,"#num("#tab_7 + 1)))&
&
$TABS #tab_1<:,:>#tab_2<:,:>#tab_3<:,:>#tab_4<:,:>&
#tab_5<:,:>#tab_6<:,:>#tab_7<:,:>#tab_8&&
&
#assign(#tab_default_level,"#num("#tab_default_level + 1))&
)   #com( END #TAB_DEFAULT )














#com(*******************************************************
			 # T A B _ P O P
     *******************************************************

	#TAB_POP emits a Scribe command to reassign the tab
	positions back to their values before the last
	#TAB_DEFALUT macro call.				)

#define(#tab_pop,&
#if("#gtn("#tab_default_level,0),&
#assign(#tab_default_level,"#num("#tab_default_level - 1))&
#undef(#tab_1)&
#undef(#tab_2)&
#undef(#tab_3)&
#undef(#tab_4)&
#undef(#tab_5)&
#undef(#tab_6)&
#undef(#tab_7)&
#undef(#tab_8)&
$TABS #tab_1<:,:>#tab_2<:,:>#tab_3<:,:>#tab_4<:,:>&
#tab_5<:,:>#tab_6<:,:>#tab_7<:,:>#tab_8 ,&
#pop_error(TAB))&&
)   #com( END #TAB_POP )






















#com(
		 E_N_D   S_C_R_M_A_C
  )
    sN/lm