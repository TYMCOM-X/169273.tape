












                             PROPRIETARY DOCUMENT INFORMATION
                             ----------- -------- -----------


     The  material  contained  in  this  document  is  proprietary  and 
     confidential  to  TYMSHARE,  Incorporated,  and  is  not  to  be
     used,  reproduced  or  disclosed  except  in  accordance  with
     program  license  or  with  written  permission  from  the  legal 
     division  of  TYMSHARE,  Incorporated,  20705 Valley Green Drive, 
     Cupertino,  California  95014.


                             Copyright (C) 1980 by TYMSHARE, Inc.





































	This document briefly describes all PASCAL compiler source
     files.  Also two lists accompany each source file name.  The first
     one contains sequential numbers of the PASCAL compiler run time
     modules that are built with this particular file.  The second one
     contains sequential numbers of the include files for this
     particular file.  If two different relocatable files are produced
     from a particular source file the list of the run time modules
     (the first list) is accompanied with "!d".
	There are three files (on the PASCOOR directory) associated
     with this document: CMLMDL.LIS, CMLSRC.LIS, and CMLINC.LIS.
     CMLMDL.LIS contains a full list of the PASCAL compiler run time
     modules.  Each module name is accompanied with a list of source
     files that it is built from.  CMLSRC.LIS consists of the same
     source file list as this document but without descriptions.  
     CMLINC.LIS contains a full list of the include files used by
     different source files of the PASCAL compiler.  A list of source
     files that use it is given for each include file.








***********************************************************************
*       This  is  the  compiler  initialization  module.   It
*    creates  the  initial  (builtin) symbol table and initializes
*    the global variables (which are located in PASDAT).  
***********************************************************************
 1 /pasini.pas		      /8;
                              :1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
                               17,18,19,20,22,30,31,32,33,34,35; 
-----------------------------------------------------------------------

***********************************************************************
*       This is the machine-dependent declarations module.  It enters
*    the system-dependent predefined procedures and functions into
*    the initial symbol table and initializes the PTMCON variables to
*    values which characterize the target machine.  
***********************************************************************
 2 /p10imd.pas		      /8;
                              :1,2,8,9,10,11,30,36;
-----------------------------------------------------------------------

***********************************************************************
*       This  module  contains  the  symbol  table   utility
*    routines.  These  routines  are  used  by  nearly every other
*    module  in  the  compiler.  The  symbol  table  structure  is
*    specified  in  PASIST.INC,  and  particularly  in PASIST.TYP,
*    which it includes.
***********************************************************************
 3 /pasutl.pas		      /2,8;   
                              :1,2,8,9,10,11,12,13,21,22,37;
-----------------------------------------------------------------------


***********************************************************************
*  	This  module  contains  the  data  allocation  utility
*    routines.
***********************************************************************
 4 /p10tal.pas		      /2,8;   
                              :1,2,8,9,10,11,38,39,112;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains  the  utility  routines  for  the
*    creation of value nodes in the symbol table.
***********************************************************************
 5 /pasval.pas		      /2,3,8; 
                              :1,2,8,9,10,11;
-----------------------------------------------------------------------

***********************************************************************
*       This is the Pascal Compiler Driver Program.  It reads and 
*    processes command lines and executes immediate commands.  
*    In particular it loads a specified environment file.  Also it
*    initializes (the STARTUP procedure) the compiler permanent data 
*    the first time Pass 1 is invoked.  This involves writing a version
*    message, initializing the log record skeleton, determining whether
*    the compiler is being run from the terminal or from another
*    program, and reading the auto-startup command file in the latter
*    case.
***********************************************************************
 6 /newpas.pas		      /1,7;               !d 
  			      :1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18, 
  			       19,20,30,33,40,41,42,43,44,45,46,47;  
-----------------------------------------------------------------------

***********************************************************************
*       This is the command line manager module, which is used by
*    NEWPAS to manipulate an internal list of pending commands from
*    auto-startup and indirect command files.
***********************************************************************
 7 /pascmd.pas		      /1,2,7; 
  			      :1,2,3,4,5,6,7,20; 
-----------------------------------------------------------------------

***********************************************************************
*       This program drives the compiler first pass.  For an
*    environment compilation it also examines all the type identifiers
*    defined in the root block, and prints error messages if any of
*    them are undefined.  At the end of the compiler first pass it
*    saves the heap and, if the AUTO_RUN flag is set, initiates the
*    next pass.	 There are three different passes that can be initiated
*    as next pass.  If the QUICK and NOSOURCE options are specified
*    then PASS4 (P10CCG - quick pass code generator) will be run.  If
*    the QUICK and SOURCE options are specified then PASS3 (listing
*    producing pass) will be run.  Otherwise PASS2 (optimization pass)
*    will be run.  Note after PASS1 the intermediate form file is ready
*    to be processed by the quick code generator.
***********************************************************************
 8 /pass1 .pas		      /2;
   			      :1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, 
  			       17,18,19,20,21,22,27,29,30,33,40,42,43, 
  			       45,46,48,49,50,51,52,53,54,55,56,57,58, 
  			       59,60;  
-----------------------------------------------------------------------


***********************************************************************
*       This is the lexical analyzer.  It maintains source files, and
*    generates source listing; processes directive lines, and  handles
*    conditional comments.
***********************************************************************
 9 /paslex.pas		      /2;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,31, 
  			       50,51,61;
-----------------------------------------------------------------------

***********************************************************************
*       This program contains the utility routines  to check and set
*    semantic options for a current block.
***********************************************************************
10 /passmo.pas		      /2;
  			      :1,2,8,9,10,11,12,13,14,15,16,21,22,31,
			       40;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains  functions  which  test  for  the
*    compatibility of two types.
***********************************************************************
11 /pascmp.pas		      /2;
   			      :1,2,8,9,10,11;
-----------------------------------------------------------------------

***********************************************************************
*       This is the PASCAL Parse Tree Constructor.  It contains the
*    LL(1) analysis (top-down, no-backup) package.  Assumes the
*    existence of two external routines, "scan", the lexical analyzer,
*    and "generate", the semantic processor.  The LL(1) compiler
*    generator creates three include files: "grammar.sym" which defines
*    a scalar type naming all terminal symbols and designated
*    nonterminal symbols; "grammar.sem" which defines a scalar type
*    giving the semantic operation codes that are passed to generate;
*    and "grammar.tab" which contains the parsing machine tables and
*    its associated definitions.
*       The tree to be constructed consists of nodes and their
*    definition chains.  A stack of selected, recognized symbols is
*    kept as a linear chain of nodes;  Substructure is created by the
*    semantic operations.  Typically, they pop certain nodes off of the
*    stack and make them the definition of a new node which is then
*    pushed on the stack.  Determination of the nodes to pop is aided
*    by remembering "marker" nodes at each nonterminal symbol
*    recognition call. For example, the definition of many nonterminals
*    is simply all nodes pushed after the recognition call.
***********************************************************************
12 /pasanl.pas		      /2;
   			      :1,2,8,9,10,11,12,13,21,22,40,49,62,63;
-----------------------------------------------------------------------









***********************************************************************
*  	This program processes the current block and builds the symbol
*    table in correspondance with the declarations processed.  In
*    particular it containes:  The subroutines to process all
*    declarations;  the BLOCK subroutine to process the body of the
*    main program and subroutines (it calls the BODY routine from
*    PASBOD.PAS and the TYPE_SEMANTICS routine from PASTSM.PAS); the
*    SEMANTICS public routine that is the main semantication routine
*    (it creates the top-level program block, processes the ptree,
*    and calls BLOCK to read the declarations and (optional) body of
*    the main block.
***********************************************************************
13 /pasblk.pas		      /2;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,24, 
   			       27,29,31,34,40,43,48,54,57,59,64,65,66, 
   			       67;
-----------------------------------------------------------------------

***********************************************************************
*       This is the program to perform semantication  of procedure and
*    program bodies.  Contains the BODY public routine and subroutines
*    to  process  all  the  various sorts  of  statements which can
*    occur in a Pascal program.  Semantication of  data  references 
*    and values  is  handled  by  the expression semantics modules: 
*    PASESM, PASESU, PASREF, and PASSFC.
***********************************************************************
14 /pasbod.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,27,29,30,31,
  			       34,48,52,53,54,55,57,65,68,69,70,71;  
-----------------------------------------------------------------------

***********************************************************************
*  	This is the program to semanticate the type declarations.
*    Contains the routines to convert the type to a packed type, to
*    create a procedure, function or condition type node, to process
*    the definition chain of a structured type.  The TYPE_SEMANTICS
*    public routine that semanticates a parse tree describing a type
*    has to be called to involve this program.
***********************************************************************
15 /pastsm.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,27,29,31,34,
  			       48,65,71;
-----------------------------------------------------------------------

***********************************************************************
*       This is the Expression Semantics module.  It contains entry 
*    points for most of the routines (except for REF_SEMANTICS) which
*    are used in performing semantic analysis of expressions.  Refer
*    to module PASREF for the REF_SEMANTICS routine.
***********************************************************************
16 /pasesm.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,27,29,31,34,
  			       48,52,53,57,68,69,70,71,72,73;   
-----------------------------------------------------------------------






***********************************************************************
*       This is the Reference Semantics module.  It contains the
*    REF_SEMANTICS routine that is the primary routine for the
*    evaluation of expression semantics.   Almost all other expression
*    semantics routines rely on REF_SEMANTICS.  REF_SEMANTICS is called
*    with a parse tree representing  an expression,  and returns an
*    intermediate form expression tree  for the same expression.
*    Logically,  PASREF could be grouped with PASESM; it is a separate
*    module because of its size and importance.
***********************************************************************
17 /pasref.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,27,29,31,48,
  			       57,65,69,70,71,72,73;  
-----------------------------------------------------------------------

***********************************************************************
*       This is the Expression Manipulation Utility module.  It 
*    contains entry points for a variety of routines which are used in
*    the manipulation of the intermediate form  structures for 
*    expressions.  These routines are used primarily by the other 
*    expression semantics modules (PASESM,  PASREF,  and  PASFLD),  but
*    are available for use by the rest of the compiler as well.  PASEMU
*    was created by selecting all the PASESU routines which were only
*    used in Pass 1, and creating a new module for them.
***********************************************************************
18 /pasemu.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,31,38,48,57,
  			       69;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the STD_FCALL routine, which performs
*    semantic analysis for calls on standard functions.  It takes a 
*    standard function code, a list of arguments (which is a parse tree
*    chain), and the defining parse tree node for the call (used only 
*    for error messages), and returns an expression tree representing
*    the call.  Note that this is not necessarily a function call
*    expression tree; some standard functions return constant values.
***********************************************************************
19 /passfc.pas		      /2;
  			      :1,2,8,9,10,11,12,13,21,22,27,29,31,48,
  			       53,57,65,68,69,70,71;  
-----------------------------------------------------------------------

***********************************************************************
*       This is the debugging dump module for the compiler PASS1.  It
*    contains a collection of procedures to dump portions of the symbol
*    table, intermediate form code, etc., to a .DMP file.
***********************************************************************
20 /pa1dmp.pas		      /2;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,32,40,49, 
  			       58,74;  
-----------------------------------------------------------------------







***********************************************************************
*       This module handles the generation of the cross reference
*    files when the compiler PASS1 is run.  The files it manipulates
*    are:
*            name.XRF -- the cross reference file
*            name.XST -- the symbol table file
*            name.XNM -- the name file
***********************************************************************
21 /pa1xrf.pas		      /2;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,29, 
   			       45,48;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the routines to open and close the PASCAL
*    compiler global cross reference file.
***********************************************************************
22 /pasglb.pas		      /2;
   			      :1,2,3,4,5,6,7;
-----------------------------------------------------------------------

***********************************************************************
*       This is the call graph module.  It contains routines to create
*    and manipulate the call graph of a program.
***********************************************************************
23 /pascgr.pas		      /2;
   			      :1,2,8,9,10,11,12,13,21,22,31,48,57,71;
-----------------------------------------------------------------------

***********************************************************************
*  	This is the PDP-10 storage allocation module.  It contains only
*    single entry point ALLOCATE_STORAGE.  This routine assigns each
*    local symbol a location relative to the start of its owner's stack
*    frame, and assigns a low-segment address to each uninitialized
*    static variable.
***********************************************************************
24 /p10alc.pas		      /2;
  			      :1,2,8,9,10,11,34,39,113;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the constant expression folding module.
*    Actually, two distinct modules are compiled from PASFLD.  If $X1
*   nabled, then PA1FLD is generated.  The version of FOLD in this
*    module is recursive, and will fold all the operands of an
*    expression before attempting to fold the expression itself.  If
*    $X2 is enabled, then PA2FLD is generated.  This version of FOLD is
*    non-recursive.  It assumes that the operands of an expression will
*    already have been folded when FOLD is called.
***********************************************************************
25 /pasfld.pas		      /2,3;               !d 
  			      :1,2,8,9,10,11,12,13,21,22,37,48,57,69;
-----------------------------------------------------------------------








***********************************************************************
*       This is the Expression Semantics Utility module.  It contains
*    entry points for a variety of routines which are used in the
*    manipulation of the intermediate form structures for expressions. 
*    These routines are used primarily by the other expression
*    semantics modules (PASESM, PASREF, and PASFLD), but are available 
*    for use by the rest of the compiler as well.
***********************************************************************
26 /pasesu.pas		      /2,3;   
  			      :1,2,8,9,10,11,12,13,21,22,37,38,48,57;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains miscellaneous mathematical functions for
*    use elsewhere in the compiler.
***********************************************************************
27 /pasmth.pas		      /2,3,5,6,8;  
  			      :1,2;
-----------------------------------------------------------------------

***********************************************************************
*       This module consists of the routines that determine if a 
*    parameter or all parameters of a specified type must be passed by
*    address instead of by value.
***********************************************************************
28 /p10prm.pas		      /2,3,6,8;
  			      :1,2,8,9,10,11,114;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to convert numbers
*    into strings.
***********************************************************************
29 /pascv .pas		      /1,2,3,4,5,6,7;   
  			      :1,2,30; 
-----------------------------------------------------------------------

***********************************************************************
*       This module contains coroutines which read the source lines for
*    both the input and listing passes.	 In particular it contains the 
*    routines to handle INCLUDE, HEADER and SYSTEM directives, and to
*    process IF and IFNOT directives.
***********************************************************************
30 /pasrdr.pas		      /2,4;   
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,15,21,22, 
  			       40,48,50;
-----------------------------------------------------------------------

***********************************************************************
*       This is the PASCAL Option Definitions Data Module.  Consists of
*    the constants and types.
***********************************************************************
31 /pasopd.pas		      /1,2,4,7;
  			      :1,2,15,16;   
-----------------------------------------------------------------------





***********************************************************************
*       This module contains switch manipulation utilities.
***********************************************************************
32 /passw .pas		      /1,2,3,4,5,6,7;   
  			      :1,2;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains utilities  for  manipulating  the
*    intermediate form.  All the procedures in this module operate on a
*    "current tuple chain".  This chain corresponds to the procedure
*    body currently being compiled.
***********************************************************************
33 /pasifu.pas		      /2,3,5,6;
  			      :1,2,4,8,9,10,11,12,13,45,48,50,75;
-----------------------------------------------------------------------

***********************************************************************
*       This is the compiler second pass driver.  For each block it
*    calls the intermediate form preparation routines and, if the
*    OPTIMIZE option is specified, the intermediate form optimization
*    routines.  If the AUTO_RUN flag is set, it initiates the next 
*    pass.  PASS3 is run only if the error count is greater than zero
*    or a list file is required; otherwise PASS4 is run.  Note only
*    noquick pass code generator can be run after PASS2 was invoked.
***********************************************************************
34 /pass2 .pas		      /3;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,21,22,23, 
  			       24,25,26,28,29,30,33,40,42,44,45,46,48, 
  			       50,57,60,76,77,78;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the MAKE_BASIC_BLOCKS routine that
*    processes the tuple list output from the first pass (that is, the
*    labelling is assumed to be incomplete), and builds a complete,
*    simplified, and ordered basic block graph.
***********************************************************************
35 /pasjmp.pas		      /3;
  			      :1,2,8,9,10,11,12,13,23,24,25,26,40,48,
  			       57,78;  
-----------------------------------------------------------------------

***********************************************************************
*       This is the intermediate form optimization module.  It contains 
*    the procedures which are directly relevant to optimization.
***********************************************************************
36 /pasopt.pas		      /3;
  			      :1,2,8,9,10,11,12,13,21,22,23,24,26,28,
  			       29,34,40,48,57,69,78,79;
-----------------------------------------------------------------------









***********************************************************************
*       This module handles the generation of the cross reference
*    files when the compiler PASS2 is run.  The files it manipulates
*    are:
*            name.XRF -- the cross reference file
*            name.XST -- the symbol table file
*            name.XNM -- the name file
***********************************************************************
37 /pa2xrf.pas		      /3;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,23,24,29, 
  			       45,48;  
-----------------------------------------------------------------------

***********************************************************************
*       This module performs machine specific translation of the
*    intermediate form.  In particular, it converts references to
*    memory access form and determines the proper "shape" (length,
*    precision, etc.) of individual operators.
***********************************************************************
38 /p10sel.pas		      /3;
  			      :1,2,8,9,10,11,12,13,24,26,30,38,39,40,
  			       48,57,69,78; 
-----------------------------------------------------------------------

***********************************************************************
*       This is the debugging dump module for the compiler second pass.
*    It contains a collection of procedures to dump portions of the
*    symbol table, intermediate form code, etc., to a .DMP file.
***********************************************************************
39 /pa2dmp.pas		      /3;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,23,24,26, 
  			       40,48,57,58,74;   
-----------------------------------------------------------------------

***********************************************************************
*       This is the bit-set manipulation module.  Vectors of bit sets 
*    are used for a number of functions throughout the optimizer. 
*    Since these vectors and sets must be dynamically created, and 
*    their manipulation is repetitive, the creation and manipulation of
*    bit set vectors has been centralized in this module.
*       Each bit set vector is referred to with a descriptor, which
*    must be declared with type "svector".  Such a descriptor is
*    initialized by NewSvector, and must be passed as a parameter to
*    all the other routines in this module.
***********************************************************************
40 /passet.pas		      /3,4;   
  			      :24;
-----------------------------------------------------------------------

***********************************************************************
*       This is the compiler PASS3 main program.  It creates a listing
*    file and displays error messages on the terminal.  Also it makes a
*    choice to run quick or noquick pass code generator.
***********************************************************************
41 /pass3 .pas		      /4;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, 
  			       17,18,21,22,30,33,41,42,43,44,45,46,50, 
  			       51,58,60;
-----------------------------------------------------------------------


***********************************************************************
*       This is the symbol table dumping module.  It performs the
*    functions required by the SYMBOLS, XREF, and CALLS options.
***********************************************************************
42 /passdm.pas		      /4;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,23,24,29, 
  			       30,41,45,58,80;   
-----------------------------------------------------------------------

***********************************************************************
*  	This program drives PASS4 of the compiler.  PASS4 is the code
*    generation pass.  Note this program drives both quick and noquick
*    pass code generation.
***********************************************************************
43 /pass4 .pas		      /5,6;   
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,17,18,30, 
  			       33,40,42,44,45,46,48,57,58,60,81;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the GEN_CODE driving routine for the
*    noquick pass code generator.  It directs initialization, 
*    generation, and termination.
***********************************************************************
44 /p10gen.pas		      /5;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,30,44,48, 
  			       57,82,83,84,85,86,87,88,89,90,91,92,93;
-----------------------------------------------------------------------

***********************************************************************
*       This is the expression evaluation and register manipulation
*    module for the noquick pass code generator.
***********************************************************************
45 /p10exp.pas		      /5;
  			      :1,2,8,9,10,11,12,13,30,38,48,57,82,83,
  			       86,88,89,90,94;   
-----------------------------------------------------------------------

***********************************************************************
*       This is the comparision and jump code generation module for the
*    noquick pass code generator.
***********************************************************************
46 /p10cmp.pas		      /5;
  			      :1,2,8,9,10,11,12,13,30,48,82,83,86,87,
  			       90;
-----------------------------------------------------------------------

***********************************************************************
*       This is the string code generation module for the noquick pass 
*    code generator.
***********************************************************************
47 /p10dsc.pas		      /5;
  			      :1,2,8,9,10,11,12,13,30,48,82,83,86,87,
  			       89,94;  
-----------------------------------------------------------------------





***********************************************************************
*       This module contains subroutine call utilities for the noquick
*    pass code generator.
***********************************************************************
48 /p10cll.pas		      /5;
  			      :1,2,8,9,10,11,12,13,48,82,83,86,87;   
-----------------------------------------------------------------------

***********************************************************************
*       This module contains various utilities for the noquick pass 
*    code generator.
***********************************************************************
49 /p10cgu.pas		      /5;
  			      :1,2,8,9,10,11,12,13,30,48,82,85,86,91,
  			       95;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to emit supports for 
*    the DEBUG and TRACE options.
***********************************************************************
50 /p10deb.pas		      /5,6;   
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,40,48,58, 
  			       82,83,84,86,87,91,94,96;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to emit a relocatable
*    file.
***********************************************************************
51 /p10rel.pas		      /5,6;   
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,30,42,48, 
  			       58,82,83,94; 
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to produce a Macro-10
*    assembly listing.
***********************************************************************
52 /p10mac.pas		      /5,6;   
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,30,48,58, 
  			       82,83;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to produce a
*    Line number / Code address cross reference map.
***********************************************************************
53 /pasmap.pas		      /5,6;   
  			      :1,2,3,4,5,6,7,8,9,10,11,30,44,58;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains all routines necessary for constant
*    pooling.
***********************************************************************
54 /p10csp.pas		      /5,6;   
  			      :1,2,8,9,10,11,12,13,48,82;  
-----------------------------------------------------------------------


***********************************************************************
*       This module contains the LOG_WRITE routine.  (It is not
*    completely clear what this program does).
***********************************************************************
55 /paslog.pas		      /2,4,5,6;
  			      :18,42;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains various utilities for the quick pass code
*    generator.
***********************************************************************
56 /q10cgu.pas		      /6;
  			      :1,2,8,9,10,11,12,13,30,48,85,86,91,95,
  			       97;
-----------------------------------------------------------------------

***********************************************************************
*  	This module contains two public routines to handle an
*    intermediate form for the quick pass code generator.  The 
*    EXPLODE_BOOLEANS routine scans the intermediate form and explodes
*    boolean operators into jump form.  MAKE_BASIC_BLOCKS processes the
*    tuple list output from the first pass (that is, the labelling is
*    assumed to be incomplete), and builds a complete, simplified, and
*    ordered basic block graph.
***********************************************************************
57/ q10jmp.pas		      /6;
  			      :1,2,8,9,10,11,12,13,23,24,25,26,40,48,
  			       52,57,78;
-----------------------------------------------------------------------

***********************************************************************
*       This is the set expression evaluation module for the quick pass
*    code generator.
***********************************************************************
58 /q10set.pas		      /6;
  			      :1,2,8,9,10,11,12,13,38,39,48,57,86,97,
  			       98,99,100,101,102,103; 
-----------------------------------------------------------------------

***********************************************************************
*       This module contains string and I/O code generation routines 
*    for the quick pass code generator.
***********************************************************************
59 /q10dsc.pas		      /6;
  			      :1,2,8,9,10,11,12,13,30,48,86,97,98,99,
  			       100,101,102,104;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the utility routines to generate code for
*    the ASSERT statement during the quick pass code generation.
***********************************************************************
60 /q10err.pas		      /6;
  			      :1,2,3,4,5,6,7,8,9,10,11,105;
-----------------------------------------------------------------------





***********************************************************************
*  	This module contains a variety of routines for the quick pass
*    code generator.  In particular it contains the GEN_CODE driving
*    routine for the quick pass code generator.  This routine directs
*    initialization, generation, and termination.
***********************************************************************
61 /q10gen.pas		      /6;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,30,39,40, 
  			       43,44,48,57,76,84,85,86,91,92,93,97,99,
                               100,101,102,103,104,106,107;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains expression evaluation and register
*    manipulation routines for the quick pass code generator.
***********************************************************************
62 /q10exp.pas		      /6;
  			      :1,2,8,9,10,11,12,13,30,38,39,48,57,58,
  			       86,97,98,99,101,102,103,104,106; 
-----------------------------------------------------------------------

***********************************************************************
*       This is the debugging dump module.  It contains a collection 
*    of procedures to dump portions of the symbol table, intermediate
*    form code, etc., to a .DMP file.  This module is used only if 
*    the quick pass code generator is run.
***********************************************************************
63 /pa5dmp.pas		      /6;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,23,24,26, 
   			       40,48,57,58,74;  
-----------------------------------------------------------------------

***********************************************************************
*       This is the comparision and jump code generation module for the
*    quick pass code generator.
***********************************************************************
64 /q10cmp.pas		      /6;
  			      :1,2,8,9,10,11,12,13,30,48,86,97,98,99,
  			       100,102,103,104;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains subroutine call utilities for the quick
*    pass code generator.
***********************************************************************
65 /q10cll.pas		      /6;
  			      :1,2,8,9,10,11,12,13,39,48,86,97,98,99,
  			       100,102,103,104;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the declarations of the Pascal compiler
*    global data and the public routines: DAT_SAVE and DAT_GET.
***********************************************************************
66 /pasdat.pas		      /1,2,3,4,5,6,7,8; 
  			      :2,4,5,6,7,9,10,11,12,13,18,20,48,75;  
-----------------------------------------------------------------------



***********************************************************************
*       This module contains all error recording, formatting, and
*    reporting routines.  Errors reported during the first pass are
*    written to a temporary file '###ERR.TMP'.  For each line read
*    during the listing pass ERROR_ON_LINE is called to list any
*    associated errors.  Messages are extracted from the file
*    'PASERR.TXT'.  Other associated files created by the error
*    compiler are 'PASERR.TYP' which defines the error scalar types and
*    'PASERR.TAB' which defines the user-number and severity of each
*    error.  On detection of a fatal error during the first pass,
*    ERR_PRINT calls the coroutine ABORT to terminate the input pass at
*    that point.
***********************************************************************
67 /paserr.pas		      /2,3,4,8;
  			      :1,2,3,4,5,6,7,8,9,10,11,12,13,22,45,50, 
  			       108;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the VERSION public routine.  This routine
*    returns the DEC-10 standard version identification for a program. 
*    The version is taken from the job data area location  .JBVER
*    (absolute program location 137B).  It is returned as a character 
*    string of the general form "3D(127)-2".
***********************************************************************
68 /versio.pas		      /1,4,7; 
     			      :;
-----------------------------------------------------------------------

***********************************************************************
*       This is the formatted output package.
***********************************************************************
69 /fio   .pas		      /2,3,4,5,6;  
  			      :4,5,6;  
-----------------------------------------------------------------------

***********************************************************************
*       This module contains the DEL_FILE and RNAM_FILE routines.
***********************************************************************
70 /delren.pas		      /1,2,3,4,5,6,7;   
     			      :;
-----------------------------------------------------------------------

***********************************************************************
*       This is the program which will set the Pascal compiler version
*    number.  When run, SETVER prompts for a DEC format version number.
*    It then creates file PASVER.REL, which has no effect other than to
*    load the desired version number word at .JBVER (137B).  Loading
*    PASVER with a compiler link will then produce a compiler with the
*    specified version number.
***********************************************************************
71 /setver.pas		      /1,4,7; 
     			      :;
-----------------------------------------------------------------------






***********************************************************************
*       This program calls the DIE. routine.  (It is not completely
*    clear what this program does).
***********************************************************************
72 /q10die.mac		      /6;
  			      :109;
-----------------------------------------------------------------------

***********************************************************************
*       This program manipulates tmpcor files.
***********************************************************************
73 /tmpcor.mac		      /1,7;   
  			      :109;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains two routines to manipulate subroutine
*    variables.
***********************************************************************
74 /fioutl.mac		      /2,3,4,5,6;  
  			      :109;
-----------------------------------------------------------------------

***********************************************************************
*       This is the module to provide dynamic storage for PASCAL
*    programs via the routines NEW, DISPOSE, MARK, and RELEASE.  It 
*    defines the entry points NEW., DSPOS., MARK., RLEAS., and ALCO.
*    using the standard calling conventions for these routines.
***********************************************************************
75 /pasnew.mac		      /1,2,3,4,5,6,7,8; 
  			      :109;
-----------------------------------------------------------------------

***********************************************************************
*  	This module contains coroutine support routines.
***********************************************************************
76 /corout.mac		      /2,3,4,5,6,8;
     			      :;
-----------------------------------------------------------------------

***********************************************************************
*       This module contains a set of PASCAL-callable routines for
*    performing dump mode I/O.  This module provides opening and
*    closing of files,  and reading and writing of integral numbers of
*    blocks at one call.
***********************************************************************
77 /dumpio.mac		      /1,2,3,4,5,6,7,8; 
     			      :;
-----------------------------------------------------------------------

***********************************************************************
*  	This is the AUTO_RUN program.
***********************************************************************
78 /autoru.mac		      /1,2,3,4,5,6,7;   
     			      :;
-----------------------------------------------------------------------





***********************************************************************
*       This program loads and executes a program stored in a save
*    file.  The calling program is replaced by the new one.
***********************************************************************
79 /run   .mac		      /1,2,3,4,5,6,7;   
     			      :;
-----------------------------------------------------------------------

***********************************************************************
*  	This module consists of various routines for the PASCAL 
*    compiler.
***********************************************************************
80 /pasasm.mac		      /1,2,3,4,5,6,7,8; 
  			      :109,110,111; 
-----------------------------------------------------------------------











































_ 	;I