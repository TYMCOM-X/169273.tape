static var
    act_list: array [1..  37] of act_index :=
      ( (    1,    7), (    8,   10), (   11,   12), (   13,   18), 
	(    1,    7), (   19,   21), (   19,   21), (   22,   25), 
	(   26,   27), (   28,   30), (   31,   38), (   39,   40), 
	(    1,    7), (    1,    7), (   41,   43), (   44,   48), 
	(   19,   21), (   19,   21), (   19,   21), (   49,   56), 
	(   57,   58), (   59,   60), (   61,   62), (   63,   65), 
	(   66,   67), (   68,   70), (   71,   72), (   73,   75), 
	(   76,   77), (   78,   79), (   80,   82), (   83,   86), 
	(   87,   89), (   90,   92), (   93,   94), (   95,   96), 
	(   97,   99) );

static var
    lookup: array [1..   99] of int :=
      (     3,    4,    5,    7,    8,   13,    0,    1,   23,    0,
	    2,    0,    4,    5,    7,    8,   13,    0,   13,    5,
	    0,    9,   10,   11,    0,   12,    0,   13,    5,    0,
	   15,   16,   17,   18,   19,   21,   22,    0,   14,    0,
	    1,    6,    0,    9,   10,   11,    6,    0,   15,   16,
	   17,   18,   19,   21,   22,    0,   20,    0,   13,    0,
	    2,    0,   11,    6,    0,   12,    0,   13,    5,    0,
	   14,    0,   16,   20,    0,    1,    0,   13,    0,   13,
	   14,    0,    4,   13,   14,    0,    6,    7,    0,    5,
	   17,    0,   18,    0,   19,    0,   10,   26,    0 );

static var
    action: array [1..   99] of act_entry :=
      ( (sh,   4), (sr,   7), (sh,   5), (sh,   6), (sh,   7), 
	(sh,  12), (er     ), (sh,  13), (ac     ), (er     ), 
	(sh,  14), (rd,   1), (sr,   7), (sh,   5), (sh,   6), 
	(sh,   7), (sh,  12), (er     ), (sh,  12), (sh,  17), 
	(er     ), (sr,  13), (sr,  14), (sh,  18), (rd,  12), 
	(sh,  19), (rd,  15), (sh,  12), (sh,  17), (rd,  17), 
	(sr,  24), (sr,  25), (sr,  26), (sr,  27), (sh,  21), 
	(sr,  31), (sr,  32), (rd,  19), (sh,  22), (rd,  21), 
	(sh,  13), (sr,   8), (er     ), (sr,  13), (sr,  14), 
	(sh,  18), (sr,  23), (rd,  12), (sr,  24), (sr,  25), 
	(sr,  26), (sr,  27), (sh,  21), (sr,  31), (sr,  32), 
	(rd,  20), (sh,  27), (er     ), (sr,  22), (er     ), 
	(sh,  14), (rd,   2), (sh,  18), (sr,  23), (er     ), 
	(sh,  19), (rd,  16), (sh,  12), (sh,  17), (rd,  18), 
	(sh,  28), (rd,  28), (sr,  29), (sr,  30), (er     ), 
	(go,   2), (go,  15), (go,  23), (go,   3), (go,  23), 
	(gr,   4), (go,   3), (gr,   6), (go,  23), (gr,   4), 
	(go,   3), (gr,  10), (gr,  11), (gr,   9), (go,  16), 
	(go,  24), (go,   8), (go,  25), (go,   9), (go,  26), 
	(go,  10), (go,  20), (go,  20), (go,  11) );

static var
    prod_desc: array [1..  32] of prod :=
      ( (  29,   1), (  29,   3), (  30,   1), (  30,   3), (  31,   1), 
	(  31,   2), (  32,   1), (  32,   3), (  32,   1), (  32,   2), 
	(  32,   2), (  33,   1), (  33,   2), (  33,   2), (  34,   1), 
	(  34,   3), (  35,   1), (  35,   3), (  36,   1), (  36,   2), 
	(  37,   1), (  37,   3), (  37,   3), (  37,   2), (  37,   2), 
	(  37,   2), (  37,   2), (  37,   3), (  37,   5), (  37,   5), 
	(  37,   2), (  37,   2) );

label 100, 200;

begin
  stk_ind := 0;
  state [0] := 1;
  getsymbol;
  list_index := 1;
  lookup_sym := ord (insymbol);

(*  Select Next Action  *)  100:

  if stk_ind = stk_max then begin
    writeln (tty,'** PARSE STACK OVERFLOW');
    parse := false;
    return;
  end;
  with act_list [list_index] do begin
    ind := first;
    lookup [last] := lookup_sym;
  end;
  while lookup [ind] <> lookup_sym do
    ind := ind + 1;
  next_act := action [ind];

(*  Execute Next Action *)  200:

  with next_act do begin
    case code of

      sh:  begin
        stk_ind := stk_ind + 1;
        state [stk_ind] := next_state;
        value [stk_ind] := invalue;
        getsymbol;
        list_index := next_state;
        lookup_sym := ord (insymbol);
        goto 100;
      end;

      rd:
        ;

      sr:  begin
        stk_ind := stk_ind + 1;
        value [stk_ind] := invalue;
        getsymbol;
      end;

      go:  begin
        stk_ind := stk_ind + 1;
        state [stk_ind] := next_state;
        value [stk_ind] := result;
        list_index := next_state;
        lookup_sym := ord (insymbol);
        goto 100;
      end;

      gr:  begin
        stk_ind := stk_ind + 1;
        value [stk_ind] := result;
      end;

      ac:  begin
        parse := true;
        rslt := value [1];
        return;
      end;

      er:  begin
        parse_error;
        parse := false;
        return;
      end

    end (* case code *);

    (*  Reduce  *)

    with prod_desc [production] do begin
      stk_ind := stk_ind - rhs_len;
      case production of

    1:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

    2:  begin
	  
	    result.pattern := alternate ( value[stk_ind+1].pattern, value[stk_ind+3].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+3].pattern );
	    have_impure_pattern;
	  
	  end;

    3:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

    4:  begin
	  
	    result.pattern := conjoin ( value[stk_ind+1].pattern, value[stk_ind+3].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+3].pattern );
	    have_impure_pattern;
	  
	  end;

    5:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

    6:  begin
	  
	    result.pattern := negate ( value[stk_ind+2].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+2].pattern );
	    have_impure_pattern;
	  
	  end;

    7:  begin
	  
	    result := value[stk_ind+1];
	    have_impure_pattern;
	  
	  end;

    8:  begin
	  
	    result := value[stk_ind+2];
	  
	  end;

    9:  begin
	  
	    result.pattern := catenate ( anystring, value[stk_ind+1].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   10:  begin
	  
	    result := value[stk_ind+2];
	    have_impure_pattern;
	  
	  end;

   11:  begin
	  
	    result.pattern := catenate ( negate ( catenate ( anystring,
	                    parsed_command.cmd_options.alpha_pattern ) ), value[stk_ind+2].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+2].pattern );
	    have_impure_pattern;
	  
	  end;

   12:  begin
	  
	    result.pattern := catenate ( value[stk_ind+1].pattern, anystring );
	    use_re ( result.pattern );
	    have_pure_pattern ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   13:  begin
	  
	    result := value[stk_ind+1];
	    have_impure_pattern;
	  
	  end;

   14:  begin
	  
	    result.pattern := catenate ( value[stk_ind+1].pattern, negate ( catenate (
	                    parsed_command.cmd_options.alpha_pattern, anystring ) ) );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    have_impure_pattern;
	  
	  end;

   15:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

   16:  begin
	  
	    result.pattern := alternate ( value[stk_ind+1].pattern, value[stk_ind+3].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+3].pattern );
	  
	  end;

   17:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

   18:  begin
	  
	    result.pattern := conjoin ( value[stk_ind+1].pattern, value[stk_ind+3].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+3].pattern );
	  
	  end;

   19:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

   20:  begin
	  
	    result.pattern := catenate ( value[stk_ind+1].pattern, value[stk_ind+2].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+2].pattern );
	  
	  end;

   21:  begin
	  
	    result := value[stk_ind+1];
	  
	  end;

   22:  begin
	  
	    if litval ( value[stk_ind+1].pattern, lit_ch1 ) andif
	       litval ( value[stk_ind+3].pattern, lit_ch2 ) andif
	       ( lit_ch1 <= lit_ch2 ) then
	      result.pattern := lit_range ( lit_ch1, lit_ch2 )
	    else
	      result.pattern := phi;
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	    free_re ( value[stk_ind+3].pattern );
	  
	  end;

   23:  begin
	  
	    result := value[stk_ind+2];
	  
	  end;

   24:  begin
	  
	    result.pattern := negate ( value[stk_ind+1].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   25:  begin
	  
	    result.pattern := iterate ( value[stk_ind+1].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   26:  begin
	  
	    result.pattern := catenate ( value[stk_ind+1].pattern, iterate ( value[stk_ind+1].pattern ) );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   27:  begin
	  
	    result.pattern := alternate ( lambda, value[stk_ind+1].pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   28:  begin
	  
	    result.pattern := lambda;
	    for itemp := 1 to value[stk_ind+3].number do
	      result.pattern := catenate ( value[stk_ind+1].pattern, result.pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   29:  begin
	  
	    result.pattern := iterate ( value[stk_ind+1].pattern );
	    for itemp := 1 to value[stk_ind+3].number do
	      result.pattern := catenate ( value[stk_ind+1].pattern, result.pattern );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   30:  begin
	  
	    if value[stk_ind+3].number > value[stk_ind+5].number then
	      result.pattern := phi
	    else begin
	      result.pattern := lambda;
	      for itemp := value[stk_ind+3].number + 1 to value[stk_ind+5].number do
	        result.pattern := alternate ( lambda, catenate ( value[stk_ind+1].pattern, result.pattern ) );
	      for itemp := 1 to value[stk_ind+3].number do
	        result.pattern := catenate ( value[stk_ind+1].pattern, result.pattern );
	    end;
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   31:  begin
	  
	    result.pattern := negate ( catenate ( anystring, value[stk_ind+1].pattern ) );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end;

   32:  begin
	  
	    result.pattern := negate ( catenate ( value[stk_ind+1].pattern, anystring ) );
	    use_re ( result.pattern );
	    free_re ( value[stk_ind+1].pattern );
	  
	  end

      end (* case production *);
      list_index := lhs;
      lookup_sym := state [stk_ind];
      goto 100;
    end;

  end (* with action [ind] *);

end (* parse *);
  