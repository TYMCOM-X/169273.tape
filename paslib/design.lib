The following design changes will be made in implementing the
LIBRARIAN on the VAX:

1.  ACCESS.USR file use
The VAX does not support extended file access, therefore the
ACCESS.USR file will be a text file read and interpreted by
the LIBRARIAN.  All files in a library will have system
protection RWED and the LIBRARIAN will run with SYSPRV.  The
LIBRARIAN will read the ACCESS.USR file to determine whether
the user is allowed to perform a specified function.  The
LIBRARIAN itself will always have access to library and user
files if the system protection is declared RWED.  If the
protection is not properly set, the LIBRARIAN will print
either the message:
   ?LIBUFP User file protection incorrect on file <filename>
if the file is in the user account, or:
   ?LIBLFP Library file protection incorrect on file <filename>
if the file is in the library.

The ACCESS.USR file will be maintained by the library manager.
Each record of the file will be in the form:
   <extended permission(s)> file-list
where:
extended permission ::= permit-mnemonic = ppn-list |
                        permit-mnemonic = ppn-list; extended permission
permit-mnemonic     ::= [UPDATE] [LOCK] [KILL] [COPY]
ppn-list            ::= UIC | UIC, ppn-list
file-list           ::= file.ext | file.ext, file-list

At least one permit-mnemonic must be specified for each entry in
the ACCESS.USR file.
Any entry may be continued to the next record by placing a hyphen
at the end of the current record.

QUESTION - should UPDATE imply COPY and LOCK??

Example:
<KILL UPDATE = [250,*], [123,456];COPY = [123,*]> *.PAS, *.INC
<COPY = [234,*],-
        [345,*],-
        [456,*] > -
*.TST

The ACCESS.USR will be read by the LIBRARIAN whenever the user
assigns to a new library.  The access information will be kept
in an internal linked list and this list will be referenced to
determine the access a user is allowed rather than reading the
ACCESS.USR each time access to a file is attempted.  The internal
format will be:

access_list = RECORD
   filename_ptr : ^filename_list;
   permission_ptr : ^permission_list;
   next : ^access_list;
END;
filename_list = RECORD
   filename : dec_filename;
   next : ^filename_list;
END;
permission_list = RECORD
   permission : set of access_scls;
   ppn_ptr : ^ppn_list;
END;
ppn_list = RECORD
   ppn : string[30];
   next : ^ppn_list;
END;

2.  Locking a file
There will be no way to put the lock information into the file
on the VAX.  Locks may be recorded in a file (LOCKS.LIB) in the
library account.  This approach would mean searching the file
for a given file name before any attempt to GET, PUT, or LOCK
a file.  Another approach would be to have a subfile directory
in the library account ([.LOCKS]).  The UIC of the user locking
a file in the library account would be written to a file by the
same name in the subfile LOCKS.  This way if the file does not
exist, the file is known to be unlocked and no further checking
need be done.

3.  Miscellaneous file access changes:
-  Definition of the working library may be made in the user's
   LOGIN.COM account on the VAX.  Using SYS$TRNLOG the 
   LIBRARIAN will attempt to translate the logical name,
   LIB_DIRECTORY
-  The PPN must be specified before the filename rather than after
-  Protection codes must be set using REPROTECT rather than RENAME
-  Subfile directory names are .DIR rather than .SFD
-  A checkpoint must be created using LIB$SPAWN since a subfile
   directory cannot be created using a call to REWRITE
-  The LIBRARIAN must check file protection to determine his own
   access to the file and check the ACCESS_LIST to determine the
   user's access to the file since the VAX does not support
   extended protections
-  Main directory protections may be checked by looking at the
   protection of [000000]<ppn>.DIR rather than <ppn>.UFD

4.  Multiple users
To avoid conflicts between multiple users, a dummy file (REQUEST.LOK)
will be used.  Whenever a user request will update the directory,
the LIBRARIAN will first try to open this file output.  He will
keep trying until he is successful.
QUESTION - At what points will the directory be updated?
QUESTION - Maybe using the VAX lock mechanism would be better? 


QUESTION - should breaks be handled in this version?

QUESTION - should the user be allowed to specify a device as well
           as the PPN for a library?  Or does the system automatically
           find a disk associated with a PPN?  LIB on the DEC-10
           allows only the PPN to be specified.
