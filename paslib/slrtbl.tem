static var
    act_list: array [1..%] of act_index :=
      ( % );

static var
    lookup: array [1..%] of int :=
      ( % );

static var
    action: array [1..%] of act_entry :=
      ( % );

static var
    prod_desc: array [1..%] of prod :=
      ( % );

label 100, 200;

begin
  stk_ind := 0;
  state [0] := 1;
  getsymbol;
  list_index := 1;
  lookup_sym := ord (insymbol);

(*  Select Next Action  *)  100:

  if stk_ind = stk_max then begin
    writeln (tty,'** PARSE STACK OVERFLOW');
    parse := false;
    return;
  end;
  with act_list [list_index] do begin
    ind := first;
    lookup [last] := lookup_sym;
  end;
  while lookup [ind] <> lookup_sym do
    ind := ind + 1;
  next_act := action [ind];

(*  Execute Next Action *)  200:

  with next_act do begin
    case code of

      sh:  begin
	stk_ind := stk_ind + 1;
	state [stk_ind] := next_state;
	value [stk_ind] := invalue;
	getsymbol;
	list_index := next_state;
	lookup_sym := ord (insymbol);
	goto 100;
      end;

      rd:
	;

      sr:  begin
	stk_ind := stk_ind + 1;
	value [stk_ind] := invalue;
	getsymbol;
      end;

      go:  begin
	stk_ind := stk_ind + 1;
	state [stk_ind] := next_state;
	value [stk_ind] := result;
	list_index := next_state;
	lookup_sym := ord (insymbol);
	goto 100;
      end;

      gr:  begin
	stk_ind := stk_ind + 1;
	value [stk_ind] := result;
      end;

      ac:  begin
	parse := true;
	rslt := value [1];
	return;
      end;

      er:  begin
	parse_error;
	parse := false;
	return;
      end

    end (* case code *);

    (*  Reduce  *)

    with prod_desc [production] do begin
      stk_ind := stk_ind - rhs_len;
      case production of

%

      end (* case production *);
      list_index := lhs;
      lookup_sym := state [stk_ind];
      goto 100;
    end;

  end (* with action [ind] *);

end (* parse *);
