.Flag index
.flag macro $
.lm 2;.rm 78
.Header Mixed
.Title TYMCOM-X Job Processing System                $Today
.outline ALPHA,DECIMAL,lalpha,lroman
.fill;.just
.figure 12
.c;$Bold(TYMCOM-X)
.s2;.c;$Bold(JOB PROCESSING SYSTEM)
.s2;.c;$Bold(Command File Exec Language Reference Manual)
.s2;.c;$Bold(Version %1)
.s8;.c;Preliminary release:  March 15, 1987
.sk;.c;Last revision:  March 15, 1987
.br;.c;Printed:  $Today
.s8;.c;$Bold(TYMCOM-X Systems Software)
.sk;.c;$Bold(McDonnell Douglas)
.sk;.c;$Bold(Field Service Company)
.sk;.c;$Bold(Fremont), $Bold(California)
.page
.number 1
.subtitle The Command File

.sk.lm +4.rm -4
********************************************************************
.sk

NOTE:  This is a preliminary draft of the Reference Manual for the Job
Processor system's Exec language.  This Exec language and the Job Processor
system are in development continually changing.  The manual is also changing
as the Exec is developed and as the documentation for the system develops.

.sk
Please check the documentation files regularly during this developmental time.
Updates to the documentation will occur frequently, reflecting new
developments in the system and more clearly explaining the Job Processor
system's and the Exec's features.  Checking the documentation files for new
information is the quickest and surest way to get this information.

.sk
********************************************************************
.sk.lm -4.rm +4

.hl 1 Introduction
.sk 2
.hl 2 Overview
.sk
.break
The TYMCOM-X Job Processing System replaces the TYMCOM-IX and TYMCOM-X
products PERP, DEFER, PCOM and COM.  The purpose is to provide a system
that will process command files both instantaneously and repetitively
on and for a single PDP-10 host computer.

.sk
The Exec language for the Job Processor system uses many of the commands and
formats used in PERP's Exec to allow users to migrate PERP command files to
the system with little modification to their PERP command files.  However,
PERP command files are not guaranteed to run under the Job Processor system
without change.

.insert CONVENTION.RND


.page
.hl 1 The Command File

.hl 2 Getting Started
.break
To run a job as though it were being run from a terminal the user must first
create a command file.  This is a file which contains all the input to the
job stream that the user would normally enter from a terminal.  The file is a
normal text file which may be created using any text editor available
(EDITOR, TECO, PEAK, VUE, etc.)  or by any program which writes normal text
(for example, output from a Tymshare-BASIC or FORTRAN program).  The command
file may contain monitor commands, input to programs and various commands to
the Job Processor itself.

.sk 2.tp 16
A sample command file follows.  If the terminal session looks like
.sk.lm +4.nf
_.run progrm
REPORTING PERIOD: daily
SEPARATE DIVISIONS: yes
SELECTION CRITERIA: collect all
OUTPUT FILE NAME: report.lst
.sk.lm -4
the following text should be entered into the command file.
.sk.lm +4
_.run progrm
*daily
*yes
*collect all
*report.lst
.sk.lm -4.fill

.sk
The lines in the command file are sent to the job one at a time.  To avoid
problems with type ahead, each line is sent only when the job is ready for
input.  This resembles a user waiting until the terminal a prompts for input
before entering a line of input.

.sk
To instruct the system to execute the commands in an existing  command file
the user enters the SUBMIT command at the monitor prompt.  (See the Job
Processor Reference Manual (*6NEWS)SUBMIT.DOC.)

.sk
The Job Processor currently has a temporary restriction:  it currently ignores
any initialization program that the user has set up with NONAME.  The Job
Processor sessions may run differently than the user's usual interactive
session if the user has an initialization program.  The Job Processor
sessions can be made to resemble the user's sessions by including the
following command as the first line of the command file:

.sk.tp 3
.indent 4;_.INITIALIZE
.sk
This will cause the user's initialization program to be run.

.hl 2 Command File Format
.ls
.le;Line Prefix Characters

.sk
In TYMCOM-IX PERP and TYMCOM-X PCOM command files, all lines in the command
file which begin with the colon (:)#character are commands to PERP or PCOM.
All other lines are sent to the host system to be processed as part of the
users job.  The TYMCOM-X Job Processor System provides an extension to this
convention by providing the ability to specify the type of data for each line
in the command file and how that data should be processed.  For example, a
command line (such as "EXIT") meant for the user's program could abort the
job if sent to the monitor.  For this reason, the first character of the line
is used to determine what to do with the line.
.ls
.sk
.le;Colon (:) - to the TYMCOM-X Job Processor only.
.sk
All lines beginning with a colon are interpreted by the Job Processor.  These
commands are never sent to the job stream.  Thus, they are never seen by the
monitor or the user's program.  They tell the Job Processor what to do with
the following command lines and modify job parameters which control various
options available to the user.

.sk
.le;Period (.) - to the monitor only.
.sk
Lines beginning with a period are commands to the monitor and are only sent
to the job stream when the user is waiting for input at monitor level.  If a
user's program is running, the Job Processor waits until the program will
accept input and it then interrupts the program.  This forces the job stream
to monitor level as though an :ESCAPE command had been sent.  The Job
Processor then sends the command line to the job stream.

.sk
.le;Asterisk (*) - to a user's program only.
.sk
Lines beginning with an asterisk are sent to the job stream only when the
user's program is waiting for input.  If the line cannot be sent to the job
stream because the job is in monitor mode the line is discarded and the
next line of the command file is processed.

.sk
.le;Equal sign (=) - to a user's program only.
.sk
Lines beginning with an equal sign are sent to the job stream only when the
user's program is waiting for input.  These lines are treated the same as
lines which begin with an asterisk except that the carriage return at the end
of the line is not sent to the job stream.  This can be very valuable for
running programs which require input without the ending carriage return.
(For example, TECO or DDT).

.sk
.le;No prefix character.
.sk
If no prefix character is specified, the entire line will be sent to the job
stream as soon as the stream is ready for input.  The line may be read by the
user's program if it is running or by the monitor.

.sk
.le;Prefix characters as data to a user program.
.sk
To send a line of data beginning with one of the designated prefix characters,
the line must simply be prefixed with an asterisk or equal sign.

.sk.lm +4.nf.tp 4
Example:                    (sent to program)
.indent 4;*..TEXT..                   ..TEXT.._<cr_>
.indent 4;*=FOO                       =FOO_<cr_>
.indent 4;=HELP=1                     HELP=1             (no _<cr_> sent)
.indent 4;**.DOC                      *.DOC_<cr_>
.fill.lm -4

.els.sk 2
Summary:
.sk
The following is generally true and can be helpful in remembering when these
prefixes are used:  A colon prefix is used where it would be used in a
TYMCOM-IX PERP or TYMCOM-X PCOM command file.  A period prefix would be used
where a period prompt should appear in the log file (in PDP10 mode).  An
asterisk prefix would be used where a normal program prompt should appear
(which is actually an asterisk in some utility programs).  The equal sign is
used for program input when the carriage return is to be omitted.


.page
.le;Commands
.sk 

Commands to the Job Processor which are imbedded in the command file employ
the colon (:)#line prefix character.  These commands are generally similar to
those available in the TYMCOM-IX PERP system and have the same format.  Any
control file command word which apears in upper case in the following list may
be abbreviated to its first three characters unless indicated otherwise.

.ls
.sk
.le;:BACKTO _<label_>
.sk
Jump back to _<label_> in processing of command file.  The label must be in
the command file before the occurrence of this command and in the proper
format for this jump to occur.  Otherwise an error occurs.  

.sk
The minimum abbreviation for the word "BACKTO" is "BACK".

.sk
.le;:COM#_<file_>#["_<param#val1_>"#["_<param#val2_>"#[...#"_<param#valN_>"]]]
.sk
Begin taking commands from the named command file.  The called file is a
standard Job Processor command file.  Command files may be nested
approximately 5 deep with this command.

.sk
The optional syntax includes specifying parameter values to be passed to the
called file on the same line after the filename.  To the called file this
resembles the way parameter values are passed to the first command file when
the parameter values are declared; when the job is inserted while SUBMIT is
being run.  (See discussion of Parameters below and in SUBMIT.DOC.)

.sk
If parameter values are included in the command line each parameter value must
be delimited by quotation marks.  Single or double quotation marks are
acceptable; however, the same character must be used as both the opening and
closing delimiter for each value.

.sk
When a command file calls another command file a parameter name delimiter
currently declared in the calling command file file (see the _$DELIMITER
Keyword) is passed down to the called (subordinate) command file.  However a
parameter name delimiter declared in a called (subordinate) command file is
overridden by the previous delimiter set in the caller when the called file is
completed processing.

.sk
.le;:DEFINE _<par1_>="_<val1_>"[#_<par2_>="_<val2_>"[#...#_<parN_>="_<valN_>"]]
.sk
Assign value _<val_#_> to parameter-variable _<par_#_>.  This command is
identical to :_<par_>=_<val_> below which is included to be compatible
with TYMCOM-IX PERP.

.sk 
NOTE:  Both forms of this command allow multiple assignments.  Each parameter
value must be delimited by quotation marks.  Single or double quotation marks
are acceptable; however the same character must be used as both the opening
and closing delimiter for each value.  A comma is acceptable after a value to
separate elements of the list.

.sk 
.le;:ESCAPE
.sk
Interrupt the currently executing program when it is next ready for input
forcing the job stream to monitor level.  This is similar to the user entering
a user interrupt while the program is waiting for input.  (A "user interrupt"
is a control-C when in PDP10 mode or an _<ESC_> when in XEXEC mode.)

.sk
.le;:GOTO _<label_>
.sk
Jump forward to _<label_> in processing of command file.  The label must be
in the command file after the occurrence of this command and in the proper
format for this jump to occur.  Otherwise an error occurs.

.sk
The word "GOTO" may be abbreviated to "GO" for compatability with PERP.

.sk
.le;:PARAMETERS#[_<nam1_>[="_<val1_>"][,#...,#_<namN_>[="_<valN_>"]]]
.sk
Turn on parameter substitution and optionally declare each name _<nam_#_>
included as the name of a parameter to mark the place in the command file for
substitution of the value associated with the parameter name.  Optionally
define a default value _<val_#_> for each parameter name.

.sk
The command :PARAMETERS without any parameter names or values turns on
parameter substitution.  This is needed when using only the predefined
Keyword parameters in the command file.

.sk
NOTE:  Each parameter value must be delimited by quotation marks.  Single or
double quotation marks are acceptable; however the same character must be
used as both the opening and closing delimiter for each value.  A comma is
acceptable after a value to separate elements of the list.

.sk
.le;:QUIT
.sk
Cause normal termination of the running job.

.sk
.le;:REMARK
.sk
This line is a comment to the TYMCOM-X Job Processor.  It causes no action to
be taken.  However it is printed in the log file if one is created.  

.sk
.le;:REVIVE
.sk
Re-enable output to the user's specified log file (if a log file has been
provided for).  (See :SILENCE.  Also see Keyword _$LOGGING.)

.sk
.le;:SEND CHARACTER _<nnn_>
.sk
Transmit the character represented by the octal (base 8) number _<nnn_>.

.sk
.le;:SEND FILE _<file_>
.sk
Transmit the contents of _<file_>.  Line-feed characters immediately
following a carriage-return are removed so that input to the job stream from
the file resembles terminal input.  However no other data interpretation
occurs.

.sk
.le;:SEND STRING "_<text_>"
.sk
Transmit the literal string "_<text_>" without any carriage-return or
line-feed following the string.  The string of text must be surrounded by
double quote marks.

.sk
.le;:SILENCE
.sk
If a log file is provided stop sending output to the log file. (Same as
_$LOGGING=0)  Logging is resumed with :REVIVE or _$LOGGING=1.

.sk
.le;:STOP
.sk
The same as :QUIT.  Causes normal termination of a running job.

.sk
.le;:TIMELIMIT _<n_>
.sk
Changes the job's run time limit to _<n_> minutes.  The default time limit for
job execution is 60 minutes.  Changing the run time limit with this command
within the command file will not change the time limit known by the Job
Processor prior to the actual running of the job.  Providing the Job Processor
with a fairly accurate estimate of the time required for the job's execution
can enhance the job's reliability so specifying the timelimit as an option
when inserting the job while running SUBMIT is greatly preferred.

.sk
.le;:TRULIMIT _<n_>
.sk
Changes the job's TRU limit to _<n_> TRUs.  The default is no limit.  When the
limit of TRUs is reached the job is stopped.  This can be very useful for
stopping a program error from causing the program to run up many more TRUs
than expected.

.sk
.le;:_<par1_>="_<val1_>"#[,_<par2_>="_<val2_>"[,#...,#_<parN_>="_<valN_>"]]
.sk
Assigns value _<val_#_> to parameter _<par_#_>.  Each parameter value must be
delimited by quotation marks.  Single or double quotation marks are
acceptable; however the same character must be used as both the opening and
closing delimiter for each value.  A comma is acceptable after a value to
separate elements of the list.


.sk
.le;_<label_>::[_<command file line_>]
.sk
Defines a label in the command file.  The label is used as the object of a
command file :GOTO statement the object of a command file :BACKTO statement
or the location in the file for the job to restart.  The last applies if the
options RESTART#LABEL and LABEL#_<label_> are specified in the INSERT command
in SUBMIT when the job is being entered into the Job Processor's queue (See
SUBMIT.DOC).  

.sk
A label in this format may precede any line that would be legal in the command
file.  The included line must begin immediately after the double colon which
ends the label.  Any blanks between the label and the included line are sent
to the job stream as the first characters of the line.

.sk.tp 4
NOTE:  An alternative format for defining the label follows.  This is to allow
consistency with the Tymshare PERP format.  This format does not allow a line
of the command file to be on the same line as the label.  The format is:

.sk.lm +4.nf
::_<label_> _<cr_>

.els.fill

.le;Use of Variable Parameters in Command Files
.sk
One command file can do essentially the same job many times with some
differences through the use of variable parameters in the file.  Variable
parameters provide a mechanism by which strings of text within the file may be
varied.  These parameters may be used anywhere in the command file after they
have been declared even in commands to the Job Processor system.

.sk
When the command file is created each parameter name is initially declared
(see the ":PARAMETERS" command).  The parameter name (or keyword) is then
placed with delimiters in the file where its variable string is to appear.
The string which is to replace the parameter name is assigned to the parameter
name in the command file itself or in the process which calls the command
file.  The definition of parameter values (strings) by the calling process is
one of the OPTIONS to the INSERT command in the program SUBMIT (see
SUBMIT.DOC) or is done in the :COM command line in the calling command file.

.sk 2
.ls

.le;Assigning Values to Parameter Names
.sk
.ls
.le;Initially Declaring Parameter Names and Assigning Values
.sk
All parameters used in the command file must be named in the :PARAMETERS
command line in the command file before they are used in the command file.
This command may also be used to assign an initial value to the parameter
names.  If no initial value is assigned to a parameter name the default value
is NULL or zero.

.sk
.le;Assigning Values to the Parameters from Outside the Command File
.sk
New values can be assigned to the parameters before the job is executed
without making any changes to the command file.  These values override the
initial values assigned when the parameter names were declared or they are
given to parameters which have not previously had a value assigned.

.sk
If the command file is used directly by the Job Processor system the new
parameter values are supplied to it through the PARAMETERS option to the
INSERT command in SUBMIT.  (See SUBMIT.DOC.)  If the command file is called by
another command file with the :COM command the new parameter values are
supplied to it through the :COM command line in the calling command file.
(See the :COM command.)

.sk
.le;Changing Parameter Values while the Job Is Running
.sk
A parameter value established when the command file is called can be changed
later by assignment within the command file (see the :DEFINE command).  The
new value assigned to the parameter name within the command file can be any
value that is valid for the parameter including the value assito another
parameter name.  This assignment of a new value to a parameter with the
:DEFINE command can occur multiple times within a command file.

.els

.le;Substitution of Parameter Values (Strings) in Command File
.sk
Substitution is invoked by placing the parameter name (or keyword) with
delimiters where the substitution string is desired in the file.  "With
delimiters" means the parameter delimiter character is placed immediately
before and immediately after the parameter name or keyword.  The parameter
delimiter character is initially the backslash (_\) but may be changed at the
discretion of the user.

.le;Pre-Declared Keyword Parameters
.sk 
A special type of parameter is the "keyword" parameter variable.  These
keywords are pre-defined.  They are used to examine or change selected system
attributes.  The Job Processor system currently provides information about
and/or control over the following system variables:

.lm +16
.sk
.indent -16;_$DAYTIME	- 
A string displaying the current time of day in the form HH:MM:SS using the
24-hour clock.  Values can range from 00:00:00 to 23:59:59.  (Read-Only)

.indent -16;_$DELIMITER	- 
A character variable which contains the value of the character used to delimit
parameter names for substitution.  Initially the value is back-slash (_\).
The delimiter must be a character which is not valid in a parameter name
otherwise the Job Processor will not be able to determine where the parameter
name "really" ends.

.indent -16;_$FALSE	- 
A boolean variable equal to 0. (Read-Only)

.indent -16;_$LOGGING	- 
A boolean variable for controlling whether output is sent to the log file (if
one exists).  If there is no log file then this variable becomes Read-Only
and is equal to 0 (FALSE).

.indent -16;_$MAIL		- 
A boolean variable which controlls whether mail is to be sent to the user upon
completion of the user's job.  The initial value depends on the value of the
/MAIL switch.

.indent -16;_$SUBSTITUTION	- 
A boolean variable for controlling the in-line substitution of parameters.
The initial value is 0 (FALSE) unless a parameter is specified on the command
line or a :PARAMETERS statement is encountered.

.indent -16;_$TIMELIMIT	- 
A decimal value containing the remaining time limit for the processing frame.
This variable is set initially to the value of the /TIME switch and may be
reset directly or by the :TIMELIMIT#n command.  If this variable is set to 0
then there is no time limit.

.indent -16;_$TRUE		- 
A boolean variable equal to 1.  (Read-Only)

.indent -16;_$TRULIMIT	- 
A decimal value containing the remaining TRUs for the processing frame.  This
variable is initially set to 0 which means that there is no initial TRU limit.
Setting this variable means that from the current point that many TRUs may be
accrued before the job is stopped.  This is very useful if the user expects a
program to use a small number of TRUs and something goes wrong.  The Job
Processor system will prevent the program from running up too many TRUs.

.lm -16
.els
.els

.hl 2 Sample command file

.sk.nf 
The following sample command file does the following:  

1.)  it turns on parameter substitution declares the following as
     parameter names:  'OUTDIR', 'NAME', 'EXT', 'USER' and 'SPEC' and
     assigns initial values to parameter names 'OUTDIR' and 'USER';

2.)  it accepts from the caller any values the caller assigns for any of
     the parameters; 

3.)  it assigns to parameter name 'SPEC' the following string (all
     values concatenated):  the value contained in parameter 'NAME' a
     period and the value contained in parameter "EXT';

4.)  it gets the time of the job's start and records it in the log file;

5.)  it runs the user program 'UPDATE' and provides the input to the
     program; 

6.)  it calls the subordinate command file 'MAKRDY' passing it the
     value of the parameter 'SPEC'; 

7.)  it copies the file named in parameter 'SPEC' from the username in
     'USER' to the username in 'OUTDIR'; 

8.)  it redefines the value assigned to parameter name 'SPEC' to be
     'output.fil' and 

9.)  it gets the time of the job's completion and records it in the log 
     file.  

.sk.lm +4.tp 12 
:PARAMETERS  OUTDIR= tymnet  NAME  EXT  USER = tymnet  SPEC 
:DEFINE SPEC = "_\NAME_\._\EXT_\" 
:REMARK  Time of start of execution:  _\_$DAYTIME_\.  
_.run (_\USER_\) update 
*1 week 
:REMARK  The next command runs the command file MAKRDY.CTL providing 
:REMARK    it the name of the output file as a parameter value.  
:COM MAKRDY _\SPEC_\ 
_.copy (_\USER_\) _\SPEC_\ to (_\OUTDIR_\) _\SPEC_\ 
:DEFINE SPEC = output.fil 
:REMARK  Time of end of execution:  _\_$DAYTIME_\.  
:QUIT   [(i8	