begin	"PCOM"
require "
PCOM - interim PERP exec language

Assembly instructions:
    Load @PCOM.CMD

Source files:
    PCOM.SAI	- Main Program
    UUOSYM.SAI	- UUO definitions

License required: WC RC SY" message;

require "(SAILIB)SAIL.DEF" source!file;
!Get!Definitions(TYMINT);

require "(MPL)UUOSYM.SAI" source!file;

require 25 polling!interval;
require processes;

require 1 version;
ifc false thenc		! comment this out;
define fname = {"}&scanc(compiler!banner," "&#ht,null,"SI")&{"};
! fname is a string constant containing the outer block name;
endc;

simple integer procedure gettab( integer index!!table );
start!code
	move	1,index!!table;
	setom	!skip!;
	calli	1,calli!GETTAB;
	 setzb	1,!skip!;
end;

define jobEntry(x)="gettab( (x) lor (-1 lsh 18) )";

simple procedure LicenseCheck;
begin
    integer L;
    L _ jobEntry(!GTLIC);
    if (L land LC!WC = 0)
    or (L land LC!RC = 0)
    or (L land LC!SY = 0)
    then usererr(0,0,"?license required: WC RC SY","X");
end;
require LicenseCheck initialization;

simple procedure hibernate;
begin!code	external integer INTRPT,DDFINA;
	SETOM 	!SKIP!;		! assume skip return;
	MOVEI	1,3000;		! or some appropriate interval;
	SKIPE INTRPT; XCT DDFINA;	! this is a polling point;
	CALLI	1,calli!HIBER;	! snooze;
	 SETZM	!SKIP!;		! no-skip;
end;
define comNames= "(AFTER,COM,DEFINE,ESCAPE,FIND,GO,GOTO,IF,LOG,LOOK,"
	& "MAIL,NOLOG,NOMAIL,PAUSE,QUIT,RESTART,STOP,TIME,UNLESS,WAIT)";

define ##=0;
preset!with null
 forlc cmd= comNames doc { redefine ##=##+1; define #}&{cmd=##; 
	, cvps(cmd) } endc;
own safe string array commands[0:##];

integer procedure comNum( string token );
! returns index of the command (0 if not a command)
;
begin	integer i;
for i_ ## step -1 until 1 
   do if equ(token,commands[i]) then return(i);
return(i);
end;
item	INTPRO;			! deffered interrupt process;
integer array M[0:35,0:4];	! interrupt data area;
! note:	M[c,0] is count of locations used for DF1INT call (4);
!	M[c,1] is addr of M[c,4] for ref arg to XINT;
!	M[c,2] is addr of service routine for proc arg to XINT;
!	M[c,3] is pointer to XINT for DF1INT;
!	M[c,4] is -1 for ok to queue, >=0 for pending (already queued);

procedure XINT (reference integer MC4; procedure MC2);
begin	! called by INTPRO as result of queued request from QINT;
    MC4 _ -1;			! set flag saying ok to quque;
    MC2;			! call int service procedure;
end;

simple procedure QINT;
begin	! called at immediate level to queue a request for service;
    integer C;
    C _ memory['10];		! get interrupt channel number;
    if M[C,4] _ M[C,4] + 1 
	then ! don't queue it more than once;
	else DFR1IN (!xwd(-4,location(M[C,0])));
end;

forward procedure TIM;
forward procedure CHR;
forward procedure ZAP;
forward procedure ORG;
forward procedure NTQ;

simple procedure INTINI(integer Port);
begin	! called by main prog to setup interrupts once port is known;
    simple procedure DEFMAP (integer INDEX; procedure PROC);
    begin
	own integer C;
	C _ INDEX land '77;	! extract channel number;
	M[C,0] _ 4;		! 2 word arg to DF1INT;
	now!safe M;
	M[C,1] _ location(M[C,4]);! pending flag;
	begin!code		! setup handler procedure;
		protect!acs 1;
		MOVE	1,PROC;
		MOVEM	1,access(M[C,2]);
	end;
	M[C,3] _ !xwd(-1,location(XINT));
	M[C,4] _ -1;		! DF1INT needs to be called;
	now!unsafe M;
	intmap (INDEX,QINT,0);
	enable (newenb(C));
    end;
    intset (INTPRO,0);
    defmap (intass(!IATIM,10),TIM);
    defmap (tinass(Port,!IACHR,11),CHR);
    defmap (tinass(Port,!IAZAP,12),ZAP);
    defmap (tinass(Port,!IAORG,13),ORG);
    defmap (intass(!IANTQ,14),NTQ);
    defmap (tinass(-1,!IAESC,14),NTQ);
end;

simple procedure IntZap;
begin
    disable (newenb(10));
    disable (newenb(11));
    disable (newenb(12));
    disable (newenb(13));
    disable (newenb(14));
end;

procedure HELP;
begin print("
Syntax is 
    .R PCOM [; [logfile =] commandfile [/switches] ]
where
    logfile		is the name of the output file (see note)
    commandfile		is the name of the input file 
    switches		is zero or more of the following switches:
	/DETACH		run the job detached (default)
	/NODETACH	run with the command port attached
	/MAIL		send mail to notify when complete (default)
	/NOMAIL		do NOT send mail when complete
	/LOG		create a log file (default)
	/NOLOG		do NOT create a log file
	/LOG:ON		same as /LOG
	/LOG:OFF	same as /NOLOG
	/LOG:ERROR	create a log file, but delete it if no errors
	/LOG:FATAL	same as /LOG:ERROR if no FATAL errors
	/HELP		prints this message (same as ?)
	/NEWS		prints latest enhancements
note: normally the log file is specified in the first line of the
command file by a statement of the form
    :logfile
but this may be overridden by specifying the log file in the PCOM
command line.
"); calli(0,calli!EXIT) end;

procedure NEWS;
begin print("
PCOM news has been incorporated into the standard PCOM documentation
files.  Please see PCOM.DOC for more information.
"); calli(0,calli!EXIT) end;

!	FRONT!END
Obtain a command line, check it for errors, and return it in global
variables.  The CMDFile and LOGFile are both opened and made ready.
If job is to be detached, take necessary action (does not return).  Due 
to problems dealing with error recovery, it is impossible to check the 
LOGFile for writability if /DET is specified and no LOGFile is given.
This is okay based on the assumption that jjjPCO.LOG[0,0] will always be 
writable by frame jjj.
The command line may be obtained in one of three ways:
	1. from the command line (RUN PCOM:logfile_cmdfile/switch)
	2. interactively by prompting the user for the information
	3. by RPG where it is obtained from a jjjPCO.TMP file
;	

external boolean RPGSW;		! true if run at start address plus one;
boolean CCLSW; 			! true if command found on cmd line;
boolean IACSW;			! true if interactive (being prompted);
boolean DETACH!;		! true if this frame IS detached;
integer	BRK,EOF,OChan;		! I/O variables;
string	IChan;			! stack of nested input files;
string	CmdFile,LogFile;		! I/O file names;
boolean	swDETACH,swNODETACH;	! reality defined by user switches;
boolean DoMail,swMAIL,swNOMAIL;	! more reality;
boolean swLOG,swNOLOG;		! make, don't make a log file;
boolean swLogERROR,swLogFATAL;	! What conditions to keep log file;
boolean DoLogError,DoLogFatal;	!  "        "    specified in command file;
boolean DoLog,DeleteLog;	! What to put in the log file;

string procedure EXIT;		! string so it can be "printed" [ugh];
calli(0,(if detach! then calli!LOGOFF else calli!EXIT));

integer b.line, b.com, b.comtok;
procedure BrkIni;
begin
	define	white={(#lf & #ht & #sp)}
	,	punct={("!@#$%^&*()_+-=~`{}[]|\:;'<>,.?/" & '42)}
	;
    setbreak(b.line_1, #lf, null, "SINF");	! read line (#cr kept);
    setbreak(2, #lf & ";=_/", #cr, "SINK");	! read command;
    setbreak(3, white & #cr, null, "RXNK");	! eat white space;
    setbreak(b.com_4, white & punct, #cr, "RINK");
    setbreak(5,#lf & ";=_/", white & #cr, "SINK"); 
					! read command no blanks;
    setbreak(b.comtok_getbreak, 
		white & #cr & punct, white & #cr, "TRINK");
end;
require BrkIni initialization;

string procedure TOK (reference string S);
begin
    string S1;
    S1 _ scan(S, b.comTok, BRK);	! get the next word;
    if length(S1) then return(S1);
    if BRK then return(lop(S)) else return(null);
end;

procedure FRONT!END;
begin
    string S;			! a handy string;
    label INPUT.PROMPT;		! goto here for purpose of reprompting;
    label OUTPUT.PROMPT;	! goto here for purpose of reprompting;

!	cope with being detached
;
    Detach! _ !lh( jobEntry(!gtLIN) )=0;
	! set detach flag if we are detached;
    if Detach! then 
	calli(JP!NAT lor jobEntry(!GTPRV), calli!SETPRV);
	! set NO ATTACH so we don't bother user when logging in;

!	check for RPG type call - look for jjjPCO.TMP
;
    if RPGSW then begin "RPG"	! was our start address +1?;
	integer C,B,E; string F;
	setformat(-3,7);	! force 3-digit cvs;
	F _ cvs( calli(0,calli!PJOB) ) & "PCO.TMP";
	setformat(0,7);		! restore normal format;
	open(C_getchan,"DSK",1,4,0,256,B,E);
	lookup(C,F,E);
	if E then print("?cant read ",F," error code '",E, EXIT);
	S _ input(C,0);
	rename(C,null,0,E);
	release(C);
    end "RPG";

!	next try for CCL type call - look for semicolon in command line
;
    if not RPGSW then begin
	backup;			! back up monitor TTY read pointer;
	S _ inchsl(EOF);	! read monitor command line;
	scan(S,5,BRK);		! discard upto 1st semicolon;
	CCLSW _ (BRK = ";");	! was a semicolon found?;
    end;
    IACSW _ not (CCLSW or RPGSW);! set interactive flag appropriately;
    if IACSW then begin "prompt"
ifc false thenc		! comment this out;
	string CB,T;
	integer I;
	CB _ compiler!banner;
	print( fname & " version of " );
	for I _ 1 upto 4 do tok(cb);
	for I _ 5 upto 9 do print( tok(cb) );
	print(" ");
	for I _ 10 upto 12 do print( tok(cb) );
endc
	If jobEntry(!gtnam) = cvsix("PCOM")
	    then print("PCOM version ",Cvos(!lh(Memory['137])),".",
			Cvos(!rh(Memory['137]))  )
	    else begin "security code"
		Calli(cvsix("PCOM"), calli!PUTLSA);
		Calli(cvsix("PCOM"), calli!SETNAM);
	    end "security code";
	print(crlf,"(Type ? for HELP)",crlf);
    end "prompt";

!	Initialize non-command-line defaults
;
    DoMail _ detach!;		! note default is DETACH! related;
    DoLog  _ True;		!      default is: Make a Log;
    DoLogERROR _ False;		!      default is: not specified;
    DoLogFATAL _ False;		!      default is: not specified;

    INPUT.PROMPT: if IACSW then begin "prompt"
	print("Command file: ");
	S _ inchwl;
    end "prompt";

!	Initialize all the command line switches
;
    swDETACH _ swNODETACH _ swMAIL _ swNOMAIL _ False;
    swLOG _ swNOLOG _ swLogERROR _ swLogFATAL _ False;

    if S = "?" then S _ S & "/HELP";
    CmdFile _ scan(S,5,BRK);	! scan filename;
    LogFile _ null;		! default file name;
    if BRK="=" or BRK="_"
	then begin		! maybe get LOG file name too;
	    LogFile _ CmdFile;
	    CmdFile _ scan(S,5,BRK);
	end;

    Define swchk(!sw!) = {equ(TOK,"}&{!sw!}&{"[1 to length(TOK)])};
    Define swerr(!sw!) = {
	If sw}&{!sw!}&{ and swNO}&{!sw!}&{ then begin
	    print("?ambigious switch combination /}&
		    {!sw!}&{ and /NO}&{!sw!}&{",crlf);
	    if CCLSW or RPGSW then EXIT;
	    goto INPUT.PROMPT;
	end};

!	Read off any switches and react to them
;
    while length(S) do begin
	integer SWB; 
	string TOK;
	SWB _ BRK;
	TOK _ scan(S,5,BRK);
	if SWB = "/" then begin "switch search"
	    if      swchk(DETACH) then swDETACH _ true
	    else if swchk(NODETACH) then swNODETACH _ true
	    else if swchk(MAIL) then swMAIL _ true
	    else if swchk(NOMAIL) then swNOMAIL _ true
	    else if swchk(LOG:ON) then swLOG _ true
	    else if swchk(LOG:OFF) then swNOLOG _ true
	    else if swchk(LOG:ERROR) then swLOG _ swLogERROR _ true
	    else if swchk(LOG:FATAL) then swLOG _ swLogFATAL _ true
	    else if swchk(NOLOG) then swNOLOG _ true
	    else if swchk(HELP) then HELP
	    else if swchk(NEWS) then NEWS
	    else begin "error"
		print("?unrecognized switch: ""/",TOK,"""",crlf);
		if CCLSW or RPGSW then EXIT;
		goto INPUT.PROMPT;
	    end "error";
	    swerr(DETACH);		! Check for /DETACH & /NODETACH;
	    swerr(MAIL);		! Check for /MAIL & /NOMAIL;
	    swerr(LOG);			! Check for /LOG[:XXX] & /NOLOG;
	end "switch search";
    end;

!	setup input file
;
    lookup(IChan,CmdFile,EOF);	! input file;
    if EOF then begin
	print ("?input file """,CmdFile,""" ",case !rh(EOF) of (
	    [0] "not found",
	    [1] "invalid user",
	    [2] "protection failure",
	    [else] "LOOKUP error '"&cvos(!rh(EOF)) ),crlf);
	if RPGSW or CCLSW then EXIT;
	goto INPUT.PROMPT;
    end;

!	Read first line of command file to see if ":LOGFILENAME"
;
    S _ input(IChan,2);
    if lop(S) = ":" 		! see if 1st line of file is LogFile name;
	then if length(LogFile)	! see if we already have a LogFile set;
	    then 		! set already, ignore one in cmd file;
	    else LogFile _ S	! use 1st line of cmd file if no LogFile;
	else useti(IChan,1);	! reread 1st line if no ":";

!	setup LOG file
;
    if not swNOLOG then
	OUTPUT.PROMPT: if length(LogFile)=0 
	    then if RPGSW or CCLSW
		then if swNODETACH 
		    then begin
			setformat(-3,7);	! force 3-digit CVS;
			LogFile _ cvs(calli(0,calli!PJOB)) & "PCO.LOG";
			setformat(0,7);		! restore normal format;
			end
		    else ! let child PCOM default it;
		else do begin "prompt"
		    print("Log file: ");
		    LogFile _ inchwl;
		    if LogFile = "?" then begin print(
"The log file is used to record terminal output from the PCOM job.
The default log file is jjjPCO.LOG where jjj is the PCOM job number.
");			LogFile _ null;			! RESET length;
			goto OUTPUT.PROMPT end;		! So loop works;
		end "prompt" until length(LogFile);
	if length(LogFile) then begin
	    enter(OChan,LogFile,EOF);	! output file;
	    if EOF then begin
		print("?output file """,LogFile,""" ",case !rh(EOF) of (
		    [0] "illegal name",
		    [1] "invalid user",
		    [2] "protection failure",
		    [3] "being modified",
		    ['14] "exceeds quota or disk full",
		    [else] "ENTER error '"&cvos(!rh(EOF)) ),crlf);
		LogFile _ null;
		if CCLSW or RPGSW then EXIT;
		goto OUTPUT.PROMPT;
	    end;
	end;

!	"detach" if necessary
;
    if not swNODETACH then begin "DETACH"
        own integer C,B,E;	! stuff for writing .TMP file;
	own integer FDX;	! FD of child;
	own integer JX;		! job number of child for msgs only;
        own integer array RB[0:3];
	begin!code
	    protect!acs 1;
	    HRLI 1,!foCFM;
	    FRMOP 1,[0];	! bear a child;
	      SETZ 1,;
	    MOVEM 1,FDX;
	end;
	if not FDX then print("?can't create child frame", EXIT);
	JX _ FDX land '7777;	! shouldn't there be a uuo for this?;
        RB[0] _ !xwd(1,arrinfo(RB,2));	! our name so can run ourself;
        RB[1] _ cvsix("DSK");
        RB[2] _ jobEntry(!gtFPN);
        RB[3] _ jobEntry(!gtNAM);
        If not swNOLOG then	! then this is open, so close it;
	    release(OChan,'40);	! don't create (supercede) output file;
        release(IChan);		! just close it for good form;
        print("[",cv6str(RB[3])," in frame ",JX,"]");
        open(C_getchan,"DSK",0,0,4,0,0,E);
        enter(C,cvs(1000+JX)[2 to 4]&"PCO.TMP",E);
        cprint(C,if swLOG then LogFile&"_" else "",	! Log file?;
	    CmdFile,"/NODETACH",			! for child frame;
	    If swLOG					! Log file?;
		then If swLogERROR or swLogFATAL	!  don't print if;
		    then ""				!  x/LOG:XXX ;
		    else "/LOG"				!  ... ;
		else "",				!  ... ;
	    If swLogERROR then "/LOG:ERROR" else "",	!   LOG:ERROR?;
	    If swLogFATAL then "/LOG:FATAL" else "",	!   LOG:FATAL?;
	    If swNOLOG then "/NOLOG" else "",		! No Log file?;
	    If swMAIL then "/MAIL" else "",		! MAIL?;
	    If swNOMAIL then "/NOMAIL" else "",		! No Mail?;
	    crlf);
        close(C); release(C);
        begin!code
	    protect!acs 1;
	    MOVE 1,FDX;
	    HRLI 1,!foRUN;	! run PCOM in child at RPG entry point;
	    FRMOP 1,access(RB[0]);
	      SETZM FDX;
        end;
        if not FDX
	 then print(crlf,"?cant run ",cv6str(RB[3])," in inferior");
        begin!code
	    protect!acs 1;
	    MOVE 1,FDX;
	    HRLI 1,!foGFT;	! disown child now that were done;
	    FRMOP 1,[0];	
	      SETZM FDX;
        end;
        if not FDX then print(crlf,"%cant disown inferior");
        EXIT;
    end "DETACH";

end "FRONT!END";


integer PORT;
integer FD;

simple procedure SPROUT;
begin
    integer P;
    P _ calli(0,calli!CREPTY);	! create a PTY;
    if not !SKIP! then usererr(P,2,"?CREPTY error: ","X");
    PORT _ !lh(P);
    auxcli(PORT,'214,!axCFS);	! we are in image no echo;
    auxclv(PORT,1,!axSOX);	! expand tabs etc for output file;
    start!code
	MOVSI	1,!FOCFM;
	SETOM	!SKIP!;
	FRMOP	1,[0];		! create frame;
	 SETZM	!SKIP!;
	MOVEM	1,FD;
    end;
    if not !SKIP! then usererr(FD,2,"?.FOCFM error: ","X");
    start!code
	HRRO	1,FD;
	HRLI	2,'200000;
	HRR	2,P;
	MOVEI	1;
	SETOM 	!SKIP!;
	uuo!RETACH;		! give it the PTY;
	 SETZM	!SKIP!;
    end;
    if not !SKIP! then usererr(0,0,"?RETACH error","X");
end;

simple procedure OutPtr (integer PORT; string S);
while length(S) do auxclv(PORT,lop(S),!axO8);
! begin!code	! could use this but it won't do image mode;
!	MOVEI	1,!AXOPC;	! output SAIL string;
!	HRL	1,PORT;
!	AUXCAL	1,-1(SP);	! output through pointer;
! end ;

string S,SLOGOUT,Disposition;
integer LineNo;
Define Complete = {"completed"};		! Use a defined string;

simple procedure ABORT(reference integer WHY);
begin
    IChan _ null;	! okay at immediate int level? ;
    EOF _ WHY _ true;
end;

boolean TIM!;
procedure TIM; abort(TIM!);  ! terminate commands file and wake up SYNC;

procedure CHR;
begin	! called when a character is received from the port;
    integer C;
    while true do begin
	auxclr(Port,C,!AXI8S);		! get character if any more;
	if !SKIP! 
	    then begin
		if not swNOLOG and DoLog
		 then wordout(OChan,C); ! Log it?;
		if not Detach! then outchr(C);
	    end
	    else done;
    end;
    auxclv(Port,0,!AXLDE);		! indicate ready for input;
end;

boolean ZAP!;
procedure ZAP; begin IntZap; abort(ZAP!); end;	! stop processing;

boolean ORG!;
procedure ORG; ORG! _ true; 		! wake up SYNC;

boolean NTQ!;
procedure NTQ; abort(NTQ!);
procedure SYNC;
begin	! synchronize with slave;
    ORG! _ false;
    auxclv(PORT,0,!axSYB);	! send yellow ball;
    do hibernate until ORG! or TIM! or ZAP! or NTQ!;
    ! orange ball interrupt procedure sets ORG!;
end;
integer array VarVal ["A":"Z"];
string array VarStr ["A":"Z"];

procedure ASSIGN (string var, val);
if length(var)=1
 then begin	integer V;
	if "A" leq (V_lop(var)) leq "Z" 
	 then begin VarVal[V] _ cvd( val ); VarStr[V] _ val; end;
      end;
procedure COM (string CMD);
begin
    IChan _ getchan& IChan;
    open(IChan,"DSK",1,4,0,1024,BRK,EOF);
    lookup(IChan,CMD,EOF);
end;

procedure ESCAPE;
begin!code		label HALTW,HALTX,CLRW,CLRX;
	MOVE	2,FD;		! get an absolute frame e;
	ANDI	2,'007777;
	HRLI	1,FD;
	HRRI	1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 JFCL;
	JUMPG	1,CLRX;		! don't hassle if halted;
	MOVEI	1,(2);		! do absolute so license will help;
	HRLI	1,!foHLT;
	FRMOP	1,;		! return to monitor;
	 JRST	CLRX;		! assume already halted (oh well);
HALTW:	MOVEI	1,1;
	uuo!SLEEP 1,;
	HRLI	1,(2);
	HRRI	1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ	1,;
	JUMPL	1,HALTW;	! sleep until child halts;
HALTX:	MOVEI	1,(2);
	HRLI	1,!foCLR;
	FRMOP	1,;		! clear frame;
	 JFCL;
CLRW:	MOVEI	1,1;
	uuo!SLEEP 1,;
	HRLI	1,(2);
	HRRI 1,!gtSTS;
	uuo!GETTAB 1,;		! get JBTSTS;
	 SETZ	1,;
	JUMPL	1,CLRW;		! sleep until child halts;

	MOVE	1,FD;
	uuo!SETOTF 1,;
	 JRST	CLRX;
	MOVSI	1,'206001;	! 1 page at 0 R/W in other frame;
	uuo!VCREAT 1,;
	 JRST	CLRX;
	MOVE	1,FD;
	HRLI	1,!foWVA;
	SETZ	2,;		! address;
	HRROI	3,!GTPRV;	
	uuo!GETTAB 3,;		! data = JBTPRV for us;
	 JRST	CLRX;
	FRMOP	1,2;		! write in AC0;
	 JRST	CLRX;
	MOVEI	2,1;		! address;
	MOVE	3,[uuo!SETPRV];	! data;
	FRMOP	1,2;
	 JRST	CLRX;
	MOVEI	2,1;		! address;
	MOVE	3,[uuo!EXIT];	! data;
	FRMOP	1,2;
	 JRST	CLRX;
	HRLI	1,!foSAA;
	MOVE	2,[!xwd('400000,1)];	! start address;
	FRMOP	1,2;
	 JFCL;
CLRX:
	PUSHJ	P,SYNC;		! stay in sync with slave;
end;
IFCR FALSE THENC
 procedure ESCAPE;
 begin
 absFD_ FD land '007777;
 if gettab( !xwd( absFD, !gtSTS ) ) < 0
 and frameOp( absFD, !foHLT )
  then do sleep(1) until gettab( !xwd( absFD, !gtSTS ) ) geq 0;
 frameOp( absFD, !foCLR );
 do sleep(1) until gettab( !xwd( absFD, !gtSTS ) ) geq 0;
 setOtherFrame(FD);
 icalli(!xwd('206001,0), calli!VCREAT); ! 1 page: 0 R/W in other frame;
 frameWrite( 0, jobEntry(!gtPRV), FD );
 frameWrite( 1, uuo!SETPRV, FD );
 frameWrite( 2, uuo!EXIT, FD );
 frameOp( !xwd('400000,1), !foSAA );
 SYNC;
 end;
ENDC
procedure GOTO (string CMD);
if IChan > 0 then begin
    string S;
    S _ "::"& TOK(CMD);
    useti(IChan,1); LineNo _ 0;
    do begin
	LineNo _ LineNo +1;
	if equ(input(IChan,2),S) then return;
    end until EOF;
end else print("?GOTO not allowed from terminal",crlf);

simple procedure LOGCHECK(reference string CMD);
begin "log check"
    String s;
    simple procedure switcheck;
    If equ(S,"RESUME") then DoLog _ True
	else If equ(S,"SUSPEND") then DoLog _ False
	else If equ(S,"ERROR") then DoLogError _ True
	else If equ(S,"FATAL") then DoLogFatal _ True
	else print("?illegal LOG command """,S,"""",crlf);

    If length( S _ TOK(CMD) ) then switcheck else DoLog _ True;
    While Length(S_TOK(CMD) ) do switcheck;
end "log check";
simple procedure MAIL(Boolean True!False);	DoMail _ True!False;


simple procedure QUIT;	EOF _ true;

boolean STOP!;		! tell world why we stopped;
simple procedure STOP;	STOP! _ EOF _ true;

procedure TIME (string CMD);
calli( !xwd(1,60*cvd(CMD)), calli!SETTIM );

recursive procedure COMMAND (string CMD);
begin	"COMMAND"
    string KW;
    if CMD = ":" then lop(CMD);
    KW _ TOK(CMD);
    if KW = ":" then ! ignore label here;
    else if BRK = "=" then ASSIGN(KW,CMD[2 TO INF])
    else case comNum(KW) of begin
	[#COM] COM (CMD);
	[#ESCAPE] ESCAPE;
	[#GO,#GOTO] GOTO(CMD);
	[#LOG] LOGCHECK(CMD);
	[#MAIL] MAIL(True);
	[#NOLOG] DoLog _ False;
	[#NOMAIL] MAIL(False);
	[#QUIT] QUIT;
	[#STOP] STOP;
	[#TIME] TIME (CMD);
	[0] usererr(0,1,"Unknown command: " & KW)
	[else] usererr(0,1,"Unimplemented command: " & KW)
		! #UNLESS, #WAIT, #AFTER, #DEFINE, #FIND, #IF;
		! #LOOK, #PAUSE, #RESTART;
end	"COMMAND";

!	M A I N   program
;
string MyName;
MyName _ cv6str( jobEntry(!GTUNM) ) & cv6str( jobEntry(!GTUN1) );

ttyup(true);
open(IChan_getchan,"DSK",0,4,0, 256,BRK,EOF);
open(OChan_getchan,"DSK",0,0,4, 0,0,EOF);
FRONT!END;			! parse command, open files, etc.;
SPROUT;				! create child frame and PTY to it;
calli(!xwd(2,60),calli!SETTIM);	! set (default) timeout to 1 hour;
IntIni (Port);			! enable interrupts;
while length(IChan) do begin
  while not EOF do begin
    string S;
    S _ input(IChan,1);		! input line from file;
    if EOF then done;
    LineNo _ LineNo +1;		! count it;
    if S = ":"			! check for begin with colon;
	then Command(S)		!	process PCOM command;
	else begin		!	send command to slave job;
	    OutPtr(Port,S);
	    SYNC end;
  end;
  release(lop(IChan));		! pop the channel stack;
  EOF _ false;			! clear end of file;
end;

!	determine disposition and clean up
;
DISPOSITION _ Complete;
if TIM! then DISPOSITION _ "aborted: timeout at line "& cvs(LineNo);
if NTQ! then DISPOSITION _ "aborted: halted by operator at line "& cvs(LineNo);
if ZAP! then DISPOSITION _ "abended: lost circuit to slave at line "& cvs(LineNo);
if STOP! then DISPOSITION _ "aborted: :STOP at line "& cvs(LineNo);
if ZAP! then begin		! start a new frame;
    ZAP! _ false;
    SPROUT;
    IntIni (PORT) end;
ESCAPE;				! force command level;

!	determine log-file status (keep or delete)
;
DeleteLog _ False;		!      default is: Don't Delete;
If equ(Disposition,Complete) then			! If complete .... ;
    DeleteLog _ If swLogERROR or swLogFATAL		! Switches override;
		then TRUE
		else If swLOG				! /LOG overrides all;
		    then FALSE
		    else If DoLogError or DoLogFatal	! else check commands;
			then TRUE
			else FALSE;

!	send mail if indicated - inform user of disposition
;
DoLog _ true;			! force this into log file if any;
ORG! _ TIM! _ NTQ! _ false;
if (DoMail or swMAIL) and not swNOMAIL then begin	! send mail ?;
    Sync; OutPtr(Port,"SEND "&MyName&#cr);
    Sync; OutPtr(Port, cv6str( jobEntry(!GTNAM) ) &
	" command processed: "&
	(If not swNOLOG then LogFile&" = " else "")&	! Log file?;
	CmdFile&
	(If detach! then "/DETACH" else "/NODETACH")&	! Detached?;
	(If swLOG					! Log file?;
	    then If swLogERROR or swLogFATAL		!  don't print if;
		then ""					!  /LOG:XXX ;
		else "/LOG"				!  ... ;
	    else "")&					!  ... ;
	(If swLogERROR then "/LOG:ERROR" else "")&	!   LOG:ERROR?;
	(If swLogFATAL then "/LOG:FATAL" else "")&	!   LOG:FATAL?;
	(If swNOLOG then "/NOLOG" else "")&		! No Log file?;
	(If swMAIL then "/MAIL" else "")&		! Mail?;
	(If swNOMAIL then "/NOMAIL" else "")&		! No Mail?;
	#cr);
    Sync; OutPtr(Port,"Job "&CmdFile&" "&disposition&"."&#cr);
    If (not swNOLOG) and (not DeleteLog) then begin
	Sync;
	OutPtr(Port, "Output recorded in file "&LogFile&"."&#cr);
    end;
    Sync; OutPtr(Port, #ctrl("D") );
end;
Sync; OutPtr(Port,"LOGOUT"&#cr);
while not ZAP! do hibernate;	! wait for zapper;
if not swNOLOG and DeleteLog then rename(OChan,null,0,EOF);
if not swNOLOG then release(OChan);
print(crlf,"[Job ",CmdFile," ",disposition,"]",crlf,
    if (not swNOLOG) and (not DeleteLog)
	then  "[Output recorded in file "&LogFile&"]"
	else "");
EXIT;				! log out if necessary;

end 	"PCOM" $
   }
Y|u