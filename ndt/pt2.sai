begin "ptran II"
require "(SAILIB)SAIL.DEF" source!file;
integer simple procedure increment( reference integer v );
	start!code aos 1,v; end;


define simproc={Simple Procedure};	! or "Procedure" for debugging;

string Token; integer Type;	! last token scanned;

integer inch, i.count,i.break,i.eof, i.page,i.line,i.sos;
string	i.file;

define	TokenType=1, ClassType=2, ExecType=3, ProdType=4, 
	TypeRange="1:4";
! TokenType includes: Terminals, Reserved Words, and NonTerminals;

forward String simProc CurrentPosition;

simProc error(string s);
	print(crlf&"?", s, crlf& " at ", CurrentPosition );

simProc fatal(string s);
begin
error(s);
usererr(0,0,"Fatal");
end;
integer b.token,b.comment,b.file;
simProc b..setup;
begin
setbreak(b.token_getbreak, #sp&#ht&#ff&#cr&#lf, 
		#sp&#ht&#ff&#cr, "INKTS");
setbreak(b.comment_getbreak, ";"&#ff, null, "IS");
setbreak(b.file_getbreak, ":", null, "IS");
end;
require b..setup initialization;

procedure switchSources;
begin
if length(i.file) then print(" [EOF]");
release(inch); 
inch_getchan; 
while true 
   do begin	string device, file;
	do print(crlf, "Source: ") until length(i.file_ inchwl);
	device_ scan( file_ i.file, b.file, i.break );
	if i.break neq ":"
	 then begin device_"DSK"; file_ i.file; end;

	open( inch, device,'20000, 4,0, i.count,i.break,i.eof_ true);
	if i.eof then continue;
	lookup( inch, file, i.eof );
	if not i.eof 
	 then begin
		setpl(inch, i.page,i.line,i.sos);
		i.page_ i.line_ i.sos_ 0;
		return;
	      end;
      end;
end;

string simProc CurrentPosition;
return( "[" & i.file 
	& " page " & cvs(i.page+1) 
	& ", line " & cvs(i.line+1)
	& (if 0 neq i.sos neq cvasc("    ")+1 
		then ", sos=" & cvastr(i.sos) else null) & "]" );
simProc rdToken;
while True do
begin
if i.eof then switchSources;
token_ input(inch,b.token);
if equ(token,"MUMBLE")
 then begin string posn; 
	posn_ CurrentPosition;
	  do  begin
		do input(inch,b.comment) until i.break or i.eof;
		if i.eof then fatal("MUMBLE at "& posn & " covers EOF");
		if i.break = #ff
		 then print(crlf, "Warning: MUMBLEd over page mark ", 
				i.page, " in comment from ", posn );
	      end
	 until i.break=";";
      end
 else if i.break then return;
end;

boolean simProc ARealToken;
begin
do rdToken until length(token);
return( length(token)<3 or "<" neq token or ">" neq token[inf for 1]);
end;
safe string array synonym[0:'177];
	! contains text synonyms for single characters;

procedure readSymbols;
begin
arrclr(synonym);
while ArealToken
   do begin	integer ch; string character; boolean home;
	ch_ character_ token;
	if not (home_ArealToken) or length(Token) < 2
	 or length(character) neq 1
	 or ("A" leq ch leq "Z")
	 or ("0" leq ch leq "9")
	 or length(synonym[ch]) neq 0
	 then begin
		print( crlf, "Violated Symbols format: ",
			"[ <special character> <name> ]",
			crlf, "char: '", cvos(character),
			", old name: ", synonym[ch],
			", new name: ", token );
		error(null);
		if not home then done;
	      end;
	synonym[ch]_ token;
      end;
end;
require 2000 new!items, 2000 pnames;

integer array TypeMax[ TypeRange ];
	simProc someInit; arrclr(TypeMax);
	require someInit initialization;

integer itemvar LastSymbol;
integer NewType;	! type to construct (EntSym, NewSym).;
string	NewTypeName;	! for error message use;
forward String Simproc ShowSymbol( itemvar thing );

integer Procedure LookSym;
begin	boolean undef;	string longName;
if length(token)=1 and length(LongName_synonym[token])
 then token_ LongName;
LastSymbol_ cvsi(Token, undef);
return( if undef then 0 else props(LastSymbol) );
end;

Procedure EntSym;
begin
LastSymbol_ new(increment(TypeMax[NewType]));
props( LastSymbol )_ NewType;
new!pname( LastSymbol, token );
end;

simProc NewSym;
begin	Integer oldType;
if Oldtype_ LookSym
 then begin
	print(crlf& "Attempt to redefine symbol: ", 
		ShowSymbol(LastSymbol), " to be ", NewTypeName );
	error(null);
      end
 else EntSym;
end;
procedure readClasses( integer MaxSymbols );
begin	integer size, ClassFlag;
	boolean MoreLeft; 
	item ClassElements;
for size_ 1 step 1 while MaxSymbols GEQ 1 lsh size do;
ClassFlag_ 1 lsh size;
MoreLeft_ aRealToken;

while MoreLeft
 do begin	string ClassList;
		integer itemvar ThisClass;
		simProc addElement;
		  ClassList_ ClassList 
		  & (datum(lastSymbol) +(if props(LastSymbol)=ClassType 
						then ClassFlag else 0));
	NewSym; 
	ThisClass_ LastSymbol;
	ClassList_ Char!w( 0, size );
	while true
	  do  begin "one class"
		while true
		   do begin "one line"
			rdToken;
			if length(token)=0 then done;
			if LookSym 
			 then addElement
			 else error("Undefined class element: " & token 
				& " in " & ShowSymbol(ThisClass) );
		      end "one line";
		if (MoreLeft_aRealToken) and LookSym
		 then addElement
		 else done;
	      end "one class";
	Lop(ClassList);
	make ThisClass xor ClassElements eqv new(ClassList);
    end;
end;
record!class ExecDat( integer array counts );
r!p(ExecDat) ep;
integer epSize; 
Procedure initEp; 
begin	integer array counts[1: epSize_ 50];
arrclr(counts);
ep_ new!record(ExecDat);
memory[location(ExecDat:Counts[ep])] swap memory[location(counts)];
end;
require initEp initialization;


Procedure CountExec( integer ExecNo );
begin
if ExecNo > epSize
 then begin	integer array counts[1: epSize_ execNo+20];
	ARRTRAN( counts, ExecDat:Counts[ep] );
	memory[location(ExecDat:Counts[ep])] 
		swap memory[location(counts)];
      end;
Increment( ExecDat:Counts[ep] [ExecNo] );
end;
procedure readProductions;
begin
print(crlf & "over-simplified <PRODUCTION> code" & crlf );
NewType_ ExecType;
while aRealToken
   do begin "one Production"	! comment only labelled for now;
	if length(token)>1 and token[inf for 1]=":"
	 then begin NewType_ ProdType; NewSym; NewType_ ExecType; end
	 else if EQU(token, "EXEC")
	 then begin
		while true
		   do begin
			rdToken;
			if "A" leq token leq "Z"
			and not EQU(token,"SCAN")
			 then if lookSym=0
				then newSym
				else if ExecType=props(LastSymbol)
					 then CountExec(
						datum(LastSymbol) )
					 else done
			 else done
		      end;
	      end;
      end;
end;
simProc insist( string grouping );
begin
NewTypeName_ grouping;
if not equ(Token, "<" & grouping & ">")
 then begin
	print(crlf& "Expected: ", grouping, ", but got ", Token, 
		" at ", CurrentPosition, crlf, " Scanning forward...");
	grouping_ "<" & grouping & ">";
	do while aRealToken do begin end
	 until equ(Token, grouping);
	print(" found at ", CurrentPosition );
      end;
print(crlf, Token);
end;

integer ReservedTop, TerminalTop;
String Simproc ShowSymbol( itemvar thing );
return( cvis(thing,!skip!) &
(case props(thing) of 
 ([ClassType] ":Class", 
  [ExecType]  ":Exec",
  [ProdType]  ":Production",
  [TokenType]if datum(thing,integer) > ReservedTop then ":NonTerminal"
	else if datum(thing,integer) > TerminalTop then ":Reserved"
						   else ":Terminal",
  [ELSE] ":Unknown type '" & cvos(props(thing))
)) );
i.count_ 120;	! maximum read length;
i.eof_ true;	! force readin of source;
while aRealToken do;	! get to the first command token;

NewType_ 0;	! actually illegal;
insist("SYMBOLS");
readSymbols;

NewType_ TokenType;

insist("TERMINALS");		while aRealToken do NewSym;
print( TerminalTop_ TypeMax[TokenType], " tokens.");

insist("RESERVED-WORDS");	while aRealToken do NewSym;
print( (ReservedTop_ TypeMax[TokenType]) - TerminalTop, " tokens.");

insist("NON-TERMINAL-SYMBOLS");	while aRealToken do NewSym;
print( TypeMax[TokenType] - ReservedTop, " tokens. ",
	crlf& " Total of ", TypeMax[TokenType], " symbols." );

NewType_ ClassType;

insist("CLASSES");		readClasses( TypeMax[TokenType] );
print( TypeMax[ClassType], " Classes. " );

NewType_ 0;
insist("PRODUCTIONS");		readProductions;
print(	TypeMax[ExecType], " Execs, ", 
	TypeMax[ProdType], " Productions.");

insist("END");
end;
   