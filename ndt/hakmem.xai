FAIL:	HAKMEM.172	fast "free word" routine.
	
entry g.word, .gword, f.word, .fword, s.list, .slist 
title Gosper - cons/uncons
P __ 17	;push-down stack
A __ 1	;ac to return results in

;S.LIST:	set up a virgin free word storage area by providing
;		an instruction to execute to get new storage.
;		S.LIST or .SLIST Must be called before using G.WORD
;CAL:	PUSH	P,[instruction]	;instruction is typically PUSHJ P,GC
;	PUSHJ	P,S.LIST
;RES:	.GWORD code set up
;	A clobbered
;.SLIST:	just lie S.LIST, different calling sequence
;CAL:	MOVE	A,[instruction]	;instruction is typically PUSHJ P,GC
;	PUSHJ	P,.SLIST
;
;to write the GC code:
;	instr = "JRST GC"
;	GC preserves Acs, re-allocates starting with S.LIST/.SLIST
;		followed by some F.WORD/.FWORD calls, finally
;		a "PJRST" style exit to .GWORD
S.LIST:	POP	P,A
	EXCH	A,(P)
.SLIST:	MOVEM	A,.GWORD
	POPJ	P,


;F.WORD:	free a word of storage (place on .GWORD list)
;		Warning: call .SLIST or S.LIST before using 
;				F.WORD, .FWORD, or .FWORD
;CAL:	PUSH	P,[xxx,,address of cell to free]
;	PUSHJ	P,.SLIST
;RES:	word placed on list, former contents returned in A
;
;.FWORD:	just like F.WORD except different call sequence
;CAL:	MOVE	A,[xxx,,address of cell to free]
;	PUSHJ	P,.FWORD

F.WORD:	POP	P,A
	EXCH	A,(P)
.FWORD:	HRLI	A,(<EXCH A,>)
	EXCH	A,.GWORD
	EXCH	A,@.GWORD
	POPJ	P,

;.GWORD:	get a free word from the list, call GC if necessary
;CAL:	MOVE	A,[what to put in word]
;	PUSHJ	P,.GWORD
;RES:	word obtained from list, filled with A,  address of returned
;	word is placed in A (some garbage in LH, but indir,index =0
;G.WORD is the same, but call is PUSH P,[to put in word]|PUSHJ P,G.WORD

G.WORD:	POP	P,A
	EXCH	A,(P)
.GWORD:	HALT	.	;should be "PUSHJ P,GC", set up in .SLIST
			;once free words are on, its:
			;  EXCH A,[EXCH A,[...[PUSHJ P,GC]...]]
			;now A has next instr for .GWORD, 
			;	new cell has A as of call
	EXCH	A,.GWORD ;now .GWORD has the proper instr for next call
	POPJ	P,	 ;A has EXCH A,newWord
FAIL:hackmem.132	loop detector
P__17
A__1
;work Acs
C__13
J__14

COUNTR:	0	;number of calls on detector, 0 starts over
TABLE:	Block 36	;so we dont need to check for overflow

CHK1:	MOVE	C,COUNTR	;keep track of calls, get copy of count
	MOVEI	J,0
NXTENT:	JUMPE	C,NOMATCH	;check table for 0 : floor( lb(c) )
	LSH	C,-1
	CAME	A,TABLE(J)
	 AOJA	J,NXTENT

MATCH:	MOVNI	A,2
	ASH	A,(J)		;calc -2^(e+1) (inverted mask)
	SETCAM	A,J		;save mask for low E+1 bits
	ASH	A,-1		;now get -2^e
	ADD	A,COUNTR	;add in counter [ A = C-1 - 2^e ]
	AND	A,J		; and extract low e+1 bits
	AOJA	A,RETURN	; + 1 is loop size
NOMATCH:
	AOSA	J,COUNTR	;ac meanings switched since C is 0 here
MORE0:	 LSH	J,-1		; C counts low order zeroes in COUNTR
	TRNN	J,1
	 AOJA	C,MORE0
	MOVEM	A,TABLE(C)
	MOVEI	A,0		;return "no match yet"
RETURN:	POPJ	P,		

SAIL:hackmem.132	loop detector

integer COUNTR;	COMMENT number of calls on detector, 0 starts over;
		COMMENT code loops if entered with COUNTR=-1;
safe integer array TABLE[0:35];		
		COMMENT to avoid check --need binlog(max # calls made);

integer simple procedure loopDetect( integer newval );
COMMENT return 0 = no loop yet, else loop size
;
start!code	define P='17,A=1,	 C='13,J='14;
		COMMENT C and J are work ACs;
		define !="comment";
		LABEL nxtent, return, nomatch, more0;
	MOVEI	J,access(table[0]);
	MOVE	A,newval;
	MOVE	C,COUNTR;	! keep track of calls,get copy of count;
NXTENT:	JUMPE	C,NOMATCH;	! check table for 0 : floor( lb(c) );
	LSH	C,-1;
	CAME	A,(J);
	 AOBJP	J,NXTENT;
! MATCH;
	HLRZ	J,J;		! get table index;
	MOVNI	A,2;
	ASH	A,(J);		! calc - 2^(e+1) (inverted mask);
	SETCAM	A,J;		! save mask for low E+1 bits ***;
	ASH	A,-1;		! now get - 2^e;
	ADD	A,COUNTR;	! add in counter [ A = C - 2^e ];
!	ADDI	A,1;		! add in another one (since C not incd);
!	AND	A,J;		!  and extract low e+1 bits;
!	CAIN	A,0;		! if result is zero, ;
!	 AOS	A,J;		!  then use 2^(e+1);
!	JRST	RETURN;		! + 1 is loop size;
!=>;	AND	A,J;
!=>;	AOJA	A,RETURN;
NOMATCH:
	MOVEI	C,access(TABLE[0]);
	AOSA	J,COUNTR;	! ac meanings switched since C is 0 ;
MORE0:	 LSH	J,-1;		! C counts low order zeroes in COUNTR;
	TRNN	J,1;
	 AOJA	C,MORE0;
	MOVEM	A,(C);
	MOVEI	A,0;		! return "no match yet";
RETURN:
end;
