begin "showit"
integer bit.on, bit.off;

simple procedure set.b; begin bit.on_"*"; bit.off_"_"; end;
require set.b initialization;

string routine h.bits( integer half );
begin	string result;
	integer cnt;
half_ half lsh 17;
result_ null;
for cnt_ 1 step 1 until 18
   do result_ result & (if (half_ half lsh 1) < 0 
			then bit.on else bit.off);
return( result );
end;

string routine d.bits( long real bits );
begin	integer ptr;
ptr_ point(18,bits,0);
return( h.bits(ldb(ptr)) & " " & h.bits(ildb(ptr)) & "  " &
	h.bits(ildb(ptr))& " " & h.bits(ildb(ptr)) );
end;


long real array ac,old[0:23];
"i+:","I+:","i-:","I-:","i*:","I*:","ix:","Ix:","i/:","I/:","i\:","I\:",
"f+:","F+:","f-:","F-:","f*:","F*:","f/:","F/:";
string array Name[0:23];

procedure show;
begin	integer line;
outstr(HomeUp);
for line_ 1 step 1 until line#max
   do begin
	if ac[i] neq old[i] then print(Name[i], d.bits(old[i]_ac[i]) ); 
	outstr(crlf);
      end;
end;
procedure refresh(integer lines );
begin
  start!code	define a=1,b=2,c=3,d=4; protect!acs a,b,c;
		label loop;
	move	a,lines;
	movei	b,ac[0];
	movei	c,old[0];
  loop:	setcm	d,(b);
	movem	d,(c);
	addi	b,2;
	addi	c,2;
	sojg	a,loop;
  end;
show;
end;
if mem neq omem then print(#cr & "M: ", d.bits(mem) ); outchr(#lf);
if acv neq oacv then print(#cr & "A: ", d.bits(acv) ); outchr(#lf);
if acx neq oacx then print(#cr & "Ax ", d.bits(acx) ); outchr(#lf);
	crlf, "A: ", d.bits(acv),
end;

end "showit"
$
