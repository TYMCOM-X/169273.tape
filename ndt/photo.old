begin "jobget"

require "(SAILIB)SAIL.DEF" source!file;
!get!module(mapping);
define other!frame= 2*!bit(20);
define calli!vclear =-'66, calli!setotf=-'126;
define	!FOHST='23, !FODFH='13, !FOCFH='12, 
	!FOREP=7, !FORPC=6, !FORVA=2,
	FD!ABS=0, FD!FAM=1, FD!OTF=2, FD!CRH=3, FD!SLF=4, 
					CH!FRM=0, CH!PRO=1, CH!LIC=2; 
define	!GTUNM=-'22, !GTUN1=-'21, !GTNAM='3;
define	!CHFTR='45;

let routine = procedure;

define	JobMappingPage='377; 

simple boolean procedure FRMOPR( integer opcode, frame;  
				reference integer arg, result );  
start!code
	hrlz	2,opcode;
	hrr	2,frame;
	frmop	2,arg;
	 tdza	1,1;
	 hrroi	1,-1;
	movem	2,result;
end;

simple boolean procedure FRMOPV( integer opcode, frame, arg;
				reference integer result );  
start!code
	hrlz	2,opcode;
	hrr	2,frame;
	frmop	2,arg;
	 tdza	1,1;
	 hrroi	1,-1;
	movem	2,result;
end;

boolean routine makeHandle( integer frame; 
				reference integer handle );
	begin	preset!with 
		!XWD(2,'77777) + FD!CRH*!bit(20), 0;
		own safe integer array typeAndRights[0:1];
	if frame = call(0,"PJOB") then return(false);
	return( FRMOPR( !FOCFH, frame, typeAndRights[0], handle ) );
	end;

boolean routine destroyHandle( integer handle );
	return( FRMOPV( !FODFH, handle, 0, !skip! ) );

integer routine readPC( integer handle );
	begin	integer pc;
	if frmopr( !FORPC, handle, pc, !SKIP! )
	 then return(pc) else return(-1);
	end;

integer routine readAc( integer ac, handle );
	begin
	if frmopr( !FORVA, handle, ac, !SKIP! )
	 then return(handle) else return(-1);
	end;

boolean routine MapHis( integer myPage, hisPage, handle);
	begin
	hisPage := hisPage lor !bit(1);
	myPage := myPage lor (1*!bit(7) + 1*!bit(17));
				! ^read-only	^count=1;
	return( frmopr( !FOREP, handle, myPage, !SKIP! ) );
	end;
string routine HaltStatus( integer code, device, dw1, dw2 );
begin	integer subCode;
subCode := !RH(code);
code := !LH(code);
return( case code of (
   [0] case subCode of (
	[0] "PC out of bounds",
	[1] "Illegal Memory Reference",
	[2] "Write Violation",
	[3] "Address check for device " & CVXSTR(device) & ":",
	[4] "Illegal Memory Reference in UUO",
	[5] "Illegal Interrupt address",
	[6] "Address break",
	[7] "PDL overflow",
	[ELSE] "unknown Memory Violation #" & cvs(subCode)), 
   [1] case subCode of (
	[0] "Page I/O error",
	[1] "Disk full during copy of COW page",
	[2] "Paging Hardware Error",
	[3] "Too many pages locked, Cannot handle fault",
	[4] "Context Page I/O Error",
	[5] "Parity Error(s). All core removed",
	[ELSE] "unknown System-related Error #" & cvs(subCode)), 
   [2] (case subCode of (
	[0] "Cannot do Input on Output",
	[1] "Cannot do Output on Input",
	[2] "Illegal data mode for",
	[2] "Illegal data mode for",
	[ELSE] "unknown Error #" & cvs(subCode) & " for")
       ) & " device " & CVXSTR(device) & ":",
   [3] case subCode of (
	[0] "Illegal UUO",
	[1] "UUO error",
	[2] "Illegal instruction",
	[3] "Halt",
	[ELSE] "unknown Illegal instruction trap #" & cvs(subCode)),
   [4] case subCode of (
	[0] "Exit",
	[1] "Exit 1,",
	[2] "Fail Exit",
	[3] CVXSTR(device) & ":" & CVXSTR(dw1) & " setup",
	[4] CVXSTR(device) & ":" & CVXSTR(dw1) & " saved",
	[5] "Frame cleared",
	[ELSE] "unknown Frame exit #" & cvs(subCode)),
   [5] case subCode of (
	[0] "Transmission Error",
	[1] "N pages required, N=" & cvs(dw1),
	[2] "Device " & CVXSTR(device) & ": not available ",
	[3] "file " & CVXSTR(device) & ":" & CVXSTR(dw1) 
		& "." & CVXSTR(dw2) & " not found ",
	[4] "file " & CVXSTR(device) & ":" & CVXSTR(dw1) 
		& "." & CVXSTR(dw2) & " not a Save File",
	[5] "file " & CVXSTR(device) & ":" & CVXSTR(dw1) 
		& "." & CVXSTR(dw2) & " attempt to ENTER failed",
	[6] "Core Argument not specified for magtape " 
		& CVXSTR(device) & ":",
	[7] "Magtape Hiseg format bad on " & CVXSTR(device) & ":",
	[8] "REMAP UUO error",
	[9] "Magtape GET failure on " & CVXSTR(device) & ":",
	[10] "No Start Address",
	[ELSE] "unknown RUN, RUNSEG, or GETSEG error #" & cvs(subCode)),
   [ELSE] "unknown halt code " & cvs(code) & "/" & cvs(subCode))
);
end;
string routine showPC( integer pc );
	return("'" & cvos(!LH(pc)) & ",," & cvos(!RH(pc)) );

string routine readHSB( integer handle );
begin	preload!with 7;
	own safe integer array HSB[0:7];
return( if frmopr( !FOHST, handle, HSB[0], !SKIP! )
 then "Halt #" & cvs(HSB[2]) & ":" 
	& HaltStatus(HSB[1], HSB[5],HSB[6],HSB[7])
	& " at PC=" & showPC(HSB[3]) 
	& " last UUO at PC=" & showPC(HSB[4]) 
 else "Cannot read HSB"
);
end;
simple integer procedure gettab( integer index, table );
begin	integer result;
result := call( !xwd(index,table), "GETTAB" );
return( if !skip! then result else -1 );
end;

string procedure readuser( integer frame );
	return( cvxstr( gettab(frame,!gtunm) ) 
		& cvxstr( gettab(frame,!gtun1) ) );

string procedure readprogram( integer frame );
	return( cvxstr( gettab(frame,!gtnam) ) );
integer routine makeOtherFrame( integer job );
	begin	integer result, handle;
	if not makeHandle( job, handle ) then return( false );
	calli( handle, calli!setotf );
	if not !skip!
	 then begin destroyHandle(handle); return(false); end;
	
	print( " PC = ", showPC( readPC( other!frame ) ),
		crlf, " user ", readuser(job),
			" running ", readprogram(job),
		crlf, " Halt status = ", readHSB( other!frame ),
		crlf, "Is that the one? " );
	if 0 neq ((inchwl+0) land '137) neq "Y"
	 then begin destroyHandle(handle); return(false); end;
	return( JobMappingPage lsh 9 );
			! location of base of page to map;
	end;

integer routine readJobsAcs( integer ac );
	return( readAc( ac, other!frame ) );

routine unmapJobPage; 
	calli( !XWD(1, JobMappingPage), calli!vclear );

boolean routine mapJobPage(integer page);
	begin
	unmapJobPage;
	return( MapHis( JobMappingPage, Page, other!frame ) );
	end;
	integer job, chan, ac, page, JobPage;
	r!p(map1) PageHolder, OtherPageHolder; 
	integer lastExtant, lastNonExtant; 
	boolean wasExtant,nextExtant;

do print(" Job number to get a photo of: ")
 until JobPage := makeOtherFrame( job := cvd(inchwl) );

do print(" File to store photo on: ")
 until 0 LEQ chan := opfile( inchwl, "WVM", 16 );

pageHolder := map1cr(0,511);
OtherPageHolder := map1cr(0,511);
getmap( pageHolder, "N", chan, 1 );
for ac := 0 step 1 until '17
   do map1:a[pageHolder][ac] := readJobsAcs(ac);

wasExtant := 0 neq mapJobPage(0);
lastNonExtant := -1; 
lastExtant := 0;
if wasExtant
 then arrblt( map1:a[pageHolder]['20], memory[JobPage+'20], 512-'20 )
 else usererr(0,1,"No job page 0?");

print("[0");
getmap( pageHolder, "V", chan, 1 ); 
PageHolder SWAP OtherPageHolder; 

for page := 1 step 1 until 511
   do begin	boolean nextExtant;
	if page eqv -page = page * 2 - 1 then print( #sp, page );

	if nextExtant := 0 neq mapJobPage(page)
	 then begin
		if not wasExtant
		 then chniov( chan, page lsh 9, !CHFTR ); 
			! try to extend the file (save creating pages);
			! if it doesn't work, who cares;
		getmap( pageHolder, "N", chan, page + 1 );
		arrblt( map1:a[pageHolder][0], memory[JobPage], 512 );
		getmap( pageHolder, "V", chan, 1 ); 
		if not wasExtant
		 then begin	integer fpage;
			for fpage := lastExtant+1 step 1 until page
			   do getmap( null!r, "D", chan, fpage ); 
			wasExtant := true;
		      end;
		lastExtant := page;
		PageHolder SWAP OtherPageHolder; 
	      end
	 else begin
		if wasExtant 
		 then begin
			print("{",lastNonExtant+1,"...",lastExtant,"}");
			wasExtant := false;
		      end;
		lastNonExtant := page;
	      end;
      end;
print("]");
unmapJobPage;
getmap( pageHolder, "U", 0,0 );
getmap( OtherPageHolder, "U", 0,0 );
chniov( chan, 0,0 );	! is basically release( chan );
end "jobget" .

