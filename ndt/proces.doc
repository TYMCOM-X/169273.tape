
Some notes on SAILs deferred interrupt system:

"constant" GLOBALS:
	Gogtab[IntqWB]	The first address in the `message' ring
	Gogtab[IntqWT]	The first address in the `message' ring
	IntPro		The process which reads the `message' ring 

"variable" GLOBALS
	NOPOLL		non-zero means the `reader' should do nothing
	INTRPT		non-zero means `message' (might be) in ring
	Status(IntPro)	can be Running, Suspended, or Ready
	Gogtab[IntqRP]	First word to read in the `message' ring
			The read pointer.
	Gogtab[IntqWP]	First word of write space in the `message' ring
			The write pointer.
			[if =0 then buffer is disabled]
			[if =Gogtab[IntqRP] then whole buffer is empty]
	The contents of the `message' ring

A message in the `message' ring is actually a specification of a
procedure call.  The message is considered `read' when the procedure 
invoked.

Rules:
1) There is only one procedure (unfortunately also called INTPRO) wich
	may read `messages' from the ring.  
2) Correspondingly, there is only one procedure (DFR1IN) which is 
	allowed to write `messages' into the ring.
3) With respect to SAIL processes, the reader (INTPRO) is
	un-interruptably reads a `message' and starts acting upon it.
4) The reader may not perform during "SAIL immediate" interrupts.
5) Writes into the `message' ring are un-interruptable at the SAIL
	process level (are indivisible with respect to SAIL processes).
6) Writes into the `message' buffer may also occur at "SAIL immediate"
	interrupt level.  This corresponds to "user" interrupts on the
	time-sharing system, which need not occur at a "clean" point
	with respect to the SAIL code.  
7) Taking (5) and (6) together, you may discern that DFR1IN (the writer)
	is allowed to interrupt both the reader (INTPRO) or another 
	writer.  It is in fact worse than this, since (at least on some
	systems) an interrupt (read "SAIL immediate interrupt") may
	interrupt another interrupt (read "SAIL immediate interrupt").


