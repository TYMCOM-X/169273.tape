ENTRY SUBKEQ;
TITLE SUBKEQ
A__1
LPSA__13
TEMP__14
USER__15
SP__16
P__17
SUBKEQ: ; simple integer procedure subkeq( string target, source );
EXTERNAL X44,X11;
;	Returns the position of target in source or 0 if no match.
;	The check ignores case, but is otherwise like subequ.
;A:	source chars left
B__2	;target characters left
C__3	;current target character
;LPSA: source byte pointer
;TEMP: char from source
;USER:	;target byte pointer (in lup2)
;	PUSH	P,B	;save mangled ACs (when becomes SAFE)
;	PUSH	P,C	;save mangled ACs (when becomes SAFE)
	HRRZS	B,-3(SP);	! get target count;
	HRRZS	A,-1(SP);	! and source count;
;		! also: make simple numbers for lengths, constant strs;
;		! for minimal interrupt problems (since does ILDB);
	CAIG	B,0(A);		! longer target than source;
	 SOSGE	B,-3(SP);	! or null length target;
	  JRST	FAIL;		! are both considered mismatches;
;! Now we know that both byte pointers are good (ie at least 1-ch strs);
	ILDB	TEMP,-2(SP);	! point to first target character;
	IORI	TEMP,40;	! check for alphabetic;
	CAIL	TEMP,"a";	! to speed up first character check;
	 CAILE	TEMP,"z";	! not lie between "a" and "z";
	  MOVEI	TEMP,0;		! 0 for non-alpha, otherwise non-zero;
	PUSH	P,TEMP;		! save that quality on the stack;
	SUBI	A,0(B);		! figure out how many matches to try;
;				! 1 + length(source)-length(target);
;! Now we are set.  Run along source looking for 1-char match;
LUP1E:	MOVE	LPSA,0(SP);	! get byte pointer to source;
	LDB	C,-2(SP);	! and first target character;
LUP1S:	
	SOJL	A,FAILpop;	! if we stopped on count, all done;
LUP1:	ILDB	TEMP,LPSA;	! lead character of source;
	XOR	TEMP,C;		! find bits where they differ;
	SKIPE	(P);		! only check for case bit if alphabetic;
	 CAIE	TEMP,40;	! differ only by case bit?;
	  JUMPN	TEMP,xxxLUP1;	! differ (not just by case);

;! first character of target matches, how about the others;
	MOVE	USER,-2(SP);	! get private byte pointer for target;
	MOVEM	LPSA,0(SP);	! and save source pointer to match+;
LUP2:	SOJL	B,GOOD;		! if we run out of target, success;
	ILDB	TEMP,LPSA;	! pull one from each;
	ILDB	C,USER;
	XOR	TEMP,C;		! find bits where they differ;
	JUMPE	TEMP,LUP2;	! exact match on character, keep going;
	CAIE	TEMP,40;	! differ only by the case bit?;
	 JRST	LUP2XX;		! nope, no match here;
	IORI	C,40;		! force character to lower case;
	CAIL	C,"a";		! not case mismatch only if char does;
	 CAILE	C,"z";		! not lie between "a" and "z";
LUP2XX:	  SKIPA	B,-3(SP);	! mismatch, restart one-char search;
	  JRST	LUP2;		! char only differs by case, proceed;
	SOJG	A,LUP1E;	! And go for next try on source;
;				! unless no more (we fail totally);
FAIL:;	MOVEI	A,0;		! return zero (failure) (A always 0);
RETURN:
;	POP	P,C	;restore mangled ACs (when becomes SAFE)
;	POP	P,B	;restore mangled ACs (when becomes SAFE)
	SUB	SP,X44;		! drop the argument strings;
	POPJ	P,;		! and leave;
GOOD:;				! match A=source chars trailing match;
	ADD	A,-3(SP);	! +l(target)-1= l(source[* to inf]);
GOOD1:	SUB	A,-1(SP);	! now get leading characters;
	MOVN	A,A;		! convert to positive;
	AOJA	A,RETURN;	! (+1 since the first character is #1);
PRGEND
