ENTRY MER.PQ
TITLE	MER.PQ -- a priority queue merge routine
..LKID__1	;!left = "priority!queue!class!name:left!pointer!field"
..RKID__2	;!right= "priority!queue!class!name:right!pointer!field"
..DIST__3	;!dist="priority!queue!class!name:distance!integr!field"
..KEY __4	;key field of record
DEFINE	CAMR,<CAMGE >	;reversed key comparison [compare(mem,ac)]

;COMMENT comparison function should be of the "or equal" flavor;

P__17
X__1				;priority!queue procedure 
Y__X+1				; mer!pq( priority!queue X, Y );
MER.PQ:	DMOVE	X,-2(P);	;=	MOVE X,-2(P); MOVE Y,-1(P); 
R__3				;begin	priority!queue R;
D__4				;	integer D;
T1__5				;note: t1 will be key(X) until NO.Y
	JUMPN	X,.+2;		;**** short circuit exit;
	 EXCH	X,Y;		;**** short circuit exit;
	JUMPE	Y,RETURN;	;**** short circuit exit;
	SETZM	R;		;r := null!record;
				;while x and y 
				;  do begin "M2" 
LUP.X:	MOVE	T1,..KEY(X)	;	if comparison(x,y)
LUP.Y:	CAMR	T1,..KEY(Y)	;	 then begin
	 JRST	[EXCH	R,..RKID(X);		r swap !right[x]; 
		 EXCH	R,X;	;		r swap x;
		 JUMPN	X,LUP.X;	      end
		 MOVE	X,Y;	;[VVV: if x = null!record then x := y;]
		 JRST	NO.Y];
				;	 else begin
	EXCH	R,..RKID(Y);	;		r swap !right[y]; 
	EXCH	R,Y;		;		r swap y;
				;	      end
	JUMPN	Y,LUP.Y;	;     end "M2";
				;[^^^: if x = null!record then x := y;]
NO.Y:	SETOM	D;		;D := if x then !dist[x] else -1;
	JUMPE	X,.+2;
	 MOVE	D,..DIST(X);
	JUMPE	R,RETURN;	;while r
				;  do begin "M4"
M4.LUP:	MOVE	Y,..RKID(R);	;	y := !right[r];
	SKIPE	T1,..LKID(R);	;	if !left[r] 
	 JRST	[
	  CAMLE	D,..DIST(T1);	;	then if !dist[ !left[r] ] < D
	   JRST	[MOVE	D,..DIST(T1);	   then begin
				;		D:= 1 + !dist[!left[r]];
		 MOVEM	T1,..RKID(R);		!right[r] := !left[r];
;;WAS:		 MOVEM	Y,..LKID(R);		!left[r] := y;
		 MOVEM	X,..LKID(R);		!left[r] := X;
		 AOJA	D,M4.BLK];		end
				;	   else begin
	  MOVEM	X,..RKID(R);	;		!right[r] := x;
	  AOJA	D,M4.BLK	;		D := 1 + D;
		]		;		end
	SETZB	D,..RKID(R);	;	 else begin
				;		D := 1 + -1;
				;		!right[r]:= null!record;
	MOVEM	X,..LKID(R);	;		!left[r] := x;
				;	      end;
M4.BLK:	MOVEM	D,..DIST(R);	;	!dist[r] := D;
	MOVE	X,R;		;	x := r;
	SKIPE	R,Y;		;	r := y;
	 JRST	M4.LUP;		;     end "M4";
RETURN:	SUB	P,[XWD 3,3]	;return(x);
	JRST	@3(P)		;end;
END

