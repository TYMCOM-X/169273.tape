begin "recent"
define !="COMMENT", #ht="('11&null)", crlf="('15&'12)";
let r!p=record!pointer;
external integer !skip!;

string theUser;
boolean procedure chompOne( integer array passed );
begin	r!p(...) it;
if length(theUser)=0
 then if passed[-4]
      then theUser_ "(" & cv6str(passed[-4]) & cv6str(passed[-3]) & ")"
      else something else.
if it_ wantToKeep( passed[2] )
 then ...:name[it]_ cv6str(passed[0]) & "." & cv6str(passed[1]);
end;

!result!_ redUfd( chompOne, fileSpec, Flags );
define !ufd!trouble!=-3, !bad!file!name!=-2, !illegal!option!=-1,
	!no!more!=0, !requested!stop!=1;
"#"  pad out the names which end in "*" with "#"
"*"  substitute "*" for unspecified name and/or extension
"+"  substitute "*" for unspecified name 
"C"  creation time (TYMCOM-X format, GMT)
"D"  creation time (DEC format, system local)
	passedArray[-4]_ cvsix(userName)
	passedArray[-3]_ cvsix(userName[7 to inf])
	passedArray[-2]_ cvsix(device)
	passedArray[-1]_ PPN
	passedArray[0]_  cvsix(file Name)
	passedArray[1]_  cvsix(file Extension)
	passedArray[2?]_  first(blocksize, License, Creation, Status)
	passedArray[3?]_  second(blocksize, License, Creation, Status)
simple integer procedure whenWritten( integer channel );
begin   own safe integer array fdb[0:'24];
gtfdb(channel, fdb);
return(fdb['14]);
end;
record!class aFile(string name; integer when; r!p(aFile) link );
r!p(aFile) mostRecent;

procedure chooseBest( integer jfn, count(5) );
begin   r!p(aFile) newOne,r,head;
        integer when, best;
mostRecent_ new!record(aFile);
for count_ (count max 1)-1 step -1 until 0
   do begin
        head_ mostRecent;
        newOne_ new!record(aFile);
        aFile:when[newOne]_ when_ whenWritten(jfn);
        aFile:name[newOne]_ jfns(jfn,0);
        while (r_ aFile:link[head]) and aFile:when[r] < when
           do head_ r;
        aFile:link[head]_ newOne;
        aFile:link[newOne]_ r;
        if not gnjfn(jfn) then return;
      end;

best_ aFile:when[head_ aFile:link[mostRecent]];

  do  if best < (when_ whenWritten(jfn))
         then begin
                newOne_ head;
                aFile:when[newOne]_ when;
                aFile:name[newOne]_ jfns(jfn,0);
                head_ aFile:link[head];
                if head and when > aFile:when[head]
                 then begin
                        aFile:link[mostRecent]_ head;
                        while (r_ aFile:link[head]) and when > aFile:when[r]
                           do head_ r;
                        aFile:link[newOne]_ r;
                        aFile:link[head]_ newOne;
                      end;
                best_ aFile:when[head_ aFile:link[mostRecent]];
              end
 until not gnjfn(jfn);
end;
procedure reverse;
begin   r!p(aFile) tail, r, head;
        ! mostRecent -> [#,->[a,->[b,->[c,---]]]];
tail_ null!record; head_ aFile:link[mostRecent];
while head
   do begin
IFCR FALSE THENC
        r_ aFile:link[head]; aFile:link[head]_ tail; tail_ head; head_ r;
ELSEC
        ! head: ^head, tail: ^tail, r: ---;

        r_ aFile:link[head]; aFile:link[head]_ tail;
        ! r: ^head, head: ^tail, tail: ---;
        if not r then begin tail_ head; done; end;

        tail_ aFile:link[r]; aFile:link[r]_ head;
        ! tail: ^head, r: ^tail, head: ---;
        if not tail then begin tail_ r; done; end;

        head_ aFile:link[tail]; aFile:link[tail]_ r;
        ! head: ^head, tail: ^tail, r: ---;
ENDC
      end;
aFile:link[mostRecent]_ tail;
end;
        string wild,number;
        integer jfn,colon,brk;
setbreak(colon_getbreak,":",null,"INS");
print(": ");
while true
do begin
    while (wild_ intty) = "?"
      do print("Type <number> : <wildspec> to see the most recent N files: ");
    number_ scan(wild, colon, brk);
    if brk neq ":" then number swap wild;
    if length(number)=0 then number_ "5";
    if length(wild)=0 then wild_ "*.*";
    jfn_ gtjfn( wild, '100101 lsh 18 ); ! old, iwild, short;
    if !skip!=0 then done;
    print("Cannot find any files like: ", wild, crlf,
        "Try again (? for help): ");
   end;
print("Top ", cvd(number), " files in ", wild );
chooseBest( jfn, cvd(number) );
reverse;
while mostRecent_ aFile:link[mostRecent] do print("
", odtim( aFile:when[mostRecent], -1 ), "   ", aFile:name[mostRecent] );

end "recent"
$

