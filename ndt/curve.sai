entry useSpline, makeSpline;
begin "sample"
require "(sailib)sail.def" source!file;
!get!module(math);

let numeric=real;	! possibly long real;
let dimensioned=array;define array="safe dimensioned";

record!class point (numeric x,y; r!p(point) link);

! evaluate the cubic polynomial: sum(i=0:3) of ci * x**n;
numeric procedure poly3( numeric x, c3,c2,c1,c0 );
	return( ((c3 * x + c2) * x + c1) * x + c0 );

numeric procedure funct3( integer points; numeric time; 
			numeric array cubic );
begin	integer i;
i_ 0 max fint(time) min (points-1);
	! i is the interval (integer part of time) forced into [0:max];
	! fint is just the integer part function;

return(poly3( time-i, cubic[i,3], cubic[i,2], cubic[i,1], cubic[i,0] ))
end;
procedure nCoefficients( integer segs; 
			numeric array cubic, points, inverse, vec);
	! cubic is [0:segs-1, 0:3] (will be filled with cubic coeff);
	! points is [0:points+1] (contains point data);
	! inverse is [0:points+1, -1:points+1] (the "relaxed" matrix);
	! vec is [0:points+1] and is simply some working store;
begin	integer u, row, col;
	numeric temp;
! do a column-vector * matrix multiply.  results to row-vector;
! matrix equivalent: vec := inverse * points;
u_ segs+2;
for row_ 0 step 1 until u
   do begin
	temp_ 0;
	for col_ 0 step 1 until u 
	   do temp_ temp + inverse[row,col] * points[col];
	vec[row]_ temp;
      end;
u_ segs-1;
for row_ 0 step 1 until u 
   do begin
	cubic[row,3]_ (- vec[row] +3 * vec[row+1] -3 * vec[row+2] 
							+ vec[row+3])/6;
	cubic[row,2]_(3 *vec[row] -6 * vec[row+1] +3 * vec[row+2])/6;
	cubic[row,1]_(-3*vec[row]		  +3 * vec[row+2])/6;
	cubic[row,0]_(   vec[row] +4 * vec[row+1]  +   vec[row+2])/6;
      end;
end;
procedure nMatrix( integer segs; numeric array inverse, workSpace );
! inverse[ 0:segs+2, 0:segs+2 ];
! workSpace[ 1:segs+1 ];
! this creates the CUBIC B-SPLINE matrix for a "segs"+1 point set of
! points.  It does this by inverting a matrix which looks like:
! 1/2  0  1/2  0   0 ...	 0
! 1/6 2/3 1/6  0   0 ...	 0
!  0  1/6 2/3 1/6  0 ...	 0
!  0   0  1/6 2/3 1/6  0 ...	 0
!  0   0   0  1/6 2/3 1/6  0 ... 0
! ...		... ... ... ...  0
!  0		... 1/6 2/3 1/6  0
!  0		...  0  1/6 2/3 1/6
!  0		...  0  1/2  0  1/2
! (the matrix is not in fact written down, the algorithm simply
!  mimics an "invert by relaxation" and only keeps around some
!  of the diagonal values in "workSpace".  Instead the inverse 
!  is just built up in the matrix "inverse")
;
begin	integer i, points, line, otherLine;
	numeric mult, mult2, mult3;

arrclr(inverse);  ! this sets it to 0;
points_ segs+1;
for i_ points step -1 until 2
   do inverse[i,i]_ 6; 
inverse[0,0]_ 2 / segs;
inverse[points+1, points+1]_ 2 / segs;
inverse[1,1]_ 3; 
inverse[1,0]_ 1 / segs; 
workSpace[1]_ 2;
mult_ 1 / 2;
for line_ 2 step 1 until points
     do begin "remove(line-1,line)"
	otherLine_ line - 1;
	for i_points+1 step -1 until 0
	   do inverse[line,i]_ inverse[line,i] 
				- mult * inverse[otherLine,i];
	mult_ 1 / (workSpace[line]_ 4 - mult);
      end;
	COMMENT line= points+1;
mult_ 1 / workSpace[segs];
mult2_ mult / workSpace[points]; 
mult3_ 1 / (1 - mult2);
for i_points+1 step -1 until 0
   do inverse[line,i]_ (inverse[line,i] + inverse[segs,i] * mult 
			- mult2 * inverse[points,i]) * mult3;

for line_ points step -1 until 1
   do begin
	otherLine_ line + 1;
	mult_ 1 / workSpace[line];
	for i_points+1 step -1 until 0
	   do inverse[line,i]_(inverse[line,i] - inverse[otherLine,i]) 
			* mult;
      end;

for i_points+1 step -1 until 0
   do inverse[0,i]_ inverse[2,i] - inverse[0,i];
end;
record!class spline ( integer knots; numeric array xc, yc );

internal r!p(spline) procedure makeSpline( integer points;
						r!p(point) pList );
if points < 2 then usererr(0,1,"Oh my, too few points.") else
begin	integer i, segs;
	numeric array xp, yp [ 0 : points+1 ];
	numeric array workSpace[ 0 : points+1 ];
	numeric array inverse[ 0 : points+1, 0 : points+1 ];
	numeric array xc, yc [ 0 : points-2, 0:3 ];
segs_ points-1;

! this just reads in the points into x[1:points] and y[1:points];
for i_ 1 step 1 until points
   do begin 	! write down the points we were given;
	xp[i]_ point:x[pList]; 
	yp[i]_ point:y[pList]; 
	pList_ point:link[pList];
      end;

! now set slopes at start and end (could choose any other slopes);
! xp[0] and yp[0] are start slopes (w/ respect to time);
! xp[points+1] and yp[points+1] are end slopes (w/ respect to time);
xp[0]_ ( xp[2] - xp[1] ) / segs;
yp[0]_ ( yp[2] - yp[1] ) / segs;
xp[points+1]_ ( xp[points] - xp[segs] ) / segs;
yp[points+1]_ ( yp[points] - yp[segs] ) / segs;

nMatrix( segs, inverse, workSpace );
nCoefficients( segs, xc, xp, inverse, workSpace );
nCoefficients( segs, yc, yp, inverse, workSpace );

  begin "sailish"	r!p(spline) result; 
	result_ new!record(spline);
	spline:knots[result]_ points;
	memory[location(spline:xc[result])] swap memory[location(xc)];
	memory[location(spline:yc[result])] swap memory[location(yc)];
	return(result);
  end "sailish"
end;
internal procedure useSpline( integer numPoints; r!p(spline) spl; 
				procedure plot );
begin	r!p(point) kluge;
	numeric time, timeInc, max, x,y; 
max_ spline:knots[spl]-1;
timeInc_ max / numPoints;
for time_ 0 step timeInc until max
   do begin
	x_ funct3( max, time, spline:xc[spl] );
	y_ funct3( max, time, spline:yc[spl] ); 
	plot( x, y );
      end;
end;
end "sample";
