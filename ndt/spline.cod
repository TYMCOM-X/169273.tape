
record!class spline ( integer knots; numeric array xf, yf; 
			r!p(point) pList );	! pList is a Kluge;
procedure relax( numeric array B );
begin	integer i, lc,uc, lr,mr,ur;
integer line,const;
	define for!i(l,u)="for i_ l step 1 until u do";

	procedure remove( integer col, baseLine, change );
	begin	numeric mult;
	mult_ B[ change, col ] / B[ baseLine, col ];
	B[ change, col ]_ 0;
	for!i(col+1,ur) B[change,i]_ B[change,i] - mult * B[baseLine,i];
	end;

	procedure final( integer index );
	begin	numeric mult;
	mult_ 1/B[index,index]; B[index,index]_ 0;
	B[index,index]_ 1;
	for!i(uc+1,ur) B[index,i]_ B[index,i] * mult;
	end;
integer lastColumn; 

lc_ arrinfo(b,1); uc_ mr_ arrinfo(b,2);
lr_ arrinfo(b,3); ur_ arrinfo(b,4);

for line_ lc step 1 until uc-2 do remove( line, line, line+1 );
remove( uc-2, uc-2, uc );
remove( uc-1, uc-1, uc ); final(uc);
for line_ uc-1 step -1 until lc+1 
   do begin remove( line+1, line+1, line ); final(line); end;
remove( lc+2, lc+2, lc ); final(lc);
end;
numeric procedure beta3( numeric tau );
begin	numeric sum;
	integer j;
	preset!with 1,4,6,4,1; own integer array binomial4plus2[-2:2];
sum_ 0;
for j_-2 step 1 until 2
   do if tau<j
	 then sum_ sum + binomial4plus2[j] * (j-tau) ^ 3
			* (if j land 1 then -1 else 1);
return(sum/6);	! 6=3!;
end;
numeric procedure funct3( numeric time; numeric array ai );
begin	numeric result;
	integer index, knots;
knots_ arrinfo(ai,2)-1;
result_ 0;
time_ time * knots;
for index_ -1 step 1 until knots+1
   do if ai[index] and index-2 < time < 2+index
	 then result_ result + ai[index] * beta3(time-index);
return(result);
end;
procedure multout( numeric array coeff, matrix );
begin	integer l,u, row, col;
	numeric array result[l_arrinfo(coeff,1) : u_arrinfo(coeff,2)];
	numeric temp;
if arrinfo(matrix,3) leq l < u leq arrinfo(matrix,4)
and arrinfo(matrix,1) =  l < u  =  arrinfo(matrix,2)
 then begin
	for row_ l step 1 until u
	   do begin
		temp_ 0;
		for col_ l step 1 until u 
		   do temp_ temp + matrix[row,col] * coeff[col];
		result[row]_ temp;
	      end;
	arrtran( coeff, result );
      end
 else usererr(0,1,"You bastard");
end;
procedure simulateRelax(integer knots; numeric array matrix);
begin	numeric array lDiag[0:knots+1],Diag[-1:knots+1],rDiag[-1:knots];
	numeric array box[ -1:knots+1, -1:knots+1 ];
	integer i, line, col;
	define for!i!box="for i_knots+1 step -1 until -1 do";
	numeric mult;
	define assert(s)={if s then begin print("
ASSERT: i=", i, ",line=", line, ",col=",col, ",Mult=", mult, cvps(s))};

arrclr(box); for i_ knots step -1 until 1 do box[i,i]_ 6; 
box[-1,-1]_ box[knots+1,knots+1]_ 2/knots;
arrclr(lDiag, 1); 		lDiag[knots+1]_ 0;
arrclr( Diag, 4);  Diag[-1]_ -1; Diag[knots+1]_ 1; 
arrclr(rDiag, 1); rDiag[-1]_ 0;

!-remove( -1, 0 );	! since value at diag,diag+2 (?=rrdiag?);
!-halvit(0);		! halve so the right stays =1;
!- for!i matrix[0,i]_ (matrix[0,i] + matrix[-1,i]) * .5;
!==>; 
Box[0,-1]_1/knots; Box[0,0]_3; lDiag[0]_0; Diag[0]_2; rDiag[0]_1;

for line_ 1 step 1 until knots
   do begin "remove(line-1,line)"
	col_ line - 1;
	assert( diag[col] geq 2 and diag[line]=4 
		and rdiag[col]=1 and lDiag[line]=1 );
	! mult_ lDiag[line] / Diag[col] ==>; 
	mult_ 1 / Diag[col];
	for!i!box Box[line,i]_ Box[line,i] - mult * Box[col,i];
	lDiag[line]_ 0; 
	! diag[line]_ diag[line] - mult * rdiag[col] ==>;
	diag[line]_ 4 - mult;
      end;

!-remove( knots-1 [not knots], knots+1 );
line_ knots+1; col_ knots-1; mult_ 1/diag[col];	! l-ldiag(knots+1)=-1;
! ! for!i!box Box[line,i]_ Box[col,i] * mult + Box[line,i];
! !	! know: lDiag[line] should be rDiag[col] * mult = 1 * mult;
! !!-remove.final( knots, knots+1 );
! ! mult_ mult / diag[knots];
! ! for!all!i matrix[line,i]_ matrix[line,i] - matrix[knots,i] * mult; 
! ! mult_ 1 / matrix[line,line];
! ! for!all!i matrix[line,i]_ mult + matrix[line,i];
! !==> ***  abs Diag[col] geq 1 -> mult leq 1 < 2 < Diag[knots];
  begin	numeric mult2, mult3;
    mult2_ mult / Diag[knots]; mult3_ 1 / (1 - mult2);
    for!i!box Box[line,i]_ (Box[col,i] * mult + Box[line,i] 
				- mult2 * Box[knots,i]) * mult3;
  end;
for line_ knots step -1 until 0
   do begin "bubble up: remove.final(line+1,line)"
	col_ line + 1;
	assert( lDiag[line]=0 and rDiag[line]=1 );
	! also Diag[col]=1, lDiag[col]=0=rDiag[col], but not stored.;
	mult_ 1 / Diag[line];
	! scale_ rDiag[line] / Diag[col] ==>;
	! for!i!box Box[line,i]_(Box[line,i]-scale*Box[col,i])*mult ==>;
	for!i!box Box[line,i]_(Box[line,i] - Box[col,i]) * mult;
	end;

!=remove.final( 1 [not 0], -1 );
  for!i!box Box[-1,i]_ Box[1,i] - Box[-1,i];

mult_ 4 * epsln(1);
for line_ knots-1 step -1 until -1
   do for!i!box if Box[line,i] neq matrix[line,i]
		and abs (Box[line,i] / matrix[line,i] - 1) < mult
	then print(crlf, "[",line,",",i,"]:", 
		Box[line,i], "/", matrix[line,i] );
end;
record!class splineMatrix (integer knots; numeric array a; 
				r!p(splineMatrix) link );
r!p(splineMatrix) got;

r!p(splineMatrix) procedure findMatrix( integer knots );
begin	r!p(splineMatrix) result;

if result_ got
 then do if splineMatrix:knots[result] = knots then return(result)
	until null!record = result_ splineMatrix:link[result];

result_ new!record(splineMatrix);
splineMatrix:knots[result]_ knots;
splineMatrix:link[result]_ got;

  begin	integer inv,i;
	numeric safe array matrix[ -1:knots+1, -1:knots+1+knots+3 ];
    inv_ knots+1+2;
    arrclr(matrix); 
    for i_ 0 step 1 until knots
	do begin 
	    matrix[i,i-1]_1; matrix[i,i]_4; matrix[i,i+1]_1; 
	    matrix[i,inv+i]_ 6;
	   end;
    matrix[-1,inv-1]_ 6; matrix[knots+1,inv+knots+1]_ 6;
    matrix[-1,-1]_-knots * 3; matrix[-1,1]_knots * 3;
    matrix[knots+1,knots-1]_-knots * 3; 
    matrix[knots+1,knots+1]_knots * 3;
    relax(matrix);
    arrblt( matrix[-1,-1], matrix[-1,inv-1], arrinfo(matrix,0) );
    simulateRelax(knots, matrix);
	! get inverse;
    memory[location( splineMatrix:a[result] )] 
	swap memory[location( matrix )];
    got_ result;
  end;
return(result);
end;
r!p(spline) procedure makeSpline( integer knots; r!p(point) pList );
begin	integer i, segs;
	numeric array x.c, y.c [-1 : knots ];
	r!p(splineMatrix) thisSize;
	r!p(point) back, back2;
	r!p(spline) result; 
segs_ knots-1;
result_ new!record(spline);
spline:pList[result]_ plist;
spline:knots[result]_ knots;
thisSize_ findMatrix( segs );
back_ back2_ null!record;
if knots > 1
 then begin
	x.c[-1]_( point:x[point:link[pList]] - point:x[pList] ) / segs;
	y.c[-1]_( point:y[point:link[pList]] - point:y[pList] ) / segs;
      end
 else x.c[-1]_ y.c[-1]_ 1;	! or any other slope;
for i_ 0 step 1 until segs
   do begin x.c[i]_ point:x[pList]; y.c[i]_ point:y[pList]; 
	back2_ back; back_ pList; pList_ point:link[pList];
      end;
if pList then usererr(knots,3,"Bad knot count");
if knots > 1
 then begin
	x.c[knots]_ ( point:x[back] - point:x[back2] ) / segs;
	y.c[knots]_ ( point:y[back] - point:y[back2] ) / segs;
      end
 else x.c[knots]_ y.c[knots]_ 1;	! or any other slope;
multout(x.c, splineMatrix:a[thisSize] );
multout(y.c, splineMatrix:a[thisSize] );
memory[location( spline:xf[result] )] swap memory[location( x.c )];
memory[location( spline:yf[result] )] swap memory[location( y.c )];
return(result);
end;
procedure useSpline(integer numPoints; r!p(spline) spl; procedure plot);
begin	r!p(point) kluge;
	numeric time, timeInc, x, y;
timeInc_ (time_1)/numPoints;
for time_ 0 step timeInc until 1
   do plot( 	x_ funct3( time, spline:xf[spl] ),
		y_ funct3( time, spline:yf[spl] )	); 
end;
integer knots;

for knots_ 2 step 1 until 100
   do begin got_ null!record;
	print("{{", knots, "}}");
	findmatrix(knots)
      end;
end;
