MODULE REFMAP(DOLLAR,DEBUG,STACK=GLOBAL($CSTK$,#777),DEBUGGER=EXTERNAL(SIX12))=
BEGIN

% Revisions:
08-Jun-81 /SRS
15-Jul-81 /SRS
%

REQUIRE (MIDAS)C1DEFS.BLI;
REQUIRE (MIDAS)C2DEFS.BLI;
REQUIRE (MIDAS)K1DEFS.BLI;
REQUIRE (MIDAS)K2DEFS.BLI;
REQUIRE (MIDAS)UDEFS.BLI;



  MACRO LSTSIZE = (LST[-1])&;

  MACRO MAXENTRIES = (ENTRIES[-1])&;
  MACRO MAXREQUESTS = (REQLIST[-1])&;
  MACRO MAXCURGOB = (CURGOBALS[-1])&;
  MACRO MAXGLBDECLS = (DECLSLIST[-1])&;
  MACRO MAXBLISSSYM = (BLISSSYM[-1])&;

  BIND FALSE = 0;
  BIND TRUE  = 1;
  BIND CODE00 = #00;
  BIND CODE04 = #01;
  BIND CODE14 = #03;
  BIND CODE24 = #05;
  BIND CODE40 = #10;
  BIND CODE44 = #11;
  BIND CODE54 = #13;
  BIND CODE60 = #14;
  BIND CODE64 = #15;
  BIND CODE74 = #17;
  BIND INDEXSIZE = #200;
  BIND BLISSSYMSIZE = 20;


  MACRO LEFT = 18,18&,
        LEFTCODE = 18,14&,
        RIGHT = 0,18&,
        FULL = 0,36&,
        CODE = 32,4&,
        R50N = 0,32&;

  STRUCTURE WORDS[ WRDNUM, BYTEP, BYTESZ ] =
     (@.WORDS+ .WRDNUM)<.BYTEP,.BYTESZ>;


MACRO GENBLISSSYM =
    BEGIN
    LOCAL SUB,MODUL;
    SUB := .MAXBLISSSYM - 7;
    MODUL := .CURRMODULE - #45;    !REMOVE LAST . FROM MODULE NAME
    BLISSSYM[.SUB] := .MODUL + #15;              !  XXXX.C
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #01;  ! XXXX.0
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #02;  ! XXXX.1
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #20;  ! XXXX.F
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #26;  ! XXXX.L
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #31;  ! XXXX.O
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #21;  ! XXXX.G
    BLISSSYM[ SUB := .SUB + 1] := .MODUL + #32;  ! XXXX.P
    END&;



LABEL REFMAP1,
      REFMAP2,
      REFMAP3,
      REFMAP4;

  OWN DRIVER[11],
        LNCNT,
        ENDPROG,
        GLOBMESS,
        DECLMESS,
        UNSATMESS,
        HELLFREEZES,
        WILLLOAD,
        USELIBRARY,
        SHOWBLISS,
        SHOWENTRIES,
        SHOWREQUESTS,
        SHOWDECGLOBS,
        SHOWMODNOT,
        SHOWTYPES,
        SHORTLIST,
        OLDFI,
        ALTOUTFI,
        REMAINDER,
        CODEVAL,
        CURRTYPE,
        CURRSIZE,
        CURRMODULE,
        CURGOBALS,
        MODSIZE,
        TOTALSIZE,
        INDBLKNM,
KSTPI1,KSTPI2,
        PAGEWORD,
        RELFILE,
        LIBRARY,
        R50NAME,
        BLISSSYM,
        REQLIST,
        DECLSLIST,
        ENTRIES,
        INDEX,
        BUFFER;

  MAP  KFCB$ RELFILE;
  MAP  KFCB$ ALTOUTFI;
  MAP  KFCB$ CTERM$;
  MAP UDYNARY$ REQLIST;
  MAP UDYNARY$ CURGOBALS;
  MAP UDYNARY$ DECLSLIST;
  MAP UDYNARY$ BLISSSYM;
  MAP UDYNARY$ ENTRIES;
  MAP WORDS BUFFER;
  MAP WORDS INDEX;
  ROUTINE ADD(X,LST)=
        %
        ADD----
                X       ITEM TO ADDED
                LST     LIST TO WHICH ITEM IS TO BE ADDED
        ADD INSERTS X INTO THE FIRST ZERO ITEM OF LIST LST. ADD
        INCREMENTS LSTSIZE IF THE ITEM IS INSERTED AT THE END.
        %
    BEGIN
    MAP UDYNARY$ LST;
    INCR J FROM 0 TO .LSTSIZE DO
      IF .LST[.J] EQL 0 THEN       % Empty %
        BEGIN
        LST[.J] := .X;
        IF .LSTSIZE LEQ .J THEN LSTSIZE := .J+1;
        RETURN .J
        END;
    END;

  ROUTINE DEL(X,LST)=
        %
        DEL----
                X AND LST AS IN ADD
        DEL REPLACES X IN LST WITH A ZERO
        %
    BEGIN
    MAP UDYNARY$ LST;
    INCR J FROM 0 TO .LSTSIZE DO
      IF .LST[.J] EQL .X   % Found it %
	THEN BEGIN LST[.J] := 0; RETURN .J END;
    END;


  ROUTINE FIND(X,LST)=
        %
        FIND----
                X AND LST AS IN ADD
        FIND RETURNS TRUE IF X IS IN LST, ELSE FALSE IS RETURNED
        %
    BEGIN
    MAP UDYNARY$ LST;
    INCR J FROM 0 TO .LSTSIZE DO
      IF .LST[.J] EQL .X   % Found it %
      THEN RETURN 1;
    RETURN 0
    END;


ROUTINE CREATEFCB(PROMPT)=
    BEGIN
    OWN KFCB$ FCB,
          KFIDT$ FID;


    IF .PROMPT EQL 0 THEN RETURN 0;
    FID := $CGTZM(KV$LICSIZE);
    IF $UGFID(.FID, .PROMPT) EQL 0 THEN
        BEGIN
        $CFREEM(.FID);
        RETURN 0;
        END
    ELSE
        BEGIN
        FCB := $CGTZM(KV$FCBS);
        FCB[K$FIDPTR] := .FID;
        IF .FID[K$EXT] EQL 0 THEN FID[K$EXT] := SIXBIT "REL";
        .FCB
        END
    END;


MACRO OPENFCB(FILE,DIRECTN,MODERTN,MPB)=
    BEGIN
    LOCAL FCB;
    FCB := FILE;
        BEGIN
        MAP KFCB$ FCB;
        FCB[K$MODPB] := MPB;
        FCB[K$DRCT] := DIRECTN;
        FCB[K$CHSIZE] := 7;
        IF $KOFCB(.FCB,MODERTN<0,0>) NEQ .FCB THEN
            $KOPFL(.FCB);
        $KFCBC$LINK(FCB,.CAREA$);
        .FCB
        END
    END&;


%
  CONVERT THE RADIX50 SYMBOL X TO ASCII APPENDING TO THE STRING
  AT LOCATION A.
%
  MACRO F50TO7(X)=
    (IF .X EQL 0 THEN 0
    ELSE IF .X EQL RADIX50 "." THEN "."
    ELSE IF .X EQL RADIX50 "$" THEN "$"
    ELSE IF .X EQL RADIX50 "%" THEN "%"
    ELSE IF .X LEQ RADIX50 "9" THEN .X - RADIX50 "0" + ASCII "0"
    ELSE .X - RADIX50 "A" + ASCII "A"  )&;
ROUTINE R50TOA(X,A)=
  BEGIN
  REGISTER PTR;

  ROUTINE N50C(S)=
    IF .S NEQ 0
      THEN BEGIN LOCAL C;
        C := .S MOD #50;
        N50C(.S/#50);
        REPLACEI(PTR, F50TO7(C)) END;

  PTR := (.A)<36,7>;
  N50C(.X)
  END;
  ROUTINE DISPLAYNAME(FLG,X)=
    BEGIN
    LOCAL NAMBUF[2];
    IF FIND(.X, .BLISSSYM) THEN RETURN;
    IF .LNCNT GTR 7 THEN
      BEGIN
      $UOUTL(UV$SPCL);
      LNCNT := 0;
      END;
    NAMBUF[0] := NAMBUF[1] := '     ';
    R50TOA(.X,NAMBUF<0,0>);
    $UAPSZ(UV$SPCL, .FLG );
    $UAPSC(UV$SPCL,NAMBUF<36,7>,6);
    LNCNT := .LNCNT + 1;
    END;
ROUTINE LIST(LST) =
     %
     LIST DISPLAY THE FIRST NON-ZERO ENTRIES OF LIST.
       CALLS DISPLAYNAME.
     %
 BEGIN
 MAP UDYNARY$ LST;
 LABEL LIST1;
 LIST1:
   INCR J FROM 0 TO .LSTSIZE DO
     BEGIN
     IF .LST[.J] EQL 0 THEN LEAVE LIST1;
     DISPLAYNAME($USPTR('   '),.LST[.J]);
     END;
 END;



ROUTINE DISPLAYTYPES =
  BEGIN
  IF .LNCNT NEQ 0 THEN BEGIN $UOUTL(UV$SPCL); LNCNT := 0; END;
  $UAPOC(UV$SPCL,.CURRTYPE);
  $UAPSZ(UV$SPCL,$USPTR(',,'));
  $UAPOC(UV$SPCL,.CURRSIZE);
  $UOUTL(UV$SPCL);
  END;

ROUTINE SCANBUFFER = % SCANS BUFFER FROM CURRENT POSITION SEQUENTIALLY
                       TO END OF PROGRAM (CODE TYPE 5)

                       ADDS NEW ENTRIES AND GLOBAL DECLARATIONS TO
                       DECLSLIST (CALLS ADD). DELETES THESE SYMBOLS
                       FROM REQLIST AS BEING SATISFIED (CALLS DEL).
                       LISTS THESE SYMBOLS IF SHOWDECGLOBS
                       IS TRUE.

                       ADDS NEW REQUESTS TO REQLIST AND DISPLAYS THESE
                       SYMBOLS IF SHOWREQUESTS IS TRUE.

                       DISPLAYS LOADER TYPES AS THEY ARE ENCOUNTERED IF
                       SHOWTYPES IS TRUE.
                    %

    BEGIN
    RELFILE[K$IDADR] := .BUFFER;
    RELFILE[K$IDCNT] := 1;
    $KREAD(RELFILE);
  
    CURRTYPE := .BUFFER[0,LEFT];
    CURRSIZE := .BUFFER[0,RIGHT];
    IF .SHOWTYPES THEN DISPLAYTYPES();
  
    DECLMESS := FALSE;
    ENDPROG := FALSE;
    MODSIZE := 0;

    UNTIL .ENDPROG DO
        BEGIN
        REMAINDER := 0;
        RELFILE[K$IDCNT] := IF .CURRSIZE GTR 18
                            THEN
                                BEGIN
                                REMAINDER := .CURRSIZE - 18;
                                CURRSIZE := 18;
                                18+1
                                END
                            ELSE 
                                .CURRSIZE + 1;
        $KREAD(RELFILE);                 %READ CURRENT BLOCK%
        IF .SHOWTYPES  THEN DISPLAYTYPES();
        CASE .CURRTYPE OF SET

%   #0%         0;                              %IGNORED%

%   #1%         MODSIZE := .MODSIZE + .CURRSIZE -1;  %CODEBLOCK%

%   #2%         BEGIN                           %SYMBOL BLOCK%
                %
                THE SYMBOL BLOCK CONSISTS OF PAIRED WORDS. THE FIRST
                IN EACH PAIR IS THE SYMBOL IN RADIX50 FORMAT WITH CODE
                BITS AS FOLLOWS:
                        04,24,44,64     GLOBAL DECLARATION
                        60              GLOBAL REFERENCE
                        14,54,74        BLOCK NAMES
                        10,50           LOCAL SYMBOLS
                ONLY GLOBAL DECLARATIONS AND REFERENCES ARE PROCESSED.
                THE SECOND WORD IS THE VALUE OR, IN THE CASE OF CODE60,
                A LINKING CONTROL WORD. THE SECOND WORD IS IGNORED.

                GLOBAL DECLARATIONS ARE PLACED IN DECLSLIST AND DIS-
                PLAYED (PREFIXED WITH A '+') IF SHOWDECGLOBS IS SET.
                REQLIST IS SEARCHED FOR THE SYMBOL AND DELETED
                IF FOUND.

                GLOBALLY REFERENCED SYMBOLS ARE DISPLAYED IF
                SHOWREQUESTS IS SET AND CHECKED FOR SATISFACTION
                IN THE DECLSLIST. IF THEY ARE NOT SATISFIED THEY ARE 
                INSERTED INTO REQSLIST.
                %
                IF .SHOWDECGLOBS OR .SHOWREQUEST THEN
                    BEGIN
                    IF NOT .DECLMESS THEN
                        BEGIN
                        IF .LNCNT NEQ 0 THEN
                            BEGIN
                            $UOUTL(UV$SPCL);
                            LNCNT := 0;
                            END;
                        IF .GLOBMESS THEN
                            $UAPSZ(UV$SPCL, $USPTR(' Globals:'))
                        ELSE
                            BEGIN
                            $UAPSZ(UV$SPCL,$USPTR(' Global Declarations and Requests '));
                            $UAPSZ(UV$SPCL,$USPTR('(Declarations are prefixed by<+>)'));
                            GLOBMESS := TRUE;
                            END;
                        $UOUTL(UV$SPCL);
                        DECLMESS := TRUE;
                        END;
                    END;

                INCR K FROM 1 TO .CURRSIZE BY 2 DO
                        BEGIN
                        CODEVAL := .BUFFER[.K,CODE];
                        R50NAME := .BUFFER[.K,R50N];
                        IF (.CODEVAL EQL CODE04) OR
                           (.CODEVAL EQL CODE24) OR
                           (.CODEVAL EQL CODE44) OR
                           (.CODEVAL EQL CODE64)
                        THEN
                                BEGIN
                                IF NOT FIND(.R50NAME,.DECLSLIST)
                                THEN
                                        BEGIN
                                        IF .SHOWDECGLOBS
                                        THEN DISPLAYNAME($USPTR('  +'),.R50NAME);
                                        ADD(.R50NAME,.DECLSLIST);
                                        DEL(.R50NAME,.REQLIST);
                                        IF NOT FIND(.R50NAME, .CURGOBALS)
                                           THEN ADD(.R50NAME, .CURGOBALS);
                                        END
                                ELSE
                                        BEGIN
                                        IF .LNCNT NEQ 0 THEN
                                          $UOUTL(UV$SPCL);
                                        LNCNT := 0;
                                        DISPLAYNAME($USPTR('*** MULTIPLY DEFINED '),.R50NAME);
                                        IF .LNCNT NEQ 0 THEN $UOUTL(UV$SPCL);
                                        LNCNT := 0;
                                        END;
                                END
                        ELSE IF .CODEVAL EQL CODE60
                             THEN
                                BEGIN
                                IF .SHOWREQUESTS AND NOT FIND(.R50NAME, .CURGOBALS)
                                   THEN
                                   BEGIN
                                   ADD(.R50NAME, .CURGOBALS);
                                   DISPLAYNAME($USPTR
                                          ('   '), .R50NAME);
                                   END;
                                IF NOT (FIND(.R50NAME,.REQLIST) OR FIND(.R50NAME, .DECLSLIST))
                                THEN
                                        ADD(.R50NAME,.REQLIST);
                                END
                             ELSE IF (.CODEVAL NEQ 2 AND .CODEVAL NEQ #12) THEN
                                                % SKIP LOCAL SYMBOLS%
                                BEGIN
                                $UOUTL(UV$SPCL);
                                $UAPSZ(UV$OUTPUT,$USPTR(' UNKNOWN SYMBOL TYPE:  '));
                                $UAPOC(UV$SPCL,.CODEVAL);
                                $UOUTL(UV$SPCL);
                                END;
                        END;
                IF .SHOWREQUESTS AND .SHOWTYPES
                THEN $UOUTL(UV$SPCL);
                END;
%   #3%         0;                              %HISEG%
%   #4%         0;                              %ENTRIES%
%   #5%         ENDPROG := TRUE;                %END PROGRAM%
%   #6%         0;                              %NAME BLOCK%
%   #7%         0;                              %START ADDRESS%
%  #10%         0;                              %INTERNAL REQUEST%
%  #11%         0;                              %POLISH%
%  #12%         0;                              %LINK%
%  #13%         0;                              %LVAR%
%  #14%         0;                              %INDEX%
                TES;
  
     IF .REMAINDER EQL 0 THEN
       BEGIN
       RELFILE[K$IDCNT] := 1;
       $KREAD(RELFILE);
       CURRTYPE := .BUFFER[0,LEFT];
       CURRSIZE := .BUFFER[0,RIGHT];
       END
     ELSE CURRSIZE := .REMAINDER;
  
     END;
  
    IF .LNCNT NEQ 0 THEN $UOUTL(UV$SPCL);
    LNCNT := 0;
    $UAPSZ(UV$SPCL, $USPTR('     Size:'));
    $UAPON(UV$SPCL, .MODSIZE, 7);
    $UOUTL(UV$SPCL);
    INCR K FROM -1 TO .MAXCURGOB DO CURGOBALS[.K] := 0;  !EMPTY CURGOBALS
    TOTALSIZE := .TOTALSIZE + .MODSIZE;
  
    END;


%----------   MAIN   ENTRY   ----------%


    $CRESET();
    $CISINIT(); % Initialize the Interrupt System %
    $CGPPN();   % Get users directory PPN (CPPN$ and CUPPN$) %
    $COWNR();   % Get PPN of directory from which being run (eg: SYS)(COWNR$) %
    $CUNAME();  % Get users username-string (CUNAM$[2]) %
    $CTIME();   % Get time of day (CTIME$) %
    $CDATE();   % Get today's date (CDATE$) %


ALTOUTFI := CREATEFCB($USPTR('?M?JList File: '));
IF .ALTOUTFI NEQ 0 THEN
                       BEGIN
                       OPENFCB(.ALTOUTFI, KV$OUTPUT, $KSQLN, 0);
                       OLDFI := $UOUTI(.ALTOUTFI);
                       END;
DO DRIVER[0] := CREATEFCB($USPTR('?J?MMain file to be listed: '))
    UNTIL .DRIVER[0] GTR 0;

$UMESS(UV$OUTPUT,$USPTR('Enter any other files to be listed'));
$UMESS(UV$OUTPUT,$USPTR('Terminate with an extra carriage return'));

REFMAP1:
  INCR J FROM 1 TO 10 DO
    BEGIN
    DO DRIVER[.J] := CREATEFCB($USPTR('*'))
        UNTIL .DRIVER[.J] GEQ 0;
    IF .DRIVER[.J] EQL 0 THEN LEAVE REFMAP1;
    END;

DO LIBRARY := CREATEFCB($USPTR('Library File: ')) UNTIL .LIBRARY GEQ 0;
IF .LIBRARY NEQ 0
 THEN USELIBRARY := TRUE
 ELSE USELIBRARY := FALSE;

SHOWTYPES := FALSE;
SHOWENTRIES := $UYESN(UV$REPEAT,$USPTR('List Module Entries?? '));
SHOWREQUESTS := $UYESN(UV$REPEAT,$USPTR('List Global Requests?? '));
SHOWDECGLOBS := $UYESN(UV$REPEAT,$USPTR('List Declared Globals?? '));
IF NOT .SHOWDECGLOBS AND NOT .SHOWREQUESTS
       THEN SHOWBLISS := FALSE
       ELSE SHOWBLISS :=    $UYESN(UV$REPEAT,$USPTR('List BLISS generated symbols?? '));
BLISSSYM := $CGTZM(BLISSSYMSIZE) + 1;
IF .SHOWENTRIES OR .SHOWREQUESTS OR .SHOWDECGLOBS THEN
    SHORTLIST := FALSE ELSE SHORTLIST := TRUE;
SHOWMODNOT := 0;
GLOBMESS := FALSE;

ENTRIES := $CGTZM(50) + 1;
REQLIST := $CGTZM(18 * 50) + 1;
CURGOBALS := $CGTZM(#377) + 1;
DECLSLIST := $CGTZM(18 * 100) + 1;
BUFFER := $CGTZM(#400);
INDEX := $CGTZM(INDEXSIZE + #177);

MAXBLISSSYM := 0;
MAXREQUESTS := 0;
MAXGLBDECLS := 0;
MAXENTRIES := 0;
TOTALSIZE := 0;

IF NOT .SHOWBLISS THEN
    BEGIN
    BLISSSYM[ 0] := RADIX50 '.ENT.0';
    BLISSSYM[ 1] := RADIX50 '.ENT.1';
    BLISSSYM[ 2] := RADIX50 '.ENT.2';
    BLISSSYM[ 3] := RADIX50 '.ENT.3';
    BLISSSYM[ 4] := RADIX50 '.ENT.4';
    BLISSSYM[ 5] := RADIX50 '.ENT.5';

    BLISSSYM[ 6] := RADIX50 '.EXT.0';
    BLISSSYM[ 7] := RADIX50 '.EXT.1';
    BLISSSYM[ 8] := RADIX50 '.EXT.2';
    BLISSSYM[ 9] := RADIX50 '.EXT.3';
    BLISSSYM[10] := RADIX50 '.EXT.4';
    BLISSSYM[11] := RADIX50 '.EXT.5';
    MAXBLISSSYM := BLISSSYMSIZE;
    END;

REFMAP2:
  INCR I FROM 0 TO 10 DO
    BEGIN
    IF .DRIVER[.I] EQL 0 THEN LEAVE REFMAP2;
    RELFILE := OPENFCB(.DRIVER[.I], KV$INPUT, $KSQBL, 0);
    RELFILE[K$IDADR] := .BUFFER;
    RELFILE[K$IDCNT] := 1;
    $KREAD(RELFILE);
    CURRSIZE := .BUFFER[0,RIGHT];
    CURRTYPE := .BUFFER[0,LEFT];

    IF .SHOWTYPES THEN DISPLAYTYPES();
    IF .CURRTYPE EQL 4 THEN             %ENTRIES%
      BEGIN
      IF .CURRSIZE GTR 18 THEN
        BEGIN
        REMAINDER := .CURRSIZE - 18;
        CURRSIZE := 18;
        END
      ELSE
        REMAINDER := 0;

      UNTIL .CURRSIZE EQL 0 DO
        BEGIN
        RELFILE[K$IDCNT] := .CURRSIZE + 1;
        $KREAD(RELFILE);
        INCR J FROM 1 TO .CURRSIZE DO
          ADD(.BUFFER[.J,R50N],.ENTRIES);
        IF .REMAINDER LEQ 18 THEN
          ( CURRSIZE := .REMAINDER;  REMAINDER:= 0 )  % this is a fix %
        ELSE
          REMAINDER := .REMAINDER - 18  %CURRSIZE IS STILL 18%
        END;

      RELFILE[K$IDCNT] := 1;
      $KREAD(RELFILE);          %READ PROGRAM NAME BLOCK%
      CURRSIZE := .BUFFER[0,RIGHT];
      CURRTYPE := .BUFFER[0,LEFT];
      IF .SHOWTYPES THEN DISPLAYTYPES();
      END;

    IF .CURRTYPE EQL 6 THEN               %PROGRAM NAME BLOCK%
      BEGIN
      RELFILE[K$IDCNT] := .CURRSIZE + 1;
      $KREAD(RELFILE);
      CURRMODULE := .BUFFER[1,R50N];
      IF .SHORTLIST THSPLAYNAME($USPTR(' '), .CURRMODULE)
      ELSE
         BEGIN
         DISPLAYNAME($USPTR('?J?M'), .CURRMODULE);
         $UOUTL(UV$SPCL);
         END;
      LNCNT := 0;
      IF .SHOWENTRIES AND (.ENTRIES[0] NEQ 0) THEN
        BEGIN
        $UAPSZ(UV$SPCL,$USPTR(' Loader Entries:'));
        $UOUTL(UV$SPCL);
        LIST(.ENTRIES);
        END;
      INCR J FROM 0 TO .MAXENTRIES DO ENTRIES[.J] := 0;  %EMPTY ENTRIES LIST%
      MAXENTRIES := 0;
      END
    ELSE $UMESS(UV$OUTPUT, $USPTR('GARBAGE IN DRIVER FILE'));
    IF NOT .SHOWBLISS THEN GENBLISSSYM;
    SCANBUFFER();
    $KFREEFCB(RELFILE);
    END;
IF .USELIBRARY THEN
  BEGIN
  INDBLKNM := 0;
  WILLLOAD := HELLFREEZES := FALSE;
  RELFILE := OPENFCB(.LIBRARY, KV$INPUT, $KSQBL, 0);

REFMAP3:
  UNTIL .HELLFREEZES DO
    BEGIN
    INDBLKNM := .INDBLKNM + 1;
    RELFILE[K$IDADR] := .INDEX;
    RELFILE[K$IDCNT] := INDEXSIZE;
    $KSTPI(.RELFILE,  ((.INDBLKNM - 1)/4)+1, ((.INDBLKNM -1) MOD 4) * #200);
    $KREAD(RELFILE);
    RELFILE[K$IDADR] := .BUFFER;                %RESTORE READ AREA%
    INCR J FROM 0 TO INDEXSIZE - 1 DO

REFMAP4:
      BEGIN
      IF (.J EQL 0 AND .INDBLKNM EQL 1) THEN LEAVE REFMAP4;
      IF .INDEX[.J,FULL] EQL 0 THEN
        LEAVE REFMAP3;
      CODEVAL := .INDEX[.J,CODE];
      R50NAME := .INDEX[.J,R50N];
      SELECT .CODEVAL OF NSET
        CODE00: BEGIN
                ADD(.R50NAME,.ENTRIES);
                IF FIND(.R50NAME,.REQLIST) THEN
                  BEGIN
                  DEL(.R50NAME,.REQLIST);
                  WILLLOAD := TRUE;
                  END;
                END;
        CODE14: CURRMODULE := .R50NAME;
        
        CODE40:  BEGIN
                 IF .WILLLOAD THEN
                  BEGIN
                  IF .SHORTLIST THEN
                      DISPLAYNAME($USPTR(' '), .CURRMODULE)
                  ELSE
                      BEGIN
                      DISPLAYNAME($USPTR('?M?J'), .CURRMODULE);
                      $UOUTL(UV$SPCL);
                      END;
                  LNCNT := 0;
                  IF .SHOWENTRIES AND (.ENTRIES[0] NEQ 0) THEN
                    BEGIN
                    $UAPSZ(UV$SPCL, $USPTR(' Loader Entries:'));
                    $UOUTL(UV$SPCL);
                    LIST(.ENTRIES);
                    END;
                  PAGEWORD := .INDEX[.J,R50N];
                  KSTPI1 := ((.PAGEWORD<0,18>-1)/4)+1;
                  KSTPI2 := (((.PAGEWORD<0,18>-1) MOD 4) * #200) + .PAGEWORD<18,18>;
                  $KSTPI(.RELFILE, .KSTPI1, .KSTPI2);
                  IF NOT .SHOWBLISS THEN GENBLISSSYM;
                  SCANBUFFER();
                  WILLLOAD := FALSE;
                  END
                 ELSE IF .SHOWMODNOT THEN
                       BEGIN
                       DISPLAYNAME($USPTR(' '), .CURRMODULE);
                       $UAPSZ(UV$SPCL,$USPTR(' WILL NOT LOAD'));
                       $UOUTL(UV$SPCL);
                       LNCNT := 0;
                       END;
                 INCR K FROM 0 TO .MAXENTRIES DO ENTRIES[.K] := 0;
                 END;
        OTHERWISE:  $UMESS(UV$OUTPUT, $USPTR('GARBAGE IN LIBRARY INDEX'));
        TESN;
        END;
    END;
  END;
$UAPSZ(UV$SPCL,$USPTR('      Total Size:'));
$UAPON(UV$SPCL,.TOTALSIZE, 7);
$UOUTL(UV$SPCL);
UNSATMESS := FALSE;
INCR J FROM 0 TO .MAXREQUEST DO
    IF .REQLIST[.J] NEQ 0 THEN
        IF (BEGIN LOCAL JOBBUF[2];
                  R50TOA(.REQLIST[.J], JOBBUF<0,0>);
                  .JOBBUF<15,21>   END)
           NEQ "JOB" THEN
            BEGIN
            IF NOT .UNSATMESS THEN
                BEGIN 
                UNSATMESS := TRUE;
                $UMESS(UV$SPCL,$USPTR('?J?M-----UNSATISFIED GLOBAL REFERENCES----'));
                LNCNT := 0;
                END;
            DISPLAYNAME($USPTR('   '), .REQLIST[.J]);
            END;
IF .ALTOUTFI NEQ 0
   THEN
   BEGIN
   $UOUTI(.OLDFI);
   $KFREEFCB(ALTOUTFI)
   END
   ELSE $UOUTL(UV$OUTPUT);
END
ELUDOM
  mFR