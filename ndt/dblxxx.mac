entry setUp,onUUO
	Title DblSim -- Double precision opcode simulations
	reloc
;Acs
t1= 1		;generic temporary to fiddle with (indexable)
o.= 2		;Pointer to the base of the per-opcode table (indexable)
fl.pc= 3	;flags ,, PC for returning
v.a= 4		;Double AC: the AC argument for the Opcode
v.m= 6		;Double AC: the MEMORY argument for the Opcode
ex.a= 8
ex.m= 9

.JBUUO== 40
.JB41== 41

;Per Opcode storage (argument state)
Storage:
      phase 0
	oACS:	block 20 ;ACs at time of OPCODE [MUST be first]
	oAcAdd:	block 1	; userAc(o.)  [for dmovem res,@... after oACS]
	o.mem.a: block 2 ;memory argument (two words)
	o.goAddr:	;when leaving. One word not in Acs or Lock
	oUUO:	block 1	;the actual UUO
	o.goBlk:	;when leaving. Two words not in Acs or Lock
	o.ac.a:	block 2	;ac argument (two words)
	o.lock:	block 1	;recursion interlock (almost complete: exit)
			;-1 means "available for use"
	..size== .
      dephase

	block	7*..size

;Flags for CPU state:
b.Over== 1b0	;Overflow
b.CRY0== 1b1	;Carry out of bit 0
b.CRY1== 1b2	;Carry out of bit 1
b.FLOV== 1b3	;Floating point overflow
b.FPDN== 1b4	;first part done
b.USER== 1b5	;in USER mode (not EXEC)
b.USIO== 1b6	;USER I/O is OK
b.PBLC== 1b7	;PUBLIC mode
b.NADF== 1b8	;Inhibit Address failure
b.TRP2== 1b9	;TRAP2
b.TRP1== 1b10	;TRAP1
b.FLUN== 1b11	;Floating point Underflow
b.NDIV== 1b12	;No-Divide
define pnt.carries(flagWord) = <point 2,flagWord,1>

;DFAD = 110	;DFSB = 111	;DFMP = 112	;DFDV = 113
;DADD = 114	;DSUB = 115	;DMUL = 116	;DDIV = 117
;... will use 30-37 for checkout
dblBas== 30	;for the purpose of testing
opdef uDadd [34b8]

UUO.SV:	jsr onUUO	;effective address of JSR for "real" opcode
UUO.GO:	.+1		;effective address of JSR + 1 (where to go)
	halt	.	;stop if not really a JSR
recur:	-1
tmp.o:	0
onUUO:	0
	aose	recur		;watch out for recursion
	 halt	.		;due to interrupts
	movem	o.,tmp.o
	ldb	o.,[point 9,.JBUUO,8]
	xori	o.,dblBas
	trnn	o.,-7
	 skipn	o.,Handles(o.)
	  jrst	[move	o.,onUUO
		 movem	o.,@UUO.SV
		 move	o.,tmp.o
		 sos	recur	;let other guy cope as he likes
		 jrst	UUO.GO]
	aose	o.lock(o.)	;avoid local recursion
	 halt	.
	movem	17,oACS+17(o.)	;save another AC
	movei	17,oACS(o.)	;Then save all of the Acs
	blt	17,oACS+16(o.)	;
	move	17,.JBUUO	;what the UUO was
	movem	17,oUUO(o.)	;save for later examination
	move	17,tmp.o	;save o. wherever it belongs
	movem	17,oACS+o.(o.)	;(since our ac save wrote wrong value)
	move	fl.PC,onUUO	;where the UUO came from
	sos	recur		;entries are now all in per-UUO area

	movem	0,oACS+20(o.)	;get set to get the AC arg (note wrap)
	ldb	t1,[point 4,oUUO(o.),12]	;get the AC field
	hrli	t1,o.			;make it index into the table
	dmove	v.a,@t1			;get AC args, note 0 wrap OK
	movem	t1,oAcAdd(o.)		;save AC location for stores
	dmovem	v.a,o.ac.a(o.)		;save ac args away
	hrro	t1,oUUO(o.)		;get the memory address
	dmove	v.m,(t1)		;get memory args (assume memory)
	trnn	t1,777760		;was it really an AC first?
	 jrst	[hrli	t1,o.		;an AC. get its stored address
		 move	v.m,@t1		;read it from user table
		 addi	t1,1		;check mem+1 for ACness
		 trnn	t1,20		;if memory, v.m+1 is OK
		  move	v.m+1,@t1	;else also get from AC block
		 jrst	gotMem]
	aojn	t1,gotMem		;did it wrap to 0?
	 move	v.m+1,oAcs(o.)		;Yup, second word comes from ACs
gotMem:	dmovem	v.m,o.mem.a(o.)		;save arg from memory (whew)
	hlrz	t1,o.		;dispatch to handler
	jrst	(t1)

endGo:	move	t1,oAcAdd(o.)	;put result back into Acs
	movem	v.a,@t1
	addi	t1,1		;ac+1
	trz	t1,20		;make it wrap
	movem	v.a+1,@t1
	dmove	v.a,[blt 17,17	;get exit code
		     jrstf @o.goAddr]
	addi	v.a+1,(o.)	;relocate into the block
	dmovem	v.a,o.goBlk(o.)	;save it somewhere
	movem	fl.PC,(v.a+1)	;save place to jump to
	hrlzi	17,oAcs(o.)	;set the BLT ac
	sos	o.lock(o.)	;tiniest recursion window I can get 
	jrst	o.goBlk(o.)	;and run with it

Handles:
0;	xwd	doDfad,0 + Storage
0;	xwd	doDfsb,..size + Storage
0;	xwd	doDfmp,2 * ..size + Storage
0;	xwd	doDfdv,3 * ..size + Storage
	xwd	doDadd,4 * ..size + Storage
0;	xwd	doDsub,5 * ..size + Storage 
0;	xwd	doDmul,6 * ..size + Storage 
0;	xwd	doDdiv,7 * ..size + Storage 
doDadd:	tlo	v.a+1,(1b0)	;add least significant words
	tlz	v.m+1,(1b0)	;together. result carries IFF
	add	v.a+1,v.m+1	;result AC is positive
				;(pos + neg can never overflow)
	tlon	v.a,(1b0)	;same trick on High order word
	 tdza	t1,t1		;keep track of sign bit results in T1 
	 movei	t1,1		
	tlze	v.m,(1b0)
	 addi	t1,1		;another bit for the result
	tlzn	v.a+1,(1b0)	;add carry from low word to negative
	 addi	v.a,1		;word (cannot overflow: max res=0)
	add	v.a,v.m		;add 35 bits of high word
	jumpl	v.a,noCry1	;did we carry out of bit 1?
	tlo	fl.PC,(b.cry1)	;set the CRY1 flag if so
				;here sign(v.a) off, sign(v.a+1) off
	cain	t1,0		;if no sign carry (note: t1+1)
	 tloa	fl.PC,(b.over+b.trp1)	;then set overflow & trap1
	 tlo	fl.PC,(b.cry0)		;otherwise set CRY0
	trne	t1,1		;check the resultant sign
	 jrst	endGo		;reversed sense since havent added CRY1
	tlo	v.a,(1b0)	;Negative result (set both signs)
	tlo	v.a+1,(1b0)	;Negative result (set both signs)
	jrst	endGo
	
noCry1:	;no carry out of bit 1. sign(v.a) is on, sign(v.a+1) is off
	trzn	t1,1		;clear bit showing what sign wanted
	 tlza	v.a,(1b0)	;and put the appropriate sign
	 tlo	v.a+1,(1b0)	;into both sign bits
	jumpe	t1,endGo	;If no CRY0 to set, we are all done
	tlo	fl.PC,(b.over+b.cry0+b.trp1)	;set CRY0, do overflow
				;Since this happened without CRY1
	jrst	endGo		;and return to the user
setup:	setzm	recur		;shut this down for a bit
	hlrz	o.,.JB41
	andi	o.,777740	;get the opcode and the AC
	caie	o.,0
	cain	o.,(<halt>)
	 jrst	[move	o.,[jsr stop]
		 movem	o.,.JB41
		 jrst	setup]
	cain	o.,(<pushj 17,>)	;check for PUSHJ P,
	 jrst	[move	o.,.JB41	;get original PUSHJ
		 dpb	o.,[point 23,goOn,35]	;store effective address
		 move	o.,[jsr PushGo]	;store effective address
		 movem	o.,.JB41
		 jrst	setup]
	caie	o.,(<jsr>)	;was it precisely JSR 0, ?
	 halt	.
	ldb	o.,[point 27,.JB41,35]
	cain	o.,onUUO	;was it already set up for here?
	 jrst	allSet		;then leave it alone
	movem	o.,UUO.SV	;save address for flags and PC
	hrri	o.,1(o.)	;increment the address
	movem	o.,uuo.go	;and save as address to jump to
	move	o.,[jsr onuuo]	;then install our handler
	movem	o.,.JB41
allSet:	movei	o.,Storage	;clear all recursion locks in UUOs
	movei	t1,8		;one per opcode handled (8 opcodes)
clearEm: setom	o.lock(o.)	;clear lock
	addi	o.,..size	;next buffer
	sojg	t1,clearEm	;loop while any left to do
	setom	recur	;turn it all on
	popj	17,	;and return to whatever started this

stop:	0
	outstr	[asciz "Oh my, I must stop (illegal UUO)"]
	halt	@stop

PushGo:	0
	push	17,.-1
goOn:	jrst	.+1
	outstr	[asciz "Oh my, Unset PUSHJ siulation"]
	halt	@PushGo
end
doDmul:	tlz	v.a+1,(1b0)	;canonize low words
	tlz	v.m+1,(1b0)
	move	v.a+2,v.m+1	;low*low into v.a+2,v.a+3
	mul	v.a+2,v.a+1
	move	v.m+2,v.a	;one inner product to v.m+2,v.m+3
	mul	v.m+2,v.m+1
	move	t1,v.m		;save this
	mul	v.m,v.a+1	;the other inner product to v.m,v.m+1
	mul	v.a,t1		;high*high into v.a,v.a+1
;now put them all together
	jov	.+1
	dadd	v.a+1,v.m
	jov	[aoja	v.a,.+1]
	dadd	v.a+1,v.m+2
	jov	[aoja	v.a,.+1]
	jumpl	v.a,resNeg
	tlz	v.a+1,(1b0)
	tlz	v.a+2,(1b0)
	tlz	v.a+3,(1b0)
dm.sto:	move	t1,argAdd(o.)
	addi	t1,2		;get place to put the last 2 acs
	trz	t1,20		;AC wrapping (t1 point to ac+2 now)
	movem	v.a+2,@t1
	addi	t1,1		;get place to put the final ac
	trz	t1,20		;AC wrapping (t1 point to ac+3 now)
	movem	v.a+3,@t1
	jrst	endGo
resNeg:	tlo	v.a+1,(1b0)
	tlo	v.a+2,(1b0)
	tlo	v.a+3,(1b0)
	jrst	dm.sto
long real simple procedure df.sum;
start!code	define f1=1,e1=3,f2=4,e2=6, temp='14,p='17, guard=6;
	label doadd, shftr, stripn, strip, return, bit.found, roundOk;

	setzm	soft.flags;
	jsp	temp,strip;
	dmove	f2,f1;
	move	e2,e1;
	dmove	f1,ac;
	jsp	temp,strip;
	caml	e1,e2;
	 jrst	doadd;
	exch	e2,e1;
	exch	f2,f1;
	exch	f2+1,f1+1;
	jrst	doadd;

strip:	ldb	e1,['331000 lsh 18 + f1];
	jumpl	f1,stripn;
	tlz	f1,'777000;
	jrst	shftr;
stripn:	xori	e1,'377;
	tlo	f1,'777000;
shftr:	subi	e1,'200;
	ashc	f1,GUARD;
	jrst	(temp);

doadd:	! e1 is the arg with the larger exponent;
	sub	e2,e1;		! get amount to shift f2 right by;
	ashc	f2,(e2);	! shift (align binary points); 
	dadd	f1,f2;		! e1: expon, get fract in f1,f1+1;
				! now e2,f2,f2+1 all trash;
	move	f2,f1;		! remember sign of the result in F2;
	caige	f1,0;		! get abs of result for normalization;
	 dmovn	f1,f1;
	move	e2,f1+1;	! save LS.word during JFFO;
	jffo	f1,bit.found;	! find how much need to normalize;
	exch	f1,e2;		! MS.word = 0, "shift" 35 bits left;
				! note this clears saved "LS.word";
	subi	e1,35;		! account in exponent;
	jffo	f1,bit.found;	! now go find the bit;
	jrst	return;		! both words 0 (note jffo cleared f1+1);
bit.found:
	exch	f1+1,e2;	! restore proper LS.word;
	subi	e1,(e2);	! adjust the exponent by JFFO result;
	ashc	f1,1-9(e2);	! shift so (almost) normalized;
	tlo	f1+1,'400000;	! prepare to round;
	aojn	f1+1,roundOk;
	addi	f1,1;		! round carried to high word;
	tlnn	f1,002000;	! did the rounding change the exponent?;
	 jrst	roundOk;	! nope, all done;
	addi	e1,1;		! bump the exponent;
	ashc	f1,-1;		! actually, know result = 001000,,0 / 0;
roundOk: ashc	f1,-1;		! remove the rounding bit;
	addi	e1,'200+9-GUARD; ! put back into the standard range;
	dpb	e1,['331000 lsh 18 + f1];	! store it;
	caige	f2,0;		! negate result if desired;
	 dmovn	f1,f1;
	trnn	e1,'777400;	! check for overflow;
	 jrst	return;		! return immediately if none;
	movem	e1,soft.flags;
	pushj	p,dfov;		! indicate overflow;
	skipa;
return:	 hllos	soft.flags;
end;

long real simple procedure soft.dfad;
	start!code  dmove 1,mem;  jrst df.sum;  end;

long real simple procedure soft.dfsb;
	start!code  dmovn 1,mem;  jrst df.sum;  end;

