begin "quad"
require 3 version;
require "[]{}" delimiters;
define !="COMMENT"
, crlf=[('15&'12)], tab=[('11&null)], space=[('40&null)]
;

define	 red=1,blue=2,white=3,green=4,yellow=5,orange=6
	,#k0=0, #k1=1, #k2=2, #k3=3, #k4=4, #k5=5, #k6=6, #k7=7
	,#sA=0,#sB=1,#sC=2,#sD=3,#sE=4,#sF=5
	,#sG=6,#sH=7,#sI=8,#sJ=9,#sK=10,#sL=11
;

safe string array color!pname[red:orange];
safe string array face[red:orange];
preload!with "R", "B", "W", "G", "Y", "O";	! initial values;
safe integer array color!letter[red:orange];

simple integer procedure identify( integer character );
begin	integer i;
for i_ red step 1 until orange
 do if color!letter[i]=character then return(i);
return(0);
end;

procedure setColors(string colors);
if length(colors)=6 or length(colors)=0 
 then begin	integer i; safe integer array save[1:6];
	arrtran(save,color!letter);
	if length(colors)
	 then for i_ red step 1 until orange
		   do color!letter[i]_lop(colors);
	for i_ red step 1 until orange
	   do if i neq identify(color!letter[i])
		 then begin
			Print("Redundant character:"& color!letter[i],
				", keeping previous colors.");
			arrtran(color!letter,save);
			done;
		      end;
	for i_ red step 1 until orange
	   do begin
		face[i]_ " " & (color!letter[i] xor '40);
		color!pname[i]_ " " & color!letter[i];
	      end;
      end;
COMMENT		Layout (cube names)

		 1 B 2
		 A r C
		 0 D 3

	 1 A 0	 0 D 3	 3 C 2	 2 B 1
	 L y I	 I b J	 J w K	 K g L
	 7 H 4	 4 E 5	 5 F 6	 6 G 7

		 4 E 5
		 H o F
		 7 G 6
Corner pieces:	<name>: <color 0>-<color 1>-<color 2> 
	k0: r-b-y	k1: r-y-g	k2: r-g-w	k3: r-w-b
	k4: o-y-b	k5: o-b-w	k6: o-w-g	k7: o-g-y
  Orientation:
	in positions 0:3	0 <-> color 0 on red(TOP) face
				1 <-> color 1 on red(TOP) face
				2 <-> color 2 on red(TOP) face
	in positions 4:7	0 <-> color 0 on orange(BOTTOM) face
				1 <-> color 1 on orange(BOTTOM) face
				2 <-> color 2 on orange(BOTTOM) face

Side Pieces:	<name>: <color 0>-<color 1>
	sA: r-y		sB: r-g		sC: r-w		sD: r-b
	sE: o-b		sF: o-w		sG: o-g		sH: o-y
	sI: b-y		sJ: b-w		sK: g-w		sL: g-y
  Orientation:
	in positions A:D	0 <-> color 0 on red(TOP) face
				1 <-> color 1 on red(TOP) face
	in positions E:H	0 <-> color 0 on orange(BOTTOM) face
				1 <-> color 1 on orange(BOTTOM) face
	in positions I,J	0 <-> color 0 on blue(????) face
				1 <-> color 1 on blue(????) face
	in positions K,L	0 <-> color 0 on green(????) face
				1 <-> color 1 on green(????) face

Rotations:
red:	0 -> 1 -> 2 -> 3 -> 0		A -> B -> C -> D -> A 
	=    =    =    =		=    =    =    =

yellow:	1 -> 0 -> 4 -> 7 -> 1		A -> I -> H -> L -> A
	=    =    =    =		=    =    =    =

blue:	0 -> 3 -> 5 -> 4 -> 0		D -> J -> E -> I -> D
	-    +    -    +		*    *    *    *

white:	3 -> 2 -> 6 -> 5 -> 3		C -> K -> F -> J -> C
	=    =    =    =		=    =    =    =

green:	2 -> 1 -> 7 -> 6 -> 2		B -> L -> G -> K -> B 
	-    +    -    +		*    *    *    *

orange:	4 -> 5 -> 6 -> 7 -> 4		E -> F -> G -> H -> E 
	=    =    =    =		=    =    =    =
;
preset!with
	red,blue,yellow,	red,yellow,green,
	red,green,white,	red,white,blue,
	orange,yellow,blue,	orange,blue,white,
	orange,white,green,	orange,green,yellow;
 own integer array korner!colors[#k0:#k7,0:2];

preset!with
	red,yellow,	red,green,	red,white,	red,blue,
	orange,blue,	orange,white,	orange,green,	orange,yellow,
	blue,yellow,	blue,white,	green,white,	green,yellow;
 own integer array side!colors[#sA:#sL,0:1];

integer array K.cur[#k0:#k7], s.cur[#sA:#sL];
! format:
	K.cur (corners)		id#,,<orientation>
	S.cur (sides)		<orientation in sign>,,id#
;

simple procedure set!curs;
begin	integer i;
for i_ #k0 step 1 until #k7 do K.cur[i]_ i lsh 18;
for i_ #sA step 1 until #sL do s.cur[i]_ i;
end;
require "{}{}" delimiters;
define k#rt(c0,a0, c1,a1, c2,a2, c3,a3)={
	move	1,K.cur[a0]; c#k(c0);
	exch	1,K.cur[a1]; c#k(c1);
	exch	1,K.cur[a2]; c#k(c2);
	exch	1,K.cur[a3]; c#k(c3);
	movem	1,K.cur[a0];
};
define s#rt(c0,a0, c1,a1, c2,a2, c3,a3)={
	move	1,S.cur[a0]; c#s(c0);
	exch	1,S.cur[a1]; c#s(c1);
	exch	1,S.cur[a2]; c#s(c2);
	exch	1,S.cur[a3]; c#s(c3);
	movem	1,S.cur[a0];
};
define	 c#k(cv)={IFCR cv=1 THENC hrr 1,incx[0](1)
		    ELSEC IFC cv=2 THENC hlr 1,incx[0](1) ENDC ENDC}
	,c#s(cv)={IFCR cv THENC tlc 1,'400000 ENDC}
;

simple procedure rotate(integer sideNo);	! sideno is 1:6;
if sideNo then
start!code	label r.red,r.blue,r.green,r.yellow,r.white,r.orange;
		label jtable, back;
		preset!with 2 lsh 18 lor 1, 2, 1 lsh 18; 
			own safe integer array incx[0:2];
	skiple	1,sideNo;
	 caile	1,6;
	  jrst	back;
jtable:	jrst	jtable(1);
	jrst	r.red;
	jrst	r.blue;
	jrst	r.white;
	jrst	r.green;
	jrst	r.yellow;
	jrst	r.orange;


r.yellow:
	k#rt( 2,#k1, 1,#k0, 2,#k4, 1,#k7);
	s#rt( 0,#sA, 0,#sI, 0,#sH, 0,#sL);
	jrst	back;
r.white:
	k#rt( 2,#k3, 1,#k2, 2,#k6, 1,#k5);
	s#rt( 0,#sC, 0,#sK, 0,#sF, 0,#sJ);
	jrst	back;

r.blue:
	k#rt( 2,#k0, 1,#k3, 2,#k5, 1,#k4);
	s#rt( 1,#sD, 1,#sJ, 1,#sE, 1,#sI);
	jrst	back;
r.green:
	k#rt( 2,#k2, 1,#k1, 2,#k7, 1,#k6);
	s#rt( 1,#sB, 1,#sL, 1,#sG, 1,#sK);
	jrst	back;

r.orange:
	k#rt( 0,#k4, 0,#k5, 0,#k6, 0,#k7);
	s#rt( 0,#sE, 0,#sF, 0,#sG, 0,#sH);
	jrst	back;
r.red:
	k#rt( 0,#k0, 0,#k1, 0,#k2, 0,#k3);
	s#rt( 0,#sA, 0,#sB, 0,#sC, 0,#sD);
!	jrst	back;
back:
end;
integer pFormat;

COMMENT
		 1 B 2
		 A r C
		 0 D 3

	 1 A 0	 0 D 3	 3 C 2	 2 B 1
	 L y I	 I b J	 J w K	 K g L
	 7 H 4	 4 E 5	 5 F 6	 6 G 7

		 4 E 5
		 H o F
		 7 G 6
Corner pieces:	<name>: <color 0>-<color 1>-<color 2> 
	k0: r-b-y	k1: r-y-g	k2: r-g-w	k3: r-w-b
	k4: o-y-b	k5: o-b-w	k6: o-w-g	k7: o-g-y
;
! format:
	K.cur (corners)		id#,,<orientation>
	S.cur (sides)		<orientation in sign>,,id#
;
simple string procedure pK(integer whicho, whichK);
begin	integer Krnr;
whicho_ ((whicho + K.cur[whichK]) land '777777) mod 3;
Krnr_ K.cur[whichk] lsh -18;
return( case pformat of (
	color!pname[ Korner!colors[ Krnr, whicho ] ],
	" " & (Krnr + "1"),
	" " & (krnr + "1") & "-+*"[1+whicho for 1]
	) );
end;

simple string procedure pS(integer whicho, whichS);
begin	integer side;
side_ S.cur[whichS];
whicho_ whicho xor (if side<0 then 1 else 0);
return( case pformat of (
	color!pname[ side!colors[ side land '777777, whicho ] ],
	" " & ("A"+side),
	" " & ("A"+side) & (if whicho then "+" else "-")
	) );
end;

simple string procedure pface(integer faceNumber);
return( face[faceNumber] & (if pformat=2 then " " else null) );

simple string procedure inOne;
return( if pformat=2 then crlf&tab&space&space&space else (crlf&tab) );

simple string procedure sep;
	return( if pformat=2 then "   " else tab );

simple procedure PSide1;
print(	 crlf, pK(1,#k1), pS(1,#sA), pK(2,#k0)
	 ,sep, pK(1,#k0), pS(1,#sD), pK(2,#k3)
	 ,sep, pK(1,#k3), pS(1,#sC), pK(2,#k2)
	 ,sep, pK(1,#k2), pS(1,#sB), pK(2,#k1) );
simple procedure PSide2;
print(	 crlf, pS(1,#sL), pface(yellow), pS(1,#sI)
	 ,sep, pS(0,#sI), pface(  blue), pS(0,#sJ)
	 ,sep, pS(1,#sJ), pface( white), pS(1,#sK)
	 ,sep, pS(0,#sK), pface( green), pS(0,#sL) );
simple procedure PSide3;
print(	 crlf, pK(2,#k7), pS(1,#sH), pK(1,#k4)
	 ,sep, pK(2,#k4), pS(1,#sE), pK(1,#k5)
	 ,sep, pK(2,#k5), pS(1,#sF), pK(1,#k6)
	 ,sep, pK(2,#k6), pS(1,#sG), pK(1,#k7)
	,crlf );

simple procedure pSides;
	begin	Pside1; Pside2; Pside3; end;

simple procedure pBottomFace;
print(	crlf
	,inOne, pK(0,#k4), pS(0,#sE), pK(0,#k5)
	,inOne, pS(0,#sH), pface(orange), pS(0,#sF)
	,inOne, pK(0,#k7), pS(0,#sG), pK(0,#k6)
	,crlf);

simple procedure pTopFace;
print(	crlf
	,inOne, pK(0,#k1), pS(0,#sB), pK(0,#k2)
	,inOne, pS(0,#sA), pface(red), pS(0,#sC)
	,inOne, pK(0,#k0), pS(0,#sD), pK(0,#k3)
	,crlf );

procedure pcube;
	begin pTopFace; psides; pBottomFace; end;

simple procedure pTerse;
	begin pTopFace; Pside2; pBottomFace; end;

simple procedure dispCube(integer format);
begin
format swap pFormat;
pCube;
format swap pFormat;
end;
integer thisSideRot, thisSideEx, thisKornerRot, thisKornerEx;
integer bestSideRot, bestSideEx, bestKornerRot, bestKornerEx;
  define rt.Origin=-1, rt.BothWork=1, rt.SidesOnly=2, rt.KornersOnly=3; 

simple integer procedure scoreCube;
! returns FALSE if current cube is "worse" in both sides and Korners.
	-1 means back at origin
	1 means as good or better score for both sides and corners
	2 means as good or better score for sides only
	3 means as good or better score for korners only
	For those scores returned, "best" is updated IFF non-zero values
	are found (dont make a return to origin give impossible values).
;
start!code	define a=1,i=2, rtS=3,rtK=4, exS=5,exK=6; 
		label l.k,l.s,kck.x,sck.x, st.s, nogo,rtrn1,origin;
		label	noSide, noKorn, rtSid, rtKorn;

	move	rtS,bestSideRot;
	move	exS,bestSideEx;
	move	rtK,bestKornerRot;
	move	exK,bestKornerEx;
! first check the Korner cubes;
	movei	i,#k7;
l.k:	movs	a,k.cur[0](i);	! get orientation,,cube;
	caie	i,(a);		! cube in home position?;
	 jrst	kck.x;		!	no, go check for Exchanges;
	caie	a,(i);		! non-standard orientation?;
	 sojl	rtK,st.s;	! if previous best better, not Korner;
	sojge	i,l.k;		! loop to next corner;
	jrst	st.s;		! now go check sides;

noKorn:	setob	rtK,exK;	! Korner failure, indicate it;
	jrst	st.s;		! no, not an exchange, forget it;

kck.x:	sojl	exK,st.s;	! maybe Exchange.  Leave if best beats.;
	movs	a,k.cur[0](a);	! is this corner cube in others place?;
	caie	i,(a);
	 jrst	noKorn;		! no, not an exchange, forget it;
	sojge	i,l.k;		! loop to next corner;

st.s:	movei	i,#sL;
l.s:	move	a,s.cur[0](i);	! get orientation,,cube;
	caie	i,(a);		! cube in home position?;
	 jrst	sck.x;		!	no, go check for Exchanges;
	caie	a,(i);		! non-standard orientation?;
	 sojl	rtS,noSide;	! if previous best better, forget;
	sojge	i,l.s;		! loop to next side;
	jrst	rtSid;		! success!, update bests and return;

sck.x:	sojl	exS,noSide;	! maybe Exchange.  Leave if best beats.;
	move	a,k.cur[0](a);	! is this corner cube in others place?;
	cain	i,(a);
	 sojge	i,l.s;		! loop to next side;
	jumpl	i,rtSid;	! if done, sides OK, else side failure;
noSide:	jumpl	exK,nogo;	! side failure.  did Korners fail too?;
	jumpl	rtK,nogo;
	movei	exS,1;		! mark the sides as failures;

rtKorn:				! Korners work.;
! rotate Korner;
	sub	rtK,bestKornerRot;	! -count= (start-count)-start; 
	movnm	rtK,thisKornerRot;	! store "this"; 
	caie	rtK,0;			! prevent spurious "best"; 
	 movnm	rtK,bestKornerRot;	! store "best"; 
! exchange Korner;
	sub	exK,bestKornerEx;	! -count= (start-count)-start; 
	movnm	exK,thisKornerEx;	! store "this"; 
	caie	exK,0;			! prevent spurious "best"; 
	 movnm	exK,bestKornerEx;	! store "best"; 

	movei	1,rt.KornersOnly;	! set for "corners only";
	jumpg	exS,rtrn1;		! sides failed, return "CO";
	movei	1,rt.BothWork;		! set for "corners and sides";
	jumpn	exS,rtrn1;
	jumpn	exK,rtrn1;
	jumpn	rtK,rtrn1;
	jrst	origin;		! nothing moved, back at origin;

rtSid:				! sides work, maybe Korners too;
! rotate side;
	sub	rtS,bestSideRot;	! -count= (start-count)-start;
	movnm	rtS,thisSideRot;	! store "this";
	caie	rtS,0;			! prevent spurious "best";
	 movnm	rtS,bestSideRot;	! store "best";
! exchange side;
	sub	exS,bestSideEx;		! -count= (start-count)-start; 
	movnm	exS,thisSideEx;		! store "this"; 
	caie	exS,0;			! prevent spurious "best"; 
	 movnm	exS,bestSideEx;		! store "best"; 

	ior	exS,rtS;		! get set to check for Origin;
	cail	rtK,0;			! If both Korner score positive;
	 jumpg	exK,rtKorn;		! then go do right by corners;
! side success only;
	movei	1,rt.SidesOnly;		! set for "sides only";
	jrst	rtrn1;
nogo:	tdza	1,1;		! return FALSE;
origin:	 seto	1,;		! back at initial position;
rtrn1:
end;
simple procedure shoScore( integer SR, SX, KR, KX );
print(crlf,"*** Sides:(R=", SR, ",X=", SX, 
	"), Corners:(R=", KR, ",X=", KX, ")"& crlf );

string RememberedMoves;
integer move, aFace;

setColors( null );
bestSideRot_ bestSideEx_ bestKornerRot_ 20;
bestKornerEx_ 3;	! 4 (two interchanges) is too easy (= R,R);
set!curs; RememberedMoves_ null;
dispCube(0);
ttyup(true);
while true do case move_inchrw of begin
	["@"] usererr(0,1,"Your error");
	["?"] print("
		Type the first letter of one of the following:
@	Cause an error (to get to debugger)
Colors (set up letters for cube colors) the response is a 6-character
	string for the cube.  Order is top, clockwise around faces, bottom.
Setup	set up the cube in the original position, clear remembered move
Print	Show the cube unfolded.
Format	Change the way the Around, Terse, and Verbose cubes are printed.
	0 is the initial format (like Print), 1 is cube names,
	2 is cube names with indicitators for which face.
Verbose	Print a display of the cubes with each face labelled.
Around	Print only a display of the side faces.
Terse	Print a display of the cube showing top face, center layer,
	and the bottom face.
	and the bottom face
Display	Show the internal format for the cube. Corner pieces are 
	numbered and have 3 orientations, side pieces are lettered
	and have 2 orientations.  The positions are printed in order.
	In addition, the sequence of rotations since the last SETUP
	is shown. If a position has all pieces in proper place except
	for rotations and exchanges of pieces, that is shown.
X	Exit from the program.
<color>	Rotate the face whose center cube is of that color 90 degrees
	clockwise.  If this results in a position where either the side
	or the corner pieces are in their original positions, then a
	display of the number of rotations and/or exchanges is made.
>");
	["C"] begin outstr(crlf&"Colors: "); setcolors(inchwl); end;
	["S"] begin set!curs; RememberedMoves_ null; end;
	["F"] pformat_0 max (inchrw-"0") min 2;
	["P"] begin dispCube(0); outstr(crlf & ">"); end;
	["T"] pTerse;
	["V"] pCube;
	["A"] pSides;
	[ELSE] if aFace_ identify(move)
		 then begin
			RememberedMoves_ RememberedMoves & Move;
			rotate(aFace);
			case scoreCube of begin "case"
			[0] continue;	! nothing matches; 
			[rt.BothWork] print(crlf & " !Best Both! ");
			[rt.SidesOnly] print(crlf & " !SIDES! ");
			[rt.KornersOnly] print(crlf & " !Korners! ");
			[ELSE] begin "rt.Origin" 
				Print(crlf & " (Original) after: "
					,RememberedMoves, crlf & ">");
				rememberedMoves_null;
				continue;
			       end "rt.Origin"
			end "case";
			shoScore( thisSideRot, thisSideEx, 
				thisKornerRot, thisKornerEx );
		      end
		 else if move='15 
			 then begin inchrw; outchr(">"); end
			 else outstr("?" & crlf & ">");
	["D"] begin integer i; 
		print(crlf,"Sides: "); 
		for i_#sA step 1 until #sL 
		  do print( " "&("A"+s.Cur[i]) & "-", s.cur[i] lsh -35);
		print(crlf,"Korners: "); 
		for i_#k0 step 1 until #k7 
		  do print( " k", k.Cur[i] lsh -18, "-",
				(k.cur[i] land '777777) );
		print(crlf,"Moves: ", rememberedMoves );
		shoScore( bestSideRot, bestSideEx, 
			bestKornerRot, bestKornerEx );
		outstr(crlf & ">");
	      end;
	["X"] done
	end;
end;
 