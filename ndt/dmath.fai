;entry	epsln, depsln, intxp, dintxp, setxp, dsetxp, 
;	fint,fract, floor,ceil, dfint,dfract, dfloor,dceil, 
;	dfix,dfloat,bfloat, dran, dsin,dcos,dtan;
ENTRY SETXP;
TITLE SETXP
A__1
TEMP__14
P__17
SETXP: ;internal real simple procedure setxp( real x; integer exp );
DEFINE X,<-2(P)>
DEFINE EXP,<-1(P)>
EXTERNAL X33
	MOVM	A,X;
	JUMPLE	A,RETURN;
	MOVE	TEMP,EXP;
	ADDI	TEMP,=128;
	DPB	TEMP,[POINT 8,A,8];
	SKIPGE	X;
	 MOVN	A,A; 
RETURN:
	SUB	P,X33
	JRST	@3(P)
PRGEND
ENTRY DSETXP;
TITLE DSETXP
A__1
TEMP__14
P__17
DSETXP: ;internal long real procedure setxp( long real x; integer exp );
DEFINE X,<-3(P)>
DEFINE EXP,<-1(P)>
EXTERNAL X44
	DMOVE	A,X;
	CAIGE	A,0;
	 DMOVN	A,A; 
	JUMPLE	A,RETURN;
	MOVE	A,EXP;
	ADDI	TEMP,=128;
	DPB	TEMP,[POINT 8,A,8];
	SKIPGE	X;
	 DMOVN	A,A; 
RETURN:
	SUB	P,X44;
	JRST	@4(P);
PRGEND
ENTRY INTXP;
TITLE INTXP
A__1
TEMP__14
P__17
INTXP: ;internal integer simple procedure intxp( real x );
DEFINE X,<-1(P)>
EXTERNAL X22
	MOVM	A,X;
	LSH	A,-=27;
	SUBI	A,=128;
	SUB	P,X22;
	JRST	@2(P);
PRGEND
ENTRY DINTXP;
TITLE DINTXP
A__1
TEMP__14
P__17
DINTXP: ;internal integer simple procedure dintxp( real x );
DEFINE X,<-2(P)>
EXTERNAL X33
	MOVM	A,X;
	LSH	A,-=27;
	SUBI	A,=128;
	SUB	P,X33;
	JRST	@3(P);
PRGEND
ENTRY EPSLN;
TITLE EPSLN
A__1
TEMP__14
P__17
EPSLN: ; internal real simple procedure epsln( real x );
DEFINE X,<-1(P)>
EXTERNAL X22
	MOVM	A,X;
	LSH	A,-=26;
	SUBI	A,=26*2;
	CAIG	A,0;
	 MOVEI	A,1;
	ROT	A,-=10;
	SUB	P,X22;
	JRST	@2(P);
PRGEND
ENTRY DEPSLN;
TITLE DEPSLN
A__1
TEMP__14
P__17
DEPSLN: ; internal real simple procedure depsln( long real x );
DEFINE X,<-2(P)>
EXTERNAL X33
	MOVM	A,X;
	LSH	A,-=26;
	SUBI	A,=61*2;
	CAIG	A,0;
	 MOVEI	A,1;
	ROT	A,-=10;
	SUB	P,X33;
	JRST	@3(P);
END
internal simple long Real procedure dfloat( integer val );
COMMENT	returns a long real with the same value as its argument
	(direct conversion).  1B0 is not properly converted.
;
start!code
	MOVM	2,VAL;
	MOVE	1,LS1;
	DFSB	1,LS1;
	SKIPGE	VAL;
	 DMOVN	1,1;
end;

internal simple long Real procedure bfloat( integer highVal, lowVal );
COMMENT	returns a long real with the value of the two-word integer
	(direct conversion).  The args are interpreted as a 71-bit 
	value (sign of lowVal is ignored).
;
start!code	define a=1,a1=a+1, temp='14;
		label messy,retrn;
	DMOVE	A,HIGHVAL;	! get absolute value;
	CAIGE	A,0;
	 DMOVN	A,A;
	TLNE	A,'777000;	! can we just fiddle exponent?;
	 JFFO	A,MESSY;	! no, must do it the hard way;
	TLON	A,'276400;	! make lsbit = 1, set msbit;
	 DFSB	A,LS1;		! subtract msbit (normalizes) unless on;
	JRST	RETURN;		! and leave;
MESSY:	MOVE	TEMP,A1;	! save count of leading zeros;
	MOVE	A1,LOWVAL;	! get abs of arg back;
	SKIPGE	HIGHVAL;
	 DMOVN	A,HIGHVAL;
	ASHC	A,-9(TEMP);	! make room for exponent;
	MOVNI	TEMP,-'276-9(TEMP);	! decide value of exponent;
	DPB	TEMP,[POINT 9,A,8]; ! insert it;
RETURN:	TLZ	A1,'400000;	! this bit should be clear;
	SKIPGE	HIGHVAL;
	 DMOVN	A,A;
end;


internal simple integer procedure dfix( long Real val );
COMMENT	Converts its argument to an integer (direct conversion).  
	The argument is presumed to lie in the normal integer range.
	Note: this is a rounding function.
;
start!code
	MOVE	'14,0;
	DMOVE	0,VAL;
	DFAD	0,LS1A;
	CAME	0,LS1A;
	 TLO	1,'400000;
	MOVE	0,'14;
end;
internal simple Real procedure fint( Real val );
COMMENT	integer part function.  dfint(x)+dfract(x)=x (exactly).
	Returns sign(val) * floor(abs(val)).
	If val is negative, 
		then this is the mathematical function "CEILING"
		otherwise, this is the mathematical function "FLOOR"
;
start!code	define rslt=1,temp='13,tmp='14; 
		label rtrn, rtrn0, rtrnArg;
COMMENT exponent GEQ '276 means all integer;
COMMENT exponent LEQ '200 means all fraction;
	MOVM	TMP,VAL;
	LDB	TEMP,['331000 LSH 18 + TMP];
	CAIG	TEMP,'200;
	 jrst	rtrn0;		COMMENT pure fraction;
	CAIL	TEMP,'233;
	 jrst	rtrnArg;	COMMENT pure integer;
	movni	temp,-'233(temp);	COMMENT count bits of fraction;
	SETO	RSLT,;
	lsh	rslt,(temp);	COMMENT set up mask to remove fraction;
	and	rslt,tmp;	COMMENT remove fractional part;
	skipge	val;		COMMENT restore sign;
	 MOVN	RSLT,RSLT;
	JRST	RETURN;
RTRN0:	TDZA	RSLT,RSLT;
RTRNARG: MOVE	RSLT,VAL;
RETURN:
end;


internal simple Real procedure fract( Real val );
COMMENT	fractional part function.  fint(x)+fract(x)=x (exactly).
	The result lies strictly between -1 and 1.  If val is an
	integer, the result is 0, otherwise the sign of the result
	is the same as the sign of val.
;
start!code	define rslt=1,temp='13,tmp='14; 
		label rtrn, rtrn0, rtrnArg;
COMMENT exponent GEQ '276 means all integer;
COMMENT exponent LEQ '200 means all fraction;
	movm	tmp,val;
	ldb	temp,['331000 lsh 18 + tmp];
	caig	temp,'200;
	 jrst	rtrnArg;	COMMENT pure fraction;
	cail	temp,'233;
	 jrst	rtrn0;		COMMENT pure integer;
	movni	temp,-'233(temp);	COMMENT count bits of fraction;
	seto	rslt,;
	lsh	rslt,(temp);	COMMENT set up mask to remove fraction;
	and	rslt,tmp;	COMMENT mask off fractional part;
	fsbm	tmp,rslt;	COMMENT subtract the integer part out;
	skipge	val;		COMMENT restore sign;
	 movn	rslt,rslt;
	jrst	rtrn;
rtrn0:	tdza	rslt,rslt;
rtrnArg: move	rslt,val;
rtrn:
end;
internal simple long Real procedure dfint( long Real val );
COMMENT	integer part function.  dfint(x)+dfract(x)=x (exactly).
	Returns sign(val) * floor(abs(val)).
	If val is negative, 
		then this is the mathematical function "CEILING"
		otherwise, this is the mathematical function "FLOOR"
;
start!code	define rslt=1,temp='13,dtmp='14; 
		label rtrn, rtrn0, rtrnArg;
COMMENT exponent GEQ '276 means all integer;
COMMENT exponent LEQ '200 means all fraction;
	dmove	dtmp,val;
	caige	dtmp,0;
	 dmovn	dtmp,dtmp;
	ldb	temp,['331000 lsh 18 + dtmp];
	caig	temp,'200;
	 jrst	rtrn0;		COMMENT pure fraction;
	cail	temp,'276;
	 jrst	rtrnArg;	COMMENT pure integer;
	movni	temp,-'276(temp);	COMMENT count bits of fraction;
	setob	rslt,rslt+1;
	ashc	rslt,(temp);	COMMENT set up mask to remove fraction;
	and	rslt,dtmp;	COMMENT remove fractional part;
	and	rslt+1,dtmp+1;
	skipge	val;		COMMENT restore sign;
	 dmovn	rslt,rslt;
	jrst	rtrn;
rtrnArg: dmove	rslt,val;
	jrst	rtrn;
rtrn0:	setzb	rslt,rslt+1;
rtrn:
end;



internal simple long Real procedure dfract( long Real val );
COMMENT	fractional part function.  dfint(x)+dfract(x)=x (exactly).
	The result lies strictly between -1 and 1.  If val is an
	integer, the result is 0, otherwise the sign of the result
	is the same as the sign of val.
;
start!code	define rslt=1,temp='13,dtmp='14; 
		label rtrn, rtrn0, rtrnArg;
COMMENT exponent GEQ '276 means all integer;
COMMENT exponent LEQ '200 means all fraction;
	dmove	rslt,val;
	caige	rslt,0;
	 dmovn	rslt,rslt;
	ldb	temp,['331000 lsh 18 + rslt];
	caig	temp,'200;
	 jrst	rtrnArg;	COMMENT pure fraction;
	cail	temp,'276;
	 jrst	rtrn0;		COMMENT pure integer;
	movni	temp,-'276(temp);	COMMENT count bits of fraction;
	setob	dtmp,dtmp+1;
	ashc	dtmp,(temp);	COMMENT set up mask to remove fraction;
	and	dtmp,rslt;	COMMENT extract fractional part;
	and	dtmp+1,rslt+1;	
	dfsb	rslt,dtmp;	COMMENT and subtract it out; 
	skipge	val;		COMMENT restore sign;
	 dmovn	rslt,rslt;
	jrst	rtrn;
rtrnArg: dmove	rslt,val;
	jrst	rtrn;
rtrn0:	setzb	rslt,rslt+1;
rtrn:
end;
internal simple long Real procedure dfloor( long Real val );
COMMENT	An approximation to the mathematical "FLOOR" function.
WARNING: No floor function can be correct for floating point --
    This one violates the following identity:   floor(x)+1 = floor(x+1)
    In particular, x-dfloor(x) may be equal to 1 (try x=-(2^-60))
    [the alternative is to violate "floor(x) LEQ x"]
;
begin	long real intp;
intp_ dfint(val);
return( if intp leq val then intp else intp-1 ); 
end;


internal simple long Real procedure dceil( long Real val );
COMMENT	An approximation to the mathematical "CEILING" function.
WARNING: No ceiling function can be correct for floating point --
    This one violates the identity:   ceiling(x)+1 = ceiling(x+1)
    In particular, dceil(x)-x may be equal to 1 (try x=2^-60)
    [the alternative is to violate "ceiling(x) GEQ x"]
;
begin	long real intp;
intp_ dfint(val);
return( if intp geq val then intp else intp+1 ); 
end;
internal simple Real procedure floor( Real val );
COMMENT	An approximation to the mathematical "FLOOR" function.
WARNING: No floor function can be correct for floating point --
    This one violates the following identity:   floor(x)+1 = floor(x+1)
    In particular, x-dfloor(x) may be equal to 1 (try x=-(2^-60))
    [the alternative is to violate "floor(x) LEQ x"]
;
begin	real intp;
intp_ dfint(val);
return( if intp leq val then intp else intp-1 );
end;


internal simple Real procedure ceil( Real val );
COMMENT	An approximation to the mathematical "CEILING" function.
WARNING: No ceiling function can be correct for floating point --
    This one violates the identity:   ceiling(x)+1 = ceiling(x+1)
    In particular, dceil(x)-x may be equal to 1 (try x=2^-60)
    [the alternative is to violate "ceiling(x) GEQ x"]
;
begin	real intp;
intp_ dfint(val);
return( if intp geq val then intp else intp+1 );
end;
internal long Real simple procedure dran;
COMMENT returns a long real random number in the range [0:1]
;
start!code	define p='17,!="COMMENT"; external integer ran$;
	push p,[0]; pushj p,ran$; move 2,1;	! ac2_ ran1;
	push p,[0]; pushj p,ran$; 		! ac1_ ran2;
	lsh	2,9;			! ac2: 26 random bits;
	ldb	1,['321100 lsh 18+1];	! ac1: 9 random bits;
	ior	2,1;			! concatenate them;
	tlz	2,'400000;		! clear sign bit;
	push p,[0]; pushj p,ran$;	! get high-order part;
end;
long real work,start;
boolean negate;
real last;

long real simple procedure maclaurin;
begin	long real rslt,rlOld;
rslt_ work;
if start geq 2.^-31	! t0 is given, t1/t0 = x^2/2 or x^2/6;
 then begin		! if start<2^-31 then t0/t1<2^-63, answer is t0;
	start_start*start;
	  do  begin
		rlOld_rslt;
		work_ -work*start/((last+1)*(last_last+2));
		rslt_ rslt+work;
	      end
	 until rslt = rlOld;
      end;
return(if negate then -rslt else rslt);
end;

internal long real procedure dsin(long real x);
! approximation: SIN x = sum[n=0:inf](  -1^n * x^(2n+1) / (2n+1)!  )
  normalized to the first quadrant
;
begin	boolean neg;
if negate_(x<0) then x_-x;
if x geq twoPi then x_ twoPi*dfract(x/twoPi);
if x geq pi then begin negate_ not negate; x_ x-pi; end;
if x > halfPi then x_ pi- x;
work_start_x; last_1;
return( maclaurin );
end;

internal long real procedure dcos(long real x);
! approximation: COS x = sum[n=0:inf](  -1^n * x^(2n) / (2n)!  )
  normalized to the first quadrant
;
begin
if x<0 then x_-x;
if x geq twoPi then x_ twoPi*dfract(x/twoPi);
if x > pi then x_ twoPi-x;
if negate_(x > halfPi) then x_ pi- x;
start_x; work_1; last_0;
return( maclaurin );
end;

internal long real procedure dtan(long real x);
return(dsin(x)/dcos(x));
end "dmath" $

external long Real	procedure dfloat( integer val );
external integer	procedure dfix	( long Real val );
external long Real	procedure dfint	( long Real val );
external Real		procedure fint	( Real val );
external long Real	procedure dfract( long Real val );
external Real		procedure fract	( Real val );
external long Real	procedure dfloor( long Real val );
external Real		procedure floor	( Real val );
external long Real	procedure dceil	( long Real val );
external Real		procedure ceil	( Real val );
external long Real	procedure dran;

    