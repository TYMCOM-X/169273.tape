begin "test"
	external integer !skip!;

simple integer procedure calli( integer ac, number );
begin	protect!acs 1,2;
	start!code
	move	1,ac;
	exch	2,number;
	setom	!skip!;
	end;
poll;
	quick!code
	calli	1,(2);
	 setzm	!skip!;
	movem	1,ac;
	move	2,number;
	end;
return(ac);
end;

require "wrsdfr.dcl" source!file;
require "<><>" delimiters;
item deferHandler;

preset!with
    cvsix("UUOINS"), cvsix("CLOCK" ), cvsix("ILLMEM"), cvsix("HUNG"  ), 
    cvsix("TIMER" ), cvsix("DEVERR"), cvsix("WAKE"  ), cvsix("PAGE=" ), 
    cvsix("PAGE<" ), cvsix("REFBIT"), cvsix("PAGERR"), cvsix("QUIT"  ),
    cvsix("CHILDX");
own safe integer array general!Causes[0:12];
 preset!with
    cvsix(".IAUUO"), cvsix(".IACLK"), cvsix(".IAILM"), cvsix(".IAHNG"), 
    cvsix(".IATIM"), cvsix(".IADEV"), cvsix(".IAWAK"), cvsix(".IAFEL"), 
    cvsix(".IAFLL"), cvsix(".IAREF"), cvsix(".IAERR"), cvsix(".IANTQ"),
    cvsix(".IAFEX");
own safe integer array !general!Causes[0:12];

preset!with
    cvsix("ESCAPE"), cvsix("CHAR"  ), cvsix("BRCHAR"), cvsix("IOWAIT"),
    cvsix("OUTPUT"), cvsix("LOST"  ), cvsix("ORANGE"), cvsix("ZAPPER"),
    cvsix("STATUS"), cvsix("YELLOW"), cvsix("GOBBLE");
own safe integer array tty!Causes[0:10];
preset!with
    cvsix(".IAESC"), cvsix(".IACHR"), cvsix(".IABRK"), cvsix(".IAIOW"),
    cvsix(".IAROM"), cvsix(".IALOS"), cvsix(".IAORG"), cvsix(".IAZAP"),
    cvsix(".IAPSS"), cvsix(".IAYEL"), cvsix(".IAGOB");
own safe integer array !tty!Causes[0:10];


integer simple procedure cause!index( safe integer array data;
			safe integer array yamm!data; integer name );
begin	integer i,lower;
if not( arrinfo(data,-1) = 1 = arrinfo(yamm!data,-1) )
 then usererr(0,0,"cause!Index: bad array dimensionality");
lower_arrinfo(data,1);
for i_arrinfo(data,2) step -1 until lower
   do if data[i]=name then return(i);
if name land (-1 lsh -18) = 0
 then name_ cvsix(".IA") lor (name lsh -18);
lower_arrinfo(yamm!data,1);
for i_arrinfo(yamm!data,2) step -1 until lower
   do if yamm!data[i]=name then return(i);
return(i);
end;

integer simple procedure set!general!cause(integer causeName, channel);
begin	integer i;
if 0 leq i_ cause!index( general!Causes, !general!Causes, causeName )
 then return( calli( i lsh 18 + channel, -'36) ); comment INTASS UUO;
usererr(0,0,"Unknown general cause: " &cv6str(causeName) );
return(-1);
COMMENT intmap(i lsh 18 + channel + '100000, defer1, 0 );
end;

integer simple procedure set!port!cause(integer port, cause, channel);
begin	integer i;
if 0 leq i_ cause!index( tty!Causes, !tty!Causes, cause )
 then return( calli( i rot -9 + channel lsh 18 + (port land '777777),
			-'42) );		comment TINASS UUO;

COMMENT	intmap(port lsh 18 + i lsh 9 + channel + '500000, defer1, 0 );
usererr(0,0,"Unknown Port cause: " &cv6str(cause) );
return(-1);
end;


define newenable(channel)="enable(1 lsh 9+channel)";
define newdisable(channel)="disable(1 lsh 9+channel)";

require 10 polling!interval;

preload!with "ESCAPE","CHAR","BRCHAR","IOWAIT","TIMER","CLOCK";
own string array causes[5:10];

own integer array callCount[5:10];

preload!with	3, 5, 1-1,	3, 6, 1-1,
		3, 7, 1-1,	3, 8, 1-1,
		3, 9, 1-1,	3,10, 1-1;
own integer array packets[5:10,0:2];

forward procedure secondUsed(integer number);

procedure firstUsed(integer number);
begin 
callCount[number]_ 1 + callCount[number];
packets[number,2]_ -1 lsh 18 lor location(secondUsed);
print( " [F: ", causes[number], ":", number, 
	" #", callCount[number], "]" ); 
if 0 < callCount[number]
 then begin print("{", causes[number], " off}"); dfpTbl[number]_ 0; end;
end;

procedure secondUsed(integer number);
begin 
callCount[number]_ 1 + callCount[number];
print( " [S: ", causes[number], ":", number, 
	" #", callCount[number], "]" ); 
packets[number,2]_ -1 lsh 18 lor location(FirstUsed);
end;
simple integer procedure time( string s );
begin	integer res, ch;
res_ intscan(s,ch);
while 0 < (ch_lop(s)) leq '40 do;
res_ res + 
	(if ch land '137 = "M" 
	 then if lop(S) land '137 neq "S" then 2 lsh 18 else 0
	 else 1 lsh 18);
print( res land (-1 lsh -18), 
	case res lsh -18 of (" milliseconds."," sec", " min") );
return( res );
end;
integer i, word;
setbreak(word_getbreak, 
	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.<>?/;:", 
	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.<>?/;:", 
	"XUTR");
intset( deferHandler );
arrclr(callCount,-10);
alldfr(5,10); 
for i := 5 step 1 until 10
   do begin
	packets[i,2]_ -1 lsh 18 lor location(FirstUsed);
	dfpTbl[i]_ location(packets[i,0]);
      end;
for i_ 5 step 1 until 8 
   do begin
	print(causes[i],":",i, "(P)" & '15&'12 );
	set!port!cause( -1, cvsix(causes[i]), i );
      end;
for i_ 9 step 1 until 10 
   do begin
	print(causes[i],":",i, "(G)" & '15&'12 );
	set!general!cause( cvsix(causes[i]), i );
      end;

while true do begin	string s,w; integer ch;
	poll;
	print("
cmd: ");
	s_inchwl; 
	while 0 < (ch_lop(s)) leq '40 do;
	case '137 land ch of begin "case"
	["A"] for i_ 5 step 1 until 10 
		do print('15&'12, causes[i], ":", i );
	["Q"] done;
	["C"] if 5 leq (i_intscan(s,i)) leq 10
		 then begin
			callCount[i]_ -10;
			dfpTbl[i]_ location(packets[i,0]);
			print(causes[i],":",i);
		      end
		 else print("Bad number:", i, " (should be 5-10)");
	["G"] print( "Was: ", set!general!cause( cvsix(scan(s,word,i)),
						 intscan(s,i) ),
			(if !skip! then " OK" else " Error" ) );
	["P"] print( "Was: ", set!port!cause( -1, cvsix(scan(s,word,i)),
						 intscan(s,i) ),
			(if !skip! then " OK" else " Error" ) );
	["B"] usererr(0,1,s,"B");
	["U"] usererr(0,1,s);
	["D"] newdisable( intscan(s,i) );
	["E"] newenable( intscan(s,i) );
	["R"] start!code external integer $I; JSR $I; end;
	["S"] calli( intscan(s,i), '31 );	comment SLEEP UUO;
	["T"] calli( time(s[2 to inf]), -'37);	comment SETTIM UUO; 
	["H"] calli( time(s[2 to inf]), '72);	comment HIBER UUO; 
	["W"] calli( '630 lsh 18 + time(s[2 to inf]), '72);
	["?" land '137] print("
A	re-list all interrupt names
B   	for BAIL
C #	set the call count for channel # to -10 (reset dfptbl)
D # 	to disable the named channel
E # 	to enable the named channel
G nam #	assign named general interrupt cause to channel #
H <time> to do a HIBER (no wakeup causes)
P nam #	assign named port interrupt cause to channel # for control port
Q	to quit
R	for RAID
S # 	to `SLEEP' for # seconds
T <time> to set up a timer interrupt
U	to cause a usererr
W <time> to do a HIBER (wake on most all causes)

<time> is #MS for milliseconds, #S for seconds, or #M for minutes
");
	[ELSE] outstr("Try a `?'")
	end "case";
	end;
end;

