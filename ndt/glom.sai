begin "SOUNDEX"
require "(sailib)sail.def" source!file;
! !get!module(all);
!get!module(extend);
define #quote = {""""}, calli!gettab = '41, !gtnsw = '12, !nsupt = '15;

Comment		a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;
preload!with	0,1,2,3,0,1,2,0,0,2,2,4,5,5,0,1,2,6,2,3,0,1,0,2,0,2;
own safe integer array soundexTable["A":"Z"];

simple internal integer procedure soundex( string s );
start!code
	define byptr=0,res=1,cnt=2,vals=3,ch=4,last=5, sp='16,p='17;
	label getfirst,skipass,chlast,passmore,donev,nada;
	pop	sp,byptr;
	pop	sp,cnt;
	hrrz	cnt,cnt;
getfirst:		! loop here to find first alphabetic;
	sojl	cnt,nada;
	ildb	ch,byptr;
	trz	ch,'40;		! force upper case;
	cail	ch,"A";
	 caile	ch,"Z";
	  jrst	getfirst;
	hrrzi	res,0-"A"(ch);	! first "digit" is 0:25, last 3 are 0:6;
	movei	vals,3;
	skipa	ch,soundexTable[0](ch);
skipass:		! got a "vowel" (or non-letter);
	tdza	last,last;
chlast:
	 movei	last,0(ch);	! put ch in last;
passmore:
	sojl	cnt,donev;
	ildb	ch,byptr;
	trz	ch,'40;		! force upper case;
	caile	ch,"A";
	 caile	ch,"Z";
	  jrst	skipass;
	skipe	ch,soundexTable[0](ch);
	cain	last,(ch);
	 jrst	chlast;
	imuli	res,7;
	addi	res,(ch);
	sojg	vals,chlast;
	 popj	p,;
nada:	setzb	res,vals;
donev:	imuli	res,7;		! end-of-word w/out all 3 "numbers";
	sojg	vals,donev;	! fill it out;
	popj	p,;
end;
simple integer procedure increment( reference integer v; integer i(1) );
start!code move 1,i; addb 1,v; end;

simple integer procedure divide!reduce( reference integer q; integer d);
! returns q mod d, sets q to q div d;
start!code
	move	0,q;
	idiv	0,d;
	movem	0,q;
end;

simple internal string procedure psoundex( integer v );
! returns the "official" soundex name;
begin	string res;
res := "0" + divide!reduce(v, 7);
res := ("0" + divide!reduce(v, 7)) & res;
res := ("0" + divide!reduce(v, 7)) & res;
res := ("A" + divide!reduce(v,26)) & res;
return( if v then "(" & res & "+" & cvs(v) & ")" else res );
end;

simple internal string procedure ssoundex( integer v );
! returns a "sample" soundex name;
if 0 leq v < 7*7*7*26
 then begin	string res;
		integer digits;
		preload!with " ","eb","ec","et","el","em","er";
		own safe string array soundex!text[0:6];
		! a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;
		! 0,1,2,3,0,1,2,0,0,2,2,4,5,5,0,1,2,6,2,3,0,1,0,2,0,2;
	digits := divide!reduce(v,7*7*7); 
	res := soundex!text[ divide!reduce( digits, 7 ) ];
	while digits 
	   do res := soundex!text[ divide!reduce( digits, 7 ) ] & res;
	return( ("A"+v) & res );
      end
 else return("?" & cvs(v) & "?");
record!class symbol (string name; integer count; 
			record!pointer(symbol) l,r );

record!pointer (symbol) safe array table[-1:26*7*7*7];
record!pointer (symbol) rec;

record!pointer (symbol) procedure new!symbol( string name );
begin	record!pointer (symbol) it;
it := new!record(symbol);
symbol:name[it] := name;
return(it);
end;


simple record!pointer(symbol) procedure one!symbol( string s );
! returns a pointer to the symbol specified (and bumps its count)
;
begin	integer hash;
	own record!pointer (symbol) n;
hash := soundex(s);
if rec := table[hash]
 then while true
	do case cmpstr(s,symbol:name[rec]) min 1  ! tree!symbol(s,rec) ;
	 of begin
	    [0] begin				! match (2nd or later);
		increment( symbol:count[rec] );
		return( rec );
		end;
	    [else] if (n := symbol:l[rec])	! go left;
		 then rec := n
		 else begin ! at leaf w/ no match;
			n := new!symbol(s); 
			symbol:l[rec] := n;
			done;
		      end;
	    [1] if (n := symbol:r[rec])		! go right;
		 then rec := n
		 else begin ! at leaf w/ no match;
			n := new!symbol(s); 
			symbol:r[rec] := n;
			done;
		      end
	    end
 else begin
	n := new!symbol(s);
	table[hash] := n;
      end;

return(n);		! here for each new symbol;
end;
procedure summaryLine( string name; integer n, x, x2 );
begin	real v;
print(crlf, name, ": N=", n, ", X=", x, ", X^2=", x2
,	crlf & #ht &"mean=", x/n
,	", sd=", sqrt( v := (x2 - x*x/n)/n )
,	", var=", v 
);
end;
procedure add!summary( string fileName );
begin	integer inch, brk,eof, lb, passno;
	record!pointer(symbol) r;
setbreak( lb := getbreak, #lf & #ff, #sp & #cr, "INS" );
setbreak( passno := getbreak, "0123456789", #sp, "XNS" );
open( inch := getchan, "DSK", '10000, 4,0, 200, brk, eof := true);
if not eof
 then do begin	boolean flag;
	 lookup( inch, fileName, flag );
	 if (eof := flag)
	  then begin
		print(crlf & "trouble on file: ", fileName, 
			" (code '", cvos(!rh(flag)), ") try again: ");
		if length(fileName := inchwl)=0 then done;
	       end;
	 end
       until not eof;

while not eof
  do  begin	string l, num;
	if length( l := input(inch,lb) )
	 and length( num := scan(l,passno,brk) )
	 and brk = "*"
	 and length(l)
	then begin
		r := one!symbol(l);
		increment( symbol:count[r], cvd(num)-1 );
	      end;
      end;
relbreak( lb ); 
relbreak( passno ); 
release( inch );
end;
integer words, repeats1, repeats2;

simple procedure visit( string name; integer reps );
begin
	increment(reps);
increment(words);
repeats1 := repeats1 + reps;
repeats2 := repeats2 + (reps * reps);

print( reps, " * ", name, crlf );
end;

simple procedure treeWalk( record!pointer(symbol) ptr );
while ptr
   do begin
	require crlf & "Ignore this error: {{" message;
	treeWalk( symbol:l[ptr] );
	require "}} end-of-ignore" & crlf message;
	visit( symbol:name[ptr], symbol:count[ptr] );
	ptr := symbol:r[ptr];
      end;

procedure dump!table;
begin	integer soundex!code, hashes, distinct!words, dw2;
	safe integer array sumx[0:5];

for soundex!code := -1 step 1 until 26*7*7*7 do if table[soundex!code]
 then begin
	words := repeats1 := repeats2 := 0;
	treeWalk( table[soundex!code] );
	print( psoundex(soundex!code), " = ", soundex!code, crlf&crlf );
	increment(sumx[0]);
	sumx[1] := sumx[1] + words;
	sumx[2] := sumx[2] + repeats1;
	sumx[3] := sumx[3] + repeats2;
	sumx[4] := sumx[4] + repeats1 * repeats1;
	sumx[5] := sumx[5] + words * words;
      end;
setprint(null,"T");
summaryLine( "distinct words per hash", sumx[0], sumx[1], sumx[5] );
summaryLine( "copies of words per hash", sumx[0], sumx[2], sumx[4] );
summaryLine( "copies of words per word", sumx[1], sumx[2], sumx[3] );
end;
procedure sdd.Main;
begin "sdd.Main"
string line, s; integer v;
integer brktable, brchar;

s := "abcdefghijklmnopqrstuvwxyz"
   & "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   & "0123456789"
   & "!#$.\'";
setbreak( brktable:=getbreak, s, s, "XUTS" );

print(" Soundex(x). X: " );
while length(line:= inchwl)
   do begin
	while length( s:= scan(line, brktable, brchar) )
	   do begin
		print(" Soundex(", s, ") = ", (v:=soundex(s)), " == ",
		 psoundex(v), " == ", ssoundex(v) );
		rec := one!symbol(s); 
		print( " dup: ", symbol:count[rec], 
			" [", symbol:name[rec], "]", crlf );
	      end;
	print( "Now: " );
     end;
print(crlf & crlf & "File for all words output: ");
setprint(null,"F");
dump!table; 
relbreak( brktable );
end "sdd.Main";
procedure tjb.main;
begin "Read Magnum text files"

integer devChan,cnt,brk,eof, dev.on.Chan, tokenBreak, specBreak;
string update!file; 
integer update!interval, update!time, file!count;

integer procedure current!time;
begin ! get up time in jiffies (monotone time);
return( calli( !xwd( !nsupt, !gtnsw ), calli!gettab ) );
end;

boolean procedure Tokenize( integer array FileInfo );
  begin
define	cvsix.user.a = "FileInfo[-4]"
,	cvsix.user.b = "FileInfo[-3]"
,	cvsix.device = "FileInfo[-2]"
,	PPN = "FileInfo[-1]"
,	cvsix.Name = "FileInfo[0]" 
,	cvsix.Extension = "FileInfo[1]" 
;
	string fileName;
	integer flag;
    increment(file!count);
    if devChan < 0
     then begin 
	devChan := getchan; 
	dev.on.Chan := lnot cvsix.device;
	end;
    if dev.on.Chan neq cvsix.device
     then open( devChan, cv6str( dev.on.Chan := cvsix.device ),
		'10000, 4,0, cnt := 100,brk,eof );
		! mode bit '10000: "pass" illegal file names;

    fileName := "(" & cv6str(cvsix.user.a) & cv6str(cvsix.user.b) & ")"
		& cv6str(cvsix.Name) & "." & cv6str(cvsix.Extension);
    print( #cr, file!count, ": ", fileName, "         ");
    lookup( devChan, fileName, flag );
    if flag then print("Lookup error '", cvos(!rh(flag)), crlf )
     else do begin	string s;
		s := input( devChan, tokenBreak );
		if s >= "A" then one!symbol(s);
		if brk = #quote
		 then do input( devChan, specBreak ) 
			until brk=#quote or eof
		 else if brk = "%"
		 then do input( devChan, specBreak ) 
			until brk="%" or eof;
	      end
	 until eof;
    close(devChan);

    if length( update!file ) and current!time > update!time
     then begin
	print( "<dump>" & crlf );
	setprint( update!file, "F" );
	dump!table; 
	update!time_ current!time + update!interval; 
	end;
    return( false );
  end;

! Find things composed of letters, digits and dots but make sure
  that we notice start of comments and strings ;

define Word!Chars = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789."};

	string response;

update!interval := 10 * 60 * 60; ! 10 minutes (units are jiffies);
update!file := "GLOM.UPD";
setbreak( tokenBreak := getbreak, Word!Chars, 
				Word!Chars & "%" & #quote, "KTUXNS" );
setbreak( specBreak := getbreak, "%" & #quote, "%" & #quote, "IUNS" );

devChan := -1; file!count := 0;

print( crlf & "Files to tokenize: " );
while length( response := inchwl )
   do begin
	if response = "+"
	 then add!summary( response[2 to inf] )
	 else begin 
		update!time_ current!time + update!interval; 
		redufd( Tokenize, response, "*" );
	      end;
	print(crlf & crlf & "File for table dump: ");
	setprint(  response := inchwl, 
		(if length( response ) then "F" else "N") ); 
	dump!table; 
	print( crlf & "More Files to tokenize: " );
      end;
if devChan >= 0 then release( devChan );
relbreak( specBreak );
relbreak( tokenBreak );

end "Read Magnum text files" ;
tjb.main;
end "SOUNDEX"
.
