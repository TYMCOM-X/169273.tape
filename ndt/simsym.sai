entry looksy,makesy,killsy,stepsy, newsym,donsym;
begin "simsym"
external integer !skip!;

record!class symbol(
	record!pointer(symbol) cache; string name; integer val );

record!class symbolTable(
	record!pointer(symbol) cache;
	string name;
	integer ch;
	record!pointer(symbolTable) link;
	integer array buf[0:127] );

record!pointer(symbolTable) GChook;  ! linked list so GC keeps marked;
simple r!p (symbol) procedure find ( r!p(symbolTable) table );
begin	r!p(symbolTable,symbol) top,top2; r!p(symbol) chase;
top_head; top2_null!record;
for depth_0 step 1 while chase_ symbol:cache[top]
   do begin
	if equ(name,symbol:name[chase])
	 then begin
		retv_symbol:val[chase];
		if top2
		 then begin	! climb symbol up (if not at top);
			symbol:cache[top2]_ chase; 
			symbol:cache[top]_ symbol:cache[chase];
			symbol:cache[chase]_ top;
		      end;
		return(retv);
	      end;
	top2_top;
	top_chase;
      end;
for i_0 step 2 while length( bufName_mbs(symbol:buf[0],i) )
   do if equ(bufName,name)
	 then begin
		if depth < 8
		 then top_new!record(symbol)
		 else if top2 then symbol:cache[top2]_null!record;
		symbol:cache[top]_ symbolTable:cache[head];
		symbolTable:cache[head]_ top;
		symbol:name[top]_name;
		retv_ symbol:buf[chase][i+1];
		return(symbol:val[top]_retv);
	      end;

internal integer procedure newsym( string file );
begin	integer ch; integer array buf[0:127];
open(ch_getchan, "DSK",'17, 0,0, 0,0,!skip!_false);
if not !skip!
 then begin lookup(ch,file,!skip!); enter(ch,file,!skip!_false); end;
if !skip! then return(0);
rph_new!record(symbolTable);
symbolTable:ch  [rph]_ ch;
symbolTable:link[rph]_ GChook;
symbolTable:file[rph]_ file;
memory[location(symbolTable:buf[rph])] swap memory[location(buf)];
GChook_ rph;
return(0 lor rph);
end;


