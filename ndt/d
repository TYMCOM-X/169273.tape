        re FTP:
(1) Rob will implement a "baseline" version as well for both the PC and
	CMS.  The PC will have both originate (requestor) and slave 
	versions, the 370 will only have a requestor version initially.

(2) Rob wants an in-protocol "reset" analogous to "ACK" (he proposes 
	ACK 1:1).  I think this is probably a mistake (ie it is an
	out-of-protocol message).

(3) We agree that some form of STOP and/or ABORT is required.  Do you
	have any good ideas (one problem is when to stop ACKs on the
	message).

(4) Here is my proposed behaviour:

t-1: user runs program "DOFTP" on machine IBM, and tells that program
	that he would like build a circuit with a particular login 
	string.  The program builds such a circuit, and then the user
	starts typing characters into the circuit, eventually getting
	fully logged in to machine DEC.
t0: user causes machine DEC to run program "TYMFTP" which starts 
	listening for an ACK (it may begin by sending "ACK/RFR"?)
t1: user signals machine IBM that his initial hand-shaking is complete.
	The keyboard and screen are now de-coupled from the FTP process.
t2:	Machine IBM issues ACK a:b ; RFR
communications failure:
	ACK  bad, RFR bad	[timeout, loop]
	ACK  bad, RFR good	[DEC sends ACK]
	ACK good, RFR bad	[DEC transmission enabled]
	ACK good, RFR good	[DEC sends ACK;DEC transmission enabled]
t3: Machine DEC now has been enabled to talk to machine IBM using 
    sequence starting with a+1; max buffer allowed to send is b.  It
    sends an ACK A:B (forcing single buffering) and
	b:"I would like to send according to table 1".
	
	B:"You send according to table 1"
	B:"I would like to send according to table 1".
    <<
t4: If the ACK has been missed, and a response is needed, RFR goes out ...
Having received "b", 
a<b<c<...<z ; A<B<C<...<Z ; a<A ; b<B ; B < c
a	->baseline: ACK a:b
b	->baseline: RFR
A	<-baseline: b:"I would like to send according to table 1".
B	<-baseline: ACK A:B
c	->baseline: ACK b:c
d	->baseline: B:"I would like to send according to table 1". 
C	<-baseline: ACK B:C
D	<-baseline: c:"You may send according to table 1". 
e	->baseline: C:"You may send according to table 1". 
E	<-baseline: ACK C:D
f	<-baseline: ACK c:d
		<<now listening in either/or>>

	B,baseline:"You send according to table 1"
	B:"I would like to send according to table 1".
    <<
t4: If the ACK has been missed, and a response is needed, RFR goes out ...
Having received "b", 
.  It sends
    an "ACK 
	to run program "TYMFTP" and gives it the 


----------
IBM: [ACK a:b] 
	[RFR]

	Machine IBM issues ACK 1:lim
	to run program "TYMFTP" and gives it the 

