for index_ -1 step 1 until knots+1 do
  if index-2 < time < 2+index then
    for j_ -2 step 1 until 2 do
      if time < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - time) ^ 3;
---
for index_ -1 step 1 until knots+1 do if index-2 < time < 2+index then
    for j_ -2 step 1 until 2 do if time < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - time) ^ 3;
---

time	= [ 0 : 1 ] * knots
	= [ 0 : knots ]
tau	= time - floor( time )		[0:1)
tick	= floor( time )			[0:knots] {integer}
-> time	= tick + tau

------- presume tau = 0 --------
	time = tick

for index_ -1 step 1 until knots+1 do if index-2 < time < 2+index then
    for j_ -2 step 1 until 2 do if time < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - time) ^ 3;
= for index_ tick-1 step 1 until tick+1 do
&   for j_ -2 step 1 until 2 do if tick < j + index then 
&	result_ result + ai[index] * bn4[j] * (j + index - tick) ^ 3;

:index_ tick-1:
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - tick) ^ 3;
 =   for j_ -2 step 1 until 2 do if tick < j + tick-1 then 
 &	result_ result + ai[tick-1] * bn4[j] * (j + tick-1 - tick) ^ 3;
 =   j_2; result_ result + ai[tick-1] * bn4[j] * (j - 1) ^ 3;
 =   result_ result + ai[tick-1] * bn4[2];

:index_ tick:
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - tick) ^ 3;
 =  for j_ -2 step 1 until 2 do if tick < j + tick then 
 &	result_ result + ai[tick] * bn4[j] * (j + tick - tick) ^ 3;
 =  for j_ 1,2 do result_ result + ai[tick] * bn4[j] * j ^ 3;
 : result_ result + ai[tick] * (bn4[1] + bn4[2] * 8);

:index_ tick+1:
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - tick) ^ 3;
 =  for j_ -2 step 1 until 2 do if tick < j + tick+1 then 
 &	result_ result + ai[tick+1] * bn4[j] * (j + tick+1 - tick) ^ 3;
 =  for j_ 0,1,2 do result_result+ ai[tick+1] * bn4[j] * (j + 1) ^ 3;
 : result_result+ ai[tick+1] * (bn4[0] + bn4[1] * 8 + bn4[2] * 27);

--- hence
result	= ai[tick-1] * bn4[2]
	+ ai[tick] * (bn4[1] + bn4[2] * 8)
	+ ai[tick+1] * (bn4[0] + bn4[1] * 8 + bn4[2] * 27);
	= (ai[tick-1] + 4 * ai[tick] + ai[tick+1]) / 6;
------- presume tau > 0 --------
	time = tick + tau

for index_ -1 step 1 until knots+1 do if index-2 < time < 2+index then
    for j_ -2 step 1 until 2 do if time < j + index then 
	result_ result + ai[index] * bn4[j] * (j + index - time) ^ 3;
= for index_-1 step 1 until knots+1 do if index-2<tick+tau<2+index then
&   for j_ -2 step 1 until 2 do if tick+tau < j + index then 
&	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
= for index_-1 step 1 until knots+1 do if index-2 <= tick < 2+index then
&   for j_ -2 step 1 until 2 do if tick+tau < j + index then 
&	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
= for index_tick-1 step 1 until tick+2 max knots+1 do
&   for j_ -2 step 1 until 2 do if tick+tau < j + index then 
&	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
{{note: tick=knots means tau=0 (or can define ai[knots+2]=0)}}
= for index_tick-1 step 1 until tick+2 do
&   for j_ -2 step 1 until 2 do if tick < j + index then 
&	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;

:index_ tick-1
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
 =  for j_ -2 step 1 until 2 do if 0 < j -1 then 
 &	result_result+ ai[tick-1] * bn4[j] * (j -1 - tau) ^ 3;
 =	j_ 2; result_result+ ai[tick-1] * bn4[j] * (j -1 - tau) ^ 3;
 =	result_result+ ai[tick-1] * bn4[2] * (1 - tau) ^ 3;
:index_ tick
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
 =  for j_ -2 step 1 until 2 do if 0 < j then 
 &	result_result+ ai[tick] * bn4[j] * (j - tau) ^ 3;
 =  for j_ 1, 2 do result_result+ ai[tick] * bn4[j] * (j - tau) ^ 3;
 =  result_result+ ai[tick] * ( bn4[1]*(1-tau)^3 + bn4[2]*(2-tau)^3 );
:index_ tick+1
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
 =  for j_ -2 step 1 until 2 do if 0 < j +1 then 
 &	result_result+ ai[tick+1] * bn4[j] * (j +1 - tau) ^ 3;
 =  for j_ 0,1,2 do result_result+ ai[tick+1] * bn4[j] * (j+1 - tau) ^3;
 =  result_result+ ai[tick+1] *
 &	( bn4[0]*(1-tau)^3 + bn4[1]*(2-tau)^3 + bn4[2]*(3-tau)^3 );
:index_ tick+2
    for j_ -2 step 1 until 2 do if tick < j + index then 
	result_result+ ai[index] * bn4[j] * (j + index - tick - tau) ^3;
 =  for j_ -2 step 1 until 2 do if 0 < j +2 then 
 &	result_result+ ai[tick+2] * bn4[j] * (j +2 - tau) ^ 3;
 =  for j_ -1,0,1,2 do result_result+ ai[tick+2] * bn4[j] * (j+2-tau)^3;
 =  result_result+ ai[tick+2] *
 &	( bn4[-1]*(1-tau)^3 + bn4[0]*(2-tau)^3 + 
 &	  bn4[1]*(3-tau)^3 + bn4[2]*(4-tau)^3 );

--- hence 
result_ ai[tick-1] * bn4[2] * (1 - tau) ^ 3
 + ai[tick] * ( bn4[1]*(1-tau)^3 + bn4[2]*(2-tau)^3 )
 + ai[tick+1]* (bn4[0]*(1-tau)^3 + bn4[1]*(2-tau)^3 + bn4[2]*(3-tau)^3)
 + ai[tick+2] * ( bn4[-1]*(1-tau)^3 + bn4[0]*(2-tau)^3 + 
		  bn4[1]*(3-tau)^3 + bn4[2]*(4-tau)^3 );

= result_ ai[tick-1] * 1/6 * (1 - tau) ^ 3
 + ai[tick] * ( -2/3*(1-tau)^3 + 1/6*(2-tau)^3 )
 + ai[tick+1]* ( (1-tau)^3 + -2/3*(2-tau)^3 + 1/6*(3-tau)^3)
 + ai[tick+2] * ( -2/3*(1-tau)^3 + (2-tau)^3 + 
		  -2/3*(3-tau)^3 + 1/6*(4-tau)^3 );
Using results for tau=0,:

iff tau=0 then 
result_ ai[tick-1] * bn4[2]
 + ai[tick] * ( bn4[1] + bn4[2]*8 )
 + ai[tick+1] * ( bn4[0] + bn4[1]*8 + bn4[2]*27 )
 + ai[tick+2] * ( bn4[-1] + bn4[0]*8 + bn4[1]*27 + bn4[2]*64 );

iff tau=1 then 
result_ 0
 + ai[tick] * bn4[2]
 + ai[tick+1] * ( bn4[1] + bn4[2]*8 )
 + ai[tick+2] * ( bn4[0] + bn4[1]*8 + bn4[2]*27 );

Now should get same results for tick=n+1,tau=0 and tick=n,tau=1
   ai[n] * bn4[2] 
 + ai[n+1] * ( bn4[1] + bn4[2]*8 )
 + ai[n+2] * ( bn4[0] + bn4[1]*8 + bn4[2]*27 )
 + ai[n+3] * ( bn4[-1] + bn4[0]*8 + bn4[1]*27 + bn4[2]*64 );
=
   ai[n] * bn4[2]
 + ai[n+1] * ( bn4[1] + bn4[2]*8 )
 + ai[n+2] * ( bn4[0] + bn4[1]*8 + bn4[2]*27 );

which gives:
0 = ai[n+3] * ( bn4[-1] + bn4[0]*8 + bn4[1]*27 + bn4[2]*64 );
  = ... * ( -2/3 + 8 + 27*-2/3 + 64*1/6 )
  = ... * 1/6 * (-4 + 8*6 + 27*-4 + 64)
  = ... * ( -4 + 48 - 108 + 64 )
  = ... * ( 44 - 44 )

= result_ ai[tick-1] * 1/6 * (1 - tau) ^ 3
 + ai[tick] * ( -2/3*(1-tau)^3 + 1/6*(2-tau)^3 )
 + ai[tick+1]* ( (1-tau)^3 + -2/3*(2-tau)^3 + 1/6*(3-tau)^3)
 + ai[tick+2] * ( -2/3*(1-tau)^3 + (2-tau)^3 + 
		  -2/3*(3-tau)^3 + 1/6*(4-tau)^3 );

= result_ ai[tick-1]/6 * (1-tau)^3
 + ai[tick]/6 * ( -4(1-tau)^3 + (2-tau)^3 )
 + ai[tick+1]/6 * ( 6(1-tau)^3 - 4(2-tau)^3 + (3-tau)^3 )
 + ai[tick+2]/6 * ( -4(1-tau)^3 + 6(2-tau)^3 - 4(3-tau)^3 + (4-tau)^3 );

(a-b)^3 = (a-b)(aa -2ab + bb)
= (aaa -2aab + abb) - (aab -2abb + bbb)
= aaa - 3aab + 3abb - bbb
(1-tau)^3 = 1 - 3*tau + 3*tau^2 - tau^3
(2-tau)^3 = 8 - 12*tau + 6*tau^2 - tau^3
(3-tau)^3 = 27 - 27*tau + 9*tau^2 - tau^3
(4-tau)^3 = 64 - 48*tau + 12*tau^2 - tau^3
(a+1)^3 = aaa + 3aa + 3a + 1

ntau= 1 - tau
(1-tau)^3 = ntau^3
(2-tau)^3 = ntau^3 + 3*ntau^2 + 3*ntau + 1
(3-tau)^3 = ntau^3 + 6*ntau^2 + 12*ntau + 8 
(4-tau)^3 = ntau^3 + 9*ntau^2 + 27*ntau + 27

result = ai[tick-1]/6 * (1-tau)^3
 + ai[tick]/6 * ( -4(1-tau)^3 + (2-tau)^3 )
 + ai[tick+1]/6 * ( 6(1-tau)^3 - 4(2-tau)^3 + (3-tau)^3 )
 + ai[tick+2]/6 * ( -4(1-tau)^3 + 6(2-tau)^3 - 4(3-tau)^3 + (4-tau)^3 );
= ai[tick-1]/6 * ntau^3
 + ai[tick]/6 * ( -4*ntau^3 + (ntau^3 + 3*ntau^2 + 3*ntau + 1) )
 + ai[tick+1]/6 * ( 6*ntau^3 - 4*(ntau^3 + 3*ntau^2 + 3*ntau + 1)
		+ (ntau^3 + 6*ntau^2 + 12*ntau + 8) )
 + ai[tick+2]/6 * ( -4*ntaus3 + 6*(ntau^3 + 3*ntau^2 + 3*ntau + 1)
		- 4*(ntau^3 + 6*ntau^2 + 12*ntau + 8)
		+ (ntau^3 + 9*ntau^2 + 27*ntau + 27) );
= ai[tick-1]/6 * ntau^3
 + ai[tick]/6 * ( -3*ntau^3 + 3*ntau^2 + 3*ntau + 1 )
 + ai[tick+1]/6 * ( 3*ntau^3 - 6*ntau^2 + 4 )
 + ai[tick+2]/6 * ( -1*ntau^3 + 3*ntau^2 - 3*ntau + 1 )

= 1/6 *
 ( ntau^3 * (ai[tick-1] - 3 * ai[tick] + 3 * ai[tick+1] - ai[tick+2])
 + ntau^2 * (3 * ai[tick] - 6 * ai[tick+1] + 3 * ai[tick+2])
 + ntau   * (3 * ai[tick] - 3 * ai[tick+2])
 + (ai[tick] + 4 * ai[tick+1] + ai[tick+2])
(1-tau)^3 = 1 - 3*tau + 3*tau^2 - tau^3
(2-tau)^3 = 8 - 12*tau + 6*tau^2 - tau^3
(3-tau)^3 = 27 - 27*tau + 9*tau^2 - tau^3
(4-tau)^3 = 64 - 48*tau + 12*tau^2 - tau^3

result = ai[tick-1]/6 * (1-tau)^3
 + ai[tick]/6 * ( -4(1-tau)^3 + (2-tau)^3 )
 + ai[tick+1]/6 * ( 6(1-tau)^3 - 4(2-tau)^3 + (3-tau)^3 )
 + ai[tick+2]/6 * ( -4(1-tau)^3 + 6(2-tau)^3 - 4(3-tau)^3 + (4-tau)^3 );
= 1/6 * (
   ai[tick-1] * (1 (1 - 3*tau + 3*tau^2 - tau^3)
)+ ai[tick] * ( -4 (1 - 3*tau + 3*tau^2 - tau^3)
		+1 (8 - 12*tau + 6*tau^2 - tau^3)
)+ ai[tick+1] * (6 (1 - 3*tau + 3*tau^2 - tau^3)
		-4 (8 - 12*tau + 6*tau^2 - tau^3)
		+1 (27 - 27*tau + 9*tau^2 - tau^3)
)+ ai[tick+2] *(-4 (1 - 3*tau + 3*tau^2 - tau^3)
		+6 (8 - 12*tau + 6*tau^2 - tau^3)
		-4 (27 - 27*tau + 9*tau^2 - tau^3)
		+1 (64 - 48*tau + 12*tau^2 - tau^3)
) )
= 1/6 * ( 
+tau^3*(-1 * ai[tick-1] +3 * ai[tick] -3 * ai[tick+1] +1 * ai[tick+2] )
+tau^2*(+3 * ai[tick-1] -6 * ai[tick] +3 * ai[tick+1] )
+tau*(	-3 * ai[tick-1]		      +3 * ai[tick+1] )
+	+1 * ai[tick-1] +4 * ai[tick] +1 * ai[tick+1] ) )

    