entry setUp,onUUO
	Title DblSim -- Double precision opcode simulations
	reloc
;Acs
t1= 1		;generic temporary to fiddle with (indexable)
o.= 2		;Pointer to the base of the per-opcode table (indexable)
fl.pc= 3	;flags ,, PC for returning
v.a= 4		;Triple AC: the AC argument for the Opcode + 1 free ac
ex.a= 7		;Exponent for AC arg (floating point stuff) (also is +3)
v.m= 10		;Triple AC: the MEM argument for the Opcode + 1 free ac
ex.m= 13	;Exponent for MEM arg (floating point stuff) (also +3)

.JBUUO== 40
.JB41== 41

;Per Opcode storage (argument state)
Storage:
      phase 0
	oACS:	block 20 ;ACs at time of OPCODE [MUST be first]
	oAcAdd:	block 1	; userAc(o.)  [for dmovem res,@... after oACS]
	o.mem.a: block 2 ;can save memory argument here (two words)
	o.goAddr:	;when leaving. One word not in Acs or Lock
	oUUO:	block 1	;the actual UUO
	o.goBlk:	;when leaving. Two words not in Acs or Lock
	o.ac.a:	block 2	;can save ac argument here (two words)
	o.lock:	block 1	;recursion interlock (almost complete: exit)
			;-1 means "available for use"
	..size== .
      dephase

	block	7*..size

;Flags for CPU state:
b.Over== 1b0	;Overflow
b.CRY0== 1b1	;Carry out of bit 0
b.CRY1== 1b2	;Carry out of bit 1
b.FLOV== 1b3	;Floating point overflow
b.FPDN== 1b4	;first part done
b.USER== 1b5	;in USER mode (not EXEC)
b.USIO== 1b6	;USER I/O is OK
b.PBLC== 1b7	;PUBLIC mode
b.NADF== 1b8	;Inhibit Address failure
b.TRP2== 1b9	;TRAP2
b.TRP1== 1b10	;TRAP1
b.FLUN== 1b11	;Floating point Underflow
b.NDIV== 1b12	;No-Divide
define pnt.carries(flagWord) = <point 2,flagWord,1>

;DFAD = 110	;DFSB = 111	;DFMP = 112	;DFDV = 113
;DADD = 114	;DSUB = 115	;DMUL = 116	;DDIV = 117
;... will use 30-37 for checkout
dblBas== 30	;for the purpose of testing
opdef uDfad [30b8]
opdef uDfsb [31b8]
opdef uDfmp [32b8]
opdef uDfdv [33b8]
opdef uDadd [34b8]
opdef uDsub [35b8]
opdef uDmul [36b8]
opdef uDdiv [37b8]

UUO.SV:	jsr onUUO	;effective address of JSR for "real" opcode
UUO.GO:	.+1		;effective address of JSR + 1 (where to go)
	halt	.	;stop if not really a JSR
recur:	-1
tmp.o:	0
onUUO:	0
	aose	recur		;watch out for recursion
	 halt	.		;due to interrupts
	movem	o.,tmp.o
	ldb	o.,[point 9,.JBUUO,8]
	xori	o.,dblBas
	trnn	o.,770
	 skipn	o.,Handles(o.)
	  jrst	[move	o.,onUUO
		 movem	o.,@UUO.SV
		 move	o.,tmp.o
		 sos	recur	;let other guy cope as he likes
		 jrst	UUO.GO]
	aose	o.lock(o.)	;avoid local recursion
	 halt	.
	movem	17,oACS+17(o.)	;save another AC
	movei	17,oACS(o.)	;Then save all of the Acs
	blt	17,oACS+16(o.)	;
	move	17,.JBUUO	;what the UUO was
	movem	17,oUUO(o.)	;save for later examination
	move	17,tmp.o	;save o. wherever it belongs
	movem	17,oACS+o.(o.)	;(since our ac save wrote wrong value)
	move	fl.PC,onUUO	;where the UUO came from
	sos	recur		;entries are now all in per-UUO area

	movem	0,oACS+20(o.)	;get set to get the AC arg (note wrap)
	ldb	t1,[point 4,oUUO(o.),12]	;get the AC field
	hrli	t1,o.			;make it index into the table
	dmove	v.a,@t1			;get AC args, note 0 wrap OK
	movem	t1,oAcAdd(o.)		;save AC location for stores
	hrro	t1,oUUO(o.)		;get the memory address
	dmove	v.m,(t1)		;get memory args (assume memory)
	trnn	t1,777760		;was it really an AC first?
	 jrst	[hrli	t1,o.		;an AC. get its stored address
		 move	v.m,@t1		;read it from user table
		 addi	t1,1		;check mem+1 for ACness
		 trnn	t1,20		;if memory, v.m+1 is OK
		  move	v.m+1,@t1	;else also get from AC block
		 jrst	gotMem]
	aojn	t1,gotMem		;did it wrap to 0?
	 move	v.m+1,oAcs(o.)		;Yup, second word comes from ACs
gotMem:	hlrz	t1,o.		;dispatch to handler
	jrst	(t1)

endSt4:	move	t1,oAcAdd(o.)
	movem	v.a,@t1		;save the first of the quad
	addi	t1,1		;get place to put the AC+1
	trz	t1,20		;AC wrapping (t1 point to ac+1 now)
	movem	v.a+1,@t1
	addi	t1,1		;get place to put the AC+2
	trz	t1,20		;AC wrapping (t1 point to ac+2 now)
	movem	v.a+2,@t1
	addi	t1,1		;get place to put the final ac
	trz	t1,20		;AC wrapping (t1 point to ac+3 now)
	movem	v.a+3,@t1
	jrst	endNst
endSt2:	move	t1,oAcAdd(o.)	;put result back into Acs
	movem	v.a,@t1
	addi	t1,1		;ac+1
	trz	t1,20		;make it wrap
	movem	v.a+1,@t1
endNst:	dmove	v.a,[blt 17,17	;get exit code
		     jrstf @o.goAddr]
	addi	v.a+1,(o.)	;relocate into the block
	dmovem	v.a,o.goBlk(o.)	;save it somewhere
	movem	fl.PC,(v.a+1)	;save place to jump to
	hrlzi	17,oAcs(o.)	;set the BLT ac
	sos	o.lock(o.)	;tiniest recursion window I can get 
	jrst	o.goBlk(o.)	;and run with it

Handles:
	xwd	doDfad,0 * ..size + Storage	;broken on un-normed 
	xwd	doDfsb,1 * ..size + Storage	;broken on un-normed
	xwd	doDfmp,2 * ..size + Storage	;new: broken
0;	xwd	doDfdv,3 * ..size + Storage
	xwd	doDadd,4 * ..size + Storage
	xwd	doDsub,5 * ..size + Storage 
	xwd	doDmul,6 * ..size + Storage 
	xwd	doDdiv,7 * ..size + Storage 	;new: special case only
doDadd:	tlo	v.a+1,(1b0)	;add least significant words
	tlz	v.m+1,(1b0)	;together. result carries IFF
	add	v.a+1,v.m+1	;result AC is positive
				;(pos + neg can never overflow)
	tlon	v.a,(1b0)	;same trick on High order word
	 tdza	t1,t1		;keep track of sign bit results in T1 
	 movei	t1,1		
	tlze	v.m,(1b0)
	 addi	t1,1		;another bit for the result
	tlzn	v.a+1,(1b0)	;add carry from low word to negative
	 addi	v.a,1		;word (cannot overflow: max res=0)
	add	v.a,v.m		;add 35 bits of high word
	jumpl	v.a,noCry1	;did we carry out of bit 1?
	tlo	fl.PC,(b.cry1)	;set the CRY1 flag if so
				;here sign(v.a) off, sign(v.a+1) off
	cain	t1,0		;if no sign carry (note: t1+1)
	 tloa	fl.PC,(b.over+b.trp1)	;then set overflow & trap1
	 tlo	fl.PC,(b.cry0)		;otherwise set CRY0
	trne	t1,1		;check the resultant sign
	 jrst	endSt2		;reversed sense since havent added CRY1
	tlo	v.a,(1b0)	;Negative result (set both signs)
	tlo	v.a+1,(1b0)	;Negative result (set both signs)
	jrst	endSt2
	
noCry1:	;no carry out of bit 1. sign(v.a) is on, sign(v.a+1) is off
	trzn	t1,1		;clear bit showing what sign wanted
	 tlza	v.a,(1b0)	;and put the appropriate sign
	 tlo	v.a+1,(1b0)	;into both sign bits
	jumpe	t1,endSt2	;If no CRY0 to set, we are all done
	tlo	fl.PC,(b.over+b.cry0+b.trp1)	;set CRY0, do overflow
				;Since this happened without CRY1
	jrst	endSt2		;and return to the user
doDsub:	setca	v.m,		;negate minuend [ones comp / increment]
	tlz	v.m+1,(1b0)
	movn	v.m+1,v.m+1
	jumpn	v.m+1,doDadd	;no carry to high word. Use add
	camn	v.m,[xwd 377777,777777]	;Originally 1b0 ?
	 jrst	dsubB0		;the negate wont work. Handle specially
	aojn	v.m,doDadd	;if not, complete negate and add
	tlo	fl.pc,(b.cry0+b.cry1)	;??? DEC sets BOTH flags on x-0
	cail	v.a,0		;So don't do the DADD (no-op anyway)
	 tlza	v.a+1,(1b0)	;positive result, copy sign
	 tlo	v.a+1,(1b0)	;negative result, copy sign
	jrst	endSt2

dsubB0: ;cannot negate minuend.  This happens when subtracting "1b0 / 0"
;This case we will do directly.  X - 1b0/0  =  X xor 1b0/0  [may ovrflo]
	tlce	v.a,(1b0)	;subtract works if original was negative
	 tlza	v.a+1,(1b0)	;result positive. Copy sign, safe result
	  tloa	v.a+1,(1b0)	;result negative. Copy sign, overflow
	 tloa	fl.pc,(b.cry0+b.cry1)
	  tlo	fl.pc,(b.cry1+b.over+b.trp1)	;woops! overflow
	jrst	endSt2		;All done

doDmul:	tlz	v.a+1,(1b0)	;canonize low words
	tlz	v.m+1,(1b0)
	move	v.a+2,v.m+1	;low*low into v.a+2,v.a+3
	mul	v.a+2,v.a+1	; [cant trap due to the TLZ's]
	move	v.m+2,v.a	;one inner product to v.m+2,v.m+3
	mul	v.m+2,v.m+1	; [cant trap due to the TLZ's] 
	move	t1,v.m		;save this
	mul	v.m,v.a+1	;the other inner product to v.m,v.m+1
				; [cant trap due to the TLZ's] 
	camn	t1,v.a		;check for the evil 1b0 * 1b0
	came	t1,[1b0]
	 jrst	MlSafe		;No problem, forget it
	movei	v.a+1,0		;prepare a "correct" result.
	jumpn	v.m,MlDone	;Non-zero low words have non-zero high
	jumpn	v.m+2,MlDone	;parts in their partial products
				; (n mul 1b0) = -n / 0
	tlo	fl.pc,(b.Over+b.TRP1)	;Aha! squaring 1b0. Trap it
	jrst	ResNeg		;and then return 4*1b0 (have 1b0/0/0/0)
MlSafe:	mul	v.a,t1		;high*high into v.a,v.a+1
MlDone:	;now put them all together
;The following code is a non-overflowing version of:(low signs not done)
;*	jov	.+1
;*	Dadd	v.a+1,v.m		;***
;*	jov	[aoja	v.a,.+1]
;*	Dadd	v.a+1,v.m+2		;***
;*	jov	[aoja	v.a,.+1]
	movei	t1,0		;the amount to carry into the high word
	caige	v.m,0		;- 1 for each negative cross product
	 subi	t1,1
	caige	v.m+2,0		;- 1 for each negative cross product
	 subi	t1,1
	tlo	v.a+1,(1b0)	;prevent overflow problems
	tlo	v.a+2,(1b0)
	tlz	v.m+1,(1b0)	;sum up the low parts
	add	v.a+2,v.m+1
	jumpge	v.a+2,[;carry from the sum
			tlo	v.a+2,(1b0)	;turn the sign back on
			aoja	v.a+1,.+1]	;takes it at most to 0
	tlz	v.m+3,(1b0)	;sum up the low parts
	add	v.a+2,v.m+3
	cail	v.a+2,0		;Should it carry out?
	 aojg	v.a+1,[	tlo	v.a+1,(1b0) ;yes, dont go gtr 0 to
			aoja	t1,.+1]   ;prevent overflow on next add
	tlz	v.m,(1b0)
	add	v.a+1,v.m
	jumpg	v.a+1,[	tlo	v.a+1,(1b0)
			aoja	t1,.+1]
	tlz	v.m+2,(1b0)
	add	v.a+1,v.m+2
	cail	v.a+1,0
	 aoje	t1,gotRes
	jumpe	t1,gotRes	;done if no borrows or carries
	move	v.m,t1		;get sign of borrow/carry
	xor	v.m,v.a		;and see if same as that of high word
	jumpl	v.m,[add  v.a,t1	;different signs, no overflow
		     jrst gotRes]
	tlc	v.a,(1b0)	;force different signs
	add	v.a,t1		;before the add to prevent overflows
	tlc	v.a,(1b0)
gotRes:
;^^ Fake code ^^
	jumpl	v.a,resNeg
	tlz	v.a+1,(1b0)	;result positive, clear low sign bits
	tlz	v.a+2,(1b0)
	tlz	v.a+3,(1b0)
	jrst	endSt4		;and store the 4-word result
resNeg:	tlo	v.a+1,(1b0)	;result negative, set low sign bits 
	tlo	v.a+2,(1b0)
	tlo	v.a+3,(1b0)
	jrst	endSt4		;and store the 4-word result
doDdiv:	opdef dsub [115b8]	;we use it here ... 
	v.a2 == v.a+2		;actually could be any ac-pair
	move	t1,oAcAdd(o.)	;get set to read low double-word
	addi	t1,2		;get ac+2
	trz	t1,20		;accumulator wrap
	move	v.a2,@t1	;read
	addi	t1,1		;get ac+3
	trz	t1,20		;accumulator wrap
	move	v.a2+1,@t1	;read
	jumpl	v.a,nx.ddiv	;handle negatives differently
	tlz	v.a+1,(1b0)	;canonize low words
	tlz	v.a2,(1b0)	;canonize low words
	tlz	v.a2+1,(1b0)	;canonize low words
	jumpl	v.m,pn.ddiv	;cope with negatives differently
	tlz	v.m+1,(1b0)	;canonize low words
	camn	v.a,v.m		;=dcaml v.a,v.m
	 camge	v.a+1,v.m+1
	 camle	v.a,v.m
	  jrst	[tlo	fl.pc,(b.Over+b.TRP1+b.NDIV)	;No divide
		 jrst	endNSt]	;doesn't change the acs at all
;now v.a < v.m
	tlne	v.m,(1b1)	;make sure we dont fiddle with sign bit
	 jrst	big.dv
;now we know we can do shift/subtracts. produce result in quad v.a,v.a2
	movei	t1,^D70		;number of bits to produce
	jrst	ddv.l

ddv.ge:	dsub	v.a,v.m		;a result bit has shown up, subtract
	sojle	t1,ddv.go	;and proceed until no bits left
ddv.l:	ashc	v.a,1		;multiply numerator times 2
	tlze	v.a2,(1b1)	;the bit destined for lsb of v.a pair
	 iori	v.a+1,1
	ashc	v.a2,1
	camn	v.a,v.m		;=dcaml v.a,v.m
	 camge	v.a+1,v.m+1
	 camle	v.a,v.m
	  aoja	v.a2+1,ddv.ge
	sojg	t1,ddv.l	;and proceed until no bits left
ddv.go:	exch	v.a,v.a2	;result was remainder/dividend
	exch	v.a+1,v.a2+1	;but we want the opposite
	jrst	endSt4		;now we are all done

big.dv: 
pn.ddiv: 
nx.ddiv: 
	outstr[asciz "{DDIV: unsolved case}"]
	tlo	fl.pc,(b.Over+b.TRP1+b.NDIV)	;No divide
	jrst	endNSt			;doesn't change the acs at all
STRIP:	;break v.m into its constituent parts [called by JSP T1,]
	ldb	ex.m,[point 8,v.m,8]	;get exponent
	jumpge	v.m,.+2		;Need ones-compement for negative
	 tloa	v.m,777000	;Negative: Extend the sign bit
	  tlza	v.m,777000	;Positive: just clear exponent
	 xori	ex.m,377	;Negative: the exponent was complemented
	subi	ex.m,200	;get true exponent
	ashc	v.m,6		;put fraction in normal position
				;(leaves 2 bits for carry in high word)
	jrst	(t1)		;and return

DoDfsb:	dmovn	v.m,v.m
DoDfad:	jsp	t1,strip	;break memory argument up
	exch	v.m,v.a		;it will land in AC arg spot, but ...
	exch	v.m+1,v.a+1
	move	ex.a,ex.m
	jsp	t1,strip	;break up the AC arg
	camge	ex.a,ex.m	;arg with larger exponent to .A
	 jrst	[exch	v.m,v.a
		 exch	v.m+1,v.a+1
		 exch	ex.m,ex.a
		 jrst	.+1]
	sub	ex.m,ex.a	; get size of mis-alignment
	ashc	v.m,(ex.m)	; shift (align binary points) 
;;; ***	dadd	v.a,v.m ***	; ex.a: exponent, fraction in v.m,v.m+1
	tlz	v.a+1,(1b0)
	tlo	v.m+1,(1b0)
	add	v.a+1,v.m+1
	tlzn	v.a+1,(1b0)
	 addi	v.a,1
	add	v.a,v.m
;;; ^ special case dadd ^
	skipge	t1,v.a		; remember sign of the result
	 dmovn	v.a,v.a		; get abs of result for normalization
	move	ex.m,v.a+1	; save LS.word during JFFO
	jffo	v.a,bit.found	; find how much need to normalize
	exch	v.a,ex.m	; MS.word = 0, "shift" 35 bits left
				; note this clears saved "LS.word"
	subi	ex.a,43		; account in exponent (35 decimal bits)
	jffo	v.a,bit.found	; now go find the bit
	jrst	endSt2		; both words 0 (note jffo cleared f1+1)
bit.found:
	exch	v.a+1,ex.m	; restore proper LS.word
	subi	ex.a,(ex.m)	; adjust the exponent by JFFO result
	ashc	v.a,1-9(ex.m)	; shift so (almost) normalized
	tlo	v.a+1,(1b0)	; prepare to round
	aojn	v.a+1,roundOk	; which may carry to high word
	addi	v.a,1		; round carried to high word
	tlnn	v.a,002000	; did the rounding change the exponent?
	 jrst	roundOk		; nope, all done
	addi	ex.a,1		; bump the exponent
	ashc	v.a,-1		; actually, know result = 001000,,0 / 0
roundOk: ashc	v.a,-1		; remove the rounding bit
	addi	ex.a,200+9-6	;recreate the proper exponent
	dpb	ex.a,[point 8,v.a,8]
	caige	t1,0		; negate result if desired
	 dmovn	v.a,v.a
	trnn	ex.a,777400	;check for exponent overflow / underflow
	 jrst	endSt2		; return immediately if none
	tlo	fl.pc,(b.Over+b.FLOV+b.TRP1)	;these are always on
	caie	ex.a,200	;this is always the add exponent on over
	 tlo	fl.pc,(b.FLUN)		;if not that exponent, underflow
	jrst	endSt2
fm.set:	;break v.a into its constituent parts [but drop the sign]
	;Exponent is still "excess 128", fraction moved so b1 is on
	;this detects zeroes, and does a short circuit exit to endSt2
	caige	v.a,0		;take absolute value
	 dmovn	v.a,v.a		;negate. [1b0 safe, see later]
	ldb	ex.a,[point 8,v.a,8]	;get exponent
	tlz	v.a,777000	;clear the exponent field
	ashc	v.a,8		;put fraction in normal position
				;(this clears the low sign)
	jumpn	v.a,normIt	;and normalize it
	jumpe	v.a+1,endSt2	;if a zero, result will be 0
	exch	v.a,v.a+1	;Cover 35 bits of shift rapidly
	subi	ex.a,^D35
normIt:	tlne	v.a,200000	;Normalized yet?
	 jrst	(t1)
	ashc	v.a,1		;nope, head down another bit
	soja	ex.a,normIt

doDfmp:
	move	ex.m,v.a	;save the sign of the result
	xor	ex.m,v.m	;in the LH of ex.m
	jsp	t1,fm.set	;break the AC argument up (pos result)
	exch	v.m,v.a		;it will land in MEM arg spot, but ...
	exch	v.m+1,v.a+1	;multiplication is commutative after all
	hrr	ex.m,ex.a	;save exponent, but dont fiddle sign bit
	jsp	t1,fm.set	;break the MEM argument up (pos result)
	addi	ex.a,-200(ex.m)	;get the result exponent
;note: since normalized now, we do not need to do a 4-word result.
; In fact a 2-word result will do (msb=1b2 usually)
	mul	v.m+1,v.a	;(only need the high word actually)
	mul	v.a+1,v.m	;(again, only the high word)
	tlo	v.a+1,(1b0)	;So easy when unsigned arithmetic
	add	v.m+1,v.a+1
	mul	v.a,v.m		;We need all the bits from here
	jumpge	v.m+1,[halt .		;low sum overflowed (how?)
		       tlo  v.m+1,(1b0)	;set sign back on
		       aojg v.a,.+1	;carry to high word
		       halt .+1]	;(it MUST have room)
	add	v.a+1,v.m+1
	jumpge	v.a+1,[aojg v.a,.+1	;carry off to high word
		       halt .+1]	;(it MUST have room I think)
resNrm:	tlne	v.a,200000	;now normalize result
	 jrst	fmpRet
	ashc	v.a,1
	soja	ex.a,resNrm
fmpRet:	lsh	v.a+1,1		;put the bits next to each other
	lshc	v.a,-8		;make room for exponent
	rot	v.a+1,-1	;put round bit in low sign bit
	jumpge	v.a+1,endIt	;if no rounding, all done
	aojl	v.a+1,[tlz v.a+1,(1b0)	;if roundup stays in low word
		       jrst endIt]	;then fix low sign and done
	addi	v.a,1		;carry
	tlne	v.a,001000	;well, did we change range?
	 aoja	ex.a,[movsi v.a,000400	;yup, only one possible result
		      jrst  endIt]
endIt:	dpb	ex.a,[point 8,v.a,8]
	trne	ex.a,400000	;did the exponent underflow?
	 tloa	fl.pc,(b.flun)	;just like overflow, but this bit too
	trne	ex.a,001400	;floating overflow? (1: superstition)
	 tlo	fl.pc,(b.trp1+b.over+b.flov)
	jumpge	ex.m,endSt2	;remember we saved the sign here?
	dmovn	v.a,v.a		;set the result negative
	jrst	endSt2		;and go
setup:	setzm	recur		;shut this down for a bit
	hlrz	o.,.JB41
	andi	o.,777740	;get the opcode and the AC
	caie	o.,0
	cain	o.,(<halt>)
	 jrst	[move	o.,[jsr stop]
		 movem	o.,.JB41
		 jrst	setup]
	cain	o.,(<pushj 17,>)	;check for PUSHJ P,
	 jrst	[move	o.,.JB41	;get original PUSHJ
		 dpb	o.,[point 23,goOn,35]	;store effective address
		 move	o.,[jsr PushGo]	;store effective address
		 movem	o.,.JB41
		 jrst	setup]
	caie	o.,(<jsr>)	;was it precisely JSR 0, ?
	 halt	.
	ldb	o.,[point 27,.JB41,35]
	cain	o.,onUUO	;was it already set up for here?
	 jrst	allSet		;then leave it alone
	movem	o.,UUO.SV	;save address for flags and PC
	hrri	o.,1(o.)	;increment the address
	movem	o.,uuo.go	;and save as address to jump to
	move	o.,[jsr onuuo]	;then install our handler
	movem	o.,.JB41
allSet:	movei	o.,Storage	;clear all recursion locks in UUOs
	movei	t1,8		;one per opcode handled (8 opcodes)
clearEm: setom	o.lock(o.)	;clear lock
	addi	o.,..size	;next buffer
	sojg	t1,clearEm	;loop while any left to do
	setom	recur	;turn it all on
	popj	17,	;and return to whatever started this

stop:	0
	outstr	[asciz "Oh my, I must stop (illegal UUO)"]
	halt	@stop

PushGo:	0
	push	17,.-1
goOn:	jrst	.+1
	outstr	[asciz "Oh my, Unset PUSHJ siulation"]
	halt	@PushGo
end;

