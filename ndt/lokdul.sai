 ENTRY LOKDUL;
BEGIN "LOKDUL"
INTEGER DULCHL,DULEOF,DULBLK;
INTEGER ARRAY DULARY[0:127];
DEFINE DULHSH=101;

SIMPLE PROCEDURE INIDUL; DULCHL_DULBLK_-1;
REQUIRE INIDUL INITIALIZATION;

INTERNAL SIMPLE STRING PROCEDURE LOKDUL(INTEGER PPN);

COMMENT READS DUL TO FIND CORRESPONDENCE TO PPN;

BEGIN INTEGER I; STRING ST;
SIMPLE STRING PROCEDURE BRKPPN(INTEGER PPN);
RETURN ("["&CVOS(PPN LSH -18)&","&CVOS(PPN LAND '777777)&"]");

IF DULCHL<0 THEN OPEN(DULCHL_GETCHAN,"DSK",'16,0,0,DULEOF,DULEOF,DULEOF);
IF DULBLK<0 THEN LOOKUP(DULCHL,"DUL.SYS[1,4]",DULEOF);
COMMENT ORIGINALLY DULEOF AND DULCHL ARE SET -1, FORCES 
	CONTINUED LOOKUPS IF DUL WAS NOT FOUND BEFORE;
IF DULEOF NEQ 0 THEN RETURN (BRKPPN(PPN));
USETI (DULCHL,I_PPN MOD DULHSH+1);
WHILE TRUE DO BEGIN "ARRSRC"
   IF I NEQ DULBLK THEN ARRYIN(DULCHL,DULARY[0],128);
   DULBLK_I;
   FOR I_0 STEP 3 UNTIL 127 DO
	IF DULARY[I]=PPN THEN DONE "ARRSRC" ELSE IF
	DULARY[I]=0 THEN RETURN (BRKPPN(PPN)) ELSE IF
	DULARY[I]<0 THEN DONE;
   USETI(DULCHL,I_DULARY[I] LAND '777777+1) END "ARRSRC";
COMMENT NEGATIVE IS THE LINK CONVENTION;

ST_CVXSTR(DULARY[I+1])&CVXSTR(DULARY[I+2]);
WHILE ST[INF FOR 1]=" " DO ST_ST[1 FOR INF-1];
COMMENT REMOVE TRAILING BLANKS;
RETURN("("&ST&")") END;

END "LOKDUL"

