ENTRY	BLOAT
TITLE	BLOAT
EXTERNAL .SKIP.	;SAIL: an integer variable. BLOAT stores result OBP here
EXTERNAL .INVOK	;SAIL: call a procedure parameter (from AC=TEMP)
EXTERNAL TREE.0	;the tree to interpret the bit stream from

OPDEF err. [5b8];SAIL: error opcode
C.LNUM__200	; character code for line number
?Z__0	; current input word	[or [?repeat count?],,repeat char]
?A__1	; input aobjn pointer	[input byte pointer]
?B__2	; -valid bit count in Z
?bs1__3	; ?xwd? (POINT size,) , bytes-per-word

?D__4	; current tree position

?CNT__5	; output free space count (bytes)
?OBP__6	; output byte pointer
?MSK__7	; ?? mask to test for repeat code (+C.LNUM for 7-bitters)
?OBC__10 ;number of remaining "output pseudo-bytes"

?TEMP__14; various values (a temp really) eg: working repeat count
?P__17	;push-down stack

INTOT:	0	;total number of bits consumed
SAVRPC:	0	;used in repeat code (repeat count b9+repeat char)
SAVBLK:	BLOCK 4
define sav.in <
	MOVEM	OBC,@-5(P)	;save number of pending pseudo-bytes
	DMOVEM	CNT,SAVBLK	;CNT: output free space count (bytes)
				;OBP: output byte pointer
	DMOVEM	bs1,SAVBLK+2	;bs1: POINT size, bytes-per-word
				;D: current tree position
				;MSK: f(bs1)
>
define res.in <
	HLRE	TEMP,A		;get word count
	CAIGE	TEMP,0		; and as long as any words at all
	 ADDM	TEMP,INTOT	;throw it into the pot of words given
	MOVE	OBC,@-5(P)	;recover number of pending pseudo-bytes
	DMOVE	CNT,SAVBLK	;CNT: output free space count (bytes)
				;OBP: output byte pointer
	DMOVE	bs1,SAVBLK+2	;bs1: POINT size, bytes-per-word
				;D: current tree position
	MOVE	MSK,MSKTAB(bs1) ;MSK: mask for repeat code (+C.LNUM:7's)
>
define sav.out <
	DMOVEM	Z,SAVBLK	;Z: input word [or rpt count,,rpt char]
				;A: input aobjn pointer
	DMOVEM	B,SAVBLK+2	;B: -valid bit count in Z
				;bs1: POINT size, bytes-per-word
				;MSK: f(bs1)
	MOVEM	OBC,@-5(P)	;OBC: number of pending pseudo-bytes
>
define res.out <
	DMOVE	B,SAVBLK+2	;B: -valid bit count in Z
				;bs1: POINT size, bytes-per-word
	HLRE	CNT,A		;CNT: -byte count
	IMULI	CNT,(bs1)	;=-words * bytes-per-word
	MOVE	OBP,bs1		;get byte-pointer left set up
	HRRI	OBP,(A)		;and complete the byte pointer
				;OBP: output byte pointer
	MOVE	MSK,MSKTAB(bs1) ;MSK: mask for repeat code (+C.LNUM:7's)
	DMOVE	Z,SAVBLK	;Z: input word [or rpt count,,rpt char]
				;A: input aobjn pointer
	MOVE	OBC,@-5(P)	;OBC: number of pending pseudo-bytes
>

BYPTAB:	POINT	5,7
	POINT	6,6		;points to beg-of-word, eff=bytes/word
	POINT	7,5
	POINT	9,4

MSKTAB__.-4	;indexed by bytes/word. yields non-char mask
		;[note:  could use 2000,2200,2000,2200]
		;also: could use 0,200,0,200 if code style is pos
	003000	;4 bytes/word [9-bitter]
	003600	;5 bytes/word [7-bitter; include line number bit]
	003700	;6 bytes/word [6-bitter]
	003740	;7 bytes/word [5-bitter] (?really?, we can handle it)
BLOAT:	;bitsconsumed_ BLOAT( @tot.Ibytes,
	;		input.AOBJN.pointer, more.in.procedure,
	;		output.AOBJN.pointer, more.out.procedure )
	MOVEI	OBP,0		;just in case an early error
	HLRE	bs1,tree.0
	MOVM	bs1,bs1
	CAIL	bs1,=8
	 XORI	bs1,1
	SUBI	bs1,5
	CAIG	bs1,8-5
	 JUMPGE	bs1,GOTCOD
ER.ARG:	ERR. 1,[ASCIZ "BLOAT: Illegal code value"]
	MOVEI	A,1
	JRST	RET.A

ER.IBG:	ERR. 1,[ASCIZ "Cannot start input"]
	MOVEI	A,2
	JRST	RET.A

ER.IRM:	ERR.	1,[ASCIZ "short on input room"]
	MOVEI	A,3
	JRST	RET.A

ER.ORM:	ERR.	1,[ASCIZ "short on output room"]
	MOVEI	A,4
	JRST	RET.A

GOTCOD:	MOVE	bs1,BYPTAB(bs1)
	SKIPGE	OBC,@-5(P)	;get number of "output pseudo-bytes"
	 JRST	[ERR. 1,[ASCIZ "Negative byte count?"]
		 MOVEI	A,0
		 JRST	RET.A]
	SKIPGE	@-2(P)		;output AOBJN pointer 
	 JRST	[sav.out	;if he gave us some output room
		 MOVE	A,@-2(P)	;fake a call that got the room
		 res.out	;and get a CNT and OBP
		 JRST	OUTSET]	;ok, now we have set up for output
	MOVEI	CNT,0		;start by running out of room
	SETZB	MSK,OBP		;in case he begins with repeats or lnums
				;make them unrecognizeable. DPB/IDPB
				;go nowhere though this byte pointer
OUTSET:	MOVE	D,TREE.0	;start at the top of the tree
	SKIPL	A,@-4(P)		;input AOBJN pointer
	 JRST	[sav.in
		 MOVE	TEMP,-3(P)	;where to get more input
		 PUSHJ	P,.INVOK	;call the passed routine
		 res.in
		 JUMPL	A,.+1
		 JUMPLE	OBC,.+1		;oh well, all done at start
		 JRST	ER.IBG]
	HLREM	A,INTOT
	JUMPG	OBC,BLKTOP
	HRROI	B,-=36		;fake a full word left
NICERT:	MOVEM	OBC,@-5(P)	;show how much we translated (all)
	HLRE	A,A		;get -number of words left
	SUB	A,INTOT		;--number given to start
	IMULI	A,=36		;convert to number of bits
	ADDI	A,=36(B)	;throw in the bits used in last word
				;giving total input bits consumed
RET.A:	MOVEM	OBP,.SKIP.	;return the location where we stopped
				;cant hurt even on error
	SUB	P,[XWD 7,7]
	JRST	@6(P)
BLKRED:	sav.in			;ran out of input bytes, go get more
	MOVE	TEMP,-3(P)	;where to get more input
	PUSHJ	P,.INVOK	;call the passed routine
	res.in
	JUMPL	A,BLKTOP	;if we actually got some bits, use them
	JRST	ER.IRM		;otherwise, say that we were cut off

NXTWRD:	AOBJP	A,BLKRED	;next input word, get space if needed 
BLKTOP:	HRROI	B,-=36		;set up a count of how bits we have in Z
	MOVE	Z,(A)		;get the bits themselves
	JRST	INDXGO		;and go use the first one

MOVLFT:	HLRE	D,TREE.0(D)	;move right along the tree
	JUMPL	D,ISLEAF	;and go do output if we are at a leaf
NXTBIT:	AOJGE	B,NXTWRD	;if no bits left, get another word
SHFTGO:	LSH	Z,1		;get the next bit to read
INDXGO:	JUMPL	Z,MOVLFT	;if the bit is on, move left on the tree
	HRRE	D,TREE.0(D)	;otherwise move right along the tree
	JUMPGE	D,NXTBIT	;if not a leaf, loop away

ISLEAF:	TRNE	D,(MSK)		;non-character?
	 JRST	SPECHN		;yes, a repetition count or line num bit
	AOJG	CNT,DEPORM	;make sure we have output room for char
DEPOGO:	IDPB	D,OBP
TOPGO:	SOJLE	OBC,NICERT
TOPTRE:	MOVE	D,TREE.0	;zoom to start at the top of the tree
	AOJL	B,SHFTGO	;this is like JRST NXTBIT, but faster
	AOBJN	A,BLKTOP
	JRST	BLKRED

SPECHN:	;handle special characters (including "line number" bits)
	;D has the special character, sign-extended
	;currently only specials are: (octal shown)
	;200	  [5&7 bit codes only] = set low bit of output word
	;400-416  [reserved for 8-bit] = set low 4 bits to s+1
	;-1:-21	  2^-(1+n) copies of preceding character (see next)
	;-21:-43  reserved for extended 2^n processing (code artifact)
	;-44:-100 3-(44+n) copies of preceding character [ie 3:31]
	;	  [note: r4=-45=-3, r8=-51=-4, r16=-61=-5, use -3,-4,-5]
	;-101:-177  unassigned currently, later will include "words"
IFN 0,<;for 8-bit tables we have 15 "line number" bits [0 presumed]
	;5 and 7-bit use character 200, 8-bit uses 400=1,401=2,...416=17
	;				may prefer combo 400,401,403,407
	TRNN	D,3160		;was special for line number bit(s)?
	 AOJA	D,[ANDI	D,17		;mask out all the character gunk
		 IORM	D,(OBP) 	;and set the proper low bits
		 SOJG	OBC,TOPTRE	;proceed unless that was the EOF
		 JRST	NICERT]		;in which case, lets stop
	MOVEI	TEMP,1		; bit to shift for repeat count
>;if we must cope with 8-bit tables
IFE 0,<;no 8-bit, the most we have left over is 1 bit [0 presumed] (5,7)
	MOVEI	TEMP,1		; bit to shift for repeat count
				;also used as the line number bit
	TRNN	D,3577		;was special for line number bit?
	 JRST	[IORM	TEMP,(OBP) 	;yes, set it and go read more
		 SOJG	OBC,TOPTRE	;unless that was the EOF
		 JRST	NICERT]		;in which case, lets stop
>;no 8-bit
;must be a repeat count
	MOVNI	D,1(D)
	LSH	TEMP,(D)
	JUMPLE	TEMP,[;must not be a repeat bit count (D=1-byt=35:...) 
			MOVEI	TEMP,-40(D);d=-(1+n), want 3-(44+n)=D-40
			CAILE	TEMP,37	;biggest allowed literal repeat
			 JRST	.+1	;oho! it is a repeat count
			ERR. 1,[ASCIZ "unknown special code"]
			JRST	TOPGO]
	LDB	D,OBP		;OK since we switch output w/ next char
REPMOR:	AOJG	CNT,REPROM	;go get more output room if needed
RDEPGO:	IDPB	D,OBP		;deposit a copy of the output byte
	SOJG	TEMP,REPMOR	;loop while we need more copies
				;now go loop (like JRST TOPGO, but fast)
	SOJG	OBC,TOPTRE	;unless that was the EOF
	JRST	NICERT		;in which case, lets stop

DEPORM:	sav.out			;ran out of chars during normal output
	MOVE	TEMP,-1(P)	;where to get more output room
	PUSHJ	P,.INVOK	;call the passed routine
	res.out
	AOJLE	CNT,DEPOGO	;if we got more room, go use it
	JRST	ER.ORM

REPROM:	;we need more output space in mid-repeat, save repeat byte,count
	TLNE	TEMP,777000	;but we have to save the output char
	 ERR. 1,[ASCIZ "not ready for big repeat count "]
	MOVEM	TEMP,SAVRPC	;save the repeat count away for later
	DPB	D,[POINT 9,SAVRPC,8]	;as well as the repeat character
	sav.out
	MOVE	TEMP,-1(P)	;where to get more output room
	PUSHJ	P,.INVOK	;call the passed routine
	res.out
	LDB	TEMP,[POINT 27,SAVRPC,35] ;recover the repeat count
	LDB	D,[POINT 9,SAVRPC,8]	;recover the repeat character
	AOJLE	CNT,RDEPGO	;got our extra room, lets output it
	JRST	ER.ORM

END
  