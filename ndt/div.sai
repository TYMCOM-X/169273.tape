begin "simulate Double Floating Divide"
REQUIRE "(SAILIB)SAIL.DEF" SOURCE!FILE;

define SAILISH=false	! do mSimDiv with SAIL code (not machine);
, doubleIntegers=false	! machine does DADD and DSUB;
;
long real simple procedure dConstant( integer word0, word1 );
	start!code  move 1,word0; move 2,word1;  end;

! constants:;
long real Bit0, Bit1, Bit2, Word1Bit0, FractionBitsX;
	simple procedure setConstants;
	begin
	bit0_ dConstant(1 rot -1,0);
	bit1_ bit0 rot -1;
	bit2_ bit1 rot -1;
	Word1bit0_ dConstant(0,1 rot -1);
	FractionBitsX_ dConstant(-1 lsh -9, -1);
	end;
 require setConstants initialization[0];


integer simple procedure highWord( long real val );
	start!code  move 1,val;  end;

integer simple procedure lowWord( long real val );
	begin!code  movei 1,val; move 1,1(1);  end;

simple long real procedure dran;
begin	long real r;
r_ran;
return( r + ran*2.@-27 );
end;

simple string procedure cb(reference long real X);
begin	string r; integer bp,w,d;
bp_ point(9,X,8);
getformat(w,d);
setformat(-3,0);
r_	cvos( ldb(bp)) & " " & cvos(ildb(bp)) & ",," &
	cvos(ildb(bp)) & " " & cvos(ildb(bp)) & " <=> " &
	cvos(ildb(bp)) & " " & cvos(ildb(bp)) & ",," &
	cvos(ildb(bp)) & " " & cvos(ildb(bp));
setformat(w,d);
return( r );
end;
integer simple procedure Split( reference long real toSplit );
begin	integer result;
if toSplit < 0
 then begin result_1 rot -1; toSplit_ -toSplit; end
 else result_0;
result_ result lor ldb( point(9,toSplit,8) );
ToSplit_ (ToSplit LAND fractionBitsX) ASH 7;
end;
long real procedure mSimDiv( long real AC, MEM );
begin "mSimDiv"
	long real RES, UA, UM;
	integer RESexp, UAexp, UMexp, bitsNeeded;
	label NODIVIDE;
if highWord(UM_MEM)=0 then go NODIVIDE;
if highWord(UA_AC)=0 then return(UA);

UAexp_ Split(UA);
UMexp_ Split(UM);
RESexp_ (if UMexp<0 then ((5 rot -3) xor UAexp) else UAexp)
	- ('777777 land (UMexp-'200));
if UA < UM
 then begin
	UA_ UA ash 1;
	RESexp_ RESexp - 1;
	if UA < UM then go NODIVIDE;
      end;
IFCR SAILISH THENC
while 0 = UM land Bit2 do begin UA_ UA ash 1; UM_ UM ash 1 end;
ELSEC
  start!code label got,ok;
	move	3,UM;
	tlne	3,'100000;
	 jrst	ok;
	jffo	3,got;
	got: dmove 0,UA; dmove 2,UM;
		ASHC	0,-2(4);
		ASHC	2,-2(4);
	     dmovem 0,UA; dmovem 2,UM;
	ok:
  end;
ENDC

IFCR SAILISH THENC
 RES_ 0;
 bitsNeeded := 27+36;	! extra bit is for rounding; 
   do begin "a oneBit"	integer shift;
	RES := RES lor Bit0;
	 start!code	! UA := UA - UM;
	  dmove UA; dmove 2,UM;
	  sub 2; sub 1,3; tlze 1,'400000; subi 1;
	  dmovem UA;
	 end;
	if UA=0 then done;
	for shift := 1 step 1 while (UA := UA ash 1) < UM do;
	RES := RES rot shift;
	bitsNeeded_ bitsNeeded - shift;
      end "a oneBit"
 until bitsNeeded leq 0;
ELSEC
start!code	define r=0,rH=0,rL=1, a=2,aH=2,aL=3, m=4,mH=4,mL=5;
		define bts=6, jf0=7,jf1=8;
		label oneBit,shift,rotit,done;
	dmove a,UA; dmove m,UM;
	setzb	rH,rL;		! RES_ 0;
	movei	bts,27+36;	! bitsNeeded_ 27+36;
				! extra bit is for rounding;
oneBit:				! do begin "a oneBit"	integer shift;
	tlo	rH,'400000;	! RES := RES lor Bit0;
  IFCR doubleIntegers THENC
	dsub	a,m;
  ELSEC	
	sub	aH,mH;
	sub	aL,mL;
	tlze	aL,'400000;
	 subi	aH,1;
  ENDC
	move	jf0,aH;		!=if UA=0 then done;
	jffo	jf0,shift;	!=for shift := 1 step 1 ;
	jumpe	aL,done;	!=  while (UA := UA ash 1) < UM do; 
	exch	aH,aL;		!=RES := RES rot shift; 
	rotc	r,35;		!=bitsNeeded_ bitsNeeded - shift;
	subi	bts,35;		! notice full-word shift and do it;
	move	jf0,aH;		! (35 bits since ASHC, not LSHC);
	jffo	jf0,shift;
shift:	ashc	a,-2(jf1);	! jf1-2 is bits to shift to align high;
	camn	aH,mH;		! skip if UA < UM;
	 camge	aL,mL;
	  camle	aH,mH;
	   soja	jf1,rotIt;	! UA geq UM;
	   ashc	a,1;
rotit:	subi	bts,(jf1);	! note -1: smallest jffo result is 1;
	rotc	r,-1(jf1);	
	aojg	bts,oneBit;	!=end "a oneBit" until bitsNeeded leq 0;
done:	dmovem	r,RES;		! note that UA and UM are not used;
	movem	bts,bitsNeeded;
end;
ENDC

 start!code	! RES := fiddle(RES rot bitsNeeded);
	label valSet, bclrGo, finish;
  dmove RES; 
  move 2,bitsNeeded; rotc (2); 	! high word OK, low word=low 36 bits;
  hrrz	2,RESexp;	! now get the eventual exponent;
  rot 1,-1; 	! move the rounding bit to low sign bit;
  jumpge 1,valset;	! if don't need to round, fraction is correct;
  aojn	1,bclrGo;	! if round stays in low-order word, still OK;
  addi	1;		! woops -- carry into high-order word;
  tlnn	'4000;		! did we carry out of fraction field?;
   jrst	valset;		!  nope -- value is just fine now;
  ashc	-1;		! yup. (result is 2^n). divide fraction by 2;
  aoja	2,valset;	! and raise exponent by 1 to compensate;
bclrGo:	! notice: this can be done spuriously without any problem;
  tlz	1,'400000;	! clear that rotten bit.;
valSet:
  lsh	2,9;		! put exponent in proper place;
  tlo	'1000(2);	! or in the exponent field (? why +1?);
  dmovem RES; 
 end;
if RESexp < 0 then RES_ -RES;
return(RES);
NODIVIDE: print(" [Nodiv] ");
return(AC);
end "mSimDiv";
long real procedure simdiv( long real AC, MEM );
begin "simdiv"
	long real RES, UA, UM;
	integer RESexp, UAexp, UMexp, bitsNeeded;
	label NODIVIDE;
if highWord(UM_MEM)=0 then go NODIVIDE;
if highWord(UA_AC)=0 then return(UA);

UAexp_ Split(UA);
UMexp_ Split(UM);
RESexp_ (if UMexp<0 then ((5 rot -3) xor UAexp) else UAexp)
	- ('777777 land (UMexp-'200));
if UA < UM
 then begin
	UA_ UA ash 1;
	RESexp_ RESexp - 1;
	if UA < UM then go NODIVIDE;
      end;
RES_ 0;
while 0 = UM land Bit2
   do begin
	UA_ UA ash 1;
	UM_ UM ash 1;
      end;

bitsNeeded := 27+36;	! extra bit is for rounding; 
   do begin "a oneBit"	integer shift;
	RES := RES lor Bit0;
	 start!code	! UA := UA - UM;
	  dmove UA; dmove 2,UM;
	  sub 2; sub 1,3; tlze 1,'400000; subi 1;
	  dmovem UA;
	 end;
	if UA=0 then done;
	for shift := 1 step 1 while (UA := UA ash 1) < UM do;
	RES := RES rot shift;
	bitsNeeded_ bitsNeeded - shift;
      end "a oneBit"
 until bitsNeeded leq 0;

 start!code	! RES := fiddle(RES rot bitsNeeded);
	label valSet, bclrGo, finish;
  dmove RES; 
  move 2,bitsNeeded; rotc (2); 	! high word OK, low word=low 36 bits;
  hrrz	2,RESexp;	! now get the eventual exponent;
  rot 1,-1; 	! move the rounding bit to low sign bit;
  jumpge 1,valset;	! if don't need to round, fraction is correct;
  aojn	1,bclrGo;	! if round stays in low-order word, still OK;
  addi	1;		! woops -- carry into high-order word;
  tlnn	'4000;		! did we carry out of fraction field?;
   jrst	valset;		!  nope -- value is just fine now;
  ashc	-1;		! yup. (result is 2^n). divide fraction by 2;
  aoja	2,valset;	! and raise exponent by 1 to compensate;
bclrGo:	! notice: this can be done spuriously without any problem;
  tlz	1,'400000;	! clear that rotten bit.;
valSet:
  lsh	2,9;		! put exponent in proper place;
  tlo	'1000(2);	! or in the exponent field (? why +1?);
  dmovem RES; 
 end;
if RESexp < 0 then RES_ -RES;
return(RES);
NODIVIDE: print(" [Nodiv] ");
return(AC);
end "simdiv";
long real dvd,dvs,quo,rsp,xrsp;
integer rSeed, chr;

string s,t,u,v;
integer i,j,k,l,m,n; 
real a,b,c,d;
long real w,x,y,z;
a_b_c_d; w_x_y_z; s_t_u_v; i_j_k_l_m_n;
usererr(0,1,"Set breakPoints","B");
ran( rseed_ call(0,"MSTIME") );
ttyup(true);
while true
   do begin	string txt;
	print( crlf & "divide: " ); txt_inchwl;
	if equ(txt,"BUG") then begin usererr(0,1,txt); continue; end;
	if equ(txt,"BYE") or equ(txt,"EXIT") or equ(txt,"QUIT")
	 then done;
	if equ(txt,"ARGS")
	 then begin 
		print(dvd,"/",dvs,crlf,cb(dvd),"  /  ", cb(dvs));
		continue; 
	      end;
	if length(txt)=0 or "?"=txt or equ(txt,"HELP")
	 then begin 
		print("BUG,BYE,ARGS,HELP,RAN, or number / number.");
		continue; 
	      end;
	if equ(txt,"RAN")
	 then print( " Trying: ", dvd_dran, " / ", dvs_dran, crlf )
	 else begin
		dvd_lrealscan(txt,!skip!);
		dvs_lrealscan(txt,chr);
	      end;
	quo_dvd/dvs;
	rsp_ simdiv(dvd,dvs);
	xrsp_ msimdiv(dvd,dvs);
	if chr neq "!" and rsp=quo=xrsp then print("OK")
	 else print(	"Real: ", cb(quo), "  //  ", quo, crlf, 
			"sSim: ", cb(rsp), "  //  ", rsp, crlf,
			"mSim: ", cb(xrsp),"  //  ", xrsp );
      end;
end "simulate Double Floating Divide"
$
    