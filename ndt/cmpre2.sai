begin "squash"
require "(sailib)sail.def" source!file;
define elif={else if}, #noerr='10000;
require "squish.dcl" source!file;
require "sqx.dcl" source!file;
require "bltz.dcl" source!file;
require "tree.dcl" source!file;
	!get!module(mapping);

! require "squish.rel" load!module, "tree.rel" load!module; 
! require "sqx.rel" load!module, "bltx.rel" load!module;

simple integer procedure BlockSize( integer chan );
start!code 	define A=1,temp='14;
	move	temp,chan;
	hrli	temp,'10;
	movei	a,0;
	chanio	temp,a;
	movei	a,(a);
end;

simple string procedure reply(string prompt);
while true 
   do begin	string reply;
	outstr(prompt);
	reply_inchwl;
	if !skip! neq #cr then outstr(crlf);
	if length(reply)=0 and !skip!='7	! bell;
	 then outchr("*")
	elif equ(reply,"*BUG*") and !skip!='7	! bell;
	 then usererr(0,1,"You rang")
	 else return(reply);
      end;

simple boolean procedure agree( string proposition );
begin	string s;
while true 
   do if equ(s_reply(proposition), "YES"[1 for length(s)]) 
      or equ(s, "NO"[1 for length(s)]) 
	then return("N" neq s)
	else outstr("Reply YES or NO" & crlf);
end;
PROCEDURE adump( INTEGER Words );
begin	integer ch, eof;
	string file;
OPEN(ch_getchan, "DSK", #noerr+8, 0,4, 0,0,eof_0);
while true
   do begin 	boolean flag;
	flag_ true;
	if length( file_reply("DUMP data to File [DATA0.TMP]: ") )=0
	 then file_ "DATA0.TMP";
	flag_ true;
	if equ(file, "HELP") or EQU(file,"?")
	 then print( "HELP, SKIP IT, or file name (<cr> gets DATA.TMP)
")
	 elif equ(file,"SKIP IT") then done
	 else enter(ch,file,flag);
	if not flag
	 then begin
		wordout(ch, cvsix("DUMP0"));
		wordout(ch, Words);
		forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
		wordout(ch, arrinfo(ar,1));
		wordout(ch, arrinfo(ar,0)); } endc
		forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
		arryout(ch, ar[arrinfo(ar,1)], arrinfo(ar,0)); } endc
		wordout(ch, cvsix("EOF"));
		print("written");
		done;
	      end;
      end;
release(ch);
end;

integer PROCEDURE aread( INTEGER ch );
begin	integer words, base, len;
	boolean flag;
lookup( ch, reply("READ data from File: "), flag );
if flag
 then begin print("Cannot find file, start over",crlf); return(-1); end;
if wordin(ch) neq cvsix("DUMP0")
 then begin usererr(0,1,"bad version"); return(-2) end;
words_ wordin(ch);
forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
	if (ar[0]_ wordin(ch)) < arrinfo(ar,1)
	or (ar[1]_ wordin(ch)) + ar[0] - 1 > arrinfo(ar,2) 
	 then begin usererr(0,1,"bad version"); return(-3) end;
}endc
forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
	base_ ar[0]; len_ ar[1]; arrclr(ar); 
	arryin( ch, ar[base], len ); 
}endc
if wordin(ch) neq cvsix("EOF")
 then begin usererr(0,1,"bad version"); return(-4) end;
return(words);
end;
PROCEDURE bdump( INTEGER vWords, code; INTEGER ARRAY ar );
begin	integer ch, eof;
	string file;
OPEN(ch_getchan, "DSK", #noerr+8, 0,4, 0,0,eof_0);
while true
   do begin 	boolean flag;
	if tree[0]+2 > arrinfo(tree,2)
	 then begin usererr(0,1,"oh me oh my!");
		tree[0]_ arrinfo(tree,2) - 2;
		end;
	if length( file_reply("DUMP data to File [DATA.TMP]: ") )=0
	 then file_ "DATA.TMP";
	flag_ true;
	if equ(file, "HELP") or EQU(file,"?")
	 then print( "HELP, SKIP IT, or file name (<cr> gets DATA.TMP)
")
	 else if equ(file,"SKIP IT") then done
	 else enter(ch,file,flag);
	if not flag
	 then begin	integer w1, len;
		wordout(ch, cvsix("DUMP1"));
		wordout(ch, vWords);
		wordout(ch, code);
		wordout(ch, w1_arrinfo(ar,1));
		wordout(ch, len_arrinfo(ar,0));
		arryout(ch, ar[w1], len);
	
		wordout(ch, cvsix("TREE"));
		arryout(ch, tree[0], tree[0]+2+1);

		wordout(ch, cvsix("FREQ"));
		wordout(ch, w1_arrinfo(freq,1));
		wordout(ch, len_arrinfo(freq,0));
		arryout(ch, freq[w1], len);

		wordout(ch, cvsix("EOF"));
		print("written");
		done;
	      end;
      end;
release(ch);
end;
r!p(map1) procedure setupRing( integer chan, lookAhead );
begin	r!p(map1) bHead, bTail, pg;
	integer pageNum;
lookAhead_ lookAhead max 2;
bHead_ bTail_ map1Cr( 0, 511 );
map1:up[bTail]_ bHead;
for pageNum_ 1 step 1 until lookAhead
   do begin
	if 0 > getmap( bHead, "R", chan, pageNum )
	 then begin
		map1:up[bTail]_ null!record;
		done;
	      end;
	map1:ui[bHead]_ pageNum;
	bTail_ bHead;
	bHead_ map1Cr( 0, 511 );
	map1:up[bHead]_ map1:up[bTail];
	map1:up[bTail]_ bHead;
      end;
if map1:up[bHead]=null!r
 then begin
	getmap( bHead, "Z", 0,0);
	return(null!r);
      end;
return(bHead);
end;
integer procedure analyze(integer chan; reference integer eof);
! returns the number of words needed;
BEGIN
	r!p(map1) bHead, bTail;
	integer pageNum, abjp;
	own safe integer array buf[0:511];
if null!r = Bhead_ setupRing( chan, 4 ) then return(0);
BTail_ Bhead;
while null!r neq map1:up[bTail] neq bHead do bTail_ map1:up[bTail];
pageNum_ map1:ui[bTail] + 1;
while true
   do begin
	if map1:up[bTail]
	 then if 0 > getmap( bHead, "R", chan, pageNum_ pageNum + 1 )
		 then map1:up[bTail]_ null!record
		 else bTail_ bHead
	 else getmap( bHead, "U", 0,0 );
	bHead_ map1:up[bHead];
	if map1:up[bHead] 
	 then begin 
		abjp_ -512 lsh 18 + location(map1:a[bHead][0]);
		frq1p( abjp ); 
		frq1px( abjp );
	      end
	 else done;
      end;
useti(chan, pageNum*4 + (1-4-4));
arryin(chan, buf[0], 513);
getmap( bHead, "U", 0,0 );
abjp_ -eof lsh 18 + location(buf[0]);
frq1p( abjp ); frq1px( abjp );
if not eof then usererr(0,1,"Hunh?? more words past last page");
return( (pageNum-2) * 512 + !rh(eof) )
end;
define #len=100;
record!class bf (integer array a; r!p(bf) nxt );
r!p(bf) tail;

integer procedure outBuffer;
begin
	integer array buf[0:#len];
	integer retval;
	r!p(bf) nxt;
retval_ -#len lsh 18 + location(buf[0]);
nxt_ new!record(bf);
memory[location(buf)] swap memory[location(bf:a[nxt])];
if tail
 then begin
	bf:nxt[nxt]_ bf:nxt[tail];
	bf:nxt[tail]_ nxt;
      end
 else bf:nxt[nxt]_ nxt;
tail_ nxt;
return(retval);
end;

integer procedure recover;
begin
	integer retval;
if tail
 then begin
	integer array dump[0:0];
	memory[location(dump)] swap memory[location(bf:a[tail])];
      end
 else begin usererr(0,1,"Oops, read twice!"); return(0); end;
tail_ bf:nxt[tail];
return( if tail
	 then -#len lsh 18 + location( bf:a[tail][0] )
	 else 0 )
end;
procedure attempt(string nam; integer tCod, ch; reference integer eof);
begin	integer ouch;
	r!p(map1) holder, head, tail;

	procedure shutDown;
	begin
	if holder then getmap(holder, "Z",0,0);
	while head 
	   do begin getmap( head, "Z", 0,0 ); head_ map1:up[head]; end;
	if ouch > -1 then release(ouch);
	close(ch);
	end;
	cleanup shutDown;

	integer iPage;

	integer procedure page;
	 begin
	 if iPage neq map1:ui[tail] then usererr(0,1,"page error");
	 if map1:up[tail]
	  then if 0 < getmap( head, "R", ch, iPage_ map1:ui[tail]+1 )
		 then map1:ui[tail_ head]_ iPage
		 else begin map1:up[tail]_ null!r; iPage_ iPage-1; end
	  else getmap( head, "Z", 0,0 );
	 if head_ map1:up[head]
	  then if map1:up[head]
		then return( (-512 lsh 18) + location(map1:a[head][0]) )
		else begin	integer array buf[0:'200];
				integer lastBlock;
			useti( ch, lastBlock_ blockSize(ch) );
			arryin( ch, buf[0], '201 );
			if not eof then usererr(0,1,"Fatal file size");
			return( -((lastBlock-1) lsh 7 land '777 + eof)
				lsh 18 + location(buf[0]) )
		     end;
	 return(0)
	 end;

	integer oPage;

	integer procedure moreOutputRoom;
	if 0 < getmap(holder, "N", ouch, oPage_ oPage + 1 )
	 then return(-512 lsh 18 + location(map1:a[holder][0]))
	 else begin 
		usererr(oPage,3,"Cannot make page number "); 
		return(0);
	      end;

	integer ln, code, passed, outBase; boolean flag; string FileNam;

ouch_-1; oPage_ 0;
do code_ if length( fileNam_ reply("Encoding [" & cvs(tCod) & "]: ") )
	  then cvd( fileNam )
	  else tCod
 until 5 < abs code < 10 and abs code neq 8;

  do  begin
	if length( fileNam_reply("File to squish [" & nam & "]: ") )=0
	 then fileNam_ nam;
	if equ( fileNam, "FORGET IT") then return;
	lookup( ch, fileNam, flag );
      end
 until not flag;
nam_ fileNam;

open( ouch_getchan,"DSK",#noerr+'17, 0,0, 0,0,eof );
  do  begin
	if equ( fileNam_reply("File to squish " & nam & " onto: ")
		, "FORGET IT") then return;
	lookup( ouch, fileNam, flag );
	if flag or agree("Superceding old file OK?")
	 then begin close(ouch); enter( ouch, fileNam, flag ); end
	 else flag_ true;
      end
 until not flag;
holder_ map1cr(0,511);
if code = tCod
 then ln_ tree[ tree[0] + 1 ]
 else case abs code of
   begin
    [6]	ln_ if code>0 then pass1b( A.6 ) else pass1b( B.6 );
    [7]	ln_ if code>0 then pass1b( A.7 ) else pass1b( B.7 );
    [9]	ln_ if code>0 then pass1b( A.9 ) else pass1b( B.9 );
    [else] begin print("Unacceptable code = ", code ); return end
   end;
print( tree[0], "+", ln-tree[0], " M=", mangle(code) );
if 512*2 < tree[0]+1 then usererr(0,0,"tree hopelessly large");

if null!r = head_ setupRing( ch, 4 ) then return;
tail_ head;
for iPage_ 0 step 1 while head neq map1:up[tail] neq null!r 
   do tail_ map1:up[tail];
if 0 leq outBase_ moreOutputRoom then return;
map1:a[holder][0]_ code lsh 18 + tree[0];
arrblt( map1:a[holder][1], tree[1], 511 min (tree[0]+1) );
if 511 < tree[0]+1
 then begin
	if 0 leq outBase_ moreOutputRoom then return;
	arrblt(map1:a[holder][0], tree[512], tree[0]+1-511 );
      end;
passed_ (tree[0] + 2) land '777;
print( crlf & "squish: ", 
	squish( code, 0,page, 
		outBase + passed + passed lsh 18, moreOutputRoom ),
	" used ", oPage, " pages of output file ", fileNam, crlf );
end;
CONTEXT best;

	INTEGER Code, words;
	STRING currentFile;
! typical use:;
	PROCEDURE try( integer codeVal; INTEGER ARRAY ar );
	 BEGIN INTEGER wrd, tree0;
	 code_ codeVal;
	 wrd_ pass1b(ar);
	 tree0_ tree[0];
	 print("Code ", code, ": ", wrd, " words = ", 
		tree0, " tree + ", wrd - tree0, " file",
!	" [", tree[tree0+2] % 36, "+", tree[tree0+2] mod 36, " bits]", ;
		", ", tree[tree0+1], " `bytes'. " );

	 IF 0 < wrd < words  AND  tree0 < '1000+'200-1
	  THEN BEGIN
		print( " (*)" );
		words_ wrd;
		REMEMBER code, words, tree, freq IN best;
	       END

	 ;if equ(reply(" ?"),"DUMP") then bdump(wrd, code, ar)

	 END;

	INTEGER size, abjp, chan, eof;
Comment	... set up chan mode 8(='10) with eof vbl, choose blocksize ...;
ttyup(true);
open(chan_getchan,"DSK", #noerr+8, 4,0, 0,0,eof);
while true 
   do begin "one file"
	label optimize;
	String response; boolean flag;

	lookup(chan, response_ reply(" File to check: "), flag);
	if flag
	 then begin	integer tmp;
		if equ( response, "AGAIN") then go optimize
		elif equ( response, "ATTEMPT")
		 then attempt( CurrentFile, code, chan, eof )
		elif equ( response, "D.WRITE") then adump(size)
		elif equ( response, "D.READ")
		 then if 0 < tmp_ aread(chan)
			then begin size_ tmp; go optimize end
			else print("Cannot do the read: ", tmp)
		elif equ( response, "EXIT") or equ( response, "QUIT") 
		 then call(1,"EXIT")
		elif equ( response, "BAIL") then usererr(0,1,"OK","B")
		 else print("Sorry, file, D.READ, D.WRITE, or QUIT only."); 
		continue 
	      end
	 else CurrentFile_ response;
	ARRCLR(a.6); ARRCLR(a.7); ARRCLR(a.9); 
	ARRCLR(b.6); ARRCLR(b.7); ARRCLR(b.9); 
	size_ analyze(chan,eof);
	close(chan);
	optimize:
	print( CurrentFile, " is a ", size, "-word file
");
	Code_ 0; words_ size+4;		comment for a little overhead;
	tree[0]_ 0;
	REMEMBER code, words IN best;
	try(6, a.6); try(7, a.7); try(9, a.9); 
	try(-6,b.6); try(-7,b.7); try(-9,b.9); 

	RESTORE all FROM best;
	print("
Best encoding is ", Code, " at about ", words, " words.
");
      end "one file"
END


   