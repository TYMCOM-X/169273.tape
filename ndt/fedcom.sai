begin "fedcom"
COMMENT parameters: ; define base#max=100, expand#size=200;

require "(sailib)sail.def" source!file;
define routine="simple procedure", elif="else if";
define	homeUp={(#esc&"H")} 
,	eraseLine={(#esc&"K")} 
,	eraseScreen={(#esc&"J")}
,	homeDown={('15&'12&'12&'12&"<Home Down>"&'15&'12)}
;

integer lineBreak, FileSplit, Pretty;
  simple procedure setup; 
	begin
	setbreak(FileSplit_getbreak, "_" & #cr, null, "IS");
	setbreak(lineBreak_getbreak, #lf&#ff,"","IS");
	setbreak(pretty_getbreak, '177 & """"
		FORC ##=0 STEPC 1 UNTILC #sp-1 DOC {&##}ENDC,null,"IR");
	end;
  require setup initialization;

integer cnt,brk,eof;

integer routine getinput(string prompt; reference string fileName);
begin	integer chan; boolean flag;
open(chan_getchan,"DSK",'10000, 4,0, cnt,brk,eof);
  do  begin
	outstr(prompt);
	lookup(chan,inchwl,flag);
      end
 until not flag;
return(chan);
end;

string text, lastRead;

boolean routine reads( integer chan, table );
	begin lastRead_ text_ input(chan, table); return(not eof); end;

integer line 			! current positions in correction file;
;

routine pause;
      begin
	print( crlf & "Type anything to proceed: " );
	if inchrw=#cr then inchrw;
      end;

routine failedAssert( string test, why );
      begin	integer b; string lr;
	lr_ lastRead;
	print( homeDown, "Error on ", 
		line, ": """, scan(lr,pretty,b), """" );
	while length(lr)
	   do if """" = b_lop(lr)
		 then print( null & b, scan(lr,pretty,b), """" )
		 else begin	string s;
				preset!with "tab","lf","vtab","ff","cr";
				own string array nams[#ht:#cr];
			if #ht leq b leq #cr
			 then print( " & ", nams[b] )
			 else print(" & '", cvos(b));
			if length( s_ scan(lr,pretty,b) )
			 then print( " & """, s, """" );
		      end;
	print( ", Brk='", cvos(Brk), crlf, test );
	if length(why) then print( " {{", why, "}}" );
	pause;
      end;
define assert(condition,reason)={
if condition then else failedAssert( cvps(condition), cvps(reason) )};
	integer baseLine, Column;
string routine newLine; begin Column_ 0; return(crlf); end;

routine say(integer char, overs(0));
begin	string output;
output_ char & cvs(baseLine);
if 0 neq overs neq baseLine
 then output_ outPut & "!" & cvs(overs-baseLine+1);
print( output, (if 72 < Column_ Column + 1 + length(output)
		then newLine else #sp) );
end;
string CorrectionFile, baseFile, producedFile;
boolean	fileStarted		! true iff inside a file;
;
integer	LastCommand 		! "line" at last command;
;
integer delete			! if non-zero, beginning of del command;
,	lastCopied		! last line deleted (or insert point);
;
integer insertions		! line count of current insertion;
,	Pages			! number of Page marks in insertion;
,	lastPage		! pos of last page mark (if pages>0);
;
integer producedLines		! position in result file;
;
integer copyChan		! channel for output;
;
integer leadLines		! top lines to display;
,	trailLines		! bottom lines to display;
;
boolean	ShowNumbers		! if true, don't show insertion numbers;
;

routine startFile( string Result!Base );
begin	integer brChar;
assert(not fileStarted,"No multi-files yet");

baseFile_ scan( Result!base, FileSplit, brChar );
assert(length(baseFile) and brChar="_");

producedFile_ scan( Result!base, FileSplit, brChar );
assert(length(producedFile) and brChar=#cr and length(Result!base)=0);

print(HomeUp & EraseScreen, line, #ht & #ht, CorrectionFile, "  ", 
	baseFile, " -> ", producedFile, 
	"  [L=", leadLines, ", T=", TrailLines,
	(if showNumbers then ", " else ", Un-"), "Numbered]" & crlf );
open(copyChan_ getchan, "DSK",0, 0,4, 0,0,0);
do begin print("Output file: "); enter(copyChan,inchwl,brChar); end
 until not brChar;
insertions_ producedLines_ lastCopied_ delete_ LastCommand_ 0;
fileStarted_ true;
end;
record!class expansion (string array a; record!pointer(expansion) next);
record!pointer(expansion) TopArr, baseArr;
integer currentTop;

procedure expandStorage;
begin	record!pointer(expansion) newTop;
newTop_ (if TopArr then expansion:next[TopArr] else baseArr );
if newTop=null!record
 then begin string array moreData[currentTop+1:currentTop+expand#size];
	newTop_ new!record(expansion);
	if TopArr
	 then expansion:next[TopArr]_ newTop
	 else baseArr_ newTop;
	memory[location( moreData )]
		swap memory[location( expansion:a[NewTop] )];
      end;
assert( arrinfo( expansion:a[NewTop], 1 ) - 1 = currentTop );
Toparr_ newTop;
currentTop_ arrinfo( expansion:a[TopArr], 2 );
end;

boolean routine passLines( string array lines; integer stopSize );
begin	integer top, n;
top_ stopSize min arrinfo( lines, 2 );
for n_ arrinfo(lines, 1) step 1 until top 
   do cprint( copyChan, lines[n] );
return( top < stopSize );
end;
string array baseArray[1:base#max];

routine insertion;
begin	string storage;
assert(fileStarted and lastCopied > 0);
if (insertions_ insertions + 1) > base#max
 then begin 
	if insertions > currentTop then expandStorage;
	expansion:a[topArr][insertions]_ LastRead & brk;
      end
 else baseArray[insertions]_ LastRead & brk;
if brk=#ff
 then begin
	assert(length(LastRead)=0,"Pages are their own lines");
	Pages_ Pages + 1; lastPage_ insertions;
      end;
end;

routine printLine( integer index; string text );
begin
if ShowNumbers then print( index, ": " );
print( (if equ(text,#ff) then "{{page}}" & crlf else text) );
end;

boolean routine confirmChange;
while true do
begin	integer c;	! could show deletion here;
print( "[Confirm change]" );
if #sp = (c_inchrw) or c="x" or c="X" then return(c=#sp);
if #cr = c then begin inchrw; return(true); end;
print(crlf & "Type Space to accept, or X to reject  ");
end;
routine showem( integer first, last );
begin	own r!p(expansion) ptr;
	integer stop;
if first < base#max
 then begin
	stop_ last min base#max;
	for first_ first step 1 until stop
		do printLine( first, baseArray[first] );
	if first > last then return;
      end;
ptr_ baseArr;
while first > arrinfo( expansion:a[ptr], 2 )
   do ptr_ expansion:next[ptr]; 
while first leq last
   do begin 
	stop_ last min arrinfo( expansion:a[ptr], 2 );
	for first_ first step 1 until stop
	   do printLine( first, expansion:a[ptr][first] );
	ptr_ expansion:next[ptr]; 
      end;
end;

routine showInsertions;
if leadLines + trailLines + 1 geq insertions	! 1 for the ... ;
 then showEm( 1, insertions )
 else begin
	if leadLines > 0 then showEm( 1, leadLines );
	print( "...", crlf );
	if trailLines > 0
	 then showEm( insertions - trailLines + 1, insertions );
      end;
routine endInsertion;
begin
assert(fileStarted);
assert( lastCopied>0 or insertions=delete=pages=0, "Insert where");
if insertions=0=delete then begin lastCommand_ line; return end;

print( homeUp, lastCommand, (if insertions=0 then " Delete "
			else if delete then " Replace" else " Insert "),
	crlf & "Base line ", lastCopied );
if delete > lastCopied then print(":", delete);
if insertions
 then begin
	if pages
	 then print(" [", pages, "P+", insertions-LastPage, "=")
	 else print(" [");
	print( insertions, " inserted lines] " & EraseScreen & crlf );
	showInsertions;
      end
 else print( EraseScreen & crlf );
if confirmChange
 then begin
	cprint( copyChan, "-", lastCopied );
	if delete
	 then cprint( copyChan, ",", delete, crlf )
	 else cprint( copyChan, crlf );
	if passLines( baseArray, insertions )
	 then begin
		topArr_ baseArr;
		while passLines( expansion:a[topArr], insertions )
		   do topArr_ expansion:next[topArr]; 
	      end;
	producedLines_ producedLines + insertions;
	if delete
	 then producedLines_producedLines + lastCopied - delete + 1;
      end;
topArr_ null!record; currentTop_ base#max;
insertions_ Pages_ delete_ 0;
LastCommand_ line;
end;

routine shutFile; 
begin endInsertion; release(copyChan); fileStarted_ false; end;
routine passon;	cprint( copyChan, LastRead & brk );

routine commandLine;
begin	integer nBreak; 
if text="!"
 then begin startFile( text[2 to inf] ); passon; return; end;

endInsertion;

if not ("0" leq text leq "9")
 then begin assert(0,"Numeric command expected"); return end;

lastCopied_ baseLine_ intscan(text,nBreak);

if nBreak=":"	! checkPoint;
 then begin lastCopied_ -lastCopied; passon; return; end;

delete_ (if nBreak="," then intscan(text,nBreak) else 0);

if length(text)=0=nBreak
or nBreak=#cr and length(text)=1 then return;

assert(length(text)=0=nBreak or nBreak=#cr and length(text)=1);
print(crlf, "UnKnown trailer: ", lastCopied, "[", delete, "]", 
	", nBreak= '", cvos(nBreak), ", length(text)=", length(text),
		": ...""", text[1 for inf-1], """.");
pause;
end;
routine readOptions;
while true do
begin	string reply;
	integer ch;
print( crlf, "Options are currently: Lead=", LeadLines, 
	", Trail=", TrailLines, 
	(if showNumbers then ", Numbered" else ", Unnumbered"),
	crlf & "Change: ");
if length(reply_ inchwl)=0 then return;
if !skip! neq #cr then outstr(crlf);
case ch_ lop(reply)
of begin
   ["L","T"] begin integer num;
		num_ intscan( reply_ reply & #sp, brk );
		if brk < 1 or num < 0
		 then print("This option needs a positive number.")
		 else if ch="L"
			then LeadLines_ num
			else TrailLines_ num;
	      end;
   ["U"] showNumbers_ false;
   ["N"] showNumbers_ true;
   ["Q"] call(0,"EXIT");
   [else] print(" 
	This program edits CAM / FED files.

Type <cr> to accept the options, QUIT to exit, UNNUMBERED, NUMBERED,
or LEAD or TRAIL followed by the number of lines.

")
   end;
end;
	integer inch;
cnt_ 300;
LeadLines_ 12; TrailLines_ 8; ShowNumbers_ true;
while true 
   do begin	boolean oldTty;
	currentTop_ base#max; TopArr_ null!record;
	oldTty_ ttyup(true);
	readOptions;
	ttyup( oldTty );
	inch_ getinput("COR file: ", CorrectionFile);
	fileStarted_false;
	for line_ 1 step 1 while reads(inch,lineBreak)
	 do if brk=#ff and length(text)
	  then print(crlf, line, " {unexpected page}: ", text, newLine )
	  else if lop(text)="-" and text neq "-"
		 then commandLine
		 else insertion;
	shutFile;
	print(crlf & crlf, line-1, " Correction lines in all, ", 
			producedLines, "-line result file" & crlf );
	release(inch);
      end;
end "fedcom" ;
 