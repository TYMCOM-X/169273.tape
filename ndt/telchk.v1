begin "telecopy check"
require 1 version;
require "(SAILIB)SAIL.DEF" source!file;
!get!module(extend);
!get!module(append);

integer comFile		! channel for reading ###TEL.COM;
,	outFile		! channel for reading ###TEL.OUT;
,	log		! output channel for summaries of teleco files;
,	defaultppn	! GFD'ed ppn;
,	brk		! break character for comFile and outFile;
,	eof		! end-of-file for comFile and outFile; 
;
boolean	deleteFiles	! true: delete nnnTEL files else make em temps;
;
integer aLine		! break table for reading a non-blank line;
,	pastComma	! break up to a comma;
,	ColonClose	! break on colon or close paren (for system #);
,	slashColon	! get switches, device;
;
simple procedure setupBreaks;
begin
setbreak(aLine_ getbreak, #lf & #ff, #cr & #lf & #ff, "TINSK");
setbreak(ColonClose_ getbreak, ":)", null, "INS");
setbreak(slashColon_ getbreak, ":/", null, "INS");
setbreak(pastComma_ getbreak, ",", null, "INS");
end;
require setupBreaks initialization;
boolean procedure somewhatEqu( string results, expected );
begin	own string thisSystem;
	string rSys, eSys;
	integer rBreak, eBreak;
while length(results) and length(expected)
   do begin
	if not equ(	scan(results, ColonClose,rBreak),
			scan(expected,ColonClose,eBreak) )
	 or rBreak neq eBreak then return( false );
	if rBreak=":"
	 then begin
		rSys_ scan(results, ColonClose,rBreak);
		eSys_ scan(expected,ColonClose,eBreak);
		if rBreak neq eBreak then return(false);
		if equ(rSys,eSys) then continue;
		if rBreak=")"
		 then begin
			if length(thisSystem)=0 
			 then thisSystem_(if equ(rSys,"*") then eSys 
				else if equ(eSys,"*")then rSys else "");
			if equ(rSys,"*") then rSys_ thisSystem;
			if equ(eSys,"*") then eSys_ thisSystem;
		      end;
		if not equ(rSys,eSys) then return(false)
		 else if equ(results,expected) then return(true);
	      end;
      end;
return( equ( results, expected ) );
end;
boolean simple procedure isReply( string reply, expected );
	return( kequ(reply,expected[1 for length(reply)]) );
boolean procedure confirm(string msg);
while true
   do begin	string reply;
	print(msg, " [Confirm]");
	if isReply(reply_inchwl,"YES") then return(true);
	if isReply(reply,"NO") then return(false);
	print("Answer YES or NO  please.  ");
      end;
integer procedure setLogChan( string comLine );
do begin "setLogChan"
	integer chan, mode;
	own integer flag;
	string device, fileName, switch;
fileName_ scan( comLine, slashColon, flag );
if flag = ":"
 then begin 
	device_ fileName; 
	fileName_ scan( comLine, slashColon, flag );
      end
 else device_ (if length(fileName) then "DSK" else "TTY");
if equ(fileName,"?") or kequ(fileName,"help")
or equ(comLine,"?") or length(comLine) and isReply(comLine,"help")
 then begin
	print("
This reads telecopy .COM and .OUT files and makes a summary of them.
When the files are read, they are either deleted or made temporary files.
The normal behavior is to make them temporaries which will go away when
you next GFD or log off.  The results are written to a LOG file (which 
could be the terminal).
Switches: /DELETE	delete the .COM and .OUT files as they are read
	  /APPEND	append the results to the log file
	  /SUPERCEDE	always make a new log file
	  /CONFIRM	(default) if the log file exists, 
				ask about supercede/append
If started in CCL mode, this behaves like TELCHK.LOG/APPEND, but will
just exit if it cannot do the append.
Enter the log file name, (null for the terminal) followed by any 
switches you want: ");
	continue;
      end;
if flag=":"
 then begin print("Invalid name (two :'s).  Try again: "); continue end;
mode_ 0; deleteFiles_ false;
while flag="/"
   do if isReply(switch_scan(comLine,slashColon,flag),
				"CONFIRM") then mode_ 0
	else if isReply(switch,"APPEND") then mode_ 1
	else if isReply(switch,"SUPERCEDE") then mode_ 2
	else if isReply(switch,"DELETE") then deleteFiles_ true
	else begin
		print("Invalid switch: """, switch, """ Try again: "); 
		continue "setLogChan";
	      end;
if kequ(device,"TTY") then return(-1);
open( chan_ getchan, device,'10000, 1,4, 0,0,flag_true);
if flag then print("Couldn't get device ", device, ": ")
 else begin
	case mode of begin
		begin		integer safe array info[1:6];
		enter( chan, fileName, flag );
		fileinfo(info);
		if not flag and info[2] land !bit(18)	! file existed;
		and not confirm("Superceding file")
		 then begin
			close(chan,'40);	! inhibit file creation;
			append( chan, fileName, flag );
			if not flag then print("Ok, appending." & crlf);
		      end;
		end;
		append( chan, fileName, flag );
		enter( chan, fileName, flag )
	      end;
	if not flag then return(chan);
	print("Trouble on file ", fileName, " -> ", !rh(flag) );
      end;
release(chan);
print(crlf& "Try again... Log file: ");
end "setLogChan" until -1=length( comLine_ inchwl );
procedure oneTransfer( string source, dest, results );
begin
	simple procedure copyStarting;
	if equ(results,"COPY STARTING") then begin
	    results_ input(outFile,aLine);
	    if equ(results, source & " COPIED TO " & dest)
	    or somewhatEqu(results, source & " COPIED TO " & dest)
	     then begin
		  cprint(log, " (done)");
		  while length(results_ input(outFile,aLine))
		  and results neq ":"
		  do if equ( results[inf-19 to inf],
				") CHARS. TRANSMITTED" )
		   then begin results_ input(outFile,aLine); return; end
		   else cprint(log, crlf & " ?=> `", results, "'.");
		  cprint(log,crlf & " ??? missing character count ???");
		end;
	   end;

if equ(results[1 for 13],"KEEPING FILE ")
and equ(results[14 to inf], dest)
	 then begin
		cprint(log,crlf& " Kept file ", dest);
		results_ input(outFile,aLine); 
	      end
else if equ(results[1 for 15],"REPLACING FILE ")
and equ(results[16 to inf], dest)
	 then begin
		cprint(log,crlf& " Replacing ", dest, " with ", source);
		results_ input(outFile,aLine); 
		copyStarting;
	      end
else if equ(results[1 for 14],"UPDATING FILE ")
and equ(results[15 to inf], dest)
	 then begin
		cprint(log, crlf& " Updating ", dest, " with ", source);
		results_ input(outFile,aLine); 
		copyStarting;
	      end
else if equ(results,"COPY STARTING")
	 then begin
		cprint(log, crlf&" Moving file ", source, " to ", dest);
		copyStarting;
	      end
else cprint(log, crlf& " Tranfer ", source, " to ", dest );
while length(results) and results neq ":"
   do begin
	cprint(log, crlf & " -> `", results, "'." );
	results_ input(outFile, aLine);
      end;
if results neq ":" then cprint(log, crlf& "*** ran out of .OUT");
end;
procedure finish( integer ch, ppn, name, ext );
begin	own safe integer array elb[0:'14];
arrclr(elb); 
elb[0]_'14; elb[1]_ppn; elb[2]_name; elb['14]_!bit(8); elb[3]_ext; 
if deleteFiles
 then begin rename( ch, null, 0, eof ); !skip!_ eof=0; end ! delete;
 else eof_ chnior(ch, elb[0], '11); 		! rename to a temp;
if !skip! then return;
print(crlf & "Couldn't ", (if deleteFiles then "delete " 
			   else "make temp of "), 
	cv6str(name), ".", cv6Str(ext) );
if 0 neq ppn neq defaultPpn
 then print( "[", cvos(!lh(ppn)), ",", cvos(!rh(ppn)), "]" );
print( " (System error code = '", cvos(!rh(eof)), ")" );
end;
procedure telecom( integer ppn, name, when );
begin	integer jobPart, date;
	string fileName, ppnStr, comLine, outLine;
fileName_ Cv6str(name);
ppnStr_ (if ppn=0 or ppn=defaultppn then null 
	else "["& cvos(!lh(ppn)) & ","& cvos(!rh(ppn)) &"]");
date_ !lh(when);
when_ !rh(when);
cprint(log, crlf, fileName, ": ", 1+(date mod 31), 
	case (date div 31) mod 12 of (" January "," Febuary "," March ",
		" April "," May "," June "," July "," August ",
		" September "," October "," November "," December "),
	1964 + date div (12 * 31), " ", 
	when div 3600, ":", when div 60 mod 60, ":", when mod 60, "  ");

lookup(comFile, fileName & ".COM" & ppnStr, eof);
if eof then begin cprint(log, " no .COM file "); return; end;
while length(comLine_ input(comFile, aLine)) and comLine neq "("
    do cprint(log, """", comLine, """ ");
if eof then begin cprint(log, " no files in .COM file"); return; end;

lookup(outFile, fileName & ".OUT" & ppnStr, eof);
if eof then begin cprint(log, " .OUT file disappeared "); return; end;

while (outLine_ input(outFile, aLine)) =":" do;	! skip initial colons;
if eof then begin cprint(log, " wierd .OUT file"); return; end;

oneTransfer( scan(comLine, pastComma, !skip!), comLine, outLine );
while (comLine_ input(comFile, aLine)) = "("
   do oneTransfer(	scan(comLine, pastComma, !skip!), 
			comLine, 
			input(outFile, aLine) );
cprint(log, crlf," Trail: ", comLine );
while length(comLine_ input(comFile, aLine)) 
   do cprint(log, crlf & " Trail(on): ", comLine );
while length(outLine_ input(outFile, aLine))
   do cprint(log, crlf & "  --> ", outLine );

finish( comFile, ppn, name, cvsix("COM") );
finish( outFile, ppn, name, cvsix("OUT") );
end;
record!class tel( integer ppn, name, when; r!p(tel) link );
record!pointer(tel) head;
integer files;

boolean procedure setCom( integer safe array fileData );
begin	integer jobPart;
	string fileName, comLine, outLine;
	r!p(tel) new;
	define	job(x) ={((x) xor CVSIX("000TEL"))}
	,	dBits= job(CVSIX("777TEL")) lor job(CVSIX("888TEL"))
	;
jobpart_ job(fileData[0]);
if jobpart land lnot dBits		! if clearly not a digit;
or (jobpart + job(CVSIX("666TEL"))) land lnot dBits
 then return(false);			! or any digit exceeds 9;
					! then keep going (no match);
! storeElement( fileData[-1], fileData[0], fileData[2] );
files_ files + 1;
new_ new!record(tel);
tel:ppn [new]_ fileData[-1];
tel:name[new]_ fileData[0]; 
tel:when[new]_ fileData[2];
tel:link[new]_ head;
head_ new;
return(false);	! keep going, we don't want to stop;
end;
external boolean rpgsw;		! true if started in CCL mode;
open( comFile_getchan, "DSK",0, 4,0, 250,brk,eof_false);
open( outFile_getchan, "DSK",0, 4,0, 250,brk,eof_false);
defaultppn_ calli( !xwd(2,-1), '41 );
files_ 0; deleteFiles_ false;
redUfd( setCom, "###TEL.OUT", "*D" );
if files = 0
 then print("No telecopy files.")
 else begin	string resultFile;
	if rpgsw
	 then begin
		open(log_getchan,"DSK",0, 1,4, 0,0,rpgsw);
		if not rpgsw
		 then append(log,"TELCHK.LOG", rpgsw);
		if rpgsw
		 then begin
			print("Can't append to TELCHK.LOG" &
				" -- System error ", !rh(rpgsw) );
			call(0,"EXIT");
		      end;
	      end
	 else begin
		print( files, " Telecopy file(s).  results to: ");
		log_ setLogChan( inchwl );
	      end;
	if log geq 0 then cprint(log,crlf, files, " Telecopy file(s).");
	! sortEm;
	while head 
	   do begin
		telecom(tel:ppn[head], tel:name[head], tel:when[head]);
		head_ tel:link[head];
	      end;
	if log geq 0 then release(log);
      end;
end "telecopy check"

