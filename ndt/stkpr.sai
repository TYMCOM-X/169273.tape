entry stakpr;
begin "debug"
require "<><>" delimiters;
define	! = <comment>, crlf = <('15&'12)>, tab = <('11 & null)>;
define	rh(x) = <('777777 land (x))>;

internal integer st!ch;

simple procedure !setup;
      start!code
	setom	  st!ch;
	sos	st!ch;	! set to -2 (lets user choose output file);
      end;
require !setup initialization [0];

require "SYS:GOGTAB.DEF" source!file;
external integer array gogtab[0:endren];
simple string procedure constr( integer bytePointer, size );
start!code	define a=1, b=2, sp='16, p='17;
		external integer x33;
	hrrz	b,size;
	move	a,bytePointer;
	tlnn	a,'777777;
	 hrli	a,'440700;
	caig	b,0;
	 setz	a,;
	caile	b,1023;
	 movei	b,1024;
	push	sp,b;
	push	sp,a;
	sub	p,x33;
	jrst	@3(p);
end;
simple string procedure m!cvos( integer arg );
	! returns a constant string for an octal number;
start!code	define p='17,sp='16;
		define cnt=3,ptr=4,char=5,arg=char+1;
		label supled,prntdg;
		own safe integer array stbuff[0:2];	! room for str;
	pop	p,arg;	! get arg in accumulator (at char+1 for lshc);
	exch	arg,(p);
	hrlzi	ptr,'440700;
	hrri	ptr,stbuff[0];	! make a pointer for the string;
	push	sp,[1];		! count (start at 1 for octal sign);
	push	sp,ptr;	! pointer to first byte of buffer;
	movei	"'";	! get octal indicator;
	idpb	ptr;

	movei	cnt,11; ! 11 digits left in word after first check;
	setz	char,;	! clear char;
supled:	lshc	char,3;	! get a digit from arg (char+1);
	skipn	char;	! don't supress non-leading chars;
	 sojg	cnt,supled;	! if digit=0 and not the last, supress;

prntdg:	addi	char,"0";	! now printing all chars: make ascii;
	idpb	char,ptr;	! place character in buffer;
	aos	-1(sp);		! increment count of result string;
	setz	char,;		! get the next digit;
	lshc	char,3;
	sojge	cnt,prntdg;	! and go print it unless done now;

	popj	p,;	! now leave;
end;
simple string procedure str!at( integer byptr!address );
begin	integer ptr;
ptr_ memory[byptr!address];
if memory[byptr!address-1] land '777777 = 0
or (ptr land ('007777000000) = '000700000000
    and (ptr lsh -30) mod 7 = 1)
 then return( constr(memory[byptr!address], 
			'777777 land memory[byptr!address-1]));
return( "bad str!at: " & m!cvos(byptr!address) & " [" &
	m!cvos(memory[byptr!address-1]) & "|" & m!cvos(ptr) & "]" );
end;
procedure vbl!show( integer arg!type; reference integer arith, strng );
begin "vbl!show"	integer addr;
			record!pointer (any!class) rp;

! ref-item type bits (sail run-times coord 1974) ;
define	q$tmpb		= '400000,	q$bindb		= '040000,
	q$refb		= '200000,	q$procb		= '020000,
	q$quesb		= '100000,	q$itemb		= '010000,
	q$ary2b		= '004000,	q$msk6bt	= '003740;
! the following definitions are from sail run-times coord 1912;
define	$notype= 1, $brkitm= 2, $sttype= 3, $fltype= 4, $intype= 5,
	$lstype= 7, $setype= 6, $pittyp= 8, $prctyp= 9, $evttyp=10,
	$ctxtyp=11, $rfityp=12, $rectyp=13, $lbltyp=14, $rcltyp=15,
	$itvtyp=16, $mxstyp = $itvtyp;
! $notype: no type at all	$brkitm: bracketed triple item
  $sttype: string item		$fltype: real item
  $intype: integer item		$lstype: list item
  $setype: set item		$pittyp: procedure item
  $prctyp: process item		$evttyp: event type item
  $ctxtyp: context item		$rfityp: reference item
  $rectyp: record		$lbltyp: label
  $rcltyp: record class		$itvtyp: itemvar
  $mxstyp: last simple type
;
define	$arrtyp = 20;	! arrays are this + simple-code (note room);

define	 BitMask(name)=<(q$> & <name> & <b lsh 18)>
	,SimpleT(name)=<($> & <name lsh 23)>
	,SimpleMask=<(q$msk6bt lsh 18)>
	;
if arg!type land (BitMask(ref) lor SimpleMask) = SimpleT(sttype)
 then begin "value string"
	addr _ strng+1;
	strng _ strng+2;
      end "value string" 
 else begin
	addr _ arith;
	arith _ arith + 1;
      end;

if arg!type land BitMask(ref)
 then begin		! reference arg;
	arg!type _ arg!type land lnot BitMask(ref); ! clear bit;
	addr _ memory[addr];
	cprint( st!ch, "(@'", cvos(addr), "):" );
      end;

if arg!type land BitMask(proc)
 then begin		! reference arg;
	arg!type _ arg!type land lnot BitMask(proc); ! clear bit;
	cprint( st!ch, "`Procedure'" );
	if memory[addr]=op!jfcl then "simple procedure, look at .-1"
	if memory[addr]=op!pushp!rf
	and memory[addr+2]=op!pushp!sp
	and memory[addr+2]=op!pushp!sp
      end;

if arg!type land
	(BitMask(tmp)+BitMask(bind)+BitMask(ques)+BitMask(ary2) 
		+BitMask(proc))
 then cprint( st!ch, "x!typ", m!cvos((arg!type) lsh -23),
		"(@", m!cvos(addr), "):", m!cvos(memory[addr]) )
 else if arg!type land BitMask(item)
	 then begin	! item arg;
		if (arg!type land SimpleMask) = SimpleT(notype)
		 then cprint( st!ch, cvi(memory[addr]) ) 
		 else cprint( st!ch, "I!typ",
			m!cvos( (arg!type xor BitMask(item)) lsh -23 ),
			"(@", m!cvos(addr), "):", m!cvos(memory[addr]) )
	      end
 else case ((arg!type land SimpleMask) lsh -23) min $mxstyp+1 of
      begin "cases"
	[$sttype] cprint( st!ch, """", str!at(addr), """");
	[$fltype] cprint( st!ch, memory[addr,real] );
	[$intype] cprint( st!ch, memory[addr] );
	[$lstype] cprint( st!ch, memory[addr,list] );
	[$setype] cprint( st!ch, memory[addr,set ] );
	[$rectyp]
	[$rcltyp] begin memory[location(rp)] _ memory[addr];
			cprint( st!ch, rp ); end;
	[$itvtyp] cprint( st!ch, memory[addr,itemvar] );
	[ELSE] cprint( st!ch, "typ", 
		m!cvos((arg!type land (q$msk6bt lsh 18)) lsh -23),
		"(@", m!cvos(addr), "):", m!cvos(memory[addr]) )
      end "cases";

end "vbl!show";
simple integer procedure maybe!call( integer pstack );
		! returns calling address if was call, 0 otherwise;
start!code	label instr, notrtn, readit;
		define p='17,user='15,ret=1,caller=2,HISEGB='400000;
		external integer !JBHRL, !JBDA;
	pop	p,ret;		! get p-value (stack pointer);
	exch	ret,(p);
	move	ret,(ret);	! get stack entry (maybe return addr); 
	tlne	ret,'37;	! if indexed or indirect, not ret addr;
	 jrst	notrtn;
	hrrzi	ret,-1(ret);	! back it up one (and make pure addr);

	caige	ret,!JBDA;	! was in valid code area;
	 jrst	notrtn;		! no, couldn't have been call;
	move	user,gogtab;	! gogtab to check for top of low seg;
	camge	ret,lowc(user);	! below allocated memory (ie code);
	 jrst	readit;		! could be code in the low segment;
	hrrz	caller,!JBHRL;	! temporarily get top of high seg;
	cail	ret,HISEGB;	! base of high segment (*fix for T-10);
	 caile	ret,(caller);	! was it inside its segment;
	  jrst	notrtn;		! no, better not even try to look;

readit:	hllz	caller,(ret);	! if procedure call, then this instr;
! don't handle indirect or indexed calls, since we don't know;
! where they went anyway;
	came	caller,instr;	! was a pushj p,something;
notrtn:	 setz	ret,;	! nope, return 0;
	popj	p,;
instr:	pushj	p,0;	! used to check for procedure calls;
end;
integer procedure describe!procedure( integer p, rf );
begin "describe!procedure"	integer descriptor, arg!cnt, call!p;
for p _ p step -1 until rf+3
   do if 0 neq (call!p _ maybe!call(p))
	 then cprint( st!ch, crlf& "from: ", m!cvos(call!p), 
			":  simple @", m!cvos( rh(memory[call!p]) ) );
descriptor _ memory[rf+1] lsh -18;
call!p _ rf - rh(memory[descriptor+4]) - 1;
cprint( st!ch, crlf, "from: ", m!cvos( rh(memory[rf-1] - 1) ), 
	": ", str!at( descriptor+2 ) );

arg!cnt _ ((memory[descriptor+4] lsh -18) div 2) +	! # string pars;
	  rh(memory[descriptor+4]) - 1;			! # arith pars;
if arg!cnt > 0
 then begin		integer arg!desc, s!arg!base, i!arg!base, argno;
	arg!desc _ rh( memory[descriptor+7] ) - 1;
	i!arg!base _ call!p + 1;
	s!arg!base _ rh( memory[rf+2] ) + 1
		  - (memory[descriptor+4] lsh -18);

	cprint( st!ch, "( " );
	vbl!show( memory[arg!desc+1], i!arg!base, s!arg!base);
	for argno_ 2 step 1 until arg!cnt
	 do begin
	     cprint( st!ch, ", " );
	     vbl!show( memory[arg!desc+argno], i!arg!base, s!arg!base);
	    end;
	cprint( st!ch, ");" & crlf );
      end;
return( call!p );
end "describe!procedure";
own integer array acs [ 0 : '17 ];

internal simple procedure stakpr;
begin "stackpr"		integer p!trace, rf!trace; boolean own!file;
	start!code "saveacs"
	forlc ac!no = ('0,'1,'2,'3,'4,'5,'6,'7,'10,'11,
			'12,'13,'14,'15,'16,'17)
	 doc <
	  movem	ac!no,acs[ac!no]; > endc
	end "saveacs";

if own!file _ (st!ch = -2)
 then begin
	print(crlf & "Output stack to file: ");
	setprint("", "F");
	st!ch _ -1;
      end;

rf!trace _ acs['12];
p!trace _ rh( acs['17] ) - 1;	! don't show this procedure;
while '100 < rh( rf!trace ) < '777000
   do begin
	p!trace _ describe!procedure( p!trace, rh(rf!trace) );
	rf!trace _ memory[ rf!trace ];
      end;
cprint( st!ch, crlf );

if rf!trace neq '1777777
 then usererr(0,1, "bad RF stack assumption." );

if own!file
 then begin if st!ch neq -1 then release(st!ch); st!ch _ -2; end;

setprint("","T"); print( crlf, "STACKPR completed" );
	start!code "restoreacs"
	forlc ac!no = ('0,'1,'2,'3,'4,'5,'6,'7,'10,'11,'13,'14,'15) 
	 doc <
	  move	ac!no,acs[ac!no]; > endc
	popj	'17,0;
	end "restoreacs";
end "stackpr";

end "debug" . 

   