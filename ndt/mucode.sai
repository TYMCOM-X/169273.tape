begin "mucode"
require "(SAILIB)SAIL.DEF" source!file;
!get!module(mapping);

require '123456654321 version;
simple procedure set!width( integer chan, width );
! really knows about byte sizes;
if chan_ chncdb(chan)
 then begin
	chan_ chan + ('3006 rot -12) + 4;
	if ldb(chan) then dpb(width,chan);
	if ldb(chan+5) then dpb(width,chan+5);
      end;
	simple integer procedure address(reference string s);
	return( lop(s) lsh 8 + lop(s) );

simple procedure fill2( string s; reference integer w0, w1 );
start!code	define r0=0,r1=1+r0, len=2,byp=3,byt=4, sp='16,p='17; 
		label loop,done;
	setzb	r0,r1;
	hrrz	len,-1(sp);
	jumpe	len,done;
	move	byp,(sp);
loop:	ildb	byt,byp;
	lshc	r0,8;
	iori	r1,(byt);
	sojg	len,loop;
done:	movem	r0,w0;
	movem	r1,w1;
end;

procedure pvalu(string s);
begin
	define fields($) = "
		#(CYLEN,0,3)$
		#(COND,4,8)$ #(J-CODE,9,12)$
		#(MA-STB-FIELD,13,13)$ 
		#(AR-STB-FIELD,14,14)$
		#(DEST,15,19)$
		#(CURRENTLY-UNUSED,20,20)$
		#(D,21,24)$
		#(ALU-D,25,27)$ #(ALU,28,30)$ #(SOURCE,31,33)$ 
						#(CARRY-IN,34,34)$
		#(ACSEL,35,36)$
		#(ROT-SEL,37,37)$ #(ROT,38,43)$
		#(MASK-SEL,44,44)$ #(MASK,45,50)$
		#(PAR,51,51)$
		#(SPEC,52,55)$
		#(MAPF,56,59)$
		#(JADDR,60,71)";
	redefine #(a,b,c)="1"; define fieldCount=fields(+);
	redefine #(name,b,c)="cvps(name)";
	    preset!with fields "<>"(<,>); 
		own safe string array name[1:fieldCount];
	redefine #(n,first,last)="(last-first)lsh 18+first";
	    preset!with fields "<>"(<,>); 
		own safe integer array codes[1:fieldCount];

	integer byt, field; string res;
	own safe integer array w[0:1];
	simple integer procedure gbits(integer code);
	start!code
	dmove 0,w[0];move 3,code; lshc 0,-36(3); hlrz 3,3; lsh 1,-35(3);
	end;
fill2( s, w[0], w[1] );
for field_ 1 step 1 until fieldCount
   do if byt_ gbits(codes[field])
	then print(name[field], "[", byt, "] ");
end;

integer safe array seen[ 0:'377, 0: '377 lsh -5 ];
integer page, wordOnPage, lastPage;
record!pointer(map2) micro;
integer microChan;

boolean simple procedure unSeen;
IFCR FALSE THENC
   begin integer bit,ndx;
    ndx_ wordOnpage lsh -5;
    bit_ 2 lsh (wordOnPage land (1 lsh 5 -1);
    seen[page,0]_ seen[page,0] lor 1; 
    if seen[page,ndx] land bit then return(false);
    seen[page,ndx]_ seen[page,ndx] lor bit;
    return(true);
  end;
ELSEC
  start!code
	movei	1,access(seen[page,0]);
	move	3,wordOnPage;
	movei	2,1;
	iorm	2,(1);	! indicate something seen on this "page";
	movei	4,(3);
	lsh	4,-5;			! get which word bit is in;
	addi	1,(4);
	andi	3,0+1 lsh 5 - 1;	! get bit;
	lsh	2,1(3);			! avoid the "this page" bit;
	tdne	2,(1);			! skip if bit off;
	 tdza	1,1; 			! already on, return 0;
	 iorm	2,(1);			! store value with bit on;
   end;
ENDC

procedure selectPage;
begin
if not unSeen then usererr(wordOnPage,3,"Twice: " & cvs(page) & ",");
if page neq lastPage
 then if page neq lastPage_ getmap( micro, "O", microChan, page )
	then usererr(page,3,"Couldn't get/create file page ");
end;

procedure startUp;
begin
do print("Micro file: ")
 until 0 leq microChan_ opfile( inchwl, "RWBM", 15);  ! use channel 15;
arrclr(seen); lastPage_ -1;
if not micro_ map2cr( 0,'377, 0,1 )
 then usererr(0,0,"Sorry, no holder");
end;

procedure finishUp; 
	begin getmap(micro,"Z", 0,0); release(microChan); end;

boolean procedure store( string s );
begin
page_ lop(s);
wordOnPage_ lop(s);
if page = '377 = wordOnPage then return(false);	! end-of-micro tape;
selectPage;
fill2( s, map2:a[micro][wordOnPage,0], map2:a[micro][wordOnPage,1] );
return(true);
end;
integer pos;
string simple procedure sep;
	if (pos_ pos + 1) geq 0
	 then begin pos_ -6; return('15&'12) end
	 else return(" ");

boolean eof1,eof2; 
integer cnt,brk, phrases, all, phrase, loc, lastLoc; 
string line1, line2, s;

setbreak(all_getbreak, null,null,"IZ");
open(1,"DSK",'0, 4,0, cnt,brk,eof1_false);
if eof1 then call(0,"EXIT");
set!Width(1,8); 
do begin print("File: "); lookup(1,inchwl,eof1); end until not eof1;
cnt_ 11;
lastLoc_ -2;
pos_ 0;
startUp;
for phrase_ 0 step 1 while eof1=0 and store( input(1,all) ) do ;
finishUp;
end;
(1 lsh 16)-1 neq (loc_ address( line1_ input(1,All) ))
   do begin
!	print(crlf, cvos(loc), ": "); 
!	pvalu(line1);
!	store( loc, line1 );
!	if loc = lastLoc + 1
!	 then lastLoc_ loc
!	 else print( ":", cvos(lastLoc), sep, cvos(lastLoc_ loc) );
      end;
print(":", cvos(lastLoc), "
  ! ", cvos(Loc), " [end at ", phrase, " micro-words]");
end;
for phrases_ phrases * cnt div 11 step 1 
	while length(line1) and equ(line1[1 for 11], line2[1 for 11])
   do begin line1_ line1[12 to inf];line2_ line2[12 to inf]; end;
if eof1=eof2 and equ(line1,line2)
 then print("Hunky dory!")
 else begin
	print(crlf, "on word ", phrases, " first difference found.");
	while length(line1)
	   do begin 
		print(crlf&"1)", cvos( address(s_line1[1 for 11])),
			":	", valu(s) );
		line1_ line1[12 to inf];
	      end;
	if not eof1 then print(crlf, "1)... and on");
	while length(line2)
	   do begin 
		print(crlf&"2)", cvos( address(s_line2[1 for 11])),
			":	", valu(s) );
		line2_ line2[12 to inf];
	      end;
	if not eof2 then print(crlf, "2)... and on");
      end;
end;
