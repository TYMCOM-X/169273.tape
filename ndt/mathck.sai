begin "check mathop"
define !="Comment", crlf="('15&'12)";
external integer !skip!;

require "mathop.hdr" source!file;
	! real_ FLOOR( real );
	! real_ FRACT( real );

require "octio.hdr" source!file;
	! integer_ CVLRI( longReal );
	! longReal_ CVILR( integer );
	! "octalName"_ CVLOS( longReal );
	! successful_ LRSCAN( @longReal, @"numberSource" );

require "(sailib)brkfns.hdr" source!file;
	! Code_ READBR( breakTable, @"breaks", @"omits", @"modes" );
	! "tailString"_ RVSCAN( @"Source", table, @BreakChar );

simple real procedure truncate( long real x );
start!code move 1,x; end;

integer passZeros;
simple procedure setup;	setbreak(passZeros_getbreak,"0",null,"XR");
require setup initialization;

simple string procedure cvros(real x);
begin	string result;
rvscan( result_cvlos(x), passZeros, !skip! );
return( if x<0 then result else " " & result );
end;
real x, floorX, fractX; long real dx; string response;

while true 
   do begin
	do print("Number:") until lrscan( dx, response_ inchwl );
	x_truncate(dx);

	floorX_ floor(x);
	fractX_ fract(x);
	if x neq floorX+fractX
	 then print(" [Failure delta=", x-floorX-fractX,"] ");
	if 0 > fractX or fractX geq 1
	 then print(" [Failure: fraction] ");
	print(crlf, "X:	", cvros(x)," = ", x,
		crlf, "floorX:	", cvros(floorX)," = ", floorX, 
		crlf, "fractX:	", cvros(fractX)," = ", fractX,
		crlf );
      end;

end $ 

