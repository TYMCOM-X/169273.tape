entry STRACH, STRADD, STRCLS, STRLEN, STROPN, STRPEK;
begin "slbcat"
define !="COMMENT", desr="COMMENT";
let decl=internal;
external string procedure constr( integer bytePointer, size );
external integer procedure strstf( integer byptr; string s; 
					boolean nonull );
! "string addition" data structure storage: ;

record!class string$buffer (
			record!pointer (string$buffer) next;
			integer spaceleft, bytepointer;
			string accumulate;
			safe integer array strbuf );

own record!pointer (string$buffer) active!buffers, father, current;
!	These two routines are internal to the "string addition" code;

simple boolean procedure findit( integer cat!chan );
desr	Given a 'string concatenation channel', set current to the
	associated record, and father to its predecessor (in case
	you want to delete it).  Return true if such a channel is
	found.
;
begin "findit"
father  _ null!record;
current _ active!buffers;

while cat!chan neq memory[location( current )] neq 0
   do begin
	father _ current;
	current _ string$buffer:next [father];
      end;
return( current neq null!record );
end "findit";


string procedure flush!current!buffer;
desr	Force the byte buffer in current empty (appending any buffered
	bytes to the "accumulate" field of current).  This returns the
	string which has been bufferred so far.
;
begin "flush!current!buffer"	integer buffersize, oldleft, byptr;
		string had;
buffersize _ oldleft _ 5 * arrinfo( string$buffer:strbuf[current], 2 );
byptr _ point( 7, string$buffer:strbuf[current] [1], -1);

string$buffer:bytepointer [current] _ byptr;
string$buffer:spaceleft   [current] swap oldleft; 
had_ string$buffer:accumulate [current];
if bufferSize=oldLeft then return(had);
return( string$buffer:accumulate [current] _
		if length(had)=0
		 then stmake(byptr, bufferSize-oldleft)
		 else had & constr(byptr, bufferSize-oldleft)
	);
end "flush!current!buffer";
decl integer procedure stropn( integer buffersize );
desr	Set up and return a new 'string concatenation channel'
;
begin "stropn"	integer array buffer [ 1 : 1 max (buffersize+4)%5 ];
current _ new!record (string$buffer); 
string$buffer:next	  [current] _ active!buffers;
string$buffer:accumulate  [current] _ "*";
string$buffer:spaceleft   [current] _ 5 * arrinfo( buffer, 2 ); 
string$buffer:bytepointer [current] _ point( 7, buffer[1], -1);

memory[location( string$buffer:strbuf[current] )] swap
					memory[location( buffer )];
	
active!buffers _ current; current _ null!record;
	
return( memory[location( active!buffers )] );
end "stropn";
decl procedure stradd( integer concat; string to!add );
desr	append to!add to the specified 'string concatenation channel'
;
if length( to!add ) then 
begin "stradd"		integer left;
if findit( concat )
 then if length(to!add) leq (left_ string$buffer:spaceleft [current])
	 then begin
		string$buffer:bytepointer [current] _ 
			strstf( string$buffer:bytepointer [current],
					to!add, true );
		string$buffer:spaceleft [current]_ left -length(to!add);
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] 
				& (if width(to!add)=7 then to!add
					else str!w(to!add,7));
	      end
 else usererr(0,1, " stradd( unopened string concatenation channel ) ");
current_ father_ null!record;
end "stradd";
decl procedure strach( integer concat, character );
desr	append character to the specified 'string concatenation channel'
;
begin "strach"		integer left;
if findit( concat )
 then if (left_ string$buffer:spaceleft [current])
	 then begin
		idpb( character, string$buffer:bytepointer [current] );
		string$buffer:spaceleft [current]_ left -1;
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] & character;
	      end
 else usererr(0,1, " strach( unopened string concatenation channel ) ");
current_ father_ null!record;
end "strach";
decl string procedure strcls( reference integer concat );
desr	If the 'string concatenation channel' is a legal value,
	and the channel is open, then close it, set concat to 0,
	and return its contents.  Otherwise set to concat -1 and
	return null.
	(legal concatenation channels are always positive integers)
;
begin "strcls"		string strcls;

if findit( concat )
 then begin	external record!pointer (any!class) procedure
		$rec$( integer op; record!pointer (any!class) r );
	strcls _ flush!current!buffer;
	if father
	 then string$buffer:next [father]_ string$buffer:next [current]
	 else active!buffers		 _ string$buffer:next [current];
	concat _ 0;
	$rec$(5, current);	! deallocate all storage for current, ;
				! including its buffer and string;
	current_ null!record;
      end
 else begin
	concat _ -1;
	strcls _ null;
      end;
father_ null!record;
return( strcls );
end "strcls";
decl simple string procedure strpek( integer concat );
desr	Peek at the contents of a 'string concatenation channel'
	NOTE: Don't do this too often, as it defeats the entire
	bufferring scheme that the 'string concatenation channel'
	code is meant to use.
;
begin "strpek"	string strpek;

if findit( concat )
 then strpek _ flush!current!buffer
 else begin
	strpek _ null;
	usererr(0,1, " STRPEK: unopened string concatenation channel " )
      end;
current_ father_ null!record;
return( strpek );
end "strpek";
decl simple integer procedure strlen( integer concat );
desr	return the number of characters stored in the specified
	'string concatenation channel' (-1 if the 'channel' is closed
	or invalid).
;
begin "strlen"	integer strlen;

if findit( concat )
 then strlen _ length(		string$buffer:accumulate [current] ) 
		+ 5 * arrinfo(	string$buffer:strbuf	 [current], 2)
		-		string$buffer:spaceleft  [current]
		- 1
! string.area + buffer.space - unused.buffer.space - length("*");
 else strlen _ -1;	! couldn't find the 'channel';
current_ father_ null!record;
return( strlen );
end "strlen";
end "slbcat"

