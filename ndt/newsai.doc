	SAIL instructions

    Since there has been a major version number change, this SAIL is
incompatible with previous SAILs.  Loading output from this version 
with output from previous versions will produce a warning error
message every time you try to run the mixed program, Because some 
of the runtimes now have extra (defaulting) arguments.  SAIL source 
code should remain compatible, however, barring excessive wizard-like
START!CODE/QUICK!CODE practices.

    You will NEED the newest FAIL (included in the tape).  For details
on what this FAIL includes see the manual provided on the tape.  Some
of the changes added are mentioned later in this document.

    If you intend to use LINK, rather than LOADER, you will have to
fix the polish fixup code, (even to load the included compiler).
The appropriate changes to make are listed in file "LINK.FIX";
they may not be enough for extremely old copies of LINK.  These 
fixes are not really SAIL- or FAIL-specific.  The problem seems to
be that the PSECT code interacted adversely with the polish, which
FAIL exercises heavily.

    It is STRONGLY recommended that you rebuild SAIL, setting up the 
various parameters for your system.  If you currently have either 
SAIL or FAIL, you may use your copies rather than the BOOT copies
on the tape to build the new versions.  The appropriate order of
operations is: (1) fix LINK, (2) build FAIL, (3) modify HEAD to taste,
(4) build SAIL runtimes, and (5) build the SAIL compiler.

Description of various runtime libraries (not TENEX/TOPS-20):

    The SAIL run-time library can be made in 4 basic styles.  Of these,
one form, the great big RUNTIM.REL, is least often used and is only
marginally useful.  Typically any one site will have at least two of
the others, and often has all three.

-RUNTIM.REL
	is a single load module with all of the SAIL runtimes in it.
Advantages:
    No library search is necessary.
Disadvantages:
    All of the runtimes are loaded, even though you may use only a few 
	of them.
    All of the runtimes are in the low segment, and are not shareable.
    The size of small programs is Severely impacted, causing them to 
	require more core and/or swapping effort than they really need.

-LIBSA9.REL
	is a library of runtimes that load into the low segment.
Advantages:
    Only necessary code is loaded since it is a library. 
    You may use this library for single-segment (low segment) programs
	since this is loaded into the low segment. 
Disadvantages:
    No sharing of SAIL runtime-package code is possible.
    Libraries load more slowly than load modules.
    All of the runtimes are in the low segment, and are not sharable.

-HLBSA9.REL
	is a library of runtimes primarily in the high segment.
Advantages:
    Since this is a library, only necessary code is included in your 
	core image.  
    As much of the SAIL runtime code is placed in the high segment as 
	possible.  There it can be part of a sharable high segment for 
	SAIL programs (typically compiled to produce sharable code 
	themselves), producing a useful amount of segment-sharing for 
	those individual SAIL programs.  If the program is widely used 
	within the time-sharing system it is running on, segment-sharing
	can be very useful (a good technique for SAIL-language CUSPs).
Disadvantages:
    Any SAIL program loaded with this library will have both segments. 
	The code is (slightly) larger for two-segment operation.
    Libraries load more slowly than load modules.
    There is no possibility of sharing the runtimes except with other 
	incarnations of the same program.

Description of various runtime libraries (not TENEX/TOPS-20) (contd);

-SAILOW.REL+SAISG9.SHR
	SAILOW is a load module that pulls in the hiseg SAISG9.SHR
Advantages:
    Loads extremely quickly, since the actual code has already been 
	loaded into the high segment.
    Allows maximum sharing between diverse SAIL programs since they may
	all use the same runtimes.  
    Minor bugs in the runtimes may be fixed in the segment and will 
	become immediately available to all SAIL programs using this 
	version of the runtimes, whereas programs loaded using the 
	other libraries need to be reloaded to receive the bug fixes.
    Saves disk storage for SAIL programs (the runtimes are GETSEGed
	at run time).
Disadvantages:
    Prohibits any further sharing of code by two different jobs running
	same SAIL program, since the high segment has already been 
	completely determined.  
    Some huge programs may not fit if forced to exist solely in the
	low segment.
    Severely impacts the size of small programs, causing them to 
	require more swapping effort than they really need; however 
	the excess storage is shared with other SAIL programs.
    Requires special loading procedure for user programs (SAILOW.REL 
	must be the FIRST file loaded, otherwise the high segment will 
	not be properly linked up).  Some sites have gotten around this
	by installing a special loader switch for SAIL that says (in 
	effect) "load SYS:SAILOW.REL first".
    SAIL programs constructed accordingly do not contain all the 
	executable code in the SAVEd file.  A saved program may change 
	behavior when the segment changes.  If the program is saved on 
	tape for a few years during which the sail runtime segment is 
	removed, it will not even begin to run.
Description of various compiler configurations (not TENEX/TOPS-20):

The compiler normally comes in four flavors:

A) debugging  -- 
    Useful when checking out the SAIL compiler itself.  It has code to 
trace the scanner and parser, to examine the compiler variables, and in
general to get a picture of what the machine thinks is going on.  It is
not recommended for normal compilation use because of its size.

B) low segment-- 
    All code resides in the low segment.  The debugging hooks are gone,
(as are their concommitant performance reductions).  The major dis-
advantage is that this form allows no sharing between simultaneous 
compilations.  (Also, /X compilation saves the entire compiler).

C) use SAISG9 -- 
    Allows the compiler to share the same set of runtimes as the SAIL 
programs that are running.  If you intend to primarily use the 
SAILOW/SAISG9 style of runtimes for running programs, this is the 
compiler you want, since it will share memory with the various SAIL 
programs as well as other compilations (/X compilation saves compiler
portion, but not the runtimes).

D) reentrant  -- 
    The majority of the code resides in the high segment.  This allows 
maximum sharing between simultaneous compilations (/X compilation
requires the least storage here).
To Construct and install FAIL:	(for more detail, see FAIL.INS)

    This version of FAIL should solve some of the recent universal 
file problems, as well as having some new features in the assembler.
Check over the manual if you are interested.

Load and execute file FAIL.REL; it will prompt you with "*".
Respond:
	for TOPS-10:	"FAIL0_TOPS10,FAIL"
	for TOPS-20:	"FAIL0_TOPS20,FAIL"
	for TENEX: 	"FAIL0_TENEX,FAIL"
	for TYMCOM-X:	"FAIL0_TYMSHR,FAIL"
It will assemble a FAIL for you, then come back with a "*" prompt again.
Type control-C to get back to the monitor (EXEC).

Load and execute file FAIL0.REL; it will prompt you with "*".
Respond: "FAIL1_FAIL"
Another FAIL will be assembled, and then you will get a "*" prompt.
Type control-C to get back to the monitor (EXEC).

Load and execute file FAIL1.REL; it will prompt you with "*".
Respond: "FAIL2_FAIL"
Another FAIL will be assembled, and then you will get a "*" prompt.
Type control-C to get back to the monitor (EXEC).

Files FAIL1.REL and FAIL2.REL should be identical.  Load either one and
save the result as your new FAIL (we suggest as your production FAIL).

Modifying HEAD:

HEAD has been changed to facilitate simple modifications.  Most changes
can be made simply by inserting lines at the beginning of HEAD.  You
should set the appropriate CPU switch (KASW, KISW or KLSW), change any
pre-declared file names that you want, set SFDLVL, and so on.  A good 
example of what you might want to do to HEAD is in the file VSAHED.FAI.
To use precisely those setup parameters, simply insert all the lines in 
VSAHED.FAI before the first line of HEAD. (must be in file HEAD. to let 
SCISS work properly).
	Putting up SAIL (TOPS-10/TYMCOM-X):

1) Load and save the provided SAIL: (a directory-local SAIL)
   In order to get this SAIL to work properly, you have the files
   2OPS2.OPS, GOGTAB.DEF, and LIBSA9.REL on your directory.
   If LIBSA9.REL seems to have problems, you may have to explicitly
   load the SAIL portions with the file RUNTIM.REL from runtimes step A.
		[Notice: this SAIL, unlike the one you will make, 
			gets standard files from device DSK, PPN 0].
       ".LOAD VSAIL.REL, /L LIBSA9.REL
	.SAVE VSAIL
       "
	  or

       ".LOAD VSAIL.REL,RUNTIM.REL
	.SAVE VSAIL
       "
	Constructing the runtime libraries (TOPS-10/TYMCOM-X):

  A) make a RUNTIM.REL: [to be loaded explicitly with SAIL programs]
       ".RUN FAIL
	*RUNTIM.CMD@
	*^C
       "

  B) make SAILOW/SAISG9
       ".RUN FAIL
	*SGMNT.CMD@
	*^C
	.EXECUTE UPPER.REL/LOCALS,NOTDDT
       "
    This makes SAILOW.REL and SAISG9.SHR (or whatever names you 
    substituted in HEAD) on device DSK:, ppn 0.  The code in SAILOW 
    will "GETSEG" SAISG9 from the device and PPN specified by HEAD,
    so you must move SAISG9 there before using SAILOW.REL .

  C) make LIBSA9 and HLBSA9 (also GOGTAB.DEF,HDRFIL,...)
    Compile, load, and save program SCISS (use VSAIL to compile it).
    if you can't make your COMPILE do it, try:
       ".RUN VSAIL
	*SCISS_SCISS
	*^C
	.LOAD SCISS		;;or LOAD RUNTIM,SCISS if necessary
	.SAVE SCISS
       "
    Now that you have a SCISS
       ".RUN SCISS
	*TOPS10
	*YES
	.RUN FAIL		;;or you may simply start FAIL
	*###FAI.TMP@		;;at start address +1  (CCL entry)
	.
       "


*******************************************************************
*** Notes:							***
***	Where it says ".RUN FAIL", it refers to the new FAIL.	***
***	^C is used here as an abbreviation for control-C 	***
***	"###" means your job number. (eg "007FAI.TMP@")		***
*******************************************************************

	A note about SCISS, the library maker:

    A SCISS run has three parts: "pass 1" of SCISS, a FAIL assembly 
run, and "pass 2" of SCISS.  These three parts together form a 
"COMPIL"-like structure for the SAIL runtime library which allows the 
sources to be kept in a somewhat more manageable number of files.  

    In "pass 1", SCISS reads file "ORDER." to determine what pieces are
needed and where they come from.  (WARNING: SCISS also "knows" the
names of a number of the files specified; in general, a change to ORDER
is not sufficient to change the names of some of the pieces).  SCISS 
will then look for the various files it needs, and decide what 
assemblies to perform based on whether files exist, and if so what 
their dates are.  Then it constructs the files from the various runtime 
sources (hence the name: SCISSors), and prepares a FAIL command file 
to perform the assemblies.  

    SCISS jumps to FAIL (or stops and lets you do so) for the second 
part.  The FAIL command file generated by SCISS ends with a command 
line that tells FAIL to jump back to SCISS.

    When SCISS runs this time ("pass 2"), it concatenates the .REL 
files for the various runtimes into the library files LIBSA9.REL and 
HLBSA9.REL, deleting various intermediate files as it proceeds.
	Producing your SAIL compiler:

compile, load, and save PTRAN.SAI 
	This requires SCNCMD.SAI as a source file.

compile, load, and save RTRAN.SAI 
	This also requires SCNCMD.SAI as a source file. 

you are through with (and may delete if you like): 
	PTRAN.SAI, PTRAN.REL, RTRAN.SAI, RTRAN.REL, and SCNCMD.SAI

run your PTRAN (command line is "PROD_HEL" <cr>)
	This requires file HEL.
    [PTRAN translates the rules in HEL into 
	a production table PROD. and PROD.QQQ]

you are through with (and may delete if you like): HEL. and PTRAN.SAV

run your RTRAN (command line is 
		TOPS-10:	"RESTAB_PROD.QQQ,FOO3.T10,FOO3"
		TENEX/TOPS-20:	"RESTAB.TNX_PROD.QQQ,FOO3.TNX,FOO3"
		TYMCOM-X:	"RESTAB_PROD.QQQ,FOO3.TYM,FOO3"
		)
    [RTRAN translates the production table PROD.QQQ produced by PTRAN
	and the list of runtimes in FOO2 into a parse table for the
	compiler.  In addition it constructs a number of BAIL files
	that contain descriptions of the Runtimes, thus allowing
	BAIL to know about them.  The BAIL files are BAI###.FAI
	where ### is CLC, IO1, IO2, MSC, PRC, SM1.]

you are through with (and may delete if you like): 
	PROD.QQQ, RTRAN.SAV, FOO3., FOO3.T10, FOO3.TYM, and FOO3.TNX

results: PROD., RESTAB., BAISM1.FAI, BAICLC.FAI, BAIIO1.FAI, 
	BAIIO2.FAI, BAIMSC.FAI, and BAIPRC.FAI
	Producing your SAIL compiler (continued)

TENEX/TOPS20 systems: 
    To Run your FAIL, the command line is "ASSEMB.TNX@".  Load and 
execute (with local symbols) UPPER.REL+NOTDDT.REL to make the runtime 
segment.  Move the resulting segment file (T-x-SAISG9.SAV or whatever) 
to its desired home (TENEX is usually <SAIL>, TOPS-20 is usually SAI:).
Concatenate the files HEAD.REL and TRIGS.REL (use the COPY command) to 
form file LIBSA9.REL .  Copy this into file HLBSA9.REL as well. Now 
load files SAILOW.REL and SAIL.REL (in that order), and start the 
resulting core image (it will say "SAVE ME").  Save the result as SAIL.

TOPS-10/TYMCOM-X systems:
    Select which form of compiler you desire from the ones described 
earlier in this document, and assemble with FAIL using the appropriate 
command file (command line is "FILE@" <cr>).  If you intend to rebuild 
the libraries (a good idea if you are changing the CPU switch), do not 
load these files until you have rebuilt the libraries.

At this point, you can make either compiler type A or B (described 
below) immediately, which brings you half a step closer to your own 
compiler (your compiler and our runtimes).  This is probably a good 
idea, since the compiler "knows" where the libraries are supposed to 
be, and you can re-direct it by making a new compiler.  
	
Compiler  Command	Load (in the specified order!)
type	   file
A	LSAILD.CMD	(with symbols) your DDT, LSAILD.REL, /L LIBSA9.REL
B	LSAIL.CMD	LSAIL.REL, /L LIBSA9.REL
C	LSAIL.CMD	SAILOW.REL, LSAIL.REL (*)
D	RSAIL.CMD(**)	XTCLOR.REL, RSAIL.REL, /L HLBSA9.REL

(*)  See notes on SAILOW above -- it is not a normal library.
(**) You will need files HDRFIL.FUN and SAILOR.FAI as well.  If they 
	are not there (SCISS likes to delete SAILOR.FAI), you must
	use SCISS to make them.
To get SAILOR: run SCISS, and take the non-standard options called 
	"Select entries from prompt list" and "do not chain to FAIL".  
	Reply "Y" to all programs up to and including "SAILOR".  
	On the next prompt, reply "N", and on the next reply "DONE".
To get HDRFIL: run SCISS, and take the non-standard option called 
	"Select entries from prompt list". Then give it "SAIHED" 
	and "DONE".  If SCISS fails to start FAIL, start it yourself
	using the newly created .TMP file.
Constructing BAIL and its myriad auxillary files:
(NOTE: a number of BAIL file sources are created during the RTRAN run)
    1) Compile BAIL with your new SAIL [not VSAIL] getting BAIL.REL
	This "require"s DSK:GOGTAB.DEF during compilation, not 
	SYS:GOGTAB.DEF .
	If you will use a non-standard location for the pre-declared
	.SM1 files, you should set that up in a preamble to BAIL.SAI, 
	and compile that leader+BAIL.SAI to get BAIL.REL (for a sample
	BAIL preamble file, see LDBAIL.SAI).
    2) Edit BAIPD9.FAI to do FAIL ".LOAD" commands on the desired
	resting place for the 5+5 BAIL procedure descriptor files.
	[NOTE: if you do not put them on SYS:, some users will be
	 burned, since the SAIL manual says what their file names are]
    3) Run FAIL and give it the command line "BAIFLS.CMD@".
    4) Load and execute BAISM1.REL.
    5) Put your newly built files in their appropriate home (usually
	device SYS:). The files are:
	BAICLC.REL, BAIIO1.REL, BAIIO2.REL, BAIMSC.REL, BAIPRC.REL, 
	BAICLC.SM1, BAIIO1.SM1, BAIIO2.SM1, BAIMSC.SM1, BAIPRC.SM1, 
	BAIL.REL and BAIPD9.REL
Other constructable files (opcode table, standard break table):

Make a new opcode table:
    For TYMCOM-X/TOPS-10: (makes 2OPS2.OPS)
	compile, load and execute the SAIL program MAKTAB.SAI .
    For TENEX/TOPS-20: (makes 3OPS3.OPS)
	compile, load and execute the SAIL program MAKTAB.TNX .
	    [you will have to have a copy of STENEX.FAI as a data file]

Make a new Standard break table file: BKTBL.BKT
    compile, load and execute the SAIL program MAKBKT.SAI .
    
Summary: normal system files for a production SAIL system (all on SYS:)

   SAIL.SAV	The actual compiler (or .LOW+.SHR or .EXE or whatever)
   2OPS2.OPS	[opcode table, accessed during compilation]

   LIBSA9.REL	runtime library [lowseg,unshareable]
   HLBSA9.REL	runtime library [hiseg,pure code]

   SAILOW.REL	runtime library [runtime Segment stub].
   SAISG9.SHR	runtime library [Actual runtime segment body]

   BKTBL.BKT	[standard break tables, read whenever STDBK(chan)
		 function is invoked by a SAIL user program]

   BAIL.REL	Sail high-level debugger
   BAIPD9.REL	Loads all runtime procedure descriptor .REL files.
   BAICLC.REL, .SM1   "desk calculator" runtimes procedure descriptors
   BAIIO1.REL, .SM1   "major I/O" runtimes procedure descriptors
   BAIIO2.REL, .SM1   "minor I/O" runtimes procedure descriptors
   BAIPRC.REL, .SM1   "process" runtimes procedure descriptors
   BAIMSC.REL, .SM1   "miscellaneous" runtimes procedure descriptors

normally available source!files for the user:
	GOGTAB.DEF	defines user table entries
	PROCES.DEF	for working with processes
	RECORD.DEF	for working with records

