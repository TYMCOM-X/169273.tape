begin "slbmak"
require "(SAILIB)SAIL.DEF" source!file;
define visible(char)={(#sp < (char) neq '177)};
define #quote={""""};
define badNameOk=!bit(23);
integer tokenUp, token, oneLine, stopSemi, toQuote, pastWhite, 
	dropPage, passPage, skipSlash;

simple procedure makeBreaks;
begin	string white, punct;
white_ crlf & #ff & #sp & #ht;
punct_ "!@#$%^&*()_+-=~`{}[]|\:;'"",./<>?";
setbreak(tokenUp_getbreak, white & punct, white, "TINKR");
setbreak(token_  getbreak, white & punct, white, "TINR");
setbreak(oneLine_getbreak, null, #lf & #ff, "INS");
setbreak(stopSemi_getbreak, ";", null, "INS");
setbreak(toQuote_getbreak, #Quote, null, "INS");
setbreak(pastWhite_getbreak, white, null, "XNR");
setbreak(dropPage_ getbreak, #ff, null, "IUA");
setbreak(passPage_ getbreak, #ff, null, "INA");
setbreak(skipSlash_ getbreak, "/", null, "INS");
end;
require makeBreaks initialization;

integer cnt,brk,eof;
string compileLine;

require 100 new!items;
require 100 pnames;
set need;
item home,dsk,language,sail,fail;
procedure makeCompile( integer chan; procedure toCall );
while true do
begin	string processor, tempString;
compileLine_ input(chan, stopSemi);
while brk neq ";" and not eof
   do compileLine_ compileLine & (if brk=0 then null else #sp)
		& input(chan, stopSemi);
if brk neq ";"
 then begin
	tempString_ scan( compileLine, tokenUp, brk );
	if length(tempString) or length(compileLine)
	 then print("Error: text after final semicolon!: ", tempString,
		#sp, compileLine, crlf );
	return;
      end;
processor_ scan(compileLine,tokenUp,brk);
tempString_ (if brk=":" then null else scan(compileLine,tokenUp,brk));
if length(processor) and brk = ":" and length(tempString)=0
 then begin	string module;
	lop(compileLine);
	module_ scan(compileLine,tokenUp,brk);
	toCall( processor, module );
      end
 else print("Error in description: should be processor : modulename ...;
	but got: ", processor, #sp, tempString & brk, " ..." & crlf );
end;
itemvar homeFile;

integer procedure wantCopy( string moduleName );
begin	string module, s, name;
	string itemvar file;
	boolean flag;
	integer ouch;
module_ scan(module_moduleName, tokenUp, brk);
file_ cvsi( module, flag );
if flag
 then begin "new module"
	do print("Unexpected module ", module, ", shall I keep it? : ")
	 until kequ(s_inchwl,"yes") or kequ(s,"no");
	if kequ(s,"no") then return(0);
	new!pname( file_ new("Unexpected"), module );
	name_ module & ".SAI";
      end "new module"
 else if home xor file eqv any
	 then begin
		print("Warning: ", module, " has copies on: ", 
						home xor file, 
			crlf, "  This copy goes to file: ");
		if length(name_inchwl)=0
		 then begin
			make home xor file eqv homeFile;
			return(0);
		      end
	      end
	 else name_ module & ".SAI";
make home xor file eqv homeFile;
open(ouch_getchan, "DSK",0, 0,4, cnt,brk,eof);
while length(name)
  do  begin "file try"
	lookup(ouch,name,flag);
	if not flag
	 then begin
		print("Warning: ", name, " already exists.", crlf);
		while true
		   do begin	string s;
			print(" Response: ");
			while equ(s_ inchwl,"?")
			 do print("Your options are ", crlf,
			     "	* to over-write the file on DSK,", crlf,
			     "	- to forget about this copy,", crlf,
			     "	or you may type a new file name: ");
			if equ(s,"-") then done "file try";
			if equ(s,"*") then done;
			if length(s)
			 then begin name_s; continue "file try"; end;
		      end
	      end;
	close(ouch);
	enter(ouch,name,flag);
	if flag
	 then begin
		print("Cant make file ", name, ", instead use: ");
		name_ inchwl;
	      end
	 else return(ouch);
      end "file try";
release(ouch);
return(0);
end;
procedure unpack( integer ch; string fname );
begin "unpack"
	string word;
if not equ("BSAIL",word_ input(ch,tokenUp))
 then begin
	print("Should begin with the word BSAIL!, not ", word, crlf );
	return;
      end;
new!pname( homeFile_ new, fname );

  do  begin "one Program"	string s1;
				integer ouch;
	s1_ input(ch, toQuote);
	while not eof and brk neq #quote
	   do if 1000>length(s1_ s1 & input(ch, toQuote))
		 then begin
			usererr(0,1,"No find block name after BSAIL!");
			return
		      end;
	if eof then done;
	if ouch_ wantCopy( word_ input(ch, toQuote) )
	 then begin
		cprint( ouch, s1, #quote, word, #quote );
		  do  begin
			do out( ouch, input(ch, passPage) )
			 until eof or brk=#ff;
			if kequ("BSAIL",word_ input(ch,token))
			 then done else out(ch,word);
		      end
		 until eof;
		release(ouch);
	      end
	 else do do input( ch, dropPage ) until eof or brk=#ff
		until eof or equ("BSAIL", input(ch,tokenUp));
      end "one Program"
 until eof;
release(ch);
end "unpack";
list order;
integer luk;

procedure oneModule( reference string processor, module );
begin	string itemvar f; itemvar proc;
	boolean Flag;
proc_ cvsi( processor, flag );
if flag
 then begin
	print("Unknown processor: ", processor, crlf );
	if length(processor)
	 then new!pname( proc_ new("(Unknown Language)"), processor );
      end;
f_ cvsi( module, flag );
if flag
 then new!pname( f_ new(compileLine), module )
 else if equ( compileLine, datum(f) ) and f xor language eqv proc
	then print( "duplicate: ", f xor language, ":", module, 
						compileLine, crlf )
	else print( "conflict: ", proc, ": ", module, compileLine, crlf,
		    "with: ", f xor language, ": ", f, datum(f), crlf );
make f xor language eqv proc;
put f in order after inf;
if proc=sail
 then begin
	lookup( luk, module & ".sai", flag );
	if not flag then make home xor f eqv dsk;
      end;
end;
integer procedure makeFile( string prompt; reference string name );
begin	integer ch;
open( ch_ getchan, "DSK",badNameOk+0, 0,4, cnt,brk,eof );
while true 
   do begin	boolean flag;
	print(crlf, prompt);
	enter( ch, name_ inchwl, flag );
	if flag=0 then return(ch);
	if length(name)=0 then done;
	print("Sorry, that name is no good, try again: ");
      end;
release(ch);
return(-1);
end;
procedure Pcom( integer ouch; string fnums, modulesFile, commandFile );
begin
	procedure carmel(string lead, nums);
	begin	own integer chan;
	lead_ crlf & lead;
	chan_ ouch;		! speed up access in loop;
	cprint(chan, "R CARMEL", 
		lead, ".", lop(nums),			! old libr;
		lead, "IBA.REL",			! new libr;
		crlf, modulesFile );			! module list;
	lead_ lead & ".";
	while length(nums) do cprint(chan, lead, lop(nums) );
	cprint(chan, crlf & crlf );
	end;
if length(commandFile)
 then cprint(ouch, "COMPILE @", commandFile, crlf);
carmel( "HL", fnums );
carmel( "LL", fnums );
release(ouch);
end;
procedure DoCreation(integer cmd);
begin "create library"
	integer tmp;
order_ NIL;
open(luk_getchan, "DSK",'17, 0,0, cnt,brk,eof);
makeCompile(cmd,oneModule);
close(luk);
release(cmd);
print( tmp_ length( need_ language eqv sail ), " SAIL files, ",
	tmp- length(need_ need-(home`dsk)), " on DSK, so ", 
	length(need), " missing: ", crlf&"  ", need, crlf,
	"Found: ", home`dsk, crlf );
open( cmd_ getchan, "DSK",badNameOk+0, 8,0, cnt,brk,eof );
while length(need)
   do begin	string file;
		boolean Flag;
	print( length(need), " files needed.  Look in: ");
	if length(file_ inchwl) = 0 then done;
	lookup(cmd, file, flag);
	if flag then lookup(cmd, file_ file & ".SAI", flag);
	if flag
	 then print("couldn't find ", file[1 for inf-4], crlf)
	 else begin
		unpack( cmd, file );
		need_ need - (home`any);
	      end;
      end;
print("Sources: ", home xor any);

  begin  itemvar f; set homes;
    homes_ home xor any; 
    foreach f| f in homes
	do print( crlf & #sp, f, ": ", home`f);
  end;
! *** procedure createFiles;
begin	itemvar module;
	integer i, cmd;
	string files, compilations, modules, junk;
	list orderCopy;
orderCopy_ order;
cmd_ makeFile("Compilation file: ", compilations);
files_ null;
for i_ 1 step 1 while length(orderCopy)
   do if home xor (module_ lop(orderCopy)) eqv dsk 
     and module xor language eqv sail
	then begin
		files_ files & i;
		if cmd geq 0
		 then cprint(cmd, "LL.",i,"=", module, ".SAI" & crlf
				& "HL.",i,"=", module, ".SAI(H)" & crlf)
	      end;
files_ files & i;
if cmd geq 0
 then begin
	cprint( cmd,	"LL.", i, "=LLUNV.FAI+SAILIB.FAI" & crlf &
			"HL.", i, "=HLUNV.FAI+SAILIB.FAI" & crlf );
	release(cmd);
      end;

if 0 leq cmd_ makeFile("Put Carmel module list to file: ", modules)
 then begin	integer num;
		simple string procedure sep;
		return( if 7 land(num_ num+1)then "," & crlf else "," );
	num_0;
	orderCopy_ order;
	while length(orderCopy) do cprint(cmd, lop(orderCopy), sep );
	cprint(cmd, "#" & crlf);
	release(cmd);
      end;

if 0 leq cmd_ makeFile("Put Carmel commands out to file: ", junk)
 then Pcom( cmd, files, modules, compilations );
release(cmd);
end;
end;
procedure DoVerification(integer cmd);
begin "verify library contents and order"
	integer Carmel;
	procedure verifyModule( reference string processor, module );
	begin "a module"
	! carmel output format: ...
	! slb format: processor: module (already scanned)
	;
	print(crlf, module)
	end "a module";

	boolean flag;

open(carmel_getchan, "DSK",badNameOk+0, 4,0, cnt_120,brk,eof);
  do  begin	string name; 
	print("Carmel File Directory: ");
	lookup(cmd,name_ inchwl,flag);
	if flag then lookup(cmd,name&".CFD",flag);
	if flag
	 then print(
"To make a `CFD': Run CARMEL, type BINFIL/A, then the output file name.
Warning: the output extension defaults to .REL, so specifiy explicity
");
      end
 until not flag;
makeCompile(cmd,verifyModule);
release(carmel);
end "verify library contents and order";
	string file, switch;
	boolean Flag;
	integer cmd;
	label getCommand;
open(cmd_getchan, "DSK",badNameOk+0, 4,0, cnt_120,brk,eof);
getCommand:
  do  begin
	print("Library list: ");
	switch_ inchwl;
	file_ scan(switch, skipSlash, brk );
	lookup(cmd,file,flag);
      end
 until not flag;
if kequ(switch,"create"[1 for length(switch)])	then DoCreation(cmd)
else if kequ(switch,"verify"[1 for length(switch)])
						then DoVerification(cmd)
else begin
	print("The only legal switches are /verify or /create", crlf);
	go getCommand;
      end;
release(cmd);
end;

   