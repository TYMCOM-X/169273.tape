	ENTRY FRQ1P,FRQ1PX, PASS1B
	TITLE FREQENCY
INTERNAL A.6, A.7, A.9, B.6, B.7, B.9, FREQ, TREE, FREQ.0,TREE.0,NODE.0
EXTERNAL ARRCLR
	REPMAX== 100	;or whatever is desired (max repeat count)

OPDEF ERR. [5b8]
; ACCUMULATORS
	Z==	0
	A==	1
	B==	2
	C==	3
	D==	4
	E==	5
	F==	6
;	G==	7
;	H==	10
;	I==	11
	RF==	12
	LPSA==	13
	TEMP==	14
	USER==	15
	SP==	16
	P==	17		; STACK POINTER

; SQUISH DEFINITIONS
	F.EOL==	400000		; END-OF-LIST BIT
DEFINE SARRAY(LEAD,POS,SANAME,DATAWD,V.ZERO) <
SANAME:	DATAWD
	LEAD-<POS>-10
	V.ZERO	;base!word
	LEAD	;lower
	POS-1	;upper
	1	;mult
	XWD 1,POS-LEAD
DATAWD:
 IFN LEAD < BLOCK -LEAD 
 >
V.ZERO:	BLOCK POS
	XWD	400000,SANAME
>
;; data for FRQ1P (no repetition counts)
SARRAY(      0, 100, A.6, A.6., FRTB6)
SARRAY(	     0, 201, A.7, A.7., FRTB7)	;200 + C.LNUM
	C.LNUM== 200
SARRAY(      0,1000, A.9, A.9., FRTB9)


;; data for FRQ1PX (repetition counts)
SARRAY(-REPMAX, 100, B.6, B.6., FRTB6A)
SARRAY(-REPMAX, 201, B.7, B.7., FRTB7A)	;200 + C.LNUM
SARRAY(-REPMAX,1000, B.9, B.9., FRTB9A)

IFN 0,<
SARRAY(-REPMAX, 210, C.7, C.7., FRTB7B)
		;200 + C.LNUM + C.LNTB + CRLF + QU + qu + Qu p 2(exp)
	;C.LNUM== 200
	C.LNTB== 201	;line-number,tab
	C.CRLF== 202	;crlf
	C.UQUU== 203	;QU
	C.LQLU== 204	;qu
	C.UQLU== 205	;Qu
>

;; data for PASS1B (tree building)
SARRAY(-REPMAX, 1000, FREQ, FREQ., FREQ.0) 
			;must run minumum index to maximum index
SARRAY(-REPMAX, 1000, NODE, NODE., NODE.0) 
			;parallels FREQ (total size is max total size)
			; [by offset from the start loc]
SARRAY(0,1000+REPMAX+2,TREE, TREE., TREE.0) ;actual tree (max=N-1+2)
SUBTTL	FRQ1P - count the characters in XWD -size,,first [no repeats]
	;SAIL: procedure FRQ1P( integer AOBJN.ptr )
	; increments arrays A.6, A.7, A.9 to reflect totals

FRQ1P:	SKIPL	A,-1(P)
	 JRST	EXIT2
WORDLP:	;loop per word of source

;first sixbit:
FREQ6:	MOVE	C,(A)
REPEAT 5,<
	MOVEI	B,0
	LSHC	B,6
	AOS	FRTB6(B)
>
	ROT	C,6
	AOS	FRTB6(C)	;; AOBJN A,FREQ6;  MOVE A,-1(P)

;now 7-bit (line number special)
FREQ7:	MOVE	C,(A)
REPEAT 4,<
	MOVEI	B,0
	LSHC	B,7
	AOS	FRTB7(B)
>
	ROT	C,7
	AOS	FRTB7(C)
	JUMPGE	C,.+2		;was line number bit on?
	 AOS	FRTB7+C.LNUM	;yes, bump special
				;; AOBJN A,FREQ7;  MOVE A,-1(P)

;now 9-bit
FREQ9:	MOVE	C,(A)
REPEAT 3,<
	MOVEI	B,0
	LSHC	B,9
	AOS	FRTB9(B)
>
	ROT	C,9
	AOS	FRTB9(C)
	AOBJN	A,WORDLP	;; AOBJN A,FREQ7;  POPJ P,
EXIT2:	SUB	P,[XWD 2,2]
	JRST	@2(P)

SUBTTL	FRQ1PX - count the characters in XWD -size,,first with rep count
	;SAIL: procedure FRQ1PX( integer AOBJN.ptr )
	; increments arrays B.6, B.7, B.9 to reflect totals
	; *** warning: repeaters DONT cross "blocks", 
	; *** use the same AOBJN.ptr sequence when storing


FRQ1PX:	SKIPL	A,-1(P)		;first count line number bits
	 JRST	EXIT2
	MOVEI	B,1		;mask to test for bit
LNUML:	TDNE	B,(A)
	 AOS	FRTB7A+C.LNUM
	AOBJN	A,LNUML

	MOVE	A,-1(P)		;now count straight byte counts
	MOVE	0,[ FRTB6A(B) ]	;for 6-bit bytes
	HLRE	C,A
	IMULI	C,6
	HRLI	A,(<POINT 6,0>)
	MOVEI	E,0		;repetition count for char in D
	HRROI	D,-1		;no preceding character
	PUSHJ	P,BYTLUP

	MOVE	A,-1(P)		;now count straight byte counts
	MOVE	0,[ FRTB7A(B) ]	;for 7-bit bytes
	HLRE	C,A
	IMULI	C,5
	HRLI	A,(<POINT 7,0>)
	MOVEI	E,0		;repetition count for char in D
	HRROI	D,-1		;no preceding character
	PUSHJ	P,BYTLUP

	MOVE	A,-1(P)		;now count straight byte counts
	MOVE	0,[ FRTB9A(B) ]	;for 9-bit bytes
	HLRE	C,A
	ASH	C,2
	HRLI	A,(<POINT 9,0>)
	MOVEI	E,0		;repetition count for char in D
	HRROI	D,-1		;no preceding character
	HRRI	F,
	PUSHJ	P,BYTLUP
	JRST	EXIT2

BYTLUP:	ILDB	B,A
	CAIN	D,(B)
	 AOJA	E,REPBYT
COUNT:	AOS	@0
	MOVE	D,B
	AOJL	C,BYTLUP
	POPJ	P,

REPBYT:	AOJGE	C,ENDREP
	ILDB	B,A
	CAIN	D,(B)
	 AOJA	E,REPBYT
	PUSHJ	P,ENDREP
;;	MOVEI	E,0
	JRST	COUNT

ENDREP:	JUMPE	E,CPOPJ
	TLNE	E,-1
	 ERR.	1,[ASCIZ "Huge repeat code"]
?%MSK%_7	;or whatever seems right
?%OFF%_40	;(better be larger than %MSK%)
	TRNE	E,%MSK%
	 JRST	[MOVEI	D,(E)
		 ANDI	D,%MSK%
		 SUBM	0,D
		 AOS	(D)
		 TRZ	E,%MSK%
		 JRST	.+1]
	MOVE	D,0
REPLUP:	TRNE	E,1
	 AOS	-%OFF%(D)
	LSH	E,-1
	JUMPE	E,CPOPJ
	SOJA	D,REPLUP
CPOPJ:	POPJ	P,

PASS1B:	;SAIL: integer procedure PASS1B( integer array freqtab )
; return: -1=error, no results (eg: frequencies are 0)
; return non-0 is variable number of words to represent file
;				[size(tree) + size(bitstream)]
;	Note: this is NOT file size (need: treeSiz, inBytes, CodeType)
; TREE[0] is top-of tree (=tree size)
; TREE[1:TREE[0]] is the actual tree
; TREE[1+TREE[0]] is the number of "input" bytes=freq total

	MOVE	A,-1(P)		;get array that was passed
	MOVN	B,-1(A)		;calculate -length(array)
	HRLI	A,(B)		;convert to AOBJN pntr for table
SHORTN:	SKIPN	(A)		;slide forward to first non-0 entry
	 AOBJN	A,SHORTN
	JUMPG	A,BADRT		;better have a non-0 frequency
	MOVS	Z,A		;remember word,,-length for later

;fill NODE array with flag lor "char the entry correspond to"
	MOVE	B,-1(P)		;get array that was passed
	SUB	A,-5(B)		;convert first word loc to array index
	HRLZ	C,Z		;get 0-based AOBJN pointer for data len
	IOR	A,[XWD -1,F.EOL]	; force sign on, "eol" indicator
STNODE:	MOVEM	A,NODE.(C)
	AOJL	A,.+2		;catch switch from negative to positive
	 HRROI	A,F.EOL(A)	;and turn the sign bit back on
	AOBJN	C,STNODE	;note: termination has C=last index + 1
	
;copy argument table into FREQ	[NOTE: this loop we use FREQ. as base]
	MOVE	B,Z		;make BLT pointer to copy frequencies 
	HRRI	B,FREQ.
	BLT	B,FREQ.-1(C)	;copy over the appropriate data to FREQ


	MOVEI	LPSA,1		;set index to put first TREE elem in
;register pairs: first is index, second is value
;now moving data through A,B
;	get the "best" pair into C,D; second "best" to E,F

Apair:	
	HRLZ	A,Z		;get 0-based AOBJN pointer for data len
	HRLOI	D,377777	;get "infinity" as lowest value so far
	HRLOI	F,377777	;also as second lowest value so far
	SETZB	C,E		;make the indices for these noticeable
P.LUP1:	;in this loop, C,D is the "best"
	SKIPE	B,FREQ.(A)	;if no value
	 CAMG	F,FREQ.(A)	;or not better than second "best"
	  JRST	R.LUP1		; then ignore it
	DMOVE	E,A		;always replace the second "best"
	CAMLE	D,FREQ.(A)	;if better than "best"
	 AOBJN	A,P.LUP2	;then "best" and second "best" switch
R.LUP1:	AOBJN	A,P.LUP1
	JUMPN	E,G.PAIR	;if have second best, then reduce pair
	ERR.	0,[ASCIZ "either 0 frequencies or software error"]

G.PAIR:	ADDM	D,FREQ.(E)	;combine nodes into one, accum frequency
	SETZM	FREQ.(C)	;clear frequency in one node
	MOVS	D,NODE.(C)	;get LH for tree
	HRR	D,NODE.(E)	;and RH
	MOVEM	D,TREE.(LPSA)	;store as tree element
	MOVEM	LPSA,NODE.(E)	;generate new node number for this node
	AOJA	LPSA,APAIR	;and loop away

P.LUP2:	;in this loop, E,F is the "best"
	SKIPE	B,FREQ.(A)	;if no value
	 CAMG	D,FREQ.(A)	;or not better than second "best"
	  JRST	R.LUP2		; then ignore it
	DMOVE	C,A		;always replace the second "best"
	CAMLE	F,FREQ.(A)	;if better than "best"
	 AOBJN	A,P.LUP1	;then "best" and second "best" switch
R.LUP2:	AOBJN	A,P.LUP2
	JUMPN	C,G.PAIR	;if have second best, do merge
;now F is total frequency, LPSA is number of tree nodes + 1
;now F is total frequency, LPSA is number of tree nodes + 1
	MOVEM	F,TREE.(LPSA)
	SUBI	LPSA,1		;convert LPSA to tree size
	MOVEM	LPSA,TREE.	;store tree size in tree[0] 

;now build the bit strings
;Z is the last (lower) node visited (to tell if have seen kids before)
;A is the current node
;B is the bit string for the current node
;C is a trial new node
;D is a stack of parents of current node
;E is the number of actual data bits in B (doesn't count the BOS bit)
;F is the total number of bits needed for this sequence
;LPSA is passedArray[0](A) [to get frequency for various chars]
;TEMP is used as a TEMP (how about that)
	PUSH	P,FREQ		;clear the area we will write them to
	PUSH	P,[0]
	PUSHJ	P,ARRCLR
	MOVE	D,[XWD 1,NODE.]	;stack guaranteed to be big enough (37)
	HRRE	A,TREE.		;get the top of the tree
	MOVEM	D,Z		;just something that will not match
	MOVEI	B,1		;top bit of string
	SETZB	E,F		;E: no bits until travelled at least one
				;F: no bits to represent file yet
	MOVE	LPSA,-1(P)	;get array that was passed
	MOVE	LPSA,-5(LPSA)	;get its zero point
	HRLI	LPSA,A		;add indexing for (A)
	PUSH	D,A		;so termination check works well

TOP:	JUMPL	A,MARKA
.KIDS:	HRRE	C,TREE.(A)	;check right kid
	CAMN	C,Z		;there before?
	 JRST	.UP		;yup, retreat
	PUSH	D,A		;stack where we came from
	HLRE	C,TREE.(A)	;look at left branch
	LSH	B,1		;make pattern say "going left"
	JUMPL	B,[ERR. 1,[ASCIZ "Notation exceeds 35 bits"]
		   JRST	BADRT]	;make sure we dont overflow 35 bits
	CAMN	C,Z		;there before?
	 AOJA	E,D.RGHT	;  then better go right this time
	HRREI	A,(C)		;branch to left node
	AOJA	E,TOP		;and continue walking

D.RGHT:	IORI	B,1		;change pattern say "going right"
	HRRE	A,TREE.(A)	;branch to right node
	JUMPGE	A,.KIDS		;and continue walking [= JRST TOP]

MARKA:	TRNN	A,200000	;really negative?
	 TRZ	A,F.EOL		;nope, clear "sign" bit
	MOVEM	B,FREQ.0(A)	;store bit pattern in FREQ["character"]
	MOVEI	TEMP,(E)	;now increment total bits used
	IMUL	TEMP,@LPSA	;bits * number of times used
	ADD	F,TEMP		;and glom into total bits used
	IORI	A,F.EOL		;turn "sign" bit back on, just in case
.UP:	MOVEM	A,Z		;remember we were last here
	LSH	B,-1		;recover its bit string
	JUMPE	B,GOODRT	;if we slid off the top, we are done
	POP	D,A		;get parent node
	SOJA	E,TOP		;keep E in sync, and go

GOODRT:	MOVE	A,F		;get total number of bits needed
	IDIVI	A,=36		;make that words
	ADD	A,TREE.		;add in number of words for tree
	JUMPE	B,RETRNA	;if exactly 36N bits, we are done
	AOJA	A,RETRNA	;otherwise one more for last word
BADRT:	 HRROI	A,-1		;on bad return go negative
RETRNA:	SUB	P,[XWD 2,2]
	JRST	@2(P)
END
    