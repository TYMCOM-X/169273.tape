COMMENT \HISTORY
AUTHOR,SAIL,REASON
025  500300000023 \;
  DEFINE VERSION!NUMBER = '500300000023;


COMMENT \
VERSION 3-5(19) 21-NOV-80 BY SDD Rework some more, specify FAIL, ...
VERSION 3-4(18) 9-NOV-80 BY SDD Rework much, shorten output
VERSION 3-3(16) 10-JUL-79 BY SDD Isolate TempName, misc changes.
VERSION 3-3(15) 20-NOV-79 BY SDD put TYMSHARE RPG features under USERPG
VERSION 3-3(14) 1-OCT-79 BY SDD more ASCIIfy (note:file-names in ORDER?)
VERSION 3-3(13) 11-30-77 BY SDD remove non-ASCII chars where possible
VERSION 3-3(12) @ BY WFW lots of TYMSHARE stuff
VERSION 3-3(11) 1-11-74 BY JRL USE CMU VERSION
VERSION 3-3(10) 12-4-73 BY RHT ADD LIBHED KLUGE TO SCISS
VERSION 3-3(9) 12-4-73 
VERSION 3-3(8) 7-13-73 BY JRL AVOID "RENAME DIFFICULTY" FOR SAIREM
VERSION 3-3(7) 7-4-72 BY DCS FIX "D" BUG WHEN SELECTING FROM PROMPT
VERSION 3-3(6) 6-25-72 BY DCS ADD NAM COMMAND TO ORDER, LIBNAM FEATURE TO SCISS
VERSION 3-3(5) 5-23-72 BY DCS AVOID HDRFIL IF NOT NEEDED
VERSION 3-3(4) 2-24-72 BY DCS ADD RENSW CONTROL, CHANGE  PARAMETER INPUT
VERSION 3-3(3) 2-10-72 BY DCS ADD OVERRIDE CAPABILITY FOR INTERMEDIATE FILE CREATION
VERSION 3-3(2) 2-10-72 BY DCS UPGRADE ORDER BUSINESS
VERSION 3-3(1) 12-2-71 BY DCS INSTALL VERSION NUMBER

\;


begin "SCISS"
   DEFINE
	#="COMMENT",
    CRLF="('15&'12)", TAB="('11&null)", SPACE="('40&null)", 
    WILLDO="'1",HAVDON="'2",ERROR="'4",
    BIT (X,Y)="((Y) LAND (X))",
    PUTBIT(X,Y)="X_((X) LOR (Y))",
    REMBIT(X,Y)="X_((X) XOR (Y))",
    TYPE="OUTSTR(",EOM="&('15&'12))",
    WRITE="OUT(DSKO,",READ="INPUT(DSKI,1)",
    CONTROLC="'3",
    OneElement=2, TOCRLF=8, OVERDEL=9, COMDEL=11, KLUGETB=13
     ;
INTEGER BINI,BINO,COMO,FUNI,SYMO,TTY,DSKI,DSKO;
require "{}{}" delimiters;
   REQUIRE VERSION!NUMBER VERSION;
   STRING LIBNAM, HLBNAM,GASNAM;
   STRING STR,LINE,LINE1,COMNAM,TS,FILE,FFFF,GOGFIL;
   integer wom;	# write-only (for ref params);
   INTEGER I,J,TTYCHAR,FILCNT,SWITCH,W,BRKCHR,EOF,LOW,HIGH,BEOF,ENTSEEN;
   INTEGER SYMBOL,SYMBOLS,RELOC,CCOUT,SYMCNT,TYPP,COMNO,SEEN,IQ;
   INTEGER COMMNT, DSCRING, MAXTHS;
   INTEGER NOTINCOM, TEMPP, DOFAIL,CT,DOEXTR;
   INTEGER ENTPNT,DOHEAD,FILDEX,MAXFIL,GOGDO,EXTR,INTFIL; 
   INTEGER WANTNOHDR; 
   EXTERNAL INTEGER RPGSW;

   DEFINE MAXCOMP="70", EXTRACT="1", DOITBIT="4", HEADBIT="2"; 
   DEFINE KLUGEBIT="'4000", GOGBIT="8";
   STRING ARRAY ORDER,FILES[1:MAXCOMP]; INTEGER ARRAY BITS[1:MAXCOMP];
   INTEGER ARRAY SPEC[1:10],	BUFR,SYMBLOK[0:'23];
   STRING ARRAY FILLST[1:20];
   INTEGER ARRAY DOTHIS[1:20];
   INTEGER ARRAY ENTRS[0:299];

define Pass$Save= "(SITE3, EACHASK, WILLTELL, DELETING, 
			RENTLIB, DOLIB, GASLIB, BTHLIB)";
# pass-to-pass saved options.;
integer	SITE3;
boolean EACHASK, WILLTELL, DELETING, DOLIB, RENTLIB, GASLIB, BTHLIB; 
define	TYMSW ={site3=cvsix("TYM")},
	CMUSW ={site3=cvsix("CMU")},
	STANSW={site3=cvsix("SUA")};

IFCR declaration(tymswc)=0 thenc
 IFC EQU(COMPILER!BANNER[LENGTH(SCANC(COMPILER!BANNER,"-",NULL,
	"IA"))+1 FOR 8],"TYMSHARE") THENC
   DEFINE TYMSWC="TRUE"; ELSEC DEFINE TYMSWC="FALSE"; ENDC;
ENDC

ifcr declaration(default!site)=0
 thenc define default!site= 
		ifcr tymswc thenc {"TYMSHARE"} elsec {"SU-AI"} endc;
endc

require IFC TYMSWC THENC " [Tymshare" ELSEC " [Non-Tymshare" ENDC &
	" version '" & CVOS(version!number) & "]" MESSAGE;
integer wom;
integer COMDEL,

simple procedure setDelim(integer newDelim);
begin	own integer delim;
if newdelim neq delim 
 then breakset( comdel, delim_newdelim, null, "I" );
end;

   SETBREAK(COMDEL_getbreak, "$", NULL,"INS");
   SETBREAK(1, '26&'15, '12, "IN");	# break on CR and ^V (XOR);
   SETBREAK(oneElement, ","&'31&'15, null, "IS");
					# CR, comma, ^Y (rarrow);
   SETBREAK(TOCRLF,'12,'15&'14,"IN");
   SETBREAK(OVERDEL, tab & space, NULL,"XNR");
   SETBREAK(KLUGETB,'12,NULL,"INA");
   setdelim(0);	# force first setDelim to do a set;

simple string procedure getReply( string prompt );
begin
OUTSTR(prompt);
return( INCHWL );
end;

BOOLEAN simple PROCEDURE YESNO(STRING S);
begin	string YV;
do if "N"= (YV_ getReply(S&"?")) then return(false)
 until YV="Y";
RETURN( true )
end "YESNO";

simple BOOLEAN PROCEDURE SUBEQU(STRING S1,S2);
   RETURN(EQU(S1,S2[1 FOR LENGTH(S1)]));

simple string procedure getElement( reference string s );
	return( scan(s,oneElement,wom) );

Simple procedure sameLine( string class, text );
begin	own integer LineLeft;
	own string labeling;
if length(class)=0 or not equ(class,labeling)
 then begin
	outstr(crlf & class); 
	lineLeft_72-length(class);
	labeling_class;
      end;
LineLeft_ LineLeft - length(text) - 1;
if lineLeft < 0
 then begin outstr( crlf & tab ); LineLeft_ 72 - 8 - length(text); end
 else outchr(" "); 
outstr(text);
end;

Simple boolean procedure mayRead( integer chan; string fileName );
begin	boolean failure;
lookup( chan, fileName, failure );
return( failure );
end;

Simple boolean procedure mayWrite( integer chan; string fileName );
begin	boolean failure;
enter( chan, fileName, failure );
return( failure );
end;

Simple procedure mustRead( integer chan; string file );
while mayRead( chan, file )
   do begin 
	print(" Cannot read `", file, "', re-enter: ");
	file_ inchwl;
      end;

Simple procedure mustWrite( integer chan; string file );
while mayWrite( chan, file )
   do begin 
	print(" Cannot write `", file, "', re-enter: ");
	file_ inchwl;
      end;


INTEGER PROCEDURE FILTIM;
begin INTEGER ARRAY X[0:6];
FILEINFO(X);
RETURN ( 
	(IFC TYMSWC 
	 THENC (X[1] LAND '140000) LSH 9 
	 ELSEC (X[1] LAND '700000) LSH 8 
	ENDC) 
	LOR ((X[2] LAND '7777) LSH 11) 
	LOR ((X[2] LSH -12) LAND '3777));
END "FILTIM";

PROCEDURE CPYFIL(STRING F1,F2,FIRSTLINE);
begin	INTEGER I,J;
	STRING S;
mustRead(DSKI,F1);
mustWrite(DSKO,F2);
OUT(DSKO,FIRSTLINE);
DO OUT( DSKO, INPUT(DSKI,KLUGETB) ) UNTIL EOF;
CLOSE(DSKO);
CLOSE(DSKI);
end;

PROCEDURE TIMCHK(STRING product, sources; INTEGER NUM);
begin INTEGER productTime; STRING aSource; label doit;
if bthlib or rentlib
 then if mayRead(funi, "SAH" & (product[4 to INF])) 
	 then go doit
	 else productTime_ filtim;
if not rentlib
 then if mayRead(funi, product) 
	 then go doit
	 else productTime_ if bthlib then filtim min productTime 
				else filtim;

WHILE length( aSource_ getElement(sources) )
   do if mayRead(FUNI, aSource)
	or FILTIM geq productTime then go doit;
return;

DOIT: bits[num]_bits[num] lor doitbit;

END "TIMCHK";

	string simple procedure PassLeadingComment; 
	begin
	READ; # GET COMMENT LINE;
	READ; # GET REST OF COMMENT LINE;
	return(read);
	end;

procedure readOrder;
begin "readOrder"	string line, orderFile;
			boolean flag;

# READ IN THE ORDER CODE;
orderFile_ "ORDER" & "." & cv6str(site3);
mustRead( DSKI, orderFile );
MAXTHS_MAXFIL_0; arrclr(DOTHIS,FALSE);
line_ PassLeadingComment;

DO  begin "GSPEC"
      STRING namePiece, OtherFiles; 
	namePiece_line[1 TO 3]; OtherFiles_ line_line[5 TO INF];
      EXTR_0;
      IF EQU("NAM",namePiece) THEN begin "LIBRARY NAME"
	 LIBNAM_"LIBSA"&(namePiece_getElement(line))&".REL";
	 HLBNAM_"HLBSA"&namePiece&".REL";
	 GASNAM_"GLBSA"&namePiece&".REL";
      end "LIBRARY NAME" 
      ELSE IF EQU("ALL",namePiece) THEN
       WHILE LENGTH(line) DO begin "PREP HDRFIL"
	  namePiece_getElement(line); 
	  IF namePiece="!" THEN namePiece_GOGFIL_namePiece[2 TO INF];
	  FILLST[MAXFIL_MAXFIL+1]_namePiece;
	  DOTHIS[MAXFIL]_TRUE
       end "PREP HDRFIL"
      ELSE begin "LIB LIST"
	  IF EQU("HDR",namePiece) THEN begin "STD LIB"
	     IF line[INF FOR 1]="*" 
		THEN IF GASLIB THEN begin
		    OUTSTR(READ&
			" NOT BEING DONE BECAUSE THIS IS GASSY"&CRLF);
		    continue "GSPEC" end 
		ELSE line_line[1 TO INF-1];
	     EXTR_IF EQU(line,GOGFIL) THEN EXTRACT+GOGBIT ELSE EXTRACT;
	     FOR I_1 STEP 1 UNTIL MAXFIL 
		DO IF EQU(line,FILLST[I]) THEN DONE;
	     IF I>MAXFIL THEN FILLST[MAXFIL_MAXFIL+1]_line
	  end "STD LIB" 
	ELSE IF EQU("HED",namePiece) THEN EXTR_HEADBIT+KLUGEBIT
	ELSE IF EQU("FAI",namePiece) THEN EXTR_0 ELSE EXTR_KLUGEBIT;
	  LINE_(READ)[2 TO INF];
	while length(line) do begin "one lib"
		order[maxths_maxths+1]_ "SAI" & getElement(LINE);
		bits[maxths]_ extr;
		files[maxths]_OtherFiles;
	      end "one lib";
	end "LIB LIST"
    end "GSPEC"
 UNTIL SUBEQU("END",line_READ);
close(dski);
end "readOrder";
INTEGER HEADKLUGEDONE;		# A GREAT HAIRY KLUGE;
SIMPLE PROCEDURE KLGGZERO;HEADKLUGEDONE_0;
REQUIRE KLGGZERO INITIALIZATION;

PROCEDURE KLUGE(INTEGER COMNO);
IF RPGSW THEN BITS[COMNO]_BITS[COMNO] LOR DOITBIT
 ELSE	begin
	IF not (BITS[COMNO] LAND KLUGEBIT) THEN begin
		TIMCHK(ORDER[COMNO],FILES[COMNO],COMNO); RETURN; END;
	IF EQU(ORDER[COMNO],"SAIHED") THEN
		begin
		FILES[COMNO]_"SAIHED.FAI,HEAD";
		TIMCHK("SAIHED", "SAIHED.FAI,HEAD", COMNO);
		end
	ELSE IF EQU(ORDER[COMNO],"SAILEP") THEN
		begin
		CPYFIL("LEPRUN", "SAILEP.FAI", "SEARCH HDRFIL"&CRLF);
		TIMCHK("SAILEP", "LEPRUN,HDRFIL.FUN,GOGOL,HEAD", COMNO);
		FILES[COMNO]_"SAILEP.FAI/R";
		end
	ELSE IF EQU(ORDER[COMNO],"SAIREM") THEN
		begin
		CPYFIL("WRDGET", "SAIREM.FAI", "SEARCH HDRFIL"&CRLF);
		TIMCHK("SAIREM", "WRDGET,HDRFIL.FUN,GOGOL,HEAD", COMNO);
		FILES[COMNO]_"SAIREM.FAI/R";
		end
	ELSE	begin
		OUTSTR("SURPRISE USE OF HAIRY KLUGE: "&ORDER[COMNO]&"
TYPE ANY KEY TO GO ON (SHOULD BE OK)");
		INCHRW;
		TIMCHK(ORDER[COMNO],FILES[COMNO],COMNO);
		end;
	end;


   PROCEDURE LIBHED(STRING FLN);  # PROCEDURE TO GROVEL OVER SAIHED.REL;
   begin "LIBHED"
      INTEGER COUNT,TYPEWD,BLKSIZ,BRK,EOF; DEFINE SRC="BINI",DST="BINO";
      INTEGER PERLINE;
      INTEGER ARRAY BLOCK[0:17];

      PROCEDURE GETBLK;
      begin "GETBLK"
	 IF COUNT=0 THEN begin
	    TYPEWD _ WORDIN(SRC);
	    COUNT _ TYPEWD LAND '777777;
	    TYPEWD _ TYPEWD LSH -18
	 end;
	 WORDIN(SRC);
	 ARRYIN(SRC,BLOCK[0],BLKSIZ _ COUNT MIN 18);
	 COUNT _ COUNT - BLKSIZ
      end "GETBLK";

      PROCEDURE PUTBLK(INTEGER TYP, VAL1, VAL2);
      begin "PUTBLK"
	 INTEGER CT;
	 WORDOUT(DST,TYP LSH 18 + (CT_CASE TYP OF (0,0,2,0,1,1,2)));
	 WORDOUT(DST,IF TYP=5 THEN '2 LSH 33 ELSE 0);
	 WORDOUT(DST,VAL1);
	 IF CT=2 THEN WORDOUT(DST,VAL2);
      end "PUTBLK";

      STRING PROCEDURE R50TO7(INTEGER SYM); begin "R50TO7"
	# CONVERT RADIX50 TO ASCII;
		string result; INTEGER CHAR; 
	result_ NULL;
	while sym > 0
	   do begin
		CHAR_SYM MOD '50;
		result_ (case CHAR of
			 ([37] "."+0, [38] "$"+0, [39] "%"+0,
			  [ELSE] (IF CHAR LEQ 10 
				  THEN CHAR-1+"0" ELSE CHAR-11+"A")
			)) & result;
		SYM_ SYM DIV '50;
	      end;
	RETURN(result) 
	end "R50TO7";

      IF not DOLIB THEN RETURN;

      OUTSTR("COPYING (SPECIALLY) SAIHED.REL
");

      mustRead(SRC,FLN);

      PERLINE_COUNT_0;
      DO GETBLK UNTIL TYPEWD=2;
	SYMO_GETCHAN;
      OPEN(SYMO,"DSK",0,0,3,I,I,I);
	 IF I THEN USERERR(0,0,"NO DSK TODAY");
      mustWrite(SYMO,"GOGTAB.DEF");
      OUT(SYMO,"REQUIRE ""[][]"" DELIMITERS;"&CRLF&
	"COMMENT SYMBOLIC USER TABLE INDICES");
      DO begin		INTEGER B,C;
	 C_BLOCK[0];
	 IF C Lsh (4-36) = ('44 lsh -2) THEN begin
	    PUTBLK(4,B_C LAND (-1 lsh -4), 0);
	    PUTBLK(6,B,0);
	    PUTBLK(2,C,BLOCK[1]);
	    IF not (PERLINE LAND '37)
	     THEN OUT(SYMO,";"&CRLF&CRLF&"DEFINE ")
	     ELSE OUT(SYMO,IF not (PERLINE LAND 3)
				 THEN ","&CRLF ELSE ",");
	    OUT(SYMO,R50TO7(B)&"=['"&CVOS(BLOCK[1])&"]");
	    PERLINE_PERLINE+1;
	    PUTBLK(5,0,0);
	 end;
	 GETBLK
      end UNTIL TYPEWD=5;
      OUT(SYMO,";"&CRLF&CRLF&"REQUIRE UNSTACK!DELIMITERS;");
      RELEASE(SYMO);

   # AS FUDGE2 DOES NOT COPY THE LAST ELEMENT WE MUST PROVIDE A DUMMY;
      PUTBLK(0,0,0);

      CLOSE(SRC);
   end "LIBHED";


simple procedure DELETE( string Name );
begin	integer flag;
IF not mayRead(BINI, Name)
 then begin	# otherwise, not there anyway;
	RENAME (BINI,"",0,flag);
	IF flag THEN OUTSTR( "RENAME (DELETE) PROBLEM WITH " & Name );
      end;
CLOSE (BINI);
end;
   PROCEDURE LIBMAK  (STRING F;INTEGER ITYP);
   begin
      STRING FILN; INTEGER ETWAS;
      BEOF_ENTPNT_ETWAS_0;
      IF DELETING THEN begin DELETE(F&".FAI"); ETWAS_TRUE; end;
      FILN_F&".REL";
      IF ITYP NEQ 0 THEN FILN_"SAH"&FILN[4 TO INF];
      IF EQU(F,"SAIHED")  THEN
       LIBHED(FILN)
	ELSE IF DOLIB THEN begin "COP FIL"
	   if bEof_ mayRead(BINI,FILN)
	    then sameLine("MISSING ",FILN)
	    else sameLine( "COPYING ",FILN);
	   ETWAS_TRUE;
	   SYMBLOK[1]_SYMCNT_0;
	   WHILE not BEOF DO begin "COP BLK"
		DEFINE WORD="BUFR[0]";
	      DO WORD _ WORDIN(BINI) UNTIL WORD or BEOF;
	      TYPP_WORD LAND '000077000000;
	      CCOUT _ WORD LAND '777 ;
	      ARRYIN (BINI,BUFR[1],(CCOUT*19+17)/18);
	      IF TYPP='4000000 THEN begin "ENTRY BLOCK"
		 ARRBLT(ENTRS[ENTPNT],BUFR[2],CCOUT);
		 ENTPNT_ENTPNT+CCOUT;
	      end "ENTRY BLOCK" ELSE
	      begin "NOT ENTRY"
		 IF ENTPNT THEN begin "WRITE ENTRY"
		    WORDOUT(BINO,'4000000+ENTPNT);
		    FOR I_0 STEP 18 UNTIL ENTPNT-1 DO begin "WR ECH"
		       WORDOUT(BINO,0);
		       ARRYOUT(BINO,ENTRS[I],18 MIN (ENTPNT-I));
		    end "WR ECH"
		 end "WRITE ENTRY";
		 ENTPNT_0;
		 IF TYPP = '5000000 AND SYMCNT THEN begin "END BLOCK"
			# THIS IS THE END BLOCK -- FORCE OUT SYMBOLS.;
		    SYMBLOK[0] _ '2000000 +SYMCNT ;
		    ARRYOUT (BINO,SYMBLOK[0],SYMCNT+2);
		 end "END BLOCK";
		 IF TYPP  neq '2000000  THEN begin "NOT SYMBOLS"
			# copy the block to the output file;
		    ARRYOUT (BINO,BUFR[0],CCOUT+2);
		 end "NOT SYMBOLS" ELSE
		# THESE ARE SYMBOLS. COPY THEM IF SYMBOLS ARE REQUESTED.
		  OTHERWISE, IGNORE UNLESS INTERNAL OR EXTERNAL.;
		 FOR I_2 STEP 2 UNTIL CCOUT+1 DO
		  IF LDB(POINT(1,BUFR[I],2)) neq 1 THEN
		   begin "SYMS"
		      SYMCNT _ SYMCNT +2;
		      SYMBLOK[SYMCNT]_BUFR[I];
		      SYMBLOK[SYMCNT+1]_BUFR[I+1];
		      SYMBLOK[1]_SYMBLOK[1] LOR (((BUFR[1]
		       ROT (2*I)) LAND '17 ) ROT (-2*SYMCNT));
		   # LAST LINE WAS UPDATING RELOCATION BITS.;
		      IF SYMCNT ='22 THEN begin
			 SYMBLOK[0] _ '2000022 ;
			 ARRYOUT (BINO,SYMBLOK[0],'24);
			 SYMCNT_SYMBLOK[1]_0;
		      end;
		   end "SYMS";
		 IF TYPP ='5000000 THEN DONE
	      end "NOT ENTRY"
	   end "COP BLK"
	end "COP FIL";
      IF DELETING
	 THEN begin CLOSE (BINI); delete( FILN ); end;
   end;

# -- BLOCK TYPE MISMATCH -- HAVE"YESNO", NEED ;

   STRING PROCEDURE COMPRESS(STRING L,M);
   RETURN( IF DSCRING or NOTINCOM or M=";" or LENGTH(M)=0
	   or SUBEQU("COMPIL",M) 
		THEN NULL ELSE (L&CRLF)
   );

   PROCEDURE GETLINE;
   begin "GETLINE"
      LINE1_LINE_INPUT(DSKI,TOCRLF);
      TS_SCAN(LINE1,OVERDEL,I);
      IF not DSCRING and SUBEQU("DSCR",LINE1) THEN DSCRING_TRUE;
      IF SUBEQU("COMMENT",LINE1) or 
       SUBEQU("Comment",LINE1) or 
	SUBEQU("comment",LINE1) THEN
	 begin	integer delim;
	    TS_SCAN(LINE1_LINE1[8 TO INF],OVERDEL, delim);
	    SETDELIM( lop(line1) );
	    TS_SCAN(LINE1,COMDEL,BRKCHR); 
	    WHILE BRKCHR neq DELIM and not eof DO INPUT(DSKI,COMDEL);
	    if eof then usererr(0,0,"Open comment ending " & file);
	 end;
      OUT(DSKO,COMPRESS(LINE,LINE1));
      IF DSCRING and (LINE1='26 or LINE1=";") THEN DSCRING_FALSE;
   end "GETLINE";

   BOOLEAN PROCEDURE FIND(STRING S; reference integer index);
   begin "FIND"
      FOR index_1 STEP 1 UNTIL MAXTHS DO
       IF EQU(S,ORDER[index]) THEN RETURN(TRUE);
      RETURN(FALSE)
   end "FIND";

   PROCEDURE MARKIT(INTEGER C);
   begin
      INTEGER I;
      FOR I_1 STEP 1 UNTIL MAXFIL DO
       IF EQU(FILES[C],FILLST[I]) AND (BITS[C] LAND DOITBIT) THEN begin
	  IF BITS[C] LAND GOGBIT THEN GOGDO_TRUE;
	  DOTHIS[I]_TRUE; DONE
       end;
      IF BITS[C] LAND EXTRACT THEN FILES[C]_ORDER[C]&"/R";
   end "MARKIT";
procedure askOptions;
begin "askOptions"
	STRING ANSWER; 
	INTEGER FROMPASS1;

  do  begin
	SITE3_CVSIX( getReply("SITE ID (<CR> OK FOR " 
				& default!site & ") = ") );
	if site3=0 then site3_ cvsix( default!site );
	if site3=cvsix("SU-AI") then site3_ cvsix("SUAI");
      end
 until 0 neq site3_site3 land (-1 lsh 18);

IF TYMSW THEN DELETING_FALSE;

IF YESNO("STANDARD") THEN return;

OUTSTR("
TYPE THE NUMBERS OF THOSE PARAMETERS YOU WISH TO AFFECT:
 INDEX	DESCRIPTION
");
OUTSTR(IF not RPGSW THEN "
   1	PASS 2 NOW
   2	DON'T CHAIN TO FAIL
   3	DON'T CREATE INTERMEDIATE FILES
   4	MAKE RE-ENTRANT LIBRARY
   5	SELECT ENTRIES FROM PROMPT-LIST
   6	SPECIFY ENTRIES EXPLICITLY
   7	DON'T DELETE INTERMEDIATE FILES (PASS 2)
   8	DON'T MAKE A LIBRARY (PASS 2)
   9	MAKE LOW SEG LIBRARY
  10	DO DELETE INTERMEDIATE FILES (PASS 2)
" ELSE "
   4	MAKE A RE-ENTRANT LIBRARY
   5	SELECT ENTRIES FROM PROMPT-LIST
   6	SPECIFY ENTRIES EXPLICITLY
   7	DON'T DELETE INTERMEDIATE FILES
   8	DON'T MAKE A LIBRARY
   9	MAKE LOW SEG LIBRARY
  10	DO DELETE INTERMEDIATE FILES
");
IF CMUSW THEN OUTSTR( "  11	MAKE GAS LIBRARY (IMPLIES REENTRANT)
");
ANSWER_getreply("*");
FROMPASS1_FALSE;
WHILE LENGTH(ANSWER) DO begin INTEGER I;
	 CASE I_ INTSCAN(ANSWER,I) OF begin
	    [0]  begin end;
	    [1]	 if not RPGSW then RPGSW_ FROMPASS1_TRUE;
	    [2]	 if not RPGSW then DOFAIL_FALSE;
	    [3]	 if not RPGSW then INTFIL_FALSE;
	    [4]	 RENTLIB_TRUE;
	    [5]	 EACHASK_TRUE;
	    [6]	 WILLTELL_TRUE;
	    [7]	 DELETING_FALSE;
	    [8]  DOLIB_FALSE;
	    [9]  BTHLIB_FALSE;
	    [10] DELETING_TRUE;
	    [11] IF CMUSW THEN RENTLIB_GASLIB_TRUE 
		ELSE outstr("Only CMU has GAS libraries");
	    [ELSE] OUTSTR( CVS(i) & " Invalid -- IGNORED" & crlf )
	  end;
      end;
end "askOptions";
simple string procedure tempName(string name3);
begin integer w,d; string result;
getformat(w,d); setformat(-3,0); 
result_ CVS( CALL(0,"PJOB") ) & name3 & ".TMP";
setformat(w,d);
return(result);
end;

procedure getOptions;
begin "getOptions"	INTEGER RPGCHL,RPGEOF; 
IF RPGSW THEN begin
   OPEN (RPGCHL_GETCHAN,"DSK",'14,1,0,RPGEOF,RPGEOF,RPGEOF);
   if not rpgEof_ mayRead(RPGCHL, tempName("SCI"))
    then begin
	FORLC $switch$ = Pass$Save DOC "$switch$_wordin(rpgchl);" ENDC
	if wordin(rpgchl) neq version!number
	or wordin(rpgchl) neq call(0,"PJOB")
	or rpgeof
	 then usererr(0,1,"Temp File failure!")
	 else rename(rpgchl,"",0,i)nd;
   release(rpgchl)
   END;

IF RPGEOF OR NOT RPGSW THEN askOptions;

IF NOT RPGSW THEN begin
   OPEN (RPGCHL_GETCHAN,"DSK",'14,0,1,RPGEOF,RPGEOF,RPGEOF);
   if not mayWrite(RPGCHL, tempName("SCI"))
    then begin
   	FORLC $switch$ = Pass$Save DOC "wordout(rpgchl,$switch$);" ENDC
	wordout(rpgchl, version!number);
	wordout(rpgchl, call(0,"PJOB"));
	WORDOUT(RPGCHL,0); # keep EOF from being reached on input;
	end;
   RELEASE(RPGCHL) 
   END
end "getOptions";
procedure CollectLibrary(string name);
begin
I_0;
mustWrite(BINO, name);
FOR COMNO_1 STEP 1 UNTIL MAXTHS 
   DO IF BITS[COMNO] LAND DOITBIT THEN LIBMAK (ORDER[COMNO],IQ);
CLOSE (BINO);		# THIS IS THE LIBRARY;
END;

Procedure pass2;
begin "SECOND PASS -- PROCESS LIBRARY"
IF DELETING AND not WANTNOHDR
 THEN begin 
	delete("HDRFIL");
	IF RENTLIB OR BTHLIB THEN delete("SAIREN.FAI");
      end;
IF DOLIB
 THEN begin
	if gaslib
	 then CollectLibrary( GASNAM )
	 else begin
		if not rentlib then CollectLibrary( LIBNAM );
		if rentlib or bthlib then CollectLibrary( HLBNAM );
	      end;

	if tymsw
	 THEN begin TYPE "RUN CARMEL ON YOUR NEW LIBRARY(S)!" EOM end
      end
 ELSE begin TYPE "READY FOR WHATEVER" EOM end;

end "SECOND PASS -- PROCESS LIBRARY";
procedure pass1;
begin "FIRST PASS"
      INTEGER PTYSW;

      mustWrite(COMO,COMNAM);
      DOHEAD_DOEXTR_FALSE;

      # Check creation date of HDRFIL.FUN to see if we need a new one;
      if mayRead(FUNI,"HDRFIL.FUN") 
       THEN WANTNOHDR_FALSE
       ELSE begin	INTEGER FUNTIM,HEDTIM;
	    FUNTIM_FILTIM; CLOSE(FUNI);
	    mustRead(FUNI,"HEAD"); HEDTIM_FILTIM; CLOSE(FUNI);
	    mustRead(FUNI,gogfil); HEDTIM_FILTIM MAX HEDTIM; CLOSE(FUNI);
	    WANTNOHDR_ FUNTIM > HEDTIM;
	    end;
      IF not WANTNOHDR THEN OUT(COMO,"HDRFIL/R_HDRFIL"&CRLF);
      IF not WANTNOHDR THEN sameLine( "WILL ASSEMBLE: ", "HDRFIL" );
      FOR COMNO_1 STEP 1 UNTIL MAXTHS 
       DO IF BITS[COMNO] LAND DOITBIT
	 THEN begin	STRING SRCFIL;
		IF BITS[COMNO] LAND (EXTRACT LOR KLUGEBIT)
			THEN DOEXTR_TRUE;
		IF BITS[COMNO] LAND HEADBIT THEN DOHEAD_TRUE;
		IF RENTLIB OR BTHLIB
		 THEN OUT (COMO, "SAH" & ORDER[COMNO][4 TO INF]
			& "/R_SAIREN.FAI," & FILES[COMNO] & CRLF);
		IF NOT RENTLIB
		 THEN OUT(COMO,ORDER[COMNO] & "/R_" & FILES[COMNO] & CRLF);
		sameLine( "WILL ASSEMBLE: ", ORDER[COMNO] );
	       end;
      SameLine(null,null);
      OUT(COMO,"DSK:SCISS!"&CRLF);
      CLOSE(COMO); CLOSE(DSKO);
      IF RENTLIB OR BTHLIB THEN begin
	 mustWrite(DSKO,"SAIREN.FAI");
	 OUT(DSKO,"?RENSW__1"&CRLF&CRLF);
	IF GASLIB THEN OUT(DSKO,"?GASSW__1"&CRLF&CRLF);
	 CLOSE(DSKO)
      end;
      IF DOHEAD and INTFIL THEN begin
	 mustWrite(DSKO,"SAIHED.FAI");
	 WRITE CRLF&"?HEDSYM__1" EOM;
	 CLOSE (DSKO);
      end;


      IF INTFIL and DOEXTR THEN begin "CR INT FIL"
	 NOTINCOM_wantNoHdr;
	    mustWrite(DSKO,IF WANTNOHDR THEN "JUNK" ELSE "HDRFIL.FAI");
	    WRITE "
UNIVERSAL HDRFIL
?ALWAYS__0" EOM;
	 CT_0; PTYSW_0; FILDEX_0;
	 WHILE TRUE DO begin "DO FILE"
	    PROCEDURE OPNFIL; begin "OPNFIL"
	    IF SUBEQU("HEAD",FILLST[FILDEX+1]) AND WANTNOHDR
		 THEN FILDEX_FILDEX+1;
	    WHILE (FILDEX_FILDEX+1) leq MAXFIL 
		DO IF DOTHIS[FILDEX] THEN begin
			FILE_FILLST[FILDEX];
			CLOSE(DSKI);
			DSCRING_FALSE;
			sameLine("LOOKING AT ", FILE );
			mustRead(DSKI,FILE); 
			return;
		       end;
	    end "OPNFIL";

	    OPNFIL; IF FILDEX>MAXFIL THEN DONE;
	    DO begin "READ THE LINES"
	       GETLINE;
	       IF SUBEQU("COMPIL",LINE) THEN begin "IS A COMPILE"
		  IF CT=MAXTHS+1 or not PTYSW and CT=MAXTHS THEN DONE;
		  IF EQU(FILE,GOGFIL) and not GOGDO THEN
		   begin
		      OUTSTR("ABANDONING "&FILE&" AFTER HDRFIL"&CRLF);
		      WRITE "END" EOM; # END OF UNIVERSAL FILE;
		      OPNFIL;IF FILDEX>MAXFIL THEN done "DO FILE"
		   end;
		  IF FIND(TS_"SAI"&LINE[8 FOR 3], COMNO) and 
		   BITS[COMNO] LAND (DOITBIT+EXTRACT)=DOITBIT+EXTRACT THEN
		    begin "WANT THIS ONE"
		       NOTINCOM_FALSE; WRITE "END" EOM; CLOSE(DSKO);
		       CT_CT+1;
		       mustWrite(DSKO, TS&".FAI");
		       sameLine( "FOUND ", TS);
		       IF EQU(TS,"PTY") THEN PTYSW_TRUE;
		       COMMNT_DSCRING_FALSE;
			WRITE "SEARCH HDRFIL" EOM;
		       WRITE LINE EOM
		    end "WANT THIS ONE"
		    ELSE NOTINCOM_TRUE
	       end "IS A COMPILE"
	       ELSE IF not NOTINCOM and SUBEQU("ENDCOM",LINE1)
		THEN NOTINCOM_TRUE;	# "There";
	    end "READ THE LINES"
	     UNTIL EOF or ((MAXTHS=CT) and not PTYSW) or (CT=MAXTHS+1);
	    IF MAXTHS=CT and not PTYSW or CT=MAXTHS+1 THEN DONE;
	 end "DO FILE";
      end "CR INT FIL";
      CLOSE(DSKO);

   # NOW CHAIN TO FAIL, ONE WAY OR ANOTHER;

      SPEC[1]_CVSIX("SYS");
      SPEC[2]_CVFIL(IF STANSW THEN "FAIL.DMP" ELSE "FAIL",SPEC[3],SPEC[5]);
      SPEC[4]_IF STANSW THEN 1 ELSE 0;
      SPEC[6]_0;
      IF DOFAIL THEN CALL(
       (IF STANSW THEN 0 ELSE '1000000)+ location(SPEC[1]),
       IF STANSW THEN "SWAP" ELSE "RUN"	   );
   end "FIRST PASS";

COMMENT MAIN EXECUTION STARTS HERE;
BOOLEAN oldTTY;

   OPEN(DSKI_getchan,"DSK",1,  2,0, 400,BRKCHR,EOF);
   OPEN(DSKO_getchan,"DSK",1,  0,2,  00,W,W);
   OPEN(BINI_getchan,"DSK",'10,4,0, 400,BRKCHR,BEOF);
   OPEN(BINO_getchan,"DSK",'10,0,4,  00,W,W);
   OPEN(COMO_getchan,"DSK",1,  0,2,  00,W,W);
   OPEN(FUNI_getchan,"DSK",0,  0,0,   I,I,I);


   GASLIB_EACHASK_WILLTELL_GOGDO_RENTLIB_WANTNOHDR_FALSE;
   BTHLIB_DELETING_DOLIB_DOHEAD_DOEXTR_DOFAIL_INTFIL_TRUE;
   oldTTY_ ttyup(true);

   getOptions;
   IF RENTLIB THEN DOLIB_TRUE;
   COMNAM_TempName("FAI");
   GOGDO_FALSE; # ON IF COMPIL SPEC WANTS GOGOL;
   ReadOrder;

   IF not WILLTELL THEN begin "GET ORDER"
      INTEGER K,KK,J; K_0;
      IF EACHASK THEN TYPE "TYPE `Y', `N', OR `DONE'" EOM;
      FOR I_1 STEP 1 UNTIL MAXTHS DO begin
	 TS_ORDER[I];
	 IF not EACHASK or (KK_YESNO(TS))="Y" 
		THEN begin KLUGE(I); MARKIT(I) end
	 ELSE IF KK="D" 
		THEN IF (I_I-1)<0 or K=0 
			THEN DONE 
			ELSE EACHASK_FALSE;
	 K_KK
      end
   end "GET ORDER" ELSE
   begin "TAKE ORDER"
      TYPE "TYPE LIBRARY TITLES, `DONE' WHEN DONE" EOM;
      WHILE not EQU("DONE",TS_getReply("*")) DO begin
	IF LENGTH(TS)=3 then ts_ "SAI" & ts;
	IF SUBEQU("SAI",TS) and LENGTH(TS)=6 and FIND(TS,COMNO)
	 THEN begin KLUGE(COMNO); MARKIT(COMNO) end
	 ELSE outstr( TS & " INVALID -- TRY AGAIN " & crlf );
       end;

   end "TAKE ORDER";

ttyup( oldTTY );
IF RPGSW THEN pass2 ELSE pass1;

end "SCISS";
  I\@