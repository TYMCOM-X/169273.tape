entry makFsm, useFsm, useFst;
begin "slbFsm"

require "{}{}" delimiters;
define !={comment}, eif={else if};
define routine={simple procedure};
let r!p=record!pointer;


external record!class targ (string str; r!p (targ) backpointer, link);

external integer !skip!;

record!class tg (string s; integer state;
		r!p (targ) base; r!p (tg) link );

record!class fsm ( integer state0, state, char, tran0, recog0, spec ;
		   r!p (targ) array recognizes;
		   integer array translation, machine );
define	fsm.state0 = 1, fsm.state  = 2,
	fsm.tran0  = 4, fsm.recog0 = 5, fsm.spec = 6;
define acState = 2, acChar = 3, acFsm = 4;

simple procedure fatal(string m); usererr(0,0,"search FATAL:"&m);
simple procedure nonfatal(string m); usererr(0,1,m);
simple procedure int1!verify( integer array ar; integer lower, upper );
if arrinfo(ar,-1) neq 1
or arrinfo(ar,1) > lower or arrinfo(ar,2) < upper
 then fatal( "conform1: bad array passed" );

simple procedure int2!verify( integer array ar;
			integer low1, upper1, low2, upper2 );
if arrinfo(ar,-1) neq 2
or arrinfo(ar,1) > low1 or arrinfo(ar,2) < upper1
or arrinfo(ar,3) > low2 or arrinfo(ar,4) < upper2
 then fatal( "conform2: bad array passed" );

simple procedure rec1!verify( r!p (any!class) array ar;
				integer lower, upper );
	start!code jrst int1!verify; end;
integer routine orBits(string s);
start!code	define a=1, len=2,ptr=3,ch=4, sp='16; label lup,exit;
	movei	a,0;	! clear result;
	hrrz	len,-1(sp);	! get length;
	jumpe	len,exit;
	move	ptr,(sp);	! get byte pointer;
lup:	ildb	ch,ptr;
	ior	a,ch;
	sojg	len,lup;
exit:
end;
integer routine minimumByteSize(integer char);
! returns smallest necessary string width to hold the character
! [note: minimum string width is 1, hence f(0)=1, not 0
;
start!code	define a=1; label addr;
	move	a,char;
	jffo	a,addr;
	movei	a+1,35;
addr:	movei	a,36;
	subi	a,(a+1);
end;
r!p (tg) procedure compress( reference integer totalWords, totalChars;
			string omits; r!p (targ) ch; integer ByteSize );
! returns a head of class tg with two linked lists coming off:
  (on tg:link):  the tg's for all non-null targ's
			:s is the non-ignore string (may be masked)
			:base points to the targ this came from
				(the targ's backpointer is cleared)
			:link points to next of these tg's
  (on tg:base):  the targ's which were actually null strings
			:backpointer points to next of these targs
			all other fields are undisturbed
;
begin "compress strings"
		r!p (tg) new!tg, result;
		integer omit!table, byteSize;
if length(omits)
 then setbreak( omit!table_getbreak, null, omits, "IZ" )
 else omit!table_ 0;

	! machine runs: [0:max,-1:chardistinct];

result_ new!record (tg);
totalChars_ totalWords_ 0;

while ch
   do begin	string s;
	targ:backpointer [ch]_ null!record;
	s_targ:str [ch];  
	if width(s) > ByteSize then s_ str!w(s,ByteSize);	! mask;
	if length(s) 
	and length(s_ scan(s,omit!table,!skip!))	! drop omits;
	 then begin
		targ:backpointer [ch]_ null!record;
		new!tg_ new!record (tg);
		tg:s [new!tg]_ s;
		tg:base [new!tg]_ ch;
		tg:link [new!tg]_ tg:link [result];
		tg:link [result]_ new!tg;
		totalWords_ totalWords+1;
		totalChars_ totalChars + length(s);
	      end
	 else begin
		targ:backpointer [ch]_ tg:base [result];
		tg:base [result]_ ch;
	      end;
	ch_ targ:link [ch];
      end;
if omit!table then relbreak( omit!table );
return( result );
end "compress strings";
integer procedure copy!equivs(	reference integer totWords, totChars;
				reference r!p (tg) setup;
				safe integer array trantab, equivs;
				r!p (targ) targets );
begin	integer i,j,k, code, maxChr, byteSize;
	string omits;
	r!p (tg) chase;
maxChr_ arrinfo(equivs,2);
ByteSize_ minimumByteSize( arrinfo(trantab,2) );
arrclr(trantab);
for i_ maxChr step -1 until -1
   do if -2 < (j_equivs[i]) leq maxChr
      and trantab[j]=0
	then trantab[j]_ i+2	! make -1 if sure safe;
	else fatal("bad equivalence table at character " & cvs(i));
! now we know that equivs is well-formed [has -1:maxchr, 1 copy each];

arrclr(trantab);
if 0 > i_ equivs[-1]
 then omits_ null
 else begin
	trantab[i]_ acState lsh 18;
	omits_ char!w( i, ByteSize );
	while 0 leq i_equivs[i]
	 do begin trantab[i]_ acState lsh 18; omits_ omits & i; end;
      end;
setup_ compress( totWords, totChars, omits, targets, ByteSize );

chase_ setup; code_ acState lsh 18;
while chase_ tg:link [chase]
   do begin	string s;
	s_tg:s [chase];
	while length(s)
	   do if tranTab[i_lop(s)] = 0 
		 then begin
			trantab[i]_ code_ code + 1;
			if (k_i) leq maxChr
			 then while k neq i_equivs[i]
				do trantab[i]_ code;
		      end;
      end;
for i_ arrinfo(trantab,2) step -1 until -1
   do if 0 = trantab[i] then trantab[i]_ acFsm lsh 18 + fsm.state0;
trantab[-3]_ -1 lsh ByteSize;
trantab[-2]_ ('405 rot -9) + (acChar rot -13) + lnot tranTab[-3];
		! = ANDI acChar,ByteMask;
return( code land '777777 );
end;
procedure fillit( integer array machine, translates;
		  r!p (targ) array recarr;
		  r!p (tg) copies );
begin "fillit"
	integer recarr!ind;
	define tail(x) = {memory [x-1]};
	define character!index(x) = {(translates [x] land '777777)};

	integer routine dispatch( integer loc, c!index );
	  return( if loc then memory[ loc + c!index ] land '777777
			 else location( machine[0,0] ) );

	routine set!dispatch( integer loc, c!index, newv );
	  if dispatch(loc, c!index)
	   then fatal( "over-writing dispatch" )
	   else start!code protect!acs 1,2;
		move	1,loc;
		add	1,c!index;
		hrrz	2,newv;
		hrrm	2,(1);
		end;

	integer routine new!entry( r!p (targ) rec );
	  begin
		recarr [recarr!ind_recarr!ind-1]_ rec;
		return( -recarr!ind );
	  end;

	integer routine recognition( integer loc, c!index );
	! return( if loc then -(memory[ loc + c!index ] ash -18)
			 else 0 );
	  start!code	protect!acs 1; label rtrn;
		skipn	1,loc;
		 jrst	rtrn;
		add	1,c!index;
		hlre	1,(1);
		movn	1,1;
	  rtrn:
	  end;

	procedure splice( integer high!index, low!index );
	 begin	r!p (targ) lowp, highp, chase;
	 ! ** debugging code: ;
		integer count;
	  if not (0 < low!index < high!index)
	   then fatal("bad splice index");
	  if null!record=(lowp_recarr[-low!index])
	  or null!record=(highp_recarr[-high!index])
	   then fatal("null splice");
	  if lowp=highp then fatal("splice same");
	  count_1; chase_lowp;
	  while chase
	   do begin
		count_count+1;
		if chase=highp then fatal("splice backward");
		chase_ targ:backpointer [chase];
	      end;
	 ! ** debugging code (plus set lowp and highp)^^;
	 chase_ highp;
	 while targ:backpointer [chase]
	   do begin
		chase_targ:backpointer [chase];
		if chase = lowp then return;
		! ** debugging code line: ; count_count+1;
	      end;
	 targ:backpointer [chase]_ lowp;
	 ! ** debugging code;
	 chase_ highp;
	 for count_count step -1 until 0
	   do if null!record = chase_ targ:backpointer [chase]
		then return;	! checking for infinite loop;
	 fatal("I think splice made a loop");
	 ! ** debugging code ^^;
	 end;

	routine set!recognition( integer loc, c!index, valu );
	  begin		integer oldr;
	    if loc=0 or valu leq 0 then fatal( "set bad recognition" );
	    if valu > oldr_ recognition( loc, c!index )
	     then start!code	protect!acs 1,2;
			move	1,loc;
			add	1,c!index;
			movn	2,valu;
			hrlm	2,(1);
		  end
	     else valu swap oldr;
	    if 0 neq oldr neq valu then splice( valu, oldr );
	  end;
	integer completed, topstate, midprocess, state!size;
	integer maxchar!index;
	r!p (tg) chase, chase2;

if copies=null!record or tg:link [copies]=null!record
 then fatal( "bad array size or linked list" );
int2!verify( machine, 0,1, -1,1 );
rec1!verify( recarr, -1,0 );


! now build a trie for the strings;
state!size_ location(machine[1,0]) - location(machine[0,0]);
topstate_ location(machine[0,0]);	machine[0,0]_ topstate;
completed_ topstate-state!size;
maxchar!index_ arrinfo( machine, 4 );	! maximum second index;
arrclr( recarr );	recarr!ind_ 0;
chase_copies; while chase_tg:link[chase] do tg:state[chase]_topstate;

while tg:link [chase_ copies]	! while any strings to insert;
			! make chase head of list of those left;
  do  begin "one level"		! one character from each target;
	! 0:completed -- fully processed states (all entries correct);

	midprocess_ topstate;
	! completed+1 : midprocess -- not all recognized marked;
	! midprocess+1 : topstate -- new entries (only have GCTAIL);

	while chase2_ tg:link [chase]		! need link to delete;
	   do begin "one character"
			integer char, father;
		char_ character!index( lop(tg:s [chase2]) );
		father_ tg:state [chase2];
		if length(tg:s [chase2]) = 0
		 then begin	integer r;   ! recog code for chase2;
			r_new!entry( tg:base [chase2] );
			tg:link [chase]_ tg:link [chase2];
				! can now delete(chase2);
			set!recognition( father, char, r );
			continue "one character";
		      end
		eif dispatch( father, char ) = 0
		 then begin "construct new state"
				integer gctail, element;
			gctail_ dispatch( tail(father), char );
			! element_ new!state( gctail );
			  element_ topstate_ topstate+state!size;
			  memory[element-1]_ gctail;
			  memory[element]_ element;
			set!dispatch( father, char, element );
		      end "construct new state";
		tg:state [chase2]_ dispatch( father, char );
		chase_ chase2;	! proceed along link, keeping target;
	      end "one character";
	! now completed+1:midprocess are filled with all trie entries;
	! and midprocess+1:topstate have all trie entries except recog;
	!				(and have gctail set for them);
	! since tails are always one level back, completed+1:midprocess;
	! states all have their tail-states completely filled;
	for completed_ completed+state!size step state!size
		until midprocess
	   do begin "fill backups"	integer father, char;
		father_ tail( completed );
		for char_ maxchar!index step -1 until 1
		   do begin	integer back!recog;
			if dispatch( completed, char ) = 0
			 then set!dispatch( completed, char,
					dispatch( father, char ) );
			if back!recog_ recognition( father, char )
			 then set!recognition( completed, char,
						back!recog );
		      end;
	      end "fill backups";
	completed_ midprocess;
	midprocess_ topstate;
      end "one level";
end "fillit";
simple procedure illspec( r!p (fsm) f; reference integer cnt, bp );
	nonfatal("Premature calling of special handler!");

simple integer procedure ill!spec!call;
 start!code label kluge; skipa 1,kluge; kluge: jsp '14,illspec; end;
internal r!p (fsm) procedure makFsm( integer array equivs;
					reference r!p (targ) find );
! takes:
 an array of equivalences (-1:maxChr) The contents are a permutation of
  those numbers with each ring a set of equivalent characters, and
  -1 means an ignore character.
 a linked list of "targ" records (linked on :link) with the :s field
  the string to be recognized (a sample, I will strip ignores for
  myself).  The :backpointer field will be for my use.
makes:
 find to be a linked list (on :backpointer) of all targ's whose string
  had no real characters in it (nulls after dropping ignores).
 :backpointer field of non-null targs point to "tail"s of those targs
   (note: an arbitrary decision is made when two post-null compression
    strings are the same length, one is the "tail" of the other).
  This linkage is useful when "useFsm" recognizes a "word", all of the
  words on the :backpointer chain are also recognized (and "useFsm" 
  won't tell you about them, you have to find out for yourself).
 an fsm record to use with useFsm which specifies the machine to use
  with useFsm.  (If there are no non-null targ's after dropping ignores,
  this will return null!record, which will not work with useFsm.
;
if not (arrinfo(equivs,-1)=1 and arrinfo(equivs,1)<0 
	and 0 leq arrinfo(equivs,2))
 then return(null!record) else
begin "makFsm"
	integer words, states, characters, wid;
	r!p (tg) shuffle;
	r!p (fsm) rslt;
	integer array table[-3:(1 lsh (7 max 
				  minimumByteSize(arrinfo(equivs,2))))
				- 1];
characters_ copy!equivs( words, states, shuffle, table, equivs, find );
states_ states-words;

if words > 0
 then begin "makeit"
		r!p (targ) array backTab [-words:0];
		integer array stateTab [0:1 max states, -1:characters];
		integer i, state0;

	fillit( stateTab, table, backTab, shuffle );
	for i_ states step -1 until 0
	   do stateTab[i,-1]_ (1 lsh 35) lor (acState lsh 18);
	state0_ location( stateTab[0,0] );
	rslt_ new!record (fsm);
	fsm:state0 [rslt]_ state0;
	fsm:state  [rslt]_ state0;
	fsm:char   [rslt]_ -1;
	fsm:tran0  [rslt]_ location( table[0] );
	fsm:recog0 [rslt]_ location( backTab[0] );
	fsm:spec [rslt]_ ill!spec!call;
	    define setarr( dynamic!array, field!name )
		= {memory[location( dynamic!array )]
		   swap	memory[location( fsm:field!name [rslt] )]};
	setarr( table, translation );
	setarr( stateTab, machine );
	setarr( backTab, recognizes );
      end "makeit"
 else rslt_ null!record;
find_ tg:base [shuffle];	! return list of null targ's;
! destroy(shuffle);
return(rslt);
end "makFsm";
simple integer procedure erret( record!pointer (fsm) state;
		reference integer count, bytepointer );
begin nonfatal("useFsm: null FSM given"); return(-1); end;
internal simple r!p (targ) procedure useFsm( record!pointer (fsm) state;
		reference integer count, bytepointer );
! takes:
 state a record as constructed by fsm (current state of the machine
  in :state, initialized value (nothing seen so far) in :state0.
 count the number of bytes in a buffer.
 bytepointer an ildb-style byte pointer to the first of count
  consecutive bytes to be searched for words.
returns:
 count updated to be correct for next call (less than 1 if end-of-
  buffer was reached)
 bytepointer updated similarly (LDB will get the byte which was the
  last character of the string which was recognized)
 return-value:
 null!record:  means nothing found in buffer (count will be < 1
  unless a bad FSM was given in which case an error message was given)
 otherwise:  a pointer to the first of a :backpointer chain of
  recognized targ's (see note after makfsm).
;
start!code "useFsm"	label	gotry,acCode,acCod2,fromAc,nothin,rtrn;
		define	byp=0, cnt=1, xcod=5,cod=6;! (5-9) don't mess!;
			! see page 1 for: acState=2, acChar=3, acFsm=4;
			! warning: cannot touch LPSA (see useFST);
	sosge	cnt,count;		! this is actually indirect;
	 jrst	nothin;		! no bytes to search;
	skipn	acFsm,state;
	 jrst	erret;		! search with no FSM (?);
	move	byp,bytepointer;	! this is actually indirect;
	dmove	cod,acCode;	! now fill up ac's with code;
	dmove	cod+2,acCod2;
	hrr	cod+1,fsm.tran0(acFsm);	! use real translation table;
	hrrz	acState,fsm.state(acFsm); ! set current FSM state;
	jumpn	acState,gotry;
	hrrz	acState,fsm.state0(acFsm); ! help him out if bad state;
				! (he must have reset state to 0);
	jumpe	acState,erret;
gotry:	tlnn	byp,'007000;	! any excessive size bytes?;
	 jrst	cod;		! nope, then we are quite safe;
	move	xcod,cod;	! must stretch loop;
	move	cod,-2(cod+1);	! get the translation mask;
	soja	cod+2,xcod;	! stretch back the loop and start;

acCode:	! this code runs in the accumulators (cod through cod+3);
	ildb	acChar,byp;	! get the next byte;
! (mask instruction may go here);
	skipl	acState,@000000(acChar);
				! ** 000000 replaced by trantab[0] **;
				! translates and indexes on acState;
acCod2:	sojge	cnt,cod;	! loop while no recog, bytes left;
	jrst	fromAc;

fromAc:	dmovem	acState,fsm.state(acFsm);	! save state,char;
	movem	byp,bytepointer;	! updated byte pointer
					  (actually indirect);
	movem	cnt,count;		! bytes left in buffer
					  (actually indirect);
	jumpl	cnt,nothin;	! ran out of bytes, no recognition;

	tlnn	acState,'377777;	! is it really a special?;
	 xct	fsm.spec(acFsm);	! if special, do it;
				! (no-recog should clear LH of state);
	hlrz	1,acState;		! -recog (for address calc);
	add	1,fsm.recog0(acFsm);	! look in recognition table;
		! recognizes[0] will give n!r (for use of specials);
	skipa	1,(1);		! pick up recognized target record;
nothin:	 setz	1,;		! return null!record (count<0);
rtrn:
end "useFsm";
internal simple r!p (targ) procedure useFst(record!pointer (fsm) state;
		reference string dataStr );
! takes:
 state a record as constructed by fsm (current state of the machine
  in :state, initialized value (nothing seen so far) in :state0.
dataStr a string of unsearched data
returns:
dataStr with the scanned characters eaten off the front (null if
the end has been reached).
 return-value:
 null!record:  means nothing found in buffer (count will be < 1
  unless a bad FSM was given in which case an error message was given)
 otherwise:  a pointer to the first of a :backpointer chain of
  recognized targ's (see note after makfsm).
This knows all about useFsm and SAIL strings!!!
;
start!code	define p='17,sp='16,temp='14,lpsa='13;
				! lpsa must NOT be used by useFsm;
		label exit;
	hrrz	temp,-1(p);	! get address of byte pointer for str;
	push	p,state;
	push	p,[lpsa];	! will keep count in lpsa;
			! note that only useFsm exits are at points;
			! where bytepointer isn't yet updated;
			! (so error hits won't string pdlov);
	push	p,temp;		! address of byte pointer;
	hrrz	lpsa,-1(temp);	! now get count for string;
	pushj	p,useFsm;	! go find out results;
	move	temp,-1(p);	! get address of string back;
	hrrm	lpsa,-1(temp);	! store count (if -1 temporarily huge);
	jumpg	lpsa,exit;	! leave if normal;
	 setzm	-1(temp);	! finished string, make it null;
exit:
end;
end "slbFsm";
