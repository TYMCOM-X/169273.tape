BEGIN "TREK"  COMMENT  07/22/78 ;
require 6 version;
let proc=procedure; define procedure="simple proc";
define !!="Comment";
define begin!module(name,externalDeclarations)="",end!module(name)="";

COMMENT   DEFINE OPERATIONAL PARAMETERS  
;
DEFINE CRLF="'15&'12";
DEFINE QUADWIDTH = 40, QUADHEIGHT = 23;
DEFINE GWIDTH=200, GHEIGHT=115;
DEFINE MAPWIDTH = 14, MAPHEIGHT = 9, MAPX =65, MAPY =5;
DEFINE COM1MAX=20, COM2MAX=20, EVENTMAX =99;
DEFINE IMP1FACT=2, WARP1FACT=30;
DEFINE EENERGYF=6000, ETORPEDOF=10, EPROBEF=1, EPERSONF=200;
DEFINE PROBEMAX=10, STARMAX =300, TORPMAX=20, BASEMAX=5;
DEFINE BENERGYTOT=50000, BTORPEDOTOT=100, BPROBETOT=8, BPERSONTOT=600;
DEFINE KTMAX=24, KENF=1200, KTORF=5;
DEFINE EZAP="SETEVENT(TIME,8,0)";
DEFINE KWSPEED=90;
DEFINE FQH="KQH[24]", FQV="KQV[24]", FSH="KSH[24]", FSV="KSV[24]";
DEFINE EFSAME="SAMESEC(KQH[24],KQV[24],EQH,EQV)";


COMMENT		globals follow:
;
BOOLEAN GAMEDONE , OVER , EHYPER,DOCKED,CRT
       ,EFOUND,TRIBBLES,RADIO!ON
;
INTEGER NEWQX,NEWQY
        ,EQH,EQV
        ,EENERGY,ETORPEDO,EPROBE,EPERSON,ESHIELD,ESPY
        ,COMNO,I1,I2,MSGLINE,KTOT,FTORP,BRLINE
        ,COM2NO,K!ATTACKMIN,K!RETREATMIN,KMLINE
        ,KBLINE,ECLEN,KCLEN
        ,PORT!1,PORT!2,PORT!E,PORT!K,PLAYERS
        ,RSTARH,RSTARV
        ,TYPE!K,TYPE!E
;
STRING   TCOM,KCOM
;
REAL    TIME , TICK , TIMEMAX,PHTIME
        ,ESH,ESV,NEWSX,NEWSY,RSH,RSV
        ,EVELH,EVELV
        ,EISPEED,EWSPEED,FISPEED
        ,TDSH,TDSV,TDVH,TDVV
        ,K!PHIT
;
INTEGER ARRAY	 TSH,TSV,TVH,TVV[1:TORPMAX]
            ,PSH,PSV,PVH,PVV[1:PROBEMAX]
            ,EDMG[1:6]
            ,BSH,BSV[1:BASEMAX]
     ,KVELH,KVELV,KSH,KSV[1:KTMAX]
;
INTEGER ARRAY BENERGY,BTORPEDO,BPROBE,BPERSON,BSPY,BQH,BQV[1:BASEMAX]
             ,NKQH,NKQV,KQH,KQV,KEN,KTOR[1:KTMAX]
             ,TTYPE[1:2]
            ,QMAP[1:GWIDTH,1:GHEIGHT]
;
STRING ARRAY COM1NAME[0:COM1MAX]
            ,COM2NAME[0:COM2MAX]
            ,EDMGTXT[1:7]
;
simple integer procedure choose(integer choices);
Comment returns an integer in [0,choices-1];
begin	integer result;
do result_ ran(0)*choices
 until result<choices;
return(result);
end;
begin!module "[]" (EVENTS,[
    external procedure wipeEvents;
    external procedure addEvent( real when; itemvar code; integer arg );
    external real procedure topEventTime; 
    external itemvar procedure popEvent( reference real when; 
				reference integer arg );
])	!! GLOBALS read: time, timeMax;

record!class event ( real time; itemvar code; integer arg;
			record!pointer(event) next );

record!pointer(event) pending, free, chase, rptmp;
	!! pending is not really an event, it is a list head;
	!! free is linked list of available event records;
	!! chase is a generally available temp;
	!! rptmp is also a generally available temp;


INTERNAL REAL PROCEDURE topEventTime; 
return( event:time[ event:next[pending] ] );


INTERNAL ITEMVAR PROCEDURE popEvent( reference real when; 
				reference integer arg );
begin
chase_ event:next[pending];	!! chase= event to pop;
event:next[pending]_ event:next[chase];	!! pending set ok;
event:next[chase]_ free; free_chase;	!! free list ok (top=now);
when_ event:time[free];
arg_ event:arg [free]; 
return( event:code[free] );
end;


INTERNAL PROCEDURE addEvent(real when; itemvar code; integer argument );
begin
if time leq when leq timeMax
 then begin
	if not free then free_new!record(event);
	event:time[free]_when;
	event:code[free]_code;
	event:arg [free]_argument;
	chase_pending;
	while (rptmp_event:next[chase]) and when geq event:time[rptmp]
		do chase_rptmp;
		!! remove top of free and insert between chase and rptmp;
	rptmp swap event:next[free];	!! rptmp->new free list, 
					!! free-> new `chase' tail;
	free swap rptmp;		!! free correct;
					!! rptmp-> new `chase' tail;
	event:next[chase]_ rptmp;	!! everybody ok;
      end
 else if time<when then usererr(0,1,"Adding to the past!");
end;


INTERNAL PROCEDURE wipeEvents;
begin
if free and not pending then free swap pending;
if free
 then begin
	chase_pending;
	while rptmp_event:next[chase] do rptmp_chase;
	event:next[chase]_free;
	free_ null!record;
      end;
if pending
 then free swap event:next[pending]
 else pending_new!record(event);
end;


end!module(EVENTS);
COMMENT           PROCEDURE DECLARATIONS FOLLOW
;
FORWARD PROCEDURE EFIXED(INTEGER J);
FORWARD PROCEDURE EDAMAGE(REAL P);
FORWARD PROCEDURE KPHASER(INTEGER J);
FORWARD PROCEDURE IMP1OFF;
FORWARD PROCEDURE KAT(INTEGER H,V);
FORWARD PROCEDURE KTORPEDO(INTEGER J);
FORWARD PROCEDURE AT(REAL H,V);
FORWARD PROCEDURE CANEVENT (INTEGER CODE);
FORWARD PROCEDURE SETEVENT(REAL T; INTEGER CODE,J);
FORWARD INTEGER PROCEDURE WHICHK(INTEGER X,Y);
FORWARD STRING PROCEDURE KCHAR(INTEGER J);
FORWARD PROCEDURE DOCKCHECK;
COMMENT  INPUT A LINE FROM TERMINAL (P)   *** INPUT
;
STRING PROCEDURE INPUT(INTEGER P); BEGIN "INPUT"
STRING T; INTEGER J,U;
T_NULL;
while '15 neq (U_'177 land AUXCLV(P,J,'00))
 DO t_ IF "a" leq U leq "z" THEN t&(U-("a"-"A"))
	ELSE if '177 neq u neq '10 then t&U else T[1 TO INF-1]; 
return(T);
END "INPUT";
COMMENT  OUTPUT STRING TO TERMINAL (P)    *** OUTPUT
;
PROCEDURE OUTPUT(INTEGER P;STRING S);
	WHILE LENGTH(S)>0 DO AUXCLV(P,LOP(S),'03);
COMMENT  MAKE PDP10 STOP PUTTING IN CARRIAGE RETURNS  *** NOFREECR
;
PROCEDURE NOFREECR; BEGIN "NOFREECR" INTEGER J;
J_-1; START!CODE; TTCALL 6,J; END;
J_J LOR '202000000; START!CODE; TTCALL 7,J; END;
END "NOFREECR";
COMMENT  DO ALL PRINTING FOR ENTERPRISE    *** EPRINT
;
PROCEDURE EPRINT(STRING S);
	IF PORT!E THEN OUTPUT(PORT!E,S); 
COMMENT  DO ALL PRINTING FOR KLINGONS    *** KPRINT
;
PROCEDURE KPRINT(STRING S); 
	IF PORT!K THEN OUTPUT(PORT!K,S);
COMMENT  RETURN RANDOM UNOCCUPIED SECTOR   *** RANDLOC
          ADDRESS IN RSH, RSV GLOBAL
;
PROCEDURE RANDLOC;
  DO BEGIN  RSH_ choose(GWIDTH)+1;
            RSV_ choose(GHEIGHT)+1;
     END UNTIL QMAP[RSH,RSV]=0;
COMMENT  GET EMPTY SECTOR IN SPECIFIED QUAD ;
PROCEDURE RANDSEC(INTEGER H,V);
DO BEGIN RSH_(H-1)*40+choose(QUADWIDTH)+1;
         RSV_(V-1)*23+choose(QUADHEIGHT)+1;
   END UNTIL QMAP[RSH,RSV]=0;

INTEGER PROCEDURE QH( integer H);
	RETURN( IF H<1 THEN 0 ELSE ((H-1) DIV 40)+1 ); 

INTEGER PROCEDURE QV( integer V);
	RETURN( IF V<1 THEN 0 ELSE ((V-1) DIV 23)+1 );

INTEGER PROCEDURE SH( integer H);
	RETURN(((H-1) MOD 40)+1);

INTEGER PROCEDURE SV( integer V);
	RETURN(((V-1) MOD 23)+1);
COMMENT  CONVERT STRING TO REAL VARIABLE  *** CVR
              STRING MAY INCLUDE DECIMAL POINT
;
REAL PROCEDURE CVR (STRING S);
BEGIN "CVR" INTEGER TEMP; 
return(realscan(s,temp));
END "CVR";
COMMENT     FIND DISTANCE BETWEEN TWO POINTS  *** DIS
;
REAL PROCEDURE DIS (INTEGER X1,X2,Y1,Y2);
	RETURN (SQRT((X1-Y1)^2+(X2-Y2)^2));

BOOLEAN PROCEDURE SAMESEC(INTEGER I,J,II,JJ);
	return( I=II AND J=JJ );

BOOLEAN PROCEDURE ADJACENT(integer X,Y,XX,YY);
	RETURN( (x-xx)^2 + (y-yy)^2 < 4 );

BOOLEAN PROCEDURE PATH(REAL X,Y,XX,YY); BEGIN "PATH"
REAL J,K,DJ,DK;
IF ADJACENT(X,Y,XX,YY) THEN RETURN(TRUE);
DJ_XX-X;DK_YY-Y;  IF ABS(DJ)>ABS(DK) THEN BEGIN
   DK_DK/ABS(DJ); FOR J_X STEP DJ/ABS(DJ) UNTIL XX DO
   FOR K_Y STEP DK UNTIL YY DO BEGIN
     IF SAMESEC(X,Y,J,K) OR SAMESEC(XX,YY,J,K) THEN CONTINUE;
     IF QMAP[J,K] NEQ 0 THEN RETURN(FALSE); END;
   RETURN(TRUE); END;
DJ_DJ/ABS(DK); FOR K_Y STEP DK/ABS(DK) UNTIL YY DO
   FOR J_X STEP DJ UNTIL XX DO BEGIN
     IF SAMESEC(X,Y,J,K) OR SAMESEC(XX,YY,J,K) THEN CONTINUE;
     IF QMAP[J,K] NEQ 0 THEN RETURN(FALSE); END;
RETURN(TRUE); END "PATH";
COMMENT  LOCK OR UNLOCK KEYBOARD (J)  *** LOCK ;

PROCEDURE LOCK(INTEGER J); BEGIN "LOCK"
RETURN;   COMMENT TEST LOCKUP PROBLEM ZZZZZ ;
IF J=1 THEN EPRINT((27&35&'17))
       ELSE KPRINT((27&35&'17));
END "LOCK";

PROCEDURE UNLOCK(INTEGER J); BEGIN "UNLOCK"
RETURN;   COMMENT TEST LOCKUP PROBLEM ZZZZZ ;
IF J=1 THEN EPRINT((27&34&'16))
       ELSE KPRINT((27&34&'16));
END "UNLOCK";
PROCEDURE CLEAR(INTEGER J); COMMENT CLEAR SCREEN OF PLAYER J;
BEGIN "CLEAR" STRING S;
CASE (IF J=1 THEN TYPE!E ELSE TYPE!K) OF BEGIN
 [0] S_'12&27&58&'32;
 [1] S_'176&'34;
 [2] S_'33&"H" & '33&"J";	Comment home up, clear screen;
 ELSE S_"{clear}"
END; IF J=1 THEN EPRINT(S) ELSE KPRINT(S);
END "CLEAR";
PROCEDURE ESHOW(INTEGER H,V);
IF ((H-1) DIV 40)+1 = EQH AND ((V-1) DIV 23)+1 = EQV THEN BEGIN
  at( ((H-1) MOD 40)+1, ((V-1) MOD 23)+1 );
  eprint( IF QMAP[H,V]=0 THEN " " ELSE QMAP[H,V] );
 END;
PROCEDURE KSHOW(INTEGER H,V); 
IF ((H-1) DIV 40)+1 = FQH AND ((V-1) DIV 23)+1 = FQV 
 THEN BEGIN "KSHOW"
	kat( ((H-1) MOD 40)+1, ((V-1) MOD 23)+1 );
	kprint( 
		IF QMAP[H,V]="K" THEN KCHAR(WHICHK(H,V))
		 else IF QMAP[H,V]=0 THEN " "
		 else IF QMAP[H,V]="E"  THEN "%"
		 else QMAP[H,V]
	  );
      END "KSHOW";
COMMENT     LOAD CURSOR X [1:80],Y [1:24] ON SCREEN  *** CURS
                     ABSOLUTE HOR, VERT   ;

PROCEDURE CURS (INTEGER H,V);
BEGIN "CURS"	integer w,d;
getformat(w,d);setformat(0,d);
CASE TYPE!E 
 OF BEGIN 
     [0] EPRINT(27&61&(31+V)&(31+H));
     [1] EPRINT('176&'21&(H-1)&(v-1));
     [2] EPRINT('33& "&a" & cvs(h-1) & "c" & cvs(v-1) & "R");
     ELSE EPRINT("{"&cvs(h) & "," & cvs(v)&"}")
    END;
setformat(w,d);
END "CURS";

PROCEDURE KURS (INTEGER H,V);
BEGIN "KURS"	integer w,d;
getformat(w,d);setformat(0,d);
CASE TYPE!K 
 OF BEGIN 
     [0] KPRINT(27&61&(31+V)&(31+H));
     [1] KPRINT('176&'21&(H-1)&(v-1));
     [2] KPRINT('33& "&a" & cvs(h-1) & "c" & cvs(v-1) & "R");
     ELSE KPRINT("{"&cvs(h) & "," & cvs(v)&"}")
    END;
setformat(w,d);
END "KURS";
COMMENT GENERATE CHARACTER FOR JTH KLINGON  *** KCHAR ;
STRING PROCEDURE KCHAR(INTEGER J); RETURN(J+64);
COMMENT  DETERMIN INDEX OF KLINGON AT X,Y   *** WHICHK
;
INTEGER PROCEDURE WHICHK(INTEGER X,Y);
BEGIN "WHICHK" INTEGER I,J,K;

FOR I_1 STEP 1 UNTIL KTMAX DO if x=KSH[I] and y=KSV[I] THEN RETURN(I);

PRINT("  KLINGON X=",X," Y=",Y," NOT FOUND!!");COMMENT ZZZZZ;
FOR I_1 STEP 1 UNTIL KTMAX 
   do PRINT("K=",CVS(I)," ",CVF(KSH[I]),"  ",CVF(KSV[I]));
END "WHICHK";

INTEGER PROCEDURE WHICHT(INTEGER X,Y); BEGIN "WHICHT" INTEGER J;
FOR J_1 STEP 1 UNTIL KTMAX DO
  IF SAMESEC(TSH[J],TSV[J],X,Y) THEN RETURN(J);
PRINT ("TORPEDO X=",X," Y=",Y," NOT FOUND"); END "WHICHT";
COMMENT  DISPLAY STATUS OF TIME ENERGY ETC.   *** STATUS
;
PROCEDURE DTI;  BEGIN "DTI" INTEGER I; SETFORMAT(-2,0); AT(50,1); 
    I_TIME; EPRINT(CVS(I)&":");
    I_(TIME-I)*100;EPRINT(CVS(I)); END "DTI";

PROCEDURE DEN; BEGIN "DEN" SETFORMAT(4,0); AT(51,3);
    EPRINT(CVS(EENERGY)); END "DEN";

PROCEDURE DQU; BEGIN "DQU" SETFORMAT(1,0); AT(63,1); 
    EPRINT(CVS(eqh)&","&CVS(eqv)); END "DQU";

PROCEDURE DSE; BEGIN "DSE" SETFORMAT(2,0); AT(62,3);
    EPRINT(CVS(sh(esh))&","&CVS(sv(esv))); END "DSE";

PROCEDURE DWF; BEGIN "DWF" SETFORMAT(2,1); AT(75,1);
    EPRINT(CVF(EWSPEED)); END "DWF";

PROCEDURE DTH; BEGIN "DTH" SETFORMAT(2,0); AT(77,3);
    EPRINT(CVS( EISPEED )); END "DTH";

PROCEDURE DPE;  BEGIN "DPE" SETFORMAT(3,0); AT(53,7);
    EPRINT(CVS(EPERSON)); END "DPE";

PROCEDURE DSH; BEGIN "DSH" SETFORMAT(4,0); AT(51,5); 
    EPRINT(CVS(ESHIELD)); END "DSH";

PROCEDURE DTO;  BEGIN "DTO" SETFORMAT(2,0); AT(66,5);
    EPRINT(CVS(ETORPEDO)); END "DTO";

PROCEDURE DPR;  BEGIN  "DPR" SETFORMAT(1,0); AT(66,7);
    EPRINT(CVS(EPROBE)); END "DPR";


PROCEDURE DKTI; BEGIN "DKTI" INTEGER I; KURS(6,1); SETFORMAT(-2,0); 
    KPRINT(CVS( I_TIME )&":"); KPRINT(CVS( (TIME-I)*100 ));END "DKTI";

PROCEDURE DKSE; BEGIN "DKSE" KURS(17,1); SETFORMAT(2,0); 
    KPRINT(CVS(sh(fsh))&","&CVS(sv(fsv))); END "DKSE";

PROCEDURE DKQU; BEGIN "DKQU" KURS(29,1); SETFORMAT(1,0); 
    KPRINT(CVS(fqh)&","&CVS(fqv)); END "DKQU";

PROCEDURE DKEN; BEGIN "DKEN" KURS(8,3); SETFORMAT(4,0); 
    KPRINT(CVS(KEN[24])); END "DKEN";

PROCEDURE DKTO; BEGIN "DKTO" KURS(23,3); SETFORMAT(1,0); 
    KPRINT(CVS(KTOR[24])); END "DKTO";

PROCEDURE DKSP; BEGIN "DKSP" KURS(32,3); SETFORMAT(1,0); 
    KPRINT(CVS(ESPY)); END "DKSP";

PROCEDURE DKPF; BEGIN "DKPF" KURS(15,5); SETFORMAT(2,0); 
    KPRINT(CVS(100*K!PHIT)); END "DKPF";

PROCEDURE DKAF; BEGIN "DKAF" KURS(30,5); SETFORMAT(3,0); 
    KPRINT(CVS(K!ATTACKMIN)); END;
COMMENT PUT MESSAGE IN BATTLE REPORT      *** ATBR
;
PROCEDURE ATBR(STRING S); BEGIN "ATBR"
AT(43,BRLINE);EPRINT(" ");
BRLINE_BRLINE+1; IF BRLINE>15 THEN BRLINE_9;
AT(43,BRLINE);EPRINT(">"); S_S&"            ";
EPRINT(S[1 FOR 26]); END "ATBR";
COMMENT  PUT CURSOR NEXT LINE OF MESSAGE  *** ATMSG
;
PROCEDURE ATMSG(STRING S); BEGIN "ATMSG"
AT(55,MSGLINE);EPRINT(" ");
MSGLINE_MSGLINE+1; IF MSGLINE>22 THEN MSGLINE_17;
AT(55,MSGLINE);EPRINT(">"); S_S&"              ";
EPRINT(S[1 FOR 25]); END "ATMSG";

COMMENT  MESSAGE TO KLINGON SCREEN   *** KMSG ;
PROCEDURE KMSG(STRING S); BEGIN "KMSG"
KURS(1,KMLINE); KPRINT(" ");
KMLINE_KMLINE+1; IF KMLINE>21 THEN KMLINE_17;
KURS(1,KMLINE); KPRINT(">"); S_S&"               ";
KPRINT(S[1 FOR 25]); END "KMSG";

PROCEDURE KBAT(STRING S); BEGIN "KBAT"
KURS(1,KBLINE); KPRINT(" ");
KBLINE_KBLINE+1; IF KBLINE>15 THEN KBLINE_8;
KURS(1,KBLINE); KPRINT(">"); S_S&"            ";
KPRINT(S[1 FOR 25]); END "KBAT";

COMMENT ROCK(BLINK) KLINGON(J) K TIMES *** KROCK
;
PROCEDURE KROCK(INTEGER J,K); BEGIN "KROCK" INTEGER L,X,Y;
IF KQH[J]=0 THEN RETURN; IF K>6 THEN K_6;
FOR L_1 STEP 1 UNTIL K DO BEGIN
  X_KSH[J]; Y_KSV[J];
  QMAP[X,Y]_0; ESHOW(X,Y); KSHOW(X,Y);
  QMAP[X,Y]_"K"; ESHOW(X,Y); KSHOW(X,Y); END;
END "KROCK";
COMMENT  DESTROY KLINGON(J)       *** KZAP
;
PROCEDURE KZAP(INTEGER J); BEGIN "KZAP"
IF KSH[J]>0 AND KSV[J]>0 THEN BEGIN
QMAP[KSH[J],KSV[J]]_0; ESHOW(KSH[J],KSV[J]);KSHOW(KSH[J],KSV[J]);
ATBR("KLINGON DESTROYED !!"); KVELH[J]_0; KVELV[J]_0;
KSH[J]_0;KSV[J]_0;KQH[J]_0;KQV[J]_0;KEN[J]_0;KTOR[J]_0;
IF J<24 THEN BEGIN
SETFORMAT(1,0);KBAT("CRUISER "&KCHAR(J)&" LOST");
END ELSE KBAT("FLAGSHIP JUST DESTROYED !");
IF J<24 THEN BEGIN KURS(76,J); KPRINT("     "); END;
KTOT_KTOT-1; IF KTOT<1 THEN SETEVENT(TIME,7,0);
IF J=24 AND PORT!K NEQ 0 THEN SETEVENT(TIME,7,0); END;
END "KZAP";
COMMENT  DESTROY TORPEDO (X)        *** TZAP
;
PROCEDURE TZAP(INTEGER X); BEGIN "TZAP"
IF TSH[X]=0 THEN RETURN;
IF QMAP[TSH[X],TSV[X]]="." THEN BEGIN
  QMAP[TSH[X],TSV[X]]_ 0;
  ESHOW(TSH[X],TSV[X]); KSHOW(TSH[X],TSV[X]); END;
TSH[X]_0;TSV[X]_0;TVH[X]_0;TVV[X]_0; END "TZAP";
COMMENT FIND INDEX FOR UNUSED TORPEDO      *** GETTORP
;
BOOLEAN PROCEDURE GETTORP; BEGIN "GETTORP"
FOR FTORP_1 STEP 1 UNTIL TORPMAX DO
  IF TSH[FTORP]=0 THEN RETURN(TRUE);
RETURN(FALSE);  END "GETTORP";
COMMENT  KLINGON WARP - QUAD EXIT   *** KQOUT *** ;
PROCEDURE KQOUT(INTEGER J,H,V); BEGIN "KQOUT" INTEGER X,Y; REAL T;
KVELH[J]_KVELV[J]_0;  X_KSH[J];Y_KSV[J];
QMAP[X,Y]_0; ESHOW(X,Y); KSHOW(X,Y);
T_DIS(KQH[J],KQV[J],H,V); T_.25*T+TIME;
NKQH[J]_H; NKQV[J]_V; SETEVENT(T,9,J); KQH[J]_KQV[J]_0;
X_T; Y_(T-X)*100; SETFORMAT(-2,0);
KMSG(KCHAR(J)&" ARRIVES "&CVS(X)&":"&CVS(Y));
IF J<24 THEN KURS(75,J) ELSE KURS(23,1); KPRINT(">");
IF J<24 THEN KURS(78,J) ELSE KURS(29,1);
SETFORMAT(1,0); KPRINT(CVS(H)&","&CVS(V));
IF J=24 THEN BEGIN KURS(17,1); KPRINT("     "); END;
END "KQOUT";
COMMENT RE-SUPPLY ENTERPRISE WHILE        *** REFUEL1
        DOCKED AT BASE J
;
PROCEDURE REFUEL1(INTEGER J);
BEGIN "REFUEL1"
I1_EENERGYF-(EENERGY+ESHIELD); IF I1>BENERGY[J] THEN I1_BENERGY[J];
EENERGY_EENERGY+I1; BENERGY[J]_BENERGY[J]-I1;
I1_ETORPEDOF-ETORPEDO; IF I1>BTORPEDO[J] THEN I1_BTORPEDO[J];
ETORPEDO_ETORPEDO+I1; BTORPEDO[J]_BTORPEDO[J]-I1;
I1_EPROBEF-EPROBE; IF I1>BPROBE[J] THEN I1_BPROBE[J];
EPROBE_EPROBE+I1; BPROBE[J]_BPROBE[J]-I1;
I1_EPERSONF-EPERSON; IF I1>BPERSON[J] THEN I1_BPERSON[J];
EPERSON_EPERSON+I1; BPERSON[J]_BPERSON[J]-I1;
IF BSPY[J]>0 THEN BEGIN BSPY[J]_BSPY[J]-1;
  ESPY_ESPY+1; END;
DEN; DPE; DTO; DPR; DKSP;
END "REFUEL1";
COMMENT IMPULSE ENGS MOVE SAME QUAD *** IMPULSE1
;
PROCEDURE IMPULSE1;
BEGIN "IMPULSE1"
INTEGER X,TSH,TSV,TENERGY;  BOOLEAN DESTOK,DIFSECT,ENERGYOK;
REAL T;
IF EDMG[1]<0 THEN BEGIN ATMSG("IMPULSE ENGINE DAMAGED");
   SETEVENT(TIME,1,0); TCOM_NULL; RETURN; END;
IF EHYPER THEN BEGIN
   ATMSG("NO IMPULSE WHILE WARPING");
   SETEVENT(TIME,1,0); RETURN; END;
TSH_CVR(SCAN(TCOM,1,X)); TSV_CVR(SCAN(TCOM,1,X));
IF TRIBBLES AND RAN(0)<.7 THEN BEGIN
   TSH_choose(40)+1; TSV_choose(23)+1; END;
DIFSECT_TRUE; IF SAMESEC(TSH,TSV,ESH,ESV) THEN DIFSECT_FALSE;
DESTOK_TRUE; IF TSH<1 OR TSV<1 OR TSH>QUADWIDTH
      OR TSV>QUADHEIGHT THEN DESTOK_FALSE;
TENERGY_DIS(SH(ESH),SV(ESV),TSH,TSV)*EISPEED/IMP1FACT;
ENERGYOK_TRUE; IF EENERGY<TENERGY THEN ENERGYOK_FALSE;
IF DESTOK AND ENERGYOK AND DIFSECT THEN
   BEGIN
   TSH_TSH+(EQH-1)*40; TSV_TSV+(EQV-1)*23;
   IMP1OFF; AT(80,3);EPRINT("<"); DOCKED_FALSE;
   IF EISPEED<1 THEN BEGIN
      EISPEED_70; DTH;
      ATMSG("THRUST TOO LOW, RESET"); END;
   T_DIS(ESH,ESV,.5+TSH,.5+TSV); T_T/EISPEED;
   SETEVENT(T+TIME,5,0);
   EVELV_(.5+TSV-ESV)/(100*T);
   EVELH_(.5+TSH-ESH)/(100*T);
   EENERGY_EENERGY-TENERGY; DEN;
   IF EQU(TCOM[1 FOR 1],"*") THEN BEGIN
      SETEVENT(.01+T+TIME,1,0);TCOM_TCOM[3 TO INF]; END
      ELSE SETEVENT(TIME+.01,1,0);
   RETURN;
   END;
IF NOT DESTOK THEN ATMSG("INVALID DESTINATION");
IF NOT ENERGYOK THEN ATMSG("INSUFFICIENT ENERGY");
IF NOT DIFSECT THEN ATMSG("ALREADY IN THAT SECTOR");
SETEVENT(TIME,1,0);
END "IMPULSE1";

COMMENT  KLINGON FLAG TO NEW SECTOR   *** IMPULSE2 ;
PROCEDURE IMPULSE2; BEGIN "IMPULSE2"
INTEGER X,TH,TV; REAL T;
IF FQH=0 THEN BEGIN
   KMSG("NO IMPULSE WHILE WARPING");
   SETEVENT(TIME,2,0); RETURN; END;
TH_CVR(SCAN(KCOM,1,X)); TV_CVR(SCAN(KCOM,1,X));
IF TH<1 OR TV<1 OR TH>QUADWIDTH OR TV>QUADHEIGHT THEN BEGIN
   KMSG("INVALID DESTINATION");
   SETEVENT(TIME,2,0); RETURN; END;
CANEVENT(11); TH_TH+(FQH-1)*40; TV_TV+(FQV-1)*23;
T_DIS(FSH,FSV,.5+TH,.5+TV); T_T/FISPEED;
SETEVENT(TIME+T,11,24);
KVELH[24]_(.5+TH-FSH)/(100*T);
KVELV[24]_(.5+TV-FSV)/(100*T);
IF EQU(KCOM[1 FOR 1],"*") THEN BEGIN
   SETEVENT(.01+T+TIME,2,0);KCOM_KCOM[3 TO INF]; END
   ELSE SETEVENT(TIME+.01,2,0);
END "IMPULSE2";
COMMENT     MOVE TO ANOTHER QUAD            COURSE PROC
;
PROCEDURE COURSE1;
BEGIN "COURSE1"
REAL TTIME;
ER TQX,TQY,TENERGY,X,Y,T1,T2;
BOOLEAN DESTOK,ENERGYOK,EXITOK,DIFQUAD;
IF EDMG[2]<0 THEN BEGIN ATMSG("WARP DRIVE DAMAGED");
   SETEVENT(TIME,1,0); TCOM_NULL; RETURN; END;
IF TRIBBLES AND RAN(0)<.4 THEN BEGIN SETEVENT(TIME,1,0);
   ATMSG("COMPUTER NOT RELIABLE"); TCOM_NULL; RETURN; END;
TQX_CVD(SCAN(TCOM,1,X)); TQY_CVD(SCAN(TCOM,1,X));
IF TRIBBLES AND RAN(0)<.6 THEN BEGIN
   TQX_choose(5)+1; TQY_choose(5)+1; END;
IF EHYPER THEN BEGIN ATMSG("ALREADY WARPING, SIR");
   SETEVENT(TIME,1,0); RETURN; END;
EXITOK_TRUE; ENERGYOK_TRUE; DESTOK_FALSE;
DIFQUAD_TRUE; IF TQX=EQH AND TQY=EQV THEN DIFQUAD_FALSE;
IF (TQX<6) AND (TQY<6) AND (TQX>0) AND (TQY>0) THEN DESTOK_TRUE;
TENERGY_DIS(EQH,EQV,TQX,TQY)*EWSPEED*WARP1FACT;
IF EENERGY<TENERGY THEN ENERGYOK_FALSE;
IF DESTOK AND ENERGYOK AND EXITOK AND DIFQUAD THEN
    BEGIN
    DOCKED_FALSE; EFOUND_FALSE;
    EHYPER_TRUE; IMP1OFF; AT(80,1);EPRINT("<");
    NEWQX_TQX;NEWQY_TQY;
    QMAP[ESH,ESV]_0;KSHOW(ESH,ESV);ESHOW(ESH,ESV);
    FOR X_(EQH-1)*40+1 STEP 1 UNTIL (EQH-1)*40+40 DO
      FOR Y_(EQV-1)*23+1 STEP 1 UNTIL (EQV-1)*23+23 DO
        IF QMAP[X,Y] NEQ 0 THEN BEGIN
        AT(SH(X),SV(Y)); EPRINT(" "); END;
    EENERGY_EENERGY-TENERGY; DEN;
    TTIME_DIS(EQH,EQV,NEWQX,NEWQY)/EWSPEED;
    TTIME_TTIME+TIME;
    SETEVENT(TTIME,4,0); COMMENT ENTER NEW QUAD AT TTIME;
    T1_TTIME; T2_(TTIME-T1)*100;
    SETFORMAT(-2,0);ATMSG("ARRIVE AT "&CVS(T1)&":"&CVS(T2));
    SETEVENT(TIME+.02,1,0); COMMENT THEN GET COMMAND;
    IF EWSPEED>7 THEN EDAMAGE((EWSPEED-7)/3);
    EQH_0;EQV_0;RETURN;
    END;
IF NOT DESTOK THEN ATMSG("INVALID DESTINATION");
IF NOT DIFQUAD THEN ATMSG("NO WARP TO SAME QUAD");
IF NOT ENERGYOK THEN ATMSG("INSUFFICIENT ENERGY");
IF NOT EXITOK THEN ATMSG("EXIT BLOCKED");
SETEVENT(TIME,1,0);
END "COURSE1";
COMMENT  MOVE FLAGSHIP TO ANOTHER QUAD   *** COURSE2 *** ;
PROCEDURE COURSE2; BEGIN "COURSE2" INTEGER TH,TV,X,Y;
TH_CVD(SCAN(KCOM,1,X)); TV_CVD(SCAN(KCOM,1,X));
IF FQH=0 THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("ALREADY WARPING !"); RETURN; END;
IF TH=FQH AND TV=FQV THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("NO WARP TO SAME QUAD"); RETURN; END;
IF TH<1 OR TV<1 OR TH>5 OR TV>5 THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("NO SUCH QUADRANT !"); RETURN; END;
SETEVENT(TIME+.01,2,0);
FOR X_(FQH-1)*40+1 STEP 1 UNTIL (FQH-1)*40+40 DO
   FOR Y_(FQV-1)*23+1 STEP 1 UNTIL (FQV-1)*23+23 DO
     IF QMAP[X,Y] NEQ 0 THEN BEGIN KAT(SH(X),SV(Y)); KPRINT(" "); END;
KQOUT(24,TH,TV);
END "COURSE2";
COMMENT  SEND CRUISER TO NEW QUAD    *** KGO ;
PROCEDURE KGO; BEGIN "KGO" INTEGER TH,TV,X,J;STRING S;REAL T;
SETEVENT(TIME+.01,2,0);
S_SCAN(KCOM,1,X); J_S-64; IF J>23 OR J<1 OR KEN[J]=0 THEN BEGIN
   IF J=24 THEN KMSG("USE COURSE COMMAND") ELSE
   KMSG("NO CRUISER "&S&" EXTANT");KCOM_NULL; RETURN; END;
IF KQH[J]=0 THEN BEGIN KMSG("CRUISER "&S&" IN HYPERSPACE");
   KCOM_NULL; RETURN; END;
TH_CVD(SCAN(KCOM,1,X)); TV_CVD(SCAN(KCOM,1,X));
IF TH<1 OR TV<1 OR TH>QUADWIDTH OR TV>QUADHEIGHT THEN BEGIN
   KMSG("INVALID DESTINATION"); RETURN; END;
IF SAMESEC(TH,TV,KQH[J],KQV[J]) THEN BEGIN SETFORMAT(1,0);
   KMSG("CRUISER "&S&" NOW IN "&CVS(TH)&","&CVS(TV));
   RETURN; END;
T_SQRT(DIS(TH,TV,KQH[J],KQV[J]));
IF KEN[J]<50*T+10 THEN BEGIN
   KMSG("INSUFFICIENT ENERGY"); RETURN; END;
KEN[J]_KEN[J]-50*T;  KQOUT(J,TH,TV);
END "KGO";
COMMENT   SET WARP FUNCTION COMMAND     *** WARP1 ***
;
PROCEDURE WARP1;
BEGIN "WARP1"
REAL X; X_CVR(SCAN(TCOM,1,I2));
SETEVENT(TIME+.01,1,0);
IF TRIBBLES AND RAN(0)<.5 THEN BEGIN
   X_choose(9)+.5; END;
IF X<0.5 OR X>9.5 THEN BEGIN
  ATMSG("WARP FACTOR .5 TO 9.5");
  RETURN; END;
EWSPEED_X; DWF;
END "WARP1";
COMMENT    FIRE THE PHASERS !!    *** PHASER1
;
PROCEDURE PHASER1;
BEGIN "PHASER1" BOOLEAN KPATH;
INTEGER J,K; SETEVENT(TIME+.01,1,0); I1_CVR(SCAN(TCOM,1,I2));
IF EDMG[3]<0 THEN BEGIN ATMSG("PHASERS DAMAGED");
   TCOM_NULL; RETURN; END;
IF EHYPER THEN BEGIN ATMSG("NO PHASER TARGETS"); RETURN; END;
IF TRIBBLES AND RAN(0)<.4 THEN I1_EENERGY*.6*RAN(0);
IF I1>EENERGY THEN BEGIN
   ATMSG("INSUFFICIENT ENERGY"); RETURN; END;
IF PHTIME+.05>TIME THEN BEGIN
   ATMSG("PHASER REGEN TIME IS .05"); RETURN; END;
PHTIME_TIME; EENERGY_EENERGY-I1; DEN;
FOR I2_1 STEP 1 UNTIL KTMAX DO
   IF KQH[I2]=EQH AND KQV[I2]=EQV THEN BEGIN
      KPATH_PATH(ESH,ESV,KSH[I2],KSV[I2]);
      J_DIS(ESH,ESV,KSH[I2],KSV[I2]);
      IF TRUE THEN BEGIN    COMMENT ZZZZZ ;
        K_((RAN(0)*.8)+.6)*I1/(J/10+1);KEN[I2]_KEN[I2]-K;
        KROCK(I2,2*K/KEN[I2]); IF I2=24 THEN DKEN;
        ATBR("KLING HIT BY "&CVS(K)&" UNITS");
        KBAT("CRUISER "&KCHAR(I2)&" HIT BY "&CVS(K));
        IF KEN[I2]<.1 THEN KZAP(I2); END;
      END;
END "PHASER1";
COMMENT  PLAYER 2 USES PHASERS       *** PHASER2 ;
PROCEDURE PHASER2; BEGIN "PHASER2"
IF DIS(FSH,FSV,ESH,ESV)>19 THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("NO TARGET IN RANGE"); RETURN; END;
KPHASER(24); SETEVENT(TIME+.04,2,0); END "PHASER2";

COMMENT     SHOOT A TORPEDO !!              TORPEDO1 PROC
;
PROCEDURE TORPEDO1;
BEGIN "TORPEDO1"
INTEGER X,XSH,XSV; REAL D;
IF EDMG[4]<0 THEN BEGIN ATMSG("TORPEDOES DAMAGED");
   SETEVENT(TIME,1,0); TCOM_NULL; RETURN; END;
XSH_CVR(SCAN(TCOM,1,X)); XSV_CVR(SCAN(TCOM,1,X));
IF EHYPER THEN BEGIN ATMSG("NO TORPEDO TARGET");
   SETEVENT(TIME,1,0); RETURN; END;
IF TRIBBLES AND RAN(0)<.5 THEN BEGIN
  XSH_choose(40)+1; XSV_choose(23)+1; END;
IF ETORPEDO<1 THEN BEGIN
   ATMSG("TORPEDO BANK EMPTY");
   SETEVENT(TIME,1,0); RETURN; END;
IF SAMESEC(SH(ESH),SV(ESV),XSH,XSV) OR XSH<1 OR XSV<1 OR
   XSH>QUADWIDTH OR XSV>QUADHEIGHT THEN BEGIN
   ATMSG("INVALID DESTINATION");
   SETEVENT(TIME,1,0); RETURN; END;
IF GETTORP THEN BEGIN
   XSH_XSH+(EQH-1)*40;XSV_XSV+(EQV-1)*23;
   D_DIS(ESH,ESV,XSH+.5,XSV+.5);
   COMMENT WE USE .5 OF ENTERPRS VEL. BELOW AS TORP MOVES TWICE;
   TVH[FTORP]_(XSH-ESH)/D+(.5*EVELH); TVV[FTORP]_(XSV-ESV)/D+(.5*EVELV);
   TSH[FTORP]_ESH+TVH[FTORP]; TSV[FTORP]_ESV+TVV[FTORP];
   ETORPEDO_ETORPEDO-1; DTO;
   SETEVENT(TIME+.02,1,0); RETURN; END;
ATMSG("TEMPORARY MALFUNCTION"); SETEVENT(TIME,1,0);
END "TORPEDO1";
COMMENT PLAYER2 FIRES TORPEDO    *** TORP2 ;
PROCEDURE TORP2; BEGIN "TORP2"
IF KTOR[24]<1 THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("NO MORE TORPEDOES !"); RETURN; END;
IF NOT SAMESEC(FQH,FQV,EQH,EQV) THEN BEGIN SETEVENT(TIME+.01,2,0);
   KMSG("NO TARGETS NEARBY"); RETURN; END;
KTORPEDO(24); SETEVENT(TIME+.02,2,0); END "TORP2";

COMMENT          SHOOT PROBE TO FAR CORNERS         PROBE1 PROC
;
PROCEDURE PROBE1;
BEGIN "PROBE1"
INTEGER H,V,X; REAL D;
SETEVENT(TIME+.01,1,0);
H_CVD(SCAN(TCOM,1,X)); V_CVD(SCAN(TCOM,1,X));
IF EHYPER THEN BEGIN ATMSG("NO PROBE IN HYPERSPACE"); RETURN; END;
IF TRIBBLES AND RAN(0)<.5 THEN BEGIN
  H_choose(5)+1; V_choose(5)+1; END;
IF EPROBE<1 THEN BEGIN ATMSG("NO PROBE ABOARD !");
   TCOM_NULL; RETURN; END;
IF H<1 OR V<1 OR H>5 OR V>5 THEN BEGIN ATMSG("NO SUCH QUAD !");
   TCOM_NULL; RETURN; END;
FOR X_1 STEP 1 UNTIL PROBEMAX DO IF PSH[X]=0 THEN DONE;
IF PSH[X]>0 THEN BEGIN ATMSG("TEMPORARY MALFUNCTION");
   TCOM_NULL; RETURN; END;
PSH[X]_ESH; PSV[X]_ESV; H_(H-1)*40+20; V_(V-1)*23+12;
D_DIS(ESH,ESV,H,V);D_D/2; COMMENT PROBE SPEED;
PVH[X]_(H-ESH)/D; PVV[X]_(V-ESV)/D;
EPROBE_EPROBE-1; DPR; ATMSG("PROBE LAUNCHED");
END "PROBE1";

COMMENT   ACTIVATE SCAN OF ADJACENT QUAD    *** SCAN1 ;
PROCEDURE SCAN1; BEGIN "SCAN1" INTEGER H,V,X; REAL ST;
SETEVENT(TIME+.01,1,0);
IF EDMG[6]<0 THEN BEGIN ATMSG("SCANNERS DAMAGED");
   TCOM_NULL; RETURN; END;
H_CVD(SCAN(TCOM,1,X)); V_CVD(SCAN(TCOM,1,X));
IF EHYPER THEN BEGIN ATMSG("NO SCANS IN HYPERSPACE"); RETURN; END;
IF TRIBBLES AND RAN(0)<.5 THEN BEGIN
  H_choose(5)+1; V_choose(5)+1; END;
IF H<1 OR V<1 OR H>QUADWIDTH OR V>QUADHEIGHT THEN BEGIN
   ATMSG("NONEXISTANT QUAD !"); RETURN; END;
IF NOT ADJACENT(H,V,EQH,EQV) THEN BEGIN
   ATMSG("BEYOND RANGE"); RETURN; END;
IF SAMESEC(H,V,EQH,EQV) THEN ST_TIME+.03 ELSE ST_TIME+.09;
SETEVENT(ST,12,10*H+V);
ATMSG("SCANNERS ACTIVATED"); END "SCAN1";

COMMENT   ADJUST IMPULSE ENGINES    ***THRUST1
;
PROCEDURE THRUST1;
BEGIN "THRUST1"
  I1_CVR(SCAN(TCOM,1,I2));
  SETEVENT(TIME+.01,1,0);
IF TRIBBLES AND RAN(0)<.5 THEN I1_choose(100);
  IF I1<1 OR I1>99 THEN
     BEGIN ATMSG("THRUST RANGE 1-99");
     RETURN; END;
  EISPEED_I1; DTH;
END "THRUST1";
COMMENT  DISPLAY QUADS OF BASES   *** BASES1
;
PROCEDURE BASES1;   BEGIN "BASES1" STRING S;
IF EDMG[6]<0 THEN BEGIN ATMSG("SCANNERS DAMAGED");
   SETEVENT(TIME,1,0);TCOM_NULL; RETURN; END;
SETFORMAT(1,0);
S_NULL; FOR I1_1 STEP 1 UNTIL BASEMAX DO
    IF BQH[I1] NEQ 0 THEN
    S_S&"("&CVS(BQH[I1])&","&CVS(BQV[I1])&")";
ATMSG(S); SETEVENT(TIME+.01,1,0);
END "BASES1";
COMMENT  ENTERPRISE ADJUST SHIELDS     *** SHIELD1
;
PROCEDURE SHIELD1; BEGIN "SHIELD1"  INTEGER J;
J_CVR(SCAN(TCOM,1,I2)); SETEVENT(TIME+.01,1,0);
IF TRIBBLES AND RAN(0)<.5 THEN BEGIN
  J_RAN(0)-.3; J_.5*J*EENERGY; END;
IF EDMG[5]<0 THEN BEGIN ATMSG("SHIELDS DAMAGED");
   TCOM_NULL; RETURN; END;
IF J>EENERGY OR ESHIELD+J<0 THEN BEGIN
   ATMSG("INSUFFICIENT ENERGY");RETURN; END;
ESHIELD_ESHIELD+J; EENERGY_EENERGY-J; DEN; DSH;
END "SHIELD1";
COMMENT  ADJUST PHASER FACTOR FOR KLINGONS  *** PF ;
PROCEDURE PF; BEGIN "PF" INTEGER X,F;  SETEVENT(TIME+.01,2,0);
F_CVD(SCAN(KCOM,1,X)); IF F<10 OR F>90 THEN BEGIN
   KMSG("PHASER RANGE 10 - 90"); RETURN; END;
K!PHIT_F/100; DKPF; END "PF";
COMMENT ADJUST MINIMUM ATTACK ENERGY   *** AF ;
PROCEDURE AF; BEGIN "AF" INTEGER X,F; SETEVENT(TIME+.01,2,0);
F_CVD(SCAN(KCOM,1,X)); IF F<1 OR F>999 THEN BEGIN
   KMSG("ATTACK MIN 1 - 999"); RETURN; END;
K!ATTACKMIN_F; DKAF; END "AF";
COMMENT  DISPLAY STATUS OF A KLINGON CRUISER  *** ST ;
PROCEDURE ST; BEGIN "ST" INTEGER J; STRING S;
SETEVENT(TIME+.02,2,0);
S_SCAN(KCOM,1,J); J_S-64; IF J>23 OR J<1 OR KEN[J]=0 THEN
     BEGIN KMSG("NO CRUISER "&S&" EXTANT"); KCOM_NULL;
     RETURN; END;
SETFORMAT(4,0);
KMSG(S&": "&CVS(KEN[J])&" ENERGY,"&CVS(KTOR[J])&" TORP");
END "ST";
COMMENT 'HAIL' RADIO FROM ONE PLAYER TO OTHER *** HAIL1;
PROCEDURE HAIL1; BEGIN "HAIL1" INTEGER J;
WHILE J_LENGTH(TCOM)>25 DO BEGIN
  KMSG(TCOM[1 TO 25]); TCOM_TCOM[26 TO INF]; END;
KMSG(TCOM&"                        "); TCOM_NULL;
SETEVENT(TIME+.01,1,0);
END "HAIL1";

PROCEDURE HAIL2; BEGIN "HAIL2" INTEGER J;
WHILE J_LENGTH(KCOM)>25 DO BEGIN
  ATMSG(KCOM[1 TO 25]); KCOM_KCOM[26 TO INF]; END;
ATMSG(KCOM&"                        ");KCOM_NULL;
SETEVENT(TIME+.01,2,0);
END "HAIL2";
COMMENT  STATUS OF STARBASE  *** STAT1 ;
PROCEDURE STAT1; BEGIN "STAT1"  INTEGER J; STRING S;
SETEVENT(TIME+.02,1,0); J_CVR(SCAN(TCOM,1,I2));
IF (J>5) OR (J<1) OR (BQH[J]=0) THEN BEGIN
   ATMSG("NO SUCH STARBASE"); RETURN; END;
SETFORMAT(5,1); S_CVS(BENERGY[J])&" ENERGY, ";
SETFORMAT(2,1); S_S&CVS(BTORPEDO[J])&" TORPEDOS";
ATMSG(S);
SETFORMAT(3,1); S_CVS(BPERSON[J])&" PERSONS, ";
SETFORMAT(1,1); S_S&CVS(BPROBE[J])&" PROBES";
ATMSG(S);
END "STAT1";
COMMENT  PLAYER 1 RETIRES FROM THE FRAY  *** SURREND1
;
PROCEDURE SURREND1;	SETEVENT(TIME,8,0);

PROCEDURE SURREND2;	SETEVENT(TIME,7,0);

PROCEDURE WAIT1;    COMMENT  ALLOW PLAYER1 DO NOTHING      WAIT1 PROC
;
BEGIN "WAIT1"   REAL T; INTEGER X;
T_CVR(SCAN(TCOM,1,X));
IF TRIBBLES AND RAN(0)<.8 THEN BEGIN SETEVENT(0,1,0);
        RETURN; END;
IF TRIBBLES AND RAN(0)<.6 THEN T_RAN(0)*T*3;
IF T>.5
 THEN BEGIN ATMSG("MAX. WAIT IS .5"); SETEVENT(0,1,0); RETURN; END;
T_T+TIME;
SETEVENT(T,1,0);
END "WAIT1";

PROCEDURE WAIT2; BEGIN "WAIT2" REAL T; INTEGER X;
T_CVR(SCAN(KCOM,1,X));
IF T>.5 THEN BEGIN KMSG("MAX. WAIT IS .5");
             SETEVENT(0,2,0); RETURN; END;
T_T+TIME; SETEVENT(T,2,0);
END "WAIT2";
COMMENT  KLINGON SPY COMMAND    *** SPY2 ;
PROCEDURE SPY2; BEGIN "SPY2" REAL T; INTEGER X;
SETEVENT(TIME+.01,2,0); T_CVR(SCAN(KCOM,1,X));
IF ESPY<1 THEN BEGIN KMSG("NO SPY ON ENTERPRISE");
   KCOM_NULL; RETURN; END;
IF RADIO!ON AND (SAMESEC(RSTARH,RSTARV,EQH,EQV) OR
                 SAMESEC(RSTARH,RSTARV,FQH,FQV)) THEN BEGIN
   KMSG("COMMUNICATION JAMMED!"); KCOM_NULL; RETURN; END;
IF T>(TIME+.09) THEN BEGIN ESPY_ESPY-1; DKSP;
   KMSG("SPY ALERTED !");SETEVENT(T,18,0);
   RETURN; END;
IF T>TIME THEN BEGIN KMSG("COMMUNICATION REQUIRES .1");
   KCOM_NULL; RETURN; END;
KMSG("TOO LATE !!"); KCOM_NULL;  END "SPY2";
COMMENT  PUT OUT NICE HELP COMMANDS FOR EITHER PLAYER  *** HELP ;

PROCEDURE HELP1; BEGIN "HELP1"  SETEVENT(0,1,0);
ATMSG("COURSE  IMPULSE  WAIT");
ATMSG("PHASER  TORPEDO  SHIELD");
ATMSG("SCAN    PROBE    BASES");
ATMSG("HAIL    SURRENDER");
ATMSG("THRUST  WF      STATUS"); END "HELP1";

PROCEDURE HELP2; BEGIN "HELP2"   SETEVENT(0,2,0);
KMSG("COURSE  IMPULSE  WAIT");
KMSG("PHASER  TORPEDO  PF");
KMSG("STATUS  GO       AM");
KMSG("HAIL    SPY   SURRENDER");
KMSG("ROMULANS");  END "HELP2";
COMMENT  KLINGON PLAYER FINDS ROMULANS   *** ROMULANS ;
PROCEDURE ROMULANS; BEGIN "ROMULANS" STRING Q,S;
SETFORMAT(1,0); Q_CVS(QH(TDSH))&","&CVS(QV(TDSV));
SETFORMAT(2,0); S_CVS(SH(TDSH))&","&CVS(SV(TDSV));
KMSG("ROMULANS: "&Q&" AT "&S);
SETEVENT(TIME+.03,2,0);
END "ROMULANS";
COMMENT DAMAGE THE ENTERPRISE   *** EDAMAGE
;
PROCEDURE EDAMAGE(REAL P); BEGIN "EDAMAGE" INTEGER J; REAL T;
IF RAN(0)>P THEN RETURN; J_choose(7)+1;
IF J>6 THEN BEGIN
   J_choose(EPERSONF);ATBR(CVS(J)&" PERSONS KILLED !");
   IF P>4 THEN KBAT("SPY KILLS "&CVS(J)&" PERSONS");
   EPERSON_EPERSON-J;
   IF EPERSON<3 THEN BEGIN EZAP; EPERSON_0; END;
   DPE; RETURN; END;
IF EDMG[J]<0 THEN BEGIN EENERGY_EENERGY-(P*300*RAN(0)); DEN;
   IF EENERGY<1 THEN SETEVENT(0,8,0);
    ATBR(CVS(J*50)&" HIT ON ENTERPRISE");
   RETURN; END;
IF P>4 THEN KBAT("SPY DAMAGES "&EDMGTXT[J]);
T_RAN(0); IF RAN(0)>.5 THEN T_.1*T+.03; EDMG[J]_-T;
AT(43,J+17);EPRINT(EDMGTXT[J]);
SETFORMAT(1,2); ATMSG("ESTIMATE REPAIR IN "&CVF(T));
IF J=1 THEN IMP1OFF;
END "EDAMAGE";
COMMENT DO REPAIR OF DAMAGED ENTER.   *** EREPAIR
;
PROCEDURE EREPAIR; BEGIN "EREPAIR"  INTEGER J;
FOR J_1 STEP 1 UNTIL 6 DO IF EDMG[J]<0 THEN
   BEGIN EDMG[J]_EDMG[J]+TICK;
   IF EDMG[J]>0 OR EDMG[J]=0 THEN EFIXED(J); END;
END "EREPAIR";
COMMENT ENTERPRISE FIXED SYSTEM (J)   *** EFIXED
;
PROCEDURE EFIXED(INTEGER J); BEGIN "EFIXED"
EDMG[J]_0; ATMSG(EDMGTXT[J]&" NOW REPAIRED");
AT(43,J+17);EPRINT("          "); END "EFIXED";
COMMENT  KLINGON COMMAND ROUTINES FOLLOW;
PROCEDURE KMOVEIN(INTEGER J); BEGIN "KMOVEIN" REAL D;
IF J=6 THEN RETURN; D_DIS(ESH,ESV,KSH[J],KSV[J]);
KVELH[J]_.8*(ESH-KSH[J])/D+(.3*(.5-RAN(0)));
KVELV[J]_.8*(ESV-KSV[J])/D+(.3*(.5-RAN(0)));
END "KMOVEIN";

PROCEDURE KROAM(INTEGER J); BEGIN "KROAM"
IF ABS(KVELH[J])>.1 OR ABS(KVELV[J])>.1 THEN RETURN;
KVELH[J]_.5-RAN(0); KVELV[J]_.5-RAN(0);  END "KROAM";

PROCEDURE KRETREAT(INTEGER J); BEGIN "KRETREAT"
KVELH[J]_.8*(KSH[J]-ESH)/ABS(KSH[J]-ESH)*RAN(0);
KVELV[J]_.8*(KSV[J]-ESV)/ABS(KSV[J]-ESV)*RAN(0);
END "KRETREAT";

PROCEDURE KPHASER(INTEGER J); BEGIN "KPHASER"
INTEGER H; IF J=6 THEN RETURN;
H_.7*K!PHIT*KEN[J]; KEN[J]_KEN[J]-H;
KVELH[J]_-1*KVELH[J];KVELV[J]_-1*KVELV[J];
IF J=24 THEN DKEN;
H_((RAN(0)*.8)+.6)*H/(DIS(KSH[J],KSV[J],ESH,ESV)/40+1);
KBAT(CVS(H)&" HIT ON ENTERPRISE:"&KCHAR(J));
IF ESHIELD<1 THEN BEGIN EDAMAGE(H/100);EENERGY_EENERGY-H;DEN;
   IF EENERGY<1 THEN SETEVENT(0,8,0);
   ATBR(CVS(H)&" HIT ON ENTERPRISE"); RETURN; END;
IF H>ESHIELD THEN BEGIN ESHIELD_0; DSH;
   EDAMAGE(H/100);ATBR("HIT DEPLETES SHIELDS !");RETURN;END;
ESHIELD_ESHIELD-H;DSH;ATBR("SHIELDS ABSORB "&CVS(H)&" HIT");
END "KPHASER";

PROCEDURE KTORPEDO(INTEGER J); BEGIN "KTORPEDO" REAL D;
D_DIS(ESH,ESV,KSH[J],KSV[J]); IF (D>15 AND J<24) THEN RETURN;
IF GETTORP THEN BEGIN
  TVH[FTORP]_(ESH-KSH[J])/D+(EVELH/2);
  TVV[FTORP]_(ESV-KSV[J])/D+(EVELV/2);
  TSH[FTORP]_KSH[J]+(TVH[FTORP]/2);
  TSV[FTORP]_KSV[J]+(TVV[FTORP]/2);
  KTOR[J]_KTOR[J]-1;IF J=24 THEN DKTO;  END;
KVELH[J]_0;KVELV[J]_0;
END "KTORPEDO";

PROCEDURE KIMPULSE(INTEGER J;REAL H,V); BEGIN "KIMPULSE"
END "KIMPULSE";

PROCEDURE KCOURSE(INTEGER J;REAL H,V); BEGIN "KCOURSE"
END "KCOURSE";
COMMENT  TIME HAS EXPIRED - GAME END   *** TIMEOUT
;
PROCEDURE TIMEOUT; BEGIN "TIMEOUT" STRING S;
OVER_TRUE; CLEAR(1); CLEAR(2);
S_"TIME HAS EXPIRED !"&CRLF&"NEITHER PLAYER HAS WON"&CRLF;
EPRINT(S); KPRINT(S); END "TIMEOUT";
COMMENT  VALIDATE INPUT COMMAND PLAYER 1,  *** VALID1
         DETERMINE COMMAND #  (COMNO)
;
BOOLEAN PROCEDURE VALID1 (REFERENCE STRING Y);
BEGIN "VALID1" STRING TEMP; INTEGER X;
TEMP_SCAN(Y,1,X);
IF EQU(TEMP,NULL) THEN RETURN(FALSE);
FOR COMNO_0 STEP 1 UNTIL COM1MAX DO
    IF EQU(TEMP[1 TO 2],COM1NAME[COMNO]) THEN RETURN(TRUE);
CURS(1,24);EPRINT ("????    ");
TCOM_NULL; RETURN (FALSE);
END "VALID1";
COMMENT   GET 1ST PLAYER'S COMMAND    *** PLAYER1
;
PROCEDURE PLAYER1;
BEGIN "PLAYER1" INTEGER X;
DTI;
DO BEGIN
    IF EQU(TCOM,NULL) THEN BEGIN
   FOR X_0 STEP 1 UNTIL ECLEN DO TCOM_TCOM&" ";
   CURS(3,24);EPRINT(TCOM);
   CURS(1,24);UNLOCK(1);CURS(1,24);EPRINT("C: ");
    TCOM_INPUT(PORT!E); ECLEN_LENGTH(TCOM);
    IF EQU(TCOM,NULL) THEN TCOM_"WA .01"; END;
    END
   UNTIL VALID1(TCOM); LOCK(1); CURS(1,24);EPRINT("-- ");
CASE COMNO OF BEGIN
    [0]WAIT1;    COMMENT PLAYER 1 WAITS;
    [1]IMPULSE1;   
    [2]COURSE1;
    [3]WARP1;
    [4]PHASER1;
    [5]TORPEDO1;
    [6]PROBE1;
    [7]SCAN1;
    [8]THRUST1;
    [9]BASES1;
    [10]SHIELD1;
    [11]HAIL1;
    [12]HELP1; [13]STAT1;
    [COM1MAX]SURREND1
     END;
END "PLAYER1";

COMMENT  VALIDATE INPUT COMMAND PLAYER2 ,  *** VALID2
        DETERMINE COM2NO
;
BOOLEAN PROCEDURE VALID2(REFERENCE STRING Y);
BEGIN "VALID2" STRING TEMP; INTEGER X;
TEMP_SCAN(Y,1,X); IF EQU(TEMP,NULL) THEN RETURN(FALSE);
FOR COM2NO_0 STEP 1 UNTIL COM2MAX DO
  IF EQU(TEMP[1 TO 2],COM2NAME[COM2NO]) THEN RETURN(TRUE);
KURS(1,24);KPRINT("????    "); KCOM_NULL;
RETURN(FALSE);  END "VALID2";
COMMENT  GET 2ND PLAYER'S COMMAND     *** PLAYER2
;
PROCEDURE PLAYER2;
BEGIN "PLAYER2" INTEGER X; DKTI;
DO BEGIN
   IF EQU(KCOM,NULL) THEN BEGIN
      FOR X_0 STEP 1 UNTIL KCLEN DO KCOM_KCOM&" ";
      KURS(3,24);KPRINT(KCOM);
      KURS(1,24);UNLOCK(2);
      KURS(1,24);KPRINT("C: ");KCOM_INPUT(PORT!K);
      KCLEN_LENGTH(KCOM); END;
      IF EQU(KCOM,NULL) THEN KCOM_"WA .01";
   END  UNTIL VALID2(KCOM); LOCK(2); KURS(1,24);KPRINT("-- ");
CASE COM2NO OF BEGIN
     [0]WAIT2;
     [1]COURSE2;   [2]IMPULSE2;
     [3]KGO;       [4]TORP2;
     [5]PHASER2;   [6]PF;
     [7]AF;        [8]ST;
     [9]HAIL2;     [10]SPY2;
     [11]HELP2;    [12]ROMULANS;
  [COM2MAX]SURREND2   END;

END "PLAYER2";

COMMENT  EVENT FREE LIST EXHAUSTED   *** NOEVENTS
             MUST FORCE END OF GAME
;
PROCEDURE NOEVENTS;
BEGIN "NOEVENTS"
OVER_TRUE;
ATMSG("EVENT FREE LIST EMPTY");
END "NOEVENTS";

COMMENT QUAD BUILD, ENTERPRISE    *** EQUADIN
        IN NEW QUADRANT   **EVENT 4 **
         (NEWQX,NEWQY,NEWSX,NEWSY)
;
PROCEDURE EQUADIN;
BEGIN "EQUADIN" INTEGER J,X,Y;
EQH_NEWQX;EQV_NEWQY; RANDSEC(EQH,EQV);
ESH_RSH;ESV_RSV;AT(80,1);EPRINT(" "); DQU; DSE;
EHYPER_FALSE;
QMAP[ESH,ESV]_"E";KSHOW(ESH,ESV);
FOR X_(EQH-1)*40+1 STEP 1 UNTIL (EQH-1)*40+40 DO
    FOR Y_(EQV-1)*23+1 STEP 1 UNTIL (EQV-1)*23+23 DO
        IF QMAP[X,Y] NEQ 0 THEN ESHOW(X,Y);
DOCKCHECK; SETEVENT(TIME+.03,12,EQH*10+EQV);
FOR J_1 STEP 1 UNTIL KTMAX DO
  IF SAMESEC(EQH,EQV,KQH[J],KQV[J]) THEN SETEVENT(TIME+.01,10,J);
END "EQUADIN";
COMMENT IMPULSE ENGINES OFF   *** IMP1OFF
        AT THIS TIME      ** EVENT 5 **
;
PROCEDURE IMP1OFF;
BEGIN "IMP1OFF"  CANEVENT(5);
IF EVELH=0 AND EVELV=0 THEN RETURN;
EVELH_0; EVELV_0; DOCKCHECK;
AT(80,3);EPRINT(" ");  END "IMP1OFF";
COMMENT  DO NOTHING    EVENT 6       *** NULLEVENT
;
PROCEDURE NULLEVENT; BEGIN "NULLEVENT" RETURN; END "NULLEVENT";
COMMENT KLINGONS LOOSE!  ***EVENT 7  *** P1WIN
;
PROCEDURE P1WIN; BEGIN "P1WIN"
CLEAR(1);EPRINT("  THE FEDERATION IS SAVED !!
YOU HAVE DESTROYED THE KLINGON MENACE !"&CRLF);
CLEAR(2);KPRINT("THE KLINGON FLEET HAS BEEN ANNIHILATED!");
KPRINT(CRLF&"THE FEDERATION WILL ENDURE !"&CRLF);
OVER_TRUE; END "P1WIN";
COMMENT  KLINGONS WIN !   *** EVENT 8   *** P2WIN
;
PROCEDURE P2WIN; BEGIN "P2WIN"
CLEAR(1);EPRINT("THE ENTERPRISE HAS BEEN LOST !! 
THE KLINGON MENACE WILL GO UNCHECKED !"&CRLF);
CLEAR(2);KPRINT("THE FEDERATION HAS BEEN CONQUERED !");
KPRINT(CRLF&"THE KLINGON FLEET HAS TRIUMPHED !"&CRLF);
OVER_TRUE; END "P2WIN";
COMMENT  KLINGON ENTERS QUAD   EVENT 9   *** KQUADIN ;
PROCEDURE KQUADIN; BEGIN "KQUADIN"
INTEGER J,X,Y;
J_EVENTX; KQH[J]_NKQH[J]; KQV[J]_NKQV[J];
RANDSEC(KQH[J],KQV[J]); KSH[J]_RSH; KSV[J]_RSV;
QMAP[RSH,RSV]_"K"; ESHOW(RSH,RSV);
IF J<24 THEN BEGIN SETFORMAT(1,0);
   KURS(75,J); KPRINT(" ");
   IF SAMESEC(EQH,EQV,KQH[J],KQV[J]) THEN SETEVENT(TIME+.01,10,J);
   KSHOW(RSH,RSV); RETURN; END;
FOR X_(FQH-1)*40+1 STEP 1 UNTIL (FQH-1)*40+40 DO
   FOR Y_(FQV-1)*23+1 STEP 1 UNTIL (FQV-1)*23+23 DO
      IF QMAP[X,Y] NEQ 0 THEN KSHOW(X,Y);
DKQU; DKSE; KURS(23,1); KPRINT(" ");
END "KQUADIN";
COMMENT CONTROLLER FOR KLINGONS    EVENT 10    *** KFIGHT ;
PROCEDURE KFIGHT; BEGIN "KFIGHT" INTEGER J; REAL H,V;
REAL DIST; BOOLEAN EPATH;
J_EVENTX; IF KQH[J]=0 THEN RETURN;
IF J=24 AND PORT!K NEQ 0 THEN RETURN;
IF NOT SAMESEC(KQH[J],KQV[J],EQH,EQV) THEN RETURN;
IF DOCKED THEN BEGIN SETEVENT(TIME+.02,10,J);RETURN;END;
DIST_DIS(KSH[J],KSV[J],ESH,ESV);EPATH_PATH(KSH[J],KSV[J],ESH,ESV);
IF NOT EFOUND THEN BEGIN EFOUND_TRUE;
   KBAT("ENTERPRISE FOUND BY "&KCHAR(J)); END;
IF NOT EPATH AND KEN[J]<K!ATTACKMIN THEN
   IF KTOR[J]>2 THEN
      BEGIN KROAM(J); SETEVENT(TIME+.02,10,J);RETURN;END
      ELSE BEGIN IF RAN(0)<.7 THEN KVELH[J]_KVELV[J]_0;
           SETEVENT(TIME+.02,10,J);RETURN;END;
IF KEN[J]>K!ATTACKMIN THEN
   IF DIST<30 THEN BEGIN KPHASER(J); KROAM(J);
          IF EPATH AND KTOR[J]>1 AND RAN(0)<.7 THEN KTORPEDO(J);
                  SETEVENT(TIME+.03,10,J);RETURN;END
         ELSE IF EPATH THEN BEGIN KMOVEIN(J);
              SETEVENT(TIME+.02,10,J);RETURN;END;
IF EPATH AND RAN(0)<KTOR[J]/KTORF THEN KTORPEDO(J);
IF EPATH AND KTOR[J]>1 THEN KRETREAT(J);
IF EPATH AND KEN[J]<K!ATTACKMIN AND KTOR[J]=0 THEN KMOVEIN(J);
SETEVENT(TIME+.02,10,J);
END "KFIGHT";
COMMENT SHUT OFF KLINGON IMPULSE ENGINE  EVENT 11  *** IMP2OFF ;
PROCEDURE IMP2OFF; BEGIN "IMP2OFF"
KVELH[24]_KVELV[24]_0;
END "IMP2OFF";
COMMENT SHOW QUAD SUMMARY FOR ENTERPRISE  EVENT 12  *** GMAP ;
PROCEDURE GMAP; BEGIN "GMAP" STRING S; INTEGER X,Y,H,V;
IF EDMG[6]<0 THEN BEGIN SETEVENT(TIME+.1,12,EVENTX); RETURN; END;
H_EVENTX DIV 10; V_EVENTX MOD 10; X_0; SETFORMAT(1,0);
IF RADIO!ON AND SAMESEC(H,V,RSTARH,RSTARV) THEN BEGIN
     ATMSG("RADIO STAR JAMS SCAN "&CVS(H)&","&CVS(V));
     RETURN; END;
FOR Y_1 STEP 1 UNTIL 24 DO
   IF SAMESEC(H,V,KQH[Y],KQV[Y]) THEN X_X+1;
IF X<10 THEN S_CVS(X) ELSE S_X+55;
CURS((H-1)*2+71,(V-1)*2+5); EPRINT(S);
END "GMAP";
COMMENT REFUEL KLINGON CRUISERS  EVENT 13  *** REFUEL2 ;
PROCEDURE REFUEL2; BEGIN "REFUEL2" INTEGER J;
IF KEN[6]<1000 THEN RETURN;  SETEVENT(TIME+.06,13,0);
IF DIS(ESH,ESV,KSH[6],KSV[6])<10 THEN RETURN;
FOR J_1 STEP 1 UNTIL 24 DO BEGIN
  IF J=6 THEN CONTINUE;
  IF KQH[J]=0 THEN CONTINUE;
  IF DIS(KSH[J],KSV[J],KSH[6],KSV[6])>25 THEN CONTINUE;
  IF KEN[J]>(KENF-1) THEN CONTINUE;
   KEN[J]_KEN[J]+100; KEN[6]_KEN[6]-100;
   IF KEN[J]>KENF THEN KEN[J]_KENF;
   KMSG("REFUELING CRUISER "&KCHAR(J));
  IF J=24 THEN DKEN;   END;
END "REFUEL2";
COMMENT SHOW TIME EVERY .1 UNITS   EVENT 14 *** DTIME;
PROCEDURE DTIME; BEGIN DTI; DKTI; SETEVENT(TIME+.1,14,0); END;
COMMENT ACTIVATE TRIBBLES !! EVENT 15  *** TRIB ;
PROCEDURE TRIB; BEGIN "TRIB" REAL T;
IF EHYPER THEN BEGIN SETEVENT(TIME+.15,15,0); RETURN; END;
T_RAN(0)*.2+.1+TIME;
SETEVENT(T,16,0); TRIBBLES_TRUE;
ATMSG("TRIBBLES IN COMPUTER !!"); END "TRIB";
COMMENT CLEAR TRIBBLES   EVENT 16 *** NOTRIB ;
PROCEDURE NOTRIB; BEGIN "NOTRIB" REAL T; TRIBBLES_FALSE;
ATMSG("TRIBBLES SUBDUED AT LAST");
T_RAN(0)*40+.7+TIME; IF T>38 THEN RETURN;
SETEVENT(T,15,0); END "NOTRIB";
COMMENT  PLAYFUL TRIBBLES  EVENT 17  *** PLAY ;
PROCEDURE PLAY; BEGIN "PLAY" INTEGER J; STRING S;
SETEVENT(RAN(0)*.1+TIME,17,0);
IF NOT TRIBBLES THEN RETURN;
IF RAN(0)<.2
 THEN TCOM_ (CASE J_RAN(0)*4
	 OF ("PR 3,3 ", "TO 20,12 ", "BA ", "WF 2 ")) & tcom;
IF RAN(0)>.8 THEN RETURN ELSE J_choose(27);
SETFORMAT(2,0); 
ATMSG( CASE J OF 
 ("I'M SORRY I CAN'T DO THAT",		"CHECKMATE !!!  ",
  "ROMULAN DREADNOUGHT !",		"TRIANGULATION FAILED",
  "COMPUTER-PAC D+9# FAILED",		"MEMORY UNDERFLOW",
  "SYNTAX UNDISTRIBUTED",		"FAILURE CO-ROUTINE AAJ4",
  "1 + 1 - 1 = 0 ",			"IT DOES NOT COMPUTE",
  "(4,2)(3,1)(4,2)(5,2)",		"(2,3)(1,4)(2,3)(4,4)",
  "I SEE NO EMERALD HERE.",		"DON'T BECOME EMOTIONAL",
  "WELCOME TO ADVENTURE",		"TRIBBLES SUBDUED AT LAST",
  "NO SUCH QUADRANT",			"HYPERSPACE IS FLAT ?",
  "A CHEERFUL LITTLE ROMULAN",		"SCANNERS ACTIVATED",
  "TORPEDOES EXHAUSTED !",		"TRIBBLES IN COMPUTER !!",
  "DILITHIUM IS DELICIOUS",		" > > > > > > > > > > > >",
  "DAISY,DAISY,GIVE ME YOUR",
  "THOLIANS-"&CVS(choose(99))&"  KLINGONS-"&CVS(choose(9)),
  "SCANNERS SPOT "&CVS(choose(50))&" KLINGONS"
 ) );
END "PLAY";
COMMENT  SPY DAMAGE   EVENT 18  *** SPY ;
PROCEDURE SPY; BEGIN "SPY" INTEGER J;STRING S;REAL T;
ATMSG( (CASE J_choose(3) OF ("ROMULAN", "KLINGON", "THOLIAN")) 
	& " SPY !!");
EDAMAGE(5);
T_RAN(0)*30+TIME+1; IF T>39 THEN RETURN;
IF PORT!K=0 THEN SETEVENT(T,18,0);  END "SPY";
COMMENT  RIGELLIAN FEVER  EVENT 19 *** PLAGUE ;
PROCEDURE PLAGUE; BEGIN "PLAGUE" INTEGER J;
J_choose(.3*EPERSON+10); IF J>EPERSON THEN J_EPERSON/3;
SETFORMAT(2,0); ATMSG("RIGELLIAN FEVER KILLS "&CVS(J));
EPERSON_EPERSON-J; DPE; IF EPERSON<3 THEN EZAP;
IF RAN(0)<.7 THEN SETEVENT(RAN(0)*.3+TIME,19,0) ELSE
   BEGIN ATMSG("PLAGUE ABATED   ");
   IF RAN(0)<.7 THEN SETEVENT(RAN(0)*20+TIME,19,0);
   END;
END "PLAGUE";
COMMENT  ROMULAN SPACE MINES  EVENT 20 *** MINES ;
PROCEDURE MINES; BEGIN "MINES"  REAL X;
IF EHYPER THEN BEGIN SETEVENT(TIME+.5,20,0); RETURN; END;
X_RAN(0)*30; SETEVENT(TIME+X,20,0);
ATMSG("ROMULAN SPACE MINE !!"); EDAMAGE(1);
END "MINES";
COMMENT  ROMULAN DREADNOUGHT  EVENT 21  *** DREAD ;
PROCEDURE DREAD; BEGIN "DREAD"  REAL D;  INTEGER H;
SETEVENT(TIME+.03,21,0);  D_DIS(TDSH,TDSV,ESH,ESV);
IF D>10 THEN RETURN; IF EHYPER THEN RETURN;
ATMSG("ROMULAN DREADNOUGHT !");
IF RAN(0)<.7 THEN BEGIN
   H_EENERGY+(ESHIELD/2);
   IF H>1000 THEN H_1000; H_(H/3)*RAN(0)+(H/5);
   SETFORMAT(3,0); ATBR(CVS(H)&" SHOT BY ROMULANS");
   IF H>ESHIELD THEN BEGIN ESHIELD_0; DSH;
      EDAMAGE(H/100); RETURN; END;
   ESHIELD_ESHIELD-H; DSH;
   ATBR("ABSORBED BY SHIELDS"); END;
END "DREAD";
COMMENT  TURN RADIO STAR ON/OFF   EVENT 22  *** RADIO ;
PROCEDURE RADIO; BEGIN "RADIO"
SETEVENT(RAN(0)*.4+.3+TIME,22,0);
IF RADIO!ON THEN RADIO!ON_FALSE ELSE RADIO!ON_TRUE;
END "RADIO";
COMMENT  FRIENDLY SHIP HELPS ENTERPRISE EVENT 23 *** FRIEND ;
PROCEDURE FRIEND(integer whom); BEGIN "FRIEND"
    preset!with
	"EXCALIBUR",	"INTREPID",	"EL DORADO",	"KRIEGER",
	"BEHR'AK",	"K'HOTAN",	"KASIMAR",	"MONDOLOY",
	"SHAANDRA",	"POLARIS",	"LUCIFER",	"HANNIBAL",
	"CYGNUS",	"URSA MINOR",	"DIANA",	"XERXES",
	"WASP",		"ELOHIM",	"SALADIN",	"LYSANDER";
    own string array fname[1:20];
	string name;
assert(0<whom<21); name_fname[whom];
ATMSG("USS " & name & " IS NEARBY");
KMSG("USS "& name &" NEARBY !");
case choose(10) of
 begin
  [0] BEGIN				!! kill the sucker;
      ATMSG( name &" DESTROYED !");
      KMSG( name &" DESTROYED !");
      ATMSG("SURVIVORS BOARD ENTERPRISE");
      EPERSON_EPERSON+choose(100); DPE;
      RETURN; END;
  [1][2][3][4] BEGIN			!! attack, but he wins;
   ATMSG( name &" IS ATTACKED");
   KZAP(choose(23)+1);		!! kill off a KLINGON;
   ATMSG( name &" WINS BATTLE");
   END;
  ELSE BEGIN integer k;			!! help out enterprise;
    ATMSG( name &" LENDS AID"); !! fix damage;
    FOR K_1 STEP 1 UNTIL 6 DO IF EDMG[K]<0 THEN EFIXED(K);
    EENERGY_EENERGYF; DEN;
    ETORPEDO_ETORPEDOF; DTO;
   END
 end;
SETEVENT( (IF RAN(0)<.3 THEN .2 else 8.)*RAN(0) +TIME, 23, whom);
END "FRIEND";
COMMENT  REMOVE AN EVENT FROM   *** CANEVENT
         THE EVENT LIST (MAKE IT NULL)
;
PROCEDURE CANEVENT(INTEGER CODE);
BEGIN "CANEVENT"  INTEGER X;
X_EVENTTOP; DO BEGIN
    IF EVENTTODO[X]=CODE THEN EVENTTODO[X]_6;
    X_EVENTNEXT[X]; END UNTIL X=0;
END "CANEVENT";
COMMENT  SEE IF ENTERPRISE DOCKED,    *** DOCKCHECK
        IF SO, REFUEL
;
PROCEDURE DOCKCHECK; 
BEGIN "DOCKCHECK"  IF DOCKED THEN RETURN;
FOR I1_1 STEP 1 UNTIL BASEMAX DO
    IF ADJACENT(ESH,ESV,BSH[I1],BSV[I1]) THEN
       BEGIN  DOCKED_TRUE; IMP1OFF;
       ATMSG("DOCKED AT BASE "&CVS(I1));
       REFUEL1(I1); RETURN;  END;
END "DOCKCHECK";
COMMENT OKAY, MOVE ENTER. NEW SECTOR     *** ENEWSEC
;
PROCEDURE ENEWSEC; BEGIN "ENEWSEC"
QMAP[ESH,ESV]_0; ESHOW(ESH,ESV);KSHOW(ESH,ESV);
ESH_ESH+EVELH; ESV_ESV+EVELV;
QMAP[ESH,ESV]_"E";ESHOW(ESH,ESV);KSHOW(ESH,ESV);DSE;END "ENEWSEC";
PROCEDURE KNEWSEC(INTEGER J); BEGIN "KNEWSEC" INTEGER X,Y;
X_KSH[J];Y_KSV[J];QMAP[X,Y]_0; ESHOW(X,Y);KSHOW(X,Y);
X_KSH[J]_KSH[J]+KVELH[J]; Y_KSV[J]_KSV[J]+KVELV[J];
QMAP[X,Y]_"K";ESHOW(X,Y);KSHOW(X,Y);
IF J=24 THEN DKSE;
END "KNEWSEC";
COMMENT  RESOLVE CONFLICT AS OBJECT S     *** COLLISION
        ENTERS OCCUPIED SEC (X,Y)
;
PROCEDURE COLLISION(integer actor; INTEGER J; REAL X,Y);
BEGIN "COLLISION"  REAL Z; integer index,recipient,i1,i2;
		string objects; 
recipient_qmap[x,y];
objects_ ".*=KE"; i1_i2_length(objects);
while index_lop(objects) 
   do begin 
	if actor=index then i1_ length(objects);
	if recipient=index then i2_ length(objects);
      end;
if i1>i2 then i1 swap i2;
case i1*4+i2 of
!! cases:
	 0 EE
	 4 KE  5 KK
	 8 =E  9 =K 10 ==
	12 *E 13 *K 14 *= 15 **
	16 .E 17 .K 18 .= 19 .* 20 ..
;
begin
[ 4] !! KE IF actor="E"
	 THEN BEGIN I1_WHICHK(X,Y);	!! enterprise hits klingon;
		IF RAN(0)<.55
		 THEN BEGIN
			ATMSG("COLLIDING WITH KLINGON !");
			EDAMAGE(KEN[I1]/100); KZAP(I1); ENEWSEC; 
		      END
		 ELSE BEGIN
			ATMSG("NEAR COLLISION - TURNING");
			Z_EVELV; EVELV_-1*EVELH; EVELH_-1*Z; 
		      END
	 ELSE BEGIN		!! klingon hits enterprise;
		ATMSG("KLINGON DROVE INTO YOU");
		IF RAN(0)<.8 THEN EDAMAGE(1); KZAP(J);
	      END;
[ 5] !! KK; BEGIN I1_WHICHK(X,Y);
	     IF RAN(0)<.5
		 THEN BEGIN KVELH[J]_KVELH[I1]_.5-RAN(0);
			    KVELV[J]_KVELV[I1]_.5-RAN(0); END
		 ELSE BEGIN KVELH[J] SWAP KVELH[I1];
			    KVELV[J] SWAP KVELV[I1]; END;
	    END;

[ 8] !! =E; BEGIN ATMSG("DOCKING - THRUST REDUCED");
		EISPEED_EISPEED/2;EVELH_EVELH/2;EVELV_EVELV/2; DTH; 
	    END;
[ 9] !! =K; BEGIN KVELH[J]_.3*(.5-RAN(0)); KVELV[J]_.3*(.5-RAN(0)); END;

[12] !! *E; BEGIN ATMSG("HALTED, STAR DEAD AHEAD"); IMP1OFF; END;
[13] !! *K; BEGIN KVELH[J]_.5-RAN(0); KVELV[J]_.5-KVELH[J]; END;

[16] !! .E; BEGIN tzap( IF actor="." THEN J else whicht(x,y) );
		ESHIELD_ESHIELD-(220*RAN(0)+220);
		IF ESHIELD geq 0 
		 then begin dsh; ATMSG("SHIELDS ABSORB TORPEDO") END
		 else begin ESHIELD_0; dsh; EDAMAGE(1); 
			KBAT("TORPEDO HITS ENTERPRISE");
			ATBR("TORPEDO HITS ENTERPRISE");
			END;
	    END;
[17] !! .K; BEGIN	tzap( IF actor="." THEN J else whicht(x,y) );
		I1_ IF recipient="K" THEN WHICHK(X,Y) ELSE J;
		KROCK(I1,2); ATBR("TORPEDO HITS KLINGON");
		KBAT("CRUISER "&KCHAR(I1)&" HIT BY TORPEDO");
		IF RAN(0)<.4 THEN KZAP(I1)
		 else begin
			IF I1 NEQ 6 THEN KEN[I1]_.7*KEN[I1]-50;
			IF I1=24 THEN DKEN;
			IF KEN[I1]<1 THEN KZAP(I1);
		      END;
	    END;
[18] [19] !! .= or .*;
	    tzap( IF actor="." THEN J else whicht(x,y) );
[20] !! ..; BEGIN tzap( J ); tzap( whicht(x,y) ); END;

ELSE usererr(0,1,"Illegal collision: "&actor&" -> "&recipient)
  END;
END "COLLISION";
PROCEDURE MOVEK; BEGIN "MOVEK"  REAL NH,NV; INTEGER J;
FOR J_1 STEP 1 UNTIL KTMAX DO BEGIN
   IF KQH[J]=0  or  (KVELH[J]=0=KVELV[J]) THEN CONTINUE;
   NH_KSH[J]+KVELH[J]; NV_KSV[J]+KVELV[J];
   IF NOT SAMESEC(QH(NH),QV(NV),KQH[J],KQV[J])
		THEN BEGIN KVELH[J]_.5-RAN(0); KVELV[J]_.5-RAN(0); END
    ELSE IF SAMESEC(NH,NV,KSH[J],KSV[J])
		THEN BEGIN KSH[J]_NH; KSV[J]_NV; END
    ELSE IF QMAP[NH,NV] NEQ 0 THEN COLLISION("K",J,NH,NV)
    ELSE KNEWSEC(J); 
 END;
END "MOVEK";
COMMENT   MOVE THE ENTERPRISE AND      ***MOVEENT
        RESOLVE SECTOR ENTRY CONFLICTS
;
PROCEDURE MOVEENT;
BEGIN "MOVEENT"  REAL NEWH,NEWV;
IF EHYPER or (EVELH=0=EVELV) THEN RETURN;
NEWH_ESH+EVELH; NEWV_ESV+EVELV;
IF NOT SAMESEC(QH(NEWH),QV(NEWV),EQH,EQV) THEN IMP1OFF
 ELSE IF QMAP[NEWH,NEWV]="E" THEN BEGIN ESH_NEWH; ESV_NEWV; END
 ELSE IF QMAP[NEWH,NEWV] NEQ 0 THEN COLLISION("E",0,NEWH,NEWV)
 ELSE ENEWSEC;
END "MOVEENT";
COMMENT  MOVE ANY PROBES      *** MOVEP ;
PROCEDURE MOVEP; BEGIN "MOVEP" REAL NEWH,NEWV; INTEGER X;
FOR X_1 STEP 1 UNTIL PROBEMAX DO IF PSH[X]>0 THEN BEGIN
	NEWH_PSH[X]+PVH[X]; NEWV_PSV[X]+PVV[X];
	IF (1 leq NEWH leq GWIDTH)  and  (1 leq NEWV leq GHEIGHT)
	 THEN BEGIN 
		IF NOT SAMESEC(QH(NEWH),QV(NEWV),QH(PSH[X]),QV(PSV[X])) 
		 THEN SETEVENT(TIME,12,10*QH(NEWH)+QV(NEWV));
		PSH[X]_NEWH; PSV[X]_NEWV; 
	      END
	 ELSE PSH[X]_PSV[X]_PVH[X]_PVV[X]_0;
       END
END "MOVEP";
COMMENT  MOVE ALL THE TORPEDOES     *** MOVETORP
;
PROCEDURE MOVETORP; BEGIN "MOVETORP" REAL NEWH,NEWV; INTEGER X;
FOR X_1 STEP 1 UNTIL TORPMAX DO IF TSH[X]>0 THEN BEGIN
  NEWH_TSH[X]+TVH[X]; NEWV_TSV[X]+TVV[X];
  IF NOT SAMESEC(QH(NEWH),QV(NEWV),EQH,EQV) AND
     NOT SAMESEC(QH(NEWH),QV(NEWV),FQH,FQV) THEN BEGIN
     TZAP(X); CONTINUE; END;
  IF SAMESEC(TSH[X],TSV[X],NEWH,NEWV) THEN BEGIN
     TSH[X]_NEWH;TSV[X]_NEWV;CONTINUE; END;
  IF QMAP[TSH[X],TSV[X]]="." THEN BEGIN
     QMAP[TSH[X],TSV[X]]_0;
     ESHOW(TSH[X],TSV[X]);KSHOW(TSH[X],TSV[X]); END;
  IF QMAP[NEWH,NEWV]=0 THEN BEGIN TSH[X]_NEWH;
     TSV[X]_NEWV; QMAP[NEWH,NEWV]_".";
     ESHOW(NEWH,NEWV);KSHOW(NEWH,NEWV);CONTINUE; END;
  COLLISION(".",X,NEWH,NEWV); END;
END "MOVETORP";
COMMENT  MOVE THE ROMULANS  *** MOVED ;
PROCEDURE MOVED; BEGIN "MOVED"
TDSH_TDSH+TDVH; IF (TDSH>GWIDTH) OR (TDSH<1) THEN TDVH_-1*TDVH;
TDSV_TDSV+TDVV; IF (TDSV>GHEIGHT) OR (TDSV<1) THEN TDVV_-1*TDVV;
END "MOVED";
COMMENT  UPDATE GALACTIC LOCATION      *** UPDATE
             OF ALL THE LITTLE MOVING GOODIES
;
PROCEDURE UPDATE;
BEGIN "UPDATE"
MOVETORP; MOVEENT; EREPAIR; MOVEK; MOVEP; MOVED; MOVETORP;
END "UPDATE";
COMMENT  ADD EVENT TO LIST        *** SETEVENT
;
PROCEDURE SETEVENT(REAL T; INTEGER CODE,J);
BEGIN "SETEVENT"
INTEGER X,Y,TEMP ;
if t<time then begin usererr(0,1,"Setting the past"); t_time; end;
IF T>TIMEMAX THEN RETURN ;
TEMP_EVENTNEXT[EVENTFREE];
IF TEMP = 0 THEN BEGIN
          EVENTTIME[EVENTFREE]_TIME;
          EVENTTODO[EVENTFREE]_0; COMMENT MUST HALT !!;
          EVENTTOP_EVENTFREE;  RETURN;
          END;
TEMP_EVENTFREE;  EVENTFREE_EVENTNEXT[TEMP];
X_EVENTTOP ; Y_EVENTTOP;
WHILE T>EVENTTIME[X] DO BEGIN Y_X; X_EVENTNEXT[X]; END;
EVENTNEXT[TEMP]_X;
IF X=EVENTTOP THEN EVENTTOP_TEMP
               ELSE EVENTNEXT[Y]_TEMP;
EVENTTIME[TEMP]_T;EVENTTODO[TEMP]_CODE;EVENTJ[TEMP]_J;
END "SETEVENT";
COMMENT   RESOLVE - DO APPROPRIATE EVENT  ***RESOLVE
;
PROCEDURE RESOLVE;
BEGIN "RESOLVE"
CASE EVENTNO OF BEGIN
  NOEVENTS;		!!  0  FREE EVENT LIST EXHAUSTED ;
  PLAYER1;		!!  1 GET 1ST PLAYERS COMMAND;
  PLAYER2;		!!  2 GET 2ND PLAYERS COMMAND;
  TIMEOUT;		!!  3 TIME EXHAUSTED  GAME END;
  EQUADIN;		!!  4 ENTERPRISE NEW QUAD ENTRY;
  IMP1OFF;		!!  5 SHUT OFF IMPULSE ENGINES;
  NULLEVENT;		!!  6 A CANCELLED EVENT;
  P1WIN;		!!  7 KLINGONS LOOSE! ;
  P2WIN;		!!  8 KLINGONS WIN !! ;
  KQUADIN;		!!  9 KLINGON NEW QUAD;
  KFIGHT;		!! 10 KLINGON BATTLE CONTROL;
  IMP2OFF;		!! 11 OFF FLAGSHIP IMPULSE ENG. ;
  GMAP;			!! 12 QUAD SUMMARY MAP ;
  REFUEL2;		!! 13 REFUEL KLINGON SHIP;
  DTIME;		!! 14 SHOW TIME EVERY .1;
  TRIB;			!! 15 ACTIVATE TRIBBLES ! ;
  NOTRIB;		!! 16 CLEAR TRIBBLES ;
  PLAY;			!! 17 DO TRIBBLE NUISANCE;
  SPY;			!! 18 DO SPY DAMAGE ;
  PLAGUE;		!! 19 RIGELLIAN FEVER ;
  MINES;		!! 20 ROMULAN MINE ;
  DREAD;		!! 21 ROMULANS ;
  RADIO;		!! 22 RADIO STAR ;
  FRIEND(eventx)	!! 23 FRIENDLY SHIPS HELPS ENTERPRISE;
  END;
END "RESOLVE";
COMMENT   PUT CURSOR ON SECTOR MAP   *** AT
;
PROCEDURE AT (REAL H,V);
BEGIN "AT" INTEGER X,Y;
X_H ; Y_V ;      CURS(X,Y);
END "AT";
COMMENT CURSOR TO KLINGON SECTOR MAP    *** KAT ;
PROCEDURE KAT(INTEGER H,V); BEGIN
H_H+33; KURS(H,V); END;
COMMENT  BUILD STARS IN GALAXY ;
PROCEDURE STARBUILD; BEGIN "STARBUILD" INTEGER X;
FOR X_1 STEP 1 UNTIL STARMAX DO BEGIN
    RANDLOC; QMAP[RSH,RSV]_"*"; END;
END "STARBUILD";
COMMENT  BUILD STARBASES ACROSS GALAXY ;
PROCEDURE BASEBUILD; BEGIN "BASEBUILD" INTEGER X,Y;
X_ basemax max (choose(BASEMAX-1)+2);
FOR Y_1 STEP 1 UNTIL X DO BEGIN
   RANDLOC; BSH[Y]_RSH;BSV[Y]_RSV;
   BQH[Y]_QH(BSH[Y]); BQV[Y]_QV(BSV[Y]);
   QMAP[RSH,RSV]_"="; BENERGY[Y]_BENERGYTOT/X;
   BTORPEDO[Y]_BTORPEDOTOT/X;BPROBE[Y]_BPROBETOT/X;
   BPERSON[Y]_BPERSONTOT/X;BSPY[Y]_2;END;
END "BASEBUILD";
COMMENT  BUILD KLINGONS ACROOS GALAXY ;
PROCEDURE KLINGBUILD; BEGIN "KLINGBUILD" INTEGER X;
KTOT_24;
FOR X_1 STEP 1 UNTIL 23 DO BEGIN
   RANDLOC; KSH[X]_RSH;KSV[X]_RSV;QMAP[RSH,RSV]_"K";
   KQH[X]_QH(KSH[X]); KQV[X]_QV(KSV[X]);
   KEN[X]_KENF; KTOR[X]_KTORF; END;
END "KLINGBUILD";
COMMENT  IS TIME FOR AN EVENT TO OCCUR??  *** EVENT
;
BOOLEAN PROCEDURE EVENT;
BEGIN "EVENT" INTEGER TEMP;
IF TIME<EVENTTIME[EVENTTOP] THEN RETURN(FALSE);
EVENTNO_EVENTTODO[EVENTTOP];EVENTX_EVENTJ[EVENTTOP];
TEMP_EVENTNEXT[EVENTTOP]; EVENTNEXT[EVENTTOP]_EVENTFREE;
EVENTFREE_EVENTTOP; EVENTTOP_TEMP;
RETURN(TRUE);
END "EVENT";
COMMENT TIME SIMULATION CYCLE       CYCLE PROC
;
PROCEDURE CYCLE;
BEGIN "CYCLE"
UPDATE;
TIME_TIME+TICK;
WHILE NOT OVER AND EVENT DO RESOLVE;
END "CYCLE";
COMMENT  DISPLAY WIN OR LOSE    *** RESULTS ***
;
PROCEDURE RESULTS;
BEGIN "RESULTS" STRING S;
UNLOCK(1); UNLOCK(2);
OUTPUT(PORT!1,CRLF&"PLAY AGAIN ? <Y,N> ");
S_INPUT(PORT!1); S_S[1 FOR 1];
IF "y" NEQ S NEQ "Y" THEN GAMEDONE_TRUE;
END "RESULTS";
COMMENT   INITIALIZE ENTERPRISE PARAMS ***EINIT
;
PROCEDURE EINIT; BEGIN "EINIT"  INTEGER X,Y;
CLEAR(1); EFOUND_FALSE;
EWSPEED_6; EISPEED_70; EENERGY_EENERGYF; ESHIELD_0;
EVELH_0; EVELV_0; MSGLINE_17; BRLINE_9; ESPY_0;
ETORPEDO_ETORPEDOF;EPROBE_EPROBEF;EPERSON_EPERSONF;
NEWQX_choose(5)+1; NEWQY_choose(5)+1;
AT(44,1);EPRINT("TIME"); AT(58,1);EPRINT("QUAD");
AT(71,1);EPRINT("WARP"); AT(43,3);EPRINT("ENERGY");
AT(58,3);EPRINT("SEC");  AT(70,3);EPRINT("THRUST");
AT(43,5);EPRINT("SHIELDS"); AT(58,5);EPRINT("TORPEDO");
AT(43,7);EPRINT("PERSONNEL"); AT(58,7);EPRINT("PROBES");
FOR X_6 STEP 2 UNTIL 12 DO
	BEGIN CURS(71,X); EPRINT("-+-+-+-+-"); END;
FOR X_5 STEP 2 UNTIL 13 DO
	BEGIN CURS(71,X); EPRINT(" | | | | "); END;
AT(43,17);EPRINT("- DAMAGE -");
DWF; DTH; DSH; DEN; PHTIME_-1;
DPE; DTO; DPR; DOCKED_FALSE; EQUADIN;
END "EINIT";
COMMENT  INITIAL. FLAGSHIP OF KLINGONS  *** FINIT ;
PROCEDURE FINIT; BEGIN "FINIT" INTEGER J;
CLEAR(2); KEN[24]_KENF; KTOR[24]_9; FISPEED_70;
NKQH[24]_choose(5)+1; NKQV[24]_choose(5)+1;
FOR J_1 STEP 1 UNTIL KTMAX-1 DO BEGIN
    KURS(76,J); KPRINT(KCHAR(J));SETFORMAT(1,0);KPRINT(" ");
    KPRINT(CVS(KQH[J])&","&CVS(KQV[J])); END;
KURS(1,1);KPRINT("TIME");KURS(13,1);KPRINT("SEC");
KURS(24,1);KPRINT("QUAD");KURS(1,3);KPRINT("ENERGY");
KURS(14,3);KPRINT("TORPEDOS");KURS(26,3);KPRINT("SPIES");
KURS(1,5);KPRINT("PHASER FACTOR");KURS(19,5);KPRINT("ATTACK MIN");
DKEN;DKTO;DKSP;DKPF;DKAF; EVENTX_24; KQUADIN;
KMLINE_17;KBLINE_15;
COMMENT  INIT FUELSHIP HERE ; KEN[6]_20000; SETEVENT(TIME+.1,13,0);
END "FINIT";
COMMENT  ASSIGN PORTS AND GET 2ND PLAYER ON BOARD  *** TERMINIT
;
PROCEDURE TERMINIT; BEGIN "TERMINIT" STRING S; INTEGER J;

DO PRINT("TERMINAL TYPE  ADM=0  HAZEL=1 HP=2 ?? <0,1,2> :")
    UNTIL 0 LEQ (TTYPE[1]_CVD(INCHWL&",-1")) LEQ 3;

DO PRINT("ONE OR TWO PLAYERS? <1,2> :")
 UNTIL 1 LEQ (PLAYERS_CVD(INCHWL)) LEQ 2;

PORT!1_-1; PORT!2_0;
NOFREECR;
IF PLAYERS=2 THEN BEGIN 
   PRINT("WAITING FOR PLAYER 2 TO LOG IN !"&CRLF);
   J_AUXCLR(-1,PORT!1,'43); PORT!2_-1;
   PRINT("SEND ESCAPE, AFTER PROMPT SEND 'CONTINUE'"&CRLF);
   PRINT("THEN ENTER TERMINAL TYPE AS FOLLOWS -"&CRLF);
   DO PRINT("TERMINAL TYPE  ADM=0  HAZEL=1 HP=2 ?? <0,1,2> :")
    UNTIL 0 LEQ (TTYPE[2]_CVD(INCHWL&",-1")) LEQ 3;
   OUTPUT(PORT!1,"PLAYER 2 ONLINE !"&CRLF);
   NOFREECR;
   END;
END "TERMINIT";
COMMENT  ASSIGN PLAYERS TO ENTERPRISE OR KLINGONS  *** TAKESIDES
;
PROCEDURE TAKESIDES; BEGIN "TAKESIDES" STRING S;
OUTPUT(PORT!2,"WAITING FOR PLAYER 1 TO CHOOSE SIDES");
do OUTPUT(PORT!1,CRLF&"ENTERPRISE OR KLINGONS <K,E> :")
 until not("E" neq (S_INPUT(PORT!1)) neq "K");
IF EQU(S,"E") THEN BEGIN
  PORT!E_PORT!1;PORT!K_PORT!2;TYPE!E_TTYPE[1];TYPE!K_TTYPE[2];END
  ELSE BEGIN
   PORT!E_PORT!2;PORT!K_PORT!1;TYPE!E_TTYPE[2];TYPE!K_TTYPE[1];END;
END "TAKESIDES";
COMMENT        GAME INITIALIZATION  *** GAMEINIT ***
;
PROCEDURE GAMEINIT;
BEGIN "GAMEINIT"
INTEGER X,Y;
TAKESIDES;
OVER_FALSE;EVENTINIT;TCOM_KCOM_NULL;
IF PORT!E NEQ 0 THEN SETEVENT(0,1,0);
IF PORT!K NEQ 0 THEN SETEVENT(0,2,0);
ARRCLR(PSH);ARRCLR(PSV);ARRCLR(PVH);ARRCLR(PVV);
ARRCLR(KQH);ARRCLR(KQV);ARRCLR(KSH);ARRCLR(KSV);
ARRCLR(TVH); ARRCLR(TVV);
ARRCLR(TSH); ARRCLR(TSV); ARRCLR(EDMG); ARRCLR(QMAP);
ARRCLR(KEN); ARRCLR(KTOR);ARRCLR(KVELH);ARRCLR(KVELV);
K!ATTACKMIN_KENF/4;K!RETREATMIN_KENF/4;K!PHIT_.5;
ARRCLR(BQH); ARRCLR(BQV);
STARBUILD; BASEBUILD; KLINGBUILD;
TIME_0; EINIT; FINIT; SETEVENT(TIME+.1,14,0);
SETEVENT(RAN(0)*15,15,0); COMMENT INIT TRIBBLES HEE HEE ;
SETEVENT(0,17,0);
SETEVENT(RAN(0)*20,19,0);
SETEVENT(RAN(0)*20,20,0); SETEVENT(.1,21,0);
COMMENT  INIT ROMULAN POSITION, VELOCITY ;
RANDLOC; TDSH_RSH; TDSV_RSV;
TDVH_(.5-RAN(0))*.2;  TDVV_(.5-RAN(0))*.2;
COMMENT  PICK RADIO STAR QUAD ;
RSTARH_choose(5)+1; RSTARV_choose(5)+1; SETEVENT(.1,22,0);
COMMENT  PICK FRIENDLY SHIPS THIS GAME ;
I1_choose(20)+1; I2_choose(19)+1; if i2 geq I1 then i2_i2+1;
SETEVENT(RAN(0)*14+1,23,I1); SETEVENT(RAN(0)*14+1,23,I2);
COMMENT  IF NOT KLINGON PLAYER, ADD EXTRA HASSLES ;
IF PORT!K=0 THEN BEGIN SETEVENT(RAN(0)*30,15,0);
            SETEVENT(RAN(0)*10,18,0);
            SETEVENT(RAN(0)*10+3,18,0); END;
END "GAMEINIT";
COMMENT     GAME PROCEDURE         *** GAME ***
;
PROCEDURE GAME;
BEGIN "GAME"
GAMEINIT;
DO CYCLE UNTIL OVER;
RESULTS;
END "GAME";
boolean simple procedure yesno(string quest);
begin	integer reply; boolean oldtty;
oldtty_ttyup(true);
do print("
",quest) until "Y"=(reply_inchwl) or "N"=reply;
return(reply="Y");
end;
COMMENT  INTRODUCE PLAYER TO GAME IF NEED BE ;
PROCEDURE INTRO; BEGIN "INTRO" STRING S; CRT_TRUE;
PRINT("

--------    TREK '78    --------
	  VERSION 3.1

      BY MICHAEL D. STIMAC [modified:Scott Daniels]

PROGRAM SOURCE AND CRT DISPLAY COPYRIGHT 1979
    TYMNET, INC.   CUPERTINO CA.

");
if yesno("WANT INFO ? ")
 THEN PRINT("
	This version of space war is based on the basic concepts of 
many earlier startrek games. although one player can enjoy playing the 
enterprise, optionally two players may compete, the 2nd player having 
the role of the klingon flagship commander, who has indirect control 
over the several klingons ships in addition to his flagship.

	this game is specifically designed to be played on a 24x80 adm 
type crt (tymshare model 420,430, or 444) and **cannot** be enjoyed on 
hardcopy terminals.  you may however, wish to hard copy the following 
information.  coordinates are of the form horizontal(l to r),vertical
(top to bottom).  

	The galaxy is comprised of 5x5 quadrants, a quadrant is 
comprised of 40x23 sectors.  A command may be abbreviated to its first 
two characters.  Multiple commands may be entered, separated by one 
space.  The left cursor (control h) character may be used to edit 
commands prior to pressing return.  Under **NO** circumstances should 
the linefeed or other cursor keys be used - the game will be spoiled.
**WAIT** to be polled for command entry (C:) !!
	If you try to enter commands prematurely you may spoil the 
display.  As the game is a time simulation, usually you will have 
to wait for the resolution of a command entry.  Also, in a 2 player 
game, the inputs are interwoven such that the play will halt from time 
to time as your 
 opponent enters his commands. for example, after firing a 
 torpedo, it will not move fully until time passes, 
 either by an explicit wait or by entering other commands.

	Please use surrender to quit the game, the escape character 
will not be responded to gracefully.

	To initiate a 2 player
 game, after the first player gets 'waiting for player 2'
  the 2nd person should log into the same account and 
 attach to the job number indicated.

 SHIP'S SYSTEMS DESCRIPTIONS ----
ENERGY -- each ship has a reservoir of energy, used for 
 propulsion, weapons, and defense. as captain of a ship, 
 you control the distribution of energy. the enterprise 
 has reserve energy spread among 2-5 starbases. when the 
 enterprise is docked (engines off, adjacent to base), 
 it will be resupplied to capacity, items available. each 
 base has a finite supply of resources. the klingon 
 ships may refuel while near the fuelship. note in 2-
 player game the fuelship may be moved about as desired. 
 the gross energy for the klingon side is approx. equal 
 to the gross energy of enterprise plus bases.

WEAPONS -- each ship has both torpedoes and 
 phasers. one torpedo may be fired at a time, but you 
 need not wait to fire another one. a torpedo will continue 
 beyond the destination if it is not absorbed by a star, 
 starbase or shield. several torpedos may pass through 
 one sector (indicated by one '.'), thus a torpedo cannot 
 destroy another torpedo. usually, multiple torpedo hits 
 will be required to weaken shields and then damage/
 destroy a vessel. klingon ships carry 5 torpedoes 
 fired under computer control, they will lead a moving 
 target. klingons cannot reload torpedoes.

 phasers are best used when several targets are near at 
 once, they are distance sensitive. a phaser hit 
 weakens shields and eventually damages/destroys an 
 opponent. a 1200 hit is needed to destroy a fully loaded 
 klingon ship. note - the fuelship has no phasers, but it 
 has heavy duty shields. torpedos are best against the 
 fuelship. note - the enterprise will not be damaged in 
 battle as long as shields are 'up'.

PROPULSION -- each ship has two engines, 
 impulse and warp. the impulse engine is used to move to 
 a new sector in the same quadrant. the top speed of the 
 enterprise impulse engines is greater than the klingons 
 and is variable by the thrust command. a '<' next to the 
 thrust readout indicates impulse engines on. klingon 
 thrust is set by computer.

 the warp engine is used to travel in hyperspace to a new 
 quadrant. the fixed warp speed of klingons is less than 
 the top speed of the enterprise. the enterprise may vary 
 warp speed with the wf command. a '<' by the wf readout 
 indicates that the ship is in hyperspace. 
 higher speeds require less time and more energy.

COMMUNICATIONS AND SENSORS -- the enterprise can
 generate a summary map of the galaxy by succesive scan 
 and probe commands. the galaxy map is never automatically 
 updated, except on quadrant entry. in a 2-player game, 
 the hail command can be used for brief 2-way 
 communication between enterprise and klingon flagship. 
 the klingons ships report their battle activity to the 
 flagship, and their location is continuously shown 
 in the extreme right display on the flagship control 
 screen. their current status can be obtained by 
 the status command. also gross commands can be radioed 
 to the ships, such as go, to order the ship to a new quad;
  or am to set the minimum attack strength. the pf command 
 will set the % of energy to be fired in a phaser blast 
 for all ships, including the flag. the enterprise 
 may have spies on it, the klingon player can tell them 
 when to attack by the spy command.

HAZARDS -- the enterprise may encounter various
 hazards, for example the onboard control computer becomes 
 very flakey when the tribbles appear !
 the romulan dreadnought is a very slow-moving vessel 
 with impenetrable shields...stay away !

");
IF YESNO( "Do you want a list of klingon commands ? ")
 THEN PRINT("

KLINGON PLAYER REPERTOIRE
HELP                        List valid commands
WAIT    <REAL NUMBER>       Allow time to elapse
COURSE  <Q-HOR,Q-VER>       Warp to new quadrant
IMPULSE <S-HOR,S-VER>       Move to new sector
GO      <ID,Q-HOR,Q-VER>    Send ship to new quad
SPY     <REAL NUMBER>       Time spy damages enterprise
STATUS  <ID>                Show ship energy,torpedos
HAIL    <TEXT>              Send message to enterprise
TORPEDO                     Fire torpedo at enterprise
PHASER                      Phasers at enterprise
ROMULANS                    Locate romulan ship
PF      <INTEGER>           Adjust percent of total
                            energy for phaser fire
AM      <INTEGER>           Adjust attack threshold
                            ships with less energy will
                            retreat from enterprise
SURRENDER                   Give up !
<NULL>                      Default is wait .01


klingons ships are represented by letters A-X.
The flagship is 'X'.
The enterprise is shown by '%'.
Starbase is shown by '='.
Stars are shown by'*'.
'F' is the fuelship. if the fuelship is not near the enterprise, it 
will refuel nearby cruisers at the Rate of 100 units per .06 time. 
The fuelship will not shoot phasers at the enterprise.
The game maximum time is 40 stardates.
You may append ',*' to an impulse command so that
No new command will be requested til you get 'there'.

");
IF YESNO("Do you want a list of enterprise commands ? ")
 THEN PRINT("

    ENTERPRISE PLAYER REPERTOIRE
HELP                    List valid commands
WAIT    <REAL NUMBER>   Allow time to elapse
                        Before entering new command
BASES                   Display quadrant of starbases
COURSE  <Q-HOR,Q-VER>   Warp drive to new quad
IMPULSE <S-HOR,S-VER>   Move to new sector
PHASER  <INTEGER>       Radiate destructive energy
TORPEDO <S-HOR,S-VER>   Fire torpedo at target
SHIELD  <INTEGER>       Raise/lower shields
WF      <REAL>          Adjust warp engine power
THRUST  <INTEGER>       Adjust impulse engine speed
SCAN    <Q-HOR,Q-VER>   Map nearby quadrant
STATUS  <INTEGER>       Display base reserves
PROBE   <Q-HOR,Q-VER>   Launch mapping probe
HAIL    <TEXT>          Send message to klingon chief
SURRENDER               Give up !
<NULL>                  Default is wait .01

The enterprise is shown by an 'E'
Klingons are shown by a 'K'
Starbase are shown by a '='
The game is limited in time to 40 stardates.
You may append ',*' to the impulse command so that No new command will 
be requested til you get 'there'

");
 IF not CRT_ yesno("Are you at a CRT ? ")
  THEN PRINT("
Hope you will enjoy TREK '78 in the future.");
END "INTRO";
COMMENT  PROGRAM  INITIALIZATION     PROGINIT PROC
;
PROCEDURE PROGINIT;
BEGIN "PROGINIT" INTEGER I;
TICK_.01 ; TIMEMAX_40 ;
GAMEDONE_FALSE; TERMINIT;
I_CALLI(0,'23); I_RAN(I);
SETBREAK(2,".
",NULL,"IPS");
SETBREAK(1," ,;",NULL,"IPS");
COM1NAME[0]_"WA" ;COMMENT WAIT COMMAND;
COM1NAME[1]_"IM"; COMMENT INTRAQUAD MOVE;
COM1NAME[2]_"CO"; COMMENT TNTERQUAD MOVE;
COM1NAME[3]_"WF"; COMMENT WARP FACTOR (SPEED);
COM1NAME[4]_"PH";  COMMENT PHASERS;
COM1NAME[5]_"TO";  COMMENT TORPEDOES;
COM1NAME[6]_"PR";  COMMENT SEND A PROBE;
COM1NAME[7]_"SC";  COMMENT SCAN ADJACENT QUAD;
COM1NAME[8]_"TH"; COMMENT ADJUST IMPULSE THRUST;
COM1NAME[9]_"BA"; COMMENT DISPLAY BASES;
COM1NAME[10]_"SH";  COMMENT ADJUST SHIELDS;
COM1NAME[11]_"HA"; COMMENT HAIL KLINGON COMMAND. ;
COM1NAME[12]_"HE"; COMMENT  HELP INFO;
COM1NAME[13]_"ST";  COMMENT *BASE STATUS ;
COM1NAME[COM1MAX]_"SU";  COMMENT SURRENDER";

COM2NAME[0]_"WA"; COM2NAME[1]_"CO";
COM2NAME[2]_"IM";COM2NAME[3]_"GO";
COM2NAME[4]_"TO"; COM2NAME[5]_"PH";
COM2NAME[6]_"PF"; COM2NAME[7]_"AM";
COM2NAME[8]_"ST"; COM2NAME[9]_"HA";
COM2NAME[10]_"SP"; COM2NAME[11]_"HE";
COM2NAME[12]_"RO";
COM2NAME[COM2MAX]_"SU";

EDMGTXT[1]_"IMPULSE DR";EDMGTXT[2]_"WARP DRIVE";
EDMGTXT[3]_"PHASERS   ";EDMGTXT[4]_"TORPEDOES ";
EDMGTXT[5]_"SHIELDS   ";EDMGTXT[6]_"SCANNERS  ";

END "PROGINIT";
COMMENT   MAIN CONTROL CODE               *** TREK ***
;
INTRO; IF CRT THEN BEGIN PROGINIT;
DO GAME UNTIL GAMEDONE;
I1_-1; START!CODE; TTCALL 6,I1; END;
I1_I1 LAND '777575777777;
START!CODE; TTCALL 7,I1; END;
END;
END "TREK";
   O@8(