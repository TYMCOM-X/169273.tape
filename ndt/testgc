COMPIL(SGC,<STRNGC,STRGC,STCLER,SGINS,SGREM,%SPGC1,%ARSR1,.SONTP>
	   ,<.SGCIN,GOGTAB,X11,CORGET,CORREL,CORINC,X22,CORBIG,SPRPDA,INSET>
	   ,<STRING GARBAGE COLLECTOR ROUTINES>
	   ,<%SPGC,%STRMRK,%ARRSRT>)
printx "Remove when strings installed"
st$debug__1	;on for debugging new string space stuff
DSCR STRGC (REQUEST)
CAL SAIL
PAR REQUEST -- length of string which must fit after STRNGC
RES Calls STRNGC, using REQUEST as A-argument
    REMCHR not updated by REQUEST size after return


DSCR STRNGC
CAL PUSHJ
PAR A -- number of new characters needed
 REMCHR(USER) -- has been updated by that number of chars
 STREQD(USER) -- Additional characters required (see below).
 STINCR(USER) -- Size (in words) of string space increments (see below).
 Statistics:
   SGCTIME -- Time of last garbage collect, in ms.
	      User must activate timing, by setting this cell to -1.
   SGCTOTAL-- Total gc time, in ms., if timing active.
   SGCNUM -- Number of strings collected, last gc.
*  SGCWASTE -- Number of unused but unavailable wds detected, last gc.
RES REMCHR (updated by request) and TOPBYTE are correct, there is room
 to insert a string of the requested size, + STREQD additional chars.
SID none
DES STRNGC is two-pass. In the first, all string descriptors are found
  and sorted into ascending sequence with respect to the locations of 
  their respective texts.  Descriptors are found via the generating 
  routines, described in CALSG description below.
 In the second pass, all string texts are moved down to fill any unused
  space. All descriptors are adjusted to reflect the new locations.
 If there is still not room to satisfy the request+REQD, a new block
  (space), STINCR long, is allocated for strings, and TOPBYTE set to 
  point to it. Alternatively, if the compaction yielded some empty 
  spaces, they may be deleted, depending on the value of REQD, and the 
  request.  String space thus dynamically expands and contracts to 
  satisfy demand.


DSCR CALSG
PAR linked list of routine addresses based at SGROUT(USER)
RES each routine in list is called to provide string descriptors
 to the linking routine, STIDNT.
SID STIDNT uses B,C, and TEMP, accepts input in A. Generating
 routines may use A-T (11) and TEMP for their own devices.
 D through T will not be changed by calls on STIDNT.
DES 
Active strings are identified by the two-word descriptors which
 are scattered throughout memory, some in variables, some in arrays,
 some in stacks, some in LEAP storage, etc.  STRNGC must look at
 each descriptor during collection.  It does it by calling, in sequence,
 each of the routines on SGROUT, providing each with the address of a
 routine which will add the descriptor to those STRNGC knows about.  The
 user (clever) can add or remove routines on the SGROUT list (see SGINS,
 SGREM).
Each generating routine should do the following:
 1) Place a string descriptor address in A
 2) PUSHJ P,STIDNT or PUSHJ P,@-1(P) (addr provided on stack)
 3) Repeat the process if it knows about more strings, else
 4) Return with a POPJ (and a flourish)

The `standard' generating routines are:
 SPSG -- collects the string stack
 STRMRK -- collects string variables linked through SGLINK(USER)
 ARRMRK -- collects string arrays found in ARRPDL
 RINGSORT -- collects PNAMES from semantic blocks in compiler
 DEFSRT -- collects saved input strings during macro recursion in compiler.
These routines should provide sufficient examples.


NOLOW <
.insert makss.fai
>;NOLOW
;STRGC, Definitions

NOLOW <

BKSZ__=80	;number of buckets to partition a string space into

^.CORERR:
	CORERR	<NO CORE FOR ALLOCATION>



HERE (STRGC)
DSCR STRGC( INTEGER CNT )
DES 	This routine does a string garbage collect 
	and leaves at least CNT characters free after it.
SID 	nothing? everything? calls STRNGC


	EXCH	A,-1(P)		;THE DESIRED A IS HERE
	MOVE	USER,GOGTAB
	MOVEM	RF,RACS+RF(USER);SAVE F REGISTER WHERE GC CAN FIND.
	PUSHJ	P,STRNGC	;COLLECT TRASH
	MOVNS	A		;return reserved space
	ADDM	A,REMCHR(USER)
	MOVE	A,-1(P)		;GET ORIGINAL "A" BACK
	SUB	P,X22		;BACK UP STACK
	JRST	2,@2(P)		;RETURN

DSCR .SONTP(STRING S;INTEGER CNT)
DES 	This routine returns (on sp) a string EQU to S (may be S)
	which is aligned with TOPBYT & ensures that there are at least
	an additional CNT chars left in the current string space.
SID 	updates REMCHR.  Sets USER to GOGTAB, mangles TEMP
	may call STRNGC


HERE(.SONTP)
	BEGIN 	SONTP

	MOVE	USER,GOGTAB
	PUSH	P,A
	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	MOVE	A,-5(P)		;CNT of free space needed
	ADDM	A,REMCHR(USER)
CHKEND:	MOVE	D,-1(SP)	;LOAD LENGTH WORD
	TLZE	D,-1		;constant strings must be copied
	 JUMPN	D,CHKTOP	;non-constants may already be on top
				;(but null strings are cheap to copy)
				;and they must be dynamic and on TOPBYTE
NOTONT:				;ALWAYS GET ENOUGH TO COPY STRING
	ADDM	D,REMCHR(USER)	;add length in (count already added in)
	SKIPLE	REMCHR(USER)	;really need GC ??
	 jrst	doGC		;yup, go do it kiddo

CPYSTR:	SKIPE	SGLIGN(USER)	;NEED FW BNDRY??
	 PUSHJ	P,INSET		;YES
	HRROS	-1(SP)		;make sure string is marked "dynamic"
	MOVE	B,TOPBYT(USER)	;NEW STRING BP
	EXCH	B,(SP)
	JUMPE	D,XIT		;DONE ??
COPLUP:	 ILDB	C,B		;COPY CHARS
	 IDPB	C,TOPBYT(USER)
	 SOJG	D,COPLUP
XIT:	POP	P,D		;FINISH
	POP	P,C
	POP	P,B
	POP	P,A		
	SUB	P,X22
	JRST	@2(P)
	JRST	XIT		;DONE

CHKTOP:
;;Check if the string on SP is at the top of string space and if ran
;out of storage.  Expects: D=length(s), A=need size, REMCHR(USER) has A
;If on top and room, just returns.  Else, goes to NOTONT with D set
nokl10 <
	MOVE	B,(SP)
	XOR	B,TOPBYT(USER)
	SKIPG	REMCHR(USER)	;if not enough room, pretend to copy
	 TLNN	B,007700	;always copy if size field different
	  jrst	notont
	MOVE	B,(SP)
	MOVE	C,TOPBYT(USER)
	IBP	B		;make the byte pointers "canonical"
	IBP	C
	HRRZ	TEMP,C		;get difference in words
	SUBI	TEMP,0(B)	;of two byte pointers
	JUMPL	TEMP,NOTONT	;B (arg) cannot be after C
	CAILE	TEMP,(D)	;and word difference must not exceed
	 JRST	NOTONT		;the number of bytes in the string
;here there is a good chance that arg is on top, check carefully
	LSHC	B,-=30		;get the P fields
	ANDI	C,77
	SUB	B,C		;get difference in bits remaining
	LDB	D,[POINT 6,TOPBYT(USER),=11]	;get byte size
	IDIVI	B,(D)		;make it difference in bytes remaining
	MOVEI	C,=36		;(remainder was 0) 
	IDIVI	C,(D)		; calculate bytes/word 
	IMULI	C,(TEMP)	;get bytes in word difference
	ADD	C,B		;get difference of byteptrs in bytes
	HRRZ	D,-1(SP)	;recover string length
	CAMN	D,C		;if they are the same,
	 JRST	XIT		;then we are golden, no move needed
	 JRST	NOTONT		;otherwise, must copy after all
>;nokl10
kl10 <
	SKIPG	REMCHR(USER)	;if not enough room 
	 JRST	DOGC		;we must do a GC
	ADJBP	D,(SP)		;find end of string for top
	SETZ	B,		;and get canonical "TopByte"
	ADJBP	B,TOPBYT(USER)
	CAMN	B,D		;if end of string is "equal" to TOPBYTE
	 JRST	XIT		;then we are in good shape, just return
	HRRZ	D,-1(SP)	;otherwise we must copy.  recover length
	JRST	NOTONT		;and go do the copy
>;kl10

dogc:	ADD	A,D		;insure we get both length+count
	MOVEM	RF,RACS+RF(USER);strngc will bitch if not set
	PUSHJ	P,STRNGC	;GARBAGE IS COLLECTED
	MOVN	TEMP,D		;retry (enough space so no loop)
	ADDM	TEMP,REMCHR(USER) ;replace length removed above
	JRST	CHKEND		;and "start over"

BEND SONTP


;STRNGC -- Init, CALSGL, SGSWEP -- main loop through space sorting

HERE(STRNGC)
	MOVE	USER,GOGTAB
;;!BUG TRAP! remove after reverence for F is established
	CAME	RF,RACS+RF(USER)	;ALL RUNTIMES SHOULD BOTH
	 JRST  [ERR <DRYROT -- RF (R12) not saved in RACS at STRNGC>
		MOVEM RF,RACS+RF(USER);WILL RESTORE AFTER SORT ROUTINES
		JRST  .+1]
;!END BUG TRAP! -- LATER THE NECESSITY TO SAVE WILL BE PHASED OUT.
	SETCMB	TEMP,SGCCNT(USER)	;COUNT TIMES THROUGH GC
				;ones complement= -x-1 on 2-comp
	JUMPGE	TEMP,[ERR <DRYROT -- STRNGC recursion>
			JRST .]	;STRNGC in interrupt of STRNGC probably

	MOVEM	11,SGACS+11(USER)
	MOVEI	11,SGACS(USER)
	BLT	11,SGACS+10(USER)
;;FAIL really blows it on CALL6 in literal, rest was in-line
;;	hence SKIP-sense changed, and jumparound used
	SKIPN	SGCTIME(USER)	;User can time the GC
	 JRST	INTCHK
;;	SKIPE	SGCTIME(USER)	;User can time the GC
;;	 JRST	[;record time of day (in milliseconds)
		;? SHOULD THIS BE TIME OF DAY, NOT BILLABLE RUNTIME?
		NOTENX <
		 MOVEI	1,0	;TIME SG STARTS
		 CALL6	(1,MSTIME)
		>;NOTENX
		TENX <
		 JSYS	TIME	;"TIME" gives time in 1, divisor to get 
				; seconds in 2  (always 1000 so far)
		>;TENX
		 SETCAM	1,SGCTIME(USER)	;make sure will be non-zero
;;		 JRST	.+1]
INTCHK:
	SKIPE	.SGCINT		;;%BB% CMU-TYPE TRAP CALL
	 JRST  [PUSH	P,SGACS+A(USER)	;SIZE OF REQUEST
		PUSH	P,0		;CONVENTION IS 4 PARAMS
		PUSH	P,SGCCNT(USER)
		PUSH	P,0		;SO PUSH SOME [CENSORED] UP
		PUSHJ	P,@.SGCINT
		MOVE	USER,GOGTAB	;make sure USER is set up
		JRST	.+1]
	HRRZ	TEMP,TOPBYTE(USER)	;MAKE SURE DIDN'T OVERFLOW
	MOVE	B,STWCRA(USER)	;get current WCR, and from it get the
	MOVE	B,$STHAND(B)	;handle for current SPC (string space)
	CAIL	TEMP,-1(B)	;make sure TOPBYTE still inside SPC
	 CAILE	TEMP,@.STTOP(B)
	  ERR <TOPBYTE out of range at STRNGC -- will continue>,1

;Convert .TOPBYTE to .LIST so we can link in the new strings
	SKIPN	B,STLIST(USER)	;get list of string spaces
	 ERR <DRYROT STRNGC: no string space?>
Z.LUP:	SETZM	.LIST(B)	;must clear out all the .LIST fields 
	MOVE	B,.NEXT(B)	;so we can link in the new strings
	JUMPN	B,Z.LUP
	SETZM	SGCNUM(USER)	;Strings handled count (not incl. const)

; string GC phase 1: List the String Descriptors
;CALSG
	PUSH	P,SGROUT(USER)	;GET LINKED LIST OF ROUTINE NAMES
	PUSH	P,[STIDNT]	;PROVIDE ACCESS TO SORTING ROUTINE
	SKIPN	T,-1(P)		;(LIST always has at least one entry)
	 ERR <DRYROT -- Empty SGROUT is very strange>
CALSGL:
	HRRZM	T,-1(P)		;SAVE NEW POINTER
	PUSHJ	P,@-1(T)	;CALL GENERATOR ROUTINE
	MOVE	RF,RACS+RF(USER) ;GET GOOD F BACK, ASSUMING GOOD USER
	HRRZ	T,@-1(P)	;GO DOWN LIST UNTIL DONE
	JUMPN	T,CALSGL	;DO MORE THAN ONCE

	SUB	P,X22		;Remove temp, STIDNT address

; string GC phase 2: Sort all spaces
; Allocate a BKSZ-word bucket.  Then, for each space, look at each
; descriptor, partition it (by starting location within the space)
; into one of the buckets, then sort it into the list of strings
; so partitioned, in an order specified in the SRTSPC comments.
; Finally, for each space, create a single linked list of sorted
; descriptors.

SGSWEP:	MOVEI	C,BKSZ		;allocate sort buffering block
	PUSHJ	P,CORGET
	 ERR  <String garbage collector can't get core for sort>
	MOVEM	B,STBUCK(USER)

; Space Sorting Loop
	MOVE	B,STLIST(USER)	;Loop through all string spaces, 
;<** B => current space throughout
SPCLUP:	PUSHJ	P,SRTSPC	; sorting.  When through, .LIST
	SKIPE	B,.NEXT(B)	; in the header of each space
	 JRST	 SPCLUP		; will be the sorted dscrptr lst.

	MOVE	B,STBUCK(USER)	;Release the buckets 
	PUSHJ	P,CORREL
;STRNGC phase 3 -- SWPLUP -- main sweep (string moving) loop
; Move the strings, and update the descriptors.  Two routines,
; SOURCE and DEST, maintain information about old and new string
; locations, respectively, and other state info needed to move the
; strings.  Each is responsible for switching from space to space
; when necessary.
;Initialize source, destination space pointers.

;register use:
;	B	current source SPC
;	C	current destination SPC
;	USER	GOGTAB
;	RF	mangleable(?) ?- width control block for B/C (esp C)-?
;	LPSA	---
;	TEMP	---

	MOVE	B,STLIST(USER)	;first source is first SPC
	MOVE	RF,STWCRL(USER)	;should be on first WCR
SWPSIZ:	MOVE	TEMP,.BYSIZ(B)	;check it out folks
	CAMN	TEMP,$BYSIZ(RF)
	 CAME	B,$STLIST(RF)	;should be the First one of this size
	  ERR <DRYROT: WCR structure broken>
	SETZM	$WASTE(RF)	;clear lost byte totals for this size
	MOVE	C,B		;then copy B (or get SRELOC) and DSTSET
	PUSHJ	P,DSTSET
SWPLUP:	PUSHJ	P,SOURCE	;Transfer source "nests" for one size
				;B is first space of next size
				;C is last dest. space
	MOVEM	C,$STHAND(RF)	;indicate this SPC is the "active" one
	MOVE	TEMP,REMCHR(USER)	;and copy the other Width data
	MOVNM	TEMP,$REMCHR(RF)	;for later accounting
	MOVE	TEMP,TOPBYTE(USER)
	MOVEM	TEMP,$TOPBYTE(RF)	;save Width-specific stuff
	MOVEM	TEMP,.TOPBYTE(C)	;safety--everything else has it
	SKIPE	RF,$NEXT(RF)		;grab the next WCR
	 JUMPN	B,SWPSIZ		;keep going if another size
	CAME	B,RF			;just staying conservative
	 ERR <DRYROT -- SIZE and SPC ran out at different times>,7
	MOVE	RF,RACS+RF(USER)	;better restore good old RF
;;all done with all sizes.  Now remove empty spaces and collect Stats
;FF: Byte size in question (very temp (?))
;A: SPC to add next real SPC to
;B: .NEXT(A)
;C: WCR for size being considered
;D: Size needed for expansion
	SETZM	SGCWASTE(USER)
	MOVEI	A,STLIST-.NEXT(USER)	;what points to B
	MOVE	E,STWCRL(USER)		;this is the space being used
SIZLUP:	HLRZ	D,$STREQD(E)		;space required (chars)
	CAMN	E,STWCRA(USER)		;plus size of request if was
	 ADD	D,SGACS+A(USER)		; the WID which caused the fault
	MOVE	FF,$BYSIZ(E)		;pick up size of current WCR
IFN ST$DEBUG <
	MOVE	B,$STLIST(E)		;verify the Starts
	CAME	B,.NEXT(A)
	 ERR <DRYROT -- WCR starts funny>
>
	SETZM	$STLIST(E)	;re-establish start point
				;(may want to kill a few leading ones)
	MOVE	B,$STHAN(E)	;get the last DEST SPC
	CAMN	B,.TOPBYTE(B)	;if nothing stored
	 JRST	KILSUM		;  then "looking" for storage 
				;need because will look "free"
	CAMLE	D,$REMCHR(E)		;if not enough room for chars
	  JRST	[		;then we "look" for free space and
		 MOVE	TEMP,$REMCHR(E)	;mark remaining space DEAD
		 ADDM	TEMP,$WASTE(E)	;(just as if DSTDUN got it)
		 JRST	KILSUM]
	 SETO	D,			; otherwise, kill empty SPCs
KILSUM:	SKIPE	B,.NEXT(A)		;loop across this size SPC
	 CAME	FF,.BYSIZ(B)		;(stop when size change or EOL)
	  JRST	NXTSIZ
	CAMN	B,.TOPBYTE(B)		;was SPC used at all?
	 JRST	KILLIT			;Nope, go kill it
KEPSPC:	SKIPN	$STLIST(E)		;do we have first listed?
	 MOVEM	B,$STLIST(E)		;nope -- this is it
	MOVE	A,B			;yes, advance "good" pointer
	JRST	KILSUM
KILLIT:	CAMG	D,.CSIZE(B)
	 JUMPG	D,[;found needed SPC -- Glom onto It
		  MOVEM	B,$STHAN(E)	;store as active WCR
		  MOVEM	B,$TOPBYTE(E)	;store as first free char, too
		  MOVN	D,.CSIZE(B)	;get -free chars (mark D OK)
		  MOVNM	D,$REMCHR(E)	;store as WCR free store
		  JRST	KEPSPC]		;and act like it worked
	MOVE	TEMP,.NEXT(B)		;B is an unused SPC, kill it
	MOVEM	TEMP,.NEXT(A)
	MOVEI	B,-.HDRSIZ(B)
	PUSHJ	P,CORREL
	JRST	KILSUM
NXTSIZ:	JUMPG	D,EXPSTR	;didn't find enough room, allocate it
	MOVE	FF,$BYPWD(E)	;calculate statistics (wasted words)
	MOVE	C,$WASTE(E)	;which is wasted bytes/bytes-per-word
	IDIV	C,FF		;Note: this is only approximate
	ADDM	C,SGCWASTE(USER)	;value, ignoring remainder OK
	ASH	FF,1		;remove some "SLOP" (1 word for INSET,
	SUBB	FF,$REMCHR(E)	; and another for safety), fix sign
	JUMPL	FF,.+2
	 ERR <STRNGC surprised, short on String space>
IFN ST$DEBUG <
	SKIPE	C,$TOPBYTE(E)	;better have a TOPBYTE for width
	 SKIPN	$STLIST(E)	;and better have at least one SPC used
	  ERR <STRNGC: WCR mangled at NXTSIZ>
	SKIPE	D,$STHAND(E)	;better have a current SPC this WIDTH
	 CAME	C,.TOPBYTE(D)	;and its TOPBYTE should agree with SPC
	  ERR <STRNGC: improperly logged SPC>
>
	SKIPE	E,$NEXT(E)		;lets not run off the end
	 JUMPN	B,SIZLUP		;(already error checked this)

	JRST	SGCXIT
EXPSTR:	;; WCR (E) wants a (D)-char space added to it (tack after A).
	;; A,B,E (B=.NEXT(A)) preserved, FF,C,D,TEMP vulnerable
;Get room for request + desired free space (see ALLOC) from a new SPC
; block (already tried to use old ones)

EXPSTR:
	HLRZ	C,$STINCR(E)		;STINCR (see p. 2) char count.
	CAMLE	D,C			;Is there going to be room?
	 JRST	[;;allow larger SPCs than STINCR
		MOVEM	D,$REMCHR(E)	;note: we will over-write this	
		MOVE	C,D
		IDIV	C,$BYPWD(E)	;calculate words needed
		MOVE	D,$REMCHR(E)
		ADDI	C,2+.HDRSIZ	;block will be string store+hdr
		jrst	.+2]
	HRRZ	C,$STINCR(E)		;STINCR  word count, + .HDRSIZ
	PUSHJ	P,CORGET
	 JRST	 [PUSHJ P,CORBIG	;If for some reason we can't get
		  HRREI	B,-.HDRSIZ-2(C)	; STINCR words, make sure that
		  IMUL	B,$BYPWD(E)	; a new block can at least satisfy
		  CAMGE B,$REMCHR(E)	; the request + STREQD.
		   ERR <String GC: no core to expand string space>
		  PUSHJ P,CORGET	;Will do, get it
		   ERR <DRYROT -- unexpected STRNGC core problem>
		  JRST .+1]
	MOVEI	B,.HDRSIZ(B)		;Adjust pointer to leave header,
	SUBI	C,.HDRSIZ		; set up header area parameters,
	MOVEM	C,.STTOP(B)		; [Base + wordSize]
	IMUL	C,$BYPWD(E)
	MOVEM	C,.CSIZE(B)		;size in characters
	MOVEM	C,$REMCHR(B)
	MOVE	C,$BYSIZ(E)
	MOVE	C,.BYSIZ(B)		;byte size
	LSH	C,6			;make an appropriate BP left
	HRLI	B,440000(C)		;for the start of the SPC
	MOVEM	B,.TOPBYTE(B)		;list as current Top of SPC
					;;shares:  SETZM .LIST(B)
	MOVEM	B,$TOPBYTE(E)		;and as current Top of WIDTH
	MOVEM	B,$STHAND(E)		;and as active SPC in WIDTH
	ADDM	B,.STTOP(B)		;Set the End Pointer
	MOVE	D,$BYPWD(E)
	MOVEM	D,.BYPWD(B)		;set bytes per word
	IMUL	D,.BYSIZ(B)		;find remaining bits in word 
	MOVNI	D,-=36(C)		;and set up D negative at exit
	DPB	D,[POINT 6,.STTOP,5]	;and make STTOP a "last" pointer
	SKIPN	$STLIST(E)
	 MOVEM	B,$STLIST(E)		;save first of WIDTH if needed
	MOVE	C,.NEXT(A)		;splice B in after A
	MOVEM	B,.NEXT(A)
	MOVEM	C,.NEXT(B)
	MOVE	A,B			;and advance one to pass B
	MOVE	B,C
	JRST	NXTSIZ
;Finish Up, collect statistics
SGCXIT:
	MOVE	C,STWCRA(USER)	;get the WIDTH that started it all
	MOVE	A,$TOPBYTE(C)	;and transfer back the pointer
	MOVEM	A,TOPBYTE(USER)
	MOVE	A,$REMCHR(C)	;and byte count
	ADD	A,SGACS+A(USER)	;less the size he said to leave out
	MOVEM	A,REMCHR(USER)
	JUMPL	A,.+2
	 ERR <STRNGC bemused beyond belief -- room from before gone.>
	SKIPE	SGLIGN(USER)	;Alignment also implies clearing
	 PUSHJ	 P,RESCLR	;Free space

	MOVMS	SGCCNT(USER)	;Now indicate done with GC
	SKIPN	SGCTIME(USER)	;Timing active?
	 JRST	 NOTIME		;No
;!HOOK! Insert, conditionally, other system timing calls
NOTENX <
	CALL6	(1,MSTIME)	;Collect GC times
>;NOTENX
TENX <
	JSYS	TIME
>;TENX
	ADDB	1,SE(USER)
	ADDM	1,SGCTOTAL(USER)
NOTIME:
;;%BB% CMU-STYLE TRAP -- I DON'T SUPPLY ALL THE SAME INFO AS LDE DID AT CMU
	SKIPN	.SGCINT
	 JRST	 QUITGC
	MOVN	TEMP,REMCHR(USER);SIZE OF GRANT, LESS ORIGINAL REQUEST
	PUSH	P,TEMP
	PUSH	P,SGACS+A(USER)	;ORIGINAL REQUEST
	PUSH	P,SGCCNT(USER)	;AS FAR AS I CAN TELL, JUST USING UP CELLS
	PUSH	P,SGCNUM(USER)	; IN THE CALL STACK
	PUSHJ	P,@.SGCINT
	MOVE	USER,GOGTAB	;PARANOID
QUITGC:
	HRLZI	11,SGACS(USER)	;Restore and return
	BLT	11,11
	POPJ	P,

;STRNGC Service routines -- STIDNT
;StIdnt
;<A is => descriptor
;1. Ignore constants and null strings
;2. Check legality (make sure same string not supplied twice)
;	issues: Recover gracefully from bad strings
;		Report complete info about bad strings
;		Try to supply name of descriptor source for
;		   bad strings (stack, vbl, array, other)
;3. In // with above, find proper string space for each str.
;4. Convert the Byte Pointer for the string into a character count
;   that is space relative (0 is the first character in a string space)
;5. Link in string # field (lh word 1) -- separate list for each space

STIDNT:	move	temp,(A)	;check length and constants
	tlzn	temp,-1		;don't collect constant strings
	 jrst	sgrst		;constant string
	jumpe	temp,sgzap	;zap null dynamic strings to constants
; Loop on string spaces, find the one containing this string
;;#UA# (1 OF 2) CHECK BP FOR 010700,,BUF-1 

SGRTY:	HRRZ	temp,1(A)	;TEMP: address part of string pointer
	MOVEI	b,STLIST-.NEXT(USER)	;B will have string space ptr
SGLUP1:	SKIPN	b,.NEXT(b)
	 JRST	 NORANGE	;Range exhausted, bad string
				;Does string lie within this space?
	CAIL	TEMP,-1(B)	;-1 because point 7,b-1,1 is inside!
	 CAILE	TEMP,@.STTOP(B)	; (check against against base and top)
	  JRST	 SGLUP1		; space determines if string in range
;A: address of first word of two-word string descriptor
;B: handle of string space containing string
;TEMP: address part of string pointer
INRANGE:			;string is in bucket pointed to by B
IFN st$debug <;for the paranoid, before we throw away the byte pointer
	ldb	c,[point 6,1(a),=11]	;check size field
	came	c,.bysiz(b)
	 JRST	 [MOVE A,A	;ERR type 7 gets AC # from here
		  ERR <STIDNT-- string wrong width for space, descriptor addr = >,7
		  jrst	.+1]	;procede, it may "work" (?) (or SGZAP)
	caig	temp,-1(b)	;make sure ptr starts in space
	 jrst	[		;address is before beginning, check more
		  ldb	c,[point 6,1(a),5] ;if position field is less
		  camge	c,.bysiz(b)	;than byte size, ILDB bumps addr
		   jumpa a,.+1	;hence OK (A for err #7 below)
		  err <STIDNT-- string points to space header, descriptor addr = >,7 
		  jrst	.+1]	;procede, it may "work" (?) (or SGZAP)
>;IFN st$debug

	exch	d,1(a)		;get full byte pointer, save an ac
	TLNN	d,777700	;Make sure still some byte ptr. bits
				;Max possible start count is 43,,-44
	 JRST	 [EXCH d,1(a)	;restore byte pointer, ac
		  MOVE A,A	;ERR type 7 gets AC # from here
		  ERR <STIDNT-- string encountered twice, descriptor addr = >,7
		  JRST SGRST]	;Don't handle again.

;calculate space-relative character count
	ldb	c,[point 6,d,5]	;pick up the POSITION field (bits left)
	idiv	c,.bySiz(b)	;convert to bytes left
	move	d,1(a)		;restore ac trashed by divide
	subi	temp,-1(b)	;get word within space (beginning=1)
	IMUL	temp,.bypwd(b)	;make it a byte count to end-of-word
	sub	temp,c		;back it up by number of trailing bytes
	movem	temp,1(a)	;replace the byte pointer field
;link newly re-directed string into the list
	MOVE	C,.LIST(B)	;Insert descriptor, linked by
	HRLM	C,(A)		; string number field, into
	HRRZM	A,.LIST(B)	; list for this space
	JRST	SGRST
NORANGE:
	MOVE	A,A		;String not in range, complain, NULL it,
	ERR	<String GC: Descriptor byte ptr. out of bounds, Addr. is >,7
SGZAP:	SETZM	(A)		; and go on.
SGRST:	ADDI	A,2		;Auto-increment descriptor index
	POPJ	P,

;STRNGC Service routines -- SPGC,STRMRK, etc. -- Descriptor providing routines
; 	     ------ SORT THE SP STACK ------

HERE(%SPGC)	HRRZ	A,SPDL(USER)	;START AT BASE OF STACK
^%SPGC1:ADDI	A,1
	JRST	SGTST		;AND WORK UP TO CURRENT POINTER
STRNGSTACKMARKLOOP:
	PUSHJ	P,STIDNT	;SORT IT INTO LIST
SGTST:
	CAIGE	A,(SP)		;DONE?
	 JRST	 STRNGSTACKMARKLOOP ;NO
GPOPJ:	POPJ	P,		;YES, GO ON TO NEXT TYPE

;      ------ SAIL COMPILER SPECIAL SORTERS ARE IN COMSER ------

; 	         ------ SORT THE VARIABLES ------

HERE (%STRMRK)
	SKIPN	T,STRLNK(USER)	;GET LINK
	 POPJ	 P,		; NO STRINGS AT ALL
STMKL1:	HRRZ	A,-1(T);<	;=>1ST STRING
	HLRZ	Q2,-1(T)	;# STRINGS THIS PROC
	JRST	SOJLP		;GO LOOP
STMKLP:	PUSHJ	P,STIDNT	;SORT VARIABLES INTO LIST
SOJLP:	SOJGE	Q2,STMKLP	;SORT UNTIL DONE WITH THIS PROC (STIDNT INCRS A)

STRMK4:	HRRZ	T,(T)		;NEXT PROCEDURE
	JUMPN	T,STMKL1	; IF THERE IS ONE
	POPJ	P,		;DONE


COMMENT \
		------  SORT STRING ARRAYS ------


	THIS ROUTINE TRIPS DOWN THE DYNAMIC LINKS, LOOKING INTO
	PROCEDURE DESCRIPTORS FOR STRING ARRAYS WHICH MIGHT HAVE BEEN 
	ALLOCATED. THEN IT LOOKS FOR ANY ARRAYS OWNED BY LEAP.  THE 
	FIRST WORD OF EACH ARRAY BLOCK IS THE NUMBER OF DIMENSIONS IF 
	THE ARRAY IS A STRING ARRAY. THE WORD JUST PREVIOUS TO IT IS 
	THE (NEGATIVE) SIZE OF THE ARRAY.
\

INTERNAL %ARRSRT
HERE (%ARRSRT)
;	HRRZ	RF,RACS+RF(USER);REAL RF WITH LH= 0  (ASSUME SET UP 12-3-73)
^%ARSR1:
PROCDO:	HLRZ	Q1,1(RF)	;FETCH PDA
	CAIN	Q1,SPRPDA	;IS IT SPROUTER??
	POPJ	P,		;YES
	MOVE	Q1,PD.LLW(Q1)	;WE HAVE TO DO SOMETHING -- PT AT LVI
CHK:	SKIPN	T,(Q1)		;GET ENTRY
	JRST	GODOWN		;0 MEANS OF PROC DESCR
;;#HI#.! 5-15-72 DCS WAS TESTING 200000 (TYPE 4?) BIT, WRONG BIT!
	TLC	T,100000	;TYPE 2? (STRING ARRAY)
	TLNE	T,740000	;
	AOJA	Q1,CHK		;NO
	SKIPN	A,@T		;THERE??
	AOJA	Q1,CHK		;NO
;;#  # 5-3-72 DCS
	SUBI	A,1;<		;A=>2D WORD, FIRST ENTRY -- DCS 5-3-72
;;#  #
	SKIPL	Q2,-1(A)	;BETTER BE THERE
	ERR	<DRYROT at Arrsrt>
	PUSHJ	P,ARPUTX	;GO SORT IT
	AOJA	Q1,CHK

GODOWN:	HRRZ	RF,(RF)		;NOTE THAT RESTR WILL PUT RF BACK
	CAIE	RF,-1		;
	JRST	PROCDO 		;-1 WILL SAY END


LARR:	SKIPN	E,ARYLS(USER)	;LEAPING LISTS
	POPJ	P,		;NONE
LAR1:	
	HLRZ	Q2,(E)		;GET ADDRESS
;;#  # 5-3-72 DCS SET UP A
	MOVEI	A,-1(Q2);<	;A=>1ST WORD, FIRST ENTRY
;;#  #
	SKIPL	Q2,-2(Q2)		;BE SURE
	ERR	<DRYROT -- LEAPing error at ARRSRT>
	PUSHJ	P,ARPUTX	;GO SORT IT

LAR2:	HRRZ	E,(E)		;MERRILY WE LINK ALONG
	JUMPN	E,LAR1		;
	POPJ	P,		;HOME AT LAST

ARPUTX:	
	HRRZS	Q2		;YES, GET TOTAL SIZE
	LSH	Q2,-1		;NUMBER OF STRINGS
	JRST	ARSLP
ARS3:	PUSHJ	 P,STIDNT	; BUT COLLECT NON-CONSTANTS 
ARSLP:	SOJGE	Q2,ARS3		;A INCREMENTED IN STIDNT, LOOP UNTIL DONE
	POPJ	P,		;ALL DONE WITH THIS ARRAY.


;STRNGC Service routines -- SRTSPC -- space sorter
;Space Sorter

;<** B => A string space, descriptor list is .list(b)
SRTSPC:	MOVE	A,STBUCK(USER)	;Clear bucket list
	SETZM	(A)
	ADDI	A,1
	HRLI	A,-1(A)
	MOVEI	C,BKSZ-2(A)
	BLT	A,(C)
	SKIPN	A,.LIST(B)
	 JRST	 SORTED
;<** A => word 1 of NEW descriptor
DSCLUP:	AOS	SGCNUM(USER)	;Count strings handled.
	HLRZ	FF,(A)		;FF gets address of next string in list
	MOVE	C,1(A)		;C gets byte number of start byte
	MOVE	E,C		;For later (below)
	IMULI	C,bksz-1	;Compute bucket entry 
	IDIV	C,.CSIZE(B)	
	ADD	C,STBUCK(USER)	; (partition space among buckets)
	MOVE	Q1,C
	HRRZ	T,(A)
SGSLUP:	MOVE	D,C
	HLRZ	C,(C)
;<** Q1 => bucket entry, for end-pointer maintenance (just below)
;<** D  => PREV descriptor, which has been seen
;<** C  => NEXT descriptor, to be examined
;** E  is starting count of NEW rel. to this space
;** T  is length(NEW)
;Sort NEW into this bucket list such that its starting count is geq
; all which precede it, leq all which follow it.  Where starting
; counts are equal, sort by descending length.  This creates nests
; of strings to  be handled by the sweep phase.
	JUMPE	C,[HRRM A,(Q1)	;** NEW will be end string,
		   JRST INSERT]	;    keep track of it for linkage
	CAMGE	E,1(C)
	 JRST	 INSERT		;NEW begins before NEXT, insert
	CAME	E,1(C)
	 JRST	 SGSLUP		;NEW begins after NEXT, keep looking
	HRRZ	TEMP,(C)	;same beginning, check length
	CAMG	T,TEMP		;Insert by descending length
	 JRST	 SGSLUP
;	(JRST	INSERT)
;<** A => NEW, 1st word
;<** C => NEXT, 1st word, or is 0
;<** D => PREV, 1st word, or bucket
;** E is start count from descriptor
;Standard one-way linked list insertion
INSERT:	HRLM	A,(D)
	HRLM	C,(A)		;Link is in lh of word 2 of descriptor
;Sort next descriptor from this space
	MOVE	A,FF
	JUMPN	A,DSCLUP

;Now use list pointers in buckets
;  (each is <first,,last>)
; to create one sorted list -- store in .LIST(this space)
SORTED:	MOVE	C,STBUCK(USER)	;Starting at the end of the bucket
	HRLI	C,D		; array, look only at non-zero
	MOVEI	D,BKSZ-1	; entries.  Each iteration, retain
	MOVEI	A,0		; the newest <first> pointer, having
LNKLUP:	SKIPN	E,@C		; placed the previous <first> pointer
	 JRST	 AOCHK		; into the list identified by the
	HRLM	A,(E)		; newest <last> pointer.  The first
	HLRZ	A,E		; <first> pointer is 0
AOCHK:	SOJGE	D,LNKLUP
	MOVEM	A,.LIST(B)
	POPJ	P,

;STRNGC Service routines -- SOURCE and DEST (pseudo-co-routines)
;SOURCE:
;B: Points to a source space
;C: Points to a dest space (B or earlier) of the same byte size
;.LIST(B): RH Points to first descriptor of next nest to move (0=done)
;
; 1. Get start of nest off .LIST(B).  If necessary, run down .NEXT(B) 
;    for a nest, Return if none or not same size as dest space
; 2. Create BP to start of nest, save.  Save first space-relative count.
; 3. Move down list, identify end of nest -- convert all descriptor
;    counts to nest-relative counts
; 4. Update .LIST
; 5. "CALL" DEST which will return to step 1
;    A -- BP to source string (nest)
;    B -- Points to the source space (DEST will leave alone)
;    C -- kept up by DEST (Dont MANGLE!!!)
;    D -- total # chars in nest
;    E -- Pointer to first in nest -- last link in nest zeroed

NXTSRC:	SKIPN	B,.NEXT(B)
	 POPJ	P,		;return (all done)
	MOVE	TEMP,.BYSIZ(B)
	CAME	TEMP,.BYSIZ(C)
	 POPJ	P,		;return (one size done)

SOURCE:	HRRZ	E,.LIST(B)
	JUMPE	E,NXTSRC
	MOVE	Q1,1(E)
KL10 <
	ADJBP	Q1,B
>;KL10
NOKL10 <
	IDIV	Q1,.BYPWD(B)		;calculate word offset
	ADD	Q1,B			;get base word pointer
	IMUL	Q2,.BYSIZ(B)		;convert bytes passed to bits
	MOVNI	Q2,-44(Q2)		;and to bits remaining in word
	DPB	Q2,[POINT 6,Q1,5]	;store in POSITION field
>;NOKL10
	PUSH	P,Q1		;save byte pointer for when needed
	HRLS	E
	MOVN	A,1(E)
	HRRZ	D,(E)
	SUB	D,A
	SETZM	1(E)		;First in nest is character 0
;** A is -(nest start char)
;** D is Nest end char +1	(space-relative)
;<<** E is => first elt of nest,, => current elt.
;** First nest descriptor already count-relative adjusted
;Loop until a descriptor is not in the nest
SRCLUP:	HLRZ	Q1,(E)		;Next element (string)
	JUMPE	Q1,NONEST	;If last element in Space, or end-loc 
	CAMG	D,1(Q1)		; in D does not reach the next 
	 JRST	 NONEST		; descriptor's location, nest is done 
				;(Adjoining, non-overlapping nests are
				; moved separately -better packing)
	HRRZ	TEMP,(Q1)	;calculate end character number
	ADD	TEMP,1(Q1)	; -- length + start
	CAMGE	D,TEMP		;Adjust nest-end location, if new string
	 MOVE	 D,TEMP		; extends beyond old nest
	ADDM	A,1(Q1)		;Adjust location count to nest-relative.
	HRR	E,Q1		;Keep RH(E) as last good string in nest
	JRST	SRCLUP

NONEST:	HRRM	Q1,.LIST(B)	;Update list 
	HRRZS	(E)		;Clear last elt in nest
	HLRZS	E		;Return ptr. to 1st, as advertised
	ADD	D,A		;compute length of nest
	POP	P,A		;retrieve BP
;;	JRST	DEST		;go shove into destination


DEST:
BEGIN b.dest
;** B inviolate [source space]
;** C Points to dest space (may update, but may not leave B)
;** TOPBYTE(USER) is free in current dest space
;** REMCHR(USER) is -(number remaining) in current dest space
;** E Points to first in nest -- last elt. is zeroed
;** D is nest size in chars
;** A is nest source byte pointer

; 1. Adjust to FW bdry if SGLIGN (actually, coerce D to word-size count)
; 2. Find room, this dest space or next -- error if out of spaces.
; 3. Adjust REMCHR
; 4. Move nest, adjust TOPBYTE
; 5. Recreate BP for each descriptor

DEST1:	ADDM	D,REMCHR(USER)	;Standard room test -note that if we are
	SKIPLE	REMCHR(USER)	;aligning, near-fit will fit for sure
	 JRST	NOROOM
ISROOM:	SKIPE	SGLIGN(USER)	;if aligning, must PAD this
	 JRST	ALNIT
MVGO:	MOVE	FF,TOPBYTE(USER)
	CAMN	A,FF		;Avoid moving the nest to its previous
	 JRST	 MVDON		; location (expensive NO-OP).
				;  D will be non-zero, so TOPBYTE fixed
MVLP:	ILDB	TEMP,A		;You guessed it, move from A to FF
	IDPB	TEMP,FF
	SOJG	D,MVLP
	EXCH	FF,TOPBYTE(USER);Why bother re-calculating? D will be 0
				;FF set to beginning of string
	JRST	MVDON		;which means "TOPBYTE now setup"

ALNIT:	PUSH	P,D+1		; but it should already be there really.
	IDIV	D,.BYPWD(C)	; which hold nest.
	JUMPE	D+1,ISLOK	;figure out words to move
	SUB	D+1,.BYPWD(C)	;get count of padding bytes
	MOVN	D+1,D+1
	ADDB	D+1,REMCHR(USER) ;Also remove padding from storage
	JUMPG	D+1,[ERR <DRYROT -- STRNGC:DEST alignment failure>]
				;Impossible condition
	ADDI	D,1		;One more word to transfer
ISLOK:	IMUL	D,.BYPWD(C)	;re-convert nest size to bytes
	POP	P,D+1
	JRST	MVGO

MVDON:
KL10 <
			;FF is base of string nest
ADJLUP:	MOVE	A,1(E)		;get bytes past topbyte
	ADJBP	A,FF		;and calculate byte pointer
	MOVEM	A,1(E)		;store new byte pointer
	HLL	E,(E)		;set up next pointer
	HRROS	(E)		;mark string dynamic
	HLRZ	E,E		;chase out the linkage
	JUMPN	E,ADJLUP	;and loop until done

	JUMPE	D,SOURCE	;if D=0, we moved, and TOPBYTE is Fine
	ADJBP	D,FF		;update topbyte by nest length
	MOVEM	D,TOPBYTE(USER)
	JRST	SOURCE
>;KL10
NOKL10 <
			;FF=BP of first char.  D=0 means TOPBYTE OK
	SETZ	TEMP,		;TEMP = nest offset of current
EZYLUP:
	HLL	E,(E)		;set up next pointer
	HRROS	(E)		;Mark string dynamic
	CAME	TEMP,1(E)	;capture the easy ones (same start)
	 JRST	HARDE
EZYRUN:	MOVEM	FF,1(E)		;plunk down correct pointer
	HLRZ	E,E		;chase out the links
	JUMPN	E,EZYLUP

finix:	;;We have fixed up the nest, now fix TOPBYTE
	JUMPE	D,SOURCE	;TOPBYTE OK (MVLUP did, or second time)
	MOVEI	E,TOPBYTE-1(USER)	;fake up a last nest element 
	SUB	TEMP,D		;Calculate how much to move FF
	TDZA	D,D		;clear D and let code finish it
.IBPMX__5
HARDE:	SUB	TEMP,1(E)	;get -(amount of advance)
	CAML	TEMP,[-.IBPMX]	;find out if we can just IBP
	 JRST	IBPGO(TEMP)		;well, go ahead
	LDB	Q1,[POINT 6,FF,5] ;grunk -- get Pos field
	IDIV	Q1,.BYSIZ(C)	;Calculate Bytes left in word
	ADD	Q1,TEMP		;make that bytes really left
	JUMPGE Q1,[;oh my, still in same word
		  IMUL  Q1,.BYSIZ(C)	;figure out bits left in word
		  ADD	Q2,Q1		;(=bytes * size) + remainder
		  SOJA	FF,Q2SET	;and go set POS field 
		]			; (FF-1 to suppress increment)
	IDIV	Q1,.BYPWD(C)	;1-words to advance, -Bytes left in word
	SUB	FF,Q1		;update word part (almost)
	IMUL	Q2,.BYSIZ(C)	;get -bits from left edge
	ADDI	Q2,44		;and make a P-field
Q2SET:	DPB	Q2,[POINT 6,FF,5]	;store POS field
	MOVE	TEMP,1(E)	;set TEMP to reflect new FF value
	AOJA	FF,EZYRUN	;and correct for the DIV result

repeat .ibpmx, <
	IBP	FF
 >
IBPGO:	MOVE	TEMP,1(E)
	JRST	EZYRUN
>;NOKL10

NOROOM:	PUSHJ	P,DSTDUN	;Count waste in space being left
NONEXT:	CAMN	C,B		;are we leaving current source?
	 ERR <DRYROT STRNGC: got ahead of myself>
	MOVE	TEMP,.BYSIZ(C)	;get byte size being left
	SKIPE	C,.NEXT(C)	;Since we are moving strings "down",
	 CAMN	TEMP,.BYSIZ(C)	;make sure new Byte size is the same
	  ERR <DRYROT -- No more room for strings -- very strange>
				; running out of already existent
				; space is a fatal error.
	CAMLE	D,.CSIZE(C)	;is there room in the next space?
	 JRST	[MOVEM	C,.TOPBYTE(C)	;indicate Space not accounted
		 JRST	NONEXT]		;and keep on trucking
	PUSHJ	P,DSTSET
	JRST	DEST1		;Try again with new C,REMCHR,TOPBYTE
BEND b.dest
;DSTSET:
;Par: C handle for destination space
;Result: TOPBYTE(USER) is destination byte pointer to beginning of space
;	 REMCHR(USER) is -(size of space in characters)
DSTSET:
	MOVEM	C,TOPBYTE(USER)		;SPC handles are byte pointers
	MOVN	TEMP,.CSIZE(C)
	MOVEM	TEMP,REMCHR(USER)
;!HOOK! This is probably the best place to decide, perhaps to minimize
; checkerboarding or memory use, that the DEST just prepared should be
; moved to a new location.  This move will not happen until the space
; has been filled, and all descriptors for it adjusted.  Decide where
; to move the block, then put the difference between its future location
; and its current one into OFFSET(USER).  The DEST routine will use this
; to adjust all descriptor byte pointers.
	POPJ	P,

;When leaving a DEST for a new one, keep track of the unused bytes
; within that space.
DSTDUN:
	MOVE	TEMP,TOPBYTE(USER)	;save top Byte used
	MOVEM	TEMP,.TOPBYTE(C)	;Note that this is also .LIST
	CAMN	C,TOPBYTE(USER)		;did we use anything here?
	 POPJ	P,			;Nope, better ignore it
	MOVN	TEMP,REMCHR(USER)	;Unused characters this space
	ADD	TEMP,D			;dont forget about attempt
	ADDM	TEMP,$WASTE(RF)
	POPJ	P,
;STRNGC Service routines -- SGINS and SGREM
;Sgins, Sgrem

DSCR SGINS
CAL PUSHJ
PAR PUSH P,[routine name]
 PUSH P,[addr of 2-word block]
RES block is used to place routine in the list of descriptor generators
 for CALSG.
SID stack adjusted


HERE(SGINS)
	PUSH	P,-2(P)		;ADDR OF ROUTINE
	PUSHJ	P,SGREM		;NEVER LET IT BE IN TWICE
	MOVE	USER,GOGTAB
	POP	P,UUO1(USER)
	POP	P,LPSA;<	;=>LINK BLOCK FOR NEW ROUTINE
	POP	P,-1(LPSA)	;PUT ROUTINE ADDRESS AWAY
	HRL	LPSA,SGROUT(USER);GET OLD LINK POINTER
	HLRM	LPSA,(LPSA)	;PUT IN NEW LINK POSITION
	HRRM	LPSA,SGROUT(USER);PUT NEW POINTER IN LINK HEAD
	JRST	@3(P)		;RETURN

DSCR SGREM
CAL PUSHJ
PAR PUSH P,[routine addr]
RES routine is removed from list of descriptor generators, if it was on it


HERE(SGREM)
	MOVE	USER,GOGTAB
	POP	P,UUO1(USER)
	POP	P,TEMP		;ADDR TO BE REMOVED
	MOVEI	LPSA,SGROUT(USER);HEAD OF LIST
SGRL:	MOVE	USER,LPSA	;PREV_THIS
	SKIPN	LPSA,(USER)	;THIS_(PREV)
	 JRST	 @2(P)		;DIDN'T FIND IT
	CAME	TEMP,-1(LPSA)	;IS THIS THE ROUTINE?
	 JRST	 SGRL		;NO, GET NEXT
	HRRZ	TEMP,(LPSA)	;YES, REMOVE IT FROM LIST
	HRRM	TEMP,(USER)
	JRST	@2(P)

;STRNGC Service routines -- STCLER and RESCLR
DSCR STCLER
CAL PUSHJ
RES Clears all string variables on STRLNK(USER) to null strings
DES compiler only


HERE(STCLER)			;
	SKIPE	SGLIGN(USER)		;CLEAR REST?
	PUSHJ	P,RESCLR	;CLEAR REST OF STRING SPACE
	SKIPN	T,STRLNK(USER)	;PARALLELS STRNGC'S LOOP
	POPJ	P,		;CLOSELY
	PUSH	P,B		;JUST IN CASE
	HRLZI	B,-1		;FOR TESTING STRING NO.
STC1:	HRRZ	A,-1(T)
	HLRZ	Q2,-1(T)
STCLLP:	SOJL	Q2,STCLD1
	TDNE	B,(A)		;DON'T COLLECT STRING CONSTANTS
	SETZM	(A)
	ADDI	A,2
	JRST	STCLLP
STCLD1:	HRRZ	T,(T)
	JUMPN	T,STC1
	POP	P,B
	POPJ	P,

DSCR RESCLR
CAL PUSHJ 
DES Used after STRNGC. Clears remaining string space to 0 (compiler only)

RESCLR:
printx "RESCLR: needs work!!"
	SKIPG	A,TOPBYTE(USER)	;CAN ZERO FIRST WORD IF point(w,add,-1)
	 tlnn	a,040000		; which is xwd 44xxxx,0
	  ADDI	A,1		;ELSE START AT NEXT
	SETZM	(A)
	HRLS	A
	ADDI	A,1		;BLT WORD
	MOVE	B,STWCRA(USER)	;get current WCR, and from it
	MOVE	B,$STHAND(B)	;get handle of current string space
	BLT	A,@.STTOP(B)	;clear to END OF STRING SPACE
	POPJ	P,

INTERNAL BRKMSK
^BRKMSK:	0
	FOR @& JJ_=17,0,-1 <
	<1  (JJ+=18)> + (1  JJ)>
>;NOLOW
ENDCOM (SGC)

,z