begin "plotCurves"
require "(SAILIB)SAIL.DEF" source!file;
!get!module(math);

let numeric=real; define setExp="setxp", intExp="intxp";
IFCR false
 THENC define numeric="long real", setExp="dsetxp", intExp="dintxp";
ENDC
record!class point(numeric x,y; r!p(point) link);
integer dbc;
require "bezier.cod" source!file;
require "b.d" source!file;
simple integer procedure pointName( integer number );
	return( number + (if number < 10 then 0+"0" else "A"-10) );

integer procedure count( r!p(point) pointList );
begin	integer i;
for i_0 step 1 while pointList do pointList_ point:link[pointList];
return(i);
end;
r!p(point) base, cur;
procedure newPoint( real x, y );
begin	r!p(point) new;
new_ new!record(point);
point:x[new]_ x;
point:y[new]_ y;
if base
 then point:link[cur]_ new
 else base_ new;
cur_ new; 
end;
integer terminal;	define $hp=0, $rg=1;
  integer rgMode;   define rg.adm=0, rg.4010=1, rg.point=2, rg.vector=3;

simple procedure beginPlot;
if terminal=$rg and rgmode=rg.vector
 then rgmode_ rg.point;	! force start;

simple procedure endPlot;
if terminal=$rg and (rgmode=rg.vector or rgmode=rg.point)
 then begin outchr(#cr); rgmode_ rg.4010; end;

integer hPos, vPos, plotChar;

simple procedure rg!setPos( integer x, y; boolean fullAddress );
begin	define #hi='174, #lo='37;
y_ 0 max y min 779;	! 249;
x_ 0 max x min 1023;	! 511;
y swap vPos; y_ y xor vPos; 
x swap hPos; x_ x xor hPos; 
if fullAddress or y land #hi	then outchr( '40 lor (vPos lsh -5) );
fullAddress_ fullAddress or x land #hi;
if fullAddress or y land #lo	then outchr('140 lor (vPos land '37) );
if x land #hi			then outchr( '40 lor (hPos lsh -5) );
				     outchr('100 lor (hPos land '37) );
end;

procedure plotIt( reference real x, y );
begin
if dbc geq 0 then cprint(dbc,crlf,"== (", x, ", ", y, ")");
case terminal of begin
 [$hp] print( #esc & "&a",(hPos_ 0 max x min 80), "c", 
			 (vPos_ 0 max y min 48), "R" &plotChar );
 [$rg] begin
	if rgMode neq rg.vector then outchr(#gs); 
	rg!setPos( x, y, rgMode neq rg.vector );
	rgMode_ rg.vector; 
       end
 end;
end;

procedure plotPoint( real x, y; integer name );
case terminal of begin
[$hp] begin plotChar_ name; plotIt(x,y); end;
[$rg] begin	integer dx, dy;
	outchr(#fs);
	rg!setPos( x, y, true );
	outchr(#us);
	rgMode_ rg.4010; 
	outchr(name);
      end
end;
! terminal:	$hp=0, $rg=1;
! rgMode:	rg.adm=0, rg.4010=1, rg.point=2, rg.vector=3;

procedure homeLine( string prompt );	! home up, prompt, input room;
case terminal 
of begin
 [$hp] print( #esc & "H" & #esc & "K", prompt );
 [$rg] begin
	if rgMode = rg.point or rgMode = rg.vector then outchr(#us);
	if rgMode neq rg.adm then outchr(#can);
	rgMode_ rg.adm;
	outchr(#rs);
	print( prompt,	forc #=1 untilc 15 doc "#sp &" endc null
			forc #=1 untilc 15 doc "& #bs" endc );
       end
end;

simple procedure clearScreen;
case terminal
of begin
 [$hp] outstr( #esc & "H" & #esc & "J" );
 [$rg] begin
	if rgMode = rg.adm then outchr(#gs);
	rgMode_ rg.4010;
	outstr( #esc & #ff );
       end
end;

simple string procedure readCursor(reference integer name); 
					! returned as a string with x,y;
case terminal
of begin
 [$hp] begin	string address;
	name_ inchrw;
	print( #bs & #esc & "a" & #esc & "H" );
	address_ inchwl;
	if !skip! =#esc then address_ address & inchwl;
	return(address);
      end;
 [$rg] begin	string reply;
	if rgMode neq rg.4010
	 then begin
		if rgMode = rg.adm then outchr(#gs);
		outchr( #us );
		rgMode_ rg.4010;
	      end;
	outstr( #esc & #sub );	! enter cursor mode;
	name_ inchrw;		! get the character (wait for point);
	outstr(#us & #can & #rs); rgMode_ rg.adm;	! top screen;
	reply_ inchwl;		! read the cursor position here;
	return( cvs( ('41 xor lop(reply)) lsh 5 xor lop(reply) ) & ","
	     & cvs( ('41 xor lop(reply)) lsh 5 xor lop(reply) ) );
       end
end;
boolean wantSpline, clip;
string procedure readLine(string prompt);
while true
   do begin	string reply;
		boolean flag;
	homeLine( prompt );
	while kequ(reply_inchwl,"numbers")
	   do begin
		homeLine( "Numbers file: " );
		if dbc > -1 then close(dbc)
		 else open(dbc_getchan,"DSK",'10000, 0,4, 0,0,0);
		enter( dbc, inchwl, flag );
		if flag then begin release(dbc); dbc_ -1; end;
		homeLine( (if dbc<0 then "Recording OFF"
				else "Recording ON. ") & prompt );
	      end;
	if kequ(reply,"error")		then usererr(0,1,"OK")
	else if kequ(reply,"bail")	then usererr(0,1,"OK","B")
	else if kequ(reply,"clip")	then clip_ true
	else if kequ(reply,"noclip")	then clip_ false
	else if kequ(reply,"spline")	then wantSpline_ true
	else if kequ(reply,"bezier")	then wantSpline_ false
	else if kequ(reply,"erase")	then clearScreen
	else if kequ(reply,"help") or reply="?"
	 then print("Error, Help, Bail, Spline, Bezier, Erase, Clip, "
			& "Noclip, or Numbers (for logging)")
	 else return(reply);
      end;
string pendingLine;

integer procedure readOne( string prompt );
while true
   do begin		integer i, break;
	if length(pendingLine)=0
	 then pendingLine_ readLine(prompt);
	if length(pendingLine)=0 then return(0);
	i_ intscan( pendingLine, break );
	if break geq 0 then return(i);
      end;
boolean procedure readPoint( reference real x, y; integer name );
while true
   do begin "readPoint"
		integer i, break, break!y;
	if length(pendingLine)=0
	 then pendingLine_ readLine("Polygon Point " & name & ": ");
	if length(pendingLine)
	 then i_ name
	 else if !skip! neq #esc then return(false)
		else if length( pendingLine_ readCursor(i_name) )
			and i > name then pendingLine_ null;
	if kequ(pendingLine, "clear")
		 then begin base_ cur_ null!record; return(false); end;
	x_ realscan( pendingLine, break );
	if break<0 then begin pendingline_ null; continue; end;
	y_ realscan( pendingLine, break );
	if break = ":"
	 then begin lop(PendingLine); break_ i_ lop(PendingLine); end;
	if break geq 0
	 then if i = name then return(true)
		 else if "0" < i < name
		 then begin	r!p(point) r;
			r_ base;
			if i leq "9" or "A" leq i leq "Z"
			 then for i_ i-(if i>"9" then "A"-9 else "1"-0)
				 step -1 until 0
			   do if r
				 then if i then r_ point:link[r]
				   else begin 
					point:x[r]_ x; point:y[r]_ y;
					continue "readPoint";
					end
				 else done;
		      end;
	print( "CLEAR or a point PAIR please (or ESC,letter)" );
      end "readPoint";
r!p(Spline) theSpline;
r!p(Bezier) theBez;
r!p(point) chase; 

! numeric array slopes[0:1,-1:0];
! slopes[0,*] are X-slopes, slopes[1,*] are Y-slopes;
! slopes[*,-1] are initial-slopes, slopes[*,0] are final-slopes;
! arrclr(slopes);

external integer rpgsw;
terminal_ if rpgsw then $rg else $hp; rgMode_ rg.adm;
clip_ wantSpline_ false; dbc_ -1; base_ cur_ null!record; clearScreen; 
while true
   do begin	real x,y; integer i,name;
	  do  begin
		pendingLine_ null; chase_ base;
		for i_ 1 step 1 while chase
		   do begin
			plotPoint( point:x[chase], point:y[chase], 
					pointName( i ) );
			chase_ point:link[chase]
		      end;
		while readPoint( x, y, name_ pointName(i) )
		   do begin 
			newPoint(x,y); 
			plotPoint(x,y,name); 
			i_ count(base)+1; 
		      end
	      end
	 until base and base neq cur;

	theBez_ makeBezier( i_ count(base), base );
	theSpline_ makeSpline( (if clip then -i else i), base );
	plotChar_ "$";

	if dbc > -1
	 then begin	integer i; r!p(point) chase;
		cprint(dbc, crlf & crlf & "Table (degree ", 
			count(base)-1, "=", bezier:size[theBez], "):" );
		chase_ new!record(point); point:link[chase]_ base;
		for i_ 0 step 1 while chase_ point:link[chase]
		   do cprint(dbc, crlf & "  ", i, ": (", 
			point:x[chase], ",", point:y[chase], ") // [", 
			bezier:x[theBez][i], ",", bezier:y[theBez][i], 
			"]" );
		cprint(dbc, crlf );
	      end;
	while 0 neq i_ readOne("PlotCount: ")
	   do begin
		beginPlot;
		if wantSpline
		 then useSpline( i, theSpline, plotit )
		 else useBezier( i, theBez, plotit );
		endPlot;
	      end;
      end;
end "plotCurves" .
   