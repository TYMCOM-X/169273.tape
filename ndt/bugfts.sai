
begin "conditional compilation checks"

require "[][]" delimiters;

define 
 $getBit(table,bit)=[ assignc table=cvps(table)&cvs((bit)div 36);
	((table rot ((1+(bit))mod 36)) land 1)]
,$onBit(table,bit)=[
    assignc table=cvps(table)&cvs((bit)div 36),bit=1 rot-((1+(bit))div 36)
	redefine table=table lor bit;]
,$offBit(table,bit)=[
    assignc table=cvps(table)&cvs((bit)div 36),bit=1 rot-((1+(bit))div 36)
	redefine table=table land lnot bit;]
,$invBit(table,bit)=[
    assignc table=cvps(table)&cvs((bit)div 36),bit=1 rot-((1+(bit))div 36)
	redefine table=table xor bit;]
,$clearTable(table,size,initialValue)=
	[ifcr 0=length(cvps(initialValue))
		thenc assignc initialValue=0;endc
	redefine ##=0;
	forc ##_(size) stepc -1 untilc 0 
		doc"
			redefine table"&"##=initialValue;"endc];

define $offBitTable(table,size)=[$clearTable(table,1+(size)div 36,0)];
define $setBitTable(table,size)=[$clearTable(table,1+(size)div 36,-1)];
define chk1=0,chk0=0,
 asc(table,bit)=[
	require "
asc(" & cvps(table) & "," & cvps(bit) & ")" message;
    assignc table=cvps(table)&cvs((bit)div 36);
	require "=*sc(" & cvps(table) & "," & cvps(bit) & ")" message;
    assignc bit=1 rot (-1-((bit)mod 36));
	require "=**c('" & cvos(table) & ",'" & cvos(bit) & ")" message;
    redefine table=table lor bit;
	require "=***('"& cvos(table) & ")" message;
]
;
asc(chk,33);
asc(chk,34);
asc(chk,35);
asc(chk,36);


simple procedure ascCheck;
begin	preset!with chk0,chk1; own safe integer array t[0:1];
if t[0]=7 and t[1]=1 rot -1 then print("
asc(a,b): ok" )
 else print( "
asc(a,b) want: 7,1 lsh 1, but got: '", cvos(t[0]), ",'", cvos(t[1]) );
end;
require ascCheck initialization;


$offBittable(bits,'177);
$invbit(bits,35);
$onbit(bits,5);

require " Forlc " message;
forlc bno_(1,3,5)		doc "$onbit(bits,bno)" endc
require " Forc " message;
forc bno_'177 stepc -2 untilc 1	doc "require cvps(bno)&"":"" message;
					$onbit(bits,bno)" endc
redefine mac=9;
require " Whilec " message;
whilec [mac geq 0]	doc "$onbit(bits,mac) redefine mac=mac-2;" endc

require " Casec (5) " message;
casec -1 ofc [$onbit(bits,0)], [$onbit(bits,2)], [$onbit(bits,4)] endc
casec  0 ofc [$onbit(bits,9)], [$onbit(bits,2)], [$onbit(bits,4)] endc
casec  1 ofc [$onbit(bits,0)], [$onbit(bits,7)], [$onbit(bits,4)] endc
casec  2 ofc [$onbit(bits,0)], [$onbit(bits,2)], [$onbit(bits,5)] endc
casec  3 ofc [$onbit(bits,0)], [$onbit(bits,2)], [$onbit(bits,4)] endc

require " Whilec (false) " message;
whilec [false]			doc "$onbit(bits,@@@)" endc
require " Forc (never) " message;
forc bno_'177 stepc 2 untilc 1	doc "$onbit(@@@@,bno)" endc

require " Forlc (null) " message;
forlc qqq_() doc "$onbit(bits,0,qqq)" endc;

require " Forc (final) " message;
forc bno_0 stepc 1 untilc 128 doc
	[ifcr bno land 1 neq $getbit(bits,bno) thenc
		print("
table bit ", bno, " is ", $getbit(bits,bno), ", not ", bno land 1 );
		require " [?bno?]" message; 
	endc] 
endc

begin
 preset!with 
	bits0, '252525252525,
	bits1, '252525252525,
	bits2, '252525252525,
	bits3, '252525000000,
	bits4, 0; 
own safe integer array t[0:4,0:1];
integer i;
for i:= 0 step 1 until 4
   do begin
	print("
bt[",i,"]: ");
	if t[i,0]=t[i,1]
	 then print(" ok")
	 else print(" is '", cvos(t[i,0]), 
			", but wanted '", cvos(t[i,1]) );

      end;
end
end "conditional compilation checks";
end .

