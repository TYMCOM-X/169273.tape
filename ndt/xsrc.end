SIMPLE STRING PROCEDURE
displaytable( SAFE INTEGER ARRAY eqvtab; BOOLEAN litbol, showsingles );
BEGIN "displaytable"            INTEGER i; STRING result;
result _ NULL;
FOR i _ 0 STEP 1 UNTIL 127
   DO BEGIN "show equivalences"         INTEGER ch; STRING equ$set;
        equ$set _ ch _ i;
        WHILE (ch _ special$equiv[ ch ]) NEQ i
           DO IF ch < i
                THEN CONTINUE "show equivalences"
                ELSE equ$set _ equ$set & ch;
        IF showsingles OR LENGTH( equ$set ) > 1
         THEN result _ result & " " & litstr( equ$set, litbol ) & ";";
      END "show equivalences";
RETURN( result );
END "displaytable";
SIMPLE PROCEDURE abortint;    abortsearch _ TRUE;
        ! abort interrupt procedure (immediate);


PROCEDURE performsearch( INTEGER outfile; STRING filelist;
                         INTEGER eqnum; BOOLEAN make$pl
IFC boolstuff THENC                                 ; STRING boolexpr
ENDC                                                                 );
DESR performs a search on all files in "filelist",
        using a previously produced search table (FSM)
                outfile:  channel for search results (or -1 for TTY:)
                filelist: list of file names to search
                eqnum:    number of equivalence table used
                                (note: this is only used for output!)
                make$pl:  if true should make ".pl" files
;
BEGIN "performsearch"
STRING currentname;     ! file-index name currently being searched;
record!class msfile  ( record!pointer (msfile) link; STRING name );
record!pointer (msfile) miss!head, miss!tail;
                        ! file names: fake head no recognized lines;
INTEGER i;
INTEGER tot!searched, aborted;
define bprint( outdata ) = <begin cprint( outfile, outdata );
                                  if nottty then print( outdata ) end>;

tot!searched_ aborted_ 0;
miss!tail _ miss!head _ new!record (msfile); ! set top of missed files;
msfile:name [miss!head] _ "(None)";          ! fake file name for list;
if outfile > -1 then NOTtty _ NOT EQU( "TTY:", JFNS( outfile, 0 ) )
                else begin nottty _ false; outfile _ -1 end;

ARRCLR( hitcount );     ! counts of various word matches;
IFC boolstuff THENC
  ARRCLR( matchcount );
  qualifier _ boolexpr;
ENDC

print( crlf, "Type ^Q to abort any particular file search." );
PSIMAP( 1, abortint, 0, 3 ); ENABLE( 1 ); ATI( 1, ctrl("Q") );
        ! set up a ^Q to cause immediate interrupt to "abortint";

output$jfn _ outfile; ! kludge to allow "showline" to acess output file;

WHILE (currentname _ nextname( filelist ))
DO BEGIN "perindex"             ! this occurs once per name in filelist;
        INTEGER indexjfn;
ifc cardstuff thenc
! card libraries supposed to be accessed in thawed mode (if possible);
    if  0 > (indexjfn _ OPENFILE( currentname, "ROHE*")) ! try thawed, ;
    and 0 > (indexjfn _ OPENFILE( currentname, "ROE*" )) ! then normal;
elsec
    if  0 > (indexjfn _ OPENFILE( currentname, "ROE*" )) ! try normal, ;
    and 0 > (indexjfn _ OPENFILE( currentname, "ROHE*")) ! then thawed;
endc
         then BEGIN "filetrouble"
                bprint(<crlf, "Couldn't access ", currentname >);
                CONTINUE "perindex";
              END "filetrouble";
    SETINPUT( indexjfn, 200, 0, eof );

    DO BEGIN "do$demon" ! this occurs once per file to be searched;
         search$name _ JFNS( indexjfn, (IF nottty THEN exact!name
                                                  ELSE short!name ) );
         print( crlf, "Searching ", JFNS( indexjfn, exact!name ) );
         ind$jfn _ indexjfn;
         tot!searched_ tot!searched + 1;
         foundany _ abortsearch _ FALSE;
                ! turn off abort indicator and words on file indicator;
         demon( make$pl );                      ! perform search;
            ! side effects: globals page & line are set,
                eof is used to determine when done,
                abortsearch is checked after every line;
         IF abortsearch
          THEN BEGIN
                 aborted_ aborted + 1;
                 bprint(<crlf, crlf, tab, search$name,
                        " aborted at ", page, ".", line>);
               END;
         CLOSF( indexjfn );
         IF foundany
          THEN cprinT( outfile, form )          ! page mark;
          else begin
                msfile:link [miss!tail] _ new!record (msfile);
                miss!tail _ msfile:link [miss!tail];
                msfile:name [miss!tail] _ search$name;
               end;
         WHILE TRUE
           DO BEGIN "anindex"           EXTERNAL INTEGER !SKIP!;
                IF NOT GNJFN( indexjfn )
                 THEN DONE "do$demon";  ! NO files left on index jfn;
ifc cardstuff thenc
! card libraries supposed to be accessed in thawed mode (if possible);
                OPENF( indexjfn, '440000202000);        ! 36-bit,"rh";
                IF !SKIP!               ! opening error, try other mode;
                  then OPENF( indexjfn, '440000200000); ! 36-bit,"r";
elsec
                OPENF( indexjfn, '440000200000);        ! 36-bit,"r";
                IF !SKIP!               ! opening error, try other mode;
                  then OPENF( indexjfn, '440000202000); ! 36-bit,"rH";
endc
                IF !SKIP!
                 THEN BEGIN "openproblem"
                        bprint(<crlf, "Can't OPEN: ",
                                JFNS( indexjfn, nice!name ) & " ">);
                        erstr( -1, '400000 ); ! show error to user;
                      END "openproblem"
                 ELSE DONE "anindex";
              END "anindex";
       END "do$demon"
     UNTIL FALSE; ! almost an INDEXFILE( indexjfn ), but verifies safety;

    CFILE( indexjfn );          ! this is probably unnecessary;
   END "perindex";

bprint(<crlf & crlf & tab & IFC cardstuff THENC "Pages"
                                ELSEC "Lines" ENDC &" recognized = ",
                hitcount[0], crlf & "   String    Matches"
                IFC boolstuff THENC  & "  Unrecognized Matches" ENDC>);

FOR i _ 1 STEP 1 UNTIL maxwords DO
        IF LENGTH( targets[i] )
         THEN bprint(< crlf, i, ") ", litstr( targets[i], TRUE ),
                        tab, hitcount[i]
                       IFC boolstuff THENC
                         , tab, hitcount[i]-matchcount[i] ENDC>)
        ELSE DONE;

bprinT(<CASE eqnum OF
              ( (crlf & "Exact match search performed."),
                (crlf & "Letter case ignored (""Ab"" = ""aB"")."),
                (crlf & "The active equivalences were:" & crlf &
                 displaytable( special$equiv, TRUE, FALSE) & ";" ) )>);

IFC boolstuff THENC
IF LENGTH( boolexpr )
 THEN bprinT(<crlf, crlf, "The boolean expression was: ",
                        shortexp( boolexpr, maxwords )>);
ENDC

bprinT(<crlf, crlf, "Files with no matches: ">);
begin   integer fcount;
fcount _ 0;
while miss!head _ msfile:link [ miss!head ]
   do begin
        fcount _ fcount + 1;
        if nottty
         then cprint(outfile, (if (fcount mod 3)= 0 then crlf else tab),
                                msfile:name [miss!head] );
        if fcount < 3 and msfile:link[miss!head]
         then print( msfile:name [miss!head], ", " )
      end;

print( (if fcount<3 then "" else "... "), msfile:name [miss!tail], ".");

bprint(<crlf, tot!searched, " file",
        (if tot!searched=1 then "" else "s"), " searched">);
if fcount  then bprint(<", ", fcount, " without matches">);
if aborted then bprint(<", ", aborted, " stopped during search">);
bprint( "." );
end;

cprinT( outfile, crlf & ff ); ! page mark;

END "performsearch";
SIMPLE INTEGER PROCEDURE getfile( STRING defaultname; BOOLEAN mustreply);
BEGIN "getfile"         INTEGER output$jfn;

simple integer procedure afile( reference string fname );
      begin             integer channel;
        if equ( "TTY:", fname ) then RETURN( -1 );

        if  0 > (channel _ OPENFILE( fname, "WOAE" ))
        and 0 > (channel _ OPENFILE( fname, "WAE"  ))
         THEN begin defaultname _ "TTY:"; return( -2 ) end
         else RETURN( channel )
      end;

IF LENGTH( defaultname ) = 0 THEN defaultname _ "TTY:";
IF NOT mustreply and -2 < output$jfn _ afile( defaultname )
                         THEN RETURN( output$jfn );

WHILE TRUE do
  case comand(  crlf & "Output goes to: * " & defaultname & " //",
                esc & crlf & "^~|",
                "
Type:   RET or LF       to accept this default,
        ESC             to accept this and all subsequent defaults,
        ""^""           to go back to the first question,
        ""~""           to inhibit extra info lines in output file,
        ""|""           Cancel previous inhibit.
        TENEX file name to choose another output file
(results of search will be appended to the file if it exists already)")
of
 begin "getcase"
  begin ! unk; IF -1 < (output$jfn _ OPENFILE( NULL, "WACE" ))
                        THEN RETURN( output$jfn );              end;
  begin ! esc;  escoff _ false;         ! actually extraneous set;
                IF -2 < output$jfn _ afile( defaultname )
                         then RETURN( output$jfn )              end;
  begin !  cr;  IF -2 < output$jfn _ afile( defaultname )
                         then RETURN( output$jfn )              end;
  begin !  lf;  IF -2 < output$jfn _ afile( defaultname )
                         then RETURN( output$jfn )              end;
  begin ! "^"; jumptop _ true; return( -2 )                     end;
  begin ! "~"; justlines _ true; print(" Extra info inhibited.");
               return( getfile( defaultname, mustreply) );      end;
  begin ! "|"; justlines _ false; print(" Extra info enabled.");
               return( getfile( defaultname, mustreply) );      end
 end "getcase"
END "getfile";
SIMPLE INTEGER PROCEDURE pseudoLOP( INTEGER source; REFERENCE STRING s);
BEGIN "pseudoLOP"
IF LENGTH( s ) < 2
 THEN BEGIN "getmoresource"     EXTERNAL INTEGER !SKIP!; INTEGER temp;
        temp _ ";";
        DO s _ s & SINI(source, 100, temp)   ! This will include if$tty;
                UNTIL (LENGTH(s) > 1) OR (!SKIP! NEQ temp);
      END "getmoresource";
RETURN( LOP(s) );
END "pseudoLOP";
SIMPLE INTEGER PROCEDURE getnumber( INTEGER chan; REFERENCE STRING s );
BEGIN "getnumber"                       INTEGER RESULT;
RESULT _ 0;
WHILE "0" LEQ s LEQ "9"
        DO RESULT _ RESULT * 10 + ( pseudoLOP(chan, s) - "0" );
IF s = "." THEN pseudoLOP(chan, s);
RETURN( result );
END "getnumber";
SIMPLE STRING PROCEDURE dequote( INTEGER chan; REFERENCE STRING s );
BEGIN "dequote"                         STRING result; INTEGER k;
result _ NULL;
WHILE TRUE
   DO BEGIN "toquote"
        WHILE (k _ pseudoLOP(chan, s)) NEQ '42 AND K NEQ 0
                DO result _ result & k;
        IF k = 0
         THEN BEGIN
                USERERR( 0, 1, "toquote got a null!" );
                RETURN( NULL );
              END
        eif s NEQ '42 THEN RETURN( result );
        result _ result & pseudoLOP(chan, s);
      END "toquote";
END "dequote";
SIMPLE STRING PROCEDURE getstring( INTEGER chan; REFERENCE STRING s;
                                        BOOLEAN keepnulls );
BEGIN "getstring"       STRING two!cap, result; INTEGER k;
result _ NULL;
WHILE TRUE
   DO BEGIN "longloop"
        WHILE s=" " OR s=tab OR s=lf OR s=cr OR s=eol OR s=ff
                DO pseudoLOP(chan, s);                  ! gobbleblanks;
        IF  "0" LEQ s LEQ "9"
         THEN IF ( 0 < (k _ getnumber(chan, s)) < '200 ) OR
                 (keepnulls AND k = 0)
               THEN result _ result & k
               ELSE BEGIN
                      print( crlf & "decimal character ", cvs(k) );
                      RETURN( NULL );
                    END
        eif (k _ pseudoLOP(chan, s)) = "'"
         THEN IF ( 0 < (k _ CVO(CVS( getnumber(chan, s) ))) < '200 ) OR
                 (keepnulls AND k = 0)
                 THEN result _ result & k
                 ELSE BEGIN
                        print( crlf & "octal character '", CVOS(k) );
                        RETURN( NULL );
                      END
        eif k = "^"
         THEN IF ((k _ pseudoLOP(chan, s)) LAND '37) OR keepnulls
                 THEN BEGIN
                        result _ result & (k LAND '37);
                        IF k LAND '140 NEQ '100
                         THEN print( (tab & "interpreting ^"), k & null,
                                " ('", CVOS(k), ")  as ^",
                                ((k LAND '37) + '100) & null );
                      END
                 ELSE print( (tab & "^"), k & null, " ('", CVOS(k),
                                ") is null ('0), it will be ignored.")
        eif k = ";" THEN RETURN( result )
        eif k = "&" THEN print( "..unexpected ""&"" (CONTINUING)" )
        eif k = '42 THEN result _ result & dequote(chan, s)
                                        ! read a quoted string;
        eif equ( (two!cap _ (k land '137) & (s land '137)), "CR" )
                 THEN BEGIN "cr"
                        result _ result & cr;
                        pseudoLOP(chan, s);     ! gobble the r of "cr";
                      END "cr"
        eif equ( two!cap, "LF" )
                 THEN BEGIN "lf"
                        result _ result & lf;
                        pseudoLOP(chan, s);     ! gobble the f of "lf";
                      END "lf"
        eif equ( two!cap, "FF" )
                 THEN BEGIN "ff"
                        result _ result & ff;
                        pseudoLOP(chan, s);     ! gobble the f of "ff";
                      END "ff"
        eif equ( two!cap, "HT" )
                 THEN BEGIN "ht"
                        result _ result & tab;
                        pseudoLOP(chan, s);     ! gobble the t of "ht";
                      END "ht"
        eif equ( two!cap, "TA" )
                 THEN BEGIN "tab"
                        pseudoLOP(chan, s);     ! gobble the t of "tab";
                        k _ pseudoLOP(chan, s); ! gobble the b;
                        IF (k = "b" OR k = "B")
                         THEN result _ result & tab
                         ELSE BEGIN
                                print( crlf & "ta", (0+s) & "?" );
                                RETURN( NULL );
                              END;
                      END "tab"
        eif equ( two!cap, "EO" )
                 THEN BEGIN "eol"
                        pseudoLOP(chan, s);     ! gobble the o of "eol";
                        k _ pseudoLOP(chan, s); ! gobble the l;
                        IF (k = "l" OR k = "L")
                         THEN result _ result & '37  ! an end-of-line;
                         ELSE BEGIN
                                print( crlf & "eo", (0+s) & "?" );
                                RETURN( NULL );
                              END;
                      END "eol"
        eif equ( two!cap, "ES" )
                 THEN BEGIN "esc"
                        pseudoLOP(chan, s);     ! gobble the s of "esc";
                        k _ pseudoLOP(chan, s); ! gobble the c;
                        IF (k = "c" OR k = "C")
                         THEN result _ result & '33     ! an escape;
                         ELSE BEGIN
                                print( crlf & "es", (0+s) & "?" );
                                RETURN( NULL );
                              END;
                      END "esc"
        eif equ( two!cap, "DE" )
                 THEN BEGIN "del"
                        pseudoLOP(chan, s);     ! gobble the d of "del";
                        k _ pseudoLOP(chan, s); ! gobble the l;
                        IF (k = "l" OR k = "L")
                         THEN result _ result & '177    ! a delete;
                         ELSE BEGIN
                                print( crlf & "de", (0+s) & "?" );
                                RETURN( NULL );
                              END;
                      END "del"
        eif equ( two!cap, "BE" )
                 THEN BEGIN "bel"
                        pseudoLOP(chan, s);     ! gobble the b of "bel";
                        k _ pseudoLOP(chan, s); ! gobble the e;
                        IF (k = "l" OR k = "L")
                         THEN BEGIN
                                IF (s = "l" OR s = "L") ! "bell";
                                 THEN k _ pseudoLOP(chan, s);
                                result _ result & '7    ! a delete;
                              END
                         ELSE BEGIN
                                print( crlf & "be", (0+s) & "?" );
                                RETURN( NULL );
                              END;
                      END "bel"
         ELSE BEGIN
                print( crlf & "unexpected character: '",
                                        CVOS(k), " = " & k );
                RETURN( NULL );
              END;

        WHILE s=" " OR s=tab OR s=lf OR s=cr OR s=eol OR s=ff
                DO pseudoLOP(chan, s);                  ! gobbleblanks;

        IF s = ";"
         THEN BEGIN pseudoLOP(chan, s); RETURN( result ); END
        eif S = "&"
         THEN pseudoLOP(chan, s)
         ELSE print( crlf & "missing ampersand ...continuing..." );
      END "longloop";
END "getstring";
SIMPLE STRING PROCEDURE obtainstrings( INTEGER jfn, storeword;
                                        STRING ARRAY wordmat );
desr    "jfnstr" is constantly associated with "jfn", and holds that
        part of the text from "jfn" that has been read in but not
        analyzed.  It is the mechanism that allows one-character
        lookahead, and is guaranteed to hold at least one character
        as long as there exists data yet to be read on "jfn"
;
BEGIN "obtainstrings"           STRING jfnstr, temp;
jfnstr _ "*";   ! never analyzed, a kludge to start "pseudolop";
pseudoLOP(jfn, jfnstr);         ! read in a string from the channel;

IF LENGTH( jfnstr ) > 0
 THEN WHILE temp _tring( jfn, jfnstr, FALSE )
           DO BEGIN
                wordmat[ storeword ] _ temp;
                IF (storeword _ storeword + 1) > maxwords
                 THEN BEGIN
                        print( crlf & "maximum string count reached," &
                                 " ignoring rest of file!" );
                        DONE;
                      END;
              END;

CFILE( jfn );
RETURN( storeword );

END "obtainstrings";
SIMPLE BOOLEAN PROCEDURE getwords( STRING ARRAY wordlist );
BEGIN "getwords"        STRING reply; INTEGER word, i;

IF LENGTH( wordlist[1] ) THEN print( crlf, "    Old word list:" );

FOR word _ 1 STEP 1 UNTIL maxwords
       DO IF LENGTH( wordlist[ word ] )
           THEN print( crlf, word, ") ", wordlist[ word ] )
           ELSE DONE;

word _ word MIN maxwords;       ! allows input if list full;

WHILE word LEQ maxwords DO
 case comand(   "Target " & CVS( word ) & ") ",
                "@^" & esc & crlf & ctrl("X") & ctrl("S") & ctrl("W"),
"       target words: (the strings you are searching for)
Type:   RET  to keep the existing list,
        ESC  to keep the existing list and accept subsequent defaults,
        ""^""  to go back to the first question. 
        ^X   to erase the existing list,
        ^W   to erase the last word of the existing list,
        ^S   to show the existing list, or
        a string to be searched for, OR
        @FILE NAME      to add the words stored on a file
" ) of
  begin "reply"
   BEGIN ! unk;                 EXTERNAL INTEGER !SKIP!;
                reply _ INTTY;
                WHILE !SKIP! = "}" DO reply _ reply & "}" & INTTY;
                        ! This is a kludge to get around INTTY ALT-MODE;
                IF !SKIP! = esc THEN escoff _ FALSE;
                wordlist[ word ] _ reply;
                IF LENGTH( reply ) THEN word _ word + 1;
                IF NOT escoff
                 THEN BEGIN
                        wordlist[ word ] _ NULL;
                        RETURN( TRUE );
                      END                                       END;
   begin ! "@";         INTEGER word$chan;
                IF 0 > (word$chan _ OPENFILE( NULL, "ROE" ))
                 THEN print("  ...WOOPS bad file name...")
                 ELSE begin
                        word _ obtainstrings(word$chan, word, wordlist);
                        cfile( word$chan )
                      END                                       end;
   begin ! "^"; jumptop _ true; return( true )                  end;
   begin ! esc; escoff _ false;
                wordlist[ word ] _ NULL; return( true )         end;
   begin !  cr; wordlist[ word ] _ NULL; return( true )         end;
   begin !  lf; IF LENGTH( wordlist[word] ) THEN word _ word+1  END;
   begin !  ^X; word _ 1                                        end;
   begin !  ^S; FOR i _ 1 STEP 1 UNTIL word-1
                        DO print( crlf, i, ") ", wordlist[i] )  end;
   begin !  ^W; word _ 1 MAX (word - 1)                         end
  END "reply";

END "getwords";
SIMPLE PROCEDURE getspecial;
BEGIN "getspecial"         INTEGER i, spechan; STRING specstr, equ$set;

spechan _ -1;
DO case comand( "Get specials from file: ", "^" & esc & crlf, "
Type:   FILE NAME  to add equivalences  to the special table,
                equivalences are specified in the same way as string
                lists are specified on files, with all characters in 
                each string set equivalent.  Any character that is 
                equivalent to the character '0 is ignored, just as 
                null bytes in a file are ignored.
        RET or LF  to leave without changing the special table.
        ESC        same as above, but accept all subsequent defaults,
        ""^""      to go back to the first question. " ) of
  begin "spcase"
   begin ! unk; IF 0 > (spechan _ OPENFILE( NULL, "ROE" ))
                 THEN print("  XXX ...woops...")                end;
   begin ! "^"; jumptop _ true; return                          end;
   begin ! esc; escoff _ false; return                          end;
   begin !  cr; return                                          end;
   begin !  lf; return                                          end
  END "spcase"  UNTIL spechan > -1;
specstr _ "*";  ! kluge to start up pseudolop;
pseudolop( spechan, specstr );

WHILE LENGTH( equ$set _ getstring( spechan, specstr, TRUE ) )
   DO BEGIN "equivalence set"   INTEGER ch, new;
                        ! make all characters in equ$set equivalent;
        new _ ch _ LOP( equ$set );
        WHILE LENGTH( equ$set )
           DO BEGIN "equiv"     INTEGER old, neweqv;
                old _ new;
                neweqv _ new _ LOP( equ$set );
                DO IF neweqv = old
                    THEN BEGIN          ! verify old =/= new;
                           print( crlf, old & " <=> " & new,
                                        " is REDUNDANT" );
                           CONTINUE "equiv";    ! old = new, next eqv;
                         END
                  UNTIL (neweqv _ special$equiv[ neweqv ]) = new;
                ! old =/= new, make them equivalent;
                special$equiv[ new ] SWAP special$equiv[ old ];
              END "equiv";
      END "equivalence set";
CFILE( spechan );

END "getspecial";
SIMPLE INTEGER PROCEDURE geteqv( STRING prompt; INTEGER default );
WHILE TRUE DO
case comand(    prompt & " " & cvs( default ) & "// ",
                "012AaDdRrSs^" & esc & crlf, "
Type:   ""0""      to treat all ASCII characters uniquely, 
        ""1""      to treat upper and lower case letters identically,
        ""2""      to use the special (definable) equivalence table,
        ""A""      to Alter (add equivalences to) the special table,
        ""D""      to Display the current special equivalence table,
        ""R""      to Reset the special equivalence table to table 0,
        ""S""      to Set the special equivalence table to table 1,
        RET or LF  to accept this default (only),
        ESC        to accept this and all subsequent defaults,
        ""^""      to go back to the first question. " ) of
  BEGIN "geteqv"
   begin ! unk; inchrw; print( "  try a ""?""" )                end;
   begin ! "0"; print( " (unique) " ); return( 0 )              end;
   begin ! "1"; print( " (upper = lower) " ); return( 1 )       end;
   begin ! "2"; print( " (special table) " ); return( 2 )       end;
   begin ! "A"; print( "dd" ); getspecial; default _ 2          end;
   begin ! "a"; print( "dd" ); getspecial; default _ 2          end;
   begin ! "D"; print( "isplay", crlf,
                   displaytable( special$equiv, TRUE, false ),
                   ";" & crlf ); default _ 2                    end;
   begin ! "d"; print( "isplay", crlf,
                   displaytable( special$equiv, TRUE, false ),
                   ";" & crlf ); default _ 2                    end;
   begin ! "R"; print( "eset specials (each character unique)" );
                ARRTRAN(special$equiv, unique); default _ 2     end;
   begin ! "r"; print( "eset specials (each character unique)" );
                ARRTRAN(special$equiv, unique); default _ 2     end;
   begin ! "S"; print( "et specials: (upper = lower)" );
                ARRTRAN(special$equiv, upper$lower); default_ 2 end;
   begin ! "s"; print( "et specials: (upper = lower)" );
                ARRTRAN(special$equiv, upper$lower); default_ 2 end;
   begin ! "^"; jumptop _ true; return( default )               end;
   begin ! esc; escoff _ false; return( default )               end;
   begin !  cr; return( default )                               end;
   begin !  lf; return( default )                               end;
  END "geteqv";

        BOOLEAN dopls;
        INTEGER equiv$set;
        INTEGER outfile;
        STRING oldfilename;
        LABEL topofquestions;
        STRING filelist, tempstr;
        STRING ARRAY wordlist[1:maxwords];

IFC boolstuff THENC
        STRING boolexp;
boolexp _ NULL;
ENDC

outfile _ -1;
ARRTRAN( special$equiv, unique );
wordlist[1] _ filelist _ NULL; equiv$set _ 1; dopls _ FALSE; justlines_false;

topofquestions: escoff _ TRUE; jumptop _ FALSE;

print( crlf & crlf,
        IFC cardstuff THENC " LIBRARY" ELSEC " SUBSTRING" ENDC,
        " search routine (compiled", compiler!banner[6 to 15],
        ") ? for help" );

IFC debug!booleans THENC
 print( crlf & "                debugging the booleans" );
ELSEC
 tempstr _ manyfiles( filelist, "Files to search: ", null,
                        ifc cardstuff thenc "ROH" elsec "RO" endc );
 IF jumptop THEN GO TO topofquestions;
 IF LENGTH( tempstr ) THEN filelist _ tempstr;
ENDC

IF escoff THEN getwords( wordlist );

WHILE LENGTH(wordlist[1]) = 0
   DO IF jumptop THEN GO TO topofquestions
                 ELSE getwords( wordlist );
 IF jumptop THEN GO TO topofquestions;

IFC NOT debug!booleans THENC
 IF escoff
 THEN equiv$set _ geteqv( "Equivalences: ", equiv$set );
 IF jumptop THEN GO TO topofquestions;
ENDC

IFC boolstuff THENC
 boolexp _ getexp( boolexp, wordlist, escoff );
 IF jumptop THEN GO TO topofquestions;
ENDC

IFC debug!booleans THENC
BEGIN "dotable"                 INTEGER numwrds, i;

FOR numwrds _ 0 STEP 1 UNTIL 34 DO
        IF LENGTH( wordlist[ numwrds+1 ] ) = 0 THEN DONE;

print( crlf & "truth table for: ", shortexp( boolexp, numwrds+1 ),
        crlf & crlf );
FOR i _ 1 STEP 1 UNTIL numwrds DO
        print( ("   " & CVS( i ) & " ")[ INF-2 FOR INF] );
print( "        RESULT" &
crlf & "------------------------------------------------------------" );

FOR i _ (1 LSH numwrds) - 1 STEP -1  UNTIL 0
 DO BEGIN               INTEGER j;
      print( crlf );
      FOR j _ 1 STEP 1 UNTIL numwrds DO
        hitbox[j] _ i LAND (1 LSH (j-1));

      FOR j _ 1 STEP 1 UNTIL numwrds DO
        print( IF hitbox[j] THEN " * " ELSE " - ");

      print( tab, IF checkbool( boolexp ) THEN "TRUE" ELSE "FALSE" );
    END;
END "dotable";
START!CODE HALTF; END;
GO TO topofquestions;
ENDC


WHILE LENGTH( filelist ) = 0
  DO  BEGIN
        filelist _ manyfiles( NULL, "Files to be searched: ", NULL,
                        ifc cardstuff thenc "ROH" elsec "RO" endc );
         IF jumptop THEN GO TO topofquestions;
      END;

IF escoff
 THEN dopls _ agree( "Create .PL files?",
                     ".PL files are editor-interface files, " &
                        "YES means create them.",
                     dopls );
IF jumptop THEN GO TO topofquestions;

outfile _ getfile( oldfilename, TRUE );         ! could use escoff here;
IF jumptop THEN begin
                if outfile > -1 then cfile( outfile );
                GO TO topofquestions;
                end;
oldfilename _ (if outfile > -1
                then JFNS( outfile, exact!name ) else "TTY:" );

CASE equiv$set OF BEGIN
                    setuptable( wordlist, unique );
                    setuptable( wordlist, upper$lower );
                    setuptable( wordlist, special$equiv )
                  END;

IFC boolstuff THENC
 performsearch( outfile, filelist, equiv$set, dopls, boolexp );
ELSEC
 performsearch( outfile, filelist, equiv$set, dopls );
ENDC

IF outfile > -1 THEN BEGIN CFILE( outfile ); outfile _ -1; END;

print( crlf & crlf & "  ...DONE...   continue to start over" );
        START!CODE HALTF; END;
        GO TO topofquestions;
require " done " message;
END "subsearch" .

require " too far " message;

 E^/@