

Proposed behaviour:

Name_lookup:
	Soundex_value := calculate_soundex(name);
	hash_chain := buckets[ fold_integer( Soundex_value ) ];
	while hash_chain
	   do if Soundex_value = hash_entry.contents
		and_then string_match(name, hash_entry.name)
		then got_match
		else hash_chain := hash_chain.next;

Advantages of a SOUNDEX coding:
(1) Soundex, while not a "randomizing" hash code, does seem
    to spread identifiers in the same way that programmers
    in the same way that programmers do.  In some statistics
    taken on the MIS sources, soundex seemed to be a very
    good hash function (with the sole problem that the address
    space it hashes into is too large: about 13 bits).  In
    fact, there is an extremely large probability that if two
    identifiers are distinct, their Soundex codes are distinct.
    The soundex of an identifier (at least in the MIS files example)
    is a better discriminator than the first ? characters.
(2) It provides the hook for an impressive spelling repair system.
    Since very few identifiers share a soundex code, and since many
    mispellings of the same identifier have the same soundex code,
    the foundation of a very good guess for what identifier was 
    meant has been laid.  Hence, in the case of an undeclared 
    identifier showing up, all identifiers with the same soundex
    can be checked to see if the mystery identifier is a mispelling
    of them.  Since there are so few entries, this can be a relatively
    expensive check without costing very much.

Statistics evaluation:
	SOUNDEX alone, over a very large number of distinct tokens, is
    unfortunately not a good hash code.  SOUNDEX mod 509 is signifi-
    cantly better, but still not great.  Perhaps we should reason as
    follows.  
	In a normal hash code, the idea is to smear the values smoothly
    across the hash address space, removing the information from the 
    identifier choice, and relying on the law of large numbers to 
    distribute the variables.  The choices people make for identifier 
    names work against the success of the hash code, since the premise
    is random distribution.
	The idea of using the SOUNDEX code is to attempt to take 
    advantage of the behavior of programmers when choosing variable
    names.  We presume that in choosing variable names, the programmer
    tries to avoid confusable names (unless constrained to do so by a
    naming convention).  We further presume that at least one criterion
    used is the "pronouncing distance" between names, and that is the
    feature we are attempting to exploit.  SOUNDEX is a code that was
    developed to be relatively "spelling-invariant" given a spoken
    English (American?) last name.  The methods used by SOUNDEX are to 
    treat any letters which may sound alike as if they were the same
    letter (eg. S=C and C=K, so S=K), and to ignore vowels except to the
    the extent that they separate "syllables".  I presume that the 
    reason SOUNDEX failed is that, while a programmer may separate
    variable and procedure names within a program, he is less likely
    to do so between programs.  Hence, the real statistics desired 
    would be spread within a single file (statistics which were not 
    taken).  A partaphrase of my conjecture: a programmer may call a
    variable COUNT or CNT, but he is not as likely to use both names
    as available at the same place in a program precisely because they 
    sound alike.

