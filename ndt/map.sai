begin "Zork Compressor"
require 5 version;
require "{}{}" delimiters;
define	tab={('11&null)}, lf={('12&null)}, ff={('14&null)}, 
	cr={('15&null)}, esc={('33&null)}, eol={('37&null)}, 
	spc={('40&null)}, del={('177&null)}, crlf={('15&'12)},
	white={('11&'12&'14&'15&'40)},
	!={Comment};
ifcr not declaration(TENX)
thenc	ifcr declaration(openfile) 
	thenc	define TENX(x)={x}, T10(x)={};
	elsec	define TENX(x)={}, T10(x)={x};
endc	endc

external integer !skip!
		 ;
define	LowAlpha={"abcdefghijklmnopqrstuvwxyz"}
	,UpAlpha={"ABCDEFGHIJKLMNOPQRSTUVWXYZ"}
	,Digits={"0123456789"}
	,Separators={",;:&=<>()[]\|^"}
	,Punctuation "be" =b(""",./?;+!#$%&'*=_-:<>()[]{}\|^@`~")e
	;


integer  RdLine 	! INCHWL-style Break (read one line);
	,EatWhite	! consumes White Space (none out);
	,ToWhite	! Stops on White Space (none out);
	,OctDig 	! passes octal digits;
	,LetDig 	! passes letters and digits;
	,UpLetDig	! passes letters and digits, forces Up;
	,PassPunct	! passes Punctuation;
	,PassPunct!W	! passes Punctuation,Ignoring WhiteSpace;
	,NoWhite	! ignore WhiteSpace, pass all else;
	,ForceUp	! passes everything, forces up;
	,ToSep		! stops on separators, ignores them.;
	;
simple procedure brkset;
begin
setbreak( rdLine	_getbreak, lf & ff, cr, "INS" );
setbreak( EatWhite	_getbreak, white, white, "XNR" );
setbreak( ToWhite	_getbreak, white, white, "INS" );
setbreak( OctDig	_getbreak, "01234567", null, "XNR" );
setbreak( LetDig	_getbreak, LowAlpha&UpAlpha&Digits, null, "XNR" );
setbreak( UpLetDig	_getbreak, LowAlpha&UpAlpha&Digits, null, "XNRK" );
setbreak( PassPunct	_getbreak, Punctuation, null, "XNRK" );
setbreak( PassPunct!W	_getbreak, Punctuation&white, white, "XNRK" );
setbreak( NoWhite	_getbreak, null, white, "INR" );
setbreak( ForceUp	_getbreak, null, null, "INK" );
setbreak( ToSep		_getbreak, separators, null, "IS" );
end;
require brkset initialization;


string simple procedure ScanTail(string s; integer breakTable);
begin scan( s, breaktable, !skip! ); return(s) end;

string simple procedure ScanS(reference string s; integer breakTable);
	return( scan( s, breaktable, !skip! ) ); 

string simple procedure upper(string s);
	return( scan( s, forceUp, !skip! ) );

string simple procedure scanOut(reference string s;integer breakTable);
begin	string result;
result_ scan( s, breaktable, !skip! ); 
scan(s,eatWhite,!skip!);
return( result );
end;

integer  inp
	,brk
	,eof
	;
String	 CurrentLine	! just for error reporting use;
	;

simple procedure fatal(string x);
begin
print(crlf & "*Error in: ", CurrentLine, crlf, x, crlf );
inchrw;
end;


string simple procedure ReadLine;
begin	string Line;
do scans( Line_ CurrentLine_ input(inp,Rdline), EatWhite )
 until eof or length(Line);
return(line);
end;


string simple procedure StripName( Reference String LongName, Source );
begin	string	 result
		;

if length(result_ scanS(Source,UpLetDig)) = 0
or not equ( "=", scans(Source,PassPunct!W) )
 then usererr(0,0,"Badly formatted line: " & Source);
scan( Source, EatWhite, !skip! );
LongName_ scanOut( Source, ToWhite );
While length(Source) and !skip! neq "["
   do LongName_ LongName & spc & scanOut( Source, ToWhite );
return(result);
end;


require 200 Pnames;
require 2000 new!items;
item	 Synonym	! abbreviations: Synonym XOR short EQV longName;
	;
set	rooms,
	directions,
	objects,
	pending;

define	PendingBit= 1 lsh 11;

COMMENT Data structures:

Direction:	ITEM  
	props(direction) = directionBit
	datum(direction) = directionBit
	direction in directions 
	SYNONYM(direction)=fullName

Room:		ITEM  
	props(room) = `OR' of all investigated directionBits
			+ pendingBit if "forward referenced"
	datum(room) = "Full-Case name"
	room in Abbreviations
	FromRoom(direction)=ToRoom
	SYNONYM(room)=fullName

directions:	set of all valid directions (N,S,E,W,U,D,...)
;


string procedure GetDirections;
begin "getdirections"
	string	Line;
	integer	LastProp, AssignedProps;
	set UnassignedDirections;
	string itemvar dir; 

UnassignedDirections_ PHI;
if "=" neq lop(Line_ReadLine)
 or not equ("DIRECTIONS",scanOut(line, UpLetDig))
 or length(line)
  then fatal("Bad start of File");

AssignedProps_ -PendingBit;	! turn on all high bits;
while "=" neq Line_ ReadLine
   do begin "new direction"	string num,abrev,longName;
				string itemvar OtherName; 
				integer number;
	if eof then fatal("Unexpected EOF in DIRECTIONS");
	num_ scanOut(Line,octDig);
	abrev_ scanOut(line,UpLetDig);
	if not equ("=",scanS(line,PassPunct!W))
	 then fatal("DIRECTION Line without =.");
	longName_ scanOut(Line,LetDig);
	if length(line) then fatal( "DIRECTION line too long");

	new!Pname( dir_new(longName), abrev );
	put dir in directions; 

	if length(longName) and not equ(longName,abrev)
	 then begin
		new!Pname( OtherName_new(abrev), upper(longName) );
		MAKE Synonym XOR OtherName EQV dir;
	      end
	 else datum(dir)_ abrev;

	if length(num)=0 then put dir in UnassignedDirections;
	if (number_cvo(num)) land AssignedProps 
	 then print( crlf, "Bad number for ", dir, "[", datum(dir), "]")
	 else AssignedProps_ AssignedProps lor (props(dir)_ number);
      end;
LastProp_ PendingBit;	
foreach dir | dir in UnassignedDirections
   do begin
	while lastProp land AssignedProps do lastProp_ lastProp lsh -1;
	AssignedProps_ AssignedProps lor lastProp;
	if lastProp = 0
	 then print(crlf, "No bit available for ", datum(dir),
			"[", dir, "]= ", Synonym ASSOC dir);
	props(dir)_ lastProp;
      end;
return(Line);
end "getdirections";


integer item Punct;

itemvar procedure scan1( reference string line );
begin	string name;
	integer itemvar result;
scans(line,EatWhite);
if length(name_scanS(line,UpLetDig))
 then begin	integer flag;
	result_ cvsi(name,flag);
	if flag
	 then begin	string itemvar gensym;
		new!pname( gensym_ new("{Unassigned}"),name);
		props(gensym)_ pendingBit;
		return(gensym);
	      end
      end
 else begin
	result_ Punct;
	datum(result)_lop(line);
      end;
return(result);
end;


set pendingRooms;

procedure DoDirections( string itemvar base; string Transitions);
if length(Transitions) then
begin "DoDirections"
	string line;
	integer itemvar way, lway, target;
	label fail;
lway_ any; line_ transitions;
if punct neq (way_scan1(line)) 
or datum(way) neq "["
or punct = (lway_scan1(line)) 
 then go fail;
! now way=punct("[") and lway=direction;
way_ scan1(line);
neednext while length(line) 
   do begin "one assoc"		label colok;
	if punct = way
	 then if datum(way) = ":"
		 then begin next; way_scan1(line) end
		 else done
	 else print("Inserting missing `:'"); 
	if props(base) land props(lway)		! already set;
	 then print(crlf, "Multiple ", lway, " for ", base );
	
COLOK:
	! now lway=direction and way=target room;
	if (not lway in directions) or PendingBit land props(lway)
	or any=way or way=punct
	 then done;

	MAKE lway XOR base EQV way;		! connect places;
	if props(way) land PendingBit then put way in PendingRooms;
	props(base)_ props(base) lor props(lway); ! show it;
	next; way_ scan1(line);
	if way=punct 
	 then if datum(way)="]" then RETURN
	      else if datum(way)=":" 
		 then begin next; way_scan1(line); go COLOK end
	      else if datum(way)="," 
		 then begin	next; lway_scan1(line); 
				next; way_scan1(line); end
      end "one assoc";
FAIL:
print( crlf& "Bad Transition notation: ",
	Transitions[1 to inf-length(line)], "<-"&crlf&"->", line );

end "DoDirections";


set Conflicts;
string	 abbrev
	,name
	;


procedure DumpMap;
begin "DumpMap"
	string itemvar dir,room;
	integer w,d;
getformat(w,d); setformat(-4,0); setprint(null,"F");
print(crlf,"  =Directions");
foreach dir | dir in directions  
   do print( crlf, cvos(props(dir)),"  ", dir, tab&"= ", datum(dir) );

print(crlf," =Map");
foreach room | room IN rooms
   do begin	itemvar dest;
		string separator; 
	print(crlf, cvos(props(room)), " ", room,
		tab & "= ", datum(room), tab );
	separator_ "[";
	foreach dir,dest | dir in directions and dir XOR room EQV dest
	   do begin
		print(separator,dir,":",dest);
		separator_ ", ";
	      end;
	if separator neq "[" then print("]");
      end;
print(crlf,crlf);
setformat(w,d); setprint(null,"T");
end "DumpMap";


procedure RoomLine( string line ); ! format: ABR = Long Name [RoomList];
begin "RoomLine"	boolean flag;
	string itemvar room,full; ! the room ITEMVAR (datum=full name);
	integer investigated;
investigated_ scanOut(line,OctDig);
abbrev_ StripName( name, Line );
room_ cvsi( abbrev, flag );
if flag then new!pname( room_ new(name), abbrev )
 else if props(room) land PendingBit
	 then begin remove room from pendingRooms; datum(room)_name; end
	 else begin
		print(crlf,"Conflict over: ", room, " = ", name, crlf,
			"->", line, " [Ignored, was: ",datum(room),"]");
		return;
	      end;
Full_ cvsi( upper(name), flag );
if flag
 then new!Pname( Full_ new(abbrev), upper(name) )
 else begin
	print(crlf, "Warning: ", name, " multiply defined.",
		"  This time as: ", abbrev, "," & crlf &
		"  Formerly:" );
	foreach room | Synonym XOR room EQV Full
	   do print(" ", room, "=", Full );
	print(crlf,"Now from line: ", line, " [Ignored] ");
	return;
     end;
datum(room)_ name;
props(room)_ 0;
MAKE Synonym XOR Full EQV room;
put room in rooms;
DoDirections(room,Line);
props(room)_ props(room) lor investigated;
end "RoomLine";


itemvar procedure TrueNameGet(reference string s);
begin	itemvar var;
	set derived;
if (var_scan1(s))=ANY then return(ANY);
case length(derived_synonym XOR var)
 of begin [0];[1]var_lop(derived); 
      ELSE begin 
	     print(var," ambiguous: ", derived );
	     return(ANY); 
	   end
    end;
return(var);
end;


procedure Path(string l; boolean addit);
begin	itemvar r1,d,r2, triple;
	define eif={else if}, erm(x)={outstr(crlf&"--"&cvps(x)&" ")};

if (any = r1_TrueNameGet(l)) or punct=r1
					then erm(Bad First Room)
eif punct neq (d_TrueNameGet(l)) or datum(punct) neq ":"
					then erm(Missing colon)
eif any = (d_TrueNameGet(l))		then erm(Bad Direction)
eif not d in directions			then erm(Non-direction)
eif punct neq (r2_TrueNameGet(l)) or datum(punct) neq "="
					then erm(missing Equals)
eif any = (r2_TrueNameGet(l)) or r2=punct
					then erm(bad destination room)
 else begin
	if (d xor r1 eqv r2) = addit
	 then print("[bad Path ",(if addit then "Add" else "Drop"),"]")
	 else if addit
		then make d xor r1 eqv r2
		else erase d xor r1 eqv r2;
	return;
      end;
print("[Improper format: -",r1,"-",d,"-",r2,"-...", l, "...Ignored]");
end;


boolean verbosity; define fromRoomBit=1,toRoomBit=2;
procedure ptrip( string itemvar r1; itemvar dir; string itemvar r2 );
  print(if verbosity then crlf else " ",
    if verbosity land fromRoomBit then datum(r1) else cvis(r1,!skip!),
    ":", dir, "=",
    if verbosity land   toRoomBit then datum(r2) else cvis(r2,!skip!) );


set hidden;

procedure ShowPaths(string l; Integer PathMax);
if PathMax leq 0 then print("What?? max <= zero??") else
begin "showPaths"
	itemvar token;
	set known,NewTokens;
	integer level;
if any=(token_ TrueNameGet(l)) or length(l)
 then begin print(" Ill-formed token "); return; end;
newTokens_ {token};
known_ hidden; put token in known;
for level_1 step 1 until PathMax
   do begin		itemvar r1,dir,r2; set candidates;
	print(crlf,level,"==>");
	candidates_ newTokens;
	newTokens_phi;
	foreach r1,dir,r2 | r1 in candidates
			and dir in directions
			and dir xor r1 eqv r2
			and (not r2 in known)
	   do begin 
		ptrip( r1,dir,r2 );
		put r2 in NewTokens; 
		put r2 in known;
	      end;
	if length(newTokens)=0 then done;
	print("<==",length(newTokens));
      end;
end "showPaths";


procedure FindPath(string l; Integer PathMax);
if PathMax leq 0 then print("What?? max <= zero??") else
begin "findPaths"
	itemvar room1,dir,dest;
	set known,NewTokens;
	set array path[0:pathMax];
	list result;
	integer level;
	let orelse=or;
if any=(room1_ TrueNameGet(l))
orelse punct neq TrueNameGet(l) 
orelse any=(dest_ TrueNameGet(l))
orelse room1=dest
 then begin print(" Ill-formed Plan "); return; end;

known_ hidden; put room1 in known;
newTokens_ {room1};
for level_1 step 1 until PathMax
   do begin "combine"	itemvar r2; set candidates;
	path[level-1]_ candidates_ newTokens;
	newTokens_phi;
	foreach room1,dir,r2 | room1 in candidates
			and dir in directions
			and dir xor room1 eqv r2
			and (not r2 in known)
	   do begin 
		if r2=dest then done "combine";
		put r2 in NewTokens; 
		put r2 in known;
	      end;
	if length(newTokens)=0 then return;
      end;
if level > PathMax then return;
print(crlf,level, " Steps: ");
result_ {{dir,dest}};
for level_level-2 step -1 until 0
   do begin	itemvar room0;
	foreach room0,dir | room0 in path[level] 
			and dir in directions
			and dir xor room0 eqv room1
		do done;
	put room1 in result before 1;
	put dir in result before 1;
	room1_room0;
      end;
define nicep(x)={ if verbosity land toRoomBit
	 then datum(x,string) else cvis(x,!skip!)};

print( niceP(room1) );
while length(result) 
   do print( if verbosity land toRoomBit then crlf&":" else ":",
		lop(result), "=", niceP(lop(result)) );

end "findPaths";


boolean procedure find(reference itemvar result; string line);
begin	string formal;
result_ cvsi(line,!skip!); if !skip!=0 then return(true);
formal_ scans(line,toWhite);
while length(line_ scanTail(line,eatWhite))
   do formal_ formal & spc & scans(line,toWhite);
result_ cvsi(formal,!skip!);
if !skip! then result_ cvsi(line_upper(formal),!skip!);
if !skip! then result_ cvsi(scans(formal,noWhite),!skip!);
if !skip! then result_ cvsi(scans(line,noWhite),!skip!);
return(!skip!=0);
end;


procedure hideOp;
begin	integer leadch; string token,line; itemvar iv; set trn;
print(" ", length(hidden), " rooms currently hidden: ", hidden,
	crlf, " `-' to un-hide them all, `-room' to unhide one, " &
	" or `room' to hide another room.", crlf, "-->");
scan(line_inchwl, EatWhite, leadch);
if "-"=leadch or "+"=leadch then scanS(line_line[2 to inf],Eatwhite);
if length(line)=0
 then begin if leadch="-" then hidden_phi; return; end;
while length(line)
   do begin
	token_ scanOut(line, ToSep);
	if find(iv,token)
	 then begin
		if length(trn_synonym xor iv)=0 then put iv in trn;
		hidden_ if leadch="-"
			 then hidden-trn else hidden union trn;
	      end
	 else print(" no `", token, "' found. ");
      end;
end;

procedure ProcessCommands;
while true do
begin "ProcessCommands"
		string line,tk; 
		own integer pathmax, searchMax; 
		itemvar room;
		item pend,quit,dump,size,hide;
pathMax_ pathMax max 1; if searchMax leq 0 then searchMax_25;
print(crlf&"->");
scan( line_inchwl, EatWhite, !skip! );
case line of begin
 [0];
 ["*"] RoomLine(line[2 to inf]);
 ["^"] PathMax_cvd(line[2 to inf]);
 ["%"] SearchMax_cvd(line[2 to inf]);
 ["+"] Path(scantail(line[2 to inf],EatWhite),true);
 ["-"] Path(scantail(line[2 to inf],EatWhite),false);
 ["="] ShowPaths(scantail(line[2 to inf],EatWhite),PathMax);
 ["."] FindPath(scantail(line[2 to inf],EatWhite),SearchMax);
 ["|"] verbosity_verbosity xor intscan(line,!skip!);
 ["?"] print(crlf, "`* room-line' to add a new room,",
	crlf, "`^ number' sets pathMax, ",
	crlf, "`% number' sets searchMax, ",
	crlf, "`= room' shows rooms nearby,",
	crlf, "`| number' switches verbosity settings (1+2),",
	crlf, "`. room1:room2' to find a path from room1 to room2,",
	crlf, "`+ room:dir=room' to add a new path",
	crlf, "`- room:dir=room' to remove an old path,",
	crlf, "`DUMP' to save map,",
	crlf, "`PEND' to list rooms accessed but undefined,",
	crlf, "`HIDE' to move rooms to and from the hidden set,",
	crlf, "`SIZE' to list list number of stored objects,",
	crlf, "Or `QUIT' to exit.");
 ELSE if find( room, line )
    then case cvn(room) of begin
	[cvn(dump)] dumpMap;
	[cvn(PEND)] print( "Unspecified rooms: ", pendingRooms );
	[cvn(HIDE)] hideOp;
	[cvn(SIZE)] print( " Rooms: ", length(rooms), 
			", Directions: ", length(directions),
			", Hidden: ", length(hidden) );
	[cvn(QUIT)] done;
	 ELSE begin	itemvar iv;
		print(" Associations: ");
		foreach iv | iv xor room eqv any
		   do print(crlf, iv, "(", room, ")=", iv xor room );
		print(crlf,"----");
		foreach iv | iv xor any eqv room
		   do print(crlf, iv, "(", iv assoc room, ")=", room );
	      end
	end
    else print("Try a `?'.")
 end;
end "ProcessCommands";


itemvar abr;
string line;
external integer jobver;

print(crlf,"Mapper version ", cvos(jobver), crlf, "Source: ");
TENX({ setinput( inp_openfile(null,"RO"), 200, brk_0, eof_false ); })
T10({	open( inp_getchan, "DSK",0, 4,0, 200, brk_0, eof_false ); 
	if eof then Fatal("No Disk Input today!");
	lookup( inp, inchwl, eof );
	while eof
	   do begin 
		print(" Sorry, try again: ");
		lookup( inp, inchwl, eof_ false );
	      end;
})

getDirections; 

pendingRooms_phi;
while length(Line_ReadLine) do RoomLine(line);
if length(pendingRooms)
 then print(crlf, 
	"Warning, the following rooms have not been specified: ", crlf,
	pendingRooms );

release(inp); 

print( crlf );

ProcessCommands;
End "Zork Compressor" $$
 