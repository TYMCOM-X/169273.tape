?RAIDVER__4			;PROGRAMS CAN DETECT VERSION

DEFINE STSW (SWITCH,VAL) <
IFNDEF SWITCH,<SWITCH__VAL>
>
DEFINE SETSYS (SWITCH,VAR) <
IFDEF VAR,<STSW(SWITCH,1);> STSW(SWITCH,0)
>

SETSYS (STANFO,SPCWAR)
SETSYS (TENEX,GETJFN)
SETSYS (TYMSHR,AUXCAL)
IFE STANFO!TENEX,<DECSW__1;>DECSW__0

STSW(SORTED,1)		;SORTED SYMBOL TABLE
STSW(PADSYM,1-STANFO)	;PAD THE SYMBOL TALBE WITH ....XX GLOBALS
STSW(FILESW,0)		;ASSEMBLE FRAID FOR GROVELLING OVER FILES
STSW(UESW,0)		;ASSEMBLE UERAID FOR LOOKING AT SYSTEM

IFN FILESW!UESW, <STSW(REALSW,0)>
STSW(REALSW,1)		;ASSEMBLE VERSION WITH ALL INTERNALS
		;(REALSW_0 FOR DEBUGGING SO NO GLOBAL CONFILICTS)

STSW(DMOVSW,REALSW)	;IF ONE, THE DISPLAY IS IN THE NORMAL RAID AREA


STSW(EXDSW,1)		;LEAVE THIS WAY UNTIL RAID IS FIXED TO LOOK
			;AT $IO INDEPENDENT OF THIS SWITCH, AND ALSO
			;LOOK FIRST IN THE SYMBOL TABLE FOR DEVICE CODES

DEFINE PRNTOP <PRINTS>

DEFINE VALPNT (VAL) <
PRNTOP /VAL/
>
DEFINE FORPNT (VAL) <
PRNTOP /ASSEMBLING FOR VAL SYSTEM
/>

IFN STANFO, <FORPNT(STANFORD)>
IFN TENEX, <FORPNT(TENEX)>
IFN TYMSHR, <FORPNT(TYMSHARE)>
IFE TYMSHR,< IFN DECSW, <FORPNT(DEC)> >

PRNTOP /SWITCHES ARE:
/

FOR SWITCH IN (STANFO,TENEX,TYMSHR,DECSW,REALSW,<UESW>
		,FILESW,DMOVSW,EXDSW,SORTED,PADSYM) <
PRNTOP /SWITCH(/
VALPNT (\SWITCH)
PRNTOP /) /
>

ifn 0,<		;since no input taken anyway
PRNTOP /
TYPE NEW VALUES FOR THESE SYMBOLS, IF ANY, FOLLOWED BY /
IFN STANFO,<PRNTOP /CONTROL-META-LF
/>
IFE STANFO,<PRNTOP /CONTROL Z
/>
>;ifn 0

FOR SWITCH IN (STANFO,TENEX,TYMSHR,DECSW,REALSW,<UESW>
		,FILESW,DMOVSW,EXDSW,SORTED,PADSYM) <
IFN SWITCH,<?SWITCH__1;> ?SWITCH__0
>
DEFINE %TITLE(NAME) <
	DEFINE %%TITLE <%TITLE(NAME)>
>

IFN UESW,<
%TITLE (UERAID)
?REALSW__0
?FILESW__0
>

IFN FILESW,<
%TITLE (FRAID)
?REALSW__0
?SORTED__1
?PADSYM__0
>

IFE FILESW!UESW,<
IFE REALSW,<%TITLE (DRAID) >
IFN REALSW,<%TITLE (RAID) >
>

IFN REALSW,<DEBSYM__0>
IFNDEF DEBSYM,<DEBSYM__1>	;DEBSYM USES LOCAL JOBSYM, NOT EXTERNAL
?DEBSYM__DEBSYM

IFN FILESW,<
IFN STANFO,<.INSERT RAID.SUB[CSP,SYS]>
IFE STANFO,<.INSERT RAID.SUB>
>

IFE UESW!TENEX,<?SEGSW__1;>?SEGSW__0
		;SEGSW MEANS BE ABLE TO LOOK AT SECOND SEGMENT CORE

DEFINE .XOR. (VAL1,VAL2) <<<VAL1><VAL2>>> ;not equal (exclusive or)
DEFINE .LEFT. (VALUE,BITS) <<<VALUE><BITS>>> ;circle times (left shift)

;Accumulators, Bits, Macros

?A_1
?B_2
?C_3
?D1_4
?D2_5
?D3_6
?E_7
?F_10
?M_11
?T_12
?F1_13
?PNT_14
?PV_15
?V_16
?P_17

EXTERNAL .JBHRL,.JBFF,.JBOPC,.JBDDT,.JBREL,.JBSA,.JBSYM
define JOBHRL <.JBHRL>
define JOBFF <.JBFF>
define JOBOPC <.JBOPC>
define JOBDDT <.JBDDT>
define JOBREL <.JBREL>
define JOBSA <.JBSA>
IFE DEBSYM, <
define JOBSYM <.JBSYM>		;will use fake JOBSYM to allow debugging
>

;FLAGS -- FLAG REGISTER, LEFT HALF

?NUMF__200000	;SCAN RETURNED A NUMBER (VALUE)
?SYMF__100000	;SCAN RETURNED A SYMBOL
?UNDF__ 40000	;SCAN RETURNED AN UNDEF SYM.
?FLTF__ 20000	;SCAN RETURNED A FLOATING POINT NUM.
?SCFL__ 10000	;SCAN IS AHEAD ONE CHR.
?R5FL__  4000	;INTERNAL SCAN FLAG -- RADIX50 INPUT
?VALF__  2000	;EVAL RETURNED A VALUE
?LOCOPF__1000	;LOCATION OPEN (STORE LEGAL)
?SINGF__  400	;EVAL SAW A SINGLE SYMBOL
?EHDF__   200	;EVAL IS AHEAD ONE THING
?ESPCF__  100	;EVAL SAW A SPACE (TRUNCATE TO 18 BITS)
?FIRF__    40	;SCAN -- DO NOT LOOK FOR OPCODES
?USINGF__  20	;EVAL SAW UNDEFINED SINGLE SYMBOL
?PMULFL__  10	;MULTIPLY DEFINED SYMBOL
?PUFL__     4	;UNDEFINED SYMBOL, DISPLAY "U"
?EVMF__     2	;EVAL MINUS FLAG
?STARSW__   1	;PUT BIG * ON SCREEN NEXT REDISP

;FLAG REGISTER, RIGHT HALF

?SRCHSW__400000	;SEARCH IN PROGRESS
?BYTSW__ 200000	;SWITCH FOR EVAL::: TERMINATE ON COMMA
?CONOF__ 100000	;I/O OPCODE FOUND -- EVAL HANDLE COMMA DIFFERENT
?CONOFF__ 40000	;I/O OPCODE FOUND ON OUTPUT
?CNVABS__ 20000	;USE ABS VALUES IN CONVERTING
?DOSETL__ 10000	;WE HAVE SEEN AN ALT-MODE, AND HAVE TO SET REGULAR
		;ACITIVATION MODE.
?DRWALL__  2000	;REDRAW ALL DISPLAY LINES NEXT REDISP
?DPYALL__  1000	;REGENERATE ALL DISPLAY LINES NEXT REDISP
?ISOPC__    400	;JOBOPC USED FOR BP ADDR


;SYMBOLIC REPRESENTATIONS OF DATA MODE CODES, FOUND IN DPNT AND DCON ARRAYS

?CYM__ 1	;"C"YMBOLIC
?OCL__ 2	;OCTAL
?OCL1__3	;SIGNED OCTAL
?HLF__ 4	;HALFWORD
?TXT__ 5	;TEXT, 5 IS RADIX50, 6 IS SIXBIT, 7 IS ASCII
?FLG__10	;FLOATING
?BYT__11	;BYTE MODE OUTPUT
?DCM__12	;DECIMAL
?UTX__13	;RH BYTE TEXT, 13 IS RADIX50, 14 IS SIXBIT, 15 IS ASCII
?BTP__16	;CTRLQ, BYTE POINTER DISPLAY
?BTS__17	;BIT BY BIT DISPLAY, USING TABLE
?LBT__20	;LEFT HALF BIT DISPLAY
?RBT__21	;RIGHT HALF BIT DISPLAY
?STS__22	;STATUS LINE CONVERSION (U, OK, PURE, ?, ETC.)
?PRG__23	;PROGRAM NAME CONVERSION
?BLK__24	;BLOCK NAME CONVERSION
;...
?ABS__40	;ABSOLUTE MODE (OR'ED WITH OTHERS)

;INDICES FOR STATUS LINE ENTRIES

?.OK__  0	;"OK"
?.HUH__ 1	;"?"
?.MUL__ 2	;"M -- sym"
?.UND__ 3	;"U -- sym"
?.SKIP__4	;"SKIPn"
?.STAR__5	;"*"
?.MEM__ 6	;"MEM?"  NONEXISTENT ADDR (TENEX)
?.PURE__7	;"PURE?"
?.PROT__10	;"PROT?"	MEMORY PROTECTION VIOLATION
?.ILL__ 11	;"INST?"	ILLEGAL INSTR (TENEX)

;SEE DPNT ARRAY DESCRIPTION FOR POSITION OF THESE BITS


OPDEF FLOAT [FSC 233]
OPDEF TNOFFS [043000,,'SSW']
IFE STANFO,<
DEFINE SETLIN (A,B) <>
DEFINE GETLIN (A,B) <>
DEFINE SETACT (A,B) <>
DEFINE UNPURE (A,B) <>
>;NOT STANFO
IFN TENEX,<
OPDEF JSYS [104000,,]
OPDEF PBIN [JSYS 73]
OPDEF PBOUT [JSYS 74]
OPDEF PSOUT [JSYS 76]
OPDEF CBIBF [JSYS 100]
OPDEF RFMOD [JSYS 107]
OPDEF SFMOD [JSYS 110]

DEFINE INCHRS <
	MOVEI A,100
	SIBE
	 JRST [	PBIN
		JRST .+2]
>
>;TENEX

DEFINE RDF ! (SYM,VAL) <
SYM__VAL
SYM!V__1
>

DEFINE LDF ! (SYM,VAL) <
SYM__VAL
SYM!V__0
>

DEFINE TB $ (E,A,B) <
IFE B$V,<TL$E A,B>
IFN B$V,<TR$E A,B>
>

IFN UESW,<
DEFINE CMOVE (A,B) <
	MOVEI A,(B)
	PEEK A,
>
>

IFE UESW,<
DEFINE CMOVE (A,B) <
	CAIGE B,20
	ADDI B,JAC
	MOVE A,(B)
>
>

IFN STANFO,<?ALTMOD__175>		;CODE FOR ALT MODE
IFE STANFO,<?ALTMOD__33>
?VTSESC__176				;CODE FOR VTS ESCAPE CHAR
?HILOC__135

?MAXDLN__27
IFN TYMSHR,<?MAXDLN__24>
?LINLEN__=24			;number of words per line (text)
;Descriptions, Global Structures

IFN 0,<;;actually a comment for the entire page
 Here (and below, in display routines) are some of the crucial
 variables and arrays in RAID.

IFE SORTED,<
SYMPRG
   contains [2*#syms left,,\prog name] for currently `open'
   program.  #syms left is # symbols between this point and the 
   base of the symbol table.  Routines which search for things
   start here and are forced to `WRAP' when the count runs out

SYMPNT
   is [#syms left,,\block name] (or prog name) for currently
   `open' block.  It is normally used as the starting point in
   symbol searches.  It is located directly before the DPNT array,
   which contains one entry per line, because some routines treat
   SYMPNT nonspecifically as an integral part of the state
   description for the screen.
>;NOT SORTED

IFN SORTED,<
PID
   is index within BLKNAM/BLKVAL tables (see storage structure)
   of currently open program, -1 if none.

BID
   is the index of the currently open block, -1 if none. It is located
   directly before the DPNT array, which contains one entry per line,
   because some routines treat BID nonspecifically as an integral
   part of the state description for the screen.
>;SORTED

DPNT
   is long enough to contain one entry per line, for the maximum
   (MAXDLN) number of lines allowed.  Each entry contains 0 (not used)
   or a word locating the thing displayed on that line, and identifying
   its current display mode.  Each word has the following format:

  Left half:
   Bit 0:	If on, this line is protected
   Bits 1-6:	any numeric value needed to completely specify the mode
		(e.g. the number of bits per byte, the number of the
		`bit descriptor table' for J,L, and R modes).
   Bit 7:	On if  ABS mode active -- don't display addresses or 
		ACs as symbols.
   Bits 8-12:	The data mode code -- one of the values described 
		symbolically above.
   Bit 13:	Not only is the value whose adr is RH(this) 
		displayed, but some part of that value is used as an 
		address of another thing to display.  (CTRL1-CRTL2@ was
		used on this guy, for example).  There exists elsewhere
		in DPNT another entry requesting display of that further
		value (see directly below).
   Bit 16:	LH of value word used as address of another word to 
		display, unless bit 17 is also on.
   Bit 17:	If bit 16=0, RH of value word used as address of 
		another, else effective address represented by value 
		word is used.

  Right half:
   Address of the thing being displayed (or pointer to it, see above).

SPNT
   Left half:  \DPNT, first word
   Right half:
	Minus the number of lines currently displayed (changed by the
	I command).  This pointer is used to control systematic searches
	of DPNT and related tables.  Why it is stored swapped is
	probably a function of some clever trick in the code below. 
	(SEE INCR)

DCON
   This array has one entry for each one in DPNT, and one extra for
   SYMPNT.  In it is stored the current DPNT values, after each time 
   the screen is updated.  The screen updater next time through compares
   these saved values to the current ones to detect changed lines.

DDCON
   In this array is stored the current values of the things pointed
   to by DPNT entries.  If a DPNT entry  matches its DCON entry, then
   the current core location value is checked against the saved value in
   the REDISP (screen update) routine, to determine whether changes must
   be made.

These latter two arrays are to be found down around REDISP

CURMOD
   Left half -- `permanent' mode, set by CTRL2<mode>.
   Right half -- `current' mode, set by CTRL1<mode>, reset to permanent
	by [CR] with no argument.
   These modes are in the format described above

LOCOP:	address of currently open location
STPOP:	address of next instruction to be executed 
	(Set by breakpoint or CTRL-X, or CTRL-S)
JAC:	job's ACs are stored here while RAID is running
RAC:	RAID's ACs are stored here while job is running

IFN SORTED,<
BLKVAL, BLKVL1, BLKNAM, BLKNM1, BLKSIZ, SYMBAS, RNGBAS, RNGBS1, etc.,
   are @ pointers to the various areas of the symbol table, see 
   description of table structure. The different versions of the same 
   thing differ only by what AC they have in their index field.
>;SORTED
>;;of IFN 0 [endcomment]
;;	DEFINE %%TITLE <%TITLE(RAID)>

DEFINE %TITLE(VAL) <PRNTOP /ASSEMBLING VAL
/>
%%TITLE

DEFINE %TITLE(VAL) <TITLE VAL>


 