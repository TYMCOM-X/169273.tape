entry intstr,dynamc;
begin "magic sail procedures"

require "<><>" delimiters;
define !=<Comment>;
	require "SYS:GOGTAB.DEF" source!file;
	external integer array gogtab[0:endren];

! definitions of ACs -- shared with SAIL runtimes;
define	a=1,rf='12,lpsa='13,temp='14,user='15,sp='16,p='17;
internal simple string procedure DYNAMC( string str );
! returns a dynamic string EQU to its arg (may be the same as the arg)
;
start!code
	label	nogc,lup;
	external integer strngc;	! SAILs garbage collector;

	skipe	temp,-1(sp);	! null strings need no work;
	 tlzn	temp,-1;	! nor do dynamic strings;
	  popj	p,;		!  string is just fine, return it;

! ***	push	p,a;		! have to save A;
	move	user,gogtab;
	movei	a,(temp);	! get a copy of the length;
	addb	temp,remchr(user);
	jumple	temp,nogc;
	movem	rf,racs+rf(user);	! GC likes to check this;
	pushj	p,strngc;	! go do GC, (gets [A] characters);
nogc:	move	temp,topbyt(user);	! get new base pointer;
	exch	temp,(sp);	! temp_ source bpt, byptr part now set;
lup:	ildb	lpsa,temp;	! read a character;
	idpb	lpsa,topbyt(user);	! copy it into the destination;
	sojg	a,lup;		! and keep copying while strings left;
	hrros	-1(sp);		! mark the result dynamic;
! ***	pop	p,a;		! recover the saved AC;
	popj	p,		! and return;
end;
internal simple string procedure INTSTR
		(
		integer			len;
		reference integer	bufstart
		);
! takes len bytes starting at the first byte in word bufstart and
  transfers them to dynamic string space, returning a string which
  is EQU to constr(len,location(bufstart)).
  If len is negative or zero, null is returned, no checking done to
  make sure that len is small enough (so don't have it too large).
;
start!code
	push	sp,len;
	pop	p,len;
	pop	p,temp;
	hrli	temp,'440700;
	push	sp,temp;
	jrst	dynamc;
end;
simple string procedure constr( integer count, pointer );
start!code
		define a=1, b=2, sp='16, p='17;
	skipl	b,pointer;	! all negatives will be 440700;
	 tlnn	b,'777777;	! convert 0,,loc to byte pointer;
	 hrli	b,'440700;	! since what he gave us was asciz;
	skipg	a,count;
	 setzb	a,b;		! return a null string (len leq 0);
	push	sp,a;		! first push the length;
	push	sp,b;		! then push the byte pointer;
	sub	p,['3000003];
	jrst	@3(p);
end;
end "magic sail procedures"
.
