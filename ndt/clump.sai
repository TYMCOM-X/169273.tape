begin "clump"

define Format!name=cvasc("Clump"), format!version=0, program!version=1;

require "(sailib)sail.def" source!file;
let andthen=and, orelse=or;
define !RBSIZE=5;

!get!module(MAPPING);

simple procedure fatal(string s); usererr(0,0,s);

simple integer procedure addTo( reference integer Vbl; integer toAdd );
! vbl := vbl + toadd;
start!code
	move	1,toAdd;
	addb	1,Vbl;
end;

simple integer procedure Inc( reference integer Vbl );
! vbl := vbl + 1;
start!code
	aos	1,Vbl;
end;

simple procedure tromp( reference integer Vbl );
! write on vbl, but dont change it;
start!code
	exch	1,Vbl;
	exch	1,Vbl;
end;
		! format of "clump" files;
! page 1;
DEFINE	main.Name=0	! name of file format [format!name];
,	main.version=1	! CLUMP format version number [format!version];
,	main.ufn=2	! "unique file number" (max = 2^18-1) ;
			!  AOS and use AOS result for new file;
,	main.namDir=3	! file name directory area descriptor;
			!   area descriptor are: ;
			!	[-length in pages ,, base page number];
,	main.lubDir=4	! LUB (lookup block) directory area descriptor;
,	main.pparea=5	! partial page area descriptor;
,	main.fparea=6	! full page area descriptor;
;

! format of name directory area: (per page);
DEFINE	namdir!maxfls=170	! maximum # of files per namdir page;
,	namdir.entries= 0	! -fileRoomLeft,,number of entries used;
!	UNUSED=1;
,	namdir.names=   2		! vector of sixbit("filename");
,	namdir.count= namdir!maxfls+namdir.names ! vector of ;
					! 0,,# of files w/ this name;
,	namdir.fildat=namdir!maxfls+namdir.count ! vector of ;
					! fileNo,,LUB of "top" file;
;

! LUB pages: ;
DEFINE	lub.storage=0	! -free words,,number of files in this area;
,	lub.lkbPtr=1	! -len,,offset for lookup block area;
,	lub.fsPtr=2	! -len,,offset for file storage area;
,	lub.dscPtr=3	! -len,,offset for file description area;
,	lub.base=4	! place to start using storage;
,	lub!maxfree=512-lub.base+1 ! free words in an empty LUB page;
;
 ! per file (lookup block) ;
DEFINE	lkb.id!size=0	! FileNumber ,, size of entry;
,	lkb.dscI!fsI=1	! offset for file descr,, offset for file store;
			! (descr optional: use 1B0 if none);
,	lkb.nameLink=2	! next file with this NAME ;
			! (lookup offset if same page, ;
			!  -LUB page if on another page, 0=no more);
,	lkb.syblk=3	! here forward: standard system lookup block;
;

 ! per file (file storage)
  +0: -count,,fullPage index of count pages for this file [0 => "hole"]
  +1: -count,,fullPage index of count pages for this file [0 => "hole"]
	...
  +n: FileNumber ,, partial page area page with tail [0 => no tail]

 ! per file (file description) (this section "optional")
  +0: FileNumber ,, # words of file description (7-bit chars)
  +1:... characters of description
;

! partial page area: ;
DEFINE	ppa.storage=0	! -free words,,number of files in this area;
,	ppa.firstFile=1	! offset of the first file in this page;
;
! per file (partial page descr)
  +0: FileNumber ,, number of data words + 1 (dLen)
  +1:+dLen-1:  data words for final page
;
procedure new!nameBlock(safe integer array Page);	! [0:511];
begin
page[namdir.entries] := !XWD(-namdir!maxfls,0);
				! -fileSpaceLeft,,index of first free;
end;
procedure new!Lub(safe integer array Page);	! [0:511];
begin
page[lub.storage] := !XWD(-lub!maxFree,0);
page[lub.lkbPtr] := lub.base; 
page[lub.fsPtr] := 0;
page[lub.dscPtr] := 0;
end;
procedure new!ppa(safe integer array Page);	! [0:511];
begin
page[ppa.storage] := !XWD(2-512,0);
page[ppa.firstFile] := 2;
end;
r!p (map1) procedure createClump( integer channel );
! returns a map record of the control page;
begin
	define nameStart=2, lubStart=4, ppStart=10, fpStart=20;
	r!p (map1) mainPage, nameBase, lubBase;
	integer error;
mainPage := map1cr(0,511);
if 0 > error := getmap( mainPage, "N", channel, 1 )
 then fatal("cannot create main page");

nameBase := map1cr(0,511);
if 0 > error := getmap( nameBase, "N", channel, nameStart )
 then fatal("cannot create first name table page")
 else new!nameBlock(map1:a[lubBase]);
map1:a[mainPage][main.namdir] := !XWD(-1,nameStart);

lubBase := map1cr(0,511);
if 0 > error := getmap( lubBase, "N", channel, lubStart )
 then fatal("cannot create first file description table page")
 else new!Lub(map1:a[lubBase]);
map1:a[mainPage][main.lubdir] := !XWD(-1,lubStart);

map1:a[mainPage][main.version] := Format!version;
! map1:a[mainPage][main.ufn] := 0;
map1:a[mainPage][main.ppArea] := !XWD(0,ppStart);
map1:a[mainPage][main.fpArea] := !XWD(0,fpStart);
map1:a[mainPage][main.Name] := Format!name;
return(mainPage);
end;
procedure fpAreaShuffle( safe integer array Base; integer chan, delta );
	fatal(" fpAreaShuffle is UNIMPLEMENTED ");
procedure ppAreaShuffle( safe integer array Base; integer chan, delta );
	fatal(" ppAreaShuffle is UNIMPLEMENTED ");
procedure lubShuffle( safe integer array Base; integer chan, delta );
	fatal(" lubShuffle is UNIMPLEMENTED ");
procedure addppAreaPage( safe integer array Base; integer chan 
			; r!p (map1) Page );
begin	integer index;
if !RH(Base[main.ppArea]) - (Base[main.ppArea] ash -18) 
   > !RH(Base[main.fpArea]) 
 then fpAreaShuffle(Base,chan,4);
index := 1 - (addTo(Base[main.ppArea], -!XWD(1,0)) ash -18);
if 0 > getmap( page, "N", chan, index + !RH(Base[main.ppArea]) )
 then fatal("Cannot create new Partial Page area page");
new!ppA( map1:a[Page] );
end;
procedure addLubPage( safe integer array Base; integer chan
			; r!p (map1) Page );
begin	integer index;
if !RH(Base[main.lubdir]) - (Base[main.lubdir] ash -18) 
   > !RH(Base[main.ppArea]) 
 then ppAreaShuffle(Base,chan,4);
index := 1 - (addTo(Base[main.lubdir], -!XWD(1,0)) ash -18);
if 0 > getmap( page, "N", chan, index + !RH(Base[main.lubdir]) )
 then fatal("Cannot create new LUB directory page");
new!lub( map1:a[Page] );
end;
procedure addNamePage( safe integer array Base; integer chan
			; r!p (map1) Page );
begin	integer index;
if !RH(Base[main.namdir]) - (Base[main.namdir] ash -18) 
   > !RH(Base[main.lubdir]) 
 then lubShuffle(Base,chan,1);
index := 1 - (addTo(Base[main.namDir], -!XWD(1,0)) ash -18);
if 0 > getmap( page, "N", chan, index + !RH(Base[main.namdir]) )
 then fatal("Cannot create new file name directory page");
new!nameBlock( map1:a[Page] );
end;
IFCR FALSE THENC	obsolete code (dont have to search)
simple integer procedure fsBlock( integer fileId, aobjnPtr );
! look for a particular file Id in the file storage description
! area described by "aobjnPtr".  Return 0 if not found, else 
! -words,,location of first word
;
start!code	define a=1,b=2,c=3,d=4;
		label done, nogo, findit, fileLp, wordLp;
	skipge	b,aobjnPtr;	! if non-negative pointer, not found;
	 jrst	findit;		! else start the search;
nogo:	movei	a,0;
	jrst	done;
findit:	movs	d,fileId;	! get the ID we are looking for;
fileLp:	move	a,b;		! save the beginning of this file;
wordLp:	skipge	c,(b);		! loop forward to the partial page word;
	 aobjn	b,wordLp;	! should still have count, caught below;
	tlc	c,(d);		! see if the LH is the file we want;
	tlne	c,-1;
	 aobjn	b,fileLp;	! not the correct file, do another one;
	jumpge	b,nogo;		! this for both bad blocks and no match;
	subi	b,(a);
	hrli	a,(b);
done:
end;
ENDC
procedure perLub( procedure body; safe integer array Page );
! takes  body(refint# lookBlock, fileStore, descr) and a LUB page
! calls body once per entry in the LUB table page.
! (descr will be 0 iff no descr supplied)
;
begin	integer fileCount, aFile, lookTop, Bases;
fileCount := !RH(page[lub.storage]);

aFile := !RH( page[lub.lkbPtr] );
lookTop := aFile - ( page[lub.lkbPtr] ash -18 ); 

Bases := !RH( page[lub.fsptr] ) + !HL( page[lub.dscPtr] );

while aFile < lookTop
   do begin	integer indices, zero;
	indices := Bases + page[aFile + lkb.dscI!fsI];
	if indices < 0
	 then body(page[aFile], page[!RH(indices)], zero := 0 )
	 else body(page[aFile], page[!RH(indices)], page[!LH(indices)]);
	fileCount := fileCount - 1;
	aFile := !RH(page[aFile]) + aFile;	! assumes lkb.id!size=0;
      end;
if fileCount then usererr(fileCount,1," mismatch on LUB file count ");
end;
procedure perName( procedure body; safe integer array namPage );
! takes  body( reference integer NameIndex )
! calls it once per entry in the name table page.
;
begin	integer index;
for index := !RH(namPage[namdir.entries]) - 1 step -1 until 0
   do body( index );
end;
procedure perPartialPage( procedure body; safe integer array page );
! takes  body(refint# ppWord ) and a partialPage page
! calls body once per entry in the partial page table page.
;
begin	integer index, filesLeft;
index := page[ppa.firstFile];
for filesLeft := !RH( page[ppa.storage] ) step -1 until 0
   do begin
	body( page[index] );
	index := index + !RH( page[index] );
      end;
end;
integer procedure perPage( integer channel, areaPtr, mapOption
		; r!p(map1) ptr
		; procedure body );
! maps in each page in areaPtr with GETMAP option "mapOption",
!  and calls body( map1:a[ptr] ) 	! the data array for the block;
!   once for each page in areaPtr
! returns 0 if successful, GETMAP error code of bad page otherwise
;
begin	integer error;
for areaPtr := areaPtr step !XWD(1,1) until -1
   do if 0 GEQ error := getmap( ptr, mapOption, channel, !RH(areaPtr) )
	 then body( map1:a[ptr] )
	 else return(error);
return(0);
end;
integer procedure addNameEntry( safe integer array Base; integer chan 
				; r!p(map1)Page; integer sixName );
! returns name index on page, possibly page re-mapped, file shuffled 
;
begin	label gotRoom;
	integer index;
	procedure findRoomInPage( safe integer array namePage );
		if namePage[namdir.entries] < 0
		 then begin
			index := !RH( addTo( namePage[namdir.entries]
						, !XWD(1,1) ) )
				- 1;
			GOTO gotRoom;
		      end;
if perPage( chan, Base[main.namDir], "W", Page, findRoomInPage )
 then fatal("Cannot get name page while looking for room");
addNamePage( Base, chan, Page );
findRoomInPage( map1:a[Page] );
fatal("New pages BETTER have room for names");
gotRoom: 
return( index );
end;
integer procedure findName( safe integer array Base; integer chan
			; r!p(map1) Page; integer sixName
			; boolean writing, AddIt );
! return index in Page if name found (or added), -1 otherwise
;
begin "saveFile"
	integer index;
	label found;
	procedure findNameInPage( integer array namePage );
	begin
	    procedure checkName( reference integer nameIndex );
		if sixName = namePage[namdir.names + nameIndex]
		 then begin 
			index := nameIndex;
			GOTO found;
		      end;
	perName( checkName, namePage );
	end;
if perPage( chan, Base[main.namdir], if writing then "W" else "R"
		, page, findNameInPage )
 then fatal("Cannot get name page to find name");
index := if addIt then addNameEntry(Base, chan, Page, sixName) else -1;
found:
return(index);
end;
string procedure makePageSizeList( integer dataChan, topPage
				; reference integer truePageCount );
begin	integer hole, extant;

if topPage > 0
andthen 0 < ( extant := getmap(null!r, "E", dataChan, 1) ) LEQ topPage 
 then begin	string pages;
	hole := getmap(null!r, "H", dataChan, extant);
	if not (0 < hole LEQ topPage) then hole := topPage + 1;
	
	pages := if extant > 1
		 then char!w(1-extant,36) & (hole-extant)
		 else char!w(extant,36);
	truePageCount := hole - extant;
	while hole < topPage
	andthen 0 < (extant := getmap(null!r, "E", dataChan, hole))
		LEQ topPage
	   do begin	integer holeSize;
		holeSize := extant - hole;
		hole := getmap(null!r, "H", dataChan, extant);
		if not (0 < hole LEQ topPage) then hole := topPage + 1;
		pages := pages & -holeSize & (hole-extant);
		truePageCount := truePageCount + hole - extant;
	      end;
	return( pages );
      end
 else begin truePageCount := 0; return( null ); end;
end;
integer procedure storeFullPages( safe integer array base
			; integer clumpChan, fileChan, PageCount 
			; string pages );
if PageCount=0 then return(0) else
begin	own r!p(map1) workPointer;
	integer dataPage, clumpPage, thisBase, run;
thisBase := - (addTo( base[main.fparea], -PageCount lsh 18 ) lsh -18)
		- PageCount;

ClumpPage := thisBase + !RH( base[main.fparea] ) - 1;
dataPage := 0;
while length(pageList)
   do if 0 GEQ run := lop(pages)
	 then dataPage := dataPage - run
	 else for run := run step -1 until 1
	   do begin
		if 0 geq error := getmap( workPointer, "C", 
					fileChan, inc(dataPage))
		 then fatal("cannot COW page from data file");
		tromp( map1:a[workPointer] [0] );
		if 0 geq error := getmap( workPointer, "O", 
					clumpChan, inc(clumpPage))
		 then fatal("can't map page out to CLUMP file");
	      end;

if 0 geq error := getmap( workPointer, "U", 0, 0 )
 then fatal("cannot unmap a page from my own address space?");
return( thisBase );
end;
boolean procedure saveFile( reference integer longLookupBlock
		; integer dataChan; string description
		; safe integer array base; integer Chan; r!p(map1) ph );
! attempts to save the file open on dataChan in clump file base/chan.
  uses record ph for the mapping involved
;
begin "saveit"
	integer blockAddress, dscrWords, ppSize, lkbSize, fileLength; 
	integer FullTableRange, totalFullPages;
	string pageList;
blockAddress := location( longLookupBlock );
for lkbSize := blockAddress + (longLookupBlock land '777)
 step -1 while memory[ lkbSize ] = 0 do;
lkbSize := ((lkbSize - blockAddress) max !RBSIZ) + (1 + 3);
	! insure !RBSIZ included,  1 since starts at 0,  3 for overhead;

dscrWords := if length(description)
		 then 1 + ((length(description)+4) % 5)
		 else 0;
fileLength := memory[ blockAddress + !RBSIZ ];
FullTableRange := (fileLength + '777) ash -9;
if 0 < fileLength land '777 < '601	! reasonable sized partial tail;
andthen getmap(null!r, "E", dataChan, FullTableRange) = FullTableRange 
 then begin				! and last page really exists.;
	FullTableRange := FullTableRange - 1;
	ppSize := 1 + fileLength land '777;
      end 
 else ppSize := 0;

pageList := makePageSizeList( dataChan, FullTableRange, totalFullPages);
if ppSize or length( pageList )
 then begin "make sure we can read it"
	error := getmap( ph, "R", dataChannel, 
			if ppSize then FullTableRange+1 
				  else 1-(0 max -pageList) );
	if 0 > error
	 then begin
		print(crlf&"Cannot read the file!");
		return(false);
	      end;
      end;

if dscrWords + lkbSize + length(pageList) + 1 > lub!maxfree
 then begin
	if lkbSize + length(pageList) + 1 > lub!maxfree
	 then print(crlf & "File specification too complex, not saved")
	 else print( crlf&"Description too big to fit, not saved");
	return( false );
      end;
if totalFullPages - (base[main.fparea] ash -18) GEQ 2^17
 then begin
	print(crlf,"sorry, CLUMP page store size exceeded, not saved"); 
	return(false); 
      end;
begin "really save it"
	integer fileNumber, lastWord, storageBase;
 fileNumber := addTo( Base[main.ufn], 1 );
 if fileNumber land !HL(-1)
  then begin 
	print(crlf,"sorry, file area full, not saved"); 
	return(false); 
       end;
 lastWord := fileNumber lsh 18 + ppsize;
 if ppSize
  then lastWord := write!PartialPage( lastWord, map1:a[ph] );
 storageBase := storeFullPages( base, chan, dataChan, 
				totalFullPages, pageList );

 nameLoc := findName( Base, chan, NamePage, 
			memory[blockAddress+!RBNAM], true, true );
 add!LUB( lkbSize, longLookupBlock, storageBase, pageList, lastWord, 
	description );
end "really save it"
end "saveit";
			!	[-length in pages ,, base page number];
			- totalFullPages + 1;
	getmap(ph,
  +n: FileNumber ,, partial page area page with tail [0 => no tail]
 := fileNumber lsh 18;
	FullTableRange := FullTableRange - 1;
			);
		 then char!w(1-extant,36) & (hole-extant)
	if 0 > error := getmap( ph, "R", dataChannel, fullPageRange+1 )
	 then begin
		error("Cannot read last page of the file!");
		return(false);
	      end;
	lastWord := lastWord + write!PartialPage( ppSize, map1:a[ph] );

  else pploc := 0;
procedure addppAreaPage( safe integer array Base; integer chan 
			; r!p (map1) Page );
procedure addLubPage( safe integer array Base; integer chan
			; r!p (map1) Page );
procedure addNamePage( safe integer array Base; integer chan
			; r!p (map1) Page );
integer procedure addNameEntry( safe integer array Base; integer chan 
				; r!p(map1)Page; integer sixName );

   