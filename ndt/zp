entry makFsm, useFsm, useFst;
begin "fsmcod"

require "{}{}" delimiters;
define eif={else if};
define easy = {fast};

type import TARG = record 
		STR: string; 
		BACK_POINTER,LINK: ^TARG; 
		end;

type STATE = pointer(STATE_VECTOR);
type TRANSITION = record
		MATCH: ^TARG;
		NEXT: STATE;
		end;
type STATE_VECTOR = record
		FATHER: STATE;
		MATRIX: array [char] of TRANSITION
		end;
type FSM = record
		CURRENT_STATE: STATE;
		INITIAL_STATE: STATE_VECTOR;
		end;

type TG = record ( 
		REMAINING_STRING: string; 
		LAST_STATE: STATE;
		BASE: ^TARG;
		LINK: ^TG;
		);

procedure INIT_STATE( IT,FOR_NEXT: STATE );
var C: char;
begin
for C:=char.low to char.high 
   do IT^.MATRIX[C].NEXT := FOR_NEXT;
end;

procedure PULL_UP( IT,BACK: STATE );
var C: char;
begin
for C := char.low to char.high 
   do const IT_R :- IT^.MATRIX[C], BACK_R :- BACK^.MATRIX[C]
	begin 
	if IT_R.NEXT = nil then IT_R.NEXT := BACK_R.NEXT;
	if BACK_R.MATCH <> nil
	 then var MP: ref VECTOR_ELEMENT
		begin
		MP :- IT_R.MATCH;
		while MP <> nil do MP :- MP.NEXT;
		MP := BACK_R.MATCH;
	      end;
      end;
end;

! ADD_CHAR returns true if new state generated
function ADD_CHAR( var IT: STATE; C: char ) ADDED: boolean;
const TRANSIT :- IT^.MATRIX[C].NEXT
begin
ADDED := TRANSIT = nil;
if ADDED then new(TRANSIT);
IT := TRANSIT;
end;

procedure SET_MATCH( IT: STATE; C: char; var WORD: TARG );
const RECOGNITION :- IT^.MATRIX[C].MATCH
begin
WORD.BACKPOINTER := RECOGNITION;
RECOGNITION := WORD;
end;

function NEW_TG( TARGET: ^TARG; BASE_STATE: STATE; LINKAGE: ^TG) X: ^TG;
begin
NEW(X);
with X^ do
      begin
	REMAINING_STRING := TARGET^.STR;
	LAST_STATE := BASE_STATE;
	BASE := TARGET;
	LINK := LINKAGE;
      end;
end;

function SHUFFLE( var T_TREE: ^TARG; var STATE_ZERO: STATE ) COPY: ^TG;
var TOP: ref ^TARG;
var ACTUAL: ^TG;
begin
ACTUAL := nil;
NULLS := nil;
while T_TREE <> nil
   do begin
	if length(TOP^.STR) > 0
	 then begin
		COPY := NEW_TG( TOP, STATE_ZERO, COPY )
		TOP^.BACK_POINTER := nil;
	      end
	 else begin
		TOP^.BACK_POINTER := NULLS;
		NULLS := TOP;
	      end;
	TOP := TOP^.LINK;
      end;
end;

function MAKE_FSM( var TARGET_LIST: ^TARG ) RESULT: FSM;
var MY_TARGET: ^TG
begin
TG := SHUFFLE( TARGET_LIST );
end
