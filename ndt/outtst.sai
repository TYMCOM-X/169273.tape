begin "test bed"
require "OUTCOD.DCL" source!file;

require "(SAILIB)SAIL.DEF" source!file;
let routine=procedure;
define eif="else if";

define #E.BL='100;	! ebcdic blank;

integer routine dec( reference integer variable; integer val(1) );
	return( variable := variable - val );

integer routine inc( reference integer variable; integer val(1) );
	return( variable := variable + val );

string routine chname( integer character );
return(	 if character = #del then "Delete"
	eif character = "\" then "\\"
	eif '40 < character then "'" & character & "'"
	eif character = #sp then "Space"
	eif character = #ht then "Tab"
	eif character = #ff then "FormFeed"
	eif character = #bs then "BackSpace"
	eif character = #lf then "LineFeed"
	eif character = #cr then "Return"
	eif character = #nul then "Nul"
	eif character = #Esc then "Esc"
	eif character <= #ctrl(0+"Z") then "^" & (character + "@")
	else "'\0" & cvos(character + "@") & "'"
	);

string routine cvHex( integer character );
begin	integer i; string r;
if character = 0 then return("0");
for i := 1 step 1 while character land (15 rot -4) = 0 
   do character := character rot 4;
r := null;
for i := i step 1 until 9
   do begin	integer ch;
	ch := "0" + (15 land (character := character rot 4));
	r := r & (if ch <= "9" then ch else ch + ("A"-"9"-1));
      end;
return(r);
end;

integer routine unHex( reference string txt );
begin	integer v, c;
do c := lop(txt)
 until length(txt)=0 or "0" <= c <= "9" or "A"<=c<="F" or "a"<=c<="f";
v := 0;
while true
   do begin "loop"
	if  "0" <= c <= "9"	then v := v lsh 4 + c - "0"
	eif "A" <= c <= "F"	then v := v lsh 4 + c - "A" + 10
	eif "a" <= c <= "f"	then v := v lsh 4 + c - "a" + 10
	else return(v);
	c := lop(txt);
      end "loop";
end;
define	dataClass.target.mask	= '140
,	  dataClass.target.link	= '000
,	  dataClass.target.data	= '040
,	  dataClass.target.2	= '100
,	  dataClass.target.3	= '140
;
string routine sDclass( integer data!class!byte );
begin	integer t, m;
COMMENT ******* Appendix A-1 *******; 

define	dataClass.isData	= '200
! above	dataClass.target.mask	= '140
!	  dataClass.target.link	= '000
!	  dataClass.target.data	= '040
!	  dataClass.target.2	= '100
!	  dataClass.target.3	= '140
;
,	dataClass.isServer	= '020
,	dataClass.isVital	= '010
,	dataClass.meaning.mask	= '007
,	  !Reply.Optional		= '000
,	  !Reply.Required		= '001
,	  !Positive.Reply		= '002
,	  !Negative.Reply		= '003
,	  !Explanatory.Reply		= '004
,	  !Information.Request		= '005
;
t := data!class!byte land dataClass.target.mask;
m := data!class!byte land dataClass.meaning.mask;
return(
	(if data!class!byte land dataClass.isServer
		then "Server: " else "Master: ")
	& (if data!class!byte land dataClass.isData 
		then "Data" else "Command") 
	& " ->"
	& (if t=dataClass.target.link	then "LINK(obsolete)"
	eif t = dataClass.target.data	then "Data"
	eif t = dataClass.target.2	then "pr.2"
	eif t = dataClass.target.3	then "pr.3" else "{??}")
	& (if data!class!byte land dataClass.isVital 
		then " (vital) " else #sp)
	& (case m of (	"Reply.Optional",	"!Reply.Required", 
			"!Positive.Reply",	"!Negative.Reply", 
			"!Explanatory.Reply",	"!Information.Request",
			"?meaning=6?",		"?meaning=7?"))
);
end;
string routine sDheader( reference string dataStream );
begin	integer op, c;
COMMENT ******* Appendix A-2 *******; 
define	dataHeader.opcode.mask	= '340
,	dataHeader.op0.EOR	= '040
,	dataHeader.opx.AsIs	= '040
,	dataHeader.op0.EOF	= '100
,	dataHeader.opx.Zero	= '100
,	dataHeader.op0.EOD	= '140
,	dataHeader.opx.SPACE	= '140
,	dataHeader.opx.COPY	= '200
,	dataHeader.opx.BLANK	= '240
,	dataHeader.count.mask	= '037
;

c := lop( dataStream );
op := c land dataHeader.opcode.mask;
c  := c land dataHeader.count.mask;
if c=0
 then begin
	if op = dataHeader.op0.EOR	then return( "EOR" );
	if op = dataHeader.op0.EOF	then return( "EOF" );
	if op = dataHeader.op0.EOD	then return( "EOD" );
      end
eif op = dataHeader.opx.Zero
 or op = dataHeader.opx.Space
 or op = dataHeader.opx.Blank	then return( 
				(if op=dataHeader.opx.Zero then "Zero"
				eif op=dataHeader.opx.Space then "Space"
				else "Blank") & "*" & cvs(c) )

eif op = dataHeader.opx.Copy	then return( cvs(c) & "*" & 
				(if length(dataStream)=0 then "???" 
					else chname(lop(dataStream))) )
eif op = dataHeader.opx.Copy	then return( cvs(c) & "*" & 
				(if length(dataStream)=0 then "???" 
					else chname(lop(dataStream))) )
eif op = dataHeader.opx.AsIs
	then begin	string quoted, res;
			integer left, ch;
			boolean named;
		quoted := dataStream[1 for c];
		left := length(dataStream) - c;
		dataStream := dataStream[c+1 to inf];
		res := "AsIs(" & cvs(c) & 
			(if left<0 then cvs(left) & "?)" else ")");
		ch := lop(quoted);
		res := res & (if named := not (#sp <= ch < #del) 
				 then chname(ch) else ":""" & lop(ch) );
		while length(quoted)
		   do begin	boolean nextQuoted;
			ch := lop(quoted);
			nextQuoted := (#sp <= ch < #del) and 
				((not named) or (#sp <= quoted < #del));
			if nextQuoted = named
			 then begin
				res := res & (if named
						then "+""" else """");
				named := not nextQuoted;
			      end;
			res := res & (if named then "+" & chname(ch) 
					else ch);
		      end;
		return(if named then res else res & """");
	      end;
return( "undefined data header op:c = '" & cvos(op) & ":" & cvs(c) );
end;
string routine sLinkControl( reference string dataStream ); 
begin	integer ch, op;
COMMENT ******* Appendix A-3 *******; 

define	LinkControl.isYours	= '200
,	LinkControl.op.mask	= '177
,	LinkControl.op.header	= '001
,	LinkControl.op.trailer	= '002
,	LinkControl.op.nonSpec	= '003
,	LinkControl.op.setACK	= '004
,	LinkControl.op.setNAK	= '005
,	LinkControl.op.setRFR	= '006
,	LinkControl.op.setSI	= '007
,	LinkControl.op.setSO	= '010
,	LinkControl.op.Xmt.bits	= '011
,	LinkControl.op.timeout	= '012
,	LinkControl.op.MaxPacket ='013
,	LinkControl.op.Config	= '014
,	LinkControl.op.nameIt	= '015
,	LinkControl.op.PID.range ='016
;

	preset!with	
	"header", "trailer", "nonSpec",  "setACK", "setNAK", "setRFR",
	"setSI",  "setSO",   "Xmt.bits", "timeout", "MaxPacket",
	"Config", "nameIt",  "PID.range";
	own safe string array table[1:LinkControl.op.PID.range];
ch := lop(dataStream);
op := ch land LinkControl.op.mask;
return( "Link Control about "
	& (if ch land LinkControl.isYours then "You" else "Me")
	& " " & (if 0 < op <= LinkControl.op.PID.range 
		 then table[op] else "Unknown op = hex" & cvhex(op))
	);
end;
string routine sApplControl( reference string dataStream ); 
begin	integer ch, op;
COMMENT ******* Appendix A-4 *******; 

define	ApplControl.op.do.send	= '001
,	ApplControl.op.do.receive ='02
,	ApplControl.op.start.xfr ='003
,	ApplControl.op.stop.xfr	= '004
,	ApplControl.op.stop.FTP	= '005
,	ApplControl.op.is.name	= '006
,	ApplControl.op.treatment ='007
,		treatment.replace	= 1 
,		treatment.append	= 2
,		treatment.must.exist	= 3 
,	ApplControl.op.size.bytes='010
,	ApplControl.op.File.type ='011
,		file.type.Bytes		= 1 
,		file.type.Bits		= 2
,		file.type.AST		= 3 
,	ApplControl.op.rec.size	= '012
,	ApplControl.op.size.recs ='013
,	ApplControl.op.Author	= '014
,	ApplControl.op.create	= '015
,	ApplControl.op.update	= '016
,	ApplControl.op.now	= '017
;
preset!with "do send", "do receive", "start xfr", "stop xfr", 
	"stop FTP", "is name", 
	"treatment (1=replace, 2=append, 3=must exist):", 
	"size in bytes",
	"File type (1=Bytes, 2=Bits, 3=AST):", 
	"rec size", "size recs", "Author",
	"created", "last update", "now";
	own safe string array table[1:ApplControl.op.now];
ch := lop(dataStream);
return( "Application Control "
	& " " & (if 0 < ch <= ApplControl.op.now
		 then table[ch] else "Unknown op = hex " & cvHex(ch))
	);
end;
INTERNAL procedure x!packet( string packet );
! called by the buffering system.;
if length(packet)=0 then print("<<flush>>" & crlf ) else
begin	integer dataClass;
print( crlf, cvHex(dataClass := lop(packet)), 
	" => ", sDclass( dataClass ) );

while length(packet) 
   do begin
	print( crlf & #ht, cvHex(packet), ": " );
	if dataClass land dataClass.target.mask = dataClass.target.data
		then print( sDheader( packet ) )
	eif dataClass land dataClass.target.mask = dataClass.target.link
		then print( sLinkControl( packet ) )
	eif dataClass land dataClass.target.mask = dataClass.target.2
		then print( sApplControl( packet ) )
	eif dataClass land dataClass.target.mask = dataClass.target.3
		then print( " ", cvHex(lop( packet )) )
	else print( "(Law of the excluded middle?)" );
      end;
end;
routine go(integer target(0) );
begin	string s;
while true
   do begin "line"	integer brk;
	print(crlf);
	do print( "To ", cvHex(target), ": ") until length(s:= inchwl);
	brk := !skip!;
	if kequ("exit",s) then begin end!buffer; return; end
	eif s = "=" then s!Data( s[2 to inf], target ) 
	eif s = "!" then setprint(s[3 to inf], s[2 for 1])
	eif s = "*" then end!buffer
	eif s = """" then begin integer ch,q; 
			lop(s);
			if length(s)
			 then begin 
				q := lop(s);
				while length(s) 
				   do if q = (ch := lop(s))
					then continue "line"
					else sendOne( ch, target );
				sendOne( brk, target );
			      end
			 else q := inchrw; 
			while q neq ch:=inchrw do sendOne( ch, target );
			print(crlf);
			end
	eif s = "/" then while length(s) do sendOne( unHex(s), target )
	eif s = "@" then target := cvd(s[2 to inf])
	eif kequ(s,"EOR") then s!EOR(target)
	eif kequ(s,"EOF") then s!EOF(target)
	eif kequ(s,"EOD") then s!EOD(target)
	eif kequ(s,"BAIL") or kequ(s,"DDT") then usererr(0,1,s,s)
	else print("
* to flush, "" to spew to a matching quoting character. (eg: ""/frog/)
!b<file> to record output, !t to report just to terminal, ...=setprint
/ <hex characters>, =<data>, @<new target>
BAIL, EXIT, EOD, EOR, or EOF
");   end;
end;


! MAIN PROGRAM
print("Hi");
go(0);
end
.
routine dataPacket( integer dataHeader; string body );
begin
end;

routine sendAsIs( string dataLine );

routine sendDATA( integer Data!SubClass!index; string dataLine );
begin

define	dataHeader.opcode.mask	= '340
,	dataHeader.opx.AsIs	= '040
,	dataHeader.opx.Zero	= '100
,	dataHeader.opx.SPACE	= '140
,	dataHeader.opx.COPY	= '200
,	dataHeader.opx.BLANK	= '240

,	dataHeader.count.mask	= '037
;

end;
routine sendDATA( string Data!SubClass; string dataLine );
begin
while out!pending!PID
   do begin "get last packet out"
		integer i;
	for i:=1 step 1 until 4
	   do begin 
		one!packet; 
		if out!pending!PID=0 then done "get last packet out";
	      end;
	sendRFR; one!packet;
	if out!pending!PID
	 then print(crlf,"Resending: ", out!pending!buf, crlf );
      end;
out!pending!PID := outBound!pid!sent;
pid!increment( out!pending!PID );
out!pending!buf := outBound[#header] 
	& do!encode( outBound[#data!PTC] & out!pending!pid 
			& data!SubClass & dataLine )
	& outBound[#trailer];
while not pid!in!range( out!pending!PID,
		outBound!pid!all!good, outBound!pid!top!allowed )
   do begin sendRFR; one!packet; end;
print( out!pending!buf );
if assumeAck then out!pending!PID := 0;
pid!increment( outBound!pid!sent ); 
end;
?routine send!file!description( string file );
?	sendIT( "<<File: ", file );

routine enter!ftp;	print("<<FTP on>>" & crlf);
routine end!ftp;	print("<<FTP off>>" & crlf);

routine sendEORs( integer n );
    for n := n-1 step -1 until 0 do sendEOR;

routine send.partial.Ast.Line( string partial.line );
	sendDataStream( partial.line );

routine send.final.Ast.Line( string partial.line );
	begin sendDataStream( partial.line ); sendEOR; end;

routine send.Ast.Record( string full!line );
	begin sendDataStream( full!line ); sendEOR; end;

routine sendBIN( string filename );
	usererr(0,1, "BINARY and a PDP-10, surely you jest!" & crlf );
simple string procedure clip( string s );
begin!code	define r.ptr=1,r.len=2,r.ch=3, r.tmp=4;
		label wexit, ploop, white, wloop;
	move	r.ptr,0(sp);
	jumpg	r.len,ploop;
	popj	p,;		! special case: null string;

 wexit:	addm	r.tmp,-1(sp);	! shorten result string by whitecount;
	popj	p,;

 white:	movni	r.tmp,(r.len);	! save -chars left in string ;
	sojle	r.len,wexit;	! (counting this whitespace character);
				! loop over white chars till end or prt;
 wloop:	ildb	r.ch,r.ptr;
	caie	r.ch,'40;	! space;
	 cain	r.ch,'11;	! or tab;
	  sojg	r.len,wloop;
	jumple	r.len,wexit; 	! if stopped due to length, go clip;

 ploop:	ildb	r.ch,r.ptr;	! first loop: while printing(lop) do;
	caie	r.ch,'40;	! space;
	 cain	r.ch,'11;	! or tab;
	  jrst	white;		! whitespace seen, next loop;
	sojg	r.len,ploop;
	popj	p,;		! ended with printing, no change;
  end;	
    