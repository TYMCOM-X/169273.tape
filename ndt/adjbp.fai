;ALNADJ: assume normal BytesPerWord (often: left- or right- justified)
;  0: full ADJSP simulation
;LEFADJ: assume (forces) left-justified bytes in word
;
;define	assume#normally#aligned="(adjubp#style<0)",
;	know#same#bytes#per#word="(abs adjubp#style=1)",
;	dynamic#alignment#style="(adjubp#style=2)";
entry CHKBYP
title	chkbyp

;;SAIL decl: BOOLEAN PROCEDURE CHKBYP( INTEGER BYPTR );
;;	! returns true if byte pointer is "bad"

P==17		;the (standard) stack pointer
WRD==1		;holds position field
SIZ==13		;holds the byte siz
define A.BYP <-1(P)>	;byte pointer argument

CHKBYP:
	LDB	WRD,[POINT 6,A.BYP,05]	;get the position field
	CAILE	WRD,=36		; and make sure it points somewhere
	 JRST	BAD		; P-field is over-extended (before BOW)
;;WRD holds number of bits remaining in base word
	LDB	SIZ,[POINT 6,A.BYP,11]	;get the size field
	JUMPE	SIZ,BAD		; bytes better have some size

	CAIG	SIZ,(WRD)	; if enough bits are left in EFF for
	 JRST	GOOD		; one byte, then the pointer is OK
				; IBP(byptr) is a byte in this word
	ADDI	SIZ,(WRD)
	CAIG	SIZ,=36		; if (bits left)+(byte size) leq 36
				; then byptr is is a byte in this word
GOOD:	 TDZA	1,1;
BAD:	  SETO	1,;
	SUB	P,[XWD 2,2]	;canonical SAIL exit
	JRST	@2(P)
PRGEND
entry SETADJ
title SETADJ

;;SAIL decl: PROCEDURE SETADJ(INTEGER UUONUM);
;;	Sets up specified opcode to do "ADJBP" uuo (simulate KL IBP a,x)
;;	Call with -1 to remove UUO (1:'15 currently in use by SAIL)

P==17		;PDL
SIZ==13
BPW==14
ALN==BPW+1
WRD==1
BYT==WRD+1
opdef err.= [(5000)]
extern .JBUUO,.UUOCN

LNKUUO:	0	;holds opcode for next UUO handler
ADJOPC:	-1	;opcode must match this for handler to do it.

SETADJ:	skipg	1,-1(P)
	 jrst	remuuo
	move	2,[jrst simcal]	;the instruction to execute
	exch	2,.UUOCN	;former UUO handler
	came	2,.UUOCN	;was it the same
	 movem	2,lnkuuo	;another handler yet, save for chain
setxit:	exch	1,adjopc
	sub	p,[xwd 2,2]
	jrst	@2(p)

remuuo:
	move	2,lnkuuo	;were we chained?
	camn	2,[jrst simcal]	;note: identical garbage, remove it
	 setz	2,		;  this is not really a handler
	setzm	lnkuuo		;clear saved handler
	movem	2,.UUOCN	;and put it back
	jrst	setxit	


SIMCAL:	PUSH	P,0	;save an AC
	PUSH	P,1	;save another AC
	MOVE	0,@.JBUUO	;pick up contents of effadr before ACs
	LDB	1,[POINT 9,.JBUUO,8]	;get uuo code
	CAMN	1,ADJOPC	;check for adj opcode
	 JRST	ADJSRV		;do it
	SKIPN	LNKUUO		;some other UUO handler?
	 jrst	[push p,.JBUUO
		err.  1,[asciz / Unknown UUO/]
		pop   p,.JBUUO
		jrst  .+1]
	POP	P,1
	POP	P,0
	SKIPE	LNKUUO		;some other UUO handler?
	 XCT	LNKUUO		;yes, go do it
	POPJ	P,		;and leave

ADJSRV:		;0 has contents of effaddr (byte pointer to increment)
	LDB	1,[POINT 4,.JBUUO,12]	;get AC number used in call
	JUMPE	1,[		;oops -- error -- ADJBP with ac=0
		   push	p,.JBUUO	;since we replace it
		   err.	1,[ASCIZ /Error: attempt to ADJBP with AC 0/]
		   pop	p,.JBUUO
		   jrst	.+1
		  ]
	CAIG	1,1	;is the ac "On the stack"?
	 ADDI	1,-1(P)	;get address to put result down in (AC)
	PUSH	P,1	;save the address
	MOVE	1,(1)	;get initial ac contents (amount to move BYP by)
;Now: save acs and call procedure
;Note: 1 already saved, gets result, ... so no WRD
	PUSH	P,BYT	;will be munged by procedure 
	PUSH	P,SIZ	;will be munged by procedure 
	PUSH	P,BPW	;will be munged by procedure 
	PUSH	P,ALN	;will be munged by procedure 
	PUSH	P,BYT	;will be munged by procedure 

	PUSH	P,1	;Arg: [ac] amount to adjust byte pointer
	PUSH	P,0	;Arg: [eff addr] base byte pointer
printx /fix name soon/
external alnadj
	PUSHJ	P,ALNADJ	;go perform the dastardly deed
;Now restore those mangled ACs
	POP	P,BYT	;was munged by procedure 
	POP	P,ALN	;was munged by procedure 
	POP	P,BPW	;was munged by procedure 
	POP	P,SIZ	;was munged by procedure 
	POP	P,BYT	;was munged by procedure 
;Note: 1 already saved, gets result, ... so no WRD

	MOVEM	1,@(P)		;put away the result
	POP	P,1		;throw away result address
	POP	P,1		;get old AC1
	POP	P,0		;get old AC0
	POPJ	P,		;and leave

prgend
entry ALNADJ
title alnadj

;;SAIL decl: INTEGER PROCEDURE ALNADJ(INTEGER DELTA, BYPTR);
;;	simulation of "adjust byte pointer" instruction, assumes aligned
;; on a KL:	move 1,delta;  ibp 1,byptr;

;;! register contents:
SIZ==13		;holds the byte size, (possibly only RH ok)
BPW==14		;has the number of bytes per word
ALN==BPW+1	;is the "alignment" (but measured from the right)
		; ie it is the lost low-order bits in a word
WRD==1		;is the number of words to change the bytepointer by
BYT==WRD+1	;is the location of the byte within its word
P==17		;the (standard) stack pointer

define A.INC <-2(P)>	;number of bytes to adjust byte pointer by
define A.BYP <-1(P)>	;byte pointer argument

ALNADJ:		;;Adjust byte pointer assuming ""Normal" alignment
	LDB	SIZ,[POINT 6,A.BYP,11]	;get the size field
	LDB	WRD,[POINT 6,A.BYP,05]	;get the position field
	IDIVI	WRD,(SIZ)	;WRD_ whole bytes "following" current byte
				;byt_ count of trailing free bits
	SUB	WRD,A.INC	;wrd_ bytes "before" last byte of word
; now figure out bytesPerWord and actual alignment
	HRRZI	BPW,=36
	IDIVI	BPW,(SIZ)	;bpw_ bytes per word (unless aberrant)
				;aln_ free bits if BPW bytes in a word
				;	(all at LSB end if "normal")
;;*** note: LH(SIZ) used as un-cleared temp here ***
;;Simplifications: 
;;if assume argument is "normal", drop next 3 (main) instructions
;;if "Force left-alignment", drop next 2 (main) instructions
	CAIE	BYT,(ALN)	;if bytes are neither left-aligned
	 JUMPN	BYT,[		;  nor right-aligned, check BPW
			; BPW may be 1 too big (eg point 18,eff,23)
		HRLI	SIZ,(BPW) ;*save current idea of bytes per word*
		LDB	BPW,[POINT 6,A.BYP,05]	;get the position field
		HRROI	BPW,-=36(BPW)	; find out wasted leading bits
		IDIVI	BPW,(SIZ)	;(negated for 36-n calculation)
		SUBM	BYT,ALN		; wasted leading+trailing bits
		HLRZ	BPW,SIZ	;*recover original idea of bytes/word*
		CAIL	ALN,(SIZ)	; did we waste an entire byte?
		 SOJA	BPW,.+1		;	yes, reduce byte total
		JRST	.+1		;finally have BPW right
		]
	MOVEI	ALN,(BYT)	; use alignment derived from original
;;end of code for alignment
	IDIVI	WRD,(BPW)	; wrd_ words to adjust by,
				; byt_ bytes to adjust by
	JUMPL	BYT,[		; but since remainder is not modulo, 
		    ADDI BYT,(BPW)	;we must force remainder GEQ 0
		    SOJA WRD,.+1]	;keep the dividend consistent
	MOVN	WRD,WRD		;since we are going backwards

	ADD	WRD,A.BYP	;add in original
	HLL	WRD,A.BYP	; effaddr part might go -1(2) to 0(3)
	IMULI	BYT,(SIZ)	; convert bytes to bits
	ADDI	BYT,(ALN)	; and bump by tail-bit count
	DPB	BYT,[POINT 6,WRD,05]	;set the position field

	SUB	P,[XWD 3,3]	;canonical SAIL exit
	JRST	@3(P)
prgend
entry UUOADJ
title UUOADJ

;;! register contents:
..0==0;WRD==0	;is the number of words to change the bytepointer by
..1==1;BYT==WRD+1 ;is the location of the byte within its word
..2==2;SIZ==2	;holds the byte size, (possibly only RH ok)
..3==3;BPW==3	;has the number of bytes per word
..4==4;ALN==BPW+1 ;is the "alignment" (but measured from the right)
		; ie it is the lost low-order bits in a word
P==17		;the (standard) stack pointer

define A.INC <-2(P)>	;number of bytes to adjust byte pointer by
define A.BYP <-1(P)>	;byte pointer argument
extern .JBUUO

	push	p,..0
	push	p,..1
	move	..0,@.JBUUO	;*initial byte pointer*[effaddr]*
UUOADJ:		;;Adjust byte pointer assuming ""Normal" alignment
	PUSH	P,..2
	PUSH	P,..3
	PUSH	P,..4
	push	p,..0		;*initial byte pointer*[effaddr]*
	ldb	..1,[point 4,.JBUUO,12]	;get ac number
	caile	..1,..4			;is "really" on stack?
	 addi	..1,-5(p)		;yes, then change "address"
	push	p,..1			;save (arg and result loc)

	LDB	..2,[POINT 6,A.BYP,11]	;get the size field
	LDB	..0,[POINT 6,A.BYP,05]	;get the position field
	IDIVI	..0,(..2)	;..0_ whole bytes "following" current byte
				;..1_ count of trailing free bits
	SUB	..0,@(P)	;..0_ bytes "before" last byte of word
; now figure out bytesPerWord and actual alignment
	HRRZI	..3,=36
	IDIVI	..3,(..2)	;..3_ bytes per word (unless aberrant)
				;..4_ free bits if ..3 bytes in a word
				;	(all at LSB end if "normal")
;;*** note: LH(..2) used as un-cleared temp here ***
;;Simplifications: 
;;if assume argument is "normal", drop next 3 (main) instructions
;;if "Force left-alignment", drop next 2 (main) instructions
	CAIE	..1,(..4)	;if bytes are neither left-aligned
	 JUMPN	..1,[		;  nor right-aligned, check ..3
			; ..3 may be 1 too big (eg point 18,eff,23)
		HRLI	..2,(..3) ;*save current idea of bytes per word*
		LDB	..3,[POINT 6,A.BYP,05]	;get the position field
		HRROI	..3,-=36(..3)	; find out wasted leading bits
		IDIVI	..3,(..2)	;(negated for 36-n calculation)
		SUBM	..1,..4		; wasted leading+trailing bits
		HLRZ	..3,..2	;*recover original idea of bytes/word*
		CAIL	..4,(..2)	; did we waste an entire byte?
		 SOJA	..3,.+1		;	yes, reduce byte total
		JRST	.+1		;finally have ..3 right
		]
	MOVEI	..4,(..1)	; use alignment derived from original
;;end of code for alignment
	IDIVI	..0,(..3)	; ..0_ words to adjust by,
				; ..1_ bytes to adjust by
	JUMPL	..1,[		; but since remainder is not modulo, 
		    ADDI ..1,(..3)	;we must force remainder GEQ 0
		    SOJA ..0,.+1]	;keep the dividend consistent
	MOVN	..0,..0		;since we are going backwards

	ADD	..0,A.BYP	;add in original
	HLL	..0,A.BYP	; effaddr part might go -1(2) to 0(3)
	IMULI	..1,(..2)	; convert bytes to bits
	ADDI	..1,(..4)	; and bump by tail-bit count
	DPB	..1,[POINT 6,..0,05]	;set the position field

	pop	p,..2		;get address to put result to
	movem	..0,(..2)	;store result
	pop	p,..0		;clear stack of initial Byte Pointer
;;	jrst	retm	;uuo return for SAIL:
	 pop	p,..4
	 pop	p,..3
	 pop	p,..2
	 pop	p,..1
	 pop	p,..0
	 popj	p,
end

    