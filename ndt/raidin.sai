begin "raidin"
require "(SAILIB)SAIL.DEF" source!file;
! Plunk a raidxx into another frame's core image.
  Optionally, create the frame first.
;

define	!FOCON='25, !FOHST='23, !FODFH='13, !FOCFH='12, 
	!FOREP=7, !FORPC=6, !FOHLT=5; 
! frame descriptors:;
define	FD!ABS=0, FD!FAM=1, FD!OTF=2, FD!CRH=3, FD!SLF=4, 
					CH!FRM=0, CH!PRO=1, CH!LIC=2, 
	CREATED!HANDLE	= FD!CRH*!bit(20),  
	OTHER!FRAME	= FD!OTF*!bit(20),
	MYSELF		= 7*!BIT(20); 
! access rights:;
define	!arRDM='0,!arCHM='1,!arRAC='2,!arWAC='3,!arVAR='4,!arVAW='5,
	!arHLT='6,!arSTP='7,!arHNG='10,!arCLR='11,!arSVA='12,
	!arSAA='13,!arRVA='14,!arRAA='15,!arRUN='16,!arRDS='17,
	!arRAD='20,!arRFI='21,!arRPI='22,!arSMF='23,!arWAK='24,
	!arATT='25,!arDET='26,!arTKP='27,!arGVP='30,!arGVC='31;

! gettab tables:;
define	!GTUNM=-'22, !GTUN1=-'21, !GTSTS='0, !GTNAM='3;
define !CHMFP='35, !CHLK='4, !FORVA=2, !FOWVA=3, !FOCFM=1, !FOGET='32,
	CALLI!SETOTF=-'126, CALLI!RETACH=-'135, CALLI!VCLEAR=-'66, 
	CALLI!LOGOUT='17; 
integer colonBreak;
simple procedure setupBreaks;
	setbreak(colonBreak_getbreak,":",null,"IS");
require setupBreaks initialization;

let routine=procedure;

boolean simple procedure confirm(string what);
while true do begin integer ch; print(what); 
  if ("y" = ch_('40 lor (0+inchwl))) or "n"=ch then return("y"=ch);
  print("Type either Yes or No" & crlf );
end;

boolean simple procedure writeOther(integer loc, val );
start!code move 1,[!xwd(!FOWVA, other!frame)]; 
	frmop 1,loc; tdza 1,1; movei 1,-1; end;

boolean simple procedure readOther( integer loc; reference integer val);
start!code move 2,[!xwd(!FORVA, other!frame)]; setom val; move 0,loc;
	frmop 2,0; tdza 1,1; exch 1,val; end;

simple string procedure waituser; 
    begin!code ttcall 16,0+#sp; push sp,[0]; push sp,[0]; popj p,; end;
boolean procedure makeppn( reference integer pUser );
begin	preset!with 3,0-0,-1,0; own integer array exl[0:3];
	integer ch;
exl[1]_ pUser; 
open(ch_getchan,"DSK",'17, 0,0, 0,0,0);
chnior( ch, exl[0], !chlk );
release(ch);
pUser_ exl[1];
return( !lh(pUser) neq 0 );
end;
boolean procedure splitFile(integer array runBlk; string fileName);
begin	string device;
	integer brk;
device_ scan(fileName,colonBreak,brk);
if brk neq ":" then begin fileName_ device; device_ "DSK"; end;
runblk[0]_ 5;
runblk[1]_ cvsix(device);
runblk[3]_ cvfil( fileName, runblk[4], runblk[2] );
if !skip! then return(false);
runblk[5]_ 0;
if 0 < runblk[2] < !hl(1) then return( makeppn(runblk[2]) );
return(true);
end;
simple boolean procedure FRMOPR( integer opcode, frame;  
				reference integer arg, result );  
start!code
	hrlz	2,opcode;
	hrr	2,frame;
	frmop	2,arg;
	 tdza	1,1;
	 hrroi	1,-1;
	movem	2,result;
end;

simple boolean procedure FRMOPV( integer opcode, frame, arg;
				reference integer result );  
start!code
	hrlz	2,opcode;
	hrr	2,frame;
	frmop	2,arg;
	 tdza	1,1;
	 hrroi	1,-1;
	movem	2,result;
end;

boolean routine makeHandle( integer frame; 
				reference integer handle );
	begin	preset!with 
		!XWD(CH!LIC,'077777) + CREATED!HANDLE, 0;
		own safe integer array typeAndRights[0:1];
	if frame = call(0,"PJOB") then return(false);
	return( FRMOPR( !FOCFH, frame, typeAndRights[0], handle ) );
	end;

boolean routine destroyHandle( reference integer handle );
if FRMOPV( !FODFH, handle, 0, !skip! )
 then begin handle := 0; return(true) end
 else return(false);

integer routine readPC( integer handle );
	begin	integer pc;
	if frmopr( !FORPC, handle, pc, !SKIP! )
	 then return(pc) else return(-1);
	end;

integer routine readAc( integer ac, handle );
	if frmopr( !FORVA, handle, ac, !SKIP! )
	 then begin !SKIP!:=0; return(handle) end else return(-1);
string routine HaltStatus( integer code, device, dw1, dw2 );
begin	integer subCode;
subCode := !RH(code);
code := !LH(code);
return( case code of (
   [0] case subCode of (
	[0] "PC out of bounds",
	[1] "Illegal Memory Reference",
	[2] "Write Violation",
	[3] "Address check for device " & CV6STR(device) & ":",
	[4] "Illegal Memory Reference in UUO",
	[5] "Illegal Interrupt address",
	[6] "Address break",
	[7] "PDL overflow",
	[ELSE] "unknown Memory Violation #" & cvs(subCode)), 
   [1] case subCode of (
	[0] "Page I/O error",
	[1] "Disk full during copy of COW page",
	[2] "Paging Hardware Error",
	[3] "Too many pages locked, Cannot handle fault",
	[4] "Context Page I/O Error",
	[5] "Parity Error(s). All core removed",
	[ELSE] "unknown System-related Error #" & cvs(subCode)), 
   [2] (case subCode of (
	[0] "Cannot do Input on Output",
	[1] "Cannot do Output on Input",
	[2] "Illegal data mode for",
	[2] "Illegal data mode for",
	[ELSE] "unknown Error #" & cvs(subCode) & " for")
       ) & " device " & CV6STR(device) & ":",
   [3] case subCode of (
	[0] "Illegal UUO",
	[1] "UUO error",
	[2] "Illegal instruction",
	[3] "Halt",
	[ELSE] "unknown Illegal instruction trap #" & cvs(subCode)),
   [4] case subCode of (
	[0] "Exit",
	[1] "Exit 1,",
	[2] "Fail Exit",
	[3] CV6STR(device) & ":" & CV6STR(dw1) & " setup",
	[4] CV6STR(device) & ":" & CV6STR(dw1) & " saved",
	[5] "Frame cleared",
	[ELSE] "unknown Frame exit #" & cvs(subCode)),
   [5] case subCode of (
	[0] "Transmission Error",
	[1] "N pages required, N=" & cvs(dw1),
	[2] "Device " & CV6STR(device) & ": not available ",
	[3] "file " & CV6STR(device) & ":" & CV6STR(dw1) 
		& "." & CV6STR(dw2) & " not found ",
	[4] "file " & CV6STR(device) & ":" & CV6STR(dw1) 
		& "." & CV6STR(dw2) & " not a Save File",
	[5] "file " & CV6STR(device) & ":" & CV6STR(dw1) 
		& "." & CV6STR(dw2) & " attempt to ENTER failed",
	[6] "Core Argument not specified for magtape " 
		& CV6STR(device) & ":",
	[7] "Magtape Hiseg format bad on " & CV6STR(device) & ":",
	[8] "REMAP UUO error",
	[9] "Magtape GET failure on " & CV6STR(device) & ":",
	[10] "No Start Address",
	[ELSE] "unknown RUN, RUNSEG, or GETSEG error #" & cvs(subCode)),
   [ELSE] "unknown halt code " & cvs(code) & "/" & cvs(subCode))
);
end;
string routine showPC( integer pc );
	return("'" & cvos(!LH(pc)) & ",," & cvos(!RH(pc)) );

string routine readHSB( integer handle );
begin	preload!with 7;
	own safe integer array HSB[0:7];
return( if frmopr( !FOHST, handle, HSB[0], !SKIP! )
 then "Last Halt (" & cvs(HSB[2]) & "):" 
	& HaltStatus(HSB[1], HSB[5],HSB[6],HSB[7])
	& " at " & showPC(HSB[3]) 
	& " last UUO at " & showPC(HSB[4]) 
 else "Cannot read HSB"
);
end;
simple integer procedure gettab( integer index, table );
begin	integer result;
result := call( !xwd(index,table), "GETTAB" );
return( if !skip! then result else -1 );
end;

string procedure readuser( integer frame );
	return( cv6str( gettab(frame,!gtunm) ) 
		& cv6str( gettab(frame,!gtun1) ) );

string procedure readprogram( integer frame );
	return( cv6str( gettab(frame,!gtnam) ) );
string lastUser, lastProgram;

routine showStatus;
print( crlf & " user ", lastUser := readuser( other!frame ),
	" running ", lastProgram := readprogram( other!frame ), 
	", PC = ", showPC( readPC( other!frame ) ),
	crlf & "  ", readHSB( other!frame ), crlf&crlf );
integer jobHandle;

integer routine makeOtherFrame( string jobName );
begin		integer result, handle, job;
if job_ cvd(jobName) 
 then if makeHandle( job, handle ) then else return( false )
 else begin		preset!with 5,cvsix("DSK"),0,0,0,0;
			own integer array runBlk[0:5];
	if not splitFile(runBlk, jobName)
	 then begin print(jobName, " isn't a file."); return(false) end;
	if FRMOPV( !FOCFM, 0, 0, handle )
	 then print("New frame: ", handle, ": ")
	 else begin print("No new frame"&crlf); return(false) end;
	FRMOPR( !FOGET, handle, runBlk[0], !skip! );
      end;
jobHandle := handle;
calli( handle, calli!setotf );
if !skip!
 then begin
	showStatus;
	if -1=readAc(1,other!Frame) and !skip! neq 0
	 then print("Sorry, can't even read Ac 1" & crlf)
	 else if confirm( "Is " & lastUser & "'s job " 
			& cvs(job) & " [" & lastProgram 
			& "] the frame you want to RAID?" & -1 )
	       then return( true );
      end
 else print("Cannot set it up as my `other frame'." & crlf);
destroyHandle(jobHandle);
return(false);
end;
COMMENT
How to build RAID70 (or any similar RAID)
.COMPILE 10K.FAI, DUMP.REL=RAID.SAI 
.RUN LINK
*DUMP/SYSLIB
{now if is to be above 400000 (?high segment?), (at 701000) do: }
*/SEGMENT:HIGH 10k,10k,10k,10k /NEWPAGE:HIGH /COUNTERS
		{Should say .HIGH. is 501000}
{repeat the above until .HIGH. is in the right place (loc+1000)}
{for 701000: }
	*/SEGMENT:HIGH 10k,10k,10k,10k /NEWPAGE:HIGH /COUNTERS
		{Should say .HIGH. is 601000}
	*/SEGMENT:HIGH 10k,10k,10k,10k /NEWPAGE:HIGH /COUNTERS
		{Should say .HIGH. is 701000, all set}
*/SEGMENT:HIGH RAID /EXECUTE/GO
{the lowseg works similarly, but use HIGH where LOW used above, and
	you have to check the counters (size of DUMP varies)}

Then you get some garf, asked for the file name, and file is written
;
COMMENT locations in first page of RAID70 and friends
page+0: !jbddt	    page+1: .PRCW+pageCount,,pageNo	 page+2: 2
page+3: DDT:    SETZM ?????
page+4: DDT-1:  $SBP	page+5: DDT-2:  $RBP	page+6: DDT-3:  $M
page+7: DDT-4:  $IO	page+8: DDT-5:  $1B	page+9: DDT-6:  $I
page+A: DDT-7:  $C	page+B: DDT-10: DDTEND	page+C: DDT-11: $BGDDT
page+D: DDT-12: $RPTCN
;
integer array RaidBuf[0:13];

simple string procedure buffer!problem;
begin	integer i, l, u;
l_ RaidBuf[12]; u_ RaidBuf[11];
if !rh(raidBuf[1]) lsh 9 > l
or !rh(raidBuf[1]) + (raidBuf[1] lsh -18 land '1777) < u lsh -9
 then return("RAID not entirely encompassed by mapping");
if not l < !rh(raidBuf[0]) < u
 then return("Raid start not within Raid bounds");
for i_ 4 step 1 until 10,13
  do  if not l < RaidBuf[i] < u
	 then return("Parameter " & cvs(i) & " not inside RAID.");
return(null);
end;
integer procedure findRaid;
begin	integer ch, eof;
	string file;
open(ch_getchan,"DSK",'10017, 0,0, 0,0,eof_0);
while true
   do begin	boolean flag;
		string why;
	print("What file has the RAID?: ");
	lookup(ch,file_inchwl,flag);
	if flag
	 then begin
		print("Sorry, Cannot read ", file, " because ",
			case !rh(flag) of ([0]"File not found",
			[1]"Invalid directory", [2]"Protection Failure",
			[6]"Transmisson error", ['14]"No room",
			[ELSE]"System LOOKUP error '"& cvos(!rh(flag))),
		    ".  Please try again" & '15 & '12);
		continue;
	      end;
	arryin( ch, RaidBuf[0], 14 );
	if eof then print(file, " is not a RAID stub: too short" & crlf)
	 else if length( why_ buffer!problem )
		 then print(file, " is not a RAID stub: ", why, crlf)
	 else return(ch);
      end;
end;
boolean procedure mapIt( integer ch );
begin	boolean flag;
RaidBuf[1]_ Raidbuf[1] lor (1 rot -2);	! into other frame;
flag_ CHNIOR( ch, Raidbuf[1], !CHMFP );
if !skip! then begin print("Set!"); release(ch); return(true); end;

print("Mapping failure on page ", !lh(flag) + 1 - !rh(Raidbuf[1]),
	" of RAID (core page '", cvos(!lh(flag)), "): ",
	case !rh(flag) of ([0]"Zero count", [1]"Bad page ", 
		[2]"Bad protection", [3]"Page already exists",
		[5]"Page limit exceeded", [6]"Disk full",
		[ELSE]"System MAP error '" & cvos(!rh(flag))),
	"." & crlf );

if !lh(flag)=!rh(Raidbuf[1]) then return(false);

flag_ calli( (1 rot -2) + !hl(!lh(flag)-!rh(Raidbuf[1]))
			+ !rh(Raidbuf[1]), calli!vclear );

if !skip!
 then print("Ok, cleared it." & crlf)
 else print("Cannot clear pages: error: =", 
		!lh(flag), ",,'", cvos(!rh(flag)), crlf);
return(false);
end;
	external integer !jbddt;
	boolean dologout;
	integer raidFile, error, hisDdt;
	preset!with !xwd(myself,other!frame), (2 rot -3) lor '777777;
		own safe integer array retach!other[0:1];

raidFile_ findRaid;
 do begin print("Frame  to RAID: "); makeOtherFrame( inchwl ); end
 until readOther( location(!jbddt), hisDdt ) 
	and mapIt( raidFile );
release(raidFile);

if hisDdt=0 or Confirm("OverWrite its .JBDDT of '" & cvos(hisDdt) & "?")
 then if not writeOther( location(!jbddt), raidBuf[0] )
	then print("Couldn't set his .JBDDT.  ");
print("He's set up, doing Retach.
In case you are interested: 
  $I= '", cvos(raidBuf[9]), """.JBDDT"" ='", cvos(raidBuf[0]), 
	", RAID is '", cvos(raidBuf[12]), " : '", cvos(raidBuf[11]), "
");
dologout_ confirm("Kill self after retach?");
error_ calli( location( retach!other[0] ), calli!retach );
if not !skip!
 then print(WaitUser, " Retach failed because: ", case error of 
	([1]"Insufficient access rights to source",[2]"Nonexist source",
	 [3]"Insufficient access rights to target",[4]"Nonexist target",
	[5]"Port not attached to source",[6]"Target already has a port",
	[7]"Forced command pending on port",
	[8]"Attaching aux circuit as command port",
	[9]"No room for port DDB",
	[ELSE]"System error: '" & cvos(error)), "." &  crlf)
 else if dologout
	 then begin 
		error_ calli(0,calli!logout);
		print(waitUser, " Logout failed: '", cvos(error) );
	      end;
end;
either: init x,17		
	sixbit/DSK/
	0
	 halt
	lookup x,[6(name) | 6(ext) | 0 | ppn]
	 halt
	move c,[35,,x]			;.CHMFP = map file page
	chanio c,[4001 ,, page | 1 ]	(page here use 700)
	 halt
	chanio c,page*1000+1
	 halt
	JSR @PAGE*1000+9		;to simulate a breakpoint
	;;then (in RAID) make c=0,,x  chanio C,  [or release x,]

or:	move c,[13,,x]	;.CHOPN = open channel
	chanio c,[100000,,17	;100000= physical only
		  SIXBIT /DSK/
		  0]
	 halt
	hrli c,
	lookup x,[6(name) | 6(ext) | 0 | ppn]
	 halt
	move c,[35,,x]			;.CHMFP = map file page
	chanio c,[4001 ,, page | 1 ]	(page here use 700)
	 halt
	chanio c,page*1000+1
	 halt
	JSR @PAGE*1000+9		;to simulate a breakpoint
	;;then (in RAID) make c=0,,x  chanio C,  [or release x,]

end "raidin"

    