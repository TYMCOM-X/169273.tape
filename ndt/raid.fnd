
NRAID.FAI	
{Page 1}...

STSW(DMOVSW,REALSW)	;IF ONE, THE DISPLAY IS IN THE NORMAL RAID AREA


STSW(EXDSW,1)		;LEAVE THIS WAY UNTIL RAID IS FIXED TO LOOK
			;AT $I~O~ INDEPENDENT OF THIS SWITCH, AND ALSO
			;LOOK FIRST IN THE SYMBOL TABLE FOR DEVICE CODES

DEFINE PRNTOP <PRINTS>

DEFINE VALPNT (VAL) <
PRNTOP /VAL/
>

IFN STANFO,<PRNTOP /ASSEMBLING FOR STANFORD
/>

{Page 4}IFN REALSW,<
LOC 74
RAIDVER__4			;PROGRAMS CAN DETECT VERSION
	.LEFT.(RAIDVER,5),,DDT	;SET JOBDDT
RELOC
INTERNAL $BGDDT~
$BGDDT~:				;IDENTIFY BEGINNING OF RAID
>
?BEGDDT:
?DPLOC:	777400

IFN SORTED,<
?SYMBAS:0
?SYMRNG:0
?SAVJSM:-1	;SAVED JOBSYM, USED FOR SEEING IF JOBSYM HAS CHANGED
?RNGBAS:0
?RNGBS1:0

{Page 20}...
>;SORTED
>;END FILESW
IFE FILESW,<
	MOVEI E,BEGDDT
	CAIN E,140		;START AT 140 UNLESS RAID IS FIRST
	MOVEI E,ENDDT		;SET LOWER BOUND AT DDTEND~ TO START WITH
	MOVEM E,TLBOUN
	MOVEM E,PLBOUN
>;NOT FILESW
IFE SORTED&FILESW,<
	MOVE E,JOBSYM		;SET UPPER BOUND AT LOWER OF JOBSYM AND
>
IFE SORTED,<
	MOVEM E,SAVSYM#
>;NOT SORTED
IFE FILESW,<

{Page 27}...

^LEAVE:	EXIT

^CLRIO:	TDZA V,V
^SETIO:	MOVNI V,1
	MOVEM V,$I~O~
	TRO F,DPYALL
	POPJ P,
>;FILESW


{Page 36}...
	CAMG D3,WCNT+1
	JRST ADTYP1	;TYPE AS SYMBOL + OR - OFFSET
	AOS (P)
	POPJ P,		;CAN'T PRINT AS A SYMBOL

IFN REALSW,<INTERN $C~
>
$C~:
^WCNT:	77
	77
	10
	40

BEND INSTR
VSV:	0
EXACTY:	MOVEM E,D2	;SAVE BYTE POINTER
	PUSHJ P,FNDSYM	;LOOK UP IN TABLE
	MOVE E,D2	;RESTORE BYTE POINTER

{Page 43}...
	,<PMP,1500>,<IBM,1504>,<DDD,1510>,<AS,1774>
	,<AD,2424>,<XGP,2440>,<PCLK,2730>)
<IOTB (A)
>
IFN REALSW,<
INTERNAL $I~O~TAB
>
$I~O~TAB: REPEAT 4,<-1>	;DEV CODE PATCH AREA
IOTBLN__.-IOTBL

^IOFNDI:SKIPA E,SIXSYM	;GET SYM
	LSH E,-6	;RIGHT ADJUST
	TRNN E,77	;DONE?
	JRST .-2	;NO
	MOVEI T,IOTBLN	;GET TABLE LENGTH
ILOPO:	LDB M,[POINT 24,IOTBL-1(T),35]
	CAME M,E	;SAME?
	SOJG T,ILOPO	;NO, LOOP

{Page 45}...
	MOVE D2,TABUUO(PV)>
IONOT:
>;NOT STANFO
	JRST OPWIN

^$I~O~:	IFN UESW!FILESW,<-1;>0		;IF ON, SHOULD PRINT IOTS (SEE BELOW)
IFN REALSW,<
	INTERNAL $I~O~
>

IFN EXDSW,<
OPIO:	MOVE V,VSAV		;GET VALUE
	SKIPN $I~O~		;ARE WE TO PRINT MACHINE IOTS
IFN STANFO,<JRST IONOT>		;NO, TRY UUO IOTS
IFE STANFO,<POPJ P,>
	LDB PV,[POINT 3,V,12]	;GET REST OF I/O CODE
	MOVE D2,TABIO(PV)	;GET OPCODE
	LDB PV,[POINT 7,V,9]	;GET DEVICE #
	MOVEI D3,IOTBLN		;GET TABLE LENGTH
IOLOP:	LDB V,[POINT 7,IOTBL-1(D3),9];GET #
	CAIE V,(PV)		;SAME?
IOLOP2:	SOJG D3,IOLOP		;NO, LOOP
	JUMPE D3,OPIO2		;NOT FOUND?
	HRLI PV,(D3)		;SAVE POTENTIAL CANDIDATE
	LDB V,[410300,,IOTBL-1(D3)]	;SEE WHICH PROCESSOR
	CAME V,$I~O~
	JUMPN V,IOLOP2		;WRONG ONE
OPIO1:	SKIPE V,D3
	MOVE V,IOTBL-1(D3)	;GET NAME
	TLZ V,777700
	TRO F,CONOFF
	POPJ P,

OPIO2:	SKIPL $I~O~		;NEG MEANS ALWAYS PRINT AS I/O
	JRST IONOT		;TRY AS SYS CALL
	HLRZ D3,PV
	JRST OPIO1
>;END EXDSW
IFE EXDSW,<OPIO_IONOT>


{Page 62};Raid, Eret, Main, Inerr, Cerr, Pu, Unpur -- Main Loop, Dispatcher
BEGIN MAIN -- THIS HERE IS RAID
IFN REALSW,<
	RPTCNT
	BEGDDT
	DDTEND~
	$C~
IFE FILESW,<	$I~	;> 0
IFE FILESW,<	$1B~	;> 0
	$I~O~
	$M~
IFN FILESW,<
	0
	0
>;FILESW
IFE FILESW,<
	$RBP~
	$SBP~			;GIVE USER ACCESS TO THINGS
>;NOT FILESW
INTERNAL DDT
DDT:>

^RAID:	SETZM OACSW#
	SKIPE ACSW
	SETOM OACSW		;SAVE OLD STATE OF ACSW
	MOVEM P,RAC+P
	MOVE P,[-PDLEN,,PDL-1]
	EXCH P,RAC+P

{Page 63}...
IFE FILESW!UESW,<
	CT(X,2,XEQ1)		;X -- SINGLE-EXECUTE ONCE FROM .
	CT(S,2,STEPPE)		;S -- SINGLE-STEP ONCE FROM .
>
IFN FILESW,<
	CT(S,2,SETIO)		;S -- IN FRAID SET $I~O~ TO -1
	CT(S,4,CLRIO)		;S -- IN FRAID SET $I~O~ TO 0
	CT(X,16,SETDV)		;X -- set $DEV (device code)
>;FILESW
XWD "<"*20+5,UPAR		; < -- MOVE UP ONE, FROM .
XWD ">"*20+5,LNFD		; > -- MOVE DOWN ONE, FROM .
XWD "<"*20+12,MOVUP		;< -- MOVE UP ONE, ON SCREEN
XWD ">"*20+12,MOVDN		;> -- MOVE DOWN ONE, ON SCREEN
CT(,"\"*20+17,BSSET)		;\  -- EQUIV TO <
CT(,12*20+17,LFSET)		;LF -- EQUIV TO >
CT(;,1,OPENS)			; ; -- arrow TO @RH arrow, OR . TO SPECIFIED ADDR
^CTABCN__.-CTAB-1

{Page 73};   Wdsrch Subroutines

^STRIN:	0		;IT'S $M~-1 IF REALLY RAID
IFN REALSW,<INTERN $M~,DDTEND~>
$M~:
^SMASK:	-1
	-1
	0
^FLGPTR:0
STB1:	SKIPA
	SKIPA
	PUSHJ P,CALCE
STB3:	SMASK
	SMASK
	[777777]

{Page 77};$nB, 1nBrknum -- Brkins, Brkjsr, Dobrk, Brkpln

COMMENT  THE FORMAT OF THE BREAKPOINT TABLE
     IS AS FOLLOWS:
$1B~:	RIGHT HALF IS THE ADDRESS OF THE BREAKPOINT
	LEFT HALF IS ZERO, THIS LOCATION IS -1 IF NOT USED

BRKCNT__1	;THIS IS THE MULTIPLE PROCEDE COUNT
BRKSKP__2	;THIS IS THE CONDITIONAL SKIP INSTRUCTION.
		;IF NON-ZERO, RAID WILL EXECUTE THIS INST.
		;WHEN YOU HIT THIS BREAKPOINT AND WILL
		;IGNORE THE BREAKPOINT IF THE INST. SKIPS
BRKSTR__3	;THIS IS THE STRING POINTER.  WHEN YOU HIT THIS
		;BREAKPOINT, THE STRING POINTED TO GETS EXECUTED
		;AS IF IT WAS BEING TYPED IN; AS LONG AS THE POINTER IS NON-ZERO
...
IFN DEBSYM!UESW,<
^JOBSYM:0	;DON'T CLOBBER REAL JOBSYM SO WE CAN DEBUG
>

IFE UESW!FILESW,<
$1B~:	-1
	BLOCK BLOCNM-1
FOR @@ ZILCH_2,BRKNUM
<IFN REALSW,<$@ZILCH@B:>	-1
	BLOCK BLOCNM-1
>
   	       	     	    
IFN REALSW,<INTERN $1B~
FOR @! Z_2,BRKNUM
<INTERN $!Z!B
>>

^BRKINS:0
	SKIPE BRKSW#		;SKIP IF BREAKPOINTS ARE NOT IN CORE YET
	JRST @BRKINS
	SETOM BRKSW		;INDICATE BREAKPOINTS ARE IN CORE
	MOVEI M,$1B~		;GET POINTER TO TABLE
	MOVEI D3,BRKNUM
LOP11:	SKIPGE V,(M)		;USED?
	JRST ARN1		;NO
	MOVE T,[JSR BRKJSR]	;GET THE JSR
	CAIG V,17		;AC?
	ADDI V,JAC		;YES
	EXCH T,(V)		;DEPOSIT
	MOVEM T,BRKCON(M)	;SAVE VALUE
ARN1:	ADDI M,BLOCNM		;GO TO NEXT
	SOJG D3,LOP11		;LOOP IF NOT DONE
	JRST @BRKINS

IFN REALSW,< $I~:
INTERN $I~
>
^BRKJSR:0
	MOVEM P,RAC+P
	MOVE P,[-PDLEN,,PDL-1]
	EXCH P,RAC+P
	JSR RACGT		;GET THE AC'S
	JSR ONCE		;TO BE SURE
	SOS BRKJSR		;POINT TO BREAKPOINT INSTR
^DOBRK:	SETZM PNTREM
	JSR BRKPUL		;PULL OUT THE BREAKPOINTS
...
	HRLM T,NBIGWD
	PUSHJ P,OPNQQQ		;OPEN BREAKPOINT LOCATION
	SKIPN PNTREM		;REAL BPT?
	TRNE F,ISOPC		;NO, JOBOPC KLUDGE?
	JRST NOVALU		;ONE OF THE ABOVE
	AOS V,BRKJSR		;IT'S A JSR $I~, FIX THE PC
	PUSHJ P,OPNQQQ		;AND DISPLAY THE PROCEED LOC
	SOS VALUE
	PUSHJ P,OPENQ		;NOW SET . BACK TO JSR
NOVALU:
IFN TENEX,<
	MOVEI A,100
	TRZN F,ISOPC
	CBIBF
>
IFE TENEX,<
...
	JRST 2,@BRKJSR		;GO TO JOB

^BRKPLN:TLNN F1,VALF		;VALUE TYPED?
	JRST CERR		; NO
	PUSHJ P,BRKREM
	MOVEI M,$1B~
	MOVEI T,BRKNUM
BLOP:	SKIPGE (M)		;EMPTY?
	JRST BBFND		;YES
	ADDI M,BLOCNM		;GO TO NEXT
	SOJG T,BLOP
	JRST CERR		;NO ROOM
BBFND:	HRRZ V,VALUE
	CAIG V,@JOBREL
	JRST BBOK
IFN SEGSW,<

{Page 78}; Brkrem, Brkpul, Tbproc

^BRKREM:
^BKRM:	HRRZ V,VALUE		;GET VALUE IF ANY
	MOVEI T,$1B~		;GET TABLE POINTER
	MOVEI M,BRKNUM		;AND COUNT
	TLNN F1,VALF		;VALUE?
	JRST REMALL		;NO, REMOVE ALL BREAKPOINTS
LOOP1:	CAMN V,(T)		;THIS IT?
	JRST BFND		;YES
	ADDI T,BLOCNM		;NO, GO TO NEXT
	SOJG M,LOOP1		;LOOP IF NOT DONE
	POPJ P,
BFND:	SETOM (T)		;REMOVE IT
	POPJ P,
...
;LOCATION IS NOW IN BRKJSR
^BRKPUL:0
	SKIPN BRKSW		;SKIP IF BREAKPOINTS HAVE BEEN INSTALLED IN CORE
	JRST @BRKPUL
	SETZM BRKSW		;SAY THAT BREAKPOINTS ARE NO LONGER IN CORE
	MOVEI M,$1B~		;GET POINTER TO TABLE
	MOVEI D3,BRKNUM
LOP12:	SKIPGE V,(M)		;GET LOCATION
	JRST ARN2		;NOT USED
	MOVE T,BRKCON(M)	;GET WORD WHICH GOES THERE
	ANDI V,-1
	CAIN V,@BRKJSR		;IS THIS THE ONE?
	MOVEM M,PNTREM		;YES REMEMBER POINTER
	CAIG V,17		;AC?
	ADDI V,JAC		;YES
	MOVEM T,(V)		;DEPOSIT

{Page 79}; Proced, Gpelop, Elop, Pstbrk, Prmbrk, $SBP~

^PROCED:SKIPN M,PNTREM		;HAVE A POINTER?
	JRST GOPRO		;NO, USER JSR $I~'ED, OR JRSTED DDT
	MOVE V,VALUE		;REPEAT COUNT
	TLNE F1,VALF		;VALUE TYPED?
	HRRZM V,BRKCNT(M)	;YES, DEPOSIT
PROCEE:	PUSHJ P,STEP		;STEP ONE LOCATION
	JRST GOPRO		;PROCEDE
PNTREM:	0

STEP:	HRRZ M,BRKJSR		;GET CURRENT PC
	CAIG M,17		;AC?
	ADDI M,JAC		;YES
...
	MOVEM M,MSAV
	MOVE M,@BRKJSQ ;ELSE > POP P,M
	POPJ P,

IFN REALSW,<
$SBP~:
INTERN $SBP~
>;REALSW
IFE UESW!FILESW,<
; USER CALLS JSR AC,$SBP~ TO SET BREAKPOINT AT LOCATION NAMED IN AC
^PSTBRK:0
	JSR RACGT		;GET RAID ACS
	JSR ONCE		;SET UP FOR RAID IF FIRST EXPOSURE
	JSR BRKPUL		;PULL, BECAUSE THEY'RE GOING TO CHANGE
	TLO F1,VALF		;SIMULATE SUCCESSFUL VALUE SCAN
	HRRZ V,PSTBRK		;RETURN ADDR
	LDB V,[POINT 4,-1(V),12];AC FIELD OF `JSR AC,$SBP~'
	HRRZ V,JAC(V)		;USER'S VERSION OF THIS AC
	MOVEM V,VALUE		;FINISH SIMULATION
	PUSHJ P,BRKPLN		;PLANT THE BREAKPOINT
	JSR BRKINS		;INSERT BREAKPOINTS
	JSR JACGT		;GET JOB'S ACS BACK
	JRST 2,@PSTBRK		;RETURN TO SENDER
IFN REALSW,<
$RBP~:
INTERN $RBP~
>;REALSW
^PRMBRK:0
	JSR RACGT		;PRETTY MUCH A REPEAT
	JSR ONCE		;SET UP FOR RAID IF FIRST EXPOSURE
	JSR BRKPUL		;PULL, BECAUSE THEY'RE GOING TO CHANGE
	TLO F1,VALF		;SIMULATE SUCCESSFUL VALUE SCAN
	HRRZ V,PRMBRK		;RETURN ADDR
	LDB V,[POINT 4,-1(V),12];AC FIELD OF `JSR AC,$RBP~'
	HRRZ V,JAC(V)		;USER'S VERSION OF THIS AC
	MOVEM V,VALUE		;FINISH SIMULATION
	PUSHJ P,BKRM		;REMOVE THE BREAKPOINT
	JSR BRKINS		;INSERT BREAKPOINTS
	JSR JACGT		;GET JOB'S ACS BACK
	JRST 2,@PRMBRK		;RETURN TO SENDER


{Page 82}...
FNM:	0
NM:	0
SYMP:	0
BLKLV:	0
SIXSYM:	0
IFN REALSW, <INTERN $RPTCN~T
$RPTCN~T:>
^RPTCNT: 0
; Here is defined the data buffer area for displays -- shared
;  by sort routine for sorted version

IQJ__MAXDLN+2	IQJ__IQJ*LINLEN
DISB:	BLOCK	IQJ			;ROOM FOR ALL THE DATA
^DISB__DISB


{Page 90}VAR
LIT
ENDDT:
IFN REALSW,<
DDTEND~:	END IFN FILESW,<RAID>
>
IFE REALSW,<END	RAID>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
1) "$rbp"	4
2) "$sbp"	6
3) "$io"	12
4) "$1b"	8
5) "$m"	4
6) "$I"	17
7) "$c"	3
8) "ddtend"	4
9) "$bgddt"	2
10) "$rptcn"	2    