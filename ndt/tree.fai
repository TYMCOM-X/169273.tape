ENTRY TREE,TREE.0,SAVTRE,RESTRE
Title TREE   the data area for Huffman trees, and compress/expand code
	;TREE is the sail array
	;TREE.0 is TREE[0]
	;SAVTRE( @buf[beg], maxlen ) transfers copy of tree to save area
	;RESTRE( @buf[beg], maxlen ) transfers other direction (decodes)

DEFINE SARRAY(LOWER,UPPER,SANAME,DATAWD,V.ZERO) <
 IFG LOWER, < Error= lower bound must be 0 or less: .SARRAY
 >
 IFL UPPER, < Error= upper bound must be 0 or greater: .SARRAY
 >
SANAME:	DATAWD
	LOWER-<UPPER>-11
	V.ZERO	;base!word
	LOWER	;lower
	UPPER	;upper
	1	;mult
	XWD 1,UPPER-<LOWER>+1
DATAWD:
 IFL LOWER, < BLOCK -<LOWER>
 >
V.ZERO:	BLOCK UPPER+1
	XWD	400000,SANAME
>

SARRAY(0,1204,TREE, TREE., TREE.0) ;actual tree (max=N-1+3)
?A__1
?B__2
?C__3
?D__4
?TEMP__14
?P__17
OPDEF ERR. [5b8]

;half-words in tree:
; 000xxx,001xxx : tree pointer (must point below top of tree)
; 774xxx    : character value (in 7-bitters, 774200 means "lnum bit on"
; 777xxx    : negative character value [specials: only repeats for now]
;;the way to distinguish specs from chars is bit 9=002000
SAVTRE:	; wordsWritten_ SAVTRE( @COMPRESSED.TREE[0], maxRoom );
	; 0=illegal tree
	;-needed if not enough room [legal not fully checked]
	MOVE	A,TREE.0
	MOVE	C,-1(P)
	JSP	B,CHKTRH	;check to insure the header is cool
				;also sets up A to be space needed
	HRRZ	C,-2(P)			;make an output byte pointer
	HRLI	C,(<POINT 12,0,35>)
	MOVE	B,TREE.0	;save code word as first of output area
	MOVEM	B,(C)
	HRLOI	D,-1(A)		;make AOBJN pntr to TREE.0+1
	EQVI	D,TREE.0+1	;HAKMEM #157
OUTLUP:	HLRZ	B,(D)		;  get left  branch
	TRNE	B,776000	;if leaf entry
	 TROA	B,004000	;then presume ok, flag as leaf
	 CAIGE	B,(A)		;node entries should be below tree top
	 JUMPN	B,.+2		;and above 0
	 JRST	ILLTRE		;somebody blew it
	IDPB	B,C		;store node or leaf pointer
	HRRZ	B,(D)		;  get right  branch
	TRNE	B,776000	;if leaf entry
	 TROA	B,004000	;then presume ok, flag as leaf
	 CAIGE	B,(A)		;node entries should be below tree top
	 JUMPN	B,.+2		;and above 0
	 JRST	ILLTRE		;somebody blew it
	IDPB	B,C		;store node or leaf pointer
	AOBJN	D,OUTLUP	;and loop away little doggie

	MOVEI	B,0		;after the last, store a cute little 0
	IDPB	B,C		;[makes picking up a lot easier]
	TLNE	C,770000	;fill out the rest of the last word
	 JRST	.-2		;with zeroes
				;A is all set, so lets leave
RETURN:	SUB	P,[XWD 3,3]
	JRST	@3(P)

ILLTRE:	MOVEI	A,0
	JRST	RETURN
CHKTRH:	;[check tree header] CAL: JSP B,CHKTRH, may JRST RETURN (w/ err)
	;takes A= tree word (-code,,tree size)  and  C=compressed size
	;checks code, size for "fits in tree[]", converts A to
	; compressed storage required, checks against and returns if OK
	TLNN	A,7	;eliminate -8,, and 8,, from consideration
	 JRST	ILLTRE	;legal codes are -6,-7,-9, 6,7, or 9
	JUMPL	A,[CAML	 A,[XWD -=9,0]
		    CAML A,[XWD -5,0]
		     JRST ILLTRE
		   JRST  CHKSIZ]
	CAML	A,[XWD 6,0]
	 CAML	A,[XWD =10,0]
	  JRST	ILLTRE
CHKSIZ:	MOVEI	A,(A)
	CAMLE	A,TREE.-3	;does the tree fit in the array
	 JRST	ILLTRE		;nope, bad compressed data
	ASH	A,1	;two half-words per tree node
	IDIVI	A,3	;3 bytes/word (round down for trailing 0)
	ADDI	A,2	;one word for tree code (tree[0]), 1 for trail
	CAILE	A,(C)	;did he give us enough compressed space?
	 JRST	(B)	; well how about that, go do real work
	MOVN	A,A	;nope, help him for next time
	JRST	RETURN
RESTRE:	; wordsUsed_ RESTRE( @COMPRESSED.TREE[0], comSize );
	;  0=invalid format for tree [or comsize leq 0]
	;  -size wanted
	SKIPG	C,-1(P) ;can we even look
	 JRST	ILLTRE	;nope, silly user
	HRRZ	D,-2(P) 	;pointer to compressed storage
	MOVE	A,(D)		;the code style for the storage
	JSP	B,CHKTRH	;go verify a lot about tree
	MOVEI	B,(D)		;look at last word of tree
	ADDI	B,-1(A)		;to make sure it has the end flag
	MOVE	B,(B)
	TRNE	B,007777	;which is trailing zero byte(s)
	 JRST	ILLTRE
	HRLZ	B,(D)		;get the tree size part of the code word
	MOVEM	B,TREE.0	;and save in easy place for comparison
	ADD	D,[POINT 12,1,35] ;point to low byte of tree data word 1
	MOVSI	A,(A)		;RH(A) is index of TREE[] last filled
	MOVEI	B,0		;%verify% insure ended on word boundary

REDLUP:
;once in loop: 
;TREE.0 has top-of-tree,,0	(for checking that nodes point in tree) 
;A= good return value,,position writing in TREE[]
;B= collects words for TREE[] (0,,x means one halfword so far)
;C= used to sign-extend bytes
;D= POINT 12,current.compressed.word,35
;	used as an index for the word and byte pointer for its last byte
	MOVE	C,(D)		;read the next word (three bytes)
	ASH	C,=12-=18	;sign-extend the high part of byte 1
	JSP	TEMP,HLFOUT	;output (shifts c left 1 half-word)
	ASH	C,=12-=18	;sign-extend the high part of byte 2
	JSP	TEMP,HLFOUT	;output (shifts c left 1 half-word)
	ASH	C,=12-=18	;sign-extend the high part of byte 3
	LDB	TEMP,D		;(had only 18-12 bits), get the low bits
	TLO	C,(TEMP)	;and turn them on (others wont hurt)
	JSP	TEMP,HLFOUT	;output
	AOJA	D,REDLUP	;head on to the next word

HLFOUT:	;output the LH(C), checking for termination and validity
	TLNE	C,-1		;zero bytes terminate
	 JRST	ALLDON
	CAML	C,TREE.0	;make sure points inside tree (spec < 0)
	 JRST	ILLTRE		;if not, the tree is invalid
	LSHC	B,=18		;suck up another half-word to B
	TLNE	B,-1
	 JRST	(TEMP)
	MOVEM	B,TREE.0+1(A)
	MOVEI	B,0		;%verify% insure ended on word boundary
	AOJA	A,(TEMP)

ALLDON:	JUMPN	B,ILLTRE	;%verify% insure ended on word boundry
	LSHC	A,-=18		;fix A to be proper return value
				;and get size written,,0 in B
	CAME	A,TREE.0	;was it the sze we expected to write?
	 JRST	ILLTRE		;nope, guess tree had a free 0 byte
	MOVE	B,@-2(P)	;now get the code word one final time
	MOVEM	TREE.0		;and store it as the header
	JRST	RETURN		;we're done, lets split
END
