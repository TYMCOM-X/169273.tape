entry cvHex, cvHexS;
begin "cvHex"
define !="Comment", #sp="('40&null)";
let andThen=and;
define routine = "simple procedure";

external integer !skip!;
internal integer routine cvHex( string AsciiHex; integer start(0) );
! Like CVO, but (1) first character of the string must be a hex digit.
! (2) If more than 36 bits are specified, only returns the low order 36.
! (3) !SKIP! is set to the break character (-1 if end-of-string).
! (4) value is derived by shifting out "start".
;
begin	integer start;
while length( AsciiHex )
   do begin	integer ch;
	if "0" leq (ch_ lop(AsciiHex)) leq "9"
			 then start_ start lsh 4 lor (ch-"0")
	else if "A" leq ch leq "F"
			 then start_ start lsh 4 lor (ch-("A"-10))
	else if "a" leq ch leq "f"
			 then start_ start lsh 4 lor (ch-("a"-10))
	else begin !skip!_ ch; return(start); end;
      end;
!skip!_ -1; 
return(start);
end;
string routine charRepeat( integer char, count );
if count <1
 then return(null)
 else begin	string res;
	res_ char;
	while length(res) < count do res_ res & char;
	return(res)
      end;
internal string routine cvHexS( integer toHex );
! returns a string of hex digits for the argument passed in (NOT -1).
! same conventions for length as CVS and CVOS.
;
if -1 < toHex < 10
 then return(cvs(toHex))
 else begin	integer ch, len, w,d;
		string res;
	for len_9 step -1 while toHex land ('17 rot -4) = 0
	   do toHex_ toHex lsh 4;
	getformat(w,d); 
	res_ charRepeat( (if w<0 then 0+"0" else #sp), (abs w) - len );
	for len_ len step -1 until 1
	   do begin toHex_ toHex rot 4; 
		ch_ (toHex land '17) + "0";
		res_ res & (if ch > "9" then ch + (-"9"+"A"-1) else ch);
	      end;
	return( res )
      end;

end "cvHex" $
