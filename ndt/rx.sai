"B" style break:

    --	b?  -o
s0: s1^	s0* s3		...
s1: --\	s0* s2		--(^) {|--}(\) ...
s2: s6\	s0* --		--(^) {|--}(\) {-o} ...
s3: s4^	s0* --		{-o} ...
s4: --\	s0* s5		{-o} --(^) {|--}(\) ...
s5: s6\	s0* --		{-o} --(^) {|--}(\) {-o} ...
s6: --\	s0* --		{|-o} --(^) {-o|--} --(\) {|-o} ...

legend:
 * save this char,charPos in STAR; clear ARROW and BSLASH
 ^ save this charPos in ARROW and BSLASH
 \ save this charPos in BSLASH
initially: clear STAR, ARROW, and BSLASH

at completion:
s0,s3: ... {|o-}
	result: null(or brkchar if Append mode) 
	break: at STAR
	refarg:	beginning through(SA/R) STAR
s1,s2: --(^) {|--}(\) {|o-}
	result: ARROW(or ARROW-1=brkchar if Append mode) thru BSLASH
	break: at STAR
s4,s5: {|-o} --(^) {|--}(\) {|o-}
	result: (brkchar if Append mode) & ARROW thru BSLASH
	break: at STAR
s6:	{|-o} --(^) {-o|--} --(\) {|-o} ...
	result: (brkchar if Append mode) & dropOmits(ARROW thru BSLASH)
	break: at STAR
	refarg:	beginning through(SA/R) STAR
"T" style break:

    --	b?  -o	bo
s0: s1^	s0* s3	s'	...
s1: --\	s0* s2	s'	--(^) {|--}(\) ...
s2: s6\	s0* --	s'	--(^) {|--}(\) {-o} ...
s3: s4^	s0* --	s'	{-o} ...
s4: --\	s0* s5	s'	{-o} --(^) {|--}(\) ...
s5: s6\	s0* --	s'	{-o} --(^) {|--}(\) {-o} ...
s6: --\	s0* --	s'	{|-o} --(^) {-o|--} --(\) {|-o} ...

lastOmit:
lastBreak:
lastReal:
lastOmitBreak:

lastOmit := lastBreak := lastReal := lastOmitBreak := -1;
for pos := 1 step 1 while length(instr)
    do begin
	newClass := classify(lop(instr));
	case classify(lop(instr))
	of begin
	[Omit]	begin
		if firstReal < lastBreak then firstReal := pos;
		lastOmit := pos;
		end;
	[Break]	lastBreak := pos;
	[Real]	begin
		if firstReal < lastBreak then firstReal := pos;
		lastReal := pos;
		end;
	[OmitBreak] lastOmitBreak := pos; 
	end;
strin := "abcd
efg";
  -- ob -b o-
at end, 
	ref(SA)=[1 to x-1], ref(R)=[1 to x]
	break=[x]
case 1:	... b- {ob|o-}		result(SR)=null, result(A)=[x]
	    x
case 2: ... b-|ob {--} -- {ob|o-}	result(SR)=[x+1 to y]
	      x	       y		result(A)=[x to y] 
case 3: ... b-|ob {o-} {--} -- {ob|o-}	result(SR)=[y to z]
	      x	       y    z		result(A)=[x] & [y to z] 
case 4: ... b-|ob {o-|--} -- {ob|o-}	result(SR)=clean([x+1 to y])
	      x		  y		result(A)=[x]& clean([x+1 to y])

	{o-|ob} {--|o-} {b-}
	{o-|ob} {--|o-} -- {--|o-} {ob}
