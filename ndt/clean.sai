begin "clean"
require 3 version;
define !="Comment";
define	bs="('10&null)", tab="('11&null)", lf="('12&null)", 
	ff="('14&null)", cr="('15&null)", space="('40&null)", 
	esc="('33&null)",
	crlf="('15&'12)";
require "(SAILIB)ASSERT.SAI" source!file;
require "{}{}" delimiters;
external integer !SKIP!, !JBVER;
IFCR FALSE THENC	Conceptually:

char_oneChar;
while true 
   do begin
	VISIBLE:
	while true 
	   do begin
		case char 
		   of begin
			[printing] begin putout; cursor+_1 end;
			[invisible] ;
			[bigger] ...putout...
			[eof] *return*;
			[else] DONE;
		      end;
		char_oneChar;
	      end;
	HORIZONTAL:
	while true 
	   do begin
		case char 
		   of begin
			[cr] InputCursor_0;
			[space] InputCursor+_1;
			[tab] InputCursor_ intabfun(InputCursor);
			[bs] if (InputCursor-_1)<0 then InputCursor_0;
			[invisible] ;
			[eof] begin LINEWHITE; *return* end;
			[cr,lf,ff] begin LINEWHITE; go vertical end;
			[else] begin WHITE; go visible end;
		      end;
		char_oneChar;
	      end;
	VERTICAL:
	while true 
	   do begin
		case char 
		   of begin
			[cr] InputCursor_0;
			[lf] InputLine+_1;
			[space] InputCursor+_1;
			[tab] InputCursor_ intabfun(InputCursor);
			[form] FORMLINE; InputLine_0; InputPage+_1;
			[bs] if (InputCursor-_1)<0 then InputCursor_0;
			[invisible] ;
			[eof] *return*;
			[else] begin FORM;LINE;WHITE; DONE end;
		      end;
		char_oneChar;
	      end;
      end;
ENDC
! these simple routines to provide requested number of their character;

define mulproc(name,char)={

	simple string procedure NAME(integer howmany);
	begin	own string hold;
	while length( hold ) < howmany 
	   do hold_ hold & hold & CHAR;
	return( hold [1 for howmany] );
	end
};

mulproc(spaces,space);
mulproc(tabs,tab);
mulproc(lines,lf);
mulproc(forms,ff);
mulproc(backspaces,bs);
integer ouch;			! channel to output to;
integer newCursor, oldCursor; 	! desired cursor, last cursor;
integer OutputForwardCode,	! choices of spacing or tabs;
	OutputBackwardCode,	! choices of <bs>, <cr>forward style;
	InnerBlankLineCode,	! for blank lines between printing;
	InnerBlankSpaceCode,	! spacing after first printing on line;
	CrDispositionCode;	! when must do <cr>;

simple procedure spaceit;
! outputs enough spacing to move cursor from OldCursor to NewCursor
  acording to output algorithms
    Current forward algorithms:
	[0] tabs whenever possible (but never to cover 1 column).
		[tab stops are at columns 0,8,16,...]
	[1] all spaces
	[2] one space per clump of spaces
    Current reverse algorithms:
	[0] <cr>+<white#2> / <bs> sequence, whichever is cheaper 
	[1] <cr>+<white#2> always
	[2] <bs> always
;
begin	integer delta;
if (delta_NewCursor-OldCursor) < 0
 then case OutputBackwardCode of
	begin
	 [0] if -delta leq (newCursor land 7)+(newCursor ash -3)
		then cprint(ouch,backSpaces(-delta))
		else cprint(ouch, cr, tabs(newCursor ash -3),
					spaces(newCursor land 7) );
	 [1] cprint(ouch, cr, tabs(newCursor ash -3),
				spaces(newCursor land 7) );
	 [2] cprint(ouch,backSpaces(-delta));
	 [3] outstr("[Backwards]")
	end;
if delta > 0
 then case OutputForwardCode of 
	begin
	 [0] begin
		if 7=oldCursor land 7
		 then begin 
			cprint(ouch,space);
			oldCursor_oldCursor +1;
		      end;
		if (oldCursor xor newCursor) land (lnot 7)
		 then cprint(ouch, tabs(newCursor ash -3 
					- oldCursor ash -3),
				spaces(NewCursor land 7) )
		 else cprint(ouch, spaces(NewCursor-OldCursor));
	     end;
	 [1] cprint(ouch,spaces(delta));
	 [2] cprint(ouch,space)
	end;
end;
integer inch, inbrk, ineof;	! input "channel" and associated vbls;

simple string Procedure getmore(integer brktbl);
! behaves like "INPUT(inch,brktbl)", except that TTY is handled nicely;
if 0 leq inch
 then return(input(inch,brktbl))
 else while true
   do begin	own string saveit,result; own boolean sawEof;
	if length(saveit)=0
	 then begin
		if sawEof or inEof 
		 then begin inEof_true; sawEof_false; return(null) end;
		saveIt_inchwl;
		if not (sawEof_!skip!=4)	! stop on ctrl-D;
		 then saveIt_ saveIt & 
			(if cr=!skip! then crlf else !skip!);
	      end;
	if length(result_scan(saveit,brktbl,inbrk)) or inbrk
	 then return(result);
      end;
integer retainPrinting, retainNonPrinting;	! break tables;
integer	retainPrintingAndVertical;
simple procedure setup3;
begin
setbreak(retainPrinting_   getbreak, crlf&bs&tab&space,null,"xnr");
setbreak(retainNonPrinting_getbreak, crlf&bs&tab&space,null,"inr");
setbreak(retainPrintingAndVertical_
			   getbreak, cr  &bs&tab&space,null,"xnr");
end;
require setup3 initialization;

Procedure grovel;
! grovels over INCH, "clean"ing and outputting to OUCH.;
begin	integer linesDown, pagesDown; string togo;
linesDown_ pagesDown_ newCursor_ oldCursor_ 0;
inEof_false; inBrk_0;

  do  begin
	while inBrk=0 and length(togo_getmore(retainPrinting))
	   do do case lop(togo)
		of begin
		    [cr] newCursor_0;
		    [bs] newCursor_ (newCursor-1) max 0;
		    [space] newCursor_ newCursor+1;
		    [tab] newCursor_ (newCursor lor 7)+1;
		    [lf] linesDown_linesDown+1;
		    [ff] begin ! to keep trailing lines change here;
			  linesDown_ 0;
			  pagesDown_pagesDown+1;
			 end
		   end
		until length(togo)=0;
	if inEof then return;
	If pagesDown
	 then begin 	! change here to muck with leading lines;
		if CrDispositionCode < 2
		 then begin
			Oldcursor_0;
			cprint(ouch, cr, forms(pagesDown),
					lines(linesDown));
		      end
		 else cprint(ouch, forms(pagesDown), lines(linesDown));
	      end
	 else if linesDown
	  then begin
		if CrDispositionCode=0
		 then begin Oldcursor_0; cprint(ouch,cr); end;
		Case InnerBlankLineCode
		 of begin
		    [0] ! keep blank lines;
			cprint(ouch,lines(linesDown)); 
		    [1] ! drop all blank lines;
			cprint(ouch,lf); 
		    [2] ! compress blank lines to a single blank line;
			cprint(ouch,if linesDown>1 then lf&lf else lf) 
		    end;
	        end;
	PagesDown_LinesDown_0;
	if newCursor neq oldCursor then spaceit;
	  do  begin	! here we have spaced to first printing on line;
		while length(togo_ getmore(retainNonPrinting))
		   do begin 
			newCursor_newCursor+length(togo);
			cprint(ouch, togo);
		      end;
		OldCursor_NewCursor; ! now: <spacing> <printing>...;
		if InnerBlankSpaceCode
		 then do togo_ togo & getmore(retainPrintingAndVertical)
			  until inBrk or inEof
		 else done;
		if inBrk > space or innerBlankSpaceCode=2
		 then cprint(ouch, togo);
		while length(togo)
		   do case lop(togo)
			of begin
			    [cr] newCursor_0;
			    [bs] newCursor_ (newCursor-1) max 0;
			    [space] newCursor_ newCursor+1;
			    [tab] newCursor_ (newCursor lor 7)+1
			   end
	      end
	 until inBrk < space;
	if InnerBlankSpaceCode=2 then oldCursor := newCursor;
	InBrk := 0;
      end
 until inEof;
end;
simple string procedure reply(string prompt, default(null) );
begin	string inpt;
print(crlf,prompt);
inpt_ inchwl;
while !skip!=lf
   do begin print(cr&":"); inpt_ inpt&inchwl end;
return( if length( inpt )=0 and !skip!=Esc
	 then default else inpt );
end;

integer brkColon;
  simple procedure setColon;
    setbreak(brkColon_getbreak, ":", space&tab&bs&crlf&ff, "INKS");
  require setcolon initialization;

boolean simple procedure breakFile( reference string device, file;
		string source, defaultDevice(null), defaultFile(null) );
! returns true if more than one device was specified
;
begin
file_ scan( source, brkColon, inBrk );
if inBrk 
 then begin 
	device_file; 
	file_ scan( source, brkColon, inBrk );
	if inBrk then return(true);
      end
 else device_defaultDevice;
if length(file)=0 then file_ defaultFile;
return(false);
end;
boolean simple procedure SetSwitch( string switch );
begin
case switch
 of begin
	["C"] CrDispositionCode_intscan(switch,Inbrk); 
	["I"] InnerBlankLineCode_intscan(switch,Inbrk);
	["F"] OutputForwardCode_intscan(switch,Inbrk);
	["P"] InnerBlankSpaceCode_intscan(switch,Inbrk);
	["R"] OutputBackwardCode_intscan(switch,Inbrk);
	["H"] ["?"] begin print("
Command format:	output=input/switch:value/switch:value...
	(the switches are all initialized to zero, and need not be
	 specified if that is the value that you want)
    Forward algorithms: (/FOR:#)
	[0] tabs whenever possible (but never to cover 1 column).
		[tab stops are at columns 0,8,16,...]
	[1] all spaces
	[2] one space for each section of white space
    Reverse algorithms: (/REV:#)
	[0] <cr>+<white#0> / <bs> sequence, whichever is cheaper 
	[1] <cr>+<white#0> always
	[2] <bs> always
	[3] complain if necessary
    Interior blank lines [blank lines between printing lines] (/INT:#)
	[0] keep all such lines
	[1] drop all blank lines
	[2] One blank line for each consecutive set of blank lines
    Carriage Returns [when <cr> is demanded] (/CR:#)
	[0] Before every printing line (ie use <crlf> for lines)
	[1] Before every printing page
	[2] Only when required by the reverse algorithm
    Program Mode [when spacing copied from the original] (/PROGRAM:#)
	[0] Never
	[1] only between printing sections on the same line
	[2] on any line after its first printing character
");
		return(true)
	       end;
	ELSE begin
		print("Unknown switch: `", switch, "'.");
		return(true)
	     end
    end;
return(false)
end;
boolean flag;
integer break, commandBreak;
string command, inputSide, outputSide; 
label restart;

Print("Clean V ",cvos(!JBVER),".0");
setbreak( commandBreak_getbreak, "/=_", space&tab, "SIK" );
RESTART:
InnerBlankSpaceCode_ InnerBlankLineCode_ 
	CrDispositionCode_ OutputForwardCode_ OutputBackwardCode_ 0;
command_ reply( "Options:", "/?" );
outputSide_null;
inputSide_ scan( command, commandBreak, Break );
if inputside="?" or equ(inputside,"HELP")
 then begin break_"/"; command_inputSide; end;
while break
   do if break="/"
	 then begin
		if setswitch(scan( command, commandBreak, Break ))
		 then go restart;
	      end 
	 else begin
		outputSide_ inputSide;
		inputSide_ scan( command, commandBreak, Break );
	      end;
ttyup(true);
while true
  do  begin "get input"		string file, dev;
	if length( inputSide )=0
	 then inputSide_ reply( "In: ", "TTY:" );
	while breakFile( dev, file, inputSide, "DSK" )
	 do inputSide_ reply( "Only one device allowed, try again: ", 
				"TTY:" ); 
	inputSide_null;
	if equ(file,"RESTART") then go restart;
	if equ(dev,"FILE") then dev_"DSK";
	if equ(file,"HELP") or file="?" or equ(dev,"HELP") or dev="?" 
		 then print(crlf,"either a file-name or TTY:")
	 else if equ(dev,"TTY")
		 then begin inch_-1; done end
	 else begin
		open(inch_getchan, dev,0, 4,0, 512,inBrk,inEof_false);
		if inEof
		 then print("Couldn't OPEN device ",dev,": for input")
		 else begin
			lookup(inch,file,inEof);
			if inEof
			 then print("Can't LOOKUP `",dev,":",file,"'.");
		      end;
		if InEof then release(inch) else done;
		inEof_false;
	      end;
      end "get input";

while true
  do  begin "get output"	string file, dev;
	if length( outputSide )=0
	 then outputSide_ reply( "Out: ", "TTY:" );
	while breakFile( dev, file, outputSide, "DSK" )
	 do outputSide_ reply( "Only one device allowed, try again: ", 
				"TTY:" ); 
	outputSide_null;

	if equ(file,"RESTART") 
	 then begin if inch geq 0 then release(inch); go restart; end;
	if equ(file,"HELP") or file="?" or equ(dev,"HELP") or dev="?" 
	 then print(crlf,"either file-name, TTY:, or BOTH:file-name")
	 else if equ(dev,"BOTH") or equ(dev,"TTY") or equ(dev,"FILE") 
		 then begin ouch_-1; setprint(file,dev); done end
	 else begin	boolean flag;
		open(ouch_getchan, dev,0, 0,4, 0,0,flag_false);
		if flag
		 then print("Couldn't OPEN device ",dev,": for output")
		 else begin
			enter(ouch,file,flag);
			if flag 
			 then print("Can't ENTER `",dev,":",file,"'.");
		      end;
		if flag then release(ouch) else done;
	      end;
      end "get output";
ttyup(false);
grovel;
if inch geq 0 then release(inch);
if ouch geq 0 then release(ouch) else setprint(null,"T");
end;
  