begin "squash"
require "(sailib)sail.def" source!file;
define elif={else if};
define $ctx=false;	! seems to be a bug in the context code;
require "squish.dcl" source!file;
require "sqx.dcl" source!file;
require "bltx.dcl" source!file;
	!get!module(mapping);

! require "squish.rel" load!module; 
! require "sqx.rel" load!module, "bltx.rel" load!module;
simple string procedure reply(string prompt);
while true 
   do begin	string reply;
	outstr(prompt);
	if equ(reply_inchwl,"*BUG*") and !skip!='7	! bell;
	 then usererr(0,1,"You rang")
	 else return(reply);
      end;
PROCEDURE adump( INTEGER Words );
begin	integer ch, eof;
	string file;
OPEN(ch_getchan, "DSK", '10000+8, 0,4, 0,0,eof_0);
while true
   do begin 	boolean flag;
	flag_ true;
	if length( file_ reply("DUMP data to File [DATA0.TMP]: ") )=0
	 then file_ "DATA0.TMP";
	flag_ true;
	if equ(file, "HELP") or EQU(file,"?")
	 then print( "HELP, SKIP IT, or file name (<cr> gets DATA.TMP)
")
	 elif equ(file,"SKIP IT") then done
	 else enter(ch,file,flag);
	if not flag
	 then begin
		wordout(ch, cvsix("DUMP0"));
		wordout(ch, Words);
		forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
		wordout(ch, arrinfo(ar,1));
		wordout(ch, arrinfo(ar,0)); } endc
		forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
		arryout(ch, ar[arrinfo(ar,1)], arrinfo(ar,0)); } endc
		wordout(ch, cvsix("EOF"));
		print("written");
		done;
	      end;
      end;
release(ch);
end;

integer PROCEDURE aread( INTEGER ch );
begin	integer words, base, len;
	boolean flag;
lookup( ch, reply("READ data from File: "), flag );
if flag
 then begin print("Cannot find file, start over",crlf); return(-1); end;
if wordin(ch) neq cvsix("DUMP0")
 then begin usererr(0,1,"bad version"); return(-2) end;
words_ wordin(ch);
forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
	if (ar[0]_ wordin(ch)) < arrinfo(ar,1)
	or (ar[1]_ wordin(ch)) + ar[0] - 1 > arrinfo(ar,2) 
	 then begin usererr(0,1,"bad version"); return(-3) end;
}endc
forlc ar=(a.6,a.7,a.9,b.6,b.7,b.9) doc {
	base_ ar[0]; len_ ar[1]; arrclr(ar); 
	arryin( ch, ar[base], len ); 
}endc
if wordin(ch) neq cvsix("EOF")
 then begin usererr(0,1,"bad version"); return(-4) end;
return(words);
end;
PROCEDURE bdump( INTEGER vWords, code; INTEGER ARRAY ar );
begin	integer ch, eof;
	string file;
OPEN(ch_getchan, "DSK", '10000+8, 0,4, 0,0,eof_0);
while true
   do begin 	boolean flag;
	if tree[0]+2 > arrinfo(tree,2)
	 then begin usererr(0,1,"oh me oh my!");
		tree[0]_ arrinfo(tree,2) - 2;
		end;
	if length( file_ reply("DUMP data to File [DATA.TMP]: ") )=0
	 then file_ "DATA.TMP";
	flag_ true;
	if equ(file, "HELP") or EQU(file,"?")
	 then print( "HELP, SKIP IT, or file name (<cr> gets DATA.TMP)
")
	 else if equ(file,"SKIP IT") then done
	 else enter(ch,file,flag);
	if not flag
	 then begin	integer w1, len;
		wordout(ch, cvsix("DUMP1"));
		wordout(ch, vWords);
		wordout(ch, code);
		wordout(ch, w1_arrinfo(ar,1));
		wordout(ch, len_arrinfo(ar,0));
		arryout(ch, ar[w1], len);
	
		wordout(ch, cvsix("TREE"));
		arryout(ch, tree[0], tree[0]+2+1);

		wordout(ch, cvsix("FREQ"));
		wordout(ch, w1_arrinfo(freq,1));
		wordout(ch, len_arrinfo(freq,0));
		arryout(ch, freq[w1], len);

		wordout(ch, cvsix("EOF"));
		print("written");
		done;
	      end;
      end;
release(ch);
end;
r!p(map1) procedure setupRing( integer chan, lookAhead );
begin	r!p(map1) bHead, bTail, pg;
	integer pageNum;
lookAhead_ lookAhead max 2;
bHead_ bTail_ map1Cr( 0, 511 );
map1:up[bTail]_ bHead;
for pageNum_ 1 step 1 until lookAhead
   do begin
	if 0 > getmap( bHead, "R", chan, pageNum )
	 then begin
		map1:up[bTail]_ null!record;
		done;
	      end;
	map1:ui[bHead]_ pageNum;
	bTail_ bHead;
	bHead_ map1Cr( 0, 511 );
	map1:up[bHead]_ map1:up[bTail];
	map1:up[bTail]_ bHead;
      end;
if map1:up[bHead]=null!r
 then begin
	getmap( bHead, "Z", 0,0);
	return(null!r);
      end;
return(bHead);
end;
integer procedure analyze(integer chan; reference integer eof);
! returns the number of words needed;
BEGIN
	r!p(map1) bHead, bTail;
	integer pageNum, abjp;
	own safe integer array buf[0:511];
if null!r = Bhead_ setupRing( chan, 4 ) then return(0);
BTail_ Bhead;
while null!r neq map1:up[bTail] neq bHead do bTail_ map1:up[bTail];
pageNum_ map1:ui[bTail] + 1;
while true
   do begin
	if map1:up[bTail]
	 then if 0 > getmap( bHead, "R", chan, pageNum_ pageNum + 1 )
		 then map1:up[bTail]_ null!record
		 else bTail_ bHead
	 else getmap( bHead, "U", 0,0 );
	bHead_ map1:up[bHead];
	if map1:up[bHead] 
	 then begin 
		abjp_ -512 lsh 18 + location(map1:a[bHead][0]);
		frq1p( abjp ); 
		frq1px( abjp );
	      end
	 else done;
      end;
useti(chan, pageNum*4 + (1-4-4));
arryin(chan, buf[0], 513);
getmap( bHead, "U", 0,0 );
abjp_ -eof lsh 18 + location(buf[0]);
frq1p( abjp ); frq1px( abjp );
if not eof then usererr(0,1,"Hunh?? more words past last page");
return( (pageNum-2) * 512 + !rh(eof) )
end;
define #len=100;
record!class bf (integer array a; r!p(bf) nxt );
r!p(bf) tail;

integer procedure outBuffer;
begin
	integer array buf[0:#len];
	integer retval;
	r!p(bf) nxt;
retval_ -#len lsh 18 + location(buf[0]);
nxt_ new!record(bf);
memory[location(buf)] swap memory[location(bf:a[nxt])];
if tail
 then begin
	bf:nxt[nxt]_ bf:nxt[tail];
	bf:nxt[tail]_ nxt;
      end
 else bf:nxt[nxt]_ nxt;
tail_ nxt;
return(retval);
end;

integer procedure recover;
begin
	integer retval;
if tail
 then begin
	integer array dump[0:0];
	memory[location(dump)] swap memory[location(bf:a[tail])];
      end
 else begin usererr(0,1,"Oops, read twice!"); return(0); end;
tail_ bf:nxt[tail];
return( if tail
	 then -#len lsh 18 + location( bf:a[tail][0] )
	 else 0 )
end;
procedure dumprest(integer code, chan; reference integer eof );
begin	integer ln, file;
	r!p(map1) head, tail, tmp;
	integer procedure page;
	 begin
	 if map1:up[tail]
	  then if 0 < getmap( head, "R", chan, page_ map1:ui[tail]+1 )
		 then map1:ui[tail_ head]_ page
		 else map1:up[tail]_ null!r
	  else getmap( head, "U", 0,0 );
	 if head_ map1:up[head]
	  then if map1:up[head]
		then return( (-512 lsh 18) + location(map1:a[head][0]) )
		else begin	integer array buf[0:512];
			useti(chan, map1:ui[head] * 4 - 3);
			arryin( chan, buf[0], 513 );
			if not eof then usererr(0,1,"Fatal file size");
			return( -eof lsh 18 + location(buf[0]) )
		     end;
	 return(0)
	 end;
case abs code of
   begin
    [6]	ln_ if code>0 then pass1b( A.6 ) else pass1b( B.6 );
    [7]	ln_ if code>0 then pass1b( A.7 ) else pass1b( B.7 );
    [9]	ln_ if code>0 then pass1b( A.9 ) else pass1b( B.9 );
    [else] begin print("Unacceptable code = ", code ); return end
   end;
print( tree[0], "+", file_ ln-tree[0], "M=", mangle(code) );
if null!r = head_ setupRing( chan, 4 ) then return;
!***rHead_ setupRing( chan, 4 );
while head neq map1:up[tail] neq null!r do tail_ map1:up[tail];
!***print( crlf & "squish: ", squish( code, 0,page, 0,outBuf ) );
!***print( crlf & "bloat: ", bloat( code, 0,getOutArea?, 0,verify? ) );
end;
IFCR $ctx THENC	CONTEXT best;
	 ELSEC	integer bc, bw;
		safe integer array btree, bfreq [0:'1400];
		simple procedure makesure;
		begin 
		if arrinfo(tree,0) > arrinfo(btree,0)
		 then usererr(0,1,"Btree too small for tree");
		if arrinfo(freq,0) > arrinfo(bfreq,0)
		 then usererr(0,1,"Bfreq too small for freq");
		end;
		require makesure initialization;
ENDC

	INTEGER Code, words;
! typical use:;

	PROCEDURE try( integer codeVal; INTEGER ARRAY ar );
	 BEGIN INTEGER wrd, tree0; string ms;
	 code_ codeVal;
	 wrd_ pass1b(ar);
	 tree0_ tree[0];
	 print("Code ", code, ": ", wrd, " words = ", 
		tree0, " tree + ", wrd - tree0, " file",
!	" [", tree[tree0+2] % 36, "+", tree[tree0+2] mod 36, " bits]", ;
		", ", tree[tree0+1], " `bytes'. " );

	 IF 0 < wrd < words  AND  tree0 < '1000+'200-1
	  THEN BEGIN 	INTEGER len;
		print( " (*)" );
		words_ wrd;
IFCR $ctx THENC	REMEMBER code, words, tree, freq IN best;
	 ELSEC	bc_code; bw_words; 
		arrtran(btree,tree); arrtran(bfreq,freq); 
ENDC
	       END;

	 while "?" = ms_ reply(" ?") 
	    do print(
"DUMP to output this data to a file, anything else to proceed." & crlf);
	 if kequ(ms,"DUMP") then bdump(wrd, code, ar);

	 END;

	INTEGER size, abjp, chan,eof,blocksize;
	STRING s;

Comment	... set up chan mode 8(='10) with eof vbl, choose blocksize ...;
ttyup(true);
open(chan_getchan,"DSK", '10000+8, 4,0, 0,0,eof);
while true 
   do begin "one file"
	label optimize;
	String file; boolean flag;

	lookup(chan, file_ reply(" File to check: "), flag);
	if flag
	 then begin	integer tmp;
		if equ(file,"AGAIN") then go optimize
		elif equ(file,"D.WRITE") then adump(size)
		elif equ(file,"D.READ")
		 then if 0 < tmp_ aread(chan)
			then begin size_ tmp; go optimize end
			else print("Cannot do the read: ", tmp)
		elif equ(file,"EXIT") or equ(file,"QUIT") 
		 then call(1,"EXIT")
		elif equ(file,"BAIL") then usererr(0,1,"OK","B")
		 else print("Sorry, file, D.READ, D.WRITE, or QUIT only."); 
		continue 
	      end;

	ARRCLR(a.6); ARRCLR(a.7); ARRCLR(a.9); 
	ARRCLR(b.6); ARRCLR(b.7); ARRCLR(b.9); 
	size_ analyze(chan,eof);
	optimize:
	print( size, "-word file
");
	Code_ 0; words_ size+4;		comment for a little overhead;
	tree[0]_ 0;
IFCR $ctx THENC	REMEMBER code, words IN best;
	 ELSEC	bc_code; bw_words; 
ENDC
	try(6, a.6); try(7, a.7); try(9, a.9); 
	try(-6,b.6); try(-7,b.7); try(-9,b.9); 

IFCR $ctx THENC	REMEMBER code, words, tree, freq IN best;
		RESTORE all FROM best;
	 ELSEC	code_bc; words_bw;
		arrtran(tree,btree); arrtran(freq,bfreq); 
ENDC
	print("
Best encoding is ", Code, " at about ", words, " words.
");
	 while "?" = s_ reply(" ?") 
	    do print(
"DUMP to output this data to a file, anything else to proceed." & crlf);
	 if kequ(s,"DUMP")
	  then case 9+code of begin
		[9+6] bdump(words, code, a.6); 
		[9+7] bdump(words, code, a.7); 
		[9+9] bdump(words, code, a.9);
		[9-6] bdump(words, code, b.6); 
		[9-7] bdump(words, code, b.7); 
		[9-9] bdump(words, code, b.9);
		[else] usererr(code,2,"What a code!")
		end;

      end "one file"
END


    