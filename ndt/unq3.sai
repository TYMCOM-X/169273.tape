begin "unique"
require 1 version;
require "(SAILIB)SAIL.DEF" source!file;
! version 1: pass one only, file format at 3 words per, un-merged;

!get!definitions(assert);
!get!module(mapping);
!get!module(extend);
define debugging=false;

ifcr debugging thenc
	let routine=procedure;
	define dbg(x)="x";
	define safe="";
elsec 
	define dbg(x)="";
	define routine="simple procedure";
endc

integer routine inc(reference integer val);
	start!code aos 1,val; end;

string routine reply( string prompt );
begin
dbg(	string reply; 
	while true do begin
)
print(crlf, prompt); 
dbg(	if kequ(reply_inchwl, "bail") then usererr(0,1,"","B")
	else if kequ(reply, "error") then usererr(0,1,"You rang")
	else if kequ(reply, "raid")
		 then start!code external integer $i; jsr $i; end
	else return(reply)
	end;
)
return(inchwl) 
end;

string routine string6( integer sixbit );
	if sixbit=0
	 then return(null)
	 else begin	string result; integer l;
		result_ cvxstr(sixbit);
		for l_ 6 step -1 while sixbit land '77=0 
		   do sixbit_sixbit lsh -6;
		return(result[1 for l]);
	      end;
! file structure:  (ver 1)
    page layout: word 0: ????
	word 1: count of files on page
	word 2:4 first file, word 5:7 second file, ...
	entries are filled from 1 up
    entry layout (file records)
	base+0: blockSize,,ext
	base+1: filename
	base+2: ppn
;
define	matrix!offset=2,
	!size!ext=0, !fname=1, !ppn=2,
	elem!min=0, elem!max=2, file!min=1, 
	file!max = (512 - matrix!offset) % (elem!max + 1 - elem!min);
! page array is [ file!index=1:51, elem!index=0:9 ];
r!p(map1) procedure countMake; return( map1cr(-1,0) ); 
r!p(map2) procedure matMake; return( map2cr( file!min, file!max, 
				elem!min, elem!max, matrix!offset ) );
routine pageError( integer code; string attempted );
begin
print("Paging error during ", attempted, "
Error from GETMAP, code ", !rh(code), " in phase ", code ash -18 );
usererr(0,0,"Oh well, this is too terrible");
end;

routine opfileError( integer code; string attempted );
begin
print("
File access error during ", attempted, "
Error from OPFILE, code ", !rh(code), " in phase ", code ash -18,"
");
end;
routine PrintOneFile( integer bpt );
begin	integer t;
print( (t_ldb(bpt)) ash -18," Blocks," & #ht );
print( string6(	ildb(bpt) ), ".", string6( !hl(t) ), 
     "[", cvos(!lh(ildb(bpt))), ",", cvos(!rh(ldb(bpt))), "]" & crlf );
end;

procedure summarize( integer tableChan );
begin	integer page, count;
	r!p(map1) dpage;
	r!p(map2) data;
dpage_ countmake;
data_ matmake;
for page_ 1 step 1 while 0 < getmap(dpage,"R",tableChan,page)
   do begin	integer code;
	print(crlf & #ht & #ht, count_map1:a[dpage][0], " files", crlf);
	if count > 0
	 then if 0 geq code_ getmap(data,"R",tableChan,page)
	   then pageError( code, "Reading a page I just read!!!")
	   else begin "perpage"	integer bptr; own integer delta;
		if delta=0
		 then delta_ location(map2:a[data][file!min+1,elem!min])
			   - location(map2:a[data][file!min,elem!min]);
		bptr_ point( 36, map2:a[data][file!min,elem!min], 35 ) 
			- delta;
		for count_(count min file!max)-file!min step -1 until 0
		   do PrintOneFile( bptr_ bptr + delta );
	        end;
	print( crlf & #ff );
      end;
getmap(dpage,"Z",0,0);
getmap(data, "Z",0,0);
end;
routine dswap(reference integer vecA, vecB);
begin!code	define a=1,b=2,c=3;
	movei	A,vecA;
	movei	B,vecB;
FORC $pos= 0 STEPC 2 UNTILC elem!max-elem!min-1 DOC {
	dmove	C,$pos(A);
	exch	C,$pos(B);
	exch	C+1,$pos+1(B);
	dmovem	C,$pos(A);
} ENDC
IFCR (elem!max-elem!min) land 1 = 0
THENC	move	C,elem!max-elem!min(A);
	exch	C,elem!max-elem!min(B);
	movem	C,elem!max-elem!min(A);
ENDC
end;

boolean routine outOrd( reference integer vecA, vecB );
if veca = vecb neq 0
 then begin	integer pA, pB, i;
	pA_ point(36,vecA,35);
	pB_ point(36,vecB,35);
	for i_ elem!min+1 step 1 until elem!max
	  do if ildb(pA) neq ildb(pB)
		 then return( ldb(pA) < ldb(pB) ); 
	return( false ); 
      end
 else return( veca < vecb );
procedure keysort( safe integer array data; integer top );
begin	! schell sort of data[1:top,xxx];
	integer incr,b,ind,lind;
incr_ top;
while (incr_ incr lsh -1)
  do for b_incr step -1 until 1
    do for ind_b+incr step incr until top
	   do while outOrd( data[lind_ind-incr,elem!min], 
				data[ind,elem!min] )
		do begin dswap(data[ind,elem!min], data[lind,elem!min]);
			ind_lind; if ind leq incr then done; end;
					! same as ind-incr < 1;
end;
integer procedure addFileList( string fileSpec; integer outChan;
			reference integer totalSize );
begin
	own r!p(map2) data;
	own r!p(map1) page;
	own integer pageNumber;
	procedure spin;
	begin	integer code;
	for pageNumber_ pageNumber+1 step 1 while true
	   do begin
		if 0 geq code_ getmap( page, "O", outChan, pageNumber )
		 then pageError( code, "Old access to page " 
					& cvs(pageNumber) )
		 else if map1:a[page][0] < file!max then done;
	      end;
	if 0 geq code_ getmap( data, "O", outChan, pageNumber )
	 then pageError( code, "second Old map of page " 
				& cvs(pageNumber) );
	end;

	boolean procedure writeOne( safe integer array passed );
	begin	integer file, outPtr;
	if pageNumber<1 or map1:a[page][0] geq file!max then spin;
	file_ inc(map1:a[page][0]);
	outPtr_ point( 36, map2:a[data] [file, !size!ext], 35 );
	assert( 0 = (abs passed[2]) land !hl(-1) = !rh(passed[1]) );
	dpb( (!rh(passed[2]) lor passed[1]) rot 18,  outPtr );
	dpb( passed[0],  outPtr + (!fname-!size!ext) );
	dpb( passed[-1], outPtr + (!ppn-!size!ext) );
	if file=file!max then keysort( map2:a[data], file );
	return(false);
	end;
	integer oldPage, oldIndex, Index;
pageNumber_ 0;
page_ countMake; 
data_ matmake; 
spin;
oldPage_ pageNumber;
oldIndex_ map1:a[page][0];
redufd( writeOne, fileSpec, "#*B" );	! did have LCS;
Index_ map1:a[page][0];
getmap(page,"Z",0,0);
if index < file!max
and pageNumber neq oldPage or index neq OldIndex
 then keysort( map2:a[data], index );
getmap(data,"Z",0,0);
totalSize_ (pageNumber-1) * file!Max + index;
return( (pageNumber - oldPage) * file!Max + index - oldIndex );
end;
define declareSort(procname,simpleCode)={
procedure wordSort( safe integer array data; integer top );
begin	! schell sort of data[1:top];
	integer incr,b,ind,lind;
incr_ top;
while (incr_ incr lsh -1)
  do for b_incr step -1 until 1
    do for ind_b+incr step incr until top
	   do while data[ind] > data[ind-incr] 
		do begin data[ind] swap data[lind_ ind-incr];
			ind_lind; if ind leq incr then done; end;
					! same as ind-incr < 1;
end;
procedure wordSort( safe integer array data; integer top );
start!code	! schell sort of data[1:top];
		integer incr,b,ind,lind;
	movei	rDind,access(data[0]);	! rDind -> data[ind];
	hrli	rDind,rInd;
	move	rInc,top;		! incr_ top;
	movei	rTop,(rInc);
outtop:	ash	rInc,-1;		! while (incr_ incr lsh -1) do;
	jumple	rInc,return;
	move	rDindP,rDind;		! rDindP -> data[ind-incr];
	subi	rDindP,rInc;
	movei	rB,(rInc);		! for b_incr step -1 until 1 do;
forl1:	jumple	rB,outtop;
	movei	rInd,b;		! for ind_b+incr step incr until top do;
forl2:	addi	rInd,(rIncr);
	caile	rInd,(rTop);
	 soja	rB,forl1;
whlp:	move	0,@rDindP;	! while data[ind] > data[ind-incr] do;
	camle	0,@rDind;
	 jrst	forl2;
				! begin;
	exch	0,@rDind;	! data[ind] swap data[lind_ ind-incr];
IFCR simpleCode THENC
	movem	0,@rDindP;
	subi	rInd,(rIncr);	! ind_lind; 
	caile	rInd,(rIncr);	! if ind leq incr then done;
	 jrst	whlp;			! same as ind-incr < 1;
	jrst	forl2;
ELSEC
				! <<now 0 belongs in data[lind]>>;
	subi	rInd,(rIncr);	! ind_lind; 
				! <<now 0 belongs in data[ind]>>;
	caile	rInd,(rIncr);
	 camg	0,@rDindP;	  ! note reversed compare;
	  jrst	forl2!storD;
	exch	0,@rDindP;	  ! still positions reversed;
	movem	0,@rDind;	  ! now data[] ok, 0 has data[ind-incr];
	subi	rInd,(rIncr);
	caile	rInd,(rIncr);
	 jrst	whlp;
	jrst	forl2;
forl2!stord:
	movem	0,@rDind;
	jrst	forl2;
ENDC
return:
end;
};
integer ouch;
string ouchName;	! name of simulated directory file;
string fileSpec;
integer totalFiles;	! total number of files in ouch right now.;

while 0 > ouch_ opfile(ouchName_ reply("File specs file: "), "RWBM", 16)
   do opfileError( ouch, "Trying to set up " & ouchName );

totalFiles_ 1;
while length(fileSpec_reply("File Group: "))
do if kequ(filespec,"help") or filespec="?"
   then print("Type wild-card spec for desired files, or <cr> for done")
   else print(  addFileList( fileSpec, ouch, totalFiles ), 
		" new files, for a total of ", totalFiles );

if totalFiles and length(fileSpec_reply("Text summary to file: "))
 then begin
	if not( kequ(fileSpec,"TTY:") or kequ(fileSpec,"TTY") )
	 then setprint( fileSpec, "F" );
	summarize(ouch);
	setprint(null,"T");
      end;
print("Till later ...");
end;
  