begin "checksummer"
require 6 version;

require "[][]" delimiters;
define !=[Comment], nul=[(0&null)], ff=[('14&null)], cr=[('15&null)],
	lf=[('12&null)], tab=[('11&null)], space=[('40&null)],
	crlf=[('15&'12)];
external integer !skip!;

integer readTable,passWhite,upWord,colonBreak,readCommands;

simple procedure setTables;
begin
setbreak(readTable_getbreak, null, nul&cr, "INSZ");
setbreak(passWhite_getbreak, space&tab, null, "XNR");
setbreak(upWord_getbreak, space&tab, null, "INSK");
setbreak(colonBreak_getbreak, ":", null, "INS");
setbreak(readCommands_getbreak, lf, cr&ff, "INS");
end;
 require setTables initialization;

string simple procedure checkName( integer x );
! returns a 6-character representation of the checksum number
  provided (of the form: BACDEF where the consonants and vowels may
  be any consonant or vowel in that position.  This is supposed to
  be easier to remember and/or speak than simple numeric digits
  would be.  Obviously, this does not fully encode the word (so
  what, it is a checksum after all).
;
begin "checkName"

simple integer procedure remndr( reference integer val; integer dvsr );
! does the "obvious": returns remainder and reduces base by dividing.
  This is the kind of function you really want for producing digits
  in a base N number (gives them backwards).
;
    start!code
	move	0,val;	! get the number;
	idiv	0,dvsr;	! put val div dvsr in ac0, val mod dvsr in ac1;
	movem	0,val;	! store reduced base (ac1 is SAIL's return ac;
    end;

preload!with "A"+0,"E"+0,"I"+0,"O"+0,"U"+0;
 own safe integer array vowel[0:4];

simple integer procedure consonant( reference integer x );
! get the "next" character as a consonant and reduce the base.
  the consonant is: 0:24 map to obvious character, if vowel,
  then change: A=>V, E=>W, I=>X, O=>Y, U=>Z
;
      begin	integer ch,i;
	ch_ "A" + remndr(x,26-5);
	for i_ 4 step -1 until 0
	   do if ch=vowel[i] then return("Z"-4+i);
	return(ch);
      end;

x_x land (-1 lsh -1);
	! clear sign bit (divide won't be nice otherwise);
return( consonant(x) & vowel[remndr(x,5)] & consonant(x)
	& consonant(x) & vowel[remndr(x,5)] & consonant(x) );
end "checkName";

integer procedure textSum( integer channel; reference integer eof );
! read text from the channel and produce a checksum.
;
begin "textSum"	string s; integer textSum;
textSum_0;
eof_false; s_null;
while not eof
   do begin
	s_s& input( channel, readTable );
	while length(s) geq 5
	   do begin 
		textSum_ (-1 lsh -1 - 1) min
				(((textSum+1) rot 8) xor cvasc(s));
		s_s[6 to inf];
	      end;
      end;
if length(s) then textSum_ ((textSum+1) rot 8) xor cvasc(s);
return( textSum rot -7 );
end "textSum";

integer procedure binarySum( integer channel; reference integer eof );
begin
	integer checksum;

checksum_ -1;
while not eof
   do checksum_ (((checksum+1) rot 7) xor wordin(channel))
		min (-1 lsh -1 - 1);
return(checksum rot -7);
end;

integer chan,cnt,brk,eof;

simple integer procedure openup( string fileName;
			integer mode(0); boolean write(false) );
begin "openup"
	string device;
	integer ch;
device_ scan( fileName, colonBreak, ch );
if ch neq ":" then begin fileName_ device; device_ "DSK"; end;
open(ch_getchan,device,mode lor '10000,	! catch ill-formed file names;
	if write then 0 else 4, if write then 4 else 0,
	cnt_500,brk_0,eof_0);
if eof then begin release(ch); return(-1); end;
if write
 then enter(ch,fileName,eof)
 else lookup(ch,fileName,eof);
if eof then begin release(ch); return(-2); end;
return(ch);
end "openup";
integer commandChannel;
own integer array commandStack[0:32];	! why not be excessive;


simple procedure abortCommandFiles;
for commandChannel_ commandChannel step -1 until 0
   do release( commandStack[commandChannel] );
simple string procedure getline;
while true do
begin "getline"		string result;
if commandChannel < 0
 then begin outstr(crlf & "File(s): "); result_inchwl; end
 else begin
	result_ input( commandStack[commandChannel], readCommands );
	if eof 
	 then begin
		release(  commandStack[commandChannel] );
		commandChannel_ commandChannel-1;
		scan(result,passWhite,!skip!);	! to check for blank;
		if length(result)=0 then continue "getline";
	      end;
      end;
scan(result,passWhite,!skip!);
if result = "@"
 then begin
	commandChannel_ commandChannel+1;
	result_ result[2 to inf];
	if (commandStack[commandChannel]_openUp(result)) < 0
	 then begin
		print(crlf,"Couldn't open indirect file """,result,""".");
		commandChannel_ commandChannel-1;
		abortCommandFiles;
	      end;
      end
 else if commandChannel < 0 or length(result) > 0
	then return(result);
end "getline";

simple string procedure getword( reference string line );
begin	string result;
result_ scan(line,upWord,!skip!);
scan(line,passWhite,!skip!);
return(result);
end;

define file= "record!pointer (file)";
record!class file
	(integer binary.checksum, text.checksum;
	 string Name, descr;
	 fileP link);

procedure writeSum( integer chan; fileP it );
cprint(chan,"
*", cvos( file:binary.checksum[it] ),
" $", cvos( file:text.checksum[it] ),
" ", file:name[it], ": ", file:descr[it] );

fileP procedure readSum( string procedure getline );
begin	string line;
while length(copy_ line_ getline)
   do begin	fileP it; integer brk;
	scan(line, passWhite, brk);
	if brk=0 then continue;
	it := new!record(file);
	if brk neq "*" then format("no binary checksum");
	file:binary.checksum[it]_ cvo(scan(line,upWord,brk)[2 to inf]);
	scan(line, passWhite, brk);
	if brk neq "$" then format("no text checksum");
	file:text.checksum[it]_ cvo(scan(line,upWord,brk)[2 to inf]);
	scan(line, passWhite, brk);
	if 0 neq brk neq ":"
	 then file:name[it]_ scan(line,colonBreak,brk)
	 else format("no file name");
	scan(line, passWhite, brk);
	file:descr[it]_ line;
	return(it);
      end;
return(null!record);
end;
string s,file,actualSum,storedSum;
integer outputChannel, prevailingMode;

outputChannel_ commandChannel_ -1;
while length(s_ getline)
   do begin "single line"	integer mode;
	if s=";"
	 then begin
		if outputChannel geq 0
		 then cprint(outputChannel,crlf&tab&tab, s);
		continue "single line";
	      end;
	file_ getword(s);
	storedSum_ if s=";" then null else getword(s);
	if length(s) and s neq ";"
	 then begin
		print(crlf&"Comment expected: ", s );
		abortCommandFiles;
		continue "single line";
	      end;
	if equ(file,"OUTPUT:")
	 then begin
		if outputChannel geq 0 then release(outputChannel);
		if (outputChannel_openup(storedSum,0,true)) < 0
		 then begin
			print(crlf, "Couldn't open output file """,
				storedSum, """." );
			abortCommandFiles;
		      end;
		continue "single line";
	      end;
	if equ(file,"MODE:")
	 then begin
		if equ(storedSum,"TEXT") or equ(storedSum,"$")
		 then prevailingMode_ 0
		 else if equ(storedSum,"BINARY") or equ(storedSum,"*")
			 then prevailingMode_ '14
			 else begin
				print(crlf,"Bad MODE set, keeping ",
					if prevailingMode
					 then "BINARY" else "TEXT");
				abortCommandFiles;
			      end;
		continue "single line";
	      end;
	if storedSum="$" or storedSum="*"
	 then mode_ if lop(storedSum)="*" then '14 else 0
	 else mode_ prevailingMode;
	if 0 leq (chan_ openup(file,mode))
	 then actualSum_ checkName( if mode='14
					then binarySum(chan,eof_false)
					else textSum(chan,eof_false) )
	 else begin
		print(crlf,"Couldn't read file """, file, """." );
		if outputChannel geq 0
		 then begin
			cprint(outputChannel,crlf,file,
			    if mode='14 then tab&"*" else tab&"$" );
			if s=";" then cprint(outputChannel, " ", s);
		      end;
		continue "single line";
	      end;
	release(chan);
	if length(storedSum) and not equ(storedSum,actualSum)
	 then print(crlf,file," *** ",actualSum," [not ",storedSum,"]")
	 else print(crlf, file,
			if mode='14 then " *" else " $", actualSum );
	if outputChannel geq 0
	 then begin
		cprint(outputChannel,crlf,file,
		    if mode='14 then tab&"*" else tab&"$", actualSum );
		if s=";" then cprint(outputChannel, " ", s);
	      end;
      end "single line";
if outputChannel geq 0 then release(outputChannel);
end "checksummer".
  