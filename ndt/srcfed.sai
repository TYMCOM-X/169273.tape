begin "srcfed"
COMMENT generates SRCCOMs of base and copy files from .COR files;
require 2 version;

require "(sailib)sail.def" source!file;
define routine="simple procedure", elif="else if", inc(x)="x_x+1";

integer lineBreak, lineSpin, FileSplit, Pretty;
  simple procedure setup; 
	begin
	setbreak(FileSplit_getbreak, "_" & #cr, null, "IS");
	setbreak(lineBreak_getbreak, #lf&#ff,"","IS");
	setbreak(lineSpin_ getbreak, #ff, #lf&#ff, "IUA");
	setbreak(pretty_getbreak, '177 & """"
		FORC ##=0 STEPC 1 UNTILC #sp-1 DOC {&##}ENDC,null,"IR");
	end;
  require setup initialization;

integer cnt,brk,eof;

integer routine getinput(string prompt; reference string name;
			string default(null));
begin	integer chan; boolean flag;
open(chan_getchan,"DSK",'10000, 4,0, cnt,brk,eof);
  do  begin	string name;
	outstr(prompt);
	if length(default)
	 then begin outstr(" ["); outstr(default); outstr("]: "); end;
	if length(name_inchwl)=0 then name_ default;
	lookup(chan, name, flag);
      end
 until not flag;
return(chan);
end;

string text, lastRead;

boolean routine reads( integer chan, table );
	begin lastRead_ text_ input(chan, table); return(not eof); end;

integer line 			! current positions in correction file;
;

routine pause;
      begin
	print( crlf & "Type anything to proceed: " );
	if inchrw=#cr then inchrw;
      end;

routine failedAssert( string test, why );
      begin	integer b; string lr;
	lr_ lastRead;
	print( crlf& crlf& "Error on ", line, ": """, 
		scan(lr,pretty,b), """" );
	while length(lr)
	   do if """" = b_lop(lr)
		 then print( null & b, scan(lr,pretty,b), """" )
		 else begin	string s;
				preset!with "tab","lf","vtab","ff","cr";
				own string array nams[#ht:#cr];
			if #ht leq b leq #cr
			 then print( " & ", nams[b] )
			 else print(" & '", cvos(b));
			if length( s_ scan(lr,pretty,b) )
			 then print( " & """, s, """" );
		      end;
	print( ", Brk='", cvos(Brk), crlf, test );
	if length(why) then print( " {{", why, "}}" );
	pause;
      end;
define assert(condition,reason)={
if condition then else failedAssert( cvps(condition), cvps(reason) )};
boolean routine accept(string proposition);
while true 
   do begin	string response;
	outstr(proposition); outstr("  Is this OK: ");
	if equ(response_inchwl, "YES"[1 for length(response)])
	or equ(response, "OK"[1 for length(response)])
	 then return(true);
	if equ(response, "NO"[1 for length(response)])
	 then return(false);
	outstr("Answer <cr> or YES if this is OK, NO otherwise." &crlf);
      end;

integer routine chooseSpacing(string name; integer default);
while true 
   do begin	string response;
		integer num;
	print("Number of lines of ", name, " [", default, "]: ");
	if length(response_inchwl)=0 then return(default);
	if 0 > num_ intscan(response,brk)
	 then outstr("MUST be a positive number."&crlf)
	 else if brk < 0 
		then outstr(
"Each change is surrounded by leader and trailer lines, which show the 
context of the change.  The value given in the brackets is the default
value (what you get for a <cr> to this question).  Values too large
(greater than 3 normally) may prevent some leader context from being
seen, or (in the case of trailers), obscure the base source for the 
next change.  Answer either with <cr> or a number.
")
		else return(num);
      end;
string CorrectionFile, baseFile, producedFile;
boolean	fileStarted	! true iff inside a file;
,	firstInsertion	! if true, no insertion performed yet;
;
integer	LastCommand 	! "line" at last command (position in .COR);
,	delete		! if non-zero, end of del command (pos in BASE);
,	ChangeLine	! last line deleted (or insert point) (in BASE);

,	baseChan	! channel for the base file to be opened on;
,	ouch		! channel for output;

,	changeLead	! top lines to display;
,	changeTrail	! bottom lines to display;

,	baseLines	! number of lines passed in base file;
,	basePages	! number of page marks passed in base file;
,	baseLastPage	! line no. of last passed page mark in base;

,	resultLines	! number of lines passed in result file;
,	resultPages	! number of page marks passed in result file;
,	resultLastPage	! line no. of last passed page mark in result;

,	savedLines	! number of lines passed in trailer if needed;
,	savedPages	! number of page marks passed in ...;
,	savedLastPage	! line no. of last passed page mark in ...;
;
routine resultAdvance;
begin
if brk=#ff
 then begin
	inc(resultPages);
	resultLastPage_ resultLines;
      end;
inc(resultLines);
end;

routine baseAdvance;
begin
if brk=#ff
 then begin
	inc(basePages);
	baseLastPage_ baseLines;
      end;
inc(baseLines);
end;

routine trailAdvance;
begin
if brk=#ff
 then begin
	inc(savedPages);
	savedLastPage_ savedLines;
      end;
inc(savedLines);
end;
routine Topline;
cprint(ouch, crlf, line, #ht, CorrectionFile, "  ", 
	baseFile, " -> ", producedFile, crlf & crlf );
routine startFile( string Result!Base );
begin	integer brChar;
assert(not fileStarted,"No multi-files yet");

producedFile_ scan( Result!base, FileSplit, brChar );
assert(length(producedFile) and brChar="_");

baseFile_ scan( Result!base, FileSplit, brChar );
assert(length(baseFile) and brChar=#cr and length(Result!base)=0);

ouch_ -1; Topline;
open(ouch_ getchan, "DSK",0, 0,4, 0,0,0);
  do  begin 	string name;
	print("Output file: "); 
	if equ(name_inchwl,"TTY:"[1 for length(name)])
	 then begin release(ouch); ouch_ -1; done; end;
	enter(ouch, name, brChar); 
      end
 until not brChar;
baseChan_ getinput( "Base file: ", baseFile, baseFile );

resultLastPage_ baseLastPage_ -1;
resultLines_ baseLines_ 0;
resultPages_ basePages_ 1; 
FirstInsertion_ true;
ChangeLine_ delete_ LastCommand_ 0;
fileStarted_ true;
end;
routine getUpTo( integer basePosition );
begin "getUpTo"		integer oBreak, oCnt;
basePosition_ basePosition-1;	! so we can go through;
oBreak_brk; oCnt_ cnt; eof_ false;
while 0 < cnt_ basePosition - baseLines - changeLead
   do begin	integer lines;
	lines_ length( input(baseChan,lineSpin) ) - 1;
	baseLines_ baseLines + lines;
	resultLines_ resultLines + lines;
	baseAdvance; resultAdvance; 
	if eof then done;
      end;
! if cnt < 0 then perhaps unQueueLine( text, brk, baseLastPage ) ...;
cnt_ oCnt;
if baseLines > basePosition
 then cprint(ouch,"*: missing ", baseLines - basePosition, " before: ",
	baseLines, " = ", basePages, ".", baseLines-baseLastPage, crlf);
while baseLines < basePosition and not eof
   do begin
	cprint(ouch, ":", basePages, ".", baseLines - baseLastPage, #ht,
		input(baseChan, lineBreak) );
	while brk=0 and not eof 
	   do cprint( ouch, input(baseChan, lineBreak) );
	baseAdvance; resultAdvance; 
	if brk=#ff
	 then cprint( ouch, crlf & ":<<base page ", basePages, 
			"=result page ", resultPages, ">>" & crlf)
	 else cprint( ouch, crlf );
      end;
if baseLines < basePosition
 then cprint(ouch,":EOF ", basePosition-baseLines, " lines early at: ",
	baseLines, " = ", basePages, ".", baseLines-baseLastPage, crlf);
brk_ oBreak;
end "getUpTo";
routine removeThrough( integer basePosition );
begin "removeThrough"	integer oBreak;
oBreak_brk;
if baseLines > basePosition
 then cprint(ouch,"-: missing ", baseLines - basePosition, " before: ",
	baseLines, " = ", basePages, ".", baseLines-baseLastPage, crlf);
while baseLines < basePosition
   do begin
	cprint(ouch, "-", basePages, ".", baseLines - baseLastPage, #ht,
		input(baseChan, lineBreak) );
	while brk=0 and not eof 
	   do cprint( ouch, input(baseChan, lineBreak) );
	baseAdvance;
	if brk=#ff
	 then cprint( ouch, crlf & "-<<base page ",
					basePages, ">>" & crlf )
	 else cprint( ouch, crlf );
	if eof then done;
      end;
if baseLines < basePosition
 then cprint(ouch,"-EOF ", basePosition-baseLines, " lines early at: ",
	baseLines, " = ", basePages, ".", baseLines-baseLastPage, crlf);
brk_ oBreak;
end "removeThrough";
routine trailContext( string title; boolean updateResult );
begin "Trailer"	integer oBreak, extension;
oBreak_brk;
for extension_ 1 step 1 until changeTrail
   do begin	string text;
	text_ input(baseChan, lineBreak);
	while brk=0 and not eof 
	   do text_ text & input(baseChan, lineBreak);
	cprint(ouch, ":", basePages, ".", baseLines - baseLastPage, #ht,
		text, crlf );
	! queueLine( text, brk, baseLastPage );
	baseAdvance;
	if updateResult then resultAdvance else trailAdvance;
	if brk=#ff
	 then cprint( ouch, ":<<base page ", basePages, ">>" & crlf );
	if eof
	 then begin
		cprint(ouch,"base: EOF" & crlf);
		done;
	      end;
      end;
cprint(ouch, "***** ", title, " *****" & crlf );
brk_ oBreak;
end "Trailer";
routine printNewLine( string text );
if equ(text,#ff)
 then cprint(ouch, "+<<result page ", resultPages+1, ">>" & crlf)
 else cprint(ouch, "+", resultPages, ".", resultLines - resultLastPage,
		#ht, text );
routine insertion;
begin	string storage;
assert(fileStarted and ChangeLine > 0);
if firstInsertion 
 then begin
	savedLastPage_ -1; savedPages_ savedLines_ 0;
	if delete then trailContext( "Replaced with:", false );
	FirstInsertion_ false;
      end;
if brk=#ff then assert(length(LastRead)=0,"Pages are their own lines");
printNewLine( LastRead & brk );
resultAdvance;
end;
routine endInsertion;
begin	integer t;
assert(fileStarted);
assert(ChangeLine>0 or Firstinsertion and delete=0,"Insert Where?");
if FirstInsertion and 0=delete then begin lastCommand_ line; return end;
if delete=0 or FirstInsertion
 then trailContext( if delete	then "End of Deletion" 
				else "End of Insertion", true )
 else begin
	if savedPages
	 then begin
		resultPages_ resultPages + savedPages;
		resultLastPage_ resultLines + savedLastPage;
	      end;
	resultLines_ resultLines + savedLines;
	cprint(ouch, "***** End of Replacement *****" & crlf );
      end;
FirstInsertion_ true; delete_ 0; LastCommand_ line;
end;
routine leadContext( string actionType );
begin
cprint(ouch, crlf & "***** ", actionType, " *****" & crlf );
if delete
 then begin
	getUpTo( changeLine );
	removeThrough( delete );
      end
 else getUpTo( changeLine_ changeLine+1 );
end;
routine shutFile; 
begin 
endInsertion; 
if ouch geq 0 then release(ouch); 
fileStarted_ false; 
end;

define passon=""; ! WAS: routine passon; ! cprint(ouch, LastRead & brk);

routine commandLine;
begin	integer nBreak; 
if text="!"
 then begin startFile( text[2 to inf] ); passon; return; end;

endInsertion;

if not ("0" leq text leq "9")
 then begin assert(0,"Numeric command expected"); return end;

ChangeLine_ intscan(text,nBreak);

if nBreak=":"	! checkPoint;
 then begin ChangeLine_ -ChangeLine; passon; return; end;

leadContext( if delete_ (if nBreak="," then intscan(text,nBreak) else 0)
		 then "Remove" else "Insert" );
if length(text)=0=nBreak
or nBreak=#cr and length(text)=1
 then return;

assert(length(text)=0=nBreak or nBreak=#cr and length(text)=1);
print(crlf, "UnKnown trailer: ", ChangeLine, "[", delete, "]", 
	", nBreak= '", cvos(nBreak), ", length(text)=", length(text),
		": ...""", text[1 for inf-1], """.");
pause;
end;
	external integer !JBVER;
	integer inch;
print(" SRCFED v", !JBVER lsh 18 lsh -18, " [SRCCOM from .CORs]"&crlf);

cnt_ 300;
ttyup(true);
while true
  do  begin
	changeLead_ chooseSpacing("Leader", 2);
	if 3 < changeTrail_ 
		chooseSpacing("Trailer", 1 max (3-changeLead))
	 then if accept( "You may loose the base for some changes with "
			& "a trailer greater than 3." & crlf)
		then done
		else continue
	 else if changeLead+changeTrail < 4 
		or accept("Trailer may hide some of the header."&crlf)
		then done;
      end;
while true 
   do begin
	inch_ getinput("COR file: ", CorrectionFile, null);
	fileStarted_false;
	for line_ 1 step 1 while reads(inch,lineBreak)
	 do if brk=#ff and length(text)
	  then print(crlf, line, " {unexpected page}: ", text, crlf )
	  else if lop(text)="-" and text neq "-"
		 then commandLine
		 else insertion;
	shutFile;
	print(crlf & crlf, line-1, " Correction lines in all." & crlf );
	release(inch);
      end;
end "srcfed" ;
