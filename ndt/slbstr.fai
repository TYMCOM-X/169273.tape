ENTRY CONSTR;
TITLE CONSTR
A__1
LPSA__13
TEMP__14
USER__15
SP__16
P__17
OPDEF ERR [XWD 5000,0]
CONSTR: ; simple string procedure constr( integer bytptr, count );
define bytptr,<-2(P)>
define count,<-1(P)>
EXTERNAL X33;
;	returns a string of length count that first character is 
;	the character ILDB(bytepointer).  The string is not garbage
;	collected (SAIL thinks of it as a constant string), and it
;	will change any time the corresponding bytes of information
;	in the area pointed to change.  Hence, the string (and all
;	substrings taken from it) is extremely unstable, so be very
;	careful when using this procedure.  Causes a continueable
;	USERERR if the bytepointer or count are invalid.
;
	SKIPL	LPSA,COUNT;	! verify string length not ridiculous;
	 CAIL	LPSA,377777;
	  JRST	[ERR [Asciz "CONSTR: bad count"]; ! ridiculous count;
		 MOVEI LPSA,0
		 JRST  RETURN]
	JUMPE	LPSA,RETURN;	! 0 count, return null string;
	MOVE	TEMP,BYTPTR;	! now check bytepointer;
	TDNN	TEMP,[XWD -1,-20];	! check for very nasty values;
	 JRST	BADPTR;
	TLCE	TEMP,-1;
	 TLCN	TEMP,-1;
	  HRLI	TEMP,440700;
	TLNN	TEMP,77;	! make sure no special addressing;
	 TLNN	TEMP,7700;	! make sure real byte size;
BADPTR:	  JRST	[ERR [Asciz "CONSTR: bad bytptr"]
		 MOVEI LPSA,0
		 JRST  RETURN]
RETURN:	PUSH	SP,LPSA;	! count goes first;
	PUSH	SP,TEMP;	! then bytepointer (maybe corrected);
	SUB	P,X33;			! unwind arguments, and ;
	JRST	@3(P);		! return  (string);
PRGEND	
ENTRY SUBEQU;
TITLE SUBEQU
A__1
LPSA__13
TEMP__14
USER__15
SP__16
P__17
SUBEQU: ; simple integer procedure subequ( string target, source );
EXTERNAL X44;
;	Returns the position of target in source or 0 if no match.
;	if subequ(t,s) then equ( t, s[subequ(t,s) for length(t)] ).
;	A null target NEVER produces a match.
; like:   if length(target)=0 then return(0)
;	  for i_ 1 step 1 until length(source)
;		do if equ(target,source[i for length(target)])
;		   then return(i)
;	  return(0)
;
;A:	source chars left
B__2	;target characters left
C__3	;current target character
;LPSA: source byte pointer
;TEMP: char from source
;USER:	;target byte pointer (in lup2)
;	PUSH	P,B	;save mangled ACs (when becomes SAFE)
;	PUSH	P,C	;save mangled ACs (when becomes SAFE)
	HRRZS	B,-3(SP);	! get target count;
	HRRZS	A,-1(SP);	! and source count;
;		! also: make simple numbers for lengths, constant strs;
;		! for minimal interrupt problems (since does ILDB);
	CAIG	B,0(A);		! longer target than source;
	 SOSGE	B,-3(SP);	! or null length target;
	  JRST	FAIL;		! are both considered mismatches;
;! Now we know that both byte pointers are good (ie at least 1-ch strs);
	IBP	-2(SP);		! point to first target character;
	SUBI	A,0(B);		! figure out how many matches to try;
;				! 1 + length(source)-length(target);
;! Now we are set.  Run along source looking for 1-char match;
LUP1E:	MOVE	LPSA,0(SP);	! get byte pointer to source;
	LDB	C,-2(SP);	! and first target character;
LUP1:	ILDB	TEMP,LPSA;	! lead character of source;
	CAME	TEMP,C;		! stop going if match;
	 SOJG	A,LUP1;		! or we can no longer match;

	JUMPE	A,FAIL;		! if we stopped on count, all done;
	JUMPE	B,GOOD1;	! if the target was only 1 char long, ;
;				!  then we have a match;
;! first character of target matches, how about the others;
	MOVE	USER,-2(SP);	! get private byte pointer for target;
	MOVEM	LPSA,0(SP);	! and save source pointer to match+;

LUP2:	ILDB	TEMP,LPSA;	! pull one from each;
	ILDB	C,USER;
	CAMN	C,TEMP;		! and loop until they dont match;
	 SOJG	B,LUP2;		! or we have exhausted the target;

	JUMPE	B,GOOD;		! if target exhausted, it was a match;
	MOVE	B,-3(SP);	! otherwise, reset the target count;
	SOJG	A,LUP1E;	! And go for next try on source;
;				! unless no more (we fail totally);
FAIL:;	MOVEI	A,0;		! return zero (failure) (A always 0);
RETURN:
;	POP	P,C	;restore mangled ACs (when becomes SAFE)
;	POP	P,B	;restore mangled ACs (when becomes SAFE)
	SUB	SP,X44;		! drop the argument strings;
	POPJ	P,;		! and leave;
GOOD:;				! match A=source chars trailing match;
	ADD	A,-3(SP);	! +l(target)-1= l(source[* to inf]);
GOOD1:	SUB	A,-1(SP);	! now get leading characters;
	MOVN	A,A;		! convert to positive;
	AOJA	A,RETURN;	! (+1 since the first character is #1);
PRGEND
ENTRY STRSTF;
TITLE STRSTF
A__1
LPSA__13
TEMP__14
USER__15
SP__16
P__17
STRSTF: ; simple integer procedure strstf( INTEGER byptr; string str
					;boolean nonull(false) );
DEFINE BYPTR,<-2(P)>
DEFINE NONULL,<-1(P)>
EXTERNAL X22,X33
;	Deposits str into byptr via idpb.  If nonull is false, (which
;	means that a trailing null is desired), then a null character
;	(ASCII 0) is deposited past the last character in the string.
;	Returns a bytepointer to the last character deposited from the
;	string (not the trailing null), or 0 if byptr is invalid.
;	This is useful for setting up JSYS calls that want either ASCIZ
;	strings, or bytepointer and updated bytepointer values.  The
;	return value is precisely the byte pointer that you want to
;	use if you want to deposit another string after the first one.
;	That is: strstf( strstf( byp, str1 ), str2 ) is the same as
;	strstf( byp, str1 & str2 ), except the concatenation is not 
;	actually performed.
;
	MOVE	A,BYPTR;	! get start byte pointer;
	TLCE	A,-1;		! apply 0 and -1 defaults;
	 TLCN	A,-1;
	  HRLI	A,(<POINT 7,0,-1>)
	MOVE	LPSA,(SP);	! str's byte pointer;
	HRRZ	USER,-1(SP);	! str's count;
	JRST	MOVCHK;		! and go to check in loop;

MOVLUP:	ILDB	TEMP,LPSA;	! pick up byte from string;
	IDPB	TEMP,A;		! place it in output area;
MOVCHK:	SOJGE	USER,MOVLUP;	! next byte (string still has chars);

	MOVEI	TEMP,0;		! get null byte to deposit after string;
	MOVE	LPSA,A;		! get a copy of the now-updated byte;
	SKIPN	NONULL;		! verify null byte to be deposited;
	 IDPB	TEMP,LPSA;	! and deposit it (if called for);
;				! Note: AC1 points to last REAL byte;
	SUB	SP,X22;
	SUB	P,X33;
	JRST	@3(P);
END

entry	ASZSTR, BYPOK, CONSTR, DYNSTR,
	STRACH, STRADD, STRCLS, STRLEN, STROPN, STRPEK,
	STRSTF, SUBEQU, UPDSTR;

begin "strlib"
define  ! = "comment", desr = "comment";
let decl = internal;

comment	All of the procedures in this package that take one or more
	byte pointers as arguments use code from bypok to correct
	the bytepointers before they are used.  as a result, HRROI-
	style bytepointers can be used, and a few other values for
	byte pointers that might not otherwise be valid can be used.
	For details, see the comment on bypok.
;
ENTRY BYPOK;
TITLE BYPOK
A__1
LPSA__13
TEMP__14
USER__15
SP__16
P__17
OPDEF ERR [XWD 5000,0]

BYPOK:	; simple integer procedure bypok( integer bytptr );
	PUSH	P,TEMP;		! ac saved (so eff addr calc works);
DEFINE BYTPTR,<-2(P)>
EXTERNAL X33;
;DESR	Returns an equivalent 7-bit byte pointer in the sail style if
;	the pointer is close enough (hrroi style pointers work),  and
;	returns 0 if the byte pointer cannot be made to work for sail
;	strings.  A fix has been added to allow location( x ) to work
;	the same way as point( 7, x, -1 ) (ie first byte of x) (Note:
;	This will not work for values 0-15, the accumulators).  With
;	the exception of a 0 or -1 left half, a non-zero return means
;	that ibp( bytepointer ) = ibp( bypok( bytepointer ) ).
;
	EXCH	A,BYTPTR;	! get the byte pointer to check;
	TLCE	A,-1;		! handle 0,,addr;
	 TLCN	A,-1;		! and -1,,addr;
	  HRLI	A,440700;	! (treat as asciz pointers);
	LDB	TEMP,[POINT 6,A,11];	! get byte size;
	CAIG	TEMP,44;	! make sure in [1:36];
	 JUMPG	TEMP,SIZOK;
BADBP1:	MOVEM	A,BYPTR;	! save the (current) value of bytptr;
	ERR 1,[ASCIZ "Bad byte pointer provided"]
	MOVEI	A,0;		! return value of 0;
	SUB	P,X33;
	JRST	@2(P);		! and return;

SIZOK:	TLNE	A,77;		! If any bits for address calc are on;
	 JRST	ADDRTS;		! then go resolve the problem;
RANGIT:	TRNN	A,777760;	! make sure not very low (hits Acs);
	 JRST	BADBP1;
	JUMPG	A,RETURN;
	TLNN	A,340000;	! a "ficticious" byte pointer?;
	 JRST	RETURN;
	TLNN	A,330000;	! beyond the range of mortal men?;
	 JRST	BADBP1;
	MOVEI	LPSA,44;	! make that the last byte of previous;
...
	LDB	TEMP,[POINT 6,A,5];	! get byte position;
RETURN:	SUB	P,X33;
	JRST	@2(P);		! and return;
...
addrts:	push	p,[=50];	! we assume 50 indrects is a loop;
;				! now P is off by 1;
	tlne	a,40;		! if "wierd byte pointer" bit on;
	 jrst	badbp1;		! say bp is bad (but store val first);
chk17:	tlc	a,17;		! make sure not indexing on 17;
	tlcn	a,17;
	 jrst	badbp1;		! say bp is bad (but store val first);
	tlze	a,20;		! while indirect on;
	 jrst	[sosle	(P);	! make sure not too many indirects;
		  jrst	badbp1
		 push	p,a;	! save the byte pointer;
;				! now P is off by 2;
		 move	a,-2+bytptr; ! get original A back (P off by 2);
		 ldb	a,[point 23,@(P),35]
		 dpb	a,[point 23,(P),35]
		 pop	p,a;	! get new (one-level advanced) byte ptr;
;				! now P is off by 1;
		 jrst	chk17];	! and keep chasing eff addr;
	sub	p,x11;		! all done with indirect counter;
;				! now P is correct again;
	exch	a,bytptr;	! get original a, save byte pointer;
	movei	a,@bytptr;	! figure out its effective address;
	hll	a,bytptr;
	tlz	a,77;		! and finally clear up addrressing part;
	jrst	rangit;		! and go on with nice pointer;
	 trnn	a,777760;	! make sure not very low (hits Acs);
	  jumpge	a,bpbad;	! if it is, take the error return;
	tlnn	a,007700;	! must have a width;
	 jrst	bpbad;
	hlrz	b,a;		! check for special case byte pointers;
	caie	b,0;		! lh(ptr) = 0 => location(x) used;
	cain	b,'777777;	! hrroi ac,addr type, (a special case);
	 jrst	sp1ret;		! means start with first byte;

	caie	b,'440700;	! check for reasonable bytepointers;
	 cain	b,'010700;	! (attempted to get most common @ top);
	  jrst	bpok;
	caie	b,'350700;
	 cain	b,'260700;
	  jrst	bpok;
	caie	b,'170700;
	 cain	b,'100700;
	  jrst	bpok;		! end of normal byte pointers;

	caie	b,'000700;	! near-valid bytepointers (same as 01);
	 cain	b,'020700;
	  jrst	sp2ret;
	caie	b,'030700;
	 cain	b,'040700;
	  jrst	sp2ret;
	caie	b,'050700;
bpbad:	 popj	p,;		! there are some that are pure drivel;
				! return +1, (an error return);
sp2ret:	hrli	a,'010700;	! no bytes left in this word;
	skipa;
sp1ret:	hrli	a,'440700;	! hrroi type is point(7,@loc,-1);
bpok:	aos	(p);		! return +2, (possibly) fixed bp in a;
	popj	p,;
end "bypok";
BSAIL entry constr;
begin "constr"
	let DECL=internal;
	define DESR="COMMENT", !="COMMENT"; 
simple procedure badSize(integer bytePointer, count );
begin
usererr(count,3,"CONSTR: bad count: ");
return(null);
end;

simple procedure badByptr(integer bytePointer, count );
begin
usererr(0,1,"CONSTR: bad byte Pointer: '" & cvos(bytePointer) );
return(null);
end;

DECL SIMPLE STRING PROCEDURE constr( INTEGER bytepointer, count );
DESR	returns a string of length count that first character is 
	the character ILDB(bytepointer).  The string is not garbage
	collected (SAIL thinks of it as a constant string), and it
	will change any time the corresponding bytes of information
	in the area pointed to change.  Hence, the string (and all
	substrings taken from it) is extremely unstable, so be very
	careful when using this procedure.  Causes a continueable
	USERERR if the bytepointer or count are invalid.
;
      START!CODE "check"	DEFINE lpsa='13,temp='14,sp='16,p='17;
	
	skipl	lpsa,count;	! verify string length not ridiculous;
	 cail	lpsa,'377777;
	  jrst	badSize;	! null or ridiculous, perhaps complain;
				! but don't check byte pointer for null;
	move	temp,bytepointer;	! now check bytepointer;
	tlce	temp,-1;
	 tlcn	temp,-1;
	  hrli	temp,'440700;
	tlne	temp,'77;	! make sure no special addressing;
	 jumpn	lpsa,badByptr;	! bad bytepointer (indexed), complain;
				! place count and good ptr on sp;
	push	sp,lpsa;	! count goes first;
	push	sp,temp;	! then bytepointer (maybe corrected);
	sub	p,['000003000003];	! unwind arguments, and ;
	jrst	@3(p);		! return  (string);
      END "check";
end "constr"
BSAIL entry dynstr;
begin "dynstr"
	let DECL=internal;
	define DESR="COMMENT", !="COMMENT"; 
DECL SIMPLE STRING PROCEDURE dynstr( INTEGER bytepointer, count );
DESR	Returns a string copy of the first count count characters after
	bytepointer.  very much like "CONSTR", but the strings are safe
	to use anywhere in the program, and if the data pointed to by
	bytepointer changes, the string retains its characters.  Causes
	a continueable USERERR if the bytepointer or count are invalid.
;
start!code	define temp='14,p='17;
	move	temp,bytePointer;	! apply defaults to byte ptr;
	tlce	temp,-1;		! if LH was 0;
	 tlcn	temp,-1;		! or LH was -1;
	  hrli	temp,'440700;
	movem	temp,bytePointer;
	push	p,(p);			! convert to STMAKE(pt,l,0);
	setzm	-1(p);
	jrst	STMAKE;
end;
end "dynstr"
BSAIL entry aszstr;
begin "dynstr"
	let DECL=internal;
	define DESR="COMMENT", !="COMMENT"; 
DECL SIMPLE STRING PROCEDURE aszstr( INTEGER byptr );
DESR	Returns a string copy of the "ASCIZ" string pointed to by 
	byptr.  That is, a string starting at the first character
	loaded by byptr, and continuing until the first null
	character.  (A standard TENEX string format).  Causes a
	continueable USERERR if the bytepointer is invalid.
;
BEGIN!CODE		label loop;
	move	temp,byptr;
	tlce	temp,-1;
	 tlcn	temp,-1;
	  hrli	temp,'440700;
	movem	temp,byptr;
	push	p,[0];
	push	p,-1(p);
	setom	-2(p);
loop:	ildb	lpsa,temp;
	aos	-2(p);
	jumpn	lpsa,loop;
	jrst	STMAKE;
end;
DECL SIMPLE STRING procedure updstr( INTEGER byteptr, updated!byteptr );
DESR	Returns a string copy of the string that lies between byteptr
	and updated!byteptr.  That is, a string starting at the first
	character loaded by byptr, and continuing until the character
	pointed to by updated!byteptr.  (A standard TENEX string format
	used often for JSYS string returns).  Causes a continueable
	USERERR if the bytepointers are invalid.
;
begin "updstr" 
start!code "cod"	preload!with cvasc(0&1&2&3&4), cvasc(5&0&0&0&0);
			own integer array bcnt[0:1];
			define c=3, bycnt=4;
			label bperr;
	move	a,byteptr;		! get start byte pointer;
	pushj	p,bpchk;		! check it, ;
	 jrst	bperr;			!   bad (error);
	movem	a,byteptr;		! store fixed (possibly) ptr;
	move	c,a;			! protect copy of it;

	move	a,updated!byteptr;	! get finish byte pointer;
	pushj	p,bpchk;		! check it, ;
	 jrst	bperr;			!   bad (error);

	move	a,updated!byteptr;	! into acs;
	pushj	p,bpchk;
	 jrst	bperr;

	hrrzi	bycnt,(a);		! find difference in words;
	subi	bycnt,(c);
	imuli	bycnt,5;		! * 5 bytes/word;

	hrri	a,bcnt[0];		! get a pointer to character ;
	hrri	c,(a);			! count string, (using args);
	ildb	a,a;			! find out how many characters;
	ildb	c,c;			! were in words;
	addi	bycnt,(a);
	subi	bycnt,(c);
	movem	bycnt,updated!byteptr; ! set up for call to dynstr;
	jrst	dynstr;			! second arg is count, not ubp;
bperr:
      end "cod";
usererr( 0,1,"bad bytepointer supplied to updstr, will return null" &
	('15 & '12) & "  byteptr = '" & cvos( byteptr ) & 
	",  updated!byteptr = '" & cvos( updated!byteptr ) );
return( null );
end "updstr";

DECL simple integer procedure subequ( string target, source );
DESR	Returns the position of target in source or 0 if no match.
	if subequ(t,s) then equ( t, s[subequ(t,s) for length(t)] ).
	A null target NEVER produces a match.
  like:   if length(target)=0 then return(0)
	  for i_ 1 step 1 until length(source)
		do if equ(target,source[i for length(target)])
		   then return(i)
	  return(0)
;
start!code
	define sc=1,tc=2, tch=3,ch1=4,ch2=5, spt=6,tpt=7;
	define !="Comment";
	label lup1,lup2, fail,good,good1,ret;

	hrrzs	tc,-3(sp);	! get target count;
	hrrzs	sc,-1(sp);	! and source count;
		! also: make simple numbers for lengths, constant strs;
		! for minimal interrupt problems;
	caig	tc,0(sc);	! longer target than source;
	 sosge	tc,-3(sp);	! or null length target;
	  jrst	fail;		! are both considered mismatches;
! Now we know that both byte pointers are good (ie at least 1-ch strs);
	ildb	tch,-2(sp);	! get first target character;
	subi	sc,0(tc);	! figure out how many matches to try;
				! 1 + length(source)-length(target);
! Now we are set.  Run along source looking for 1-char match;
lup1:	ildb	ch1,0(sp);	! lead character of source;
	caie	tch,0(ch1);	! stop going if match;
	 sojg	sc,lup1;	! or we can no longer match;

	jumpe	sc,ret;		! if we stopped on count, all done;
	jumpe	tc,good1;	! if the target was only 1 char long, ;
				!  then we have a match;
! first character of target matches, how about the others;
	move	tpt,-2(sp);	! get private byte pointers for target;
	move	spt,0(sp);	! and source (both point at match1);

lup2:	ildb	ch1,spt;	! pull one from each;
	ildb	ch2,tpt;
	cain	ch2,0(ch1);	! and loop until they dont match;
	 sojg	tc,lup2;	! or we have exhausted the target;

	jumpe	tc,good;	! if target exhausted, it was a match;
	move	tc,-3(sp);	! otherwise, reset the target count;
	sojg	sc,lup1;	! and go for next try on source;
				! unless no more (we fail totally);
fail:	setz	a,;		! return zero (failure);
	jrst	ret;
good:				! match sc=source chars trailing match;
	add	sc,-3(sp);	! +l(target)-1= l(source[* to inf]);
good1:	sub	sc,-1(sp);	! now get leading characters;
	movni	a,-1(sc);	! convert to positive;
				! (+1 since the first character is #1);
ret:
end;
DECL SIMPLE integer procedure strstf( INTEGER byptr; string str;
					boolean nonull(false) );
DESR	Deposits str into byptr via idpb.  If nonull is false, (which
	means that a trailing null is desired), then a null character
	(ASCII 0) is deposited past the last character in the string.
	Returns a bytepointer to the last character deposited from the
	string (not the trailing null), or 0 if byptr is invalid.
	This is useful for setting up JSYS calls that want either ASCIZ
	strings, or bytepointer and updated bytepointer values.  The
	return value is precisely the byte pointer that you want to
	use if you want to deposit another string after the first one.
	That is: strstf( strstf( byp, str1 ), str2 ) is the same as
	strstf( byp, str1 & str2 ), except the concatenation is not 
	actually performed.
;
start!code "strstf"	label movlup, movchk, bperr;ne c=3, d=4;
	move	a,byptr;	! get start byte pointer;
	pushj	p,bpchk;	! check it, ;
	 jrst	bperr;		!   bad (error);
	move	b,(sp);		! str's byte pointer;
	hrrz	c,-1(sp);	! str's count;
	jrst	movchk;		! and go to check in loop;

movlup:	ildb	d,b;		! pick up byte from string;
	idpb	d,a;		! place it in output area;
movchk:	sojge	c,movlup;	! next byte (string still has chars);

	setz	d,;		! get null byte to deposit after string;
	move	b,a;		! get a copy of the now-updated byte;
	skipn	nonull;		! verify null byte to be deposited;
	 idpb	d,b;		! and deposit it (if called for);
				! Note: AC1 points to last REAL byte;

	skipa;			! not error exit, return in a now;
bperr:	 setz	a,;		! error, set return value to 0;
end "strstf";
! "string addition" data structure storage: ;

record!class string$buffer (
			record!pointer (string$buffer) next;
			integer spaceleft, bytepointer;
			string accumulate;
			safe integer array strbuf );

own record!pointer (string$buffer) active!buffers, father, current;
!	These two routines are internal to the "string addition" code;

simple boolean procedure findit( integer cat!chan );
desr	Given a 'string concatenation channel', set current to the
	associated record, and father to its predecessor (in case
	you want to delete it).  Return true if such a channel is
	found.
;
begin "findit"
father  _ null!record;
current _ active!buffers;

while cat!chan neq memory[location( current )] neq 0
   do begin
	father _ current;
	current _ string$buffer:next [father];
      end;
return( current neq null!record );
end "findit";


string procedure flush!current!buffer;
desr	Force the byte buffer in current empty (appending any buffered
	bytes to the "accumulate" field of current).  This returns the
	string which has been bufferred so far.
;
begin "flush!current!buffer"	integer buffersize, oldleft, byptr;

buffersize _ oldleft _ 5 * arrinfo( string$buffer:strbuf[current], 2 );
byptr _ point( 7, string$buffer:strbuf[current] [1], -1);

string$buffer:bytepointer [current] _ byptr;
string$buffer:spaceleft   [current] swap oldleft; 
return ( (string$buffer:accumulate [current] _
		string$buffer:accumulate [current] &
		constr( byptr, buffersize - oldleft ) )[2 to inf] );

end "flush!current!buffer";
decl integer procedure stropn( integer buffersize );
desr	Set up and return a new 'string concatenation channel'
;
begin "stropn"	integer array buffer [ 1 : 1 max (buffersize+4)%5 ];
current _ new!record (string$buffer); 
string$buffer:next	  [current] _ active!buffers;
string$buffer:accumulate  [current] _ "*";
string$buffer:spaceleft   [current] _ 5 * arrinfo( buffer, 2 ); 
string$buffer:bytepointer [current] _ point( 7, buffer[1], -1);

memory[location( string$buffer:strbuf[current] )] swap
					memory[location( buffer )];
	
active!buffers _ current; current _ null!record;
	
return( memory[location( active!buffers )] );
end "stropn";
decl procedure stradd( integer concat; string to!add );
desr	append to!add to the specified 'string concatenation channel'
;
if length( to!add ) then 
begin "stradd"		integer left;
if findit( concat )
 then if length(to!add) leq (left_ string$buffer:spaceleft [current])
	 then begin
		string$buffer:bytepointer [current] _ 
			strstf( string$buffer:bytepointer [current],
					to!add, true );
		string$buffer:spaceleft [current]_ left -length(to!add);
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] & to!add;
	      end
 else usererr(0,1, " stradd( unopened string concatenation channel ) ");
current_ father_ null!record;
end "stradd";
decl procedure strach( integer concat, character );
desr	append character to the specified 'string concatenation channel'
;
begin "strach"		integer left;
if findit( concat )
 then if (left_ string$buffer:spaceleft [current])
	 then begin
		idpb( character, string$buffer:bytepointer [current] );
		string$buffer:spaceleft [current]_ left -1;
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] & character;
	      end
 else usererr(0,1, " strach( unopened string concatenation channel ) ");
current_ father_ null!record;
end "strach";
decl string procedure strcls( reference integer concat );
desr	If the 'string concatenation channel' is a legal value,
	and the channel is open, then close it, set concat to 0,
	and return its contents.  Otherwise set to concat -1 and
	return null.
	(legal concatenation channels are always positive integers)
;
begin "strcls"		string strcls;

if findit( concat )
 then begin	external record!pointer (any!class) procedure
		$rec$( integer op; record!pointer (any!class) r );
	strcls _ flush!current!buffer;
	if father
	 then string$buffer:next [father]_ string$buffer:next [current]
	 else active!buffers		 _ string$buffer:next [current];
	concat _ 0;
	$rec$(5, current);	! deallocate all storage for current, ;
				! including its buffer and string;
	current_ null!record;
      end
 else begin
	concat _ -1;
	strcls _ null;
      end;
father_ null!record;
return( strcls );
end "strcls";
decl simple string procedure strpek( integer concat );
desr	Peek at the contents of a 'string concatenation channel'
	NOTE: Don't do this too often, as it defeats the entire
	bufferring scheme that the 'string concatenation channel'
	code is meant to use.
;
begin "strpek"	string strpek;

if findit( concat )
 then strpek _ flush!current!buffer
 else begin
	strpek _ null;
	usererr(0,1, " STRPEK: unopened string concatenation channel " )
      end;
current_ father_ null!record;
return( strpek );
end "strpek";
decl simple integer procedure strlen( integer concat );
desr	return the number of characters stored in the specified
	'string concatenation channel' (-1 if the 'channel' is closed
	or invalid).
;
begin "strlen"	integer strlen;

if findit( concat )
 then strlen _ length(		string$buffer:accumulate [current] ) 
		+ 5 * arrinfo(	string$buffer:strbuf	 [current], 2)
		-		string$buffer:spaceleft  [current]
		- 1
! string.area + buffer.space - unused.buffer.space - length("*");
 else strlen _ -1;	! couldn't find the 'channel';
current_ father_ null!record;
return( strlen );
end "strlen";

end "strlib" . 

    yAg