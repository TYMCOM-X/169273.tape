begin "MapCopy"
require "(SAILIB)SAIL.DEF" source!file;
!get!module(MAPPING);

COMMENT

RECORD!CLASS map1( a[1-dimension], ui, r!p up )
RECORD!CLASS map2( a[2-dimension], ui, r!p up )


(map1) _ map1cr ( lower!bound, upper!bound, offset(0) )
(map2) _ map2cr ( low!bnd1, upp!bnd1, low!bnd2, upp!bnd2, offset(0) )


response_ getmap ( (map1,map2) holder, 1"option", channel, pageinfile )

NAME	 USES	DESCRIPTION
Cow	  HCP	map in file page Copy-On-Write,exclude
Delete	  -CP	removes page from file (mark all same C-P "exclude")
Existant  -CP	find first existant page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
Fileop	  -CP	mark exclusive all pages using this channel-page
		(or channel if page=-1) returns # pages changed
Hole	  -CP	find first "hole" page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
Kount	  H--	count other pointers looking at this "virtual page"
New	  HCP	create a new file page (use pageinfile=-1 for at EOF)
		and map in Write,include
Old	  HCP	same as New, but no failure if page already exists
Preref	  H--	"pre-reference" page pointed to by holder
Read	  HCP	map in file page Read,include
Status	  H--	read status of holder's page (0 if none)
Unmap	  H--	dissasociate holder with page pointed to (unmap it if
		this is the last association)
Validate  H--	start "validate" operation on holder's page
Write	  HCP	map in specified file page Write,include
Y (validate
 and wait)H--	same as "V", but waits until completion of validate
Zap	  H--	disassociate holder with its page, unmap if necessary,
		and then delete the record that holder points to.  You
		better not be pointing to it later.,storage is released


NAME		RETURNED VALUE (successful)
----		---------------------------
Cow		file page number
Delete		file page number
Existant	file page number
Fileop		number of pages that were changed
Hole		file page number
Kount		number of other records pointing at this "virtual page"
New		file page number
Old		file page number
Preref		0 if page access will fault, 1 if was in core
Read		file page number
Status		page status (bits for dirty,file,...)
Unmap		0
Validate	0
Write		file page number
Y (validate and wait)	0
Zap		0

except for Status, a negative return indicates some kind of error.
	-1 means "some procedure noticed an argument error"
	-2 means "system call error, error code in !SKIP!"
	-3 means "couldn't get page for this mapping operation"
		[this only happens on actual maps (C,N,O,R or W)
		 which return the file page number on success]



MAPPING AREA:	
	pagesAdded_ ALLOW( lowPage, highPage ).,
			[at phase 0: ALLOW(500,511)]
;
COMMENT
	successValue_ OPFILE( "FileName", "options", channel )
Error form: -phase,,syserr.
Success:	channel number
	Read (use if you intend to read from the file),
	Write (use if you intend to write on it),

	New file (error if file exists),
	Supercede file (error if file doesn't exist),
	Old file (error if file doesn't exist),
	Version (new file if none exists, otherwise supercede),
	Base mode (old if exists, else create and use),

	H (thawed, multi-user enter used. Allows 2 writers at once),

	###P protection (owner,group,everyone) 047=ALL RD NO
		Note: this is only sure to work on creation.,

	Mapping access (must use for now)
;
integer ToWhite, PassWhite;
simple procedure setups; 
begin
setbreak(PassWhite_getbreak, #sp & #ht & crlf, null, "XNR");
setbreak(  ToWhite_getbreak, #sp & #ht & crlf, null, "INR");
end;
require setups initialization;

simple string procedure GToken(reference string s); 
begin
scan(s,passWhite,!skip!);
return( scan( s, ToWhite, !skip! ) );
end;
simple string procedure Hval(integer v);
	return( if -10 < abs v < 10 
		then cvs(v) 
		else (if v < 0 then "-'" else "'") & cvos(abs v)
	);

simple string procedure cvOut( integer x );
begin	integer l,r; string res;
l_ x ash -18;
r_ x lsh 18 ash -18;
return(	if (l=0 and r geq 0) or (l=-1 and r < 0)
	 then Hval(r)
	 else Hval(l) & ",," & Hval(r)
);
end;

procedure HandMap( r!p(map1)src; integer inch,page );
while true do
begin	integer cmd;
	string opc, pNo, tmp, rsp; 

print( " Map OP: ");
rsp_ inchwl;

if length( opc_gtoken(rsp) )=0 then return;
pNo_gtoken(rsp);
if length(tmp_ gtoken(rsp))
 then begin
	print(crlf," Excess args: ", opc, #sp, pno, 
			" ->", tmp, #sp, rsp );
	continue
      end;

cmd_ lop(opc);
if length(pNo) > 0 then page_ cvd(pno);

if cmd="?"
 then print("
Type <null> to finish, otherwise: <Command> [page {def= ", page, "}]
 Cow	  HCP	map in file page Copy-On-Write,exclude
 Delete	  -CP	removes page from file (mark all same C-P `exclude')
 Existant -CP	find first existant page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
 Fileop	  -CP	mark exclusive all pages using this channel-page
		(or channel if page=-1) returns # pages changed
 Hole	  -CP	find first `hole' page in file on chan at or after
		page specified (errors: page<1, past eof, none found)
 Kount	  H--	count other pointers looking at this `virtual page'
 New	  HCP	create a new file page (use page=-1 for at EOF)
		and map in Write,include
 Old	  HCP	same as New, but no failure if page already exists
 Preref	  H--	`pre-reference' page pointed to by holder
 Read	  HCP	map in file page Read,include
 Status	  H--	read status of holder's page (0 if none)
 Unmap	  H--	dissasociate holder with page (may unmap)
 Validate  H--	start `Validate' operation on holder's page
 Write	  HCP	map in specified file page Write,include
 Y (vld/wait)H-- same as `Validate', but waits until completion 
 @	(read and get status)
")
 else if "@" = cmd
	then begin	integer st;
		print(" = ", st_ getmap(src,"R",inch, Page),
			" (!SKIP!= ", cvOut(!skip!), ")" );
		if st > 0
		 then st_ map1:a[src][100]	! do a read memory;
		 else print( " [read inhibited] " );
		print(" Status=", cvOut(getmap(src,"S",0,0)) );
	      end
 else if "Z" neq cmd neq "z"
	then print(" = ", getmap(src,cmd,inch, Page),
			" (!SKIP!= ", cvOut(!skip!), ")" )
 else print(" ZAPs are invalid here!");
end;
r!p(map1) src,dst;
integer inch, ouch;
integer page, status;

print(crlf, "Copy file: "); 

src_map1cr(0,511);			
while 0 > inch_opfile(inchwl,"RWOM",16)	! Read, Old file, Mapping;
   do print(" * ERROR in phase ", inch ash -18, "= ", cvOut(!rh(inch))
		,crlf, "Source (old file): ");

! dst_map1cr(0,511);			
! while 0 > ouch_opfile(inchwl,"WNM")	! Write, New file, Mapping;
!  do print(" * ERROR in phase ", inch ash -18, "= ", cvOut(!rh(inch))
!		,crlf, "Output (must be new file name): ");

for page_1 step 1 while true
   do begin "a page"
	print( crlf, page, #sp );
	if 0 > status_ getmap( src, "R", inch, page )
	 then case -status of begin
		[1] print( " Argument error?");
		[2] begin integer rsp;
			if !skip!= !xwd('777,6)
			 then begin Print(" No More "); done; end;
			print(crlf, " SYSCAL error: ", 
				cvOut(!skip!), crlf );
			HandMap( src, inch, page );
		    end;
		[3] begin print(" is not there (done) "); done end;
		[ELSE] print("Illegal return?")
		end
	 else print( page, "-", cvOut( getmap(src,"S",0,0) ) );
      end "a page";
print("
Stopped at: ", page );
HandMap( src, inch, page );

getmap(src,"Z",0,0);
end *

