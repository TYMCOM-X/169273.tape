begin
require 3 version;
require "[][]" delimiters;
define	extendedLookup(ch,base)=[chnior(ch,base,4)];
define crlf=[('15&'12)], tab=[('11&null)], !=[comment], space=[" "];
define lookSize='37; 
integer array lukb[0:lookSize max 100];
external integer !skip!; 
require "(SAILIB)BRKFNS.HDR" source!file;	! gets rvscan;

define !ind=0;
forlc xx=
 (PPN,NAM,EXT,PRV,SIZ,VER,FUT,EST,ALC,POS,FT1,LIC,MTA,DEV,STS,ELB,XT1,
	QTF,QTO,MXA,USD,AUT,UNM,UN1,TRU,XT2,ALP,SNM,PJC,PJ1,PJ2)
 doc [redefine  !ind=!ind+1; define !RB]&[xx=!ind;] endc;
integer passWhite;

string simple procedure cvhalf(integer x); 
begin integer w,d; string res;
getformat(w,d); setformat(6,d);
res_ cvos(x lsh -18)&",,"&cvos(x land (-1 lsh -18));
setformat(w,d);
return( res );
end;

string simple procedure clip( string s );
begin
rvscan(s,passWhite,!skip!);
return( s );
end;

simple procedure aBreak;
	setbreak(passWhite_getbreak,tab&space,null,"XR");
require abreak initialization;
string simple procedure cvuser( integer ppn );
begin	boolean flag; integer ch;
	own safe integer array lb[0:!RBUNM+1];
arrclr(lb); 
lb[0]_!RBUNM+1; 
lb[!RBPPN]_(1 lsh 18)+1; lb[!RBNAM]_ppn; lb[!RBEXT]_cvsix("UFD");
open(ch_getchan,"DSK",'17, 0,0, 0,0,flag_false);
if flag then usererr(0,1,"Can't get DSK")
 else extendedLookup(ch,lb[0]);
release(ch);
return( if lb[!RBUNM]
 then "("&clip(cvxstr(lb[!RBUNM])&cvxstr(lb[!RBUNM+1]))&")" 
 else "["&cvos(ppn lsh -18)&","&cvos(ppn land (-1 lsh -18))&"]"
);
end;

string procedure cvfname( integer ppn, nam, ext );
begin	string name, user;
name_clip(cvxstr(nam))&"."&clip(cvxstr(ext land (-1 lsh 18)));
return( if "("=(user_cvuser(ppn)) then user & name else name & user );
end;
simple string procedure prot(integer pr; boolean ufd);
begin	integer i; string res,sgo;
	preset!with "all","cp","upd","ap","rd","run","lk","no";
		own safe string array filep[0:7];
sgo_"sgo";
res_ if ufd then "UFD:" else null;
for i_ pr lsh -6,pr lsh -3,pr
   do res_res& " "&lop(sgo)&"-"&
	(if ufd
	 then	(if i land 4 then "LK" else null) &
		(if i land 2 then "CR" else null) &
		(if i land 1 then "RD" else null) 
	 else	filep[i land 7]);
return(res);
end;

preload!with 
	"Ascii","AsciiLine","Katakanna","3?","4?","5?","6?","7?",
	"Image","'11?","'12?","BinaryImage","Binary","'15?",
	"DumpRecord","Dump";
string safe array FileModes[0:'17];
define mode( number )="(FileModes[number])";

string simple procedure time(integer t,sec);
	return( cvs(t%60) & ":" & cvs(t%60) & ":" & cvs(sec) );

string simple procedure date(integer d);
	return( cvs(64+d%365) & "." & cvs((d mod 365)*100/365) );
simple string procedure license( integer licenseBits ); 
begin "license"
preload!with 
	" WC", " RC", " OP",	" SY", " GD", " TD",  
	" ST", " HF", " JL",	" AC", " XC", " FP1",
	" FP2"," FP3";
own safe string array prot[0:13];
string licstr;
integer bit;

licstr_null; 
for bit_0 step -1 until -13
   do if licenseBits land ((1 lsh 17) lsh bit)
	 then licstr_licstr & prot[-bit];
if licenseBits land (3 lsh 2)
 then licstr_licstr & (case (licenseBits lsh -2) land 3 
				of (" **"," RP"," RF"," RA"));
if licenseBits land 3
 then licstr_licstr & (case licenseBits land 3 
				of (" ??"," WP"," WF"," WA"));
return(licstr);
end "license";
define	bit(w,b)=[((w) land (1 lsh (b-35)))],
	bits(w,b,e)=[( ((w) IFCR b>0 THENC land (-1 lsh -b) ENDC)
			IFCR e<35 THENC lsh (e-35) ENDC )];
simple procedure showLukb;
begin
preload!with	null
 forlc xx=
 (PPN,NAM,EXT,PRV,SIZ,VER,FUT,EST,ALC,POS,FT1,LIC,MTA,DEV,STS,ELB,XT1,
	QTF,QTO,MXA,USD,AUT,UNM,UN1,TRU,XT2,ALP,SNM,PJC,PJ1,PJ2)
 doc [,".RB"&"xx"] endc;
own safe string array indexName[0:lookSize];
integer ind;
print( crlf, cvfname( lukb[!RBPPN], lukb[!RBNAM], lukb[!RBEXT] ),
	tab, cvuser(lukb[!RBAUT]), 
	tab, "[",cvxstr(lukb[!RBUNM]), cvxstr(lukb[!RBUNM+1]), "]",
	", P:", prot(bits(lukb[!rbprv],0,8),bit(lukb[!rbsts],18)),
	", M:", mode(bits(lukb[!rbprv],9,12)),
	crlf,"  C:",date(bits(lukb[!rbext],20,21) lsh 12
			+ bits(lukb[!rbprv],24,35)),
	    "/",time(bits(lukb[!rbprv],13,23),bits(lukb[!rblic],12,17)),
	", A:", date(bits(lukb[!rbext],22,35)),
	", S:", lukb[!rbsiz],
	", V:", bits(lukb[!rbver],18,35), 
	" Luun:'", cvos(bits(lukb[!rbver],0,17)),
	", Lic:", license(bits(lukb[!rblic],18,35))
 );
! bit(.rbext,18);
for ind_!RBFUT step 3 until lookSize-2
   do print(	crlf, indexName[ ind ], ": ", cvhalf(lukb[ ind ]),
		 tab, indexName[ind+1], ": ", cvhalf(lukb[ind+1]),
		 tab, indexName[ind+2], ": ", cvhalf(lukb[ind+2]) );
if ind<=lookSize
 then print(	crlf, indexName[ ind ], ": ", cvhalf(lukb[ ind ]));
if (ind_1+ind)<=lookSize
 then print(	 tab, indexName[ ind ], ": ", cvhalf(lukb[ ind ]));
for ind_lookSize+1 step 1 until lukb[0]
   do print(	crlf&".RB'", cvos(ind), ": ", cvhalf(lukb[ ind ]));
end;
integer ch,eof,rtv;
open(ch_getchan,"DSK",'17, 0,0, 0,0,eof_false);
if eof then usererr(0,0,"cannot get DSK","X");
arrclr(lukb);

lukb[0]_ calli( ('21 lsh 18 + '16), '41 );
	! gettab(%lkbsz,,.gtlvd) = read lookup block size;
if not !skip! then lukb[0]_ '40;	! size without this gettab;

  do  begin
	print(" File: ");
	lukb[2]_cvfil(inchwl,lukb[3],lukb[1]);
	extendedLookup(ch,lukb[0]);
      end
 until !skip!;
release(ch);
showLukb;

end;

