begin "puzzle"
define suspicious=false, bugwatch=false;
define simpleProcedures=true;
define dump!status=false;
define show!result=true;

define stringImplementation=true;
IFCR NOT stringImplementation
 THENC define reversedIteration=false;
ENDC

DEFINE UPTO="STEP 1 UNTIL", DOWNTO="STEP -1 UNTIL", CRLF="('15&'12)";
LET	ANDTHEN=AND;
DEFINE !="COMMENT";

define sense(switch)="
	IFCR NOT switch THENC ""NOT "" & ENDC cvps(switch)";
define switchList= 
	crlf & sense(simpleProcedures) &
	crlf & sense(dump!status) &
	crlf & sense(show!result) &
	crlf & sense(suspicious) &
	crlf & sense(bugwatch) &
	crlf & sense(stringImplementation) &
IFCR NOT stringImplementation
 THENC	crlf & sense(reversedIteration) &
ENDC
	crlf;

IFCR simpleProcedures
 THENC define function="SIMPLE PROCEDURE",!procedure="SIMPLE PROCEDURE";
 ELSEC let    function=PROCEDURE,	  !procedure=PROCEDURE; 
ENDC

IFCR suspicious
 THENC	let	vector=array, matrix=array; 
 ELSEC	define	vector="SAFE ARRAY", matrix="SAFE ARRAY";
ENDC
require cvms(switchList) message;
simple integer procedure readtime; call(0,"MSTIME");

integer savedTime;

simple procedure settime;	savedTime_ readtime;

IFCR dump!status
 THENC forward procedure dumpStorage; 
 ELSEC define dumpStorage="";
ENDC

simple procedure timeReport(string name);
begin
print(crlf, name, ": ", readtime-savedTime );
dumpStorage;
end;
define classMax=3, typeMax=12, d=8, size=d^3-1;

let pieceClass=integer;	define pieceClass!range="0:classMax";
let pieceType=integer;	define pieceType!range="0:typeMax";
let position=integer;	define position!range="0:size";

integer vector pieceCount[pieceClass!range];	! of 0 .. 13;
pieceClass vector class[pieceType!range];
boolean vector puzzle[position!range];
IFCR stringImplementation
 THENC	string vector pieceArea[pieceType!range];
 ELSEC	position vector pieceMax[pieceType!range];
	boolean matrix p[pieceType!range,position!range];
ENDC
! position m,n;
! integer i,j,k;	! 0 .. 13;
integer kount;	! literally "integer";

IFCR dump!status or show!result
 THENC integer current!piece!code;
 ELSEC define current!piece!code=true;
ENDC
IFCR dump!status
 THENC
string simple procedure pPos( position x ); return( "'" & cvos(x) );
ENDC

IFCR show!result or dump!status
 THENC 
simple procedure puzzlePrint( integer bptr, itop );
begin	integer i,j,k, ch;
for i_ 1 step 4 until itop
   do begin	own string array s[1:d];
		string l;
	for j_ 1 upto d
	   do begin
		l_ crlf & " ";
		for k_ 1 upto d 
		   do l_ l & '40 & (if ch_ildb(bptr) then ch else ".");
		s[j]_ l;
	      end;
	for j_ 1 upto d, 1 upto d
	   do begin
		l_ s[j] & "   ";
		for k_ 1 upto d 
		   do l_ l & '40 & (if ch_ildb(bptr) then ch else ".");
		s[j]_ l;
	      end;
	for j_ 1 upto d
	   do begin
		print( s[j], "   ");
		for k_ 1 upto d
		   do print('40 & (if ch_ildb(bptr) then ch else ".") );
	      end;
	print( crlf );
      end;
end;
ENDC
IFCR dump!status
 THENC
own safe integer array mvs[0:100];
simple procedure setmvs; mvs[0]_-99 lsh 18+location(mvs[0]);
	require setmvs initialization;
simple procedure pushMove(integer i,j);
start!code move 1,mvs[0]; push 1,i; push 1,j; movem 1,mvs[0]; end;

procedure popError( integer i, j );
begin
usererr( j,3,"PopMove: expected: " & cvs(i) & "," );
mvs[0]_ mvs[0]-(2 lsh 18+2);
end;
simple procedure popMove(integer i,j);
start!code 
	move 1,mvs[0]; pop 1,3; pop 1,2; 
	camn 2,i; came 3,j; jrst popError;
	movem 1,mvs[0]; 
end;

integer recursion;

procedure dumpStorage;
begin	integer i,lim;
print(crlf & " dump at Kount = ", kount, ", recursion=", recursion,
	", cp='", cvos(current!piece!code) );
lim_ mvs[0] land '777777 - location(mvs[0]);
print(crlf,"Moves: ", lim % 2 );
for i_1 step 2 until lim do print(crlf&"  ", mvs[i], ", ", mvs[i+1] );
print(crlf & " pieceCount[0:" & cvs(classMax) & "]:");
for i_ 0 upto classMax do print(" ", pieceCount[i]);

print(crlf & " class[0:" & cvs(typeMax) & "]:");
for i_ 0 upto typeMax do print(" ", class[i]);

print(crlf, crlf, "Puzzle:");
puzzlePrint( point(36,puzzle[0],-1), d );

IFCR NOT stringImplementation
 THENC	
	print(crlf & " pieceMax[0:" & cvs(typeMax) & "]:");
	for i_ 0 upto typeMax do print(" ", pieceMax[i]);
	print( crlf & " ==> "  );
	for i_ 0 upto typeMax do print( pPos(pieceMax[i]) );
ENDC
end;

procedure Pdump;
begin	integer i;
print(crlf, crlf, "P:");
for i_ 0 step 1 until typeMax
   do begin	string piece;
	print(crlf, crlf, "P[", i, ",*]:" );
IFCR stringImplementation
 THENC	piece_ pieceArea[i];
	while length(piece) do print(" '", cvos(lop(piece)));
 ELSEC	puzzlePrint( point(36,p[i,0],-1), 4 );
ENDC
      end;
end;
ENDC
boolean function fit( pieceType i; position j );
begin
IFCR stringImplementation
THENC	string piece;
  piece_ pieceArea[i];
  while length(piece) 
     do if puzzle[j+lop(piece)] then return(false);
ELSEC
	position k;
  IFCR reversedIteration THENC
    if j+(k_pieceMax[i]) > size then return(false);
    for k_ k downto 0
  ELSEC
	position plim;
    plim_ pieceMax[i];
    for k_ 0 upto plim 
  ENDC
     do if p[i,k] andThen puzzle[j+k]
	then return(false);
ENDC
return(true);
end;
position function place( pieceType i; position j );
begin
	position k;
IFCR dump!status THENC pushMove(i,j); ENDC
IFCR stringImplementation
THENC
	string piece;
  piece_ pieceArea[i];
  while length(piece) do puzzle[j+lop(piece)]_ current!piece!code; 
ELSEC
  IFCR reversedIteration THENC
    for k_ pieceMax[i] downto 0
  ELSEC
	position plim;
    plim_ pieceMax[i];
    for k_ 0 upto plim 
  ENDC
   do if p[i,k] then puzzle[j+k]_ current!piece!code; 
ENDC
pieceCount[class[i]]_ pieceCount[class[i]] - 1;
IFCR dump!status or show!result
 THENC current!piece!code_ 1 + current!piece!code; 
ENDC
for k_ j upto size
   do if not puzzle[k] then return(k);
print(crlf& "Puzzle filled");
return(0);
end;
!procedure remove( pieceType i; position j );
begin
	position k;
	position plim;
	string piece;
IFCR dump!status THENC popMove(i,j); ENDC
IFCR dump!status or show!result
 THENC current!piece!code_ current!piece!code - 1;
ENDC
IFCR stringImplementation
THENC
  piece_ pieceArea[i];
  while length(piece)
     do begin
	IFCR bugwatch 
	 THENC if current!piece!code neq puzzle[j+piece]
		then usererr(puzzle[j+piece],3,"REMOVE: not there: ");
	ENDC
	puzzle[j+lop(piece)]_ false;
	end;
ELSEC
  IFCR reversedIteration THENC
    for k_ pieceMax[i] downto 0
  ELSEC
    plim_ pieceMax[i];
    for k_ 0 upto plim 
  ENDC
   do if p[i,k] then 
	begin
	IFCR bugwatch 
	 THENC if current!piece!code neq puzzle[j+k]
		then usererr(puzzle[j+k],3,"REMOVE: not there: ");
	ENDC
	puzzle[j+k]_ false;
	end;
ENDC
pieceCount[class[i]]_ pieceCount[class[i]] + 1;
end;
boolean recursive procedure trial( position j );
begin
	pieceType i;
	position k;
IFCR dump!status THENC recursion_recursion+1; ENDC
kount_ kount+1;	! code motion ** (was just before exit);
for i_ 0 upto typeMax
   do if pieceCount[class[i]] ! neq 0;
	andThen fit(i,j)
	 then begin
		IFCR bugwatch and (show!result or dump!status)
		 THENC integer cpc; cpc_ current!piece!code; 
		ENDC
		k_ place(i,j);
		IFCR bugwatch and (show!result or dump!status)
		 THENC if cpc neq current!piece!code-1
			then usererr(cpc,3,"TRIAL: place mis-bumped: ");
		ENDC
		if ! trial(k) or k=0; k=0 or trial(k)
		 then begin
			print(crlf& "Piece ", i+1, "(", class[i], 
					") at ", k+1, "='", cvos(k) );
			return(true);
		      end
		 else remove(i,j);
		IFCR bugwatch and (show!result or dump!status)
		 THENC if cpc neq current!piece!code
			then usererr(cpc,3,"TRIAL: mis-restored: ");
		ENDC
	      end;
IFCR dump!status THENC recursion_recursion-1; ENDC
return(false);
end;
IFCR suspicious 
 THENC
external integer !errp!;
simple string procedure memstr(integer loc);
start!code 
	pop '17,1; pop '17,2; 
	push '16,-1(2); push '16,(2); 
	jrst (1);
end;

procedure backPrint;
begin	integer frame, pda;
frame_'12;
while '17 < (frame_ memory[frame]) < -1000 lsh -18
   do if '20 > pda_ memory[frame+1] lsh -18
	 then print(crlf, "Frame=", frame, ", pda=", pda)
	 else begin	integer arith;
		print( crlf, memstr(pda+2), ": " );
		for arith_ memory[pda+4] land '777777 step -1 until 2
		   do print(" '", cvos( memory[frame-arith] ) );
	      end;
end;

simple integer procedure error!trap(integer loc; string why, option);
begin
!errp!_0;
outchr("{");
timeReport("Error: " & why );
backPrint;
dumpStorage;
setprint(null,"T");
outchr("}");
return(0);
end;
simple procedure suspicion;
	!errp!_ location( error!trap );
require suspicion initialization;
ENDC
position m,n;
integer i,j,k;		! 0 .. 13;
string aPiece;
IFCR dump!status THENC setprint(null,"B"); recursion_0; ENDC
print( cvms(switchList) );
IFCR dump!status THENC setprint(null,"F"); ENDC

settime;
IFCR dump!status or show!result THENC current!piece!code_ "-"; ENDC
arrclr(puzzle,current!piece!code);
for i_ 1 upto 5 do for j_ 1 upto 5 do for k_ 1 upto 5
   do puzzle[i+d*(j+d*k)]_ false;

IFCR NOT stringimplementation THENC arrclr(p,false); ENDC
define !block(#N, #C, #LI,#LJ,#LK)=" 
	IFCR stringimplementation
	 THENC aPiece_ char!w(0,9);
	 ELSEC IFCR dump!status or show!result
		 THENC current!piece!code_ cvs(#C); ENDC
	ENDC 
	for i_ 0 upto #LI do for j_ 0 upto #LJ do for k_ 0 upto #LK
	  do IFCR stringimplementation 
		THENC aPiece_ aPiece & ( i+d*(j+d*k) );
		ELSEC p[#N,i+d*(j+d*k)]_ current!piece!code;
	     ENDC
	IFCR stringimplementation 
	 THENC pieceArea[#N]_ aPiece[2 to inf];
	 ELSEC pieceMax[#N]_ #LI+ d*#LJ + d*d*#LK;
	ENDC
	class[#N]_ #C;
";

!block(0, 0, 3,1,0);
!block(1, 0, 1,0,3);
!block(2, 0, 0,3,1);
!block(3, 0, 1,3,0);
!block(4, 0, 3,0,1);
!block(5, 0, 0,1,3);

!block(6, 1, 2,0,0);
!block(7, 1, 0,2,0);
!block(8, 1, 0,0,2);

!block(9, 2, 1,1,0);
!block(10,2, 1,0,1);
!block(11,2, 0,1,1);

!block(12,3, 1,1,1);
pieceCount[0]_ 13;
pieceCount[1]_ 3;
pieceCount[2]_ 1;
pieceCount[3]_ 1;
m_ 1+d*(1+d*1);
kount_0;
IFCR dump!status or show!result THENC current!piece!code_ "a"; ENDC
IFCR dump!status THENC pDump; ENDC
timeReport("Initialization");
if fit(0,m)
 then n_ place(0,m)
 else print(crlf& "Error 1");
timeReport("Piece 1");
if trial(n)
 then print(crlf& "Success in ", kount, " trials")
 else print(crlf, "Failure");
timeReport("Completion");
IFCR show!result THENC puzzlePrint( bbpp(36,puzzle[0],-1), d ); ENDC
end;
   