begin "pqtest"
define	
	crlf="('15&'12)",
	tab="('11&null)",
	!="comment";
external integer !skip!;

record!class pq( record!pointer(pq) left, right; integer dist
		;real key; string name; boolean isPQ 
		;record!pointer(any!class) other );

integer comparison!type,comparison!count;
boolean procedure comparison( record!pointer(any!class) x, y );
begin
start!code aos comparison!count; end;
return( case comparison!type of
	([0] pq:key[x] LEQ pq:key[y]
	,[1] pq:key[x]  <  pq:key[y]
	,[2] pq:key[x] GEQ pq:key[y]
	,[3] pq:key[x]  >  pq:key[y]
	,[4] pq:key[x]  =  pq:key[y]
	,[5] pq:key[x] NEQ pq:key[y]
	,[6] TRUE
	,[7] FALSE
	,[else] x=y) );
end;
define priority!queue="record!pointer(pq)",
	!left="pq:left", !right="pq:right", !dist="pq:dist"; 
require "prique.sai" source!file;

simple integer procedure dist( record!pointer(pq) it );
if it
 then return( pq:dist[it] )
 else return( 0 );

record!pointer(pq) procedure merge!pq( record!pointer(pq) p, q );
begin	record!pointer(pq) r,t;
	integer d;
	label m1,m2,m3,m4;
m1:
r := null!record;
m2:
if q = null!record
 then begin
	d := dist(p);
	go to m3;
      end
else if p = null!record
 then begin
	p := q;
	d := dist(p);
	go to m3;
      end
else if comparison(p,q)
 then begin
	t := pq:right[p];
	pq:right[p] := r;
	r := p;
	p := t;
	go to m2;
      end
 else begin
	t := pq:right[q];
	pq:right[q] := r;
	r := q;
	q := t;
	go to m2;
      end;
m3:
if r = null!record then return(p);
m4:
q := pq:right[r];
if dist(pq:left[r]) < d
 then begin
	d := dist(pq:left[r]) + 1;
	pq:right[r] := pq:left[r];
	pq:left[r] := p;
      end
 else begin
	d := d + 1;
	pq:right[r] := p;
      end;
pq:dist[r] := d;
p := r;
r := q;
go to m3;
end;
record!pointer(pq) procedure pop!pq( record!pointer(pq) p );
return( merge!pq( pq:left[p], pq:right[p] ) );
record!pointer(pq) l!pq, pq!;
priority!queue l!priority!queue, priority!queue!; 

procedure createPair( real key; string name );
begin
pq! := new!record(pq);
pq:key[pq!] := key;
pq:name[pq!] := name;
pq:isPQ[pq!] := true; 
pq:dist[pq!] := 1;

priority!queue! := new!record(pq);
pq:key[priority!queue!] := key;
pq:name[priority!queue!] := name;

pq:other[pq!] := priority!queue!;
pq:other[priority!queue!] := pq!;
end;

procedure mergeBoth; 
begin 
l!pq := merge!pq( l!pq, pq! );
l!priority!queue := merge!priority!queues( l!priority!queue, 
					priority!queue! ); 
end;

procedure popBoth; 
begin 
if l!pq then l!pq := pop!pq( l!pq ); 
if l!priority!queue
 then l!priority!queue := pop!priority!queue( l!priority!queue ); 
end;
simple boolean procedure compare!element( record!pointer(pq)!pq!;
		priority!queue !priority!queue!);
if !pq! neq null!record neq !priority!queue!
 then begin
	if !pq! neq pq:other[!priority!queue!]
	or !priority!queue! neq pq:other[!pq!]
	or not equ(pq:name[!pq!], pq:name[!priority!queue!])
	or pq:key[!pq!] neq pq:key[!priority!queue!]
	or pq:dist[!pq!]-1 neq !dist[!priority!queue!]
	or (pq:left[!pq!] = null!record)
	 neq (!left[!priority!queue!] = null!record)
	or (pq:right[!pq!] = null!record)
	 neq (!right[!priority!queue!] = null!record)
	 then return(false) else return(true);
      end
 else return( !pq! = null!record = !priority!queue! );
simple boolean procedure compare!all( record!pointer(pq)!pq!;
		priority!queue !priority!queue!;
		string position(null) );
begin
  do  begin
	if not compare!element( !pq!, !priority!queue! )
	 then begin
		print(crlf, "Differs at ", position );
		return(false);
	      end;
	if !pq!=null!record then done;
	if pq:right[!pq!] and not compare!all( pq:right[!pq!], 
		!right[!priority!queue!], position & "R")
	 then return(false);
	position := position & "l";
	!priority!queue! := !left[!priority!queue!];
      end
 until not !pq! := pq:left[!pq!];
return(true); 
end;
simple boolean procedure verify( priority!queue q );
begin
while q
   do begin	own priority!queue lk,rk;
		own integer ld, rd, d;
		own integer lFlavor, rFlavor, Flavor;
	lFlavor := rFlavor := Flavor := pq:isPQ[q];
	d := !dist[q];
	ld := rd := (if flavor then 0 else -1);
	if (lk := !left[q]) 
	 then begin
		ld := !dist[lk];
		lFlavor := pq:isPQ[lk];
		if not comparison(q, lk)
		 then begin
			usererr(0,1,"left kid key trouble");
			return(false);
		      end;
	      end;
	if (rk := !right[q]) 
	 then begin
		rd := !dist[rk];
		rFlavor := pq:isPQ[rk];
		if not comparison(q, rk)
		 then begin
			usererr(0,1,"right kid key trouble");
			return(false);
		      end;
	      end;

	if not (lFlavor = flavor = rFlavor)
	 then begin usererr(0,1,"flavor mismatch"); return(false); end;
	if ld<rd
	 then begin usererr(0,1,"kid dist trouble"); return(false); end;
	if d neq 1+(ld min rd)
	 then begin usererr(0,1,"dad dist trouble"); return(false); end;

	if rk then if not verify(rk) then return(false);
	q := !left[q]; COMMENT not LK: recursion;
      end;
return(true);
end;
string procedure el!name( priority!queue r );
return( if r
 then (if pq:isPQ[r] then "-" else "*") & pq:name[r]
 else "----" );

string procedure el!str( priority!queue r );
return( if r=null!record then "*Error*"
 else el!name(r) & ":[" & cvf(pq:key[r]) & "(" & cvs(pq:dist[r]) & 
	") L:" & el!name(pq:left[r]) & ", R:" & el!name(pq:right[r]) &
	"]" );

record!class stack( record!pointer(any!class) data;
		record!pointer(stack) next;
		integer depth );
record!pointer(stack) defer;

procedure psh( record!pointer(any!class) data );
begin	record!pointer(stack) box;
box := new!record(stack);
stack:data[box] := data;
stack:next[box] := defer;
stack:depth[box] := (if defer then stack:depth[defer] + 1 else 1);
defer := box;
end;

record!pointer(any!class) procedure pops;
if defer=null!record then return(defer) else
begin	record!pointer(any!class) res;
res := stack:data[defer];
defer := stack:next[defer];
return(res);
end;

string headLine; integer line!left;
simple procedure line!start(integer indent);
begin
headLine := crlf & 
	"+                                & "[1 for 1 + indent*2];
print(crlf, headLine[4 to inf]);
line!left := 1 + 74-length(headLine);
end;

simple procedure add!line( string xxx );
if 0 > line!left := line!left -2-length(xxx)
 then begin
	print(headLine, xxx );
	line!left := 74-length(headLine) - length(xxx);
      end
 else print("  ", xxx);

procedure show!q( priority!queue r );
begin 
print(crlf & crlf & tab, "Queue ", el!name(r) );
while r 
   do begin
	line!start( if defer then stack:depth[defer] else 0 );
	  do  begin 
		add!line( el!str(r) );
		if pq:left[r] then psh(pq:left[r]);
	      end
	 until null!record = r := pq:right[r];
	r := pops;
      end;
end;
procedure interpret( string s );
while length(s)
 do begin	integer char;
		own integer sequence;
	case '137 land (char := lop(s)) of
	  begin
	  ["1" land '137:"9" land '137] begin 
		createPair( char-"0", cvs(sequence:= sequence+1) & 
				":" & char );
		mergeBoth; 
		pq! := null!record; priority!queue! := null!record;
		end;
	  ["C"] begin
		print(crlf, "compare function ", comparison!type,
			", used ", comparison!count, " times (reset)" );
		comparison!count := 0;
		end;
	  ["D"] begin
		line!left := -1; headLine := crlf & "dump:  ";
		do begin 
		    add!line( el!name(l!pq) & "/" & 
				el!name(l!priority!queue) );
		    popBoth;
		    if not compare!all( l!pq, l!priority!queue ) 
		     then begin print("--stopping--"); return; end;
		   end
		 until l!pq = null!record;
		end;
	  ["M"] mergeBoth;
	  ["P"] popBoth;
	  ["R"] begin
		sequence := 0;
		l!pq := null!record;
		l!priority!queue := null!record;
		pq! := null!record; priority!queue! := null!record;
		print(crlf, "compare function ", comparison!type,
			", used ", comparison!count, " times (reset)" );
		comparison!count := 0;
		end;
	  ["S"] begin show!q( l!pq ); show!q( l!priority!queue ); end;
	  ["T"]print(crlf, el!str(l!pq), tab, el!str(l!priority!queue));
	  ["V"] begin verify(l!pq); verify(l!priority!queue) end;
	  [else] print(crlf & "Unknown command character '", cvos(char))
	  end;
	if not compare!all( l!pq, l!priority!queue ) 
	 then begin print("--stopping--"); return; end;
      end;
interpret("R");	! reset;
setformat(0,1);
comparison!type := 0;
while true
   do begin string s;
	print(crlf,">>");
	if kequ(s_inchwl, "quit") or kequ(s,"done") then done;
	if kequ(s[1 for 6], "random")
	 then begin	integer reps, brk;
		reps := intscan(s,brk);
		if reps leq 0
		 then reps := 1 + ran*(if reps then -reps else 20);
		s := null;
		for reps := reps step -1 until 0 do s := s &
			(if brk:=ran*10 then "0"+brk else "p");
		print(" using: ", s );
	      end;
	if s="?" then print("Priority queue tester.
type `quit' to stop, `random #' for a #-size sequence of manipulations,
<,<=,=,>,>=,NEQ,TRUE, FALSE, or `COMPARE x' for a new compare function,
or a stream of characters for commands from:
	1-9: make a new element of priority N
	C: show comparison count, and reset it.
	D: dump the queues, showing values as you go
	M: merge stacks
	P: pop top of queue
	R: reset
	S: show queues
	T: show top element on stack
	V: verify the `correctness' of the queues")
	else if kequ(s,"LEQ") or equ(s,"<=") or equ(s,"=<")
					 then comparison!type := 0
	else if kequ(s,"LES") or kequ(s,"LESS") or equ(s,"<")
					 then comparison!type := 1
	else if kequ(s,"GEQ") or equ(s,">=") or equ(s,"=>")
					 then comparison!type := 2
	else if kequ(s,"GTR") or equ(s,">") then comparison!type := 3
	else if kequ(s,"EQ") or equ(s,"=") then comparison!type := 4
	else if kequ(s,"NEQ") or equ(s,"<>") or equ(s,"~") or equ(s,"/=") 
					 then comparison!type := 5
	else if kequ(s,"TRUE")		 then comparison!type := 6
	else if kequ(s,"FALSE")		 then comparison!type := 7
	else if kequ(s[1 to 7],"compare")then comparison!type := 
						intscan(s,!skip!)
	 else interpret(s);
      end;
end;
   