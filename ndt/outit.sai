begin "test bed"

require "(SAILIB)SAIL.DEF" source!file;

define eif="else if";

simple string procedure construct!string( integer bytepointer, size );
begin!code	define temp='14;
	push	sp,size;
	push	sp,bytepointer;
	pop	p,temp;
	sub	p,[!xwd(2,2)];
	jrst	(temp);
end;

routine chname( integer character );
return(	 if character = #del then "Delete"
	eif character = "\" then "\\"
	eif '40 < character then "'" & character & "'"
	eif character = #sp then "Space"
	eif character = #ht then "Tab"
	eif character = #ff then "FormFeed"
	eif character = #bs then "BackSpace"
	eif character = #lf then "LineFeed"
	eif character = #cr then "Return"
	eif character = #nul then "Nul"
	eif character = #Esc then "Esc"
	eif character <= #ctrl(Z) then "^" & (character + "@")
	else "'\0" & cvos(character + "@") & "'"
	);
COMMENT ******* Appendix A-1 *******; 

define	dataClass.isData	= '200
,	dataClass.target.mask	= '140
,	  dataClass.target.link	= '000
,	  dataClass.target.data	= '040
,	  dataClass.target.2	= '100
,	  dataClass.target.3	= '140
,	dataClass.isServer	= '020
,	dataClass.isVital	= '010
,	dataClass.meaning.mask	= '007
,	  !Reply.Optional		= '000
,	  !Reply.Required		= '001
,	  !Positive.Reply		= '002
,	  !Negative.Reply		= '003
,	  !Explanatory.Reply		= '004
,	  !Information.Request		= '005
;
string routine sDclass( integer data!class!byte );
begin	integer t, m;
t := data!class!byte land dataClass.target.mask;
m := data!class!byte land dataClass.meaning.mask;
return((if data!class!byte land dataClass.isData 
		then "Data" else "Command") 
	& (if t=dataClass.target.link	then " to Link "
	eif t = dataClass.target.data	then " to Data "
	eif t = dataClass.target.2	then " to pr.2 "
	eif t = dataClass.target.3	then " to pr.3 " else "{??}")
	& " is " & 
	(if data!class!byte land dataClass.isServer
		then "Server" else "Master")
	& (if data!class!byte land dataClass.isVital 
		then "(vital) " else #sp)
	& case m of (	"Reply.Optional",	"!Reply.Required", 
			"!Positive.Reply",	"!Negative.Reply", 
			"!Explanatory.Reply",	"!Information.Request"
			"?meaning=6?",		"?meaning=7?")
);
end;
COMMENT ******* Appendix A-1 *******; 
define	dataHeader.opcode.mask	= '340
,	dataHeader.op0.EOR	= '040
,	dataHeader.opx.AsIs	= '040
,	dataHeader.op0.EOF	= '100
,	dataHeader.opx.Zero	= '100
,	dataHeader.op0.EOD	= '140
,	dataHeader.opx.SPACE	= '140
,	dataHeader.opx.COPY	= '200
,	dataHeader.opx.BLANK	= '240
,	dataHeader.count.mask	= '037
;

string routine sDheader( reference string dataStream );
begin	integer op, c;
c := lop( dataStream );
op := c land dataHeader.opcode.mask;
c  := c land dataHeader.count.mask;
if c=0
 then begin
	if op = dataHeader.op0.EOR	then return( "EOR" );
	if op = dataHeader.op0.EOF	then return( "EOF" );
	if op = dataHeader.op0.EOD	then return( "EOD" );
      end
eif op = dataHeader.opx.Zero
 or op = dataHeader.opx.Space
 or op = dataHeader.opx.Blank	then return( 
				(if op=dataHeader.opx.Zero then "Zero"
				eif op=dataHeader.opx.Space then "Space"
				else "Blank") & "*" & cvs(c) )

eif op = dataHeader.opx.Copy	then return( cvs(c) & "*" & 
				(if length(dataStream)=0 then "???" 
					else chname(lop(dataStream))) )
eif op = dataHeader.opx.Copy	then return( cvs(c) & "*" & 
				(if length(dataStream)=0 then "???" 
					else chname(lop(dataStream))) )
eif op = dataHeader.opx.AsIs
	then begin	string quoted, res;
			integer left, ch;
		quoted := dataStream[1 for c];
		left := length(dataStream) - c;
		dataStream := dataStream[c+1 to inf];
		res := "AsIs(" & cvs(c) & ")" & 
			(if left<0 then cvs(left) & "?)" else ")";
		ch := lop(quoted);
		res := res & (if named := not (#sp <= ch < #del) 
				 then ":""" & lop(ch) else chname(ch));
		while length(quoted)
		   do begin	boolean nextQuoted;
			ch := lop(quoted);
			nextQuoted := (#sp <= ch < #del) and 
				((not named) or (#sp <= quoted < #del));
			if nextQuoted = named
			 then begin
				res := res & (if inq 
						then """" else "+"""");
				named := not nextQuoted;
			      end;
			res := res & (if named then "+" & chname(ch) 
					else ch);
		      end;
		return(if named then res else res & """");
	      end;
		else "unknown_data_header_'" & cvos(op) & "_c=0");
end;
string routine sDclass( integer data!class!byte );
string routine sDheader( reference string dataStream );
COMMENT ******* Appendix A-3 *******; 

define	LinkControl.isYours	= '200
,	LinkControl.op.mask	= '177
,	LinkControl.op.header	= '001
,	LinkControl.op.trailer	= '002
,	LinkControl.op.nonSpec	= '003
,	LinkControl.op.setACK	= '004
,	LinkControl.op.setNAK	= '005
,	LinkControl.op.setRFR	= '006
,	LinkControl.op.setSI	= '007
,	LinkControl.op.setSO	= '010
,	LinkControl.op.Xmt.bits	= '011
,	LinkControl.op.timeout	= '012
,	LinkControl.op.MaxPacket ='013
,	LinkControl.op.Config	= '014
,	LinkControl.op.nameIt	= '015
,	LinkControl.op.PID.range ='016
;

COMMENT ******* Appendix A-4 *******; 

define	ApplControl.op.do.send	= '001
,	ApplControl.op.do.receive ='02
,	ApplControl.op.start.xfr ='003
,	ApplControl.op.stop.xfr	= '004
,	ApplControl.op.stop.FTP	= '005
,	ApplControl.op.is.name	= '006
,	ApplControl.op.treatment ='007
,		treatment.replace	= 1, 
,		treatment.append	= 2, 
,		treatment.must.exist	= 3, 
,	ApplControl.op.size.bytes='010
,	ApplControl.op.File.type ='011
,		file.type.Bytes		= 1, 
,		file.type.Bits		= 2, 
,		file.type.AST		= 3, 
,	ApplControl.op.rec.size	= '012
,	ApplControl.op.size.recs ='013
,	ApplControl.op.Author	= '014
,	ApplControl.op.create	= '015
,	ApplControl.op.update	= '016
,	ApplControl.op.now	= '017
;
integer buffer!room
,	buffer!pointer
;
routine flush!buffer;
begin	define wmax = 70 div 4;
	own safe integer array buffer[-1:wmax];
if buffer[-1]
 then begin		! actively working buffer;
	if buffer[-1] < 0 then usererr(0,1,"Two flushes without data!");
	print( "<<"
	, construct!string( buffer[-1], wmax + 4 - buffer!room )
	, ">>" & crlf );
      end
 else buffer[-1] := point(8,buffer[0],-1);
buffer!room := wmax + 4;
buffer!pointer := buffer[-1];
end;

routine sendOne( integer aByte ); 
begin
idpb(aByte, buffer!pointer);
while dec(buffer!room) < 2 do flush!buffer;
end;

routine sendTwo( integer aByte, nextByte ); 
begin
idpb(aByte, buffer!pointer);
idpb(nextByte, buffer!pointer);
while dec(buffer!room,2) < 2 do flush!buffer;
end;

routine sendStream( integer aByte; string rest ); 
begin
while buffer!room <= length(rest) do flush!buffer;
idpb(aByte, buffer!pointer);
while length(rest) do idpb( lop(rest), buffer!pointer );
while dec(buffer!room,2) < 2 do flush!buffer;
end;

routine sendEOR; sendOne( dataHeader.op0.EOR );
routine sendEOF; sendOne( dataHeader.op0.EOF );
routine sendEOD; sendOne( dataHeader.op0.EOD );
routine sendDataStream( string data );
! sends all the characters in <data> in the current data class;
begin
while length(data)
   do begin	integer ch, reps;
		string copy;
	copy := data;
	ch := lop(data);
	if ch = data then begin
		for reps := 1 step 1 while length(data)
		   do if ch neq lop(data)
			then begin 
				data := copy[reps+1 to inf];
				done;
			      end
			eif reps > 31
			 then begin
				dec(reps,31);
				copy := copy[32 to inf];
				if ch=#SP then sendONE( 31
						+ dataHeader.opx.SPACE )
				eif ch=0 then sendONE( 31
						+ dataHeader.opx.ZERO )
				eif ch=#E.BL then sendONE( 31
						+ dataHeader.opx.BLANK )
				else sendTWO(31+dataHeader.opx.COPY,ch);
			      end;
		if ch=#SP 
			then sendONE( reps + dataHeader.opx.SPACE )
		eif ch=0 
			then sendONE( reps + dataHeader.opx.ZERO )
		eif ch=#E.BL
			then sendONE( reps + dataHeader.opx.BLANK )
		eif reps = 1 
			then data := copy	! NOTE:32 copy(n) case;
		else sendTWO( reps + dataHeader.opx.COPY, ch );
	      end
	eif ch=#sp then begin		! ASCII space: multi seen above;
		sendONE( DataHeader.opx.SPACE + 1 );
	      end
	eif ch='100 then begin		! EBCDIC blank:multi seen above;
		sendONE( DataHeader.opx.BLANK + 1 );
	      end
	 else begin "as is"	! good old vanilla data;
! it is worth it to drop the count;
!  for 2-in-a-row Nulls, Spaces, or Blanks (even money & new count);
! 	... <rep(sp):2> <asis 1> ...  <=>  ... <sp> <sp> ...;
!  for 3-in-a-row anything;
! 	... <rep(next):3> <W> <asis 1> ...  <=>  ... <W> <W> <W> ...;
! sometimes better to stop before the last white in a unit instead of;
!;
		lenMax := 31 min buffer!room;
		while length(data) and len < lenMax
		   do begin "another asis char"
			ch := lop(data);
			if length(data) and ch = data
			 then begin	! a match;
				if ch=0 or ch=#sp or ch=#E.BL
				or ch = data[2 for 1]
				 then begin   ! went one too far;
					data := copy[len to inf];
					dec(len);
					done "another asis char";
				      end;
			      end;
			inc(len);
		      end "another asis char";
		sendStream( DataHeader.opx.AsIs + len, 
				copy[1 for len] );
	      end "as is";
      end;
end;

routine dataPacket( integer dataHeader; string body );
begin
end;

routine sendAsIs( string dataLine );

routine sendDATA( integer Data!SubClass!index; string dataLine );
begin

define	dataHeader.opcode.mask	= '340
,	dataHeader.opx.AsIs	= '040
,	dataHeader.opx.Zero	= '100
,	dataHeader.opx.SPACE	= '140
,	dataHeader.opx.COPY	= '200
,	dataHeader.opx.BLANK	= '240

,	dataHeader.count.mask	= '037
;

end;
routine sendDATA( string Data!SubClass; string dataLine );
begin
while out!pending!PID
   do begin "get last packet out"
		integer i;
	for i:=1 step 1 until 4
	   do begin 
		one!packet; 
		if out!pending!PID=0 then done "get last packet out";
	      end;
	sendRFR; one!packet;
	if out!pending!PID
	 then print(crlf,"Resending: ", out!pending!buf, crlf );
      end;
out!pending!PID := outBound!pid!sent;
pid!increment( out!pending!PID );
out!pending!buf := outBound[#header] 
	& do!encode( outBound[#data!PTC] & out!pending!pid 
			& data!SubClass & dataLine )
	& outBound[#trailer];
while not pid!in!range( out!pending!PID,
		outBound!pid!all!good, outBound!pid!top!allowed )
   do begin sendRFR; one!packet; end;
print( out!pending!buf );
if assumeAck then out!pending!PID := 0;
pid!increment( outBound!pid!sent ); 
end;
?routine send!file!description( string file );
?	sendIT( "<<File: ", file );

routine enter!ftp;	print("<<FTP on>>" & crlf);
routine end!ftp;	print("<<FTP off>>" & crlf);

routine sendEORs( integer n );
    for n := n-1 step -1 until 0 do sendEOR;

routine send.partial.Ast.Line( string partial.line );
	sendDataStream( partial.line );

routine send.final.Ast.Line( string partial.line );
	begin sendDataStream( partial.line ); sendEOR; end;

routine send.Ast.Record( string full!line );
	begin sendDataStream( full!line ); sendEOR; end;

routine sendBIN( string filename );
	usererr(0,1, "BINARY and a PDP-10, surely you jest!" & crlf );
simple string procedure clip( string s );
begin!code	define r.ptr=1,r.len=2,r.ch=3, r.tmp=4;
		label wexit, ploop, white, wloop;
	move	r.ptr,0(sp);
	jumpg	r.len,ploop;
	popj	p,;		! special case: null string;

 wexit:	addm	r.tmp,-1(sp);	! shorten result string by whitecount;
	popj	p,;

 white:	movni	r.tmp,(r.len);	! save -chars left in string ;
	sojle	r.len,wexit;	! (counting this whitespace character);
				! loop over white chars till end or prt;
 wloop:	ildb	r.ch,r.ptr;
	caie	r.ch,'40;	! space;
	 cain	r.ch,'11;	! or tab;
	  sojg	r.len,wloop;
	jumple	r.len,wexit; 	! if stopped due to length, go clip;

 ploop:	ildb	r.ch,r.ptr;	! first loop: while printing(lop) do;
	caie	r.ch,'40;	! space;
	 cain	r.ch,'11;	! or tab;
	  jrst	white;		! whitespace seen, next loop;
	sojg	r.len,ploop;
	popj	p,;		! ended with printing, no change;
  end;	
  