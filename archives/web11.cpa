CONST line_length = 72;
      no_of_circuits = 4;
      test_line = 'the CAT in the HAT comes BACK(:13:)';

TYPE line = array [1..line_length] of char;

     device = (disk, tape, printer, system, crash, terminal,
               aux, logical_volume);

     io_result = (complete, intervention, transmission, failure,
                  end_file, end_medium, start_medium,
                  program_error, break_key, orange_ball, busy,
                  time_out);
 
     needle_record = RECORD
                       invoice,
                       isis_port,
                       host_number,
                       node_number,
                       originating_host,
                       port_number,
                       user_name_length,
                       TID: integer;
                       user_name: array[1..14] of char
                     END;

     port_operation = (get_char, get_line, send, disconnect,
                       clear_break, set_system, set_terminal,
                       yellow_ball, detect, build_aux_circuit,
                       terminal_info, send_b1_msg, get_needle,
                       zap, sup_log_msg, set_break_char,
                       set_bell, build_normal_circuit);

     port_param = RECORD
                    operation: port_operation;
                    status: io_result;
                    status2: integer;
                    arg1: integer;
                    arg2: integer
                  END;

     short_line = array [1..40] of char;

     ascii_char = array [1..4] of char;
     
     ascii_line = array [1..line_length] of ascii_char;
 
     dump_line = array [1..15] of ascii_char;

     ascii_buffer = array [1..1000] of ascii_char;

TYPE io_procedure = CLASS;

PROCEDURE ENTRY build_circuit (io_circuit : integer;
                         user_string : line;
                         VAR result : io_result;
                         VAR error_code : integer);

VAR data_buffer, logon_string : line;
    i, first_blank, string_length, circuit : integer;
    aux_param : port_param;

BEGIN
  first_blank := 0;
  FOR i := 1 TO 40 DO
    IF first_blank = 0 THEN
      BEGIN
        IF user_string [i] = ' ' THEN
          first_blank := i;
        logon_string [i] := user_string [i];
      END;

  logon_string [first_blank] := '(:13:)';
  string_length := first_blank;

  WITH aux_param DO
  BEGIN
    operation := build_aux_circuit;
    arg1 := string_length;
    circuit := io_circuit;
    data_buffer := logon_string;
    
    io(data_buffer, aux_param, aux, circuit);

    result := status;
    error_code := arg2;
  END;
END;

PROCEDURE ENTRY check_circuit (io_circuit : integer;
                               VAR result : boolean);

VAR data_buffer : line;
    circuit : integer;
    aux_param : port_param;

BEGIN
  WITH aux_param DO
  BEGIN
    operation := terminal_info;
    circuit := io_circuit;

    io(data_buffer, aux_param, aux, circuit);

    IF (status = complete) OR (status = break_key) THEN
      result := TRUE
    ELSE
      result := FALSE;
  END;
END;

PROCEDURE ENTRY set_term (io_circuit, set_term_arg : integer);

VAR data_buffer : line;
    circuit : integer;
    aux_param : port_param;

BEGIN
  WITH aux_param DO
  BEGIN
    operation := set_terminal;
    arg1 := set_term_arg;
    circuit := io_circuit;

    REPEAT io(data_buffer, aux_param, aux, circuit)
    UNTIL status <> busy;

  END;
END;

procedure entry create_ascii_line (char_line : line;
                                   var conv_line : line;
                                   length : integer);

var i, j, k, ascii_int, line_length : integer;

begin
  K := 1;
  if length > 10 then
    line_length := 10
  else
    line_length := length;
  begin
    for i := 1 to line_length do
      begin
        ascii_int := ord(char_line [i]);
        conv_line [i*4] := '(:32:)';
          if (ascii_int < 33) or (ascii_int > 126) then
            for j := i*4-1 downto i*4-3 do
              begin
                conv_line [j] := chr((ascii_int mod 10) + 48);
                ascii_int := ascii_int div 10;
              end
          else
              begin
                for j := i*4-1 downto i*4-2 do
                  conv_line [j] := '(:32:)';
                conv_line [i*4-3] := char_line [i];
              end;
     end;
  end;
end;

PROCEDURE ENTRY scan_characters (char_line : line;
                                 var conv_line : line;
                                 length : integer);

VAR i, line_length : integer;

BEGIN
  FOR i := 1 to 72 DO
    conv_line [i] := '(:32:)';
  FOR i := 1 to length DO
    IF (char_line [i] < '(:32:)') or (char_line [i] > '(:126:)') THEN
      conv_line [i] := '(:32:)'
    ELSE
      conv_line [i] := char_line [i];
END;

PROCEDURE ENTRY input_line (io_circuit : integer; VAR inline : line;
                      VAR inline_length : integer);
VAR data_buffer : line;
    circuit : integer;
    aux_param : port_param;

BEGIN
  WITH aux_param DO
  BEGIN
    operation := get_line;
    arg1 := line_length;
    arg2 := 0;
    circuit := io_circuit;

    REPEAT io(data_buffer, aux_param, aux, circuit)
    UNTIL status <> busy;
 

    inline := data_buffer;
    inline_length := arg2;
  END;
END;

PROCEDURE ENTRY output_line (io_circuit : integer; outline : line;
                       length : integer);
VAR data_buffer : line;
    i, circuit : integer;
    aux_param : port_param;

BEGIN
  FOR i := 1 to length DO
    data_buffer [i] := outline [i];
  WITH aux_param DO
  BEGIN
    operation := send;
    arg1 := length;
    arg2 := 0;
    circuit := io_circuit;

    REPEAT io(data_buffer, aux_param, aux, circuit)
    UNTIL status <> busy;
  END;
END;

PROCEDURE ENTRY write_disk_line (io_circuit : integer;
                                       outline : line;
                                       length : integer);

VAR write_cmd : array [1..22] of char;
    write_line : line;
    i, j, k, line_length : integer;
    aux_param : port_param;
    circuit : integer;

BEGIN
  FOR i := 1 to 72 DO
    write_line [i] := '(:32:)';
  write_cmd := 'GO OLDWRT;BOBFOX.DMP; ';
  IF length > 45 THEN
    line_length := 45
  ELSE
    line_length := length;
  IF length < 2 THEN
    line_length := 10;
  FOR i := 1 TO 22 DO
    write_line [i] := write_cmd [i];
  FOR i := 1 TO line_length - 1 DO
    write_line [i+22] := outline [i];
  write_line [line_length+22] := '(:13:)';
  WITH aux_param DO
  BEGIN
    arg1 := line_length + 22;
    arg2 := 0;
    operation := send;
    circuit := io_circuit;

    REPEAT io(write_line, aux_param, aux, circuit)
    UNTIL status <> busy;
 
  END;
END;

PROCEDURE ENTRY get_buffer_info (io_circuit : integer;
                           VAR chars : integer;
                           VAR lines : integer);

VAR data_buffer : line;
    circuit : integer;
    aux_param : port_param;

BEGIN
  WITH aux_param DO
  BEGIN
    operation := terminal_info;
    arg1 := 0;
    arg2 := 0;
    circuit := io_circuit;

    REPEAT io(data_buffer, aux_param, aux, circuit)
    UNTIL status = complete;
  
    chars := arg1;
    lines := arg2;
  END;
END;

BEGIN
END;





TYPE circuit_process = PROCESS;

VAR i, code : integer;
    status : io_result;
    circ_io : io_procedure;
    user_string : array [1..no_of_circuits] of short_line;
    circuit_built : boolean;

BEGIN
  user_string [1] :='SALTYRON:39;s78comn                     ';
  user_string [2] :='SSEREP:39;s78devl                       ';
  user_string [3] :='CALSTATE:39;s78devl                     ';
  user_string [4] :='RGFOX:39;mybuddy                        ';
  INIT circ_io;

  CYCLE
    FOR i := 1 TO no_of_circuits DO
      BEGIN
        circ_io.check_circuit (i, circuit_built);
        IF NOT circuit_built THEN
          BEGIN
            circ_io.build_circuit (i, user_string[i], status, code);
            circ_io.output_line (i, '(:13:) ', 1);
            circ_io.output_line (i, '(:13:) ', 1);
          END;
      END;
    
    FOR i:= 1 TO 30 DO
      WAIT;
  END;
END;

TYPE disk_test1 = PROCESS;

VAR i, inline_length : integer;
    disk_io1 : io_procedure;
    inline, test_inline : line;

BEGIN
  INIT disk_io1;
  CYCLE
      disk_io1.output_line (3, 'TTY NO ECHO(:13:)', 12);
      disk_io1.output_line (3, 'DIR WEB###.*(:13:) ', 13);
  FOR i := 1 TO 10 DO
    BEGIN
      disk_io1.input_line (3, test_inline, inline_length);
      disk_io1.scan_characters (test_inline, inline, inline_length);
      disk_io1.write_disk_line (3, inline, 40);
    END;

  FOR i := 1 to 30 DO
    WAIT;
  END;
END;

TYPE disk_test2 = PROCESS;

VAR i, inline_length : integer;
    disk_io2 : io_procedure;
    inline, outline : line;

BEGIN
  INIT disk_io2;
  disk_io2.set_term (1,0);
  CYCLE
  FOR i := 1 to 10 DO
    begin
      disk_io2.write_disk_line (1, 'BOB(:13:)', 4);
      disk_io2.input_line (1, inline, inline_length);
      disk_io2.create_ascii_line (inline, outline, inline_length);
      disk_io2.write_disk_line (1, outline, 60);
    end;

  for i := 1 to 30 do
    wait;
  end;
end;


VAR circuit_maintainer : circuit_process;
    disk_writer1 : disk_test1;
    disk_writer2 : disk_test2;

BEGIN
  INIT circuit_maintainer;
  INIT disk_writer1;
  INIT disk_writer2;
END.
    