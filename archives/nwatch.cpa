const   NUMBER_OF_SYSTEMS = 8;
        cr = '(:13:)';
        lf = '(:10:)';
type    STRING_OF_4 = array[1..4] of char;
        STRING_OF_30 = array[1..30] of char;
        STRING_OF_70 = array[1..70] of char;
        STRING_OF_72 = array[1..72] of char;
        STRING_OF_140 = array[1..140] of char;
        SYSTEM_STATE = (UP, DOWN);
        PROCESSQUEUE = array[1..NUMBER_OF_SYSTEMS] of queue;
        TABLE_COPY = array[1..NUMBER_OF_SYSTEMS] of SYSTEM_STATE;
        DEVICE = (DISK,TAPE,PRINTER,SYSDEV,CRASH,TERMINAL,AUX);
        IORESULT = (COMPLETE,INTERVENTION,TRANSMISSION,FAILURE,
                    ENDFILE,ENDMEDIUM,STARTMEDIUM,PROGERR,BREAKEY,
                    ORANGEBALL,BUSY,TIMEOUT);
        IOOPERATION = (GET_CHAR,GET_LINE,SEND,DISCONNECT,CLEAR_BREAK,
                      SET_SYSTEM,SET_TERMINAL,SEND_YELLOW,DETECT_ORANGE,
                      AUX_REQ,TERM_INFO,SEND_B1MSG,GET_NEEDLE,
                      ZAP,SUP_LOG_MSG);
        TERMPARAM = RECORD
                OPERATION: IOOPERATION;  STATUS: IORESULT;
                STATUS2: integer;  ARG1: integer;  ARG2: integer
        END;
 
type    FIFO = class (LIMIT: integer);

var HEAD,                       " points to top element in queue "
    TAIL,                       " points to bottem element in queue "
    LENGTH : integer;           " current length of queue "

function entry ARRIVAL : integer;
begin
   ARRIVAL := TAIL;
   TAIL := TAIL mod LIMIT + 1;
   LENGTH := LENGTH + 1;
end;

function entry DEPARTURE : integer;
begin
   DEPARTURE := HEAD;
   HEAD := HEAD mod LIMIT + 1;
   LENGTH := LENGTH - 1;
end;

function entry EMPTY : boolean;
begin
   EMPTY := (LENGTH=0);
end;

function entry FULL : boolean;
begin
   FULL := (LENGTH=LIMIT);
end;

begin "INITIAL ROUTINE for FIFO QUEUE"
   HEAD := 1;
   TAIL := 1;
   LENGTH := 0;
end;
!

"*****************************************************"
"***                                               ***"
"***         M  O  N  I  T  O  R  S                ***"
"***                                               ***"
"*****************************************************"


type    CIRCUIT_RESOURCE = monitor;
var FREE: boolean;
    Q: PROCESSQUEUE;
    NEXT: FIFO;
    AUXPARAM: TERMPARAM;

procedure entry REQUEST;
begin
  if FREE then FREE:=false
    else delay (Q[NEXT.ARRIVAL]);
end;

procedure entry RELEASE;
begin
  if NEXT.EMPTY then FREE:=true
    else continue (Q[NEXT.DEPARTURE]);
end;

begin "CIRCUIT_RESOURCE"
 FREE := true;
 init NEXT(NUMBER_OF_SYSTEMS);
end; "CIRCUIT_RESOURCE"




type    HOST_CHANNELS = array[1..NUMBER_OF_SYSTEMS] of CIRCUIT_RESOURCE;




type SYSTEM_STATE_TABLE = monitor;
var HOST_UP: TABLE_COPY;
    I: integer;

procedure entry CHANGE (SYS: integer;
                      STATE: SYSTEM_STATE);
begin
 HOST_UP[SYS] := STATE;
end;

procedure entry READ ( var PROCESS_COPY: TABLE_COPY);
begin
 PROCESS_COPY := HOST_UP;
end;

begin "TABLE"
 for I:=1 to NUMBER_OF_SYSTEMS do HOST_UP[I] := DOWN;
end; "SYSTEM_STATE_TABLE"
!
"******************************************"
"***                                    ***"
"***          PROCESS                   ***"
"***                                    ***"
"******************************************"

type    CIRCUIT_WATCHER = process (SYS: integer; "a circuit number"
                               IO_CHAN: HOST_CHANNELS;
                                 TABLE: SYSTEM_STATE_TABLE);
var EMPTY: boolean;
    AUXPARAM: TERMPARAM;
    SYSTEM_UP: boolean;
    H: array[1..NUMBER_OF_SYSTEMS] of integer;
    HOME_SYSTEM: integer;
CIR: INTEGER;

"******************************************"
"***                                    ***"
"***     INPUT-OUTPUT  PROCEDURES       ***"
"***                                    ***"
"******************************************"

procedure FLUSH_INPUT_BUFFER (SYS: integer);
var I: integer;
    AUXPARAM: TERMPARAM;
    CH: char;
begin
   with AUXPARAM do
   begin
    FOR i:=1 TO 15 DO WAIT;
     ARG1:=0;  ARG2:=0;
     OPERATION := TERM_INFO;
     io(CH,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
     "ARG1 is now number of chars in input buffer"
     if ARG1 > 0 
      then
       begin
         ARG2:=0;
         OPERATION := GET_CHAR;
         repeat io(CH,AUXPARAM,AUX,SYS) until STATUS = COMPLETE;
IF CIR <> SYS THEN CYCLE WAIT END;
       end;
   end;
end;



"***********************************"
procedure SEND_MESSAGE (SYS: integer;
                    COMMAND: STRING_OF_70;
                     LENGTH: integer);
var COMMAND_COPY: array[1..70] of char;
    AUXPARAM: TERMPARAM;
    CH: char;
begin
   with AUXPARAM do
   begin
        ARG1 := LENGTH;  ARG2:=0;
        OPERATION := SEND;
        COMMAND_COPY := COMMAND;
        io(COMMAND_COPY,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
   end;
"FLUSH_INPUT_BUFFER(SYS);"
end;
!
"***************************************************"
"***                                             ***"
"***          LOGIN   PROCEDURES                 ***"
"***                                             ***"
"***************************************************"



procedure MAKE_LOGIN_STRING (var LOGIN_STRING: STRING_OF_30;
                                   var LENGTH: integer);
var I: integer;
    J: integer;
    HOST_INTEGER: integer;
    JHOST: integer;
    TENP: integer;
    USERID: array[1..12] of char;
    PASSWORD: array[1..12] of char;
begin
 USERID := 'TLWEBB      ';
 LENGTH := 13;
 repeat LENGTH := LENGTH-1 until USERID[LENGTH] <> ' ';
 for I:=1 to LENGTH do LOGIN_STRING[I] := USERID[I];
 length:= length + 1;
 LOGIN_STRING [LENGTH] := ':';
 HOST_INTEGER := H[SYS];
 TENP := 1;
 repeat TENP := TENP * 10 until TENP > HOST_INTEGER;
 JHOST := HOST_INTEGER;
 repeat
   TENP := TENP div 10;
   length:= length + 1;
   LOGIN_STRING [LENGTH] := chr (48 + JHOST div TENP);
   JHOST := JHOST mod TENP;
 until TENP = 1;
 LENGTH := LENGTH + 1;
 LOGIN_STRING [LENGTH] := ';';
 PASSWORD := 'S CLAUS(:13:)(:10:)   ';
 J:=13;
 repeat J:=J-1 until PASSWORD[J] <> ' ';
 for I:=1 to J do LOGIN_STRING [LENGTH + i] := PASSWORD[I];
 LENGTH := LENGTH + J;
end; "MAKE_LOGIN_STRING"
!
"***************************************************"
procedure BUILD_CIRCUIT ( LOGIN_STRING: STRING_OF_30;
                                LENGTH: integer;
                            var RESULT: IORESULT);
var CIRCUIT: integer;
    LOGIN_CMD: STRING_OF_30;
begin
 with AUXPARAM do
   begin
     ARG1 := LENGTH;  ARG2:=0;
     OPERATION := AUX_REQ;
     LOGIN_CMD := LOGIN_STRING;
     io(LOGIN_CMD,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
     RESULT := STATUS;
     OPERATION := TERM_INFO;
     io(LOGIN_CMD,AUXPARAM,AUX,SYS);
     if STATUS = FAILURE then cycle wait end;
IF CIR <> SYS THEN CYCLE WAIT END;
   end;
end; "BUILD_CIRCUIT"





"************************"
procedure SEND_LOGIN_DATA;
var I: integer;
begin
 SEND_MESSAGE(SYS,'(:13:) ',1);
 SEND_MESSAGE(SYS,'TTY WIDTH 150(:13:)',14);
 SEND_MESSAGE(SYS,'TTY LC(:13:) ',7);
SEND_MESSAGE(SYS,'GO (CALSTATE)Q9QGEN(:13:)',20);
 FLUSH_INPUT_BUFFER(SYS);
 SEND_MESSAGE(SYS,'GO (QASYS)TLWSLV(:13:) ',17);
end; "SEND_LOGIN_DATA"
!
"*******************************************************"
"***                                                 ***"
"***      CIRCUIT_WATCHER  PROCEDURES                ***"
"***                                                 ***"
"*******************************************************"


procedure LOGIN;
var RESULT: IORESULT;
    LOGIN_STRING: array[1..30] of char;
    LENGTH: integer;
    I: integer;
begin
 io_chan[sys].request;
 build_circuit('C(:13:)(:10:) ',3,RESULT);
 MAKE_LOGIN_STRING (LOGIN_STRING,LENGTH);
 send_message (sys,LOGIN_STRING, LENGTH);
 if RESULT <> COMPLETE then
   repeat
     for I:=1 to 30 do wait;
     BUILD_CIRCUIT (LOGIN_STRING, LENGTH, RESULT);
   until RESULT = COMPLETE;
 SEND_LOGIN_DATA;
 io_chan[sys].release;
 SYSTEM_UP := true;
 TABLE.CHANGE(SYS,UP);
end; "LOGIN"





"************************************************"
procedure CHECK_INPUT_BUFFER (var EMPTY: boolean);
var CH: char;
    i: INTEGER;
begin
 IO_CHAN[SYS].REQUEST;
 EMPTY:=TRUE;
 with AUXPARAM do
  begin
   for i:=1 TO 3 DO WAIT;
   arg1:=0;  arg2:=0;
   OPERATION := TERM_INFO;
   io(CH,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
   if STATUS = FAILURE then
    TABLE.CHANGE(SYS,DOWN)
    else EMPTY := (ARG1 = 0);
  end;
 IF empty THEN IO_CHAN[SYS].RELEASE;
end;  "CHECK_INPUT_BUFFER"
!
"*******************************************************"
"***                                                 ***"
"***   PROCEDURES  FOR  TRANSFER_A_MESSAGE           ***"
"***                                                 ***"
"*******************************************************"


procedure EXAMINE_BUFFER (var MESSAGE_WAITING: boolean);
var CH: char;
    I: integer;
    KEY: array[1..2] of char;
begin
 with AUXPARAM do 
   begin
     repeat
       ARG1:=1;  ARG2:=20;  "timeout"
       OPERATION := GET_CHAR;
       io(CH,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
       KEY[1]:=KEY[2];  KEY[2]:=CH;
     until (STATUS = TIMEOUT) or (KEY = 'Ms');
   end; "with"
 MESSAGE_WAITING := (KEY = 'Ms');
" IF message_waiting THEN FLUSH_INPUT_BUFFER(SYS);"
end; "EXAMINE_BUFFER"




"*********************************************"
procedure COLLECT (var MESSAGE: STRING_OF_140);
var CH: char;
    MESSAGE_BUF: STRING_OF_140;
    KEY: array[1..4] of char;
    CODE: array[1..2] of char;
begin "COLLECT"
code:='  ';
KEY:= 'eEG(:13:)';
with AUXPARAM do
 begin
   ARG1:=4;  ARG2:=0;
   OPERATION := SEND;
   repeat io(KEY,AUXPARAM,AUX,SYS) until STATUS = COMPLETE;
IF CIR <> SYS THEN CYCLE WAIT END;
   repeat
    ARG1:=1;  ARG2:=0;
    OPERATION := GET_CHAR;
     io(CH,AUXPARAM,AUX,SYS);
IF CIR <> SYS THEN CYCLE WAIT END;
     CODE[1]:=CODE[2];  CODE[2]:=CH;
   until CODE = 'hH';
   OPERATION:= GET_CHAR;
   ARG1:=140;  ARG2:=0;
   io(MESSAGE_BUF,AUXPARAM,AUX,SYS);
   if STATUS <> COMPLETE then cycle wait end;
IF CIR <> SYS THEN CYCLE WAIT END;
 end; "with"
MESSAGE := MESSAGE_BUF;
end; "COLLECT"
!


"********************************************************"
function TARGET_CIRCUIT (MESSAGE: STRING_OF_140): integer;
var I,J: integer;
begin "TARGET_CIRCUIT"
 TARGET_CIRCUIT := 0;
 J:=0;
 for I:=32 to 35 do
   if (MESSAGE[I] >= '0') and (MESSAGE[I] <= '9')
     then J:=J*10 + ord(MESSAGE[I]) - ord('0');
  " else SEND_DIAGNOSTIC('HOST NOT INTEGER',16,J);"
 for I:=1 to NUMBER_OF_SYSTEMS do
   if H[I] = J then TARGET_CIRCUIT := I;
end; "TARGET_CIRCUIT"





"****************************************"
procedure DEPOSIT (MESSAGE: STRING_OF_140;
                TARGET_CIR: integer; VAR dep_ok: BOOLEAN);
var I: integer;
    CH: char;
    MSG_FIRST: STRING_OF_72;
    MSG_SECOND: STRING_OF_72;
    KEY: array[1..4] of char;
    key2: ARRAY[1..2] OF CHAR;
    command: ARRAY[1..18] OF CHAR;
T_CIR: INTEGER;
begin "DEPOSIT"
T_CIR:=TARGET_CIR;
 dep_ok:= FALSE;
 for I:=1 to 70 do MSG_FIRST[I] := MESSAGE[I];
 for I:=1 to 70 do MSG_SECOND[I] := MESSAGE[70+I];
 MSG_FIRST[71]:= cr;
 MSG_SECOND[71]:= cr;
 command:='eEMESSAGE COMING(:13:) ';
 WITH auxparam DO
  BEGIN
   arg1:=17; arg2:=0;
   operation:=SEND;
   REPEAT IO(command,auxparam,AUX,target_cir) UNTIL status = COMPLETE;
IF T_CIR <> TARGET_CIR THEN CYCLE WAIT END;
  END; 
 with AUXPARAM DO
   begin
    ARG1:=71;  ARG2:=0;
    OPERATION :=SEND;
    repeat io(MSG_FIRST,AUXPARAM,AUX,TARGET_CIR) until STATUS = COMPLETE;
IF T_CIR <> TARGET_CIR THEN CYCLE WAIT END;
    ARG1:=1;  ARG2:=20;  "timeout"
    OPERATION := GET_CHAR;
    repeat
      repeat io(CH,AUXPARAM,AUX,TARGET_CIR) until STATUS = COMPLETE;
IF T_CIR <> TARGET_CIR THEN CYCLE WAIT END;
      KEY[1]:=KEY[2]; KEY[2]:=KEY[3]; KEY[3]:=KEY[4]; KEY[4]:=CH;
    until KEY = 'CoNt';
    ARG1:=71;  ARG2:=0;
    OPERATION := SEND;
    repeat io(MSG_SECOND,AUXPARAM,AUX,TARGET_CIR) until STATUS = COMPLETE;
IF T_CIR <> TARGET_CIR THEN CYCLE WAIT END;
    REPEAT
     arg1:=1;  arg2:=20;
     operation := GET_CHAR;
     REPEAT IO(ch,auxparam,AUX,target_cir) UNTIL STATUS = COMPLETE;   
IF T_CIR <> TARGET_CIR THEN CYCLE WAIT END;
     key2[1]:=key2[2]; key2[2]:=ch;
    UNTIL key2 = 'Ok'; 
    IF key2 = 'Ok' THEN dep_ok:= TRUE;
   end; "with"
" FLUSH_INPUT_BUFFER (TARGET_CIR);"
end;  "DEPOSIT"

PROCEDURE delete_file (message: string_of_140);
VAR file_name: ARRAY [1..12] OF CHAR;
    command: ARRAY[1..6] OF CHAR;
    i: INTEGER;
BEGIN    
 FOR i:=1 TO 10 DO file_name[i]:= message[36 + i];
 io_chan[sys].request;
 command:='eEDEL(:13:)';
 WITH auxparam DO
  BEGIN
   arg1:=6; arg2:=0;
   operation:=SEND;
   REPEAT IO(command,auxparam,AUX,sys) UNTIL STATUS = COMPLETE;
IF CIR <> SYS THEN CYCLE WAIT END;
   file_name[11]:='(:13:)';
   arg1:=11; arg2:=0;
   operation:=SEND;
   REPEAT IO(file_name,auxparam,AUX,sys) UNTIL STATUS = COMPLETE;
IF CIR <> SYS THEN CYCLE WAIT END;
  END; 
 io_chan[sys].release; 
END; 


procedure TRANSFER_A_MESSAGE;
var MESSAGE_WAITING: boolean;
    TARGET_CIR: integer;
    MESSAGE: array[1..140] of char;
    dep_ok: BOOLEAN;
begin
 EXAMINE_BUFFER (MESSAGE_WAITING);
 if MESSAGE_WAITING = true
  then
   begin
     COLLECT(MESSAGE);
     IO_CHAN[SYS].RELEASE;
     TARGET_CIR := TARGET_CIRCUIT(MESSAGE);
     IO_CHAN[TARGET_CIR].REQUEST;
     DEPOSIT (MESSAGE, TARGET_CIR, dep_ok);
     IO_CHAN[TARGET_CIR].RELEASE;
     IF dep_ok THEN delete_file(message);
   end
  else IO_CHAN[SYS].RELEASE;
end;  "TRANSFER_A_MESSAGE"


"*******************************************************"
"***                                                 ***"
"***           C I R C U I T    W A T C H E R        ***"
"***                                                 ***"
"*******************************************************"


begin "CIRCUIT_WATCHER"
CIR:= SYS;
 H[1]:=25; H[2]:=29; H[3]:=30; H[4]:=31; H[5]:=32; H[6]:=33;
 H[7]:=35; H[8]:=39;
 HOME_SYSTEM := 39;
 SYSTEM_UP := false;
 cycle
   if not SYSTEM_UP then LOGIN;
   CHECK_INPUT_BUFFER(EMPTY);
   if not EMPTY then TRANSFER_A_MESSAGE;
 end;
end; "CIRCUIT_WATCHER"


"*******************************************************"
"***                                                 ***"
"***           M A I N                               ***"
"***                                                 ***"
"*******************************************************"

var IO_CHAN: HOST_CHANNELS;
    I: integer;
    CIRCUIT_WATCH: CIRCUIT_WATCHER;
    TABLE: SYSTEM_STATE_TABLE;
begin "MAIN"
 "CREATE_DIAGNOSTIC_CIRCUIT;"
 init TABLE;
 for I:=1 to NUMBER_OF_SYSTEMS do
   begin
     init IO_CHAN[I];
     init CIRCUIT_WATCH(I,IO_CHAN,TABLE);
   end;
end. "MAIN"
