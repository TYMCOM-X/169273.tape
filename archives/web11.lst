00001 CONST line_length = 72;
00002       no_of_circuits = 4;
00003       test_line = 'the CAT in the HAT comes BACK(:13:)';
00004 
00005 TYPE line = array [1..line_length] of char;
00006 
00007      device = (disk, tape, printer, system, crash, terminal,
00008                aux, logical_volume);
00009 
00010      io_result = (complete, intervention, transmission, failure,
00011                   end_file, end_medium, start_medium,
00012                   program_error, break_key, orange_ball, busy,
00013                   time_out);
00014  
00015      needle_record = RECORD
00016                        invoice,
00017                        isis_port,
00018                        host_number,
00019                        node_number,
00020                        originating_host,
00021                        port_number,
00022                        user_name_length,
00023                        TID: integer;
00024                        user_name: array[1..14] of char
00025                      END;
00026 
00027      port_operation = (get_char, get_line, send, disconnect,
00028                        clear_break, set_system, set_terminal,
00029                        yellow_ball, detect, build_aux_circuit,
00030                        terminal_info, send_b1_msg, get_needle,
00031                        zap, sup_log_msg, set_break_char,
00032                        set_bell, build_normal_circuit);
00033 
00034      port_param = RECORD
00035                     operation: port_operation;
00036                     status: io_result;
00037                     status2: integer;
00038                     arg1: integer;
00039                     arg2: integer
00040                   END;
00041 
00042      short_line = array [1..40] of char;
00043 
00044      ascii_char = array [1..4] of char;
00045      
00046      ascii_line = array [1..line_length] of ascii_char;
00047  
00048      dump_line = array [1..15] of ascii_char;
00049 
00050      ascii_buffer = array [1..1000] of ascii_char;
00051 
00052 TYPE io_procedure = CLASS;
00053 
00054 PROCEDURE ENTRY build_circuit (io_circuit : integer;
00055                          user_string : line;
00056                          VAR result : io_result;
00057                          VAR error_code : integer);
00058 
00059 VAR data_buffer, logon_string : line;
00060     i, first_blank, string_length, circuit : integer;
00061     aux_param : port_param;
00062 
00063 BEGIN
00064   first_blank := 0;
00065   FOR i := 1 TO 40 DO
00066     IF first_blank = 0 THEN
00067       BEGIN
00068         IF user_string [i] = ' ' THEN
00069           first_blank := i;
00070         logon_string [i] := user_string [i];
00071       END;
00072 
00073   logon_string [first_blank] := '(:13:)';
00074   string_length := first_blank;
00075 
00076   WITH aux_param DO
00077   BEGIN
00078     operation := build_aux_circuit;
00079     arg1 := string_length;
00080     circuit := io_circuit;
00081     data_buffer := logon_string;
00082     
00083     io(data_buffer, aux_param, aux, circuit);
00084 
00085     result := status;
00086     error_code := arg2;
00087   END;
00088 END;
00089 
00090 PROCEDURE ENTRY check_circuit (io_circuit : integer;
00091                                VAR result : boolean);
00092 
00093 VAR data_buffer : line;
00094     circuit : integer;
00095     aux_param : port_param;
00096 
00097 BEGIN
00098   WITH aux_param DO
00099   BEGIN
00100     operation := terminal_info;
00101     circuit := io_circuit;
00102 
00103     io(data_buffer, aux_param, aux, circuit);
00104 
00105     IF (status = complete) OR (status = break_key) THEN
00106       result := TRUE
00107     ELSE
00108       result := FALSE;
00109   END;
00110 END;
00111 
00112 PROCEDURE ENTRY set_term (io_circuit, set_term_arg : integer);
00113 
00114 VAR data_buffer : line;
00115     circuit : integer;
00116     aux_param : port_param;
00117 
00118 BEGIN
00119   WITH aux_param DO
00120   BEGIN
00121     operation := set_terminal;
00122     arg1 := set_term_arg;
00123     circuit := io_circuit;
00124 
00125     REPEAT io(data_buffer, aux_param, aux, circuit)
00126     UNTIL status <> busy;
00127 
00128   END;
00129 END;
00130 
00131 procedure entry create_ascii_line (char_line : line;
00132                                    var conv_line : line;
00133                                    length : integer);
00134 
00135 var i, j, k, ascii_int, line_length : integer;
00136 
00137 begin
00138   K := 1;
00139   if length > 10 then
00140     line_length := 10
00141   else
00142     line_length := length;
00143   begin
00144     for i := 1 to line_length do
00145       begin
00146         ascii_int := ord(char_line [i]);
00147         conv_line [i*4] := '(:32:)';
00148           if (ascii_int < 33) or (ascii_int > 126) then
00149             for j := i*4-1 downto i*4-3 do
00150               begin
00151                 conv_line [j] := chr((ascii_int mod 10) + 48);
00152                 ascii_int := ascii_int div 10;
00153               end
00154           else
00155               begin
00156                 for j := i*4-1 downto i*4-2 do
00157                   conv_line [j] := '(:32:)';
00158                 conv_line [i*4-3] := char_line [i];
00159               end;
00160      end;
00161   end;
00162 end;
00163 
00164 PROCEDURE ENTRY scan_characters (char_line : line;
00165                                  var conv_line : line;
00166                                  length : integer);
00167 
00168 VAR i, line_length : integer;
00169 
00170 BEGIN
00171   FOR i := 1 to 72 DO
00172     conv_line [i] := '(:32:)';
00173   FOR i := 1 to length DO
00174     IF (char_line [i] < '(:32:)') or (char_line [i] > '(:126:)') THEN
00175       conv_line [i] := '(:32:)'
00176     ELSE
00177       conv_line [i] := char_line [i];
00178 END;
00179 
00180 PROCEDURE ENTRY input_line (io_circuit : integer; VAR inline : line;
00181                       VAR inline_length : integer);
00182 VAR data_buffer : line;
00183     circuit : integer;
00184     aux_param : port_param;
00185 
00186 BEGIN
00187   WITH aux_param DO
00188   BEGIN
00189     operation := get_line;
00190     arg1 := line_length;
00191     arg2 := 0;
00192     circuit := io_circuit;
00193 
00194     REPEAT io(data_buffer, aux_param, aux, circuit)
00195     UNTIL status <> busy;
00196  
00197 
00198     inline := data_buffer;
00199     inline_length := arg2;
00200   END;
00201 END;
00202 
00203 PROCEDURE ENTRY output_line (io_circuit : integer; outline : line;
00204                        length : integer);
00205 VAR data_buffer : line;
00206     i, circuit : integer;
00207     aux_param : port_param;
00208 
00209 BEGIN
00210   FOR i := 1 to length DO
00211     data_buffer [i] := outline [i];
00212   WITH aux_param DO
00213   BEGIN
00214     operation := send;
00215     arg1 := length;
00216     arg2 := 0;
00217     circuit := io_circuit;
00218 
00219     REPEAT io(data_buffer, aux_param, aux, circuit)
00220     UNTIL status <> busy;
00221   END;
00222 END;
00223 
00224 PROCEDURE ENTRY write_disk_line (io_circuit : integer;
00225                                        outline : line;
00226                                        length : integer);
00227 
00228 VAR write_cmd : array [1..22] of char;
00229     write_line : line;
00230     i, j, k, line_length : integer;
00231     aux_param : port_param;
00232     circuit : integer;
00233 
00234 BEGIN
00235   FOR i := 1 to 72 DO
00236     write_line [i] := '(:32:)';
00237   write_cmd := 'GO OLDWRT;BOBFOX.DMP; ';
00238   IF length > 45 THEN
00239     line_length := 45
00240   ELSE
00241     line_length := length;
00242   IF length < 2 THEN
00243     line_length := 10;
00244   FOR i := 1 TO 22 DO
00245     write_line [i] := write_cmd [i];
00246   FOR i := 1 TO line_length - 1 DO
00247     write_line [i+22] := outline [i];
00248   write_line [line_length+22] := '(:13:)';
00249   WITH aux_param DO
00250   BEGIN
00251     arg1 := line_length + 22;
00252     arg2 := 0;
00253     operation := send;
00254     circuit := io_circuit;
00255 
00256     REPEAT io(write_line, aux_param, aux, circuit)
00257     UNTIL status <> busy;
00258  
00259   END;
00260 END;
00261 
00262 PROCEDURE ENTRY get_buffer_info (io_circuit : integer;
00263                            VAR chars : integer;
00264                            VAR lines : integer);
00265 
00266 VAR data_buffer : line;
00267     circuit : integer;
00268     aux_param : port_param;
00269 
00270 BEGIN
00271   WITH aux_param DO
00272   BEGIN
00273     operation := terminal_info;
00274     arg1 := 0;
00275     arg2 := 0;
00276     circuit := io_circuit;
00277 
00278     REPEAT io(data_buffer, aux_param, aux, circuit)
00279     UNTIL status = complete;
00280   
00281     chars := arg1;
00282     lines := arg2;
00283   END;
00284 END;
00285 
00286 BEGIN
00287 END;
00288 
00289 
00290 
00291 
00292 
00293 TYPE circuit_process = PROCESS;
00294 
00295 VAR i, code : integer;
00296     status : io_result;
00297     circ_io : io_procedure;
00298     user_string : array [1..no_of_circuits] of short_line;
00299     circuit_built : boolean;
00300 
00301 BEGIN
00302   user_string [1] :='SALTYRON:39;s78comn                     ';
00303   user_string [2] :='SSEREP:39;s78devl                       ';
00304   user_string [3] :='CALSTATE:39;s78devl                     ';
00305   user_string [4] :='RGFOX:39;mybuddy                        ';
00306   INIT circ_io;
00307 
00308   CYCLE
00309     FOR i := 1 TO no_of_circuits DO
00310       BEGIN
00311         circ_io.check_circuit (i, circuit_built);
00312         IF NOT circuit_built THEN
00313           BEGIN
00314             circ_io.build_circuit (i, user_string[i], status, code);
00315             circ_io.output_line (i, '(:13:) ', 1);
00316             circ_io.output_line (i, '(:13:) ', 1);
00317           END;
00318       END;
00319     
00320     FOR i:= 1 TO 30 DO
00321       WAIT;
00322   END;
00323 END;
00324 
00325 TYPE disk_test1 = PROCESS;
00326 
00327 VAR i, inline_length : integer;
00328     disk_io1 : io_procedure;
00329     inline, test_inline : line;
00330 
00331 BEGIN
00332   INIT disk_io1;
00333   CYCLE
00334       disk_io1.output_line (3, 'TTY NO ECHO(:13:)', 12);
00335       disk_io1.output_line (3, 'DIR WEB###.*(:13:) ', 13);
00336   FOR i := 1 TO 10 DO
00337     BEGIN
00338       disk_io1.input_line (3, test_inline, inline_length);
00339       disk_io1.scan_characters (test_inline, inline, inline_length);
00340       disk_io1.write_disk_line (3, inline, 40);
00341     END;
00342 
00343   FOR i := 1 to 30 DO
00344     WAIT;
00345   END;
00346 END;
00347 
00348 TYPE disk_test2 = PROCESS;
00349 
00350 VAR i, inline_length : integer;
00351     disk_io2 : io_procedure;
00352     inline, outline : line;
00353 
00354 BEGIN
00355   INIT disk_io2;
00356   disk_io2.set_term (1,0);
00357   CYCLE
00358   FOR i := 1 to 10 DO
00359     begin
00360       disk_io2.write_disk_line (1, 'BOB(:13:)', 4);
00361       disk_io2.input_line (1, inline, inline_length);
00362       disk_io2.create_ascii_line (inline, outline, inline_length);
00363       disk_io2.write_disk_line (1, outline, 60);
00364     end;
00365 
00366   for i := 1 to 30 do
00367     wait;
00368   end;
00369 end;
00370 
00371 
00372 VAR circuit_maintainer : circuit_process;
00373     disk_writer1 : disk_test1;
00374     disk_writer2 : disk_test2;
00375 
00376 BEGIN
00377   INIT circuit_maintainer;
00378   INIT disk_writer1;
00379   INIT disk_writer2;
00380 END.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      