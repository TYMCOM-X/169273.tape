	TITLE SCRIPT
	SUBTTL E.CARTER
	SEARCH STENEX,CMDTXT

OPDEF CALL [PUSHJ P,]
OPDEF RET [POPJ P,]

A=1
B=2
C=3
D=4
E=5
P=17				; stack pointer

QUOTEC=="Q"-100			; default quote character is ^Q
ESCAPC=="Y"-100			; default escape character is ^Y

NVTTYP==7

PRGFGS: EXP Z			; program flags

CONECT: BLOCK 10		; connected directory name
ESCCHR: BLOCK 1			; escape character
LVL1PC: BLOCK 1			; for LEVTAB table
LVL2PC:	BLOCK 1
LVL3PC: BLOCK 1
LOGDIN: BLOCK 10		; logged in directory name
LOGJFN: BLOCK 1			; typescript file JFN
OUTFRK: BLOCK 1			; output fork
PRGFRK: BLOCK 1			; program to run fork
PTY:	BLOCK 1			; PTY: to assign 
QUOCHR:	BLOCK 1			; quote character
SAVTYP: BLOCK 1			; terminal type
SAVRFM: BLOCK 1			; terminal mode
SAVCO2: BLOCK 1			; terminal control char output control
SAVCO3: BLOCK 1
SAVJFN:	BLOCK 1			; copy of typescript file JFN
STACK: 	BLOCK 20		; stack
STRING:	BLOCK 50		; storage for error text
TTY:	BLOCK 1			; tty=100


FILSPC: 1B2+1B4
	100,,101
	0
	POINT 7,[ASCIZ/SUBSYS/]
	0
	POINT 7,[ASCIZ/SAV/]
	0
	0
	0

FILLOG: 1B2+1B4
	100,,101
	0
	POINT 7,LOGDIN
	0
	POINT 7,[ASCIZ/SAV/]
	0
	0
	0

FILCON: 1B2+1B4
	100,,101
	0
	POINT 7,CONECT
	0
	POINT 7,[ASCIZ/SAV/]
	0
	0
	0

LEVTAB: 0,,LVL1PC
	0,,LVL2PC
	0,,LVL3PC

CHNTAB:	REPEAT ^D19,<Z>
	1,,FRKTRM
	REPEAT ^D17,<Z>


; MACROS

; reset TTY parameters and flush saved tty chr in internal buffer

DEFINE RSTTTY (TYPE,%END)
<	CAIA
	 JRST %END
	MOVE A,TYPE
	MOVE B,SAVTYP
	STTYP			;; set terminal type
	MOVE B,SAVRFM
	SFMOD			;; set terminal modes
	MOVE B,SAVCO2
	MOVE C,SAVCO3
	SFCOC			;; set terminal control char output control
%END:>

; print escchr & quochr on terminal

DEFINE PRTCHR (CHR,%END)
<	CAIA
	 JRST %END
	MOVEI A,101
	MOVE B,CHR
	MOVEI C,10
	NOUT
	 JFCL
	HRROI A,[ASCIZ/(8) = /]
	PSOUT
	MOVEI A,101
	RFCOC
	PUSH P,B
	PUSH P,C
	MOVE B,[252525,,252525]
	MOVE C,[252525,,252525]		;; ^X for all
	SFCOC
	MOVE B,CHR
	BOUT
	POP P,C
	POP P,B
	SFCOC
	MOVEI A,"."
	PBOUT
%END:>

DEFINE MSG (STR,%END)
<	CAIA
	 JRST %END
	HRROI	1,STR
	PSOUT			;; output string to terminal
%END:>

DEFINE TXTMSG (STR,%END)
<	CAIA
	 JRST %END
	HRROI	1,[ASCIZ /
STR/]
	PSOUT			;; output text to terminal
%END:>

DEFINE OKINT (%END)
<	CAIA
	 JRST %END
	CIS			;; clear interrupt system
	MOVEI A,400000
	MOVEI B,1B19
	AIC			;; activate channel 19,fork termination
%END:>

DEFINE NOINT (%END)
<	CAIA
	 JRST %END
	CIS			;; clear interrupt system
	MOVEI A,400000
	MOVEI B,1B19
	DIC			;; deactivate channel 19, fork termination
%END:>

DEFINE HUHRET (TEXT,POPLST)
<	JRST [PUSH P,A
		HRROI A,[ASCIZ / ? TEXT
/]
		PSOUT
		POP P,A
		IRP POPLST,<POP P,POPLST>
		RET]
>

; flags in prgfgs

PROGFG==1B0			; on if have program fork
FIRST==1B1			; on if OUTFRK has been started
ESCFG==1B2			; on if escape charater was typed

; set flags

DEFINE SETFLG (WORD,FLAGS,%END)
<	CAIA
	JRST %END
	PUSH P,A
	MOVE A,[FLAGS]
	IORM A,WORD
	POP P,A
%END:	>

; clear flags

DEFINE CLRFLG (WORD,FLAGS,%END)
<	CAIA
	JRST %END
	PUSH P,A
	MOVE A,[FLAGS]
	ANDCAM A,WORD
	POP P,A
%END:	>

; skip if flags on

DEFINE IFNFLG (WORD,FLAGS,%NOSKP,%END)
<	CAIA
	JRST %END
	PUSH P,A
	MOVE A,[FLAGS]
	TDNN A,WORD
	 JRST %NOSKP
	POP P,A
	JRST %END+1

%NOSKP:	POP P,A
%END:	>

; skip if flags off

DEFINE IFEFLG (WORD,FLAGS,%NOSKP,%END)
<	CAIA
	JRST %END
	PUSH P,A
	MOVE A,[FLAGS]
	TDNE A,WORD
	 JRST %NOSKP
	POP P,A
	JRST %END+1

%NOSKP:	POP P,A
%END:	>


CMDCHR:	CHRSET <"?">,<HELP,RECOGNIZE,POSSIBILITIES>
	CHRSET <33>,<RECOGNIZE,NOISE,BREAK>
	CHRSET <40>,<BREAK,STORE,ECHO>
	CHRSET <11>,<BREAK,STORE,ECHO>
	CHRSET <37>,<BREAK>
	CHRSET <12>,<BREAK>
	CHRSET <14>,<BREAK>

CMDCHP:	CMDCHR-.,,CMDCHR

; command table for command scanner
; tablename: CMDSET (routine,command string,noise string)

SAVTBL:	CMDSET (.CLOSE,Close,typescript file)
	CMDSET (.CONTT,Continue,last program)
	CMDSET (.ESCAP,Escape,character is)
	CMDSET (.EXEC,Exec)
	CMDSET (.HELPS,Help)
	CMDSET (.OPEN0,Open,typescript file)
	CMDSET (.QUIT,Quit)
	CMDSET (.QUOTE,Quote,character is)
	CMDSET (.RESUM,Resume,output to typescript file)
	CMDSET (.RUN,Run,program)
	CMDSET (.SILEN,Silence,output to typescript file)
	CMDSET (.STATS,Status,of parameters)

STPTR:  SAVTBL-.,,SAVTBL	; pointer to table

HLPADR: ASCIZ / Enter command/	; pointer to help text
PMTADR:	ASCIZ /SCRIPT> /	; pointer to prompt text

CMDAC2: 0,,[PMTADR,,HLPADR]

START:	RESET
	MOVE P,[IOWD 20,STACK]	; initialize stack and clear flags
	CLRFLG (PRGFGS,<PROGFG!FIRST!ESCFG>)
	GJINF			; logged in dir# in 1, connected dir# in 2
	PUSH P,A
	HRROI A,CONECT		; connected directory
	DIRST
	 TXTMSG <%Failure to get connected directory name>
	HRROI A,LOGDIN		; logged in directory
	POP P,B
	DIRST
	 TXTMSG <%Failure to get logged in directoy name>
	MOVEI A,100
	MOVEM A,TTY
	SETZ A,
	ASPTY			; get PTY in AC 1
	 JRST JSTDIE		;  failure, just die
	PUSH P,A
	ASND			; assign PTY to this job
	 JRST [	POP P,A
		RLPTY		;  failure, release PTY and just die
		 JFCL
		JRST JSTDIE]
	POP P,PTY       
	CALL SAVTTY		; save terminal characteristics
	RSTTTY <PTY>		; assign them to the PTY
	CALL PSIINI		; enable interrupts
	MOVSI A,(1B0!1B1)
	CFORK			; create OUTFRK
	 JSP 16,OERROR
	MOVEM A,OUTFRK
	MOVEI A,ESCAPC		; set default escape & quote characters
	MOVEM A,ESCCHR
	MOVEI A,QUOTEC
	MOVEM A,QUOCHR

START0:	MOVE A,CMDCHP		; -# chars in table,,table adr for chars
	MOVE B,CMDAC2		; 0,,[prompt address,,help message address]
	SETZB C,D		; defaults for ptrs
	MOVE E,STPTR		; -# commands in table,,table adr for commands
	CALL GETCMD##		; get primary command
	 CAIA			; do nothing if null
	CALL (B)		; routine to call is returned in AC2
	JRST START0		; go get another command


; run EXEC

.EXEC:	HRROS A			; want EOL character and 'Confirm'
	CALL CHKTRM
	 HUHRET			; failure
	HRROI B,[ASCIZ/<SYSTEM>EXEC.SAV/]
	JRST .RUN0

; continue last run program

.CONTT:	HRROS A			; want EOL character and 'Confirm'
	CALL CHKTRM
	 HUHRET			; failure
	IFNFLG (PRGFGS,PROGFG)	; got one already?
	 HUHRET <No program to continue>
	MOVE A,PRGFRK
	RFORK
	JRST .RUN1

; silence typescript file

.SILEN:	HRROS A			; want EOL character and 'Confirm'
	CALL CHKTRM
	 HUHRET			;  failure
	SKIPN LOGJFN		
	 HUHRET <No typescript file to silence or already silenced!>
	SETZM LOGJFN		; clear LOGJFN so no more BOUT's to it
	RET

; resume output to typescript file

.RESUM:	HRROS A			; want EOL
	CALL CHKTRM
	 HUHRET			; failure
	SKIPN A,SAVJFN
	 HUHRET <No typescript file to resume output to!>
	MOVEM A,LOGJFN		; restore LOGJFN so BOUT's are done to it
	RET

; set new escape character

.ESCAP:	HRRZS A			; want cont char
	CALL CHKTRM
	 HUHRET			; failed
	PBIN
	CALL CHKINT		; must be assignable to interrupt
	 HUHRET <Must be null, ^A thru ^Z, esc, rubout or space>
	MOVEM A,ESCCHR
	RET

; set new quote character

.QUOTE:	HRRZS A			; want cont char
	CALL CHKTRM
	 HUHRET			;  failed
	PBIN
	CALL CHKINT		; must be assignable to interrupt
	 HUHRET <Must be null, ^A thru ^Z, esc, rubout or space>
	MOVEM A,QUOCHR
	RET


; run a program

.RUN:	HRRZS A			; want continuation character
	CALL CHKTRM
	 HUHRET			; failure
	CALL GETJFN		; get JFN
	 JSP 16,OERROR		; failure
	PUSH P,A		; save JFN
	HRRZ B,A		; move JFN into RH of 2
	HRROI A,STRING		; where to store file name
	MOVE C,[211110,,1]
	JFNS
	POP P,A
	RLJFN
	 JFCL
	HRROI B,STRING		; pt to program to run

; get fork on what's in string

.RUN0:	CALL GETFRK##
	 HUHRET <%Failed to set up program fork.>
	MOVEM A,PRGFRK
	SETFLG (PRGFGS,PROGFG)
	MOVE A,PRGFRK
	TLO A,(1B0)		; start fork but return immediately
	SETZB B,C		; slot 0, no AC block
	HRL D,PTY		; primary JFN's
	HRR D,PTY
	CALL RUNFRK##
	 JRST [	MOVEI A,101	; error string ptr in B
		SETZ C,
		SOUT
		JRST DINICE]

; here if fork has already been started

.RUN1:	OKINT			; activate intrpt on chan 19, fork termination
	MOVE A,OUTFRK		; start/resume OUTFRK fork
	MOVEI B,OUTLUP
	IFNFLG (PRGFGS,FIRST)	; first time thru?
	 JRST [	SETFLG (PRGFGS,FIRST)
		SFORK		; yes, start at OUTLUP
		JRST .+1]
	RFORK			; no, resume where we left off
	CALL TRANSP		; make TTY: transparent

; get a byte from the TTY: and put it in the PTY:

INLUP:	PBIN			; get a byte from the TTY:
	CAMN A,ESCCHR		; wants out of running program?
	 JRST [	SETFLG (PRGFGS,ESCFG)
		JRST FRKTRM]	; yes
	CAMN A,QUOCHR		; quote character?
	 JRST INLUP		; yes, get next character
	PUSH P,A
	MOVE A,PTY
	POP P,B
	PSTI			; put it in the PTY:
	 JRST DINICE		;  failure, die nicely
	JRST INLUP

; get a byte from the PTY: and put it on the TTY: and typescript file

OUTLUP:	MOVE A,PTY	
	SETO B,
	PSTO			; get a byte from the PTY:
	 JRST DINICE		;  failure, die nicely
	MOVEI A,101		; print it on the TTY:
	BOUT
	SKIPE A,LOGJFN		; typscript?
	 BOUT			; yes, output it to the file
	JRST OUTLUP		

; stop PROGFRK,OUTFRK and return to command scanner

FRKTRM: CIS 
	MOVE A,PRGFRK
	FFORK
	MOVE A,OUTFRK
	FFORK
	RSTTTY <TTY>
	NOINT
	IFNFLG (PRGFGS,ESCFG)
	 JRST [	CLRFLG (PRGFGS,PROGFG)
		SETZM PRGFRK
		JRST .+1]
	CLRFLG (PRGFGS,ESCFG)
	RET


; open log file

.OPEN0:  HRRZS A			; want continuation character
	CALL CHKTRM
	 HUHRET			; failure

	MOVSI A,(1B0!1B3!1B4!1B16!1B17)
	MOVE B,[XWD 100,101]
	GTJFN			; get JFN for log file
	 JSP 16,OERROR		;  failure
	PUSH P,A
	MOVE B,[070000,,300000] ; set file opening bits
	OPENF			; open the log file
	 JSP 16,OERROR		; failure
	CALL CLOSIT		; close any existing log file
	POP P,A
	MOVEM A,LOGJFN
	MOVEM A,SAVJFN		; move log file JFN into LOGJFN
	RET

;PC IN 16

OERROR: CALL ERROR
	RET

; close any existing log file

.CLOSE:	HRROS A
	CALL CHKTRM
	 HUHRET
CLOSIT:	SKIPN SAVJFN		; existing log file?
	 RET			; no
	TXTMSG <Closing typescript file >
	HRROI A,STRING
	HRRZ B,SAVJFN
	MOVE C,[211110,,1]
	JFNS
	MSG <STRING>	
	MOVE A,SAVJFN
	CLOSF
	 JFCL
	SETZM LOGJFN
	SETZM SAVJFN
	RET

; print status of typescript file, quote and escape characters

.STATS:	HRROS A
	CALL CHKTRM
	 HUHRET
	SKIPN SAVJFN		; existing log file?
	 JRST STAT0		; no
	TXTMSG <     Current typescript file is >
	HRROI A,STRING
	HRRZ B,SAVJFN
	MOVE C,[211110,,1]
	JFNS
	MSG <STRING>	
	TXTMSG <     Typescript file is>
	SKIPE LOGJFN		; is it silenced?
	 MSG <[ASCIZ/ NOT/]>	; no
	MSG <[ASCIZ/ SILENCED./]>
	CAIA
STAT0:	TXTMSG <     No active typescript file.>
	TXTMSG <
     Escape character is >
	PRTCHR <ESCCHR>		; print the escape character
	TXTMSG <     Quote character is >
	PRTCHR <QUOCHR>		; print the quote character
	TXTMSG < >
	RET

; clean up and quit

.QUIT:	HRROS A			; want EOL
	CALL CHKTRM
	 HUHRET			; failure
.QUIT0:	CALL CLOSIT		; close any existing log file
	SKIPE A,PTY		
	 RELD			; deassign PTY if there was one
	  JFCL
	SKIPE A,PTY		; release PTY if there was one
	 RLPTY
	  JFCL
	MOVE A,OUTFRK		; freeze,kill and release OUTFRK
	FFORK
	KFORK
	RFRKH
	IFNFLG (PRGFGS,PROGFG)	; was a program run?
	 JRST .QUIT1		; no, just halt
	MOVE A,PRGFRK		; freeze,kill and release PRGFRK
	FFORK
	KFORK
	RFRKH
.QUIT1:	HALTF			; halt
	JRST .-1
	RET

; print help text

.HELPS:	HRROS A			; want EOL
	CALL CHKTRM
	 HUHRET			; failure
	HRROI A,HELPTX
	PSOUT
	RET
 
; get JFN on program to run
; 1st) connected
; 2nd) logged in 
; 3rd) SUBSYS

GETJFN:	HRRZI A,FILCON		
	SETZ B,			
	GTJFN			; look in connected directory
	 CAIA
	JRST SUCCES		; found it
	HRRZI A,FILLOG
	SETZ B,
	GTJFN			; look in logged in directory
	 CAIA
	JRST SUCCES		; found it
	HRRZI A,FILSPC
	SETZ B,
	GTJFN			; last chance, look in SUBSYS
	 RET			; failure, return+1
SUCCES:	AOS (P)			; found it, return+2
	RET

; save terminal type of TTY: 

SAVTTY:	MOVEI A,100
	GTTYP			; get terminal type in AC 2
	MOVEM B,SAVTYP
	RFMOD			; get terminal mode in AC 2
	MOVEM B,SAVRFM
	RFCOC			; get terminal control char output control
	MOVEM B,SAVCO2		
	MOVEM C,SAVCO3
	RET

; set up TTY: as transparent

TRANSP:	MOVEI A,100
	MOVEI B,NVTTYP
	STTYP
	RFMOD
	TRO B,1B20!1B21!1B22!1B23	; all wakeup
	TRZ B,1B28!1B29			; 8 bit binary
	SFMOD
	RET

; enable interrupts

PSIINI:	MOVEI 1,400000
	MOVE 2,[LEVTAB,,CHNTAB]
	SIR
	EIR
	RET

; accepts char in A and skips if legal int char code

CHKINT:	PUSH P,A		; don't clobber it
	CAIL A,"A"-100
	CAILE A,"Z"-100
	 CAIA
	JRST CHKIN1
	CAIE A,0		; NULL
	CAIN A,33		; ESC
	 JRST CHKIN1
	CAIE A,177		; RUBOUT
	CAIN A,40		; SPACE
	 JRST CHKIN1
	JRST CHKIN2

CHKIN1:	AOS -1(P)
CHKIN2:	POP P,A
	RET

; FLAG IS -1 FOR SKIP ON EOL CHARACTER
;IF WANT EOL AND GET 33, GET CONFIRMATION AND RETURN THAT CHAR

CHKTRM:	TLNE A,-1			;WANT CONTINUATION CHAR?
	 JRST CHKTRT			;NO-LOOK FOR EOL
	HRRZS A
	CAIE A,40
	CAIN A,11			;SPACE OR TAB?
	 JRST CHKTR4
	CAIN A,33			;ESC?
	 JRST CHKTR4
	JRST CHKTR1

CHKTRT:	HRRZS A
	CAIE A,37
	CAIN A,12
	 JRST CHKTR2
	CAIN A,14
	 JRST CHKTR2
	CAIE A,33
	 JRST CHKTR1
CONFRM:	HRROI A,[ASCIZ / [Confirm]/]
	PSOUT
CHKTR3:	PBIN
	CAIN A,37
	 JRST CHKTR2
	CAIN A,177
	 JRST CHKTR1
	HRROI A,[ASCIZ / ? /]
	PSOUT
	JRST CHKTR3

CHKTR2:	PUSH P,A
	HRROI A,[ASCIZ /
/]
	PSOUT
	POP P,A
CHKTR4:	AOS (P)
CHKTR1:	RET

;USER MOST RECENT ERROR FOR THIS PROCESS 
;ACCEPTS PC IN 16

ERROR:	PUSH P,1			;SAVE ACS
	PUSH P,2
	PUSH P,3
	HRROI 1,STRING
	HRLOI 2,400000
	SETZ 3,
	ERSTR
	 JFCL
	  JRST	[HRROI 2,[ASCIZ /Undefined error/]
		HRROI 1,STRING
		SETZ 3,
		SOUT
		JRST .+1]
	HRROI 1,STRING
	ESOUT
	HRROI 1,[ASCIZ / at /]
	PSOUT
	MOVEI 1,101
	HRRZ 2,16
	MOVEI 3,10
	NOUT
	 JFCL
	HRROI 1,[ASCIZ / 
/]
	PSOUT
	POP P,3
	POP P,2
	POP P,1
	RET

JSTDIE:	TXTMSG <?FATAL: Unable to assign a PTY: to this job>
	JRST .QUIT1

DINICE: TXTMSG <?FATAL: Unable to PSTI or PSTO to PTY:>
	JRST .QUIT0		; close log file, release PTY, etc.

HELPTX: ASCIZ %

	SCRIPT is a program that allows the user take a typescript
	of the input and output of any program or the EXEC.
	None of the input or output of SCRIPT is recorded so
	it is invisable to the typescript file.

Close (typescript file):
	Terminates logging of input and output,closes and releases
	the current typescript file.

Continue (last program):
	Continues most recently run program where it was suspended.
	Only continues a program that was halted by typing the 
	escape character.
	
Escape (character is):
	Defines the escape character for suspending the lower program.
	Typing the escape character returns the user to SCRIPT command
	mode, and freezes the lower program fork.  To continue the 
	lower program, give the "Continue" command.

Exec:
	Gets you a lower EXEC under SCRIPT.  Return to SCRIPT via
	the POP command to the EXEC, or by typing the escape character
	if you wish to "Continue" the EXEC.

Help:
	Prints this message.

Open (typescript file):
	Opens a typescript file for logging of the input/output of the 
	lower program fork.

Quit:
	Exits SCRIPT, killing all forks and releasing the PTY:

Quote (character is):
	Defines the quotation character used when running the lower
	program. Typing the quotation character causes the next character
	typed to be taked literally,  This is how one gets the escape
	character into the input stream of the lower program.

Resume (output to typescript file):
	Resumes logging of input/output of the lower program into
	the currently open typescript file.

Run (program):
	Run a user specified program.  When the program has finished 
	running, you will be returned to the SCRIPT command mode.
	If you wish to temporarily suspend running of the program
	to "Silence","Close", or "Resume" type the escape character to 
	return to SCRIPT command mode, and then give the "Continue"
	command to continue the program where you left off.

Silence (output to typescript file):
	Suspend logging of the lower program's input/output.
	Logging can be resumed by the "Resume" command.

Status (of parameters):
	Show the user current SCRIPT parameters such as what
	the escape character is, status of the typescript file etc.

% ; end of help text

	END START





  