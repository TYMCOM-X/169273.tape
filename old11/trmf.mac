	.TITLE	TRMF    - TERMINAL SERVICE FUNCTION PACKET ROUTINES
	.SBTTL	TRMF   - NEXILIS/JRG

	XLPAR			;DON'T LIST PARAMETER FILES

	CODE

.IF NDF ..SAT				;Default is complete Nexilis support
  ..SAT=!0
.ENDC

;DEFINE INTERNAL FLAG BITS WHICH ARE KEPT IN R4

$FFRPT=!100000		;Generate report device parameters packet
$FFSET=!040000		;Processing change or set function
$FFCHG=!000200		;Change value of parameter
$FFCOM=!000001		;Bit value should be complemented (Must be = 1!)

	.SBTTL	TRMF   - CONTROL PACKET ROUTINES

;SUBROUTINE CALLED WHEN PACKET TRANSFERED TO EMPTY DST LIST
;	C(R1) = ADDRESS OF PACKET
;	C(R4) = ADDRESS OF DDB
;	C(SD) = ADDRESS OF SDB
;	CALL	TRPOKE

TRPOKE::CALL	GETPKT#			;Get current packet
	MOVB	PKTYPE(R1),R0		;Get packet type
	BR	OUTCP2			;Continue

;HERE FOR CONTROL PACKET

OUTCPK::BIC	#$T1ACT!$T1ACX,SDTRS1#(SD);INDICATE OUTPUT NOT ACTIVE
OUTCP2:	ASL	R0			;FOR WORD INDEXING
	JMP	@PKTDSP(R0)		;DISPATCH ON THE PACKET TYPE

;PACKET TYPE DISPATCH TABLE

	PURE

PKTDSP:	.WORD	PKTFN2			;.PTDAT =  0 - DATA
	.WORD	CMDCNP#			;.PTCON =  1 - CONNECT
	.WORD	CMDACK#			;.PTACK =  2 - CONNECTION ACK
	.WORD	CMDNAK#			;.PTNAK =  3 - CONNECTION NAK
	.WORD	PKTFUN			;.PTFUN =  4 - FUNCTION
	.WORD	PKTFUN			;.PTINT =  5 - INTERRUPT FUNCTION
	.WORD	PKTEAT			;.PTEAT =  6 - EAT FUNCTION
	.WORD	CMDDIS#			;.PTDIS =  7 - DISCONNECT
	.WORD	CMDDIS#			;.PTKIL = 10 - KILL CONNECTION
	.WORD	CMDDAK#			;.PTDAK = 11 - DISCONNECT ACK
	.WORD	PKTFIN			;.PTRCR = 12 - Reconnect request

	CODE
	.PAGE
;Here for eat packets

PKTEAT:	PUSH	R1			;Save address of packet
	MOV	#.LFSTP,R0		;Stop terminal output
	CALL	TRMFNC#
	POP	R1			;Restore packet address
					;Fall into function and interrupt code

;Here for function and interrupt packets

PKTFUN:	TSTB	PKCNT(R1)		;IS THERE A FUNCTION BYTE?
	BLE	PKTFIN			;No-ignore the packet!
	MOVB	PKDATA(R1),R0		;YES-GET FUNCTION
	ASL	R0			;FOR WORD INDEXING
	CMP	#FUNMAX,R0		;LEGAL FUNCTION?
	BLOS	PKTFIN			;NO-IGNORE IT
	JMP	@FUNDSP(R0)		;YES-DISPATCH ON THE FUNCTION

;FUNCTION DISPATCH TABLE

	PURE

.IF EQ ..SAT
	.MACRO	FNC  ADDR
	.WORD	ADDR
	.ENDM
.IFF
	.MACRO	FNC  ADDR
	.WORD	PKTFIN
	.ENDM
.ENDC

FUNDSP:	.WORD	PKTFIN		;.FNNUL =  0 - NULL
	.WORD	TRMOPS		;.FNHIN =  1 - HARD INTERRUPT
	.WORD	PKTFIN		;.FNSIN =  2 - SOFT INTERRUPT
	FNC	TRMOSA		;.FNOSA =  3 - OUTPUT SUPPRESS ACK
	.WORD	TRMOPS		;.FNOPS =  4 - OUTPUT SUPPRESS
	.WORD	PKTFIN		;.FNOPH =  5 - OUTPUT HOLD
	.WORD	PKTFIN		;.FNOPA =  6 - OUTPUT ALLOW
	.WORD	TRMCDP		;.FNCDP =  7 - CHANGE DEVICE PARAMETERS
	.WORD	TRMSDP		;.FNSDP = 10 - SET DEVICE PARAMETERS
	.WORD	TRMADP		;.FNADP = 11 - ACCESS DEVICE PARAMETERS
	.WORD	PKTFIN		;.FNRDP = 12 - REPLY WITH DEVICE PARAMETERS
	.WORD	PKTFIN		;.FNDCN = 13 - DEVICE CONTROL
	.WORD	PKTFIN		;.FNDST = 14 - DEVICE STATUS
	.WORD	PKTFIN		;.FNADS = 15 - ACCESS DEVICE STATUS
	FNC	CNTOUT		;.FNCON = 16 - CONTINUE OUTPUT ;(^Q)
	FNC	FRCHRD		;.FNFHI = 17 - FORCE HARD INTERRUPT
	.WORD	PKTFIN		;.FNDEM = 20 - DEFERRED ECHO MODE CONTROL
	.WORD	RQDISC		;.FNRQD = 21 - REQUEST DISCONNECT
				;	   (I.E. X.29 INVITATION TO CLEAR)
	.WORD	TRMOPS		;.FNRQC = 22 - REQUEST BUFFER CLEAR
	.WORD	TRMREQ		;.FNREQ = 23 - REQUEST (YELLOW BALL)
	.WORD	PKTFIN		;.FNRSP = 24 - RESPONSE (ORANGE BALL)
	.WORD	TRMGRN		;.FNGRN = 25 - GREEN BALL
	.WORD	TRMRED		;.FNRED = 26 - RED BALL
	.WORD	TRMBLK		;.FNLST = 27 - LOST DATA INDICATION (BLACK BALL)
	.WORD	PKTFIN		;.FNLSX = 30 - REFLECTED LOST DATA INDICATION
				;		 (GRAY BALL)
	.WORD	PKTFIN		;.FNBRK = 31 - BREAK REQUEST
	.WORD	TRMRKL		;.FNHNG = 32 - HANG UP REQUEST
	.WORD	TRMXHG		;.FNXHG = 33 - HARD HANG UP REQUEST
	.WORD	PKTFIN		;.FNRCC = 34 - RECCONECT CONTROL
	.WORD	PKTFIN		;.FNXGB = 35 - SPECIAL CHARACTER GOBBLER
	.WORD	PKTFIN		;.FNSRQ = 36 - STATUS REQUEST
	.WORD	TRMCLI		;.FNCLI = 37 - CLEAR LOGIN MODE
	FNC	TRMBIN		;.FNBIN = 40 - Output binary characters
	FNC	TRMFLR		;.FNFLR = 41 - Force line retype
	.WORD	PKTFIN		;.FNXMK = 42 - X.25 Marker
	FNC	TRMXIT		;.FNXIT = 43 - X.25 Interrupt
	.WORD	PKTFIN		;.FNXIC = 44 - X.25 Interrupt confirmation
	FNC	TRMXRS		;.FNXRS = 45 - X.25 Reset
	FNC	TRMXRC		;.FNXRC = 46 - X.25 Reset confirmation
FUNMAX=!.-FUNDSP

	CODE
	.PAGE
	.SBTTL	TRMF   - OUTPUT SUPPRESS ACK FUNCTION (.FNOSA)

;HERE FOR OUTPUT SUPPRESS FUNCTION (.FNOPS)

TRMOPS:	CALL	ACKOPS#			;DO THE WORK
	CALL	DELSRC#			;DELETE INPUT PACKETS
	  NOP
	BR	PKTFN2			;THATS ALL FOR NOW

;HERE FOR OUTPUT SUPPRESS ACK FUNCTION (.FNOSA)

.IF EQ ..SAT
TRMOSA:	BIC	#$T1SOP,SDTRS1#(SD)	;CLEAR THE OUTPUT SUPPRESS BIT
	BR	PKTFIN			;Thats all
.ENDC

	.SBTTL	TRMF   - CONTINUE OUTPUT FUNCTION (.FNCON)

;HERE FOR CONTINUE OUTPUT FUNCTION (.FNCON) - THIS FUNCTION HAS THE SAME
;  AFFECT AS TYPING ^Q ON THE TERMINAL!

.IF EQ ..SAT
CNTOUT:	TBBN	$T1ACT,SDTRS1#(SD),PKTFIN;IGNORE IT IF OUTPUT IS ACTIVE!
	CALL	JNKCPK#			;GET RID OF THE PACKET
	CALL	HNDXON#			;PROCESS THE X-ON
	  NOP
	BR	PKTFN2			;THATS ALL
.ENDC

	.SBTTL	TRMF   - FORCE HARD INTERRUPT

;HERE TO FORCE A HARD INTERRUPT CHARACTER INTO THE TERMINAL INPUT ROUTINE

.IF EQ ..SAT
FRCHRD:	CALL	JNKCPK#			;GET RID OF THE PACKET
	MOVB	SDTRHI#(SD),R0		;GET THE HARD INTERRUPT CHARACTER
	CJMP	TRDATA#			;AND GO PROCESS IT JUST LIKE A 
					;  CHARACTER FROM THE KEYBOARD!
.ENDC
	.PAGE
	.SBTTL	TRMF   - Output binary characters from function (.FNBIN)

;This function contains 1 or more output characters which are to be output
;  as binary characters regardless of the current output mode - the current
;  output mode is not affected

.IF EQ ..SAT
TRMBIN:	TBBN	$T1SOP,SDTRS1#(SD),PKTFIN;Junk this is output is suppressed
	TBBN	$T1ACT,SDTRS1#(SD),RTN005;Can't do this until output is idle
	BISB	#.OSESC,SDTROS#(SD)	;Change output state
	DECB	PKCNT(R1)		;Reduce byte count
	BGT	2$			;Go on if more there
	BICB	#.OSESC,SDTROS#(SD)	;Finished-fix up the output state
	BR	PKTFIN			;Go give up the packet and continue

2$:	INCB	PKPNT(R1)		;Bump pointer
	MOVB	PKPNT(R1),R0		;Get pointer
	ADD	R1,R0			;Point to the data byte
	MOVB	PKDATA(R0),R0		;Get data
	JMP	TROCNT#			;And go output it
.ENDC

	.SBTTL	TRMF   - Force line retype (.FNFLR)

;This function causes the same action as if the "line retype character"
;  had been typed on the terminal's keyboard, except that no echo of that
;  character occures

.IF EQ ..SAT
TRMFLR:	TBBN	$T1ACT,SDTRS1#(SD),RTN005;Can't do this until output is idle
	TBBE	$T1ECH,SDTRS1#(SD),PKTFIN;Ignore this if not echoing
	CALL	JNKCPK#			;Give up the packet
	CALL	REECHO#			;Re-echo the current input line
	JMP	OUTRD1#

;-----
; TRMXIT - X.25 Interrupt packet.  send an X.25 Interrupt Acknowledgement in
;  a function packet.
;-----
TRMXIT:
	MOV	#<.PTFUN*400+1>,PKCNT(R1)	;FUNCTION PACKET, 1 BYTE DATA
	MOVB	#.FNXIC,PKDATA(R1)
TRMXI2:	JMP	PKTRTX				;GO SEND IT BACK

;-----
; TRMXRS - X.25 Reset in an Eat packet.  Return a Reset Confirmation in an 
;   Eat packet.
;-----
TRMXRS:
	BIC	#$T1SOP,SDTRS1#(SD)		;CLEAR SOP FLAG ON RESET
	MOV	#<.PTEAT*400+1>,PKCNT(R1)	;EAT PACKET, 1 BYTE DATA
	MOVB	#.FNXRC,PKDATA(R1)
	BR	TRMXI2

;-----
; TRMXRC - X.25 Reset Confirmation.  Clear the output suppress flag on receiving it
;-----
TRMXRC:
	BIC	#$T1SOP,SDTRS1#(SD)
	JMP	PKTFIN

.ENDC
	.PAGE
	.SBTTL	TRMF   - Clear login mode function (.FNCLI)

;HERE FOR CLEAR LOGIN MODE FUNCTION

TRMCLI:	CALL	JNKCPK#			;GIVE UP THE PACKET
	BIC	#$T3LGI,SDTRS3#(SD)	;CLEAR THE BIT
.IF EQ ..SAT
	TBBN	$T1DEX,SDTRS1#(SD),2$	;IS HE DOING DEFERRED ECHO STUFF?
.ENDC
	TBBN	$T4SEL,SDTRS4#(SD),2$	;YES-IS THIS A SELECTRIC?
	BIS	#$T1DEM,SDTRS1#(SD)	;NO-START HIM IN DEFERED ECHO MODE
2$:	MOV	#.CXRST#,R2		;RESET THE COMMAND DECODER
	CALL	CMDENT#
	BR	PKTFN2			;THATS ALL

	.SBTTL	TRMF	- "BLACK BALL FUNCTION (.FNLST)

TRMBLK:	MOVB	#.FNLSX,PKDATA(R1)	; CHANGE TO GREY BALL
	BR	PKTRT1			; SEND IT BACK

	.SBTTL	TRMF   - "Red ball" function (.FNRED)

;HERE FOR "RED BALL"  FUNCTION

TRMRED:	CALL	CLRBAL			;CLEAR THE BALL FLAGS
PKTFIN:	CALL	JNKCPK#			;GIVE UP THE PACKET
PKTFN2:	TBBN	$T1ACT!$T1CMD,SDTRS1#(SD),RTN005;JUST RETURN IF OUTPUT IS ACTIVE
	JMP	OUTRD1#			;NOT ACTIVE-SEE IF MORE TO DO

	.SBTTL	TRMF   - "Green ball" function

;HERE FOR "GREEN BALL" FUNCTION

TRMGRN:	TBBN	$T1ACT,SDTRS1#(SD),1$	;WAIT IF OUTPUT IS ACTIVE
	TBBE	$T1CMD,SDTRS1#(SD),TRMGN2;OR IF COMMAND MODE
1$:	CLRB	PKPNT(R1)		;MUST WAIT-CLEAR PACKET POINTER
RTN005:	RETURN				;AND FORGET ABOUT IT FOR NOW

TRMGN2:	TBBE	$T6GBF,SDTRS6#(SD),PKTFIN;IGNORE IT IF GREEN BALL FLAG NOT SET
	CALL	CLRBAL			;CLEAR THE BALL FLAGS
	TBBE	$T4SEL,SDTRS4#(SD),TRMGR2;IS THIS A 2741 TERMINAL?
	CALL	JNKCPK#			;YES-GIVE UP THE PACKET
ENBKEY::BIS	#$S1HLD,SDSTS1#(SD)	;HOLD ADDITIONAL OUTPUT
	BIC	#$T6LMB!$T6ICU!$T6ICX,SDTRS6#(SD)
					;TERMINAL IS NOT IN LIMBO AND INPUT
					;  IS LOWER CASE WITH NO PREFIX RECEIVED
	BIS	#$T6EOA,SDTRS6#(SD)	;TERMINAL KEYBOARD IS ENABLED AND IT
					;  WILL SEND AN "EOA" NEXT!
	MOVB	#SLEOT,SDTRSX#(SD)	;GET EOT CODE
	MOVB	#FPCOUT#,SDTRFX#(SD)	;SETUP FOR FILLER OUTPUT
	BISB	#.OSFIL,SDTROS#(SD)
	MOV	#12.,R2			;Setup for delay
	CALL	CHRDLY#
	JMP	OUTDLY#			;GO START DELAY

;HERE IF NOT A 2741 TERMINAL

TRMGR2:	TBBE	$T1DEM,SDTRS1#(SD),PKTFIN;THATS ALL IF NOT IN DEFERRED ECHO MODE
	TBBE	$T1ECH,SDTRS1#(SD),PKTFIN;OR IF DON'T WANT TO ECHO
	BIC	#$T1DEM,SDTRS1#(SD)	;LEAVE DEFERRED ECHO MODE
	MOV	#.PTFUN*400+2,PKCNT(R1)	;CHANGE TO "LEAVE D.E.M." PACKET
	MOV	#0*400+.FNDEM,PKDATA(R1)
	BR	PKTRTX			;CONTINUE
	.PAGE
	.SBTTL	TRMF   - Request function (.FNREQ)

;HERE FOR "REQUEST" FUNCTION

TRMREQ:	MOVB	#.FNRSP,PKDATA(R1)	;CHANGE IT TO A "RESPONSE" FUNCTION
PKTRT1:	MOVB	#1,PKCNT(R1)		;MAKE SURE COUNT IS RIGHT
PKTRTX:	CALL	CPKRTN#			;SEND THE PACKET BACK
	BR	PKTFN2			;FINISHED HERE

;HERE FOR REQUEST TO DISCONNECT FUNCTION

RQDISC:	
	CALL 	JNKCPK#			;FREE THIS FUNCTION PACKET
	CALL	MAKDSC#			;MAKE AND SEND A KILL PACKET
	RETURN

;HERE FOR HARD (HALF-DUPLEX) HANGUP FUNCTION

TRMXHG:	TBBE	$T4SEL,SDTRS4#(SD),PKTFIN ;SKIP HANGUP IF NOT HALF DUX TERMINAL

;HERE FOR HANG UP FUNCTION

TRMRKL:	CALL	JNKCPK#			;GIVE UP THE PACKET
	CALL	HUNGUP#			;HANG HIM UP!
	BR	PKTFN2			;THATS ALL

;SUBROUTINE TO CLEAR THE BALL FLAGS
;	CALL	CLRBAL

CLRBAL::BIC	#$T6BOF!$T6GBF!$T6RBF,SDTRS6#(SD);CLEAR THE FLAGS
	PUSH	R1			;SAVE R1
	MOV	#BALTMO#,R1		;KILL TIMER REQUEST
	CALL	TIMKIL#
	POP	R1			;RESTORE R1
	RETURN				;AND RETURN
	.PAGE
	.SBTTL	TRMF   - CHANGE DEVICE PARAMETERS FUNCTION (.FNCDP)

;HERE FOR "CHANGE DEVICE PARAMETERS" FUNCTION (.FNCDP) THIS FUNCTION COMBINES
;  THE SET AND ACCESS FUNCTIONS IN ONE OPERATION

TRMCDP:	MOV	#$FFSET!$FFRPT,R4	;INDICATE SHOULD SET NEW VALUE AND
					;  SHOULD GENERATE REPLY PACKET
	BR	TRMPRS			;CONTINUE

	.SBTTL	TRMF   - SET DEVICE PARAMETERS FUNCTION (.FNSDP)

;HERE FOR "SET DEVICE PARAMETERS" FUNCTION (.FNSDP) THIS FUNCTION SETS NEW
;  VALUES BUTUT DOES NOT GENERATE A REPLY.  ERRORS ARE IGNORED.

TRMSDP:	MOV	#$FFSET,R4		;INDICATE SHOULD SET NEW VALUE BUT
					;  SHOULD NOT GENERATE REPLY
	BR	TRMPRS			;CONTINUE

	.SBTTL	TRMF   - ACCESS DEVICE PARAMETERS FUNCTION (.FNADP)

;HERE FOR "ACCESS DEVICE PARAMETERS" FUNCTION -(.FNADP) THIS FUNCTIONS DOES NOT
;  CHANGE THE CURRENT VALUE BUT JUST REPORTS IT IN A "REPORT DEVICE PARAMETERS"
;  PACKET.

TRMADP:	MOV	#$FFRPT,R4		;INDICATE SHOULD NOT SET NEW VALUE BUT
					;  SHOULD GENERATE REPLY
					;FALL INTO TRMPRS

	.SBTTL	TRMF   - COMMON ROUTINE FOR DEVICE PARAMETER FUNCTIONS

;COMMON ROUTINE FOR ALL THREE DEVICE PARAMETER FUNCTIONS

TRMPRS:	PUSH	R1			;SAVE ADDRESS OF PACKET
	PUSHB	PKCNT(R1)		;GET BYTE COUNT
	ASRB	(SP)			;CHANGE TO ITEM COUNT
	ADD	#PKDATA+1,R1		;POINT TO FIRST ITEM
TRMPR2:	DECB	(SP)			;MORE TO DO?
	BGE	TRMPR3			;YES
	TST	(SP)+			;NO-REMOVE JUNK FROM STACK
	POP	R1			;RESTORE PACKET ADDRESS
	TBBE	$FFRPT,R4,4$		;FINISHED IF NO REPLY WANTED
	MOVB	#.FNRDP,PKDATA(R1)	;WANT REPLY-FIX UP THE FUNCTION TYPE
	CALL	CPKRTN#			;SEND THE PACKET BACK
	BR	6$			;CONTINUE

4$:	CALL	JNKCPK#			;GIVE UP THE PACKET
6$:	TSTB	SDTRBS#(SD)		;BREAK ON ALL CHARACTER MODE?
	BMI	7$			;Yes
	TSTB	SDTRIL#(SD)		;No-input buffer limit in effect?
	BEQ	10$			;No-finished
	CMPB	SDTRIL#(SD),SDTRIC#(SD)	;Yes-is the input buffer too big now?
	BHI	10$			;No-finished
7$:	CALL	SNDTRP#			;Yes-make sure nothing buffered
10$:	JMP	PKTFN2			;THATS ALL
	.PAGE
;HERE TO GET NEXT ITEM

TRMPR3:	BIC	#$FFCHG!$FFCOM,R4	;Clear local flags
	MOVB	(R1),R2			;Get parameter
	BMI	2$			;If should not change this parameter
	TBBE	$FFSET,R4,2$		;Is this for a change or set function?
	BIS	#$FFCHG,R4		;Yes-indicate should change parameter
2$:	BIC	#^C177,R2		;Remove junk
	BICB	#^C177,(R1)+
	CMP	#MAXPAR,R2		;Valid parameter?
	BLO	BADPAR			;No
	ASL	R2			;Yes-adjust for word indexing
	MOV	DSPTBL(R2),R3		;Get dispatch table entry
	BPL	BITCOM			;If should change single bit
	MOVB	(R1),R0			;Get new value
	TBBN	040000,R3,VALCOM	;If should change 8 bit value
	BIC	#^C037776,R3		;Get dispatch offset
	ADD	R3,PC			;and dispatch
DSPBAS=.

;Here to process simple parameter which sets a value

VALCOM:	TBBE	020000,R3,4$		;Want just 7 bits?
	BICB	#^C177,R0		;Yes-remove the extra bit
4$:	BIC	#^C377,R3		;Get SDB offset
VALCO2:	ADD	SD,R3
	TBBE	$FFCHG,R4,10$		;Should we change this value?
	MOVB	R0,(R3)			;Yes-do so
10$:	MOVB	(R3),(R1)		;Get current value
	BR	NXTPAR			;Thats all for this one

;Here to process parameter which changes a single bit

BITCOM:	MOVB	R3,R0			;Get mask
	BPL	4$			;See if should invert value
	CMPB	#200,R0
	BNE	6$			;Yes
	BR	BITCO2			;No

4$:	CMPB	#177,R0			;See if should invert bit for 200
	BNE	BITCO2			;No
6$:	COMB	(R1)			;Yes-invert value
	COM	R0			;Fix up the mask
	INC	R4			;Remember to invert value returned
BITCO2:	SWAB	R3			;Get offset in SDB
	MOVB	R3,R3
	ADD	SD,R3			;Point to the byte to change
	TBBE	$FFCHG,R4,20$		;Should we change the bit?
	RORB	(R1)			;Yes-get new value in C
	BCS	14$			;Should we set it?
	BICB	R0,(R3)			;No-clear it
	BR	20$			;Continue

14$:	BISB	R0,(R3)			;Set the bit
20$:	CLRB	(R1)			;Assume value should be 0
	BITB	R0,(R3)			;Test the bit
	BEQ	22$			;Yep-the bit is clear
	INCB	(R1)			;Nope-give him a 1
22$:	TBBE	$FFCOM,R4,24$		;Should this be complented?
	COMB	(R1)			;Yes-do it
	BICB	#^C1,(R1)		;Only give him 1 bit
24$:	BR	NXTPAR			;Thats all

;HERE IF HAVE BAD PARAMETER (NOTE: MUST BE AFTER DSPBAS SINCE WE GET HERE
;  FROM THE DISPATCH ON A 0 PARAMETER NUMBER AND TABLE ENTRIES MUST DISPATCH
;  FORWARDS!)

BADPAR:	CLRB	(R1)			;SET VALUE TO 0
BADVAL:	BISB	#200,-1(R1)		;INDICATE ERROR
NXTPAR:	INC	R1			;BUMP TO NEXT ITEM
	BR	TRMPR2			;CONTINUE
	.PAGE
;Dispatch table for terminal parameters
;  This macro generates a single table with 1 word entries.  The high order
;    bites of each entries specify the type of entry as followes:
;	000000+n*400+m		n is a SDB offset (must be less than 200) and
;				  m is an 8 bit mask.  If only 1 bit is set to
;				  1 in m, that single bit is changed.  If only
;				  1 bit is set to 0 in m, that single bit is
;				  changed and is then inverted.
;	100000+n		n is the dispatch offset for the routine to
;				  process the parameter
;	140000+n		n is a SDB offset.  An 8 bit value is changed.
;	160000+n		n is a SDB offset.  An 8 bit value is changed
;				  but the high order bit of the new value is
;				  cleared first.
;  The format of the macro is as follows:
;	PRM{X}	TYPE,OFFSET,BIT
;  Where:
;	X is added after the macro name if this parameter is not processed
;	  for a "Tymsat" node.
;	TYPE   = Type of entry as followes:
;		   D = Dispatch to special routine.
;		   V = Change 8 bit value in SDB.
;		   C = Change 8 bit value in SDB after masking new value to
;			 7 bits.
;		   B = Change single bit in SDB word.
;		   I = Change single bit in SDB word, inverted.
;	OFFSET = Address of special routine if TYPE is D, otherwise offset in
;		   SDB of word or byte to change.
;	BIT    = Only present if TYPE is B or I. Specifies which in bit in
;		   the SDB word specified by OFFSET to change.

	PURE

	.MACRO	PRM  TYPE,OFFSET,BIT
.IF IDN <TYPE><D>		;If dispatch
	.WORD	100000+<OFFSET-DSPBAS>
.ENDC
.IF IDN <TYPE><V>		;If value for SDB byte (8 bits)
	.WORD	OFFSET'#+140000
.ENDC
.IF IDN <TYPE><C>		;If character for SDB byte (7 bits only)
	.WORD	OFFSET'#+160000
.ENDC
.IF IDN <TYPE><B>		;If bit for SDB status word
  .IF NE BIT&377
	.BYTE	BIT,OFFSET'#
  .IFF
	.BYTE	BIT/400,OFFSET'#+1
  .ENDC
.ENDC
.IF IDN <TYPE><I>		;If inverted bit for SDB status word
  .IF NE BIT&377
	.BYTE	^C<BIT>,OFFSET'#
  .IFF
	.BYTE	<^C<BIT/400>>&377,OFFSET'#+1
  .ENDC
.ENDC
	.ENDM

.IF EQ ..SAT
	.MACRO	PRMX  TYPE,OFFSET,BIT
	PRM	TYPE,OFFSET,BIT
	.ENDM
.IFF
	.MACRO	PRMX  TYPE,OFFSET,BIT
	.WORD	100000+<BADPAR-DSPBAS>
	.ENDM
.ENDC

	.EVEN

DSPTBL:	PRM	D,BADPAR	;	=   0 - Illegal
	PRMX	C,SDTRCI	;.TPCIC =   1 - Command interrupt character
	PRM	D,ECHCTL	;.TPECH =   2 - Echo Control 
	PRMX	D,BRKSET	;.TPBST =   3 - Break set
	PRMX	D,IDLTMR	;.TPITD =   4 - Idle timer delay
	PRMX	B,SDTRS5,$T5TAP	;.TPTAP =   5 - "Paper tape" mode
	PRMX	B,SDTRS5,$T5NMC	;.TPNMC =   6 - Network message control
	PRMX	V,SDTRPB	;.TPBRK =   7 - Break handling
	PRMX	D,PROFIL	;.TPPRF =  10 - Terminal profil
	PRM	D,BAUDRT	;.TPRAT =  11 - Baud rate
	PRMX	V,SDTRLW	;.TPWID =  12 - Line width
	PRMX	V,SDTRPG	;.TPLEN =  13 - Page length
	PRM	B,SDTRS4,$T4HOE	;.TPOHE =  14 - Output hold enable
	PRMX	C,SDTRHI	;.TPHIC =  15 - Hard interrupt character
	PRMX	C,SDTRSI	;.TPSIC =  16 - Soft interrupt character
	PRMX	C,SDTRSO	;.TPOSC =  17 - Output suppress character
	PRMX	C,SDTRDL	;.TPDEL =  20 - Delete character
	PRMX	C,SDTRLX	;.TPLDC =  21 - Line delete character
	PRMX	C,SDTRRE	;.TPLRC =  22 - Line retype character
	PRMX	B,SDTRS4,$T4HTS	;.TPSHT =  23 - Simulate horizontal tab
	PRMX	B,SDTRS4,$T4VTS	;.TPSVT =  24 - Simulate vertical tab
	PRMX	B,SDTRS4,$T4FFS	;.TPSFF =  25 - Simulate form feed
	PRM	V,SDTRCM	;.TPMCD =  26 - Min/max CR delay
	PRM	V,SDTRCD	;.TPFCD =  27 - Fixed CR delay
	PRM	V,SDTRCV	;.TPVCD =  30 - Variable CR delay
	PRM	V,SDTRLD	;.TPLFD =  31 - LF delay
	PRM	V,SDTRHD	;.TPHTD =  32 - Horizontaldelay
	PRM	V,SDTRVD	;.TPVTD =  33 - Vertical tab delay
	PRM	V,SDTRFD	;.TPFFD =  34 - Fixed form feed delay
	PRMX	V,SDTRFV	;.TPVFD =  35 - variable form feed delay
	PRMX	V,SDTRBD	;.TPBSD =  36 - Backspace delay
	PRM	D,LFDINS	;.TPLFI =  37 - Line feed insersion
	PRM	D,CRNINS	;.TPCRI =  40 - Carriage return insersion
	PRM	B,SDTRS1,$T1IMI	;.TPIMI =  41 - Image mode input
	PRM	D,SETIMO	;.TPIMO =  42 - Image mode output
	PRMX	I,SDTRS5,$T5LCI	;.TPXLI =  43 - Xlate lower case input to upper
				;		  case
	PRMX	I,SDTRS5,$T5LCO	;.TPXLO =  44 - Xlate lower case output to upper
				;		  case
	PRMX	B,SDTRS5,$T5BDE	;.TPBDE =  45 - Backspace delete enable
	PRM	B,SDTRS4,$T4EDB	;.TPEDB =  46 - Echo delete character as
				;		  backspace
	PRMX	B,SDTRS4,$T4XBE	;.TPXBD =  47 - Extended backspace delete echo
	PRM	B,SDTRS4,$T4LCP	;.TPLCP =  50 - Local copy terminal
	PRMX	D,BADPAR	;.TPBC1 =  51 - 1ST additional break character
	PRMX	D,BADPAR	;.TPBC2 =  52 - 2ND additional break character
	PRMX	D,BADPAR	;.TPOPT =  53 - Output pending timer
	PRMX	B,SDTRS5,$T5ECC	;.TPCCE =  54 - Control character echo control
	PRMX	B,SDTRS5,$T5EED	;.TPESC =  55 - "ESC" character echo control
	PRMX	B,SDTRS4,$T4HSP	;.TPCHS =  56 - Convert high special characters
				;		  to "ESC"
	PRMX	D,TRMTYP	;.TPTYP =  57 - Terminal type
	PRMX	B,SDTRS5,$T5ESQ	;.TPESQ =  60 - ESC sequence control
	PRM	D,BADPAR	;	=  61 - Not assigned
	PRMX	I,SDTRS4,$T4NFC	;.TPFCR =  62 - Allow free CR/LF
	PRM	D,BADPAR	;	=  63 - Not assigned
	PRM	D,BADPAR	;.TPTRN =  64 - Transpancy mode
	PRM	D,BADPAR	;.TPADM =  65 - Alternate device mode
	PRM	D,INPRAT	;.TPIRT =  66 - Input baud rate
	PRM	D,OUTRAT	;.TPORT =  67 - Output baud rate
	PRM	B,SDTRS4,$T4HIE	;.TPIHE =  70 - Input hold enable
	PRM	D,KATKAN	;.TPKAT =  71 - Katakana
	PRM	D,PARHND	;.TPPAR =  72 - Parity control
	PRMX	D,BADPAR	;.TPALF =  73 - Auto line feed
	PRMX	V,SDTRVT	;.TPVTS =  74 - Vertical tab spacing
	PRM	B,SDTRS4,$T4BLT	;.TPBLT =  75 - Belt printer
	PRM	B,SDTRS5,$T5EHT	;.TPEHT =  76 - Echo horizontal tab
	PRMX	C,SDTRSR	;.TPSRC =  77 - Status request character
	PRM	I,SDTRS5,$T5BDE	;.TPEBS = 100 - Echo backspace
	PRMX	B,SDTRS5,$T5SCE	;.TPSCE = 101 - Suppress control char echoing
	PRMX	V,SDTRIL	;.TPIBL = 102 - Input buffer limit value
	PRM	B,SDTRS6,$T6TOB	;.TPTOB = 103 - Terminate output on break
	PRM	B,SDTRS6,$T6ECE	;.TPECE = 104 - Echo Escape
	PRM	B,SDTRS6,$T6QMD	;.TPQMD = 105 - "Q" mode used for 3270 emulation
	PRM	B,SDTRS1,$T1SOP	;.TPSOP = 106 - SUPPRESS OUTPUT (X.3 PAR. 8.)
	PRM	B,SDTRS5,$T5EDT	;.TPEDT = 107 - LINE EDITING (X.3 PAR. 15.)
MAXPAR=!.-DSPTBL-1
	CODE
	.PAGE
; HERE FOR PARAMETER = 2 (.TPECH) - ECHO CONTROL
;  VALUE MAY BE 1 OR 0   1=ECHO ON;  0=ECHO OFF
;
;  WHEN A "SET ECHO OFF" IS RECEIVED AND THE HOST KNOWS DEFERRED ECHO MODE,
;  TERMINAL DRIVER SENDS AN EDEM MESSAGE BACK WITHOUT MARKING THE LINE AS
;  IN DEFERRED ECHO MODE.  THE TERMINAL DRIVER ALSO STOPS ECHOING ON THIS LINE
;  FROM THEN ON.
;
;  WHEN A "SET ECHO ON" FUNCTION PACKET IS LATER RECEIVED, THE TERMINAL LINE
;  IS THEN MARKED AS IN DEFERRED ECHO MODE.  THE INPUT ECHOING IS NOT ENABLED
;  RIGHT THEN BUT WILL BE ENABLED AFTER A GREEN BALL IS SENT AND BOUNCED
;  BACK.
;
ECHCTL:
	TBBE	$FFCHG,R4,10$		;BRANCH IF THIS IS NOT A SET FUNCTION
	TBBN	$T1DEX,SDTRS1#(SD),10$	;BRANCH IF D.E.M. IS NOT ALLOWED
	TBBN	$T3LGI,SDTRS3#(SD),10$	;BRANCH IF LOGIN MODE
	TSTB	(R1)			;ECHO OFF ?
	BNE	20$			;NO, BRANCH
;
; SET ECHO OFF
;   SEND A EDEM PACKET TO HOST THEN CLEAR THE ECHO CONTROL BIT
;
	PUSH	R1
	MAKPKT	.PLSTP#			;GET A PACKET
	BCS	5$			;DON'T SEND EDEM IF CAN'T GET A PACKET
	MOV	#.PTFUN*400+2,PKCNT(R1)	;FUNCTION PACKET, 2 BYTES
	MOV	#1*400+.FNDEM,PKDATA(R1); "ENTER D.E.M.
	PUSH	R4
	MOV	SDDDB#(SD),R4		; LOAD R4 WITH DDB ADDRESS
	INCB	SDPCNT#(SD)		;
	CALL	SNDPKT#
	POP	R4
5$:
	POP	R1
;
;  PUT THE RIGHT PATTERN IN R3 SO THAT BITCOM ROUTINE WILL FINISH WHAT NEEDS
;  TO BE DONE.
;
10$:
	CLR	R3
	BISB	#SDTRS1#+1,R3		;$T1ECH IS IN HIGH ORDER BYTE
	SWAB	R3
	BISB	#$T1ECH/400,R3
	BR	BITCOM
;
;  RECEIVED A "SET ECHO ON" PACKET AND THE HOST KNOWS ABOUT DEFERRED
;  ECHO MODE.
;
20$:
	TBBN	$T1ECH,SDTRS1#(SD),25$		;IGNORE IT IF ECHO IS ALREADY ON
	BIS	#$T1DEM!$T1ECH,SDTRS1#(SD)
25$:
	BR	NXTPAR
	.PAGE
;HERE FOR PARAMETER = 3 (.TPBST) - BREAK SET
;  VALUE MAY BE ANY 8 BIT NUMBER

.IF EQ ..SAT
BRKSET:	TBBE	$FFCHG,R4,2$		;Should we change it?
	TBBN	$T1CMD,SDTRS1#(SD),2$	;Yes-are we in command mode now?
	MOVB	R0,SDTRBS#(SD)		;No-store as active value
2$:	MOV	#SDTRBX#,R3		;Get SDB offset for current value
	BR	VALCO2			;Continue
.ENDC

;HERE FOR PARAMETER = 4 (.TPITD) - IDLE TIMER DELAY
;VALUE MAY BE ANY 8 BIT NUMBER, EACH UNIT IS 1/20 OF A SECOND
;	*** X.3 PAD PARAMETER ***
;
.IF	EQ	..SAT
IDLTMR:
	TBBE	$FFCHG,R4,2$	;BRANCH IF NOT TO CHANGE IT
	MOVB	R0,SDTRT6#(SD)	;SET IDLE TIMER COUNT
2$:	MOV	#SDTRIT#,R3	;GET SDB OFFSET FOR IDLE TIMER DELAY
	BR	VALCO2		;AND CONTINUE
.ENDC

;HERE FOR PARAMETER = 7 (.TPBRK) - BREAK HANDLING
;  VALID VALUES ARE: (HAVE NOT BEEN CHECKED YET)
;	 0 = IGNORE BREAK
;	 1 = TREAT AS HARD INTERRUPT
;	 2 = RESET ????
;	 4 = SEND "INDICATION OF BREAK MESSAGE"????
;	10 = TREAT AS COMMAND INTERRUPT
;	20 = SET SUPPRESS OUTPUT
;  LEGAL COMBINATIONS ARE: 0,1,2,10,25

;	.IF EQ ..SAT
;	BRKHND:	JMP	BADPAR			
;	.ENDC
	.PAGE
;HERE FOR PARAMETER = 10 (.TPPRF) - TERMINAL PROFIL
;  VALID VALUES ARE:
;	 1 = [RSTS  ] RSTS-11 (DEC)
;	 2 = [T10   ] TOPS-10 (DEC)
;	 3 = [T20   ] TOPS-20 (DEC)
;	 4 = [INTSIM] INTERNATIONAL SIMPLE (DATAPAC)
;	 5 = [CANSIM] CANADIAN SIMPLE, BASIC III (DATAPAC)
;	 6 = [INTTRN] INTERNATIONAL TRANSPARENT (DATAPAC)
;	 7 = [CANDFT] CANADIAN DEFAULT (DATAPAC)
;	10 = [TYMSHR] TYMSHARE

.IF EQ ..SAT
PROFIL:	JMP	BADPAR			;NOT YET!
.ENDC

;HERE FOR PARAMETER = 11 (.TPRAT) - BAUD RATE
;  VALID VALUES ARE:
;	 0 =  ILLEGAL
;	 1 =    50   BAUD, 5 BITS, 1.5 STOP BITS
;	 2 =    75   BAUD, 5 BITS, 1.5 STOP BITS
;	 3 =   110   BAUD, 8 BITS, 2   STOP BITS
;	 4 =   134.5 BAUD, 7 BITS, 1   STOP BIT
;	 5 =   150   BAUD, 8 BITS, 1   STOP BIT
;	 6 =   200   BAUD, 8 BITS, 1   STOP BIT
;	 7 =   300   BAUD, 8 BITS, 1   STOP BIT
;	10 =   300   BAUD, 7 BITS, 1   STOP BIT
;	11 =   400   BAUD, 8 BITS, 1   STOP BIT
;	12 =   600   BAUD, 8 BITS, 1   STOP BIT
;	13 =  1200   BAUD, 8 BITS, 1   STOP BIT
;	14 =  1800   BAUD, 8 BITS, 1   STOP BIT
;	15 =  2000   BAUD, 8 BITS, 1   STOP BIT
;	16 =  2400   BAUD, 8 BITS, 1   STOP BIT
;	17 =  3600   BAUD, 8 BITS, 1   STOP BIT
;	20 =  4800   BAUD, 8 BITS, 1   STOP BIT
;	21 =  7200   BAUD, 8 BITS, 1   STOP BIT
;	22 =  9600   BAUD, 8 BITS, 1   STOP BIT
;	23 = 19200   BAUD, 8 BITS, 1   STOP BIT
;	24 =   100   BAUD, 8 BITS, 1   STOP BIT

BAUDRT:	TBBE	$FFCHG,R4,BAUDR5	;If not changing anything
	MOVB	#.TPRAT,-1(R1)		;Make sure the right parameter is returned
	TST	R0
	BLE	BAUDR3			;0 or less is illegal!
	CMP	#R.MAX,R0		;Valid value?
	BLO	BAUDR3			;No!
	PUSH	SDTRS3#(SD)		;Save current values
	BIC	#$BRIRT!$BRORT,SDTRS3#(SD);Clear out old values
	BISB	R0,SDTRS3#+1(SD)	;Store new values
	BR	BAUDR1			;Continue
	.PAGE
;HERE FOR PARAMETER = 66 (.TPIRT) - INPUT BAUD RATE
;  VALID VALUES ARE SAME AS FOR PARAMETER 11 (.TPRAT)

INPRAT:	TBBE	$FFCHG,R4,INPRA2	;If not changing anything
	MOV	SDTRAD#(SD),R3		;Point to the ADB
	TBBN	$A1SPT,ADSTS1#(R3),2$	;Must be split speed interface
	BISB	#200,-1(R1)		;Otherwise illegal
	BR	INPRA2			;Report current value

;Here if for split speed interface

2$:	TST	R0
	BLE	BAUDR3			;Must be greater than 0!
	CMP	#R.MAX,R0		;Legal value?
	BLO	BAUDR3			;No!
	PUSH	SDTRS3#(SD)		;Save previous value
	BIC	#$BRIRT,SDTRS3#(SD)	;Clear out previous value
	BISB	R0,SDTRS3#+1(SD)	;Yes-store new value
	MOV	#.LFSET,R0		;Get interface function
	CALL	TRMFNC#			;Setup the hardware
	BCS	BAUDR2			;If error
	TST	(SP)+			;OK-fix up the stack
INPRA2:	MOVB	SDTRS3#+1(SD),(R1)	;Get value to return
	BR	BAUDR6			;Continue

;HERE FOR PARAMETER = 67 (.TPORT) - OUTPUT BAUD RATE
;  VALID VALUES ARE SAME AS FOR PARAMETER 11 (.TPRAT)

OUTRAT:	TBBE	$FFCHG,R4,BAUDR5	;If not changing anything
	MOV	SDTRAD#(SD),R3		;Get address of ADB
	TBBE	$A1SPT,ADSTS1#(R3),BAUDRT;If cannot do split speed
	TST	R0
	BLE	BAUDR3			;Must be greater than 0
	CMP	#R.MAX,R0		;Valid value?
	BLO	BAUDR3			;No!
	PUSH	SDTRS3#(SD)		;Save previous value
	BIC	#$BRORT,SDTRS3#(SD)	;Clear out previous value
BAUDR1:	BISB	R0,SDTRS3#(SD)		;Update value in SDB
	MOV	#.LFSET,R0		;Get interface function
	CALL	TRMFNC#			;Setup the hardware
	BCC	BAUDR4			;Go on if all is OK
BAUDR2:	POP	SDTRS3#(SD)		;Error-restore previous rates
BAUDR3:	BISB	#200,-1(R1)		;Indicate error
	BR	BAUDR5			;But report current value anyway!

;Here if no error when setting up the hardware

BAUDR4:	TST	(SP)+			;Fix up the stack
BAUDR5:	MOVB	SDTRS3#(SD),(R1)	;Get value to return
BAUDR6:	BICB	#^C37,(R1)		;Remove junk
	MOV	SDTRAD#(SD),R0		;Get address of ADB
	TBBN	$A1CHG,ADSTS1#(R0),NXTP2R;Can the baud rate be changed?
	BISB	#200,(R1)		;No-tell him that
NXTP2R:	JMP	NXTPAR			;Finished here
	.PAGE
;HERE FOR PARAMETER = 37 (.TPLFI) - LINE FEED INSERSION
;  VALID VALUES ARE:
;	001 = Send L.F. to terminal after C.R. from host
;	002 = Send L.F. to host after C.R. from terminal
;	004 = Echo L.F. after C.R. from terminal (if echoing is enabled)
;	010 = Send L.F. to terminal after C.R is output if next character
;		output is not L.F.
;	020 = Do not change bit 001
;	040 = Do not change bit 002
;	100 = Do not change bit 004
;	200 = Do not change bit 010

LFDINS:	TBBE	$FFCHG,R4,2$		;If not changing anything here
	MOV	R0,R3			;Copy bits
	ASHI	-4,R3			;Make mask
	COM	R3
	BIC	#^C17,R3
	BIC	R3,SDTRS2#(SD)		;Clear bits we are changing
	COM	R3
	BICB	R3,R0			;Remove extra bits
	BISB	R0,SDTRS2#(SD)		;Set desired bits
2$:	MOVB	SDTRS2#(SD),R0		;Get desired bits
	BIC	#^C17,R0		;Only 4 bits
	BR	GTINB2			;continue

;Here for parameter = 40 (.TPCRI) - Carriage return insersion
;  Valid values are:
;	001 = Send C.R. to terminal after L.F. from host
;	002 = Send C.R. to host after L.F. from terminal
;	004 = Echo C.R. after L.F. from terminal (if echoing is enabled)
;	010 = Not used
;	020 = Do not change bit 001
;	040 = Do not change bit 002
;	100 = Do not change bit 004
;	200 = Not used
;  All combinations of the above bits are valid (but may not make much sense!)

CRNINS:	TBBE	$FFCHG,R4,2$		;If not changing anything here
	MOV	R0,R3			;COPY MASK BITS
	COM	R3
	BIC	#^C160,R3		;Clean up the mask
	BIC	R3,SDTRS2#(SD)		;Clear the bits we are changing
	ASHI	4,R0			;Position the bits
	COM	R3			;Remove any we are not changing
	BICB	R3,R0
	BISB	R0,SDTRS2#(SD)		;Set any bits we want to set
2$:	MOVB	SDTRS2#(SD),R0		;Get current bits
	ASHI	-4,R0			;In the right place
	BR	GTINBT			;Continue
	.PAGE
;Here for parameter = 41 (.TPIMO) - Image mode output control
;  Valid values are 0 to disable image mode output and 1 to enable it

SETIMO:	TBBE	$FFCHG,R4,4$		;If not changing it here
	BIC	#$T1IMO,SDTRS1#(SD)	;Assume want to clear it
	ROR	R0			;Right?
	BCC	2$			;Yes
	BIS	#$T1IMO,SDTRS1#(SD)	;No-we want to set it!
2$:	MOV	#.LFSET,R0		;Get interface function
	CALL	TRMFNC#			;Update hardware status (Need to do
					;  this here in case parity handling
					;  is enabled since this bit overrides
					;  the parity enable bit!)
4$:	BIC	#$T2CRO,SDTRS2#(SD)	;Clear carriage return output last flag
	CLRB	(R1)			;Assume bit is clear now
	TBBE	$T1IMO,SDTRS1#(SD),NXTP2R;Right?
	INCB	(R1)			;No
	BR	NXTP2R			;Thats all

;Here for parameter = 57 (.TPTYP) - Set terminal type
;  Valid values are:
;	 0 = T.CRT   - Simple CRT terminal
;	 1 = T.VT52  - DEC VT52 terminal
;	 2 = T.TTY   - Standard teletype
;	 3 = T.LA36  - DEC LA36 terminal
;	 4 = T.LA180 - DEC LA180 terminal
;	 5 = T.CRTA  - Slow CRT terminal
;	 6 = T.TRMB  - Tymnet terminal type B
;	 7 = T.TRMC  - Tymnet terminal type C
;	10 = T.TRME  - Tymnet terminal type E
;	11 = T.TRMG  - Tymnet terminal type G
;	12 = T.TRMJ  - Tymnet terminal type J
;	13 = T.SEL   - Selectric (2741) terminal

TRMTYP:	TBBE	$FFCHG,R4,4$		;If not changing anything here
	PUSH	R1			;Save R1
	CALL	SETTTP			;Set terminal type
	  BR	2$			;Go on if no error
	POP	R1			;Restore R1
	BISB	#200,-1(R1)		;Indicate error
	BR	4$			;Continue

2$:	POP	R1			;Restore R1
4$:	MOVB	SDTRCT#(SD),(R1)	;Report current terminal type
	BR	NXTP2R			;Finished here
	.PAGE
;HERE FOR PARAMETER = 71 (.TPKAT) - KATAKANA MODE CONTROL
;	0 = LEAVE KATAKANA MODE
;	1 = ENTER KATAKANA MODE

KATKAN:	CLRB	(R1)			;*** TEMP ***
	BR	NXTP2R

;HERE FOR PARAMETER = 72 (.TPPAR) - PARITY CONTROL
;  VALID VALUES ARE:
;	001 = Check input parity (only if bit 004 is set)
;	002 = Odd parity (only if bit 004 is set)
;	004 = Enable parity handling
;	020 = Do not change bit 001
;	040 = Do not change bit 002
;	100 = Do not change bit 004
;  ALL COMBINATIONS OF THE ABOVE BITS ARE VALID

PARHND:	TBBE	$FFCHG,R4,2$		;If not changing anything here
	MOV	R0,R3			;Copy bits
	ASHI	-4,R3			;Make mask
	COM	R3
	BIC	#^C7,R3
	BIC	R3,SDTRS4#(SD)		;Clear the bits we are changing
	COM	R3
	BICB	R3,R0			;Remove extra bits
	BISB	R0,SDTRS4#(SD)		;Set desired bits
	MOV	#.LFSET,R0		;SETUP THE INTERFACE HARDWARE
	CALL	TRMFNC#
2$:	MOVB	SDTRS4#(SD),R0		;Get bits
GTINBT:	BIC	#^C7,R0			;Only return 3 bits
GTINB2:	BICB	#17,(R1)		;Clear out low part of byte
	BISB	R0,(R1)			;Put in bits to return
	BR	NXTP2R			;Finished with this one
	.PAGE
	.SBTTL	TRMF   - REPORT TERMINAL TYPE PARAMETERS

;SUBROUTINE TO REPORT ALL TERMINAL TYPE PARAMETERS - USUALLY CALLED AFTER
;  CONNECTION IS ESTABLISHED TO TELL A HOST WHAT KIND OF TERMINAL IS BEING
;  USED
;	C(R1) = ADDRESS OF PACKET
;	CALL	RPTTYP

.IF EQ ..SAT

RPTTYP::PUSH	R4			;SAVE R4
	MOV	#<.PTFUN*400>+<TPRMAX#+1>,PKCNT(R1);STORE BYTE COUNT AND PACKET
						   ;  TYPE
	MOV	R1,R3			;MAKE POINTER TO DATA AREA
	ADD	#PKDATA,R3
	MOVB	#.FNRDP,(R3)+		;STORE FUNCTION CODE
	MOV	#TPRMAX#,R2		;GET INDEX FOR TABLE
RPTTY2:	MOVB	TPRTBL#-2(R2),(R3)+	;STORE PARAMETER
	MOV	TPROFF#-2(R2),R4	;GET OFFSET IN SDB OR BIT
	MOVB	TPRIDX#-2(R2),R0	;GET DISPATCH INDEX
	JMP	@DSPRPT#(R0)		;DISPATCH TO ROUTINE FOR PARAMETER

;HERE FOR PARAMETER WITH SINGLE BIT INVERTED VALUE

RPTBTX::MOV	#1,R0			;ASSUME VALUE IS 1
	BR	RPTBT2			;CONTINUE

;HERE FOR PARAMETER WITH SINGLE BIT VALUE

RPTBIT::CLR	R0			;ASSUME VALUE IS ZERO
RPTBT2:	BIT	R4,SDTRS4#(SD)		;TEST THE BIT
	BEQ	2$			;GO ON IF RIGHT
	COM	R0			;WRONG-CHANGE VALUE
2$:	BIC	#^C1,R0			;MAKE SURE ONLY ONE BIT IS ON!
	BR	RPTSTR			;GO STORE VALUE

;HERE FOR PARAMETER WITH 8 BIT VALUE

RPTVAL::ADD	SD,R4			;ADD IN BASE OF SDB
	MOVB	(R4),(R3)+		;STORE VALUE OF PARAMETER IN PACKET
	BR	RPTNXT			;CONTINUE

;HERE FOR PARITY CONTROL PARAMETER

RPTPAR::MOV	SDTRS4#,R0		;GET BITS
	BIC	#^C17,R0		;ONLY THE ONES WE WANT
	BIS	#360,R0
RPTSTR:	MOVB	R0,(R3)+		;STORE VALUE IN PACKET
RPTNXT:	DEC	R2			;REDUCE INDEX
	SOB	R2,RPTTY2		;CONTINUE IF MORE TO DO
	POP	R4			;FINISHED-RESTORE R4
	RETURN				;THATS ALL

.ENDC				;.IF EQ ..SAT
	.PAGE
	.SBTTL	TRMF   - SUBROUTINES

;SUBROUTINE TO SET BAUD RATE FOR PARAMETERS 11, 66, AND 67
;	C(R0) = Interface function to use
;	C(R1) = Pointer into packet
;	CALL	SETRAT
;	  return if error
;	  return if no change
;	return if should change rate
.IF EQ	..SAT		;NOT USED AT ALL GET RID OF LATER
SETRAT:	TBBE	$FFCHG,R4,4$		;If not changing the rate
	TSTB	(R1)			;Valid baud rate code?
	BLE	RTN012			;No
	CMPB	#22,(R1)		;Maybe
	BLT	RTN012			;No
	ADD	#2,(SP)			;OK-bump return address
	PUSH	R1			;Save R1
	MOVB	(R1),R1			;Get rate code
	CALL	TRMFNC#			;Set the new baud rate
	POP	R1			;Restore R1
4$:	ADD	#2,(SP)			;Bump return address
RTN012:	RETURN				;Thats all
.ENDC
	.PAGE
;SUBROUTINE TO SETUP DEFAULT TERMINAL PROFILE AND TYPE PARAMETERS
;	CALL	SETDFT

SETDFT::
.IF EQ ..SAT
	BIS	#$T1ECH!$T1DEX!$T1HIA,SDTRS1#(SD)
.IFF
	BIS	#$T1ECH,SDTRS1#(SD)
.ENDC
					;ENABLE ECHOING AND INPUT HOLD WHEN
					;  OUTPUT ACTIVE, DISABLE DEFERED
					;  ECHO MODE
	CALL	SETTCD			;SET TO DEFAULT TERMINAL CODE
.IF EQ ..SAT
	MOVB	SDTRTP#(SD),R0		;GET DEFAULT TERMINAL PROFILE
	CALL	SETPRF			;SETUP TERMINAL PROFILE PARAMETERS
	  NOP				;Should not fail!
	MOVB	SDTRBX#(SD),SDTRBS#(SD)	;MAKE THE NEW BREAK SET THE CURRENT
					;  BREAK SET
.ENDC
	CLR	SDTRS6#(SD)		;CLEAR 2741 STATUS BITS
	MOVB	SDTRTT#(SD),R0		;GET DEFAULT TERMINAL TYPE
	CALL	SETTTP			;SETUP TERMINAL TYPE PARAMETERS
	  NOP				;Should not fail!
	TBBE	$T4SEL,SDTRS4#(SD),4$	;FINISHED IF NOT 2741
	BIS	#$S1HLD,SDSTS1#(SD)	;2741-OUTPUT HELD OFF FOR NOW!
	BIS	#$T6EOA,SDTRS6#(SD)	;EXPECTING EOA NEXT (MAYBE!)
4$:	RETURN				;FINISHED

;SUBROUTINE TO SETUP TERMINAL PROFILE PARAMETERS
;	C(R0) = TERMINAL PROFILE INDEX
;	CALL	SETPRF
;	  error return
;	normal return

.IF EQ ..SAT

SETPRF::CMP	#P..MAX,R0		;IS THIS A VALID TERMINAL PROFILE?
	BLO	RTN012			;NO
	ASL	R0			;YES-MAKE INTO WORD INDEX
	CLRB	SDTRIL#(SD)		;All profiles start without a input
					;  buffer limit!
	MOV	TPFBTS#(R0),SDTRS5#(SD)	;STORE TERMINAL PROFILE STATUS BITS
	MOVB	TPFLFH#(R0),SDTRS2#(SD)	;SET LINE FEED HANDLING BITS
	TBBE	$T0CMD,SDTRS0#(SD),2$	;IS COMMAND MODE ALLOWED?
	MOVB	TPFCMD#(R0),SDTRCI#(SD)	;YES-SET COMMAND INTERRUPT CHARACTER
2$:	MOV	#PRFPNT#,R1		;GET POINTER TO POINTER TABLE
	MOV	#PRFSIZ#,R2		;GET COUNT
	MOV	#SDTRLP#,R3		;GET POINTER TO SDB DATA
	BR	SETTT2

.ENDC

;SUBROUTINE TO SETUP TERMINAL TYPE PARAMETERS
;	C(R0) = TERMINAL TYPE INDEX
;	CALL	SETTTP
;	  error return
;	normal return

SETTTP::CMP	#T..MAX,R0		;IS THIS A VALID TERMINAL TYPE?
	BLO	RTN013			;NO
	MOVB	R0,SDTRCT#(SD)		;YES-REMEMBER THE TERMINAL TYPE
	ASL	R0			;MAKE INTO WORD INDEX
	MOV	TTPBTS#(R0),SDTRS4#(SD)	;SET TERMINAL TYPE STATUS BITS
	MOV	#TYPPNT#,R1		;GET POINTER TO POINTER TABLE
	MOV	#TYPSIZ#,R2		;GET COUNT
	MOV	#SDTRLT#,R3		;GET POINTER TO SDB DATA
SETTT2:	ADD	#2,(SP)			;Bump return address
CPYPRM::ADD	SD,R3			;PLUS BASE OF SDB
	PUSH	R4			;RESPECT R4
2$:	MOV	(R1)+,R4		;GET ADDRESS OF DATA ITEM
	ADD	R0,R4			;PLUS INDEX
	MOVB	(R4),(R3)+		;COPY TO SDB
	SOB	R2,2$			;CONTINUE IF MORE
	POP	R4			;RESTORE R4
RTN013:	RETURN				;THATS ALL

;SUBROUTINE TO SET TERMINAL CODE TO DEFAULT
;	CALL	SETTCD

SETTCD::MOVB	SDTRBR#+1(SD),R2	;GET DEFAULT CODE
	ASHI	-4,R2			;GET IT IN THE RIGHT PLACE
	BIC	#^C16,R2		;JUST 3 BITS
	MOVB	R2,SDTRXC#(SD)		;STORE CODE IN SDB
	RETURN				;THATS ALL

;MAKE PURE SECTION ENDS ON WORD BOUNDRY

	PURE

	.EVEN
	.END
   ir{'~ir{'~ir{'~ir{'~