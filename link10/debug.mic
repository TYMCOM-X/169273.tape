        OPCODELOAD 6500
        NOSYM

LODRAM  EQU     0E0H
LODCODE EQU     0E000H

        ORG     LODRAM

RELO:   DS      1 ; RELOCATION FACTOR
REHI:   DS      1 ; RELOCATION FACTOR
CHAR:   DS      1
CKSUM:  DS      1
BYTE:   DS      1
ADDR:   DS      1
ADRH:   DS      1
DCNT:   DS      1
INDEX:  DS      1

ERRMSG  EQU     8171H
ASCNIB  EQU     8275H
RESET   EQU     8B4AH
ACCESS  EQU     8B86H
DATA    EQU     0A402H
T1CL    EQU     0A004H
T1CH    EQU     T1CL+1
T1LL    EQU     T1CH+1
T1LH    EQU     T1LL+1
ACR     EQU     0A00BH
IFR     EQU     ACR+2
IER     EQU     IFR+1
XR      EQU     0A65EH
PARNR   EQU     0A649H
P3L     EQU     0A64AH
P3H     EQU     0A64BH
P2L     EQU     0A64CH
P2H     EQU     0A64DH
P1L     EQU     0A64EH
P1H     EQU     0A64FH
UIRQVC  EQU     0A678H
IRQVEC  EQU     0A67EH
T2L     EQU     0AC08H
T2H     EQU     0AC09H
SR      EQU     0AC0AH
ACRB    EQU     0AC0BH
IERB    EQU     0AC0EH
IER1    EQU     0C0H
IER2    EQU     040H
ACR1    EQU     040H


        ORG     LODCODE

LSLOAD: LDA     PARNR   ; GET PARM CNT
        CMP     #0      ; ANY PARMS?
        BEQ     LOADER  ; BRANCH IF NO
        CMP     #1      ; ONE PARM?
        BNE     ERR     ; BRANCH IF NO
        LDA     P3L     ; GET RELO FACTOR
        STA     RELO
        LDA     P3H
        STA     REHI
        JMP     LOADER1 ; CONTINUE
LOADER: LDA     #0      ; ASSUME NO RELOCATE
        STA     RELO    ; *
        STA     REHI    ; *

; LOADER1 IS THE ENTRY POINT IF THE RELOCATION FACTOR HAS
; BEEN STORED INTO LOCATIONS E0 AND E1.

LOADER1:JSR     ACCESS  ; UNPROTECT SYS RAM
        SEI             ; DISSABLE IRQ
        LDA     #(GBIRQ MOD 256) ; INIT IRQ VECTOR
        STA     UIRQVC
        LDA     #(GBIRQ SHR 8)
        STA     UIRQVC+1
        LDA     #IER2
        STA     IER     ; DISSABLE T1 INTERRUPT
        LDA     #ACR1   ; SET TIMER MODE TO FREE RUN
        STA     ACR
        CLI

LD01:   JSR     GETBYTE ; READ 1 BYTE
        CMP     #':'    ; LINE START?
        BNE     LD01    ; BR IF NO
        STY     CKSUM   ; INIT CHECKSUM TO 0
        STY     INDEX   ; INIT DATA INDEX
        JSR     GETHEX  ; READ 1 HEX BYTE
        BEQ     ENDF    ; BRANCH IF CNT=0
        STA     DCNT    ; SAVE BYTE CNT
        JSR     GETHEX  ; READ ADDRESS
        STA     ADRH
        JSR     GETHEX
        CLC             ; ADD ADDRESS TO RELOCATION FACTOR
        ADC     RELO
        STA     ADDR
        LDA     ADRH
        ADC     REHI
        STA     ADRH
        JSR     GETHEX  ; READ FLAG BYTE
        BNE     ENDF    ; EXIT IF NOT 0

LDLP1:  JSR     GETHEX  ; READ DATA BYTE
        LDY     INDEX
        STA     (ADDR),Y ; STORE DATA
        INC     INDEX
        DEC     DCNT
        BNE     LDLP1   ; LOOP THRU LINE
        JSR     GETHEX  ; READ CHECKSUM
        LDA     CKSUM   ; IS IT 0?
        BEQ     LD01    ; BRANCH IF YES

ERR:    LDA     #88H
        SEC
        JSR     ERRMSG
ENDF:   JMP     08000H  ; RETURN TO SUPERMON

GETHEX: JSR     GETBYTE ; READ NEXT BYTE
        JSR     ASCNIB  ; GET HEX
        BCS     GETHEX  ; BRANCH IF NOT VALID HEX
        ASLA            ; SHIFT TO HI NYBBLE
        ASLA
        ASLA
        ASLA
        STA     BYTE    ; SAVE HI NYBBLE
GH01:   JSR     GETBYTE
        JSR     ASCNIB
        BCS     GH01    ; BRANCH IF LO NYBBLE NOT HEX
        ORA     BYTE    ; COMBINE LO WITH HI
        TAX             ; SAVE BYTE
        ADC     CKSUM   ; UPDATE CKSUM
        STA     CKSUM
        TXA             ; GET BYTE IN ACC
        RTS

GETBYTE: LDA    #IER1   ; PREPARE TO ENABLE TIMER IRQ
        LDX     #14H    ; INIT TIME
        LDY     #40H
GB1:    BIT     DATA    ; IS START BIT HERE YET?
        BPL     GB1     ; BRANCH IF NO
        STX     T1CH    ; INIT COUNTER
        STY     T1CL
        LDX     #0DH    ; SET LATCH
        LDY     #05H    ; FOR 300 BAUD
        STX     T1LH
        STY     T1LL
        STA     IER     ; ENABLE TIMER IRQ
        LDY     #8      ; INIT LOOP CTL
GB2:    TYA             ; TEST FOR Y=0
        BNE     GB2     ; BRANCH IF NOT YET
        LDA     #IER2   ; DISSABLE TIMER IRQ
        STA     IER
        LDA     #3
GB3:    CMP     T1CH    ; INTO STOP BIT YET?
        BMI     GB3     ; BRANCH IF NO
        LDA     CHAR    ; GET CHAR IN A
        EOR     #0FFH   ; INVERT DATA
        AND     #7FH
        RTS
GBIRQ:  LDA     IFR     ; LOAD INTERRUPT FLAGS
        STA     IFR     ; RESET INTERRUPT
        AND     #40H    ; OURS?
        BEQ     GBIRQX  ; EXIT IF NO
        LDA     DATA    ; READ DATA BIT
        ASLA            ; SHIFT TO CARRY
        ROR     CHAR    ; SHIFT TO CHAR
        DEY             ; DECR BIT COUNT
GBIRQX: RTI

        ORG     LODCODE+100H

HSLOAD: LDA     PARNR   ; PARM CNT
        CMP     #1
        BNE     ERRMSGX ; BRANCH IF NOT 1 PARM
        LDA     P3L     ; GET LOAD ADDR
        STA     ADDR
        LDA     P3H
        STA     ADRH
        JSR     ACCESS
        SEI
        LDA     #(HSIRQ MOD 256)
        STA     IRQVEC
        LDA     #(HSIRQ SHR 8)
        STA     IRQVEC+1
        LDA     #84H
        STA     IERB    ; ENABLE IRQ ON SR
        CLI             ; ENABLE IRQ
        LDA     #19H
        STA     T2L     ; INIT TIMER
        LDA     #0
        TAX             ; INIT IRQ FLAG
        STA     CHAR    ; INIT CHAR
        STA     CKSUM
        STA     CKSUM+1
        STA     RELO
        LDA     #0F0H
        STA     REHI

HSLD01: JSR     GETBYTEX
        CMP     #5AH
        BNE     HSLD01
        JSR     GETBYTEX
        CMP     #5AH
        BNE     HSLD01

HSLOOP: JSR     GETBYTEX
        LDY     #0
        STA     (ADDR),Y
        CMP     (ADDR),Y ; IS RAM PROTECTED?
        BNE     ERRMSGX ; BRANCH IF YES
        INC     ADDR
        BNE     .+4
        INC     ADRH
        CLC
        ADC     CKSUM
        STA     CKSUM
        BCC     .+4
        INC     CKSUM+1
        INC     RELO
        BNE     HSLOOP
        INC     REHI
        BNE     HSLOOP
        JSR     GETBYTEX
        CMP     CKSUM
        BNE     ERRMSGX
        JSR     GETBYTEX
        CMP     CKSUM+1
        BEQ     HSEXIT
ERRMSGX: LDA     #89H
        SEC
        JSR     ERRMSG
HSEXIT: JMP     08000H

GETBYTEX: TXA           ; DID IRQ OCCUR?
        BNE     GETBYTEX ; BRANCH IF NO
        LDA     #1
        STA     DCNT
GX1:    BIT     DATA    ; WAIT FOR START BIT
        BPL     GX1     ; *
GX2:    DEC     DCNT    ; DELAY 1 BIT TIME
        BNE     GX2     ; *
        STA     T2H     ; RESET TIMER
        LDA     #4
        STA     ACRB    ; ENABLE SR
        LDA     SR      ; *
        LDX     #0FFH   ; INDICATE WAITING FOR IRQ
; NOW DECODE LAST CHAR READ...
        LDY     #8
GX3:    ASL     CHAR
        RORA
        DEY
        BNE     GX3
        EOR     #0FFH
        RTS

HSIRQ:  LDX     SR      ; GET CHAR FROM SR
        STX     CHAR
        LDX     #0
        STX     ACRB    ; DISSABLE SR
        RTI

        ORG     LODCODE+200H

TRCVEC  EQU     0A674H
UBRKVC  EQU     0A676H
NMIVEC  EQU     0A67AH
NACCESS EQU     08B9CH
STACK   EQU     0A65BH
STKLIM  EQU     0F5H
OPPCOM  EQU     08337H
PCLR    EQU     0A659H
PCLO    EQU     0F6H
PCHR    EQU     0A65AH
PCHI    EQU     0F7H
OUTBYT  EQU     082FAH
SPACE   EQU     08342H
OUTCHR  EQU     08A47H
DATAD   EQU     0A600H
CRLF    EQU     0834DH
TV      EQU     0A656H
DELAY   EQU     0835AH
WARM    EQU     08003H
TRACON  EQU     080CDH
SAVINT  EQU     08064H
IC      EQU     015H
COMMA   EQU     0833AH
PSP     EQU     065H
STKTOP  EQU     0F0H
TSTAT   EQU     08B3CH
GO1ENT  EQU     083FAH

TRACEINIT: JSR  ACCESS  ; UNLOCK SYM RAM
        LDA     #(LOWTRACE MOD 256)
        STA     TRCVEC
        LDA     #(LOWTRACE SHR 8)
        STA     TRCVEC+1
        LDA     #(HITRACE MOD 256)
        STA     UBRKVC
        LDA     #(HITRACE SHR 8)
        STA     UBRKVC+1
        LDA     #1
        STA     TV      ; INIT TRACE VELOCITY
        LDA     #0C0H   ; INIT NMI VECTOR
        STA     NMIVEC
        LDA     #080H
        STA     NMIVEC+1
        LDA     #0
        STA     DATAD   ; INIT DATA VECTOR
        STA     STKLIM  ; INIT STACK LIMIT
        JSR     NACCESS ; LOCK SYM RAM
        JMP     08000H

LOWTRACE: JSR   FPC     ; TEST OPCODE FOR BREAK
        BNE     LT1     ; BRANCH IF NOT BRK
        JSR     LTRACE  ; TRACE IT
        JSR     PRTMSG  ; PRINT 'BREAK'
        DB      5,'BREAK'
        JSR     CRLF
        JMP     LOWTNOGO ; STOP

LT1:    LDA     STACK   ; A=STACK PTR
        CMP     STKLIM  ; SHALL WE TRACE THIS INSTR?
        BCC     LOWTGO  ; BRANCH IF NO
        JSR     LTRACE  ; TRACE THIS INSTR
        JSR     CRLF
        LDX     TV      ; GET TRACE VELOCITY
        BEQ     LOWTNOGO ; STOP IF ZERO
        JSR     DELAY   ; WAIT REQD TIME
        BCC     LOWTGO  ; GO IF BRK NOT PRESSED
LOWTNOGO: JMP   WARM    ; STOP TRACE
LOWTGO: JMP     TRACON  ; CONTINUE TRACE

LTRACE: JSR     OPPCOM  ; PRINT PC AND COMMA
        JSR     FPC     ; FETCH OP CODE
        JSR     OUTBYT  ; PRINT OP CODE
        JSR     SPACE
        LDA     #'1'    ; PRINT STACK PTR
        JSR     OUTCHR
        LDX     #0
LOWTLP1: LDA    STACK,X
        JSR     OUTBYT
        JSR     SPACE
        INX
        CPX     #5      ; PRINT ALL REGS YET?
        BNE     LOWTLP1 ; BRANCH IF NO

        JSR     SPACE
        LDX     #0
LOWTLP2: LDA    DATAD,X ; A=FIELD SIZE
        BEQ     LOWTXIT ; EXIT IF ZERO
        LDA     DATAD+1,X ; MOVE DATA ADDRESS TO PG1
        STA     PCLO
        LDA     DATAD+2,X
        STA     PCHI
        LDY     #0
LOWTLP3: LDA    (PCLO),Y ; A=DATA BYTE
        JSR     OUTBYT  ; PRINT IT
        INY
        TYA
        CMP     DATAD,X ; END OF FIELD?
        BNE     LOWTLP3 ; BRANCH IF NO
        JSR     SPACE
        INX
        INX
        INX
        JMP     LOWTLP2 ; GO GET NEXT FIELD
LOWTXIT: RTS

FPC:    LDA     PCLR    ; PUT PC INTO PAGE 1
        STA     PCLO
        LDA     PCHR
        STA     PCHI
        LDY     #0
        LDA     (PCLO),Y
        RTS


        ORG     LODCODE+300H

COMPARE: LDA    PARNR
        CMP     #2
        BEQ     CMP1
        SEC
        RTS
CMP1:   JSR     CRLF
        LDA     P2L
        STA     RELO
        LDA     P2H
        STA     REHI
        LDA     P3L
        STA     ADDR
        LDA     P3H
        STA     ADRH
        JSR     CMPSUB
        JSR     SPACE
        LDA     ADRH
        JSR     OUTBYT
        LDA     ADDR
        JSR     OUTBYT
        CLC     
        RTS

CMPSUB: LDY     #0
CLP1:   LDA     (ADDR),Y
        CMP     (RELO),Y
        BNE     CXIT
        INC     ADDR
        BNE     .+4
        INC     ADRH
        INC     RELO
        BNE     CLP1
        INC     REHI
        BNE     CLP1
CXIT:   RTS

HITRACE: JSR    ACCESS
        CLC
        JSR     SAVINT  ; SAVE USER REGS
        JSR     FPC     ; GET CODE FOLLOWING BRK INSTR
        CMP     #4CH    ; JMP INSTR?
        BEQ     HIT01   ; BRANCH IF YES
        JSR     PRTMSG
        DB      6,'BREAK '
        JSR     FPC
        JSR     OUTBYT
        JSR     CRLF
        JMP     WARM
HIT01:  LDA     STACK   ; GET USER STACK PTR
        CMP     STKLIM  ; SHALL WE TRACE?
        BCC     HITGO   ; BRANCH IF NO
        LDA     IC+1    ; DISPLAY IC
        JSR     OUTBYT
        LDA     IC
        JSR     OUTBYT
        JSR     COMMA
        LDY     #0      ; DISPLAY OP CODE
HILP1:  LDA     (IC),Y
        JSR     OUTBYT
        INY
        CPY     #3
        BNE     HILP1
        JSR     COMMA
        LDA     #'1'    ; DISPLAY STACK ADDR
        JSR     OUTCHR
        LDA     STACK
        JSR     OUTBYT
        LDX     XR      ; GET PSTK PTR
        CPX     #STKTOP ; IS STK EMPTY?
        BEQ     HITNOLP ; BRANCH IF YES
        JSR     SPACE
        BCC     PRTSTK
        JSR     PRTMSG  ; PRINT THE FOLLOWING MSG
        DB      9,'UNDERFLOW'
        JMP     HTPAUSE
PRTSTK: CPX     #9BH    ; OVERFLOW?
        BCS     PRTSTK1 ; BRANCH IF NO
        JSR     PRTMSG
        DB      8,'OVERFLOW'
        JMP     HTPAUSE

PRTSTK1: LDX    #STKTOP-2
HITLP:  JSR     SPACE
        LDA     1,X
        JSR     OUTBYT
        LDA     0,X
        JSR     OUTBYT
        DEX
        DEX
        CPX     XR
        BCS     HITLP

HITNOLP: JSR    CRLF
        JSR     TSTAT   ; TEST FOR BRK
        BCS     HITWRM  ; BRANCH IF BRK
        LDA     TV
        BEQ     HITWRM  ; STOP IF TV=0
HITGO:  JMP     GO1ENT  ; RETURN FROM BREAK
HITWRM: JMP     WARM    ; PAUSE
HTPAUSE: JSR    CRLF
        JMP     WARM
 

        ORG     LODCODE+700H

USER7:  LDA     #4CH
        STA     3FFEH
        JMP     8B4AH   ; RESET

PRTMSG: TSX
        LDA     101H,X  ; GET RTN ADDR LO
        STA     PCLO
        LDA     102H,X
        STA     PCHI
        LDY     #1
        LDA     (PCLO),Y
        SEC
        ADC     101H,X  
        STA     101H,X
        BCC     .+5
        INC     102H,X
        LDA     (PCLO),Y
        TAX
PLOOP:  INY
        LDA     (PCLO),Y
        JSR     OUTCHR
        DEX
        BNE     PLOOP
        RTS


        ORG     LODCODE+7C0H

        CMP     #14H
        BNE     .+5
        JMP     LODCODE
        CMP     #15H
        BNE     .+5
        JMP     LODCODE+100H
        CMP     #16H
        BNE     .+5
        JMP     LODCODE+200H
        CMP     #17H
        BNE     .+5
        JMP     LODCODE+300H
        CMP     #18H
        BNE     .+5
        JMP     LODCODE+400H
        CMP     #19H
        BNE     .+5
        JMP     LODCODE+500H
        CMP     #1AH
        BNE     .+5
        JMP     LODCODE+600H
        CMP     #1BH
        BNE     .+5
        JMP     LODCODE+700H
        SEC
        RTS

        END
 