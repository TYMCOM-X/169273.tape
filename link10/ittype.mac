SUBTTL	Rex Shadrick and Joe Smith, 14-Aug-80

COMMENT	@


This module contains two routines:

  ITTYPE (.TTYPE) will return the type of terminal the program is running on,
such as 'VT52' or 'TTY'.  This allows your program to use terminal dependent
output routines (such as cursor addressing).

  GETYPE (.GTYPE) will get a list of possible terminal types.



Assembly instructions:

  For regular ".TTYPE" with TWOSEG assembly, use

	.COMPILE ITTYPE.MAC


  For FORTRAN callable FUNCTION ITTYPE, use

	.COMPILE FTFORT.MAC+ITTYPE.MAC
  where FTFORT.MAC contains:
	FORTRA==6	;(or FORTRA==5 if using FOROTS version 5A)

  For .TTYPE assembled in psect FOO at origin 600000, use

	.COMPILE FTPSEC.MAC+ITTYPE.MAC
  Where FTPSEC.MAC contains:
	PSECTN='FOO'	;Psect name
	PSECTO=600000	;Psect origin
SUBTTL	Table of Contents

;           Table of Contents for SYS:DISPLA.INI reader
;
;
;			   Section			      Page
;
;    1. Table of Contents  . . . . . . . . . . . . . . . . . .   2
;    2. General description  . . . . . . . . . . . . . . . . .   3
;    3. Format of SYS:DISPLA.INI . . . . . . . . . . . . . . .   4
;    4. FORTRAN calling sequence . . . . . . . . . . . . . . .   5
;    5. MACRO calling sequence . . . . . . . . . . . . . . . .   6
;    6. Definitions  . . . . . . . . . . . . . . . . . . . . .   7
;    7. Entry points . . . . . . . . . . . . . . . . . . . . .   8
;    8. Get terminal type from monitor . . . . . . . . . . . .   9
;    9. TRMOP. equivalent for TOPS-20  . . . . . . . . . . . .  10
;   10. Read SYS:DISPLA.INI
;        10.1   find the file  . . . . . . . . . . . . . . . .  11
;        10.2   Find what NODE#_LINE# to look for  . . . . . .  12
;        10.3   Read next line . . . . . . . . . . . . . . . .  13
;        10.4   Convert aliases  . . . . . . . . . . . . . . .  14
;        10.5   Check for node#_line# match  . . . . . . . . .  15
;        10.6   Process end of file  . . . . . . . . . . . . .  16
;   11. Input routines for SYS:DISPLA.INI  . . . . . . . . . .  17
;   12. ABBREV - Test abbreviated name . . . . . . . . . . . .  20
;   13. Data area  . . . . . . . . . . . . . . . . . . . . . .  21
SUBTTL	General description of ITTYPE.REL

  These routines will get the terminal type from either the monitor or
from SYS:DISPLA.INI.  It is used by programs which have terminal dependant
output routines, such as TECO, JOBDPY, DDBDPY, etc.

  There are two routines, the first to get the terminal type for the terminal
the job is running on (perhaps using an alias), and the second to return all
applicable types for the terminal.  The names of the FORTRAN routines are
"ITTYPE" and "GETYPE" respectively, the names of the MACRO routines are
".TTYPE" and ".GTYPE" respectively.

  The algorithm used by ITTYPE / .TTYPE is as follows:
If a terminal type is given,
1)  See if it matches a known type.  Exit if so.
2)  Read SYS:DISPLA.INI checking aliases for the given type.
3)  Return failure if no match.

If the terminal type is not supplied in the call to ITTYPE / .TTYPE,
1)  Ask the monitor for the terminal type, and see if it matches a known
    type.  If so, exit.
2)  Read the second part of SYS:DISPLA.INI, which defines aliases to the
    terminal types.  For instance, it may say that a VT100 can be treated
    as if it were a VT52.
3)  Read the first part of SYS:DISPLA.INI which defines the terminal types
    on a NODE#_LINE# basis.  See if this definition matches a known type.
4)  Read the second part of SYS:DISPLA.INI for an alias for the type from
    the previous step.
5)  Return failure if no match.

  GETYPE / .GTYPE returns the terminal type returned by the monitor, the type
read from SYS:DISPLA.INI, and any applicable aliases found in SYS:DISPLA.INI.
SUBTTL	Format of SYS:DISPLA.INI

  DISPLA.INI is an ASCII file on SYS:.  The first section contains descriptions
of the TTY line numbers, and the type of terminal connected to that line.
It is ordered from specific to general, with the "catch-all" at the end.  The
second part consists of aliases.  Blank lines and comment lines may be anywhere
in the file; the semicolon and exclaimation point are comment characters.

  The line descriptions consist of the node number, an underscore, the TTY
line number, a colon, the terminal type, and an optional comment.  The
descriptor "ALL_ALL" refers to all terminal lines that have not otherwise
been defined, and if present, must be at the end of the first section.
NOTE: This is opposite of INITIA's TTY.INI.

Example:

	2_3:VT52	;Line 3 on node 2
	REMOT2_TTY3:VT52 ;Same as previous if node 2 is "REMOT2"
	2_ALL:ADM3	;All other terminals on node 2 are ADM3's

	CENTRA_CTY:LA36	;For a system with no network software
	0_CTY:LA36	;Same as previous example
	CTY:LA36	;No node means the central (or only) site

  The aliases consist of the actual terminal type, an equal sign, and the
equivalent terminal type.  The line may be prefixed by a program name and
a greater-than sign.  For example,

	VT100=VT52	;If the terminal is a VT100, pretend it is a VT52.
	VIS200=VT52	;The VISUAL-200 has a VT52 emulation mode.  ;<
	TECO>TK4025=ADM3A ;As far as TECO is conserned, a Tektronix 4025
			; may be treated as an ADM3A, VT will cancel LF.
SUBTTL	FORTRAN calling sequence

If the feature test "FORTRA" is set non-zero, then the ITTYPE routine
is assembled (Inittialize TTY TYPE).

*****************************************************************
*								*
*	  INDEX = ITTYPE(TARRAY,GTYPE)				*
*								*
*****************************************************************

INDEX	= (Function value) An index into the TARRAY if the terminal type
	  is known.  Returned as zero if unknown type.

TARRAY	= (Input) The array of terminal types known to your program.  These
	  types are stored as 5 characters per element for single precision,
	  or 6 characters per element in double precision.  The last element
	  of the array must be zero or all blanks.

STYPE	= (Input) The specified terminal type.  If this value is zero, ITTYPE
	  will ask the monitor and/or DISPLA.INI for the type of terminal that
	  your program is running on.  If STYPE is not zero, ITTYPE will test
	  it for a possible match in TARRAY, allowing for abbreviations and/or
	  aliases from DISPLA.INI.  Use an A5 format for single precision, A6
	  for double precision.



*****************************************************************
*								*
*	   CALL GETYPE(AARRAY,LENALS,NUMALS,TRMTYP,SYSTYP)	*
*								*
*****************************************************************

AARRAY	= (Output) Array to receive the names of the aliases

LENALS	= (Input) Size of the AARRAY array

NUMALS	= (Output) Number of aliases returned

TRMTYP	= (Output) Terminal type as obtained from the monitor

SYSTYP	= (Output) Terminal type as obtained from SYS:DISPLA.INI
C  Sample FORTRAN program for ITTYPE and GETYPE
C
C  Use ".EXECUTE TEST1.FOR,FOR:ITTYPE.REL"

	PROGRAM TEST1
	DIMENSION ALIASS(10)	! Array to receive possible aliases
	DIMENSION TYPES(7)	! 6 types, plus blank at end
	DATA TYPES /'TTY','LA36','VT52','VT100','CRT','ADM3A',' '/
	DATA LENALS /10/	! Size of the ALIASS array

C  To use ITTYPE to initialize TTY type
	INDEX = ITTYPE(TYPES,0)	! Get terminal type of this terminal
	IF (INDEX .LE. 0) STOP '? Unknown terminal type'
	TYPE 10, TYPES(INDEX)
10	FORMAT (' The terminal type is ', A5)

C  To use ITTYPE to check an abbreviation or get an alias
	TYPE 20
20	FORMAT (' Enter a terminal type: ',$)
	ACCEPT 30, NAME	! Single precision = A5 format
30	FORMAT (A5)
	INDEX = ITTYPE(TYPES,NAME)	! See if it is known
	IF (INDEX .LE. 0) STOP '? Unknown terminal type'
	TYPE 40, TYPES(INDEX)
40	FORMAT (' You have specified ', A5)


C  To use GETYPE to get all applicable terminal types
	CALL GETYPE(ALIASS,LENALS,NUMALS,TRMNAM,SYSNAM)
	TYPE 50, TRMNAM, SYSNAM
50	FORMAT (' TRMOP. says ', A5, ', SYS:DISPLA.INI says ', A5)
	IF (NUMALS .GT. 0) TYPE 60, (ALIASS(I),I=1,NUMALS)
60	FORMAT ('   alias ', A5)
	END
C  Double-precision FORTRAN program for ITTYPE and GETYPE
C
C  Use ".EXECUTE TEST2.FOR,FOR:ITTYPE.REL"

	PROGRAM TEST2
	DOUBLE PRECISION ALIASS(10)	! Array to receive possible aliases
	DOUBLE PRECISION TYPES(7)	! 6 types, plus blank at end
	DOUBLE PRECISION NAME, TRMNAM, SYSNAM	! 6 chars each
	DATA TYPES /'TTY','LA36','VT52','VT100','CRT','ADM3A',' '/
	DATA LENALS /10/	! Size of the ALIASS array

C  To use ITTYPE to initialize TTY type
	INDEX = ITTYPE(TYPES,0)	! Get terminal type of this terminal
	IF (INDEX .LE. 0) STOP '? Unknown terminal type'
	TYPE 10, TYPES(INDEX)
10	FORMAT (' The terminal type is ', A6)

C  To use ITTYPE to check an abbreviation or get an alias
	TYPE 20
20	FORMAT (' Enter a terminal type: ',$)
	ACCEPT 30, NAME	! Single precision = A6 format
30	FORMAT (A6)
	INDEX = ITTYPE(TYPES,NAME)	! See if it is known
	IF (INDEX .LE. 0) STOP '? Unknown terminal type'
	TYPE 40, TYPES(INDEX)
40	FORMAT (' You have specified ', A6)


C  To use GETYPE to get all applicable terminal types
	CALL GETYPE(ALIASS,LENALS,NUMALS,TRMNAM,SYSNAM)
	TYPE 50, TRMNAM, SYSNAM
50	FORMAT (' TRMOP. says ', A6, ', SYS:DISPLA.INI says ', A6)
	IF (NUMALS .GT. 0) TYPE 60, (ALIASS(I),I=1,NUMALS)
60	FORMAT ('   alias ', A6)
	END
SUBTTL	MACRO calling sequence

The ITTYPE routine for macro programs has the entry points ".TTYPE" and
".GTYPE".  For both routines, put the address of a table of terminal types
in the right half of accumulator 1 (T1), the negative of the size in the left
half, and PUSHJ to the routine.  .TTYPE uses this value as a pointer to the
table of known types, .GTYPE uses this value as a pointer of where to return
the aliases.  On return, T1 contains an index into the table.
	T1=1
	P=17

;To use .TTYPE to get an alias or check an abbreviation:
	MOVE	T1,[-TYPSIZ,,TYPES]	;Point to table
	MOVE	T2,[SIXBIT /ADM3/]	;Abbreviation for ADM3A
	PUSHJ	P,.TTYPE##		;Check it out
	CAIE	T1,5			;Supposed to point to TYPES+5
	 OUTSTR	[ASCIZ /% Bug somewhere
/]

;To use .TTYPE to initialize terminal type:
	MOVE	T1,[-TYPSIZ,,TYPES]	;Point to table
	MOVEI	T2,0			;Zero to use TRMOP. value
	PUSHJ	P,.TTYPE##		;Get the terminal type
	JUMPL	T1,[OUTSTR [ASCIZ /? Unknown terminal type/]
		    EXIT]
	OUTSTR	[ASCIZ	/The terminal type is /]
	MOVE	T1,TYPES(T1)		;Get name in SIXBIT
	PUSHJ	P,TYPSIX##		;Type SIXBIT value on TTY

;To use .GTYPE to get all applicable terminal types:
	MOVE	T1,[-LENALS,,ALIASS]	;Length and location of list
	PUSHJ	P,.GTYPE		;Get terminal type and aliases
	MOVEM	T1,NUMALS		;How many aliases returned
	MOVEM	T2,TRMNAM		;What the TRMOP. said
	MOVEM	T3,SYSNAM		;What SYS:DISPLA.INI said
	EXIT				;Or JRST DDT##

TYPES:	SIXBIT	/TTY/			;Table of names
	SIXBIT	/LA36/
	SIXBIT	/VT52/
	SIXBIT	/VT100/
	SIXBIT	/CRT/
	SIXBIT	/ADM3A/			;+5
TYPSIZ==.-TYPES
ALIASS:	BLOCK	LENALS			;Place to return possible aliases
NUMALS:	BLOCK	1			;Number of entries returned in ALIASS
TRMNAM:	BLOCK	1			;TRMOP. value
SYSNAM:	BLOCK	1			;SYS:DISPLA.INI value

	END

	@	;End of COMMENT
SUBTTL	Definitions

	SEARCH	MACTEN,UUOSYM
	SALL

	ND	FORTRA,0		;Nonzero for ASCII tables, lowseg only
IFN FORTRA,<
 IFGE FORTRA-6,<TITLE	ITTYPE - Initialize TTY type, FORTRAN V6 callable
	IF2,<	PRINTX	[Assembling for non-contiguous memory in FOROT6]>>
 IFL FORTRA-6,<	TITLE	ITTYPE - Initialize TTY type, FORTRAN callable>>
IFE FORTRA,<
 IFN PSECTN,<	TITLE	.TTYPE - Initialize TTY type in PSECTs>
 IFE PSECTN,<	TITLE	.TTYPE - Initialize TTY type in HISEG>>

;AC definitions
	F=0				;Flags
	T1=1				;Args passed through AC1
	T2=2
	T3=3
	T4=4
	CH=5				;Holds character
	HIAC==CH			;Highest AC to save/restore
	L=16				;Pointer to FORTRAN arguments
	P=17				;PDL

;Flag bits
	F.COM==1B0			;Ignoring chars in comment
	F.FLP==1B1			;Use FILOP. instead of IN uuo
	F.T20==1B2			;Running under TOPS-20
IFN FORTRA,< F.DBL==1B3 >		;Argument is 6 chars, double precision

;Other definitions
IFE FORTRA-6,<	PSECTN=='FOROT6'>	;Make this nonzero, but don't use PSECTs
	ND	PSECTN,' '		;Blank PSECT name = HISEG
	ND	PSECTO,400000		;PSECT origin, negative for no origin
IFN PSECTN,< ND DSKSIZ,200+3	>	;Size of a disk buffer

	ND	VIDCHN,0		;I/O channel if FILOP. fails
	ND	ALSIZ,^D10		;Number of aliases to consider

		CONT.
IFN FORTRA,<	;Definitions for FORTRAN argument lists
	FDOUBL==10B12			;Argument type of double precision
	FSTRNG==17B12			;Argument type of ASCIZ
	FARGS==-1			;Index to count of arguments
	FARRAY==0			;1st arg is array of names
	FNAME== 1			;2nd arg to ITTYPE is supplied name
	FLENTH==1			;2nd arg to GETYPE is length of array
	FNUMAL==2			;3rd arg gets number of aliases found
	FTRMOP==3			;4th arg get TRMOP. type
	FDISPL==4			;5th arg gets SYS:DISPLA.INI type
>  ;End of IFN FORTRA

	DEFINE	SETPSC(NAME,ORIGIN),<
		IFL ORIGIN,<	PSECT	NAME	>	;Continue in psect
		IFGE ORIGIN,<	PSECT	NAME,ORGIN	> >

	OPDEF	IFGETYPE[SKIPGE	GENTRY]	;Execute next instruction if GETYPE
	OPDEF	IFITTYPE[SKIPL	GENTRY]	;Execute next instruction if ITTYPE

	OPDEF	ERJMP	[JUMP	16,]	;TOPS-20 compatibility
	OPDEF	GTTYP	[JSYS	303]	;Get TOPS-20 terminal type
	.PRIOU==101			;JFN for terminal
SUBTTL	Entry points

IFN FORTRA,< ENTRY ITTYPE,GETYPE	;FORTRAN callable routines

	SIXBIT	/ITTYPE/		;INTEGER FUNCTION ITTYPE
ITTYPE::SETZM	GENTRY			;ITTYPE entry is 0
	JRST	TTYPE			;Skip over alternate entry

	SIXBIT	/GETYPE/		;SUBROUTINE GETYPE
GETYPE::SETOM	GENTRY			;GETYPE entry is -1

>  ;End of IFN FORTRA



IFE FORTRA,< ENTRY .TTYPE,.GTYPE	;MACRO callable routines
	IFE PSECTN,<	TWOSEG		;Normal HISEG stuff
			RELOC	PSECTO	>
	IFN PSECTN,<	SETPSC	\'PSECTN,PSECTO  >	;Put in specified PSECT

.TTYPE::SETZM	GENTRY			;.TTYPE entry is 0
	JRST	TTYPE			;Skip over alternate entry

.GTYPE::SETOM	GENTRY			;.GTYPE entry is -1

>  ;End of IFE FORTRA


TTYPE:	MOVEM	F,SAVEF			;Save
	MOVE	F,[T1,,SAVET1]		; all
	BLT	F,SAVEAC+HIAC		; ACs
	SETZB	F,FILNAM		;Clear flags, and supplied value
	MOVX	T3,%CNMNT		;Get the operating
	GETTAB	T3,			; system type
	  MOVEI	T3,0			;Must be ancient TOPS-10
	LDB	T3,[POINTR T1,CN%MNT]	;Get the operating system type
	CAXN	T3,.CNT20		;Is it TOPS-20?
	 TXO	F,F.T20			;Yes, flag it
SUBTTL	Get terminal type from monitor

IFN FORTRA,<
	HLRZ	T1,FNAME(L)		;Get the type of arg for supplied name
	CAIE	T1,(FDOUBL)		;If DOUBLE PRECISION
	CAIN	T1,(FSTRNG)		; or literal in quotes
	 TXO	F,F.DBL			; stop at 6th char instead of 5th
	MOVEI	T1,@FNAME(L)		;Get addr to specified type
	IFITTYPE			;If function ITTYPE,
	 PUSHJ	P,ASCSIX		; convert to SIXBIT
	TXZ	F,F.DBL			;Reset this flag
	HLRZ	T1,FARRAY(L)		;Get the type of arg for table
	CAIN	T1,(FDOUBL)		;If DOUBLE PRECISION
	 TXO	F,F.DBL			; stop at 6th char instead of 5th
	MOVEI	T1,@FARRAY(L)		;Get pointer to TYPTAB or ALIASS array
	SKIPE	T3,GENTRY		;0 for ITTYPE
	 MOVN	T3,@FLENTH(L)		;Get size of array for GETYPE
	HRL	T1,T3			;Put negative count in left half
>  ;End of IFN FORTRA
	MOVEM	T1,TYPTAB		;Save pointer to table for ABBREV
	IFGETYPE			;If subroutine GETYPE,
	 MOVEI	T2,0			; clear T2 to alway do the TRMOP.
	MOVEM	T2,FILNAM		;Non-zero to look for aliases only

	MOVE	T3,T2			;Copy into expected AC
	JUMPN	T3,TRMPOK		;If non-zero, use it instead of TRMOP.

	TXNE	F,F.T20			;TOPS-20?
	 JRST	[PUSHJ	P,TRMP20	  ;Yes, use GTTYP instead of TRMOP.
		 JRST	TRMPOK	]         ;Continue
	MOVX	T1,.TOTRM		;Get the
	SETO	T2,			; terminal
	MOVE	T3,[2,,T1]		; type from
	TRMOP.	T3,			; the monitor
	  MOVEI	T3,0			;Must be 603A

TRMPOK:	MOVEM	T3,TRMNAM		;Save for later

	CONT.
	IFITTYPE			;If function ITTYPE,
	 PUSHJ	P,ABBREV		; check for a known type
	  PUSHJ	P,REDINI		;Unknown, try DISPLA.INI for alias

RETURN:					;T1 contains index into table
IFN FORTRA,<
	MOVEI	0,1(T1)			;Increment and put value in AC0
	MOVE	HIAC,[SAVET1,,T1]	;Assume FUNCTION ITTYPE
	IFGETYPE			;All ACs if SUBROUTINE GETYPE
	 MOVE	HIAC,[SAVEF,,F]		;Restore the
	BLT	HIAC,HIAC		; accumulators
	POPJ	P,			;Return from ITTYPE / GETYPE
>  ;End of IFN FORTRA

IFE FORTRA,<
	HRRES	T1			;Clear out left half (exept for -1)
	MOVE	F,[SAVET4,,T4]		;T1, T2, and T3 all contain data
	IFITTYPE			;If ITTYPE,
	 MOVE	F,[SAVET2,,T2]		; only T1 has data
	BLT	F,HIAC			;Restore the ACs
	MOVE	F,SAVEF			;Restore AC0
	POPJ	P,			;Return from .TTYPE / .GTYPE
>  ;End of IFE FORTRA
SUBTTL	TRMOP. equivalent for TOPS-20

TRMP20:	MOVEI	T3,0			;Clear result in case of failure
	MOVX	1,.PRIOU		;File designator
	GTTYP				;Do JSYS to get TTY type
	  ERJMP [HALT]			;Should never happen
	MOVSI	T3,'???'		;In case out of range
	CAIGE	2,LENT20		;One we know about?
	 MOVE	T3,T20NAM(2)		;Get SIXBIT name for TOPS-20 TTY number
TRMPND:	POPJ	P,			;Return from TRMP20


;Table of TOPS-20 terminal names

T20NAM:	SIXBIT	/TTY33/			; 0 - Model 33 TTY
	SIXBIT	/TTY35/			; 1 - Model 35 TTY
	SIXBIT	/TTY37/			; 2 - Model 37 TTY
	SIXBIT	/EXECUP/		; 3 - TI/EXECUPORT
	SIXBIT	/DM1521/		; 4 - Customer defined (Datamedia 1521)
	SIXBIT	/CUSTO2/		; 5 - Customer defined
	SIXBIT	/CUSTO3/		; 6 - Customer defined
	SIXBIT	/CUSTO4/		; 7 - Customer defined
	SIXBIT	/DEFAUL/		;10 - Default
	SIXBIT	/IDEAL/			;11 - Ideal
	SIXBIT	/VT05/			;12 - VT05
	SIXBIT	/VT50/			;13 - VT50
	SIXBIT	/LA30/			;14 - LA30
	SIXBIT	/GT40/			;15 - GT40
	SIXBIT	/LA36/			;16 - LA36
	SIXBIT	/VT52/			;17 - VT52
	SIXBIT	/VT100/			;20 - VT100
	SIXBIT	/LA38/			;21 - LA38
	SIXBIT	/LA120/			;22 - LA120
LENT20==.-T20NAM
SUBTTL	Read SYS:DISPLA.INI -- find the file

;Initial OPEN/LOOKUP blocks for 'SYS:DISPLA.INI'

FLPINI:	FO.ASC+.FORED			;Assign channel .GT. 17 for reading
	.IOASC				;I/O mode
	'SYS   '			;Device
	VIDHED				;Buffer header
	0,,1				;Number of input buffers
	VIDLOK				;Address of LOOKUP block
FLPSIZ=.-FLPINI				;Size of FILOP. block
	'DISPLA'			;File-name
	'INI   '			;File-extension
	0				;Protection
	0				;PPN (default path)
INISIZ==.-FLPINI			;Size of initial data block

REDINI:	MOVE	T1,[FLPINI,,FLPBLK]	;Set up data
	BLT	T1,FLPEND		; for FILOP.
	MOVE	T4,.JBFF##		;Get current size
IFN PSECTN,<
	MOVEI	T1,DSKBUF		;Where to put buffer
	MOVEM	T1,.JBFF##		;Tenitor where we want it
	MOVEI	T1,VIDOPN		;Point to OPEN block
	DEVSIZ	T1,			;Get the size of a disk buffer
	  MOVX	T1,DSKSIZ		;Very strange
	HRRZS	T1			;Forget about the number of buffers
	CAXLE	T1,DSKSIZ		;Is the buffer big enough?
	 JRST	[OUTSTR	[ASCIZ	/?.ITYPE - Size of DSK buffer changed/]
		 EXIT]			;It may happen in 7.02
>  ;End of IFN PSECTN

	TXNE	F,F.T20			;TOPS-20?
	 JRST	OPNLKP			;Yes, PA1050 gives UUO ERROR on FILOP.

FILOP2:	TXO	F,F.FLP			;Try using FILOP.
	MOVE	T1,[FLPSIZ,,FLPBLK]	;Point to args
	FILOP.	T1,UU.PHY		;Get channel greater than 17
	 TXZA	F,F.FLP			;Cannot use FILOP.
	JRST	REDIN0			;OK, get node number

		CONT.
;Here when FILOP. fails

	CAMN	T1,[FLPSIZ,,FLPBLK]	;FILOP. not implemented?
	 JRST	OPNLKP			;Yes, use OPEN/LOOKUP
	CAXE	T1,ERILU%		;Illegal function?
	 JRST	NOFILE			;No, but no file
	MOVSI	T1,VIDCHN		;Yes, 603A does not
	EXCH	T1,FLPBLK+.FOFNC	; understand extended channels
	TXNE	T1,FO.ASC		;If that was the cause,
	 JRST	FILOP2			; try without FO.ASC

OPNLKP:	OPEN	VIDCHN,VIDOPN		;Get an I/O channel to 'SYS'
	 JRST	NOFILE			;No 'SYS'
	LOOKUP	VIDCHN,VIDLOK		;See if 'DISPLA.INI' is on SYS
	 JRST	NOFILE			;No file 'DISPLA.INI'
	INBUF	VIDCHN,1		;Get one buffer
SUBTTL	Read SYS:DISPLA.INI -- Find what NODE#_LINE# to look for

REDIN0:	MOVEM	T4,.JBFF##		;Reset, now that buffer is allocated
	SKIPE	FILNAM			;Was terminal type supplied?
	 JRST	[SETOM	NODNUM		  ;Yes, check for aliases,
		 SETOM	LINNUM		  ; not terminal lines
		 JRST	REDIN1	]	  ;Continue
	MOVSI	T3,'TTY'		;For this terminal
	TXNN	F,F.T20			;Use only TRMNO. for TOPS-20
	GTNTN.	T3,UU.PHY		;Get node/line number
	  JRST	[PJOB	T3,		  ;Get my terminal's
		 TRMNO.	T3,		  ; I/O index
		   JRST	NOFILE		  ;No such animal?
		 ANDI	T3,777		  ;Get only the line number
		 JRST	.+1	]	  ;Continue
	HLRZM	T3,NODNUM		;Save my node number
	HRRZM	T3,LINNUM		;Save my terminal number

REDIN1:	MOVE	T1,[-ALSIZ,,ALSBLK]	;Pointer to alias block for ITTYPE
	IFGETYPE			;If subroutine GETYPE,
	 MOVE	T1,TYPTAB		; get supplied pointer
	MOVEM	T1,ALSPTR		; for alias list
	MOVEM	T1,ALSPT1		;Save original for later

	HRROI	T1,.GTPRG		;Find the name
	GETTAB	T1,			; of this program
	  MOVSI	T1,'???'		;Very strange
	MOVEM	T1,PRGNAM		;Save for program specific aliases
SUBTTL	Read SYS:DISPLA.INI -- Read next line

;As each line is processed, 3 checks are made.
;
;1)  See if the node_line# match that of this terminal.  If the first match,
;    place the terminal type in FILNAM and see if this matches a known type.
;2)  See if the line describes an alias for the terminal type returned from
;    the monitor.  If so, see if this alias is a known type.
;3)  See if the line describes an alias for what is in FILNAM.  If so, save
;    the alias in a list.  The list is checked only if no alias was found
;    in step 2.
;
;Only if all steps fail does this routine give up and return a negative
;value.

READLN:	PUSHJ	P,SIXIN			;Go get the node/terminal name in T3
	CAIN	CH,.CHLFD		;Linefeed marks a blank line
	 JRST	READLN			; or a comment line
	JUMPE	T3,NEXTLN		;Must have some data
	SETZM	NODNAM			;Clear for lines with no node name
	CAIN	CH,"_"			;Underscore marks end of
	 JRST	NODEN			; node name or number
	CAIN	CH,":"			;Colon marks end of
	 JRST	LINEN			; line number or TTY name
	CAIN	CH,"="			;Equal sign marks end
	 JRST	ALIAS			; of alias
;<
	CAIN	CH,">"			;Greater than sign marks end
	 JRST	PALIAS			; of program specific alias

;Here to ignore the rest of the line

NEXTLN:	CAIN	CH,.CHLFD		;Search for end of line
	 JRST	READLN			;End, start reading next line
	PUSHJ	P,VIDIN			;Get next char
	JUMPL	CH,ENDFIL		;Negative for EOF
	JRST	NEXTLN			;Keep searching for end of line
SUBTTL	Read SYS:DISPLA.INI -- Convert aliases

;<  The format for a program specific alias is "PRGNAM>ACTYPE=EQTYPE" where
;PGRNAM matches the name of the program that called this routine.  This allows
;terminals which have the same up-cursor and erase-line commands to be the
;same in the eyes of TECO, even though they may have different methods of
;direct cursor addressing.

PALIAS:	CAME	T3,PRGNAM		;Does it match this program's name?
	 JRST	NEXTLN			;No, ignore it
	PUSHJ	P,SIXIN			;Yes, get the actual name
	CAIN	CH,"="			;Check
	CAIN	T3,0			; syntax
	 JRST	NEXTLN			;Close, but no cigar

;The format for an alias is "ACTYPE=EQTYPE" where ACTYPE is the actual
;type (from TRMOP. or first section) and EQTYPE is the equivalent type.

ALIAS:	PUSH	P,T3			;Save ACTYPE for a while
	PUSHJ	P,SIXIN			;Get what it translates to
	POP	P,T2			;Get what was left of =
	CAIE	CH,.CHLFD		;Must have end of line
	 JRST	NEXTLN			;(VIDIN removes comments)
	MOVE	T1,ALSPTR		;Get pointer to alias block
	IFGETYPE			;If subroutine GETYPE,
	 CAME	T2,TRMNAM		; put aliases to TRMNAM in list also
	CAMN	T2,FILNAM		;Does it match what was found before?
	 JUMPL	T1,[MOVEM T3,(T1)	  ;Yes, save this alias
IFN FORTRA,<	    IFITTYPE		  ;If function ITTYPE,
		     AOBJN T1,.+1	  ; go back to in-line code
		    TXNE  F,F.DBL	  ;If double precision,
		     ADDI T1,1	>	  ; increment for 2 words per entry
		    AOBJN T1,.+1	  ;Update pointer
		    JRST  .+1	]	  ;ALSBLK now full, continue
	MOVEM	T1,ALSPTR		;Store pointer
	IFITTYPE			;If function ITTYPE,
	CAME	T2,TRMNAM		; does it match what the TRMOP. said?
	 JRST	READLN			;No, done with this line
	PUSHJ	P,ABBREV		;Yes, see if name in T3 is known
	  JRST	READLN			;No, keep trying
	JRST	ENDOK			;Ignore rest of file, return answer
SUBTTL	Read SYS:DISPLA.INI -- Check for node#_line# match

NODEN:	MOVEM	T3,NODNAM		;Save node name
	PUSHJ	P,SIXIN			;Get the terminal name
	CAIN	CH,":"			;Check
	CAIN	T3,0			; syntax
	 JRST	NEXTLN			;Not quite right

;Here with line number in T3 (SIXBIT /TTY4/ or SIXBIT /4/)

LINEN:	SKIPGE	LINNUM			;If negative, can never match
	 JRST	NEXTLN			; so save some effort
	MOVEM	T3,LINNAM		;Save the line number or terminal name
	SKIPGE	T3,NODNAM		;Get the node name/number
	 JRST	DEFV05			;SIXBIT node names are negative
	JUMPE	T3,CENTRA		;Central site if node name is zero
	PUSHJ	P,SIXOCT		;Convert SIXBIT to octal
	 JRST	DEFV06			;Must be name that starts with a digit
	JUMPN	T3,DEFV07		;Go see if the right node

;Here when no node specified

CENTRA:	HRRZI	T3,.GTLOC		;Get the central
	GETTAB	T3,			; site node number
	  MOVEI	T3,0			;No network code
	JRST	DEFV07			;Go see if it's the one we want

;Here with a node name that starts with an alphabetic character

DEFV05:	CAMN	T3,['ALL   ']		;Check for 'ALL'
	 JRST	NODEOK			;This one is always a match
					;(and must be last line before aliases)
DEFV06:	MOVE	T1,[.NDRNN,,T2]		;Code to get the node number
	MOVEI	T2,2			;2 words (T2 and T3)
	NODE.	T1,			;Translate SIXBIT name to octal number
	 JRST	NEXTLN			;No such node name
	MOVE	T3,T1			;Put in expected AC

DEFV07:	CAME	T3,NODNUM		;Skip if they match
	 JRST	NEXTLN			;Try the next entry
NODEOK:	HLRZ	T3,LINNAM		;Get the type of terminal
	CAIN	T3,'TTY'		;If it starts with 'TTY'
	 JRST	DEFV11			; then octal line number in right half
	CAIN	T3,'CTY'		;If 'CTY'
	 JRST	OPRCTY			; get the CTY line number
	CAIN	T3,'ALL'		;Test for 'ALL'
	 JRST	LINEOK			;This one always matches
	CAIE	T3,'OPR'		;If not some sort of 'OPR'
	 JRST	DEFV10			; assume octal line number

	MOVE	T3,NODNUM		;Get my node number
	SETZ	T4,			;Get the node
	LSHC	T3,-^D3			; number in
	LSH	T3,^D3			; the left
	LSHC	T3,^D9			; half of
	TDOA	T3,['OPR00 ']		; the name

OPRCTY:	MOVSI	T3,'CTY'		;Get the line number to the CTY
	MOVE	T4,T3			;Duplicate in case of failure
	GTNTN.	T3,UU.PHY		;Get the line number wanted
	  JRST	[MOVE	T3,T4		  ;Get back 'CTY' or 'OPR00'
		 IONDX.	T3,		  ;Get the I/O index
		   JRST	NEXTLN		  ;No such animal?
		 JRST	.+1	]	  ;Continue
	ANDI	T3,777			;Get rid of some junk
	JRST	DEFV12			;Go see if the right line

DEFV10:	SKIPA	T3,LINNAM		;Assume the name is in octal
DEFV11:	 HRLZ	T3,LINNAM		;Octal terminal number from right half
	PUSHJ	P,SIXOCT		;Convert SIXBIT to octal
	  JRST	NEXTLN			;Error on input

DEFV12:	CAME	T3,LINNUM		;Skip if we found the right entry
	 JRST	NEXTLN			;No - try the next entry

LINEOK:	PUSHJ	P,SIXIN			;Get the video name
	CAIN	CH,.CHLFD		;Check
	CAIN	T3,0			; syntax
	 JRST	NEXTLN			;Loser
	SKIPN	FILNAM			;Do not allow ALL to override TTY
	 MOVEM	T3,FILNAM		;Save the video name if first time
	JRST	READLN			;Keep looking for aliases to TRMNAM
SUBTTL	Read SYS:DISPLA.INI -- Process end of file

NOFILE: SETO	T1,			;Unknown terminal type
ENDOK:	TXNE	F,F.FLP			;Using FILOP.?
	 JRST	[MOVEI	T4,.FOREL	  ;Do the RELEAS
		 HRRM	T4,FLPBLK+.FOFNC  ; via FILOP.
		 MOVE	T4,[FLPSIZ,,FLPBLK]
		 FILOP.	T4,		  ;CLOSE and RELEAS extended channel
		   JFCL			  ;Not supposed to happen
		 JRST	.+2	]	  ;Skip over the RELEAS VIDCHN,
	RELEAS	VIDCHN,			;Release the disk file
IFE PSECTN,<
	HRRZ	T4,.JBFF##		;Restore my
	CORE	T4,			; core size
	  JFCL				;Well, I tried
>  ;End of IFE PSECTN
	POPJ	P,			;Return answer in T1 (and T2 and T3)

ENDFIL:	IFGETYPE			;If subroutine GETYPE
	 JRST	ENDFI1			; return NUMALS, TRMNAM, and SYSNAM
	MOVE	T3,FILNAM		;After all aliases to TRMNAM, check
	PUSHJ	P,ABBREV		; if FILNAM is known
	  JRST	ENDFI0			;No, see if any alias to FILNAM is known
	JRST	ENDOK			;Got a match

ENDFI0:	MOVE	T1,ALSPT1		;Get the original alias pointer
	CAMN	T1,ALSPTR		;Stop at end of list
	 JRST	NOFILE			;No match any where, close file
	MOVE	T3,(T1)			;Get the saved alias
IFN FORTRA,<
	IFGETYPE			;If subroutine GETYPE,
	 PUSHJ	P,SIXASC		; convert SIXBIT to ASCII in array
>  ;End of IFN FORTRA
	AOBJN	T1,.+1			;Update pointer
	MOVEM	T1,ALSPT1		;And save
	IFITTYPE			;If function ITTYPE
	 PUSHJ	P,ABBREV		; test this FILNAM alias
	  JRST	ENDFI0			;Keep trying
	JRST	ENDOK			;Found something acceptable, close file

ENDFI1:	MOVE	T1,ALSPTR		;Get final pointer
	SUB	T1,ALSPT1		;Minus the difference
IFE FORTRA,<
	MOVE	T2,TRMNAM		;TRMOP. value in T2
	MOVE	T3,FILNAM		;SYS:DISPLA.INI value in T3
	JRST	ENDOK			;Done
>  ;End of IFE FORTRA

		CONT.
IFN FORTRA,<
	HRRZS	T1			;Zero count in left half
	TXNE	F,F.DBL			;If double precision
	 IDIVI	T1,2			; then 2 words per entry
	MOVEM	T1,@FNUMAL(L)		;Return the number of aliases
	PUSH	P,F			;Save status of F.DBL for array
	TXZ	F,F.DBL			;Reset this flag
	HLRZ	T1,FTRMOP(L)		;Get the type of arg for TRMNAM
	CAIN	T1,(FDOUBL)		;If DOUBLE PRECISION
	 TXO	F,F.DBL			; stop at 6th char instead of 5th
	MOVEI	T1,@FTRMOP(L)		;Where to return TRMOP. value
	MOVE	T3,TRMNAM		;Value in SIXBIT
	PUSHJ	P,SIXASC		;Convert to ASCII
	TXZ	F,F.DBL			;Reset this flag
	HLRZ	T1,FDISPL(L)		;Get the type of arg for FILNAM
	CAIN	T1,(FDOUBL)		;If DOUBLE PRECISION
	 TXO	F,F.DBL			; stop at 6th char instead of 5th
	MOVEI	T1,@FDISPL(L)		;Where to return file value
	MOVE	T3,FILNAM		;Value in SIXBIT
	PUSHJ	P,SIXASC		;Convert to ASCII
	POP	P,F			;Restore old value of F.DBL
	JRST	ENDFI0			;Now for all the aliases
>  ;End of IFN FORTRA
SUBTTL	Input routines for SYS:DISPLA.INI

;Here for a character from 'SYS:DISPLA.INI'

VIDIN:	SOSG	VIDHED+.BFCTR		;Skip if the buffer isn't empty
	 JRST	VIDIN1			;Go fill the buffer
VIDIN0:	ILDB	CH,VIDHED+.BFPTR	;Get a character
	CAIE	CH,0			;Ignore nulls
	CAIN	CH,.CHCRT		; and carriage returns
	 JRST	VIDIN			; ...
	CAIE	CH," "			;Space?
	CAIN	CH,.CHTAB		;or tab?
	 JRST	VIDIN			;Ignore leading and trailing spaces
	CAIE	CH,";"			;Semicolon?
	CAIN	CH,"!"			; or exclaimation point?
	 TXO	F,F.COM			;Set the comment flag
	CAIN	CH,.CHLFD		; Linefeed?
	 TXZ	F,F.COM			;Yes, end of comment
	TXNE	F,F.COM			;If in a comment
	 JRST	VIDIN			; ignore till end of line
	POPJ	P,			;Return

VIDIN1:	TXNE	F,F.FLP			;Using FILOP.?
	 JRST	VIDIN3			;Yes
	IN	VIDCHN,			;Fill the input buffer
	  JRST	VIDIN0			;Full to empty it

VIDIN2:	SETO	CH,			;Assume E-O-F, inform the caller
	TXZ	F,F.COM			;EOF also means end of comment
	POPJ	P,			;Return

VIDIN3:	MOVEI	CH,.FOINP		;Set the input
	HRRM	CH,FLPBLK+.FOFNC	; function
	MOVE	CH,[FLPSIZ,,FLPBLK]	;Get another
	FILOP.	CH,			; buffer
	  SKIPA				;Error
	 JRST	VIDIN0			;OK

	CAXE	CH,ERILU%		;Illegal function?
	 JRST	VIDIN2			;No, assume EOF
	TXZ	F,F.FLP			;Yes, .FOINP not implemented on 603A
	JRST	VIDIN1			;Use IN UUO from now on
;Here to input a SIXBIT word

SIXIN:	SETZ	T3,			;Reset the SIXBIT word
	MOVE	T2,[POINT 6,T3]		;Set up a byte pointer

SIXIN0:	PUSHJ	P,VIDIN			;Get a character for the file
	PUSHJ	P,ALFNUM		;Convert to SIXBIT if alphameric
	  POPJ	P,			;End of word, ASCII char in CH
	TXNE	T2,77B5			;Skip if the SIXBIT word is full
	 IDPB	CH,T2			;Store the character
	JRST	SIXIN0			;Go get the next character


;Routine to check convert CH to SIXBIT if it is alphameric

ALFNUM:	CAIL	CH,"a"			;Skip if less than a lowercase "a"
	CAILE	CH,"z"			;Skip if less than a lowercase "z"
	 JRST	ALFNU1			;Not lowercase
	ADDI	CH,"A"-"a"		;Convert lower case to upper case

ALFNU0:	ADDI	CH,' '-" "		;Convert ASCII to SIXBIT
	JRST	CPOPJ1			;Give good return

ALFNU1:	CAIG	CH,"Z"			;Skip if greater than a "Z"
	CAIGE	CH,"0"			;Skip if greater than a "0"
	 POPJ	P,			;Error return
	CAIGE	CH,"A"			;Skip if greater than a "A"
	CAIG	CH,"9"			;Skip if greater than a "9"
	 JRST	ALFNU0			;Go store the character
	POPJ	P,			;Error return
;Here to convert SIXBIT in T3 to octal in T3

SIXOCT:	JUMPE	T3,CPOPJ		;Return zero for blanks
	MOVEI	T1,0			;Clear answer
	MOVE	T2,[POINT 6,T3]		;Set up the byte pointer
SIXOC0:	ILDB	T4,T2			;Get a character
	JUMPE	T4,SIXOC1		;Return if null
	CAIL	T4,'0'			;Skip if less than a '0'
	CAILE	T4,'7'			;Skip if less than a '7'
	 POPJ	P,			;Give an error return, T3 untouched
	LSH	T1,3			;Multiply by eight
	ADDI	T1,-'0'(T4)		;Add in the new digit
	TXNE	T2,77B5			;Skip if the end of the word is reached
	 JRST	SIXOC0			;Go try the next byte

SIXOC1:	MOVE	T3,T1			;Put answer in T3
	JRST	CPOPJ1			;Give a good return


IFN FORTRA,<
;Routine to convert ASCII to SIXBIT in T2
;Put address of ASCII word in T1, set F.DBL if double precision
;T1 will be incremented if double precision, so AOBJN will work

ASCSIX:	PUSH	P,T1			;Save ACs
	PUSH	P,T3
	PUSH	P,CH
	SETZM	TEMP			;Clear result
	HRLI	T1,(POINT 7,)		;Point to input string
	MOVE	T2,[POINT 6,TEMP]	;Point to output string
	MOVEI	T3,5			;Five chars
	TXNE	F,F.DBL			;Double precision and literals
	 MOVEI	T3,6			; can be 6 chars

ASCSI0:	ILDB	CH,T1			;Get a char
	PUSHJ	P,ALFNUM		;Convert to uppercase
	  JRST	ASCSI1			;Not alphameric
	IDPB	CH,T2			;Put in TEMP
	SOJG	T3,ASCSI0		;Loop til done

ASCSI1:	MOVE	T2,TEMP			;Put result in T2
	POP	P,CH			;Restore ACs
	POP	P,T3
	POP	P,T1
	TXNE	F,F.DBL			;If double precision
	 ADDI	T1,1			; increments will be by 2
	POPJ	P,			;Return from ASCSIX
;Routine to convert word(s) pointed by T1 from SIXBIT to ASCII in place
;T3 contains SIXBIT word, T1 will get incremented if double precision array

SIXASC:	PUSH	P,T1			;Save AOBJN pointer
	HRLI	T1,(POINT 7,)		;Destination byte pointer
	MOVE	T2,[POINT 6,T3]		;Source byte pointer
	MOVEI	T4,5			;5 chars
	TXNE	F,F.DBL			;10 chars for
	 MOVEI	T4,^D10			; double precision

SIXAS0:	MOVEI	CH,' '			;Infinite supply of trailing blanks
	TXNE	T2,77B5			;If more bytes left in T3,
	 ILDB	CH,T2			; get one
	ADDI	CH," "-' '		;Convert to ASCII
	IDPB	CH,T1			;Store
	SOJG	T4,SIXAS0		;Loop
	POP	P,T2			;Get AOBJN pointer
	HLL	T1,T2			;Restore count, use updated address
	POPJ	P,			;Return from SIXASC
>  ;End of IFN FORTRA
SUBTTL	ABBREV - Test abbreviated name

;The name in SIXBIT is in T3, the pointer to the list is in TYPTAB, and
;the list is ended by a zero word or the count in LH of TYPTAB.
;Clobbers T2, T4, and CH, returns index in T1.

ABBREV:	SETO	T4,			;Set the full mask

TSTAB0:	LSH	T4,-6			;Shift the mask to the right
	TDNE	T3,T4			;Skip if out of characters
	 JRST	TSTAB0			;Loop back until finished

	SETZ	CH,			;Clear the flag for later
	MOVE	T1,TYPTAB		;Get the base address (and word count)
	TLO	T1,(1B0)		;If left half zero, list is ended by
					; a zero word
TSTAB1:
IFE FORTRA,<	MOVE	T2,(T1)  >	;Get a word to test
IFN FORTRA,<	PUSHJ	P,ASCSIX >	;Get SIXBIT word from ASCII list
	JUMPE	T2,TSTABX		;Blank means end of list
	XOR	T2,T3			;Try to clear some characters
	JUMPE	T2,TSTAB3		;Jump if exact match
	ANDCM	T2,T4			;Clear any extra characters
	JUMPN	T2,TSTAB2		;Jump if not a valid abbreviation
	TRON	CH,1			;Skip a if not the first match
	 TLOA	CH,(T1)			;Set the flag for an abreviation found
	TLZ	CH,-1			;More than one abbreviation found
TSTAB2:	AOBJN	T1,TSTAB1		;Loop back

TSTABX:	TLNN	CH,-1			;Skip if an abbreviation was found
	 POPJ	P,			;Error - no such animal

	HLRZ	T1,CH			;Set up T1 to point to the abbreviation
TSTAB3:	TLZ	T1,-1			;Clear left half if exact match
	HRRZ	T2,TYPTAB		;Get starting address
	SUB	T1,T2			;Set up T1 to be 0, 1, 2, ...
IFN FORTRA,<	;T1 may point to second word of element of array
	TXNE	F,F.DBL			;If DOUBLE PRECISION,
	 IDIVI	T1,2			; account for 2 words per element
>  ;End of IFN FORTRA
CPOPJ1:	AOS	(P)			;Give good return
CPOPJ:	POPJ	P,			;Return
SUBTTL	Data area

IFE FORTRA,<IFE PSECTN,<	RELOC	>>	;To the LOWSEG

GENTRY:	BLOCK	1			;-1=GETYPE, 0=ITTYPE
PRGNAM:	BLOCK	1			;Name of program that called us

NODNUM:	BLOCK	1			;Number of node of this terminal
LINNUM:	BLOCK	1			;Line number of this terminal
TRMNAM:	BLOCK	1			;Terminal type from TRMOP.

NODNAM:	BLOCK	1			;Name or number read from file
LINNAM:	BLOCK	1			;SIXBIT number of terminal from file
FILNAM:	BLOCK	1			;Terminal type read from file

TYPTAB:	BLOCK	1			;Pointer to table of known types
FLPBLK:	BLOCK	INISIZ			;FILOP. block + LOOKUP block
	VIDOPN=FLPBLK+.FOIOS		;Start of OPEN block
	VIDLOK=FLPBLK+FLPSIZ		;LOOKUP block starts where FLPBLK ends
	FLPEND=.-1			;End of BLT
VIDHED:	BLOCK	3			;Input buffer header
IFN PSECTN,<	DSKBUF:	BLOCK	DSKSIZ	> ;Disk buffer

ALSBLK:	BLOCK	ALSIZ			;List of possible aliases
ALSPTR:	BLOCK	1			;AOBJN pointer to ALSBLK
ALSPT1:	BLOCK	1			;Duplicate of ALSPTR

TEMP:	BLOCK	1			;Temporary storage
SAVEAC:	BLOCK	HIAC+1			;Place to save the accumulators
	SAVEF=SAVEAC+F
	SAVET1=SAVEAC+T1
	SAVET2=SAVEAC+T2
	SAVET4=SAVEAC+T4

IFE FORTRA,<IFE PSECTN,<	RELOC	>>	;Back to HISEG

LITS:	END
   YQ