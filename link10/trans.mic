;       SEARCH

;SEARCH: IF (INV AND 1)=0 THEN DO;
SEARCH: JSR     SETROM
        LDA     #1
        AND     INV
        BNE     SHELDO1
;     PWDNO=0;
        STA     PWDNO
        STA     PWDNO+1
;     BKTFLG=1;
        LDA     #BKTFLG
        ORA     INV
        STA     INV
;   ELSEDO;
        BNE     SHEIF1  ; ALWAYS BRANCH
SHELDO1 EQU     .
;     PWDNO=PWDNO+1
        INC     PWDNO
        BNE     .+4
        INC     PWDNO+1
;   ENDIF;
SHEIF1  EQU     .
;   IF NFRZ=0 THEN GOTO FOUND;
        LDA     NFRZ
        BNE     .+5
        JMP     FOUND
;   CALL STPWD;
        JSR     STPWD
;   DO FOREVER; /* FOR EACH BUCKET */
SHDO1   EQU     .
;     ROMPTR=QBKTMSK+ROMORG; BKMASK=ROMCH;
;     DO FOREVER; /* FOR EACH WORD */
SHDO2   EQU     .
;       IF (PWDNO AND BKMASK)=0 THEN CALL STPWD;
        LDA     PWDNO
        AND     BKMASK
        BNE     SHEIF5
        JSR     STPWD
SHEIF5  EQU     .
;       NC=1;
        LDA     #1
        STA     NC
;       DO FOREVER;  /* FOR EACH CHARACTER */
SHDO3   EQU     .
;         IF (INV AND SCHXM)=0
;           AND NC-1=NFRZ
;           AND CODON=EWDCH THEN DO;
        LDA     #SCHXM
        AND     INV
        BNE     SHEIF6
        LDX     NC
        DEX
        CPX     NFRZ
        BNE     SHEIF6
        LDA     CODON
        CMP     #EWDCH
        BNE     SHEIF6
;           NC=NC-1;  GOTO FOUND;
        STX     NC
        JMP     FOUND
;         ENDIF;
SHEIF6  EQU     .
;         IF (CODON<DSPCH(FSCP+NC-1))
;           OR ((CODON=EWDCH) AND (NC>1)) THEN DO;
        LDA     FSCP
        CLC
        ADC     NC
        TAX
        LDA     CODON
        CMP     DBUF-1,X
        BMI     SHIF7A
        CMP     #EWDCH
        BNE     SHELIF7
        LDA     NC
        CMP     #2
        BMI     SHELIF7
SHIF7A  EQU     .
;           IF BKTFLG<>0 THEN GOTO NXTBK;
        LDA     #BKTFLG
        BIT     INV
        BEQ     .+5
        JMP     NXTBK
;           DO WHILE CODON<>EWDCH; CALL DCODE; ENDWHILE;
STDO1:  LDA     CODON
        CMP     #EWDCH
        BEQ     STEDO1
        JSR     DCODE
        JMP     STDO1
STEDO1  EQU     .
;           NC=1; NCX=0; CALL DCODE;
        LDX     #1
        STX     NC
        DEX
        STX     NCX
SHDO4X: JSR     DCODE
;           DO WHILE NCX<NC;  CALL DCODE;  ENDWHILE;
        LDA     NCX
        CMP     NC
        BMI     SHDO4X
;           PWDNO=PWDNO+1;  GOTO NXTWD;
        INC     PWDNO
        BNE     .+4
        INC     PWDNO+1
        JMP     SHDO2   ; (NXTWD)
;         ELSEIF (CODON>DSPCH(FSCP+NC-1))
;           OR (NC>NFRZ) THEN DO;
SHELIF7: LDA    DBUF-1,X
        CMP     CODON
        BMI     SHIF7B
        LDA     NFRZ
        CMP     NC
        BPL     SHEIF7
SHIF7B  EQU     .
;           IF (BKTFLG=0) OR (PWDNO=0) THEN GOTO ENDD;
        LDA     #BKTFLG
        AND     INV
        BEQ     ENDD
        LDA     PWDNO
        BNE     SHEIF8
        LDA     PWDNO+1
        BEQ     ENDD
SHEIF8  EQU     .
;           PWDNO=PWDNO-(BKMASK+1);
SHIF7X: LDA     PWDNO
        CLC
        SBC     BKMASK
        STA     PWDNO
        BCS     .+4
        DEC     PWDNO+1
;           BKTFLG=0;  GOTO LSTBK;
        LDA     #255-BKTFLG
        AND     INV
        STA     INV
        JMP     LSTBK
;         ENDIF;
SHEIF7  EQU     .
;         IF (INV AND SCHIM)<>0
;           AND NC=NFRZ THEN DO;
        LDA     #SCHIM
        AND     INV
        BEQ     SHEIF10
        LDA     NC
        CMP     NFRZ
        BNE     SHEIF10
;           IF BKTFLG=0 OR PWDNO=0 THEN GOTO FOUND;
;           PWDNO=PWDNO-(BKMASK+1); BKTFLG=0; GOTO LSTBK;
        LDA     #BKTFLG
        BIT     INV
        BEQ     FOUND
        LDA     PWDNO
        BNE     SHEIF11
        LDA     PWDNO+1
        BEQ     FOUND
        BNE     SHIF7X
SHEIF11 EQU     SHIF7X
;         ENDIF;
SHEIF10 EQU     .
;         CALL GNI;
        JSR     GNI
;       ENDFOR;
SHEDO3: JMP     SHDO3
;     ENDWHILE;   /* NXTWD */
;NXTBK: PWDNO=PWDNO+BKMASK+1;
NXTBK:  LDA     PWDNO
        SEC
        ADC     BKMASK
        STA     PWDNO
        BCC     .+4
        INC     PWDNO+1
;LSTBK: ENDWHILE;
LSTBK:  JMP     SHDO1
;FOUND: RETURN TRUE;
FOUND:  LDA     #0FFH
        BNE     SRXIT
;ENDD: RETURN FALSE;
ENDD:   LDA     #0
SRXIT:  LDX     PSP
        JMP     DUPX6


;       GNI/DCODE

GNIX:   JSR     GNI
        JMP     NEXT

;GNI: NC=NC+1;
GNI:    INC     NC
;   IF NCX>=NC THEN DO;
        LDA     NCX
        CMP     NC
        BMI     DCODE
;     CODON=PCHAR(NC-1);  RETURN;  ENDIF;
        LDX     NC
        LDA     PCHAR-1,X
        STA     CODON
        RTS

;DCODE: CALL BFETCH(BTNO);
DCODE:  LDX     #BTNO
        JSR     BFETCH
;   ROMPTR=ROMADDR+QHFTAB;
        LDA     ROMADDR+QHFTAB
        EOR     #ROMPAGE
        STA     ROMPTR+1
        LDA     ROMADDR+QHFTAB+1
        STA     ROMPTR
;   FOR X=1 TO TAB;
        LDX     TAB
        BEQ     GEEFO1
GEFO1   EQU     .
;     ROMPTR=ROMPTR+ROMCH;
        LDY     #0
        LDA     (ROMPTR),Y
        CLC
        ADC     ROMPTR
        STA     ROMPTR
        BCC     .+4
        INC     ROMPTR+1
;   ENDFOR;
        DEX
        BNE     GEFO1
GEEFO1  EQU     .
;   ROMPTR=ROMPTR+1; MASK=ROMCH; CODON=0;
        JSR     RDROM
        JSR     RDROM
        STA     MASK
        STY     CODON   ; Y=0 FROM RDROM
;   DO FOREVER; W0=ROMCH; ROMPTR=ROMPTR+1;
DCDO1:  JSR     RDROM
        STA     W0
;     IF W0<0 THEN DO;  MASK=SHR(MASK,1) OR 80H;
        BPL     DCEIF1A
        SEC
        ROR     MASK
;       IF W0=0FFH THEN GOTO DCDO1;
        INX             ; X=ROMCH FROM RDROM
        BEQ     DCDO1
;     ENDIF;
DCEIF1A EQU     .
;     IF (FBYTE AND MASK)<>CODON THEN DO;
        LDA     MASK
        AND     FBYTE
        CMP     CODON
        BEQ     DCELIF1
;       CODON=CODON-MASK;
        LDA     CODON
        SEC
        SBC     MASK
        STA     CODON
;     ELSEDO;
        JMP     DCDO1
DCELIF1 EQU     .
;       CODON=(W0 AND 7FH);
        LDA     W0
        AND     #7FH
        STA     CODON
;       DO WHILE MASK<>0; BTNO=BTNO+1; MASK=SHL(MASK,1); ENDWHILE;
PKDO1:  INC     BTNO
        BNE     .+4
        INC     BTNO+1
        ASL     MASK
        BNE     PKDO1
; /* NOW CODON CONTAINS HUFFMAN TABLE ENTRY */
;       TYPE=0;
        STY     TYPE    ; Y=0 FROM RDROM
;       IF CODON=7EH THEN DO;
        LDA     CODON
        CMP     #7EH
        BNE     DCELIF2X
;         IF TAB=ATAB THEN NCX=0;
        LDA     TAB
        EOR     #ATAB
        BNE     DCEIF2X
        STA     NCX
DCEIF2X EQU     .
;         TAB=DTAB;  GOTO DCODE;
        LDA     #DTAB
        STA     TAB
        JMP     DCODE
;       ELSEIF TAB=ATAB THEN DO;
DCELIF2X: LDA   TAB
        CMP     #ATAB
        BNE     DCELIF2
;         NCX=1+(SHR(CODON,4) AND 07H);
        LDA     CODON
        LSRA
        LSRA
        LSRA
        LSRA
        AND     #7
        TAX
        INX
        STX     NCX
;         PCHAR(NCX-1)=PCHAR(NCX-1)+(CODON AND 0FH);
        LDA     CODON
        AND     #0FH
        CLC
        ADC     PCHAR-1,X
        STA     PCHAR-1,X
;         W0=PCHAR(NCX-1); CODON=PCHAR(NC-1); GOTO CLASS;
        STA     W0
        LDX     NC
        LDA     PCHAR-1,X
        STA     CODON
        JMP     CLASS
;       ELSEIF TAB=VTAB THEN DO;
DCELIF2: CMP    #VTAB
        BNE     DCELIF2A
;         TAB=ATAB; TYPE=CODON; CODON=EWDCH;
        LDA     #ATAB
        STA     TAB
        LDA     CODON
        STA     TYPE
        LDA     #EWDCH
        STA     CODON
;       ELSEDO;
        RTS
DCELIF2A EQU    .
;         NCX=NCX+1;
        INC     NCX
;         IF LAST(PCHAR)>=NCX THEN PCHAR(NCX-1)=CODON;
        LDA     CODON
        LDX     NCX
        CPX     #PCHARL+1
        BPL     DCEIF3
        STA     PCHAR-1,X
DCEIF3  EQU     .
;         W0=CODON;
        STA     W0
;CLASS:   IF W0=EWDCH THEN DO; TAB=ROMADDR+QFTAB;
CLASS:  LDA     W0
        CMP     #EWDCH
        BNE     CLEL1
        LDA     ROMADDR+QFTAB
        STA     TAB
;         ELSEDO;
        JMP     CLEIF1
CLEL1   EQU     .
;           CLTAB=UNFLOP(QHFCTAB); MASK=QCLTMSK;
        LDA     ROMADDR+QHFCTAB
        STA     CLTAB+1
        LDA     ROMADDR+QHFCTAB+1
        STA     CLTAB
        LDA     ROMADDR+QCLTMSK
        STA     MASK
;           DO WHILE MASK<>0;
CLLP1   EQU     .
;             CLTAB=CLTAB+W0-BLANKCH; MASK=SHR(MASK,1);
        LDA     W0
        SEC
        SBC     #' '
        CLC
        ADC     CLTAB
        STA     CLTAB
        BCC     .+4
        INC     CLTAB+1
        LSR     MASK
;           ENDWHILE;
        BNE     CLLP1
;           CALL BFETCH(CLTAB);
        LDX     #CLTAB
        JSR     BFETCH
;           TAB=(FBYTE AND CT)+2
        AND     ROMADDR+QCLTMSK
        CLC
        ADC     #2
        STA     TAB
;         ENDIF;
CLEIF1  EQU     .
;         IF TAB=VTAB THEN GOTO DCODE;
        LDA     TAB
        CMP     #VTAB
        BNE     .+5
        JMP     DCODE
;       ENDIF;
DCEIF2  EQU     .
;       RETURN;
        RTS


;       MAPH AND MAPL

MAPH:   LDA     PSTK,X
        STA     CROM
        JSR     SETROM
        LDX     PSP
        DEX
        LDA     PSTK,X
        STA     WDNO+1
        DEX
        LDA     PSTK,X
        STA     WDNO
        DEX
        LDA     PSTK,X
        STA     INV
        LDA     #0FFH
        STA     PSTK,X
        STX     PSP
;   IF WDNO GE QNROMWDS THEN RETURN FALSE;
        LDA     WDNO+1
        CMP     ROMADDR+QNROMWDS
        BMI     MHEIF1
        BNE     MHIF1A
        LDA     WDNO
        CMP     ROMADDR+QNROMWDS+1
        BCC     MHEIF1
MHIF1A: LDA     #0
        STA     PSTK,X
        JMP     NEXT
MHEIF1  EQU     .
;   CALL GLCROM;  MAPT=UNFLOP(3);
        JSR     GLCROM
        LDY     #3
        LDA     (ROMPTR),Y
        STA     MAPT+1
        INY
        LDA     (ROMPTR),Y
        STA     MAPT
;   (W0,W1)=UNFLOP(QMASK); MAPT(LO)=MAPT(LO) XOR ((W0,W1));
        LDA     ROMADDR+QMASK
        ORA     #INTPAGE
        STA     W1
        LDA     ROMADDR+QMASK+1
        STA     W0
        LDY     #0
        LDA     (W0),Y
        EOR     MAPT
        STA     MAPT
;   IF MAPT=0 THEN DO;
        ORA     MAPT+1
        BNE     MHEL2
;     IF INV<>0 THEN DO;  PWDNO=WDNO;
        LDA     INV
        BEQ     MHEL3
        LDA     WDNO
        STA     PWDNO
        LDA     WDNO+1
        STA     PWDNO+1
;     ELSEDO;  WDNO=PWDNO;
        JMP     MHEIF3
MHEL3:  LDA     PWDNO
        STA     WDNO
        LDA     PWDNO+1
        STA     WDNO+1
MHEIF3  EQU     .
;   ELSEDO;
        JMP     NEXT
MHEL2   EQU     .

;       MAPL
;   BIT=1; OFFSET=0; NMWORDS=UNFLOP(QNROMWDS);
        LDX     #1
        STX     MBIT
        DEX
        STX     MBIT+1
        STX     OFFSET
        STX     OFFSET+1
        LDA     ROMADDR+QNROMWDS
        STA     NMWORDS+1
        LDA     ROMADDR+QNROMWDS+1
        STA     NMWORDS
;TAG1: CNT=(ROMADDR+QL2NWDS);
TAG1:   LDA     ROMADDR+QL2NWDS
        STA     CNT
;TAG2: IF INV AND PASS2 <>0 THEN DO;
TAG2:   LDA     #PASS2
        AND     INV
        BEQ     NMEIF4
;        BIT=SHR(BIT,1);
        LSR     MBIT+1
        ROR     MBIT
;        OFFSET=OFFSET-NMWORDS+BIT;
        LDX     #OFFSET
        LDY     #NMWORDS
        JSR     SUB2
        LDY     #MBIT
        JSR     ADD2
;      ENDIF;
NMEIF4  EQU     .
;      TEMPB=0;
        LDX     #0
        LDY     #0
;      IF (INV AND FROPOSWD)<>0 THEN TEMPB=BIT;
        LDA     INV
        AND     #FROPOSWD
        BEQ     NMEIF5
        LDX     MBIT
        LDY     MBIT+1
NMEIF5  EQU     .
        STX     TEMPB
        STY     TEMPB+1
;      IF (WDNO OR BIT)+TEMPB<NMWORDS THEN DO;
        LDA     WDNO
        ORA     MBIT
        CLC
        ADC     TEMPB
        TAX
        LDA     WDNO+1
        ORA     MBIT+1
        ADC     TEMPB+1
        CMP     NMWORDS+1
        BMI     NMIF6A
        BNE     NMEIF6
        CPX     NMWORDS
        BCS     NMEIF6
NMIF6A  EQU     .
;        JX=((SHR(WDNO,1)) AND (-BIT))
;          +(WDNO AND (BIT-1));
        LDX     #MBIT
        JSR     TWOCMP  ; W0,W1=-BIT
        LDA     WDNO+1
        LSRA
        AND     W1
        STA     JX+1
        LDA     WDNO
        RORA
        AND     W0
        STA     JX      ; JX=SHR(WDNO,1)AND(-BIT)
        LDY     MBIT+1
        LDX     MBIT
        BNE     .+3
        DEY
        DEX
        TXA
        AND     WDNO
        CLC
        ADC     JX
        STA     JX
        TYA
        AND     WDNO+1
        ADC     JX+1
        STA     JX+1
;        IF (INV AND FROPOSWD)=0 THEN JX=NMWORDS-(BIT+1+JX);
        LDA     #FROPOSWD
        AND     INV
        BNE     NMEIF7
        LDX     #JX
        LDY     #MBIT
        JSR     ADD2
        INC     JX
        BNE     .+4
        INC     JX+1
        JSR     TWOCMP
        LDY     #NMWORDS
        JSR     ADD2
NMEIF7  EQU     .
;        BTNO=SHL(MAPT,3)+JX+OFFSET;
        LDA     MAPT+1
        STA     BTNO+1
        LDA     MAPT
        LDY     #3
NMLP1:  ASLA
        ROL     BTNO+1
        DEY
        BNE     NMLP1
        STA     BTNO
        LDX     #BTNO
        LDY     #JX
        JSR     ADD2
        LDY     #OFFSET
        JSR     ADD2
;        CALL BFETCH(BTNO);
        JSR     BFETCH
;        IF FBYTE<0 THEN WDNO=WDNO XOR BIT;
        BPL     NMEIF8
        LDA     WDNO
        EOR     MBIT
        STA     WDNO
        LDA     WDNO+1
        EOR     MBIT+1
        STA     WDNO+1
NMEIF8  EQU     .
;      ENDIF;
NMEIF6  EQU     .
;      IF (INV AND PASS2)=0 THEN DO;
        LDA     #PASS2
        AND     INV
        BNE     NMEIF9
;        OFFSET=OFFSET+NMWORDS-BIT;
        LDX     #OFFSET
        LDY     #NMWORDS
        JSR     ADD2
        LDY     #MBIT
        JSR     SUB2
;        BIT=SHL(BIT,1);
        ASL     MBIT
        ROL     MBIT+1
;      ENDIF;
NMEIF9  EQU     .
;      CNT=CNT-1;
        DEC     CNT
;      IF CNT<>0 THEN GOTO TAG2;
        BEQ     .+5
        JMP     TAG2
;      INV=INV XOR (PASS2+FROPOSWD);
        LDA     #(PASS2+FROPOSWD)
        EOR     INV
        STA     INV
;      IF INV AND PASS2 <> 0 THEN GOTO TAG1;
        AND     #PASS2
        BEQ     .+5
        JMP     TAG1
;      IF INV AND FROPOSWD = 0 THEN PWDNO=WDNO;
        LDA     INV
        AND     #FROPOSWD
        BNE     NMEIF12
        LDA     WDNO
        STA     PWDNO
        LDA     WDNO+1
        STA     PWDNO+1
NMEIF12 EQU     .
        JMP     NEXT

;       STPWD

STPWDX: JSR     STPWD
        JMP     NEXT

;       BFETCH

;BFETCH: ROMPTR=SHR(X,3)+ROMADDR;
BFETCH: LDA     0,X
        STA     ROMPTR
        LDA     1,X
        LDY     #3
BFLP1:  LSRA
        ROR     ROMPTR
        DEY
        BNE     BFLP1
        EOR     #ROMPAGE
        STA     ROMPTR+1
;        FBYTE=(ROMPTR);
        LDA     (ROMPTR),Y
        STA     FBYTE
;        IF (X) AND 7 <> 0 THEN DO;
        LDA     #7
        AND     0,X
        BEQ     BFEXIT
;          FBYTE=SHL((ROMPTR,Y),(A));
        TAX
        INY
        LDA     (ROMPTR),Y
BFLP2:  ROLA
        ROL     FBYTE
        DEX
        BNE     BFLP2
;        ENDIF;
BFEXIT: LDA     FBYTE
        RTS

;GLCROM: ROMPTR=(ROMADDR+QL1TAB+CONSBRM*7); RETURN;
GLCROM: LDA     CROM
        AND     #1FH
        STA     ROMPTR+1        ; SAVE CONSBRM
        ASLA
        STA     ROMPTR  ; SAVE CONSBRM*2
        ASLA
        CLC
        ADC     ROMPTR+1 ; CONSBRM*5
        ADC     ROMPTR  ; CONSBRM*7
        ADC     #QL1TAB
        STA     ROMPTR
        LDA     #ROMPAGE
        ADC     #0
        STA     ROMPTR+1
        RTS

;STPWD: CALL GLCROM; ROMPTR=UNFLOP(1);
STPWD:  JSR     GLCROM
        LDY     #1
        LDA     (ROMPTR),Y
        EOR     #ROMPAGE
        TAX
        INY
        LDA     (ROMPTR),Y
        STA     ROMPTR
        STX     ROMPTR+1
;      W0,W1=PWDNO;
        LDA     PWDNO
        STA     W0
        LDA     PWDNO+1
        STA     W1
;      ACC=BKMASK; DO WHILE ACC<>0;
        LDA     BKMASK
        BEQ     SWEDO1
SWDO1   EQU     .
;        (W0,W1)=SHR((W0,W1),1)
        LSR     W1
        ROR     W0
        LSRA
;      ENDWHILE;
        BNE     SWDO1
SWEDO1  EQU     .
;      ROMPTR=ROMPTR+(W0,W1)*2
        LDX     #ROMPTR
        LDY     #W0
        JSR     ADD2
        JSR     ADD2
;      BTNO=UNFLOP;
        JSR     RDROM
        STA     BTNO+1
        JSR     RDROM
        STA     BTNO
;      NCX=0; NC=1; TAB=DTAB; CALL DCODE;
        STY     NCX
        INY
        STY     NC
        LDA     #DTAB
        STA     TAB
        JSR     DCODE
;      W3=(LOW(PWDNO) AND BKMASK);
        LDA     BKMASK
        AND     PWDNO
        STA     W3
;      FOR BK=1 TO W3;
        BEQ     SWEFO1
SWFO1   EQU     .
;        DO WHILE CODON<>EWDCH; CALL DCODE; ENDWHILE;
STPDO1: LDA     CODON
        CMP     #EWDCH
        BEQ     STPEDO1
        JSR     DCODE
        JMP     STPDO1
STPEDO1 EQU     .
;        NC=1; NCX=0; CALL DCODE;
        LDY     #1
        STY     NC
        DEY
        STY     NCX
        JSR     DCODE
;      ENDFOR;
        DEC     W3
        BNE     SWFO1
SWEFO1: RTS             ; RETURN

 