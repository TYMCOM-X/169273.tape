SED.DOC						Updated 12-Jan-84


              SED: a CRT editor for TOPS-10 and TOPS-20
            Written and documented by A Christopher Hall
                             April 1980


                   HISTORICAL NOTE AND COMMERCIAL

     The first successful full-screen text editor was  developed  in
1967  at  the  Institute for Defense Analyses by Edgar T.  Irons and
Franz M.  Djorup for use on the CDC-6600 computer.  It was the first
editor to use the idea of function keys as editor commands.

     The Yale editor, "E" was designed in 1970 by  Irons  and  Peter
Weiner  to  be  an  improvement  on  the  IDA editor, running on the
PDP-10.  It demonstrated  the  practicality  of  screen  editors  on
terminals of speeds as low as 2400 baud.

     The Rand editor, "re" was conceived in 1974  by  Peter  Weiner,
based  on the Yale editor.  It was initially designed and written by
Walter Bilofsky, and modified by both  Weiner  and  Bilofsky  as  it
evolved.   The  Rand  editor is used on PDP-11 computers running the
UNIX operating system, and is extremely powerful,  although  limited
to a small number of terminals.

     The author has worked with the Yale editor and the Rand  editor
for  the  past several years, and has made a number of modifications
and improvements to a version of the former.  The  editor  described
in  this document was initially developed by the author to be a more
tightly-written and better documented program than the Yale  editor,
but it has evolved into an entity in its own right.  It incorporates
useful features from both the Rand editor and the Yale editor,  plus
several  new ideas.  It runs on the PDP-10, under either the TOPS-10
or TOPS-20 monitor (in native mode).

     The new editor, SED, has a number of features which distinguish
it  from its predecessors.  It is the first full-screen editor which
is easily adaptable to a wide range of terminals.  Also, it exploits
more  fully  the  capabilities  of  the  terminal,  ie,  it lets the
terminal do the work whenever possible (and it knows whether or  not
the  terminal  is equipped to do the job).  The editor has the usual
set of commands:  cursor movers, display window movers, inserts  and
deletes,  searches,  and line copiers;  all of which cause immediate
changes on the CRT screen when they are invoked.  In addition, there
are  a  number  of shortcuts which the sophisticated user can use to
save time and typing.

     The editor is documented, with a tutorial, this user's  manual,
an  installation  guide,  copious  comments  within the program, and
software history files and suchlike for the serious hacker.



                         INTRODUCTION TO SED

     This document is intended to describe the use of the SED and to
lead  you  by the hand through some of the commonly used operations.
Most of the information here applies to all terminals;  however, the
locations  of  some  of  the  commands  may  change from terminal to
terminal.    See   the   appendices   for   the   terminal-dependent
information.

     Commands to the editor  are  given  by  holding  down  the  key
labeled  'CNTR'  or 'CTRL' and typing a letter.  Editor commands are
notated by being in capital letters.  For example, the command  used
to  advance 1 page (one screenful) in a file is given by holding the
'CONTROL' key and typing the letter 'Y';  it is notated ROLL FORWARD
PAGES or ^Y.  Think of the 'CONTROL' key as a shift key.



                             RUNNING SED

     There are three ways of running the editor.  At  monitor  level
type

        .SED                  or
        .SED FILE.EXT         or
        .SED FILE.EXT=


     The first way will set up for editing the file  (and  alternate
file*)  which  were edited last time.  The editor will return you to
the same position in the file that you were last.  If you are  using
the  editor for the first time a cheery welcome message will appear.
You can then use the SET-FILE command (described  below)  to  get  a
file to edit.

     If you type the second form the editor  will  put  you  at  the
beginning  of  FILE.EXT  (or  whatever file you give).  The file you
edited last time will be the alternate file.  If the file  given  in
the  run command does not exist the editor will tell you so and give
you last time's file or the cheery message.

     If you use the third form the editor will do as  above,  except
that if the file does not exist the editor will create it.





--------------------

* The editor allows you  to  toggle  between  any  two  files.   The
alternate  file is the one which is not currently being edited.  See
the SET-FILE command.

                               - 1 -



                             THE CURSOR

     Run the editor and get the cheery message (don't  give  a  file
name).   There will be a blinking dash in the upper left-hand corner
of the screen;  that dash is called the cursor,  and  it  represents
your position in the file.

     You cannot do much with the cheery message, so why not create a
new file and play around with the editor?  Type the following:

             ENTER A B C D = ^B

one key after another (with no spaces in between).  The editor  will
create a file named ABCD containing the obvious message "; This file
is ABCD." Note that the cursor is still at the  upper  left  of  the
screen.

     If you type a character it will appear where the cursor is  and
the  cursor  will  move  one space to the right.  Typing a character
inserts that character in the file at the position indicated by  the
cursor, or replaces the one at the cursor position.

     A carriage return will put the cursor at the start of the  next
line  on  the  screen, but will not affect the contents of the file.
There are other keys that simply move the cursor  around:   the  key
off to the right labeled HOME and the four arrow keys near it (which
move the cursor in the indicated directions), TAB (^I)  and  BACKTAB
(^U) Linefeed is NOT merely a cursor mover, however (see the section
on CLEAR-LINE).

     Type something.  If you make a mistake use the CURSOR-LEFT  key
to  back  up to the bad character, and type the correct one over it.
If you put in one character too many, position the cursor to it  and
type  DELETE-SPACES (^L).  There is a whole spectrum of commands for
inserting and deleting characters and lines of text,  moving  around
within the file, and other useful things.  Read on.


















                               - 2 -



                      FORMAT OF EDITOR COMMANDS

     The editor does not exist by cursor movements alone.  There  is
a whole raft of commands, which have the following form:

           COMMAND
     or    ENTER parameter COMMAND
     or    ENTER COMMAND                  (TOKEN FORMAT)
     or    ENTER cursor movement COMMAND


     The ENTER key is  the  key  that  is  labeled  "ENTER"  on  the
numeric keypad (off to the right of the main keyboard).
A parameter is a piece of information that is  used  by  a  command.
For  instance,  if  you  wish  to  insert  blank lines in a file the
parameter would be the number of lines you  want  to  insert.   Most
commands  have default parameters;  that is, if you simply issue the
command without specifying parameters the editor would use a  preset
value  for  each  parameter.  INSERT-LINES (= ^D) will insert 1 line
until you tell it otherwise, which you do by using the  second  form
of command.  If you say

        ENTER 5 INSERT-LINES

the editor will insert 5 lines.  From that point on whenever you say

        INSERT-LINES

the editor will insert 5 lines, until you change it again.

     Certain pairs of commands share parameters.  If you say

        ENTER 5 INSERT-LINES

and later say

        DELETE-LINES

the editor will delete 5 lines because it shares its parameter  with
INSERT-LINES (DELETE-LINES = ^F).

     There are two other command  formats  given  above.   Both  are
shortcuts  for  the  advanced  user, so if you are just starting out
don't worry about them for now.

     For the experienced or the curious,  tokens  work  as  follows:
the  format  "ENTER  COMMAND"  tells the editor either to look for a
"token" (see below) or to do something special, the nature of  which
is  dependent  on the command.  For example, ENTER PERCENT will move
to the end of the file;  it's a shorthand way of  saying  ENTER  100
PERCENT.  Also, ENTER PUT will insert text which has previously been
deleted into the file;  it  is  the  only  way  of  recovering  that
information.   The  special  functions  of  this  command format are

                               - 3 -



described in detail with each command.

     A token can be thought of as "the word at the cursor position."
It's  really  more  complicated  than  that,  however.   The  formal
definition is:  the string of  characters  starting  at  the  cursor
location  and  extending  to  the  first  nonalphabetic,  nonnumeric
character.  Thus the location of the cursor  is  important,  and  it
need not be at the start of an actual word.  Sometimes the editor is
interested in the token itself, for instance for the search command;
sometimes it is only interested in the size of the token, like for a
DELETE-SPACES.

     To make matters worse,  the  token  for  the  SET-FILE  (=  ^B)
command  is  different.   When doing a SET-FILE, which sets up a new
file for editing, the parameter is expected to be a filespec.  Since
filespecs  usually  consist of at least a name and an extension, the
usual token will not work, since it will  recognize  only  the  file
name  (and stop on the ".").  So for the SET-FILE command a token is
defined as extending from the cursor position  to  the  next  space,
tab,  comma,  or  control  character.   All other characters will be
legal token characters.

     Tokens, of course, don't  give  you  anything  you  don't  have
already;   they  just  save  a  lot  of typing.  If all the above is
confusing, forget about it for now.

     The last command format is cursor movement.  With  this  format
you  type  ENTER,  move  the  cursor  around using any of the cursor
movement commands, then type a  non-cursor  movement  command.   The
cursor  is  on  a  different  row  or column, or both, from where it
started.  The command will take as its parameters  those  difference
in  rows or columns.  Often both changes are useful;  you can delete
three lines and the first 8 spaces of the next line by typing

        ENTER RETURN RETURN RETURN TAB DELETE-LINES

Cursor movement is not meaningful to every command, however, and  an
error  message  will  result  from  using it at the wrong time.  But
usually it is used for what you think it ought to  be,  and  illegal
when you can't see any reason for doing it.

     A final point:  an entire parameter can be canceled  by  typing
RESET  (which  is  the editor's name for the RUBOUT, or DELETE, key.
The latest character of the  parameter  can  be  deleted  by  typing
CURSOR-LEFT.









                               - 4 -



                       COMMANDS TO THE EDITOR

     This section describes all the commands to the editor,  telling
what  they  are,  how  they  are  (normally)  invoked, what types of
parameters they accept, and any special attributes they have.  I say
normally  invoked  because  some  terminals  may  have some commands
re-defined in  order  to  work  properly.   See  the  appendices  on
terminal-dependent information to find out these differences.

     Each entry in this section describes one  command,  or  two  if
they  are related and share a parameter value.  The structure of the
entries in this sections is:

COMMAND NAME(S)                 CONTROL CHAR(S) WHICH INVOKE

        STARTING NOMINAL
        TYPE OF PARAMETER EXPECTED
        CURSOR MOVEMENT DEFINED (NONE, ROW, COLUMN, BOTH)
        TOKEN (NONE, TOKEN, OR SPECIAL)

DESCRIPTION OF THE ACTION TAKEN BY THE COMMAND
EXAMPLE: A LINE OR TWO BEFORE AND AFTER EDITING


                BREAKDOWN OF COMMANDS, BY COMPLEXITY

     You do not need  to  learn  all  of  the  nuances  of  all  the
commands.   Here is a list of which commands are basic and necessary
and  which  are  luxuries.   See  the  indexes  to  find  where  the
descriptions are located.

Basic     CURSOR MOVERS   (LEFT, RIGHT, UP, DOWN, HOME,
Commands                   RETURN, TAB, BACKTAB)
          PARAMETERER     (ENTER-PARAMETER)
          SCREEN ROLLERS  (ROLL-FORWARD/BACKWARD-LINES/PAGES)
          SPACE CHANGERS  (INSERT/DELETE-SPACES/LINES)
          FILE SETTERS    (SET-FILE, EXIT, ABORT)

Almost    TEXT MOVERS     (PICK, PUT, DELETE-LINES)
Basic     SEARCHERS       (SEARCH-FORWARD, SEARCH-BACKWARD)
          INSERT MODE     (INSERT-MODE, DELETE-CHARACTER)
          TAB             (REAL-TAB)

Advanced  EASY ENTER      (ENTER WITH TOKEN OR CURSOR MOVEMENT)
Commands  QUICK MOVER     (PERCENT-GOTO)
          STATUS & SWITCH (SWITCH)
          CLEAR NEXT LINE (CLEAR-LINE)
          WINDOW MOVERS   (SLIDE-LEFT, SLIDE-RIGHT)
          CONTROL CHAR.   (ENTER-CONTROL-CHARACTER)
          TYPING SAVER    (RECALL)
          MARK            (MARK)

Expert    EXECUTE         (EXECUTE)

                               - 5 -



***************************************************************************
ROLL-BACK-PAGES - ROLL-FORWARD-PAGES            ^Q ^Y

        Starting nominal: 1 page
        Parameter: number (pages to roll)
        Cursor move: illegal
        Token: meaningless


     Advances or backs up the given number of  pages  (screens-full)
of  the  file.  Won't move before the start or beyond the end of the
file:  use INSERT-LINES to extend file, not one of  the  rolls.   Or
just type on the last line on the screen.









***************************************************************************
ROLL-BACK-LINES - ROLL-FORWARD-LINES            ^W ^T

        Starting nominal: 1/3 page
        Parameter: number (lines to roll)
        Cursor move: lines only; spaces ignored
        Token: causes scanning to begin


     Same as above, but movement is in terms of lines.

     Scanning is started by typing ENTER ROLL-BACK (or FORWARD).   A
roll  will  occur (using the current nominal), the editor will delay
for a short time, then it will roll again.  This continues until the
start  or  end  of  the  file  is  reached,  or  until  you type any
character.  When scanning stops the cursor is left in the middle  of
the screen to indicate that scanning is over.















                               - 6 -



***************************************************************************
PERCENT-GOTO                                    ^P

        Starting nominal: 0 percent
        Parameter: number between 0 and 100 (percent distance into file)
        Cursor move: illegal
        Token: acts same as 100 percent


     Displays the file starting the given percent into  it.   Typing
ENTER  50  PERCENT-GOTO  will  display  the  file  starting  mid-way
through.  ENTER 100 PERCENT-GOTO (or just ENTER  PERCENT-GOTO)  will
display  the  last several lines of the file, with the cursor at the
end of the last line.

     PERCENT-GOTO is very much faster than a ROLL command, since  it
does  not  count  lines  of  text.   It can also be used to speed up
searching, by GOTOing a place near where you expect a match and then
doing the search.





***************************************************************************
SLIDE-LEFT - SLIDE-RIGHT                        <8> <9>

        Starting nominal: 8 spaces
        Parameter: number (spaces to slide)
        Cursor move: spaces only; lines ignored
        Token: takes length of token


     Moves screen  window  left  or  right  within  the  file.   For
example, after a nominal SLIDE-RIGHT, the first 8 characters of each
line will not appear on the screen (they will be off the left of the
window),  and  each  line  displayed will show character positions 9
through 88.

     The window can be slid right an unlimited amount, but it cannot
be  slid  left past the left margin.  The cursor will always stay on
the line it is on at the start of the slide;  if  the  character  it
pointed  to  is out of the window the cursor will point to the first
character on that line that is on the screen.










                               - 7 -



***************************************************************************
INSERT-LINES - DELETE-LINES                   ^D ^F

        Starting nominal: 1 line
        Parameter: number (lines to insert/delete)
        Cursor move: lines; spaces counted from left margin
        Token: takes size of token, plus 1


     INSERT-LINES adds the given  number  of  lines  at  the  CURSOR
POSITION  (the  given  number  of spaces are also added, if they are
asked for by a cursor move.  Thus if the cursor is on line 5  column
8, and you type ENTER CURSOR-DOWN INSERT-LINES;  then one line and 8
spaces will be added to the file.  The result will be to split  line
5,  moving  everything  after  the cursor one line down.  If, in the
same position, you type ENTER  CARRIAGE-RETURN  INSERT-LINES;   then
one  line  (and  no spaces) will be added, and the result will be to
split the line and put the stuff after the cursor on the next  line,
starting  at  the left margin.  That last command could also be made
by typing ENTER 1 INSERT-LINES.

     DELETE-LINES removes lines (and spaces, using cursor  movement)
analagously.  The deleted material is not thrown away, but is stored
in the DELETE BUFFER.  It can be replaced in the file using the  PUT
command.  So if you DELETE-LINES accidentally, type ENTER PUT to get
the lines back.

     Deletes of any size are permitted.  However, if more than about
50 lines are deleted, the delete buffer will overflow and it will be
written out  on  disk.   Everything  will  work ally,  although
perhaps  a  little  more slowly.  However, there will be a new file,
nnnCLS.TMP (where nnn is your job number)  sitting  around  in  your
area.

     Overflowing the delete buffer has its  advantages.   nnnCLS.TMP
is  just another file, and can be edited the same as any other file.
It will stay around until it is overwritten by another large delete.
Thus  suppose  you  do  a 100-line delete, then a 1-line delete, and
then realizes that part of those 100  lines  should  not  have  been
deleted.   You  cannot  type ENTER PUT to restore those lines, since
what you will get is the single latestly-deleted line.  But you  can
get  into  the nnnCLS.TMP file (using the SET-FILE command), PICK up
the desired lines, return to your original file, and PUT  the  lines
back in.

     Another use of the delete buffer is to split a  file  into  two
pieces  (as long as one piece is large enough to overflow the delete
buffer).  To create two files, one containing the  first  100  lines
and  the  other  the  remainder, go to the beginning of the file and
type ENTER 100  DELETE-LINES.   Then  exit  the  editor  and  rename
nnnCLS.TMP to whatever you want;  it contains the first 100 lines.



                               - 8 -



EXAMPLE: Cursor is on the word "and"; you type ENTER 2 INSERT-LINES

BEFORE: This is the thing of the gig
        and the gig is where it's at

AFTER:  This is the thing of the gig


        and the gig is where it's at

If you then do a DELETE-LINES the two blank lines will  be  removed.
Now  say  the  cursor  is on the "f" of the word "five" and you type
INSERT-LINES:

BEFORE: Pack my box with five dozen liquor jugs.

AFTER:  Pack my box with

        five dozen liquor jugs.

Two blank lines have been inserted at the cursor position.

































                               - 9 -



***************************************************************************
INSERT-SPACES - DELETE-SPACES                   ^K ^L

        Starting nominal: 1 space
        Parameter: number (spaces to insert/delete)
        Cursor move: spaces;
                     change in line causes rectangular insert/delete
        Token: uses size of token, plus 1


     Adds spaces (to add a string, see PUT)  or  deletes  characters
starting at the cursor position.  The deleted stuff is LOST.

EXAMPLE:  The cursor is at "t" of the word "thing";  you type  ENTER
4 INSERT-SPACES:

BEFORE: This is the thing of the gig

AFTER:  This is the     thing of the gig

Then you move to the "o" of "of" and type DELETE-SPACES:

AFTER:  This is the     thing he gig

     A rectangular INSERT-SPACES works as  follows:   say  you  type
ENTER  DOWN  DOWN  RIGHT  RIGHT  RIGHT  INSERT-SPACES.   Your cursor
movement has defined a rectangle  whose  opposite  corners  are  the
starting  and  ending  cursor  positions  (in this case, two rows by
three columns).  That rectangle will be  filled  with  spaces.   For
example,  say  the  cursor starts at the "t" of "thing" and you type
ENTER DOWN DOWN RIGHT RIGHT RIGHT INSERT-SPACES.  The cursor ends at
the "h" of "with".

BEFORE: This is the thing of the gig,
        and the gig is where it's at.
        Pack my box with five dozen liquor jugs.
        The quick brown fox jumped over the lazy dog.

AFTER:  This is the    thing of the gig,
        and the gig    is where it's at.
        Pack my box    with five dozen liquor jugs.
        The quick brown fox jumped over the lazy dog.


     Rectangular DELETE-SPACES works in  a  similar  manner,  except
that  all  the  characters within the rectangle are removed from the
file.

     If you just move the cursor up  or  down,  with  no  change  in
column  position,  you will work with a rectangle whose width is the
same as last time.



                              - 10 -



***************************************************************************
SEARCH-FORWARD - SEARCH-BACK                    ^R ^E

        Starting nominal: none
        Parameter: string (search key)
        Cursor move: spaces (change of lines illegal)
        Token: uses token


     Searches for the given string, from the cursor position to  the
end of the file, or from the cursor position to the beginning of the
file.  When the key is found, a page from the file is displayed with
the  line containing the match one-third of the way down the screen.
If the match is on the page displayed at the start of the search the
cursor simply moves to the first character of the match.

     While the editor is searching the cursor  lives  at  the  upper
left of the screen, to show that it's still working.

     A search can be aborted at any time by typing RUBOUT.  This  is
useful,  for  example,  when your key was erroneously typed in lower
case and the file is  entirely  upper  case.   The  screen  will  be
restored to its pre-search status.

     CONTROL-?  and CONTROL-LEFT-ARROW are wild  search  characters;
they  will  match  any single character in their position.  Thus the
command

        ENTER T H E ^O ? E SEARCH-FORWARD

(see the section on ENTER-CONTROL-CHARACTER to find  out  why  ^O  ?
sets  up  a  CONTROL-?)  will  match  on THESE, THERE, THEME, or THE
ERROR, among other things.

     A useful feature:  ENTER ^O J G I G SEARCH-FORWARD searches for
the next line that begins with GIG.


















                              - 11 -



***************************************************************************
PICK                                            ^V

        Starting nominal: 1 line
        Parameter: number of lines
        Cursor move: lines; spaces counted from left margin
        Token: uses token


     Copies lines and/or part lines from  the  file  into  the  pick
buffer.   The  file is not changed.  Words (instead of lines) can be
PICKed using cursor movement or token picks.

     If a pick of more than 100 lines is done, the pick buffer  will
overflow and be written out on disk.  Everything will work normally;
though.  Picks of any size are permitted.  However, there will be  a
new file, nnnPIK.TMP sitting around on disk.

     The same discussion about overflow of the delete buffer applies
to overflow of the pick buffer.
EXAMPLES:  If the cursor is at the start of the first line of:

        Pack my box with five dozen liquor jugs.
        The quick brown fox jumped over the lazy dog.
        Now is the time for all good people to come
        to the aid of their party.

If you type ENTER 2 PICK you will load  the  pick  buffer  with  the
first  two lines.  If you type ENTER six CURSOR-RIGHTs PICK you will
pick up "Pack my".  If you type ENTER DOWN RIGHT  RIGHT  RIGHT  PICK
you will pick the first line and the "The" of the second line.























                              - 12 -



***************************************************************************
PUT                                             ^G

        Starting nominal: none
        Parameter: string (read into pick buffer)
        Cursor move: spaces (change of lines illegal)
        Token: causes DELETE buffer to be put


     PUT writes material from either the pick buffer or  the  delete
buffer  into  the file, at the cursor location.  The contents of the
buffer is not changed.  The normal use of this command  is  to  PICK
something,  move to a new location, and PUT it by simply typing PUT.
Or DELETE-LINES something, move, and insert it by typing ENTER PUT.

     PUT is also used to insert a  string  directly  at  the  cursor
position.  The string is given as the parameter.  If you type

        ENTER <string> PUT

than <string> will be inserted at the cursor location.   The  string
will  also  be  set  up  in  the  pick buffer, so it can be inserted
somewhere else by simple typing PUT.

     EXAMPLE:  The cursor is at the "t" of the  word  "thing";   you
type  ENTER  RIGHT  RIGHT RIGHT RIGHT RIGHT RIGHT PICK, thus loading
"thing " into the pick buffer using cursor movement.  The cursor  is
still at "thing".  Now you type PUT:

BEFORE: This is the thing of the gig
        and the gig is where it's at

AFTER:  This is the thing thing of the gig
        and the gig is where it's at

Now you do a RETURN UP to get to the beginning of that line and type
DELETE-LINES (with the starting nominal of 1 already set up):

AFTER:  and the gig is where it's at

The deleted line has been loaded into  the  delete  buffer.   Typing
DOWN ENTER PUT restores that line beneath the other one:

AFTER:  and the gig is where it's at
        This is the thing thing of the gig

Now  position  the  cursor  to  the  "w"   of   "where"   and   type
ENTER N O T PUT:

AFTER:  and the gig is NOT where it's at
        This is the thing thing of the gig



                              - 13 -



***************************************************************************
INSERT-MODE                                     <->

                No Parameters


     This command toggles the editor between normal type-in mode and
insert  mode.   In normal mode when you type a character it replaces
the one at the cursor position.  In insert mode the new character is
placed  before  the  one  at  the cursor and the rest of the line is
moved one position to the right.

     If the editor is in normal mode, typing INSERT-MODE will put it
in insert mode.  Then typing INSERT-MODE will put the editor back in
normal mode.

     If you type the wrong character you can  delete  it  using  the
DELETE-CHARACTER command (see below).

     Character strings can also be inserted in the  file  using  the
PUT command, by typing ENTER string PUT.



***************************************************************************
DELETE-CHARACTER                                DCH

        No parameters


     Deletes the character to the  left  of  the  cursor.   If  that
character is a tab, DELETE-CHARACTER deletes the entire tab.  At the
beginning of a line DELETE-CHARACTER has no effect.

     If typed in a parameter, DELETE-CHARACTER will still delete the
character before the cursor.  Thus, in a parameter, DELETE-CHARACTER
and CURSOR-LEFT have the same effect.

















                              - 14 -



***************************************************************************
SET-FILE                                        ^B

        Starting nominal: none
        Parameter: string (filespecs)
        Cursor move: spaces (change of lines illegal)
        Token: uses filespec token


     Looks up the given file and displays  its  first  page.   Saves
previous  file  on  disk.   Saves position in previous file.  If new
file is not found, returns to the previous file.

     The   filespec   parameter    is    in    the    usual    form:
DEV:FILE.EXP[P,PN].   The  form  [P,PN]  DEV:FILE.EXP is also legal.
DEV defaults to DSK:, project or programmer number defaults to  your
own.  If EXT is missing the editor will try the following extensions
until one succeeds:  none, MAC, TXT, RNO, FOR.

     The switches described for the  SWITCH  command  can  be  given
along with the file specs (for example, DSKD:FOO.BAR/NOT).

     SET-FILE with no parameter will return to the previous file, to
the  same  page and cursor position as was last set up.  The current
file will then become the new previous file.  Thus  you  can  toggle
back  and  forth between two files, after setting them up, simply by
typing SET-FILEs.

     And if you're working in the middle of a file you don't have to
hunt for that location every time you re-run the editor.

     To create a file, end the filespec parameter with an  "=".   If
the  file  exists  it will be looked up as usual, but if it does not
exist a file with a clever message will be materialized and  set  up
for  editing.   Note,  therefore,  that  an  existing file cannot be
overwritten by the editor.

     Exception:  if you SET-FILE to your current file  (so  you  can
look  at two different places in the same file), the editor will not
save the file.  This is so the change  of  file  pointers  can  take
place  as  quickly  as  possible.   The  file will be saved when you
SET-FILE to a different file or EXIT the editor.

     Note:  the file is  only  saved  on  a  SET-FILE  or  an  EXIT;
otherwise  changes  are  made only to the in-core image of the file.
During the save all nulls are removed from the file (they are  added
in  abundance  during editing), and trailing spaces are removed from
each line.

     To abort the editor and forget all changes, type CONTROL-C (and
then  RESET,  on  TOPS-20).   The file will be the way it was before
this editing session.


                              - 15 -



***************************************************************************
EXECUTE                                         ^X

        Starting nominal: 0
        Parameter: number (iterations)
        No Parameter: closes execute buffer, if open
                      does nominal iterations, if buffer closed
        Cursor move: spaces (change of lines illegal)
        Token: opens execute buffer


     This command allows you to store a sequence of  commands  in  a
command  buffer,  and  later  execute that sequence as many times as
desired.  SOS-like things like changing all occurrences  of  XYZ  to
ABCD can be handled with this command;  but it is more powerful than
that:  ANY sequence of commands can be set up to be executed.  It is
easy  to do things like removing the first 16 spaces from every line
of the file, or causing each occurrence of JU&$ to be at  the  start
of a new line.

     EXECUTE is a complicated command.  This  section  explains  the
basics  of  how to use one EXECUTE buffer.  See the appendix for all
the gory details.

     The procedure for using the  EXECUTE  command  is  as  follows:
first  open  the  execute  buffer by typing ENTER EXECUTE.  From now
until the buffer is closed everything that you type  will  have  its
effect  on the file and the screen, and also be saved in the execute
buffer.  Do one iteration of the sequence.  Close the execute buffer
by typing only EXECUTE.

     When you want to execute that command sequence, figure out  how
many times you want to do it (a large number, if you want as many as
possible;  it will stop on an error like "Search failure").  For  10
iterations type

        ENTER 10 EXECUTE

The command sequence in the execute buffer will be issued 10  times,
just  as  if  you  had  typed the commands yourself.  Except for one
thing:  the display screen will not  change  until  the  execute  is
done.   This  saves  time.  However, every 8 times the entire buffer
has been executed, the terminal will beep so  you  can  tell  it  is
still working.  So there should be 2 beeps from the command above.

     When the execute is done the screen  will  be  re-displayed  to
show what it looks like after the last iteration.

     An EXECUTE can be aborted early by typing RUBOUT.  The  command
will stop immediately and return control to you.




                              - 16 -



     Some helpful suggestions:  set up your nominals before you open
the command buffer.  For example, you might type

        ENTER EXECUTE
        ENTER X Y Z SEARCH-FORWARD
        A B C
        EXECUTE

which will set up to change XYZ's to ABC's.  Instead type

        ENTER X Y Z SEARCH-FORWARD
        CURSOR-UP
        ENTER EXECUTE
        SEARCH-FORWARD
        A B C
        EXECUTE

This does the same thing, although it requires more typing.  But the
benefit  is  that  the work of setting up the search key is not done
every time the command is iterated.   The  time  savings  from  this
gambit  can  be  enormous  for  a  complicated  sequence or a lot of
iterations (and you'll be just twiddling your thumbs  and  listening
to  beeps while all this happens).  There is another advantage:  the
nominals can be  changed,  resulting  in  a  similar  but  different
command  sequence  at  minimum setup cost.  For example, suppose the
lower sequence above had been typed.  Now change all XYZ's to ABC's:

        ENTER 0 PERCENT
        ENTER 10000 EXECUTE

Fine.  But it so happens that all xyz's want to be changed to ABC's,
too.  Just type:

        PERCENT
        ENTER x y z SEARCH-FORWARD
        CURSOR-UP
        EXECUTE

     This will search for  all  occurrences  (or  the  first  10000,
whichever  comes  first) of xyz and change them to ABC.  It iterates
10000 times because that is the  nominal  set  up  by  the  previous
EXECUTE.   The  CURSOR-UP is so the first match will be found by the
first iteration;  if the cursor were pointing at  it,  it  would  be
skipped.

     Note:  if xyz were wanted to be  changed  to  abc  (instead  of
ABC),  you would need to reload the execute buffer, since the ABC is
not a command nominal.  For  the  record,  an  absolutely  arbitrary
"change  all  occurrences of ??  to ??" command can be set up by the
following:




                              - 17 -



        ENTER <STRING> SEARCH-FORWARD
        ENTER <length of above string> DELETE-SPACES
        ENTER <STRING1> PUT

        ENTER EXECUTE
        SEARCH-FORWARD
        DELETE-SPACES
        PUT
        EXECUTE


     This sets up EXECUTE to change all  occurrences  of  STRING  to
STRING1  (except  the  first  two,  which  you have done yourself by
hand).  To change all STRING2's to STRING3's, type

        ENTER <STRING2> SEARCH-FORWARD
        ENTER <length of above string> DELETE-SPACES
        ENTER <STRING3> PUT

and then execute;  the rest has already been set up.

     Another use of the EXECUTE command is to do  something  to  the
same part of every line in the file.  For example, suppose you had a
batch output file and you wanted to pretty it up by removing all the
time  tags  -  the  first  16 characters of every line.  Move to the
start of the first line of the file and type

        ENTER 16 DELETE-SPACES
        ENTER 1 ROLL-FORWARD-LINES

That sets up the nominal parameter values.   Now  load  the  execute
buffer:

        ENTER EXECUTE
        DELETE-SPACES
        CURSOR-DOWN
        ROLL-FORWARD-LINES
        EXECUTE

Then execute the sequence by typing ENTER 10000 EXECUTE.  Note  that
the  ROLL  is  necessary because without it, when the execute got to
last line on the screen the DOWN would position the cursor  back  at
the first line on the screen.  Note also that the DOWN is not really
needed for this particular sequence since the  ROLL  will  kick  the
cursor  down  a line (since the cursor is at the top of the screen).
But if you were working with lines in the middle of the  screen,  or
deleting  characters  from  the middle of a line, you would want the
CURSOR-DOWN.






                              - 18 -



***************************************************************************
EXIT - ABORT                                    ^Z ^C

        Parameters or token causes Exit and Go (EXIT only)


     Saves the current file and exits to the monitor.

     The editor writes the file nnnSTT.TMP (where nnn  is  your  job
number)  containing  the  names  and  status  of  the last two files
edited.  The next time you run the editor the latest of these  files
will  be  automatically set up, with display and cursor position the
same as they were upon exit.

     If any parameter is typed (or a token, ie, just ENTER EXIT) the
editor  will  exit as above and run COMPIL.  COMPIL will execute the
last compile-class command.

     Unless told otherwise  (see  the  SWITCH  command)  the  editor
creates  a backup file, with extension .BAK, containing the file the
way it was before editing.

     ABORT does not save the file - the file is as it was before the
editing session.

     The editor can be re-entered after a mistaken EXIT or ABORT  by
typing REENTER.


***************************************************************************
RESET                                           <.>

        Starting nominal: none
        Parameter: ^ (up arrow) is the only meaningful parameter
        Cursor move: undefined
        Token: causes rewrite of single line


     This command is used to cancel an entered parameter, reset  the
cursor  position, rewrite a single line, or re-do the entire screen.
It is useful if you don't trust what you see.  If  you  ever  get  a
"Timesharing  ends"  message while you're editing, you'll appreciate
being able to RESET.

     Also, it's useful to be able to cancel a parameter  you  really
don't want.

To:                                     Type:

  Cancel a parameter                      RESET
  Re-position the cursor                  RESET
  Re-write the line the cursor is on      ENTER RESET
  Re-do the entire screen                 ENTER ^ RESET

                              - 19 -



***************************************************************************
ENTER-CONTROL-CHARACTER                         ^O

        No parameters


     Causes the next character typed to be a  control  character  (a
character, now, not a command).  Has no effect on commands.  Thus if
you type in your file

                A B C ENTER-C-C D

the characters A, B, C, and CONTROL-D will be placed in the file.

     ENTER-C-C also works within parameters, so

        ENTER A B C ENTER-C-C D PUT

will put A, B, C, CONTROL-D into the file.

     Note:  this command is the way to get a TAB or a FORMFEED (page
mark)  into  a file.  For a TAB type ENTER-C-C I, and for a formfeed
type ENTER-C-C L.


***************************************************************************
CLEAR-LINE                                      ^J

                No Parameters


     Clears out the entire line which the cursor  moves  onto.   The
contents  of  the  line  is not saved.  CLEAR-LINE won't work if the
cursor starts on the last line of the screen.  This is  a  dangerous
command,  but  useful  for cleaning out a lot of garbage and leaving
blank lines behind.

     Note:  on some terminals linefeed and cursor down are the  same
character.   In  that  case, they both perform a cursor down and the
CLEAR-LINE command is disabled.

EXAMPLE: The cursor is on the word "thing"; you type CLEAR-LINE

BEFORE: This is the thing of the gig
        and the gig is where its at
        This is another thing of the gig

AFTER:  This is the thing of the gig

        This is another thing of the gig

Now the cursor is where the "is" used to be


                              - 20 -



***************************************************************************
SWITCH                                          ^N

        Starting nominal: none
        Parameter: string (switch name)
        Cursor move: undefined
        Token: query of nominal parameter settings
        No Parameter: query of position and file status


     This command is used to tailor the operation of the  editor  to
the  user  and to get status information.  All of the switches below
are set when the editor is first run, except UPPER, RESET and  BEEP.
To  turn  a  switch off type "NONAME" ("NOCASE", "NOUPPER", etc.) as
the parameter.  You only have to type enough of the switch  name  to
make it unique ("T" is good enough for TABS).

BACKUP  causes a backup file to be made on exit.  The file  has  the
        extension .BAK.  NOBACKUP causes no backup file to be made.

BEEP    causes the terminal to beep once when entering  INSERT  MODE
        and  twice when entering replace mode, instead of displaying
        a message on the screen.

CASE    make searches case-dependent, ie, the key "THE" is different
        from the key "the".  The opposite switch, NOCASE, will cause
        the key "THE" to match the first occurrence of "THE", "the",
        "tHe", &c.

DTABS   causes tabs to identify themselves.  With DTAB set, each tab
        displays  as  a  highlighted "I" followed by one fewer space
        than usual.  Thus  the  columns  on  the  screen  are  still
        aligned properly.

HELP    Enables on-line help when ENTER ENTER is typed.

ICR     Causes a carriage return typed in insert mode  to  insert  a
        carriage return.  NOICR just positions the cursor.

LINEFD  enables the LINEFEED command, as distinct  from  the  cursor
        down command.  If this switch is off LINEFEED will perform a
        cursor down.

PAGE    causes SWITCH to output your position as  PAGE-LINE,  rather
        than  LINES  from  start  of  file.   Pages are delimited by
        formfeeds (^L).

PROG:FILE sets up the name of the system program to be run when  you
        type  ENTER  EXIT.   The  default  is  COMPIL.   The  switch
        PROG:RUNOFF will cause RUNOFF to be run instead.

RESET   causes the starting nominal parameters  to  be  reset  after
        each  command.   When  set,  ENTER 5 INSERT-LINE INSERT-LINE

                              - 21 -



        will insert 6 lines.   Under  NORESET  those  commands  will
        insert 10 lines.

ROLL    causes the screen to roll one line if the cursor is  at  the
        bottom  of  the  screen  and  you  type CARRIAGE-RETURN.  If
        NOROLL is set, the cursor will move to the top of the screen
        and there is no roll.

TABS    makes TAB and BACKTAB use the usual tab  positions.   NOTABS
        sets up word-wise TABS.  See the TAB/BACKTAB section (*).

UPPER   causes all alphabetic characters to be  converted  to  upper
        case.   Useful  for  a  terminal whose shift lock shifts all
        characters.

WRITE   allows the current file  to  be  altered.   If  turned  off,
        commands  which  change the file become illegal, so the file
        cannot be modified accidentally.


     (*) You can also type TABS:n  to  set  up  tab  stops  every  n
positions.  Default is TABS:8.

     There are three other places you can use  these  switches:   in
the  monitor-level RUN command, in the SET-FILE command, and in your
SWITCH.INI file.  You can do things like

        .SED FILE.EXT/NOCASE/TABS:5
or
        ENTER FILE.EXT/GOTO:50 SET-FILE

and if your SWITCH.INI contained the line

        SED/NOC/U

the editor would set switches for searching independent of case  and
for upper case characters each time the editor was run.

     There are a couple of switches which are not meaningful in  the
SWITCH command but can be used with the other three methods:

BLOCK:n   tells SED to input only the first n blocks  of  the  file.
        This can be used to keep the size of the editor small and to
        edit files which are too large to fit entirely in core.

GOTO:PERC used when running the editor or  doing  a  SET-FILE.   The
        file  will  be  displayed  starting  PERC percent of the way
        through.  If /GOTO, no argument, is used SED  will  use  the
        current percent value.





                              - 22 -



     There are two other functions of the SWITCH  command:   to  get
information  about  the  file  you  are  editing and to find out the
settings of the nominal parameter values.  You  get  the  former  by
typing just SWITCH, the latter by typing ENTER SWITCH.

     The file information consists of the  current  file  name,  the
line  and position the cursor is on (that's the line and position in
the file, not the row and column on the screen), the percent through
the  file,  the name of the alternate file (if any), and the current
search key (if any).  For example,

FILE: SED.RNO[401,127]  LINE: 534(67%) POS: 1 ALT: FOO.BAR[10,15]

says that the current file is SED.RNO, the cursor is at the start of
the  534th  line,  which  is 67% through the file, and the alternate
file is FOO.BAR.

     To find out how many lines lie between a  given  line  and  the
beginning  of  the file, position the cursor to the desired line and
type SWITCH.  This function may not  occur  immediately,  since  the
editor  has  to go back to the beginning of the file and count every
line.

     Typing ENTER SWITCH will give you the settings of  the  nominal
parameter values.  The bottom line of the screen will look something
like:

RL: 8, RP: 1, PC: 2, SL: 8, IL: 1,0, IS: 3, PK: 3,0, TB: 8; KEY: th

     This somewhat cryptic message  tells  you  that  the  following
values are set:

        LINES TO ROLL:         8
        PAGES TO ROLL:         1
        PERCENT-GOTO:          2
        SLIDE:                 8
        INSERT/DELETE LINES:   1 LINE AND 0 SPACES
        INSERT/DELETE SPACES:  3
        PICK:                  3 LINES AND 0 SPACES
        TAB SIZE:              8
        SEARCH KEY:            th

     So if you type a PERCENT-GOTO command  with  no  parameter  you
will  go  to  the  2%  point, a DELETE-LINES will delete 1 line (and
INSERT-LINES will insert 1 line), and a PICK will pick up 3 lines.

     Remember that you can use cursor  movement  to  tell  PICK  and
INSERT/DELETE-LINES to work with both a number of lines and a number
of spaces;  thus they have two nominal values above.

     Tab size is not really a parameter but  is  controlled  by  the
/TABS  switch.   If word-wise tabs are in effect the tab size in the
above list will show up as the number "W".

                              - 23 -



***************************************************************************
RECALL                                      <,>

                No Parameters

     Simulates an ENTER  with  the  latest  parameter  typed.   When
RECALL  is  typed  the latest parameter appears at the bottom of the
screen and the editor is placed in ENTER mode.  You can  add  to  or
delete  from the parameter and then pass that parameter to a command
by typing that command.

     The RECALL command is useful in three instances:  when you have
typed the wrong parameter to a command and want to correct it with a
minimum of typing, when you have given the right  parameter  to  the
wrong command (in which case he can just type RECALL RIGHT-COMMAND),
and when you just want to see what the latest parameter was.




***************************************************************************
TAB - BACKTAB                                   ^I ^U

                No Parameters

     Moves  to  the  next  tab  stop  in  the  forward  or  backward
direction.  Tab stops are normally 8 spaces apart.

     Tabs can be set to be any constant distance  apart,  using  the
SWITCH command.  For example, to set tabs every 6 columns, type

        ENTER T:6 SWITCH

     If the NOTABS switch has been set  (see  the  SWITCH  section),
then  TAB and BACKTAB function in terms of words of text rather than
screen position.  The table below explains what happens:

CURSOR AT:           TAB MOVES TO:           BACKTAB MOVES TO:

within the line      start of next word      start of previous word
start of line        start of next word      end of previous line
last word of line    end of line             start of previous word
beyond end of line   next 8-space tab stop   start of last word of line

     Note:  to move to the beginning of the current line type RETURN
UP.  To move to the end of the line, type RETURN BACKTAB.








                              - 24 -



***************************************************************************
REAL-TAB                                        <1>

                No Parameters

     The    REAL-TAB    command    is    identical     to     typing
ENTER-CONTROL-CHARACTER  I.  It replaces the character at the cursor
with a tab character (or inserts it, if  the  editor  is  in  insert
mode).  REAL-TAB also can be used to put a tab in a parameter.




***************************************************************************
MARK                                            <7>

                No Parameters

     This command is extends  the  PICK  and  DELETE-LINES  commands
using  cursor  movement  to  work with arbitrarily large sections of
text.  When MARK is typed SED stores the  current  cursor  position.
You  can  then  move to any other part of the file and type PICK (or
DELETE-LINES), and all the text between  the  mark  and  the  ending
cursor  position  will be picked up (or deleted).  The ending cursor
position can be before or after the mark.

     Thus the MARK command temporarily changes the effect of a  PICK
or  DELETE-LINES  without  a parameter.  When the PICK or DELETE has
been done, the mark is forgotten and those commands perform normally
again.

     The mark is also forgotten if you do a  RESET  or  any  command
which  alters  the file (including typing a character).  Every other
command retains the mark.  You can get to the  ending  position  any
way  you  want:   ROLLS, PERCENT-GOTO, and SEARCHES are probably the
most useful ways.

     For example, say the nominal number of lines to pick is 1.   If
you type:

        MARK
        ENTER 10 ROLL-FORWARD-PAGES
        PICK

then 10 screens-full (say around 240 lines) of text will be  PICKed.
Those  lines  can be PUT in the normal way.  If you now type another
PICK you will pick up 1 line.







                              - 25 -



                             APPENDICES

         EVERYTHING YOU ALWAYS WANTED TO KNOW ABOUT EXECUTE


     There are 8 execute buffers,  so  up  to  8  different  command
sequences  can be set up.  Each buffer has a name, which is whatever
you want to call it.  Names can be defined or  deleted  as  desired.
Buffers  can be written either by opening them and allowing commands
to be stored, as described in the EXECUTE section, or directly using
the  write-buffer  format described below.  Two buffers have default
names:  one is null (which is the buffer that was described  in  the
EXECUTE command section above) and the other is "SUB", which will be
described further later on.

     The EXECUTE command can be in one of the following formats:

        ENTER S<name> EXECUTE      set up buffer with given name
        ENTER W<sequence> EXECUTE  write sequence into active buffer
        ENTER R EXECUTE            read name & contents of buffer
        ENTER N EXECUTE            get list of buffer names
        ENTER K<name> EXECUTE      kill buffer with given name
        ENTER EXECUTE              open active buffer
        ENTER <number> EXECUTE     execute active buffer n times
        EXECUTE                    close or execute active buffer

     Note that all of the formats except S, N and K  work  with  the
active execute buffer, meaning the one that was most recently set up
(with the S format).  Originally  the  active  buffer  is  the  null
buffer.

     All characters typed in these formats are meaningful.  So don't
put in any spaces unless you really want them.

***************************************************************************
SETTING UP A BUFFER

     The general procedure for working with an execute buffer is  to
set it up, write it, then execute it.

     To define and write a new buffer:  choose a name, say FOO,  and
set up the buffer by typing

        ENTER SFOO EXECUTE

     Names can be up to five characters long and can consist of  any
printing characters.

     The S format is also used to set to a buffer which has  already
been  created.   A  buffer  must  be set before it is written (the W
format), read (R), or executed.  The S format will look for a buffer
of  the given name and make it and its contents active if it exists;
if no buffer by that name exists,  it  will  create  one  (which  is

                              - 26 -



empty).  To set to the null buffer type ENTER S EXECUTE.

***************************************************************************
WRITING A BUFFER

     After creating the buffer named FOO you  can  write  a  command
sequence  into  it in the usual way, by typing ENTER EXECUTE to open
the buffer, the desired sequence of commands, and EXECUTE  to  close
it.  Note that setting up the buffer name with the S format does NOT
open the buffer.

     The execute buffer can also be written directly, without having
the  commands  take effect on the screen (using the W write format).
The write  format  works  with  the  active  buffer.   For  example,
following the above set command with

        ENTER W$THING^SF$5^DS$HACK^PT EXECUTE

will load the buffer names FOO with a  sequence  of  commands  which
searches  for  an  occurrence  of  "THING",  deletes it, and inserts
"HACK".  The buffer is loaded with the following command sequence:

        ENTER THING SEARCH-FORWARD
        ENTER 5 DELETE-SPACES
        ENTER HACK PUT

     Writing into the execute buffer requires a language to describe
the  editor  commands, since typing them directly will cause them to
take effect.  On the next page is a list of the editor commands  and
the  sequence  that  EXECUTE uses to describe them.  In general they
are "^" followed by two or three letters which describe the command.
ENTER-PARAMETER is a dollar sign.

     For another example, to load the active buffer with a  sequence
to  put  an  "X"  at  the  cursor  position,  move  to  the position
underneath, and roll the screen one line, type

        ENTER WX^CL^CD$1^RFL EXECUTE

This sets up the buffer with the following command sequences:

        X
        CURSOR-LEFT
        CURSOR-DOWN
        ENTER 1 ROLL-FORWARD-LINES

     Of course, the execute will run faster if  the  parameters  are
set up in advance, not in the sequence itself.

     The execute buffer does not have to be opened in order to write
it  using  the  W  format,  nor does it have to be closed afterward.
Those two formats apply only when you want to save commands as  they
are issued.

                              - 27 -



     After the buffer has been written it can  be  executed  in  the
normal  fashion,  using  the  ENTER  <number> EXECUTE or the EXECUTE
formats.


           TABLE OF WHAT EXECUTE CALLS THE EDITOR COMMANDS

        COMMAND          STRING IN THE BUFFER

        ENTER-PARAMETER . . . . $       (dollar sign)

CURSOR  CURSOR-UP . . . . . . . ^CU     (up-arrow C U)
        CURSOR-DOWN . . . . . . ^CD
        CURSOR-LEFT   . . . . . ^CL
        CURSOR-RIGHT  . . . . . ^CR
        CURSOR-HOME   . . . . . ^CH
        CARRIAGE-RETURN . . . . ^RT
        TAB . . . . . . . . . . ^TB
        BACKTAB . . . . . . . . ^BT

ROLLS   ROLL-BACK-PAGES . . . . ^RBP    (up-arrow R B P)
        ROLL-FORWARD-PAGES  . . ^RFP
        ROLL-BACK-LINES . . . . ^RBL
        ROLL-FORWARD-LINES  . . ^RFL
        PERCENT-GOTO  . . . . . ^PC
        SLIDE-LEFT. . . . . . . ^SL
        SLIDE-RIGHT . . . . . . ^SR

SEARCH  SEARCH-FORWARD  . . . . ^SF
        SEARCH-BACKWARD . . . . ^SB

TEXT    INSERT-SPACES . . . . . ^IS
        DELETE-SPACES . . . . . ^DS
        INSERT-LINES  . . . . . ^IL
        DELETE-LINES  . . . . . ^DL
        PICK  . . . . . . . . . ^PK
        PUT   . . . . . . . . . ^PT

INSERT  INSERT-MODE . . . . . . ^IN
        DELETE-CHARACTER. . . . ^DC

OTHERS  CLEAR-LINE  . . . . . . ^LF
        SWITCH  . . . . . . . . ^SW
        ENTER-CTRL-CHAR . . . . ^EC
        RECALL  . . . . . . . . ^RC
        REAL-TAB  . . . . . . . ^TA
        MARK  . . . . . . . . . ^MK
        SET-FILE  . . . . . . . ^FL
        EXIT  . . . . . . . . . ^XT
        ABORT . . . . . . . . . ^AB
        EXECUTE . . . . . . . . ^XC



                              - 28 -



     If you want to do the same series of commands several times  in
a  row,  you  can  give a repeat count.  For example, ^4(^CR) is the
same as ^CR^CR^CR^CR.  Any command can be  repeated  any  number  of
times.

     To put a real up-arrow in a buffer type "^^"  (two  up-arrows).
To  put  in  a  real dollar sign type "^$".  Within a repeat, a real
close parenthesis must be given as "^)".

***************************************************************************
READING THE CONTENTS OF A BUFFER

     The active buffer can be read by typing ENTER R  EXECUTE.   Any
buffer  can  be read by first making it active (using the S format).
If the FOO buffer above is active, reading it will cause the line

        FOO:$THING^SF$5^DS$HACK^PT EXECUTE

to be put into the parameter buffer and  displayed  on  the  screen.
The  null  buffer's  name will appear as <NUL> in this output;  it's
real name, however, is <> (ie, nothing).

     The line above can then be treated just like an parameter  that
you  have  typed:  it can be edited or sent to commands which take a
character  string  parameter,  like  PUT  or  the   SEARCHers.    In
particular,  it's  useful  to be able to store the command string in
SWITCH.INI by doing a read and a PUT (and then edit it to be in  the
right format).

***************************************************************************
FINDING OUT WHAT THE NAMES OF THE BUFFERS ARE

     Typing ENTER N EXECUTE will fill the bottom line of the  screen
with the names of the buffers.

***************************************************************************
KILLING A BUFFER

     If you try to set up a ninth buffer, the editor will inform you
that  all  the  buffers are in use and suggest you kill one of them.
You do that using the K format:  to kill the buffer FOO type

        ENTER KFOO EXECUTE

That name will go away and the buffer will be cleared, and  it  will
be available to be set to something new.

     The null buffer can be killed, just like any other.  To  do  so
type ENTER K EXECUTE.





                              - 29 -



***************************************************************************
THE SUB BUFFER

     The execute buffer named SUB contains the  sequence  ^SF^DS^PT.
It  will  search  for  the  search  key, delete some characters, and
insert some characters.  The parameters  for  these  three  commands
must be set up in advance.

     There are a number of ways to do a substitute, depending on the
sizes  of  the search and the replacement strings.  The way SUB does
it is the most general, but not usually the best.  It is  better  to
handle  each  substitute as a separate case, and write a buffer with
commands which best perform that one operation.   For  example,  the
best way to substitute STUFF for THING is with a buffer containing

        $THING^SFSTUFF

which will find THING and overwrite it with STUFF, without doing (or
needing to do) a DELETE-SPACES or PUT.

***************************************************************************
SETTING UP EXECUTE BUFFERS IN SWITCH.INI

     Frequently-used command sequences can be put in SWITCH.INI, and
thus will be set up automatically when SED is run.  An example of an
execute switch is:

        /XNAME:$gig^PT^RT

which sets up execute buffer "NAME" with the command sequence to  do
a PUT and a carriage return.

***************************************************************************
EXAMPLES OF EXECUTE SEQUENCES

        ^8($5^DS^CD)^RFL

(where the ROLL-LINES parameter  is  set  to  8).   This  deletes  5
characters  from  the same column of each of 8 lines, then rolls the
screen 8 lines.

        $^ECJ^EC?^EC?^EC?^ECM^SF^DL

This will delete all lines which are exactly three characters  long.
It  looks  for  lines  which have exactly three characters between a
linefeed (the end of the previous line) and a carriage return.

        ^SF^RT^CU^PK^RT^FL^PT^RT^FL

(where some search key has been set up, the PICK parameter is 1, and
the alternate file is the end of the current file).  This copies all
lines which contain a match of the search key  to  the  end  of  the
file.   It  searches  for  a  match,  gets  to the start of the line

                              - 30 -



(CARRIAGE-RETURN, CURSOR-UP), PICKs the line, sets to the  alternate
file  (which  is  the  end  of the current file), PUTs the line, and
SET-FILEs back.  Note that there will never  be  a  search  failure.
The  alternate file could be a separate file, but then the two files
will have to be read and written on disk for  each  SET-FILE,  which
will slow the sequence down considerably.  The set of matching lines
can easily be transferred from the end of  the  file  to  any  other
file, when the execute has completed.

        $^TA^SF$^TB^DS^IS

This replaces all tabs with the appropriate number of spaces.   Note
the  difference  between  the  REAL-TAB  and  the TAB commands:  the
former (^TA) is used to set up a real tab as the  search  key;   the
latter  (^TB)  is  a  cursor movement parameter giving the number of
spaces to delete and insert.






































                              - 31 -



                              EXAMPLE I
                  TERMINAL DEPENDENCIES OF THE VT52

     The VT52 has a numeric  keypad  to  the  right  of  the  normal
keyboard.  Four cursor movement keys are at the right of that keypad
and there  are  three  unidentified  buttons  above  the  pad.   The
leftmost  (blue)  unidentified  button  is  the  ENTER  command, the
rightmost one (BLACK) is HOME, and the center one (RED)  is  RECALL.
The  number keys in the pad can be used to invoke commands which are
not defined as control characters.  Do not use the red ESC (SEL) key
at  the  upper  left  of  the  keyboard.  The key on the numeric pad
labeled ENTER is used as INSERT-MODE.


VT52 EDITOR KEYBOARD

       Q    W    E    R    T    Y    U    I    O    P
.____.____.____.____.____.____.____.____.____.____.____.   .____.____.
!    !ROLL!ROLL!SRCH!SRCH!ROLL!ROLL!BACK!    !ENTR!PERC!   !CLR !RE- !
!TAB !BK P!BK L!BACK!FORW!FW L!FW P!TAB !TAB !CCH !GOTO!...!LINE!SET !
!____!____!____!____!____!____!____!____!____!____!____!   !____!____!
       !INS !DEL !INS !DEL !    !DEL !CLR !SLID!SLID!      !         !
       !SPAC!SPAC!LINE!LINE!PUT !CHAR!LINE!LEFT!RGHT!   ...! RETURN  !
   .___!____!____!____!____!____!____!____!____!____!_.    !_________!
   !     !    !    !    !    !SET !    !RE- ! <  ! >  !    !RE- !
   !SHIFT!EXIT!EXCT!ABRT!PICK!FILE!SWCH!TURN! ,  ! .  ! ...!PEAT!
   !_____!____!____!____!____!____!____!____!____!____!    !____!
           Z    X    C    V    B    N    M

        NUMERIC PAD AT RIGHT     .____.____.____.____.
        OF NORMAL KEYBOARD:      !ENTR!RE- !    !CUR !
                                 !ARGS!CALL!HOME! UP !
                                 !____!____!____!____!
                                 !    !    !    !CUR !
                                 !MARK! 8  ! 9  !DOWN!
                                 !____!____!____!____!
                                 !    !    !    !CUR !
                                 ! 4  ! 5  ! 6  !RIGT!
                                 !____!____!____!____!
                                 !    !    !    !CUR !
                                 ! 1  ! 2  ! 3  !LEFT!
                                 !____!____!____!____!
                                 !   REAL  !DEL !INS !
                                 !   TAB   !CHAR!MODE!
                                 !_________!____!____!


Print DOC:VIS200.SED for a VISUAL-200 terminal.
Print DOC:VT100.SED  for a VT100 or other ANSI mode terminal.
Print DOC:CONCEP.SED for a concept-100 terminal.




                              - 32 -



                             EXAMPLE II
                  TERMINAL DEPENDENCIES OF THE ADM2

     The ADM2 has a row of buttons above the normal keyboard.   They
send  the  sequences "^A LETTER RETURN", with a different LETTER for
each key.  If SED uses those keys, ^A cannot  be  the  INSERT-SPACES
command,  since  when  SED  receives  a ^A it will wait for two more
characters before it decides what to do.  Also, the ADM2 uses ^K and
^L for cursor movement, so the slide commands must be moved.  So the
leftmost 4 special keys stand  for  INSERT-  and  DELETE-SPACES  and
SLIDE-LEFT and -RIGHT.  ENTER and the commands which are not invoked
by control characters are set up on the  right  side  of  the  extra
keys.

ADM2 EDITOR KEYBOARD
.____.____.____.____.____.____/        \____.____.____.____.____.____.
!INS !DEL !SLID!SLID!    !    /        \    !    !DEL !INS !RE- !ENTR!
!SPAC!SPAC!LEFT!RGHT! F5 ! F6 /  ...   \ F11!MARK!CHAR!MODE!CALL!ARGS!
!____!____!____!____.____.____/        \____!____!____!____!____!____!

       Q    W    E    R    T    Y    U    I    O    P
.____.____.____.____.____.____.____.____.____.____.____.   .____.____.
!    !ROLL!ROLL!SRCH!SRCH!ROLL!ROLL!BACK!    !ENTR!PERC!   !         !
!CTRL!BK P!BK L!BACK!FORW!FW L!FW P!TAB !TAB !CCH !GOTO!...!   TAB   !
!____!____!____!____!____!____!____!____!____!____!____!   !_________!
       !    !DEL !INS !DEL !    !CUR !CLR !    !    !           !CUR !
       ! XX !SPAC!LINE!LINE!PUT !LEFT!LINE! XX ! XX !   ...     !DOWN!
.______!____!____!____!____!____!____!____!____!____!_.    .____!____!
!        !    !    !    !    !SET !    !RE- ! <  ! >  !    !         !
! SHIFT  !EXIT!EXCT!ABRT!PICK!FILE!SWCH!TURN! ,  ! .  ! ...! RETURN  !
!________!____!____!____!____!____!____!____!____!____!    !_________!
           Z    X    C    V    B    N    M
                                .____.____.____.
        PAD AT RIGHT            !    !CUR !    !
        OF NORMAL KEYBOARD:     !    ! UP !    !
                                !____!____!____!
                                !CUR !    !CUR !
                                !LEFT!HOME!RIGT!
                                !____!____!____!
                                !    !CUR !    !
                                !    !DOWN!    !
                                !____!____!____!












                              - 33 -



                INDEX OF EDITOR COMMANDS, BY COMMAND

PAGE  COMMAND    NAME                 EXPLANATION

  6     ^A       ROLL-BACK-PAGES      MOVE VIEWING WINDOW BACK PAGES
 15     ^B       SET-FILE             SET UP A FILE FOR EDITING
 19     ^C       ABORT                EXIT AND FORGET CHANGES
  8     ^D       INSERT-LINES         INSERT BLANK LINES IN FILE
 11     ^E       SEARCH-BACKWARD      SEARCH FROM CURSOR TO START OF FILE
  8     ^F       DELETE-LINES         DELETE LINES FROM FILE
 13     ^G       PUT                  PUT TEXT INTO FILE
  2     ^H       CURSOR-LEFT          MOVE CURSOR LEFT
 24     ^I       TAB                  MOVE TO NEXT TAB STOP
 20     ^J       CLEAR-LINE           CLEAR LINE BELOW CURSOR
 10     ^K       INSERT-SPACES        INSERT SPACES TO FILE
 10     ^L       DELETE-SPACES        DELETE CHARACTERS FROM FILE
  2     ^M       CARRIAGE-RETURN      GOOD OL' ASCII CARRIAGE RETURN
 21     ^N       SWITCH               SET SWITCHES OR QUERY STATUS
 20     ^O       ENTER-CTRL-CHAR      MAKE NEXT CHARACTER A CONTROL CHAR.
  7     ^P       PERCENT-GOTO         GO TO SOME PERCENT THROUGH THE FILE
        ^Q       XOFF                 Pauses output to the terminal
 11     ^R       SEARCH-FORWARD       SEARCH FROM CURSOR TO END
        ^S       XON                  Resumes output to the terminal
  6     ^T       ROLL-FORWARD-LINES   MOVE VIEWING WINDOW FORWARD LINES
 24     ^U       BACKTAB              MOVE TO PREVIOUS TAB STOP
 12     ^V       PICK                 PICK TEXT FROM FILE
  6     ^W       ROLL-BACKWARD-LINES  MOVE VIEWING WINDOW BACK LINES
 16     ^X       EXECUTE              PERFORM SEQUENCE OF EDITOR COMMANDS
  6     ^Y       ROLL-FORWARD-PAGES   MOVE VIEWING WINDOW FORWARD PAGES
 19     ^Z       EXIT                 EXIT AND SAVE CHANGES
  3     ENTER    ENTER                PASS A PARAMETER TO A COMMAND
 14     RUB      DELETE-CHARACTER     ERASE CHARACTER TO LEFT OF CURSOR
 19     <.>      RESET                RESET SCREEN OR PARAMETER
 24     <,>      RECALL               RECALL PREVIOUS PARAMETER
 14     <->      INSERT-MODE          CHARACTER INSERT/REPLACE TOGGLE
 25     <0>      REAL-TAB             TYPE A REAL TAB IN THE FILE
 25     <7>      MARK                 MARK POSITION FOR PICK OR DELETE
  7     <8>      SLIDE-LEFT           SLIDE VIEWING WINDOW LEFT
  7     <9>      SLIDE-RIGHT          SLIDE VIEWING WINDOW RIGHT

















                              - 34 -



                ARTICULATED INDEX OF EDITOR COMMANDS

     The COMMAND  column  refers  to  the  control  character  which
invokes  the  desired  command.  UP, DOWN, LEFT, RIGHT, and HOME are
the five cursor movement keys, usually denoted by arrows on the  key
caps  (but see the terminal dependent section to make sure).  RUB is
the RUBOUT key, sometimes yclept DEL, for DELETE.  <0> is the zero
digit on the numberic keypad, <7>,<8>,<9>,<->,<.>,<,> are also on the
numeric keypad.


KEY         EXPLANATION                     COMMAND       PAGE

ABORT       EXIT AND FORGET CHANGES           ^C	   19

BACKWARD    ROLL SCREEN BACKWARD LINE         ^W	   6
BACKWARD    ROLL SCREEN BACKWARD PAGES        ^A	   6
BACKWARD    SEARCH BACKWARD                   ^E	   11

CHANGES     EXIT AND FORGET CHANGES           ^C	   19
CHANGES     EXIT AND SAVE CHANGES             ^Z	   19
CHARACTER   DELETE THE PREVIOUS CHARACTER     RUB	   14
CHARACTER   ENTER CONTROL CHARACTER           ^O	   20
CHARACTERS  DELETE CHARACTERS FROM FILE       ^K	   10
CLEAR       CLEAR LINE BELOW CURSOR           ^J	   20
COMMAND     EXECUTE COMMAND SEQUENCE          ^X	   16
CONTROL     ENTER CONTROL CHARACTER           ^O	   20
CURSOR      CLEAR LINE BELOW CURSOR           ^J	   20
CURSOR      MOVE CURSOR DOWN                  DOWN	   2
CURSOR      MOVE CURSOR HOME                  HOME	   2
CURSOR      MOVE CURSOR LEFT                  LEFT	   2
CURSOR      MOVE CURSOR RIGHT                 RIGHT	   2
CURSOR      MOVE CURSOR UP                    UP	   2

DELETE      DELETE CHARACTERS FROM FILE       ^L	   10
DELETE      DELETE LINES FROM FILE            ^F	   8
DELETE      DELETE THE PREVIOUS CHARACTER     RUB	   14
DELETE      MARK POSITION FOR PICK OR DELETE  <7>	   25
DELETED     RESTORE DELETED LINES             ^G	   13
DISPLAY     RESET PARAMETER OR DISPLAY        <.>	   19
DOWN        MOVE CURSOR DOWN                  DOWN	   2

EDIT        EDIT A NEW FILE                   ^B	   15
ENTER       ENTER CONTROL CHARACTER           ^O	   20
ENTER       ENTER PARAMETER                   ENTER	   3
EXECUTE     EXECUTE COMMAND SEQUENCE          ^X	   16
EXIT        EXIT AND FORGET CHANGES           ^C	   19
EXIT        EXIT AND SAVE CHANGES             ^Z	   19

FILE        EDIT A NEW FILE                   ^B	   15
FORGET      EXIT AND FORGET CHANGES           ^C	   19
FORWARD     ROLL SCREEN FORWARD LINES         ^T	   6

                              - 35 -
KEY         EXPLANATION                     COMMAND       PAGE


FORWARD     ROLL SCREEN FORWARD PAGES         ^Y	   6
FORWARD     SEARCH FORWARD                    ^R	   11

GO TO       GO TO PERCENT IN FILE             ^P	   7

HOME        MOVE CURSOR HOME                  HOME	   2

INSERT      INSERT LINES IN FILE              ^D	   8
INSERT      INSERT SPACES IN FILE             ^K	   10
INSERT      INSERT TEXT IN FILE               ^G	   13
INSERT      INSERT/REPLACE TOGGLE             <->	   14

LEFT        MOVE CURSOR LEFT                  LEFT	   2
LEFT        SLIDE WINDOW LEFT                 <8>	   7
LINE        CLEAR LINE BELOW CURSOR           ^J	   20
LINES       DELETE LINES FROM FILE            ^F	   8
LINES       INSERT LINES IN FILE              ^D	   8
LINES       PICK UP LINES OF FILE             ^V	   12
LINES       RESTORE DELETED LINES             ^G	   13
LINES       ROLL SCREEN BACKWARD LINE         ^W	   6
LINES       ROLL SCREEN FORWARD LINES         ^T	   6

MARK        MARK POSITION FOR PICK OR DELETE  <7>	   25
MOVE        MOVE CURSOR DOWN                  DOWN	   2
MOVE        MOVE CURSOR HOME                  HOME	   2
MOVE        MOVE CURSOR LEFT                  LEFT	   2
MOVE        MOVE CURSOR RIGHT                 RIGHT	   2
MOVE        MOVE CURSOR UP                    UP	   2
MOVE        MOVE TO NEXT TAB STOP             TAB	   24
MOVE        MOVE TO NEXT TAB STOP             ^I	   24
MOVE        MOVE TO PREVIOUS TAB STOP         ^U	   24

NEW         EDIT A NEW FILE                   ^B	   15
NEXT        MOVE TO NEXT TAB STOP             TAB	   24
NEXT        MOVE TO NEXT TAB STOP             ^I	   24

PAGES       ROLL SCREEN BACKWARD PAGES        ^A	   6
PAGES       ROLL SCREEN FORWARD PAGES         ^Y	   6
PARAMETER   ENTER PARAMETER                   ENTER	   3
PARAMETER   RECALL LATEST PARAMETER           <,>	   24
PARAMETER   RESET PARAMETER OR DISPLAY        <.>	   19
PERCENT     GO TO PERCENT IN FILE             ^P	   7
PICK        MARK POSITION FOR PICK OR DELETE  <7>	   25
PICK        PICK UP LINES OF FILE             ^V	   12
POSITION    MARK POSITION FOR PICK OR DELETE  <7>	   25
PREVIOUS    MOVE TO PREVIOUS TAB STOP         ^U	   24

QUERY       SET SWITCHES OR QUERY STATUS      ^N	   21

RECALL      RECALL LATEST PARAMETER           <,>	   24
REPLACE     INSERT/REPLACE TOGGLE             <->	   14
RESET       RESET PARAMETER OR DISPLAY        <.>	   19
RESTORE     RESTORE DELETED LINES             ^G	   13

                              - 36 -
KEY         EXPLANATION                     COMMAND       PAGE


RETURN      CARRIAGE RETURN                   ^M	   2
RIGHT       MOVE CURSOR RIGHT                 RIGHT	   2
RIGHT       SLIDE WINDOW RIGHT                <9>	   7
ROLL        ROLL SCREEN BACKWARD LINE         ^W	   6
ROLL        ROLL SCREEN BACKWARD PAGES        ^A	   6
ROLL        ROLL SCREEN FORWARD LINES         ^T	   6
ROLL        ROLL SCREEN FORWARD PAGES         ^Y	   6

SAVE        EXIT AND SAVE CHANGES             ^Z	   19
SEARCH      SEARCH BACKWARD                   ^E	   11
SEARCH      SEARCH FORWARD                    ^R	   11
SLIDE       SLIDE WINDOW LEFT                 <8>	   7
SLIDE       SLIDE WINDOW RIGHT                <9>	   7
SPACES      INSERT SPACES IN FILE             ^K	   10
STATUS      SET SWITCHES OR QUERY STATUS      ^N	   21
SWITCHES    SET SWITCHES OR QUERY STATUS      ^N	   21

TAB         MOVE TO NEXT TAB STOP             TAB	   24
TAB         MOVE TO NEXT TAB STOP             ^I	   24
TAB         MOVE TO PREVIOUS TAB STOP         ^U	   24
TAB         PUT A REAL TAB IN THE FILE        <0>	   25
TEXT        INSERT TEXT IN FILE               ^G	   13

UP          MOVE CURSOR UP                    UP	   2

WINDOW      SLIDE WINDOW LEFT                 ^K	   7
WINDOW      SLIDE WINDOW RIGHT                ^L	   7



























                              - 37 -

   T@8