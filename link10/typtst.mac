	$TOC	Initialization  18-Aug-81


;Search some universal files

	SEARCH	SYSUNV		;Local macros
	SEARCH	SCNMAC		;SCAN/WILD macros


;Setup the world for TYPTST

	$BEGIN	TYPTST - TYPER Test Program,TST,1B(3)-4,<TWO,TOPS10,TYPER>


;*** Needs support for the following substitution types:
;
;	1)  $ERS
;	2)  $JFN
;	3)  $SCN (TOPS-20)
;	4)  $XCT
	$TOC	Data Storage


	$LOW			;Point to the low segment

PDL:	BLOCK	400		;The push down stack
PICTAB:	BLOCK	100		;The picture stack

TIMSTM:	BLOCK	1		;The SIXBIT time stamp data

	$HIGH			;Point to the high segment

FILBLK:	0			;Function - .FILOP block
	.IODMP			;Dump mode
	'DEV   '		;Device name
	0			;No buffer headers
	0			;Number of buffers
	LNGBLK			;Pointer to the LOOKUP block

OPNBLK:	.IODMP			;Dump mode
	'DEV   '		;Device name
	0			;No buffer headers

SHRBLK:	'FILE  '		;File-name - Short LOOKUP/ENTER block
	'EXT',,100		;Extension and Error code
	0			;No privileges
	PTHBLK			;Pointer to path block

LNGBLK:	.RBPRV			;Length - Long LOOKUP/ENTER block
	PTHBLK			;Pointer to path block
	'FILE  '		;File-name
	'EXT',,ERUNN%		;Extension and error code
	0			;No privileges

PTHBLK:	0			;Function or structure - PATH block
	0			;Switches
	1,,1			;UFD
	'SFD1  '		;SFD level 1
	'SFD2  '		;SFD level 2
	0			;End of the path block
SCNBLK:	'DEV   '		;Device name - SCAN block
	'file? '		;File name
	777777770077		;File name mask
	'EXT',,777777		;Extension and mask
	0			;Modifier word
	0			;Modifier mask
	1,,100			;Directory word (UFD)
	777777,,777700		;Directory mask
	'SFD1  '		;Directory word (SFD1)
	777777777777			;Directory mask
	'SFD2* '		;Directory word (SFD2)
	777777770000		;Directory mask
	0			;Directory word (SFD3)
	0			;Directory mask
	0			;Directory word (SFD4)
	0			;Directory mask
	0			;Directory word (SFD5)
	0			;Directory mask
	377777777777		;BEFORE switch
	0			;SINCE switch
	377777777777		;ABEFORE switch
	0			;ASINCE switch
	0			;LENGTH switch, lower limit
	377777777777		;LENGTH switch, upper limit
	0			;ESTIMATE switch
	0			;VERSION switch
	[ASCIZ ~No bits~]	;The default message
BITMS1:	[ASCIZ ~Bit 0~]
	[ASCIZ ~Bit 1~]
	[ASCIZ ~Bit 2~]
	[ASCIZ ~Bit 3~]

BITMS2:	[ASCIZ ~Value 0~]
	[ASCIZ ~Value 1~]

	'LARGE '		;The default message
BITMS3:	'VAL 0 '	
	'VAL 1 '

USRMSG==<[ASCIZ ~/1 ~],,[ASCIZ ~/2 ~]>  ;User messages
	$TOC	TYPTST - The Start-up code


TYPTST:	RESET				;Reset the world
	MOVE	P,[-400,,PDL]		;Reset the PDL

	MOVSI	T1,TP.PFX		;Set the system
	$TYPES	(INI)			; prefix

	MOVE	T1,[100,,PICTAB]	;Allow compiled
	$TYPES	(PIC)			; pictures to be save

	HRROI	T1,TIMSTM		;Set the time stamp
	$TYPES	(TIM)			; for SIXBIT output
	$TOC	TSTHDR - Header Test


	MOVX	T1,'TSTHDR'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to header testing
	MOVX	T1,%TFWCN!%TFWFL!%TFWPR	;Make sure all header
	$TYPES	(VRB)			; types are output

	$TYPE	(T,,$NON,<*** Output all header types ***>)

	$TYPE	(B,,$NON,<This is a blank message (B)>)
	$TYPE	(C,,$NON,<This is a continuation message (C)>)
	$TYPE	(F,FAT,$NON,<This is a fatal error message (F)>)
	$TYPE	(I,INF,$NON,<This is an information message (I)>)
	$TYPE	(M,MSG,$NON,<This is an operator information message (M)>)
	$TYPE	(N,,$NON,<This is a message (N)>)
	$TYPE	(O,OPR,$NON,<This is an operator intervention message (O)>)
	$TYPE	(T,,$NON,<This is a tab message (T)>)
	$TYPE	(W,WRN,$NON,<This is a warning message (W)>)
	$TOC	TSTSFX - Suffix Test


	MOVX	T1,'TSTSFX'		;Set the time stamp to
	MOVEM	T1,TIMSTM		; suffix testing

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Test suffix code ***>)

	MOVX	T1,^D1			;Start with one
	$TYPE	(I,SFX,$DEC,<This is suffix output number |>)
	MOVX	T1,^D2			;Now for number 2
	$TYPE	(N,SFX)			;See if XCT works
	$TOC	TSTSUB - Substitution Test


	MOVX	T1,'TSTSUB'		;Set the time stamp to
	MOVEM	T1,TIMSTM		; substitution testing

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Output all substitution types ***>)

	MOVEI	T1,[ASCIZ /ASCIZ text/]
	$TYPE	(N,,$ASC,<$ASC	| (ASCIZ text)>)

	MOVEI	T1,[$BITS (AND,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<$BIT	| (Bit 0, Bit 1 and Bit 3)>)
	MOVEI	T1,[$BITS (COMMA,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0, Bit 1, Bit 3)>)
	MOVEI	T1,[$BITS (CRLF,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0<CR-LF>Bit 1<CR-LF>Bit 3)>)
	MOVEI	T1,[$BITS (EXCLAIM,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0!Bit 1!Bit 3)>)
	MOVEI	T1,[$BITS (EXCLAIM,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>,NUMBER)]
	$TYPE	(N,,$BIT,<	| (1B0!1B1!1B3)>)
	MOVEI	T1,[$BITS (NONE,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0Bit 1Bit 3)>)
	MOVEI	T1,[$BITS (OR,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0, Bit 1 or Bit 3)>)
	MOVEI	T1,[$BITS (PLUS,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (Bit 0+Bit 1+Bit 3)>)
	MOVEI	T1,[$BITS (USER,BITMS1,<1B0!1B1!0B2!1B3>,<1B0!1B1!1B2!1B3>,,USRMSG)]
	$TYPE	(N,,$BIT,<	| (Bit 0/1 Bit 1/2 Bit 3)>)
	MOVEI	T1,[$BITS (FIELD,BITMS2,<1B17>,<7B17>,,1)]
	$TYPE	(N,,$BIT,<	| (Value 1)>)
	MOVEI	T1,[$BITS (AND,BITMS1,<0B0!0B1!0B2!0B3>,<1B0!1B1!1B2!1B3>)]
	$TYPE	(N,,$BIT,<	| (No bits)>)
	MOVEI	T1,[$BITS (FIELD,BITMS3,[16B17],[17B17],<OCTAL,SIXBIT,BIT,MASK>,1)]
	$TYPE	(N,,$BIT,<	| (LARGE (16))>)

	MOVX	T1,^D255		;255 words
	$TYPE	(N,,$BLK,<$BLK	| (255W)>)
	MOVX	T1,^D256		;256 words/2 block
	$TYPE	(N,,$BLK,<	| (2B)>)

	MOVX	T1,"A"			;A character
	$TYPE	(N,,$CHR,<$CHR	| (A)>)

	$TYPE	(N,,$CON,<$CON	Test for the $CON substitution|
This is the continuation message>)

	MOVX	T1,^D1023		;1023 words
	$TYPE	(N,,$COR,<$COR	| (1023W)>)
	MOVX	T1,^D1024		;1024 words/2 pages/1K
	$TYPE	(N,,$COR,<	| (2P/1K)>)

	SETO	T1,			;Get the current date
	$TYPE	(N,,$DAT,<$DAT	| (Current date)>)
	DATE	T1,			;Get the current date
	$TYPE	(N,,$DAT,<	| (Current date - 15-bit date)>)
	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$DAT,<	| (Current date - universal date/time)>)

	SETO	T1,			;Get the current date
	$TYPE	(N,,$DAY,<$DAY	| (Current day)>)
	DATE	T1,			;Get the current date
	$TYPE	(N,,$DAY,<	| (Current day - 15-bit date)>)
	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$DAY,<	| (Current day - universal date/time)>)

	SETO	T1,			;Get the current date
	$TYPE	(N,,$DTL,<$DTL	| (Current date)>)
	DATE	T1,			;Get the current date
	$TYPE	(N,,$DTL,<	| (Current date - 15-bit date)>)
	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$DTL,<	| (Current date - universal date/time)>)

	MOVX	T1,^D19			;Decimal 19
	$TYPE	(N,,$DEC,<$DEC	| (19 - decimal)>)

;	MOVE	T1,[OPNBLK,,SHRBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$ENT,<$ENT	| (Short ENTER block)>)
;	MOVE	T1,[OPNBLK,,LNGBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$ENT,<	| (Long ENTER block)>)
;	MOVEI	T1,FILBLK		;Get the .FILOP block
;	$TYPE	(N,,$ENT,<	| (.FILOP Enter block)>)

;	MOVE	T1,[OPNBLK,,SHRBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$ERR,<$ERR	| (Short LOOKUP/ENTER block)>)
;	MOVE	T1,[OPNBLK,,LNGBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$ERR,<	| (Long LOOKUP/ENTER block)>)
;	MOVEI	T1,FILBLK		;Get the .FILOP block
;	$TYPE	(N,,$ERR,<	| (.FILOP LOOKUP/ENTER block)>)

	MOVX	T1,'S I X '		;Full word SIXBIT
	$TYPE	(N,,$FUL,<$FUL	'|' ('S I X ')>)

	MOVX	T1,.CHEOL		;SCANs End-of-Line character
	$TYPE	(N,,$FUN,<$FUN	| (<EOL>)>)
	MOVE	T1,[1B0+[BYTE (7).CHCRT,.CHCNA,"a",0]]
	$TYPE	(N,,$FUN,<	| (<CR>^A'A)>)

	MOVX	T1,^O37			;Hexidecimal 1F
	$TYPE	(N,,$HEX,<$HEX	| (1F - hexidecimal)>)

	MOVX	T1,'LFTRIT'		;Left half output
	$TYPE	(N,,$LFT,<$LFT	| (LFT)>)

	MOVX	T1,^D2			;Two lines
	$TYPE	(N,,$LIN,<$LIN	| (2 CR-LF's)>)
	SETO	T1,			;A form-feed
	$TYPE	(N,,$LIN,<	| (FF)>)

;	MOVE	T1,[OPNBLK,,SHRBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$LKP,<$LKP	| (Short LOOKUP block)>)
;	MOVE	T1,[OPNBLK,,LNGBLK]	;Get the OPEN and LOOKUP blocks
;	$TYPE	(N,,$LKP,<	| (Long LOOKUP block)>)
;	MOVEI	T1,FILBLK		;Get the .FILOP block
;	$TYPE	(N,,$LKP,<	| (.FILOP LOOKUP block)>)

;	MOVEI	T1,T2			;Get pointer to name block
;	HRROI	T2,.GTNM1		;Get the first half
;	GETTAB	T2,			; of my user name
;	 $TYPES	(BUG)			;Should never happen!!!
;	HRROI	T3,.GTNM2		;Get the second half
;	GETTAB	T3,			; of my user name
;	 $TYPES	(BUG)			;Should never happen!!!
;	$TYPE	(N,,$NAM,<$NAM	| (User name)>)

	MOVEI	T1,[$NUMBER (<DEC 1234.5678>,FLOAT,SINGLE,IMMEDIATE,NORMAL,^D11,^D4,BLANK)]
	$TYPE	(N,,$NUM,<$NUM	| (  1234.5678 - float/normal)>)
	MOVEI	T1,[$NUMBER (<DEC -1237.5678>,FLOAT,SINGLE,IMMEDIATE,SCIENTIFIC,^D15,^D7,BLANK)]
	$TYPE	(N,,$NUM,<	| ( -1.2345678E+03 - float/scientific)>)
	MOVEI	T1,[$NUMBER (<-^D19>,INTEGER,SINGLE,IMMEDIATE,SIGNED,^D5,DEC,ZERO)]
	$TYPE	(N,,$NUM,<	| (-0019 - signed)>)
	MOVEI	T1,[$NUMBER (<^D19>,INTEGER,SINGLE,IMMEDIATE,UNSIGNED,^D5,DEC,ZERO)]
	$TYPE	(N,,$NUM,<	| (00019 - unsigned)>)
	MOVEI	T1,[$NUMBER (<^D10>,SPECIAL,SINGLE,IMMEDIATE,ALPHA,LOWER)]
	$TYPE	(N,,$NUM,<	| (j - special/alpha/lower)>)
	MOVEI	T1,[$NUMBER (<^D10>,SPECIAL,SINGLE,IMMEDIATE,ALPHA,UPPER)]
	$TYPE	(N,,$NUM,<	| (J - special/alpha/upper)>)
	MOVEI	T1,[$NUMBER (<^D99>,SPECIAL,SINGLE,IMMEDIATE,ROMAN,LOWER)]
	$TYPE	(N,,$NUM,<	| (xcix - special/roman/lower)>)
	MOVEI	T1,[$NUMBER (<^D99>,SPECIAL,SINGLE,IMMEDIATE,ROMAN,UPPER,ORDINAL)]
	$TYPE	(N,,$NUM,<	| (XCIXth - special/roman/upper/ordinal)>)
	MOVEI	T1,[$NUMBER (<^D999>,SPECIAL,SINGLE,IMMEDIATE,ENGLISH,LOWER)]
	$TYPE	(N,,$NUM,<	| (special/english/lower)>)
	MOVEI	T1,[$NUMBER (<-^D999>,SPECIAL,SINGLE,IMMEDIATE,ENGLISH,UPPER,ORDINAL)]
	$TYPE	(N,,$NUM,<	| (special/english/upper/ordinal)>)
	MOVEI	T1,[$NUMBER (^D123456,SPECIAL,SINGLE,IMMEDIATE,PICTURE,<$$$,$$9.99>,LITERAL,SAVE)]
	$TYPE	(N,,$NUM,<	| ( $1,234.56 - special/picture)>)
	MOVEI	T1,[$NUMBER (<-^D1,-^D1>,SPECIAL,DOUBLE,IMMEDIATE,PICTURE,<$$$,$$9.99CR>,LITERAL,SAVE)]
	$TYPE	(N,,$NUM,<	| (     $0.01CR - special/picture)>)

	MOVX	T1,^O17			;Octal 17
	$TYPE	(N,,$OCT,<$OCT	| (17 - octal)>)

	$TYPE	(N,,$IND,<$OPC	| (|)>,,,,<<$OPC [-1]>,<$NUM [[$NUMBER (.,INTEGER,SINGLE,IMMEDIATE,UNSIGNED,^D6,OCT,ZERO)]]>>)
	MOVX	T1,^O1234		;A PC
	$TYPE	(N,,$OPC,<	| (001234)>)

	MOVX	T1,"#"			;Get ASCII suffix
	$TYPE	(N,,$PFX,<$PFX	| (TST#)>)
	MOVX	T1,'SFX   '		;Get SIXBIT suffix
	$TYPE	(N,,$PFX,<	| (TSTSFX)>)

;	GETPPN	T1,			;Get my PPN
;	 JFCL				;What a kludge
;	$TYPE	(N,,$PPN,<$PPN	| (User PPN)>)

;	MOVX	T1,^O057		;Get a protection
;	$TYPE	(N,,$PRO,<$PRO	| (<057> - right justified))>)
;	MOVX	T1,^O057B8		;Get a protection
;	$TYPE	(N,,$PRO,<	| (<057> - left justified)>)

;	MOVEI	T1,[PTHBLK]		;Output a path block
;	$TYPE	(N,,$PTH,<$PTH	| (A path block)>)

	MOVX	T1,<RADIX50 0,SYMBOL>
	$TYPE	(N,,$R50,<$R50	| (SYMBOL)>)

	MOVX	T1,0			;Get my
	RUNTIM	T1,			; runtime
	$TYPE	(N,,$RUN,<$RUN	| (Current runtime - milliseconds)>)
	HRROI	T1,.GTTIM		;Get my
	GETTAB	T1,			; runtime 
	 $TYPES	(BUG)			;Error
	TXO	T1,TF%JIF		;Inform TYPER the runtime is in jiffies
	$TYPE	(N,,$RUN,<	| (Current runtime - jiffies)>)
	MOVX	T1,0			;Get my
	RUNTIM	T1,			; runtime
	TXO	T1,%TFSZ2		;Output the nearest 100th of second
	$TYPE	(N,,$RUN,<	| (Current runtime - fraction)>)

;;	MOVEI	T1,SCNBLK		;Type a SCAN block
;;	$TYPE	(N,,$SCN,<$SCN	| (SCAN block)>)

	MOVX	T1,'SIXBIT'		;Type SIXBIT message
	$TYPE	(N,,$SIX,<$SIX	| (SIXBIT)>)

	MOVE	T1,[-3,,[$SKP [SKIPA]	;Don't output
			 $ELS		;Complement the output
		 	 $EOS]]		;End-of-skip
	$TYPE	(N,,$IND,<$SKP	|This shouldn't be output|This should be output| (This should be output)>)

	MOVX	T1,^D4			;Type some spaces
	$TYPE	(N,,$SPC,<$SPC	"|" (4 spaces)>)

	MOVE	T1,[-2,,[$SUB	[[ASCIZ /$SUB	'|'/]]
			 $ASC	[[ASCIZ /Some text/]]]]
	$TYPE	(N,,$IND,<| ('Some text')>)

	SETO	T1,			;Get the current time
	$TYPE	(N,,$TIM,<$TIM	| (Current time)>)
	MSTIME	T1,			;Get the current time
	$TYPE	(N,,$TIM,<	| (Current time - millisecond time)>)
	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$TIM,<	| (Current time - universal date/time)>)

	SETO	T1,			;Get the current time
	$TYPE	(N,,$TML,<$TML	| (Current time)>)
	MSTIME	T1,			;Get the current time
	$TYPE	(N,,$TML,<	| (Current time - millisecond time)>)
	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$TML,<	| (Current time - universal date/time)>)

	PUSHJ	P,GETDAT		;Get the current date/time
	$TYPE	(N,,$UNV,<$UNV	| (Current date:time - universal date/time)>)

	MOVX	T1,TST.VN		;Get the version number
	$TYPE	(N,,$VER,<$VER	| (1B(3)-4)>)

	MOVX	T1,<123,,456>		;Get two half words
	$TYPE	(N,,$XWD,<$XWD	| (123,456)>)
	$TOC	TSTTRL - Trailer Test


	MOVX	T1,'TSTTRL'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to trailer test

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Trailer code test ***>)

	$TYPE	(I,TRL,$NON,<This information message >,N)
	$TYPE	(N,,$NON,<is being output by 2 $TYPE calls>)
	$TOC	TSTRET - Return Test


	MOVX	T1,'TSTRET'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to return test

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Return code test ***>)

	$TYPE	(I,NRM,$NON,<This is a N (normal) test>,,N)

	$TYPE	(I,NM1,$NON,<This is a N1 (normal + 1) test>,,N1)
	 $TYPES	(BUG)			;It didn't skip

	PUSHJ	P,[$TYPE (I,POP,$NON,<This is a P (POPJ) test>,,P)]

	PUSHJ	P,[$TYPE (I,PO1,$NON,<This is a P1 (POPJ1) test>,,P1)]
	 $TYPES	(BUG)			;It didn't skip

	$TYPE	(I,JMP,$NON,<This is a 'Jump' test>,,JMPTST)
	 $TYPES (BUG)			;It didn't jump
JMPTST:
	$TOC	TSTORN - Output Test


	MOVX	T1,'TSTOUT'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to output test

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Output code test ***>)

	MOVEI	T1,[OUTCHR T1		;Output the character
		    POPJ   P,]		;Return
	$TYPES	(OUT)			;Change output routine

	$TYPE	(N,,$NON,<This message is coming to you via OUTCHR's>)

	$TYPES	(OUT)			;Restore the output routine
	$TOC	TSTLST - List Test


	MOVX	T1,'TSTLST'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to list test

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** Substitution block code test ***>)

	$TYPE	(N,,$DEC,<$LST	| (19)>,,,,<[^D19]>)

	$TYPE	(N,,$IND,<	| | (17 1F)>,,,,<<$OCT [^O17]>,<$HEX [^O37]>>)

	$TYPE	(N,,$IND,<	| | (19 17)>,,INDJMP,,<<-INDSIZ,,INDBLK>>)

INDBLK:	$DEC	[^D19]
	$OCT	[^O17]
INDSIZ==.-INDBLK

INDJMP:
	$TOC	TSTSYS - $TYPES Test


	MOVX	T1,'TSTSYS'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to $TYPES test

	$TYPE	(N,,$NON)		;Type a CR-LF
	$TYPE	(T,,$NON,<*** $TYPES code test ***>)

	$TYPES	(BUG,TYPBUG)		;Test the $TYPES BUG function

TYPBUG:	SETZM	T1,.JBERR		;Test the
	SETO	T1,			; 'Error'
	$TYPES	(ERR)			; function
	$TYPE	(N,,$NON,<ERR	Now to see if ERR works>)
	$TYPE	(F,ERR,$NON,<This should cause .JBERR to be incremented>)
	SOSE	.JBERR##		;Skip if worked
	$TYPES	(BUG)			;I tried

	$TYPE	(N,,$NON,<JST	Now to see if JST works>)
	MOVE	T1,[-3,,[^D3,,^D1	;Job number (3 starting at 1)
			 ^D6,,^D5	;PPN (6 starting at 5)
			 ^D0,,^D19]]	;User name (0 starting at 19)
	$TYPES	(JST)
	PJOB	P1,			;Get my job number
	HRROI	P2,.GTPPN		;Get my
	GETTAB	P2,			; PPN
	 $TYPES	(BUG)			;#@^^#
	HRROI	P3,.GTNM1		;Get the first half
	GETTAB	P3,			; of my name
	 $TYPES	(BUG)			;@$%@$@%
	HRROI	P4,.GTNM2		;Get the second half
	GETTAB	P4,			; of my name
	 $TYPES	(BUG)			;@$%@$@%
	MOVE	T1,[-3,,[$DEC	P1	  ;Job number
			 $XWD	P2	  ;PPN
			 $NAM	[P3]]]	  ;User name
	$TYPE	(N,,$IND,<	|	|	|>)
	SETZ	T1,			;Reset the
	$TYPES	(JST)			; justification

	$TYPE	(N,,$NON,<PRM	Now to see if PRM works>)
	MOVX	T1,"%"			;Type TST%
	$TYPES	(PRM)
	$TYPE	(N,,$NON,<	TST% should have been typed>)
	MOVSI	T1,'XYZ'		;Type TSTXYZ
	$TYPES	(PRM)
	$TYPE	(N,,$NON,<	TSTXYZ should have been typed>)

	MOVE	T1,[1,,[USRRTN]]	;See if user routines work
	$TYPES	(RTN)
	MOVX	T1,'RTN   '
	$TYPE	(N,,$UR1,<RTN	Now to see if|works>,,N1)
USRRTN:	$TYPE	(N,,$SIX,< | >,N,P)

	MOVX	T1,.TFEST		;Change to Eastern
	$TYPES	(ZON)			; standard time
	SETO	T1,			;Eastern standard time
	$TYPE	(N,,$TML,<ZON	| (Eastern standard time)>)
	$TOC	TYPEND - End Test


	MOVX	T1,'TYPEND'		;Set the time stamp
	MOVEM	T1,TIMSTM		; to the end

	$TYPE	(N,,$NON)
	$TYPE	(T,,$NON,<*** The end ***>,,M)
	$TOC	GETDAT - Get the Current Date and Time


GETDAT:	MOVX	T1,%CNDTM	;Get the current
	GETTAB	T1,		; date and time
	 JSYS	227		;Try the TOPS-20 flavor (GTAD)
	POPJ	P,		;Return
	$TOC	The End


	$END	TYPTST
   