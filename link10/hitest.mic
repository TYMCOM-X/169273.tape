        BEGIN   HILVL

HILVL:  DB      FLS,PSH1,CURSOR,SRAM,PSH1,80,DARRAY,2,PSH1,1,DARRAY,1
        DB      PSH1,10,DARRAY,4,PSH1,1,DARRAY,3
        DB      PSH2
        DW      EDICT
        DB      PSH1,EVECT+1,SRAM,PSH1,EVECT,SRAM,TEST

RDBUFX: JSR     CHAIN   ; READ 1 LINE AND DISPLAY IT
        DB      FLS,ARRAY,1,STO
RD01:   DB      GETKB,DUP,PSH1,04,EQ ; EOB?
        DB      IFI,(RD02-.),POP,PSH1,3,FORI,PSH1,' ',PRT,LOOP,EOW
RD02:   DB      DUP,ARRAY,2,ARRAY,1,FET,OSTO  ; CHAR TO BUF
        DB      PRT,ARRAY,1,FET,PLS1,ARRAY,1,STO
        DB      ARRAY,1,FET,PSH1,80,GE
        DB      ENDI,(.-RD01),EOW

PRTX:   JSR     CHAIN   ; PRINT CHAR TO DISPLAY
        DB      PSH1,CURSOR,FRAM,PSH1,DSIZE,GE  ; IS DSPLY FULL
        DB      IFI,(EIF1-.),PSH2
        DW      DBUF+1
        DB      PSH2
        DW      DBUF
        DB      PSH1,DSIZE-1,MOVE,FLS,UPDISP  ; SHIFT DISPLY
        DB      PSH1,CURSOR,FRAM,MNS1,PSH1,CURSOR,SRAM  ; SUB 1 FROM CNT
EIF1:   DB      DOUT,PSH1,CURSOR,FRAM,DUP,PLS1,PSH1,CURSOR,SRAM,DCHAR,EOW

DOUTX:  JSR     CHAIN   ; PUT CHAR ON PSTK INTO DBUF(CURSOR)
        DB      ROMPTR,FRAM,PSH1,'D',EQ,IFI,(DOUTX9-.),DUP,PRTCHR
DOUTX9: DB      PSH2
        DW      DBUF
        DB      PSH1,CURSOR,FRAM,OSTO,PSH1,CURSOR,FRAM,DCHAR,EOW

; EXTRINSIC DICTIONARY

EDICT   EQU     .
TEST    EQU     (.-EDICT)/2+128
        DB      ((TESTX-EDICT+8000H) SHR 8),((TESTX-EDICT) MOD 256)
NLAT    EQU     (.-EDICT)/2+128
        DB      ((NLATX-EDICT) SHR 8),((NLATX-EDICT) MOD 256)
OLAT    EQU     (.-EDICT)/2+128
        DB      ((OLATX-EDICT) SHR 8),((OLATX-EDICT) MOD 256)
DOLAT   EQU     (.-EDICT)/2+128
        DB      ((DOLATX-EDICT) SHR 8),((DOLATX-EDICT) MOD 256)
SLOLP   EQU     (.-EDICT)/2+128
        DB      ((SLOLPX-EDICT) SHR 8),((SLOLPX-EDICT) MOD 256)
WAITSEC EQU     (.-EDICT)/2+128
        DB      ((WAITSECX-EDICT) SHR 8),((WAITSECX-EDICT) MOD 256)
DUP3    EQU     (.-EDICT)/2+128
        DB      ((DUP3X-EDICT+8000H) SHR 8),((DUP3X-EDICT) MOD 256)
INCASC  EQU     (.-EDICT)/2+128
        DB      ((INCASCX-EDICT+8000H) SHR 8),((INCASCX-EDICT) MOD 256)
PAWS    EQU     (.-EDICT)/2+128
        DB      ((PAWSX-EDICT+8000H) SHR 8),((PAWSX-EDICT) MOD 256)
CD      EQU     (.-EDICT)/2+128
        DB      ((CDX-EDICT+8000H) SHR 8),((CDX-EDICT) MOD 256)
DMSG    EQU     (.-EDICT)/2+128
        DB      ((DMSGX-EDICT+8000H) SHR 8),((DMSGX-EDICT) MOD 256)
CNVT    EQU     (.-EDICT)/2+128
        DB      ((CNVTX-EDICT+8000H) SHR 8),((CNVTX-EDICT) MOD 256)
BEXP    EQU     (.-EDICT)/2+128
        DB      ((BEXPX-EDICT) SHR 8),((BEXPX-EDICT) MOD 256)
DOTIME  EQU     (.-EDICT)/2+128
        DB      ((DOTIMEX-EDICT) SHR 8),((DOTIMEX-EDICT) MOD 256)
DPLUS   EQU     (.-EDICT)/2+128
        DB      ((DPLUSX-EDICT) SHR 8),((DPLUSX-EDICT) MOD 256)

NLATX:  LDA     PSTK,X
        DEC     PSP
        JSR     ANDLATCH
        JMP     NEXT

OLATX:  LDA     PSTK,X
        DEC     PSP
        JSR     ORLATCH
        JMP     NEXT

SLOLPX: LDA     PSTK,X
        DEC     PSP
        TAX
SLP1:   TAY
SLP2:   BIT     4000H
        DEY
        BNE     SLP2
        DEX
        BNE     SLP1
        JMP     NEXT

DOLATX: LDA     PSTK,X
        DEC     PSP
        JSR     DOLATCH
        JMP     NEXT

WAITSECX: LDA   #0
        STA     TMID
        NOP             ; PATCH FOR UP CTR *********************
        STA     THI
        STA     TECB
WTSLP:  JSR     SLEEP   ; WAIT FOR INTERRUPT
        CMP     TECB
        BEQ     WTSLP
        JMP     NEXT

DPLUSX: LDA     PSTK-1,X
        CLC
        ADC     PSTK-3,X
        STA     PSTK-3,X
        LDA     PSTK,X
        ADC     PSTK-2,X
        STA     PSTK-2,X
        DEX
        JMP     DSTO1

BEXPX:  LDA     PSTK,X  ; BINARY DIGIT
        STA     T00
        LDA     #0
        STA     T01
        LDA     PSTK-1,X
        BEQ     BEXP2   ; BRANCH IF EXP=0
        STA     T03
        LDA     BASE
        STA     T02
BEXP1:  JSR     IMPY    ; DIGIT X BASE
        DEC     T03     ; DEC EXPON.
        BNE     BEXP1   ; BR IF MORE
BEXP2:  LDA     T00     ; ADD NUM TO ACCUM
        CLC
        ADC     PSTK-3,X
        STA     PSTK-3,X
        LDA     T01
        ADC     PSTK-2,X
        STA     PSTK-2,X
        JMP     DSTO1   ; LEAVE ACCUM & EXP ON PSTK

DOTIMEX: LDA    #-1
        DEC     PSTK-3,X ; ADJUST TIME
        CMP     PSTK-3,X ; ROLL UNDER?
        BNE     DT1     ; BRANCH IF NO
        DEC     PSTK-2,X
DT1:    DEC     PSTK-1,X
        CMP     PSTK-1,X
        BNE     DTLOOPA
        DEC     PSTK,X

DTLOOPA: LDA    #-1
        CMP     PSTK-3,X
        BNE     DTLP1
        CMP     PSTK-2,X
        BEQ     DTLOOPB ; BRANCH IF ONTIME=0
DTLP1:  LDA     PSTK-3,X ; ONTIME-LO
        LDY     PSTK-2,X ; ONTIME-HI
        STA     TLO     ; TO TIMER
        STY     TMID
        LDY     #0
        STA     TECB
        STY     THI
        CMP     TLO     ; DID TIMER ROLL OVER?
        BNE     DTLP1   ; BRANCH IF YES
DTLP1A: CMP     TECB    ; TIMER EXPIRE YET?
        BEQ     DTLP1A  ; BRANCH IF NO

DTLOOPB: LDA    #-1
        CMP     PSTK-1,X
        BNE     DTLP2
        CMP     PSTK,X
        BEQ     DTLOOPA
DTLP2:  LDA     PSTK-1,X ; OFFTIME-LO
        LDY     PSTK,X  ; OFFTIME-HI
        STA     TLO
        STY     TMID
        LDY     #0
        STA     TECB
        STY     THI
        CMP     TLO
        BNE     DTLP2
DTLP2A: JSR     SLEEP   ; SHUT DOWN CPU
        CMP     TECB    ; OUR INTERRUPT?
        BEQ     DTLP2A  ; BRANCH IF NO
        BNE     DTLOOPA ; BRANCH IF YES

ONMSG:  DB      17,'ENTER "ON" TIME: '
OFFMSG: DB      18,'ENTER "OFF" TIME: '

CDX:    DB      PSH1,' ',PSH2
        DW      DBUF
        DB      STO,PSH2
        DW      DBUF
        DB      PSH2
        DW      DBUF+1
        DB      PSH1,DSIZE-1,MOVE,FLS,UPDISP,FLS,PSH1,CURSOR,SRAM,EOW

DMSGX:  DB      DUP2,SWAP,PLS1,SWAP,OVER,FLS,EQ,IFI,(DMSG1-.),PLS1
DMSG1:  DB      PSH2
        DW      DBUF
        DB      PSH1,CURSOR,FRAM,FLS,DPLUS
        DB      PSH1,6,FSTK,PSH1,6,FSTK,FET,MOVE ; MOV MSG TO DBUF
        DB      FLS,UPDISP
        DB      FET,PSH1,CURSOR,FRAM,PLUS,PSH1,CURSOR,SRAM,EOW

CNVTX:  DB      ARRAY,1,FET,DUP,FLS,EQ,IFI,(CVGO-.),EOW
CVGO:   DB      FLS,FLS,ROT,DUP,MNS1,SWAP
        DB      FORI,ARRAY,2,LNDX,OFET,CVB,IFI,(CVER1-.)
        DB      BEXP,MNS1,LOOP,POP,TRU,EOW
CVER1:  DB      XLOOP,POP,POP2,FLS,EOW


DUP3X:  DB      PSH1,3,FORI,PSH1,3,FSTK,LOOP,EOW

INCASCX:DB      DUP2,FET,PLS1,DUP,PSH1,3AH,LT,IFI,(INCA-.)
        DB      ROT,SWAP,STO,FLS,EOW
INCA:   DB      POP,PSH1,30H,ROT,SWAP,STO,TRU,EOW

PAWSX:  DB      PSH1,255,FORI,PSH1,5,FORI,LOOP,LOOP,EOW

TESTX:  DB      GETKB,DUP,ROMPTR,SRAM,DUP,PRT
        DB      DUP,PSH1,'A',EQ,IFI,(TSTB-.),POP
; TEST A : PULSE STRETCHER- FLIP STRETCH BIT WHILE ACCESSING LOC 4000H
HLPA:   DB      PSH1,(255-SLOMEM),NLAT,PSH1,100,SLOLP
        DB      PSH1,SLOMEM,OLAT,PSH1,71,SLOLP,FLS,ENDI,(.-HLPA)

TSTB:   DB      DUP,PSH1,'B',EQ,IFI,(TSTC-.),POP
; TEST B : LATCH TEST- CYCLE THRU CAPSULE ADDRESSES AND BEEPER
HLPB:   DB      PSH1,LATCHS,FRAM,PSH1,255-7,ANDI
HLPB1:  DB      PSH1,BEEPER,XORI,PSH1,8,FORI,DUP,LNDX,ORI,DOLAT,LOOP
        DB      FLS,ENDI,(.-HLPB1)

TSTC:   DB      DUP,PSH1,'C',EQ,IFI,(TSTD-.),POP
; TEST C : DISPLAY TEST- ROTATE ALL BINARY CODES THRU DISPLAY
HLPC:   DB      PSH1,DMASK,OLAT
        DB      PSH2,01,3FH,PSH2,00,3FH,PSH1,159,MOVE
        DB      PSH2,159,3FH,FET,MNS1,PSH2,159,3FH,STO
        DB      PSH1,255-DMASK,NLAT
        DB      PAWS,FLS,ENDI,(.-HLPC)

TSTD:   DB      DUP,PSH1,'D',EQ,IFI,(TSTE-.),POP
; TEST D : KEYBOARD TEST- KEYS PRESSED APPEAR ON DISPLAY
HLPD:   DB      PSET,RSET,RDBUF,FLS,ENDI,(.-HLPD)

TSTE:   DB      DUP,PSH1,'E',EQ,IFI,(TSTF-.),POP
; TEST E : TIMER INTERRUPT- DISPLAY TIME IN SECS FROM START
HLPE:   DB      PSH1,'0',PSH2
        DW      DBUF+11
        DB      PSH1,3,FORI,DUP3,LNDX,OSTO,LOOP,PSET
HLPE1:  DB      FLS,WAITSEC,UPDISP,PSH2
        DW      DBUF+13
        DB      INCASC,ENDI,(.-HLPE1),PSH2
        DW      DBUF+12
        DB      INCASC,ENDI,(.-HLPE1),PSH2
        DW      DBUF+11
        DB      INCASC,POP,FLS,ENDI,(.-HLPE1)

TSTF:   DB      DUP,PSH1,'F',EQ,IFI,(TSTG-.),POP
; TEST F : BATTERY CHECK- DISPLAY 'B' IF BAT BIT SET
HLPF:   DB      PSH2
        DW      LOBAT
        DB      FET,PSH1,80H,ANDI,IFI,(HLPF1-.)
        DB      PSH1,'B',ELSE,(HLPF2-.)
HLPF1:  DB      PSH1,' '
HLPF2:  DB      PSH2
        DW      DBUF+2
        DB      FET,OVER,NE,IFI,(HLPF3-.),PSH2
        DW      DBUF+2
        DB      STO,PSH1,2,DCHAR,ELSE,(HLPF4-.)
HLPF3:  DB      POP
HLPF4:  DB      FLS,ENDI,(.-HLPF)

TSTG:   DB      DUP,PSH1,'G',EQ,IFI,(TSTH-.),POP
; TEST G : STORE AND READ TIMER
        DB      PSH1,'A',PSH2,0FBH,03FH
        DB      PSH1,3,FORI,DUP3,LNDX,OSTO,LOOP,PSET
HLPG:   DB      PSH1,DMASK,OLAT
        DB      PSH2,0FBH,03FH,PSH2,15,3FH,PSH1,3,MOVE
        DB      PSH1,255-DMASK,NLAT
        DB      PAWS,FLS,ENDI,(.-HLPG)

TSTH:   DB      DUP,PSH1,'H',EQ,IFI,(TSTI-.),POP
; TEST H : TEST POWER CONSUMPTION
HLPH:   DB      PSH2
        DW      ONMSG
        DB      CD,DMSG,RDBUF,CNVT,IFI,(HLPH1-.) ; READ 'ON' TIME
        DB      ARRAY,2,ARRAY,4,ARRAY,1,FET,DUP,ARRAY,3,STO,MOVE,PSH2
        DW      OFFMSG
        DB      CD,DMSG,RDBUF,CNVT,IFI,(HLPH1-.) ; READ 'OFF' TIME
        DB      ARRAY,3,CD,DMSG,PSH1,'/',PRT,ARRAY,1,DMSG ; DSPLY TIMES
        DB      TRU,PSH1,CURSOR,SRAM,DOTIME
HLPH1:  DB      PSET,RSET,FLS,ENDI,(.-HLPH)

TSTI    EQU     .
        DB      DUP,PSH1,'I',EQ,IFI,(TSTJ-.),POP
; TEST I : DUMB TERMINAL UART TEST
        DB      ENAB    ; ENABLE UART & MODEM
HLPI:   DB      RDCHR,IFI,(HLPI3-.)
        DB      DUP,PSH1,10,EQ
        DB       IFI,(HLPI1-.),POP,PSH1,3EH
HLPI1:  DB      DUP,PSH1,13,EQ,IFI,(HLPI2-.),POP,PSH1,3CH
HLPI2:  DB      PRT,FLS,ENDI,(.-HLPI)
HLPI3:  DB      PSH1,EVQPI,FRAM,PSH1,EVQPO,FRAM,NE,ENDI,(.-HLPI)
        DB      GETKB,PRTCHR,FLS,ENDI,(.-HLPI)

TSTJ    EQU     .
        DB      FLS,ENDI,(.-HLPD)

        FINISH  HILVL
 