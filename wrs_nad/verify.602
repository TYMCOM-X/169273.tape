    SUBTTL	VERIFY.602 - VERIFIES PARAMETERS IN CONFIGURATION 
: ******************************************************************
: **                  PROPRIETARY INFORMATION                     **
: **                                                              **
: **  This  source code listing constitutes the proprietary pro-  **
: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
: **  this program listing, agrees that neither this listing nor  **
: **  the   information  disclosed herein nor any  part  thereof  **
: **  shall be  reproduced or transferred to other documents  or  **
: **  used  or  disclosed to others for manufacturing or for any  **
: **  other purpose except as specifically authorized in writing  **
: **  by  TYMNET, Incorporated.                                   **
: ******************************************************************
: **                   MODULE IDENTIFICATION                      **
: **                                                              **
: **  File Name          :  VERIFY.602      last change: 10/17/86 **
: **                                                              **
: **  File Description   :  This module verifies those parameters **
: **			    defined in CONSAT Configuration file  **
: **			    (NDxxxx.Tss). If the configuration    **
: **			    is wrong, error messages will be sent **
: **			    out during assembly time.		  ** 
: **                                                              **
: **  File Abstract      :  This module checks CONSAT related     **
: **			    symbols pertaining to the configura-  **
: **			    tion parameters for the users.	  **
: **                                                              **
: ******************************************************************
: **                    CHANGE LOG                                **
: **                                                              **
: **  Ver   Date    By   PIR/NSR  Changes (most recent at top)    **
: ** ----- -------- ---  -------- ------------------------------- **
: ** 06.02 11/26/86 DLG		  Corrected assembly error for 	  **
: **				  .30T				  **
: ** 06.02 11/04/86 dlg		  Removed PADCOM from kill list	  **
: ** 06.02 10/17/86 cab		  Changed LTEXT(TIDM,...) to use  **
: **				  delay defaults.		  **
: ** 06.02 10/01/86 cab		  Changed CS.VER TO 602 and added **
: **				  .30T/.120T/.240T/.480T logic.   **
: ** 06.01 07/22/86 sdw		  Changed CS.VER TO 601 and added **
: **				  area code 911 to outdial bad list*
: ** 06.00 05/29/86 LH		  Changed CS.VER TO 600		  **
: ** 05.00 04/29/86 sdw           Added	BT.FIX to fix bit arrays  **
: ** 05.00 04/03/86 sdw           Changed CS.VER to 500           **
: ** 04.03 02/24/86 LH   PIR 1869 Verify TID38 configuration.     **
: ** 04.03 01/17/86 SDW  PIR 1653 Verify the OUTDIAL configuration**
: ** 04.02 01/07/86 LH   PIR 1869 Check all configuration related **
: **                              to new TID35, TID36, TID37.     **
: **   ''     ''    ''            Add proprietary banner.         **
: **								  **
: ******************************************************************
	TITLE	CONsolidated tymSAT		
	SUBTTL	(VERIFY) VERIFY UNIVERSAL CONFIGURATION PARAMETERS


:    ***   ***  *   *  ****  ***  *     ***** ****    *   ***** ***** ****
:   *   * *   * **  * *     *   * *       *   *   *  * *    *   *     *   *
:   *     *   * * * *  ***  *   * *       *   *   * *****   *   ****  *   *
:   *   * *   * *  **     * *   * *       *   *   * *   *   *   *     *   *
:    ***   ***  *   * ****   ***  ***** ***** ****  *   *   *   ***** ****


:                     ***** *   * *   *  ****   *   *****
:                       *    * *  ** ** *      * *    *
:                       *     *   * * *  ***  *****   *
:                       *     *   *   *     * *   *   *
:                       *     *   *   * ****  *   *   *


:   *   * ***** ****  ***** ***** *****  ***    *   ***** *****  ***  *   *
:   *   * *     *   *   *   *       *   *   *  * *    *     *   *   * **  *
:   *   * ****  ****    *   ****    *   *     *****   *     *   *   * * * *
:    * *  *     *  *    *   *       *   *   * *   *   *     *   *   * *  **
:     *   ***** *   * ***** *     *****  ***  *   *   *   *****  ***  *   *

:	Insure Configuration
	C.FIX
	BT.FIX				:fix bit arrays  	*500 sdw
	KILL	C.FIX,C.FIXD		:won't need again
	KILL	P.FIX,P.FIXD		:won't need again
	KILL	SHOWME,LOCATION,DECLARE	:won't need again
	KILL	SERROR			:won't need again

:	If necessary, generate default text message
	 IF	1-\TIDMX
	LTEXT(TIDM,please type your terminal identifier)
        IF      1-TID.D2                :tid delays *500.sdw
TID.D1  EQ      1
        EI
	 EI	:TIDMX
        IF      1-TID.D2                :force some delay
TID.D2  EQ      1
        EI


:	Declare some global values
	GLOBAL(CPS,0)
	GLOBAL(DCPSSW,0)		:Default is simple Front Panel display
DCPSSW	EQ	DCPSSW*CPS		:meaningless if no CPS
	GLOBAL(NGRP,(NPORT+1F)/20*2)	:Number of groups

:	Put in revision level
CS.VER	EQ	$A 6			:Version Number
CS.REV	EQ	$A 2			:Revision Level
CS.FTL	EQ	$A 0			:Field-Test Level

NO.BITS	EQ	NBTARY*NGRP*10
	IF	0FFFF0000&NO.BITS
	 ERROR(BF WILL OVERFLOW, REDUCE NUMBER OF PORT GROUPS !)
	EI



					:(insure even for word addressing)
	GLOBAL(NAGRP,(NAPORT+0F)/10)	:Number of ASYNC groups
	GLOBAL(NSGRP,(NSPORT+0F)/10)	:Number of SIO groups
	GLOBAL(NOGRP,(NOPORT+0F)/10)	:Number of OUTDIAL groups
	GLOBAL(NHNGBK,0)		:No Hang on break
	GLOBAL(CONFIG,1)		:simple configuration report
	IFEQ(NSPORT,SHIST,0,0)		:SHIST depends on NSPORT
	GLOBAL(DB.STA,1)		:include extended DDT
	GLOBAL(DB.NTC,1)	:allow xddt handle both networkconsole and user


:	Verify that ACHOST was specified.
	 IF	\.AHOST
	GL	.AHOST
	 ELSE
	ERROR(ACHOST never invoked -- this MUST be declared,0)
	 EI	:\.AHOST


:	Check out printer/ASYNC relationship
	 IF	NUMPRN-NAPORT
	ERROR(NUMPRN exceeds NAPORT - reducing to equal,0)
NUMPRN	EQ	NAPORT
	 EI	:NUMPRN-NAPORT
	SUBTTL	(VERIFY) VERIFY PVC PARAMETERS

	IF	PVC			:Don't do it if no PVC's


:	See if configuration contains substitute text for PVC messages.
:	If not, define using default text.
	 IF	1-\PVCMX1
	PTEXT(1,circuit building in progress)
	 EI	:1-\PVCMX1

	 IF	1-\PVCMX2
	PTEXT(2,circuit lost - rebuilding)
	 EI	:1-\PVCMX2

	 IF	1-\PVCMX3
	PTEXT(3,ALO user name configuration error)
	 EI	:1-\PVCMX3

	 IF	1-\PVCMX4
	PTEXT(4,ALO password configuration error)
	 EI	:1-\PVCMX4

	 IF	1-\PVCMX5
	PTEXT(5,ALO login string configuration error)
	 EI	:1-\PVCMX5

	 IF	1-\PVCMX6
	PTEXT(6,circuit lost - will try later)
	 EI	:1-\PVCMX6

        IF $A31-PCOTRY; WARNING(PCOTRY less than 32d ... setting to 90d)
PCOTRY  EQ $A 90
        ELSE
        IF PCOTRY-$A7200; WARNING(PCOTRY greater than 7200d ... setting to 90d)
PCOTRY  EQ      $A 90
        EI
        EI

        IF $A31-PCORTY; WARNING(PCORTY less than 32d ... setting to 90d)
PCORTY  EQ $A 90
        ELSE
        IF PCORTY-$A7200; WARNING(PCORTY greater than 7200d ... setting to 90d)
PCORTY  EQ      $A 90
        EI
        EI

        IF -PCOWAT; WARNING(PCOWAT less than zero ... setting to zero)
PCOWAT  EQ $A 90
        ELSE
       IF PCOWAT-$A7200; WARNING(PCOWAT greater than 7200d ... setting to zero)
PCOWAT  EQ      $A 90
        EI
        EI

	 IF	NAPORT

:	Declare all ASYNC PVC ports to default PVCDEF

QQ	  EQ	1			:Bitch-flag
Q	  EQ	0			:port number
	  RE	NAPORT
	   IF	.BIT.(PVCG,Q)
	    IF	1-\PVCX|Q|
	     IF	1-\PVCDEF
	      IF QQ
	       ERROR(PVCDF never defined and PVCEX not specified,0)
	       ERRLIN(for ASYNC ports -,0)
QQ	       EQ 0
	      EI
	      .R1BIT(PVCX,Q)
	      REMARK  
	      NUMBER $A Q
	     ELSE
	      DEFAULT(PVCX|Q|,PVCDEF)
	     EI	:1-\PVCDEF
	    EI	:1-\PVCX|Q|
	   EI	:.BIT.
Q	   EQ	Q+1
	  ER

	  IF	1-QQ
	   ERREND( - Canceling PVC for these ports,0)
	  EI	:1-QQ
	 EI	:NAPORT

	 IF	NSPORT

:	Verify that all SIO PVC ports have SPVCEX declared

QQ	  EQ	1			:Bitch-flag
Q	  EQ	.SPORT			:port number
	  RE	NSPORT
	   IF	.BIT.(PVCG,Q)
	    IF	1-\PVCX|Q|
	     IF	QQ
	      ERROR(SPVCEX never declared for SIO ports -,1)
QQ	      EQ	0
	     EI	:QQ
	     .R1BIT(PVCG,Q)
	     REMARK   
	     NUMBER $A Q-.SPORT
	    EI	:1-\PVCX|Q|
	   EI	:.BIT.(PVCG,Q)
Q	   EQ	Q+1
	  ER

	  IF	1-QQ
	   ERREND( - Canceling PVC for these ports,0)
	  EI	:1-QQ
	 EI	:NSPORT


:	Examine PVC ports for special options

:	MACRO	T.OPT(N,OPT)	- Set OPT true if TID match on N.
T.OPT	MACRO(N,OPT) [
	IF	1-(((N)%PVCX|Q|)&TSMASK)
OPT	 EQ	OPT+1
	 GL	OPT
	EI
]

:	MACRO	T.FLAG(N,BIT)	- Set BIT(Q) true if TID match on N.
T.FLAG	MACRO(N,BIT) [
	IF	1-(((N)%PVCX|Q|)&TSMASK)
	 .S1BIT(BIT,Q)
	EI
]

:	Define T.NOP macro.  N is TID examined.  Y1-Yn are other
:	options, which are invalid fo this TID.  They are removed
:	(with a diagnostic) if they were set.
T.NOP	MACRO(N,Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8,Y9,YA,YB,YC,YD) [
	IF	1-(((N)%PVCX|Q|)&TSMASK)
	 .PVCDF(** Bug **,Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8,Y9,YA,YB,YC,YD)
	 IF	QV&PVCX|Q|
	  ERROR(PVC Port ,0)
	  NUMBER $A Q
	  ERREND( -- options not supported by Terminal handler -- Canceled,0)
PVCX|Q|	  EQ	(@QV)&PVCX|Q|
	 EI
	EI
]

Q	 EQ	0			:port number
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   GL	PVCX|Q|
	   IF	NONPI&PVCX|Q|
	    .S1BIT(.NPI,Q)
	   EI	:NONPI&PVCX|Q|
           T.NOP(TID1,WRU)
	   T.NOP(TID2,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID3,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID4,WRU)
	   T.NOP(TID5,WRU)
	   T.NOP(TID6,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID7,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID8,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID9,PAR,HDX,NOCRLF,NOLFCR)
         EI     :.BIT.(PVCG,Q)
Q       EQ      Q+1
        ER
Q	 EQ	0			:port number
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   GL	PVCX|Q|
	   IF	NONPI&PVCX|Q|
	    .S1BIT(.NPI,Q)
	   EI	:NONPI&PVCX|Q|
	   T.NOP(TIDSIO+TID8,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TIDSIO+TID9,PAR,HDX,NOCRLF,NOLFCR)
	   T.NOP(TID10,WRU)
	   T.NOP(TID11,WRU)
	   T.NOP(TID12,WRU)
	   T.NOP(TID13,WRU)
	   T.NOP(TID14,WRU)
	   T.NOP(TID15,WRU)
	   T.NOP(TID16,WRU)
	   T.NOP(TID17,WRU)
	   T.NOP(TID20,WRU)
	   T.NOP(TID21,WRU)
         EI     :.BIT.(PVCG,Q)
Q       EQ      Q+1
        ER                      :RE BROKEN IN TWO SINCE 640 CHAR LIMIT
Q	 EQ	0			:port number
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   GL	PVCX|Q|
	   IF	NONPI&PVCX|Q|
	    .S1BIT(.NPI,Q)
	   EI	:NONPI&PVCX|Q|
	   T.NOP(TID22,WRU)
	   T.NOP(TID23,WRU)
	   T.NOP(TID24,WRU)
	   T.NOP(TID25,WRU)
	   T.NOP(TID26,WRU)
	   T.NOP(TID27,WRU)
	   T.NOP(TID30,WRU)
	   T.NOP(TID31,WRU)
	   T.NOP(TID32,WRU)
	   T.NOP(TID33,PAR,KAT,UPC)
	   T.NOP(TID34,PAR,KAT,UPC)
	   T.NOP(TID35,PAR,KAT,UPC)	:** 4.02 LH
	   T.NOP(TID36,PAR,KAT,UPC,WRU)
	   T.NOP(TID37,PAR,KAT,UPC,WRU)	:** 4.02 LH

         EI :.BIT.(PVCG,Q)
Q       EQ      Q+1
        ER
Q	 EQ	0			:port number
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   GL	PVCX|Q|
	   IF	NONPI&PVCX|Q|
	    .S1BIT(.NPI,Q)
	   EI	:NONPI&PVCX|Q|
	   T.NOP(TID38,WRU)	:300 baud ascii for SPEEDLINK **4.03 LH
	   T.NOP(TID41,WRU)             :300 baud space par ascii
	   T.NOP(TID42,WRU)             :1200 baud space par ascii
	   T.NOP(TID43,WRU)             :2400 baud space par ascii
	   T.NOP(TID44,WRU)             :4800 baud space par ascii
	   T.NOP(TID45,WRU)             :9600 baud space par ascii
	   T.OPT(TIDSIO+TID8,BAUDY)
	  EI	:.BIT.(PVCG,Q)
Q	  EQ	Q+1
	 ER

Q	 EQ	0			:port number
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   T.FLAG(TIDSIO+TID8,.BAUD)
	   T.OPT(TIDSIO+TID9,BAUDY)
	   T.FLAG(TIDSIO+TID9,.BAUD)
	   T.OPT(TID8,BAUDA)
	   T.FLAG(TID8,.BAUD)
	   T.OPT(TID9,BAUDA)
	   T.FLAG(TID9,.BAUD)
	   T.OPT(TID31,VTEXT)
	   T.OPT(TID32,VTEXT)
	   T.OPT(TID33,TELEX)
	   T.FLAG(TID33,.TLXP)
	   T.OPT(TID34,BTELEX)
	   T.FLAG(TID34,.BTLX)
	   T.OPT(TID35,BTELEX)		:** 4.02 LH
	   T.FLAG(TID35,.BTLX)
	   T.OPT(TIDSIO+TID1,STOP2)
	   T.FLAG(TIDSIO+TID1,.STP2)
	  EI	:.BIT.(PVCG,Q)
Q	  EQ	Q+1
	 ER

Q	 EQ	0
	 RE	NPORT
	  IF	.BIT.(PVCG,Q)
	   T.OPT(TID36,TTELEX)
	   T.FLAG(TID36,.TTLX)
	   T.OPT(TID37,TTELEX)
	   T.FLAG(TID37,.TTLX)
	   T.OPT(TID38,TTELEX)
	   T.FLAG(TID38,.TTLX)	:300 baud ascii for SPEEDLINK **4.03 LH
	  EI	:.BIT.(PVCG,Q)
Q	  EQ	Q+1
	 ER

	 KILL	T.OPT,T.FLAG,T.NOP	:won't need these any more




	IF	NPAPRT

:	We have PVC .And. Port-addressing...verify that no addressible
:	ports have PCO set.
Q	EQ	0
	RE	NPAPRT
QQ	 EQ	PAC|Q|&0FF		:extract port number
	 IF	.BIT.(PVCG,QQ)		:PVC port?
	  IF	PVCX|QQ|&PCO		:PCO?
	   WARNING(Configuration conflict...addressible port ,1)
	   NUMBER $A QQ
	   REMARK  has PVC/PCO
	   WARLIN(...changing to PVC/SLO,0)
PVCX|QQ|   EQ	(PVCX|QQ|!SLO)%PCO
	  EI	:PCO
	 EI	:PVC
Q	 EQ	Q+1
	ER

	EI	:NPAPRT



	 IF	NMPVC			:Can't do it if not defined

:	Verify that all MPVC ports have MPVCUS declared.
Q	  EQ	0
	  RE	NMPVC
	   IF	.BIT.(.MPMU,Q)
	    ERROR(MPVCUS not invoked for MPVC port ,1)
	    NUMBER $A Q
	    ERREND
	   EI	:.BIT.(.MPMU,Q)
Q	   EQ	Q+1
	  ER

:	Verify that all MPVC ports have MPVCFO declared.
Q	  EQ	0
	  RE	NMPVC
	   IF	.BIT.(.MPMF,Q)
	    ERROR(MPVCFO not invoked for MPVC port ,1)
	    NUMBER $A Q
	    ERREND
	   EI	:.BIT.(.MPMF,Q)
Q	   EQ	Q+1
	  ER

	 EI	:NMPVC

	EI	:PVC


	SUBTTL  (VERIFY) VERIFY OUTDIAL PARAMETERS
        IF      OUTDIA
        IF      1-.OKINT                :set international numbers
        OUTBAD(204,306,403,416,418,506,514,519,604,610,613,705)
        OUTBAD(706,709,807,809,819,900,902,905,911)
        EI
        EI

        IF      1-OUTDIA                  :if no host make sure no other macros
        IF      \.OB0
        ERROR(OUTBAD used without OUTHOST - no host defined)
        EI
        IF      \O.MSGX
        ERROR(OUTGOOD used without OUTHOST - no host defined)
        EI
        IF      \.OTMS
        ERROR(OUTGREET used without OUTHOST - no host defined)
        EI
        EI :OUTDIA

:	If Telex ports must have IIX
:	IF	TELEX
:IIX	EQ	1
:	EI	:TELEX

:	Enhanced function defaults
  IF	X3ON
Q	EQ	0
	RE	NPORT
GLOBAL(EBSZ|Q|,$A128)
GLOBAL(X3PR|Q|,1)			:default - CCITT Simple Standard
GLOBAL(COM.|Q|,$A0)			
GLOBAL(INA.|Q|,0)			:inactivity timer
GLOBAL(MXA.|Q|,$A15)			:maximum assembly timer
GLOBAL(.EC|Q|`0,0FFFFFFFF)
GLOBAL(.EC|Q|`1,0FFFFFFFF)
GLOBAL(.EC|Q|`2,0FFFFFFFF)
GLOBAL(.EC|Q|`3,0FFFFFFFE)
GLOBAL(CUGP|Q|,0)			:default 0 for preferential CUG index
Q	EQ	Q+1
	ER
.DOB.(II,0,63)				:max CUG index is 99 decimal
	GLOBAL(.CAB`|II|,0)		:set undefined index to have 0 interlock code
.DOE.0
  EI	(X3ON)

:	Next, "kill" macros and symbols no longer needed:
	KILL	.SETNM,TIDDEF
	KILL	TID1,TID2,TID3,TID4,TID5,TID6,TID7,TID8,TID9,TID10
	KILL	TID11,TID12,TID13,TID14,TID15,TID16,TID17,TID18,TID19,TID20
	KILL	TID21,TID22,TID23,TID24,TID25,TID26,TID27,TID28,TID29,TID30
	KILL	TID31,TID32,TID33,TID34,TID35,TID36,TID37,TID38,TID39,TID40
	KILL	TID41,TID42,TID43,TID44,TID45
	KILL	NPI,SLO,PAR,PCO,HNG,HDX,CRLF
	KILL	NONPI,NOAID,NOALO,NOSLO,NOPAR,NOPCO,NOHNG,NOHDX,NOCRLF
	KILL	AID,ALO,SPAR,NOSPAR
	KILL	LFCR,TRS,RBP,TXT,DSC,MPC
	KILL	NOLFCR,NOTRS,NORBP,NOTXT,NODSC,NOMPC
	KILL	.PVRNG,PVCRNG,SPVRNG
	KILL	.PVCDF,PVCDF,.QVAID,.QVALO,.QVUPC
	KILL	.PXRNG,PVCEX,SPVCEX
	KILL	.UTRNG,UTXRNG,SUTXRG,MUTXRG
	KILL	MPVCUS,MPVCFO
	KILL	.SPRNG,.RPRNG,TID120,HD202,NOBUSY,NO.CP,TIDSPP
	KILL	TID240,TID480
	KILL	.H.DEF,ACHOST,.AHRNG,AHRNG,SHRNG,MHRNG
	KILL	ACCODE,.ACODE,.ACRNG,ACRNG,SCRNG,MCRNG
	KILL	.SETPA,ADRPRT,SADPRT
        KILL    OUTBAD,OUTGOO,OUTHOS,OUTGRE,.OTBAD,.OTGOD,.SORT,NUMASC

:	For TYMNET II, pass value of RBPTMP to RBP
	IF	\RBPTMP
	GL	RBP
RBP	EQ	RBPTMP
	EI	:\RBPTMP

:	Don't forger enhanced function ones
 IF	X3ON
	KILL 	PADREL,EDITBU,DATABU,INITMO,POSMOD
	KILL	MAXASS,INACTI,COMTIM,LESSHE
	KILL	.VPRNG
  EI	(X3ON)  

:	Identify 30 CPS ports for TID msg
:
Q	EQ	0
       IF	NAPORT
	RE	NAPORT
	IF	.BIT.(.120T,Q)
	.R1BIT(.30T,Q)
	ELSE	.BIT.(.240T,Q)
	.R1BIT(.30T,Q)
	.R1BIT(.120T,Q)
	ELSE	.BIT.(.480T,Q)
	.R1BIT(.30T,Q)
	.R1BIT(.120T,Q)
	.R1BIT(.240T,Q)
	ELSE
	.S1BIT(.30T,Q)
	EI
Q	EQ	Q+1
	ER
       EI	:NAPORT    