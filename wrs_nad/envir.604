	SUBTTL	ENVIR.602 - ISIS ENVIRONMENTAL-DEPENDENT PROCESSOR
: ******************************************************************
: **                  PROPRIETARY INFORMATION                     **
: **                                                              **
: **  This  source code listing constitutes the proprietary pro-  **
: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
: **  this program listing, agrees that neither this listing nor  **
: **  the   information  disclosed herein nor any  part  thereof  **
: **  shall be  reproduced or transferred to other documents  or  **
: **  used  or  disclosed to others for manufacturing or for any  **
: **  other purpose except as specifically authorized in writing  **
: **  by  TYMNET, Incorporated.                                   **
: ******************************************************************
: **                   MODULE IDENTIFICATION                      **
: **                                                              **
: **  File Name          :  ENVIR.602      last change: 10/29/86  **
: **                                                              **
: **  File Description   :  This contains the initialization      **
: **			    routines, the async rings drivers and **
: **			    general enviromental routines.        **
: **			    These general routines include the    **
: **			    polling, host status, and the routines **
: **			    which call the primitive bufferlet    **
: **			    routines.                             **
: **                                                              **
: **  File Abstract      :  This module is used to handle the in- **
: **			    teraction between general ISIS        **
: **			    enviromental dependent elements and   **
: **			    enviromental indepedent elements.     **
: **                                                              **
: ******************************************************************
: **                    CHANGE LOG                                **
: **                                                              **
: **  Ver   Date    By   PIR/NSR  Changes (most recent at top)    **
: ** ----- -------- ---  -------- ------------------------------- **
: ** 06.02 12/09/86 dlg		  changed TAMTBL from -1 to -3 to **
: **				  prevent async ring wrap for 300 **
: **    			  baud terminals.		  **
: ** 06.02 10/22/86 CAB		  Changed TAMTBL for 33ms timing  **
: ** 06.02 10/03/86 CAB	 NSR 870  Improved efficiency of fix.     **
: ** 06.01 09/15/86 CAB	 NSR 870  Modified POLL and A.VID to fix  **
: **				  intermittent port hang caused by**
: **				  TAM race condition when clearing**
: **				  async ring after getting TID char*
: ** 06.00 07/15/86 CAB		  Modified POLL to exit to IOPOL3.**
: ** 06.00 07/15/86 CAB		  Moved A.ASYN to I-file.         **
: ** 06.00 07/08/86 CAB		  Changed A.OBR to set AR.TAM value*
: ** 06.00 06/27/86 CAB		  Changed POLL to set TOPRTP.     **
: ** 06.00 06/20/86 DLG		  Changed GL SETALL to INITCS     **
: **				  added GL INITX3 and INITN3	  **
: ** 06.00 05/15/86 LH		  Use general routine PROBMG for  **
: **				  ring wrap report.		  **
: ** 05.00 04/10/86 LH            Report Async ring wrap to Sup.  **
: ** 04.02 03/11/86 sdw           POLL routine - details there    **
: ** 04.03 03/03/86 sdw  pir 1653 remove GETCHD since the command **
: **                              portt could suffer buffer zap   **
: ** 04.03 02/10/86 sdw           Check PORCV only if PVC defined **
: ** 04.03 01/28/86 SDW  n/a      Moved CRASH and ENTRY to INITIZ **
: ** 04.03 01/20/86 SDW  n/a      Moved data to DATA module       **
: ** 04.03 01/20/86 sdw  PIR 1653 Initialize Outdial and GETCHD   **
: ** 04.03 01/20/86 sdw  n/a      Created from ENVIR.402          **
: ******************************************************************

	SUBTTL	(ENVIR) DEFINITIONS


:    ***   ***  *   *  ****  ***  *     ***** ****    *   ***** ***** ****
:   *   * *   * **  * *     *   * *       *   *   *  * *    *   *     *   *
:   *     *   * * * *  ***  *   * *       *   *   * *****   *   ****  *   *
:   *   * *   * *  **     * *   * *       *   *   * *   *   *   *     *   *
:    ***   ***  *   * ****   ***  ***** ***** ****  *   *   *   ***** ****


:                     ***** *   * *   *  ****   *   *****
:                       *    * *  ** ** *      * *    *
:                       *     *   * * *  ***  *****   *
:                       *     *   *   *     * *   *   *
:                       *     *   *   * ****  *   *   *


:		   *****  **** *****  ****       ***** *****
:		     *   *       *   *             *     *
:		     *    ***    *    ***  *****   *     *
:		     *       *   *       *         *     *
:		   ***** ****  ***** ****        ***** *****


:	   ***** *   * *   * ***** ****   ***  *   * ***** *   * *****
:	   *     **  * *   *   *   *   * *   * ** ** *     **  *   *
:	   ****  * * * *   *   *   ****  *   * * * * ****  * * *   *
:	   *     *  **  * *    *   * *   *   * *   * *     *  **   *
:	   ***** *   *   *   ***** *  *   ***  *   * ***** *   *   *



	GL	C.INDM,C.IINM,LOGCH,SNDLOG
	GL	NLOGCH,LENGTH,PROBMG,IOPOL3
	GL	IZT,TIMOUT,EXDISM,TSCHED,CRASH,N.TOUT,POLL,CSDISM
	GL	FPANEL                  :globaled CERR in DATA *sdw 403
	GL	GCI,WCI,NBBFLT,NBUF,GCDALT

	 IF	NAPORT
	GL	TAMCHK
	GLOBAL(AHIST,0)			:record ASYNC transfers if 1
	GLOBAL(ASYERR,0)		:check ASYNC errors if 1
	 EI	:NAPORT

	GL	HTBLPT
  IF	X3ON
	GL	TOISIS
	GL 	MCI,GCD,WCD,IGCSCN,GCSCN,CALOK,SCTRPT,PCTRPT
	GL	INITCS,INITX3,INITN3
	GL	TEMPA,X3CPRO
	GL	FRECHO,FREDIT,IIXCAL,TURKEY,XTGATE,AAPORT,XPTEMP
	GL	IX.HIQ
     IF	UUNON
	GL	UUNVAL,DTECLG
	GL	GETBCD,DEFADR
     EI	:UUNON
     IF	NPAPRT
	GL	XINCAL
     EI :NPAPRT
  EI

HTBLPT	EQ	0E005C			:pointer to host-table

P0.MAX	EQ	0F0022			:max value for port-0 message types
P.MAX	EQ	0F0024			:max value for other message types
P.P0L	EQ	0F0026			:pointer to port 0 length-table
LENGTH	EQ	0F0028			:ISIS-message length table

:	Debugging and Tracing Switches
	GLOBAL(FORRUN,1)		:Default is FOREGROUND execution

	GLOBAL(SPED.A,0F0128)		:Async terminal-speeds supported

        SEG     A.CODE

        LO      DATA

:       Initialization moved to end of slot code
:
BAKLOO  HS      0                       :entry after doing initialiation
        IF      FORRUN
	LA	R0,EXEC			:set EXEC as start of foreground
	SVC	2,1
BAKLOP	SVC	FASTD,0			:run entirely in foreground from now on
	JAL	RLINK,FPDISP		:go do front-panel display
	JBS	BAKLOP
	 EI	:FORRUN

	KILL	SCHED,.INIT.		:Don't need these macros any more
	SUBTTL	(ENVIR) EXEC LOOP

EXEC	SVC	FASTD,0			:Fast Dismiss
	JAL	R0,TIMOUT		:Service timeouts
	 IF	1-FORRUN
	JAL	RLINK,FPDISP		:go do front-panel display
	JAL	R0,TIMOUT		:Service timeouts
	 EI	:1-FORRUN
	 IF	DB.TRC
	J	TRACON,,			:move someday, return this to J EXEC
	 ELSE
	J	EXEC
	 EI
	SUBTTL	(ENVIR) FRONT PANEL DISPLAY DRIVER

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::		    F R O N T   P A N E L   D I S P L A Y    		::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:	Format:	 DC: 0 | DN	(if configuration error)
:			then DC=device code, DN=device number
:	 else	delta-T|N.IPORT	(if no configuration error)
:			then high-order bit blinks at 1-second rate
FPDISP	LH	R0,CERR			:Doing Configuration-error?
	JNR	RLINK			:Yes
	LIS	R6,1			:Update Front-panel cycle-counter
	AH	R6,FPCNT
	STH	R6,FPCNT
	THI	R6,0F			:check if we've been here 16 times
	JNR	RLINK			:no...just exit
	L	R5,FASTC,,		:compute elapsed time
	LR	R1,R5			:copy time
	S	R1,FPETIM
	ST	R5,FPETIM		:and update time
	 IF	DCPSSW
	THI	R5,400			:1.7 second test
	JE	FPDIS2			:it's time...display CPS
	LIS	R0,0			:no...enable CPS calculation next time
	STH	R0,FPCPSC
	 EI	:DCPSSW
	SRLS	R1,4			:delta-t/16d
	SLLS	R1,8			:place digits
	OH	R1,IPORTS		:Display active ISIS ports
	THI	R6,40			:4 times on, 4 off...
	JEFS	FPDIS1			:...flash high-order bit
	OHI	R1,8000
FPDIS1	STH	R1,FPANEL		:Display on Front-panel
	JR	RLINK			:and exit
	 IF	DCPSSW

:	Display CPS
FPDIS2	TS	FPCPSC			:already calculated?
	JL	FPDIS3			:yes...just skip
	LIS	R0,0
	LHL	R1,CPSOUT		:output CPS
	AH	R1,CPSIN		:input CPS
	STH	R0,CPSIN		:re-initialize
	STH	R0,CPSOUT
	AM	R1,FPLCC		:accumulate long-time char count
	LHI	R2,RATE
	MHR	R1,R2			:R1= chars*clock tick-rate (per second)
	LR	R2,R5			:copy current time
	S	R2,FPSTIM		:compute difference
	ST	R5,FPSTIM		:and update
	DHR	R1,R2			:R2 = CPS
	STH	R2,FPSHAV		:save new value of short-CPS
	LH	R0,FPCPSX		:get counter
	SIS	R0,1			:decrement
	STH	R0,FPCPSX		:and save
	NHI	R0,0F			:time to recompute long average?
	JN	FPDIS3			:no...just skip
	L	R1,FPLCC		:get long count
	ST	R0,FPLCC		:..and reset it
	LHI	R2,RATE
	MR	R0,R2			:R1= chars*clock tick-rate (per second)
	LR	R2,R5			:copy current time
	S	R2,FPLTIM		:compute difference
	ST	R5,FPLTIM		:and update
	DR	R0,R2			:R1 = CPS
	STH	R1,FPLGAV		:save long-CPS average

:	proceed with display
FPDIS3	LHL	R0,FPSHAV		:assume short display
	THI	R5,1800			:Display 3.4 or 54.6 second average ?
	JNFS	FPDIS4			:Go display short (3.4) CPS
	LIS	R0,0			:long...assume blink off
	THI	R6,40			:Flash on or off ?
	JEFS	FPDIS4
	LHL	R0,FPLGAV		:on...get long CPS average
FPDIS4	STH	R0,FPANEL		:Display
	JR	RLINK
	 EI	:DCPSSW

	FO	DATA
	SUBTTL  (ENVIR)	CONSAT -- POLLING LOOP

	MO	.,CONSAT
	LO	DATA

:	Run every 10 ms.
:  The following routine was changed to halfwords (JFFOH) from
:  words (JFFOH).  Should be slightly faster.  Also, a check (POLTMP)
:  has been added.  This prevents ports than have been serviced from
:  being serviced again.  Previously many active ports in one group
:  could take too long.  After servicing the other ports in the group
:  the first port could have data again.  Ports in other groups would
:  wrap the async before getting called.  
:                                            sdw     ver 4.02
POLL	LHI	RPOL,(NGRP-1)*2		:For all groups...
VRET0	LCS	R0,1
	STH	R0,POLTMP		:Service port only once*402sdw
  IF	NSPORT
	STH	R0,P.DONE,RPOL		:set all bits
	JFS	VRET			:and skip

VDEF	RBT	RP,P.DONE		:set deferred-input
  ELSE	:NSPORT
VDEF	HS	0
  EI	:NSPORT

VRET	LHL	R0,RLA,RPOL		:If receiver active
	NH	R0,DQDAT,RPOL		:...that have data available
  IF	NSPORT
	NH	R0,P.DONE,RPOL		:.....Unless already serviced
  EI	:NSPORT
        NH      R0,POLTMP               :and ports not yet done*sdw402
	JFFOH	R0,VRET1		:Find out which one
	SIS	RPOL,2			:Else check next group
	JGE	VRET0
	J	XMIT

VRET1	STH	R0,POLTMP		:*402sdw
        LR	RP,RPOL			:compute port number
	SLLS	RP,3
	AR	RP,R1			:For bit tests
	GETPTP(RPI,RP,RP)		:Get port-table pointer
	L	RBP,.FTBUF,RPI		:Get From-terminal buffer pointer
	L	R5,.VSTAT,RPI		:Get pointer to Receiver Routine
	JALR	RLINK,R5		:...And go to it
	J	VRET			:Then do rest of ports

XMIT	LHI	RPOL,(NGRP-1)*2
XMIT0	LCS	R0,1
	STH	R0,P.DONE,RPOL		:set all bits
	STH	R0,POLTMP		:output only once to port *402sdw
	JFS	XRET

XDEF	RBT	RP,P.DONE		:set defered output

XRET	LHL	R0,TOPORT,RPOL		:check for xmit data in to term buf
  IF	X3ON
	OH	R0,FRECHO,RPOL		:check for xmit data in echo buf
  EI
  IF	NSPORT
	OH	R0,FRCXMT,RPOL		:force xmit-enable/disable rxon
  EI	:NSPORT			
	NH	R0,TAM,RPOL		:check if TAM allows xmit
	NH	R0,P.DONE,RPOL		:...unless deferring
	NH	R0,POLTMP     		:...unless have already done port
	JFFOH	R0,XMIT2		:Find port with all conditions ok
	SIS	RPOL,2			:none, adjust RPOL for next group
	JGE	XMIT0			:Do for all Groups
	J	IOPOL3			:Done...return

XMIT2	STH	R0,POLTMP		:once done always done*402sdw
        LR      RP,RPOL 		:compute port number
	SLLS	RP,3			:
	AR	RP,R1			:For bit tests
	GETPTP(RPI,RP,RP)		:get pointer to port-table
	L	RBP,.TTBUF,RPI		:pointer to to-terminal buffer
	L	R5,.XSTAT,RPI		:Locate output state
	JALR	RLINK,R5		:And go do it
	J	XRET			:Service next port



	SUBTTL	 (ENVIR) periodic update for host soft-shut states

	 IF	NPAPRT!OUTDIA

:	periodically, check all port-addressable hosts for soft-shut state
:	report any changes to supervisor.
        GL      CKHOST
CKHOST	LHI	R6,(NHOST-1)*2		:For all hosts
	L	R7,HTBLPT,,		:get pointer to host table

CKHST1	LH	R0,H.STAT,R6,		:check status
	JL	CKHST3			:<0 means shut, so don't bother
	LH	R4,0,R6,R7		:OK...find host number
        IF      OUTDIA
        CHI     R4,OTHOST            :outdial host has special route
        JNFS    CKHST4
        JAL   	R5,OT.HS,,                :outdial host status
        JFS     CKHST5
         EI     :OUTDIA
         IF     NPAPRT
CKHST4	JAL	R5,PA.HS,,		:look up the host status
        ELSE
CKHST4  EQ      .
        EI      :NPAPRT
CKHST5	LR	R5,R0			:save copy
	JEFS	CKHST2			:skip if = 0
	LIS	R0,1			:else set non-zero
	LR	R5,R0
CKHST2	XH	R0,H.STAT,R6,		:check if state changed
	STH	R5,H.STAT,R6,		:...and save new state
	JE	CKHST3			:no...don't say anything
	LIS	R0,$A 10		:yes...10d-byte message
	LIS	R1,0			:..for port 0
	LIS	R2,$A 10		:....type 10d, soft shut
	JAL	R4,SLOR			:Start-Logical-Output-Record
	LIS	R0,0
	JAL	R4,PUTCH		:pad for slot key
	LR	R0,R5			:copy state...0=soft-shut
	JAL	R4,PUTW			:ISIS will fill in host#
	LR	R0,R6
	SRHLS	R0,1			:index/2=relative host no.
	JAL	R4,PUTH			:relative Host number
	JAL	R4,ELOR			:End-Logical-Output-Record
CKHSTA					:return to not change host status
CKHST3	SIS	R6,2			:Repeat for all hosts
	JGE	CKHST1
	J	EXDISM			:exit back to timeout process

	EI	:NPAPRT
	SUBTTL	(ENVIR) CONSAT -- ASYNC PROCESSES
	
	 IF	NAPORT

:	A.VID is called when ASYNC terminal is identified.
:	R9 -	link register
:	RP -	Port number
A.VID	SBT	RP,TAM			:allow xmit
	SBT	RP,TAMTO		:check for hang
	RBT	RP,TAMTO1		:reset timer
	RBT	RP,TAMTO2		:reset timer
	LB	RBC,OBRATE,RP		:output baud rate
	JAL	RBF,A.TAM		:go set related TAM value
	JAL	RBF,A.DAT		:set data-mode
	LB	RBC,OBRATE,RP		:Set output baud-rate
	JAL	RBF,A.OBR		:send control
	LB	RBC,IBRATE,RP		:set input baud-rate
	JAL	RBF,A.IBR		:send control
	JR	R9			:and return


:	Initialize new port
:	RLINK -	Link register
:	RP -	Port number
:	RPI -	Port information table pointer
A.ANS	SBT	RP,TAM			:allow xmit
	SBT	RP,TAMTO		:check for hang
	RBT	RP,TAMTO1		:reset timer
	RBT	RP,TAMTO2		:reset timer
	LHI	RBC,TAMTID		:TAM for TID msg
	JAL	RBF,A.TAM		:go set it
	LB	RBC,OBRATE,RP		:speed for TID msg
	JAL	RBF,A.OBR		:go set it
	JR	RLINK			:

TAMCHK
	LHI	RPOL,(NAGRP-1)*2	:
TAMCH0	LCS	R0,1			:
	STH	R0,POLTMP		:
TAMCH1	LHL	R0,POLTMP		:GET PORTS NOT YET PROCESSED
	NH	R0,TAMTO,RPOL		:CHECK FOR PORTS ON TIMEOUT
	JFFOH	R0,TAMCH2		:ANY?
	SIS	RPOL,2			:NO 
	JGEBS	TAMCH0			:GO DO NEXT GROUP
	J	CSDISM,,		:EXIT

TAMCH2	STH	R0,POLTMP		:
	LR	RP,RPOL			:compute port number
	SLLS	RP,3			:
	AR	RP,R1			:For bit tests
        GETPTP(RPI,RP,RP)               :
	TBT	RP,TAM			:check for TAM port hang
	JN	TAMCH3			:OK if TAM set
	TBT	RP,RXON			:
	JN	TAMCH3			:OK if TAM off because backpressured
	L	R2,.AR.TT,RPI    	:get async ring address
	LH	R3,AR.TAM,R2		:
	JGEFS	TAMCH3			:OK if TAM count 0 or pos
	TBT	RP,TAM			:check TAM again in case ISIS driver
	JNFS	TAMCH3			:interrupted us since TBT RP,TAM
	SBT	RP,TAMTO2		:looks like a hang
TAMCH3	SBT	RP,TAMTO1		:
	JE	TAMCH1			:FIRST TIME JUST EXIT
	TBT	RP,TAMTO2		:WAS THERE A HANG?
	JEFS	TAMCH4			:NO
	SBT	RP,TAM			:YES, CLEAN UP HANG
TAMCH4	RBT	RP,TAMTO		:CLEAN UP FLAGS AND EXIT
	RBT	RP,TAMTO1		:
	RBT	RP,TAMTO2		:
	J	TAMCH1			:


	SUBTTL  (ENVIR)	CONSAT -- ASYNC ANSWER/HANG


:		HANG/ANSWER logic
:		-----------------

:	This is the environment-dependent portion of ASYNC HANG/ANSWER:
:	It performs the following sequence of functions:
:	1	Performs input for DSR and CP --> CPSAMP,
:	2	Calls AHNGAN to compute state changes
:			AHNGAN may in turn call upon A.ANS
:	3	Upon return from AHNGAN, outputs DTR.

        GL      HANGAN
HANGAN	LHL	R1,HAC			:get cursor for CPSAMP array
	SHI	R1,NAGRP*2
	JGEFS	HNGAN1			:Skip if non-negative
	LHI	R1,NAGRP*6		:else re-cycle
HNGAN1	STH	R1,HAC			:and save
	LHI	RPOL,(NAGRP-1)*2	:start with last group
HNGAN2	LH	R0,HDWCP,RPOL
	STH	R0,CPSAMP,R1,RPOL
	LH	R0,HDWDSR,RPOL
	STH	R0,NEWDSR,RPOL
	SIS	RPOL,2			:for next group
	JGEBS	HNGAN2
	JAL	R0,AHNGAN		:*** now call upon logic
	LHI	R1,(NAGRP-1)*2		:start with last group
HNGAN3	LHL	R0,DTR,R1		:Output DTR
	STH	R0,HDWDTR,R1
	SIS	R1,2			:for next group
	JGEBS	HNGAN3
	J	EXDISM			:then exit

	SUBTTL  (ENVIR)	CONSAT -- ASYNC INITIALIZATION

:	CRASH CODES
:	-----------
C.IZAS	EQ	80			:Failed connecting ASYNC logical unit

CNASYN	EQ	0C0			:new SVC to connect ASYNC

	SEG	A.ASYN
	BND	10			:Force to proper boundary
DQ	BS	NAGRP*10*2*AR.RS	:2 rings/port, AR.RS bytes/ring

	SEG	A.CODE

:	Create pointer tables
Q	EQ	DQ+AR.RS
AR.TT	WS	0			:pointers to to-terminal buffers
	 RE	NAGRP*10
	WC	Q
Q	EQ	2*AR.RS+Q
	 ER

Q	EQ	DQ
AR.FT	WS	0			:pointers to from-terminal buffers
	 RE	NAGRP*10
	WC	Q
Q	EQ	2*AR.RS+Q
	 ER

:	define layout of ring:

	D.STRU(0)			:declare begining of structure
AR.BCT	HS	1			:BCT...empty when =-1
AR.TAM	HS	1			:TAM threshold..TAM on when >0
AR.FC	BS	1			:fill cursor (rel. to ring start)
AR.EC	BS	1			:empty cursor (rel. to ring start)
AR.IC	HS	0			:initial cursor
	D.STRU(-1)			:return to normal address space

:	values for ISIS SVC that connects async port group
ASYBK	WC	DQ			:??
	WC	HDWCP			:hardware CP
	WC	HDWDSR			:hardware DSR
	WC	HDWDTR			:hardware DTR 
	WC	QDDAT			:output pending (slot => driver)
	WC	DQDAT			:input pending (driver => slot)
	WC	TAM			:TRANSMIT ACTIVE MASK

:	Port-Busy processing
:	==== ====
:	Check for busy-able ports which require service
:	Runs off timeout list, every 5.0 seconds.
        GL      A.BUSY
A.BUSY	LHI	RPOL,(NAGRP-1)*2	:For each group...
BSY.1	LH	R0,BUSY.A,RPOL		:attention required?
	JFFOH	R0,BSY.2		:find it
	SIS	RPOL,2			:else proceed to next group
	JGEBS	BSY.1			:
	J	EXDISM			:

BSY.2	LR	RP,RPOL			:
	SLLS	RP,3			:
	AR	RP,R1			:Compute port-number
	RBT	RP,BUSY.A		:cancel attention
        GERPI,RP,RP)               :
	LHI	RBC,0E3			:RS up
	TBT	RP,BUSY.H		:which way should it be set?
	JNFS	BSY.3			:
	LHI	RBC,0E4			:RS down
BSY.3	JAL	RBF,AWCP		:
	J	BSY.1			:and proceed
	SUBTTL  (ENVIR)	CONSAT -- ASYNC - GET a CHaRacter, PUT a CHAracter

:	Get a character
:	RCH -	Link register
:	RBP -	Buffer pointer
:	RBC -	Data Character
:	Normal return if Control-Signal:
:		Then Signal is in R5, Value (if any) in RBC
:	Else Skip (-4) Return.
AGETCH	JAL	RBF,AGCI		:Get the data character
	LR	RBC,RBC			:check for data
	 IF	CPS
	JEFS	AGETC2			:not data
AGETC1	MINH(R4,CPSIN)			:count input data
	J	4,RCH			:and skip-return
AGETC2	HS	0
	 ELSE
	JN	4,RCH			:data...skip-return
	 EI	:CPS
	JAL	RBF,AGMI		:Escaped...get next byte
	LR	R5,RBC			:test if data
	 IF	CPS
	JEBS	AGETC1			:escaped 0...data
	 ELSE
	JE	4,RCH			:Escaped 0...skip-return
	 EI	:CPS
	LHI	RBC,-80,R5		:Control...translate it
	JL	AGC.CR			:Shouldn't be .LT. 80
	LO	SIGNAL
	LIS	R5,TIBSIG		:check for TID IBR
	LHI	R4,80-90,RBC
	JLR	RCH			:yes...return it
	JGFS	AGETC3			:not break-begin either
	LIS	R5,BBSIG
	JR	RCH			:...just return signal
AGETC3	LIS	R5,BESIG		:assume break-end
	SIS	R4,91-90		:verify it
	JER	RCH			:yes...return

	FO	SIGNAL

AGC.CR	ABORT(RCH,0F2)			:crash if something not expected



:	Put a (data) character
:	RCH -	Link register
:	RBC -	Data Character
APUTCH	 IF	CPS;	MINH(RBF,CPSOUT);	 EI
	LR	RBF,RCH			:Copy return address
	LR	R4,RBC			:Check for 0
	JN	AWCI			:no...just proceed with AWCI
	J	AWCP			:Use AWCP to put it into buffer escaped
	SUBTTL	(ENVIR) CONSAT -- ASYNC CHARACTER MOVER

	DEFAULT(AHIST,0)		:keep history of activity if 1

	 IF	AHIST
:	Keep history
:	R0 -	Link
:	R1 -	Character
:	R3 -	Scratch
AHISTY	LH	R3,AHISX		:get history index
	JLR	R0			:do not store info now
	TBT	RP,AHISPT		:are we curious about this port?
	JER	R0			:no
	STB	RBC,AHISD,R3		:save char
	STB	RP,AHISD+1,R3		:save port #
	STH	RBF,AHISD+2,R3		:save caller
	AIS	R3,4			:advance cursor and save
	NHI	R3,AHSIZ-1
	STH	R3,AHISX
	JR	R0
	 EI	:AHIST



:	This begins the ASYNC character driver.  This driver uses the
:	ENGINE bufferlet code to send bytes across a 16-byte ring to
:	the ISIS ASYNC driver.

:	ASYNC Delay-generator
:	----- ----- ---------
:	RCH -	Link register
:	R5 -	Delay count
ADELAY	LIS	RBC,0			:reset MARGE
	STH	RBC,MARGE,RPI
ADELYG	LR	RBC,R5			:Check for *ANY* delay
	JER	RCH			:no...just return
	SHI	R5,8F			:check for overflow
	JLEFS	ADLAY1			:skip if not
	LHI	RBC,8F
	JAL	RBF,AWCP		:send max
	LR	RBC,R5			:second delay for remainder
ADLAY1	JAL	RBF,AWCP		:send rest of delay
	JR	RCH			:and exit

:	Set Input baud-rate
:	--- ----- ---------
:	RBC -	rate value
:	RBF -	link
A.IBR	OHI	RBC,0B0			:set IBR
	J	AWCP			:and go send it

:	Set Output baud-rate 
:	--- ------ --------- 
:	RBC -	rate value
:	RBF -	link
A.OBR	OHI	RBC,090			:set OBR
	J	AWCP			:and go send it

:	Set Output baud-rate related TAM value
:	--- ------ --------- ------- --- -----
:	RBC -	rate value (0-15 NORMAL, 16 SPECIAL)
:	RBF -	link
A.TAM	LH	R3,TAMTBL,RBC,RBC	:get TAM value for this baud rate
	L	R4,.AR.TT,RPI    	:get ring address
	STH	R3,AR.TAM,R4		:set TAM to meter output
	JR	RBF			:exit
:
:	TAMTBL contains TAM value for metering output.
:	Limit value is 2 characters for low speed ports
:	and 33 milliseconds of data for all other ports.
:
TAMTBL	HC	-3			:10 CPS	- CAB 6.00
	HC	-3			:15 
	HC	-3			:30 
	HC	-3			:40 
	HC	-3			:60 
	HC	-4			:120
	HC	-3			:30 
	HC	-3			:14.5 
	HC	-3			:10 
	HC	-3			:10 
	HC	-7			:240
	HC	$A -16			:480
	HC	-3			:
	HC	-3			:50 BAUD BAUDOT
	HC	-3			:75 BAUD BAUDOT
	HC	-3			:75 BAUD ASCII
TAMTID	EQ	$A16
	HC	-(AR.RS-AR.IC-3)	:TAMTID ENTRY

:	Set TID mode
:	--- --- ----
:	RBF -	link
A.TID	LHI	RBC,0D0			:set Connect mode
	J	AWCP			:and go send it

:	Set DATA mode
:	--- ---- ----
:	RBF -	link
A.DAT	LHI	RBC,0E0			:set Data mode
	J	AWCP			:and go send it

:	Set DISCONNECT mode
:	--- ---------- ----
:	RBF -	link
A.DSC	LHI	RBC,0E1			:set Disconnect mode
	J	AWCP			:and go send it

:	Set RS to 0
:	--- -- -- -
:	RBF -	link
A.RS.U	LHI	RBC,0E3			:set RS up
	J	AWCP			:and go send it

:	Set RS to 1
:	--- -- -- -
:	RBF -	link
A.RS.D	LHI	RBC,0E4			:set RS down
	J	AWCP			:and go send it

:	Dummy routine for compatable with solo consat
:	to set or reset OBRATE for break
	IF	TELEX
SBRATE	HS	0
RBRATE	JR	R8			:return
	EI	:TELEX

	IF 	TELEX!BTELEX!TTELEX
:	Have break state emitted to maintain Telex free state
:	Called from TLXBK2

BRKCBC	GETPTP(RPI,RP,RP)               :port number
	L	R2,.AR.TT,RPI    	:get index for async output ring
BRKCC1	LH	R0,AR.BCT,R2		:get count of bytes in ring
	CHI	R0,3			:is there already two breaks in ring
	JGER	R9			:else next
	JAL	RBF,A.BRK		:emit break state
	JBS	BRKCC1			:till full
	JR	R9			:return
	EI	:TELEX!BTELEX!TTELEX

:	Send .075 seconds of break state to terminal
:	---- ---- ------- -- ----- ----- -- --------
:	RBF	link
A.BRK	LHI	RBC,0E5			:output break
	J	AWCP

:	Clear Async Rings
:	----- ----- -----
:	U20R6	Link
A.CLR	L	R2,.AR.FT,RPI    	:get input ring address
	RBT	RP,DQDAT		:no data present
	LCS	R1,1			:clear async input ring
	STH	R1,AR.BCT,R2		:clear count
	LIS	R1,AR.IC		:init cursors
	STB	R1,AR.FC,R2		:
	STB	R1,AR.EC,R2		:
A.CLRO	L	R2,.AR.TT,RPI    	:get output ring address
	RBT	RP,QDDAT		:CAB - clear isis/slot semaphore
	LH	R0,AR.TAM,R2		:if 0, ISIS driver in strange state
	SBT	RP,TAM			:enable polling
	LCS	R1,1			:
	STH	R1,AR.BCT,R2		:clear async output byte count
:	LB	R1,OBRATE,RP		:get output baud rate
:	NHI	R1,0F			:force valid index
:	LH	R1,TAMTBL,R1,R1		:get TAM value for this baud rate
:	STH	R1,AR.TAM,R2		:set TAM value (to meter output)
	LIS	R1,AR.IC		:get initial cursor
	STB	R1,AR.FC,R2		:set fill cursor
	STB	R1,AR.EC,R2		:set empty cursor
	RBT	RP,TAMMER		:clear transition flag
	RBT	RP,OUTMSK		:
:	LR	R0,R0			:check ISIS driver state
:	JNR	R6			:exit if normal
:	RBT	RP,TAM			:ISIS driver in strange state
:	LIS	RBC,1			:put 1/30TH sec delay in ring
:	JAL	RBF,AWCP		:so TAM and driver will be
	JR	R6			:normal when delay cmd finished

:	Stop async output -- received ^S
:	RP	port number
:	R0	Link register
ASTOP	RBT	RP,QDDAT		:tell ISIS no data to output
	JER	R0			:return, if already no data
	SBT	RP,OUTMSK		:keep record, if data to output
	JR	R0			:and return

:	Resume async output -- received ^Q
:	RP	port number
:	R0	Link register
ARSUM	RBT	RP,OUTMSK		:was there data to output
	JER	R0			:if not return
	SBT	RP,QDDAT		:tell ISIS data to output
	JR	R0			:and return
	 

:	Get a char from Async input ring
:	RBF -	link
:	RBP -	preserved
:	RP -	Port number
:	RBC -	Character returned

:	Entry point for control-byte
AGMI	SBT	RP,DQDAT		:race condition?

AGCI	L	R4,.AR.FT,RPI    	:get input ring address
	LB	R3,AR.EC,R4		:get empty cursor
:	CLHI	R3,AR.RS		:is this correct?
:	JLFS	AGCIOK			:if so, then grab character
:	JAL	R0,AABORT		:otherwise, take notice!
AGCIOK	LB	RBC,0,R4,R3		:get char
	AIS	R3,1			:bump empty cursor
	CLHI	R3,AR.RS		:check for wrap
	JLFS	AGCI1			:
	LIS	R3,AR.IC		:
AGCI1	STB	R3,AR.EC,R4		:save updated empty cursor
	 IF	AHIST;	JAL	R0,AHISTY;	 EI	:AHIST
	LH	R0,AR.BCT,R4		:check wrap
	CHI	R0,AR.RS-AR.IC		:more chars than space
	JGEFS	A.WRAP			:
	MDCH(R0,AR.BCT,R4)		:decrement BCT
	JGER	RBF			:return if not empty
	CBT	RP,DQDAT		:need CBT for race condition w/ ISIS
	JR	RBF			:

A.WRAP	RBT	RP,DQDAT		:race condition?
	LCS	R1,1			:and clear input ring
	STH	R1,AR.BCT,R4		:no chars
	LIS	R1,AR.IC		:init cursors
	STB	R1,AR.FC,R4		:
	STB	R1,AR.EC,R4		:
	LO	SIGNAL
	LHI	R4,BLBSIG		:black ball em
	FO	SIGNAL
	JAL	RCH,PUTSIG		:
	LHI	R0,10			:set value for Probe msg
	STB	R0,PROBVL		:save value
	JAL	RCH,PROBMG		:send out Probe msg
	J	VDEF			:

:	Place a single char in Async output ring
:	RBF -	link
:	RBC -	char to transmit
:	RBP -	Preserved
AWCI	 IF	AHIST;	JAL	R0,AHISTY;	 EI
	L	R4,.AR.TT,RPI    	:get output ring address
	LB	R3,AR.FC,R4		:get fill cursor
	STB	RBC,0,R4,R3		:stuff the character
	AIS	R3,1			:update fill cursor
	CLHI	R3,AR.RS		:check for wrap
	JLFS	AWCI1			:
	LIS	R3,AR.IC		:wrapped, so reset to beginning
AWCI1	STB	R3,AR.FC,R4		:save updated fill cursor
	MINH(R0,AR.BCT,R4)		:Increment BCT
	JGFS	AWCI2			:already there...check TAM
	CBT	RP,QDDAT		:need CBT for race condition w/ ISIS
	AHM	R0,AR.TAM,R4		:and update TAM count
	JR	RBF			:exit

AWCI2	AHM	R0,AR.TAM,R4		:Update TAM count
	JLR	RBF			:Return...no backpressure
	JGFS	AWCI3			:greater, check TAM
	SBT	RP,TAMMER		:Note that passed zero
	JR	RBF			:exit

AWCI3	RBT	RP,TAMMER		:Been here yet?
	JER	RBF			:yes
	CBT	RP,TAM			:need CBT for race condition w/ ISIS
	JR	RBF			:exit


:	Place escaped char in Async output ring
:	RBF -	link
:	RBP -	preserved
:	RBC -	char to transmit
AWCP	SLLS	RBC,8			:preceed with null
	 IF	AHIST;	JAL	R0,AHISTY;	 EI
	L	R4,.AR.TT,RPI    	:get output ring address
	LB	R3,AR.FC,R4		:get fill cursor
	STB	RBC,0,R4,R3		:place char
	AIS	R3,1			:bump fill cursor
	CLHI	R3,AR.RS		:check for wrap
	JLFS	AWCP1			:
	LIS	R3,AR.IC		:wrapped, so reset to beginning
AWCP1	SRLS	RBC,8			:normal exit...position the character
	STB	RBC,0,R4,R3		:save char
	AIS	R3,1			:bump fill cursor
	CLHI	R3,AR.RS		:check for wrap
	JLFS	AWCP2			:
	LIS	R3,AR.IC		:wrapped, so  reset to beginning 
AWCP2	STB	R3,AR.FC,R4		:save cursor
	 IF	AHIST;	JAL	R0,AHISTY;	 EI
	MINH(R0,AR.BCT,R4)		:Bump BCT
	JGFS	AWCPX1			:
	AHM	R0,AR.BCT,R4		:Bump BCT again
	LIS	R0,2			:and TAM count
	AHM	R0,AR.TAM,R4		:...twice
	CBT	RP,QDDAT		:need CBT for race condition w/ ISIS
	JR	RBF			:

AWCPX1	AHM	R0,AR.BCT,R4		:update byte count
	AHM	R0,AR.TAM,R4		:Update TAM count
	JGFS	AWCPX2			:Check if TAM must be fiddled with
	SBT	RP,TAMMER		:Mark transition
AWCPX2	AHM	R0,AR.TAM,R4		:bump TAM again
	JLER	RBF			:
	RBT	RP,TAMMER		:Has it been marked yet?
	JER	RBF			:If reset, then TAM already done
	CBT	RP,TAM			:need CBT for race condition w/ ISIS
	JR	RBF			:

AABORT	ABORT(R0,65)			:perhaps SIO or MPVC running Async
	SUBTTL	(ENVIR) CONSAT -- PRINTER PROCESSES

	 IF	NUMPRN

:	****  ****  ***** *   * ***** ***** ****
:	*   * *   *   *   **  *   *   *     *   *
:	****  ****    *   * * *   *   ****  ****
:	*     *  *    *   *  **   *   *     *  *
:	*     *   *   *   *   *   *   ***** *   *


:		PRINTER set-up
:	Verify that there are 2 ROTORS available (for
:	compression overflow), then set up pointers.
:	Skip-4 return if no room, else normal return
:	R9 -	Pointer to current rotor entry
:	R6 -	pointer to next char within rotor
:	RBF -	Link register
:	RP -	Printer (port) number
SETPRN	LR      R13,RP
        AR      R13,R13
        L	R9,SVCPTR,R13,R13	:get current rotor entry
	LHL	R0,0,R9			:is this rotor available?
	JN	4,RBF			:busy...skip return
	L	R6,0C,R9		:get next rotor pointer
	LHL	R0,0,R6			:is that rotor available?
	JER	RBF			:yes...normal return
	J	4,RBF			:busy...skip return


:	Print multiple characters
:	RBC -	Character to print
:	R6 -	Number of time to print it
:	RCH -	Link register
:	RP -	Printer (port) number
:	Normal return - just proceed
:	Skip (4) return - buffer flushed
PMULT	CLHI	R6,1			:how many chars to output?
	JLR	RCH			:none...quit
	JE	PMULTX			:only 1...skip
	CLHI	RBC,0A0			:Blanks?
	JE	PMULT1			:yes...just proceed

:	Character compression
	JAL	RBF,PCHAR		:no...print the character
	 NOP	0			:don't care about skip returns
	SIS	R6,1			:reduce the count
	LHI	RBC,40,R6		:set up the compression
	SHI	R6,3F			:must we do it in one or two steps?
	JLE	PMULT3			:one...go do it
	LHI	RBC,7F			:two...first value
	LHI	R6,41,R6		:...and remainder
	J	PMULT2			:skip to do it

:	Blank compression
PMULT1	LR	RBC,R6			:copy the count
	SHI	R6,3F			:how many blanks?
	JLEFS	PMULT3			:less than 40..send it
	AIS	R6,1			:more than 40...
	LHI	RBC,3F			:send this many first...

:	Send compression in 2 passes
PMULT2	JAL	RBF,PCHAR
	 NOP	0			:don't care about skip returns
	LR	RBC,R6			:this many more

:	Send remainder of compression
PMULT3	JAL	RBF,PCHAR		:send it
	 NOP	0			:don't care about skip returns
	J	4,RCH			:and skip-exit

:	Output single char...just pass through PCHAR
PMULTX	LR	RBF,RCH			:copy return and fall through


:	Print a character
:	RBC -	Character to print
:	RBF -	Link register
:	RP -	Printer (port) number
:	Normal return - just proceed
:	Skip (4) return - buffer flushed
PCHAR	LHL	R3,2,R9			:get cursor
	STB	RBC,10,R9,R3		:store the character
	AIS	R3,1			:bump the count
	STH	R3,2,R9			:put it back
	LR	RBC,RBC			:flush if CR (0)
	JEFS	PFLUSH
	CLHI	R3,BUFSIZ-11		:this is the buffer size
	JLER	RBF			:return if ROTOR-buffer not yet full


:	Flush current Print-rotor
:	RBF -	Link register
:	RP -	Printer (port) number
:	R13 -	2*Printer (port) number
:	Normal return - just proceed
:	Skip (4) return - buffer flushed
PFLUSH	LH	R3,2,R9			:check buffer
	JER	RBF			:empty...just exit
	LIS	R3,1			:get the write command
	STH	R3,0,R9			:put into the SVC block
	LIS	R3,2			:prepare transfer command
	STH	R3,8,R9
	LB	R3,LUNPRN,RP		:get the LUN
	LR	R4,R9			:...and pointer to rotor entry
	L	R9,0C,R9		:get next rotor entry
        LR      R13,RP
        AR      R13,R13                 :calculate 2*rp
	ST	R9,SVCPTR,R13,R13	:update entry
	LIS	R5,0			:Init it's count
	STH	R5,2,R9
	LA	R5,STAT,R13		:address for status
	SVC	IO,40+R3		:and start I/O
	 NOP	0			:SVC normal return..I/O already in progress
	J	4,RBF			:SVC skip return...I/O started

	 EI	:NUMPRN

	 EI	:NAPORT
	FO	DATA
	EM	:CONSAT
	SUBTTL  (ENVIR) GET/PUT a CHaRacter, PUT a SIGnal

:	Get a character
:	RCH -	Link register
:	RBP -	Buffer pointer
:	RBC -	Data Character
:	Normal return if Control-Signal:
:		Then Signal is in R5, Value (if any) in RBC
:	Else Skip (-4) Return.
GETCHR	JAL	RBF,GCI			:Get the data character
	LR	RBC,RBC			:check for data
	JN	4,RCH			:data...skip-return
	JAL	RBF,GCI			:Escaped...get next byte
	LR	R5,RBC			:test if data
	JE	4,RCH			:Escaped 0...skip-return
	TBT	R5,XBYTE1		:Control...test for value
	JER	RCH			:no...just return
	JAL	RBF,GCI			:yes...get it
	JR	RCH			:and return

:	Table of bits which specify multi-byte signals
XBYTE1	HC	$2 0100001100000000,0000000000000000
	HC	$2 1010101010101010,1010101010101010
	HC	$2 1010101010101010



:	Put a (data) character
:	RCH -	Link register
:	RBC -	Data Character
PUTCHR	LR	R5,RBC			:Check for 0
	JNFS	PUTCH1			:no...skip
	JAL	RBF,WCI			:yes...escape it
	LIS	RBC,0			:restore character
PUTCH1	LR	RBF,RCH			:copy return
	J	WCI			:and place data


:	Put a signal into buffer
:	RCH -	Link register
:	RBP -	Buffer pointer
:	R4 -	Signal number
:	RBC -	Value (if any)
PUTSIG	LBR	R5,RBC			:copy data
	EXBR	R5,R5
	STBR	R4,R5			:copy signal
	LIS	RBC,0			:place escape
	JAL	RBF,WCI
	LBR	RBC,R5			:restore signal
	TBT	RBC,XBYTE1		:check length
	JEFS	PUTSG1			:Skip if no value present
	JAL	RBF,WCI			:else place the signal,
	EXBR	RBC,R5			:...followed by data
PUTSG1	LR	RBF,RCH			:copy return address
	J	WCI			:and send last element
  4fY15