    SUBTTL	 IIX.602 - UTILITY FOR IIX GLOBAL MESSAGE
: ******************************************************************
: **                  PROPRIETARY INFORMATION                     **
: **                                                              **
: **  This  source code listing constitutes the proprietary pro-  **
: **  perty of TYMNET, Incorporated. The recipient, by receiving  **
: **  this program listing, agrees that neither this listing nor  **
: **  the   information  disclosed herein nor any  part  thereof  **
: **  shall be  reproduced or transferred to other documents  or  **
: **  used  or  disclosed to others for manufacturing or for any  **
: **  other purpose except as specifically authorized in writing  **
: **  by  TYMNET, Incorporated.                                   **
: ******************************************************************
: **                   MODULE IDENTIFICATION                      **
: **                                                              **
: **  File Name          :  IIX.602         last change: 11/26/86 **
: **                                                              **
: **  File Description   :  Utility routines handle global message**
: **			    8080 - select dialect command message **
: **			    8084 - normal logon status		  **
: **			    8086 - product id and version	  **
: **			    8087 - request product id and version **
: **			    Utility routines are used to send global
: **			    messages to the other end.		  **
: **			    GET2BD & GET1BD get 2 bytes and 1 byte**
: **			    of data following SIIX signal respectly*
: **								  **
: **  File Abstract      :  Make IIX global message routine general*
: **			    so that various IIX processor can call**
: **			    them. 				  **
: **								  **
: ******************************************************************
: **                    CHANGE LOG                                **
: **                                                              **
: **  Ver   Date    By   PIR/NSR  Changes (most recent at top)    **
: ** ----- -------- ---  -------- ------------------------------- **
: ** 06.01 11/26/86 dlg		  Changed name from 6.01 to 6.02  **
: ** 06.01 11/20/86 dlg		  Removed test for TIIX already   **
: **				  found	with conditional return.  **
: ** 06.01 09/09/86 LH		  Output ALO's login string after **
: **				  "please log in" text.           **
: ** 06.00 07/02/86 LH  	  Add special routine to save and **
: **				  change .XSTAT for IIX xmitter.  **
: ** 06.00 05/19/86 LH   PIR 1824 New module IIX created	  **
: ** 04.02 01/07/86 LH            Add proprietary banner and header*
: **								  **
: ******************************************************************
	SUBTTL	(IIX) UTILITY FOR IIX GLOBAL MESSAGE


	GL	SELDLT,LOGSTA,PRODCT,REQPRD,SNDSIX,SNDTIX,SNDSDC
	GL	SNDDSC,SNDSHR,SNDDHR,SNDNLS,SNDRSI,SNDPIV,SNDRPI
	GL	GET2BD,GET1BD,LGSTAT,PROBMG

	SEG	A.CODE

	MO	.,IIX
	LO	DATA

	SUBTTL	(IIX) UTILITIES FOR SELECT DIALECT VALUE


:	R4	link register
:	RBC	passes 2 byte of data back

SELDLT	LI	R6,8080			:default 8080 as selected value
	ST	R6,.IIXVL,RPI		:no dialect value selected
SELDL0	JAL	R6,GET2BD		:get 2 bytes of dialect value
	J	SELSIG			:go to select signal processor
	TBT	RP,ASCIIX		:ASCII dialect capable?
	JEFS	SELDL1			:no, skip to check others
	CI	RBC,8081		:ASCII data dialect value?
	JE	STOIIX			:yes, store IIX dialect value
SELDL1	TBT	RP,GATIIX		:gateway IIX capable?
	JEFS	SELDL2			:no, skip to check others
	CI	RBC,8082		:gateway IIX dialect value?
	JE	STGATE			:yes, store IIX dialect value
SELDL2	TBT	RP,PADIIX		:PAD IIX capable?
	JEFS	SELDL3			:no, skip to check others
	CI	RBC,8083		:PAD IIX dialect value?
	JE	STOIIX			:yes, store IIX dialect value
SELDL3	TBT	RP,TLXIIX		:transparent TELEX IIX capable?
	JEFS	SELDL4			:no, skip to check others
	CI	RBC,8091		:TELEX IIX dialect value?
	JE	STOIIX			:yes, store IIX dialect value
SELDL4	TBT	RP,SMDIIX		:S-mode IIX capable?
	JE	SELDL0			:jump back to get next 2-byte choice
	CI	RBC,8093		:S-mode IIX dialect value?
	JE	STOIIX			:yes, store IIX dialect value
	J	SELDL0			:jump back to get next 2-byte choice

:	STOIIX routine, if there are couple of dialect values, choose
:	the greater value as a selected dialect value

STGATE	SBT	RP,XTGATE		:through TYMNET gateway
STOIIX	C	RBC,.IIXVL,RPI		:old selected dialect value
	JL	SELDL0			:get next choice if current < old value
	ST	RBC,.IIXVL,RPI		:otherwise, save current value
	J	SELDL0			:get next choice

:	SELSIG	routine

SELSIG	JR	R4			:received signal, process

:	LGSTUS, logon-status routine
:	R4	link register
:	RBC	contains one byte of status message
	GL	MCI
LOGSTA	JAL	R6,GET1BD		:get logon-status byte
	J	0,R4			:signal - normal return
	ST	R4,.IXSAV,RPI		:save link
	ST	RLINK,.IIXSV,RPI	:save link
	LR	R9,RBC			:R9 contains tatus message
	RBT	RP,FL.LOG		:do not flush logon char. to ISIS
	L	R5,.TTBUF,RPI		:data in source buffer
	L	R6,.LGBUF,RPI		:temporarily store data in dest. buffer
	JAL	RCH,MCI			:move data from source to dest.
	JAL	RLINK,LGSTAT		:to logon-status processor, then text
	L	R5,.LGBUF,RPI		:**6.01 LH 09/08/86
	L	R6,.TTBUF,RPI
	JAL	RCH,MCI			:restore data to to-terminal buffer
	L	R4,.IXSAV,RPI		:restore link
	L	RLINK,.IIXSV,RPI	:restore link
	J	4,R4

:	PRODCT routine, get 2 byte of product id, 1 byte of version
:	number and 1 byte of revision level, and then save into port table
:	R4	link register

PRODCT	JAL	R6,GET2BD		:get product id
	J	0,R4			:signal -normal return
	STH	RBC,.IIXID,RPI		:save product id of selected dialect
	JAL	R6,GET2BD		:get version number and revision 
	J	0,R4			:signal - normal return
	STH	RBC,.IIXID+2,RPI	:save version and revision
	J	4,R4			:data - skip 4 return

:	REQPRD - request product id and version number.  Send product
:	id and version number back to requesting interface.
:	R4	link register

REQPRD	ST	R4,.IXSAV,RPI		:save link
	L	RBP,.FTBUF,RPI		:get buffer to net
	JAL	R6,SNDSIX		:send SIIX command
	JAL	R6,SNDPIV		:send prod id and vers
	JAL	R6,SNDTIX		:send TIIX command
	L	R4,.IXSAV,RPI		:restore link
	JR	R4			:and return



	SUBTTL	(TELEX) IIX UTILITIES

:	SNDSIX - send SIIX command to network
:	R6	link register
:	RBP	buffer pointer

	 LO	SIGNAL
SNDSIX	LHI	R4,SIXSIG		:get SIIX command
	 FO	SIGNAL
	JAL	RCH,PUTSIG		:and send it
	JR	R6

:	SNDTIX - send TIIX command to network
:	R6	link register
:	RBP	buffer pointer

	 LO	SIGNAL
SNDTIX	LHI	R4,TIXSIG		:get TIIX command
	 FO	SIGNAL
	JAL	RCH,PUTSIG		:and send it
	JR	R6

:	SNDSDC - send IIX select dialect command	
:	R6	link register
:	RBP	buffer pointer

SNDSDC	LHI	RBC,80			:get select dialect message
	JAL	RCH,PUTCHR		:and send it
	JAL	RCH,PUTCHR		:and send another 80
	JR	R6

:	SNDDSC - send IIX dialect selected message
:	R6	link register
:	RBP	buffer pointer

SNDDSC	LHI	RBC,8180		:get dialect selected message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC			:now RBC=8081
	JAL	RCH,PUTCHR
	L	RBC,.IIXVL,RPI		:get first byte of dialect
	EXBR	RBC,RBC			:reverse high-low byte
	JAL	RCH,PUTCHR		:send it
	EXBR	RBC,RBC			:reverse high-low byte back
	JAL	RCH,PUTCHR		:sennd it
	JR	R6

:	SNDSHR - send IIX smart host reache message
:	R6	link register
:	RBP	buffer pointer

SNDSHR	LHI	RBC,8280		:get smart host reached message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	JR	R6

:	SNDDHR - send IIX dumb host reached message
:	R6	link register
:	RBP	buffer pointer

SNDDHR	LHI	RBC,8380		:get dumb host reached message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	JR	R6

:	SNDNLS - send IIX normal logon status message
:	R6	link register
:	RBP	buffer pointer

SNDNLS	LHI	RBC,8480		:get normal logon status message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	JR	R6

:	SNDRSI - send IIX resynchronize interface message
:	R6	link register
:	RBP	buffer pointer

SNDRSI	LHI	RBC,8580		:get resynchronize interface message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	JR	R6

:	SNDPIV - send IIX product id and version message
:	followed by product id and version number: ppppvvrr
:	where	pppp	product id
:		vv	version number
:		rr	revision level
:	R6	link register
:	RBP	buffer pointer

SNDPIV	LHI	RBC,8680		:get product id and version message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	LHL	RBC,PRODID		:get prodid and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	LHI	RBC,VERSION		:get version and sendit
	JAL	RCH,PUTCHR
	LHI	RBC,REVLEV		:get revision level and send it
	JAL	RCH,PUTCHR
	JR	R6

:	SNDRPI - send IIX request product id message
:	R6	link register
:	RBP	buffer pointer

SNDRPI	LHI	RBC,8780		:get request product id message
	JAL	RCH,PUTCHR		:and send it
	EXBR	RBC,RBC
	JAL	RCH,PUTCHR
	JR	R6

:	GE2BD - Routine to get 2 bytes of data (an IIX message)
:	R6	link register
:	RBC	data returned in RBC

GET2BD	TBT	RP,TOPORT		:is there any data for this port
	JNFS	GET2B1			:if data present, continue
	STM	R3,.IIXST,RPI		:store multiple register
	JAL	R0,XSAVI		:else, defer
	L	R0,.XSAVI,RPI		:get old state
	ST	R0,.XSTAT,RPI		:and restore
	LM	R3,.IIXST,RPI		:restore multiple register
GET2B1	JAL	RCH,GETCHR		:get first byte of data
	J	0,R6			:signal - normal return
	LBR	R9,RBC			:load 1st byte into R9
	SLLS	R9,8			:make room for second byte
	TBT	RP,TOPORT		:is there more data
	JNFS	GET2B2			:if data present continue
	STM	R3,.IIXST,RPI
	JAL	R0,XSAVI		:else, defer
	L	R0,.XSAVI,RPI		:restore state
	ST	R0,.XSTAT,RPI
	LM	R3,.IIXST,RPI
GET2B2	JAL	RCH,GETCHR		:get second byte of data
	J	PRBIX			:data/signal - abnormal, normal return
	OR	RBC,R9			:put second byte into position
	J	4,R6			:data/data - skip 4 return

:	special routine to save and change .XSTAT and exit for IIX

XSAVI	L	R1,.XSTAT,RPI		:save old state
	ST	R1,.XSAVI,RPI		:for IIX routine -GET2BD, GET1BD
	ST	R0,.XSTAT,RPI		:save new state
	J	XRET			:and exit

:	PRBIX routine - report the problem to the PROBE

PRBIX	LHI	R0,13			:set Probe message value
	STB	R0,PROBVL
	JAL	RCH,PROBMG		:send out PROBE message
	J	0,R6			:data/signal - normal return



:	GET1BD - Routine to get 1 byte of data (for IIX message handler)
:	R6	link register
:	RBC	passes data back

GET1BD	TBT	RP,TOPORT		:is there any data for this port
	JNFS	GET1B1			:if data present, continue
	STM	R3,.IIXST,RPI
	JAL	R0,XSAVI		:else, defer
	L	R0,.XSAVI,RPI		:restore state
	ST	R0,.XSTAT,RPI
	LM	R3,.IIXST,RPI
GET1B1	JAL	RCH,GETCHR		:get byte of data
	J	0,R6			:signal - normal return
	J	4,R6			:data - skip 4 retrun

	FO	DATA
	EM	:IIX 
 