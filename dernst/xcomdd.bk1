	STTL(DISPATCHER DIALECT LOGIC                )
	SEG	A.CODE

	SSTTL(IIX DIALECT MESSAGES)
::	PROCESS IIX DIALECT TYPE SELECTION MESSAGES.

:	IIXTYP - PROCESS FIRST 2 BYTES OF THE MESSAGE AFTER A "SIIX" MESSAGE
:		 MESSAGES 80 TO 87 ARE TREATED AS DIALECT SELECTION MESSAGES
:		 MESSAGES STARTING WITH "C0" ARE TREATED AS XCOM DIALECT
:		 AND ARE PASSED TO ESC010 FOR PROCESSING.

IIXTYP	JAL	R4,GETCH
	LHL	R7,DPORT
	RBT	R7,WIIXT0
	JE	IXT030			:IF NOT BYTE 0
	RBT	R7,IIXDIA		:RESET XCOM DIALECT FLAG
	CLHI	R0,IX.DMM^-8		:COMPARE WITH "C0"
	JLFS	IXT010			:IF NOT DIALECT MSG(TURKEY)
	SBT	R7,IIXDIA		:SET XCOM DIALECT FLAG
IXT010	SIS	R5,1
	JNFS	IXT020			:IF MORE DATA
	JAL	R4,ELIR,,
	J	MMFRA,,

:	HANDLE 2ND BYTE (EITHER GLOBAL IIX TYPE OR XCOM DIALECT SUBTYPE)
IXT020	JAL	R4,GETCH		:GET TYPE
IXT030	RBT	R7,PIIX			:SHOW WE ARE PROCESSING IIX MESSAGE BODY
	SBT	R7,DNPROG		:FLAG IN PROGRESS OF DIALECT MESSAGE
	LHL	R1,DIBUF
	TBT	R7,IIXDIA		:XCOM DIALECT?
	JN	ESC010			:IF DIALECT MESSAGE
	SHI	R0,080			:UNBIAS GLOBAL IXX MESSAGE
	JL	MCRASH			:IF NOT IN RANGE
	STB	R0,EMTSAV,R7,		:SAVE FOR CONTINUATION HANDLING
	LR	R2,R0
	CLHI	R2,L.GMAE		:CHECK RANGE
	JG	MCRASH			:UNKNOWN MSG
	LH	R3,GMAEXP,R2,R2		:GET OFFSET TO GLOBAL IIX PROCESSOR
	J	GMAEXP,R3

::	GLOBAL IIX MESSAGES

:	ACUMULATOR ADDRESSES

 TABLE(GMAEXP)
	TENTRY(GEXI)		:0  SELECT DIALECT (INDEFINIT LENGHT)
	TENTRY(GEXF)		:1  DIALECT RESPONSE (FIXED LENGTH)
	TENTRY(GEXF)		:2  GATEWAY REACHED SMART HOST
	TENTRY(GEXF)		:3  GATEWAY REACHED DUMB HOST
	TENTRY(GEXF)		:4  NORMAL LOGON STUTUS
	TENTRY(GEXF)		:5  RESYNCRONIZE INTERFACE EXCNANGE
	TENTRY(GEXF)		:6  INTERFACE ID AND VERSION
	TENTRY(GEXF)		:7  REQUEST INTEFACE ID AND VERSION
 ENDTABLE(GMAEXP)			:END TABLE, DEFINE L.GMAE


	SEG	A.RTBL
:	SIZE OF MESSAGES
GMSIZ	BC	0		:0
	BC	2		:1
	BC	0		:2
	BC	0		:3
	BC	1		:4
	BC	0		:5
	BC	2		:6
	BC	0		:7

:	PROCESSING ADDRESSES

 TABLE(GMPEXP,CODE)
	TENTRY(GMEXP0)		:SELECT DIALECT COMMAND
	TENTRY(GMEXP1)		:DIALECT RESPONSE
	TENTRY(GMEXP2)		:GATEWAY REACHED SMART HOST
	TENTRY(GMEXP3)		:GATEWAY REACHED DUMB HOST
	TENTRY(GMEXP4)		:NORMAL LOGON STATUS
	TENTRY(GMEXP5)		:RESYNCRONIZE INTERFACE EXCHANGE
	TENTRY(GMEXP6)		:INTERFACE ID AND VERSION
	TENTRY(GMEXP7)		:REQUEST INTERFACE ID AND VERSION
 ENDTABLE(GMPEXP)		:END TABLE, DEFINE L.GMPE


::	PROCESS GLOBAL IIX MSG

:	ACCUMULATE FIXED MESSAGE.
GEXF	RBT	R7,WTCNT1
	LB	R0,GMSIZ,R2,
	J	ESC325			:GO COPY INTO BUFFER

:	ACCUMULATE TIIX TERMINATED MESSAGE (INDEFINITE LENGHT)
GEXI	LCS	R0,1			:SET TO NON-ZERO LENGTH
	RBT	R7,WTCNT1
	J	ESC325


:	DIALECT COMMAND
GMEXP0	CBCT(R6)			:GET TOTAL BYTE COUNT
GME010	SIS	R6,2
	JL	GME110			:IF NOT ENOUGH DATA
	JAL	R4,GCI
	CLHI	R0,80
	JN	GME110			:IF UNKNOWN DIALECT
	JAL	R4,GCI
	LHL	R8,IPORT

  IF	PVC
	TBT	R8,PVCCAL		:IS IT PVC ??
	JE	GME012			:NO, JUMP AROUND
	CLHI	R0,ID.DSP&0FF		:IS IT DSP ??
	JE	GME060			:YES, JUMP
	CLHI	R0,ID.XCM&0FF		:IS IT XCOM??
	JEFS	GME012			:YES, JUMP
GME011	LHI	R0,AA.PRV		:BAD DIALECT
	STH	R0,TERMCD		:ACCOUNTING TERMINATE CODE
	JAL	R4,PVCERR,,		:CLEAN UP PVC, SET BUILD TIMER
	J	MMFRA,,
  EI	PVC

GME012	CLHI	R0,ID.XGT&0FF
	JE	GME050			:IF GATEWAY
	CLHI	R0,ID.DSP&0FF
	JE	GME060			:IF DSP
	LHI	R13,CLRINC^8!DIA171
	TBT	R8,DSPCAL,,
	JN	GME120			:GO CLEAR CALL IF IT WAS A DSP CALL
	CLHI	R0,ID.XCM&0FF
	JEFS	GME020			:IF XCOM TURKEY
	LHI	R13,CLRINC^8!DIA189
	TBT	R8,CUGCAL,,
	JNFS	GME020			:IF CALL WITH CLOSED USER GROUP AND NOT XCOM
	CLHI	R0,ID.ASC&0FF
	JEFS	GME040			:IF ASCII,
GME018	LR	R6,R6
	JE	GME110			:ZAP IF COULD NOT FIND ANYTHING ACCEPTABLE
	J	GME010			:TRY NEXT ONE

:	SEND RESPONSE TO ACCEPT XCOM TURKEY.
GME020	SBT	R7,TURKEY
	LI	R12,ID.XCM^8
	JAL	R9,SNDDR		:SEND DIALECT RESPONSE
	J	TURKOK			:GO START TURKEY STUFF

:	SEND DIALECT RESPONSE TO ACCEPT ASCI.
GME040	LI	R12,ID.ASC^8
	JAL	R9,SNDDR		:SEND DIALECT RESPONSE
	LHL	R1,FACBUF
  IF	X.25							:SCHEN 25-Feb-85
	JAL	R4,EMPTY,,		:NO NEED TO KEEP LEFTOVER TURKEY
	J	CONUP
  ELSE	X.75
	CBCT(R9)			:GET TOTAL BYTE COUNT
	LR	R9,R9
	JE	CONUP			:IF EMTY BUFFER
	LHL	R1,IPORT
	LB	R0,TNICNT,R1,		:GET LENGTH OF TNID
	SR	R9,R0
	JLE	CONUP			:IF TOTAL BYTE COUNT NOT GREATER THAN LENGTH OFTNID
	LHL	R1,FACBUF
GME045	JAL	R4,GCI
	SIS	R9,1			:DECREMENT COUNTER
	JGBS	GME045			:DISCARD FACBUF, BUT KEEP TNID
	J	CONUP
  EI								:SCHEN 25-Feb-85

:	SEND DIALECT RESPONSE TO ACCEPT DSP.
GME060	LHI	R13,CLRINC^8!DIA169	:CANNOT ACCEPT DSP
 REMIND(GME060- CAN DSP CALL ACCEPT CLOSED USER GROUP UTILITY?)
	TBT	R8,DSPCAL,,
	JE	GME018			:IF CALL NOT DSP, CONTINUE CHECKING
	SBT	R7,TURKEY
	LI	R12,ID.DSP^8
	JAL	R9,SNDDR		:SEND DIALECT RESPONSE
	J	TURKOK

:	SELECT GATEWAY.
:	STAND BY FOR FURTHER MESSAGES FROM GATEWAY.
GME050	SBT	R7,TGATE		:SET IIX GATEWAY FLAG JS 15-SEP-86
	SBT	R7,CHLOGN		:LOG IN MODE
	RBT	R8,OBKPR		:OPEN PACKET WINDOW
	J	MMFRA,,

:	DIALECT RESPONSE.
GMEXP1	RBT	R7,EXTWDR		:NOT WAITING DIALECT RESPONSE
	CBCT(R4)			:GET DATA COUNT OF DIBUF :JS 24-OCT-86
	LR	R4,R4			:ANY DATA IN DIBUF? :JS 24-OCT-86
	JE	GMEEXI			:NO-GO SEE ANY MORE DATA :JS 24-OCT-876
                                        :IN IRING
	JAL	R4,GCI
	CLHI	R0,80
	JN	GME110			:IF UNKNOWN DIALECT
	JAL	R4,GCI
	LR	R1,R7
	CLHI	R0,ID.ASC&0FF
	JE	GMEXP8			:IF ASCII
	CLHI	R0,ID.DSP&0FF
	JN	GME100			:IF NOT  DSP CALL
	LHL	R2,IPORT
	SBT	R2,DSPCAL,,		:INDICATE DSP CALL
	SBT	R7,TURKEY
	LHL	R1,FACBUF
	JAL	R4,EMPTY,,		:EMPTY TEMP STORAGE OF USERNAME
	J	GMEEXI

GME100	CLHI	R0,ID.XCM&0FF
	JN	GME110			:IF NOT TURKEY		:SCY 20-Nov-85
	SBT	R7,TURKEY
	LHL	R1,FACBUF
	JAL	R4,EMPTY,,		:EMPTY TEMP STORAGE OF USERNAME
:	J	GMEEXI			:GO SEE IF ANYMORE DATA	:SCY 20-Nov-85
:	The following 3 lines of instructions are a temporary	:SCY 20-Nov-85
:	fix to flush the extra byte, ex. 8081 8083 8D		:SCY 20-Nov-85
	LHL	R0,LO7			:GET BYTE CNT OF REMANING DATA :SCY 20-Nov-85
	JAL	R4,FLUSH,,		:TRAH REST OF MSG	:SCY 20-Nov-85
	J	MMFRA,,			:GO TO PROCESS NEXT MSG	:SCY 20-Nov-85

GME110	LHI	R13,CNETCG^8!DIA148
GME120	LHL	R3,IPORT

  IF	PVC
	TBT	R3,PVCCAL		:IS IT PVC ??
	JN	GME011			:YES, JUMP TO CLEANUP
  EI	PVC

	STH	R13,PSDIAG,R3,R3
	LIS	R1,AA.NTM
	J	IZAP30

:	GATEWAY REACHED SMART HOST.
GMEXP2	LHL	R2,DPORT
	SBT	R2,IIXCAL
	RBT	R2,CSREQ,,
	RBT	R2,EXTWDR		:NO NEED TO WAIT FOR OLD DIALECT RESPONSE
	J	GMEEXI			:GO SEE IF ANYMORE DATA

:	GATEWAY REACHED DUMB HOST.
GMEXP3	LHL	R2,DPORT
	RBT	R2,IIXCAL
	RBT	R2,CSREQ,,		:DISALLOW LOGIN STRING TO PASS
	RBT	R2,EXTWDR		:NO NEED TO WAIT FOR OLD DIALECT RESPONSE
	J	CONUP			:GO CONNECT UP

:	NOMRAL LOGIN STATUS.
GMEXP4	LHL	R2,DPORT
	TBT	R2,TGATE		:JS 15-SEP-86
	JE	GME110			:IF DID NOT GET GATEWAY SELECT COMMAND
	JAL	R4,GCI			:GET STATUS BYTE
	LHL	R4,IDBUF
	CBCT(R2,R4)
	LR	R2,R2
	JEFS	GMEX42			:IF NO 'READY' LOGIN STRING LEFT
	LR	R4,R0
	NHI	R4,0E0			:EXMINE FLUSH/ECHO/ CONTROL BITS
	JNFS	GMEX42			:IF ECHO/FLUSH DIRECTIVES
	LR	R4,R0
	NHI	R4,1F			:EXAMINE STATUS BYTE
	CLHI	R4,NLS.EU
	JEFS	GMEX42			:IF 'ERROR, TYPE USER NAME'
	CLHI	R4,NLS.EP
	JEFS	GMEX42			:IF 'ERROR, TYPE PASSWORD'
	LIS	R0,0			:FORCE 'CONTINUE'
GMEX42	JAL	R12,LOGSTA		:PROCESS LOGON STATUS BYTE
	J	GMEEXI			:GO SEE IF ANYMORE DATA

:	IIX MESAGE NOT YET IMPLEMENTED.
GMEXP5	HS
GMEXP7	LHI	R13,CNETCG^8!DIA176	:UNIMPLEMENTED IIX MSG
	J	GME120			:GO ZAP CIRCUIT


:	VERSION NUMBER RECEIVED.....				:DRE 10-APR-86
GMEXP6	J	GMEEXI						:DRE 10-APR-86

:	ASCII RESPONSE RECEIVED... SEND PROMPT.
GMEXP8	LHL	R0,LO7			:GET REMAINING COUNT	:GML 30-Jul-84
:	JAL	R4,FLUSH,,		:THROW AWAY LEFTOVERS	:GML 30-Jul-84
:PROCESS THE DATA IMMEDIATELT FOLLOWED THE IXX SELECTED DIALET RESPONSE
:JS 28-OCT-86
	JE	NDL080			:REJOIN LOGON PROCESSING:GML 30-Jul-84
	JAL	R0,NDLPMT,,		:SEND USER PROMPT 
	J	GMEX90			:HERE IF <SEMI-COLON> 
	J	GMEX90			:HERE IF <+> 
	J	GMEX91			:HERE IF <CR>, NO USER INPUT REQUIRED
	J	GMEX90			:HERE IF TELENET FORMAT LOGIN 
GMEX90	LHL	R5,LO7			:GET REMAINING COUNT
	LHL	R1,DPORT
	J	MMTEXT+12,,		:GO PROCESS THE REMAINING MESSAGE
GMEX91	LHL	R1,DPORT
	LHL	R5,LO7			:GET REMAINING COUNT 
	STB	R5,DMSGLN,R1,		:SAVE IT 
	J	LIM300,,		:GO PROCESS REMAINING MESSAGE
:JS 28-OCT-86

:	EXIT FOR GLOBAL IIX MESSAGES.
:	MUST PROCESS ANY DATA FOLLOWING THE IIX MSG.
GMEEXI	LHL	R5,LO7			:GET REMAINING COUNT
	JG	DAT030			:GO PROCESS DATA MESSAGE
	J	MMFRA,,

	SSTTL(DISPATCH TABLES)
:	ESCAPED MESSAGE HANDLING ROUTINES.

 TABLE(ESCM)
	TENTRY(ESCM0)		:EXM0  DATA PACKET
	TENTRY(ESCM1)		:EXM1  DATA PACKET, M BIT SET
	TENTRY(ESCM2)		:EXM2  DATA PACKET ,Q BIT
	TENTRY(ESCM3)		:EXM3  DATA PACKET, Q AND M BIT
	TENTRY(ESCM4)		:EXM4  CLEARING CAUSE
	TENTRY(ESCM4)		:EXM5  CALL CONNECTED MESSAGE RECIEVED
	TENTRY(ESCM4)		:EXM6  RESET CAUSE BYTE
	TENTRY(ESCM4)		:EXM7  CALLED PARTY ADDRESS
	TENTRY(ESCM4)		:EXM8  CALLING PARTY ADDRESS
	TENTRY(ESCM9)		:EXM9  CALL USER DATA FOLLOWS
	TENTRY(ESCM4)		:EXMA  INDICATION OF INTERRUPT PACKET
	TENTRY(ESCM4)		:EXMB  INDICATION OF INT. CONF. PACKET
	TENTRY(ESCM9)		:EXMC  PROCESS NETWORK UTIL MESSAGE
	TENTRY(ESCM9)		:EXMD  PROCESS USER FACILITY MESSAGE
	TENTRY(ESCM4)		:EXME  PROCESS DIAGNOSTIC BYTE OF CLEAR REQUEST
	TENTRY(ESCM9)		:EXMF  PROCESS CALL CONNECTED PACKET INFO FIELD
	TENTRY(ESCM4)		:EXM10  PROCESS DIAGNOSTIC BYTE OF A RESET PACKET
	TENTRY(ESCM4)		:EXM11  PROCESS RESET CONFIRMATION
	TENTRY(ESCM8)		:EXM12  EXTENDED CALL CONNECTED PACKET INFO
:				 2/LEN, LEN/CALL CONNECT INFO
	TENTRY(ESCM4)		:EXM13  TURKEY LEVEL NUMBER
	TENTRY(ESCM14)		:EXM14	NEW DATA MESSAGE, 1/FLAG BYTE, 2/LEN
	TENTRY(ESCM4)		:EXM15  NEW CLEAR MESSAGE, 1/CAUSE, 1/DIAG
	TENTRY(ESCM4)		:EXM16  NEW RESET MESSAGE, 1/CAUSE, 1/DIAG
	TENTRY(ESCM8)		:EXM17  EXTENDED CLEAR INFO MSG,
:				 2/LEN, LEN/CLEAR INFO
	TENTRY(ESCM4)		:EXM18  RPOA SELECTION, 2/DATA NETWORK ID
	TENTRY(ESCM8)		:EXM19  PVC REQUEST (VARIABLE LENGTH)
	TENTRY(ESCM4)		:EXM1A  PVC CONFIRMATION, 1/PVC STATUS, 1/DTE STATUS
 ENDTABLE(ESCM)			:END TABLE, DEFINE L.ESCM


:	FOLLOWING IS SIZE OF IIX MESSAGES WHERE NECESSARY

	SEG	A.RTBL
	HS	0
LMMSIZ	BC	0		:EXM0
	BC	0		:EXM1
	BC	0		:EXM2
	BC	0		:EXM3
	BC	1		:EXM4
	BC	0		:EXM5
	BC	1		:EXM6
	BC	8		:EXM7
	BC	8		:EXM8
	BC	0		:EXM9
	BC	1		:EXMA
	BC	0		:EXMB
	BC	0		:EXMC
	BC	0		:EXMD
	BC	1		:EXME
	BC	0		:EXMF
	BC	1		:EXM10
	BC	0		:EXM11
	BC	0		:EXM12
	BC	2		:EXM13
	BC	0		:EXM14
	BC	2		:EXM15
	BC	2		:EXM16
	BC	0		:EXM17
	BC	2		:EXM18
	BC	0		:EXM19
	BC	2		:EXM1A

:	FOLLOWING IS USED FOR NON DATA IIX MESSAGES AFTER WE HAVE ALL
:	NEED DATA.

 TABLE(ESP,CODE)
	TENTRY(ESP0)	:EXM0
	TENTRY(ESP0)		:EXM1
	TENTRY(ESP0)		:EXM2
	TENTRY(ESP0)		:EXM3
	TENTRY(ESP4)		:EXM4
	TENTRY(CONUP)		:EXM5
	TENTRY(ESP6)		:EXM6
	TENTRY(ESP7)		:EXM7
	TENTRY(ESP8)		:EXM8
	TENTRY(ESP9)		:EXM9
	TENTRY(ESPA)		:EXMA
	TENTRY(ESPB)		:EXMB
	TENTRY(ESPC)		:EXMC
	TENTRY(ESPD)		:EXMD
	TENTRY(ESPE)		:EXME
	TENTRY(ESPF)		:EXMF
	TENTRY(ESPE)		:EXM10, HANDLED SAME AS CLEAR DIAG. BYTE
	TENTRY(ESP11)		:EXM11
	TENTRY(ESP12)		:EXM12
	TENTRY(ESP13)		:EXM13
	TENTRY(ESP14)		:EXM14
	TENTRY(ESP15)		:EXM15
	TENTRY(ESP16)		:EXM16
	TENTRY(ESP17)		:EXM17
	TENTRY(ESP18)		:EXM18
  IF	PVC
	TENTRY(ESP19)		:EXM19
	TENTRY(ESP1A)		:EXM1A
  ELSE								:DRE 10-DEC-85
	TENTRY(ESPCL0)		:CLEAR PVC CALL			:DRE 10-DEC-85
	TENTRY(ESPCL0)		:CLEAR PVC CALL			:DRE 10-DEC-85
  EI
 ENDTABLE(ESP)			:END TABLE, DEFINE L.ESP


	SSTTL(START IIX)


::	TURKOK - OTHER END HAS O'KED TURKEY TALK

TURKOK	LHL	R1,DPORT
	SBT	R1,TURKEY
	RBT	R1,EXTWDR
	RBT	R1,CHLOGN
	RBT	R1,DEM
	SLLS	R1,2
	LA	R2,IDBIA,R1
	STH	R2,IDBUF

:	SEE IF ANY DATA HAS COME FROM OTHER GATEWAY AND ALREADY BEEN
:	MADE INTO A PACKET. THIS IS TO CLEAR OUT ANY HEADER OR ECHOED
:	SEMI COLON SENT TO A TTY BY GATEWAY.
	AHI	R1,DIBIA
	JAL	R4,EMPTY,,
	LHL	R1,IEDBUF
	JAL	R4,EMPTY,,

:	SEND OUR TURKEY LEVEL TO THE OTHER SIDE.
	LHL	R1,DPORT
	TBT	R1,IIXCAL
	JE	TOK005			:IF NOT IIX CALL
	LHI	R12,EXM13		:TURKEY LEVEL MESSAGE
	LIS	R7,2
	JAL	R9,ESCAPN,,
	LIS	R0,0
	JAL	R4,BPUTCH
	LIS	R0,OURLEV
	JAL	R4,BPUTCH
	JAL	R9,ESCAPX,,

  IF	PVC
	LHL	R6,IPORT
	LB	R0,PCKSTE,R6,		:CHK PACKET STATE
	CLHI	R0,PWPVCR		:IF IN PVC WAIT STATE
	JE	MMFRA,,			:RETURN
  EI

:	SEND CALLED PARTY ADDRESS, CALLING ADDRESS AND ANY CALL USER DATA
:	TO OTHER GATEWAY.
TOK005	LIS	R8,8			:NUMBER OF BYTES TO READ FROM DTESAX
	LHL	R6,IPORT
	SLLS	R6,3
	LR	R7,R8			:MESSAGE LENGTH
	LHI	R12,EXM7 		:GET IIX MESSAGE TYPE
	JAL	R9,ESCAPN,,		:SETUP IIX MESSAGE
TOK010	LB	R0,DTESAX,R6,
	JAL	R4,BPUTCH
	AIS	R6,1
	SIS	R8,1
	JNBS	TOK010
	JAL	R9,ESCAPX,,

:	SEND CALLING ADDRESS
	LIS	R8,8
	LHL	R6,IPORT
	SLLS	R6,3
	LR	R7,R8
	LHI	R12,EXM8 		:GET IIX MESSAGE TYPE
	JAL	R9,ESCAPN,,
TOK020	LB	R0,DTESAV,R6,
	JAL	R4,BPUTCH
	AIS	R6,1
	SIS	R8,1
	JNBS	TOK020
	JAL	R9,ESCAPX,,

:	SEND RPOA TO OTHER GATEWAY BY ITSELF AND EARLY TO USE FOR
:	LINK SELECTION
TOK024	LHL	R6,IPORT
	TBT	R6,RPOA.F,,		:DID CALL REQUEST CONTAIN AN RPOA ??
	JE	TOK028			:IF NOT
	LIS	R7,2			:LENGTH 2 BYTES
	LHI	R12,EXM18		:IIX MESSAGE TYPE
	JAL	R9,ESCAPN,,		:START IT
	LB	R0,RPOA.R,R6,R6		:FIRST TWO BYTES OF RPOA
	JAL	R4,BPUTCH
	LB	R0,RPOA.R+1,R6,R6	:SECOND TWO BYTES OF RPOA
	JAL	R4,BPUTCH
	JAL	R9,ESCAPX,,

:	SEND NETWORK UTILITIY FIELDS, FACILITY FIELDS AND ANY
:	CALL USER DATA THAT MAY BE IN FACILTIES BUFFER.
:	NOTE-DATA ALREADY HAS IIX MESSAGES ATTACHED IN BUFFER.
TOK028	LHL	R1,IPORT
	LR	R8,R1
	SLLS	R1,2
	AHI	R1,FACBIA		:FORM FACILITIES BUFFER
	STH	R1,FACBUF
	CBCT(R6)			:MAKE SURE DATA IN BUFFER
	LR	R6,R6
	JNFS	TOK030
	TRAP(R1,F3)			:NO DATA INBUFFER


TOK030	JAL	R4,GCI			:GET A BYTE
	LR	R6,R0			:THIS IS BYTE COUNT OF DATA

:	SEND DATA TO THE OTHER GATEWAY IN IIX FORMAT.
:	IF X.75 AND COPYING UTILITY, ADD IN THE SUP INVOICE NUMBER WE
:	SAVED FROM (B2) MSG AS CALL ID UTILITY IF WE DID NOT GET ONE FROM
:	THE LINK.
	LHL	R1,FACBUF
:	SINCE UTILITY CANNOT EXCEED 64 CHARS, IT CAN BE SENT AS ONE ISIS DATA
:	MSG.
	JAL	R4,GCI			:GET TYPE
	SIS	R6,1
	LR	R12,R0
	CLHI	R0,EXM9
	JE	TOK140			:IF CALL USER DATA IIX MSG
  IF	X.75
	CLHI	R0,EXMC
	JN	TOK035			:IF NOT UTILITY MSG
	LHL	R8,IPORT
	TBT	R8,CIDRCV,,
	JN	TOK035			:IF WE GOT CALL ID UTILITY OVER THE LINK
	LHI	R7,4,R6			:ACCOUNT FOR CALL ID UTILITY
	JAL	R9,ESCAPN,,		:GET THE ESCPD MSG STARTED
	LHL	R1,FACBUF
	LR	R9,R1			:SAVE (FACBUF)
	JAL	R4,GCI			:GET 1ST LENGTH
	AIS	R0,4			:ADD IN LEN FOR CALL ID
	JAL	R4,BPUTCH
	LR	R1,R9
	JAL	R4,GCI			:GET 2ND LENGTH
	AIS	R0,4			:ADD IN LENG FOR CALL ID
	JAL	R4,BPUTCH
	LHI	R0,UT.CID
	JAL	R4,BPUTCH		:PUT IN CALL ID UTILITY CODE
	LHL	R4,IPORT
	SLLS	R8,2
	LB	R0,SAVINV+1,R8,		:GET SAVED SUP INVOICE #
	JAL	R4,BPUTCH
	LB	R0,SAVINV+2,R8,
	JAL	R4,BPUTCH
	LB	R0,SAVINV+3,R8,
	JAL	R4,BPUTCH
	SIS	R6,2			:SUBTRACT THE 2 BYTES WE ALREADY PUT
	LIS	R5,0			:ONLY MAKING ONE MSG
	J	TOK050			:GO COPY REST OF DATA
  EI	X.75

:	(R6)= TOTAL LENGTH OF THIS MESSAGE
:	(R12)= IIX MSG CODE
TOK035	LR	R5,R6
	LHI	R2,CM.FST-1-2		:ALLOW FOR OVERHEAD
	CR	R6,R2
	JLEFS	TOK040			:IF WILL FIT IN MAX ISIS DATA MSG
	LR	R6,R2			:TAKE MAX
TOK040	SR	R5,R6
	LR	R7,R6
	JAL	R9,ESCAPN,,
TOK050	LHL	R1,FACBUF
	JAL	R4,GCI
	JAL	R4,BPUTCH
	SIS	R6,1
	JNBS	TOK050
	LR	R6,R5
	JLE	TOK070			:IF DONE WITH THIS MSG
	LHI	R2,CM.FST-1
	CR	R6,R2
	JLEFS	TOK060			:IF WILL FIT IN MAX ISIS DATA MSG
	LR	R6,R2
TOK060	SR	R5,R6
	LHL	R1,DPORT
	JAL	R4,BELOR,,
	LR	R2,R6
	LR	R0,R6
	AIS	R0,3
	JAL	R4,BSLOR,,
	J	TOK050			:CONTINUE ON

TOK070	JAL	R9,ESCAPX,,
	LHL	R1,FACBUF
	CBCT				:SEE IF ANY MORE DATA
	LR	R0,R0
  IF	X.75
	LHL	R2,IPORT
	CLB	R0,TNICNT,R2,
	JG	TOK030			:IF THERE IS MORE TO COPY,(THERE MIGHT BE
:					 TRANSIT NET ID LIST IN FAC BUF
  ELSE	X.25
	JN	TOK030			:CONTINUE IF MORE
  EI
	J	MMFRA,,

:	FACILITIES BUFFER ONLY CONTAINS FIRST 4 BYTES OF THE CALL USER
:	DATA IN IIX FORMAT IF THE C.U.D. IS TO BE USED  IN LOGIN.
:	IF DATA IS STILL BEING PROCESS FROM THE ID BUFFER AT THIS STAGE
:	(NON DATA TRANSFER STATE), COPY THE REMAINING UNUSED PORTION OF DATA
:	TO THE FACILITIES BUFFER BEFORE PUTTING OUT THE IIX C.U.D. MESSAGE.

TOK140	LHL	R4,IPORT
	TBT	R4,CUDUSD,,
	JNFS	TOK145			:IF C.U.D. USED IN LOGIN
	TBT	R4,GATWAY,,
	JE	TOK035			:IF NOT CALL VIA 'GATEWAY'
	TBT	R4,NTNCAL,,
	JE	TOK035			:IF NOT  NTN CALL
TOK145	LB	R3,PCKSTE,R4,
	CLHI	R3,PFLOWC
	JGE	TOK035			:IF IN INFO XFER STATES
	LHL	R3,DPORT
	LHL	R5,IDBUF
	LR	R1,R5
	CBCT(R4,R5)
	LR	R4,R4
	JE	TOK035			:IF NOTHING IN IDBUF
	RBT	R3,INPROG
	JN	TOK200			:IF IN THE MIDDLE OF READING ID BUF
	LHL	R2,IPORT
	TBT	R2,GATWAY,,
	JE	TOK300			:IF NOT 'GATEWAY' METHOD OF CALLING
	TBT	R3,TGATE		:JS 15-SEP-86
	JN	TOK300			:IF GOT HERE THRU T-T GATEWAY

:	HERE WHEN GATEWAY AND THE DESTINATION WAS AN X-GATEWAY.
:	MUST FIND THE ORIGINAL C.U.D. AND PASS IT.
	TBT	R2,NTNCAL,,
	JN	TOK160			:IF NTN CALL
	JAL	R4,GCI			:MUST BE 'GAUGING' CHAR
	CLHI	R0,01
	JN	TOK240			:IF NOT, SOMETHING IS WRONG
	JAL	R4,GCI
	JAL	R4,GCI			:GET LENGTH OF C.U.D.
	LR	R7,R0
	CBCT(R4)
	J	TOK220			:GO COPY C.U.D.

TOK160	JAL	R4,GCI			:LENGTH OF  NTN LOGIN
	LR	R7,R0
TOK170	JAL	R4,GCI
	SIS	R7,1
	JGBS	TOK170
	LHL	R2,IPORT
	TBT	R2,CUDUSD,,
	JE	TOK300			:IF C.U.D. FIELD NOT PRESENT
	JAL	R4,GCI			:GET LENGTH OF C.U.D.
	SIS	R0,1			:SUBSTRACT OUT 'SEMI-COLON ADDED'
	LR	R7,R0
	JAL	R4,GCI			:TAKE SEMI-COLON OUT
	L	R4,BB,R1,		:PEEK AT NEXT CHAR
	LB	R4,,R4
	CLHI	R4,0D
	JN	TOK260			:IF NOT A 'CR'
	JAL	R4,GCI			:DELETE THE 'CR' TOO
	SIS	R7,1
	J	TOK260			:GO COPY REST

TOK200	LB	R7,INBCT,R3,
TOK220	CR	R4,R7
	JGFS	TOK260			:IF ENOUGH DATA IN ID BUFFER
TOK240	TRAP(R5,DB)			:ERROR IN ID BUFFER

:	COPY (R7) CHARS FROM IDBUF TO FACBUF.
TOK260	LHL	R6,FACBUF
	CBCT(R4,R6)			:GET LENGTH IN FACBUF
  IF	X.75
	LHL	R2,IPORT
	LB	R2,TNICNT,R2,		:GET LENGTH OF TNI LIST
	JE	TOK280			:IF NO TNI LIST
:	MUST COPY CUD TO THE END OF TNI LIST, ADD THE DATA FROM DIBUFFER,
:	THEN COPY THE TNI LIST TO THE END OF CUG MSG.
	SR	R4,R2			:NO. OF BYTES TO COPY
	LR	R8,R4
	LR	R1,R6			:FACBUF
TOK265	JAL	R4,GCI
	JAL	R4,WCI			:COPY TNI LIST TO THE END OF BUFFER
	SIS	R8,1
	JGBS	TOK265
  EI
:	COPY (R7) BYTES FROM ID TO FAC BUF.
TOK280	LR	R1,R5
	JAL	R4,GCI
	LR	R1,R6
	JAL	R4,WCI
	SIS	R7,1
	JG	TOK280			:IF MORE TO COPY
	R6)			:TOTAL LENGTH TO COPY
  IF	X.75
	LHL	R2,IPORT
	LB	R8,TNICNT,R2,		:LENGTH OF TNI LIST
	JE	TOK290			:IF NO TNI LIST
	SR	R6,R8			:LENGTH OF CUG MSG
TOK285	JAL	R4,GCI
	JAL	R4,WCI			:COPY TNI LIST TO THE END OF BUFFER
	SIS	R8,1
	JGBS	TOK285			:IF MORE TO COPY
TOK290	HS
  EI	X.75
	LR	R4,R6
	SIS	R4,1
	L	R2,BB,R1,
	STB	R4,,R2			:CHANGE THE LENGTH OF CUD MSG
TOK300	CBCT(R4,R5)
	LR	R4,R4
	JE	TOK035			:IF NOTHING LEFT IN ID BUF
	L	R4,BB,R5,		:PEEK AT FIRST CHAR
	LB	R4,,R4
	CLHI	R4,1			:INTERNAL CHAR COUNT FOR SINGLE CR
	JN	TOK035			:IF NOT CHAR COUNT OF 1
	LR	R1,R5
	JAL	R4,GCI			:DELETE THE REDUNDANT 'CR'
	JAL	R4,GCI
	CLHI	R0,0D
	JE	TOK035			:IF IT IS THE 'CR' THAT WE ADDED
	CLHI	R0,3B
	JN	TOK240			:IT SHOULD BE THE 'SEMI-COLON' THEN, IF NOT
	JAL	R4,GCI			:CRASH
	JAL	R4,GCI			:DELETE 'CR'
	CLHI	R0,0D
	JN	TOK240			:IF NOT 'CR', CRASH
	J	TOK035

	SSTTL(PARTIAL IIX MESSAGES)
::	PROCESS ESCAPED MESSAGES.
:	(R1)=DPORT
:	(R5)= BYTE COUNT OF DISPATCHER TEXT MESSAGE
ESCMSG	LR	R7,R1			:DPORT #
	LHL	R1,DIBUF
	SBT	R7,DNPROG		:SET IN PROGRESS OF PROCESSING AN IIX MSG
	JN	ESC012			:IF ALREADY DOING ONE
	JAL	R4,GETCH		:GET IIX MESSAGE TYPE
ESC010	SHI	R0,080			:MAKE ADJUSTMENT
	JL	MCRASH			:CLEAR CALL IF BAD FORMAT
	STB	R0,EMTSAV,R7,		:SAVE THE TYPE
	CLHI	R0,L.ESCM		:DO HIGH RANGE CHECK
	JG	MCRASH			:CLEAR CALL IF BAD FORMAT
	LR	R2,R0
	LH	R2,ESCM,R2,R2
	J	ESCM,R2			:PROCESS MSG


:	ALREADY STARTED ON THIS MESSAGE.
:	PROCESS DIFFERENTLY IF DATA MESSAGES.
ESC012	LB	R4,EMTSAV,R7,
	TBT	R7,IIXDIA
	JE	ESC300			:IF GLOBAL IIX MESSAGE
	CLHI	R4,EXM14&7F
	JE	ESP14			:GO PROCESS CONTINUEING DATA MESSAGE
	CLHI	R4,EXM3&7F
	JG	ESC300			:IF NOT DATA MESSAGE

:	PROCESSING A DATA PACKET. SEE IF WE HAVE RECEIVED BYTE COUNT YET.
	RBT	R7,WTCNT1		:RESET FLAG SAYING WAITING FOR BYTE COUNT
	JEFS	ESC020			:IF SO
	JAL	R4,GETCH		:GET BYTE COUNT
	LR	R6,R0
	STH	R6,DNCNT,R7,R7		:SAVE COUNT
	STH	R6,RUFCNT,R7,R7		:SAVE FOR SEGMENT ACCOUNTING
	SIS	R5,1			:DECREMENT CHARS LEFT IN RING
	JE	ESCM92			:IF NO MORE IN MESSAGE
ESC020	LH	R6,DNCNT,R7,R7		:GET BYTE COUNT LEFT IN IIX MESSAGE
	J	ESC030			:GO CONTINUE PROCESS

:	BEGINNING OF IIX DATA MESSAGES, MARK DOWN OCCURANCES OF
:	MBIT AND QBIT.
:******	these 4 messages should be obsolete when everyone is running
:	turkey level 1 and above

ESCM0	LHL	R4,IPORT
	LIS	R0,0			:Q=0, M=0
	JFS	ESC035

ESCM1	LHL	R4,IPORT
	LIS	R0,MBIT			:M=1
	JFS	ESC035

ESCM2	LHL	R4,IPORT
	LHI	R0,QBIT			:Q=1
	JFS	ESC035

ESCM3	LHL	R4,IPORT
	LHI	R0,QBIT!MBIT		:Q=1, M=1

:	START PACKET IN DI BUFFER
ESC035	STB	R0,FLGBYT,R7,
	SBT	R7,WTCNT1		:SET FLAG WAITING FOR PACKET BYTE COUNT
	RBT	R7,WTCNT2
	SIS	R5,1
	JE	ESCM92			:IF NO MORE DATA

:	NEXT CHAR IS BYTE COUNT OF PACKET.
	JAL	R4,GETCH
	LR	R6,R0
	RBT	R7,WTCNT1
	STH	R6,DNCNT,R7,R7
	SIS	R5,1
	JE	ESCM92
ESC030	LR	R6,R6
	JE	ESC050			:IF NO MORE DATA IN PACKET

:	PULL CHARS AND STICK IN DI BUFFER.
:	WHEN BYTE COUNT GOES TO ZERO, MOVE PACKET TO DATA BUFFER AND
:	MAKE AN ENTRY IN QUEUE.
:	(R5)=BYTE COUNT LEFT IN RING,
:	(R1)=DI BUFFER
:	(R7)=DPORT
:	(R6)=BYTE COUNT IN DATA PACKET

ESC040	JAL	R4,GETCH		:GET A CHAR
	JAL	R4,WCI
	SIS	R6,1
	JEFS	ESC050			:IF ALL DONE
	SIS	R5,1
	JNBS	ESC040			:CONTINUE IF MORE IN RING
	STH	R6,DNCNT,R7,R7
	J	ESCM92

:	WE ARE READY TO MAKE A DATA PACKET.
ESC050	STH	R6,DNCNT,R7,R7
	SIS	R5,1			:FIRST MAKE SURE R5 GOES TO ZERO
	JN	MCRAS1			:CLEAR CALL IF NON-ZERO
	JAL	R4,ELIR,,
	RBT	R7,DNPROG
	CBCT(R8)			:GET AMOUNT OF CHARS TO LOOK AT
	LIS	R0,0
	STH	R0,DNCNT,R7,R7		:MAKE SURE COUNTER IS 0
:	TBT	RL,NAP.F
:	JN	ESC110	 		:IF NATIONAL OPTIONS ALLOWED
	LHL	R2,IPORT
	TBT	R2,ITICAL
	JE	ESC110			:IF NOT ITI CALL
	LB	R4,FLGBYT,R7,
	THI	R4,QBIT
	JE	ESC110			:IF NOT A Q-BIT PACKET
	TBT	RL,PANA.F
	JE	ESC110	 		:IF NATIONAL OPTIONS ALLOWED
	L	R4,BB,R1,
	LB	R0,,R4			:PEEK AT MESSAGE CODE BYTE
	NHI	R0,1
	JN	ESC110			:IF NOT MSG THAT COULD HAVE NATIONAL OPTIONS

:	GO THROUGH DI BUFFER TO FIND IF ANY NATIONAL OPTIONS MARKER
:	IF FOUND THROW AWAY ALL FOLLOWING DATA.
:	MEANWHILE COPY ALL WANTED DATA TO THE END OF DI BBUFER SO THAT
:	WE CAN CONSTRUCT DATA PACKETS LATER.

	JAL	R4,GCI			:GET THE MESSAGE CODE
	SIS	R8,1
	JAL	R4,WCI			:COPY TO END OF DI BUFFER
ESC090	SIS	R8,1
	JL	ESC110			:IF NO MORE TO CHECK
	JAL	R4,GCI			:GET FACILITY CODE
	LR	R0,R0
	JEFS	ESC100			:IF NATIONAL OPTIONS MARKER
	JAL	R4,WCI			:WRITE TO END OF DI BUFFER
	SIS	R8,1
	JLFS	ESC110			:IF NO MORE TO COPY
	JAL	R4,GCI			:GET PARAMETER VALUE
	JAL	R4,WCI			:WRITE TO END OF BUFFER
	JBS	ESC090			:CONTINUE

:	FOUND NATIONAL OPTIONS MARKER, DISCARD REST.
ESC100	SIS	R8,1
	JLFS	ESC110			:IF NO MORE
	JAL	R4,GCI
	JBS	ESC100

:	READY TO  MAKE DATA PACKETS.
ESC110	JAL	R7,MAKDTA		:MAKE DATA PACKETS
	J	MMFRA,,


:	FIXED LENGTH MESSAGE.
:	GET LENGTH FROM THE TABLE AND START COPYING.
ESCM4	LB	R4,EMTSAV,R7,		:GET MESSAGE TYPE
	LB	R6,LMMSIZ,R4,		:GET SIZE
	STH	R6,DNCNT,R7,R7		:SAVE COUNT
	RBT	R7,WTCNT1
	RBT	R7,WTCNT2
	LR	R6,R6			:CHECK FOR ZERO COUNT
	JE	ESC350			:IF SO
	SIS	R5,1
	JN	ESC300			:IF STILL DATA IN RING
	JAL	R4,ELIR,,
	J	MMFRA,,

:	HAVE AN IIX MESSAGE WITH VARIABLE LENGTH DATA. PROCESS IT
:	MESSAGES LIKE THIS ARE CALL USER DATA, NETWORK UTILITYS, ETC.
ESCM8	SBT	R7,WTCNT2		:EXPECT 2ND BYTE OF LENGTH
ESCM9	SBT	R7,WTCNT1		:EXPECT 1ST BYTE OF LENGTH
	SIS	R5,1
	JN	ESC300
ESCM92	JAL	R4,ELIR,,
	J	MMFRA,,


:	CONTINUING PROCESSING OF IIX MESSAGES.
:	PUT DATA IN DI BUFFER UNTIL MESSAGE ENDS AND THEN ANALYZE IT.
:	MAY EXPECT 1 BYTE OR 2 BYTES OF LENGTH FIELD DEPENDING ON
:	VALUE OF WTCNT1, WTCNT2.

ESC300	RBT	R7,WTCNT1
	JE	ESC310			:IF NOT EXPECTING BYTE 1 OF LENGTH
	JAL	R4,GETCH		:GET BYTE COUNT
	TBT	R7,WTCNT2
	JEFS	ESC325			:IF ONLY WAITING FOR 1 BYTE OF LENGTH
	STB	R0,DNCNT,R7,R7		:STORE 1ST BYTE
	SIS	R5,1
	JE	ESCM92			:IF END OF MESSAGE
	JFS	ESC310			:RESET WTCNT2

ESC325	LR	R6,R0
	JE	ESC350			:IF COUNT OF ZERO
	STH	R6,DNCNT,R7,R7
	SIS	R5,1
	JE	ESCM92			:IF END OF MESSAGE
	J	ESC330			:GO COPY DATA FIELD

ESC310	RBT	R7,WTCNT2
	JEFS	ESC330			:IF NOT EXPECTING 2ND LENGTH BYTE
ESC315	JAL	R4,GETCH		:GET 2ND BYTE
	STB	R0,DNCNT+1,R7,R7
	LH	R6,DNCNT,R7,R7
	JE	ESC350			:IF ZERO LENGTH, CONTINUE ON
	SIS	R5,1
	JE	ESCM92			:IF END OF MESSAGE
ESC330	LH	R6,DNCNT,R7,R7		:GET BYTE COUNT LEFT IN MESSAGE
	JE	ESC355			:IF ZERO LENGTH, DON'T TRY TO COPY CHARACTERS
ESC340	JAL	R4,GETCH		:GET A CHAR
	JAL	R4,WCI
	SIS	R6,1
	JE	ESC350			:IF ALL DONE
	SIS	R5,1
	JNBS	ESC340
	JAL	R4,ELIR,,
	STH	R6,DNCNT,R7,R7		:SAVE NEW COUNT
	LIS	R4,0
	STH	R4,NEDLO1,R7,R7		:FLAG NOT TO FLUSH IN NEDCLR :SCHEN 10-Apr-85
	J	MMFRA,,			:EXIT FOR NOW

:	CHECK TO SEE IF ANYMORE DATA LEFT IN MESSAGE.
ESC350	SIS	R5,1
	STH	R5,LO7			:STORE REMAINING CHAR COUNT
	JEFS	ESC360			:IF NOTHING LEFT
ESC355	TBT	R7,IIXDIA
	JN	MCRASH			:IF DIALECT, SHOULD NOT HAVE ANYTHING LEFT
	JFS	ESC365

ESC360	JAL	R4,ELIR,,
	LIS	R4,0
	STH	R4,NEDLO1,R7,R7		:FLAG NOT TO FLUSH IN NEDCLR	:SCHEN 10-Apr-85
ESC365	RBT	R7,DNPROG		:RESET IN PROGRESS FLAG

:	GET MESSAGE TYPE BACK AND HANDLE IT.
	LB	R4,EMTSAV,R7,
	TBT	R7,IIXDIA
	JEFS	ESC370			:IF NOT DIALECT
	LH	R4,ESP,R4,R4
	J	ESP,R4			:HANDLE MSG

ESC370	LH	R4,GMPEXP,R4,R4
	J	GMPEXP,R4

	SSTTL(PROCESS IIX DATA MESSAGE)

:	NEW IIX DATA MESSAGE - HAVE ALREADY STARTED IT.
ESP14	TBT	R7,WTCNT2		:TEST LENGTH BYTE 2 FLAG :DRE 18-MAR-86
	JN	ESP14A			:IF NO LENGTH BYTE 2 YET :DRE 18-MAR-86
:	HANDLE BYTES AFTER CRITICAL FIRST 3 BYTES HERE
	AIS	R5,1			:R5 HAS 1 MORE FOR ESD100,120 ROUTINE
	LHL	R6,DNCNT,R7,R7
	JE	ESD120			:IF NO MORE CHARS IN THIS PACKET
	TBT	R7,Q1PKT
	JE	ESD100			:IF NOT PROCESSING POSSIBLE Q-BIT PACKET
					: WITH NATIONAL PARAMETER
	SIS	R5,1			:RESUME COUNTER FOR ISIS MESSAGE LENGTH
	TBT	R7,QDSCD
	JN	ESD070
	RBT	R7,WTQMSG
	JN	ESD047			:IF HAVE NOT GOTTEN MESAGE CODE YET
	RBT	R7,WTQPAR
	JN	ESD050			:IF HAVE NOT GOTTEN PARAMETER CODE
	J	ESD060			:HAVE PARM CODE, START FROM PARM VALUE

:WE HAVE NOT YET RECEIVED ALL OF HEADER TO IIX MESSAGE
ESP14A	TBT	R7,WTFLGB
	JN	ESD010			:IF HAVE NOT GOTTEN FLAG BYTE YET
	TBT	R7,WTCNT1
	JN	ESD020			:IF HAVE NOT GOTTEN LENGTH BYTE 1 YET
	J	ESD030			:IF HAVE NOT GOTTEN LENGTH BYTE 2 YET

:	NEW IIX DATA MESSAGE.
ESCM14	SBT	R7,DNPROG
	SIS	R5,3			:ENOUGH DATA TO READ FLAG BYTE,ETC.?
	JLE	ESD005			:NO, GO DO A BYTE AT A TIME
	JAL	R4,GETCH		:GET THE FLAG BYE
	STB	R0,FLGBYT,R7,		:STORE IT
	JAL	R4,GETCH		:GET THE FIRST COUNT BYTE
	EXBR	R6,R0			:START FORMING COUNT
	JAL	R4,GETCH		:GET SECOND COUNT BYTE
	OR	R6,R0			:FORM HALFWORD DATA COUNT
	STH	R6,DNCNT,R7,R7		:STORE COUNT
	J	ESD032			:CONTINUE NORMALLY
ESD005	SBT	R7,WTCNT1		:WAITING FOR FIRST BYTE OF LENGTH
	SBT	R7,WTCNT2		:WAITING FOR 2ND BYTE OF LENGTH
	SBT	R7,WTFLGB		:WATING FOR FLAG BYTE
	AIS	R5,3-1			:COMPENSATE FOR SUBTRACT ABOVE
:	SIS	R5,1			:CHECK FOR NO MORE DATA
	JE	ESCM92			:IF END OF MESSAGE

:	GET FLAG BYTE AND DECIDE CHECKING OF NATIONAL PARAMETER IS NECESSARY.
ESD010	JAL	R4,GETCH		:GET FLAG BYTE
	RBT	R7,WTFLGB		:NO LONGER WAITING FOR THE FLAG
	STB	R0,FLGBYT,R7,		:SAVE FLAG BYTE
ESD016	SIS	R5,1
	JE	ESCM92			:IF NO MORE CHARS LEFT
:
:	GET 1ST BYTE OF PACKET LENGTH
:
ESD020	JAL	R4,GETCH
	RBT	R7,WTCNT1
	STB	R0,DNCNT,R7,R7
	SIS	R5,1
	JE	ESCM92			:IF END OF MESSAGE
ESD030	RBT	R7,WTCNT2
	JAL	R4,GETCH		:GET 2ND BYTE OF LENGTH
	STB	R0,DNCNT+1,R7,R7
ESD032	LB	R0,FLGBYT,R7,		:GET FLAG BYTE BACK	:DRE 31-JAN-86
	THI	R0,QBIT			:IS THIS A Q-PACKET?	:DRE 31-JAN-86
	JE	ESD040			:NO, BRANCH		:DRE 31-JAN-86
	LHL	R2,IPORT		:
	TBT	R2,ITICAL		:YES, IS IT FROM A TERMINAL?
	JE	ESD040			:  NO, BRANCH
	TBT	RL,PANA.F		:  YES. O.K. TO PASS NATIONAL PAR. ?
	JE	ESD040			:    YES, BRANCH.
	TBT	R7,LASTMQ		:    NO.  LAST IIX DATA HAS BOTH M-BIT
					:	  AND Q-BIT ON?
	JNFS	ESD034			:      YES, THEN DON'T SET WTQMSG, WTQPAR
					:	    AND DON'T CHANGE Q1PKT
:  LASTMQ = 0
:  THIS IS THE BEGINNING OF A NEW Q-PACKET SEQUENCE.
:  SET SOME FLAGS
:
	SBT	R7,WTQMSG
	SBT	R7,WTQPAR
	SBT	R7,Q1PKT		:INDICATE WE NEED TO WATCH FOR NATIONAL MARKER
	SBT	R7,NX3YET		: AND HAVN'T SEEN INTL PARAMETERS YET
	RBT	R7,QDSCD		:MAKE SURE "DISCARD NATIONAL PARM" FLAG IS OFF
:
:  NOW SET LASTMQ BASED ON THE SETTING OF M-BIT AND Q-BIT OF THIS PACKET
:
ESD034	RBT	R7,LASTMQ		:ASSUME M-BIT IS OFF
	THI	R0,MBIT			:IS M-BIT SET IN THIS Q-PACKET?
	JEFS	ESD040			:NO, BRANCH
	SBT	R7,LASTMQ		:YES, RECORD IT FOR NEXT PACKET.
ESD040	LHL	R6,DNCNT,R7,R7
	JE	ESD120			:FINISHED IF ZERO LENGTH PACKET	:DRE 27-MAR-86
	TBT	R7,Q1PKT
	JE	ESD100			:IF NO NEED TO CHECK
	SIS	R5,1
	JE	ESCM92			:IF END OF THIS MESSAGE
	TBT	R7,QDSCD
	JN	ESD070			:IF IN DISCARD MODE
	RBT	R7,WTQMSG		:WAITING FOR MSG CODE?
	JE	ESD050			:NO. LAST Q-PACKET MUST HAVE M-BIT ON.
:
:	GET MESSAGE CODE AND SEE IF IT IS ONE OF THE CODE
:	THAT WOULD HAVE POSSIBLE NATIOAL PARAMETER,IE,
:	SET, READ, SET AND READ PARAMETER.
:
ESD047	JAL	R4,GETCH		:GET MESSAGE CODE
	JAL	R4,WCI			:COPY MESSAGE CODE
	LR	R4,R0
	SIS	R6,1
	NHI	R4,1
	JEFS	ESD049			:IF POSSIBLE NATIONAL PARM
	RBT	R7,Q1PKT		:NO NEED TO CHECK FURTHER
	RBT	R7,NX3YET		:  AND NO NEED TO WATCH INT'L PARAMETER
	J	ESD100			:GO COPY REST

ESD049	LR	R6,R6
	JE	ESD120			:IF END OF THS PACKET
	SIS	R5,1
	JE	ESD080			:IF END OF THIS MESSAGE	:DRE 27-MAR-86

:	CHECK EACH Q-BIT PARAMETER-VALUE PAIR TO FIND THE BEGINNING OF
:	NATIONAL PARAMETER.  IF FOUND, FLUSH REST OF THE DATA
:	MESSAGE AND ALSO THE NEXT DATA MESSAGE IF THIS HAS M=1.
ESD050	RBT	R7,WTQPAR
	JAL	R4,GETCH		:GET PARAMETER CODE
	SIS	R6,1
	LR	R0,R0
	JE	ESD065			:NATIONAL OPTINS FOUND, START DISCARDING
	JAL	R4,WCI			:COPY PARAMETER CODE
	RBT	R7,NX3YET		:RESET "HAVN'T SEEN INTL PARM" FLAG
					: NOW THAT WE HAVE SEEN ONE.
	SIS	R5,1
	JE	ESD080			:IF END OF THIS MSG	:DRE 27-MAR-86
ESD060	JAL	R4,GETCH		:GET PARAMETER VALUE
	JAL	R4,WCI			:COPY PARAMTER VALUE
	SIS	R6,1
	JE	ESD120			:IF END OF THIS PACKET
	SBT	R7,WTQPAR		:MORE DATA SET FLAG
	SIS	R5,1
	JG	ESD050			:IF MORE OF THIS MESSAGE
	JFS	ESD080			:END OF THIS MESSAGE	:DRE 27-MAR-86
:	FLUSH THE REST OF THIS MESSAGE.
ESD065	SBT	R7,QDSCD		:TURN ON DISCARD MODE	:SCHEN 30-Jul-85
	SIS	R5,1			:END OF THIS ISIS MSG?	:SCHEN 30-Jul-85
	JLEFS	ESD080			:YES, BRANCH		:SCHEN 30-Jul-85 :DRE 27-MAR-86
ESD070	JAL	R4,GETCH		:GET REST OF THIS MSG AND THROW IT AWAY.
	SIS	R6,1			:END OF THIS DATA PACKET (STARTED WITH 0C094)?
	JE	ESD120			:YES, BRANCH
	SIS	R5,1			:END OF THIS ISIS MSG?
	JNBS	ESD070			:NO, CONTINUE TO FLUSH IRING :DRE 31-JAN-86
:	JFS	ESD080			:YES, BRANCH		:DRE 31-JAN-86

:	FINISHED COPYING ALL OF THIS DATA MESSAGE.
ESD080	STH	R6,DNCNT,R7,R7					:DRE 27-MAR-86
	J	ESCM92			:END OF THIS MESSAGE


:	STICK CHARACTERS IN THIS MESSAGE IN DIBUFFER.
:	(R1)= DIBUFFER
:	(R5)= REMAINING CHARS IN THIS MESSAGE
:	(R6)= REMAINING CHARS IN THIS PACKET
ESD100	LR	R6,R6
	JEFS	ESD120			:IF END OF THIS PACKET	:DRE 27-MAR-86
ESD110	SIS	R5,1
	JLEBS	ESD080			:IF END OF THIS MESSAGE	:DRE 27-MAR-86
	JAL	R4,GETCH
	JAL	R4,WCI
	SIS	R6,1
	JNBS	ESD110
:	JFS	ESD120			:DONE WITH LOOP


:	FINISHED THIS DATA PACKET.
ESD120	STH	R6,DNCNT,R7,R7
	SIS	R5,1
	JG	MCRASH			:SHOULD BE NO CHARS LEFT
	TBT	R7,LASTMQ		:DOES THIS PACKET HAS BOTH M-BIT AND Q-BIT
					: AND WAS SCANNING NATINAL PARM TO THROW AWAY?
	JN	ESD122			:YES, THERE ARE MORE PACKETS TO COME (M-BIT)
	RBT	R7,Q1PKT		:NO, CLEAR "WATCH FOR NATIONAL MARKER" FLAG
	RBT	R7,QDSCD		: AND DICARD FLAG
	JEFS	ESD122			:DIDN'T DISCARD ANYTHING, GO MAKE A PACKET
	RBT	R7,NX3YET		: CLEAR "HAVN'T SEEN INTL PARM" FLAG
	JEFS	ESD122			:IT WASN'T ON.
	JAL	R4,EMPTY,,		:IT WAS ON. I.E. WE GOT A Q-PACKET WITH
					: SET/READ/SET & READ/INDICATION CODE AND
					: FOLLOWED WITH NATIONAL MARKER AND
					: PARAMETER LIST ONLY. ALL NATIONAL PARMS
					: WERE THROWN AWAY THEREFORE WE HAVE
					: TO DISCARD THE X.29 MSG CODE (IN DIBUF)
ESD122	JAL	R4,ELIR,,
	JAL	R7,MAKDTA		:TRY TO MAKE A DATA PACKET
	J	MMFRA,,


:	SHOULD NEVER TRY TO EXECUTE THIS.
ESP0	TRAP(R7,F4)

	SSTTL(PROCESS IIX CLEARING CAUSE MSG)

:	FINISH OFF ESCAPED CLEARING CAUSE MESSAGE.
ESP4	JAL	R4,GCI			:GET CAUSE BYTE FROM DIBUFFER
	LHL	R4,IPORT
	SBT	R4,CCDRCV,,		:INDICATE THE CAUSE WAS RECEIVED
  IF	OLDTUR			:TALKING OLD TURKEY
	LHL	R2,DPORT
	TBT	R2,IIXCAL
	JNFS	ESP42			:IF IIX CALL
	LR	R2,R0
	LB	R0,TCHINV,R2,		:REVERSE IT
ESP42	HS
  EI	OLDTUR
	STB	R0,PSDIAG,R4,R4		:SAVE IT FOR LATER
	J	MMFRA,,


	SSTTL(PROCESS IIX RESET CAUSE MSG)

:	PROCESS RESET CAUSE BYTE MESSAGE.
:	(WE WILL ONLY GET THIS IF TURKEY LEVEL LESS THAN ONE)
:	SEND A RESET ON THIS PORT.
  REMIND(ESP6- POSSIBLY CLEAR THE CALL IF TURKEY LEVEL >= 1)
ESP6	JAL	R4,GCI			:GET CAUSE BYTE
	LHL	R4,IPORT
	LB	R1,PCKSTE,R4,		:GET CHANNELS STATE
	CLHI	R1,PFLOWC
	JN	MMFRA,,			:IF NOT IN FLOW CONTROL READY
  IF	OLDTUR			:TALKING OLD TURKEY
	LHL	R2,DPORT
	TBT	R2,IIXCAL
	JNFS	ESP62
	LR	R2,R0
	LB	R0,TCHINV,R2,		:REVERSE THE VALUE
ESP62	HS
  EI	OLDTUR
	STB	R0,PSDIAG,R4,R4
	LHI	R1,PSRESI		:GET SEND RESET INDICATION STATE
	STB	R1,PCKSTE,R4,
	LHI	R0,ZRESET		:GET RESET REQUESST PACKET TYPE
	JAL	R9,CNR,,		:GO DO RESET CLEAN UP
	LHL	R1,IPORT
	SBT	R1,IFLUSH		:INVOKE DISCARDING OF DATA FROM X-LINE
:				UNTIL RESET CONFIRMATION RECEIVED
	J	MMFRA,,

	SSTTL(PROCESS IIX CALLED ADDRESS MSG)

:	CALLED PARTY ADDRESS IN DIBUFFER. PULL IT AND PUT
:	IT IN DTESAV CELLS.
ESP7	LHL	R7,IPORT
	SLLS	R7,3
	LIS	R8,8
ESP73	JAL	R4,GCI
	STB	R0,DTESAV,R7,
	AIS	R7,1
	SIS	R8,1
	JNBS	ESP73
  IF	ADLCNT!XOM
	JAL	R0,ADRMAP,,		:TO MAP DTESAV TO SET OF POSSIBLE LINKS
	J	ESP74			:OK, R0=LINK FLAGS FOUND FOR SUBADDRESS
	J	ESPN50			:NONE VALID, CLEAR THE CALL :HJR 07-09-87

ESP74	LHL	R1,DPORT
	SLLS	R1,2
	N	R0,LNKSET,R1,		:IN COMMON WITH EXISTING SET
	ST	R0,LNKSET,R1,		:CAN LATER CHOOSE ANY OF THESE
  EI
	J	MMFRA,,

	SSTTL(PROCESS IIX CALLING ADDRESS MSG)

:	GET CALLING DTE ADDRESS OUT OF BUFFER AND PUT IN DTESAX CELLS.

ESP8	LHL	R7,IPORT
	SLLS	R7,3
	LIS	R8,8
ESP82	JAL	R4,GCI
	STB	R0,DTESAX,R7,
	AIS	R7,1
	SIS	R8,1
	JNBS	ESP82
	J	MMFRA,,

	SSTTL(PROCESS IIX CALLED USER DATA MSG)

:	PUT CALL USER DATA IN CALL REQUEST PACKET AND SEND IT.
:	FIRST START CALL REQUEST IN BUFFER BY PUTTING IN FIRST 3 OCTETS PLUS
:	THE CALLLED AND CALLING ADDRESSES
ESP9	JAL	R4,COP1S1,,		:COUNT CALL REQUEST WITH <=16
					:BYTES DATA		:LSH 14-JUL-87
	LHL	R7,IPORT
	TBT	RL,RCX.F
	JEFS	ESP900			:IF DEFAULT NO REV CHARGE
	SBT	R7,RVCHRG,,
ESP900	HS
  IF	X.25&CUGENA
	TBT	RL,CUS.F
	JEFS	ESP901			:IF NOT SUBSCRIBED TO CUG FACILITY
	TBT	RL,CUI.F
	JNFS	ESP901			:IF INCOMING ACCESS ALLOWED
	LHI	R12,CACBAR^8!DIA183	:'INCOMING ACCESS NOT ALLOWED'
	TBT	R7,CUGCAL,,
	JE	ESPCLR			:GO CLEAR THE CALL IF NOT A CUG CALL
ESP901	HS
  EI
	LHL	R1,IECBUF		:GET CONTROL BUFFER
	LHI	R0,ZCALRQ		:GET CALL REQUESST PACKET TYPE
	JAL	R4,WCI
	LHL	R7,DPORT
	SLLS	R7,3			:USE AS DOUBLE WORD OFFSET
	JAL	R4,WCI			:LENGTH BYTE 1
	L	R0,BE,R1,
	ST	R0,CALPOS,R7,		:SAVE POSITION OF LENGTH, 1ST BYTE
	JAL	R4,WCI			:LENGTH BYTE 2
	L	R0,BE,R1,
	ST	R0,CALPOS+4,R7,		: 2ND BYTE
	CBCT
	LHL	R7,DPORT
	STH	R0,CALCNT,R7,R7		:SAVE COUNT
	LIS	R0,0
	JAL	R4,WCI			:FLAG BYTE

:PLACE CALLED AND CALLING ADDR. LENGTHS, THEN THE ADDRESSES INTO IECBUF
:
:ROUTINE HEIRARCHY:
:	MAIN - SETS SWITCHES AND INITIALIZES ADDRESS POINTERS
:		ESP906 - TRANSFERS AN ADDRESS
:			ESPGDT - GETS AN ADDRESS DIGIT
:			ESPSDT - PUTS AN ADDRESS DIGIT IN IECBUF
:
:REGISTER USAGE:
:	LINK REGISTERS - R4,R7
:	ADDRESS POINTER - R9
:	IECBUF POINTER - R1
:	ADDRESS OFFSET - R6
:	DIGIT COUNTER - R8

:STORAGE FOR THESE ROUTINES
:ESPTMP	HS	1		:1ST BYTE = TEMP STORE FOR PUT DIGITS RTN
				:2ND BYTE = BIT 6 - GET DIGIT SWITCH
				:	    BIT 7 - PUT DIGIT SWITCH

:MAIN ROUTINE
	LHL	R8,IPORT		:JS 04-DEC-86 SET UP ADDR. BUFR. INDEX
	SLLS	R8,3			:JS 04-DEC-86
  IF PCD.FG
	LB	R0,DTESAV,R8,		:JS 08-DEC-86 USER LOGIN WITH CLDADR
	JN	ESP903			:JS 08-DEC-86 NO-JUMP
	TBT	RL,PCD.FL,,		:JS 08-DEC-86 SUPPORT CANNED CLDADR?
	JE	ESP903			:JS 08-DEC-86 NO-JUMP
	ST	R1,TEMP
	JAL	R0,CLDGTT,,		:JS 04-DEC-86 SAVE IT IN DTESAV
	L	R1,TEMP
  EI	:PCD.FG
ESP903	LIS	R6,0			:JS 04-DEC-86	
	STH	R6,ESPTMP		:JS 04-DEC-86 CLEAR TEMP AREA/SWITCHES
	L	R0,DTESAV,R8,		:TRANSFER CALLED AND CALLING ADDRESSES
	ST	R0,PFXCLD		:   TO WORKAREA
	L	R0,DTESAV+4,R8,
	ST	R0,PFXCLD+4
	L	R0,DTESAX,R8,
	ST	R0,PFXCLL
	L	R0,DTESAX+4,R8,
	ST	R0,PFXCLL+4


:	LIS	R6,0			:JS 04-DEC-86

  IF	\PTRMAC
	ST	R1,TEMP			:SAVE BUFFER POINTER
	LHL	R1,PTR.LT,RL,RL		:GET OFFSET INTO PREFIX TABLE
	JE	ESPJMP			:JUMP, IF NO TABLE ENTRY
	LA	R1,TLR.LT,R1,		:GET ADDRESSS OF PREFIX ENTRY
	ST	R1,PFXEAD,,
	JAL	R9,PFXMN2		:MODIFY THE OUTGOING ADDRESSES
	J	ESPJMP			:NORMAL RETURN
	J	ESPERR			:SEND CLEARING PACKET
ESPJMP	L	R1,TEMP			:RESTORE BUFFER POINTER
:	LIS	R6,0			:JS 04-DEC-86
  EI

	LB	R0,PFXCLL		:GET CALLING ADDR LENGTH
	LB	R8,PFXCLD		:GET CALLED ADDR LENGTH
	SLLS	R0,4
	OR	R0,R8			:CONCATENATE LENGTHS
	JAL	R4,WCI			:PUT IN IECBUF
	AIS	R6,1
	LA	R9,PFXCLD		:SETUP CALLED ADDR POINTER
	LR	R8,R8
	JAL	R4,ESP906		:BUILD CALLED ADDRESS
	LIS	R6,0
	LB	R8,PFXCLL		:GET CALLING ADDR LENGTH
	AIS	R6,1
	LA	R9,PFXCLL		:SETUP CALLING ADDRESS POINTER
	LIS	R4,0E
	RBT	R4,ESPTMP		:RESET 'GET DIGT RTN' SWITCH
	LR	R8,R8
	JAL	R4,ESP906		:BUILD CALLING ADDRESS
	LIS	R4,0F
	TBT	R4,ESPTMP		:WAS LAST DIGIT SENT
	JE	ESP912			:   YES, BUILD UTIL/FACIL FIELDS
	LIS	R0,0			:PUT LAST DIGIT IN IECBUF, PAD WITH 0
	JAL	R7,ESPSDT
	J	ESP912			:BUILD UTILITY/FACILITY FIELDS

:	COPY UTILITY/FACILITY FIELDS FROM FACBUF TO IECBUF.
:	ADDTINAL FIELDS ARE ADDED.

ESP912	HS							:FAK 17-Sep-84

  IF	\CHGNSW							:FAK 27-Aug-84
	ST	R1,TEMP						:FAK 27-Aug-84
	LHL	R2,IPORT					:FAK 27-Aug-84
	LR	R8,RL			:GET LINK		:FAK 31-Aug-84
	SLLS	R8,2			:x4 TO COMPUTE FULLWORD OFFSET :FAK 31-Aug-84
	L	R0,CHT.LT,R8,		:GET CHRGENATIONAL PREFIX DIGITS :FAK 31-Aug-84
	JE	ESPCN8			:JUMP, IF NO ENTRY	:FAK 27-Aug-84
	L	R8,PFXCLL		:GET 8 DIGITS OF CALLING ADDRESS :FAK 27-Aug-84
	SLLS	R8,8					 	:FAK 27-Aug-84
	LB	R9,PFXCLL+4					:FAK 27-Aug-84
	OR	R8,R9						:FAK 27-Aug-84
	JFFO	R0,ESPCN1		:ALIGN THE DIGITS IN THE	:FAK 28-Aug-84
	J	ESPCN8			:  CALLING ADDRESS	:FAK 28-Aug-84
ESPCN1	NHI	R1,0FC			:ALIGN TO A BCD BOUNDARY	:FAK 11-Sep-84
	JEFS	ESPCN5			:JUMP, IF ALREADY ALIGNED :FAK 28-Aug-84
ESPCN4	SRLS	R8,4			:JUSTIFY		:FAK 27-Aug-84
	SIS	R1,4						:FAK 27-Aug-84
	JNBS	ESPCN4						:FAK 27-Aug-84
ESPCN5	CR	R8,R0			:DO THE PREFIXES MATCH??? :FAK 27-Aug-84
	JNFS	ESPCN8			:JUMP, IF THEY DONT	:FAK 27-Aug-84
	LHL	R1,DPORT					:FAK 27-Aug-84
	TBT	R1,TURKEY		:ARE WE A PACKET MODE DTE??? :FAK 27-Aug-84
	JEFS	ESPCN8			:JUMP, IF NOT		:FAK 27-Aug-84
	SBT	R2,CHGNAT,,		:TURN ON FLAG TO INDICATE REV CHRG :FAK 28-Sep-84
	JFS	ESPCN9						:FAK 27-Aug-84
ESPCN8	RBT	R2,CHGNAT,,		:CLEAR REV CHRG INDICATOR :FAK 28-Sep-84
ESPCN9	L	R1,TEMP						:FAK 27-Aug-84
  EI								:FAK 27-Aug-84

	CBCT(R2)			:CURRENT LENGTH OF IECBUF
	STH	R2,TEMP1		:STORE TO CALCULATE FINAL LENGTH LATER
	LIS	R0,0
	JAL	R4,WCI			:RESERVE PLACE FOR UTILITY LENGTH FIELD
	L	R2,BE,R1,
	ST	R2,TEMP4		:SAVE PLACE TO UPDATE LATER
	LHL	R9,IPORT
	LHL	R2,FACBUF
  IF	X.75
:	the next three lines don't make any sense- Dennis ernst 26-jun-87
:	CBCT(R3,R2)
:	LR	R3,R3
:	JE	ESPCL0			:GO CLEAR THE CALL IF EMPTY UTILITY
	TBT	R9,CIDRCV,,
	JN	ESP914			:IF ALREADY RECEIVED CALL ID UTILITY
:	CALL ID.
	LHI	R0,UT.CID		:CALL ID UTILITY CODE
	JAL	R4,WCI
	LR	R7,R9
	AR	R7,R7
	LB	R0,SAVINV+1,R7,R7	:1ST BYTE OF SUP INVOICE #
	JAL	R4,WCI
	LB	R0,SAVINV+2,R7,R7
	JAL	R4,WCI
	LB	R0,SAVINV+3,R7,R7
	JAL	R4,WCI
ESP914	HS
  EI	X.75
  IF	X.25
	TBT	RL,NAI.F                                        :SCHEN 3-Mar-86
	JE	ESP914                                          :SCHEN 3-Mar-86
:	CBCT(R3,R2)                                             :SCHEN 3-Mar-86
:	LR	R3,R3                                           :SCHEN 3-Mar-86
:	JE	ESPCL0			:GO CLEAR THE CALL IF EMPTY UTILITY :SCHEN 3-Mar-86
:	CALL ID.                                                :SCHEN 3-Mar-86
	LHI	R0,UT.CID		:CALL ID UTILITY CODE   :SCHEN 3-Mar-86
	JAL	R4,WCI                                          :SCHEN 3-Mar-86
	LR	R7,R9                                           :SCHEN 3-Mar-86
	AR	R7,R7                                           :SCHEN 3-Mar-86
	LB	R0,SAVINV+1,R7,R7	:1ST BYTE OF SUP INVOICE # :SCHEN 3-Mar-86
	JAL	R4,WCI                                          :SCHEN 3-Mar-86
	LB	R0,SAVINV+2,R7,R7                               :SCHEN 3-Mar-86
	JAL	R4,WCI                                          :SCHEN 3-Mar-86
	LB	R0,SAVINV+3,R7,R7                               :SCHEN 3-Mar-86
	JAL	R4,WCI                                          :SCHEN 3-Mar-86
ESP914	HS                                                      :SCHEN 3-Mar-86
  EI	X.25
:	THROUGHPUT CLASS.
ESP924	TBT	RL,TCN.F
	JE	ESP925			:IF NOT SUBSCRIBED TO TC NEGOTIATION
	LIS	R0,FC.TC		:TPUT CLASS UTIL/FAC CODE
	JAL	R4,WCI
	LB	R0,TCLTR,R9,
  IF	TCSC			:IF NEED TO TRANSLATE TO NONSTANDARD CLASS
	JAL	R7,TRSCTC,,		:TRANSLATE STANDARD CLASS TO TPUT CLASS
  EI
	EXHB(R0,R4)			:MOVE RCV TO 'FROM CALLED' POSITION, TMT TO
:				'FROM CALLING' POSITION
	JAL	R4,WCI

:	REVERSE CHARGE.
ESP925	TBT	R9,RVCHRG,,
	JE	ESP928			:IF CALLER PAYED
	LIS	R6,RF.RC		:FLAG REVERSE CHARGE
	TBT	RL,RCNA.F
	JE	ESP930			:IF OK TO ACCEPT REV CHARGE
	LHI	R12,CNMREV^8!DIA000	:USE 'REVERSE CHARGE NOT SUBSRIBED' :DRE 9-JUL-87
	J	ESPCLR			:GO CLEAR THE CALL

ESP928	HS
  IF	\CHGNSW							:FAK 24-Aug-84
	TBT	R9,CHGNAT,,		:WAS THERE A CALL NATIONAL PREFIX MATCH :FAK 28-Sep-84
	JEFS	ESP929			:JUMP, IF NO		:FAK 24-Aug-84
	SBT	R9,RVCHRG,,		:TURN ON REVERSE CHARGE (IE. 01) :FAK 28-Sep-84
	LIS	R6,RF.RC		:REV CHARGE REQUESTED	:FAK 11-Sep-84
	J	ESP930						:FAK 24-Aug-84
ESP929	HS							:FAK 24-Aug-84
  EI
	LIS	R6,0			:FLAG CALLER PAYED
	TBT	RL,CPNA.F
	JEFS	ESP930			:IF OK TO ACCEPT CALLER-PAYED CALL
	LHI	R12,CINVLD^8!DIA066	:USE 'INVALID FACILITY REQUEST',
:					'INVLID FACILITY PARAMETER' DIAG
	J	ESPCLR			:GO CLEAR THE CALL

ESP930	HS	0
	:changes begin here	:LSH 14-JUL-87
	:If the fast select code is not enabled, and the CUD is over
	:16 bytes, though the call will eventually be cleared (see ESP970),
	:the CUD will still be counted for accounting, since the
	:data has been forwarded through the network	:LSH 14-JUL-87
	LHL	R2,DIBUF	:GET LENGTH OF CALL USER DATA
	CBCT(R7,R2)
	LR	R7,R7
	JE	ESP937		:NO CALL USER DATA
	LHI	R2,$A16
	SR	R7,R2		:NEED EXTRA CHARGE FOR >16 BYTES DATA
	JLE	ESP937
	LHL	R4,DPORT
	STH	R7,RUFCNT,R4,R4	:FOR ROUTINE COSX
	LR	R12,R1		:SAVE R1
	JAL	R4,COSX,,	:INCREMENT SEGMENT COUNT ONLY
	LR	R1,R12		:RESTORE R1
ESP937	HS	0
	:changes end here	:LSH 14-JUL-87
	LHI	R0,FC.RF		:FAST SELECT/ REVERSE CHARGE FACILITY
  IF	FSTSLT			:IF ANY SUBSCRIBED TO FAST SELECT
	TBT	RL,RCNS.F
	JEFS	ESP932			:IF REVERSE CHARGE SUBSCRIBED
	LIS	R6,0
	LIS	R0,0			:MAYBE  NO NEED TO PUT THIS OUT
ESP932	TBT	R9,FSTSEL,,
	JE	ESP936			:IF NO FAST SELECT
	:changes begin here	:LSH 14-JUL-87
	:When receiving fast select call, but fast select acceptance option
	:is not turned on (FSA.F), though the call will eventually be
	:cleared, the CUD beyond 16 bytes will still be extra charged,
	:and also reported by fast select accounting addendum 'E016'
	:message.
	LIS	R2,FST.FS	:SET UP FSTFLG FOR ACCOUNTING
	SBT	R2,FSTFLG,R9,R9	:INDICATES A FAST SELECT CALL
	LR	R7,R7		:IS LENGTH OF CUD > 16 ?
	JLE	ESP938		:NO
	LIS	R2,FST.CR	:SET UP FSTFLG FOR ACCOUNTING
	SBT	R2,FSTFLG,R9,R9	:INDICATES LENGTH OF CUD > 16
ESP938	HS	0
	LHI	R12,CLRFST^8!DIA000
	:changes end here	:LSH 14-JUL-87
	TBT	RL,FSA.F	
	JE	ESPCLR			:FAST SELECT ACCEPTANCE NOT SUBSCRIBED
	LHL	R2,DPORT
	LB	R2,TURLEV,R2,
	JE	ESPCLR			:IF TURKEY LEVEL 0, GO CLEAR THE CALL
	LHI	R0,FC.RF		:PUT IT OUT AT LEAST FOR THE F.S.
	OHI	R6,RF.FS		:ADD IN FAST SELECT VALUE
	TBT	R9,FSTRES,,
	JEFS	ESP936			:IF NO RESTRICTION
	OHI	R6,RF.RS
ESP936	LR	R0,R0
	JEFS	ESP942			:IF NO NEED TO PUT THIS OUT
    ELSE	1-FSTSLT
	TBT	RL,RCNS.F
	JNFS	ESP942			:IF REVERSE CHARGE NOT SUBSCRIBED
    EI
	JAL	R4,WCI
	LR	R0,R6			:GET REVERSE CHARGE/ FAST SELECT VALUE
	JAL	R4,WCI
:	PACKET/WINDOW SIZE NEGOTIATION.
ESP942	LIS	R7,0			:SIGNAL CALL REQUEST PACKET
	JAL	R9,ADPSWS		:ADD PS/WS FACILITY
	LHL	R9,IPORT
  IF	X.75
	TBT	R9,CIDRCV,,		:DID WE RECEIVE A UTILITY FIELD? :DRE 26-JUN-87
	JE	ESP953			:NO, THEREFORE NO SAVED UTILITIES
  EI
	LHL	R1,FACBUF
	CBCT(R8)			:COUNT THE DATA IN THE FACBUF :DRE 7-OCT-87
	LR	R8,R8						:DRE 7-OCT-87
	JE	ESP953			:IF NOTHING TO COPY
	JAL	R4,GCI			:GET UTILITY/FACILITY LENGTH FROM MSG
	CR	R0,R8			:ENOUGH DATA IN FACBUF?	:DRE 1-JUL-87:DRE 7-OCT-87
	JG	ESPCL0			:NO, CLEAR CALL		:DRE 1-JUL-87
	LR	R8,R0
ESP944	SIS	R8,1
	JLFS	ESP950			:IF ALL UTIL COPIED
	LHL	R1,FACBUF
	JAL	R4,GCI
	LHL	R1,IECBUF
	JAL	R4,WCI
	JBS	ESP944

ESP950	HS	:THE FOLLWING BLOCK OF CODE IS NOT NEEDED BECAUSE
:		:OF THE NEW HANDLING OF THE "C" AND "D" MESSAGES.
  IF	0&CUGENA			:IF CUG CODE ENABLED
	TBT	R9,CUGCAL,,
	JE	ESP953			:IF HAVE NOT RCVD CUG FAC/UTL
	LHL	R1,FACBUF
	CBCT(R2)
	LR	R2,R2
	JE	ESP953			:IF NOTHING IN BUFFER
    IF	X.75
	TBT	R9,FROM75,,
	JN	ESP953			:IF CALL FROM ANOTHER X.75, MUST BE FACILITY
    EI	X.75
:	INCLUDE THE CUG FACILITY(IF X.25)/UTILITY(IF X.75) IN THE CALL REQUEST
:	FACILITY(IF X.25)/UTILITY(IF X.75) THAT WE ARE MAKING.
:	FIRST BYTE HAS LENGTH
	JAL	R4,GCI			:GET LENGTH
	CR	R0,R2			:ENOUGH DATA IN FACBUF?	:DRE 1-JUL-87
	JG	ESPCL0			:NO, CLEAR CALL		:DRE 1-JUL-87
	LR	R8,R0
	LR	R5,R1			:SAVE (FACBUF)
ESP952	SIS	R8,1
	JLFS	ESP953
	LR	R1,R5
	JAL	R4,GCI
	LHL	R1,IECBUF
	JAL	R4,WCI
	JBS	ESP952
  EI	CUGENA

ESP953	LHL	R1,FACBUF		:CHECK FOR FACILITIES	:DRE 15-JUN-87
	CBCT(R2)
	LR	R2,R2
	JE	ESP959			:IF NOTHING TO COPY
	JAL	R4,GCI			:GET FACILITY LENGTH FROM MSG
	CR	R0,R2			:ENOUGH DATA IN FACBUF?	:DRE 1-JUL-87
	JG	ESPCL0			:NO, CLEAR CALL		:DRE 1-JUL-87
	LR	R8,R0
ESP954	SIS	R8,1
	JLFS	ESP959			:IF ALL FACILITIES COPIED
	LHL	R1,FACBUF
	JAL	R4,GCI
	LHL	R1,IECBUF
	JAL	R4,WCI
	JBS	ESP954
ESP959	HS
  IF	X.75
	LR	R3,RL
	SLLS	R3,ONI.SC
	LHL	R8,ONI.LT,R3,R3		:GET OUR DNIC
    IF	DNICND
	LHL	R1,IECBUF
	LHL	R4,DPORT
	LHL	R2,SAVDNC,R4,R4		:GET SAVED DNIC
	LIS	R7,0
	CLR	R2,R8			:COMPARE AGAINST OUR DNIC
	JEFS	ESP955			:IF DNIC'S MATCH, NOT TRANSIT NET
	LR	R7,R2
ESP955	TBT	R9,FROM75,,
	JE	ESP956			:IF NOT CALL FROM AN X.75
	LR	R7,R7
	JE	ESP957			:IF SAVED DNIC WAS EQUAL TO OURS
:	TRANSIT NET ID.
:	ADD THE DNIC FROM THE DNICNODES STATEMENT AS TNIC.
	LHI	R0,UT.TNI		:TRANSIT NET ID UTIL CODE
	JAL	R4,WCI
	LHL	R2,DPORT
	LR	R0,R7			:USE DNIC FROM DNICNODES
	WHI
	JFS	ESP957			:GO ADD OUR DNIC ALSO

:	CALL NOT FROM AN X.25, BUT SPECIFIED IN DNICNODES AND THE
:	DNIC DOES NOT MATCH OURS, CONSIDER OURSELVES A TRANSIT NET.
ESP956	LR	R7,R7
	JEFS	ESP958			:IF SAVED DNIC SAME AS OURS, NO NEED TO ADD
    ELSE	1-DNICND
	TBT	R9,FROM75,,
	JEFS	ESP958			:IF NOT CALL FROM AN X.75
    EI
:	PUT OUR DNIC AS TNIC.
ESP957	LHI	R0,UT.TNI		:PUT OURS OUT
	JAL	R4,WCI
	LR	R0,R8
	WHI
   EI	X.75

:	UPDATE LENGTH FIELD OF FACILITY/UTILITY.
ESP958	HS
	LHL	R2,TEMP1		:GET PREVIOUS LENGTH OF IECBUF
	LHL	R1,IECBUF
	CBCT(R3)			:GET PRESENT LENGTH
	SR	R3,R2
	SIS	R3,1			:SUBSTRACT OUT LENGTH FIELD
	L	R4,TEMP4		:SAVED POSITION OF UTILITY LENGTH FIELD
	LHL	R1,FACBUF
	STB	R3,,R4			:UPDATE LENGTH
  IF	X.75
	LIS	R0,0
	CBCT(R2)
	LR	R2,R2
	JEFS	ESP960			:IF NO FACILITIES FOLLOWING
	JAL	R4,GCI			:GET FACILITY LENGTH
	CR	R0,R2			:ENOUGH DATA IN FACBUF?	:DRE 1-JUL-87
	JG	ESPCL0			:NO, CLEAR CALL		:DRE 1-JUL-87
ESP960	LHL	R1,IECBUF
	LR	R8,R0
	JAL	R4,WCI			:COPY LENGTH
:	COPY FACILITIES FROM MSG TO IEC BUFFER.
ESP962	SIS	R8,1
	JLFS	ESP970			:IF NO MORE FACILITIES
	LHL	R1,FACBUF
	JAL	R4,GCI
	LHL	R1,IECBUF
	JAL	R4,WCI
	JBS	ESP962
  EI	X.75

:	PUT IN CALL USER DATA.
:	IF AN ITI CALL, REMOVE BYTE 2-4 AND REPLACE WITH 0
:	OR TELENET STYLE TID AND SPEED IF REQUIRED

ESP970	LHL	R1,DIBUF
	CBCT(R7)			:GET AMOUNT OF CHARS IN CALL USER DATA
	LR	R7,R7
	JE	ESP990			:IF NO CUD
	CLHI	R7,4
	JL	ESP980			:IF NO PROTOCOL ID FIELD
	:changes begin here	:LSH 14-JUL-87
	:If fast select code is not enabled and the length of CUD is
	:greater than 16 bytes, clear the call with clearing cause
	:'fast select acceptance not subscribed'.
	LHI	R4,$A16
	LHI	R12,CLRFST^8!DIA000	:'FAST SELECT ACCEPTANCE NOT SUBSCRIBED
  IF	FSTSLT
	:If fast select code is enabled, and a normal call has
	:more than 16 bytes CUD or a fast select call has
	:more than 128 bytes CUD, the call will be cleared with
	:diagnostic code 'illegaly formatted ESCPD message'.
	LHI	R12,CNETCG^8!DIA175	:'ILLEGALY FORMATTED ESCPD MSG'
	TBT	R9,FSTSEL,,
	JEFS	ESP972
	LHI	R4,$A128
  EI	:FSTSLT
ESP972	CR	R7,R4
	JG	ESPCLR
	:changes end here	:LSH 14-JUL-87
	JAL	R4,GCI			:GET FIRST BYTE OF PROTOCOL ID
	CLHI	R0,PI.PAD
	JN	ESP985			:IF NOT ITI CALL
	LHL	R2,IPORT
	SBT	R2,ITICAL
  IF	TPIDS				:IF ANY TELENET PROTOCOL ID LINKS
	TBT	RL,TPID.F		:IS THIS LINK ??
	JE	ESP985			:IF NOT
	LIS	R6,3
	SIS	R7,4
ESP974	JAL	R4,GCI			:FLUSH OFF REST OF PROTOCOL ID
	SIS	R6,1
	JNBS	ESP974
	LHL	R1,IECBUF
	LHI	R0,01
	JAL	R4,WCI
	LHL	R3,DPORT
	LB	R2,ORGTID,R3,		:GET TYMNET TID BACK
	NHI	R2,1F
	LB	R0,TELTID,R2,		:GET TELENET EQUIV
	LR	R6,R2
	JAL	R4,WCI
	LHL	R3,DPORT		:RESTORE DPORT		:SCY 29-May-85
	LB	R3,BAUD,R3,		:TYMNET OUTPUT BAUD RATE
	NHI	R3,0F
	LB	R0,TY.CC,R3,		:CCITT EQUIVALENT (ALSO TELENET)
	JAL	R4,WCI
	LIS	R0,0
	JFS	ESP978
ESP976	LIS	R0,0
	JAL	R4,WCI
	JAL	R4,WCI

ESP978	JAL	R4,WCI
	LR	R7,R7
	JE	ESP990			:IF ONLY PROTOCOL ID
	LHL	R1,DIBUF		:RESTORE REG. 1
  ELSE
	JFS	ESP985
  EI	TPIDS
:	COPY CUD TO IECBUF
ESP980	JAL	R4,GCI			:GET A BYTE
ESP985	LR	R9,R1
	LHL	R1,IECBUF
  IF	(.MARK!.SPACE)&.CUD&.ALL	:IF ANY LINK CONTROLS CUD PARITY
	TBT	RL,ALL.F		:APPLIES TO TURKEY CALLS ??
	JE	ESP987			:IF NOT
	TBT	RL,CUDP.F		:APPLIES TO CALL USER DATA ??
	JE	ESP987			:IF NOT
   IF	.MARK				:IF ANY LINK WANTS MARK PARITY
	TBT	RL,MRKP.F		:DOES THIS ONE ??
	JEFS	ESP986			:IF NOT
	OHI	R0,080			:SET MARK PARITY
    IF	.SPACE
	JFS	ESP987
    EI	.SPACE
   EI	.MARK
ESP986	HS
   IF	.SPACE				:IF ANY LINK WANTS SPACE PARITY
	TBT	RL,SPCP.F		:DOES THIS ONE ??
	JEFS	ESP987			:IF NOT, MUST HAVE BEEN SAVE PARITY
	NHI	R0,7F			:REMOVE PARITY
   EI	.SPACE
  EI	(.MARK!.SPACE)&.CUD&.ALL
ESP987	JAL	R4,WCI
	LR	R1,R9
	SIS	R7,1
	JN	ESP980

ESP990	LHL	R6,DPORT
	LHL	R2,CALCNT,R6,R6		:GET COUNT IN BUFFER WHEN WE STARTED
	SLLS	R6,3			:DOUBLE WORD OFFSET INTO CALPOS
	L	R3,CALPOS+4,R6,		:GET POSITON OF LENGTH, 2ND BYTE
	LHL	R4,IECBUF
	CBCT(,R4)
	SR	R0,R2
	STB	R0,,R3			:PUT IN 2ND BYTE OF LENGTH
	SRLS	R0,8
	L	R3,CALPOS,R6,		:GET POSITION OF LENGTH, 1ST BYTE
	STB	R0,,R3			:1ST BYTE OF LENGTH
	LHL	R1,IPORT
	RBT	R1,PWCLD
	RBT	R1,PWCUD
	LB	RL,IL.MT,R1,		:LINE #
	LB	R0,T11.LT,RL,		:CALL TIME COUNT
	STB	R0,TNCNTR,R1,
	SBT	R1,TNTA.F
	:changes begin here	:LSH 14-JUL-87
	:Report accounting messages
	LA	R9,DTESAV,,
	LI	R8,AA.CD4
	JAL	R13,ACTADR,,		:'CALLED ADDRESS ACCOUNTING'
	LA	R9,DTESAX,,
	LI	R8,AA.CL4
	JAL	R13,ACTADR,,		:'CALLING ADDRESS ACCOUNTING'
 IF	FSTSLT
	LHL	R9,IPORT
	TBT	R9,FSTSEL,,
	JEFS	ESP991
	LHL	R4,FSTFLG,R9,R9
	LI	R7,AA.FST
	OR	R7,R4
	JAL	R9,GENRPT,,		:'FAST SELECT ACCOUNTING'
 EI	:FSTSLT
ESP991	LHL	R4,DPORT
	SBT	R4,POCHNG
	SBT	R4,PICHNG
	SBT	R4,SOCHNG
	SBT	R4,SICHNG
	JAL	R4,PCTRPT,,		:'PACKET COUNTS'
	JAL	R4,SCTRPT,,		:'SEGMENT COUNTS'
	:changes end here	:LSH 14-JUL-87
	J	MMFRA,,

   IF	\PTRMAC
ESPERR	LHI	R12,CLOCPE^8!DIA067	:ERROR, LOC.PROC., INV CALLED ADDRESS
	J	ESPCLR			:CLEAR AND CLEANUP 
   EI

:ROUTINE TO TRANSFER ADDRESS
ESP906	JER	R4			:RETURN IF COUNTER 0
	ST	R4,TEMP			:SAVE RETURN
	JAL	R7,ESPGDT		:GET DIGIT
	JAL	R7,ESPSDT		:PUT DIGIT IN IECBUF
	L	R4,TEMP			:RESTORE RETURN
	SIS	R8,1
	J	ESP906

:GET DIGIT ROUTINE
ESPGDT	LIS	R0,0E
	TBT	R0,ESPTMP		:GET UPPER (NIBBLE) DIGIT
	JNFS	ESP907			:   NO
	CBT	R0,ESPTMP		:FLIP SWITCH
	LB	R0,,R9,R6		:GET BYTE
	SRLS	R0,4			:SEND BACK UPPER DIGIT
	JR	R7			:RETURN
ESP907	CBT	R0,ESPTMP		:FLOP SWITCH
	LB	R0,,R9,R6		:GET BYTE
	NHI	R0,0F			:SEND BACK LOWER (NIBBLE) DIGIT
	AIS	R6,1
	JR	R7			:RETURN

:PUT DIGITS IN IECBUF ROUTINE
ESPSDT	LIS	R4,0F
	TBT	R4,ESPTMP		:SAVE UPPER (NIBBLE) DIGIT
	JNFS	ESP908			:   NO
	CBT	R4,ESPTMP		:FLIP SWITCH
	SLLS	R0,4			:SAVE DIGIT IN UPPER NIBBLE
	STB	R0,ESPTMP		:   OF ESPTMP
	JR	R7			:RETURN
ESP908	CBT	R4,ESPTMP		:FLOP SWITCH
	LB	R4,ESPTMP		:GET UPPER (NIBBLE) DIGIT
	OR	R0,R4			:CONCATENATE DIGITS
	JAL	R4,WCI			:PUT BYTE IN IECBUF
	JR	R7			:RETURN

	SSTTL(PROCESS IIX INTERRUPT DATA MSG)

:	PROCESS AN INTERRUPT PACKET
ESPA	JAL	R4,GCI			:GET DATA BYTE
	LR	R9,R0			:SAVE DATA BYTE
	LHL	R1,IECBUF		:QUEUE UP AN INTERRUPT
	LHI	R0,ZINTP
	JAL	R4,WCI
	LR	R0,R9
	JAL	R4,WCI			:PUT OUT DATA BYTE
	JAL	R4,COP1S1,,		:UPDATE OUTPUT COUNTS	:LSH 14-JUL-87
	J	MMFRA,,

	SSTTL(PROCESS IIX INTERRUPT CONFIRMATION MSG)

:	PROCESS INTERRUPT CONFIRMATION PACKET.
ESPB	RBT	R7,RFLINT
	LHL	R1,IPORT
	SBT	R1,FLINTC		:SET FLAG SAYING A CONFIRMATION IN QUEUE
	LHL	R1,IECBUF
	LHI	R0,ZINTPC		:GET INTERRUPT CONF. PACKET TYPE
	JAL	R4,WCI
:	JAL	R4,COP,,		:UPDATE OUTPUT PACKET COUNT:LSH 14-JUL-87
	J	MMFRA,,

	SSTTL(PROCESS IIX NETWORK UTILITIES MSG)

:	PROCESS NETWORK UTILITIES. FIRST SELECT A LINK AND FINISH LOGON
:	INITIALIZATION TO THIS INTERFACE.

ESPC	LHL	R2,DPORT
	TBT	R2,LSLCTD,,
	JNFS	ESPC02			:IF LINK ALREADY SELECTED
	JAL	R0,LNKSEL,,		:SELECT A LINK FROM LNKSET
	J	ESPN50			:IF CANNOT, CLEAR THE CALL
	JAL	R0,FXEPRT,,		:FIND EXTERNAL PORT
	J	ESPN51			:IF CANNOT, CLEAR THE CALL :HJR 07-09-87
	JAL	R0,NDLST2,,		:DO SOME INITIALIZATION
ESPC02	LHL	R1,DIBUF
	CBCT(R7)
	LR	R7,R7
	JE	ESPCL0			: IF NOT ENOUGH DATA
  IF	X.25			:FOR X25
	JAL	R13,PUF			:PROCESS UTILITY FIELD, X25
	J	ESPCL0			:IF ERROR ENCOUNTERED
  ELSE	X.75			:X.75
	LHL	R1,FACBUF		:CHECK FAC BUFFER	:DRE 23-JUN-87
	LHL	R0,BCT,R1,		:ANYTHING IN THERE?	:DRE 23-JUN-87
	JEFS	ESPC08			:NO, FORGET THIS STUFF
	LR	R5,R1			:YES, FACILITIES GOT HERE FIRST!
	LHI	R1,TMPBF2		:SET UP TO USE THE TEMP BUF
	JAL	R4,EMPTY,,		:DRAIN THE TEMP BUFFER
	LR	R6,R1			:GET DST BUFFER #
	JAL	R7,MCI,,		:COPY THE BUFFER
ESPC08	LIS	R9,2			:INDICATE CALL REQ UTILITY PROCESSING
	JAL	R13,PFAC		:PROCESS UTILITY FIELD
	J	ESPCL0			:IF ERROR ENCOUNTERED
	LHL	R9,IPORT		:GET THE IPORT #	:DRE 26-JUN-87
	SBT	R9,CIDRCV,,
	JN	ESPC10			:IF ALREADY RECEIVED CALL ID UTILITY
	LHL	R1,FACBUF		:SETUP TO WRITE IN FACBUF
	LHI	R0,UT.CID		:CALL ID UTILITY CODE
	JAL	R4,WCI
	LR	R7,R9
	AR	R7,R7
	LB	R0,SAVINV+1,R7,R7	:1ST BYTE OF SUP INVOICE #
	JAL	R4,WCI
	LB	R0,SAVINV+2,R7,R7
	JAL	R4,WCI
	LB	R0,SAVINV+3,R7,R7
	JAL	R4,WCI
	AIS	R8,4			:ACCOUNT FOR THESE FOUR BYTES
	L	R4,TEMP1
	STB	R8,,R4			:STORE THE UPDATED COUNT
ESPC10	LHI	R1,TMPBF2
	LHL	R0,BCT,R1,		:DID WE SAVE FACILITIES IN TMPBUF?
	JE	MMFRA,,			:NO, ALL DONE
	LR	R5,R1			:SET UP SOURCE
	LHL	R6,FACBUF		:SET UP DEST
	JAL	R7,MCI,,		:COPY FACILITIES TO END OF UTILITIES
  EI
	J	MMFRA,,			:EXIT

ESPN50	LHI	R12,CNOTOB^8!DIA210	:COULDN`T SELECT LINK	:HJR 07-09-87
	J	ESPCLR			:CLEAR CALL		:HJR 07-09-87
ESPN51	LHI	R12,CNOTOB^8!DIA071	:NO CHANNEL AVAILABLE	:HJR 07-09-87
	J	ESPCLR			:CLEAR CALL		:HJR 07-09-87

	SSTTL(PROCESS IIX USER FACILITIES MSG)

:	PROCESS USER FACILITIES. IF DIDN'T ALREADY SELECT A LINK
:	(SEE NETWORK UTILITIES ABOVE) THEN DO SO NOW.

ESPD	LHL	R2,DPORT
	TBT	R2,LSLCTD,,		:TEST LINK SELECTED FLAG
	JNFS	ESPD2			:IF ALREADY HAVE ONE
	JAL	R0,LNKSEL,,		:SELECT A LINK FROM LNKSET
	J	ESPN50			:IF CANNOT, CLEAR THE CALL
	JAL	R0,FXEPRT,,		:FIND EXTERNAL PORT
	J	ESPN51			:IF CANNOT, CLEAR THE CALL :HJR 07-09-87
	JAL	R0,NDLST2,,		:DO SOME INITIALIZATION
ESPD2	LIS	R9,0			:INDICATE CALL REQUEST FACILITY PROCESSING
	JAL	R13,PFAC		:PROCESS FACILITY FIELD
	J	ESPCL0			:IF ERROR ENCOUNTERED
	LHI	R1,TMPBF1		:GET TMP BUF #		:DRE 23-MAY-86 
	CBCT(R5)			:WAS ANYTHING PUT INTO THE TMP BUF? :DRE 23-MAY-86 
  IF	X.75							:DRE 15-JUN-87
	SR	R8,R5			:REDUCE UTILITY COUNT	:DRE 15-JUN-87
	L	R4,TEMP1		:GET ADDRESS OF COUNT	:DRE 15-JUN-87
	STB	R8,,R4			:SAVE UPDATED VALUE	:DRE 15-JUN-87
	LR	R0,R5			:GET COUNT		:DRE 15-JUN-87
	LHL	R1,FACBUF		:SET UP FACILITY BUFFER	:DRE 15-JUN-87
	JAL	R4,WCI			:OUTPUT FACILITY LENGTH	:DRE 15-JUN-87
	LHI	R1,TMPBF1		:SET UP TEMP BUFFER	:DRE 15-JUN-87
  EI
	LR	R5,R5						:DRE 23-MAY-86 
	JEFS	ESPD3			:NO, CONTINUE AS NORMAL	:DRE 23-MAY-86 
	JAL	R12,CTF			:COPY FROM TEMPORARY TO FAC BUFFER :DRE 23-MAY-86 
ESPD3	J	MMFRA,,

	SSTTL(PROCESS IIX DIAGNOSTIC MSG)

:	FINISH OFF ESCAPED DIAGNOSTIC CAUSE.
  REMIND(ESPE- POSSIBLY CLEAR CALL IF TURKEY LEVEL >= 1)
ESPE	JAL	R4,GCI			:GET CAUSE BYTE
	LHL	R4,IPORT
  IF	OLDTUR			:TALKING OLD TURKEY
	LHL	R2,DPORT
	TBT	R2,IIXCAL
	JNFS	ESPE2
	LR	R2,R0
	LB	R0,TCHINV,R2,		:REVERSE IT
ESPE2	HS
  EI	OLDTUR
	STB	R0,PSDIAG+1,R4,R4
	J	MMFRA,,

	SSTTL(PROCESS IIX CALL CONNECTED MSG)

:	PROCESS CALL CONNECTED PACKET INFO FIELD.
:	(THIS MSG IS OBSOLETE FOR TURKEY LEVEL >= 1)
:	DATA IS FLUSHED... RMAKE LOGIC WILL BUILD A CALL CONNECTED
:	PACKET.
:	(MAKE SURE LEAVE FAC BUF ALONE FOR THERE MIGHT BE A TANSIT
:	NETWORK LIST FOR X.75)
ESPF	LHL	R1,DIBUF
	CBCT(R4)
	LR	R4,R4
	JN	ESPF05
	LHL	R6,IPORT
	SLLS	R6,3
	ST	R4,DTESAX,R6,
	ST	R4,DTESAV,R6,
	J	CONTRK
ESPF05	JAL	R4,GCI			:GET CALLING/CALLED ADDR LENGTH
	LR	R5,R0
	NHI	R5,0F			:GET CALLED ADDR LENGTH
	SRHLS	R0,4			:GET CALLING ADDR LENGTH
	LR	R7,R0			:SAVE A COPY
	LHL	R6,IPORT
	SLLS	R6,3			:FORM INDEX
	STB	R5,DTESAX,R6,		:SAVE LENGTH OF CALLED ADDR
	AIS	R6,1
	LR	R5,R5
	JE	ESPF20			:IF 0 LENGTH CALLED ADDRESS
	LHL	R1,DIBUF
ESPF10	JAL	R4,GCI			:GET TWO DIGITS OF CALLED ADDRESS(CLDADR)
	SIS	R5,1
	JE	ESPF50			:JUMP IF DONE, ODD NUMBER OF CLDADR LENGTH
	STB	R0,DTESAX,R6,
	AIS	R6,1
	SIS	R5,1
	JG	ESPF10

:	EVEN NUMBER OF CALLED ADDRESS

ESPF20
	LR	R7,R7
	JE	ESPF80
	LHL	R6,IPORT
	SLLS	R6,3			:FORM INDEX
	STB	R7,DTESAV,R6,		:STORE CALLING ADDRESS LENGTH
	AIS	R6,1
ESPF25
	JAL	R4,GCI			:GET TWO DIGITS OF CALLING ADDRESS(CLGADR)
	STB	R0,DTESAV,R6,
	AIS	R6,1
	SIS	R7,2
	JGBS	ESPF25
	J	ESPF80


:	ODD NUMBER OF CALLED ADDRESS

ESPF50
	LR	R4,R0
	NHI	R4,0F0			:MASK OFF DIGIT OF CALLING ADDRESS
	STB	R4,DTESAX,R6,		:STORE THE LAST TWO DIGITS OF CLDADR
	LR	R7,R7
	JE	ESPF80
	NHI	R0,0F			:GET THE RIGHT DIGIT WHICH BELONG TO CLGADR
	LR	R5,R0			:SAVE TO R5
	SLLS	R5,4			:SHIFT HIGH ORDER SEMI OCTECT INTO POSITION
	LHL	R6,IPORT
	SLLS	R6,3			:FORM INDEX
	STB	R7,DTESAV,R6,		:STORE THE CLGADR LENGTH
	AIS	R6,1
	SIS	R7,1
	JE	ESPF70
ESPF60
	JAL	R4,GCI			:GET TWO DIGITS OF CLGADR
	LR	R4,R0			:SAVE A COPY
	SRLS	R0,4			:GET THE LEFT DIGIT OF TWO DIGITS
	OR	R5,R0			:FORM TWO DIGITS
	STB	R5,DTESAV,R6,		:STORE IT
	AIS	R6,1
	SIS	R7,1
	JE	ESPF80
	NHI	R4,0F			:GET RID OF RIGHT DIGIT
	SLLS	R4,4
	LR	R5,R4			:SAVE TO R5
	SIS	R7,1
	JG	ESPF60
ESPF70
	STB	R5,DTESAV,R6,
ESPF80

	JAL	R4,EMPTY,,		:EMPTY IT
	J	CONTRK			:CONNECT THE TURKEY UP


:	RESET CONFIRMATION IIX MESSAGE --  THIS IS OBSOLETE FROM TURKEY
:	LEVEL ONE.  WE WILL NEVER GET THIS WHEN TALKING TO 'OLD' TURKEY
:	SINCE WE SHOULD BE IN DFLUSH MODE AND A SPECIAL CHECKING IN MMFR30
:	SHOULD DETECT THIS MESSAGE EALIER AND RESET DFLUSH.
:	FOR TURKEY LEVEL < 1 AND NON OLD TURKEY, DFLUSH SHOULD
:	ALREADY BEEN RESET AT THIS TIME SO JUST IGNORE.
ESP11	J	MMFRA,,			:IGNORE

	SSTTL(PROCESS IIX CALL ACCEPTED MSG)

:	HANDLE EXTENDED CALL ACCEPTED PACKET INFO FIELD.
:	EXPECTS NETWORK UTILITY AND USER FACILITY FIELDS. (LENGTH
:	OF 0 IF NOT PRESENT)
								:LSH 14-JUL-87
ESP12	LI	R7,AA.IRC!CA.BT		:REPORT 'CALL ACCEPTED' ACCOUNTING
	JAL	R9,GENRPT,,		:			:LSH 14-JUL-87
	LHL	R1,IPORT
	SBT	R1,EXTDCA,,		:TELL *RM* ABOUT THIS
  IF	FSTSLT
:	TBT	RL,FSS.F		:have checked it when received 
					:call request		:LSH 14-JUL-87
:	JE	ESP12A			:IF NOT SUBSCRIBED TO FAST SELECT
	TBT	R1,FSTSEL,,		:IS IT A FAST SELECT CALL:LSH 14-JUL-87
	JEFS	ESP12A						:LSH 14-JUL-87
	LB	R2,PCKSTE,R1,
	CLHI	R2,PSCALC
	JNFS	ESP12A			:IF NOT IN SEND CALL CONFIRMATION STATE
	TBT	R1,FSTRES,,
	JEFS	ESP12A			:IF NOT FAST SELECT WITH RESTRICTION
	J	ESPCL2			:FAST SELECT WITH RESTRICTION AND RCVD
:					 CALL ACCEPT, ERROR	:AHM 5-29-87
ESP12A	HS
  EI	FSTSLT
	LHL	R1,DIBUF
	CBCT(R5)
	LR	R5,R5
   IF	X.75
	JN	ESP12B			:IF SOMETHING IN THE BUFFER
	LIS	R0,0			:CREATE ZERO FIELD LENGTHS FOR ADDRESSES
	JAL	R4,WCI
ESP12B	HS
   ELSE
	JE	CONTRK			:IF NOTHING IN BUFFER
   EI	X.75
	LHL	R1,FACBUF
	JAL	R4,WCI			:1ST BYTE OF LENGTH, NOTE,
:					 FAC BUF IS USED DIRECTLY IN RM TO MAKE THE
:					 CALL ACCEPT PACKET, HENCE REQUIRING HW OF LEN
	L	R2,BE,R1,
	ST	R2,ES12T1		:REMEMBER POSITON OF 1ST BYTE OF LEN
					:LSH 14-JUL-87
	AHI	R0,1,R5			:ACCOUNT FOR FLAG BYTE
	JAL	R4,WCI			:2ND BYTE OF LEN
	L	R2,BE,R1,
	ST	R2,ES12T2		:REMEMBER 2ND BYTE OF LEN
					:LSH 14-JUL-87
	LIS	R0,0
	JAL	R4,WCI			:WRITE FLAG BYTE
	LR	R9,R1
	LHL	R1,DIBUF
	JAL	R4,GCI			:GET CALLING/CALLED ADDRESS LENGTH

  IF	\PTAMAC
: THE FOLLOWING CODE IS GENERATED ONLY IF THE PFXTLA MACRO HAS BEEN CONFIGED
	LHL	R4,PTA.LT,RL,RL		:GET OFFSET INTO PREFIX TABLE
	JEFS	ESP12C			:JUMP, IF NO TABLE ENTRY
	STB	R0,PFXSEC,,		:SAVE ADDRESS(S) LENGTH BYTE
	:Fix for NSR 706	:LSH 22-JUL-87
	LR	R0,R0			:IF ADDRESS LENGTH 0, GO TO REGULAR
	JNFS	ESP12D			:LOGIC TO WRITE THE LENGTH:LSH 22-JUL-87
ESP12C	HS
  EI

	LR	R1,R9
	JAL	R4,WCI			:WRITE LENGTH
ESP12D	LHL	R1,DIBUF
	LR	R5,R0
	NHI	R5,0F			:GET ONE OF THEM
	SRHLS	R0,4
	AR	R5,R0
	AIS	R5,1
	SRHLS	R5,1			:GET NO. OF DIGITS TO COPY
	:Recover the code and remove the change.
	:This fix NSR706 problem, but will write an extra 00 to the
	:call accepted packet when the address length is 0 and the
	:code is generated without PFXTLA macro.	:LSH 22-JUL-87
	JE	ESP120			:IF 0 LENGTH
:	JNFS	ESP12R			:IF NON ZERO - JUMP  ::MB 6-16-87
:	LHL	R1,FACBUF				:MB 6-16-87
:	LIS	R0,0					:MB 6-16-87
:	JAL	R4,WCI			:COPY ADDR LENGTH OF 0  ::MB 6-16-87
:	LHL	R1,DIBUF				:MB 6-16-87
:	J	ESP120					:MB 6-16-87
:ESP12R							:MB 6-16-87
	CBCT(R4)
	CLR	R5,R4
	JG	ESPCL2			:CLEAR CALL IF NOT ENOUGH DATA IN BUFFER

  IF	\PTAMAC
:  THIS CODE USES PREFIX ROUTINES ORIGINALLY DESIGNED FOR USE BY RT
:  THEREFOR, A DUMMY RTD SECTOR IS BUILT USING PFXSEC.
:
	LHL	R4,PTA.LT,RL,RL		:GET OFFSET INTO PREFIX TABLE
	JE	ESP12I			:JUMP, IF NO TABLE ENTRY
	LA	R4,TLA.LT,R4,		:GET ADDRESS OF PREFIX ENTRY
	ST	R4,PFXEAD,,		:SETUP FOR JUMP TO PREFIX ROUTINES
	LA	R6,1,R5			:ADD ONE FOR LENGTH BYTE
	LIS	R9,1
ESP12E	JAL	R4,GCI			:TRANSFER ADDRESSES TO DATA AREA
	STB	R0,PFXSEC,R9,
	AIS	R9,1
	SIS	R5,1
	JNBS	ESP12E
	LA	R5,PFXSEC,,		:SETUP R5 AS THE SECTOR ADDR POINTER
	LIS	R0,0F							:FAK 29-Nov-84
	STB	R0,PXADLN,,		:VALIDATE ADDR LENGTHS ON 15, NOT 14 DIGITS :FAK 29-Nov-84
	JAL	R9,PFXMN1,,		:ADDRESS MODIFICATION ROUTINES
	J	ESP12F			:GOOD RETURN
	J	ESPCL3			:BAD RETURN OR CLEAR SPECIFIED
ESP12F	LIS	R0,0E						:FAK 29-Nov-84
	STB	R0,PXADLN,,		:RESTORE NORMAL VALIDATION LENGTH OF 14 DIGITS :FAK 29-Nov-84
	LHL	R1,FACBUF
	LIS	R9,0
ESP12G	LB	R0,PFXSEC,R9,		:MOVE MODIFIED ADDRESSES TO FACBUF
	JAL	R4,WCI
	AIS	R9,1
	SIS	R6,1		
:	JE	ESP12H						:DRE 23-FEB-85
:	J	ESP12G						:DRE 23-FEB-85
	JNBS	ESP12G						:DRE 23-FEB-85
ESP12H	LHL	R1,DIBUF
	JFS	ESP120
  EI

ESP12I	JAL	R12,CDF			:COPY FROM DI BUFFER TO FAC BUF

:	PROCESS UTILITY FIELD.
:	NOTE:	WE ARE EXPECTING A UTILITY FIELD LENGTH HERE EVEN IF
:		IT IS X25.
ESP120	HS
  IF	X.25			:FOR X25
	JAL	R13,PUF			:PROCESS UTILITY FOR X25
	J	ESPCL2			:IF ERROR ENCOUNTERED
	LIS	R9,1			:SET UP FOR CA FACILITIES :DRE 23-JUN-87
	JAL	R13,PFAC		:PROCESS REST OF FACILITIES
	J	ESPCL2			:IF ERROR ENCOUNTERED
ESP122	TBT	RL,PWN.F
	JNFS	ESP123			:IF SUBSCRIBED TO WINDOW SIZE NEGOTIATION
	TBT	RL,PSN.F
	JNFS	ESP123			:IF SUBSCRIBED TO PACKET SIZE NEGOTIATION
	JAL	R9,ADDTC		:DETERMINE IF NEED TO PUT OUT TC FACILITY
	J	ESP126			:NO NEED TO SEND
ESP123	LHL	R1,FACBUF
	LR	R8,R8
	JGEFS	ESP124			:IF FIELD NOT NULL
:	INVENT WHOLE FACILITY FIELD.
	LIS	R0,0
	LR	R8,R0			:INITIALIZE TOTAL LENGTH
	JAL	R4,WCI			:WRITE IN LENGTH
	L	R2,BE,R1,
	ST	R2,TEMP1		:REMEMBER PLACE OF LENGTH TO UPDATE LATER
:	IF SUBSCRIBED TO PS/PW NEGOTIATION, ADD PS/PW INDICATION.
ESP124	LIS	R7,1			:SIGNAL CALL ACCEPT PACKET
	JAL	R9,ADPSWS		:ADD PS/WS FACILITY, RETURNS(R5)= NO.CHARS
	AR	R8,R5			:ADD IN LENGTH
	JAL	R9,ADDTC		:DETERMINE NEED TO ADD TC FACILITY
	J	ESP125			:NO NEED TO ADD			:FAK 7-Nov-84
	LHL	R9,IPORT
	LIS	R0,FC.TC
	JAL	R4,WCI
	LB	R0,TCLTR,R9,
	JAL	R4,WCI
	AIS	R8,2			:ACCOUNT FOR TC FACILITY
:	UPDATE FINAL COUNT OF FACILITY.
ESP125	L	R2,TEMP1
	STB	R8,,R2

  ELSE	X.75
:	ALL THE FOLLOWING REWRITTEN TO HANDLE OSI END-TO-END FACILITEIS :DRE 22-JUN-87
:	RBT	RL,TEMP2		:USE (TEMP2) TO INDICATE 0 LENGTH UTILITY
:	LHL	R1,DIBUF
:	L	R9,BB,R1,		:PEEK AT UTILITY LENGTH FIELD
:	CBCT
:	LR	R0,R0
:	JEFS	ESP121			:IF NON EXISTENT UTILITY FIELD
:	LB	R9,,R9
:	JNFS	ESP121			:IF NON ZERO UTILITY LENGTH
:	SBT	RL,TEMP2		:MARK UTILITY LENGTH ZERO
:	JAL	R4,GCI			:SKIP OVER UTILITY AND PROCESS FACILITY
ESP121	LIS	R9,3			:INDICATE CALL ACCEPT UTILITY PROCESSING
	JAL	R13,PFAC		:FOR X.75
	J	ESPCL2			:IF ERROR ENCOUNTERED
:	UTILITY CA PROCESSING ALWAYS SETS UP FIELD
:	LHL	R1,FACBUF
:	LR	R8,R8
:	JGEFS	ESP124			:IF FIELD NOT NULL
:	INVENT WHOLE UTILITY FIELD.
:	LIS	R0,0
:	LR	R8,R0			:INITIALIZE TOTAL LENGTH
:	JAL	R4,WCI			:WRITE IN LENGTH
:	L	R2,BE,R1,
:	ST	R2,TEMP1		:REMEMBER PLACE OF LENGTH TO UPDATE LATER
:	ADD TO UTILITY THE LIST OF TRANSIT NETWORK ID WE SAVED FROM
:	THE CALL REQUEST.
:ESP124
	LIS	R9,1			:INDICATE FACILITY PROCESSING :DRE 22-JUN-87
	JAL	R13,PFAC		:PUT ANY FACILITIES IN 
	J	ESPCL2			:HANDLE FORMAT ERROR
	JAL	R6,ADDTNI		: RETURNS (R5)= NO. CHARS TOTAL IT TOOK
	AR	R8,R5			:ADD TOTAL LENGTH
:	IF SUBSCRIBED TO PS/PW NEGOTIATION, ADD PS/PW INDICATION.
	LIS	R7,1			:SIGNAL CALL ACCPET PACKET
	JAL	R9,ADPSWS		:ADD PS/WS FACILITY, RETURNS(R5)= NO.CHARS
	AR	R8,R5			:ADD IN LENGTH
	JAL	R9,ADDTC		:DETERMINE WHETHER TO ADD TC FACILITY
	J	ESP122			:NO NEED TO SEND
	LIS	R0,FC.TC
	JAL	R4,WCI
	LHL	R9,IPORT
	LB	R0,TCLTR,R9,
	JAL	R4,WCI
	AIS	R8,2			:ACCOUNT FOR TC FACILITY
:	UPDATE FINAL COUNT OF UTILITY.
ESP122	LHI	R1,TMPBF1		:GET TEMP BUF #		:DRE 22-JUN-87
	CBCT(R5)			:IS THERE SOMETHING IN TMPBF1
	SR	R8,R5			:IT WAS ADDED TO FIELD LENGTH :DRE 22-JUN-87
	L	R2,TEMP1
	STB	R8,,R2

:	PROCESS USER FACILITY FIELD.
:	RBT	RL,TEMP2
:	JE	ESP123			:IF ACTUAL UTILITY LENGTH WAS NOT ZERO
	LHL	R1,FACBUF
:	LIS	R0,0
:	JAL	R4,WCI			:FILL IN ZERO FOR DUMMY FACILITY LENGTH
:	J	ESP126			:SKIP PROCESSING FACILITY
:ESP123	HS
:	LIS	R9,1			:INDICATE CALL ACCEPT FACILITY PROCESSING
:	JAL	R13,PFAC		:PROCESS FACILITY FIELD
:	J	ESPCL2			:IF ERROR ENCOUNTERED
	LR	R0,R5			:GET SIZE OF FACILITY FIELD :DRE 22-JUN-87
	JAL	R4,WCI			:WRITE IT OUT
  EI	X.75

ESP126	LHI	R1,TMPBF1		:GET TMP BUF #		:DRE 23-MAY-86 
	CBCT(R5)			:WAS ANYTHING PUT INTO THE TMP BUF? :DRE 23-MAY-86 
	LR	R5,R5						:DRE 23-MAY-86 
	JEFS	ESP12X			:NO, CONTINUE AS NORMAL	:DRE 23-MAY-86 
	JAL	R12,CTF			:COPY FROM TEMPORARY TO FAC BUFFER :DRE 23-MAY-86 
ESP12X	LHL	R5,DIBUF
  IF	FSTSLT
:	TBT	RL,FSS.F		:Have checked it when received call
					:request.  :LSH 14-JUL-87
:	JE	ESP127			:IF NOT SUBSCRIBED TO FAST SELECT
	LHL	R4,IPORT
	TBT	R4,FSTSEL,,
	JE	ESP127			:IF NOT FAST SELECT

:	changes begin here	:LSH 14-JUL-87
	CBCT(R6,R5)		:COUNT OF CALL USER DATA
	LR	R6,R6
	JE	ESP127		:THERE IS NO ANY CUD
	LHL	R4,DPORT
	STH	R6,RUFCNT,R4,R4	:LENGTH OF CUD IN CALL CONNECTED
	JAL	R4,COP1SX,,	:INCREMENT OUTPUT COUNTS	:LSH 14-JUL-87
:@@@@@@@:In version 5, should set up FSTFLG here (set bit FST.CA), and 
:	:report fast select accounting (E016 + FSTFLG) here	:LSH 14-JUL-87
	CLHI	R6,$A128	:CLEAR CALL IF CUD > 128 BYTES
	JG	ESPCL2		:ERROR IN RCVD CALL ACCEPT MSG
	JAL	R4,PCTRPT,,	:REPORT PACKET COUNT ACCOUNTING
	JAL	R4,SCTRPT,,	:REPORT SEGMENT COUNT ACCOUNTING
	LHL	R5,DIBUF
:	changes end here	:LSH 14-JUL-87

	LHL	R6,FACBUF
	JAL	R7,MCI,,		:COPY C.U.D. INTO FAC BUF
	JFS	ESP128
  EI	FSTSLT

ESP127	LR	R1,R5
	JAL	R4,EMPTY,,		:EMPTY REST OF DATA
ESP128	LHL	R1,FACBUF
	CBCT(R2)			:GET FINAL COUNT
	SIS	R2,2			:SUBTRACT HW OF LENGTH
	L	R3,ES12T2		:GET POSITION OF LENGTH BYTE IN BUFFER
					:LSH 14-JUL-87
	STB	R2,,R3			:UPDATE FINAL LENGTH
	EXBR	R2,R2
	L	R3,ES12T1		:LSH 14-JUL-87
	STB	R2,,R3
	J	CONTRK			:GO CONNECT TURKEY UP

	SSTTL(PROCESS IIX TURKEY LEVEL MSG)

:	TURKEY LEVEL NUMBER MESSAGE.
:	SET (TURLEV) TO THE SMALLER OF OURS VERSES THEIRS.
:	SEND TURKEY LEVEL RESPONSE BACK.

ESP13	JAL	R4,GCI
	JAL	R4,GCI			:GET LEVEL NO.
	LHL	R4,IPORT
	LIS	R8,OURLEV
	STB	R0,TURLEV,R7,
	CLR	R0,R8
	JLE	ESP132			:THEIRS IS SMALLER, DO THEIRS
	TBT	R4,EXTCAL
	JEFS	ESP131			:IF NOT A RESPONSE
	LHI	R13,CNETCG^8!DIA170	:TURKEY LEVEL RESPONSE NOT ACCEPTABLE
	STH	R13,PSDIAG,R4,R4
	LHI	R1,AA.ERR
	J	IZAP30

ESP131	STB	R8,TURLEV,R7,		:THEIRS IS LARGER, DO OURS
ESP132	TBT	R4,EXTCAL
	JN	ESP135			:IF THIS IS A RESPONSE TO THE ONE WE SENT
	LIS	R7,2			:SEND A TURKEY LEVEL RESPOSE
	LHI	R12,EXM13
	JAL	R9,ESCAPN,,
	LIS	R0,0
	JAL	R4,BPUTCH
	LHL	R7,DPORT
	LB	R0,TURLEV,R7,
	JAL	R4,BPUTCH
	JAL	R9,ESCAPX,,
	J	MMFRA,,			:DO NOTHING

ESP135	HS
  IF	FSTSLT
	LB	R2,TURLEV,R7,		:GET FINAL TURKEY LEVEL NUMBER
	CLHI	R2,1
	JGE	ESP136			:IF LEVEL 1 OR ABOVE
	LHL	R4,IPORT
	TBT	R4,FSTSEL,,
	JEFS	ESP136			:IF NOT A FAST SELECT CALL
	LHI	R13,CLRFST^8!DIA000	:'FAST SELECT NON ACCEPTANCE'
	STH	R13,PSDIAG,R4,R4
	LHI	R1,AA.ERR
	J	IZAP30			:GO CLEAR THE CALL
ESP136	HS
  EI	FSTSLT
  IF	CUGENA			:IF CLOSED USER GROUP CODE ENABLED
	LB	R2,TURLEV,R7,		:GET FINAL TURKEY LEVEL NUMBER
	LHL	R4,IPORT
	TBT	R4,CUGCAL,,
	JE	ESP137			:IF NOT A CUG CALL
	CLHI	R2,1
	JGEFS	ESP137			:IF LEVEL 1 OR ABOVE
	LHI	R13,CLRINC^8!DIA189	:'DESTINATION DOES NOT UNDERSTAND CUG'
	STH	R13,PSDIAG,R4,R4
	LHI	R1,AA.ERR
	J	IZAP30			:GO CLEAR THE CALL
ESP137	HS
  EI	CUGENA
  IF	PVC
	LB	R0,PCKSTE,R4,		:LOOK AT PACKET STATE
	CLHI	R0,PWPVCR		:IS IT IN PVC WAIT STATE
	JN	ESP138			:NO - CONTINUE
	LB	R2,TURLEV,R7,		:CHK TURKEY LEVEL
	CLHI	R2,2			:IF .GE. 2
	JGE	ESP13A			:SEND PVC REQUEST MSG
	LHI	R0,AA.PRV		:BAD TURKEY LEVEL
	STH	R0,TERMCD		:ACOUNTING TERMINATE CODE
	JAL	R4,PVCERR,,		:CLEAN UP PVC, SET BUILD TIMER
ESP138	HS
  EI	PVC
	J	MMFRA,,
  IF	PVC
: SEND PVC REQUEST DIALECT MSG
ESP13A	LHI	R7,PV.LEN		:LENGTH OF DATA TO SEND IN MSG
	AIS	R7,2			:ADD MORE LENGTH FOR RING ITEM LENGTH ???
	AIS	R7,1			:ADD 1 MORE FOR DTE STATUS BYTE
	LHI	R12,EXM19
	JAL	R9,ESCAPN,,		:PUT MSG TYPE AND LENGTH (R7) IN ORING
	LHI	R0,PV.LEN		:PVCTAB ENTRY WITHOUT PVCLOG POINTER
	AIS	R0,1			:ADD 1 MORE FOR DTE STATUS BYTE
	LR	R7,R0
	SRLS	R0,8			:SEND FIRST LENGTH BYTE
	JAL	R4,BPUTCH
	LR	R0,R7			:SEND SECOND LENGTH BYTE
	JAL	R4,BPUTCH
	LHL	R2,IPORT
	LB	RL,IL.MT,R2,		:GET LINK NUMBER
	LHL	R6,IE.MT,R2,R2		:GET CORRESPONDING EPORT
	LHL	R3,PVCLNK,RL,RL		:FETCH OFFSET TO 1ST PVC FOR THIS LINK
	SH	R6,EPB.LT,RL,RL		:BIASED BY EPORT BIAS POINTER
	AH	R6,LCC.LT,RL,RL		:OFFSET BY LOW CONFIGURED CHANNEL
	SH	R6,LPC.LT,RL,RL		:BIASED BY LOW PVC CHANNEL
	SLLS	R6,S.PVC		:TABLE ENTRY SHIFT FACTOR
	AR	R6,R3			:COMBINE OFFSETS
	SIS	R7,1			:SEND DTE STATUS BYTE LATER
ESP13B	LB	R0,PVCTAB,R6,		:POINT TO BEGINNING OF ENTRY
	JAL	R4,BPUTCH
	AIS	R6,1
	SIS	R7,1
	JNBS	ESP13B			:WRITE OUT PVCTAB DATA
	LIS	R0,0			:SET TO DTE STATUS 'UP'
	TBT	RL,PACKUP		:IS PACKET LEVEL UP
	JNFS	ESP13C			:YES, JUMP
	LIS	R0,1			:SET DTE STATUS TO 'DOWN'
ESP13C	JAL	R4,BPUTCH		:SEND OUT DTE STATUS BYTE
	JAL	R9,ESCAPX,,		:END OF MESSAGE
	LHL	R2,IPORT
	SBT	R2,PVCSPC,,
	J	MMFRA,,
  EI	PVC

	SSTTL(PROCESS IIX CLEARING CAUSE MSG)

:	ESCAPED CLEARING CAUSE/DIAGNOSTIC MESSAGE.
ESP15	JAL	R4,GCI			:GET CAUSE BYTE
	CLHI	R0,CLOCPE
	JNFS	ESP15A			:IF NOT LOCAL PROCEDURE ERROR
	LHI	R0,CREMPE		:CONVERT TO REMOTE PROCEDURE ERROR
ESP15A	LR	R9,R0
	SLLS	R9,8
	JAL	R4,GCI			:GET DIAGNOSTIC BYTE
	OR	R9,R0
	LHL	R2,IPORT
	STH	R9,PSDIAG,R2,R2		:STORE IT
	SBT	R2,CCDRCV,,		:REMEMBER A VALID CAUSE AND DIAGNOSTIC  RECEIVED
: IF	FSTSLT							:LSH 14-JUL-87
:	TBT	R2,FSTSEL,,					:JL 16-Nov-84
:	JE	ESP15B			:NOT A FAST SELECT CALL	:JL 16-Nov-84
:	TBT	R2,FSTCCR,,		:SEE IF HAS CHARGED FOR CUD IN
:					:CALL REQUEST		:LSH 09-FEB-87
:	JN	ESP15B			:YES, DO'NT CHARGE AGAIN:LSH 09-FEB-87
:	SRLS	R9,8			:GET CAUSE BYTE AGAIN	:JL 16-Nov-84
:	LR	R9,R9			:			:JL 16-Nov-84
:	JNFS	ESP15B			:IF NOT DTE ORIGINATED	:JL 16-Nov-84
:	LHL	R2,FSTCNT,R2,R2		:GET SEG. COUNT OF CALL REQUEST :JL 16-Nov-84
:	STH	R2,RUFCNR					:JL 16-Nov-84
:	JAL	R4,CISP,,		:COUNT INPUT SEGMENT AND PACKET :JL 16-Nov-84
:  EI	FSTSLT							:LSH 14-JUL-87
ESP15B	J	MMFRA,,

	SSTTL(PROCESS IIX RESET CAUSE MSG)

:	ESCAPED RESET CAUSE/DIAGNOSTIC MESSAGE.
:	INVOKE DISCARDING OF DATA PACKETS FROM THE X-LINE TILL
:	WE GET A GOBBLER OR A RESET CONFIRMATION DIALECT MSG FROM THE NETWORK.
ESP16	JAL	R4,GCI			:GET CAUSE BYTE
	CLHI	R0,RLOCPE
	JNFS	ESP16B			:IF NOT LOCAL PROCEDURE ERROR
	LHI	R0,RREMPE		:CONVERT TO REMOTE PROCEDURE ERROR
ESP16B	LR	R9,R0
	SLLS	R9,8
	JAL	R4,GCI			:GET DIAGNOSTIC BYTE
	OR	R9,R0
	LHL	R2,IPORT

  IF	PVC
	TBT	R2,PVCCAL		:IS IT PVC ??
	JN	ESP16D			:YES, CHK PACKET LEVEL STATE
  EI	PVC

ESP16C	STH	R9,PSDIAG,R2,R2
	LB	R1,PCKSTE,R2,
	CLHI	R1,PFLOWC
	JN	MMFRA,,			:IF NOT IN FLOW CONTROL READY STATE
	LHI	R1,PSRESI
	STB	R1,PCKSTE,R2,		:PUT IN SEND RESET STATE
	LHI	R0,ZRESET
	JAL	R9,CNR,,		:DO RESET CLEAN UP, QUEUE UP A RESET
	LHL	R1,IPORT
	SBT	R1,IFLUSH
	CTLMSG(GOB)			:SEND A GOBBLER TO STOP FLUSHING OF DATA FROM
:				 THE OTHER SIDE
	J	MMFRA,,

  IF	PVC
ESP16D	LHL	R3,IE.MT,R2,R2		:GET EPORT
	CLHI	R9,ROUTOD^8!DIA000	:DTE 'OUT OF ORDER' ?
	JEFS	ESP16E			:YES, JUMP
	CLHI	R9,RRDTEO^8!DIA000	:DTE OPERATIONAL ?
	JNFS	ESP16G			:NO, JUMP
	RBT	R3,PVCOUT		:INDICATE OTHER DTE 'UP'
	JFS	ESP16G
ESP16E	SBT	R3,PVCOUT		:INDICATE OTHER DTE 'DOWN'
ESP16G	LB	R3,IL.MT,R2,		:GET LINK NUMBER FOR THIS IPORT
	TBT	R3,PACKUP		:IS THE PACKET LEVEL UP ??
	JN	ESP16C			:YES, JUMP BACK
	LHI	R12,EXM11		:SEND BACK TURKEY RESET CONF.
	JAL	R9,ESCAP0,,
	J	MMFRA,,
  EI	PVC

	SSTTL(PROCESS IIX CLEAR INFORMATION MSG)

:	EXTENDED CLEAR INFORMATION MESSAGE.
:	THIS MESSAGE IS FOLLOWED BY (EXM16), TERMINATING CLEAR INFORMATION
:	THAT IS USED IN BUILDING THE CLEAR REQUEST PACKET.
:	DATA IS COPIED TO FACILITIES BUFFER TO BE USED BY *RM*
:	FOR X.75, THE FACILITIES BUFFER MAY HAVE THE TRANSIT NET ID
:	LIST WHICH WE MAY WANT TO INCLUDE IN THE CLEAR REQUEST PACKET.
:	FOR X.25, MUST STRIP THE UTILITY FIELD.

ESP17	LHL	R7,IPORT
	LR	R5,R7
	SLLS	R5,2
	AHI	R5,FACBIA
	STH	R5,FACBUF
	CBCT(R9)			:GET LENGTH IN DI BUFFER
	CLHI	R9,2
	JL	ESP17X			:IF NOT ENOUGH LENGTH IN BUFFER
	STH	R9,TEMP2		:STORE TOTAL LENGTH
:	 AT LEAST SHOULD HAVE 1/ADRLEN,1/UTIL LEN
	SBT	R7,EXTCLR,,		:INFORM *RM* ABOUT DATA IN FAC BUF
  IF	X.25
	LIS	R4,0
  ELSE	X.75
	LB	R4,TNICNT,R7,		:GET LENGTH OF TRANSIT NET ID LIST
  EI
	CBCT(R3,R5)			:CHECK LENGTH OF FAC BUF
	CR	R4,R3
	JN	ESP179			:LENGTH NOT AS EXPECTED, PROGRAMMING ERROR

:	START FORMATTING CLEAR REQUEST INFO FIELD IN FAC BUF.
:	2/LEN,1/0 (DUMMY FLAG BYTE),1/ADR LEN, ETC.
	LHL	R1,FACBUF
	AIS	R9,1			:ACCOUNT FOR FLAG BYTE
	EXBR	R0,R9
	JAL	R4,WCI			:PUT IN HW OF LENGTH
	L	R2,BE,R1,
	ST	R2,TEMP			:REMEMBER POSITION OF LENGTH, 1ST BYTE
	EXBR	R0,R0
	JAL	R4,WCI
	L	R2,BE,R1,
	ST	R2,TEMP4		:REMEMBER POSTION OF LENGTH, 2ND BYTE
	LIS	R0,0
	JAL	R4,WCI			:WRITE FLAG BYTE
	LHL	R1,DIBUF
	JAL	R4,GCI			:GET ADDRESS LENGTH
	LHL	R1,FACBUF
	JAL	R4,WCI			:WRITE ADDRESS LENGTHS
	LHL	R1,DIBUF
	LR	R5,R0
	NHI	R5,0F			:GET ONE OF THEM
	SRHLS	R0,4
	AR	R5,R0
	AIS	R5,1
	SRHLS	R5,1			:GET NO. OF DIGITS TO COPY
	JEFS	ESP172			:IF 0 LENGTH
	JAL	R12,CDF			:COPY FROM DI BUFFER TO FAC BUF
ESP172	HS
  IF	X.75
	RBT	R7,TNIRCV,,		:MAKE SURE FLAG OFF
	LIS	R9,3			: DO AS CALL ACCEPT UTILITY FOR NOW
	JAL	R13,PFAC		:RELAY ON PFAC TO DETECT TNI AND COPY REST
	J	ESPCL2			:IF ERROR ENCOUNTED
  REMIND(ESP17-PFAC DOES NOT PRROCESS UTILITIES IN CLEAR REQ CORRECTLY)
	LR	R8,R8
	JL	ESP17X			:MISSING UTILITY LENGTH
	LHL	R7,IPORT
	LB	R7,PCKSTE,R7,
	CLHI	R7,PSCALC
	JN	ESP177			:IF NOT IN SEND CALL CONFIRMATION STATE

:	ADD SAVED TNI LIST TO FAC BUF.
	JAL	R6,ADDTNI
	AR	R8,R5
	L	R2,TEMP1		:GET SAVED POSITON OF UTILITY LENGTH FIELD
	STB	R8,,R2			:UPDATE UTILITY LENGTH
	LHL	R1,FACBUF
	LHL	R6,TEMP2		:GET ORIGINAL LENGTH
	AHI	R6,1,R5			:ADD IN LENGTH FOR TNI PLUS FLAG BYTE
  ELSE	X.25
	LHL	R1,DIBUF
	CBCT
	LR	R0,R0
	JE	ESP17X			:IF NOTHING LEFT
	JAL	R4,GCI			:DELETE UTILITY LENGTH
	LR	R5,R0
	LR	R6,R0
	JE	ESP176			:IF ZERO UTILITY FIELD
ESP175	JAL	R4,GCI
	SIS	R6,1
	JGBS	ESP175			:DELETE UTILITY
	CBCT
	LR	R0,R0
	JE	ESP17X			:IF NOTHING FOLLOWING
ESP176	LHL	R6,TEMP2		:GET ORIGINAL LENGTH
	SR	R6,R5			:SUBTRACE FROM ORIGINAL
  EI
	L	R2,TEMP4		:UPDATE FINAL LENGTH
	STB	R6,,R2			:2ND BYTE
	EXBR	R6,R6
	L	R2,TEMP
	STB	R6,,R2			:1ST BYTE
:	COPY REST OF FIELD.
ESP177	LHL	R6,FACBUF
	LHL	R5,DIBUF
  IF	FSTSLT							:JL 16-Nov-84
	LHL	R7,IPORT					:JL 16-Nov-84
	TBT	R7,FSTSEL,,					:JL 16-Nov-84
	JE	ESP178			:IF NOT A FAST SELECT CALL :JL 16-Nov-84
	CBCT(,R5)			:COUNT CALL USER DATA	:JL 16-Nov-84
	LR 	R0,R0						:JL 16-Nov-84
	JE	ESP178						:JL 16-Nov-84
	LHL	R4,DPORT					:JL 16-Nov-84
	STH	R0,RUFCNT,R4,R4	:				:JL 16-Nov-84
	JAL	R4,COP1SX,,		:UPDATE OUTPUT COUNTS	:LSH 14-JUL-87
:@@@@@@@:In version 5, should set up FSTFLG (set bit FST.CL) here, and
:@@@@@@@:report it in fast select accounting message E016 + FSTFLG:LSH 14-JUL-87
  EI	FSTSLT							:JL 16-Nov-84
ESP178	JAL	R7,MCI,,		:COPY FROM DI TO FAC BUF
	J	MMFRA,,

ESP179	TRAP(R7,D5)			:INVALID TNI LIST

:	INVALID CLEAR REQ INFO RCVD, UPCOUNT ERROR CELL AND IGNORE MSG.
ESP17X	LHL	R2,IPORT
	RBT	R2,EXTCLR,,		:FORGET ABOUT THE CLEAR INFO
	LIS	R0,1
	AHM	R0,INVCLR,RL,RL		:'RECVD INVALID CLEAR INFO DIALECT MSG'
	LHL	R1,FACBUF
	JAL	R4,EMPTY,,
	LHL	R1,IDBUF
	JAL	R4,EMPTY,,
	J	MMFRA,,
	SSTTL(PROCESS IIX RPOA SELECTION MSG)

:	RPOA SELECTION.
ESP18	GHI(R5)				:GET DATA NETWORK ID
	LR	R0,R5			:COPY RPOA TO R0
	JAL	R1,RPOLNK,,		:(R0)=RPOA, 4 BCD DIGITS
	J	ESP18B			:HERE IF NO LINKS FOUND
ESP18A	LHL	R1,DPORT		:(R0)=SET OF LINKS CAN USE
	SLLS	R1,2
	N	R0,LNKSET,R1,		:COMBINE WITH EXISTING SET
	ST	R0,LNKSET,R1,		:AND SAVE FOR SELECTION LATER
	J	MMFRA,,
ESP18B	LHI	R12,CNETCG^8!DIA119	:RCVD UNKNOWN RPOA
	J	ESPCLR			:GO CLEAR

	SSTTL(PROCESS IIX PVC INFO MSG)

  IF	PVC
:	GET PVC REQUEST, VALIDATE AND QUEUE PVC CONFIRMATION MESSAGE
ESP19	LHL	R7,DPORT
	LHL	R8,LO8,R7,R7		:GET THEIR ORIG. HOST NUMBER
	JAL	R4,GCI			:GO PAST DEST. HOST NUMBER
	JAL	R4,GCI
	JAL	R4,GCI			:GET DEST. CHANNEL NUMBER
	LR	R9,R0
	SLLS	R9,8
	JAL	R4,GCI
	OR	R9,R0			:DEST. CHANNEL NUMBER
	JAL	R4,GCI			:GET DEST. LINK NUMBER
	CLHI	R0,NLINKS		:IS IT IN RANGE?	:DRE 3-MAR-86
	JGE	ESP198			:NO,REPORT ERROR TO OTHER END :DRE 3-MAR-86
	LR	RL,R0			:DEST. LINK NUMBER
	LR	RL2,RL
	SLLS	RL2,1			:FORM *2 FOR NDLST2

:	VALIDATE THE MESSAGE'S DATA
	LHL	R7,PVCLNK,RL,RL		:PVC DEFINED FOR THIS LINK ?
	JE	ESP198			:NO, TYMFILE INCONSISTENCY
	LR	R4,R9			:SAVE CHANNEL NUMBER IN R9
	SH	R4,LPC.LT,RL,RL		:CALCULATE CHANNEL NUMBER OFFSET
	SLLS	R4,S.PVC
	AR	R7,R4			:COMBINE FOR OFFSET INTO PVCTAB ENTRY
	LHL	R0,PVCTAB+PV.DHS,R7,	:GET OUR DEST. HOST NUMBER
	CR	R0,R8			:THEIR ORIG. & OUR DEST. HOSTS EQUAL
	JN	ESP198			:NO, TYMFILE INCONSISTENCY
	LB	R8,PVCTAB+PV.TCR,R7,	:GET TCRECEIVED
	JAL	R6,ESP19G		:GO VALIDATE
	LB	R8,PVCTAB+PV.TCT,R7,	:GET TCTRANSMITTED
	JAL	R6,ESP19G		:GO VALIDATE
:	CALCULATE EPORT USING,
:		EPORT = EPB - LCC + CHANNEL
	LHL	R4,EPB.LT,RL,RL
	SH	R4,LCC.LT,RL,RL
	AR	R4,R9			:ACTUAL EPORT
	TBT	R4,EPA.F		:EPORT AVAILABLE?
	JN	ESP198			:YES, TYMFILE INCONSISTENCY
	STH	R4,EPORT		:SAVE EPORT
	STH	R7,PVCTAB,,		:SET UP TO CALL ESP19S
	RBT	R4,PVCOUT		:SET STATUS 'DTE OPERATIONAL'
	JAL	R4,GCI			:GET ORIGINATORS DTE STATUS
	LHL	R4,EPORT
	LR	R0,R0			:IS DTE OPERATIONAL ??
	JEFS	ESP195			:YES, JUMP
	SBT	R4,PVCOUT		:SET STATUS DTE 'OUT OF ORDER'
:	SEND PVC CONFIRMATION (SUCCESS)
ESP195	LIS	R6,0			:STATUS SUCCESSFUL
	JFS	ESP199
: 	QUEUE PVC CONFIRMATION MESSAGE
ESP198	LIS	R6,1			:STATUS UNSUCCESSFUL
ESP199	LHI	R12,EXM1A		:MESSAGE TYPE
	LIS	R7,2			:MESSAGE LENGTH
	JAL	R9,ESCAPN,,		:SEND TYPE AND LENGTH
	LR	R0,R6			:SEND PVC STATUS BYTE
	JAL	R4,BPUTCH
	LIS	R8,0			:SET DTE STATUS AS 'UP'
	TBT	RL,PACKUP		:IS OUR DTE UP ??
	JNFS	ESP19A			:YES, JUMP
	LIS	R8,1			:SET DTE STATUS AS 'DOWN'
ESP19A	LR	R0,R8
	JAL	R4,BPUTCH		:SEND DTE STATUS BYTE
	JAL	R9,ESCAPX,,		:END OF MESSAGE
	LIS	R7,0						:SCHEN 21-Nov-84
	OI	R7,0E0150001		:PREPARE ACCOUNTING MES :SCHEN 4-Feb-85
	JAL	R9,GENRPT,,		:SEND TO SUPE		:SCHEN 21-Nov-84
	LR	R6,R6
	JN	MMFRA,,			:IF UNSUCCESSFUL, JUMP
	JAL	R0,NDLST2,,		:SET UP FLAGS FOR IEC, IED & MAPPING
					: BETWEEN IPORT AND EPORT
:SET UP P.S & P.W. FOR THIS IPORT.
: HAS TO DO IT HERE BECAUSE NDLST2 HAS INITED PS, PW, ETC. BASED ON LINK DEFAULT
	LHL	R2,IPORT
	JAL	R3,ESP19S
	LHL	R7,IPORT
	SBT	R7,PVCCAL		:INDICATE DEST IS A PVC
	LHL	R8,EPORT
	J	ESP1A3			:QUEUE RESET PKT TO LINK
: GET A CHARACTER FROM BUFFER AND COMPARE FOR PURPOSES OF VALIDATION
:
ESP19G	JAL	R4,GCI
	CR	R0,R8			:COMPARE VALUES
	JN	ESP198			:IF NOT MATCHING, JUMP
	JR	R6			:RETURN
:
: SET UP PACKET SIZE, PACKET LEVEL WINDOW SIZE AND HI & LO LIMITS
:  TO BACK-PRESSURE ISIS ON THIS IPORT FOR A PVC
:
:	ENTRY CODITION  (R2) = IPORT;
:		   HW @ PVCTAB = OFFSET INTO PVCTAB FOR PVC SPEC. OF THIS PVC
:	LINK REGISTER : R3
:	REGISTER USED : R0 - R4
ESP19S	ST	R3,PVCTAB+4,,		:SAVE RETURN ADDRESS
	LHL	R4,PVCTAB,,		:RETRIVE OFFSET INTO PVCTAB SAVED EARLIER.
	LB	R1,PVCTAB+PV.PST,R4,	:GET PACKET SIZE FOR XMIT
:	JAL	R3,SLLR			:SHIFT LEFT LOGICAL BASE ON (R1) :DRE 25-FEB-85
	LIS	R0,1							:DRE 25-FEB-85
	SLL	R0,,R1			:SHIFT LEFT LOGICAL BASED ON (R1) :DRE 25-FEB-85
	STH	R0,PSTMT,R2,R2		:INDEXED BY IPORT
	LB	R1,PVCTAB+PV.PSR,R4,	:GET PACKET SIZE FOR RCV
:	JAL	R3,SLLR			:SHIFT LEFT LOGICAL BASE ON (R1) :DRE 25-FEB-85
	LIS	R0,1							:DRE 25-FEB-85
	SLL	R0,,R1			:SHIFT LEFT LOGICAL BASED ON (R1) :DRE 25-FEB-85
	STH	R0,PSRCV,R2,R2		:INDEXED BY IPORT
	LB	R0,PVCTAB+PV.PWT,R4,	:GET PACKET WINDOW SIZE FOR XMIT
	STB	R0,PWTMT,R2,
	LB	R0,PVCTAB+PV.PWR,R4,	:GET PACKET WINDOW SIZE FOR RCVR
	STB	R0,PWRCV,R2,
	L	R3,PVCTAB+4,,		:RETRIVE RETURN ADDRESS
	JR	R3			:RETURN
: SET R0 TO 1 THEN SHIFT R0 LEFT LOGICAL n TIMES BASED ON (R1)
:	LINK REGISTER : R3
:SLLR	LIS	R0,1						:DRE 25-FEB-85
:SLLRA	SIS	R1,1						:DRE 25-FEB-85
:	JLR	R3						:DRE 25-FEB-85
:	SLLS	R0,1						:DRE 25-FEB-85
:	JBS	SLLRA						:DRE 25-FEB-85

	SSTTL(PROCESS IIX PVC CONFIRMATION MSG)

:	PVC CONFIRMATION MESSAGE
ESP1A	LHL	R7,IPORT
	TBT	R7,PVCSPC,,		:SHOULD WE BE GETTING A CONFIRMATION
	JNFS	ESP1A1			:YES
	TRAP(R7,D1)			:KABOOM!!
ESP1A1	RBT	R7,PVCSPC,,		:CLEAR DIALECT STATUS INDICATOR
	RBT	R7,AUXTIM,,		:STOP TA TIMER
	JAL	R4,GCI			:GET STATUS
	LR	R0,R0
	JEFS	ESP1A2			:JUMP IF CONFIRMED
	JAL	R4,GCI			:THROW AWAY LAST BYTE
	LHI	R0,AA.PRV		:BAD TURKEY LEVEL
	STH	R0,TERMCD		:ACOUNTING TERMINATE CODE
	JAL	R4,PVCERR,,		:CLEAN UP PVC, SET BUILD TIMER
	J	MMFRA,,
ESP1A2	LHL	R8,IE.MT,R7,R7		:GET EPORT
	RBT	R8,PVCOUT		:SET DTE OPERATIONAL
	JAL	R4,GCI			:GET DTE STATUS BYTE
	LR	R0,R0			:IS DTE OPERATIONAL ??
	JEFS	ESP1A3			:YES, JUMP
	SBT	R8,PVCOUT		:SET DTE 'OUT OF ORDER'
ESP1A3	LIS	R0,PFLOWC
	STB	R0,PCKSTE,R7,
	JAL	R4,BKPLIM,,		:SET HI & LO LIMITS TO BACK-PRESSURE ISIS
	TBT	RL,PACKUP		:LINK IN PACKET LEVEL UP STATE?
	JE	MMFRA,,			:JUMP IF IT ISN'T
:	QUEUE  A RESET REQUEST PACKET IN IECBUF
	LIS	R0,PSRESI		:PUT CHAN. IN RESET PKT IN QUEUE STATE
	STB	R0,PCKSTE,R7,
	LHI	R13,RENETO^8!DIA000	:CAUSE, NETWORK OPERATIONAL
	TBT	R8,PVCOUT		:IS NETWORK OPERATIONAL ??
	JEFS	ESP1A5			:YES, JUMP
	LHI	R13,ROUTOD^8!DIA000	:CAUSE, DTE 'OUT OF ORDER'
ESP1A5	STH	R13,PSDIAG,R7,R7
	LHI	R0,ZRESET		:RESET PKT REQUEST
	JAL	R9,CNR,,		:WCI'S REQUEST AND DOES HOUSEKEEPING
	LHL	R1,IPORT
	SBT	R1,IFLUSH		:FLUSH DATA IN LINKS CHANNEL
	J	MMFRA,,
  EI	PVC


	SSTTL(SUBROUTINES)

::	ADPSWS-	ADD PACKET SIZE AND/OR WINDOW SIZE FACILITY.
:
:	INPUT	(R1)= BUFFER NUMBER TO PUT
:		(R7)= 0 IF TO PUT IN CALL REQUEST, ELSE, PUT IN CALL ACCEPT
:	OUTPUT	(R5)= NO. OF BYTES TO UPDATE FACILITY LENGTH WITH
:	USES	R0-R6,R7,R9
:	LINK IS R9
ADPSWS	LIS	R5,0
	TBT	RL,PSN.F
	JE	ADPS30			:IF NOT SUBSCRIBED TO PS NEGOTIATION
	LHL	R2,IPORT
	LHL	R5,PSRCV,R2,R2		:USE RCV VALUE AS PS FROM CALLED
	LHL	R6,PSTMT,R2,R2		:USE TMT VALUE AS PS FROM CALLING
ADPS10	LR	R7,R7
	JEFS	ADPS20			:IF TO MAKE CALL REQUEST FACILITY
	LR	R4,R5
	LR	R5,R6			:SWITCH XMT AND RCV
	LR	R6,R4
ADPS20	LHI	R0,FC.PS
	JAL	R4,WCI			:PACKET SIZE FACILITY CODE
	LR	R4,R5
	LOG2(R4,R0)			:CONVERT TO LOG 2
	JAL	R4,WCI
	LR	R4,R6
	LOG2(R4,R0)
	JAL	R4,WCI
	LIS	R5,3			:NO. OF BYTES TO INCREMENT
ADPS30	TBT	RL,PWN.F
	JER	R9			:IF NOT SUBSCRIBED TO PW NEGOTIATION
	LHL	R2,IPORT
	LB	R3,PWRCV,R2,		:USE RCV VALUE AS 'FROM CALLED' PW
	LB	R6,PWTMT,R2,		:USE TMT VALUE AS 'FROM CALLING' PW
ADPS40	EXBR	R6,R6			:TMT VALUE WILL BE PUT OUT AS 'CALLING' WS
	OR	R6,R3			:RCV VALUE AS 'CALLED' WS
	LR	R7,R7
	JEFS	ADPS45			:IF TO MAKE CALL REQUEST
	EXBR	R6,R6			:REVERSE RCV AND TMT
ADPS45	LHI	R0,FC.PW
	JAL	R4,WCI			:PACKET WINDOW FACILITY CODE
	LR	R0,R6
	JAL	R4,WCI			:WRITE CALLED WS
	EXBR	R0,R0
	JAL	R4,WCI			:CALLING WS
	AIS	R5,3
	JR	R9			:EXIT

::	ADDTC- DETERMINES WHETHER TO SEND THROUGHPUT CLASS FACILITY IN CALL
:		ACCEPT PACKET OR NOT.
:	USES	R2,R9
:	OUTPUT	SKIPT RETURN IF NEED TO SEND ONE
:	LINK IS R9

ADDTC	LHL	R2,IPORT
	TBT	R2,TCRCV,,
	JNR	R9			:ALREADY HAVE ONE READY TO GO, DON'T SEND
	TBT	RL,TCN.F
	JER	R9			:IF NOT SUBSCRIBED TO TC NEGOTIATION
	AIS	R9,4
	JR	R9			:SEND ONE

  IF	X.75
::	ADDTNI-	ADD TRANSIT NETWORK ID UTILITY TO THE UTILITY FIELD STARTED
:		IN FACILITIES BUFFER IF TNIRCV=0.
:		FOR CALLS WITH CALLED ADDRESS .NE. OURS, ADD OUR DNIC TO THE
:		LIST.
:		IF TNIRCV=1, DELETE THE SAVED LIST FROM BUFFER
:
:	INPUT	(TNICNT)= NO. OF BYTES OF SAVED LIST OF TRANSIT NET ID
:	OUTPUT	(R5)= TOTAL NO. OF BYTES ADDED TO UTILITY
:	USES	R0-R5,R7
:	LINK IS R6

ADDTNI	LHL	R7,IPORT
	LR	R1,R7
	SLLS	R1,2
	AHI	R1,FACBIA
	LIS	R5,0
	RBT	R7,TNIRCV,,		:RESET FLAG FOR LATER USE
	JN	ADDT40			:ALREADY RECEIVED ONE, GO DELETE IT
	LR	R2,R7
	SLLS	R2,3
	L	R4,DTESAX,R2,		:GET CALLED ADDRESS
	SLLS	R4,8
	SRL	R4,10
	LR	R3,RL
	SLLS	R3,ONI.SC
	LB	R5,TNICNT,R7,		:GET LENGTH OF SAVED TRANSIT NET ID LIST
	JNFS	ADDT02			:IF NON EMPTY LIST
	LB	R0,DTESAX,R2,		:GET CALLED ADDRESS LENGTH
	JER	R6
	CLH	R4,ONI.LT,R3,R3
	JER	R6			:EMPTY LIST AND CALLED ADDRESS IS OUR DNIC
	J	ADDT18			:GO ADD OUR DNIC TO THE LIST
ADDT02	LB	R0,DTESAX,R2,		:GET CALLED ADDRESS LENGTH
	JEFS	ADDT06
	CLH	R4,ONI.LT,R3,R3
	JEFS	ADDT06			:IF CALLED ADDRESS IS OUR DNIC
	SBT	R7,TNIRCV,,		:REMEMBER TO PUT OURS IN LATER
ADDT06	CBCT(R4)
	CLR	R5,R4
	JG	ADDT50			:IF NOT ENOUGH DATA IN FAC BUF
ADDT10	SIS	R5,1
	JLE	ADDT50			:INCOMPLETE TRANSIT NET ID LIST
	LHI	R0,UT.TNI		:UTILITY CODE FOR TRANSIT NET
	JAL	R4,WCI
	JAL	R4,GCI			:GET 1ST BYTE OF DNIC
	JAL	R4,WCI			:COPY IT
:REPORT TNIC TO SUP
:BEGIN OF THE CHANGE JS 23-FEB-87
	ST	R7,TEMP6		:SAVE THE CONTENTS OF REGISTERS
	ST	R9,TEMP7
	ST	R1,TEMP8
	LR	R7,R0			:SAVE 1BYTE OF DNIC
	JAL	R4,GCI			:GET 2ND BYTE OF DNIC
	JAL	R4,WCI			:COPY IT
	LHL	R9,DPORT
	JE	ADDT12			:NO- SKIP
	SLLS	R7,8
	AR	R7,R0
	OI	R7,AA.TNI		:BUILD "B7" MESSAGE
	JAL	R9,GENRPT,,		:REPORT DNIC TO SUP
ADDT12	L	R1,TEMP8		:RESTORE THE CONTENTS OF REGISTERS
	L	R9,TEMP7
	L	R7,TEMP6
:END OF THE CHANGE JS 23-FEB-87
	SIS	R5,1
	JG	ADDT10			:IF MORE ON LIST
	TBT	R7,TNIRCV,,
	JE	ADDT20			:IF NO NEED TO PUT OURS IN

:	ADD OUR DNIC TO THE TRANSIT NET ID LIST.
ADDT18	LB	R4,TNICNT,R7,
	AIS	R4,2
	STB	R4,TNICNT,R7,		:UPDATE COUNT
	LHI	R0,UT.TNI
	JAL	R4,WCI			:UTILITY CODE
	LR	R3,RL			:PUT IN OUR DNIC AS TRANSIT NET
	SLLS	R3,ONI.SC
	LHL	R0,ONI.LT,R3,R3		:GET OUR DNIC
	ST	R7,TEMP6		:JS 23-FEB-87
	ST	R9,TEMP7		:JS 23-FEB-87
	ST	R1,TEMP8		:JS 23-FEB-87
	LR	R7,R0			:JS 23-FEB-87 SAVE OUR DNIC
	EXBR	R0,R0
	JAL	R4,WCI			:FIRST 2 DIGITS
	SRLS	R0,8
	JAL	R4,WCI			:SECOND 2 DIGITS
:REPORT TNIC TO SUP
:BEGIN OF THE CHANGE JS 23-FEB-87
	LHL	R9,DPORT
	JE	ADDT19			:NO-SKIP
	OI	R7,AA.TNI		:BUILD "B7" MESSAGE
	JAL	R9,GENRPT,,
	L	R1,TEMP8		:RESTORE THE CONTENTS OF REGISTERS
	L	R9,TEMP7
ADDT19	L	R7,TEMP6
ADDT20	LHL	R5,DPORT
	JE	ADDT22
	ST	R1,TEMP6
	ST	R7,TEMP7
	ST	R9,TEMP8
	LB	R7,TNICNT,R7,		:TNIC LENGTH
	SRLS	R7,1			:NO. OF TNIC
	OI	R7,AA.TNI!0FF00		:BUILD "B7" MESSAGE
	JAL	R9,GENRPT,,
	L	R1,TEMP6
	L	R7,TEMP7
	L	R9,TEMP8
:END OF CHANGES :JS 23-FEB-87
ADDT22	LB	R5,TNICNT,R7,		:GET TOTAL LENGTH
	LR	R2,R5
	SRLS	R2,1			:ACCOUNT FOR UTILITY CODE
	AR	R5,R2
	LIS	R4,0
	STB	R4,TNICNT,R7,		:CLEAR OUT TNIC COUNTER
	JR	R6			:RETURN

:	DELETE THE SAVED TNI LIST FROM FACILITIED BUFFER.
:	LENGTH IS IN (TNICNT).
ADDT40	LB	R7,TNICNT,R7,		:GET LENGTH
ADDT45	SIS	R7,1
	JLFS	ADDT48			:IF FINISHED		:SCHEN 24-Sep-85
	JAL	R4,GCI			:GET RID OF IT
	JBS	ADDT45
ADDT48	LIS	R4,0						:SCHEN 24-Sep-85
	LHL	R7,IPORT					:SCHEN 24-Sep-85
	STB	R4,TNICNT,R7,		:CLEAR OUT TNIC COUNTER	:SCHEN 24-Sep-85
	JR	R6			:RETURN			:SCHEN 24-Sep-85

ADDT50	TRAP(R7,D5)			:INVALID SAVED LIST OF TRANSIT NET ID
  EI	X.75


::	APPBKP-	APPLY BACK PRESSURE TO ISIS IF CHANRACTER COUNT IN
:		IED BUFFER EXCEEDS CONFIGURED MAXIMUM.
:	USES	R0-R4,R9
:	LINK IS R9

APPBKP	LHL	R1,DPORT		:GET DISPATCHER PORT
	JLER	R9			:EXIT
	LHL	R4,IEDBUF
	CBCT(R2,R4)	 		:GET NUMBER OF CHARS IN BUFFER
	LHL	R3,IPORT
	CLH	R2,DBKHI,R3,R3		:SEE IF HAVE ENOUGH CHARS TO APPLY BACKPRESSURE
	JLR	R9			:IF NOT ENOUGH
	SBT	R1,DBKPR
	JNR	R9			:IF BACKPRESSURE ALREADY APPLIED

:	SEND A BACKPRESSURE MSG BACK TO DISPATCHER.
	CTLMSG(NOS)
	LIS	R0,1
	AHM	R0,BKPSNT,,
  IF	DDTDIA-1
	AHM	R0,BKP2NT,,		:COUNT # TIMES APPLIED TO NETWORK
  EI	DDTDIA-1
	JR	R9


  IF	DNICND		:IF DNICNODE OPTION APPREARED
::	FNDDNC-	SEARCH DNIC TO NODE NUMBER MAPPING TABLE TO FIND THE PROPER
:		DNIC TO USE FOR A GIVEN NODE NUMBER.
:
:	INPUT	(R2)= SAVED ORIGINATING NODE NUMBER IN OCTAL
:	OUTPUT	(R4)= DNIC TO USE
:	USES	R0-R4,R9
:	LINK IS R9

FNDDNC	LCS	R1,2			:INDEX TO USE
	LCS	R4,1			:INITIALIZE TO 'DNIC NOT FOUND'
FNDD10	AIS	R1,2
	LH	R3,NODTAB,R1,		:FETCH AN ENTRY
	JE	FNDD20			:IF END OF TABLE
	JGFS	FNDD15			:IF A NODE ENTRY
	LR	R4,R3			:SAVE DNIC NUMBER
	NHI	R4,7FFF
	JBS	FNDD10

FNDD15	CLR	R3,R2			:COMPARE NODE NUMBER
	JER	R9			:IF MATCH FOUND
	J	FNDD10

:	END OF TABLE, TAKE THE DEFAULT.
FNDD20	AIS	R1,2			:NEXT ENTRY IS THE DEFAULT VALUE
	JNFS	FNDD30			:IF NON ZERO
	AIS	R1,2			:ADJUST FOR EMPTY TABLE
FNDD30	LH	R4,NODTAB,R1,		:GET DEFAULT VALUE
	JR	R9			:RETURN
  EI	DNICND


::	ESPCLR - CLEAR A TURKEY CALL DURING CALL SET-UP.
:	ESPCL0 - CLEAR A TURKEY CALL BECAUSE OF ERROR IN RCVD ESCPD MSG.
:	ESPCL2 - ERROR IN CALL ACCEPT ESCPD MSG.
:
:	INPUT	(R12)= CUASE AND DIAGNOSTIC TO SEND
:	EXIT TO IZAP30
ESPCL0	LHI	R12,CNETCG^8!DIA175	:'ILLEGALY FORMATTED ESCPD MSG'
ESPCLR	LHI	R0,AA.UNR
	STH	R0,TERMCD		:STORE TERMINATION CODE
ESPCL1	LHL	R7,IPORT
	STH	R12,PSDIAG,R7,R7
	TURMSG(CLEAR)			:NOTIFY THE OTHER END OF THE CLEAR
	J	IZAP35			:GO CLEAR THE PORT

:	ERROR IN CALL ACCEPT ESCPD MSG.
ESPCL2	LHI	R12,CNETCG^8!DIA180	:ERROR IN RCVD CALL ACCEPT MSG
	LHI	R0,AA.ERR
	STH	R0,TERMCD
	J	ESPCL1

  IF 	\PTAMAC
:	CLEAR CAUSED BY PREFIX MACRO FUNCTION (PTAMAC)
ESPCL3	LIS	R0,0E						:FAK 29-Nov-84
	STB	R0,PXADLN,,		:RESTORE NORMAL VALIDATION LENGTH OF 14 DIGITS :FAK 29-Nov-84
	LHI	R12,CLOCPE^8!DIA064				:FAK 27-Nov-84
	J	ESPCLR
  EI

::	MCRASH -	CLEAR A CALL IF WE GET AN ILLEGALLY FORMATTED
:			TRANSPARENT MESSAGE.

MCRASH	SIS	R5,1
	JE	MCRAS2			:IF ALL DATA PULLED FROM RING

MCRAS1	JAL	R4,GETCH
	SIS	R5,1
	JNBS	MCRAS1			:FLUSH RESET OF DATA IN RING
MCRAS2	JAL	R4,ELIR,,
	LIS	R0,1
	AHM	R0,MCRERR,,		:INCREMENT FACT WE DID  THIS
	LHL	R2,IPORT
	LHI	R4,CNETCG^8!DIA175	:'RCVD ILLEGALLY FORMATTED ESCPD MSG'
	STH	R4,PSDIAG,R2,R2
	LHI	R1,AA.PRV		:DECLARE PROTOCOL VIOLATION :DRE 16-APR-86
	J	IZAP30			:CLEAR CALL		:DRE 16-APR-86


::	CDT -	COPY FROM DISPATCHER BUFFER TO TEMPORARY BUFFER 1. :DRE 22-MAY-86 
:
:	INPUT	R1=DISPATCHER BUFFER ADDRESS
:		R5=HOW MANY BYTES TO COPY
:		TMPBF1 = TEMPORARY BUFFER NUMBER
:	OUTPUT	R1=UNCHANGED
:	USES	R1-R4, R6
:	CALLS	GCI,WCI
:	LINK IS R12

CDT	LHI	R6,TMPBF1		:GET TMP BUFFER #	:DRE 22-MAY-86 
	JFS	CDF10			:PROCESS LIKE DI BUF	:DRE 22-MAY-86 

::	CDF -	COPY FROM DISPATCHER BUFFER TO FACILITY BUFFER.
:
:	INPUT	R1=DISPATCHER BUFFER ADDRESS
:		R5=HOW MANY BYTES TO COPY
:		(FACBUF) = FAC BUFFER ADDRESS
:	OUTPUT	R1=UNCHANGED
:	USES	R1-R4, R6
:	CALLS	GCI,WCI
:	LINK IS R12

CDF	LHL	R6,FACBUF
CDF10	JAL	R4,GCI			:GET FROM DIS BUF
	LR	R1,R6
	JAL	R4,WCI			:WRITE TO FAC BUF
	LHL	R1,DIBUF
	SIS	R5,1
	JLFS	CDFX			:IF NEGATIVE LENGTH
	JNBS	CDF10			:IF MORE TO COPY
	JR	R12			:RETURN

CDFX	TRAP(R5,E6)			:PROGRAMMING ERROR, CDF CALLED WITH BAD LEN


::	CTF -	COPY FROM TEMPORARY BUFFER TO FACILITY BUFFER. :DRE 22-MAY-86 
:
:	INPUT	R1=TEMP BUFFER ADDRESS
:		R5=HOW MANY BYTES TO COPY
:		(FACBUF) = FAC BUFFER ADDRESS
:	OUTPUT	R1=UNCHANGED
:	USES	R1-R4, R6
:	CALLS	GCI,WCI
:	LINK IS R12

CTF	LHL	R6,FACBUF		:GET # OF BUFFER TO COPY TO :DRE 22-MAY-86 
CTF10	JAL	R4,GCI			:GET FROM TMP BUF	:DRE 22-MAY-86 
	LR	R1,R6						:DRE 22-MAY-86 
	JAL	R4,WCI			:WRITE TO FAC BUF	:DRE 22-MAY-86 
	LHI	R1,TMPBF1					:DRE 22-MAY-86 
	SIS	R5,1						:DRE 22-MAY-86 
	JGBS	CTF10			:IF MORE TO COPY	:DRE 22-MAY-86 
	JER	R12			:RETURN			:DRE 22-MAY-86 

CTFX	TRAP(R5,E6)			:PROGRAMMING ERROR, CTF CALLED WITH BAD LEN :DRE 22-MAY-86 


::	MMECHO-	DEFERRED ECHO PROCESSING DURING LOGIN MODE.
:
:	EXIT	(R0)=
:	USES	R0,R4,R6,R9
:	LINK IS R9

MMECHO	LHL	R4,DPORT
	TBT	R4,DEM			:TEST IF IN DEFERRED ECHO
	JER	R9			:IF NOT, RETURN
	TBT	R4,HLFDUP		:HALF DUPLEX OR AUX CIRCUIT ??
	JNR	R9			:IF SO, NO ECHO
MME20	LB	R6,LINUM		:CURRENT LINK #
	SLLS	R6,4			:FORM OFFSET TO DETBL
	TBT	R0,DETBL,R6,		:IS THIS CHARACTER ECHOABLE ??
	JEFS	MME40			:IF NOT			:DRE 7-AUG-86
	LR	R6,R0			:SAVE CHARACTER
MME30	JAL	R4,PUTCH		:PUT CHAR IN OUTPUT RING
	LR	R0,R6			:RESTORE ORIGINAL CHARACTER
MME40	CLHI	R0,0D			: <CR> ??
	JN	MME10			:IF NOT
	LHL	R4,DPORT
	TBT	R4,PAR3			:WANT LF AFTER CR ??
	JEFS	MME10			:IF NOT
	LIS	R0,0A			:GET LINEFEED
	JAL	R4,PUTCH		:PUT IT OUT
	LR	R0,R6			:RESTORE CHARACTER
	JR	R9
MME10	CLHI	R0,0A			: <LF> ??
	JNR	R9			:IF NOT, NO OUTPUT
	LHL	R4,DPORT
	TBT	R4,PAR2			:WANT CR AFTER LF ??
	JER	R9			:IF NOT
	LIS	R0,0D			:GET CARRIAGE RETURN
	JAL	R4,PUTCH		:PUT IT OUT
	LR	R0,R6			:RESTORE CHARACTER
	JR	R9


  IF	X.25
::	PUF -	PROCESS UTILITY FIELD FOR X.25.
:		LOOK AT THROUGHPUT CLASS, REVERSE CHARGE, CALL ID, CUG, 
:		FAST SELECT, CLAMN, AND TRANSIT DELAY.
:		EVERYTHING ELSE IS THOWN AWAY.
:
:	ENTRY	(R1)= DIBUF
:	EXIT	SKIP RETURN IF NO ERROR, NORMAL RETURN IF ERROR ENCOUNTERED
:		TO ESPCLR DIRECTLY IN SOME CASES
:	USES	ALL BUT R10,R11,R14,R15
:	CALLS	EMPTY, UTV
:	LINK IS R13


PUF	AIS	R13,4
	CBCT(R2)
	LR	R2,R2
	JER	R13			:IF BUFFER EMPTY
	JAL	R4,GCI			:GET LENGTH OF FACILITY
	LR	R7,R0
	LIS	R8,0			:COUNT= RUNNING BYTE COUNT OF LENGTH :DRE 12-JUN-87
	LHL	R1,FACBUF					:DRE 12-JUN-87
	JAL	R4,WCI			:SAVE PLACE FOR COUNT
	L	R2,BE,R1,
	ST	R2,TEMP1		:SAVE POSITION OF COUNT
PUF05	LR	R7,R7
	JNFS	PUF07			:NOT DONE YET		:DRE 12-JUN-87
	L	R4,TEMP1
	STB	R8,,R4			:UPDATE BYTE COUNT
	JR	R13			:RETURN			:DRE 12-JUN-87
PUF07	LHL	R1,DIBUF
	JAL	R4,GCI			:GET FACILITY CODE
	SIS	R7,1			:LEN= LEN - 1
	JLE	PUFCLR			:IF NOT ENOUGH LENGTH
	LR	R6,R0
	JE	PUF40			:IF NATIONAL OPTIONS MARKER
	SRHLS	R6,6			:USE TYPE TO GET LENGTH
	AIS	R6,1
	CLHI	R6,UT.VAR+1
	JNFS	PUF10			:IF NOT VARIABLE LENGTH PARM
	CLHI	R0,UT.CUG
	JE	PUF70			:IF CLOSED USER GROUP
	CLHI	R0,UT.CUO
	JE	PUF70			:IF CLOSED USER GROUP WITH OUTGOING ACCESS
	JAL	R4,GCI			:GET LENGTH
	SIS	R7,1
	LR	R6,R0
PUF10	TBT	RL,FA84.F,,		:DO WE ALLOW 84 FACILITIES? :DRE 12-JUN-87
	JNFS	PUF14			:NO, SKIP CHECKS	:DRE 12-JUN-87
	CLHI	R0,49			:CHECK FOR TRANSIT DELAY :DRE 11-JUN-87
	JE	PUF90			:COPY TO FACILITIES	:DRE 11-JUN-87
	CLHI	R0,08			:CHECK FOR CLAMN	:DRE 12-JUN-87
	JE	PUF90			:COPY TO FACILITIES	:DRE 11-JUN-87
PUF14	SR	R7,R6			:LEN = LEN - LENGTH OF THIS ONE
	JL	PUFCLR			:IF NOT ENOUGH DATA
	CLHI	R0,FC.TC
	JE	PUF30			:IF THRUPUT PARAMTER
	CLHI	R0,FC.RF
	JE	PUF50			:IF REVERSE CHARGE (OR FAST SELECT)
	CLHI	R0,UT.CID
	JE	PUF60			:IF CALL ID
PUF20	JAL	R4,GCI			:SKIP
	SIS	R6,1
	JNBS	PUF20
	J	PUF05			:GO PROCESS NEXT FACILITY ELEMENT

PUF30	JAL	R4,GCI			:GET TC VALUE
	JAL	R12,UTV			:UPDATE THROUGH PARAMETER
	J	PUF05			:CONTINUE

PUF40	JAL	R4,EMPTY,,		:EMPTY OUT REST OF NATIONAL OPTIONS
	JR	R13			:EXIT

PUFCLR	SIS	R13,4			:ERROR
	JR	R13			:RETURN


:	REVERSE CHARGING - SET *RVCHRG* BIT.
:	FAST SELECT - SET *FSTRES*, *FSTSEL* AS APPROPRIATE AND CLEAR THE
:	CALL IF FAST SELECT ACCEPTANCE NOT SUBSCRIBED.
PUF50	JAL	R4,GCI			:GET FACILITY VALUE
	JAL	R12,REVFST		:PROCESS REVERSE CHARGE/ FAST SELECT
	J	PUF05

:	CALL ID... SET FLAG INDICATING 'CALL FROM AN X.75'.
PUF60	LHL	R2,IPORT
	SBT	R7,FROM75,,
	J	PUF20			:SKIP OVER THE UTILITY

:	CUG INTERLOCK CODE.
:	FIND MATCHING CUG INDEX AND CREATE A CUG FACILITY IN FAC BUF.
:	SET *CUGCAL* FLAG SO THAT WHEN MAKING THE CALL REQUEST, INCLUDE THIS
:	FACILITY IN THE FACILITY FIELD.
:	SINCE THIS IS THE ONLY UTILITY THAT GENERATES A FACILITY, PRECEDE IT
:	WITH A LENGTH FIELD.
:-------------------------------------------------------------	:HJR 02-02-87
:
:   Actions in the code should follow the chart below, which specifies
:   the action to be taken for an IIX X.25 CUG utility received under
:   various possible combinations of Preferential CUG and/or Incoming
:   Access subscribed or not subscribed when incoming calls are not
:   barred within the CUG.  For definition of action see below.  The
:   chart should match Table 25 in X.25-1984 and Figure 26 in
:   X.300-1984 except for the one case indicated.
:
:   The case of no utility received is handled in ESP9, the cases of cug
:   and cugoa received are handled below.  For CUG and CUG/OA utilities
:   received each entry describes the action to be taken when there is a
:   match/nomatch of the interlock code received.
:
:       -------------------------------------------------------
:       | SUBSC \ FACIL  || NONE      | CUG       | CUGOA     |
:       =======================================================
:       | NONE           || call      | clear     | call      |
:       -------------------------------------------------------
:       | OA (1)         || clear     | cug/clear | cug/clear |
:       -------------------------------------------------------
:       | [OA], PREF     || clear     | cug/clear | cug/clear |
:       -------------------------------------------------------
:       | [OA], IA       || call      | cug/clear | cug/call (2)
:       -------------------------------------------------------
:       | [OA], IA, PREF || call      | cug/clear | cug/call  |
:       -------------------------------------------------------
:	(1) - CUG without any of Pref, IA, or OA is not allowed.
:       (2) - According to the standard this should be cug+ia/call
:             meaning the Incoming Call facility should be CUG/OA.
:
: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:   
:   The following chart describes what action will be taken if the cug
:   selected has incoming calls barred.
:   
:       -------------------------------------------
:       | SUBSC \ FACIL  || CUG       | CUGOA     |
:       ===========================================
:       | OA (1)         || clear     | clear     |
:       -------------------------------------------
:       | [OA], PREF     || clear     | clear     |
:       -------------------------------------------
:       | [OA], IA       || clear     | call      |
:       -------------------------------------------
:       | [OA], IA, PREF || clear     | call      |
:       -------------------------------------------
:   
: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:   
:   	The various actions are:
:   
:   	    clear	= clear call with 'outgoing access barred'
:   	    call	= make call without any cug facility
:   	    cug		= make a cug call using the requested cug #
:
:-----------------------------------------------------------------------

PUF70	SIS	R7,5
	JL	PUFCLR			:IF NOT ENOUGH DATA
	LR	R6,R0			:SAVE UTILITY CODE	:HJR 02-02-87
	JAL	R4,GCI			:GET LENGTH
	GHI(R9)				:GET INTERLOCK CODE
	EXHR	R9,R9
	GHI(R9)
    IF	CUGENA				:IF CUG CODE ENABLED
	TBT	RL,CUS.F
	JN	PUF72			:IF SUBSCRIBED TO CUG
    EI
	LHI	R12,CACBAR^8!DIA065	:'INVALID FACILITY CODE' :SCHEN 24-Sep-85
PUF71	CLHI	R6,UT.CUO		:CUG/OUTGOING ACCESS?	:HJR 01-29-87 :HJR 02-02-87
	JN	ESPCLR			:IF NOT, CLEAR CALL	:HJR 01-29-87
	J	PUF80			:ACCEPT AS ORDINARY CALL :HJR 02-02-87

PUF72	HS
    IF	CUGENA			:IF CUG CODE ENABLED
:	SEARCH THE LIST OF CUG DESCRIPTORS FOR MATCHING CUG INDEX. :HJR 02-02-87
	LHL	R2,CUG.LT,RL,RL		:GET BEGINNING ADDRESS OF DESCRIPTORS :HJR 02-02-87
	LIS	R5,0			:BEGINNING INDEX
PUF76	L	R3,CUGTAB,R2,R5		:LOOK AT AN INTERLOCK
	CR	R9,R3
	JEFS	PUF78			:IF MATCHING CODE FOUND
	AIS	R5,4			:ADVANCE TO NEXT ENTRY
	CLHI	R5,CUG.MX*4
	JLBS	PUF76

:	NO MATCH OF INTERLOCK FOUND
	LHI	R12,CACBAR^8!DIA187	:ACCESS BARRED		:SUECHAO 13-Jul-84
PUF77	TBT	RL,CUI.F		:CHECK FOR +INCOMING	:HJR 02-02-87
	JN	PUF71			:IF YES, GO CK FOR CUGOA :HJR 02-02-87
	J	ESPCLR			:GO CLEAR THE CALL

:	MATCH FOUND... (R5)= INDEX*4
PUF78	LR	R3,RL
	SLLS	R3,CUG.SC
	LHI	R12,CACBAR^8!DIA183
	SRHLS	R5,2			:GET ACTUAL INDEX
	TBT	R5,ICB.F,R3,		:CHECK INCOMING CALLS BARRED FLAG
	JNBS	PUF77			:CALLS BARRED, CK OTHER ACCESS :HJR 02-02-87

:	NOW DO PREFERENTIAL CUG CHECKS				:HJR 02-02-87
	TBT	RL,CPR.F		:ORDINARY CALL FOR PREF?:HJR 02-02-87
	JEFS	PUF79			:SKIP IF NOT		:HJR 02-02-87
	LH	R0,CUP.LT,RL,RL		:CHECK FOR PREF		:HJR 02-02-87
	JLFS	PUF79			:SKIP IF DONT HAVE ONE	:HJR 02-02-87
	CR	R0,R5			:CUG SELECTED = PREF?	:HJR 02-02-87
	JE	PUF80			:YES, MAKE ORDINARY CALL:HJR 02-02-87

:	ADD A CUG FACILITY USING THE OBTAINED INDEX.
:	NOTE - WE NEVER SEND A CUGOA FACILITY			:HJR 02-02-87
PUF79	LHL	R1,FACBUF					:HJR 02-02-87
	AIS	R8,2			:ACCOUNT FOR LENGTH
:	LIS	R0,2			:CUG FACILITY LENGTH
:	JAL	R4,WCI			:PRECEED IT WITH A LENGTH FIELD
	LHI	R0,FC.CUG
	JAL	R4,WCI			:CUG FACILITY CODE

:	CONVERT CUG INDEX IN HEX VALUE TO DECIMAL VALUE	:SUECHAO 13-Jul-84
	LIS	R4,$A 10		:DIVIDER TO ACCUMULATE DECIMAL VALUE
							:SUECHAO 13-Jul-84
	DHR	R5,R4			:QUOTIENT IS IN R6 :SUECHAO 13-Jul-84
	SLHLS	R6,4					:SUECHAO 13-Jul-84
	OR	R5,R6			:OR WITH REMAINDER :SUECHAO 13-Jul-84
	LR	R0,R5			:COPY IT	:SUECHAO 13-Jul-84
	JAL	R4,WCI
    EI	CUGENA			 			:SUECHAO 13-Jul-84

PUF80	LHL	R2,IPORT
	SBT	R2,CUGCAL,,
	J	PUF05


:	COPY FACILITY ELEMENT.
PUF90	LR	R5,R6			:CDF ROUTINE NEEDS R5	:DRE 11-JUN-87
	CLHI	R5,UT.VAR+1					:DRE 11-JUN-87
	JNFS	PUF92			:IF NOT VARIABLE LENGTH	:DRE 11-JUN-87
	L	R2,BB,R1,
	LB	R5,,R2			:PEEK AT LENGTH
	AIS	R5,1			:+1 TO GET LENGTH OF PARAMETER
PUF92	SR	R7,R5
	JL	PUFCLR			:NOT LONG ENOUGH
	LHL	R1,FACBUF
	AHI	R8,1,R5			:CALCULATE LENGTH
	JAL	R4,WCI			:COPY FACILITY CODE
	LHL	R1,DIBUF
	JAL	R12,CDF			:COPY FROM DI TO FAC
	J	PUF05			:CONTINUE WITH NEXT ONE	:DRE 11-JUN-87
  EI	X.25


::	PFAC -	 PROCESS FACILITY/ (X.75)UTILITY FIELD.
:
:	INPUT	(R9)= 0 IF IT IS CALL REQUEST FACILITY,
:		=1 IF CALL ACCEPT FACILITY
:		=2 IF CALL REQUEST UTILITY
:		=3 IF CALL ACCEPT UTILITY
:	OUTPUT	(R8)= FINAL LENGTH OF FACILITY FIELD, -1 IF EMPTY FIELD
:		(FACBUF)= FACILITY BUFFER ADDRESS
:	EXIT	SKIP RETURN IF NO ERROR, NORMAL RETURN IF ERROR ENCOUNTERED
:		(TEMP1)= ADDRESS OF LENGTH BYTE
:	USES	R0-R14, TEMP1
:	LINK IS R13

PFAC	LHI	R1,TMPBF1		:TEMPORARY BUFFER NUMBER :DRE 27-MAY-86
	JAL	R4,EMPTY,,		:MAKE SURE IT IS INITIALIZED :DRE 27-MAY-86
	LHL	R1,DIBUF
	CBCT(R7)
	LR	R7,R7
	JNFS	PFAC05			:IF SOMETHING IN BUFFER
	LIS	R0,0			:DEFINE UTILITY/FACILITY LENGTH OF ZERO
	THI	R9,1			:TEST FOR CALL ACCEPT
	JNFS	PFAC07			:HANDLE CALL ACCEPT
	LCS	R8,1			:MARK EMPTY FIELD
	J	4,R13			:RETURN IF NOT CALL ACCEPT :DRE 23-JAN-86
PFAC05	JAL	R4,GCI			:GET FACILITY SIZE BYTE
	CR	R0,R7			:COMPARE COUNT WITH FAC SIZE BYTE  :DRE 17-JUN-87
	JGER	R13			:ERROR IF NOT BIG ENOUGH :DRE 17-JUN-87
PFAC07	CLHI	R9,1			:TEST FOR CA FACILITY FIELD :DRE 10-JUN-87
	JEFS	PFAC09			:SKIP SETTING UP FAC COUNT
	LIS	R8,0			:COUNT= RUNNING BYTE COUNT OF LENGTH
	LHL	R1,FACBUF
	JAL	R4,WCI			:SAVE PLACE FOR COUNT
	L	R2,BE,R1,
	ST	R2,TEMP1		:SAVE POSITION OF COUNT
PFAC09	LR	R7,R0			:LEN = LENGTH OF FACILITY TO PROCESS
	JE	4,R13			:RETURN IF 0 LENGTH

:	READ OUT A FACILITY CODE AND PROCESS IT.
:	IF WE NEED NOT TO LOOK AT IT, STRIP OR PASS IT DEPENDING ON OPTIONS.
:	(R9)= CALL REQUEST/CALL ACCEPT/UTILITY/FACILITY INDICATION
:	(R7)= REMAINING LENGTH

PFAC10	LHL	R1,DIBUF
	JAL	R4,GCI			:GET A FACILITY CODE
	SIS	R7,1			:LEN = LEN - 1
	JLER	R13			:CLEAR CALL IF NOT ENOUGH DATA
	LR	R5,R0			:COPY FACILITY CODE
	LR	R6,R0
	NHI	R6,3F			:MASK DOWN TO LOW 6 BITS
	SRHLS	R5,6			:UPPER 2 BITS DETERMINE TYPE
	LR	R3,R9
	SLLS	R3,2
	LB	R4,PCTNUF,R5,R3		:ENTRY COUNT FOR THIS TYPE
	CR	R4,R6			:SEE IF WE HAVE A TABLE ENTRY FOR IT
	JLE	PFAC15			:IF NOT IN TABLE
	SLLS	R3,1
	AR	R3,R5
	LHL	R3,PFACT,R5,R3		:OFFSET TO GROUP WITHIN TABLE
:	AR	R6,R6			:MAKE INTO HW INDEX
	SLLS	R6,1			:MAKE INTO HW INDEX
	LH	R6,PFACT,R6,R3		:GET ENTRY IN JUMP TABLE
	JN	PFACT,R6		:JUMP TO PROCESSOR IF NON-ZERO
PFAC15	LA	R4,UNP.F		:GET ADDRESS OF UNKNOWN FACILITY FLAG

:	COPY OR STRIP FACILITY ELEMENT.
:	(R0) = A COPY OF FACILITY CODE
:	(R4) = NAME OF FLAG TO TESTR
PFAC20	TBT	RL,,R4
	JN	PFAC45			:IF TO PASS FACILITY ELEMENT
:	STRIP FACILITY ELEMENT.
PFAC30	CLHI	R5,UT.VAR
	JNFS	PFAC35			:IF NOT VARIABLE LENGTH
	L	R2,BB,R1,
	LB	R5,,R2			:PEEK AT LENGTH
PFAC35	AIS	R5,1
	SR	R7,R5
	JLR	R13			:CLEAR CALL IF NOT ENOUGH DATA
PFAC40	JAL	R4,GCI
	SIS	R5,1
	JGBS	PFAC40			:IF MORE TO STRIP
	J	PFAC90

:	CHECK FOR 1984 FACILITY ELEMENT, AND COPY OR STRIP DEPENDING
PFAC42	TBT	RL,FA84.F,,		:DO WE ALLOW 1984 FACILITY ELEMENTS?
	JN	PFAC30			:NO, JUST STRIP THE FACILITY ELEMENT

:	COPY FACILITY ELEMENT.
PFAC45	CLHI	R5,UT.VAR
	JNFS	PFAC50			:IF NOT VARIABLE LENGTH
	L	R2,BB,R1,
	LB	R5,,R2			:PEEK AT LENGTH
PFAC50	AIS	R5,1			:+1 TO GET LENGTH OF PARAMETER
PFAC52	SR	R7,R5
	JLR	R13			:CLEAR CALL IF NOT ENOUGH DATA :DRE 11-JUN-87
	AHI	R8,1,R5			:INCREMENT TOTAL, ACCOUNT FOR PARAMETER CODE ALSO
	LHL	R1,FACBUF
	JAL	R4,WCI			:COPY FACILITY CODE
	LHL	R1,DIBUF
	JAL	R12,CDF			:COPY FROM DI TO FAC

:	RETURN TO HERE FROM PROCESSORS.
PFAC90	LHL	R1,FACBUF		:GET POINTER TO FACILITY BUFFER :DRE 22-MAY-86 
	LR	R7,R7
	JN	PFAC10			:CONTINUE IF NOT DONE
	L	R4,TEMP1
	STB	R8,,R4			:UPDATE BYTE COUNT
	J	4,R13			:NORMAL RETURN		:DRE 23-JAN-86


:	JUMP TABLE FOR EACH TYPE OF FACILITY CODE CLASS.
:	(0 ENTRY INDICATES THAT THERE IS NO PROCESSOR DEFINE FOR THE FACILITY CODE)


 TABLE(PFACT)
:	CLASS OFFSETS FOR FACILITY, CALL REQUEST
	TENTRY(PFRTA)		:CLASS A
	TENTRY(PFRTB)		:CLASS B
	TENTRY(PFRTC)		:CLASS C
	TENTRY(PFRTD)		:CLASS D
:	CLASS OFFSETS FOR FACILITY, CALL ACCEPT
	TENTRY(PFATA)		:CLASS A
	TENTRY(PFATB)		:CLASS B
	TENTRY(PFATC)		:CLASS C
	TENTRY(PFATD)		:CLASS D
  IF	X.75
:	CLASS OFFSETS, FOR UTILITY CALL REQUEST
	TENTRY(PURTA)		:CLASS A
	TENTRY(PURTB)		:CLASS B
	TENTRY(PURTC)		:CLASS C
	TENTRY(PURTD)		:CLASS D
:	CLASS OFFSETS, FOR UTILITY CALL ACCEPT
	TENTRY(PUATA)		:CLASS A
	TENTRY(PUATB)		:CLASS B
	TENTRY(PUATC)		:CLASS C
	TENTRY(PUATD)		:CLASS D
  EI	X.75

:	CALL REQUEST FACILITY
:	PROCESS PASSED CR FACILITIES FOR INCLUSION IN INCOMING CALL PACKET
:	CLASS A -- SINGLE OCTET PARM
PFRTA	TENTRY(PFRA00)		:0  NATIONAL OPTIONS MARKER
	TENTRY(PFRA10)		:1  REVERSE CHARGE/ FAST SELECT
	TENTRY(PFRA20)		:2  THROUGHPUT CLASS
	TENTRY(PFAC30)		:3  CLOSED USER GROUP, STRIP
	TENTRY(PFAC30)		:4  CHARGING INFORMATION, STRIP
	TENTRY(PFAC30)		:5   UNKNOWN, STRIP
	TENTRY(PFAC30)		:6   UNKNOWN, STRIP
	TENTRY(PFAC30)		:7   UNKNOWN, STRIP
	TENTRY(PFAC30)		:8  CALLED LINE ADDRESS MODIFIED, STRIP
	TENTRY(PFAC30)		:9  CLOSED USER GROUP W/OUTGOING ACCESS, STRIP
PFRA.L	EQ	(.-PFRTA)/2

:	CLASS B -- DOUBLE OCTET PARM
PFRTB	TENTRY(PFAILL)		:0				:DRE 09-MAY-85
	TENTRY(PFRB10)		:1  BILATERAL CLOSED USER GROUP
	TENTRY(PFAC30)		:2  PACKET SIZE, STRIP
	TENTRY(PFAC30)		:3  WINDOW SIZE, STRIP
	TENTRY(PFRB40)		:4  RPOA
	TENTRY(PFAC30)		:5   UNKNOWN, STRIP
	TENTRY(PFAC30)		:6   UNKNOWN, STRIP
	TENTRY(PFAC30)		:7  CLOSED USER GROUP, STRIP
	TENTRY(PFAC30)		:8  CLOSED USER GROUP W/OUTGOING ACCESS, STRIP
	TENTRY(PFAC42)		:9  TRANSIT DELAY INDICATION, COPY IF 1984 OK
  IF	X.75
	TENTRY(PFAC30)		:0A  UNKNOWN, STRIP
	TENTRY(PFAC42)		:0B  TRANSIT DELAY SELECTION, COPY IF 1984 OK
  EI
PFRB.L	EQ	(.-PFRTB)/2

:	CLASS C -- TRIPLE OCTET PARM
PFRTC	TENTRY(PFAILL)
PFRC.L	EQ	(.-PFRTC)/2

:	CLASS D -- VARIABLE LENGTH PARM
PFRTD	TENTRY(PFAILL)		:0
	TENTRY(PFAC30)		:1   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:2   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:3   CALL REDIRECTION NOTIFICATION, STRIP
	TENTRY(PFAC30)		:4   EXTENDED FORMAT RPOA SELECTION, STRIP
	TENTRY(PFAC30)		:5   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:6   NUI, STRIP(LATER COPY IF REQUESTED)
PFRD.L	EQ	(.-PFRTD)/2

:	CALL ACCEPT FACILITY
:	PROCESS CA FACILITIES FOR INCLUSION IN CALL CONNECTED PACKET
:	CLASS A -- SINGLE OCTET PARM
PFATA	TENTRY(PFRA00)		:0  NATIONAL OPTIONS MARKER
	TENTRY(PFAC30)		:1  REVERSE CHARGE/ FAST SELECT, STRIP
	TENTRY(PFAA20)		:2  THROUGHPUT CLASS
	TENTRY(PFAC30)		:3  CLOSED USER GROUP, STRIP
	TENTRY(PFAC30)		:4  CHARGING INFORMATION, STRIP
	TENTRY(PFAC30)		:5   UNKNOWN, STRIP
	TENTRY(PFAC30)		:6   UNKNOWN, STRIP
	TENTRY(PFAC30)		:7   UNKNOWN, STRIP
	TENTRY(PFAC42)		:8  CALLED LINE ADDRESS MODIFIED, COPY IF 1984 OK
	TENTRY(PFAC30)		:9  CLOSED USER GROUP W/OUTGOING ACCESS, STRIP
PFAA.L	EQ	(.-PFATA)/2

:	CLASS B -- DOUBLE OCTET PARM
PFATB	TENTRY(PFAILL)		:0
	TENTRY(PFAC30)		:1  BILATERAL CLOSED USER GROUP
	TENTRY(PFAC30)		:2  PACKET SIZE, STRIP
	TENTRY(PFAC30)		:3  WINDOW SIZE, STRIP
	TENTRY(PFAC30)		:4  RPOA
	TENTRY(PFAC30)		:5   UNKNOWN, STRIP
	TENTRY(PFAC30)		:6   UNKNOWN, STRIP
	TENTRY(PFAC30)		:7   UNKNOWN, STRIP
	TENTRY(PFAC30)		:8   UNKNOWN, STRIP
	TENTRY(PFAC30)		:9  TRANSIT DELAY INDICATION, STRIP :DRE 11-JUN-87
PFAB.L	EQ	(.-PFATB)/2

:	CLASS C -- TRIPLE OCTET PARM
PFATC	TENTRY(PFAILL)
PFAC.L	EQ	(.-PFATC)/2

:	CLASS D -- VARIABLE LENGTH PARM
PFATD	TENTRY(PFAILL)
	TENTRY(PFAC30)		:1   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:2   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:3   CALL REDIRECTION NOTIFICATION, STRIP
	TENTRY(PFAC30)		:4   EXTENDED FORMAT RPOA SELECTION, STRIP
	TENTRY(PFAC30)		:5   CHARGING INFO, STRIP
	TENTRY(PFAC30)		:6   NUI, STRIP
PFAD.L	EQ	(.-PFATD)/2

  IF	X.75
:	UTILITY PROCESSORS

:	CALL REQUEST
:	PROCESS CALL REQUEST UTILITIES FOR PASSING TO NEXT STE
:	CLASS A -- SINGLE OCTET PARM
PURTA	TENTRY(PURA00)		:0  NATIONAL OPTIONS MARKER	:DRE 23-JAN-86
	TENTRY(PFRA10)		:1  REVERSE CHARGE/ FAST SELECT
	TENTRY(PFRA20)		:2  THRUPUT CLASS
	TENTRY(PURA30)		:3  TRAFFIC CLASS
PURA.L	EQ	(.-PURTA)/2

:	CLASS B -- DOUBLE OCTET PARM
PURTB	TENTRY(PFAILL)		:0
	TENTRY(PURB10)		:1  TRANSIT NETWORK ID
	TENTRY(PFAC30)		:2  PACKET SIZE, STRIP
	TENTRY(PFAC30)		:3  WINDOW SIZE, STRIP
	TENTRY(PFRB40)		:4  RPOA SELECTION, 
	TENTRY(PFAC30)		:5  UNKNOWN, STRIP
	TENTRY(PFAC30)		:6  UNKNOWN, STRIP
	TENTRY(PFAC30)		:7  UNKNOWN, STRIP
	TENTRY(PFAC30)		:8  UNKNOWN, STRIP
	TENTRY(PFAC42)		:9  TRANSIT DELAY INDICATION, COPY IF 1984 OK
	TENTRY(PFAC42)		:0A CLEARING NETWORK, COPY IF 1984 OK :DRE 11-JUN-87
	TENTRY(PFAC42)		:0B TRANSIT DELAY SELECTION, COPY IF 1984 OK :DRE 11-JUN-87
PURB.L	EQ	(.-PURTB)/2

:	CLASS C -- TRIPLE OCTET PARM
PURTC	TENTRY(PFAILL)		:0
	TENTRY(PURC10)		:1  CALL IDENTIFIER
PURC.L	EQ	(.-PURTC)/2

:	CLASS D -- VARIABLE LENGTH PARM
PURTD	TENTRY(PFAILL)		:0
	TENTRY(PFAC30)		:1
	TENTRY(PFAC30)		:2
	TENTRY(PURD30)		:3  CLOSED USER GROUP
	TENTRY(PFAC30)		:4
	TENTRY(PFAC30)		:5
	TENTRY(PFAC30)		:6
	TENTRY(PURD30)		:7  CLOSED USER GROUP WITH OUTGOING ACCESS
PURD.L	EQ	(.-PURTD)/2


:	CALL ACCEPT UTILITY PROCESSOR
:	CLASS A -- SINGLE OCTET PARM		CALL ACCEPT
PUATA	TENTRY(PURA00)		:0  NATIONAL OPTIONS MARKER	:DRE 23-JAN-86
	TENTRY(PFAC30)		:1  REVERSE CHARGE/ FAST SELECT
	TENTRY(PFAA20)		:2  THRUPUT CLASS
	TENTRY(PURA30)		:3  TRAFFIC CLASS
	TENTRY(PFAC30)		:4  CHARGING INFORMATION, STRIP
	TENTRY(PFAC30)		:5   UNKNOWN, STRIP
	TENTRY(PFAC30)		:6   UNKNOWN, STRIP
	TENTRY(PFAC30)		:7   UNKNOWN, STRIP
	TENTRY(PFAC42)		:8  CALLED LINE ADDRESS MODIFIED, COPY IF 1984 OK
	TENTRY(PFAC30)		:9   UNKNOWN, STRIP
PUAA.L	EQ	(.-PUATA)/2

:	CLASS B -- DOUBLE OCTET PARM
PUATB	TENTRY(PFAILL)		:0
	TENTRY(PURB10)		:1  TRANSIT NETWORK ID
	TENTRY(PFAC30)		:2  PACKET SIZE, STRIP
	TENTRY(PFAC30)		:3  WINDOW SIZE, STRIP
	TENTRY(PFAC30)		:4  RPOA SELECTION, STRIP
	TENTRY(PFAC30)		:5  UNKNOWN, STRIP
	TENTRY(PFAC30)		:6  UNKNOWN, STRIP
	TENTRY(PFAC30)		:7  UNKNOWN, STRIP
	TENTRY(PFAC30)		:8  UNKNOWN, STRIP
	TENTRY(PFAC42)		:9  TRANSIT DELAY INDICATION, COPY IF 1984 OK :DRE 11-JUN-87
	TENTRY(PFAC42)		:0A CLEARING NETWORK IDENTIFICATION, COPY IF 1984 :DRE 11-JUN-87
	TENTRY(PFAC30)		:0B TRANSIT DELAY SELECTION, STRIP :DRE 11-JUN-87
PUAB.L	EQ	(.-PUATB)/2

:	CLASS C -- TRIPLE OCTET PARM
PUATC	TENTRY(PFAILL)
	TENTRY(PURC10)		:1  CALL IDENTIFIER
PUAC.L	EQ	(.-PUATC)/2

:	CLASS D -- VARIABLE LENGTH PARM
PUATD	TENTRY(PFAILL)
PUAD.L	EQ	(.-PUATD)/2
  EI	X.75
 ENDTABLE

PCTNUF	BC	PFRA.L,PFRB.L,PFRC.L,PFRD.L	:# OF FACILITIES PER TYPE
	BC	PFAA.L,PFAB.L,PFAC.L,PFAD.L
  IF	X.75
	BC	PURA.L,PURB.L,PURC.L,PURD.L
	BC	PUAA.L,PUAB.L,PUAC.L,PUAD.L
  EI	X.75

:	ERROR CONDITIONS.
 REMIND(PFAILL - WHAT TO DO WITH INVALID FACILITY BEING PASSED FROM THE NET?)
PFAILL	J	PFAC15		:PASS/STRIP ACCORDING TO VALUE OF UNP.F FOR NOW

:	NATIONAL FACILITY ELEMENTS ARE PASSED ON UNTOUCHED.

:	NATIONAL OPTIONS MARKER.
:	CHECK FOR NATIONAL FACILITY(PARAMETER=0, WE DON'T HAVE ANY OF OUR
:	OWN, BUT WE DO PASS THE TELENET SIZE AND WINDOW ONES TO A GATEWAY).
:	WE THEN CHECK FOR END NETWORK AND OSI END-TO-END FACILITIES.

PFRA00	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE	:DRE 23-JAN-86
	JAL	R4,GCI			:GET THE PARAMETER VALUE :DRE 23-JAN-86
	SIS	R7,1			:ACCOUNT FOR THE BYTE	:DRE 23-JAN-86
	LR	R0,R0			:TEST FOR NATIONAL OPTION :DRE 23-JAN-86
	JN	PFRA06			:EITHER END-NETWORK OR OSI MARKER:DRE 23-JAN-86
	LHI	R12,DIA181
	TBT	RL,NAC.F
	JNR	R13			:IF OK TO CLEAR CALL FOR NATIONAL FACILITY
:	LHL	R1,FACBUF		:ADDRESS OF FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	JAL	R4,WCI			:COPY OPTIONS MARKER
	JAL	R4,WCI			:COPY NATIONAL MARKER
	AIS	R8,2			:COUNT THESE TWO BYTE
PFRA01	LR	R7,R7
	JE	PFAC90			:IF DONE
	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE
	JAL	R4,GCI			:GET NEXT FACILITY CODE
	SIS	R7,1			:ACCOUNT FOR THE FACILITY CODE
	JLER	R13			:NOT ENOUGH DATA LEFT
	LR	R0,R0			:CHECK FOR ANOTHER OPTIONS MARKER
	JE	PFRA00			:CHECK FOR TYPE OF OPTIONS MARKER
:	LHL	R1,FACBUF		:ADDRESS OF FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	JAL	R4,WCI			:COPY THE FACILITY CODE

  IF	TFACS				:IF ANY LINKS HANDLE TELENET FACILITIES
	TBT	RL,TFAC.F
	JE	PFRA04			:IF NOT SUBSCRIBED TO TELENET FACILITIES

:	ONLY LOOK AT TELENET OPTIONS 5 AND 6.  OTHERS ARE PASSED ON.
:	ASSUMES TELENET FACILITY ELEMENTS HAVE ONE BYTE OF PARAMETER VALUE.
PFRA02	LHI	R12,DIA066
	CLHI	R0,5
	JN	PFRA03			:IF NOT (5), WINDOW SIZE

:	TELENET WINDOW SIZE, JUST SET (PWRCV), (PWTMT).
	
	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE
	JAL	R4,GCI			:GET NEXT FACILITY VALUE
:	LHL	R1,FACBUF		:ADDRESS OF FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	JAL	R4,WCI			:COPY THE FACILITY VALUE
	SIS	R7,1			:ACCOUNT FOR IT
	LR	R0,R0
	JER	R13			:0 WINDOW SIZE, CLEAR CALL
	CLHI	R0,7
	JGR	R13			:OUT OF RANGE
	LHL	R4,IPORT
	STB	R0,PWRCV,R4,
	STB	R0,PWTMT,R4,
	AIS	R8,2			:ACCOUNT FOR THE FACILITY
	J	PFRA01			:GO PROCESS NEXT ONE

:	TELENET PACKET SIZE.  CHECK IF IT IS 8.
PFRA03	CLHI	R0,6
	JN	PFRA04			:IF NOT (6), PACKET SIZE
	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE
	JAL	R4,GCI			:GET NEXT FACILITY VALUE
:	LHL	R1,FACBUF		:ADDRESS OF FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	JAL	R4,WCI			:COPY THE FACILITY VALUE
	SIS	R7,1
	CLHI	R0,8
	JNR	R13			:IF NOT PACKET SIZE OF 8
	AIS	R8,2			:ACCOUNT FOR THE FACILITY
	J	PFRA01			:GO PROCESS NEXT ONE

PFRA04	HS
  EI
	LR	R5,R0
	SRLS	R5,6			:MOVE TYPE IDENT TO LOWER 2 BITS
	CLHI	R5,UT.VAR
	JNFS	PFRA05			:IF NOT VARIABLE LENGTH
	L	R2,BB,R1,
	LB	R5,,R2			:PEEK AT LENGTH
PFRA05	AIS	R5,1			:+1 TO GET LENGTH OF PARAMETER	:SCY 25-Sep-84
	SR	R7,R5						:SCY 25-Sep-84
	JLR	R13			:NOT ENOUGH DATA LEFT
	AHI	R8,1,R5			:ACCOUNT FOR THE DATA
	JAL	R12,CDT			:COPY FROM DIBUF TO TMPBUF :DRE 23-MAY-86
	J	PFRA01

PFRA06	CLHI	R0,0F			:CHECK FOR OSI END-TO-END FACILITIES
	JN	PFR015			:END NETWORK FACILITIES
:	LHL	R1,FACBUF		:GET POINTER TO FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	LIS	R0,0			:SET UP FACILITY CODE
	JAL	R4,WCI
	LIS	R0,0F			:SET UP FACLITY PARAMETER
	JAL	R4,WCI
	AIS	R8,2			:ACCOUNT FOR THE FACILITY
PFRA08	LR	R7,R7			:TEST LENGTH OF REMAINING FACILITIES
	JE	PFAC90			:ALL DONE
	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE
	JAL	R4,GCI			:GET NEXT FACILITY CODE
	SIS	R7,1			:ACCOUNT FOR IT
	JLER	R13			:NOT LONG ENOUGH
	LR	R5,R0			:TEST FOR NATIONAL MARKER
	JE	PFRA00			:HIT ANOTHER NATIONAL MARKER
:	LHL	R1,FACBUF
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	JAL	R4,WCI			:COPY FACILITY CODE FIRST
	SRLS	R5,6			:MOVE TYPE IDENT TO LOWER 2 BITS
	CLHI	R5,UT.VAR
	JNFS	PFR010			:IF NOT VARIABLE LENGTH
	L	R2,BB,R1,
	LB	R5,,R2			:PEEK AT LENGTH
PFR010	AIS	R5,1			:+1 TO GET LENGTH OF PARAMETER	:SCY 25-Sep-84
	SR	R7,R5						:SCY 25-Sep-84
	JLR	R13			:NOT ENOUGH DATA LEFT
	AHI	R8,1,R5			:ADD DATA SIZE TO COUNT
	LHL	R1,DIBUF		:ADDRESS OF DATA SOURCE
	JAL	R12,CDT			:COPY THE FACILTIY FROM DI TO TMP :DRE 23-MAY-86
	J	PFRA08			:CONTINUE

PFR015	CLHI	R0,0FF			:CHECK FOR END NETWORK MARKER
	JNR	R13			:CAN'T FIGURE OUT WHAT IT IS
	LHL	R4,IPORT
	TBT	R4,GATWAY,,		:IS THIS A TRANSIT CALL
	JE	PFAC90			:NO, WE ARE END NET, SO HANDLE FACILITIES
:	LHL	R1,FACBUF		:GET POINTER TO FACILITY BUFFER
	LHI	R1,TMPBF1		:TEMP BUFFER #		:DRE 23-MAY-86
	LIS	R0,0			:SET UP FACILITY CODE
	JAL	R4,WCI
	LHI	R0,0FF			:SET UP FACLITY PARAMETER
	JAL	R4,WCI
	AIS	R8,2			:ACCOUNT FOR END-NETWORK-MARKER
	J	PFRA08



:	NATIONAL UTILITY ELEMENTS AREN'T DEFINED FOR TYMNET

PURA00	LR	R5,R7			:COPY REST OF FACILITY ELEMENTS	:DRE 23-JAN-86
	TBT	RL,NAP.F					:DRE 23-JAN-86
	JN	PFAC52			:IF NATIONAL FACILITY ELEMENTS ALLOWED :DRE 23-JAN-86
	JAL	R4,EMPTY,,		:EMPTY OUT REST OF NATIONAL OPTIONS :DRE 23-JAN-86
	LIS	R7,0						:DRE 23-JAN-86
	J	PFAC90						:DRE 23-JAN-86

:	REVERSE CHARGE/ FAST SELECT.
PFRA10	SIS	R7,1
	JAL	R4,GCI			:GET FACILITY VALUE
	JAL	R12,REVFST		:PROCESS REVERSE CHARGE/ FAST SELECT
	J	PFAC90

:	THROUGHPUT CLASS.
:	CHANGE ONE SET UP FROM NEEDLE TO ONE BEING LOOKED AT HERE.
:
:	TPUT CLASS IS NOT PUT IN CALL REQUEST UNTIL LATER (BEFORE
:	CALL USER DATA AT ESP9) SO FAC FIELDS CAN ALSO BE PROCESSED).
:	FOR EXTENTED CALL ACCEPTED PACKET, THE THROUGHPUT CLASS
:	PARAMETER IS PASSED ON.

PFRA20	JAL	R4,GCI			:GET VALUE
	SIS	R7,1
	JAL	R12,UTV			:UPDATE TC CELLS
	J	PFAC90

:	THROUGHPUT CLASS FACILITY FROM CALL ACCEPT.
:	CLEAR THE CALL IF FINAL TC VALUE > THE VALUE SENT.
PFAA20	JAL	R4,GCI			:GET TC VALUE
	SIS	R7,1
	LHL	R6,IPORT
	SBT	R6,TCRCV,,
	LHI	R12,DIA187		:'FINAL TC > VALUE SENT'
	LR	R4,R0
	NHI	R4,0F			:ISOLATE CLG TC = RCV
	SRHLS	R0,4			:CLD TC = TMT
	LB	R2,TCLTR,R6,		:TC VALUE SENT
	LR	R3,R2
	NHI	R3,0F			:RCV TC
	SR	R3,R4
	JLR	R13			:IF FINAL RCV TC > VALUE SENT
	SRHLS	R2,4
	SR	R2,R0
	JLR	R13			:IF FINAL TMT TC > VALUE SENT
	SLHLS	R0,4
	OR	R0,R4
	STB	R0,TCLTR,R6,		:SAVE FINAL TC VALUE
	LR	R6,R9			:SAVE R9                :SCY 16-Apr-86
	LR	R5,R7			:SAVE R7                :SCY 16-Apr-86
	JAL	R7,SETTWP,,		:ADJUST PSIZE AND PWIND :SCY 16-Apr-86
	LR	R9,R6                                           :SCY 16-Apr-86
	LR	R7,R5                                           :SCY 16-Apr-86
  IF	TCSC
	LR	R5,R7			:SAVE (R7)
	JAL	R7,TRSCTC,,		:CONVERT TO NON STANDARD (EXTERNAL) VALUE
	LR	R7,R5
  EI	TCSC
	TBT	RL,TCN.F
	JE	PFRB05
	LHL	R1,FACBUF
	LR	R5,R0			:SAVE TC VALUE
	LHI	R0,FC.TC		:THROUGHPUT CLASS FACILITY CODE
	JAL	R4,WCI			:WRITE CODE FIRST
	LR	R0,R5
	JAL	R4,WCI			:COPY TC VALUE TO FACILITIES BUFFER
	AIS	R8,2			:ACCOUNT FOR TC FACILITY
PFRB05	LHL	R1,DIBUF
	J	PFAC90			:PROCESS NEXT FACILITY

:	BILATERAL CLOSED USER GROUP - HANDLE DEPENDING ON OPTION.
PFRB10	LA	R4,BCP.F
	J	PFAC20

:	RPOA - HANDLE DEPENDING ON OPTION.
PFRB40	HS
  IF	X.75							:DRE 28-JUN-87
	LHL	R2,IPORT					:DRE 28-JUN-87
	SBT	R2,RPOA.F,,		:SET RPOA FLAG		:DRE 28-JUN-87
	JN	PFAC42			:COPY LATER ONES, IF 1984 OK :DRE 28-JUN-87
  EI
	LA	R4,RPP.F
	J	PFAC20

  IF	X.75
:	TRAFFIC CLASS - HANDLE DEPENDING ON OPTION.
PURA30	LA	R4,TRP.F
	J	PFAC20			:GO HANDLE IT

:	TRANSIT NETWORK ID.
PURB10	LHL	R2,IPORT
	SBT	R2,TNIRCV,,		:MARK 'RECVD TRANSIT NETWORK ID.'
	J	PFAC45			:GO COPY

:	CALL ID, MARK 'CALL FROM X.75'
PURC10	LHL	R2,IPORT
	SBT	R2,FROM75,,		:MARK CALL FROM AN X.75
	SBT	R2,CIDRCV,,		:MRAK RCVD CALL ID UTILITY
	J	PFAC45			:GO COPY

:	CUG INTERLOCK CODE.
PURD30	HS
    IF	CUGENA			:IF CUG CODE ENABLED
	TBT	RL,CUS.F
	JE	PFAC30			:IF NOT SUBSCRIBED TO CUG, STRIP
								:SCY 25-Sep-84
:	Convert national interlock code(N.I.C.) recvd from network espc 8C msg
:	to international interlock code(I.I.C) before sending across the link.

  IF	CUG.SW				:IF CUG MAPPING ENABLE	:SCY 25-Sep-84
	STM	R0,CUGSAV,,
	LHL	R6,IPORT
	SLLS	R6,3
	L	R2,DTESAX,R6,		:GET CALLING ADDRESS
	SLLS	R2,8		
	SRL	R2,10			:GET DNIC
	LR	R3,RL
	SLLS	R3,ONI.SC
	CLH	R2,ONI.LT,R3,R3		:IS DNIC OF CALLING ADDR = OURDNIC?
	JN	PURD98			:JUST A TRANSIT CALL, GO COPY IT
	L	R2,BB,R1,		:GET ADDRESS OF DIBUF
	L	R3,,R2			:GET CUG UTILITY
	SLLS	R3,8
	SRL	R3,10			:GET 1ST PART OF N.I.C., SHOULD BE 0
	JN	PURD67			:GO CLEAR IF IT IS NOT N.I.C.
:	Look up the CUGMAPPING table (CMPTBL) to find a matched N.I.C..
:	If found, then check DNIC of called address against authorization list.
:	If not found, then clear the call

	LB	R4,3,R2			:GET 2ND PART OF I.C. BYTE BY BYTE
	SLLS	R4,8
	LB	R3,4,R2
	OR	R4,R3			:GET I.C. IN R4
	LCS	R3,4
PURD32	AIS	R3,4			:INDEX TO CMPTBL
	L	R7,CMPTBL,R3,
	JE	PURD69			:GO CLEAR IF NO MATCH IS FOUND, END OF TABLE
	AIS	R3,4			:INDEX TO N.I.C OF CMPTBL
	LHL	R7,CMPTBL,R3,		:GET N.I.C. FROM CMPTBL
	CR	R4,R7			:COMPARE TWO N.I.C.
	JN	PURD32
PURD35
	LHL	R12,CMPTBL+2,R3,	:GET listno
	JE	PURD63			:NO CHECKING AGANIST DNIC LIST
:	Get DNIC of called address
	L	R9,DTESAV,R6,		:GET CALLED ADDRESS
	SLLS	R9,8
	SRL	R9,10			:GET DNIC OF CALLED ADDRESS
	LIS	R7,0
	LH	R5,CDNTBL,R7,		:1ST H.W CONTAINS VALUE OF good (+good=1,
					: -good=FF) AND listno
	JE	PURD70			:EMPTY CUG DNIC LIST 
	LB	R5,CDNTBL+1,R7,		:GET listno
	CR	R12,R5			:IS THIS LIST?
	JE	PURD50			:YES
PURD40	AIS	R7,2			:POINT TO NEXT H.W
	LH	R5,CDNTBL,R7,		:GET IT
	JE	PURD70			:END OF TABLE, NO MATCHED listno IS FOUND
	CHI	R5,2000			:DNIC NUMBER IS IN THE RANGE 2000 - 7999
	JGEBS	PURD40			:SKIP DNIC TILL 1ST H.W OF LIST 
	LB	R5,CDNTBL+1,R7,		:GET listno
	CR	R12,R5			:IS THIS LIST?
	JN	PURD40			:NO
:	Found the listno, check DNIC of called address against this dnic list
PURD50
	LR	R4,R7			:SAVE
PURD55	AIS	R7,2			:INDEX TO NEXT H.W STORAGE
	LH	R8,CDNTBL,R7,		:GET ITS CONTENT
	CHI	R8,2000			:IS DNIC?
	JL	PURD90			:NO, END OF LIST, NO MATCH FOUND
	CR	R9,R8			:COMPARE TWO DNIC
	JN	PURD55			:LOOP BACK IF NOT THE SAME

:	Get I.I.C. from CMPTBL and write into DIBUF
PURD60
	LB	R8,CDNTBL,R4,		:GET VALUE OF GOOD
	CLHI	R8,1			:IS +GOOD?
	JN	PURD95			:DNIC OF CALLED ADDR IS IN BAD DNICLIST
PURD63
	LIS	R5,4			:COUNTER, 4 BYTES
	SIS	R3,4			:INDEX TO I.I.C. IN CMPTBL
PURD65	LB	R12,CMPTBL,R3,		:GET 1ST BYTE OF I.I.C.
	STB	R12,1,R2		:STORE INTO DIBUF, WRITE OVER THE OLD ONE
	AIS	R2,1			:INCRE. THE POINTER FOR DIBUF
	AIS	R3,1			:INCRE. THE POINTER FOR CMPTBL
	SIS	R5,1			:DECRE. COUNTER
	JGBS	PURD65
	J	PURD98

PURD67	LHI	R12,CNETCG^8!DIA196	:INVALID INTERLOCK RCVD
	J	ESPCLR

PURD69	LHI	R12,CNETCG^8!DIA193	:END OF TABLE, NO MATCH IS FOUND
	J	ESPCLR

:	Empty CUG DNIC table(CDNTBL), no CUGDNICLIST macro defined
PURD70	LHI	R12,CNETCG^8!DIA194	:INVALID listno DEFINED IN CUGMAPPING
	J	ESPCLR
:	No matched DNIC found in the CUG DNIC LIST
PURD90
	LB	R8,CDNTBL,R4,		:GET VALUE OF GOOD
	CLHI	R8,01			:IS GOOD DNIC LIST?
	JN	PURD63			:NO, ACCEPT IT SINCE DNIC IS NOT IN BAD LIST
PURD95	LHI	R12,CNETCG^8!DIA195	:DNIC OF CALLED ADDR IS NOT IN GOOD
					: CUG DNIC LIST
	J	ESPCLR
PURD98	LM	R0,CUGSAV,,		:RESTORE R0-R15
  EI	CUG.SW							:SCY 25-Sep-84

	LHL	R2,IPORT
	SBT	R2,CUGCAL,,		:MARK RCVD CUG
	J	PFAC45			:GO COPY
    ELSE
	J	PFAC30			:STRIP THE UTILITY
    EI
  EI	X.75


::	REVFST-	PROCESS REVERSE CHARGE/ FAST SELECT FACILITY (UTILITY)
:		MARK *REVCHG*, *FSTSEL*, *FSTRES* FLAGS.
:
:	INPUT	(R0)= FACILITY VALUE
:	USES	R0,R4,R12
:	LINK IS R12

REVFST	LHL	R4,IPORT
	THI	R0,RF.RC
	JEFS	REVF10			:IF NO REVERSE CHARGE

:	REVERSE CHARGE IS RECORDED AND REMOVED FROM THE FACILITY
:	LATER IF R.C. IS SUBSCRIBED IT WILL BE ADDED BACK.
	SBT	R4,RVCHRG,,

:	CHECK FAST SELECT.
REVF10	HS	0
  IF	FSTSLT
	THI	R0,RF.FS
	JER	R12			:IF NO FAST SELECT, RETURN
	SBT	R4,FSTSEL,,
	THI	R0,RF.RS
	JER	R12			:IF NO RESTRICITON
	SBT	R4,FSTRES,,
  EI	FSTSLT
	JR	R12			:RETURN


::	SNDDR-	SEND DIALECT RESPONSE TO ACCEPT A CERTAIN DIALECT.
:
:	INPUT	(R12)= DIALECT CODE TO ACCEPT, LEFT SHIFTED 8 BITS
:		(R1)= DPORT
:	USES	R0-R4,R12
:	CALLS	SLOR, ELOR, PUTCH, PUTW
:	LINK IS R9

SNDDR	CTLMSG(SIX)
	LIS	R0,8
	LIS	R2,4
	JAL	R4,SLOR,,
	LHI	R0,(IX.SDR^-8)
	JAL	R4,PUTCH
	LI	R0,((IX.SDR&0FF)^18)
	OR	R0,R12			:OR IN DIALECT TYPE
	JAL	R4,PUTW,,
	JAL	R4,ELOR,,
	RBT	R1,EXTWDR		:NO NEED TO WAIT ANY LONGER	:DRE 09-MAY-85
	JR	R9			:EXIT


::	UTV -	UPDATE THRUPUT CLASS CELLS.
:		CALLED FROM PFAC VIA CALL REQUEST PROCESSING, TMT/RCV
:		VALUES ARE IN THE 'RIGHT' ORDER.
:	INPUT	(R0)= THROUGHPUT CLASS VALUE
:	OUTPUT	FLAG TCRCV SET.
:	USES	ALL BUT R10,R11,R7
:	CALLS TRSCTC TO CONVERT TO EXTERNAL TC VALUE IF TCSC=1
:	LINK IS R12

UTV
	LHL	R6,IPORT
  IF	X.75
	SBT	R6,TCRCV,,
  EI	X.75
:	MAKE SURE TC ARE NOT GREATER THAN THE DEFAULT MAX VALUES.
	LR	R4,R0
	NHI	R4,0F			:ISOLATE CALLING VALUE, COMPARE AGAINST TMT TC
	SRHLS	R0,4			:ISOLATE CALLED VALUE, COMPARE AGAINST RCV TC
	LB	R2,TTR.LT,RL,		:GET DEFAULT MAX
	LR	R3,R2
	NHI	R3,0F			:DEFAULT RCV TC
	SRHLS	R2,4			:DEFAULT TMT TC
	CR	R0,R3
	JLEFS	UTV10			:IF LESS THAN DEFAULT
	LR	R0,R3			:TAKE DEFAULT MAX
UTV10	CR	R4,R2
	JLEFS	UTV50			:IF LESS THAN DEFAULT
	LR	R4,R2			:TAKE DEFAULT MAX
UTV50	SLHLS	R4,4
	OR	R0,R4
	STB	R0,TCLTR,R6,		:SAVE THRU PUT CLASS
  IF	TCSC			:IF NEED TO TRANSLATE TO NON STANDARD CLASS
	LR	R5,R7			:SAVE (R7)
	JAL	R7,TRSCTC,,		:CONVERT FROM STD TO EXTERNAL VALUE
	LR	R7,R5
  EI
	JR	R12			:RETURN


::	CLEAN-	CLEAN UP CHANNEL.
:		GET CHANNELS STATE AND CHECK IF HAVE RECEIVED A CLEAR REQUEST
:		FROM OTHER END ALREADY.
:
:	EXIT TO MMFRA

CLEAN	LHL	R1,IPORT
	LB	R0,PCKSTE,R1,		:GET CHANNELS STATE
	JNFS	CLE010			:IF NOT IN READY STATE
	JAL	R9,IDONE,,
	J	MMFRA,,

CLE010	CLHI	R0,PSCLRC
	JE	CLE030			:IF IN SEND CLEAR CONF STATE

:	CHANNEL WAITING FOR A CALL ACCEPTED OR CLEAR
:	REQUEST PACKET.
  IF	X.75
	CLHI	R0,PSCALC
	JNFS	CLE020			:IF NOT IN SEND CALL ACCEPT STATE
	JAL	R9,MAKCLR,,
CLE020	HS
  EI	X.75
	JAL	R9,QCR,,		:QUEUE UP CLEAR REQUEST
	LHL	R1,IPORT
	RBT	R1,AUXTIM,,		:TURN OF AUX. CIRCUIT TIMER
	LIS	R0,0
	STH	R0,ID.MT,R1,R1		:SET MAPPING TABLE ENTRY TO ZERO
	J	MMFRA,,			:GO CHECK FOR MORE DATA IN RING

:	CHANNEL IN SEND CLEAR CONFT STATE.  USER ALREADY HANGED UP.
:	MUST SEND A CLEAR CONFIRMATION AT THIS TIME.
CLE030	SLLS	R1,2
	AHI	R1,IECBIA
	LHI	R0,ZCLRCN		:GET CLEAR CONFIRMATION PACKET TYPE
	JAL	R4,WCI
	J	MMFRA,,


::	CONUP-	CONNECT UP.
:	CALL WAS ORIGINATED EXTERNALLY AND WE ARE FINALLY READY
:	TO USE THE CIRCUIT.  I.E, EITHER,
:	OLD NOT TURKEY- GOT GREEN BALL WITHOUT L.T.M. SO WE KNOW ITS NOT TURKEY
:	IIX NOT TURKEY- GOT ASCII DIALECT SO WE KNOW ITS NOT TURKEY OR GOT
:		"GATEWAY REACHED DUMB HOST" WHICH ALSO WILL NOT BE TURKEY
:	OLD OR IIX TURKEY- WE WAITED FOR THE ESCAPED CONNECT PACKET AND
:		NOW WE'RE HERE BECAUSE THE OTHER END IS CONNECTED UP.
:
:	NOW,	IF WE HAVE NOT SENT A CALL ACCEPTED ON EXTERNAL NETWORK
:		SEND ONE AND CONNECT UP THINGS. IF WE HAVE JUST DO CLEANUP
:		AND SOME ACCOUNTING.
:
:	EXIT TO MMFRA,CWROT

CONUP	LHL	R1,IPORT
	LB	RL,IL.MT,R1,		:LOAD LINK #
  IF	INFSW1		:IF CALLS TO INFOSWITCH ALLOWED
	TBT	R1,INFCAL,,		:IF INFOSWITCH CALL
	JN	MMFRA,,			:DO HOOKUP AFTER CALL ACCEPTED BY INFOSWITCH
CONINF	HS
  EI
	LHL	R2,DPORT
	TBT	R2,TURKEY
	JN	CONTRK			:IF IN DIALECT MODE
	LHL	R1,IPORT
	TBT	R1,RVCHRG,,		:TEST IF REVERSE CHARGING REQUESTED
	JE	CON010			:IF NOT
	TBT	RL,RCNA.F		:TEST IF REVERSE CHARGE NOT ACCEPTED
	JE	CON010			:IF REVERSE CHARGE ACCEPTED
	LHI	R0,AA.ERR		:WE SHOULDN'T REPORT TERMINATION CODE
	STH	R0,TERMCD
	JAL	R9,DDONE,,
	LHI	R0,CNMREV^8!DIA000	:NUMBER REFUSES REVERSE CHARGING
	LHL	R1,IPORT
	STH	R0,PSDIAG,R1,R1
	J	CLEAN

CON010	LB	R3,HREF4,RL,
	JEFS	CONTRK			:IF NO DATA FORWARDING TIMER
	RBT	R2,NDATIM		:ENABLE TIMER
CONTRK	HS			:ENTER HERE WHEN TURKEY ESC CALL CONNECTED SEEN
	LHL	R1,DPORT
	LHL	R5,IPORT
	LB	R0,PCKSTE,R5,		:GET CHANNELS STATE
	CLHI	R0,PFLOWC
	JGE	CON040			:IF IN ONE OF DATA XFER STATES
	CLHI	R0,PSCALC
	JN	CON090			:IF NOT IN SEND CAL CONF STATE

:	ANY DATA STILL BEING PROCESSED FROM IDBUF MUST BE WHAT'S LEFT
:	OF THE CALL USER DATA. IF THIS IS NOT A TURKEY CALL WE MUST PASS THIS
:	AS NORMAL DATA (OTHERWISE AS CUD)...
:	ADD A BYTE OF LENGTH FOR IT SO THAT IT WILL BE PASSED ON LATER
:	BY THE *BFRITD* ROUTINE.

	TBT	R1,TURKEY
	JN	CON030			:IF DIALECT MODE, ALREADY TAKEN CARE OF THIS
	LR	R2,R1
	SLLS	R1,2
	AHI	R1,IDBIA
	CBCT(R9)
	LR	R9,R9
	JE	CON030			:IF NOTHING IN BUFFER
	RBT	R2,INPROG
	JN	CON013			:IF IN PROGRESS OF READING A MESSAGE

	LHL	R4,IPORT
	TBT	R4,GATWAY,,
	JE	CON025			:IF NOT GATEWAY CALL
	JAL	R4,GCI			:DELETE CIRCUIT SPEED INDICATOR ADDED AT PCR530
	JAL	R4,GCI
	JAL	R4,GCI			:GET LENGTH OF CUD
	LR	R5,R0			:SET CHARACTER COUNT
	SIS	R9,3			:REDUCE NUMBER OF CHARACTERS LEFT BY CSI LENGTH, CSI AND CUD LENGTH
	SR	R9,R5			:REDUCE BY CUD LENGTH
	J	CON015			:GO MOVE CUD

CON013	LB	R0,INBCT,R2,		:GET COUNT BEING DONE
	LR	R5,R0
	SR	R9,R0
	JGEFS	CON015			:IF ENOUGH DATA IN ID BUFFER
	TRAP(R1,DB)			:SOMETHING WROWN WITH DI BUFFER

:	CREATE LENGTH FOR THIS MSG AND COPY TO END OF IDBUF.
CON015	JAL	R4,WCI			:WRITE LENGTH
CON020	JAL	R4,GCI			:COPY TO END OF ID BUFFER
	JAL	R4,WCI
	SIS	R5,1
	JGBS	CON020

:	DELETE REST OF THE MESSAGE.
:	(MUST BE THE 'CR' THAT WE ADDED THAT DID NOT GET USED)
:	(R9)= NO. OF CHARS LEFT
CON025	SIS	R9,1
	JLFS	CON030			:IF NO MORE CHARS LEFT
	JAL	R4,GCI
	JBS	CON025

CON030	LHL	R5,IPORT
	RBT	R5,AUXTIM,,		:RESET CALL REQUEST TIMER
	LHL	R1,IECBUF
	LHI	R0,ZCLACP		:GET CALL ACCEPTED PACKET TYPE
	JAL	R4,WCI			:PUT ON QUEUE

CON040	HS
	LHL	R1,DPORT
:	TBT	R1,TURKEY
:	JN	CON050			:IF TURKEY CALL, NO LEVEL 1
	TBT	R5,ITICAL		:SEE IF THIS IS AN ITI CALL
	JE	CON050			:IF NOT, DO NOT SEND Q-BIT PACKET
	RBT	R5,PADCHD,,		:DID WE CHANGE THE PAD PARAMETERS? :DRE 16-JUN-85
	JE	CON043			:NO, THEN DON'T TRY TO RESTORE THEM :DRE 16-JUN-85
	LB	R0,WFR.NO,R5,		:GET COUNT OF RESPONSES REMAINING FROM PAD :DRE 20-MAR-85
	JN	CON043			:SKIP RESTORE, IF WE DID NOT GET ENOUGH PARAMETERS:DRE 25-MAR-85

:	RESTORE ECHO AT PAD IF ORIGINALLY SET
	TBT	R1,ITP.4,,		:TEST RESPONSE RECEIVED FROM PAD
	JE	CON041			:INITIALLY OFF, SAME AS WE LEFT IT :DRE 20-MAR-85 :SCHEN 25-Feb-85
	X29MSD(X29.2,X3.2,1)		:TURN ECHO BACK ON	:DRE 16-JUN-85

:	RESTORE IDLE TIMER AND DATA FORWARDING CHARACTER OF PAD
CON041	LHL	R1,DPORT
	LB	R0,XMTLOG,R1,		:INITIAL DATA FORWARDING CHARACTER
	X29MRD(X29.2,X3.3,R0)		:SET PAD MESSAGE
	LHL	R1,DPORT		:SNLEVD DESTROYS R1, SO RELOAD
	LB	R0,IDLLOG,R1,		:INITIAL IDLE TIMER VALUE OF PAD
	X29MRD(X29.2,X3.4,R0)		:SET PAD MESSAGE


:	SEND CANNED Q-BIT PAD COMMANDS

:	PUT IN AN ENABLING LEVEL ONE DATA PACKET IN DATABUFFER
:	IF THIS CALL WAS FROM AN EXTERNAL ITI AND GOES TO
:	A NON-X HOST IN OUR NETWORK.

CON043	HS							:SCHEN 25-Feb-85
  IF	CENALX				:IF Q-BIT STRING NOT EMPTY
	LHL	R1,DPORT		:SNLEVD DESTROYS R1, SO RELOAD
	TBT	R1,TURKEY
	JN	CON050			:IF TURKEY CALL, NO Q-BIT
	LHI	R7,CENALX		:GET LENGTH OF CANNED PACKET
CON042	LHL	R1,IEDBUF
	LR	R5,R7
	JLE	CON050			:IF END OF PACKET
	LHL	R2,IPORT
	LHL	R2,PSTMT,R2,R2		:MAX TRANSMIT SIZE
	LHI	R8,QBIT
	SR	R7,R2
	JLEFS	CON044			:IF WILL FIT IN ONE PACKET
	LR	R5,R2			:PUT OUT A FULL PACKET
	OHI	R8,MBIT			:TURN ON M-BIT
CON044	LIS	R0,ZDATA
	JAL	R4,WCI
	LR	R0,R5			:GET LENGTH
	AIS	R0,1			:ACCOUNT FOR FLAG BYTE
	WHI				:OUTPUT LENGTH
	LR	R0,R8
	JAL	R4,WCI			:OUTPUT FLAG BYTE
	LIS	R8,0
CON048	LB	R0,CENABL,R8,		:GET A BYTE OF CANNED LEVEL ONE PACKET
	JAL	R4,WCI
	AIS	R8,1
	CR	R8,R5
	JLBS	CON048			:CONTINUE IF NOT DONE
:	JAL	R4,COSP,,		:UPDATE OUTPUT COUNTS	:LSH 14-JUL-87
	J	CON042			:SEE IF ANYMORE PACKETS TO PUT OUT
  EI	CENALX

:	IF THIS IS A TURKEY CALL, THE OTHER END WILL REPORT THE
:	REVERSE CHARGE AND ITI VALUES BUT FOR CALLS TO DUMMIES WE
:	MUST DO THIS.
CON050	HS
	LHL	R1,IPORT
  IF	DTARS		 		:IF ANY LINK PROCESSING DPC TARIFF CLASS
	LB	RL,IL.MT,R1,		:LINK #
	TBT	RL,DTAR.F		:IS THIS LINK ??
	JEFS	CON060			:IF NOT
	LB	R7,TARIFF,R1,
	CLHI	R7,0FF
	JEFS	CON060			:IF NONE TO REPORT
	OI	R7,AA.TCU!AA.DTC	:DATAPAC TARIFF CLASS UTILITY REPORT
	JAL	R9,GENRPT,,
  EI	DTARS
CON060	LHL	R1,DPORT
	RBT	R1,CHLOGN

:	IF THIS IS A TURKEY CALL, THE OTHER END WILL REPORT THE
:	REVERSE CHARGE AND ITI VALUES BUT FOR CALLS TO DUMMIES WE
:	MUST DO THIS.
	LHL	R1,DPORT
	TBT	R1,TURKEY
	JN	CWROT			:IF DIALECT MODE
  IF	OLDTUR
	RBT	R1,GRNB1		:RESET GREEN BALL FLAGS
	RBT	R1,GRNB2
  EI	OLDTUR
	LHL	R1,IPORT
	LIS	R7,0
	TBT	R1,RVCHRG,,
	JEFS	CON070			:IF REV CHARGING NOT REQUESTED
	LHI	R7,COL.BT		:TURN ON REVERSE CHARGING BIT
CON070	TBT	R1,ITICAL		:IS CALL FROM A TTY
	JEFS	CON080			:IF NOT
	OHI	R7,TER.BT		:TURN ON 'FROM TTY' BIT
CON080	AI	R7,AA.CO		:COLLOECT/ ORIGINATION ACCT MSG
	JAL	R9,GENRPT,,
	J	CWROT			:GO SEE IF HAVE TO OPEN PACKET WINDOW

CON090	LHI	R1,AA.ERR		:WE SHOULD'NT REPORT TERM CODE
	STH	R1,TERMCD
	JAL	R9,DDONE,,
	LHL	R1,IPORT
	LHI	R0,CNETCG^8!DIA000	:USE NETWORK CONGESTION, NO DIAGNOSTIC
	STH	R0,PSDIAG,R1,R1
	J	CLEAN


CONCRA	TRAP(R1,DB)		:SOMETHING WRONG WITH DIBUF


::	CUDDLE-	MOVES TEXT MESSAGE FROM SUPERVISOR INTO DI BUFFER.
:		IF A PORT IS STILL IN THE EXTERNAL LOGIN MODE,
:		MOVE TEXT MESSAGE TO DI BUFFER SO THAT DATA CAN LATER BE
:		LOOKED AT IF CALL IS REJECTED.
:
:	INPUT	(R5)= NO. OF CHARS IN MESSAGE
:		DPORT
:	LINK IS R7

CUDDLE	LHL	R1,DPORT
	SLLS	R1,2
	AHI	R1,DIBIA
CUDDL1	JAL	R4,GETCH		:GET CHAR FROM RING
	JAL	R4,WCI
	SIS	R5,1
	JNBS	CUDDL1
	JAL	R4,ELIR,,
	LHL	R1,DPORT
	LIS	R0,2
	STB	R0,LOGTIM,R1,		:RESET LOGIN TIMER
	JR	R7			:RETURN


  IF	X.75
::	MAKCLR-	MAKE CLEAR INFO FILED IN FACILITIES BUFFER FOR *RM*
:		TO USE IN BUILDING CLEAR REQUEST PACKET.
:
:	INPUT
:	OUTPUT
:	USES	R0-R9
:	LINK IS R9

MAKCLR	LHL	R1,IPORT
	LB	R7,TNICNT,R1,		:GET TNI LIST LENGTH
	JER	R9			:NO NEED TO MAKE THIS IF EMPTY TNI LIST
	SBT	R1,EXTCLR,,		:INFORM RMAKE TO TAKE DATA FROM FACBUF
	JNR	R9			:IF WE ALREADY GOT CLEAR INFO
	RBT	R1,TNIRCV,,		:MAKE SURE RESET
	SLLS	R1,2
	AHI	R1,FACBIA
	STH	R1,FACBUF
:	MAKE SURE LENGTH OF FACBUF STARTS OUT CORRECT.
	CBCT(R6)			:GET LENGTH IN BUFFER
	SR	R6,R7
	JL	MAKCRA			:INCORRECT TNI LIST
	JEFS	MAKC20			:IF NO NEED TO DELETE ANYTHING
MAKC10	JAL	R4,GCI			:DELETE DATA FROM FACBUF
	SIS	R6,1
	JGBS	MAKC10			:IF MORE TO DELETE

:	MAKE HEADER	2/LEN, 1/FLGBYT, 1/0 (ADR LEN), 1/UTIL LEN, ETC.
MAKC20	LR	R2,R7
	SRLS	R2,1
	AR	R7,R2			:TOTAL UTILITY LENGTH
	LHI	R0,3,R7			:ADD IN LEN FOR ADR LEN, FLGBYT, UTIL LEN
	WHI				:WRITE LENGTH
	LIS	R0,0
	JAL	R4,WCI			:DUMMY FLAG BYTE
	JAL	R4,WCI			:0 ADDRESS LEN
	LR	R0,R7			:UTILITY LENGTH
	JAL	R4,WCI
	JAL	R6,ADDTNI		:ADD IN TRANSIT NET ID UTILITY
	JR	R9			:RETURN

MAKCRA	TRAP(R1,D4)			:INCORRECT TNI LIST
  EI	X.75


::	MAKDTA-	MAKE DATA PACKETS FROM IIX DATA MESSAGE RECEIVED.
:		ACCORDING TO THE LOCAL TRANSMIT PACKET SIZE.
:	INPUT	(FLGBYT)= ORIGINAL FLAG BYTE FROM IIX DATA MSG
:		(R6)= REMAINING CHARS IN THIS ORIGINAL PACKET
:	USES	R0-R15
:	LINK IS R7

MAKDTA	LHL	R2,DPORT
	LB	R8,FLGBYT,R2,		:GET FLAG BYTE
	LHL	R2,IPORT
	LH	R13,PSTMT,R2,R2		:TRANSMIT MAX PACKET SIZE
MAKD10	LH	R1,DIBUF
	CBCT(R5)			:GET CHARS IN BUFFER
	LR	R4,R5
:	THE INSTRUCTION BELOW DELETED TO FIX YEARS OLD PROBLEM OF ZERO
:	LENGTH PACKETS DISAPEARING
:	JER	R7			:NO MORE, EXIT		:DRE 19-MAR-86
	SR	R4,R13
	JLEFS	MAKD20			:IF < = MAX PACKET
	OHI	R8,MBIT			:SET MBIT
	LR	R5,R13			:OUTPUT FULL PACKET
	J	MAKD30			:GO DO IT

:	IF LAST PACKET IN A PACKET SEQUENCE, (DNCNT) SHOULD BE 0 AND
:	THE ORIGINAL M-BIT (M-BIT IN THE FLAG BYTE OF THE IIX MESSAGE)
:	WOULD BE 0.  IN THIS CASE, OUTPUT THIS FINAL PACKET IN THIS
:	PACKET SEQUENCE WITH M=0.
:	IN ALL OTHER CASES, OUTPUT PACKET WITH M=1 IF FULL, WAIT FOR THE
:	NEXT CHANCE IF NOT FULL.

MAKD20	LHL	R3,DPORT
	LHL	R9,DNCNT,R3,R3
	JN	MAKD25			:IF NOT AT END OF ORIGINAL PACKET
	LB	R9,FLGBYT,R3,
	THI	R9,MBIT
	JNFS	MAKD25			:IF M-BIT IN ORIGINAL PACKET
:	LHI	R2,MBIT
:	XHI	R2,0FFFF
	LHI	R2,@MBIT		:LOAD COMPLIMENT OF MBIT :DRE 19-MAR-86
	NR	R8,R2			:TURN M-BIT OFF
	JFS	MAKD30			:GO MAKE FINAL PACKET

:	PUT OUT A FULL PACKET IF WE HAVE ONE.
:	ELSE, WAIT FOR THE NEXT IIX DATA MESSAGE (IF DNPROG=1)
:	OR MORE OF THE CURRENT PACKET IN DATA MESSAGE FORMAT.
MAKD25	LR	R4,R4
	JLR	R7			:IF NOT ENOUGH FOR A FULL PACKET, EXIT
	OHI	R8,MBIT			:MAKE SURE HAS M-BIT

:	QUEUE UP A DATA PACKET.
:	(R8)= FLAG BYTE TO USE
:	(R5)= NO. OF CHARS IN THIS PACKET
MAKD30	LHL	R1,IEDBUF
	LHI	R0,ZDATA
	JAL	R4,WCI			:DATA TYPE
	LR	R0,R5
	AIS	R0,1			:ACCOUNT FOR THE FLAG BYTE
	WHI				:WRITE LENGTH
	LR	R0,R8			:FLAG BYTE
	JAL	R4,WCI
	LHL	R2,DPORT
	STH	R5,RUFCNT,R2,R2		:STORE BYTE COUNT FOR ACCOUNTING
	LR	R5,R5			:TEST LENGTH		:DRE 19-MAR-86
	JE	MAKD70			:ALL FINISHED IF ZERO LENGTH :DRE 19-MAR-86
	THI	R8,QBIT			:TEST FOR Q-BIT
	JN	MAKD80			:IF SO			:DRE 13-MAY-85
  IF	(.MARK!.SPACE)&.DATA&.ALL	:IF ANYBODY WANTS DIALECT CUD PARITY CONTROL
	LIS	R0,0			:INITIALIZE PARITY CONTROL FLAGS
   IF	.MARK				:ANYBODY OPTED FOR MARK PARITY?	:DRE 13-MAY-85
	O	R0,MRKP.F		:DOES THIS LINK USE IT?	:DRE 13-MAY-85
   EI	.MARK							:DRE 13-MAY-85
   IF	.SPACE				:IF ANYBODY OPTED FOR SPACE PARITY :DRE 13-MAY-85
	O	R0,SPCP.F		:DOES THIS LINK USE IT?	:DRE 13-MAY-85
   EI	.SPACE							:DRE 13-MAY-85
	A	R0,ALL.F		:APPLY TO TURKEY CALLS?	:DRE 13-MAY-85
	A	R0,DAP.F		:TO DATA?		:DRE 13-MAY-85
	ST	R0,TEMP1		:SAVE FOR LATER USE	:DRE 13-MAY-85
  EI	(.MARK!.SPACE)&.DATA&.ALL 				:DRE 13-MAY-85
	LCS	R9,1			:SET ECHO FLAG INITIALLY OFF
	TBT	R2,DEM			:IN DEFERRED ECHO NOW ??
	JEFS	MAKD32			:IF NOT, CHECK FOR PARITY ON THIS LINE	:DRE 13-MAY-85
	TBT	R2,PAR0			:IS ECHO ON ?
	JNFS	MAKD38			:IF SO, PLAN ON ECHOING	:DRE 13-MAY-85
MAKD32	HS							:DRE 13-MAY-85
  IF	(.MARK!.SPACE)&.DATA&.ALL	:IF ANYBODY WANTS DIALECT CUD PARITY CONTROL
	TBT	RL,TEMP1		:IS THERE ANY PARITY CONTROL ON THIS LINK? :DRE 13-MAY-85
	JNFS	MAKD40			:YES, USE SLOW LOOP	:DRE 13-MAY-85
  EI	(.MARK!.SPACE)&.DATA&.ALL 				:DRE 13-MAY-85
	J	MAKD80			:IF NEITHER MARK OR SPACE, USE FAST LOOP :DRE 13-MAY-85

MAKD38	LHI	R0,10,R5		:BYTE COUNT WITH SLOP
	LR	R1,R2			:PORT #
	LR	R2,R5			:MSG TYPE CODE
	JAL	R4,BSLOR,,		:START ECHO DATA MESSAGE
	LR	R12,RL			:MOVE LINK #
	SLLS	R12,4			:OFFSET TO PROPER ECHO TABLE
	LHI	R9,80			:SET LIMIT FOR ECHO OUTPUT
MAKD40	LHL	R1,DIBUF		:GET DIBUF
	JAL	R4,GCI			:GET A CHAR FROM DI BUFFER
	LR	R6,R0			:COPY CHARACTER		:DRE 13-MAY-85
  IF	(.MARK!.SPACE)&.DATA&.ALL	:IF ANYBODY WANTS DIALECT CUD PARITY CONTROL
:WE NEED THIS CODE ONLY IF PARITY CONTROL ON, OTHERWISE WE WILL NOT GET HERE
:IF ECHO IS OFF
	LR	R9,R9			:TEST FOR ECHO
	JL	MAKD46			:NO ECHOING, CHECK FOR PARITY CONTROL
  EI
	NHI	R0,7F			:OFF PARITY
	TBT	R0,DETBL,R12,		:IS THIS CHARACTER ECHOABLE ?
	JEFS	MAKD42			:IF NOT
	JAL	R4,BPUTCH		:DO SO
	SIS	R9,1			:COUNT THE CHAR
MAKD42	CLHI	R0,0D			:WAS IT A <CR> ?
	JNFS	MAKD43			:IF NOT
	LHL	R1,DPORT
	TBT	R1,PAR3			:FOLLOW CR WITH LF FLAG
	JEFS	MAKD43			:IF NOT
	LHI	R0,8A			:LOAD A <LF>
	JFS	MAKD44			:CHECK FOR END OF BLOCK	:DRE 13-MAY-85
MAKD43	CLHI	R0,0A			:WAS IT A <LF>?		:DRE 13-MAY-85
	JNFS	MAKD45			:IF NOT			:DRE 13-MAY-85
	LHL	R1,DPORT
	TBT	R1,PAR2			:FOLLOW LF WITH CR FLAG
	JEFS	MAKD45			:IF NOT			:DRE 13-MAY-85
	LHI	R0,8D			:LOAD A <CR>
MAKD44	JAL	R4,BPUTCH		:AND PUT TO RING	:DRE 13-MAY-85
	SIS	R9,1			:COUNT THIS CHAR	:DRE 13-MAY-85
MAKD45	LR	R9,R9			:HAVE WE COMPLETED AN ECHO RECORD :DRE 13-MAY-85
	JGFS	MAKD46			:NO, CONTINUE		:DRE 13-MAY-85
	JAL	R4,BELODR,,		:END ECHO MESSAGE	:DRE 13-MAY-85
	LHI	R0,10,R5		:BYTE COUNT WITH SLOP	:DRE 13-MAY-85
	LHL	R1,DPORT		:PORT #			:DRE 13-MAY-85
	LR	R2,R5			:MSG TYPE CODE		:DRE 13-MAY-85
	JAL	R4,BSLOR,,		:START ECHO DATA MESSAGE :DRE 13-MAY-85
	LHI	R9,80			:RESET COUNTER		:DRE 13-MAY-85
MAKD46	LR	R0,R6			:RESTORE TRUE CHARACTER
  IF	(.MARK!.SPACE)&.DATA&.ALL	:IF ANYBODY WANTS DIALECT CUD PARITY CONTROL
	TBT	RL,TEMP1		:ANY PARITY STUFF ON THIS LINE?	:DRE 13-MAY-85
	JEFS	MAKD60			:IF NOT			:DRE 13-MAY-85
   IF	.MARK				:ANYBODY OPTED FOR MARK PARITY ?
	TBT	RL,MRKP.F		:DID THIS LINK ??
	JEFS	MAKD50			:IF NOT
	OHI	R0,80			:SET IT
    IF	.SPACE
	JFS	MAKD60
    EI	.SPACE
   EI	.MARK
MAKD50	HS
   IF	.SPACE				:IF ANYBODY OPTED FOR SPACE PARITY
	TBT	RL,SPCP.F		:DID THIS LINK ??
	JEFS	MAKD60			:IF NOT
	NHI	R0,7F
   EI	.SPACE
  EI	(.MARK!.SPACE)&.DATA&.ALL
MAKD60	LHL	R1,IEDBUF
	JAL	R4,WCI			:PUT IN IED BUFFER
	SIS	R5,1
	JG	MAKD40			:IF MORE
	THI	R8,QBIT			:TEST FOR Q-BIT PACKET	:DRE 13-MAY-85
	JNFS	MAKD70			:IF SO			:DRE 13-MAY-85
	LR	R9,R9			:ECHOING?		:DRE 13-MAY-85
	JLFS	MAKD70			:NO, SKIP ENDING RECORD	:DRE 13-MAY-85
	JAL	R4,BELODR,,		:END ECHO MESSAGE
MAKD70	JAL	R4,COP1SX,,		:UPDATE OUTPUT COUNTS	:LSH 14-JUL-87
	THI	R8,MBIT			:IS THIS A MBIT PACKET	:DRE 19-MAR-86
	JNFS	MAKD75			:YES, GOT TO TOP OF LOOP AFTER :DRE 19-MAR-86
	JAL	R9,APPBKP		:NO, CHECK BACKPRESURE	:DRE 19-MAR-86
	JR	R7			:ALL DONE WITH THIS PACKET :DRE 19-MAR-86
MAKD75	JAL	R9,APPBKP		:CHECK IF NEED TO BACKPRESSURE ISIS :DRE 19-MAR-86
	J	MAKDTA			:GO SEE IF ANYMORE

MAKD80	LHL	R1,DIBUF		:GET DIBUF		:DRE 13-MAY-85
	JAL	R4,GCI			:GET A CHAR FROM DI BUFFER:DRE 13-MAY-85
	LHL	R1,IEDBUF					:DRE 13-MAY-85
	JAL	R4,WCI			:PUT IN IED BUFFER	:DRE 13-MAY-85
	SIS	R5,1						:DRE 13-MAY-85
	JGBS	MAKD80			:IF MORE		:DRE 13-MAY-85
	J	MAKD70			:IF DONE		:DRE 13-MAY-85


::	CWROT - CHECK FOR WINDOW ROTATION
:	EXITS TO MMFRA
CWROT	HS
	LHL	R5,IPORT
	RBT	R5,OBKPR		:RESET OUTPUT BP FLAG
:REMOVE FOLLOWING INSTRUCTIONS  :JS 25-NOV-86
:	TBT	RL,IPR.F	
:	JE	CWR030			:IF NOT INHIBITING PACKET RNR
:	LB	R0,LTPR,R5,		:GET LAST TRANSMITTED P(R)
:	LB	R4,PWRCV,R5,
:	AR	R0,R4
:	NHI	R0,7F
:	TBT	RL,P128.F
:	JNFS	CWR020			:IF MD 128
:	NHI	R0,7
:CWR020	CLB	R0,PPR,R5,		:SEE IF RECV WINDOW CLOSED
:	JN	MMFRA,,			:IF NOT, NO NEED TO SEND RR
:END OF REMOVING :JS 25-NOV-86

:OTHER WINDOW CLOSED, SEND RR TO OPEN IT UP.
CWR030	
	SBT	R5,WINROT		:JS 25-NOV-86
	RBT	R5,WINROX		:DON'T DELAY THE WINDOW ROTATION
					:JS 25-NOV-86
	RBT	R5,FLRNR		:JS 25-NOV-86 RESET RNR FLAG
	J	MMFRA,,			:JS 25-NOV-86

:REMOVE FOLLOWING INSTRUCTIONS  JS 25-NOV-86
:	LIS	R0,1
:	AHM	R0,RRQUE,,
:	RBT	R5,FLRNR 		:RESET RNR FLAG
:	SBT	R5,FLRR			:SEND RR
:	SBT	R5,FLFLOW		:SET FLAG SAYING FLOW CONTROL ENTRY IN CONTROL QUEUE
:	JN	MMFRA,,			:IF FLAG WAS ALREADY SET
:END OF REMOVING :JS 25-NOV-86

:	 QUEUE UP AN RR OR RNR PACKET
:
CWRSND	LHL	R1,IECBUF
	LHI	R0,ZFLOW 		:GET FLOW CONTROL TYPE PACKET
	JAL	R4,WCI
	J	MMFRA,,


::	PROMPT- ACCEPT CALL AND SEND LOGIN PROMPT TO USER.
:
:	INPUT	(LO5)= STATUS BITS INDICATING WHICH TYPE OF MSG TO SEND
:		(LO2)= LOGIN STATUS BYTE
:		IEDBUF, IECBUF SET
:	USES
:	LINK IS R13


PROMPT	LHL	R2,DPORT
	SBT	R2,CSREQ,,		:SO LOGIN STRING WILL BE SENT
	LHL	R1,IPORT
	RBT	R1,EXTLOG		:TAKE OUT OF EXTERNAL LOGIN MODE
	LB	R0,PCKSTE,R1,
	CLHI	R0,PSCALC
	JNFS	PROM35			:IF NOT IN SEND CALL CONF STATE
	LHL	R1,IECBUF
	LHI	R0,ZCLACP		:GET CALL ACCEPTED PACKET TYPE
	JAL	R4,WCI			:PUT ON QUE
PROM35	LHL	R7,IPORT		:INTERNAL PORT #
	LB	RL,IL.MT,R7,		:LOAD LINK #
	TBT	R7,ITICAL		:ITI CALL ??
	JE	PROM50			:IF NOT FROM PAD
	LHL	R8,DPORT		:RELOAD DISPATCHER PORT #
	RBT	R8,ITP.4,,		:RESET FLAG OF REMOTE ECHO
	RBT	R8,CSREQE,,		:ASSUME SUP WANTS ECHO OFF
	LB	R2,LO2			:LOGIN STATUS BYTE
	THI	R2,NLS.EC		:TEST ECHO CONTROL
	JEFS	PROM45			:IF TO BE OFF
	SBT	R8,CSREQE,,		:TO DO LOCAL LOGIN ECHO

:	DURING LOGON DIALOGUE WITH THE USER WE WANT FAST RESPONSE TIME,
:	SO WE TEMPORARILY SET UP THE PAD.  INITIAL VALUES OF THESE
:	PARAMETERS ARE READ, THEN RESTORED LATER IN CONUP.

PROM45	SBT	R7,PADCHD,,		:MARK PAD PARAMETERS AS HAVING BEEN CHANGED :DRE 16-JUN-85
	JN	PROM50			:ALREADY SET, DON'T DO THIS TWICE :DRE 16-JUN-85
	X29MSD(X29.4,X3.2)		:READ CURRENT PAD ECHO
	X29MSD(X29.2,X3.2,0)		:SET PAD NOT TO ECHO DURING LOGIN
	X29MSD(X29.4,X3.3)		:READ CURRENT DATA FORWARDING SIGNAL
	X29MSD(X29.2,X3.3,$A126)	:SET PAD TO FORWARD ON MOST EVERYTHING:DRE 23-FEB-85
	X29MSD(X29.4,X3.4)		:READ CURRENT IDLE TIMER DALAY
	X29MSD(X29.2,X3.4,2)		:SET PAD TO FORWARD IMMEDIATELY	:DRE 23-FEB-85

:	SEND PROMPT TO USER PRECEEDED BY ANYTHING RECEIVED FROM
:	THE OTHER END.
PROM50	LH	R1,DIBUF
	CBCT
	LR	R0,R0
	JEFS	PROM55			:IF NOTHING TO MOVE
	JAL	R7,MVDIIE,,
PROM55	LHL	R5,LO5,,		:GET STATUS BITS	:SCY 4-Apr-85
	JEFS	PROM60			:IF ZERO
	CLHI	R5,SMSGM
	JLEFS	PROM62			:IF IN RANGE OF KNOWN MESSAGES	:HJR  09-26-86
PROM60	TRAP(R5,DD)			:UNKNOWN LOGIN STATUS FROM SUP

prom62	sth	r5,temp5		:save status 
	lhl	r5,locmsg,rl,rl		:get addr of loc hdr	:HJR  09-26-86
	st	r13,temp		:save return addr	:HJR  09-26-86
	la	r13,prom65,,		:set return to pick up msg body	:HJR  09-26-86
	jfs	prom68			:go send header

prom65	lhl	r5,temp5		:get back status
	l	r13,temp		:get back return addr
	LHL	R5,STAMSG-2,R5,R5	:ADDRESS OF MESSAGE FROM TABLE	:HJR  09-26-86
	slls	rl,1			:make RL HW index	:HJR  09-26-86
	lhl	r5,s.rt,r5,rl		:get actual msg offset	:HJR  09-26-86
	srls	rl,1			:restore RL		:HJR  09-26-86

prom68	LB	R6,S.RT,R5,		:GET MESSAGE CHAR COUNT	:HJR  09-26-86
	LHL	R2,IPORT
	SBT	R2,AUXTIM,,
	AIS	R5,1			:ADJUST INDEX

:	CHECK FOR MORE CHARS TO PUT OUT FOR THIS MESSAGE.
:	(R6)= CHARACTER COUNT
PROM70	LR	R7,R6
	JLER	R13			:EXIT
	LHL	R2,IPORT
	LHL	R2,PSTMT,R2,R2		:TRANSMIT PACKET SIZE
	SR	R6,R2
	JLEFS	PROM75			:IF NO MORE THAN ONE FULL PACKET
	LR	R7,R2			:PUT OUT ONE FULL PACKET

:	MAKE A DATA PACKET FOR THIS MESSAGE.
:	(R7)= NO. OF CHARS TO COPY
:	R5-> MESSAGE IN TABLE
PROM75	LHL	R2,DPORT
	STH	R7,RUFCNT,R2,R2
	JAL	R4,COP1SX,,		:UPDATE OUTPUT COUNTS	:LSH 14-JUL-87
	LHL	R1,IEDBUF
	LHI	R0,ZDATA		:DATA PACKET TYPE
	JAL	R4,WCI
	LR	R0,R7			:GET LENGTH
	AIS	R0,1			:ADD LENGTH FOR FLAG BYTE
	WHI
	LIS	R0,0			:FLAG BYTE
	JAL	R4,WCI
PROM80	LB	R0,S.RT,R5,		:GET A BYTE OF MESSAGE
	NHI	R0,7F			:USE 7 BIT CHAR ONLY
	JAL	R4,WCI
	AIS	R5,1
	SIS	R7,1
	JGBS	PROM80
	J	PROM70			:GO CHECK FOR MORE CHARS
   # p