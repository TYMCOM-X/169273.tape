: ******************************************************************
: **                  PROPRIETARY INFORMATION                     **
: **                                                              **
: **  This  source code listing constitutes the proprietary pro-  **
: **  perty of TYMNET.  The recipient, by receiving this program  **
: **  listing, agrees that neither this listing nor the informa-  **
: **  tion disclosed herein nor any part thereof shall be repro-  **
: **  duced or transferred to other documents or used or dis-     **
: **  closed to others for manufacturing or for any other purpose **
: **  except as specifically authorized in writing by TYMNET.     **
: ******************************************************************
: **                   PROGRAM IDENTIFICATION                     **
: **                                                              **
: **  Version Number     : 1.00		 Release Date : 09/12/86  **
: **                                                              **
: **  File Name          : SPYX01.R00                             **
: **                                                              **
: **  File Description   : ISIS SPY.LIB                           **
: **                                                              **
: **  File Abstract      : initial release                        **
: **                                                              **
: ******************************************************************
: **                CONFIGURATION SPECIFICATION                   **
: **                                                              **
: **  Core Memory Requirement:                                    **
: **                                                              **
: **  Basic Code Size:                                            **
: **                                                              **
: **  Additional Code Size per Tymfile Parameter Unit:            **
: **                                                              **
: **  Estimated Code Growth for Next 12 Months:                   **
: **                                                              **
: **  Sample Configurations:                                      **
: **                                                              **
: **  Hardware/Firmware Requirements:                             **
: **                                                              **
: **  Other Software Requirements:                                **
: **                                                              **
: **  Slot Limitations:                                           **
: **                                                              **
: ******************************************************************
: **                   DOCUMENT SPECIFICATION                     **
: **                                                              **
: **  Software Requirements Specification       :                 **
: **                                                              **
: **  Functional Specification (GED)            :                 **
: **                                                              **
: ******************************************************************
: **                      MAINTENANCE HISTORY                     **
: **                                                              **
: **  Ver   Date    By   PIR/NSR         Reason for Change        **
: ** ----- -------- ---  -------- ------------------------------  **
: **                                                              **
: ******************************************************************
: **                 SUBROUTINE IDENTIFICATION                    **
: **                                                              **
: **  Routine Abstract   :                                        **
: **                                                              **
: **  Calling Sequence   :                                        **
: **                                                              **
: **  Parameters         :                                        **
: **                                                              **
: **  Returned Values    :                                        **
: **                                                              **
: **  Side Effects       :                                        **
: **                                                              **
: **  Optional Comments  :                                        **
: **                                                              **
: ******************************************************************
	TITLE	SPY.LIB . . . .Package to gather Execution Statistics	
	SUBTTL	SPY....Definitions			SPYX01.R00


:	SPY - ISIS execution statistics package
:		Version of 6 November 1981



:		The SPY package is intended to provide a tool to gather
:	statistics on the execution of a slot, invokable under the "?STAT"
:	command.

:		?STAT commands:
:	Quit	exit back to DDT.
:	EXIt	exit machine.
:	SP.?	Help
:	SP.B	Specify bin-size
:	SP.C	Check status
:	SP.D	Display parameters
:	SP.F	Full Histogram (no gaps)
:	SP.H	Halt
:	SP.I	Initialize
:	SP.L	Execution Profile (Listing)
:	SP.N	specify Number of bins (decimal)
:	SP.P	Execution Profile (Histogram)
:	SP.R	specify Range
:	SP.S	specify Start-address
:	SP.T	Truncated Histogram (multiple 0's suppressed)


	SEG	A.CODE
	RA	00			:Insure correct radix

:	Define default values of:
:	SP.SIZ -	bin size
:	SP.FAD -	starting address
:	SP.RNG -	range of addresses
:	SP.NBIN -	number of bins
	 IF	1-\SPYSVC
SPYSVC	EQ	0			:default is no new SPY SVC
	 EI	:1-\SPYSVC
	GL	SPYSVC
	 IF	1-\SP.SIZ
SP.SIZ	EQ	80			:default bin size
	 EI	:1-\SP.SIZ
	 IF	1-\SP.FAD
SP.FAD	EQ	A.CODE^10		:default lowest address
	 EI	:1-\SP.FAD
SP.FAD	EQ	@2&SP.FAD		:force even
	 IF	1-\SP.RNG
SP.RNG	EQ	(-SP.SIZ)&.+SP.SIZ+1-SP.FAD :Default range of measurement
	 EI	:1-SP.RNG
	 IF	1-\SP.NBIN
SP.NBIN	EQ	SP.RNG/SP.SIZ		:Default number of bins
	 EI	:1-SP.NBIN

	GL	SP.SIZ,SP.NBIN,SP.FAD,SP.RNG
	 IF	1-SP.NBIN
	REMARK	%>>ERROR - less than 1 SPY bin specified, default to 100x.%
SP.NBIN	EQ	100
	 EI	:1-SP.NBIN

	MO	.,SPY

	GL	DSTART,DS.NUM

OUT	EQ	0B			:output SVC
KIO	EQ	0D			:KIO SVC

:	MACRO to print a number (in R0) on terminal
:	ARG	USE
:	1	Number of Digits
:	2	Any sum of:  B., Z., one of [ D., H., or O.]
B.	EQ	20			:Blank Fill
Z.	EQ	40			:Zero fill
D.	EQ	0A			:Decimal
O.	EQ	08			:Octal
H.	EQ	10			:Hexidecimal
	KILL	N.PRIN			:Insure no conflict
N.PRIN	MACRO(ND,M2)[
	LHI	R1,(ND*100)!M2
	SVC	KIO,$A 10
]
	SUBTTL	SPY....Data

:		DATA AREA

	SEG	A.DATA

:	NOTE...Maintain order of definitions!!

PARAM	WS	0			:SPY-SVC parameter block
TAD	WC	SP.DAT			:SPY table address
FAD	WC	SP.FAD			:SPY first address
RANGE	WC	SP.RNG			:Save range here
NBINS	HC	SP.NBIN			:save number of bins here
SP.FLG	HC	1			:Activity flag:
:					<0	Done
:					=0	in progress
:					>0	never run

SCALE	HS	1			:save scale-factor here
HISTO	HC	-1			:Histogram flag- <0=truncate, else full
BSIZE	HC	SP.SIZ			:save bin size here

SP.DAT	HS	SP.NBIN			:Data statistics

SP.BSZ	EQ	$A 64			:text buffer length
SP.CNT	HC	0			:text buffer count
SP.BUF	BS	SP.BSZ+2		:text buffer

	SEG	A.CODE
	SUBTTL	SPY....Command Handlers:  "SP.?" (HELP)

	DS.CMD(SP.?,HELP)		:Print Command List

HELP	SVC	K.OUT,BANNER
	SVC	K.OUT,HELPM1
	SVC	K.OUT,HELPM2
	SVC	K.OUT,HELPM3
	SVC	K.OUT,HELPM4
	SVC	K.OUT,HELPM5
	SVC	K.OUT,HELPM6
	SVC	K.OUT,HELPM7
	SVC	K.OUT,HELPM8
	SVC	K.OUT,HELPM9
	SVC	K.OUT,HELPMA
	SVC	K.OUT,HELPMB
	SVC	K.OUT,HELPMC
	SVC	K.OUT,HELPMD
	SVC	K.OUT,HELPME
	SVC	K.OUT,HELPMF
	SVC	K.OUT,HELPMG
	J	DSTART,,

BANNER	SC	/"8D"8A"8ASPY -- ISIS slot execution statistics"8A/
HELPM1	SC	/"8D"8AValid commands are:/
HELPM2	SC	/"8D"8AEXIT or EXI - log off/
HELPM3	SC	/"8D"8AQUIT or Q   - exit SPY (back to DDT)/
HELPM4	SC	/"8D"8ASP.?        - print this list/
HELPM5	SC	/"8D"8ASP.I        - Initialize/
HELPM6	SC	/"8D"8ASP.H        - Halt/
HELPM7	SC	/"8D"8ASP.C        - Check status/
HELPM8	SC	/"8D"8ASP.P        - execution Profile (Histogram)/
HELPM9	SC	/"8D"8ASP.F        - full histogram (no gaps)/
HELPMA	SC	/"8D"8ASP.T        - truncated histogram (multiple 0's ignored)/
HELPMB	SC	/"8D"8ASP.L        - execution Profile (Listing)/
HELPMC	SC	/"8D"8ASP.D        - display parameters/
HELPMD	SC	/"8D"8ASP.N        - specify number of bins/
HELPME	SC	/"8D"8ASP.R        - specify new range/
HELPMF	SC	/"8D"8ASP.S        - specify new start address/
HELPMG	SC	/"8D"8ASP.B        - specify new bin size/
	SUBTTL	SPY....Initialize

	DS.CMD(SP.I,SP.INI)		:Initialize
	DS.CMD(SP.H,HALT)		:Halt
	DS.CMD(SP.C,CHECK)		:Check

SP.INI	LIS	R2,0
	LHI	R1,(SP.NBIN-1)*2	:Set counter
SP.IN1	STH	R2,SP.DAT,R1,
	SIS	R1,2
	JGEBS	SP.IN1			:Zero Storage
	 IF	SPYSVC
	LA	R0,PARAM,,		:set pointer to parameters
	SVC	SYS,$A 34		:connect it
	 LR	R0,R0;	 JFS	SP.IN2			:failure
	STH	R2,SP.FLG,,		:success...set up flag
	SVC	OUT,INITM3		:"SUCCESS..."
	J	DSTART,,		:exit

SP.IN2	JGEFS	SP.IN3			:SVC failed...tell why
	SVC	OUT,INITM1		:"Bad arg."
	J	DISP			:show parameters so they can be verified

SP.IN3	SVC	OUT,INITM2		:"failed, SPY belongs to slot "
	N.PRIN(2,H.)
	J	DSTART,,

INITM1	SC	/"8D"8AFAILURE -- BAD Argument...recheck addresses/
INITM2	SC	/"8D"8AFAILURE -- SPY in use by slot /
INITM3	SC	/"8D"8ASUCCESS -- SPY now active/
	 ELSE	:SPYSVC
	STH	R2,SP.FLG,,		:set flag to in-progress
	SVC	OUT,INITM1
	LHL	R0,NBINS,,
	N.PRIN(6,H.)
	L	R0,FAD,,
	N.PRIN(6,H.!B.)
	L	R0,FAD,,
	A	R0,RANGE,,		:compute last address
	N.PRIN(6,H.!B.)
	SVC	OUT,INITM2
	LA	R0,SP.DAT,,
	N.PRIN(6,H.)
	SVC	OUT,CR2LF
	J	DSTART,,

INITM1	SC	/"8D"8A...Now type"3A"8D"8AQ"8D"8AM/
INITM2	SC	/"8D"8AV/
	 EI	:SPYSVC



HALT	HS	0
	 IF	SPYSVC
	LH	R0,SP.FLG,,
	JLFS	CHECK			:Just skip unless running
	LIS	R0,0			:turn off, set halted
	SVC	SYS,$A 34		:turn it off
	 NOP	0			:don't care about skip returns
	TS	SP.FLG,,		:set halted
	 EI	:SPYSVC



CHECK	SVC	OUT,BANNER		:Display banner
CHECK1	LH	R7,SP.FLG,,		:check state
	JLEFS	CHECK2			:used or in use
	SVC	OUT,CKM1		:"NOT USED"
	J	DSTART,,		:and exit

CHECK2	JLFS	CHECK3			:spy in progress
	SVC	OUT,CKM2		:"SPY in progress"
	J	DSTART,,

CHECK3	SVC	OUT,CKM3		"SPY completed"
	J	DSTART,,

CKM1	SC	/"8D"8ASPY Not Used./
CKM2	SC	/"8D"8ASPY in progress./
CKM3	SC	/"8D"8ASPY completed./
	SUBTTL	SPY...Update/Display parameters

	DS.CMD(SP.R,RAN)		:Range
	DS.CMD(SP.S,STA)		:Start-address
	DS.CMD(SP.N,NBI)		:Number of bins
	DS.CMD(SP.B,BSI)		:Bin size
	DS.CMD(SP.D,DISP)		:Display


:	Get new number of bins
NBI	LHI	R4,$A 10		:set decimal radix
	JAL	R5,DS.NUM,,		:get number
	LR	R0,R0			:check it
	JGFS	NBI1			:ok...accept it
	SVC	OUT,NBIM1		:"bad number of bins"
	J	DISP			:display current values
NBI1	CLHI	R0,SP.NBIN		:range check
	JLEFS	NBI2
	LHI	R0,SP.NBIN		:too big...set max
NBI2	STH	R0,NBINS,,		:set new number of bins to use
	L	R0,RANGE,,		:now adjust range value
	J	RAN1			:exit range & bin-size adjustment

NBIM1	SC	/"8D"8AERROR - bad number of bins/
:	Get new bin-size
BSI	LHI	R4,10			:set hex radix
	JAL	R5,DS.NUM,,		:get number
	NHI	R0,-2			:force to multiple of 2 bytes
	LR	R1,R0			:copy value
	JG	RAN2			:ok...accept it
	SVC	OUT,BSIM1		:"bad bin size"
	J	DISP			:display current values

BSIM1	SC	/"8D"8AERROR - bad bin size/
:	Get new range
RAN	LHI	R4,10			:set hex radix
	JAL	R5,DS.NUM,,		:get number
	LR	R0,R0			:check it
	JGFS	RAN1			:ok...accept it
	SVC	OUT,RANM1		:"bad range"
	J	DISP			:display current values
RAN1	DH	R0,NBINS,,		:adjust values
	NHI	R1,-2			:force bin-size even
	JGEFS	RAN2			:skip if non-zero
	LIS	R1,2			:else force to minimum 2-byte bin
RAN2	STH	R1,BSIZE,,		:set new bin-size
	MH	R1,NBINS,,		:compute new range
	ST	R1,RANGE,,		:set new range
	J	DISP			:exit via display

RANM1	SC	/"8D"8AERROR - bad range/
:	Get new start address
STA	LHI	R4,10			:set hex radix
	JAL	R5,DS.NUM,,		:get number
	NHI	R0,-2			:force even
	ST	R0,FAD,,		:set new start address
					:exit via display

DISP	SVC	OUT,DISPM1		:"//Spy discriptor:/start ="
	L	R0,FAD,,
	N.PRIN(6,B.!H.)			:6 hex digits
	SVC	OUT,DISPM2		:"x/range ="
	L	R0,RANGE,,
	N.PRIN(9,B.!H.)			:9 hex digits
	SVC	OUT,DISPM3		:"x (end addr =)
	L	R0,FAD,,
	A	R0,RANGE,,
	N.PRIN(5,H.)			:up to 5 hex digits
	SVC	OUT,DISPM4		:"x/Bin size ="
	LHL	R0,BSIZE,,
	N.PRIN(9,B.!H.)			:9 hex digits
	SVC	OUT,DISPM5		:"x/No. bins ="
	LHL	R0,NBINS,,
	N.PRIN(9,D.)
	J	DSTART,,		:and exit

DISPM1	SC	/"8D"8ASPY descriptor"3A"8A"8D"8AStart Addr. =/
DISPM2	SC	/x"8D"8ARange =   /
DISPM3	SC	/x (End addr. = /
DISPM4	SC	/x)"8D"8ABin size =/
DISPM5	SC	/x"8D"8ANo. Bins = /
	SUBTTL	SPY....SP.L -- Execution profiles

	DS.CMD(SP.L,LIST)		:List
	DS.CMD(SP.F,FULL)		:Full Profile
	DS.CMD(SP.T,TRUNC)		:Truncated Profile
	DS.CMD(SP.P,PROF)		:Profile

LIST	JAL	R4,HEAD			:print header
	L	R2,FAD,,		:first address
	LIS	R5,0			:index

LIST1	SVC	OUT,CRLF		:new line
	LR	R0,R2			:copy address
	N.PRIN(5,H.)			:print address

LIST2	LHL	R0,SP.DAT,R5,R5		:get an entry
	N.PRIN(6,D.!B.)			:print it
	AH	R2,BSIZE,,		:next address
	AIS	R5,1			:advance index
	CLH	R5,NBINS,,		:done?
	JGEFS	LIST3			:yes
	THI	R5,7			:time for new line?
	JN	LIST2			:no
	J	LIST1			:yes

LIST3	SVC	OUT,CRLF		:terminate with blank line
	J	DSTART,,



:	Print heading for LIST, PROF
:		sum events, find max event
:	R2 -	max event size
:	R4 -	Link register
HEAD	SVC	OUT,HEADM1		:"//execution memory usage/("
	LIS	R0,0			:sum events
	LIS	R2,0			:search for maximum value
	LHL	R3,NBINS,,
HEAD1	LHL	R1,SP.DAT-2,R3,R3	:get an entry
	AR	R0,R1			:sum events
	CR	R1,R2
	JLEFS	HEAD2			:less
	LR	R2,R1			:save new max
HEAD2	SIS	R3,1
	JGBS	HEAD1			:continue search
	N.PRIN(8,D.)			:print number of events
	SVC	OUT,HEADM2		:" events//addr.  use"
	JR	R4			:and return

HEADM1	SC	/"8A"8D"8A EXECUTION MEMORY USAGE"8A"8D  (/
HEADM2	SC	/ events)"8A"8D"8Aaddr.   use/


FULL	LIS	R0,0			:set full histogram
	STH	R0,HISTO,,
	J	DSTART,,


TRUNC	TS	HISTO,,			:set truncated histogram
	J	DSTART,,


PROF	JAL	R4,HEAD			:print header, find max.
	LHI	R0,0A0AA		:" *"
	LHI	R1,SP.BSZ-2
PROF1	STB	R0,SP.BUF+1,R1,
	SIS	R1,1
	JGBS	PROF1			:fill line with "*"
	STH	R0,SP.BUF,,		:init output string
	AHI	R2,SP.BSZ
	LHI	R0,SP.BSZ+1
	DHR	R2,R0			:Compute the scale factor
	AIS	R3,9
	LIS	R0,$A 10		:make pretty
	DHR	R3,R0
	MHR	R0,R4
	STH	R0,SCALE,,
	SVC	OUT,PROFM1		:" (each '*' is "
	N.PRIN(6,D.)			:add detail about scaling
	SVC	OUT,PROFM2		:" events)"

	L	R0,FAD,,		:first address
	LIS	R5,0			:index
	LCS	R6,1			:blank-line flag

PROF4	LHL	R2,SP.DAT,R5,R5		:get an entry
	JN	PROF5			:skip if not 0
	LR	R6,R6			:check flag
	JL	PROF7			:skip if multiple 0's
	LHL	R6,SP.DAT+2,R5,R5	:single 0-channels print empty
	JNFS	PROF5
	LH	R6,HISTO,,		:check if full or truncated
	JGEFS	PROF5			:full...print it
	SVC	OUT,CRLF		:0's print as 1 blank line
	J	PROF7			:and skip

PROF5	LR	R6,R2			:non-zero (or 1 0)...clear blank-flag
	SVC	OUT,CRLF		:new line
	N.PRIN(5,H.)			:Channel address
	LR	R2,R2			:Check if empty
	JE	PROF7			:yes...abort
	DH	R2,SCALE,,		:else scale the number
	CHI	R3,SP.BSZ		:range check
	JLEFS	PROF6
	LHI	R3,SP.BSZ
PROF6	AIS	R3,2			:bias it
	STH	R3,SP.CNT,,		:set count for histogram
	SVC	OUT,SP.CNT+1,,		:...then print it

PROF7	AH	R0,BSIZE,,		:next address
	AIS	R5,1			:advance index
	CLH	R5,NBINS,,		:done?
	JL	PROF4			:no
	LR	R6,R6			:check flag
	JL	DSTART,,			:last line was blank
	SVC	OUT,CRLF		:else terminate with blank line
	J	DSTART,,

PROFM1	SC	/ (each '*' is /
PROFM2	SC	/ events)/


CRLF	SC	/"8D"8A/
CR2LF	SC	/"8A"8D"8A/

	EM	:SPY
  