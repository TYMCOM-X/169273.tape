        IF      \BX.25; ELSE;BX25 EQ 0  :DEFAULT FOR BX.25 IS NO; EI
        IF      BX.25
        IF \NOTIM; ELSE;
PATCH(841127,2330,JMC,PA0PTR,,((NLINKS*2)+4))
FINATV  BS NLINKS               :RESPONSE RR TIMEOUT COUNTER
FINATT  BS NLINKS               :RESPONSE RR TIME INTERVAL
        ORG     FINATT
        RE      NLINKS
        BC      (CVT1TO/$A 10)-1 :T2 < T1 DEFAULT
        ER
        ORG     FINATT+NLINKS
IFRRCV  BS      4               :IFRAME RECV'D BIT ARRAY
CONPATCH(FIDTIM+0A,,092)
:: ->The position of FID010 is changed to gain space, and eliminate unused ins.
        KILL    FID010,FID020,FID030
        LHI     RL,NLINKS
FID010  SIS     RL,1            :DECREMENT LINK LOOP COUNTER
        JL      TORET
:
:       THE TEST FOR INFO XFER STATE MOVED TO HERE TO 
:       MAKE CLOCK UPDATES ONLY IN THAT STATE
:
:       *--> fOLLOWING REMOVED FOR BX.25, BECAUSE IT'S HDLC LAPB ONLY
:               - HERE ONLY BECAUSE IT WAS IN ORIGINAL FIDTIM ROUTINE
:       LIS     R5,SECINF       :SEE IF SECONDARY IN INFO XFER
:       CLB     R5,SECST,RL
:       JNBS    FID010  :NO, THEN DON'T BOTHER
        LIS     R5,PINFO        :SEE IF PRIMARY IN INFO XFER
        CLB     R5,PRIST,RL
FID011  JNBS    FID010          :NO, BYPASS - ALSO INTERMEDIATE JS FOR NE
        TBT     RL,XSBUSY       :SEE IF OTHER SIDE SENT RNR LAST
        JNBS    FID010          :IF SO, THEN BYPASS
        LB      R5,XSSTAT,RL    :SEE IF ANYTHING QUEUED UP
        JNBS    FID011          :IF SO, DON'T SEND RR
        LB      R5,NXTSEC,RL    :NEXT SECTOR TO OUTPUT
        LB      R2,SCGBIA,RL,   :SECTOR GROUP BIAS THIS LINK
        TBT     R5,SECBLT,R2    :SEE IF READY TO GO
        JNBS    FID011          :YES, THEN BYPASS
:
:       EVERYTHING SET TO CHECK TIMERS - INFO XFER, BUT NO QUEUED DATA
:
:                       T2 - RESPONSE DELAY TIMER
:
:       This is the equivalent of the ILRR option in TYMFILE.
:       Its counter, FINATT, must be set via DDT until I make up XOM patches.
:
FID012  LB      R6,FINATT,RL    :GET MAX RECEIVE ACTIVITY TIMER
        JEFS    FID020
        TBT     RL,IFRRCV       :SEE IF ACKABLE FRM RECVD, RESET IF SO
        JNFS    FID016          :BOTH CLOCKS ARE REST ON FRAME RECVD
        TBT     RL,FRMTMT               :SEE IF WE SENT ANYTHING
        JNFS    FID016                  :YES, RESET TIMER
        JAL     R1,FID030
FID015  RBT     RL,SNTRRC               :TIMER=0, SET ACCORDING TO RR TYPE
FID016  STB     R6,FINATV,RL 
:
:                       T3 - IDLE LINK RESPONSE TIMER
:
:       The equivalent of ILRRC option in TYMFILE, but since ILRR
:       also sets this counter, DO NOT specify ILRR, as it will only
:       result in ILRRC activity. The counter for T2 (ILRR) is set via DDT.
:
FID020   LB     R6,FINACT,RL 
        JEFS    FID026                  :NO ILRRC, GO RESET TMT
        TBT     RL,FRMRCV               :TEST LOGICAL OR OF TMT + RCV
        JNFS    FID026                  :LINK ACTIVE, RESET TIMER
:       TBT     RL,FRMTMT               :REMOVED FROM T3 LOGIC - ONLY RECV
:       JNFS    FID026                  :ACTIVITY  CHECKED FOR OUTAGE
FID024  JAL     R1,FID032               :NOT ACTIVE, THEN DECREMENT TIMER
FID025  SBT     RL,SNTRRC               :IF TIMER=0, SET COMMAND BIT
FIDR1X  EQ      .-FID025                :PROVIDE SKIP RETURN INDEX VALUE
FID026  STB     R6,FINACV,RL            :AND SET NEW TIMER VALUE
FID028  RBT     RL,FRMTMT               :BE SURE IT'S RESET
FID029  RBT     RL,FRMRCV               :BE SURE IT'S RESET
        RBT     RL,IFRRCV               :BE SURE IT'S RESET
        J       FID010
FID030  LB      R2,FINATV,RL 
        LIS     R5,XMSRR                :SEND RESPONSE RR
        JFS     FID034
FID032  LB      R2,FINACV,RL 
        LIS     R5,XMSRRC               :SEND COMMAND RR
::      UPDATE ROUTINE PORTION HERE IS FOR BOTH CLOCKS.
FID034  SIS     R2,1
        JLEFS   FID050                  :CLOCK EXPIRED
        LR      R6,R2                   :NOT EXPIRED, UPDATE COUNT FIELD
        J       FIDR1X,R1               :BUT BYPASS SNTRRC SBT/RBT
FID050  STB     R5,XSSTAT,RL    :PUT SELECTED XMIT RR IN STATE
        JR      R1      :AND GO BACK TO CALLER
CONPATCH(LNK050+24,,08)
        SBT     RL,FRMTMT       :ONLY TIMER RTNS TURN THIS OFF
        SBT     RL,FRMRCV       :ONLY TIMER RTNS TURN THIS OFF
CONPATCH(RIF035+10,,6)
        JAL     R6,PRF106,,        :GO TO PATCH ROUTINE
CONPATCH(PA1PTR,,0C)
PRF106  SBT     RL,IFRRCV,,     :THIS IS FOR T2 TIMER- ONLY IFRAMES ACK'D
        J       FTRCIN,,        :REPEAT OVERLAID INST.
CONPATCH(SSBI10+2A,,8)
        SBT     RL,FRMRCV       :CHANGE TO FORCE TIMERS TO RESET
        SBT     RL,FRMTMT       :CHANGE TO FORCE TIMERS TO RESET
:                               - SINCE SABM JUST RECEIVED, LINK IS ACTIVE
:               ADD XOM MODIFY, QUERY PATCH FILES HERE
ENDPATCH(Allow simultaneous use of ILRR and ILRRC to provide timers T2 and T3)
        EI      NOTIM
        IF      \NOPSTE; ELSE;
PATCH(850524,1214,JMC,RTELN1,,010)
        JAL R2,RTEPST,,         :CONDITIONALLY GET PACKET STATE
        LH      R2,LNGTBL,R1,R1 :GET HANDLER ADDRESS
        J       LNGTBL,R2       :CALL IT
CONPATCH(RTEDEC,,010)
        JAL     R2,RTEPST,,     :CONDITIONALLY GET PACKET STATE
        LH      R2,RTDFER,R1,R1 :GET HANDLER ADDRESS
        J       RTDFER,R2       :CALL IT
CONPATCH(RTD180+20,,6)
        J       PRT182,,        :SET CURRENT STATE FROM LINK'S STATE
        IF      PVC
CONPATCH(PA1PTR,,03A)
        ELSE
CONPATCH(PA1PTR,,032)
        EI      PVC
PRT182  JAL     R2,RTEPST       :GET STATE OF LCN OR LINK
        STB     R1,PCKSTE,R7,   :SET LCN STATE TO CURRENT OR LINK VALUE
        LR      R1,R7           :RESTORE R1 AFTER RTEPST MOD
        LH      R4,ID.MT,R1,R1  :REPEAT OVERLAID INST.
        J       RTD180+26,,     :RETURN FROM PATCH
RTEPST  LHL     R7,IPORT,,      :PREP R7 TO IPORT IN ALL CASES
        LB      R1,PCKSTE,RL,   :IF LINK NOT IN PREADY,
        CLHI    R1,PREADY       :TEST LINK'S STATE
        JNR     R2              :NOT = PREADY MUST BE IN TRANSITION
        LB      R1,PCKSTE,R7,   := PREADY, SO USE LCN'S STATE
        IF      PVC
RTEP04  CLHI    R1,PWPVCR       :IF IN PVC BUILD STATE, SET TO CALL SETUP
        JNR     R2              :ELSE USE IPORT STATE
        LIS     R1,PWCALC       :SET TO WAITING CALL CONFIRM
        EI      PVC
        JR      R2              :AND EXIT
ENDPATCH(make responses on inactive LCN's according to LINK's STATE)
        EI      NOPSTE
        if \norter; else;
PATCH(850320,1630,JMC,RTD490-08,,08)
        JN      RTEDEC          :NOT A CLEAR, GO TO ERROR PACKET HANDLER
:  *----> Note: this is only way to fit patch in available space. It 
:         depends on the equality of r0, r4 = 13 (clear)
        AIS     R0,4            :SET UP FOR CLEAR CONFIRMATION
        JFS     RTD495          :AND SEND IT
CONPATCH(RTDFER,,02)
        HC      RTERSC-RTDFER   :0      PACKET LEVEL READY NOW CALLS RESET
CONPATCH(RTDFER+16,,2)
        HC      SNDRST-RTDFER   :B      SEND RESTART
CONPATCH(RTDFER+1A,,2)
        HC      RTEDS1-RTDFER   :D      SEND RESTART CONF
CONPATCH(RTEFCR+08,,02)
        JNFS    RTERSC          :RESET (RATHER THAN CLEAR)
CONPATCH(RTERSC,,0C)
        LB      R1,PACKET       :CHANGE PACKET TYPE TO RESPONSE EQUIVALENT
        AIS     R1,4            :FITS THIS WITHIN 3 OVERLAID INSTRUCTIONS
        CLHI    R1,YCLRC
        JEBS    SNDCLR
CONPATCH(RTEDS1+2,,6)
        JAL     R9,PRTDS1,,        :DO BUFFER CLEAN UP PROCESSING
CONPATCH(PA1PTR,,0C)
PRTDS1  AHM     R0,RTDDSC,RL,RL         :REPEAT OVERLAID INST.
        J       CNR020+0E,,       :CALL BUFFER CLEAN UP ROUTINE
CONPATCH(LNGTBL,,2)
        HC      RTEDS1-LNGTBL   :0      PREADY - IGNORE
CONPATCH(LNGTBL+8,,4)
        HC      RTEDS1-LNGTBL   :4      SEND CLEAR REQUEST - IGNORE
        HC      RTEDS1-LNGTBL   :5      WAIT CLEAR CONFIRM - IGNORE
CONPATCH(LNGTBL+16,,4)
        HC      RTEDS1-LNGTBL   :B      SEND RESTART - IGNORE
        HC      RTEDS1-LNGTBL   :C      WAIT RESTART CONFIRM - IGNORE
CONPATCH(RTESHT+8,,0C)
        LHI     R13,DIA038      :SHORT PACKET DIAGNOSTIC CODE
        JFS     RTEILL+4        :DO SAME AS FOR ILLEGAL PACKET
RTEU5P  LHI     R13,DIA040      :UNASSIGNED CHANNEL DIAGNOSTIC
        JFS     RTEILL+4
CONPATCH(RTEUNA,,2)
        JBS     RTEU5P          :DO THIS IN RTESHT AREA
ENDPATCH(CORRECT ERROR PACKET HANDLING FOR BX.25)
        ei      norter
        IF      \NORTRS; ELSE;
PATCH(850914,1145,JMC,ACCEPT,,2)
        HC      $2 0111000000000000     :SET ZCLACP BIT FOR PREADY,
:                                       :I.E., DON'T ALLOW CALL ACCCEPT THEN
        IF      PVC; ELSE
:                               ALLOW REJECT PACKET FOR PVC
CONPATCH(ACCEPT+0E,,2)
        HC      $2 0001010110100000     :SET REJECT PACKET NOT SUBSCRIBED
        EI      PVC
CONPATCH(TRI010-4,,4)
        J       RTEUNA          :HANDLE AS UNASSIGNED CHANNEL
CONPATCH(TRI010+2,,4)
        JE      TRI020          :HANDLE LENGTH LATER
CONPATCH(TRI010+18,,6)
        JAL     R4,PTRLNT,,     :DO LENGTH TEST AFTER LAST CHAR
CONPATCH(TRI020+28,,2)
        JEFS    TRI032          :ADJUST FOR HANGAL CALL
CONPATCH(TRI020+38,,22)
TRI032  LIS     R0,PSRSTC       :SET SET STATE BEFORE HANGAL CALL
        STB     R0,PCKSTE,RL,
        JAL     R9,HANGAL,,     :GO DO RESTART SET UP
        LR      R1,RL           :REPEAT INSTRUCTIONS TO SHIFT DOWNWARD BY 8
        SLLS    R1,2
        AHI     R1,IECBIA
        LHI     R0,ZRSTRC
        JAL     R4,WCI
        J       RTD020
CONPATCH(TRC015+0E,,4)
        LHI     R13,DIA019      :CHANGE TO CORRECT DIAG CODE
CONPATCH(SNDRST+1C,,14)
        JEFS    SNDRS5          :CHANGE FOR STATE SETTING B4 HANGAL
SNDRS3  LIS     R5,0            :INDICATE LOCAL HEADER
SNDRS5  LHI     R0,PSRSTI       :SET STATE PRIOR TO HANGAL CALL
        STB     R0,PCKSTE,RL,   :SET PACKET STATE FOR ENTIRE LINK
        JAL     R9,HANGAL,,     :AND HANG EVERYTHING AGAIN
CONPATCH(TRC060+2,,6)
        JAL     R9,PTRC60,,     :GO DO STATE SETTING THEN HANGAL
CONPATCH(IDONE+096,,8)
        JAL     R4,PIDNST,,     :SET LCN STATE FROM LINK'S STATE
        JFS     .+4             :GO TO NEXT INSTRUCTION
CONPATCH(PA1PTR,,2A)
PIDNST  LB      R0,PCKSTE,RL,   :SET LCN STATE FROM PACKET STATE
        STB     R0,PCKSTE,R1,   :R1 = IPORT CONTENTS
        JR      R4              :RETURN VIA LINK
PTRC60  STB     R0,PCKSTE,RL,   :REPEAT OVERLAID INSTRUCTION
        J       HANGAL,,        :HANGAL WILL RETURN TO TRC060
PTRLNT  STB     R0,PSDIAG+1,RL,RL :REPEAT OVERLAID INSTRUCTION
        LR      R6,R6           :SEE IF ANY MORE CHARS LEFT
        JG      RTELNG,,        :YES THEN TOO LONG
        JR      R4              :RETURN VIA LINK
ENDPATCH(BX.25 Restart States set for responses required to error packets)
PATCH(851203,1303,JMC,TIN020-4,,2)
        JFS     TIN020          :GO ON TO QUEUE UP INTC
ENDPATCH(Prevent premature exit b4 send INTC on Turkey Calls)
        EI      NORTRS
PATCH(841205,1745,JMC,PRIDEC,,STAT.L)
:
:       CREATE INDEX NAMES FOR EACH TENTRY VECTOR 
:
SBCTE   HC      (LPBKER-PRIDEC) :ILLEGAL RESPONSE, SABM OR SABME RECV.
DISCTE   HC      (LPBKER-PRIDEC) :ILLEGAL RESPONSE, DISC RECV
UACTE   HC      (FMDSCD-PRIDEC) :UA RECV, BUT NO ARMING IN PROG
FRCTE   HC      (FMDSCD-PRIDEC) :FRMR/CMDR RECV, NOT ARMED
RRCTE   HC      (SRRNAR-PRIDEC) :RR RECV, SEND DM IF P=1, LAPB
RNRCTE   HC      (SRRNAR-PRIDEC) :RNR RECV, SEND DM IF P=1, LAPB
REJCTE   HC      (SRRNAR-PRIDEC) :REJ RECV, SEND DM IF P=1, LAPB
ILLCTE   HC      (FMDSCD-PRIDEC) :ILLEGAL CTL FIELD
DMCTE   HC      (PLPER1-PRIDEC) :DM RECVD
:
:       NOW CALCULATE INDICES FROM BEGINNING OF TABLE FOR INDEX LABELS
:
SBCFX   EQ      SBCTE-PRIDEC
DISCFX  EQ      DISCTE-PRIDEC
UACFX   EQ      UACTE-PRIDEC
FRCFX   EQ      FRCTE-PRIDEC
RRCFX   EQ      RRCTE-PRIDEC
RNRCFX   EQ      RNRCTE-PRIDEC
REJCFX   EQ      REJCTE-PRIDEC
ILLCFX   EQ      ILLCTE-PRIDEC
DMCFX    EQ      DMCTE-PRIDEC
        IF      HDLC&(LAPB!LAP)
CONPATCH(RFG160+28,,0A)
        SRLS    R5,1            :REMOVE I-FRAME BIT
        LB      R5,EXPCMT,R5,   :GET INDEX FROM EXPANDED CMD TBL
        JFS     .+2             :NHI ELIMINATED
        EI      HDLC&(LAPB!LAP)
        IF      LAP&BSC
CONPATCH(RFG200-22,,0A)
        SRHLS   R5,1            :GET RID OF I-FRAME BIT
        LB      R5,EXPCMT,R5,   :GET INDEX FROM EXPANDED TABLE
        JFS     .+4             :NHI ELIMINATED 
        EI      LAP&BSC
        IF      LAPB!LAP
CONPATCH(XPR080+20,,0A)
        SRLS    R5,1            :GET RID OF I-FRAME BIT
        LB      R5,EXPCMT,R5,   :GET INDEX FROM EXPANDED TABLE
        JFS     .+2             :NHI ELIMINATED 
        EI      LAPB!LAP
NRMAX   EQ      $0 8            :MAX N(R) SHIFTED INTO HI-ORDER BITS IN TBL
CMTMXL  EQ      (($A255^-1)+1)             :ALL POSSIBLE VALUES IN BYTE/2
CONPATCH(PA0PTR,,CMTMXL)
EXPCMT  BS      CMTMXL          :TABLE MAX SIZE IS 255/2 
        ORG     EXPCMT
        RE      CMTMXL
        BC      ILLCFX          :ILLEGAL CTL FIELD INDEX IS DEFAULT
        ER
CMTBLN  EQ      .-EXPCMT        :CMD TBL SIZE
NRQQ    EQ      0               :N(R) RECURSION STARTS AT 0
        RE      NRMAX
        ORG     EXPCMT+(NRQQ^4+(CT.RR^-1))
        BC      RRCFX
        ORG     EXPCMT+(NRQQ^4+(CT.RNR^-1))
        BC      RNRCFX
        ORG     EXPCMT+(NRQQ^4+(CT.REJ^-1))
        BC      REJCFX
NRQQ    EQ      NRQQ+1
        ER
        ORG     EXPCMT+(CT.SR^-1)
        BC      DMCFX           :SARM IN LAP = DM IN LAPB
        ORG     EXPCMT+(CT.SB^-1)
        BC      SBCFX
        ORG     EXPCMT+(CT.DIS^-1)
        BC      DISCFX
        ORG     EXPCMT+(CT.UA^-1)
        BC      UACFX
        ORG     EXPCMT+(CT.SBE^-1)
        BC      SBCFX
        ORG     EXPCMT+(CT.FR^-1)
        BC      FRCFX
:
::      DO IT AGAIN W/POLL BIT
:
:       - while the poll bit could be ANDed off, that would lead to not 
:       - checking those erroneous configurations in mod 128 with it on.
:
NRQQ    EQ      0               :N(R) RECURSION STARTS AT 0
        RE      NRMAX
        ORG     EXPCMT+(NRQQ^4+(CT.1PF^-1)+(CT.RR^-1))
        BC      RRCFX
        ORG     EXPCMT+(NRQQ^4+(CT.1PF^-1)+(CT.RNR^-1))
        BC      RNRCFX
        ORG     EXPCMT+(NRQQ^4+(CT.1PF^-1)+(CT.REJ^-1))
        BC      REJCFX
NRQQ    EQ      NRQQ+1
        ER
        ORG     EXPCMT+(CT.1PF^-1)+(CT.SR^-1)
        BC      DMCFX           :SARM IN LAP = DM IN LAPB
        ORG     EXPCMT+(CT.1PF^-1)+(CT.SB^-1)
        BC      SBCFX
        ORG     EXPCMT+(CT.1PF^-1)+(CT.DIS^-1)
        BC      DISCFX
        ORG     EXPCMT+(CT.1PF^-1)+(CT.UA^-1)
        BC      UACFX
:       ORG     EXPCMT+(CT.1PF^-1)+(CT.SBE^-1)  :POLL BIT IN CTL 2
:       BC      SBCFX                           :IS ILLEGAL CTL
        ORG     EXPCMT+(CT.1PF^-1)+(CT.FR^-1)
        BC      FRCFX
        ORG     EXPCMT+CMTMXL
:
ENDPATCH(Force FRMR if Frame control unused bits are on)
        IF      \NOPRID; ELSE;
PATCH(840923,0930,JMC,PRIDEC+(PNARM*STAT.L)+DMCFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(SECDEC+(PARMG*STAT.L)+DISCFX,,2)
	HC SDSNAR-SECDEC
CONPATCH(PRIDEC+(PARMG*STAT.L)+DMCFX,,2)
	HC (PUADSC+8)-PRIDEC
CONPATCH(PRIDEC+(PINFO*STAT.L)+UACFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+DMCFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+UACFX,,2)
	HC FMDSCD-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+FRCFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+RRCFX,,2)
	HC FMDSCD-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+RNRCFX,,2)
	HC FMDSCD-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+REJCFX,,2)
	HC FMDSCD-PRIDEC
CONPATCH(PRIDEC+(PRFRMR*STAT.L)+ILLCFX,,2)
	HC FMDSCD-PRIDEC
CONPATCH(SECDEC+(SECMDR*STAT.L)+DMCFX,,2)
	HC FMDSCD-SECDEC
CONPATCH(SECDEC+(SECMDR*STAT.L)+UACFX,,2)
	HC FMDSCD-SECDEC
CONPATCH(SECDEC+(SECMDR*STAT.L)+FRCFX,,2)
	HC FMDSCD-SECDEC
CONPATCH(SECDEC+(SECMDR*STAT.L)+ILLCFX,,2)
	HC FMDSCD-SECDEC
CONPATCH(SECDEC+(PRESET*STAT.L)+DISCFX,,2)
        HC      SDSINF-SECDEC
CONPATCH(PRIDEC+(PINFO*STAT.L)+DMCFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(PRIDEC+(PTRECV*STAT.L)+DMCFX,,2)
	HC SNDSAM-PRIDEC
CONPATCH(PRIDEC+(PTRECV*STAT.L)+UACFX,,2)
	HC SNDSAM-PRIDEC
:       CONPATCH(PRIDEC+(PRESET*STAT.L)+DMCFX,,2)
:	HC SNDSAM-PRIDEC
CONPATCH(ISEDEC+0A,,2)
        HC      RIFRMR-ISEDEC
CONPATCH(XPRERR+8,,4)
        J       RFER12          :GO TO ERROR FRAME ROUTINE
CONPATCH(RFER12+8,,4)
        JE      SFRFMR          :IGNORE IT IN THIS STATE
CONPATCH(RFER42+8,,4)
        JE      SFRFMR          :IGNORE IT IN THIS STATE
CONPATCH(RIFRMR,,6)
        J       SFRPBT,,        :CHECK PFBIT B4 GOING ON
CONPAT(PA1PTR,,01A)
SFRPBT  TBT     RL,PFBIT,,      :CHECK FR PFBIT IN FRMR STATE
        JE      FMDSCD,,
        LIS     R5,XMSCMD
        STB     R5,XSSTAT,RL,,
        J       SFRFMR+6,,       :RETURN TO CALLER
CONPATCH(SFRFMR,,6)
        J       SFRPBT,,        :GO CHECK FOR POLL BIT
CONPATCH(SSBNAR+4,,4)
        JE      SSRNAR+10               :MUST SEND DM DURING LINK DOWN
CONPATCH(SDSNAR,,8)
        LIS     R5,XMSDMM               :PRIME R5 FOR PAMRG STATE RESP
        J       PDSNAR,,                :CHECK FOR POLL BIT IN PATCH AREA
CONPATCH(PA1PTR,,2A)
:               --> UPON ENTRY, R5 = XMSDMM
PDSNAR  LIS     R4,PARMG                :SEE IF WE ARE BRINGING THE LINK UP
        CLB     R4,PRIST                
        JEFS    PDSNAS          :IF SO, THEN <DM+-> NOT ARMED
        JLFS    PDSNMG                  :NOT ARM'D, CHECK PFBIT
        LIS     R4,PRFRMR               :CHECK FOR FRMR RECOV, NO STATECHANGE
        CLB     R4,PRIST
        JNFS    PDSRUM                  :NOT, GO HANDLE ALL OTHER STATES
PDSRUA  LIS     R5,XMSUA                :SEND UA W/NO STATE CHANGE
        JFS     PDSNAS                  :AND EXIT TO CALLER
PDSNMG  TBT     RL,PFBIT                :RESPONSE FOR DISC W/NO POLL IS
        JNFS    PDSNAS                  :UA/NO FINAL, DM MUST HAVE FINAL ON
PDSRUM  LIS     R5,XMSUAM               :UA, GO NOT ARMED
PDSNAS  STB     R5,XSSTAT,RL,      :SET XMIT STATE
        J       SDMINF,,                :BUT BITF REQ. US 2B ACTIVE DTE
CONPATCH(PDMDSC,,8)
        LIS     R5,9                    :XMIT DM AND GO NOT ARMED
        STB     R5,XSSTAT,RL
        JFS     .+2                     :FALL THRU
CONPATCH(PRRINF,,10)
        JAL     R5,ANR          :REVERSE ORDER OF N(R), PFBIT TESTS
        J       PRER2X
        TBT     RL,PFBIT
        JN      PRER3
CONPATCH(PRNINF,,10)
        JAL     R5,ANR          :ALSO FOR RNR'S
        J       PRER2X
        TBT     RL,PFBIT
        JN      PRER3
CONPATCH(PRJINF+8,,10)
        JAL     R5,ANR          :AND FOR REJ'S
        J       PRER2X
        TBT     RL,PFBIT
        JN      PRER3
CONPATCH(SRRINF+0E,,6)
        JAL     R2,MYPA1P,,     :GO TEST PFBIT ALSO
CONPATCH(SRNINF+0E,,6)
        JAL     R2,MYPA1P,,
CONPATCH(SRJINF+0E,,6)
        JAL     R2,MYPA1P,,
CONPATCH(PA1PTR,,16)
MYPA1P  TBT     RL,PFBIT,,      :DO PFBIT TEST FOR ALL SxxINF RTNS
        JE      6,R2            :BYPASS XSSTAT STORE ENTIRELY
        TBT     RL,XSBUSY,,     :REPEAT OVERLAID INSTRUCTION
        JNR     R2              :IF SO, SET XMIT RR
        J       2,R2            :IF EQ, THEN SIMULATE THE JEFS
ENDPATCH(BX.25 PRIDEC+ SECDEC Table changes+ Frame Seq+ PFBIT test changes)
        EI      NOPRID
        IF      \NOFLNG; ELSE
PATCH(841217,0920,JMC,RFG160,,8)
        JAL     R2,PRF120,,     :GO DO LENGTH TEST IN PATCH
        JFS     .+2             :FILL TO NEXT INSTRUCTION
CONPATCH(XPR020,,6)
:       In the receive primary logic the length tests are already in place,
:       however the FRMR will not be detected properly without getting rid
:       of the poll/final bit. That's all the patch area logic does.
        J       PXP020,,        :TURN OFF PFBIT IN PATCH AREA
CONPATCH(PA1PTR,,07A)
PXP020  NHI     R0,@CT.1PF      :GET RID OF MOD-8 P/F BIT
        CLHI    R0,CT.FR        :REPEAT OVERLAID INST
        JE      XPR030,,        :REPEAT OVERLAID INST
        J       XPR020+6,,      :CONTINUE
:
:       Calculate the maximum frame length from current packet size + overhead
:
FRMACL  EQ      2               :FRAME ADDR + CTL FIELD SIZE, MOD 8
PGLCPL  EQ      3               :PACKET GFI + LGN,LCN +PID FIELD SIZE, MOD 8
F80DIF  EQ      1               :MOD 128 OVERHEAD IN ADDITION TO MOD8 OVH
P80DIF  EQ      1               :MOD 128 OVERHEAD IN ADDITION TO MOD8 OVH
PRF120  LIS     R5,FRMACL       :INIT LENGTH COUNTER
        TBT     RL,F128.F,,     :SEE IF MOD 128
        JEFS    PRF121          :NO, THEN DON'T BUMP IT
        AIS     R5,F80DIF       :BUMP IT
PRF121  EQ      .
        THI     R1,CT.NIF       :IF I-FRAME
        JEFS    PRF124          :IF NOT, GO TEST FOR FRMR
PRF122  NHI     R1,@CT.1PF      :GET RID OF PF-BIT
        CLHI    R1,CT.FR        :IS THIS A FRMR?
        JNFS    PRF123          :NO, BYPASS INCREMENT
        AIS     R5,3            :ADD MOD-8 FRMR I-FIELD LENGTH
        TBT     RL,F128.F,,     :SEE IF MOD128
        JEFS    PRF123          :NO
        AIS     R5,2            :ADD MOD-128 DIFF
PRF123  CR      R9,R5           :IF LENGTH = ADDR + CTL BYTES
        JER     R2              :EQUAL, GO ON. LESS THAN CASE DONE AT RFG110
        LB      R5,PRIST,RL     :GET CURRENT STATE
        CLHI    R5,PINFO        :IF IN INFO XFER, FRMR, ELSE
        JN      RFG200,,        :IGNORE
        J       RFG150+0A,,     :RETURN FOR FRMR
PRF124  AH      R5,PSR.LT,RL2,  :IF DATA, GET CURRENT PACKET SIZE
        AIS     R5,PGLCPL       :INCREMENT BY PACKET OVERHEAD
        TBT     RL,P128.F,,     :SEE IF MOD-128, PACKET LEVEL
        JEFS    PRF126          :NO, GO TEST LENGTH
        AIS     R5,P80DIF       :INCREMENT FOR MOD 128
PRF126  CR      R9,R5           :SEE IF FRAME TOO LONG
        JLE     IFRAME,,        :AND IF GOOD, GO ON
        J       RFG110+4,,      :IF NOT GOOD, RETURN TO ERROR ROUTINE
ENDPATCH(FRMR frames with wrong length for command type)
:       EI      HDLC&(LAPB!LAP)
        EI      NOFLNG
        IF      \NOPLNG; ELSE
PATCH(841218,1550,JMC,TRI020-0A,,06)
        J       PTRI12,,        :GO TO PATCH FOR LENGTH CHECK
TRI014  EQ      .
CONPATCH(PA1PTR,,014)
PTRI12  STB     R0,PSDIAG+1,RL,RL :REPEAT OVERLAID INSTRUCTION
        LR      R6,R6           :LENGTH SHOULD BE DECREMENTED TO ZERO NOW
        JN      RTELNG,,        :IF NOT, TELL'M
        J       TRI014,,        :RETURN FROM PATCH
ENDPATCH(Correct lack of length check on RESTART Commands)
        EI      NOPLNG
        IF      \NOFREJ; ELSE
PATCH(850210,1430,JMC,RIF050+2C,,1E)
        TBT     RL,T1TO.F
        JNFS    RIF059
        TBT     RL,SNTREJ               :REJ SENT ALREADY?
        JNFS    RIF059                  :THEN BYPASS
        TBT     RL,OTHBSY               :OTHER SIDE ABLE TO RECV?
        JNFS    RIF059                  :NO, BYPASS
RIF058  SBT     RL,SEQERR               :SET ERROR FLAG FOR FIF100
        JAL     R5,FIF                  :GO SEND REJECT
RIF059  J       RFG210                  :EXIT
CONPATCH(FIF100+8,,14)
:       The PFBIT test is overlaid to gain space, since FIF105 is passed 
:       thru in all cases anyway.
        RBT     RL,SEQERR       :REMOVE SIGNAL TO THIS ROUTINE
        SBT     RL,SNTREJ       :SET REJECT FLAG
        JN      FIF130          :IF IT WAS ALREADY ON, GO SET FOR RR
        LIS     R2,XMSREJ       :SEND THE REJECT
        STB     R2,XSSTAT,RL
        JFS     FIF105          :FILLER
CONPATCH(FIF110,,8)
FIF110  LIS     R2,XMSRNR               :SET TO SEND RNR
FIF115  TBT     RL,PFBIT                :SEE IF DEFINITE RSP REQ'D
        JEFS    FIF120                  :NO, THEN DISCARD AND LEAVE
CONPATCH(FIF130+0A,,2)
        JBS     FIF115                  :GO SEE IF RESP REQ'D
ENDPATCH(REJect frame management for BX.25)
        EI      NOFREJ
        IF      \NORSTT; ELSE
PATCH(831028,1640,JMC,RTD025+54,,8)
        CLHI    R6,2            :PACKET W/ONLY LCN STILL VALID AT THIS POINT
        JL      RTEDSC          :BUT W/NO LCN, MUST IGNORE
CONPATCH(RTD120+12,,18)
:
:       BX.25 requires responses on the LCN in the packet, with the error
:       response dependent on the packet state of the LCN. If the LCN is
:       not configured, the "Unassigned LCN" response is used. 
:       If the LCN is configured but not active, i.e. in Flow Control
:       Ready state, then the error response required will be according 
:       to the Link's state. Thus, if there are packets received during
:       Restart intermediate states, the error responses will be different
:       depending on the Link's state, but must be made on on that LCN,
:       not on channel 0, as we presently do.
:
ZNOPID  EQ      ZILLCN          :SET TO ILL. LCN FOR NOW
        STH     RL,IPORT        :SET DEFAULT IPORT TO LINK'S IPORT
        LIS     R0,ZNOPID       :SET FOR INV PID
        LR      R6,R6           :SEE IF PID THERE
        JLEFS   RTD122          :NO, THEN HANDLE AFTER CHANNEL ASSIGNMENT
        JAL     R4,PICKCH,,     :GO GET PID
RTD122  STB     R0,PACKET       :SAVE IT
        J       RTD140          :AND GO DO LCN ASSIGNMENT
CONPATCH(RTD340,,0A)
        LR      R0,R1           :RESTORE PACKET TYPE IN R0 FOR PRT340
        J       PRT340,,        :DO PRELIM CHECK FOR OTHER PACKET TYPES
        JFS     .+2             :NOP TO INST. BNDRY
RTD342  EQ      .
CONPATCH(RTCLR,,6)
        JAL     R4,RTACCP       :USE STANDARD ACCEPT LOGIC
        JFS     RTCLR+0C        :GOOD, THEN CONTINUE
CONPATCH(RTD460+4,,06)
        JAL     R4,PRT462,,             :DO THE REST IN PATCH AREA
:
RTD465  EQ      .                       :PROVIDE RETURN FOR ERRPTRACE
CONPATCH(RESETP+0A,,6)
        JAL     R2,RTEPST,,             :CHECK LINK'S STATE FIRST
CONPATCH(RESETP+1A,,8)
        JAL     R9,PRESTP,,             :ADD PWRESC TO STATES CHECKED
        JEFS    SNDR19                  :AND BYPASS SEND RESET IF SO
CONPATCH(SNDR10,,4)
        LIS     R0,ZRESET               :MAKE THIS 2BYTE INST
SNDR19  JFS     SNDR20                  :ADD FILLER TO SNDR20
CONPATCH(PA1PTR,,072)
PRT462  CLHI    R0,YCLRR                :TEST FOR CLEAR MSG
        JE      RTD480,,                        : IF SO, CONFIRM IT
        CLHI    R0,YCALR                :TEST FOR CALL REQUEST
        JNFS    PRT122                  :GO TEST FOR RESTART I/C, DIAG
        LHI     R13,CLRCAU!DIA037|8     :USE DIAG = 37 FOR CALL REQUEST
:       *-----> USE CLEAR FOR PRODUCTION, AS IT PREVENTS LONG REXMITS OF
:               C.R.'s BY THE DTE.
:       J       RTD480,,                :GO TO CLEAR ROUTINE - NOT 4 BITF
        J       RTEUNA,,                :BITF CRASHES ON CLEARS - IGNORE
PRT122  CLHI    R0,YRSTRT               :REPEAT REST IND TEST
        JE      RTRSTI,,
        CLHI    R0,YRSTRC               :REPEAT REST CONF TEST
        JE      RTRSTC,,
        CLHI    R0,YDIAG                :REPEAT DIAG TEST
        JE      RTDIAG,,
        TBT     RL,PACKUP,,             :CHECK TO SEE IF REST NEEDED
        JE      RTEDEC,,                :IF PACKET LEVEL DOWN
        JR      R4
PRT340  JAL     R4,PRT122               :DO PRELIM TESTS
        NHI     R1,1F                   :REDO OVERLAID INST.
        LB      R2,RTGO,R1,             :DITTO
        J       RTD342,,                :CONTINUE
PRESTP  CLHI    R1,PSRESC               :REPEAT OVERLAID INST.
        JER     R9                      :DITTO
        CLHI    R1,PWRESC               :ADD WAITING FOR RESET CONF.
        JER     R9                      :AND DON'T SEND IF SO
        CLHI    R1,PSRSTI               :ADD RESTART STATES
        JER     R9
        CLHI    R1,PWRSTC               :DITTO
        JR      R9
ENDPATCH(BX.25 error responses LCN assignment, Unassigned LCNs, Restart Pkts)
        EI      NORSTT
        IF      PVC
PATCH(851223,1330,JMC,ESP1A3+18,,((ESP1A5+0A)-(ESP1A3+18)))
        LIS     R13,RENETO      :USING 2 BYTE INST. INSTEAD OF LHI TO FIT
        LIS     R0,0            :INTO AVAIL. SPACE. - CHANGE RESET TO
        TBT     R8,PVCOUT       :NO RESET FOR NETWK OPER'NAL.
        JEFS    ESP1A5          :BUT DO EVERYTHING ELSE
        LIS     R13,ROUTOD      :FOR OUT OF ORDER DO USUAL RESET
        LIS     R0,PSRESI       :PUT LCN IN SEND RESET STATE
        STB     R0,PCKSTE,R7,
        LIS     R0,ZRESET       :INDICATE RESET TO CNR
ESP1A5  SLLS    R13,8           :DEPENDS UPON DIAG CODE = 00, SO BEWARE!
        STH     R13,PSDIAG,R7,R7        :AND SAVE IT FOR REFERENCE
        JFS     ESP1A5+0A       :FILLER
CONPATCH(ESP16C+24,,6)
        JAL     R9,PESP16,,     :CHECK FOR LINK UP IN PATCH AREA
CONPATCH(PA1PTR,,18)
PESP16  TBT     R3,PVCOUT,,     :SEE IF IT'S UP
        JNFS    PESP17          :NO THEN CONTINUE AS IS
        LIS     R1,PFLOWC       :JUST PUT IT BACK TO FLOW CONTROL READY
        STB     R1,PCKSTE,R2,
        LIS     R0,0            :INDICATE NO RESET TO CNR
PESP17  J       CNR,,           :AND EXIT TO IT
ENDPATCH(Do not send resets for Netwk Operational or Remote DTE Operational)
        EI      PVC
        EI      BX.25
    ue3%