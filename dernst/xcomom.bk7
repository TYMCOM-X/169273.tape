	STTL(OPERATIONS MANAGER             )
:******************************************************************************
:******************************************************************************
:******************************************************************************
:
:
:	X.25/X.75 Interface Operations Manager
:
:
:
:******************************************************************************
:******************************************************************************
:******************************************************************************



	GL	AREAS



  IF	XOM
	SEG	A.CODE
SSTTL(COMMAND INPUT ROUTINES)
:	*****************************************
:	*					*
:	*	Command Input Routines		*
:	*					*
:	*****************************************
:
:
:
:	XOM Command Input Loop - Read data from ISIS ring and place
:				into the CMDLIN array until a <CR> is found.
:				Then jump to the XOM Command Scanner.
:
:		Input -
:			R1 - DPORT of the XOM
:			R2 - data msg length
:			XOMPRT - XOM's DPORT

XOMCIL	TBT	R1,PIIX
	JN	XOMIIX			:IF EST DIALECT OR PROC IIX HEADER :SCHEN 26-Mar-85
	LR	R6,R2			:COPY INPUT DATA MSG COUNT
	JAL	R4,GETCH		:FLUSH DATA MESSAGE COUNT
XOMC10	LB	R5,CMLNFI		:GET POINTER TO NEXT COMMAND DIGIT
	CLHI	R5,0FF
	JE	XOMC40			:IF FLUSHING UNTIL A <CR>
XOMC20	JAL	R4,GETCH		:GET COMMAND CHARACTER
	NHI	R0,7F			:STRIP PARITY
	LR	R9,R0			:SAVE COMMAND CHAR
	LHL	R1,XOMPRT
	TBT	R1,IIXCAL
	JN	XOMC22			:IF NOT TALKING TO DUMB TERMINAL
	LIS	R0,4			: AND ECHO IT TO TERMINAL
	LIS	R2,1
	JAL	R4,BSLOR,,
	LR	R0,R9
	JAL	R4,BPUTCH
	JAL	R4,BELOR,,
XOMC22	CLHI	R9,CR
	JE	XOMC70			:IF END OF CMD
	CLHI	R5,CMLMAX
	JLE	XOMC50			:IF CMD NOT TOO LONG
	LR	R9,R6			:COPY COUNT LEFT
	LHI	R6,XER.33		: CMD TOO LONG ERROR TYPE
	JAL	R8,XOMERR
	LR	R6,R9			:RESTORE COUNT
	LCS	R5,1			:INDICATE FLUSH UNTIL <CR> FOUND
XOMC30	SIS	R6,1
	JLE	XOMC90			:IF NO MORE RING DATA
XOMC40	JAL	R4,GETCH
	NHI	R0,7F			:STRIP PARITY
	LR	R9,R0			:SAVE COMMAND CHAR
	LHL	R1,XOMPRT
	TBT	R1,IIXCAL
	JN	XOMC42			:IF NOT TALKING TO DUMB TERMINAL
	LIS	R0,4			:ECHO IT TO TERMINAL
	LIS	R2,1
	JAL	R4,BSLOR,,
	LR	R0,R9
	JAL	R4,BPUTCH
	JAL	R4,BELOR,,
XOMC42	CLHI	R9,CR
	JN	XOMC30			:IF KEEP FLUSHING
	LIS	R5,0			:INDICATE DONE FLUSHING
	JFS	XOMC60			:READY FOR NEXT CMD
XOMC50	STB	R9,CMDLIN,R5,		:SAVE CMD DIGIT
	AIS	R5,1
XOMC60	SIS	R6,1
	JG	XOMC20			:IF MORE RING DATA
	J	XOMC90

XOMC70	LHL	R1,XOMPRT
	TBT	R1,IIXCAL
	JNFS	XOMC72			:IF NOT TALKING TO DUMB TERMINAL
	LIS	R0,4			:START A CLEAN LINE FOR XOM RESPONSE
	LIS	R2,1
	JAL	R4,BSLOR,,
	LIS	R0,LF
	JAL	R4,BPUTCH
	JAL	R4,BELOR,,
XOMC72	SIS	R6,1			:COUNT <CR>
	JEFS	XOMC80			:IF NO MORE DATA IN MSG
	LCS	R5,1			:XOM IS HDUPLEX-IGNORE INPUT TILL READY
XOMC80	STB	R5,CMLNFI
	LR	R0,R6
	JAL	R4,FLUSH,,
	LIS	R0,0
	ST	R0,XOMRTN		:INDICATE RETURN TO COMMAND LOOP
	J	XOMSCN			:SCAN COMMAND (PREPROCESS IT)

:	Out of data but command incomplete
XOMC90	STB	R5,CMLNFI		:SAVE CMD ARRAY POINTER
	LIS	R0,0
	JAL	R4,ELIR,,
	J	MMFRA,,

:	RETURN HERE AFTER EVERY COMMAND
XOMRET	L	R0,XOMRTN
	JNR	R0			:IF A "SPECIAL" RETURN
	LIS	R5,0
	LB	R0,CMLNFI
	JLFS	XOMC95			:IF TRASHING COMMAND CHARS
	STB	R5,CMLNFI		:RESET COMMAND LINE ARRAY POINTER
XOMC95	LB	R0,XOMMOD
	JE	MMFRA,,			:IF NORMAL INPUT MODE
	STB	R5,XOMMOD		:RETURN TO NORMAL INPUT MODE
	LHL	R1,XOMPRT
	RBT	R1,DFLUSH		:STOP FLUSHING COMMANDS
	J	MMFRA,,			: PROCESS NEXT RING MESSAGE



::	Context Save for XOM (invoked if using too much bufferlet space)
XOMCSA	STM	R0,XOMRSA
	L	R0,TEMP
	ST	R0,XOMRSA+$A52
	L	R0,TEMP1
	ST	R0,XOMRSA+$A56
	L	R0,TEMP2
	ST	R0,XOMRSA+$A60
	L	R0,TEMP3
	ST	R0,XOMRSA+$A64
	L	R0,TEMP5
	ST	R0,XOMRSA+$A68
	LIS	R1,1
	STB	R1,XOMMOD		:INDICATE OUTPUT IN PROGRESS
	LHL	R1,XOMPRT
	SBT	R1,DFLUSH		:IGNORE COMMANDS
	J	MMFRA,,			:BACK TO RING HANDLER

::	Context restore (invoked if output in progress and bufferlets
:		for port are empty)
XOMCRE	LHL	R1,XOMPRT		:XOM DPORT NUMBER
	SLLS	R1,2			:4*BUFFER NUMBER
	AHI	R1,IDBIA		:...AND BIAS
	CBCT				:R0=# CHARS IN BUFFER
	LR	R0,R0
	JN	MMFRA,,			:IF BUFFERING OUTPUT--DO NO MORE
	L	R0,XOMRSA+$A52
	ST	R0,TEMP
	L	R0,XOMRSA+$A56
	ST	R0,TEMP1
	L	R0,XOMRSA+$A60
	ST	R0,TEMP2
	L	R0,XOMRSA+$A64
	ST	R0,TEMP3
	L	R0,XOMRSA+$A68
	ST	R0,TEMP5
	STM	R13,XOMRSA+$A52	:DON'T RESTORE R13-15
	LM	R0,XOMRSA
	JR	R7			:BACK TO WHENCE CALL CAME FROM




::	XOM Command Scanner	- take data from CMDLIN array , break
:				it into command type and parameters and
:				after converting from ASCII to hex,
:				store the command type and the
:				parameters in the XOMPAR array.
:
:			Report bad delimiters,non-hex digits, etc.
:				as errors.
:
:				If a dash is found, digits after it are
:				put in next XOMPAR halfword and bit 0
:				of the previous XOMPAR entry will be
:				 set.  (Currently only the Log Report
:				Type Select command uses this feature).

XOMSCN	LCS	R1,1			:PTR TO PREVIOUS DIGIT IN "CMDLIN"
	LIS	R2,0			:ACCUMULATION REG FOR PARAMETERS
	LIS	R3,0			:INDEX INTO PARAMETER ARRAY
	LB	R5,CMLNFI		:1 PAST END OF CMD IN ARRAY *CMDLIN*
	LIS	R6,0			:INITIAL NUMBER OF PARAMETERS
XOMSC0	LIS	R8,0			:INIT PARAMETER DIGIT COUNT
	JAL	R7,GETNXT		:GET DIGIT FROM *CMDLIN* ARRAY :SCHEN 26-Mar-85
	J	XOMSC9			:IF NONE LEFT
	CLHI	R0,LF
	JEBS	XOMSC0			:IGNORE LINEFEEDS
	CLHI	R0,SPA
	JEBS	XOMSC0			:IGNORE INITIAL BLANKS

XOMSC1	JAL	R7,CAH			:CONVERT DIGIT FROM ASCII TO HEX
	J	XOMSC4 			:IF NON-HEX DIGIT---ERROR
	SLLS	R2,4
	AIS	R8,1			:ANOTHER DIGIT IN THIS PARAMETER
	CLHI	R8,4
	JG	TLEXOM			:IF MORE THAN 4 DIGITS IN PARAMETER
	OR	R2,R0			:INCLUDE DIGIT IN CURRENT PARAMETER
	JAL	R7,GETNXT					:SCHEN 26-Mar-85
	J	XOMSC2			:IF NONE LEFT
	CLHI	R0,SPA
	JN	XOMSC7			:IF A NON-BLANK
XOMSC2	CLHI	R6,XOMMPA
	JG	TPEXOM			:IF NOT ENOUGH ROOM FOR MORE PARS
XOMSC3	STH	R2,XOMPAR,R3		:SAVE A PARAMETER
	AIS	R3,2
	AIS	R6,1			:ONE MORE PARAMETER
	LIS	R2,0			:RESET PARAMETER ACCUMULATION REG
	J	XOMSC0			:GET NEXT PARAMETER
XOMSC4	J	NHEXOM			:ERROR
XOMSC7	CLHI	R0,DASH
	JN	XOMSC1			:IF NOT A RANGE OF VALUES
	ST	R2,TEMP			:SAVE LOWER LIMIT FOR LATER COMPARISON
	CLHI	R6,XOMMPA
	JG	TPEXOM			:IF TOO MANY PARAMETERS---ERROR
	OHI	R2,08000		:FLAG PARAMETER AS BEG OF RANGE
	STH	R2,XOMPAR,R3
	AIS	R3,2
	AIS	R6,1
	LIS	R2,0
	LIS	R8,0			:RESET PARAMETER DIGIT COUNT
	JAL	R7,GETNXT					:SCHEN 26-Mar-85
	J	CSEXOM			:IF NO MORE PARAMETERS---ERROR
					:JS 12-SEP-86
XOMSC8	JAL	R7,CAH
	J	XOMSC4			:IF NOT A HEX DIGIT
	SLLS	R2,4
	AIS	R8,1			:ANOTHER DIGIT IN THIS PARAMETER
	CLHI	R8,4
	JG	TLEXOM			:IF MORE THAN 4 DIGITS IN PARAMETER
	OR	R2,R0			:ADD DIGIT TO CURRENT PARAMETER
	JAL	R7,GETNXT					:SCHEN 26-Mar-85
	J	XOMS80
	CLHI	R0,SPA
	JN	XOMSC8			:IF STILL DIGITS LEFT FOR THIS PAR
XOMS80	CL	R2,TEMP
	JL	BREXOM			:IF UPPER LIMIT<LOWER LIMIT
	J	XOMSC3

XOMSC9	LR	R6,R6
	JE	CSEXOM			:IF NO CMD # WAS GIVEN
	LHL	R1,XOMPAR		:GET COMMAND NUMBER
	CLHI	R1,L.XOMC
	JG	COEXOM			:IF BEYOND THE END OF THE JUMP TABLE
	TBT	R1,XOMLAZ
	JEFS	XOMSCA			:IF NOT A QUERY THE "LAZY WAY"
	CLHI	R6,2
	JGEFS	XOMSCA			:IF PARAMETER WAS GIVEN
	LHI	R2,0FFFF
	STH	R2,XOMPAR+2		:USE UNIVERSAL 1ST PARAMETER
	STH	R2,XOMPAR+4		:AND UNIVERSAL 2ND PARAMETER
	LIS	R6,3
XOMSCA	STB	R6,XOMNPS		:SAVE NUMBER OF PARAMETERS
	LH	R1,XOMCMD,R1,R1		:LOOK UP PROC ADDRESS IN JUMP TABLE
	J	XOMCMD,R1		:GO PROCESS COMMAND

SSTTL(XOM COMMAND JUMP TABLE)
:	*****************************************
:	*					*
:	*	XOM Command Jump Table		*
:	*					*
:	*****************************************
:

:	Macros for setting up command jump table
QORG	EQ	0
ALL	EQ	1
	KILL	Q,M

:	Query Macro
:	number=hex command number
:	name=1-3 character process name, label will be XOM`name
:	all=ALL if queried on the query all command
:	lazy=ALL if query is done for all links (or hosts) when
:		only the command number is entered
Q	MACRO(number,name,all,lazy)[
QN	EQ	$0 number
  IF	\XC.|QN|
 REMARK %<<<< DUPLICATE XOM COMMAND NUMBER ; NUMBER QN$0
 REMARK  >>>>%
  ELSE
XC.|QN|	EQ	QN
  EI
QW	EQ	QN/$020
  IF	1-\QSO|QW|
QSO|QW|	EQ	0
  EI
  IF	all -1
QSO|QW|	EQ	QSO|QW|!(1^($01F-(QN-(QW*$020))))
  EI
  IF	1-\QLZ|QW|
QLZ|QW|	EQ	0
  EI
  IF	lazy -1
QLZ|QW|	EQ	QLZ|QW|!(1^($01F-(QN-(QW*$020))))
  EI
  IF	.GT.(2*QN,QORG)
QORG	EQ	QN*2
  EI
	ORG	XOMCMD+QN*2
  IF	\XXX`name
 ERROR(DUPLICATE XOM QUERY COMMAND NAME XOM`name)
  ELSE
XXX`name	EQ	1
  EI
	TENTRY(XOM`name)
	ORG	XOMCMD+QORG+2
]

:	Modify Macro
:	number=hex command number
:	name=1-3 character process name, label will be XMC`name
M	MACRO(number,name)[
QN	EQ	$0 number
  IF	\XC.|QN|
 REMARK %<<<< DUPLICATE XOM COMMAND NUMBER ; NUMBER QN$0
 REMARK  >>>>%
  ELSE
XC.|QN|	EQ	QN
  EI
  IF	.GT.(2*QN,QORG)
QORG	EQ	QN*2
  EI
	ORG	XOMCMD+QN*2
	TENTRY(XMC`name)
	ORG	XOMCMD+QORG+2
]


::	XOM COMMANDS

TABLE(XOMCMD)
  Q(00,ZP2)		:  Logoff Command (BREAK may also be used)
  Q(01,ASQ)		:  Query all sysgen options

:	Basic Interface Statements
  Q(02,PRO,all)		:  PROTOCOL(X25/X75 HDLC/BSCEBC/BSCSP/BSCODD
			:	     LAPB/LAP/SLP/MLP/FML)
			:  <cannot modify>
  Q(03,DPO,all)		:  DPORTS(ports)
			:  <cannot modify>

:	Host Options
  Q(04,LHN,all,all)	:  LINKHOSTNUMBER(link host)
   M(4F,LHN)		:
  Q(05,HSL,all,all)	:  HOSTLINKS(host linkarray)
   M(50,HSL)		:  	    (host add-remove link)
  Q(06,HCO,all,all)	:  HOSTCOST(host mincost maxcost maxpath minmath
			:	    interval maxint)
   M(51,HCO)		:
  Q(07,HPO,all,all)	:  HOSTPORTAVAILABILITY(host unavailbelow availabove)
   M(52,HPO)		:
  Q(08,HKE,all,all)	:  HOSTKEY(host key)
   M(53,HKE)		:

:	Link Option Commands
  Q(09,LLU,all,all)	:  LINKLU(link line lu)
   M(54,LLU)		:  	 (link line add-remove lu)
			:  LINKS <cannot query>
			:  <cannot modify>
  Q(0A,HDW,all,all)	:  HDWOPT(link line NOCLK)
   M(55,HDW)		:
  Q(0B,PSA,all,all)	:  PSADR(link line pri sec)
   M(56,PSA)		:
  Q(0C,K,all,all)	:  K(link line k)
   M(57,K)		:
  Q(0D,MXK,all,all)	:  MAXK(link line maxk)
			:  <cannot modify>
  Q(0E,N2,all,all)	:  N2(link line n2cnt)
   M(58,N2)		:
  Q(0F,T1,all,all)	:  T1(link line tsec)
   M(59,T1)		:
  Q(10,FT0,all,all)	:  FMLT0(ticks)
			:  <cannot modify>
  Q(11,FTD,all,all)	:  FMLTD(ticks)
			:  <cannot modify>
  Q(12,FTM,all,all)	:  FMLTM(ticks)
			:  <cannot modify>
  Q(13,IDL,all,all)	:  IDLELINE(link line sec samples)
   M(5A,IDL)		:
  Q(14,ILR,all,all)	:  ILRR(link line seconds)
   M(5B,ILR)		:
  Q(15,ILC,all,all)	:  ILRRC(link line seconds)
   M(5C,ILC)		:
  Q(16,FRM,all,all)	:  FRMOPT(link line FM128 DWDSC)
   M(5D,FRM)		:

:	Packet Level Option Commands
  Q(17,CCN,all,all)	:  CCNL(link lcc hcc)
			:  <cannot modify>
  Q(18,ICN,all,all)	:  ICNL(link lic hic)
   M(5E,ICN)		:
  Q(19,TCN,all,all)	:  TCNL(link ltc htc)
   M(5F,TCN)		:
  Q(1A,OCN,all,all)	:  OCNL(link loc hoc)
   M(60,OCN)		:
  Q(1B,T10,all,all)	:  T10(link seconds number-of-restarts)
   M(61,T10)		:
  Q(1C,T11,all,all)	:  T11(link seconds)
   M(62,T11)		:
  Q(1D,T12,all,all)	:  T12(link seconds number-of-resets)
   M(63,T12)		:
  Q(1E,T13,all,all)	:  T13(link seconds number-of-clears)
   M(64,T13)		:
  Q(1F,ODN,all,all)	:  ODNIC(link dnic1,...,dnic16)
   M(65,ODN)		:  	(link add-remove dnic)
  Q(20,CHK,all,all)	:  CHKCLG(link adrlen required-address)
   M(66,CHK)		:
  Q(21,HIH,all,all)	:  HIHOSTNUMBER(host-number)
   M(67,HIH)		:
  Q(0B5,NUP,all,all)	:  NETUSERNAMEPREFIX(link prefix)
   M(0B6,NUP)		:
  Q(22,CLL,all,all)	:  CLDADL(link length)
   M(68,CLL)		:
  Q(23,PKT,all,all)	:  PKTOPT(link PM128 HILCN ZCAUS IPRNR TKSUP BRFCA
			:	  TKDSP)
   M(69,PKT)		:
  Q(87,ADL,all,all)	:  ADDRESSLINKS(host addr linkarray)
   M(88,ADL)
  Q(8B,LBI,all,all)	:  LINKBIASES(link bias)
   M(8C,LBI)
  Q(8D,ADP,all,all)	:  ADRESSPOSITION(host len)
   M(8E,ADP)
  Q(0B8,MAL)		:  MAXADRLINKS(maxadrlinks)
  Q(8F,HRL,all,all)	:  ROTATELINKS(host onoff)
   M(90,HRL)

:	Optional User Facility Commands
  Q(91,FAC,all,all)	:  FACOPT(LINK LASTSEEN)
   M(0A3,FAC)		:
  Q(24,PWI,all,all)	:  PWIND(link tmtwindow rcvwindow)
   M(6A,PWI)		:
  Q(92,PWN,all,all)	:  PWIND(LINK NEGOTIATION)
   M(0A4,PWN)		:
  Q(25,PSI,all,all)	:  PSIZE(link tmtsize rcvsize)
   M(6B,PSI)		:
  Q(93,PSN,all,all)	:  PSIZE(LINK NEGOTIATION)
   M(0A5,PSN)		:
  Q(26,MXP,all,all)	:  MAXPSIZE(link max-packet-size)
			:  <cannot modify>
  Q(27,TPC,all,all)	:  TCLASS(link incoming-class outgoing-class)
   M(6C,TPC)		:
  Q(94,TPN,all,all)	:  TCLASS(LINK NEGOTIATION XCLEAR PASSTOX)
   M(0A6,TPN)		:
  Q(28,TPW,all,all)	:  TCTOPW(link pw1,...,pw15)
   M(6D,TPW)		:
  Q(29,TPS,all,all)	:  TCTOPS(link ps1,...,ps15)
   M(6E,TPS)		:
  Q(2A,TPM,all,all)	:  TCTOSC(link tc1,...,tc15)
   M(6F,TPM)		:
  Q(95,TCS,all,all)	:  TCTCSI(LINK CS1,...,CS15)
   M(0A7,TCS)		:
  Q(96,CSI,all,all)	:  CSITTC(LINK TC1,...,TC4)
   M(0A8,CSI)		:
  Q(2B,CRG,all,all)	:  CHARGE(link CPT RCX RCNA CPNA RCNS XCLEAR)
   M(70,CRG)		:
  Q(97,CUS,all,all)	:  CUG(LINK SUBSCRIPTION INCOMING OUTGOING)
   M(0A9,CUS)		:
  Q(98,CUI,all,all)	:  CUGROUP(LINK CUGIND ILCA ILCB ICB OCB)
   M(0AA,CUI)		:
  Q(99,CUP,all,all)	:  CUGPREF(LINK PREFIND)
   M(0AB,CUP)		:
  Q(0C1,CHT,all,all)	:  CHRGNATIONAL(DCC for onoff)		:SCHEN 30-Oct-84
   M(0C2,CHT)		:	       (DCC for onoff)		:SCHEN 30-Oct-84
  Q(09A,FST,all,all)	:  FASTSELECT(LINK SUBSCRIPTION ACCEPTANCE)
   M(0AC,FST)		:
  Q(09B,RPO,all,all)	:  RPOA(LINK PASSTOX)
   M(0AD,RPO)		:
  Q(9C,CID,all,all)	:  CALLID(LINK CIDCHK)
   M(0AE,CID)		:
  Q(9E,NAT,all,all)	:  NATIONAL(LINK XCLEAR PASSTOX)
   M(0B0,NAT)		:
  Q(9F,UNK,all,all)	:  UNKOWN(LINK XCLEAR PASSTOX)
   M(0B2,UNK)		:
  Q(0A0,TRA,all,all)	:  TRAFFIC(LINK XCLEAR PASSTOX)
   M(0B1,TRA)		:
  Q(0A1,BCU,all,all)	:  BCUG(LINK XCLEAR PASSTOX)
   M(0B3,BCU)		:
  Q(0B9,MXG,all,all)	:  MAXGATEWAYS
  Q(2C,GAT,all,all)	:  GATEWAY(link dnic loginstring)
   M(09D,GAT)
  Q(2D,RPG,all,all)	:  RPOAGATEWAY(link gateway-dnic rpoa-dnic loginstring)
   M(0AF,RPG)
  Q(89,TRP,all,all)	:  TORPOA(host rpoa)
   M(8A,TRP)
  Q(0B7,MTR)		:  MAXTORPOA(maxtorpoa)


:	PAD Options
  Q(2E,CLG,all,all)	:  CLGADR(link NUIADR HOSTADR=FE/OLDADR=FF/adrlen address)
   M(71,CLG)		:
  Q(2F,CLD,all,all)	:  CLDADR(link adrlength)
   M(72,CLD)		:
  Q(30,CST,all,all)	:  CUDSTRING(link length hexstring)
   M(73,CST)		:
  Q(31,CNM,all,all)	:  CUDUSERNAME(link number-of-characters)
   M(74,CNM)		:
  Q(32,INP,all,all)	:  INPARITY(link SAVE/MARK/SPACE DATA CUD ALLCALLS)
   M(75,INP)		:
  Q(33,PDO,all,all)	:  PADOPTIONS(link NECHO NCRLF NLFCR HCRLF HLFCR NR13 NR14
			:		XONOF T2741 U2741)
   M(76,PDO)		:
  Q(34,PAI,all,all)	:  PADIDLETIMER(link tymsat-20thsec tymcom-20thsec)
   M(77,PAI)		:
  Q(35,PAF,all,all)	:  PADFORWARD(link tymsat-forward tymcom-forward)
   M(78,PAF)		:
  Q(36,PAB,all,all)	:  PADBREAK(link tymsat-break-value)
   M(79,PAB)		:
  Q(37,PAN,all,all)	:  PADNATIONAL(link national-options-marker)
   M(7A,PAN)		:
  Q(38,ECO,all,all)	:  ECHOABLE(link character-bit-array)
   M(7B,ECO)		:  	   (link add-remove character-ranges)
  Q(39,TEL,all,all)	:  TELENET(link TX3 TADR TPID TFAC TCAP)
   M(7C,TEL)		:
  Q(3A,DPC,all,all)	:  DATAPAC(link DX3 DTAR)
   M(7D,DPC)		:

:	Global Commands
			:  MTEXT <cannot query>
			:  <cannot modify>
  Q(3B,SEG,all,all)	:  SEGAC(segment-size)
			:  <cannot modify>
  Q(3C,DNN,all,all)	:  DNICNODES(dnic node1,...,nodei)
   M(7E,DNN)		:  	    (dnic add-remove node)
  Q(3D,TOC,all,all)	:  TALKOLDCODE(onoff)
			:  <cannot modify>
  Q(3E,INF,all,all)	:  INFOSWITCH(dnic)
			:  <cannot modify>
  Q(3F,RCV,all,all)	:  RCVSECTORS(number-of-sectors-for-each-link))
			:  <cannot modify>
  Q(0A2,MCU,all,all)	:  MAXCUG(MAXCUGINDEX)
			:  <CANNOT MODIFY>
  Q(0B4,CUC,all,all)	:  CUGCODE(ONOFF)
			:  <CANNOT MODIFY>
			:  L1ENABLE <cannot query>
			:  <cannot modify>
  Q(0BB,CDN,all,all)	:  CUGDNICLIST(dnic #,...,dnic #)	:SCHEN 30-Oct-84
   M(0BC,CDN)		:	     (add-remove dnic #)	:SCHEN 30-Oct-84
  Q(0BD,CDM,all,all)	:  MAXCDLIST(parameters # in CUGDNICLIST) :SCHEN 30-Oct-84
  Q(0BE,CMP,all,all)	:  CUGMAPPING(icodea-icodeb-ncode-listno) :SCHEN 30-Oct-84
   M(0BF,CMP)		:					:SCY 17-OCT-84
  Q(0C0,CMM,all,all)	:  MAXCMAPPING(max-number-of-statement) :SCHEN 30-Oct-84

:	Global Storage Allocation Commands
:	<none can be modified>
  Q(40,BFP,all,all)	:  BUFFERPOOL(number-of-characters)
  Q(0BA,MHN,all,all)	:  MAXHOSTS(max-number-of-hosts)
  Q(41,MDN,all,all)	:  MAXODNIC(max-odnics-per-link)
  Q(42,DNM,all,all)	:  MAXDNICNODES(max-number-dnics-and-nodes)
  Q(43,TTS,all,all)	:  THROUGHPUTCLASSTABLES(onoff)
  Q(44,FCS,all,all)	:  FSLTCODE(onoff)
  Q(45,CCS,all,all)	:  COSTCODE(onoff)
  Q(46,TEC,all,all)	:  TELCODE(onoff)
  Q(47,DCS,all,all)	:  DPACODE(onoff)

:	XOM Statements
			:  XOMUSERNAME <cannot query>
			:   <cannot modify>
 Q(84,XHS,all,all)	:  XOMHOST(host)
  M(85,XHS)		:

:	Log Report Commands
  Q(48,LIN,all,all)	:  LOGINTERVAL(link interval-in-minutes)
   M(7F,LIN)		:
  Q(49,LTY,all,all)	:  LOGREPORTS(link typeA-128bit-array, typeB-128bit-array)
   M(80,LTY)		:  	     (link add-remove typeAorB report-ranges)
:	LINK STATISTICS COMMANDS
  Q(0C3,LKP,ALL,ALL)	: QUERY LINK PERFORMANCE STATISTICS
  Q(0C4,LKE,ALL,ALL)	: QUERY LINK ERROR STATISTICS

  IF	PVC
:	PVC Commands
  Q(0C5,PCR,ALL,ALL)	: QUERY PCNL
  Q(0C6,PCH,ALL,ALL)	: QUERY PVCHANNEL
   M(0C7,CPV)		: CHANGE AN EXISTING PVC
   M(0C8,APV)		: ADD A NEW PVC
   M(0C9,RPV)		: REMOVE A PVC
  Q(0CA,PVS,ALL,ALL)	: QUERY PVC STATUS  
   M(0CB,BPV)		: ZAP AND REBUILD AN EXISTING CIRCUIT
 
  EI	PVC


:	Miscellaneous Commands
  Q(4A,MSC)		:  Software(version revision node kernelhost slot loadtime
			:    halttime crashcnt crashcode lastcrashtime numberpatches)
  Q(86,PHS)		:  PatchHistory(yyyy mmdd hhmm patch-author)
  Q(4B,MHC)		:  Hardware(logical-unit-number device-type device-adr attrib)
  Q(4C,HSI,,all)	:  HostStatus(host status maxpaths avail-paths used-paths)
   M(83,HSI)		:  	     (host status)
  Q(4D,ACT,,all)	:  LinkStatus(link linecnt linestate(0),...,linestate(cnt)
			:		channel-count packet-state FML-link-state)
   M(81,LKS)		:  ModifyLineState(link line up/down-soft/dowd)
   M(82,PKS)		:  ModifyPacketState(link up/down-soft/down-hard)
  Q(4E,ICP,,all)	:  ChannelStatus(link channel state clglen clgadr
			:		  cldlen cldadr invoice insegcnt outsegcnt
			:		  inpacketcnt outpacketcnt)


	KILL	Q,M
 ENDTABLE(XOMCMD)		:END TABLE, DEFINE L.XOMC


  .DOB.(Q,0,L.XOMC)
  IF	1-\XC.|Q|
 REMARK %<<<< GAP IN XOMCMD NUMBERS AT ; NUMBER Q$0; REMARK  >>>>%
  EI
  .DOE.0

::	XOM QUERY SYSGEN OPTION COMMAND ARRAY
XOMQSO	WS
  .DOB.(Q,0,(L.XOMC+1F)/20)
   IF	\QSO|Q|
	WC	QSO|Q|
   ELSE
	WC	0
   EI
  .DOE.0



::	XOM QUERY AS IF ALL LINKS (OR HOSTS) WERE ENTERED WHEN ONLY
:	COMMAND ENTERED
XOMLAZ	WS
  .DOB.(Q,0,(L.XOMC+1F)/20)
   IF	\QLZ|Q|
	WC	QLZ|Q|
   ELSE
	WC	0
   EI
  .DOE.0
SSTTL(COMMAND INPUT SUBROUTINES)

:	*****************************************
:	*					*
:	*	IIX Dialect Establishment &	*
:	*	IIX Message Header Processing	*
:	*****************************************
:
:	XOM communicates with Network Console using the Network Console
:	Dialect. Dialect establishment is done here. IIX message headers
:	are also processed here in preparation for normal input to *XOMCIL*
:
:	"Command Data" Dialect Message Processor
:	Several flags are used to determine the current stage of dialect
:	establishment and command header processing. Once the dialect
:	has been established and the first command header processed, the
:	PIIX flag is reset to let *XOMCIL* take input as if coming from a
:	terminal. After a command has been serviced PIIX is set to allow the
:	next command header to be processed.
:		IIXDIA - 1 if in dialect mode
:		WTCNT1 - 0 if got 1st byte of message type
:		WTCNT2 - 0 if got 2nd byte of message type
:		WIIXT0 - 0 if got 1st byte of Network Console's ID

XOMIIX	TBT	R1,IIXDIA
	JE	XIIXDI			:IF NOT YET IN DIALECT MODE
	RBT	R1,WTCNT1
	JE	XOMII4			:IF WE WERE NOT AWAITING 1ST TYPE BYTE
	SBT	R1,WTCNT2		:INDICATE AWAITING 2ND BYTE OF TYPE
	JAL	R4,GETCH		:FLUSH ISIS MSG LENGTH
	JAL	R4,GETCH		:1ST BYTE OF IIX MSG TYPE
	CLHI	R0,(IX.DMM^-8)
	JEFS	XOMII2			:IF DIALECT INDICATOR
	SBT	R1,WTCNT1		: ELSE MUST WAIT FOR NEXT DIALECT MSG
	SIS	R2,1
	J	XOMII8			: SO TRASH INVALID IIX DIALECT MESSAGE

XOMII2	SIS	R2,1
	JE	XOMII8			:IF NO MORE DATA IN ISIS MSG
XOMII4	RBT	R1,WTCNT2
	JE	XOMII6			:IF NOT AWAITING 2ND BYTE OF TYPE
	SBT	R1,WIIXT0		:INDICATE AWAITING 1ST BYTE OF ID
	JAL	R4,GETCH		:2ND BYTE OF IIX MSG TYPE
	CLHI	R0,(ID.NEC^-8)
	JEFS	XOMII5			:IF CORRECT TYPE
	SIS	R2,1
	J	XOMII8			: ELSE TRASH BAD DIALECT MSG

XOMII5	SIS	R2,1
	JE	XOMII8			:IF NO MORE DATA IN ISIS MSG

XOMII6	RBT	R1,WIIXT0
	JE	XOMII7			:IF NOT AWAITING HIGH ORDER BYTE OF ID
	JAL	R4,GETCH
	STB	R0,NETCID		:SAVE 1ST BYTE OF ID
	SIS	R2,1
	JE	XOMII8			:IF NO MORE ISIS DTAA
XOMII7	RBT	R1,PIIX			:INDICATE DONE "HEADER" PART OF MSG
	SBT	R1,WTCNT1		:...BUT GET READY FOR NEXT COMMAND
	JAL	R4,GETCH
	STB	R0,NETCID+1		:SAVE LOW ORDER BYTE OF ID
	STH	R2,TEMP			:TEMPORARILY SAVE MSG LENGTH

:START A RESPONSE TO NETWORK CONSOLE
	LHI	R7,XOMEX2		:"RESPONSE" DIALECT MSG TYPE
	JAL	R9,XIIXRN		:SEND IT
	LHL	R2,TEMP			:RESTORE MSG LENGTH
	SIS	R2,1
	JEFS	XOMII8			:IF NO MORE DATA IN ISIS MSG
	LR	R6,R2			:SET UP COUNT FOR COMMAND INPUT LOOP
	J	XOMC10			:PROCESS REST OF MSG AS IF NORMAL CMD

XOMII8	LR	R0,R2			:COUNT TO FLUSH
	JAL	R4,FLUSH,,
	J	MMFRA,,


:	GLOBAL MESSAGE PROCESSOR
:	HANDLES "SELECT DIALECT" MESSAGE OF NETWORK CONSOLE
XIIXDI	LR	R6,R2			:COPY MSG COUNT
	JAL	R4,GETCH		:FLUSH MSG TYPE
	L	R3,XOMDIA		:PART OF DIALECT CODE RECEIVED
	LB	R7,XOMDBY		:LENGTH OF DIA CODE RECVD
XIIXD2	JAL	R4,GETCH		:NEXT DIALECT CHAR
	SLLS	R3,8
	OR	R3,R0			:UPDATED DIALECT CODE RECVD
	CLI	R3,(IX.SDR^10)!ID.NEC
	JE	XIIXD6			:IF NETWORK CONSOLE DIALECT
	CLI	R3,(IX.SDR^10)!ID.ASC
	JE	XIIXD3			:IF ASCII DIALECT
	AIS	R7,1			:NE LENGTH OF DIALECT RECVD
	CLHI	R7,4
	JL	XIIXD4
	LR	R0,R6
	SIS	R0,1
	JAL	R4,FLUSH,,
	J	XOMZP2

XIIXD3	LR	R0,R6
	SIS	R0,1
	JAL	R4,FLUSH,,		:FLUSH REST OF MESSAGE
	LR	R2,R1			:GET DPORT
	RBT	R1,PIIX			:NO LONGER PROCESSING IIX
	RBT	R1,IIXCAL		:DO NOT TREAT AS AN IIX CALL
	J	NXOM11,,		:GO SEND XOM GREETING

XIIXD4	SIS	R6,1
	JG	XIIXD2
	ST	R3,XOMDIA		:SAVE DIALECT RECVD
	STB	R7,XOMDBY		:SAVE LENGTH
	JAL	R4,ELIR,,
	J	MMFRA,,
:	HERE IF GOT XOM'S DIALECT (NETWORK CONSOLE)
XIIXD6	SBT	R1,WTCNT1		:INDICATE AWAITING 1ST BYTE OF TYPE
	SBT	R1,IIXDIA		:INDICATE IN DIALECT MODE NOW
	LR	R0,R6
	SIS	R0,1
	JAL	R4,FLUSH,,		:END IDSIS MSG
	CTLMSG(SIX,RX3)
	LIS	R0,9
	LIS	R2,6
	JAL	R4,SLOR,,
	LHI	R0,IX.SDC^-8
	JAL	R4,PUTCH
	LI	R0,((86^18)!(XOMPID^8)!VERSIO)
	JAL	R4,PUTW,,
	LHI	R0,REVLEV
	JAL	R4,PUTCH
	JAL	R4,ELOR,,
	JAL	R9,XIIXR5		:SEND "CMD AND CONSOLE DATA" IIX MSG
	JAL	R9,XIIXR4		:SEND "COMMAND READY" IIX MSG
	J	MMFRA,,			: AND WAIT FOR A COMMAND

:	Command Line Array Input Routine
:
:	GETNXT	-	gets a character from the CMDLIN array
:
:			Input   R1 - pointer to one before char position
:				R5 - pointer to one past last char of data
:
:			Output   R0 - character
:
:			Returns to 4,R7 if a character is found
:				to R7 if the array is exhausted
:
GETNXT	AIS	R1,1
	CR	R1,R5
	JGER	R7			:IF END OF DATA REACHED
	LB	R0,CMDLIN,R1
	J	4,R7

:	Error Notification Routine	- Outputs a question mark, the error type
:				  and then prompts for the next command.
:		Input
:			R6 - Error Type
:			R8 - Link to Caller
:
:		Uses
:			R0-4,R6-8,13-15
:
:
XOMERR	LIS	R0,8			:MSG LENGTH
	LH	R1,XOMPRT		:XOM'S DPORT NUMBER
	LIS	R2,5			:AMOUNT OF DATA IN MSG
	JAL	R4,BSLOR,,
	LIS	R0,CR
	JAL	R4,BPUTCH
	LIS	R0,LF
	JAL	R4,BPUTCH
	LHI	R0,QMARK
	JAL	R4,BPUTCH
	LR	R0,R6
	JAL	R7,PUTBYT
	JAL	R4,BELOR,,
	JR	R8

SSTTL(LOG REPORT QUERY AND MODIFY FUNCTS)

:
:	******************************************
:	******************************************
:	**					 **
:	**	XOM Command Processors		 **
:	**					 **
:	******************************************
:	******************************************
:
:
:
:
:	*****************************************
:	*					*
:	*	XOM Log Report Query and	*
:	*	 Modify Functions		*
:	*					*
:	*****************************************
:
:	Log Report Interval Query
XOMLIN	LIS	R0,2			:MIN # PARAMETERS
	JAL	R9,XOMSU3		:GET LINK #, SEE IF ENOUGH PARS
	LA	R0,LIN.LT,,		:ADR OF HALFWORD ARRAY TO DISPLAY
	LCS	R1,1			:INDICATE NO 2ND HALFWORD ARRAY
	LCS	R2,1			:NO LINE NUMBER DISPLAYED
	J	XOMSU2			:GO DISPLAY

:	Log Report Active List Query
:	 display flags indicating which log reports are on
XOMLTY	LIS	R0,2			:MIN # PARS
	JAL	R9,XOMSU3		:GET LINK #, SEE IF ENOUGH PARS
XOMLA1	LHI	R2,5+NLOGG0*0A+1+NLOGG1*0A	:LENGTH OF MSG
	JAL	R9,XOMSTM
	LHI	R9,NLOGG0		:# OF TYPE A LOG REPORT GROUPS
	SLLS	R9,2			:# OF BYTES OF FLAGS FOR TYPE A
	LR	R8,R9
	MHR	R8,RL			:OFFSET TO BEG OF LINK RL'S FLAGS
	A	R8,LGA.LT,,		:ABSOLUTE ADR FOR 16 FLAGS
XOMLA3	LHL	R0,,R8			:16 FLAGS
	JAL	R7,PUTHFS		:DISPLAY THESE
	AIS	R8,2
	SIS	R9,2
	JGBS	XOMLA3			:IF MORE FLAGS FOR TYPE A REPORTS
	LHI	R9,NLOGG1		:# FLAGS/32 FOR TYPE B REPORTS
	SLLS	R9,2			:# BYTES OF FLAGS
	LR	R8,R9
	MHR	R8,RL
	A	R8,LGA.LT+4,,
XOMLA6	LHL	R0,,R8			:16 FLAGS
	JAL	R7,PUTHFS
	AIS	R8,2
	SIS	R9,2
	JGBS	XOMLA6			:IF MORE FLAGS FOR TYPE B REPORTS
	JAL	R9,XOMENM
	J	XOMLA1			:IF ANOTHER LINK





:	Log Report Interval Selector
:	 All active log reports are made immediately, then a new minimum
:	 interval for timouts is found and used.
XMCLIN	LIS	R0,3			:MIN NUMBER OF PARAMETERS
	LIS	R1,0			:NO SPECIAL STATE REQUIRED
	JAL	R9,XSUCCS		:VALIDATE LINK #, # OF PARAMETERS
	LR	R6,R11			:NEW INTERVAL
LOGRT1	LI	R2,8000
	CLR	R6,R2
	JG	P2EXOM			:IF INTERVAL >2^14
	JFFOH	R6,LOGRT2
	JFS	LOGRT3			:IF INTERVAL WAS 0
LOGRT2	SRL	R2,0,R7
	XR	R2,R6
	JN	P2EXOM			:IF INTERVAL IS NOT A POWER OF 2
LOGRT3	LA	R1,LIN.LT,RL,RL					:SCHEN 23-Apr-86
	LIS	R3,2						:SCHEN 15-Apr-86
	LR	R0,R6						:SCHEN 15-Apr-86
	JAL	R4,XMROTM		:CHANGE NEW INTERVAL IN RBTL :SCHEN 15-Apr-86
:	Recalculate minimum interval for log report timouts
	LIS	R3,0
	STH	R3,LINMIN		:RESET TO 0 FIRST
	LI	R2,8001			:FLAG INDICATING ALL INTERVALS = 0
	LHI	R1,NLINKS-1
LOGRT5	STH	R3,LTO.LT,R1,R1		:ZERO PERIOD UNTIL ALL REPORTS MADE
	LHL	R0,LIN.LT,R1,R1
	JEFS	LOGRT6			:IF INTERVAL=0, IGNORE IT
	CLR	R0,R2
	JGEFS	LOGRT6			:IF NOT SMALLEST INTERVAL, IGNORE IT
	LR	R2,R0			: ELSE COPY MIN INTERVAL SO FAR
LOGRT6	SIS	R1,1
	JGEBS	LOGRT5
	CLI	R2,8001
	JEFS	LOGRT8			:IF ALL INTERVALS 0
	STH	R2,LINMIN		: ELSE UPDATE MIN INTERVAL
LOGRT8	LA	R0,TNMLOG,,
	JAL	R5,TONOW,,		:MAKE LOG REPORTS FOR ALL LINKS
	LA	R0,TNMLOG,,
	JAL	R5,TOGET,,
	LHL	R1,LINMIN
	JE	XOMRSP			:IF NO MORE REPORTS TO BE MADE
	LHI	R2,RATE*$A60
	MHR	R1,R2
	A	R1,FASTC,,
	JAL	R5,TOPUT,,		:MAKE SURE ENTRY IS ON TIMOUT LIST
	J	XOMRSP


:	Log Report Type Activator/Inactivator
:	NOTE: FML WORKS ONLY FOR 1 LINK--LINK #0
XMCLTY	HS
  IF	FML
	LIS	R0,4
  ELSE
	LIS	R0,3			:MIN # PARS
  EI
	JAL	R9,XOMSU3
  IF	FML
	LHL	R11,XOMPAR+4		:GET LINE #
	CLHI	R11,NLINES
	JGE	BLEXOM
	LHL	R0,XOMPAR+6
  ELSE
	LHL	R0,XOMPAR+4		:ON/OFF SWITCH (NON-ZERO IF ON)
  EI
	STH	RL,TEMP
	STH	R11,TEMP+2		:SAVE # LINKS (LINE # IF FML)

	LIS	R6,0			:INITIALLY ASSUME ALL REPORTS TO TOGGLE
					: BEGIN WITH INTERNAL TYPE 0
LOGR05	HS
  IF	FML
	LIS	R1,4
  ELSE
	LIS	R1,3			:CURRENT PARAMETER #
  EI
	CLB	R1,XOMNPS
	JL	LOGR20			:IF  LOG REPORT RANGE IS GIVEN
LOGR07	LIS	R2,0			: ELSE START AT REPORT #0
	LHL	R3,ERN.LT,R6,R6		:NUMBER OF REPORTS FOR TYPE
	SIS	R3,1
	J	LOGR38

LOGR10	CLB	R1,XOMNPS
	JGE	LOGR80			:IF NO MORE RANGES
LOGR20	LH	R2,XOMPAR,R1,R1		:BEG OF RANGE
	JGEFS	LOGR30			:IF FLAG SAYS SINGLE VALUE
	NHI	R2,07FFF		:STRIP FLAG
	AIS	R1,1
LOGR30	LHL	R3,XOMPAR,R1,R1		:END OF RANGE
	SHI	R2,10
	JL	BREXOM
	SHI	R3,10
	CLHI	R3,70
	JLFS	LOGR35
	LIS	R6,1			:MUST BE TYPE 1 REPORTS
	SHI	R2,70
	JL	BREXOM
	SHI	R3,70
LOGR35	CLH	R3,ERN.LT,R6,R6
	JGE	BREXOM			:IF RANGE IS TOO LARGE
	AIS	R1,1
LOGR38	LHL	R8,LGN.LT,R6,R6		:#OF SWITCH GROUPS FOR THIS TYPE FOR 1 LINK
	LR	R9,R8
	SLLS	R9,2
	MHR	R9,RL
	LR	R4,R6
	AR	R4,R4
	L	R5,LGA.LT,R4,R4		:BASE ADR FOR THIS TYPE'S SWITCHES
LOGR40	LR	R0,R0
	JEFS	LOGR50			:IF TURN OFF THIS LOG REPORT
	SBT	R3,,R5,R9		: TURN ON RPT
	JFS	LOGR55
LOGR50	RBT	R3,,R5,R9		: TURN OFF RPT
LOGR55	SIS	R3,1			:NEXT RPT INDEX
	CR	R3,R2
	JGEBS	LOGR40			:IF MORE RPTS IN RANGE
	J	LOGR10			:NEXT RANGE

LOGR80	HS
  IF	FML
:	J	LOGR85			:ONLY CHANGE 1 LINK/LINE FOR FML
  ELSE
	AIS	RL,1			:NEXT LINE
	SIS	R11,1
	JG	LOGR05			:IF MORE LINES
  EI
LOGR85	HS
  IF	FML
	LIS	R1,4
  ELSE
	LIS	R1,3
  EI
	CLB	R1,XOMNPS
	JL	XOMRSP
	AIS	R6,1
	CLHI	R6,2
	JGE	XOMRSP
  IF	FML
	LHL	RL,TEMP+2		:GET LINE # FOR TYPE 1 REPS
  ELSE
	LHL	RL,TEMP		:GET LINK NUMBER BACK
	LHL	R11,TEMP+2		:GET NUMBER OF LINKS BACK
  EI
	J	LOGR07

SSTTL(SYSGEN OPTION QUERY ROUTINES)
:	*****************************************
:	*					*
:	*	Sysgen Option Query Routines	*
:	*					*
:	*****************************************

::	All Sysgen Option Query
XOMASQ	LA	R0,XOMAS2		:RETURN ADR FOR EACH OPTION
	ST	R0,XOMRTN
	LIS	R2,0		:CMD NUMBER OF 1ST OPTION (MINUS 1)
	LHI	R1,0FFFF		:UNIVERSAL 1ST PARAMETER
	STH	R2,XOMPAR
	STH	R1,XOMPAR+2
	LIS	R0,2
	STB	R0,XOMNPS		:ALWAYS TWO PARAMETERS
	J	XOMRSP			:DISPLAY THE XOM PROMPT AND BEGIN QUERIES


:	ALL SYSGEN OPTION COMMAND QUERIES START HERE
XOMAS1	LIS	R2,5			:LENGTH OF CMD # + A BLAMK
	JAL	R9,XOMSTM		:DISPLAY THIS
	LIS	R11,2			:MAKE SURE *XOMENM* RETURNS TO R9
	JAL	R9,XOMENM		:END MSG (BUMPS RL)
	LH	R1,XOMCMD-2,RL,RL	:CMD ADDRESS FROM INDEX TABLE
	J	XOMCMD,R1		:PROCESS ONE QUERY

:	EACH OPTION QUERY RETURNS HERE
XOMAS2	LHL	RL,XOMPAR
XOMAS3	AIS	RL,1
	CLHI	RL,L.XOMCM-1					:SCHEN 6-Dec-84
	JLFS	XOMAS4			:IF MORE QUERIES
	JG	XOMRSP			:IF DONE ALL, RETURN NORMALLY
	LIS	R0,0			: ALMOST DONE--PREPARE FOR NORMAL RETURN
	ST	R0,XOMRTN

XOMAS4	TBT	RL,XOMQSO
	JEBS	XOMAS3			:IF NOT A QUERY ALL
	STH	RL,XOMPAR		:SAVE NEXT CMD INDEX
	J	XOMAS1



:	+++++++++++++++++++++++++++++++++++++++++
:	+					+
:	+	Global Option Queries		+
:	+					+
:	+++++++++++++++++++++++++++++++++++++++++

::	Protocol Query
XOMPRO	LIS	R2,$A 14		:MAX LENGTH OF MSG
	LH	R1,XOMPRT
	LHI	R0,3,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
  IF	X.25
	LIS	R0,0
  ELSE
	LIS	R0,1
  EI
	JAL	R7,PUTHAS		:DISPLAY INTERFACE TYPE
  IF	HDLC
	LIS	R0,0
  ELSE	BSCEBC
	LIS	R0,1
  ELSE	BSCSPA
	LIS	R0,2
  ELSE	BSCODD
	LIS	R0,3
  EI
	JAL	R7,PUTHAS		:DISPLAY HARDWARE TYPE
  IF	LAPB
	LIS	R0,0
  ELSE	LAP
	LIS	R0,1
  ELSE	SLP
	LIS	R0,2
  ELSE	MLP
	LIS	R0,3
  ELSE
	LIS	R0,4
  EI
	JAL	R7,PUTHAN		:DISPLAY LINK ACCESS PROTOCOL TYPE
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP


::	Number of DPORTS Query
XOMDPO	LIS	R0,7
	LH	R1,XOMPRT
	LIS	R2,4
	JAL	R4,BSLOR,,
	LIS	R12,0
	LHI	R0,MAXPRT-XOM
	JAL	R7,PUTHAN		:DISPLAY # OF DPORTS
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP


::	Line-Logical Units Query
XOMLLU	LIS	R0,2
	JAL	R9,XOMSU3
  IF	FML
	LHI	R11,NLINES		:DO ALL LINES FOR THIS LINK
  EI
XOMLL1	HS
  IF	FML
	LIS	RL,0			:FML ONLY HAS LINK 0
  EI
	LIS	R2,$A 15
	JAL	R9,XOMSTM		:DISPLAY LINK #
  IF	FML
	LR	RL,R11			:LINK #=LINE #
	LR	R0,R11
  ELSE	(LAP!LAPB!SLP)
	LIS	R0,0			:ALWAYS ONE LINE HERE
  EI
	JAL	R7,PUTHAS		:DISPLAY LINE #
XOMLL3	LB	R0,SLU.LT,RL,
	JAL	R7,PUTHAS		:DISPLAY LU #
	JAL	R9,XOMENM
	J	XOMLL1			:IF ANOTHER LINK






::	Host-Links Query
XOMHSL	LIS	R0,2			:MIN # PARS
	JAL	R9,XOMSU4		:SET UP FOR THIS QUERY
	AR	RL,RL			:DOUBLE REL. HOST #
XOMHS7	LHI	R2,$A 14
	LR	R5,RL			:COPY REL HOST #
	LHL	R0,PORTS,RL,		:GET HOST STATUS FLAGS
	SRLS	R0,$A14
	CLHI	R0,3			:TEST FOR HOST GONE
	JE	XOMHS8			:NOTHING TO SAY IF SO
	LHL	R0,HOSTS,RL,		:LOOK AT ACTUAL HOST #
	JE	XOMHS8			:NOT GONE BUT NO HOST THERE EITHER
	LR	RL,R0			:ACTUAL HOST #
	JAL	R9,XOMSTM		:START DISPLAY WITH HOST #
	LR	RL,R5			:RESTORE REL HOST #
:	DISPLAY HOST'S LINK ACCESS BIT ARRAY
	LHL	R0,LHST.F,RL,RL
	JAL	R7,PUTHFS		:DISPLAY 16 LINK ACCESS FLAGS
	LHL	R0,LHST.F+2,RL,RL
	JAL	R7,PUTHAF
	JAL	R9,XOMENM		:END DISPLAY FOR THIS HOST
	AIS	RL,1			:CORRECT FOR TWICE REL HOST #
	J	XOMHS7

XOMHS8	JAL	R9,XOMEN2		:END NON-MESSAGE, UPDATE COUNTERS
	AIS	RL,1			:CORRECT FOR TWICE REL HOST #
	J	XOMHS7



::	Host Cost Query
XOMHCO	HS
  IF	1-HCO.MX
	J	CDEXOM			:IF CODE NOT USED
  ELSE
	LIS	R0,2			:MIN # PARAMETERS
	JAL	R9,XOMSU4
XOMHC2	LHI	R2,$A34
	LHL	R0,HOSTS,RL,RL		:GET ACTUAL HOST #
	JEFS	XOMHC4			:NO HOST THERE
	LHL	R0,PORTS,RL,RL		:GET HOST STATUS FLAGS
	SRLS	R0,$A14			:MASK OFF OTHER STUFF
	CLHI	R0,3			:TEST FOR GONE
	JNFS	XOMHC3			:SOMETHING TO PRINT IF NOT
XOMHC4	JAL	R9,XOMEN2		:END NON-MESSAGE, UPDATE COUNTERS
	J	XOMHC2

XOMHC3	LR	R5,RL			:COPY RELATIVE HOST NUMBER
	LHL	RL,HOSTS,RL,RL		:HOST NUMBER
	JAL	R9,XOMSTM		:DISPLAY HOST NUMBER
	LR	RL,R5
	LB	R0,MINCST,RL
	JAL	R7,PUTHAS		:DISPLAY MINIMUM COST
	LB	R0,MAXCST,RL
	JAL	R7,PUTHAS		:DISPLAY MAXIMUM COST
	LHL	R0,MAXPAT,RL,RL
	JAL	R7,PUTHAS		:DISPLAY MAXIMUM FREE PATHS TO HOST
	LHL	R0,MINPAT,RL,RL
	JAL	R7,PUTHAS		:DISPLAY MINIMUM FREE PATHS TO HOST
	LB	R0,NCI.HT,RL,
	JAL	R7,PUTHAS		:DISPLAY CURRENT # OF COST INTERVALS
	LB	R0,MCI.HT,RL,
	JAL	R7,PUTHAN		:DISPLAY MAX ALLOWABLE COST INTERVALS
	JAL	R9,XOMENM		:IF MORE HOSTS TO DISPLAY
	J	XOMHC2			: ELSE DO ANOTHER HOST
  EI


::	Host Port Availability Query
XOMHPO	LIS	R0,2
	JAL	R9,XOMSU4		:VALIDATE HOST #, ETC
XOMHP2	LIS	R2,$A15			:MAX DISPLAY LENGTH
	LR	R5,RL			:COPY RELATIVE HOST #
	LHL	R0,HOSTS,RL,RL		:GET ACTUAL HOST #
	JEFS	XOMHP3			:IF NOT HOST THERE
	LHL	R0,PORTS,RL,RL		:GET HOST STATUS FLAGS
	SRLS	R0,$A14			:MASK OFF OTHER STUFF
	CLHI	R0,3			:TEST FOR HOST GONE
	JNFS	XOMHP4			:PROCEED IF NOT
XOMHP3	JAL	R9,XOMEN2		:END NON-MESSAGE, UPDATE POINTERS
	J	XOMHP2			:DO NEXT HOST

XOMHP4	LHL	RL,HOSTS,RL,RL
	JAL	R9,XOMSTM		:DISPLAY ACTUAL HOST #
	LR	RL,R5			:RESTORE RELATIVE HOST #
	LHL	R0,PAA.HT,RL,RL
	JAL	R7,PUTHAS		:DISPLAY 'AVAILABLEABOVE'
	LHL	R0,PUB.HT,RL,RL
	JAL	R7,PUTHAS		:DISPLAY 'UNAVAILABLEBELOW'
	JAL	R9,XOMENM		:CLEAN UP THIS MSG
	J	XOMHP2			:IF MORE HOSTS TO QUERY


::	Link-Host Number Query
XOMLHN	LIS	R0,2			:MIN NO PARAMETERS
	JAL	R9,XOMSU3
XOMLH2	LIS	R2,$A 10		:LENGTH OF DATA MSG
	JAL	R9,XOMSTM		:DISPLAY LINK #
	LB	R8,LH.MT,RL,
	LHL	R0,HOSTS,R8,R8
	JAL	R7,PUTHAN		:DISPLAY HOST SERVICING THIS LINK
	JAL	R9,XOMENM
	J	XOMLH2

:	Host Key Query
XOMHKE	LIS	R0,2
	JAL	R9,XOMSU4
XOMHK2	LIS	R2,9
	LR	R5,RL
	LHL	R0,HOSTS,RL,RL
	JEFS	XOMHK3			:IF NO HOST THERE
	LHL	R0,PORTS,RL,RL		:GET HOST STATUS FLAGS
	SRLS	R0,$A14			:MASK OFF OTHER STUFF
	CLHI	R0,3			:TEST FOR HOST GONE
	JNFS	XOMHK4			:IF NOT
XOMHK3	JAL	R9,XOMEN2		:END NON-MESSAGE, UPDATE POINTERS
	J	XOMHK2			:GO TO NEXT HOST

XOMHK4	LHL	RL,HOSTS,RL,RL		:HOST NUMBER
	JAL	R9,XOMSTM
	LR	RL,R5			:RESTORE REL HOST #
	LB	R0,KEY.HT,RL,
	JAL	R7,PUTHAN		:DISPLAY HOST KEY
	JAL	R9,XOMENM
	J	XOMHK2			:IF ANOTHER HOST TO QUERY



:	DNICNODE Table Query
XOMDNN	HS
  IF	1-DNI.MX
	J	DNEXOM			:IF TABLE SPACE WAS NOT INITIALLY ALLOC
  ELSE
	LCS	R8,1
XOMDN1	AIS	R8,1
	LH	R0,NODTAB,R8,R8
	JLFS	XOMDN3			:IF A DNIC (IE. 8000+DNIC VALUE)
	JE	XOMDN7			:IF END OF NODE LIST
	JAL	R7,PUTHFS		:DISPLAY NODE NUMBER
	JBS	XOMDN1

XOMDN3	LR	RL,R0			:COPY DNIC #
	LR	R8,R8
	JEFS	XOMDN5			:IF 1ST LINE OF OUTPUT
	LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
XOMDN5	NHI	RL,7FFF			:MASK OFF DNIC VALUE
	LHI	R2,5*(DNI.MX+1)+1	:MAX LENGTH OF MSG
	JAL	R9,XOMSTM		:DISPLAY DNIC #
	LHI	R0,SPA
	JAL	R4,BPUTCH		:AND A BLANK TO CLARIFY ANY WRAPAROUND
	AIS	R12,1			:AND COUNT BLANK
	J	XOMDN1			:GET A NODE

XOMDN7	LR	R8,R8
	JEFS	XOMDN9			:IF NO DNICS IN TABLE EXCEPT DEFAULT
	LR	R3,R12			: ELSE END MSG ALREADY STARTED
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL		:GENERATE NEW LINE
XOMDN9	LH	RL,NODTAB+2,R8,R8	:DEFAULT DNIC #
	LIS	R2,5
	JAL	R9,XOMSTM		:DISPLAY DEFAULT DNIC #
	LR	R3,R12			:END MSG
	JAL	R4,BELODR,,
	J	XOMRSP
  EI


:	MAXDNICNODE Query
XOMDNM	LIS	R2,5
	LHI	RL,DNI.MX
	JAL	R9,XOMSTM
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP


:	CUGDNICLIST table query					:SCHEN 30-Oct-84
XOMCDN	HS
  IF	1-CDL.MX
	J 	GLEXOM			:IF TABLE SPACE WAS NOT INITIALLY ALLOC
  ELSE
:	Query all table						:SCHEN 28-Nov-84
	LCS	R8,1
XOMCD1	AIS	R8,1			:ADVNCE POINTER
	LH	R0,CDNTBL,R8,R8
	JE	XOMCD4			:IF END OF TABLE
	CLHI	R0,2000
	JL	XOMCD2			:IF HEADER OF LIST
	JAL	R7,PUTHFS		:DISPLAY DNIC NUMBER
	JBS	XOMCD1
:	DISPLAY HEADER
XOMCD2	LR	R8,R8
	JEFS	XOMCD3			:IF FIRST LINE
	LR	R3,R12
	JAL	R4,BELODR,,		:END OF LOGICAL RECORD
	JAL	R7,XOMCRL		:OUTPUT CRLF
	JAL	R7,XOMCSA		:OUTPUT SPACE
XOMCD3	LB	RL,CDNTBL+1,R8,R8
	LHI	R2,5*(CDL.MX+1)+1	:MAX LENGTH OF MSG
	JAL	R9,XOMSTM		:DISPLAY LIST NUMBER
	LHI	R0,SPA
	JAL	R4,BPUTCH		:AND BLANK
	AIS	R12,1			:INCREMENT MESSAGE COUNT
	LB	R0,CDNTBL,R8,R8
	JAL	R7,PUTBYS		:DISPLAY GOOD OR BAD
	J	XOMCD1			:AND NEXT
:	END OF TABLE
XOMCD4	LR	R8,R8
	JE	M3EXOM			:IF TABLE IS EMPTY
	LR	R3,R12
	JAL	R4,BELODR,,		:END OF LOGICAL RECORD
	J	XOMRSP			:RETURN
  EI	:1-CDL.MX						:SCHEN 28-Nov-84

:	MAXCDLIST Query
XOMCDM	LIS	R2,5
	LHI	RL,CDL.MX
	JAL	R9,XOMSTM
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP


:	CUGMAPPING Query
XOMCMP	HS
  IF	1-CMP.MX
	J	M1EXOM			:IF TABLE SPACE WAS NOT INITIALLY ALLOC
  ELSE
	LIS	R5,1			:INITIAL COUNTER	:SCHEN 30-Jan-85
	LCS	R8,1
XOMCM1	AIS	R8,1
	CHI	R5,4
	JGEFS	XOMC11			:IF GREATER THAN FOUR ENTRY
	CHI	R5,1
	JNFS	XOMC12			:IF FIRST ENTRY	
XOMC11	L	R0,CMPTBL,R8,R8
	JE	XOMCM6			:IF TERMINATER
XOMC12	LHL	R0,CMPTBL,R8,R8					:SCHEN 30-Jan-85
	LR	R8,R8
	JE	XOMCM5			:IF FIRST LINE AND FIRST ENTRY
	CHI	R5,4
	JGE	XOMCM4			:IF GREATER THAN FOUR ENTRY THEN NEXT LINE
	CHI	R5,3
	JEFS	XOMCM2			:IF FOURTH ENTRY
	JAL	R7,PUTHFS		:DISPLAY SECOND/THIRD ENTRY
	JFS	XOMCM3
XOMCM2	JAL	R7,PUTBYS		:OUTPUT LIST NUMBER
XOMCM3	AIS	R5,1			:ADVANCE COUNTER
	J	XOMCM1

XOMCM4	LR	R3,R12
	JAL	R4,BELODR,,		:END OF LOGICAL RECORD
	JAL	R7,XOMCRL		:OUTPUT CRLF
	JAL	R7,XOMCSA		:OUTPUT SPACE
XOMCM5	LHI	R2,5*(CMP.MX+1)+1	:MAX LENGTH OF MSG
	LHL	RL,CMPTBL,R8,R8
	JAL	R9,XOMSTM		:DISPLAY ONE ENTRY
	LIS	R5,1			:INITIAL COUNTER
	J	XOMCM1
XOMCM6	LR	R8,R8
	JE	M3EXOM			:IF TABLE IS EMTY
	LR	R3,R12
	JAL	R4,BELODR,,		:END OF LOGICAL DATA RECORD
	J	XOMRSP
  EI	:1-CMP.MX

:	MAXCMAPPING Query
XOMCMM	LIS	R2,5
	LHI	RL,CMP.MX
	JAL	R9,XOMSTM
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP					:SCHEN 30-Oct-84





:	+++++++++++++++++++++++++++++++++++++++++
:	+					+
:	+	Link Option Queries		+
:	+					+
:	+++++++++++++++++++++++++++++++++++++++++

:	Primary and Secondary Address Query
XOMPSA	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,PADRT,,		:ARRAY OF PRIMARY ADRS
	LA	R1,SADRT,,		:ARRAY OF SECONDARY ADRS
	LIS	R2,0			:INDICATE DISPLAY LINE #
	J	XOMSU1


XOMPAN	LIS	R0,2			:MIN # OF PARS
	JAL	R9,XOMSU3
	LA	R0,NOP.MK,,		:PTR TO OPTION TABLE
	LCS	R1,1			:INDICATE NO OTHER BYTES NEEDED
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1

:	PAD Forwarding Query
XOMPAF	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,TREF3,,		:PTR TO TYMSAT CHAR TABLE
	LA	R1,HREF3,,		:PTR TO TYMCOM CHAR TABLE
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1

:	PAD Idle Timer Query
XOMPAI	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,TREF4,,		:TYMSAT TIMER TABLE
	LA	R1,HREF4,,		:TYMCOM TIMER TABLE
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1


:	PAD Break Handling Query
XOMPAB	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,TREF7,,		:PAD BREAK HANDLING TABLE
	LCS	R1,1
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1


:	PAD Echoable Character Query
XOMECO	LIS	R0,2
	JAL	R9,XOMSU3
XOMEC1	LHI	R2,$A 45		:# CHARS IN DATA MSG
	JAL	R9,XOMSTM
	LIS	R9,8			:128 ECHO ENABLE BIT FLAGS (8 HFWORDS)
	LR	R8,RL
	SLLS	R8,4			:16 BYTES PER LINK
XOMEC2	LHL	R0,DETBL,R8,
	JAL	R7,PUTHFS
	AIS	R8,2
	SIS	R9,1
	JG	XOMEC2			:IF MORE CHARS LEFT
	JAL	R9,XOMENM		:END THIS LINK'S DISPLAY
	J	XOMEC1




:	Link level Window Size
XOMK	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,K.LT,,		:ARRAY OF WINDOW SIZES
	LCS	R1,1			:INDICATE NO OTHER ARRAY
	LIS	R2,0			:INDICATE DISPLAY LINE #
	J	XOMSU1


:	Maximum Link Level Window Size
XOMMXK	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,MXK.LT,,
	LCS	R1,1
	LIS	R2,0			:INDICATE DISPLAY LINE #
	J	XOMSU1



:	Maximum Number of Retransmissions on Link
XOMN2	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,RTCNT,,		:ARRAY OF RETRANS COUNTS
	LCS	R1,1			:NO OTHER ARRAY
	LIS	R2,0			:INDICATE DISPLAY LINE #
	J	XOMSU1



:	Retransmission Timer for Link Level
XOMT1	LIS	R0,2
	JAL	R9,XOMSU3
XOMT1A	LIS	R2,$A 14
	JAL	R9,XOMSTM
	LIS	R0,0
	JAL	R7,PUTHAS		:DISPLAY LINE #
	LHL	R0,T1.LT,RL,RL		:T1 TIMER VALUE IN CLOCKTICKS
	LHI	R2,RATE/0A		:CLOCKTICKS PER 1/10TH OF A SECOND
	DHR	R0,R2
	LR	R0,R1			:TIMER VALUE IN 1/10THS(IGNORE REMAINDER)
	JAL	R7,PUTHAN		:DISPLAY TIMER VALUE
	JAL	R9,XOMENM
	J	XOMT1A


:	Idle Line Timers
XOMIDL	HS
  IF	FML!BSC
	J	IDEXOM			:INVALID IN THESE CASES
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMID2	LHI	R2,$A20
	JAL	R9,XOMSTM
	LIS	R0,0
	JAL	R7,PUTHAS		:DISPLAY LINE #(=0 FOR LAP(B),SLP)
	LH	R0,LIDLTM,RL,RL		:(NEGATIVE) TIMER VALUE
	LCS	R1,1
	XR	R0,R1			:CONVERT TO POSITIVE VALUE
	AIS	R0,1
	JAL	R7,PUTHAS
	LHL	R0,LIDLTH,RL,RL
	JAL	R7,PUTHAS
	JAL	R9,XOMENM
	J	XOMID2
  EI


:	Frame Inactivity Timer - RR/RNR Command
XOMILC	HS
  IF	FML!LAP
	J	LIEXOM
  ELSE
	LIS	R1,0
	JFS	XOMIL1
  EI

:	Frame Inactivity Timer - RR/RNR Response
XOMILR	HS
  IF	FML
	J	FIEXOM
  ELSE
	LCS	R1,1
XOMIL1	LIS	R5,0			:LINE NUMBER
	L	R0,ILRC.F,,		:GET CMD/RSP FLAGS
	XR	R0,R1			:INVERT FLAGS(IF RESPONSE)
	ST	R0,TEMP3		:SAVE FLAGS
	LIS	R0,2
	JAL	R9,XOMSU3

XOMIL4	LIS	R2,$A 14
	JAL	R9,XOMSTM
	LR	R0,R5
	JAL	R7,PUTHAS
	LIS	R0,0
	TBT	RL,TEMP3
	JEFS	XOMIL6			:IF NO TIMER VALUE
	LB	R0,FINACT,RL,R5
XOMIL6	JAL	R7,PUTHAN		:DISPLAY TIMER VALUE
	JAL	R9,XOMENM		:NEXT LINK
	J	XOMIL4			:IF NO MORE LINKS
  EI



:	Configured Channel Number Limits
XOMCCN	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,LCC.LT,,
	LA	R1,HCC.LT,,
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2


:	Incoming Channel Ranges
XOMICN	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,LIC.LT,,		:ARRAY OF LOW INCOMING CHANNELS
	LA	R1,HIC.LT,,		:ARRAY OF HIGH INCOMING CHANNELS
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2


:	Two-way Channel Ranges
XOMTCN	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,LTC.LT,,		:ARRAY OF LOW TWO-WAY CHANNELS
	LA	R1,HTC.LT,,		:ARRAY OF HIGH TWO-WAY CHANNELS
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2


:	Outgoing Only Channel Ranges
XOMOCN	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,LOC.LT,,		:ARRAY OF LOW OUTGIOING CHANNLES
	LA	R1,HOC.LT,,		:ARRAY OF HIGH OUTGOING CHANNELS
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2



:	Restart Timer Query
XOMT10	LIS	R0,2
	JAL	R9,XOMSU3
XOMT1X	LIS	R2,$A15
	JAL	R9,XOMSTM
	LB	R0,T10.LT,RL,
	JAL	R7,PUTHAS
	LB	R0,N10.LT,RL,
	AIS	R0,1			:N10 WAS SAVED AS (N10-1)
	JAL	R7,PUTHAS
	JAL	R9,XOMENM
	J	XOMT1X			:IF ANOTHER LINK



:	Incoming Call Request Timer Query
XOMT11	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,T11.LT,,
	LCS	R1,1
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1



:	Reset Indication Timer Query
XOMT12	LIS	R0,2
	JAL	R9,XOMSU3
XOMT1Y	LIS	R2,$A15
	JAL	R9,XOMSTM
	LB	R0,T12.LT,RL,
	JAL	R7,PUTHAS
	LB	R0,N12.LT,RL,
	AIS	R0,1			:N12 WASSAVED AS (N12-1)
	JAL	R7,PUTHAS
	JAL	R9,XOMENM
	J	XOMT1Y			:IF ANOTHER LINK


:	Clear Indication Timer Query
XOMT13	LIS	R0,2
	JAL	R9,XOMSU3
XOMT1Z	LIS	R2,$A15
	JAL	R9,XOMSTM
	LB	R0,T13.LT,RL,
	JAL	R7,PUTHAS
	LB	R0,N13.LT,RL,
	AIS	R0,1			:N13 WAS SAVED AS (N13-1)
	JAL	R7,PUTHAS
	JAL	R9,XOMENM
	J	XOMT1Z			:IF ANOTHER LINK

:	Packet Window Size Query
XOMPWI	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,PWT.LT,,
	LA	R1,PWR.LT,,
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU1


:	Packet Size Query
XOMPSI	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,PST.LT,,
	LA	R1,PSR.LT,,
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2


:	Maximum Packet Sizes
XOMMXP	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,MST.LT,,
	LA	R1,MSR.LT,,
	LCS	R2,1			:INDICATE DON'T DISPLAY LINE #
	J	XOMSU2



:	Throughput Class Query
XOMTPC	LIS	R0,2
	JAL	R9,XOMSU3
XOMTP0	LIS	R2,$A 14
	JAL	R9,XOMSTM			:START OUTPUT MSG
	LB	R0,TTR.LT,RL,
	LR	R5,R0
	SRLS	R0,4			:GET TRANSMIT TPUT CLASS
	JAL	R7,PUTHAS
	LR	R0,R5
	NHI	R0,0F			:GET RECEIVE TPUT CLASS
	JAL	R7,PUTHAN
	JAL	R9,XOMENM
	J	XOMTP0






:	Throughput Class to Window Mapping
XOMTPW	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLE SPACE ALLOCATED
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMTP2	LR	R8,RL			:GET LINK #		LSH 25-FEB-87
	SLLS	R8,4			:16 BYTES PER LINK	LSH 25-FEB-87
	AIS	R8,1			:INDEX INTO MAPPING ARRAY(IGNORE 1ST)
	LHI	R2,$A 80
	JAL	R9,XOMSTM			:START OUTPUT MSG
	LIS	R9,0F
XOMTP3	LB	R0,TTW.LT,R8,
	JAL	R7,PUTHAS
	AIS	R8,1
	SIS	R9,1
	JG	XOMTP3
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XOMTP2
  EI	(TPUTAB)


:	Throughput Class to Packet Size Mapping Query
XOMTPS	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLE SPACE ALLOCATED
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMTP4	LR	R8,RL			:GET LINK #		LSH 25-FEB-87
	SLLS	R8,4			:16 BYTES PER LINK	LSH 25-FEB-87
	AIS	R8,1
	LHI	R2,$A 80
	JAL	R9,XOMSTM			:START OUTPUT MSG
	LIS	R9,0F
XOMTP5	LH	R0,TTS.LT,R8,R8
	JAL	R7,PUTHAS
	AIS	R8,1
	SIS	R9,1
	JG	XOMTP5
	JAL	R9,XOMENM
	J	XOMTP4
  EI




:	Throughput Class to Standard Class Mapping Query
XOMTPM	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLT SPACE ALLOCATED
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMTP8	LR	R8,RL
	SLLS	R8,4			:16 BYTES PER LINK
	AIS	R8,1			:1ST BYTE IS UNUSED
	LHI	R2,$A 80
	JAL	R9,XOMSTM
	LIS	R9,0F
XOMTP9	LB	R0,TEI.LT,R8,
	NHI	R0,0F			:GET INTERNAL CLASS
	JAL	R7,PUTHAS
	AIS	R8,1
	SIS	R9,1
	JG	XOMTP9
	JAL	R9,XOMENM
	J	XOMTP8
  EI


:	THROUGHPUT CLASS TO TYMNET CIRCUIT SPEED MAPPING.
XOMTCS	LIS	R0,2
	JAL	R9,XOMSU3
XOMCS2	LHI	R8,10			:IT'S 16, NOT 15	:SCY 11-Nov-85
	MHR	R8,RL			:INDEX INTO MAPPING ARRAY
	AIS	R8,1			:DO NOT READ DUMMY TC0	:SCY 11-Nov-85
	LHI	R2,$A 80
	JAL	R9,XOMSTM			:START OUTPUT MSG
	LIS	R9,0F
XOMCS3	LB	R0,TCT.LT,R8,
	NHI	R0,7F
	JAL	R7,PUTHAS
	AIS	R8,1
	SIS	R9,1
	JG	XOMCS3
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XOMCS2


:	TYMNET CIRCUIT SPEED TO THROUGHPUT CLASS MAPPING.
:	R8 SHOULD START AT ZERO
XOMCSI	LIS	R0,2
	JAL	R9,XOMSU3
XMCSI2	LR	R8,RL
	SLLS	R8,2			:INDEX INTO MAPPING ARRAY
	LHI	R2,$A 80
	JAL	R9,XOMSTM		:START OUTPUT MSG
	LIS	R9,04
XMCSI3	LB	R0,CST.LT,R8,
	NHI	R0,0F			:ONLY NEED TO DISPLAY A NIBBLE
	JAL	R7,PUTHAS
	AIS	R8,1
	SIS	R9,1
	JGBS	XMCSI3
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XMCSI2



:	Our DNIC Numbers Query
XOMODN	LHI	R8,ONI.MX
	JE	XOMRSP
	LIS	R0,2
	JAL	R9,XOMSU3
XOMOD1	LHI	R8,ONI.MX		:NUMBER OF ENTRIES PER LINK
	LHI	R2,5*(ONI.MX+1)
	JAL	R9,XOMSTM		:START OUTPUT MSG
	LR	R9,R8			:MAX NUMBER ENTRIES TO OUTPUT
	MHR	R8,RL			:INDEX INTO DNIC TABLE
XOMOD2	LHL	R0,ONI.LT,R8,R8
	JEFS	XOMOD3			:IF NULL ENTRY...LOOK AT NEXT ONE
	JAL	R7,PUTHAS
XOMOD3	AIS	R8,1
	SIS	R9,1
	JG	XOMOD2
XOMOD6	JAL	R9,XOMENM
	J	XOMOD1


:	Maximum Number of Hosts
XOMMHN	LIS	R2,5
	LHI	RL,MXCHST
	LIS	R11,0
	JAL	R9,XOMSTM
	JAL	R9,XOMENM

:	Maximum Number Of DNICs
XOMMDN	LIS	R2,5
	LHI	RL,MDN.MX
	LIS	R11,0
	JAL	R9,XOMSTM
	JAL	R9,XOMENM



:	Called Address Length Check Query
XOMCLL	LIS	R0,2
	JAL	R9,XOMSU3
	LA	R0,CDL.LT,,		:BASE ADR OF LENGTH ARRAY
	LCS	R1,1			:NOT OTHER ARRAY
	LCS	R2,1			:INDICATE DON'T SHOW A LINE #
	J	XOMSU1


:	Canned Calling Address Query
XOMCLG	LA	R5,CLG.LT,,
	LHI	R1,0FE			:FLAGS ARE FE AND FF
	STB	R1,TEMP3
	J	XOMCH0

:	Canned Called Address Query
XOMCLD	LA	R5,CLD.LT,,
	LHI	R1,0FF			:FLAG IS FF
	STB	R1,TEMP3
	J	XOMCH0

:	Check Calling Address Query
XOMCHK	LA	R5,CHK.LT,,
	LHI	R1,0FF			:FAKE OPTION OFF FLAG(NEVER HAPPENS)
	STB	R1,TEMP3
	J	XOMCH0

:	Service For Some Call Address Options
XOMCH0	LIS	R0,2
	JAL	R9,XOMSU3
	LR	R8,R5			:SAVE BASE ADR
XOMCH1	LIS	R0,8
	MHR	R0,RL			:OFFSET FOR THIS LINK
	LR	R9,R8			:GET ARRAY BASE ADR
	AR	R9,R0			:ABSOLUTE ADR
	LHI	R2,$A 35		:MAX DIGITS IN MSG
	LHI	R0,3,R2
	LH	R1,XOMPRT
	JAL	R4,BSLOR,,
	LIS	R12,0
	LR	R0,RL
	JAL	R7,PUTHAS		:DISPLAY LINK NUMBER
XOMCH2	LB	R5,,R9			:1ST ARRAY BYTE=# ADR DIGITS OR A FLAG
	CLI	R8,CLG.LT
	JN	XOMCH4			:IF NOT CALLING ADDRESS QUERY
:DISPLAY NUIADR FIRST
	LIS	R0,0
	TBT	RL,NUI,,
	JEFS	XOMCH3
	LIS	R0,1
XOMCH3	JAL	R7,PUTHAS		:DIAPLAY NUIADR
:NOW HANDLE CLG ADR LENGTH OR FLAG
	CLB	R5,TEMP3
	JL	XOMCH4			:IF NOT A FLAG...DISPLAY LATER
	LR	R0,R5
	JAL	R7,PUTHAS		:DISPLAY FLAG VALUE
	J	XOMCH9			:...AND GO ON TO NEXT LINK

:HERE FOR NON-CLG ADR OR CLG ADR WITH NO FLAG
XOMCH4	CLB	R5,TEMP3
	JGE	XOMCH9			:IF FLAG...DON'T DISPLAY
	LR	R0,R5
	JAL	R7,PUTHAS
XOMCH5	LR	R5,R5
	JE	XOMCH9			:IF NULL CLGADR...DONE FOR LINK

XOMCH6	AIS	R9,1			:BUMP ADR ARRAY INDEX
	LB	R0,,R9			:GET A DIGIT PAIR
	EXBR	R0,R0			:PUT IN LEFT BYTE OF HALFWORD
	SIS	R5,2			:2 LESS ADDRESS DIGITS
	JLEFS	XOMCH7			:IF NO MORE ADDRESS DIGITS
	AIS	R9,1
	LB	R2,,R9			:GET A 2ND DIGIT PAIR
	OR	R0,R2			:PUT IN RIGHT BYTE OF HALFWORD
XOMCH7	JAL	R7,PUTHFS		:DISPLAY BOTH PAIRS
	SIS	R5,2
	JG	XOMCH6			:IF MORE ADR DIGITS LEFT

XOMCH9	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XOMCH1



:	Call User Data String Query
XOMCST	LIS	R0,2			:MIN # PARAMS
	JAL	R9,XOMSU3
XMCST1	LHI	R2,$A 40		:# DATA CHARS IN MSG
	JAL	R9,XOMSTM		:START OUTPUT MSG
	LR	R8,RL			:COPY LINK #
	SLLS	R8,4			:8 HALFWORDS PER LINK
	LHL	R9,CUD.LT,R8,		:GET FLAG (AND POSSIBLY DIGIT COUNT)
	CLI	R9,CUD.UI^8
	JGE	XMCST9			:IF INPUT DIRECTLY BY USER
XMCST2	CLHI	R9,0FF			:CANNED CUD FLAG = 00XX
	JG	XMCST9			:IF CUD FROM USERNAME, JUST DISPLAY LINK #
:	CUD must be canned
	LR	R0,R9			:# CUD OCTETS
	JAL	R7,PUTHAS
	LR	R9,R9
	JE	XMCST9			:IF ONLY 4 DIGIT PROT ID CANNED
	AIS	R8,1
XMCST4	AIS	R8,1
	LB	R0,CUD.LT,R8,		:GET NEXT DIGIT PAIR
	EXBR	R0,R0			:PUT IN LEFT BYTE OF HALFWORD
	SIS	R9,1
	JLEFS	XMCST7			:IF NO MORE DIGIT PAIRS
	AIS	R8,1
	LB	R2,CUD.LT,R8,
	OR	R0,R2
XMCST7	JAL	R7,PUTHFS
	SIS	R9,1
	JG	XMCST4			:IF MORE DIGITS LEFT
XMCST9	JAL	R9,XOMENM
	J	XMCST1



:	Call User Data Username Query
XOMCNM	LIS	R0,2
	JAL	R9,XOMSU3
XOMCN2	LIS	R2,$A 10
	JAL	R9,XOMSTM
	LR	R8,RL
	SLLS	R8,4			:8 HALFWORDS PER LINK
	LH	R0,CUD.LT,R8,
	JLFS	XOMCN9			:IF FROM USER, NOT USERNAME
	SRLS	R0,8			:FLAG AND COUNT NIBBLES
	JLEFS	XOMCN9			:IF CANNED VALUE, NOT FROM USERNAME
	CLHI	R0,CUD.UL
	JLFS	XOMCN6			:IF EXTRACTING FROM RIGHT
	NHI	R0,0F			:GET COUNT
	JFS	XOMCN7
XOMCN6	XHI	R0,0A0			:INDICATE RIGHT EXTRACTION
XOMCN7	JAL	R7,PUTHAN
XOMCN9	JAL	R9,XOMENM
	J	XOMCN2


:	Query High Host Number - 21
XOMHIH	L	RL,HIHST,,	:LOAD CURRENT VALUE
	J	XMSDHR		:DISPLAY AND RETURN



::	XOMTAP(name)	- test the RLth bit in name and display its
:			R12 incremented by 5 on exit
:			   value using *PUTHAS*
:			DESTROYS - R0-4,6,7,13,15
XOMTAP	MACRO(name)[
	KILL	Q
	LIS	R0,0
  IF	name
	TBT	RL,name,,
	JEFS	Q
  ELSE
	TBT	RL,-name,,
	JNFS	Q
  EI
	LIS	R0,1
Q	JAL	R7,PUTHAS
]




:	Inparity Query
XOMINP	HS
  IF	1-INPCOD
	J	PCEXOM
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMIN0	LHI	R2,$A 25
	JAL	R9,XOMSTM
	LIS	R0,2
	TBT	RL,SPCP.F
	JNFS	XOMIN6			:IF SPACE PARITY
	LIS	R0,1
	TBT	RL,MRKP.F
	JNFS	XOMIN6			:IF MARK PARITY
	LIS	R0,0			:MUST BE SAVE PARITY
XOMIN6	JAL	R7,PUTHAS
	XOMTAP(DAP.F)			:DISPLAY TYPE OF DATA PARITY
	XOMTAP(CUDP.F)			:DISPLAY TYPE OF CALL USER DATA PARITY
	XOMTAP(ALL.F)			:DISPLAY TYPE OF PASSTHRU PARITY
	JAL	R9,XOMENM
	J	XOMIN0
  EI


:	Charge Option Query
XOMCRG	LIS	R0,2
	JAL	R9,XOMSU3
XOMCR0	LHI	R2,$A 35
	JAL	R9,XOMSTM
	XOMTAP(CPT.F)
	XOMTAP(RCX.F)
	XOMTAP(RCNA.F)
	XOMTAP(CPNA.F)
	XOMTAP(RCNS.F)
	XOMTAP(RCC.F)
	JAL	R9,XOMENM
	J	XOMCR0			:IF ANOTHER LINK



:	FACILITY SWITCH OPTIONS QUERY
XOMFAC	LIS	R0,2
	JAL	R9,XOMSU3
XOMFA0	LHI	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(FAL.F)
	JAL	R9,XOMENM
	J	XOMFA0



:	PACKET WINDOW NEGOTIATION FACILITY SWITCH OPTION QUERY.
XOMPWN	LIS	R0,2
	JAL	R9,XOMSU3
XOMWN0	LHI	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(PWN.F)
	JAL	R9,XOMENM
	J	XOMWN0



:	PACKET SIZE NEGOTIATION FACILITY SWITCH OPTION QUERY.
XOMPSN	LIS	R0,2
	JAL	R9,XOMSU3
XOMPN0	LHI	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(PSN.F)
	JAL	R9,XOMENM
	J	XOMPN0


:	THROUGHPUT CLASS FACILITY SWITCH OPTIONS QUERY.
XOMTPN	LIS	R0,2
	JAL	R9,XOMSU3
XOMTN0	LHI	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(TCN.F)
	XOMTAP(TCX.F)
	XOMTAP(TCP.F)
	JAL	R9,XOMENM
	J	XOMTN0



XOMCUP	HS
  IF	CUGENA&X.25
	LIS	R0,2			:MIN # PARAMETERS (CMD #, LINK #)
	JAL	R9,XOMSU3		:VERIFY LINK #
	LA	R0,CUP.LT,,		:ADR OF NTNLENGTHS
	LCS	R1,1			:NO 2ND ARRAY
	LCS	R2,1			:INDICATE NO LINE # TO DISPLAY
	J	XOMSU2			:GO DISPLAY NECESSARY INFO
  ELSE
	J	CDEXOM
  EI



:	REVERSE CHARGE FORCING QUERY				:SCHEN 30-Oct-84
XOMCHT	HS
  IF	CHGNSW
	LIS	R0,2			:MIN # PARAMETERS (CMD #, LINK #)
	JAL	R9,XOMSU3		:VERIFY LINK #
XOMCT0	LR	R9,RL
	SLLS	R9,2			:CORRECT FOR FULLWORD INDEX
	LHI	R2,$A 19
	LH	R1,XOMPRT
	LHI	R0,0,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
	LR	R0,RL
	JAL	R7,PUTHAS		:DISPLAY LINK # AND SPACE
	LHL	R0,CHT.LT,R9,
	JAL	R7,PUTHAS		:DISPLAY FIRST HALFWORD OF DCC
	LHL	R0,CHT.LT+2,R9,
	JAL	R7,PUTHAS		:DISPLAY SECOND HALFWORD OF DCC
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1			:NEXT LINK
	JLE	XOMRSP			:EXIT
	JAL	R7,XOMCRL		:DISPLAY CRLF
	JAL	R7,XOMCSA		:DISPLAY ONE SPACE
	J	XOMCT0
  ELSE
	J	CDEXOM			:IF NO TYMFILE USE OR ALLOC SPECIFICATION
  EI	:CHGNSW							:SCHEN 30-Oct-84


:	Closed user group switch options query.
XOMCUS	HS
  IF	CUGENA
	LIS	R0,2
	JAL	R9,XOMSU3
XMCUS0	LHI	R2,$A 20
	JAL	R9,XOMSTM
	XOMTAP(CUS.F)
	XOMTAP(CUI.F)
	XOMTAP(CUO.F)
	XOMTAP(CPR.F)						:HJR 02-02-87
	JAL	R9,XOMENM
	J	XMCUS0
  ELSE
	J	CDEXOM
  EI



:	CLOSED USER GROUP INTERLOCK CODE ASSIGNMENT QUERY.
XOMCUI	HS
  IF	CUGENA&X.25
	LIS	R0,2
	JAL	R9,XOMSU3
XMCUI0	LIS	R8,0		:INIT CUG INDEX
	LHL	R5,CUG.LT,RL,RL	:GET INDEX TO CUG TABLE
	JE	XMCUI8		: IF THIS LINK DOES NOT HAVE CUG
XMCUI2	L	R0,CUGTAB,R8,R5	:GET A CUG ENTRY
	JE	XMCUI4		:IF NOT DEFINED
	LHI	R2,$A 32
	JAL	R9,XOMSTM		:START OUTPUT MSG
	LR	R0,R8
	SRHLS	R0,2
	JAL	R7,PUTHFS	:DISPLAY INDEX
	LHL	R0,CUGTAB,R8,R5	:GET DNIC PORTION
	JAL	R7,PUTHFS	:DISPLAY DNIC PORTION OF INTERLOCK CODE
	LHL	R0,CUGTAB+2,R8,R5
	JAL	R7,PUTHFS	:DISPLAY REST OF THE DIGITS
:	DISPLAY ICB, OCB ARRAYS.
	LR	R14,RL		:PRESERVE LINK NUMBER
	SLLS	RL,CUG.SC+3	:MAKE BIT OFFSET		:HJR 02-02-87
	LR	R2,R8
	SRHLS	R2,2		:GET CUG INDEX
	AR	RL,R2		:CUG INDEX + LINK OFFSET
	XOMTAP(ICB.F)
	XOMTAP(OCB.F)
	LR	RL,R14		:RESTORE LINK NUMBER
	LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA	:END THIS LINE
XMCUI4	AIS	R8,4		:INCREMENT INDEX
	CLHI	R8,CUG.MX*4
	JLE	XMCUI2		:LOOK AT NEXT INDEX
XMCUI8	AIS	RL,1
	SIS	R11,1
	JG	XMCUI0		:IF MORE LINKS TO LOOK AT
	J	XOMRSP
  ELSE
	J	CDEXOM
  EI


:	FAST SELECT FACILITY SWITCH OPTIONS QUERY.
XOMFST	LIS	R0,2
	JAL	R9,XOMSU3
XOMFS0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(FSS.F)
	XOMTAP(FSA.F)
	JAL	R9,XOMENM
	J	XOMFS0



:	RPOA FACILITY SWITCH OPTIONS QUERY.
XOMRPO	LIS	R0,2
	JAL	R9,XOMSU3
XMRPO2	LIS	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(RPP.F)
	JAL	R9,XOMENM
	J	XMRPO2


:	CALL ID UTILITY SWITCH OPTIONS QUERY.
XOMCID	HS
  IF	X.75
	LIS	R0,2
	JAL	R9,XOMSU3
XOMCD0	LIS	R2,$A 10
	JAL	R9,XOMSTM
	XOMTAP(CIC.F)
	JAL	R9,XOMENM
	J	XOMCD0
  ELSE	X.25
	J	X7EXOM
  EI



:	NON CCITT FACILITY/UTILITY SWITCH OPTIONS QUERY.
XOMNAT	LIS	R0,2
	JAL	R9,XOMSU3
XOMNA0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(NAC.F)
	XOMTAP(NAP.F)
	JAL	R9,XOMENM
	J	XOMNA0



:	UNKNOWN FACILITIES PROCESSING SWITCH OPTIONS QUERY.
XOMUNK	LIS	R0,2
	JAL	R9,XOMSU3
XOMUN0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(UNC.F)
	XOMTAP(UNP.F)
	JAL	R9,XOMENM
	J	XOMUN0


:	TRAFFIC CLASS UTILITY SWITC OPTIONS QUERY.
XOMTRA	HS
  IF	X.75
	LIS	R0,2
	JAL	R9,XOMSU3
XOMTR0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(TRC.F)
	XOMTAP(TRP.F)
	JAL	R9,XOMENM
	J	XOMTR0
  ELSE
	J	X7EXOM
  EI



:	BILATERAL CLOSED USER GROUP FACILITY SWITCH OPTIONS QUERY.
XOMBCU	LIS	R0,2
	JAL	R9,XOMSU3
XOMBC0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(BCC.F)
	XOMTAP(BCP.F)
	JAL	R9,XOMENM
	J	XOMBC0



:	Hardware Switch Option Query
XOMHDW	LIS	R0,2
	JAL	R9,XOMSU3
XOMHD0	LIS	R2,$A 15
	JAL	R9,XOMSTM		:DISPLAY LINK #
	LIS	R0,0			:ALWAYS LINE 0
	JAL	R7,PUTHAS		:DISPLAY LINE #
	XOMTAP(-CLKC.F)
	JAL	R9,XOMENM
	J	XOMHD0


:	Frame Level Switch Option Query
XOMFRM	LIS	R0,2
	JAL	R9,XOMSU3
XOMFR0	HS
  IF	LAP
	LHI	R2,$A25
  ELSE
	LHI	R2,$A20
  EI
	JAL	R9,XOMSTM
	LIS	R0,0
	JAL	R7,PUTHAS		:DISPLAY LINE NUMBER
	XOMTAP(F128.F)
  IF	LAP
	XOMTAP(DWD.F)
  ELSE
	LIS	R0,0
	JAL	R7,PUTHAS
  EI
	JAL	R9,XOMENM
	J	XOMFR0


:	Packet Level Switch Option Query
XOMPKT	LIS	R0,2
	JAL	R9,XOMSU3
XOMPK0	LHI	R2,$A 40
	JAL	R9,XOMSTM
	XOMTAP(P128.F)
	XOMTAP(AHC.F)
	XOMTAP(ZCF.F)
	XOMTAP(IPR.F)
	XOMTAP(TKSP.F)
	XOMTAP(BRCA.F)
	XOMTAP(TKDS.F)
	JAL	R9,XOMENM
	J	XOMPK0




:	PAD Options Query
XOMPDO	LIS	R0,2			:MIN # OF PARS
	JAL	R9,XOMSU3
XOMPD0	LHI	R2,$A 60
	JAL	R9,XOMSTM
	XOMTAP(-TREF2)
	XOMTAP(-FITP.3)
	XOMTAP(-FITP.2)
	XOMTAP(HITP.3)
	XOMTAP(HITP.2)
	XOMTAP(-X3.R13)
	XOMTAP(-X3.R14)
  IF	PDO.|XONOF|
	XOMTAP(XON.F)
  ELSE
	LIS	R0,0
	JAL	R7,PUTHAS
  EI
	XOMTAP(ETM.F)
	XOMTAP(EOT.F)
	JAL	R9,XOMENM		:END MSG FOR THIS LINK
	J	XOMPD0


:	TELENET Options Query
XOMTEL	HS
  IF	1-TADRS
	J	CDEXOM			:IF TELENET CODE DISABLED
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMTE0	LHI	R2,$A 30
	JAL	R9,XOMSTM
	XOMTAP(TNOP.F)
	XOMTAP(TADR.F)
	XOMTAP(TPID.F)
	XOMTAP(TFAC.F)
	XOMTAP(TCAP.F)
	JAL	R9,XOMENM		:END OF MSG FOR THIS LINK
	J	XOMTE0
  EI

:	DATAPAC	Options Query
XOMDPC	HS
  IF	1-DTARS
	J	CDEXOM			:IF DATAPAC CODE DISABLED
  ELSE
	LIS	R0,2
	JAL	R9,XOMSU3
XOMDP0	LIS	R2,$A 15
	JAL	R9,XOMSTM
	XOMTAP(DNOP.F)
	XOMTAP(DTAR.F)
	JAL	R9,XOMENM
	J	XOMDP0
  EI


:	Query MAXGATEWAYS - 0B9
XOMMXG	LHI	RL,GA.MX		:MAX VALUE AS USERSPECIFIED
	J	XMSDHR			:GO PRINT IT


:	Gateway Query
XOMGAT	LIS	R0,2			:MIN # PARS
	JAL	R9,XOMSU3
XOMGA2	LR	R2,RL
	AR	R2,R2			:TWICE LINK #
	L	R8,GWDNIC,R2,R2		:POINTER TO DNICS FOR LINK
XOMGA3	LHI	R2,$A50
	JAL	R9,XOMSTM			:AT LEAST DISPLAY LINK #
XOMGA4	LHL	R5,0,R8			:OFFSET OF LOGIN STRING FROM GA.LIS
	JNFS	XOMGA5			:IF POSSIBLY GATEWAY STRING
	JAL	R9,XOMENM		:  ELSE DISPLAY ONLY LINK NUMBER
	J	XOMGA2			:...AND REPEAT FOR NEXT LINK

XOMGA5	THI	R5,0C000
	JN	XOMGA8			:IF NOT A GATEWAY DNIC
XOMGA6	LHL	R0,2,R8
	JAL	R7,PUTHAS		:DISPLAY DNIC
	LI	R1,GA.LIS,R5
	JAL	R7,PUTSC		:DISPLAY LOGIN STRING
	SIS	RL,1
	AIS	R11,1			:FOOL *XOMENM*
	JAL	R9,XOMENM
XOMGA7	AIS	R8,4			:INDEX FOR NEXT GATEWAY DNIC
	LHL	R5,0,R8
	JE	XOMGA9			:IF NO MORE GATEWAYS FOR THIS LINK
	THI	R5,0C000
	JNBS	XOMGA7			:IF NOT A GATEWAY
	J	XOMGA3			:  ELSE DISPLAY ANOTHER GATEWAY STRING

XOMGA8	AIS	R8,4			:NEXT DNIC FOR THIS LINK
	J	XOMGA4

XOMGA9	AIS	RL,1			:NEXT LINK
	SIS	R11,1
	JLE	XOMRSP
	J	XOMGA2


:	RPOA Query
XOMRPG	LIS	R0,2
	JAL	R9,XOMSU3
XMRPG0	LR	R2,RL
	AR	R2,R2
	L	R8,GWDNIC,R2,R2		:PRT TO LINK'S RPOA ENTRIES
	LHI	R2,$A 55
	JAL	R9,XOMSTM
XMRPG1	LHL	R1,0,R8
	JNFS	XMRPG3			:IF NOT END OF LINK'S RPOA ENTRIES
XMRPG2	JAL	R9,XOMENM		:  ELSE DO NEXT LINK
	JBS	XMRPG0

XMRPG3	LHL	R1,2,R8
	STH	R1,TEMP5		:GATEWAY DNIC FOR COMING LIST OF RPOAS
	AIS	R8,4
	LHL	R5,0,R8
	JEBS	XMRPG2			:IF NO MORE RPOAS ON LINK
	THI	R5,0C000
	JEBS	XMRPG3			:IF NO MORE RPOAS FOR THIS GATEWAY
XMRPG5	LHL	R0,TEMP5
	JAL	R7,PUTHAS		:DISPLAY GATEWAY #
	LHL	R0,2,R8
	JAL	R7,PUTHAS		:DISPLAY RPOA DNIC #
	NHI	R5,03FFF		:PTR TO LOGIN STRING
	LI	R1,GA.LIS,R5
	JAL	R7,PUTSC		:DISPLAY LOGIN STRING
	SIS	RL,1
	AIS	R11,1
	JAL	R9,XOMENM
XMRPG7	AIS	R8,4
	LHL	R5,0,R8
	JE	XMRPG9			:IF NO MORE RPOAS ON LINK
	THI	R5,0C000
	JNFS	XMRPG8			:IF ANOTHER RPOA FOR THIS GATEWAY
	LHL	R1,2,R8			:ELSE NEXT GATEWAY DNIC FOR RPOA SEARCH
	STH	R1,TEMP5		:SAVE NEW GATEWAY
	JBS	XMRPG7			:...AND LOOK FOR RPOAS

XMRPG8	LHI	R2,$A55
	JAL	R9,XOMSTM		:DISPLAY LINK NUMBER
	J	XMRPG5			...AND THEN RPOAS

XMRPG9	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	J	XMRPG0






:	*****************************************
:	*					*
:	*	Global Option Queries		*
:	*					*
:	*****************************************

::	Segment Accounting Count Query
XOMSEG	LHI	RL,SEGACT		:GET SEGMENT COUNT
	J	XMSDHR			:DISPLAY IT AND RETURN


::	Receive Sector Number Query
XOMRCV	LHI	RL,NORSLN		:GET NUMBER OF RECEIVE SECTORS
	J	XMSDHR			:DISPLAY AND RETURN




::	Number Of Buffer Characters Query
XOMBFP	LHI	RL,NBFLET		:# BUFFERLETS
	LHI	R0,$A14			:14 CHARS PER BUFFERLET
	MHR	RL,R0			:# CHARS
	J	XMSDHR			:DISPLAY AND RETURN


::	Old Turkey
XOMTOC	LIS	RL,OLDTUR
	J	XMSDHR


::	Infoswitch DNIC Query
XOMINF	LHI	RL,INDNIC
	LIS	R0,INFSW1
	JE	CDEXOM			:IF OPTION NOT USED
	J	XMSDHR


::	MAXIMUM CLOSED USER GROUP INDEX QUERY
XOMMCU	LHI	RL,CUG.MX
	J	XMSDHR


::	THROUGHPUTCLASSTABLES switch
XOMTTS	LIS	RL,TPUTAB
	J	XMSDHR

::	FSLTCODE switch
XOMFCS	LIS	RL,FASTCD
	J	XMSDHR

::	CUGCODE(sw)	ENABLE CLOSED USER GROUP FACILITY CODE
XOMCUC	LIS	RL,CUGCD
	J	XMSDHR

::	COSTCODE switch
XOMCCS	LIS	RL,ONCOS
	J	XMSDHR

::	TELCODE switch
XOMTEC	LIS	RL,ONTEL
	J	XMSDHR

::	DPACODE switch
XOMDCS	LIS	RL,ONDAT
	J	XMSDHR

::	Fml T0 Query
XOMFT0	LHI	RL,XTIME0
	J	XMSDHR


::	Fml TD Timer Query
XOMFTD	LHI	RL,XTIME2
	J	XMSDHR


::	Fml TM Timer Query
XOMFTM	LHI	RL,STIME1
	J	XMSDHR			:DISPLAY AND RETURN

::	XOM Host Number
XOMXHS	LB	RL,XOMHST
	LHL	RL,HOSTS,RL,RL
	J	XMSDHR			:DISPLAY AND RETURN
::	LINK PERFORMANCE STATISTICS - C3
XOMLKP	LIS 	R0,2
	JAL 	R9,XOMSU3
XOMLP1	LR	R8,RL
	AR	R8,R8			:IT IS A WORD ARRAY
	LHI	R2,$A 30
	JAL	R9,XOMSTM
	LH	R0,FCNTLK,R8,R8		:TOTAL FRAMES OVER LINK
	JAL	R7,PUTHAF		:OUTPUT THE FIRST HALF WORD
	LH	R0,FCNTLK+2,R8,R8	:GET THE SECOND HALF WORD
	JAL	R7,PUTHFS
	LH	R0,PCNTLK,R8,R8		:TOTAL PACKETS OVER LINK
	JAL	R7,PUTHAF
	LH	R0,PCNTLK+2,R8,R8
	JAL	R7,PUTHFS
	LH	R0,CCNTLK,R8,R8		:TOTAL CHARACTERS OVER LINK
	JAL	R7,PUTHAF
	LH	R0,CCNTLK+2,R8,R8
	JAL	R7,PUTHFS
	JAL	R9,XOMENM
	J	XOMLP1
:	QUERY LINK ERROR STATISTICS
XOMLKE	LIS	R0,2
	JAL	R9,XOMSU3
XOMLE1	LHI	R2,$A 90
	JAL	R9,XOMSTM
	LR	R8,RL						:LSH 16-APR-87
	LHI	R9,12			:N0. 0F ERROR ITEMS = 18d
XOMLE2	LH	R0,LKSBB,R8,R8		:BEGINNING OF ERROR BLOCK:LSH 16-APR-87
	JAL	R7,PUTHAS	
	AHI	R8,NLINKS		:BUMP THE POINTER TO NEXT ERROR ITEM
	SIS	R9,1
	JNBS	XOMLE2			:IF MORE ERROR ITEMS NEEDED TO BE SENT
	JAL	R9,XOMENM
	J	XOMLE1

  IF 	PVC
:	*****************************************
:	*					*
:	*	PVC QUERY ROUTINES		*
:	*					*
:	*****************************************
:	QUERY PCNL COMMAND
XOMPCR	LIS	R0,2
	JAL	R9,XOMSU3
XOMPR1	LIS	R2,$A 15
	JAL	R9,XOMSTM
	LH	R0,LPC.LT,RL,RL		:LOWEST PVC CHANNEL OF THE LINK
	JAL	R7,PUTHAS
	LH	R0,HPC.LT,RL,RL		:HIGHEST PVC CHANNEL OF THE LINK
	JAL	R7,PUTHAS
	JAL	R9,XOMENM
	J	XOMPR1
 
:	Query PVCHANNEL command
XOMPCH  LIS	R0,2
	JAL	R9,XOMSU3
	CLB	R0,XOMNPS
	JEFS	XOMPC0			:WANT TO QUERY A SPECIFIC LINK
	LH	R0,XOMPAR+2		:GET LINK NO.
	JGEFS	XOMPC1			:WANT TO QUERY A SPECIFIC CHANNEL
XOMPC0	LH	R0,LPC.LT,RL,RL		:WANT TO QUERY A LINK OR ALL LINK
	JL	XOMPC8			:NO PVC ON THIS LINK
	LH	R11,HPC.LT,RL,RL	
	SR	R11,R0
	AIS	R11,1			:R11 = NO OF CHANNELS TO PROCESS
	JFS	XOMPC2
XOMPC1  LH	R0,XOMPAR+4		:R0 - CHANNEL NO. QUERIED
	CLH	R0,LPC.LT,RL,RL
	JL	OREXOM 			:CHANNEL NO. OUT OF RANGE
	CLH	R0,HPC.LT,RL,RL
	JG	OREXOM			:CHANNEL NO. OUT OF RANGE
XOMPC2	LHI	R2,$A 65
	LR	R5,R0			:SAVE CHANNEL NO. IN R5
	JAL	R9,XOMSTM		:START TO OUTPUT LINK NO.
	LR	R0,R5
	LR	R9,R0
	STH	R9,PVCTAB,,		:SAVE CHANNEL NO.
	JAL	R7,PUTHAS
	LA	R2,PVCTAB-10,,		:
	AH	R2,PVCLNK,RL,RL		:R2 - INDEX TO PVCTAB 
	SLHLS	R9,4
	AR	R9,R2			:R9 - FINAL INDEX TO PVCTAB
	LHL	R0,PV.DHS,R9
	JAL	R7,PUTHAS
	LB	R0,PV.DLK,R9
	JAL	R7,PUTBYS
	LHL	R0,PV.DCH,R9
	JAL	R7,PUTHAS
	LB	R0,PV.PST,R9
	JAL	R7,PUTBYS
	LB	R0,PV.PSR,R9
	JAL	R7,PUTBYS
	LB	R0,PV.PWT,R9
	JAL	R7,PUTBYS
	LB	R0,PV.PWR,R9
	JAL	R7,PUTBYS
	LB	R0,PV.TCT,R9
	JAL	R7,PUTBYS
	LB	R0,PV.TCR,R9
	JAL	R7,PUTBYS
	LHL	R8,PV.ULG,R9		: PREPARE TO OUTPUT USER DEFINE LOGON
	LB	R9,PVCLOG,R8,		: STRING
	LR	R0,R9
	JAL	R7,PUTBYS		:OUTPUT LENGTH OF LOGON STRING
	LR	R9,R9
	JLE	XOMPC7
XOMPC4	AIS	R8,1
	LB	R0,PVCLOG,R8,
	EXBR	R0,R0
	SIS	R9,1
	JLEFS	XOMPC6
	AIS	R8,1
	LB	R2,PVCLOG,R8,
	OR	R0,R2
XOMPC6	JAL	R7,PUTHFS
	SIS	R9,1
	JG	XOMPC4
XOMPC7  LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL
	SIS	R11,1
	JEFS	XOMPC8			:DONE WITH A LINK
	LHL	R0,PVCTAB,,		:GET CHANNEL NO.
	AIS	R0,1
	J	XOMPC2			:TRY NEXT CHANNEL
XOMPC8	LB	R0,XOMNPS
	CLHI	R0,2
	JE	XOMRSP			:ALL DONE
	LH	R0,XOMPAR+2
	JGE	XOMRSP			:ALL DONE
	CLHI	RL,NLINKS-1
	JE	XOMRSP
	AIS	RL,1
	J	XOMPC0			:TRY NEXT LINK	



:	QUERY PVC STATUS
XOMPVS	LH	RL,XOMPAR+2
	JGE	XOMPS0			:LINK NO. IS SPECIFIED
	LIS	RL,0
	J	XOMPS2
XOMPS0	LIS	R0,2			:MIN. NO. OF PARAMETERS = 2
	LIS	R8,1			:ASSUME ONLY 1 CHANNEL QUERIED
	CLHI	RL,NLINKS
	JGE	BLEXOM			:BAD LINK NUMBER
	CLB	R0,XOMNPS		
	JEFS	XOMPS2			:CHANNEL NO. IS NOT SPECIFIED
	LHL	R11,XOMPAR+4		:GET CHANNEL NO.
	CLH	R11,LPC.LT,RL,RL	:SEE IF THE CHANNEL IS OUT OF RANGE
	JL	OREXOM
	CLH	R11,HPC.LT,RL,RL
	JG	OREXOM
	JFS	XOMPS3			:CHANNEL NO. IS SPECIFIED
XOMPS2	LH	R11,LPC.LT,RL,RL
	JL	XOMPS6			:THIS LINK HAS NO PVC SPECIFIED
	LH	R8,HPC.LT,RL,RL
	SR	R8,R11
	AIS	R8,1			:R8 = NO OF CHANNELS TO PROCESS
XOMPS3	LIS	R2,$A 15
	JAL	R9,XOMSTM
	LR	R0,R11
	JAL	R7,PUTHAS		:OUTPUT CHANNEL NUMBER
	LIS	R0,0			:ASSUME CHANNEL IS DOWN
	LHL	R5,EPB.LT,RL,RL
	SH	R5,LCC.LT,RL,RL
	AR	R5,R11			:R5 = EPORT 
	LH	R5,EI.MT,R5,R5		
	JL	XOMPS4
	LH	R4,ID.MT,R5,R5
	JLEFS	XOMPS4
	LB	R5,PCKSTE,R5,		:CHECK CHANNEL STATE
	CLHI	R5,PSCALR		
	JLEFS	XOMPS4			:CIRCUIT IN READY OR SEND CALL REQUEST
					:STATE
	CLHI	R5,PWPVCR		:WAIT FOR PVC BUILDING STATE
	JEFS	XOMPS4
	AIS	R0,1			:OTHERWISE THE PVC IS UP
XOMPS4	JAL	R7,PUTBYS		:OUTPUT CHANNEL STATE
	LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL
	SIS	R8,1
	JEFS	XOMPS6
	AIS	R11,1
	J	XOMPS3
XOMPS6	LH	R7,XOMPAR+2
	JGE	XOMRSP			:ALL DONE
	CLHI	RL,NLINKS-1
	JE	XOMRSP			:ALL DONE
	AIS	RL,1
	J	XOMPS2			:TRY NEXT LINK

  EI	PVC

SSTTL(MISCELLANEOUS QUERY ROUTINES)
:	*****************************************
:	*					*
:	*	Miscellaneous Query Routines	*
:	*					*
:	*****************************************
:
:	Miscellaneous Software Information
XOMMSC	LHI	R2,$A 69
	LHL	R1,XOMPRT
	LHI	R0,3,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
	LHI	R0,VERSIO		:X-CODE VERSION NUMBER
	JAL	R7,PUTHAS
	LHI	R0,REVLEV		:X-CODE REVISION LEVEL
	JAL	R7,PUTHAS
	LHL	R0,NODEX,,		:NODE NUMBER
	JAL	R7,PUTHAS
	LHL	R0,HOSTX,,		:KERNEL HOST NUMBER
	JAL	R7,PUTHAS
	LHL	R0,SLOTNO,,		:SLOT NUMBER
	JAL	R7,PUTHAS
	L	R0,STARTL,,		:START TIME FROM LAST LOAD(WRT GMT)
	LR	R8,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R8
	JAL	R7,PUTHFS
	L	R0,STARTH,,		:START TIME FROM LAST HALT(WRT GMT)
	LR	R8,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R8
	JAL	R7,PUTHFS
	LHL	R0,CRSHCT,,		:NUMBER OF CRASHES
	SIS	R0,1			:CORRECT FOR INITIAL STARTUP
	JAL	R7,PUTHAS
	LHL	R0,CRASHC,,		:REASON FOR LAST CRASH
	JAL	R7,PUTHAS
	L	R0,STARTR,,		:MOST RECENT START TIME(WRT GMT)
	LR	R8,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R8
	JAL	R7,PUTHFS
	L	R0,PAHPTS,,		:VALUE OF POINTER TO NEXT PATCH
	SI	R0,PATHIS		: LENGTH OF ALL PATCHES
	SRLS	R0,4			:NUMBER OF 16 BYTE PATCHES
	JAL	R7,PUTHAN
	LR	R3,R12
	JAL	R4,BELODR,,
	J	XOMRSP



:	Miscellaneous Hardware Configuration Information
XOMMHC	LIS	R8,0			:LOGICAL UNIT NUMBER
	LA	R9,TEMP3		:BUFFER ADDRESS (FOR SVC DUMP)
	LIS	RL,3			:NUMBER OF ATTRIBUTES
	J	XOMMH2

XOMMH1	LHI	R2,$A 19
	LH	R1,XOMPRT
	LHI	R0,3,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
	LR	R0,R8
	JAL	R7,PUTHAS		:DISPLAY LU NUMBER
	LR	R0,R11
	JAL	R7,PUTHAS		:DISPLAY DEVICE TYPE
	LB	R0,TEMP3+1
	JAL	R7,PUTHAS		:DISPLAY DEVICE NUMBER
	LB	R0,TEMP3+2
	JAL	R7,PUTHAN		:DISPLAY DEV ATTRIBUTES OR ADDRESS
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	R8,1			:NEXT LU
XOMMH2	SVC	IO,08000+R8,,		:QUERY IO ATTRIBUTES
	J	COEXOM			:IF BAD BUFFER ADR WAS GIVEN
	LB	R11,TEMP3		:DEVICE TYPE
	CLHI	R11,0FE
	JE	XOMRSP			:IF OUT OF LU'S FOR SLOT
	JAL	R7,XOMCRL
	J	XOMMH1



:	Patch History Query
XOMPHS	HS
	LIS	RL,0
XOMPH1	L	R0,PATHIS,RL,
	JE	XOMRSP		:DONE OUTPUTING
	LHI	R2,$A42
	LHL	R1,XOMPRT
	LHI	R0,3,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
	LIS	R5,8
XOMPH2	LHL	R0,PATHIS,RL,
	JAL	R7,PUTHFS
	AIS	RL,2
	SIS	R5,1
	JGBS	XOMPH2
	LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL	:CARRIAGE RETURN AFTER EACH ENTRY
	CLHI	RL,PHSIZE
	JL	XOMPH1		:IF MORE PATCHES
	J	XOMRSP

:	Host Status Query
XOMHSI	LIS	R0,2			:MIN # PARS
	JAL	R9,XOMSU4		:SET UP FOR THIS QUERY
	AR	RL,RL			:DOUBLE REL. HOST #
XOMHS2	LHI	R2,$A 30
	LR	R5,RL			:COPY REL HOST #
	LHL	RL,HOSTS,RL,		:ACTUAL HOST #
	JNFS	XOMHS9			:IF NONZERO HOST #
	LR	RL,R5			:RESTORE RL
	JAL	R9,XOMEN2		:END NON-MESSAGE, UPDATE POINTERS
	AIS	RL,1
	JBS	XOMHS2			:TO DO NEXT HOST

XOMHS9	JAL	R9,XOMSTM		:START DISPLAY WITH HOST #
	LR	RL,R5			:RESTORE REL HOST #
	LHL	R0,PORTS,RL,
	SRLS	R0,$A14		:STATUS IS BITS 14, 15
	LR	R7,RL
	SRLS	R7,1		:CREATE LINE NUMBER
	TBT	R7,HPA.FC
	JNFS	XOMHS3		:IF PORTS AVAILABLE
	OHI	R0,80
XOMHS3	LB	R7,NMHNAS,R7,	:GET LAST HOST STATUS ERROR CODE
	JEFS	XOMHS6		:IF NONE
	SIS	R7,1		:UNBIAS FROM 1.. TO 0..
	OHI	R7,80		:SET FLAG SO BECOMES VISIBLE
	OR	R0,R7		:COMBINE WITH HOST STATUS BITS
XOMHS6	JAL	R7,PUTHAS	:DISPLAY STATUS
	LHI	R0,MAXPRT-XOM
	CLH	R0,TNC.HT,RL,
	JLEFS	XOMHS4		:IF LESS DPORTS THAN CHANNELS
	LHL	R0,TNC.HT,RL,
XOMHS4	JAL	R7,PUTHAS	:OUTPUT MAX FREE PATHS
	LHI	R0,MAXPRT-XOM
	SH	R0,APORTS
	LHL	R2,TNC.HT,RL,
	SH	R2,ANC.HT,RL,
	CR	R0,R2
	JLEFS	XOMHS5		:IF FREE DPORTS IS THE LESSER
	LR	R0,R2		:CHANNELS WAS LESS
XOMHS5	JAL	R7,PUTHAS	:OUTPUT AVAILABLE FREE PATHS
	LHL	R0,ANC.HT,RL,
	JAL	R7,PUTHAS	:OUTPUT ACTIVE PATHS FOR THIS HOST
  IF	HCO.MX
	LR	R7,RL
	SRLS	R7,1		:CONVERT TO BYTE INDEX
	LB	R0,CSO.HT,R7,
  ELSE
	LIS	R0,0
  EI
	JAL	R7,PUTHAN	:OUTPUT CURRENT HOST COST (AS SUP KNOWS IT)
	JAL	R9,XOMENM	:END DISPLAY FOR THIS HOST
	AIS	RL,1
	J	XOMHS2


:	Link Activity Indicators
XOMACT	LIS	R0,2			:MIN # PARAMETERS
	JAL	R9,XOMSU3
XOMAC1	HS
  IF	FML
	LHI	R2,$A 30		:# CHARS IN DATA MSG
  ELSE
	LHI	R2,$A 25
  EI
	JAL	R9,XOMSTM
  IF	FML
	LHI	R0,NLINES
  ELSE
	LIS	R0,1
  EI
	JAL	R7,PUTHAS		:DISPLAY # LINES ON LINK
  IF	FML
	LHI	R8,NLINES		: # LINES ON LINK
	LIS	R9,0			: INDEX INTO LINE STATE ARRAY
  ELSE
	LIS	R8,1
	LR	R9,RL
  EI
XOMAC4	LHI	R0,0FF			: XOM ORDERED MARKING STATE
	TBT	R9,XOMLDH
	JNFS	XOMAC5
  IF	1-FML
	LHI	R0,0FE			: XOM ORDERED DISC STATE
	TBT	R9,XOMLDS
	JNFS	XOMAC5
  EI
	LB	R0,PRIST,R9
XOMAC5	HS
  IF	LAPB
	OHI	R0,000
  ELSE	LAP
	OHI	R0,100
  ELSE	SLP
	OHI	R0,200
  ELSE	MLP
	OHI	R0,300
  ELSE
	OHI	R0,400
  EI
	JAL	R7,PUTHAS		:DISPLAY STATE OF LINE
	AIS	R9,1
	SIS	R8,1
	JG	XOMAC4			: IF MORE LINES ON LINK
	LHL	R0,AELCNT,RL,RL
	JAL	R7,PUTHAS		:DISPLAY # ACTIVE CHANNELS ON LINK
	LIS	R0,0
	TBT	RL,PACKUP
	JEFS	XOMAC6			:IF PACKET LEVEL DOWN
	LIS	R0,1
	LB	R1,PCKSTE,RL,
	JEFS	XOMAC6			:IF IN PACKET READY STATE
	SIS	R1,9			:REMOVE PACKET STATE BIAS
	LR	R0,R1
XOMAC6	JAL	R7,PUTHAS		:DISPLAY PACKET STATUS
  IF	FML
	LB	R0,PRISTC		: LINK STATE
	OHI	R0,400
	JAL	R7,PUTHAS
  EI
	JAL	R9,XOMENM			:END DATA MSG
	J	XOMAC1			:NEXT LINK



:	Individual Channel Parameters
XOMICP	LIS	R0,3
	JAL	R9,XOMSU3
	LHL	R8,XOMPAR+4		:CHANNEL NUMBER
	CI	R8,0FFFF
	JE	XOMI50			:IF ALL CHANNELS
:	SINGLE CHANNEL SERVICED HERE
:	FIRST SEE IF IT IS A VALID ONE
XOMI30	CLH	R8,LCC.LT,RL,RL
	JL	NCEXOM
	CLH	R8,HCC.LT,RL,RL
	JG	NCEXOM
	LH	R0,HOC.LT,RL,RL
	JLFS	XOMI32			:IF NO OUTGOING-ONLY CHANS
	CLR	R8,R0
	JG	ICEXOM
XOMI32	LH	R0,LIC.LT,RL,RL
	JLFS	XOMI34			:IF NO INCOMING-ONLY CHANS
	CLR	R8,R0
	JL	ICEXOM
	CLH	R8,HIC.LT,RL,RL
	JLE	XOMI40
XOMI34	LH	R0,LTC.LT,RL,RL
	JLFS	XOMI36			:IF NO 2-WAY CHANS
	CLR	R8,R0
	JL	ICEXOM
	CLH	R8,HTC.LT,RL,RL
	JLEFS	XOMI40
XOMI36	LH	R0,LOC.LT,RL,RL
	JL	ICEXOM
	CLR	R8,R0
	JL	ICEXOM
XOMI40	LHL	R9,EPB.LT,RL,RL
	AR	R9,R8
	SH	R9,LCC.LT,RL,RL		:EPORT NUMBER
	TBT	R9,EPA.F
	JNFS	XOMI44
	JAL	R7,XOMI70		:OUTPUT CHANNEL INFO
XOMI44	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	J	XOMI30

:	ALL CHANNELS SERVICED HERE
XOMI50	LHL	R6,AELCNT,RL,RL		:NUMBER OF ACTIVE CHANNELS
	LHL	R9,EPB.LT,RL,RL
	LIS	R12,2			:CHAN GROUP NO(2=INC,1=2-WAY,0=OUT)
	LH	R8,LIC.LT,RL,RL		:1ST INC CHANNEL NUMBER
	JL	XOMI55			:IF NO INCOMING CHANS
	AR	R9,R8
	SH	R9,LCC.LT,RL,RL		:EPORT NUMBER OF CHAN
XOMI52	TBT	R9,EPA.F
	JNFS	XOMI54			:IF PORT UNUSED(IE. AVAILABLE)
	JAL	R7,XOMI70
	JAL	R7,XOMCSA		:TAKE A BREAK ON DISPLAY
	SIS	R6,1
	JLE	XOMI60			:IF NO MORE ACTIVE CHANNELS
XOMI54	AIS	R9,1			:NEXT EPORT
	AIS	R8,1
	CLR	R8,R5
	JLE	XOMI52			:IF STILL CHANS IN THIS GROUP
XOMI55	SIS	R12,1			:NEXT GROUP
	JL	XOMI60			:IF DONE
	JE	XOMI57			:IF READY FOR GROUP 0
	LH	R8,LTC.LT,RL,RL
	JLBS	XOMI55			:IF NO 2-WAY CHANS
	LHL	R9,EPB.LT,RL,RL
	AR	R9,R8			:BEG OF 2-WAY CHANS
	SH	R9,LCC.LT,RL,RL
	LHL	R5,HTC.LT,RL,RL
	J	XOMI52
XOMI57	LH	R8,LOC.LT,RL,RL
	JLFS	XOMI60			:IF NO OUTGOING ONLY CHANS
	LHL	R9,EPB.LT,RL,RL
	AR	R9,R8
	SH	R9,LCC.LT,RL,RL
	LHL	R5,HOC.LT,RL,RL
	J	XOMI52
:	HERE WHEN DONE
XOMI60	AIS	RL,1			:NEXT LINK
	SIS	R11,1
	JLE	XOMRSP			:IF NO MORE LINKS
	JAL	R7,XOMCRL
	J	XOMI50
:	OUTPUT THE CHANNEL'S DATA
XOMI70	ST	R7,LO1,,		:SAVE LINK NUMBER
	STH	R5,LO2			:SAVE HIGH CHAN
	STH	R6,LO3,,		:SAVE ACTIVE CHAN COUNT
	STH	R8,LO4,,					:SCY 4-Apr-85
	STH	R9,LO5,,					:SCY 4-Apr-85
	STH	R12,LO6
	LHI	R2,$A 105
	JAL	R9,XOMSTM		:START OUTPUT MSG
	LR	R0,R8			:CHANNEL NUMBER
	JAL	R7,PUTHAS
	LHL	R9,LO5,,					:SCY 4-Apr-85
	LHL	R9,EI.MT,R9,R9		:IPORT NUMBER
	LB	R0,PCKSTE,R9,		:CHANNEL STATE
	JAL	R7,PUTHAS
	LR	R8,R9			:COPY IPORT NUMBER
	SLLS	R8,3			:DOUBLEWORD INDEX
	TBT	R9,EXTCAL
	JNFS	XOMI72			:IF AN EXTERNAL CALL
	LA	R8,DTESAX,R8,		:ADR OF CLG ADR ARRAY
	JFS	XOMI74
XOMI72	LA	R8,DTESAV,R8,		:ADR OF CLG ADR ARRAY
XOMI74	LB	R5,,R8			:LENGTH OF CLG ADR
	LR	R0,R5
	JAL	R7,PUTHAS		:DISPLAY CLG ADR LEN
	LR	R5,R5
	JE	XOMI78			:IF NO CLG ADR
XOMI75	AIS	R8,1
	LB	R0,,R8			:NEXT DIGIT PAIR
	AIS	R8,1
	LB	R2,,R8
	EXBR	R0,R0
	OR	R0,R2
	JAL	R7,PUTHFS
	SIS	R5,4
	JG	XOMI75			:IF DIGIT(S) LEFT
XOMI78	LR	R8,R9			:GET IPORT BACK
	SLLS	R8,3
	TBT	R9,EXTCAL
	JNFS	XOMI80			:IF CALL CAME FROM OUTSIDE THE NET
	LA	R8,DTESAV,R8,		:ADR OF CLD ADR ARRAY
	JFS	XOMI82
XOMI80	LA	R8,DTESAX,R8,
XOMI82	LB	R5,,R8			:CLD ADR LENGTH
	LR	R0,R5
	JAL	R7,PUTHAS		:DISPLAY CLD ADR LENGTH
	LR	R5,R5
	JE	XOMI88			:IF NONE
XOMI84	AIS	R8,1
	LB	R0,,R8			:NEXT DIGIT PAIR
	AIS	R8,1
	LB	R2,,R8			:A 2ND PAIR
	EXBR	R0,R0
	OR	R0,R2
	JAL	R7,PUTHFS
	SIS	R5,4
	JG	XOMI84			:IF MORE DIGIT(S)
XOMI88	LH	R8,ID.MT,R9,R9		:GET DPORT NUMBER
	AR	R8,R8			:HALFWORD INDEX
	AR	R9,R9			:HALFWORD INDEX
	L	R0,SAVINV,R9,R9		:SUP INVOICE(BASED ON IPORT #)
	LR	R9,R0
	EXHR	R0,R0			:UPPER HALFWORD
	JAL	R7,PUTHAS
	LR	R0,R9
	JAL	R7,PUTHFS
	L	R0,SICNT,R8,R8		:INPUT SEGMENT COUNT
	LR	R9,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R9
	JAL	R7,PUTHFS
	L	R0,SOCNT,R8,R8		:OUTPUT SEGMENT COUNT
	LR	R9,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R9
	JAL	R7,PUTHFS
	L	R0,PICNT,R8,R8		:INPUT PACKET COUNT
	LR	R9,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R9
	JAL	R7,PUTHFS
	L	R0,POCNT,R8,R8		:OUTPUT PACKRET COUNT
	LR	R9,R0
	EXHR	R0,R0
	JAL	R7,PUTHAS
	LR	R0,R9
	JAL	R7,PUTHAF
	LR	R3,R12
	JAL	R4,BELODR,,
	JAL	R7,XOMCRL
	LHL	R12,LO6
	LHL	R9,LO5,,					:SCY 4-Apr-85
	LHL	R8,LO4,,					:SCY 4-Apr-85
	LHL	R6,LO3,,
	LHL	R5,LO2
	L	R7,LO1,,
	JR	R7


SSTTL(XOM UTILITY ROUTINES)
:	******************************************
:	******************************************
:	**					**
:	**	XOM Utility Routines		**
:	**					**
:	******************************************
:	******************************************
:
:
:	*****************************************
:	*	Handy Macros			*
:	*					*
:	*****************************************
:

::	XMADHW	-	Display a Halfword followed by a Blank
:		Input:	RL - Contains Halfword
:		DESTROYS: R0,4,13,15
:		Link on R9
XMADHW	MACRO[
	LIS	R2,5
	JAL	R9,XOMSTM
	LR	R3,R12
	JAL	R4,BELODR,,
]

:
:	*****************************************
:	*					*
:	*	Hexadecimal Character Display   *
:	*	 and ASCII Conversion Routines  *
:	*					*
:	*****************************************
:

::	PUTBYT	-	Output the lowest 8 bits of a register as
:			two ASCII characters.
:			Note: Assumes a data message has already been
:			started by a call to *BSLOR*
:
:		Input
:			R0 - contains hex digit(s)
:			R7 - link to caller
:
:		Output
:			R12 - incremented by 2
:
:		Calls
:			BPUTCH
:		DESTROYS	R0-4,6,7,12,13,15

PUTBYT	LBR	R0,R0		:USE ONLY LOWEST 8 BITS
	LBR	R6,R0		:KEEP AN EXTRA COPY
	SRLS	R0,4		:GET HIGH ORDER 4 BITS
	AHI	R0,30		:OFFSET TO ASCII DIGIT VALUE
	CLHI	R0,39
	JLEFS	PUTBY1		:IF A DIGIT
	AIS	R0,7		:OFFSET TO ASCII UPPER CASE LETTER
PUTBY1	JAL	R4,BPUTCH
	LBR	R0,R6		:GET BACK SET OF DIGITS
	NHI	R0,0F		:USE LOWER 4 BITS THIS TIME
	AHI	R0,30
	CLHI	R0,39
	JLEFS	PUTBY2
	AIS	R0,7
PUTBY2	JAL	R4,BPUTCH
	AIS	R12,2		:THIS MANY MORE DIGITS OUTPUT
	JR	R7



::	PUTBYN	-		Output lower 8 bits of a register as
:				ASCII characters without leading zeroes.
:
PUTBYN	LBR	R0,R0
	CLHI	R0,0F
	JG	PUTBYT		:IF MUST OUTPUT 2 CHARACTERS
	AHI	R0,30
	CLHI	R0,39
	JLEFS	PUTBY5
	AIS	R0,7
PUTBY5	JAL	R4,BPUTCH
	AIS	R12,1		:ONLY NEEDED TO DISPLAY 1 CHAR
	JR	R7


::	PUTBYS	-	output lower 8 bits of a register to bufferlets
:			or isis ring as ASCII byte(s) without
:			leading zeros, then output a blank.
:			Input/output same as to *PUTBYT*
:
PUTBYS	ST	R7,TEMP2
	JAL	R7,PUTBYN
PUTBY7	LHI	R0,SPA
	JAL	R4,BPUTCH
	AIS	R12,1
	L	R7,TEMP2
	JR	R7



::	PUTHAF	-	convert lower halfword of a register from
:			hex to ASCII and output it to bufferlets
:			or isis ring. Assumes output has already
:			been started with a call to *BSLOR*
:			Input/output same as to *PUTBYT*
:
:			DESTROYS	R0-4,6,7,13,15,TEMP,TEMP1
:			Calls	PUTBYT
:
PUTHAF	ST	R7,TEMP
	STH	R0,TEMP1		:SAVE COPY OF DATA
	EXBR	R0,R0
	JAL	R7,PUTBYT
	LHL	R0,TEMP1		:RESTORE DATA
	JAL	R7,PUTBYT
	L	R7,TEMP
	JR	R7




::	PUTHAN	-	convert lower halfword of a register from hex
:			to ASCII and output it to bufferlets or
:			isis ring witout leading zeros. Assumes output
:			has been started with a call to *BSLOR*
:			Input/output same as to *PUTBYT*
:
:			DESTROYS	R0-4,6,7,12,13,15,TEMP,TEMP1
:			Calls	PUTBYT,PUTBYN

PUTHAN	ST	R7,TEMP
	NI	R0,0FFFF			:IGNORE UPPER HALFWORD
	CLHI	R0,0FF
	JGFS	PUTHA1
	J	PUTBYN

PUTHA1	STH	R0,TEMP1		:COPY DATA
	EXBR	R0,R0
	JAL	R7,PUTBYN
	LHL	R0,TEMP1		:RESTORE DATA
	JAL	R7,PUTBYT
	L	R7,TEMP
	JR	R7

::	PUTHAS	-	convert lower halfword of a register
:			from hex toASCII and output it to
:			bufferlets or isis ring. Assumes output has
:			already been started with a call to *BSLOR*
:			Input/output same as to *PUTBYT*
:
:			DESTROYS	R0-4,6,7,12,13,15,TEMP,TEMP1,TEMP2
:			Calls	PUTHAN
:
PUTHAS	ST	R7,TEMP2
	JAL	R7,PUTHAN
	J	PUTBY7



:	PUTHFS	-	output halfword and a space
:
PUTHFS	ST	R7,TEMP2		:RETURN ADDRESS
	JAL	R7,PUTHAF
	J	PUTBY7


:	PUTSC	-	Display an SC string
:				Display length of SC string, a blank,
:		then string (2 octets at a time with blanks in between )
:		Pad last octet with 00 if string length was odd
:
:		Input: R1 - pointer to SC string
:		DESTROYS	R0-7,9,TEMP3
:		Link on R7
PUTSC	LB	R0,0,R1
	LR	R5,R1			:COPY STRING POINTER
	ST	R7,TEMP3		:SAVE RETURN ADDRESS
	JAL	R7,PUTHAS		:DISPLAY STRING LENGTH + A BLANK
	LB	R9,0,R5			:GET STRING LENGTH BACK
	SIS	R9,1
	JL	PUTSC6		:IF NONE LEFT
PUTSC2	AIS	R5,1
	LB	R0,0,R5
	EXBR	R0,R0
	SIS	R9,1
	JL	PUTSC4
	AIS	R5,1
	LB	R2,0,R5
	OR	R0,R2
PUTSC4	JAL	R7,PUTHFS
	SIS	R9,1
	JGE	PUTSC2
PUTSC6	L	R7,TEMP3		:GET RETURN ADDRESS...
	JR	R7			:AND EXIT





:	Data Format Conversion Routines
:
:	CAH	-		Convert ASCII to Hexadecimal
:
:		Input - R0 - ASCII  character
:			R7 - Link to Caller (return to R7 if non-hex value found
:				R7+4 if a hex value found)
:		Output: R0 - hex digit
:
CAH	SHI	R0,30		:REMOVE BIAS
	JLR	R7		:IF NOT A HEX VALUE
	CLHI	R0,9
	JLE	4,R7		:IF A HEX DIGIT
	CLHI	R0,2A
	JLEFS	CAH010		:IF UPPER CASE
	SHI	R0,20		:CONVERT LOWER TO UPPER CASE
CAH010	SIS	R0,7
	CLHI	R0,0A
	JLR	R7		:IF NOT A HEX LETTER
	CLHI	R0,0F
	JGR	R7		:IF NOT A HEX LETTER
	J	4,R7		:RETURN WITH A GOOD VALUE





:	*****************************************
:	*					*
:	*	ISIS Data Message Handlers	*
:	*					*
:	*****************************************
:
:	Routine to Start an ISIS Message
:	XOMSTM	-	start a dispatcher message (bufferlets or ring)
:			Input	R2 - max. number data bytes in message
:				RL - link number
:				xomprt - DPORT number
:			Output	R12 - count of bytes in msg at present
:			Uses	R0-4,R7,R9,RL,R12
:			Link on R9
:
XOMSTM	LR	R0,R2			:NUMBER OF DATA BYTES
	AIS	R0,3			:MAKE ROOM FOR DPORT,MSG TYPE
	LH	R1,XOMPRT
	JAL	R4,BSLOR,,
	LIS	R12,0
	LR	R0,RL
	JAL	R7,PUTHAS			:OUTPUT LINK NUMBER
	JR	R9




:	Routine to end an ISIS Message
:	XOMENM	-	end a dispatcher data message
:			and go on to next link
:
:	XOMEN2 -	simply go on to next link, no message to end.
:
:			Input	RL - link number
:				R11 - count of links left
:				R12 - data byte count
:			Output	RL - incremented by 1
:				R11 - decremented by 1
:			Destroys R0-4,R7
:			Return	thru *XOMRSP* if R11<=1 on input
:				thru R9, otherwise
:
XOMENM	LR	R3,R12
	JAL	R4,BELODR,,
XOMEN2	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
	JAL	R7,XOMCRL
	JAL	R7,XOMCSA		:IF MORE TO OUTPUT--WAIT
	JR	R9

::	XMSDHR	-	Display a Halfword followed by a Blank, then jump
:			 to *XOMRSP* (normal command exit)
:		Input:	RL - Contains Halfword
XMSDHR	XMADHW
	J	XOMRSP



:	Display a Carraige Return and Line Feed
:	XOMCRL	-	output a CR/LF pair to bufferlets or ring
:			Input	XOMPRT - DPORT number
:			Destroys	R0-4
:			Link on R7

XOMCRL	LIS	R0,5
	LIS	R2,2
	LHL	R1,XOMPRT
	JAL	R4,BSLOR,,
	LIS	R0,CR
	JAL	R4,BPUTCH
	LIS	R0,LF
	JAL	R4,BPUTCH
	JAL	R4,BELOR,,
	JR	R7


:	Terminal: Output a CR/LF pair and an XOM prompt character
:	Network Console: Also end current response,send "end of response" msg,
:	and send "command ready" message
:
XOMRSP	LHL	R2,XOMPRT
	TBT	R2,IIXCAL
	JE	XOMRS6			:IF NOT TALKING TO NETWORK CONSOLE
	L	R0,XOMRTN
	JN	XOMRS6			:...OR IF STILL SENDING SYSGEN RESP
	LR	R1,R2			:  ELSE GET BUFFER NUMBER
	SLLS	R1,2			:...TIMES 4
	AHI	R1,IDBIA		:...PLUS BIAS
	CBCT				:...AND SIZE UP CONTENTS
	LR	R0,R0
	JEFS	XOMRS2			:IF NO DATA BUFFERED...CONTINUE
	JAL	R7,XOMCSA		:  ELSE EXIT UNTIL BUFFERLETS CLEARED
XOMRS2	STH	R2,DPORT
	CTLMSG(TIX,RX3)			:END THE "RESPONSE" DIALECT MESSAGE
	LHI	R7,XOMEX3
	JAL	R9,XIIXRN		:SEND "END OF RESPONSE" DIALECT MSG
	JAL	R9,XIIXR4		:SEND "COMMAND READY" DIALECT MSG
	J	XOMRET,,

XOMRS6	LA	R3,XOMHEY,,
	JAL	R5,BOCS,,
	J	XOMRET,,




:	*****************************************
:	*					*
:	*	ISIS Control Message Handlers   *
:	*					*
:	*****************************************
:
:	Zapper Handler - Flush Input Message, Issue Goodbye Message,
:				Issue Detach, and Disconnect XOM
XOMZAP	LIS	R0,1
	JAL	R4,FLUSH,,
XOMZP2	LIS	R0,0
	STB	R0,XOMON
	LH	R2,XOMPRT
	RBT	R2,IIXCAL		:RESET IIX CALL INDICATOR
	RBT	R2,PIIX		:RESET IIX PROCESSING IN PROGRESS
	STH	R2,DPORT
	LA	R3,XOMBYE,,
	JAL	R5,BOCSY,,					:HJR  09-26-86
	CTLMSB(DET,RX3)
	J	MMFRA,,

:	Apply backpressure (no send)
XOMNOS	JAL	R4,ELIR,,
	SBT	R1,IDBP.F
	J	MMFRA,,

:	Release backpressure (send)
XOMSND	JAL	R4,ELIR,,
	RBT	R1,IDBP.F
	J	MMFRA,,


:	Echo Green Balls
XOMGB	JAL	R4,ELIR,,
	CTLMSG(GB,RX3)
	J	MMFRA,,

:	GOT A YELLOW BALL -- SEND BACK ON ORANGE BALL SO SENDER
:	NEED NOT TIME OUT TO ZAP CIRCUIT
XOMYB	JAL	R4,ELIR,,
	CTLMSG(OB,RX3)
	J	MMFRA,,


XOMSIX	JAL	R4,ELIR,,
	SBT	R1,PIIX		:ESTABLISH DIALECT OR PROC IIX HEADER
	J	MMFRA,,

XOMTIX	RBT	R1,PIIX		:INDICATE NOT PROCESSING IIX MSG HEADER
	JAL	R4,ELIR,,
	J	MMFRA,,



:	*****************************************
:	*					*
:	*	Error Handlers			*
:	*					*
:	*****************************************

:	Error Macro	-	generates a cross reference of the form
:				XER.xx, where xx is the error type
:				and sets up R6 for the error processor
:				*ERRXOM* and branches there

XOMETY	MACRO(name,errno)[
XER.|errno|	EQ	errno
 IF	1-\name`EXOM
  IF	10-errno
name`EXOM	LIS	R6,errno
  ELSE
name`EXOM	LHI	R6,errno
  EI
	J	ERRXOM
 ELSE
 ERROR(already defined xom error routine name name`EXOM)
 EI
]

	XOMETY(BL,00)	: BAD LINK NUMBER
	XOMETY(BT,01)	: BAD LOG REPORT TYPE
	XOMETY(BR,02)	: BAD RANGE
	XOMETY(OR,03)	: OUT OF RANGE PARAMETER ENCOUNTERED
	XOMETY(TL,04)	: COMMAND OR PARAMETER TOO LONG (>4 DIGITS)
	XOMETY(IC,05)	: INVALID CHANNEL -- NOT INC., 2-WAY, OR OUT.
	XOMETY(TH,06)	: THROUGHPUT CLASS TABLES NOT ALLOCATED
	XOMETY(P2,07)	: LOG REP INTERVAL NOT POWER OF 2 AND <=2^14
	XOMETY(OH,08)	: HOST IN USE AS A LINKHOST
	XOMETY(LU,09)	: LINK IS UP -- SHOULD NOT BE
	XOMETY(PU,0A)	: PACKET LEVEL IS UP -- SHOULD NOT BE
	XOMETY(NL,0B)	: LU NOT ASSIGNED TO THIS LINE
	XOMETY(LP,0C)	: LU IS ALREADY PRESENT ON THIS LINE
	XOMETY(LA,0D)	: THIS LU IS ASSIGNED TO ANOTHER LINE
	XOMETY(LB,0E)	: LU NUMBER IS > MAXIMUM FOR THIS SLOT
	XOMETY(NC,0F)	: CHANNEL NOT CONFIGURED (OUTSIDE CCNL RANGE)
	XOMETY(LW,10)	: LINK LEVEL WINDOW SIZE EXCEEDED
	XOMETY(CC,11)	: CONFILCTING CHANNEL NUMBERS (IE. OVERLAP)
	XOMETY(PW,12)	: PACKET LEVEL WINDOW SIZE EXCEEDED
	XOMETY(PS,13)	: PACKET SIZE EXCEEDED OR INVALID SIZE
	XOMETY(ML,14)	: LINK HAS NO LU'S -- CAN'T BRING IT UP
	XOMETY(FF,15)	: FML MUST MODULO 128 FRAME SEQUENCING
	XOMETY(BF,16)	: LAP CANNOT HAVE MODULO 128 FRAME SEQUENCING
	XOMETY(PC,17)	: PARITY CODE WAS NOT ENABLED BY USE OF OPTOIN
	XOMETY(FI,18)	: INACTIVITY TIMER CANNOT BE USED WITH FML
	XOMETY(LI,19)	: INACTIVITY TIMER CANNOT BE USED WITH LAP OR FML
	XOMETY(CS,1A)	: COMMAND LINE TOO SHORT
	XOMETY(BS,1B)	: BAD LINK STATE REQUESTED
	XOMETY(PL,1C)	: INVALID PACKET STATE REQUESTED
	XOMETY(ID,1D)	: FML AND BSC ARE INCOMPATIBLE WITH IDLELINE
	XOMETY(DN,1E)	: DNICNODE TABLE NOT IN USE
	XOMETY(DD,1F)	: DNIC SPECIFIED IS DEFAULT -  CAN'T MODIFY
	XOMETY(MN,20)	: NO SUCH NODE IN TABLE
	XOMETY(CL,21)	: MIN COST>MAX COST OR COST>255
	XOMETY(CP,22)	: MIN PATHS>MAX PATHS, # PATHS># DPORTS,
			:  #PATHS># 2-WAY+# INC CHANNELS, OR
			:  MAX # PATHS=MIN # PATHS BUT COST INTS <>0
	XOMETY(CI,23)	: MORE COST INTERVALS GIVEN THAN MAXIMUM ALLOWED
			:  OR # INTERVALS >= (MAX # PATHS - MIN # PATHS)
	XOMETY(HP,24)	: INVALID PORT LIMIT GIVEN
	XOMETY(XH,25)	: XOM USER ON HOST -- CAN'T BRING IT DOWN
	XOMETY(BH,26)	: BAD HOST NUMBER
	XOMETY(CT,27)	: LINK DOES NOT HAVE THIS TYPE OF TIMER
	XOMETY(TP,28)	: TOO MANY PARAMETERS
	XOMETY(CA,29)	: TOO MANY ADDRESS DIGITS
	XOMETY(NH,2A)	: NON-HEX DIGIT ENCOUNTERED
	XOMETY(TC,2B)	: NON-CCITT THROUGHPUT CLASS
	XOMETY(DM,2C)	: DNIC NOT IN TABLE
	XOMETY(DP,2D)	: DNIC ALREADY IN TABLE
	XOMETY(TD,2E)	: TOO MANY DNICS OR NODES FOR TABLE
	XOMETY(HK,2F)	: HOST KEY > MAXIMUM PERMITTED (255)
	XOMETY(CD,30)	: CODE DISABLED - NO TYMFILE USE OR ALLOC SPECIFICATION
	XOMETY(FH,31)	: HOST LIST FULL, CAN'T ADD NEW HOST
	XOMETY(IL,32)	: INVALID LINE NUMBER (>0 FOR HDLC,BSC  >NLINES FOR FML)
:	33		: COMMAND LINE TOO LONG
XER.33	EQ	33
	XOMETY(UL,34)	: LINK NOT ASSIGNED TO THIS HOST
	XOMETY(AL,35)	: LINK ALREADY ASSIGNED TO THIS HOST
	XOMETY(CO,36)	: COMMAND NOT IMPLEMENTED
	XOMETY(HS,37)	: BAD HOST STATUS REQUESTED
	XOMETY(IA,38)	: INVALID LINK ADDRESS
:	39		: RESERVED
	XOMETY(HU,3A)	: HOST UP -- MUST BE DOWN
	XOMETY(TO,3B)	: TABLE OVERFLOW. UNABLE TO ADD ENTRY
	XOMETY(NE,3C)	: NO SUCH ENTRY TO BE MODIFIED
	XOMETY(CN,3D)	: CUG TABLE NOT IN USE
	XOMETY(SL,3E)	: VALUE TOO LARGE FOR TCTCSI MAPPING
	XOMETY(LL,3F)	: VALUE TOO LARGE FOR CSITCT MAPPING
	XOMETY(CU,40)	: CUG INDEX > MAX
	XOMETY(X7,41)	: QUERY/MOD OF X.75 UTILITY
	XOMETY(CM,42)	: MOD/ADD OF CUG WITHOUT INTERLOCK CODES
	XOMETY(GL,43)	: CUGDNICLIST TABLE NOT IN USE		:SCHEN 30-Oct-84
	XOMETY(G1,44)	: INPUT FLAG OF GOOD NOT MATCH WITH FLAG IN THE TABLE
	XOMETY(G2,45)	: LIST NUMBER NOT IN TABLE
	XOMETY(G3,46)	: NO SUCH DNIC IN TABLE
	XOMETY(G4,47)	: INCORRECT COMMAND PARAMETER NUMBER
	XOMETY(M1,48)	: CUGMAPPING TABLE NOT IN USE
	XOMETY(M2,49)	: NO SUCH CUGMAPPING STATEMENT IN TABLE :SCY 17-Oct-84
	XOMETY(M3,4A)	: TABLE IS EMPTY			:SCHEN 30-Oct-84
	XOMETY(AC,4B)	: ACTIVE CHANNELS WOULD BE OUT OF RANGE	:HJR 11-05-86
	XOMETY(IH,4C)	: HOST # USE IS INVALID			:HJR 02-09-87
	XOMETY(NP,4D)	: NO IPORT AVAILABLE			:HJR 02-09-87
	XOMETY(SV,4E)	: SVC FAILURE ON IO STATUS CHECK	:HJR 02-09-87
	XOMETY(CG,80)	: BAD CUG SUBSCRIPTION OPTION COMBINATION :HJR 02-02-87

ERRXOM	JAL	R8,XOMERR
	J	XOMRSP



:	*****************************************
:	*					*
:	*	Memory and Table Update Routines*
:	*					*
:	*****************************************

:	Set/Reset Bits For Link Option Modification Routines
:	XMCSWI	-	set/reset bits in an array for option mod routines
:	XMCSWC  -	reset/set bit (complements XOMPAR flag value)
:			Input	R1 - adr of array
:				R5 - index in XOMPAR to get on/off switch from
:				NOTE: FFFF ==> NO CHANGE
:				R6 - return indicator (<=1,thru XOMRSP, else R9)
:				RL - bit offset in array
:			Output	R5 - incremented by 2
:				R6 - decremented by 1
:				DESTROYS	R0,R2
:
XMCSWC	LIS	R0,1			:USE TO COMPLEMENT FLAG VALUE
	JFS	XMCSW2

XMCSWI	LIS	R0,0
XMCSW2  LR	R3,R3							:AHM 06-05-87
	JN	XMCSW3			:IF NOT A BIT CHANGE		:AHM 06-05-87
	LHL	R2,XOMPAR,R5		:GET CHANGING VALUE		:AHM 06-05-87
	CLHI	R2,2							:AHM 06-05-87
	JL	XMCSW3			:IF CHANGING VALUE IS 0 OR 1	:AHM 06-05-87
	J	BREXOM			:ELSE INCORRECT PARAMETER VALUE :AHM 06-05-87
XMCSW3	XH	R0,XOMPAR,R5		:COMPLEMENT FLAG VALUE, IF NECESSARY
	JGEFS	XMCSW4			:IF CHANGING FLAG VALUE (IE. NOT FFFF)
	AIS	R5,2			:..ELSE JUST BUMP INDEX
	JFS	XMCSW6			:...AND DO NORMAL EXIT

XMCSW4	LR	R2,RL			:BIT OFFSET
	AIS	R5,2			:NEXT INDEX INTO FLAG ARRAY
	JAL	R4,XMROTM		:MAKE CHANGE
XMCSW6	SIS	R6,1
	JLE	XOMRSP
	JR	R9


:	Routine to protect or unprotect segments. Its purpose is to allow the
:	modification of memory variables in areas of the code which do not 
:	easily lend themselves to the use of the XMROTM routine. This routine 
:	should only be used as a last resort to expedite problems related to 
:	memory protection.
:
:	XMRO    -  write protect (R/O) or unprotect (R/W) memory segments
:
:		Input	R1 - an address within segment to change
:			R2 - protection indication, 0 = unprotect, 1 = protect
:			R4 - link to caller
:		DESTROYS TEMP, TEMP1 and R2
:
XMRO	ST	R0,TEMP1					:FAK 14-Feb-85
	ST	R2,TEMP						:FAK 14-Feb-85
	LR	R2,R1						:FAK 14-Feb-85
	EXHR	R2,R2						:FAK 14-Feb-85
	NHI	R2,0F		:PUT SEGMENT NUMBER IN LOW BYTE :FAK 14-Feb-85
	LR	R0,R2						:FAK 14-Feb-85
	EXHR	R0,R0		:SETUP FOR SVC			:FAK 14-Feb-85
	LB	R2,AREAS+3A,R2,	:GET SEGMENTS CURRENT PROTECTION BYTE :FAK 14-Feb-85
	OR	R0,R2		:CONTINUE SETUP FOR SVC		:FAK 14-Feb-85
	L	R2,TEMP		:GET PROTECTION INDICATOR	:FAK 14-Feb-85
	CLHI	R2,1		:WANT TO PROTECT??		:FAK 14-Feb-85
	JEFS	XMROPR		:JUMP, IF YES			:FAK 14-Feb-85
	OHI	R0,02		:ALLOW WRITING TO SEGMENT	:FAK 28-Feb-85
	JFS	XMRO10						:FAK 14-Feb-85
XMROPR	NI	R0,0FFFFD	:FORBID WRITING TO SEGMENT	:FAK 28-Feb-85
XMRO10	SVC	SYS,11		:REWRITE SEGMENTS PROTECTION BYTE :FAK 14-Feb-85
	L	R0,TEMP1	:RESTORE R0			:FAK 14-Feb-85
	JR	R4						:FAK 14-Feb-85


:	Modify Bits, Bytes, Halfwords, or Words in Protected or
:	 Unprotected Memory
:	XMROTM	-	modify memory (including Read-Only-tables)
:
:		Input	R0 - new value
:			R1 - address to modify
:			R2 - bit offset from R1 (if bit modify)
:			R3 - type of modify(0=bit,1=byte,2=halfword,3=word)
:			R4 - link to caller
:		DESTROYS TEMP,TEMP1,TEMP2
:
XMROTM	ST	R0,TEMP
	ST	R2,TEMP1
	ST	R3,TEMP2
	LR	R2,R1			:COPY ADDRESS
	EXHR	R2,R2
	NHI	R2,0F			:SEGMENT NUMBER
	LR	R0,R2			:COPY SEG #
	LB	R2,AREAS+3A,R2,		:PROTECTION OF SEGMENT
	CLHI	R2,6
	JGEFS	XMROT2			:IF WRITABLE ALREADY
	EXHR	R0,R0
	OHI	R0,6			:R/W PROTECTION
	SVC	SYS,11			:MODIFY PROTECTION TO R/W
XMROT2	L	R0,TEMP			:NEW VALUE
	LR	R3,R3
	JN	XMROT5			:IF NOT A BIT CHANGE
	L	R3,TEMP1		:BIT OFFSET
	LR	R0,R0
	JNFS	XMROT4			:IF SET BIT
	RBT	R3,,R1
	J	XMROT8
XMROT4	SBT	R3,,R1
	JFS	XMROT8
XMROT5	SIS	R3,1
	JNFS	XMROT6			:IF NOT A BYTE CHANGE
	STB	R0,,R1			:MODIFY A BYTE
	JFS	XMROT8
XMROT6	SIS	R3,1
	JNFS	XMROT7			:IF NOT A HALFWORD CHANGE
	STH	R0,,R1			:MODIFY THE HALFWORD
	JFS	XMROT8
XMROT7	ST	R0,,R1			:MODIFY THE WORD
XMROT8	CLHI	R2,6
	JGEFS	XMROT9			:IF PROTECTION WASN'T CHANGED
	LR	R0,R1
	NI	R0,0F0000		:SEGMENT NUMBER IF LEFT HALFWORD
	OR	R0,R2			:ORIGINAL PROTECTION
	SVC	SYS,11
XMROT9	L	R0,TEMP		:RESTORE REGS
	L	R2,TEMP1
	L	R3,TEMP2
	JR	R4


:	XMSTNC	- Update incoming and 2-way logical channel host
:		table (TNC.HT) and set HOSTCOST and HPA to defaults
:		if necessary
:		DESTROYS	R0-7
:		Link on R9
XMSTNC	LHI	R7,MAXHST*2-2		:TWICE RELATIVE HOST #
XMSTN0	L	R2,LHST.F,R7,R7		:LINKS HOST CAN ACCESS
	ST	R2,TEMP
	LIS	R0,0			:INIT COUNT OF INC+2WAY CHANNELS
XMSTN1	L	R2,TEMP
	JFFO	R2,XMSTN2
	J	XMSTN6			:IF NO MORE LINKS FOR HOST

XMSTN2	RBT	R3,TEMP			:INDICATE CHANS ON LINK COUNTED
	LH	R5,HIC.LT,R3,R3
	JLFS	XMSTN4			:IF NO INCOMING CHANNELS
	SH	R5,LIC.LT,R3,R3
	AIS	R5,1
	AR	R0,R5
XMSTN4	LH	R5,HTC.LT,R3,R3
	JL	XMSTN1			:IF NO 2-WAY CHANNLES
	SH	R5,LTC.LT,R3,R3
	AIS	R5,1
	AR	R0,R5			:# INCOMING + 2WAY CHANNELS
	J	XMSTN1			:COUNT CHANNELS ON NEXT LINK

XMSTN6	CLH	R0,TNC.HT,R7,
	JE	XMSTN8			:IF TNC.HT TABLE UNCHANGED FOR HOST
	LIS	R3,2			:INDICATE HALFWORD MODIFY
	LA	R1,TNC.HT,R7,		:ADR OF MEMORY TO UPDATE
	JAL	R4,XMROTM		:UPDATE TNC.HT TABLE
	LIS	R0,1			:NEW UPPER HPA LIMIT
	LHL	R1,TNC.HT,R7,
	CLHI	R1,1
	JGFS	XMSTN7			:IF > 1 PATH
	LIS	R0,0			:AVAIL ABOVE 0 IF 0 OR 1 PATH
XMSTN7	LA	R1,PAA.HT,R7,		:ADR OF MIN FREE PATHS FOR HPA(1)
	JAL	R4,XMROTM
	LIS	R0,1			:NEW HPA LOWER LIMIT
	LA	R1,PUB.HT,R7,
	JAL	R4,XMROTM		:UPDATE LOWER LIMIT
	ST	R9,TEMP1		:JS 29-JUN-87
	LCS	RL,1			:INDICATE ONE HOST ONLY:JS 29-JUN-87 
	LIS	R5,0			:UNKNOWN OF FREE PATCHS:JS 29-JUN-87
	LR	R6,R7			:TWICE OF RELATIVE HOST#:JS 29-JUN-87
	SRLS	R6,1			:RELATIVE HOST NUMBER:JS 29-JUN-87
	JAL	R9,HPACHH,,		:HPA CHECK	:JS 29-JUN-87
	L	R9,TEMP1		:JS 29-JUN-87
  IF	HCO.MX
	LIS	R0,0			:NEW COST
	LR	R2,R7
	SRLS	R2,1
	LA	R1,MAXCST,R2,		:ADR OF MAXIMUM COST FOR HOST
	LIS	R3,1			:INDICATE BYTE MODIFY
	JAL	R4,XMROTM
  EI
XMSTN8	SIS	R7,2			:NEXT HOST
	JGE	XMSTN0
	JR	R9			:IF FINISHED UPDATING FOR ALL HOSTS



::	XMCFLG-	MODIFY ONE OR TWO FLAG ARRAY VALUES.
:
:	INPUT	(R7)= NAME OF 1ST FLAG ARRAY TO MODIFY
:		(R8)= NAME OF 2ND FLAG ARRAY TO MODIFY
:		    =0 IF NO NEED TO MODIFY 2ND ONE
:	OUTPUT	FLAG VALUE CHANGED
:	LINK IS R12
:	CALLS	XSUCCS, XMCSWI
XMCFLG	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS		:# PARS ACTUALLY INPUT
	SIS	R6,2			: LESS CMD #, LINK #
	LIS	R5,4			:INDEX TO 1ST OPTION IN *XOMPAR*
	LIS	R3,0			:INDICATE BIT CHANGES
	LR	R1,R7		:GET NAME OF FLAG TO MODIFY
	JAL	R9,XMCSWI
	LR	R1,R8
	JER	R12		:IF ONLY ONE
	JAL	R9,XMCSWI
	JR	R12


:	SUBROUTINES TO SEND NETWORK CONSOLE DIALECT MESSAGES
:
:	GENERAL DIALECT MSG OF THE FORM : DIALECT TYPE + NETWORK CONSOLE ID
:		INPUT -	R7-MESSAGE TYPE
:		DESTROYS	R0-5,R15
:		LINK ON R9
XIIXRN	CTLMSG(SIX,RX3)
	LIS	R0,7			:MSG LENGTH
	LIS	R2,4
	JAL	R4,SLOR,,
	LHI	R0,(IX.DMM^-8)		:INDICATE DIALECT, NOT GLOBAL, MSG
	JAL	R4,PUTCH
	LHL	R5,NETCID
	LR	R0,R5
	STBR	R7,R0			:DIALECT MSG TYPE IN LOW BYTE OF R0
	EXBR	R0,R0			:DIALECT MSG TYPE + HIGH BYTE OF ID
	JAL	R4,PUTH,,
	LBR	R0,R5			:LOW BYTE OF ID
	JAL	R4,PUTCH
	JAL	R4,ELOR,,
	JR	R9


:	"Command Ready" Dialect Message
XIIXR4	CTLMSG(SIX,RX3)
	LIS	R0,5
	LIS	R2,2
	JAL	R4,SLOR,,
	LHI	R0,(IX.DMM^-8)
	JAL	R4,PUTCH
	LHI	R0,XOMEX4
	JAL	R4,PUTCH
	JAL	R4,ELOR,,
	JR	R9

:	"Command and Console Data" Dialect Message
XIIXR5	CTLMSG(SIX,RX3)
	LIS	R0,6
	LIS	R2,3
	JAL	R4,SLOR,,
	LHI	R0,(IX.DMM^-8)
	JAL	R4,PUTCH
	LHI	R0,((XOMEX5^8)!(080))
	JAL	R4,PUTH,,
	JAL	R4,ELOR,,
	CTLMSG(TIX,RX3)
	JR	R9




:	***** MISCELLANEOUS SUBROUTINES *****
:
:	Display  Byte from Each of Two Arrays
::	XOMSU1	-	Output data msg to bufferlets or to isis ring of:
:			link number, a blank, (optionally) a line number
:			a byte taken from an array
:			whose adr is passed by caller and indexed by link
:			number, another blank, and (optionally) another
:			byte taken from a 2nd array.
:			If the link number is FF, repeat this NLINKS times
:
:			Input	R0 - base adr of 1st array
:				R1 - base adr of 2nd array (-1, if none)
:				R2 - display line # flag (-1, no line # shown)
:				RL - link number
:			Returns to *XOMRSP*
:			Uses	R0-15,TEMP,TEMP1,TEMP2
:
XOMSU1	LR	R8,R0			:COPY 1ST BASE ADR
	LR	R9,R1			:COPY 2ND BASE ADR
	LR	R5,R2			:FLAG TO PRINT LINE NUMBER
XSUB10	LHI	R2,$A 19
	LHL	R1,XOMPRT
	LHI	R0,3,R2
	JAL	R4,BSLOR,,
	LIS	R12,0			:INIT DATA BYTE COUNT
	LR	R0,RL
	JAL	R7,PUTHAS		:DISPLAY LINK NUMBER
	LR	R0,R5
	JLFS	XSUB12			:IF NOT DISPLAYING LINE #
	JAL	R7,PUTHAS		:ELSE DISPLAY LINE #
XSUB12	LB	R0,,R8,RL		:GET 1ST ARRAY'S BYTE
	JAL	R7,PUTHAS
	LR	R9,R9
	JLFS	XSUB14
	LB	R0,,R9,RL
	JAL	R7,PUTHAN
XSUB14	HS
  IF	FML
	LR	R5,R5
	JL	XSUB15			:IF NO LINE DISPLAY
	AIS	R5,1			:BUMP LINE #
	CLHI	R5,NLINES
	JGEFS	XSUB15
	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	R8,1
	LR	R9,R9
	JLFS	XSUB18
	AIS	R9,1
	JFS	XSUB18			:ELSE DISPLAY INFO FOR NEXT LINE ON LINK
  EI
XSUB15	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
XSUB18	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XSUB10


:	Display  Halfwords from Each of Two Arrays
:	XOMSU2	-	same as XOMSU1, except that halfwords are taken
:			from the arrays
:
XOMSU2	LR	R8,R0			:BASE ADR OF 1ST ARRAY
	AR	R8,RL			:CORRECT FOR HALFWORD INDEX
	LR	R9,R1			:BASE ADR OF 2ND ARRAY
	JLFS	XSUB20			:IF NO 2ND ARRAY
	AR	R9,RL			:CORRECT FOR HALFWORD INDEX
XSUB20	LR	R5,R2			:FLAG FOR DISPLAY OF LINE #
XSUB22	LHI	R2,$A 19
	LH	R1,XOMPRT
	LHI	R0,0,R2
	JAL	R4,BSLOR,,
	LIS	R12,0
	LR	R0,RL
	JAL	R7,PUTHAS
	LR	R5,R5
	JLFS	XSUB24			:IF NOT DISPLAYING LINE #
	LR	R0,R5
	JAL	R7,PUTHAS		: ELSE DISPLAY LINE #
XSUB24	LHL	R0,,R8,RL
	JAL	R7,PUTHAS
	LR	R9,R9
	JLFS	XSUB25			:IF ONLY USING 1 ARRAY
	LHL	R0,,R9,RL
	JAL	R7,PUTHAN
XSUB25	HS
  IF	FML
	LR	R5,R5
	JL	XSUB27			:IF NO LINE # SHOWN
	AIS	R5,1
	CLHI	R5,NLINES
	JGEFS	XSUB27			:IF NO MORE LINES ON LINK
	LR	R3,R12			: ELSE NEW MSG FOR NEXT LINE ON LINK
	JAL	R4,BELODR,,
	AIS	R8,2
	LR	R9,R9
	JL	XSUB29
	AIS	R9,2
	JFS	XSUB29
  EI
XSUB27	LR	R3,R12
	JAL	R4,BELODR,,
	AIS	R8,1
	LR	R9,R9
	JLFS	XSUB28
	AIS	R9,1
XSUB28	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP
XSUB29	JAL	R7,XOMCRL
	JAL	R7,XOMCSA
	J	XSUB22


:	Set Up for Some Query Routines
:	XOMSU3	-	set up for various routines.Gets valid
:			link number and count of number of
:			links to process.
:
XOMSU3	CLB	R0,XOMNPS
	JG	CSEXOM
	LIS	R8,0
	LB	RL,XOMPAR+3		:LINK NUMBER (FORCE IT TO BE LESS THAN 100)
	LIS	R11,1
	CLHI	RL,0FF
	JNFS	XSUB30
	LIS	RL,0
  IF	1-FML
	LHI	R11,NLINKS		:fml must be one link!!!
  EI
	JR	R9
XSUB30	CLHI	RL,NLINKS
	JLR	R9			:IF VALID SINGLE LINK
	J	BLEXOM


::	XOMSU4	Set up queries when host # is 2nd parameter
:
:		Input	R0 - Minimum # parameters for cmd to be valid
:
:		Output  R0 - Host #
:			RL - Relative host #
:			R11- Number of hosts to give info on (if host #=FFFF)
:
XOMSU4	CLB	R0,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH PARAMETERS FOR COMMAND
	LHL	R0,XOMPAR+2		:HOST NUMBER
	CLI	R0,0FFFF		:"ALL HOSTS" FLAG
	JNFS	XSUB42			:IF A SINGLE HOST
	LHI	R11,MAXHST		: ELSE # HOSTS TO PROCESS
	LIS	RL,0			: BEGIN AT REL HOST 0
	JR	R9

XSUB42	LIS	R11,1			:ONLY 1 HOST TO GIVE INFO ON
	LHI	RL,MAXHST-1		:PREPARE TO SEARCH HOST TABLE
XSUB44	CLH	R0,HOSTS,RL,RL
	JER	R9			:IF RL IS REL HOST # FOR HOST R0
	SIS	RL,1			: ELSE NEXT HOST
	JGEBS	XSUB44
	J	BHEXOM			:SORRY--HOST NOT IN HOST TABLE




:	Set up for Configuration Change Routines
:	XSUCCS	-	set up for configuration changes (LINK options)
:		or
:	XSUCCH	-	set up for configuration changes (HOST options)
:		Input	R0 - min # of parameters
:			R1 - state of line/packet level required
:			     (0=don't care,XMPKDO=packet level down
:				XMLIDI=line in DISC or MARKing state
:				XMLIDM=line in MARKing state)
:			R9 - link to caller
:			NLINKS - # of links on the interface
:			XOMNPS - # parameters given by user
:
:		Output	RL - link number
:			R11 - line number (or other array element at XOMPAR+4)

:	SET UP FOR HOST CHANGES
XSUCCH	CLB	R0,XOMNPS
	JG	CSEXOM			:TOO FEW PARAMETERS
	LH	R0,XOMPAR+2		:GET HOST #
	LHI	RL,MAXHST-1		:NUMBER OF HOSTS CONFIGURED
XSUCC2	CLH	R0,HOSTS,RL,RL		:TEST FOR TABLE MATCH
	JE	XSUCC3			:IF WE FOUND HOST #
	SIS	RL,1
	JGEBS	XSUCC2			:CONTINUE LOOKING
	J	BHEXOM			:IF NOT THERE

:	SET UP FOR LINK CHANGES
XSUCCS	CLB	R0,XOMNPS
	JG	CSEXOM			:IF TOO FEW PARS GIVEN
	LH	RL,XOMPAR+2		:LINK NUMBER
	CLHI	RL,NLINKS
	JGE	BLEXOM
XSUCC3	LH	R11,XOMPAR+4		:LINE NUMBER
	LR	R1,R1
	JER	R9			:IF DON'T CARE ABOUT STATE AT ALL
	CLHI	R1,XMPKDO
	JNFS	XSUCC0			:IF DON'T CARE ABOUT PACKET STATE
	TBT	RL,PACKUP
	JN	PUEXOM			:IF PACKET LEVEL NOT DOWN
	TBT	RL,XOMBPD
	JE	PUEXOM			:IF XOM NOT KEEPING PACKET LEVEL DOWN
	JR	R9
XSUCC0	TBT	RL,LINKUP
	JN	LUEXOM			:IF LINK NOT DOWN
	CLHI	R1,XMLIDM
	JEFS	XSUCC1			:IF LINK MUST BE MARKING
	TBT	RL,XOMLDS
	JNR	R9			:IF XOM KEEPING LINK IN DISC STATE
XSUCC1	TBT	RL,XOMLDH
	JNR	R9			:IF XOM KEEPING LINK MARKING
	J	LUEXOM

SSTTL(INTERFACE STATE MODIFICATION COMMS)
:	******************************************
:	*					 *
:	*	Interface State Modification	 *
:	*	Commands			 *
:	*					 *
:	******************************************
:
:

::	Change Line State
:		A flag is set by this routine (BPSTAT) which indicates
:		to the foreground that the background wants to change
:		the line state. This is necessary since a race could
:		occur without any semaphore. When the foreground
:		brings the line down, it sets a bit in:
:			XOMLDS - if line in DISC state
:			XOMLDH - if line in MARKing state
:	User is responsible for checking these arrays
:		to see if line is down before making any changes
:		that require a line to be down
:	Notes:	For LAP,LAPB,SLP only one line (line #0) is currently allowed
:		 on each link.  The link # and the line # are, therefore,
:		 treated as being equivalent.
:		FML currently only works for 1 link--link #0. In this case,
:		 the line number may range up to *NLINES*
:
XMCLKS	LIS	R0,4			:MUST HAVE CMD, LINK, LINE, REQ STATE
	LIS	R1,0			:DON'T CARE ABOUT CURRENT STATE
	JAL	R9,XSUCCS
  IF	FML
	LR	RL,R11			:LINE TO BE MODIFIED
	CLHI	RL,NLINES
  ELSE
	LR	R11,R11
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R1,XOMPAR+6		:NEW LINE STATE
	CLHI	R1,L.XOMN
	JG	BSEXOM			:IF NOT A VALID STATE
	LH	R2,XOMNLS,R1,R1		:LOOKUP ADR IN JUMP TABLE
	J	XOMNLS,R2,

:	LINE STATE CHANGE JUMP TABLE.

 TABLE(XOMNLS)
	TENTRY(XMCLK0)		:0  BRING LINE UP
	TENTRY(XMCLK1)		:1  PUT LINE IN DISC STATE(DOWN SOFT)
	TENTRY(XMCLK2)		:2  PUT LINE IN MARKING STATE(DOWN HARD)
 ENDTABLE(XOMNLS)		:END TABLE, DEFINE L.XOMN

XMCLK0	LCS	R0,1			:UNUSED LINE HAS LU=FF
	CLB	R0,SLU.LT,RL,
	JE	MLEXOM			:IF LINE HAS NO LU-CAN'T BRING IT UP
  IF	LAP!LAPB!SLP
	TBT	RL,XOMLDS
	JEFS	XMCL06			:IF NOT DOWN SOFT CURRENTLY
	LIS	R0,2			:BRING LINE UP FLAG VALUE
	STB	R0,BPSTAT,RL		: PUT IN SEMAPHORE
	RBT	RL,XOMLDS		: INDICATE DOWN SOFT NO LONGER WANTED
	J	XOMRSP
XMCL06	TBT	RL,XOMLDH
	JE	XOMRSP			:IF NOT MARKING (*LINK* WILL BRING UP)
  IF	HDLC
	LR	RL2,RL
	AR	RL2,RL2			:RESTORE RL2 FOR INISIO
	JAL	R13,INISIO,,		:REINITIALIZE SIO BOARD
  EI
	LIS	R0,3
	STB	R0,BPSTAT,RL
  EI
  IF	FML
	RBT	RL,XOMLDC		:FML LINK HAS AT LEAST 1 LINE UP
  EI
	RBT	RL,XOMLDH		: INDICATE MARKING NO LONGER WANTED
	J	XOMRSP
:	DISCONNECT LINE
XMCLK1	HS
  IF	FML
	J	BSEXOM			:FML DISC STATE NOT IMPLEMENTED
  ELSE LAP!LAPB!SLP
	TBT	RL,XOMLDS
	JN	XOMRSP			:IF LINE ALREADY DISC
	TBT	RL,XOMLDH
	JEFS	XMCL12			:IF LINE NOT MARKING
  IF	HDLC
	LR	RL2,RL
	AR	RL2,RL2			:RESTORE RL2 FOR INISIO
	JAL	R13,INISIO,,		:REINITIALIZE SIO BOARD
  EI
	LIS	R0,6			:INDICATE PUT MARKING LINE IN DISC
	RBT	RL,XOMLDH		:INDICATE XOM DOESN'T WANT MARKING
	JFS	XMCLK9
XMCL12	LIS	R0,4			:INDICATE PUT LINE IN DISC
	JFS	XMCLK9
  EI
:	MARK LINE (SEND CONTIGUOUS 1'S)
XMCLK2	HS
  IF	LAP!LAPB!SLP
	RBT	RL,XOMLDS
	TBT	RL,XOMLDH
	JN	XOMRSP			:IF LINE ALREADY MARKING
	LIS	R0,5
XMCLK9	STB	R0,BPSTAT,RL
  ELSE	FML
	SBT	RL,XOMLDH
  EI
	J	XOMRSP



::	Change Packet Level Status
:		If XOM brings packet level down soft (ie. waits for calls
:		to clear) or hard (ie. clears calls), the RLth bit in
:		XOMBPD is set.
:		The user is responsible for checking both this bit (to see
:		if the XOM will keep the packet level down) and the RLth
:		bit in PACKUP (to see if the packet level is
:		actually down) before he/she tries to make a SYSGEN
:		change which requires the packet level be down.
XMCPKS	LB	R0,XOMNPS
	CLHI	R0,3
	JL	CSEXOM
	LHL	RL,XOMPAR+2		:GET LINK NUMBER
	CLHI	RL,NLINKS
	JG	BLEXOM			:IF NOT A VALID SINGLE LINK
	LHL	R1,XOMPAR+4		:GET NEW PACKET STATE
	CLHI	R1,2
	JG	PLEXOM			:IF INVALID PACKET STATE REQUESTED
	LR	R1,R1
	JNFS	XMCPK1			:IF NOT BRING PACKET LEVEL UP
	RBT	RL,XOMBPD		:INDICATE OK TO BRING PACKET UP
	J	XOMRSP

XMCPK1	SBT	RL,XOMBPD
	SIS	R1,1
	JNFS	XMCPK2			:IF BRING PACKET DOWN IMMED
:	Wait until calls clear--then bring packet down
	LHL	R0,AELCNT,RL,RL		:GET NUMBER OF CALLS ACTIVE
	JN	XOMRSP			:IF CAN'T DO ANYTHING UNTIL ALL CLEAR
	RBT	RL,PACKUP		: NO CALLS, BRING PACKET DOWN
	J	XOMRSP

:	CLEAR ALL CALLS AND BRING PACKET LEVEL DOWN (IE. DOWN HARD)
XMCPK2	RBT	RL,PACKUP
	LR	R1,RL
	SLLS	R1,2
	AHI	R1,IECBIA		:BIAS TO LINK'S CONTROL BUFFER
	JAL	R4,EMPTY,,		:CLEAR BUFFER
	LR	RL2,RL
	AR	RL2,RL2			:TWICE LINK #
  IF X.25							:DRE 22-NOV-85
	LHI	R0,COUTOD^8!DIA122	:XOM BROUGHT PACKET LEVEL DOWN DRE 22-NOV-85
  ELSE X.75							:DRE 22-NOV-85
	LHI	R0,CNETCG^8!DIA122	:XOM BROUGHT PACKET LEVEL DOWN DRE 22-NOV-85
  EI X.25							:DRE 22-NOV-85
	STH	R0,PSDIAG,RL,RL
	LHI	R5,2000			:REASON FOR HANG ---XOM
	JAL	R9,HANGAL,,		:CLEAR ALL CALLS
	LHI	R0,ZRSTRT		:RESTART TYPE PACKET
	LR	R1,RL
	SLLS	R1,2
	AHI	R1,IECBIA		:TWICE CONTROL BUFFER # FOR LINK RL
	JAL	R4,WCI			:TELL RM TO SEND A RESTART
	LHI	R1,PSRSTI
	STB	R1,PCKSTE,RL,		:RESTART INDICATION STATE
	J	XOMRSP


:	Change Host Status Modification Command
XMCHSI	LB	R0,XOMNPS
	CLHI	R0,3
	JL	CSEXOM
	LHL	R13,XOMPAR+2		:HOST NUMBER
	LHL	R12,XOMPAR+4		:NEW REQUESTED STATUS
	CLHI	R12,5
	JG	HSEXOM			:IF INVALID HOST STATUS
	CLHI	R12,4
	JE	XMCHO1			:IF NEW HOST
	LHI	R6,MAXHST-1
XMCHO0	CLH	R13,HOSTS,R6,R6
	JEFS	XMCHO1			:IF R6=RELATIVE HOST NO.
	SIS	R6,1
	JGEBS	XMCHO0
	J	BHEXOM			:IF HOST NOT FOUND

XMCHO1	LH	R2,XMCHOT,R12,R12
	J	XMCHOT,R2

TABLE(XMCHOT)
	TENTRY(XMCH00)		:ANSWERED
	TENTRY(XMCH01)		:DOWN
	TENTRY(XMCH02)		:SHUT
	TENTRY(XMCH03)		:REMOVE
	TENTRY(XMCH04)		:NEW
	TENTRY(XMCH05)		:CHANGE
ENDTABLE(XMCHOT)

:	ANSWERED
XMCH00	RBT	R6,XOMBHD		:RESET DOWN REQUEST
	RBT	R6,XOMBHS		:RESET SHUT REQUEST
	J	XOMRSP			:LET HSTST BRING ANSWERED

:	DOWN
XMCH01	CLB	R6,XOMHST
	JE	XHEXOM			:IF XOM USING THIS HOST, CAN'T DOWN IT
	SBT	R6,XOMBHD		:SET DOWN REQUEST
	RBT	R6,XOMBHS		:RESET SHUT REQUEST
	J	XMCHOS			:GO SET DOWN

:	SHUT
XMCH02	RBT	R6,XOMBHD		:RESET DOWN REQUEST
	SBT	R6,XOMBHS		:SET SHUT REQUEST
	J	XMCHOS			:GO SET SHUT

:	REMOVE
XMCH03	CLB	R6,XOMHST
	JE	XHEXOM			:IF XOM USING IT, CAN'T REMOVE
	LHI	R2,NLINKS-1
XMCHO2	CLB	R6,LH.MT,R2,
	JE	OHEXOM			:IF HOST IS AN ORIG HOST
	SIS	R2,1
	JGEBS	XMCHO2
	RBT	R6,XOMBHD
	RBT	R6,XOMBHS
	LA	R1,LHST.F,,
	LR	R2,R6
	SLLS	R2,2
	AR	R1,R2
	LIS	R3,3		:FULLWORD MODIFY
	LIS	R0,0		:DEASSIGN ALL LINKS
	JAL	R4,XMROTM
	LIS	R0,0
	LIS	R1,1
  IF	HCO.MX
:	RESET HOSTCOST
	STB	R0,MINCST,R6,	:MINIMUM COST
	STB	R0,MAXCST,R6,	:MAXIMUM COST
	STB	R0,NCI.HT,R6,	:NUMBER OF COST INTERVALS
	STB	R0,MCI.HT,R6,	:MAXIMUM # OF COST INTERVALS
	STB	R0,CSO.HT,R6,
	STB	R0,CSC.HT,R6,
  EI	HCO.MX
:	RESET HOSTKEY
	STB	R0,KEY.HT,R6,	:HOST KEY
:	RESET ADRPOS
	STH	R0,ADRPO,R6,R6	:CLEAR ADRPOS
:	RESET HOSTPORTAVAILABILITY
	LIS	R0,1		:NEW VALUE
	LA	R1,PAA.HT,R6,R6	:ADDR TO CHANGE
	LIS	R3,2		:HALF WORD
	JAL	R4,XMROTM	:CHANGE IT IN PROTECTED MEMORY
	LA	R1,PUB.HT,R6,R6	:ADDR TO CHANGE
	JAL	R4,XMROTM	:CHANGE IT
:	RESET ROTATE LINKS
	LIS	R0,1
	LA	R1,LNK.RO,,	:ADDR TO CHANGE
	LR	R2,R6		:BIT #
	LIS	R3,0		:FLAG BIT MOD
	JAL	R4,XMROTM	:CHANGE IT
:	RESET ADRLINKS
	LH	R1,ADR.PT,R6,R6	:START OF ENTRIES FOR THIS HOST
	LH	R2,ADR.PT+2,R6,R6 :START OF ENTRIES FOR NEXT HOST
	CR	R1,R2		:SEE IF ANY ENTRIES FOR THIS HOST
	JE	XMCH16		:IF NONE TO DELETE
	LR	R3,R2		:COPY TO REMEMBER # DELETED
	SR	R3,R1		:LENGTH OF DELETED ENTRIES
XMCH10	LH	R0,ADR.HT,R2,	:GET PART OF ENTRY FROM NEXT HOST
	STH	R0,ADR.HT,R1,	:COPY DOWN
	AIS	R1,2		:ADVANCE TO POINTER
	AIS	R2,2		:ADVANCE FROM POINTER
	CI	R2,ADR.HE-ADR.HT :TEST FOR END OF WHOLE TABLE
	JLEBS	XMCH10		:NOT YET
	LR	R1,R6		:ADJUST EACH HOSTS OFFSET POINTER
XMCH12	AIS	R1,1		:STEP TO NEXT HOST
	CLHI	R1,MAXHST	:COMPARE TO MAXIMUM # OF HOSTS
	JGFS	XMCH14		:IF DONE
	LHL	R0,ADR.PT,R1,R1	:GET OFFSET TO ITS ENTRIES
	SR	R0,R3		:ADJUST DOWNWARD
	STH	R0,ADR.PT,R1,R1	:SAVE NEW OFFSET TO ITS ENTRIES
	JBS	XMCH12		:GO AGAIN
XMCH14	SRLS	R3,3		:COMPUTE # OF ENTRIES REMOVED
	LH	R0,ADR.NO	:GET CURRENT # OF ENTRIES
	SR	R0,R3		:SUBTRACT # THAT WE DELETED
	STH	R0,ADR.NO	:AND SAVE UPDATED COUNT
:	RESET TORPOA
XMCH16	LH	R1,RPO.PT,R6,R6	:POINTER TO ENTRIES FOR THIS HOST
	LH	R2,RPO.PT+2,R6,R6  :POINTER FOR NEXT HOST
	CR	R1,R2		:TEST IF THIS HOST HAS ANY
	JE	XMCH22		:IF NONE
	LR	R3,R2		:REMEMBER FOR # DELETED
	SR	R3,R1		:ALSO CHANGE IN OFFSET POINTERS
XMCH18	LH	R0,RPO.HT,R2,	:GET PART OF ENTRY FOR NEXT HOST
	STH	R0,RPO.HT,R1,	:COPY DOWN
	AIS	R1,2		:BUMP FROM POINTER
	AIS	R2,2		:BUMP TO POINTER
	CI	R2,RPO.HE-RPO.HT :TEST FOR END OF WHOLE TABLE
	JLEBS	XMCH18		:IF NOT YET
	LR	R1,6		:COPY HOST ORDINAL
XMCH20	AIS	R1,1		:STEP TO NEXT HOST
	CLHI	R1,MAXHST	:DONE ALL FOLLOWING HOSTS YET ??
	JGFS	XMCH22		:IF NOT
	LH	R0,RPO.PT,R1,R1	:GET OFFSET PTR FOR THIS HOST
	SR	R0,R3		:ADJUST DOWNWARD
	STH	R0,RPO.PT,R1,R1	:AND SAVE IT
	JBS	XMCH20		:GO AGAIN

XMCH22	JAL	R5,CHSTAT,,	:SET HOST GONE
	LIS	R13,0
	LIS	R12,3		:SET HOST AS GONE
	J	XMCHOS		:REMOVE HOST NUMBER FROM HOSTS TABLE

:	CHANGE
XMCH05	LHL	R0,PORTS,R6,R6	:GET CURRENT STATUS
	NHI	R0,0C000
	CLHI	R0,04000
	JN	HSEXOM		:IF NOT DOWN
	LB	R0,XOMNPS
	CLHI	R0,4
	JN	CSEXOM			:IF NOT ENOUGH PARAMETERS
	LIS	R12,3
	JAL	R5,CHSTAT,,	:SET TO GONE
	LHL	R13,XOMPAR+6	:NEW HOST NUMBER
	J	XMCHO7		:CREATE NEW HOST

:	CREATE A NEW HOST
XMCH04	LHI	R6,MAXHST-1
XMCHO6	LHL	R0,PORTS,R6,R6
	SRLS	R0,$A14
	CLHI	R0,3
	JEFS	XMCHO7		:IF A GONE HOST
	SIS	R6,1
	JGEBS	XMCHO6
	J	FHEXOM		:HOST LIST FULL

XMCHO7	SBT	R6,XOMBHD	:SET DOWN
	SBT	R6,XOMBHS	:NOT SHUT
	LIS	R12,1		:DOWN STATUS
XMCHOS	JAL	R5,CHSTAT,,	:CHANGE HOSTS STATUS
	J	XOMRSP


::	MODIFY XOM HOST NUMBER
XMCXHS	LB	R0,XOMNPS
	CLHI	R0,2
	JN	CSEXOM		:IF NO HOST NUMBER
	LHL	R13,XOMPAR+2	:GET HOST NUMBER
	LHI	R6,MAXHST-1
XMCXH0	CLH	R13,HOSTS,R6,R6
	JEFS	XMCXH1		:IF THIS HOST IS IT
	SIS	R6,1
	JGEBS	XMCXH0
	J	BHEXOM		:IF NO HOST MATCHES
XMCXH1	LHL	R12,PORTS,R6,R6	:GET HOST STATUS
	SRLS	R12,$A14
	CLHI	R12,3
	JE	BHEXOM		:IF HOST GONE
	LIS	R3,1		:BYTE MODIFY
	LR	R0,R6
	LA	R1,XOMHST
	JAL	R4,XMROTM		:UPDATE XOMHST #
	CLHI	R12,1
	JN	XOMRSP		:IF NOT DOWN, DONE
	LIS	R12,2		:CHANGE TO SHUT
	JAL	R5,CHSTAT,,
	J	XOMRSP



SSTTL(GLOBAL OPTION MODIFICATION COMMAND)
:	*************************************************
:	*						*
:	*	Global Option Modification Commands	*
:	*						*
:	*************************************************
:
:
:
:	Line Logical Unit Mapping Modification
:		For LAP,LAPB, and SLP a line is assumed to be the same
:		as a link. For FML, only one link is assumed to exist
:		(link zero) which may have multiple lines. In either case,
:		the line number is input as well as the link number.
XMCLLU	LIS	R0,4
	CLB	R0,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH PARAMS
	LHL	RL,XOMPAR+2		:LINK NUMBER(=LINE # FOR LAP,LAPB,SLP)
	CLHI	RL,NLINKS
	JG	BLEXOM			:IF NON-EXISTENT LINK
	LHL	R11,XOMPAR+4		:LINE #
  IF	FML
	LR	RL,R11			:DATA IS ORGANIZED BY LINE #
	CLHI	R11,NLINES		:FML MAY HAVE >1 LINE
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	TBT	RL,XOMLDH
	JE	LUEXOM			:IF XOM NOT KEEPING IT MARKING
	TBT	RL,LINKUP
	JN	LUEXOM			:IF LINE NOT DOWN
	LIS	R2,8			:INDEX INTO XOMPAR (FOR LOGICAL UNIT)
	LIS	R3,1			:# DEVTYPE ATTS/BYTE CHANGE REQ FLAG
	LHL	R1,XOMPAR,R2		:LU NUMBER
	SIS	R2,2
	LHL	R0,XOMPAR,R2		:TYPE OF CHANGE
	JNFS	XMCLL1			:IF ASSIGN
	CLB	R1,SLU.LT,RL,
	JN	NLEXOM			:IF LINE HAS NO SUCH LU ASSIGNED
	LCS	R0,1			:INDICATE DEASSIGN
	J	XMCLL3
:	Check Validity of assign request
:	Invalid if:	1. line already has an LU
:			2. Slot has no such LU available
:			3. Requested LU already assigned to another line
:			4. Requested LU is of the wrong type
XMCLL1	LCS	R0,1			:FF MEANS UNASSIGNED
	CLB	R0,SLU.LT,RL,
	JN	LPEXOM			:IF VALID LU THERE
	LA	R2,TEMP			:I/O ATTRIBUTE BUFFER
	SVC	IO,8000+R1,,
	J	SVEXOM						:HJR 02-09-87
	LHI	R5,0FE
	CLB	R5,TEMP
	JLE	LBEXOM			:IF LU> MAX FOR SLOT OR NO DEV ASSG.
  IF	HDLC
	LIS	R5,4			:GET SIO TYPE
  ELSE	1-HDLC
	LIS	R5,0			:GET BISYNC TYPE
  EI	HDLC
	CLB	R5,TEMP
	JN	NLEXOM			:IF LU IS WRONG TYPE FOR THIS INTERFACE
	LHI	R5,NLINES-1
XMCLL2	CLB	R1,SLU.LT,R5,
	JE	LAEXOM			:IF LU ASSIGNED TO ANOTHER LINE
	SIS	R5,1
	JGE	XMCLL2			:IF MORE LINES TO CHECK
	LR	R0,R1
XMCLL3	LA	R1,SLU.LT,RL,
	JAL	R4,XMROTM
	J	XOMRSP

:	Change HOSTLINKS Mapping
XMCHSL	LIS	R0,4			:MIN # PARS TO MAKE CHANGE
	CLB	R0,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH PARS
	LH	R0,XOMPAR+2		:HOST NUMBER
XMCHL0	LHI	R2,MAXHST-1
XMCHL1	CLH	R0,HOSTS,R2,R2
	JEFS	XMCHL2			:IF VALID HOST
	SIS	R2,1
	JGEBS	XMCHL1			:IF MORE HOSTS TO CHECK
	J	BHEXOM			:COULDN'T FIND IT
XMCHL2	LHL	RL,XOMPAR+6		:LINK NUMBER
	CLHI	RL,NLINKS
	JGE	BLEXOM
	AR	R2,R2			:TWICE RELATIVE HOST NUMBER
	LA	R1,LHST.F,R2,R2		:LINK FLAGS FOR HOST
	LHL	R0,XOMPAR+4		:TYPE OF CHANGE
	JNFS	XMCHL3			:IF ADDING A LINK
:	Delete a link
	TBT	RL,,R1
	JE	ULEXOM			:IF HOST CAN'T USE THIS LINK NOW
	JFS	XMCHL4
:	Add a link
XMCHL3	TBT	RL,,R1
	JN	ALEXOM			:IF HOST ALREADY IS USING THIS LINK
XMCHL4	LR	R2,RL			:OFFSET OF LINK'S BIT FLAG
	LIS	R3,0			:INDICATE BIT CHANGE
	JAL	R4,XMROTM
	JAL	R9,XMSTNC		:UPDATE TNC.HT TABLE AND SET HOST
					: COST=0, HPA=1 IF NECESSARY
	J	XOMRSP

::	Change Host Cost Calculation Parameters
XMCHCO	HS
  IF	1-HCO.MX
	J	CDEXOM
  ELSE
	LIS	R0,7			:MIN # PARAMETERS
	LIS	R1,0			:DON'T CARE ABOUT CURRENT STATE
	JAL	R9,XSUCCH		:SET UP FOR HOST OPTION CHANGE
	LHL	R5,XOMPAR+6		:MAX COST
	LHL	R6,XOMPAR+4		:MIN COST
	CLR	R5,R6
	JL	CLEXOM			:IF MAX COST<MIN COST---ERROR
	CLHI	R5,$A255
	JG	CLEXOM			:IF MAX COST TOO LARGE
	LHL	R0,XOMPAR+$A12	:NUMBER OF COST INTERVALS
	LHL	R8,XOMPAR+$A10	:MIN PATHS
	LHL	R9,XOMPAR+8		:MAX PATHS
	CLR	R9,R8
	JL	CPEXOM			:IF INVALID # FREE PATHS FOR COST CALC
	JEFS	XMCHC1			:IF EQUAL # AVAIL CHANS
	LR	R1,R9
	SR	R1,R8			:PATH DIFFERENCE
	CLR	R0,R1
	JG	CIEXOM			:IF # COST INTERVALS  > # PATHS
	SIS	R0,2
	JLE	CIEXOM
	JFS	XMCHC2
XMCHC1	SIS	R0,2
	JG	CIEXOM
XMCHC2	CLHI	R9,MAXPRT-XOM
	JG	CPEXOM			:IF PATHS> # DPORTS
	CLH	R9,TNC.HT,RL,RL
	JG	CPEXOM			:IF # PATHS > 2-WAY & INC CHANNELS
	LHL	R0,XOMPAR+$A12	:NUMBER OF COST INTERVALS
	CLB	R0,MCI.HT,RL,
	JG	CIEXOM			:IF TOO MANY COST INTERVALS
	CLHI	R0,2						:HJR 05-29-87
	JGFS	XMCHC4			:>2 IS ALWAYS OK	:HJR 05-29-87
	JLFS	XMCHC3			:<2 NEEDS MORE CHECKING	:HJR 05-29-87
	CR	R8,R9			:2 IS OK ONLY IF	:HJR 05-29-87
	JN	CIEXOM			 :MAXPAT = MINPAT	:HJR 05-29-87
	JFS	XMCHC4						:HJR 05-29-87
XMCHC3	LR	R0,R0						:HJR 05-29-87
	JN	CIEXOM			:1 IS ALWAYS WRONG	:HJR 05-29-87
	LR	R5,R5			:0 IS OK ONLY IF	:HJR 05-29-87
	JN	CIEXOM			 :MAXCOST = 0		:HJR 05-29-87
XMCHC4	LIS	R3,1			:INDICATE BYTE MODIFY
	LA	R1,NCI.HT,RL,		: ADR OF COST INTS FOR HOST
	JAL	R4,XMROTM		:UPDATE COST INTERVALS
	LA	R1,MINCST,RL
	LR	R0,R6
	JAL	R4,XMROTM		:UPDATE MIN COST
	LA	R1,MAXCST,RL
	LR	R0,R5
	JAL	R4,XMROTM		:UPDATE MAX COST
	LIS	R3,2			:INDICATE HALFWORD MODIFY
	LA	R1,MINPAT,RL,RL
	LR	R0,R8
	JAL	R4,XMROTM		:UPDATE MIN PATHS TO HOST
	LA	R1,MAXPAT,RL,RL
	LR	R0,R9
	JAL	R4,XMROTM		:UPDATE MAX NUMBER PATHS TO HOST
	LR	R6,RL			:COPY REL HOST NUMBER (FOR *HCOST*)
	LB	R5,MAXCST,RL,
	JNFS	XMCHC6			:IF HOST HAS NOT BECOME FREE
	STB	R5,CSC.HT,R6,
	J	XOMRSP
XMCHC6	LR	R12,R6			:COPY RELATIVE HOST #
	JAL	R4,INICST,,		:UPDATE COST TABLES
	LR	R6,R12			:RESTORE REL HOST #
	LA	R9,XOMRSP		:RETURN ADDRESS
	J	HCOST,,

  EI


::	Change Host Port Availability Limits
XMCHPO	LIS	R0,4
	LIS	R1,0			:DON'T CARE ABOUT CURRENT STATE
	JAL	R9,XSUCCH
	LIS	R3,2			:INDICATE HALFWORD MODIFIES
	LHL	R5,XOMPAR+4		:'AVAILABLEABOVE'
	CLHI	R5,MAXPRT-XOM
	JGE	HPEXOM			:IF LIMIT HIGHER THAN DPORTS
	LHL	R1,TNC.HT,RL,RL
	CLHI	R1,1
	JGFS	XMCHP2			:IF > 1 PATH
	LR	R5,R5
	JN	HPEXOM			:IF LIMIT NOT ZERO
	JFS	XMCHP4

XMCHP2	CR	R5,R1
	JGE	HPEXOM			:IF LIMIT > INC+2-WAY CHANNELS
XMCHP4	LHL	R0,XOMPAR+6		:'UNAVAILABLEBELOW'
	CLHI	R0,MAXPRT-XOM
	JG	HPEXOM			:IF LIMIT HIGHER THAN DPORTS
	LR	R1,R1
	JNFS	XMCHP6			:IF NOT 0 PATHS
	CLHI	R0,1
	JN	HPEXOM			:IF NOT 1 FOR 0 PATHS
	JFS	XMCHP8

XMCHP6	CR	R0,R1
	JG	HPEXOM			:IF LIMIT > INC+2-WAY CHANNELS
XMCHP8	LA	R1,PUB.HT,RL,RL		:ADR TO MODIFY
	JAL	R4,XMROTM
	LR	R0,R5
	LA	R1,PAA.HT,RL,RL
	JAL	R4,XMROTM
	LA	R9,XOMRSP		:RETURN ADDRESS
	LR	R6,RL			:GET HOST NUMBER
	LCS	RL,1			:FLAG ONLY ONE HOST
	LIS	R5,0			:UNKNOWN CHANGE IN FREE PATHS
	J	HPACHH,,		:UPDATE PORT AVAILABILITY STATUS


:	Change Host's Key
XMCHKE	LIS	R0,2
	LIS	R1,0			:DON'T CARE ABOUT CURRENT STATE
	JAL	R9,XSUCCH
	LR	R6,RL			:COPY RELATIVE HOST #
	LR	R13,R0			:COPY HOST NUMBER
	LHL	R12,PORTS,R6,R6
	SRLS	R12,$A14		:NEW STATUS = CURRENT STATUS
	LHL	R0,XOMPAR+4		:NEW KEY
	CLHI	R0,0FF
	JG	HKEXOM			:IF KEY VALUE TOO LARGE
	LIS	R3,1			:INDICATE BYTE MODIFY
	LA	R1,KEY.HT,R6,		:ADR OF KEY TO CHANGE
	JAL	R4,XMROTM		:UPDATE KEY VALUE
	LA	R5,XOMRSP		:RETURN ADDRESS
	J	CHSTAT,,		:TELL SUP NEW KEY VALUE




:	Change LINKHOSTNUMBER Mapping
XMCLHN	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW HOST NUMBER
	LHI	R1,MAXHST-1
XMCLH1	CLH	R0,HOSTS,R1,R1
	JEFS	XMCLH2			:IF R1 IS RELATIVE HOST #
	SIS	R1,1
	JGEBS	XMCLH1
	J	BHEXOM
XMCLH2	LR	R0,R1
	LA	R1,LH.MT,RL,		:ADR OF TABLE ENTRY TO CHANGE
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP


:	DNICNODE Table Modify
XMCDNN	HS
  IF	1-DNI.MX
	J	DNEXOM			:IF TABLE SPACE NOT ALLOCATED
  ELSE
	LIS	R3,2			:INDICATE HALFWORD TABLE UPDATES
	LHL	R0,XOMPAR+2		:DNIC #
	OI	R0,8000			: PLUS FLAG VALUE
	LIS	R8,0			:INDEX TO NODTAB TABLE
	LHL	R1,XOMPAR+4		:ADD/DELETE FLAG
	JE	XMCD50			:IF DELETE AN ENTRY
	LIS	R4,4			:MIN # OF PARS
	CLB	R4,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH PARAMETERS
	LHL	R1,XOMPAR+6		:GET NODE NUMBER
REMIND(XMCD10 - Create special error message if trying to add node 0 to DNICNODES list)
	JE	MNEXOM			:DO NOT ALLOW NODE 0 TO BE ADDED
:	Here to add a node (and possibly a DNIC too)
XMCD10	LHL	R1,NODTAB,R8,R8
	JE	XMCD30			:IF DELIMITER
	CLR	R0,R1
	JEFS	XMCD20			:IF CORRECT DNIC #
	AIS	R8,1
	JBS	XMCD10			: ELSE TRY NEXT ENTRY
:	Found DNIC--If room to add a node, do it
XMCD20	LR	R5,R8			:COPY NODTAB INDEX
XMCD22	AIS	R5,1			:INDEX NEXT TABLE ENTRY
	LHL	R0,NODTAB,R5,R5
	JNBS	XMCD22			:IF NOT END OF NODE LIST
	CLHI	R5,DNI.MX
	JGE	TDEXOM			:IF TABLE SPACE INSUFFICIENT TO ADD
	LA	R1,NODTAB+4,R5,R5	:MOVE DEFAULT DNIC FORWARD BY 1
XMCD24	LHL	R0,NODTAB+2,R5,R5
	JAL	R4,XMROTM		:UPDATE TABLE
	SIS	R1,2			:POINT AT PREVIOUS ENTRY
	SIS	R5,1
	CLR	R5,R8
	JGEBS	XMCD24			:IF MORE ENTRIES TO MOVE FORWARD
	LHL	R0,XOMPAR+6		:NEW NODE #
	LA	R1,NODTAB+2,R8,R8	: PUT IT AFTER DNIC
	JAL	R4,XMROTM
	J	XOMRSP
:	Didn't find DNIC--If not default add DNIC and node
XMCD30	LHL	R2,NODTAB+2,R8,R8
	CLR	R2,R0
	JE	DDEXOM			:IF DNIC IS DEFAULT
	CLHI	R8,DNI.MX-1
	JGE	TDEXOM			:IF NOT ENOUGH TABLE SPACE
	LR	R5,R0			:COPY NEW DNIC #
	LA	R1,NODTAB+6,R8,R8	:1 ENTRY BEYOND CURRENT DEFAULT DNIC
	LR	R0,R2
	JAL	R4,XMROTM
	SIS	R1,2			:1 ENTRY BEYOND CURRENT DELIMITER
	LIS	R0,0
	JAL	R4,XMROTM
	SIS	R1,2
	LHL	R0,XOMPAR+6		:NEW NODE #
	JAL	R4,XMROTM
	SIS	R1,2
	LR	R0,R5			:NEW DNIC #
	JAL	R4,XMROTM
	J	XOMRSP

:	Here to delete a node, or to delete all nodes under a dnic.
XMCD50	LB	R9,XOMNPS		:GET NO. OF PARAMETERS
	SIS	R9,3			:(R9) INDICATES DELETE ALL OR NOT
	JL	CSEXOM			:IF NOT ENOUGH PARAMETERS
:	Search the DNIC first.
	LHL	R2,NODTAB,R8,R8
	JE	XMCD68			:IF TERMINATOR
	CLR	R0,R2
	JEFS	XMCD60			:IF DNIC FOUND
	AIS	R8,1
	JBS	XMCD50			:CHECK NEXT TABLE ENTRY
:	Found DNIC - find and delete node then shrink list
XMCD60	LR	R9,R9
	JGFS	XMCD61			:IF NOT 'DELETE ALL'
	LR	R5,R8			:SAVE POSITION OF DNIC
	LCS	R0,1			:PHONY NODE NO. SO WOULDN'T FIND IT
	JFS	XMCD62

XMCD61	LHL	R0,XOMPAR+6
XMCD62	AIS	R8,1
	LH	R4,NODTAB,R8,R8
	JE	XMCD70			:IF END OF LIST
	JL	XMCD70			:IF NOT UNDER THIS DNIC
	CR	R0,R4
	JNBS	XMCD62			:IF NOT THE NODE WE ARE LOOKING FOR
	LA	R1,NODTAB,R8,R8		:ADR OF NODE TO DELETE
	LHL	R4,NODTAB-2,R8,R8	:GET PREVIOUS ENTRY
	CR	R2,R4
	JN	XMCD64			:IF NOT LAST NODE FOR THIS DNIC #
	LHL	R4,NODTAB+2,R8,R8	:NEXT ENTRY IS TERMINATOR OR NEXT DNIC MEANS LAST NODE FOR DNIC
	JEFS	XMCD63			:IF TERMINATOR
	THI	R4,8000			:TEST FOR DNIC 
	JEFS	XMCD64			:IF NEXT ENTRY IS NOT NEXT DNIC
XMCD63	SIS	R1,2			:DELETE DNIC # TOO
XMCD64	LHL	R0,NODTAB+2,R8,R8
	JAL	R4,XMROTM		:MOVE TABLE ENTRY BACK ONE
	AIS	R1,2			:POINT AT NEXT TABLE ENTRY
	AIS	R8,1
	CLHI	R8,DNI.MX+1
	JLBS	XMCD64			:IF NOT DONE SHRINKING LIST
	J	XOMRSP

:	If DNIC not found
XMCD68	NHI	R0,7FFF			:DEFAULT DNIC DOESN'T HAVE FLAG
	CLH	R0,NODTAB+2,R8,R8
	JE	DDEXOM			:IF IT IS DEFAULT DNIC
	J	DMEXOM			:IF DNIC WAS NOT IN TABLE

XMCD70	LR	R9,R9
	JG	MNEXOM			:IF NOT DELETE ALL
	LA	R1,NODTAB,R5,R5		:START DELETING FROM THE DNIC ENTRY
	SIS	R8,1			:BACK UP 'COPY FROM' POINTER
	J	XMCD64			:GO AND START SHRINKING LIST
  EI


:	CUGDNICLIST table modify				:SCHEN 30-Oct-84
XMCCDN	HS
  IF	CUGCD						:LSH 16-JUN-87
  IF	1-CDL.MX
	J	GLEXOM			:IF TABLE SPACE NOT ALLOCATED
  ELSE
	LIS	R3,2			:INDICATE HALFWORD TABLE UPDATES
	LHL	R1,XOMPAR+4		:DELETE OR ADD FLAG
	JE	XMCC10			:IF DELETE AN ENTRY
	LB	R9,XOMNPS		:#OF INPUT PARS
	SIS	R9,5
	JL	CSEXOM			:COMMAND TOO SHORT
	LHL	R1,XOMPAR+6
	CHI	R1,1
	JEFS	XMCCD1
	CHI	R1,0FF
	JEFS	XMCCD1
	J	OREXOM			:IF INPUT FLAG OF GOOD IS NEITHER 1 NOR FF
:	Here to add a dnic #
XMCCD1	LHL	R1,XOMPAR+8,R9,R9	:GET DNIC #
	CHI	R1,2000			:WITHIN RANGE 2000 TO 7999 ?
	JL	OREXOM			:NO
	CHI	R1,7999
	JG	OREXOM			:NO
	SIS	R9,1
	JGE	XMCCD1			:MORE ENTRY OF DNIC #
	LCS	R8,1
XMCCD2	AIS	R8,1			:ADVANCE POINTER
	LH	R0,CDNTBL,R8,R8
	JE	XMCCD8			:IF END OF TABLE
	CLHI	R0,2000			:HEADER OF LIST ?
	JGEBS	XMCCD2			:NO
	LB	RL,CDNTBL+1,R8,R8	:YES,GET LIST # OF HEADER
	CLH	RL,XOMPAR+2		:COMPARE WITH LIST # OF INPUT
:	JE	XMCCD3			:FIND THE CORRECT LIST #
	JN	XMCCD2

:	Found LIST # -- if room to add a dnic #, do it
XMCCD3	LB	RL,CDNTBL,R8,R8		:GET FLAG OF GOOD OR BAD
	CLB	RL,XOMPAR+7		:EQUAL TO FLAG OF INPUT ?
	JN	G1EXOM			:NO
XMCCD4	LR	R5,R8			:COPY CNDTBL INDEX
XMCCD5	AIS	R5,1			:INDEX NEXT ENTRY
	LHL	R0,CDNTBL,R5,R5
	JNBS	XMCCD5
	LB	R4,XOMNPS		:GET # OF PARS
	SIS	R4,5
	AR	R4,R5
	CLHI	R4,CDL.MX
	JGE	TDEXOM			:IF TABLE SPACE INSUFICIENT TO ADD
	LB	R9,XOMNPS		:GET # OF PARS
	SIS	R9,5
	JL	CSEXOM			:IF WRONG # OF PARS
	AR	R9,R5
	LA	R1,CDNTBL+2,R9,R9	:MOVE TABEL FORWARD
XMCCD6	LHL	R0,CDNTBL,R5,R5		:GET ENTRY
	JAL	R4,XMROTM
	SIS	R1,2			:POINT AT PREVIOUS ENTRY
	SIS	R5,1
	CR	R5,R8
	JNBS	XMCCD6			:IF MOER ENTRY TO MOVE FORWARD
:	Move dnic # after list #
	LB	R9,XOMNPS		:GET # OF PARS
	SIS	R9,5
	LA	R1,CDNTBL+2,R8,R8	:MOVE DNIC #
XMCCD7	LHL	R0,XOMPAR+8,R9,R9
	JAL	R4,XMROTM		:UPDATE TABEL
	AIS	R1,2			:POINT NEXT ENTRY
	SIS	R9,1
	JGEBS	XMCCD7			:IF MORE DINC # TO MOVE
	J	XOMRSP			:EXIT

:	Didn't find LIST # -- add LIST # and DNIC #
XMCCD8	LB	R9,XOMNPS		: # OF INPUT PARS
	SIS	R9,5			: # OF INPUT DNIC
	LR	R4,R8
	AR	R4,R9
	CLHI	R4,CDL.MX-1
	JGE	TDEXOM			:IF NOT ENOUGH TABLE SPACE
	LA	R1,CDNTBL+4,R4,R4
	LIS	R0,0			:MOVE 0 TO END OF TABLE
	JAL	R4,XMROTM
XMCCD9	SIS	R1,2
	LHL	R0,XOMPAR+8,R9,R9	:GET INPUT DNIC
	JAL	R4,XMROTM
	SIS	R9,1
	JGEBS	XMCCD9			:IF MORE DNIC TO ADD
	SIS	R1,1
	LB	R0,XOMPAR+3		:MOVE NEW LIST # TO TABLE
	LIS	R3,1			:INDICATE BYTE TABLE UPDATES
	JAL	R4,XMROTM
	SIS	R1,1
	LB	R0,XOMPAR+7		:MOVE NEW FLAG OF GOOD/BAD TO TABLE
	JAL	R4,XMROTM
	J	XOMRSP


:	Here to delete a dnic, or to delete all dnics under a list.
XMCC10	LB	R9,XOMNPS		:# OF INPUT PARS
	SIS	R9,3			:(R9) INDICATES DELETE ALL OR NOT
	JL	CSEXOM			:COMMAND TOO SHORT
	LCS	R8,1
XMCC20	AIS	R8,1			:MOVE POINTER
	LH	R2,CDNTBL,R8,R8
	JE	G2EXOM			:INPUT LIST # NOT IN TABLE
	CLHI	R2,2000			:HEADER ?
	JGEBS	XMCC20			:IF NOT A HEADER
	LB	RL,CDNTBL+1,R8,R8
	CLH	RL,XOMPAR+2
:	JE	XMCC30			:IF FOUND LIST #
	JN	XMCC20			:CHECK NEXT
:	Found list #- find and delete dnic then shrink list
XMCC30	LR	R9,R9
	JGFS	XMCC31			:IF NOT DELETE ALL
	LR	R5,R8			:SAVE POSITION OF LIST#
	LCS	R0,1			:PHONY DNIC #, SO WOULDN'T FIND IT
	JFS	XMCC32
XMCC31	LB	R2,XOMPAR+7		:GET INPUT FLAG OF GOOD/BAD
	CLB	R2,CDNTBL,R8,R8
	JN	G1EXOM			:INPUT FLAG OF GOOD NOT MATCH WITH FLAG IN TABLE
	LHL	R0,XOMPAR+8		:GET INPUT DNIC #
XMCC32	AIS	R8,1
	LH	R4,CDNTBL,R8,R8
	JE	XMCC40
	CHI	R4,2000
	JL	XMCC40			:IF NOT UNDER THIS LIST #
	CR	R0,R4
	JNBS	XMCC32			:IF INPUT DNIC NOT EQUAL DNIC # IN TABLE
	LA	R1,CDNTBL,R8,R8		:ADDRESS OF DNIC TO DELETE
	LH	R4,CDNTBL+2,R8,R8
	CHI	R4,2000
	JGEFS	XMCC33			:IF NEXT ENTRY IS NEITHER HEADER NOR TERMINATOR
	LH	R4,CDNTBL-2,R8,R8
	CHI	R4,2000
	JGEFS	XMCC33			:IF PREVIOUS ENTRY IS NOT A HEADER
	SIS	R1,2			:DELETE HEADER TOGETHER
XMCC33	LHL	R0,CDNTBL+2,R8,R8	:GET NEXT ENTRY
	JAL	R4,XMROTM		:MOVE TABLE ENTRY BACK ONE
	AIS	R1,2			:POINT AT NEXT TABLE ENTRY
	AIS	R8,1
	CLHI	R8,CDL.MX
	JLBS	XMCC33			:IF NOT DONE SHRINKING LIST
	J	XOMRSP

XMCC40	LR	R9,R9
	JG	G3EXOM			:IF NOT DELETE ALL
	LA	R1,CDNTBL,R5,R5		:START DELETING FROM THE LIST ENTRY
	SIS	R8,1			:BACK UP 'COPY FROM' POINTER
	J	XMCC33			:GO AND START SHRINKING LIST
  EI	:1-CDL.MX						:SCHEN 30-Oct-84
  ELSE	:NOT CUGCD						:LSH 16-JUN-87
	J	CDEXOM			:CODE DISABLED ERROR	:LSH 16-JUN-87
  EI	:CUGCD							:LSH 16-JUN-87

::	CUGMAPPING table modify					:SCY 17-Oct-84
:
XMCCMP	HS
   IF	CUGCD							:LSH 16-JUN-87
  IF	1-CMP.MX
	J	M1EXOM		:IF TABLE SPACE NOT ALLOCATED	:LSH 17-JUN-87
  ELSE
	LIS	R3,3		:INDICATE FULLWORD TABLE UPDATES
	LHL	R1,XOMPAR+2	:ADD/DELETE FLAG
	JE	XMCM50		:IF DELETE AN ENTRY
	LIS	R4,6		:MIN # OF PARAMETERS
	CLB	R4,XOMNPS
	JG	CSEXOM		:IF NOT ENOUGH PARAMETERS
:	Here to add a new CUGMAPPING statement to CMPTBL
XMCM10	LCS	R5,1
	LCS	R8,4
XMCM15	AIS	R5,1	
	AIS	R8,4
	L	R1,CMPTBL,R8,R8	:GET 1ST ENTRY OF CMPTBL
	JN	XMCM15
:	Found end of table--if room to add a CUGMAPPING statement, do it
XMCM20
	CLHI	R5,CMP.MX	
	JGE	TOEXOM		:TABLE SPACE IS NOT SUFFICIENT TO ADD
	LA	R1,CMPTBL,R8,R8	:ADDRESS TO ADD A NEW CUGMAPPING STMT
	L	R0,XOMPAR+4	:1ST PART OF NEW CUGMAPPING VALUE
	JAL	R4,XMROTM	:PUT IT INTO THE END OF CMPTBL
	LA	R1,CMPTBL+4,R8,R8 :NEXT ADDRESS TO PUT
	L	R0,XOMPAR+8	:2ND PART OF NEW CUGMAPPING VALUE
	JAL	R4,XMROTM
	J	XOMRSP
:	Here to delete  an entry from CMPTBL
XMCM50
	LB	R9,XOMNPS	:GET NO. OF PARAMETERS
	SIS	R9,6		:COMPARE WITH MIN # OF PAR.
	JL	CSEXOM		:IF NOT ENOUGH PARAMETERS
:	Search the CMPTBL, if find a match, delete it then shrink CMPTBL
	L	R0,XOMPAR+4	:GET icodea,icodeb
	L	R9,XOMPAR+8	:GET ncode,listno
	LCS	R5,2		:COUNTER OF ENTRIES IN CMPTBL
	LCS	R8,8		:INDEX INTO CMPTBL
XMCM55	AIS	R8,8
	AIS	R5,2
XMCM60	L	R2,CMPTBL,R8,	:GET 1ST PART OF CUGMAPPING VALUE
	JE	M2EXOM		:END OF TABLE, NO MATCH IS FOUND
	CR	R0,R2		:COMPARE WITH WHAT WE RCVD IN XOMPAR
	JNBS	XMCM55		:SKIP IF NOT THE SAME
	AIS	R8,4		:UPDATE INDEX INTO CMPTBL
	L	R2,CMPTBL,R8,	:GET 2ND PART OF CUGMAPPING VALUE
	CR	R9,R2		:COMPARE WITH WHAT WE RCVD IN XOMPAR
	JEFS	XMCM65		:SKIP IF THEY ARE THE SAME
	AIS	R8,4		:UPDATE INDEX INTO CMPTBL
	AIS	R5,1		:UPDATE # OF ENTRIES IN CMPTBL
	J	XMCM60		:LOOP TILL MATCH IS FOUND OR E.O.T.
XMCM65	AIS	R5,1		:UPDATE # OF ENTRIES IN CMPTBL
	LA	R1,CMPTBL-4,R8,	:GET ADDRESS WHERE TO CHANGE
	LR	R9,R1		:SAVE IT
	LR	R7,R5		:SAVE IT
	LCS	R6,2		:FLAG TO COUNT LOOP TIMES
XMCM75	L	R0,4,R1		:GET NEW VALUE
	JAL	R4,XMROTM
	CLHI	R5,CMP.MX*2
	JGE	XMCM80		:SKIP IF THE WHOLE TABLE MOVE BACK UP 1 F.W.
	AIS	R1,4		:UPDATE ADDRESS
	AIS	R5,1		:UPDATE # OF ENTRIES IN CMPTBL
	J	XMCM75
XMCM80	LR	R1,R9		:RESTORE ADDRESS
	LR	R5,R7		:RESTORE COUNTER
	AIS	R6,1	
	JN	XMCM75		:CONTINUE BACKNIG UP WITH 1 MORE F.W
	J	XOMRSP		:DONE WITH SHRINKING CMPTBL
  EI	:1-CMP.MX						:SCY 17-Oct-84
  ELSE	:NOT CUGCD						:LSH 16-JUN-87
	J	CDEXOM		:CODE DISABLED ERROR		:LSH 16-JUN-87
  EI	:CUGCD							:LSH 16-JUN-87




:	*****************************************
:	*					*
:	*	Link Option Modification	*
:	*	 Command Routines		*
:	*					*
:	*****************************************
:
:	Primary and Secondary Address Modification
:	(currently treats link and line nos. as equal)
XMCPSA	LIS	R0,5
	LHI	R1,XMLIDM		:LINE MUST BE MARKING
	JAL	R9,XSUCCS
  IF	FML
	CLHI	R11,NLINES
  ELSE
	LR	R11,R11			:RL ALREADY LINE # FOR LAP,LAPB,SLP
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R8,XOMPAR+6		:NEW PRI ADR
  IF	FML
	LIS	R3,1
  ELSE
	LHI	R3,0FF
  EI
	CR	R8,R3
	JG	IAEXOM			:IF ADR IS INVAILD
	LHL	R12,XOMPAR+8		:NEW SEC ADR
	CR	R12,R3
	JG	IAEXOM
  IF	FML
	LR	R0,R8
	SLLS	R0,7
	STH	R0,TBBITU
  EI
	LR	R0,R8
	LA	R1,PADRT,RL,		:BASE CHANGE ON LINK #(FOR NOW)
	LIS	R3,1			:INDICATE BYTE CHANGE
	JAL	R4,XMROTM
  IF	1-FORCHK
	STM	R0,XOMRSA		:SAVE ALL REGISTRERS
	JAL	R8,INIPCA,,		:REINIT CHECKSUM ARRAYS
	LM	R0,XOMRSA		:RESTORE ALL REGISTERS
  EI
XMCPS1	HS
  IF	FML
	LR	R0,R12
	SLLS	R0,7
	STH	R0,RBBITU
  EI
	LR	R0,R12
	LA	R1,SADRT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP


:	PAD National Options Mod
XMCPAN	LIS	R0,3			:MUST BE AT LEAST THIS MANY PARS
	LIS	R1,0			:ANY STATE FOR CHANGE TO BE MADE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW NAT'L OPTION
	LA	R1,NOP.MK,RL,		:ADR TO CHANGE
	LIS	R3,1			:INDICATE BYTE CHANGE
	JAL	R4,XMROTM
	J	XOMRSP


:	PAD Forwarding Chars Mod
XMCPAF	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW FORWARDING REP FOR TYMSAT
	CLHI	R0,80
	JLFS	XMCPA1			:IF A VALID REP OF CHARS
	J	OREXOM
XMCPA1	LHL	R5,XOMPAR+6		:NEW FORWARDING REP FOR TYMCOM
	CLHI	R5,80
	JLFS	XMCPA2			:IF A VALID REP OF CHARS
	J	OREXOM

XMCPA2	LA	R1,TREF3,RL,		:PTR TO TYMSAT'S FORWARDING TABLE
	LIS	R3,1			:INDICATE BYTE CHANGE
	JAL	R4,XMROTM
	LR	R0,R5
	LA	R1,HREF3,RL,		:PTR TO TYMCOM'S FORWARDING CHAR TABLE
	JAL	R4,XMROTM
	J	XOMRSP

:	PAD Idle Timer Mod
XMCPAI	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4
	CLHI	R0,0FF
	JLEFS	XMCPA4			:IF VALID TIMER VALUE
	J	OREXOM

XMCPA4	LHL	R5,XOMPAR+6		:NEW IDLE VALUE FOR TYMCOM
	CLHI	R5,0FF
	JLEFS	XMCPA6
	J	OREXOM
XMCPA6	LA	R1,TREF4,RL,		:PTR TO TYMSAT'S TIMER TABLE
	LIS	R3,1			:INDICATE BYTE CHANGE
	JAL	R4,XMROTM
	LA	R1,HREF4,RL,		:PTR TO TYMCOM'S TIMER TABLE
	LR	R0,R5			:TYMCOM TIMER VALUE
	JAL	R4,XMROTM
	J	XOMRSP




:	PAD Break Handling Indicator Mod
XMCPAB	LIS	R0,3			:MIN # OF PARS
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW BREAK HANDLING REPRESENTATION
	CLHI	R0,$A21
	JG	OREXOM			:IF DON'T HANDLE THIS REP
	TBT	R0,L1.7IM,,		: ALL VALID BREAK VALUES STORED HERE
	JE	OREXOM			:IF DON'T HANDLE THIS REP
	LA	R1,TREF7,RL,		:BREAK TABLE ADR TO CHANGE
	LIS	R3,1			:INDICATE BYTE CHANGE
	JAL	R4,XMROTM
	J	XOMRSP



:	Echo Character Set Mod
XMCECO	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	SLLS	RL,4			:16 BYTES OF FLAGS (128 BITS) PER LINK
	LA	R1,DETBL,RL,		:BEG OF LINK'S ECHO ENABLE FLAGS
	LIS	R3,0			:INDICATE BIT CHANGE
	LHL	R0,XOMPAR+4		:ENABLE/DISABLE ECHO SWITCH
	LIS	R5,3
	CLB	R5,XOMNPS
	JL	XMCEC2			:IF A RANGE IS GIVEN
	LIS	R8,0			: ELSE--BEG OF CHAR SET
	LHI	R9,7F			: END OF CHAR SET
	J	XMCEC4

XMCEC1	CLB	R5,XOMNPS
	JGE	XOMRSP			:IF NO MORE RANGES
XMCEC2	LH	R8,XOMPAR,R5,R5		:BEG OF RANGE
	JGEFS	XMCEC3			:IF FLAG SAYS SINGLE VALUE
	NHI	R8,07FFF		:STRIP FLAG
	AIS	R5,1			:POINT AT END OF RANGE
XMCEC3	LHL	R9,XOMPAR,R5,R5		:END OF RANGE
	CLHI	R9,07F
	JG	BREXOM			:IF INVALID RANGE
	AIS	R5,1			:POINT TO BEG OF NEXT RANGE
XMCEC4	LR	R2,R9			:BIT OFFSET IN ARRAY
	JAL	R4,XMROTM
	SIS	R9,1
	CR	R9,R8
	JGE	XMCEC4
	J	XMCEC1


:	Frame Window Size Modification
:	(currently treats link and line nos. as equal)
XMCK	LIS	R0,4
	LHI	R1,XMLIDM		:MUST BE SENDING MARKS
	JAL	R9,XSUCCS
  IF	FML
	CLHI	R11,NLINES
  ELSE
	LR	R11,R11
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R0,XOMPAR+6		:NEW WINDOW SIZE
	JE	OREXOM			:IF A DANGEROUS SIZE
	CLB	R0,MXK.LT,RL,		:BASE CHANGE ON LINK#(FOR NOW)
	JG	LWEXOM			:IF LARGER THAN MAX ALLOCATED FOR
	CLHI	R0,7
	JLEFS	XMCK1			:IF NO MOD 8 RESTRICTION
	TBT	RL,F128.F
	JE	LWEXOM			:IF NOT MOD 128
XMCK1	LA	R1,K.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP



:	Frame Retransmission Limit Modification
:	(currently treats link and line nos. as equal)
XMCN2	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R11,R11			:LINE #
  IF	FML
	CLHI	R11,NLINES
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R0,XOMPAR+6		:NEW N2
	LA	R1,RTCNT,RL,		:BASE CHANGE ON LINK #
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP

:	Frame Retransmission Timer Modification
:	(currently treats link and line nos. as equal)
XMCT1	LIS	R0,4
	LIS	R1,0			:DON'T CARE ABOUT STATE
	JAL	R9,XSUCCS
  IF	FML
	CLHI	R11,NLINES
  ELSE
	LR	R11,R11
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R0,XOMPAR+6		:NEW T1 IN TENTHS OF A SEC
	JE	OREXOM			:IF TOO SMALL
	CLHI	R0,222			:MAX T1=546 TENTHS OF A SEC
	JG	OREXOM			:IF CAN'T WAIT THAT LONG
	LHI	R1,RATE/0A		:CLOCKTICKS PER TENTH OF A SEC
	MHR	R0,R1			:NEW TIME IN CLOCKTICKS
	LA	R1,T1.LT,RL,RL		:BASE CHANGE ON LINK # (FOR NOW)
	LIS	R3,2			:INDICATE HALFWORD CHANGE
	JAL	R4,XMROTM
	J	XOMRSP

:	Frame Inactivity Response Timer Modification
:	(currently treats link and line nos. as equal)
XMCILR	HS
  IF	FML
	J	FIEXOM			:NONE FOR FML
  ELSE
	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LR	R11,R11
	JG	ILEXOM			:IF ILLEGAL LINE #
	LIS	R0,0			:WANT ILRR TYPE OF INACTIVITY TIMER
	J	XMCIL2			:GO SET NEW TIMER VALUE
  EI

:	Frame Inactivity Command Timer Modification
:	(currently treats link and line nos. as equal)
XMCILC	HS
  IF	LAP!FML
	J	LIEXOM
  ELSE
	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LR	R11,R11
	JG	ILEXOM			:IF ILLEGAL LINE #
	LIS	R0,1			:WANT ILRRC TYPE OF INACTIVITY TIMER
  EI
  IF	1-FML
XMCIL2	LA	R1,ILRC.F,,		:TYPE OF FRAME INACTIVITY
	LR	R2,RL			:...FOR LINK RL
	LIS	R3,0			:...IS A SINGLE BIT
	JAL	R4,XMROTM		:TOGGLE IT AS NEEDED
	LHL	R0,XOMPAR+6		:GET TIMER VALUE
	LA	R1,FINACT,RL,		:...AND ADR OF CELL FOR LINK RL
	LIS	R3,1			:...WHICH IS 1 BYTE
	JAL	R4,XMROTM		:UPDATE TIMER VALUE
	J	XOMRSP
  EI

:	Incoming Channel Range Modification
XMCICN	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R11,XOMPAR+4		:NEW LIC
	CLI	R11,0FFFF
	JNFS	XMCIC1			:IF NOT DEASSIGNING INC CHANS
	LR	R12,R11			:HIC=LIC=-1
	J	XMCIC6
XMCIC1  LH	R0,HPC.LT,RL,RL					:AHM 05-28-87
	JGFS	XMCIC3			:IF PVC CHANS PRESENT	:AHM 05-28-87
	CLH	R11,LCC.LT,RL,RL
	JL	NCEXOM			:IF LIC<LCC
	JFS	XMCIC4						:AHM 05-28-87
XMCIC3	CR	R11,R0						:AHM 05-28-87
	JLE	CCEXOM			:IF LIC<=HPC		:AHM 05-28-87
XMCIC4	LHL	R12,XOMPAR+6		:NEW HIC		:AHM 05-28-87
	CLR	R11,R12
	JG	BREXOM			:IF LIC>HIC
	LH	R0,LTC.LT,RL,RL
	JLFS	XMCIC2			:IF NO 2-WAY CHANS
	CLR	R12,R0
	JGE	CCEXOM			:IF HIC>=LTC
	J	XMCIC6
XMCIC2	LH	R0,LOC.LT,RL,RL
	JLFS	XMCIC5			:IF NO OUTGOING CHANS
	CLR	R12,R0
	JGE	CCEXOM			:IF HIC>=LOC
	JFS	XMCIC6
XMCIC5	CLH	R12,HCC.LT,RL,RL
	JG	NCEXOM			:IF HIC>HCC
XMCIC6	LR	R0,R11
	LA	R1,LIC.LT,RL,RL
	JAL	R4,XMINEC
	JAL	R4,XMROTM
	LR	R0,R12
	LA	R1,HIC.LT,RL,RL
	JAL	R4,XMROTM
	J	XMCEPA


:	2-way Channel Range Modification
XMCTCN	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R11,XOMPAR+4		:NEW LTC
	CLI	R11,0FFFF
	JNFS	XMCTC1			:IF NOT DEASSIGNING 2-WAY CHANS
	LR	R12,R11			:HTC=LTC=-1
	J	XMCTC7
XMCTC1	LHL	R12,XOMPAR+6		:NEW HTC
	CLR	R11,R12
	JG	BREXOM			:IF LTC>HTC
	LH	R0,HIC.LT,RL,RL
	JGFS	XMCTC2			:IF INCOMING CHANS PRESENT
	LH	R0,HPC.LT,RL,RL					:AHM 05-28-87
	JGFS	XMCTC2			:IF PVC CHANS PRESENT
	CLH	R11,LCC.LT,RL,RL
	JL	NCEXOM			:IF LTC<LCC
	JFS	XMCTC4
XMCTC2	CR	R11,R0
	JLE	CCEXOM			:IF LTC<=HIC
XMCTC4	LH	R0,LOC.LT,RL,RL
	JGFS	XMCTC6			:IF OUTGOING CHANS PRESENT
	CLH	R12,HCC.LT,RL,RL
	JG	NCEXOM			:IF HTC>HCC
	JFS	XMCTC7
XMCTC6	CLR	R12,R0
	JGE	CCEXOM			:IF HTC>=LOC
XMCTC7	LR	R0,R11
	LA	R1,LTC.LT,RL,RL
	JAL	R4,XMTNEC
	JAL	R4,XMROTM
	LR	R0,R12
	LA	R1,HTC.LT,RL,RL
	JAL	R4,XMROTM
	J	XMCEPA

:	Outgoing Channel Range Modification
XMCOCN	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R11,XOMPAR+4		:NEW LOC
	CLI	R11,0FFFF
	JNFS	XMCOC1			:IF NOT DEASSIGNING OUTGOING CHANS
	LR	R12,R11			:HOC=LOC=-1
	J	XMCOC6
XMCOC1	LHL	R12,XOMPAR+6		:NEW HOC
	CLR	R11,R12
	JG	BREXOM			:IF LOC>HOC
	CLH	R12,HCC.LT,RL,RL
	JG	NCEXOM			:IF HOC>HCC
	LH	R0,HTC.LT,RL,RL
	JLFS	XMCOC2			:IF NO 2-WAY CHANS
	CLR	R11,R0
	JLE	CCEXOM			:IF LOC<=HTC
	J	XMCOC6
XMCOC2	LH	R0,HIC.LT,RL,RL
	JLFS	XMCOC4			:IF NO INCOMING CHANS
	CLR	R11,R0
	JLE	CCEXOM			:IF LOC<=HIC
	J	XMCOC6
XMCOC4	LH	R0,HPC.LT,RL,RL					:AHM 05-28-87
	JLFS	XMCOC5			:IF NO PVC CHANS	:AHM 05-28-87
	CLR	R11,R0						:AHM 05-28-87
	JLE	CCEXOM			:IF LOC<=HPC		:AHM 05-28-87
	JFS	XMCOC6						:AHM 05-28-87
XMCOC5	CLH	R11,LCC.LT,RL,RL
	JL	NCEXOM			:IF LOC<LCC
XMCOC6	LR	R0,R11
	LA	R1,LOC.LT,RL,RL
	JAL	R4,XMONEC
	JAL	R4,XMROTM
	LR	R0,R12
	LA	R1,HOC.LT,RL,RL
	JFS	XMOEPA


XMCEPA  JAL	R9,XMSTNC	: UPDATE TNC.HT TABLE AND SET HOST COST =0 :JL 12-May-86
	JFS	XMEPIN
XMOEPA  JAL	R4,XMROTM	: 
XMEPIN	J	XOMRSP						:HJR 11-05-86


: SUBROUTINE TO UPDATE MAX # OF CHANNELS TO USE WHEN MODIFYING TCNL, ICNL,
: OR OCNL WITH XOM.						:JL 6-May-86

XMINEC  LHL	R2,LIC.LT,RL,RL : GET LOW INCOMING :HJR 11-05-86:JS 26-JUN-87
	LHL	R3,HIC.LT,RL,RL : GET HIGH INCOMING:HJR 11-05-86:JS 26-JUN-87
	JFS	XMNEC1		: continue in common routine	:HJR 11-05-86
XMTNEC  LHL	R2,LTC.LT,RL,RL : GET LOW TWO-WAY  :HJR 11-05-86:JS 26-JUN-87
	LHL	R3,HTC.LT,RL,RL : GET HIGH TWO-WAY :HJR 11-05-86:JS 26-JUN-87
	JFS	XMNEC1		: continue in common routine	:HJR 11-05-86
XMONEC  LHL	R2,LOC.LT,RL,RL : GET LOW OUTGOING :HJR 11-05-86:JS 26-JUN-87
	LHL	R3,HOC.LT,RL,RL : GET HIGH OUTGOING:HJR 11-05-86:JS 26-JUN-87
XMNEC1	JAL	R9,XMNED	: DO RANGE CK/SETUP		:HJR 11-05-86
	LR	R3,R3		: PREVIOUS CHANNELS?		:HJR 11-05-86
	JL	XMNEC5		: jump if not
	LHR	R0,R12		: did we change the range and set a new one ?
	JL	XMNEC6		: jump if not
	SR	R0,R11		: calculate new range
XMNEC2  AH	R0,,R1		: add lower channel # of old range
	SR	R0,R3		: - higher channel # of old range
XMNEC3  AH	R0,NEC.LT,RL,RL : update max # of allowed channels to use
	LR	R6,R1		: SAVE ORIGINAL  VALUE
	LA	R1,NEC.LT,RL,RL
	LIS	R3,2
	LR	R5,R4		:SAVE RETURN ADDRESS
	JAL	R4,XMROTM
	LR	R4,R5
	LR	R1,R6
XMNEC4  LR	R0,R11		: restore R0
	LIS	R3,2		: PREPARE FOR HALFWORD MODIFICATION
	JR	R4		: RETURN
XMNEC5  LHR	R0,R12		: did we set a new range
	JLBS    XMNEC4		: do nothing and return if not
	AIS	R0,1		: calculate new range
	SR	R0,R11		: 
	J	XMNEC3		: go update NEC.LT
XMNEC6  LCS	R0,1		: calculate old range to deduct from NEC.LT
	J	XMNEC2		:
 
:-------------------------------------------------------------- HJR 11-05-86
: XMNED -
:   If any LCNs being deleted are active kill the operation, else reset
:   EPA.F bits for those LCNs that are being removed and set the EPA.F
:   bits for those LCNs being added.
:
:   Entry:	R2,R3 - Old bottom and top respectively.
:		R11,R12 - New bottom and top respectively.
:		RL - Line #.
:		R9 = link register.
:   Modify R5-R8.

xmned	lhl	r7,epb.lt,rl,rl		:get eport base for this line
	sh	r7,lcc.lt,rl,rl		:set up lcn=>eport mapper for later use

	chi	r2,1000			:did we have old range? (lcn<4096d)
	jlfs	xmned1			:jump if yes, else just set new bits
	chi	r11,1000		:but only if we have some
	jger	r9			:if we dont, return
	lr	r5,r11			:bottom of set range
	lr	r6,r12			:top of set range
	j	xmned9			:go set bits and exit

xmned1	chi	r11,1000		:do we have a new range?
	jlfs	xmned2			:jump if yes, else check all old bits
	lr	r5,r2			:bottom of check range
	lr	r6,r3			:top of check range
	j	xmned8			:go check bits and exit
	
xmned2	cr	r2,r11			:any bottom bits to process
	jgfs	xmned3			:only new ones, go do set bits
	jefs	xmned4			:none, go check top bits
	lr	r5,r2			:bottom of range
	lr	r6,r11			:top of check range
	sis	r6,1			
	jal	r8,xmnedc		:go do check
	jfs	xmned4			:need to check high end

xmned3	lr	r5,r11			:bottom of range
	lr	r6,r2			:top of range
	sis	r6,1
	jal	r8,xmneds		:go do set

xmned4	cr	r3,r12			:any top bits to process
	jer	r9			:return if not
	jlfs	xmned5			:go do set bits
	lr	r5,r12			:bottom of range
	lr	r6,r3			:top of check range
	ais	r5,1
xmned8	jal	r8,xmnedc		:go do check
	jr	r9			:return

xmned5	lr	r5,r3			:bottom of range
	lr	r6,r12			:top of range
	ais	r5,1
xmned9	jal	r8,xmneds		:go do set
	jr	r9			:return

:- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
xmnedc	ar	r5,r7			:set up eport bit displacements
	ar	r6,r7
	st	r5,temp			:save bottom
xmnedd	tbt	r5,epa.f		:bit = 0 means active port
	je	acexom			:if this is the case then error
	ais	r5,1			:increment bit displacement
	cr	r5,r6			:done yet?
	jlebs	xmnedd			:if not, continue

	l	r5,temp			:now go back thru and reset the bits
xmnede	rbt	r5,epa.f
	ais	r5,1			:increment bit displacement
	cr	r5,r6			:done yet?
	jlebs	xmnede			:if not, continue
	jr	r8			:else return

:- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
xmneds	ar	r5,r7			:set up eport bit displacements
	ar	r6,r7
xmnedt	sbt	r5,epa.f		:mark port available
	ais	r5,1			:increment bit displacement
	cr	r5,r6			:done yet?
	jlebs	xmnedt			:if not, continue
	jr	r8			:else return

:-----------------------------------------------------------------------



:	T10, N10 Modification
XMCT10	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW T10
	JE	OREXOM			:IF USER BEING UNREALISTIC
	LHL	R5,XOMPAR+6
	JE	OREXOM			: IF JUST CAN'T TYP
	LA	R1,T10.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	LR	R0,R5
	SIS	R0,1			:CORRECT TO GET RE-TRANS VALUE
	LA	R1,N10.LT,RL,
	JAL	R4,XMROTM
	J	XOMRSP

:	T11 Modification
XMCT11	LIS	R0,3
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW T11
	JE	OREXOM
	LA	R1,T11.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP

:	T12	Modification
XMCT12	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:NEW T12
	JE	OREXOM
	LHL	R5,XOMPAR+6
	JE	OREXOM
	LA	R1,T12.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	LR	R0,R5
	SIS	R0,1			:CORRECT TO GET RE-TRANS VALUE
	LA	R1,N12.LT,RL,
	JAL	R4,XMROTM
	J	XOMRSP

:	T13 Modification
XMCT13	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4
	JE	OREXOM
	LHL	R5,XOMPAR+6
	JE	OREXOM
	LA	R1,T13.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	LR	R0,R5
	SIS	R0,1			:CORRECT TO GET RE-TRANS VALUE
	LA	R1,N13.LT,RL,
	JAL	R4,XMROTM
	J	XOMRSP

:	PWIND Modification
XMCPWI	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R5,XOMPAR+4		:NEW TMT WINDOW
	JE	OREXOM			:IF A SHUT WINDOW ALRAEDY
	CLHI	R5,7
	JLEFS	XMCPW2			:IF MOD 8 DOESN'T MATTER
	TBT	RL,P128.F
	JE	PWEXOM			:IF CONFIGURED MOD 8
	CLHI	R5,7F
	JG	PWEXOM			:IF TMT WINDOW>127
XMCPW2	LHL	R0,XOMPAR+6		:RCV WINDOW SIZE
	JE	OREXOM			:IF A SEALED WINDOW
	CLHI	R0,7
	JLEFS	XMCPW4			:IF MOD 8 DOESN'T MATTER
	TBT	RL,P128.F
	JE	PWEXOM			:IF ONLY CONF AS MOD 8
	CLHI	R0,7F
	JG	PWEXOM			:IF WINDOW>127
XMCPW4	LA	R1,PWR.LT,RL,
	LIS	R3,1			:BYTE CHANGE
	JAL	R4,XMROTM
	LR	R0,R5
	LA	R1,PWT.LT,RL,
	JAL	R4,XMROTM
	J	XOMRSP

:	Packet Size Modification
XMCPSI	LIS	R0,4
	LIS	R1,0
	JAL	R9,XSUCCS
	LHL	R5,XOMPAR+4		:TMT PSIZE
	LIS	R8,$A 10		:MAX # OF POSSIBLE PACKET SIZES
	LHI	R9,$A 16		:MIN PACKET SIZE
XMCPS2	CLR	R5,R9
	JEFS	XMCPS4			:IF A VALID PACKET SIZE
	AR	R9,R9
	SIS	R8,1
	JGBS	XMCPS2
	J	PSEXOM
XMCPS4	HS
  IF	FML
	CLHI	R5,80
	JN	PSEXOM			:IF NOT 128
  EI
	CLH	R5,MST.LT,RL,RL
	JG	PSEXOM			:IF PSIZE>MAXPSIZE ALLOCATED FOR
	LHL	R0,XOMPAR+6		:RCV PSIZE
	LIS	R8,$A 10		:MAX # OF POSSIBLE PACKET SIZES
	LHI	R9,$A 16		:MIN PACKET SIZE
XMCPS6	CLR	R5,R9
	JEFS	XMCPS8
	AR	R9,R9
	SIS	R8,1
	JGBS	XMCPS6
	J	PSEXOM
XMCPS8	HS
  IF	FML
	CLHI	R0,80
	JN	PSEXOM
  EI
	CLH	R0,MSR.LT,RL,RL
	JG	PSEXOM
	LA	R1,PSR.LT,RL,RL
	LIS	R3,2
	JAL	R4,XMROTM
	LR	R0,R5
	LA	R1,PST.LT,RL,RL
	JAL	R4,XMROTM
	J	XOMRSP

:	Throughput Class Modification
XMCTPC	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R1,XOMPAR+4		:TMT TPUT CLASS
	CLHI	R1,3
	JL	TCEXOM			:IF NOT A CCITT CLASS
	CLHI	R1,0C
	JG	TCEXOM
	LHL	R0,XOMPAR+6		:RCV TPUT CLASS
	CLHI	R0,3
	JL	TCEXOM
	CLHI	R0,0C
	JG	TCEXOM
	SLLS	R1,4
	OR	R0,R1
	LA	R1,TTR.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP

:	Throughput Class to Packet Window Size Mapping Modification
XMCTPW	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLE SPACE ALLOCATED
  ELSE
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R2,RL
	SLLS	R2,4
	LA	R1,TTW.LT,R2,
	LIS	R5,2			:CURRENT PARAMETER NUMBER
	LIS	R6,0F			:NUMBER OF TPUT MAPPINGS
	LIS	R3,1
	LB	R7,XOMNPS
XMCTP2	CLR	R5,R7
	JGE	XMCTP6			:IF NOMORE CHANGES
	LHL	R0,XOMPAR,R5,R5
	CLHI	R0,7
	JLEFS	XMCTP4			:IF MOD 8 DOESN'T MATTER
	TBT	RL,P128.F
	JE	PWEXOM			:IF CONF MOD 8
	CLHI	R0,7F
	JG	PWEXOM			:IF WINDOW>127
XMCTP4	AIS	R5,1			:NEXT PARAMETER INDEX
	SIS	R6,1			:ONE LESS PAR TO GO
	JG	XMCTP2
XMCTP6	LIS	R6,0F
	LIS	R5,2
XMCTP7	AIS	R1,1
	LHL	R0,XOMPAR,R5,R5
	JAL	R4,XMROTM
	AIS	R5,1
	CLR	R5,R7
	JGE	XOMRSP			:IF NO MORE CHANGES
	SIS	R6,1
	JGBS	XMCTP7
	J	XOMRSP
  EI


:	Throughput Class to Packet Size Mapping Modification
XMCTPS	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLE SPACE ALLOCATED
  ELSE
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R2,RL
	SLLS	R2,5
	LA	R1,TTS.LT,R2,
	LIS	R3,2
	LIS	R5,2			:CURRENT PAR INDEX
	LIS	R6,0F			:# OF PARS TO CHANGE
	LB	R7,XOMNPS
XMCT20	CLR	R5,R7
	JGE	XMCT26			:IF NO MORE CHANGES
	LHL	R0,XOMPAR,R5,R5
	LIS	R8,8			:# OF POSSIBLE PACKET SIZES
	LHI	R9,10			:SMALLEST PACKET SIZE
XMCT22	CLR	R0,R9
	JEFS	XMCT24			:IF AN OK SIZE
	AR	R9,R9
	SIS	R8,1
	JGBS	XMCT22
	J	PSEXOM			:IF AN INVALID PACKET SIZE
XMCT24	CLH	R0,MST.LT,RL,RL
	JG	PSEXOM
	CLH	R0,MSR.LT,RL,RL
	JG	PSEXOM
	AIS	R5,1
	SIS	R6,1
	JG	XMCT20			:IF MORE MAPPING ENTRIES TO UPDATE
XMCT26	LIS	R5,2
	LIS	R6,0F
XMCT28	AIS	R1,2
	LHL	R0,XOMPAR,R5,R5
	JAL	R4,XMROTM
	AIS	R5,1
	CLR	R5,R7
	JGE	XOMRSP
	SIS	R6,1
	JG	XMCT28
	J	XOMRSP
  EI


:	Throughput Class to Standard Class Mapping Modification
XMCTPM	HS
  IF	1-TPUTAB
	J	THEXOM			:IF NO TPUT TABLE SPACE ALLOCATED
  ELSE
	LHI	R0,$A 17
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LA	R1,TEI.LT,,
	LR	R8,R1
	LR	R2,RL			:COPY LINK #
	SLLS	R2,4			:16 BYTES PER LINK
	AR	R8,R2			:BASE ADR FOR LINK
	AR	R1,R2			:NEXT ADR TO CHANGE
	LIS	R3,1			:BYTE CHANGE
	LIS	R5,2			:CURRENT PAR #
	LIS	R6,0F			:# OF PARS TO UPDATE
XCTPM2	LHL	R0,XOMPAR,R5,R5
	JE	TCEXOM			:INVALID CLASS
	CLHI	R0,0F
	JG	TCEXOM			:IF INVALID CLASS
	SIS	R6,1
	JLE	XCTPM4
	LHI	R2,10
XCTPM3	CLH	R0,XOMPAR,R2,R2
	JE	TCEXOM
	SIS	R2,1
	CLR	R2,R5
	JGBS	XCTPM3
	AIS	R5,1
	J	XCTPM2
XCTPM4	LIS	R5,2
	LIS	R6,0F
XCTPM6	AIS	R1,1
	LHL	R2,XOMPAR,R5,R5
	LB	R0,,R1			:OLD EXT/OLD INT CLASS FOR (R5-1)TH
	NHI	R0,0F0			:OLD EXT CLASS
	OR	R0,R2			:OLD EXT/NEW INT CLASS
	JAL	R4,XMROTM		:CHANGE INT CLASS
	LB	R0,,R2,R8		:OLD EXT/OLD INT CLASS FOR R2TH
	NHI	R0,0F			:OLD INT CLASS
	LR	R9,R5
	SIS	R9,1
	SLLS	R9,4			:NEW EXT CLASS
	OR	R0,R9
	AR	R2,R8
	LR	R9,R1			:SAVE INT UPDATE ADR
	LR	R1,R2			:EXT UPDATE ADR
	JAL	R4,XMROTM
	LR	R1,R9			:RESTORE INT UPDATE ADR
	AIS	R5,1
	SIS	R6,1
	JG	XCTPM6			:IF MORE PARS TO UPDATE
	J	XOMRSP
  EI


:	CCITT THROUGHPUT CLASS TO TYMNET CIRCUIT SPEED MAPPING MODIFICATION
XMCTCS.	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHI	R2,10			:IT'S 16 AND NOT 15	:SCY 11-Nov-85
	MHR	R2,RL			:INDEX INTO TABLE
	AIS	R2,1			:DO NOT MOD DUMMY TC0	:SCY 11-Nov-85
	LA	R1,TCT.LT,R2,
	LIS	R5,2			:CURRENT PARAMETER NUMBER
	LHI	R6,10			:NUMBER OF TPUT MAPPINGS
	LIS	R3,1
	LB	R7,XOMNPS
XCTCS2	CLR	R5,R7
	JGE	XCTCS6			:IF NOMORE CHANGES
	LHL	R0,XOMPAR,R5,R5
	CLHI	R0,MAXCS+1
	JG	SLEXOM			:IF CIRCUIT SPEED VALUE > MAX
	AIS	R5,1			:NEXT PARAMETER INDEX
	SIS	R6,1			:ONE LESS PAR TO GO
	JG	XCTCS2
XCTCS6	LHI	R6,10
	LIS	R5,2
XCTCS7	LHL	R0,XOMPAR,R5,R5
	JAL	R4,XMROTM
	AIS	R1,1
	AIS	R5,1
	CLR	R5,R7
	JGE	XOMRSP			:IF NO MORE CHANGES
	SIS	R6,1
	JG	XCTCS7
	J	XOMRSP


:	TYMNET CIRCUIT SPEED TO THROUGHPUT CLASS MAPPING MODIFICAITON
XMCCSI	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R2,RL
	SLLS	R2,2
	LA	R1,CST.LT,R2,
	LIS	R5,2			:CURRENT PARAMETER NUMBER
	LIS	R6,4			:NUMBER OF TPUT MAPPINGS
	LIS	R3,1
	LB	R7,XOMNPS
XCCSI2	CLR	R5,R7
	JGE	XCCSI6			:IF NOMORE CHANGES
	LHL	R0,XOMPAR,R5,R5
	CLHI	R0,MAXTC
	JGE	CLEXOM		:IF CIRCUIT SPEED VALUE > MAX
	AIS	R5,1			:NEXT PARAMETER INDEX
	SIS	R6,1			:ONE LESS PAR TO GO
	JG	XCCSI2
XCCSI6	LIS	R6,4
	LIS	R5,2
XCCSI7	LHL	R0,XOMPAR,R5,R5
	LR	R8,R0
	SLLS	R8,4
	OR	R0,R8
	JAL	R4,XMROTM
	AIS	R1,1			:BUMP POINTER INTO CST.LT
	AIS	R5,1			:BUMP INDEX INTO XOMPAR
	CLR	R5,R7
	JGE	XOMRSP			:IF NO MORE CHANGES
	SIS	R6,1
	JG	XCCSI7
	J	XOMRSP


:	ODNIC MODIFICATION
XMCODN	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LIS	R3,2
	LHL	R0,XOMPAR+6		:DNIC
	LHL	R2,XOMPAR+4		:ADD/DELETE FLAG
	LA	R1,ONI.LT,,		:BASE OF DNIC TABLE
	LHI	R5,ONI.MX-1		:# ENTRIES -1 IN TABLE FOR LINK
	SLL	RL,ONI.SC		:OFFSET TO LINK'S ENTRIES IN HALFWORDS
	AR	RL,RL			: IN BYTES
	AR	R1,RL			:BASE ADR OF TABLE FOR THIS LINK
	LCS	R8,1			:NO ROOM IN TABLE FLAG
XMCOD2	LHL	R6,,R1			:TABLE ENTRY (IE. DNIC)
	JNFS	XMCOD3			:IF A DNIC PRESENT
	LR	R8,R1			:HERE'S WHERE TO PUT NEW ENTRY
	LR	R2,R2
	JN	XMCOD7			:IF ADD, PLACE IT
	J	XMCOD5			:  ELSE LOOK AT NEXT ENTRY

XMCOD3	CR	R0,R6
	JNFS	XMCOD5			:IF NOT SAME AS NEW DNIC
	LR	R2,R2
	JN	DPEXOM			:IF WANT TO ADD, BUT DNIC ALREADY THERE
	LIS	R0,0
	J	XMCOD9			: WANT TO DELETE--DO IT
XMCOD5	AIS	R1,2			:POINT AT NEXT TABLE ENTRY
	SIS	R5,1
	JGE	XMCOD2			:IF MORE TABLE ENTRIES
XMCOD7	LR	R2,R2
	JE	DMEXOM			:IF WANT TO DELETE, BUT DNIC NOT THERE
	LR	R8,R8
	JL	TDEXOM			:IF TABLE ALREADY FULL
	LR	R1,R8			:ADR TO UPDATE
XMCOD9	JAL	R4,XMROTM
	J	XOMRSP

:	Check Calling Address Table Modification
XMCCHK	LA	R3,CHK.LT,,		:BASE OF TABLE
	LIS	R2,0			:MIN FOR "LENGTH" TO BE TAKEN AS A FLAG
XMCCH0	LIS	R0,3			:MIN # PARS(CMD#, LINK#,LENGTH)
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R1,R3			:BASE ADR OF TABLE TO CHANGE
	SLLS	RL,3			:8 BYTES PER LINK
	AR	R1,RL
	LIS	R3,1			:INDICATE BYTE CHANGES TO *XMROTM*
	LIS	R0,3
	CLB	R0,XOMNPS		:# OF PARS IN THE COMMAND LIST
	JLFS	XMCCH2			:IF ADDRESS DIGITS ARE PRESENT
	LR	R0,R11			: ELSE GET LENGTH VALUE
	JEFS	XMCCH1			:IF LENGTH IS NULL
	J	OREXOM			:  ELSE LENGTH MUST BE ZERO
XMCCH1	JAL	R4,XMROTM		: SAVE IT...
	J	XOMRSP			: AND EXIT

XMCCH2	LHL	R9,XOMPAR+4		:LENGTH OF ADR (OR CHECK)
	LR	R0,R9
	JEBS	XMCCH1			:IF NO ADR (OR NO CHECK)
	CLHI	R9,0E
	JG	CAEXOM			:IF >14 DIGITS--NO GOODNIK
	LR	R5,R9
	SIS	R5,1			:USE 1 LESS DIGIT FOR INTEGER DIVIDE
	LIS	R6,4			:4 DIGITS FOR EACH EXTRA PARAMETER
	DHR	R5,R6
	AIS	R6,4			:SHOULD HAVE THIS MANY PARS
	CLB	R6,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH ADR DIGITS
	JAL	R4,XMROTM		:UPDATE LENGTH
	LIS	R6,6			:INDEX INTO DIGIT PAIR ARRAY
XMCCH4	LB	R0,XOMPAR,R6		:DIGIT PAIR
	AIS	R1,1
	JAL	R4,XMROTM		:UPDATE DIGIT PAIR
	AIS	R6,1			:OFFSET OF NEXT DIGITS IN PAR ARRAY
	SIS	R9,2
	JG	XMCCH4			:IF MORE ADR DIGITS
	J	XOMRSP			:EXIT

:	Called Address Length Check Modification
XMCCLL	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R0,XOMPAR+4		:# DIGITS TO CHECK
	CLHI	R0,0E
	JG	CAEXOM			:IF TOO MANY DIGITS
	LA	R1,CDL.LT,RL,
	LIS	R3,1
	JAL	R4,XMROTM
	J	XOMRSP

:	Canned Calling Address Modification
XMCCLG	LIS	R0,4			:MIN CMD#/LINK/NUI/ADRLEN
	LIS	R1,0			:NO PARTICULAR INTERFACE STATE REQ
	JAL	R9,XSUCCS		:RETURNS RL=LINK#
	LH	R0,XOMPAR+4		:NUI FLAG (FFFF=NO CHANGE)
	JL	XMCCL6			:IF NOT CHANGING NUI OPTION
	LA	R1,NUI,,		:BEG OF NUI FLAG ARRAY
	LR	R2,RL			:...AND BIT OFFSET IN ARRAY
	LIS	R3,0			:INDICATE BIT MODIFY
	JAL	R4,XMROTM		:...AND MAKE THE CHANGE
XMCCL6	LA	R1,CLG.LT,,		:BEG OF CLGADR ARRAY
	SLLS	RL,3			:...+ 8 BYTES PER LINK
	AR	R1,RL			:...GIVES BEG OF LINK'S CLGADR
	LIS	R3,1			:INDICATE BYTE MODIFY
	LH	R0,XOMPAR+6
	JL	XOMRSP			:IF NO CHANGE TO CALLING ADDRESS
	CLHI	R0,0E			:MUST BE LESS THAN 14 DIGITS
	JLE	XMCCL8			:IF OK LENGTH
	CLHI	R0,0FE			:HOSTADR FLAG VALUE
	JL	CAEXOM			:IF LENGTH>14...NO GOODNIK
	CLHI	R0,0FF
	JG	OREXOM			:IF NOT HOSTADR OR OLDADR FLAG
XMCCL7	JAL	R4,XMROTM		:SET THE FLAG OR LENGTH VALUE
	J	XOMRSP			:...AND EXIT

XMCCL8	LR	R9,R0
	JEBS	XMCCL7			:IF ZERO LENGTH...FINISH UP
	LR	R5,R0
	SIS	R5,1
	LIS	R6,4			:4 DIGITS PER PARAMETER
	DHR	R5,R6
	AIS	R6,5			:NEED AT LEAST THIS MANY PARAMETERS
	CLB	R6,XOMNPS
	JG	CSEXOM			:IF TOO FEW PARAMETERS
	JAL	R4,XMROTM		:  ELSE NEW LENGTH
	LIS	R6,8
XMCCL9	LB	R0,XOMPAR,R6		:2 ADDRESS DIGITS
	AIS	R1,1			:NEXT LOCATION TO CHANGE
	JAL	R4,XMROTM		:UPDATE ADDRESS STRING VALUE
	AIS	R6,1			:INDEX TO NEXT ADDRESS DIGITS
	SIS	R9,2
	JG	XMCCL9			:IF MORE NEW ADDRESS DIGITS
	J	XOMRSP			:  ELSE...DONE


:	Canned Called Address Modification
XMCCLD	LA	R3,CLD.LT,,
	LHI	R2,0FF			:MIN FOR "LENGTH" TO BE TAKEN AS A FLAG

:	Routine for Canned Called Address Modifications
XMCCL0	LIS	R0,3			:MIN # PARS(CMD#, LINK#,LENGTH OR FLAG)
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R1,R3			:BASE ADR OF TABLE TO CHANGE
	SLLS	RL,3			:8 BYTES PER LINK
	AR	R1,RL
	LIS	R3,1			:INDICATE BYTE CHANGES TO *XMROTM*
	LIS	R0,3
	CLB	R0,XOMNPS
	JLFS	XMCCL2			:IF ADDRESS DIGITS ARE PRESENT
	LR	R0,R11			: ELSE GET FLAG VALUE
	JEFS	XMCCL1			:IF LENGTH IS NULL
	CLR	R0,R2			:VALIDATE FLAG...
	JN	OREXOM			:IF NOT FLAG FF	:LECHIE 20-Jun-84
	JAL	R4,XMROTM		:ELSE SAVE IT	:LECHIE 20-Jun-84
	LIS	R0,0			:VALUE FOR CLD.FL	:LECHIE 20-Jun-84
	J	XMCCL5			:CHANGE IT	:LECHIE 20-Jun-84
XMCCL1	JAL	R4,XMROTM		: SAVE LENGTH OF 0
	J	XMCCL4			:GO CHANGE CLD.FL :LECHIE 20-Jun-84

XMCCL2	LHL	R9,XOMPAR+4		:LENGTH OF ADR (OR CHECK)
	LR	R0,R9
	JEBS	XMCCL1			:IF NO ADR (OR NO CHECK)
	CLHI	R9,0E
	JG	CAEXOM			:IF >14 DIGITS--NO GOODNIK
	LR	R5,R9
	SIS	R5,1			:USE 1 LESS DIGIT FOR INTEGER DIVIDE
	LIS	R6,4			:4 DIGITS FOR EACH EXTRA PARAMETER
	DHR	R5,R6
	AIS	R6,4			:SHOULD HAVE THIS MANY PARS
	CLB	R6,XOMNPS
	JG	CSEXOM			:IF NOT ENOUGH ADR DIGITS
	JAL	R4,XMROTM		:UPDATE LENGTH
	LIS	R6,6			:INDEX INTO DIGIT PAIR ARRAY
XMCCL3	LB	R0,XOMPAR,R6		:DIGIT PAIR
	AIS	R1,1
	JAL	R4,XMROTM		:UPDATE DIGIT PAIR
	AIS	R6,1			:OFFSET OF NEXT DIGITS IN PAR ARRAY
	SIS	R9,2
	JG	XMCCL3			:IF MORE ADR DIGITS
XMCCL4	LIS	R0,1			:VALUE FOR CLD.FL :LECHIE 20-Jun-84
XMCCL5	LA	R1,CLD.FL,,		:BASE ADR OF TABLE TO CHANGE :LECHIE 20-Jun-84
	SRLS	RL,3			:GET LINK #	:LECHIE 20-Jun-84
	LR	R2,RL			:OFFSET TO BIT ARRAY CLD.FL :LECHIE 20-Jun-84
	LIS	R3,0			:BIT CHANGE TO XMROTM :LECHIE 20-Jun-84
	JAL	R4,XMROTM		:GO UPDATE CLD.FL :LECHIE 20-Jun-84
	J	XOMRSP			:EXIT


:	Call User Data String Modification
XMCCST	LIS	R0,2
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	SLLS	RL,4			:16 BYTES PER LINK
	LA	R1,CUD.LT,RL,		:ADR OF STRING AND FLAG
	LIS	R3,1
	LIS	R0,3			:
	CLB	R0,XOMNPS
	JL	XMCCS6			:IF STRING PRESENT
	JEFS	XMCCS2			:IF NO CUD, EXCEPT 4 DIGIT ID
	LHI	R0,CUD.UI			:INDICATE USER ENTERS CUD
	JAL	R4,XMROTM		:CHANGE CUD.LT	:GLEE 18-Jul-84
	LIS	R0,0			:RESET BIT	:GLEE 18-Jul-84
	LA	R1,CUD.FL,,		:IN CUD.FL	:GLEE 18-Jul-84
	LIS	R3,0			:A BIT ARRAY	:GLEE 18-Jul-84
	LR	R2,RL				:GLEE 18-Jul-84
	SRLS	R2,4			:DISPLACED BY LINK NUMBER :GLEE 18-Jul-84
	J	XMCCS4				:GLEE 18-Jul-84

XMCCS2	LHL	R0,XOMPAR+4
	JN	CSEXOM			:IF NO STRING, BUT NON-ZERO LENGTH
	LIS	R3,2			:FOR 4 DIGIT PROT ID ONLY, SAVE 0000
	JAL	R4,XMROTM		:CHANGE CUD.LT :GLEE 18-Jul-84
	LIS	R0,1			:SET BIT	:GLEE 18-Jul-84
	LA	R1,CUD.FL,,		:IN CUD.FL	:GLEE 18-Jul-84
	LIS	R3,0			:A BIT ARRAY	:GLEE 18-Jul-84
	LR	R2,RL				:GLEE 18-Jul-84
	SRLS	R2,4			:DISPLACED BY LINK NUMBER :GLEE 18-Jul-84
XMCCS4	JAL	R4,XMROTM
	J	XOMRSP

XMCCS6	LHL	R9,XOMPAR+4		:STRING LENGTH (IN DIGIT PAIRS)
	JE	OREXOM			:IF NO STRING AFTER ALL
	CLHI	R9,0C
	JG	CAEXOM			:IF MORE THAN 12 DIGIT PAIRS
	LR	R5,R9			:# DIGITS EXPECTED
	SIS	R5,1			:ADJUST FOR DIVISION
	LIS	R6,2			:2 DIGIT PAIRS PER PARAMETER
	DHR	R5,R6			:R6=# DIGIT PAIRS NEEDED
	AIS	R6,4			:TOTAL # OF PARAMETERS NEEDED
	CLB	R6,XOMNPS
	JL	CAEXOM			:IF TOO MANY ADR DIGITS
	JG	CSEXOM			:IF NOT ENOUGH ADR DIGITS
	LIS	R0,0			:CANNED VALUE FLAG
	JAL	R4,XMROTM
	AIS	R1,1			:NEXT ADR TO UPDATE
	LR	R0,R9
	JAL	R4,XMROTM
	LIS	R6,6
XMCCS8	LB	R0,XOMPAR,R6		:1ST CUD DIGIT OF PAIR
	AIS	R1,1			:NEXT ADDRESS TO UPDATE
	JAL	R4,XMROTM
	AIS	R6,1
	SIS	R9,1
	JG	XMCCS8
	LIS	R0,1			:SET BIT	:GLEE 18-Jul-84
	LA	R1,CUD.FL,,		:IN CUD.FL	:GLEE 18-Jul-84
	LIS	R3,0			:A BIT ARRAY	:GLEE 18-Jul-84
	LR	R2,RL				:GLEE 18-Jul-84
	SRLS	R2,4			:DISPLACED BY LINK NUMBER :GLEE 18-Jul-84
	J	XOMRSP


:	CUD Username Mod
XMCCNM	LIS	R0,4
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	SLLS	RL,4
	LA	R1,CUD.LT,RL,
	LIS	R3,1
	LHI	R2,CUD.UL		:LEFT EXTRACTION?
	LHL	R0,XOMPAR+4		:TYPE OF EXTRACTION
	JEFS	XMCCU2			:IF LEFT EXTRACT
	LHI	R2,CUD.UR		:RIGHT ESTRACT
XMCCU2	LHL	R0,XOMPAR+6		:LENGTH TO EXTRACT
	JE	OREXOM
	CLHI	R0,0C
	JG	OREXOM
	OR	R0,R2			:TYPE/LENGTH OF EXTRACTION
	JAL	R4,XMROTM
	J	XOMRSP


:	Modify High Host Number - 67
XMCHIH	LIS	R0,2		:MIN # OF PARAMETERS
	CLB	R0,XOMNPS
	JG	CSEXOM		:TOO FEW GIVEN
	LHL	R0,XOMPAR+2	:GET NEW HIGH HOST #
	LA	R1,HIHST	:ADDRESS TO MODIFY
	LIS	R3,3		:FULLWORD FLAG
	JAL	R4,XMROTM	:DO IT
	J	XOMRSP




:	Inparity Mod
XMCINP	HS
  IF	1-INPCOD
	J	PCEXOM
  ELSE
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS		:RETURNS RL=LINK #, R11=PARITY TYPE
	LB	R6,XOMNPS		:# PARAMETERS FOR COMMAND
	SIS	R6,3			: LESS CMD #, LINK #, PARITY BIT PAR
	LIS	R5,6			:INDEX INTO COMMAND PARAMETER ARRAY
	LIS	R3,0			:INDICATE BIT MODIFY
	LR	R11,R11
	JL	XMCIN4			:IF NO PARITY CHANGE
	LIS	R0,0			:PREPARE TO RESET PARITY TYPE
	LA	R1,SPCP.F		:ADR OF SPACE PARITY FLAG
	LR	R2,RL			:BIT OFFSET IN BYTE
	JAL	R4,XMROTM		:RESET SPACE PARITY
	LA	R1,MRKP.F
	JAL	R4,XMROTM		:RESET MARK PARITY
	LR	R0,R11			:"LINE NUMBER" IS REALLY PARITY TYPE
	JEFS	XMCIN4			:IF SAVE PARITY
	SIS	R0,1
	JEFS	XMCIN2			:IF MARK PARITY
	SIS	R0,1
	JN	OREXOM			:IF NOT SPACE PARITY
	LA	R1,SPCP.F
XMCIN2	LIS	R0,1			:TURN ON THIS TYPE OF PARITY
	JAL	R4,XMROTM		:SET MARK OR SPACE PARITY
XMCIN4	LR	R6,R6
	JE	XOMRSP			:IF ONLY PARITY TYPE CHANGED
	LA	R1,DAP.F
	JAL	R9,XMCSWI
	LA	R1,CUDP.F
	JAL	R9,XMCSWI
	LA	R1,ALL.F
	JAL	R9,XMCSWI
	J	XOMRSP
  EI


:	CHARGE Mod
XMCCRG	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS
	SIS	R6,2			:# OF CHARGE OPTIONS TO CHANGE
	LIS	R5,4			:INDEX INTO XOMPAR ARRAY
	LIS	R3,0			:INDICATE BIT CHANGES
	LA	R1,CPT.F
	JAL	R9,XMCSWI
	LA	R1,RCX.F
	JAL	R9,XMCSWI
	LA	R1,RCNA.F
	JAL	R9,XMCSWI
	LA	R1,CPNA.F
	JAL	R9,XMCSWI
	LA	R1,RCNS.F
	JAL	R9,XMCSWI
	LA	R1,RCC.F
	JAL	R9,XMCSWI
	J	XOMRSP			:IF IDIOT THINKS MORE OPTS EXIST


:	HDWOPT Modifications
:	(currently treats link and line nos. as equal)
XMCHDW	LIS	R0,4
	LHI	R1,XMLIDM
	JAL	R9,XSUCCS
  IF	FML
	CLHI	R11,NLINES
  ELSE
	LR	R11,R11
  EI
	JG	ILEXOM			:IF INVALID LINE NUMBER
	LB	R6,XOMNPS
	SIS	R6,3
	LIS	R5,6			:INDEX TO 1ST OPTION VAL IN *XOMPAR*
	LIS	R3,0			:INDICATE BIT CHANGE
	LA	R1,CLKC.F		:BASE CHANGE ON LINK #(FOR NOW)
	JAL	R9,XMCSWC
	J	XOMRSP			:SORRY BOZO -- NO MORE OPTIONS



:	FRMOPT Mod
:	(currently treats link and line nos. as equal)
XMCFRM	LIS	R0,4
	LHI	R1,XMLIDM		:LINK MUST BE IN MARKING STATE
	JAL	R9,XSUCCS
  IF	FML
	CLHI	R11,NLINES
  ELSE
	LR	R11,R11
  EI
	JG	ILEXOM			:IF ILLEGAL LINE #
	LB	R6,XOMNPS
	SIS	R6,3			:REMOVE CMD TYPE, LINK #, LINE #
	LIS	R5,6			:INDEX TO NEW OPTIONS IN *XOMPAR*
	LIS	R3,0			:INDICATE BIT CHANGES
	LHL	R0,XOMPAR,R5		:FM128 OPTION
  IF	FML
	JE	FFEXOM			:IF MOD 8--CAN'T HAVE FOR FML
  EI
  IF	LAP
	JN	BFEXOM			:IF MOD 128--CAN'T HAVE FOR LAP
  EI
	LA	R1,F128.F
	JAL	R9,XMCSWI
  IF	LAP
	LA	R1,DWD.F
	JAL	R9,XMCSWI
  EI
	J	XOMRSP			:IF MORON THINKS MORE LSOPTS EXIST


:	PKTOPT Modifications
XMCPKT	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS		:# PARS ACTUALLY INPUT
	SIS	R6,2			: LESS CMD #, LINK #
	LIS	R5,4			:INDEX TO 1ST OPTION IN *XOMPAR*
	LIS	R3,0			:INDICATE BIT CHANGES
	LA	R1,P128.F
	JAL	R9,XMCSWI
	LA	R1,AHC.F
	JAL	R9,XMCSWI
	LA	R1,ZCF.F
	JAL	R9,XMCSWI
	LA	R1,IPR.F
	JAL	R9,XMCSWI
	LA	R1,TKSP.F
	JAL	R9,XMCSWI
	LA	R1,BRCA.F
	JAL	R9,XMCSWI
	LA	R1,TKDS.F
	JAL	R9,XMCSWI
	J	XOMRSP



:	CLOSED USER GROUP FACILITY MODIFICATION
XMCCUS	HS
  IF	CUGCD						:LSH 16-JUN-87
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS		:# PARS ACTUALLY INPUT
	SIS	R6,2			: LESS CMD #, LINK #
	LIS	R5,4			:INDEX TO 1ST OPTION IN *XOMPAR*
	LIS	R3,0			:INDICATE BIT CHANGES
	LA	R1,CUS.F
	JAL	R9,XMCSWI
	LA	R1,CUI.F
	JAL	R9,XMCSWI
	LA	R1,CUO.F
	JAL	R9,XMCSWI
	LA	R1,CPR.F					:HJR 02-02-87
	JAL	R9,XMCSWI					:HJR 02-02-87
	J	XMCCUX						:HJR 02-02-87
  ELSE
	J	CDEXOM
  EI


:	PREFERENTIAL CLOSED USER GROUP MODIFICAITON
XMCCUP	HS
  IF	CUGCD&X.25					:LSH 16-JUN-87
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LH	R0,XOMPAR+4		:# CUG TO CHECK
	JL	XMCUP1			:SKIP CHECKS IF -1	:HJR 10-24-86
	CLHI	R0,CUG.MX
	JG	CUEXOM			:IF OUT OF RANGE	:HJR 10-24-86
:--------------------------------------------------------------	:HJR 10-24-86
	lhl	r4,cug.lt,rl,rl		:get cugtab offset
	je	cnexom			:jump if no cug table
	lr	r1,r0			:get cug index
	slls	r1,2			:make a word offset
	lhl	r1,cugtab,r1,r4		:check if index valid (ck ilock dnic)
	je	cmexom			:jump if no entry for index
:-----------------------------------------------------------------------
XMCUP1	LA	R1,CUP.LT,RL,RL					:HJR 02-02-87 :HJR 10-24-86
	LIS	R3,2
	JAL	R4,XMROTM
	JFS	XMCCUX						:HJR 02-02-87
  ELSE
	J	CDEXOM
  EI

  IF	CUGCD						:LSH 16-JUN-87
:-------------------------------------------------------------	:HJR 02-02-87
:   Must have at least one of Pref, +INCOMING, or +OUTGOING
XMCCUX
    IF	X.25			:ONLY APPLIES TO X25
	TBT	RL,CUS.F		:SUBSCRIBED?
	JEFS	XMCUX4			:OK IF NOT
	TBT	RL,CUI.F		:+INCOMING
	JNFS	XMCUX4			:OK IF YES
	TBT	RL,CUO.F		:+OUTGOING
	JNFS	XMCUX4			:OK IF YES
	LH	R1,CUP.LT,RL,RL		:PREF?
	JGEFS	XMCUX4			:OK IF YES
	RBT	RL,CUS.F		:BAD COMBO, CLEAR SUBSCRIPTION
	J	CGEXOM			:GO ISSUE WARNING
    EI
XMCUX4	J	XOMRSP			:ISSUE NORMAL RESPONSE
:-----------------------------------------------------------------------
  EI

:	REVERSE CHARGE FORCING MODIFY				:SCHEN 30-Oct-84
XMCCHT	HS
  IF	CHGNSW
	LB	R1,XOMNPS
	CHI	R1,4
	JN	G4EXOM			:IF INCORRECT COMMAND PARAMETER NUMBER
	LB	RL,XOMPAR+3		:GET LINK #
	CHI	RL,NLINKS
	JGE	BLEXOM			:IF BAD LINK NUMBER
	SLLS	RL,2			:FULLWORD INDEX
	LA	R1,CHT.LT,RL,		:GET ADDRESS TO BE MODIFIED
	L	R0,XOMPAR+4		:GET ENTRY
	LIS	R3,3
	JAL	R4,XMROTM		:MODIFY THIS ENTRY
	J	XOMRSP
  ELSE
	J	CDEXOM			:IF NO TYMFILE USE OR ALLOC SPECIFICATION
  EI	:CHGNSW							:SCHEN 30-Oct-84

:	CLOSED USER GROUP INTERLOCK CODE ASSIGNMENT MODIFICATION.
XMCCUI	HS
  IF	CUGCD&X.25						:LSH 16-JUN-87
	LIS	R0,4		:MIN. OF CMD/LNK/CUG INDEX/(DELETE/ADD)
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LHL	R4,CUG.LT,RL,RL	:GET OFFSET IN CUGTAB FOR THIS LINK
	JE	CNEXOM		:IF CUG TABLE DOES NOT EXIST FOR THIS LINK
	LIS	R3,2		:TYPE 'HW'
	LHL	R2,XOMPAR+4	:CUG INDEX
	CLHI	R2,CUG.MX
	JG	CUEXOM		:IF INDEX > MAX CUG INDEX
	LR	R8,R2		:SAVE INDEX
	SLLS	R2,2		:GET FULL WORD INDEX
	LH	R0,XOMPAR+6	:GET (DELETE/ADD/NOCHANGE) FLAG VALUE
	JL	XMCUM2		:IF NO CHANGE, JUST SWITCH
	JGFS	XMCUM0		:IF TO MODIFY INTERLOCK CODE
	LIS	R3,3		:WORD MODIFY
	LA	R1,CUGTAB,R2,R4
	JAL	R4,XMROTM	:ZERO OUT ENTRY
	J	XOMRSP

XMCUM0	LIS	R0,4
	CLB	R0,XOMNPS
	JE	CMEXOM		:IF ADD/MOD WITH NO PARAMETER
	LHL	R0,XOMPAR+8	:GET NEW INTERLOCK CODE, PART A
	LA	R1,CUGTAB,R2,R4
	LIS	R3,2
	JAL	R4,XMROTM
	LIS	R2,5
	CLB	R2,XOMNPS
	JE	CMEXOM		:IF INTERLOCK CODE A ONLY	:LSH JUN-15-87
	LHL	R0,XOMPAR+0A	:GET NEW INTERLOCK CODE B
	JE	OREXOM		:ZERO VALUE FOR INTERLOCK CODE B:LSH JUN-15-87
	LIS	R3,2
	AIS	R1,2		:2ND HALF OF INTERLOCK CODE
	JAL	R4,XMROTM
	LIS	R2,6
	CLB	R2,XOMNPS
	JE	XOMRSP		:IF NO ICB/OCB ARRAY MODS

:MAKE ICB/OCB BIT CHANGES (UNLESS NO CHANGE FLAG=FFFF FOUND)
XMCUM2	LIS	R3,0		:INDICATE BIT CHANGE
	LIS	R5,0C		:POSITION OF ICB PARAMETER
	LIS	R6,4		:INSURE CONTROL RETURNED TO HERE
	LR	R7,RL		:SAVE LINK NUMBER
	SLLS	RL,CUG.SC+3	:MAKE BIT OFFSET TO ICB ARRAYS	:HJR 02-02-87
	AR	RL,R8		:ADD IN SAVED CUG INDEX
	LA	R1,ICB.F,,
	JAL	R9,XMCSWI
	LIS	R2,7
	CLB	R2,XOMNPS
	JEFS	XMCUM4		:IF NO OCB ARRAY MOD, RESTURE (RL)
	LA	R1,OCB.F,,
	JAL	R9,XMCSWI
XMCUM4	LR	RL,R7		:RESTORE (RL)
	J	XOMRSP
  ELSE
	J	CDEXOM
  EI


:	FACOPT Modifications
XMCFAC	LA	R7,FAL.F	:FLAG OF 1ST OPTION
	LIS	R8,0		:NO SECOND OPTION
	JAL	R12,XMCFLG	:CHANGE VALUE OF ONE FLAG
	J	XOMRSP


:	PACKET WINDOW NEGOTIATION  Modifications
XMCPWN	LA	R7,PWN.F
	LIS	R8,0
	JAL	R12,XMCFLG
	J	XOMRSP


:	PACKET SIZE NEGOTIATION  Modifications
XMCPSN	LA	R7,PSN.F
	LIS	R8,0
	JAL	R12,XMCFLG
	J	XOMRSP


:	THROUGHPUT CLASS SWITCH OPTIONS  Modifications
XMCTPN	LIS	R0,3
	LIS	R1,0
	JAL	R9,XSUCCS
	LB	R6,XOMNPS		:# PARS ACTUALLY INPUT
	SIS	R6,2			: LESS CMD #, LINK #
	LIS	R5,4			:INDEX TO 1ST OPTION IN XOMPAR
	LIS	R3,0			:INDICATE BIT CHANGES
	LA	R1,TCN.F
	JAL	R9,XMCSWI
	LA	R1,TCX.F
	JAL	R9,XMCSWI
	LA	R1,TCP.F
	JAL	R9,XMCSWI
	J	XOMRSP


:	RPOA FACILITY MODIFICATION
XMCRPO	LA	R7,RPP.F
	LIS	R8,0
	JAL	R12,XMCFLG
	J	XOMRSP


:	CALL UTILITY MODIFICAITON
XMCCID	HS
  IF	X.75
	LA	R7,CIC.F
	LIS	R8,0
	JAL	R12,XMCFLG
	J	XOMRSP
  ELSE
	J	X7EXOM
  EI


:	FAST SELECT FACILITY MODIFICATION
XMCFST	HS
  IF	FSTSLT
	LA	R7,FSS.F
	LA	R8,FSA.F
	JAL	R12,XMCFLG
	J	XOMRSP
  ELSE
	J	CDEXOM
  EI


:	NON CCITT FACILITY HANDLING OPTION MODIFICATION
XMCNAT	LA	R7,NAC.F
	LA	R8,NAP.F
	JAL	R12,XMCFLG
	J	XOMRSP



:	UNKNOWN FACILITY HANDLING OPTION MODIFICAITON
XMCUNK	LA	R7,UNC.F
	LA	R8,UNP.F
	JAL	R12,XMCFLG
	J	XOMRSP


:	TRAFFIC CLASS UTILITY HANDLING OPTION MODIFICATION
XMCTRA	HS
  IF	X.75
	LA	R7,TRC.F
	LA	R8,TRP.F
	JAL	R12,XMCFLG
	J	XOMRSP
  ELSE
	J	X7EXOM
  EI


:	BILATERAL CLOSED USER GROUP HANDLING OPTION MODIFICAITON
XMCBCU	LA	R7,BCC.F
	LA	R8,BCP.F
	JAL	R12,XMCFLG
	J	XOMRSP


:	PAD  Options Mod
XMCPDO	LIS	R0,3			:MIN # PARS
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS		:# PARS ACTUALLY GIVEN
	SIS	R6,2			:# OF CHANGES TO MAKE
	LIS	R5,4			:INDEX INTO PARAMETER ARRAY (XOMPAR)
	LIS	R3,0			:INDICATE BIT CHANGES
	LA	R1,TREF2		:ADR OF 1ST OPTION
	JAL	R9,XMCSWC
	LA	R1,FITP.3
	JAL	R9,XMCSWC
	LA	R1,FITP.2
	JAL	R9,XMCSWC
	LA	R1,HITP.3
	JAL	R9,XMCSWI
	LA	R1,HITP.2
	JAL	R9,XMCSWI
	LA	R1,X3.R13
	JAL	R9,XMCSWC
	LA	R1,X3.R14
	JAL	R9,XMCSWC
  IF	PDO.|XONOF|			:IF XON/XOFF CODE ENABLED
	LA	R1,XON.F		:...CAN DO A MODIFY
	JAL	R9,XMCSWI
  ELSE
	SIS	R6,1
	JL	XOMRSP			:IF NOT TRYING TO MODIFY FLOW CT  :AHM 28-FEB-87
	LH	R0,XOMPAR,R5		:  ELSE MUST BE NO CHANGE SINCE NO CODE
	JG	CDEXOM			:IF TRIED TO CHANGE...BUT NO CODE :AHM 28-FEB-87
	AIS	R5,2			:  ELSE SET INDEX FOR NEXT OPTION
  EI
	LA	R1,ETM.F
	JAL	R9,XMCSWI
	LA	R1,EOT.F		:U2741 OPTION
	JAL	R9,XMCSWI
	J	XOMRSP			:SAFETY WIRE IF TOO MANY OPTS


:	TELENET Options Mod
XMCTEL	HS
  IF	1-TADRS
	J	CDEXOM			:IF TELENET CODE DISABLED
  ELSE
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS
	SIS	R6,2
	LIS	R5,4
	LIS	R3,0
	LA	R1,TNOP.F
	JAL	R9,XMCSWI
	LA	R1,TADR.F
	JAL	R9,XMCSWI
	LA	R1,TPID.F
	JAL	R9,XMCSWI
	LA	R1,TFAC.F
	JAL	R9,XMCSWI
	LA	R1,TCAP.F
	JAL	R9,XMCSWI
	J	XOMRSP			:JUST IN CASE...
  EI

:	DATAPAC Options Mod
XMCDPC	HS
  IF	1-DTARS
	J	CDEXOM			:IF DATAPAC CODE DISABLED
  ELSE
	LIS	R0,3
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LB	R6,XOMNPS
	SIS	R6,2
	LIS	R5,4
	LIS	R3,0
	LA	R1,DNOP.F
	JAL	R9,XMCSWI
	LA	R1,DTAR.F
	JAL	R9,XMCSWI
	J	XOMRSP
  EI




:	IDLELINE Mod
:	(currently treats link and line nos. as equal)
XMCIDL	HS
  IF	BSC!FML
	J	IDEXOM		:IDLELINE INVALID FOR BSC OR FML
  ELSE
	LIS	R0,5
	LIS	R1,0			:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS
	LR	R11,R11			:ONLY SUPPORT LINE 0(FOR NOW)
	JG	ILEXOM			:IF ILLEGAL LINE #
	LHL	R0,XOMPAR+6		:NEW IDLE PERIOD (IN SECONDS)
	JE	OREXOM			:IF CONTINUOUS TIMOUTS--NO WAY
	CLHI	R0,0FF
	JG	OREXOM			:IF BEYOND NORMAL RANGE
	LHL	R5,XOMPAR+8		:NEW THRESHOLD (OUT OF 40 SAMPLES PER SEC)
	JE	OREXOM			:IF THIS USER'S A JOKER
	CLHI	R5,28
	JG	OREXOM			:IF HONEST MISTAKE--OUT OF RANGE
	LIS	R3,2			:INDICATE HALFWORD CHANGE
	LA	R1,LIDLTM,RL,RL		:IDLE PERIOD FIRST
	LCS	R2,1
	XR	R0,R2			:TIMER IS USED AS A NEGATIVE #
	AIS	R0,1
	JAL	R4,XMROTM
	LA	R1,LIDLTH,RL,RL		:NOW THRESHOLD
	LR	R0,R5
	JAL	R4,XMROTM
	J	XOMRSP
  EI


:	Query TORPOA statements - cmd 89
XOMTRP	LIS	R0,2		:MIN # OF PARAMETERS
	JAL	R9,XOMSU4
XOMTR1	LHL	R8,RPO.PT,RL,RL	:PTR TO RPOA TABLE FOR THIS HOST
XOMTR2	CH	R8,RPO.PT+2,RL,RL  :TO NEXT HOST YET ??
	JE	XOMTR4		:IF END OF THIS HOSTS ENTRIES
	LHI	R2,$A 20
	LR	R5,RL		:SAVE RELATIVE HOST #
	LHL	RL,HOSTS,RL,RL	:GET TRUE HOST #
	JAL	R9,XOMSTM	:START MSG WITH HOST #
	LR	RL,R5		:RESTORE RELATIVE HOST #
	LHL	R0,RPO.HT,R8,	:DNIC OF RPOA
	JAL	R7,PUTHAS
	LHL	R0,RPO.HT+2,R8,	:16 LINK FLAGS
	JAL	R7,PUTHAS
	LHL	R0,RPO.HT+4,R8,	:16 MORE LINK FLAGS
	JAL	R7,PUTHAS
	SIS	RL,1
	AIS	R11,1		:FOOL *XOMENM*
	JAL	R9,XOMENM	:END THIS MESSAGE LINE
	AIS	R8,6		:NEXT ENTRY FOR SAME HOST
	J	XOMTR2
XOMTR4	AIS	RL,1		:TO NEXT HOST
	SIS	R11,1
	JLE	XOMRSP		:DONE
	J	XOMTR1

:	Query link biases - LINKBIAS statements - cmd 8B
XOMLBI	LIS	R0,2		:MIN # OF PARAMETERS
	JAL	R9,XOMSU3
XOMLB2	LIS	R2,$A 10	:LENGTH OF DATA MESSAGE
	JAL	R9,XOMSTM	:START MESSAGE WITH LINK #
	LB	R0,LNK.WT,RL,	:GET BIAS AMOUNT
	JAL	R7,PUTHAN	:PUT IT OUT
	JAL	R9,XOMENM	:END MESSAGE
	JBS	XOMLB2		:IF ANYMORE LINKS


: Query ADRPOS statements - CMD 8D
XOMADP	LIS	R0,2		:MIN # OF PARAMETERS
	JAL	R9,XOMSU4	:SETUP FOR HOST QUERRY
XOMAD2	LIS	R2,9
	LR	R5,RL		:PROTECT HOST ORDINAL
	LHL	R0,HOSTS,RL,RL	:GET HOST #
	JEFS	XOMAD3		:IF NO HOST THERE
	LHL	R0,PORTS,RL,RL	:TEST HOST STATUS FLAGS
	SRLS	R0,$A14		:MASK OFF OTHER STUFF
	CLHI	R0,3		:TEST FOR HOST GONE
	JNFS	XOMAD4		:IF NOT
XOMAD3	JAL	R9,XOMEN2	:END NON-MESSAGE, UPDATE POINTERS
	J	XOMAD2		:GO FOR NEXT HOST

XOMAD4	LHL	RL,HOSTS,RL,RL	:HOST #
	JAL	R9,XOMSTM	:START MESSAGE
	LR	RL,R5		:RESTORE RELATIVE HOST #
	LHL	R0,ADRPO,R5,R5
	JAL	R7,PUTHAN	:PUT IT OUT
	JAL	R9,XOMENM	:END MESSAGE
	J	XOMAD2

:	Modify LINKBIAS - CMD 8C
XMCLBI	LIS	R0,3		:MINIMUM # OF PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS	:SETUP FOR LINK CONFIGURATION CHANGES
	CLHI	R11,0FF		:"LINE NUMBER" IS REALLY LINK BIAS
	JG	OREXOM		:OUT OF RANGE ERROR
	LIS	R3,1		:INDICATE BYTE MODIFICATION
	LR	R0,R11		:NEW BIAS
	LA	R1,LNK.WT,RL,	:ARRAY ADDRESS
	JAL	R4,XMROTM	:DO UPDATE AND EXIT
	J	XOMRSP


:	Modify ROTATELINKS option - CMD 90
XMCHRL	LIS	R0,3		:MIN OF 3 PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCH	:SETUP FOR HOST CHANGES
	LHL	R0,XOMPAR+4	:ON/OFF VALUE
	LA	R1,LNK.RO	:ADDRESS OF FLAGS
	LR	R2,RL		:BIT OFFSET IS HOST INDEX
	LIS	R3,0		:BIT MODIFICATION TYPE
	JAL	R4,XMROTM	:MAKE THE CHANGE
	J	XOMRSP


:	ADRPOS modifications - CMD 8E
XMCADP	LIS	R0,3		:MIN # OF PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCH	:SETUP FOR HOST CONFIGURATION CHANGES
	LHL	R0,XOMPAR+4	:NEW SIGNED VALUE
	LA	R1,ADRPO,RL,RL	:HALFWORD ARRAY ADDRESS
	LIS	R3,2		:HALF WORD MODIFICATION
	JAL	R4,XMROTM	:MAKE THE CHANGE
	J	XOMRSP


:	Modify TORPOA	<cmd 8A> <host> <rpoa> <links> <links>
XMCTRP	LIS	R0,3		:MIN # OF PARAMETERS
	LIS	R1,0		:CHANGES OK IN ANY STATE
	JAL	R9,XSUCCH	:SETUP FOR HOST CHANGES
	LB	R0,XOMNPS	:NUMBER OF PARAMETERS GIVEN
	CLHI	R0,3		:IF NO LINKS SPECIFIED, THEN
	JE	XTRP16		:DELETE AN ENTRY
	LHL	R0,XOMPAR+6	:SEE IF ANY LINKS SPECIFIED
	JNFS	XTRP08		:IF SO
	LHL	R0,XOMPAR+8
	JE	XTRP16		:IF NOT, TO REMOVE AN RPOA ENTRY
:	HERE TO ADD OR MODFY AN EXISTING ENTRY. LOOK FOR IT IN TABLE
XTRP08	JAL	R2,XTRP98	:LOOK FOR IT
	JFS	XTRP10		:HERE IF NOT CURRENTLY IN TABLE
	LHL	R0,XOMPAR+6	:HERE IF FOUND IT.  PLUG IN NEW LINK VALUES
	STH	R0,RPO.HT+2,R1,
	LHL	R0,XOMPAR+8
	STH	R0,RPO.HT+4,R1,
	J	XOMRSP

:	HERE TO ADD IT.  TEST FOR TABLE FULL. SHIFT TO MAKE ROOM,
:	INSERT ENTRY
XTRP10	LH	R4,RPO.NO	:CURRENT # OF ENTRIES
	CLHI	R4,RPO.MX	:MAX # POSSIBLE
	JE	TOEXOM		:TABLE OVERFLOW. UNABLE TO ADD ENTRY
	AIS	R4,1
	STH	R4,RPO.NO	:SAVE UPDATED COUNT
	LI	R3,RPO.HE-6	:FIRST BYTE OF LAST POSSIBLE ENTRY
	SI	R3,RPO.HT,R1	:BYTE COUNT TO SHIFT
	LI	R2,RPO.HE-7	:LAST BYTE OF SECOND TO LAST POSSIBLE ENTRY
XTRP12	LB	R0,,R2
	STB	R0,6,R2
	SIS	R2,1
	SIS	R3,1
	JGBS	XTRP12
	LHL	R0,XOMPAR+4	:NEW RPOA VALUE
	STH	R0,1,R2		:SAVE IN RPO.HT
	LHL	R0,XOMPAR+6	:FIRST 16 LINK FLAGS
	STH	R0,3,R2		:SAVE IN RPO.HT
	LHL	R0,XOMPAR+8	:LAST 16 LINK FLAGS
	STH	R0,5,R2		:SAVE IN RPO.HT
	LIS	R4,6		:AMOUNT TO ADJUST POINTERS
	J	XTRP20

:	HERE TO DELETE AN OLD ENTRY
XTRP14	J	XTRP22		:IGNORE IF ENTRY DOESN'T EXIST
XTRP16	JAL	R2,XTRP98
	JBS	XTRP14		:HERE IF DIDN'T FIND RPOA ENTRY
	LI	R3,RPO.HE
	SI	R3,RPO.HT+6,R1	:BYTE COUNT TO SHIFT DOWN
	LI	R2,RPO.HT,R1	:ADDR OF ENTRY TO DELETE
XTRP18	LB	R0,6,R2
	STB	R0,,R2
	AIS	R2,1
	SIS	R3,1
	JGBS	XTRP18
	LCS	R4,6		:AMOUNT TO ADJUST POINTERS

:	ADJUST RPO.PT POINTERS TO ACCOUNT FOR SHIFT
XTRP20	AIS	RL,1		:NEXT HOST ORDINAL #
	CLHI	RL,MAXHST	:TO END (REMEMBER EXTRA PTR) ?
	JGFS	XTRP22		:IF SO
	LHL	R0,RPO.PT,RL,RL	:GET PTR TO RPO.HT TABLE
	AR	R0,R4		:ADJUST BY 1 ENTRY LENGTH
	STH	R0,RPO.PT,RL,RL	:RESTORE IT
	JBS	XTRP20
XTRP22	J	XOMRSP		:DONE

:	UTILITY ROUTINE TO FIND AN RPOA ENTRY
XTRP98	LHL	R0,XOMPAR+4	:RPOA VALUE ENTERED
	LHL	R1,RPO.PT,RL,RL
XTRP99	CH	R1,RPO.PT+2,RL,RL
	JER	R2		:IF RPOA ENTY NOT IN TABLE FOR THIS HOST
	CLH	R0,RPO.HT,R1,	:COMPARE RPOA VALUES FOR MATCH
	JE	2,R2		:IF SO
	AIS	R1,6		:STEP TO NEXT ENTRY
	JBS	XTRP99



:	ADRLINKS
: add  =  <88> <host> 1 <index> <lowadr> <highadr> <links0-15> <links16-31>
: remove  =  <88> <host> 0 <index>
: change  = <88> <host> 0 <index> <lowadr> <highadr> <links0-15> <links16-31>
:
XMCADL	LIS	R0,4		:MINIMUM # OF PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCH	:SETUP FOR HOST CHANGES
	LHL	R2,ADR.PT+2,RL,RL :PTR TO ENTRIES FOR NEXT HOST
	SH	R2,ADR.PT,RL,RL :PTR TO ENTRIES FOR THIS HOST
	SRHLS	R2,3		:# OF ENTRIES FOR THIS HOST
	LH	R1,XOMPAR+6	:INDEX OF ENTRY TO CHANGE
	CLI	R1,0FFFFFFFF	:-1 IF LAST ENTRY
	JNFS	XADL02		:IF ENTRY # SPECIFIED
	LR	R1,R2		:USE # OF ENTRIES THIS HOST HAS
XADL02	CR	R1,R2		:DOES SPECIFIED ENTRY EXIST ??
	JG	NEEXOM		:IF NO SUCH ENTRY
	SIS	R1,1		:ADJUST DOWN ONE
	LHL	R2,ADR.PT,RL,RL	:START OF THIS HOST'S ENTRIES
	SRHLS	R2,3		:ITS INDEX IN WHOLE TABLE
	AR	R1,R2		:ALLOW FOR PRECEEDING HOSTS
	LHL	R2,XOMPAR+4	:0 OR 1 FLAG
	JN	XADL30		:IF ADDING
	LHL	R3,XOMPAR+6	:GET INDEX OF ENTRY		:JL 24-Apr-86
	JE	NEEXOM		:INVALID INDEX
	LB	R0,XOMNPS	:GET # OF PARAMETERS ENTERED
	CLHI	R0,4
	JL	NEEXOM		:TOO FEW, NO SUCH ENTRY
	JG	XADL20		:TO MODIFY EXISTING ENTRY

:	HERE TO DELETE AN ENTRY.  SHIFT REST OF TABLE DOWN OVER IT AND
:	DECREMENT COUNT OF ENTRIES.

XADL04	LHL	R0,ADR.NO	:CURRENT # OF ENTRIES
	JE	NEEXOM		:IF NONE TO DELETE
	SIS	R0,1		:DECREMENT # OF ENTRIES COUNTER
	STH	R0,ADR.NO	:AND SAVE COUNTER
	SLLS	R1,3		:MAKE INTO BYTE OFFSET
	LI	R2,ADR.HT,R1	:ADDR OF ENTRY TO DELETE
	LI	R3,ADR.HE	:END OF TABLE
	SI	R3,ADR.HT+8,R1	:BYTE COUNT TO SHIFT
XADL10	LB	R0,8,R2		:GET BYTE FROM NEXT ENTRY
	STB	R0,,R2		:STORE ON CURRENT ENTRY
	AIS	R2,1		:STEP POINTER
	SIS	R3,1		:DECREMENT LOOP COUNTER
	JGBS	XADL10
	LCS	R4,8		:AMOUNT TO ADJUST POINTERS
	J	XADL40		:UPDATE POINTER TABLE

:	HERE TO MODIFY AN EXISTING ENTRY.

XADL20	LHL	R2,ADR.NO	:ARE THERE ANY TO MODIFY ??
	CLHI	R0,8		:CHECK # OF INPUT PARAMETERS
	JL	CSEXOM		:COMMAND TOO SHORT ERROR
	JG	TPEXOM		:TOO MANY PARAMETERS
	SLLS	R1,3
	JAL	R3,XADL50	:TEST FOR VALID LINKS
	ST	R0,ADR.HT+4,R1,	:OK, RETURNS R0=32 LINK FLAGS
	LHL	R0,XOMPAR+8	:LOW ADDR
	STH	R0,ADR.HT,R1,
	LHL	R0,XOMPAR+0A	:HIGH ADDR
	STH	R0,ADR.HT+2,R1,
	J	XOMRSP

:	HERE TO ADD AN ENTRY.  SHIFT TABLE TO OPEN ROOM FOR AN ENTRY.

XADL30	LB	R0,XOMNPS	:GET # OF PARAMETERS ENTERED
	CLHI	R0,8		:CHECK # OF INPUT PARAMETERS
	JL	CSEXOM		:COMMAND TOO SHORT ERROR
	JG	TPEXOM		:TOO MANY PARAMETERS
	SLLS	R1,3		:MAKE BYTE OFFSET
	AIS	R1,8		:ADD AFTER ADJUSTMENT
	JAL	R3,XADL50	:TEST FOR VALID LINKS
	LH	R0,ADR.NO	:CURRENT # OF ENTRIES
	CLHI	R0,ADR.MX	:MAX # OF ENTRIES POSSIBLE
	JGE	TOEXOM		:TABLE ALREADY FULL ERROR
	AIS	R0,1		:INCREMENT COUNT
	STH	R0,ADR.NO	:SAVE UPDATED ENTRY COUNT
	LI	R3,ADR.HE-8,	:FIRST BYTE OF LAST POSSIBLE ENTRY
	SI	R3,ADR.HT,R1	:BYTE COUNT TO SHIFT
	LI	R2,ADR.HE-9	:LAST BYTE OF SECOND TO LAST POSSIBLE ENTRY
XADL32	LB	R0,,R2
	STB	R0,8,R2
	SIS	R2,1
	SIS	R3,1
	JGBS	XADL32
	LHL	R0,XOMPAR+8	:RANGE START
	STH	R0,ADR.HT,R1,
	LHL	R0,XOMPAR+0A	:RANGE END
	STH	R0,ADR.HT+2,R1,
	LHL	R0,XOMPAR+0C	:16 LINK FLAGS
	STH	R0,ADR.HT+4,R1,
	LHL	R0,XOMPAR+0E	:16 LINK FLAGS
	STH	R0,ADR.HT+6,R1,
	LIS	R4,8		:AMOUNT TO SHIFT ADRPO TABLE PTRS

:	ADJUST ADR.PT POINTER TABLE TO ALLOW FOR ADDED/DELETED ENTRY
XADL40	AIS	RL,1		:NEXT HOST ORDINAL
	CLHI	RL,MAXHST	:MAX # OF HOSTS
	JGFS	XADL42		:DONE HERE
	LHL	R0,ADR.PT,RL,RL	:POINTER OFFSET TO ADR.HT TABLE
	AR	R0,R4		:ADJUST +/- ONE ENTRY
	STH	R0,ADR.PT,RL,RL	:SAVE UPDATED OFFSET POINTER
	JBS	XADL40		:DO ALL FOLLOWING HOSTS
XADL42	J	XOMRSP		:DONE

XADL50	LHL	R0,XOMPAR+0C	:GET FIRST WORD OF FLAGS
	EXHR	R0,R0		:POSITION TO BUILD FULL WORD OF FLAGS
	OH	R0,XOMPAR+0E	:COMBINE ALL FLAGS
	LR	R2,RL
	SLLS	R2,2
	L	R2,LHST.F,R2,	:FLAGS OF LINKS AVAILABLE TO HOST
	NR	R2,R0		:(R2)=LINKS IN COMMON
	CR	R2,R0		:WERE THEY ALL OK ??
	JN	BLEXOM		:BAD LINK # IF NOT
	JR	R3		:OK RETURN


:  ADRLINKS query  =  <87> <host>
XOMADL	LIS	R0,2		:MIN # OF PARAMETERS
	JAL	R9,XOMSU4
	LIS	R0,0
	STH	R0,TEMP4
XOMAL4	LHL	R8,ADR.PT,RL,RL	:PTR TO ADR.HT TABLE FOR THIS HOST
XOMAL6	CH	R8,ADR.PT+2,RL,RL	:TO FIRST ENTRY FOR NEXT HOST ?
	JE	XOMAL8		:IF END OF HOST'S ENTRIES
	LHI	R2,$A 20
	LR	R5,RL		:SAVE RELATIVE HOST #
	LHL	RL,HOSTS,RL,RL	:GET TRUE HOST #
	JAL	R9,XOMSTM	:START MSG WITH HOST#
	LH	R0,TEMP4	:GET LAST INDEX #
	AIS	R0,1		:BUMP BY ONE
	STH	R0,TEMP4	:SAVE
	JAL	R7,PUTHAS	:AND PRINT IN CURRENT OUTPUT LINE
	LR	RL,R5		:RESTORE RELATIVE HOST #
	LHL	R0,ADR.HT,R8,	:START OF RANGE
	JAL	R7,PUTHAS
	LHL	R0,ADR.HT+2,R8,	:END OF RANGE
	JAL	R7,PUTHAS
	LHL	R0,ADR.HT+4,R8,	:FIRST 16 LINK FLAGS
	JAL	R7,PUTHAS
	LHL	R0,ADR.HT+6,R8,	:LAST 16 LINK FLAGS
	JAL	R7,PUTHAS
	SIS	RL,1
	AIS	R11,1		:TO FOOL *XOMENM*
	JAL	R9,XOMENM	:END MSG, RETURN HERE
	AIS	R8,8		:TO NEXT ADR.HT ENTRY
	J	XOMAL6
XOMAL8	LIS	R0,0
	STH	R0,TEMP4	:RESET RELATIVE INDEX # EACH HOST
	AIS	RL,1
	SIS	R11,1
	JLE	XOMRSP		:PROMPT RESPONSE
	J	XOMAL4		:DO NEXT HOST



:	ROTATELINKS Query - CMD 8F
XOMHRL	LIS	R0,2		:MINIMUM # OF REQUIRED PARAMETERS
	JAL	R9,XOMSU4	:SETUP FOR QUERIES WHEN HOST#=2ND PAR
XOMHR1	LIS	R2,9		:MAX # DATA BYTES IN MESSAGE
	LR	R5,RL		:SAVE RELATIVE HOST #
	LHL	R0,HOSTS,RL,RL	:GET HOST NUMBER
	JEFS	XOMHR4		:IF NO HOST THERE
	LHL	R0,PORTS,RL,RL	:GET HOST STATUS FLAGS
	SRLS	R0,$A14		:MASK OFF OTHER STUFF
	CLHI	R0,3		:TEST FOR HOST GONE
	JNFS	XOMHR3		:IF NOT
XOMHR4	JAL	R9,XOMEN2	:END NON-MESSAGE, UPDATE COUNTERS
	J	XOMHR1		:GO TO NEXT HOST

XOMHR3	LHL	RL,HOSTS,RL,RL	:HOST #
	JAL	R9,XOMSTM	:START MESSAGE
	LR	RL,R5		:RESTORE RELATIVE HOST #
	LIS	R0,0		:ASSUME 0
	TBT	RL,LNK.RO	:TEST IF USING LINK ROTATION
	JEFS	XOMHR2		:IF NOT
	LIS	R0,1		:REPORT A VALUE OF 1
XOMHR2	JAL	R7,PUTHAN	:DISPLAY HOST LINK ROTATION SETTING
	JAL	R9,XOMENM	:END MESSAGE
	J	XOMHR1		:IF ANOTHER HOST TO QUERY



:	Network Username Prefix Query - 0B5
XOMNUP	LIS	R0,2		:MIN # OF PARAMETERS
	JAL	R9,XOMSU3	:SETUP FOR LINK QUERY
XNUP1	LIS	R2,0A		:LENGTH OF DATA MESSAGE
	JAL	R9,XOMSTM	:START MSG WITH LINK #
	LA	R1,,RL,RL
	LHL	R0,LIP.LT,R1,R1	:LOG IN PREFIX TABLE
	JAL	R7,PUTHAS	:PUT FIRST 2 CHARACTERS
	LA	R1,,RL,RL
	LHL	R0,LIP.LT+2,R1,R1
	JAL	R7,PUTHAS	:PUT SECOND 2 CHARACTERS
	JAL	R9,XOMENM	:END MESSAGE
	J	XNUP1		:IF ALL LINKS


:	Network Username Prefix Modify - 0B6
XMCNUP	LIS	R0,4		:MIN # OF PARAMETERS
	JAL	R9,XOMSU3	:SETUP FOR LINK MODIFY
	L	R0,XOMPAR+4				:AHM 28-FEB-87
	LR	R1,RL
	SLLS	R1,2
	AI	R1,LIP.LT	:ADDRESS TO MODIFY
	LIS	R3,3		:FULL WORD MODIFY
	JAL	R4,XMROTM	:DO IT
	J	XOMRSP


: Query MAXTORPOA - B7
XOMMTR	LHI	RL,RPO.MX	:MAX # ALLOWED ACCORDING TO GARP
	J	XMSDHR		:GO PRINT IT


:  Query MAXADRLINKS - B8
XOMMAL	LHI	RL,ADR.MX	:MAX # ALLOWED
	J	XMSDHR		:GO PRINT IT





:	GATEWAY Modify Command
:		<CMD> <LINK> <DNIC> [<LENGTH> <2 CHAR> ...]
XMCGAT	LIS	R0,3		:MINIMUM NUMBER OF PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS	:SETUP FOR LINK CHANGES
	LIS	R9,0		:GATEWAY FLAG FOR COMMON LOGIC
	JFS	XMCGA0		:GO TO COMMON LOGIC

:	RPOAGATEWAY Modify Command
:		<CMD> <LINK> <DNIC> <RPOA> [<LENGTH> <2 CHAR> ...]
XMCRPG	LIS	R0,4		:MINIMUM NUMBER OF PARAMETERS
	LIS	R1,0		:CHANGE POSSIBLE IN ANY STATE
	JAL	R9,XSUCCS	:SETUP FOR LINK CHANGES
	LIS	R9,2		:RPOA FLAG FOR COMMON LOGIC

:	LOOK FOR THE SPECIFIED DNIC (AND RPOA) ENTRY
XMCGA0	LA	R1,GWDNIC,,					:FAK 14-Feb-85
	LIS	R2,0						:FAK 14-Feb-85
	JAL	R4,XMRO		:MAKE SEGMENT R/W (UNPROTECT)	:FAK 14-Feb-85
	LA	R1,,RL,RL	:TWICE LINK #
	L	R5,GWDNIC,R1,R1	:PTR TO LDNICS TABLE
	LHL	R2,XOMPAR+4	:REQUESTED DNIC
XMCGA1	LHL	R7,,R5		:GET TYPE FLAGS AND OFFSET TO LIS
	JNFS	XMCGA2		:IF NOT TO THE END YET
	LR	R9,R9		:DNIC NOT THERE
	JE	XMCG15		:OK IF GATEWAY MODIFY
	J	NEEXOM		:ERROR IF RPOA MODIFY
	LA	R3,NEEXOM	:ERROR IF RPOA MODIFY		:FAK 14-Feb-85
	J	XMCGRT		:SET SEGMENT PROTECT (R/O)	:FAK 14-Feb-85
XMCGA2	THI	R7,0C000	:TEST FLAGS
	JNFS	XMCGA3		:THIS IS AN RPOA, GO ON
	LHL	R3,2,R5		:GET DNIC FROM TABLE
	CLR	R2,R3		:COMPARE IT
	JEFS	XMCGA4		:FOUND THE DNIC
XMCGA3	AIS	R5,4		:ADVANCE LDNICS POINTER
	J	XMCGA1
XMCGA4	LR	R9,R9		:IS THIS A GATEWAY OR RPOA COMMAND
	JE	XMCGA6		:IF GATEWAY, GO AHEAD
	LHL	R2,XOMPAR+6	:REQUESTED RPOA
XMCGA5	AIS	R5,4		:ADVANCE LDNICS POINTER
	LHL	R7,,R5		:GET TYPE FLAGS AND OFFSET TO LIS
	THI	R7,0C000	:TEST FLAGS
	JE	XMCG15		:IF NOT THERE
	LHL	R3,2,R5		:GET RPOA FROM TABLE
	CLR	R2,R3		:COMPARE IT
	JNBS	XMCGA5		:IF NOT A MATCH

:	FOUND THE ENTRY. IF A NEW STRING WAS GIVEN, MAKE SURE THERE IS ROOM
:	FOR IT BEFORE DELETING THE OLD ONE.

XMCGA6	NHI	R7,3FFF		:MASK TO OFFSET TO STRING IN GA.LIS
	JAL	R1,XMCG21	:TEST IF DELETING OR ADDING/MODIFYING
	J	XMCGA7		:IF JUST DELETING AN ENTRY
	LB	R0,GA.LIS,R7,	:GET ITS LENGTH
	LHL	R1,XOMPAR+6,R9					:SCHEN 22-Apr-85
	CLHI	R1,20		:IS LENGTH OF STRING OVER MAX LENGTH :SCHEN 22-Apr-85
	JG	TOEXOM		:TABEL OVERFLOW ERROR		:SCHEN 22-Apr-85
	SR	R1,R0		:SUBTRACT OUT STRING TO DELETE	:SCHEN 22-Apr-85
	A	R1,GAFREE	:ADD IN LENGTH OF STRING TO ADD :SCHEN 22-Apr-85
	LA	R3,TOEXOM		:TABLE OVERFLOW ERROR		:FAK 14-Feb-85
	CI	R1,GA.END	:SEE IF OVER THE END
	JGE	XMCGRT		:SET SEGMENT PROTECT ON (R/O)	:FAK 14-Feb-85
	L	R0,LDFREE	:ALSO CHECK LDNIC TABLE FOR ROOM
	CI	R0,LD.END	:COMPARE TO END OF TABLE ADDRESS
	JGE	XMCGRT		:SET SEGMENT PROTECT ON (R/O)	:FAK 14-Feb-85

:	GATEWAY MODIFY:  IF A NEW LOGIN STRING WAS GIVEN, DELETE THE
:	OLD GATEWAY ENTRY.  IF NO NEW LOGIN STRING WAS GIVEN, DELETE
:	THE OLD ONE AND ANY ASSOCIATED RPOA ENTRIES FOLLOWING IT.
:	RPOAGATEWAY MODIFY: SIMPLY DELETE THE OLD ENTRY.

XMCGA7	LB	R8,GA.LIS,R7,	:BYTE COUNT OF LIS TO DELETE
	AIS	R8,1		:INCLUDE BYTE COUNT OF STRING
	LHI	R6,4,R5		:PTR TO NEXT LDNIC TABLE ENTRY
	LCS	R0,4		:MINIMUM CHANGE TO LDNIC ENTRIES

:	DECREMENT GWDNIC ENTRIES FOR FOLLOWING LINKS

XMCGA9	LHI	R1,1,RL		:START WITH NEXT LINK
XMCG10	CLHI	R1,NLINKS-1	:DONE ALL YET ??
	JGFS	XMCG11		:IF SO
	LA	R2,,R1,R1	:GET TWICE LINK #
	AM	R0,GWDNIC,R2,R2	:DECREMENT ITS FIRST LDNICS ADDRESS
	AIS	R1,1		:STEP TO NEXT LINK
	JBS	XMCG10		:AND CONTINUE

:	SHIFT PART OF LDNICS TABLE TO DELETE ONE ENTRY

XMCG11	AM	R0,LDFREE	:UPDATE NEXT LDNIC FREE ADDRESS
	LR	R3,R5		:COPY PTR TO FIRST ENTRY BEING DELETED
	LR	R4,R6		:COPY PTR TO NEXT ONE NOT BEING DELETED
XMCG12	LH	R0,,R4		:GET FLAGS AND OFFSET OF NEXT GOOD LDNIC ENTRY
	STH	R0,,R3		:STORE FLAGS AND OFFSET
	LH	R0,2,R4		:GET DNIC OF NEXT GOOD LDNIC ENTRY
	STH	R0,2,R3		:STORE DNIC
	AIS	R3,4		:ADVANCE STORE PTR
	AIS	R4,4		:ADVANCE FROM PTR
	CLI	R4,LD.END	:TO END OF TABLE YET ?
	JLBS	XMCG12		:AND CONTINUE LOOPING

:	ADJUST ALL LDNICS ENTRIES WHICH REFERENCE STRINGS BEYOND ONE
:	ABOUT TO BE DELETED.

	LI	R2,LDNICS	:START OF TABLE
XMCG13	LHL	R0,,R2		:GET ITS FLAGS AND OFFSET TO STRING
	JEFS	XMCG24		:IF FIRST HALF OF SEPARATOR
	NHI	R0,3FFF		:MASK TO OFFSET
	CLR	R0,R7		:POINTS PAST SHIFTED STRING ??
	JLFS	XMCG24		:IF NOT
	LHL	R0,,R2		:RELOAD FLAGS AND OFFSET
	SR	R0,R8		:ADJUST BY LENGTH OF DELETED STRINGS
	STH	R0,,R2		:PUT BACK
XMCG24	AIS	R2,4		:STEP TO NEXT LDNICS ENTRY
	CL	R2,LDFREE	:TO END OF TABLE YET ??
	JL	XMCG13		:IF NOT

:	SHIFT PART OF GA.LIS LOGIN STRING TABLE TO DELETE ONE ENTRY.

	LIS	R0,0		:COMPUTE NEGATIVE CHANGE IN BYTE COUNT
	SR	R0,R8		:OF GA.LIS
	AM	R0,GAFREE	:UPDATE GA.LIS FREE PTR
	LI	R1,GA.LIS,R7	:COPY ADDRESS OF FIRST BYTE TO DELETE
	LA	R2,GA.LIS,R7,R8	:COMPUTE ADDRESS OF NEXT GOOD STRING
XMCG14	LB	R0,,R2		:GET A CHARACTER FROM NEXT GOOD STRING
	STB	R0,,R1		:REPLACE DELETED CHARACTER
	AIS	R1,1		:ADVANCE STORE PTR
	AIS	R2,1		:ADVANCE FROM PTR
	CI	R2,GA.END	:TEST IF END OF LOGIN STRING AREA
	JLEBS	XMCG14		:IF NOT, LOOP AND COPY SOME MORE

:	HAVE JUST DELETED ONE ENTRY. SEE IF SHOULD DELETE ANOTHER.

	LR	R9,R9		:TEST TYPE OF CHANGE FLAG
	JN	XMCG25		:IF RPOA, DELETE ONE ENTRY ONLY
	LB	R0,XOMNPS	:NUMBER OF XOM PARAMETERS
	CLHI	R0,4		:TEST FOR NEW LIS
	JGEFS	XMCG25		:KEEP RPOAS IF NEW STRING GIVEN
	LHL	R7,,R5		:GET FLAGS AND OFFSET OF NEXT ENTRY
	THI	R7,0C000	:TEST FLAGS
	JEFS	XMCG25		:EITHER SEPARATOR OR DNIC
	NHI	R7,3FFF		:MASK TO STRING OFFSET
	J	XMCGA7		:GO DELETE IT TOO
XMCG25	LA	R3,XOMRSP,,	:DONE IF DELETING		:SCHEN 25-Apr-85
	JAL	R1,XMCG21	:TEST IF ADDING/MODIFYING OR DELETING :SCHEN 25-Apr-85
	J	XMCGRT		:SET SEGMENT PROTECT (R/O)	:FAK 14-Feb-85

:	HERE TO ADD AN ENTRY. FIRST TEST FOR ROOM, THEN
:	COPY NEW STRING FROM XOMPAR --> GA.LIS

XMCG15	LHL	R0,XOMPAR+6,R9					:SCHEN 22-Apr-85
	CLHI	R0,20		:IS LENGTH OF STRING OVER MAX LENGTH :SCHEN 22-Apr-85
	JG	TOEXOM		:YES, TABLE OVERFLOW ERROR	:SCHEN 22-Apr-85
	LHL	R0,XOMPAR+6,R9					:SCHEN 22-Apr-85
	A	R0,GAFREE	:ADD LENTH OF STRING TO FREE POINTER :SCHEN 22-Apr-85
	LA	R3,TOEXOM		:TABLE OVERFLOW ERROR		:FAK 14-Feb-85
	CI	R0,GA.END	:SEE IF OVER THE END
	JGE	XMCGRT		:SET SEGMNT PROTECT ON (R/O)	:FAK 14-Feb-85
	L	R0,LDFREE	:LDNICS FREE POINTER
	CI	R0,LD.END	:COMPARE TO END OF TABLE ADDRESS
	JGE	XMCGRT		:SET SEGMNT PROTECT ON (R/O)	:FAK 14-Feb-85
	L	R3,GAFREE	:FREE PTR TO PUT STRING
	LHL	R1,XOMPAR+6,R9	:LENGTH OF NEW STRING
	STB	R1,,R3		:BUILD "SC" FORMAT, PUT IN LENGTH
	AIS	R3,1		:ADVANCE STORE POINTER
	LA	R2,XOMPAR+8,R9	:FROM POINTER
XMCG16	LB	R0,,R2		:GET A BYTE OF INPUT COMMAND
	STB	R0,,R3		:STORE IT IN GA.LIS
	AIS	R2,1		:BUMP XOMPAR POINTER
	AIS	R3,1		:BUMP GA.LIS POINTER
	SIS	R1,1		:DECREMENT STRING LENGTH COUNTER
	JGBS	XMCG16		:CONTINUE

:	SHIFT LDNIC TABLE TO ADD ONE ENTRY

	LI	R2,LD.END-8	:START FORM SECOND TO LAST ENTRY
XMCG17	LH	R0,2,R2		:GET DNIC
	STH	R0,6,R2		:REPLACE IT
	LH	R0,,R2		:GET FLAGS AND GA.LIS OFFSET
	STH	R0,4,R2		:REPLACE IT
	SIS	R2,4		:MOVE TO PREVIOUS ENTRY
	CLR	R2,R5		:TO INSERT POINT YET ??
	JGE	XMCG17		:IF NOT, CONTINUE SHIFTING
	L	R4,GAFREE	:GET PREVIOUS FREE POINTER
	SI	R4,GA.LIS	:BIAS FROM LOGIN STRING TABLE
	LR	R9,R9		:TEST TYPE OF CHANGE FLAG
	JEFS	XMCG19		:IF GATEWAY, USE FLAGS OF 00
	OHI	R4,4000		:SET RPOA FLAGS
XMCG19	STH	R4,,R5		:PUT IN FLAGS AND OFFSET
	LHL	R0,XOMPAR+4,R9	:GET DNIC/RPOA
	STH	R0,2,R5		:PUT IT IN TOO
	ST	R3,GAFREE	:SAVE CURRENT FREE POINTER


:	SHIFT GWDNIC TABLE TO ALLOW FOR ADDITION

	LIS	R0,4		:LDNICS TABLE ENTRIES ARE 4 BYTES
	AM	R0,LDFREE	:UPDATE LDNICS TABLE FREE POINTER
	AIS	RL,1		:START WITH NEXT LINK
	LA	R3,XOMRSP,,	:DONE				:FAK 14-Feb-85
XMCG20	CLHI	RL,NLINKS-1	:DO FOR ALL FOLLOWING LINKS
	JG	XMCGRT		:SET SEGMENT PROTECT ON (R/O)	:FAK 14-Feb-85
	LA	R1,,RL,RL	:TWICE LINK #
	AM	R0,GWDNIC,R1,R1	:ADVANCE THIS LINKS POINTER ONE ENTRY
	AIS	RL,1		:STEP TO NEXT LINK
	JBS	XMCG20		:CONTINUE

:	UTILITY RTN TO TEST IF ADDING/MODIFYING OR DELETING
:	SKIP-0 IF DELETING
:	SKIP-4 OTHERWISE IS NEW LOGIN STRING SPECIFIED
XMCG21	LB	R0,XOMNPS	:# OF PARAMTERS INPUT
	LR	R9,R9		:TEST TYPE OF CHANGE FLAG
	JEFS	XMCG22		:GATEWAY CHANGE
	CLHI	R0,5		:TEST # PARAMETERS FOR LIS
	JLER	R1		:IF NOT
	JFS	XMCG23		:IF BYTE COUNT WAS INPUT
XMCG22	CLHI	R0,4		:TEST # PARAMETERS FOR LIS
	JLER	R1		:NO LIS GIVEN, MUST BE A DELETE
XMCG23	LHL	R0,XOMPAR+6,R9	:SEE WHAT LENGTH OF STRING IS
	JER	R1		:CONSIDER IT NULL, IE A DELETE
	J	4,R1		:ELSE TAKE ADDING RETURN

:UTILITY ROUTINE TO SET SEGMENT PROTECT ON (R/O)		:FAK 14-Feb-85
XMCGRT	LA	R1,GWDNIC,,	:ADDRESS WITHIN SEGMENT TO PROTECT :FAK 14-Feb-85
	LIS	R2,1						:FAK 14-Feb-85
	JAL	R4,XMRO		:SET SEGMENT PROTECT ON		:FAK 14-Feb-85
	JR	R3						:FAK 14-Feb-85

:  IF	PVC	:LSH 22-JUL-87
:	*********************************
:	*				*
:	*	PVC MODIFY ROUTINES	*
:	*				*
:	*********************************

:  	Modify an existing PVC command
XMCCPV  HS	0			:LSH 22-JUL-87
  IF	PVCCD	:CHANGE TO REQUIRE PVCCODE(ON) TO MODIFY ANY PVC 
		:CONFIGURATION.		:LSH 22-JUL-87
	LIS	R0,0D			:MIN. NO. OF PARAMETERS FOR THIS
	LIS	R1,0			:COMMAND IS 13
	JAL	R9,XSUCCS
	CLH	R11,LPC.LT,RL,RL
	JL	OREXOM
	CLH	R11,HPC.LT,RL,RL
	JG	OREXOM
	LA	R9,PVCTAB-10,,
	AH	R9,PVCLNK,RL,RL
	SLHLS	R11,4
	AR	R9,R11			:R9 -  POINTER TO PVCTAB 
	LHL	R1,XOMPAR+18		:GET LOGIN LEN		:HJR 06-22-87
	CLHI	R1,0F			:SEE IF LOGIN TO LONG	:HJR 06-22-87
	JG	OREXOM			:LENGTH OUT OF RANGE	:HJR 06-22-87
	LHL	R0,XOMPAR+6		:GET DESTINATION HOST NUMBER
	LB	R2,LH.MT,RL					:HJR 02-09-87
	LHL	R3,HOSTS,R2,R2		:GET OUR HOST NUMBER	:HJR 06-22-87
	CR	R0,R3			:COMPARE HOST NUMBERS	:HJR 06-22-87
	JGFS	XMCCP1			:IF DEST > US		:HJR 06-22-87
	JE	IHEXOM			:IF HOSTS ARE THE SAME	:HJR 02-09-87
	LR	R1,R1			:IF DEST < US THEN	:HJR 06-22-87
	JE	OREXOM			: LOGIN LEN CANNOT BE 0	:HJR 06-22-87
XMCCP1								:HJR 06-22-87
	LA	R1,PV.DHS,R9
	LIS	R3,2
	JAL	R4,XMROTM		:AND MODIFY IT
	LHL	R0,XOMPAR+0A		:DESTINATION CHANNEL NO.
	LA	R1,PV.DCH,R9
	LIS	R3,2
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+8		:DESTINATION LINK NO.
	LA	R1,PV.DLK,R9
	LIS	R3,1
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+14		:TRANSMISSION THROUGHPUT CLASS
	LA	R1,PV.TCT,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+16		:RECEPTION THROUGHPUT CLASS
	LA	R1,PV.TCR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+10		:PACKET WINDOW SIZE FOR TRANSMISSION
	LA	R1,PV.PWT,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+12		:PACKET WINDOW SIZE FOR RECEPTION
	LA	R1,PV.PWR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+0C		:PACKET SIZE CODE FOR TRANSMISSION
	LA	R1,PV.PST,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+0E		:PACKET SIZE CODE FOR RECEPTION
	LA	R1,PV.PSR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+18		:GET LOGIN LEN		:HJR 06-22-87
	LHL	R9,PV.ULG,R9
	LA	R1,PVCLOG,R9,
	JAL	R4,XMROTM
	LR	R9,R0
	LHI	R11,19
XMCCP6	AIS	R11,1
	LB	R0,XOMPAR,R11
	AIS	R1,1
	JAL	R4,XMROTM
	SIS	R9,1
	JG	XMCCP6
XMCCP8	J	XOMRSP
  ELSE								:LSH 22-JUL-87
	J	CDEXOM	:SEND ERROR MESSAGE '30' IF PVCCODE(OFF).:LSH 22-JUL-87
  EI	:PVCCD							:LSH 22-JUL-87

:	Add a new PVC
XMCAPV	HS	0			:LSH 22-JUL-87
  IF	PVCCD	:CHANGE TO REQUIRE PVCCODE(ON) TO MODIFY ANY PVC 
		:CONFIGURATION.		:LSH 22-JUL-87
	LIS	R0,0D			:MIN. NO. OF PARAMETERS FOR THIS
	LIS	R1,0			:COMMAND IS 13
	JAL	R9,XSUCCS
	CLH	R11,LPC.LT,RL,RL	:SEE IF THE CHANNEL IS OUT OF RANGE
	JL	OREXOM
	CLH	R11,HPC.LT,RL,RL
	JG	OREXOM
	LHL	R5,EPB.LT,RL,RL		:CACULATE EPORT NUMBER
	SH	R5,LCC.LT,RL,RL
	AR	R5,R11
	STH	R5,EPORT
	RBT	R5,EPA.F		:FLAG THIS EPORT IS OCCUPIED
	LH	R5,EI.MT,R5,R5
	JGE	XOMRSP			:ERROR - CIRCUIT  ALREADY EXISTS
	LCS	R0,1						:HJR 02-09-87
	STH	R0,IPORT		:INIT IPORT TO REMOTE HOST BUILDS CIRCUIT :HJR 02-09-87
	LA	R9,PVCTAB-10,,
	AH	R9,PVCLNK,RL,RL
	SLHLS	R11,4
	AR	R9,R11			:R9 -  POINTER TO PVCTAB 
	ST	R9,PVCTAB,,		:SAVE THE POINTER TO PVCTAB
	LHL	R1,XOMPAR+18		:GET LOGIN LEN		:HJR 06-22-87
	CLHI	R1,0F			:SEE IF LOGIN TO LONG	:HJR 06-22-87
	JG	OREXOM			:LENGTH OUT OF RANGE	:HJR 06-22-87
	LHL	R0,XOMPAR+6		:GET DESTINATION HOST NUMBER
	LB	R2,LH.MT,RL					:HJR 02-09-87
	LHL	R3,HOSTS,R2,R2		:GET OUR HOST NUMBER	:HJR 06-22-87
	CR	R0,R3			:COMPARE HOST NUMBERS	:HJR 06-22-87
	JGFS	XMCAP2			:IF DEST > US		:HJR 06-22-87
	JE	IHEXOM			:IF HOSTS ARE THE SAME	:HJR 02-09-87
	LR	R1,R1			:IF DEST < US THEN	:HJR 06-22-87
	JE	OREXOM			: LOGIN LEN CANNOT BE 0	:HJR 06-22-87
	JAL	R3,FINDIP,,					:HJR 02-09-87
	J	NPEXOM			:CAN'T FIND AN IPORT	:HJR 02-09-87
XMCAP2	LA	R1,PV.DHS,R9					:HJR 02-09-87
	LIS	R3,2
	JAL	R4,XMROTM		:AND MODIFY IT
	LHL	R0,XOMPAR+0A		:DESTINATION CHANNEL NO.
	LA	R1,PV.DCH,R9
	LIS	R3,2
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+8		:DESTINATION LINK NO.
	LA	R1,PV.DLK,R9
	LIS	R3,1
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+14		:TRANSMISSION THROUGHPUT CLASS
	LA	R1,PV.TCT,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+16		:RECEPTION THROUGHPUT CLASS
	LA	R1,PV.TCR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+10		:PACKET WINDOW SIZE FOR TRANSMISSION
	LA	R1,PV.PWT,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+12		:PACKET WINDOW SIZE FOR RECEPTION
	LA	R1,PV.PWR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+0C		:PACKET SIZE CODE FOR TRANSMISSION
	LA	R1,PV.PST,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+0E		:PACKET SIZE CODE FOR RECEPTION
	LA	R1,PV.PSR,R9
	JAL	R4,XMROTM
	LHL	R0,XOMPAR+18		:GET LOGIN LEN		:HJR 06-22-87
	LHL	R9,PV.ULG,R9
	LA	R1,PVCLOG,R9,
	JAL	R4,XMROTM
	LR	R9,R0
	LHI	R11,19
XMCAP6	AIS	R11,1			:GET USERNAME AND PUT THEM INTO PVCLOG
	LB	R0,XOMPAR,R11
	AIS	R1,1
	JAL	R4,XMROTM
	SIS	R9,1
	JG	XMCAP6
XMCAP7	LH	R9,IPORT		:ARE WE MAKING THE CALL? :HJR 02-09-87
	JL	XMCAP8			:NO, DEST HOST IS 	:HJR 02-09-87
	JAL	R9,INICAL,,		:DO SOME INITIALIZATION
	LHL	R2,IPORT
	JAL	R3,ESP19S,,		:SET UP P.W. AND P.S. FOR THIS IPORT
	SBT	R2,PVCCAL		:MARK PVC CALL
	LHI	R0,PWPVCR
	STB	R0,PCKSTE,R2,		:PUT IN WAITING FOR PVC STATE
	SBT	R2,PVCTMR,,		:ENABLE PVC TIMER
	LIS	R0,1
	STB	R0,PVCTIK,R2,		:PVC TIMER WILL EXPIRE IN 1 TICK
XMCAP8	J	XOMRSP
  ELSE								:LSH 22-JUL-87
	J	CDEXOM	:SEND ERROR MESSAGE '30' IF PVCCODE(OFF).:LSH 22-JUL-87
  EI	:PVCCD							:LSH 22-JUL-87

:	REMOVE  A EXISTING PVC
XMCRPV	HS	0			:LSH 22-JUL-87
  IF	PVCCD	:CHANGE TO REQUIRE PVCCODE(ON) TO MODIFY ANY PVC 
		:CONFIGURATION.		:LSH 22-JUL-87
	LIS	R0,2			:MIN. NO. OF PARAMETERS = 2
	LIS	R8,1			:ASSUME ONLY 1 CHANNEL WILL BE REMOVED
	LIS	R2,0			:R2 USED AS AN FLAG, R2 < 0 MEANS 
					:REMOVE ALL PVC ON THIS LINK
	CLB	R0,XOMNPS
	JG	CSEXOM			:COMMAND TOO SHORT
	LH	RL,XOMPAR+2
	CLHI	RL,NLINKS
	JGE	BLEXOM			:BAD LINK NUMBER
	CLB	R0,XOMNPS		
	JEFS	XMCRP2			:CHANNEL NO. IS NOT SPECIFIED
	LHL	R11,XOMPAR+4		:GET CHANNEL NO.
	CLH	R11,LPC.LT,RL,RL	:SEE IF THE CHANNEL IS OUT OF RANGE
	JL	OREXOM
	CLH	R11,HPC.LT,RL,RL
	JG	OREXOM
	J	XMCRP3
XMCRP2	LH	R11,LPC.LT,RL,RL
	LH	R8,HPC.LT,RL,RL
	SR	R8,R11
	AIS	R8,1			:R8 = NO OF CHANNELS TO PROCESS
XMCRP3	STH	R11,PVCTAB+4,,		:SAVE CHANNEL NO.
	STH	R8,PVCTAB,,
	LHL	R5,EPB.LT,RL,RL
	SH	R5,LCC.LT,RL,RL
	AR	R5,R11			:R5 = EPORT 
	STH	R5,EPORT
	LH	R1,EI.MT,R5,R5		
	JL	XMCRP7			:PVC NOT EXISTING	
	RBT	R1,PVCTMR,,		:TURN OFF  PVC TIMER
	STH	R1,IPORT		
	LA	R9,PVCTAB-10,,
	AH	R9,PVCLNK,RL,RL
	SLHLS	R11,4
	AR	R9,R11			:R9 -  POINTER TO PVCTAB 
	LIS	R0,0			:START TO ZERO OUT PVCTAB
	LA	R1,PV.DHS,R9
	LHL	R3,,R1			:GET DESTINATION HOST NO.
	LB	R2,LH.MT,RL,
	CLH	R3,HOSTS,R2,R2		:COMPARE THIS HOST WITH DEST. HOST
	JG	XMCRP7			:THIS HOST NO. IS LOWER
	LIS	R3,2
	JAL	R4,XMROTM		:AND MODIFY IT
	LA	R1,PV.DCH,R9
	JAL	R4,XMROTM
	LA	R1,PV.DLK,R9
	LIS	R3,1
	JAL	R4,XMROTM
	LA	R1,PV.TCT,R9
	JAL	R4,XMROTM
	LA	R1,PV.TCR,R9
	JAL	R4,XMROTM
	LA	R1,PV.PWT,R9
	JAL	R4,XMROTM
	LA	R1,PV.PWR,R9
	JAL	R4,XMROTM
	LA	R1,PV.PST,R9
	JAL	R4,XMROTM
	LA	R1,PV.PSR,R9
	JAL	R4,XMROTM
	LH	R9,PV.ULG,R9
	LA	R1,PVCLOG,R9,
	JAL	R4,XMROTM
	LIS	R9,0F			:15 BYTES TO ZERO OUT IN PVCLOG
XMCRP4	AIS	R1,1
	JAL	R4,XMROTM
	SIS	R9,1
	JG	XMCRP4
	LHL	R1,IPORT
	LIS	R5,AA.DBU		:TERMINATION CODE - DROP BY USER
	STH	R5,TERMCD
	RBT	R1,PVCCAL
	LHL	R2,ID.MT,R1,R1		:GET DPORT
	STH	R2,DPORT
	JAL	R9,DDONE,,		:DETACH, CLEAN UP AND FREE DPORT
	TBT	RL,PACKUP		:IS PACKET LEVEL UP ON THIS LINK?
	JE	XMCRP5			:NO, BRANCH.
	LR	R1,RL
	SLLS	R1,2
	AHI	R1,IECBIA		:FORM BUFFER POINTER
	LHI	R0,ZILLCN		:PUT ON CHANNEL 0
	JAL	R4,WCI,,
	LHL	R4,EPORT		:DERIVE THE CHANNEL
	SH	R4,EPB.LT,RL,RL		:SUBTRACT EPORT BIAS
	AH	R4,LCC.LT,RL,RL		:ADD LOWEST CONF CHANNEL
	STH	R4,ELCI			:SAVE GROUP AND CHANNEL NUMBERS
	LB	R0,ELGN			:GET GROUP NUMBER
	JAL	R4,WCI,,
	LB	R0,ELCN			:GET CHANNEL NUMBER
	JAL	R4,WCI,,
	LHI	R0,YREST		:REQUEST RESET PACKET BE SENT
	JAL	R4,WCI,,
	LHI	R13,RNETCG!DIA000^8	:CAUSE "NET CONG", DIAG "0"
	LR	R0,R13
	JAL	R4,WCI,,		:WRITE CAUSE
	EXBR	R0,R13
	JAL	R4,WCI,,		:WRITE DIAGNOSTIC
XMCRP5	JAL	R9,IDONE,,		:FREE UP IPORT
	LHL	R1,EPORT		:RESET THE EPORT AVAILABLE FLAG
	RBT	R1,EPA.F		:BECAUSE IDONE CLEARED IT.
XMCRP7	LHL	R8,PVCTAB,,
	SIS	R8,1
	JE	XOMRSP
	LHL	R11,PVCTAB+4,,
	AIS	R11,1
	J	XMCRP3
  ELSE								:LSH 22-JUL-87
	J	CDEXOM	:SEND ERROR MESSAGE '30' IF PVCCODE(OFF).:LSH 22-JUL-87
  EI	:PVCCD							:LSH 22-JUL-87

:	ZAP AND REBUILD AN EXISTING CIRCUIT
XMCBPV	HS	0			:LSH 22-JUL-87
  IF	PVCCD	:CHANGE TO REQUIRE PVCCODE(ON) TO MODIFY ANY PVC 
		:CONFIGURATION.		:LSH 22-JUL-87
	LIS	R0,3			:MIN. NO. OF PARAMETERS IS 3
	LIS	R1,0			:
	JAL	R9,XSUCCS
	CLH	R11,LPC.LT,RL,RL	:SEE IF THE CHANNEL IS OUT OF RANGE
	JL	OREXOM
	CLH	R11,HPC.LT,RL,RL
	JG	OREXOM
	LR	R1,R11
	LA	R9,PVCTAB-10,,
	AH	R9,PVCLNK,RL,RL
	SLHLS	R1,4
	AR	R9,R1			:R9 = OFFSET INTO PVCTAB
	LHL	R3,PV.DHS,R9		:GET DESTINATION HOST NO.
	JE	XOMRSP			:IF NO DEST HOST	:HJR 06-22-87
	LB	R2,LH.MT,RL,
	CLH	R3,HOSTS,R2,R2		:COMPARE THIS HOST NO. WITH DEST. HOST
	JG	XOMRSP			:THIS HOST IS LOWER, DO NOTHING
	LHL	R5,EPB.LT,RL,RL
	SH	R5,LCC.LT,RL,RL
	AR	R5,R11			:R5 = EPROT
	STH	R5,EPORT
	LH	R1,EI.MT,R5,R5
	JL	XOMRSP			:ERROR - CIRCUIT IS NOT EXISTING
	STH	R1,IPORT
	LH	R0,ID.MT,R1,R1
	JLE	XOMRSP			:ERROR - CIRCUIT IS NOT EXISTING
	STH	R0,DPORT
	LIS	R5,AA.DBU		:TERMINATION CODE - DROP BY USER
	STH	R5,TERMCD
:
: IF LINK IS UP THEN QUEUE A RESET  PACKET (NETWORK CONGESTION) TO LINK.
:
	TBT	RL,PACKUP	:IS PACKET LEVEL UP ON THIS LINK?
	JE	XMCBP1		:NO, BRANCH.
	SBT	R1,IFLUSH	:FLUSH DATA COME FROM LINK.
	LHI	R0,RNETCG^8	:RESET CAUSE=NETWORK CONGESTION, DIAG=0
	STH	R0,PSDIAG,R1,R1	:
	LHI	R0,ZRESET	:
	JAL	R9,CNR,,	:DO RESET CLEANING UP, QUEUE UP A RESET
	LHL	R1,IPORT
XMCBP1	LIS	R0,PWPVCR	:STATE = WAITING FOR PVC TO BE BUILT
	STB	R0,PCKSTE,R1,
	JAL	R9,DDONE,,	:DETACH, CLEAN UP AND FREE DPORT
	LHL	R1,IPORT
	SLLS	R1,2
	AHI	R1,IEDBIA	:FLUSH THE BUFFER
	JAL	R4,EMPTY,,
	LHL	R1,IPORT
	LIS	R0,1
	LA	R2,,R1,R1
	STH	R0,BF+IEDBIA,R2,R2	:MODIFY POINTER TO BUFFER FLAGS
	SBT	R1,PVCTMR,,	:REQUEST PVC TIMER SERVICE
	LIS	R0,2		: 20 SECONDS FROM NOW
	STB	R0,PVCTIK,R1,
	J	XOMRSP
  ELSE								:LSH 22-JUL-87
	J	CDEXOM	:SEND ERROR MESSAGE '30' IF PVCCODE(OFF).:LSH 22-JUL-87
  EI	:PVCCD							:LSH 22-JUL-87
: EI	PVC							:LSH 22-JUL-87
  EI	(X.25 Operations Manager)
!C;E