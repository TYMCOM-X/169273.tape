 TITLE THROUGHPUT TESTING HOST 14.01
        SUBTTL  CODE AND DATA SECTION   (DOCUMENTATION)
VERSION EQ      $8 14           :VERSION NUMBER
REVLEV  EQ      $8 01           :REVISION LEVEL
DISLOG  EQ      0               :DO NOT DISABLE LOGIN STRING
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                       T H R O U G H P U T   H O S T                       ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:       VERSION.REVISION:       14.01
:       DATE:                   04/27/83   DEU
:                               07/11/84   DWL
:
:       THIS HOST IS A TESTING TOOL WHICH ALLOWS THE USER TO CONTROL
:       OUTPUT TO A NUMBER OF PORTS LOGGED IN AND MEASURE THE
:       THROUGHPUT OF PRODUCTS.  THE FIRST PORT LOGGED IN IS THE
:       CONTROLLING PORT (BOSS) AND GOVERNS THE RATE OF OUTPUT TO
:       ALL SUBSEQUENT LOGINS.
:
:       OUTPUT IS CONTROLLED BY TWO PARAMETERS, CPS AND BURST SIZE.
:       CPS IS THE NUMBER OF CHARACTERS PER SECOND TO ATTEMPT TO
:       OUTPUT TO THE PORT (IF THE PORT IS BACKPRESSURED BY ANY
:       OF THE PROCESSES BETWEEN THE HOST AND THE TERMINAL, THIS
:       RATE MAY NOT BE ACHEIVED.)  BURST SIZE IS THE NUMBER OF CHARACTERS
:       OF THE TEST PATTERN TO PUT INTO THE ISIS OUTPUT RING AT ONCE.
:
:       BURST MAY BE USED TO SIMULATE INTERACTIVE TRAFFIC TO SOME
:       EXTENT.  FOR INSTANCE, IF BURST=10 AND CPS=1, THE TERMINAL LOGGED IN
:       WILL RECEIVE A BURST OF OUTPUT APPROXIMATELY EVERY 10 SECONDS.
:
:       FOR A GIVEN BURST AND CPS, THE PROGRAM ATTEMPTS TO PRODUCE AN
:       EVENLY DISTRIBUTED OUTPUT.  IT DOES THIS BY:
:
:       1)      CHECKING THE CURRENT TIME INTO A MINUTE INTERVAL AND
:               CALCULATING THE NUMBER OF CHARACTERS THAT SHOULD HAVE BEEN
:               OUTPUT TO THAT CLOCK TICK (1/600 SECOND).
:
:       2)      IF THE PROGRAM IS BEHIND AT THIS CLOCK TICK, IT OUTPUTS
:               A BURST OF CHARACTERS.  THE ABOVE PROCESS IS REPEATED FOR
:               EACH TERINAL ON EACH BACKGROUND EXECUTION CYCLE.
:               ONLY ONE BURST IS OUTPUT PER EXECUTION CYCLE.
:
:       3)      AT THE BEGINNING OF A MINUTE INTERVAL, THE OUTPUT RATE
:               OF THE LAST INTERVAL IS CHECK AGAINST OPTIMUM (IT MAY
:               NOT BE OPTIMUM BECAUSE OF BACKPRESSURE).  IF
:               IT IS BEHIND, THE PROGRAM WILL ATTEMPT TO CATCH UP UNLESS
:               IT IS BEHIND BY MORE THAN THAT WHICH CAN BE MADE UP IN
:               A MINUTE + A SECOND ( MAXIMUM CPM FOR TERMINAL - DESIRED CPM
:               + 1 SECONDS WORTH OF CHARACTERS). IF IT IS BEHIND BY MORE
:               THAN THE ABOVE CRITERIA, IT SETS THE PORT 'NOT BEHIND'.
:
:       TERMINALS BEING OUTPUT TO CAN LOOP THE DATA BACK FOR FULL
:       DUPLEX LOAD TESTING.  LOOPBACK DATA CAN BE VERIFIED USING THE
:       TRACE FEATURE.:
:       IF MAXHST IS SET > 1 MORE THAN 1 HOST WILL BE DEFINED.
:       THE TYM FILE CAUSES HOST NUMBERS TO BE CONSECUTIVE STARTING
:       WITH THE FIRST DEFINED HOST NUMBER.  THE DATA PATTERN FOR
:       EACH HOST WILL START 1 CHARACTER GREATER IN VALUE THAN THE
:       HOST OF LOWER NUMBER. (E.G. HOST 0 WILL HAVE PATTERN XYZ 0123456789
:       AND HOST 1 WILL HAVE PATTERN XYZ 123456789:).
:       IF THE SYMBOL SNDORD IS DEFINED A SPECIAL PATTERN CONSISTING OF
:       ONLY THE 8-BIT BINARY VALUE OF THE HOST ORDINAL WILL BE SENT.
:       THE BOSS MAY ONLY LOG INTO HOST ORDINAL 0.  THEREFORE,  IF
:       TESTING IS DONE USING OTHER ORDINALS NONE WILL BECOME THE BOSS
:       INADVERTENTLY.

:
:       THE PROGRAM HAS THE CAPABILITY OF COMPUTING CPS REAL TIME AND
:       REPORTING IT TO THE CONTROLLING TERMINAL.  IF REPORTING IS ON,
:       EACH ACTIVE PORT IS LISTED FOLLOWED BY ITS CHARACTER SPEED.
:       THE LIST IS FOLLOWED BY A TOTAL\AVERAGE SPEED FOR THE MINUTE.
:       THE INTERVAL BETWEEN REPORTS IS INITIALLY 60 SECS AND MAY BE MODIFIED.
:
:       COMMANDS INPUT ON THE CONTROLLING TERMINAL ARE IN THE FORM:
:
:       C[[[VALUE],BEG PORT],END PORT]CR
:
:       C              -COMMAND LETTER
:       VALUE          -VALUE TO SET TO (IF NEEDED)
:       BEG PORT       -BEGINNING PORT NUMBER.  IF OMMITTED, ALL PORTS
:                       CURRENTLY LOGGED IN ARE AFFECTED.
:       END PORT       -END PORT NUMBER.  IF OMMITTED, ONLY THE BEG PORT
:                       IS AFFECTED BY COMMAND.
:
:       ALL NUMERIC INPUT IS MADE IN DECIMAL.  BEG PORT MUST BE <= END PORT.
:       NOTE THAT PORT NUMBERS ARE ASSIGNED IN DECREASING NUMERIC ORDER
:       STARTING WITH NPORT-1.  IF AN INPUT ERROR IS MADE, THE INPUT CAN
:       BE ABORTED WITH '?' (OR AN ILLEGAL COMMAND CHARACTER).  ALL INPUT IS
:       DELIMITED WITH CARRIAGE RETURN.
:
:       CMD     VALUE RANGE             MEANING
:       ---     -----------             -------
:       B       1 TO 157                -SET BURST SIZE
:               0 OR NONE                 157
:                                         DEFAULT BURST SIZE IS 1
:       C       1 TO 65535              -CPS
:               0 OR NONE                 OUTPUT BURSTS CONTINUOUSLY
:                                         RESTRICTED BY BACKPRESSURE.
:       D       NONE                    -REBUILD CIRCUIT WHEN ZAPPED
:       E       NONE                    -REBUILD OFF
:       F       NONE                    -OUTPUT OFF
:       H       NONE                    -DISPLAY INSTRUCTIONS
:       I       1 TO 32767              -REPORT INTERVAL IN SECS.
:       K       1 TO 32767              -KILL PORT(S) AFTER # SECS
:               0 OR NONE                 LIFETIME INFINITE
:       L       0-1                     -LIST PARAMETERS OF PORTS.
:                                         (0=ACTIVE,1=AUTO-INACTIVE)
:       N       0-2                     -OUTPUT ON
:               0                         NORMAL DATA PATTERN
:               1                         INCLUDE SENDING PORT#
:               2                         ECHO INPUT ON PORT
:       O       NONE                    -AUTOMATIC OUTPUT ON PORT
:                                         (CANCEL WITH F)
:       P       0-2                     -(NO PORT SPECIFICATIONS)
:                                         USED TO MAINTAIN ISIS MSG
:                                         BUFFER FOR X-CMD
:               0 OR NULL                 CLEARS NESSAGE
:               1                         ENTER NEW MESSAGE
:               2                         DISPLAY CURRENT MESSAGE
:       Q       NONE                    -QUIT, ZAP ALL CIRCUITS, EXIT
:       R       0 TO 6 OR NONE          -SELECT REPORTS BY # NONE=ALL 
:               0                         CLEARS ALL REPORTS
:       S       1 TO 65565              -MAXIMUM CPS FOR TERMINAL
:                                         THIS WILL BE AUTOMATICALLY 
:                                         INITIALIZED BY TID.
:       T       NONE                    -TRACE: START VERIFICATION OF
:                                         LOOPBACK INPUT
:       U       NONE                    -UNTRACE: STOP VERIFICATION
:       V       IGNORED                 -PRINT VERSION NUMBER AND
:                                         HOST NUMBER ON BOSS PORT.
:       W       NONE                    -TIME TRACE: RECORD TIME TAKEN
:                                         FOR PATTERN LOOPBACK.
:       X       NONE                    -SEND ISIS MSG ON PORT.
:       Z       NONE                    -ZAP PORT
:       TO ESTABLISH CIRCUITS FROM TPUT HOST TO ANOTHER HOST --
:
:       AUX CIRCUITS                    NORMAL CIRCUITS
:       ------------                    ---------------
:       A[COUNT]<CR>                    M[COUNT]<CR>
:       USERNAME:SYS<CR>                USERNAME:SYS<SEMI-:>PASSWORD<CR>
:       [INITIAL LOGON STRING]<^Z>      [INITIAL LOGON STRING]<^Z>
:
:       RESPONSE IS THE PORT # OR A REJECT MSG.
:       IF YOU DO NOT WAIT FOR THE RESPONSE BEFORE ENTERING
:       ANOTHER REQUEST YOU WILL NOT KNOW WHICH CIRCUIT
:       IS WHICH.

:       A REPEAT COUNT MAY BE GIVEN TO THESE COMMANDS AS A VALUE.
:       THIS WILL CAUSE THAT MANY CIRCUITS TO BE BUILT.
:
:       IF AN INITIAL LOGON STRING IS SPECIFIED, IT WILL BE OUTPUT UPON ESTABLISHMENT
:       OF THE CIRCUIT.  THE LOGON STRING MAY BE A MAXIMUM OF 63 CHARS AND IS
:       TERMINATED WITH A CONTROL-Z.  THE CONTROL-Z MUST BE ENTERED EVEN IF NO
:       STRING IS SPECIFIED.
        SUBTTL  CODE AND DATA SECTION   (MISC & INTERFACE DATA)
:       MISCELLANEOUS

STRTER  EQ      01A             :TEXT TERMINATER (^Z)

        IF      \BHOST          :SO AS TO WORK WITH EARLIER TYM FILES
        ELSE
BHOST   EQ      0
        EI
NGRP    EQ      (NPORT+0F)/10  :NUMBER OF PORT GROUPS

:       CRASH CODE      MEANING                 CFROM VALUE
CCINDT  EQ 0F0          ILLEGAL ISIS MSG TYPE   MSG TYPE
CCMXPT  EQ 0F1          ISIS PORT NO. TOO BIG   ISIS PORT NUMBER
CCINOD  EQ 0F2          ILLEGAL INTRA-NODE MSG  INTRA-NODE MSG TYPE
CCHANG  EQ 0F3          HANG NON-CONNECT PORT   ISIS PORT NUMBER
CCDUPT  EQ 0F4          NEEDLE ON CON'D PORT    ISIS PORT NUMBER

:       INTERFACE MSG DATA TYPES
FIRST   EQ      9E              :FIRST MESSAGE IN LIST
DETMSG  EQ      9E              :DETACH MESSAGE
ZAPMSG  EQ      9F              :DISCONNECT MESSAGE
NOSMSG  EQ      0A0             :APPLY BACK-PRESSURE
SNDMSG  EQ      0A1             :RELEASE BACK-PRESSURE
GOBMSG  EQ      0A2             :FLUSH OUTPUT
BKGMSG  EQ      0A3             :FLUSH INPUT
BLKMSG  EQ      0A4             :DATA LOST IN THIS DIRECTION
GRYMSG  EQ      0A5             :DATA LOST IN OPPOSITE DIRECTION
EDMMSG  EQ      0A6             :ENTER DEFERED ECHO MESSAGE
LDMMSG  EQ      0A7             :LEAVE DEFERED ECHO MESSAGE
ETMMSG  EQ      0A8             :ENTER TRANSPARENCY MODE
LTMMSG  EQ      0A9             :LEAVE TRANSPARENCY MODE
GBMSG   EQ      0AA             :GREEN BALL
RBMSG   EQ      0AB             :RED BALL
YBMSG   EQ      0AC             :YELLOW BALL
OBMSG   EQ      0AD             :ORANGE BALL
BRKMSG  EQ      0AE             :BREAK DETECTED
HNGMSG  EQ      0AF             :HANG UP
QTPMSG  EQ      0B0             :QUERY TERMINAL PARAMETER
STPMSG  EQ      0B1             :SET TERMINAL PARAMETER
APNMSG  EQ      0B2             :AUX PSEUDO NEEDLE
      IF        ISIS2
NLOGCH  EQ      0B3             :NORMAL LOGON CHAR
NLOGST  EQ      0B4             :NORMAL LOGON STATUS
LGFAIL  EQ      0B5             :LOGON FAILURE
NLOGOK  EQ      0B6             :SUCCESSFUL LOGON
      ELSE
NPNMSG  EQ      0B3             :NORMAL PSEUDO NEEDLE
NLOGCH  EQ      0B4             :NORMAL LOGON CHAR
NLOGOK  EQ      0B5             :SUCCESSFUL NORMAL LOGON
NLOGST  EQ      0B6             :NORMAL LOGON STATUS
      EI
SHGMSG  EQ      0B8             :SUPER-HANG UP
SXMLMT  EQ      0B9             :SET TRANSMIT LIMIT
      IF        ISIS2
BRKEND  EQ      0BA             :BREAK END
MAXTYP  EQ      0BA             :MAX TYPE DEFINED
      ELSE
MAXTYP  EQ      0B9             :MAX TYPE DEFINED
      EI

NRMTYP  EQ      7               :NORMAL CKT PSEUDO-NEEDLE REQUEST
      IF        ISIS2
AUXTYP  EQ      8               :AUX CKT PSEUDO-NEEDLE REQUEST
      ELSE
AUXTYP  EQ      9               
      EI
     IF \ANYMSG
     ELSE
ANYMSG  EQ      0               :TEXT ONLY FOR "P" COMMAND DEFAULT
     EI
        IF      \RECHO
        ELSE
RECHO   EQ      0               :REMOTE ECHO ONLY IF RECHO TRUE
        EI

        IF      1-\MULHST
MULHST  EQ      0               :MULTI-BASE-HOST 'KEY' DEFAULT
        EI

        IF      1-\BNCYEL       :BOUNCE YELLOW BALL
BNCYEL  EQ      1               : DEFAULT TO YES
        EI



        SUBTTL  CODE AND DATA SECTION   (VARIABLE STORAGE)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                      V A R I A B L E   S T O R A G E                      ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

        SEG     A.DATA

START0  HS      0       :BEGINING OF AREA TO ZERO AT STARTUP
CPNEND  HS      1               :CMND PROCESSOR END PORT NUMBER   /
CPNBEG  HS      1               :CMND PROCESSOR BEG PORT NUMBER  / THESE MUST 
CVALUE  HS      1               :CMND PROCESSOR DATA VALUE      / BE TOGETHER
CSAVE   WS      2               :CMND PROCESSOR REG SAVE AREA
CMNDAD  WS      1               :CMND PROCESSOR LAST CALL ADDR
CMNDR6  WS      1               :CMND PROCESSOR REG 6
CMNDR7  WS      1               :CMND PROCESSOR REG 7
CMNDRD  WS      1               :CMND PROCESSOR REG 13
CYBTIM  WS      0               :+- = YELLOW BALL OUT TIMEOUT

MINUTE  WS      1               :LAST MINUTE VALUE OF FASTC
BOSSP   HS      1               :BOSS PORT NUMBER (0 = NO BOSS)
LIFTIM  HS      1               :DEFAULT CIRCUIT LIFETIME, SET BY K COMMAND.
                                :IF ZERO, CIRCUITS WILL NOT BE ZAPPED.
CLK1    HS      1               :LOW ORDER 16 BITS OF FASTC + 1 SECOND

MSGHX   HS      1               :HELP MESSAGE INDEX
MSGEND  WS      1               :HELP MESSAGE END

:       REPORT STATUS
RGPX    HS      1               :GROUP HW INDEX
NOPRTS  HS      1               :#PORTS
PTSERV  HS      1               :PORTS SERVICED BIT ARRAY
HDRFLG  HS      1               :REPORT HEADER FLAG (-1=OUTPUT HEADER)

PSNEDL  HS      NGRP            :PSEUDO NEEDLE RECEIVED - WAITING FOR B6 MSG
REBILD  HS      NGRP            :REBUILD CKT WHEN ZAPPED
APORT   HS      NGRP            :ACTIVE PORT BIT ARRAY (1=ACTIVE)
AUTO    HS      NGRP            :START OUTPUT AUTOMATICALLY IF 1
PORTON  HS      NGRP            :PORT TURNED ON BIT ARRAY (1=ON)
REPON   HS      NGRP            :REPORT ON BIT ARRAY 
TRCEON  HS      NGRP            :WATCHING PORT FOR LOOPBACK ERRORS (1=ON)
TRSYNC  HS      NGRP            :ON IF TRACING SYNCHRONIZED
PRTDAT  HS      NGRP            : INCLUDE PORT IN DATA PTRN FLAGS
PORTEC  HS      NGRP            : ECHO INPUT ON PORT FLAGS
CWHOLD  WS      NPORT           :ACCUMULATE FASTC BYTE BY BYTE ON INPUT
:                                 FOR W (TIME TRACE) OPTION
CWSEND  WS      1               :FASTC SEND TIME FOR OUTPUT
CWTIMT  WS      1               :TOTAL ROUND-TRIP PATTERN TIME FOR ALL PORTS
:                                 FOR ENTIRE REPORTING PERIOD
CWTIMN  HS      1               :TOTAL NUMBER OF ROUND-TRIP PATTERNS FOR ALL
:                                 PORTS FOR ENTIRE REPORTING PERIOD (USED TO
:                                 COMPUTE AVERAGE ROUND-TRIP TIME)
CWTHWM  HS      1               :HIGH-WATER MARK (PEAK) FOR PATTERN ROUND-TRIP
:                                 TIME FOR REPORTING PERIOD
CWCELL  HS      1               :SET TO -1 IF W OPTION ENABLED, ELSE 0
BKPRSR  HS      NGRP            :BACKPRESSURED PORT BIT ARRAY (0=BACKPRESSURED)
TOISIS  EQ      BKPRSR          :TO ISIS BACKPRESSURE ARRAY
LOGBPA  HS      NGRP            :LOGIN BACKPRESSURED (0=BP'D)
LOGBP   HS      1               :ANY LOGIN BP'D

LOGINX  BS      NPORT           :CURRENT INDEX INTO LOGIN
CPATX   BS      NPORT           :CHAR PATTERN INDEX
IPATX   BS      NPORT           :INPUT PATTERN INDEX
APATX   BS      NPORT           :PATTERN CHARACTER ADDITION
CPORTI  BS      NPORT*4         : PORT STRINGS FOR INPUT TEST

ZAPTIM  HS      NPORT           :DESIRED CIRCUIT LIFETIME (SECS)
CPM     HS      NPORT           :DESIRED OUTPUT RATE (CHARS/MINUTE)
CPS     HS      NPORT           :DESIRED OUTPUT RATE (CHARS/SECOND)
MAXCPM  HS      NPORT           :MAXIMUM OUTPUT RATE (CHARS/MINUTE)
ROMIN   HS      NPORT           :REAL OUTPUT CHARS FOR MINUTE
ERRCNT  HS      NPORT           :LOOPBACK ERROR COUNT
PKEY    HS      NPORT           :PORT LOCAL KEY (START INDEX INTO LOGIN)
ORIG    HS      NPORT           :ORIG HOST/NODE

OCHAR   WS      NPORT           :TOTAL CHARS OUTPUT (SINCE START UP NEEDLE)
ICHAR   WS      NPORT           :TOTAL CHARS INPUT  (SINCE START UP NEEDLE)
TOMIN   WS      NPORT           :TOTAL OUTPUT IN THIS MINUTE
TIMIN   WS      NPORT+1         :TOTAL INPUT IN THIS MINUTE
PDCIN   WS      1               :NUMBER OF CHARACTERS IN, IN 1 PERIOD
PDCOUT  WS      1               :NUMBER OF CHARACTERS OUT, IN...

:       LOGIN STRING STORAGE
:       LOGIN STRINGS ARE SAVED IN A TABLE AND USED FOR CIRCUIT REBUILDING
:       THE TABLE (LOGIN) IS INDEXED BY LOCAL KEY AND CONTAINS ONE ENTRY 
:       PER PORT.  THE FORMAT FOR EACH ENTRY IS -
:       WS      1       1 WORD OF FASTC TIME.  STARTING OF CIRCUIT BUILD
:       WS      1       1 WORD OF FASTC TIME.  END OF CIRCUIT BUILD
:       BS      1       CKT TYPE (7 = NORMAL, 8 = AUX, 0 = UNUSED)
:                       MSB = 1 -> CIRCUIT TO BE REBUILT WHEN ZAPPED
:       BS      1       # BYTES IN LOGIN STRING
:       BS      N       LOGIN STRING (USERNAME:SYS:PASSWORD)
:       BS      1       # BYTES IN INITIAL LOGON STRING
:       BS      N       INITIAL LOGON STRING
:       
:       THE INITIAL LOGON STRING IS OUTPUT TO THE PORT UPON ESTABLISHMENT
:       OF THE CIRCUIT

LGTMSZ  EQ      8               :SIZE OF TIME STARTED
LGINSZ  EQ      $A LGTMSZ+1+1+30 :CKT TYPE + TIME SIZE + SIZE + LOGIN STRING >12.09<
ISTRSZ  EQ      $A 1+63         :SIZE + INITIAL LOGON STRING
        BND     4               : / ESTABLISH WORD BOUNDRY
LOGIN   EQ      .-LGINSZ-ISTRSZ :BASE ADDR OF LOGIN STRING STORAGE (NO 0 ENTRY)
LOGINS  BS      NPORT*(LGINSZ+ISTRSZ)  :LOGIN STRING STORAGE
LOGBFR  BS      LGINSZ+ISTRSZ   :TEMP LOGIN STRING STORAGE

SMPASS  HS      1               :SWITCH FOR ALLOWING THE SAME
:                               : USERNAME/PASSWORD TO BE REUSED

TTLCPS  WS      1               :TOTAL CPS
REPTIM  HS      1               :TIME TO REPORT IF ZERO
NUMCKT  HS      1               :NUMBER OF CKTS TO BUILD
NAPRTS  HS      1               :# ACTIVE PORTS
CCHAR   BS      1               :COMMAND CHAR
LPORT   HS      1               :LAST PORT SERVICED FOR OUTPUT
XPORT   HS      1               :ROUND ROBIN INDEX FOR OUTPUT
RPTARY  HS      1               :REPORT ON ARRAY
RPTALL  EQ  FFF            :ALL REPORTS ON (#0 NOT USED)

END0    HS      0       :END OF AREA TO ZERO AT STARTUP

:= = = END OF AREA TO BE ZEROED AT START UP

BURST   EQ      .       :NO. CHARS. TO OUTPUT AT ONCE (BURST SIZE)
        RE      NPORT   :INITIALIZE ALL VALUES TO 1 CHR BURSTS.
        HC      1
        ER

REPRAT  HC      $A60            :# SECONDS BETWEEN REPORTS

FRISIS  HS              :FROM ISIS BACKPRESSURE ARRAY
        RE      NGRP+1
        HC      -1
        ER
CPORTO  BS      NPORT*4         : PORT NUMBER STRINGS FOR OUTPUT
CPATRN  AC      /"8D"8AXYZ 0123456789/
CPATMX  EQ      .-CPATRN
ZAPPED  SC      /PPP Zapped"8D"8A/
KILLED  SC      /PPP Killed"8D"8A/
GREY    SC      /PPP Grey ball"8D"8A/
BLACK   SC      /PPP Black ball"8D"8A/

        BND     4
:                    Normal
NRMAUX  SC      /PPP NRMAUX port SSS.FFF"8D"8A/
:                    Auxlry
PORMSG  SC      /PPP Port"8D"8A/
        BND     4                       :FORCE TO WORD B'ND'RY
NORMM   AC      / Normal /              : " Normal "
AUXM    AC      / Auxlry /              : " Auxlry "


:       PSEUDO NEEDLE REQUEST
        BND     2
        BS      1               :FILLER TO ALIGN HW'S
PNREQ   BS      1               :MSG LENGTH (SC FORMAT)
PNTYP   BS      1               :MSG TYPE
PNKEY   BC      0               :KEY
PNLKEY  HS      1               :LOCAL KEY
      IF        ISIS2
PNDIAL  HC      0               :DIALECT
PNHOST  HS      1               :ORIG HOST
      EI
PNTID   BS      1               :TID
PNLEN   EQ      PNTID-PNREQ     :NORMAL CKT REQUEST LENGTH
PNSIZ   EQ      PNTID           :LOGON STRING SIZE
PNSTR   BS      LGINSZ-2-LGTMSZ :LOGON STRING

NLCHAR  BC      2,NLOGCH,0      :NORMAL LOGON CHAR MSG
REPHDR  SC      /PORT ICPS OCPS    ICHAR    OCHAR   ERR TRSYNC"8D"8A/
PSPDMS  SC      / XXX XXXX XXXX XXXXXXXX XXXXXXXX XXXXX  XXX"8D"8A/

CWMSG   BC      3F      :SIZE OF ENTIRE MESSAGE (FAKE SC FORMAT)
        AC      /Traces: Total=/        :14 CHARS
CWM1    AC      /XXXXX/                 : 5 CHARS
        AC      /, Avg time=/           :11 CHARS
CWM2    AC      /SSS.FFF/               : 7 CHARS SECONDS.FRACT.
        AC      /, Peak time=/          :12 CHARS
CWM3    AC      /SSS.FFF/               : 7 CHARS
        AC      / sec."8D"8A/           : 7 CHARS
:               [TOTAL CHARS = ]         63d = 3Fx

        HC      RPTLEN  :SIZE OF ENTIRE MESSAGE (FAKE SC FORMAT)
RPTFD0  EQ      .-1     :START OF MESSAGE FOR LOGIN TIMING
        AC      /Logons: Total=/        :14 CHARS
RPTFD1  AC      /XXXXX/                 : 5 CHARS
        AC      /, Avg time=/           :11 CHARS
RPTFD2  AC      /SSS.FFF/               : 7 CHARS SECONDS.FRACT.
        AC      /, Peak time=/          :12 CHARS
RPTFD3  AC      /SSS.FFF/               : 7 CHARS
        AC      / sec, Failed=/         :13 CHARS
RPTFD4  AC      /XXX"8D"8A/             : 5 CHARS
:               [TOTAL CHARS = ]         74d = 4Ax
RPTLEN  EQ      .-(RPTFD0+1)            :DEFINE LENGTH

TSPDMS  SC      /TOTAL CPS = XXXXX  AVERAGE CPS = XXXX"8D"8A/

        HC      CHPDMC                  :FAKE SC FORMAT
CHPDM   EQ      .-1
        AC      !I/O CHARS: IN=!
CHPDMI  AC      /XXXXXXXXXX, OUT=/      :INPUT COUNT
CHPDMO  AC      /XXXXXXXXXX"8D"8A/      :OUTPUT COUNT
CHPDMC  EQ      .-(CHPDM+1)

        IF      \XTABSZ
        ELSE
XTABSZ  EQ      20      : DEFAULT SIZE FOR X-COMMAND TABLE
        EI
XTABC   BC      0       : COUNT OF X-COMMAND BYTES IN TABLE
XTAB    BS      XTABSZ  :TABLE AREA FOR X-COMMAND  !X!
XTABBF  BS      XTABSZ * 2 + 4  : OUTPUT BUFFER FOR P COMMAND

MAKCNT  HS      1       :COUNT OF CIRCUITS LEFT TO BE BUILT
        BND     4       :SET UP ON A FULL WORD BOUNDRY
MAKCOK  HS      1       :COUNT OF COMPLETED CIRCUITS IN THIS
:                               PERIOD.
MAKFAL  HS      1       :# OF CIRCUITS BAD AND THEREFORE NOT TIMED
MAKTIM  WS      1       :TOTAL TIME FOR ALL CIRCUITS
MAKHWM  WS      1       :HIGHEST (LONGEST) TIME FOR LOGIN

:       WARNING THESE LOCATIONS WILL ALSO BE REFERENCED AS A
:               DISPLACMENT PAST MAKxxx BY THE LOGLIN ROUTINE
RPTCOK  HS      1       :NUMBER OF 'OK' CIRCUITS IN PERIOD
RPTFAL  HS      1       :NUMBER OF FAILED CIRCUITS IN PERIOD
RPTTIM  WS      1       :TOTAL TIME FOR CIRCUIT CREATION IN THIS
:                               PERIOD
RPTHWM  WS      1       :HIGHEST (LONGEST) TIME FOR LOGIN


RPTSAV  WS      10      :REGISTER SAVE AREA (16 REGS)

        SEG     A.CODE

NLSTYP  WC      NLS0
        WC      NLS1
        WC      NLS2
        WC      NLS3
        WC      NLS4
        WC      NLS5
        WC      NLSILL
        WC      NLSILL

NLS0    SC      /"22continue"22 illegal - ckt zapped"8D"8A/
NLS1    SC      /"22please log in"22"8D"8A/
NLS2    SC      /"22error, type username"22"8D"8A/
NLS3    SC      /"22error, type password"22"8D"8A/
NLS4    SC      /"22username"22"8D"8A/
NLS5    SC      /"22password"22"8D"8A/
NLSILL  SC      /ILLEGAL LOGON STATUS RECEIVED!"8D"8A/

ARJTYP  WC      ARJ0
        WC      ARJ1
        WC      ARJ2
        WC      ARJ3
        WC      ARJ4
        WC      ARJ5
        WC      ARJ6
        WC      ARJ7
        WC      ARJ8
        WC      ARJ9
        WC      ARJ10

ARJ0    SC      /ISIS unable to complete request"8D"8A/
ARJ1    SC      /Format error"8D"8A/
ARJ2    SC      /Bad user name"8D"8A/
ARJ3    SC      /Bad MUD"8D"8A/
ARJ4    SC      /System unavailable"8D"8A/
ARJ5    SC      /Down-line load or dial-out failure"8D"8A/
ARJ6    SC      /Timeout"8D"8A/
ARJ7    SC      /Access not permitted"8D"8A/
ARJ8    SC      /Out of origination ports"8D"8A/
ARJ9    SC      /Supervisor will not honor request at this time...try latter"8D"8A/
ARJ10   SC      /LOGON ERR # OUT OF RANGE! (>9)"8D"8A/

ARJMAX  EQ      9

KILL0   SC      /ports killed after specified period"8D"8A/
KILL1   SC      /ports live until zapped"8D"8A/
MSGCKT  SC      /TOO MANY CIRCUITS"8D"8A/
HMASK   HC      8000,4000,2000,1000,800,400,200,100,80,40,20,10,8,4,2,1
        SUBTTL  CODE AND DATA SECTION   (CBA - CONVERT BINARY TO ASCII)
RBCBA   EQ      1
RADX    EQ      4
RLCBA   EQ      9
RACBA   EQ      $A10
RSCBA   EQ      $A11


::      CBA - CONVERT BINARY TO ASCII.
:
:       ASCII NUMBER WILL BE OUTPUT IN REQUESTED RADIX RIGHT JUSTIFIED
:       WITH BLANK FILL IN A GIVEN FIELD IN MEMORY.
:
:       ENTRY   RBCBA   BINARY #
:               RADX    RADIX (2 TO 10 HEX)
:               RLCBA   LINK
:               RACBA   ADDRESS TO DEPOSIT STRING
:               RSCBA   SIZE OF FIELD IN CHARACTERS
:
:       DESTROYS R2,3, RSCBA (SIZE)

CBA     LR      R3,RBCBA        :GET NUMBER TO SCRATCH REGISTER
CBA010  LIS     R2,0            :CLEAR UPPER HALF
        DR      R2,RADX         :DIVIDE BY RADIX
        LB      R2,CBAASC,R2    :CONVERT TO ASCII
CBA020  STB     R2,-1,RACBA,RSCBA       :SAVE CHARACTER
        SIS     RSCBA,1         :COUNT CHARACTER IN STRING
        JLER    RLCBA           :IF FIELD FULL
        LR      R3,R3           :NUMBER FULLY PROCESSED?
        JGBS    CBA010          :IF NOT
        LH      R2,CBAFIL       :FILL CHAR (DEFAULT IS BLANK)
        JBS     CBA020          :GO CHAR. FILL

CBAASC  AC      "0123456789ABCDEF"

        SEG     A.DATA  :SET UP FOR WRITEBLE STORE
CBAFIL  HC      0A0     :FILL CHARACTER PLEASE RETURN
:                       :TO BLANK IF YOU CHANGE IT FOR SOME REASON
        SEG     A.CODE  :SET BACK TO CODE

        SUBTTL  CODE AND DATA SECTION   (PRINT TIME (SEC) )
:=========================================================:
:       PRNTIM: PRINT TIME IN SECONDS                     :
:=========================================================:

:  PRINT FASTC TYPE TIME IN SECONDS & MILISECONDS.

:       REGISTER USAGE:
:               RBCBA  (1) - BINARY INPUT TO CBA ROUTINE
:               R2    *(2) - SCRATCH REGISTER
:               R3    *(3) - SCRATCH REGISTER
:               RADX   (4) - RADIX TO BE USED (0A FOR DECIMAL)
:               R5    *(5) - SCRATCH REGISTER [PRNTIM]
:               R6    *(6) - SCRATCH REGISTER [PRNTIM]
:               R7     (7) - LINK REGISTER TO [PRNTIM]
:               RLCBA  (9) - LINK FROM HERE TO CBA
:               RACBA  (10)- ADDRESS OF STRING TO BE FILLED.
:               RSCBA *(11)- SIZE OF FIELD (INPUT TO CBA)
:               * DISTROYED BY PRNTIM AND / OR CBA

PRNTIM  HS      0       :START ROUTINE ON 1/2 WD BOUNDRY
        LIS     RADX,0A :RADIX = DECIMAL
        LR      R5,RBCBA        :GET # OF FASTC COUNTS
        DH      R5,PRNTFC       :DIVIDE BY FASTC RATE (600)
:                       : GIVING R5=REMAINDER, R6=SECONDS
        LR      RBCBA,R6        :PRINT SECONDS
        LIS     RSCBA,3         :3 CHARS WIDE (XXX[.000])
        JAL     RLCBA,CBA       :OUTPUT SECONDS

        AIS     RACBA,4 :MOVE ADDRESS POINTER UP TO FRACTIONAL
:                               : SECONDS POSITION
        LHI     R2,0B0          :LOAD '0' FOR FILL CHAR
        STH     R2,CBAFIL       : AND STORE

:       FROM 1/600 TO 1/1000 WE MUST MULTIPLY BY 5 AND DIVIDE
:       BY 3 (TO GET FRACTIONAL SECONDS)

        MH      R5,PRNT5        :MULTIPLY REMAINDER BY 5
        DH      R5,PRNT3        :DIVIDE BY 3 GIVING 1/1000THS
        LR      RBCBA,R6        :PASS IT TO CBA
        LIS     RSCBA,3         :SET SIZE TO 3 ([000.]XXX)
        JAL     RLCBA,CBA       :OUTPUT USING CBA
        LHI     R2,0A0          :LOAD BLANK BACK
        STH     R2,CBAFIL       : AND SAVE AS FILL CHAR.
        JR      R7      : === RETURN ===

PRNT3   HC      3
PRNT5   HC      5
PRNTFC  HC      $A600   :FASTC RATE 600/SEC.
        SUBTTL  CODE AND DATA SECTION   (INITIALIZATION)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                        I N I T I A L I Z A T I O N                        ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:       BRING HOST UP
      IF        ISIS2
:       ANSWER HOST MESSAGE (SC FORMAT)

        SEG     A.DATA
        BND     2
        BS      1               :FILLER TO ALIGN HW'S
ANSMSG  BC      $A 12           :LENGTH OF MESSAGE
        BC      10,0             :MSG TYPE / KEY
ANSHST  HS      1               :HOST #
ANSPRT  HS      1               :# PORTS
ANSRHN  HC      0               :RELATIVE HOST 
        BC      04              :HOST STATUS = ANSWERED+MULTI BASE HOST KEY
        BC      MULHST          :MULTI BASE HOST KEY
        HC      PRODID          :PRODUCT ID

        SEG     A.CODE
START   LIS     R12,MAXHST-1
STA005  LHL     R0,HOSTS,R12,R12      :GET HOST 
        STH     R0,ANSHST       :PUT IT IN MSG
        LHL     R0,PORTS,,      :GET # OF PORTS
        NHI     R0,1FF          :EXTRACT # PORTS
        STH     R0,ANSPRT       :PUT IT IN MSG
        STH     R12,ANSRHN      :SAVE RELATIVE HOST NUMBER
        LIS     R2,0            :SEND TO PORT 0
        LA      R3,ANSMSG       :ADDR OF MSG
        JAL     R5,OCM          :OUTPUT MSG
        SIS     R12,1
        JGE     STA005
      ELSE

START   LHL     R0,UPDOWN       :SET HOST ANSWERED
        NHI     R0,3FFF
        STH     R0,UPDOWN
      EI

        LIS     R0,0
        LHI     R1,END0-START0-2
STA010  STH     R0,START0,R1            :INIT TO ZERO
        SIS     R1,2
        JGEBS   STA010                  :ZERO ENTIRE AREA
        LIS     RBCBA,0                 : BUILD OUTPUT PORT NUMBER
        LIS     RADX,0A                 :  STRINGS USING CBA ROUTINE
        LA      RACBA,CPORTO
        LHI     R2,0B0                  : CHANGE FILL TO ZERO
        STH     R2,CBAFIL
STA015  LIS     RSCBA,3                 : FIELD SIZE
        JAL     RLCBA,CBA               : GO DO IT
        LHI     R2,0A0                  : GET A SPACE
        STB     R2,3,RACBA              : USE AS FILL
        AIS     RACBA,4                 : ADVANCE POINTER
        AIS     RBCBA,1                 : BUMP PORT NUMBER
        CLHI    RBCBA,NPORT             : HAVE WE REACHED MAX?
        JLBS    STA015                  : LOOP IF MORE
        LHI     R2,0A0                  : USE A BLANK TO
        STH     R2,CBAFIL               : RESTORE FILL CHARACTER

        LCS     R0,1
        STH     R0,LISTPT               :INIT LIST PORT # = NONE
        SUBTTL  CODE AND DATA SECTION   (INPUT FROM ISIS)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                       I N P U T   F R O M   I S I S                       ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

INPUT   EQ      .
        LH      R4,LOGBP        :ANY LOGING BP'D?
        JE      INPUT4          :NO, SKIP NEXT TESTS
        LHI     R1,NPORT-1      :GET HIGHEST PORT
INPUT1  TBT     R1,LOGBPA       :WAS IT BP'D?
        JEFS    INPUT3          :YES, TEST FOR BP RELEASED
INPUT2  SIS     R1,1            :TRY NEXT PORT
        JGBS    INPUT1          :IF NO PORTS REMAIN
:::     STH     R1,LOGBP        :RESET BP FLAG
        J       INPUT4          :CONTINUE WITH INPUT

INPUT3  TBT     R1,BKPRSR       :BACKPRESSURE GONE
        JEBS    INPUT2          :NO TRY NEXT
        LB      R12,LOGINX,R1   :SET INDEX
        LH      R13,PKEY,R1,R1  :SET START
        SBT     R1,LOGBPA       :RESET BACK PRESSURED LOGIN
        J       INDAP0          :CONTINUE WITH THE LOGIN

INPUT4  EQ      .
        JAL     R4,LOOK         :ANYTHING FROM ISIS ?
        J       OUTPUT          :NOPE, DO ISIS OUTPUT (RING EMPTY)
        JN      INEEDL          :JUMP NOT INTRA-NODE COM (RING NOT EMPTY
:                                 R1=PORT#,R2=MSGTYPE,CC=STAT(R1))
:       INTRA-NODE COM - EAT IF ALLOWED, ELSE CRASH
      IF        ISIS2
        CLHI    R2,9            :PSEUDO NEEDLE REJECT?
      ELSE
        CLHI    R2,0A           :AUX CIRCUIT REJECT?
        JE      PSNRJT          :IF SO
        CLHI    R2,8            :NORM CKT REJECT?
      EI
        JE      PSNRJT          :IF SO
        CLHI    R2,NOSTYPE-1    :CHECK FOR MAX SUBTYPE
        JGFS    IIND10          :CRASH IF ILLEGAL SUBTYPE
        LB      R0,INODTS,R2    :ALLOWED TO EAT ?
        LR      R0,R0
        JEFS    IIND10          :NOPE, CRASH
        JAL     R4,FLUSH        :EAT
        J       INPUT           :CHECK INPUT AGAIN

IIND10  JAL     R10,CRASH       :CRASH, CFROM GIVES MSG TYPE
        BC      0,0,R2*4,CCINOD

INEEDL  CLHI    R1,NPORT       :TOO MANY PORTS ASSIGNED ?
        JLEFS   INED05          :JUMP IF NOT

        JAL     R10,CRASH       :CRASH, CFORON GIVES ISIS PORT NUMBER
        BC      0,0,R1*4,CCMXPT

INED05  LR      R2,R2           :NEEDLE (0) ?
        JN      IDATA           :JUMP IF NOT
:       NEEDLE - IF ALREADY CONNECTED, CRASH
        JAL     R4,GETH         :GET ADDITIONAL LENGTH
        LR      R3,R0           :SAVE
        JAL     R4,GETW         :EAT INVOICE #
      IF        MAXHST-1
        JAL     R4,GETH         :GET DEST HOST #
        LHI     R10,MAXHST-1
INED06  LHL     R11,HOSTS,R10,R10       :FIND HOST IN TABLE
        CR      R11,R0
        JEFS    INED08          :IF THIS HOST
        SIS     R10,1
        JGEBS   INED06          :IF MORE TO CHECK
        LHI     R10,MAXHST      :SET TO ONE GREATER
INED08  STB     R10,APATX,R1    :STORE DATAPATTERN ADDITION
        JAL     R4,GETH         :GET ORIG NODE
      ELSE
        JAL     R4,GETW         :EAT DEST HOST / ORIG NODE
      EI
        STH     R0,ORIG,R1,R1   :STORE ORIG NODE
      IF        ISIS2
        JAL     R4,GETW         :EAT ORIG HOST / ORIG PORT
        JAL     R4,GETW         :EAT XXX
      EI
        JAL     R4,GETH         :EAT ORIG PORT (DIALECT CODE IN ISIS2)
        JAL     R4,GETCH        :GET TID
        LIS     R2,0F           :MASK OFF 
        NR      R2,R0
        LHL     R2,CPMTBL,R2,R2 :R2 = MAXCPM FOR LOGIN
        LH      R0,MAXCPM,R1,R1 :IS MAXCPM SET?
        JEFS    .+8             :IF NO, FORCE SETTING
        TBT     R1,AUTO         :ELSE SKIP IF AUTO PORT
        JNFS    .+8             :ASSUME "S" COMMAND ISSUED PRIOR TO LOGIN
        STH     R2,MAXCPM,R1,R1 :SET MAXCPM OBTAINED FROM TID
        LR      R0,R3
      IF        ISIS2
        SHI     R0,13           :REMOVE BYTES READ FROM COUNT (19d)
      ELSE
        SIS     R0,0B           :REMOVE BYTES READ FROM COUNT (11d)
      EI
        JAL     R4,FLUSH        :EAT REMAINDER OF NEEDLE
        LA      R12,PORMSG      :PORT MSG FOR BOSS
INED10  LR      R7,R1           :SAVE PORT #
        LIS     RADX,$A10       : SET RADIX
        LA      RACBA,1,R12     : SET ADDRESS FOR STRING
        LIS     RSCBA,3         : SET LENGTH FOR STRING
        JAL     RLCBA,CBA       :CONVERT BINARY TO ASCII
        LHL     R2,BOSSP        :GET BOSS PORT NUMBER
        JEFS    INED15          :SKIP IF NO BOSS
        LR      R3,R12
        JAL     R5,OCS          :TELL USER WHICH PORT
        LHL     R8,MAKCNT       :TEST FOR LAST ONE MADE ?
        JNFS    INED15          :NO, SKIP OUTPUT
        LIS     R8,0            :SET DISPLACMENT
        JAL     R4,LOGLIN       :PRINT LOG-LINE

INED15  LR      R1,R7
        SBT     R1,APORT        :SET PORT ACTIVE
        JEFS    INED20          :JUMP WAS'NT ACTIVE

        JAL     R10,CRASH       :CRASH, CFROM GIVES ISIS PORT NUMBER
        BC      0,0,R1*4,CCDUPT

INED20  SBT     R1,BKPRSR       :RESET BACKPRESSURE
        RBT     R1,TRSYNC       :TRACE NOT SYNCHRONIZED
        LIS     R0,1
        AHM     R0,NAPRTS       :INC # ACTIVE PORTS
        LIS     R0,0
        STB     R0,CPATX,R1     :RESET PATTERN OUTPUT INDEX
        STB     R0,IPATX,R1
        LR      R7,R1           :COPY PORT NO.
        SLHLS   R1,1            :MAKE HALFWORD INDEX
        STB     R0,CPORTI,R1,R1 : NULL OUT INPUT PORT # STRING
        STB     R0,CPORTI+1,R1,R1
        STB     R0,CPORTI+2,R1,R1
        STB     R0,CPORTI+3,R1,R1
        LHL     R3,LIFTIM
        STH     R3,ZAPTIM,R1    :INIT CIRCUIT LIFETIME
        LIS     R3,1
        TBT     R7,AUTO         :SKIP IF AUTO PORT
        JN      INED22
        RBT     R7,PORTON       :SET PORT OFF
        RBT     R7,REPON        :SET REPORT OFF
        RBT     R7,TRCEON       :TRACING OFF
        RBT     R7,PRTDAT       :SET OUTPUT PORT DATA OFF
        RBT     R7,PORTEC       :SET PORT ECHO DATA OFF
        STH     R0,CPS,R1       :INIT CPS OFF
        STH     R0,CPM,R1       :INIT CPM OFF
        STH     R3,BURST,R1     :INIT BURST SIZE 
        STH     R0,ROMIN,R1     :INIT REAL OUTPUT FOR MINUTE
INED21  STH     R0,ERRCNT,R1    :INIT ERROR COUNT
        RBT     R7,TRSYNC       :INIT NOT SYNCHED
        SLHLS   R1,1            :MAKE WORD INDEX
        ST      R0,TIMIN,R1     :INIT TOTAL INPUT FOR REPORT INTERVAL
        ST      R0,TOMIN,R1     :INIT TOTAL OUTPUT FOR REPORT INTERVAL
        ST      R0,ICHAR,R1     :INIT INPUT CHAR CNTR
        ST      R0,OCHAR,R1     :INIT OUTPUT CHAR CNTR

        LHL     R0,BOSSP        :BOSS PORT CONNECTED ?
        JE      POTBSS          : NOPE, COULD BE BOSS
     IF \PRTANS
     IF PRTANS
        CR      R0,R7           : IS THIS BOSS PORT
        JE      INPUT           : YES, CHECK INPUT AGAIN
        LR      R2,R7           : SEND <CR><LF> ON PORT
        LA      R3,CRLFMS
        JAL     R5,OCS
        LR      R2,R7
        LA      R3,PORMSG       : SEND PORT MESSAGE TO PORT
        JAL     R5,OCS
        J       INPUT           : BACK TO CHECK INPUT
CRLFMS  SC      /"8D"8A/
        REMARK %PORT REPLY ENABLED.
     ELSE
        J       INPUT           : CHECK INPUT AGAIN
     EI
     ELSE
        J       INPUT           : CHECK INPUT AGAIN
     EI

:       NEW POTENTIAL BOSS - SAY HI
POTBSS  SRHLS   R1,2            :GET ISIS PORT NO.
        LB      R2,APATX,R1     :GET HOST ORDINAL
        LR      R2,R2           :FIRST HOST?
        JN      INPUT           :BOSS ONLY FOR 1ST HOST
        STH     R1,BOSSP        :SAVE BOSS ISIS PORT NO.
        RBT     R1,APORT        :MARK INACTIVE FOR LIST, REPORT, ETC.
        LR      R2,R1           :COPY PORT NUMBER
        LA      R3,MSGHI
        JAL     R5,OCS          :SAY HI
        TS      SMPASS          :SET SAME-PASSWD FLAG TO NOT AVAILABLE
        LA      R3,CSTART       :INIT CMND PROCESSOR
        ST      R3,CMNDAD
        J       INPUT           :CHECK INPUT AGAIN
INED22  TBT     R7,PORTEC       :IF ECHO IS SET
        JNFS    .+6             : LEAVE IT OFF
        SBT     R7,PORTON               :TURN PORT ON
        LHL     R6,CPS,R1       :ASSUMES "C" COMMAND ALREADY ISSUED
        JAL     R9,CCPS10       :SET UP R0MIN
:                               :DISTROYS R4,R5, NEEDS:
:                               :R6=CPS,  R7=PORT #
        J       INED21

:       MAX CPM FOR TID'S
CPMTBL  HC      $A 512*60       :0 AUX CIRCUIT
        HC      $A 30*60        :1 300 BPS A
        HC      $A 30*60        :2 300 BPS C
        HC      $A 30*60        :3 300 BPS E
        HC      $A 30*60        :4 300 BPS G
        HC      $A 15*60        :5 150 BPS B
        HC      $A 15*60        :6 150 BPS F
        HC      $A 120*60       :7 1200 BPS J
        HC      $A 512*60       :8 UNUSED
        HC      $A 15*60        :9 2741
        HC      $A 10*60        :A 110 BPS D
        HC      $A 512*60       :B HSA
        HC      $A 120*60       :C 1200 BPS
        HC      $A 512*60       :D UNUSED
        HC      $A 512*60       :E UNUSED
        HC      $A 512*60       :F UNUSED


MSGCE   SC      / ? (H for help)"8D"8A/
MSGCE1  SC      / A value was given, but not expected, please retry."8D"8A/
MSGCE2  SC      / Command not recognized."8D"8A/
MSGCE3  SC      / Port# or Parameter out of range."8D"8A/
MSGCE4  SC      /"8D"8A ESCape detected"8D"8A/
MSGCE5  SC      / No data for message."8D"8A/
MSGCE6  SC      / Trace disabled on echoing port<s>."8D"8A/
     IF ANYMSG
     ELSE
MSGCE6  SC      / Non-text messages not allowed."8D"8A/
     EI
MSGH0   BS      0               :Help message start at a byte.
        SC      /Help summary:"8D"8A/
        SC      /  H0 or H - This summary."8D"8A/
        SC      /  H1 - Help commands in general."8D"8A/
        SC      /  H2 - Help commands for building circuits."8D"8A/
        SC      /  H3 - Help commands for reports (R command)."8D"8A/
MSGHE0  EQ      .               :END OF 1ST HELP MESSAGE
MSGH1   BS      0               :START OF 2ND MESSAGE
        SC      /Commands are input in the format: C[value][,beg port[,endport]]<cr>"8D"8A/
        SC      /  (Parameters enclosed by brackets are optional, if applicable.)"8D"8A/
        SC      /CMD  V RANGE  OPERATION"8D"8A/
        SC      /B    1-157    Set burst size (0 or none = 157)"8D"8A/
        SC      /C    1-65535  CPS (0 or none = output bursts continuously)"8D"8A/
        SC      /D    none     Rebuild circuit when zapped    (E to cancel)"8D"8A/
        SC      /E    none     Rebuild off                    (D to start)"8D"8A/
        SC      /F    0-1      Output off                     (N for on)"8D"8A/
        SC      /I    1-32767  Report interval in secs (0 or none = use previous)"8D"8A/
        SC      /K    1-32767  Kill port after # secs (0 or none = do not kill)"8D"8A/
        SC      /L    0-1      List port parameters."8D"8A/
        SC      /N    0-2      Output test data to a port.    (F for off)"8D"8A/
        SC      /              (0=Normal,1=With port #,2=Echo input)"8D"8A/
        SC      /O    none     Automatic output on port   (cancel with F)"8D"8A/
        SC      /P    0-2      Maintains ISIS message for X-cmd."8D"8A/
        SC      /                (Command uses no port specifications.)"8D"8A/
        SC      /Q    none     Quit, zaps all ports and exits."8D"8A/
        SC      /S    1-32767  Max CPS for terminal  (initialized by TID)"8D"8A/
        SC      /T    none     Trace - verify loopback input  (U to stop)"8D"8A/
        SC      /U    none     Untrace - stop verification (W,T to start)"8D"8A/
        SC      /V    ignored  Version and 1st host number displayed"8D"8A/
        SC      /W    none     Time trace - report pattern round-trip time (U to stop)"8D"8A/
        SC      /X    none     Send ISIS message on port."8D"8A/
        SC      /Z    none     Zap port"8D"8A/
MSGHE1  EQ      .               :END OF 2ND MESSAGE
MSGH2   SC      /Building Circuits"8D"8A"8D"8A/
        SC      /In order to build one or more circuits you must enter at least"8D"8A/
        SC      /three (3) lines."8D"8A/
        SC      /#1:  Axx        Mxx           Where xx=# of circuits to be built"8D"8A/
        SC      /#2:  user:sys   user:sys"3Bpass user=user name, sys=system or"8D"8A/
        SC      /                                  host #, pass=password."8D"8A/
        SC      /#3:  inital-log inital-log    This is the initial logon string"8D"8A/
        SC      /The initial logon string may contain <CR>s and must be <= 63"8D"8A/
        SC      /characters long.  Your logon string must be terminated with"8D"8A/
        SC      /a control-Z, even if null."8D"8A/
MSGHE2  EQ      .               :END OF 3RD MESSAGE
MSGH3   SC      /Report selection command formats:"8D"8A/
        SC      /    Ra[,b[,c]]  selects reports numbered a, b and c. (This is cumulative)"8D"8A/
        SC      /    R0 clears all reports.  (NO reports selected)"8D"8A/
        SC      /    R selects all reports.  (1 - 6)"8D"8A/
        SC      /"8D"8A/
        SC      /Each line of the following example is controlled by the report number"8D"8A/
        SC      /enclosed in [brackets]."8D"8A/
        SC      /PORT ICPS OCPS    ICHAR    OCHAR   ERR TRSYNC                 [1]"8D"8A/
        SC      /  62   50   50     1550     1550     0  off                   [2]"8D"8A/
        SC      /Total CPS=   204, Avg CPS=   102                              [3]"8D"8A/
        SC      /I"2FO chars: In=      3101, Out=      3103                                [4]"8D"8A/
        SC      /Traces: Total=  224, Avg time=  0.023, Peak time=  0.053 sec. [5]"8D"8A/
        SC      /Logons: Total=    5, Avg time=  5.961, Peak time=  6.438 sec, [6]"8D"8A/
        SC      /       Failed= 2"8D"8A/
MSGHE3  EQ      .               :END OF 4TH MESSAGE
MSGHET  WC      MSGHE0     :THIS IS AN "END TABLE"
        WC      MSGHE1
        WC      MSGHE2
        WC      MSGHE3
MSGSZ0  HC      MSGH0-MSGHE0                    :NEGITIVE INDEX=SIZE
        HC      MSGH1-MSGHE1
        HC      MSGH2-MSGHE2
        HC      MSGH3-MSGHE3
MSGHMX  EQ      3               :MAX HELP # ALLOWED
RPTMAX  EQ      6               :MAX REPORT (R6) # ALLOWED

ACTPMG  SC      /List of Active Ports."8D"8A/
AUTPMG  SC      /List of Inactive Ports with Auto Output Set."8D"8A/
LSTHDR  SC      / PORT ORIG BURST   CPS   ZAP MAXCPM OUTPUT REPORT AUTO TRACE REBUILD OUTDAT"8D"8A/
ONOFF   AC      / onoff/

::  MACRO TO INSERT HOST NUMBER INTO MESSAGE
MHNO    MACRO(HOST)[
Q       EQ      HOST/$A1000             CONVERT HOST NUMBER TO ASCII
QQ      EQ      HOST-(Q*$A1000)
QF	EQ	0			FLAG FOR LEADING 0 SUPPRESS
        IF      Q
        BC      0B0+Q
QF	EQ	1
        EI
Q       EQ      QQ/$A100
QQ      EQ      QQ-(Q*$A100)
        IF      Q!QF
        BC      0B0+Q
QF	EQ	1
        EI
Q       EQ      QQ/$A10
QQ      EQ      QQ-(Q*$A10)
        IF      Q!QF
        BC      0B0+Q
        EI
        BC      0B0+QQ
]
::    MACRO TO INSERT VERSION/REVISION LEVELS INTO MESSAGE
MVNO    MACRO(VN,RN)[
        IF      VN/8
        BC      0B0+(VN/8)
        EI
        BC      0B0+VN-((VN/8)*8)
        AC      /./
        BC      0B0+(RN/8)
        BC      0B0+RN-((RN/8)*8)
]
::   RESPONSE TO VERSION NUMBER REQUEST
        HC      MSGVRC                  :FAKE SC FORMAT
MSGVR   EQ      .-1
        AC      /Version /
        MVNO(VERSION,REVLEV)            :VERSION NUMBER
        AC      /"3B /
        IF      BHOST                   :IF BOSS HOST
        AC      /Hosts are /
        MHNO(BHOST)                     : BOSS HOST NUMBER
        AC      / and /
        ELSE
        AC      /Host is /
        EI
        MHNO(HOSTNO)                    :HOST NUMBER
        AC      /"8D"8A/
MSGVRC  EQ      .-(MSGVR+1)

::   BOSS PORT GREETING MESSAGE
        HC      MSGHIC                  :FAKE SC FORMAT
MSGHI   EQ      .-1
        AC      /"8D"8A"8D"8ATHROUGHPUT TESTING HOST/
        IF      BHOST                   :IF BOSS HOST
        AC      /S /                    : TWO HOST #'S
        MHNO(BHOST)                     : BOSS PORT
        AC      /, /                    : AND
        ELSE
        AC      / /
        EI
        MHNO(HOSTNO)                    :HOST NUMBER
        AC      /"3B VERSION /          :AND
        MVNO(VERSION,REVLEV)            :VERSION NUMBERS
        AC      /"8D"8A/
MSGHIC  EQ      .-(MSGHI+1)

        SEG     A.DATA
SAVE10  WS      1               :SAVE AREA FOR REG 10
SAVE11  WS      1               :SAVE AREA FOR REG 11

LISTFL  HS      1               :LIST TYPE FLAG (ACTIVE/AUTO)
LISTPT  HS      1               :CURRENT LIST PORT# (-1 = NONE)
LISTBG  HS      1               :BEGINING LIST PORT #, LAST TO BE LISTED

LSTDTA  SC      /  PNO ORIG   BUR CPSXX ZAPXX  MXCPM  OUT    REP   AUT   TRA    REB    PTD"8D"8A/
CECHOF  HS      1               :FLAG FOR PASSWORD ECHOING
        SEG     A.CODE

:       INTRA-NODE MSG CONTROL TABLE
:               0       CRASH IF MSG RECEIVED
:               ELSE    BYTE COUNT TO EAT (NOT INCLUDING RPORT)
:               SEE SECT. 2.3 IN ISIS-II MANUAL

INODTS  BC      0               :00 - VOLUNTARY INTERFACE DISC
        BC      1               :01 - RESTART INTERFACE
        BC      1               :02 - NODE TAKEN OVER
        BC      0               :03 - REPORT TO SUP LOG
        BC      0               :04 - REPORT HOST STATUS
        BC      0               :05 - REPORT ACCOUNTING
        BC      6               :06 - TELL HOST TIME
        BC      0               :07 - ORIGINATE NORMAL CIR PSEUDO-NEEDLE
      IF        ISIS2
        BC      0               :08 - ORIGINATE AUX CKT
        BC      0               :09 - CAN'T PROVIDE PSEUDO NEEDLE
        BC      0               :0A - REPORT HOST AVAILABILITY
        BC      0               :0B - HOST UNACCEPTABLE
        BC      0               :0C - REPORT HOST COST
      ELSE
        BC      0               :08 - CAN'T PROVIDE NORMAL CIR PSEUDO-NEEDLE
        BC      0               :09 - ORIGINATE AUXILIARY CIRCUIT
        BC      5               :0A - CAN'T PROVIDE AUXILIARY CIRCUIT
      EI
NOSTYPE EQ      .-INODTS        :# OF SUBTYPES
        SUBTTL  CODE AND DATA SECTION   (DATA MSG REVEIVED)
:       DATA MSG - GIVE TO INPUT COMMAND PROCESSOR IF BOSS
:                  ELSE COUNT INPUT AND FLUSH
:
:       THE INPUT COMMAND PROCESSOR DOES A 'JALR R5,R11'
:       TO GET EACH CHARACTER AS IT COMES IN.  A NEEDLE INITIALIZES
:       US TO RETURN TO THE COMMAND PROCESSOR THE 1ST CHARACTER.
:       REG CONVENTIONS ARE:
:               R0      CHARACTER INPUT TO CMND PROCESSOR
:               R1      ISIS PORT NUMBER
:               R2-R5   UNSAVED CMND PROCESSOR REGS
:               R6-R7   CMDN PROCESSOR REGS SAVED BETWEEN CHAR CALLS
:               R8-R10  UNSAVED COMND PROCESSOR REGS
:               R11     CHAR INPUT RET ADDR USED BY COMMAND PROCESSOR
:               R12     CHARACTERS REMAINING IN RECORD (INCLUDING CURRENT CHAR)
:               R13-R15 UNSAVED CMND PROCESSOR REGS

:               AS WE START HERE R1= PORT#(NOT = 0), R2= MSGTYPE(NOT = 0)

IDATA   CLHI    R2,FIRST        :DATA MSG ?
        JGE     INDATA          :JUMP IF NOT
:                        THEREFORE WE HAVE ISIS DATA OF LENGTH R2
        CLH     R1,BOSSP        :BOSS ?
        JE      IDAT05          :YEP, JUMP

        LR      R8,R1           :COPY PORT NO.
        TBT     R1,APORT        :PORT ACTIVE?
        JN      IDATA1          :YES
        TBT     R1,PSNEDL       :RECEIVED PSEUDO-NEEDLE?
        JE      IDATA2          :NO, FLUSH DATA

        LHL     R1,BOSSP        :CHECK BOSS PORT
        JE      IDATA2          :SKIP IF NO BOSS

:       SEND MESSAGE TO BOSS
        LHI     R0,3,R2         :COMPUTE MSG BYTE COUNT
        JAL     R4,SLOR         :START OUTPUT RECORD
        JAL     R4,GETCH        :FLUSH MSG TYPE

IDATA0  JAL     R4,GETCH        :GET CHAR FROM IRING
        JAL     R4,PUTCH        :PUT IT IN ORING
        SIS     R2,1            :DEC BYTE COUNT
        JGBS    IDATA0          :COPY ALL CHARS IN MSG

        JAL     R4,ELIR         :END INPUT
        JAL     R4,ELOR         :END OUTPUT
        J       INPUT           :GO CHECK INPUT AGAIN

IDATA1  SLHLS   R1,1            :MAKE HALFWORD INDEX
:               NOTE R2 = DATA LENGTH.
        AM      R2,TIMIN,R1,R1  :UPDATE INPUT FOR THIS INTERVAL
        AM      R2,ICHAR,R1,R1  :COUNT INPUT CHARS
        AM      R2,PDCIN        :UPDATE PERIOD CHAR IN
        TBT     R8,PORTEC       :ECHO DATA ON THIS PORT ?
        JNFS    IDATA3          : YES, DO IT
        TBT     R8,TRCEON       :TRACING ON FOR THIS PORT?
        JN      ITRACE          :YES, DO IT
IDATA2  LHI     R0,1,R2         :MAKE BYTE CNT TO FLUSH
        JAL     R4,FLUSH        :FLUSH
        J       INPUT           :GO CHECK INPUT AGAIN
IDATA3  AM      R2,TOMIN,R1,R1  :UPDATE CHARACTER COUNTS
        AM      R2,OCHAR,R1,R1
        AM      R2,PDCOUT       :UPDATE PERIOD CHARACTER OUT
        SRHLS   R1,1            :RESTORE R1 TO PORT #
        LHI     R0,3,R2         :SPACE REQIRED FOR MESSAGE
        JAL     R4,SLOR         :START MESSAGE
        JAL     R4,GETCH        :FLUSH COUNT
IDATA4  JAL     R4,GETCH        :GET INPUT CHARACTER
        JAL     R4,PUTCH        :ECHO IT BACK
        SIS     R2,1            :DECREMENT COUNT
        JGBS    IDATA4          :LOOP IF MORE
        JAL     R4,ELIR         :END INPUT
        JAL     R4,ELOR         :END OUTPUT
        J       INPUT           :BACK FOR MORE

ITRACE  JAL     R4,GETCH        :GET COUNT
        LR      R6,R0           :USE AS COUNTER
        LB      R7,IPATX,R8     :INPUT PATTERN INDEX
ITRC1   JAL     R4,GETCH        :DATA CHAR
        LB      R5,APATX,R8     :GET PATTERN ADDITION
      IF        SNDORD          :IF ONLY ORD WAS SENT
        CLR     R0,R5
      ELSE
        LH      R10,CWCELL      :TRACE TIMING ENABLED?
        JGEFS   ITRCW2          :NO
        CLHI    R7,CPATMX-4     :EXPECTING FASTC LOOP-BACK?
        JGE     ITRCW4          :YES - DON'T COMPARE TO PATTERN
ITRCW2  CLHI    R0,8D
        JE      ITRC1A          :IF CR
        CLHI    R0,8A
        JE      ITRC1A          :IF LF
        CLHI    R7,5            : IF PORT # PART OF PATTERN
        JG      ITRC1B
        CLHI    R7,2
        JL      ITRC1B
        LR      R4,R8           : COMPARE INPUT TO PORT PTN
        SLLS    R4,2
        CLB     R0,CPORTI-2,R4,R7
        JE      ITRC1C          : BRANCH IF OKAY
        LIS     R9              : IF NO MATCH
        CLB     R9,CPORTI-2,R4,R7       : IF PATTERN IS NOT NULL
        JN      ITRC2                   : THEN ERROR
        STB     R0,CPORTI-2,R4,R7       : ELSE SET UP PATTERN
        JFS     ITRC1C                  :      WITH NO ERROR LOGGED
ITRC1B  SR      R0,R5
ITRC1A  CLB     R0,CPATRN,R7    :IS IT RIGHT?
      EI
        JN      ITRC2           :NO, PROCESS ERROR (MAY BE OUT OF SYNC)
ITRC1C  SBT     R8,TRSYNC       :PORT IN SYNC
ITRCW4  AIS     R7,1            :INCREMENT INDEX
        LH      R10,CWCELL      :TRACE TIMING ENABLED?
        JGEFS   ITRC12          :NO
        LR      R10,R7          :PATTERN INDEX
        SHI     R10,CPATMX-3    :WITHIN 4 OF MAX? (FASTC)
        JL      ITRC4           :NO - CONTINUE WITH NORMAL PATTERN
        LR      R11,R8          :PORT NUMBER
        SLHLS   R11,2           :4 * PORT NUMBER
        STB     R0,CWHOLD,R11,R10 :HOLD NEXT BYTE OF FASTC INPUT
ITRC12  CLHI    R7,CPATMX       :MORE EXPECTED THIS PATTERN?
        JL      ITRC4           :YES
        LH      R10,CWCELL      :TIMING ENABLED?
        JLFS    ITRC16          :YES - COMPUTE FASTC ROUND-TRIP TIME
ITRC14  LIS     R7,0            :END OF PATTERN - RESET INDEX
        J       ITRC4
ITRC16  L       R7,FASTC,,      :DIFFERENCE BETWEEN CURRENT FASTC AND
        S       R7,CWHOLD,R11   : LOOPED-BACK FASTC IS FASTC ROUND-TRIP TIME
        AM      R7,CWTIMT       :INCREMENT TOTAL TIME
        LIS     R0,1
        AHM     R0,CWTIMN       :INCREMENT NUMBER OF OCCURRENCES
        CLH     R7,CWTHWM       :HIGH-WATER MARK EXCEEDED?
        JLEBS   ITRC14          :NO
        STH     R7,CWTHWM       :YES - STORE NEW HWM
        J       ITRC14

ITRC2   RBT     R8,TRSYNC       :OUT OF SYNC
        JE      ITRC4           :NOT AN ERROR IF IT WAS ALREADY OUT OF SYNC
        LIS     R4,1
        AHM     R4,ERRCNT,R8,R8 :INCR LOOPBACK ERROR COUNT
        STM     R14,CSAVE       :SAVE RING STUFF
        LIS     RADX,$A10
        LA      RACBA,ERRMSG+$A22
        LIS     RSCBA,3
        LR      RBCBA,R8
        JAL     RLCBA,CBA       :PORT NUMBER TO DECIMAL ASCII

        LHI     RADX,10         :HEX RADIX
        AHI     RACBA,$A26      :RECEIVED FIELD (#3)
        LIS     RSCBA,2
        LR      RBCBA,R0
        JAL     RLCBA,CBA       :CONVERT INPUT DATA TO HEX ASCII

        SIS     RACBA,$A12      :EXPECTED FIELD (#2)
        LIS     RSCBA,2
        CLHI    R7,5            : IF PATTERN INDEX IN PORT # RANGE
        JGFS    ITRC2C
        CLHI    R7,2
        JLFS    ITRC2C
        LR      R2,R8           : GET EXPECTED CHARACTER FROM PORT #
        SLLS    R2,2            : STRINGS
        LB      RBCBA,CPORTI-2,R2,R7
        STB     R0,CPORTI-2,R2,R7       : AND REPLACE WITH NEW
        JFS     ITRC2B
ITRC2C  LB      RBCBA,CPATRN,R7
        LB      R5,APATX,R8
      IF        SNDORD  :IF SENDING ORDINAL ONLY
        LR      RBCBA,R5
      ELSE
        CLHI    RBCBA,8D
        JEFS    ITRC2B          :IF CR
        CLHI    RBCBA,8A
        JEFS    ITRC2B          :IF LF
        SR      RBCBA,R5
ITRC2B  HS
      EI
        JAL     RLCBA,CBA       :CONVERT EXPECTED DATA TO HEX ASCII

        LHL     R2,BOSSP
        JEFS    ITRC2A          :SKIP IF NO BOSS
        LA      R3,ERRMSG
        JAL     R5,OCS          :WRITE ERROR MSG
ITRC2A  LM      R14,CSAVE       :GET BACK RING STUFF
ITRC3   LIS     R7,0            :START SEARCHING FOR FIRST CHAR

ITRC4   SIS     R6,1
        JG      ITRC1
        STB     R7,IPATX,R8     :SAVE NEW INDEX
        JAL     R4,ELIR
        J       INPUT

        SEG     A.DATA
ERRMSG  SC      /Loopback error: port xxx  expected:xx received:xx"8D"8A/
        SEG     A.CODE

:                       NOTE  FOUND NOT(DATA MSG) AND (BOSS PORT)
IDAT05  JAL     R4,GETCH        :READ PAST MSG TYPE (CNT)
        LR      R12,R2          :COPY CHAR CNT
        L       R5,CMNDAD       :GET ADDR LAST CALL FOR CHAR
        L       R6,CMNDR6       :RESTORE SAVED REGS
        L       R7,CMNDR7

IDAT10  JAL     R4,GETCH        :GET A CHAR
        LHL     R1,BOSSP        :SET BOSS PORT ALWAYS
        STM     R14,CSAVE       :SAVE RING REGS
:  NOTE NEXT COMMAND SETS UP R11 TO BE USED BY ALL OTHER
:       ROUTINES WHEN THEY WANT AN INPUT CHARACTER.
        JALR    R11,R5          :GIVE TO CMND PROCESSOR
        LM      R14,CSAVE       :RESTORE RING REGS
        SIS     R12,1           :DEC CNT FOR THIS RECORD
        JNBS    IDAT10          :JUMP MORE IN RECORD

        JAL     R4,ELIR         :END INPUT RECORD
        ST      R5,CMNDAD       :SAVE LAST CALL FOR CHAR ADDR
        ST      R6,CMNDR6       :SAVE REGS
        ST      R7,CMNDR7
        J       INPUT           :CHECK INPUT AGAIN

:       NON-DATA MSG - FAN OUT BY TYPE
INDATA  CLHI    R2,MAXTYP       :TYPE IN OUR TABLE ?
        JGFS    INDCRH          :JUMP TO CRASH IF NOT
        LHL     R3,INDFAN-FIRST*2,R2,R2
        J       SEG1,R3         :FAN OUT

:       NON-DATA UNKNOWN - CRASH
INDCRH  JAL     R10,CRASH       :CRASH, CFROM HAS MSG TYPE
        BC      0,0,R2*4,CCINDT

:       ORANGE BALL - IF YELLOW BALL OUT, CONNECT INPUT AGAIN
INDORN  CLH     R1,BOSSP        :IS THIS BOSS ?
        JNFS    INDEAT          :GO EAT IF NOT
        L       R0,CYBTIM       :YELLOW BALL OUT ?
        JEFS    INDEAT          :NOPE, EAT
        LIS     R0,0            :RESET YELLOW BALL OUT
        ST      R0,CYBTIM
        LA      R0,CSTART       :CONNECT INPUT PROCESS
        ST      R0,CMNDAD

:       NON-DATA DON'T CARE - EAT
INDEAT  LB      R0,INDSIZ-FIRST,R2      :GET MSG SIZE
        JAL     R4,FLUSH        :EAT IT
        J       INPUT           :CHECK INPUT AGAIN

:       GREEN BALL - REFLECT FOR NONBOSS PORT
        IF      RECHO
        REMARK %GREEN BALLS REFLECTED ON NONBOSS PORTS
INDGB   CLH     R1,BOSSP
        JE      INDEAT
        JAL     R4,ELIR
        LHI     R2,GBMSG
        LIS     R0,3
        JAL     R4,SLOR
        JAL     R4,ELOR
        J       INPUT
        ELSE
        REMARK %GREEN BALLS NOT REFLECTED
        EI


:       PSEUDO-NEEDLE REJECT  00/09 CODE FROM ISIS
PSNRJT  JAL     R4,GETH         :SUBTYPE / KEY
        JAL     R4,GETH         :LOCAL KEY
:       SET LOGON TO FAILED FOR TIMING PURPOSES
        LIS     R4,1            : / UPDATE THE NUMBER
        AHM     R4,RPTFAL       :/ OF FAILED LOGINS
        LH      R4,MAKCNT       :GET # LEFT TO MAKE
        JEFS    PSNRJ3          :SKIP IF ALL DONE

        SIS     R4,1            :UPDATE THE NUMBER LEFT TO MAKE
        STH     R4,MAKCNT       : ------------- " -------------
        LIS     R4,1            :INCRIMENT NUMBER OF FAILED CKT
        AHM     R4,MAKFAL       :DURRING THIS M OR A COMMAND
        JNFS    PSNRJ3          :SKIP REPORT IF NOT LAST
        LIS     R8,0            :SET DISPLACMENT PAST MAKXXX
        LIS     R8,0            :SET DISPLACMENT PAST MAKXXX
        JAL     R4,LOGLIN       :PRINT LINE TO REPORT DATA

PSNRJ3  EQ      .
        LR      R4,R0           :SAVE KEY AS INDEX
        LIS     R0,0
        STB     R0,LOGIN+LGTMSZ,R4      :MARK LOGIN STRING STORAGE AS UNUSED
      IF        1-ISIS2
        SIS     R2,8            :NORM CKT REJECT?
        JEFS    PSNRJ0          :YES, NO ERROR CODE IN MSG
      EI
        JAL     R4,GETCH        :TYPE OF ERROR
PSNRJ0  JAL     R4,ELIR
PSNRJ1  CLHI    R0,ARJMAX       :CHECK ERR #
        JLEFS   PSNRJ4          :SKIP IF OK
        LIS     R0,ARJMAX+1     :OUT OF RANGE - FORCE TO ERROR
PSNRJ4  SLHLS   R0,2            :MAKE WORD INDEX
        LR      R2,R0
        L       R3,ARJTYP,R2    :GET REJECT MSG TYPE
        LHL     R2,BOSSP
        JEFS    PSNRJ2          :SKIP IF NO BOSS
        JAL     R5,OCS          :OUTPUT TO RING
PSNRJ2  J       INPUT

:       NORMAL LOGON STATUS     (B4 - MESSAGE)
INDNLS  JAL     R4,GETH         :GET STATUS
        JAL     R4,ELIR
        LIS     R8,7
        NR      R8,R0           :EXTRACT STATUS
        JN      INDNL5          :IF NOT CONTINUE - TELL BOSS
        TBT     R1,PSNEDL       :PROCESSED PSEUDO NEEDLE?
        JE      INDNL5          :NO, ZAP

        LB      R12,LOGINX,R1   :LOGIN STRING INDEX
        LH      R13,PKEY,R1,R1  :LOGIN STRING START INDEX
        JEFS    INDNL5          :IF ZERO, BAD - ZAP

        LBR     R8,R0           :TEST FOR A RESET OF OUR OUTPUT
        NHI     R8,00A0         :TO THE SUP ON LOGIN
        JE      INDAP0          :IF NO RESET, CONTINUE
        J       INDAP           :ELSE, RESET OUTPUT TO START

INDNL5  JAL     R6,ZAP          :PROCESS PORT ZAP

        SLHLS   R8,2            :MAKE WORD INDEX
        L       R3,NLSTYP,R8    :ADDR OF ERR MSG
        LHL     R2,BOSSP        :BOSS PORT
        JE      INDNL6          :SKIP IF NO BOSS
        JAL     R5,OCS          :REPORT ERR TO BOSS
:       SET LOGON TO FAILED FOR TIMING PURPOSES
        LIS     R4,1            : / UPDATE THE NUMBER
        AHM     R4,RPTFAL       :/ OF FAILED LOGINS
        LH      R4,MAKCNT       :GET # LEFT TO MAKE
        JEFS    INDNL6          :SKIP IF ALL DONE

        LIS     R5,1            : / SET NUMBER OF CIRCUITS
        AHM     R5,MAKFAL       :/ THAT HAVE FAILED UP BY 1
        SIS     R4,1            :UPDATE THE NUMBER LEFT TO MAKE
        STH     R4,MAKCNT       : ------------- " -------------
        JNFS    INDNL6          :SKIP REPORT IF NOT LAST
        LIS     R8,0            :SET OFFSET TO ZERO
        JAL     R4,LOGLIN       :PRINT LINE TO REPORT DATA
INDNL6  J       INPUT

      IF        ISIS2
:       LOGON FAILURE   B5 CODE FROM ISIS
INDLOF  JAL     R4,GETH         :GET MSG / ERR #
        JAL     R4,ELIR
:       SET LOGON TO FAILED FOR TIMING PURPOSES
        LIS     R4,1            : / UPDATE THE NUMBER
        AHM     R4,RPTFAL       :/ OF FAILED LOGINS
        LH      R4,MAKCNT       :GET # LEFT TO MAKE
        JEFS    INDLF1          :SKIP IF ALL DONE

        LIS     R8,1            : / SET NUMBER OF CIRCUITS
        AHM     R8,MAKFAL       :/ THAT HAVE FAILED UP BY 1
        SIS     R4,1            :UPDATE THE NUMBER LEFT TO MAKE
        STH     R4,MAKCNT       : ------------- " -------------
        JNFS    INDLF1          :SKIP REPORT IF NOT LAST
        LIS     R8,0            :SET OFFSET TO ZERO
        JAL     R4,LOGLIN       :PRINT LINE TO REPORT DATA
INDLF1
        LBR     R8,R0           :SAVE ERR #
        RBT     R1,PSNEDL       :RESET PSEUDO NEEDLE RECEIVED FLAG
        JE      INDCRH          :CRASH IF NOT ALREADY SET
        LH      R13,PKEY,R1,R1          :GET ADDR OF LOGIN STRING
        JEFS    INDLO1          :NO LOGIN STRING
        LIS     R2,0
        STB     R2,LOGIN+LGTMSZ,R13    :ZAP LOGIN STRING
        STH     R2,PKEY,R1,R1   :CLEAR LOGIN STRING INDEX
INDLO1  RBT     R1,REBILD       :RESET REBUILD FLAG
        LIS     R0,3            :ZAP PORT
        LHI     R2,ZAPMSG       :ZAP MESSAGE CODE
        JAL     R4,SLOR         :START OUTPUT RECORD
        JAL     R4,ELOR         :END IT
        LR      R0,R8           :RESTORE ERR #
        J       PSNRJ1          :TELL BOSS CKT REJECTED

:       SUCCESSFUL LOGON  B6 CODE FROM ISIS
INDLON  LIS     R0,8            :#CHARS TO FLUSH
      ELSE
INDLON  LIS     R0,1
      EI
        JAL     R4,FLUSH        :FLUSH REMAINDER OF MESSAGE
        J       INDAP1          :SET UP CIRCUIT PARAMS

:       PSEUDO-NEEDLE RECEIVED
INDAPN  JAL     R4,GETH         :SKIP TYPE AND KEY
        JAL     R4,GETH         :LOCAL KEY
        JAL     R4,ELIR
        SBT     R1,BKPRSR       :RESET BACK PRESURE
        SBT     R1,LOGBPA       :LOGIN NOT BACKPRESSURED
        SBT     R1,PSNEDL       :INDICATE PSEUDO NEEDLE RECEIVED
        JN      INDCRH          :CRASH IF ALREADY SET
        STH     R0,PKEY,R1,R1   :SAVE INDEX TO LOGIN STRING
        LR      R13,R0
        RBT     R1,REBILD       :RESET FLAG
        LB      R0,LOGIN+LGTMSZ,R13    :GET CIRCUIT TYPE
        THI     R0,80           :REBUILD BIT SET?
        JEFS    INDAP6          :NO
        SBT     R1,REBILD       :SET REBUILD FLAG FOR PORT
INDAP6  NHI     R0,7F           :MASK OFF REBUILD BIT
        SIS     R0,AUXTYP       :AUX CKT?
      IF        ISIS2
        JE      INPUT           :YES, WAIT FOR SUCCESSFUL LOGON MSG
      ELSE
        JE      INDAP1          :SKIP IF AUX CKT
      EI

:       OUTPUT NORMAL CIRCUIT LOGIN CHARS
INDAP   LIS     R12,0           :INIT CHAR INDEX
        LH      R13,PKEY,R1,R1  :SET UP INDEX
INDAP0  EQ      .
        TBT     R1,BKPRSR               :IF PORT NOT BP'D
        JN      INDAPA                  :CONTINUE
        RBT     R1,LOGBPA       :SET LOGIN BACK PRESSURED
        TS      LOGBP                   :SET LOOK FOR BP'D LOGIN
        J       INDAP4                  :SKIP OUTUT OG LOGIN

INDAPA  EQ      .
        LB      R0,LOGIN+2+LGTMSZ,R13,R12      :GET LOGIN CHAR
        OHI     R0,80           :SET MSB FOR SUPE
        STB     R0,NLCHAR+2     :PUT CHAR IN MSG
        LR      R8,R1           :SAVE PORT#
        LA      R3,NLCHAR       :ADDR OF MSG
        LR      R2,R1           :PORT#
        JAL     R5,OCM          :OUTPUT LOGIN CHAR 
        LR      R1,R8           :RESTORE PORT#
        AIS     R12,1           :INC CHAR INDEX
        LB      R0,NLCHAR+2     :GET LAST CHAR OUTPUT
        CLHI    R0,0BB          :SEMI-COLON?
        JEFS    INDAP4          :YES
        CLHI    R0,8D           :<CR>?
        JN      INDAP0          :NO, SEND NEXT CHAR

INDAP4  STB     R12,LOGINX,R1   :SAVE LOGIN CHAR INDEX
        J       INPUT           :WAIT FOR NORMAL LOGON STATUS MSG

INDAP1  RBT     R1,PSNEDL       :INDICATE LOGON COMPLETE
        JE      INDCRH          :CRASH IF NOT ALREADY SET
:       - - - STOP, AND RECORD TIME
:
        L       R2,FASTC,,      :GET CURRENT TIME
        LH      R13,PKEY,R1,R1  :LOGON STRING INDEX
        ST      R2,LOGIN+4,R13  :SAVE STOPING TIME INTO LOGIN
        S       R2,LOGIN+0,R13  :SUBTRACT START TIME = DURATION
        AM      R2,RPTTIM       :ADD TO GROSS TOTAL
        LIS     R3,1            : / UPDATE # OF
        AHM     R3,RPTCOK       :/ 'OK' CIRCUITS
        C       R2,RPTHWM       :IF UNDER THE HIGH WATER MARK
        JLEFS   STOPT1          :SKIP H W M UPDATE
        ST      R2,RPTHWM       :UPDATE H W M
STOPT1
        LH      R4,MAKCNT       :TEST FOR ANY CIRCUTITS LEFT TO
:                               : MAKE (FROM A OR M CMD)
        JE      STOPT8          :NONE LEFT SKIP A/M LOGIC

        AM      R2,MAKTIM       :UPDATE TOTAL TIME
        AHM     R3,MAKCOK       :UPDATE # IF CKTS 'OK'
        C       R2,MAKHWM       :TEST FOR NEW H W M
        JLEFS   STOPT2          :SKIP UPDATE H W M
        ST      R2,MAKHWM       :UPDATE NEW HIGH WATER MARK
STOPT2  EQ      .
        SIS     R4,1            :REDUCE NUMBER TO DO
        STH     R4,MAKCNT       :SAVE NEW COUNT OF MAKES REMAINING

STOPT8  EQ      .
        LIS     R2,0
        STH     R2,ORIG,R1,R1           :INDICATE CKT ORIGINATES HERE
        LHL     R2,LIFTIM
        STH     R2,ZAPTIM,R1,R1 :INIT CIRCUIT LIFETIME
        LHL     R2,CPMTBL       :GET AUX SPEED
        TBT     R1,AUTO
        JNFS    INDAP5
        STH     R2,MAXCPM,R1,R1 :SET DEFAULT MAX CPM
INDAP5  LR      R8,R1

        LB      R2,LOGIN+LGINSZ,R13     :GET SIZE OF INITIAL LOGON STRING
        LR      R2,R2
        JEFS    INDAP2          :IF 0, NOTHING TO OUTPUT
        LR      R2,R1           :PORT #
        LA      R3,LOGIN+LGINSZ,R13     :ADDR OF INITIAL LOGON STRING
        JAL     R5,OCS          :OUTPUT INITIAL LOGON STRING TO PORT
INDAP2
        LA      R12,NRMAUX      :NORMAL/AUXLRY MESSAGE TO BOSS
        LA      RACBA,NRMAUX+$A17 :ADDRESS OF TIME
        L       RBCBA,LOGIN+4,R13       :ENDING TIME,
        S       RBCBA,LOGIN+0,R13       :LESS START TIME=DUR.10
        JAL     R7,PRNTIM       :PRINT TIME IN SEC.MIL
        L       R7,NORMM        :LOAD " Nor"
        ST      R7,NRMAUX+4     :SAVE IT IN OUTPUT BUFFER
        L       R7,NORMM+4      :LOAD "mal "
        ST      R7,NRMAUX+8     :SAVE IT IN OUTPUT BUFFER
        LR      R1,R8           :RESTORE PORT #
        LB      R8,LOGIN+LGTMSZ,R13    :GET CKT TYPE
        NHI     R8,7F           :MASK OFF REBUILD BIT
        SIS     R8,NRMTYP       :NORMAL CKT?
        JE      INED10          :... PROCESS END OF NEEDLE

        L       R7,AUXM         :LOAD " Aux"
        ST      R7,NRMAUX+4     :SAVE IT IN OUTPUT BUFFER
        L       R7,AUXM+4       :LOAD "lry "
        ST      R7,NRMAUX+8     :SAVE IT IN OUTPUT BUFFER
        J       INED10          :... PROCESS END OF NEEDLE

      IF        1-ISISBP
:       NON-DATA BACKPRESSURE ON
INDBON  RBT     R1,BKPRSR       :TURN ON BACKPRESSURE
        J     INDEAT          :GO COMPLETE MSG

:       NON-DATA BACKPRESSURE OFF
INDBOF  SBT     R1,BKPRSR       :TURN OFF BACKPRESSURE
        J     INDEAT          :GO COMPLETE MSG
      EI        (ISIS2)

:       NON-DATA ZAPPER
INDZAP  LIS     R0,1            :EAT ZAPPER AND CLOSE RECORD
        JAL     R4,FLUSH
        LR      R7,R1           :SAVE PORT #
        JAL     R6,ZAP          :PROCESS PORT ZAP
        LR      R1,R7           :RESTORE PORT #
        LA      R8,ZAPPED
        J       INDB20          :TELL BOSS OF ZAPPED PORT

INDBLK  LA      R8,BLACK        :BLACK BALL MSG
INDB10  LIS     R0,1
        JAL     R4,FLUSH        :EAT MSG
INDB20  LIS     R0,0
        LIS     RADX,$A10
        LIS     RSCBA,3
        LA      RACBA,1,R8
        JAL     RLCBA,CBA       :CONVERT PORT # TO ASCII
        LHL     R2,BOSSP
        JEFS    INDB30          :SKIP IF NO BOSS
        LR      R3,R8           :MSG TO BOSS
        JAL     R5,OCS
INDB30  J       INPUT

INDGRY  LA      R8,GREY
        J       INDB10

INDYEL  HS      0               :FOUND YELLOW BALL
        IF      BNCYEL          :BOUNCE IT ?
        AIS     R2,1            :CONVERT TO ORANGE
        REMARK  %ORANGE BALLS BOUNCED ON YELLOW
        ELSE    :BNCYEL (DON'T PASS YELLOW)
        LIS     R0,1            :EAT Y.B.
        JAL     R4,FLUSH
        J       INPUT           :EXIT
        REMARK  %ORANGE BALLS NOT RETURNED
        EI      :BNCYEL



:       BOUNCE NON-DATA MSG - SEND MSG JUST RECEIVED BACK TO SENDER
:                             R2 HAS MSG TYPE, ASSUMED TO BE LENGTH 3
INDBNC  LIS     R0,1            :EAT REMAINDER OF INPUT
        JAL     R4,FLUSH
        LIS     R0,3            :MSG LENGTH 3
        JAL     R4,SLOR         :SEND MSG TYPE IN R2
        JAL     R4,ELOR
        J       INPUT           :CHECK INPUT AGAIN

:       NON-DATA MSG TYPE FAN-OUT
INDFAN  HC      INDCRH-SEG1     :9E - DETACH (YELLOW BALL & ZAP)
        HC      INDZAP-SEG1     :9F - DISCONNECT (ZAPPER)
      IF        ISISBP
        HC      INDEAT-SEG1
        HC      INDEAT-SEG1
        ELSE
        HC      INDBON-SEG1     :A0 - APPLY BACK-PRESSURE
        HC      INDBOF-SEG1     :A1 - RELEASE BACK-PRESSURE
      EI
        HC      INDEAT-SEG1     :A2 - FLUSH OUTPUT
        HC      INDEAT-SEG1     :A3 - FLUSH INPUT
        HC      INDBLK-SEG1     :A4 - DATA LOST IN THIS DIRECTION
        HC      INDGRY-SEG1     :A5 - DATA LOST IN OTHER DIRECTION
        HC      INDEAT-SEG1     :A6 - ENTER DEFERED ECHO MODE
        HC      INDEAT-SEG1     :A7 - LEAVE DEFERED ECHO MODE
        HC      INDEAT-SEG1     :A8 - ENTER TRANSPARENCY
        HC      INDEAT-SEG1     :A9 - LEAVE TRANSPARENCY
        IF      RECHO
        HC      INDGB-SEG1      :AA - GREEN BALL
        ELSE
        HC      INDEAT-SEG1     :AA - GREEN BALL
        EI
        HC      INDEAT-SEG1     :AB - RED BALL
        HC      INDYEL-SEG1     :AC - YELLOW BALL
        HC      INDORN-SEG1     :AD - ORANGE BALL
        HC      INDEAT-SEG1     :AE - BREAK DETECTED
        HC      INDZAP-SEG1     :AF - HANG UP
        HC      INDEAT-SEG1     :B0 - QUERY TERMINAL PARAMETER
        HC      INDEAT-SEG1     :B1 - SET TERMINAL PARAMETER
        HC      INDAPN-SEG1     :B2 - AUX PSEUDO NEEDLE
      IF        ISIS2
        HC      INDCRH-SEG1     :B3 - NORMAL LOGON CHAR
        HC      INDNLS-SEG1     : B4 - NORMAL LOGON STATUS
        HC      INDLOF-SEG1     :B5 - LOGON FAILURE
        HC      INDLON-SEG1     :B6 - SUCCESSFUL LOGON
      ELSE
        HC      INDAPN-SEG1     :B3 - NORMAL PSEUDO NEEDLE
        HC      INDCRH-SEG1     :B4 - NORMAL LOGON CHAR
        HC      INDLON-SEG1     :B5 - SUCCESSFUL NORMAL LOGON
        HC      INDNLS-SEG1     :B6 - NORMAL LOGON STATUS
      EI
        HC      INDCRH-SEG1     :B7 - ADDENDUM TO ACCOUNTING
        HC      INDZAP-SEG1     :B8 - SUPER-HANG UP
        HC      INDEAT-SEG1     :B9 - TRANSMIT LIMIT
      IF        ISIS2
        HC      INDEAT-SEG1     :BA - 'BREAK' END
      EI

:       NON-DATA MSG SIZES (BYTES, NOT INCLUDING RPORT)
INDSIZ  BC      1               : 9E    DETACH
        BC      1               : 9F    DISCONNECT
        BC      1               : A0    APPLY BACKPRESSURE
        BC      1               : A1    RELEASE BACKPRESSURE
        BC      1               : A2    FLUSH FORWARD
        BC      1               : A3    FLUSH BACKWARD
        BC      1               : A4    BLACK BALL
        BC      1               : A5    GREY BALL
        BC      1               : A6    ENTER "DEM"
        BC      1               : A7    LEAVE "DEM"
        BC      1               : A8    ENTER "TRANSPARENCY"
        BC      1               : A9    LEAVE "TRANSPARENCY"
        BC      1               : AA    GREEN BALL
        BC      1               : AB    RED BALL
        BC      1               : AC    YELLOW BALL
        BC      1               : AD    ORANGE BALL
        BC      1               : AE    "BREAK" DETECTED
        BC      1               : AF    "HANG UP"
        BC      2               : B0    QUERY TERMINAL PARAMETER
        BC      3               : B1    SET TERMINAL PARAMETER
        BC      4               : B2    AUX PSEUDO-NEEDLE
      IF        ISIS2
        BC      2               : B3    NORMAL LOGON CHAR
        BC      2               :B4     NORMAL LOGON STATUS
        BC      2               * B5    LOGON FAILURE
        BC      8               : B6    SUCCESSFUL LOGON
      ELSE

        BC      4               : B3    NORMAL PSEUDO-NEEDLE
        BC      2               : B4    LOGON CHARACTER
        BC      1               : B5    SUCCESSFUL LOGON FROM THIS PORT
        BC      2               : B6    NORMAL LOGON FAILURE
      EI
        BC      6               : B7    ADDENDUM TO ACCOUNTING
        BC      1               : B8    SUPER-"HANG UP"
        BC      2               : B9    TRANSMIT LIMIT
      IF        ISIS2
        BC      1               :BA    'BREAK' END
      EI
        SUBTTL  CODE AND DATA SECTION   (COMMAND PROCESSOR)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                     C O M M A N D   P R O C E S S O R                     ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

:
:       REGISTER USAGE:
:               R1  - ISIS PORT NUMBER (STARTS OUT AS, CHANGED)
:               R10 - TO CONTAIN THE ADDRESS OF CGETL (SEE CNUM25)
:               R11 - CONTAINS THE 'GET A CHARACTER' ADDRESS
:               OTHER REGISTERS NOT YET DOCUMENTED!!!
:
:       EAT ALL INPUT - WATCH YELLOW BALL OUT TIMER
CEAT    JALR    R5,R11          :GET ANOTHER INPUT CHAR
        L       R2,CYBTIM       :YELLOW BALL OUT ?
        JEBS    CEAT            :NOPE, EAT INPUT
        CL      R2,SLOWC,,      :YEP, IS TIMEOUT UP ?
        JGBS    CEAT            :NOPE, EAT INPUT
        LIS     R2,0
        ST      R2,CYBTIM       :RESET YELLOW BALL OUT
        JFS     CSTART          :PROCESS INPUT

:       GET COMMAND LETTER
CGETL   JALR    R5,R11          :GET NEXT LETTER
CSTART  JAL     R5,CECHO        :ECHO IT, R8 = 7 BIT CHAR
        TBT     R8,CIGNOR       :IGNORE CR, SPACE, (ROOM FOR OTHERS)
        JNBS    CGETL           :JUMP CHAR CAN BE IGNORED
        NHI     R8,5F           :FORCE TO UPPERCASE IF ITS A LETTER
                                :IF NOT, IF FAILS ANYWAYS, SO THE
                                :CHANGE DOESN'T MATTER
        TBT     R8,CLEGAL
        JN      CNUM            :JUMP COMMAND LETTER LEGAL
        JFS     CBTCH2          :JUMP TO ILLEGAL INPUT CHR.

:       ILLEGAL COMMAND - BITCH
CBITCH  LR      R2,R1           :GET PORT NUMBER
        LA      R3,MSGCE        :GET ERROR MSG
        JAL     R5,OCS          :SEND BITCH MSG
        J       CBTCHE          :SKIP OTHER ERRORS
:
CBTCH1  LR      R2,R1           :GET BOSS PORT #
        LA      R3,MSGCE1       :GET ERROR MESSAGE (1)
        JAL     R5,OCS          :SEND BITCH MSG (VALUE PRESENT)
        J       CBTCHE          :SKIP OTHER MSGS.
:
CBTCH2  CLHI    R8,001B         :CHECK IF ESCAPE
        JE      CBTCH4          :SPECIAL HANDLING
        LR      R2,R1           :GET BOSS PORT #
        LA      R3,MSGCE2       :GET ERROR MSG  (NOT VALID CMD)
        JAL     R5,OCS          :PRINT IT ON BOSS.
        J       CBTCHE          :SKIP OTHER MSGS.
:
CBTCH3  LR      R2,R1           :GET BOSS PORT #
        LA      R3,MSGCE3       :GET ERROR MSG  (PORT#/PARAM OUT OF RANGE)
        JAL     R5,OCS          :PRINT IT ON BOSS
        J       CBTCHE          :SKIP OTHER MSGS.
:
CBTCH4  LH      R0,REPTIM       :IF REPORT IN PROGRESS
        JGFS    NOTREP
        LH      R0,REPRAT       : STOP BY RESETTING TIMER
        STH     R0,REPTIM
NOTREP  TS      LISTPT          : SUSPEND LISTING
        LIS     R0,3            :USE COUNT TO BOTH
        STH     R0,MSGHX        : TO STOP HELP LISTINGS
        LHI     R2,GOBMSG       : AND OUTPUT GOBBLER
        JAL     R4,SLOR
        JAL     R4,ELOR
        LR      R2,R1           :GET BOSS PORT #
        LA      R3,MSGCE4       :GET ERROR MESSAGE (ESC DETECTED)
        JAL     R5,OCS
        J       CBTCHE
:
CBTCH5  LR      R2,R1           :GET BOSS PORT #
        LA      R3,MSGCE5       :GET ERROR MESSAGE (NO DATA IN XTAB)
        JAL     R5,OCS
        J       CBTCHE
:
CBTCH6  LR      R2,R1           :BOSS PORT
        LA      R3,MSGCE6       :ERROR MESSAGE (TRACE DISABLED)
        JAL     R5,OCS
:
CBTCHE  EQ      .               :END OF CBITCHS
        LIS     R0,3            :TAG YELLOW BALL TO OUTPUT
        LHL     R1,BOSSP        :SO TYPE AHEAD CAN BE DISCARDED
        LHI     R2,YBMSG        :TILL ORANGE BALL IS BOUNCED
        JAL     R4,SLOR         :START LOGICAL OUTPUT REC
        JAL     R4,ELOR         :END LOGICAL OUTPUT REC.
        L       R2,SLOWC,,      :SET YELLOW BALL OUT TIMER
        AIS     R2,0A           :10 SECONDS
        ST      R2,CYBTIM
        J       CEAT            :EAT TILL ORANGE OR TIMEOUT

:       GET NUMBER TILL CR OR COMMA
CNUM    STB     R8,CCHAR        :SAVE COMMAND CHAR
        LIS     R6,0
        STH     R6,CVALUE       :INIT VALUE
        CHI     R8,052          :COMMAND = "R"?
        JNFS    CNUM03          :NO, CONTINUE
        LHI     R6,RPTALL       :SET TO REPORT ALL AS A DEFAULT
        STH     R6,CVALUE       :STORE 7FFF IN VALUE
        LIS     R6,0            :GET A ZERO FOR END
        STH     R6,CPNBEG       :STORE IN THE BEGINING
        JFS     CNUM04          :STORE 0000 IN END

CNUM03  EQ      .
        LIS     R6,1            
        STH     R6,CPNBEG       :INIT START PORT NUMBER
      IF        ISIS2
        LHI     R6,NPORT-2
      ELSE
        LHI     R6,NPORT-3
      EI
CNUM04  EQ      .
        STH     R6,CPNEND       :INIT END PORT NUMBER
        LIS     R7,4            :INIT DATA WORD INDEX
CNUM05  LIS     R6,0            :INIT NUM ACC

CGETN   JALR    R5,R11          :GET NEXT INPUT
        JAL     R5,CECHO        :ECHO
        CLHI    R8,0D           :CR AFTER CMND LETTER ?
        JE      CNUM25          :YEP, GO FAN OUT
CNUM10  CLHI    R8,001B         :IF ESCAPE
        JE      CBTCH4          : SPECIAL HANDLING
        SHI     R8,30           :TEST FOR DIGIT RANGE (<'0')
        JL      CNUM20          :JUMP NOT DIGIT
        LIS     R5,0A           : / TEST FOR DIGIT
        CR      R8,R5           :/ > '9'
        JGE     CNUM20          :JUMP NOT DIGIT
        MHR     R6,R5           :PREVIOUS NUM X 10
        AR      R6,R8           :MAKE NEW NUM
        TI      R6,0FFFF0000    :MUST BE <= HALF WORD
        JN      CBTCH3          :ERROR IF NOT
        JALR    R5,R11          :GET NEXT CHAR
        JAL     R5,CECHO        :ECHO
        J       CNUM10          :GO PROCESS

:       NOT A DIGIT, MUST BE CR OR COMMA
CNUM20  STH     R6,CPNEND,R7    :SET DATA WORD
        SIS     R7,2            :MOVE INDEX TO NEXT DATA WORD
        JNFS    CNUM22          :SKIP ALL BUT BEG PORT NUMBER
        STH     R6,CPNEND       :ON CPNBEG, ALSO SET CPNEND
CNUM22  AIS     R8,30-2C        :COMMA ?
        JEFS    CNUM30          :JUMP IF SO
        AHI     R8,2C-0D        :CR ?
        JN      CBITCH          :GO BITCH IF NOT

:       GOT CR - FAN OUT
CNUM25  LB      R8,CCHAR        :GET COMMAND CHAR
        LHL     R3,CFAN-41*2,R8,R8  :IE. CFAN TABLE + (2*(CCHAR-"A") )
        LA      R10,CGETL       :PREPARE TO PROCESS NEXT COMMAND
        J       SEG1,R3         :GO HANDLE COMMAND

CNUM30  LR      R7,R7           :IS DATA AREA FULL ?
        JL      CBITCH          :GO BITCH IF SO
        J       CNUM05          :GET NEXT NUM IF NOT

:       A - AUX CIRCUIT A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A
CAUX    LIS     R13,AUXTYP      :AUX CKT TYPE
        JFS     CKT01

:       M - NORMAL CIRCUIT M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M.M
CNORM   LIS     R13,NRMTYP      :NORMAL CKT TYPE
CKT01   STB     R13,LOGBFR+LGTMSZ       :STORE TYPE IN BUFFER
        LIS     R5,0            :CLEAR FLAG FOR ECHOING PASSWORD
        STH     R5,CECHOF       :/
        LR      R6,R6           :VALUE ENTERED?
        JGFS    CKT02           :YES
        LIS     R6,1            :NO, DEFAULT = 1 CKT
CKT02   STH     R6,NUMCKT       :SAVE # CKTS TO BUILD
        STH     R6,MAKCNT       :SAVE NUMBER TO BE TIMED
        LIS     R6,0            :INIT LOGBFR INDEX

        LH      R0,SMPASS       : / IF 'SAME-PASSWORD' FLAG IS NOT ON
        JNFS    CKT10           :/ SKIP THE OPTION
        JALR    R5,R11          :GET THE FIRST CHAR OF THE USERNAME
        NHI     R0,007F         :CLEAR HIGH ORDER BIT.
        CLHI    R0,STRTER       :TEST FOR STRING TERMINATOR
        JNFS    CKT105          :IF NOT, PROCESS NORMALY
        J       CKT35           :IF IT IS, SKIP LOGON

CKT10   EQ      .               :PROCESS NEXT CHR. TEST FOR PASSWORD
        JALR    R5,R11          :GET NEXT CHARACTER
        NHI     R0,007F         :CLEAR HIGH ORDER BIT
CKT105  LH      R5,CECHOF       :IF SET TO ECHO
        JEFS    CKT11           :GO ECHO, TEST FOR SEMI-:
        LR      R8,R0           :SIMULATE THE ECHO (R8
        CLHI    R0,003B         :IF CHAR = SEMI-:
        JEFS    CKT12           : RESTORE ECHO MODE, PRINT SEMI

        CLHI    R0,000D         :IF CHAR = CR
        JEFS    CKT12           : RESTORE ECHO MODE, PRINT CR
        JFS     CKT14           :JUST A REGULAR CHAR, SKIP ECHO
        
CKT11   EQ      .       :ECHO IS ON - PRINT TEST FOR SEMI-:
        CLHI    R0,003B         :CHAR = SEMI-: ?
        JNFS    CKT13           :NO, ECHO THE CHAR

CKT12   LH      R5,CECHOF       :GET FLAG 0000 or FFFF
        XHI     R5,0FFFF        :COMPLIMENT FFFF or 0000
        STH     R5,CECHOF       :SAVE BACK IN FLAG
CKT13   JAL     R5,CECHO        :PRINT THE CHAR.
CKT14   EQ      .               :FINALY DONE...
        CLHI    R8,001B         :IF IT = ESC THEN
        JE      CBTCH4          :BITCH.
        OHI     R8,0080         SET HIGH ORDER BYTE FOR SUP.
        STB     R8,LOGBFR+2+LGTMSZ,R6   :STORE CHAR IN BUFFER
        AIS     R6,1            :INC INDEX
        CLHI    R6,LGINSZ-2-LGTMSZ      :LOGIN STRING LENGTH EXCEEDED?
        JGE     CBITCH          :YES

        CLHI    R8,008D         :<CR>? WITH HIGH ORDER BIT SET
        JN      CKT10           :NO

        STB     R6,LOGBFR+1+LGTMSZ      :STORE STRING SIZE IN BUFFER

:       NOW INPUT INITIAL LOGON STRING
        LIS     R6,0            :INIT CHAR INDEX
        STH     R6,CECHOF       :SET ECHO FLAG TO ECHO
CKT20   JALR    R5,R11          :GET NEXT CHAR
        NHI     R0,007F         :AND OUT HIGH BIT FOR TEST
        LR      R8,R0           :SIMULATE ECHO, JUST IN CASE
        CLHI    R0,003B         :IS IT A SEMI-: ?
        JNFS    CKT202          :NO TEST FOR 'CR'
        LH      R5,CECHOF       :REVERSE THE STATE OF
        XHI     R5,0FFFF        : THE ECHO FLAG
        STH     R5,CECHOF       :  AND SAVE IT BACK
        JFS     CKT205          :PRINT SEMI-COLON'S ALWAYS
CKT202  CLHI    R0,000D         :IF IT IS NOT A 'CR' THEN
        JNFS    CKT204          : SKIP CLEARING ECHO FLAG
        LIS     R5,0            : / CLEAR THE ECHO
        STH     R5,CECHOF       :/ FLAG
CKT204  LH      R5,CECHOF       :GET ECHO FLAG, SKIP ECHO IF
        JNFS    CKT206          :NOT = ZERO
CKT205  EQ      .               :PRINT THE CHARACTER
        JAL     R5,CECHO        :ECHO IT
CKT206  EQ      .
        CLHI    R8,STRTER       :STRING TERMINATOR
        JE      CKT30           :IF SO, END OF STRING
        
        CLHI    R8,1B           :ESC?
        JE      CBTCH4          :YES, PRINT ESCAPE MSG.

        OHI     R8,0080         :SET HIGH ORDER BIT FOR SUP
        STB     R8,LOGBFR+LGINSZ+1,R6   :STORE CHAR IN BUFFER
        AIS     R6,1            :INC INDEX
        CLHI    R6,ISTRSZ-1     :INITIAL LOGON STRING LENGTH EXCEEDED?
        JL      CKT20           :NO, GET NEXT CHAR
        J       CBITCH
CKT30   HS      0
   IF   DISLOG                  :IF WE CHOOSE TO DISABLE LOGIN STRING
:                               :!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        LIS     R6,0            :===== PATCH TO DISABLE LOGIN STRING =====
:                               :!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   EI   :(DISLOG)
        STB     R6,LOGBFR+LGINSZ        :STORE INITIAL LOGON STRING LENGTH

:       NOW FIND AVAILABLE SLOT IN LOGIN STORAGE
        LIS     R6,0            : / SET SAME-PASSWORD FLAG
        STH     R6,SMPASS       :/ TO "OK"
CKT35   LHI     R13,NPORT*(LGINSZ+ISTRSZ)      :INIT INDEX
CKT40   LB      R0,LOGIN+LGTMSZ,R13    :GET ENTRY MSG TYPE
        LR      R0,R0
        JEFS    CKT41           :IF 0, THIS IS AVAILABLE FOR USE

        SHI     R13,LGINSZ+ISTRSZ       :DECR INDEX
        JGBS    CKT40           :LOOK AT NEXT ENTRY IF NOT DONE

:       LOGIN STORAGE FULL - OUTPUT ERROR MSG
        LHL     R1,BOSSP
        LR      R2,R1           :PORT#
        LA      R3,MSGCKT       :ADDR OF MSG
        JAL     R5,OCS          :OUTPUT MSG TO BOSS
        J       CGETL           :LOOK FOR NEXT CMD

:       NOW COPY STRINGS FROM BUFFER INTO LOGIN TABLE
CKT41   LHI     R5,LGINSZ+ISTRSZ-1      :INIT INDEX
CKT50   LB      R0,LOGBFR,R5    :GET CHAR FROM BUFFER
        STB     R0,LOGIN,R13,R5 :STORE IN LOGIN TABLE
        SIS     R5,1            :DECR INDEX
        JGEBS   CKT50           :CONTINUE UNTIL DONE

        JAL     R9,REQCKT       :START BUILDING THE CIRCUIT

        LCS     R9,1    
        AHM     R9,NUMCKT       :DEC # OF CKTS TO BUILD
        JG      CKT40           :DO IT AGAIN

        LHL     R1,BOSSP
        J       CGETL           :LOOK FOR NEXT CMD


:       B - BURST SIZE   B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B.B
CBURST  JAL     R8,CGETPP       :GET 1ST PORT
        CLHI    R6,FIRST        :EXCEED MAX DATA MSG ?
        JGE     CBTCH3          :BITCH IF SO (PARAM OUT OF RANGE)
CBRST2  CLHI    R6,9D
        JG      CBTCH3          :IF TOO BIG
        LR      R6,R6
        JNFS    CBRST3          :IF NOT ZERO
        LHI     R6,9D           :SET TO MAX
CBRST3  STH     R6,BURST,R7,R7  :SET BURST VALUE
        JALR    R8,R9           :GET NEXT PORT
        JBS     CBRST2          :GO PROCESS

:       C - CPS RATE  C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C.C
CCPS    JAL     R8,CGETPP       :CHECK PARAMETERS
CCPS2   STH     R6,CPS,R7,R7    :SET CPS
        LHI     R8,$A60
        MHR     R8,R6
        STH     R8,CPM,R7,R7    :SET CPM
        LA      R8,CCPS2        :R8 = ADDR TO PROCESS NEXT PORT

:       INIT PORT OUTPUT FOR CURRENT TIME AND NEW CPS VALUE
CCPS10  L       R4,FASTC,,      :R4 = TICKS SINCE MINUTE
        SLLS    R4,2
        SRLS    R4,2
        S       R4,MINUTE
        JGEFS   .+8
        AI      R4,40000000     :(ACCOUNT FOR 30 BIT WRAP)
        MHR     R4,R6           :R4 = TICKS * CPS
        AHI     R4,(RATE+1)/2   :ADD IN ROUNDING FOR DIVIDE
        LHI     R5,RATE         :R5 = CLOCK RATE
        DHR     R4,R5           :R5 = EXPECTED CPS TO NOW
        STH     R5,ROMIN,R7,R7
        JR      R9              :GO GET NEXT PORT

:       D - REBUILD CIRCUIT  D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D.D
CREB    JAL     R8,CGETPP       :GET 1ST PORT#
        LR      R6,R6           :VALUE SPECIFIED?
        JN      CBTCH1          :YES - BITCH

CREB0   TBT     R7,APORT        :ACTIVE PORT?
        JEFS    CREB1           :NO

        LH      R8,PKEY,R7,R7   :LOGIN STRING START INDEX
        JEFS    CREB1           :NO LOGIN STRING
        LB      R8,LOGIN+LGTMSZ,R8     :LOGIN STRING TYPE
        LR      R8,R8
        JEFS    CREB1           :NO LOGIN STRING
        SBT     R7,REBILD       :SET REBUILD FLAG

CREB1   JALR    R8,R9           :GET NEXT PORT
        JBS     CREB0

:       E - REBUILD OFF  E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E
CREBOF  JAL     R8,CGETPP       :GET 1ST PORT#
        LR      R6,R6           :VALUE SPECIFIED?
        JN      CBTCH1          :YES

CREBO1  RBT     R7,REBILD       :RESET FLAG
        JALR    R8,R9           :GET NEXT PORT
        JBS     CREBO1

:       F - TURN PORT OFF  F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F.F
CPOFF   JAL     R8,CGETPP       :GET 1ST PORT NUMBER
        CLHI    R6,1            :VALUE MUST BE 0-1
        JG      CBTCH3          :ELSE BITCH
        LIS     R0,0            :ZERO FOR RESETTING TOTALS
CPOFF1  LHL     R6,CVALUE       :IF VALUE > 0
        JEFS    CPOFF2
        SLHLS   R7,1            : MAKE HW INDEX
        STH     R0,ERRCNT,R7    : RESET ERROR COUNT
        ST      R0,ICHAR,R7,R7  : RESET INPUT CHARACTER COUNT
        ST      R0,OCHAR,R7,R7  : RESET OUTPUT CHARACTER COUNT
        SRHLS   R7,1            : RESTORE INDEX
CPOFF2  RBT     R7,PORTON       :TURN PORT OFF
        RBT     R7,AUTO         :TURN OFF AUTO MODE
        RBT     R7,REPON        :TURN REPORT OFF
        RBT     R7,TRCEON       :TURN TRACE OFF
        RBT     R7,PRTDAT       :TURN OFF PORT # INCLUSION
        RBT     R7,PORTEC       :TURN OFF PORT ECHO
        JALR    R8,R9           :GET NEXT PORT NUMBER
        J       CPOFF1          :GO PROCESS


:       H - HELP (PRINT INSTRUCTIONS) H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H
CHELP   EQ      .               :EXPANDED HELP COMMANDS
        LHL     R6,CVALUE       :GET HELP # (0-3)
        CLHI    R6,MSGHMX       :IF # > MAX
        JG      CBTCH3          : THEN BITCH
        LH      R0,MSGSZ0,R6,R6 :GET MESSAGE SIZE
        STH     R0,MSGHX        :SAVE IT IN A NEGITIVE INDEX
        SLLS    R6,2            :MAKE IT A FULLWORD INDEX
        L       R0,MSGHET,R6    :GET MESSAGE END FROM END-TABLE
        ST      R0,MSGEND       :SAVE IT
        LHL     R1,BOSSP        :RESTORE BOSS PORT
        J       CGETL           :LOOK FOR NEW COMMAND

:       I - SET REPORT INTERVAL  I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I.I
CINTV   JAL     R8,CGETPP       :GET PORT NUMBER
        LR      R6,R6           :VALUE SPECIFIED ?
        JE      CINTV1          :NO,CONTINUE
        CLHI    R6,7FFF         :CHECK FOR MAX
        JG      CBTCH3          :BITCH IF GREATER
        STH     R6,REPRAT       :STORE NEW REPORT INTERVAL
CINTV1  LHL     R6,REPRAT
        STH     R6,REPTIM       :INIT REPORT TIME
CINTV2  CLH     R7,BOSSP        :TURNING ON BOSS ?
        JNFS    CINTV4          :NOPE, OK
CINTV3  JALR    R8,R9           :GET NEXT PORT
        JBS     CINTV2          :GO PROCESS
CINTV4  SBT     R7,REPON        :TURN REPORT ON
        LIS     R0,0
        SLHLS   R7,2            :MAKE WORD INDEX
        ST      R0,TIMIN,R7     :INIT TOTAL INPUT CHARS FOR THIS REPORT
        ST      R0,TOMIN,R7     :INIT TOTAL OUTPUT CHARS FOR THIS REPORT
        SRHLS   R7,2            :RESTORE PORT #
        JBS     CINTV3

:       K - KILL PORT AFTER SPECIFIED TIME.  LIFETIME INFINITE  K.K.K.K.K.K
:               WHEN LIMIT IS 0 OR MISSING
CKILL
        CLHI    R6,7FFF                 :MAX OUT AT 32K
        JG      CBTCH3                  :OUT OF RANGE
        LA      R3,KILL0                :ASSUME KILL IN EFFECT
        LR      R13,R6
        JGFS    CKILL1
        LIS     R13,0
        LA      R3,KILL1                :KILL IS OFF
CKILL1  STH     R13,LIFTIM
        LR      R2,R1           :COPY PORT NO.
        JAL     R5,OCS          :OUTPUT MESSAGE
        LHL     R1,BOSSP        :RESTORE PORT #
        J       CGETL           :LOOK FOR NEW CMD

:       L - LIST EVERYTHING ABOUT A PORT  L.L.L.L.L.L.L.L.L.L.L.L.L.L.L.L
CLISPT  JAL     R8,CGETPP       :GET 1ST PORT #
        CLHI    R6,1            :VALUE LIMITED TO 0-1
        JG      CBTCH3          :IF NOT, BITCH
        STH     R6,LISTFL       :SAVE VALUE AS FLAG
        STH     R7,LISTPT       :STORE END PORT #
        LH      R7,CPNBEG       :GET BEGINING PORT #
        STH     R7,LISTBG       : AND SAVE IT IN LIST BEGINING PORT #
        LHL     R2,BOSSP        : SEND HEADERS TO BOSS PORT
        LR      R6,R6           : LISTING TYPE
        JNFS    CLISP1
        LA      R3,ACTPMG       : ACTIVE PORTS
        JFS     CLISP2
CLISP1  LA      R3,AUTPMG       : AUTO PORTS
CLISP2  JAL     R5,OCS          : SEND IT
        LHL     R2,BOSSP
        LA      R3,LSTHDR       :OUTPUT HEADINGS TO BOSS
        JAL     R5,OCS

        LHL     R1,BOSSP
        J       CGETL           :LOOK FOR NEXT CMD

:       N - TURN PORT ON  N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N.N
CPON    JAL     R8,CGETPP       :GET PORT NUMBER
        LR      R6,R6           :CHECK VALUE ENTERED
        JL      CBTCH2
        CLHI    R6,0002
        JG      CBTCH2
        JN      CPON2A          :0-1, GO PROCESS
CPON2   CLH     R7,BOSSP        :SKIP IF BOSS
        JE      CPON3
        SBT     R7,PORTEC       :SET TO ECHO
        RBT     R7,PRTDAT       :CLEAR OTHER OUTPUT FLAGS, PORT DATA
        RBT     R7,PORTON       :OUTPUT OFF
        RBT     R7,TRCEON       :TRACE OFF
        RBT     R7,TRSYNC       :TRACE SYNC OFF
        JFS     CPON3
CPON2A  TBT     R7,APORT        :IS THIS AN ACTIVE PORT?
        JEFS    CPON3           :SKIP IF NOT
        CLH     R7,BOSSP        :TURNING ON BOSS ?
        JNFS    CPON4           :NOPE, OK
CPON3   JALR    R8,R9           :GET NEXT PORT
        LH      R6,CVALUE       :GET INPUT VALUE
        CLHI    R6,0002         :CHECK IF ECHO WANTED
        JE      CPON2           :ECHO
        J       CPON2A          :OUTPUT DATA ON
CPON4   RBT     R7,PRTDAT       : ASSUME NO PORT DATA
        RBT     R7,PORTEC       :        NO PORT ECHO
        LH      R6,CVALUE
        JEFS    CPON5           : VALUE = 0
                                : VALUE = 1
        SBT     R7,PRTDAT       :  SET PORT DATA FLAG
CPON5   SBT     R7,PORTON       :TURN PORT ON
        RBT     R7,TRSYNC       :INITIALLY NOT SYNCHED
        LHL     R6,CPS,R7,R7    :GET CPS
        LA      R8,CPON2A       :R8 = ADDR TO PROCESS NEXT PORT
        J       CCPS10          :GO SET CURRENT OUTPUT FOR MINUTE

:       O - TURN ON AUTOMATIC OUTPUT  (CANCEL WITH F)  O.O.O.O.O.O.O.O.O
CAUTO   JAL     R8,CGETPP       :GET 1ST PORT NUMBER
        LR      R6,R6           :VALUE SPECIFIED ?
        JN      CBTCH1          :BITCH IF SO
CAUTO2  CLH     R7,BOSSP
        JEFS    CAUTO3          :SKIP BOSS PORT
        SBT     R7,AUTO         :TURN ON AUTO FEATURE
CAUTO3  JALR    R8,R9           :GET NEXT PORT NUMBER
        JBS     CAUTO2          :GO PROCESS

:       P - PUT MESSAGE IN BUFFER FOR X-COMMAND P.P.P.P.P.P.P.P.P.P.P.P.P.P.P
CPUTMS  LHL     R6,CVALUE       :GET THE VALUE INPUT
        JNFS    CPUTM1          :IF VALUE = 0
        STB     R6,XTABC        :  SET COUNT TO 0
        J       CGETL           :  LOOK FOR NEW COMMAND

CPUTM1  CLHI    R6,1            :IF VALUE = 1
        JN      CPUTM7
        LIS     R6              :  INITIALIZE COUNT TO 0
CPUTM2  CLHI    R6,XTABSZ       :  WHILE INPUT <> CNTRL-D
        JG      CPUTME          :    CHECK FOR BUFFER FULL
CPUTM3  JALR    R5,R11          :    GET INPUT CHARACTER
        NHI     R0,007F         :    FORCE SEVEN-BIT ASCII
        CLHI    R0,STRTER       :    (TERMINATOR CHECK,
        JE      CPUTM6          :     FINISHED IF YES)
        JAL     R5,CECHO        :    ECHO IT
        TBT     R8,CIGNOR       :    IGNORE SPACES AND CARRIAGE RTNS
        JNBS    CPUTM3
        JAL     R5,HEXCHK       :    MUST BE HEX CHARACTER
        JL      CPUTME
        LR      R7,R8           :    SAVE 1ST CHARACTER
CPUTM4  JALR    R5,R11          :    GET 2ND OF PAIR
        NHI     R0,007F         :    FORCE TO 7-BIT ASCII
        CLHI    R0,STRTER       :    (TERMINATOR,
        JE      CPUTME          :     WRONG PLACE, ERROR
        JAL     R5,CECHO        :    ECHO IT
        TBT     R8,CIGNOR       :    IGNORE SPACES AND CARRIAGE RTNS
        JNBS    CPUTM4
        JAL     R5,HEXCHK       :    CHECK IF VALID
        JL      CPUTME
        SLHLS   R7,4            :    COMBINE INTO BYTE
        OR      R8,R7
        STB     R8,XTAB,R6      :    PUT BYTE IN X TABLE
        AIS     R6,1            :   INCREMENT COUNT/INDEX
        J       CPUTM2          :  END WHILE
CPUTM6  STB     R6,XTABC        :  STORE FINAL COUNT
        LHI     R0,008D         :  ECHO <CR><LF>
        JAL     R5,CECHO
     IF ANYMSG
        REMARK %P COMMAND - ALL ISIS MSGS ALLOWED.
        J       CGETL           :LOOK FOR NEXT COMMAND
     ELSE
        REMARK %P COMMAND - MSGS LIMITED TO TEXT TYPE ONLY.
        LB      R6,XTAB         :GET FIRST BYTE OF MSG
        JEFS    CPUTM5          :ERROR IF 0 (NEEDLE)
        CLHI    R6,FIRST        :OR IF NOT TEXT TYPE
        JGEFS   CPUTM5
        J       CGETL           :ITS ALL RIGHT, GET NEXT COMMAND
CPUTM5  LIS     R6              :BAD MESSAGE
        STB     R6,XTABC        : CLEAR MESSAGE
        LHL     R2,BOSSP        : SEND BOSS PORT
        LA      R3,MSGCE6       : TEXT ONLY MESSAGE
        JAL     R5,OCS          : SEND IT
        J       CBTCHE          : RETURN THROUGH BITCH END
     EI

HEXCHK  EQ      .               :CHECK CHARACTER IN R8, MUST BE HEX
        SHI     R8,0030         : IF < ASCII 0, BAD
        JLFS    HEXCBD
        CLHI    R8,0009         : IF <= 9, THEN GOOD
        JLEFS   HEXCGD
        NHI     R8,005F         : FORCE LOWER TO UPPER CASE
        SIS     R8,0007         : IF HERE, COULD HAVE BEEN A-F
        CLHI    R8,0009         : RULE OUT IN BETWEEN VALUES
        JLEFS   HEXCBD
        CLHI    R8,000F         : AND THOSE > F
        JLEFS   HEXCGD
HEXCBD  LCS     R8,1            : NEGATIVE VALUE IF BAD
HEXCGD  LR      R8,R8           : TEST RESULT
        JR      R5              :RETURN

CPUTM7  LB      R6,XTABC        :VALUE > 1
        JE      CBTCH5          : "NO DATA" BITCH
        SLHLS   R6,1            : *2, 2 CHARACTERS PER BYTE
        STB     R6,XTABBF       : PUT COUNT IN OUTPUT BUFFER
        LIS     R6,0            : START INDEX AT 0
        LA      RACBA,XTABBF+1  : OUTPUT BUFFER POINTER
        ST      R11,SAVE11      : SAVE REG 11
        LHI     R11,00B0        : USE ZERO TO FILL
        STH     R11,CBAFIL
        LHI     RADX,0010       : HEX RADIX
CPUTM8  EQ      .               : WHILE R6 < COUNT (XTABC)
        LIS     RSCBA,2         :  OUPUT FIELD WIDTH
        LB      RBCBA,XTAB,R6   :  BINARY BYTE VALUE
        JAL     RLCBA,CBA       :  PUT IN BUFFER
        AIS     RACBA,2         :  BUMP OUTPUT POINTER
        AIS     R6,1            :  BUMP INPUT INDEX
        CLB     R6,XTABC        :  TEST AGAINST COUNT
        JLBS    CPUTM8          : END WHILE
        LHI     R11,00A0        : RESTORE FILL TO BLANK
        STH     R11,CBAFIL
        L       R11,SAVE11      : RESTORE REG 11
        LHL     R2,BOSSP
        LA      R3,XTABBF
        JAL     R5,OCS          : OUTPUT BUFFER
        LHI     R0,008D         : SEND <CR><LF>
        LHL     R1,BOSSP        : TO BOSS PORT
        JAL     R5,CECHO
        J       CGETL           : LOOK FOR NEXT COMMAND

CPUTME  LIS     R6,0            : ERROR ON INPUT, ZERO COUNT
        STB     R6,XTABC        
        J       CBTCH2          : GO BITCH

:       Q - ZAP ALL PORTS AND EXIT   Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q.Q
CQUIT   LHL     R6,CVALUE       :GET VALUE
        JN      CBTCH1          :VALUE PARAMETER NOT MISSING
        LIS     R6,1            :SET FIRST PORT #
        STH     R6,CPNBEG       :FOR ZAPPING
      IF        ISIS2
        LHI     R6,NPORT-1      :SET LAST PORT #
      ELSE
        LHI     R6,NPORT-2      :SET LAST PORT #
      EI
        STH     R6,CPNEND       :FOR ZAPPING
CQUIT2  RBT     R6,AUTO         :TURN OFF ALL AUTO PORTS
        SIS     R6,1
        JGBS    CQUIT2
        ST      R10,SAVE10      :SAVE REG 10 SO WE'LL COME BACK
        LA      R10,CQUIT1      :GET OUR RETURN ADDRESS.
        J       CREBOF          :GO TURN THE REBUILD OFF

CQUIT1  EQ      .               :RETURN TO HERE FROM REBLD OFF
        L       R10,SAVE10      :GET REAL ADDRESS TO RETURN TO
        J       CZAP            :CLEAR ALL PORTS & EXIT

:       R - REPORT SELECT COMMAND    R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R
CREPRT  EQ      .
        LHI     R6,RPTALL       :  / TEST FOR NO COMMANDS ENTERED
        CLH     R6,CVALUE       : / IE. VALUE = ALL (SEE R CMD)
        JNFS    CREP05          :/ IF NOT SET TO ALL, SKIP

        STH     R6,RPTARY       :SET ALL REPORTS TO "ON"
        JR      R10             :DONE, GET NEXT COMMAND

CREP05  EQ      .
        LIS     R7,4            :SET INDEX, (WE'LL ALWAYS USE IT)
        LH      R6,CVALUE       :GET FIRST VALUE, CK FOR ZERO
        JN      CREP10          :NOT ZERO... GO SET FOR ALL 3 PARAM
:                       :FIRST PARAM WAS 0 THEREFORE CLEAR ALL REPORTS
        STH     R6,RPTARY       :USE THE 0 IN R6 TO INIT ARRAY
CREP10  EQ      .
        CLHI    R6,RPTMAX       :PARAM. > MAX ?
        JG      CBTCH3          :YES, BITCH BAD PARAM.
        SBT     R6,RPTARY       :SET THIS REPORT # ON.
:                               NOTE SETTING 0 ON IS 'OK'
        SIS     R7,2            :UPDATE INDEX
        JLR     R10             :EXIT IF ALL DONE
        LH      R6,CPNEND,R7    :GET NEXT PARAMETER
        JBS     CREP10          :NOT DONE YET, DO AGAIN

:       S - SPEED RATE   S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S
CSPEED  JAL     R8,CGETPP       :CHECK PARAMETERS
        CLHI    R6,7FFF         :MAX OUT AT 32K
        JG      CBTCH3          :PARAM OUT OF RANGE
        LHI     R8,$A60         :COMPUTE MAX CHARS PER MINUTE
        MHR     R6,R8
CSPED2  STH     R6,MAXCPM,R7,R7 :SET MAXCPM
        JALR    R8,R9           :GET NEXT PORT
        JBS     CSPED2          :GO PROCESS

:       T - TRACE ON   T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T
CTRACE  LIS     R8,0
        STH     R8,CWCELL       :INDICATE TRACE WITHOUT TIMING
CTRC1   JAL     R8,CGETPP
        LR      R6,R6
        JN      CBTCH1
        LIS     R6,0
CTRC2   CLH     R7,BOSSP        :  (R7=NEW [NEXT] PORT)
        JEFS    CTRC3           :IGNORE BOSS
        TBT     R7,PORTEC       :IF PORT IN ECHO MODE
        JNFS    CTRC3           : IGNORE IT
        SBT     R7,TRCEON       :TRACE ON
        RBT     R7,TRSYNC       :NOT SYNCHRONIZED YET
        STB     R6,IPATX,R7     :INITIALIZE INDEX
CTRC3   JALR    R8,R9           :NEXT
        JBS     CTRC2

:       U - UNTRACE  U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U.U
CUTRC   JAL     R8,CGETPP
        LR      R6,R6
        JN      CBTCH1
CUTRC2  CLH     R7,BOSSP
        JEFS    CUTRC3          :IGNORE BOSS
        RBT     R7,TRCEON
        RBT     R7,TRSYNC       :TURN OFF SYNC FLAG
CUTRC3  JALR    R8,R9
        JBS     CUTRC2

:       V - VERSION / HOST NUMBER   V.V.V.V.V.V.V.V.V.V.V.V.V.V
CVERS   EQ      .
        ST      R11,SAVE11              :SAVE REG 11
        LR      R6,R1           :SAVE PORT #
        LA      R3,MSGVR        :GET VERSION MSG
        LR      R2,R6           :SET PORT #
        JAL     R5,OCS          :OUTPUT A STRING
        LR      R1,R6           :RESTORE REG 1
        L       R11,SAVE11      :RESTORE REG 11
        J       CGETL           :DONE, LOOK FOR A CMD.

:       W - TRACE WITH TIMING  W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W.W
CWATCH  TS      CWCELL          :INDICATE PATTERN TIMING ENABLED
        J       CTRC1

:       X - XMIT ISIS MESSAGE   X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X.X
CXMSG   EQ      .
        LH      R6,CVALUE
        JN      CBTCH1          :NO VALUE EXPECTED
        LB      R6,XTABC        :GET COUNT
        JE      CBTCH5          :ERROR IF 0
        JAL     R8,CGETPP       : GET PORT NUMBERS
CXMSG2  TBT     R7,APORT        : IGNORE IF NOT ACTIVE
        JEFS    CXMSG3
        CLH     R7,BOSSP        : IGNORE IF BOSS
        JNFS    CXMSG4
CXMSG3  JALR    R8,R9           : NEXT PORT
        JBS     CXMSG2

CXMSG4  LR      R1,R7           :GET PORT NUMBER FOR ISIS
        LB      R2,XTAB         :GET MESSAGE TYPE
        JAL     R4,SLOR         :SEND PORT # AND MSG TYPE
        LB      R2,XTABC        :GET MESSAGE LENGTH
        SIS     R2,1            :REDUCE (MSG TYPE ALREADY SENT)
        JEFS    CXMSG6          :END OF MESSAGE
        LIS     R3,0+1          :SKIP MSG TYPE
CXMSG5  LB      R0,XTAB,R3      :GET NEXT CHAR TO XMIT
        JAL     R4,PUTCH        :OUTPUT NEXT CHAR
        AIS     R3,1            :SET INDEX UP BY 1
        SIS     R2,1            :REDUCE COUNT.. DONE ?
        JGBS    CXMSG5          :NOT YET, TRY AGAIN

CXMSG6  JAL     R4,ELOR         :FINNISH OFF RECORD
        J       CXMSG3          : NEXT PORT

:       Z - ZAP PORT  Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z
:                       (WARNING: THIS CAN BE CALLED FROM Quit CMD!)
CZAP    JAL     R8,CGETPP       :GET 1ST PORT NUMBER
        LR      R6,R6           :VALUE SPECIFIED ?
        JN      CBTCH1          :BITCH IF SO
CZAP05  CLH     R7,BOSSP        :IS THIS THE BOSS? 
        JNFS    CZAP04          :IF YES
        LIS     R6,0            :  CANCEL ALL REPORTS
        STH     R6,RPTARY
        JFS     CZAP06          :  AND IGNORE APORT BIT
CZAP04  TBT     R7,APORT        :ELSE CHECK IF PORT ACTIVE
        JE      CZAP10          :SKIP IF PREVIOUSLY INACTIVE
CZAP06  LR      R1,R7           :PORT#
        LR      R8,R9           :SAVE R9
        JAL     R6,ZAP          :PROCESS PORT ZAP
        LR      R9,R8           :RESTORE R9
CZAP10  JALR    R8,R9           :GET NEXT PORT
        J       CZAP05          :GO PROCESS

:       COMMAND PROCESS FAN OUT TABLE
CFAN    HC      CAUX-SEG1       :A - AUX CIRCUIT
        HC      CBURST-SEG1     :B - BURST SIZE
        HC      CCPS-SEG1       :C - CPS
        HC      CREB-SEG1       :D - REBUILD
        HC      CREBOF-SEG1     :E - REBUILD OFF
        HC      CPOFF-SEG1      :F - PORT OFF
        HC      CBTCH2-SEG1     :G - ILLEGAL
        HC      CHELP-SEG1      :H - HELP
        HC      CINTV-SEG1      :I - INTERVAL OF TIME TO REPORT
        HC      CBTCH2-SEG1     :J - ILLEGAL
        HC      CKILL-SEG1      :K - KILL PORTS AFTER SPECIFIED TIME
        HC      CLISPT-SEG1     :L - LIST PORT ATTRIBUTES
        HC      CNORM-SEG1      :M - NORMAL CIRCUIT
        HC      CPON-SEG1       :N - PORT ON
        HC      CAUTO-SEG1      :O - AUTOMATIC OUTPUT ON PORT
        HC      CPUTMS-SEG1     :P - PUT MESSAGE IN BUFFER FOR X CMD
        HC      CQUIT-SEG1      :Q - QUIT (ZAPS ALL PORTS)
        HC      CREPRT-SEG1     :R - ILLEGAL
        HC      CSPEED-SEG1     :S - SPEED (MAXCPM)
        HC      CTRACE-SEG1     :T - TRACE ON
        HC      CUTRC-SEG1      :U - UNTRACE
        HC      CVERS-SEG1      :V - VERSION/HOST
        HC      CWATCH-SEG1     :W - TRACE TIMING
        HC      CXMSG-SEG1      :X - XMIT AN ISIS MESSAGE
        HC      CBTCH2-SEG1     :Y - ILLEGAL
        HC      CZAP-SEG1       :Z - ZAP PORT

:       CHARACTERS TO IGNORE AT COMMAND LETTER INPUT (BIT ARRAY)
:               N   D C S                       D
:               U B L A P                       E
:               L S E N C ( 0 8 @ H P X ` h p x L
CIGNOR  XC      00040000800000000000000000000000        : CR,SPACE

:       LEGAL COMMAND CHARACTERS (BIT ARRAY)
:               N   D C S                       D
:               U B L A P                       E
:               L S E N C ( 0 8 @ H P X ` h p x L
:             NUL               @DHLPTX        DEL
CLEGAL  XC      00000000000000007EDFFFA000000000   !X!  : A,B,C,D,E,F,H,I,K,L,M,
:                                                         N,O,P,Q,R,S,T,U,V,W,Z
:       CHARACTERS TO ECHO (BIT ARRAY)
CECHOT  XC      00A40000FFFFFFFFFFFFFFFFFFFFFFFE
: ALL PRINTING CHARACTERS, BS, CR, LF, SP

:       CECHO   - ROUTINE TO ECHO CHAR
:       -----
:
:       INPUT   - R0 = ASCII CHAR
:                 R1 = ISIS PORT NUMBER
:
:       OUTPUT  - R8 = 7 BIT ASCII CHAR
:
:       NOTES   - LF OUTPUT AFTER ALL CR'S
:               - REG 0,3,4 NOT SAVED
:               - LINK ON R5

CECHO   NHI     R0,7F           :MASK TO 7 BITS
        LR      R8,R0           :SAVE IN R8
        TBT     R8,CECHOT       :IF CHAR SHOULD NOT BE ECHOED THEN
        JER     R5              : RETURN TO CALLER.

        LIS     R0,5            :PREPARE FOR 5 CHAR MAX MSG
        JAL     R4,SLOR         :START ISIS MSG
        LR      R0,R8           :GET CHAR TO ECHO
        JAL     R4,PUTCH        :OUTPUT
        CLHI    R8,0D           :CHAR A CR ?
        JNFS    CECHO2          :JUMP IF NOT
        LIS     R0,0A           :OUTPUT A LF TOO
        JAL     R4,PUTCH
CECHO2  LR      R3,R1           :SAVE ISIS PORT NUMBER
        JAL     R4,ELODR        :END DATA RECORD
        LR      R1,R3           :RESTORE ISIS PORT NUMBER
        JR      R5

:       REQUEST A PSEUDO-NEEDLE
:       R13 = INDEX INTO LOGIN (LOCAL KEY)
:       R9 = LINK
:       R0-R5 DESTROYED

REQCKT  LB      R2,LOGIN+LGTMSZ,R13    :GET CIRCUIT TYPE
        NHI     R2,7F           :MASK OFF REBUILD FLAG
        STB     R2,PNTYP        :STORE CKT TYPE IN REQUEST MSG
        STH     R13,PNLKEY      :STORE LOCAL KEY IN MSG
      IF        ISIS2
        LHL     R3,HOSTS,,
        STH     R3,PNHOST       :ORIG HOST
      EI
        LIS     R3,PNLEN        :ASSUME NORMAL CKT
        STB     R3,PNREQ        :MSG LENGTH
        LHI     R3,0CC          :TID - ASCII 1200 BAUD
        STB     R3,PNTID        :STORE TID IN REQUEST
        SIS     R2,NRMTYP       :NORMAL CKT?
        JE      REQNRM          :YES

:       REQUEST AN AUX - TYPE CIRCUIT
        LB      R3,LOGIN+1+LGTMSZ,R13   :AUX CKT LOGIN STRING LENGTH
        AIS     R3,PNLEN
        STB     R3,PNREQ        :TOTAL LENGTH OF MSG

        SIS     R3,PNLEN        :RESTORE LOGIN STRING LENGTH
REQAU1  LB      R2,LOGIN+1+LGTMSZ,R13,R3           :COPY LOGIN STRING...
        STB     R2,PNSIZ,R3     :. . . INTO PSEUDO NEEDLE REQUEST
        SIS     R3,1            :DEC INDEX
        JGEBS   REQAU1          :DEC INDEX

REQNRM  EQ      .               :REQUEST NORMAL CKT
        L       R2,FASTC,,      :GET TIME (= NOW)
        ST      R2,LOGIN+0,R13  :SAVE IT IN THE LOGIN AREA
        LIS     R2,0            :MSG TO PORT 0
        LA      R3,PNREQ        :ADDR OF MSG
        JAL     R5,OCM          :OUTPUT PSEUDO NEEDLE REQUEST
        JR      R9              :RETURN


:       PROCESS CIRCUIT ZAP
:       R1 = PORT#
:       R6 = LINK
:       R0-R5,R9,R10,R13 DESTROYED

ZAP     LCS     R13,1
        RBT     R1,APORT        :RESET PORT ACTIVE
        JEFS    ZAP0            :SKIP IF PREVIOUSLY INACTIVE
        AHM     R13,NAPRTS      :DECR # ACTIVE PORTS
        LIS     R0,3            :RESPOND WITH A ZAP TO CLEAR THE PORT
        LHI     R2,ZAPMSG
        JAL     R4,SLOR
        JAL     R4,ELOR
:
ZAP0    RBT     R1,PORTON       :RESET PORT ON
        RBT     R1,PSNEDL       :RESET PSEUDO NEEDLE RECEIVED
        LIS     R9,0
        STH     R9,ZAPTIM,R1,R1 :SET LIFETIME INFINITE
        CLH     R1,BOSSP        :IS THIS THE BOSS?
        JNFS    ZAP1            :NO
        STH     R9,BOSSP        :INDICATE NO BOSS
        AHM     R13,NAPRTS      :DECR # ACTIVE PORTS
        ST      R9,CYBTIM       :RESET YELLOW BALL TIMER
        LA      R10,CEAT        :SET CMD PROCESSOR TO EAT INPUT
        ST      R10,CMNDAD      :/

ZAP1    LH      R13,PKEY,R1,R1  :LOGIN STRING START INDEX
        JE      ZAP2            :NO LOGIN STRING
        STH     R9,PKEY,R1,R1   :NO LOGIN FOR THIS PORT
        RBT     R1,REBILD       :CLEAR REBUILD FLAG
        JEFS    ZAP3            :NO REBUILD IF NOT PREVIOUSLY SET
        SBT     R9,LOGIN+LGTMSZ,R13    :SET REBUILD FLAG IN LOGIN
        JAL     R9,REQCKT       :REQUEST ANOTHER CKT
        JFS     ZAP2

ZAP3    STB     R9,LOGIN+LGTMSZ,R13     :RELEASE LOGIN STORAGE
ZAP2    JR      R6              :RETURN
:       GET PORT PARAMETER
:       ------------------
:
:       1ST CALL         -JAL   R8,CGETPP
:                         INPUT  -R10 HAS ADDR OF NEXT COMMAND PROCESSOR
:                         OUTPUT -R6 HAS VALUE
:                                -R7 HAS NEXT PORT TO PROCESS
:                                -R9 HAS NEXT CALL ADDR
:
:       SUBSEQUENT CALLS -JALR  R8,R9
:                         INPUT  -R6 HAS PREVIOUS VALUE
:                                -R7 MUST BE AS LAST CALL LEFT IT
:                                -R10 HAS ADDR OF NEXT COMMAND PROCESSOR
:                         OUTPUT -R6 HAS VALUE
:                                -R7 HAS NEXT PORT TO PROCESS
:                                -R9 HAS NEXT CALL ADDR
:
:       NOTE - PROCESS DOES JAL R8,CGETPP INITIALLY, THEN DOES JALR R8,R9
:              CONTINUOUSLY.  CGETPP DOES RETURN TO CMND PROCESSOR VIA
:              R10 WHEN ALL PORT SPECIFIED BY COMMAND HAVE BEEN PROCESSED.
:
CGETPP  LHL     R7,CPNEND       :GET END PORT
      IF        ISIS2
        CLHI    R7,NPORT       :CMP TO MAX
      ELSE
        CLHI    R7,NPORT-1
      EI
        JGE     CBTCH3          :BITCH IF OUT OF RANGE
        LHL     R6,CPNBEG       :BEGINNING PORT
        JLE     CBTCH3          :MUST BE > 0
        CLR     R7,R6           :CHECK END >= BEG
        JL      CBTCH3          :BITCH END .LT. BEG
        LHL     R6,CVALUE       :GET DATA VALUE

:       FIND NEXT PORT.  CHECK APORT ARRAY IN SOME COMMANDS.
CGETP2  JALR    R9,R8           :GIVE CALLER PORT
        SIS     R7,1            :GO TO NEXT PORT
        CLH     R7,CPNBEG       :PAST BEG PORT ?
        JGEBS   CGETP2          :JUMP NOT DONE
        JR      R10             :GO ANALYZE NEXT COMMAND


        SUBTTL  CODE AND DATA SECTION   (OUTPUT TO ISIS)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                        O U T P U T   T O   I S I S                        ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

OUTPUT  LHL     R0,NAPRTS       :PUT # ACTIVE PORTS ON FRONT PANEL
        STH     R0,FPANEL,,
        LH      R0,FASTC+2,,
        SH      R0,CLK1
        LHR     R0,R0
        JL      OUT012          :SKIP IF NOT A NEW SECOND
:       1 SECOND LOGIC.  ZAP PORTS WHOSE LIFETIME HAS EXPIRED.
        LHI     R0,RATE
        AHM     R0,CLK1         :UPDATE 1 SEC SENTINEL
        LHI     R12,NPORT-1
OUT010  CLH     R12,BOSSP
        JE      OUT011          :SKIP BOSS PORT
        LH      R0,ZAPTIM,R12,R12
        JLE     OUT011          :SKIP IF UNLIMITED LIFETIME
        SIS     R0,1
        STH     R0,ZAPTIM,R12,R12       :ELSE COUNT DOWN LIFETIME
        JN      OUT011          :SKIP IF NOT EXPIRED YET
        LIS     R0,3
        LR      R1,R12          :COPY PORT NO.
        LHI     R2,ZAPMSG
        JAL     R4,SLOR
        JAL     R4,ELOR
        LIS     RADX,$A10
        LIS     RSCBA,3
        LA      RACBA,1+KILLED
        JAL     RLCBA,CBA       :CONVERT PORT # TO ASCII
        LHL     R2,BOSSP
        JEFS    OUT009          :SKIP IF NO BOSS
        LA      R3,KILLED
        JAL     R5,OCS  :TELL BOSS
        LR      R1,R12          :RESTORE PORT #
OUT009 JAL     R6,ZAP          :PROCESS CIRCUIT ZAP
OUT011  SIS     R12,1
        JG      OUT010          :DO FOR ALL PORTS

        LCS     R0,1            :0FFFFFFFF (-1)
        AHM     R0,REPTIM       :DECR REPORT TIMER
        JN      OUT012          :IF <> 0, NOT TIME YET
        STH     R0,PTSERV       :INIT PORTS SERVICED ARRAY (SET TO NONE SVCD)
        STH     R0,HDRFLG       :SET FLAG TO OUTPUT REPORT HEADER
        LIS     R12,0           :SET UP STATUS FOR REPORT
        STH     R12,RGPX        :INIT GROUP INDEX
        STH     R12,NOPRTS      :INIT NO. OF PORTS
:       1 MINUTE LOGIC.
OUT012  L       R5,FASTC,,      :R5 = 30 BITS OF FASTC
        SLLS    R5,2
        SRLS    R5,2
        LIS     R0,0            :PREPARE DOUBLE WORD DIVIDEND
        LR      R1,R5
        LI      R4,RATE*$A60    :R4 = TICKS PER MINUTE
        DR      R0,R4
        LR      R0,R1
        MR      R0,R4           :R1 = MINUTE VALUE
        C       R1,MINUTE
        JE      OUT200          :JUMP IF NOT

:       NEW MINUTE, FOR ALL PORTS: ROMIN = ROMIN - CPM 
:       IF ROMIN IS BEHIND BY MORE THAN 1 SEC + THAT WHICH
:       CAN BE MADE UP IN A MINUTE (MAXCPM-CPM+CPS), ROMIN = 0
        ST      R1,MINUTE       :SET NEW MINUTE VALUE

        LHI     R12,(NPORT-1)*2        :PORT HALF WORD INDEX
        LHI     R11,NPORT-1            :PORT NUMBER

OUT110  TBT     R11,PORTON      :PORT TURNED ON ?
        JE    OUT120            :JUMP IF NOT

        LHL     R2,ROMIN,R12    :GET CHARS OUTPUT FOR LAST MINUTE
        LHL     R3,CPM,R12      :GET CHARS SHOULD BE OUTPUT PER MINUTE
        SR      R2,R3           :R2 = CHARS AHEAD (+) OR BEHIND (-)

        SH      R3,MAXCPM,R12   :R3 = MAX ALLOWED CHARS BEHIND
        SH      R3,CPS,R12
        CR      R2,R3           :TOO FAR BEHIND IN OUTPUT ?
        JGEFS   .+4             :NOPE, JUMP
        LIS     R2,0            :YEP, SET NOT BEHIND (0)
        STH     R2,ROMIN,R12    :SET CHARS OUTPUT FOR NEXT MINUTE

OUT120  SIS     R11,1           :UPDATE INDEX'S
        SIS     R12,2
        JG      OUT110

:       FOR EACH PORT, CALCULATE WHAT ROMIN SHOULD BE FOR THIS TIME
:       IF ROMIN < CALCULATED VALUE, OUTPUT A BURST OF CHARACTERS
OUT200  L       R4,MINUTE       :R5 = TICKS SINCE MINUTE
        SR      R5,R4
        JGEFS   .+8
        AI      R5,40000000     :(ACCOUNT FOR 30 BIT WRAP)
        LHI     R6,RATE         :R6 = TICKS PER SECOND
        LHL     R12,LPORT       :GET LAST PORT SERVICED
OUT205  JGFS    OUT210          :IF PORT 0 WAS LAST
        LHI     R12,NPORT       :  FORCE TO HIGHEST PORT+1
OUT210  SIS     R12,1           :PROCESS NEXT PORT
        TBT     R12,APORT       :IF ACTIVE PORT
        JEFS    OUT220
        TBT     R12,PORTON      :   AND PORT IS ON
        JEFS    OUT220
        TBT     R12,BKPRSR      :   AND PORT NOT BACKPRESSURED
        JN      OUT230          : THEN TRY TO OUTPUT TO PORT

OUT220  STH     R12,LPORT       :THIS PORT SERVICED
        CLH     R12,XPORT       :CHECK IF CYCLED THROUGH PORTS
        JN      OUT205          :NO, TRY NEXT ONE
        AIS     R12,1           :YES, BUMP CYCLE INDEX
        CLHI    R12,NPORT       :CHECK FOR PORT NO. WRAP
        JLFS    OUT225
        LIS     R12,0           :YES, FORCE TO 0
OUT225  STH     R12,XPORT       :SET FOR NEXT CYCLE THROUGH
        J       REPORT          :DONE TIL NEXT TIME THROUGH

OUT230  LR      R1,R12          : R1 = PORT HALFWORD INDEX
        AR      R1,R1

:       EXPECTED OUTPUT = (TICKS * CPS + RATE/2)/RATE
        LHL     R2,CPS,R1
        JEFS    OUT300          :JUMP CPS=0, LET BACKPRESSURE RUN SPEED
        MHR     R2,R5           :R2 = TICKS * CPS
        AHI     R2,(RATE+1)/2   :ADD IN ROUNDING FOR DIVIDE
        DHR     R2,R6           :R3 = EXPECTED CPS

        SH      R3,ROMIN,R1     :IS PORT BEHIND ?
        JLE     OUT220          :JUMP IF NOT

:       OUTPUT CHARACTER BURST TO PORT
OUT300  JAL     R4,SPACE        :GET SPACE REMAINING
        SHI     R0,20           :ALLOWANCE FOR ZAPPERS, ETC.
        LHL     R2,BURST,R1     :GET BURST VALUE
        SR      R0,R2
        JLE     REPORT          :SKIP IF NO ROOM
        L       R0,FASTC,,      :SAVE FASTC SEND TIME IF TRACE TIMING ENABLED
        ST      R0,CWSEND       : SO AS NOT TO BE CONFUSED BY INTERRUPTS
        AHM     R2,ROMIN,R1     :UPDATE REAL OUTPUT FOR MINUTE
        AM      R2,TOMIN,R1,R1  :INCR # OUTPUT CHARS FOR THIS REPORT
        AM      R2,OCHAR,R1,R1  :UPDATE TOTAL OUTPUT CHARS
        AM      R2,PDCOUT       :UPDATE OUTPUT CHARS FOR PERIOD

        LHI     R0,3,R2         :R0 = BYTES OF RING NEEDED
        SRHLS   R1,1            :R1 = ISIS PORT NUMBER
        JAL     R4,SLOR         :START OUTPUT RECORD

        LB      R3,CPATX,R1     :GET CHAR INDEX FOR PORT
        LB      R5,APATX,R1     :GET ADDITION FOR HOST ORDINAL

OUT320  LB      R0,CPATRN,R3    :GET NEXT CHAR OF OUTPUT PATTERN
      IF        SNDORD  :IF SENDING ORDINAL ONLY
        LR      R0,R5
      ELSE
        CLHI    R0,8D
        JE      OUT321          :IF CR
        CLHI    R0,8A
        JE      OUT321          :IF LF
        TBT     R1,PRTDAT       : IF INCLUDE PORT # IS SET
        JEFS    OUT323
        CLHI    R3,5            :  AND 2<=R3<=5
        JGFS    OUT323
        CLHI    R3,2
        JLFS    OUT323          : THEN
        SLLS    R1,2            :   MAKE PORT # A WORD INDEX
        LB      R0,CPORTO-2,R1,R3       : GET PORT # CHARACTER
        SRLS    R1,2            :    RESTORE PORT #
        JFS     OUT321          :    AND GO SEND IT

OUT323  LH      R4,CWCELL       :TRACE TIMING ENABLED?
        JGEFS   OUT322          :NO
        LHI     R4,-(CPATMX-4),R3 :INDEX WITHIN FASTC RANGE?
        JLFS    OUT322          :NO
        LB      R0,CWSEND,R4    :YES - GET NEXT FASTC BYTE
        JFS     OUT321
OUT322  AR      R0,R5           :BIAS PATTERN BASED ON HOST ORDINAL
OUT321  HS
      EI
        JAL     R4,PUTCH        :OUTPUT
        AIS     R3,1            :UPDATE PATTERN POINTER
        CLHI    R3,CPATMX
        JLFS    .+4
        LIS     R3,0
        SIS     R2,1            :DEC BURST CNT
        JG    OUT320

        STB     R3,CPATX,R1     :SAVE PATTERN INDEX FOR NEXT TIME
        JAL     R4,ELOR         :END OUTPUT RECORD
        LH      R4,CWCELL       :TRACE TIMING ENABLED?
        JGE     OUT220          :NO
        SHI     R3,CPATMX-4     :DID WE LEAVE OFF IN FASTC RANGE?
        JL      OUT220          :NO - O.K.
        LR      R4,R1
        AR      R4,R4           :PORT NUMBER * 2
        LIS     R2,4
        SR      R2,R3           :R2 HAS NUMBER OF BYTES REMAINING TO
:                                 COMPLETE SENDING OF FASTC THIS BURST
        AHM     R2,ROMIN,R4     :ADJUST COUNTERS...
        AM      R2,TOMIN,R4,R4
        AM      R2,OCHAR,R4,R4
        AM      R2,PDCOUT       :UPDATE OUTPUT CHARS FOR PERIOD
        LHI     R0,3,R2         :SET UP NEW RECORD SIZE IN R0
        LR      R10,R3          :R3 USED BY SLOR
        JAL     R4,SLOR         :START NEW LOGICAL RECORD
OUT330  LB      R0,CWSEND,R10   :GET NEXT FASTC BYTE
        JAL     R4,PUTCH        :PUT FASTC BYTES IN OUTPUT RING
        AIS     R10,1           :INCREMENT INDEX
        CLHI    R10,4
        JNBS    OUT330          :MORE TO DO
        JAL     R4,ELOR         :END OUTPUT RECORD
        LIS     R3,0
        STB     R3,CPATX,R1     :RESET INDEX
        J       OUT220          :PROCESS ALL PORTS
        SUBTTL  CODE AND DATA SECTION   (REPORT TO CONTROLLER)
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                  R E P O R T   T O   C O N T R O L L E R                  ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

REPORT  
        LHL     R2,BOSSP        :GET BOSS PORT #
        JE      DMISS           :SKIP IF NO BOSS
        TBT     R2,BKPRSR       :IS BOSS PORT BACKPRESSURED?
        JE      DMISS           :IF =0, YES - DISMISS

:- - - HELP - - -:              :H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H
        LH      R8,MSGHX        :GET HELP MESSAGE INDEX
        JGE     REP0            :IF NOT NEG, THEN NOTHING TO OUTPUT

        A       R8,MSGEND       : GET ADDRESS OF NEXT SEG
        LR      R3,R8           :AND SAVE FOR OCS
        JAL     R5,OCS          :OUTPUT MSG SEGMENT
        LB      R0,0,R8         :GET SIZE OF SEGMENT
        AIS     R0,1            :ADD 1 FOR BYTE COUNT
        AHM     R0,MSGHX        :UPDATE MSG INDEX
        J       DMISS           :DISMISS

:- - - LIST - - -:              :L.L.L.L.L.L.L.L.L.L.L.L.L.L.L.L.L.L
REP0    LH      R8,LISTPT       :ANY PORTS FOR LIST?
        JL      REP1A           :NOPE - CHECK REPORT

REP00   LH      R1,LISTFL       :ACTIVE OR AUTO ?
        JEFS    REP01           :BRANCH IF ACTIVE
        TBT     R8,APORT        :ELSE IGNORE ACTIVE PORTS
        JNFS    REP01A
        TBT     R8,AUTO         : AND LIST AUTO PORTS
        JN      REP02
        JFS     REP01A          :NEXT PORT
REP01   TBT     R8,APORT        :IS PORT ACTIVE?
        JN      REP02           :YES, LIST INFO ABOUT IT
REP01A  SIS     R8,1            :DECR PORT #
        CLH     R8,LISTBG       :ANY MORE TO LIST?
        JGE     REP00           :YES
        TS      LISTPT          :NO, SET LISTPT = -1
        J       DMISS

REP02   LIS     RADX,$A 10      :RADIX = DECIMAL

        LIS     RSCBA,3         :CONVERT PORT# 
        LA      RACBA,LSTDTA+3  :DECIMAL STRING DESTINATION
        LR      RBCBA,R8        :BINARY PORT#
        JAL     RLCBA,CBA

        LIS     RADX,8          :RADIX = OCTAL FOR NODE #
        LIS     RSCBA,4         :ORIG HOST/NODE
        AIS     RACBA,4
        LHL     RBCBA,ORIG,R8,R8
        JAL     RLCBA,CBA
        LIS     RADX,$A 10      :RESTORE DECIMAL RADIX

        LIS     RSCBA,3         :BURST SIZE
        AIS     RACBA,7
        LHL     RBCBA,BURST,R8,R8
        JAL     RLCBA,CBA

        LIS     RSCBA,5         :CPS
        AIS     RACBA,4
        LHL     RBCBA,CPS,R8,R8
        JAL     RLCBA,CBA

        LIS     RSCBA,5         :ZAPTIME
        AIS     RACBA,6
        LHL     RBCBA,ZAPTIM,R8,R8
        JAL     RLCBA,CBA

        LIS     RSCBA,5         :MAXCPM
        AIS     RACBA,7
        LHL     RBCBA,MAXCPM,R8,R8
        JAL     RLCBA,CBA

        AIS     RACBA,7         :INC TO NEXT ADDR IN STRING
        LA      R1,PORTON       :ADDR OF ARRAY
        JAL     R9,STONOF       :STORE ON/OFF IN STRING

        AIS     RACBA,7 
        LA      R1,REPON        :REPORT ON/OFF
        JAL     R9,STONOF

        AIS     RACBA,6
        LA      R1,AUTO         :AUTO ON/OFF
        JAL     R9,STONOF

        AIS     RACBA,6
        LA      R1,TRCEON       :TRACE ON/OFF
        JAL     R9,STONOF

        AIS     RACBA,7
        LA      R1,REBILD       :REBUILD ON/OFF
        JAL     R9,STONOF

        AIS     RACBA,7         :NEXT STRING ADDR
        LIS     RSCBA,3         :FIELD WIDTH
        LIS     RBCBA,2         :BINARY VALUE
        TBT     R8,PORTEC       :IF PORT ECHO SET
        JNFS    REP02A          :  VALUE IS 2
        SIS     RBCBA,1
        TBT     R8,PRTDAT       :IF PORT DATA INCLUDED IN PATTERN
        JNFS    REP02A          :  VALUE IS 1
        SIS     RBCBA,1         :OTHERWISE VALUE IS 0
REP02A  JAL     RLCBA,CBA       :WRITE IT IN

        LA      R3,LSTDTA       :ADDR OF OUTPUT STRING
        LHL     R2,BOSSP        
        JAL     R5,OCS          :OUTPUT DATA TO BOSS

        SIS     R8,1            :DECR PORT 
        CLH     R8,LISTBG       :ANY MORE PORTS TO LIST?
        JGEFS   REP03           :YES
        LCS     R8,1            :NO - SET LISTPT = -1
REP03   STH     R8,LISTPT       :SAVE NEXT PORT TO LIST
        J       DMISS   

:       STORE ON/OFF IN OUTPUT STRING [SUBROUTINE]
:               R1 = ADDR OF BIT ARRAY
:               R8 = PORT #
:               R9 = LINK
:               RACBA = ADDR OF DESTINATION IN STRING
:               DESTROYS R4,R11

STONOF  LIS     R11,2           :# CHARS -1
        LIS     R4,0            :ASSUME ON
        TBT     R8,0,R1         :TEST BIT
        JNFS    LSTLP           :JUMP IF ON
        AIS     R4,3            :MOVE INDEX TO OFF
LSTLP   LB      R0,ONOFF,R4,R11 :GET ON/OFF CHAR
        STB     R0,0,RACBA,R11  :STORE IN DESTINATION
        SIS     R11,1           :DECR CHAR INDEX
        JGEBS   LSTLP           :LOOP UNTIL DONE
        JR      R9

REP1A   EQ      .
        LH      R0,REPTIM       :TIME TO REPORT?
        JG      DMISS           :IF NO

:               REPORT TYPE 1 - 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1
:               (PRINT REPORT HEADINGS)
RPT01
        LIS     R3,01           : / IS THE BIT FOR REPORT
        TBT     R3,RPTARY       :/ SET ON ?
        JE      RPT02           :NO, SKIP REPORT HEADINGS

        LHL     R3,HDRFLG       :GET HEADER FLAG
        JE      RPT02           :SKIP IF HEADER ALREADY OUTPUT
        LIS     R3,0    
        STH     R3,HDRFLG       :INDICATE HEADER HAS BEEN OUTPUT
        LA      R3,REPHDR       :OUTPUT REPORT HEADER...
        LHL     R2,BOSSP        :TO BOSS PORT
        JAL     R5,OCS          :/

:               REPORT TYPE 2 - 2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2
:               (PRINT REPORT DETAIL LINE)
RPT02
        LHL     R6,PTSERV       :GET PORTS SERVICED ARRAY
        LHL     R7,RGPX         :GET GROUP INDEX
        LHL     R12,NOPRTS      :GET NO. OF PORTS
REP1
        LHL     R1,APORT,R7     :REPORT ACTIVE PORTS ONLY
        NR      R1,R6           :SERVICED?
        JNFS    REP2            :IF REQUESTED AND NOT SERVICED
        AIS     R7,2            :NEXT GROUP
        LCS     R6,1
        CLHI    R7,(NGRP-1)*2   :DONE?
        JLEBS   REP1            :NOPE, GET NEXT PORT
        J       RPT03           :YEP, GO DO TOTAL AND NEXT REPORT

REP2    JAL     R3,BIDH
        XH      R6,HMASK,R2,R2  :MARK PORT SERVICED
        LR      R8,R7
        SLHLS   R8,3
        AR      R8,R2           :CONVERT TO PORT NUMBER
        LR      RBCBA,R8
        LIS     RADX,$A10
        LA      RACBA,PSPDMS+2
        LIS     RSCBA,3
        JAL     RLCBA,CBA

        SLHLS   R8,2            :MAKE WORD INDEX
        L       R9,TIMIN,R8     :INPUT CHARS FOR THIS REPORT
        AH      R9,REPRAT       :ROUND UP
        SIS     R9,1            :/
        DH      R9,REPRAT       :CONVERT TO CPS
        AM      R10,TTLCPS      :UPDATE TOTAL THROUGHPUT
        LR      RBCBA,R10
        LA      RACBA,PSPDMS+6
        LIS     RSCBA,4
        JAL     RLCBA,CBA       :CONVERT BINARY TO ASCII

        LIS     R0,0
        ST      R0,TIMIN,R8     :INIT INPUT CHARS

        L       R9,TOMIN,R8     :OUTPUT CHARS FOR THIS REPORT
        AH      R9,REPRAT       :ROUND UP
        SIS     R9,1            :/
        DH      R9,REPRAT       :CONVERT TO  CPS
        AM      R10,TTLCPS      :UPDATE TOTAL THROUGHPUT
        LR      RBCBA,R10
        LA      RACBA,PSPDMS+$A11
        LIS     RSCBA,4
        JAL     RLCBA,CBA       :CONVERT BINARY TO ASCII

        LIS     R0,0
        ST      R0,TOMIN,R8     :INIT OUTPUT CHARS
: - - TEST FOR THIS REPORT NOT ACTIVE - - :
        LIS     R0,2            :  / IS THE BIT FOR THIS
        TBT     R0,RPTARY       : / REPORT SET ON ?
        JE      REP4            :/ NO, SKIP OUTPUT & DETAIL
        
        LHR     R0,R8           : / SET UP PORT # FOR
        SRHLS   R0,2            :/ WORD INDEX
        TBT     R0,REPON        :TEST FOR THIS PORT TO BE REPORTED
        JE      REP4            :NO, SKIP REPORT

        L       RBCBA,ICHAR,R8
        LIS     RSCBA,8
        AIS     RACBA,5
        JAL     RLCBA,CBA       :OUTPUT TOTAL INPUT CHARS

        L       RBCBA,OCHAR,R8
        LIS     RSCBA,8
        AIS     RACBA,9
        JAL     RLCBA,CBA       :OUTPUT TOTAL OUTPUT CHARS

        SRHLS   R8,2            :RESTORE PORT #

        LHL     RBCBA,ERRCNT,R8,R8
        LIS     RSCBA,5
        AIS     RACBA,9
        JAL     RLCBA,CBA       :OUTPUT # LOOPBACK ERRORS

        AIS     RACBA,7
        LA      R1,TRSYNC
        JAL     R9,STONOF       :OUTPUT TRACE SYNCH FLAG

        LA      R3,PSPDMS       :ADDR OF MSG
        LHL     R2,BOSSP        :BOSS PORT #
        JAL     R5,OCS          :OUTPUT PORT SPEED MESSAGE
REP4
        AIS     R12,1           :COUNT THIS PORT
        STH     R12,NOPRTS      :STORE # PORTS REPORTED
        STH     R6,PTSERV       :SAVE REPORT STATUS FOR NEXT TIME
        STH     R7,RGPX         :  /
        
        J       DMISS

:               REPORT TYPE 3 - 3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3
:               (PRINT TOTAL AND AVERAGE CPS)
RPT03
        LH      R0,REPRAT       :GET REPORT RATE
        AH      R0,REPTIM       :ALLOW FOR REPORT DELAY
        STH     R0,REPTIM       :RESTART REPORT TIMER
        L       RBCBA,TTLCPS
        JE      RPT04           :IF TOTAL IS 0
        LIS     R0,0
        ST      R0,TTLCPS       :REINIT TO ZERO
        LIS     R0,3            :  / IS THE BIT FOR THIS REPORT
        TBT     R0,RPTARY       : / SET ON ?
        JE      RPT04           :/ NO, TRY NEXT REPORT

        LIS     RADX,$A10
        LA      RACBA,TSPDMS+$A13
        LIS     RSCBA,5
        JAL     RLCBA,CBA       :CONVERT TO ASCII

        LR      R10,RBCBA
        DHR     R10,R12         :GET AVERAGE CPS  (TTLCPS/# PORTS)
        LR      RBCBA,R11
        LIS     RADX,$A10
        LA      RACBA,TSPDMS+$A34
        LIS     RSCBA,4
        JAL     RLCBA,CBA       :CONVERT BINARY TO ASCII
        LHL     R2,BOSSP
        LA      R3,TSPDMS
        JAL     R5,OCS          :OUTPUT TOTAL/AVERAGE SPEEDS

:               REPORT TYPE 4 - 4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4
:               (PRINT TOTAL CHARACTERS IN AND OUT)
RPT04
        LIS     R3,4            :  / IS THE BIT FOR THIS REPORT
        TBT     R3,RPTARY       : / SET ON ?
        JE      RPT05           :/ NO, TRY NEXT REPORT
        LIS     RADX,$A10       :SET DECIMAL FOR OUTPUT
        LA      RACBA,CHPDMI    :SET ADDRESS FOR OUTPUT
        LIS     RSCBA,$A10      :SET OUTPUT LENGTH TO 10
        L       RBCBA,PDCIN     :SET NUMBER OF INPUT CHARS
        JAL     RLCBA,CBA       :OUTPUT STRING
        LIS     RBCBA,0         :CLEAR # OF IN CHARS FOR PERIOD
        ST      RBCBA,PDCIN     :/

        LA      RACBA,CHPDMO    :SET ADDRESS FOR OUTPUT
        LIS     RSCBA,$A10      :SET OUTPUT LENGTH TO 10
        L       RBCBA,PDCOUT    :SET NUMBER OF OUTPUT CHARS
        JAL     RLCBA,CBA       :OUTPUT STRING
        LIS     RBCBA,0         :CLEAR # OF OUT CHARS FOR THE
        ST      RBCBA,PDCOUT    : NEXT PERIOD

        LHL     R2,BOSSP        :GET BOSS PORT FOR OUTPUT
        LA      R3,CHPDM       :ADDRESS OF STRING TO SEND
        JAL     R5,OCS          :OUTPUT IT TO THE BOSS


:               REPORT TYPE 5 - 5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5.5
:               (PRINT ROUND TRIP TRACE TIMES)
RPT05
        LIS     R0,5    : / IS THE BIT FOR REPORT 5
        TBT     R0,RPTARY       :/ SET ON ?
        JE      RPT06           :NO, GO TRY REPORT 6

:       REPORT TRACE TIMINGS
        LIS     RADX,$A10       :MAN-READABLE RADIX (DECIMAL)
        LHL     RBCBA,CWTIMN    :GET NUMBER OF PATTERNS TIMED
        JE      RPT06           :DO NOT REPORT 0 OCCURRENCES
        LA      RACBA,CWM1      :ADDRESS TO STORE ASCII DATA
        LIS     RSCBA,5         :5 BYTE FIELD
        JAL     RLCBA,CBA       :CONVERT TO DECIMAL ASCII
        L       (RBCBA-1),CWTIMT :GET TOTAL TIME FOR ALL OCCURRENCES
        DH      (RBCBA-1),CWTIMN : AND DIVIDE BY NUMBER OF OCCURRENCES
        LA      RACBA,CWM2      :GET MESSAGE 2 ADDR
        JAL     R7,PRNTIM       :PRINT TIME IN SEC.
        LA      RACBA,CWM3
        LHL     RBCBA,CWTHWM    :GET PEAK TIME AND
        JAL     R7,PRNTIM       : PRINT IN SECONDS
        LIS     R0,0
        ST      R0,CWTIMT       :CLEAR FIELDS FOR NEXT REPORTING PERIOD
        STH     R0,CWTIMN
        STH     R0,CWTHWM
        LHL     R2,BOSSP        :REPORT TO BOSS PORT
        LA      R3,CWMSG
        JAL     R5,OCS          :OUTPUT TRACE-TIME MESSAGE

:               REPORT TYPE 6 - 6.6.6.6.6.6.6.6.6.6.6.6.6.6.6.6.6.6
:               (PRINT LOGIN TIMES SUMMARY)
RPT06   EQ      .
        LIS     R3,06           :  / IS THE BIT SET ON FOR
        TBT     R3,RPTARY       : / THIS REPORT ?
        JE      RPT99           :/ NO, GOTO END OF REPORTING
        LHI     R8,RPTCOK-MAKCOK        :SET DISPLACMENT FOR RPT
        JAL     R4,LOGLIN       :GO PRINT 1 LINE (TIMINGS
        J       RPT07           :GO ON TO NEXT REPORT (REPORT # 7)

LOGLIN  EQ      .       PRINT ON LINE OF LOGIN TIMING DATA
        STM     R0,RPTSAV       :SAVE ALL CALLING REGISTERS
:       NOTE: * * * REGISTER 8 IS OFFSET PAST MAKCOK
:                   This routine is used for both report #6
:                   and the reports after M or A commands
        LIS     RADX,$A10       :MAN-READABLE RADIX (DECIMAL)
        LHL     RBCBA,MAKCOK,R8 :GET NUMBER OF LOGINS TIMED
        AH      RBCBA,MAKFAL,R8 : ADD NUMBER OF FAILURES
        JE      LOGLI1          :DO NOT REPORT 0 OCCURRENCES
        SH      RBCBA,MAKFAL,R8 :BACK TO # OF LOGONS ONLY
        LA      RACBA,RPTFD1    :ADDRESS TO STORE ASCII DATA
        LIS     RSCBA,5         :5 BYTE FIELD
        JAL     RLCBA,CBA       :CONVERT TO DECIMAL ASCII
        LH      RBCBA,MAKFAL,R8 :GET NUMBER OF LOGON FAILURES
        LA      RACBA,RPTFD4    :FIELD 4 TO PRINT IN
        LIS     RSCBA,3         :SET FIELD SIZE
        JAL     RLCBA,CBA       :GO OUTPUT # TO BUFFER
        LHL     RBCBA,MAKCOK,R8 : / IF THERE ARE ZERO LOGINS
        JEFS    LOGLI2          :/ SKIP THE DIVIDE
        L       (RBCBA-1),MAKTIM,R8 :GET TOTAL TIME FOR ALL LOGINS
        DH      (RBCBA-1),MAKCOK,R8 : AND DIVIDE BY NUMBER OF LOGINS
LOGLI2
        LA      RACBA,RPTFD2    :GET MESSAGE 2 ADDR
        JAL     R7,PRNTIM       :PRINT TIME IN SEC.
        LA      RACBA,RPTFD3    :GET MESSAGE 3 ADDRESS
        L       RBCBA,MAKHWM,R8 :GET PEAK TIME AND
        JAL     R7,PRNTIM       :PRINT IN SECONDS
        LIS     R0,0            :READY TO SET ALL FIELDS BACK
        ST      R0,MAKTIM,R8    :CLEAR FIELDS FOR NEXT RPT PERIOD
        STH     R0,MAKCOK,R8    :CLEAR NUMBER OF LOGINS
        STH     R0,MAKFAL,R8    :CLEAR NUMBER OF FAILED CIRCUITS
        ST      R0,MAKHWM,R8    :CLEAR HIGH WATER MARK
        LHL     R2,BOSSP        :REPORT TO BOSS PORT
        LA      R3,RPTFD0       :GET REPORT ADDRESS
        JAL     R5,OCS          :OUTPUT LOGON-TIME MESSAGE
LOGLI1
        LM      R0,RPTSAV       :RESTORE ALL REGISTERS
        JR      R4              :RETURN

RPT07
RPT99

:       DISMISS TO LET DISPATCHER EMPTY OUTPUT RING AND FILL INPUT
DMISS   SVC     DISMISS,0,,
        J       INPUT

        SEG     2               :DEFINE DUMMY SEG 2
        BS      1
 B'{"Z