TITLE TF -- CODE TO TRANSMIT FILE

ENTRY TF,ELOR,SLOR,SPOR,EPOR,RUPCNT,SNAK,SACK,INITRN
ENTRY GC60,GCOD,GC,SCOD,SBYTE,SINIT,RINIT,GBCOD
ENTRY RCR,SCR,DSTRY,RRANKT,VERIF
ENTRY SNDYEL,SUCROU,OPNROU,DEFER
;EXTERNAL ROUTINES
EXTERN BGC,CW,FLUSH,ABIOIP,LVBI,OINIT,IINIT
EXTERN SPA,UPA,COPYST,CKTIM
EXTERN SWBAC,GA,GB,SIZE,ITF
EXTERN BAD,UIO
EXTERN FPF,OPF,FWER,FPEW,FERER,STARTT
EXTERN ZAPINT,CPOPJ1
; CELLS CONTAINING EXECUTABLE INSTRUCTIONS:
EXTERN ACKROU,G,TRANS
; EXTERNAL STORAGE
EXTERN CCNT,RECL,RECL1,LRECL,COUNTB,BP,BP0,CCR,CCR0,RECSIZ
EXTERN TRTOT,ETIME,RTT,TIMFLG
EXTERN CHECK,ICHECK,ICOUNT,TOTCCT
EXTERN URECL,UCCR0,UBP0,URTT
EXTERN DNOR,RCVR,RPTR,RPTR0,DPTR,DPTR0,DCPTR,RCPTR,DCC
EXTERN CHKCOUNT,VERIF1,VERIF2,VERIF3
EXTERN TMODE,RPARAM,TPARAM,TBLOCK,RBLOCK,BF,UTBLOCK
EXTERN MASTER,DONOR,SW10,SW370
EXTERN T,PANIC,ESCRTN
EXTERN ST,STE,RANKT,AUXPRT
EXTERN RBLIC,CPTOP1,CPTOP2
EXTERN NAKCTR,SCOD1,LCOD,LCOD1,IRTT

; TRANSMIT FILE.  RECEIVER MUST BE IN BLOCK INPUT MODE
TF: PUSHJ P,ITF         ;INITIALIZE TRANSMITTERS AND FILE READERS
 MOVE TMODE
 MOVE R1,TPARAM
 PUSHJ P,SPA            ;SELECT PARAMETERS FOR SPECIAL MODES
 MOVEM R1,TPARAM
 PUSHJ P,UPA            ;UNPACK BINARY PARAMETERS
; OPEN LAST NAMED FILE FOR INPUT.  A NOP.
; INITIALIZE FOR TRANSMISSION
 PUSHJ P,INITRN
; IF WE ARE MASTER SEND FILE ATTRIBUTES HERE
 SKIPN MASTER   ;ARE WE MASTER
 JRST TF0       ;NO, SLAVE
 SKIPN SW10     ;ARE WE TALKING TO A PDP-10
 JRST TF00      ;NO
 MOVEI C,FATTCD
 PUSHJ P,SCOD
 MOVEI C,206    ;SIX BYTES
 PUSHJ P,SBYTE
 MOVEI R1,6
 MOVE R2,[POINT 6,RBLIC]
 ILDB C,R2
 IORI C,200
 PUSHJ P,SBYTE
 SOJG R1,.-3
; SEND OPNCOD.
TF00: PUSHJ P,OPNROU
; GET RESPONSE
 PUSHJ P,GC60
 DI <<SUCCOD,TF01>,<FPFCOD,FPF>,<OPFCOD,OPF>>
TF01: TRZ F,MSGSW       ;ONCE-ONLY SWITCH FOR COPYST
 SETZM CCNT             ;ZERO TOTAL CHARACTER COUNT
 PUSHJ P,COPYST         ;PRINT "COPY STARTING" MESSAGES
TF0: PUSHJ P,SIZE       ;CALCULATE CCR=NO. OF FILE BYTES TO SEND
 MOVEM CCR0             ;SIZE RETURNS CCR IN R0.
 MOVEI MINRS*6
 MOVEM RECSIZ           ;LOGICAL RECORD SIZE
 MOVE R1,TMODE
 MOVE GCHT(R1)
 MOVEM G                ;STORE APPROPRIATE PUSHJ
 JRST .(R1)
 JRST TF1
 JSR UIO                ;EBCDIC MODE NOT IMPLEMENTED
 JRST TF3
 JRST TF4
 JRST TF1               ;KATAKANA TREAT LIKE ASCII
 JRST TF3               ;IMAGE TREAT LIKE BINARY
GCHT=.-1
 PUSHJ P,GA
 PUSHJ P,GA
 PUSHJ P,GB
 PUSHJ P,GB
 PUSHJ P,GA
 PUSHJ P,GB

; ASCII TRANSMISSION MODE TMODE=1

TF1:

; BINARY TRANSMISSION MODE TMODE=3

TF3:

; ANALYZE THE FIRST 6144 BYTES (APPROX. 2 PAGES) FOR PREFERRED COMPRESSION CHAR

 MOVEI TSTRS
 CAMG CCR
 JRST .+2
 MOVE CCR
 MOVEM COUNTB
 TRZ F,SORTFG
 MOVE R1,[ST,,ST+1]
 SETZM ST
 BLT R1,STE-1
 XCT G
 JRST .-1
 PUSHJ P,SWBAC          ;SWITCH TO DUPLICATE OR RANK COMPRESSION
; INITIALIZE RECORD
TA5: PUSHJ P,RINIT      ;PREPARE PHYSICAL RECORD
 PUSHJ P,SPOR
TA1: PUSHJ P,SLOR       ;START LOCICAL OUTPUT RECORD
 JRST TA2               ;FINISHED
 XCT TRANS              ;TRANSMIT RECORD.  MAKES RECORD HEADER.
 PUSHJ P,ELOR1          ;UPDATE RECL1
 PUSHJ P,ELOR           ;UPDATE RECL
 MOVE TOTCCT
 CAIG MAXRS*6           ;END RECORD IF IT IS GETTING TOO LARGE
 JRST TA1
 PUSHJ P,ENDREC         ;TERMINATE RECORD
 PUSHJ P,GCOD           ;GET RESPONSE
 DI <<ACKCOD,TA6>,<NAKCOD,TA5>,<ERRCOD,FWER>,<PERCOD,FPEW>>
TA6: PUSHJ P,RUPCNT
 PUSHJ P,CKTIM
 PUSHJ P,EPOR           ;END PHYSICAL RECORD TRANSMITTED AND RECEIVED SUCCESSFULLY
 JRST TA5
TA2: TRNN F,HSW         ;ANYTHING STARTED
 JRST TAEND             ;NO
 PUSHJ P,ENDREC
 PUSHJ P,GCOD
 DI <<ACKCOD,TAEND>,<NAKCOD,TA5>,<ERRCOD,FWER>,<PERCOD,FPEW>>
TAEND: PUSHJ P,RUPCNT
 PUSHJ P,LVBI           ;TERMINATE BLOCK INPUT IF STARTED
 MOVEI C,FINCD1
 PUSHJ P,SCOD
 MOVEI C,4
 PUSHJ P,SBYTE
 MOVE R2,[POINT 8,CPTOP1,3]     ;**IMPORTANT SBYTE PRESERVES R2
 REPEAT 4,<ILDB C,R2
 PUSHJ P,SBYTE>
 MOVE C,CPTOP2
 PUSHJ P,SBYTE
 PUSHJ P,SNDYEL
 PUSHJ P,LVBI           ;SENSE IODEND FOR BLOCK INPUT IF STARTED
 PUSHJ P,GC60
 DI <<FINCD2,TAFIN>,<ERRCOD,FWER>,<PERCOD,FPEW>,<ERASCD,FERER>>
TAFIN: CLOSE FIL,
 POPJ P,                ;RETURN FROM TF

; BINARY UPDATE TRANSMISSION MODE TMODE=4
TF4: TRO F,SWB          ;ONCE-ONLY SWITCH FOR SWBAC
 MOVE TBLOCK            ;REDEFINE RECSIZ FOR 1 DISK BLOCK
 MOVEM RECSIZ
BEX: MOVEI DNOR
 MOVEM DCPTR            ;POINTER TO DONOR CHECKSUM BLOCK
 MOVEI ^D255
 MOVEM DCC              ;MAXIMUM 256 BLOCKS PER EXCHANGE
 PUSHJ P,SPOR
; USE EXISTING CODE TO HANDLE EACH EXCHANGE OF UP TO 256 BLOCKS
; THE PHYSICAL "RECORD" IS THE CHECK RECORD EXCHANGE AND
; CORRESPONDING DATA RECORDS.  THE LOGICAL "RECORD" IS ONE DISK BLOCK.
BEXL: SETZ R3,          ;ZERO BITS 0-22 OF CHECKSUM
 SETZ R4,               ;ZERO BITS 23-45 OF CHECKSUM
 SETZ R5,               ;ZERO BITS 46-68 OF CHECKSUM
 PUSHJ P,USLOR          ;MAKES LRECL=RECSIZ, EVEN PAST END OF FILE
 JRST BEXFIN
BEXB: PUSHJ P,GB        ;GET A BYTE FROM THE FILE TO PUT INTO CHECKSUM
 JRST BEXCK             ;GOT ONE
 AND R3,[37,,777777]    ;EXTRACT 23 BITS
 AND R4,[37,,777777]    ;EXTRACT 23 BITS
 AND R5,[37,,777777]    ;EXTRACT 23 BITS
 MOVE R1,DCPTR
 MOVEM R3,FCK1(R1)      ;SAVE FIRST PART OF CHECKSUM
 MOVEM R4,FCK2(R1)      ;AND SECOND PART
 MOVEM R5,FCK3(R1)      ;AND THIRD PART
 AOS DCPTR
 PUSHJ P,ELOR
 SOSL DCC
 JRST BEXL              ;DO NEXT BLOCK
; FULL CHECK RECORD IS BUILT.  EXCHANGE CHECK RECORDS AND SEND DATA RECORDS.
SCRAA: MOVEI EORCOD
 PUSHJ P,SCR            ;SEND CHECK RECORD TERMINATED BY EOR CODE
SCRBB: PUSHJ P,RCR      ;RECEIVE CHECK RECORD
 JRST SCRAA             ;OUR CHECK RECORD WAS NAK'D
 JRST SCRDD             ;VALID CHECK RECORD RECEIVED
 JRST SCRCC             ;SOME OTHER RECORD TYPE WAS RECEIVED
 PUSHJ P,SNAK           ;BAD CHECK RECORD--TRY TO COAX A RETRY
 JRST SCRBB
SCRCC: DI <<ERRCOD,FWER>,<PERCOD,FPEW>>
; SEND UP TO RECL DATA BYTES, MUCH LESS OR NONE IF CHECK RECORDS MATCH.
SCRDD: MOVEI EORCOD     ;ALL DATA RECORDS END WITH EOR
 PUSHJ P,USND           ;SEND DATA
 PUSHJ P,EPOR           ;ENDS THIS GROUP OF 256 BLOCKS
 JRST BEX               ;GET NEXT BUNCH
BEXCK: IMULI R3,^D13
 ADD R3,C
 IMULI R4,^D17
 ADD R4,C
 IMULI R5,^D19
 ADD R5,C
 JRST BEXB              ;GET NEXT BYTE
; LAST EXCHANGE
BEXFIN: SKIPG RECL
 JRST TAEND
BEXFAA: MOVEI EORCOD
 PUSHJ P,SCR
BEXFBB: PUSHJ P,RCR
 JRST BEXFAA    ;NAK
 JRST BEXFDD    ;GOOD CHECK RECORD REC'D
 JRST SCRCC     ;SOME OTHER RECORD TYPE
 PUSHJ P,SNAK
 JRST BEXFBB
BEXFDD: MOVEI EOTCOD
 PUSHJ P,USND   ;LAST DATA RECORD OF BUNCH TO END WITH EOT
 JRST TAEND

; SEND DATA RECORDS FOR NON-MATCHING CHECK RECORD ENTRIES

USND: MOVEM URTT        ;SAVE RECORD TERMINATION TYPE
 SETZ R0,
 EXCH R0,RECL
 MOVEM URECL
 EXCH R0,CCR0
 MOVEM UCCR0
 MOVE BP0
 MOVEM UBP0
 TRZE F,SWB
 PUSHJ P,SWBAC          ;SELECT COMPRESSION METHOD
 MOVEI DNOR
 MOVEM DPTR
 MOVEM DPTR0
 MOVEI RCVR
 MOVEM RPTR
 MOVEM RPTR0
USND1: PUSHJ P,RINIT
 PUSHJ P,SPOR
 MOVE RPTR0
 MOVEM RPTR
 MOVE DPTR0
 MOVEM DPTR
USND2: PUSHJ P,USLOR
 JRST USND3             ;FINISHED
 MOVE R1,DPTR
 MOVE R2,RPTR
 MOVE FCK1(R1)
 CAME FCK1(R2)
 JRST USND6
 MOVE FCK2(R1)
 CAME FCK2(R2)
 JRST USND6
USND5: AOS DPTR
 AOS RPTR
 PUSHJ P,ELOR           ;UPDATE RECL
 MOVE TOTCCT
 CAIG MAXRS*6
 JRST USND2
 MOVEI EORCOD
 MOVEM RTT
 PUSHJ P,ENDREC         ;WE SENT SOMETHING
 PUSHJ P,LVBI           ;SENSE IODEND
 PUSHJ P,GCOD
 DI <<ACKCOD,USND2A>,<NAKCOD,USND1>,<ERRCOD,FWER>,<PERCOD,FPEW>>
USND2A: PUSHJ P,RUPCNT
 PUSHJ P,CKTIM
 PUSHJ P,EPOR
 MOVE RPTR
 MOVEM RPTR0
 MOVE DPTR
 MOVEM DPTR0
 JRST USND1
USND3: TRNN F,HSW
 JRST USND4             ;NOTHING STARTED
 MOVE URTT
 MOVEM RTT
 PUSHJ P,ENDREC
 PUSHJ P,LVBI           ;SENSE IODEND
 PUSHJ P,GCOD
 DI <<ACKCOD,USND4>,<NAKCOD,USND1>,<ERRCOD,FWER>,<PERCOD,FPEW>>
; RESTORE EVERYTHING
USND4: PUSHJ P,RUPCNT
 PUSHJ P,CKTIM
 MOVE URECL
 MOVEM RECL
 MOVE UCCR0
 MOVEM CCR0
 MOVE UBP0
 MOVEM BP0
 POPJ P,                ;RETURN FROM USND
USND6: TRNN F,TI        ;HAS INPUT BEEN TERMINATED
 PUSHJ P,LVBI           ;NO, ISSUE TERMINATE REQUEST NOW
 XCT TRANS
 PUSHJ P,ELOR1
 JRST USND5

; START LOGICAL OUTPUT RECORD
SLOR: MOVE CCR
 SUB RECL
 CAIG 0
 POPJ P,        ;FINISHED
 MOVEI R1,EOTCOD
 CAMG RECSIZ
 JRST .+3
 MOVEI R1,EORCOD
 MOVE RECSIZ
 MOVEM R1,RTT   ;RECORD TERMINATION TYPE
 MOVEM LRECL    ;LOGICAL RECORD LENGTH
 MOVEM COUNTB   ;QUANTUM FOR FILE SYSTEM
 JRST CPOPJ1    ;SKIP RETURN

; END LOGICAL OUTPUT RECORD.  ADVANCE RECL1 BY LRECL.
ELOR1: MOVE LRECL
 ADDM RECL1
 POPJ P,

; END LOGICAL OUTPUT RECORD.
ELOR: SETZ R0,
 EXCH R0,LRECL
 ADDM RECL
 ADDM BP
 POPJ P,

; START PHYSICAL OUTPUT RECORD
SPOR: SETZM RECL
 SETZM RECL1
 MOVE BP0
 MOVEM BP
 MOVE CCR0
 MOVEM CCR
 POPJ P,

; END PHYSICAL OUTPUT RECORD
EPOR: SETZ R0,
 EXCH R0,RECL
 ADDM BP0
 MOVN R0,R0
 ADDM CCR0
 POPJ P,

; UPDATE CCNT=COUNT OF FILE BYTES RECEIVED
RUPCNT: SETZ R0,
 EXCH RECL1
 ADDM CCNT
 SETZ R0,
 EXCH TOTCCT
 ADDM TRTOT
 MSTIME R0,
 MOVEM ETIME    ;END TIME
 POPJ P,

; START LOGICAL OUTPUT RECORD--UPDATE MODE
USLOR: MOVE CCR
 SUB RECL
 CAIG 0
 POPJ P,
 MOVE RECSIZ
 MOVEM LRECL
 MOVEM COUNTB
 JRST CPOPJ1    ;SKIP RETURN

; SEND NAK
SNAK: LNKMSG NAKCOD
 SOSGE NAKCTR
 JSR ZAPINT     ;SIMULATE LOSS OF CIRCUIT
 POPJ P,

; SEND ACKNOWLEDGEMENT
SACK: LNKMSG ACKCOD
 POPJ P,

; INITIALIZE NAKCTR
INITRN: MOVEI 2
 MOVEM NAKCTR
 MOVEI PANIC
 MOVEM ESCRTN   ;KILL CIRCUIT ON ESCAPE
 POPJ P,

; FETCH CONTROL CODE WITH 60 SECOND TIMER
GC60: TIMER 60
 PUSHJ P,GCOD
 POPJ P,

; FETCH CONTROL CODE
GCOD: PUSHJ P,GC
 CAIE C,CAN
 JRST .+3
 PUSHJ P,GC
 JRST GCOD
 CAIE C,EM
 JRST GCOD
 PUSHJ P,GC
 CAIG C,MTOP
 CAIG C,MBOT
 JRST GCOD
 MOVEM C,LCOD
 AOS TIMFLG     ;ACTIVITY COUNT
 POPJ P,

; GET CHAR (NOT BUFFERED).  DESTROYS R0
GC: HRL R0,AUXPRT
 HRRI R0,IICHW  ;INPUT IMAGE CHAR, WAIT
 AUXCAL R0,C
 JSR ZAPINT     ;CIRCUIT ZAPPED
 IFG TESTNG,<MOVE C
 PUSHJ P,TRACE>
 AOS TIMFLG     ;CHAR INPUT
 POPJ P,

 IFG TESTNG,<
TRACE::SKIPL @ITPT
 JRST TRACE1
 PUSH P,R1
 MOVEI R1,ITBUF
 MOVEM R1,ITPT
 POP P,R1
TRACE1: MOVEM @ITPT
 AOS ITPT
 POPJ P,
ITPT: ITBUF
ITBUF: BLOCK 100
 EXP -1
 >
; SEND CONTROL CODE (FROM C)
SCOD: MOVEM C,SCOD1     ;SAVE C
 MOVEI C,EM
 PUSHJ P,SBYTE
 MOVE C,SCOD1
 PUSHJ P,SBYTE
 POPJ P,

; SEND BYTE.  DESTROYS R0.
SBYTE: HRL R0,AUXPRT
 HRRI R0,OICH
 AUXCAL R0,C
 IFG TESTNG,<MOVE C
 IORI 400000
 PUSHJ P,TRACE>
 AOS TIMFLG     ;CHAR OUTPUT
 POPJ P,

; INITIALIZE PHYSICAL RECORD
RINIT: SETZM CHECK      ;ZERO THE CHECKSUM
 PUSHJ P,OINIT          ;ZEROES TOTCCT
 TRZ F,HSW              ;NO HEADER YET
 POPJ P,

; SEND LEAST SIGNIFICANT 24 BITS OF R0 (BUFFERED)
BSWD: MOVE R1,[POINT 8,R0,11]   ;* IMPORTANT CW PRESERVES R1
 REPEAT 3,<ILDB C,R1
 PUSHJ P,CW>
 POPJ P,

; END PHYSICAL RECORD
ENDREC: PUSHJ P,ENDR1   ;ALWAYS SKIPS
 EXP RTT                ;ADDR. OF CELL CONTAINING RECORD TERMINATION TYPE
 PUSHJ P,SNDYEL
 POPJ P,

; MAKE RECORD ENDING.  DOES NOT SEND YELLOW BALL.  SHOULD BE FOLLOWED BY
;       ADDRESS OF CELL CONTAINING RECORD TERMINATION TYPE
ENDR1: W [EM]
 MOVE R1,@(P)
 MOVE C,(R1)
 PUSHJ P,CW
 MOVE R2,TOTCCT
 MOVE CHECK
 PUSHJ P,BSWD
 MOVE R2
 PUSHJ P,BSWD
 PUSHJ P,FLUSH          ;FLUSH OUTPUT.  DO NOT WAIT FOR COMPLETION.
 JRST CPOPJ1

; FETCH CONTROL CODE (BUFFERED)

GBCOD: PUSHJ P,BGC
 CAIE C,CAN
 JRST .+3
 PUSHJ P,BGC
 JRST GBCOD
 CAIE C,EM
 JRST GBCOD
 MOVEM C,ICHECK         ;INITIALIZE INPUT CHECKSUM
 MOVEI 1
 MOVEM ICOUNT           ;AND COUNT
 PUSHJ P,BGC
 CAIG C,MTOP
 CAIG C,MBOT
 JRST GBCOD
 MOVEM C,LCOD1
 AOS TIMFLG     ;ACTIVITY COUNT
 POPJ P,

; INITIALIZE RECEIVE

SINIT: PUSHJ P,IINIT
 POPJ P,

; READ CHECK RECORD.  RETURNS
;       +1 IF NAK IS RECEIVED.
;       +2 IF GOOD RECORD IS RECEIVED
;       +3 IF SOME OTHER RECORD TYPE IS RECEIVED
;       +4 IF BAD (CHECK) RECORD IS RECEIVED.
RCR: PUSHJ P,SINIT
 PUSHJ P,GBCOD
 CAIN C,NAKCOD
 JRST RCR1
 CAIE C,CHKCOD
 JRST RCR3
 MOVEI R2,RCVR
 PUSHJ P,BGC
 MOVEM C,CHKCOUNT
 MOVEM C,T
;READ 9 BYTES TO FCK1-FCK3.  IMPORTANT BGC SHOULD PRESERVE R0-R1-R2
RCR0: MOVE R1,[POINT 8,FCK1(R2),11]
 REPEAT 3,<PUSHJ P,BGC
 IDPB C,R1>
 MOVE R1,[POINT 8,FCK2(R2),11]
 REPEAT 3,<PUSHJ P,BGC
  IDPB C,R1>
 MOVE R1,[POINT 8,FCK3(R2),11]
 REPEAT 3,<PUSHJ P,BGC
        IDPB C,R1>
 ADDI R2,1
 SOSL T
 JRST RCR0
 MOVEM R2,RCPTR
RCR00: PUSHJ P,BGC
 CAIE C,EM
 JRST RCR00
 PUSHJ P,BGC
 MOVEM C,IRTT
 DI <<EOTCOD,RCR01>,<EORCOD,RCR01>>
RCR01: PUSHJ P,VERIF
 JRST RCR2
RCR4: AOS (P)   ;BAD RECORD
RCR3: AOS (P)   ;SOME OTHER RECORD TYPE
RCR2: AOS (P)   ;GOOD CHECK RECORD
RCR1: SETZM TOTCCT      ;NAK.
 POPJ P,        ;DON'T INCLUDE CHECK RECORD COUNT IN TOTCCT.

; VERIFY RECORD CHECKSUM AND BYTECOUNT AND SKIP IF BAD

VERIF: SETOM VERIF1
 MOVE ICHECK
 AND [77,,777777]       ;TRIM TO 24 BITS
 MOVEM VERIF2
 MOVE ICOUNT
 AND [77,,777777]       ;TRIM TO 24 BITS
 MOVEM VERIF3
 PUSHJ P,GBWORD
 CAME VERIF2
 AOS VERIF1
 PUSHJ P,GBWORD
 CAME VERIF3
 AOS VERIF1
 MOVE ICOUNT
 MOVEM TOTCCT
 SKIPL VERIF1
 AOS (P)
 SKIPGE VERIF1
 PUSHJ P,INITRN
 POPJ P,

; READ 3 BYTES TO R0.

GBWORD: SETZ R0,        ;**IMPORTANT BGC PRESERVES R0 AND R2
 MOVE R2,[POINT 8,R0,11]
 REPEAT 3,<PUSHJ P,BGC
 IDPB C,R2>
 POPJ P,

; SEND CHECK RECORD.  MAY BE USED BY EITHER DONOR OR RECEIVER.  IT
;       WILL DEFER SENDING A YELLOW BALL UNTIL A READ IS PUT UP.
SCR: MOVEM T    ;SAVE RECORD TERMINATION TYPE
 PUSHJ P,RINIT
 W [EM]
 W [CHKCOD]
 MOVE C,DCPTR
 SUBI C,DNOR+1
 PUSHJ P,CW     ;ONE BYTE= NO. OF BLOCKS TO EXCHANGE - 1
 MOVEI R2,DNOR
SCR1: MOVE R1,[POINT 8,FCK1(R2),11]
 REPEAT 3,<ILDB C,R1
 PUSHJ P,CW>
 MOVE R1,[POINT 8,FCK2(R2),11]
 REPEAT 3,<ILDB C,R1
 PUSHJ P,CW>
 MOVE R1,[POINT 8,FCK3(R2),11]
 REPEAT 3,<ILDB C,R1
 PUSHJ P,CW>
 ADDI R2,1
 CAME R2,DCPTR
 JRST SCR1
 PUSHJ P,ENDR1  ;TERMINATE RECORD
 EXP T          ;T CONTAINS TERMINATION TYPE
 TRO F,DEFFLG   ;PRIME TO SEND YELLOW BALL WHEN INPUT IS DONE
 MOVE [PUSHJ P,SNDYEL]
 MOVEM ACKROU
 POPJ P,

; DESTROY RECORD CHECKSUM AND COUNT TO FORCE RETRANSMISSION
DSTRY: MSTIME R0,
 ADDM ICOUNT
 XORM ICHECK
 POPJ P,

; READ RANK TABLE FROM RECORD HEADER
RRANKT: MOVE R2,[-NT,,RANKT]
 PUSHJ P,BGC
 MOVEM C,(R2)
 AOBJN R2,.-2
 POPJ P,


; ROUTINES EXECUTED BY DEFER.

; SEND YELLOW BALL.  SENDS CR TO 370.
SNDYEL: HRL R1,AUXPRT
 SKIPE SW370
 JRST SNDY1
 HRRI R1,YELLOW
 AUXCAL R1,
 AOS TIMFLG     ;ACTIVITY COUNTER
 POPJ P,
SNDY1: MOVEI C,HT
 PUSHJ P,SBYTE
 POPJ P,

; RETURN SUCCESS CODE
SUCROU: LNKMSG SUCCOD
 POPJ P,

; USED BY MASTER ONLY TO SEND OPNCOD

OPNROU: MOVEI C,OPNCOD
 PUSHJ P,SCOD
 MOVE C,TMODE
 PUSHJ P,SBYTE
 CAIG C,4
 CAIG C,2
 JRST OPN1
; WHEN CALLED FROM TF SEND RPARAM.  FROM RF SEND TPARAM.
 MOVE C,RPARAM          ;BINARY PARAMETERS FOR RECEIVER
 SKIPN DONOR            ;ARE WE DONOR
 MOVE C,TPARAM          ;NO, SEND PARAMETERS FOR TRANSMISSION
 PUSHJ P,SBYTE
 MOVE TMODE
 CAIE 4
 JRST OPN1
 MOVE BF
 LSH R0,7               ;BLOCKSIZE IS ONE DISC BLOCK (128 WORDS)
 TRNE F,SERFLG          ;EXCEPT WHEN USING SERIAL MODE
 LSH R0,-1              ;BF IS FOR 2 WORDS
 SKIPE UTBLOCK
 MOVE UTBLOCK
 MOVEM TBLOCK
 MOVEM RBLOCK
 LDB C,[POINT 8,TBLOCK,27]
 PUSHJ P,SBYTE
 LDB C,[POINT 8,TBLOCK,35]
 PUSHJ P,SBYTE
OPN1: PUSHJ P,SNDYEL
 POPJ P,

; ROUTINE CALLED WHEN WE DO FIRST BLOCK INPUT REQUEST.

DEFER: PUSH P,R0
 PUSH P,R1
 PUSH P,R2
 PUSH P,C
 XCT ACKROU
 POP P,C
 POP P,R2
 POP P,R1
 POP P,R0
 POPJ P,
 END
