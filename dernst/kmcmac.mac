	.NLIST
	.NLIST	MEB
	.SBTTL	KMCMAC - KMC11 MACRO DEFINITIONS PREFIX FILE
	.IDENT	/V1.0/
; DATE: 01-APRIL-76
;
; VERSION: 1
;
; PROGRAMMERS:
;	R.H. ROSENBAUM
;	A. MCCUTCHEN
;	J. OLAPURATH
;
; LAST MODIFICATION: 8-SEPT-77
 
 

.PAGE

;
; EXTENDED IBUS ASSIGNMENTS
;
	INCON=	0+100000		;IN CONTROL CSR
	MAIN=	20+100000	;MAINTAINENCE REGISTER
	OCON=	40+100000	;OUTCONTROL CSR
	LINENM=	60+100000	;LINE NUMBER
	PORT1=	100+100000	;CSR4
	PORT2=	120+100000	;CSR 5
	PORT3=	140+100000	;CSR 6
	PORT4=	160+100000	;CSR 7
	NPR=	200+100000	;NPR CONTROL REGISTER
	UBBR=	220+100000	;INTERRUPT CONTROL REGISTER

; IBUS ASSIGNMENTS

	INDAT1=	0		;INPUT DATA LOW BYTE
	INDAT2=	20		;INPUT DATA HIGH BYTE
	IODAT1=40		;OUTPUT DATA LOW BYTE
	IODAT2=60		;OUTPUT DATA HIGH BYTE
	IIBA1=	100		;INPUT BA LOW BYTE
	IIBA2=	120		;INPUT BA HIGH BYTE
	IOBA1=	140		;OUTPUT BA LOW BYTE
	IOBA2=	160		;OUTPUT BA HIGH BYTE
	XREG0=	200		;EXTERNAL DEVICE REGISTER 0
	XREG1=	220		;EXTERNAL DEVICE REGISTER 1
	XREG2=	240		;EXTERNAL DEVICE REGISTER 2
	XREG3=	260		;EXTERNAL DEVICE REGISTER 3
	XREG4=	300		;EXTERNAL DEVICE REGISTER 4
	XREG5=	320		;EXTERNAL DEVICE REGISTER 5
	XREG6=	340		;EXTERNAL DEVICE REGISTER 6
	XREG7=	360		;EXTERNAL DEVICE REGISTER 7

; EXTENDED OBUS ASSIGNMENTS

	OINCON=	0!1000		;IN CONTROL CSR
	OMAIN=	1!1000		;MAINT
	OOCON=	2!1000		;OUT CONTROL CSR
	OLINEN=	3!1000		;LINE NUMBER
	OPORT1=	4!1000		;CSR 4
	OPORT2=	5!1000		;CSR 5
	OPORT3=	6!1000		;CSR 6
	OPORT4=	7!1000		;CSR 7
	ONPR=	10!1000		;NPR CONTROL
	OBR=	11!1000		;BR CONTROL

; OBUS ASSIGNMENTS

	OIDAT1=	0!2000		;INPUT DATA LOW BYTE
	OIDAT2=	1!2000		;INPUT DATA HIGH BYTE
	OUTDA1=	2!2000		;OUTPUT DATA LOW BYTE
	OUTDA2=	3!2000		;OUTPUT DATA HIGH BYTE
	IBA1=	4!2000		;INPUT BA LOW BYTE
	IBA2=	5!2000		;INPUT BA HIGH BYTE
	OBA1=	6!2000		;OUTPUT BA LOW BYTE
	OBA2=	7!2000		;OUTPUT BA HIGH BYTE
	OXREG0=	10!2000		;EXTERNAL DEVICE REGISTER 0
	OXREG1=	11!2000		;EXTERNAL DEVICE REGISTER 1
	OXREG2=	12!2000		;EXTERNAL DEVICE REGISTER 2
	OXREG3=	13!2000		;EXTERNAL DEVICE REGISTER 3
	OXREG4=	14!2000		;EXTERNAL DEVICE REGISTER 4
	OXREG5=	15!2000		;EXTERNAL DEVICE REGISTER 5
	OXREG6=	16!2000		;EXTERNAL DEVICE REGISTER 6
	OXREG7=	17!2000		;EXTERNAL DEVICE REGISTER 7

; ALU FUNCTIONS

	ADD=	0		;ADD A+B
	ADDC=	20		;ADD WITH CARRY -> A+B+C
	SUBC=	40		;SUBTRACT WITH CARRY -> A-B-C
	INCA=	60!BR		;INCREMENT A -> A+1 (DEFAULT SOURCE IS BRG)
	APLUSC=	100!BR		;A PLUS CARRY -> A+C
	TWOA=	120!BR		;A PLUS A -> A+A
	TWOAC=	140!BR		;2*A PLUS CARRY -> A+A+C
	DECA=	160!BR		;DECREMENT A -> A-1
	SELA=	200!BR		;SELECT A
	SELB=	220		;SELECT B
	AORNB=	240		;A OR NOT B -> A!-B
	AANDB=	260		;A AND B -> A&B
	AORB=	300		;A OR B -> A!B
	AXORB=	320		;A XOR B
	SUB=	340		;SUBTRACT -> A-B
	SUBOC=	360		;SUBTRACT ONE'S COMPLEMENT -> A-B-1

; SCRATCH PAD DEFINITIONS

SP0=0
SP1=1
SP2=2
SP3=3
SP4=4
SP5=5
SP6=6
SP7=7
SP10=10
SP11=11
SP12=12
SP13=13
SP14=14
SP15=15
SP16=16
SP17=17

; INSTRUCTION PAGE DEFINITIONS
  
P0=0*4000	;PAGE 0
P1=1*4000	;PAGE 1
P2=2*4000	;PAGE 2
P3=3*4000	;PAGE 3
 
; NPR BIT DEFINITIONS
 
DATI=1		;WORD INPUT NPR
DATIH=3		;WORD INPUT NPR WITH BUS HOLD
DATO=21		;WORD OUTPUT NPR
DATOH=23	;WORD OUTPUT NPR WITH BUS HOLD
DATOB=221	;BYTE OUTPUT NPR
DATOBH=223	;BYTE OUTPUT NPR WITH BUS HOLD
.PAGE
 
IMM=0		;IMMEDIATE
IBUS=20000	;INPUT BUS
MEMX=40000	;MEMORY
BR=60000	;BRG
.PAGE
 
WRTEBR=400		;WRITE THE BRG
WROUTX=1000		;EXTENDED OUTPUT BUS
SHFTBR=1400		;SHIFT THE BRG
WROUT=2000		;OUTPUT BUS
WRMEM=2400		;MEMORY
SPX=3000		;SCRATCH PAD
SPBRX=3400		;SRATCH PAD AND BRG
.PAGE
 
ALCOND=400	;JUMP ALWAYS
CCOND=1000	;JUMP IF ALU CARRY = 1
ZCOND=1400	;JUMP IF ALU ZERO = 1
BR0CON=2000	;JUMP IF BRG BIT 0 = 1
BR1CON=2400	;JUMP IF BRG BIT 1 = 1
BR4CON=3000	;JUMP IF BRG BIT 4 = 1
BR7CON=3400	;JUMP IF BRG BIT 7 = 1
.PAGE
 
LDMAPG=4000	;LOAD THE 2 MOST SIGNIFICANT BITS OF MAR
LDMAR=10000	;LOAD THE 8 LEAST SIGNIFICANT BITS OF MAR
INCMAR=14000	;INCREMENT MAR
;
MEMI=MEMX!INCMAR	;READ FROM MEMORY AND INCREMENT THE MAR
.PAGE
	.SBTTL		BRANCH INSTRUCTIONS
;
JUMP=100000		;JUMP OP CODE
;
	.MACRO ALWAYS ADDRES	;JUMP ALWAYS
	<JUMP!ALCOND!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	BR0 ADDRES	;JUMP IF BR0 SET
	<JUMP!BR0CON!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	BR1 ADDRES	;JUMP IF BR1 SET
	<JUMP!BR1CON!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	BR4 ADDRES	;JUMP IF BR4 SET
	<JUMP!BR4CON!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	BR7 ADDRES	;JUMP IF BR7 SET
	<JUMP!BR7CON!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	Z ADDRES	;JUMP IF Z BIT SET
	<JUMP!ZCOND!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO	C ADDRES	;JUMP IF C BIT SET
	<JUMP!CCOND!<ADDRES-START&3000*4>!<ADDRES-START&777/2>>

	.ENDM
.PAGE
;
	.MACRO	.ALWAY SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ALWAYS
	.IF NB,OPARG1
	<JUMP!ALCOND!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!ALCOND!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!ALCOND!SRC!FUNC>

	.ENDM
;
	.MACRO	.BR0 SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON BR0 SET
	.IF NB,OPARG1
	<JUMP!BR0CON!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!BR0CON!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!BR0CON!SRC!FUNC>

	.ENDM
;
	.MACRO	.BR1 SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON BR1 SET
	.IF NB,OPARG1
	<JUMP!BR1CON!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!BR1CON!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!BR1CON!SRC!FUNC>

	.ENDM
;
	.MACRO	.BR4 SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON BR4 SET
	.IF NB,OPARG1
	<JUMP!BR4CON!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!BR4CON!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!BR4CON!SRC!FUNC>

	.ENDM
;
	.MACRO	.BR7 SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON BR7 SET
	.IF NB,OPARG1
	<JUMP!BR7CON!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!BR7CON!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!BR7CON!SRC!FUNC>

	.ENDM
;
	.MACRO	.Z SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON Z BIT SET
	.IF NB,OPARG1
	<JUMP!ZCOND!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!ZCOND!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!ZCOND!SRC!FUNC>

	.ENDM
;
	.MACRO	.C SRC,FUNC,SPLOC,OPARG1 ;INDEXED JUMP ON C BIT SET
	.IF NB,OPARG1
	<JUMP!CCOND!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<JUMP!CCOND!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<JUMP!CCOND!SRC!FUNC>

	.ENDM
.PAGE
;
MOVE=0		;MOVE OPCODE
;
	.MACRO	BRSHFT	OPARG1,OPARG2,OPARG3	;BR SHIFT RIGHT
	.IF NB,OPARG3
	<MOVE!SHFTBR!OPARG1!OPARG2!OPARG3>
	.MEXIT
	.ENDC
	.IF NB,OPARG2
	<MOVE!SHFTBR!OPARG1!OPARG2>
	.MEXIT
	.ENDC
	.IF NB,OPARG1
	<MOVE!SHFTBR!OPARG1>
	.MEXIT
	.ENDC
	<MOVE!SHFTBR>

	.ENDM
;
	.MACRO	BROTAT	;BR ROTATE
	<MOVE!SHFTBR!SELB!BR>
 
	.ENDM
;
	.MACRO	SP SRC,FUNC,SPLOC,OPARG1 ;LOAD SCRATCH-PAD
	.IF IDN,SRC,IMM
	.IIF NE,<FUNC&17>-SPLOC	.ERROR ;ILLEGAL USE OF IMMEDIATE MODE
	.ENDC
	.IF NB,OPARG1
	<MOVE!SPX!SRC!FUNC!SPLOC!OPARG1>

	.MEXIT
	.ENDC
	.IF NB,SPLOC
	<MOVE!SPX!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<MOVE!SPX!SRC!FUNC>
	.ENDM
;
	.MACRO	SPBR SRC,FUNC,SPLOC,OPARG1 ;LOAD SP AND BR
	.IF IDN,SRC,IMM
	.IIF NE,<FUNC&17>-SPLOC	.ERROR ;ILLEGAL USE OF IMMEDIATE MODE
	.ENDC

	.IF NB,OPARG1
	<MOVE!SPBRX!SRC!FUNC!SPLOC!OPARG1>
	.MEXIT
	.ENDC

	.IF NB,SPLOC
	<MOVE!SPBRX!SRC!FUNC!SPLOC>
	.MEXIT
	.ENDC
	<MOVE!SPBRX!SRC!FUNC>
	.ENDM
;
	.MACRO	MEM SRC,DATA,OPARG1,OPARG2 ;MOVE TO MEMORY
	.IF NB,OPARG2
.IIF IDN,SRC,IMM,<MOVE!WRMEM!IMM!<DATA&377>!OPARG1!OPARG2>
.IIF DIF,SRC,IMM,<MOVE!WRMEM!SRC!<DATA>!OPARG1!OPARG2>
	.MEXIT
	.ENDC
	.IF NB,OPARG1
.IIF IDN,SRC,IMM,<MOVE!WRMEM!IMM!<DATA&377>!OPARG1>
.IIF DIF,SRC,IMM,<MOVE!WRMEM!SRC!<DATA>!OPARG1>
	.MEXIT
	.ENDC
.IIF IDN,SRC,IMM,<MOVE!WRMEM!IMM!<DATA&377>>
.IIF DIF,SRC,IMM,<MOVE!WRMEM!SRC!<DATA>>

	.ENDM
;
	.MACRO	MEMADR	ADDRES,FUNC	;WRITE ADDRESS TO MEMORY
	.IF B	FUNC
	<MOVE!WRMEM!<ADDRES-START&777/2>>
	.IFF
	<MOVE!WRMEM!FUNC!<ADDRES-START&777/2>>
	.ENDC
	.ENDM
;
	.MACRO MEMINC SRC,DATA,OPARG1 ;MOVE TO MEM, INCR MAR
	.IF NB,OPARG1
.IIF DIF,SRC,IMM,<MOVE!WRMEM!INCMAR!SRC!<DATA>!OPARG1>
.IIF IDN,SRC,IMM,<MOVE!WRMEM!INCMAR!IMM!<DATA&377>!OPARG1>
	.MEXIT
	.ENDC
.IIF DIF,SRC,IMM,<MOVE!WRMEM!INCMAR!SRC!<DATA>>
.IIF IDN,SRC,IMM,<MOVE!WRMEM!INCMAR!IMM!<DATA&377>>

	.ENDM
;
	.MACRO BRWRTE SRC,DATA,OPARG1,OPARG2 ;MOVE TO BR
	.IF NB,OPARG2
.IIF DIF,SRC,IMM,<MOVE!WRTEBR!SRC!<DATA>!OPARG1!OPARG2>
.IIF IDN,SRC,IMM,<MOVE!WRTEBR!IMM!<DATA&377>!OPARG1!OPARG2>
	.MEXIT
	.ENDC
	.IF NB,OPARG1
.IIF DIF,SRC,IMM,<MOVE!WRTEBR!SRC!<DATA>!OPARG1>
.IIF IDN,SRC,IMM,<MOVE!WRTEBR!IMM!<DATA&377>!OPARG1>
	.MEXIT
	.ENDC
.IIF DIF,SRC,IMM,<MOVE!WRTEBR!SRC!<DATA>>
.IIF IDN,SRC,IMM,<MOVE!WRTEBR!IMM!<DATA&377>>

	.ENDM
;
	.MACRO	BRADDR ADDRES	;PUT RETURN ADDR (1 BYTE) IN BR
	<MOVE!WRTEBR!<ADDRES-START&777/2>>

	.ENDM
;
	.MACRO OUT SRC,DATA,OPARG1,OPARG2	;WRITE TO OUTBUS/OUTBUS*
	.IF IDN,SRC,IMM
	.IIF NE,<DATA&17>-<OPARG1&17> .ERROR	;ILLEGAL USER OF IMMEDIATE MODE
	.ENDC
	.IF NB,OPARG2
	<MOVE!SRC!<DATA>!OPARG1!OPARG2>
	.MEXIT
	.ENDC
	.IF NB,OPARG1
	<MOVE!SRC!<DATA>!OPARG1>
	.MEXIT
	.ENDC
	<MOVE!SRC!<DATA>>

	.ENDM
;
	.MACRO OUTPUT SRC,DATA,OPARG1,OPARG2	;WRITE TO OUTBUS/OUTBUS*
	.IF IDN,SRC,IMM
	.IIF NE,<DATA&17>-<OPARG1&17> .ERROR	;ILLEGAL USER OF IMMEDIATE MODE
	.ENDC
	.IF NB,OPARG2
	<MOVE!SRC!<DATA>!OPARG1!OPARG2>
	.MEXIT
	.ENDC
	.IF NB,OPARG1
	<MOVE!SRC!<DATA>!OPARG1>
	.MEXIT
	.ENDC
	<MOVE!SRC!<DATA>>

	.ENDM
.PAGE
	.MACRO LDMA SRC,DATA,OPARG1	;LOAD MEMORY ADDRESS REG
	.IF NB,OPARG1
.IIF IDN,SRC,IMM,<MOVE!LDMAR!IMM!<DATA&377>!OPARG1>
.IIF DIF,SRC,IMM,<MOVE!LDMAR!SRC!<DATA>!OPARG1>
	.MEXIT
	.ENDC
.IIF IDN,SRC,IMM,<MOVE!LDMAR!IMM!<DATA&377>>
.IIF DIF,SRC,IMM,<MOVE!LDMAR!SRC!<DATA>>

	.ENDM
;
	.MACRO LDMAP SRC,DATA,OPARG1	;LOAD MEMORY PAGE NUMBER
	.IF NB,OPARG1
.IIF IDN,SRC,IMM,<MOVE!LDMAPG!IMM!<DATA/400>!OPARG1>
.IIF DIF,SRC,IMM,<MOVE!LDMAPG!SRC!<DATA>!OPARG1>
	.MEXIT
	.ENDC
.IIF IDN,SRC,IMM,<MOVE!LDMAPG!IMM!<DATA/400>>
.IIF DIF,SRC,IMM,<MOVE!LDMAPG!SRC!<DATA>>

	.ENDM
;
	.MACRO	INCMA		;INCREMENT THE MAR
	<INCMAR>
 
	.ENDM
;
	.MACRO COMP SRC,SPADDR	;COMPARE SOURCE AND SP
	<SUBOC!SRC!SPADDR>

	.ENDM
;
	.MACRO	NODST SRC,FUNC,SPADDR,OPARG1 ;NOP-SOURCE, FUNC, NO DEST
	.IF NB,OPARG1
	<SRC!FUNC!SPADDR!OPARG1>
	.MEXIT
	.ENDC
	.IF NB,SPADDR
	<SRC!FUNC!SPADDR>
	.MEXIT
	.ENDC
	.IF NB,FUNC
	<SRC!FUNC>
	.MEXIT
	.ENDC
	<SRC>

	.ENDM
 
	.MACRO	CALLSB	REG,ADDRES,BRGVAL	;SUBROUTINE CALL
	DISP=<.-START>/2&377
	.IF B	BRGVAL
	BRWRTE	IMM,DISP+3
	.IFF
	BRWRTE	IMM,DISP+4
	.ENDC
	SP	BR,SELB,REG
	.IF NB,BRGVAL
	BRWRTE	IMM,BRGVAL
	.ENDC
	ALWAYS	ADDRES
	.ENDM
 
	.MACRO	CALLSR	REG,ADDRES,RADDR,BRGVAL	;SUBROUTINE CALL WITH SPECIAL RETURN ADDRESS
	BRADDR	RADDR
	SP	BR,SELB,REG
	.IF NB,BRGVAL
	BRWRTE	IMM,BRGVAL
	.ENDC
	ALWAYS	ADDRES
	.ENDM
 
	.MACRO	RTNSUB	REG,PAGE	;SUBROUTINE RETURN
	.ALWAY	BR,SELA,<REG!PAGE>
	.ENDM
 
	.MACRO	RSTATE	ADDRES		;UPDATE RECEIVER STATE
	MEMADR	ADDRES
	.ENDM
 
.PAGE
	.LIST
.ASECT
START:
    