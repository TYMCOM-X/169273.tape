


    DATE: July 15, 1982

      TO: Homer Jamison


    FROM: Dennis Ernst

 SUBJECT: Micro node implementation of Tymnet II





        During  the past  several weeks  I have  been  investigating the
feasibility of  converting the Micronode  to Tymnet II  technology.  The
results have been favorable.  The project has consisted of examining the
available  documentation  on  Tymnet  II,  examining  the  Engine  code,
converting the  existing low-level  Tymnet I  Micronode code  to receive
Tymnet II  data blocks  and examining the  implications of  the received
data  to  the  remaining  micronode  code.   As  with  many  programming
projects, what appeared at first to be easy was not and what seemed hard
before starting turned out to be easy.

        The  interrupt driven  routines for  sending and  receiving data
were left  unchanged except  for reset  handling and  receiving messages
longer than  Tymnet I messages.   Reset handling turned  out to  be very
difficult due to documentation errors and unimplemented functions in the
Engine version.  The higher  level code for flow control  and supervisor
messages was changed to reflect differences in data  formats.  Temporary
code  was  implemented to  handle  data on  unassigned  channels (needle
points  for  the  command  circuits).  The  only  changes  to  the login
character sending code was to send the data to the supervisor  using the
new Tymnet II  format.  The login  character response code  is unchanged
from Tymnet I.  A crude 40 line routine has been implemented  to convert
the needle to a needle point.

        The code is to the point where careful use will result  in login
characters being  sent to the  sup and a  needle returned from  the sup.
The  code  volume  seems  to   be  slightly  less  than  the   Tymnet  I
implementation in spite of the additional function of Tymnet  II.  Items
that need completion for a functional TYMSAT are:

    1.  Reset  line and  takeover bug  fixing (  3  days, uses
        existing code)

    2.  Full needle handling ( 3 days, new code)

    3.  Error messages for line errors ( 1 day, using existing
        code)

    4.  Trace and Pstat probe commands ( 2 days, new code)

    5.  More consistency checking and error recovery ( 2 days)



                                   1



    6.  Make kernel host functional ( 5 days, existing code)

    7.  General cleanup ( 5 days, existing code)

    8.  Coordinate testing (  5 days, spread out  over several
        weeks)

    9.  Fix bugs encountered in testing ( 10 days)

        The above list  adds up to 6  person-weeks of effort  that would
last about 2  calendar months.  The result  would be a  fully functional
Tymnet II TYMSAT with the following exceptions:

    1.  No passthroughs

    2.  Tymnet II neighbors only

    3.  No link bubble, shrink or page change commands

    4.  No multiple line links (it would support multiple single
        line links)

    5.  No  XRAY style  debugging (it  would have  a  health and
        status information host)

    6.  Engine style downline loading would not be supported

        After  the  conversion  to  a  TYMSAT  was  completed,  the next
development stage would be base support. For base support  the following
items will have to be written or converted from existing code.   No firm
estimate for these tasks is available, but an initial guess of  2 person
months seems reasonable.

    1.  Host status messages (conversion)

    2.  Aux circuit request and response (conversion)

    3.  Needle point termination (new)

    4.  Accounting (conversion)
















                                   2
