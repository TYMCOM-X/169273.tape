MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	

     1					; UPD ID= 82, SNARK:<5.UTILITIES>MACSYM.MAC.43,  22-Feb-82 17:57:38 by MURPHY
     2					;IFJER., IFNJE. - new names for IFNES., IFESK.
     3					; UPD ID= 68, SNARK:<5.UTILITIES>MACSYM.MAC.42,  15-Jan-82 10:45:56 by WALLACE
     4					;TCO 5.1669 - Add Error JSERR (EJSERR) and Error JSHLT (EJSHLT) macros
     5					;TCO 5.1666 - Add If Error Skip (IFESK.) and If No Error Skip (IFNES.) macros
     6					; UPD ID= 59, SNARK:<5.UTILITIES>MACSYM.MAC.41,  17-Nov-81 11:56:55 by MURPHY
     7					;Allow ANxxx. between ELSE. and ENDIF.
     8					;ENDDO. equivalent to OD. for consistency.
     9					; UPD ID= 58, SNARK:<5.UTILITIES>MACSYM.MAC.40,  16-Nov-81 11:29:33 by MURPHY
    10					;FORN., FORX.
    11					; UPD ID= 34, SNARK:<5.UTILITIES>MACSYM.MAC.39,  18-Sep-81 13:35:40 by LEACHE
    12					;Add comments
    13					; UPD ID= 32, SNARK:<5.UTILITIES>MACSYM.MAC.38,  17-Sep-81 15:45:20 by MURPHY
    14					;Fix STDAC.
    15					; UPD ID= 28, SNARK:<5.UTILITIES>MACSYM.MAC.37,   8-Sep-81 17:38:36 by MURPHY
    16					;Two PURGEs for ENDxx to get rid of both macro and symbol definition.
    17					; UPD ID= 15, SNARK:<5.UTILITIES>MACSYM.MAC.36,  30-Jul-81 09:01:25 by LEACHE
    18					;Remove unneeded ^O's from previous
    19					; UPD ID= 13, SNARK:<5.UTILITIES>MACSYM.MAC.35,  29-Jul-81 09:22:17 by LEACHE
    20					;Add macros MPRNTX,EPRNTX,LFIWM,GFIWM,L1BPT,L2BPT,G1BPT,G2BPT
    21					; UPD ID= 2278, SNARK:<5.UTILITIES>MACSYM.MAC.34,  30-Jun-81 16:41:32 by MURPHY
    22					;FIX IFXE.
    23					; UPD ID= 2251, SNARK:<6.UTILITIES>MACSYM.MAC.14,  24-Jun-81 16:54:23 by MURPHY
    24					;STDAC., DO.
    25					; UPD ID= 2183, SNARK:<6.UTILITIES>MACSYM.MAC.13,  11-Jun-81 14:40:23 by MURPHY
    26					;RENAME TQNx TO TMNx; TQNx WILL GENERATE EXACTLY ONE INSTRUCTION OR COMPLAIN
    27					; UPD ID= 2158, SNARK:<6.UTILITIES>MACSYM.MAC.12,   9-Jun-81 15:13:39 by MURPHY
    28					;IFXE., IFXN., IFQE., IFQN., ANDXE., ANDXN., ANDQE., ANDQN
    29					;RESTRUCTURE IFE., IFN. ETC., ADD ELSE. CASE, ADD ANDE., ANDN., ETC.
    30					; UPD ID= 2150, SNARK:<6.UTILITIES>MACSYM.MAC.11,   8-Jun-81 16:47:27 by MURPHY
    31					;ANSKP., ANNSK., IFE., IFN., ETC.
    32					; UPD ID= 2120, SNARK:<6.UTILITIES>MACSYM.MAC.9,   3-Jun-81 16:13:37 by MURPHY
    33					;MORE ORNSK.
    34					; UPD ID= 2052, SNARK:<6.UTILITIES>MACSYM.MAC.8,  20-May-81 17:47:33 by MURPHY
    35					;Suppress one more generated tag in IFSKP.
    36					; UPD ID= 2017, SNARK:<6.UTILITIES>MACSYM.MAC.7,  18-May-81 15:57:40 by MURPHY
    37					;Alternate form of IFSKP., IFNSK.
    38					; UPD ID= 1781, SNARK:<6.UTILITIES>MACSYM.MAC.6,   2-Apr-81 10:42:18 by HUIZENGA
    39					;TCO 5.1275 - Explicitly define absolute value of .JBVER as octal. 20-15376.
    40					; UPD ID= 1766, SNARK:<6.UTILITIES>MACSYM.MAC.4,  25-Mar-81 14:55:47 by MURPHY
    41					;Suppress generated tags in IFSKP. etc.
    42					;Provide optional variables in BLSUB.
    43					; UPD ID= 1688, SNARK:<5.UTILITIES>MACSYM.MAC.26,  12-Mar-81 11:49:35 by GRANT
    44					;Update Copyright
    45					; UPD ID= 1629, SNARK:<5.UTILITIES>MACSYM.MAC.25,   2-Mar-81 14:47:00 by MURPHY
    46					;FIX TO BLCAL.
    47					;USE .SAC NOT CX
    48					; UPD ID= 1592, SNARK:<5.UTILITIES>MACSYM.MAC.23,  26-Feb-81 17:52:17 by MURPHY
    49					;MV., MVI.
    50					; UPD ID= 1559, SNARK:<5.UTILITIES>MACSYM.MAC.22,  13-Feb-81 16:42:35 by MURPHY
    51					;.IF, ORNSK.
    52					; UPD ID= 1544, SNARK:<5.UTILITIES>MACSYM.MAC.21,   9-Feb-81 13:54:29 by MURPHY
    53					;IFNSK., IFSKP.
    54					; UPD ID= 1523, SNARK:<5.UTILITIES>MACSYM.MAC.20,   6-Feb-81 11:16:07 by MURPHY
    55					;NAMES CHANGED TO BLCAL., BLSUB.
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1-1
MACSYM	MAC	12-May-72 20:41	

    56					; UPD ID= 1513, SNARK:<5.UTILITIES>MACSYM.MAC.19,   3-Feb-81 17:40:52 by MURPHY
    57					;ADD .IFATM, FIX BLCALL
    58					; UPD ID= 1466, SNARK:<5.UTILITIES>MACSYM.MAC.18,  21-Jan-81 16:19:40 by MURPHY
    59					;DITTO
    60					; UPD ID= 1465, SNARK:<5.UTILITIES>MACSYM.MAC.17,  21-Jan-81 15:09:03 by MURPHY
    61					;BLSUBR, BLCALL
    62					; UPD ID= 1179, SNARK:<5.UTILITIES>MACSYM.MAC.16,  20-Oct-80 17:21:25 by MURPHY
    63					;REVISE PREV EDIT IN DEFSTR
    64					; UPD ID= 1165, SNARK:<5.UTILITIES>MACSYM.MAC.15,  15-Oct-80 12:08:44 by MURPHY
    65					;EXTERN .SASET
    66					; UPD ID= 1135, SNARK:<5.UTILITIES>MACSYM.MAC.14,   6-Oct-80 16:13:17 by MURPHY
    67					;MAKE DEFSTR DEFINE A SYMBOL TO HOLD LOCATION INFO FOR DDT
    68					; UPD ID= 1074, SNARK:<5.UTILITIES>MACSYM.MAC.13,  30-Sep-80 17:38:12 by MURPHY
    69					;DITTO
    70					; UPD ID= 1069, SNARK:<5.UTILITIES>MACSYM.MAC.12,  30-Sep-80 14:23:54 by MURPHY
    71					;STKVAR, ACVAR
    72					; SNARK:<5.UTILITIES>MACSYM.MAC.11,	5-Aug-80 09:07:15 by ELFSTROM
    73					;	change "circonflex" to "circumflex"
    74					; UPD ID= 611, SNARK:<4.1.UTILITIES>MACSYM.MAC.10,   6-Jun-80 14:36:44 by MURPHY
    75					; UPD ID= 602, SNARK:<4.1.UTILITIES>MACSYM.MAC.9,   4-Jun-80 22:44:54 by MURPHY
    76					;ALLOW MEMORY LOC FOR TQNN AND TQNE
    77					; UPD ID= 470, SNARK:<4.1.UTILITIES>MACSYM.MAC.8,  23-Apr-80 17:28:36 by MURPHY
    78					; UPD ID= 469, SNARK:<4.1.UTILITIES>MACSYM.MAC.7,  23-Apr-80 16:41:36 by MURPHY
    79					;ADD .XCMSY - MACRO TO SUPPRESS JUNK SYMBOLS USER HEREIN
    80					;<4.1.UTILITIES>MACSYM.MAC.6, 14-Apr-80 16:29:47, EDIT BY OSMAN
    81					;Change FLDDB. and FLDBK. to allow \ in help message
    82					;<4.1.UTILITIES>MACSYM.MAC.5, 12-Nov-79 08:42:58, EDIT BY OSMAN
    83					;more 4.2570 - Purge ..V1 and ..V22 after using them
    84					;<4.1.UTILITIES>MACSYM.MAC.4, 12-Nov-79 08:34:38, EDIT BY OSMAN
    85					;MORE 4.2570 - Change V22 to ..V22
    86					;<4.1.UTILITIES>MACSYM.MAC.3,  9-Nov-79 13:55:33, EDIT BY OSMAN
    87					;tco 4.2570 - Change V1 to ..V1
    88					;<4.1.UTILITIES>MACSYM.MAC.2, 31-Oct-79 10:37:13, EDIT BY OSMAN
    89					;tco 4.1.1003 - Add .CHSPC
    90					;<4.UTILITIES>MACSYM.MAC.27, 19-Oct-79 13:39:11, EDIT BY ZIMA
    91					;TCO 4.2536 - Make JSMSG0 external to prevent "undefined" errors
    92					;  from MACRO when attempting to use PERSTR macro.
    93					;<4.UTILITIES>MACSYM.MAC.19,  2-Oct-79 15:05:45, EDIT BY OSMAN
    94					;tco 4.2506 - allow BRKCH. ","
    95					;<4.UTILITIES>MACSYM.MAC.18, 21-Sep-79 15:37:58, EDIT BY ENGEL
    96					;UNDO MAKING RETSKP AN OPDEF
    97					;<4.UTILITIES>MACSYM.MAC.17, 11-Sep-79 07:17:32, EDIT BY R.ACE
    98					;TCO 4.2453 - PREFIX "symbol IS NOT DEFINED" WITH A QUESTION MARK
    99					;<4.UTILITIES>MACSYM.MAC.16, 19-Aug-79 20:35:06, EDIT BY GILBERT
   100					;MAKE RETSKP, JSHLT, ETC. OPDEFS FOR DDT TYPEOUT.
   101					;<4.UTILITIES>MACSYM.MAC.15, 22-Jun-79 07:16:13, EDIT BY R.ACE
   102					;TCO 4.2307 - CHANGE FLDDB. TO USE 0,,LST INSTEAD OF Z LST
   103					;<4.UTILITIES>MACSYM.MAC.14, 10-Mar-79 14:01:35, EDIT BY KONEN
   104					;UPDATE COPYRIGHT FOR RELEASE 4
   105					;<4.UTILITIES>MACSYM.MAC.13,  8-Feb-79 16:46:30, EDIT BY KIRSCHEN
   106					;ADD ENTRY DECLARATION FOR .STKST FOR LIBRARY SEARCHING
   107					;<4.UTILITIES>MACSYM.MAC.12,  6-Feb-79 10:59:13, EDIT BY GILBERT
   108					;REPLACE XMOVEI -- MACRO DOESN'T KNOW ABOUT IT
   109					;<4.UTILITIES>MACSYM.MAC.11,  5-Feb-79 00:51:10, EDIT BY GILBERT
   110					;Remove extended addressing OPDEFs now in MACRO, change XBLT MACRO
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1-2
MACSYM	MAC	12-May-72 20:41	

   111					;  to XBLT. to avoid conflict with MACRO's definition of 020000,,0.
   112					;<4.UTILITIES>MACSYM.MAC.10, 22-Jan-79 16:29:04, EDIT BY DNEFF
   113					;Make POINTR macro take addresses with indexing again.
   114					;<4.UTILITIES>MACSYM.MAC.9, 22-Jan-79 13:31:23, EDIT BY DBELL
   115					;MAKE POINTR, FLD, .RTJST, MASKB, AND MOD. IMMUNE TO STRANGE ARGUMENTS
   116					;<4.UTILITIES>MACSYM.MAC.8, 25-Oct-78 12:22:59, EDIT BY GILBERT
   117					;Suppress CALLRET to DDT typeout.
   118					;<4.UTILITIES>MACSYM.MAC.7, 12-Sep-78 15:52:12, EDIT BY OSMAN
   119					;FIX FLDBK.
   120					;<4.UTILITIES>MACSYM.MAC.4,  6-Sep-78 16:51:29, EDIT BY OSMAN
   121					;ADD FLDDB. AND FLDBK.
   122					;<4.UTILITIES>MACSYM.MAC.3,  6-Sep-78 16:28:36, EDIT BY OSMAN
   123					;CHANGE BREAK SET MACROS TO HAVE DOTS IN THEM.   ADD BRMSK.
   124					;<4.UTILITIES>MACSYM.MAC.2,  3-Sep-78 12:35:16, EDIT BY OSMAN
   125					;ADD MACROS FOR DEFINING 128-BIT CHARACTER BREAK MASKS
   126
   127
   128
   129
   130					;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY ONLY BE USED
   131					;  OR COPIED IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
   132					;
   133					;COPYRIGHT (C) 1976,1977,1978,1979,1980,1981 BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS
   134					.
   135
   136					;VERSION 1
   137
   138					IFNDEF REL,<REL==0>		;UNIVERSAL UNLESS OTHERWISE DECLARED
   139					   IFE REL,<
   140						UNIVERSAL MACSYM	COMMON MACROS AND SYMBOLS
   141					   >
   142					   IFN REL,<
   143						TITLE MACREL		SUPPORT CODE FOR MACSYM
   144						SEARCH MONSYM
   145						SALL
   146					   >
   147
   148					;THE STANDARD VERSION WORD CONSTRUCTION
   149					; VERS - PROGRAM VERSION NUMBER
   150					; VUPDAT - PROGRAM UPDATE NUMBER (1=A, 2=B ...)
   151					; VEDIT - PROGRAM EDIT NUMBER
   152					; VCUST - CUSTOMER EDIT CODE (0=DEC DEVELOPMENT, 1=DEC SWS, 2-7 CUST)
   153
   154					DEFINE PGVER.	(VERS,VUPDAT,VEDIT,VCUST)<
   155						..PGV0==.		;;SAVE CURRECT LOCATION AND MODE
   156						.JBVER=:^O137		;;WHERE TO PUT VERSION
   157						LOC	.JBVER		;;PUT VERSION IN STANDARD PLACE
   158						BYTE	(3)VCUST(9)VERS(6)VUPDAT(18)VEDIT
   159						.ORG	..PGV0		;;RESTORE LOCATION AND MODE
   160					>
   161
   162					;MASKS FOR THE ABOVE
   163
   164		700000	000000		VI%WHO==:7B2			;Customer edit code
   165		077700	000000		VI%MAJ==:777B11			;Major version number
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1-3
MACSYM	MAC	12-May-72 20:41	

   166		000077	000000		VI%MIN==:77B17			;Minor version/update
   167			777777		VI%EDN==:777777B35		;Edit number
   168					;ADDED VI%XXX
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 2
MACSYM	MAC	12-May-72 20:41	

   169
   170						SUBTTL COMMON DEFS
   171
   172					;DEFINE STANDARD AC'S
   173
   174					DEFINE STDAC. <
   175					F=:0
   176					T1=:1
   177					T2=:2
   178					T3=:3
   179					T4=:4
   180					Q1=:5
   181					Q2=:6
   182					Q3=:7
   183					P1=:10
   184					P2=:11
   185					P3=:12
   186					P4=:13
   187					P5=:14
   188					P6=:15
   189					CX=:16
   190					P=:17
   191					>
   192						SUBTTL MISC CONSTANTS
   193
   194					;MISC CONSTANTS
   195
   196		377777	777777		.INFIN==:377777,,777777		;PLUS INFINITY
   197		400000	000000		.MINFI==:1B0			;MINUS INFINITY
   198		777777	000000		.LHALF==:777777B17		;LEFT HALF
   199			777777		.RHALF==:777777			;RIGHT HALF
   200		777777	777777		.FWORD==:-1			;FULL WORD
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 3
MACSYM	MAC	12-May-72 20:41		MISC CONSTANTS

   201
   202						SUBTTL	SYMBOLS FOR THE CONTROL CHARACTERS
   203
   204			000000		.CHNUL==:000			;NULL
   205			000001		.CHCNA==:001
   206			000002		.CHCNB==:002
   207			000003		.CHCNC==:003
   208			000004		.CHCND==:004
   209			000005		.CHCNE==:005
   210			000006		.CHCNF==:006
   211			000007		.CHBEL==:007			;BELL
   212			000010		.CHBSP==:010			;BACKSPACE
   213			000011		.CHTAB==:011			;TAB
   214			000012		.CHLFD==:012			;LINE-FEED
   215			000013		.CHVTB==:013			;VERTICAL TAB
   216			000014		.CHFFD==:014			;FORM FEED
   217			000015		.CHCRT==:015			;CARRIAGE RETURN
   218			000016		.CHCNN==:016
   219			000017		.CHCNO==:017
   220			000020		.CHCNP==:020
   221			000021		.CHCNQ==:021
   222			000022		.CHCNR==:022
   223			000023		.CHCNS==:023
   224			000024		.CHCNT==:024
   225			000025		.CHCNU==:025
   226			000026		.CHCNV==:026
   227			000027		.CHCNW==:027
   228			000030		.CHCNX==:030
   229			000031		.CHCNY==:031
   230			000032		.CHCNZ==:032
   231			000033		.CHESC==:033			;ESCAPE
   232			000034		.CHCBS==:034			;CONTROL BACK SLASH
   233			000035		.CHCRB==:035			;CONTROL RIGHT BRACKET
   234			000036		.CHCCF==:036			;CONTROL CIRCUMFLEX
   235			000037		.CHCUN==:037			;CONTROL UNDERLINE
   236			000040		.CHSPC==:040			;SPACE
   237
   238			000175		.CHALT==:175			;OLD ALTMODE
   239			000176		.CHAL2==:176			;ALTERNATE OLD ALTMODE
   240			000177		.CHDEL==:177			;DELETE
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 4
MACSYM	MAC	12-May-72 20:41		SYMBOLS FOR THE CONTROL CHARACTERS

   241
   242						SUBTTL	HARDWARE BITS OF INTEREST TO USERS
   243
   244					;PC FLAGS
   245
   246		400000	000000		PC%OVF==:1B0			;OVERFLOW
   247		200000	000000		PC%CY0==:1B1			;CARRY 0
   248		100000	000000		PC%CY1==:1B2			;CARRY 1
   249		040000	000000		PC%FOV==:1B3			;FLOATING OVERFLOW
   250		020000	000000		PC%BIS==:1B4			;BYTE INCREMENT SUPPRESSION
   251		010000	000000		PC%USR==:1B5			;USER MODE
   252		004000	000000		PC%UIO==:1B6			;USER IOT MODE
   253		002000	000000		PC%LIP==:1B7			;LAST INSTRUCTION PUBLIC
   254		001000	000000		PC%AFI==:1B8			;ADDRESS FAILURE INHIBIT
   255		000600	000000		PC%ATN==:3B10			;APR TRAP NUMBER
   256		000100	000000		PC%FUF==:1B11			;FLOATING UNDERFLOW
   257		000040	000000		PC%NDV==:1B12			;NO DIVIDE
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 5
MACSYM	MAC	12-May-72 20:41		HARDWARE BITS OF INTEREST TO USERS

   258
   259					;THE FOLLOWING MACRO MAY BE USED TO SUPPRESS CREF ENTRIES FOR
   260					;ALL THE JUNK SYMBOLS USED INTERNALLY WITHIN MACROS IN MACSYM
   261
   262					DEFINE .XCMSY <
   263						.XCREF
   264						.XCRF1 <..ACT,..CSC,..CSN,..IFT,..JX1,..MSK,..MX1,..MX2>
   265						.XCRF1 <..NAC,..NRGS,..NS,..NV,..PST,..STKN,..STKQ,..STKR>
   266						.XCRF1 <..TRR,..TSA1,..TX1,..TX2,.FP,.FPAC,.NAC,.SAC,.SAV1>
   267						.XCRF1 <.SAV2,.SAV3,POINTR,POS,WID,..CAS1,..CNS,..CNS2>
   268						.XCRF1 <..DPB,..GNCS,..ICNS,..JE,..LDB,..STR0,..STR1,..STR2>
   269						.XCRF1 <..STR4,..TQO,..TQZ,..TSAC,..TSIZ,..TX,..TY,.ACV1,.ACV2>
   270						.XCRF1 <.ACV3,.CASE,.DECR0,.IF0,.INCR0,.OPST1,.OPST2,.STKV1>
   271						.XCRF1 <.STKV2,.STKV3,.TRV1,.TRV2,.TRV3>
   272						.CREF
   273					   >
   274					DEFINE .XCRF1 (SYMS)<
   275						IRP SYMS,<
   276						 IFDEF SYMS,< .XCREF SYMS>>>
   277
   278						SUBTTL	MACROS FOR FIELD MASKS
   279
   280					;STANDARD MACROS
   281
   282					;MACROS TO HANDLE FIELD MASKS
   283
   284					;COMPUTE LENGTH OF MASK, I.E. LENGTH OF LEFTMOST STRING OF ONES
   285					;REMEMBER THAT ^L DOES 'JFFO', I.E. HAS VALUE OF FIRST ONE BIT IN WORD
   286
   287					;COMPUTE WIDTH OF MASK, I.E. LENGTH OF LEFTMOST STRING OF ONES
   288
   289					DEFINE WID(MASK)<<^L<-<<MASK>_<^L<MASK>>>-1>>>
   290
   291					;COMPUTE POSITION OF MASK, I.E. BIT POSITION OF RIGHTMOST ONE IN MASK
   292
   293					DEFINE POS(MASK)<<^L<<MASK>&<-<MASK>>>>>
   294
   295					;CONSTRUCT BYTE POINTER TO MASK
   296
   297					DEFINE POINTR(LOC,MASK)<<POINT WID(MASK),LOC,POS(MASK)>>
   298
   299					;PUT RIGHT-JUSTIFIED VALUE INTO FIELD SPECIFIED BY MASK
   300
   301					DEFINE FLD(VAL,MSK)<<<<VAL>B<POS(MSK)>>&<MSK>>>
   302
   303					;MAKE VALUE BE RIGHT JUSTIFIED IN WORD.
   304
   305					DEFINE .RTJST(VAL,MSK)<<<<VAL>&<MSK>>B<^D70-POS(MSK)>>>
   306
   307					;CONSTRUCT MASK FROM BIT AA TO BIT BB. I.E. MASKB 0,8 = 777B8
   308
   309					DEFINE MASKB(AA,BB)<<1B<<AA>-1>-1B<BB>>>
   310
   311					;MODULE - GIVES REMAINDER OF DEND DIVIDED BY DSOR
   312
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 5-1
MACSYM	MAC	12-May-72 20:41		MACROS FOR FIELD MASKS

   313					DEFINE MOD.(DEND,DSOR)<<<DEND>-<<DEND>/<DSOR>>*<DSOR>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 6
MACSYM	MAC	12-May-72 20:41		MACROS FOR FIELD MASKS

   314
   315					;REPEAT WITH SUBSTITUTION OF NUMERIC INDEX
   316
   317					DEFINE FORN. (LOW,HIGH,ARGS,STRING,%MN1)<
   318					  DEFINE %MN1(ARGS)<STRING>
   319					..FORN==LOW
   320					REPEAT HIGH-LOW+1,<
   321						.FORN1 (%MN1)
   322						..FORN=..FORN+1>>
   323
   324					DEFINE .FORN1 (MACN)<
   325						MACN (\..FORN)>
   326
   327					;REPEAT WITH GENERAL STRING SUBSTITUTION
   328
   329					DEFINE FORX. (ARGS,SYMS,STRING,%MN1)<
   330					  DEFINE %MN1 (SYMS)<STRING>
   331					  IRP ARGS,<
   332						.FORX1 %MN1,ARGS>>
   333
   334					  DEFINE .FORX1 (MACN,ARGS)<
   335						MACN ARGS>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 7
MACSYM	MAC	12-May-72 20:41		MACROS FOR FIELD MASKS

   336
   337						SUBTTL MOVX
   338
   339					;MOVX - LOAD AC WITH CONSTANT
   340
   341					DEFINE MOVX (AC,MSK)<
   342					   ..MX1==MSK			;;EVAL EXPRESSION IF ANY
   343					   .IFN ..MX1,ABSOLUTE,<
   344						MOVE AC,[MSK]>
   345					   .IF ..MX1,ABSOLUTE,<
   346						..MX2==0		;;FLAG SAYS HAVEN'T DONE IT YET
   347						IFE <..MX1>B53,<
   348						  ..MX2==1
   349						  MOVEI AC,..MX1>	;;LH 0, DO AS RH
   350						IFE ..MX2,<		;;IF HAVEN'T DONE IT YET,
   351						IFE <..MX1>B17,<
   352						  ..MX2==1
   353						  MOVSI AC,(..MX1)>>	;;RH 0, DO AS LH
   354						IFE ..MX2,<		;;IF HAVEN'T DONE IT YET,
   355						IFE <<..MX1>B53-^O777777>,<
   356						  ..MX2==1
   357						  HRROI AC,<..MX1>>>	;;LH -1
   358						IFE ..MX2,<		;;IF HAVEN'T DONE IT YET,
   359						IFE <<..MX1>B17-^O777777B17>,<
   360						  ..MX2==1
   361						  HRLOI AC,(..MX1-^O777777)>> ;;RH -1
   362						IFE ..MX2,<		;;IF STILL HAVEN'T DONE IT,
   363						  MOVE AC,[..MX1]>	;;GIVE UP AND USE LITERAL
   364					  >>
   365
   366					;MV., MVI. - Move from memory to memory oediate to memory
   367
   368					DEFINE MV. (FROM,TOO)<
   369						MOVE .SAC,FROM
   370						MOVEM .SAC,TOO>
   371
   372					DEFINE MVI. (STUFF,DEST)<
   373						MOVX .SAC,<STUFF>
   374						MOVEM .SAC,DEST>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 8
MACSYM	MAC	12-May-72 20:41		MOVX

   375					;VARIENT MNEMONICS FOR TX DEFINITIONS
   376
   377					DEFINE IORX (AC,MSK)<
   378						TXO AC,<MSK>>
   379
   380					DEFINE ANDX (AC,MSK)<
   381						TXZ AC,<^-<MSK>>>
   382
   383					DEFINE XORX (AC,MSK)<
   384						TXC AC,<MSK>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 9
MACSYM	MAC	12-May-72 20:41		MOVX

   385
   386						SUBTTL TX -- TEST MASK
   387
   388					;CREATE THE TX MACRO DEFINITIONS
   389
   390					;THIS DOUBLE IRP CAUSES ALL COMBINATIONS OF MODIFICATION AND TESTING
   391					;TO BE DEFINED
   392
   393					DEFINE ..DOTX (M,T)<
   394						IRP M,<
   395						IRP T,<
   396						  DEFINE TX'M'T (AC,MSK)<
   397							..TX(M'T,AC,<MSK>)>>>>
   398
   399						..DOTX (<N,O,Z,C>,<,E,N,A>)^ ;DO ALL DEFINITIONS
   400						PURGE ..DOTX
   401
   402					;..TX
   403					;ALL TX MACROS JUST CALL ..TX WHICH DOES ALL THE WORK
   404
   405					DEFINE ..TX(MT,AC,MSK)<
   406					   ..TX1==MSK			;;EVAL EXPRESSION IF ANY
   407					   .IFN ..TX1,ABSOLUTE,<
   408						TD'MT AC,[MSK]>
   409					   .IF ..TX1,ABSOLUTE,<		;;MASK MUST BE TESTABLE
   410						..TX2==0		;;FLAG SAYS HAVEN'T DONE IT YET
   411						IFE <..TX1&^O777777B17>,<
   412						  ..TX2==1		;;LH 0, DO AS RH
   413						  TR'MT AC,..TX1>
   414						IFE ..TX2,<		;;IF HAVEN'T DONE IT YET,
   415						IFE <..TX1&^O777777>,<
   416						  ..TX2==1		;;RH 0, DO AS LH
   417						  TL'MT AC,(..TX1)>>
   418						IFE ..TX2,<		;;IF HAVEN'T DONE IT YET,
   419						  IFE <<..TX1>B53-^O777777>,< ;;IF LH ALL ONES, 
   420						    ..TX3 (MT,AC)>>	;;TRY Z,O,C SPECIAL CASES
   421						IFE ..TX2,<		;;IF HAVEN'T DONE IT YET,
   422						  IFE <..TX1+1>,<	;;TRY WORD ALL ONES
   423						    ..TX4 (MT,AC)>>
   424						IFE ..TX2,<		;;IF STILL HAVEN'T DONE IT,
   425						  TD'MT AC,[..TX1]>	;;MUST GIVE UP AND USE LITERAL
   426					  >>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 10
MACSYM	MAC	12-May-72 20:41		TX -- TEST MASK

   427					;SPECIAL CASE FOR LH ALL ONES
   428
   429					DEFINE ..TX3 (MT,AC)<
   430						IFIDN <MT><Z>,<		;;IF ZEROING WANTED
   431						  ..TX2==1
   432						  ANDI AC,^-..TX1>	;;CAN DO IT WITH ANDI
   433						IFIDN <MT><O>,<		;;IF SET TO ONES WANTED
   434						  ..TX2==1
   435						  ORCMI AC,^-..TX1>	;;CAN DO IT WITH IORCM
   436						IFIDN <MT><C>,<		;;IF COMPLEMENT WANTED
   437						  ..TX2==1
   438						  EQVI AC,^-..TX1>>	;;CAN DO IT WITH EQV
   439
   440					;SPECIAL CASE OF WORD ALL ONES
   441
   442					DEFINE ..TX4 (MT,AC)<
   443						IFIDN <MT><NN>,<
   444						  ..TX2==1
   445						  CAIN AC,0>		;;CAN DO FULL WORD COMPARE
   446						IFIDN <MT><NE>,<
   447						  ..TX2==1
   448						  CAIE AC,0>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 11
MACSYM	MAC	12-May-72 20:41		TX -- TEST MASK

   449
   450						SUBTTL JX -- JUMP ON MASK
   451
   452					;JXE -- JUMP IF MASKED BITS ARE EQUAL TO 0
   453					;JXN -- JUMP IF MASKED BITS ARE NOT EQUAL TO 0
   454					;JXO -- JUMP IF MASKED BITS ARE ALL ONES
   455					;JXF -- JUMP IF MASKED BITS ARE NOT ALL ONES (FALSE)
   456
   457					DEFINE JXE (AC,MSK,BA)<
   458						..JX1==MSK		;;EVAL EXPRESSION IF ANY
   459						.IFN ..JX1,ABSOLUTE,<PRINTX MSK NOT ABSOLUTE
   460							..JX1==0>
   461						.IF ..JX1,ABSOLUTE,<
   462						.IF0 <<..JX1>-1B0>,<	;;IF MASK IS JUST B0,
   463							JUMPGE AC,BA>,<
   464						.IF0 <<..JX1>+1>,<	;;IF MASK IF FULL WORD,
   465						  JUMPE AC,BA>,<	;;USE GIVEN CONDITION
   466							TXNN (AC,..JX1)
   467							JRST BA>>>>
   468
   469					DEFINE JXN (AC,MSK,BA)<
   470						..JX1==MSK		;;EVAL EXPRESSION IF ANY
   471						.IFN ..JX1,ABSOLUTE,<PRINTX MSK NOT ABSOLUTE
   472							..JX1==0>
   473						.IF ..JX1,ABSOLUTE,<
   474						.IF0 <<..JX1>-1B0>,<	;;IF MASK IS JUST B0,
   475							JUMPL AC,BA>,<
   476						.IF0 <<..JX1>+1>,<	;;IF MASK IF FULL WORD,
   477						  JUMPN AC,BA>,<	;;USE GIVEN CONDITION
   478							TXNE (AC,..JX1)
   479							JRST BA>>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 12
MACSYM	MAC	12-May-72 20:41		JX -- JUMP ON MASK

   480
   481					DEFINE JXO (AC,MSK,BA)<
   482						..JX1==MSK		;;EVAL EXPRESSION
   483						.IFN ..JX1,ABSOLUTE,<PRINTX MSK NOT ABSOLUTE
   484							..JX1==0>
   485						.IF ..JX1,ABSOLUTE,<
   486						.IF0 <<..JX1>-1B0>,<
   487							JUMPL AC,BA>,<
   488						..ONEB (..BT,MSK)	;;TEST MASK FOR ONLY ONE BIT ON
   489						.IF0 ..BT,<
   490						  SETCM .SAC,AC		;;GENERAL CASE, GET COMPLEMENTS OF BITS
   491						  JXE (.SAC,..JX1,BA)>,< ;;JUMP IF BITS WERE ORIGINALLY ONES
   492						    TXNE AC,..JX1	;;TEST AND JUMP
   493						    JRST BA>>>>
   494
   495					DEFINE JXF (AC,MSK,BA)<
   496						..JX1==MSK		;;EVAL EXPRESSION
   497						.IFN ..JX1,ABSOLUTE,<PRINTX MSK NOT ABSOLUTE
   498							..JX1==0>
   499						.IF ..JX1,ABSOLUTE,<
   500						.IF0 <<..JX1>-1B0>,<
   501							JUMPGE AC,BA>,<
   502						..ONEB (..BT,MSK)	;;TEST MASK FOR ONLY ONE BIT ON
   503						.IF0 ..BT,<
   504						  SETCM .SAC,AC		;;GENERAL CASE, GET COMPLEMENT OF BITS
   505						  JXN (.SAC,..JX1,BA)>,< ;;JUMP IF SOME ZEROS ORIGINALLY
   506						    TXNN AC,..JX1	;;TEST AND JUMP
   507						    JRST BA>>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 13
MACSYM	MAC	12-May-72 20:41		JX -- JUMP ON MASK

   508
   509						SUBTTL SUBFUNCTION MACROS
   510
   511					;.IF0 CONDITION, ACTION IF CONDITION 0, ACTION OTHERWISE
   512
   513					DEFINE .IF0 (COND,THEN,ELSE)<
   514						..IFT==COND		;;GET LOCAL VALUE FOR CONDITION
   515						IFE ..IFT,<
   516						THEN
   517						..IFT==0>		;;RESTORE IN CASE CHANGED BY NESTED .IF0
   518						IFN ..IFT,<
   519						ELSE>>
   520
   521					;CASE (NUMBER,<FIRST,SECOND,...,NTH>)
   522
   523					DEFINE .CASE (NUM,LIST)<
   524						..CSN==NUM
   525						..CSC==0
   526						IRP LIST,<
   527						IFE ..CSN-..CSC,<
   528						  STOPI
   529						  ..CAS1 (LIST)>
   530						..CSC==..CSC+1>>
   531
   532					DEFINE ..CAS1 (LIST)<
   533						LIST>
   534
   535					;TEST FOR FULL WORD, RH, LH, OR ARBITRARY BYTE
   536
   537					DEFINE ..TSIZ (SYM,MSK)<
   538						SYM==3			;;ASSUME BYTE UNLESS...
   539						IFE <MSK>+1,<SYM=0>	;;FULL WORD IF MASK IS -1
   540						IFE <MSK>-^O777777,<SYM==1> ;;RH IF MASK IS 777777
   541						IFE <MSK>-^O777777B17,<SYM==2>> ;;LH IF MAST IS 777777,,0
   542
   543					;TEST FOR LOC BEING AN AC -- SET SYM TO 1 IF AC, 0 IF NOT AC
   544
   545					DEFINE ..TSAC (SYM,LOC)<
   546						SYM==0			;;ASSUME NOT AC UNLESS...
   547						..TSA1==<Z LOC>		;;LOOK AT LOC
   548						.IF ..TSA1,ABSOLUTE,<	;;SEE IF WE CAN TEST VALUE
   549						  IFE ..TSA1&^O777777777760,<SYM==1>> ;;AC IF VALUE IS 0-17
   550						>
   551
   552					;TEST FOR SPECIFIC NTH CHARACTER OF ARG
   553
   554					DEFINE ..TSNC (SYM,NTH,STR,CH)<
   555						SYM==0			;;ASSUME NO
   556						..TSA1==0		;;COUNT CHARS
   557						IRPC STR,<
   558						  ..TSA1=..TSA1+1
   559						  IFE ..TSA1-NTH,<
   560						   IFIDN <STR><CH>,<
   561							SYM==1>		;;YES
   562						   STOPI>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 13-1
MACSYM	MAC	12-May-72 20:41		SUBFUNCTION MACROS

   563
   564					;FUNCTION TO TEST FOR MASK CONTAINING EXACTLY ONE BIT. RETURNS
   565					;1 IFF LEFTMOST BIT AND RIGHTMOST BIT ARE SAME
   566
   567					DEFINE ..ONEB (SYM,MSK)<
   568						SYM==<<<-<MSK>>&<MSK>>&<1B<^L<MSK>>>>>
   569
   570					;DEFAULT SCRACH AC
   571
   572			000016		.SAC=16
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 14
MACSYM	MAC	12-May-72 20:41		SUBFUNCTION MACROS

   573
   574						SUBTTL DEFSTR -- DEFINE DATA STRUCTURE
   575
   576					;DEFINE DATA STRUCTURE
   577					; NAM - NAME OF STRUCTURE AS USED IN CODE
   578					; LOCN - ADDRESS OF DATA
   579					; POS - POSITION OF DATA WITHIN WORD (RIGHTMOST BIT NUMBER)
   580					; SIZ - SIZE OF DATA (IN BITS) WITHIN WORD
   581
   582					DEFINE DEFSTR (NAM,LOCN,POS,SIZ)<
   583						NAM==<-1B<POS>+1B<POS-SIZ>> ;;ASSIGN SYMBOL TO HOLD MASK
   584						IF1,<IFDEF %'NAM,<PRINTX ?NAM ALREADY DEFINED>>
   585						DEFINE %'NAM (OP,AC,Y,MSK)<
   586						$'NAM==<Z LOCN>		;;LOCATION SYMBOL FOR DDT
   587						OP (<AC>,LOCN''Y,MSK)>>	;;DEFINE MACRO TO HOLD LOCATION
   588
   589					;ALTERNATE FORM OF DEFSTR -- TAKES MASK INSTEAD OF POS,SIZ
   590
   591					DEFINE MSKSTR (NAM,LOCN,MASK)<
   592						NAM==MASK		;;ASSIGN SYMBOL TO HOLD MASK
   593						IF1,<IFDEF %'NAM,<PRINTX ?NAM ALREADY DEFINED>>
   594						DEFINE %'NAM (OP,AC,Y,MSK)<
   595						$'NAM==<Z LOCN>		;;LOCATION SYMBOL FOR DDT
   596						OP (<AC>,LOCN''Y,MSK)>>	;;DEFINE MACRO TO HOLD LOCATION
   597
   598					;..STR0 - PROCESS INSTANCE OF STRUCTURE USAGE, SINGLE STRUCTURE CASE.
   599
   600					DEFINE ..STR0 (OP,AC,STR,Y)<
   601						IFNDEF STR,<PRINTX ?STR IS NOT DEFINED
   602						  OP (<AC>,Y,.FWORD)>	;;RESERVE A WORD, ASSUME WORD MASK
   603						IFDEF STR,<
   604						IFNDEF %'STR,<
   605						  OP (<AC>,Y,STR)>	;;ASSUME NO OTHER LOCN
   606						IFDEF %'STR,<
   607						  %'STR (OP,<AC>,Y,STR)>>> ;;DO IT
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 15
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   608					;..STR1, ..STR2, ..STR3, AND ..STR4 ARE INTERNAL MACROS FOR PROCESSING
   609					;INSTANCES OF STRUCTURE USAGE.
   610
   611					DEFINE ..STR1 (OP,AC,STR,Y,CLL)<
   612						..NS==0			;;INIT COUNT OF STR'S
   613						IRP STR,<..NS=..NS+1>	;;COUNT STR'S
   614						IFE ..NS,<PRINTX ?EMPTY STRUCTURE LIST, OP>
   615						IFE ..NS-1,<		;;THE ONE CASE, CAN DO FAST
   616						  ..STR0 (OP,<AC>,<STR>,Y)>
   617						IFG ..NS-1,<		;;MORE THAN ONE, DO GENERAL CASE
   618						..ICNS			;;INIT REMOTE MACRO
   619						..CNS (<CLL (OP,<AC>,,>) ;;CONS ON CALL AND FIRST ARGS
   620						IRP STR,<		;;DO ALL NAMES IN LIST
   621						  IFNDEF STR,<PRINTX STR NOT DEFINED>
   622						  IFDEF STR,<
   623						  IFNDEF %'STR,<
   624						  ..CNS (<,STR,Y>)>	;;ASSUME NO OTHER LOCN
   625						  IFDEF %'STR,<
   626						  %'STR (..STR2,,Y,STR)> ;;STR MACRO WILL GIVE LOCN TO ..STR2
   627						  ..CNS (<)>)		;;CLOSE ARG LIST
   628						  ..GCNS		;;DO THIS AND PREVIOUS NAME
   629						  ..ICNS		;;REINIT CONS
   630						  ..CNS (<CLL (OP,<AC>>) ;;PUT ON FIRST ARGS
   631						  IFNDEF %'STR,<
   632						  ..CNS (<,STR,Y>)>	;;ASSUME NO OTHER LOCN
   633						  IFDEF %'STR,<
   634						  %'STR (..STR2,,Y,STR)>>> ;;PUT ON THIS ARG, END IRP
   635						..CNS (<,,)>)		;;CLOSE ARG LIST
   636						..GCNS>>		;;DO LAST CALL
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 16
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   637
   638					;..STR2 -- CALLED BY ABOVE TO APPEND STRUCTURE NAME AND LOC TO ARG LIST
   639
   640					DEFINE ..STR2 (AA,LOC,STR)<
   641						..CNS (<,STR,LOC>)>	;;CONS ON NEXT ARG PAIR
   642
   643					;..STR3 -- CHECK FOR ALL STRUCTURES IN SAME REGISTER
   644
   645					DEFINE ..STR3 (OP,AC,S1,L1,S2,L2)<
   646						IFDIF <L1><L2>,<
   647						  IFNB <L1>,<
   648						    OP (<AC>,L1,..MSK)	;;DO ACCUMULATED STUFF
   649						    IFNB <L2>,<PRINTX S1 AND S2 ARE IN DIFFERENT WORDS>>
   650						  ..MSK==0>		;;INIT MASK
   651						IFNB <L2>,<
   652						  ..MSK=..MSK!<S2>>>
   653
   654					;..STR4 -- COMPARE SUCCESSIVE ITEMS, DO SEPARATE OPERATION IF
   655					;DIFFERENT WORDS ENCOUNTERED
   656
   657					DEFINE ..STR4 (OP,AC,S1,L1,S2,L2)<
   658						IFDIF <L1><L2>,<	;;IF THIS DIFFERENT FROM PREVIOUS
   659						  IFNB <L1>,<
   660						    OP (<AC>,L1,..MSK)>	;;DO PREVIOUS
   661						  ..MSK==0>		;;REINIT MASK
   662						IFNB <L2>,<
   663						  ..MSK=..MSK!<S2>>>	;;ACCUMULATE MASK
   664
   665					;..STR5 - SAME AS ..STR4 EXCEPT GIVES EXTRA ARG IF MORE STUFF TO
   666					;FOLLOW.
   667
   668					DEFINE ..STR5 (OP,AC,S1,L1,S2,L2)<
   669						IFDIF <L1><L2>,<	;;IF THIS DIFFERENT FROM PREVIOUS,
   670						  IFNB <L1>,<
   671						    IFNB <L2>,<		;;IF MORE TO COME,
   672							OP'1 (AC,L1,..MSK)> ;;DO VERSION 1
   673						    IFB <L2>,<		;;IF NO MORE,
   674							OP'2 (AC,L1,..MSK)>> ;;DO VERSION 2
   675						  ..MSK==0>		;;REINIT MASK
   676						IFNB <L2>,<
   677						  ..MSK=..MSK!<S2>>>	;;ACCUMULATE MASK
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 17
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   678
   679					;'REMOTE' MACROS USED TO BUILD UP ARG LIST
   680
   681					;INITIALIZE CONS -- DEFINES CONS
   682
   683					DEFINE ..ICNS <
   684					   DEFINE ..CNS (ARG)<
   685						..CNS2 <ARG>,>
   686					
   687					   DEFINE ..CNS2 (NEW,OLD)<
   688						DEFINE ..CNS (ARG)<
   689						  ..CNS2 <ARG>,<OLD'NEW>>>
   690					   >
   691
   692					;GET CONS -- EXECUTE STRING ACCUMULATED
   693
   694					DEFINE ..GCNS <
   695					   DEFINE ..CNS2 (NEW,OLD)<
   696						  OLD>			;;MAKE ..CNS2 DO THE STUFF
   697						..CNS ()>		;;GET ..CNS2 CALLED WITH THE STUFF
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 18
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   698
   699					;SPECIFIC CASES
   700
   701					;LOAD, STORE
   702					; AC - AC OPERAND
   703					; STR - STRUCTURE NAME
   704					; Y - (OPTIONAL) ADDITIONAL SPECIFICATION OF DATA LOCATION
   705
   706					DEFINE LOAD (AC,STR,Y)<
   707						..STR0 (..LDB,AC,STR,Y)>
   708
   709					   DEFINE ..LDB (AC,LOC,MSK)<
   710						..TSIZ (..PST,MSK)
   711						.CASE ..PST,<<
   712							MOVE AC,LOC>,<
   713							HRRZ AC,LOC>,<
   714							HLRZ AC,LOC>,<
   715							LDB AC,[POINTR (LOC,MSK)]>>>
   716
   717					DEFINE STOR (AC,STR,Y)<
   718						..STR0 (..DPB,AC,STR,Y)>
   719
   720					   DEFINE ..DPB (AC,LOC,MSK)<
   721						..TSIZ (..PST,MSK)
   722						.CASE ..PST,<<
   723							MOVEM AC,LOC>,<
   724							HRRM AC,LOC>,<
   725							HRLM AC,LOC>,<
   726							DPB AC,[POINTR (LOC,MSK)]>>>
   727
   728					;SET TO ZERO
   729
   730					DEFINE SETZRO (STR,Y)<
   731						..STR1 (..TQZ,,<STR>,Y,..STR4)>
   732
   733					   DEFINE ..TQZ (AC,LOC,MSK)<
   734						..TSIZ (..PST,MSK)	;;SET ..PST TO CASE NUMBER
   735						.CASE ..PST,<<
   736							SETZM LOC>,<	;;FULL WORD
   737							HLLZS LOC>,<	;;RH
   738							HRRZS LOC>,<	;;LH
   739						  ..TSAC (..ACT,LOC)	;;SEE IF LOC IS AC
   740						  .IF0 ..ACT,<
   741							MOVX .SAC,MSK	;;NOT AC
   742							ANDCAM .SAC,LOC>,<
   743							..TX (Z,LOC,MSK)>>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 19
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   744
   745					;SET TO ONE
   746
   747					DEFINE SETONE (STR,Y)<
   748						..STR1 (..TQO,,<STR>,Y,..STR4)>
   749
   750					   DEFINE ..TQO (AC,LOC,MSK)<
   751						..TSIZ (..PST,MSK)
   752						.CASE ..PST,<<
   753							SETOM LOC>,<
   754							HLLOS LOC>,<
   755							HRROS LOC>,<
   756						  ..TSAC (..ACT,LOC)
   757						  .IF0 ..ACT,<
   758							MOVX .SAC,MSK
   759							IORM .SAC,LOC>,<
   760							..TX (O,LOC,MSK)>>>>
   761
   762					;SET TO COMPLEMENT
   763
   764					DEFINE SETCMP (STR,Y)<
   765						..STR1 (..TQC,,<STR>,Y,..STR4)>
   766
   767					   DEFINE ..TQC (AC,LOC,MSK)<
   768						..TSIZ (..PST,MSK)
   769						.IF0 ..PST,<		;;IF FULL WORD,
   770							SETCMM LOC>,<	;;CAN USE SETCMM
   771						  ..TSAC (..ACT,LOC)	;;OTHERWISE, CHECK FOR AC
   772						  .IF0 ..ACT,<
   773							MOVX .SAC,MSK
   774							XORM .SAC,LOC>,<
   775							..TX(C,LOC,MSK)>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 20
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   776
   777					;INCREMENT, DECREMENT FIELD
   778
   779					DEFINE INCR (STR,Y)<
   780						..STR0 (.INCR0,,<STR>,Y)>
   781
   782					   DEFINE .INCR0 (AC,LOC,MSK)<
   783						..PST==MSK&<-MSK>	;;GET LOWEST BIT
   784						.IF0 ..PST-1,<
   785							AOS LOC>,<	;;BIT 35, CAN USE AOS
   786							MOVX .SAC,..PST	;;LOAD A ONE IN THE APPROPRIATE POSITION
   787							ADDM .SAC,LOC>>
   788
   789					DEFINE DECR (STR,Y)<
   790						..STR0 (.DECR0,,<STR>,Y)>
   791
   792					   DEFINE .DECR0 (AC,LOC,MSK)<
   793						..PST==MSK&<-MSK>
   794						.IF0 ..PST-1,<
   795							SOS LOC>,<	;;BIT 35, CAN USE SOS
   796							MOVX .SAC,-..PST ;;LOAD -1 IN APPROPRIATE POSITION
   797							ADDM .SAC,LOC>>
   798
   799					;GENERAL DEFAULT, TAKES OPCODE
   800
   801					DEFINE OPSTR (OP,STR,Y)<
   802						..STR0 (.OPST1,<OP>,<STR>,Y)>
   803
   804					   DEFINE .OPST1 (OP,LOC,MSK)<
   805						..TSIZ (..PST,MSK)
   806						.IF0 ..PST,<
   807							OP LOC>,<	;;FULL WORD, USE GIVEN OP DIRECTLY
   808							..LDB .SAC,LOC,MSK ;;OTHERWISE, GET SPECIFIED BYTE
   809							OP .SAC>>
   810
   811					DEFINE OPSTRM (OP,STR,Y)<
   812						..STR0 (.OPST2,<OP>,<STR>,Y)>
   813
   814					   DEFINE .OPST2 (OP,LOC,MSK)<
   815						..TSIZ (..PST,MSK)
   816						.IF0 ..PST,<
   817							OP LOC>,<	;;FULL WORD, USE OP DIRECTLY
   818							..LDB .SAC,LOC,MSK
   819							OP .SAC
   820							..DPB .SAC,LOC,MSK>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 21
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   821
   822					;JUMP IF ALL FIELDS ARE 0 (ONE REGISTER AT MOST)
   823
   824					DEFINE JE (STR,Y,BA)<
   825						..STR1 (..JE,<BA>,<STR>,Y,..STR3)>
   826
   827					   DEFINE ..JE (BA,LOC,MSK)<
   828						..TSAC (..ACT,LOC)	;;SEE IF AC
   829						.IF0 ..ACT,<
   830						  ..TSIZ (..PST,MSK)	;;SEE WHICH CASE
   831						  .CASE ..PST,<<
   832							SKIPN LOC	;;FULL WORD, TEST IN MEMORY
   833							JRST BA>,<
   834							HRRZ .SAC,LOC	;;RIGHT HALF, GET IT
   835							JUMPE .SAC,BA>,<
   836							HLRZ .SAC,LOC	;;LEFT HALF, GET IT
   837							JUMPE .SAC,BA>,<
   838							MOVE .SAC,LOC	;;NOTA, GET WORD
   839							JXE (.SAC,MSK,<BA>)>>>,<
   840						  JXE (LOC,MSK,<BA>)>>
   841
   842					;JUMP IF NOT ALL FIELDS ARE 0 (ONE REGISTER AT MOST)
   843
   844					DEFINE JN (STR,Y,BA)<
   845						..STR1 (..JN,<BA>,<STR>,Y,..STR3)>
   846
   847					   DEFINE ..JN (BA,LOC,MSK)<
   848						..TSAC (..ACT,LOC)	;;SEE IF AC
   849						.IF0 ..ACT,<
   850						  ..TSIZ (..PST,MSK)
   851						  .CASE ..PST,<<
   852							SKIPE LOC	;;FULL WORD, TEST IN MEMORY
   853							JRST BA>,<
   854							HRRZ .SAC,LOC	;;RIGHT HALF, GET IT
   855							JUMPN .SAC,BA>,<
   856							HLRZ .SAC,LOC	;;LEFT HALF, GET IT
   857							JUMPN .SAC,BA>,<
   858							MOVE .SAC,LOC	;;NOTA, GET WORD
   859							JXN (.SAC,MSK,<BA>)>>>,<
   860						  JXN (LOC,MSK,<BA>)>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 22
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   861
   862					;JOR - JUMP ON 'OR' OF ALL FIELDS
   863
   864					DEFINE JOR (STR,Y,BA)<
   865						..STR1 (..JN,<BA>,<STR>,Y,..STR4)>
   866
   867					;JNAND - JUMP ON NOT 'AND' OF ALL FIELDS
   868
   869					DEFINE JNAND (STR,Y,BA)<
   870						..STR1 (..JNA3,<BA>,<STR>,Y,..STR4)>
   871
   872					   DEFINE ..JNA3 (BA,LOC,MSK)<
   873						..TSAC (..ACT,LOC)
   874						.IF0 ..ACT,<
   875						  SETCM .SAC,LOC	;;NOT AC, GET COMPLEMENT OF WORD
   876						  JXN (.SAC,MSK,<BA>)>,<	;;JUMP IF ANY BITS ORIGINALLY OFF
   877						  JXF (LOC,MSK,<BA>)>>	;;DO AC CASE
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 23
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   878
   879					;JAND - JUMP ON 'AND' OF ALL FIELDS
   880
   881					DEFINE JAND (STR,Y,BA,%TG)<
   882						..STR1 (..JAN,<%TG,<BA>>,<STR>,Y,..STR5)
   883					%TG:>
   884
   885					   DEFINE ..JAN1 (BA1,BA2,LOC,MSK)<
   886						..JNA3 (BA1,LOC,MSK)>	;;DO JUMP NAND TO LOCAL TAG
   887
   888					   DEFINE ..JAN2 (BA1,BA2,LOC,MSK)<
   889						..TSAC (..ACT,LOC)
   890						.IF0 ..ACT,<
   891						  SETCM .SAC,LOC	;;NOT AC, GET COMPLEMENT OF WORD
   892						  JXE (.SAC,MSK,<BA2>)>,<	;;JUMP IF ALL BITS ORIGINALLY ONES
   893						  JXO (LOC,MSK,<BA2>)>> ;;DO AC CASE
   894
   895					;JNOR - JUMP ON NOT 'OR' OF ALL FIELDS
   896
   897					DEFINE JNOR (STR,Y,BA,%TG)<
   898						..STR1 (..JNO,<%TG,<BA>>,<STR>,Y,..STR5)
   899					%TG:>
   900
   901					   DEFINE ..JNO1 (BA1,BA2,LOC,MSK)<
   902						..JN (BA1,LOC,MSK)>	;;DO JUMP OR TO LOCAL TAG
   903
   904					   DEFINE ..JNO2 (BA1,BA2,LOC,MSK)<
   905						..JE (<BA2>,LOC,MSK)>	;;DO JUMP NOR TO GIVEN TAG
   906
   907					;TEST AND MODIFY GROUP USING DEFINED STRUCTURES.  TEST-ONLY AND
   908					;MODIFY-ONLY PROVIDED FOR COMPLETENESS.
   909					;GENERATES EXACTLY ONE INSTRUCTION
   910
   911					DEFINE ..DOTY (M,T)<		;;MACRO TO DEFINE ALL CASES
   912						IRP M,<
   913						IRP T,<
   914						  DEFINE TQ'M'T (STR,Y)<
   915						    ..STR1 (..TY,M'T,<STR>,Y,..STR3)>>>>
   916
   917						..DOTY (<N,O,Z,C>,<,E,N,A>)^ ;DO 16 DEFINES
   918						PURGE ..DOTY
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 24
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   919
   920					;SPECIAL DEFINE FOR THE TWO CASES WHICH CAN TAKE MEMORY ARG
   921					;*NOTE* MAY GENERATE MORE THAN ONE INSTRUCTION - CANNOT BE SKIPPED
   922
   923					DEFINE TMNE (STR,Y)<
   924						..STR1 (..TYNE,,<STR>,Y,..STR3)>
   925
   926					DEFINE ..TYNE (MT,LOC,MSK)<
   927						..TSAC (..ACT,LOC)	;;SEE IF LOC IS AC
   928						.IF0 ..ACT,<
   929						  ..JX1==MSK
   930						  .IF0 <..JX1-1B0>,<
   931							SKIPGE LOC>,<
   932						    .IF0 <..JX1+1>,<
   933							SKIPE LOC>,<
   934							MOVE .SAC,LOC
   935							TXNE .SAC,MSK>>>,<
   936							TXNE LOC,MSK>>
   937
   938					DEFINE TMNN (STR,Y)<
   939						..STR1 (..TYNN,,<STR>,Y,..STR3)>
   940
   941					DEFINE ..TYNN (MT,LOC,MSK)<
   942						..TSAC (..ACT,LOC)	;;SEE IF LOC IS AC
   943						.IF0 ..ACT,<
   944						  ..JX1==MSK
   945						  .IF0 <..JX1-1B0>,<
   946							SKIPL LOC>,<
   947						    .IF0 <..JX1+1>,<
   948							SKIPN LOC>,<
   949							MOVE .SAC,LOC
   950							TXNN .SAC,MSK>>>,<
   951							TXNN LOC,MSK>>
   952
   953					;ALL TY MACROS CALL ..TY AFTER INITIAL STRUCTURE PROCESSING
   954
   955					DEFINE ..TY (MT,LOC,MSK)<
   956						..TSAC (..ACT,LOC)	;;SEE IF LOC IS AC
   957						.IF0 ..ACT,<
   958							PRINTX ?TQ'MT - LOC NOT IN AC>,<
   959							TX'MT LOC,MSK>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 25
MACSYM	MAC	12-May-72 20:41		DEFSTR -- DEFINE DATA STRUCTURE

   960
   961						SUBTTL BLOCK MACROS
   962
   963					;MACROS TO PROVIDE SOME BLOCK HANDLING OF CODE
   964
   965					;DO. - LOOP STRUCTURE, DECLARES TOP OF LOOP
   966					; LOOP. - JUMPS TO TOP OF LOOP
   967					; EXIT. - EXITS LOOP
   968					; TOP. - TAG AT TOP OF LOOP FOR JUMPS, E.G. SOJG T4,TOP.
   969					; ENDLP. - TAG AT END OF LOOP FOR JUMPS, E.G. SOJL T4,ENDLP.
   970
   971					DEFINE DO. (%TGB,%TGE)<
   972						..SVLD			;;SAVE CURRENT BLOCK
   973					%TGB:!				;;TOP OF LOOP
   974					  DEFINE OD. <
   975					%TGE:!				;;END OF LOOP
   976						.POPX>			;;RESTORE DEFS
   977					  DEFINE LOOP. <
   978						JRST %TGB>		;;LOOP TO TOP
   979					  DEFINE TOP. <%TGB>		;;LABEL AT TOP FOR JUMPS
   980					  DEFINE ENDLP. <%TGE>		;;LABEL AT END FOR JUMPS
   981					  DEFINE EXIT. <
   982						JRST %TGE>>		;;EXIT LOOP
   983
   984					DEFINE ENDDO. <
   985						OD.>
   986
   987					DEFINE ..SVLD (%SY1,%SY2,%SY3,%SY4)<
   988						SYN OD.,%SY1
   989						SYN LOOP.,%SY2
   990						SYN TOP.,%SY3
   991						SYN EXIT.,%SY4
   992						.PSHX <
   993						 SYN %SY1,OD.
   994						 SYN %SY2,LOOP.
   995						 SYN %SY3,TOP.
   996						 SYN %SY4,EXIT.>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 26
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

   997
   998					;IFNSK., IFSKP. - "IF NO SKIP", "IF SKIP"
   999
  1000					;These macros cause the following code to be conditionally executed
  1001					;depending on whether the preceding instruction(s) skipped or not.
  1002					;The following code is ended with ENDIF., with ELSE. optional
  1003					;within the range.
  1004
  1005					;Note: both of these result in the same or fewer instructions than
  1006					;the use of literals to handle the same cases.
  1007					;Also, since the code is not in literals, the binary appears in the
  1008					;listing, and the code is easier to follow with DDT.
  1009					;If the preceding skip can be written in either sense, it is better
  1010					;to use IFSKP. because one fewer instructions will be generated.
  1011
  1012					;IFSKP. and IFNSK. have an alternate form where the consequence code
  1013					;is given as a macro argument.  In the normal case, no macro argument is given.
  1014
  1015					;"IF NO SKIP" CONSEQUENCE-CODE ALTERNATIVE-CODE
  1016					;If the instruction(s) preceding the macro does not skip, the 'consequence
  1017					; code' will be executed; otherwise (i.e. if the instruction skips) the
  1018					; 'alternative code' will be executed.
  1019
  1020					DEFINE IFNSK. (NSCOD,SKCOD,%TG1,%TG2)<
  1021					   IFB <NSCOD'SKCOD>,<		;;THE REGULAR FORM
  1022						..SVDF			;;SAVE DEFINITIONS OF OUTER BLOCK
  1023						TRNA			;;SKIP
  1024						JRST %TG1		;;JUMP PAST CODE
  1025					   DEFINE ..TAGF (INST,PCT)<
  1026						INST %TG1''PCT>		;;SAVE THE FALSE TAG
  1027					   DEFINE ..TAGE (INST,PCT)<
  1028						INST %TG2''PCT>		;;SAVE THE END TAG
  1029						>
  1030					   IFNB <NSCOD'SKCOD>,<		;;THE ALTERNATE FORM
  1031						JRST %TG1		;;THE NOSKIP CASE
  1032						SKCOD
  1033						JRST %TG2
  1034					%TG1:!	NSCOD
  1035					%TG2:!>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 27
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1036
  1037					;If JSYS Error
  1038
  1039					DEFINE IFJER. (NSCOD,SKCOD,%TG1,%TG2,%TG3)<
  1040					   IFB <NSCOD'SKCOD>,<		;;THE REGULAR FORM
  1041						..SVDF			;;SAVE DEFINITIONS OF OUTER BLOCK
  1042						ERJMP %TG3		;;SKIP
  1043						JRST %TG1		;;JUMP PAST CODE
  1044					%TG3:!
  1045					   DEFINE ..TAGF (INST,PCT)<
  1046						INST %TG1''PCT>		;;SAVE THE FALSE TAG
  1047					   DEFINE ..TAGE (INST,PCT)<
  1048						INST %TG2''PCT>		;;SAVE THE END TAG
  1049						>
  1050					   IFNB <NSCOD'SKCOD>,<		;;THE ALTERNATE FORM
  1051						ERJMP %TG1		;;THE NOSKIP CASE
  1052						SKCOD
  1053						JRST %TG2
  1054					%TG1:!	NSCOD
  1055					%TG2:!>>
  1056
  1057					;OBSOLETE NAME
  1058
  1059					DEFINE IFNES. (ARG1,ARG2)<
  1060						PRINTX % IFNES. should be changed to IFJER.
  1061						IFJER. <ARG1>,<ARG2>>
  1062
  1063
  1064					;"IF SKIP" CONSEQUENCE-CODE
  1065					;If the instruction(s) preceding the macro skips, the 'consequence
  1066					; code' will be executed.
  1067
  1068					DEFINE IFSKP. (SKCOD,%TG,%TG2)<
  1069					   IFB <SKCOD>,<		;;REGULAR FORM
  1070						..SVDF			;;SAVE DEFINITIONS OF OUTER BLOCK
  1071						JRST %TG
  1072					   DEFINE ..TAGF (INST,PCT)<
  1073						INST %TG''PCT>		;;SAVE FALSE TAG
  1074					   DEFINE ..TAGE (INST,PCT)<
  1075						INST %TG2''PCT>		;;SAVE END TAG
  1076						>
  1077					   IFNB <SKCOD>,<
  1078						JRST %TG
  1079						SKCOD
  1080					%TG:!>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 28
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1081
  1082					;If No JSYS Error
  1083
  1084					DEFINE IFNJE. (SKCOD,%TG,%TG2)<
  1085					   IFB <SKCOD>,<		;;REGULAR FORM
  1086						..SVDF			;;SAVE DEFINITIONS OF OUTER BLOCK
  1087						ERJMP %TG
  1088					   DEFINE ..TAGF (INST,PCT)<
  1089						INST %TG''PCT>		;;SAVE FALSE TAG
  1090					   DEFINE ..TAGE (INST,PCT)<
  1091						INST %TG2''PCT>		;;SAVE END TAG
  1092						>
  1093					   IFNB <SKCOD>,<
  1094						ERJMP %TG
  1095						SKCOD
  1096					%TG:!>>
  1097
  1098					;OBSOLETE NAME
  1099
  1100					DEFINE IFESK. (ARG)<
  1101						PRINTX % IFESK. should be changed to IFNJE.
  1102						IFNJE. <ARG>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 29
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1103
  1104					;CONDITIONALS WHICH REPRESENT JUMP CASES - I.E. AC L, LE, G, ETC.
  1105					; IF CONDITION IS SATISFIED, DO BRACKETTED CODE
  1106
  1107					DEFINE IFE. (AC,%TG1,%TG2)<
  1108						JUMPN AC,%TG1		;;JUMP IF NOT CONDITION
  1109						..SVDF			;;SAVE OUTER BLOCK
  1110					   DEFINE ..TAGF (INST,PCT)<
  1111						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1112					   DEFINE ..TAGE (INST,PCT)<
  1113						INST %TG2''PCT>		;;DEFINE END TAG
  1114						>
  1115
  1116					DEFINE IFN. (AC,%TG1,%TG2)<
  1117						JUMPE AC,%TG1		;;JUMP IF NOT CONDITION
  1118						..SVDF			;;SAVE OUTER BLOCK
  1119					   DEFINE ..TAGF (INST,PCT)<
  1120						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1121					   DEFINE ..TAGE (INST,PCT)<
  1122						INST %TG2''PCT>		;;DEFINE END TAG
  1123						>
  1124
  1125					DEFINE IFG. (AC,%TG1,%TG2)<
  1126						JUMPLE AC,%TG1		;;JUMP IF NOT CONDITION
  1127						..SVDF			;;SAVE OUTER BLOCK
  1128					   DEFINE ..TAGF (INST,PCT)<
  1129						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1130					   DEFINE ..TAGE (INST,PCT)<
  1131						INST %TG2''PCT>		;;DEFINE END TAG
  1132						>
  1133
  1134					DEFINE IFGE. (AC,%TG1,%TG2)<
  1135						JUMPL AC,%TG1		;;JUMP IF NOT CONDITION
  1136						..SVDF			;;SAVE OUTER BLOCK
  1137					   DEFINE ..TAGF (INST,PCT)<
  1138						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1139					   DEFINE ..TAGE (INST,PCT)<
  1140						INST %TG2''PCT>		;;DEFINE END TAG
  1141						>
  1142
  1143					DEFINE IFLE. (AC,%TG1,%TG2)<
  1144						JUMPG AC,%TG1		;;JUMP IF NOT CONDITION
  1145						..SVDF			;;SAVE OUTER BLOCK
  1146					   DEFINE ..TAGF (INST,PCT)<
  1147						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1148					   DEFINE ..TAGE (INST,PCT)<
  1149						INST %TG2''PCT>		;;DEFINE END TAG
  1150						>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 30
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1151
  1152					DEFINE IFL. (AC,%TG1,%TG2)<
  1153						JUMPGE AC,%TG1		;;JUMP IF NOT CONDITION
  1154						..SVDF			;;SAVE OUTER BLOCK
  1155					   DEFINE ..TAGF (INST,PCT)<
  1156						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1157					   DEFINE ..TAGE (INST,PCT)<
  1158						INST %TG2''PCT>		;;DEFINE END TAG
  1159						>
  1160
  1161					DEFINE IFXE. (AC,MASK,%TG1,%TG2)<
  1162						JXN AC,MASK,%TG1	;;JUMP IF NOT CONDITION
  1163						..SVDF			;;SAVE OUTER BLOCK
  1164					   DEFINE ..TAGF (INST,PCT)<
  1165						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1166					   DEFINE ..TAGE (INST,PCT)<
  1167						INST %TG2''PCT>		;;DEFINE END TAG
  1168						>
  1169
  1170					DEFINE IFXN. (AC,MASK,%TG1,%TG2)<
  1171						JXE AC,MASK,%TG1	;;JUMP IF NOT CONDITION
  1172						..SVDF			;;SAVE OUTER BLOCK
  1173					   DEFINE ..TAGF (INST,PCT)<
  1174						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1175					   DEFINE ..TAGE (INST,PCT)<
  1176						INST %TG2''PCT>		;;DEFINE END TAG
  1177						>
  1178
  1179					DEFINE IFQE. (STR,Y,%TG1,%TG2)<
  1180						JN <STR>,<Y>,%TG1	;;JUMP IF NOT CONDITION
  1181						..SVDF			;;SAVE OUTER BLOCK
  1182					   DEFINE ..TAGF (INST,PCT)<
  1183						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1184					   DEFINE ..TAGE (INST,PCT)<
  1185						INST %TG2''PCT>		;;DEFINE END TAG
  1186						>
  1187
  1188					DEFINE IFQN. (STR,Y,%TG1,%TG2)<
  1189						JE <STR>,<Y>,%TG1	;;JUMP IF NOT CONDITION
  1190						..SVDF			;;SAVE OUTER BLOCK
  1191					   DEFINE ..TAGF (INST,PCT)<
  1192						INST %TG1''PCT>		;;DEFINE FALSE TAG
  1193					   DEFINE ..TAGE (INST,PCT)<
  1194						INST %TG2''PCT>		;;DEFINE END TAG
  1195						>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 31
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1196
  1197					;GENERAL CASES WITHIN CONDITIONALS
  1198
  1199					;"AND SKIP"
  1200
  1201					DEFINE ANSKP. <
  1202						..TAGF (JRST,)>		;;JUMP TO 'FALSE'
  1203
  1204					DEFINE ANNSK. <
  1205						TRNA
  1206						..TAGF (JRST,)>		;;JUMP TO 'FALSE'
  1207
  1208					DEFINE ELSE. <....U>		;;UNDEFINED UNTIL BLOCK ENTERED
  1209					DEFINE ENDIF. <....U>
  1210					DEFINE ..TAGF <....U>
  1211					DEFINE ..TAGE <....U>
  1212
  1213					;"AND E" ETC.
  1214
  1215					DEFINE ANDE. (AC)<
  1216						..TAGF (<JUMPN AC,>,)>	;;JUMP IF NOT CONDITION
  1217
  1218					DEFINE ANDN. (AC)<
  1219						..TAGF (<JUMPE AC,>,)>	;;JUMP IF NOT CONDITION
  1220
  1221					DEFINE ANDG. (AC)<
  1222						..TAGF (<JUMPLE AC,>,)>	;;JUMP IF NOT CONDITION
  1223
  1224					DEFINE ANDGE. (AC)<
  1225						..TAGF (<JUMPL AC,>,)>	;;JUMP IF NOT CONDITION
  1226
  1227					DEFINE ANDLE. (AC)<
  1228						..TAGF (<JUMPG AC,>,)>	;;JUMP IF NOT CONDITION
  1229
  1230					DEFINE ANDL. (AC)<
  1231						..TAGF (<JUMPGE AC,>,)>	;;JUMP IF NOT CONDITION
  1232
  1233					DEFINE ANDXE. (AC,MASK)<
  1234						..TAGF (<JXN AC,MASK,>,)> ;;JUMP IF NOT CONDITION
  1235
  1236					DEFINE ANDXN. (AC,MASK)<
  1237						..TAGF (<JXE AC,MASK,>,)> ;;JUMP IF NOT CONDITION
  1238
  1239					DEFINE ANDQE. (STR,Y)<
  1240						..TAGF (<JN <STR>,<Y>,>,)> ;;JUMP IF NOT CONDITION
  1241
  1242					DEFINE ANDQN. (STR,Y)<
  1243						..TAGF (<JE <STR>,<Y>,>,)> ;;JUMP IF NOT CONDITION
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 32
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1244
  1245					;LOCAL WORKER MACROS
  1246
  1247					;THIS INITS THE DEFINITIONS OF ELSE. AND ENDIF. WHEN ENTERING A
  1248					;NEW BLOCK.
  1249
  1250					DEFINE ..INDF <
  1251					 DEFINE ELSE. <
  1252						..TAGE (JRST,)		;;JUMP TO END
  1253						..TAGF (,<:!>)		;;DEFINE THE FALSE TAG
  1254						SYN ..TAGE,..TAGF	;;MAKE FALSE EQUIVALENT TO END
  1255					   DEFINE ELSE. <....U>>	;;ELSE CAN APPEAR ONCE ONLY
  1256					
  1257					 DEFINE ENDIF. <
  1258						..TAGF (,<:!>)		;;DEFINE FALSE TAG
  1259						..RSDF>			;;RESTORE DEFINITIONS OF OUTER BLOCK
  1260					   >
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 33
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1261
  1262					;SAVE DEFINITIONS
  1263
  1264					DEFINE ..SVDF (%SY1,%SY2,%SY3,%SY4)<
  1265						SYN ELSE.,%SY1
  1266						SYN ENDIF.,%SY2
  1267						SYN ..TAGF,%SY3
  1268						SYN ..TAGE,%SY4
  1269						.PSHX <
  1270						  SYN %SY1,ELSE.
  1271						  SYN %SY2,ENDIF.
  1272						  SYN %SY3,..TAGF
  1273						  SYN %SY4,..TAGE>
  1274						..INDF			;;REINIT DEFS
  1275						      >
  1276
  1277					DEFINE ..RSDF <
  1278						.POPX>
  1279
  1280					;MACROS TO PUSH/POP STRINGS
  1281
  1282					DEFINE .PSHX (STUFF)<
  1283						.PSHX1 (.PSHX2,<STUFF>)>
  1284
  1285					DEFINE .PSHX1 (WCH,STUFF)<
  1286						WCH (<STUFF>)>
  1287
  1288					DEFINE .PSHX2 (OLD)<
  1289					   DEFINE .PSHX1 (WCH,STUFF)<
  1290						WCH (<<STUFF>,<OLD>>)>>
  1291
  1292					DEFINE .POPX <
  1293						.PSHX1 (.POPX2)>
  1294
  1295					DEFINE .POPX2 (STUFF)<
  1296						.POPX4 STUFF>
  1297
  1298					DEFINE .POPX4 (JUNK,STUFF)<
  1299						.POPX3 STUFF>
  1300
  1301					DEFINE .POPX3 (TOP,REST)<
  1302						TOP
  1303					   DEFINE .PSHX1 (WCH,STUFF)<
  1304						WCH (<<STUFF>,<REST>>)>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 34
MACSYM	MAC	12-May-72 20:41		BLOCK MACROS

  1305
  1306						SUBTTL CALL, RET, JSERR
  1307
  1308					   IFE REL,<
  1309						EXTERN JSERR0,JSMSG0,JSHLT0,R,RSKP>
  1310
  1311					;CALL AND RETURN
  1312
  1313			000001		.AC1==1				;ACS FOR JSYS ARGS
  1314			000002		.AC2==2
  1315			000003		.AC3==3
  1316			000016		.A16==16			;TEMP FOR STKVAR AND TRVAR
  1317			000017		P=17				;STACK POINTER
  1318
  1319		260740	000000		OPDEF CALL [PUSHJ P,0]
  1320		263740	000000		OPDEF RET [POPJ P,0]
  1321
  1322					;ABBREVIATION FOR  CALL, RET, RETSKP
  1323
  1324		254000	000000		OPDEF CALLRET [JRST]
  1325					.NODDT CALLRET
  1326
  1327					DEFINE RETSKP <JRST RSKP>
  1328
  1329					;MACRO TO PRINT MESSAGE ON TERMINAL
  1330
  1331					DEFINE TMSG ($MSG)<
  1332						HRROI .AC1,[ASCIZ \$MSG\]
  1333						PSOUT>
  1334
  1335					;MACRO TO OUTPUT MESSAGE TO FILE
  1336					; ASSUMES JFN ALREADY IN .AC1
  1337
  1338					DEFINE FMSG ($MSG)<
  1339						HRROI .AC2,[ASCIZ \$MSG\]
  1340						MOVEI .AC3,0
  1341						SOUT>
  1342
  1343					;MACRO TO PRINT MESSAGE FOR LAST ERROR, RETURNS +1
  1344
  1345					DEFINE PERSTR ($MSG)<
  1346					   IFNB <$MSG>,<
  1347						TMSG <$MSG>>
  1348						CALL JSMSG0>
  1349
  1350					;MACRO TO PRINT JSYS ERROR MESSAGE, RETURNS +1 ALWAYS
  1351
  1352		000000000000#		OPDEF JSERR[<CALL JSERR0>]
  1353		000000000000#		OPDEF EJSERR[<JUMP 17,JSERR0>]	;Since MACRO couldn't handle OPDEF of an OPDEF
  1354									;  (i.e. ERCAL) defined elsewhere, use JUMP 17,
  1355									;  instead
  1356
  1357					;MACRO FOR FATAL JSYS ERROR, PRINTS MSG THEN HALTS
  1358
  1359		000000000000#		OPDEF JSHLT[<CALL JSHLT0>]
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 34-1
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1360		000000000000#		OPDEF EJSHLT[<JUMP 17,JSHLT0>]	;Since MACRO couldn't handle OPDEF of an OPDEF
  1361									;  (i.e. ERCAL) defined elsewhere, use JUMP 17,
  1362									;  instead
  1363
  1364					;PRINT ERROR MESSAGE IF JSYS FAILS
  1365
  1366					DEFINE ERMSG(TEXT),<
  1367						ERJMP	[TMSG <? TEXT>
  1368							 JSHLT]
  1369					>
  1370
  1371					;MAKE SYMBOLS EXTERN IF NOT ALREADY DEFINED
  1372
  1373					DEFINE EXT (SYM)<
  1374					   IF2,<
  1375						IRP SYM,<
  1376						IFNDEF SYM,<EXTERN SYM
  1377						SUPPRE SYM>>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 35
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1378
  1379					;MACRO TO ADD BREAK CHARACTER TO FOUR WORD BREAK MASK (W0., W1., W2., W3.)
  1380
  1381					DEFINE BRKCH. (%%V,V2)
  1382					<
  1383					%%FOO==%%V
  1384						BRK0 (%%FOO,V2,0)
  1385					>
  1386
  1387					;MACRO TO REMOVE CHARACTER
  1388
  1389					DEFINE UNBRK. (%%V,V2)
  1390					<
  1391					%%FOO==%%V
  1392						BRK0 (%%FOO,V2,1)
  1393					>
  1394
  1395					DEFINE BRK0 (%%11,V2,FLAVOR)
  1396					<	..V22==%%11
  1397						..V1==%%11
  1398						IFNB <V2>,<..V22==V2>
  1399					REPEAT ..V22-<%%11>+1,<	;;BRACKETS AROUND %%11 IN CASE ITS AN EXPRESSION
  1400						%%W==..V1/^D32	;;DECIDE WHICH WORD CHARACTER GOES IN
  1401						%%X==..V1-%%W*^D32	;;CALCULATE BIT POSITION WITHIN WORD
  1402						IFE FLAVOR,BRKC1 \"<%%W+"0">	;;MODIFY CORRECT MASK WORD
  1403						IFN FLAVOR,BRKC2 \"<%%W+"0">
  1404						..V1==..V1+1
  1405							   >
  1406					>
  1407
  1408					DEFINE BRKC1 (ARG1)
  1409					<	W'ARG1'.==W'ARG1'.!<1B<%%X>>
  1410					>
  1411
  1412					DEFINE BRKC2 (ARG1)
  1413					<	W'ARG1'.==W'ARG1'.&<-1-1B<%%X>>
  1414					>
  1415
  1416					;MACRO TO INITIALIZE 4-WORD 12-BIT CHARACTER BREAK MASK
  1417
  1418					DEFINE BRINI.(A0<0>,A1<0>,A2<0>,A3<0>)
  1419					<
  1420					W0.==A0
  1421					W1.==A1				;INITIALIZE BREAK MASK
  1422					W2.==A2
  1423					W3.==A3
  1424					>
  1425
  1426					;MACRO TO DEFINE A BREAK SET
  1427
  1428					DEFINE BRMSK. (INI0,INI1,INI2,INI3,ALLOW,DISALW)
  1429					<	BRINI. INI0,INI1,INI2,INI3	;;SET UP INITIAL MASK
  1430						IRPC ALLOW,<	UNBRK. "ALLOW">	;;DON'T BREAK ON CHARS TO BE ALLOWED IN FIELD
  1431						IRPC DISALW,<	BRKCH. "DISALW">	;;BREAK ON CHARACTERS NOT ALLOWED
  1432						EXP W0.,W1.,W2.,W3.		;;STORE RESULTANT MASK IN MEMORY
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 35-1
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1433					>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 36
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1434
  1435					;COMND - MACRO FOR BUILDING FUNCTION DESCRIPTOR BLOCK
  1436					;THIS IS THE OLD ONE, BEFORE .CMBRK EXISTED.  USE FLDBK. FOR SPECIFYING
  1437					;BREAK SETS
  1438
  1439					DEFINE FLDDB. (TYP,FLGS,DATA,HLPM,DEFM,LST)<
  1440						..XX==<FLD(TYP,CM%FNC)>+FLGS+<0,,LST>
  1441					   IFNB <HLPM>,<..XX=CM%HPP!..XX>
  1442					   IFNB <DEFM>,<..XX=CM%DPP!..XX>
  1443						..XX
  1444					   IFNB <DATA>,<DATA>
  1445					   IFB <DATA>,<0>
  1446					   IFNB <HLPM>,<POINT 7,[ASCIZ HLPM]>
  1447					   IFB <HLPM>,<IFNB <DEFM>,<0>>
  1448					   IFNB <DEFM>,<POINT 7,[ASCIZ \DEFM\]>>
  1449
  1450					;COMND - MACRO FOR BUILDING FUNCTION DESCRIPTOR BLOCK
  1451
  1452					DEFINE FLDBK. (TYP,FLGS,DATA,HLPM,DEFM,BRKADR,LST)<
  1453						..XX==<FLD(TYP,CM%FNC)>+FLGS+<Z LST>
  1454					   IFNB <HLPM>,<..XX=CM%HPP!..XX>
  1455					   IFNB <DEFM>,<..XX=CM%DPP!..XX>
  1456					   IFNB <BRKADR>,<..XX=CM%BRK!..XX>
  1457						..XX
  1458					   IFNB <DATA>,<DATA>
  1459					   IFB <DATA>,<0>
  1460					   IFNB <HLPM>,<POINT 7,[ASCIZ HLPM]>
  1461					   IFB <HLPM>,<IFNB <DEFM'BRKADR>,<0>>
  1462					   IFB <DEFM>,<IFNB <BRKADR>,<0>>
  1463					   IFNB <DEFM>,<POINT 7,[ASCIZ \DEFM\]>
  1464					   IFNB <BRKADR>,<BRKADR>
  1465					   >
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 37
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1466
  1467					;USEFUL EXTENDED ADDRESSING DEFINITIONS
  1468
  1469		415000	000000		OPDEF	XMOVEI [SETMI]		;EXTENDED MOVE IMMEDIATE
  1470		501000	000000		OPDEF	XHLLI [HLLI]		;NOT YET IN MACRO
  1471
  1472					DEFINE XBLT. (A)<
  1473						EXTEND A,[XBLT]>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 38
MACSYM	MAC	12-May-72 20:41		CALL, RET, JSERR

  1474
  1475						SUBTTL SUPPORT CODE FOR JSERR
  1476
  1477					   IFN REL,<
  1478					
  1479					A=1
  1480					B=2
  1481					C=3
  1482					D=4
  1483					
  1484					;JSYS ERROR HANDLER
  1485					;	CALL JSERR0
  1486					; RETURNS +1: ALWAYS, CAN BE USED IN +1 RETURN OF JSYS'S
  1487					
  1488					JSERR0::MOVEI A,.PRIIN
  1489						CFIBF			;CLEAR TYPAHEAD
  1490						MOVEI A,.PRIOU
  1491						DOBE			;WAIT FOR PREVIOUS OUTPUT TO FINISH
  1492						TMSG <
  1493					? JSYS ERROR: >
  1494					JSMSG0::MOVEI A,.PRIOU
  1495						HRLOI B,.FHSLF		;SAY  THIS FORK ,, LAST ERROR
  1496						SETZ C,
  1497						ERSTR
  1498						 JFCL
  1499						 JFCL
  1500						TMSG <
  1501					>
  1502						RET
  1503					
  1504					;FATAL JSYS ERROR - PRINT MESSAGE AND HALT
  1505					;	CALL JSHLT0
  1506					; RETURNS: NEVER
  1507					
  1508					JSHLT0::CALL JSERR0		;PRINT THE MSG
  1509					JSHLT1:	HALTF
  1510						TMSG <PROGRAM CANNOT CONTINUE
  1511					>
  1512						JRST JSHLT1		;HALT AGAIN IF CONTINUED
  1513					   >				;END OF IFN REL,
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 39
MACSYM	MAC	12-May-72 20:41		SUPPORT CODE FOR JSERR

  1514
  1515						SUBTTL STKVAR - STACK VARIABLE FACILITY
  1516
  1517					;MACRO FOR ALLOCATING VARIABLES ON THE STACK. ITS ARGUMENT IS
  1518					;A LIST OF ITEMS.  EACH ITEM MAY BE:
  1519					; 1. A SINGLE VARIABLE WHICH WILL BE ALLOCATED ONE WORD
  1520					; 2. A VARIABLE AND SIZE PARAMETER WRITTEN AS <VAR,SIZ>.  THE
  1521					;	VARIABLE WILL BE ALLOCATED THE SPECIFIED NUMBER OF WORDS.
  1522					;RETURN FROM A SUBROUTINE USING THIS FACILITY MUST BE VIA
  1523					;RET OR RETSKP.  A DUMMY RETURN WHICH FIXES UP THE STACK IS PUT ON
  1524					;THE STACK AT THE POINT THE STKVAR IS ENCOUNTERED.
  1525					;WITHIN THE RANGE OF A STKVAR, PUSH/POP CANNOT BE USED AS THEY WILL
  1526					;CAUSE THE VARIABLES (WHICH ARE DEFINED AS RELATIVE STACK LOCATIONS)
  1527					;TO REFERENCE THE WRONG PLACE.
  1528					;TYPICAL USE:   STKVAR <AA,BB,<QQ,5>,ZZ>
  1529					;		ENDSV.		;END OF SCOPE OF NAMES
  1530
  1531					   IFE REL,<
  1532						EXTERN .STKST,.STKRT>
  1533
  1534					DEFINE STKVAR (ARGS)<
  1535						..STKR==10		;;REMEMBER RADIX
  1536						RADIX 8
  1537						..STKN==0
  1538						IRP ARGS,<
  1539						  .STKV1 (ARGS)>
  1540						JSP .A16,.STKST
  1541						 ..STKN,,..STKN
  1542						RADIX ..STKR
  1543						DEFINE ENDSV.<.ENSV1 <ARGS>>
  1544					   >
  1545
  1546					;INTERMEDIATE MACRO TO PEAL OFF ANGLEBRACKETS IF ANY
  1547
  1548					DEFINE .STKV1 (ARG)<
  1549						.STKV2 (ARG)>
  1550
  1551					;INTERMEDIATE MACRO TO CALCULATE OFFSET AND COUNT VARIABLES
  1552
  1553					DEFINE .STKV2 (VAR,SIZ)<
  1554						IFB <SIZ>,<..STKN==..STKN+1>
  1555						IFNB <SIZ>,<..STKN==..STKN+SIZ>
  1556						..STKQ==..STKN+1
  1557						.STKV3 (VAR,\..STKQ)>
  1558
  1559					;INNERMOST MACRO TO DEFINE VARIABLE
  1560
  1561					DEFINE .STKV3 (VAR,LOC)<
  1562					   IFDEF VAR,<.IF VAR,SYMBOL,<PRINTX STKVAR VAR ALREADY DEFINED>>
  1563						DEFINE VAR<-^O'LOC(P)>
  1564						$'VAR==<Z VAR>>		;SYMBOL FOR DDT
  1565
  1566					;CLEANUP NAMES
  1567
  1568					DEFINE .ENSV1 (ARGS)<
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 39-1
MACSYM	MAC	12-May-72 20:41		STKVAR - STACK VARIABLE FACILITY

  1569						IRP ARGS,<
  1570						  .ENSV2 (ARGS)>>
  1571
  1572					  DEFINE .ENSV2 (ARG)<
  1573						.ENSV3 (ARG)>
  1574
  1575					  DEFINE .ENSV3 (ARG,SIZ)<
  1576						DEFINE ARG<....U>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 40
MACSYM	MAC	12-May-72 20:41		STKVAR - STACK VARIABLE FACILITY

  1577
  1578					   IFN REL,<
  1579					
  1580					;COMMON ENTRY AND EXIT ROUTINE FOR STACK VARIABLE
  1581					
  1582						ENTRY .STKST
  1583					
  1584					.STKST::ADD P,0(.A16)		;BUMP STACK FOR VARIABLES USED
  1585						JUMPGE P,STKSOV		;TEST FOR STACK OVERFLOW
  1586					STKSE1:	PUSH P,0(.A16)		;SAVE BLOCK SIZE FOR RETURN
  1587						PUSHJ P,1(.A16)		;CONTINUE ROUTINE, EXIT TO .+1
  1588					.STKRT::JRST STKRT0		;NON-SKIP RETURN COMES HERE
  1589						POP P,.A16		;SKIP RETURN COMES HERE-RECOVER COUNT
  1590						SUB P,.A16		;ADJUST STACK TO REMOVE BLOCK
  1591						AOS 0(P)		;NOW DO SKIP RETURN
  1592						RET
  1593					
  1594					STKRT0:	POP P,.A16		;RECOVER COUNT
  1595						SUB P,.A16		;ADJUST STACK TO REMOVE BLOCK
  1596						RET			;DO NON-SKIP RETURN
  1597					
  1598					STKSOV:	SUB P,0(.A16)		;STACK OVERFLOW- UNDO ADD
  1599						HLL .A16,0(.A16)	;SETUP TO DO MULTIPLE PUSH, GET COUNT
  1600					STKSO1:	PUSH P,[0]		;DO ONE PUSH AT A TIME, GET REGULAR
  1601						SUB .A16,[1,,0]		; ACTION ON OVERFLOW
  1602						TLNE .A16,777777	;COUNT DOWN TO 0?
  1603						JRST STKSO1		;NO, KEEP PUSHING
  1604						JRST STKSE1
  1605					   >				;END OF IFN REL,
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 41
MACSYM	MAC	12-May-72 20:41		STKVAR - STACK VARIABLE FACILITY

  1606
  1607						SUBTTL TRVAR - TRANSIENT VARIABLE FACILITY
  1608
  1609					;TRANSIENT (STACK) VARIABLE FACILITY - EQUIVALENT TO STKVAR
  1610					;EXCEPT ALLOWS VARIABLES TO BE USED WITHIN LOWER LEVEL ROUTINES
  1611					;AND AFTER OTHER THINGS HAVE BEEN PUSHED ON STACK.
  1612					;N.B. USES .FP AS FRAME POINTER - MUST NOT BE CHANGED WHILE
  1613					;VARIABLES IN USE.
  1614
  1615			000015		.FP==15				;DEFAULT FRAME POINTER
  1616
  1617					   IFE REL,<
  1618						EXTERN .TRSET,.TRRET,.ASSET,.SASET,.ASRET>
  1619
  1620					DEFINE TRVAR (VARS)<
  1621						..TRR==10		;;REMEMBER CURRENT RADIX
  1622						RADIX 8
  1623						..NV==1			;;INIT COUNT OF STACK WORDS
  1624						IRP VARS,<
  1625						  .TRV1 (VARS)>		;;PROCESS LIST
  1626						JSP .A16,.TRSET		;;ALLOCATE STACK SPACE, SETUP .FP
  1627						 ..NV-1,,..NV-1
  1628						RADIX ..TRR		;;RESTORE RADIX
  1629						DEFINE ENDTV.<.ENSV1 <VARS>>
  1630						>
  1631
  1632					DEFINE .TRV1 (VAR)<
  1633						.TRV2 (VAR)>		;;PEEL OFF ANGLEBRACKETS IF ANY
  1634
  1635					DEFINE .TRV2 (NAM,SIZ)<
  1636						.TRV3 (NAM,\..NV)	;;DEFINE VARIABLE
  1637						IFB <SIZ>,<..NV=..NV+1>
  1638						IFNB <SIZ>,<..NV=..NV+SIZ>>
  1639
  1640					DEFINE .TRV3 (NAM,LOC)<
  1641					   IFDEF NAM,<.IF NAM,SYMBOL,<PRINTX TRVAR NAM ALREADY DEFINED>>
  1642						DEFINE NAM<^O'LOC(.FP)>
  1643						$'NAM==<Z NAM>>		;;SYMBOL FOR DDT
  1644
  1645					;AC SUBROUTINE - ENTRY FOR SUBROUTINE CALLED WITH 1-4 ARGS IN ACS T1-T4.
  1646					;USES .FP AS FRAME PTR LIKE TRVAR
  1647
  1648					DEFINE ASUBR (ARGS)<
  1649						..TRR==10		;;SAVE RADIX
  1650						RADIX 8
  1651						..NV==1			;;INIT ARG COUNT
  1652						IRP ARGS,<
  1653						  .TRV1 (ARGS)>		;;DEFINE ARG SYMBOL
  1654						IFG ..NV-5,<PRINTX ?TOO MANY ARGUMENTS: ARGS>
  1655						JSP .A16,.ASSET		;;SETUP STACK
  1656						RADIX ..TRR		;;RESTORE RADIX
  1657						DEFINE ENDAS.<.ENSV1 <ARGS>>
  1658						>
  1659					;SAME AS ABOVE EXCEPT ALSO RESTORES T1-T4 FROM STACK
  1660
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 41-1
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1661					DEFINE SASUBR (ARGS)<
  1662						..TRR==10		;;SAVE RADIX
  1663						RADIX 8
  1664						..NV==1			;;INIT ARG COUNT
  1665						IRP ARGS,<
  1666						  .TRV1 (ARGS)>		;;DEFINE ARG SYMBOL
  1667						IFG ..NV-5,<PRINTX ?TOO MANY ARGUMENTS: ARGS>
  1668						JSP .A16,.SASET		;;SETUP STACK
  1669						RADIX ..TRR		;;RESTORE RADIX
  1670						DEFINE ENDSA.<.ENSV1 <ARGS>>
  1671						>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 42
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1672
  1673					   IFN REL,<
  1674					;SUPPORT ROUTINE FOR TRVAR
  1675					
  1676					.TRSET::PUSH P,.FP		;PRESERVE OLD .FP
  1677						MOVE .FP,P		;SETUP FRAME PTR
  1678						ADD P,0(.A16)		;ALLOCATE SPACE
  1679						JUMPGE P,TRSOV
  1680					TRSET1:	PUSHJ P,1(.A16)		;CONTINUE ROUTINE, EXIT VIA .+1
  1681					.TRRET::JRST [	MOVEM .FP,P	;CLEAR STACK
  1682							POP P,.FP	;RESTORE OLD .FP
  1683							POPJ P,]
  1684						MOVEM .FP,P		;HERE IF SKIP RETURN
  1685						POP P,.FP
  1686						AOS 0(P)		;PASS SKIP RETURN
  1687						POPJ P,
  1688					
  1689					TRSOV:	MOVE P,.FP		;STACK OVERFLOW, UNDO ADD
  1690						PUSH P,.A16		;SAVE LOCAL RETURN
  1691						HRRZ .A16,0(.A16)	;GET COUNT
  1692						ADJSP P,-1(.A16)	;ADJUST STACK, GET TRAP HERE OR ON PUSH
  1693						MOVE .A16,1(.FP)	;RESTORE LOCAL RETURN
  1694						JRST TRSET1		;NOW CHARGE AHEAD
  1695					
  1696					;SUPPORT ROUTINE FOR ASUBR
  1697					
  1698					.ASSET::PUSH P,.FP		;SAVE .FP
  1699						MOVE .FP,P		;SETUP FRAME POINTER
  1700						ADJSP P,4		;BUMP STACK
  1701						DMOVEM A,1(.FP)	;SAVE ARGS
  1702						DMOVEM C,3(.FP)
  1703						PUSHJ P,0(.A16)		;CONTINUE ROUTINE
  1704					.ASRET:: JRST [	MOVEM .FP,P	;NO-SKIP RETURN, CLEAR STACK
  1705							POP P,.FP
  1706							POPJ P,]
  1707						MOVEM .FP,P		;SKIP RETURN, CLEAR STZCK
  1708						POP P,.FP
  1709						AOS 0(P)
  1710						POPJ P,
  1711					
  1712					;SUPPORT ROUTINE FOR SASUBR
  1713					
  1714					.SASET::PUSH P,.FP		;SAVE .FP
  1715						MOVE .FP,P		;SETUP FRAME POINTER
  1716						ADJSP P,4		;BUMP STACK
  1717						DMOVEM A,1(.FP)	;SAVE ARGS
  1718						DMOVEM C,3(.FP)
  1719						PUSHJ P,0(.A16)		;CONTINUE ROUTINE
  1720					.SARET:: JRST [	DMOVE A,1(.FP)	;RESTORE
  1721							DMOVE C,3(.FP)
  1722							MOVEM .FP,P	;NO-SKIP RETURN, CLEAR STACK
  1723							POP P,.FP
  1724							POPJ P,]
  1725						DMOVE A,1(.FP)		;RESTORE
  1726						DMOVE C,3(.FP)
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 42-1
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1727						MOVEM .FP,P		;SKIP RETURN, CLEAR STACK
  1728						POP P,.FP
  1729						AOS 0(P)
  1730						POPJ P,
  1731					   >				;END OF IFN REL,
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 43
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1732
  1733					;AC VARIABLE FACILITY
  1734
  1735					   IFE REL,<
  1736						EXTERN .SAV1,.SAV2,.SAV3,.SAV4,.SAV8>
  1737
  1738			000005		.FPAC==5			;FIRST PRESERVED AC
  1739			000010		.NPAC==10			;NUMBER OF PRESERVED ACS
  1740
  1741					DEFINE ACVAR (LIST)<
  1742						..NAC==0		;;INIT NUMBER OF ACS USED
  1743						IRP LIST,<
  1744						  .ACV1 (LIST)>		;;PROCESS ITEMS
  1745						.ACV3 (\..NAC)		;;SAVE ACS USED
  1746						DEFINE ENDAV.<.ENAV1 <LIST>>>
  1747
  1748					DEFINE .ACV1 (ITEM)<
  1749						.ACV2 (ITEM)>		;;PEEL OFF ANGLEBRACKETS IF ANY
  1750
  1751					DEFINE .ACV2 (NAM,SIZ)<
  1752					   IFDEF NAM,<.IF NAM,SYMBOL,<PRINTX ACVAR NAM ALREADY DEFINED>>
  1753						NAM==.FPAC+..NAC	;;DEFINE VARIABLE
  1754						$'NAM==NAM		;;FOR DDT
  1755						IFB <SIZ>,<..NAC=..NAC+1>
  1756						IFNB <SIZ>,<..NAC=..NAC+SIZ>>
  1757
  1758					DEFINE .ACV3 (N)<
  1759						IFG N-.NPAC,<PRINTX ?TOO MANY ACS USED>
  1760						IFLE N-4,<
  1761						  JSP .A16,.SAV'N>	;;SAVE ACTUAL NUMBER USED
  1762						IFG N-4,<
  1763						  JSP .A16,.SAV8>>	;;SAVE ALL
  1764
  1765					DEFINE .ENAV1 (ARGS)<
  1766						IRP ARGS,<
  1767						  .ENAV2 (ARGS)>>
  1768
  1769					  DEFINE .ENAV2 (ARG)<
  1770						.ENAV3 (ARG)>
  1771
  1772					  DEFINE .ENAV3 (NAM,SIZ)<
  1773						PURGE NAM,NAM
  1774					  >
  1775
  1776					   IFN REL,<
  1777					;SUPPORT ROUTINES FOR AC VARIABLE FACILITY
  1778					
  1779					.SAV1::	PUSH P,.FPAC
  1780						PUSHJ P,0(.A16)		;CONTINUE PROGRAM
  1781						 SKIPA
  1782						AOS -1(P)
  1783						POP P,.FPAC
  1784						POPJ P,
  1785					
  1786					.SAV2::	PUSH P,.FPAC
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 43-1
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1787						PUSH P,.FPAC+1
  1788						PUSHJ P,0(.A16)
  1789						 SKIPA
  1790						AOS -2(P)
  1791						POP P,.FPAC+1
  1792						POP P,.FPAC
  1793						POPJ P,
  1794					
  1795					.SAV3::
  1796					.SAV4::	PUSH P,.FPAC
  1797						PUSH P,.FPAC+1
  1798						PUSH P,.FPAC+2
  1799						PUSH P,.FPAC+3
  1800						PUSHJ P,0(.A16)
  1801						 SKIPA
  1802						AOS -4(P)
  1803						POP P,.FPAC+3
  1804						POP P,.FPAC+2
  1805						POP P,.FPAC+1
  1806						POP P,.FPAC
  1807						POPJ P,
  1808					
  1809					.SAV8::	ADD P,[10,,10]
  1810						JUMPGE P,[HALT .]
  1811						DMOVEM .FPAC,-7(P)
  1812						DMOVEM .FPAC+2,-5(P)
  1813						DMOVEM .FPAC+4,-3(P)
  1814						DMOVEM .FPAC+6,-1(P)
  1815						PUSHJ P,0(.A16)
  1816						 SKIPA
  1817						AOS -10(P)
  1818						DMOVE .FPAC+6,-1(P)
  1819						DMOVE .FPAC+4,-3(P)
  1820						DMOVE .FPAC+2,-5(P)
  1821						DMOVE .FPAC,-7(P)
  1822						SUB P,[10,,10]
  1823						POPJ P,
  1824					   >
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 44
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1825
  1826					;AC SAVE FACILITY - COMPILES OPEN PUSH'S
  1827					;	SAVEAC <LIST-OF-ACS>
  1828					;DUMMY ROUTINE PUT ON STACK TO CAUSE AUTOMATIC RESTORE. SUPPORTS
  1829					; +1 OR +2 RETURNS.
  1830
  1831					DEFINE SAVEAC (ACS)<
  1832						.NAC==0
  1833						IRP ACS,<
  1834						  PUSH P,ACS		;;SAVE AN AC
  1835						  .NAC=.NAC+1>		;;COUNT THEM
  1836						.N1==.NAC
  1837						SETMI .A16,[CAIA	;;STACK DUMMY RETURN
  1838							AOS -.N1(P)	;;HANDLE SKIP RETURN
  1839						  IRP ACS,<
  1840							.N1=.N1-1
  1841							MOVE ACS,-.N1(P)>  ;;RESTORE AN AC
  1842							SUB P,[.NAC,,.NAC]  ;;CLEAR STACK
  1843							POPJ P,]	;;FINAL RETURN
  1844						PUSH P,.A16>
  1845
  1846					   IFN REL,<
  1847					;STANDARD RETURNS
  1848					
  1849					RSKP::	AOS 0(P)
  1850					R::	RET
  1851					   >				;END OF IFN REL,
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 45
MACSYM	MAC	12-May-72 20:41		TRVAR - TRANSIENT VARIABLE FACILITY

  1852
  1853						SUBTTL BLSUBR - BLISS-STYLE SUBROUTINE MECHANISM
  1854
  1855					;MACROS FOR STACK-STYLE (BLISS) SUBROUTINE ENTRY
  1856					;BLSUBR DEFINE A SUBROUTINE ENTRY POINT.  IT TAKES THE LIST OF
  1857					;SYMBOLS WHICH WILL BE BOUND TO VALUES ON THE STACK AT ENTRY TO
  1858					;THE ROUTINE.  A STACK FRAME POINTER IS SETUP IN .FP AND MUST
  1859					;BE UNDISTURBED THROUGH THE ROUTINE.  OTHER MECHANISMS WHICH
  1860					;USE THE STACK (E.G. SAVEAC) CAN BE USED.
  1861					;AN OPTIONAL LIST OF VARIABLES IN THE SAME FORMAT AS FOR TRVAR CAN
  1862					;BE GIVEN TO ALLOCATE LOCAL DYNAMIC STORAGE.
  1863
  1864					;SUBROUTINES DEFINED HEREBY ARE CALLED WITH BLCALL.
  1865
  1866					   IFE REL,<
  1867						EXTERN .ENTER>
  1868
  1869					DEFINE BLSUB. (ARGS,VARS)<	;;ARGUMENTS, LOCAL VARIABLES
  1870						..TRR==10		;;REMEMBER CURRENT RADIX
  1871						RADIX 8			;;SO BACKSLASH ARGS WILL WORK HEREIN
  1872						..NA==2			;;INIT ARG COUNT
  1873						IRP ARGS,<
  1874						  ..NA=..NA+1>		;;COUNT ARGS
  1875						IRP ARGS,<
  1876						  .BLSU1(ARGS,\..NA)	;;DEFINE AN ARG
  1877						  ..NA=..NA-1>
  1878						..NV==1			;;SETUP TO COUNT VARIABLE STORAGE
  1879						IRP VARS,<
  1880						  .TRV1 (VARS)>		;;COUNT WORDS AND DEFINE SYMBOLS
  1881					  DEFINE ENDBS. <.ENBS1 <ARGS>
  1882							.ENSV1 <VARS>> ;;SAVE SYMBOLS
  1883						JSP .A16,.ENTER
  1884						..NV-1,,..NV-1
  1885						RADIX ..TRR>		;;SETUP FRAME PTR
  1886
  1887					DEFINE .BLSU1 (ARG,LOC)<
  1888						DEFINE ARG<-^O'LOC(.FP)>
  1889						$'ARG==<Z ARG>>
  1890
  1891					DEFINE .ENBS1 (ARGS)<
  1892						IRP ARGS,<
  1893					   DEFINE ARGS<....U>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 46
MACSYM	MAC	12-May-72 20:41		BLSUBR - BLISS-STYLE SUBROUTINE MECHANISM

  1894
  1895					;CALL STACK-STYLE (BLISS) SUBROUTINE
  1896					;THIS MACRO TAKES THE NAME OF THE SUBROUTINE AND A LIST OF ARGUMENTS.
  1897					;EACH ARGUMENT IN THE ARG LIST IS ONE OF THE FOLLOWING:
  1898					;  1. A NORMAL EFFECTIVE ADDRESS SPECIFICATION, E.G. FOO, @FIE(X)
  1899					;  2. AN IMMEDIATE ADDRESS WRITTEN AS <.,ADR> WHERE ADR IS AN EFFECTIVE
  1900					;	ADDRESS SPECIFICATION, E.G. FOO, @FIE(X).  NOTE THAT THIS
  1901					;	ADDRESS WILL BE COMPUTED BY AN XMOVEI AT THE TIME OF THE CALL
  1902					;	SO SECTION INFORMATION WILL BE BOUND AT THAT TIME.  NOTE ALSO
  1903					;	THAT THIS FORM SHOULD *NOT* BE USED FOR A LITERAL CONSTANT
  1904					;	WHERE YOU WOULD NOT WANT THE CURRENT SECTION PUT IN THE LEFT
  1905					;	HALF.  USE [CONST] INSTEAD.  YES, THE DOT HERE IS LIKE NO-DOT IN BLISS
  1906					;	AND VICE-VERSA.
  1907					;  3. A STRUCTURE REFERENCE SPECIFICATION, E.G. AAA, <BB,(X)>.  IF
  1908					;	THE LATTER FORM IS USED, THE BRACKETS ARE REQUIRED.
  1909
  1910					DEFINE BLCAL. (NAME,ARGS)<
  1911						..NA==0			;;INIT ARG COUNT
  1912						IRP ARGS,<
  1913						  .BLCL2 ARGS>		;;COMPILE PUSH
  1914						PUSH P,[..NA+1,,..NA+1]	;;COUNT OF ARGS AND SELF
  1915						PUSHJ P,NAME		;;JUMP TO SUBR
  1916					   >
  1917
  1918					;SEPARATE PAIRED ARGS
  1919
  1920					  DEFINE .BLCL2 (ARGS)<
  1921						.BLCL1 ARGS>
  1922
  1923					  DEFINE .BLCL1 (ARG1,ARG2)<
  1924						  IFIDN <ARG1><.>,<
  1925							XMOVEI .A16,ARG2	;;IMMEDIATE ARG
  1926							PUSH P,.A16>
  1927						  IFDIF <ARG1><.>,<
  1928						  .IFATM <ARG1>,.BLF1	;;SEE IF ARG IS ATOMIC
  1929						  IFN .BLF1,<
  1930						    .BLF1==0		;;SET TO 1 IFF STRUCTURE REF
  1931						    .IF %'ARG1,MACRO,<	;;CHECK RELATED STRUCTURE SYMBOL
  1932							.BLF1==1>	;;IS A STRUCTURE
  1933						    IFNB <ARG2>,<
  1934							.BLF1==1>	;;SECOND ARG IMPLIES STRUCTURE TOO
  1935						    IFN .BLF1,<		;;'OR' OF ABOVE TWO CHECKS
  1936							LOAD .A16,ARG1,ARG2
  1937							PUSH P,.A16>>
  1938						  IFE .BLF1,<		;IF WASN'T A STRUCTURE REF,
  1939							PUSH P,ARG1>>	;;PUSH ONE ARG
  1940						  ..NA=..NA+1>
  1941
  1942					;MACRO TO SEE IF STRING IS AN ATOM, I.E. CONTAINS ONLY LEGAL SYMBOL
  1943					;CONSTITUENTS A-Z, 0-9, %, $, .
  1944					;IT IS PAINFULLY SLOW, BUT MACRO PROVIDES NO OTHER WAY
  1945					;FLAG WILL BE SET TO 1 IF STRING IS ATOM, 0 OTHERWISE
  1946
  1947					DEFINE .IFATM (S,FLG)<
  1948						IRPC S,<
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 46-1
MACSYM	MAC	12-May-72 20:41		BLSUBR - BLISS-STYLE SUBROUTINE MECHANISM

  1949						FLG==0
  1950						IFGE "S"-"A",<IFLE "S"-"Z",<FLG=1>> ;;SET FLG IF LETTER OK
  1951						IFGE "S"-"0",<IFLE "S"-"9",<FLG=1>>
  1952						IFE "S"-"%",<FLG=1>
  1953						IFE "S"-"$",<FLG=1>
  1954						IFE "S"-".",<FLG=1>
  1955						IFE FLG,<STOPI>>>
  1956
  1957					   IFN REL,<
  1958					;SUPPORT CODE FOR BLSUBR
  1959					
  1960					.ENTER::PUSH P,.FP
  1961						MOVE .FP,P
  1962						ADD P,0(.A16)		;ALLOCATE LOCAL STORAGE
  1963						JUMPGE P,ENTOV		;JUMP IF OVERFLOW
  1964					ENTOV1:	PUSHJ P,1(.A16)
  1965						 JRST [	MOVE P,.FP	;RESET STACK PTR
  1966							JRST ENTX1]
  1967						MOVE P,.FP
  1968						AOS -1(P)		;PROPAGATE SKIP
  1969					ENTX1:	POP P,.FP
  1970						POP P,.A16
  1971						SUB P,0(P)		;REMOVE ARGS
  1972						JRST 0(.A16)		;RETURN
  1973					
  1974					ENTOV:	MOVE P,.FP		;STACK OVERFLOW, UNDO ADD
  1975						PUSH P,.A16		;SAVE LOCAL RETURN IN 1(.FP)
  1976						HRRZ .A16,0(.A16)	;GET COUNT
  1977						ADJSP P,-1(.A16)	;ALLOCATE SPACE, GET TRAP HERE OR ON PUSH
  1978						MOVE .A16,1(.FP)	;RESTORE LOCAL RETURN
  1979						JRST ENTOV1		;CHARGE AHEAD
  1980					   >				;END IFN REL
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 47
MACSYM	MAC	12-May-72 20:41		BLSUBR - BLISS-STYLE SUBROUTINE MECHANISM

  1981
  1982						SUBTTL ERROR-MESSAGE SUPPORT FOR MACROS
  1983
  1984
  1985
  1986
  1987						;Macro to print current location, macro name, and text
  1988						DEFINE MPRNTX (MNAME,TEXT)
  1989						  <DEFINE ..MP. (LOCN,MTEXT,PTEXT)
  1990						    <PRINTX Location 'LOCN', Macro 'MTEXT': PTEXT
  1991						    >
  1992						  ..MP.(\.,MNAME,<TEXT>)
  1993						  PURGE ..MP.
  1994						  >
  1995
  1996						;Macro to print current location and text
  1997						DEFINE EPRNTX (TEXT)
  1998						  <DEFINE ..EP. (LOCN,PTEXT)
  1999						    <PRINTX Location 'LOCN': PTEXT
  2000						    >
  2001						  ..EP.(\.,<TEXT>)
  2002						  PURGE ..EP.
  2003						  >
  2004
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 48
MACSYM	MAC	12-May-72 20:41		ERROR-MESSAGE SUPPORT FOR MACROS

  2005
  2006						SUBTTL MACROS TO SUPPORT EXTENDED ADDRESSING
  2007
  2008
  2009					;	Local format indirect word
  2010					;	=================================================================
  2011					;	!1!0!    Reserved   ! I !   X   !	      ADDR		!
  2012					;	=================================================================
  2013					;	!0!1!2     	  12! 13!14   17!18			      35!
  2014
  2015
  2016
  2017						;Macro to generate local-format (instruction-format) indirect words
  2018						;Args:	
  2019						;	ADDR	18-bit in-section address (indexing or indirection
  2020						;		may be specified)
  2021
  2022						;Generates Q errors on the following:
  2023						;		Bits 0-12 non-zero in ADDR
  2024
  2025						DEFINE LFIWM (ADDR)
  2026						<..ERR.=0		;;Reset error flag
  2027						IFN <<ADDR>&<^O<777740,,0>>>,
  2028						  <MPRNTX(LFIWM,Bits 0 - 12 non-zero in address field: ADDR)
  2029						  ..ERR.=1
  2030						  >
  2031						IFN ..ERR.,<-1,-1,-1>	;;Generate Q error
  2032						IFE ..ERR.,<1B0!<<^O<400037,,-1>>&<ADDR>>>	;;Generate LFIW
  2033						PURGE ..ERR.
  2034						>
  2035
  2036
  2037
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 49
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2038
  2039					;	Global format indirect word
  2040					;	=================================================================
  2041					;	!0! I !   X   !       SEC       !	      ADDR		!
  2042					;	=================================================================
  2043					;	!0! 1 !2     5!6	      17!			      35!
  2044
  2045
  2046						;Macro to generate global-format (extended-format) indirect words
  2047						;Args:
  2048						;	SEC	12-bit section number
  2049						;	ADDR	18-bit in-section address (indexing or indirection
  2050						;		may be specified)
  2051
  2052						;Generates Q errors on the following:
  2053						;		Bits 0-12 non-zero in ADDR
  2054						;		SEC greater than 12 bits
  2055
  2056						DEFINE GFIWM (SEC,ADDR)
  2057						<..ERR.=0		;;Reset error flag
  2058						IFN <<SEC>&<^O<-1,,770000>>>,
  2059						  <MPRNTX(GFIWM,Section greater than 12 bits: SEC)
  2060						  ..ERR.=1
  2061						  >
  2062						IFN <<ADDR>&<^O<777740,,0>>>,
  2063						  <MPRNTX(GFIWM,Bits 0 - 12 non-zero in address field: ADDR)
  2064						  ..ERR.=1
  2065						  >
  2066						IFN ..ERR.,<-1,-1,-1>	;;Generate Q error
  2067									;;Generate GFIW
  2068						IFE ..ERR.,<
  2069						  <<<ADDR>_<^O14>>&<^O<370000,,0>>!<<ADDR>&<0,,-1>>!<<SEC>_<^O22>>>>
  2070						PURGE ..ERR.
  2071						>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 50
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2072
  2073					;	The following macros generate all flavors of 1 and 2-word
  2074					;	global and local byte pointers.  They are similar to the
  2075					;	POINT pseudo-op, with the following exceptions:
  2076
  2077					;	1.	The basic argument triad of (bytesize,address,byte position)
  2078					;		is maintained.  However, some of the macros will prefix
  2079					;		and-or postfix the triad with additional argument(s).
  2080					;	2.	Numeric arguments are always interpreted in the current radix.
  2081					;		Assuming the current radix is octal, note the following
  2082					;		equivalences:
  2083					;			a.  POINT 10,200,36
  2084					;			b.  L1BPT(12,200,44)
  2085					;			c.  L1BPT(^D10,200,^D36)
  2086					;	3.	Strict field-limits are enforced.  Any expression that
  2087					;		will not fit into its appropriate field will generate
  2088					;		an error message and cause a Q error.  Thus:
  2089					;		L1BPT (10,200,-1) will cause an error.  (The correct effect
  2090					;		is generated with:  L1BPT (10,200).)
  2091
  2092					;	Also, note that in those macros that generate global byte-pointers,
  2093					;	section values and address values must always be specified as distinct
  2094					;	arguments.  If address symbol FOO resolves to 377,,123456 , then it
  2095					;	would be specified in the macros as follows:
  2096					;		G2BPT(FOO_-^D18,7,FOO&777777,36)
  2097					;	Or (better):
  2098					;		FOOSEC=FOO_-^D18
  2099					;		FOOADR=FOO&777777
  2100					;		G2BPT(FOOSEC,7,FOOADR,36)
  2101
  2102					;	If runtime-generated values are needed, then any or all argument
  2103					;	fields may be assembled as zero and filled in at runtime using an
  2104					;	appropriate DPB instruction.  (G1BPT will not allow a zero bytesize
  2105					;	and will only allow a zero byte position if it is legal for that
  2106					;	particular bytesize.)
  2107
  2108
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 51
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2109
  2110					;	1-word local byte pointer
  2111					;	=================================================================
  2112					;	!   P   !   S   ! 0 ! I !   X   !	      ADDR		!
  2113					;	=================================================================
  2114					;	!0     5!6    11! 12! 13!14   17!18			      35!
  2115
  2116
  2117
  2118						;Macro to generate local, 1-word byte pointers
  2119						;Args:
  2120						;	BSIZ	Byte size
  2121						;	ADDR	18-bit address (indexing or indirection
  2122						;		may be specified)
  2123						;	BPOS	Optional byte position
  2124
  2125						;Generates Q errors on the following:
  2126						;		Bits 0-12 non-zero in ADDR
  2127						;		BSIZ or BPOS greater than 6 bits
  2128
  2129						DEFINE L1BPT (BSIZ,ADDR,BPOS)
  2130						<.BSIZ.=BSIZ		;;Convert args to numeric
  2131						.BPOS.=BPOS
  2132						..ERR.=0		;;Reset error flag
  2133						IFN <<ADDR>&<^O<777740,,0>>>,
  2134						  <MPRNTX(L1BPT,Bits 0 - 12 non-zero in address field: ADDR)
  2135						  ..ERR.=1
  2136						  >
  2137						IFN <.BSIZ.&<^O<-1,,777700>>>,
  2138						  <MPRNTX(L1BPT,Bytesize greater than 6 bits: BSIZ)
  2139						  ..ERR.=1
  2140						  >
  2141						IFN <.BPOS.&<^O<-1,,777700>>>,
  2142						  <MPRNTX(L1BPT,Byte offset greater than 6 bits: BPOS)
  2143						  ..ERR.=1
  2144						  >
  2145						;;Cause Q error
  2146						IFN <..ERR.>,<-1,-1,-1>
  2147						;;Generate byte pointer
  2148						IFE <..ERR.>,
  2149						  <IFIDN <BPOS><>,<POINT .BSIZ.,ADDR>
  2150						  IFDIF <BPOS><>,<POINT .BSIZ.,ADDR,.BPOS.>
  2151						  >
  2152						PURGE ..ERR.,.BSIZ.,.BPOS.
  2153						>
  2154
  2155
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 52
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2156
  2157					;	1-word global byte pointer
  2158					;	=================================================================
  2159					;	!     P,S     !       SEC       !	      ADDR		!
  2160					;	=================================================================
  2161					;	!0           5!6	      17!			      35!
  2162
  2163
  2164
  2165						;Macro to generate global, 1-word byte pointers
  2166						;Args:
  2167						;	
  2168						;	SEC	12-bit section address
  2169						;	BSIZ	Byte size
  2170						;	ADDR	18-bit address (NO!! indexing or indirection
  2171						;		may be specified)
  2172						;	BPOS	Optional byte position
  2173
  2174						;Generates Q errors on following:
  2175						;		Illegal byte size or byte position
  2176						;		Indirection or indexing specified with ADDR
  2177						;		ADDR greater than 18 bits
  2178						;		SEC greater than 12 bits
  2179
  2180						;Legal sizes and positions are as follows:
  2181
  2182						;Size		Positions (Octal)
  2183						;6		44,36,30,22,14,6,0
  2184						;7		44,35,26,17,10,1
  2185						;8		44,34,24,14,4
  2186						;9		44,33,22,11,0
  2187						;18		44,22,0
  2188
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 53
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2189						DEFINE G1BPT (SEC,BSIZ,ADDR,BPOS<^O44>)
  2190						<..ERR.=0			;;Reset error flag
  2191						..ENC.=0			;;Define it as an arbitrary value
  2192						IFE BSIZ-7,			;;IF BYTESIZE=7
  2193						  <..ENC.=^O57			;;Get correct encode value
  2194						  IFN BPOS-^O44,<IFN BPOS-^O35,<IFN BPOS-^O26,<IFN BPOS-^O17,<IFN BPOS-^O10,
  2195							     	<IFN BPOS-1<..ERR.=..ERR.!1>>>>>>
  2196						  >
  2197						IFN BSIZ-7,			;;ELSE IF BYTESIZE=6
  2198						  <IFE BSIZ-6,
  2199						    <..ENC.=^O45			;;Get correct encode value
  2200						    IFN BPOS-^O44,<IFN BPOS-^O36,<IFN BPOS-^O30,<IFN BPOS-^O22,<IFN BPOS-^O14,
  2201								<IFN BPOS-6,<IFN BPOS,<..ERR.=.ERR.!1>>>>>>>
  2202						    >
  2203						  IFN BSIZ-6,			;;ELSE IF BYTESIZE=8
  2204						    <IFE BSIZ-^O10,
  2205						      <..ENC.=^O50		;;Get correct encode value
  2206						      IFN BPOS-^O44,<IFN BPOS-^O34,<IFN BPOS-^O24,<IFN BPOS-^O14,<IFN BPOS-4,
  2207								<..ERR.=.ERR.!1>>>>>
  2208						      >
  2209						    IFN BSIZ-^O10,		;;ELSE IF BYTESIZE=9
  2210						      <IFE BSIZ-^O11,
  2211							<..ENC.=^O62		;;Get correct encode value
  2212							IFN BPOS-^O44,<IFN BPOS-^O33,<IFN BPOS-^O22,<IFN BPOS-^O11,<IFN BPOS,
  2213								<..ERR.=..ERR.!1>>>>>
  2214							>
  2215						      IFN BSIZ-^O11,		;;ELSE IF BYTESIZE=18
  2216							<IFE BSIZ-^O22,
  2217							  <..ENC.=^O54		;;Get correct encode value
  2218							  IFN BSIZ-^O44,<IFN BSIZ-^O22<IFN BSIZ,<..ERR.=..ERR.!1>>>
  2219							  >
  2220							IFN BSIZ-^O22,<..ERR.=..ERR.!2>	;;ELSE: Illegal byte size
  2221							>
  2222						      >
  2223						    >
  2224						  >
  2225						IFN <<ADDR>&<-1,,0>>,<..ERR.=..ERR.!4> ;;Address greater than 18 bits
  2226										     ;; or indexing or indirection specified
  2227						IFN <<SEC>&<^O<-1,,770000>>>,<..ERR.=..ERR.!<^O20>> ;;Section greater than 12 bits 
  2228						IFN ..ERR.,
  2229						  <IFN ..ERR.&1,<MPRNTX (G1BPT,Illegal byte offset: BPOS)>
  2230						  IFN ..ERR.&2,<MPRNTX (G1BPT,Illegal byte size: BSIZ)>
  2231						  IFN ..ERR.&4,
  2232						    <MPRNTX (G1BPT,<Address indexed, indirect, or greater than 18 bits: ADDR>)>
  2233						  IFN ..ERR.&<^O20>,<MPRNTX (G1BPT,Section greater than 12 bits: SEC)>
  2234						  -1,-1,-1		;;Cause a "Q" error
  2235						  >
  2236						;;Generate the byte pointer
  2237						IFE ..ERR.,
  2238						  <<<..ENC.+<<BSIZ>-<<BPOS>/<BSIZ>>>>_<^O36>>!<<ADDR>&<0,,-1>>!<<SEC>_^O<22>>>	
  2239						PURGE ..ERR.,..ENC.
  2240						>
  2241
  2242
  2243
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 54
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2244
  2245					;	2-word local byte pointer
  2246
  2247					;	!0     5!6    11! 12! 13      17!18			      35!
  2248					;	=================================================================
  2249					;	!   P   !   S   ! 1 ! Reserved  !       Available to User       !
  2250					;	=================================================================
  2251					;	!1!0!    Reserved   ! I !   X   !	      ADDR		!
  2252					;	=================================================================
  2253					;	!0!1!2     	  12! 13!14   17!18			      35!
  2254
  2255
  2256
  2257						;Macro to generate local, 2-word byte pointers
  2258						;Args:
  2259						;	
  2260						;	BSIZ	Byte size
  2261						;	ADDR	18-bit address (Indexing or indirection
  2262						;		may be specified)
  2263						;	BPOS	Optional byte position
  2264						;	OPT	Optional user field available in word 1, right half
  2265
  2266						;Generates Q errors on the following:
  2267						;		Bits 0-12 non-zero in ADDR
  2268						;		Bits 0-17 non-zero in OPT
  2269						;		BSIZ or BPOS greater than 6 bits
  2270
  2271						DEFINE L2BPT(BSIZ,ADDR,BPOS,OPT<0>)
  2272						<..ERR.=0		;;Reset error flag
  2273						  .BSIZ.=BSIZ		;;Convert args to numeric
  2274						  .BPOS.=BPOS
  2275						IFN <<ADDR>&<^O<777740,,0>>>,
  2276						  <MPRNTX(L2BPT,Bits 0 - 12 non-zero in address field: ADDR)
  2277						  ..ERR.=1
  2278						  >
  2279						IFN <<OPT>&<-1,,0>>,
  2280						  <MPRNTX(L2BPT,Bits 0-17 non-zero in optional field: OPT)
  2281						  ..ERR.=1
  2282						  >
  2283						IFN <.BSIZ.&<^O<-1,,777700>>>,
  2284						  <MPRNTX(L2BPT,Bytesize greater than 6 bits: BSIZ)
  2285						  ..ERR.=1
  2286						  >
  2287						IFN <.BPOS.&<^O<-1,,777700>>>,
  2288						  <MPRNTX(L2BPT,Byte offset greater than 6 bits: BPOS)
  2289						  ..ERR.=1
  2290						  >
  2291						IFN ..ERR.,<-1,-1,-1>		;;Generate Q error
  2292						;;Generate the byte pointer
  2293						IFE ..ERR.,
  2294						  <IFDIF <BPOS><>,<<<POINT .BSIZ.,OPT,.BPOS.>!1B12>&<^O<777740,,-1>>>
  2295						  IFIDN <BPOS><>,<<<POINT .BSIZ.,OPT>!1B12>&<^O<777740,,-1>>>
  2296						    <1B0!<<^O<400037,,-1>>&<ADDR>>>	;;Generate LFIW
  2297						  >
  2298						PURGE ..ERR.,.BSIZ.,.BPOS.
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 54-1
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2299						>
  2300
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 55
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2301
  2302					;	2-word global byte pointer
  2303
  2304					;	!0     5!6    11! 12! 13      17!18			      35!
  2305					;	=================================================================
  2306					;	!   P   !   S   ! 1 ! Reserved  !       Available to User       !
  2307					;	=================================================================
  2308					;	!0! I !   X   !       SEC       !	      ADDR		!
  2309					;	=================================================================
  2310					;	!0! 1 !2     5!6	      17!			      35!
  2311
  2312
  2313						;Macro to generate global, 2-word byte pointers
  2314						;Args:
  2315						;	SEC	12-bit section address
  2316						;	BSIZ	Byte size
  2317						;	ADDR	18-bit address (Indexing or indirection
  2318						;		may be specified)
  2319						;	BPOS	Optional byte position
  2320						;	OPT	Optional user field available in word 1, right half
  2321
  2322						;Generates Q errors on the following:
  2323						;		SEC greater than 12 bits
  2324						;		Bits 0-12 non-zero in ADDR
  2325						;		Bits 0-17 non-zero in OPT
  2326						;		BSIZ or BPOS greater than 6 bits
  2327
  2328						DEFINE G2BPT(SEC,BSIZ,ADDR,BPOS,OPT<0>)
  2329						<..ERR.=0		;;Reset error flag
  2330						  .BSIZ.=BSIZ		;;Convert args to numeric
  2331						  .BPOS.=BPOS
  2332						IFN <<SEC>&<^O<-1,,770000>>>,
  2333						  <MPRNTX(G2BPT,Section greater than 12 bits: SEC)
  2334						  ..ERR.=1
  2335						  >
  2336						IFN <<ADDR>&<^O<777740,,0>>>,
  2337						  <MPRNTX(G2BPT,Bits 0 - 12 non-zero in address field: ADDR)
  2338						  ..ERR.=1
  2339						  >
  2340						IFN <<OPT>&<-1,,0>>,
  2341						  <MPRNTX(G2BPT,Bits 0-17 non-zero in optional field: OPT)
  2342						  ..ERR.=1
  2343						  >
  2344						IFN <.BSIZ.&<^O<-1,,777700>>>,
  2345						  <MPRNTX(G2BPT,Bytesize greater than 6 bits: BSIZ)
  2346						  ..ERR.=1
  2347						  >
  2348						IFN <.BPOS.&<^O<-1,,777700>>>,
  2349						  <MPRNTX(G2BPT,Byte offset greater than 6 bits: BPOS)
  2350						  ..ERR.=1
  2351						  >
  2352						IFN ..ERR.,<-1,-1,-1>		;;Generate Q error
  2353						;;Generate the byte pointer
  2354						IFE ..ERR.,
  2355						  <IFDIF <BPOS><>,<<<POINT .BSIZ.,OPT,.BPOS.>!1B12>&<^O<777740,,-1>>>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 55-1
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2356						  IFIDN <BPOS><>,<<<POINT .BSIZ.,OPT>!1B12>&<^O<777740,,-1>>>
  2357						    ;;Generate GFIW
  2358						    <<<ADDR>_<^O14>>&<^O<370000,,0>>!<<ADDR>&<0,,-1>>!<<SEC>_<^O22>>>
  2359						  >
  2360						PURGE ..ERR.,.BSIZ.,.BPOS.
  2361						>
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 56
MACSYM	MAC	12-May-72 20:41		MACROS TO SUPPORT EXTENDED ADDRESSING

  2362
  2363	000000'				LIT				;MAKE SURE LITERALS COME BEFORE END MARK
  2364					   IFN REL,<
  2365					.RLEND==:.-1			;MARK END OF CODE IN MACREL
  2366					   >
  2367					  IF2,<PURGE REL>		;FLUSH REL FROM UNIV FILE
  2368
  2369						.XCMSY^
  2370
  2371						END		;End of MACSYM

NO ERRORS DETECTED

PROGRAM BREAK IS 000000
CPU TIME USED 01:29.660

22P CORE USED
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page S-1
MACSYM	MAC	12-May-72 20:41		SYMBOL TABLE

CALL	260740	000000		.CHCNT		000024	sin	
CALLRE	254000	000000	spd	.CHCNU		000025	sin	
EJSERR	000000000000#	pol	.CHCNV		000026	sin	
EJSHLT	000000000000#	pol	.CHCNW		000027	sin	
JSERR	000000000000#	pol	.CHCNX		000030	sin	
JSERR0		000000	ext	.CHCNY		000031	sin	
JSHLT	000000000000#	pol	.CHCNZ		000032	sin	
JSHLT0		000000	ext	.CHCRB		000035	sin	
JSMSG0		000000	ext	.CHCRT		000015	sin	
P		000017		.CHCUN		000037	sin	
PC%AFI	001000	000000	sin	.CHDEL		000177	sin	
PC%ATN	000600	000000	sin	.CHESC		000033	sin	
PC%BIS	020000	000000	sin	.CHFFD		000014	sin	
PC%CY0	200000	000000	sin	.CHLFD		000012	sin	
PC%CY1	100000	000000	sin	.CHNUL		000000	sin	
PC%FOV	040000	000000	sin	.CHSPC		000040	sin	
PC%FUF	000100	000000	sin	.CHTAB		000011	sin	
PC%LIP	002000	000000	sin	.CHVTB		000013	sin	
PC%NDV	000040	000000	sin	.ENTER		000000	ext	
PC%OVF	400000	000000	sin	.FP		000015	spd	
PC%UIO	004000	000000	sin	.FPAC		000005	spd	
PC%USR	010000	000000	sin	.FWORD	777777	777777	sin	
R		000000	ext	.INFIN	377777	777777	sin	
RET	263740	000000		.LHALF	777777	000000	sin	
RSKP		000000	ext	.MINFI	400000	000000	sin	
VI%EDN		777777	sin	.NPAC		000010	spd	
VI%MAJ	077700	000000	sin	.RHALF		777777	sin	
VI%MIN	000077	000000	sin	.SAC		000016		
VI%WHO	700000	000000	sin	.SASET		000000	ext	
XHLLI	501000	000000		.SAV1		000000	ext	
XMOVEI	415000	000000		.SAV2		000000	ext	
.A16		000016	spd	.SAV3		000000	ext	
.AC1		000001	spd	.SAV4		000000	ext	
.AC2		000002	spd	.SAV8		000000	ext	
.AC3		000003	spd	.STKRT		000000	ext	
.ASRET		000000	ext	.STKST		000000	ext	
.ASSET		000000	ext	.TRRET		000000	ext	
.CHAL2		000176	sin	.TRSET		000000	ext	
.CHALT		000175	sin	
.CHBEL		000007	sin	
.CHBSP		000010	sin	
.CHCBS		000034	sin	
.CHCCF		000036	sin	
.CHCNA		000001	sin	
.CHCNB		000002	sin	
.CHCNC		000003	sin	
.CHCND		000004	sin	
.CHCNE		000005	sin	
.CHCNF		000006	sin	
.CHCNN		000016	sin	
.CHCNO		000017	sin	
.CHCNP		000020	sin	
.CHCNQ		000021	sin	
.CHCNR		000022	sin	
.CHCNS		000023	sin	

MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Symbol cross reference

JSERR0	  1309#	  1352	  1353
JSHLT0	  1309#	  1359	  1360
JSMSG0	  1309#
P	  1317#	  1319	  1320
PC%AFI	   254#
PC%ATN	   255#
PC%BIS	   250#
PC%CY0	   247#
PC%CY1	   248#
PC%FOV	   249#
PC%FUF	   256#
PC%LIP	   253#
PC%NDV	   257#
PC%OVF	   246#
PC%UIO	   252#
PC%USR	   251#
R	  1309#
REL	   138	   139	   142	  1308	  1477	  1531	  1578	  1617	  1673	  1735	  1776	  1846	  1866	  1957
	  2364	  2367
RSKP	  1309#
VI%EDN	   167#
VI%MAJ	   165#
VI%MIN	   166#
VI%WHO	   164#
.A16	  1316#
.AC1	  1313#
.AC2	  1314#
.AC3	  1315#
.ASRET	  1618#
.ASSET	  1618#
.CHAL2	   239#
.CHALT	   238#
.CHBEL	   211#
.CHBSP	   212#
.CHCBS	   232#
.CHCCF	   234#
.CHCNA	   205#
.CHCNB	   206#
.CHCNC	   207#
.CHCND	   208#
.CHCNE	   209#
.CHCNF	   210#
.CHCNN	   218#
.CHCNO	   219#
.CHCNP	   220#
.CHCNQ	   221#
.CHCNR	   222#
.CHCNS	   223#
.CHCNT	   224#
.CHCNU	   225#
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Symbol cross reference

.CHCNV	   226#
.CHCNW	   227#
.CHCNX	   228#
.CHCNY	   229#
.CHCNZ	   230#
.CHCRB	   233#
.CHCRT	   217#
.CHCUN	   235#
.CHDEL	   240#
.CHESC	   231#
.CHFFD	   216#
.CHLFD	   214#
.CHNUL	   204#
.CHSPC	   236#
.CHTAB	   213#
.CHVTB	   215#
.ENTER	  1867#
.FWORD	   200#
.INFIN	   196#
.LHALF	   198#
.MINFI	   197#
.NPAC	  1739#
.RHALF	   199#
.SASET	  1618#
.SAV4	  1736#
.SAV8	  1736#
.STKRT	  1532#
.STKST	  1532#
.TRRET	  1618#
.TRSET	  1618#
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Macro/Opdef cross reference

ACVAR	  1741#
ANDE.	  1215#
ANDG.	  1221#
ANDGE.	  1224#
ANDL.	  1230#
ANDLE.	  1227#
ANDN.	  1218#
ANDQE.	  1239#
ANDQN.	  1242#
ANDX	   380#
ANDXE.	  1233#
ANDXN.	  1236#
ANNSK.	  1204#
ANSKP.	  1201#
ASUBR	  1648#
BLCAL.	  1910#
BLSUB.	  1869#
BRINI.	  1419#
BRK0	  1396#
BRKC1	  1409#
BRKC2	  1413#
BRKCH.	  1382#
BRMSK.	  1429#
CALL	  1319#	  1352	  1359
CALLRE	  1324#	  1325
DECR	   789#
DEFSTR	   582#
DO.	   971#
EJSERR	  1353#
EJSHLT	  1360#
ELSE.	  1208#
ENDDO.	   984#
ENDIF.	  1209#
EPRNTX	  1998#
ERMSG	  1366#
EXT	  1373#
FLD	   301#
FLDBK.	  1452#
FLDDB.	  1439#
FMSG	  1338#
FORN.	   317#
FORX.	   329#
G1BPT	  2190#
G2BPT	  2329#
GFIWM	  2057#
IFE.	  1107#
IFESK.	  1100#
IFG.	  1125#
IFGE.	  1134#
IFJER.	  1039#
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Macro/Opdef cross reference

IFL.	  1152#
IFLE.	  1143#
IFN.	  1116#
IFNES.	  1059#
IFNJE.	  1084#
IFNSK.	  1020#
IFQE.	  1179#
IFQN.	  1188#
IFSKP.	  1068#
IFXE.	  1161#
IFXN.	  1170#
INCR	   779#
IORX	   377#
JAND	   881#
JE	   824#
JN	   844#
JNAND	   869#
JNOR	   897#
JOR	   864#
JSERR	  1352#
JSHLT	  1359#
JXE	   457#
JXF	   495#
JXN	   469#
JXO	   481#
L1BPT	  2130#
L2BPT	  2272#
LFIWM	  2026#
LOAD	   706#
MASKB	   309#
MOD.	   313#
MOVX	   341#
MPRNTX	  1989#
MSKSTR	   591#
MV.	   368#
MVI.	   372#
OPSTR	   801#
OPSTRM	   811#
PERSTR	  1345#
PGVER.	   154#
RET	  1320#
RETSKP	  1327#
SASUBR	  1661#
SAVEAC	  1831#
SETCMP	   764#
SETONE	   747#
SETZRO	   730#
STDAC.	   174#
STKVAR	  1534#
STOR	   717#
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Macro/Opdef cross reference

TMNE	   923#
TMNN	   938#
TMSG	  1331#
TQC	   918#
TQCA	   918#
TQCE	   918#
TQCN	   918#
TQN	   918#
TQNA	   918#
TQNE	   918#
TQNN	   918#
TQO	   918#
TQOA	   918#
TQOE	   918#
TQON	   918#
TQZ	   918#
TQZA	   918#
TQZE	   918#
TQZN	   918#
TRVAR	  1620#
TXC	   400#
TXCA	   400#
TXCE	   400#
TXCN	   400#
TXN	   400#
TXNA	   400#
TXNE	   400#
TXNN	   400#
TXO	   400#
TXOA	   400#
TXOE	   400#
TXON	   400#
TXZ	   400#
TXZA	   400#
TXZE	   400#
TXZN	   400#
UNBRK.	  1390#
XBLT.	  1472#
XHLLI	  1470#
XMOVEI	  1469#
XORX	   383#
..DOTX	   393#	   399	   400
..DOTY	   911#	   917	   918
..GCNS	   694#
..INDF	  1250#
..JAN1	   885#
..JAN2	   888#
..JN	   847#
..JNA3	   872#
..JNO1	   901#
MACSYM	COMMON MACROS AND SYMBOLS	MACRO %53B(1155)-2 17:19  4-May-86 Page 1
MACSYM	MAC	12-May-72 20:41	


Macro/Opdef cross reference

..JNO2	   904#
..ONEB	   567#
..RSDF	  1277#
..STR3	   645#
..STR5	   668#
..SVDF	  1264#
..SVLD	   987#
..TAGE	  1211#
..TAGF	  1210#
..TQC	   767#
..TSNC	   554#
..TX3	   429#
..TX4	   442#
..TYNE	   926#
..TYNN	   941#
.BLCL1	  1923#
.BLCL2	  1920#
.BLSU1	  1887#
.ENAV1	  1765#
.ENAV2	  1769#
.ENAV3	  1772#
.ENBS1	  1891#
.ENSV1	  1568#
.ENSV2	  1572#
.ENSV3	  1575#
.FORN1	   324#
.FORX1	   334#
.IFATM	  1947#
.POPX	  1292#
.POPX2	  1295#
.POPX3	  1301#
.POPX4	  1298#
.PSHX	  1282#
.PSHX1	  1285#
.PSHX2	  1288#
.RTJST	   305#
.XCMSY	   262#	  2369
.XCRF1	   274#` UL