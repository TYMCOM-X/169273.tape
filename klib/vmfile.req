
require "  VM Mapped File Reading Package " message;

!
!   Slot_ VMFile( StringSpec, AccessMode )
!	Opens a file for access.  A positive slot number is returned if the
!	file is available.  A value of 0 means no slots available, a negative
!	value means a file operation error or access violation occurred with
!	the RH of the value containing the TYMCOM-X lookup/enter codes.
!	A -1 value indicates an unavailable device.  Access mode is one of:
!	(0=Read !chLK, 1=Write !chENT, 2=Multi-Write !chMEN).
!
!   Ok_ VMFree( Slot, Bits(0) )
!	Closes any open file for this slot and frees the slot for future use.
!	Returns true if the slot was in use.  If any writes were performed
!	the file is actually closed, otherwise the channel is simply released.
!	If writing and Bits = -1 then delete the file, else if bits # 0 use
!	the value of Bits on the close option.
!
!   Line_ VMLine( Slot, More, Dir(0) )
!	Returns the next consecutive line from the file that is connected
!	to the specified slot.  More is set to the line terminator ( LF, FF
!	or VT ) on a normal return, to 0 when the end of the file is reached
!	or the slot is inactive.  Dir is the direction to read the file
!	(0 = forward, non-zero = backward).
!
!   Ok_ VMText( Slot, TextString )
!	Writes the next consecutive line to the file that is connected
!	to the specified slot.  Returns false for insufficient file access
!	and for any other errors while writing, otherwise returns true.
!
!   Ok_ VMMove( Slot, HowMany(1) )
!	Moves the position pointer forward or backward up to how-many lines
!	in the file.  Returns true if the slot is active and the specified
!	number of lines exist, otherwise it returns false and leaves the
!	pointer positioned at logical end of file.
!
!   Position_ VMGetC( Slot, Index )
!	Read the specified characteristic from the file table.  [0]character,
!	[1]line or [2]page position in the file, [3]eol char, [4]eol-cr-seen,
!	size in [5]characters, [6]lines or [7]pages, [8]file license.  If no
!	file is open or an invalid slot, return -2.  If the index is out of
!	range, return -3.  If the file is open, but no reads have been done,
!	return -1.
!
!   Ok_ VMSetC( Slot, CharacterPosition )
!	Set the character position with the file open on the specified slot.
!	All further references to the file will use the new position.  If the
!	specified position is outside the file, the position is set to -1.
!	The routine always returns the new position.
!
!   License_ VMFLic( Slot )
!	Returns the license of the file open on the specified slot.
;


! the following are the access modes for the VMFile routine ;

Define	VM$Read   =  0			! Read Only ;
,	VM$Write  =  VM$Read   + 1	! Write/Supersede ;
,	VM$Update =  VM$Write  + 1	! Write/Update (used for append) ;
,	VM$Multi  =  VM$Update + 1	! Multi-access Write/Update ;
;

! The following are the offsets for the VMGetC routine ;

Define	VM$Char   =  0			! Character position ;
,	VM$Line   =  VM$Char   + 1	! Line position ;
,	VM$Page   =  VM$Line   + 1	! Page position ;
,	VM$Msg    =  VM$Page   + 1	! Message position ;
,	VM$Eol    =  VM$Msg    + 1	! End of Line terminator ;
,	VM$ECR    =  VM$Eol    + 1	! End of Line CR seen ;
,	VM$Size   =  VM$ECR    + 1	! Size of file in Characters ;
,	VM$LSize  =  VM$Size   + 1	! Size of file in Lines ;
,	VM$PSize  =  VM$LSize  + 1	! Size of file in Pages ;
,	VM$MSize  =  VM$PSize  + 1	! Size of file in Messages ;
,	VM$Lic    =  VM$MSize  + 1	! File license ;
,	VM$Access =  VM$Lic    + 1	! File access mode ;
,	VM$Time   =  VM$Access + 1	! File creation time in seconds ;
,	VM$Date   =  VM$Time   + 1	! File creation date ;
;

External Simple  Boolean Procedure VMFree( Integer Slot, Bits(0) );
External Simple  Integer Procedure VMGetC( Integer Slot, Index(VM$Char) );
External Simple  Integer Procedure VMSetC( Integer Slot, Position );
External Simple  Integer Procedure VMFLic( Integer Slot );
External Boolean Procedure VMMove( Integer Slot, HowMany( 1 ) );
External Boolean Procedure VMText( Integer Slot; String Text );
External String  Procedure VMLine( Integer Slot;
				   Reference Integer More;
				   Integer Dir( 0 ) );
External Simple  Boolean Procedure VMFile( String Spec;
					   Integer Mode( VM$Read ) );
require "(Klib)VMFILE" library;
