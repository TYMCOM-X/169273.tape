entry Print.FSM, Setup.FSM, Match.FSM, Setup.UFD.FSM, Match.UFD.FSM ;
define !  = "comment", !! = "comment";
!! title Module WldCrd ;
! *************************************************************************
*************************************+*************************************
*                                                                         *
*                                                                         *
*                WldCrd - Truly wise wildcard recognition                 *
*                                                                         *
*                                                                         *
*************************************+*************************************


          !version(!ver('1, '0), !edit('32), !date(18-Oct-1985))

  edit history
    16-Oct-85   v1.0(31) (kmd)       Add UFD wildcarding support
     7-Oct-85   v1.0(26) (kmd)       Add character-wise disjuncton (|) to
                                     filespec expressions.
    25-Sep-85   v1.0(25) (kmd)       First revision after the split.
    23-Sep-85   v1.0(21) (kmd)       First implementation split into its
                                     own module.
    23-Aug-85   v0.1(1)  (kmd)       First Edit - just a skeleton in some
                                     closet.


**************************************************************************;


begin "WldCrd"
  require "(KLib)Sail.Hdr"     source!file;
  require "(KLib)Util.Req"     source!file;
  require "(KLib)WldCrd.Req"   source!file;
  require "(Sailib)Mfdscn.Req" source!file;

  define
    TRAP.STATE      = -1,
    FSM.Type    (X) = <X[lb.rows(X), lb.cols(X)]>,
    Final.State (X) = <X[lb.rows(X), lb.cols(X)+1]>,
    UFD.Type    (X) = <X[lb.rows(X), lb.cols(X)+2]>,
    Quick.PPN   (X) = <X[lb.rows(X), lb.cols(X)+3]>,
    lb.FSM.rows (X) = <(lb.rows(X)+1)>,
    ub.FSM.rows (X) = <ub.rows(X)>,
    lb.FSM.cols (X) = <lb.cols(X)>,
    ub.FSM.cols (X) = <ub.cols(X)>;

  define
    FSM.T.FnExt = 0,
    FSM.T.UFD   = 1;

      ! Values for the FSM.Type field.
      ;

  define
    UFD.T.User = 0,
    UFD.T.QPPN = 1,
    UFD.T.PPN  = 2;

      ! Values for the UFD.Type field above.
      ;


! ************************************************************************;
!! title Rtn Xfm ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                                 Rtn Xfm                                 =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Turn all occurances of "*#" in the input into "#*", and all
        occurances of "**" to "*", and return the result.

        Side effect: all occurances of "?" become "#".


==========================================================================;


  simple string procedure Xfm (string Str);
  begin "Xfm"
    integer
      C;
    string
      StrOut;

    StrOut _ null;

    while (C _ lop(Str)) do
    begin
      if (C = "?") then
        C _ "#";

      if (C = "*") then
      begin
        if (Str = "#" or Str = "?") then
        begin
          lop(Str);
          prepnd(Str, "*");
          appnd(StrOut, "#");
          continue;
        end
        else if (Str = "*") then
          continue;
      end;

      appnd(StrOut, C);
    end;

    return(StrOut);
  end "Xfm";


! ===================================+=====================================
==========================================================================;
!! title Rtn Print.FSM ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                              Rtn Print.FSM                              =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  internal simple procedure Print.FSM (integer array FSM);
  begin "Print.FSM"
    integer
      I,
      J;

    print("[Final State: ", Final.State(FSM), "]", crlf);

    print(" ");

    for J _ lb.FSM.cols(FSM)+1 step 1 until ub.FSM.cols(FSM) do
    begin
      print(cv6str(bit(J, 5)));
    end;

    print(crlf);

    for I _ lb.FSM.rows(FSM) step 1 until ub.FSM.rows(FSM) do
    begin
      for J _ lb.FSM.cols(FSM) step 1 until ub.FSM.cols(FSM) do
      begin
        if (FSM[I, J] = -1) then
          print(".")
        else
          print(Form.Str(FSM[I, J], 1, 0));
      end;

      print(crlf);
    end;
  end "Print.FSM";


! ===================================+=====================================
==========================================================================;
!! title Rtn Setup.FSM ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                              Rtn Setup.FSM                              =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Build a finite state machine parsing the specified filespec in
        the array provided.  Return 0 if the build succeeded, -1 if
        the filespec was too big for the array, and the offending
        character if a character encountered is found to be illegal.


==========================================================================;

  internal simple integer procedure Setup.FSM (integer array FSM;
      string FileSpec);
  begin "Setup.FSM"
    integer
      C,
      State;

    FileSpec _ Xfm(FileSpec);

    arrclr(FSM, TRAP.STATE);
    State _ lb.FSM.rows(FSM);

    while (C _ lop(FileSpec)) do
    begin
      integer
        I;

      if (lb.FSM.rows(FSM) <= State <= ub.FSM.rows(FSM)) then
      begin
        if (C = "*") then
        begin
          for I _ lb.FSM.cols(FSM) step 1 until ub.FSM.cols(FSM) do
            FSM[State, I] _ State;

          dcr(State);
        end
        else if (C = "#") then
          for I _ lb.FSM.cols(FSM) step 1 until ub.FSM.cols(FSM) do
            FSM[State, I] _ State + 1
        else if (C = "|") then
        begin
          if (State > lb.FSM.rows(FSM)) then
            dcr(State, 2);
        end
        else if (Is6bit(C)) then
          FSM[State, To6bit(C)] _ State + 1
        else
        begin
          return(C);
        end;
      end
      else
        return(-1);

      inc(State);
    end;

    Final.State(FSM) _ State;
    return(0);
  end "Setup.FSM";


! ===================================+=====================================
==========================================================================;
!! title Rtn Match.FSM ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                              Rtn Match.FSM                              =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Use the indicated finite state machine to parse the 6bit
        "string" provided in Src, and return the result.


==========================================================================;


  internal simple boolean procedure Match.FSM (integer array FSM, Src);
  begin "Match.FSM"
    integer
      I,
      SrcIdx,
      State;

    define
      IsStarState (X)  = <((lb.FSM.rows(FSM) leq (X) leq ub.FSM.rows(FSM))
          and (FSM[(X), lb.FSM.cols(FSM)] = (X)))>,
      IsPoundState (X) = <((lb.FSM.rows(FSM) leq (X) leq ub.FSM.rows(FSM))
          and (FSM[(X), lb.FSM.cols(FSM)] = ((X)+1)))>;

    State _ lb.FSM.rows(FSM);

    for SrcIdx _ lb.rows(Src) step 1 until ub.rows(Src) do
    begin
      integer
        C;

      if ((C _ rh(Src[SrcIdx])) = null) then
        done
      else
      begin
        integer
          St;

        St _ FSM[State, C];

        if (St = TRAP.STATE) then
        begin
          for I _ State-1 step -1 until lb.FSM.rows(FSM) do
          begin
            dcr(SrcIdx);
            Src[SrcIdx] _ hr(Src[srcIdx]);

            if (IsStarState(I)) then
              done;
          end;

          if (IsStarState(I)) then
          begin
            Src[SrcIdx] _ xwd(1, Src[SrcIdx]);
            State _ I;
          end
          else
          begin
            State _ TRAP.STATE;
            done;
          end;
        end
        else
        begin
          if (St = State or IsPoundState(State)) then
            Src[SrcIdx] _ xwd(1, Src[SrcIdx]);

          State _ St;
        end;
      end;
    end;

    return(State = Final.State(FSM));
  end "Match.FSM";


! ===================================+=====================================
==========================================================================;
!! title Rtn XfmUFD ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                               Rtn XfmUFD                                =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Turn all occurances of "*#" in the input into "#*", and all
        occurances of "**" to "*", and return the result.

        Side effects:  all occurances of "?"  become "#", and the
        character following "\" is not interpreted (this is a quoting
        mechanism intended for "*" in wildcarding).


==========================================================================;


  simple string procedure XfmUFD (string Str);
  begin "XfmUFD"
    integer
      C;
    string
      StrOut;

    StrOut _ null;

    while (C _ lop(Str)) do
    begin
      if (C = "?") then
        C _ "#";

      if (C = "*") then
      begin
        if (Str = "#" or Str = "?") then
        begin
          lop(Str);
          prepnd(Str, "*");
          appnd(StrOut, "#");
          continue;
        end
        else if (Str = "*") then
          continue;
      end
      else if (C = "\") then
      begin
        appnd(StrOut, C);
        C _ lop(Str);
      end;

      appnd(StrOut, C);
    end;

    return(StrOut);
  end "XfmUFD";


! ===================================+=====================================
==========================================================================;
!! title Rtn Setup.UFD.FSM ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                            Rtn Setup.UFD.FSM                            =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Build a finite state machine parsing the specified UFDSpec in
        the array provided.  Return 0 if the build succeeded, -1 if
        the UFDSpec was too big for the array, and the offending
        character if a character encountered is found to be illegal.


==========================================================================;

  internal simple integer procedure Setup.UFD.FSM (integer array FSM;
      string UFDSpec; boolean IsPPN(false));
  begin "Setup.UFD.FSM"
    boolean
      QuoteChar;
    integer
      C,
      State;

    UFDSpec _ XfmUFD(UFDSpec);

    arrclr(FSM, TRAP.STATE);

    if (IsPPN) then
    begin
      integer
        PPN;

      UFD.Type(FSM) _ UFD.T.PPN;

      if (PPN _ CvShortPPN(UFDSpec)) then
      begin
        UFD.Type(FSM) _ UFD.T.QPPN;
        Quick.PPN(FSM) _ PPN;
        return(0);
      end;
    end
    else
      UFD.Type(FSM) _ UFD.T.User;

    State _ lb.FSM.rows(FSM);
    clear(QuoteChar);

    while (C _ lop(UFDSpec)) do
    begin
      integer
        I;

      if (lb.FSM.rows(FSM) <= State <= ub.FSM.rows(FSM)) then
      begin
        if (C = "*") then
        begin
          if (QuoteChar) then
            FSM[State, C] _ State+1
          else
          begin
            for I _ lb.FSM.cols(FSM) step 1 until ub.FSM.cols(FSM) do
              FSM[State, I] _ State;

            dcr(State);
          end;
        end
        else if (C = "#") then
          for I _ lb.FSM.cols(FSM) step 1 until ub.FSM.cols(FSM) do
            FSM[State, I] _ State + 1
        else if (C = "|") then
        begin
          if (State > lb.FSM.rows(FSM)) then
            dcr(State, 2);
        end
        else if (C = "\") then
        begin
          set(QuoteChar);
          continue;
        end
        else if (Is6bit(C)) then
          FSM[State, To6bit(C)] _ State + 1
        else
        begin
          return(C);
        end;
      end
      else
        return(-1);

      clear(QuoteChar);
      inc(State);
    end;

    Final.State(FSM) _ State;
    return(0);
  end "Setup.UFD.FSM";


! ===================================+=====================================
==========================================================================;
!! title Rtn Match.UFD.FSM ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                            Rtn Match.UFD.FSM                            =
=                                                                         =
=                                                                         =
=====================================+=====================================

        Use the indicated finite state machine to "parse" the UFD
        provided in Aun, and return the result.  Wildcard matching
        will be indicated in the array UFD.


==========================================================================;


  internal simple boolean procedure Match.UFD.FSM (integer array FSM, UFD;
      integer Aun);
  begin "Match.UFD.FSM"
    integer
      C,
      I;
    string
      Str;

    if (UFD.Type(FSM) = UFD.T.QPPN) then
      return(Quick.PPN(FSM) = Aun)
    else if (UFD.Type(FSM) = UFD.T.PPN) then
      Str _ CvPPNStr(Aun)
    else if (UFD.Type(FSM) = UFD.T.User) then
      Str _ CvPPN(Aun)
    else
      return(false);

    I _ 0;

    while (C _ lop(Str)) do
      UFD[I] _ To6bit(C);

    return(Match.FSM(FSM, UFD));
  end "Match.UFD.FSM";


! ===================================+=====================================
==========================================================================;

end "WldCrd";


! ***********************************+*************************************
**************************************************************************;
  