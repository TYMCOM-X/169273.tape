entry CmdLine, ArgC, ArgV, Decompose.CmdLine;

define !  = "comment", !! = "comment";
!! title Module CmdLine ;
! *************************************************************************
*************************************+*************************************
*                                                                         *
*                CmdLine - Digest the User's command line                 *
*                                                                         *
*************************************+*************************************
*                                                                         *
*       Ground Rules:                                                     *
*                                                                         *
*       o   Arguments consist of either tokens or quoted strings.         *
*       o   Tokens are text delimited by "whitespace".                    *
*       o   "Whitespace" includes spaces, tabs, commas, and               *
*           semi-colons.                                                  *
*       o   "Whitespace" can be included in an argument by                *
*           surrounding the argument with double quotation marks.         *
*       o   Special characters can be included in quoted strings          *
*           by using the backslash ("\") escape character.  The           *
*           following are supported escapes:                              *
*                                                                         *
*               \\      "\"                                               *
*               \"      '"'                                               *
*               \'      "'"                                               *
*               \n      crlf                                              *
*               \r      cr                                                *
*               \t      ht                                                *
*               \f      ff                                                *
*               \l      lf                                                *
*               \b      bs                                                *
*               \0nnn   The character whose octal ASCII code is nnn       *
*                                                                         *
*                                                                         *
*************************************+*************************************


          !version(!ver('1, '1), !edit('11), !date(14-Mar-1986))


  edit history
    14-Mar-86   v1.1(11)  kmd        Make the decomposition function
                                     availible elsewhere.
    13-Dec-85   v1.0(7)  (kmd)       Fix the "\0" escape to not send a NUL
                                     if there is no octal number after the
                                     "0".
    12-Dec-85   v1.0(6)  (kmd)       Make semicolon into whitespace, add
                                     some escape characters to quoted
                                     strings, add the module description,
                                     and fix a problem with the "\n"
                                     escape.
     4-Dec-85   v1.0(5)  (kmd)       Add the escape character '\' to quoted
                                     string processing.
    22-Nov-85   v1.0(4)  (kmd)       Make semicolon a seperate token & add
                                     quoted strings.
    19-Nov-85   v0.1(1)  (kmd)       First Edit - just a skeleton in some
                                     closet.


**************************************************************************;


begin "CmdLine"
  require "(KLib)Sail.Hdr"    source!file;
  require "(KLib)Sys.Req"     source!file;
  require "(KLib)CmdLin.Req"  source!file;

  internal integer
    ArgC;

  internal string
    CmdLine;

  internal string array
    ArgV [0 : (NARGS-1)];


! ************************************************************************;
!! title Rtn Decompose.CmdLine ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                            Rtn Decompose.CmdLine                        =
=                                                                         =
=                                                                         =
=====================================+=====================================

    Stuff ArgV[] with the individual tokens in Str and return the
    number of tokens encountered.  If the number of actual tokens
    exceeds the array bound, return -1.
  

==========================================================================;


  internal simple integer procedure Decompose.CmdLine (string Str;
      string array ArgV);
  begin "Decompose.CmdLine"
    integer
      ArgC,
      C,
      Next.Arg;
    define
      Is.White(X) = <((X) = sp or (X) = ht or (X) = "," or (X) = ";")>;

    ArgC _ 0;

    for Next.Arg _ lb.rows(ArgV) step 1 until ub.rows(ArgV) do
    begin
      string
        ArgStr;

      while (length(Str) and Is.White(Str)) do
        lop(Str);

      ArgStr _ null;

      if (Str = """") then
      begin
        lop(Str);

        while ((C _ lop(Str)) and C neq """") do
        begin
          if (C = "\") then
          begin
            C _ lop(Str);

            case (tolower(C)) of
            begin
              ["l"]
                C _ lf;

              ["f"]
                C _ ff;

              ["n"]
                begin
                  appnd(ArgStr, cr);
                  C _ lf;
                end;

              ["r"]
                C _ cr;

              ["t"]
                C _ ht;

              ["b"]
                C _ bs;

              ["0"]
                begin
                  C _ cvo(Str) land !mask(7);

                  while (IsOctal(Str)) do
                    lop(Str);
                end
            end;
          end;

          if (C) then
            appnd(ArgStr, C);
        end;
      end
      else
      begin
        while ((C _ lop(Str)) and not Is.White(C)) do
          appnd(ArgStr, C);
      end;

      if (length(ArgStr)) then
        ArgV[Next.Arg] _ ArgStr
      else
        done;
    end;

    while (length(Str) and Is.White(Str)) do
      lop(Str);

    if (length(Str)) then
      ArgC _ -1
    else
      ArgC _ Next.Arg;

    return(ArgC);
  end "Decompose.CmdLine";


! ===================================+=====================================
==========================================================================;
!! title Rtn CmdLine.Init ;
! =========================================================================
=====================================+=====================================
=                                                                         =
=                                                                         =
=                              Rtn CmdLine.Init                           =
=                                                                         =
=                                                                         =
=====================================+=====================================


==========================================================================;


  simple procedure CmdLine.Init;
  begin "CmdLine.Init"
    CmdLine _ RescanCommandLine;
    ArgC    _ Decompose.CmdLine(CmdLine, ArgV);
  end "CmdLine.Init";
  require CmdLine.Init initialization [2];


! ===================================+=====================================
==========================================================================;

end "CmdLine";


! ***********************************+*************************************
**************************************************************************;
