entry
	CreAUX,  AuxZAP,  AuxSYNC,
	AuxOUT,  AuxSTR,  AuxIN,  AuxLINE,
	AuxPORT, AuxFlg,  AuxTRACE
;
begin	"AUXLIB"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;

internal integer AUXPORT;
internal boolean AUXTRACE, AUXFLG;

boolean AuxFF;

preload!with 1,0;
Own safe integer array POLL[0:1];	! for polprt uuo ;

internal integer procedure CREAUX (string UNAME);
begin "CREAUX"
    integer I;
    integer array X[0:5];
    if length(UNAME)=0 then UNAME _ ":";
    if UNAME=":" then UNAME 
	_ cv6str(calli(!xwd(-1,!GTUNM),calli!GETTAB))
	& cv6str(calli(!xwd(-1,!GTUN1),calli!GETTAB))
	& UNAME;
    if UNAME[inf for 1]=":" then UNAME
	_ UNAME
	& cvs(calli(!xwd(!CNSYS,!GTCNF),calli!GETTAB));
    for I _ 0 upto 5 do X[i] _ cvasc(UNAME[1+5*i to 5+5*i]);
    AUXPORT _ I _ calli(location(X[0]),calli!CREAUX);
    if ( !SKIP! )
     then begin
	auxclv(AUXPORT,1,'25);	! .axNTE ;
	return(AUXPORT);
     end;
    print(crlf,"?unable to build circuit to ",UNAME,crlf);
    case !lh(I) of begin
      	[CXSUP#] case !rh(I) of begin
	    [CXSFE#] print("?format error");
	    [CXSBU#] print("?user not in MUD");
	    [CXSBM#] print("?bad MUD");
	    [CXSHU#] print("?host unavailable");
	    [CXSDF#] print("?downline load/dialout request failure");
	    [CXSTO#] print("?timeout");
	    [CXSAB#] print("?access barred");
	    [CXSIS#] print("?error in ISIS");
	    [CXSLQ#] print("?long queue in supervisor");
	    else print("?unknown supervisor error code: '",cvos(!rh(I))) end;
	[CX2AX#] print("?too many circuits without AC license");
	[CXLOG#] print("?not your username without AC license");
	[CXDCB#] print("?no room in monitor");
	[CXNRR#] print("?sup did not respond to original req");
	[CXNRL#] print("?sup did not respond to login message");
	[CXNCH#] print("?sup did not supply a circuit");
	[CXERR#] print("?sup error from original request");
	else print("?unknown CREAUX error code: '",cvos(!lh(I)))
    end;
    print(crlf);
    !SKIP! _ false;
    return(AUXPORT _ -1);
end "CREAUX";


internal simple boolean procedure AUXOUT(string S);
begin!code "AUXOUT"
	Protect!acs 1,2;
	Label Loop, AllDone;
   	HRL 	1,AuxPort;		! Get port ;
	HRRI	1,!AXO8;		! Output image character ;
	HRRZ	3,-1(SP);		! Get the count ;
Loop:	ILDB	2,(SP);			! Get character ;
	CAIN	2,'14;			! Is it a Form-feed? ;
	SETOM	AuxFF;			! Yes, set flag ;
	AUXCAL	1,2;			! Output ;
	  SOJG	3,LOOP;			! Decrement and test ;
	SKIPN	1,AuxFlg;		! Skip if each line ;
	  MOVE	1,AuxFF;		! Get FF Flag ;
	JUMPE	1,AllDone;		! Each line or FF? - Jump if clear ;
	SETZM	AuxFF;			! Clear it and go on ;
	HRRI	1,!AXSYB;		! Send a yellow Ball ;
	AUXCAL	1,;			! Send it ;
	MOVSI	1,AuxPort;		! Get port again ;
	LSH	1,9;			! Shift it for HIBER ;
	TLO	1,'341;			! Set bits for wake/port/done ;
	HRRI	1,10;			! Wake up after 10 seconds (max) ;
	uuo!HIBER 1,;			! Wait for Orange-Ball return ;
	 JFCL;				! Ignore sleepy errors ;
	HRLI	1,'2000;		! 1 b 7 for yellow ball seen ;
	HRRI	1,access(POLL[0]);	! address of poll port block ;
	MOVEI	2,1;			! count ;
	MOVEM	2,1(1);			! Set count ;
	uuo!POLPRT 1,;			! Poll the ports ;
	 JFCL;				! Ignore errors - assume 1 port ;
	MOVE	2,access(POLL[1]);	! Get result ;
	SETO	1,;			! .True. ;
	TLNE	2,'2000;		! Check for Yellow ball received ;
	 SETZ	1,;			! Yes! .False. ;
AllDone:
end "AUXOUT";


internal simple integer procedure AUXIN (integer TIM(0) );
begin "AUXIN"
    integer C;
    calli( (auxport lsh 27) + !hl('111) + TIM, calli!HIBER);
    if !SKIP!
     then begin
    	C _ auxclv(AuxPort,0,!AXI8S);
	if AuxTrace
	 then outchr(C);
	if !SKIP!
	 then return(C)
	 else return(-1);
     end
     else return(-1);
end "AUXIN";


internal simple string procedure AuxLine(integer TIM(0));
begin
    String L; Integer J;
    L_ null;
    While -1 < J_ AuxIn(TIM)
     do begin
	If J = #LF then Return( L );
	If J neq #CR then L_ L & J;
     end;
    Return( L );
end;

internal simple procedure AUXZAP;
begin!code
	MOVE 1,AuxPort;
	uuo!ZAPCIR 1,;
	 JFCL;
end;


internal simple boolean procedure AuxSync(string CHS; integer TIM(0));
begin
    integer C,I;
    while length(CHS) do begin
      C _ lop(CHS);
      do begin
	I_AuxIn(TIM) land '177;
	if not !SKIP! then return(false);
      end until I=C or !lh(AuxPort);
    end;
    return(true);
end;


end	"AUXLIB" $
