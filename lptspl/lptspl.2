begin "Lptspl"

require "(sailib)sail.def" source!file;
require "(carl)block.rel"  Load!module;
require "(carl)frmops.req" source!file;
require "(carl)tymlib.req" source!file;
!get!module(EXTEND);
!get!module(RANDIO);

require crlf&"License: SY GD JL"&crlf message;

string filename, Author;
integer myppn, myjob, flag, eof, count, data!output, work!done;
integer inbrk, ufdchn, lptchn, dskchn;
own safe integer array data[0:10], filelookup[0:'32];
record!pointer (any!class) handle;

preset!with cvsix("SYS"),cvsix("LOGOUT"),0,0,0,0;
Integer array runblock[0:5];

External procedure BLOCK(Integer Chan,Size,Width; String Word);

Define	Debug=False;

Define	Cr="'15&'12",
	Top="Out(lptchn,'15&'14)",
	Space="Out(lptchn,'12&'12&'12)";

Define	Go!Away={ifc debug thenc Call(0,"EXIT")
	    elsec if myppn = '3000003
	    then Call(location(runblock[0]),"RUN")
	    else Call(0,"EXIT") endc};

String Procedure Get!Author;
Begin "Find out who this guy is"
    Arrclr(Filelookup);
    Filelookup[0]_'30+1;
    Filelookup[2]_Data[0];
    Filelookup[3]_Data[1];
    Start!Code
	Movei 1,'17;
	Movsi 2,'446353;
	Movei 3,0;
	Open  10,1;
	  Jfcl;
	Lookup 10,Filelookup[0];
	  Jfcl;
    End;
    Filelookup[0]_'30+1;
    Filelookup[1]_'1000001;
    Filelookup[2]_Filelookup['26];
    Filelookup[3]_Cvsix("UFD");
    Start!code
	Lookup 10,Filelookup[0];
	  Jfcl;
	Close 10,0;
	Releas 10,;
    End;
    Return(Cv6str(Filelookup['27])&Cv6str(Filelookup['30]));
End  "Find out who this guy is";

preset!with
  "Wednesday","Thursday","Friday","Saturday","Sunday","Monday","Tuesday";
string array Weekdays[ 1:7 ];

preset!with
  "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec";
string array ShortMonths[ 1:12 ];

preset!with
  "January","February","March","April","May","June",
  "July","August","September","October","Novem'er" ,"December";
string array LongMonths[e1:e2 ];

string procedure trailer( integer N );	! assumes positive N ;
  begin
    if ( ( N div 10 ) = 1 ) then return( "th" )
    else if (( N mod 10 ) = 1 ) then return( "st" )
    else if (( N mod 10 ) = 2 ) then return( "nd" )
    else if (( N mod 10 ) = 3 ) then return( "rd" )
    else return( "th" );
  end;
string DateTime, WeekDay, DayMonthYear, TimeOfDay, DetailLine;

procedure DateTimeStuff;
  begin
    integer JDate, UDT, Hours, Minutes, Zone, RollOver;
    integer TodaysDate, Day, Month, Year, DayOfWeek;
    string Time, Header;

    start!code
      calli 0,'14;	! get UDT 
      movem UDT;	! save it ;
      hrri 0,'11;	! 0,,11 ;
      hrli 0,'11;	! 11,,11 ;
      calli 0,'41;	! gettab julian date ;
       movei 0,47;	! assume error ;
      movem 0,JDate;	! save the julian date ;
      calli 0,'22;	! get jiffies past midnite ;
      idivi 0,3600;	! convert to minutes ;
      idivi 0,60;	! convert to hours ;
      movem Hours;	! save hours ;
      movem 1,Minutes;	! save minutes;
      hrroi 6;		! make gettab pointer to priv word ;
      calli 0,'41;	! gettab our priv word ;
       setzm 0;		! assume no privs on error ;
      rot '10;		! right justify bits 3-7 ;
      andi '37;		! mask to 5 bits ;
      movem Zone;	! save as our time zone code ;
    end;

    if (( Hours + ( 16 - Zone)) >= 24 ) then RollOver _ -1
    else Rollover _ 0;

    TodaysDate _ UDT;
    Day	_ ( UDT mod 31 ) + 1;
    UDT _ UDT div 31;
    Month _ ( UDT mod 12 ) + 1;
    Year _ ( UDT div 12 ) + 64;

    DayMonthYear := cvs( Day ) &
		  "-" & ShortMonths[ Month ] & "-" & cvs( Year );

    DayOfWeek	_ (( JDate + Rollover ) mod 7 ) + 1;
    WeekDay := WeekDays[ DayOfWeek ];

    TimeOfDay := cvs( Minutes );
    if ( Minutes < 10 ) then TimeOfDay := "0" & TimeOfDay;
    TimeOfDay := cvs( Hours ) & ":" & TimeOfDay;

    Header := ", printed " &
	     Weekdays[ DayOfWeek ] & ", " &
	     LongMonths[ Month ] & " " &
	     cvs( Day ) & Trailer( Day ) & ", " &
	     "19" & cvs( Year ) & " at " & TimeOfDay & " **";

    DateTime := Header;
  end;


Procedure Print!one!file;
Begin "Print one file"
    Simple Procedure HeaderPage;
    Begin "Header Page"
	out( lptchn, DateTime ); Space;
	Block( lptchn,1,132,Author ); Space;
	Block( lptchn,1,132,cv6str(Data[0])&"."&cv6str(Data[1]) ); Space;
	out( lptchn, DateTime ); Space;
	Block( lptchn,1,132,WeekDay ); Space;
	out( lptchn, DateTime ); Space;
	Block( lptchn,1,132,DayMonthYear ); Space;
	out( lptchn, DateTime );  Top;
    End "Header Page";

    Author _ Get!Author;

    DateTimeStuff;

    DateTime := "** (" & Author & ")" &
		cv6str(Data[0]) & "." & cv6str(Data[1]) &
		DateTime & #CR;

    if ( length( Author ) <= 10 ) then
      Author := "(" & Author & ")";

    if Call(lptchn,"DEVCHR") land !Bit(3) = 0 then Top;
    HeaderPage;
    HeaderPage;

    do out(lptchn,input(dskchn,inbrk)) until eof;
    data!output_true;
    work!done_true;

end "Print one file";

Procedure Each!file;
Begin "Each File"
    Own Integer Decext;
    Own String Extension;
    data!output_false;
    Extension _ cv6str(data[1]);

    filename _ cv6str(data[0]) & "." & Extension;

    enter(lptchn, filename, flag);
    if flag then usererr(0,0,"Can't ENTER file","C")
    else begin
	open(dskchn_getchan, "DSK",0, 4,0, 128*5,0, eof);
	lookup(dskchn, filename, eof);
	if eof then usererr(0,1,"File disappeared!","C")
        else Print!one!file;
	if data!output then
	  if decext_abs(cvd(extension)) then
	    rename(dskchn,cv6str(data[0]) & "." & cvs(decext-1),null,flag)
	  else
	    rename(dskchn,null,null,flag)
	else close(dskchn);
	release(dskchn);
	end;
    close(lptchn);
end "Each File";

Procedure Some!Printer!Processing;
Begin "Some printer processing"
    integer tryCount;
    work!done _ false;
    lookup(ufdchn, "(UFD)'"&cvos(myppn)&".UFD", flag);
    if flag then usererr(0,1,"Couldn't read directory (LPQ)","C")
    else begin
	handle_ iniufr("*","*", ufdchn);
	open(lptchn_getchan,"LPT",0, 0,4, 0,0, eof_true); ! get error;
	if not eof then
	    while nxtufr(data,handle) do Each!File; 
	release(lptchn);
	end;
    close(ufdchn);

end "Some printer processing";

Simple Boolean Procedure PrinterJob;
Begin "PrinterJob"
    integer Job,Jobs,Me;
    Me _ Call(0,"PJOB");
    Jobs _ gettab('15,'11) -1;    if not !SKIP! then Jobs_1024;

    for Job _ Jobs step -1 until 1 do
	if not Job = Me					! check for self;
	    and gettab(Job,-'23)='3000003		! check AUN;
	    and gettab(Job,0) land !bit(15)		! check JLOG;
	    and equ("LPTSPL",cv6str(gettab(Job,3)))	! check program;
	    and gettab(Job,0) < 0			! check if Running;
	then return(Job);
    return(False);
end "PrinterJob";
Procedure Create!Printer!Fork;
begin "setframe"
    Integer Frame, Framerror;
    String FrameName;

    FrameName _ "LPQ";
    If not EQU(FrameName,Login!Name) then
    Begin
	Frame _ CreFrm(FrameName);
	If not !SKIP! then usererr(0,0,"[Cannot login to "&FrameName&"]","X");
	Framerror _ RunFrm (Frame,"MPL","LPTSPL",0);
	If not Framerror and !SKIP! then
	    Print("[lptspl started in frame ", Frame land '777, "]")
	else begin
	    Print("Run error for (MPL)LPTSPL, Status: ",Cvos(Framerror));
	    Framerror _ RunFrm(Frame,"SYS","LOGOUT",0);
	    If not Framerror and !SKIP! then
		Print("Frame ",Frame land '777," Logged out")
	    else
		Print("Run error for (SYS)LOGOUT, Status: ",Cvos(Framerror),
			Cr,"Cannot log frame ",frame land '777," off.");
	end;
    End;
end "setframe";

myppn  _ call(0,"GETPPN");		! Get my logged-in ppn;

if myjob_PrinterJob then
    begin
	print(Cr,"[%LPTSPL already allocated in frame ",myjob,"]",Cr);
	Go!Away;
    end;

open(ufdchn_getchan,"DSK",'17, 0,0, 0,0,eof_true);	! handle error;
if eof then begin
    usererr(0,0,"Serious Problem -- DSK not available","C");
    Go!Away;
end;
setbreak(inbrk_getbreak,Null,
    ""&'33&'34&'35&'36&'37,"INS");

if myppn = '3000003 then begin
    ifc not debug thenc
    open(lptchn_getchan,"LPT",'1, 0,2, 0,0, eof_true);	! handle error;
    if eof then begin
	usererr(0,0,"Cannot access Printer!!!","C");
	Go!Away;
    end;
    if Call(lptchn,"DEVCHR") land !Bit(3) then calli(-1,-6); ! (Detatch)!;
    release(lptchn);
    endc;
    while true do begin
	Some!printer!processing;	! do whatever;
	If not work!done then
	    Calli('201000010, '72);	! then sleep for a bit;
    end;
end
else ifc debug thenc Print("Please GFD to LPQ before debugging") elsec
    Create!printer!fork endc;
Go!Away;

end "Lptspl";
