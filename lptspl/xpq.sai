begin
  require 14 version;
  require "(SAILIB)SAIL.DEF" source!file;
  require crlf&"License required: RF JL"&crlf message;
  EXTERNAL INTEGER RPGSW;
  integer I,x1,x2,x3,EOF,FD,COPIES;
  string DIR!FILE,COPY!FROM,COPY!TO,SYS!LIST;
  string HOME!SYS,SYSNO,LINE,FILE!NAME;

define !FRMOP = ('044 lsh 27);
define SILENT = {true};

preload!with
"?NOH: no handle in slot",
"?BDI: unmatching universal id number",
"?NRT: no rights to do operation",
"?BDF: bad frame number",
"?NLC: not enough license",
"?UND: undefined frame descriptor type",
"?NCH: fd said child but gave non-child frame number.",
"?CLP: can't lock context pages (fd2upx)",
"?BAR: bad access rights code",
"?NPR: orphan asked for its parent",
"?BFD: bad family dispatch type",
"?BDH: bad handle index number in fd",
"?BFN: bad function code to frmop",
"?ADB: address found bad (replicate failed) in .fo?va",
"?IOE: page i/o error in frmrvm/frmwvm",
"?ALR: attempt to start a running frame",
"?ALH: attempt to halt non-running frame",
"?CSJ: attempt to halt frame with jacct on",
"?FHE: handle descriptor expected, not given",
"?FHU: handle (index already) used",
"?NFH: no handle indices left.",
"?BCN: bad count",
"?BTN: bad table number",
"?BHT: bad handle type",
"?CCH: can't create handle (access failure)",
"?BSV: bad start vector offset",
null; string array FRMOP!err[1:64];

simple integer procedure Frmopr(integer FD;
	reference integer ARG;  integer FN; boolean !SILENT!(false));
begin
    own integer ERR;
    start!code
	MOVE 1,FD;
	HRL 1,FN;
	SETOM !SKIP!;
	!FRMOP 1,ARG;
	  SETZM !SKIP!;
	MOVEM 1,ERR;
    end;
    if not (!SKIP! or !SILENT!) then print (
	"?FRMOP '",cvos(FN),
	" for FD='",cvos(FD),
	", ARG='",cvos(ARG),
	", ERR='",cvos(ERR),
	crlf, Frmop!Err[ERR], crlf);
    return(ERR);
end;	
 
simple integer procedure FrmopI(integer FD,ARG,FN,S(false));
return(Frmopr(FD,memory[ARG],FN,S));

simple integer procedure Frmop(integer FD,ARG,FN,S(false));
return(Frmopr(FD,ARG,FN,S));

simple integer procedure GetTab(integer I,T);
begin
    own integer VAL;
    start!code
	MOVE 1,T;
	HRL 1,I;
	SETOM !SKIP!;
	CALLI 1,'41;
	  SETZM !SKIP!;
	MOVEM 1,VAL;
    end;
    return(VAL);
end;


integer procedure cvppn(string user);
begin
    external integer !SKIP!;
    integer CH,E;
    integer array X[0:3],U[0:1];
    X[0] _ 3;
    X[1] _ '1000001;
    X[2] _ location(U[0]);
    X[3] _ cvsix("UFD");
    U[0] _ cvsix(user[1 for 6]);
    U[1] _ cvsix(user[7 for 6]);
    open (CH_getchan,"DSK",0,0,0, 0,0,E);
    if E then usererr(0,0,"?can't init disk");
    chnior(CH,X[0],4);
    if not !SKIP! then usererr(0,0,"?no UFD for user "&user);
    return(X[2]);
end;

integer procedure CreFrm(string User(null));
begin "CREATE"
	integer FD,I;
	integer array A[0:4];
	A[0] _ gettab(-1,2);		! JBTPPN;
	A[1] _ gettab(-1,6) lor !bit(1);! JBTPRV + JP!NOA;
	A[2] _ gettab(-1,-'23); 	! AUN;
	A[3] _ gettab(-1,-'22); 	! UN1;
	A[4] _ gettab(-1,-'21); 	! UN2;
	if length(user) then begin
	    A[2] _ cvppn(user);
	    A[3] _ cvsix(user[1 for 6]);
	    A[4] _ cvsix(user[7 for 6]);
	end;
	I _ !hl(-5)+location(A[0]);
	FD _ Frmopr (0,I,1);		! Create frame;
	return (FD);
end "CREATE";

procedure RunFrm(
	integer FD;
	string Arg;
	integer StartInc(0));
begin "RUN"
	integer array AC[0:'17];
	label AC!data,ST;
	calli (FD,-'126);			! SetOTF;
	calli (!hl('206001),-'67);		! give it 1 page;
	if false then quick!code
	    AC!data:
		0;0;0;0;0;0;0;0;		! [0:7];
		0;				! [10];
	    ST: CALLI '10,'35;			! RUN uuo;
		JRST 4,'13;			! HALT;
	    end;
	arrblt(AC[0],memory[location(AC!data)],'20);
	AC[0] _ cvsix("DSK");
	AC[1] _ cvfil(Arg,AC[2],AC[4]);
	if AC[4]=0 then AC[4] _ gettab(-1,2);
	if (!lh(AC[4])=0) then begin
	    AC['6] _ memory[AC[4]];
	    AC['7] _ memory[AC[4]+1];
	    AC[4] _ '6;
	    end;
	AC['10] _ AC['10] lor !hl(StartInc);
	for I _ 0 step 1 until '17 do begin
	    integer array A[0:1];
	    A[0] _ I; A[1] _ AC[I];
	    Frmopr(FD,A[0],3);
	    end;
	Frmop(FD,!hl(-1) lor (location(ST)-location(AC!data)),4);
	Frmop(FD,0,'24);	! graft to frm 0 (disown);
end "RUN";

SIMPLE STRING PROCEDURE USER!NAME;
BEGIN
  OWN INTEGER CH;
  OWN INTEGER ARRAY LKB[0:30];
  LKB[0]:=30; LKB[1]:='1000001; LKB[3]:=CVSIX("UFD");
  LKB[2]:=CALL('777777000002,"GETTAB");
  OPEN(10,"DSK",0,0,0,0,0,0);
  CHNIOR(10,LKB[0],4);
  CLOSE(10); RELEASE(10);
  RETURN(CV6STR(LKB['27])&CV6STR(LKB['30]));
END;

simple string procedure Login!Name;
return( cv6str(gettab(-1,-'22)) &
	cv6str(gettab(-1,-'21)) );

simple procedure COMPLAIN(string TEXT);
begin "COMPLAIN"
  outstr(TEXT);
  call(0,"EXIT");
  end "COMPLAIN";

simple string procedure SYSTEM!NUMBER;
  return(cvs(call('33000011,"GETTAB")));

simple string procedure TRIM(string X);
begin "TRIM"
  own integer I;
  for i:=length(x) step -1 until 1 do
    if X[I for 1] neq 32 then
      return(X[1 to I]);
  return(null);
  end "TRIM";

simple procedure TELECOPY;
begin "TELECOPY"
  RunFrm (FD,"(SYS)TELECO",1);
  if !SKIP! then print("[telecopy started in frame ",
	FD land '777, "]");
  call(0,"EXIT");
end "TELECOPY";

simple string procedure XXX;
begin "XXX"
  own string FN;
  own integer A,B;
  getformat(A,B);
  setformat(-3,0);
  FN:=CVS(FD land '777);
  setformat(A,B);
  return(FN);
  end "XXX";

SIMPLE STRING PROCEDURE MYNAME;
BEGIN
  DEFINE !GTPRG = '777777000003, !GTFPN = -'25;
  RETURN(CV6STR(CALL(!GTPRG,"GETTAB"))
    &"["&CVOS(CALL(!GTFPN,"GETTAB")LSH -18)
    &","&CVOS(CALL(!GTFPN,"GETTAB")LAND '777777)&"]");
  END;

SIMPLE PROCEDURE CALL!DIRIT(STRING COM!STR);
BEGIN
  OWN INTEGER I,ERR;
  OWN STRING STR;
  OWN INTEGER ARRAY RUN!BLOCK[0:5];
  STR:=COM!STR&"DSK:"&MYNAME&"!"&crlf;
  TMPOUT("DIR",STR,ERR);
  IF ERR THEN BEGIN
    OPEN(1,"DSK",0,0,5,0,0,0);
    ENTER(1,XXX&"DIR.TMP",ERR);
    IF ERR THEN
      COMPLAIN("?CAN'T CREATE TEMP FILE");
    OUT(1,STR);
    CLOSE(1); RELEASE(1);
    END;
  RUN!BLOCK[0]:=CVSIX("SYS");
  RUN!BLOCK[1]:=CVSIX("DIRIT");
  I:=LOCATION(RUN!BLOCK[0])+'1000000;
  CALL(I,"RUN");
  COMPLAIN("?UNABLE TO RUN SYS:DIRIT");
  END;

STRING PROCEDURE FOO(STRING FOX);
BEGIN
  OWN INTEGER I,EOF,BRK;
  STRING S,X;
  IF FOX[1 FOR 1] NEQ "@" THEN RETURN(FOX&crlf);
  OPEN(1,"DSK",0,5,0,256,BRK,EOF);
  LOOKUP(1,FOX[2 TO INF]&".CMD",I);
  IF I THEN COMPLAIN("?Can not read command file");
  setbreak(8,'15,'12,"INS");
  S:=input(1,8);
  while X:=input(1,8) do
    S:=S & "," & X;
  return(S &crlf);
  END;

define tymcom!x = 512 lsh 18;
string procedure def!sys!list;
begin
  integer chan,eof,i;
  string s;
  s_null;
  open(chan_getchan,"DSK",'14,2,0, 0,0,eof);
  lookup(chan,"(pj)jobs.dat",eof);
  if eof then
    return("22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,52,55,56,65,70,72,74,79,90");
  for I_12 step -1 until 0 do wordin(chan);! skip stuff at front;
  while not EOF do begin
    I _ wordin(chan);
    if I = -1 then done;
    if I land tymcom!x then S_S&","& cvs(!rh(I));
  end;
  if I neq -1 then usererr(I,2,"? -1 expected at end of (PJ)JOBS.DAT");
  release(chan);
  return(s[2 to inf]);
end;


begin "MAIN"
  boolean DefaultAll, Super;
  integer brk;
  string switches,FrameName;
  label RESTART;
RESTART:
  ttyup(true);
  setformat(0,0);
  FD _ call(0,"PJOB");
  IF RPGSW = 0 THEN BEGIN
    integer EscFlg,Brk;
    string SWITCHES,FILES;
    OUTSTR("File(s): ");
    SWITCHES _ inchwl;
    if SWITCHES="?" then begin print("specify files to be printed as:
	filename,filename,filename/n
where filename may contain wild cards and may not contain user name or
PPN.  The optional switch /n specifies the number of copies (n is a 
decimal integer in [1:999].  
Note: each copy has a two page header.
Note: beware the extension field specifies the number of copies!
");	goto RESTART end;
    EscFlg _ (!SKIP! = '33) or (!SKIP! = '3);
    if EscFlg then print(crlf);
    setbreak(6,"()/"," ","KINR");
    FILES _ scan(SWITCHES,6,Brk);
    If Brk="(" or Brk=")" then usererr(0,0,"?user name not allowed here","S");
    open(1,"DSK",1,0,1, 0,0,Brk);
    enter(1,XXX&"COP.TMP",Brk);
    cprint(1, (if EscFlg then "/ESC" else null), SWITCHES);
    release(1);
    CALL!DIRIT("DSK:"&XXX&"TEL.DIR"&"_"&FOO(FILES));
    usererr(0,0,"?failure running SYS:DIRIT","X");
  END;
  RPGSW _ false;
  defaultAll _ Super _ false;
  open(1,"DSK",1,1,0, 256,Brk,Brk);
  lookup(1,XXX&"COP.TMP",Brk);
  if not Brk then Switches _ input(1,0);
  release(1);
  setbreak(6,"/"," ","SINK");
  DefaultAll _ Super _ false;
  while length(switches) do begin
    string Foo;
    Foo _ scan(switches,6,Brk);
    if equ(Foo,"ESC") then DefaultAll _ True
    else if equ(Foo,"SUPERCEDE"[1 to length(Foo)]) then Super _ true
    else if cvd(Foo) then COPIES _ cvd(FOO)
    else usererr(0,0,"?illegal stwitch: /"&foo,"X");
  end;
  COPY!FROM:=user!name;
  SUPER _ false;
  Dir!File _ XXX&"TEL.DIR" ;

  FD _ CreFrm;
  if not !SKIP! then usererr(0,0,"Can't create frame","X");
  open(1,"DSK",1,4,0,256,x2,EOF);
  lookup(1,DIR!FILE,x1);  close(1);
  if x1 then complain("?Can not lookup directory file"&DIR!FILE);
if calli(!xwd('33,'11),'41) = 54
then begin "printer system"
    integer E;

  setbreak(1,10,13,"I");
  setbreak(2,",",":","I");

  open (2,"DSK",'14,12,0, 0,0,E);
  open (3,"DSK",'14,0,12, 0,0,E);
  print("spooling files...");
  begin "NEXT SYSTEM"
    string FN,FX,SF,DF;
    lookup(1,DIR!FILE,x1);
    EOF:=false;
    for i:=1 step 1 until 5 do input(1,1);
    while not EOF do begin
      LINE:=input(1,1);
      FN _ trim(LINE[1 for 6]);
	! file name;
      FX _ trim(LINE[9 for 3]); 
	! file extension;
      SF _ FN & (if length(FX) then "." else null) & FX;
	! full source file name;
      if cvd(FX) then begin
	print(crlf&"%file ",FN,".",FX," will be printed as ");
	FX _ if COPIES then cvs(COPIES) else "1";
	print(FN,".",FX);
      end;
      DF _ if COPIES then FN & "." & cvs(COPIES) else SF;
	! full destination file name;
      if LINE > 32 then begin "COPY FILE"
	lookup(2,SF,E);
	if E then begin print(crlf&"?cant lookup DSK:",SF); continue end;
	enter(3,"(LPQ)"&DF,E);
	if E then begin print(crlf&"?cant enter DSK:(LPQ)",DF); continue end;
	print (crlf&"  ",SF);
	if not equ(SF,DF) then print(" as ",DF);
	inout (2,3,-1);
	close (2); 
	close (3);
      end "COPY FILE";
    end;
    close(1);
  end "NEXT SYSTEM";

  lookup(1,Dir!File,x1);
  rename(1,null,null,x1);
  release(1); release(2); release(3);
end "printer system" 
else begin "not printer system"
  open(2,"DSK",1,0,2,x1,x2,x3);
  enter(2,XXX&"TEL.COM",x1);
  if x1 then complain("?Can not enter file "&XXX&"TEL.COM");

  HOME!SYS:=SYSTEM!NUMBER;
  setbreak(1,10,13,"I");
  setbreak(2,",",":","I");

  IF SUPER
    THEN OUT(2,"REPLACE"&crlf)
    ELSE OUT(2,"KEEP"&crlf);
  out(2,"NO UPDATE"&crlf);
  out(2,"ONLC"&crlf);
  out(2,"PASSWORD"&crlf&"WELCOME"&crlf);
  out(2,"GATEWAY 454;LPQ:54"&crlf);

  begin "NEXT SYSTEM"
    string FN,FX,SF,DF;
    lookup(1,DIR!FILE,x1);
    EOF:=false;
    for i:=1 step 1 until 5 do input(1,1);
    while not EOF do begin
      LINE:=input(1,1);
      FN _ trim(LINE[1 for 6]);
	! file name;
      FX _ trim(LINE[9 for 3]); 
	! file extension;
      SF _ FN & (if length(FX) then "." else null) & FX;
	! full source file name;
      if cvd(FX) then begin
	print("%file ",FN,".",FX," will be printed as ");
	FX _ if COPIES then cvs(COPIES) else "1";
	print(FN,".",FX,crlf);
      end;
      DF _ if COPIES then FN & "." & cvs(COPIES) else SF;
	! full destination file name;
      if LINE > 32 then
        cprint (2, "(", COPY!FROM, ":*)", SF,
          ",(LPQ:54)", DF, crlf);
    end;
    close(1);
  end "NEXT SYSTEM";

  out(2,"QUIT"&crlf);
  close(2);
  lookup(1,Dir!File,x1);
  rename(1,null,null,x1);
  release(1); release(2);

  TELECOPY;
end "not printer system";
  end "MAIN";

end
  