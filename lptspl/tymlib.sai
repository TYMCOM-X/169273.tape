
Internal Simple String Procedure Login!Name;
Return( cv6str(gettab(-1,-'22)) &
	cv6str(gettab(-1,-'21)) );

Internal Simple String Procedure User;

!	"username" _ User

	Returns the username the job is logged in to as a string
	without the "()"
;
Return(Cv6str(Gettab(-1,-'22))&Cv6str(Gettab(-1,-'21)));

Internal List Procedure DetachedJobList;

!	"list of jobs" _ DetachedJobList

Returns a list of all jobs logged in and deatched.  The PNAMEs of the
items returned in the list are of the form #:program-name.  The props
of the item is the frame number, and the datum of the item is the
program name.  If the program is running, its run state is shown in
parenthesis after the program name.  Some examples are:
	{{1:PJ(TI), 2:CHKPNT(TI), 3:FOOBAR}}
;
begin "detachedjoblist"

Simple String Procedure QUEUE(Integer J);
begin "Q"
    own integer STS,ST,I;
    STS _ gettab(J,0);
    if STS geq 0 then return("^C");
    ST_STS lsh -21 land '37;
    I _ gettab(ST/3,'25) lsh (12*(ST mod 3)) land (-1 lsh 24);
    return(cv6str(I));
end "Q";

    external boolean !SKIP!;
    integer JobN,J,MyAun;
    list S;
    S _ phi;
    MyAUN _ gettab(-1,-'23);
    JobN _ gettab('15,'11) -1;
    if not !SKIP! then print("?Can't gettab JOBN, assuming ",JobN_1024,nl);
    for J _ JobN step -1 until 1 do
	if gettab(J,-'23)=MyAun			! check AUN;
	    and gettab(J,0) land bit(15)	! check JLOG;
	    and gettab(J,6) land bit(1) =0	! check NOATT;
	    and gettab(J,-54) lsh -24 =0	! check for parent;
	    and gettab(J,-'27) lsh -18 =0	! check LDB;
	    then begin
		string Name;
		string itemvar I;
		Name _ cv6str(gettab(J,3));	! get NAM;
		if gettab(J,0) < 0 then 	! get STS;
		    Name _ Name & "(" & Queue(J) & ")";
		I _ New (name);
		props (I) _ J;
		new!pname (I,cvs(J)&":"&name);
		put I in S before 1;
	    end;
    return(S);
end "detachedjoblist";

Internal Simple Procedure Attach(Integer J,Bits(0));

!	Attach (Job, [Bits])

Attach to specified job.  If bits are specified, use them for
the attach UUO.  The current job is logged out.  If this works, it
won't return to the user.  If it doesn't work, it is because the
job trying to be attached to is illegal or not detached or such.

Bits are:	1	Do not force attachee into command mode.
		2	Do not cause EXIT for current job (forced on).
;
If gettab(J,-'23)=gettab(-1,-'23)		! check AUN;
    and gettab(J,0) land bit(15)		! check JLOG;
    and gettab(J,6) land bit(1) =0		! check NOATT;
    and gettab(J,-54) lsh -24 =0		! check for parent;
    and gettab(J,-'27) lsh -18 =0		! check LDB;
    then begin
	calli(hl(2 lor bits) lor hr(J),-6);	! ATTACH;
    	calli(bit(17),-'130);			! LOGOFF;
    end;

Internal Simple String Procedure Trim(String X);
begin "TRIM"
    own integer I;
    for i:=length(x) step -1 until 1 do
	if X[I for 1] neq 32 then
	    return(X[1 to I]);
    return(null);
end "TRIM";

Internal Simple Procedure SetLch (Integer Port,Value,BitNo(-1));

!	Setlch (Port,Value,(BitNo))
	Value _ GetLch (Port,(BitNo))

	Changes the specified bit in the SETLCH word.  Other
	bits remain unchanged.  If BitNo is omited, whole word
	is implied.
;
begin "SetLch"
    own integer T,PTR;
    if BitNo < 0 
	then PTR _ point(36,T,35)
	else PTR _ point(1,T,BitNo);
    start!code
    	define GETLCH = '051300000000;
	define SETLCH = '051340000000;
    	MOVE 1,port;
    	MOVEM 1,T;
    	GETLCH T;
    	MOVE 1,value;
    	DPB 1,PTR;
    	SETLCH T;
    end;
end "SetLch";

Internal Simple Integer Procedure GetLch (integer Port,BitNo(-1));
begin "SetLch"
    own integer T,PTR;
    if BitNo < 0 
	then PTR _ point(36,T,35)
	else PTR _ point(1,T,BitNo);
    start!code
    	define GETLCH = '051300000000;
    	MOVE 1,port;
    	MOVEM 1,T;
    	GETLCH T;
    	LDB 1,PTR;
    end;
end "SetLch";

Internal Simple Procedure TTY!Crlf;
setlch(-1,0,10);
Internal Simple Procedure TTY!No!Crlf;
setlch(-1,1,10);

Internal Simple Procedure LC;
setlch(-1,1,13);
Internal Simple Procedure No!LC;
setlch(-1,0,13);

Internal Simple Procedure Tab;
setlch(-1,1,14);
Internal Simple Procedure No!Tab;
setlch(-1,0,14);

Internal Simple Procedure Auto!LF;
setlch(-1,0,16);
Internal Simple Procedure No!Auto!LF;
setlch(-1,1,16);

Internal Simple Procedure Form;
setlch(-1,1,17);
Internal Simple Procedure No!Form;
setlch(-1,0,17);

Internal Simple Procedure CR!Delay;
auxclv(-1,1,'14);
Internal Simple Procedure LF!Delay;
auxclv(-1,0,'14);

Internal Simple Procedure Even!parity;
auxclv(-1,1,'17);
Internal Simple Procedure No!parity;
auxclv(-1,0,'17);

Internal Simple Procedure Even;
auxclv(-1,1,'17);
Internal Simple Procedure Parity;
auxclv(-1,1,'17);

Internal Simple Procedure Half;
auxclv(-1,1,'20);
Internal Simple Procedure Full;
auxclv(-1,0,'20);

Internal Simple Procedure SetA(Integer X);
auxclv(-1,x,'21);
Internal Simple Procedure SetB(Integer X);
auxclv(-1,x,'22);
Internal Simple Procedure SetC(Integer X);
auxclv(-1,x,'23);

Internal Simple Procedure Width(Integer X);
auxclv(-1,x,'27);
Internal Simple Procedure Line!Width(Integer X);
auxclv(-1,x,'27);

Internal Simple Procedure FF!Fill(Integer X);
auxclv(-1,x,'30);

Internal Simple Procedure HT!Fill(Integer X);
auxclv(-1,x,'31);

Internal Simple Procedure Rev!XON;
auxclv(-1,1,'55);
Internal Simple Procedure No!Rev!XON;
auxclv(-1,0,'55);

Internal Simple Procedure BackSpace;
auxclv(-1,1,'57);
Internal Simple Procedure No!BackSpace;
auxclv(-1,0,'57);

Internal Simple Procedure Erase;
auxclv(-1,1,'62);
Internal Simple Procedure No!Erase;
auxclv(-1,0,'62);

Internal Simple Procedure DEM;
auxclv(-1,1,'63);
Internal Simple Procedure No!DEM;
auxclv(-1,0,'63);

Internal Simple Procedure BSD;
auxclv(-1,1,'77);
Internal Simple Procedure No!BSD;
auxclv(-1,0,'77);

Internal Simple Procedure Istrou (String S);
while length(S) do ioneou (lop (S));

Internal Simple Procedure TabSet (String !Clr,!Set; Integer !Wid(73) );
begin
    integer I;
    tabs;
    ioneou ('15);
    istrou (!Clr);
    for I _ 2 step 1 until !Wid do begin
	ioneou ('40);
	if I mod 8 = 1 then istrou (!Set);
    end;
    ioneou ('15);
end;

Internal Simple Procedure Scope(Integer l,w);
begin
	forms;
	backspace;
	erase;
	width(w);
	rev!xon;
end;

Internal Simple Procedure Tym!444;	! HP-2621A;
begin
	scope(48,80);
	tabset ('33&"3",'33&"1");
end;

Internal Simple Procedure Tym!325;	! diablo 1620;
begin
	forms;
	tabset ('33&"2",'33&"1");
end;
Internal Simple Integer Procedure Node;
begin "node"
    integer I; 
    I _ gettab(-1,-'24);
    return(
	((I lsh -10)land '7700) lor
	((I lsh -8)land '77) );
end "node";

Internal Simple Integer Procedure Port;
Return( Gettab(-1,-'24) land '177 );

Internal Simple Integer Procedure TIC;
Return( (Gettab(-1,-'24) lsh -24) land '17 );

Internal Simple Procedure SetBaud(Integer Rate);
begin
    auxclv(-1,rate,'15);
    auxclv(-1,rate,'16);
end;

Internal Simple Integer Procedure In!Baud;
Return(Auxclv(-1,-1,'15));

Internal Simple Integer Procedure Out!Baud;
Return(Auxclv(-1,-1,'16));

Internal Simple Integer Procedure States;
Return(Gettab('17,'11));

Internal Simple String Procedure State!Name;
Begin "State!Name"
Case States lsh -15 land 7 of
    begin "state"
	[0] return("answered");
	[1] return("restricted");
	[2][3][6][7] return("super-shut");
	[4] return("shut");
	[5] return("restricted + shut");
	else return(cvos(STATES)) 
    end "state";
End "State!Name";
Internal Simple String Procedure HardWare;
begin "HardWare"
    integer BLTresult,AOBJNresult;
    start!code 
	setz; 
	blt; 
	hrrzm BLTresult;		! 0=KI/F3, 1=non-KI/F3;
	seto;
	aobjn;
	movem AOBJNresult;		! 0=non-F3, 1,,0=F3;
    end;
    return(case BLTresult of (		! BLT resolves KI/F3 vs KL/KS;
	(if AOBJNresult 		! AOBJN resolves KI vs F3;
	    then "F3"			! KI adds 1,,1;
	    else "KI-10" ),		! KI adds seperately;
	(if gettab('20,'11) land '70000 ! serial resolves KL vs KS;
	    then "KS-10" 		! KS is ['10000:'70000];
	    else "KL-10")		! KL is [?:''07777];
    )); 
end "HardWare";

Internal Simple String Procedure SoftWare;
Return (  cvastr(gettab('0,'11))
	& cvastr(gettab('1,'11))
	& cvastr(gettab('2,'11))
	& cvastr(gettab('3,'11))
	& cvastr(gettab('4,'11)));

!	Host mode - PDP/TYMEX;

Internal simple procedure PDP;
start!code
    hrroi 6;
    calli '41;
    jfcl;
    trz '600;
    calli -'11;
end;
Internal simple procedure TYMEX;
start!code
    hrroi 6;
    calli '41;
    jfcl;
    trz '600;
    tro '200;
    calli -'11;
    jfcl;
end;
Internal simple procedure Time!Zone(Integer x);
start!code
    hrroi 6;
    calli '41;
    jfcl;
    tlz '76000;
    tlo x;
    calli -'11;
    jfcl;
end;
Internal Procedure Run (String 	File; 
			Integer Start(0) );

!	Run (program,[start])

	Run another program (overlay).  Program name may contain
	user name and program name, no device.
;
begin "run"
    integer array RNB[0:5];
    Parse (File, RNB[1], RNB[2], RNB[4]);
    RNB[0] _ cvsix("DSK");
    RNB[3] _ RNB[5] _ 0;
    calli ((Start lsh 18) + location(RNB[0]), '35);
end "run";

Integer Simple Procedure SetLic (integer Lic);

!	SetLic (license)

;
If calli(-'25,'41)=calli(-'23,'41) then calli(lic,-'10);

Internal Simple Integer Procedure MyLic;

!	License _ MyLic

;
Return( (gettab(-1,-'20) land '777777000000) lor
	(gettab(-1,-'20) lsh -18) );

Internal Simple Integer Procedure RESPONSE!TIME; 

!	delay!in!ms _ Response!Time

	Return time in mS for round trip message through network
;
begin "RT"
    integer Start;
    calli('40000000,'72);
    Start _ call(0,"MSTIME");
    calli('40000000,'72);
    return(call(0,"MSTIME")-Start);
end "RT";

Internal Simple Integer Procedure LOAD!AVERAGE; 

!	percent!cpu!load _ Load!Average

	Return the % of CPU saturation over the last minute
;
Return(100-calli('35000012,'41)*100/calli('27000011,'41));


Internal Procedure NEWS (String FN);

!	will print at the terminal any new text appended to the file named

;
begin	"NEWS"
    forward external integer procedure rchptr( integer chan );
    forward external procedure schptr( integer chan, index );

    integer C,B,E,X,BKT; string F;
    F _ cv6str(cvfil(FN,B,B));
    open(C_getchan,"DSK",1,4,4,256,B,E);
    lookup(C,F&".MKR",E);
    if E 
	then X _ 0
	else X _ intin(C);	    
    close(C);	    
    lookup(C,FN,E);
    if E then begin release(C); return end;
    schptr(C,X);
    setbreak(BKT_getbreak,null,null,"IZ");
    do begin string S;
	outstr( S _ input(C,BKT) );
	X _ X + length(S);
    end until E;
    relbreak(BKT);
    close(C);
    enter(C,F&".MKR",E);
    if E 
	then print("?cant update ",F,".MKR",nl)
	else out(C,cvs(X-1)); ! -1 because input produces an extra null;
    release(C);
end	"NEWS";
Internal Procedure CrashCheck (string Prefix,Systems);
begin
    integer Brk,Chan,Eof;
    integer Sys,Sys1,Sys2;
    integer ScnBrk;
    string FN;
    setbreak(ScnBrk_getbreak,",-:"," ","SINK");
    open(Chan_getchan,"DSK",1,1,0, 256,Brk,Eof);
    if Eof then usererr(Eof,2,"can't init DSK: ");
    while length(Systems) do begin
	Sys1 _ cvd(scan(Systems,ScnBrk,Brk));
	case Brk of begin
	  [":"]
	  ["-"] Sys2 _ cvd(scan(Systems,ScnBrk,Brk));
	  else Sys2 _ Sys1
	end;
	for Sys _ Sys1 upto Sys2 do begin
	    FN _ Prefix & "." & cvs(Sys);
	    lookup(Chan,FN,Eof);
	    if EOF then print ("[", FN, " not found]", nl);
	    while not eof do print(input(Chan,0));
	    close(Chan);
	end;
    end;
    release(Chan);
    relBreak(ScnBrk);
end;

end "TYMLIB"; 