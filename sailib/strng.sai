
entry	ASZSTR, BYPOK, CMPSTR, CONSTR, DYNSTR,
	STRACH, STRADD, STRCLS, STRLEN, STROPN, STRPEK,
	STRSTF, SUBEQU, UPDSTR;

begin "strlib"
define  ! = "comment", desr = "comment";
let decl = internal;

comment	All of the procedures in this package that take one or more
	byte pointers as arguments use code from bypok to correct
	the bytepointers before they are used.  as a result, HRROI-
	style bytepointers can be used, and a few other values for
	byte pointers that might not otherwise be valid can be used.
	For details, see the comment on bypok.
;
define a=1, b=2, sp='16, p='17; 
label bpchk;

decl simple integer procedure bypok( integer bytepointer );
DESR	Returns an equivalent 7-bit byte pointer in the sail style if
	the pointer is close enough (hrroi style pointers work),  and
	returns 0 if the byte pointer cannot be made to work for sail
	strings.  A fix has been added to allow location( x ) to work
	the same way as point( 7, x, -1 ) (ie first byte of x) (Note:
	This will not work for values 0-15, the accumulators).  With
	the exception of a 0 or -1 left half, a non-zero return means
	that ibp( bytepointer ) = ibp( bypok( bytepointer ) ).
;
start!code "bypok"	label sp1ret, sp2ret, bpok, bpbad;
	move	a,bytepointer;	! use check machine code routine;
	pushj	p,bpchk;	! call: bp in a, pushj p,bpchk;
	 setz	a,;		! return: +1 error (proc returns 0);
				!	  +2 ok, fixed ptr in 1;
	sub	p,['000002000002]; ! fix stack for return;
	jrst	@2(p);		! and exit;

bpchk:	caig	a,'17;		! make sure not 0,,ac ('17 geq a geq 0);
	 jumpge	a,bpbad;	! if it is, take the error return;
	hlrz	b,a;		! check for special case byte pointers;
	caie	b,0;		! lh(ptr) = 0 => location(x) used;
	cain	b,'777777;	! hrroi ac,addr type, (a special case);
	 jrst	sp1ret;		! means start with first byte;

	trne	b,'000077;	! no indexing or indirect (we're picky);
	 jrst	bpbad;
	trne	b,'007000;	! huge byte pointers will be OK;
	 jrst	bpok;
	trcn	b,'000700;	! zero size field is pretty shitty;
	 jrst	bpbad;
	trce	b,'000700;	! huge byte pointers will be OK;
	 jrst	bpok;		! smaller than seven assumed OK;
				! check seven-bit byte pointers closely;
	caie	b,'440700;	! check for reasonable bytepointers;
	 cain	b,'010700;	! (attempted to get most common @ top);
	  jrst	bpok;
	caie	b,'350700;
	 cain	b,'260700;
	  jrst	bpok;
	caie	b,'170700;
	 cain	b,'100700;
	  jrst	bpok;		! end of normal byte pointers;

	caie	b,'000700;	! near-valid bytepointers (same as 01);
	 cain	b,'020700;
	  jrst	sp2ret;
	caie	b,'030700;
	 cain	b,'040700;
	  jrst	sp2ret;
	caie	b,'050700;
bpbad:	 popj	p,;		! there are some that are pure drivel;
				! return +1, (an error return);
sp2ret:	hrli	a,'010700;	! no bytes left in this word;
	skipa;
sp1ret:	hrli	a,'440700;	! hrroi type is point(7,@loc,-1);
bpok:	aos	(p);		! return +2, (possibly) fixed bp in a;
	popj	p,;
end "bypok";
DECL SIMPLE STRING PROCEDURE constr( INTEGER bytepointer, count );
DESR	returns a string of length count that first character is 
	the character ILDB(bytepointer).  The string is not garbage
	collected (SAIL thinks of it as a constant string), and it
	will change any time the corresponding bytes of information
	in the area pointed to change.  Hence, the string (and all
	substrings taken from it) is extremely unstable, so be very
	careful when using this procedure.  Causes a continueable
	USERERR if the bytepointer or count are invalid.
;
begin "constr"
      START!CODE "check"	DEFINE c=3; label badcall;
	
	skiple	c,count;	! verify string length not ridiculous;
	 tlne	c,'777777;
	  jrst	badcall;	! null or ridiculous, perhaps complain;
				! but don't check byte pointer for null;

	move	a,bytepointer;	! now check bytepointer;
	pushj	p,bpchk;
	 jrst	badcall;	! +1, bad bytepointer, complain;
				! +2, good bytepointer in a;
				! place count and good ptr on sp;
	push	sp,c;		! count goes first;
	push	sp,a;		! then bytepointer (maybe corrected);
	sub	p,['000003000003];	! unwind arguments, and ;
	jrst	@3(p);		! return  (string);
badcall:
      END "check";

if count neq 0 
 then usererr( 0,1, "Bad " &
	(if 0 leq count leq '777777 then "Byte pointer" else "count") &
	" argument to constr, will return NULL." & ('15 & '12) & 
	"  bp = '" & cvos(bytepointer) & ", count = " & cvs(count) );
! No matter what the byte pointer looks like, a null string is valid;
return( null );

END "constr";
DECL SIMPLE STRING PROCEDURE dynstr( INTEGER bytepointer, count );
DESR	Returns a string copy of the first count count characters after
	bytepointer.  very much like "CONSTR", but the strings are safe
	to use anywhere in the program, and if the data pointed to by
	bytepointer changes, the string retains its characters.  Causes
	a continueable USERERR if the bytepointer or count are invalid.
;
RETURN( (0 & constr( bytepointer, count ))[ 2 TO INF ] );
DECL SIMPLE STRING PROCEDURE aszstr( INTEGER byptr );
DESR	Returns a string copy of the "ASCIZ" string pointed to by 
	byptr.  That is, a string starting at the first character
	loaded by byptr, and continuing until the first null
	character.  (A standard TENEX string format).  Causes a
	continueable USERERR if the bytepointer is invalid.
;
begin "aszstr"
      START!CODE "code"		DEFINE c=3; label lup, erret;
	move	a,byptr;
	pushj	p,bpchk;
	 jrst	erret;
	movem	a,byptr;

	setz	c,;
  lup:	ILDB	b,a;
	skipe	b;	! c is count, stack is ... byptr, rtad;
	aoja	c,lup;

	exch	c,(p);	! c is rtad,  stack is ... byptr, count;
	PUSH	p,c;	! stack is ... byptr, count, rtad;
	JRST	dynstr;	! simulate call to dynstr;
erret:
      end "code";
usererr(0,1, "bad bytepointer ('" & cvos( byptr ) &
		") to aszstr, will return null" );
return( null );
end "aszstr";
DECL SIMPLE STRING procedure updstr( INTEGER byteptr, updated!byteptr );
DESR	Returns a string copy of the string that lies between byteptr
	and updated!byteptr.  That is, a string starting at the first
	character loaded by byptr, and continuing until the character
	pointed to by updated!byteptr.  (A standard TENEX string format
	used often for JSYS string returns).  Causes a continueable
	USERERR if the bytepointers are invalid.
;
begin "updstr" 
start!code "cod"	preload!with cvasc(0&1&2&3&4), cvasc(5&0&0&0&0);
			own integer array bcnt[0:1];
			define c=3, bycnt=4;
			label bperr;
	move	a,byteptr;		! get start byte pointer;
	pushj	p,bpchk;		! check it, ;
	 jrst	bperr;			!   bad (error);
	movem	a,byteptr;		! store fixed (possibly) ptr;
	move	c,a;			! protect copy of it;

	move	a,updated!byteptr;	! get finish byte pointer;
	pushj	p,bpchk;		! check it, ;
	 jrst	bperr;			!   bad (error);

	move	a,updated!byteptr;	! into acs;
	pushj	p,bpchk;
	 jrst	bperr;

	hrrzi	bycnt,(a);		! find difference in words;
	subi	bycnt,(c);
	imuli	bycnt,5;		! * 5 bytes/word;

	hrri	a,bcnt[0];		! get a pointer to character ;
	hrri	c,(a);			! count string, (using args);
	ildb	a,a;			! find out how many characters;
	ildb	c,c;			! were in words;
	addi	bycnt,(a);
	subi	bycnt,(c);
	movem	bycnt,updated!byteptr; ! set up for call to dynstr;
	jrst	dynstr;			! second arg is count, not ubp;
bperr:
      end "cod";
usererr( 0,1,"bad bytepointer supplied to updstr, will return null" &
	('15 & '12) & "  byteptr = '" & cvos( byteptr ) & 
	",  updated!byteptr = '" & cvos( updated!byteptr ) );
return( null );
end "updstr";

DECL simple integer procedure cmpstr( string first, second );
DESR	String comparison function.  If "first" is "greater" than
	"second" then the result is negative, if "less" then the
	result is positive, and if they are "equal" then the result
	is zero.  If the two strings are different, the absolute
	value of the result is the character position where they
	first differ.
	The "natural" use of this function is to compare it with 0
	using the relational test desired (eg: "strcomp(t1,t2) GEQ 0").
	The ordering function is the ASCII character order, with
	the end of a string supplying -1's for the comparison (in
	other words, essentially alphabetic, but without case mapping).
like:	for ch_ 1 step 1 while length(first)>0 and length(second)>0
	   do begin
		char1_ lop(first)
		char2_ lop(second)
		if char1 < char2 then return( -ch )
		if char1 > char2 then return( ch )
	      end
	if length(first)>0 then return( ch )
	if length(second)>0 then return( -ch )
	return(0)
;
start!code "cmpstr"
	define fc=1,sc=2, fch=3,sch=4;
	label gudlup,firstGone,chrcmp,secondGone,posret,negret,retfc;

	hrrzs	fc,-3(sp);	! get target count;
	hrrzs	sc,-1(sp);	! and source count;
				! (and set word for latter subtract);
	sojl	fc,firstGone;	! "first" count -1, leave if was null;
gudlup:
	sojl	sc,secondGone;	! "second" count -1, leave if finished;
	ildb	fch,-2(sp);	! get next character from "first";
	ildb	sch,0(sp);	! and next character from "second";
	cain	sch,0(fch);	! compare them;
	 sojge	fc,gudlup;	! keep going if equal and chars left;

	jumpge	fc,chrcmp;	! we stopped, if fc<0 then on count;
firstGone:
	jumpn	sc,negret;	! if second not empty, it's bigger;
	aoja	fc,retfc;	! otherwise, return 0 (-1+1);
chrcmp:	! character mismatch:  sch/fch order gives result's sign;
	caig	sch,0(fch);
secondGone:
posret:	exch	fc,-3(sp);
negret:	sub	fc,-3(sp);
retfc:
end "cmpstr";
DECL simple integer procedure subequ( string target, source );
DESR	Returns the position of target in source or 0 if no match.
	if subequ(t,s) then equ( t, s[subequ(t,s) for length(t)] ).
	A null target NEVER produces a match.
  like:   if length(target)=0 then return(0)
	  for i_ 1 step 1 until length(source)
		do if equ(target,source[i for length(target)])
		   then return(i)
	  return(0)
;
start!code
	define sc=1,tc=2, tch=3,ch1=4,ch2=5, spt=6,tpt=7;
	define !="Comment";
	label lup1,lup2, fail,good,good1,ret;

	hrrzs	tc,-3(sp);	! get target count;
	hrrzs	sc,-1(sp);	! and source count;
		! also: make simple numbers for lengths, constant strs;
		! for minimal interrupt problems;
	caig	tc,0(sc);	! longer target than source;
	 sosge	tc,-3(sp);	! or null length target;
	  jrst	fail;		! are both considered mismatches;
! Now we know that both byte pointers are good (ie at least 1-ch strs);
	ildb	tch,-2(sp);	! get first target character;
	subi	sc,0(tc);	! figure out how many matches to try;
				! 1 + length(source)-length(target);
! Now we are set.  Run along source looking for 1-char match;
lup1:	ildb	ch1,0(sp);	! lead character of source;
	caie	tch,0(ch1);	! stop going if match;
	 sojg	sc,lup1;	! or we can no longer match;

	jumpe	sc,ret;		! if we stopped on count, all done;
	jumpe	tc,good1;	! if the target was only 1 char long, ;
				!  then we have a match;
! first character of target matches, how about the others;
	move	tpt,-2(sp);	! get private byte pointers for target;
	move	spt,0(sp);	! and source (both point at match1);

lup2:	ildb	ch1,spt;	! pull one from each;
	ildb	ch2,tpt;
	cain	ch2,0(ch1);	! and loop until they dont match;
	 sojg	tc,lup2;	! or we have exhausted the target;

	jumpe	tc,good;	! if target exhausted, it was a match;
	move	tc,-3(sp);	! otherwise, reset the target count;
	sojg	sc,lup1;	! and go for next try on source;
				! unless no more (we fail totally);
fail:	setz	a,;		! return zero (failure);
	jrst	ret;
good:				! match sc=source chars trailing match;
	add	sc,-3(sp);	! +l(target)-1= l(source[* to inf]);
good1:	sub	sc,-1(sp);	! now get leading characters;
	subi	sc,1;		! since the first character is #1;
	movn	a,sc;		! convert to positive;
ret:
end;
DECL SIMPLE integer procedure strstf( INTEGER byptr; string str;
					boolean nonull(false) );
DESR	Deposits str into byptr via idpb.  If nonull is false, (which
	means that a trailing null is desired), then a null character
	(ASCII 0) is deposited past the last character in the string.
	Returns a bytepointer to the last character deposited from the
	string (not the trailing null), or 0 if byptr is invalid.
	This is useful for setting up JSYS calls that want either ASCIZ
	strings, or bytepointer and updated bytepointer values.  The
	return value is precisely the byte pointer that you want to
	use if you want to deposit another string after the first one.
	That is: strstf( strstf( byp, str1 ), str2 ) is the same as
	strstf( byp, str1 & str2 ), except the concatenation is not 
	actually performed.
;
start!code "strstf"	label movlup, movchk, bperr; define c=3, d=4;
	move	a,byptr;	! get start byte pointer;
	pushj	p,bpchk;	! check it, ;
	 jrst	bperr;		!   bad (error);
	move	b,(sp);		! str's byte pointer;
	hrrz	c,-1(sp);	! str's count;
	jrst	movchk;		! and go to check in loop;

movlup:	ildb	d,b;		! pick up byte from string;
	idpb	d,a;		! place it in output area;
movchk:	sojge	c,movlup;	! next byte (string still has chars);

	setz	d,;		! get null byte to deposit after string;
	move	b,a;		! get a copy of the now-updated byte;
	skipn	nonull;		! verify null byte to be deposited;
	 idpb	d,b;		! and deposit it (if called for);
				! Note: AC1 points to last REAL byte;

	skipa;			! not error exit, return in a now;
bperr:	 setz	a,;		! error, set return value to 0;
end "strstf";
! "string addition" data structure storage: ;

record!class string$buffer (
			record!pointer (string$buffer) next;
			integer spaceleft, bytepointer;
			string accumulate;
			safe integer array strbuf );

own record!pointer (string$buffer) active!buffers, father, current;
!	These two routines are internal to the "string addition" code;

simple boolean procedure findit( integer cat!chan );
desr	Given a 'string concatenation channel', set current to the
	associated record, and father to its predecessor (in case
	you want to delete it).  Return true if such a channel is
	found.
;
begin "findit"
father  _ null!record;
current _ active!buffers;

while cat!chan neq memory[location( current )] neq 0
   do begin
	father _ current;
	current _ string$buffer:next [father];
      end;
return( current neq null!record );
end "findit";


string procedure flush!current!buffer;
desr	Force the byte buffer in current empty (appending any buffered
	bytes to the "accumulate" field of current).  This returns the
	string which has been bufferred so far.
;
begin "flush!current!buffer"	integer buffersize, oldleft, byptr;

buffersize _ oldleft _ 5 * arrinfo( string$buffer:strbuf[current], 2 );
byptr _ point( 7, string$buffer:strbuf[current] [1], -1);

string$buffer:bytepointer [current] _ byptr;
string$buffer:spaceleft   [current] swap oldleft; 
return ( (string$buffer:accumulate [current] _
		string$buffer:accumulate [current] &
		constr( byptr, buffersize - oldleft ) )[2 to inf] );

end "flush!current!buffer";
decl integer procedure stropn( integer buffersize );
desr	Set up and return a new 'string concatenation channel'
;
begin "stropn"	integer array buffer [ 1 : 1 max (buffersize+4)%5 ];
current _ new!record (string$buffer); 
string$buffer:next	  [current] _ active!buffers;
string$buffer:accumulate  [current] _ "*";
string$buffer:spaceleft   [current] _ 5 * arrinfo( buffer, 2 ); 
string$buffer:bytepointer [current] _ point( 7, buffer[1], -1);

memory[location( string$buffer:strbuf[current] )] swap
					memory[location( buffer )];
	
active!buffers _ current; current _ null!record;
	
return( memory[location( active!buffers )] );
end "stropn";
decl procedure stradd( integer concat; string to!add );
desr	append to!add to the specified 'string concatenation channel'
;
if length( to!add ) then 
begin "stradd"		integer left;
if findit( concat )
 then if length(to!add) leq (left_ string$buffer:spaceleft [current])
	 then begin
		string$buffer:bytepointer [current] _ 
			strstf( string$buffer:bytepointer [current],
					to!add, true );
		string$buffer:spaceleft [current]_ left -length(to!add);
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] & to!add;
	      end
 else usererr(0,1, " stradd( unopened string concatenation channel ) ");
current_ father_ null!record;
end "stradd";
decl procedure strach( integer concat, character );
desr	append character to the specified 'string concatenation channel'
;
begin "strach"		integer left;
if findit( concat )
 then if (left_ string$buffer:spaceleft [current])
	 then begin
		idpb( character, string$buffer:bytepointer [current] );
		string$buffer:spaceleft [current]_ left -1;
	      end
	 else begin
		flush!current!buffer;
		string$buffer:accumulate [current] _
			string$buffer:accumulate [current] & character;
	      end
 else usererr(0,1, " strach( unopened string concatenation channel ) ");
current_ father_ null!record;
end "strach";
decl string procedure strcls( reference integer concat );
desr	If the 'string concatenation channel' is a legal value,
	and the channel is open, then close it, set concat to 0,
	and return its contents.  Otherwise set to concat -1 and
	return null.
	(legal concatenation channels are always positive integers)
;
begin "strcls"		string strcls;

if findit( concat )
 then begin	external record!pointer (any!class) procedure
		$rec$( integer op; record!pointer (any!class) r );
	strcls _ flush!current!buffer;
	if father
	 then string$buffer:next [father]_ string$buffer:next [current]
	 else active!buffers		 _ string$buffer:next [current];
	concat _ 0;
	$rec$(5, current);	! deallocate all storage for current, ;
				! including its buffer and string;
	current_ null!record;
      end
 else begin
	concat _ -1;
	strcls _ null;
      end;
father_ null!record;
return( strcls );
end "strcls";
decl simple string procedure strpek( integer concat );
desr	Peek at the contents of a 'string concatenation channel'
	NOTE: Don't do this too often, as it defeats the entire
	bufferring scheme that the 'string concatenation channel'
	code is meant to use.
;
begin "strpek"	string strpek;

if findit( concat )
 then strpek _ flush!current!buffer
 else begin
	strpek _ null;
	usererr(0,1, " STRPEK: unopened string concatenation channel " )
      end;
current_ father_ null!record;
return( strpek );
end "strpek";
decl simple integer procedure strlen( integer concat esr	return the number of characters stored in the specified
	'string concatenation channel' (-1 if the 'channel' is closed
	or invalid).
;
begin "strlen"	integer strlen;

if findit( concat )
 then strlen _ length(		string$buffer:accumulate [current] ) 
		+ 5 * arrinfo(	string$buffer:strbuf	 [current], 2)
		-		string$buffer:spaceleft  [current]
		- 1
! string.area + buffer.space - unused.buffer.space - length("*");
 else strlen _ -1;	! couldn't find the 'channel';
current_ father_ null!record;
return( strlen );
end "strlen";

end "strlib" . 

  Ct:t