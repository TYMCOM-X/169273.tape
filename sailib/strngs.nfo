$text RCHPTR;characterPosition_ RCHPTR( chan ).
characterPosition_ RCHPTR( chan );
	Returns the character position of the next character that an 
INPUT will examine (the character position of the first character of a 
file is 0).  This allows you to save a file position for later 
restoration with SCHPTR. 
	Chan is a text file channel number.  It must be open in mode 0 
or mode 1 (ie buffered ASCII text, 7-bit bytes).  Chan should only be in
use for input; buffered output will confuse it in the most exciting 
ways.  The channel should not be at the end-of-file either (results are 
not fully determined in this case, you may get -1 which indicates "at 
end of file", or you may get the character position of the mythical EOF 
character within the file).


$text SCHPTR;SCHPTR( chan, characterPosition ).
SCHPTR( chan, characterPosition );
	Sets the input side of the specified channel so that the next
character to be examined by INPUT will be the character at
characterPosition or to the end of the file if -1 is given as the
position (the position of the first character in a file is 0).  This
is basically a "restore file position" if called with the results of 
a previous RCHPTR.
	Chan is a text file channel number.  It must be open in mode 0
or mode 1 (ie buffered ASCII text, 7-bit bytes).  As in RCHPTR, Chan
should only be in use for input; buffered output may confuse it in the 
most exciting ways.  SCHPTR with positions not inside the file may lead 
to error messages or wierd behavior.  Channel-related variables BRK,EOF,
PAGE,LINE, and SOSNUM (see OPEN and SETPL) may be altered (note: the 
COUNT variable is preserved).


$text ASZSTR;"normalString"_ ASZSTR( byteSpecForAscizString ).
"normalString"_ ASZSTR( byteSpecForAscizString );
	Returns a string copy of the "ASCIZ" string pointed to by its 
argument (after the argument has been fixed up by "BYPOK").  That is, 
a string starting with the first character obtained by an "ILDB" 
instruction using the byte pointer, and continuing until (but not 
including) the first null character (ASCII 0) encountered.  (This 
format for strings is used by many JSYS'es).


$text BYPOK;sevenBitBytepointer_ BYPOK( byteSpec ).
sevenBitBytepointer_ BYPOK( byteSpec );
	Returns a 7-bit byte pointer suitable for the ILDB and IDPB
machine instructions (as POINT does) to the byte specified in the
call which must be a 'normal' 7-bit byte -- one of the following:
	point(7,word,-1), point(7,word, 6), point(7,word,13),
	point(7,word,20), point(7,word,27), point(7,word,34) .
   Besides normal byte pointers this procedure will also accept both 
location(word) and ( (-1 lsh 18) + location(word) ) as equivalent
to point(7,word,-1).  BYPOK will return 0 if byte.spec cannot be
coerced into the proper form (byte size wrong, specified byte is
not on normal byte boundaries, etc).  This is used by procedures 
such as CONSTR and ASZSTR to check and fix up their arguments, and 
is provided as a convenience for use by other programs.


$text STRCMP;signedPositionOfDifference_ STRCMP( "first", "second" ).
signedPositionOfDifference_ STRCMP( "first", "second" );
	String comparison function.  If "first" is "greater" than 
"second" then the result is negative, if "less" then the result is 
positive, and if they are "equal" then the result is zero.  If the two 
strings are different, the absolute value of the result is the character
position where they first differ.  STRCMP( "abcdfe", "abcdef" ) is 5 
("f" > "e").  The "natural" use of this function is to compare it with 0
using the relational test desired (eg: "strcomp(t1,t2) GEQ 0").  The 
ordering function is the ASCII character order, with the end of a string
supplying -1's for the comparison (in other words, essentially 
alphabetic, but without case mapping).

Like:	for ch_ 1 step 1 while length(first)>0 and length(second)>0
	   do begin
		char1_ lop(first)
		char2_ lop(second)
		if char1 < char2 then return( -ch )
		if char1 > char2 then return( ch )
	      end
	if length(first)>0 then return( ch )
	if length(second)>0 then return( -ch )
	return(0)


$text CONSTR;"dangerousString"_ CONSTR( byteSpec, desiredSize ).
"dangerousString"_ CONSTR( byteSpec, desiredSize );
	Returns a string with length 'desired.size' whose first 
character is the character ILDB(BYPOK(bytepointer)).  The resulting 
string is not subject to garbage collection (since SAIL thinks of it as 
a constant string).  The string returned actually points to the same 
location that 'byte.spec' points to, and this is actually a very fast 
procedure.  However, because the resultant string does not have its 
characters actually stored in 'string space', it will change value (not 
length) whenever the bytes pointed to change.  Hence, the string, (and 
all substrings taken from it) is extremely unstable -- be very careful 
when using this procedure.  Causes a continueable USERERR if the 
bytepointer or count are invalid.



$text DYNSTR;"normalString"_ DYNSTR( byteSpec, desiredSize ).
"normalString"_ DYNSTR( byteSpec, desiredSize );
	This is very much like CONSTR, except it returns a normal SAIL 
string which is a copy of the characters specified by 'byte.spec', and 
hence does not change along with the data pointed to.  If the warnings 
in CONSTR have scared you, this is probably what you want (although it 
is somewhat slower).  This also can cause a continueable USERERR if the 
bytepointer or count are invalid.


$text STRACH;STRACH( stringConcatChan, characterToAppend ).
STRACH( stringConcatChan, characterToAppend );
	This appends 'character.to.append' to the specified 'string 
   concatenation channel' (see the general explanation of string
   concatenation channels for more details).


$text STRADD;STRADD( stringConcatChan, "stringToAppend").
STRADD( stringConcatChan, "stringToAppend");
	This Appends to!add to the specified 'string concatenation
   channel', in approximately the same way that STRACH adds a single
   character. (see the general explanation of string concatenation
   channels for more details).


$text STRCLS;"accumulatedString"_ STRCLS( @stringConcatChanToClose ).
"accumulatedString"_ STRCLS( @stringConcatChanToClose );
	If the 'string concatenation channel' specified is open, then 
close it, deallocate all storage associated with it (in particular: the 
buffer), set the reference argument to 0, and return the string that has
been built.  If there is no open 'string concatenation channel' with 
the specified value, then set the reference argument to -1, and return 
null (this procedure will not complain if the argument is invalid). (see
the general explanation of string concatenation channels for more 
details).


$text STRLEN;AccumulatedLength_ STRLEN( stringConcatChan ).
AccumulatedLength_ STRLEN( stringConcatChan );
	This returns the number of characters placed in the 'string 
   concatenation channel' so far. (will not do any concatenation).
   (see the general explanation of string concatenation channels for
   more details).



$text STROPN;stringConcatChan_ STROPN( bufferSizeInBytes ).
stringConcatChan_ STROPN( bufferSizeInBytes );
	Set up and return a new 'string concatenation channel',
   with a concatenation buffer at least buffersize bytes long.
   (see the general explanation of string concatenation channels
   for more details).



$text STRPEK;"accumulatedSoFar"_ STRPEK( stringConcatChan ).
"accumulatedSoFar"_ STRPEK( stringConcatChan );
	Peek at the contents of a 'string concatenation channel'
   NOTE: Don't do this too often, as that defeats the entire
   bufferring scheme that the 'string concatenation channel'
   code is meant to use.  (See the general explanation of string
   concatenation channels for more details).



$text STRSTF;updPtr_ STRSTF( ptr, "text", NotAsciz(false) ).
updatedBytptr_ STRSTF( byteSpec, "to-deposit", NoClosingNull(false) );
	Deposits str into byptr via idpb.  If nonull is false, (which 
means that a trailing null is desired), then a null character (ASCII 0) 
is deposited past the last character in the string.  Returns a 
bytepointer to the last character deposited from the string (not the 
trailing null), or 0 if byptr is invalid.  This is useful for setting up
JSYS calls that want either ASCIZ strings, or bytepointer and updated 
bytepointer values.  The return value is precisely the byte pointer that
you want to use if you want to deposit another string after the first 
one.  That is: strstf( strstf( byp, str1 ), str2 ) is the same as
strstf( byp, str1 & str2 ), except the concatenation is not actually 
performed.


$text SUBEQU;targetPosition_ SUBEQU( "target", "source" ).
targetPosition_ SUBEQU( "target", "source" );
	Find the first occurence of "target" in "source".  If none
exists (or if the target is the null string), return 0.  Otherwise
return the character position of the first occurence of a match.
[eg:  subequ("ver","I am very tired") = 6].



$text UPDSTR;"normalString"_ UPDSTR( byteSpec, updatedByteSpec ).
"normalString"_ UPDSTR( byteSpec, updatedByteSpec );
	Returns a string copy of the string that lies between byteSpec
and updatedByteSpec.  That is, a string starting at the first character 
loaded by byptr, and continuing until the character pointed to by 
updatedByteSpec.  (A standard TENEX string format used often for JSYS 
string returns).  Causes a continueable USERERR if the bytepointers are 
invalid.

$text CATCHAN;general explanation of string concatenation channels.
general explanation of string concatenation channels:
	A string concatenation channel is not actually a channel in the 
normal SAIL sense at all, the name was chosen because the operations on 
them are very much like input/output operations. In many programs there 
are strings which go through a long series of append operations before 
they are ever examined.  This use of strings can cause a tremendous 
amount of overhead (especially as the strings that are being used to 
accumulate the characters get long) since most often the collecting 
string needs to be copied before the concatenation can take place.  This
increases the number of calls to the string garbage collector in 
addition to the amount of time that must be spent copying strings.  The 
string concaten- ation channel is intended to alleviate this problem by 
buffering concatenation requests, doing a few large concatenations 
rather than a large number of small ones.  The buffer size that you
specify in the STROPN command should be large with respect to the 
average length of the strings that you are going to append to it.
An example may help:
	instead of:
		t_s_null;
		for i _ 1 step 1 until 99
		   do begin  s_ s & i;  t_ t & "," & cvs(i);  end;
		comment uses 18945 bytes of string space;
	use:
		sc_stropen(50); tc_stropen(100);
		for i _ 1 step 1 until 99
		   do begin  strach(sc,i);  
			     strach(tc,",");  stradd(tc,cvs(i));  end;
		s_strcls(sc); t_strcls(tc);
		comment uses 937 bytes of string space;


	Both produce 387 bytes of string in s and t at the end.  This
difference is more dramatic than the time (or storage) actually saved 
(since there is some storage overhead for each 'channel'), but this 
example should demonstate why the use of this feature will help out 
string munching programs, and perhaps prevent some programs from 
spending the majority of their CPU time in SAIL's string garbage 
collector.  What the STRADD and STRACH routines do is place their 
arguments in the appropriate buffer as long as there is room, and 
concatenate an entire buffer plus any spillover when the buffer fills 
up.  Clearly you would save even more string area if you allocate a 
buffer that is larger than the length of the string that STRCLS will 
return, but this may be an unecessarily large space for a buffer, and 
you might wind up using up your storage for the buffers themselves.   A 
word of warning: STRPEK must first flush the buffer, so if you intend to
use it very often (say every few calls to STRADD or STRCH), you will 
probably be better off just going ahead and using the concatenation in 
the first place.  Also, if your chosen buffer size is smaller than the 
length of most of the things you wish to 'append' then all will do is 
add procedure call overhead to the concatenations that will actually be 
performed.  A 'string concatenation channel' will always be a short 
(less than 18 bits) positive integer, and there is no a priori 
restriction on the number of 'channel's you can have open at one time.


$text READBR;bitFlag_ READBR( table, @"breaks", @"omits", @"modes" ).
bitFlag_ READBR( table, @"breaks", @"omits", @"modes" );
	Reads the contents of a break table, and returns enough 
information to rebuild it.  Given a valid break table number, this 
returns a 3-bit flag:
	bit 33 (4) => break table copies string,
	bit 34 (2) => break table has been reserved
			(getbreak can't return this table)
	bit 35 (1) => break table has been initialized
			(break, omit, and mode are valid)
			(this should not be on if bit 34 isn't)
If the break table has been initialized (bit 35), then the three 
reference strings are set so that
		relbreak( table )
		setbreak( table, break, omit, mode )
will set table to exactly the same break table as it currently contains.
If the first character of mode (at the time of the procedure call) is 
either "x" or "X", then the mode will begin with "X" (breaks by 
eXclusion) when the procedure returns, otherwise the mode will begin 
with "I" (breaks by Inclusion).  Default modes are shown explicitly 
("IPSF", not "I"), and the mode letters are always in the same order:
	{I or X}, {P,N,L,or E}, {S,A,or R}, {F or K}, {Z (if applies)}
So, if this returns 3 or 7, then modes will be either 4 or 5 characters 
long.

$text RVSCAN;"result"_ RVSCAN( @"source", break!table, @brchar ).
"result"_ RVSCAN( @"source", break!table, @brchar );
	Behaves like the standard SAIL runtime 'SCAN', but backwards.
The break character disposition is analogous to SCAN, and this will 
attempt to use 'proper' substrings whenever possible (rather than 
copying the string body).  (Useful for removing blanks from the end of 
a line for example).  More precisely, it behaves very much like the 
following code (Although more efficient by far).

    string procedure rvscan( reference string s; integer table;
				reference integer brchar );
	begin
		string procedure reverse( string s );
		begin string r; r_null;
		while length(s) do r_ lop(s) & r;
		return(r);
		end;
	   string result;
	s_reverse(s);
	result_ scan(s,break!table,brchar);
	s_reverse(s);
	return( result );
	end;
  