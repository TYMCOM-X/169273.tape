entry map1cr,map2cr,getmap;
begin "page io"

define debugging(x) "<>"= <x>;

require "<><>" delimiters;
define ! = <comment>, r!p = <record!pointer>, n!r = <null!record>;

external integer !skip!;

define production(x) = <x>;
debugging(	redefine production(x) = <>;	);

simple procedure error( string complaint );
	usererr(0,1,complaint);
! require "pageio.ss1" source!file;
! contains:
	#class map1, map2, #(map1,map2) maplist
	bool inring( #(map1,map2) verify )
	link( #(map1,map2) nd )
	unlink( #(map1,map2) od )
	#(map1) map1cr( #i low1, up1, offset(0) )
	#(map2) map2cr( #i low1, up1, low2, up2, offset(0) )
	fixpage( #(map1,map2) toset,  #i vpage )
;
forward internal record!class map2( integer array a;
	integer ui; r!p (any!class) up; ! for the user;
	integer vpage, aryoffset; r!p (map2) left, rght;
	integer base, low2, up2, mult2, low1, up1, mult1, dim!size );

internal record!class map1( integer array a;
	integer ui; r!p (any!class) up; ! for the user;
	integer vpage, aryoffset; r!p (map1,map2) left, rght;
	integer base, low1, up1, mult1, dim!size );

internal record!class map2( integer array a;
	integer ui; r!p (any!class) up; ! for the user;
	integer vpage, aryoffset; r!p (map1,map2) left, rght;
	integer base, low2, up2, mult2, low1, up1, mult1, dim!size );

define	map!a = 1, map!vpage = 4, map!aryoffset = 5, map!base = 8,
	map1!aloc= 13, map2!aloc = 16;


r!p (map1,map2) maplist, frelist;
debugging( integer ring!size; )
boolean procedure inring( r!p (map1,map2) verify );
begin	! assumption: the ring "maplist" is properly constructed;
	r!p (map1,map2) chase;
if maplist=verify then return( verify neq null!record );
if map1:left [verify] = n!r or map1:rght [verify] = n!r
 then return( false );	! since a ring;
chase_ maplist;
while (chase_map1:rght [chase]) neq maplist
   do if chase=verify then return(true);
return(false);
end;
production(simple) procedure linkup( r!p (map1,map2) nd );
if maplist = null!record
 then begin
	debugging( if ring!size neq 0 then error("ring size");
		   ring!size_ 1; )
	map1:left [nd]_ nd;
	map1:rght [nd]_ nd;
	maplist_ nd;
      end
 else begin
	debugging( if ring!size <= 0 then error("ring size");
		   if inring(nd)
		    then begin error("double link"); return end;
		   ring!size_ ring!size+1; )
	map1:left [nd]_ map1:left [maplist];
	map1:rght [nd]_ maplist;
	map1:rght [map1:left [nd]]_nd;
	map1:left [maplist]_ nd;
      end;
production(simple) procedure unlink( r!p (map1,map2) od );
begin
debugging( if not inring(od)
	    then begin error("unlink out"); return end; )
maplist_ map1:left [od];
map1:rght [maplist]_ map1:rght [od];
map1:left [map1:rght [maplist]]_ maplist;
if maplist=od then maplist_ null!record;
	debugging( if ring!size <= 0 then error("ring size");
		   if ((ring!size_ ring!size-1)=0) neq (maplist=n!r)
		    then error("ring size"); )
map1:left[od]_ null!record; map1:rght[od]_ null!record;
end;
internal r!p (map1) procedure map1cr( integer low1, up1, offset(0) );
begin	integer size;	r!p (map1) nd1;
size_ up1-low1+1;
if size < 0 or offset < 0 or size+offset > 512
 then return( null!record );
nd1_ new!record(map1);
map1:low1 [nd1]_ low1; map1:up1 [nd1]_ up1; map1:mult1 [nd1]_ 1;
map1:dim!size [nd1]_ 1 lsh 18 + size;
map1:aryoffset [nd1]_ offset-low1;
map1:base [nd1]_ '377000 + map1:aryoffset [nd1];
	! (point where likely safe);
map1:vpage [nd1]_ -1;		! list as illegal virtual page;
linkup(nd1);
return(nd1);
end;


internal r!p (map2) procedure map2cr( integer low1, up1,
					low2, up2, offset(0) );
begin	integer size1, size;	r!p (map2) nd2;
size1_ 1+up2-low2;
size_ size1 * (1+up1-low1);
if size1 < 0 or size < 0 or offset < 0 or size+offset > 512
 then return( null!record );
nd2_ new!record(map2);
map2:low1 [nd2]_ low1; map2:up1 [nd2]_ up1; map2:mult1 [nd2]_ size1;
map2:low2 [nd2]_ low2; map2:up2 [nd2]_ up2; map2:mult2 [nd2]_ 1;
map2:dim!size [nd2]_ 2 lsh 18 + size;
map2:aryoffset [nd2]_ offset-low1*size-low2;
map2:base [nd2]_ '377000 + map2:aryoffset [nd2];
	! (point where likely safe);
map2:vpage [nd2]_ -1;		! list as illegal virtual page;
linkup(nd2);
return(nd2);
end;
simple procedure fixpage( r!p (map1,map2) toset; integer vpage );
start!code		define acA=1,acB=2,acC=3;
			label clear, exit;
			protect!acs acA,acB,acC;
	skipn	acA,toset;
	 jrst	exit;	! argghhh null!record, don't do a thing;
! check to make sure virtual page is ok;
	skipl	acB,vpage;
	cail	acB,512;
	  jrst	clear;	! invalid page, clear record's data;
! list as the current contents of the pointer;
	movem	acB,map!vpage(acA);	! mark which page this is;
! make the array descriptor point within the page;
	lsh	acB,9;
	add	acB,map!aryoffset(acA); ! set up "virtual a[0]";
	movem	acB,map!base(acA);
! and finally point array field at array descriptor;
	movei	acB,map1;	! now point array field at faked;
	movei	acC,map1!aloc(acA);	! array (assume map1);
	came	acB,(acA);		! was it right?;
	 movei	acC,map2!aloc(acA);	!  no- get map2 array dsc addr;
	movem	acC,map!a(acA); ! and place in array field;
	jrst	exit;

clear:	movei	acB,512;
	movem	acB,map!vpage(acA);	! put invalid page as page;
	setzb	acA,map!a(acA); 	! and clear array field;
					! (and make retval false);
exit:
end;
require "(DANIELSS)MAPCAL.REL" load!module;
! these are the actual page manipulation procedures;

external integer procedure filemn( integer chan, FilePage, command );
! 0 => create (FilePage=-1 means at end), 1 => delete, 2 => remove
;
external integer procedure coremn( integer CountPage, command );
! 0 => status, 1 => preref, 2 => start validate, 3 => validate (wait)
  4-7 => delete (4 + (2 for clear) + (1 for refclear))
  9-11 => create (8 + (1 for Read, 2 for Cow, 3 for Write))
  13-15 => set protection (12 + (1 for Read, 2 for Cow, 3 for Write))
;
external integer procedure filmap( integer CountPage, FilePage,
					chan, command );
! 1 => map in "Read", 2 => map in "COW", 3 => map in "Write"
;
! require "pageio.ss2" source!file;
! contains:
	contents[], refcount[], bottom, available, inuse
	i# getfree( i# howmany(1) )
	i# findpages( i# code, howmany(1) )
	i# discountpages( i# count!vpage )
	i# setcodes( i# count!vpage, code )
;
preload!with [512] -1; own safe integer array contents[0:511];
preload!with [512] -1;	own safe integer array refcount[0:511];

own integer bottom, available, inuse;

! masks for contents word;
define	m#fpage= '000777777777,
	m#noshare= <(1 lsh 35)>,
	m#prot= 3 lsh 27;
define r#prot(code)= <(((code) land m#prot) lsh -27)>;
simple internal integer procedure allow( integer firstpage, lastpage );
begin	integer oldav;
oldav_ available;
if not (512 > lastpage >= firstpage > 0) then return(-1);
for lastpage_ lastpage step -1 until firstpage
 do if refcount[lastpage]=-1 and 0 = coremn(lastpage,0)
	 then begin
		if contents[lastpage] then available_ available+1;
		contents[lastpage]_0;	! mark it available;
		bottom_ bottom min lastpage;
	      end;
return(available-oldav);
end;


simple procedure allowon;
begin arrclr(refcount,-1); arrclr(contents,-1); ! mark unused, unknown;
	bottom_512; available_inuse_0; allow(500,511); end;
  require allowon initialization[0];
simple integer procedure getfree( integer howmany(1) );
! returns the bottom page number of a sequence of private empty pages;
! returns 0 if it can't find any (or on argument error);
begin	integer base, p;
if not (0 < howmany < 512) then return(0);
for base_ 512-howmany step -howmany until bottom
   do begin "block look"
	for p_ 0 step 1 until howmany-1
	 do if contents[base+p] neq 0
		 then begin
			base_base+p;
			continue "block look";
		      end;
	for p_howmany-1 step -1 until 0
	   do begin contents[base+p]_ m#noshare; ! private access;
		if -1 neq refcount[base+p] then error("REFCOUNT");
		refcount[base+p]_ 0;
	      end;
	inuse_ inuse+howmany;
	return( base );
      end "block look";
return(0);
end;
simple integer procedure findpages( integer code, howmany(1) );
! returns the bottom page number of a sequence of pages with code...;
! returns -1 if it can't find any (or on argument error);
begin	integer base, p;
if not( (0 < howmany < 512) and
	(0 < (code land m#fpage) leq (m#fpage+1)-howmany) )
 then return(-1);
for base_ 512-howmany step -howmany until bottom
   do begin "block look"
	for p_ 0 step 1 until howmany-1
	 do if contents[base+p] neq code+p
		 then begin
			if (code xor contents[base+p])
			    land (lnot m#fpage) = 0 = p
			 and (p_ (contents[base+p] land m#fpage)
				 - (code land m#fpage)) < howmany
			 then base_ base+p;
			continue "block look";
		      end;
	for p_howmany-1 step -1 until 0
	   do begin
		if 0 geq (refcount[base+p]_ refcount[base+p]+ 1)
		 then error("REFCOUNT");
	      end;
	return( base );
      end "block look";
return(-1);
end;
simple integer procedure discountpages( integer CountVpage );
! returns the number of pages actually removed from core (unmapped);
! returns -1 if the arguments are invalid;
begin		integer dpage, page, howmany, removed;
howmany_ 1 max (CountVpage lsh -18); page_ CountVpage land '777777;
if not 0 < page < page+howmany leq 512 then return(-1);
removed_ 0;
for dpage_ page+howmany-1 step -1 until page
   do if (refcount[dpage]_ refcount[dpage]-1) < 0
	 then begin
		if refcount[dpage] < -1 then error("REFCOUNT");
		if contents[dpage] land m#prot
		 then if coremn( dpage, 4 )
			then error( "REMOVE: data not there" );
			! coremn( vp,4 ) = delete page from core;
		contents[dpage]_ 0;
		removed_ removed+1;
	      end;
inuse_ inuse-removed;
return( removed );
end;
simple integer procedure setcodes( integer CountVpage, code );
! sets contents for described pages to code, code+1, ...;
! returns number of pages that were -1 contents;
! returns -1 if invalid arguments;
begin		integer count, page, howmany;
howmany_ 1 max (CountVpage lsh -18); page_ CountVpage land '777777;
if not ( (0 < page < page+howmany leq 512) and
	 (0 < code land m#fpage leq (m#fpage+1)-howmany) )
 then return(-1);
count_ 0;
for howmany_ howmany-1 step -1 until 0
   do begin
	if contents[page+howmany] = -1 then count_ count+1;
	contents[page+howmany]_ code + howmany;
      end;
end;
simple integer procedure MarkExclusive( integer code, mask );
! mark all page entries whose masked bits match code "exclusive"
! (typically used before closing a channel or deleting a page)
! returns the number of pages so marked.
;
begin	integer how!many, page;
code_ code land mask;	! equality check will be nonsense otherwise;
if code=0 then return(-1);	! this will match too often!!;
how!many_ 0;
for page_ bottom step 1 until 511
   do if contents[page] land mask = code
	 then begin contents[page]_contents[page] lor m#noshare;
		how!many_ how!many + 1;
		debugging( if refcount[page]<0
			 then error("unreferenced with contents?"); )
	      end;
return(how!many);
end;
! require "pageio.ss4" source!file;
! contains:
	bool findhere( #(map1,map2) holder, i# code )
	#int getmap( #(map1,map2) holder, #int command, chan, page )
;
boolean procedure findhere( r!p (map1,map2) holder; integer code );
begin	integer hpage, npage;
hpage_ map1:vpage [holder];
if 0<hpage<512 and contents[hpage]=code then return(true);
	! ie want to get in current contents;

if 0>(npage_findpages(code))
	! ie can't find contents in core, ;
 and (0<hpage<512) and refcount[hpage]=1
	! current page is valid and ours alone, ;
 and (contents[hpage] xor code) lor m#prot = m#prot
	! current contents are correct except for the protection code;
 and 0 <= coremn( hpage, 12 + r#prot(code))
	! and we successfully changed the protection;
	then begin contents[hpage]_ code; return(true); end;

if 0<hpage<512 then discountpages(hpage); ! throw away contents;
fixpage( holder, npage );	! mark (or clear) new contents;
return( npage >= 0 );
end;
integer procedure make!code( integer chan, page, protection );
if (0 <= chan < 32)
 and (0 < page < (1 ash 27))
 and (0 < protection < 4)
 then return( (((chan lsh 2) lor protection) lsh 27) lor page )
 else return(0);
internal recursive integer procedure getMap( r!p (map1,map2) holder;
			  integer option("S"), chan(2), page(1) );
!		Perform mapping operation "option":
		"R" map in file page with read protection
		"C" map in file page with copy-on-write protection
		"W" map in file page with read/write protection
		"N" create a new file page, and perform "W" operation
			(page=-1 => at end, page=-2 => anywhere)
		"O" like "N", but wil map existing page if there is one
		"E" map in file page read/write with exclusive access
			(no page-sharing for identical chan-page specs)
		"D" delete specified page from file

		"V" start validation on page associated with holder
		"Y" perform validation on page associated with holder,
			and wait until validation is complete
		"P" pre-reference page associated with holder
		"U" disassociate page (if any) associated with holder
			and unmap it if this is the last association
		"S" read status of page associated with holder
		"K" count associations with holder's page
		"X" like "U", but smashes all associations and unmaps
			(this can be dangerous during processes)
		"Z" zap holder ("U" then return holder to free list)
		"F" count associations with pages from chan
			(except "E" type associations)
			(if page=-2 then smash all such associations)
;
begin	boolean oldpoll; external boolean nopoll;
	integer vpage, command, code;
	simple procedure flip!poll; oldpoll swap nopoll;
	cleanup flip!poll;
oldpoll_ true; oldpoll swap nopoll;

if "F" neq (command_ option land '137) neq "D"
 then if holder=null!record
debugging( or not inring(holder) )
 then begin error("GETMAP: invalid page holder"); return(-1); end
 else if not(0 < (vpage_map1:vpage[holder]) < 512) then vpage_0;

case command of
 begin "cases"
["K"]	return( if vpage then refcount[vpage] else -1 );
else	begin error("GETMAP: bad option: " & option ); return(-1); end;
["V"]["Y"]["P"]["S"]
	begin
	code_ if vpage=0 then -1 else coremn( vpage,
			if command="S" then 0
				else if command="P" then 1
				else if command="V" then 2 else 3 );
	return( if command="P" and 0=code land ('377777777000)
			then code lsh -35 else code );
	! necessary because pre-reference sets the *%!@? sign bit;
	end;
["U"]["Z"]
      begin
	if vpage then discountpages(vpage);
	fixpage( holder, -1 );
	if command="Z" then unlink(holder);
	return( 0 );
      end;
["N"]["O"]
["R"]["C"]["W"]
      begin	integer prot, t;
	if command="N" or command="O"
	 then if (t_ filemn(chan, page, 0)) > 0
		 then page_t
		 else if command="N" then return(t);
	prot_ if command="R" then 1 else if command="C" then 2 else 3;
	if 0 = code_ make!code(chan,page,prot) then return(-1);
	if command = "C" then option _ option xor '40; ! switch case;
	if option <= "Z"	! uppercase option says sharing ok;
	 then begin if findhere(holder,code) then return(page); end
	 else if vpage
	    then begin discountpages(vpage); fixpage(holder,-1); end;
	  ! (that removed any contents of holder);
	if 0 = vpage_ getfree then return(-3);	! no more storage;
	fixpage(holder,vpage);
	if t_filmap( vpage, page, chan, prot )	! couldn't map;
	 then begin
		discountPages(vpage);
		fixpage(holder,-1);
		return(t);
	      end;
	if not ("C" neq code neq "E") then code_code lor m#noshare;
	setcodes( vpage, code );
	coremn( vpage, 1 );	! do a pre-reference to start it in;
	return( page );
      end;
["D"]
      begin
	if 0=code_ make!code(chan,page,1)
	 then return(-1);	! invalid channel or page;
	MarkExclusive( code, lnot(m#prot) );
	return( filemn(chan,page,1) ); ! page or <=0 if error;
      end;
["F"]
      begin
	if 0=code_ make!code(chan,if page=-1 then 1 else page,1)
	 then return(-1);	! invalid channel or page;
	return( MarkExclusive( code,
		    if page =-1 then lnot(m#prot lor m#fpage)
		     else lnot(m#prot) ) );
      end
end "cases";
error( "GETMAP dropped through?" );
return(-10);
end;
end "page io"

