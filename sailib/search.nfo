$menu SEARCH;Multiple string search.
*(sailib)search.nfo:FSM;Multiple string search overview.
*(sailib)search.nfo:MAKFSM;Construct a Finite State Machine.
*(sailib)search.nfo:USEFSM;Perform search on buffer.
*(sailib)search.nfo:USEFST;Perform search on string.

$text SEARCH;Multiple string search.
    To use the functions, include the SAIL statement:
	REQUIRE "(SAILIB)SEARCH.REQ" SOURCE!FILE;
    in your program source at the declaration level.
Functions provided:

    (fsm)_ MAKFSM( array equivs, @(any!class) find );
    (any!class)_ USEFSM( (fsm) state, @count, @bytepointer );
    (any!class)_ USEFST( (fsm) state, @"datastr" );
    (fsm)_ MKSFSM( array equivs, @set targetSet, boolean usePnames );
    set_ USSFSM( (fsm) state, @count, @bytepointer );
    set_ USSFSS( (fsm) state, @"datastr" );


$text FSM;Multiple string search overview.
	These are three procedures which provide a multiple substring
search capability for SAIL programs.  The search characteristics are 
relatively high storage and setup costs (though these are certainly not
excessive) and an extremely low use cost.  Typical uses would be for 
searches of large bodies of text for a number of targets (for example, 
a document search system where several requests are pooled, run 
together, and the results are then distributed to the requestors). 

	The speed of the search is attained by constructing a finite 
state machine which is interpreted for the actual search.  The machine 
only passes each character to be searched once, having decided what to 
do during the construction phase of the program.  Features available 
include having completely ignorable characters (typically an ASCII 0 
would fall in this category), and treating sets of characters as 
equivalent (eg regarding upper and lower case characters as identical).
Noteable for their absense are any form of wild-card characters (there 
is no room to compactly express them in the automaton, and the storage 
requirements would mushroom with such a feature).

	You will need at least one record!class in order to communicate
your targets to the automata constructor (MAKFSM).  It (they) must have
the first three fields arranged as follows:

 first: STRING (a typical example of the string this target represents)
	This field is only examined by MAKFSM, it works with its own 
	copy during construction.
 second: RECORD!POINTER (a link field that MAKFSM uses to construct
	linkages to inform you about relationships among the various 
	targets that you constructed.)  There is no restriction on the 
	contents of this field when you call MAKFSM, but any 
	information there will be destroyed before it returns (this is 
	not guaranteed in the case of errors detected by MAKFSM).  This
	field is used for all sorts of nefarious purposes during MAKFSM,
	but, when it is done, you may destroy the contents (at the cost
	of losing some information).
 third: RECORD!POINTER (a link field that allows you to hand a list of
	of targets to MAKFSM in a single procedure call).  This field 
	is also only read by MAKFSM, but the linkage must eventually 
	terminate with null!record in this field (otherwise MAKFSM will
	never terminate).
  These fields may have any name you like (if you have more than one
kind of record!class for your targets, they may even be named 
differently in the different record!classes), but they must exist in 
precisely this order.  For the purposes of explaining the operation
of the procedures, I'll call them NAME, BACKP, and LINK, respectively.
After those three, MAKFSM doesn't care what the rest of your record
looks like.  WARNING: do not explicitly delete any records that you
told MAKFSM about without first deleting the state machine that you
had it construct (an exception is "null" string records as explained
below).



declarations:

EXTERNAL RECORD!CLASS Fsm ( INTEGER State0, State );
	This is not in fact the entire fsm record, but does include the
two fields that you need to use.  "State" is the current state of the 
machine stored in the record, and "State0" is the state which represents
no knowledge about the character stream.  When an automaton is first 
constructed, the "State" field is set to the contents of the "State0" 
field, and whenever you wish to start (not continue) a search, you 
should reset "State" to the "State0" value.  If you don't, you may be 
embarassed to find that a substring has been detected which is in 
neither of the searched character streams, but would exist had they been
concatenated (like finding "grandad" by searching two different strings 
"it's grand" and "daddy").  The "State" field really does contain the 
only machine state information, and you may save its contents in some 
integer, use the machine for some other search, restore the state field,
and proceed with the search as if it had not been interrupted.



$text MAKFSM;Construct a Finite State Machine.
(Fsm)_ MAKFSM( ARRAY Equivs, @(ANY!CLASS) Find );
EXTERNAL RECORD!POINTER (Fsm) PROCEDURE MakFsm( INTEGER ARRAY Equivs;
			REFERENCE RECORD!POINTER (ANY!CLASS) Find );
	This builds the state machine form a set of targets.  "Equivs" 
is an integer array with bounds that must include [-1:127], and which 
contains some permutation of those numbers.  This contains information 
about which characters are to be treated as equivalent, and which are to
 be ignored.  For any character which is to be considered unique, the 
entry in Equivs at its ASCII code should be that number.  For any set of
characters which are to be considered equivalent, the entry 
corresponding to first of them should contain the ASCII for the second; 
for the second, the third; ... and the last of the group should contain 
the ASCII for the first (thus forming a loop).  The reason -1 is there, 
is to provide a way to indicate ignore characters.  Simply treat -1 as 
if it were ASCII, and make any characters to be ignored equivalent to 
it.  Note that a table which contains -1 at entry -1 will ignore no 
characters; one that has -1,0 for elements -1 and 0 respectively will 
ignore only nulls, and so on.  Suggestion: use the "swap" operator on a 
table that has i at Equivs[i], and you will never create an invalid 
table.

	"Find" is a linked list of the target substrings (as typical 
matches) linked on the "LINK" field, with a typical example of the 
string in the "NAME" field.  The string in the "NAME" field may contain
omit characters, MAKFSM will notice that and produce a table that will 
find that string (and anything like it which doesn't contain the omit 
characters).  It is pointers to these records that the search routines 
return, so you may well want to keep other information in them.

	If some error in the arguments is detected (eg Equivs is not 
valid) NULL!RECORD is returned, and the state of "Find" is not 
necessarily defined.  All of the target records are examined, and a 
linked list on field "BACKP" is created of those records which have no 
string specified after ignoring the "ignore characters".  That linked
list replaces "Find", and if there are no other records, MAKFSM will 
also return NULL!RECORD.  A state machine will then be built to 
recognize the remaining strings, and the other "BACKP" links are formed.
For any two of the remaining target records R and S, if R is a "proper 
tail" of S then there is a "BACKP" link from R that will eventually 
reach S.  If R and S represent the same string (after considering the 
effect of applying Equivs), then one (and only one) of them will have a 
"BACKP" link that reaches the other.  If R has no "proper tail", and 
either it is not "equivalent" to another target (in the sense of the 
previous sentence), or has been chosen as the inferior of all targets 
which are "equivalent" to it, then its "BACKP" field will be 
NULL!RECORD.  All of this means to say that, for any record!pointer R: 
its "BACKP" field terminates, and anything along the linkage has been 
recognized if R has been recognized.  In fact, the "length" (not 
counting ignores) of the string represented by anything on R's "BACKP" 
chain will be less than or equal to R's "length".  MAKFSM then cleans up
some of its mess, and returns a RECORD!POINTER to a state machine which 
will "recognize" all of the targets not already placed back into "Find" 
(which should always be recognized).
	If you have been confused by this explanation, very simply:
If MAKFSM finds some trouble, or nothing to do, it returns NULL!RECORD.
Otherwise, it makes a list of ignores for you in "Find", and constructs
a ready-to-run machine which it returns to you.



$text USEFSM;Perform search on buffer.
(ANY!CLASS)_ USEFSM( (Fsm) State, @Count, @Bytepointer );
EXTERNAL RECORD!POINTER (ANY!CLASS) PROCEDURE UseFsm(
			RECORD!POINTER (Fsm) State;
			REFERENCE INTEGER Count, Bytepointer );
	This is the actual searcher.  Given a machine that MAKFSM made 
(which hasn't been mangled by some other program), and a stream of data 
specified by count and bytepointer, this advances along the data with 
ILDB's until either the end of buffer is encountered (count is 
decremented just before each data character is passed over, and end-of-
buffer is when count goes negative) or some "target" just had its last 
character seen.  If the end-of-buffer was reached, NULL!RECORD is 
returned.  If it was a recognition, a RECORD!POINTER to one of the 
records that MAKFSM got is returned.  If a RECORD!POINTER is returned, 
then you should consider "found" the specified target and all targets on
 the "BACKP" linked list (that is, the list as of when MAKFSM returned 
this particular machine --I didn't change it, you must have).  In either
case, "Count" will be zero or negative if there are no characters left 
in the buffer, "Bytepointer" will be ready to "ILDB" the next byte (if 
any), and the machine will be ready to proceed. (to wit: you can 
immediately re-issue the same call, and everything will be set to go.)

Note: "Bytepointer" is not checked, and everything expects to get
numbers in the interval [0,127] when an ILDB is done.  If you give it
a bytepointer 8 bits wide or larger, you are just asking for trouble.



$text USEFST;Perform search on string.
(ANY!CLASS)_ USEFST( (Fsm) State, @"Strdata" );
EXTERNAL RECORD!POINTER (ANY!CLASS) PROCEDURE UseFst(
			RECORD!POINTER (Fsm) State;
			REFERENCE STRING Strdata );
	This is like UseFsm, only it uses a string for the stream of
data instead of a count and bytepointer.  The passed protion of the
string is simply gone (unlike SCAN), so if you want to look at what
was passed, save "Strdata" before the call to MakFst.  


   