
"normal-string"_	ASZSTR( byte.spec.for.asciz.string )
	Returns a string copy of the "ASCIZ" string pointed to by 
   its argument (after the argument has been fixed up by "BYPOK").
   That is, a string starting with the first character obtained by 
   an "ILDB" instruction using the byte pointer, and continuing
   until (but not including) the first null character (ASCII 0)
   encountered.  (This format for strings is used by many JSYS'es).

seven.bit.bytepointer_	BYPOK( byte.spec )
	Returns a 7-bit byte pointer suitable for the ILDB and IDPB
   machine instructions (as POINT does) to the byte specified in the
   call which must be a 'normal' 7-bit byte -- one of the following:
	point(7,word,-1), point(7,word, 6), point(7,word,13),
	point(7,word,20), point(7,word,27), point(7,word,34) .
   Besides normal byte pointers this procedure will also accept both 
   location(word) and ( (-1 lsh 18) + location(word) ) as equivalent
   to point(7,word,-1).  BYPOK will return 0 if byte.spec cannot be
   coerced into the proper form (byte size wrong, specified byte is
   not on normal byte boundaries, etc).  This is used by procedures 
   such as CONSTR and ASZSTR to check and fix up their arguments, and 
   is provided as a convenience for use by other programs.

"dangerous-string"_	CONSTR( byte.spec, desired.size )
	returns a string with length 'desired.size' whose first
   character is the character ILDB(BYPOK(bytepointer)).  The
   resulting string is not subject to garbage collection (since
   SAIL thinks of it as a constant string).  The string returned
   actually points to the same location that 'byte.spec' points to,
   and this is actually a very fast procedure.  However, because the
   resultant string does not have its characters actually stored in 
   'string space', it will change value (not length) whenever the
   bytes pointed to change.  Hence, the string, (and all substrings
   taken from it) is extremely unstable -- be very careful when using
   this procedure.  Causes a continueable USERERR if the bytepointer
   or count are invalid.

"normal-string"_	DYNSTR( byte.spec, desired.size ) 
	This is very much like CONSTR, except it returns a normal
   SAIL string which is a copy of the characters specified by
   'byte.spec', and hence does not change along with the data
   pointed to.  If the warnings in CONSTR have scared you, this 
   is probably what you want (although it is somewhat slower).
   This also can cause a continueable USERERR if the bytepointer
   or count are invalid.
STRACH( string.concat.chan, character.to.append )
	This appends 'character.to.append' to the specified 'string 
   concatenation channel' (see the general explanation of string
   concatenation channels for more details).

STRADD( string.concat.chan, "string-to-append")
	This Appends to!add to the specified 'string concatenation
   channel', in approximately the same way that STRACH adds a single
   character. (see the general explanation of string concatenation
   channels for more details).

"accumulated-string"_	STRCLS( @string.concat.chan.to.close )
	If the 'string concatenation channel' specified is open,
   then close it, deallocate all storage associated with it (in
   particular: the buffer), set the reference argument to 0, and
   return the string that has been built.  If there is no open
   'string concatenation channel' with the specified value, then
   set the reference argument to -1, and return null (this procedure
   will not complain if the argument is invalid). (see the general
   explanation of string concatenation channels for more details).

accumulated.length_	STRLEN( string.concat.chan )
	This returns the number of characters placed in the 'string 
   concatenation channel' so far. (will not do any concatenation).
   (see the general explanation of string concatenation channels for
   more details).

string.concat.chan_	STROPN( buffer.size.in.bytes )
	Set up and return a new 'string concatenation channel',
   with a concatenation buffer at least buffersize bytes long.
   (see the general explanation of string concatenation channels
   for more details).

"accumulated-so-far"_	STRPEK( string.concat.chan ) 
	Peek at the contents of a 'string concatenation channel'
   NOTE: Don't do this too often, as that defeats the entire
   bufferring scheme that the 'string concatenation channel'
   code is meant to use.  (See the general explanation of string
   concatenation channels for more details).

"normal-string"_	UPDSTR( byte.spec, updated.byte.spec )
	Returns a string copy of the string that lies between byteptr
   and updated!byteptr.  That is, a string starting at the first
   character loaded by byptr, and continuing until the character
   pointed to by updated!byteptr.  (A standard TENEX string format
   used often for JSYS string returns).  Causes a continueable
   USERERR if the bytepointers are invalid.
updated.bytptr_		STRSTF( byte.spec, "to-deposit",
				suppress.asciz.closing.null(false) )
	Deposits str into byptr via idpb.  If nonull is false, (which
   means that a trailing null is desired), then a null character
   (ASCII 0) is deposited past the last character in the string.
   Returns a bytepointer to the last character deposited from the
   string (not the trailing null), or 0 if byptr is invalid.
   This is useful for setting up JSYS calls that want either ASCIZ
   strings, or bytepointer and updated bytepointer values.  The
   return value is precisely the byte pointer that you want to
   use if you want to deposit another string after the first one.
   That is: strstf( strstf( byp, str1 ), str2 ) is the same as
   strstf( byp, str1 & str2 ), except the concatenation is not 
   actually performed.

general explanation of string concatenation channels:
	A string concatenation channel is not actually a channel in
   the normal SAIL sense at all, the name was chosen because the
   operations on them are very much like input/output operations. 
   In many programs there are strings which go through a long series
   of append operations before they are ever examined.  This use of
   strings can cause a tremendous amount of overhead (especially as
   the strings that are being used to accumulate the characters get
   long) since most often the collecting string needs to be copied
   before the concatenation can take place.  This increases the number
   of calls to the string garbage collector in addition to the amount
   of time that must be spent copying strings.  The string concaten-
   ation channel is intended to alleviate this problem by buffering
   concatenation requests, doing a few large concatenations rather
   than a large number of small ones.  The buffer size that you
   specify in the STROPN command should be large with respect to the
   average length of the strings that you are going to append to it.
   An example may help:
	instead of:
		t_s_null;
		for i _ 1 step 1 until 99
		   do begin  s_ s & i;  t_ t & "," & cvs(i);  end;
		comment uses 18945 bytes of string space;
	use:
		sc_stropen(50); tc_stropen(100);
		for i _ 1 step 1 until 99
		   do begin  strach(sc,i);  
			     strach(tc,",");  stradd(tc,cvs(i));  end;
		s_strcls(sc); t_strcls(tc);
		comment uses 937 bytes of string space;
	Both produce 387 bytes of string in s and t at the end.  This
   difference is more dramatic than the time (or storage) actually
   saved (since there is some storage overhead for each 'channel'),
   but this example should demonstate why the use of this feature 
   will help out string munching programs, and perhaps prevent some 
   programs from spending the majority of their CPU time in SAIL's 
   string garbage collector.  What the STRADD and STRACH routines do
   is place their arguments in the appropriate buffer as long as there
   is room, and concatenate an entire buffer plus any spillover when
   the buffer fills up.  Clearly you would save even more string area
   if you allocate a buffer that is larger than the length of the
   string that STRCLS will return, but this may be an unecessarily
   large space for a buffer, and you might wind up using up your
   storage for the buffers themselves.   A word of warning: STRPEK
   must first flush the buffer, so if you intend to use it very often
   (say every few calls to STRADD or STRCH), you will probably be
   better off just going ahead and using the concatenation in the
   first place.  Also, if your chosen buffer size is smaller than 
   the length of most of the things you wish to 'append' then all
   will do is add procedure call overhead to the concatenations
   that will actually be performed.  A 'string concatenation channel'
   will always be a short (less than 18 bits) positive integer, and
   there is no a priori restriction on the number of 'channel's you
   can have open at one time.

                                                                                                                                                                                                           