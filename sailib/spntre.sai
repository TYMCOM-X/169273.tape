COMMENT	takes a file with the following format: 
an undirected graph as a list of edge triples like:
		headName, TailName, Cost
	    [whitespace and/or puctuation may separate]
	list ends with either End-Of-File or "0" as headName
	names consists of letters and digits (case matters)
		see "letters" to change the alphabet
	costs are REAL numbers (ie floating point -- got with REALSCAN),
		and negative values will not work correctly.
Output is a list of the included edges as
	firstEnd:lastEnd(edgeCost)
;
BEGIN "SPNTRE"
   REQUIRE 10000 NEW!ITEMS;
   REQUIRE 10000 PNAMES;
   REQUIRE "(SAILIB)ASSERT.SAI" source!file;
   REQUIRE "[][]" delimiters;
   define crlf=[('15&'12)];

   ITEM IsElement; 
	COMMENT set membership relation name: (IsElement,elt,set);

record!class segment ( record!pointer(segment) lkid, rkid;
			integer dist; real cost; itemvar source, dest );

define	priority!queue = [record!pointer(segment)]
	,!left=[segment:lkid]
	,!right=[segment:rkid]
	,!dist=[segment:dist]
	,comparison(x,y)= [ segment:cost[x] LEQ segment:cost[y] ]
	;

priority!queue edges;  COMMENT the priority queue of edges of the graph;
COMMENT was: require "prique.sai" source!file;

COMMENT		should define these macros: 
   priority!queue = "record!pointer(priority!queue!class!name)"
   !left = "priority!queue!class!name:left!pointer!field"
   !right= "priority!queue!class!name:right!pointer!field"
   !dist = "priority!queue!class!name:distance!integer!field"
   comparison(a,b)= "priority!queue:!key[a] LEQ priority!queue:!key[b]"
;

COMMENT comparison function should be of the "or equal" flavor;

priority!queue procedure merge!priority!queues( priority!queue P, Q );
begin	priority!queue R;
	integer D;
r := null!record;
while p and q
   do begin "M2"
	if comparison(p,q)
	 then begin
		r swap !right[p]; 
		r swap p;
	      end
	 else begin
		r swap !right[q]; 
		r swap q;
	      end
      end "M2";
if p = null!record then p := q;
D := if p then !dist[p] else -1;

while r
   do begin "M4"
	q := !right[r];
	if !left[r] = null!record
	 then begin
		D := 1 + -1;
		!right[r] := null!record;
		!left[r] := p;
	      end
	else if !dist[ !left[r] ] < D
	 then begin
		D := 1 + !dist[ !left[r] ];
		!right[r] := !left[r];
		!left[r] := p;
	      end
	 else begin
		D := 1 + D;
		!right[r] := p;
	      end;
	!dist[r] := D;
	p := r;
	r := q;
      end "M4";
return(P);
end;



procedure push!queue( reference priority!queue Q; priority!queue el );
q := merge!priority!queues( q, el );



priority!queue procedure pop!queue( reference priority!queue Q );
begin	priority!queue result;
if result := q then q := merge!priority!queues( !left[q], !right[q] );
return(result);
end;
BOOLEAN PROCEDURE sameSet(ITEMVAR E1,E2);
BEGIN
 WHILE (IsElement XOR E1 EQV BIND E1) DO ;
 WHILE (IsElement XOR E2 EQV BIND E2) DO ;
 return( E1 = E2 );
END;

BOOLEAN PROCEDURE DISJOINTUNION(ITEMVAR E1,E2);
BEGIN
 WHILE (IsElement XOR E1 EQV BIND E1) DO ;
 WHILE (IsElement XOR E2 EQV BIND E2) DO ;
 IF E1=E2 THEN RETURN(FALSE);
 MAKE IsElement XOR E1 EQV E2;
 RETURN(TRUE);
END;
set vertices;
define	vertex!type=1	Comment TYPEIT return for untyped item;
	;

itemvar procedure getVertex( string name );
 begin	itemvar vertex;
	boolean flag;
  vertex_ cvsi( name, flag );
  if flag
   then begin
	 new!pname( vertex_ new, name );
	COMMENT initialize set of disjoint sets and the mapping
	   between a node and the disjoint set in which it appears ;
	 MAKE IsElement XOR vertex EQV new;
	 put vertex in vertices;
	end
   else assert( typeit(vertex)=vertex!type );
 return( vertex );
end;


integer nameBreaks;
simple procedure makeBreakTable;
begin	string letters;
letters := "abcdefghijklmnopqrstuvwxyz" & "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 
	& "0123456789";
setbreak( nameBreaks := getbreak, letters, letters, "XUTS" );
end;
require makeBreakTable initialization;

record!pointer(segment) procedure readTriple( integer chan );
begin "readTriple"
	string h,t;
	real cost; 
	record!pointer(segment) it;
h := input( chan, nameBreaks );
if length(h)=0 or equ(h,"0") then return(null!record);
t := input( chan, nameBreaks );
if length(t)=0 or equ(t,"0")
 then begin 
	usererr(0,1,"ignoring Last edge (only one endpoint): " & h); 
	return(null!record);
      end;
if 0 > cost := realin( chan )
 then usererr(cost,1," Edge formed with negative cost! ");
it := new!record(segment);
segment:source[it] := getVertex(h); 
segment:dest[it] := getVertex(t);
segment:cost[it] := cost;
return(it);
end "readTriple";
integer procedure readGraph( integer inchan );
comment		fills set vertices, initializes list edges.
;
begin "readGraph"
		integer edgeCount;
		record!pointer(segment) anEdge;

    for edgeCount := 0 step 1 WHILE anEdge := readTriple( inchan ) do
      BEGIN "FIRSTEND"
	if edgeCount land '37=0 then outchr(".");
	push!queue( edges, anEdge );
     END "FIRSTEND";
return(edgeCount);
end "readGraph";
procedure getgraph;
COMMENT	takes a file with the following format: a list of numbers
	triples representing edges [firstend,lastend,cost]
;
begin
   STRING FILENAME;
   INTEGER FLAG, INCHAN, BRCHAR, size;
   itemvar a,b;

COMMENT readin the graph from an input file;
do begin
    outstr('15&'12&"type in the input file name - ");
    filename _ inchwl;
    open(inchan_getchan,"DSK",0, 2,0, 80,brchar,flag);
    lookup(inchan,filename,flag);
   end 
 until flag=0;
foreach a,b such that IsElement XOR a EQV b 
   do erase IsElement XOR a EQV b;
vertices_ PHI; 
edges _ null!record;
size := readGraph(inchan);
release(inchan);
print( crlf, length(vertices), " vertices, ", 
	size, " edges in the graph. ");
end;
   record!pointer(segment) treeStack;
		COMMENT Stack of edges making up minimal spanning tree;
   string fileName;	COMMENT if non-null, write added edges;
   integer roomLeft;	COMMENT just to keep lines pretty;

procedure addEdge( record!pointer(segment) it );
    begin	string head,tail,cost;
		boolean flag;
		integer size;
	segment:lkid[it] := TreeStack;	COMMENT a stack, not priority q;
	TreeStack := it;
	if length(fileName)=0 then return;
	head := cvis( segment:source[it], flag );
	tail := cvis( segment:dest[it], flag );
	cost := cvf( segment:cost[it] );
	size := length(head) + length(tail) + length(cost) + 3;
	if 0 > roomleft_roomleft-size-1
	  then begin roomleft_72-size; print(crlf) end
	  else print( " " );
	print( head, ":", tail, "(", cost, ")" );
    end;
   INTEGER NVERTEXSETS;		COMMENT number of disjoint of node sets;
   real COSTS;			COMMENT cost so far of spanning tree;
   record!pointer(segment) top;	COMMENT next "best" segment;
   string response;
comment LIST ITEMVAR EDGETEMP;	COMMENT will refer to an edge item;
comment LIST ITEMVAR V,W,VERTEX; COMMENT will refer to vertex items;

   TreeStack _ null!record;
   getgraph;
   costs _ 0;
   NVERTEXSETS_LENGTH(vertices);
			COMMENT count of disjoint sets of nodes;

COMMENT now construct the spanning tree;

print(crlf," write tree insertions to: ");
if length(fileName_inchwl)>0 then setprint(fileName,"F");
roomleft_0;
setformat(0,2);
   while nvertexsets > 1 and top := pop!queue( edges ) do
	if disjointunion( segment:dest[top], segment:source[top] ) then
            BEGIN
               COSTS _ COSTS + segment:cost[top];
               addEdge( top );
               NVERTEXSETS_NVERTEXSETS-1;
            END;
if length(fileName)>0 then setprint(null,"B"); 
   print( crlf&"0: Total cost of spanning tree =", cvf(costs), 
	", size = ", length(vertices) - nvertexsets );

if NVERTEXSETS > 1
 then print(crlf & "  Actually, ", nvertexsets, " disjoint sets.");

do outstr(crlf & "Do you want a list of the edges of the graph"
	& (if NVERTEXSETS > 1 then "s? :" else "? :") )
until kequ(response := inchwl,"YES"[1 for length(response)])
   or kequ(response,"NO"[1 for length(response)]);

if length(fileName)>0 then setprint(null,"F"); 

if kequ(response, "YES"[1 for length(response)])
 then while length(vertices) do
      begin	itemvar Graph, v;
	print( crlf ); roomleft := -1;
	disJointUnion( cop(vertices), Graph := new );
	foreach v such that v in vertices 
	   do if sameSet( graph, v ) then
	      begin	string name; boolean flag
		name := cvis(v,flag);
		if 0 > roomLeft := roomLeft - length(name) - 1
		 then begin
			print(crlf, name);
			roomLeft := 74 - length(name);
		      end
		 else print( " ", name);
		remove v from vertices;
	      end;
      end;
END "SPNTRE"
    