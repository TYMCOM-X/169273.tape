
	More mathematical procedures for SAIL users

for this document assume: 
    I and J are integer expressions.	K is a integer variable.
    V is a long real expression.	W is a long real variable.
    X is a real expression.		Y is a real variable.

"Get.exponent"		K_ INTXP( X )	  K_ DINTXP( V )
"Set.exponent"		Y_ SETXP( X, I )  W_ DSETXP( V, I ) 
"epsilon"		Y_ EPSLN( X )	  W_ DEPSLN( V )

These three are "machine-independent" floating point functions
  The "epsilon" function is loosely the "grain" of its argument.
	epsilon(0) = smallest positive (non-zero) normalized value
	epsilon(Z) = epsilon(0) 
			MAX (successor(Z)-Z) 
			MAX (Z-predecessor(Z))
  The "Set.exponent" and "Get.exponent" functions allow calculations to 
  avoid overflow/underflow problems in calculations.  Set.exponent(Z,0)
  returns a number which lies in the approximate center of the exponent
  range of the floating point representation (except in the case of Z=0)
  Get.exponent is the inverse operation, it reads the current exponent.

"Integer.part"		Y_ FINT( X )	  W_ DFINT( V ) 
"fractional.part"	Y_ FRACT( X )	  W_ DFRACT( V ) 
"floor.function"	Y_ FLOOR( X )	  W_ DFLOOR( V ) 
"ceiling.function"	Y_ CEIL( X )	  W_ DCEIL( V ) 

  "Integer.part" and "Fractional.part" are a pair of functions which
  break a floating point number into two parts.  The sign of the result
  in each case is the same as the sign of the argument, or the result
  is zero.  For any normalized floating point number Z:
	Integer.Part(Z) + Fractional.Part(Z)  =  Z
  If Z is positive, Integer.part(Z) = floor.function(Z) 
  If Z is negative, Integer.part(Z) = ceiling.function(Z) 

"convert to integer"		K_ DFIX( V )
"integer to long real"		W_ DFLOAT( I )
"double integer to long real"	W_ BFLOAT( I, J )

"random number"		W_ DRAN
"SINE function"		W_ DSIN( V )
"COSINE function"	W_ DCOS( V )
"TANGENT function"	W_ DTAN( V )

