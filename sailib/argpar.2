entry
	ArgParse, ArgArr, ArgHlp, ArgMsg
;
begin

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)ARGPAR.DEF" source!file;
require "(SAILIB)SWITCH.REQ" source!file;

internal boolean ArgMsg;

boolean ERROR;
integer AccuCnt, DecBrk, OptBrk, B;
string	AccuNames, ProgramName, OptionName;

string  itemvar SIV;
real    itemvar RIV;
integer itemvar IIV;

string  array itemvar SAIV;
real    array itemvar RAIV;
integer array itemvar IAIV;


simple procedure BreakIni;
begin
    setbreak( DecBrk_ getbreak, ",_=/ "&#ht&#cr&#lf, " "&#ht&#cr&#lf, "KIST");
    setbreak( OptBrk_ getbreak, ":/",    " "&#ht&#cr&#lf, "KIS");
end;
require BreakIni initialization;


simple procedure InitProgramName;
ProgramName_ cv6str( calli( !xwd(-1,3), '41) );
require InitProgramName initialization;


internal simple procedure ArgArr( itemvar dst; integer src );
begin
    integer itemvar IIV;		! declare as type ;
    IIV_ dst;				! copy item ;
    start!code
	move	'1,@src;		! get array pointer ;
	movem	'1,access(datum(IIV));	! store as datum(item) ;
    end;
end;


simple procedure MError( string Msg1, Msg2, Msg3 );
begin
    ERROR := true;
    if ( ArgMsg )
     then print( Msg1, Msg2, Msg3 );
end;


simple procedure VError( string Msg1; itemvar Msg2; string Msg3 );
begin
    ERROR := true;
    if ( ArgMsg )
     then print( Msg1, Msg2, Msg3 );
end;


procedure AccuParse( itemvar IV; string ST );
begin

    if IV neq ANY then case typeit(IV) of begin
	[1] if ( AccuCnt > 0 )
	     then MError( "%no ",ST," file specification expected"&crlf );
	[3] begin
	    datum(SIV_IV) := AccuNames;
	    props(IV) := AccuCnt;
	end;
	[else] usererr( typeit(IV),2,
	    "?illegal item type for "&ST&" files: " )
    end
    else if length(AccuNames)
	  then begin "accumulation error"
	     ERROR := true;
	     if ( ArgMsg )
	      then print( "%no ",ST," files expected: ", AccuNames, crlf );
	  end "accumulation error";

    AccuNames := null;
    AccuCnt := 0;

end;


internal boolean procedure
 ArgHlp( string itemvar OFs, IFs; set Opts; boolean Text(false) );
begin "Help Me"
    integer index;
    itemvar IV;

!   print( "-Help- ",
!	   (if Text then " Texts" else null),
!	   (if ArgMsg then " Messages" else null),
!	   crlf );

    print( "Syntax:"& crlf &"   ", ProgramName, " " );
    if typeit(OFs)=3
     then print( OFs," = " );
    if typeit(IFs)=3
     then print( IFs," " );
    if length(Opts)
     then begin "some options"

	print( "/options"& crlf&crlf&"Options:" );
	foreach IV | IV in Opts
	 do begin "the option"

	    print( crlf& "   /" );
	    if ( typeit(IV) = 1 )
	     then print( (if props(IV) = NTVAL then """NO""" else null), IV )
	     else print( IV, ":" );

	    case typeit(IV)
	     of begin "each type"
		[1]  ;
		[3]  if ( Text or length( datum(SIV_IV) ) )
		      then print( """", datum(SIV_IV), """" )
		      else print( "string" );
		[4]  if ( Text )
		      then print( datum(RIV_IV) )
		      else print( "real" );
		[5]  if ( Text )
		      then print( datum(IIV_IV) )
		      else print( "integer" );
		[23] begin "string array"
		     if ( Text and 0 < props(SAIV_IV) < NAVAL )
		      then print( datum(SAIV)[arrinfo(datum(SAIV),1)+props(SAIV)-1] )
		      else print( "string-value" );
		     print( crlf &"   values:"& crlf &"   " );
		     for index_ arrinfo(datum(SAIV_IV),1) upto
				arrinfo(datum(SAIV),2)
		      do print( "  ", datum(SAIV)[index] );
		  end "string array";
		[24] begin "real array"
		     if ( Text and 0 < props(RAIV_IV) < NAVAL )
		      then print( datum(RAIV)[arrinfo(datum(RAIV),1)+props(RAIV)-1] )
		      else print( "real-value" );
		     print( crlf &"   values:"& crlf &"   " );
		     for index_ arrinfo(datum(RAIV_IV),1) upto
				arrinfo(datum(RAIV),2)
		      do print( "  ", datum(RAIV)[index] );
		  end "real array";
		[25] begin "integer array"
		     if ( Text and 0 < props(IAIV_IV) < NAVAL )
		      then print( datum(IAIV)[arrinfo(datum(IAIV),1)+props(IAIV)-1] )
		      else print( "integer-value" );
		     print( crlf &"   values:"& crlf &"   " );
		     for index_ arrinfo(datum(IAIV_IV),1) upto
				arrinfo(datum(IAIV),2)
		      do print( "  ", datum(IAIV)[index] );
		  end "integer array";
		[else] MError( null, " - unknowm type", " - ignored" )
	     end "each type";

	 end "the option";
     end "some options";

    print( crlf );
    return( false );			! always false ;

end "Help Me";


procedure SetOption( reference string S; reference integer B;
			set Opts; boolean Ignore(False) );
begin "set option"
    integer index, MatchCnt, base, prop;
    boolean FLAG, HaveV, NoFlag;
    string T, V, PN;
    itemvar IV, MIV;

!   print( "opt ",(if ignore then "T: " else "F: "),S," --> " );

    T := scan( S, OptBrk, B );
    if HaveV := B = ":"
     then begin "get value"
	V := scan( S, OptBrk, B );
	while B = ":"
	 do V := V& ":"& scan( S, OptBrk, B );
     end "get value"
     else V := null;

!   print( T," <-- (",V,")  <",B,">"&crlf );

    MatchCnt := NoFlag := 0;
    foreach MIV | MIV in Opts
     do begin "check options"
	PN := cvis( MIV, FLAG );
	if ( FLAG )
	 then usererr( 0,1,"?option item without PNAME" )
	 else if kequ( T, PN[1 for length(T)] )
	       then begin "match"
		  MatchCnt := MatchCnt + 1;
		  IV := MIV;
		  if length(T)=length(PN)
		   then begin "single"
		      MatchCnt := 1;
		      done;
		   end "single"
		   else if MatchCnt > 1
			 then done;
	       end "match"
	       else if kequ( T[1 for 2], "NO" ) and
			kequ( T[3 to inf], PN[1 for length(T)-2] )
			and ( typeit(MIV) = 1 )
		     then begin "no matched"
			MatchCnt := MatchCnt + 1;
			IV := MIV;
			NoFlag := 1;
			if ( ( length(T)-2 ) = length(PN) )
			 then begin "no single"
			    MatchCnt := 1;
			    done;
			 end "no single"
			 else if MatchCnt > 1
			       then done;
		     end "no matched";
     end "check options";

    case MatchCnt of begin "how many"

	[0] begin "nothing found"
	    if kequ( T, "OPTION"[1 for length(T)] )
	     then OptionName := V
	     else MError( "%no option matching /", T, crlf );
	    return;
	 end "nothing found";

	[1] begin "one value"
	    if ( props(IV) )		! existing value? ;
	     then if ( Ignore )		! yes, should we ignore it? ;
		   then return		! yes, byebye -- else oops! ;
		   else begin "duplicate switch"
			case typeit(IV) of begin
			[1]  VError( "%duplicate switch /", IV, crlf );
			[3]  VError( "%duplicate string for /", IV, crlf );
			[4]  VError( "%duplicate real for /", IV, crlf );
			[5]  VError( "%duplicate integer for /", IV, crlf );
			[23] VError( "%multiple strings for /", IV, crlf );
			[24] VError( "%multiple reals for /", IV, crlf );
			[25] VError( "%multiple integers for /", IV, crlf );
			[else] VError( "%duplicate switch /", IV, crlf )
			end;
			return;
		   end "duplicate switch";

	    case typeit(IV) of begin "each type"
	    [1] begin "no type"
		props(IV) := if NoFlag then NTVAL else NOVAL;
		if ( HaveV )
		 then VError( "%value not expected for /", IV, crlf );
	    end "no type";
	    [3] begin "a string"
		props(IV) := if HaveV then 1 else NOVAL;
		if HaveV
		 then datum(SIV_IV) := V;
	    end "a string";
	    [4] begin "a real"
		props(IV) := if HaveV then 1 else NOVAL;
		if HaveV then begin "make real"
		    datum(RIV_IV) := realscan( V, FLAG );
		    if ( FLAG )
		     then VError("% /",IV," expects real value"&crlf);
		end "make real";
	    end "a real";
	    [5] begin "an integer"
		props(IV) := if HaveV then 1 else NOVAL;
		if HaveV then begin "make integer"
		    datum(IIV_IV) := intscan( V, FLAG );
		    if ( FLAG )
		     then VError("% /",IV," expects integer value"&crlf);
		end "make integer";
	    end "an integer";

	    [23] begin "string array"
		if ( HaveV )
		 then begin "string typed"
		    prop_ (Base_ arrinfo(datum(SAIV_IV),1) ) - 1;
		    for index_ Base upto arrinfo(datum(SAIV),2)
		     do if kequ( V,datum(SAIV)[index][1 for length(V)] )
			 then if kequ( V,datum(SAIV)[index] )
			       then begin "exact match"
				  prop_ index;
				  done;
			       end "exact match"
			       else if prop < Base
				     then prop_ index
				     else begin "ambigious string"
					prop_ Base - 2;
					done;
				     end "ambigious string";
		    if ( prop geq Base )
		     then props(IV)_ (prop - Base) + 1
		     else begin "wrong string"
			VError("% /",IV," expects one of"&crlf);
			if ( ArgMsg )
			 then begin "give details"
			    for index_ Base upto arrinfo(datum(SAIV),2)
			     do print( "  ",datum(SAIV)[index] );
			     print( crlf );
			 end "give details";
			props(IV)_ NTVAL + prop - base;	! NIVAL or NAVAL ;
		     end "wrong string";
		 end "string typed"
		 else props(IV) := NOVAL;
	    end "string array";

	    [24] begin "real array"
		own real myReal;
		if ( HaveV )
		 then begin "real typed"
		    myReal_ realscan( V, FLAG );
		    if ( FLAG )
		     then VError("% /",IV," expects a real value"&crlf)
		     else begin "check real"
			prop_ (base_ arrinfo(datum(RAIV_IV),1) ) - 1;
			for index_ base upto arrinfo(datum(RAIV),2)
			 do if ( myReal = datum(RAIV)[index] )
			     then begin "exact real"
				prop_ index;
				done;
			     end "exact real";
			if ( prop geq base )
			 then props(IV)_ (prop - base) + 1
			 else begin "wrong real"
			    VError("% /",IV," expects one of"&crlf);
			    if ( ArgMsg )
			     then begin "give details"
				for index_ base upto arrinfo(datum(RAIV),2)
				 do print( "  ",datum(RAIV)[index] );
				print( crlf );
			     end "give details";
			    props(IV)_ NIVAL;
			 end "wrong real";
		     end "check real";
		 end "real typed"
		 else props(IV) := NOVAL;
	    end "real array";

	    [25] begin "integer array"
		own integer myInt;
		if ( HaveV )
		 then begin "integer typed"
		    myInt_ intscan( V, Flag );
		    if ( FLAG )
		     then VError("% /",IV," expects an integer value"&crlf)
		     else begin "check integer"
			prop_ (base_ arrinfo(datum(IAIV_IV),1) ) - 1;
			for index_ base upto arrinfo(datum(IAIV),2)
			 do if ( myInt = datum(IAIV)[index] )
			     then begin "exact integer"
				prop_ index;
				done;
			     end "exact integer";
			if ( prop geq base )
			 then props(IV)_ (prop - base) + 1
			 else begin "wrong integer"
			    VError("% /",IV," expects one of"&crlf);
			    if ( ArgMsg )
			     then begin "give details"
				for index_ base upto arrinfo(datum(IAIV),2)
				 do print( "  ",datum(IAIV)[index] );
				print( crlf );
			     end "give details";
			    props(IV)_ NIVAL;
			 end "wrong integer";
		     end "check integer";
		 end "integer typed"
		 else props(IV) := NOVAL;
	     end "integer array";

	    [else] usererr( typeit(IV), 2, "?illegal item type: " )
	    end "each type";
	 end "one value";

	[else] MError( "%option /", T, " ambiguous"& crlf )
    end "how many";

end "set option";


internal boolean procedure ArgParse( itemvar OFs,IFs; set Opts; string Line );
begin
    string T,S;
    integer index, equFlag;
    itemvar IV;

    procedure Accu;
    begin
	if B = "," or B = " " or length( T )
	 then begin
	    AccuCnt := AccuCnt + 1;
	    AccuNames := AccuNames & T;
	    if ( B = ","  or  B = " " )
	     then AccuNames := AccuNames & B;
	 end;
    end;

    props(IFs) := props(OFs) := 0;		! set props 0 for NO FILEs ;
    foreach IV | IV in Opts
     do props(IV) := 0;				! set props 0 for NO VALUE ;

    EquFlag := Error := false;			! clear flags ;
    AccuCnt := 0;				! file count  ;
    AccuNames := OptionName := null;		! and strings ;

    T := scan( S := Line, DecBrk, B );		! get token ;
    if ( equ(T,"?") and B=0 )			! wants help? ;
     then return( ArgHlp( OFs, IFs, Opts ) )	! then give it ;
     else begin "something typed"
	while ( B )
	 do begin "break seen"
	    case B of begin "what break"
		["="]["_"]
		    if ( EquFlag )
		     then usererr( EquFlag,2,"?too many assignments " )
		     else begin "do output"
			Accu;
			AccuParse( OFs, "output" );
			EquFlag := true;
		     end "do output";
		["/"] done;
		[":"][","][" "] Accu;
		[else] usererr( B,2, "?illegal option break character: " )
	    end "what break";
	    T := scan( S, DecBrk, B );
	 end "break seen";
	Accu;
	AccuParse( IFs, "input" );

	while B = "/"
	 do SetOption( S, B, Opts, false );
    end "something typed";

    if not( length( S ) )
     then begin "read options"
	if length( S_ SW!INI( ProgramName, OptionName ) )
	 then begin "read profile"
	    if ( S = "/" )
	     then B_ lop( S );
	    while B = "/"
	     do SetOption( S, B, Opts, true );
	 end "read profile"
	 else if ( length( OptionName ) )
	       then MError( "%option ",OptionName," not found"&crlf );
     end "read options";

    if length(S)
     then MError( "%garbage following options: ", S, crlf );

    return( not ERROR );

end;

end $
   