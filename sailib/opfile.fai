	title	nameio
	entry	opfile

begin
; simple integer procedure opfile( string FileName, options;
;				integer channel(-1) );
; gets file on channel in specified mode.
;	Always does OPEN, does LOOKUP, ENTER as necessary.
; options: Read, Write  New file, Supercede file, Old file, Version
; H (thawed, multi-user enter used), Base mode (old if exists, else
; create and use),  ###P protection (everyone,group,owner)
; Mapping access (must use for now)
;

acZ__0
acA__1
acB__2
acC__3
acD__4
tmp__5
sp__16
p__17

external nopoll,$pdlov,inchwl,cvfil,cvsix,.skip.
opdef	err.	[5b8]	;error uuo for sail

.chopn__13
.chlk__4
.chent__5
.chmen__41
.chcls__1
^opfile:push	p,nopoll	;save nopoll value
	setom	nopoll		;inhibit process switching
	add	p,[xwd 7,7]	;get local variables storage space
	skipl	p		;check for PDL exceeded
	 jsp	15,$pdlov	;it was, cause error

; first translate option string into option bits
; bits left in acD
	hrrz	acA,-1(sp)	;pick up length of options
	move	acB,(sp)	;and byte pointer
	setz	acD,		;start with a clear options word
newopt:	setz	acZ,		;mark "no number"
mordig:	sojl	acA,optset	;no more options to set...
	ildb	acC,acB		;get next character
	cail	acC,"0"
	 caile	acC,"7"		;is it a number?
	  jrst	numdun		;no, number collected try for option
	lsh	acZ,3		;make room for digit
	iori	-"0"(acC)		;and put it in
	jrst	mordig		;and go get more data
numdun:	trz	acC,40		;force option to upper case
	movei	tmp,1
	lsh	tmp,-"A"(acC)	;get option bit & check for validity
; valid options:	zy xWV utS ,, RqP ONM lkj iHg fed cBa
	tdnn	tmp,[xwd 031,570202]
	 jrst	swterr		;option invalid, complain and leave
	iorm	tmp,acD		;mark it requested in the options word
	cain	acC,"P"		;protection specified?
	 jrst	[lsh	acZ,=27	;protection code in top 9 bits
		 ior	acD,0	;put bits in saved option word
		 jrst	newopt]
;put any number-valued options here
	jumpe	acZ,newopt	;none of the option bits take an arg
swterr:	err.	1,[asciz /OPFILE: bad option/]	;1=>continueable error
	jrst	argerr		;return error code in switch parse (-1)

; now translate option bits into a Enter,Lookup,Menter/enter sequence
; option bits obtained from acD, results placed in acA,
; acZ used as a temporary (which must start out as 0)
; resulting ELM spec
;  mask: 777000		protection to use for file
;  mask: 000740		file data mode to use (only 17 for now)
;  mask: 000030		initial enter
;			0=don't, 1=normal, 2=supercede, 3=create
;  mask: 000006		lookup
;			0=return, 1=close-lookup,
;			2=close-lookup[fail:create,close,lookup]
;			3=close-lookup-return
;  mask: 000001		Menter/enter (always post-lookup)
;			0=enter, 1=multiple-enter(.CHMEN)

optset:	jumpn	acZ,swterr	;trailing number
	trne	acD,010000	;this only works for "mapped" files
	 tdnn	acD,[xwd 020,400000]	;have to read or write
	  jrst	swterr		;ah well, he didn't say enough
;this could have a lot more checking at this point
	movei	acZ,740		;clear flag bits, set dump mode

; note: "Old" and "Read" bits are actually ignored here for now
;	(their effect happens, though by default) --don't tell
	tdne	acD,[xwd 11,020000] ;need initial enter [V,S,or N]
	 jrst	[tlne	acD,10	;Version update (create or supercede)
		  tro	acZ,10
		 tlne	acD,1	;Supercede only
		  tro	acZ,20
		 trne	acD,020000;New file
		  tro	acZ,30
		trne	acD,000202 ;if multiple access or Base mode
		  jrst	.+1	;then we will need to set up a lookup
		 jrst	elmset]	;otherwise do protection and done
	tro	acZ,02		;assume normal lookup
	trne	acD,2		;unless Base file (best mode)
	 trc	acZ,06		;normal bit off, special lookup on
	tlnn	acD,20		;if no write access desired,
	 tro	acZ,06		;then make lookup return when done
	trne	acD,200		;if H (thawed=multiple access)
	 tro	acZ,01		;use .CHMEN, not enter for final enter

elmset:	hlrzi	acA,acD		;get protection he specified
	trnn	acD,100000	;was this really from user?
	 hrrzi	acA,047000	;no, use default = all,rd,no
	andi	acA,777000	;clear out garbage
	ior	acA,acZ		;and set protection part for result
	hrlm	acA,-11(p)	;save options codes in lh of chan arg

;now strip device name from file name

	hrrz	acA,-3(sp)	;get length(filename)
	jumpg	acA,gotnam	;have a name, proceed
	pushj	p,inchwl	;no name, go get one from terminal
	pop	sp,-4(sp)	;and put it in as arg
	pop	sp,-4(sp)
	hrrz	acA,-3(sp)	;file name length
	jumpe	acA,argerr	;if we have a null name now, error

gotnam:		;we have a non-null file name at -3(sp), length in 1
	; maybe do getchan stuff here if -1(p) is =-1 at notymshare
	;determine if device there
	move	acB,-2(sp)	;get byte pointer
	movei	acA,-1(acA)	;decrement count for first load
lukdev:	ildb	acB
	cain	":"
	 jrst	hasdev		;he included a device to use
	sojge	acA,lukdev	;go for next character
				;here he didn't include device
	movsi	acA,(<sixbit /DSK/>);so supply "DSK:" for him
	jrst	gotdev

hasdev:	exch	acB,-2(sp)	;remove device from file name
	push	sp,-3(sp)	;and put device name on top of stack
	push	sp,acB
	hrrm	acB,-5(sp)	;put updated count out to file name
	movni	acB,1(acB)	;and subtract off file size + 1 (colon)
	addm	acB,-1(sp)	;from device name string
	pushj	p,cvsix		;convert to sixbit
gotdev:
	movei	17		;logical search for dev name, dump mode
	movem	-6(p)		;bits,,initial status
	movem	acA,-5(p)	;device name
	setzm	-4(p)		;unbuffered
	movsi	047740		;(all rd no, dump mode)
	movem	-1(p)		;set default protection, mode
	push	sp,-3(sp)	;now send file name to cvfil
	push	sp,-3(sp)
	movei	acA,-2(p)	;address of where extension should go
	push	p,acA
	addi	acA,2		;address of where PPN should go
	push	p,acA
	pushj	p,cvfil		;go convert file name string
	movem	acA,-3(p)	;store file name
	tlnn	acA,777777	;don't allow file names that prevent
	 jrst	argerr		;short lookup/enter/rename block
	move	acA,-11(p)	;pick up channel provided
	hrli	acA,.chopn	;and open device
	chanio	acA,-6(p)
	 jrst	opfail
	hrrm	acA,-11(p)	;save channel number in case changed

opndun:	ldb	acB,[point =13,-11(p),=12]	;copy in protection
	dpb	acB,[point =13,-1(p),=12]	;and file data mode

	ldb	acB,[point 2,-11(p),=14];get initial Enter spec of ELM
	jumpe	acB,lookop		;said to skip it
	hrli	acA,.chent	;perform enter
	chanio	acA,-3(p)
	 jrst	[movsi	1,-3	;couldn't enter (code=-3),
		 jrst	syserr]	;use system error for RH, release, err
	hrlz	acZ,-2(p)	;get "already existed" bit into sign
	cain	acB,3		;if want error on attempt to supercede
	 jumpl	acZ,errclo	;and in fact it was, error
	cain	acB,2		;or want error on attempt to create
	 jumpge	acZ,errclo	;and in fact it was, error
lookop:			;now prepare for the lookup part
	ldb	acB,[point 2,-11(p),=16];get instructions
	jumpe	acB,goodrt	;tada we finished... return
		;no need to set various prot... since this is a lookup
	hrli	acA,.chcls	;better close in case was entered
	chanio	acA,10		;causing file to really exist,...
				;but don't fiddle access date yet
	hrli	acA,.chlk	;do the lookup
	chanio	acA,-3(p)
	 jrst	[cain	acB,2	;well, twould seem we have an error
		  jrst	relook	;we have to try harder (Base mode)
		 movsi	1,-5	;error code -5
		 jrst	syserr]	;normal error non-recovery (cry and go)
	cain	acB,3		;lookup said "return after completion"
	 jrst	goodrt		;yup, so that we will do

				;***protection/data mode fiddling??
	hlrz	acB,-11(p)	;pick up flags again
	hrli	acA,.chent
	trne	acB,1		;this supposed to be "multiple enter"?
	 hrli	acA,.chmen	;yes, make it so
	chanio	acA,-3(p)	;do MENTER/ENTER
	 jrst	[movsi	1,-7	;this failed, code -7
		 jrst	syserr]	;use system code for RH, release & go
	jrst	goodrt

relook:				;"Base" mode, change to a "Create"
	movei	acB,15		; make it "Create .. Lookup" (3,1)
	dpb	acB,[point =4,-11(p),=16]
	hllzs	-2(p)		;clear RH of EXT word
	setzm	-1(p)		;and date stuff
	jrst	opndun		;and go back as if from top
errclo:	movsi	1,-4		;error during first enter
	move	acB,-11(p)
	hrli	acB,.chcls
	chanio	acB,50		;close (no create/supercede or access)

syserr:	hrr	1,-2(p)		;get error code from RH of EXT word
	hrrz	acB,-11(p)	;release: (op=0, so no hrli)
	chanio	acB,
	jrst	rtrn

argerr:	skipa	1,[-1]		;argument error (-1,,-1)
opfail:	hrli	1,-2		;open error
	jrst	rtrn

goodrt:	hrrz	1,-11(p)
rtrn:	move	-7(p)		;restore the NOPOLL flag
	movem	NOPOLL
	sub	sp,[xwd 4,4]
	sub	p,[xwd 12,12]
	jrst	@2(p)
bend
end

   