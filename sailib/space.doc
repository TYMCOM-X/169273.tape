address_ GETSPACE( blockSize );
    returns the address of a zeroed block of blockSize continuous free 
	words, or causes an error and returns zero if none.
    SID		1,2,3,4 and CORGET
    ERRORS	"GETSPACE COULDN'T GET ANY"

FREESPACE( Address );
    releases space obtained from GETSPACE.  [Argument is NOT checked]
    SID		2 and CORREL
    ERRORS	none



address_ GETSMALL( blockSize );
    SID		1,2,3,4,5,8 and CORGET
    ERRORS	"CORGET LOST. NOW IT IS YOUR TURN"

address_ LOPSMALL( blockOwner );
    returns the address of a zeroed block from the blockOwner free block
	list.  If there are no free blocks on the blockOwner list, a new
	chunk of storage of the appropriate size is created and cut up
	into the proper size small pieces.  May cause an error if it
	cannot allocate enough storage (in which case it returns 0).
    SID		1,2,3,4,5,8 and CORGET
    ERRORS	"CORGET LOST. NOW IT IS YOUR TURN"

FREESMALL( Address, blockSize );
    links the block at Address as an available block of size blockSize.
	If no block owner exists for blocks of that size, an error is
	caused.  [Address Argument is NOT checked].  Storage is NOT 
	actually returned to SAILs core allocation.
    SID		1,2,3,4,5,8
    ERRORS	"COULD NOT FIND AN OWNER FOR THAT BLOCK LIST"

LINKSMALL( Address, blockOwner );
    links the block at Address as an available block for blockOwner 
	blocks.  [Arguments are NOT checked].  Storage is NOT actually
	returned to SAILs core allocation.
    SID		1,5,8
    ERRORS	none

blockOwner_ ADDSIZE( blockSize, IncrementCount(50), BlockOwner(0) );
    Create (or modify) a small block header for blockSize-word blocks.
	If BlockOwner is non-zero, this must be a new size, or you will
	cause an error.  BlockOwner (if non-zero) is interpretted as 
	the address of a two-word block of storage to keep the block 
	header in (All fields of the header will be initalized, you 
	needn't do so).  The proper block owner for blockSize-word
	blocks is identified (possibly created, possibly linked in),
	and the IncrementCount is set to the value specified in the
	call.  The address of the blockOwner is returned.  The
	blockOwner's version of the IncrementCount is used decide how
	much storage to allocate whenever a block of that size are
	needed but none are on the appropriate free list.
	(it will allocate blockSize*(1 max IncrementCount) words).
	
    SID		1,2,3,4,5,8 +CORGET
    ERRORS	"YOU ALREADY HAVE BLOCKS OF THAT SIZE"

EXTERNAL INTEGER BOWNRS;
address of the top blockOwner (a linked list).
Format:
	BOWNRS:	0,	adr1

	adr1:	siz1,	adr2
		Incr1,	Free1

	adr2:	siz2,	adr3
		Incr2,	Free2
	...
	adrN:	sizN,	0
		IncrN,	FreeN

Free1:	0,	Free1a
	[siz1-1 words of storage]

Free1a:	0,	Free1b
	[siz1-1 words of storage]
...
Free1X:	0,	0
	[siz1-1 words of storage]
... .

