$text SCANU;TokenType_ SCANU( @"arg" ).
TokenType_ SCANU( @"arg" );
simple integer procedure scanu(reference string arg);
Comment SCANU(string) acts as a simple scanner.  It returns
	an integer dependent on the element scanned.
	0 String is null (end of line).
	1 Identifier (say external string ACCUM and ACCUM will
	   contain the text).
	2 Number (integer) external integer SCNVAL has the number.
	3 Special character again SCNVAL has the value.
String will contain the remaining chrs after the call.
Leading blanks (and tabs) are ignored;



$text SCANSS;OldValue_ SCANSS( StopOnLetter ).
OldValue_ SCANSS( StopOnLetter );
SIMPLE BOOLEAN PROCEDURE SCANSS(BOOLEAN B);
Comment In some cases SCANU should stop after one character when
	the first non-blank character is a letter (i.e. p100).
	calling SCANSS(true) will enter this mode.  SCANSS(false)
	will return to normal identifier scanning.
	SCANSS returns its previous value.


$text SCANSN;OldValue_ SCANSN( SignSpecial ).
OldValue_ SCANSN( SignSpecial );
SIMPLE BOOLEAN PROCEDURE SCANSN(BOOLEAN B);
Comment normally SCANU treats + and - as possible signs for
	numbers.  In some cases, it may be desirable to have SCANU
	return these as special characters.  Calling SCANSN(false)
	will enter this mode.  SCANSN(TRUE) will leave this mode.
	SCANSN returns its previous value.


$text STRSRC;Index_ STRSRC( @array "names", "look", @exact ).
Index_ STRSRC( @array "names", "look", @exact );
SIMPLE INTEGER PROCEDURE STRSRC(STRING ARRAY NAMES;
	STRING LOOK; REFERENCE BOOLEAN EXACT);
Comment This routine is called with a string and a string
    array.  It searches for a match and returns the index
    into the array of the match.  To avoid confusion, the
    lower array bound should be 1 or greater.  If no match is
    found, 0 is returned.  The procedure will try to find
    an exact match.  Failing this, it will look for strings
    which match on all the characters in the string argument.
    The flag EXACT will be set true if an exact match is found.
    if no exact match is found and several partial matches exist
    the procedure will return 0.
    Call is STRSRC(array,string,flag);


$text RDDATE;SuccessMaybe_ RDDATE( @date, @ovscan, fstscn, @"str" ).
SuccessMaybe_ RDDATE( @date, @ovscan, fstscn, @"str" );
SIMPLE BOOLEAN PROCEDURE RDDATE(REFERENCE INTEGER DATE,
	OVSCAN; VALUE INTEGER FSTSCN; REFERENCE STRING STR);
Comment This procedure reads the date from the string passed.
	It uses SCANU and STRSRC.  It assumes that SCANU
	has been called before it and the value returned by
	SCANU is passed in FSTSCN.  It calls SCANU one extra time
	and returns the value in ovscan.  The date is returned
	in date in the standard DEC date format

		((yr-64)*12+month-1)*31+day-1
	It accepts dates in the following formats
		MM-DD-YY
		DD-MONTH-YY
		MONTH DD,YY
	DD is the day (as a number) MM the month (as a number)
	MONTH the name for the month (or a shortened version as
	SEP for SEPTEMBER).  The - may be omitted or replaced
	by a /.  The year (YY) may be either a 2 digit year as 76
	or a 4 digit year as 1976;


$text STDATE;"dateString"_ STDATE( date, flags ).
"dateString"_ STDATE( date, flags );
Comment This procedure takes an integer DATE in DEC date format
	and generates a string from it.  The integer FLAG controls
	the formatting for the string returned as follows:

	bits 33-35 (FLAGS land '7) is the general format
	 (DD indicates day as a number MM month as a number
	  MON month as text and YY year as a number (2 or 4 digits)
	 0 MM-DD-YY	 1 DD-MON-YY	 2 DD-MM-YY	 3 MON DD,YY
	 unassigned formats are the same as 1.
	bits 29-32 (FLAGS lsh -3 land '17) are the size of the
	 MON string (0 is full width) this is the max width.
	bit 28 (FLAGS land '200) indicates that the year is
	 4 digits not 2
	bits 26-27 (FLAGS lsh -8 land '3) give a character to replace
	 the - in formats 0,1, and 2: 0 is - 1 is / 2 is blank
	 3 is undefined (blank);


$text RDTIME;SuccessMaybe_ RDTIME( @time, @ovscan, fstscn, @"STR" ).
SuccessMaybe_ RDTIME( @time, @ovscan, fstscn, @"STR" );
SIMPLE BOOLEAN PROCEDURE RDTIME(REFERENCE INTEGER TIME,
	OVSCAN; VALUE INTEGER FSTSCN; REFERENCE STRING STR);
Comment This procedure reads the time from the string passed.
	It uses SCANU and assumes that SCANU has been called
	before it.  The value returned by SCANU is in FSTSCN.
	The time formats accepted are HHMM or HH:MM.  The time
	returned in time is in minutes since midnight.  OVSCAN is
	set to the output of SCANU for the next element of the
	line;


$text LOKDUL;"username"_ LOKDUL( ppn ).
"username"_ LOKDUL( ppn );
SIMPLE STRING PROCEDURE LOKDUL(INTEGER PPN);

Comment reads DUL to find correspondence to PPN.  Allocates a channel 
	with GETCHAN.  String returned if PPN is found in the DUL is 
	(user name).  If not found, string is [project,programmer].
    NOTE: if you expect to find anything in the DUL, you must have 
	Read Files license.


$text INIUFR;(any!class)_ INIUFR("name","ext",chan,bits(0),size(102)).
(ANY!CLASS)_ INIUFR( "name", "extension", channel, bits(0), size(102) );
This is one of two procedures which are used together to
read UFD's (directories).  There is a setup procedure and a 
procedure which returns the "next" file name.  A "partial" 
search of the UFD may be done by using names containing # or *.
The procedure for reading a UFD is:
	open the channel and lookup the UFD
		[it is the file (UFD)<ppn>.UFD where <ppn> is the
		 directory PPN (or GAN,,UUN) in binary (not text)]
	call INIUFR
	call NXTUFR until it returns the value false (eof)

SIMPLE RECORD!POINTER (ANY!CLASS) PROCEDURE INIUFR(
	STRING NAME,EXTENSION; INTEGER CHANNEL,BITS(0),SIZE(102));

The string arguments NAME and EXTENSION determine which files
to "find".  To look at all files used "*" for both names,
for all SAI files use "*" and "SAI", etc.  A # in the name will
match any character.  BITS indicates the information to be
returned about each file as follows:
(where information is included if BITS land x = 1)
	X	INFORMATION
	1	license
	2	date and time
	4	status bits
	8	size in blocks
	16	causes * and # in file name and extension
		to be treated as any other character

	32	convert date and time to time zone specified 
		in  (bits lsh -6) land '177

For the time zone conversion field '100 is days since JAN 1,1964
instead of DEC date format, '40 is daylight savings time and
'37 is the time zone.  If not given, DATE and TIME are in
GMT.  Left half is date, rh time since midnight in seconds.
Size is a parameter specifying how big to make the internal
storage array.  The size specified should be for the number
of pieces of file information which you want to fit in this
area.  Any number smaller than 1 will be set to 1 and any
number greater than 102 will be set to 102.
Both BITS and SIZE may be omitted.  BITS will be assumed 0
and SIZE 102.


$text NXTUFR;Successful_ NXTUFR( array data, (ANY!CLASS) record ).
Successful_ NXTUFR( array data, (ANY!CLASS) record );
This is one of two procedures which are used together to
read UFD's (directories).  There is a setup procedure and a 
procedure which returns the "next" file name.  A "partial" 
search of the UFD may be done by using names containing # or *.
The procedure for reading a UFD is:
	open the channel and lookup the UFD
		[it is the file (UFD)<ppn>.UFD where <ppn> is the
		 directory PPN (or GAN,,UUN) in binary (not text)]
	call INIUFR
	call NXTUFR until it returns the value false (eof)

SIMPLE BOOLEAN PROCEDURE NXTUFR(INTEGER ARRAY DATA;
	RECORD!POINTER (ANY!CLASS) RECORD);
This procedure provides the "next" file from the UFD.  The
record pointer passed is the one returned by INIUFR.
The array DATA is loaded with the information
from the UFD.  The format is:

first word	name (sixbit)
second word	extension (sixbit)
		size if requested
		license if requested
		time and date if requested
		status if requested

Everything except the name and extension will be "compacted" (i.e.  if
only the license were requested it would appear in the third word, not
the fourth).  True is returned unless an error or end of file
is encountered.  (Check the eof word for the channel to find out)
this routine uses GENARY (described below).


$text GENARY;GENARY( array args, loc ).
GENARY( array args, loc );
Comment The routine GENARY is designed to generate arrays to be stored 
	into records.  These arrays will be properly garbage collected 
	when the records are deleted.  GENARY takes two arguments.  The
	first is an integer array of one dimension.  The range of 
	indices may be anything desired.  The first value is the number
	of dimensions desired.  The second is the lower bound for the 
	first dimension, then the upper bound for the first dimension, 
	then the lower for the second dimension, etc.  The second 
	argument to genary is the address of the array argument in the 
	record. If RP is the record pointer, RC the record class, and 
	RA the array field in the record, then use LOCATION(RC:RA[RP])
	for the second argument;

SIMPLE PROCEDURE GENARY(INTEGER ARRAY ARGS; INTEGER LOC);

WARNING!!!!! This procedure goes around the "back door" to generate 
arrays.  It might stop working (although probably not).  There are 
dangers.  If an array from a record is passed as an argument to a 
procedure and the procedure then causes the record that the array came 
from to be garbage collected (before returning), the array may be 
garbage collected out from under the procedure.  This is an unusual 
situation but must be watched.


$text CNVDATE;NewDateTime_ CNVDATE( date, fromFormat, toFormat ).
NewDateTime_ CNVDATE( date, fromFormat, toFormat );

	CNVDATE converts a date from one time zone or form (days since
JAN 1,1964 or DEC format) to another.  The format of fromFormat and 
toFormat are the same as used by the system.  That is '400000 indicates
days since JAN 1,1964 instead of DEC format.  '40 is daylight savings 
time.  Argument land '37 is the time zone ('20 is GMT).  If argument 
land '77 is 0, the users time zone will be used.  The definitions:
	CALLI!DATUUO!DEC, CALLI!DATUUO!DAYS, CALLI!DATUUO!DST
	and CALLI!DATUUO!GMT
are all in the file (SAILIB)TYMCAL.DEF which may be required.

$text CNVDTIM;CNVDTIM( @date, @time, fromFormat, toFormat ).
CNVDTIM( @date, @time, fromFormat, toFormat );

	fromFormat and toFormat are as in CNVDATE.  DATE and TIME are
modified to reflect the time zone change.  TIME is in seconds since 
midnight.  CNVDTIM takes a time and date and converts from one time 
zone or form to another.

$text RPGINI;(any!class)_ RPGINI( "TempFileName" ).
(any!class)_ RPGINI( "TempFileName" );
  Constructs a record for RPGNXT's "temporary file" data access.  
Temporary files are used by RPG to communicate tasks to processors.  
RPGINI is called with a 'temp' file name and returns a record pointer. 
RPGNXT is then passed that record pointer and returns the next line 
from the 'temp' file.  These procedures take care of looking in both 
TMPCOR and DSK and of deleting the files they read from.  They may be 
used in any program which must interface to RPG.
  The string passed to this procedure should be three characters in 
length (as "MAC" or "SAI").  The procedure will check tmpcor for the 
name and, if it is not found, DSK:JJJNAM.TMP where JJJ is the current 
job number.
  A note on file deletion.  If the file is found in TMPCOR, it will be
deleted after the call to RPGINI.  If the file is on the disk, it will
not be deleted until RPGNXT returns false.


$text RPGNXT;ObtainedData_ RPGNXT( @"data", (any!class) rpgRecord ).
ObtainedData_ RPGNXT( @"data", (any!class) rpgRecord );
  RpgRecord is a record pointer returned by RPGINI.  If there is more 
data in the file, RPGNXT will return TRUE with the next line of data in
DATA.  The return and line feed will not be included in the text 
returned.  Line numbers will be ignored if present.
  A note on file deletion.  If the file is found in TMPCOR, it will be
deleted after the call to RPGINI.  If the file is on the disk, it will
not be deleted until RPGNXT returns false.

    