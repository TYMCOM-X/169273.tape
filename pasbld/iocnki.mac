	search	rtsmki
	search	iosmki
	sall
	$module	IOCNNL

	entry	GETCN.,GTCHN.,FRECN.,FRCHN.

	$STATIC	CHWORD,1	; bit word for channels
	$TEMP	TEMP,1

;
; GETCN. and FRECN. -- channel allocation-deallocation routines.  For
;   current programs using them, their calling sequences are the same as
;   in the old I/O system.  GETCN. returns the new channel in R0, and
;   FRECN. frees the channel passed in R0.  Since the caller may or may
;   not be masked, these routines use only R0 and R1, as the cost of
;   a few extra instructions.

GETCN.:	$GETPDA			; do it
	MOVE	R1,$IOCNN(PDA)	; get addr of IO data area
	ADDI	R1,.CHWOR	; plus offset of channel word gives addr
	MOVEM	R1,TEMP		; put into local stack temp
	MOVE	R0,0(R1)	; load up channel word
	JFFO	R0,GTCHN1	; jump if we got it
	JRST	CNERR		; die if we didn't
GTCHN1:	CAILE	R1,17		; is it in range?
	JRST	CNERR		; nope
	MOVNS	R1		; negate
	MOVSI	R0,400000	; set bit zero only
	LSH	R0,0(R1)	; shift into right position
	ANDCAM	R0,@TEMP	; clear through temp to chn word
	MOVN	R0,R1		; return positive # in R0
	POPJ	TOP,0		;   and do it

CNMSG:	asciz;
?	Too many I/O channels in use;
CNERR:
	PUSHJ	TOP,TWAIT.##
	OUTSTR	CNMSG
	MOVE	R0,0(TOP)
	PUSHJ	TOP,WRTPC.##
	JRST	DIE.##


FRECN.:	$GETPDA			; load PDA register
	MOVN	R1,R0		; negate to shift
	MOVSI	R0,400000	; bit zero set only
	LSH	R0,0(R1)	; get bit in right position
	MOVE	R1,$IOCNN(PDA)	; load up our data area pointer
	IORM	R0,.CHWOR(R1)	; set bit in chn alloc word
	POPJ	TOP,0		; so long


CHINIT:	HRLZI	R1,377774	; mask word with all channels free
	MOVEM	R1,CHWORD	; drop initialized channel bit word
	POPJ	TOP,0		; end

; GTCHN. and FRCHN. -- wrappers to channel allocation.

GTCHN.:	PUSHJ	TOP,GETCN.	; get channel in R0
	MOVEM	R0,4(TOP)	; store
	POPJ	TOP,0		;   and return


FRCHN.:	MOVEI	R0,0(EXP1)	; load channel to free
	JRST	FRECN.		;   and do it

	$END	IOCNNL,CHINIT
	end
