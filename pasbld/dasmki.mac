;    +----------------------------------------------------------------+
;    I                                                                I
;    I                         D E B A S M                            I
;    I                         - - - - - -                            I
;    I                                                                I
;    +----------------------------------------------------------------+
;
;    PURPOSE: DEBASM  is  a  set  of   PASCAL-callable   routines   for
;       performing  various  very  lowlevel  tasks  for  the  Debugger.
;
;    USAGE:
;
;       LD$BYTE and ST$BYTE:
;  
;          word: unit_range	address of word containing byte
;          bit:  elem_sizes     position in word of first bit of byte
;          bitsize: elem_sizes  bit width of byte
;          value: int_type      for LD$BYTE, a var parameter where byte will
;				be returned, right justified;  for ST$BYTE,
;				a value parameter containing right justified
;				byte to be inserted into addressed word
;  
;       ABORT$:
;
;          - no arguments -
;				performs an EXIT 1 - will return to caller
;				if user gives a continue command to the
;				monitor
;
;
;       TT$IN and TT$OUT:
;
;          ch: char		for TT$IN, a var parameter where char input
;				from the terminal with a TTCALL will be
;				returned;  for TT$OUT, a value parameter
;				containing the char to be output to the terminal
;				with a TTCALL
;
;
;       DEB$CALL:
;
;          start: half_word	address of entry point of Pascal routine to
;				be called
;
;	EX$TRING:
;
;				returns a pointer to a flex string
;				describing the most recent exception
;
;    ------------------------------------------------------------------
	search	rtsmki
	$module	debas$
	subttl	assembly language helpers for the Debugger
  
	entry	ld$byte
	entry	st$byte
	entry	abort$
	entry	tt$in
	entry	tt$out
	entry	deb$ca
	entry	ex$tring
	$excpt
  
	word==2
	bit==3
	size==4
	value==5
	bptr==6
	byte==7
  
ld$byte:
	pushj	top, build
	ldb	byte, bptr		; fetch the desired byte
	movem	byte, 0(value)		; return it to the user
	popj	top,
  
st$byte:
	pushj	top, build
	dpb	value, bptr		; store given byte in desired location
	popj	top,
  
build:	movei	bptr, 44		; calculate position p
	sub	bptr, bit
	sub	bptr, size
	move	bptr+1, size		; size s
	lsh	bptr+1, 36		; left justify s
	lshc	bptr, 36		; left justfy p and s
	hrr	bptr, word		; address in rh
	popj	top,
  
  
abort$: exit	1,
	popj	top,
  
  
	ch==2
  
tt$in:	inchwl	0(ch)			; input character with wait for line
	popj	top,
  
tt$out:	outchr	ch			; output character to terminal
	popj	top,
	

	start==2
  
deb$ca:	pushj	top,(start)		; call user proc.
	popj	top,			; return to debugger.

ex$tring:
	movei	r1,exloc	;addr of flex string
	movem	r1,fv(top)
	popj	top,

	end
