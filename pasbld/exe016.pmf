program exe016 options noqblock;
(* Any changes to this program should be done to EXE016.PMF *)
(*          and then regenerate EXE016.PAS with PMF         *)

var sequence: integer;
&
#define (point,n,begin
  if sequence <> n then
    writeln (tty, 'Sequence error: point n follows point', sequence-1)
$IF points
  else
    writeln (tty, '[n]')
$ENDIF
  ;
  sequence := n + 1;
end)&
&
#define (inaccessible,n,begin
  writeln (tty, 'Control has reached inaccessible point n');
  stop;
end)&

type
    access_index = 0 .. 4;
    access_array = array [access_index] of integer;
    access_record = record
	i: access_index;
	a: access_array;
    end;

var a_r_0: access_record;

label 01, 02;
$PAGE call tests
procedure ct_top_uncle ( n: integer );
begin
  case n of
    1 : point (2);
    2 : point (5);
    3 : point (8);
  end;
end;

procedure ct_level_1 ( n: integer );

procedure ct_sub_uncle ( n: integer );
begin
  case n of
    2 : point (23);
    3 : point (16);
  end;
end;

procedure ct_level_2 ( n: integer );

procedure ct_level_3 ( n: integer );
begin
  case n of
    2 : begin
	  point (7);
	  ct_top_uncle (3);
	  point (9);
	  ct_level_3 (3);
	  point (11);
	  ct_level_2 (3);
	  point (13);
	  ct_level_1 (3);
	  point (15);
	  ct_sub_uncle (3);
	  point (17);
	end;
    3 : point (10);
  end;
end;

begin (* ct_level_2 *);
  case n of
    1 : begin
	  point (4);
	  ct_top_uncle (2);
	  point (6);
	  ct_level_3 (2);
	  point (18);
	  ct_level_2 (2);
	  point (20);
	  ct_level_1 (2);
	  point (22);
	  ct_sub_uncle (2);
	  point (24);
	end;
    2 : point (19);
    3 : point (12);
  end;
end;

begin (* ct_level_1 *);
  case n of
    0 : begin
	  point (1);
	  ct_top_uncle (1);
	  point (3);
	  ct_level_2 (1);
	  point (25);
	  ct_level_1 (1);
	  point (27);
	end;
    1 : point (26);
    2 : point (21);
    3 : begin
	  point (14);
$IF trace
	  writeln (tty, 'Traceback follows - should be');
	  writeln (tty, '   CT_LEVEL_1, CT_LEVEL_3, CT_LEVEL_2, CT_LEVEL_1, EXE016');
	  trace;
	  writeln (tty, 'Assertion failure follows.');
	  writeln (tty, 'Type REENTER, CONTINUE.');
	  writeln (tty, 'Same traceback should be repeated.');
	  assert (false);
$ENDIF
	end;
  end;
end;
$PAGE variable and parameter access tests
#define (dt_body,n,begin
  a_r_\n := (n, (9\n\0, 9\n\1, 9\n\2, 9\n\3, 9\n\4));
  dt_vars (0,n);
  dt_parm (1,n);
end)&
&
#define (dt_vars,x,n,begin
  if a_r_\x.a[a_r_\x.i] <> 9\x\x then
    writeln (tty, 'Variable access error: level n to level x - value is',
		  a_r_\x.a[a_r_\x.i]);
end&#if("#nen(x,n),;
dt_vars ("#num(x+1),n)))&
&
#define (dt_parm,x,n,begin
  if prm_a_\x[prm_i_\x] <> 7\x\x then
    writeln (tty, 'Parameter access error: level n to level x - value is',
		  prm_a_\x[prm_i_\x]);
end&#if("#nen(x,n),;
dt_parm ("#num(x+1),n)))&
&
procedure dt_level_1 (prm_a_1: access_array; prm_i_1: access_index);
var a_r_1: access_record;

  procedure dt_level_2 (flag: boolean; prm_a_2: access_array; prm_i_2: access_index);
  var a_r_2: access_record;

    procedure dt_level_3 (flag: boolean; prm_a_3: access_array; prm_i_3: access_index);
    var a_r_3: access_record;
    begin
      dt_body (3);
      if not flag then
	dt_level_2 (true, (720, 721, 722, 723, 724), 2);
    end;

  begin
    dt_body (2);
    dt_level_3 (flag, (730, 731, 732, 733, 734), 3);
  end;

begin
  dt_body (1);
  dt_level_2 (false, (720, 721, 722, 723, 724), 2);
end;
$PAGE nonlocal goto tests
procedure gt_level_1 ( n: integer );

  label 11, 12;

  procedure gt_level_2 ( n: integer );

    label 21;

    procedure gt_level_3 ( n: integer );
    begin
      case n of
	1 : return;
	2 : goto 21;
	3 : goto 12;
	4 : goto 02;
      end;
    end;

  begin (* gt_level_2 *)
    case n of
      1 : begin
	    point (30);
	    gt_level_3 (1);
	    point (31);
	    gt_level_3 (2);
	    inaccessible (1);
	  end;
      2 : goto 11;
      3 : begin
	    gt_level_3 (3);
	    inaccessible (2);
	  end;
      4 : begin
	    gt_level_3 (4);
	    inaccessible (3);
	  end;
    end;
  21 :
    point (32);
  end;

begin (* gt_level_1 *)
  case n of
    1 : begin
	  point (29);
	  gt_level_2 (1);
	  point (33);
	  return;
	end;
    2 : goto 01;
    3 : begin
	  point (36);
	  gt_level_2 (2);
	  inaccessible (4);
	end;
  end;
11 :
  point (37);
  gt_level_2 (3);
  inaccessible (5);
12 :
  point (38);
  gt_level_2 (4);
  inaccessible (6);
end;
$PAGE main program
begin
  rewrite (tty);
  writeln (tty, 'Begin exe016');

  (*  Simple call tests.  *)

  sequence := 0;
  point (0);
  ct_level_1 (0);
  point (28);

  (*  Variable and parameter access tests.  *)

  a_r_0 := (0, (900, 901, 902, 903, 904));
  dt_level_1 ((710, 711, 712, 713, 714), 1);

  (*  Nonlocal goto tests.  *)

  gt_level_1 (1);
  point (34);
  gt_level_1 (2);
  inaccessible (7);
01 :
  point (35);
  gt_level_1 (3);
  inaccessible (8);
02 :
  point (39);

  writeln (tty, 'End exe016');
end.
