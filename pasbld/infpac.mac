;    +--------------------------------------------------------------+
;    |                                                              |
;    |                        S E G I N F O                         |
;    |                        - - - - - - -                         |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    SYSTEM:  INFPAC - environmental information routines
;    
;    PURPOSE:  GET INFORMATION ABOUT USER'S MEMORY SEGMENTS.
;    
;    USAGE:
;    
;       EXTERNAL PROCEDURE SEGINFO(VAR SEGSTUFF: SEGRECD);
;    
;    OUTPUT:
;    
;       SEGSTUFF.LOWLEN
;                   LENGTH OF USER'S LOW SEGMENT IN WORDS.
;    
;       SEGSTUFF.HIGHLEN
;                   LENGTH OF USER'S HIGH SEGMENT IN WORDS  (ZERO  IF
;                   NO HIGH SEGMENT).
;    
;       SEGSTUFF.RDONLY
;                   SET  TO  TRUE  IF  A  HIGH  SEGMENT EXISTS AND IS
;                   READ-ONLY; SET TO FALSE OTHERWISE.
;    
;       SEGSTUFF.SHARABLE
;                   SET TO TRUE IF  A  HIGH  SEGMENT  EXISTS  AND  IS
;                   SHARABLE; SET TO FALSE OTHERWISE.
;    
;    INCLUDE FILES REQUIRED:
;    
;       INFPAC.INC
;    
;    ----------------------------------------------------------------
        TITLE	SEGINF - GET MEMORY SEGMENT INFORMATION.
	TWOSEG
	RELOC	400000

;  DECLARE ENTRY POINT.

	ENTRY SEGINF


; SEARCH FOR MONITOR CALL RELATED SYMBOLS.

;	SEARCH	UUOSYM

.JBREL=44
.JBHRL=115
.GTSGN=14
SN%SHR=200000000000
SN%UWP=100000000000


;  DEFINE REGISTER SYMBOLICS.

AC2=2
AC10=10
STK=17

;  DEFINE OFFSETS OF FIELDS WITHIN SEGRECD.

LOWLEN=0
HIGHLEN=1
RDONLY=2
SHARED=3

;
;

SEGINF:
	HRRZ	AC10,.JBREL	; GET HIGHEST LEGAL LOW SEG ADDRESS.
	AOS	,AC10		; ADD 1 TO GET LENGTH.
	MOVEM	AC10,LOWLEN(AC2)	; MOVE TO USER RECORD.
;
	HLRZ	AC10,.JBHRL	; GET HIGH SEGMENT LENGTH.
	MOVEM	AC10,HIGHLEN(AC2)	; MOVE TO USER RECORD.
;
	SETZM	,SHARED(AC2)	; INIT BOTH 'SHARED' AND 'RDONLY'
	SETZM	,RDONLY(AC2)	;    TO FALSE.
;
GSIEND:
	POPJ	STK,		; RETURN TO CALLER.
;
;
	PRGEND



;    +--------------------------------------------------------------+
;    |                                                              |
;    |                         U S R S T A                          |
;    |                         - - - - - -                          |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    USAGE:
;    
;       EXTERNAL PROCEDURE USRSTAT(VAR USRSTATS: USTATREC);
;    
;    OUTPUT:
;    
;       USRSTATS.CRUS60
;                   'HIGH PRECISION' CRUS USED BY USER'S JOB.  DIVIDE
;                   BY 60 TO GET INTEGRAL NUMBER OF CRUS.
;    
;       USRSTATS.DISKRDS
;                   NUMBER OF DISK BLOCKS READ BY USER JOB.
;    
;       USRSTATS.DISKWRS
;                   NUMBER OF DISK BLOCKS WRITTEN BY USER JOB.
;    
;       USRSTATS.RUNTIME
;                   CURRENT  RUNTIME  OF  USER'S JOB IN 80 NANOSECOND
;                   UNITS.
;    
;       USRSTATS.ELAPTIME
;                   CURRENT TIME  ELAPSED  SINCE  JOB  INITIATION  IN
;                   SECONDS.
;    
;    INCLUDE FILES REQUIRED:
;    
;       INFPAC.INC
;    
;    ----------------------------------------------------------------
	TITLE	USRSTA - GET USER JOB STATISTICS.
	TWOSEG
	RELOC	400000

;  DECLARE ENTRY POINT.

	ENTRY	USRSTA



;  SEARCH FOR MONITOR CALL RELATED SYMBOLS.

;	SEARCH	UUOSYM

.GTRCT=17
.GTWCT=20



;  DEFINE REGISTER SYMBOLICS.

AC2=2
AC10=10
AC11=11
AC12=12
STK=17


;  DEFINE OFFSETS WITHIN USTATREC.

CRUS=0
DRDS=1
DWRTS=2
RUNT=3
ELAPT=4


;

USRSTA:
	HRROI	AC10,4		; GETTAB NUMBER FOR LOW ORDER WORD OF
	GETTAB	AC10,		; TRUS * 10000.
	SETZM	CRUS(AC2)	; ERROR RETURN, SAY ZERO
	IMULI	AC10,3		; CONVERT TO TRUS * 60
	IDIVI	AC10,^D500
	MOVEM	AC10,CRUS(AC2)	; MOVE TO USER'S RECORD
;
	HRROI	AC10,.GTRCT	; DISK READS COUNT TABLE.
	GETTAB	AC10,
	JFCL			; IGNORE ERROR RETURNS.
	TLZ	AC10,777700	; stomp high order crap
	MOVEM	AC10,DRDS(AC2)	; MOVE TO USER RECORD.
;
	HRROI	AC10,.GTWCT	; DISK WRITES COUNT TABLE.
	GETTAB	AC10,
	JFCL			; IGNORE ERROR RETURNS.
	TLZ	AC10,777700	; stomp high order crap
	MOVEM	AC10,DWRTS(AC2)	; MOVE TO USER RECORD.
;
	HRROI	AC10,-46	; DOUBLE PRECISION MICROCYCLES
	GETTAB	AC10,
	JFCL
	MOVEM	AC11,RUNT(AC2)	; MOVE TO USER RECORD.
;
	HRROI	AC10,-12	; ATTACH TIME IN SECONDS
	GETTAB	AC10,		
	JFCL			; IGNORE ERROR RETURN.
	MOVEM	AC10,ELAPT(AC2)	; MOVE TO USER RECORD.
;
	POPJ	STK,		; RETURN TO CALLER.
;
;
	RELOC	0		; ACUUO. BLOCK IN LOWSEG
ACBLK:	EXP	-1		; GET DATA FOR THIS JOB
	EXP	0		; CRU'S COUNT GOES HERE
;
	PRGEND


;    +--------------------------------------------------------------+
;    |                                                              |
;    |                         J O B I N F                          |
;    |                         - - - - - -                          |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    USAGE:
;    
;       EXTERNAL PROCEDURE JOBINFO(VAR JOBSTUFF: JOBREC);
;    
;    OUTPUT:
;    
;       JOBSTUFF.HSEGPPN
;                   PPN ASSOCIATED WITH JOB'S HIGH SEGMENT.
;    
;       JOBSTUFF.HSEGNAM
;                   NAME OF JOB'S HIGH SEGMENT.
;    
;       JOBSTUFF.LSEGPPN
;                   PPN ASSOCIATED WITH JOB'S LOW SEGMENT.
;    
;       JOBSTUFF.LSEGNAM
;                   NAME ASSOCIATED WITH JOB'S LOW SEGMENT.
;    
;       JOBSTUFF.PROGDIR
;                   PPN PROGRAM WAS RUN FROM.
;    
;       JOBSTUFF.JOBNUM
;                   NUMBER ASSIGNED THIS JOB AT LOGIN.
;    
;    NOTES:  1.  A  NULL  STRING  WILL  BE  RETURNED  IF  ERRORS  ARE
;       DETECTED  (FOR EXAMPLE, NO HIGH SEGMENT).  2.  IF THE PROGRAM
;       IS RUN UNDER LINK WITHOUT A /SAVE OR /SSAVE, THE HIGH SEGMENT
;       PPN IS RETURNED AS [0,0].
;    
;    INCLUDE FILES REQUIRED:
;    
;       INFPAC.INC
;    
;    ----------------------------------------------------------------
	TITLE	JOBINF - GET USER JOB INFORMATION.
	TWOSEG
	RELOC	400000

; DECLARE ENTRY POINT

	ENTRY	JOBINF

; SEARCH FOR UUO SYMBOLS.

;	SEARCH	UUOSYM

.GTPPN=2
.GTPRG=3
.GTNM1=31
.GTNM2=32

; DEFINE REGISTER SYMBOLICS

AC2=2
AC10=10
AC11=11
AC12=12
AC13=13
AC14=14
STK=17

; DEFINE OFFSETS OF FIELDS WITHIN A JOBREC.

HSEGPPN=0
HSEGNAM=4
LSEGPPN=7
LSEGNAM=^D11
PROGDIR=^D14
JOBNUM=^D18
PROJID=^D19

opdef	ADJBP[IBP]

	reloc	0
prjcde:	block	3
	reloc	400000


JOBINF:
	SETZM	HSEGPPN(AC2)		; INIT STRING LENGTH TO 0.
	MOVE	AC10,[-2,,.GTPPN]
	GETTAB	AC10,			; GET HIGH SEG PPN.
	JRST	HNAM			; ERROR - RETURN NULL STRING.
	MOVEI	AC11,HSEGPPN(AC2)	; AC11 - ADDRESS OF RESULT STRING.
	PUSHJ	STK,WRTPPN		; CONVERT PPN TO STRING.

;

HNAM:
	SETZM	HSEGNAM(AC2)		; INIT STRING LENGTH TO ZERO.
	MOVE	AC10,[-2,,.GTPRG]	;
	GETTAB	AC10,			; GET HIGH SEG NAME.
	JRST	LPPN			; ERROR - NULL STRING RETURNED.
	MOVEI	AC11,HSEGNAM(AC2)	; AC11 - ADDR OF DEST STRING.
	PUSHJ	STK,WRTNAM		; CONVERT NAME TO STRING.

;

LPPN:
	SETZM	LSEGPPN(AC2)		; INIT STRING LENGTH TO ZERO.
	HRROI	AC10,.GTPPN
	GETTAB	AC10,			; GET LOW SEG PPN.
	JRST	LNAM			; ERROR - RETURN NULL STRING.
	MOVEI	AC11,LSEGPPN(AC2)	; AC11 - ADDR OF STRING RESULT.
	PUSHJ	STK,WRTPPN		; CONVERT PPN TO STRING.

;

LNAM:
	SETZM	LSEGNAM(AC2)		; INIT STRING LENGTH TO ZERO.
	HRROI	AC10,.GTPRG		; 
	GETTAB	AC10,			; GET LOW SEG NAME.
	JRST	PDIR			; ERROR - NULL STRING RETURNED.
	MOVEI	AC11,LSEGNAM(AC2)	; AC11 - ADDR OF RESULT STRING.
	PUSHJ	STK,WRTNAM		; CONVERT NAME TO STRING.

;

PDIR:
	SETZM	PROGDIR(AC2)		; INIT STRING LENGTH TO ZERO.
	HRROI	AC10,-25		;
	GETTAB	AC10,			; GET DIRECTORY PROGRAM WAS RUN FROM.
	JRST	JOBNO			; ERROR - RETURN NULL STRING.
	MOVEI	AC11,PROGDIR(AC2)	; AC11 - ADDR OF RESULT STRING.
	PUSHJ	STK,WRTPPN		; CONVERT TO STRING.

;

JOBNO:
	PJOB	AC10,			; GET JOB NUMBER.
	MOVEM	AC10,JOBNUM(AC2)	; NO ERROR RETURN.


	MOVEI	AC11,PROJID(AC2)	; addr of project id field (JDR)
	SETZM	0,0(AC11)		; null string
	HRRZI	AC10,prjcde		; arg for call
	calli	ac10,-61		; get project code
	POPJ	STK,0
	
	move	ac13,[point 7,prjcde-1,0]	; source byte pointer
	move	ac12,[point 7,1(ac11)]	; dest byte pointer

wrtid:	ildb	ac14,ac13
	pushj	stk,wrchr		; move one char to user buffer
	move	ac10,(ac11)
	cain	ac10,^D12			; moved all 12 chars yet?
	popj	stk,			; yes - return to caller
	jrst	wrtid			; no - branch to top of loop

NAMERR:	SETZM	0,0(AC11)		; null string
	POPJ	STK,0			; split

;

	POPJ	STK,			; RETURN TO CALLER.


;  WRTPPN - CONVERTS THE PPN IN AC10 INTO A STRING
;  ( '[XXXX,YYYY]' FORMAT).  THE ADDRESS OF THE DESTINATION
;  STRING SHOULD BE IN AC11 UPON ENTRY.  THE FIRST WORD OF 
;  THE STRING IS THE LENGTH OF THE RESULT WHICH IS SET BY
;  THIS ROUTINE, AND, ASSUMED TO BE ZERO ON ENTRY.

WRTPPN:
	MOVE	AC12,[POINT 7,1(AC11)]
	MOVEI	AC14,"["		; WRITE LEFT BRACKET.
	PUSHJ	STK,WRCHR
	HLRZ	AC13,AC10		; WRITE PROJECT NUMBER.
	PUSHJ	STK,WRNUM
	MOVEI	AC14,","		; WRITE THE COMMA.
	PUSHJ	STK,WRCHR
	HRRZ	AC13,AC10		; WRITE PROGRAMMER NUMBER.
	PUSHJ	STK,WRNUM
	MOVEI	AC14,"]"		; WRITE RIGHT BRACKET.
	PUSHJ	STK,WRCHR		
	POPJ	STK,			; RETURN TO CALLER.

;  WRTNAM - CONVERT SIXBIT CONTENTS OF AC10 TO ASCII AND
;  MOVE TO PASCAL STRING ADDRESSED BY AC11.  INCREMENTS
;  LENGTH FIELD OF STRING BY 6.

WRTNAM:
	MOVE	AC12,[POINT 7,1(AC11)]
	MOVE	AC13,0(AC11)		; get current length (JDR)
	JUMPE	AC13,LOOP1-1		; skip ADJPB if zero length
	ADJBP	AC13,AC12
	MOVE	AC12,AC13
	MOVEI	AC13,6
;
LOOP1:
	ROT	AC10,6			; ROTATE RIGHT 6 BITS.
	MOVE	AC14,AC10		; ISOLATE LOWER 6 BITS.
	ANDI	AC14,77			; 
	ADDI	AC14,40			; CONVERT SIXBIT TO ASCII.
	PUSHJ	STK,WRCHR		; MOVE IT, INCR B.P., INCR STRING LEN.
	SOJN	AC13,LOOP1		; DO IT HALF A DOZEN TIMES!
	
	POPJ	STK,			; RETURN.

;  WRCHR - MOVE CHARACTER IN AC14 TO DESTINATION VIA
;  BYTE POINTER IN AC12.  INCREMENT BYTE POINTER AND 
;  STRING LENGTH FIELD.  STRING LENGTH FIELD ADDRESS IS
;  IN AC11.

WRCHR:
	AOS	(AC11)			; INCREMENT STRING LENGTH.
	IDPB	AC14,AC12		; MOVE BYTE, INCR B.P.
	POPJ	STK,			; RETURN.

; WRNUM - CONVERT INTEGER IN AC13 TO ASCII OCTAL STRING.
;  DESTINATION BYTE POINTER IS IN AC12.  INCREMENT BYTE POINTER 
;  AND STRING LENGTH FIELD.  STRING LENGTH FIELD ADDRESS IS IN AC11.

WRNUM:
	MOVE	AC14,AC13		; ISOLATE LOW ORDER DIGIT.
	ANDI	AC14,7
	ADDI	AC14,"0"		; CONVERT TO ASCII.
	PUSH	STK,AC14		; SAVE IT.
	LSH	AC13,-3			; GET REMAINING NUMBER.
	SKIPE	AC13			; IF NOT ZERO, THEN
	PUSHJ	STK,WRNUM		;   RECURSIVELY CONVERT IT.
	POP	STK,AC14		; GET LEFTMOST REMAINING ASCII
	PUSHJ	STK,WRCHR		;   DIGIT AND WRITE IT.
	POPJ	STK,			; RETURN TO CALLER, WHOMEVER IT
					;   HAPPENS TO BE THIS TIME AROUND.
;
;
	PRGEND



;    +--------------------------------------------------------------+
;    |                                                              |
;    |                         S Y S S T A                          |
;    |                         - - - - - -                          |
;    |                                                              |
;    +--------------------------------------------------------------+
;    
;    SYSTEM:  INFPAC - environmental information routines
;    
;    USAGE:
;    
;       EXTERNAL PROCEDURE SYSSTAT(VAR SYSSTATS: SSTATREC);
;    
;    OUTPUT:
;    
;       SYSSTATS.NLOGIN
;                   NUMBER OF JOBS CURRENTLY LOGGED IN.
;    
;       SYSSTATS.MAXCOR
;                   SIZE IN WORDS OF LARGEST LEGAL USER JOB.
;    
;    INCLUDE FILES REQUIRED:
;    
;       INFPAC.INC
;    
;    ----------------------------------------------------------------
	TITLE	SYSSTA - GET SYSTEM STATISTICS.
	TWOSEG
	RELOC	400000

;  DECLARE ENTRY POINT.

	ENTRY	SYSSTA

;  SEARCH FOR MONITOR CALL EXTERNALS.

;	SEARCH	UUOSYM

.WSRMX=5

;  DEFINE REGISTER SYMBOLICS.

AC2=2
AC10=10
AC11=11
STK=17

; DEFINE OFFSETS OF FIELDS WITHIN A SSTATREC.


NLOGIN=0
MAXCOR=1


SYSSTA:
	SETZM	NLOGIN(AC2)	; NOT AVAILABLE FROM TYMSHARE
;

	MOVE	AC10,[.WSRMX,,AC11]	; FUNCTION CODE (WORKING SET MAX) AND
	CALLI	AC10,-74		; RESULT LOCATION
	JFCL			; IGNORE ERROR RETURN.
	IMULI	AC11,^D512	; CONVERT PAGES TO WORDS
	MOVEM	AC11,MAXCOR(AC2)	; MOVE TO USER LOC.
;
	POPJ	STK,
;
;
	END


    