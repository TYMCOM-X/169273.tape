	search	rtsym
	$module	smsd1
	entry	sm.sd1
;
; Constant two-word set required in some short set operations.
;
sm.sd1:	xwd	400000,0
	xwd	0,0
	prgend
	search	rtsym
	$module	smsd2
	entry	sm.sd2
sm.sd2:	xwd	400000,0
	xwd	400000,0
	prgend
	search	rtsym
	$module	smss
	entry	sm.ss
;
; Table of masks for some short set operations
;
	xwd	000000,000000
sm.ss:	xwd	400000,000000
	xwd	200000,000000
	xwd	100000,000000
	xwd	040000,000000
	xwd	020000,000000
	xwd	010000,000000
	xwd	004000,000000
	xwd	002000,000000
	xwd	001000,000000
	xwd	000400,000000
	xwd	000200,000000
	xwd	000100,000000
	xwd	000040,000000
	xwd	000020,000000
	xwd	000010,000000
	xwd	000004,000000
	xwd	000002,000000
	xwd	000001,000000
	xwd	000000,400000
	xwd	000000,200000
	xwd	000000,100000
	xwd	000000,040000
	xwd	000000,020000
	xwd	000000,010000
	xwd	000000,004000
	xwd	000000,002000
	xwd	000000,001000
	xwd	000000,000400
	xwd	000000,000200
	xwd	000000,000100
	xwd	000000,000040
	xwd	000000,000020
	xwd	000000,000010
	xwd	000000,000004
	xwd	000000,000002
	xwd	000000,000001
	prgend
	search	rtsym
	search	stsym
	$module	rpad
	entry	r.pad

;
; R.PAD blanks the "R" format string using the byte pointer and
; remainder length stored in the PDA.
;

r.pad:
	movei	r1,40		;blank
loop:	sosge	$strlen(pda)
	popj	top,
	idpb	r1,$str(pda)
	jrst	loop
	prgend
	search	rtsym
	search	stsym
	$module	CSP
	entry	CSP.X, CSP.F
	$temp	str1bp,2
	$temp	rsave,2
	result==r1
	str2bp==r0
	str2len==exp1
	char1==r1
	char2==exp2

csp.f:	movei	r0,@-2(r1)
	hrli	r0,440700
csp.x:	dmovem	exp1,rsave
	movei	str2len,@-1(r1)

cloop:	sosge	1+str1bp	;decrement str1 len
	jrst	dstdone
	sojl	str2len,srcdone
	ildb	char1,str1bp
	ildb	char2,str2bp
	camn	char1,char2
	jrst	cloop
diff:	sub	char1,char2	;in result reg r1
done:	dmove	exp1,rsave
	popj	top,

dstdone:movei	char1,40	;compare rest with blanks
srccmp:	sojl	str2len,equal
	ildb	char2,str2bp
	cain	char2,40
	jrst	srccmp
	jrst	diff
srcdone:movei	char2,40
dstcmp:	ildb	char1,str1bp
	caie	r1,40
	jrst	diff
	sosl	1+str1bp
	jrst	dstcmp

equal:	movei	result,0
	jrst	done
	prgend
	search	rtsym
	search	stsym
	$module	IX
	entry	IX.F, IX.X
	extern	rest.6

	str1bp==exp1
	str1len==exp2
	str2bp==exp3
	str2len==exp4
	char==exp5
	$temp	save1,2
	$temp	save2,2
	$temp	rsave,6
	result==r1

ix.f:	movei	r0,@-2(r1)
	hrli	r0,440700
ix.x:	$save	rsave,exp1,exp1+5
	movei	str2len,@-1(r1)
	move	str2bp,r0
	dmove	str1bp,save1
	jumpe	str2len,succeed
	sub	str1len,str2len
	jumpl	str1len,fail
	dmovem	str2bp,save2
	movei	result,1
ixloop:	ildb	r0,str1bp
	ildb	char,str2bp
	came	r0,char
	jrst	next1
	sojle	str2len,done
	movem	str1bp,save1
loop2:	ildb	r0,str1bp
	ildb	char,str2bp
	came	r0,char
	jrst	next2
	sojg	str2len,loop2
found:	jrst	done
next2:	move	str1bp,save1
	move	str2len,1+save2
next1:	sojl	str1len,fail
	move	str2bp,save2
	aoja	r1,ixloop
fail:	tdza	result,result
succeed:movei	result,1
done:	$restore rsave,exp1,exp1+5
	popj	top,
	prgend
	search	rtsym
	search	stsym
	$module	SMVLZ

	entry	SMV.LZ

	$temp	savereg,1
	addr==exp1

;
; SMV.LZ empties a long set.
;

SMV.LZ:	movem	addr,savereg	;free register
	movei	r1,3
	addb	r1,0(top)
	movni	r0,@-1(r1)	;get negative dim
	movei	addr,@-3(r1)	;get addr
	subi	r0,^d35
	idivi	r0,^d36
	hrl	addr,r0
loop:	setzm	0(addr)
	aobjn	addr,loop
	move	addr,savereg	;restore used register
	popj	top,
	prgend
	search	rtsym
	search	stsym
	$module	SMVLO

	entry	SMV.LO
	extern	REST.6
	extern	SAVE.6

	$temp	rsave,6
	$temp	saveaddr,2
	$temp	dim,1

	addr==exp1
	lwb==exp2
	off2==exp3
	bits2==exp4
	mask1==exp5
	mask2==r1
	off1==r0
	bits1==r1
	temp==lwb

;
; SMV.LO generates a set of [op1..op2].
;

SMV.LO:
	jsp	r1,save.6
	dmove	r0,@0(top)
	movei	r0,@r0		;get addr of set
	movei	r1,@r1		;and its lowerbound
	dmovem	r0,saveaddr	;to temp
	movei	r1,5
	addb	r1,0(top)	;bump return addr past args
	movei	r0,@-3(r1)	;get dim
	subi	r0,1		;use dim-1 from now on
	movem	r0,dim
	move	r0,@-2(r1)	;get op1
	move	r1,@-1(r1)	;and op2
	dmove	addr,saveaddr
	sub	r0,lwb		;correct op1 by lowerbound
	jumpge	r0,.+2		;must be positive
	movei	r0,0
	sub	r1,lwb		;correct op2  by lowerbound
	camle	r1,dim		;must not be greater than dimension
	move	r1,dim		;  use dim-1
	camle	r0,r1		;op1 > op2?
	jrst	clear		;yes, just empty set.
	move	off2,r1		;copy op2
	idivi	off2,^d36	;split word and bit offsets
	idivi	off1,^d36	;  "
	seto	mask1,		;prepare for shift
	movn	bits1,bits1
	lsh	mask1,0(bits1)
	hrlzi	mask2,400000
	movn	bits2,bits2
	ash	mask2,0(bits2)
;
; Now: words (addr) to (addr+off1-1) := 0.
;      if off1 = off2 then (addr+off1)^ := mask1 AND mask2
;      else:
;	 (addr+off1)^ := mask1
;	 words (addr+off1+1) to (addr+off2-1) := -1
;	 (addr+off2)^ := mask2
;      words (addr+off2+1) to (addr+(dim-1)div 36) := 0;
;

	move	temp,off1	;copy 
;
; Zero initial words.
;
start:	sojl	temp,part1
	setzm	0(addr)
	aoja	addr,start
part1:
	cain	off1,0(off2)	;word offsets the same?
	and	mask1,mask2	;yes, combine masks
	movem	mask1,0(addr)
	cain	off1,0(off2)
	jrst	finish		;remainder zero if so
;
; Intermediate words are all ones.
;
	movei	temp,-1(off2)
	sub	temp,off1	;intervening words
fill:	sojl	temp,store2
	setom	1(addr)
	aoja	addr,fill
;
; Store second mask word
;
store2:	addi	addr,1
	movem	mask2,0(addr)
;
; Finish out with zeros
;
finish:
	move	r0,dim		;get dim-1
	idivi	r0,^d36
	sub	r0,off2		;number words to zero
loop:	sojl	r0,REST.6	;restore regs and go home
	setzm	1(addr)
	aoja	addr,loop
; If op1 > op2 just clear the set.
;
clear:
	seto	off2,
	soja	addr,finish
	prgend
	search	rtsym
	search	stsym
	$module	SMVLL

	entry	SMV.LL
	extern	save.6,rest.6

;
; SMV.LL moves one long format set to another, truncating as 
; necessary.
;
	$temp	rsave,6
	$temp	temp1,2
	$temp	temp2,2
	addr1==exp1
	addr2==exp2
	lwb1==exp3
	lwb2==exp4
	dim1==r1
	dim2==r0

SMV.LL:
	jsp	r1,save.6
	movei	r1,6
	addb	r1,0(top)	;bump return address
	movei	r0,@-6(r1)	;get addr of set1
	movei	r1,@-3(r1)	;get addr of set 2
	dmovem	r0,temp1
	move	r1,0(top)
	movei	r0,@-5(r1)	;get lwb of set 1
	movei	r1,@-2(r1)	;get lwb of set 2
	dmovem	r0,temp2
	move	r1,0(top)
	movei	dim2,@-1(r1)	;get dim of set 2
	movei	dim1,@-4(r1)	;get dim of set 1
	dmove	addr1,temp1	;retrieve addrs
	dmove	lwb1,temp2	;retrieve lwbs
	movni	exp5,^d35(dim1)
	idivi	exp5,^d36
	hrl	exp5,exp5
	hrr	exp5,addr1
loop:	setzm	0(exp5)		;first empty destination set
	aobjn	exp5,loop
	hrli	addr1,440100	;make addrs byte ptrs
	hrli	addr2,440100
;
; Actual lwb of subset of set2 which will be moved is
;	lwb = max (lwb1,lwb2).
; Number of bits to be moved is
;	dim = max (0, min (lwb1+dim1,lwb2+dim2) - lwb).
;
	move	exp5,lwb1
	sub	exp5,lwb2
	jumpe	exp5,samelwb
	add	dim1,lwb1
	add	dim2,lwb2
	camle	dim1,dim2
	move	dim1,dim2
	jumpl	exp5,check2
	sub	dim1,lwb1
	jumple	dim1,rest.6
	ibp	exp5,addr2	;advance addr2 bptr
	move	addr2,exp5
	jrst	mover
check2:	sub	dim1,lwb2
	jumple	dim1,rest.6
	movm	exp5,exp5
	ibp	exp5,addr1
	move	addr1,exp5
	jrst	mover
samelwb:camle	dim1,dim2
	move	dim1,dim2
mover:	ildb	exp5,addr2
	idpb	exp5,addr1
	sojg	dim1,mover

done:	jrst	rest.6
	popj	top,
	prgend
	search	rtsym
	search	stsym
	$module	sunll
	$setop	(UN)
	prgend
	search	rtsym
	search	stsym
	$module	sinll
	$setop	(IN)
	prgend
	search	rtsym
	search	stsym
	$module	sdfll
	$setop	(DF)
	prgend
	search	rtsym
	search	stsym
	$module	slell
	$setop	(LE)
	$end	slell
	prgend
	search	rtsym
	search	stsym
	$module	seqll
	$setop	(EQ)
	$end	seqll
	prgend
	search	rtsym
	search	stsym
	$module	sinvl
	entry	in.vl
	$temp	bptemp,1
	lwb==r0
	result==r1

in.vl:
	movei	r1,4
	addb	r1,0(top)	;bump return address past args
	movei	r0,@-3(r1)	;get addr of set
	hrli	r0,430100	;make a bptr to the selected bit
	movem	r0,bptemp
	move	r0,@-4(r1)	;get value to test for membership
	subi	r0,@-2(r1)	;must not be less
	jumpl	r0,false	;  than lowerbound
	cail	r0,@-1(r1)	;and must be less
	jrst	false		;  than dimension + lwb
	move	r1,r0		;so adjbp works
	adjbp	r1,bptemp	;now indicates appropriate bit
	ldb	result,r1	;bit set indicates true membership
	popj	top,
false:	movei	result,0	;false return
	popj	top,
	prgend
	search	rtsym
	search	stsym
	$module	rsave6
;
; Register save routine called by various others.
;
	$RSAVE	6
	prgend
	search	rtsym
	search	stsym
	$module	rsave7
	entry	fail.7
	entry	rest.7,save.7
	result==r1
	$temp	rsave,7
;
; Register save/restore routine called by various others.
;
; FAIL.7 gives failure return for INDEX routines
;
save.7:
	$save	rsave,exp1,exp1+6
	jrst	0(r1)

fail.7:
	movei	result,0
rest.7:
	$restore rsave,exp1,exp1+6
	popj	top,
	end
  