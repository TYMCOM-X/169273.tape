
   0 Unable to open file $.

   1 A record with variants which contains a flexible array or string may not be
     assigned to.

   2 Include files may not be nested more than 3 levels.

   3 The file parameter in an i/o call must be a variable.

   4 A width parameter has been specified in a typed-file i/o statement.

   5 Invalid directive.

   6 The MACHINE_WORD type is only allowed with the SPECIAL(WORD) option set.

   7 Unclosed comment.

   8 Comments may not be nested more than 8 levels.

   9 Unopened comment.

  10 Unterminated string. Check for a string extending across
     a line boundary.

  11 Number expected.

  12 Invalid symbol "$" in input.

  13 The argument type is incompatible with the file component type.

  14 SIZE of a generic array requires that the lower and upper bounds be specified.

  15 Invalid option "$". The options supported are: check, debug, info, source,
     map, symbols, list, verbose, terse, overlay, optimize, storage, width,
     length, enable, disable.

  16 Parse stack overflow. The structure of the program was too complex;
     reduce the logical nesting of statements and/or expressions and
     recompile.  If this error persists, contact the compiler maintainance 
     personel.

  17 ";" expected.

  18 Missing THEN in IF statement.

  19 '=' used instead of ':='.

  20 DO expected.

  21 UNTIL expected.

  22 END expected.

  23 IF expected.

  24 Missing operand for "$".

  25 Missing expression.

  26 ")" expected.

  27 "]" expected.

  28 Range specification expected.

  29 Upper bound of range expected after ".."

  30 Missing predicate after IF.

  31 Missing FOR loop index variable.

  32 Missing predicate after UNTIL.

  33 Missing predicate after WHILE.

  34 Text follows logical end of program.

  35 Program identifier expected after PROGRAM.

  36 "." expected to terminate program.

  37 ";" found separating THEN and ELSE clauses.

  38 Missing initial value in FOR statement.

  39 Missing termination value in FOR statement.

  40 Program body expected.

  41 An argument in a formatted read statement is an element of a packed type.

  42 Body of main program must start with a BEGIN.

  43 Right hand side of assignment is missing.  Probable error in expression.

  44 Text follows end of statement.

  45 Invalid statement.

  46 Clause is not properly terminated. Check for an error in an expression.

  47 Declaration expected.

  48 Label name expected; a positive integer constant must be supplied.

  49 Expression giving the value of the constant is expected.

  50 ":" expected.

  51 An identifier giving the subroutine name must follow $.

  52 The procedure or function has no body.

  53 Parameter declaration expected.

  54 Identifier expected.

  55 "=" expected.

  56 "[" expected.

  57 OF expected.

  58 Improper use of semicolon.

  59 Case must contain at least one variant.

  60 "(" expected.

  61 A CASE statement must contain at least one case.

  62 No statement specified for this case. Check for an invalid statement.

  63 No record specified for WITH.

  64 No label specified as target of GOTO.

  65 Field identifier expected.

  66 Case label expected.

  67 Invalid case label.

  68 Set element types are incompatible.

  69 Type declaration expected.

  70 Index type expected in array declaration.

  71 The identifier is not a type identifier.

  72 One or more parameter names missing.

  73 The integer constant "$" is too large to be represented internally.

  74 An operand of "$" is of a type not acceptable to the operator.

  75 A text file is not allowed in this call.

  76 The identifier is a type or label name, and cannot be used in an
     expression.

  77 An expression used in this context must yield a constant result.

  78 $ cannot be assigned to.

  79 Identifier not declared.

  80 The expression is not a record.

  81 No such field in this record.

  82 The expression is not a pointer.

  83 The expression is not an array.

  84 Constant substring reference out of range.

  85 A procedure has been used where a function is expected.

  86 The value is not a procedure or function.

  87 Scalar valued expression expected.

  88 A declaration of this class ($) is not permitted except at level one.

  89 The storage class ($) is not permitted with this kind of declaration.

  90 Previously declared.

  91 Return type given for a procedure; the name will be declared as a
     function.

  92 No return type specified for a function.

  93 The options parameter in an open call must be a set of IO_OPTIONS.

  94 SIZE of a flexible array or string requires that the upper bound be specified.

  95 Division by constant zero.

  96 Lower bound of subrange is greater than upper bound.

  97 The elements of a set must be of a scalar type.

  98 Invalid type declaration.

  99 A begin-end group appears at the end of a non-main program.  The file
     is assumed to be a main program.

 100 A main program has no body.  The file is assumed to be an external
     declaration module instead.

 101 Compiler error.  Syntactic error not recovered from.  Correct all source
     program errors and recompile.  If this message persists, contact the
     compiler maintenance personnel.

 102 Variables or constants specified as EXTERNAL must not have an initial
     value specified.

 103 Undefined type $.

 104 Function name and parameter name conflict.

 105 String constant truncated to fit receiving field.

 106 Null string constant ('') padded to fit receiving char value.

 107 Forward declared procedure has no corresponding actual procedure.

 108 Variables declared local to a subroutine may not have an initial value
     specified.

 109 No initial value specified for constant.  Only constants declared as
     EXTERNAL should have no initial value.

 110 Type information required for PUBLIC or EXTERNAL constants.

 111 Case label conflicts with previous label.

 112 Invalid option name.

 113 Invalid option for actual procedure or function.  The option is only
     allowed for EXTERNAL declarations.

 114 Invalid option for external procedure or function.  The option may only
     be applied to an actual subroutine.

 115 Set elements must be of scalar type.

 116 Negative string length not allowed.

 117 Too many subscripts.

 118 The expression is not a string.

 119 A second subscript is not legal in a substring reference.

 120 ":" not allowed in an array subscript.

 121 An EXIT IF clause may only appear within a looping construct.

 122 A RETURN statement may only be used within a subroutine.

 123 A format may not be specified on the i/o string parameter.

 124 The index of a for loop may not be a parameter.

 125 The index of a for loop must be a simple identifier.

 126 The index of a for loop is not a scalar.  Only booleans, integers
     characters and declared scalar types are allowed.

 127 A simple expression is required in this context.

 128 The reference specified in a with is not a record value.

 129 The target of the GOTO is not a label.

 130 Argument is not $ in standard procedure/function call.

 131 No i/o arguments in read/write call.

 132 A format may not be specified on the file parameter.

 133 The only legal integer format codes are "O" and "H".

 134 The only legal real format code is "E".

 135 The only legal string format code is "L".

 136 A scalar type is required for case selection.

 137 The label has been previously defined.

 138 Label $ is not defined.

 139 The operands of "$" are of incompatible types.

 140 The expression can not be converted to type "$".

 141 The expression can not be converted to the required type.

 142 A file name string must be specified if the file parameter is not a simple
     variable.

 143 ADDRESS must be called with an addressable data reference.

 144 Too many format codes.

 145 The only data types which may be written to a TEXT file are
     INTEGER, REAL, CHAR, STRING and BOOLEAN.

 146 The only data types which may be read from a TEXT file are
     INTEGER, REAL, CHAR and STRING.

 147 Function used where a procedure is expected.

 148 The argument to ADDRESS is an element of a packed type.

 149 Argument in NEW or SIZE call does not correspond to a variant tag
     or flexible array bound.

 150 $ cannot be passed as a var parameter.

 151 Actual VAR parameter is not compatible with type "$".

 152 Actual VAR parameter is not compatible with the formal parameter type.

 153 Too many arguments.

 154 Missing argument(s).

 155 Actual VAR parameter is an element of a packed type.

 156 Too many values in array expression.

 157 Too few elements in array expression.

 158 Too many values in record expression.

 159 Trailing field value(s) omitted from record expression.

 160 Set constant truncated.

 161 Subscript list enclosed in "( ... )" instead of "[ ... ]".

 162 Attempt to dereference NIL or variable of type PTR.

 163 Type $ not previously declared.

 164 Real precision must be in the range 1..16.

 165 The specified bit size is too small.

 166 A bit size may not be specified with this type.

 167 The type may not be packed.

 168 A flexible type may only be used in a pointer type or parameter declaration.

 169 Only a parameter may be declared with a generic type.

 170 A star ("*") upper limit is not permitted in a real subrange.

 171 Declaration invalid in a DATAMODULE.

 172 Subroutine module compilation contains no public subroutines, and
     therefore cannot be accessed.

 173 Invalid octal digit.

 174 A condition declaration may only appear in the outermost block of
     a program or module.

 175 Condition identifier required.

 176 Pointer type conversions are allowed only with the SPECIAL(COERCIONS) option set.

 177 The PTR type is only allowed with the SPECIAL(PTR) option set.

 178 The argument to EXTENT cannot be a text file.

 179 Dimension parameter not allowed with $.

 180 Dimension parameter greater than number of array dimensions.

 181 Dimension parameter must be greater than zero.

 182 Wrong number of elements in (possibly multi-dimensional)
     array expression.

 183 Argument in SIZE call is not a type name or an unpacked data reference.

 184 Argument in SIZE call is an element of a packed type.

 185 Array subscript out of bounds.

 186 Undefined exponential operation.

 187 No such field in this record variant.

 188 Label $ is neither defined nor referenced.

 189 A binary file does not have a buffer variable.

 190 Assignment to a for loop index is forbidden.

 191 Label is not declared in this block.

 192 A binary file is not allowed in this call.

 193 Compiler error:  Bad reference expression structure detected during
     cross reference generation.  Please contact compiler maintenance personnel.

 194 This procedure or function is never called.

 195 Matching END for IF directive not found.

 196 END directive has no corresponding IF/IFNOT.

 197 The SOURCE directive is not allowed within a SYSTEM file.

 198 Switch name expected.

 199 Option value must be enclosed in parentheses.

 200 Option value expected.

 201 Unrecognized text follows directive on line.

 202 Page length not allowed.

 203 Page width not allowed.

 204 The bounds of the set type are outside the legal range.

 205 A record containing a flex array cannot be a parameter or a field of another
     record.

 206 The argument in a binary write is not an addressable reference.

 207 The argument in a binary i/o statement is an element of a packed type.

 208 An explicit size must to specified for a generic argument in a binary i/o
     statement.

 209 An explicit size must be specified for a flexible argument in a binary i/o
     statement.

 210 An excess format parameter has been specified on the argument of a binary
     i/o statement.

 211 This option may only be specified on a PROGRAM statement.

 212 The allocation mode must be between 0 and 99.

 213 Unable to open header file $.

 214 The OVERLAY option may only be specified on a MODULE statement.

 215 The DEBUG option may only be specified on a PROGRAM or MODULE statement.

 216 DEBUG and OPTIMIZE are incompatible options. Optimization will be suppressed.

 217 The "(*$...*)" option syntax is not recognized in this version of Pascal.

 218 The ADDRESS function is only allowed with the SPECIAL(COERCIONS) option set.

 219 Compiler error:  invalid expression. Correct all source program errors and
     recompile. If this message persists, please inform the compiler maintenance
     personnel.

 220 Invalid CHECK sub-option.

 221 Unclosed comment on directive line.

 222 Invalid include file name.

 223 A text file is required in this call.

 224 A typed file is not allowed in this call.

 225 Integer constants outside the range -(2**31)..(2**31)-1 are allowed only with
     the SPECIAL(WORD) option set.

 226 A width may not be specified on a character read.

 227 UPPERBOUND of a flexible or generic type is undefined.

 228 LOWERBOUND of a generic type is undefined.

 229 DIMENSION of a flexible or generic type is undefined.

 230 Argument in $ call is not a type name or a data reference.

 231 The STANDARD option is not yet implemented.

 232 Scalar expression out of range.

 233 Invalid SPECIAL sub-option.

 234 An upperbound must be specified for a flexible array or string.

 235 A tag value must be specified for a record with flexible variants.

 236 This subrange does not contain any elements.

 237 Declaration invalid in an ENVMODULE.

 238 An executable statement part is not allowed in an ENVMODULE.

 239 Undefined type $.

 240 Type $ undefined in environment.

 241 Bad real constant $.

 242 OVERLAY and MAINSEG are incompatible options.  The module will be compiled as
     a MAINSEG.

 243 The set type is too large.

 244 Unused message A.

 245 A handler clause must contain at least one handler.

 246 Condition name expected.

 247 Condition must be user-defined.

 248 Condition must be maskable.

 249 Handler label conflicts with previous label.

 250 There are no elements in the set range expression.

 251 Bad data in error record file.

 252 The pointer in a NEW call cannot be of type PTR.

  