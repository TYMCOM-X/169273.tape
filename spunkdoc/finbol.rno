.P0 .LM 0 .RM 73
.nojustify
.figure 20
.c;PROPOSED
.s1
.c;DESIGN
.s1
.c;FOR
.s1
.c;TYCOON FINANCIAL FUNCTIONS
.s15
.lm+40
Version 2.2
.br;April 7, 1976
.br;Tycoon Development Unit
.br;Technical Division
.lm-40
.page
.blank
DEPRECIATE
.s2
DEPRECIATE is a one-dimensional real array-valued function.
.s
Syntax:
.s1
.lm +5
.nofill
DEPRECIATE <cost> BY                ST
                                    SY [CROSSOVER ST]
           [<multiplier>] DB [CROSSOVER SY] [CROSSOVER ST]
.S1
       [TO <salvage value>] [FOR m PERIODS] WHERE LIFE = n
.fill
.s2
The BY clause indicates the method of depreciation:
ST for Straight Line, SY for Sum of Years' Digits and DB for
Declining Balance.
.s
DEPRECIATE returns an array of length m.
.s
    <multiplier>, <salvage value>, m and n are expressions.
.br
<cost> may be either a scalar expression or a one-dimensional real array expression.
If an array is given, one value is taken from the array for
each period and added into the amount being depreciated.
.br
    n must be be >=1 and is evaluated as an integer.
.br
    <multiplier>, if given, must be >1 and <=2.
.s1
.i-5
DEFAULT VALUES
.s1
    The default value for <multiplier> is 2.0, meaning that the
    rate of depreciation will be 2/n for the Declining Balance
    method.
.br
    The default for <salvage value> is 0.
.br
    The default value for m is n (plus the number of elements in <cost> minus one).
.s2
.i -5
CROSSOVERS
.s1
        It is legally permissible to change the method of 
        depreciation from Declining Balance to Straight
        Line, and when using the ADR method of accounting,
        from Declining Balance to Sum of Years' Digits and
        from SY to Straight Line.  This change is made when the
        depreciation for a given period as calculated by the second
        method applied to the depreciated value for the remainder
        of the depreciable life
        exceeds the depreciation for the same period
        calculated by the first method.
.page
.lm -5
METHODS
.s2
Let X = net cost = <cost> - <salvage value>
.br
Let Y(i) = depreciation for the i'th period.
.s1
1.##ST##Straight#Line
.lm +5
.p
        Let r = 1/n be the rate of depreciation.
.p
        Then,
.p
        Depreciation is r*X per period.
.s1
.i-5
Y(i) = r*X
.s2
.i-5
2.##DB##Declining#Balance
.s1
If the multiplier equals 2.0, this method is 
        known as "Double Declining Balance", because
the     legal rate is double that for Straight Line.
The rate of depreciation, r, equals <multiplier>/n.
.s1
.i-5
Y(i) = r*X*((1-r)_^(i-1))
.s1
        i.e., the rate is applied to the "book value" of the
        item (its value after depreciation).
.s2
Examples:
.s
.list
.le
LET Y(1:9) = DEPRECIATE 1000 BY ST WHERE LIFE = 9
.LE
LET DEDUCTIONS(1:10) = DEPRECIATE 1200.00 BY 1.25 DB CROSSOVER ST WHERE LIFE = 10
.LE
LET Y(1:6) = DEPRECIATE (F.COST+13500)/2 BY SY TO 450.00 FOR 6 PERIODS WHERE LIFE = 10
.end
.page
.i-5
3.##SY##Sum of Years' Digits.
.s2
        Let S = SUM(I for I=1 to n)
.s1
        Then the factor of depreciation applied to X
        for the i'th year is given as
.s1
.i 5
                F(i) = (n-i+1)/S
.s1
        Therefore,
.s1
.i-5;Y(i) = X*(n-i+1)/S
.page
.lm-5
COMPOUND and GROW
.s2
COMPOUND and GROW may return either scalar or one-dimensional array values.
.s
Syntax:
.s
.nofill
COMPOUND [ARRAY] v BY [ARRAY] r [TO [ARRAY] f ] [FOR n PERIODS]
   GROW                       ?             ?        ?
.fill
.s
v (initial value), r (rate), and f (final value) are expressions
or one-dimensional array expressions (determined by the absence or
presence of the word "ARRAY").
.br
n (number of periods) must be an expression, and is evaluated as an integer.
.s
Exactly one "?" must appear.
Its position indicates the quantity queried:
the rate, the final value, or number of periods.
Omission of the "TO" clause implies "TO ?".
In this case a single final value is returned and no question mark appears.
.s
COMPOUND returns a value such that
.lm+5
.s
f(i) = (v(i)+f(i-1))*(1+r(i))
.s
where f(0)=0 and i ranges from 1 to n.
.s
.lm-5
If no arrays are involved, this reduces to
.s
.lm+5
f = v*(1+r)_^n
.lm-5
.s2
GROW returns a value such that
.s
.lm+5
f(i) = v(i)+f(i-1)+r(i)
.s
where f(0)=0 and i ranges from 1 to n.
.s
.lm-5
If no arrays are involved, this reduces to
.s
.lm+5
f = v+n*r
.lm-5
.s2
If the word "ARRAY" appears with the question mark, the function
returns an array of values.
For instance, if an array of final values is requested by the appearance of the phrase "TO ARRAY ?", the function
computes one intermediate value for each period.
.s
If an array of rates is requested as a value then an
array of final values (f) must be provided.
If a scalar rate is requested then neither f nor v may be an array.
.s
If the number of periods (n) is queried then f may
not be an array.
.s
The default for n, if final values are queried, is the length
of the vector v (the length of the array v or the value 1 if v is a scalar).
If rates are queried then the default for n is MAX(length of the vector v, length of the vector f).
.s
If an array of initial values (v) is given, then each element of the array
is applied as an additive input in consecutive periods.
.s
The first input (v) is always considered to be applied at the present time
(the beginning of the first period).
The first output (f) occurs at the end of the first period.
.s2
Examples:
.s
.list
.le
LET FINAL = COMPOUND 852.40 BY .075 FOR 10 PERIODS
.LE
LET INTERMEDIATE(1:12) = COMPOUND STARTING BY .015 TO ARRAY ? FOR 12 PERIODS
.LE
LET FINAL = COMPOUND ARRAY INTERMEDIATE(1:12) BY .010 FOR 24 PERIODS
.LE
LET RATE = COMPOUND STARTING+750 BY ? TO FINAL
.LE
LET YEARS = COMPOUND STARTING+750 BY .065 TO FINAL FOR ? PERIODS
.els
.page
GROWS BY
.s2
Use is made of the GROW function.
.s
.list
.le;CUFFS:
.S
.i4;A(105.3, GROWS.BY)=20
.S
TYCOON:
.s
.I4;A(1:12)=GROW 105.3 BY 20 TO ARRAY ? FOR 12 PERIODS
.S
.LE;CUFFS:
.S
.I4;A(100,GROWS.BY)=[10 20 30 40 50 60]
.S
TYCOON:
.S
.I4;R(I)=10*I FOR I=1 TO 6
.I4;A(1:6)=GROW 100 BY R TO ARRAY ? FOR 6 PERIODS
.S
.END LIST
.S3
COMPOUNDS BY
.S2
Use is made of the COMPOUND function.
.s
.LIST
.LE;CUFFS:
.S
.I4;A(100,COMPOUNDS.BY)=.20
.S
TYCOON:
.S
.I4;A(1:12)=COMPOUND 100 BY .20 TO ARRAY ? FOR 12 PERIODS
.els
.page
DISCOUNT
.s2
DISCOUNT is a real-valued scalar function.
.s
Syntax:
.s
DISCOUNT [ARRAY] f BY [ARRAY] r [FOR n PERIODS]
.s2
f and r are scalar expressions or one-dimensional array expressions
(determined by the absence or presence of the word "ARRAY").
.br
n is an expression evaluated as an integer.
.s
DISCOUNT returns the present value of the cash flows in f,
whose last element is n periods in the future.
.s
The default value for n is the length of the vector f.
.s
If n is less than the length of f then only the first
n elements of f are used in the calculation.
If n is greater than the length of f then the last element of f is
discounted n periods, the next to last element is discounted n-1 periods, etc.
This gives the effect of a number of periods of no cash flows preceding
the cash flows in f.
.s
If an array of rates (r) is given then one element of the array is applied
as a rate for each period.
The number of elements of the array must be n.
.s
Let e represent the number of elements of f that are to be used in the
calculation.
.s
The value of the function is then
.s
.lm+5
SUM(f(i)/TOTAL.RATE(i) FOR i=1 to e)
.s
where
.s
TOTAL.RATE(i) = PROD(1+r(J) FOR J=1 to n-e+i)
.s2
.lm-5
Examples:
.s
.list
.le;BBL:
.s
.I4;LET X=0
.i4;DISCOUNT Y INTO X RATE = 20%
.s
TYCOON:
.S
.i4;X = DISCOUNT Y BY .20
.s
.le;BBL:
.s
.i4;T1=0
.i4;ROW1=6:0, 110, 120, 130, 140
.i4;DISCOUNT ROW1 INTO T1 RATE=15%
.s
TYCOON:
.s
.i4;I=I+1, ROW1(I)=X FOR X=110, 120, 130, 140 WHERE I=0
.i4;T1 = DISCOUNT ARRAY ROW1 BY .15 FOR 10 PERIODS
.S
In this case, the number of periods is greater than the length of the
array ROW1, specifying cash flows beginning 6 periods in the future.
.le;BBL:
.s
.I4;LET B1=0
.i4;DISCOUNT A(*) INTO B1 RATE = 10%
.s
TYCOON:
.s
.i4;B1 = DISCOUNT ARRAY A BY .10
.s
.le;BBL:
.s
.I4; No equivalent
.s
TYCOON:
.s
.i4;X = DISCOUNT ARRAY ROW1 BY .15 FOR 2 PERIODS
.s
In this case, only the first two elements of ROW1 are considered in the
calculation.
.end list
.page
TREND
.s2
TREND is not a function, but rather a statement.
.s
Syntax:
.s
TREND a
.s
a is a one-dimensional array or subarray.
The TREND statement has no effect if the number of elements of a is 2 or less.
.s
Let e denote the number of elements of a.
.s
Then the TREND statement has the following effect:
.lm+5
.s
LET a(i) = a(1) + (i-1)*(a(e)-a(1))/(e-1) FOR i=2 TO e-1
.lm-5
.s
In other words, TREND fills in the elements of a between the first and
last with linear interpolations of those two endpoint values.
.s
Examples:
.s
.list
.le;BBL:
.s
.i4;TREND A(1) TO A(5)
.s
TYCOON:
.s
.i4;TREND A(1:5)
.S
.LE;BBL:
.s
.i4;ASSUME A(*,*)
.i4;TREND COL2(1) TO COL2(6)
.s
TYCOON:
.s
.i4;TREND A(1:6,2)
.s
.i4;Or-
.s
.i4;NAME COL2=A(*,2)
.i4;TREND COL2(1:6)
.end list
.page
RATIO
.S2
Use is made of the Tymbasic array division capability.
.s
Examples:
.s
1.  LET COST.TO.NET.RATIO(YEAR.72:YEAR.75) =
.S
.I5;COST.OF.SALES(YEAR.72:YEAR.75)/NET.SALES(YEAR.72:YEAR.75)
.S
2.  LET P.AND.L.RATIO = P.AND.L(YEAR.75,*)/P.AND.L(YEAR.73,*)
.S
.PAGE
INTERNAL RATE OF RETURN
.s2
IRR is a real valued scalar function.
.s
Syntax:
.s
IRR Y
.s
where Y is a one-dimensional array expression.
.s
This operation assumes that cash flows are discrete lump-sum
payments at the end of each period (i.e., not continuous
or distributed throughout the period).  The Internal Rate of
Return calculation is limited to values between 0 and 1000
percent.  The value of the rate will be 0 if the sum of cash flows
is less than or equal to zero.
.s
The first element of the one-dimensional array Y specifies a cash flow at
the present time (the beginning of the first
period).
.s
Negative elements of Y represent cash inflows.
.s
The function will return a value R such that
.s
.i4;SUM(Y(i)/(1+R)_^(i-1) FOR i=1 TO n)=0
.S
where n is the length of the array Y (the number of periods being analyzed).
.p
Example:
.s1
.i4;RATE=IRR REVENUE(1:24,PRODUCT.TYCOON)
.PAGE
SUM, ACC
.s2
Use is made of Tymbasic array addition.
.s
Examples:
.s
.I4;DIM SALES(1:12), CUM.SALES(0:12)
.S
.LIST
.LE;TYMTAB:
.s
.s1
.I4;MAY=SUM JAN THRU MARCH
.S
TYCOON:
.s
.I4;SALES(MAY)=SUM(SALES(I) FOR I=JANUARY TO MARCH)
.S
.LE;TYMTAB:
.S
.I4;CUM.SALES=ACC SALES INITIAL 4000
.S
TYCOON:
.S
.I4;CUM.SALES(0)=4000
.I4;CUM.SALES(I)=CUM.SALES(I-1) + SALES(I) FOR I=1 TO 6
.S
.END LIST
.s1
 