	title	GCREF

	;Author:  Bob Hysick
	;Date:    4-Oct-78
	;Site:    University of Texas at Austin

;          Table of Contents for Global Cross Referencer
;
;
;			   Section			      Page
;
;    1. Constants and macro definitions ......................   2
;    2. Data .................................................   3
;    3. Main routine .........................................   4
;    4. LDIR .................................................   5
;    5. RDIR .................................................   6
;    6. SDIR .................................................   7
;    7. EXPAND ...............................................   8
;    8. COMBIN ...............................................   9
;    9. FRMT .................................................  10
;   10. NXTP .................................................  11
;   11. MERGE ................................................  12
;   12. GETI .................................................  13
;   13. GCHR. and PCHR. ......................................  14
;   14. CMP6 and CMP7 ........................................  15
;   15. DELETE ...............................................  16
;   16. OTRK .................................................  17
;   17. PSIX and PDEC ........................................  18
	subttl	Constants and macro definitions

	twoseg
	search	UUOSYM
	sall
	.directive flblst

	t1=1			;exceedingly temporary registers
	t2=2
	t3=3
	t4=4
	x1=5			;must be saved and restored if used
	x2=6
	x3=7
	x4=10
	chr=11			;character for I/O routines
	ptr=12			;byte pointer
	oc=13			;current output channel (for PCHR.)
	ic=14			;current input channel (for GCHR.)
	p=17			;subroutine stack pointer

	tab=11
	lf=12
	ff=14
	cr=15
	sp=40

	ochn=3			;channel for writing all files
	ichn=4			;start of a block of input channels
	maxmrg=17-ichn+1	;number of output channels available

	pdlsiz=20		;size of push down list
	bufsiz=200		;size of directory buffer
	linsiz=^D30		;number of words needed to store a line
	maxfil=^D100		;maximum number of files to proccess
	maxsix=377777777777	;largest positive SIXBIT word


define	msg (txt)
<
	outstr	[asciz txt
]
>

define	err. (txt)
<
	jrst	[outstr [asciz ?txt]
		 exit
		]
>

define	errn. (txt1,n,txt2)
<
	err.	txt1 'n 'txt2
>

define	save (reg)
<
xlist
	irp reg, <push	p,reg>
list
>

define	restor (reg)
<
xlist
	irp reg, <pop	p,reg>
list
>

define	fori (init,final,stmt)
<
xlist
	i==init
	repeat <final-init+1>, <
	  stmt
	  i==i+1
	>
list
>

define	put (where,what)
<
xlist
	t..==.
	reloc	where
	what
	reloc	t..
list
>

;	trkflg==1

	ifdef trkflg, <
	  trksiz==^D20*2	;block for tracking subroutines
trkblk:!  block	trksiz
	  trkptr==trkblk
	>

define	track (mod)
<
xlist
	ifdef trkflg, <
	 ifge <trkptr-trkblk-trksiz+1>, <printx Overflowing track block>

	 put trkptr, <t%'mod: sixbit /mod/>
	 put trkptr+1, <z>

	 aos	t%'mod+1	;;increment proccess count
	 trkptr==trkptr+2
	 >
list
>
	subttl	Data

pdl:	block	pdlsiz

defpat:	.PTFRD			;default path block
	block	1
ppn:	block	1		;PPN
	block	5		;SFDs
	z

dirbuf:	block	bufsiz		;directory input buffer

dirpat:	block	10		;path block to look up directory
	z
dirlkp:	block	4		;directory lookup block

files:	block	maxfil		;sorted file names from directory go here
nfiles:	block	1		;number of files with an extension of .GCR

opnblk:	block	3		;open blocks for all channels

bfhdr:	block	20*3		;buffer header blocks for all channels

ofile:	block	4		;enter block for .TMP files and COMBIN.OUT

ifile:	0,,.RBSPL		;lookup block for .GCR and .TMP files
	block	.RBSPL

linptr:	block	maxmrg		;pointer into LINBUF
linbuf:	block	linsiz*maxmrg	;temp buffer for first line of CREF

modnam:	block	2		;name of current module name (during format)

tmpfl1:	sixbit	/000  !/	;oldest TMP file remaining
tmpfl2:	sixbit	/000/		;most recent TMP file created

delblk:	z			;block for RENAME to delete a file
	z
	z
	z

ident:	block	20		;current identifier for input files

	reloc	400000		;start of static data

dirin:	iowd	bufsiz,dirbuf	;command list to read one buffer in dump mode
	z

ins.ou:	fori	0, 17, <errn. Channel, \i, cannot do output>
	put	ins.ou+ochn, <out ochn,>

ins.in:	fori	0, 17, <errn. Channel, \i, cannot do input>
	fori	ichn, ichn+maxmrg-1, <put ins.in+i, <in i,>>

ins.oc:	fori	0, 17, <errn. Channel, \i, not open for output>
	put	ins.oc+ochn, <sosge bfhdr+.bfctr+ochn*3>

ins.ic:	fori	0, 17, <errn. Channel, \i, not open for input>
	fori	ichn, ichn+maxmrg-1, <put ins.ic+i, <sosge bfhdr+.bfctr+i*3>>

ins.dp:	fori	0, 17, <errn. Channel, \i, not open for output>
	put	ins.dp+ochn, <idpb chr,bfhdr+.bfptr+ochn*3>

ins.ld:	fori	0, 17, <errn. Channel, \i, not open for input>
	fori	ichn, ichn+maxmrg-1,
		<put ins.ld+i, <ildb chr,bfhdr+.bfptr+i*3>>

bufptr:	fori	0, 17, <point 7,linptr+linsiz*i>
	subttl	Main routine

gcrf:	reset
	move	p,[iowd pdlsiz,pdl]
;	pushj	p,init		;initialize data and open channels

	;Lookup, read, and sort directory

	movei	x1,.IODMP	;dump mode
	hrlzi	x2,'DSK'
	setz	x3,		;no output buffers,, no input buffers
	open	ichn,x1		;open DSK to read the directory
	  err.	GCREF: Cannot open DSK to read directory

	pushj	p,ldir		;lookup the default directory
	pushj	p,rdir		;read the default directory
	skipn	nfiles		;any files to work with?
	err.	GCREF: No .GCR files in directory
	pushj	p,sdir		;sort the selected filenames

	releas	ichn,

	;Open output channel

	movei	x1,.IOASC	;ASCII mode
	hrlzi	x2,'DSK'	;device is DSK
	hrlzi	x3,bfhdr+ochn*3	;address of output buffer ring header block
	open	ochn,x1		;open output channel
	  err.	GCREF: Cannot open output channel

	;Open input channels

	hrrzi	x3,bfhdr+ichn*3	;address of first input buffer ring header
	movei	t1,maxmrg	;number of input channels to open
	skipa	t2,[open ichn,x1]
gcrf.1:	add	t2,[z 1,]	;advance to next channel
	xct	t2		;open input channel
	  err.	GCREF: Cannot open input channel
	addi	x3,3		;address of next buffer ring header
	sojg	t1,gcrf.1

	;Proccess input files

	outstr	[asciz /GCREF:/]
	pushj	p,expand	;break source files into TMP files
	pushj	p,combin	;create the global cross reference

	;Rename output file

	move	t1,['COMBIN']
	hrlzi	t2,'LST'
	setzb	t3,t4
	lookup	ichn,t1		;does the output file already exist?
	  jrst	gcrf.2		;no, we can safely rename to it
	movei	ic,ichn
	pushj	p,delete	;the file exists, so delete it
	move	t1,['COMBIN']
	hrlzi	t2,'LST'
	setzb	t3,t4
gcrf.2:	rename	ochn,t1		;rename the output file
	  err.	GCREF: Cannot rename output file to COMBIN.LST

ifdef trkflg, <
	pushj	p,otrk		;display stats
> ;end ifdef trkflg

	exit
	subttl	LDIR

	;Lookup the default directory on channel ICHN

ldir:	track	LDIR
	move	t1,[10,,defpat]
	path.	t1,		;look up the default path
	  err.	LDIR: PATH. UUO failed

	movei	t1,defpat+10	;end of SFD chain
	soj	t1,		;go up one level of SFDs
	skipn	(t1)		;SFD specified?
	jrst	.-2		;no, we haven't found the current SFD

	cain	t1,ppn		;any SFDs specified?
	jrst	ldir.1		;no, we've got the UFD
	move	t3,(t1)		;name of SFD to lookup
	movem	t3,dirlkp	;filename
	hrlzi	t3,'SFD'
	movem	t3,dirlkp+1	;extension
	setzm	dirlkp+2
	movei	t3,dirpat
	movem	t3,dirlkp+3	;path block

	addi	t1,dirpat-defpat-1
	move	t2,[defpat,,dirpat]
	blt	t2,(t1)		;copy the directory where the SFD is located
	setzm	1(t1)
	jrst	ldir.2

ldir.1:	move	t3,ppn		;default PPN is name of file to lookup
	movem	t3,dirlkp
	hrlzi	t3,'UFD'
	movem	t3,dirlkp+1	;extension
	setzm	dirlkp+2
	move	t3,[1,,1]	;MFD PPN
	movem	t3,dirlkp+3

ldir.2:	lookup	ichn,dirlkp	;lookup the directory
	  err.	LDIR: Cannot lookup directory
	popj	p,
	subttl	RDIR

	;Read the directory, and save any files with an extension
	;of .GCR in the array FILES (the extension isn't saved).

rdir:	track	RDIR
	move	t3,[-maxfil-1,,files-1]

rdir.1:	in	ichn,dirin	;read a block of the directory
	  jrst	rdir.2		;no errors
	getsts	ichn,t1
	trne	t1,IO.EOF	;EOF?
	jrst	rdir.4		;yes, done
	err.	RDIR: INPUT failed while reading directory

rdir.2:	skipa	t2,[dirbuf]	;address of directory buffer
rdir.3:	addi	t2,2		;point to next file
	cail	t2,dirbuf+bufsiz
	jrst	rdir.1		;done with this buffer
	skipn	(t2)
	jrst	rdir.1		;zero entry, get the next block
	hlrz	t1,1(t2)	;get file extension
	caie	t1,'GCR'	;is it what we want?
	jrst	rdir.3		;no, try the next one

	aobjp	t3,[err. RDIR: Too many files]
	move	t1,(t2)		;get filename
	movem	t1,(t3)		;save it
	jrst	rdir.3

rdir.4:	hrrzi	t3,(t3)
	subi	t3,files-1	;number of files with an extension of .GCR
	movem	t3,nfiles

	popj	p,
	subttl	SDIR

	;Sort the filenames in FILES in ascending order.

sdir:	track	SDIR
	save	<x1,x2>

	movn	t1,nfiles	;number of filenames to sort
	hrli	x1,(t1)		;set up outer loop  index
	hrri	x1,files-1
sdir.1:	aobjp	x1,sdir.3	;jump if finished sorting

	move	x2,x1		;set up inner loop index
	sub	x2,[1,,0]
sdir.2:	aobjp	x2,sdir.1

	pushj	p,cmp6		;compare filenames pointed to by X1 and X2
	jumple	t1,sdir.2	;already in order

	move	t1,(x1)		;switch (X1) and (X2)
	exch	t1,(x2)
	movem	t1,(x1)
	jrst	sdir.2

sdir.3:	restor	<x2,x1>
	popj	p,
	subttl	EXPAND

expand:	track	EXPAND
	save	<x1>

	movn	x1,nfiles	;number of files to format
	hrli	x1,(x1)
	hrri	x1,files	;top of file list

expa.1:	move	t1,(x1)		;name of file to format
	movem	t1,modnam	;default name of module

	outchr	[TAB]
	pushj	p,psix		;print the module name
	setzm	ifile+.RBPPN
	move	t1,(x1)		;get file name
	movem	t1,ifile+.RBNAM
	hrlzi	t1,'GCR'
	movem	t1,ifile+.RBEXT
	lookup	ichn,ifile
	  err.	Cannot lookup source file

	skipn	t1,ifile+.RBSPL	;spooled output name given?
	jrst	expa.2		;no, file name is good enough for module name
	movem	t1,modnam	;use spooled output name for module name
	outstr	[asciz / (/]
	pushj	p,psix
	outchr	[")"]
expa.2:	outstr	[byte (7) 15,12]
	movei	ic,ichn		;current input channel

	pushj	p,frmt		;format the file
	aobjn	x1,expa.1	;loop for rest of files

	restor	<x1>
	popj	p,
	subttl	COMBIN

	;This routine is the heart of the program.  It combines the
	;.TMP files into a single output file, COMBIN.LST, through
	;a series of merges.

combin:	track	COMBIN
	save	<x1>
	msg

comb.1:	msg	[Merging]
	move	x1,tmpfl2	;last TMP file created
	sub	x1,tmpfl1	;oldest TMP file left
	aoj	x1,		;number of TMP files remaining
	caile	x1,maxmrg
	movei	x1,maxmrg	;there are more than MAXMRG TMP files

	movei	t1,(x1)		;number of files to merge
	move	t2,[lookup ichn,ifile]
	move	t3,tmpfl1	;oldest TMP file left
	movem	t3,ifile+.RBNAM	;will be first to be merged
	hrlzi	t3,'TMP'
	movem	t3,ifile+.RBEXT
comb.2:	setzm	ifile+.RBPPN
	xct	t2		;open file for input
	  err.	Cannot open input file
	add	t2,[z 1,]	;build LOOKUP for next channel
	aos	ifile+.RBNAM	;name of next TMP file to be merged
	sojg	t1,comb.2

	aos	t1,tmpfl2	;name of next TMP file to create
	movem	t1,ofile
	hrlzi	t1,'TMP'
	movem	t1,ofile+1
	setzm	ofile+2
	setzm	ofile+3
	enter	ochn,ofile	;open output file
	  err.	COMBINE: Cannot open output file
	movei	oc,ochn		;current output file

	pushj	p,merge		;merge the files

	close	ochn,		;update TMP output file
	move	t1,tmpfl1
	addi	t1,(x1)		;update oldest TMP file remaining
	movem	t1,tmpfl1

	camge	t1,tmpfl2	;done?
	jrst	comb.1		;no, keep on merging

	restor	<x1>
	popj	p,
	subttl	FRMT

	;Format the input file into 1 or more temporary cross reference
	;files to be merged into a single global cross reference.  The
	;input file is deleted.
	;
	;INPUT:
	;  ICHN:   The file to be formatted (and deleted) must be open
	;	   on this channel.
	;  MODNAM: The default module name for the first cross reference
	;	   list in this file (the file name).
	;
	;OUTPUT:
	;  TMPFL2: The name of the most recently created TMP file.

frmt:	track	FRMT
	save	<x1,x2,ptr>

	move	x2,[maxsix]	;largest possible SIXBIT word
	movei	chr,FF		;we have just started a new page

frmt.1:	pushj	p,nxtp		;locate next cross reference page
	  jrst	frmt.9		;no more cross reference pages in file
	jumpe	x1,frmt.2	;page didn't start with new identifier

	move	t1,x2		;save previous identifier
	movem	x1,x2		;new current identifier
	caml	x1,t1		;are they correctly ordered?
	jrst	frmt.2		;yes, no need to start a new TMP file

	close	ochn,		;close any file that may have been open
	aos	t1,tmpfl2	;name of next TMP file to create
	hrlzi	t2,'TMP'
	dmovem	t1,ofile
	setzm	ofile+2
	setzm	ofile+3
	enter	ochn,ofile	;open next TMP file
	  err.	FRMT: Cannot open TMP file
	movei	oc,ochn		;current output file

	;Proccess next line of cross reference

frmt.2:	pushj	p,gchr.		;get first character of line
	  jrst	frmt.9		;finished formatting file
	caig	chr,40		;character is legal in an identifier?
	cain	chr,TAB		;character is a tab?
	jrst	.+2		;yes, it's a legal beginning of line char
	jrst	frmt.1		;blank line or trash -- ignore rest of page

	setz	x1,		;no identifier seen on line yet
	move	ptr,[point 6,x1] ;where to put identifier when found
	jrst	frmt.4
frmt.3:	subi	chr,40		;change ASCII character to SIXBIT
	idpb	chr,ptr		;build up identifier
	pushj	p,gchr.		;get next character
	  jrst	frmt.8		;unexpected EOF
frmt.4:	pushj	p,pchr.		;output character of identifier
	caie	chr,TAB		;end of identifier?
	jrst	frmt.3		;no, keep on going

	jumpe	x1,frmt.6	;jump if line didn't start with identifier
	movem	x1,x2		;we have a new current identifier
	movei	chr,40		;output a blank before the identifier
	pushj	p,pchr.
	move	ptr,[point 6,modnam]
frmt.5:	ildb	chr,ptr		;get SIXBIT character of module name
	jumpe	chr,frmt.6
	addi	chr,40		;change to ASCII
	pushj	p,pchr.		;output it
	jrst	frmt.5

frmt.6:	movei	chr,TAB
	pushj	p,pchr.		;output a tab

frmt.7:	pushj	p,gchr.		;get character from cross reference
	  jrst	frmt.8		;unexpected EOF
	pushj	p,pchr.
	caie	chr,LF		;finished with line?
	jrst	frmt.7		;no, more to go
	jrst	frmt.2		;get next line of cross reference

frmt.8:	msg	FRMT: Unexpected EOF in source file

frmt.9:	close	ichn,		;close the input file
	close	ochn,		;close the output file

	restor	<ptr,x2,x1>
	popj	p,
	subttl	NXTP

	;Skip to the next page with a cross reference list on it,
	;throwing away any text that comes before it.
	;
	;	PUSHJ	P,NXTP
	;	  EOF found before cross reference list
	;	found cross reference list
	;
	;INPUT:
	;  ICHN:   the input file must be open on this channel
	;  CHR:    if FF, will assume new page just started
	;
	;OUTPUT:
	;  LINBUF: the first line of the cross reference list
	;  LINPTR: a pointer to LINBUF
	;  MODNAM: the module name, if any was found
	;  X1    : the identifier from the first line, or else 0
	;  The input buffers will be positioned at the second line of
	;    the cross reference listing.
	;
	;The cross reference list is located by finding the first page
	;without a character greater than "9" on the first line of the
	;page, starting after the sixth character or the first tab.

nxtp:	track	NXTP
	setz	x1,		;no module name seen yet
	cain	chr,FF		;already on new page?
	jrst	nxtp.3		;yes, don't skip to the next page

	;Find next page

nxtp.1:	setz	x1,		;here when abort out of scanning module name
nxtp.2:	pushj	p,gchr.		;get next character from input file
	  jrst	nxtp.9		;EOF while searching for CREF page
	caie	chr,FF		;is the character a form feed?
	jrst	nxtp.2		;no, we haven't got a new page yet

	;Read first line on page

nxtp.3:	move	t1,bufptr(ic)	;pointer to line buffer
nxtp.4:	pushj	p,gchr.		;get next character from first line of new page
	  jrst	nxtp.9		;EOF while reading first line of page
	cain	chr,FF		;form feed?
	jrst	nxtp.3		;yes, that page had no lines
	idpb	chr,t1		;save the character
	caie	chr,LF
	jrst	nxtp.4		;not EOL
	setz	chr,
	idpb	chr,t1		;terminate line with zero byte

	;Read first word (up to 6 characters) and store in X1.
	;If this isn't a cross reference page the first word will be
	;the module name, otherwise the first word will be the first
	;identifier on the page.

repeat 0, <
	jumpe	x1,nxtp.5	;jump if no module name found
	camn	x1,modnam	;same as the old one?
	jrst	nxtp.5		;yes, don't bother with anything
	camn	x1,[sixbit /MAIN./]
	jrst	nxtp.5		;boy is FORTRAN dumb!
	movem	x1,modnam	;save the new module name
	outchr	[TAB]
	move	t1,x1
	pushj	p,psix		;output the new module name to the TTY
	outstr	[byte (7) 15,12]
>

nxtp.5:	move	t1,bufptr(ic)	;pointer to line buffer
	move	t2,[point 6,x1]
	setz	x1,
	skipa	t3,[6]		;max length of identifier or module name
nxtp.6:	idpb	chr,t2		;build module name
	ildb	chr,t1		;get character from first line of new page
	cain	chr,TAB
	jrst	nxtp.7		;tab -- end of symbol
	caile	chr,137		;lower case?
	subi	chr,40		;yes, change to upper case
	subi	chr,40		;change to SIXBIT
	jumple	chr,nxtp.1	;not a valid identifier constituent
	sojge	t3,nxtp.6	;keep on going until we've read 6 characters
	jrst	nxtp.2		;more than 6 characters

	;Check rest of line for any character > "9"

nxtp.7:	ildb	chr,t1
	jumpe	chr,nxtp.8	;first line of cross reference list
	caig	chr,"9"
	jrst	nxtp.7		;no invalidating characters yet
	jrst	nxtp.2		;char > "9" -- can't be cref line

nxtp.8:	move	t1,bufptr(ic)	;pointer to line buffer
	movem	t1,linptr(ic)	;make GCHR. look in LINBUF for the next char
	aos	(p)		;found a cross reference, so take skip return
nxtp.9:	popj	p,
	subttl	MERGE

	;Merge X1 files together, starting with the file on channel
	;ICHN and going through ICHN+X1-1.

merge:	track	merge
	save	<x1,x2>
	movni	x2,(x1)		;negative number of files to merge
	hrlzi	x2,(x2)
	hrri	x2,ichn		;form loop index

	move	ic,x2
merg.1:	pushj	p,geti.		;get first identifier in file
	  err.	MERGE: Unexpected EOF in TMP file
	aobjn	ic,merg.1

	setz	x1,		;current identifier

merg.2:	move	t1,[maxsix]	;smallest identifier so far
	seto	t2,		;channel of smallest identifier
	move	ic,x2
merg.3:	camg	t1,ident(ic)	;is current min greater than identifier?
	jrst	merg.4		;no, forget it
	hrrzi	t2,(ic)		;channel of smallest identifier so far
	move	t1t(ic)	;smallest identifier so far
merg.4:	aobjn	ic,merg.3

	jumpl	t2,merg.9	;EOF on all files (they've been deleted)
	movei	ic,(t2)		;channel to get input from

	camn	t1,x1		;same as last identifier output?
	jrst	merg.0		;yes, don't output it again
	movem	t1,x1		;new current identifier
merg.5:	setz	t2,
	rotc	t1,6		;get a SIXBIT character
	addi	t2,40		;change it to ASCII
	movei	chr,(t2)
	pushj	p,pchr.		;output the character
	jumpn	t1,merg.5

merg.0:	movei	chr,TAB		;end identifier with a tab
	jrst	merg.7
merg.6:	pushj	p,gchr.		;get next character from line
	  err.	MERGE: Unexpected EOF in TMP file
merg.7:	pushj	p,pchr.		;output it
	caie	chr,12		;EOL?
	jrst	merg.6		;no, keep on copying

	pushj	p,gchr.		;get first character of next line
	  jrst	merg.8		;EOF, time to close out this file
	cain	chr,TAB		;is it a continuation of the previous line?
	jrst	merg.7		;yes, copy it over also

	pushj	p,geti%		;get the identifier from this line
	  skipa			;whoops, EOF!
	jrst	merg.2		;continue merging

merg.8:	move	t1,[maxsix]
	movem	t1,ident(ic)	;signal EOF with max SIXBIT word
	movei	t1,(ic)
	pushj	p,delete	;delete the TMP file
	jrst	merg.2		;continue merging

merg.9:	restor	<x2,x1>
	popj	p,
	subttl	GETI

	;Get identifier from beginning of line.
	;
	;INPUT:
	;  IC:	current input channel
	;
	;	PUSHJ	P,GETI
	;	  EOF on input file
	;	identifier returned in IDENT(IC)

geti.:	pushj	p,gchr.		;get first character of line
	  popj	p,		;EOF
geti%:	move	t1,[point 6,t2]
	setz	t2,

geti.1:	cain	chr,TAB		;done?
	jrst	geti.2		;yes
	subi	chr,40		;change ASCII character to SIXBIT
	idpb	chr,t1		;add it to identifier
	pushj	p,gchr.		;get next character of identifier
	  popj	p,		;EOF
	jrst	geti.1

geti.2:	movem	t2,ident(ic)	;save this channel's current identifier
	aos	(p)		;got identifier, so take skip return
	popj	p,
	subttl	GCHR. and PCHR.

	;Return the next character from LINBUF.  If LINBUF is empty,
	;get the next character from the file opened on ICHN.
	;
	;	PUSHJ	P,GCHR.
	;	  EOF on ICHN
	;	character is in CHR

	sixbit	/GCHR./
gchr.:	track	GCHR.
	skipe	linptr(ic)	;any characters left in LINBUF?
	jrst	gchr.4		;yes, get character from there
gchr.1:	xct	ins.ic(ic)	;any characters left in input buffer?
	jrst	gchr.3		;no, get another buffer
	xct	ins.ld(ic)	;get character from input buffer
	jumpe	chr,gchr.1	;ignore nulls
gchr.2:	aos	(p)		;we have a character, so take skip return
	popj	p,

gchr.3:	xct	ins.in(ic)	;get next buffer
	jrst	gchr.1		;input was successful
	movei	t1,(ic)		;get channel problem occurred on
	lsh	t1,^D23		;shift to accumulator field
	add	t1,[getsts 0,t1]
	xct	t1		;find out what went wrong
	trne	t1,IO.EOF	;EOF?
	popj	p,		;yes, non-skip return
	err.	GCHR.: IN UUO failed

gchr.4:	ildb	chr,linptr(ic)	;get character from LINBUF
	jumpn	chr,gchr.2	;got a character
	setzm	linptr(ic)	;LINBUF was empty
	jrst	gchr.1


	;Output the character in CHR to the file opened on OCHN.
	;
	;	MOVE	CHR,character
	;	PUSHJ	P,PCHR.

pchr.:	track	PCHR.
pchr.1:	xct	ins.oc(oc)	;more room in output buffer?
	jrst	pchr.2		;no, dump the buffer
	xct	ins.dp(oc)	;add character to output buffer
	popj	p,

pchr.2:	xct	ins.ou(oc)	;dump the output buffer
	jrst	pchr.1		;output was successful
	err.	PCHR.: OUT UUO failed
	subttl	CMP6 and CMP7

	;Compare the SIXBIT words pointed to by X1 and X2, and return
	;T1 as follows:
	;
	;	T1 = -1  if  (X1) < (X2)
	;	T1 =  0  if  (X1) = (X2)
	;	T1 = -1  if  (X1) > (X2)

	sixbit	/CMP6/
cmp6:	track	CMP6
	setz	t1,
	move	t2,(x1)
	camn	t2,(x2)
	jrst	cmp6.1
	camg	t2,(x2)
	jrst	cmp6.1		;(X1) = (X2)
	camg	t2,(x2)
	skipa	t1,[-1]		;(X1) < (X2)
	movei	t1,1		;(X1) > (X2)
	eqv	t2,(x2)
	tlnn	t2,400000
	movn	t1,t1		;signs are different, so reverse result
cmp6.1:	popj	p,


	;Compare the ASCII words stored in the register pairs X1 & X2
	;and X3 & X4, and return T1 as follows:
	;
	;	T1 < 0  if  X1,X2 < X3,X4
	;	T1 = 0  if  X1,X2 = X3,X4
	;	T1 > 0  if  X1,X2 > X3,X4
	;
	;It is assumed that the rightmost bit of X1, X2, X3, and X4 is 0.

	sixbit	/CMP7/
cmp7:	track	CMP7
	lshc	x1,-1		;make sure the sign bit is 0
	lshc	x3,-1

	move	t1,x1
	sub	t1,x3		;form answer
	jumpn	t1,cmp7.1

	move	t1,x2
	sub	t1,x4		;first word was equal, so use second word

cmp7.1:	lshc	x1,1		;shift back to original configuration
	lshc	x3,1
	popj	p,
	subttl	DELETE

	;Delete the file opened on the channel in IC.

	sixbit	/DELETE/
delete:	track	DELETE
	setzb	t1,t2
	dmovem	t1,delblk
	dmovem	t1,delblk+2	;zero out the delete block
	movei	t1,(ic)		;get channel file is opened on
	lsh	t1,^D23		;shift to the AC field
	add	t1,[rename 0,delblk]
	xct	t1		;delete the file
	  msg	DELETE: Cannot delete input file
	popj	p,
	subttl	OTRK

	;Output track information

ifdef trkflg, <

	sixbit	/OTRK/
otrk:	save	<x1>
	msg	Track Information:

	movei	x1,trkblk	;address of first track block
otrk.1:	move	t1,(x1)		;SIXBIT name of tracked routine
	jumpe	t1,otrk.2	;zero entry signals end

	pushj	p,psix		;output routine name
	outchr	[TAB]
	move	t1,1(x1)	;get number of times routine was called
	setzm	1(x1)		;zero out the entry
	pushj	p,pdec		;output the number
	outstr	[byte (7) 15,12]

	addi	x1,2		;point to next track block
	caige	x1,trkblk+trksiz
	jrst	otrk.1		;take care of rest of blocks
otrk.2:	restor	<x1>
	popj	p,

> ;end ifdef trkflg
	subttl	PSIX and PDEC

	;Output the the TTY the SIXBIT string in T1.

	sixbit	/PSIX/
psix:	track	PSIX
	skipn	t1
	jrst	psix.2		;T1 is 0, so don't bother
psix.1:	setz	t2,
	rotc	t1,6		;get SIXBIT character
	addi	t2,40		;change to ASCII
	outchr	t2		;output it
	jumpn	t1,psix.1
psix.2:	popj	p,


	;Output decimal number from T1 to TTY.

pdec:	track	PDEC
	setz	t3,		;initialize digit count

pdec.1:	idivi	t1,^D10		;get least significant digit
	push	p,t2		;save it
	aoj	t3,		;chalk up another digit
	jumpn	t1,pdec.1	;get rest of digits

pdec.2:	movei	t1,-1(t3)
	idivi	t1,3		;compute number of commas that will be printed
	addi	t1,(t3)		;total number of characters in number
	subi	t1,^D11		;subtract desired field width
	aojg	t1,pdec.3
	outchr	[" "]		;output correct number of leading blanks
	jrst	.-2

pdec.3:	movei	t1,-1(t3)
	idivi	t1,3
	aoj	t2,		;T2 gets number of digits before first comma

pdec.4:	pop	p,t1		;get most significant digit
	addi	t1,60		;change it to ASCII
	outchr	t1		;print it
	sojle	t3,pdec.5
	sojn	t2,pdec.4	;not time to output a comma yet
	outchr	[","]
	movei	t2,3
	jrst	pdec.4

pdec.5:	popj	p,

	end	gcrf
"OAq