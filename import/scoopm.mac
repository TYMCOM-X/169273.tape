;
;	SCOOP - MANAGEMENT SYSTEM FOR USER NOTICES
;	AUTHOR:	CLIVE B. DAWSON
;		U.T. AUSTIN
;	DATE:	20-OCT-75
;
;	THIS FILE CONSISTS OF MACRO SUBROUTINES TO SUPPORT SCOOP.
;
	SEARCH JOBDAT
	TWOSEG
	RELOC 400000

	A=1
	B=2
	C=3
	D=4
	ARG=16
	P=17

;	SUBROUTINE CLRTTY
;	   TO CLEAR INPUT BUFFER
;
CLRTTY:: CLRBFI
	POPJ	P,

;	SUBROUTINE INCHR(LOC)
;	   TO SEND BACK A CHARACTER IN LOC FROM TTY
;
INCHR:: INCHRW	@(ARG)
	POPJ	P,


;	SUBROUTINE OUTSTR
;	   To type out an ASCIZ character string
;	   OUTSTC follows it with a CRLF

OUTSTR::  TTCALL 3,@(ARG)
	POPJ	P,
OUTSTC:: TTCALL 3,@(ARG)
	TTCALL 3,[ASCIZ/
/]
	POPJ	P,


;	FUNCTION GETPOS
;	   TO RETURN HORIZONTAL POSITION OF CARRIAGE
;
GETPOS::  SETZ	0,			;CLEAR 0
	PJOB	A,			;GET UNIV. LINE #
	TRMNO.	A,
	  POPJ	P,			;NO LINE
	MOVEM	A,POSBLK+1
	MOVE	0,[XWD 2,POSBLK]	;SET UP POINTER
	TRMOP.	0,
	  HALT
	POPJ	P,			;GOT IT

;	SUBROUTINE CTLO
;	   TO CANCEL A CONTROL O
;
CTLO::	PUSHJ	P,WAIT			;WAIT FOR OUTPUT TO STOP
OFFO:	SKPINL				;CANCEL ^O
	 JFCL
	POPJ	P,
;	SUBROUTINE WAIT
;	  WAITS FOR OUTPUT TO STOP ON TTY
;
WAIT::	PJOB	A,			;GET UNIV. LINE #
	TRMNO.	A,
	  POPJ  P,			;IF NO TTY, THERE'S NO ^O!
	MOVEM	A,TRMBLK+1		;STORE LINE
	MOVE	B,[XWD 4,1]		;SET UP HIBER
	MOVE	A,[XWD 2,TRMBLK]	;SET UP TRMOP.
	TRMOP.	A,			;OUTPUT DONE?
	  HALT
	JUMPE	A,CPOPJ			;YES
	HIBER 	B,			;NO, SLEEP A BIT
	  JFCL
	JRST	.-6

;	SUBROUTINE WHO
;	  TO GET PPN INTO LOC. USER
;
WHO::	GETPPN	A,			;WHO ARE WE?
	MOVEM	A,USER##		;STORE
CPOPJ:	POPJ	P,

;	SUBROUTINE SCNLIN
;	   TO SCAN THE COMMAND LINE, AND STORE AN ITEM NUMBER INTO
;	   ONEIT, AND A FUNCTION LETTER INTO ONEIT+1=TASK.
;
SCNLIN:: RESCAN
	SETZB	A,ONEIT##
	SETZM	ONEIT##+1
SAV:	INCHRS	C			;GET ONE
	  JRST  GOTIT			;NO MORE
	CAIN	C," "			;SKIP BLANKS
	JRST	SAV			;LOOP
	CAIE	C,"S"			;IGNORE ALPHAS ALSO, UNLESS AN S WORD
	CAIN	C,"s"
	SKIPA
	JRST	SAV
POS1:	INCHRS	C
	  JRST GOTIT
	CAIE	C," "			;NOW SKIP THE S WORD
	CAIN	C,"-"			;ONLY ALLOW BLANK AND DASH
	SKIPA
	JRST	POS1
POSARG:	INCHRS	C			;GET ANOTHER
	  JRST	GOTIT			;RETURN
	CAIE	C," "			;FLUSH BLANKS
	CAIN	C,"-"			;AND DASHES
	JRST	POSARG
DIG:	CAIG	C,"9"			;A DIGIT?
	CAIGE	C,"0"
	JRST	LET			;NOPE
	IMULI	A,12			;PACK IT
	ADDI	A,-60(C)
	MOVEM	A,ONEIT##
	INCHRS	C
	  JRST  GOTIT			;RETURN
	JRST	DIG			;LOOP
LET:	SKIPN	A			;IF A NUMBER
	CAIN	C,15			;OR A CR,
	JRST	GOTIT			;WE ARE DONE
	CAILE	C,140			;LOWER CASE?
	TRZ	C,40			;YES, CONVERT
	MOVEM	C,ONEIT##+1		;STORE IN TASK
	JRST	GOTIT			;RETURN
GOTIT:	CLRBFI				;FLUSH
	POPJ	P,

;	SUBROUTINE TEMPC
;	SETS UP A CCL FILE WITH A REQUEST FOR QUEUE
;
TEMPC::	MOVE	A,[XWD 3,TMPHD]
	TMPCOR	A,
	JRST	TMPERR
	POPJ	P,
TMPERR:	PJOB	A,		;GET JOB NUMBER
	MOVEM	A,JOBNUM##		;STORE IT
	JRST	TMPFIL##			;GO STRAIGHT TO TMPFIL
TMPHD:	SIXBIT	/QUE/
	IOWD	^D10,TMP##

;	SUBROUTINE RUNN(DEV,FILE,EXT,PPN,OFFSET)
;	DOES A RUN UUO
;
RUNN::	MOVE	A,(ARG)			;GET ADR OF DEVICE
	HRLI	A,440700		;MAKE A BYTE PTR
	MOVE	B,[POINT 6,RUNBLK]
	PUSHJ	P,ASCSIX		;CONVERT TO SIXBIT
	MOVSI	A,(SIXBIT/SYS/)		;WE ASSUME SYS IF
	SKIPN	RUNBLK			;THE DEVICE WAS ZERO
	MOVEM	A,RUNBLK
	MOVE	A,1(ARG)		;GET FILE NAME PTR
	HRLI	A,440700
	MOVE	B,[POINT 6,RUNBLK+1]
	PUSHJ	P,ASCSIX
	MOVE	A,2(ARG)		;GET EXT
	HRLI	A,440700
	MOVE	B,[POINT 6,RUNBLK+2]
	PUSHJ	P,ASCSIX
	MOVE	A,@3(ARG)		;GET PPN
	MOVEM	A,RUNBLK+4
	MOVS	A,@4(ARG)		;GET OFFSET
	HRRI	A,RUNBLK		;SET UP RUN AC
	RUN	A,			;BYE-BYE
	HALT

;	SUBROUTINE ASCSIX
; 	CONVERT ASCII TO SIXBIT--FROM BP A TO BP B
;
ASCSIX:	ILDB	C,A
	JUMPE	C,CPOPJ		;EXIT ON ZERO BYTE
	SUBI	C,40		;CONVERT TO SIXBIT
	IDPB	C,B
	JRST	ASCSIX

;	SUBROUTINE LKUP
;	  TO FIND OUT IF A FILE IS ON SYS WITHOUT ABORTING
;	  ONLY DESIGNED FOR SCOOP.TXT OR NOTICE.TXT AT PRESENT!!!!
;
LKUP::	MOVE	A,@(ARG)		;GET NAME OF FILE
	PUSH	P,B			;SAVE AC 2
	CAMN	A,[ASCII/SCOOP/]	;IS IT SCOOP
	MOVEI	B,SCPBLK
	CAMN	A,[ASCII/NOTIC/]
	MOVEI	B,NOTBLK		;NOTE: IT BETTER ONLY BE THESE TWO!
	INIT	15,0			;GRAB CHANNEL 15
	SIXBIT	/SYS/
	0
	HALT
	SETO	0,			;OPTIMISTIC
	LOOKUP	15,@B			;SEE IF ITS THERE
	  SETZ	0,			;NOPE
	RELEAS	15,			;RETURN CHANNEL
	POP	P,B			;RESTORE AC 2
	POPJ	P,


;	SUBROUTINE UNVDAY(DATE)
;	   RETURNS THE UNVIERSAL DAY-TIME
;
UNVDAY:: MOVE	A,[XWD 53,11]		;SET UP GETTAB
	GETTAB	A,
	  HALT				;ERROR
	MOVEM	A,@(ARG)
	POPJ	P,			;RETURN


;SUBROUTINE DATE(YEAR,MON,MONUM,DAY)
;	   RETURNS TODAY'S DATE
;
DATE::	MOVE	A,[XWD 56,11]		;GET YEAR
	GETTAB	A,
	  HALT
	SUBI	A,^D1900
	MOVEM	A,@(ARG)		;STORE IT
	MOVE	A,[XWD 57,11]		;GET MONTH
	GETTAB	A,
	  HALT
	MOVEM	A,@2(ARG)		;STORE MONTH NUMBER
	MOVE	B,MONTAB##-1(A)		;GET ASCII
	MOVEM	B,@1(ARG)
	MOVE	A,[XWD 60,11]		;GET DAY
	GETTAB	A,
	  HALT
	MOVEM	A,@3(ARG)		;STORE IT
	POPJ	P,

;	SUBROUTINE UNVCAL(YEAR,MON,DAY,HOUR,MIN,SEC,UNIV)
;	   RETURNS THE UNIVERSAL DAY-TIME FOR THE GIVEN ARGUMENTS
;
UNVCAL::  MOVE	A,@1(ARG)		;GET MONTH
	MOVE	B,@(ARG)		;GET YEAR
	IMULI	B,^D12			;CALC LEAP DAYS
	ADDI	B,^D45(A)
	IDIVI	B,^D48
	SOJA	A,DAT3
DAT2:	MOVE	C,MONLEN##(A)
	ADDI	B,1(C)
DAT3:	SOJGE	A,DAT2
	ADD	B,@2(ARG)		;ADD DAY
	MOVE	A,@(ARG)		;YEAR
	IMULI	A,^D365
	ADD	B,A
	SUB	B,[^D678957]		;NOV. 17, 1858
	HRLZM	B,@6(ARG)		;STORE DATE
	MOVE	A,@3(ARG)		;GET HOURS
	IMULI	A,^D60*^D60		;NUMBER OF SECONDS
	MOVE	B,@4(ARG)		;GET MINUTES
	IMULI	B,^D60			;NUMBER OF SECONDS
	ADD	A,B
	LSH	A,^D18			;NORMALIZE TO ONE HALF WORD
	IDIVI	A,^D3600*^D24		;DIVIDE BY SECONDS IN A DAY
	HRRM	A,@6(ARG)		;STORE TIME
	POPJ	P,			;RETURN

;	SUBROUTINE UNDEC(UNV,YEAR,MON,DAY)
;	   DECOMPOSES THE UNIVERSAL DATE IN UNV INTO YEAR, MONTH, DAY
;

	SAVRDX==10
	RADIX 10
;GET SMITHSONIAN DATE
UNDEC::  HLRZ	A,@(ARG)			;GET THE SU DATE
;ADD AN OFFSET SO THAT DAY 0 = JAN 1,1501
	ADDI	A,<1857-1500>*365+<1857-1500>/4-<1857-1500>/100+<1857-1500>/400+31+28+31+30+31+30+31+31+30+31+17
;DIVIDE BY THE EXACT NUMBER OF DAYS IN A QUADRICENTURY
	IDIVI	A,400*365+400/4-400/100+400/400
;A = THE NUMBER OF QUADRICENTURIES SINCE 1501
;B = THE NUMBER OF DAYS IN THE NEXT QUADRICENTURY
	LSH	B,2		;CONVERT # OF DAYS TO # OF QUARTER DAYS
;DIVIDE BY AVERAGE NUMBER OF QUARTER DAYS IN A CENTURY
	IDIVI	B,<100*365+100/4-100/100>*4+400/400
;THIS WILL WORK OUT SO THAT THE FIRST CENTURY OF THE QUADRICENTURY
;WILL GET THE EXTRA LEAP DAY. THIS IS THE REASON THAT
;WE STARTED THE QUADRICENTURY AT 1501.  B = THE NUMBER OF COMPLETE
;CENTURIES SINCE THE LAST QUADRICENTURY, AND C = THE 
;NUMBER OF QUARTER-DAYS SINCE THE LAST COMPLETE CENTURY.
	IORI	C,3	;DISCARD ANY FRACTIONS OF A DAY
;FROM THE LAST DIVISION, AND ADD IN 3/4 OF! A DAY TO FORCE A LEAP
;DAY INTO THE FOURTH (RATHER THAN THE FIRST) DAY OF EACH 4 YEAR
;CYCLE.  NOW DIVIDE BY THE AVERAGE NUMBER OF QUARTER DAYS IN A YEAR
	IDIVI	C,4*365+1
;C = NUMBER OF YEARS SINCE LAST COMPLETE CENTURY.
	LSH	D,-2	;D=NUMBER OF DAYS INTO THE NEXT YEAR
			;(I. E. JULIAN DATE - 1)
	LSH	A,2	;A=4*(# OF QUADS SINCE 1501)
	ADD	A,B	;A=(# OF CENTURIES SINCE 1501)
	IMULI	A,100
	ADDI	A,1501(C)	;A = NUMBER OF YEARS
	MOVEM	A,@1(ARG)	;STORE THE YEAR

	TRNE	A,3	;IS THIS A LEAP YEAR?
	JRST	NOTLEP	;NO
	IDIVI	A,100	
	JUMPN	B,LEAPYR	;JUMP IF NOT NULTIPLE OF 100
	TRNN	A,3		;IS THE YEAR A MULTIPLE OF 400?
	JRST	LEAPYR		;YES
NOTLEP:	CAIL	D,31+28	;THIS IS A NON-LEAP YEAR
	ADDI	D,1		;IT IS PAST FEB 28, SO ADD IN A FAKE FEB 29
LEAPYR:	MOVEI	A,0	;MONTH INITED TO JAN
MONTHL:	CAMLE	D,MNTHAC+1(A)
	AOJA	A,MONTHL	;TRY THE NEXT MONTH
	MOVEI	C,1(A)	;FORM ORDINAL NUMBER FOR MONTH
	MOVEM	C,@2(ARG)		;STORE MONTH
	SUB	D,MNTHAC(A)	;SUBTRACT DAYS IN PREV. MONTHS
	MOVEM	D,@3(ARG)			;STORE DAY
	HRRZ	A,@(ARG)		;GET TIME
	IMULI	A,24*3600		;DECOMPOSE
	LSH	A,-18
	IDIVI	A,3600			;HOURS IN A
	IDIVI	B,60			;MINUTES IN B, SECONDS IN C
	SKIPE	C			;ROUND UP
	AOS	B
	CAIGE	B,^D60			;DONT ALLOW HH:60
	JRST	TIMOK
	SUBI	B,^D60
	AOS	A
TIMOK:	MOVEM	A,@4(ARG)		;STORE HOURS
	MOVEM	B,@5(ARG)		;STORE MINUTES
	POPJ	P,
MNTHAC:	EXP	-1
	EXP	31-1
	EXP	31+29-1
	EXP	31+29+31-1		;APR
	EXP	31+29+31+30-1		;MAY
	EXP	31+29+31+30+31-1	;JUN
	EXP	31+29+31+30+31+30-1	;JUL
	EXP	31+29+31+30+31+30+31-1	;AUG
	EXP	31+29+31+30+31+30+31+31-1	;SEP
	EXP	31+29+31+30+31+30+31+31+30-1	;OCT
	EXP	31+29+31+30+31+30+31+31+30+31-1	;NOV
	EXP	31+29+31+30+31+30+31+31+30+31+30-1  ;DEC
	EXP	31+29+31+30+31+30+31+31+30+31+30+31-1

	RADIX	8

;	SUBROUTINE EXITT
;
REST::	RESET
	POPJ	P,
EXITT:: PUSHJ	P,QUEUE##			; SHOULD WE QUEUE A REQUEST
	SETZM	.JBSA
	SETZM	.JBREN
	TTCALL	3,[ASCIZ/
/]
	RESET
	PJOB	A,				;SEE IF WE'RE LOGGED IN
	MOVNI	B,(A)
	JOBSTS	B,
	JFCL
	TLNN	B,200000			;CHECK JB.ULI
	JRST	NOTLOG
	EXIT	A,				;YES WE ARE
	JRST	.-1
NOTLOG:	TTCALL	3,[ASCIZ/
./]
	EXIT	A,
	LIT

;	LOW SEGMENT

	RELOC	0
POSBLK:	EXP	1011,0
TRMBLK:	EXP	1000,0
RUNBLK:	BLOCK	6
SCPBLK:	SIXBIT	/SCOOP/
	SIXBIT	/TXT/
	0
	0
NOTBLK:	SIXBIT	/NOTICE/
	SIXBIT	/TXT/
	0
	0
	END
 