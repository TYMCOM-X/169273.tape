entry DATE!DECODE,DAYOFWEEK,DATESTR,TIME!DECODE,TIMESTR,
	DayTime,FDATE,FTIME;

BEGIN "DATE"
    require "SAI:CSWIT.SAI" source!file;
    define HISEGGING=ifcr COMPILER!SWITCH!H thenc +1 elsec -1 endc;
    define !NOBAYSAILIB! = true;
    REQUIRE "SAI:BAYSAI" SOURCE!FILE;

!-------------------------------------------------
!
! ABSTRACT:
!	SAIL procedures dealing with date and time.
!
!-------------------------------------------------;
! Submodule: DATE.SAI
! Date: 16-Nov-78
! Who: SAIL Files
! Made formatting changes in the routine headers for DateStr and TimeStr.
! [MS30]
! 
! ;
! Date: 30-Jul-78
! Who: SAIL Files
! Added source!l(Date) to guarantee .REQ and .SAI files are consistent.
! [MS30]
! 
! ;

! Submodule: DATE.SAI
! Date: 27-Jul-78
! Who: SAIL Files
! Correct misalignment of parameters in internal calls to DATE!DECODE and
! TIME!DECODE.
! 
! ;

! Submodule: DATE.SAI
! Date: 27-Jul-78
! Who: SAIL Files
! Fix DayTime routine which was not completely in SHEPHERD format.
! 
! ;

! Submodule: DATE.SAI
! Date: 27-Jul-78
! Who: SAIL Files
! Converted DATE.SAI/DATE.SA1[A710SA00].
! 
! ;
!-------------------------------------------------
!	This is an empty design section.
!-------------------------------------------------;
source!l(Date);
internal simple procedure DATE!DECODE(reference integer M,D,Y;
				      integer Val(-1));
!------------------------------------------------------------
!
! ABSTRACT:
!	DATE!DECODE takes a DEC format date and returns through the
!	reference parameters the corresponding day, month and year.
!
! PARAMETERS:
!   M: Reference integer used to return the month.
!
!   D: Reference integer used to return the day.
!
!   Y: Reference integer used to return the year.
!
!   Val: Integer that is date in DEC format.  If -1 (the default), it
!	will be initialized to the current date by DATE!DECODE.
!
! RESULTS:
!
! SIDE EFFECTS:
!	See PARAMETERS.
!
! ERRORS:
!
! DESIGN:
!
!------------------------------------------------------------;
begin "DATE!DECODE"
	if Val = -1 then Val _ call(0,"DATE");
	D _ Val mod 31 + 1;
	M _ ((Val_Val div 31) mod 12)+1;
	Y _ Val div 12 + 1964;
end "DATE!DECODE";
internal simple integer procedure DAYOFWEEK(integer M,D,Y);
!------------------------------------------------------------
!
! ABSTRACT:
!	DAYOFWEEK takes a date and returns the day of
!	the week that it corresponds to.
!
! PARAMETERS:
!   M: Integer specifying the month.
!
!   D: Integer specifying the day.
!
!   Y: Integer specifying the year.
!
! RESULTS:
!	DAYOFWEEK returns an integer in the range 0 to 6 that represents
!	the day of the week (0 is Sunday).
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!    1)	Years below 100 are assumed to be relative to 1900, thus 78 is
!	treated as 1978.
!    2)	January and February are treated as belonging to the previous year.
!    3)	The first line in the formula returned is equivalent to the number
!	of days since "March 0" plus 2, modulo 7.
!    4)	The last line is based on the following observations:
!	a) 365 mod 7 = 1
!	b) There is a leap year every 4 years, but it is skipped on years
!	   that are multiples of 100 but not multiples of 400.
!
!------------------------------------------------------------;
begin "DAYOFWEEK"

if Y<100 then Y _ Y+1900;
if M LEQ 2 then Dum _ Y - 1 else Dum _ Y;
return(( (13 * ((M+9) MOD 12) + 12)%5 + D
	+ Dum + Dum%4 + Dum%400 - Dum%100) MOD 7)

end "DAYOFWEEK";
internal simple string procedure DATESTR(integer VAL(-1),Fmt(2));
!------------------------------------------------------------
!
! ABSTRACT:
!	DATESTR returns a date in string form according to a specified
!	format.  Passing a date of -1 to be decoded requests the
!	current date.  The formats are:
! @enter(verbatim)
!		0	nothing
!		1	2/24/75
!		2	24-Feb-75
!		3	24 February 1975
!		4	February 24, 1975
!		5	24 Feb 1975
! @leave(verbatim)
!
!	In addition the day of the week may be added before the
!	date in a format specified in the left half of Fmt.  The
!	left half formats are:
!		0	nothing
!		1	Mon
!		2	Monday
!
!
! PARAMETERS:
!   Val: Integer that is a DEC format date (defaults to -1).
!
!   Fmt: Integer specifying how to format the date (defaults to 2).
!
! RESULTS:
!	DATESTR returns a string that is the formatted date.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!------------------------------------------------------------;
begin "DATESTR"

preset!with "January", "February", "March", "April", "May", "June",
	"July", "August", "September", "October", "November", "December";
own safe string array MONTHS[1:12];

preset!with "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday";
own safe string array DAYS[0:6];

integer M,D,Y,W,F1,F2,DAYCASE,DATECASE;
string S;

	DATE!DECODE(M,D,Y,Val);
	S_null;
	DAYCASE_0 max (Fmt lsh -18) min 2;
	if DAYCASE>0 then
	    begin
	    W_DAYOFWEEK(M,D,Y);
	    S _ case DAYCASE of ("", DAYS[W][1 for 3], DAYS[W]);
	    end;
	DATECASE_0 max RH(Fmt) min 5;
	if DATECASE=0 then return(S);
	getformat(F1,F2);
	setformat(0,0);
	if fulstr(S) then S_S&" ";
	case DATECASE of
	  begin
	    ;	! case 0;
	    begin	! case 1;
		S_S&cvs(M)&"/"&cvs(D)&"/"&cvs(if 1900<Y<2000 then Y-1900 else Y);
	    end;
	    begin	! case 2;
		setformat(2,0);
		S_S&cvs(D)&"-"&MONTHS[M][1 for 3]&"-"&cvs(if 1900<Y<2000 then Y-1900 else Y);
	    end;
	    begin	! case 3;
		S_S&cvs(D)&" "&MONTHS[M]&" "&cvs(Y);
	    end;
	    begin	! case 4;
		S_S&MONTHS[M]&" "&cvs(D)&", "&cvs(Y);
	    end;
	    begin	! case 5;
		setformat(2,0);
		S_S&cvs(D)&" "&MONTHS[M][1 for 3]&" "&cvs(Y);
	    end
	  end;
	setformat(F1,F2);
	return(S);
end "DATESTR";

internal simple procedure TIME!DECODE(reference integer H,M,S;
				      integer Val(-1));
!------------------------------------------------------------
!
! ABSTRACT:
!	TIME!DECODE takes a DEC format time and returns through the
!	reference parameters the corresponding second, minute and hour.
!
! PARAMETERS:
!   H: Reference integer used to return the hour.
!
!   M: Reference integer used to return the minute.
!
!   S: Reference integer used to return the second.
!
!   Val: Integer that is time in DEC format (jiffies).  If -1 (the default),
!	it will be initialized to the current time by TIME!DECODE.
!
! RESULTS:
!
! SIDE EFFECTS:
!	See PARAMETERS.
!
! ERRORS:
!
! DESIGN:
!
!------------------------------------------------------------;
begin "TIME!DECODE"
	if Val=-1 then Val _ call(0,"TIMER");
	S _ (Val_Val div 60) mod 60;
	M _ (Val_Val div 60) mod 60;
	H _ Val div 60;
end "TIME!DECODE";
internal simple string procedure TIMESTR(integer VAL(-1),Fmt(1));
!------------------------------------------------------------;
!
! ABSTRACT:
!	TIMESTR returns a time in string form.  The default time
!	is -1 meaning current.  The time value may be in jiffies
!	or milliseconds.  To use milliseconds, negate the format
!	parameter.  The output formats are:
! @enter(verbatim)
!		0	17:35:21	12:00:00	00:00:00
!		1	17:35		12:00		00:00
!		2	5:35 PM		12:00 N		12:00 M
!		3	1735 EST	1200 EDT	0000 EDT
!			EDT or EST depends on value for today
!		4	1735-EST	1200-EDT	0000-EDT
! @leave(verbatim)
!
! PARAMETERS:
!   Val: Integer that is DEC format time (defaults to -1).
!
!   Fmt: Integer specifying how to format the time (defaults to 1).
!
! RESULTS:
!	Returns a string that is the formatted time.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!------------------------------------------------------------;
begin "TIMESTR"

integer F1,F2,H,M,S,YR,MN,DY,Day;
string T,AMPM;

	getformat(F1,F2);
	if VAL > 0 and Fmt < 0 then VAL_(VAL*60+500) div 1000;
	TIME!DECODE(H,M,S,Val);
	case 0 max abs(Fmt) min 3 of
	  begin
	    begin
		setformat(-2,0);
		T_cvs(H)&":"&cvs(M)&":"&cvs(S);
	    end;
	    begin
		setformat(-2,0);
		T_cvs(H)&":"&cvs(M);
	    end;
	    begin
		if H=M=0 then begin H_12; AMPM_" M" end else
		if H<12 then begin AMPM_" AM"; if H=0 then H_12 end else
		if M>0 or H>12 then begin AMPM_" PM"; H_H-12; if H=0 then H_12 end else
		    AMPM_" N";
		setformat(0,0);
		T_cvs(H)&":";
		setformat(-2,0);
		T_T&cvs(M)&AMPM;
	    end;
	    begin
		setformat(-2,0);
		T_cvs(H)&cvs(M)&(if Fmt=3 then " " else "-");
		Date!Decode(MN,DY,YR,-1);
		if MN<4 or MN>10 then T_T&"EST" else
		if 4<MN<10 then T_T&"EDT" else
		    begin "APR or OCT"
		    Day_DayOfWeek(MN,DY,YR);
		    if MN=4 then
			 T_T&(if DAY+(30-DY)<6 then "EDT" else "EST")
		    else T_T&(if Day+(31-DY)<6 then "EST" else "EDT");
		    end "APR or OCT";
	    end
	  end;
	setformat(F1,F2);
	return(T);
end "TIMESTR";
internal simple string procedure DayTime;
!-------------------------------------------------
!
! ABSTRACT:
!	DayTime returns the current date and time.
!
! PARAMETERS:
!
! RESULTS:
!	Daytime passes back the current date and time as a string with
!	the format "dd-mmm-yy hh:mm"
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
    return (DATESTR(-1,2)&" "&TIMESTR(-1,1));
internal simple string procedure FDATE(safe integer array BLK;
					 integer Fmt(2));
!-------------------------------------------------
!
! ABSTRACT:
!	FDATE returns the date from a file block.
!
! PARAMETERS:
!   BLK: Integer array that is the file block.
!
!   Fmt: Integer specifying how to format the date (defaults to 2).
!
! RESULTS:
!	FDATE returns a string that is the date from the file block.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "FDATE"
	integer T;
	start!code
	  move 1,BLK;
	  ldb 2,['170301000001];	! 1<15,3,1> high 3 bits of date;
	  ldb 3,['001401000002];	! 2<0,12,1> low 12 bits of date;
	  lsh 2,12;
	  ior 2,3;
	  movem 2,T;
	end;
	return(DATESTR(T,Fmt));
end "FDATE";
internal simple string procedure FTIME(safe integer array BLK;
					 integer Fmt(1));
!-------------------------------------------------
!
! ABSTRACT:
!	FTIME returns the time from a file block.
!
! PARAMETERS:
!   BLK: Integer array that is the file block.
!
!   Fmt: Integer specifying how to format the time (defaults to 1).
!
! RESULTS:
!	FTIME returns a string that is the time from the file block.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "FTIME"
	integer T;
	start!code
	  move 1,BLK;
	  ldb 2,['141301000002];	! 2<12,9,1> time field;
	  movem 2,T;
	end;
	return(TIMESTR(T*3600,Fmt));
end "FTIME";

end "DATE";
