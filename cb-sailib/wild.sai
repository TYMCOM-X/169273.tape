entry DIRECT;

begin "WILD"

    require "SAI:CSWIT.SAI" source!file;
    define HISEGGING=ifcr COMPILER!SWITCH!H thenc +1 elsec -1 endc;
    define !NOBAYSAILIB! = true;
    require "SAI:BAYSAI" source!file;

!--------------------------------------------------
!
! ABSTRACT:
!	Package to do wild card file searching.
!
!--------------------------------------------------;
! Submodule: WILD.SAI
! Date: 15-Oct-78
! Who: SAIL Files
! See above.
! 
! ;
! Submodule: WILD.SAI
! Date: 15-Oct-78
! Who: SAIL Files
! UFD for device not found now gives "%" rather than "??" warning.
! [CP01]
! 
! 
! ;

! Submodule: WILD.SAI
! Date: 27-Sep-78
! Who: SAIL Files
! Cleaned up Zilch misuses at Everhart's prompting.
! [MS30]
! 
! ;
!--------------------------------------------------
!	This is a null DESIGN section.
!--------------------------------------------------
source!l(Wild);

source!l(CMUPPN);
source!l(DSKPPN);
source!l(File2);
source!l(MONTOR);

integer LastDev;
safe own integer array JStrBlock[0:2];
safe own integer array GStrBlock[0:4];

require "{}()" delimiters;

define DEBUG = {false};
simple integer procedure MakeMask(string File;
		reference integer FileMask, SixbitFile, ExtMask, SixbitExt);
!------------------------------------------------------------
!
! ABSTRACT:
!	Builds mask and SIXBIT file name for use in comparisons.
!
! PARAMETERS:
!   File: String that is file name and extension to build masks for.
!
!   FileMask: Reference integer in which the mask for the file name will
!	be returned.  The six bits corresponding to a non-wild card
!	character will be set to one.  If the file name portion of File
!	is omitted, FileMask will be as for a file name of "*".
!
!   SixbitFile: Reference integer in which the SIXBIT file name will be
!	returned.
!
!   ExtMask: Reference integer that corresponds to FileMask for the
!	extension.  Note that the right half will be cleared.  If there
!	is no "." in File, ExtMask will be as for an extension of "*".
!
!   SixbitExt: Reference integer in which the SIXBIT extension will be
!	returned, left justified.
!
! RESULT:
!	MakeMask returns 0 for non-wild file, 1 for wild,
!	2 for full wild *.*
!
! SIDE EFFECTS:
!	See PARAMETERS.
!
! ERRORS:
!
! DESIGN:
!	Any occurrence of a "*" is converted to 6 "?"'s, then the file name
!	and extension are truncated to 6 and 3 characters, respectively.
!	This is the most painless way to handle mixed wild cards.
!------------------------------------------------------------;
begin "MakeMask"

integer Wild, OneCharMask, BrkChr;

Wild_0;
SDum_null;
OneCharMask _ '77 lsh 30;
while (Dum_lop(File)) do
    begin
    if (Dum="*") or (Dum="?") then Wild_1;
    SDum _ SDum&(if Dum="*" then "??????" else Dum);
end;
setbreak(Dum_getbreak,".",null,"IS");
File _ scan(SDum,Dum,BrkChr)[1 to 6];
relbreak(Dum);
if nulstr(File)
    then begin "Default file to *"
    File _ "??????";
    Wild _ 1;
    end "Default file to *";
if nulstr(SDum) and (BrkChr neq ".")
    then begin "Default ext to *"
    SDum _ "???";
    Wild _ 1;
    end "Default ext to *"
else SDum _ SDUM[1 to 3];
FileMask _ ExtMask _ 0;
for Dum _ 1 thru 6 do
    begin "Build masks"
    if File[Dum for 1] NEQ "?"
	then FileMask _ FileMask lor OneCharMask;
    if (Dum < 4) AND (SDum[Dum for 1] NEQ "?")
	then ExtMask _ ExtMask lor OneCharMask;
    OneCharMask _ OneCharMask lsh -6;		! Move to next char;
    end "Build masks";

SixbitFile _ cvsix(File);
SixbitExt _ cvsix(SDum);
if (FileMask = 0) AND (ExtMask = 0)
    then Wild _ 2;
return(Wild);

end "MakeMask";
simple integer procedure Pad!PPN(reference string CMUPPN!SPEC);
!-------------------------------------------------
!
! ABSTRACT:
!	Replaces "*" with correct number of "?"'s a CMU PPN.
!
! PARAMETERS:
!   CMUPPN!Spec: Reference string that is CMU PPN with possible wild
!	card characters.  Pad!PPN will transform it into a CMU PPN where
!	only "?"'s are present as wild cards.
!
! RESULTS:
!	Pad!PPN returns 0 for non-wild PPN, 1 for wild,
!	2 for full wild [**]
!
! SIDE EFFECTS:
!	See PARAMETERS.
!
! ERRORS:
!
! DESIGN:
!	Any "*" is replaced by 4 "?"'s, then the PPN is truncated.  Thus an
!	invalid wild specification may, or may not, do what the user wants.
!
!-------------------------------------------------;
begin "Pad!PPN"

integer Wild;

Wild_0;
SDum_null;
while (Dum_lop(CMUPPN!SPEC)) do
	begin
	    if (Dum="*") or (Dum="?") then Wild_1;
	    SDum_SDum&(if Dum="*" then "????" else Dum);
	end;
CMUPPN!SPEC_SDum[1 to 8];
if equ(SDum,"????????") then Wild_2;
return(Wild);

end "Pad!PPN";
simple Boolean procedure Same(string TEMPLATE,UNKNOWN);
!-------------------------------------------------
!
! ABSTRACT:
!	Match template specification (wild cards, et al)
!	against unknown.  Return true if a match, otherwise false.
!
! PARAMETERS:
!   Template: String that possibly has "?"'s in it.  A "?" is
!	defined to match any character.  Template must be 8 characters
!	long.
!
!   Unknown: String to match against Template.  It must be 8
!	characters long.
!
! RESULTS:
!	Same returns True iff Template and Unknown match.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "Same"

integer I;

for I_1 thru 8 do
    begin "each"
    Dum_TEMPLATE[I for 1];
    if Dum = "?" then continue "each";		! "?" matches all;
    if Dum neq UNKNOWN[I for 1] then return(false);
    end "each";
return(true);

end "Same";
simple procedure InitNextDev;
!-------------------------------------------------
!
! ABSTRACT:
!	Initialization for NextDevice.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!	JStrBlock and GStrBlock are initialized, LastDevICE is cleared.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "InitNextDev"
	LastDev_0;		! SYSSTR (ALL:) search list;

	JStrBlock[0]_-1;	! My job's search list;
	JStrBlock[1]_0;
	JStrBlock[2]_0;

	GStrBlock[0]_0;	! Job 0 == SYS: search list;
	GStrBlock[1]_0;	! PPN - ignored;
	GStrBlock[2]_-1;
	GStrBlock[3]_0;
	GStrBlock[4]_0;
end "InitNextDev";
simple string procedure NextDevice(integer WildType);
!-------------------------------------------------
!
! ABSTRACT:
!	Return the next device to be searched.
!
! PARAMETERS:
!   WildType: Integer that specifies how wild cards were used in the original
!	device specification.  Valid values are:
!	0 - Non wild card device.  Use user specification and then done.
!	1 - Look at user (DSK:) search list.
!	2 - Look at ALL: search list.
!	3 - Look at SYS: search list.
!
! RESULTS:
!	NextDevice returns as a string the next device to be searched (null
!	if there are no more).
!
! SIDE EFFECTS:
!	Depending on WildType, one of LastDev, JStrBlock or GStrBlock
!	will be changed.
!
! ERRORS:
!	Should any of the UUO's fail, NextDevice will return null.
!
! DESIGN:
!	LastDev is used for ALL:, JStrBlock for DSK:, GStrBlock for
!	SYS:.  All the state between calls on NextDevice is stored in
!	one of these.
!
!-------------------------------------------------;
begin "NextDevice"
	case WildType of
	begin "Search lists"

	"0" return(null);			! Null for non-wild card;

	"1" begin "Job search list (DSK:)"
		start!code
		MOVEI	1,JStrBlock[0];
		CALLI	1,'47;	! JOBSTR;
		  SETZM	JStrBlock[0];	! error return;
		end;
	    return(if JStrBlock[0]=0 or JStrBlock[0]=-1
			then null else cv6str(JStrBlock[0]));
	    end "Job search list (DSK:)";

	"2" begin "ALL: search list"
		start!code
		MOVE	1,LastDev;
		CALLI	1,'46;	! SYSSTR;
		  SETZ	1,;	! error return;
		MOVEM	1,LastDev;
		end;
	    return(cv6str(LastDev));
	    end "ALL: search list";

	"3" begin "SYS: search list"
		start!code
		MOVSI	1,5;	! Point to GOBSTR block;
		HRRI	1,GStrBlock[0];
		CALLI	1,'66;	! GOBSTR;
		  SETZM	GStrBlock[2];	! error return;
		end;
	    return(cv6str(GStrBlock[2]));
	    end "SYS: search list"

	end "Search lists";
    end "NextDevice";
simple procedure LOOKUP!UFD(integer CHANNEL, DECPPN;
				reference integer EOF);
!-------------------------------------------------
!
! ABSTRACT:
!	Routine to LOOKUP UFD's (which have arbitrary names).
!
! PARAMETERS:
!   Channel: Integer that is channel number to do LOOKUP on.
!
!   DECPPN: Integer that is file name to LOOKUP.
!
!   EOF: Reference integer that behaves like the EOF for SAIL's
!	LOOKUP runtime.
!
! RESULTS:
!
! SIDE EFFECTS:
!	See PARAMETERS (EOF).
!
! ERRORS:
!
! DESIGN:
!	Note that UFD's exist as entries in [1,1].UFD (the MFD).
!
!-------------------------------------------------;
begin "LOOKUP UFD"
	own integer array LB[0:3];
	LB[0]_DECPPN;
	LB[1]_cvsix("UFD");
	LB[2]_0;
	LB[3]_xwd(1,1);
	EOF_0;
	start!code "Roll our own"
	HRLZ	1,CHANNEL;	! Put CHANNEL in AC field;
	LSH	1,5;
	TLO	1,'076000;	! a LOOKUP instruction;
	HRRI	1,LB[0];	! Address of LOOKUP block;
	XCT	1;		! Do the deed;
	SKIPA	1,LB[1];	! Get error flags;
	SETZ	1,;		! Assume EOF is False (i.e. good LOOKUP);
	MOVEM	1,EOF;		! Return status;
	end "Roll our own";
    end "LOOKUP UFD";
internal procedure DIRECT(string FILE!SPEC; Boolean procedure UserProc;
				Boolean MFDWarn(False), UFDWarn(False));
!------------------------------------------------------------
!
! ABSTRACT:
!	DIRECT is a directory searching routine used to search the system
!	for arbitrary files, especially those which are partially specified
!	with PIP wild card symbols. The SAIL program simply calls...
!		DIRECT("DSK:FILE.EXT[ProjProg]",Call!me);
!
! PARAMETERS:
!   File!Spec: String that is a full or partial file specification.
!	Valid in the device part are:
!	  1) Null (meaning "DSK", or "use the structures in my search list")
!	  2) A file structure, e.g. DSKC
!	  3) Any system ersatz device, such as SYS: or HLP: or REL:,
!	     meaning to use the correct search list and PPN
!	  4) ALL, meaning "use all structures currently in the system"
!	  5) An asterisk ("*"), a synonym for ALL:
!	  6) LIB, if your job has a library
!	Valid in the file name, extension and PPN parts are:
!	  1) Any filename, such as FOO.BAZ
!	     Any CMU PPN, such as [A640KG0K]
!	     Any DEC PPN, such as [1027,76442]
!	  2) Null PPN will use the logged in PPN.
!	  3) Any filename and CMU PPN with PIP wild card specifications "?"
!	     and/or "*".  The question mark in any location will match all
!	     characters at that location.  An asterisk fills the remainder
!	     of the filename or extension with "?"s.  An asterisk in the PPN
!	     part will match with all projects ([*KG0K]) or all programmer
!	     numbers ([A610*]), or both ([**]).  DEC ppns may not include
!	     wild-cards.
!	  4) Note that ".ext" is equivalent to "*.ext" and "file" is
!	     equivalent to "file.*".
!
!   UserProc: Boolean procedure which will be called for each file found.
!	It must have four reference string parameters.  It should return
!	TRUE to abort the search (i.e you have found the file you wanted),
!	or return FALSE to continue the search.  An example...
!	  Boolean procedure Call!me(string Dev, File, Ext, PPN);
!	  Begin
!	      Print("I found: ",EACH!NAME,Crlf&"Want to search more? ");
!	      return(inchwl="Y");
!	  end;
!	  DIRECT("ALL:FOO???.SAI[*KG??]",CALL!ME);
!
!	The parameters passed to UserProc are the device, file, extension
!	and PPN portions of the file specification (without ":", ".",
!	 "[" or "]").  All parameters will be provided if available, i.e.
!	"DSK" for device, "" means a null extension, etc.
!
!   MFDWarn: Boolean that if true (defaults to false) will cause an error
!	message to be printed if an attempt to open an MFD fails.
!
!   UFDWarn: Boolean that behaves identically to MFDWarn but is used for
!	UFD errors (also defaults to false).
!
! RESULT:
!
! SIDE EFFECTS:
!	See PARAMETERS (UserProc).
!
! ERRORS:
!	Any OPEN or LOOKUP error is possible.  If they occur, the user will
!	get a message if so indicated by MFDWarn and UFDWarn.  Exception
!	errors may cause SAIL to complain directly.
!
! DESIGN:
!	The basic hierarchy is: Device, PPN, File.
!	MFD's are not opened unless it is necessary.
!	An entire UFD will be opened and searched whether or not the file
!	  name or extension contain wild cards.
!	Note that a particular name may be found on several devices on a
!	  single PPN.
!
!	*** Note *** Currently physical devices are not handled correctly.
!
!------------------------------------------------------------;
begin "DIRECT"

integer BRK,MFD!CHN,MFD!EOF,UFD!EOF,DECPPN,UFD!CHN,
	DECPPN!SPEC,WILD!DEV!TYPE;
integer WILD!PPN,WILD!FILE;		! 0=non wild, 1=wild;
					! 2= full wildcard (*.* or [**]);
integer FileMask, SixbitFile, ExtMask, SixbitExt;
integer Dum2;
string CMUPPN,DEVICE,CMUPPN!SPEC;

CMUPPN!SPEC_null;
DECPPN!SPEC_0;

setbreak(Dum_getbreak,null," "&TAB&0,"IKS");
SDUM_scan(FILE!SPEC,Dum,Zilch);			! Fold to upper case;
Device _ GetDev(SDum);
setbreak(Dum,"[",0,"IS");
FILE!SPEC_scan(SDum,Dum,Dum2);
if Dum2="[" then CMUPPN!Spec_SDum[1 to inf-1];
relbreak(Dum);

WILD!FILE_MakeMask(FILE!SPEC,FileMask,SixbitFile,ExtMask,SixbitExt);
InitNextDev;

begin "Analyze DEVICE"

safe own integer array PATH!BLOCK[0:2], DSKCHR!BLOCK[0:4];

if equ(DEVICE,"*") then DEVICE_"ALL";
PATH!BLOCK[0]_DSKCHR!BLOCK[0]_cvsix(DEVICE);
calli(xwd(3,location(PATH!BLOCK[0])),'110);	! PATH. UUO;
if not !SKIP! then PATH!BLOCK[1]_PATH!BLOCK[2]_0;
WILD!DEV!TYPE_ldb( point(3,PATH!BLOCK[1],29) );
if WILD!DEV!TYPE LEQ 1 then
    begin "Monitor confuses DSK and DSKC"
    DUM_calli(xwd(5,location(DSKCHR!BLOCK[0])),'45);	! DSKCHR UUO;
    if not !SKIP!
	then begin DUM_'7000000;
	DSKCHR!BLOCK[4]_cvsix(DEVICE)
	end;
    if DUM land '7000000
	then begin "Was a specific device"
	    WILD!DEV!TYPE_0;
	    DEVICE_cv6str(DSKCHR!BLOCK[4]);
	    end "Was a specific device"
    else begin "Generic DSK"
	WILD!DEV!TYPE_1;
    end "Generic DSK";
    end "Monitor confuses DSK and DSKC";

if PATH!BLOCK[1] land '40 then
    begin "Device forces a PPN"
    WILD!PPN_0;
    CMUPPN!SPEC_CVDECCMU(PATH!BLOCK[2]);
    end "Device forces a PPN";
if WILD!DEV!TYPE neq 0 then DEVICE_NextDevice(WILD!DEV!TYPE);
end "Analyze DEVICE";

! Check to see if user specified a PPN.
!  If not then get default path PPN of logged-in job;
if nulstr(CMUPPN!SPEC)
    then begin
    CMUPPN!SPEC_CVDECCMU(DISK!PPN);
    WILD!PPN_0
    end
else Wild!PPN _ Pad!PPN(CMUPPN!Spec);

ifc DEBUG 
    thenc
    print("Device: """,DEVICE,""""&crlf);
    print("Device type: ",WILD!DEV!TYPE,crlf);
    getformat(Dum,Dum2);
    setformat(-12,0);
    print("File mask routine returned..."&crlf&
	  "File name = ",cvxstr(SixbitFile),", Extension name = ",
	  cv6str(SixbitExt),crlf,"Masks are (File then Ext): ",
	  cvos(FileMask)," - ",cvos(ExtMask),crlf);
    setformat(Dum,Dum2);
    print("CMUPPN!SPEC: """,CMUPPN!SPEC,""""&crlf);
    endc

MFD!Chn _ getchan;
UFD!Chn _ -1;
repeat
begin "each device"
if Wild!PPN
    then begin "Open MFD"
    open(MFD!Chn,DEVICE,'14,1,0,0,0,MFD!EOF_-1);
    if not MFD!EOF then
    LOOKUP!UFD(MFD!Chn,xwd(1,1),MFD!EOF);
    if MFDWarn AND MFD!EOF
	then begin
	print(crlf&"?DIRECT: Cannot find MFD on ",Device,
		": ",FilErr(MFD!EOF),crlf);
	continue "each device";
	end;
    end "Open MFD";
repeat
    begin "EACH PPN"
    if WILD!PPN
	then begin
	DECPPN_wordin(MFD!Chn);
	if MFD!EOF then done "EACH PPN";
	wordin(MFD!Chn);
	if MFD!EOF then done "EACH PPN";
	if DECPPN = 0
	     then continue "EACH PPN"
	else CMUPPN_CVDECCMU(DECPPN);
	ifc DEBUG 
	    thenc print(CMUPPN,"	",cvos(DECPPN),crlf); 
	    endc
	if WILD!PPN neq 2
	    then if not Same(CMUPPN!SPEC,CMUPPN)
		then continue "EACH PPN";
	end
    else DECPPN_CVCMUDEC(CMUPPN_CMUPPN!SPEC);

    if UFD!Chn = -1 then UFD!Chn _ getchan;
    open(UFD!Chn,DEVICE,'14,1,0,0,0,UFD!EOF_-1);
    if not UFD!EOF then
    LOOKUP!UFD(UFD!CHN,DECPPN,UFD!EOF);
    ifc DEBUG
	thenc print("Opening ",DEVICE,":",CVDECCMU(DECPPN),".UFD"&crlf);
	endc
    if UFDWarn AND UFD!EOF
	then print(crlf&"%DIRECT: Cannot access UFD on ",Device,
		": for [",CMUPPN,"] ",FilErr(UFD!EOF),crlf);
    if not UFD!EOF
	then repeat
	    begin "each file"
	    safe own integer array FileEntry[0:1];

	    arryin(UFD!Chn,FileEntry[0],2);
	    if UFD!EOF then done "each file";
	    if FileEntry[0] = 0 then continue "each file";
	    if WILD!FILE NEQ 2
		then begin "Check this file"
		if (((FileEntry[0] xor SixbitFile) land FileMask) lor
		   ((FileEntry[1] xor SixbitExt) land ExtMask)) neq 0
		    then continue "each file";
		end "Check this file";
	    ifc DEBUG
		thenc
		print("Calling user's procedure with parameters: ",
			  Device," -- ",cvxstr(FileEntry[0])," -- ",
			  cv6str(FileEntry[1])[1 to 3]," -- ",CMUPPN,crlf);
		endc
	    if UserProc(Device,SDum_cvxstr(FileEntry[0]),
			    SZilch_cv6str(FileEntry[1])[1 to 3],CMUPPN)
		    then done "each device";
	    end "each file";
	if not Wild!PPN then done "EACH PPN";
	end "EACH PPN";
if nulstr(DEVICE_NextDevice(WILD!DEV!TYPE))
    then done "each device";
end "each device";

release(UFD!Chn);
release(MFD!Chn);
end "DIRECT";

end "WILD";
  