ENTRY RTMPCOR,WTMPCOR,RTMPFile,WTMPFile,RunProg;

BEGIN "TMPFil"

    require "SAI:CSWIT.SAI" source!file;
    define HISEGGING=ifcr COMPILER!SWITCH!H thenc +1 elsec -1 endc;
    define !NOBAYSAILIB! = true;
    REQUIRE "SAI:BAYSAI" SOURCE!FILE;

!------------------------------------------------------------
!
! ABSTRACT:
!	These procedures read and write temporary files either in
!	TMPCOR or on DSK for use by another program.  The procedures
!	return TRUE for success and FALSE for failure.  In the two
!	read file procedures, the reference string FILE will contain
!	the contents of the temporary file if found.
!------------------------------------------------------------;
! Submodule: TMPFIL.SAI
! Date: 14-Nov-78
! Who: SAIL Files
! Incorporated some corrections made by CFE to the TMPCOR read and write
! routines to improve robustness of their performance.
! [MS30]
! 
! ;
! Submodule: TMPFIL.SAI
! Date: 28-Sep-78
! Who: SAIL Files
! Added new defaulted parameter to end of RunProg parm. list that
! allows the user to specify whether a DEC or Stanford RUN UUO is
! desired.
! [MS30]
! 
! ;

! Submodule: TMPFIL.SAI
! Date: 27-Sep-78
! Who: SAIL Files
! Just checking on whether JobNum returns octal or decimal result.
! Answer is decimal, but POST must be using old .REL file.
! [MS30]
! 
! ;

! Submodule: TMPFIL.SAI
! Date: 22-Aug-78
! Who: SAIL Files
! Made JobNum procedure available as INTERNAL.
! [MS30]
! 
! ;
! Date: 30-Jul-78
! Who: SAIL Files
! Added source!l(TMPFil) to guarantee .REQ and .SAI files are consistent.
! [MS30]
! 
! ;

! Submodule: TMPFIL.SAI
! Date: 29-Jul-78
! Who: SAIL Files
! Add converted TMPFIL.SAI to File Utilities module.
! 
! ;
!------------------------------------------------------------
!
!	This is a null DESIGN section.
!------------------------------------------------------------;
source!l(TMPFil);
source!l(MONTOR);
internal BOOLEAN PROCEDURE RTMPCOR(STRING NAME; REFERENCE STRING FILE;
			BOOLEAN DELETE(True));
!-------------------------------------------------
!
! ABSTRACT:
!	Procedure for reading (and optionally deleting) a TMPCOR file.
!
! PARAMETERS:
!   Name: String whose first three characters will be used as the name
!	of the TMPCOR file to read.
!
!   File: Reference string used to return the entire contents of the
!	file read.  Note that there will NOT be trailing nulls.
!
!   Delete: Boolean that if true (the default) causes the TMPCOR file
!	to be deleted after it has been read.
!
! RESULTS:
!	RTMPCOR returns true if it could read the TMPCOR file, false
!	otherwise.
!
! SIDE EFFECTS:
!	File gets set to the contents of the TMPCOR file.
!
! ERRORS:
!
! DESIGN:
!	TMPCOR files are assumed to have a maximum size of 64 words.
!
!-------------------------------------------------;
BEGIN "RTMPCOR"

SAFE INTEGER ARRAY BUF[0:63];
own safe integer array Blk[0:1];
INTEGER P,C,TLen;

	Blk[0] _ CVSIX(NAME[1 FOR 3]);
	Blk[1] _ xwd(-64,LOCATION(BUF[0])-1);
	if Delete
	    then Dum _ xwd(2,location(Blk[0]))
	    else Dum _ xwd(1,location(Blk[0]));
	TLen _ calli(Dum,'44);			! Do TMPCOR read;
	if NOT !skip! then return(false);	! UUO failed;
	P_POINT(7,BUF[0],-1);
	FILE_NULL;
	for Dum _ TLen * 5 downto 1 do		! Do not stop on first null;
	    if (C_ildb(P)) neq 0
		then FILE _ FILE & C;
	RETURN(TRUE);

END "RTMPCOR";
internal BOOLEAN PROCEDURE WTMPCOR(STRING NAME,FILE);
!-------------------------------------------------
!
! ABSTRACT:
!	Procedure for writing a TMPCOR file.
!
! PARAMETERS:
!   Name: String whose first three characters will be used as the name
!	of the TMPCOR file to read.
!
!   File: String that will be written into TMPCOR.
!
! RESULTS:
!	WTMPCOR returns true if it could write the TMPCOR file, false
!	otherwise.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
BEGIN "WTMPCOR"

SAFE INTEGER ARRAY BUF[0:LENGTH(FILE) DIV 5];
own safe integer array Blk[0:1];
INTEGER P,L;

	arrclr(BUF);
	P_POINT(7,BUF[0],-1);
	L_LENGTH(SDum_FILE);
	START!CODE
	  LABEL LOOP,OUTT;
	    MOVE 1,SDum;
	  LOOP:
	    SOSGE L;
	      JRST OUTT;
	    ILDB 2,1;
	    IDPB 2,P;
	    JRST LOOP;
	  OUTT:
	END;
	L_(LENGTH(SDum)+4) DIV 5;
	Blk[0] _ CVSIX(NAME[1 FOR 3]);
	Blk[1] _ xwd(-L,LOCATION(BUF[0])-1);
	calli(xwd(3,location(Blk[0])),'44);	! TMPCOR write;
	return(!SKIP!);

END "WTMPCOR";
internal PROCEDURE RunProg(STRING NAME; INTEGER OFFSET(1);
				Boolean DoSRUN(false));
!------------------------------------------------------------
!
! ABSTRACT:
!	RUNPROG takes a string program name and an offset and runs
!	the specified program if possible.  If it ever returns there
!	was an error.
!
! PARAMETERS:
!   Name: String that is file specification for program to be run.
!	Device is defaulted to SYS: if none is given.
!
!   Offset: Integer that specifies run uuo offset (defaults to 1).
!
!   DoSRUN: Boolean that if true (default is false) will cause
!	RunProg to do a "Stanford RUN" instead of the standard DEC
!	RUN UUO.
!
! RESULTS:
!
! SIDE EFFECTS:
!	If RunProg is successful, the specified program will be run, thus
!	destroying the current core image.
!	If RunProg fails, it will print an error message directly to the
!	terminal and exit, closing the channels.
!
! ERRORS:
!	If the file name is invalid, RunProg will return print an error
!	message and return to its caller.
!
! DESIGN:
!
!------------------------------------------------------------;
BEGIN "RunProg"

DEFINE P='17, SP='16, F='12;
SAFE INTEGER ARRAY Blk[0:5];

	SDUM_NULL;
	WHILE fulstr(NAME) DO
	    IF (DUM_LOP(NAME))=":" THEN DONE ELSE SDUM_SDUM&DUM;
	IF nulstr(NAME) THEN
	    BEGIN NAME_SDUM; SDUM_"SYS" END;
	Blk[0]_CVSIX(SDUM);
	Blk[1]_CVFIL(NAME,Blk[2],Blk[4]);
	IF !SKIP!
	    THEN BEGIN
	    print("?RUNPROG: Invalid file name ",NAME,CRLF);
	    RETURN
	    END;
	START!CODE
	  LABEL RUFAIL,RUNErr,AnSRUN;
	  MOVS 1,OFFSET;
	  HRR 1,Blk;
	  SKIPE DoSRUN;	Comment Skips if DEC RUN wanted.;
	    JRST AnSRUN;
	  CALLI 1,'35;
			Comment On error return we have to output the error
				message directly since highseg is gone.;
	  JRST RUNErr;

AnSRUN:
	  SETZ '14,;	Comment Zero AC 14 to indicate no register changes.;
	  CALLI 1,-'22;	Comment SRUN;

RUNErr:
	  TTCALL 3,RUFAIL;
	  CALLI 0,'12;
	  RUFAIL:	'376452547240;	Comment ?RUNP;
			'512370735100;	Comment ROG: ;
			'512531620252;	Comment RUN U;
			'526364063302;	Comment UO fa;
			'647314562134;	Comment iled.;
			'064500000000;	Comment CRLF;
	END;

END "RunProg";
internal SIMPLE STRING PROCEDURE JobNum;
!-------------------------------------------------
!
! ABSTRACT:
!	JobNum returns the current job's job number.
!
! PARAMETERS:
!
! RESULTS:
!	JobNum returns as a three character string the current job number
!	in decimal, with zero padding on the left.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
BEGIN "JOBNUM"

INTEGER W,D;

	GETFORMAT(W,D); SETFORMAT(-3,0);
	SDUM_CVS(CALL(0,"PJOB"));
	SETFORMAT(W,D);
	RETURN(SDUM);

END "JOBNUM";
internal BOOLEAN SIMPLE PROCEDURE RTMPFile(STRING NAME;
	REFERENCE STRING FILE; BOOLEAN DELETE(True),TMPCOR(True));
!-------------------------------------------------
!
! ABSTRACT:
!	Procedure for reading (and optionally deleting) a temporary
!	file (either TMPCOR or DSK:<nnn><fff>.TMP).
!
! PARAMETERS:
!   Name: String whose first three characters will be used as the name
!	of the temporary file to read.
!
!   File: Reference string used to return the entire contents of the
!	file read.  Note that there will NOT be trailing nulls.
!
!   Delete: Boolean that if true (the default) causes the temporary file
!	to be deleted after it has been read.
!
!   TMPCOR: Boolean that if true (the default) causes the read to
!	be tried on TMPCOR before DSK:.
!
! RESULTS:
!	RTMPFile returns true if it could read the temporary file, false
!	otherwise.
!
! SIDE EFFECTS:
!	File gets set to the contents of the TMPCOR file.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
BEGIN "RTMPFile"

INTEGER CH,EOF;

	IF TMPCOR AND RTMPCOR(NAME,FILE,DELETE) THEN RETURN(TRUE);
	OPEN(CH_GETCHAN,"DSK",0,1,0,100,ZILCH,EOF_TRUE);
	IF EOF
	    THEN begin
	    release(CH);
	    RETURN(FALSE);
	    end;
	LOOKUP(CH,JOBNUM&NAME[1 to 3]&".TMP",DUM_TRUE);
	IF DUM THEN BEGIN RELEASE(CH); RETURN(FALSE) END;
	FILE_NULL;
	DO FILE_FILE&INPUT(CH,0) UNTIL EOF;
	IF DELETE THEN RENAME(CH,NULL,0,ZILCH);
	RELEASE(CH);
	RETURN(TRUE);

END "RTMPFile";
internal BOOLEAN SIMPLE PROCEDURE WTMPFile(STRING NAME,FILE;
			BOOLEAN TMPCOR(True));
!-------------------------------------------------
!
! ABSTRACT:
!	Procedure for writing a temporary file (either TMPCOR
!	or DSK:<nnn><fff>.TMP).
!
! PARAMETERS:
!   Name: String whose first three characters will be used as the name
!	of the temporary file to read.
!
!   File: String that will be written.
!
!   TMPCOR: Boolean that if true (the default) causes the write to
!	be tried on TMPCOR before DSK:.
!
! RESULTS:
!	WTMPFile returns true if it could write the temporary file, false
!	otherwise.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
BEGIN "WTMPFile"

INTEGER CH,EOF;

	IF TMPCOR AND WTMPCOR(NAME,FILE) THEN RETURN(TRUE);
	OPEN(CH_GETCHAN,"DSK",0,0,1,ZILCH,ZILCH,EOF);
	IF EOF
	    THEN begin
	    release(CH);
	    RETURN(FALSE);
	    end;
	ENTER(CH,JOBNUM&NAME[1 to 3]&".TMP",DUM_TRUE);
	IF DUM THEN BEGIN RELEASE(CH); RETURN(FALSE) END;
	OUT(CH,FILE);
	RELEASE(CH);
	RETURN(TRUE);
	END "WTMPFile";

END "TMPFil";
 