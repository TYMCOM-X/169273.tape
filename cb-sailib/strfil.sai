ENTRY ONECHAR,INDEX1,INDEX2,LESTR,INITIAL,CVUp,UpEqu,StabLook;

begin "STRFIL"
require "SAI:CSWIT.SAI" source!file;
define HISEGGING=ifcr COMPILER!SWITCH!H
    thenc +1
elsec -1
    endc;
    define !NOBAYSAILIB! = true;
REQUIRE "SAI:BAYSAI" SOURCE!FILE;

!--------------------------------------------------
!
! ABSTRACT:
!	These procedures perform specialized  string functions.
!--------------------------------------------------;
! Submodule: STRFIL.SAI
! Date: 11-Dec-78
! Who: SAIL Files
! Changed array parameter to StabLook to SAFE, saving 24 words of code.
! [MS30]
! 
! ;
! Submodule: STRFIL.SAI
! Date: 19-Aug-78
! Who: SAIL Files
! Reformatted user inquiry about list in StabLook.
! [MS30]
! 
! ;

! Submodule: STRFIL.SAI
! Date: 17-Aug-78
! Who: SAIL Files
! Correct action that depended on CaseFold parameter to StabLook.  The
! actions were swapped.
! [MS30]
! 
! ;

! Submodule: STRFIL.SAI
! Date:  7-Aug-78
! Who: SAIL Files
! Fix bogosity in StabLook.  Cmd was being used instead of Command, thus
! LowerBound-2 was always being returned.
! [MS30]
! 
! ;
! Date: 30-Jul-78
! Who: SAIL Files
! Does source!l(StrFil) to guarantee .REQ file is consistent with .SAI file.
! [MS30]
! 
! ;

! Submodule: STRFIL.SAI
! Date: 24-Jul-78
! Who: SAIL Files
! Changed order of defaulted parameters to Stablook.
! 
! ;

! Submodule: STRFIL.SAI
! Date: 23-Jul-78
! Who: SAIL Files
! Placing STRFIL.SAI into new String Utilities module.
! 
! ;
!--------------------------------------------------
!			DESIGN
!
! Many of the routines here are from the old STRFIL.SAI[A710SA00].
! Most of these routines are coded in machine language in order to
!  run at blinding speed.  Often there are equivalent but slower
!  constructs supported directly by SAIL.
!--------------------------------------------------;
source!l(StrFil);

integer UpperCase;		! See CVUp;
internal INTEGER SIMPLE PROCEDURE ONECHAR(STRING A;INTEGER B);
!-------------------------------------------------
!
! ABSTRACT:
!	Returns the Bth character of A, 0 if B > LENGTH(A).
!
! PARAMETERS:
! A: String from which Bth character will be extracted.
!
! B: Integer defining position of character to be returned.
!
! RESULTS:
!	Returns the Bth character of A, 0 if B > LENGTH(A).
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "ONECHAR"
	IF B>LENGTH(A) THEN RETURN(0);
	START!CODE
	    LABEL X,Y;
	    MOVE 3,B;
	    MOVE 2,A;
	    IDIVI 3,5;
	    ADD 2,3;
	    JUMPLE 4,Y;
	    X: IBP 2;
	    SOJG 4,X;
	    Y: LDB 1,2;
	end;
end "ONECHAR";
internal INTEGER SIMPLE PROCEDURE INDEX1(STRING S; INTEGER C);
!-------------------------------------------------
!
! ABSTRACT:
!	Returns the location of the first occurance of character C in S,
!	0 if none.
!
! PARAMETERS:
! S: String in which to try to find character C.
!
! C: Integer (ASCII code of character) to find in S.
!
! RESULTS:
!	Returns the location of the first occurance of character C in S,
!	0 if none.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "INDEX1"
	IF (Dum_LENGTH(S))=0 THEN RETURN(0);
	START!CODE
	    LABEL L, OUTT;
	    MOVE 2,S; MOVN 1,Dum; MOVE 0,C;
	    L: ILDB 3,2; CAIE 0,(3); AOJL 1,L;
	    JUMPE 1,OUTT;
	    ADD 1,Dum; AOJ 1,0;
	    OUTT:
	end;
end "INDEX1";
internal INTEGER SIMPLE PROCEDURE INDEX2(STRING A,B);
!-------------------------------------------------
!
! ABSTRACT:
!	Returns the location of the first occurance of the string B in A,
!	0 if none.  If B is null string, then it is defined to match at 1.
!
! PARAMETERS:
! A: String in which to look for B.
!
! B: String which is substring to find in A.
!
! RESULTS:
!	Returns the location of the first occurance of the string B in A,
!	0 if none.  If B is null string, then it is defined to match at 1.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "INDEX2"
	INTEGER LA, LB;
	IF (LB_LENGTH(B))=0 THEN RETURN(1);
	IF (LA_LENGTH(A)-LB+1)0 THEN RETURN(0);
	START!CODE
	    LABEL L1, L2, L3, OUTT, NEXT;
		MOVE 2,A;
		MOVN 1,LA;
		ILDB 0,B;
		SOS 0,LB;
	L1:	ILDB 3,2;
		CAIE 0,(3);
	NEXT:	AOJL 1,L1;
		JUMPE 1,OUTT;
		MOVE 4,2;
		MOVE 5,B;
		MOVE 6,LB;
	L2:	SOJL 6,L3;
		ILDB 7,4;
		ILDB '10,5;
		CAIE 7,('10);
		JRST NEXT;
		JRST L2;
	L3:	ADD 1,LA;
		AOJ 1,0;
	OUTT:
	end;
end "INDEX2";
internal BOOLEAN SIMPLE PROCEDURE INITIAL(STRING A,B);
!-------------------------------------------------
!
! ABSTRACT:
!	Returns TRUE iff B is an initial string of A.
!
! PARAMETERS:
!    A: String
!
!    B: String that will be tested to see if it is a prefix of A.
!
! RESULTS:
!	Returns TRUE iff B is an initial string of A.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
	begin "INITIAL"
	INTEGER Blen;
	IF (Blen_LENGTH(B))=0 THEN RETURN(0);
	IF (LENGTH(A)-Blen+1)0 THEN RETURN(0);
	START!CODE
	    LABEL L;
	    MOVN 1,Blen;
	    L:  ILDB 2,A;
		ILDB 3,B;
		CAIE 2,(3);
		SKIPA 1,[-1];
		AOJL 1,L;
	    SETCA 1,1;
	end;
	end "INITIAL";
internal BOOLEAN SIMPLE PROCEDURE LESTR(STRING ST1,ST2);
!-------------------------------------------------
!
! ABSTRACT:
!	Returns TRUE iff ST1 is lexically less than ST2;
!
! PARAMETERS:
!    ST1: String
!
!    ST2: String
!
! RESULTS:
!	Returns TRUE iff ST1 is lexically less than ST2;
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
	begin "LESTR"
	INTEGER A,B,PTR1,PTR2;
	START!CODE
	  MOVE 2,ST2;
	  MOVEM 2,PTR2;
	  MOVE 2,ST1;
	  MOVEM 2,PTR1;
	end;
	FOR Dum_1 THRU (length(ST1) MIN length(ST2)) DO
	    IF (A_ILDB(PTR1)) NEQ (B_ILDB(PTR2)) THEN RETURN(A<B);
	RETURN(length(ST1)<length(ST2));
	end "LESTR";
internal simple boolean procedure UpEqu(string A,B);
!--------------------------------------------------
!
! ABSTRACT:
!	UpEqu returns true iff the strings A and B are identical, ignoring
!	case differences.
!
! PARAMETERS:
!    A: String
!
!    B: String
!
! RESULTS:
!	UpEqu returns true iff the strings A and B are identical, ignoring
!	case differences.
!	Note that only alphabetics are case folded, thus UpEqu("[","{")
!	is false.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!	Machine coded to speed it up.
!	Note that the string variable names refer to the byte-pointers
!	on the stack.
!--------------------------------------------------;
begin "UpEqu"

integer Alen;

if (ALen_length(A)) NEQ length(B) then return(false);
start!code
    label L, Zip, Ok2, Ok3;
	skipn	1,Alen;
	jrst	Zip;		! Null strings, quit;
    L:	ildb	2,A;
	cail	2,'141;		! Skip if less than "a";
	caile	2,'172;		! Skip if LEQ "z";
	jrst	Ok2;
	andcmi	2,'40;		! Force to upper case;
    Ok2:ildb	3,B;
	cail	3,'141;		! Skip if less than "a";
	caile	3,'172;		! Skip if LEQ "z";
	jrst	Ok3;
	andcmi	3,'40;		! Force to upper case;
    Ok3:came	2,3;
	skipa	1,[-1];		! No skip, so not equal;
	sojg	1,L;
    Zip:setca	1,1;		! AC 1 is 0 unless we got here from SKIPA;
end;
end "UpEqu";
internal simple string procedure CVUp(string S);
!-------------------------------------------------
!
! ABSTRACT:
!	CVUp is used to force all alphabetics in a string to upper case.
!
! PARAMETERS:
!    S: String
!
! RESULTS:
!	CVUp returns S with every occurrence of a lower case character
!	replaced by upper case.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
begin "CVUp"
return(scan(S,UpperCase,zilch));
end "CVUp";
simple procedure MakeBreaktables;
!-------------------------------------------------
!
! ABSTRACT:
!	Private routine used to do once only initialization.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!	The following breaktables are defined:
!		UpperCase
!
! ERRORS:
!
! DESIGN:
!	MakeBreaktables is a private routine used to set up the break tables
!	for routines in STRFIL once and for all during user initialization.
!
!-------------------------------------------------;
begin "MakeBreaktables"
	setbreak(UpperCase_getbreak,null,null,"IKS");
end "MakeBreaktables";
require MakeBreaktables initialization[1];
internal simple integer procedure StabLook(string Command;
	safe string array Table; boolean PrintMsg(True);
	boolean CaseFold(True); integer LineWidth(-1));
!--------------------------------------------------
!
! ABSTRACT:
!	StabLook does unique command lookup with default case conversion.
!
! PARAMETERS:
!    Command  : String that is being looked for.
!
!    Table    : String array of all possible commands.
!
!    PrintMsg : Boolean that indicates whether or not to print messages to
!	the user in case of an error.  Default (true) means give messages.
!
!    CaseFold : Boolean that specifies whether automatic case folding should
!	be done while looking for Command.  Default (true) means fold.
!
!    LineWidth: Integer that is the width of the terminal, used
!	when listing Table in multiple columns.  Default (-1) implies use
!	a single column.
!
! RESULTS:
!	StabLook returns the index into Table at which a unique match for
!	Command is found, if there is such an index and Command is not null.
!	If Command is the null string, it returns the lowerbound of Table
!	(call it LofT) minus 2.
!	If the match was ambiguous, it returns LofT - 3.
!	If there was no match at all, it returns LofT - 1.
!
! SIDE EFFECTS:
!
! ERRORS:
!	The multiple column output is not yet implemented.
!
! DESIGN:
!	Note that the error values must be relative to the array bounds,
!	otherwise some user program might interpret an error return value
!	as a legitimate index.
!	When listing the Table, if the problem was an ambiguous match,
!	only the ambiguous entries are listed.
!--------------------------------------------------;
begin "StabLook"

integer CmdLen, I, LastI, NumFound, UpperBound, LowerBound;
boolean Match;

LowerBound_Arrinfo(Table,1);
UpperBound_Arrinfo(Table,2);
if (CmdLen_length(Command)) = 0 then return(LowerBound-2);
NumFound_0;
for I_LowerBound thru UpperBound do
    begin "Does this one match"
    if CaseFold
	then Match _ UpEqu(Command,Table[I][1 for CmdLen])
    else Match _ Equ(Command,Table[I][1 for CmdLen]);
    if Match then
	begin "Is it exact"
	if length(Table[I]) = CmdLen then return(I);	! Yes, we're done;
	NumFound_NumFound + 1;
	LastI _ I;
	end "Is it exact";
    end "Does this one match";
if NumFound = 1 then return(LastI);
if NumFound = 0 then
    begin "No match"
    if PrintMsg then print("? ",Command," was not found"&CRLF);
    LastI _ LowerBound - 1;
    end "No match"
else begin "Ambiguous"
    if PrintMsg then print("? ",Command," is ambiguous"&CRLF);
    LastI _ LowerBound - 3;
    end "Ambiguous";
if PrintMsg then
    begin "Do we list"
    print("Do you want a list [y]? ");
    Dum _ inchwl land '137;
    if Dum = "Y" OR Dum = 0 then
	begin "Dump Table"
	for I _ LowerBound thru UpperBound do
	    begin
	    if fulstr(Table[I]) then		! Ignore null Table entries;
		begin
		if NumFound = 0
		    then Match _ True
		else if CaseFold
		    then Match _ UpEqu(Command,Table[I][1 for CmdLen])
		else Match _ Equ(Command,Table[I][1 for CmdLen]);
		if Match then print(Table[I],CRLF);
		end;
	    end;
	end "Dump Table";
    end "Do we list";
return(LastI);
end "StabLook";

end "STRFIL"
 