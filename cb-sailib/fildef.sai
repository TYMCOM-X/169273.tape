entry TearFileApart, PutFileTogether, FileDefault;

BEGIN "FilDef"
    require "SAI:CSWIT.SAI" source!file;
    define HISEGGING=ifcr COMPILER!SWITCH!H thenc +1 elsec -1 endc;
    define !NOBAYSAILIB! = true;
    REQUIRE "SAI:BAYSAI" SOURCE!FILE;

!-------------------------------------------------
!
! ABSTRACT:
!	Routines for tearing file names apart, putting them back together
!	and doing various kinds of defaulting.
!
!--------------------------------------------------;
! Submodule: FILDEF.SAI
! Date: 16-Nov-78
! Who: SAIL Files
! Made a formatting change to FileDefault description.
! [MS30]
! 
! ;
! Submodule: fildef.sai
! Date:  1-Oct-78
! Who: SAIL Files
! Installing new module to do trivial file name packing, unpacking and
! defaulting.
! [MS30]
! 
! 
! ;
!-------------------------------------------------
! This is a null design section.
!-------------------------------------------------;
source!l(FilDef);
internal simple integer procedure TearFileApart(string AFileSpec;
			reference string Device, File, Ext, PPN);
!-------------------------------------------------
!
! ABSTRACT:
!	TearFileApart takes a file specification and returns by
!	side-effect the components of the file spec.
!
! PARAMETERS:
!   AFileSpec: String that is the file specification to be torn apart.
!
!   Device: Reference string used to return the device portion of the
!	file spec.  A null string will be returned if there was no device
!	portion explicitly mentioned (i.e. ":" did not explicitly occur
!	in AFileSpec).
!
!   File: Same as Device but used for returning the file name.
!
!   Ext: Same as Device but used for returning the extension.
!
!   PPN: Same as Device but used for returning the PPN.
!
! RESULTS:
!	TearFileApart returns 0 if the file spec. appeared to be of
!	the right form, non-zero if there was an anomaly (like the PPN coming
!	before the device and or file, or multiple devices, etc.).  If there
!	is a decodable file spec., all effort will be made to decode it.
!	1 will be returned to alert the caller if there does not appear to
!	be any attempt at multiple definitions or overlapping definitions
!	of fields, and if a field is specified but then given a null value.
!	2 will be returned if the file. spec. appears to simply
!	be invalid, but the first value decoded for each field will still
!	be returned by side-effect.
!
! SIDE EFFECTS:
!	See PARAMETERS.
!
! ERRORS:
!
! DESIGN:
!	We simply use breaktables and scan to tear apart the file name.
!	Thus it need not even be valid, but only need obey simple rules
!	about its syntactic form.
!
!-------------------------------------------------;
begin "TearFileApart"

boolean SeenDevice, SeenDot, SeenOpensqrbrk, SeenClosesqrbrk;
integer FunnyForm, ColonDotSqrbrk, OldBrkChr;
string SToken;

FunnyForm _ 0;			! Assume form of file spec is ok;
SeenDevice _ SeenDot _ SeenOpensqrbrk _ SeenClosesqrbrk _ false;
Device _ File _ Ext _ PPN _ null;
setbreak(ColonDotSqrbrk_getbreak,":.[]",null,"INS");

Dum _ 0;
SDum _ AFileSpec;
repeat begin "Find token"
    OldBrkChr _ Dum;
    SToken _ scan(SDum,ColonDotSqrbrk,Dum);
	if Dum = ":" then begin "A device maybe"
		if SeenDevice
		    then FunnyForm _ 2 max FunnyForm
		else begin "First time"
		    SeenDevice _ true;
		    Device _ SToken;
		    if nulstr(Device) OR
			(SeenDot OR SeenOpensqrbrk OR SeenClosesqrbrk)
			then FunnyForm _ 1 max FunnyForm;
		    end "First time";
		end "A device maybe"
	else if Dum = "." then begin "A file maybe"
		if SeenDot
		    then FunnyForm _ 2 max FunnyForm
		else begin "First time"
		    SeenDot _ true;
		    File _ SToken;
		    if nulstr(File) OR (SeenOpensqrbrk OR SeenClosesqrbrk)
			then FunnyForm _ 1 max FunnyForm;
		    end "First time";
		end "A file maybe"
	else if Dum = "[" then begin "Either file or ext maybe"
		if SeenOpensqrbrk
		    then FunnyForm _ 2 max FunnyForm;
		begin "Always go through"
		SeenOpensqrbrk _ true;
		if OldBrkChr = "."
		    then if fulstr(Ext)
			then FunnyForm _ 2 max FunnyForm
		    else begin "Handle .[ right"
			Ext _ SToken;
			if nulstr(Ext)
			    then Ext _ "   ";
			end "Handle .[ right"
		else if fulstr(File)
		    then FunnyForm _ 2 max FunnyForm
		else File _ SToken;
		end "Always go through";
		end "Either file or ext maybe"
	else if Dum = '135 then begin "must be PPN"
		if SeenClosesqrbrk OR (OldBrkChr neq "[")
		    then FunnyForm _ 2 max FunnyForm
		else begin "First time"
		    SeenClosesqrbrk _ true;
		    PPN _ SToken;
		    if nulstr(PPN)
			then FunnyForm _ 1 max FunnyForm;
		    end "First time";
		end "must be PPN"
	else	begin "Clean up, maybe file or ext"
		if OldBrkChr = "."
		    then if fulstr(Ext)
			then FunnyForm _ 2 max FunnyForm
		    else begin "Handle . right"
			Ext _ SToken;
			if nulstr(Ext)
			    then Ext _ "   ";
			end "Handle . right"
		else if nulstr(SToken)
		    then done "Find token"
		else if fulstr(File)
		    then FunnyForm _ 2 max FunnyForm
		else File _ SToken;
		done "Find token";
		end "Clean up, maybe file or ext";
    end "Find token";

relbreak(ColonDotSqrbrk);
return(FunnyForm);

end "TearFileApart";
internal simple string procedure PutFileTogether(
					string Device, File, Ext, PPN);
!-------------------------------------------------
!
! ABSTRACT:
!	PutFileTogether takes the components of a file spec. and
!	puts them together with the appropriate delimiters.
!
! PARAMETERS:
!   Device: String that is the device portion of a file spec.
!
!   File: String that is the file portion.
!
!   Ext: String that is the extension.
!
!   PPN: String that is the PPN.
!
! RESULTS:
!	PutFileTogether returns the combined file spec. as a string.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!	PutFileTogether will only put in delimiters for a field if the
!	field exists (otherwise a null extension will look like a blank
!	extension, etc).
!
!-------------------------------------------------;
begin "PutFileTogether"

SDum _ null;
if fulstr(Device)
    then SDum _ Device & ":";
if fulstr(File)
    then SDum _ SDum & File;
if fulstr(Ext)
    then SDum _ SDum & "." & Ext;
if fulstr(PPN)
    then SDum _ SDum & "[" & PPN & "]";
return(SDum);

end "PutFileTogether";
internal simple string procedure FileDefault(
		string AFileSpec, DefaultFileSpec; integer ForceMask(0));
!-------------------------------------------------
!
! ABSTRACT:
!	FileDefault takes a file specification and a default file
!	spec. and fills in omitted fields in the file spec. with the
!	fields from the default file spec.
!
! PARAMETERS:
!   AFileSpec: String that is the main file spec.
!
!   DefaultFileSpec: String that is the file spec. providing the defaulted
!	fields.
!
!   ForceMask: Integer that specifies which default fields should be used
!	even if present in AFileSpec.  The bits in ForceMask are allocated
!	as follows:
! @enter(verbatim)
!		1 - Force use of device
!		2 - Force use of file
!		4 - Force use of extension
!		8 - Force use of PPN
! @leave(verbatim)
!	The default ForceMask is 0.
!
! RESULTS:
!	FileDefault returns the defaulted filled-in file spec. as a string.
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!	TearFileApart is used to fragment both the original and the default
!	file specs, then all fields which are either null in the original
!	file spec or which have the associated bit turned on in ForceMask
!	are replaced by the corresponding fields from the defaults.
!
!-------------------------------------------------;
begin "FileDefault"

string OFS!Dev, OFS!File, OFS!Ext, OFS!PPN;
string DFS!Dev, DFS!File, DFS!Ext, DFS!PPN;

TearFileApart(AFileSpec,OFS!Dev,OFS!File,OFS!Ext,OFS!PPN);
TearFileApart(DefaultFileSpec,DFS!Dev,DFS!File,DFS!Ext,DFS!PPN);
if nulstr(OFS!Dev) OR ((ForceMask land '1) neq 0)
    then OFS!Dev _ DFS!Dev;
if nulstr(OFS!File) OR ((ForceMask land '2) neq 0)
    then OFS!File _ DFS!File;
if nulstr(OFS!Ext) OR ((ForceMask land '4) neq 0)
    then OFS!Ext _ DFS!Ext;
if nulstr(OFS!PPN) OR ((ForceMask land '10) neq 0)
    then OFS!PPN _ DFS!PPN;
return(PutFileTogether(OFS!Dev,OFS!File,OFS!Ext,OFS!PPN));

end "FileDefault";

end "FilDef";
    