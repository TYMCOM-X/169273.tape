entry SetCursor,HomeCursor,ClearScreen,MoveCursor,KillLine;

begin "Cursor"
require "SAI:CSWIT.SAI" source!file;
define HISEGGING=ifcr COMPILER!SWITCH!H 
    thenc +1 
elsec -1 
    endc;
    define !NOBAYSAILIB! = true;
require "SAI:BAYSAI" source!file;
source!l(TTYSER);
source!l(MONTOR);

!-------------------------------------------------
!
! ABSTRACT:
!	CURSOR provides a package of routines to do cursor control on
!	Beehives, ADMs and Infotons.
!	Warning: Not all functions are implemented for ADMs.
!-------------------------------------------------;
! Submodule: CURSOR.SAI
! Date: 26-Jan-79
! Who: David Lamb logged in as SAIL Files
! Added code to handle the new Concept-100 terminals.  This code was
! stolen from the A710 version written by Craig Everhart.
! 
! ;
! Submodule: CURSOR.SAI
! Date:  1-Dec-78
! Who: SAIL Files
! Moved macros for terminal types to .REQ file.
! [MS30]
! 
! ;
! Submodule: CURSOR.SAI
! Date: 27-Sep-78
! Who: SAIL Files
! Cleaned up some Zilch misuses at Everhart's prompting.
! [MS30]
! 
! ;
! Submodule: CURSOR.SAI
! Date: 12-Sep-78
! Who: SAIL Files
! Fixed bug with ADM's in SetCursor (problem was missing parens around arg.
! to Str macro).
! [MS30 & CE10]
! 
! ;
! Submodule: CURSOR.SAI
! Date: 14-Aug-78
! Who: SAIL Files
! Macros the user needs were documented in the design section of the
! submodule, also the variable DPYTerminal.
! [CP01]
! 
! ;
!-------------------------------------------------
! DESIGN:
!   Macros and variables supplied:
!	Four macros and a variable are provided.  Routines
!	that take a direction for cursor motion as a parameter
!	need the macros for specifying directions.  The macros
!	are:  MoveUp, MoveDown, MoveLeft, and MoveRight.
!	The variable DPYTerminal, initialized by the package,
!	is nonzero if the terminal is of a type supported by
!	the CURSOR package.
!-------------------------------------------------;
source!l(Cursor);

require "{}<>" delimiters;

define	EPrint(S) = {print(Escape&S)},

Cursor!Debugging=False,


control(X) = {Str(<(("X") land '37)>)},
Str(X) = {((X)&null)},

Comment The octal values for moving the cursor on an infoton;
InfRight={str('31)},
InfLeft={str('32)},
InfUp={str('34)},
InfDown={str('35)},

BeeLeft = {(Escape&"D")},
BeeRight = {(Escape&"C")},
BeeUp = {(Escape&"A")},
BeeDown = {(Escape&"B")},

SupLeft = {(Escape&"D")},
SupRight = {(Escape&"C")},
SupUp = {(Escape&"A")},
SupDown = {(Escape&"B")},

Comment The decimal values for moving the cursor on lsi ADM-1,ADM-3A, or ELITEs;
ADMLeft={Str(8)},
ADMRight={Str(12)},
ADMUp={Str(11)},
ADMDown={Str(10)},
ADMHome={Str(30)},
ASetCurs={str("=")},
EHome={control(Y)},	Comment Cursor Home character ELITE 1520;
ESetCurs={str(30)},	Comment Cursor Address Select for ELITE 1520;
E25SetCurs={str(12)},	Comment Cursor Address Select for ELITE 2500;
comment concept-100 codes;
ConLeft={(Escape&">")},
ConRight={(Escape&"=")},
ConUp={(Escape&";")},
ConDown={(Escape&"<")},
ConHome={(Escape&"?")},
ConSetCurs={(Escape&"a")};



internal integer CurX,CurY,DPYTerminal;
internal simple procedure ClearScreen;
!-------------------------------------------------
!
! ABSTRACT:
!	ClearScreen will clear the terminal's screen.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!	The global variables CurX and CurY which keep track of the cursor
!	position are set to 0.
!
! ERRORS:
!
! DESIGN:
!	Beehives do not use <clear-screen> but rather <home><clear-to-
!	end-of-display> in order to preserve hardware tabs.
!
!-------------------------------------------------;
    begin "Clear Screen"
    case DPYTerminal of
	begin
	[SuperBee] [BeeHive]
	  [Infoton] [Concept]	print(FF);
	[ADM1]		eprint("+");
	[ADM3A]		print(Control(Z));
	[NonDisplay]	print("Zap, your screen is blank"&crlf)
	end;
    CurX_CurY_0
    end "Clear Screen";
internal simple procedure HomeCursor;
!-------------------------------------------------
!
! ABSTRACT:
!	HomeCursor will send the terminal's cursor to the home position.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!	The global variables CurX and CurY are set to 0.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
    begin "home cursor"
    case DPYTerminal of
	begin
	[SuperBee] [BeeHive]	eprint("H");
	[Infoton]		print(control(H));
	[Concept]		print(ConHome);
	[ADM1] [ADM3A]		print(ADMHome);
	[NonDisplay]	print("Zap, your cursor is in the top left corner."&crlf)
	end;
    CurX_CurY_0
    end "home cursor";
internal simple procedure KillLine;
!-------------------------------------------------
!
! ABSTRACT:
!	KillLine will kill the line that the cursor is currently on.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
    begin "kill line"
    case DPYTerminal of
	begin
	[Infoton]		print(control(K));
	[SuperBee] [BeeHive]	eprint("K");
	[Concept]		eprint(control(S));
	[ADM3A]			print(control(U));	! Newcomer mod;
	[NonDisplay]		print("Zap, rest of line is killed"&crlf)
	end;
    end "kill line";
simple procedure OutMultiple(string S; integer Count);
!-------------------------------------------------
!
! ABSTRACT:
!	OutMultiple prints the string S on the terminal Count times.
!
! PARAMETERS:
!   S:     String to be printed multiple times.
!
!   COUNT: Integer specifying number of times to print S.
!
! RESULTS:
!
! SIDE EFFECTS:
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
    begin "outmultiple"
    ifcr Cursor!Debugging 
	thenc
	for Dum_1 thru length(S) do
	    print("'",cvos(S[Dum for 1])); print("--",Count,crlf);
	endc
    Sdum_null;
    for Dum_1 thru Count do Sdum_Sdum&S;
    print(Sdum)
    end "outmultiple";
internal simple procedure MoveCursor(integer Direction,HowFar);
!-------------------------------------------------
!
! ABSTRACT:
!	MoveCursor moves the cursor in direction Direction a distance
!	specified by HowFar.
!
! PARAMETERS:
!   Direction: Integer specifying the direction to move.
!
!   HowFar:    Integer specifying how many spaces to move.
!
! RESULTS:
!
! SIDE EFFECTS:
!	CurX and CurY are updated to reflect the cursor movement.
!
! ERRORS:
!
! DESIGN:
!	Unfortunately both of the ADM terminals use a formfeed as their move
!	right control character.  Since this is interpreted by the monitor,
!	which sends a <clear-screen> as well as the <FF> when the output is
!	done normally, it is necessary to special case this and send the 
!	<FF>'s using the IONEOU TTCALL.
!
!-------------------------------------------------;
    begin "move cursor"
    case DPYTerminal of
	begin
	[Infoton]	OutMultiple(case Direction of (InfRight,InfLeft,InfUp,InfDown),HowFar);
	[SuperBee]	OutMultiple(case Direction of (SupRight,SupLeft,SupUp,SupDown),HowFar);
	[BeeHive]	OutMultiple(case Direction of (BeeRight,BeeLeft,BeeUp,BeeDown),HowFar);
	[Concept]	OutMultiple(case Direction of (ConRight,ConLeft,ConUp,ConDown),HowFar);
	[ADM1] [ADM3A]	
	    begin
	    if Direction = MoveRight
		then 
		    begin "ADMRight is FF and is interpreted by monitor"
		    integer Dum2;
		    for Dum_1 thru HowFar do ioneou(Dum2_ADMRight)
		    end "ADMRight is FF and is interpreted by monitor"
		else OutMultiple(case Direction of (ADMRight,ADMLeft,ADMUp,ADMDown),HowFar)
	    end;
	[NonDisplay]	print("Zap, The cursor is moved."&crlf)
	end;
    case Direction of
	begin
	[MoveRight]	CurX_CurX+HowFar;
	[MoveLeft]	CurX_CurX-HowFar;
	[MoveUp]	CurY_CurY+HowFar;
	[MoveDown]	CurY_CurY-HowFar
	end
    end "move cursor";
internal simple procedure SetCursor(integer NewX,NewY);
!-------------------------------------------------
!
! ABSTRACT:
!	SetCursor sets the termina's cursor to the specified (NewX,NewY)
!	coordinates (home being (0,0)).
!
! PARAMETERS:
!   NewX: Integer specifying new X-axis (horizontal axis) position.
!
!   NewY: Integer specifying new Y-axis (vertical axis) position.
!
! RESULTS:
!
! SIDE EFFECTS:
!	(CurX,CurY) := (NewX,NewY).
!
! ERRORS:
!
! DESIGN:
!	The procedure BCDNum is a slave routine used to convert an integer
!	into BCD which several terminals use for their cursor addressing.
!
!-------------------------------------------------;
    begin "set cursor"
    integer W,D;

    simple procedure BCDNum(integer X);
	begin "bcd num"
	integer T;
	T_((X div 10) lsh 4) + (X mod 10);
	ioneou(T)	! put out an 8 bit character (including 0);
	end "bcd num";

    case DPYTerminal of
	begin
	[Infoton]	
	    begin
	    HomeCursor;
	    if NewX>CurX
		then MoveCursor(MoveRight,NewX-CurX)
		else MoveCursor(MoveLeft,CurX-NewX);
	    if NewY>CurY
		then MoveCursor(MoveDown,NewY-CurY)
		else MoveCursor(MoveUp,CurY-NewY)
	    end;
	[SuperBee]	
	    begin
	    getformat(W,D);
	    setformat(-3,0);
	    eprint(<"F",NewX,NewY>);
	    setformat(W,D)
	    end;
	[BeeHive]	
	    begin
	    eprint("F");
	    BCDNum(NewY);
	    BCDNum(NewX)
	    end;
	[Concept]
	    begin
	    print(ConSetCurs,str(<newy+32>),str(<newx+32>));
	    end;
	[ADM1] [ADM3A]	
	    begin
	    eprint "[]" ([ASetCurs,str(<newy+32>),str(<newx+32>)]);
	    end;
	[NonDisplay]	print("Zap, your cursor has been set"&crlf)
	end;
    CurX_NewX;
    CurY_NewY
    end "set cursor";
simple procedure InitCursor;
!-------------------------------------------------
!
! ABSTRACT:
!	InitCursor does initialization for the cursor package.
!
! PARAMETERS:
!
! RESULTS:
!
! SIDE EFFECTS:
!	The internal variable "DPYTerminal" is set to the type of the
!	terminal currently controlling the job.  The user can determine
!	whether the terminal is one supported by CURSOR by examining
!	the value of DPYTerminal.  DPYTerminal will be nonzero if
!	the terminal is supported.
!
! ERRORS:
!
! DESIGN:
!	Note that InitCursor is meant to be called during SAIL user
!	initialization phase 1.  This is because it uses global knowledge
!	acquired by TTYSER during initialization phase 1.  Should TTYSER
!	ever change, then CURSOR will have to change.
!
!-------------------------------------------------;
    begin "init cursor"

    DPYTerminal_TERMTYPE;		! Macro declared in TTYSER;
	 if DPYTerminal=cvsix("INFOTO") then DPYTerminal_Infoton
    else if DPYTerminal=cvsix("BEEHIV") then DPYTerminal_Beehive
    else if DPYTerminal=cvsix("SUPERB") then DPYTerminal_SuperBee
    else if DPYTerminal=cvsix("ADM   ") then DPYTerminal_ADM3A
    else if DPYTerminal=cvsix("CONCEP") then DPYTerminal_Concept
    else DPYTerminal_NonDisplay;
    if DPYTerminal neq NonDisplay 
	then ttycrlf(true);
    end "init cursor";

require InitCursor initialization[1];

end "Cursor";
