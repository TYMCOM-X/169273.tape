
entry XLookup, XEnter, XRename;

begin "XLOOK"
    require "SAI:CSWIT.SAI" source!file;
    define HISEGGING=ifcr COMPILER!SWITCH!H thenc +1 elsec -1 endc;
    define !NOBAYSAILIB! = true;
    REQUIRE "SAI:BAYSAI" SOURCE!FILE;
!-------------------------------------------------
!
! ABSTRACT:
!	Procedures and macros to provide convenient
!	use of extended lookup/enter/rename.
!
!--------------------------------------------------;
! Submodule: XLOOK.SAI
! Date:  7-Nov-78
! Who: SAIL Files
! Reformatted documentation for several routines as missing entries were
! giving SHPBAT a belly ache.
! [MS30]
! 
! ;
! Submodule: xlook.sai
! Date:  5-Oct-78
! Who: SAIL Files
! Added XLOOK to the A709 library.
! [CP01]
! 
! ;
!-------------------------------------------------
!	Macros are provided for all offsets in the
!	argument block: !rb<which>.  Integers that
!	are preset as byte pointers for the fields
!	and bits are supplied with names rb!<which>.
!	The interesting stuff in
!	this module is done by a single private
!	function, XUUO.
!-------------------------------------------------;

source!l(XLOOK);

require "{}<>" delimiters;

internal integer rb!nse,rb!crx,rb!acd,rb!prv,rb!mod,rb!crt,rb!crd;
ifc 0 thenc
internal integer rp!log,rp!uce,rp!uwe,rp!ure,rp!uer,rp!dir,
	rp!ndl,rp!nfs,rp!abc,rp!abu,rp!nqc,rp!cmp,rp!fce,
	rp!fwe,rp!fre,rp!bfa,rp!crh,rp!bda;
endc
internal own safe integer array XLBLock[0:'35];

define	EnterUUO = '077000,
	LookupUUO = '076000,
	RenameUUO = '055000;
simple integer procedure XUUO(integer Chan;
				string FileName;
				integer UUOType;
				boolean ParseFile(true));
!-------------------------------------------------
!
! ABSTRACT:
!	The abstract
!
! PARAMETERS:
!	 Chan
!
!	 FileName: as for CVFile
!
!	 UUOType: lookup, enter, or rename
!
!	 ParseFile: if false, do not use the FileName, do not
!		disturb the argument block at all.  Defaulted to true.
!
! RESULTS:
!	The value returned is identical in use and contents to
!	the flag output parameter of the standard LOOKUP/ENTER.
!
! SIDE EFFECTS:
!	Various elements of XLBlock are modified by the UUO
!	that is performed, as described in the Monitor Calls
!	Handbook.  The single exception is that the halfword
!	filled with error information is restored to original
!	value by XUUO.  The error information is returned
!	as the value of the routine in case of error.
!
! ERRORS:
!
! DESIGN:
!	.RBCNT is set to 3 if not already at least that.
!	This should only prevent a few careless errors.
!	The extension is stored with care not to overwrite
!	the right half of the word.
!	Error bits are returned as the value and do not
!	affect the right half of XLBLock[3].
!
!-------------------------------------------------;
begin "XUUO"
integer Flag,Save;
label OK;

if ParseFile
  then begin
    XLBLock[!rbnam]_cvfil(FileName,Save,XLBLock[!rbppn]);
    XLBlock[!rbext]_(Save land ('777777 lsh 18))
	lor (XLBlock[!rbext] land '777777);
    if !SKIP! then
	! Bad file spec from CVFIL;
	return((-1 lsh 18) lor '10);
    end;

! Default the arg count to 3 if not enough already;
if XLBlock[!rbcnt] < !rbext then XLBlock[!rbcnt]_!rbext;
Save_XLBLock[!rbext];	! Save this in case of error;
start!code
	hrrz	1,UUOType;
	hrlz	2,Chan;
	lsh	2,5;
	tlo	2,(1);	! ENTER instruction;
	hrri	2,XLBLock[0];
	setz	1,;
	xct	2;
	hrro	1,XLBLock[!rbext];
	! pick up error code with -1 in LH;
	movem	1,Flag;
	jumpe	1,OK;
	hrr	2,Save;
	hrrm	2,XLBlock[!rbext];	! Restore on error;
OK:	;
end;
return(Flag)
end "XUUO";
internal simple integer procedure XLookup(integer Chan;
					string FileName;
					boolean ParseFile(true));
!-------------------------------------------------
!
! ABSTRACT:
!	Performs an extended lookup.
!
! PARAMETERS:
!	 Chan:	a channel number in the range 0-'17
!
!	 FileName: as for CVFile
!
!	 ParseFile: if true, parse the FileName to fill the filename
!		fields of XLBlock -- if false, do not use the FileName,
!		do not disturb the argument block at all.  Defaulted to true.
!
! RESULTS:
!	The value returned is identical in use and contents to
!	the flag output parameter of the standard LOOKUP/ENTER.
!
! SIDE EFFECTS:
!	Various elements of global integer array XLBlock are
!	modified as described in the Monitor Calls
!	Handbook.  The single exception is that the halfword
!	filled with error information is restored to original
!	value by XUUO.  The error information is returned
!	as the value of the routine in case of error.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
return(XUUO(Chan,FileName,LookupUUO,ParseFile));
internal simple integer procedure XEnter(integer Chan;
					string FileName;
					boolean ParseFile(true));
!-------------------------------------------------
!
! ABSTRACT:
!	Performs an extended enter.
!
! PARAMETERS:
!	 Chan:	a channel number in the range 0-'17
!
!	 FileName: as for CVFile
!
!	 ParseFile: if true, parse the FileName to fill the filename
!		fields of XLBlock -- if false, do not use the FileName,
!		do not disturb the argument block at all.  Defaulted to true.
!
! RESULTS:
!	The value returned is identical in use and contents to
!	the flag output parameter of the standard LOOKUP/ENTER.
!
! SIDE EFFECTS:
!	Various elements of global integer array XLBlock are
!	modified as described in the Monitor Calls
!	Handbook.  The single exception is that the halfword
!	filled with error information is restored to original
!	value by XUUO.  The error information is returned
!	as the value of the routine in case of error.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
return(XUUO(Chan,FileName,EnterUUO,ParseFile));
internal simple integer procedure XRename(integer Chan;
					string FileName;
					boolean ParseFile(true));
!-------------------------------------------------
!
! ABSTRACT:
!	Performs an extended rename.
!
! PARAMETERS:
!	 Chan: an integer in the range 0-'17
!
!	 FileName: as for CVFile
!
!	 ParseFile: if true, parse the FileName to fill the filename
!		fields of XLBlock -- if false, do not use the FileName,
!		do not disturb the argument block at all.  Defaulted to true.
!
! RESULTS:
!	The value returned is identical in use and contents to
!	the flag output parameter of the standard LOOKUP/ENTER.
!
! SIDE EFFECTS:
!	Various elements of global integer array XLBlock are
!	modified as described in the Monitor Calls
!	Handbook.  The single exception is that the halfword
!	filled with error information is restored to original
!	value by XUUO.  The error information is returned
!	as the value of the routine in case of error.
!
! ERRORS:
!
! DESIGN:
!
!-------------------------------------------------;
return(XUUO(Chan,FileName,RenameUUO,ParseFile));
simple procedure XLInit;
!-------------------------------------------------
!
! ABSTRACT:
!	Initializes byte pointers for users of the module.
!	Called during SAIL initialization.
!
! PARAMETERS:
!	None.
!
! RESULT:
!
!! SIDE EFFECTS:
!	A group of variables is supplied by the routine.
!	These are intended only to be read by the user, never
!	set.  In fact, they are only intended for use in
!	LDB and DPB.  Each one points to the appropriate place
!	in XLBlock.
!
! ERRORS:
!
! DESIGN:
!	The rp.<which> group is turned off with "ifc 0"
!	because of the space used in XLInit for calls on
!	point.
!
!-------------------------------------------------;
begin "XL Vars"
rb!nse_point(1,XLBlock[!rbcnt],18);	! (enter only) non-superseding enter;
rb!crx_point(3,XLBlock[!rbext],20);	! extension of rb!crd;
rb!acd_point(15,XLblock[!rbext],35);	! access date;
rb!prv_point(9,XLblock[!rbprv],8);	! privilege;
rb!mod_point(4,XLblock[!rbprv],12);	! mode;
rb!crt_point(11,XLblock[!rbprv],23);	! creation time;
rb!crd_point(12,XLblock[!rbprv],35);	! creation date;
ifc 0 thenc
    rp!log_point(1,XLBlock[!rbsts],0);	! logged in;
    rp!uce_point(1,XLBlock[!rbsts],9);	! checksum error;
    rp!uwe_point(1,XLBlock[!rbsts],10);	! write error;
    rp!ure_point(1,XLBlock[!rbsts],11);	! read error;
    rp!uer_point(3,XLBlock[!rbsts],11);	! all ufd errors;
    rp!dir_point(1,XLBlock[!rbsts],18);	! directory;
    rp!ndl_point(1,XLBlock[!rbsts],19);	! no deletes;
    rp!nfs_point(1,XLBlock[!rbsts],21);	! don't failsafe;
    rp!abc_point(1,XLBlock[!rbsts],22);	! always bad checksum;
    rp!abu_point(1,XLBlock[!rbsts],24);	! always back up;
    rp!nqc_point(1,XLBlock[!rbsts],25);	! non-quota checked file;
    rp!cmp_point(1,XLBlock[!rbsts],26);	! ufd compressing;
    rp!fce_point(1,XLBlock[!rbsts],27);	! checksum error;
    rp!fwe_point(1,XLBlock[!rbsts],28);	! write error;
    rp!fre_point(1,XLBlock[!rbsts],29);	! read error;
    rp!bfa_point(1,XLBlock[!rbsts],32);	! bad by failsa restore;
    rp!crh_point(1,XLBlock[!rbsts],33);	! closed after crash;
    rp!bda_point(1,XLBlock[!rbsts],35);	! bad by damage assessment;
endc
end "XL Vars";

require XLInit initialization;
require unstack!delimiters;

end "XLOOK";
