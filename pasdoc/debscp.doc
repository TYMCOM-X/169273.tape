#system(Pascal Debugger)
#module(DEBSCP,6/07/79)
DEBSCP contains the Pascal Debugger's routines associated with
establishing a scope stack.
#entry(R50$ASC)converts a Radix-50 encoded string to ASCII.
#entry(FIRST$MODULE)returns a pointer to the LINK symbol table
entry for the first module entry in the table.
#entry(NEXT$MODULE)is given a pointer to a LINK symbol table
entry for a module and returns a pointer to the next LINK
symbol table entry for a module.
#entry(MOD$LOOKUP)is given a module name and returns a pointer
to the LINK symbol table entry for the module.
#entry(SYM$LOOKUP)searches the LINK symbol table for a specified
identifier and returns a pointer to the symbol table entry (if found).
#entry(RET$ADDR)is given a stack frame pointer and returns the
corresponding return address and any overlay module number
associated with the return address.
#entry(LOAD$OVERLAY)is given a stack frame pointer, and then, if
necessary, brings the module corresponding to the stack frame
into core.
#entry(OPEN$DEB$FILE)is given a program block pointer and opens
the corresponding symbol table file.
#entry(MAIN$FRAME)determines if a given stack frame corresponds to 
the program's main routine.
#entry(PROC$BLK)is given a stack frame pointer and returns a pointer
to the corresponding procedure block (if any).
#entry(PROC$NAME)is given a stack frame pointer and returns the
name of the corresponding procedure.
#entry(CALL$BASIS)is given a stack frame pointer and returns a
pointer to the stack frame of the caller.
#entry(OPEN$STACK)takes a stack frame pointer and returns a scope
stack corresponding to the frame.
#entry(OPEN$FRAME)is given a stack frame number and returns a scope
stack corresponding to the frame.
#entry(OPEN$ROUTINE)is given a scope id record and returns a scope
stack corresponding to the nested, named routines.
#notes
$par +5
If the routine being opened is not in DEBUG (and TRACE) mode,
the open will fail.
It may also fail for other reasons (e.g. improperly nested routine
names, a mismatch of the day/times in the .DEB and .REL file, etc.).
In any case, if a severe error is detected then the state of the 
scope stack returned must be considered undefined. (There is one
exception to this, the status code WRONGINVOCATION is a warning
return only; the scope stack returned is valid.)
$par +5
In addition to returning a scope stack, the open routines (OPEN$STACK,
OPEN$FRAME, OPEN$ROUTINE) have two important side effects.
First the .DEB file for the module containing the opened routine
is also opened.
(Note that a 'scope' always lies within a single Pascal module;
the code assumes this in several places.)
If the open is unsuccessful, then the .DEB file may or may not
have been opened.
Second, if the module being opened resides in an overlay, then
the overlay will be brought into core if necessary.
Again, if the open is unsuccessful, then this may or may not have
been done.
$par +5
Many of the Debugger's routines concerned specificaly with overlays
are in this module.
This is natural given the fundamental assumption the debugger
makes concerning overlays: the module containing the currently
open scope is assumed to be core resident.
Routines may locally violate this rule (e.g. the .DISPLAY STACK
command) but must restore the currently open module before
returning.
#end
