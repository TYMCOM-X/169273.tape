$num off 
$page
$cen
&INTERNAL DOCUMENTATION&
$ski
&PASCAL DYNAMIC MEMORY&
$ski 2 $jus $ind left +5 $ind right +5
This document is both the functional specification and implementation
guide to PASCAL dynamic memory, as supported in version 6.0 of MDSI's
PASCAL-10. It is intended for reference usage by the persons
responsible for maintenance and modification of the PASCAL runtime
environment on the PDP-10. As such, it assumes reader familiarity with
the user-level documentation for dynamic memory as well as general 
familiarity with the MDSI PASCAL-10 environment. It is not, however,
intended as a user's guide, and users should &not& write programs
which depend on any of the details enclosed herein.
$ski
This document is divided into three parts. The first is a brief abstract
on the MDSI PASCAL-10 dynamic memory facility.
The second is a detailed description of the data structures and algorithms
used in the current dynamic memory implementation.
The third section is a discussion of the trade-offs inherent in
this design, with emphasis on "current" issues in the
compiler development project.
$ski 3
$ver
Jerry Rosen, PASCAL Group
January 22, 1979
$jus
$tit right 'PASCAL Dynamic Memory/\' right 'January 22, 1979'
$ind left -5 $ind right -5
$page
$cen
&DYNAMIC MEMORY& -- &ABSTRACT&
$ski 2 $jus $par 5
The concept of a &pointer&
is fundamental to the abstract study of useful data structures.
In certain languages, the programmer must provide his/her own 
implementation of the abstraction; for example, in FORTRAN, a stack
may be implemented by using a large array and an index into the
array as a stack pointer.
PASCAL provides a pointer to a &base type& of data as a primitive data
construct.
Such pointers are implementation independent with respect to
the exact format of the pointer, excluding explicit coercions.
$ski $par 5
MDSI PASCAL-10 provides the operations of assignment and equality
comparison on pointer types, like most other types.
In addition, the &dereference& operation, indicated by the up-arrow
(^) operator, is provided;
if FOO is a variable of a pointer type, then
FOO^ is, in general, a variable of the pointer's base type.
Finally, &creation& and &deletion& operations are defined for
pointers.
When a pointer is NEWed, its contents are changed such that the
dereference of the pointer is an instance of the base type
distinct from all others.
When a pointer is DISPOSEd, the instance of the base type to
which the pointer points is invalidated, regardless of the value of any
other pointers of the pointer type.
$ski $par 5
The current implementation of dynamic memory provides four distinct
runtime systems for these operations. In this document, these will
be described as the &quickfit&, &firstfit&, &paged area&, and
&incore area& schemes.
The four schemes are incompatible in the following manner: all modules
using NEW, DISPOSE, MARK, RELEASE, the dereference operator (^), or
any of the several &area& functions, must be compiled &identically&
with respect to the VIRTUAL or INCORE options.
If no VIRTUAL option is specified at compile time, quickfit is used.
$ski $par 5
The four schemes provide a spectrum of runtime capabilities with
respect to dynamic memory management across two trade-off dimensions:
time versus space, and interaction versus automation. As a side
effect, the area concept provides facilities for dynamic storage
to be shared between programs. Finally, the area concept provides
a potential memory space in excess of that provided by the PDP-10.
$ski 3 $cen
&AREAS&
$ski 2 $jus $par 5
The concept of areas in dynamic memory is covered in the existing
user documentation.
It suffices here to say that areas create a &partition& on
the available dynamic memory.
Operations defined for areas, as described in the user documentation,
are available in the paged area and incore area schemes.
$page $cen
&DATA STRUCTURES&
$ski 2 $jus $par 5
Pointers in MDSI PASCAL-10 are of two types:
&real& pointers and &virtual& pointers.
The quickfit and firstfit schemes use real pointers, and the paged area
and incore area schemes use virtual pointers.
In the real pointer schemes, the pointer value is the &address& of
the element of the base type given by the dereference operation.
Thus, the PDP-10 hardware addressing modes can be used for the
dereference, i.e.\load the pointer into a register and use indexed addressing
with a field offset to reference a given field of a base type element.
Real pointers are intrinsically a halfword in size.
$ski $par 5
Virtual pointers are a fullword in size. Dereferencing a virtual pointer
requires a runtime routine to translate the pointer into a &core address&.
In general, the same core address is &not& produced by two translations
of the same virtual pointer.
Within an area, virtual pointers appear to be addresses in an &address space&
ranging from zero to a large, assembly-time constant. This address space
is divided into &pages& of a fixed size, which is a power of two greater
than or equal to 128 words (the size of a disk block). The pages
within an area are individually or collectively either &in core&,
residing in a &page frame&, or &out of core&, occupying some number
of disk blocks comprising a &disk page& in a disk file called the 
&backing store&. In the incore management scheme, the pages comprising
an area are all either in core or out of core, under user control. The
paged scheme brings individual pages in and out of core by demand of
the translation routines.
$ski $par 5
The location of a given page is determined by its entry in a &page table&.
A page table is a page in length, and is indexed into during a
translation to determine both the residency status of its pages (in
or out) and their location (either in or out). A page table may
be swapped out to the backing store either explicitly or when all
its referent pages are out of core.
In an analogous fashion, the location of a given page table is
determined by its entry in an &area table&.
The first area table is resident in static storage, and others
may be created during the course of a run. 
Area tables are never swapped to the backing store.
$ski $par 5
Virtual addresses are divided bitwise into four fields based on
runtime assembly parameters. The &word offset& is the rightmost
bits of the address which index a page, e.g.\if the page size is
512 words, the rightmost nine bits of the address comprise the
word offset. The next rightmost bits which index a page comprise
the &page offset&, which is used to index a page table.
The leftmost bits of the address form the &area number&. The number
of bits in the area number is an assembly time constant.
The actual value at run time of an area number may not
exceed either the page size or another assembly time constant.
Any remaining bits in the virtual address
form the &page table offset&, which is used
to locate the proper area table.
$ski $par 5
Translation of a virtual address into a core address proceeds
as follows: the page table offset is used to locate the proper
area table. If this field is non-zero, then word zero of the
static area table is used as a pointer to the next area table, and
the chain is followed the number of times indicated by the field.
The area table is indexed by the area number field of the pointer,
and locates the page table. The page table is indexed by the page offset
to find the page. Finally, the page is indexed by the word offset
to find the word desired. Page frames are page aligned in
core, so the word offset is merely OR'd into the page frame address
to obtain the word address desired; one may infer that the rightmost
n bits of a virtual pointer and its corresponding core address are
identical.
$ski $par 5
In the virtual scheme, entries in the area tables
and the page tables are similar. Bit 13 (the
indirect bit) is &set& if the corresponding page or page table is
in core (in a page frame), and &clear& if it is on a disk page.
The right halfword gives the core address of the page frame, or the
page number in the backing store, of the page or page table. Notice
that the backing store is addressed by a zero-based page number, and
that page zero on the disk file is not used. Even in the worst case,
that of the virtual page size being 128 words, the backing store
can grow to 2**18 128-word blocks, which is on the order of a diskpack
in size.
The other bits in the page table and area table words are reserved for
other uses; modifying routines should take pains to modify only the
appropriate bits.
$ski $par 5
In the incore scheme, the entries in the area tables and page tables
have been modified to provide an efficiency increase over the scheme
given above for the virtual case. The contents of the right halfword
of the entries (core or disk address) are not changed, except that
a disk address is always marked with the high-segment bit set (i.e.\or'd
with 400000 octal). Thus, if this bit is set, the desired page or
page table is out. Further, if the page or table is in, the left halfword
contains a register specification to speed up determination of the

page frame address. An area table entry for a page table &in core&
has the indirect bit set, and the index register field equal to 16 octal.
This provides an indirection using the contents of register 16 to index
the page table to which the entry points. The page table entry, however,
&never& sets the indirect bit, to avoid uncontrolled indirection into
the page frame. Thus the translation procedure is to load up register
15 with the area number, register 16 with the page offset, and then
try to pick up the frame address with a
$ski $par 10
MOVEI 16,@VATBL.(16)
$ski
If this returns a zero, then either the area or the page specified does
not exist. If this returns an address with the high segment bit set, it
is a disk address, and the desired page is on the disk. Otherwise,
16 contains the page frame address.
$ski $par 5
Both page frames and disk pages are managed by the runtime. Disk pages
are simply allocated off the end of the file initially, and chained
through their first word to form a stack when freed. The chained pages
are reallocated before the file is again extended. Page frames are
managed by an &origin table&, containing one word per frame. The symbol
VBUF.\contains the address of the zeroth buffer, and buffers are
numbered sequentially beyond that point. The symbol VORG. contains the
address of the origin table. For an allocated buffer, the &left& halfword
of the entry is the "backlink" core address; for pages, this is the
address of the page table entry for the page residing in the page frame,
and for page tables, the address of the area table entry. The &right&
halfword contains the disk page number
for the contents of the page frame, or zero if the contents
have never been out on the backing store. Furthermore, if the
page size is 512 words or greater, bit zero of the origin table word
is &set& if the page frame is "clean" (has not been written upon), and
clear otherwise. A clean page frame is write-protected, and the
fault caused by an attempted write clears this bit (see "Clean and
Dirty" below).
$ski $par 5
In the incore scheme, the number of page frames grows and shrinks as
needed. Free frames are chained in an analogous fashion to disk pages,
except that they are chained through their origin table entries instead
of their first words. A routine exists to attempt to collapse the
"tail" of the low segment, i.e.\to destroy free pages at the end of
the program's low segment, and may be called at any time to attempt
to do so. Changes in the allocation status of page frames occur in
two ways: by creation of pages, either by the creation of an area or
by the extension of an area for allocation (see "Allocation" below),
or by explicit user calls (AREA_OUT, AREA_DELETE, AREA_IN, etc.).
$ski $par 5
In the paged scheme, a fixed number of page frames are allocated at
program initialization time. A demand paging system is used to regulate
the contents of the frames.
When a given page which is currently on the backing store
must be addressed,
a free frame is allocated if any exist.
If all frames are in use, the
least recently used frame (LRU) is freed up by &swapping& its page
out to the backing store. To facilitate this discipline, a MRUREF table
is maintained by the manager. This table has one entry per frame, like
the origin table. If a frame's entry is negative, the frame contains
a page table. The magnitude of the entry is the number of other frames
containing pages which the page table references. If a frame's entry
is non-negative, then the frame is either free or contains a page. If
the origin table entry is zero, the frame is free. Otherwise, the
MRUREF entry is &greatest& for the frame containing the most recently
used page, and &least& for the LRU page's frame. The algorithm for
choosing the LRU page is to find the frame with the smallest 
non-negative MRUREF count. Notice that when a page is written out,
the MRUREF count of its referent page table's frame &must& be
incremented to
keep the count accurate. Similarly, when a frame is needed for a given
page, the MRUREF count of the referent page table's frame must be
decremented to prevent the swapping out of the page table.
Notice also that a frame containing a page table whose pages have all
been swapped out will have a MRUREF count of zero, and thus will
automatically be the next LRU candidate.
Finally, since page tables may be swapped out,
the translation of a virtual address may involve the swapping
of a page table into the previously LRU frame.
$ski 3 $cen
&ALLOCATION&
$ski 2 $jus $par 5
The quantum of creation in the virtual space is the page. Areas are
extended on the tail by a page when neccessary by the NEW routine.
NEW cannot create a record larger than a page, because allocation
of user records is performed &entirely within a page&. This issue
is discussed further in the third section. 
Before extending an area, however, NEW attempts to allocate from
the free space, if any, currently existing in the area.
$ski $par 5
As an attempt to reduce paging overhead in both virtual schemes,
a number of bits in the page table are used by the allocator routines.
These bits are left justified in the page table word, and a
sufficient number of bits are used to permit the recording of
the &largest free block& available on that page. (Actually, since
the entire block may be free, the number recorded in the page table
byte is the free block size minus one, unless the page is entirely
empty, in which case zero is recorded. This permits log-base-two 
(pagesize) bits to be used.)
After every allocation or deallocation, this number may have to
be updated. In this manner, the page itself need not be examined
if it does not have sufficient free space to perform the
allocation, and thus pages which are out of core need not be
brought back into core.
$ski $par 5
Every block of PASCAL dynamic memory has a &control word& as its
first word. This word is &positive& if the block is free, and &negative&
otherwise.
The pointer returned from NEW and used in the program is the address
of the word &following& the control word. The control word is
&not& included in the record length at the call to NEW, but &is&
included in the control word itself. In other words, a request
to NEW for a 6-word record will return a pointer to the second
word of a 7-word block, whose first word is -7.
$ski $par 5
The algorithm for NEW first searches all page tables of the
desired area for a block with sufficient free space to make the
allocation. In the paged scheme, page tables in core are checked
before any are brought in from the backing store.
If no such page is found, a new page is created at the tail of
the area.
The candidate page is then searched for the first internal block
large enough for the allocation; the block is split if the
remnant would be above an assembly-time constant size, with the
allocated block coming from the tail of the original block.
The allocated block is zeroed and marked as allocated, and the
virtual page is walked to redetermine the size of the largest
free block.
$ski $par 5
To DISPOSE a record, the virtual address is first translated using
a common entry point in the translation package.
If the word preceding the first word of the record is negative, it
is assumed that the address passed to DISPOSE was valid.
The block is freed by changing the sign of the control word, and the
page is walked from the first block in an attempt to coalesce
any other free blocks to the new free one.
The size of the (coalesced) block is retained for comparison with
the bits in the page table entry for the page.
If the coalesced block is larger, its size minus one is recorded
in the page table. Notice that no attempt is made to destroy
completely free pages at the end of the virtual space, an optimization
which could significantly improve performance.
$ski $par 5
For compatibility with older PASCAL programs, the intrinsic functions
MARK and RELEASE are supported in both the paged area and incore area 
schemes.
The so-called "default area" can be marked and released, which will
destroy all pages beyond the released heap mark. Thus an old PASCAL
program using MARK and RELEASE can be compiled in VIRTUAL mode
with no significant change to the program text.
$ski 3 $cen
&CLEAN AND DIRTY&
$ski 2 $jus $par 5
When a page frame is needed, and a page is selected as the LRU candidate,
it is quite
possible that the copy currently on the file is identical to the
incore copy.
In this case, the page need not be written to the swapping file.
To detect such a "clean" page, any page brought into a frame from
the swapping file is initially marked clean by setting bit zero
in the frame's origin table entry.
If bit zero is still set at swap-out time for that frame, the
actual swap-out is suppressed.
$ski $par 5
To detect when a clean page becomes dirty, a special ADP version
of the PAGE.\monitor call is used. This call write-protects some
number of 512-words in user memory, causing a page fault
if a write is attempted.
Since the monitor call works on pages of memory, which are  512 words
in size, aligned on 512 word boundaries, PASCAL page frames are also
aligned on page size boundaries.
If the PASCAL virtual page size is 512 words or greater, a page
fault handler is included in the runtime to provide clean/dirty
detection.
When a write protect failure page fault occurs, the handler determines
the page frame in which the fault occurs, and clears bit zero in
the corresponding origin table entry.
Thus at swap-out time, the version on the disk page is updated.
This implies that special considerations must be taken to insure
that a given page frame is write enabled when necessary.
Also, any routine interpreting the left halfword of an origin table
entry as a backlink must disregard bit zero.
Finally, if the page size is larger than 256 words, the page fault
facility provides a test to determine whether a given program
is running virtual (or incore) or standard.
If location .JBPFH (octal 123) in the job data area is non-zero
after program initialization, then the program is providing
its own page fault handler, which is probably the PASCAL one.
If .JBPFH is zero, then the program cannot be virtual or incore.
$ski $par 5
In the incore scheme, pages are not swapped in and out singly,
but rather all pages of an area are swapped in or out together.
To reduce overhead for monitor calls, the multiple argument facility
of the PAGE.\call is used.
A list of page numbers to be protected or unprotected is accumulated
by the routine PFENA.\and PFDIS.; if the internal table is too small,
or if a call to PFDON.\is made, the list is sorted as per the requirements
of the PAGE.\call, and the call is made.
Thus, one call with 20 page arguments is made, rather than 20 calls.
To protect or unprotect a single page, both calls must be made.
$ski $par 5
In practice, the clean/dirty facility does &not&
reduce resource consumption significantly, because the overhead
involved with the PAGE.\calls and the page fault handler
is comparable to the overhead involved in performing the I/O
that clean/dirty suppresses. However, the real time performance
of a PASCAL virtual program is much better, as PAGE.\calls are
much faster than disk I/O operations.
$ski 3 $cen
&AREA MANIPULATION&
$ski 2 $jus $par 5
As mentioned above, areas provide a means of partitioning the virtual
heap.
Multiple areas can exist concurrently, and have defined operations.
$ski $par 5
Areas must be created before any operations may be performed.
The function AREA_CREATE creates a unique area and returns its
index, to be used on subsequent operations.
The maximum area number is limited at assembly time to AMAX,
a constant, which must be less than the page size.
When an area is created, its first page table and page are
allocated and initialized. 
The converse operation is AREA_DELETE (index), which destroys
the area indicated by <index>.
In the incore scheme, an area must be swapped in to be deleted,
and is swapped in when created.
$ski $par 5
Areas may be saved on a file by AREA_SAVE (index,fn) and restored
by AREA_LOAD (index,fn). AREA_SAVE does not change the status of
an area, and the file FN is emptied before the save. 
In the incore scheme, an area must be swapped in to be saved.
The area index passed to AREA_LOAD must have been previously
CREATEd, and several checks are performed on the file to insure
that it is an area save file.
The previous contents of the area are destroyed.
An area save file is marked by control information in block zero:
word zero is the page size, word one the allocator table entry,
word two the root pointer, and the rest of the block zero.
A program can only load area save files having the identical page size.
$ski $par 5
In the incore scheme, the user has control over the status of
an area with respect to core residence.
In particular, an area may be referenced only when it is entirely
in core, and the user must explicitly swap the area in
via AREA_IN (index). Similarly, an area will remain in core
until it is swapped out via AREA_OUT (index).
These two routines give the user control over the total size
of the low segment, which also provides the upper limit on
the sizes of areas in core.
In the virtual scheme, AREA_IN is a no-op, and AREA_OUT zeroes
the MRU counts of buffers containing pages or page tables of
the specified area, making them the next LRU candidates.
$ski 3 $cen
&HEAP MANIPULATIONS&
$ski 2 $jus $par 5
The entire virtual heap has operations defined on it.
The user may reinitialize the heap via HEAP_CREATE (FN,END),
which creates a null heap (no areas defined) using FN as
the paging file. If END is true, control information is written
to FN at normal program termination time to create a &heap save& file.
Such a file may be reloaded by the same or a different program
via HEAP_LOAD (FN,END). LOAD destroys both the current swapping
file and any defined areas, and then uses FN as the swapping file.
END is defined as previously. During program execution, the state
of the heap may be frozen by HEAP_SAVE (FN). This operation flushes
all buffers out to the swapping file, and then copies the contents
of the file to FN. After a call to SAVE, all areas are out of core.
$ski $par 5
The substantive difference between saving areas and saving heaps
is that saving heaps was designed for sequential program usage.
For example, the first pass of a multi-pass compiler may CREATE the
heap to be used by subsequent passes via HEAP_LOAD.
Area save files should be used as a means of program initialization.
$ski 3 $cen
&CURRENT ISSUES&
$ski 2 $jus $par 5
The basic scheme of the entire dynamic memory implementation is to
translate virtual addresses into core addresses at the time of
any atomic reference.
This eliminates any dependencies in the compiled code with respect
to validation of core addresses (i.e.\whether a previously translated
address is still "good").
This philosophy leads to astronomical numbers of translations.
$ski $par 5
A little bit of thought will reveal the fact that in the virtual system,
&no& address translation can be guaranteed once another translation
has been made, since that new translation could have caused the page-out
of the frame containing the datum of the previous translation (assuming
only 2 frames are available). The incore system can better this
slightly, since a translated address is valid until the area is
explicitly moved (via AREA_OUT or AREA_DELETE or HEAP_SAVE). Thus the
emitted code assumes that parameter addresses are translated prior
to the call, and do not require subsequent translation, and that
field selections within a WITH statement can work off a previously
translated record address. Actually, &any& translated address is valid
until the next movement, but the compiler is hard pressed to recognize
such cases sufficiently to provide said optimization.
$ski $par 5
Notice that the standard method of referencing a record field is to index
by the offset of the field within the record. Again, a little thought
will reveal that this assumes that the record lies entirely within a
virtual page, since with the virtual scheme, a page may be in any
arbitrary frame. Perhaps an algorithm could be devised to move pages
around in frames to "line up" such cross-frame references, but at the
current time this seems too difficult. Thus, it is an unfortunate fact
of life that the allocator assembly must have knowledge of pages.
   3h OH