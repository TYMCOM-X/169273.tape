$margin 10 $width 75
$title left 'Pre-Compiled Include Files' left '18 December 1979'
$just
Part I -- SPECIFICATION
$skip 2
1.\\\&Overview&
$skip $para 5
Pre-compiled include files may be implemented using the Algol\68 concept of a
library prelude.
In Algol\68, the "standard prelude" is a set of symbols, operators,
etc., which are defined in a scope enclosing every Algol\68 compilation.
The standard prelude contains all the language-defined symbols.
Algol\68 allows the standard prelude to be augmented with "library preludes".
A library prelude is an installation-provided or user-provided extension to
the standard prelude, which may be used to provide
additional pre-defined symbols for a compilation.
$skip 2 $need 4
2.\\\&Symbolic Libraries&
$skip $para 5
The Pascal equivalent of a library prelude would be a symbolic library.
A symbolic library would contain a set of symbol definitions.
Symbolic libraries would be created by the compiler from the compilation
of a special kind of module.
A directive would make the symbols from a library available for use in
a compilation.
$skip $need 4
3.\\\&Using a Symbolic Library&
$skip $para 5
The symbols from a symbolic library may be added to the standard environment
of a compilation with the $LIBRARY directive.
This directive specifies the name of a symbolic library file.
(The default extension is .LIB.)\
The compilation containing the directive is said to invoke the library file.
$skip $need 2 $para 5
All $LIBRARY directives must occur before the program, module or
datamodule header statement.
This means that the symbols from the library are defined in the
enclosing environment of the compilation, rather than in the top-level
program or module.
Consequently, it is legal for a module to re-define a symbol
which has been defined by a $LIBRARY directive.
$skip 2 $need 4
4.\\\&Creating a Symbolic Library&
$skip $para 5
A symbolic library is created by the compiler when it compiles a
library module.
A library module is a module which begins with a library header statement,
rather than a program, module or datamodule header statement.
A library module can contain only constant, type and external declarations.
Compilation of a library module results in the creation only of a
library file, containing the symbols defined in the module.
No relocatable binary file is created.
$skip 2 $need 4
5.\\\&Error Checking&
$skip $para 5
The library header statement on a library module may be preceded by
 $LIBRARY directives, just like any other module header statement.
Symbols included from another library do not become part of the
library being created.
They may be used in the declaration of symbols in this module, however.
Thus, if library A is used in the creation of library B, any module which
invokes library B must first invoke library A.
$skip $need 2 $para 5
To enforce this restriction, each symbolic library module contains
the module name of the library module from which it was created, as well as
the date, time and job number at which it was created.
It also contains the same information for every symbolic library
which was used in its compilation.
Whenever a symbolic library is invoked, the compiler first checks
to ensure that the correct versions of all the other libraries used by it
have already been loaded.
$skip $need 4
6.\\\&Forward-Defined Types&
$skip $para 5
In general, if a symbol is defined in more than one library, then the
definition from the last library loaded takes precedence.
However, a special case arises if a symbol occurs in a library only as an
undefined type symbol.
In this case, if a type definition for the same symbol occurs in another
library, or even in the module which uses the library, then it is
treated as an ordinary forward type definition.
$page
Part II -- IMPLEMENTATION
$skip 2
1.\\\&The Symbolic Library File&
$skip $para 5
A symbolic library file begins with a header block containing a library identification
and version code (to indicate that this really is a loadable library file),
the identification of the initial symbol table which this library was
created with,
the number of words required by this library, the number of other libraries
required to load this library, and the sizes of the name and relocation tables
for this library.
This information is followed by the actual body of the library.
$skip $need 2 $para 5
The body of the library contains all the symbol table information for the
symbols in the library.
It also contains a library description record.
The library body is followed by description records for all the other
libraries which are required for successful loading of this library.
$skip $need 2 $para 5
A library description record includes the name of the library (from the
library header statement at the start of the library module), the date and
time of compilation, and the job number in which the compilation occurred.
$skip $need 2 $para 5
The library description records are followed by the name table for the library.
This table contains all the names which are used in the library.
Its size is in the library header block.
For each name in the name table, the address (if any) which should be stored in
the Scopechain field of the name node in the symbol table is indicated.
This address is relative to the start of the library body.
$skip $need 2 $para 5
Finally, the library file contains a relocation table, which is used to
fix up the pointers in the library body.
This table is just a list of relocation records, each specifying the relocation
of a particular field of a particular word.
The relocation records contain the following information:
$skip $ind +5 $para -3
o\\What word of the library body contains the pointer to be fixed up?
$skip $para -3
o\\Where in the word does the pointer begin?
$skip $para -3
o\\Is the pointer a name index or a library relative pointer?
$skip $para -3
o\\For a library relative pointer, which library is it relative to?
$skip $para -3
o\\For a name index, what is the name in question?
$skip $need 2 $ind -5 $para 5
For name index relocation, the pointer must be set to the address of the name
node for the specified name in the symbol table.
For library relative relocation, the existing value of the pointer field must
be offset by the base address of the indicated library.
0 represents the library being loaded; other library numbers represent
entries in the required libraries list.
$skip 2 $need 4
2.\\\&Loading a Library&
$skip $para 5
When a symbolic library file is loaded, the first step is to confirm that it
is a valid symbolic library file, and that it can be loaded with the current
version of the standard environment.
If this is the case, then the following steps must be performed:
$skip $indent +5 $para -5 $need 2
(1)\\Allocate enough space on the heap for the library body, and read it into
this allocated space.
Add the library description record at the start of the body to the list of
library description records.
$skip $need 2 $para -5
(2)\\Read the required libraries list from the file.
Confirm that each required library has a matching entry in the list of
library description records.
Record the base address for each required library.
$skip $need 2 $para -5
(3)\\Read the name table from the file.
Enter each name in the symbol table.
Record the name node address and scopechain value from the file for each name.
$skip $need 2 $para -5
(4)\\Read and apply the relocation records from the file, using the required
libraries table and the name table.
$skip $need 2 $para -5
(5)\\Scan the name table.
For each name in the table, set the scopechain field of the name node to the
relocated scopechain address.
However, if the new scopechain address points to an unknown type symbol and
the old scopechain pointed to a type symbol, then make the new type node an
indirect type pointing to the old type node; if the old scopechain pointed to
an unknown type symbol, and the new scopechain points to a type symbol, then
make the old type node an indirect type pointing to the new type node.
$skip $need 2 $para -5
(6)\\Discard the name and required library tables.
 