$ver
TO: A. Kortesoja, N. Faiman, S. Medlin, J. Rosen

FROM: S. Roush

DATE: 3/16/79

SUBJECT: Pascal debugger enhancements



Attached is a memo describing several proposed enhancements to the
Pascal debugger.  Your comments, criticisms, invectives, et cetera
would be appreciated.  In particular you may wish to consider the
implications of these proposals for the compiler and the runtime
routines.
$jus
$page
$title left 'Proposed Pascal Debugger Enhancements' left '3/16/79'
$skip 2
Several possible enhancements to the Pascal debugger are described below.
These were selected from a lengthy list of possibilities.
The following criteria were used in the selection:
$ind +3
$par -3
1.\The proposed feature shoud either provide a capability not presently
available, or, a substantial increase in convenience.
$par -3
2.\The enhancements should be 'safe', i.e., it should not be easy for
a user to misuse the feature and thereby confuse himself.
$par -3
3.\Implementation of the feature should not result in an 'inordinate'
increase in the size of the debugger.
$par -3
4.\Last, but far from least, all enhancements and those changes 
necessitated by the new compiler must be implemented by the target date.
$ind -3
The last criterion resulted in several otherwise attractive proposals
being rejected.
The following list is, in my judgement, ordered by decreasing priority.
$skip 2
1.\Debugging Overlaid Programs
$skip 1
Currently there are substantial restrictions on debugging overlaid
programs.
In particular, breakpoints may only be set in an overlay segment
if it is in core and is the default (current) module.
There are two reasons for this restriction.
First, the debugger does not interact with the runtime overlay manager
and thus overlay modules which are not in core are inaccessible.
Second, the names of modules from overlay segments are unavailable.
Module names are normally in the LINK symbol table, but overlay
modules are linked independent of the resident portion of the program.
Breakpoints can only be set in the default module unless the 
<source\reference> in the breakpoint command includes a module
qualifier.
The default module can be reset via the .OPEN command. 
Moreover, any module containing a public routine may be opened
using the OPEN command with the following syntax:
$par +5
.OPEN <routine>:  [ <routine>: ]*
$par
In this case, the first (and necessarily PUBLIC) routine is looked up in the LINK
symbol table.
From the location of the entry, the name of the containing module can
be determined.
Unfortunately, for an overlaid program this would be a resident module
containing the overlay transfer vector; thus this approach does not
work with overlaid programs.
$skip 1
The proposed enhancement would modify the above procedure in the
following way.
The first routine would be looked up in the LINK symbol table as is
currently done.
If the program was overlaid then the address found would be a transfer
vector address.
If the first procedure is in an overlay module then the contents of
the transfer vector address will be a 'PUSHJ' instruction.
Assuming the routine is in an overlay then the debugger can proceed
as follows.
The debugger must be able to query the runtime overlay manager to 
determine if the desired overlay segment is in core (the transfer
vector also contains the overlay module number and, indirectly,
the routine's entry point).
If the desired overlay was not in core then the debugger would
request that the overlay manager bring it in.
A pointer to the procedure block of the public procedure is at
the location: entry-point-address + 1.
The procedure block contains a pointer to the program block.
The program block contains the name of the symbol table file.
The module name is then available from the symbol table.
With the open successfully completed the module containing the public 
procedure is the current module.
Breakpoints may be set anywhere within the module without
specifying the module name.
$skip 1
During execution within the debugger, all modules in scope
would be assumed to be core resident.
Commands which might require accessing non-resident overlays ( in
particular the DISPLAY STACK and DISPLAY LOCATION commands) would
be responsible for bringing in the modules they required and restoring
any in-scope modules which they displaced.
Before execution of the user's code was resumed, the module containing the
current statement would be brought back into core if necessary.
$skip 1
Implementaion of the above scheme would involve modifying the debugger
and the overlay manager.
It may also be desirable to eliminate the special case concerning when
the debugger is entered during execution of an overlaid program.
Finally, since the debugger could refer to entry points in the overlay
manager, PASLIB would have to be carefully structured to permit
global symbol resolution in all circumstances.
$skip 2
2. Enhanced display capabilities
$skip 1
Displays of entire records  can be added in a fairly straightforward
fashion.
The only restriction would be that an undiscriminated union would
cause the display to abort.
The display format anticipated would have each field begin on a new
line, with the field identifier preceding the contents of the field.
Fields which were records themselves would be indented an additional
quantum.
$skip 1
In conjunction with the above, entire array displays would be implemented.
Moreover, two means of displaying portions of an array would be permitted.
Substrings of strings or string compatible packed array of chars 
could be displayed using the syntax:
$par +5
str[start:length]
$par
Subsections of an arbitrary array could be displayed with the
following syntax:
$par +5
arr[ n1..n2, n3..n4, n5..n6 ]
$par
A single range limit 'n' is permitted and is equivalent to 'n..n'.
The range limits could be either a constant or a reference of
the appropriate type.
The range limits of generic arrays could be of any scalar type.
Use of the array name by itself would cause a display of the
entire array.
$skip 1
Finally, integer references (and perhaps constants?) could be
displayed in octal via the syntax:
$par +5
<reference>:O
$par
The reference could be a simple variable of type integer or a
subrange of integer, or, an array whose final element type was
integer or a subrange of integer.
$skip 2
3. A kind command
$skip 1
A new command with the following syntax would be introduced:
$par +5
.KIND <source reference>
$par
The command would cause the type of the first statement, for which
code was generated, on the referenced source line to be printed out.
If the line did not have a statement block in the rel file,
then the user would be queried as to whether or not he wanted the 
type of the closest, higher numbered statement.
This would be implemented via multiple entry points to routine STMT.
The debugger could then use the address in the JSP instruction of the
statement block to determine the type of the statement.
$skip 2
4. Conditional command
$skip 1
A conditional command with the following syntax would be introduced:
$par +5
.IF <bool expr> THEN <stmt list> [ ELSE <stmt list> ]
$par
The boolean expression could be an &arbitrary& boolean
valued expression constructed from <reference>s, constants, the
relational operators, paranthesis, and the operators AND, OR, NOT and
IN.
The optional ELSE clause would have the standard Pascal associativity.
The statement lists could be arbitrary lists of debugger commands.
$skip 1
I view this command primarily as a means of obtaining conditional
breakpoints.
There are at least two common situations where such a construct would
be useful.
First, it can provide a 'hook' when you wish to stop at a source line
in the middle of a loop.
For example, the program may be processing a linked list of 
intermediate form tuples and you would like to stop when the
tuple with ID number 63 is reached.  
This could be done with the command:
$par +5
.b <source reference> '.if tuple^.nodeid <> 63 then .p'
$par
A second common situation is when a variable is being assigned
an unexpected value at some unknown time.
In such a case the following command would be useful:
$par +5
.b <source reference> '.if i >= 0 then .p'
$par 
This might also be occuring in a specific node:
$par +5
.b <source reference> '.if not ((tuple = 53618b) and (tuple^.i < 0)) then .p'
$skip 1
This command both provides a very significant new capability and suggests
many further extensions.
For example, macros for long statement lists and arithemetic expressions
to permit 'counting' would be useful.
Time constraints led me to exclude these features.
The proposal could also be restricted fairly easily.
The operators OR, AND, NOT and IN could be omitted, or, strings
and sets could be forbidden as operands to the relational
operators.
The implementaion would be simplified by use of the string and set
runtime routines, or if necessary, copies of them.
    