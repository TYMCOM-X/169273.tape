Multiple-usage expressions in checkout code generators:
$skip
$ind +5
$par
There are half a dozen sources of multiple usages of IF expression tuples.
The most general are due to With statements, and to checks.
Other, more specialized and less problematical, sources are input/output
uses of the reference file variable; getstring/putstring uses of the source/destination
string; aggregate constructors' uses of the alc_temp tuple; and New calls, where
the new_op is referenced for allocation and for initialization of tagfields or flex
upperbounds.
These last are less problematical as they occur in much more specific and controlled
circumstances then the With and check multiple references, and so don't present
difficulties to a mechanism capable of solving the more general problem.
$ind -5
$skip
The standard mechanism:
$skip
$ind +5
$par
The following scheme is used in all of our checkout code generators.
Each IF expression-class tuple has a usage count, and uses remaining
counts are kept for each register.
When an expression is fetched, an address descriptor is set up describing
its value, including what registers are involved.
There is no inverse information - given a register you cannot determine
what address descriptors refer to it.
$skip
$par
When a multiple-use expression is first fetched, a copy of the resulting address
descriptor is placed on the heap, and a normally nil field of the expression
tuple is set to point to it.
The usage count on the expression tuple, and the uses remaining counts of
registers referred to by the address descriptor, are set to reflect the
number of uses of the expression still remaining to be seen.
$skip
$par
When fetching an expression, then, fields in the expression tuple will indicate
if it is a multiple-use expression which was previously fetched, and in that case
will also point to an address descriptor for the value.  This scheme assumes
that between the first and final usage of an expression, the values in any
utilized registers will remain undisturbed.
Procedure calls within that span must be handled in a way that ensures that
any registers holding values with uses remaining will be restored after
the calls.  The precise manner in which this is accomplished is different
in each code generator, but the net effect is the same: when a later use
of an expression is encountered, involved registers still have the expected
contents.
$skip

$ind -5
Resolution of problems:
$skip
$ind +5
$par
There can be interactions between parameter-passing mechanisms and the assumption
that register contents survive until their final usages, and also with the
effect that check statement-class tuples have on &when& an expression is evaluated.
$skip
$par -4
(1)\The simplest problem was mentioned above: a called procedure may use registers.
A mechanism must be selected to ensure that after the called procedure returns, the caller's
register contents are restored.
The VAX automates this.  On the PDP10, non-with registers are explicitly copied
into temporaries before the call and copied back afterwords.
With-registers, having been saved after initial loading, need only be
restored after the calls.
$skip
$par -4
(2)\The parameter-passing mechanism may be interferred with if parameters are
being passed in registers.
The VAX passes parameters on the stack, and so is immune to this particular
concern.  On the PDP 10, however, each parameter must wind up in the correct
register, which is for the most part accomplished by the  proper 
order of parameter fetching.
With-registers don't interfere as they are allocated at the high end of the
registers while parameters are at the low end, and the two are assumed to not
collide.
$skip
$par
Runtime checks are nastier.  If a parameter itself, or a subexpression
involved in it, is checked, then the statement-class check tuple will be
encountered before the statement-class call tuple.
If the check code is emitted when the check tuple is encountered, then an
expression may be left in a register awaiting its final use by a parameter.
That same register may be the required place to put another parameter.
The solution on the PDP10 is to defer emission of the check code until the final
use is encountered, i.e. treating the check as if were an expression-class rather than
statement-class tuple.
$skip
$par
Since this method "goes against the grain", that is, it entails handling tuples
differently than the first pass intended, there are difficulties in the details.
However, the basic idea is this:
when a check statement-tuple is encountered, the expression it refers to (with
multiple uses) is set to point back to the check statement tuple, and marked to
indicate that this game is being played.
Later, when the final use is encountered, the marked expression will be
recognized as such, and the checking code emitted at that time.
Parameters preceding the one involving the check will already be in their required
registers.  After the check and the parameter evaluation are finished, any utilized
registers other than the one where the parameter is to be will have been freed,
and so not interfere with later parameters.
$skip
$ind -5
MC68000:
$ind +5
$skip
$par
Since we will not be passing parameters in registers, problem (2) above won't be
a concern.  Check tuples will be handled as they are encountered, just as on the VAX.
Because of the limited number of address registers, with-addresses will be evaluated
and saved, but then reloaded where required rather than being assumed to occupy
registers for their entire span.  This will also reduce the number of registers
to be saved and restored around procedure calls, a concern since the MC68000 doesn't
have the VAX's automatic handling.
$skip
$par
Otherwise, the MC68000 code generator will utilize the same scheme as the
PDP 10 and VAX checkout code generators.
