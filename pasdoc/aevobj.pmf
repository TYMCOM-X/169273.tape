#document(ANC MicroEclipse Vehicle Object Language Specification,&
<:DRAFT - July 30, 1981:>,,9,80)
#sect(Introduction)
This document specifies the object language for the ANC Eclipse Vehicle.
Since this object language will be manipulated only by
programs written in TYM-Pascal to run in the host environment,
it can be largely specified in terms of Pascal type definitions
that such programs are to use in generating and interpreting
the object language.
A copy of an include file with such definitions is appended
to this document, and the body of the document presents basic
information and clarifications for these type definitions.
#sect(Concepts)
An object module is the result of compiling one Pascal module,
or assembling one assembly source file.
#par()
A section
is an area of memory to which contributions can be made by an object module.
Sections are separate units of relocation;
that is, contributions by a module to different sections
do not compete with each other for the same part of the address space,
but only with contributions from other modules to the same sections.
There are four sections defined:
direct static (allocated direct address space from the code area
start address down),
code (allocated direct address space from the code area start address
up),
virtual static (allocated virtual address space from virtual 0 up),
and the absolute section.
The absolute section undergoes no relocation:
the values of
all symbol definitions in it are used by the linker without modification.
The size of all contributions to the absolute section must be zero;
that is, the absolute section cannot be initialized.
#par()
It should be noted that these sections are different from the
runtime environment's segments.
They do not include the stack or heaps,
since these are initialized at runtime.
Also, the single runtime "direct segment" is here divided up
into several relocation sections.
#sect(File Format)
An AEV object file is a Pascal binary file.
It contains one object module.
(This definition may later be extended so that more than one
object module may be stored in a single file.)
A module consists of a series of "records" (not records in the Pascal sense)
of four different kinds, enumerated as the type "obj_rec_id".
Each record begins with a fixed-size Pascal record of the type
"obj_rec_header", which holds the length of the object record
in storage units, the number of items in the object record,
and the kind of object record it is.
The rest of the object record consists of a series of
zero or more "items" whose format depends on its kind.
A Pascal program can, by keeping track of the object record headers,
identify all the object records in an object module, even though
these records may contain varying numbers of variable-length items.
#par()
The items in an object record each begin with an integer
that specifies the length of the rest of the item, in storage units.
#par()
The first record of an object module must be a module header record;
the last record must be an end of module record.
No other occurrences of these kinds of record may exist in an object module.
#par()
Many of the items in an object module contain character strings
denoting symbols.
These are stored as "packed array [1..10] of char".
Symbols of length 1 to 10 characters are legal;
they are stored left-justified and blank-padded.
#sect(Module Header Record)
After its header, this record contains exactly one item.
The item contains an object language revision number,
the creation date of the object module,
the name of the program creating the object module,
and the name of the object module.
This information is described by the data type "mhd_rec".
The format of this record is fixed for all time;
the language revision number exists so that if non-upward compatible
changes to the object language are made,
this number can be incremented, object modules' format can be
identified, and therefore recompilation of all existing modules
will not be necessary.
The current revision number is 0.
#sect(End of Module Record)
This record may consist of its object record header only,
or it may have transfer address and program option
information following its header.
If this information exists, it consists of one item
containing the offset of the transfer address
in the module's code area, and program option bits
(these specify whether the program will mask attentions
or check floating overflow.)
This information is described by the data type "eom_rec".
#sect(Global Symbol Directory Record)
These records contain all the information necessary for the linker to allocate
virtual and direct address space and set up global symbol tables.
They consist of one or more items, called "entries", of three kinds:
section definition, global symbol definition,
and global symbol reference.
The data type "gsd_ent" describes a global symbol directory entry.
#par()
Section definition entries give the total size of the contribution
the module is making to a section.
They contain the index of the section being defined,
and the number of words to be allocated to it for this module.
#par()
Global symbol definition entries name the global symbols defined
in the current object module.
They contain a flag specifying whether the symbol is a code entry point,
the index of the section in which the symbol is defined,
the value or offset of the symbol,
and the symbol name.
#par()
Global symbol reference entries name the externally defined global symbols referred to
in the current object module.
They contain a flag field which currently has no defined flags,
the index of the section in which the symbol must be defined,
and the name of the symbol.
These entries' order is significant;
use of an external symbol is by its index,
i.e. its ordinal number in the module.
#sect(Text Information and Relocation Record)
These records contain commands and data which the linker
uses to fill in the contents of the image.
They consist of one or more items, called "commands", of several kinds,
falling into five groups:
the store-immediate group, the stack group, the store group,
the operator group, and the control group.
The data type "tir_cmd" describes a text information and relocation command.
#par()
The store-immediate group consists of one command:
the store immediate text command, which
causes literal data in
the command to be stored starting at the current linker location counter,
in 16-bit units.
The store immediate code command stores code, in 16-bit units;
the store immediate data command stores constant or variable
data, in 8-bit units.
#par()
The stack commands cause values to be pushed on a computation stack
maintained in the linker.
This stack is manipulated by the operator group,
and values are popped from the stack and stored in the image by
the store group.
Each value in the stack is 32 bits wide.
The stack global command causes the linker to push the value
of an external symbol on the stack.
The external symbol is identified by its ordinal position
in the sequence of global symbol reference entries
in the global symbol directory records.
The stack word command causes the linker to push a 16-bit
value in the command on the stack.
The stack module section relative and stack image section relative commands
cause an address computed as a given offset from a given section
base to be pushed on the stack.
The former uses the beginning of the current module's contribution
to the section as the base;
the latter uses the beginning of the section in the image as the base.
If the section is virtual, the address pushed include the
segment and page fields in the high-order 16 bits.
#par()
The store group causes computed values to be stored in the image.
The store longword, store word and store byte commands cause the linker
to pop a value from its internal stack and store it or its low-order
word or byte in the image, beginning at the current location counter.
The store repeated word command causes the linker to pop a
value from the stack, call it a repeat count, pop another
value, and store it repeatedly in the image,
beginning at the linker's current location counter.
#par()
The operator group causes the linker to do arithmetic calculations
on its internal stack contents.
The add, subtract, multiply, divide and negate operations
cause the corresponding standard reverse Polish operations to be done on
the top stack element(s).
Add and subtract do a virtual-address normalize operation:
they require that the top element on the stack be representable
in 16-bit two's complement,
and assume that the next stack element is either a 16-bit value
or a virtual address.
Multiply, divide and negate all require all their operands to be
16-bit values;
their results are truncated to this length as well.
#par()
The control group manipulates the linker's location counter.
The set relocation base command causes the value on top
of the linker's stack to be popped into the location counter.
$ski 4
(pasdev14)aevlnk.pmf
#appendix(AEV Object Language Type Declarations)
#beginfigure(,0,0,0)
$include aevobj.typ
#endfigure
#toc
   