










                             Compiler Implementation Notes #5

                            Reduction of Basic Blocks to DAGs

                                     8 November 1978




          1.  Introduction

               A basic block is a sequence of  intermediate  form  tuples  which
          contains  exactly  one  label node, at the beginning, and in which any
          control tuples (jumps, gotos, stops, or returns) are  located  at  the
          end.  Basic  block  reduction consists in the elimination of redundant
          tuples from a basic block.  An algorithm for  basic  block  reduction,
          known  as  the  value  number  method,  is  presented  in  Programming
          Languages and Their Compilers by John Cocke  and  J. T. Schwartz.  The
          method  developed in this paper is closely related to the value number
          method.  The original  method  is  undoubtedly  faster;  however,  our
          method  is somewhat more general, and takes advantage of the relations
          among the various Pascal data types.




          2.  The Basic Algorithm

               Each expression tuple contains a  'result'  field.  If  no  extra
          information  is known about the value of an expression tuple, then its
          result field is a pointer to the tuple itself.  If  the  value  of  an
          expression  is  known  to  be  the  same  as  the  value of a previous
          expression tuple, then the result field of the expression is a pointer
          back  to  the  previous  tuple  with the same value.  A basic block is
          reduced in a linear scan, starting at the beginning of the block.  The
          primitive  algorithm is to apply the following rules to each tuple, T,
          in the basic block:

          [1]  Replace each reference in T to a previous tuple, S, by the result
               field  of  S,  unless T is an assignment tuple, in which case its
               left-hand side reference should not be replaced.

          [2]  If T is an expression tuple, then scan the  tuple  chain  from  T
               back  towards  the  beginning  of  the block, looking for another
               expression tuple, T', with the same opcode and operands as T.  If
               there  is  such  an identical tuple, set the result field of T to
               the result field of T'.  Otherwise, set the result field of T  to
               T.



                                          - 1 -






          CIN-#5
          Reduction of Basic Blocks to DAGs
          8 November 1978

          [3]  If  T  is  an  assignment tuple, then set the result field of its
               left-hand side tuple to its right-hand side tuple.

               This algorithm would work if two distinct  reference  expressions
          could  never  refer  to  the  same  actual  value.  Unfortunately, the
          following cases may arise:

               1)  One reference may be a component of another.
               2)  Two distinct array references may refer  to  the  same  array
                   element.
               3)  Two distinct substring references may overlap.
               4)  Two  distinct  pointer expressions may refer to the same heap
                   variable.
               5)  Two distinct field references may refer to overlapping fields
                   in different variants.

               A  solution  to  these  problems  is  developed in the subsequent
          sections.




          3.  Assignments to Composite Variables

               If one structured variable is assigned to another, then the basic
          algorithm  will  give both variables the same result fields.  This can
          create confusion if an element of one of the  variables  is  modified,
          and  the  corresponding  element of the other variable is subsequently
          referenced.  For  example,  in  the   sequence   "a := b;   a[i] := x;
          y := b[i]",  a  and b will have the same result fields after the first
          assignment, so that when b[i] is referred to, it  will  be  given  the
          same  result  field as a[i].  The simplest solution to this problem is
          to modify step [3] of the basic algorithm as follows:

          [3a]  If T is an assignment tuple, with left-hand side  tuple  TL  and
               right-hand  side  tuple TR, and if TL is of a non-structured type
               (i.e., scalar, real, set, pointer, or subr), then set the  result
               field  of  TL to TR.  If TL is of a structured type, then set the
               result field of TL to TL.




          4.  Circumscribed Reference Expressions

               Let  A  and  B  be  reference  expressions.   We   say   that   A
          'circumscribes' B if (1) A cannot refer to a component of B, nor can B
          refer to a component  of  A;  and  (2)  depending  on  the  particular
          (runtime)  values  of  the  elements of the expressions A and B, it is
          conceivable that a change in the variable referenced by A  may  change
          the  value of the variable referenced by B.  For example, if "a" is an
          array,  then  "a"  does  not  circumscribe  "a[i]",  but  "a[j]"  does
          circumscribe "a[i]".


                                          - 2 -






          CIN-#5
          Reduction of Basic Blocks to DAGs
          8 November 1978

               The   following   rules  give  a  computable  definition  of  the
          'circumscribes' relation.  This is not the only  possible  definition,
          but it should be sufficient.

               If  A and B are identifier references, then A circumscribes B iff
               A and B refer to the same symbol.

               If A and B are array references "Aa[ia]"  and  "Ab[ib]",  then  A
               circumscribes  B  iff  Aa  circumscribes  Ab.  This  test  may be
               further strengthened with the rule that A may not circumscribe  B
               if  ia  and  ib  are  distinct constants, or if ia has one of the
               forms "ib+c" or "ib-c", or if ib has one of the forms  "ia+c"  or
               "ia-c", where c is a non-zero constant.

               If A and B are pointer references, then A circumscribes B iff the
               base pointer types of A and B are compatible (EquivTypes).

               If A and B are field  references  "Ra.fa"  and  "Rb.fb",  then  A
               circumscribes B iff Ra circumscribes Rb, and either fa and fb are
               the same field, or fb is a field in a  variant  selected  by  tag
               field  fa,  or  fa  and  fb are fields in distinct variants of an
               undiscriminated union.

               If A  and  B  are  substring  references  "Substr(Sa,ia,ja)"  and
               "Substr(Sb,ib,jb)",  then  A circumscribes B iff Sa circumscribes
               Sb.  (Stronger rules such as those applied  to  array  references
               are  probably  not worthwhile here, except in the particular case
               that the substring references are both of type char, which  means
               that both references are of length one.)

               The  circumscribed  relation is used to recognize such situations
          as "a[i] := x; a[j] := y;  z := a[i]".  We  modify  rule  [2]  of  the
          primitive algorithm as follows:

          [2b]  If  T  is  an expression tuple, then scan the tuple chain from T
               back towards the beginnning of the block, looking for either  (a)
               another  expression  tuple,  T',  which  has  the same opcode and
               operands as T; or (b) an assignment  tuple,  T',  with  left-hand
               side  tuple  T'L  and  right-hand  side  tuple T'R, such that T'L
               circumscribes T.  In case (a), set the result field of T  to  the
               result field of T'.  In case (b), if (b1) T'L has the same opcode
               and operands as T, then set the result field of T to  the  result
               field  of  T'L;  otherwise,  if  (b2) T'R has the same opcode and
               operands as T, then set the result field of T to T'R;  otherwise,
               if  (b3)  the  tuple preceding T' in the tuple chain has the same
               opcode and operands as T, and has a result field  equal  to  T'R,
               then  set the result field of T to T'R.  If no T' satisfying case
               (a) or (b) can be found, or in case (b), if  neither  case  (b1),
               (b2), nor (b3) is satisfied, then set the result field of T to T.

               If  case (a) is satisfied, then a simple matching tuple for T has
          been found.  If  case  (b)  is  satisfied,  then  there  has  been  an
          assignment to an expression which circumscribes T.  However, there are


                                          - 3 -






          CIN-#5
          Reduction of Basic Blocks to DAGs
          8 November 1978

          still  the  three  special   cases:   Case   (b1)   means   that   the
          circumscribing expression actually matched T, so we should treat it as
          though we had found it under case (a).  Case (b2) means that we have a
          case  such  as  "a[i] := a[j];  x := a[j]",  where  even  though  a[i]
          circumscribes a[j], we know that either i = j, in which case the first
          assignment  doesn't change the value of a[j], or i <> j, in which case
          the first assignment still doesn't change  the  value  of  a[j].  Case
          (b3)  detects the same situation when the value of the right-hand side
          expression is some tuple  which  doesn't  match  T,  even  though  the
          right-hand  side expression itself does match T.  Since the right-hand
          side expression in an assignment is always emitted immediately  before
          the   assignment   in  the  intermediate  form,  examining  the  tuple
          immediately  preceding  the  assignment  tuple   should   catch   such
          situations.

               The  efficiency  of  this  matching  tuple search may be improved
          considerably, using the fact that all the operands  of  an  expression
          must precede the expression in the tuple chain.  Before performing the
          backwards scan, compute the maximum of the tuple number of  the  block
          label node and the tuple numbers of all the operands of the expression
          being searched for.  The search may be terminated if this max tuple is
          encountered before a match or a circumscribing reference is found.




          5.  Side Effects

               The effects of assignments have already been discussed.  However,
          certain other kinds of tuples may have side  effects  with  consequent
          effects on optimization.

               1)   Read  Statements.  Reading  a  variable  has  the  effect of
          assigning an unknown value to it.  Therefore, the operand reference of
          a read tuple should be treated like the left-hand side reference of an
          assignment tuple, except that the result field of the referenced tuple
          should always be set to point at itself.

               2)   Procedure  and Function Calls.  Procedure and function calls
          can potentially modify the values  of  variables.  Therefore,  when  a
          call  is  processed,  any ident ref tuples to variables which might be
          modified by the call must be "killed".  We do this by keeping a set of
          "active  variables",  which  is empty at the start of the basic block.
          Whenever we process a call, we subtract the set of variables  modified
          by  the call from the current set of active variables.  We modify step
          [2] of the basic algorithm so that if tuple T is a variable identifier
          reference,  and if the variable is not in the set of active variables,
          then instead of searching for a matching  tuple,  we  set  the  result
          field of T to T and the variable to the active variable set.

               3)   Abnormal Variables.  If an identifier is marked as abnormal,
          we should assume that its value may and  should  never  search  for  a
          matching reference tuple for it.


                                          - 4 -






          CIN-#5
          Reduction of Basic Blocks to DAGs
          8 November 1978

          6.  Redundant Assignment Detection

               If there are multiple assignments to a simple variable in a basic
          block, then all but the last one may be  eliminated,  since  they  are
          irrelevant  to the final value of the variable on exit from the block.
          Another sort of redundant assignment occurs when the  right-hand  side
          of  an  assignment refers to the same variable as, or to an expression
          having the same value as, the left-hand side  of  the  assignment.  We
          can  detect  both  these  cases  with  a  minor  modification  to  the
          algorithm.  We must modify step 3 as follows:

          [3c]  If T is an assignment tuple, with left-hand side  tuple  TL  and
               right-hand  side tuple TR, and the result field of TL is the same
               as TR, then delete the assignment from the tuple chain.  If TL is
               of  a  non-structured  type (i.e., scalar, real, set, pointer, or
               subr), then set the result field of TL to  the  assignment  tuple
               itself,  if  TL  is an identifier reference, and to TR otherwise.
               If TL is of a structured type, then set the result field of TL to
               TL.  If  the  old  result  field  of  TL was a pointer to another
               assignment tuple, and if the previous assignment is not  a  "must
               store" assignment, then delete it from the tuple chain.

               An  assignment  to  an  identifier  reference is classed as "must
          store"  if  the  identifier  is  a  globally  accessible  or  abnormal
          variable, or if it may have been used by some intervening procedure or
          function call.  To handle this latter case, we keep  a  set  of  "used
          variables",  which  is  empty at the start of the basic block.  At the
          end of step [3], if TL is a variable  identifier  reference,  then  we
          remove  the  variable  from  the  set  of  used variables; whenever we
          process a call, we add the set of variables modified by  the  call  to
          the  current  set  of  used  variables.  Thus,  we  can test whether a
          variable may have been used in some intervening procedure or  function
          call  by  simply checking whether the variable is in the used variable
          set.

               Rule [1] of the reduction algorithm must  also  be  modified,  to
          retrieve  the  assigned  value  of  a  variable  when it is referenced
          elsewhere.  The modified form for rule [1] is:

          [1c]  If tuple T contains a reference to a previous  tuple,  S,  other
               than  as  the  left-hand  side  of an assignment, a variable in a
               read, or a var parameter in a call, then replace the reference to
               S  by  the result field of S.  If the result field of S points to
               an assignment tuple, then replace  the  reference  to  S  by  the
               right-hand side of the assignment tuple, instead.

               If  a  function may have side effects, either on global variables
          or on its own static variables, then calls to that function  must  not
          be eliminated.  This means that if an assignment is redundant, but the
          right-hand side is a function call with side effects, then instead  of
          eliminating  the  assignment  tuple, it should be changed into an eval
          tuple.



                                          - 5 -




 