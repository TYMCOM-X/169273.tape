$ind left 5
$number off
$footnotes left 'Last Updated:  9-Feb-84' left 'QED Version 1.7'
$skip 15
$center
&DEFINITION of QED&
$justify
$skip 4
QED is a text editor written in TYM-Pascal. It is a line oriented editor
featuring pattern-match line addressing and
substitute-style text modification.
The purpose of this DEFINITION is to describe the QED commands and their
effects on lines in the QED buffer.
$title LEFT 'DEFINITION of QED' LEFT '9-Feb-84' LEFT 'Page \'
$footnotes off
$page
$center
&TABLE OF CONTENTS&
$tabs 25
$ind +5
$verbatim




1.	The QED Buffer
2.	Command Syntax
3.	Basic Command Elements
3.1	Command Names
3.2	String Patterns
3.2.1	Wildcard Matching
3.2.2	Examples of String Pattern Matching
3.3	String Predicates
3.3.1	The Default Pattern
3.4	Symbolic Line Addresses
3.5	Line Designators
3.6	Entering Text from the Terminal
4.	Bounded Addressing
5.	Filenames
6.	Default Save File
7.	Line Length
8.	Yes/No Queries
9.	Character Set
10.	Tab Processing
11.	Command Summary
12.	Command Interpretation
13.	Error Messages

$justify
$ind -5
$page
1.\\&The QED Buffer&
$skip
QED operates on an internal buffer. This means that the file to be edited
must be copied into the buffer before editing it and
explicitly written back to a file
later to save any changes made during the editing session.
$skip
The buffer is a sequence of lines of less than 255 characters each. Each line
is numbered sequentially beginning at line 1, incrementing by 1 to the end
of the buffer.
Whenever any lines are inserted
or deleted, all lines below the change are automatically renumbered.
$skip 2
2.\\&Command Syntax&
$skip
A command consists of
a &command name& followed by any  information or options
required.
Every command has a default line or range of lines onto which the
command applies, or the user may prefix a command with a
&line designation& to address a line or range of lines other
than the default.
Several commands may be entered on a single line
by separating them with semicolons.
$skip
Blanks and/or tabs may be used to separate the syntactic elements
of the commands.
Such white space is required to separate adjacent alphabetic tokens
such as command names and options.
Multiple options may be separated by commas or white space.
In all other cases, use of white space is optional.
For example, numbers may ajoin alphabetic tokens.
$skip
The syntax of QED is defined below in the following manner:
words appearing in uppercase
denote literal keywords which must be entered verbatim.
The underlined portion may be used as an abbreviation,
and upper or lower case may be used.
Lowercase items denote generic classes of strings
whose meaning should be obvious from context.
Brackets are used to surround optional items,
and a vertical bar is used to separate a list of items
from which one must be selected.
$skip 2
$need 6
3.\\&Basic Command Elements&
$skip
QED recognizes six major syntactic units while parsing a command. These
are the:
$tabs 10
$ind+5
$verbatim

1)	command name,
2)	string pattern,
3)	string predicate,
4)	symbolic line address,
5)	line designator, and
6)	text.

$justify
$ind-5
$need 2
These are the atomic parts of any QED command,
and each will now be described in detail.
$skip 2
3.1\\&Command Names&
$skip
The following is a list of the QED commands. A description of their
effects during an editing session can be found in the &Command Summary&
section.
$skip
$tabs 17,34,51
$verbatim
&AF&TER	&A&PPEND	&BE&FORE	&B&OUND
&C&HANGE	&CLOSE&	&CO&PY	&D&ELETE
"="	&EX&IT	&F&IND	&GO&TO
&IND&ENT	&I&NSERT	&J&OIN	&LI&ST
&L&OAD	&MO&VE	&N&UMBER	&OPEN&
&OUTPUT&	&P&RINT	&Q&UIT	&RESET&
&SA&VE	&SE&T	&SP&LIT	&S&UBSTITUTE
$control off
&T&RANSFER	"^"	&WHY&	&W&RITE
$control on
$justify
$skip 2
3.2\\&String Patterns&
$skip
A string-pattern is used to match
a specific substring of characters within a line.
As a line address,
a string pattern designates the first line for
which a match can be found.
As the string to be replaced in a substitute command,
it selects the portion of the line to be replaced.
$skip
There are five forms of string patterns,
distinguished by the surrounding delimiting characters.
$skip
$indent left 25
$par -20
/string/\\\\\\\\\\\\matches a line containing "string" anywhere within the
line.
The delimiter may be any
nonblank, nonalphanumeric printing character
except
(*\$\;\?\+\-\^\=\()\).
Periods and commas are also not allowed as delimiters.
Brackets and braces, when used, must be balanced.
The pattern // identifies the default pattern.  (see 3.3.1.)
$skip
$par -20
:string:\\\\\\\\\\\\matches a line containing "string" as the first
characters of the line.
The pattern :: matches an imaginary zeroth character,
and hence matches all lines.
It may be used to substitute for the beginning of a line.
$skip
$par -20
$need 8
#string#\\\\\\\\\\\\matches a line in much the same way as
:string:, except that it ignores any leading blanks or tabs.
(The string may include blanks.)
The pattern ## matches a null substring before the first nonblank character,
and is taken to match only nonblank lines.
It is useful for indenting lines of text.
$skip
$par -20
@string@\\\\\\\\\\\\matches a line containing "string" as the last characters
in the line.
The pattern @@ matches an imaginary character following the end of the
line, and hence matches all lines.
It may be used to substitute for the end of a line.
$skip
$par -20
!string!\\\\\\\\\\\\matches a line containing "string" anywhere within
the line &provided& that the string is delimited by
nonalphanumeric characters.
This is useful for matching keywords and variable names
in program text.
$skip
$indent left 5
Upper and lower case characters are distinct.
That is, an attempt to match, for example, an upper case string pattern
to a lower case string will fail.
$ski
3.2.1\\&Wildcard Matching&
$ski
Wildcard matching is the use of special characters
in a string pattern to match undetermined
characters in a line.
There are two special wildcard characters,
the question mark and the asterisk.
A question mark in a string pattern will match exactly one
character in the corresponding position. An asterisk will match
&zero& or more characters according to the "shortest match"
algorithm. If question marks or asterisks need to be treated as
normal characters in a pattern, a SET command option will
turn off their special meanings.
$ski
3.2.2\\&Examples of String Pattern Matching&
$ski
Some examples of string pattern matching:
$skip
$ind +3
FOOxxBARxxxFOOBARFOOxxxBAR
$ski
$tabs 20
$verbatim
/FOOBAR/ 	matches 'FOOBAR'.
:FOO: 	matches the first 'FOO' in the line.
@BAR@ 	matches the last BAR in the line.
@FOO@ 	will fail to match.
/FOO*BAR/ 	matches 'FOOBAR'.
/FOO?*BAR/ 	matches 'FOOxxBAR'.
@FOO*@ 	matches 'FOOxxxBAR'.
$justify
$ski 2
$ind -3
3.3\\&String Predicates&
$ski
$need 3
A string-predicate matches lines using a logical expression combining matches
of simple string-patterns (see below) on any single line.
Acceptable forms are:
$ski
$ind left 25
$par -20
string-pattern\\\\\\matches a line containing the string-pattern.
$ski
$par -20
$need 3
NOT\\string-predicate
$par
matches a line &not& containing the string-predicate.
$ski
$par -20
$need 4
string-predicate\\OR\\string-predicate
$par
matches a line
matching either predicate.
If the first operand matches, the second is not evaluated.
$ski
$par -20
$need 3
string-predicate\\AND\\string-predicate
$par
matches a line matching &both& predicates.
The first then the second operands are evaluated.
$ski
$par -20
$need 3
(\string-predicate\)
$par
matches a line containing the predicate.
Use of this form affects the order of evaluation.
$ski
$ind left 5
$need 2
Note that NOT has the highest precedence; AND and OR have left to
right precedence.
$skip
3.3.1\\&The Default Pattern&
$ski
The default pattern, //, is the last pattern of any
form     successfully matched.
This applies in processing of string-predicates as well.
OR evaluation short circuits, so that // is set to the first
operand pattern that can be matched, if any;
AND matches left to right, so that // is set to the rightmost
that can be matched;
NOT sets // if the operand pattern is matched (i.e.,
when NOT fails).
Under FIND, // is reset after  each iteration to its value
before the subcommands were executed, but
often the FIND predicate is
used as the default pattern
for the subcommands.
$skip 2
3.4\\&Symbolic Line Addresses&
$skip
$need 2
A symbolic line address (la) identifies a specific line
within the buffer.
A line may be selected in one of three ways:
$skip
$need 6
$indent left 3
1)\\By position:
$skip
$indent left 25
$par -20
$need 2
&n&\\\\\\\\\\\\\\\\\\\where &n& is a positive integer,
designates the &n&th line in the buffer.
$skip
$par -20
$need 5
.\\\\\\\\\\\\\\\\\\\designates the "current line" within the buffer
as set by various commands.
In general, it is the last line displayed or operated on
within the buffer.
Initially, it designates an imaginary zeroth line.
$skip
$need 5
$par -20
*\\\\\\\\\\\\\\\\\\\is valid in the upper bound
of a &line designator& (see 3.5) only,
and designates the lower bound.
It is most useful in an address sequence.
For example,
:LAB:,*+3 addresses :LAB: and the following three lines.
$skip
$par -20
 $\\\\\\\\\\\\\\\\\\\designates the last line in the buffer.
$skip
$indent left 3
2)\\By context:
$skip
$indent left 25
$par -20
$need 14
[^]string-predicate
$par
a line matching the string-predicate.
When the optional up-arrow is omitted,
the buffer is searched for the first
such line by scanning the text from the line
following the current line to the last line in the
buffer (see Bounded Addressing, 4.). The up-arrow indicates a backward search,
and causes the scan to start from the line
just before the current line and proceed towards
the beginning of
the buffer. If the predicate is the first or
only la in the line designator (see 3.5),
then the search is allowed to wrap around
the top or bottom of the bounded buffer, and continues
until reaching the current line.
$skip
$indent left 3
3)\\By an address sequence:
$skip
$indent left 25
$par -20
$need 2
la\\&n&\\\\\\\\\\\\\\\designates the &n&th line following the
the line addressed by the base la.
$skip
$par -20
$need 2
la\+\&n&\\or\\la\-\&n&\\designates the line &n& lines after or before    addressed line.
$skip
$par -20
$need 4
la\\[^]\string-predicate
$par
designates the first line
matching the string predicate,
the search starting from
the line either before or
after the base la.
$skip
$indent left 5
$need 3
The base la may be another address sequence,
allowing line addresses such as :abc:+3^/def/.
Successive search predicates have a narrower range
to search. A search will terminate upon
$ind+5
$ski
$need 6
$par -3
1)\matching a line.
$par -3
2)\reaching the top or bottom of the buffer
(unless it is the first la in an address sequence).
$par -3
3)\reaching the current line (dot).
$par -3
4)\reaching the line preceding or following
the line at which the last search in the
opposite direction began.
$ind-5
$skip
Examples:
$skip
$verbatim
/FOO/^/BAR//FUM/

$need 6
top of                                        bottom of
buffer   dot     'BAR'       'FUM'     'FOO'   buffer
   |      .        |           |         |       |
           ----------------------------->|
                   |<--------------------|
                   |---------->|

$justify
Consider the same search predicate on a different buffer:
$verbatim

$need 6
top of                                        bottom of
buffer   'BAR'   'FOO'       dot       'FUM'   buffer
   |       |       |          .          |       |
   >-------------->|           ------------------->
           |<------|
           |------>X(search fails)


$justify
$ind left 5
3.5\\&Line Designators&
$skip
A line designator (ld) is
 either a single &symbolic line address& of
 a line within the text buffer,
or a range of two such addresses 
separated by a comma:
$skip
\\\\\[la [, la]]
$skip
If no line addresses are specified,
the command operates on some default range of lines depending on the command.
The ld is fully resolved before the command is executed.
$skip
In a line designator, "la1, la2", la2 must be greater than la1.
 An address range exceeding the bounds of the buffer
is in error.
The imaginary zeroth line, however, may be referenced in the GOTO,
NUMBER or (COPY or MOVE) APPEND commands.
$skip
Where applicable, if a single line address is given for a command expecting
an address range,
then the command is applied to  a range of that
one line.
It is an error to specify an address range
for a command which operates on
only a single line.
$skip 2
$need 7
3.6\\&Entering Text from the Terminal&
$skip
The APPEND, INSERT and CHANGE commands
(see Command Summary)
allow the user to enter text.
When QED expects terminal input,
all subsequent lines are appended to the buffer until a 
line consisting of a single "." in column one is entered.
QED then returns to normal editing mode.
For example:
$skip
$ver
$ver
$need 7
     run qed
     *append
     The purpose of this meeting
     will be to discuss...
     .
     *write memo.txt
     *exit
$justify
$skip 2
$need 11
4.\\&Bounded Addressing&
$ski
Line addresses are normally resolved relative to the entire buffer.
Addressing can be limited to a user-defined section of the buffer
by issuing a BOUND command.
Thereafter, address evaluation treats the designated section as if it were the entire
buffer.
That is, "1" designates the first line of the section; "$" designates
the last line of the section; and contextual searches wrap around the section.
Line numbers given by NUMBER,   NUMBER options, or the LIST command,
are line offsets within the section.
$ski
$need 8
Sections may be defined by the appearance of specific string
patterns or predicates (section marks) within the text of the buffer.
A section begins at a line matching the section mark and ends at
the line preceding the next such line, or the end of buffer if there is no
following mark.
A section is named by some other string appearing in the
header line.
For example, if the section mark were 
\:$PAGE:\, the line "$PAGE search" would head a section named /search/.
$ski
$need 3
The initial section mark is implementation defined, and may depend on the
type of the default file.
The user may establish a special section mark string by issuing the SET
MARK command.
$ski
$need 11
For example, if the section mark were '$PAGE', then
$verbatim

top of   '$PAGE'     '$PAGE'     '$PAGE'       bottom of
buffer    'one'       'two'      'three'        buffer
   |        |           |           |             |

BOUND /one/ would bound to
         (1)|___________|($).

BOUND /two/ would bound to
                     (1)|___________|($).

$justify
$ski 2
$need 6
5.\\&Filenames&
$skip
The syntax of a filename is system dependent.
Commands requiring filenames as arguments  may
accept as a filename
any sequence of characters beginning with the first nonblank character 
following the command name.
$skip 2
$need 5
6.\\&Default Save File&
$skip
The editor maintains a default file for use in the save command.
It is selected according to one or more of the following
criteria:
$skip
$indent left 8
$par -3
$need 4
1.\A file read into an empty buffer.
$par -3
2.\A file read replacing the entire contents of
the buffer.
$par -3
3.\The last file to which the entire contents of the buffer
were written.
$indent left 5
$skip 2
$need 8
7.\\&Line Length&
$skip
The editor allows lines of up to 254 characters.
If a larger line is read from a file,
 the line is split and a warning message issued.
If an attempt is made to enter a longer line from the
terminal, the implementation reads as many characters as is practical
under operating system constraints and splits the input into
multiple lines.
$skip 2
$need 6
8.\\&Yes/No Queries&
$skip
When the editor requires a yes/no response to a question,
&Y&ES, &N&O,  or  <cr> (meaning "yes")
are accepted as valid replies.
REPEAT may also be given as a response
to have the question repeated.
Upper and lowercase is not significant.
$need 7
$SKI 2
9.\\&Character Set&
$ski
The editor supports the character set of the host system.
This means that all characters which can be read by     the system may 
be entered, edited and stored in a file.
The only restrictions involve the use of the end of line character
or sequence.
Character set specific considerations follow:
$ski
$need 5
ASCII
$ski
The control characters NUL through US are
displayed as "&&x" where "x" is the corresponding noncontrol character.
A DEL is displayed as a box "[]".
$ski
$need 3
EBCDIC
$ski
(To be considered.)
$ski 2
$need 6
10.\\&Tab Processing&
$ski
A tab character is stored as a single tab character.
In cases where neither the system (nor the terminal) expands tabs to spaces, a tab
is treated in the same manner as a  nonprinting control character.
$ski
$ind left 4
$par -4
$need 3
1.\\Tabs are normally printed as spaces.
A SET command option controls the printing of a tab
character so that it can be printed as an &&I.
$ski

$par -4
$need 3
2.\\The INDENT command logically converts leading blanks
and tabs to blanks before processing the line, and outputs
lines in minimal tab-blank form.
$ski 2
$ind left 5
$need 7
11.\\&Command Summary&
$skip
In the descriptions of the commands that follow,
the line range given
defines the default range for the command,
and by implication gives the kind of line designation
(single line, or range of lines) expected by the command;
"la" is used as an address when there is no default
or a special default.
$skip 2
$indent left 5
$par -5
$need 6
.,.\\&AF&TER\\[&n&]\/present-string/insert-string/\\[options]
$ski
This behaves exactly like &S&UBSTITUTE (see below) except
that the second stri inserted &after& the present-string.
Successive searches with the ALL option begin after the last
character of the previously inserted insert-string.
$ski
$par -5
$need 8
 $\\\&A&PPEND\\\[filename]
$skip
Allows text to be appended to the buffer &after& the designated line.
If a filename is given,
input lines are read from that file.
If no filename is given,
text is read from the terminal until a line
with only a period in column one is entered.
The current line is set to the last line input.
If the storage capacity should overflow while
appending to the buffer, the last line input will be lost.
$ski
$par -5
$need 6
.,.\\&BE&FORE\\[&n&]\/present-string/insert-string/\\[options]
$ski
This behaves exactly like &S&UBSTITUTE (see below) except
that the second string is inserted &before& the present-string.
Successive searches with the ALL option begin after the last
character of the previously matched present-string.
$ski
$par -5
$need 10
[\la,la\]\\&B&OUND\\\[\[^]\string-predicate\\|\\[^]\&N&EXT\\]
$ski
If a string-predicate is given, this command finds the section named
by the predicate,
and limits addressing to that section.
The current line is set to the first line of the new section.
The section is found by searching the entire buffer for a line
matching the predicate "[^] section-mark AND string-predicate",
beginning with the next line in the direction of the search
and wrapping around if necessary;
the search terminates at the preceding section.
$ski
$need 6
If "&N&EXT" is specified, then BOUND will bound to the next section
$control off
in the unbounded buffer. If "^ &N&EXT" is specified, then addressing will be
limited to the &current& section. Neither &N&EXT option will wrap around
the top or bottom of the buffer. This is particularly useful
for "paging through" a buffer during an edit session.
$control on
$ski
If an ld is specified, searching is limited to the range
of lines specified within the bounded buffer.
The current line is set to the first
line of the range.
This range does not constitute a marked section for the
purposes of the LIST   command.
The ld must address more than one line.
$ski
If the ld, string-pattern and the NEXT option are omitted,
addressing of the entire buffer
is enabled.
The current line is left unchanged.
$skip
It is not valid to specify both an ld and a string-pattern or
&N&EXT option.
$ski
$par -5
$need 6
la,la\\&C&HANGE\\\[filename]
$skip
The specified lines are deleted and replaced by new text.
If the line deletion limit (see SET) is exceeded, then confirmation is required.
The input source is the same as for APPEND.
The current line is set to the last line read.
$ski
$par -5
$need 5
&CLOSE&
$ski
Terminates an OUTPUT operation and closes the output file.
See OPEN and OUTPUT.
No action is performed if there is no open output file.
$skip
$par -5
$need 7
.,.\\\&CO&PY\\\[&I&NSERT\|\&A&PPEND]\\\la
$skip
Copies the specified lines to a position in the buffer
before (INSERT) or after (APPEND)
the designated line.
The default is before.
The current line  is set to the last line created.
$skip
$par -5
$need 6
la,la\\&D&ELETE
$skip
The specified lines are deleted.
If the line deletion limit (see SET) is exceeded, then confirmation is required.
The current line is set to the line preceding the first
line deleted
or the imaginary zeroth line
if the old first line was deleted.
$skip
$par -5
$need 13
1,$\\\&F&IND\\\string-predicate\\\[command(s)]
$skip
The indicated lines are scanned for lines satisfying the predicate
and the command (or commands separated by semicolons)
are applied to each line matched.
Specifically,
the range is searched for the first such line satisfying the predicate.
The current line is set to that line,
and the command(s), if given, are executed.
The range is narrowed to include only those lines following the
bottommost line examined (defined below),  by FIND or a subcommand,
and the process is repeated.
The operation terminates when an error occurs or the range is exhausted.
The number of matches is printed.
If no matches  are found, the current line is left unchanged;
if an error aborts operation, the last setting of the current line remains 
in effect;
otherwise, it is set to the bottommost line examined during the last execution.
$ski
$need 4
FIND requests the user to specify if each execution is to be
separately confirmed.
Each line matching the predicate  is displayed before
the user is interrogated.
Lines matched  but not confirmed are not included in the count displayed.
$skip
$need 2
If no subcommands are given,
the effect is to print the number of matches found.
$skip
$need 3
The following commands are invalid under  FIND: WHY, QUIT, RESET, LOAD,
SAVE, GOTO, SET,  BOUND,  WRITE, OPEN, CLOSE, uparrow and <cr>.
$skip
$need 4
An ld may be specified for any subcommand,
but must
designate a range of lines within the range
of the FIND search itself.
If no ld is given,
the current line is supplied as the default
regardless of the default regularly assumed for the command.
$skip
$need 7
The "bottommost line examined" (BLE) is the current line setting
nearest the end of the buffer that
occurs during subcommand execution.
Initially, it is the line  matched.
If execution of a command advances the
current line past the BLE,
the BLE becomes the new current line.
If the current line is backed up,
the BLE is not changed.
If a range of lines including the BLE is deleted,
then the BLE becommes the line preceding the range.
$skip
$need 4
Deletion or addition of lines
by the subcommands
does not change the lines specified as the
limits of the FIND range, even though the 
line numbers of the bounding lines may change
as a result of the deletions or additions.
$ski
1,$\FIND\/string/\\SUBSTITUTE\/old/new/\;$\COPY\APPEND\.
$ski
$need 4
In this example, the bounded buffer would
be searched for occurrences of &string&.
Every such line would have string &old&
replaced by &new&, and have the last line in
the bounded buffer inserted
after the current line (BLE).
$skip
$par -5
$need 4
la\&GO&TO
$ski
Sets the current line to the line addressed.
Errors if no line address or a line address range is specified.
$ski
$par -5
$need 7
.,. &IND&ENT [+ | -]n
$ski
The text (i.e., non-blank characters) on each of the specified
lines is indented as follows.  
If a sign is used, it is repositioned to the left (-)
or right (+) by n columns.
If no sign is given, the text is positioned in the n+1st column.
A blank line is truncated.
$ski
An error is reported if for a certain line the
resulting line would exceed the maximum line length, or if the
leading white space is shorter than the number of columns specified
in a leftward movement.
$skip
$par -5
$need 5
.+1\\\&I&NSERT\\\[filename]
$skip
Allows text to be inserted into the buffer &before& the designated line.
The input source is the same as for APPEND.
The current line is set to the last line read.
$skip
$par -5
$need 10
la,la\\\&J&OIN\\\[\/continuation-mark/\]
$skip
where "/" is a valid string-pattern delimiter.
The specified lines are joined into one contiguous line
by deleting the separating line marks,
and inserting the contents of the /continuation-mark/ string
if present.
The current line is set to the resulting line.
If the resulting line would exceed the maximum 
line length,
the lines are left unaltered,
and an error is reported.
The ld must specify at least two lines; confirmation is required
if more than two lines are addressed.
$skip
$par -5
$need 4
la,la\\&LI&ST\\\[filename]
$ski
Produces a line number listing.
If no filename is given, the listing goes
to the terminal.
$ski
If an ld is given, the specified lines are
listed, and the current line is set to the
last line printed.
$ski
If no ld is given, the entire buffer\-\regardless
of the bounds currently in effect\-\ is listed &by 
bounded section&.
The numbering of each section starts at one,
and form feeds are output between sections.
Also, the current line number is not affected.
$ski
$par -5
$need 8
&L&OAD\\\filename
$skip
The entire buffer is replaced by the contents of the file specified.
The current line is set to the last line read.
If the contents of the buffer have been altered but not saved,
confirmation is required.
The SET parameters are reset to their defaults and an implicit
CLOSE performed if there is an ongoing OUTPUT.
$skip
$par -5
$need 7
.,.\\\&MO&VE\\\[&I&NSERT\|\&A&PPEND]\\\la
$skip
Moves (copies and deletes) the specified lines
to a position in the buffer before (INSERT) or after (APPEND) the line specified.
The default is before.
It is an error for the address to be within the range of the lines
being moved.
The current line is set to the last line
moved.
$skip
$par -5
$need 4
.\\\&N&UMBER
$skip
Displays the line number of the line addressed,
or the limits of a range of line addresses.
Does not alter the current line.
$skip
$par -5
$need 5
&OPEN&\\filename
$ski
Readies the specified file for output.
Subsequent OUTPUT commands transfer lines to the file until a CLOSE
command is issued.
The file specified does not become the default file.
$ski
$par -5
$need 6
.,.\\&OUTPUT&
$ski
Writes the indicated lines to the file specified in the OPEN command.
Errors if no file has been opened or if output has been
terminated by the CLOSE command.
OUTPUT and WRITE operations may be overlapped provided that the
same file is not used for both.
$ski
$par -5
$need 6
&RESET&
$skip
Deletes the text in the text buffer, and resets SET parameters to their defaults.
If modifications have been made to the text,
but not saved,
confirmation is required.
An implicit CLOSE is performed if there is an ongoing OUTPUT.
$skip
$par -5
$need 5
1,$\\\&P&RINT
$skip
The indicated lines are displayed on the terminal.
The current line is set to the last line printed.
Any control characters are printed in escaped form (i.e. &&<character>).
$skip
$par -5
$need 3
&SE&T\\parameter-setting
$ski

Allows the user to set various editor parameters:
$ski
$IND LEFT +18
$PAR -16
$need 4
&DEL&LIMIT\&n&
$par
gives the maximum number of lines which may be deleted without
confirmation.
Affects CHANGE and DELETE.
The default is 10.
$ski
$par -16
$need 3
&LINE&COUNT\&n&\\\\\gives the number of lines
displayed in response to the <eol> command.
The initial value is one.
$ski
$par -16
$need 5
&MARK&\\string-predicate
$par
changes the current section mark to the specified predicate.
This does not change the limits of the current bounded section.
The default is defined on a per system basis.
$ski
$par -16
^uTAB|uS\\[\ON\|\OFF\]
$par
controls the printing of the tab character.
The default is ON, and this causes tabs to be printed
as spaces.
When OFF, a tab will be printed as an &&I. Note that
the LIST command always expands tabs to spaces.
$ski
$par -16
^uWILD|uCARD\\[\ON\|\OFF\]
$par
controls the interpretation of the question mark
and the asterisk in string patterns.
Initially ON, and when OFF causes QED to treat these
characters as normal, not wildcard, characters.
$ski
$ind left -18
$ski
Where applicable (e.g., the ST-1), system parameters
settings may be issued.
Processing is handled by the host operating system.
$skip
$par -5
$need 9
.,.\\&SP&LIT\\\string-pattern\\\[options]
$skip
The indicated lines are searched for substrings
matching the string pattern.
Lines containing matches
are split by inserting a line mark &after& the matching substring.
The number of splits made is printed if either the ALL
option is selected, a range of lines is specified, or no splits
are made.
If a match is found,
the current line is set to the final line produced from 
the last line found;
otherwise the current line is not affected.
Options:
$skip
$indent left +18
$par -15
&N&UMBER\\\\\\\\\display the line number of each line found.
$par -15
$need 3
$tra '%' '\'
&C&ONFIRM\\\\\\\\display the line,
bracketing the matching substring with "%",
and confirm the splitting operation.
$tra '%' '%'
$par -15
&P&RINT\\\\\\\\\\display the resulting lines.
$par -15
$need 3
&A&LL\\\\\\\\\\\\split any single line
after &all& occurences of the substring.
If omitted, the line is split only after the first occurence.
$par -15
$need 2
&D&ELETE\\\\\\\\\delete the matching substring
in addition to splitting the line.
$indent left -18
$skip
$par -5
$need 13
.,.\\\&S&UBSTITUTE\\[&n&]\/present-string/replacement-string/ \\[options]
$skip
where "/" may be any valid delimiter for a string pattern.
The indicated lines are searched for &n&th occurence of 
a substring matching the /present-string/ pattern
and the substring found is
replaced by the /replacement-string/.
The default value for &n&, if not specified, is 1.
Values of &n& other than 1 are illegal for the
:, @, and # pattern delimiters.
The number of substitutions made is printed
if either the ALL option is selected,
a range of lines is specified,
or no substitutions are made.
The current line is set to the last line for which
a match for /present-string/ is found.
It is not altered if no match is found.
Options:
$skip
$indent left +18
$par -15
$need 2
&N&UMBER\\\\\\\\\display the line number before each substitution.
$par -15
$need 3
&C&ONFIRM\\\\\\\\display the line,
$translate 'x' '\'
bracketing the substring to be replaced with x\x,
$translate 'x' 'x'
and confirm the substitution.
$par -15
$need 2
&P&RINT\\\\\\\\\\display the line after all substitutions have been
applied.
$par -15
$need 4
&A&LL\\\\\\\\\\\\substitute for all occurances after
and including
the &n&th occurrence of the
string found within any single line.
If omitted, only the &n&th occurence is replaced.
$indent left -18
$skip
$need 3
If a resulting line would be greater than the maximum line length,
the line is left unmodified;
an error is reported;
and the operation is aborted.
$skip
$skip
$par -5
$need 5
&WHY&
$skip
Prints an explanation of the last error reported.
Additional WHY commands may be issued to
obtain more in-depth explanations of
the error.
$ski
$par -5
$need 9
1,$\\&W&RITE\\[filename]
$ski
Writes lines to the file.
If an ld is given, the specified
lines are written; if &no& ld is
given, the contents of the entire
buffer\-\regardless of the bounds
currently in effect\-\are written.
In both cases, the current line
is not affected.
If no filename is specified, the default file for the buffer is used if confirmed
by the user.
If a filename is specified, the editor checks if the file
exists and confirmed use of a new or old file.
$ski
If the operation is aborted by an attention signal,
the contents of the file are left in an undefined state.
$skip
$par -5
$need 6
&Q&UIT
$skip
Terminate an editing session.
If modifications have been made to the input text,
but have not been saved,
confirmation is required.
An implicit CLOSE is performed if there is an ongoing OUTPUT operation.
$ski
$par -5
^
$skip
Set the current line to the line preceeding the current line,
and display it.
Errors if the current line is the first line of the buffer.
$skip
$par -5
<eol>
$skip
Print the next <line count> lines following the current line.
Errors if the current line is the last line of the buffer;
prints only the remaining lines, if there are insufficient left in the buffer.
The last line printed becomes the current line.
$indent left 5
$skip 2
If a line designation is entered without a command,
print is assumed.
The effect of entering a single la, then,
is to move the current line to that addressed,
and display it.
$skip
The following are provided as synonyms for the indicated commands:
$skip
$indent left 5
$verbatim
$need 4
&EX&IT\\\for\\&Q&UIT
&T&RANSFER\\for\\&MOV&E
=  for  &N&UMBER
&SA&VE  for  &W&RITE
$indent left 5
$justify
$skip 2
$need 4
12.\\&Command Interpretation&
$skip
When QED is entered the editor prints its version.
When ready for command input,
it prompts with a "*".
$skip
A command is fully parsed before execution.
That is, no execution occurs if there is a syntax error.
When several commands are entered on one line,
one command at a time is parsed and executed.
Thus execution of one or more commands may occur before the detection
of an error in a subsequent command.
If an error occurs,
processing of the rest of the line is aborted.
$skip
The user may abort execution by means of
a system defined attention signal
(e.g. escape, control-C, or break).
When an error or attention signal occurs,
the current line is left as set by the last complete
command execution.
$skip 2
$need 5
13.\\&Error Messages&
$skip
When an error occurs,
the editor prints "?" and returns to the command prompt.
The user may issue the WHY command to receive an explanation
of the error that occurred.
Additional WHY commands may give more detailed information.
$ski 4
$need 4
jcl/6-20-77
$par
cmb/9-6-77
$par
cmb/11-17-77
$par
pl/8-6-79
pl/7-28-80
   p9t#Y