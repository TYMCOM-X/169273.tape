$POSITIONS 0,4,8
$TITLE right 'Pascal Virtual Machine Set Instructions' right 'May 5, 1980' right 'Page \'
$ski 3
&INTRODUCTION&
$ski
This document describes the Pascal Virtual Machine
instructions for manipulating sets.
Section one documents assumptions made about the representation of
sets.
Section two briefly describes each instruction which does
not have a counterpart in the VAX-11 architecture.
The final section outlines code templates for each of the Pascal
set operations.
This document is primarily relevant to the manipulation of 'long'
sets (sets which occupy more than two longwords).
$ski 2
$sec
^#.\\Representation Assumptions
$ski
These instructions were defined assuming two things about the
representation of sets.
First, sets always occupy an integral number of bytes.
Second, the element corresponding to bit zero of every byte of a set
has the value zero modulo eight.
$ski 2
$sec
^#.\\New Instructions
$ski
The instructions defined specifically for the Virtual Machine, i.e.,
those which did not already exist in the VAX-11 architecture, are
described in this section.
Each instruction group is first defined using the VAX-11 operand
specifier notation.
A brief description then follows.
$ski
$level +1
$sect
$par -4
^#\Set union, intersection and difference
$ski
$ver
UNION3 len.rl,source.ab,dest.ab
UNION4 len.rl,source1.ab,source2.ab,dest.ab
INTER3 len.rl,source.ab,dest.ab
INTER4 len.rl,source1.ab,source2.ab,dest.ab
DIFF3  len.rl,source.ab,dest.ab
DIFF4  len.rl,source1.ab,source2.ab,dest.ab
$jus
$ski
These instructions perform multi-byte union, intersection and
set difference.
A single length (in bytes) is specified for all the set operands.
In the three operand variations the final operand is both 
a source and the destination.
The four operand variations perform the designated operation on
the two source operands, leaving them unmodified in general,
and place the result in the location specified by the destination
operand.
If the length operand is less than zero then a negative length
exception occurs.
The contents of the result operand are unpredictable if the
destination operand overlaps a source operand.
$ski
$need 9
$ver
BISQ2 source.rq,dest.mq
BISQ3 source1.rq,source2.rq,dest.wq
ANDQ2 source.rq,dest.mq
ANDQ3 source1.rq,source2.rq,dest.wq
BICQ2 source.rq,dest.mq
BICQ3 source1.rq,source2.rq,dest.wq
$jus
$ski
These instructions are quadword variations of existing instructions.
Functionally they perform union, intersection and set difference
operations for quadword sets.
They are particularly useful if any of the operands reside in registers
since the first group of instructions take address access mode
operands and thus will not work with operands in registers.
$ski
$sect
$par -4
^#\Set generation
$ski
GENSET addr.ab,lwb.rl,upb.rl,low.rl,high.rl
$ski
GENSET generates a set given a set element range (operands low and
high).
Operand addr is the base address of the set to be constructed.
Operands lwb and upb are the lower and upper bounds of the
set to be generated.
Note that lwb and upb need not be zero modulo eight, but the
set is constructed assuming that bit zero of the byte at address
addr is element lwb - (lwb mod 8).
Unused bits in the first or last byte of the generated set are cleared.
If the lower bound operand is less than zero, a negative set lower
bound exception occurs.
If upb < lwb then a single byte (at address addr) is cleared.
There are no constraints on the values of operands low or high.
$ski
$sect
$par -4
^#\Set conversion
$ski
$ver
SETCVT source.ab,src_lwb.rl,src_upb.rl,
       dest.ab,dst_lwb.rl,dst_upb.rl
$jus
$ski
The SETCVT instruction is used for set conversions.
Any bytes of the source set whose elements correspond to elements
of the destination set are moved to the destination set.
Leading and trailing bytes of the destination set are zeroed if
necessary.
Unused bits in the first or last byte of the destination set
are cleared.
If either lower bound is less than zero, a negative set lower
bound exception occurs.
If either upper bound is less than the corresponding lower bound
then the set is assumed to be empty and occupy a single byte.
The contents of the destination set are undefined if the
source and destination sets overlap.
$level -1
$ski 2
$sect
^#.\Code Templates
$ski
This section briefly describes the possible code sequences
generated for each Pascal set operation.
The descriptions indicate the major decisions made.
No attempt is made to describe all special cases likely to 
be examined.
$level +1
$sect
$ski
$par -4
^#\Union, intersection and difference
$ski
The case analysis for the union operator is described in detail below.
The logic required for difference and intersection operators is
similiar in its general flavor, though not in the specific details.
Neither operator introduces any fundamentally new problems.
We begin by assuming that the lower bound and upper bound of the
resulting set is determined using the context in which the union
expression appears.
The lower bound of any set reference or of any set which is
actually generated at run time, is always fixed, and thus
known, at compile time.
The upper bound may be determined at runtime.
The lower and upper bounds of the result set are actually determined
as follows.
First, a 'context lower bound' is determined from the context in
which the union expression appears (e.g., from the type of
the left hand side of an assignment statement).
If the context lower bound is less than all the operand lower bounds,
then the smallest operand lower bound is used as the result
lower bound; otherwise the context lower bound is used as the result
lower bound.
If the context and all operand upper bounds are all known at compile
time, then the smaller of the context upper bound and the largest
operand upper bound is used as the result upper bound;
otherwise the largest operand upper bound is used (which may
have to be computed at run time).
If both operands and the result all have the same lower bound
and upper bound, then the UNION3 or UNION4 instruction may be
used directly.
The UNION3 instruction may be used if either operand is 
 in a temporary.
If the lower bounds and lengths do not match, then the operand
with the smallest lower bound is moved to a temporary,
zero extending to the result upper bound if necessary.
If the result lower bound is less than all of the operand lower
bounds, then the temporaries lower bound is the minimum of the
operand lower bounds; otherwise, it is the result lower bound.
The remaining operands may then be unioned with the temporary.
The move to the temporary may be eliminated if there exists an
operand already in a temporary.
Also the 'moving' of a set to a temporary may actually consist of 
generating a set in the temporary from a specified range.
$sect
$ski
$par -4
^#\Set membership
$ski
The code generated for the IN operator is determined by the context
in which the boolean result is used.
In a control context a BBS (branch on bit set) or BBC (branch on
bit clear) instruction is used.
These instructions test a single bit at an arbitrary bit offset
from a base address and conditionally branch depending on the
sense of the bit tested.
In a value context, the EXTZV instruction is used to extract the
relevant bit (after range checking the scalar operand if
necessary).
The EXTZV instruction also takes a base address and an arbitrary
bit offset as operands.
$sect
$ski
$par -4
^#\Set equality and inequality tests
$ski
If the lower bounds and byte lengths of both sets are known to
match at compile time, then a CMPC3 instruction is generated.
If the lower bounds, but not the byte lengths, match then a
CMPC5 instruction is used.
The CMPC5 instruction allows a fill character to be specified for
implicit padding of the shorter operand.
If the lower bounds do not match then the set with the
larger lower bound is converted to a set with the smaller
lower bound using the SETCVT instruction.
The comparison then proceeds as above.
Null set compares may be special cased; for lengthy sets
a CMPC5 with one operand length specified as zero may be used.
$sect
$ski
$par -4
^#\Set inclusion tests
$ski
Set inclusions ('<=' and '>=' operators) can be treated as a
set difference operation followed by a null set compare.
$sect
$ski
$par -4
^#\Set generation
$ski
Null sets are generated in a variety of ways depending on the length
of the set to be generated.
Either a CLRB, CLRW, CLRL, CLRQ or MOVC5 with zero length source
will be used.
Sets of the form [I..J] may be generated as a set with any
given lower and upper bound using the GENSET instruction.
A variety of special cases are also possible.
A singleton set, or a range known to encompass 32 bits or less,
may be unioned with an existing set by using the insert
field (INSV) instruction.
$sect
$ski
$par -4
^#\Set assignment
$ski
If the lower and upper bounds are identical, the MOVC3 instruction
may be used.
If either the lower or upper bounds do not match, then the
SETCVT instruction is used.
Additional special cases are also possible.
If the lower bounds are identical and the source is known to be shorter
than the destination, then a MOVC5 instruction may be used.
   