$length terminal
$num off
$control off
$cen
Specification of Object Language
for Pascal Virtual Machine, Version 2
$ski 4
$title right 'PVM Object Lang. Spec.' right 'March 5, 1981' right 'Page \'
$tab 9,17,25,33,41,49
$jus
#sect(Introduction)
This document specifies the object language for the Pascal Virtual Machine.
(See [1] for a specification of the PVM instruction set.)
Since this object language will be manipulated only by
programs written in MDSI Pascal to run in the host environment,
it can be largely specified in terms of Pascal type definitions
that such programs are to use in generating and interpreting
the object language.
A copy of an include file with such definitions is appended
to this document, and the body of the document presents basic
information and clarifications for these type definitions.
#numsect(1,Concepts)
An object module is the result of compiling one Pascal module,
or assembling one assembly source file.
$ski
A program section, or "psection" or "psect", is a named unit of
relocation.
It can be contributed to by different object modules;
these contributions are gathered together by the linker.
Psections have attributes based on memory protection;
the linker will put psections with similar attributes
together in the image.
#numsect(1,File Format)
A PVM object file is a Pascal binary file.
It contains one object module.
(This definition may later be extended so that more than one
object module may be stored in a single file.)
A module consists of a series of "records" (not records in the Pascal sense)
of five different kinds, enumerated as the type "obj_rec_id".
Each record begins with a fixed-size Pascal record of the type
"obj_rec_header", which holds the length of the object record
in storage units, the number of items in the object record,
and the kind of object record it is.
The rest of the object record consists of a series of
zero or more "items" whose format depends on its kind.
A Pascal program can, by keeping track of the object record headers,
identify all the object records in an object module, even though
these records may contain varying numbers of variable-length items.
$ski
The items in an object record each begin with an integer
that specifies the length of the rest of the item, in storage units.
$ski
The first record of an object module must be a module header record;
the last record must be an end of module record.
No other occurrences of these kinds of record may exist in an object module.
$ski
Many of the items in an object module contain character strings
denoting symbols.
These are stored as "packed array [1..*] of char";
thus the format will allow symbols of any length.
However, programs that create or use PVM object files need not
consider more than 15 characters of a symbol to be significant.
Therefore, it is recommended that programs creating object files
truncate symbols after the fifteenth character.
#numsect(1,Module Header Record)
After its header, this record contains exactly one item.
The item contains an object language revision number,
the creation date of the object module,
the name of the program creating the object module,
and the name of the object module.
This information is described by the data type "mhd_rec".
The format of this record is fixed for all time;
the language revision number exists so that if non-upward compatible
changes to the object language are made,
this number can be incremented, object modules' format can be
identified, and therefore recompilation of all existing modules
will not be necessary.
The current revision number is 0.
#numsect(1,End of Module Record)
This record may consist of its object record header only,
or it may have transfer address information following its header.
If this information exists, it consists of one item
containing the psection and offset
of the transfer address.
This information is described by the data type "eom_rec".
#numsect(1,Global Symbol Directory Record)
These records contain all the information necessary for the linker to allocate
virtual address space and set up global symbol tables.
They consist of one or more items, called "entries", of four kinds:
psection definition, entry definition, global symbol definition,
and global symbol reference.
The data type "gsd_ent" describes a global symbol directory entry.
$ski
A psection definition entry gives an alignment value,
which specifies the power of two which the virtual address of
this module's contribution must be divisible by.
For instance, a value of zero means byte alignment,
a value of two means longword alignment,
and a value of nine means page alignment.
The entry also gives the psection flags, the number of bytes
in the module's contribution, and the psection name.
Other references to any psection in a module are by psection
index, which is the ordinal number of the psection definition
in this module.
That is, the first psection defined in a module is referred to
in the module as psection zero, the second psection defined
is psection one, and so on.
A psection need not be defined in an object module before
the first reference to it.
$ski
Entry definition entries name the global entry points defined
in the current object module.
They contain the index of the psection in which the entry point
is defined, a flag stating whether the entry point is relative
(relocated) or absolute (if the latter, the psection index is
ignored), the longword value of the entry field associated with
the entry point, the offset of the entry point in its psection
(or its absolute value if absolute), and the name of the
entry point.
$ski
Global symbol definition entries name the global symbols defined
in the current object module.
They contain the same information as entry point entries,
except for the entry field value.
$ski
Global symbol reference entries name the externally defined global symbols referred to
in the current object module.
They contain a flag field which currently has no defined flags,
and the name of the symbol.
As with psection definition entries,
these entries' order is significant;
use of an external symbol is by its index,
i.e. its ordinal number in the module.
#numsect(1,Text Information and Relocation Record)
These records contain commands and data which the linker
uses to fill in the contents of the image.
They consist of one or more items, called "commands", of several kinds,
falling into five groups:
the store-immediate group, the stack group, the store group,
the operator group, and the control group.
The data type "tir_cmd" describes a text information and relocation command.
$ski
The store-immediate commands cause literal data in
the command to be stored starting at the current linker location counter.
The store immediate code command stores code, in 16-bit units;
the store immediate data command stores constant or variable
data, in 8-bit units.
$ski
The stack commands cause values to be pushed on a computation stack
maintained in the linker.
This stack is manipulated by the operator group,
and values are popped from the stack and stored in the image by
the store group.
The stack global command causes the linker to push the value
of an external symbol on the stack.
The external symbol is identified by its ordinal position
in the sequence of global symbol reference entries
in the global symbol directory records.
The stack longword command causes the linker to push a 32-bit
value in the command on the stack.
The stack module psect relative and stack image psect relative commands
cause an address computed as a given offset from a given psection
base to be pushed on the stack.
The former uses the beginning of the current module's contribution
to the psection as the base;
the latter uses the beginning of the psection in the image as the base.
The stack entry field command causes the linker to look up the
longword entry field value associated with the named entry point
and push it on the stack.
$ski
The store group causes computed values to be stored in the image.
The store longword command causes the linker to pop a longword
from its internal stack and store it in the image beginning at
the linker's current location counter.
Similarly, the store word and store byte commands cause the linker
to pop a longword from its internal stack and store its low-order
word or byte in the image, beginning at the current location counter.
The store repeated longword command causes the linker to pop a
longword from the stack, call it a repeat count, pop another
longword, and store its value repeatedly in the image,
beginning at the linker's current location counter.
$ski
The operator group causes the linker to do arithmetic calculations
on its internal stack contents.
The add, subtract, multiply, divide and negate operations
cause the corresponding standard reverse Polish operations to be done on
the top stack element(s).
$ski
The control group manipulates the linker's location counter.
The set relocation base command causes the value on top
of the linker's stack to be popped into the location counter.
#numsect(1,Floating Address List Record)
These records contain information needed by the linker
to create the floating point address lists at the end of a PVM
image file.
They consist of one or more items, called "entries", of a single kind.
The data type "fal_ent" describes a floating address list entry.
$ski
Each entry contains a field which specifies which of the three
floating address lists ("F" format list, "D" format list,
or immediate operand list) the entry gives data for,
which psection the addresses in the entry belong to,
and a list of offsets in the psection corresponding to the
addresses of the floating point data.
(In the case of immediate operand floating point values, which
are 20-bit values starting at bit position 12 within a
Format 3 or Format 6 PVM instruction,
the address given is the address of the beginning of the instruction.)
#pagsect(References)
$ski $jus
$ind 9
$par -5
\1.\\Gorgen, D.\P.  "Specification of Pascal Virtual Machine Version 2",
2/17/81.
    