#document(AEV Runtime Conventions and Standards,<:August 27, 1981:>,66)
#sect_default(3,2,2,1)
#sect(Introduction)
This document describes the conventions and standards to be followed
in the design and coding of the runtime routines for the ANC
MicroEclipse Vehicle system.
Throughout this document the term "standard" is used
to describe rules which all programmers of the runtime
are expected to follow consistently.
The term "convention" is applied to rules which are generally
expected to be followed, but which need not be when special
circumstances suggest other approaches.
The word "shall" is generally used when
describing a standard.
#sect(General Conventions and Standards)
This section describes several standards and conventions generally
applicable throughout the runtime.
#beginlevel
#sect(The Symbol Table File)
Macro definitions and direct symbol definitions (e.g., "SF.SLINK=\\-2") 
which are used
in two or more runtime source files shall be contained in
the file RTDEFS.SR.
This file will be used to create a symbol table file which
will then be used in assembling all other source files.
The symbol table file created will be named RTDEFS.PS
and may be used in assembling other source files
as follows:
#beginfigure
X MASM/PS=RTDEFS.PS <source file name>
#endfigure
Typical definitions which would be included in RTDEFS include
symbolic offsets for stack frame fields and file block fields.
Note that RTDEFS may only contain macro and symbol definitions;
it may not contain any assembler source which would reserve
storage.
#sect(File And Symbol Naming)
Public labels and file names will incorporate a one character
"facility id letter".
The facility letter indicates the major functional area of
the runtime with which the symbol is associated.
These facility letters are listed below:
#beginfigure(14)
T - text file I/O
B - binary I/O
Y - typed I/O
I - general I/O
S - sets
H - heap manipulation
C - strings
V - virtual addressing
M - monitor (program initialization, procedure entry/exit,
    debugger, runtime overlaying)
R - math routines
O - user code overlaying
G - miscellaneous (e.g., runtime and date)
E - exception handling
#endfigure
Global labels shall begin with the facility letter followed by
a period ('.').
Since only five characters are significant to the assembler,
all symbols within a given facility must be unique in the
third through fifth characters.
#par
Assembler macros shall begin with the facility letter followed
by a question mark.
Note that Data General uses identifiers beginning with a
question mark for all system macro names.
#par
Source file names shall begin with the two letters "RT" followed
by the facility letter.
The standard source file extension (".SR") shall  be used.
#par
It is suggested that a one or two character prefix followed by a
period also be used for groups of related symbol definitions
appearing in RTDEFS.
For example, symbol stack frame offsets all have the general
form: "SF.wxyz".
If a one character prefix is used it must match the facility letter
for the facility with which it is associated.
The use of symbols in referring to constant values is strongly
encouraged.
#sect(Conditional Assembly Flags)
Conditional assembly flags begin with the common prefix
"FL.".
#par
The flag "FL.ASSERT" is used to control assembly of assertion
code, that is, code which performs internal consistency
checks (NOT user error checks).
During the development phase of the runtime this flag will
always be set to one, indicating that the controlled code
should be assembled.
The use of internal consistency checking code is encouraged.
Such code may be unconditionally assembled.
The FL.ASSERT flag need be used only if either the amount of
code required to perform the check is large, or, the 
erroneous condition is very unlikely to occur in the
production system.
Note that even conditionally assembled checking code
should not be "excessively large";
if code sizes varied substantially depending on the
switch setting then two runtime overlay structures
would have to be defined.
#sect(Miscellaneous Standards)
The symbols AC0, AC1, AC2 and AC3 shall be used in instructions
to refer to the accumulators.
The symbols FPAC0, FPAC1, FPAC2 and FPAC3 shall be used in
instructions to refer to the floating point accumulators.
These symbols are defined in RTDEFS.
#par
Use of the stack above the location currently pointed
at by the stack pointer is forbidden.
#par
Use of the assembler facility to define new opcode symbols
for existing instructions is forbidden.
However, alternative opcodes predefined by the assembler
itself may be used (e.g., NOP, SLEZ, USLE).
Moreover, the conditional skipping opcodes shall be used
when the purpose of the corresponding arithmetic or logical
instruction is to do a compare and conditionally skip.
#par
The stack pointer shall only be modified with instructions
which check for stack overflow (e.g., PSH, MSP, SAVE).
Thus an explicit store into the stack pointer
(i.e., "STA\\\\ACn,SP") shall not be used.
#endlevel
#sect(Documentation And Module Layout)
Several documentation and module layout conventions or standards
are described in this section.
#par
Each source file shall begin with a .TITL directive.
#par
Use of a HEADER generated module description at the start
of each file is encouraged.
#par
Each routine shall include at least the following documentation:
#beginitem(2,,0)
#item(o)A description of the function of the routine.
#item(o)A specification of the inputs and outputs of
the routine (including side effects).
#item(o)A specification of any exceptions which may occur during 
execution of the routine. 
"Exceptions" is used here to designate any condition which will
be signalled through the exception manager and any fatal errors
which will result in a call to the debugger.
#item(o)A list of any additional requirements or assumptions
relevant to the correct functioning of the routine.
#enditem
This information should appear at the beginning of each routine.
Implementors of the runtime are urged to consult with
each other so that this information is formatted in
a reasonably consistent manner.
#sect(Runtime Coding Constraints)
This section discusses the restrictions imposed on the runtime
by the overlaying scheme and the limited direct address space.
The basic approach to overlaying the runtime is described in the
^UANC MicroEclipse Vehicle Runtime Specification|U.
The first section below describes restraints on the use of data;
the second section describes restrictions on routine
packaging.
#beginlevel
#sect(Data Constraints)
The use of static storage should be kept to an absolute minimum.
Static storage for the runtime will be allocated on page zero
(either low or high page zero) and will detract from both
the direct address space available and from the user's stack
space.
Local variables allocated on top of the stack may be used.
Macros will be provided for allocating locals on entry to
a routine.
#sect(Packaging Constraints)
Runtime routines are grouped into overlays which must fit
within 2Kb overlay areas.
The first scratch mapping register will be used to map the
overlay when a runtime routine within the overlay is called.
The second and third scratch mapping registers are available to
the runtime routine for the mapping  of arguments passed by virtual address.
The called routine may only call other routines in the
same overlay or routines in the direct runtime.
A routine in another overlay may not be called because no
mechanism exists for restoring the caller's overlay when
the caller returns.
#par
It is not yet clear whether we will be able to live with
the above packaging constraints.
Some collections of routines may be too interrelated and too
large to fit on one page with the above calling constraints.
The formatted text I/O routines may turn out to be such a case.
There are several possibilities for dealing with such a 
situation.
A simple solution which may be adequate in some cases is to
duplicate utility routines in several overlays.
Where this technique will not work two other possibilities
exist.
First, if all the routines in an overlay require only zero
or one scratch map registers for addressing data passed in,
then the second, or, second and third, scratch map registers
could be used for addressing a second, or, second and third,
page of runtime routines.
Second, some of the mapping registers used to address user
code might be "borrowed" to map additional runtime overlays
and then later restored.
However, this technique may be inapplicable in most circumstances
because data passed as parameters to the runtime may be constants
in the user code area.
#par
This issue will require further discussion if and when it
arises.
#endlevel
#sect(Runtime Calling Conventions)
This section describes the calling and parameter passing conventions
which runtime routines are expected to follow.
The aspects of this protocol which are significant to the
callers' of the runtime are described in the ^UANC MicroEclipse Vehicle Runtime
Specification|U;
we assume here that the reader is familiar with the conventions
described in that document.
The conventions for routines in the direct runtime are described
separately from those for routines in the overlaid runtime.
If necessary for efficiency reasons, a third runtime
calling protocol could be defined later;
routines in the direct runtime could be called without use of
the transfer vector.
The calls would be directly to the relevant runtime routine;
a fixed location in page zero would be used to contain the
address of the called routine.
It would be preferable to avoid this approach if possible since it
requires compiler knowledge of which routines are in the direct
runtime and also requires a fixed page zero location for each
routine.
#par
A static storage location is used to contain the return address
to the user's code for all runtime calls.
This location serves a dual purpose.
First it saves the return address for use later when returning
to the user.
However, its primary purpose is to allow the debugger to
determine the current location in the user's code whenever
an error detected in the runtime causes the debugger to be
called.
#par
Internal runtime routines should use the same register preservation
convention which user called runtime routines observe.
All registers except those used to return a result
should be preserved by the caller.
#beginlevel
#sect(Direct Runtime Calls)
Upon entry to a direct runtime routine, AC0 through AC2 will
contain exactly what they did at the point of  the call.
AC3 is undefined and the user return address is in the static
cell labeled by M.RETADDR.
AC0 through AC2 must be preserved except for an accumulator
in which a result is returned.
This is true of the floating point accumulators also.
The frame and stack pointers must always be preserved with
two exceptions.
First, any arguments passed on the stack must have been
popped off.
Second, a runtime routine's function may include pushing a value
onto the stack.
AC3 must contain a copy of the frame pointer upon
return to the user.
#par
Routines in the direct runtime will always return
directly to the caller.
#par
If a routine in the direct runtime may be called
internally as well as from user code, then two
entry points should be used.
The first entry point will be for calls from user code
and will push the user return address (at location M.RETADDR)
onto the stack and then fall through to the second
entry point.
The routine can then simply return with a POPJ instruction
whether it was called internally or from user code.
#sect(Overlaid Runtime Calls)
Overlaid runtime routines will return to the runtime's overlay
manager rather than returning directly to the user's code.
The return address to the user will be in the static cell
labeled by M.RETADDR.
However, the runtime routine need not access or use the return 
address to the user.
AC3 will contain the return address relevant to the
runtime routine, i.e., the return address to the runtime
overlay manager.
#par
The contents of AC0 through AC2 will have been pushed onto
the stack;
on entry to the runtime routine their contents are undefined.
Any parameters passed on the stack will be on the stack
below the saved accumulators.
#par
On return to the runtime overlay manager, the copies of
AC0 through AC2 and any parameters passed on the stack
must have been popped from the stack.
The contents of AC0 through AC2 should be precisely what is
to be returned to the user, i.e., they should contain 
exactly what was passed in on top of the stack except
for an accumulator which is used for returning a result
to the user.
The overlay manager will load a copy of the frame
pointer into AC3 before returning to the user.
#endlevel
#sect(Error Handling)
This section describes the three types of errors which may be
detected within the runtime: fatal errors, exceptions and
assertion failures.
#beginlevel
#sect(Fatal Errors)
Fatal errors cause an error message to be written to the
terminal and the debugger to be called.
In most circumstances, errors detected within the runtime should
NOT be treated as fatal errors, but rather should be treated as
exceptions (which are described in the next section).
An example of a class of errors which are treated as fatal
errors is errors within the exception handling system itself.
#par
The fatal error handling routine is in the direct runtime
so that it can always access the error message passed to it.
Two parameters are passed to this routine.
AC0 should contain the error address which will be passed on
to the debugger.
AC1 should contain a byte pointer to the error message
to be written to the user's terminal.
The error message must be terminated with a zero byte.
#par
The macro M?FATAL is used to generated a call to the fatal
error routine.
It has one optional parameter, the label of the error message
text.
AC0 must be explicitly loaded with the error address.
If the optional parameter is omitted, then AC1 must also
be explicitly loaded by the caller.
If the optional parameter is present, then the macro forms a
byte pointer from the label and loads in into AC1.
If the parameter is used, then the error message label must
be accessible with a byte displacement instruction
(e.g., must be defined within -128 words or +127 words of
the point of call to the macro).
#sect(Exceptions)
Exceptions are the standard means of signaling errors from
within the runtime.
An exception is signalled by calling the exception manager with
an exception block address and the address of the location
of the exception.
#sect(Assertion Failures)
The assertion error routine is called when an "internal" 
error is detected, i.e., an error which in theory should
never occur.
The assertion failure routine causes a standard message to
be written to the user's terminal and the debugger to be
called.
#par
The assertion failure routine is in the direct runtime.
Its sole parameter is the address of the error, which
should be passed to the routine in AC0.
The routine simply calls the fatal error routine with
the address of the standard assertion failure message.
The macro M?ASSERT generates a call to the assertion
failure routine.
AC0 must first be explicitly loaded by the caller.
#endlevel
#sect(Attention Masking)
Two parameterless macros, E?MASK and E?UNMASK, are defined in RTDEFS to
mask or unmask the signaling of the attention condition.
These macros must be used in the runtime whenever the following
two conditions are met:
#beginitem
#item()State information could be left in an inconsistent state if
control was transferred to an attention handler.
#item()That state information might be referenced later on.
#enditem
As an example, assume that Pascal file blocks are chained into a
linked list and that a CLOSE will remove the block from the list and
dispose of it.
If a close all operation is requested by the user, then 
this list of currently open files is traversed and all the
files are closed.
If an explicit close is interrupted while the list pointers are
being modified, then the list will be in an inconsistent state and
a subsequent close all may not work.
Updating a free list of heap blocks is a similar situation.
$SKI 4
(pasdev14)aevrts.pmf
   