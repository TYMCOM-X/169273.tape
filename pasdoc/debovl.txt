


     Pascal Debugger/Overlay Manager Interface
     April 5, 1979/Revised April 24, 1979




     The new Pascal debugger will  interact  much  more  closely  with  the
     overlay  manager.  This is necessary to correct errors which presently
     exist and also to  remove  limitations  on  the  debugger's  use  with
     overlaid programs.  In particular three problems will be dealt with:
     1. The  display  stack  command  will  not  work properly if a routine
        corresponding to a stack frame is not currently resident.
     2. Breakpoints are identified via statement block  addresses.  Thus  a
        breakpoint  could  occur erroneously in an overlay module which was
        brought in over a module in which a breakpoint had been set.
     3. Currently breakpoints may only be set in an overlay  module  if  it
        contains the current statement.

     The  new  debugger  will,  in  a  limited  fashion, both keep track of
     whether certain overlay modules  are  core  resident  and  will  order
     modules  loaded  into core when necessary.  The fundamental assumption
     which the debugger will make is  that  all  modules  constituting  the
     currently  open  scope  are  resident.  Any commands which may require
     accessing  out  of  scope   modules,   in   particular   the   DISPLAY
     BREAKPOINTS/LOCATION/STACK   commands,  must  load  and  then  restore
     non-resident modules.

     When an open command is given the debugger can obtain  the  number  of
     the  relevant  overlay  module  in one of two ways.  First if the open
     command specifies a public routine, the routine is looked  up  in  the
     link  symbol  table.  If  the  routine  name  is  found in the section
     corresponding to module 'PASTV.', then the routine lies in an  overlay
     module.  The  transfer  vector  entries' address is available from the
     link symbol table.  The transfer vector contains  the  overlay  module
     number.  Second,  if  the open command specifies a stack frame number,
     the overlay module number is obtainable from the stack frame logically
     above  the  given  stack  frame.  Whenever  an  overlay  routine calls
     another procedure, the return address in the called procedure's  stack
     frame  is  set  to  the  address  of an overlay manager routine.  This
     return address is the value of public symbol  'OVRTN.'  and  thus  its
     value  is  obtainable  from  a  link  symbol  table  lookup.  The word
     (physically) below the return address to the overlay manager  contains
     the overlay module number for the calling routine.  Thus for any stack
     frame, except the topmost, the debugger can obtain the number  of  the
     corresponding  overlay  module,  if any.  The overlay module number of
     the topmost frame will be kept track of seperately as described below.
     Using  one  of  these  two  methods, then, the debugger can obtain the
     number of the overlay module containing the scope being  opened,  and,
     via  a  suitable  overlay  manager  entry  point, can order the module
     loaded into core.

     As mentioned above three commands may require out of scope modules  to
     be  accessed.  Each  of these command must be able to request that the
     necessary modules be loaded into core, and, upon completion,  must  be
     able  to  restore the module containing the currently open scope.  The
     debugger will keep track of whether or  not  3  sets  of  modules  are


                                     - 1 -






     Pascal Debugger/Overlay Manager Interface
     April 5, 1979/Revised April 24, 1979

     currently  in  core:  the module containing the current statement, the
     module containing the currently open scope and all  modules  in  which
     breakpoints  are  set.  Whenever  the  debugger is entered, the module
     containing  the  current  statement  (and  thus,  of  necessity,   the
     currently  open module also) is in core.  Similarly, whenever a module
     is opened it must be in core (if it was not orginally  then  the  open
     command  insures  it  is  brought  in  as described above).  Finally a
     breakpoint can only be set in the currently open module  or  a  module
     not  in  an  overlay  segment,  so  whenever  a  breakpoint is set the
     corresponding module must be in core.  Thus the initial status of each
     of  the  three  sets  of  modules  can be established.  Once initially
     established the current status of these modules will be maintained via
     a  new overlay manager routine, 'OVL$IN'.  This routine will be called
     whenever an overlay module is brought into core.  It will require four
     parameters.  Both  the  starting  and  ending  address of the relevant
     overlay area will be needed.  In addition, the number of  the  overlay
     module  currently  resident  in  the area and the number of the module
     being loaded are required.  In order  to  keep  track  of  the  module
     containing  the  current  statement  this  routine  will examine three
     fields in the debugger's static  storage  record  (a  record  of  type
     DB_STATIC_RECORD,  described  in  include file DEBUG.TYP[52250,261] ).
     If field CUR_STMT_IN is true then OVL$IN will  check  to  see  if  the
     address stored in field CUR_STMT_ADDR lies within the overlay which is
     currently resident in the area (  if  one  is  ).  If  it  does,  then
     CUR_STMT_IN  must be set to false and the number of the overlay module
     being swapped out is stored in field CUR_OVL_MOD.  If  CUR_STMT_IN  is
     initially  false  then  OVL$IN must check to see if CUR_OVL_MOD equals
     the number of the  overlay  module  being  brought  in.  If  so,  then
     CUR_STMT_IN is set to true.  This procedure would only have to be gone
     through when the user was in the debugger (the run time monitor sets a
     flag  in  its static storage record when the user is in the debugger).
     The identical procedure must also be gone through to track whether the
     module  containing  the  currently  open scope is in core or not.  The
     fields of the debugger's static storage record used for  this  purpose
     are DEF_MOD_IN, DEF_MOD_ADDR and DEF_OVL_MOD.

     CUR_STMT_ADDR  and  DEF_MOD_ADDR  are initialized by the debugger when
     the relevant module is opened.  Both ae obtained from  the  debugger's
     scope  stack  using the following algorithm.  If a stack frame pointer
     for the topmost in-scope stack  frame  is  available  then  the  'link
     address'  in  the  stack frame is used.  This is a pointer to the word
     following the call to 'PNTRY.'.  (Currently, if the frame  corresponds
     to  the  main  routine  this  word  is available but is in the 'return
     address' field of the stack frame.) The  only  situation  in  which  a
     stack  frame  pointer  is  not available is if an inactive routine has
     been opened.  This can occur only if the module opened was compiled in
     DEBUG  mode.  In  this  case  the scope stack contains a program block
     pointer, which is then used as the address.

     OVL$IN will also be used to keep  track  of  whether  or  not  modules
     containing  breakpoints  are  currently in core.  The breakpoint table
     (contained in the static storage record of the run time monintor)  has
     three  fields per entry.  'IN_CORE' is a boolean indicating whether or


                                     - 2 -






     Pascal Debugger/Overlay Manager Interface
     April 5, 1979/Revised April 24, 1979

     not the corresponding module is currently in  core.  'MOD_NO'  is  the
     overlay  module number of the corresponding module and 'STMT_BLK_ADDR'
     is the breakpoint address.  OVL$IN must  do  the  following  for  each
     breakpoint  table  entry.  If  the  entry  is  marked as IN_CORE, then
     STMT_BLK_ADDR is examined to see if it lies within the overlay  module
     being swapped out.  If it does then IN_CORE is set to false and MOD_NO
     is set to the overlay module number of the containing overlay  module.
     If  the  entry  is  marked  as  not  currently IN_CORE, then MOD_NO is
     examined to see if it equals the number of the  overlay  module  being
     brought  in.  If  so then IN_CORE is set to true.  Any entry for which
     STMT_BLK_ADDR equals NIL is unused and  need  not  be  examined.  Note
     that  the  breakpoint  table  entries  must  be  updated regardless of
     whether or not the user is currently in the debugger.

     The DISPLAY BREAKPOINTS command can examine the IN_CORE field of  each
     entry  which is in use.  If an entry is not currently in core then the
     MOD_NO field must have  been  set  when  the  overlay  containing  the
     breakpoint  was swapped out.  The debugger will require an entry point
     in the overlay manager to order overlays brought in.  The routine will
     be Pascal callable with the following external definition:
        external procedure ld$ovl ( mod_no:  ovl_mod_no );
     The display breakpoints command will call this routine with the MOD_NO
     field of the breakpoint table as a parameter.  Also note that the  run
     time monitor can examine the IN_CORE field of a breakpoint table entry
     when checking to see if a breakpoint has been reached.

     Breakpoints also require a third routine to be added  to  the  overlay
     manager.  A  given  overlay  module  may  exist  in  several different
     versions.  The version actually used may change during the  course  of
     execution.  When  this  occurs an overlay manager routine must examine
     the breakpoint table.  If the overlay module whose version is changing
     is  currently  in  core,  then  this  new  routine  must examine those
     breakpoint table entries  for  which  IN_CORE  is  set  to  true.  The
     STMT_BLK_ADDR  field must be checked to see if its contents lie within
     the relevant area.  If it does, then the STMT_BLK_ADDR should  be  set
     to  NIL,  thus  invalidating  the  entry.  If the overlay module whose
     version is changing is not currently in core, then  the  routine  must
     examine those entries for which IN_CORE is set to false.  In this case
     the routine can compare the MOD_NO field in the breakpoint table entry
     with  the  number of the module whose version is changing.  If a match
     is found then STMT_BLK_ADDR should be set to  NIL  to  invalidate  the
     entry.  This  routine  could  be implemented as two seperate routines.
     The information needed to handle  both  cases  can  be  summarized  as
     follows:  an  indication  of  whether  or not the module whose version
     number is changing is currently in core or  not,  the  start  and  end
     addresses of the area, and the number of the relevant overlay module.

     The  DISPLAY  LOCATION  command  will examine CUR_STMT_IN and then, if
     necessary, call LD$OVL with CUR_OVL_MOD as a  parameter.  The  DISPLAY
     STACK command can determine if a stack frame corresponds to an overlay
     module via the process described  earlier.  Note  that  any  of  these
     three  commands  may  force  the overlay containing the currently open
     scope  out.  Since  the  rest  of  the  debugger  assumes  the  module


                                     - 3 -






     Pascal Debugger/Overlay Manager Interface
     April 5, 1979/Revised April 24, 1979

     containing  the  currently open scope is resident, these commands must
     restore that module if they displace it.  They can do so by  examining
     DEF_MOD_IN  and,  if necessary, calling LD$OVL with DEF_OVL_MOD as the
     argument.

     In summary three routines  must  be  added  to  the  overlay  manager.
     LD$OVL  will  be  called  by  the  debugger to order an overlay module
     brought in.  OVL$IN will be an overlay manager routine called  by  the
     overlay  manager  whenever  an  overlay is brought into core.  It will
     access and update both the Pascal  runtime  monitor's  static  storage
     record and the debugger's static storage record.  A third routine will
     be used by the overlay manager to invalidate breakpoint table  entries
     when  the  version  of  an  overlay  module  changes.  In addition the
     debugger will identify symbols in the resident transfer vector via the
     module name 'PASTV.'.  The return address to the overlay manager which
     is stored in a stack frame is the value of public symbol 'OVRTN.'.


     debovl.scr[52250,261]




































                                     - 4 -




   