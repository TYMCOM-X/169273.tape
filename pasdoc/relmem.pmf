#DOCUMENT(MDSI Pascal Version 2A,<:20 October, 1982:>)
#MEMO(All Ann Arbor Employees,Nancy J. Egan/Development Software,<:20 October, 1982:>,
MDSI Pascal Version 2A)
#SECT(Release Schedule)
Version 2A(463) of MDSI Pascal is now available on account [52250,261] on
ADP systems 12 and 13, along with compatible versions of the Pascal library
(PASLIB), debugger, utilities library (RDLIB), and utilities.  If
no serious problems are reported, then between 5PM and 6PM on
October 22 the following events will occur:
#BEGINITEM()
#ITEM()Version 1V(231) of the compiler system will be removed from account
[52250,234].
#ITEM()Version 2(345) of the compiler system will be transferred from account
[52250,220] to account [52250,234].
#ITEM()Version 2A(463) of the compiler system will be transferred from account
[52250,261] to account [52250,220].  Version 2A(463) will also remain
on account [52250,261] until December 1,1982.
#ENDITEM()
This is an official release of the DEC-10 cross-compiler.  The version
of the compiler in the release account will not be changed after 
October 22 until the next official release.
#PAR()
Independently and simultaneously, the following events will occur
on the old VAX 11/780 running operating system V2.5:
#BEGINITEM()
#ITEM()New runtime libraries will be moved into the Development 
Software release account, DRA0:[250220].
#ITEM()PASCAL Version 3, an MDSI Pascal VAX resident compiler will
be moved to the release account.  You will be able to invoke it
by issuing the command "PASCAL" from any VAX account.  The VAX resident
compiler generates code only for the VAX.
#ENDITEM()
A release of the VAX resident compiler for operating system V3.0 
on the new VAX is tentatively scheduled for November 1, 1982.
#PAR()
The VAX resident compiler contains the same enhancements and modifications
as the DEC-10 cross-compiler, with the exception of those changes
related directly to the M68000 or the DEC-10 code generators.  This
compiler has passed all Development Software internal tests but
is still undergoing quality assurance tests.  Periodic updates will
be made to the release account on the VAX as problems are reported
and corrected.
#PAR()
In the event that serious problems are encountered that need an
immediate solution, contact Paul J. Pinkstaff (ext. 57382).
Otherwise, report any problems encountered with the compilers
through the normal PCR procedure.  Be sure to state whether the
PCR refers to the DEC-10 cross-compiler or to the VAX resident
compiler.
#PAR()
If this schedule is changed, a message will be left in
the file RELEAS.NOT[52250,261] on both system 12 and system 13.
#PAR()
Code generated by version 2A of the compiler is compatible with code
generated by version 2 with one exception.  See "Linking PASCAL 
programs on the VAX", below.  Code generated for the VAX with
Version 2A of the compiler is identical to code generated by the 
VAX resident compiler, therefore object modules produced by either 
compiler may be used interchangeably on the VAX.
#SECT(Source Code Changes Required)
Source code changes are required to use either new compiler with existing
source modules.  The changes are as follows:
#BEGINITEM()
#ITEM()All references to the switch [NO]LIBRARY should be removed.
#ITEM()The DATAMODULE keyword should be changed to the MODULE keyword.
#ITEM()Generic arrays can no longer be used.  This affects only programs
compiled for the DEC-10 systems.
#ITEM()NEW no longer implicitly initializes the storage allocated for a user.
Code which relied on this initialization must perform explicit
initialization.  For example, when NEW is used to allocate space for a
record containing two numerical fields, the value of those fields will
be undefined.  If an initial value of zero is expected, instructions
to set the fields to zero must be performed after the call to NEW.
#ITEM()The Pascal standard procedure EXCEPTION_MESSAGE has been 
changed.  Previously, EXCEPTION_MESSAGE wrote a message to the 
user's terminal describing the exceptional condition last signaled.
Now, EXCEPTION_MESSAGE is a function returning a 
result of type STRING. Therefore, to achieve identical functionality
using EXCEPTION_MESSAGE with the new compilers as with the old,
the following source code change should be made:
#BEGINFIGURE()

    Old                         New

 exception_message;     writeln(tty,exception_message);
#ENDFIGURE
#ENDITEM()
#SECT(Linking PASCAL programs on the VAX)
Pascal programs compiled for the VAX using either of the new
compilers -- the new ADP VAX cross compiler or the new VAX 
resident compiler -- should be linked in the same manner as
they always have been, using the predefined logical symbol
"PLINK" to specify the linker options file.  However, to 
relink a program whose ^Umain program|U has not been
recompiled, or has been recompiled using the old cross 
compiler, the logical symbol "OLDPLINK" should be used 
in place of "PLINK" to specify the linker options file.
Once the main program has been recompiled with one of the
new compilers, regardless of whether or not any other
modules have been recompiled, "PLINK" should be used as usual.
#PAR()
Note that there is no reason to
relink a program which has not been recompiled.
The new version of the VAX PAXCAL runtime will automatically be
used by all Pascal programs, regardless of when or how they were linked.
#SECT(Enhancements and Modifications)
#BEGINLEVEL
#SECT(:TARGET M68)
The new DEC-10 compiler fully supports the :TARGET M68 compiler command
as well as the :TARGET VAX and :TARGET P10 commands.  The
:TARGET M68 command causes code to be generated for the 
Motorola 68000.
#SECT(/[NO]EXTLENGTH(length))
The new compiler switch, [NO]EXTLENGTH(length), allows the user to specify the
number of characters which should be checked for uniqueness on public
and external symbol declarations.  This switch causes the
compiler to warn the user when apparently unique symbols cannot be
differentiated within the given length.  This switch is useful since
there are symbol length limits imposed by the linkers on different machines.
#PAR()
Using the switch as follows:
#BEGINFIGURE()
/EXTLENGTH(6)
#ENDFIGURE()
will cause the compiler to warn the user that the symbols
PARSE_RECORD and PARSE_COMMAND are not unique within the given length
of 6 characters.
#PAR()
The length given must be between 1 and 255.  NOEXTLENGTH is the
default and causes the use of the full length of the symbols for 
uniqueness checking.
#SECT(/RUN:file-name switch)
The /RUN:file-name switch, implemented only on the DEC-10, 
directs the compiler to run the specified file.
The default ersatz SYS: is used unless some other device or ersatz is
specified.  If a PPN is specified, the device must also be specified.   
This switch is useful when the compiler is run from another program.  For
example, at the end of the the command file read by the compiler, "/RUN:LINK"
would run the linker.  This provides the ability to chain programs together.
#SECT(/RUNOFFSET[:offset] switch)
The /RUNOFFSET switch, implemented only on the DEC-10, 
specifies a CCL offset for the program
specified with the /RUN switch.  The default offset is 0 if the
/RUNOFFSET switch is not specified.  The defaut is 1 if the [:offset]
portion is left off the switch.  This allows the use of the standard DEC convention
of CCL offsets.  An offset of 1 tells the program that it was run from
another program.  It will will then look for a command file for input rather
than prompting for input at a terminal.
#SECT(/NOSEARCH switch)
The new switch, /NOSEARCH, will cancel the effect of any previously
specified search list.
#SECT([NO]LIBRARY switch removed)
The /[NO]LIBRARY switch has been removed.  Library search requests are
emitted only for main program compilations.
This switch should be removed wherever it is currently used.
#SECT(DATAMODULE keyword removed)
The DATAMODULE keyword is no longer valid.  MODULE has been generalized
to not require any code in the module and thus fills the function of
the DATAMODULE keyword.
The DATAMODULE keyword should be changed to MODULE wherever it is 
currently used.
#SECT(EXCEPTION_MESSAGE change)
The Pascal standard procedure EXCEPTION_MESSAGE has been 
changed.  Previously, EXCEPTION_MESSAGE wrote a message to the 
user's terminal describing the exceptional condition last signaled.
Now, EXCEPTION_MESSAGE is a function returning a 
result of type STRING. Therefore, to achieve identical functionality
using EXCEPTION_MESSAGE with the new compilers as with the old,
the following source code change should be made:
#BEGINFIGURE()

    Old                         New

 exception_message;     writeln(tty,exception_message);
#ENDFIGURE
#SECT(New warning messages)
Warning messages are now put out by the compiler when:
#BEGINITEM()
#ITEM()Parentheses are not used around each level of array constructors or,
#ITEM()Octal constants are specified in the form "<number>B".
#ENDITEM()
These will be errors in the next release of the compiler.
Full parenthisization will be necessary to avoid ambiguity when repeat
counts are added to the language.
#SECT(Allocation using NEW)
NEW no longer initializes the storage it allocates to zero.
Code that relied on implicit initialization must now perform
explicit initialization.
#SECT(Generic arrays removed)
Generic arrays have been removed from the MDSI Pascal language.
#SECT(TTY and TTYOUTPUT)
The files TTY and TTYOUTPUT are now automatically associated with the user's
terminal at the start of execution.  Any call to OPEN, RESET or REWRITE
specifying the user's terminal will associate the specified file variable with
the existing input or output device.  Such a call will change the ASCII
and RETRY options in accordance with the options
parameter in the call.  The user's terminal will never be closed;
CLOSE(TTY) has no effect and CLOSE(TTYOUTPUT) has the same effect as BREAK(TTYOUTPUT).
#PAR()
No changes are necessary to any existing program.
#SECT(Improved compiler exception handling)
Exception handling has been incorporated in all passes of the compiler.
This should give the user more useful information in the case of
a problem with the compiler.
#SECT(Improved assembly listing)
The assembly listings generated for any system now cleary show all
public symbols.
#ENDLEVEL()
#SECT(Bug Fixes)
#BEGINLEVEL()
#SECT(I/O fixes)
Many bugs on all systems have been fixed in the I/O 
routines.  In particular, the following changes have been made:
#BEGINITEM()
#ITEM()EMPTY on a text or typed file opened for output only on the VAX
was not allowed.  The file association was incorrect and has been
fixed.
#ITEM()READs from a binary file opened for output only on the VAX were
allowed.  This has been corrected to result in an error.
#ITEM()WRITEs to a text or binary file opened for input only on the VAX were
allowed.  This has been corrected to result in an error.
#ITEM()Reading beyond end of file on a binary file opened with update on the
DEC-10 resulted in an illegal instruction.  The error condition is now
handled properly.
#ITEM()Attempting to do a number of SEEKs on typed files on the VAX sometimes
resulted in an integer overflow.  The problem has been fixed.
#ITEM()Association of a file having a one character name did not work on the DEC-10.
It now works properly.
#ITEM()Typed file reads were reading the minimum size of the type rather
than reading the size needed for a variable of that type.  The 
correct amount of data is now read.
#ITEM()Checking the status of or closing a file after an open failure
sometimes caused unexpected results.  Better checking is now done
to ensure that a file is associated before performing these operations.
#ITEM()A binary file read on the VAX of a flex array now works properly.
#ENDITEM()
#SECT(Compiler failures)
The compiler occasionally failed or reported unexpected assertion failures.
The following improvements have been made:
#BEGINITEM()
#ITEM()Problems with the compiler's register handling caused the compiler to
fail or to generate incorrect code at times.  These problems have been fixed.
#ITEM()The optimizing code generator's recursive processing sometimes
would cause a PDL overflow.  This problem has been resolved.
#ITEM()The statements:
#BEGINFIGURE()
X:=ADDRESS(Y);  Z:=X^;
#ENDFIGURE()
caused the compiler to attempt an illegal memory reference.  It now
works properly.
#ITEM()The compiler attempted an illegal memory reference on the following
sequence of code:
#BEGINFIGURE()
PROGRAM FOO;
EXCEPTION = EX1;
BEGIN  END.
#ENDFIGURE()
since there was no valid definition for the condition declaration.
This is now properly handled by the compiler.
#ITEM()An ENVIRON command specifying a nonexistant environment file is
now handled properly by the compiler.
#ITEM()A SEARCH list specified before a :TARGET or :ENVIRON command now
works properly.
#ITEM()The VAX and DEC-10 code generators reported assertion failures processing
aggregate constructors with trailing flex arrays.  Such constructors
are now properly supported.
#ITEM()ANDIF/OFIF boolean expressions passed as parameters now work
properly.  They did cause assertion failures.
#ITEM()Using a TYPE in an external definition before it had been declared
caused an assertion failure in the VAX code generator.  It now
works properly.
#ITEM()Attempting to pass a varying string to a FORTRAN external
routine no longer results in an assertion failure in the
VAX code generator.
#ITEM()PASS1 of the compiler no longer infinite loops on 
#BEGINFIGURE()
WITH PTR(<expression>)
#ENDFIGURE
#ITEM()An assertion failure no longer results from code like:
#BEGINFIGURE()
READ(<file of X>,<ptr to flex>^:
      SIZE(<ptr to flex>^,LEN))
#ENDFIGURE()
#ENDITEM()
#SECT(Optimizing compiler incorrect code)
The following changes have been made in the optimizing-code generator:
#BEGINITEM()
#ITEM()The call list of a procedure was being built backwards.  It
is now properly generated.
#Item()Incorrect code was generated for "ptr_type(constant integer)".
The generated code is now correct.
#ITEM()The instructions:
#BEGINFIGURE()
X:=Y;
A:=ADDRESS(X);
#ENDFIGURE()
assigned the address of Y to A rather than the address of X.  It now
works properly.
#ITEM()Incorrect code was sometimes generated for some array subscript computations.
Now the array subscripts are handled properly.
#ITEM()Incorrect code was generated for:
#BEGINFIGURE()
<ptr>:=PTR(<integer>-1);
#ENDFIGURE()
The correct code is now generated.
#ITEM()Incorrect code was sometimes generated because of improper handling of registers
which at times caused register 15, the Pascal runtime PDA pointer, to be
overwritten.  The register handling has been improved.
#ENDITEM()
#SECT(Miscellaneous fixes)
#BEGINITEM()
#ITEM()An attempt to read or write a flexible argument from/to a binary file
without specifying an explicit size was not diagnosed as an error by
the compiler.  The compiler now prints an error message when an
explicit size is not given.
#ITEM()PTR:=ADDRESS(procedure name) is now supported by the code generators.
#ITEM()Passing a substring was not always handled properly.  Correct
code is now generated.
#ITEM()Constant aggregate constructors containing arrays sometimes did not
get initialized properly.  They are now handled correctly.
#ITEM()On the VAX, FOR loops containing procedure calls in a main program 
did not work properly.  This has been corrected.
#ITEM()On the VAX, assignment of a longword integer to a packed word field is
now handled properly when the field is unsigned but the expression
is signed.
#ITEM()On the VAX, packed fields in unpacked records are now having their packed
attribute taken into account.
#ITEM()Sign/size information is now correctly set for integer unary
negation and absolute value.
#ITEM()The VAX compiler generated code to compare integer values against
(2**31)-1 and -2**32.  Limits of an arbitrary integer expression
should be the min/max of a machine word on the target machine, not
of the host.  This has been corrected.
#ITEM()Runtime value checks are no longer generated for scalar type conversion
when "/NOCHECK" is specified.
#ITEM()Code for the coercion of an integer to a scalar is now properly
generated for the VAX.
#ITEM()On the VAX, nested WITH statements were sometimes handled incorrectly.
This is fixed.
#ITEM()Use of stack overflow conditions on the VAX will no longer result
in undefined symbols in the link.  The stack overflow conditions
will never be signaled.
#ITEM()On the DEC-10, incorrect code was generated for constructs like:
#BEGINFIGURE()
ORD(A^.B)
#ENDFIGURE()
where B is a pointer into a packed record.  It is now handled properly.
#ITEM()Range checking is now done for <char>:=CHR(<integer>) on the
DEC-10.
#ITEM()The correct code is now generated for the VAX for 
<string>:=CHR(<integer>).
#ITEM()Procedure and function variables were always passed as value
parameters on the DEC-10.  Passing them as VAR parameters
now works properly.
#ITEM()The upper bound word for a flex string parameter on the VAX had
been missing.  This has been corrected.
#ITEM()The compiler will now diagnose references to a non-addressable
flexible non-varying string value parameter when an addressable reference
is required (e.g. ADDRESS(FOO) or WRITE(<binary-file>,FOO)).
#ITEM()Code generation for a call to SEARCH has been corrected.  Incorrect code
had caused certain sets to not be found in any string.
#ENDITEM()
#SECT(Debugger Fixes)
#BEGINITEM()
#ITEM()Use of the [file] option on the .DISPLAY PAGES[module@][file]
command no longer results in an improper termination error when
it is used.
#ITEM()In some cases the stack couldn't be displayed completely after a
program failure.  This has been fixed.
#ITEM()A WITH command is now remembered across single steps.
#ENDITEM()
#ENDLEVEL()
#TOC
