$margin 10 $width 75
$center
$skip 3
Language Enhancement Notes #2
$skip
Exceptional Condition Handlers
$skip
1 July 1980
$skip 4 $need 4
$title left 'LEN-#2' left 'Exceptional Conditional Handlers' left '1 July 1980'
$sect $verb $tab 6
^#.	Introduction
$just $skip $para 5
During the execution of a Pascal program, many exceptional conditions may occur
because of things happening either within the program (e.g., overflow
during an arithmetic operation) or outside the program (e.g., an attention
interrupt).
An exceptional condition handler is any language feature which will
allow programs to detect and respond to exceptional conditions.
$skip $need 2 $para 5
In essence, an exceptional condition handling feature allows a program
to say, "When X happens, do Y".
Details of such a feature answer questions such as:
How does the program specify a particular condition?
How does it indicate the action to take when the condition occurs?
How may such directions be overriden, revoked, reinstated, etc?
In these notes, I'll summarize the way we've dealt with exceptional
conditions in the past, consider some problems and alternatives for a
general exceptional conditional handling mechanism, and
suggest some specific new language features.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Existing Features
$just $skip $para 5
In the past, we've treated exceptional conditions on an &ad hoc& basis.
The only conditions that we have allowed programs to handle are "attention"
(the user hits the "break" key) and "heap overflow" (the program calls "new"
to request a bigger storage block than the allocator can provide).
We have provided special runtime functions for these conditions.
A handler is established by a statement of the form "if on-function() then
handler-action".
The on-function routine records its return address and returns false,
causing the handler-action code to be skipped.
When the condition occurs, the system invokes the on-function routine,
which branches to its saved "return address", this time returning true
to cause the handler-action to be executed.
$skip $need 2 $para 5
This approach has some serious shortcomings.
Each on-function routine is a unique product, so the approach will tend to
be unsystematic and inconvenient to extend.
Any additional flexibility (for example, the ability to stack multiple
handlers for a single condition) must be provided independently for
each condition handler.
Most important, the whole approach is based on
extra-lingual routines which require an intimate knowledge of the runtime
and the language implementation.
Despite these shortcomings, this approach has proven surprisingly satisfactory.
In fact, most of the features I'll recommend below are based on or derived
from it.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Specifying the Condition
$just $skip $para 5
There are two obvious ways of specifying a condition -- with an arbitrary
text string, or with a condition name, declared in a condition declaration.
Allowing a program to specify a condition with an arbitrary text string would
provide a great deal of flexibility and power, even allowing the dynamic
specification of new conditions at runtime.
Requiring that condition names be declared at compile time would provide less
power, but much more safety and discipline.
$skip $need 2 $para 5
I would suggest that each actual condition have an alphanumeric identifier.
In a program, conditions would be referred to by declared condition identifiers:
$skip
\\\\\<condition declaration> ::= &condition& <identifier list>
$skip $need 2
Any use of such a declared condition identifier would refer to the actual
condition with the same name.
This would mean that there would be no need for public and external
condition declarations.
It would also mean that two condition identifiers declared with the same
name would refer to the same actual condition, irrespective of scope
considerations.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Specifying the Handler Action
$just $skip $para 5
The handler action might be specified in several ways.
We might restrict handler actions so that only a goto statement or only a
procedure call could be specified.
We might allow any statement for the handler action, but require that it be
specified in the declaration of the condition (so that a single action would
have to suffice throughout a routine).
Finally, we might allow the handler action to be any statement, and to be
specified when the handler is activated.
This last possibility seems like the most reasonable one.
Restricting handlers to only goto statements or procedure calls would lead to
awkwardness and wouldn't have any real advantages,
and a single handler action for an entire routine would be too inflexible.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Binding the Handler to the Condition
$just $skip $para 5
The question here is how the program may tell the runtime that
henceforth it wants a particular handler action invoked when a particular
condition occurs.
There are three plausible answers.
(1)\ If the handler action were specified in the condition declaration, then
the handler could automatically be bound to the condition throughout the
routine that contained the declaration.
However, we decided in the last section that this would be too inflexible.
(2)\ The on-condition mechanism now documented in the MDSI Pascal Report
calls for lexical binding of handlers.
That is, the syntax is, in essence, "&on& <condition> &do& <handler> &in&
<statement>".
Any occurrence of the specified condition in the
controlled statement or in any routine called from it invokes the handler.
This solution is attractive, but the feasibility of implementing it is
still unclear.
(3)\ A dynamic binding rule would allow the program to bind a handler
simply by saying "&on& <condition> &do& <handler>".
Any subsequent occurrence of the condition would invoke the handler.
This seems like the simplest solution to implement.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Replacement of Handlers
$just $skip $para 5
What happens when one handler has been bound to a condition, and the program
executes an on-statement to bind another handler to the same condition?
At the one extreme, we could allow only one handler for each condition, and
say that the new handler would replace the old one.
This would be very inflexible, and would also mean that when procedure A
binds handler A* and then calls procedure B which binds handler B* and
returns, A* would no longer be in effect, since it would have been
replaced by B*, but B* would no longer be valid, since it would be in an
inactive procedure.
At the other extreme, we could allow any number of handlers for a single
condition, and say that the declaration of a new handler merely pushes
the old handler on a stack, from which it may be retrieved by a "revert"
or "pop_handler" procedure call.
Unfortunately, with no bound on the number of handlers for a condition,
the only place to store the pushed-handler stack would be on the heap,
which doesn't seem good (remember that heap overflow is one of the
conditions we can declare handlers for).
$skip $need 2 $para 5
A good compromise would be to allow only one handler for a condition within
a given routine.
Procedure A could bind A* and then call B; B could bind B*, replacing A*
for the duration of B; and when B returned, A* would become active again.
This compromise allows plenty of flexibility (one
handler at a time per routine should be sufficient), and still allows
a fixed amount of storage to be allocated for handler information in each
stack frame.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Cancelling a Handler
$just $skip $para 5
It is clear that when a routine returns, any handlers which have been
bound in that procedure should be unbound.
Otherwise, the occurrence of the
corresponding condition could invoke a handler in an inactive routine.
We should probably also have a "cancel" procedure to unbind
any handler which has been bound to a specified condition in the
current block.
It should not be possible for a routine to affect any handler bindings
established by its caller.
$skip 2 $need 4
$sect $verb $tab 6
^#.	Continuation after a Handler
$just $skip $para 5
There are three plausible candidates for where execution should continue
following the completion of a handler:
(1)\ The program should continue where it left off when the condition
occurred.
(2)\ Execution should continue with the statement textually following the
handler.
(3)\ The procedure containing the handler should return to its caller.
$skip $need 2 $para 5
Returning to the point where the condition occurred is the most natural
choice.
Unfortunately, condition handlers which could do anything and then jump
back to the interrupted code would create horrible problems for
optimization.
There is also the question of what should happpen when a handler jumps back
to the point where an error has occurred.
Therefore, I would propose that handlers not be allowed to return to the
interrupted code.
In any case, most of the uses of such an ability should be provided for by
the masking operations that I will propose in the next section.
$skip $need 2 $para 5
Continuation with the statement textually following the handler would be
totally unacceptable.
Even though the handler appears textually in the middle of a procedure,
logically it is totally distinct from it.
On the other hand, a forced return from the procedure containing the handler
would be terribly inconvenient.
I would suggest that we allow the handler code to execute a goto out of the
handler, or a return from the containing procedure, but that if control
does fall out the bottom of the handler, then we should automatically
force a return from the containing procedure as a default action.
$sect $skip 2 $need 4
^#.	Masked Conditions
$skip $para 5
To protect critical sections of code, we probably must have some way of
temporarily "turning off" the handling of exceptional conditions.
In addition, since we aren't allowing handlers to return to the point of
interruption, it would be nice to have some way of allowing a condition
simply to set a flag, which could be tested later when it was more convenient.
Following are some considerations for a condition masking feature.
$skip $need 2 $para 5
(1)\ Do you mask a condition or a handler?
I.e., if procedure A masks a condition, and then calls procedure B, which
establishes a handler for the condition, and the condition occurs, is the
condition handled immediately by B's handler, or does the masking established
in procedure A still hold?
Similarly, in the seqence "on\X\do\H1; ...\; mask\(X); ...\; on\X\do\H2",
does the masking established for H1 still hold for H2?
I would suggest that the masking apply only to the current handler, if any,
in the current procedure, and be cancelled when the procedure returns or
establishes a new handler for the condition, and temporarily overridden if
it calls another procedure which establishes its own handler for the condition.
$skip $need 2 $para 5
(2)\ What happpens when a condition occurs while its handler is masked?
What happpens when the masking is removed?
The only reasonable choice is to say that execution simply continues when
a masked condition occurs, but that a note of its occurrence is made
somewhere.
When the condition is unmasked (explicitly, or by returning from the procedure
or establishing a new handler), the condition is immediately "resignalled".
Of course, some conditions represent fatal errors that a program can't
continue after; if one of these occurs while it is masked, the program
will simply have to die.
$skip $need 2 $para 5
(3)\ Can you test for the occurrence of a masked condition?
Can you clear it?
It would clearly be advantageous to be able to test whether a masked condition
had occurred without having to unmask it.
The simplest way to do this would be to have a system function, 
"signalled (condition)", which would return a boolean indicating whether the
indicated condition had been signalled, and would simultaneously clear the
condition (so that if it was unmasked later, no handler would be invoked).
There is no need to provide a separate "clear condition" operation, since
the "signalled" function would provide this service, and its return value
could always be ignored.
$skip $need 2 $para 5
(4)\ Is there some way to mask all conditions with a single command?
Such a feature might be useful.
However, to avoid total confusion, this should be done with a different
call than the normal "mask" operation, and the only way to cancel a
"mask_all" should be with an explicit "unmask_all" (i.e., when "mask_all"
is in effect, no handler can ever be invoked).
$sect $skip 2 $need 4
^#.	Choice of Conditions
$skip $para 5
Obvious standard conditions (which should be predeclared in the standard
environment) include attention, heap overflow, integer overflow,
real overflow and underflow, and division by zero.
We may well want to add others to this list;
while on some machines, the entire list will probably not be available.
$skip $need 2 $para 5
A serious question is whether we should allow user-defined conditions.
The mechanism I have been describing so far would certainly allow them,
and they could be very useful.
For example, the sort of global error exit that is now accomplished by a
call to a public procedure in the main program compilation, which in turn
does a non-local goto back into the main program, could be replaced by
a handler in the main program for a user-defined condition "global_error".
On the other hand, the whole mechanism might be simplified somewhat if
we didn't allow user-defined conditions.
For example, if all condition names were declared in the standard
environment, there woul be no need condition declarations.
$sect $skip 2 $need 4
^#.	Signalling Conditions Explicitly
$skip $para 5
If we have user-defined conditions, we will have to have some sort of "signal"
call to make the condition happpen.
If we only have system conditions, then we won't need such a call.
We probably do need a "resignal" call, which would cause the action that would
have occurred if the current handler had not been in effect when the
current condition was signalled.
$sect $skip 2 $need 4
^#.	Unwinding Routines
$skip $para 5
Consider a fairly common problem:
Routine A calls routine B.
B opens a file or allocates some storage on the heap, and then calls routine
C to do some processing.
C detects an error and does a non-local goto back to A, and the file or storage
is never released by B.
The same problem can occur if an exceptional condition which happens in C
triggers a handler in A.
$skip $para 5
What we need is some way for B to temporarily regain control while the
call stack is being "unwound" from C back down to A, so that it can clean up
after itself.
In effect, we need to be able to define a handler for a condition which
occurs when a procedure is terminated as a result of a non-local goto or a
signalled condition in a lower-level routine.
This is different from a normal handler, however, since its condition is
associated with a specific routine invocation, and the action to be taken
on completion of the handler should always be continuation of the "unwinding"
process, rather than a simple return or goto.
$skip $para 5
Despite these differences, the best way to deal with this problem might be
simply to define a condition "UNWIND", and allow the compiler to know that
handlers for this condition must be treated differently than handlers for
normal conditions.
$page $verb $sect
^#.	Summary
$skip 2
Declarations (optional, for user conditions):

     &condition& <identifier> ["," <identifier>]*

Establishing a handler:

     &on& <condition name> ["," <condition name>]* &do& <statement>

Standard procedures and functions:

     DISABLE (<condition name>)
          - to cancel a handler

     MASK (<condition name>)
          - to mask the current handler for a condition

     UNMASK (<condition name>)
          - cancels MASK

     SIGNALLED (<condition name>): BOOLEAN
          - tests whether a masked condition has occurred,
            and clears it

     MASK_ALL
          - masks all conditions (not handlers)

     UNMASK_ALL
          - cancels MASK_ALL

     ANY_SIGNALLED (): BOOLEAN
          - tests whether any masked conditions are pending

     SIGNAL (<condition name>)
          - causes the named condition (optional, for user
            conditions)

     RESIGNAL
          - activates the next outer handler for the current
            condition
    