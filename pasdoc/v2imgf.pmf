$length terminal
$num off
$control off
$cen
Specification of Image File Format
for #pvm, Version 2.0
$ski 4
$title right '#pvm Image File Spec.' right 'March 31, 1981' right 'Page \'
$tab 9,17,25,33,41,49
$jus
#sect(Introduction)
This document specifies the image file format for the #pvm.
This format is independent of any particular operating system
or file system; this specification is in terms of
a stream of bytes, which may be represented in different
ways on the host machine and on each target machine.
#numsect(1,Basic Elements of an Image File)
A <:&byte&:> is an 8-bit integer quantity, which may be interpreted
as an unsigned value in the range 0..255, or as a two's complement
signed value in the range -128..127.
$ski
The image file is an ordered sequence of bytes, each of which has a
<:&file address&:>; the bytes' addresses are consecutive integers, starting
with 0.
$ski
A <:&word&:> consists of two contiguous bytes, which may be interpreted
as an unsigned value in the range 0..65535, or as a two's complement
signed value in the range -32768..32767.
The first byte (with the lower file address) holds the most
significant part of the word.
$ski
A <:&longword&:> consists of four contiguous bytes, which may be considered
as an unsigned value in the range 0..4294967295, or as a two's complement
signed value in the range -2147483648..2147483647.
The first byte (with the lowest file address) holds the most
significant part of the longword.
$ski
A <:&block&:> of the image file consists of 512 contiguous bytes,
starting at a <:&block boundary&:>, which is a file address
evenly divisible by 512.
Note that an image file block is the same size as a
#pvm <:&page&:> (see [2]).
Image file blocks are numbered sequentially beginning with zero.
#numsect(1,General Structure of an Image File)
As explained in [2], an image file contains the initial
contents of #pvm memory and the initial #pvm state.
The information contained in the image file is:
$ski $ind 7
$par -2
-\the initial instructions and data in the image
$par -2
-\the initial contents of all registers
$par -2
-\the initial contents of the condition codes
$par -2
-\a list of all initially accessible pages and their attributes
$par -2
-\descriptions of overlay areas in the image
$par -2
-\identification of the linker, link time, and image's
#pvm version.
$ski $ind 0
All these items except the first are contained in a structure
called the <:&image header&:>, which occupies one or more
whole blocks at the beginning of the image file.
The initial instructions and data are contained in the blocks
in the rest of the image file.
#numsect(1,Image Header)
The image header contains the following fields:
$ski $ver
<:&offset&	&size&	&contents&:>
0	2	number of blocks of image header
2	2	#pvm version number
4	16	image name (first byte is character count)
20	2	linker version number
22	18	link time "dd-MMM-yy hh:mm:ss"
40	2	image file block number of floating-point address list
42	72	initial R1-R15,FP,SP,PC
114	2	initial condition codes
		(N, Z, C in bits 0, 1, 2 respectively)
116	2	number of Image Section Descriptors (ISDs)
118	2	file address of first ISD
120	2	number of Overlay Area Descriptors (OADs)
122	2	file address of first OAD
		ISDs
		OADs
$ski $jus
Each ISD has the following fields:
$ski $ver
<:&offset&	&size&	&contents&:>
0	4	image file block number of first page
		(field = 0 --> image section is "demand zero")
4	4	number of pages
8	4	base virtual address
12	4	flags:  bit 0 = 1 --> writable,
			bit 1 = 1 --> executable
$ski $jus
Each OAD has the following fields:
$ski $ver
<:&offset&	&size&	&contents&:>
0	4	area identifier
4	4	number of pages
8	4	base virtual address
12	4	flags (none currently defined)
$jus
#numsect(1,Image Contents)
After the image header, starting on a block boundary,
the initial contents of the image are stored in the
image file as they would appear in memory.
Since the linker will tend to produce a few groups of
pages, each of which contains pages with the same attributes,
the size of the image file can be reduced by using one description
for each group, rather than each page, in the following way.
$ski
An <:&image section&:> is a group of pages, contiguous
in virtual address space, with identical attributes (writability,
executability).
Image sections are described as a unit in the image header;
these descriptors include file address, size, virtual address,
and attributes.
If the image section is writable and initially all zero, its initial contents
may be omitted from the image file.
It is then called a <:&demand zero&:> image section;
pages of the section will be created at runtime,
filled with zeroes, as they are first referenced.
#numsect(1,Overlays)
Each overlay area used by the program has an OAD in the
image header, specifying the area identifier, size and
base address of the area.
This information may be used by the interpreter in its
overlay handling.
$ski
The initial contents of an overlay are not included in
the main image file; overlays are linked and updated
separately from the main program.
However, the overlay's "image" file has the same format
as a program image file, although the initial register and condition
code fields are ignored, and there must be no OADs.
These overlay files will presumably be stored in
separate image files on the target system; however, different
#pvm implementations are free to use different means of
organizing these files.
#numsect(1,Floating-Point Address List)
To allow #pvm implementations the option of using hardware
floating-point operations, the image file format contains
an optional section listing the addresses of all floating-point
constants in the image.
If the linker produces this list, it can be used by a
program on the target machine to change the constants stored
in #pvm floating-point format to its hardware format.
This list begins on a block boundary and is pointed to
by a word in the image header.
It consists of a longword specifying the number of entries
in the single-precision list, followed by a longword list entry
for each single-precision real number giving the file address
of that number.
This list is immediately followed by a longword specifying the
number of entries in the double-precision list, followed by
a similar list for the double-precision real constants in the
image file.
This list is immediately followed by a longword specifying the
number of entries in the floating immediate list,
followed by a longword list entry for each floating
immediate operand.
The floating immediate list entries give the address of the first
byte of the instruction containing the floating immediate operand.
#pagsect(References)
$ski $jus
$ind 9
$par -5
\1.\\Digital Equipment Corporation.  "VAX-11 Linker Reference
Manual", 1978.
$par -5
\2.\\Gorgen, D.\P.  "Specification of #pvm Version 2.0",
2/17/81.
