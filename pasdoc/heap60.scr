$num off
$title right 'PASCAL-10 Dynamic Memory Management/\' right 'February 28,1979'
$page
&Overview&
$ski
Memory is dynamically allocated in PASCAL-10 via the intrinsic function NEW
in an area of low segment storage known as the &heap&.
For program portability, maintenance of the heap by the
PASCAL runtime is transparent to the user program. The only machine-dependent
restriction encountered by programs is the &maximum& heap size
imposed by the operating system
and/or machine architecture. On the PDP-10 this is essentially the maximum low segment size.
$ski
Most PASCAL implementations, including ours up to now, provide
only one heap management discipline at runtime.
If this discipline is ill-suited to a program, or if the
maximum heap size is too small under the discipline,
the programmer must devise his own solutions,
often compromising program portability.
The PASCAL Dynamic Memory Management Facility solves this
problem by allowing a programmer to select from several
disciplines the one which best satisfies the requirements
of his program.
The discipline is selected at compile-time, and requires
either no or minimal source program changes.
Where changes are required, they are fundamentally machine-independent
and readily localized.
Hence, program portability is always preserved.
$ski
If the maximum heap size is sufficient, it is often desirable
to make a trade-off between the speed of allocation
and utilization of available storage.
The PASCAL Dynamic Memory Management Facility allows programmers
to select between two algorithms if their heap will fit into
available memory.
One is computationally efficient, and is the default, while the
other is storage efficient, and is often preferable if 
the heap approaches its maximum size.
These options are detailed in section 2.0.
$ski
Should dynamic storage requirements exceed available storage there is little
alternative to the use of a "backing store" or temporary file to contain
portions of the heap not "in-core."
The fundamental differences between strategies utilizing a backing store
are the method of partitioning the data into "swappable" segments
and the manner of swapping these segments.
The most effective strategy is to partition the data into (a few)
segments such that only a subset of these need be in core
at any one time, and then to have the program determine
which segments need be in.
If such a partitioning cannot be devised, or if the partitions become
too numerous or too small, the best solution is a software
virtual memory system.
The PASCAL Dynamic Memory Management Facility provides two
algorithms utilizing a backing store to extend the apparent heap size.
In one, swapping is under program control, while in the other,
it is automatic.
To partition the heap for swapping, the concept of &areas& has been introduced.
$ski
The heap may be considered a collection of distinct areas or sub-heaps
with independent allocation and deallocation within each. This provides a 
mechanism by which a program may &partition& dynamic storage and group
related data in separate areas. If at some point in a program's execution
it can be determined that none of the data in a particular area will be
required for a while, the area may be swapped out to the backing file
and the in-core storage it previously occupied made available for
other areas. Thus the total size of the heap, including areas
which are in-core and those which are not, may exceed available
in-core storage.
$ski
The decision to swap an area in or out is a high-level one requiring
a knowledge of the phases of a program's execution as well as the operation
of the area management facilities. Since this is a machine-dependent
operation such decisions should be isolated from the remainder of the
program to maintain portability.
$ski
If any one area exceeds the available storage, or if the program's data
structures are so interwoven that there is no natural partitioning into areas,
or if the program flow is such that
localized area swapping is inappropriate, then
a full &virtual& heap may be used. The virtual heap may also be
partitioned into distinct areas; however, all areas will be active and
accessible at all times.
The memory management system automatically reads portions of areas into
memory when they are referenced, and writes them back out to the
backing store when memory space is needed for other portions.
$ski
The primary benefit of the virtual heap is that area sizes are not
constrained by the available memory (in this implementation, the
virtual heap can grow to a size overflowing a disk pack).
 Generally, swapping to the
backing file is increased and more address translations are necessary
with this automatic scheme since when areas are
explicitly swapped by the program, certain addressing
optimizations are performed by the compiler.
$ski
As a side benefit, areas may be saved in permanent files for access by other
programs. It is possible to load
and save the entire heap as well as individual areas.
Thus a program which executes in fairly distinct stages can be split into
several smaller programs or "passes" which execute sequentially, each pass
loading and modifying the common heap. This separation will also serve to 
reduce compilation costs and program size and to facilitate debugging.
$ski 2
1.0\&Introduction&
$ski
The four heap management facilities detailed in this document are upward
compatible with existing PASCAL-10 programs, i.\e., a current PASCAL program
can be made to run under any of these systems merely by recompiling with the
appropriate option. Furthermore, all work with overlaid programs as well as
the debugger.
The only additional restriction is that when using
either of the backing store schemes, the
debugger will not allow the user to modify the value of a pointer.
$need 5
$ski 2
2.0\&Compiler options&
$ski
Each of the four heap management facilities is selected by a compiler option
which should be specified from the command line or on a
   $OPTIONS directive preceding all declarations and code.
Certain of the options are
mutually exclusive among the compilations of a single program, and a
runtime error will occur if two or more modules are compiled
with different options.
$ski
The so-called quick-fit algorithm, selected by the option ALLOC 0, is fairly fast at
the expense of some storage fragmentation.
ALLOC 0 is the default option assumed by the compiler
if nothing is specified.
 If speed is desired the default
 should be used. A modified first-fit algorithm is specified by
ALLOC 1 and is somewhat slower but provides more effective storage utilization.
Only one of the modules in a PASCAL program
(preferable the one containing the mainline) need be compiled with
ALLOC 1 to select the first-fit option for the entire program,
 since the emitted code is
identical for each, and only the library search is modified.
$ski
"In-core" areas, i.e., areas swapped by the program,
are selected by the INCORE option and the full virtual heap
by the VIRTUAL option. Unlike the ALLOC options, if &one& module of a program
is compiled under the INCORE or VIRTUAL options then
 &all& must be compiled under the &same& option.
Most operations on areas are applicable under both options.
$ski2
3.0\&Creation of and allocation within areas&
$ski
With a single exception an area must be explicitly created before it is used.
Since each area is distince, the runtime assigns a unique,
integer-compatible &areaid& when the area is created via
$ski
$par 10
areaid := AREA_CREATE().
$ski
The areaid is required in most operations on the area and should not be
modified by the program.
$ski
The area in which a block is to be allocated may be specified in a call to NEW:
$ski
$par 10
NEW (areaid, pointer {, variant-tag ...}).
$ski
A runtime error will occur if the specified area has not been previously created.
Information sufficient to identify the allocated block and its area is stored in
the pointer. If no areaid is given in the call to NEW the block is allocated in
a &default& area which is separate and distinct from all other areas. Subsequent
access to this block is as usual, i.e., through "pointer^". This &dereference&
of the pointer causes an address translation prior to the actual load or store of the data.
Since pointers contain information which identifies the associated area,
blocks are freed merely by DISPOSE (pointer).
$ski
$need 3
An area may be destroyed by
$ski
$par 10
AREA_DELETE (areaid).
$ski
Storage previously occupied by the area is made available for
allocation among other areas. Deleting an area is also a convenient way
to dispose of a large number of blocks &en masse&.
Finally, deleting an area invokes a routine to contract the low
segment, i.e.\to return free space at the end of available storage to the
operating system.
$ski 2
4.0\&Operations on INCORE areas&

$ski
An INCORE area may be made "inactive" or moved from core to the swapping file by calling
$ski
$par 10
AREA_OUT (areaid).
$ski
The in-core storage it previously occupied will be reallocated as required.
No reference should be made to blocks within the area until it is reactivated by
$ski
$par 10
AREA_IN (areaid).
$ski
In full VIRTUAL mode AREA_IN has no effect and AREA_OUT provides a minor
efficiency improvement.
$ski
In both INCORE and VIRTUAL schemes the number of words currently allocated to
an area may be determined by calling
$ski
$par 10
i := AREA_EXTENT (areaid).
$ski
This is appoximate since it does not include the size of the tables kept by
the runtime, but may be useful in determining whether or not an area should be swapped in or out.
$ski 2
5.0\&Loading and saving areas&
$ski
An area is saved on a file by:
$ski
$par 10
AREA_SAVE (areaid, filename)
$ski
where "filename" is a string. In the INCORE case the area must be &in& before the save. Similarly,
$ski
$par 10
AREA_LOAD (areaid, filename)
$ski
reads a saved area from the specified file into the specified area, which must have
been previously created. With INCORE areas the loaded area is &out& and a call to 
AREA_IN is required before reference to any block within the loaded area. If most
or all of the areas are to be saved and loaded it may be simpler and more
efficient to load and save the entire heap at once.
$ski
$par 10
HEAP_CREATE (filename: string; preserve: boolean)
$ski
is called to initialize the file named by the string as the swapping file. If
used, HEAP_CREATE should be called before AREA_CREATE or NEW since any
previous allocations on the heap are lost. If &preserve& is false this file
is deleted on normal program termination. If, however, preserve is true
the contents of the heap are written to  the file on program termination and
the file is closed. This enables other programs to use the &same& heap by calling
$ski
$par 10
HEAP_LOAD (filename: string; preserve: boolean).
$ski
Again, any previous allocations on the heap are lost and preserve determines
whether the file is to be deleted at the end of the run.
A heap formerly loaded or created by HEAP_LOAD or HEAP_CREATE is
closed down when another HEAP_LOAD or HEAP_CREATE is issued. Further,
the old heap is saved or deleted according to its corresponding
preserve option when it was loaded or created.
The default swapping file may be thought of as having been created
with no preserve option.
Finally, loading or creating a heap involves the use of the heap file as
the new swapping file, so the user must have write access.
In fact, the HEAP_LOAD involves several write operations, and 
on abnormal program termination (including breaking out),
the heap file is &not& restored to a loadable state.
$ski
At any point it is possible to preserve in a file the current state of the heap by calling
$ski
$par 10
HEAP_SAVE (filename: string).
$ski
In the INCORE case all areas are &out& after the save and must be reactivated by
AREA_IN before they are again referenced. The status of the swapping file
specified by an earlier HEAP_CREATE or HEAP_LOAD, if any, is otherwise unchanged.
HEAP_SAVE serves as a mechanism for &checkpointing& a program at intermediate
stages of execution. If desired, the state of the heap could be restored (after
an error, for example) by loading a copy of a saved heap.
$ski 2
6.0\&Offsets&
$ski 2
When an area is loaded from a file, a "naming" problem may occur since the
area's new areaid may not be the same as its original one.
As a result, pointers to nodes
within the area (&intra&-&area& pointers) as well as to nodes in other
areas (&inter&-&area&) may contain incorrect area identifications. 
Thus, every pointer in the newly loaded area must be found and coerced
with the POINTER function (described later) to indicate the new areaid.
This usually involves a complete walk of the structure,
 starting with the first block
and following all intra-area pointers, often a non-trivial task.
To alleviate this problem with &intra&-&area& pointers a new pointer type
known as an &offset& has been introduced:
$ski
$ind 10
<offset type> ::= '@' <type decl>
$ski
$ind
An offset is a virtual pointer without area identification and is assumed
to address storage within the area in which the offset occurs. Hence
offsets in a saved area are valid regardless of the areaid assigned on retrieval.
Offsets and pointers are completely compatible and implicit conversions
on assignment or dereference are performed as necessary. Of course,
assignment of a pointer in one area to an offset in another is meaningless
and will be diagnosed if runtime checking is in effect. 
Offsets in static or local storage generally serve no purpose whatsoever and will seldom be used.
$ski
Normally pointers and offsets are stored in full PDP-10 words. However,
an offset which is an element of a &packed& record or array is assigned to
a halfword, limiting the possible virtual address to the first
262,144 words of the area. If this limit will be exceeded packed
offsets should not be used.
$ski
Offsets should eliminate the  naming problem for most applications since most
 saved areas should be "self-contained," i.\e., without pointers to other areas.
Use of offsets and the careful partitioning of data structures among separate
areas will minimize the need to coerce pointers 
when saved areas are loaded.
$ski
To provide compatibility between the various dynamic memory
management options, '@' is treated as equivalent to '^' in
type declarations in ALLOC 0 and ALLOC 1 compilations.
$ski 2
7.0\&Area roots&
$ski
Pointer linked data structures generally have a single head or
&root& node which links to other elements of the structure. An example
is the root of a binary tree. During creation of such a structure
the program can maintain a pointer to the root  in static or
local storage.
If the structure were defined in an area which was saved, when the area was loaded
the virtual address of the root node would not be known. To avoid
this problem  a pointer to a "root" node may be stored with the area.
Before writing an area to a file, the program should call
$ski
$ind 20
SETROOT (pointer)
$ski
$ind 0
to identify the root. After reading an area, the function
$ski
$ind 20
ROOT (areaid)
$ski
$ind 0
returns the specified area's root pointer.
$skip 2
$need 6
8.0\&Runtime checks&
$ski
If the CHECK option is in effect runtime errors are detected on the 
following conditions:
$ski
$ind 3
(1)\Dereference of a "nil" or uninitialized pointer or offset.
$ski
(2)\Assignment to an offset of a virtual address in an area other
than that containing the offset.
$ski
(3)\Assignment to a packed offset of a virtual address which cannot
be stored in a halfword.
$ind 0
$ski 2
9.0\&Miscellaneous Conversions&
$ski
As described previously, coercion of areaids as well as other conversions
of pointers may be required. To this end the following functions
are provided:
$ski
AREAID (pointer or offset)
$par 5
returns the areaid of the area into which the pointer or offset references.
$ski
OFFSET (pointer)
$par 5
returns the pointer's offset in virtual space &without& area identification.
$ski
POINTER (areaid, offset)
$par 5
constructs a new pointer to a data item within the specified area, with
the given offset. A pointer may be used rather than an offset to
change the area referenced by the pointer. This may be required
for full pointers in saved areas.
$ski
It is useful to observe that, if "P" is a pointer, P is precisely
$ski
$ind 5
POINTER (AREAID(P),OFFSET(P))
$ind 0
$skip 2
10.0\&Limitations and precautions&
$ski
There are several limitations of VIRTUAL mode. Programs generating pointer 
values through mechanisms other than the intrinsic routine NEW are not
likely to work with areas. At present, parameter addresses of storage
on the virtual heap will not be correctly interpreted by PASCAL routines
not compiled in VIRTUAL mode, PASCAL-callable MACRO routines, and FORTRAN
routines, though these &will& work with INCORE areas. This results from the
fact that virtual addresses are passed from the calling program in VIRTUAL
mode, while such routines expect core addresses to be passed
(parameter addresses are translated to actual core addresses by INCORE
programs before the call, so this problem does not occur).
Thus programs calling RDLIB, IOLIB, MACRO, and external FORTRAN
routines with parameters on the heap may not work correctly in VIRTUAL
mode, though all &intrinsic& compiler routines (SIN, RANDOM, LOG, WRITE, etc.)
work in VIRTUAL and INCORE programs. For the moment, such VIRTUAL programs
should be modified to copy data from the heap to static or local storage
before passing it to such routines.
$ski
Several solutions to this problem are under consideration, one of which is
an extension to the OPTIONS syntax of the new compiler which would
identify the declared procedure or function as a LIBRARY routine requiring
translated addresses:
$ski
$par 10
EXTERNAL PROCEDURE PRGM_PPN (VAR INTEGER) OPTIONS LIBRARY;
$ski
Comments on this proposal are invited.
$ski
There is an unavoidable &caveat& witpect to the manual swapping
of areas.
Because of the translation timing of the INCORE scheme mentioned above,
the user must be certain &never& to perform an AREA_OUT
under the following circumstances: (1) within a WITH statement
whose dereferenced pointer points into the area swapped out;
(2) within a subroutine having a parameter referring to the 
swapped-out area; (3) within a subroutine called in a statement meeting either
of the above.
  @fK