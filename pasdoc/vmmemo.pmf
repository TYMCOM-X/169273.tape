$control off
#memo(A.\Kortesoja,"<:D.\Gorgen, S.\Roush:>,"<:February 29, 1980:>,&
Choice of basis for architecture of MDSI Pascal Virtual Machine)
$tab 9,17,25,33
$jus
#sect(Introduction)
The selection of an architecture for MDSI's Pascal Virtual Machine
will be made on the basis of three criteria:
$ind 5
$ski $par -2
o\<:&Appropriateness&:>, as an object language for MDSI Pascal,
and as a language for interpretation on the planned target computers.
$ski $par -2
o\<:&Compactness&:> of the object representation of Pascal programs.
$ski $par -2
o\<:&Cost&:> and effort required to implement the various support
tools (cross-compiler, loader, interpreters, etc.) which will be needed.
$ind 0
$ski
The motivation for the first criterion is obvious.
The second arises from the cramped program address spaces (32KW)
of the initial target computers (Series-II minicomputers).
The third results from our strong desire to validate (in terms
of performance, storage requirements, etc.) the virtual machine
approach as quickly as possible.
$ski
The References contain a list of literature studied
in the process of choosing the basis for the Virtual Machine.
Section A lists previous MDSI memos on this subject.
Section B lists documentation describing several P-code machines,
including MDSI's version; these P-codes are discussed
further below.
Section C lists various references on the general topic of
computer architectures, and space-efficient architectures in
particular.
[9] and [12-16] contain information on language-directed
architectures, and [10-16] contain information on space-efficient
architectures; the chapter on architecture optimization in [12]
is particularly salient.
Section D lists discussions of machine-independent languages
as output from language processors.
[17] discusses an intermediate language, ICE, for compilation
of BCPL, a typeless systems programming language.
It is designed to be succinct in terms of number of instructions
generated for a program, and to be either macro-translated to
a target machine's assembly code, or to be encoded as an
instruction set for a 16-bit machine.
[18-19] are not as directly useful as the articles in section
C, since they discuss languages that must be translated into
the target machine language rather than interpreted on that
machine, and therefore need not be efficient in themselves.
([4] and [6] describe P-codes of this type.)
The sections on STAGE2 in [20] describe the postprocessor
assumed by [18].
$ski
[9] and [12] are good collections of architecture descriptions
(although [12] includes no "conventional von Neumann" architectures).
However, they provide no descriptions of architectures
that could provide a basis for a Virtual Machine
architecture reasonably satisfying the three criteria above.
Therefore, we have taken the first criterion of
"appropriateness" to limit us to a choice between
so-called "P-code" architectures (of which several examples exist
for compilation of Pascal, most of them interpreted by software)
and modifications of the VAX-11 architecture (for which we have already
successfully produced a cross-compiler).
Both of these architectures seem to be easily simulated on
byte-addressable minicomputers.
The rest of this memo is concerned mainly with applying
the latter two criteria to these choices.
#sect(P-code architecture)
P-code architectures are stack machines whose operators
are designed to express Pascal programs efficiently.
It is therefore reasonable to assume that a P-code
architecture that would work well for the MDSI Pascal dialect could be
based on one of the existing P-codes.
In fact, at least where expression evaluation is concerned,
P-codes do quite well for Pascal:  besides the usual arithmetic
operators, there are P-codes for pointer dereferencing,
array and record indexing, etc.
However, control structures are not represented as well:
besides a conditional jump based on a boolean on the
top of the stack, and a Mark Stack operation, the control instructions
resemble those of any minicomputer.
Furthermore, [12](p.48) cites several studies which indicate
that typical expressions are almost always simple references or single-operator
expressions, and that stack loading and
unloading overhead outweighs the savings of zero-operand
stack instructions "in actual rather than contrived situations."
$ski
We examined six P-code architectures to determine their
suitability for extension to cover the non-standard language
features in MDSI Pascal.
These included the original 'P' Compiler P-code [5]
and two others derived from it, namely
the P-code implemented at MDSI for the TI980 cross compiler [4]
(which accepts the MDSI Pascal language as it was three years
ago),
and UCSD P-code [7].
MDSI P-code attempted to improve on the machine architecture
of the original;
it was defined only as an intermediate language,
and was translated by a special program into TI980 object
code.
UCSD P-code was intended for microcomputers and was
therefore designed to be space efficient.
We also looked at three P-codes derived from the UCSD version:
Western Digital's P-code [8] and Three Rivers' "QCode" [3],
both implemented in hardware,
and U-code [6], a "universal" P-code defined as an intermediate
language into which many P-codes can be mapped, and designed
to provide enough information for extensive optimization
to be possible.
U-code was developed at UCSD.
$ski
The following tables summarize the features supported and
limitations imposed by these P-codes:
$ver
$ski $need 10
Non-standard        |Original| MDSI | UCSD |West. Dig.|3Rivers|
Language feature    | P-code |P-code|P-code|  P-code  | QCode |U-code
--------------------+--------+------+------+----------+-------+------
Strings             |   No   |  No  |  Yes |    Yes   |  Yes  |  No
"Flex" arrays       |   No   |  No  |  No  |    No    |  No   |  No
Separate compilation|   No   |  Yes |  Yes |    Yes   |  Yes  |  Yes
Structured function |   No   |  No  |  No  |    No    |  No   |  No
  values            |        |      |      |          |       |
Packed structures   |   No   |  No  |  Yes |    Yes   |  Yes  |  No
Packed scalars      |   No   |  No  |  No  |    No    |  No   |  No
$ski $need 4
                    |Original| MDSI | UCSD |West. Dig.|3Rivers|
Language limits     | P-code |P-code|P-code|  P-code  | QCode |U-code
--------------------+--------+------+------+----------+-------+------
Set size            |   ?    |  64  | 4080 |   4080   | 4080  |  ?
$ski $need 4
                    |Original| MDSI | UCSD |West. Dig.|3Rivers|
Architectural limits| P-code |P-code|P-code|  P-code  | QCode |U-code
--------------------+--------+------+------+----------+-------+------
Address size (bits) |   16   |  NA  |  16  |    16    |  20   |  NA
$jus
$ski
The only actual P-code compiler available to us is the MDSI
TI980 cross-compiler, which produces an ASCII representation
of the P-codes and their operands.
This compiler is actually quite similar to the 'P' compiler
itself, with changes made to accommodate the
differences in the input language and the differences
in the P-machine for which it generates code.
We used this compiler to measure sizes of actual programs
by writing a program to process the P-code file,
assigning a given number of units to each opcode and type
of operand and summing these numbers for the file.
This approach gave us the flexibility to change these
assignments and observe the effect on program size.
$ski
These measurements were made on three modules from old versions
of QEDX and SCRIBE (lack of such features as STRINGs made conversion
of other modules too difficult).
The results are summarized below.
They are given in terms of the "size change factor" defined in [2].
The modules are compared to the output of the new Pascal-10 compiler.
All compilations are with optimization, checking, tracing and debugging
turned off.
$ver
$ski $need 15
      |      | P-10|   TI980   |2-byte addr|3-byte addr|4-byte addr
Module| Area |Words|Bytes| SCF |Bytes| SCF |Bytes| SCF |Bytes| SCF
------+------+-----+-----+-----+-----+-----+-----+-----+-----+-----
DOSCRI|code  | 2706|12146| 2.24|10293| 1.90|11848| 2.19|13404| 2.48
      |const |  128| 1176| 4.59| =TI | =TI | =TI | =TI | =TI | =TI
      |static|  967| 3830| 1.98| =TI | =TI | =TI | =TI | =TI | =TI
      | Total| 3801|17152| 2.26|15299| 2.01|16854| 2.22|18410| 2.42
QEDX  |code  | 3316|14184| 2.14|12951| 1.95|14835| 2.24|16719| 2.52
      |const |   89|  760| 4.27| =TI | =TI | =TI | =TI | =TI | =TI
      |static|  101|  762| 3.77| =TI | =TI | =TI | =TI | =TI | =TI
      | Total| 3506|15706| 2.24|14473| 2.06|16357| 2.33|18241| 2.60
S     |code  | 1171| 3944| 1.68| 3948| 1.69| 4526| 1.93| 5104| 2.18
      |const |    4|    0| 0.00| =TI | =TI | =TI | =TI | =TI | =TI
      |static|    0|    0| --- | =TI | =TI | =TI | =TI | =TI | =TI
      | Total| 1175| 3944| 1.68| 3948| 1.68| 4526| 1.93| 5104| 2.17
$jus
$ski
The column headed "P-10 words" is in units of 36-bit words;
all other sizes are in bytes.
The "SCF" is the given number of bytes, divided by 2
(yielding 16-bit words), divided by the corresponding number of
36-bit words.
The column headed "TI980" gives actual TI980 memory occupied
by the translated P-code.
The other three columns give bytes of P-code counted according
to three different assumptions:  that the average amount of space
occupied by a branch or entry address, or an offset into the
static area or a stack frame, is two, three or four bytes respectively.
The other elements of the P-code (opcodes, data type sizes, etc.)
are assumed to take the minimum number of bytes necessary to
hold the largest possible value, or to represent the same range
of values permissible in Pascal-10.
$ski
Since all references to external symbols as
labels or offsets must be allocated
the full size of a virtual address (even though, when linked,
a shorter size may suffice), the three-byte average displacement
size seems most reasonable on which to base estimates.
Accordingly, we see that the size change factor for
modules as a whole ranges from 1.93 to 2.33 --
not extremely impressive considering that a value of 2.25
means the number of bits in the P-code version equals
the number of bits in the Pascal-10 version.
On the other hand, the Pascal-10 compiler works considerably
harder than this compiler at generating good code.
However (counting against the P-code), it is likely that there is a lot less
room for optimization in the rather restricted stack architecture
of the P-machine than in a general-purpose architecture
with such niceties as accumulators and index registers.
For instance, register allocation is not a useful idea in a
stack machine, and common subexpression elimination in the P-machine is
not as effective as in a register machine.
Note that the Pascal-10 optimizer was not used for these comparisons.
$ski
Furthermore, we must consider what extensions are necessary
to, say, the MDSI P-code, if we are to support MDSI Pascal in full.
We must distinguish between extensions that can be handled
by compiler features only, and extensions that require
extension of the P-machine itself for efficient implementation.
Of the six non-standard language features used above in
comparing the different P-codes, it appears that strings,
packed structures and packed scalars are in the second class.
These will probably not affect the size of currently
compilable code; however, handling sets with up to at least 128
elements, which MDSI Pascal allows, may have an impact
on the size of some P-code programs that are currently
compilable.
#sect(Modified VAX architecture)
DEC's VAX-11/780 architecture is a 32-bit byte-addressable
virtual memory machine.
Its instructions are of varying lengths, with opcodes one byte
long, and with zero to six operands, each consisting of one
operand specifier byte optionally followed by one, two or four
bytes of displacement or immediate data.
Its repertoire of instructions is quite flexible, allowing
for hardware manipulation of many data types.
It can be judged as suitable for compilation of Pascal
since the Programming Languages group has recently
implemented a cross-compiler for it from the DEC-10.
Furthermore, since it is a (greatly) extended version
of the PDP-11 architecture, it is a reasonable candidate for
simulation by byte-addressed minicomputers.
However, simulating its full instruction set would be
neither practical (the simulator would be huge)
nor interesting (some data types and operations are of
no use to non-business, non-operating system programs).
Also, there are many opportunities to improve the
interesting subset of the architecture if it is to be
the target of Pascal compilations that must take up
minimum space, as well as opportunities to improve the
cross-compiler by itself.
$ski
Size measurements were made for modules compiled with
the VAX cross-compiler under the same conditions as
with the P-code measurements.
In addition to DOSCRI, QEDX and S, four DESIGN modules
(DESPLT, MAPSTR, MTHCEP and MODRSP) and five ANC modules
(IOMGR, STRUC, SUBSYS, BASIC and CFORM) were compiled.
The results were:
$ver
$ski $need 23
      |      | P-10| VAX Pascal
Module| Area |Words|Bytes| SCF
------+------+-----+-----+-----
DOSCRI|code  | 2706| 9063| 1.67
      |const |  128|  583| 2.27
      |static|  967| 3832| 1.98
      | Total| 3801|13478| 1.77
QEDX  |code  | 3316|10513| 1.59
      |const |   89|  408| 2.29
      |static|  101|  466| 2.31
      | Total| 3506|11387| 1.62
S     |code  | 1171| 2548| 1.09
      |const |    4|    0| 0.00
      |static|    0|    0| ---
      | Total| 1175| 2548| 1.08
4 DES |code  | 4565|13900| 1.52
files |const |   59|  142| 1.20
      |static|    0|    0| ---
      | Total| 4624|14042| 1.52
5 ANC |code  | 6871|22763| 1.66
files |const | 1632| 7829| 2.40
      |static|  420| 2992| 3.56
      | Total| 8923|33584| 1.88
$jus
$ski
To begin with, the VAX cross-compiler does better than
the P-code compiler, with overall module SCF's ranging
from 1.08 to 1.88.
Also, the compiler already handles MDSI Pascal in full
(with three minor exceptions:
ordinal values of set elements must be in the range 0..127,
composite expressions are not allowed except in declarations,
and generic arrays are not supported).
Finally, there are many possible improvements that can be
made to the compiler and to the machine for which it generates code,
if our purpose is to define a Pascal-specific machine.
The next three sections discuss possible improvements in detail.
#sect(Improvement of VAX code generated)
There is a great deal of room for improvement in the quality of the
code generated by the existing VAX cross-compiler.
Some of this improvement could only be realized via a code generator
which worked in conjunction with the Pascal optimizer routines.
The benefits possible via an optimizer will not be discussed here,
except for mention of the following two points.
First the existing code generator already works harder at generating
locally high quality code than the old Pascal PDP-10 compiler.
Thus the 30% code size improvement achieved with the optimizer
would probably not be achieved with the VAX cross-compiler.
Second, the VAX does have the advantage that optimizations which
produced only a speed advantage on the PDP-10 will produce a space
advantage as well on the VAX.
For example, more intelligent usage of registers is particularly
valuable on the VAX since register addressing requires only a single
byte to specify.
$ski
A second approach to improving the quality of the VAX code generated
would be simply to improve the quality of the local code generated.
There are a large number of improvements possible which fall into this
category.
Taken individually, any of these changes would produce very modest
code size reductions.
In aggregate the improvement would probably be substantial, but
is difficult to quantify <:&a priori&:>.
A disadvantage to this approach is that a large number of distributed
changes are required.
$ski
A third category of possible improvements will be considered in more
detail.
These changes are particularly attractive because they offer the
potential for a fairly large payoff with relatively minor changes
to the VAX code generator.
The first two techniques attempt to reduce the number of large
operand specifiers.
Operands on the VAX range in size from one to five bytes.
Five byte specifiers include references to the constant area,
the static area, external data references, external procedure
references and runtime routine references.
Static area references are currently done via longword displacements
off the program counter.
An alternative would be to load the address of the relevant static
area into a register on entry to a procedure.
The variable could then be referenced via a known, and generally
small, offset from the register.
The percentage reduction in code size achievable via this technique
was determined with a program which read the assembly listing
files of the sample programs.
The percentage improvement was calculated based on the actual size of
the displacement into the static area for each reference.
The assumption was made that a static area register would only be used
if it actually resulted in a reduction in the code size (for byte
displacements, this requires three or more static area references).
The code size reductions possible ranged from zero to 6.7%.
The sample of DESIGN programs contained no static area references
and thus would not benefit at all from this technique.
Three of the five ANC modules also would not benefit at all.
The remaining two ANC modules would be reduced in size by 0.7%
and 5.4%.
For the three miscellaneous modules the percentages were
0.0, 3.5 and 6.7.
While static area addresses emitted by the cross-compiler are lengthy,
they also appear to be fairly infrequent.
The average code area reduction, based on the total of the bytes
saved and the total of the individual code areas, is 2.6%.
$ski
A register could also be uo point to the transfer vector
used to call the runtime routines.
A byte displacement would be sufficient to address a large majority
of the existing runtime routines.
Note that a register would be dedicated solely for this purpose and
would only have to be loaded once.
Even a single runtime address in a procedure would benefit from this
change.
The percent code size reduction possible using this method was calculated
by FINDing the runtime calls in the assembly listing files with QED.
All but three of the sample modules would be reduced in size by
this change.
The percent reductions range from 0.1% to 4.9% (in an ANC module).
The average reduction, computed as described above for the first
suggestion, would be 1.6%.
If either the DEBUG or CHECK options had been used with the sample
programs, the savings would have been much larger.
$ski
The third technique, which we will call "targeting", involves exploiting the VAX's multiple operand,
memory to memory instructions and incorporating more context into
the code generator algorithms.
Currently a simple assignment is always done via a move or convert
instruction.
The VAX's two and three operand arithmetic instructions would permit
the assignment to be done simultaneously with the final evaluation of
the right hand side expression in many cases.
Similarly, a temporary is always allocated for the result of a function
call returning an aggregate value.
When this value was to be immediately assigned to a variable, the
temporary could be eliminated.
The same idea could also be applied when expressions for simple
value parameters are evaluated and then placed on the stack.
No quantitative analysis of the possible benefits from this technique
has been attempted.
However, an informal estimate suggests the savings are signifigantly
larger than either of the above two methods, perhaps in the five
to ten percent range.
A preliminary examination of the effort required to incorporate
targeting in the VAX code generator suggests it would be fairly
modest.
$ski
A study of the sample programs compiled with the TRACE option on
indicated that over 9% of the code area was taken up by the trace
blocks.
For one of the DESIGN modules the trace blocks occupied over 50%
of the code area.
The current trace facility on the VAX also adds one instruction
to the beginning of each procedure.
An alternative approach would be to use a separate trace table
with entries for each procedure.
Each table entry would include the start of address of the
corresponding code, the ending address and the procedure name.
The trace routine would then use the current program counter
and the return addresses in the stack frame to provide the
stack trace.
This scheme effectively increases the density of the code area,
which is particularly valuable on a virtual memory machine.
The pages containing the trace table would normally never
need to be brought into main memory.
In addition, the instruction which pushes the trace block address
 onto the stack upon entry to a procedure could be eliminated.
#sect(Modifying the VAX addressing modes)
The VAX has 16 basic addressing modes.
In this section we consider five modifications to those addressing
modes, all of which are attempts to reduce code size.
The VAX operand specifier encoding effectively limits the number of
addressing modes to 16.
The addressing modes described below could only be incorporated by
replacing some of the existing VAX modes.
There are four clear candidates for replacement.
First, the code generator never generates the autoincrement
deferred mode.
Second, four addressing mode codes are used for literal mode.
Literal mode special-cases short immediate values.
Our operand specifier analysis indicates that 80 to 90 percent
of these cases can be handled using a single addressing mode.
$ski
The first four modes discussed are functionally equivalent to existing
VAX addressing modes.
They attempt to encode very common operand specifications in fewer bytes
by special-casing them.
Two of the most common forms of addresses are byte displacements off the
argument pointer and indirect byte displacements off the argument pointer.
Both of these forms of addresses require two bytes on the VAX.
A special addressing mode could be created which used four bits
for the mode code, one bit to indicate indirection and three bits to
encode the longword displacement off the argument pointer.
This would permit the first seven (possibly eight) parameters of
a routine to be addressed with a single byte.
The analysis of operand specifiers indicates savings ranging from
1.3% to 8.8% would be possible using this mode.
The weighted average savings is 3.2%.
These percentages assume all byte displacements off the argument pointer
could be represented using the special case mode.
$ski
A similar strategy can be used to specify small, negative longword
offsets off the frame pointer.
Local variables are addressed as displacements from the frame pointer.
A program was written to analyze the displacement sizes from the frame pointer, using
the assembly listing files as input.
Percentage savings were calculated assuming all displacements between
-1 and -256 could be addressed with this new addressing mode.
The savings ranged from 0.7% to 10.8%, with a weighted average of 5.5%.
Assuming the displacement in the operand specifier byte represented minus
the required number of longwords of displacement, four addressing modes
would be required to represent the range -1 to -256.
Fewer addressing modes could be dedicated to this special case if the
displacement range was more restrictive.
$ski
A third special case which was considered was attempting to encode two
successive register mode operands in a single byte.
This technique does not appear profitable for two reasons.
First, an analysis of the opcode specifiers for the sample programs
indicated that the number of instructions with multiple register mode
operands never exceeded one percent.
Second, we were unable to devise a scheme for encoding two registers
in single byte while retaining the basic byte oriented operand
specifier encoding of the VAX.
$ski
The last addressing mode optimization involves reducing all
four byte displacements to three bytes.
This does not mean the actual address space size is reduced,
but only that displacements from the address in a register
cannot exceed 2**23 in magnitude.
In particular, the address instructions (e.g. MOVAL, PUSHAB)
would continue to use four bytes of address data.
The four byte displacement modes would simply be redefined
to take three byte values, which like the one and two byte
displacements would be sign extended before addition to the
base address in the register.
A possible problem with this idea is that it may prevent us
from using the VAX/VMS linker to link images as a short-term
expedient, should we wish to do that.
It is not clear whether the object language would permit us to
command the linker to store a three byte displacement.
The savings possible with this modification seem to be in the
1% to 6% range, with 3% about average.
However, this counts twice the savings possible with the
schemes of loading base registers with the addresses of
static and the runtime transfer vector.
$ski
Finally, a new addressing mode which actually extends the
functionality of the present VAX addressing modes was considered.
The VAX index mode permits the contents of a register to be used
as a displacement from the effective address calculated from the previous
operand specifier.
This permits a displacement to be added to a base address which is
indirect.
The new mode would work in a similar fashion except that the displacement
would be taken from the operand specifier itself rather than from a
register.
This would be particularly useful for addressing fields within records
which are accessed via pointers or are parameters passed by address.
This addressing mode would be more useful to a non-optimizing
compiler than to an optimizing one.
If multiple references to fields of the record exist, and the compiler
is aware of that fact, then simply loading a register with the
base address makes more sense.
At this point we have made no attempt to estimate the savings which
would result from this change.
An accurate estimate would require a manual examination of the
generated code.
#sect(Defining new opcodes)
A variety of new instructions could be defined.
Defining new instructions is far more compatible with the existing
VAX architecture than is modifying the operand formats.
Modifications to the operand specifiers would force full software
interpretation of the virtual machine even on the VAX.
If the operand specifier formats remained unchanged, additional
instructions could be implemented as traps, while retaining
hardware execution of existing instructions.
Estimates of the space savings resulting from the following new
instructions are not available in most cases.
For any given instruction, the savings would be modest.
The total however would probably be significant.
$ski
The procedure calling instructions are the most obvious candidates
for enhancements.
The procedure call instruction and the various instructions for
pushing operands and addresses onto the stack, were almost
always among the most frequent instructions in the sample programs.
The CALLS instruction used by the VAX code generator already does
much of the work necessary to establish a new stack frame.
However, it does not attempt to deal with nested scopes.
A new call instruction could be defined which incorporated some
of the functions now done by the four prologue instructions at
the beginning of each routine.
In particular, the static link could be automatically pushed onto
the stack and the new argument pointer could also be saved on the
stack.
This enhancement, along with a reworking of the stack trace facility,
could reduce the routine prologue from four instructions to one
(the instruction for subtracting the new stack frame size from the
stack pointer would be retained).
If the call instruction included the number of static levels back
the lexical parent frame was, then any instructions previously present
at the point of call for explicitly chasing the static chain would
also be eliminated.
$ski
The conditional branch instructions of the VAX all use a self-relative
byte displacement.
When the target of the branch is not within the range of a byte displacement,
a conditional branch around an unconditional, word displacement branch
instruction is used.
This five byte, two instruction sequence could be replaced by a single
three byte instruction if word displacement conditional branch instructions
were available.
The percentage of branch instructions which required a word displacement
ranged from 0.0% to 43.1% in the sample programs.
Some of these were unconditional branches to begin with and would not
benefit from this change.
The program analyzing the opcode-operand specifiers dump file did not
distinguish the two cases.
The weighted percentage of word displacement branches was 16.8%.
This change could use up a large number of opcodes; it would
have to be considered in light of the number of other opcodes added and
the number of existing VAX opcodes which could be dispensed with.
$ski
The VAX instruction set includes a set of string instructions which
have proven very appropriate for implementing the MDSI Pascal
string operations.
Unfortunately, no corresponding set of instructions exists for Pascal
set operations.
Clearly a group of instructions specifically oriented towards Pascal
set operations could be defined.
The details of a possible instruction set have not been worked out at
this point.
An alternative possiblity would be simply to augment the existing
instruction set with some instructions which functionally extended
existing instructions.
Examples of this would include quadword test, compare, AND, and OR
instructions.
$ski
The fact that runtime routine addresses  currently require
five bytes could also be dealt with by defining new opcodes.
A straightforward approach would be to have a 'runtime call' instruction
whose first argument was an index into a transfer vector.
Parameters could be either additional arguments or could be pushed onto
the stack prior to the call.
$ski
Finally, several miscellaneous instructions would be useful.
The VAX instructions for format conversions, arithmetic and logical
complement and arithmetic shifting all take two operands.
Often code size could be reduced by performing these operations in
place.
Single operand variations of these instructions would make this
possible.
The VAX also lacks a logical AND instruction and a logical shift instruction.
Both of these functions are useful for set operations.
Though our studies have all been done assuming the NOCHECK option,
it would be possible to substantially reduce the cost of the
runtime checks by defining explicit check instructions.
For example, an explicit range check would save the space required
by the operand specifier for the value to be checked, the space for the call to the
runtime error routine and two additional bytes.
The savings would be substantial enough that they could easily make
the difference in whether or not CHECK mode was feasible for a
program.
#sect(Summary:  VAX improvements)
The last three sections considered various modifications
to the VAX cross-compiler and VAX architecture which would
make programs more compact.
If we adopted the modified VAX architecture as our Pascal
Virtual Machine, we could expect a savings of from 15% to 25%
of the space currently required by programs compiled for
the VAX.
This is based on the sum of the expected gains discussed
above, with a safety factor subtracted in case we find
some modification yields less than expected, or is
inadvisable or difficult to implement for some unforeseen reason.
It does not include potential gains should we decide to provide
optimization in the compiler, or distribute widespread special-case
handling through the code generator.
#sect(Space-optimization independent of architecture)
One space-saving technique is possible regardless
of the architecture chosen.
This is Huffman encoding of the different instruction
components (opcodes, operands, displacements, etc.).
Huffman encoding is a means of encoding text or other
data in varying-length bit strings such that the
most frequent elements in the data are given the shortest
representations.
[11] and [14] give fuller descriptions of the advantages
and use of this technique.
We judged it unsuitable for our purposes since it would
destroy byte-alignment in our instructions and make
per-instruction interpretation quite slow due to the
table-driven shifting and masking operations that would
be necessary.
[13] gives a similar reason for avoiding Huffman encoding;
it seems to be useful only where it can be at least
implemented in microcode, and preferably where each bit
in memory is separately addressable.
#sect(Conclusions)
The size change factors for MDSI P-code range from 1.93 to 2.33.
For the VAX cross-compiler output, the same modules range from
1.08 to 1.77; additional modules not easily compilable with the
P-code compiler have factors of 1.52 and 1.88.
This shows that the present VAX compiler and architecture
result in smaller code.
In addition, with foreseen improvements we can probably
produce factors of about 1.4 for a virtual machine
based on the VAX.
$ski
Implementation of tools to support this virtual machine
will also be less work than doing so for any
other reasonable target architecture.
This is because:  (1) we can modify the current VAX cross-compiler
rather than start a new cross-compiler from scratch;
(2) we may be able to use the VAX loader for linking;
(3) we can start work sooner on an interpreter for the VAX
itself, later modifying it to handle the architectural changes
we decide on.
Therefore, we recommend basing the MDSI Pascal Virtual Machine
on the architecture of the VAX-11.
#pagsect(References)
$jus
<:A.\\MDSI Pascal Virtual Machine
$ski $ind +9
$par -5
	\1.\\Gorgen, D.\P.  "Plan for Choosing a Basis for MDSI's Pascal
		Virtual Machine", memo 1/24/80 to A.\A.\Kortesoja.
$par -5
	\2.\\Kortesoja, A.\A.  "Packaging ANC for In-house Systems", memo
		10/24/79 to J.\L.\McKelvie.
$ski $ind 0 $need 4
B.\\P-codes
$ski $ind +9
$par -5
	\3.\\Barel, M.  "PERQ QCode Reference Manual", Three Rivers Computer
		Corporation, 1979.
$par -5
	\4.\\Kortesoja, A.  "PCODE Implementation Notes",
		MDSI documentation, 1976.
$par -5
	\5.\\Nori, K.\V. &et al.&  "The PASCAL 'P' Compiler:  Implementation
		Notes", Eidgenossische Technische Hochschule, Zurich, 1975.
$par -5
	\6.\\Sites, R.\L. and D.\R.\Perkins.  "Universal P-code Definition,
		version [0.3]", UCSD/CS-79/037, University of California
		at San Diego, 1979.
$par -5
	\7.\\University of California at San Diego.  "UCSD Pascal Version
		I.5", 1978.
$par -5
	\8.\\Western Digital Corporation.  Pascal Microengine documentation,
		1978.
$ski $ind 0 $need 4
C.\\Space-efficient architectures
$ski $ind +9
$par -5
	\9.\\Bell, C.\G. and A.\Newell.  &Computer Structures:  Readings
		and Examples&.  New York: McGraw-Hill, 1971.
$par -5
	10.\\Hehner, E.\C.\R.  "Computer Design to Minimize Memory
		Requirements", &Computer&, &9&(8), 65-70 (1976).
$par -5
	11.\\Hehner, E.\C.\R.  "Information Content of Programs and
		Operation Encoding", &Journal of the ACM&, &24&(2), 290-297
		(1977).
$par -5
	12.\\Myers, G.\J.  &Advances in Computer Architecture&.  New York:
		John Wiley && Sons, 1978.
$par -5
	13.\\Tanenbaum, A.\S.  "Implications of Structured Programming
		for Machine Architecture", &Communications of the ACM&,
		&21&(3), 237-246 (1978).
$par -5
	14.\\Wilner, W.\T.  "Burroughs B1700 Memory Utilization", &AFIPS
		Conference Proceedings&, Volume 41, Part I.  AFIPS
		Press.
$par -5
	15.\\Wilner, W.\T.  "Design of the Burroughs B1700", &AFIPS
		Conference Proceedings&, Volume 41, Part I.  AFIPS
		Press.
$par -5
	16.\\Wilner, W.\T.  "Structured Programs, Arcadian Machines,
		and the Burroughs B1700", &Lecture Notes in Computer
		Science&.  Berlin: Springer-Verlag.
$ski $ind 0 $need 4
D.\\Machine-independent intermediate languages
$ski $ind +9
$par -5
	17.\\Agarwal, R.\K. and S.\T.\Chanson.  "A Space-efficient
		Code Generation Scheme for BCPL", &Software--Practice
		and Experience&, &10&, 77-95 (1980).
$par -5
	18.\\Coleman, S.\S. &et al.&  "The Mobile Programming System,
		Janus", &Software--Practice and Experience&, &4&, 5-23 (1974).
$par -5
	19.\\Poole, P.\C.  "Portable and Adaptable Compilers", &Lecture Notes
		in Computer Science&, volume 21, 427-497.  Berlin: Springer-Verlag,
		1974.
$par -5
	20.\\Waite, W.\M.  &Implementing Software for Non-Numeric
		Applications&.  Englewood Cliffs, N.\J.: Prentice-Hall,
		Inc., 1973.
:>
d n