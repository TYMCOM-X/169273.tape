$DECAP ON
$NUMBER 0
$NUMBER OFF
$CENTER
$SKIP 6
&@T R N S L T@&
$SKIP 2
*A *TEXT *FILE *TRANSLITERATION *UTILITY
$SKIP 1
*VERSION 1.0
$SKIP 5
&*ABSTRACT&
$SKIP 1
$JUSTIFY
$INDENT LEFT 15
$INDENT RIGHT 15
@TRNSLT@ IS A PROGRAM WHICH WILL TRANSLITERATE A TEXT FILE.
*THAT IS, IT WILL COPY A TEXT FILE, MAKING CHANGES ON A CHARACTER BY CHARACTER
BASIS.
*TYPICAL APPLICATIONS OF @TRNSLT@ INCLUDE THE REPLACEMENT OF ALL THE LOWERCASE
LETTERS IN A FILE BY UPPERCASE LETTERS, THE REPLACEMENT OF ONE CHARACTER BY
ANOTHER THROUGHOUT A FILE, THE DELETION OF ALL THE OCCURRENCES OF SOME
SET OF CHARACTERS FROM A FILE, AND THE EXTRACTION OF ALL THE INDIVIDUAL WORDS
OR SYMBOLS FROM A FILE.
@TRNSLT@ IS BASED ON THE PROGRAM @TRANSLIT@, WHICH IS DESCRIBED IN:
$SKIP 1
$INDENT LEFT +5
$PARA -5
*KERNIGHAN, *BRIAN\*W. AND *P.\*J.\*PLAUGER.  &*SOFTWARE *TOOLS&.
*ADDISON-*WESLEY, *READING, *MASS., 1976 (PAGES 51-61).
$SKIP 5
$INDENT LEFT 0
$INDENT RIGHT 0
$VERBATIM
*PREPARED BY:  *R. *N. *FAIMAN
*LAST *UPDATED: 11 *APRIL 1978
$JUSTIFY
$TITLE '@TRNSLT@ -- *A *TEXT *FILE *TRANSLITERATION *UTILITY                   *PAGE \' LEFT '*VERSION 1.0'
$PAGE
&@INTRODUCTORY EXAMPLES@&
$SKIP 2
$PARA 5
1)\ *SUPPOSE YOU ARE ENTERING A *PASCAL PROGRAM ON A TERMINAL WHICH DOESN'T
HAVE A VERTICAL BAR CHARACTER (|), AND YOUR PROGRAM USES THE CONCATENATION
OPERATOR (||).
*IF YOU DON'T USE THE EXCLAMATION POINT CHARACTER (!) ANYWHERE ELSE IN YOUR
PROGRAM, THEN YOU COULD USE AN EXCLAMATION POINT EVERYWHERE THAT YOU REALLY
MEAN A VERTICAL BAR (FOR EXAMPLE, "@STRING := STRING !! CHAR@").
*HAVING TYPED IN THE PROGRAM, YOU WOULD THEN NEED TO GO THROUGH THE FILE
SOMEHOW AND REPLACE ALL THE EXCLAMATION POINTS BY VERTICAL BARS.
*USING @TRNSLT@, YOU COULD DO THIS WITH THE COMMAND:
$SKIP 1
\\\\\@*SAMPLE.PAS=SAMPLE.PAS/!=#`@
$SKIP 1
*THIS MEANS:  COPY FILE @SAMPLE.PAS@ INTO FILE @SAMPLE.PAS@, REPLACING ALL
OCCURRENCES OF THE CHARACTER "!" BY A LOWERCASE "`".
(*THE "#" INDICATES CONVERSION TO LOWER CASE; LOOKING AT AN *ASCII CHART,
YOU CAN OBSERVE THAT "|" IS THE LOWER CASE CHARACTER CORRESPONDING TO THE
CHARACTER "`".)
$SKIP 2
$PARA 5
2)\ *SUPPOSE YOU HAVE A PROGRAM WHICH IS PARTLY IN UPPER CASE AND PARTLY
IN LOWER CASE, AND YOU WANT TO EDIT IT ON YOUR UPPERCASE-ONLY TERMINAL.
*YOU COULD CONVERT THE ENTIRE PROGRAM TO UPPER CASE WITH THE @TRNSLT@ COMMAND:
$SKIP 1
\\\\\@*SAMPLE.PAS=SAMPLE.PAS/#A-#Z=A-Z@
$SKIP 1
*THIS MEANS:  COPY FILE @SAMPLE.PAS@ TO FILE @SAMPLE.PAS@, REPLACING ALL
CHARACTERS IN THE RANGE FROM LOWERCASE "*A" TO LOWERCASE "*Z" (I.E., FROM
"A" TO "Z") BY THE CORRESPONDING CHARACTERS IN THE RANGE FROM "*A" TO "*Z".
(@TRNSLT@ ALWAYS ASSUMES THE *ASCII CHARACTER SET ORDERING.)
$SKIP 2
$PARA 5
3)\ *IN EXAMPLE (2), SUPPOSE THAT ALL OF THE PROGRAM TEXT IS IN LOWER
CASE, AND THAT ONLY THE COMMENTS ARE IN MIXED CASE.
*IF YOU WANT TO BE ABLE TO RESTORE THE FILE TO ITS ORIGINAL CASE WHEN YOU
ARE DONE EDITING IT, YOU COULD SAY:
$SKIP 1
\\\\\@*SAMPLE.PAS=SAMPLE.PAS/A-Z#A-#Z=#A-#ZA-Z@
$SKIP 1
*THIS MEANS:  REPLACE ALL UPPERCASE LETTERS BY LOWERCASE LETTERS, AND ALL
LOWERCASE LETTERS BY UPPERCASE LETTERS.
*YOU CAN NOW EDIT THE PROGRAM TEXT (WHICH IS NOW ALL IN UPPER CASE), AND
WHEN YOU ARE DONE YOU CAN USE THE SAME COMMAND TO CHANGE THE FILE BACK TO
ITS ORIGINAL CASE.
$SKIP 2
$PARA 5
4)\ *SUPPOSE THAT (FOR SOME STRANGE REASON) YOU WANT TO DELETE ALL THE SPACES,
TABS, COMMAS, PERIODS, AND SEMICOLONS FROM A FILE.
*THE COMMAND FOR THIS WOULD BE:
$SKIP 1
\\\\\@*TEXT.NEW=TEXT.OLD/ @@T,.;=@
$SKIP 1
*THIS MEANS:  REPLACE ALL OCCURRENCES OF ANY OF THE CHARACTERS "\", &TAB&
("@@*T" REFERS TO THE TAB CHARACTER), ",", ".", OR ";" BY NOTHING AT ALL
(IN OTHER WORDS, DELETE THEM).
$SKIP 2
$PARA 5
5)\ *A MORE LIKELY APPLICATION WOULD BE TO GO THROUGH A FILE REPLACING ALL
STRINGS OF SPACES AND/OR TABS BY SINGLE SPACES.
*THIS COULD BE ACCOMPLISHED WITH THE COMMAND:
$SKIP 1
\\\\\**CMPRES.TXT=ORIGNL.TXT/@@S@@T=@@S
$SKIP 1
*THIS MEANS:  REPLACE EACH STRING OF ONE OR MORE SPACES BY A SINGLE SPACE
("@@*S" MAY BE USED TO REFER TO THE SPACE CHARACTER).
$SKIP 2
$PARA 5
6)\ *SUPPOSE YOU WANT A LIST OF ALL THE WORDS IN SOME DOCUMENT, WHERE A WORD
IS DEFINED AS ANY STRING OF LETTERS WITH NON-LETTERS ON EITHER SIDE.
*YOU MIGHT BEGIN WITH A COMMAND LIKE:
$SKIP 1
\\\\\**WORDS.LST=SPEC.DOC/%*A-*ZA-Z=@@N
$SKIP 1
*THIS MEANS:  REPLACE EACH STRING OF CHARACTERS &OTHER THAN& UPPERCASE AND
LOWERCASE LETTERS (THE CHARACTER "%" MEANS "EVERYTHING BUT") BY A SINGLE
END-OF-LINE ("@@*N" REFERS TO A NEW-LINE).
$SKIP 3
&@COMMAND STRING SYNTAX@&
$SKIP 2
$PARA 5
*THE GENERAL FORM OF @TRNSLT@ COMMANDS IS:
$SKIP 1
\\\\\[<NEW FILE>=]<OLD FILE>/<SOURCE CHARS>[=<REPLACEMENT CHARS>]
$SKIP 1
*IF THE NEW FILE NAME IS OMITTED, THE OLD FILE NAME WILL BE USED WITH AN
EXTENSION OF ".@TMP@".
*IF THE EXTENSION IS OMITTED FROM THE OLD FILE NAME, NO EXTENSION WILL BE
ASSUMED.
*THERE ARE FIVE DISTINCT FORMS OF THE BASIC COMMAND, CHARACTERIZED BY THE
RELATION BETWEEN THE <SOURCE CHARACTERS> AND THE <REPLACEMENT CHARACTERS>.
*THESE ARE DESCRIBED IN DETAIL BELOW.
$SKIP 1
$VERBATIM
$INDENT LEFT +5
$TAB 24
*SIMPLE *REPLACEMENT	/*X1...*XN=*Y1...*YN
*COMPRESSION	/*X1...*XN=*Y1
*COMPLEX *REPLACEMENT	/*X1...*XN=*Y1...*YM  [1 < M < N]
*DELETION	/*X1...*XN=
*COMPLEMENT	/%*X1..*XN=*Y1..*YM  [M >= 0]
$INDENT LEFT -5
$JUSTIFY
$SKIP 2
$PARA 5
1)\ *SIMPLE *REPLACEMENT.
$PARA 5
*IF THERE ARE AS MANY REPLACEMENT CHARACTERS AS THERE ARE SOURCE CHARACTERS,
THEN EACH SOURCE CHARACTER IS REPLACED BY THE CORRESPONDING REPLACEMENT
CHARACTER.
(*SEE EXAMPLES 1, 2, AND 3.)
$SKIP 1
$PARA 5
2)\ *COMPRESSION.
$PARA 5
*IF THE SOURCE CHARACTER LIST CONTAINS MORE THAN ONE CHARACTER,
AND THERE IS EXACTLY ONE
REPLACEMENT CHARACTER, THEN EACH OCCURRENCE OF A STRING OF THE SOURCE
CHARACTERS WILL BE REPLACED BY THE SINGLE REPLACEMENT CHARACTER.
(*SEE EXAMPLE 5.)\
*NOTE THAT COMPRESSION IS ONLY PERFORMED IF THERE ARE MULTIPLE SOURCE
CHARACTERS.
*FOR EXAMPLE, TO REPLACE STRINGS OF "*A"S BY A SINGLE "*A", YOU WOULD HAVE
TO USE A COMMAND LIKE "/@AA=A@".
$SKIP 1
$PARA 5
3)\ *COMPLEX *REPLACEMENT.
$PARA 5
*IF THERE ARE M SOURCE CHARACTERS AND N REPLACEMENT CHARACTERS, AND
1\<\N\<\M, THEN ALL OCCURRENCES OF &ONE& OF THE FIRST N-1 SOURCE
CHARACTERS WILL BE REPLACED BY THE CORRESPONDING REPLACEMENT CHARACTER,
WHILE ANY &STRING& OF THE NTH THROUGH MTH SOURCE CHARACTERS WILL BE
REPLACED BY THE NTH REPLACEMENT CHARACTER.
*THIS COMMAND FORM IS EQUIVALENT TO SIMPLE REPLACEMENT OF THE FIRST N-1
SOURCE CHARACTERS BY THE FIRST N-1 REPLACEMENT CHARACTERS, COMBINED WITH
COMPRESSION OF THE NTH THROUGH THE MTH SOURCE CHARACTERS INTO THE NTH
REPLACEMENT CHARACTER.
*FOR EXAMPLE, THE COMMAND STRING "/@ABCDEF=XYZD@" WOULD REPLACE EACH "*A"
BY "*X", EACH "*B" BY "*Y", EACH "*C" BY "*Z", AND EACH STRING OF "*D"S,
"*E"S, AND "*F"S BY "*D", SO THAT THE INPUT LINE "@ABLE FED ABED@" WOULD
BE REPLACED BY THE OUTPUT LINE "@XYLD D XYD@".
$SKIP 1
$PARA 5
4)\ *DELETION.
$PARA 5
*IF THERE ARE NO REPLACEMENT CHARACTERS, OR IF THE OPTIONAL
[=<REPLACEMENT\CHARS>] CLAUSE IS OMITTED FROM THE COMMAND LINE, THEN ALL
OCCURRENCES OF  THE SOURCE CHARACTERS WILL BE DELETED FROM THE FILE.
(*SEE EXAMPLE 4.)
$SKIP 1
$PARA 5
5)\*COMPLEMENT *COMPRESSION AND *DELETION.
$PARA 5
*IF THE LIST OF SOURCE CHARACTERS BEGINS WITH A "%", THEN THE ACTUAL SET OF
CHARACTERS TO BE REPLACED IS THE SET OF ALL CHARACTERS WHICH ARE &NOT& IN
THE LIST OF SOURCE CHARACTERS (NOT INCLUDING THE "%").
*THE ONLY COMMAND FORMS APPLICABLE TO SUCH AN "ALL BUT" SOURCE CHARACTER
LIST ARE COMPRESSION AND DELETION.
*IF THERE ARE NO REPLACEMENT CHARACTERS, THEN ALL CHARACTERS WHICH ARE NOT IN
THE SOURCE CHARACTER LIST WILL BE DELETED.
*IF ONE OR MORE REPLACEMENT CHARACTERS ARE SPECIFIED, THEN ALL STRINGS OF
CHARACTERS WHICH ARE NOT IN THE SOURCE CHARACTER LIST WILL BE REPLACED BY
THE LAST REPLACEMENT CHARACTER.
(*SEE EXAMPLE 6.)\
*SIMPLE AND COMPLEX REPLACEMENT CAN NOT BE USED IN A COMPLEMENT OPERATION,
SINCE THE ORDER OF THE CHARACTERS TO BE REPLACED WOULD NOT BE DEFINED.
$SKIP 2
&*SPECIFYING *CHARACTER *LISTS&
$SKIP 1
$PARA 5
*THE BASIC FORM FOR THE <SOURCE CHARS> AND <REPLACEMENT CHARS> LISTS
IN THE COMMAND LINE IS SIMPLY A STRING OF CHARACTERS.
*THE STRING OF SOURCE CHARACTERS BEGINS FOLLOWING THE "/", AND ENDS AT THE "="
(OR AT THE END OF THE COMMAND LINE, IF [=<REPLACEMENT CHARS>] IS OMITTED).
*THE STRING OF REPLACEMENT CHARACTERS BEGINS FOLLOWING THE "=", AND ENDS AT
THE END OF THE COMMAND LINE.
*WITHIN THE STRINGS, ALL CHARACTERS ARE SIGNIFICANT, INCLUDING SPACES.
(*I.E., DON'T TYPE "@FILE1=FILE2/\X=Y@" UNLESS YOU WANT ALL STRINGS OF "*X"S
AND SPACES TO BE REPLACED BY A SINGLE "*Y".)\
*IN ADDITION TO THE SIMPLE STRING FORM FOR THE LISTS OF CHARACTERS,
SEVERAL SPECIAL NOTATIONS ARE AVAILABLE:
$SKIP 1
$PARA 5
1)\ *LOWERCASE SHIFTING WITH "#".
$PARA 5
*FOR THE CONVENIENCE OF USERS WITH UPPERCASE-ONLY TERMINALS, THE CHARACTER "#"
IS USED AS A LOWERCASE SHIFT.
"#*A" MEANS "A", "#*B" MEANS "B", ETC.
*THIS APPLIES TO FOUR SPECIAL CHARACTERS AS WELL:  "#[" MEANS "{", "#`"
MEANS "|", "#]" MEANS "}", AND "#^" MEANS "~".
*A "#" THAT DOESN'T PRECEDE AN UPPERCASE LETTER, "[", "`", "]", OR "^"
HAS NO SPECIAL SIGNIFICANCE, AND WILL BE TAKEN AS PART OF THE LIST.
$SKIP 1
$PARA 5
2)\ *CHARACTER RANGES WITH "-".
$PARA 5
*IF "X" AND "Y" ARE BOTH DIGITS, BOTH UPPERCASE LETTERS, OR 
BOTH LOWERCASE LETTERS, THEN "X-Y" INDICATES THE RANGE OF CHARACTERS
FROM "X" TO "Y".
*FOR EXAMPLE, "0-9" MEANS "0123456789", WHILE "*A-*E" MEANS "@ABCDE@".
"X" MAY FOLLOW "Y" IN THE *ASCII SEQUENCE; FOR EXAMPLE, "Z-V" MEANS
"ZYXWV".
*THE RANGE NOTATION MAY BE COMBINED WITH THE LOWERCASE SHIFT NOTATION; THUS
"#*A-#*Z" MEANS "ABC...YZ".
*A "-" WHICH DOESN'T APPEAR BETWEEN TWO DIGITS, UPPERCASE LETTERS, OR LOWERCASE
LETTERS HAS NO SPECIAL SIGNIFICANCE, AND WILL BE TAKEN AS PART OF THE LIST.
$SKIP 1
$PARA 5
3)\ *ESCAPED CHARACTERS WITH "@@".
$PARA 5
*SEVERAL SPECIAL CHARACTER COMBINATIONS MAY BE FORMED WITH "@@". 
"@@*B" INDICATES THE BACK-SPACE CHARACTER, "@@*S" MEANS "\" (THE SPACE
CHARACTER), "@@*T" INDICATES THE TAB CHARACTER, "@@*F" INDICATES THE FORM-FEED
CHARACTER, AND "@@*N" INDICATES THE END OF A SOURCE LINE.
*AS A REPLACEMENT CHARACTER, "@@*D" WILL CAUSE A CORRESPONDING SOURCE CHARACTER
TO BE DELETED; AS A SOURCE CHARACTER, "@@*D" WILL NEVER CORRESPOND TO ANY
CHARACTER IN THE INPUT FILE.
*BEFORE ANY OTHER CHARACTER, AN "@@" SUPPRESSES ANY SPECIAL EFFECTS THAT THAT
CHARACTER MIGHT NORMALLY HAVE, CAUSING IT TO BE TAKEN AS PART OF THE LIST.
*IN PARTICULAR, "@@%", "@@#", "@@-", AND "@@@@" REPRESENT THE CHARACTERS "%",
"#", "-", AND "@@".
*NOTE ALSO THAT THE ONLY WAY TO REPRESENT "=" IN THE SOURCE CHARACTER STRING
IS AS "@@=".
$SKIP 3
&@OPERATING INSTRUCTIONS@&
$SKIP 2
$PARA 5
*EXECUTE @TRNSLT@ BY TYPING "@R RND:TRNSLT@" AT THE DOT.
@TRNSLT@ WILL PRINT A VERSION MESSAGE AND THEN PROMPT FOR INPUT WITH AN
ASTERISK.
*IT WILL KEEP REQUESTING COMMAND LINES UNTIL YOU TERMINATE IT BY ENTERING AN
EMPTY LINE.
   