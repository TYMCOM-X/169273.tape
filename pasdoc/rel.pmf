#DOCUMENT(Compiler Maintenance and Release Procedures,25 October 1982,45)
#TITLE_PAGE_1("#TITLE,,,Prepared by:  Nancy J. Egan,&
Updates by:  William N. Hope,&
"<:Last Updated:  #DATE:>)
#SECT(Introduction)
This document describes all of the steps necessary to maintain and 
release a new version of the MDSI Pascal compiler, which will 
be referred to simply as "the compiler" from now on.  In addition, 
certain useful utility programs and monitor commands are explained, 
with examples of their use illustrated.
#SECT(Overview)
In general, the compiler is dealt with in two different ways:  
Day-to-day maintenance, and releasing a new version.  The two
are not unrelated, and many of the maintenance procedures are
also used in releasing a new version.
#PAR()
Maintenance work usually centers around bug-fixing and enhancement
implementation.  There are certain tools and procedures available
to make this work easier and less error-prone.  They are described
further in the section on "Maintenance Procedures".
#PAR()
A new version of the compiler is released periodically to make
the most recent bug-fixes and enhancements available on a
released compiler, as opposed to a development compiler,
which should not be used for producing code for actual use.
#PAR()
There are three different kinds of releases:  Internal,
unofficial, and official.  
#BEGINLEVEL
#SECT(Internal releases)
An internal release is made whenever the compiler is moved from the
Development Account on Tymshare to the Release 
Account on Tymshare (see the section on
"Compiler Accounts", below for the specific account numbers).
This type of release always precedes any other kind of release.
An internal release doesn't require that too much advance warning
be given to the members of the Development Software Group, and
only members of the group will use this new compiler.
#SECT(Unofficial releases)
An unofficial release is a release involving a transfer of the
compiler to ADP, but not for general use.  For example, the
compiler used to benchmark ANC on the M68000 is unoffically
released on ADP.  A series of unofficial releases may precede
the official release.  Unofficial releases do not require much
advance warning to be given to the users, nor are the results
guaranteed to be as stable as an officially released compiler.
#SECT(Official releases)
An official release is made less frequently than internal releases
are made.  It consists of giving adequate advance warning to all
users, doing an internal release, and moving the compiler to
ADP.  An officially released compiler is supposed to be as stable
and well-checked as possible.
It will be used by all users, and should be announced by a Release
Letter or Memo.
#ENDLEVEL
A release may just affect a single code
generator, or it may affect the entire compiler.  The amount and
extent of the code changed, and its function in the compiler,
all dictate which procedures must be used to release the new compiler.
#SECT(Compiler Accounts)
There are certain accounts on Tymshare and ADP that are reserved for
the compiler, and certain accounts on Tymshare reserved for compiler
development.  The only files on these accounts should be those
directly related to developing and testing the compiler.
#BEGINLEVEL
#SECT(Tymshare Accounts)
#BEGINLEVEL
#SECT(PASDEV1)
This account contains the current internal release of the compiler.
#SECT(PASDEV10)
This is the compiler development account.
#SECT(<:PASDEV12,\PASDEV19:>)
These accounts are used for the compiler fixpoint.
#SECT(PASDEV11)
#SECT(PASCAL10C)
This account is used to release the PASDEV1 compiler from Tymshare to ADP.
#SECT(PASCCAL10I)
#SECT(PASCAL10)
#ENDLEVEL
#SECT(ADP Accounts)
#BEGINLEVEL
#SECT([52250,220])
This account contains the most current official release of the compiler.
#SECT([52250,222])
This account contains the most current internal release of the compiler.
#SECT([52250,234])
This account contains the old official release of the compiler.
#SECT([52250,261])
This account contains the version of the compiler to be released next.
#ENDLEVEL
#ENDLEVEL
#SECT(Compiler Modules)
There are many seperate modules linked together which comprise the compiler.
Following is a brief description of all the modules.
#BEGINLEVEL()
#SECT(PASCAL)
This module is used in passes 0,1,2,3,4,5,6,7,8,9,10,11.
#SECT(PASCFM)
This module is used in passes 0,1,6.
#SECT(PASS1)
This module is used in pass 1.
#SECT(PASLEX)
This module is used in pass 1.
#SECT(PASSMO)
This module is used in pass 1.
#SECT(PASCMP)
This module is used in pass 1.
This module contains functions which test for the compatibility of two types.
#SECT(PASANL)
This module is used in pass 1.
#SECT(PASBLK)
This module is used in pass 1.
#SECT(PASBOD)
This module is used in pass 1.
This is the module which performs semantication of procedure and program
bodies.
#SECT(PASTSM)
This module is used in pass 1.
#SECT(PASESM)
This module is used in pass 1.
#SECT(PASREF)
This module is used in pass 1.
This is the Reference Semantics module.  It contains only a single entry point.
Logically, PASREF could be grouped with PASESM; it is a sepatate module
because of its size and importance.
#SECT(PASEMU)
This module is used in pass 1.
This is the Expression Manipulation Utility module.  It contains
entry points for a variety of routines which are used in the
manipulation of the interrmediate form structures for expressions.
These routines are used primarily by the other expression semantics
modules (PASESM, PASREF, and PASFLD), but are available for use by the
rest of the compiler as well.  PASEMU was created by selecting all
the PASESU routines which were only used in Pass 1, and
creating a new module for them.
#SECT(PASSFC)
This module is used in pass 1.
This module contains the StdFcall routine, which performs semantic analysis
for calls on standard functions.
#SECT(PA1DMP)
This module is used in pass 1.
This is the debugging dump module.  It contins a collection of
procedures to dump portions of the symbol table, intermediate form
code, etc., to a .DMP file.
#SECT(PA1XRF\(PASXRF\-\Pass\1))
This module is used in pass 1.
This module handles the generation of the cross reference files.
The files it manipulate are:
#SECT(PASGLB)
This module is used in pass 1.
#SECT(PASCGR)
This module is used in pass 1.
This is the call graph module.  It contains routines to create and
manipulate the call graph of a program.
#BEGINFIGURE()
name.XFR -- the cross reference file
name.XST -- the symbol table file
name.XNM -- the name file
#ENDFIGURE()
#SECT(PASALC\(PTMALC))
This module is used in pass 1.
This is the storage allocation module for the PDP 10.
#SECT(PASFLD)
This module is used in pass 1.
This module contains the constant expression folding module.
Actually, two distinct modules are compiled from PASFLD.  If
 $X1 is enabled, then PA1FLD is generated.  The version of FOLD in this
module is recursive, and will fold all the operands of an expression before
attempting to fold the expression itself.  If $X2 is enabled, then
PA2FLD is generated.  This version of FOLD is non-recursive.  It assumes that 
the operands of an expression will already have been folded when FOLD
is called.
#SECT(PASESU)
This module is used in passes 1 and 2.
This is the Expression Semantics Utility module.  It contains entry points for 
a variety of routines which are used in the manipulation of the intermediate
form structures for expressions.  These routines are used primarily by the
other expression semantics modules (PASESM, PASREF, and PASFLD), but are
available for use by the rest of the compiler as well.
#SECT(PASRDR)
This module is used in passes 1 and 3.
This module cntains coroutines which read the source lines for both the
input and listing passes.
#SECT(PASOPN)
This module is used in passes 1,3,6.
#SECT(PASOPD)
This module is used in passes 1,6.
#SECT(PASS2)
This module is used in pass 2.
#SECT(PASOPT)
This module is used in pass 2.
This is the optimization module for the Pascal compiler.  It contains
the procedures which are directly relevant to optimization.
#SECT(PA2XRF\(PASXRF\-\Pass\2))
This module is used in pass 2.
This module handles the generation of the cross reference files.
The files it manipulates are:
#BEGINFIGURE()
name.XRF -- the cross reference file
name.XST -- the symbol table file
name.XNM -- the name file
#ENDFIGURE()
#SECT(PTMSEL\(P10SEL))
This module is used in pass 2.
This module performs machine specific translation of the intermediate form.
In particular, it converts references to memory access for and determines the
proper "shape" (length, precision, etc.) of individual operators.
#SECT(PASFLD)
This module is used in pass 2.
This module contains the constant expression folding module.
Actually, two distinct modules are compiled from PASFLD.  If
 $X1 is enabled, then PA1FLD is generated.  The version of FOLD in this
module is recursive, and will fold all the operands of an expression before
attempting to fold the expression itself.  If $X2 is enabled, then
PA2FLD is generated.  This version of FOLD is non-recursive.  It assumes that 
the operands of an expression will already have been folded when FOLD
is called.
#SECT(PASS3)
This module is used in pass 3.
#SECT(PASSDM)
This module is used in pass 3.
This is the symbol table dumping module.  It performs the functions
required by the SYMBOLS, XREF, and CALLS options.
#SECT(P10GEN)
This module is used in pass 4.
#SECT(P10CGU)
This module is used in passes 4,5.
#SECT(P10EXP)
This module is used in pass 4.
#SECT(P10CMP)
This module is used in pass 4.
#SECT(P10DSC)
This module is used in pass 4.
#SECT(P10CLL)
This module is used in pass 4.
#SECT(P10DEB)
This module is used in passes 4,5.
Emmission of DEBUG and TRACE supports.
#SECT(P10REL)
This module is used in passes 4,5.
#SECT(P10MAC)
This module is used in passes 4,5.
#SECT(P10CSP)
This module is used in passes 4,5.
P10CSP contains all routines necessary for constant pooling.
#SECT(Q10GEN)
This module is used in pass 5.
#SECT(Q10EXP)
This module is used in pass 5.
#SECT(Q10CMP)
This module is used in pass 5.
#SECT(Q10CMP)
This module is used in pass 5.
#SECT(Q10CLL)
This module is used in pass 5.
#SECT(Q10SET)
This module is used in pass 5.
#SECT(Q10DSC)
This module is used in pass 5.
#SECT(PASCMD)
This module is used in pass 6.
This is the command line manager module, which is used by NEWPAS to
manipulate an internal list of pending commands from auto-startup and
indirect command files.
#SECT(PASINI)
This module is used in passes 7,9,11.
#SECT(P10IMD)
This module is used in pass 7.
#SECT(VAXGEN)
This module is used in pass 8.
#SECT(VAXCGU)
This module is used in pass 8.
#SECT(VAXEXP)
This module is used in pass 8.
#SECT(VAXUTL)
This module is used in pass 8.
#SECT(VAXSET)
This module is used in pass 8.
#SECT(VAXCMP)
This module is used in pass 8.
#SECT(VAXCLL)
This module is used in pass 8.
#SECT(VAXIO)
This module is used in pass 8.
#SECT(VAXSTR)
This module is used in pass 8.
#SECT(VAXREL)
This module is used in pass 8.
#SECT(VAXMAC)
This module is used in pass 8.
#SECT(VAXDEB)
This module is used in pass 8.
#SECT(VAXCSP)
This module is used in pass 8.
#SECT(VAXIMD)
This module is used in pass 9.
#SECT(M68gEN)
This module is used in pass 10.
#SECT(M68OPT)
This module is used in pass 10.
#SECT(M68UTL)
This module is used in pass 10.
#SECT(M68CGU)
This module is used in pass 10.
#SECT(M68EXP)
This module is used in pass 10.
#SECT(M68CLL)
This module is used in pass 10.
#SECT(M68CMP)
This module is used in pass 10.
#SECT(M68STR)
This module is used in pass 10.
#SECT(M68SET)
This module is used in pass 10.
#SECT(M68IO)
This module is used in pass 10.
#SECT(M68EMU)
This module is used in pass 10.
#SECT(M68EMT)
This module is used in pass 10.
#SECT(M68PHO)
This module is used in pass 10.
#SECT(M68REL)
This module is used in pass 10.
#SECT(M68MAC)
This module is used in pass 10.
#SECT(M68IMD)
This module is used in pass 11.
#SECT(PASUTL)
This module is used in passes 1,7,9,11.
This module contains the symbols table utility routines.
These routines are used by nearly every other module in the compiler.
The symbol table structure is specified in PASIST.INC, and particularly
in PASIST.TYP, which it includes.
#SECT(PASJMP)
This module is used in passes 1,7,9,11.
#SECT(PA2DMP)
This module is used in passes 2,5,8,10.
This is the debugging dump module.  It contains a collection of
procedures to dump portions of the symbol table, intermediate form
code, etc., to a .DMP file.
#SECT(PASS4)
This module is used in passes 4,5,8,10.
#SECT(PASMAP)
This module is used in passes 4,5,8,10.
#SECT(PASDAT)
This module is used in passes 0,1,2,3,4,5,6,7,8,9,10,11.
#SECT(PASTAL)
This module is used in passes 1,2,4,5,7,8,9,10,11.
This module makes machine-dependent decisions about the allocation of types
on the target machine.
#SECT(PASVAL)
This module is used in passes 1,2,7,9,11.
This module contains the utility routines for the creation of value nodes in
the symbol table.
#SECT(PASIFU)
This module is used in passes 1,2,4,5,8,10.
This module contains utilities for manipulating the intermediate form.
All the procedures in this module operate on a "current tuple chain".
This chain corresponds to the procedure body currently being compiled.
#SECT(PASLOG)
This module is used in passes 1,3,4,5,8,10.
#SECT(PASERR)
This module is used in passes 1,2,3,7,9,11.
This module contains all error recording, formatting, and reporting routines.
#SECT(PASMTH)
This module is used in passes 1,2,4,5,7,8,9,10,11.
This module contains miscellaneous mathematical functions for use
elsewhere in the compiler.
#SECT(PASCV)
This module is used in passes 1,2,3,4,5,8,10.
#SECT(PASSW)
This module is used in passes 1,2,3,5,6,8,10.
#SECT(PASSET)
This module is used in passes 2,3,5,8,10.
This is the bit-set manipulation module.  Vectors of bit sets are used for a 
number of functions throughout the optimizer.  Since these vectors and
sets must be dynamically created, and their manipulation is repetitive, the
creation and manipulation of bit set vectors has been centralized in 
this module.
#PAR()
Each bit set vector is referred to with a descriptor, which must be declared
with type "svector".  Such a descriptor is initialized by NewSvector,
and must be passed as a parameter to all the other routines in this module.
#SECT(PASDMP)
This module is used in passes 1,2,5,8,10.
#ENDLEVEL()
#SECT(Runtime Modules)
The Pascal Runtime also includes many modules.  Following is a description
of them.
#BEGINLEVEL()
#SECT(RTSYM)
This universal file contains the general macros and symbols used
by the PASCAL runtime.  It is searched at the start of every module.
#SECT(RTMON)
This file contains the primary support routines for PASCAL programs,
including stack and environment initialization, DEBUG interface,
and procedure and function interfaces.  The three modules in this file are 
PASMON, STACK, and PNTRY.
#ENDLEVEL()
#SECT(Debugger Modules)
Following is a brief descriptions of the PASCAL debugger modules.
#BEGINLEVEL()
#SECT(DEBLEX)
DEBLEX is the Pascal Debugger's lexical analyzer.
#SECT(DEBPTR)
DEBPRT contains the Pascal Debugger's routines for printing of, and
assigning to, user program variables.
#SECT(DEBIO)
DEBIO is the Pascal Debugger's package of teletype I/O routines.  By
using this mechanism, independent of the normal Pascal (buffered) I/O, the
Debugger avoids interfering with the user program's I/O.
#SECT(DEBBOL)
DEBBOL contains the Pascal Debugger's code for parsing and evaluationg
a boolean expression.
#SECT(DEBSYM)
DEBSYM provides the debugger's interface to the symbol table files.
#SECT(DEBSCP)
DEBSCP contains the Pascal Debugger's routines associated with
establishing a scope stack.
#SECT(DEBUG)
DEBUG$ contains the Pascal Debugger's entry point and much of the command
line parsing logic.
#SECT(DEBDMP)
DEBDMP contains the routines which implement the Pascal Debugger
.DISPLAY command.
#SECT(DEBBRK)
DEBBRK contains the Pascal Debugger's routines associated with setting
and clearing breakpoints.
#SECT(DEBREF)
DEBREF contains the debugger's routines for parsing a reference or
constant and constructiong a descriptor to describe the parsed object.
#ENDLEVEL()
#SECT(Maintenance Procedures)
#SECT(Fixpoint Testing)
Before any type of release is done, a fixpoint test is run on TYMSHARE.
The new compiler is compiled in account PASDEV12 using the compiler
in account PASDEV10.  The compiler is then compiled in account PASDEV19
using the compiler in account PASDEV12.  These two versions are then
compared.  If they are identical, we have ensured that the compiler at
least will compile itself correctly.  The compiler can then be rolled back
from PASDEV10 to PASDEV1.
#PAR()
Following are the exact fixpoint procedures:
#BEGINLEVEL
#SECT(Back up PASDEV1)
Before a fixpoint is started, the contents of PASDEV1 should be copied
to the end of our save tape on TYMSHARE.
#BEGINFIGURE()
RUN BATCH
RUN
Company Name: ^uMDSI|u
Project Code: ^urelease|u
Area/Phone/Ext: ^u<your phone #>|u
Requested By: ^u<your name>|u
Please mount the tape in slot number R15713 (control
number is 82849) and take a named save set of all
files in account PASDEV1.  The save set name should
be "P<version number>".  Please append the save set
to the current contents of the tape.
<ctrl D>
The tape should be kept at Tymshare.
<ctrl D>
#ENDFIGURE()
Record the PPR number for possible future reference.
If there is any problem with the request, Tymshare will
want to know the PPR number.  The phone numbers are:
(408)446-6000 or (408)446-7705.  The latter number is
for system 55 operations.
#SECT(Compile the compiler on PASDEV12)
#BEGINITEM()
#ITEM()
Sign on to (not gfd into) account PASDEV12.
#ITEM()
Delete *.*
#ITEM()
Create a file PASCAL.BLD with only one record: '@[31024,320170]'.
This file serves as a pointer to the PASCAL.BLD file on PASDEV10.
#ITEM()
Run BUILD to create a command file to compil compiler:
#BEGINFIGURE()
^uDO\BUILD|u
** Build Version 2.0 **
BUILD:  ^uC*;QD|u
xxxBLD.CTL created
#ENDFIGURE
This creates the file xxxBLD.CTL, where xxx is your job number.
#ITEM()
Edit the file xxxBLD.CTL to run the compiler in [,320170] (PASDEV10)
rather than the compiler in [,320155] (PASDEV1).  Make sure that no
lines contain more than 80 characters.
#ITEM()
Start the batch compile as follows:
#BEGINFIGURE()
.^uR\PERP|u
:^uDATE|u
ENTER YOUR DATE PERIOD
:^uTODAY.|u
:^uINSERT|u
WHAT HOUR (0 to 23)?   ^uhh|u
       [this is the hour portion of current time]
COMPUTER    ^u55|u
PROJECT CODE     ^uFIXPOINT|u
COMMAND FILE NAME     ^uxxxBLD.CTL|u      
BUILDING CIRCUIT TO MASTER PERP SYSTEM
:^uLIST|u
<date> <time>, CPN: 55,PASDEV12;FIXPOINT:xxxBLD.CTL
END OF JOB
:^uQUIT|u
#ENDFIGURE
To see if the batch job has started, type "SYS" to the system prompt.
The response will give information on how many jobs you have running
and what is currently happening.  When the batch compile is done
you will have mail waiting.  It should say that the job is complete.
Check the xxxBLD.LOG file for any errors which may have occured.  There should
be none.  If there are no errors, continue.  If there are any, find
out why.
#ITEM()
Once everything is correctly compiled, link everything using BUILD:
#BEGINFIGURE()
.^uDO BUILD|u
** Build Version 2.0 **
BUILD:  ^uL*|u
#ENDFIGURE
#ITEM()
Once the new compiler is linked, run the three initialization programs:
#BEGINFIGURE()
.^uRUN\P10INI|u
.^uRUN\VAXINI|u
.^uRUN\M68INI|u
#ENDFIGURE
P10INI must be run to compile the compiler in account PASDEV19.  The other
two initialization programs are run simply to ensure that they still run.
#ITEM()
Copy (PASDEV10)PASERR.TXT to same.  This is the file containing the text
of the error messages.
#ENDITEM()
There is now a complete compiler in account PASDEV12.
#SECT(Compile the compiler in account PASDEV19)
#BEGINITEM()
#ITEM()
Sign on to (not gfd into) account PASDEV19.
#ITEM()
DEL *.*
#ITEM()
Copy (PASDEV12)xxxBLD.CTL to same.
Edit it to use the [,320207] (PASDEV12) compiler.
#ITEM()
Use QED to create PASCAL.BLD with its only record being
'@[31024,320207]'.  This points to (PASDEV12)PASCAL.BLD.
#ITEM()
Start the batch compile as described in step #6 for PASDEV12.
#ITEM()
Once everything is correctly compiled, link everything using BUILD:
#BEGINFIGURE()
^uDO\BUILD|u
BUILD:  ^uL*|u
#ENDFIGURE()
#ITEM()
Create a .COM file to find the differences between the SHR's 
and LOW's as follows:
#BEGINFIGURE()
.^uFILE\FILE.TMP\=\*.SHR,\*.LOW|u
.^uDO\QED|u
*^uL\FILE.TMP|u
*F\NOT(/SHR/OR/LOW/)D
CONFIRM?  ^uN|u
*^u1,$S/\\/./|u
*^u1,$S::DIFF:|u
*^u1,$S@@,(PASDEV12)@|u
   (* This file must be split into two files,
      since it will be too big for direct COM
      execution. *)
*^uOPEN\SHR.TMP|u
*^uF/.SHR/.OUTPUT;.D|u
*^uCLOSE|u
*^uA|u
^uR\(UPL)COM;SHR.TMP|u
^u<cr>|u
^u.|u
*^uW|u
OLD FILE FILE.TMP[31024,320216]?  ^uY|u
*^uQ|u
#ENDFIGURE
The form of this COM file will be:
#BEGINFIGURE()
DIFF PASCAL.LOW,(PASDEV12)
#ENDFIGURE()
Execute this .COM file.  It will print out any differences between
the .LOW and .SHR files in PASDEV12 and PASDEV19.  If they are not
the same, figure out why.  If they are the same, the new files in
PASDEV19 can be removed.  ^uNOTE:|u  If any modules are being compiled
in DEBUG mode, there will be differences in the .SHR files.
#ENDITEM()
#SECT(Copy files to PASDEV1)
#BEGINITEM()
#ITEM()
Sign on to PASDEV10.
#ITEM()
Create one or more COM files to do the copy by doing the following:
#BEGINITEM()
#ITEM()
Get a file, BOTH.TMP, which contains a list of files in both accounts
and a file, ONLY.TMP, which contains a list of files in just the
PASDEV10 account as follows:
#BEGINITEM()
#ITEM()
Make two files as follows:
#BEGINFIGURE()
.^uFILES\FILE10.TMP\=\*.*/ALP|u
.^uFILES\FILE1.TMP\=\(PASDEV1)*.*/ALP|u
#ENDFIGURE
#ITEM()
Use QED to delete the first five lines of each.
#ITEM()
#BEGINFIGURE()
.^uDO\COMMON|u
*^uBOTH.TMP\=\FILE1.TMP\*\FILE10.TMP|u
*^uONLY.TMP\=\FILE10.TMP\-\FILE1.TMP|u
*
#ENDFIGURE
#ENDITEM()
#ITEM()
Edit the BOTH.TMP file until it contains only those files which need to
be copied to PASDEV1.  Files which can be deleted are: 
#BEGINITEM()
#ITEM()
*.REL
#ITEM()
*.SHR
#ITEM()
*.LOW
#ITEM()
*.ENV
#ITEM()
*.DEB
#ENDITEM()
PASCAL.BLD can only be deleted when it has no significant differences from
the PASCAL.BLD on PASDEV1.
#ITEM()
Turn the BOTH.TMP file into one or more .COM files to do the copy.
#ITEM()
Check the ONLY.TMP file for any new compiler files.  If there are
any, add them to the .COM file.
#ENDITEM()
#ITEM()
Sign on to PASDEV1 and use the .COM files to copy the files from PASDEV10.
#ITEM()
Unprotect all .SHR and .LOW files to allow comparison checking:
#BEGINFIGURE()
DECL RD RD NO *.SHR, *.LOW
#ENDFIGURE()
#ENDITEM()
#SECT(Backup old executable compiler to PASDEV19)
#BEGINITEM()
#ITEM()
Sign on to PASDEV19.
#ITEM()
Make a .COM file to copy the following files from PASDEV1 to
PASDEV19 and execute it.  SHR's and LOW's which must be included are:
#BEGINITEM()
#ITEM()
PASCAL
#ITEM()
PASCMD
#ITEM()
PASANL
#ITEM()
P10SHP
#ITEM()
P10OCG
#ITEM()
P10CCG
#ITEM()
VAXCCG
#ITEM()
PASLST
#ITEM()
M68CCG
#ENDITEM()
Other files which must be copied are:
#BEGINITEM()
#ITEM()
P10INI.ENV
#ITEM()
VAXINI.ENV
#ITEM()
M68INI.ENV
#ITEM()
PASERR.TXT
#ITEM()
PASLIB.REL
#ENDITEM()
#ENDITEM()
#SECT(Compile everything in PASDEV1)
#BEGINITEM()
#ITEM()
Sign on to PASDEV1.
#ITEM()
Reprotect all .SHR and .LOW files:
#BEGINFIGURE()
DECL RUN RUN NO *.SHR, *.LOW
#ENDFIGURE
#ITEM()
Make a PERP file to compile everything:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD:  ^uC*;QD|u
#ENDFIGURE
#ITEM()
Edit the file created above to use the PASDEV10 compiler ([,320170]).
#ITEM()
Run PERP as previously described to do the batch compile.
#ITEM()
Copy over any REL's corresponding to library changes from PASDEV10.
This includes PASLIB.REL and all REL files corresponding to any new
MAC files.
#ITEM()
Run SETVER to set the version number:
#BEGINFIGURE()
.^uDO\SETVER|u
Old Version = <version number>
New Version: ^u<new version number>|u
#ENDFIGURE
#ITEM()
Unprotect all SHR and LOW files to link up new compiler:
#BEGINFIGURE()
.^uDECL\ALL\NO\NO\*.SHR,\*.LOW|u
#ENDFIGURE
#ITEM()
Link the new compiler:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD:  ^uL*|u
#ENDFIGURE
#ITEM()
Run all three initialization programs.
#ITEM()
Reprotect all SHR and LOW files:
#BEGINFIGURE()
.^uDECL\RUN\RUN\NO\*.SHR,\*.LOW|u
#ENDFIGURE
#ENDITEM()
#SECT(Rebuild the compiler in PASDEV12)
#BEGINITEM()
#ITEM()
Sign on to PASDEV12.
#ITEM()
Delete *.*
#ITEM()
Create PASCAL.BLD to point to PASDEV1 ([31024,320155]).
#ITEM()
Create PERP file:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD:  ^uC*;QD|u
#ENDFIGURE
#ITEM()
Rename FIXPT.CTL = xxxBLD.CTL.
#ITEM()
Use QED to change the LOG name in FIXPT.CTL to FIXPT.LOG.
#ITEM()
Run PERP as before.
#ITEM()
Link everything:
#BEGINFIGURE()
DO BUILD
L*
#ENDFIGURE()
#ITEM()
Sign on to PASDEV1.
#ITEM()
Unprotect all SHR and LOW files to allow comparison checking:
#BEGINFIGURE()
.^uDECL\RD\RD\NO\*.LOW,\*.SHR|u
#ENDFIGURE
#ITEM()
Create COM files to compare the LOW and SHR files in PASDEV1 to
PASDEV12.  The form is:  
#BEGINFIGURE()
DIFF PASCAL.LOW,(PASDEV12)
#ENDFIGURE()
#ITEM()
Do the compares.  If they are identical, continue.  Otherwise find
out why not.
#ITEM()
Delete the Com files just used.
#ITEM()
Reprotect the SHR and LOW fils:
#BEGINFIGURE()
.^uDECL\RUN\RUN\NO\*.SHR,\*.LOW|u
#ENDFIGURE
#ITEM()
Sign on to PASDEV12.
#ITEM()
Delete *.*
#ENDITEM()
This is the end of the internal release.
#ENDLEVEL()
#SECT(Version Numbers)
#SECT(Adding a new code generator)
#SECT(Releasing a new cross-compiler code generator)
#BEGINITEM()
#ITEM()
Copy the pertinent source (.PAS) files from PASDEV10 to PASDEV1.
Also check for .INC and .TYP files.
#ITEM()
Delete the copies from PASDEV10.
#ITEM()
Unprotect the code generator .LOW and .SHR files:
#BEGINFIGURE()
.^uDECL\ALL\NO\NO\M68CCG.LOW,\M68CCG.SHR|u
#ENDFIGURE()
#ITEM()
Compile and link the new modules:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD: ^uC\(M68EMU,M68CLL);L\C|u
#ENDFIGURE()
#ITEM()
If the .TYP file changes, recompile the entire code generator.
#ITEM()
Reprotect the code generator .LOW and .SHR files:
#BEGINFIGURE()
.^uDECL\RUN\RUN\NO\M68CCG.LOW,M68CCG.SHR|u
#ENDFIGURE()
#ITEM()
Change the version number with SETVER.
#ITEM()
Unprotect the .LOW and .SHR files that referece PASVER.REL which
contains the new version number:
#BEGINFIGURE()
.^uDECL\ALL\NO\NO\PASCAL.LOW,PASCMD.LOW,PASLST.LOW,-
VAXCCG.LOW,PASCAL.SHR,PASCMD.SHR,PASLST.SHR,VAXCCG.SHR|u
#ENDFIGURE()
#ITEM()
Link these modules:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD: ^uL\PASCAL,PASCMD,PASLST,VAXCCG|u
#ENDFIGURE()
#ITEM()
Reprotect these modules:
#BEGINFIGURE()
.^uDECL\RUN\RUN\NO\PASCAL.LOW,PASCMD.LOW,PASLST.LOW,-
VAXCCG.LOW,PASCAL.SHR,PASCMD.SHR,PASLST.SHR,VAXCCG.SHR|u
#ENDFIGURE()
#ITEM()
Create the tape to send to ADP:
#BEGINITEM()
#ITEM()
Switch to PASCAL10C.
#ITEM()
Link the code generator and the version number modules:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD: ^uL\M68CCG,VAXCCG,PASCAL,PASCMD,PASLST|u
#ENDFIGURE()
#ITEM()
Run FILEX:
#BEGINFIGURE()
.^uDO\COM|u
^uFILEX|u
^u<cr>|u
#ENDFIGURE()
#ITEM()
Copy the new .DEB files from PASDEV1.
#ITEM()
Submit a batch request to create a tape with the 5 new .EXEs
and all new .DEBs.
#ITEM()
Delete all new .SHR and .LOW files.
#ENDITEM()
#ENDITEM()
#SECT(Making a tape)
After the fixpoint is run, a tape can be made on TYMSHARE and sent
to ADP.  The procedure for making a tape is:
#BEGINITEM()
#ITEM()
Sign on to PASCAL10C.
#ITEM()
Create a PASCAL.BLD file pointing to PASDEV1 ([31024,320155]).
Make sure that the heap start address is correct in the PASCAL.BLD
file.  It is specified near the end of the PASCAL.BLD file.
Internally, a heap start address of 45000 is used.  For use by QA or
ANC, a heap start address of 25000 must be used.  If the address is
wrong, copy the PASCAL.BLD file to (PASCAL10C), change the search
list in the beginning of the file, and change the heap start address.
#ITEM()
Run BUILD as follows:
#BEGINFIGURE()
.^uDO\BUILD|u
BUILD:  ^uL*|u
#ENDFIGURE
#ITEM()
Convert all SHR's to EXE's:
#BEGINFIGURE()
.^uDO COM|u
FILE = ^uFILEX|u
#ENDFIGURE
#ITEM()
Copy (PASDEV1)PASERR.TXT to same.
#ITEM()
Do the batch request for tape as follows:
#BEGINFIGURE()
.^uR\BATCH|u
:^uRUN|u
company name: ^uMDSI|u
project name: ^uRELEASE|u
phone number: ^u<your phone number>|u
your name: ^u<your name>|u
[enter the following information]
Please assign a mag tape to me and take a save set 
of all files on PASCAL10C.  The save set should 
be named "P<version #>".  Using DEC's utility 
program "BACKUP", please make the tape 9-track,
1600 BPI, Interchange Mode.
<control D>
Delivery instructions:

Please ship via Federal Express Overnight Delivery 
to ADP:

ADP Network Services
Customer Service
175 Jackson Plaza
Ann Arbor, MI  48106
From: <your name>/MDSI

ATTENTION - special instructions:
Please enclose a note to ADP Network Services to call me when the 
tape arrives at: <your phone #> or <Paul's phone #>.

Thank-you.
<control D>
#ENDFIGURE
#ITEM()
Record the PPR number you get back.  This is necessary if you have to
call the operator about any problems.
#ITEM()
Call ADP Customer Service at 769-6800.  Tell them who you are and that
you are having a tape shipped there via Federal Express and want
to trade it with the one in slot C1610.  Have them allow read only for
[52250,*] on the new tape.  The account number for the tape is [52250,237].
The password is ISDM.
#ITEM()
Call Bob Nolan (the courier) at x57444 and have him pick up the old tape
from ADP.
#ENDITEM()
#SECT(Transporting a tape)
#SECT(Reading a tape)
When a release tape arrives at ADP it should be loaded there.  This is done
as follows:
#BEGINITEM()
#ITEM()
Sign on to [52250,222]
#ITEM()
Reprotect the DEB and EXE fils.
#BEGINFIGURE()
.^uPROT\<055>\*.DEB,\*.EXE|u
#ENDFIGURE
#ITEM()
Mount the tape:
#BEGINFIGURE()
.^u$ASSIGN\MTA:C1610,ISDM,DISABLE,9-TRACK,1600BPI\PLEASE|u
#ENDFIGURE
C1610 is the slot number for the tape, ISDM is the password.
#ITEM()
Once the tape is mounted, the files can be copied:
#BEGINFIGURE()
.^uR\BACKUP|u
/^uTAPE\MTA:|u
/^uDENSITY\1600|u
/^uINTERCHANGE|u
/^uREWIND|u
/^uOKSUPERCEDE|u
/^uRESTORE\*.*|u
!^uFILES|u
(get out of backup)
#ENDFIGURE
#ITEM()
Run SETPPN to change the ppn fields in M68CCG.EXE:
???
#ITEM()
Delete M68CCG.EXE and replace it with M68CCG.NEW.
#ITEM()
Reprotect the DEB and EXE files:
#BEGINFIGURE()
PROTECT <255> *.DEB, *.EXE
#ENDFIGURE
#ENDITEM()
#SECT(File transfers)
#SECT(Preparing a Release Letter)
#SECT(Running certain necessary utilities)
#BEGINLEVEL
#SECT(Build)
#SECT(Setver)
#SECT(QED)
#SECT(Common)
#SECT(PERP)
#SECT(Batch)
#ENDLEVEL
#SECT(Using certain necessary monitor commands)
#BEGINLEVEL
#SECT(Filestatus)
#SECT(Systat)
#SECT(Diff)
#SECT(Declare)
#SECT(Copy)
#SECT(Rename)
#SECT(Delete)
#ENDLEVEL
#TOC
    Sv#n