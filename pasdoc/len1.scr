$margin 10 $width 75
$center
Language Enhancement Notes #1

Macro-Like Features for Pascal

24 January 1980
$title left 'LEN-#1' left 'Macro-like Features for Pascal' left '24 January 1980'
$just
$skip 4
$para 5
This paper discusses a collection of possible enhancements to Pascal and
the new compiler.
All of these enhancements are related to problems of replacement or substitution
-- that is, the ability to indicate that something stands for or is to be
replaced by something else.
$skip $need 4
1.\\\&A Binding With Statement&
$skip $para 5
The Pascal "with" statement can be very useful.
When a portion of code contains multiple references to fields in a record,
and the record is designated by a long string of pointer dereferences, field
selectors, and array subscripts, the use of a "with" statement can let you
fit an expression on one line instead of three or four, and
can enable the compiler to generate much more efficient code when you haven't
requested optimization.
Unfortunately, the "with" statement also has two striking disadvantages.
$skip $need 2 $para 5
Most serious, it can serve as an invitation to insidious programming errors.
If a record type has a great many fields in many different variants, and
a record of that type is used in a "with" statement which controls a large
amount of code, it is easy to forget that the record contains a field whose
name is the same as the name of some variable which is referred to in the
controlled code.
$skip $need 2 $para 5
Another drawback of the "with" statement is that it is so restricted.
For example, if P^.A[I].B^ is a record, then a "with" statement will make all
of its fields accessible;
but if it is an array, then there is no way to make all of its elements
easily accessible.
Also, there is no easy way to refer to the fields of P^.A[I].B^ and
Q^.A[I].B^ at the same time, since they have the same names.
$skip $need 2 $para 5
An alternative to the "with" statement is a "binding with" statement.
Some possible syntaxes for this statement might be:
$skip $verb
     &bind& <identifer> = <expression> &do& <statement>
     &letting& <identifier> = <expression> &do& <statement>
     &where& <identifier> = <expression> &do& <statement>
     &with& <identifier> &bound& &to& <expression> &do& statement
     &with& <identifier> &binding& <expression> &do& <statement>
$skip $need 2 $just
Within the scope of the "bind" statement, the identifier would serve as a
synonym for the specified expression.
Like the "with" statement, the "bind" statement would evaluate its expression
before executing the controlled statement, so that if the expression was a
variable expression, the identifier would refer to the same variable
throughout the statement.
$skip $need 2 $para 5
Unlike a "with" statement, a "bind" statement could bind any expression to its
identifier.
References to the bound expression would have to be explicit (using the
synonymous identifier), rather than implicit as in the "with" statement.
Since references to fields of bound records would be explicitly indicated,
there would be no surprises, and fields from two bound records of the same
type could be accessible at the same time.
Since the bound expression could be an array, it would be possible to access
multiple elements of a pointer-accessed array efficiently; for example:
$skip $need 3 $verb
     bind a to pa^ do
        for i := 1 to n do
           a[i] := 0;
$skip $just $need 2
It would also be possible to bind an involved scalar or real expression,
to allow explicit indication of common subexpressions when optimization
was not being used.
$skip 2 $need 4
2.\\\&External Names&
$skip $para 5
As the compiler now works, the external name of a public or external entity
(that is, the name which is emitted in the relocatable binary file for use
by the linker) is obtained by truncating the internal name of the entity to
some system-dependent length (six characters for the PDP-10, fifteen for the
VAX).
Although this system works, it is unsatisfactory for several reasons.
$skip $need 2 $para 5
In general, we have been very careful to ensure that programmers do not need
to worry about implementation details when writing MDSI Pascal programs.
However, the external name convention forces programmers to guarantee that
all the distinct public and external names in a program differ in their
first n characters, where n depends on the system for which the program
is being developed, even though this restriction has nothing to do with the
program itself.
$skip $need 2 $para 5
A problem of more immediate practical importance is that, for the DEC-10,
n\=\6.
The requirement that all external names differ in their first six characters is
a very stringent one, which leads either to such systematic but unpleasant
contrivances as DRWEFP_DRAW_EDGE_FROM_POINT, or to periodic surprises as name
conflicts are encountered during the development of a program.
$skip $need 2 $para 5
Obviously, what we need is some way of specifying, for a public or external
entity, both the name by which it will be known within the module being
compiled, and the name by which it will be known to the loader.
Several simple solutions suggest themselves.
First, public and external declarations could be enhanced with an optional
clause to specify the external name; for example, "external procedure
draw_edge_from_point named drwefp ( ... )".
Second, a new external names section could be added to the declarations part
of a module; for example, "external name draw_edge_from_point = drwefp".
Third, if the compiler had a general renaming or synonym capability (see
the next section), then that could be used to obtain the same effect.
All of these mechanisms would be optional, with the present
convention remaining as a default.
$skip $need 2 $para 5
I prefer the second solution above.
Of the suggested solutions, it most completely divorces the identifier by
which a procedure is known within a module, which is a programming consideration,
from the name by which it is known outside the module, which is a system
packaging consideration.
It would allow a program to be written without any considerations of external
naming, and then augmented with a set of external names (probably in an include
file) when the modules of the system were ready to be combined.
Such an include file could be easily replaced, if necessary, when the program
was recompiled for another target system.
This solution would also make it easy to resolve name conflicts when combining
separately developed pieces of software in a single system.
$skip $need 2 $para 5
The first solution has the disadvantage that it ties the external name
directly to the internal declaration.
The third solution would require that the external name be the "true" name of
the entity being declared, and that the internal name be merely a synonym.
It would also have the disadvantage that the entity would actually be accessible
within the module by either its internal name or its external name.
$skip 2 $need 4
3.\\\&In-line Procedures and Functions&
$skip $para 5
It is frequently desirable to write a very short function or procedure.
For example, a fairly complex expression may be used many times in a program;
the program will be more readable and less error-prone if the expression is
encapsulated in a function.
To promote functional independence, it may be desirable to require that all
accesses to some data structure be made via some set of primitive access
procedures and functions.
Unfortunately, with such small routines, as much code may be involved in calling
the routine as in executing it.
If such routines are used extensively, this may lead to a significant increase
in execution time.
Furthermore, for small enough routines, the code which must be generated to call
the routine may actually be as long as the routine itself.
This invalidates one of the main justifications for the closed subroutine, the
reduction of code size by eliminating redundant code.
$skip $need 2 $para 5
All of this suggests that on occasion, it may be desirable to compile a
procedure or function as an open subroutine (in effect, a macro) rather than
a closed subroutine.
While this decision could in principle be made by the compiler, it would
be simpler to provide a new option, INLINE, which could be specified on the
options clause on a procedure or function heading.
The INLINE option would indicate to the compiler that calls to this routine
are to be expanded in line rather than called out of line.
(This is a legitimate use of the options clause, since specification of a
routine as INLINE would affect only the code size and execution speed of a
program, and not its semantic properties.)
$skip $need 2 $para 5
When used in conjunction with optimization, in-line expansion would result in
further savings.
The expanded call would actually be part of the calling routine, so all of
the standard optimizations, such as common subexpression elimination, constant
propagation, and code motion, would automatically be applicable to it.
In fact, one can imagine a declaration such as
$skip $verb $need 4
     procedure A ( x: boolean ) options inline;
     begin  if x then
              do something
            else do something else  end;
$skip $need 2 $just
When called with "A(true)" or "A(false)", it would only be necessary to expand
one branch of the if statement.
$skip $need 2 $para 5
In-line routines would also present certain problems.
Obviously, a recursive routine could not be expanded in line.
Ill-advised specification of very large routines as INLINE could lead to
code size explosion.
Most serious, external routines could not be INLINE, and the declaration
of an in-line routine probably could not be included in a pre-compiled
declaration file.
To obtain the same advantages for in-line routine declarations that
pre-compiled declarations provide for
other declarations, it might be desirable to provide some sort of library
mechanism for in-line routine declarations.
$skip 2 $need 4
4.\\\Synonym Declarations
$skip $para 5
The most basic form of synonym declaration would be "synonym <name> = <name>".
It is already possible to equate type names, but this would make it possible
to provide synonyms for constant, variable, and routine names.
The main use of such a declaration might be to provide shorthand notations --
"synonym L\=\left_ptr; R\=\right_ptr".
Note that a synonym would make the new name refer to the same entity the old
name referred to at the point of the declaration.
If the old name were subsequently redeclared, it would have no effect on the
meaning of the new name.
$skip $need 2 $para 5
A more general synonym declaration would allow a name to be equated to any
variable or constant name, or any component thereof.
For example, "synonym START = head_vector[1].top_ptr".
Such synonyms could be useful in referring symbolically to variable components
with a special significance.
$skip $need 2 $para 5
Finally, synonym declarations might be parameterized --
"synonym START\(a) = a[1]".
Such declarations would be most useful if the equated variable were not
required to be resolvable at compile time -- for example,
"synonym Rest(x) = x^.next".
Such parameterized declarations would be very much like in-line functions,
except that they could be used on the left-hand side of an assignment.
Their main use would be in encapsulating data abstractions.
$skip 2 $need 4
5.\\\&Real Macro Definitions&
$skip $para 5
The final possibility to consider is adding a full-fledged macro capability
to the compiler.
The decision to add a macro feature to Pascal would be a major one, and would
have a great many ramifications, so I won't consider it in detail here.
However, I will mention a few of the design questions that we would have to
solve if we did add such a feature.
$skip $need 2 $para 5
(1) Would it deal with "tokens" at some level, or with arbitrary text strings?
$skip $need 2 $para 5
(2) Would it allow simple text substitution, text substitution with simple
parameter replacement, or some more complex features?
$skip $need 2 $para 5
(3) Would it apply only to program text, or to directive lines as well?
$skip $need 2 $para 5
(4) Would it be integrated with the language syntax (for example, a macro
declaration in the declarations section, and macro names with the same
scope as the procedure they are declared in), or independent of it?
$skip 2 $need 4
6.\\\&Recomendations&
$skip $para 5
The binding with statement could be a very useful addition to the Pascal
language, and would not be too difficult to implement.
I have two reservations about it.
First, it would be a significant change to the language -- more of a change,
for example, than the loop and exit statements, which really just provided
a simplified syntax for abilities which were already in the language.
Second, it would be a departure from the general
principle that all identifiers in a Pascal program are declared in a
program or routine heading, and have procedural scope.
The bound identifier would be implicitly declared by the statement, and its
scope would be limited to the statement.
(On the other hand, this might provide a precedent for a for statement with
an implicitly declared index variable some day.)
$skip $need 2 $para 5
I think the addition of an external names declaration section would be
profitable.
It answers a clear need, would be easy to implement, and does not have an
impact on any other area of the language.
I would suggest giving this enhancement a fairly high priority.
$skip $need 2 $para 5
There seems to be little doubt that the implementation of in-line procedures
would be a good thing.
They would have no effect on either the syntax or the semantics of the
language, and could probably provide noticeable efficiency improvements.
However, since they wouldn't really add any power to the language, and their
implementation would require a moderate amount of work (particularly if we
had to provide a library mechanism for them, too), 
I would suggest that we decide to implement in-line routines
sometime in the future, when our resources allow it.
$skip $need 2 $para 5
It seems to me that a synonym feature would be too elaborate and specialized
for its usefulness.
If we wanted synonyms, a simple text-replacement or simple parameterized
macro feature would probably be more useful.
However, I suspect that even the usefulness of a general macro capability
would not make up for the added complexity, particularly if we had the other
features I discussed above.
In fact, the only macro capability that I would consider worth-while would
be a simple text-replacement feature -- probably without even parameter
substitution.
    