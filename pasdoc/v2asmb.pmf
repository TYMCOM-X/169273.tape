$length terminal
$num off
$control off
$tra '\' '\'
$cen
Specification of Assembly Language
for Pascal Virtual Machine, Version 2
$ski 4
$title right 'PVM Assemb. Lang. Spec.' right 'March 6, 1981' right 'Page \'
$tab 9,17,25,33,41,49
$jus
#sect(Introduction)
This document specifies the assembly language for the Pascal Virtual Machine.
(See [1] for a specification of the PVM instruction set.)
This assembly language will be used both as input to the PVM
assembler and as the format for assembly listings produced by
the PVM Pascal cross-compiler.
#numsect(1,Source Statement Format)
Each line of the assembly language file comprises one source statement.
In each line, text following a semicolon (";")
(except in an ASCII string) is considered commentary
and is ignored.
Lines consisting of other than whitespace and comments can be of
one of three formats:
an instruction, a direct assignment statement or an assembler directive.
Whitespace may be freely inserted in any part of a line
except within a symbol.
#numsect(1,Source Statement Components)
#numsect(2,Character set)
Any ASCII character is legal in comments and ASCII strings.
Elsewhere, characters that have legal usages are:
symbol constituent characters (letters, digits, ".", "_", "$");
whitespace (blank, tab);
comment delimiter (";");
label delimiter (":");
assignment operator ("=");
psect origin operator ("\");
expression operators ("+", "-", "*", "/", "<", ">");
operand delimiter (",");
base and index register delimiters ("(", ")", "[", "]");
ASCII string delimiter ("'").
Uppercase/lowercase differences are not significant except
in ASCII strings.
#numsect(2,Numbers)
All integer numbers in PVM assembly language are in the
hexadecimal radix (the digits ten through fifteen are
represented by the letters "A" through "F").
Numbers must begin with a digit; a leading zero can be
used when the first digit of a number would otherwise be a letter.
Numbers are represented internally as 32-bit two's complement
integers, and their values must be representable in this format.
#numsect(2,Symbols)
Legal symbols in the PVM assembly language are from 1 to 15 characters long.
They must begin with an alphabetic character;
subsequent characters may be alphanumeric characters or
".", "_" or "$".
Symbols may be defined either by being used as labels or in
direct assignment statements.
The former symbols are called relocatable symbols;
the latter are called absolute symbols.
These symbols have values which are represented as 32-bit
two's complement integers.
$ski
Relocatable symbols are "relocatable with respect to" the
program section ("psection" or "psect") they are defined in.
Psection contributions from all modules are gathered together
and relocated by the linker.
See the description of the psect directive below (and [2])
for more information.
$ski
Symbols may also be defined in an external directive.
If a symbol is defined in this way, it is called an external symbol.
The value and absolute/relocatable status of an external symbol
are not known to the assembler.
$ski
Multiple definitions of a symbol are not allowed.
Relocatable symbols may be used before their definitions appear;
absolute and external symbols must be defined before being referenced.
#numsect(2,Expressions)
Expressions can appear in several contexts in a source statement.
Expressions, like symbols, can be either absolute or relocatable.
An expression is defined below.
$ski
$ver
term ::= symbol | number | '<' expression '>'
expression ::= term | '-' term | expression '+' term |
	expression '-' term | expression '*' term |
	expression '/' term
$ski
$jus
These operators have their usual algebraic meanings.
All operators have the same precedence; order of evaluation
is left to right, except that expressions within angle brackets are
evaluated before the operators outside the brackets are applied.
$ski
Numbers and absolute symbols are absolute expressions;
relocatable symbols are relocatable expressions.
Expressions that are one relocatable expression minus another
expression relocated with respect to
the same program section are absolute;
otherwise, an expression having a relocatable constituent
expression is itself relocatable.
A relocatable expression with constituent relocatable expressions
that are relocated with respect to different psections,
or that are relocated with respect to the same psection
but are not joined by the subtraction operator,
is not relocatable with respect to any specific psection;
the linker must do more complicated calculation to evaluate
such an expression.
$ski
The value of an expression must be representable as a
32-bit two's complement integer.
Expressions containing an external symbol
are not evaluated by the assembler;
the assembler emits object code that allows the linker to
evaluate the expression.
These expressions are called external expressions;
they may only be used in contexts where both absolute and relocatable
expressions are legal.
$ski
A special kind of relocatable expression is of the form symbol
followed by backslash ("\") followed by absolute expression.
In this expression, the symbol is a psection name, and
the meaning of the expression is the offset given by the absolute
expression from the origin of the psection in the image.
These expressions are called psection origin expressions;
they may not be used as components of more complicated expressions.
The linker must resolve these expressions,
and they also may only be used in contexts where both absolute
and relocatable expressions are legal.
#numsect(1,Instructions)
An instruction statement consists of an optional label followed
by an opcode mnemonic and operands.
A label consists of a symbol followed by a colon (":").
An opcode mnemonic must be taken from the list given in [1];
it is in the form of a symbol with one to six letters followed by a digit.
Between the opcode and the operands must be whitespace (blanks and/or tabs).
The operand field depends on which of the eight instruction formats
the opcode belongs to; the possibilities are listed below.
$ski
$ver
index-reg-ref ::= R1 | R2 | R3 | R4 | R5 | R6 | R7 | R8 |
			R9 | R10 | R11 | R12 | R13 | R14 | R15
reg-ref ::= R0 | index-reg-ref
any-expression ::= absolute-expression | relocatable-expression | 
		 external-expression | psect-origin-expression
r-operand ::= reg-ref
bd-operand ::= absolute-expression '(' reg_ref ')'
xbd-operand ::= bd-operand [ '[' index-reg-ref ']' ]
xa-operand ::= any-expression [ '[' index-reg-ref ']' ]
i-operand ::= absolute-expression
$ski 2
format-1-operands ::= relocatable-expression
format-2-operands ::= r-operand ',' r-operand
format-3-operands ::= r-operand ',' i-operand
format-4-operands ::= r-operand ',' xbd-operand
format-5-operands ::= r-operand ',' xa-operand
format-6-operands ::= r-operand ',' i-operand ',' bd-operand
format-7-operands ::= r-operand ',' xbd-operand ',' bd-operand
format-8-operands ::= absolute-expression
			[ ',' absolute-expression ] ...
$ski
$jus
For Format 1 instructions (branch instructions), the
relocatable expression must be relocatable with respect to the same psection
in which the instruction appears.
For Format 8 instructions (runtime calls), the first absolute
expression gives the value of the sub-opcode field;
succeeding absolute expressions give the values of the argument
words.
#numsect(1,Direct Assignment Statements)
Direct assignment statements cause the definition of
absolute symbols.
A direct assignment statement consists of a symbol,
an equal sign ("="), and an absolute expression.
#numsect(1,Assembler Directives)
Assembler directives cause the assembler to emit code
that invokes linker control functions or causes data storage
in the image.
A directive source statement consists of an optional label
field (for data storage directives only),
the directive name which begins with a period ("."),
and, possibly, directive operands.
If directive operands are given they must be separated from the
directive name by whitespace.
#numsect(2,Control Directives)
These directives cause the assembler to emit object code
that contains control information for the linker.
The directives are listed below.
$ski
$ver
name ::= symbol
alignment ::= digit
title-directive ::= '.TITLE' name
psect-directive ::= '.PSECT' name ',' alignment ','
			[NO]EXE ',' [NO]RD ',' [NO]WRT
global-directive ::= '.GLOBAL' symbol [ ',' symbol ] ...
external-directive ::= '.EXTERNAL' symbol [ ',' symbol ] ...
end-directive ::= '.END' [ relocatable-expression ]
$ski
$jus
The title directive establishes a module name for the assembly.
$ski
The psect directive establishes a new psection as the current one.
Instructions and data storage directives are assembled and
contributed to the current psection.
Each psection has its own assembler location counter.
The psection has a name, an alignment from 0 to 9 specifying
the power of two which the address of the beginning of the psection
must be a multiple of, and attributes of executability,
readability and writability.
See [2] for more information on program sections.
$ski
The global directive specifies a list of absolute or
relocatable symbols which are known to the linker
and which can be referred to as external symbols by other modules.
Similarly, the external directive specifies a list of symbols
which are to be resolved by the linker from other modules.
$ski
The end directive marks the end of the assembly source file.
If a relocatable expression is given, it denotes the program
transfer address.
#numsect(2,Data Storage Directives)
These directives cause data values to be stored in the
image or reserve space for uninitialized data.
They may be preceded by a label field, consisting of a symbol
followed by a colon.
The directives are listed below.
$ski
$ver
blkb-directive ::= '.BLKB' absolute-expression
byte-directive ::= '.BYTE' any-expression
word-directive ::= '.WORD' any-expression
longword-directive ::= '.LONGWORD' any-expression
ascii-directive ::= '.ASCII' delimiter character-string delimiter
$ski
$jus
The blkb directive causes a number of bytes equal to the
value of the absolute expression to be skipped and left uninitialized
in the object file.
The linker will cause all such skipped memory to be initialized
to zero.
$ski
The byte, word and longword directives cause data items of these
respective sizes to be allocated and initialized to the
value specified in the expression.
$ski
The ascii directive causes a series of bytes to be allocated
and initialized to the string of characters given.
The delimiter character is the single quote ("'");
single quotes within the string are represented by an
adjacent pair of single quote characters.
#pagsect(References)
$tra '\' ' '
$ski $jus
$ind 9
$par -5
\1.\\Gorgen, D.\P.  "Specification of Pascal Virtual Machine Version 2",
2/17/81.
$par -5
\2.\\Gorgen, D.\P.  "Specification of Object Language for
Pascal Virtual Machine, Version 2", 3/5/81.
 