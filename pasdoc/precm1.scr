$margin 10 $width 75
$title left 'Pre-Compiled Include Files' left '20 August 1979'
$just
1.\\\&Symbols&
$skip $para 5
We may divide the symbols of a Pascal compilation into two classes, &parametric
symbols& and &reference symbols&.
Parametric symbols are those whose meaning, or value, is fully defined at
compile time.
Reference symbols refer to some location in the program, so their values are
not fully defined until load time.
Reference symbols may be subdivided into local, public and external reference
symbols.
A local reference symbol denotes a location in the current compilation, and
is referenced only in the current compilation.
A public reference symbol denotes a location in the current compilation, but it
may be referenced in other compilations.
An external reference symbol references a location which is denoted by a public
reference symbol of the same name in some other compilation.
$skip $need 6 $para 5
The classes of symbols defined with the various sorts of Pascal declarations are:
$skip $verb $tab 5 30
	&Declaration&	&Class&

	simple constant	parametric
	public constant	public reference
	external constant	external reference
	type	parametric
	variable	local reference
	public variable	public reference
	external variable	external reference
	subroutine	local reference
	public subroutine	public reference
	external subroutine	external reference
$skip 2 $just $need 6
2.\\\&Directives and Declarations&
$skip 2
2.1\\&The ENVIRONMENT Directive&
$skip $para 5
The environment for a compilation is established with $ENVIRONMENT directives.
This directive has the form:
$skip $verb
     $ENVIRONMENT <file name>
$skip $just
where <file\name> is the name of an environment file.
The default extension for an environment file is ".ENV".
All $ENVIRONMENT directives must occur prior to the first non-directive line
in the compilation.
The environment files are read, and the information from them is added to the
symbol table of the current compilation.
$skip 2 $need 4
2.2\\&The SAVE Declaration&
$skip $para 5
An environment file can be created from the current compilation with a SAVE
declaration in the source file.
SAVE is a declaration keyword like CONST, TYPE, VAR, etc.;
it must occur as a top-level declaration.
Only a single SAVE declaration may occur in a compilation.
The SAVE declaration causes an environment file to be created representing the
environment of the current compilation, at the current point in the compilation.
(I.e., only declarations preceding the SAVE are included in the environment.)\
The environment file has the same name as the binary file for the compilation,
but with an extension of ".ENV".
$skip 2 $need 4
2.3\\&The MAKENV Option&
$skip $para 5
A SAVE declaration in a compilation will only be processed if the MAKENV option
is specified on the command line for the compilation.
This way, the environment file for a module only has to be recreated when the
environment declarations for the module are changed.
The desirability of this will become clear from section 5 below.
$skip 2 $need 4
2.4\\&The ENVONLY Option&
$skip $para 5
There is a command line option, ENVONLY, which instructs the compiler to perform
only as much of the compilation as is necessary to create an environment file.
This command is useful when it is desired to create an environment for a module
for which the interface and declarations have been defined, but no executable
code has been written.
ENVONLY implies MAKENV.
$skip 2 $need 4
3.\\\&What is an Environment?&
$skip $para 5
Each declaration in a compilation adds some information to the symbol table.
The environment at a given point in some compilation comprises all the
information which is in the symbol table initially (the standard environment),
plus the information from all the declarations which have been processed up
to that point in the compilation.
The information saved in an environment file when a SAVE declaration is
processed is a subset of the environment of the compilation at the point.
It does not include any of the standard environment information.
From the declarations in the current compilation, it includes all parametric
symbols and their definitions, all public reference symbols, and all
external reference symbols.
Public reference symbols in an environment file are referred to as defined
external symbols, since they are available as external reference symbols
to any other compilations which use that environment.
External reference symbols in an environment file are referred to as
undefined external symbols, since no declaration has been found for them.
$skip $need 2 $para 5
Notice that the environment for a compilation may include information from
multiple environment files.
Consequently, when the current environment is SAVEd, the saved environment may
include information from the current compilation and from all the saved
environments which were invoked for the current compilation.
This leads us to a concept of a saved environment file as comprising as set
of sub-environments, where each sub-environment contains the information
which was introduced by the declarations in a particular compilation.
$skip 2 $need 4
4.\\\&The Environment File&
$skip $para 5
The environment file contains a sub-environment list and a symbol list.
The sub-environment list contains a list of the compilation names (i.e.,
program, module or datamodule names) of the compilations which have made
contributions to this environment.
Along with each compilation name is the date, time and job number of the
actual compilation.
The symbol list contains all the symbol names which make up the environment.
Each symbol in the symbol list has a pointer to the compilation name of
the sub-environment in which it was declared, and a pointer to its definition.
In addition to the sub-environment and symbol lists, the
saved environment file contains definition information for the symbols.
$skip 2 $need 4
5.\\\&Processing an $ENVIRONMENT Command&
$skip $para 5
The compiler must keep a list of included sub-environments for each compilation.
This list is initially empty.
When an $ENVIRONMENT command is processed, the first thing to check is that the
specified file is a valid environment file.
Each name in the file's sub-environment list is then checked.
If a name is already in the sub-environment list for the compilation, and the
date, time and job number of the compilation are the same, then the
sub-environment has already been added from another environment file, and
it can be ignored.
If the date, time and job number do not match, a fatal environment mismatch
error occurs.
If a sub-environment in the file is not already in the list for the compilation,
then it is added.
$skip $need 2
When the sub-environment list has been processed, each name in the file's
symbol list is checked.
If the symbol's sub-environment was already in the list
for the compilation, then the symbol has already been added, and it may be
ignored.
If the symbol is not already in the symbol table, it may be added, along with
its definition.
Otherwise, there is a duplicate definition
error, unles one of the definitions is for an undefined external symbol, and
one is for a defined external symbol, and the sub-environment of the undefined
external symbol occurs in the same environment file as the sub-environment of
the defined external symbol.
$skip $need 2
A special error condition must occur if the compilation name of the current
compilation is the same as the compilation name of one of the included
sub-environments.
This would indicate circularity in the environment nesting.
$skip 2 $need 4
6.\\\&Processing a SAVE Declaration&
$skip $para 5
The processsing of a SAVE declaration is quite straightforward.
An environment file must be created.
The sub-environment list for this compilation must be copied to it, with an
additional entry for this compilation itself.
Then the set of top-level symbols for the compilation must be tested.
All parametric symbols must be written to the environment file.
Public and external reference symbols must be saved as defined and undefined
external symbols.
All definition information must be saved in some form.
(The choice of this saved definition form is the most challenging problem in
the implementation of the precompiled include file concept.)
  