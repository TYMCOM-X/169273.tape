


























                       PASCAL OVERLAY SYSTEM USER'S GUIDE





               Pascal Overlay System User's Guide                   








                          PROPRIETARY DOCUMENT INFORMATION
                          ----------- -------- -----------


          The material  contained  in  this  document  is  proprietary  and
          confidential  to  Tymshare, Inc., and is not to be used, 
	  reproduced or disclosed except in accordance with program  
	  license  or  with  written  permission  from  the  legal
          division  of  Tymshare, Inc.


                      Copyright (C) 1980 by Tymshare, Inc.     



               Pascal Overlay System User's Guide                   Page 1


          1.  Introduction


          This  section  summarizes  the  functions  provided by the Pascal
          overlay system and introduces the basic concepts underlying it.



          1.1. Functions provided


          The Pascal  overlay  system  provides  two  primary  capabilites.
          First,  the  main memory requirements of a program can be reduced
          by overlaying sections of the program.  The code for two or  more
          program  sections  is  allocated  the  same  primary memory.  The
          overlay system reads in the required sections of code at  runtime
          as necessary.  Second, the overlay system provides a facility for
          separately linking overlaid  sections  of  code  and  maintaining
          multiple  versions  of  the overlays.  Overlays may be maintained
          either as individual image files (i.e., .EXE  files)  or  may  be
          stored in a database file.  The overlay system includes a program
          for  maintaining  a  database  with  multiple  versions  of  each
          overlay.   The   overlay  version  or  file  may  be  dynamically
          specified or changed at execution time.  It is also worth  noting
          that  the  overlay  system  imposes no constraints on the calling
          sequence of overlays.  For example,  an  overlay  residing  in  a
          given  area  of  memory may call routines in other overlays which
          must reside in that same area of memory.



          1.2. Basic concepts


          An overlay is a section of  code  and  data  whose  location  and
          presence in memory at runtime is under the control of the overlay
          system.  At execution time the code of an overlay may  be  either
          sharable   or   non-sharable   by  multiple  users.  Non-sharable
          overlays and sharable overlays are described in separate sections
          below.   A   given  program  may  have  sharable  overlays  only,
          non-sharable overlays only or both.


          1.2.1. Non-sharable overlays

          Non-sharable overlays reside in  the  low  segment  and  are  not
          shared  when  multiple  users are running the same program.  Each
          non-sharable overlay is associated with a given area.  An area is
          a  region  of  primary memory which at execution time may contain
          the code of one of the (generally multiple)  overlays  associated
          with   it.   Programs   may   contain   multiple  overlay  areas.
          Non-sharable overlays may  have  multiple  versions.  Unless  the
          user specifies otherwise, a default version will automatically be



               Pascal Overlay System User's Guide                   Page 2


          obtained by the overlay system at execution time from  a  default
          database.  The  user  may specify at runtime that a version other
          than the default be obtained from the  database  file.  The  user
          may  also  specify  at  runtime that an overlay is to be obtained
          either from an alternative database or from a .EXE file.


          1.2.2. Sharable overlays

          Sharable overlays are not associated  with  declared  areas,  but
          rather  with  a  single  area  of  memory  reserved  for sharable
          segments (the high segment on the DEC-10).  The sharable  overlay
          containing  the main program is distinguished and is called MAIN.
          All public variables and constants which are to be visible across
          overlays   must  be  declared  in  MAIN.  Sharable  overlays  are
          obtained by the overlay  manager  from  a  single  file,  without
          separate  versions  or database capability.  However, the default
          file from which a sharable overlay is obtained may be overridden,
          except for MAIN, by execution time calls to the overlay system.



               Pascal Overlay System User's Guide                   Page 3


          2.  System Organization


          This section describes the major components of the overlay system
          and of an overlaid program.



          2.1. System components


          The Pascal overlay system is composed of three major  components.
          Each of these is described in a separate section below.


          2.1.1. Memory Description Language

          The  overlay  structure  of a program is described with a special
          language known as the Memory Description Language (MDL).  A  file
          containing  an MDL description must be created by the user when a
          program is initially overlaid.  The major  sections  of  the  MDL
          supply  the  following  information:  the  number and size of the
          overlay areas, the overlay module names and the area  which  each
          is  associated  with, the name of each PUBLIC symbol known across
          overlays, and the amount of  storage  to  be  reserved  for  each
          overlay module's static storage.


          2.1.2. Overlay Database Maintenance System

          Processing  of  the MDL and maintenance of overlay database files
          is done with a program known as the Overlay Database  Maintenance
          System  (ODMS).  ODMS  is  an  interactive  program; the user may
          enter commands to perform any of the following functions:
          a. translate the MDL into an internal form and write the internal
             form to a file,
          b. load  a  file  containing  a  previously  translated  internal
             representation of an MDL file,
          c. generate LINK command files and MACRO-10 source  files  to  be
             used in building overlay modules,
          d. insert  non-sharable  overlay  module versions into a database
             file,
          e. delete non-sharable modules or specific module versions from a
             database file,
          f. renumber   non-sharable   overlay  module  versions  within  a
             database,
          g. pack a database file (i.e., eliminate unused space),
          h. print information about an overlaid program or a database,
          i. check whether or not a rebuild of a module is  required  after
             an MDL change.





               Pascal Overlay System User's Guide                   Page 4


          2.1.3. The runtime overlay manager

          The overlay manager is a collection of runtime routines which are
          automatically loaded with the user program.  The overlay  manager
          has two major components.  First, the overlay manager initializes
          the user static storage when an overlay is read in for the  first
          time,  and  reads  in  the  code  of overlays as required.  These
          activities are transparent  to  the  user  program.  Second,  the
          overlay  manager  includes  several  user  callable  routines for
          dynamically changing  the  version  or  file  used  for  a  given
          overlay.  Note  that  use  of  this  capability requires explicit
          calls to the overlay manager in the user source code.



          2.2. Program components


          An overlaid program consists of components supplied by the  user,
          components  generated by the overlay system and routines from the
          Pascal runtime library.


          2.2.1. User code and data

          The code for sharable overlays, including MAIN, occupies the high
          segment  on  the  DEC-10.  Each sharable overlay forms a separate
          high segment; exactly one sharable overlay is resident in  memory
          at  any  given  time.  The  code  for  non-sharable  overlays  is
          relocated to the low segment by the overlay system.  At any given
          point  in  time  each  overlay  area in the low segment either is
          unoccupied or contains exactly  one  of  the  associated  overlay
          modules.  The  low  segment  also contains the static storage for
          all the modules of the system.  All  of  the  static  storage  is
          permanently   resident   in  memory.  If  the  DEBUG  keyword  is
          specified in the MDL SYSTEM section,  then  the  Pascal  Debugger
          will also be present.  If shared overlays are present (other than
          MAIN), the Debugger will be in the  low  segment;  otherwise  the
          Debugger is placed in the high segment.


          2.2.2. Transfer vectors

          The  separate  linking  of  overlays  has  several impacts on the
          overlaid program.  It permits overlays  to  be  changed  and  new
          versions  to  be  created  independent of the rest of the system.
          This capability is  achieved  by  having  all  references  across
          overlay   modules   indirect   through  transfer  vectors.  These
          transfer vectors are created by ODMS when the  BUILD  command  is
          given.  The  BUILD command writes a relocatable binary file (with
          the extension .SRL) which, among other things,  defines  a  local
          transfer  vector  (LTV).  The  local transfer vector precedes the
          module's code and contains code  to  transfer  control  to  those



               Pascal Overlay System User's Guide                   Page 5


          routines  within the overlay which can be called from outside the
          overlay.

          When the BUILD command  is  given  for  MAIN  the  MACRO-10  file
          created  defines  the  master  transfer  vector  (MTV).  The  MTV
          contains entries for all symbols  of  the  program  known  across
          overlay  modules.  This  includes  PUBLIC variables and constants
          declared in MAIN  which  must  be  accessible  in  other  overlay
          modules   and   all   PUBLIC  routines  callable  across  overlay
          boundaries.  The SYMBOLS section of the MDL defines the layout of
          the  MTV.  If  the  program contains sharable overlays other than
          MAIN, the MTV is placed in  the  low  segment,  otherwise  it  is
          placed in the high segment.

          The purpose of these transfer vectors is to isolate the effect of
          changes in one overlay module from the rest of  the  system.  The
          impact of specific changes on an overlaid program is discussed in
          a later section.


          2.2.3. Resident routines

          Frequently, a Pascal runtime  routine  is  called  from  multiple
          non-sharable  overlays.  In  order  to  reduce  the  size  of the
          non-sharable overlays, it may be desirable to link such a runtime
          routine  into  the  high  segments  of  the program.  If multiple
          sharable overlays are used, then a copy of  the  runtime  routine
          would  have  to  be  included  in every sharable overlay.  Pascal
          runtime routines  which  are  called  from  several  non-sharable
          overlays  and linked in each sharable overlay are called resident
          routines.  The SYMBOLS section of the MDL permits a symbol to  be
          declared  as  'IN  RESIDENT'  rather  than  in a specific overlay
          module.  ODMS  generates  local  transfer  vector   entries   for
          resident   routines  in  every  sharable  overlay.  The  routines
          themselves may be placed at different addresses in each  sharable
          overlay,  but the LTV entry for a resident routine will be placed
          by ODMS at the same offset in  each  LTV.  The  LTV  entries  are
          generated  before  the  entries  for other user declared symbols;
          this permits a given  sharable  overlay  to  be  rebuilt  without
          affecting  the  accessibility of resident routines.  User written
          routines may also be declared as  'IN  RESIDENT'.  However,  such
          routines  must meet a variety of restrictions; these restrictions
          are described in the next section.



               Pascal Overlay System User's Guide                   Page 6


          3.  Using the Pascal Overlay System


          This section describes the procedures required to  construct  and
          maintain an overlaid program.



          3.1. Programming restrictions


          An overlaid program must meet certain restrictions not imposed on
          non-overlaid programs.  These restrictions  include  source  code
          restrictions,  restrictions  on  use  of the Pascal Debugger, and
          restrictions on routines declared as resident.  The  use  of  the
          Pascal  Debugger  with overlaid programs is described in the 
          Pascal Debugger User's Guide.


          3.1.1. Source code restrictions

          All PUBLIC variables and constants which must be accessed  across
          overlay  boundaries must be declared in MAIN.  These publics must
          be declared in the SYMBOLS section of the MDL.  PUBLIC  variables
          and  constants  may  be  declared  within  a  Pascal module of an
          overlay as long as they are accessed  only  within  the  overlay.
          Such publics are not declared in the MDL.

          Pascal  allows  the  use  of  procedure  and  function variables.
          Procedure or function values are  created  either  by  passing  a
          routine  as  a parameter or by assigning a routine reference to a
          variable.  The following restriction on the use of routine values
          must  be  observed by the program:  if a routine value is created
          (i.e., a routine is used as a an actual parameter or assigned  to
          a  variable)  within  the  overlay module containing the routine,
          then that value may be used (to call the routine)  only  in  that
          same    overlay   module.   It   is   solely   the   programmer's
          responsibility  to  observe  this  restriction  since  violations
          cannot be detected by the compiler or the overlay system.


          3.1.2. User resident routines

          The  concept  of  resident routines is intended primarily for the
          Pascal runtime.  However, user routines may also be  declared  as
          resident  if they meet the following restrictions.  User resident
          routines may not use any static storage (i.e., variables  defined
          as  STATIC  or declared at the outermost level of scope), may not
          reference any PUBLIC variables or constants,  and  may  not  call
          other routines outside the resident.






               Pascal Overlay System User's Guide                   Page 7


          3.2. Operating Procedures


          The steps required to build an overlaid program are enumerated in
          this section.


          3.2.1. Compilation

          Two compiler options, MAINSEG  and  OVERLAY,  are  relevant  when
          compiling the modules of an overlaid program.  The MAINSEG option
          should be used when compiling  Pascal  modules  of  the  sharable
          overlay  MAIN if other sharable overlays are used by the program.
          If MAIN is the only sharable overlay in  the  program,  then  all
          modules  of  MAIN should be compiled without the overlay options.
          In  any  case,  all  overlays  other  than  MAIN,   sharable   or
          non-sharable, must be compiled with the OVERLAY option.


          3.2.2. Using ODMS

          The first command given to ODMS must be either a USE command or a
          COMPILE command.  The COMPILE command translates an MDL file into
          an  internal  representation.  The USE command loads the internal
          representation of an MDL  which  was  previously  compiled.  Thus
          before  any  of  the  other capabilities of ODMS can be used, the
          user must first  write  and  compile  (with  ODMS)  an  MDL  file
          describing the structure of the overlaid program.

          The  Digital  Equipment  Corporation  utility  GLOB is useful for
          determining all the external references of an overlay module.  It
          is  particularly  useful  for  determining  which  Pascal runtime
          routines are referenced by the overlay.  Pascal runtime  routines
          may  be  handled in either of two ways.  A runtime routine may be
          linked with each overlay using it.  This  may  be  the  preferred
          approach  for  a  runtime  routine  which is called from only one
          overlay, particularly  if  the  overlay  is  smaller  than  other
          overlays  occupying  the  same area.  If this method is used, the
          runtime routine names need not be declared in the MDL.  In  order
          to  use  this method effectively the user must know which runtime
          routines are called from each overlay  and  perhaps  the  overlay
          sizes.  A  simpler approach is to link every runtime routine with
          every sharable  overlay  used.  If  MAIN  is  the  only  sharable
          overlay  used,  then the runtime routines are declared in the MDL
          as "PROCEDURE IN MAIN".  If muliple sharable  overlays  are  used
          then the proper MDL declarais "PROCEDURE IN RESIDENT".

          In  the  DEC-10  runtime,  there  are  three  symbols  which  are
          constants rather than routines.  If  any  of  these  symbols  are
          referenced  by the user program, they must be declared as "VAR IN
          MAIN".   These   symbols   are   "SM.SS",   "SM.SD1",   "SM.SD2".
          Similiarly,  if  any  of the predefined variables TTY, TTYOUTPUT,
          INPUT or OUTPUT are used in a overlay other than MAIN, they  must



               Pascal Overlay System User's Guide                   Page 8


          be declared as "VAR IN MAIN".

          It  may  be useful to link the overlay without the files produced
          by the BUILD command to initially determine  appropriate  overlay
          area  sizes  and static storage requirements.  After the MDL file
          has been compiled without errors, the BUILD command  is  used  to
          create  the  various  command  and  auxilliary  files  needed  to
          generate an overlay.  A BUILD command  must  be  given  for  each
          overlay  module  of  the  program,  including  MAIN.  Each  BUILD
          command given (except a BUILD RESIDENT command)  results  in  the
          creation  of a relocatable binary file with the extension ".SRL".
          These object files define transfer vectors and symbol  addresses.
          A  link  command  file for the overlay module being built is also
          created.  The BUILD RESIDENT command may optionally be  given  to
          define  the  object  files  containing  any user written resident
          routines.  Subsequent  builds  of  sharable  overlays  will  then
          automatically  include  those  files  in  the  LINK  command file
          created.


          3.2.3. Linking the overlays

          The overlay modules, including MAIN,  may  be  linked  by  simply
          running  LINK and giving it the name of the command file produced
          by the BUILD command (preceded by an '@').


          3.2.4. Updating the database

          Non-sharable overlays may  be  entered  in  a  database  file  if
          desired.  Unless  overridden  by  runtime  calls  to  the overlay
          manager,  non-sharable  overlays  are  obtained  by  the  overlay
          manager  from  the  default database (the description of the ODMS
          UPDATE command describes the naming convention  for  the  default
          database).   The   ODMS   UPDATE  command  is  used  to  enter  a
          non-sharable overlay  into  a  specified  database  file  with  a
          specified version number.



          3.3. Changing an overlaid program


          This  section  describes  how to limit the impact of changes to a
          single overlay module and describes the impact of specific  types
          of changes.


          3.3.1. Designing an MDL description for future flexibility

          The  overlay  system  is designed to permit changes to individual
          overlays to be  made  independently  of  other  overlays  of  the
          program.  However,  to  achieve this goal the user must carefully



               Pascal Overlay System User's Guide                   Page 9


          design the MDL description of the program  to  allow  for  future
          flexibility.  A  change  to an individual overlay will not impact
          other overlay modules if the following two  conditions  are  met.
          First,  the  location  in  memory  of the major components of the
          program must not change.  This means the sizes and origins of the
          overlay  areas, the static storage areas and the transfer vectors
          must remain unchanged.  Second, existing transfer  vector  entrys
          must remain at the same offsets within the transfer vectors.  The
          MDL permits the user to explicitly control these factors.

          The AREA section of the MDL requires the user to specify the size
          of  each  overlay  area.  An  area  size  must be large enough to
          contain the code of the largest overlay  module  associated  with
          the  area.  However, to allow for future expansion of the size of
          the overlay modules the user should declare each area's  size  to
          be  larger than the minimum required.  The STORAGE section of the
          MDL allows the user to declare the size of each overlay  module's
          static storage and to give a total static storage area size to be
          allocated for the entire program.  Again the user  should  choose
          the  sizes  to  allow  for  future  expansion.  A linker map is a
          valuable aid in determining appropriate sizes for both the  areas
          and  static  storage  (but,  for  reasons  described  in the next
          paragraph,  all  compilations  must  have  been  done  with   the
          appropriate overlay option).

          The  STATISTICS  option of the Pascal compiler is also useful for
          determining area and static storage sizes.  When this  option  is
          used,  the  compiler  prints  the  size of the code, constant and
          static storage areas of the module or program.  The code sizes of
          each  module  of an overlay may be totaled to determine a minimum
          area size requirement.  The  constant  and  static  storage  area
          sizes  may  be  totaled  to  give  a  minimum size for the static
          storage of an overlay.  In a non-overlaid program, the  constants
          are  allocated  in  the  code area of the program.  However in an
          overlaid program, all  allocated  constants  are  placed  in  the
          static storage area along with static variables.  This guarantees
          that  the  constant  is  always  resident  in  memory.  This   is
          necessary  because a constant may be used as a parameter and have
          its address passed to a routine in another overlay.  If  MAIN  is
          the  only  sharable overlay in the program, constants declared in
          MAIN will be allocated in the code area since they will always be
          resident in memory.  Note that not all constants are allocated in
          memory; when possible constants appear as immediate  operands  of
          instructions.  The  constant area size printed by the compiler is
          the size of the allocated constants.

          The user has control over both the size and the  internal  layout
          of  the  transfer  vectors.  The  CONTAINS  clause of the MODULES
          section of the MDL determines the ordering of an overlay module's
          local   transfer  vector.  The  SYMBOLS  section  determines  the
          ordering of the  master  transfer  vector.  The  SYMBOLS  section
          permits  the  user  to  explicitly determine the size of the MTV.
          Both sections permit the user to  reserve  slots  in  a  transfer



               Pascal Overlay System User's Guide                   Page 10


          vector by using the reserved symbol FILLER.


          3.3.2. Determining the impact of a change

          The  impacts  of  specific kinds of changes are enumerated below.
          The term 'rebuilt' is used to imply the following actions:  using
          the ODMS BUILD command to regenerate the .SRL file for the module
          and relinking the module.

          1. A public var or const is  added  to  MAIN.  Whether  a  FILLER
             entry  is  available  or not, MAIN must be rebuilt, along with
             any overlay referencing the new symbol.
          2. A symbol is added to an overlay.  Whether a  FILLER  entry  is
             available or not, MAIN must be rebuilt, along with the overlay
             containing the new symbol and any overlay referencing the  new
             symbol.
          3. A procedure is added to the resident, and there is a FILLER IN
             RESIDENT entry available.  MAIN must be rebuilt; any  overlays
             referencing  the  new symbol must be rebuilt.  In addition, if
             any non-sharable overlay references the new symbol, then every
             sharable overlay must be rebuilt.
          4. A  symbol  is added to the resident, and there is no FILLER IN
             RESIDENT entry available.  Every sharable  overlay,  including
             MAIN,  must  be  rebuilt, along with any non-sharable overlays
             referencing the new symbol.
          5. The program is to be changed to or from debug mode.  MAIN  and
             all other sharable overlays must be rebuilt.

          Note  that in all the above cases, it is assumed that new entries
          in the SYMBOLS section are appended to the previous SYMBOLS list,
          and  also  to  the  end  of  the CONTAINS clause for that module.
          Should the new SYMBOLS section overflow the SIZE  clause  in  the
          SYMBOLS section header, the entire system must be rebuilt.  If an
          overlay overflows its  private  static  area,  and  the  area  is
          increased  in  size,  all  non-sharable overlays must be rebuilt,
          along with MAIN, and any other  sharable  overlay  whose  STORAGE
          declaration   follows  the  overflowed  one.  If  a  non-sharable
          overlay overflows its code area, and the  size  of  the  area  is
          increased,  MAIN  must  be  rebuilt,  along with any non-sharable
          overlay whose code area follows the overflowed  one.  The  static
          storage  area  for  MAIN is predefined, and cannot be overflowed.
          Finally, note that ODMS's VERIFY command may be used to determine
          the extent of rebuilding necessary after system changes.



               Pascal Overlay System User's Guide                   Page 11


          4.  The Memory Description Language


          This  section  describes  the Memory Description Language or MDL.
          The BNF used in this section is fairly standard.  Square brackets
          indicate  optional  items on the right hand side of a production.
          If the closing square bracket is followed by  a  plus  sign,  the
          construct  must  appear  at  least  once  and  may  optionally be
          repeated.  Reserved words in the MDL are capitalized  throughout.
          Parentheses  are  used to indicate a grouping of items, separated
          by vertical bars, of which exactly  one  is  to  be  selected.  A
          literal   character   used   in  the  language  is  delimited  by
          apostrophes.

          Comments are  delimited  by  "(*"  and  "*)"  as  in  the  Pascal
          language;  however,  comments  do  not  nest in the MDL.  Numeric
          quantities  are  denoted  by  the  nonterminal   <num>.   Numeric
          quantities  are  decimal  by default, or octal if followed by the
          letter "B".  Identifiers are denoted by the nonterminal <id>.  On
          the DEC-10 they are significant to six characters, may begin with
          any alphabetic character, including "$", "%", and  ".",  and  may
          contain   any   alphanumeric   character  including  the  special
          characters listed above.

          A memory description consists of six sections, three of which are
          optional, followed by the keyword END.

          <mdl> ::= [ <machine section> ] [ <system section> ]
                    [ <area section> ] <module section>
                    <symbol section> <storage section> END




          4.1. The MACHINE section


          The  optional  machine  section  gives  the identification of the
          computer system for which the program is being overlaid.  At  the
          moment, the machine section, if present, is ignored.

          <machine section> ::= MACHINE <id>




          4.2. The SYSTEM section


          The  optional  system  section  gives  the  identification of the
          system being overlaid.  If no system section is given,  the  name
          of the system is taken from the name of the MDL file.  The system
          section is recommended for all MDL files, and is required  for  a



               Pascal Overlay System User's Guide                   Page 12


          system  which  is  to run with the Pascal Debugger.  In order for
          the Debugger to be included in the  program,  the  keyword  DEBUG
          must be given within the system section.

          <system section> ::= SYSTEM <id> [ DEBUG ]




          4.3. The AREA section


          The   optional   area   section   associates   identifiers   with
          non-sharable overlay areas.  These identifiers are used later  to
          associate modules with a given area.  An area can contain at most
          one non-sharable overlay at a time when the program  is  running;
          if  a routine in another overlay associated with the same area is
          called when the area contains the first overlay, an overlay  read
          operation  occurs.  The  area  section  consists  of  the keyword
          AREAS,  followed  by  one  or  more  area  definitions.  An  area
          definition  gives the name of the area, an optional SIZE keyword,
          and a numeric argument giving the size of  the  overlay  area  in
          words.  Note  that all overlay areas are automatically rounded up
          to the nearest page (512 words).

          <area section> ::= AREAS [ <areadef> ]+
          <areadef> ::= <id> [ SIZE ] <num>




          4.4. The MODULES section


          The required module section defines the overlays in  the  system.
          An  overlay  is  a section of code with one or more entry points,
          whose presence at runtime is controlled by the  overlay  manager.
          Non-sharable  overlays  are associated with a single area defined
          in the area section.  This association determines the concurrency
          relationship  amongst  the  non-sharable overlays with respect to
          overlay reads, since each overlay  must  occupy  an  area  to  be
          accessible.  Note  that  any routine in any overlay can be called
          in the Pascal overlay system, and that  careless  association  of
          non-sharable  overlays  with  overlay  areas  can  result  in  an
          excessive  number  of  overlay  reads.  Sharable   overlays   are
          identified   by  the  keyword  SHARABLE  in  place  of  the  area
          specification  for  non-sharable  overlays.   Sharable   overlays
          occupy  a  single  section  of  memory; at run time, one sharable
          overlay is always present.  The predefined sharable overlay  MAIN
          contains  the  program block, and entry symbols defined as in any
          other overlay.  The optional CONTAINS clause gives  the  ordering
          for  symbols  within  the  overlay.  A  FILLER  entry  is used to
          replace a deleted symbol without affecting the positions  of  the



               Pascal Overlay System User's Guide                   Page 13


          routines  following the deleted one.  New symbols may be added to
          the overlay at the end, again without affecting the positions  of
          other  symbols.  By  using  a  contains  clause, users can add or
          delete symbols without invalidating previously built overlays.

          The module name is used by the ODMS BUILD command  in  generating
          the  LINK command file for the module and the .SRL file for MAIN.
          In the LINK command file, the module name is used as the name  of
          the  executable  file  to be generated by the link.  For sharable
          overlays, the module name plus the extension ".EXE" is written in
          a file table generated as part of MAIN's .SRL file.  This name in
          the file table defines the  default  file  used  in  accessing  a
          sharable overlay.

          On  the  DEC-10,  the project-programmer number used in accessing
          either the default database, or, the  default  '.EXE'  files  for
          sharable overlays, is determined at execution time.  At execution
          time, before control is first transferred to the user's code, the
          overlay manager concatenates the project-programmer number of the
          account containing the '.EXE'  file  for  MAIN  to  each  of  the
          default file names.

          <module section> ::= MODULES [ <moddef> ]+
          <moddef> ::= <id> <arearef> [ CONTAINS <idlist> ]
          <arearef> ::= ( SHARABLE | IN <id> )
          <idlist> ::= ( <id> | FILLER ) [ ',' <idlist> ]




          4.5. The SYMBOLS section


          The  required  symbol section enumerates all symbols known across
          overlays.  Such symbols are defined in transfer vectors  for  the
          overlay  containing  them;  other overlays reference the transfer
          vectors and not the actual entity.  The entire symbol section has
          a  size  requirement,  which  defines  the  allocated size of the
          master transfer vector.  When sharable overlays are  included  in
          the  system, the size of the MTV affects the layout of the entire
          low segment.  To minimize the impact of changing the MTV, a fixed
          size  area  is  allocated  for  it,  so that symbols may be added
          without moving other data structures in the low segment.  Symbols
          which  are  VARs or CONSTs can only be declared in the predefined
          sharable overlay MAIN.

          A call to a symbol in a given  overlay  causes  that  overlay  to
          become  accessible.  A  certain  class  of  symbols,  called  the
          RESIDENT,  never  require  an   overlay   operation   to   become
          accessible.  Resident  routines, however, cannot call any defined
          entries in any overlay.  A symbol defined without an in clause is
          assumed  to  be IN RESIDENT (except for VARs and CONSTs where the
          default is IN MAIN, since VARs and CONSTs may only be declared in



               Pascal Overlay System User's Guide                   Page 14


          MAIN).  The  symbols  in  the  Pascal  runtime  library  used  by
          non-sharable overlays must be defined as RESIDENT symbols in  the
          MDL, or, must be linked in as part of the non-sharable overlay.

          The  reserved  word  FILLER  may  be used to reserve space in the
          transfer vector  or  to  replace  deleted  entries.  Entries  for
          routines declared as IN RESIDENT and for VARs and CONSTs declared
          IN MAIN require less space than entries for routines declared  IN
          MAIN  or  in  a  module.  Thus FILLER IN RESIDENT must be used to
          replace entries for VARs and CONSTs and for routines declared  IN
          RESIDENT.

          <symbol section> ::= SYMBOLS [ [ SIZE ] <num> ] [ <symdef> ]+
          <symdef> ::= ( FILLER | <symspec> ) [ <inclause> ]
          <symspec> ::= <id> ( VAR | CONST | PROCEDURE | FUNCTION )
          <inclause> ::= IN ( <id> | RESIDENT )




          4.6. The STORAGE section


          The   required   storage   section  details  the  static  storage
          requirements for each of the overlay modules.  The entire program
          has  a  total  requirement  for all overlays, which is subdivided
          into allocations for  each  overlay.  The  static  area  for  the
          predefined  sharable  overlay  MAIN  is  not  included here.  The
          allocations for the overlays are made in the order in which their
          names  appear  in  the storage section.  If the total size of the
          overlay static area changes, the  entire  system,  including  all
          overlays, must be rebuilt.

          The  static storage requirement for an overlay includes space for
          both  static  variables  and  allocated  constants.  The  overlay
          manager  initializes the static storage the first time an overlay
          is read in; thereafter the static  storage  for  the  overlay  is
          always resident in memory.

          <storage section> ::= STORAGE [ SIZE ] <num> [ <storspec> ]+
          <storspec> ::= <id> [ SIZE ] <num>




               Pascal Overlay System User's Guide                   Page 15


          5.  The ODMS Command Language


          In  this  description of the ODMS command language, the following
          conventions are used.  Language keywords  are  capitalized,  with
          the  minimum  abbreviation underlined.  The character "=" appears
          without quotes in the command  BNF,  but  should  be  used  where
          indicated.  Parentheses  are used to enclose a sequence of items,
          separated by vertical bars, of which exactly one is to be chosen.
          In  general, optional items, which are denoted by square brackets
          and usually contain a keyword,  can  occur  anywhere  within  the
          command line.

          <Module>,  as  used  in  this document, is the name of any module
          declared in the MDL.  Syntactically, it is an alphanumeric string
          whose  first  character  cannot  be  numeric.  On the DEC-10, the
          characters ".", "%" and "$" may also appear in a module name,  in
          any character position.  <Num> is a numeric value, decimal unless
          its last character is the character "B" or "b", in which case  it
          is interpreted as octal.



          5.1. MDL processing commands


          Before  any  other  commands  can  be  given, ODMS must contain a
          description of the program being overlaid.  Normal users will use
          the  USE  command,  which  loads  a  previously  compiled  memory
          description.  The default components of the  filename  given  for
          the  USE  command  are  " .MDO".  System managers and other users
          will use the COMPILE command, which prepares a memory description
          object  (.MDO) file and then USEs it.  If the input filename does
          not include an extension, the extension ".MDL" will be used.  The
          default  for  the output filename is the input filename, with the
          extension ".MDO" and the user's directory substituted.

          Both  commands  generate  a  file  containing   a   Pascal   type
          definition.  This type definition defines an enumerated type with
          an element corresponding to each  overlay  of  the  program.  The
          section  of  this document describing the runtime entry points of
          the overlay manager gives more information on  the  use  of  this
          file.  The  name  of the file is the system name (from the SYSTEM
          section), or, if no SYSTEM section is present, the USE or COMPILE
          command file name.  The extension for the file is ".MOD".

             USE <file>
             COMPILE [ <file> = ] <file>







               Pascal Overlay System User's Guide                   Page 16


          5.2. Database commands


          The  UPDATE command is used to insert single module versions into
          an overlay database.  If  no  DATABASE  filename  is  given,  the
          default database filename is used, which is the system name (from
          the SYSTEM section of the MDL, or the file name  of  the  USE  or
          COMPILE  file) with the extension ".ODB".  The name of the module
          to be updated  must  be  included.  The  version  to  be  updated
          defaults  to  zero;  a message is printed if a currently existing
          version is overwritten.  The input file, if not specified by  the
          OVERLAY qualifier, is taken from the name of the module, with the
          extension  ".EXE".  The  action  of  the  UPDATE  command  is  as
          follows:  the  overlay  database  is  searched  for  a  currently
          existing version of that module; if found, a message is  printed;
          the  new  one  is  allocated  space, written to the database, and
          linked in; the original, if any, is deleted.

             UPDATE [ DATABASE = <file> ] [ OVERLAY = <file> ]
                      [ VERSION = <num> ] <module>


          The DELETE command is used to delete single module versions in an
          overlay  database.  The  defaults  for  database name and version
          number are the same as for the UPDATE command.  The action of the
          DELETE  command  is  as  follows:  the  version  to be deleted is
          located; if present, it is deleted, and then its space  is  freed
          within the file.

             DELETE [ DATABASE = <file> ]
                        [ ( VERSION = <num> | ALL ) ] <module>


          The RENUMBER command is used to modify the version identification
          of existing overlays within  a  database.  The  default  database
          name and version number are the same as for the UPDATE and DELETE
          commands.  The NEWVERSION qualifier must appear; version zero  is
          renamed  to  the  NEWVERSION if no VERSION specification appears.
          The action of the RENUMBER command is as follows:  make sure that
          VERSION  exists  and that NEWVERSION does not; change the version
          number of the overlay.

             RENUMBER [ DATABASE = <file> ] [ VERSION = <num> ]
                      NEWVERSION = <num>   <module>


          The PACK  command  is  used  to  rewrite  an  existing  database,
          eliminating both dead space and duplicate versions.  The filename
          defaults in the same manner as the  DATABASE  qualifiers  of  the
          commands  described  above.  The action of the PACK command is as
          follows:  create a temporary  file  on  the  user's  account  and
          initialize it as a database; perform a sequence of UPDATEs on the
          new file, using the original database as input;  if  a  duplicate



               Pascal Overlay System User's Guide                   Page 17


          version  is  found, print a message without including the earlier
          copy; delete the original database; rename the new database.

             PACK [ DATABASE = <file> ]




          5.3. Generation of overlays



          The BUILD command is used to  prepare  the  various  command  and
          auxilliary  files needed to generate an overlay from Pascal code.
          There  are  three  distinct  forms  of  the  command.  The  BUILD
          RESIDENT,  below,  defines  the  user resident command string for
          LINK-10 to use when building a sharable overlay.  Every  sharable
          overlay  must  include all RESIDENT routines used by the program;
          this string tells LINK to load any  user-defined  resident  code.
          Unlike other BUILD command variations, the BUILD RESIDENT command
          does not generate any disk files; it merely defines a string  for
          inclusion  in  command  files  when subsequent BUILD commands are
          given.  The BUILD <module> command prepares a collection of files
          for  use in the generation of an overlay module.  The ".SRL" file
          is an object file defining the  local  transfer  vector  and  MTV
          offsets  required  for linking the module; a ".CMD" file contains
          instructions for LINK.  Finally, the BUILD MAIN command  prepares
          a  collection  of  files  for  use  in the generation of the main
          component of the overlaid program.  The ASSEMBLY keyword  permits
          the user to create an assembly code file containing the same code
          which is in the ".SRL" file  in  relocatable  binary  form.  This
          option is generally of no interest to users.  Note that when this
          option is used, the ".SRL" file is still  created.  The  DATABASE
          qualifier  respecifies  the  default database; the FILES qualfier
          specifies the runtime size of the overlay manager's  file  table.
          The  CHANNELS  qualifier specifies the maximum number of channels
          the overlay manager will use at runtime.  In all BUILD  commands,
          the  string  following  the USING keyword is copied verbatim into
          the LINK command files generated by the commands.

          Also in all forms, the USING string may be  terminated  with  the
          characters '%' or '&'.  When either character is used, the prompt
          'Using: ' is printed and the user may enter more text which  will
          be  copied  into  the  LINK  command file.  When the ampersand is
          used, the next line of text entered will begin on a new  line  in
          the  LINK  command file.  When the percent sign is used, the next
          line is simply concatenated to the previous line when the command
          file is written.  For example, the command:
             *BUILD MAIN USING SCRIBE,DOSCRI&
             Using: RDLIB[52250,220]/S
          causes  the  following  two  lines to be generated in the command
          file:
             SCRIBE,DOSCRI



               Pascal Overlay System User's Guide                   Page 18


             RDLIB[52250,220]/S
          The command:
             *BUILD MAIN USING SCRIBE,DOSCRI,%
             Using: RDLIB[52250,220]/S
          causes the following line to be generated in the command file:
             SCRIBE,DOSCRI,RDLIB[52250,220]/S

          When a system under development is involved, the files  specified
          in  the  USING  clause  should  generally not include an explicit
          directory.  An exception to  this  rule  is  "library"  routines,
          i.e.,  routines  outside  the  scope  of  the program development
          group.  Thus a programmer may have development copies of files in
          his local directory and set his directory search path to a master
          or library directory (e.g.  using SETSRC  on  the  ADP  network).
          The program should then dynamically associate at execution time a
          .EXE file with overlays  under  development.  The  .EXE  filename
          should  not  include  an  explicit  directory either.  Using this
          technique, local copies of overlays will automatically be used if
          present  in  the  local directory and library copies will be used
          otherwise.  When development work is completed  on  the  overlay,
          the  dynamic  file association may be removed and the overlay may
          be inserted into the overlay database file by the system manager.

             BUILD   <module> [ ASSEMBLY = <file> ] USING xxxx
             BUILD   RESIDENT USING xxxx
             BUILD   MAIN [ ASSEMBLY = <file> ] [ DATABASE = <file> ]
                     [ FILES = <num> ]  [ CHANNELS = <num> ]  USING xxxx




          5.4. General purpose commands


          The PRINT command provides information about the overlaid system.
          It  also  examines  overlays  within  databases.  There are three
          forms of the PRINT  command.  PRINT  <module>  gives  information
          about  that  module's  versions within a database, or the default
          database without the DATABASE qualifier.  If the module qualifier
          is  omitted  then  information is printed for all versions of all
          modules in the database.  The INFO option gives information about
          the  areas,  modules,  and  symbols in the overlaid program.  The
          AREAS  suboption  gives  names,  sizes,  and  locations  for  the
          declared areas in the program; MODULES gives the names and static
          sizes of the declared modules in the program,  as  well  as  each
          module's   area;  PROGRAM  gives  general  statistics  about  the
          overlaid program, such as the addresses  of  overlay  and  static
          areas;  the  ALL option gives all three suboptions.  Finally, the
          SYMBOLS option lists the symbols in a given module.

             PRINT   [ DATABASE = <file> ] [ <module> ]
             PRINT   INFO = ( AREAS | MODULES | PROGRAM | ALL )
             PRINT   SYMBOLS = <module>



               Pascal Overlay System User's Guide                   Page 19


          The VERIFY command checks the correctness of overlays, either  in
          single  files or within databases.  It can be used to examine the
          extent of rebuilding necessary after  a  system  change  requires
          changing  the  MDL  for  the program.  There are two forms of the
          command, one for databases  and  one  for  single  files.  VERIFY
          <module>  OVERLAY  = <file> checks the correctness of the overlay
          module  located  in  <file>.  VERIFY  <module>  checks   specific
          versions  in  the  default database, or an explicit database.  If
          the VERSION qualifier is omitted then version zero  is  verified.
          VERIFY  insures that module indices, relocations, and total sizes
          are suitable for use under the current MDL.

             VERIFY  <module> OVERLAY = <file>
             VERIFY  <module> [ DATABASE = <file>]
                       [ ( VERSION = <num> | ALL ) ]


          The HELP command provides a quick summary of the function of  any
          primary command, or a list of all primary commands.

             HELP [ <command> ]


          The EXIT, QUIT, and STOP commands all terminate ODMS.

             STOP
             QUIT
             EXIT





               Pascal Overlay System User's Guide                   Page 20


          6.  Runtime Entry Points


          The runtime overlay manager includes four user callable routines.
          The purpose and calling sequence of each routine is described  in
          this  section.  The  type  definitions  required  by  the routine
          declarations are given below.  With the exception of type OVL_ID,
          the  type  definitions  and the external declarations may also be
          found in files OVLDEF.TYP and OVLDEF.INC.

          Type OVL_ID is specific to each overlaid program and  is  defined
          in the .MOD file created by the COMPILE and USE commands.  OVL_ID
          is an enumerated type  with  an  element  corresponding  to  each
          overlay used in the program.  Elements of this type are passed to
          the routines defined below and  serve  to  identify  the  overlay
          module  which  is  the  subject of the call.  The example program
          (presented in a later section) has the following type  definition
          generated in the .MOD file:

             type OVL_ID = ( 
               JUSTFY_OV,  SCAN_OV,  GETLIN_OV,
               MAIN_OV,  READER_OV,  WRITER_OV);


          The type definitions required by the overlay manager entry points
          are given below:

          type OVL_ID = (user_n_shr_OV, ..., user_1_shr_OV, MAIN_OV,
                         user_1_noshr_OV, ..., user_m_noshr_OV );

               OVL_CODE = (               (* codes return from routines *)
                 OV_OK,
                 OV_FILNOTFND,            (* OVEXTF file not found *)
                 OV_TOOMANFIL,            (* OVEXTF too many files *)
                 OV_BADFILIND,            (* invalid file table index *)
                 OV_UNKMODIND,            (* unknown module index *)
                 OV_BADNSOVL,             (* OVMODF verification fails *)
                 OV_NOTDB,                (* OVLVER file is not database *)
                 OV_VERNOTFND,            (* OVLVER version not found *)
                 OV_BADDBFOR,             (* OVLVER bad database format *)
                 OV_FILISDB,              (* OVMODF file is database *)
                 OV_OVLACTIVE             (* current o'lay in file call *)
                 OV_NOCANDEL,             (* can't delete defaults *)
                 );

               VERSION = integer;
               FILEINDEX = integer;




               Pascal Overlay System User's Guide                   Page 21





          6.1. Entering a new file


          external procedure OVEXTFILE (    (* inform sys of new file *)
            S: FILE_NAME;                   (* name of file *)
            DB: boolean;                    (* true if database file *)
            var F: FILEINDEX;               (* returned ID for file *)
            var OK: OVL_CODE );             (* how it went *)

          OVEXTFILE informs the overlay system of a new file.  The file may
          be  either  a  database file or the .EXE file corresponding to an
          overlay.  It returns the  fileindex  F,  which  is  used  in  all
          subsequent  calls  to the overlay system concerning this file.  S
          is a string giving the name of the file to be  used,  and  DB  is
          true if the file is an overlay database, and false otherwise.  OK
          can return OV_OK if F has been set correctly; other  returns  may
          modify  F  but will not occupy system table space.  Other returns
          for OK are:  OV_FILNOTFND,  file  not  found;  OV_TOOMANFIL,  the
          FILES count on the BUILD MAIN command has been exceeded.



          6.2. Associating a file with an overlay


          external procedure OVMODFILE (    (* assoc. module w/file *)
            M: OVL_ID;                      (* overlay's ID from ODMS *)
            F: FILEINDEX;                   (* what file to take it from *)
            var OK: OVL_CODE );             (* several possible returns *)

          OVMODFILE  associates  an  overlay  with  a  file  in the overlay
          manager's table.  M is the ODMS-assigned  enumerated  type  value
          for  the  overlay  concerned,  and  F is the index of the file as
          returned by OVEXTFILE.  In addition, F can equal zero,  in  which
          case  the  default  database  or,  for  a  sharable  overlay, the
          appropriate default file is used by the call.  The result of  the
          call  is that the version of the non-sharable overlay is reset to
          zero, and the overlay will be taken from the given file  when  it
          is  next  required.  Note  that  this  call  does  not  examine a
          database file in any way, for example to see if version  zero  of
          that  module  exists.  If the file is not a database, however, it
          will be verified by reading it in as if a routine in the  overlay
          were being called.  In either case, it is an error if the overlay
          has an active routine on the stack.  Possible error returns  are:
          OV_BADFILIND,  invalid file table index; OV_OVLACTIVE, attempt to
          change file of  current  overlay;  OV_UNKMODIND,  unknown  module
          index;  and  OV_BADNSOVL,  verification  failure for non-sharable
          overlay.




               Pascal Overlay System User's Guide                   Page 22





          6.3. Changing the module version used


          external procedure OVLVERSION (   (* non-shar version change *)
            M: OVL_ID;                      (* user overlay ID *)
            V: VERSION;                     (* the new version to find *)
            var UPDATETIME: DTIME_INT;      (* time of version update *)
            var OK: OVL_CODE );             (* OK, not DB, or not found *)

          OVLVERSION changes the version number of a  non-sharable  overlay
          which is associated with a database file.  The version can be any
          integer; the database file is examined and the version found  and
          verified.  If  found,  the  timestamp  as  installed  by  ODMS is
          returned.  The return  codes  are  OV_UNKMODIND,  unknown  module
          index;   OV_NOTDB,   module   not   associated   with   database;
          OV_BADNSOVL, verification failure; and OV_VERNOTFND, version  not
          found in database.




          6.4. Deleting a file table entry


          external procedure OVDELFILE (    (* disassociate a file *)
            F: FILEINDEX;                 (* this one *)
            var OK: OVL_CODE );           (* OK or bad file index *)

          OVDELFILE  deletes  a file from the overlay manager's file table.
          The entry will be reused on subsequent calls  to  OVEXTFILE,  and
          any  channel  in  use  by  the  file  is released to Pascal.  Any
          non-sharable overlays which were associated  with  the  file  are
          reset  to  the  default  database,  version  zero.  Any  sharable
          overlays which were associated with the file are reset  to  their
          respective default file; both sharable and non-sharable overlay's
          static will be reinitialized the next time the  overlay  must  be
          read  into  memory.  Possible  returns  for  OK are OV_BADFILIND,
          invalid file index, and OV_NOCANDEL, attempt  to  delete  default
          database or sharable overlay default.



               Pascal Overlay System User's Guide                   Page 23


          7.  An Example


          This  section contains an example describing the initial building
          and subsequent maintenance  of  an  overlaid  program.  The  text
          processing  program SCRIBE is used as the example program.  It is
          divided into six overlays:  MAIN, three sharable overlays and two
          non-sharable  overlays.  Text  keyed in by the user is underlined
          in the examples.



          7.1. The initial build of the program


          The initial build of the overlaid program  is  shown  below.  The
          MDL  description for this initial version of the program is given
          in Appendix A.

          .r newpas[52250,220]
          Pascal, Version 1S(200)-3

          */debug,mainseg                 (compile modules of MAIN)
          *scribe[,320156]                (with MAINSEG option)
          *doscri[,320156]
          */debug,nomainseg,overlay       (compile all other modules)
          *getlin[,320156]                (with the OVERLAY option)
          *reader[,320156]
          *writer[,320156]
          *justfy[,320156]
          *scan[,320156]
          */exit

          EXIT


          .r odms[52250,220]
          ODMS Version 3.0

          *compile scribe                 (compile the MDL)
          [System (SCRIBE), compiled 17-Jul-80 08:04:44]
          *build main using scribe,doscri&    (build each overlay)
          Using: rdlib[,320156]/s
          *build reader using reader
          *build writer using writer
          *build getlin using getlin
          *build scan using scan
          *build justfy using justfy
          *exit

          EXIT




               Pascal Overlay System User's Guide                   Page 24



          .r link                         (link each overlay)
          *@scribe

          EXIT

          .r link
          *@reader

          EXIT

          .r link
          *@writer

          EXIT

          .r link
          *@getlin

          EXIT

          .r link
          *@scan

          EXIT

          .r link
          *@justfy

          EXIT

          .r odms[52250,220]
          ODMS Version 3.0

          *use scribe                     (place non-sharables in database)
          [System (SCRIBE), compiled 17-Jul-80 08:04:44]
          *update reader
          *update writer
          *exit

          EXIT




          7.2. Adding a routine to an overlay


          A public procedure, named  INIT_SCAN,  is  to  be  added  to  the
          sharable  overlay  module SCAN.  The symbol INIT_SCAN is added to
          both the CONTAINS clause  in  the  MODULES  section  and  to  the
          SYMBOLS  section.  In  the  CONTAINS  clause,  the  new symbol is
          simply added to the end of the clause.  Note that a FILLER  entry



               Pascal Overlay System User's Guide                   Page 25


          at  the end of a CONTAINS clause for a sharable overlay serves no
          purpose.  The CONTAINS clause  determines  the  ordering  of  the
          sharable  overlay's  LTV; only the offsets within the LTV must be
          maintained to avoid impacting other overlays.  The new symbol may
          be  added  to  the  SYMBOLS  section  in  several  places without
          affecting other overlays.  In particular, any of the  "FILLER  IN
          <module  name>"  entries  may be replaced by the new symbol.  The
          symbol could also be added at the end of the SYMBOLS  section.  A
          single  "FILLER IN RESIDENT" entry may not be replaced by the new
          symbol since the new entry would be larger than  the  old  entry.
          If FILLER entries were not available and adding the symbol at the
          end of the section caused the size of the  MTV  to  overflow  the
          size declared following the SYMBOLS keyword, then all overlays in
          the system would have to be rebuilt.

          After  replacing  the  "FILLER  IN  SCAN"  entry  by   "INIT_SCAN
          PROCEDURE  IN  SCAN", the user rebuilds modules SCAN and MAIN (we
          assume INIT_SCAN is called from MAIN).

          .r odms[52250,220]
          ODMS Version 3.0

          *compile scribe                 (recompile modified MDL)
          [System (SCRIBE), compiled 17-Jul-80 09:00:27]
          *build scan using scan          (rebuild modified MDL)
          *build main using scribe,doscri,rdlib[,320156]
          *quit

          EXIT

          .r link                         (relink SCAN AND MAIN)
          *@scan

          EXIT

          .r link
          *@scribe

          EXIT




          7.3. Adding static variables to an overlay


          The number of static variables in  module  WRITER  is  increased.
          None  of  the added variables is accessed outside of the overlay,
          so they need not  be  declared  in  the  MDL.  Module  WRITER  is
          relinked  and then the VERIFY command is used to determine if the
          declared static storage size for WRITER is  still  large  enough.
          In  this  case the static area for the module is large enough and
          WRITER is the only module which must be relinked.  If WRITER  had



               Pascal Overlay System User's Guide                   Page 26


          overflowed  its  declared  static  storage  area size, all of the
          following  modules  would  have  had   to   been   rebuilt:   all
          non-sharable  overlays,  MAIN,  and  all  sharable overlays whose
          storage declaration followed that of WRITER.

          .r link                         (relink - no MDL changes)
          *@writer

          EXIT

          .ru odms[52250,220]
          ODMS Version 3.0

          *use scribe
          [System (SCRIBE), compiled 17-Jul-80 09:00:27]
          *verify writer overlay=writer.exe   

           Actual code at          022000, 002000(1024 decimal) words
           MDL declared code at    022000, 002000(1024 decimal) words

           Actual module index is 2

           Actual static at        002050, 000160(112 decimal) words
           MDL declared static at  002050, 002000(1024 decimal) words

          *quit

          EXIT




          7.4. Deleting a symbol


          Public variable CURLEV is to be deleted.  Deleting public symbols
          can always be done without rebuilding any modules other than MAIN
          and those modules which had  previously  referenced  the  symbol.
          The  one  requirement is that the internal layout of the transfer
          vectors remains unchanged.  This can always  be  accomplished  by
          replacing  deleted entries with FILLERs.  Since a public variable
          is being replaced, the  replacement  entry  must  be  "FILLER  IN
          RESIDENT".  Note  that  "FILLER IN MAIN" would be incorrect since
          it reserves more space than  the  orginal  "VAR  IN  MAIN"  entry
          required.

          We assume that overlays MAIN and WRITER referenced CURLEV.



               Pascal Overlay System User's Guide                   Page 27


          .r odms[52250,220]
          ODMS Version 3.0

          *compile scribe                 (recompile modified MDL)
          [System (SCRIBE), compiled 17-Jul-80 09:12:05]
          *build main using scribe,doscri,rdlib[,320156]/s    
          *build writer using writer      (rebuild MAIN and WRITER)
          *q

          EXIT

          .r link                         (relink WRITER and MAIN)
          *@writer

          EXIT

          .r link
          *@scribe

          EXIT




          7.5. Increasing the size of an overlay


          Module READER is increased in size by adding more code to it; the
          public entry points in it  remain  unchanged.  Module  READER  is
          relinked  after  the changes and the resulting executable file is
          checked for overflow with the VERIFY command.  The VERIFY reveals
          that the code area of READER is now larger than the declared area
          size.  This requires increasing the area size declarations in the
          MDL  and  rebuilding  READER  and  MAIN.  If  other areas existed
          following AREA1, then all non-sharable overlays  in  those  areas
          would have had to been rebuilt.

          .r link                         (just relink - no MDL changes)
          *@reader

          EXIT

          .ru odms[52250,220]             (verify result)
          ODMS Version 3.0

          *use scribe
          [System (SCRIBE), compiled 17-Jul-80 09:27:59]
          *verify reader overlay=reader.exe   (code too big for area!!!)

           Actual code at          022000, 002000(1024 decimal) words
           MDL declared code at    022000, 001000(512 decimal) words

          ?ODMVFY -- failure in external file DSK:READER.EXE[31024,320210]



               Pascal Overlay System User's Guide                   Page 28


          ?ODMVFY -- overlay area overflow

           Actual module index is 2

           Actual static at         002050, 000160(112 decimal) words
           MDL declared static at   002050, 014000(6144 decimal) words

          *q

          EXIT

          .r qed                          (increase area size in MDL)
          *l scribe.mdl
          */area1/
            area1 size 3000b
          *s/3/4/p
            area1 size 4000b
          *w
          Old file: DSK:SCRIBE.MDL[31024,320210]? yes
          *q

          .ru odms[52250,220]
          ODMS Version 3.0

          *compile scribe                 (recompile MDL)
          [System (SCRIBE), compiled 17-Jul-80 09:54:49]
          *build reader using reader
          *build main using scribe,doscri,rdlib[,320156]/s
          *q

          EXIT

          .r link                         (relink READER and SCRIBE)
          *@reader

          EXIT

          .r link
          *@scribe

          EXIT




               Pascal Overlay System User's Guide                   Page 29


          8.  Summary of the MDL Syntax



          <mdl> ::= [ <machine section> ] [ <system section> ]
                    [ <area section> ] <module section>
                    <symbol section> <storage section> END

          <machine section> ::= MACHINE <id>

          <system section> ::= SYSTEM <id> [ DEBUG ]

          <area section> ::= AREAS [ <areadef> ]+
          <areadef> ::= <id> [ SIZE ] <num>

          <module section> ::= MODULES [ <moddef> ]+
          <moddef> ::= <id> <arearef> [ CONTAINS <idlist> ]
          <arearef> ::= ( SHARABLE | IN <id> )
          <idlist> ::= ( <id> | FILLER ) [ ',' <idlist> ]

          <symbol section> ::= SYMBOLS [ [ SIZE ] <num> ] [ <symdef> ]+
          <symdef> ::= ( FILLER | <symspec> ) [ <inclause> ]
          <symspec> ::= <id> ( VAR | CONST | PROCEDURE | FUNCTION )
          <inclause> ::= IN ( <id> | RESIDENT )

          <storage section> ::= STORAGE [ SIZE ] <num> [ <storspec> ]+
          <storspec> ::= <id> [ SIZE ] <num>



               Pascal Overlay System User's Guide                   Page 30


          9.  Summary of the ODMS Command Language Syntax



          BUILD   <module> [ ASSEMBLY = <file> ] USING xxxx
          BUILD   RESIDENT USING xxxx
          BUILD   MAIN [ ASSEMBLY = <file> ] [ DATABASE = <file> ]
                    [ FILES = <num> ] [ CHANNELS = <num> ]  USING xxxx

          COMPILE [ <file> = ] <file>

          DELETE [ DATABASE = <file> ]
                 [ ( VERSION = <num> | ALL ) ] <module>

          EXIT

          HELP [ <command> ]

          PACK [ DATABASE = <file> ]

          PRINT   [ DATABASE = <file> ] [ <module> ]
          PRINT   INFO = ( AREAS | MODULES | PROGRAM | ALL )
          PRINT   SYMBOLS = <module>

          QUIT

          RENUMBER [ DATABASE = <file> ] [ VERSION = <num> ]
                   NEWVERSION = <num>   <module>

          STOP

          UPDATE [ DATABASE = <file> ] [ OVERLAY = <file> ]
                   [ VERSION = <num> ] <module>

          USE <file>

          VERIFY  <module> OVERLAY = <file>
          VERIFY  <module> [ DATABASE = <file>]
                    [ ( VERSION = <num> | ALL ) ]



               Pascal Overlay System User's Guide                   Page 31


          Appendix A - MDL for the Example Program


          machine pdp10

          system scribe debug

          areas
            area1 size 4000b

          modules
            reader in area1
              contains readline, initreader, getlnr, filler, filler
            writer in area1
              contains wrtline, filler, filler
            getlin sharable
              contains getline
            scan sharable
              contains  scan
            justfy sharable
              contains initjustfy, justline

          symbols size 300                (* define master xfer vector *)
            output        var in main     (* must declare any predefined *)
            input         var in main     (* file variables which are *)
            ttyoutput     var in main     (* used by overlays *)
            clevel        var in main
            cmdlen        var in main
            cmdln         var in main
            cmdptr        var in main
            curlev        var in main
            curren        var in main
            docont        var in main
            dodeca        var in main
            dounde        var in main
            inf_depth     var in main
            nodeca        var in main
            under_state   var in main
            repeat_cnt    var in main
            filler in resident
            filler in resident
            do_scr procedure in main
            error procedure in main
            filler in main
            filler in main

            getline function in getlin
            filler in getlin

            initjustfy procedure in justfy
            justline procedure in justfy
            filler in justfy
            filler in justfy



               Pascal Overlay System User's Guide                   Page 32



            readline procedure in reader
            initreader procedure in reader
            getlnr procedure in reader
            filler in reader
            filler in reader

            wrtline procedure in writer
            filler in writer

            scan procedure in scan
            filler in scan

            caser. procedure in resident  (* declare runtime symbols *)
            csp.ff procedure in resident
            csp.fx procedure in resident
            dspos. procedure in resident
            filer. procedure in resident
            fstr.w procedure in resident
            getch. procedure in resident
            int.w  procedure in resident
            mp.ff  procedure in resident
            new.   procedure in resident
            pntry. procedure in resident
            prtrn. procedure in resident
            ptrer. procedure in resident
            putch. procedure in resident
            rd.lnn procedure in resident
            sm.ss  var in main            (* Pascal runtime constant! *)
            strer. procedure in resident
            suber. procedure in resident
            valer. procedure in resident
            wr.fdn procedure in resident
            wr.svn procedure in resident

          storage size 5000b              (* define static storage sizes *)
            getlin size 500b
            reader size 500b
            writer size 500b
            scan size 500b
            justfy size 500b

          end




               Pascal Overlay System User's Guide                   





                                  Table of Contents


          SECTION                                                    PAGE


          1        Introduction                                        1
          1.1      Functions provided                                  1
          1.2      Basic concepts                                      1
          1.2.1    Non-sharable overlays                               1
          1.2.2    Sharable overlays                                   2

          2        System Organization                                 3
          2.1      System components                                   3
          2.1.1    Memory Description Language                         3
          2.1.2    Overlay Database Maintenance System                 3
          2.1.3    The runtime overlay manager                         4
          2.2      Program components                                  4
          2.2.1    User code and data                                  4
          2.2.2    Transfer vectors                                    4
          2.2.3    Resident routines                                   5

          3        Using the Pascal Overlay System                     6
          3.1      Programming restrictions                            6
          3.1.1    Source code restrictions                            6
          3.1.2    User resident routines                              6
          3.2      Operating Procedures                                7
          3.2.1    Compilation                                         7
          3.2.2    Using ODMS                                          7
          3.2.3    Linking the overlays                                8
          3.2.4    Updating the database                               8
          3.3      Changing an overlaid program                        8
          3.3.1    Designing an MDL description for future flexibility 8
          3.3.2    Determining the impact of a change                  10

          4        The Memory Description Language                     11
          4.1      The MACHINE section                                 11
          4.2      The SYSTEM section                                  11
          4.3      The AREA section                                    12
          4.4      The MODULES section                                 12
          4.5      The SYMBOLS section                                 13
          4.6      The STORAGE section                                 14

          5        The ODMS Command Language                           15
          5.1      MDL processing commands                             15
          5.2      Database commands                                   16
          5.3      Generation of overlays                              17
          5.4      General purpose commands                            18

          6        Runtime Entry Points                                20




               Pascal Overlay System User's Guide                   


          6.1      Entering a new file                                 21
          6.2      Associating a file with an overlay                  21
          6.3      Changing the module version used                    22
          6.4      Deleting a file table entry                         22

          7        An Example                                          23
          7.1      The initial build of the program                    23
          7.2      Adding a routine to an overlay                      24
          7.3      Adding static variables to an overlay               25
          7.4      Deleting a symbol                                   26
          7.5      Increasing the size of an overlay                   27

          8        Summary of the MDL Syntax                           29

          9        Summary of the ODMS Command Language Syntax         30

          Appendix A - MDL for the Example Program                     31


  &D