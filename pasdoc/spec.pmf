#define (#newmode,$PAGE $INDENT LEFT 0
#assign (#ass,notseen)&
#assign (#spc,notseen)&
)
#define (#assemb,asmbsyn,&
#if ("#eqc("#ass,seen),
$PARAGRAPH
\\\\\\\\\\\\\\\asmbsyn)&&
#if ("#eqc("#ass,notseen),$SKIP $NEED 2
Assembler
$PARAGRAPH
Syntax:\\\\\\\\asmbsyn&#assign (#ass,seen)))

#define (#specif,specval,&
#if ("#eqc("#spc,seen),
$PARAGRAPH
\\\\\\\\\\\\\\\specval)&&
#if ("#eqc("#spc,notseen),$SKIP $NEED 2
Mode
$PARAGRAPH
Specifier:\\\\\specval&#assign (#spc,seen)))

#define (#modeformat,$SKIP $VERBATIM $NEED 6
Operand
Specifier
Format:
$INDENT LEFT 14)

#define (#descr,$JUSTIFY $SKIP 2 $PARAGRAPH -14
Description:\\)

#define (#comments,$SKIP $NEED 2 $PARAGRAPH -14
Special
$PARAGRAPH -14
Comments:\\\\\)


#literal (#exc,notseen)
#literal (#opc,notseen)
#literal (#ass,notseen)
#literal (#spc,notseen)
#define (#newinst,opmnemon,$PAGE $INDENT LEFT 0
#assign (#exc,notseen)&
#assign (#opc,notseen)&
opmnemon
$RIGHT
)

#define (#purpose,$JUSTIFY $INDENT LEFT 14 $SKIP $PARAGRAPH -14
Purpose:\\\\\\)

#define (#instformat,$SKIP $VERBATIM $TAB 41 $NEED 2 $PARAGRAPH -14
Format:)

#define (#oper,$SKIP $NEED 2 $PARAGRAPH -14
Operation:)

#define (#cond,ncode,zcode,vcode,ccode,$SKIP $NEED 4 $PARAGRAPH -14
Condition\\\\\N <- ncode
$PARAGRAPH -14
Codes:\\\\\\\\Z <- zcode
V <- vcode
C <- ccode)

#define (#except,&
#if ("#eqc ("#exc,notseen),$SKIP $PARAGRAPH -14
Exceptions:\\\&#assign (#exc,seen)))

#define (#opcode,opval,opmnemon,&
#if ("#eqc ("#opc,seen2),opval	opmnemon	)&
#if ("#eqc ("#opc,seen1),<:$TAB 9,17
opval	opmnemon	:>#assign (#opc,seen2))&
#if ("#eqc ("#opc,notseen),<:$SKIP $TAB 23,31 $PARAGRAPH -14
Opcodes:\\\\\\\opval	opmnemon	:>#assign (#opc,seen1)))

#define (#notes,$SKIP $INDENT LEFT 18 $PARAGRAPH -18
Notes:\\\\\\\\)

#literal (#pvm,Pascal Virtual Machine)
