









                          Compiler Implementation Notes #6

                                Summary File Contents

                                     Revision B

                                     2 May 1979




          1.  Introduction

               The new Pascal compiler  will  produce  summary  data  files
          during  compilation.  The summary information in these files will
          be used by the compiler  for  interprocedural  optimization,  and
          will  be  sufficient  to  serve  as  input  to  a cross-reference
          program, either for a single module or for an entire system.




          2.  The Cross Reference File

               The cross reference file  contains  entries  describing  all
          references  to  symbols  in the program.  Each record in the file
          contains a record type code; many  also  have  a  parameter.  The
          cross reference file structure is described by the following BNF.
          Note that underlined words represent record types in the file.


          <cross reference file> ::= <block>

          <block> ::= <source id> block {<data>}* end

          <source id> ::= [file] [page] [line]

          <data> ::= <source id> declaration  |
                     <reference>  |
                     <block>

          <reference> ::= <source id> {value | mod | var parm | ref}  |
                          <reference> <qualifier>

          <qualifier> ::= index {<reference>}* end  |
                          call {<reference>}* end  |
                          deref <reference>  |
                          fileblk <reference>  |
                          field  |
                          wfield


                                        - 1 -





          CIN-#6
          Summary File Contents
          Revision B
          2 May 1979

               A <block> represents all the symbol references in  a  single
          block  of  the program.  Each procedure, function, or main module
          defined  in  a  compilation  has  a  unique  identifying  number,
          starting  with 0 for the standard environment block and 1 for the
          program or module  block.  The  block  identifying  number  is  a
          parameter  in  the block record which begins a block in the file.
          Note that blocks may be nested; this  corresponds  to  the  block
          structure of the program.

               Associated  with  each  symbol  reference  is a <source id>.
          This specifies the file, page, and line in the program  at  which
          the  reference  is  located.  A  full source id is specified by a
          file record, which gives a file number (file  0  is  the  primary
          source  file  for  the  compilation;  all other files are include
          files); a page record, which specifies a page  within  the  file;
          and  a  line  record, which specifies a line on the page.  Any of
          these records may  be  omitted  if  the  corresponding  value  is
          unchanged from the last source id.

               Declaration,  value,  mod,  var parm, ref, field, and wfield
          records all contain a symbol id parameter.  A  symbol  id  is  an
          integer  which  may  denote  a  type,  variable,  constant, value
          parameter, field, or label symbol.  Two distinct  numberings  are
          used--one  for  variable  symbols  and  labels, and the other for
          type, constant, value parameter, and field symbols.  Each  record
          containing  a symbol number also contains a flag indicating which
          of these two classes the symbol falls into.

               A declaration record indicates either the statement in which
          a  type,  constant,  or  variable  identifier is declared, or the
          actual occurrence of a label in the body of its  block.  A  value
          record  indicates a statement which uses the value of a specified
          symbol.  A mod record indicates a statement which can change  the
          value  of  the  variable denoted by the symbol id parameter, or a
          "goto"  statement  to  a  specified  label.  A  var  parm  record
          indicates that the variable denoted by the symbol id parameter is
          used as a var parameter in a procedure or function  call.  A  ref
          record  indicates  a  reference  to  a  type  identifier,  or  an
          occurrence of a symbol in a  "with"  statement  or  an  "address"
          function call.

               A  <qualifier> indicates some modification of the meaning of
          the qualified <reference>.  An index qualifier indicates that the
          qualified  reference  is  the  array in an array reference or the
          string in a string reference, and that all the references between
          the index record and the matching end record are in the subscript
          list or substring parameters.  A call  qualifier  indicates  that
          the  qualified  reference, which denotes a subroutine constant or
          variable, occurs in a function or procedure call,  and  that  all
          references  between  the  call record and the matching end record
          are in the  parameter  list  for  the  call.  A  deref  qualifier
          indicates  that  the  qualified  reference  is a pointer which is
          dereferenced.  The  deref  record  is  followed  by  a  reference


                                        - 2 -





          CIN-#6
          Summary File Contents
          Revision B
          2 May 1979

          indicating  the  heap  class  and  context  of  the  dereferenced
          pointer.  (A heap class is a pseudo-symbol which  represents  all
          those  variables  on  the  heap  which  may  be  referred to with
          pointers from a  given  set  of  compatible  pointer  types.)   A
          fileblock  qualifier  inidcates that the qualified reference is a
          file whose file block is being referenced.  The fileblk record is
          followed  by a reference indicating the file class and context of
          the file block usage.  (A file class  is  a  pseudo-symbol  which
          represents  all  file blocks of a given type.)  A field qualifier
          indicates a reference to a field in the record which is described
          by  the  qualified  reference.  A  wfield  qualifier  indicates a
          reference to a field in a record which has previously occurred in
          a  "with" statement, and which is described, without indexing and
          pointer information, by the qualified reference.  The  symbol  id
          parameter  in  a  field  or  wfield record specifies the selected
          field.  As an example of the difference between field and  wfield
          qualifiers,  the  reference  "a[i].f :=" will produce the summary
          records "mod a;  index;  value i;  end;  field f".  However,  the
          sequence  "with  a[i]  do  begin  ...  f :=" will produce "ref a;
          index; value i; end; ...  mod a; wfield f".




          3.  The Symbol Table File

               The symbol table file contains a description of  each  block
          and symbol in the program.  In conjunction with the name file, it
          provides the information necessary to make  sense  of  the  cross
          reference file.  Each entry in the symbol table file contains the
          following fields:


          Class.
               This indicates whether this symbol table entry  describes  a
               block,  a type symbol, a variable symbol, a constant symbol,
               a value parameter symbol, a label, or a field name symbol.

          Subclass.
               In a block entry, the subclass field indicates  whether  the
               block  is  the  environment block or a program, module, data
               module or  subroutine  block.  In  a  variable  or  constant
               symbol  entry,  the  subclass  is  the  storage class of the
               symbol.  A constant may be external or  it  may  be  a  true
               constant.   A  variable  may  be  a  normal  variable  of  a
               procedure or function,  it  may  be  static,  it  may  be  a
               parameter,  it  may  be external, or it may be a heap class.
               (A heap class is not a declared variable, and  it  does  not
               have  a  name.  Rather, it represents all those variables on
               the heap which may be modified by pointers from a given  set
               of compatible pointer types.)

          Id Number.


                                        - 3 -





          CIN-#6
          Summary File Contents
          Revision B
          2 May 1979

               This  is  the block number or symbol number which is used in
               the cross reference file to refer to this block or symbol.

          Name.
               This may be used to look up the name of this block or symbol
               in  the name file.  If the name number is zero, it indicates
               that this block or symbol does not have a name.

          Parent.
               The parent of a block is the id number of  the  block  which
               contains it.  The parent of a symbol or a record type is the
               id number of the block in which it is declared.  The  parent
               of  a  field  symbol is the id number of the type symbol for
               the record type which it is a part of.

          Type Class.
               The  type  class  field  is  relevant  for  type,  constant,
               variable,  value  class,  and  field  symbols, and indicates
               whether  the  type  of  the  symbol  is  integer,   boolean,
               character,  real, scalar, set, pointer, file, string, array,
               record, procedure, or function.

          Type Name.
               For  type,  constant,  variable,  value  class,  and   field
               symbols, the type name field may be used to find the name of
               the type of the symbol in the name  file,  if  the  symbol's
               type  has  a  name.  If  the symbol's type is nameless, then
               this field will be zero.




          4.  The Name File

               The name file is an ordinary ASCII text file, which contains
          general information about the compilation as well as the names of
          symbols  from  the  symbol  table  file.  It  begins  with  lines
          containing  the  compiler  version,  the  date  and  time  of the
          compilation, the options from the command line, and the  rel-file
          and  listing-file  names.  It  then  contains the file number and
          file name of each file used in  the  compilation,  and  the  page
          number  and  page  name  of each page in each file.  This general
          information is followed by a list of  all  the  names  which  are
          referred  to  in  the  symbol  table  file, ordered by their name
          numbers.










                                        - 4 -




 