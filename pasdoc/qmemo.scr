$title left 'QED MEMO #1 - LARGE FILE EDITING' LEFT '12/21/78'
$skip 3
I. &INTRODUCTION&
$skip 1
This is the first in a series of memos on issues involved
in the specification of a new QED.
The intent is to identify the major design 
issues, suggest approaches and elicit comments and suggestions.
The ultimate goal is to define a common QED for use on all
 systems: the PDP-10, the 940, Series 1, Series 2 the
ST-1, etc.
  Clearly, the editor would not be identical on all of these
systems.
Subsets appropriate to particular
systems would be defined.  
An open question is whether or not strict subsets are desirable.
For example an editor for the ST-1 might have special features
for paper tape editing but otherwise offer a small subset of all the
commands in the specification.
A common implementation is also desirable but
is certainly not entirely feasible.
Different systems will require different file name parsing routines
at a minimum.  
An open question is whether multiple sets of buffer
routines would also be necessary.
$skip 1
The topic of this first memo  is editing files larger
than available primary memory.
This is an issue which, depending on how it is resolved, could
impact the entire editor.
A  related issue that will also be discussed is how
to handle paper tape editing.  
These two problems could be handled in similiar fashions.
We will talk about 'large' files throughout this memo but it
should be kept in mind that the size of file which can
be handled in main memory will vary tremendously from
one system to another.
Two basic approaches to the problem of large files are possible.
First, the distinction between information
in main memory and that on secondary memory could be made
transparent to the user.  
Second, the user could explicitly move a 'window' over
the file using editor commands.  
The window would correspond to the section of the file
currently in primary memory.
Each of these approaches will be discussed below.
$skip 2
&TRANSPARENT BUFFERING&
$skip 1
The transparent approach has two major advantages. 
The first is ease of use; the user need not give explicit
window control commands.
The second advantage is consistency across systems.
In a non-transparent approach the size of the in-memory window would vary widely from system 
to system.
Thus if explicit window manipulation commands are necessary,
identical files may have to be edited differently on different systems.
This may be an increasingly common situation as floppy disk
equipped smart terminal become more widely used.
$skip 1
The implementation of transparent buffering is not as straight
forward as a non-transparent implementation.
However, the UNIX editor on the PDP-11 is an example
of a successful editor running on a
minicomputer and using the transparent approach.
The UNIX editor shares QED's roots and has a very similiar
set of commands.
The transparent approach is more likely to require multiple 
implementations of the editor's buffer manipulation
routines.
$skip 1
A important question is the efficiency of an editor using this
approach.
Personally, I feel that transparent approaches are at no more
of a disadvantage in this respect than window editors.
Local operations, that is, operations on lines near the current line,
can be done efficiently since they will access either lines already
in main memory or lines requiring few disk I/O operations
 to bring them into memory (tape editing
will be discussed shortly).
Global operations, that is, operations on either the entire file
or on lines far from the current line, will be slow if the size of
the in-memory buffer is small compared
to the size of the entire file.
However, window approaches tend to have the identical characteristics
and are often considerably less flexible as well (forbidding operations
on text which the window has already passed by, for example).
Thus, the user who moves sequentially forward through the file, editing 
locally at various points, is able to operate with little
performance degradation with a transparent scheme.
At the same time he has the freedom to move backwards in the
file and perform global FINDs and SUBSTITUTEs when  required.
This brings up  the desirability  
of doing backwards context searches.
In all the current  QEDs a context search to find a line a
relatively small number of lines before the current line will
search almost the entire file.
This makes 'local' editing difficult.
$skip 1
The BOUND command of the Pascal QED editor would also
facilitate local editing.
The BOUND command restricts the effect of commands to a
subsection of the file.
Thus context searches are automatically limited to the
current section of the file.
This is important when a context search fails.
$skip 1
Obviously, paper tape editing of large files has to be
constrained to a forward moving style of operation.
The text currently in primary memory can be accessed
'randomly' but text the window has already passed is
inaccessible.
  Similiarly, text beyond the
window can be accessed only by permanently
moving the window forward.
In a transparent approach two problems arise.
First the user has no explicit control over the window's
movement.
  Second,  the current position of the 
window may be awkward to determine.
One approach to this problem would be to add explicit window
control commands to tape implementations ONLY.
This forsakes any idea of defining strict
subset editors, but it is not clear that this is a  
problem.
Tape editing seems to be a rather special situation and it
seems unreasonable to constrain all users for the sake
of maintaing a paper tape compatible
subset.
$skip 2
$need 4
&EXPLICIT WINDOW CONTROL&
$skip 1
One of the primary issues here is whether the window
may be moved forward only or backward as well.
The forward only approach is both easy to implement and is highly compatible with
paper tape editing.
Its primary disadvantage is that it may be inconvenient to
use.
The only way to edit text which the window has already passed
over is to close out the current edit and begin a new edit of
the file just closed.
Forward and backward movement of the window will involve an
implementation which is just as elaborate as that required
by a transparent approach.
However, the user is no longer constrained to one pass.
motion editing.
Paper tape editing is no longer identical, but
it might be possible to define a strict subset of the
window manipulation commands which are available for tape editing.
This would require careful choice of the window manipulation commands.
$skip 1
A second issue is whether line numbers should be relative
to the start of the buffer (as in  940 QED) or absolute
(as in ST-1 QED).
If line numbers are relative to the start of the
buffer then line numbered listings are of little value.
Presumably use of any line number
outside the buffer would be an error.
If line numbers are absolute a symbol for addressing
the first line of the window is desirable.
It would also have to be decided whether references to lines outside
the window were errors or implicit commands to move the window.
In any editor where the window can only be moved by explicit
commands global commands may be impossible.
For example to change all occurances of 'foo' to 'foolish' would
require moving the window and issuing the command 
a number of times equal to the number of windows needed to 'cover' 
the file.
An alternative to this would be to introduce 'deferred'
substitutions as is done in the ST-1 QED.
$skip 1
It would be highly desirable to have the windowing invisible
when files will fit in main memory.
However, this can lead to a situation where you suddenly overflow
the capacity of primary memory and you are effectively forced
to operate in a different mode.
For example on the  940 QED you are suddenly
told that there is no output file open, buffer commands are
now available and must be used, line numbers are now relative
to the start of the buffer rather than absolute and
you are constrained to forword moving window style editing.
This implicit and automatic mode switch could be rather
disconcerting, especially to the novice user.
The problem is that QED is a file oriented editor.
Typically a file is loaded into memory, edited and then all
or part of the file is written to an output file.
Both the choice of the output file and how much, if any,
of the resulting text is to be saved are determined &after&
all editing has taken place.
A single pass window editor translates one or more input
files into one or more output files.
At any given time the window is passing over a
'current' input file. 
Text the window passes over is written to a 'current'
output file, unless output is disabled.
This is a more restrictive mode of operation than that
permitted by the current QEDs when used with 'small' files.
$skip 1
The Pascal QED bound command performs a function somewhat
similiar to a windowing scheme with window movement only via
explicit commands.
Sections defined by the BOUND command are based on logical
divisions within the file.
The size of a window is determined by the amount of buffer
space available.
However the BOUND command's effect of restricting commands
to a subsection of the file can be valuable.
This is especially true in a single pass window
editor in which a reference to a line outside the
window implicitly moves the window.
In such an editor some means of restricting the execution
range of commands is very desirable.
Without such a mechanism a context search which fails moves
the window to the end of the file.
A BOUND command which restricts the effect of commands
to the current window would be valuable with such an
editor.
Implicit movement of the window is convenient in many situations.
Yet when much editing is to be done within the current window,
the ability to restrict commands to the window
is a good safety feature.
A 'bound to the current window' command leaves this decision
under the explicit control of the user.
$skip 1
Finally, a variety of approaches to window movement commands
are possible. 
One approach is to always move the window by as much as possible.
Initially, as much text as will fit in main memory is loaded.
The user can then give a command which writes the current 
buffer to a disk file and reads in as much text as
possible from the current position
in the input file.
This approach is simple but not very flexible.
The user has no control over the 'centering' of the window
and no way in which to inhibit output.
An alternative is to allow the user to specify
a given line as the start (or end) of the window and then
load as much text as possible, writing any intervening
text to a disk file.
Commands for switching input files, switching output
files and reading text without writing it to a file
are also possible.
Precisely defining these commands is a critical step in 
specifying a window style editor.
$skip 2
IV. &CONCLUSIONS&
$SKIP 1
The advantages and disadvantages of the transparent approach
are summarized below.
$ind +5
$par -3
1.\Transparent editors are the easiest to use and to learn to use.
$par -3
2.\Editing a given file may be done identically on different
systems.
$par -3
3.\Paper tape editing cannot be done with a
strict subset of the full editor.
$par -3
4.\The implementation of a transparent editor may be more
complicated than that of a window editor.
$ind -5
$skip 1
The major points made about window editing are:
$ind +5
$par -3
1.\Window editors may be easier to implement.
$par -3
2.\Window editors are highly compatible with paper
tape
editing.
$par -3
3.\In order to retain implementation advantages window 
editors must constrain the user to single pass editing.
$par -3
4.\Window editors usually require some explicit window
manipulation commands.
$par -3
5.\The mode of operation required by window editors 
would be unfamiliar to many present QED users.
$ind -5
$skip 1
The following recommendations are made based on these points.
Any implementation of a window editor which permitted moving
the window backwards as well as forwards would be
just as complicated as the implementation of a transparent
editor.
Thus the only window editor which makes sense is a single pass 
editor.
The disadvantages of such an editor are substantial.
In particular the operating constraints placed on the 
user are a major disadvantage.
In comparison the disadvantages of the transparent approach
are minor.
Insisting that paper tape editing be done with
a strict subset of the full editor is not reasonable.
The implementation of transparent editors appears
to be a manageable problem.
The best approach seems to be
to design a transparent style editor and define a special
set of commands for use in a paper tape editor.
$control off
$translate '`' '\'
$TITLE LEFT 'QED MEMO #2 - INTRA-LINE EDITING' LEFT '12/22/78' left 'S. M. Roush'
$skip 3
I. &INTRODUCTION&
$skip 2
This memo addresses the two related issues of intra-line editing
and previous line editing.
The disadvantages and problems associated with control character
editing have been well documented (see the memo on this subject
issued by A. Kortesoja on 10/10/78).
Character editing does have some advantages over whole line,
substitution style editing.
In particular it is convenient for editing tabular data
and for correction of errors in long command lines.
Both of these situations are cases of previous line editing.
These considerations give rise to the following three questions,
which will be subject of this memo.
$ind +10
$par -3
1.\How might the present Pascal QED SUBSTITUTE command be
enhanced to make it an adequate alternative to character
editing?
$par -3
2.\Are alternatives to control character editing
available for previous line editing?
$par -3
3.\If character editing is deemed necessary how should it be done?
$ind -10
$skip 2
II. &SUBSTITUTE COMMAND ENHANCEMENTS&
$SKIP 1
The ability to address the Nth occurrence of a character string
within a line is one enhancement which has been suggested.
This is an extension to the substitute command which
can be made in a fairly natural way.
The syntax of the present Pascal QED substitute command
could be extended as follows:
$par +5
ld S [n] /present string/replacement string/[options]
$par
Here 'n' is an optional integer which specifies that
the nth occurrence of 'present string' is to be matched.
The 'ALL' option could either be illegal or could be interpreted
to mean that all occurrences of 'present string' from the
nth on should be replaced.
The later alternative seems preferable.
$skip 1
A second suggestion which has been made is to add
an ability to insert or append a given character string within 
a line.
This could also be done by enhancing the present SUBSTITUTE
command syntax in the following way:
(underlining is used to indicate minimal abbreviations)
$par +5
ld S [&I&NSERT|&A&PPEND] [n] /present string/replacement string/ [options]
$par 
When INSERT or APPEND was present the 'replacement' string would be
inserted in the current line before or after the matched string,
which would remain unaltered.
This is not as clean an enhancement of the SUBSTITUTE command
as the first suggestion. 
When the INSERT or APPEND option is used the command no longer
really does a substitution.
An alternative would be to come up with a new command in which
both INSERT and APPEND were still optional but one of them 
was the default.
The primary problem with this idea is
selecting a good name for the command which does not conflict
with present commands.
One possibility would be '&AD&D'.
$skip 1
An indirect way in which the power of the SUBSTITUTE command
could be enhanced is by defining more
powerful string patterns.
There are many possibilities here: wild cards, regular
expression notation, directional searches, memory
indicators, etc.
These will be the subject of a separate memo.
$skip 2
III. &PREVIOUS LINE EDITING&
$skip 1
An alternative to control character editing of previous
lines can be constructed based on the
SUBSTITUTE command.
Currently a ^G can be used to invoke character editing
at the start of an input line when entering a new command
or when entering text under the APPEND, CHANGE and INSERT
commands.
Previous line editing is convenient when
the previous line is lengthy and in error, and,
 when tabular data
is being entered.
A possible alternative is the following.
Define a printing character, which we can denote by <prev line char>,
to serve the same role as ^G now does, i.e., it invokes
previous line editing mode.
The character '`' is a possibility for this character.
Whatever character was chosen it would probably be
desirable to be able to reset it using a SET command.
When the <prev line char> was entered the user
could then enter as many SUBSTITUTE commands as would
fit on a single line.
Multiple line commands to edit a single line
conveniently do not make much sense.
Line designators would not be permitted; all commands would
operate on the previous line, whether it was text being entered
or the previous command line.
If text was being entered into the file then the
commands would be executed and the resulting line would
be the new line of text.
If the previous command was being edited then the commands
would be executed and the resulting line would be interpreted
as the new command to execute.
The user is somewhat protected from misinterpretation of a <prev line char>
entered as data because what follows 
must be a syntactically correct SUBSTITUTE command.
If it is not then an error will be signaled.
In summary this method would probably work out fairly well
for correcting errors in a previous command line.
In could be  awkward for entering tabular
data.
The power of the string patterns available would definitely
impact the usefulness of this concept.
$skip 2
IV. &CHARACTER EDITING&
$skip 1
If character editing must be included a good scheme
to follow is one of the alternatives described in the
Pascal QED definition of 77.
The main points of that proposal were the following.
$indent +10
$par -3
1.\Editing is done in two modes. 
Control mode is used for entering commands and their
parameters.
Input mode is used to enter text which replaces  characters
in the original line.
$par -3
2.\A printing character is used as an <alt mode>
character to invoke control mode.
All text entered up to the next <alt mode> character is
interpreted as character editing commands and parameters.
$par -3
3.\If possible commands are not echoed.
If permitted by the system echoing would be done in a manner
specific to the individual commands.
Echoing would not be consistent in full and half duplex systems.
$par -3
4.\Carriage returns would be handled differently 
in systems permitting character at a time I/O than in systems
permitting only line at a time I/O.
$ind -10
This scheme eliminates control characters but is not
entirely consistent across systems.
$skip 2
V.\&CONCLUSION&
$SKIP 1
Character editing should be dispensed with if at all feasible.
The SUBSTITUTE command enhancements described in section II
seem reasonable and should be carefully considered for
inclusion in the new QED specification.
More thought needs to be given to previous line editing 
schemes.
The one described in section III is a possible approach
but is certainly not ideal.
$title left 'QED MEMO #3 - PAPER TAPE EDITING' LEFT '1/03/79' LEFT 'S. M. Roush'
$skip 3
I. &INTRODUCTION&
$skip 1
This memo describes a set of commands designed to permit paper
tape editing with QED.
The commands described here plus a subset of the full QED commands
would form the basis of a paper tape editor.
The goals in formulating these commands have been:
$ind +5
$par -3
1.\to permit a convenient user interface,
$par -3
2.\to maintain consistency with QED disk editing commands, and,
$par -3
3.\to maintain compatability with the present ST-1 editor in so
far as consistent with (1) and (2) above.
$ind -5
$skip 2
II. &TAPE EDITING COMMANDS&
$skip 1
This scheme assumes a paper tape only editor.
If diskettes are available it is assumed all editing is done on the diskettes
and utility programs are then used for punching tapes.
The paper tape editor described is a 'window' style editor
(see QED memo #1, 12/22/78).
The window represents the portion of the tape file currently in
main memory.  
As an editing session progresses, the window moves forward
over the tape file.
Statements from the tape are read into memory when 
they enter the window and are punched onto the output tape
when the they leave the window (unless output is disabled).
Line numbers are absolute, rather than relative to the start
of the window, and refer to the statement numbers in the &input&
tape.
The window may be moved either explicitly (via the 'ADVANCE'
command) or implicitly.
The window is moved implicitly whenever a line beyond the
current window is adressed.
The first and last statements of the window can be symbolically
addressed via the symbols '[' and ']'.
$skip 1
The commands directly relevant to paper tape 
editing are described below:
$ind +5
$par -3
1.\ADVANCE ld - the window is moved forward until the designated
line is the first line of the window.
  Any lines passed over (lines
exiting the window) are punched unless output is inhibited.
$par -3
2.\SET OUTPUT ON/OFF - enables or disables the punching of lines
passed over by the window.
The default is 'ON'.
$par -3
3.\SET PTP(<tape code>) - sets the punch code to either ASCII
or EIA.
The default is the same code as specified in the last APPEND PTR
statement or the system default if no APPEND PTR has been issued.
$par -3
4.\FINISH - the window passes over the remaining input.
The input is punched on the output tape unless output has
been disabled.
After the input tape has been processed, the end of tape characters and
checksum are punched in the output tape.
$par -3
5.\GLOBAL - this command is identical to the deferred substitute
command in the present ST-1 editor.
$par -3
6.\TRAILER - punches the end of tape characters
and checksum in the output tape.
$par -3
7.\TRUNCATE - terminates processing of the current input tape
and deletes any text currently in the window.
$par -3
8.\PUNCH - data entered from the terminal is immediately punched
on the output tape in man readable form.
This mode is terminated by entering a line from the terminal 
consisting of only the character '.'.
$par -3
9.\APPEND PTR(<tape code>) - specifies the paper
tape reader as the input source and optionally specifies the
input tape code.
If a tape was already being appended then the window first
passes over all of that tape.
In any case the current window contents, if any, is punched
on the output tape unless output is disabled.
Finally the new tape is read until the window is full
(or the end of the tape is reached, whichever occurs first).
The current line is set to one, the first line of the
new tape.
Line designators are &not& permitted with this command.
$par -3
10.\ld\APPEND<cr> - lines entered from the terminal are
appended to the file after the designated line.
The window is moved to include the designated line if
necessary.
Lines will be punched on the tape as necessary.
Input is terminated by entering a line consisting of only the character '.'.
$ind -5
$skip 2
III. &EXAMPLES&
$skip 1
$ind +5
$par -3
1.\Adding lines to the beginning of a tape.
$ver
*APPEND
line 1
line 2
  .
  .
  .
line n
.
*APPEND PTR
$jus
$skip 1
Note that the output file is assumed to be the paper tape punch.
$skip 1
$par -3
2.\Joining two tapes in the middle of the first (the first eight
lines of the new tape and all of the second tape will form
the new tape).
$ver
*APPEND PTR
*ADVANCE 9
*TRUNCATE
*APPEND PTR
*FINISH
$jus
$skip 1
$par -3
3.\Joining two tapes at the end of the first tape.
$ver
*APPEND PTR
*APPEND PTR
*FINISH
$jus
$skip 1
$par -3
4.\Separating one tape into two (the first 15 lines of the tape
form the first output tape; the remainder of the input tape 
forms the second output tape).
$ver
*APPEND PTR
*ADVANCE 16
*TRAILER
*FINISH
$jus
$skip 1
Tape headers are automatically punched at the start of each tape.
$skip 1
$par -3
5.\Inserting a second tape in the middle of the first (the second
tape is inserted after line 15 of the first tape).
$ver
*APPEND PTR                      ( tape 1 )
*ADVANCE 16
*TRUNCATE
*APPEND PTR                      ( tape 2 )
*APPEND PTR                      ( tape 1 )
*SET OUTPUT OFF
*ADVANCE 16
*SET OUTPUT ON
*FINISH
$jus
$skip 1
$ind -5
$skip 1
IV.\&CONCLUSION&
$skip 1
The above commands differ from those of the present ST-1 editor in 
the following respects:
$ind +5
$par -3
1.\The present ST-1 editor uses a window of a single statement.
$par -3
2.\Enabling or disabling output and specifying tape output codes are done
via SET commands to maintain consistency with the full QED
specification.
$par -3
3.\An explicit window manipulation command, 'ADVANCE',
has been added.
$par -3
4.\Deferred substitutions are done with a separate command.
$par -3
5.\The TRAILER command has been added.
$par -3
6.\Punching man readable characters is done with a separate
command rather than with control characters.
$par -3
7.\The 'APPEND PTR' command causes the initial statements of the tape
to be read.
This is consistent with the full QED specification.
$par -3
8.\Input from the terminal is terminated with a line consisting of only 
the character '.'.  
This is also for consistency wigh the full QED specification.
$par -3
9.\Symbols for addressing the first and last lines of the
window are available.
$par -3
10.\The TRUNCATE command deletes the current 
contents of the window.
$ind -5
$skip 1
The above changes represent a potential inmprovement over
the present ST-1 editor in two respects.
First, the above scheme is intended to be more 
consistent with the eventual full QED specification.
Second, expanding the window to permit multiple
statements results in a more powerful and more convenient
editor.
Realization of this advantage, however, is subject
to implementation constraints.
Since a paper tape ST-1 editor must be entirely memory
resident, the size of the main memory window is severely limited.
$TITLE LEFT 'QED MEMO #4 - CONTEXT SEARCHES AND PATTERN MATCHING' LEFT '1/08/79' LEFT 'S. M. Roush'
$skip 3
I. &INTRODUCTION&
$skip 1
This memo discusses several proposals which have been made 
concerning pattern matching and context searching.
QED is a context search oriented editor.
The ease of use and power of context searches
and text patterns is critical to such an editor.
In particular these issues directly impact the substitute
command.
$skip 1
Several extensions to present QED constructs will be discussed.
These ideas have either been proposed as extensions to QED or
have been implemented in other editors.
Three criteria are used in evaluating each concept:
$ind +5
$par -3
1.\Is the construct generally useful, i.e., would it be useful
in commmon situations rather than rare or unusual situations.
$par -3
2.\Is the capability provided otherwise unavailable.
$par -3
3.\Is the &overall& ease of use of the editor enhanced.
$ind -5
$skip 2
II. &BACKWARDS SEARCHES&
$skip 1
A backwards search capability has been both proposed for QED
and implemented in similiar editors.
The syntax of string predicates can be simply extended to
allow backwards searches:
$par +5
<directional search> ::= ^<string predicate> | <string predicate>
$par
The uparrow is used to indicate that the search should 
start with the previous line and proceed backwards.
This construct could appear anywhere a string predicate
currently may, except in a FIND command.
In a FIND commmand, as defined in Pascal QED,
a backwards search would conflict with the semantics
of the command.
A backwards search is of little value in a FIND command
since all lines within the range of the FIND are examined
anyway.
Notice that in line designators constructs such as the following
are allowed:
$par +5 
/(* with *)/^/foo/
$par
This could search forward to the end of
a Pascal WITH statement and then backwards to find the last
occurrence of 'foo' within the scope of the WITH.
The semantics of concatenated search predicates can be defined
as follows. 
The first predicate in a line designator searches forwards
(or backwards) until a match is found or the starting line is
reached, wrapping around the end (or, for a backwards search,
the beginning) of the buffer if necessary.
Subsequent searches begin at the last line calculated plus (or minus)
one and continue until either a match occurs or one of the
following conditions is met: (1) the beginning (or end)
of the file is reached, or, (2) the highest (or lowest) numbered
line which any previous search started at is reached.
Thus each search is of a progressively narrower range of lines.
$skip 1
The primary value of a backwards search capability is in facilitating
'local' editing.
The desirability of being able to edit locally has been
pointed out in earlier memos.
The ability to search backwards is currently unavailable in
any of the  QEDs.
The syntax described above for backwards searches is a
natural extension of the syntax of present string predicates.
$skip 2
III. &Nth OCCURRENCE SEARCHES&
$skip 1
A second proposal which has been made is to allow searches for
the Nth occurrence of a string matching a given
pattern.
Several approaches to providing this capability are possible.
A general approach would be to extend the syntax of string
predicates in a manner similiar to that done above for backward
search predicates.
A natural syntax would be:
$par +5
n<string predicate>
$par
However this syntax would lead to ambiguities in line designators.
A slight modification eliminates the ambiguity in line 
designators, except in the Pascal QED:
$par +5
<string predicate>n
$par
The Pascal QED would interpret the above as the address
of the line n lines beyond the line addressed by the
string predicate.
All other  QEDs would require a plus sign between
the string predicate and the integer.
Thus the above syntax could be used at the expense
of 'reeducating' Pascal QED users.
The 'naturalness' of the syntax is open to debate.
It is somewhat dangerous in that very similiar constructs
are interpreted very differently, e.g., '/First,/2' and
'/First,/+2'.
$skip 1
A second approach is to modify the FIND command and leave
the syntax of string predicates alone.
The FIND command syntax could be extended as follows:
$par +5
FIND [n] <string predicate> [commands]
$par
The optional 'n' would indicate that the nth occurrence of the
string should be found and the commands executed for that
occurrence only.
A new command where the 'n' parameter was mandantory or defaulted
to one could also be introduced, rather than overloading
the FIND command.
This extension is a natural one syntactically.
However the first approach is more powerful or at least more
convenient.
For example, with the first approach the following will
execute a set of commands for every third occurrence of a
string:
$par +5
FIND /string/3 [commands]
$par
The second approach would require:
$par +5
FIND /string/ .+1,$FIND 2 /string/ [commands]
$skip 1
A third approach which works well for small values of n
is already available.
The line designator '/string/////' finds the third occurrence of the
given string.
The task of the above example can be accomplished by:
$par +5
FIND /string/ ////[commands]
$par
Clearly  this approach does not work well for large n.
$skip 2
IV. &WILD CARDS&
$skip 1
A third capability which has been proposed
is a wild card character which will match an arbitrary string.
The character '?' is currently available to match any single
character.
Multi-character matches could be implemented in several ways.
One approach would be to choose a character which will
match 0 or more characters.
The character '*' is often used for purposes similiar
to this.
However, any character chosen should be resettable by the
user.  
A convention on how much is matched by '*' is necessary.
For example, the pattern 'a*b' used with the string 'abbddb'
might match '' (the null string), 'b' or 'bbdd'.
Two possible rules are: (1) match the longest string consistent
with the rest of the pattern, or, (2) match the shortest string
consistent with the rest of the pattern.
The following examples indicate that the second alternative
is preferable
and also show some situations in which '*' is useful.
$ind +5
$par -3
1.\Matching everything from a given character string
up to the end of the line:
$par +5
@The*@
$par
In this situation the '@' forces the wild card to match 
everything up to the end of the line; the two
alternatives are equivalent.
$par -3
2.\The following example assumes a substitute command
with the APPEND option as described in QED memo #2.
The intent is to insert a new parameter definition into a
parameter list after the first two parameters.
$par +5
SUBSTITUTE APPEND /;*;/VAR FOO: FOO_TYPE;/
$par
Here matching the shortest possible string achieves the
desired effect.
$par -3
3.\The following pattern is intended to match identifiers
beginning with the letter 'A'.
$par +5
!A*!
$par
Again matching the shortest possible string would give
the desired effect.
$ind -5
$skip 1
Another approach would be to interpret '*' as a
closure operator on a specific character set:
$par +5
<character set>*
$par
This construct would match any string of characters from the
specified set.
This construct is more powerful than the first approach.
It permits matching strings composed only of digits or only
of alphanumerics.
A concise means of specifying character sets within patterns
is required.
The following notation illustrates one possibility:
$par +5
<A-Za-z0-9>
$par
This designates the set of alphanumeric characters.
Even this shorthand is fairly verbose.
Another possibility is to designate special characters to
denote common character classes within patterns.
A disadvantage of this approach is that it would require
the introduction of several metacharacters, i.e., several 
characters would now have special meanings within patterns.
It is very easy to accidently include such characters
in a pattern intending them to be taken literally.
The bracketing characters '[', '(' and '<' occur commonly
in Pascal programs.
An escape character and SET options are possible but
cumbersome, and, are effective only if you remember to
use them.
$skip 2
V. &CONCLUSION&
$skip 1
The backward search proposal is well worth including in a
new QED specification.
It meets all of the criteria given in the introduction:
the capability would be very useful, is otherwise unavailable
and can be included in a manner upwards compatible
with present QEDs.
The wild card proposal would be useful, as is demonstrated by
the examples given.
It also provides a capability currently unavailable.
The ease of use criterion favors the first of the two
approaches described.
While the second approach is more powerful, its &overall&
effect on the ease of use of the editor may be negative.
The picture is less clear on the "nth occurrence search"
proposal.
The capability is currently available for small values of
n.
The first approach is not upwards compatible with the present Pascal
QED.
The second approach is a less general solution.
Review of the two alternatives by a wider audience would
be beneficial.
    C"?L