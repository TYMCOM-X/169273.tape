


                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page i








                          PROPRIETARY DOCUMENT INFORMATION
                          ----------- -------- -----------


             The material contained in this document is proprietary  and
             confidential  to  TYMSHARE,  Incorporated, and is not to be
             used, reproduced, or disclosed except  in  accordance  with
             program  license  or with written permission from the legal
             division of  TYMSHARE,  Incorporated,  20705  Valley  Green
             Drive, Cupertino, California 95014.



                                      May 1981








































                                           
                                           
                                           
             Tymshare  Pascal Compiler User's Guide             Page ii




                                      Contents

























































                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 1


             1 INTRODUCTION               INTRODUCTION



             This  document  describes  how  to  use the Tymshare Pascal
             compiler.  Included  is  a  complete  description  of   the
             various  options  available.  A  sample compiler listing is
             also shown and described.  Features of  the  DEC-10/20  and
             the DEC VAX-11 versions of Tymshare Pascal are described in
             Appendixes C and D, respectively.  Appendix A describes the
             notation   used   throughout   the  document  to  show  the
             constructs of the Pascal language.

             Other documents included in the  Tymshare  Pascal  Language
             series are:


                   o   Tymshare  Pascal Debugger User's Guide--describes
                       how to use the Tymshare Pascal debugger.

                   o   Tymshare Pascal Language Reference  Manual--gives
                       the complete specification of the Tymshare Pascal
                       language.





























             Introduction
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 2


             2 BASIC USE OF THE COMPILER               BASIC USE OF THE COMPILER



             The development of  correct  and  efficient  code  normally
             involves  designing,  coding,  compiling,  debugging (these
             last  two  through  several   iterations),   and   possibly
             optimizing.   The   following   example,   which  uses  the
             DEC-10/20 version of  Tymshare  Pascal,  provides  a  quick
             overview of the method of compilation.  In the example, and
             throughout this document, user input is underscored.

             --------------------------------------
             |  .R NEWPAS[52250,220]              | -- starts up the 
             |                                    |    compiler
             |                                    |
             |    Pascal, Version xx(xxx)-x       |
             |                                    |
             |  *DIGITS                           | -- compiles the  
             |                                    |    Pascal source 
             |                                    |    file, DIGITS.PAS
             |                                    |
             |  */EXIT                            | -- stops the 
             |                                    |    compiler
             |                                    |
             |    EXIT                            |
             |                                    |
             |  .EXECUTE DIGITS                   | -- loads and   
             |                                    |    executes the
             |                                    |    relocatable 
             |                                    |    binary file, 
             |                                    |    DIGITS.REL, which
             |                                    |    was produced by 
             |                                    |    the compiler
             |                                    |
             |    LINK: Loading                   |
             |                                    |
             |   ['DIGITS' Execution]             |
             |                                    |
             |  .                                 |
             |  .                                 |
             |  .                                 |
             --------------------------------------


             To run the compiler, enter

                       .R NEWPAS[52250,220]

             at the monitor prompt.  The compiler will respond with  the
             compiler  version  being run, and then display the compiler

             Basic Use
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 3


             prompt, an asterisk (*).

                       Pascal, Version xx(xxx)-x

                       *

             The compiler is controlled by  "commands"  which  the  user
             enters   at  the  asterisk.  Section  3  gives  a  complete
             description of these commands.



             2.1 Exiting from the Compiler                 Exiting from the Compiler


             After processing each command, the compiler will prompt for
             another.  To indicate that there are no more programs to be
             compiled and to exit from the  compiler,  the  user  should
             enter /EXIT directly after the prompt.  For example:

                       */EXIT

                       EXIT

                       .



             2.2 The EXECUTE Command                 The EXECUTE Command


             The  EXECUTE  command  is  used  when  the  program  has no
             external references; i.e., doesn't need to be  LINKed  with
             other  relocatable  binary  files.  To run the program, the
             user enters the command followed by the relocatable  binary
             file  name  at  the  monitor  prompt.  (If  an extension is
             omitted, ".REL" is assumed.)

                       .EXECUTE DIGITS

                       LINK:  Loading

                       ['DIGITS' Execution]


             Program   execution   begins   following   the   "['DIGITS'
             Execution]" message.

             Programs composed of multiple relocatable binary files from
             separate  compilations  should  be  LINKed,  producing   an
             executable  copy  which  is then run.  Also, programs which

             Basic Use
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 4


             are run often, and changed infrequently, should  be  LINKed
             to  reduce  the  expenditure  of  computer  resource  units
             (CRUs).  To learn about the  features  of  LINK  (a  system
             program  which  may  be  used  to resolve external links to
             produce executable programs), see the DECsystem-10  LINK-10
             Programmer's Reference Manual.














































             Basic Use
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 5


             3 COMMANDS SPECIFIED AT THE ASTERISK               COMMANDS SPECIFIED AT THE ASTERISK



             This  section  describes  five  commands which the compiler
             accepts at the asterisk prompt.  These commands are:


             compiler-command ::=

             [[rel-file] [','[lst-file]] '=']
                  source-file ['/'option [{','|'/'}option] ...]

               | '/'option [{','|'/'}option] ...

               | '@'command-file

               | program'!'

               | ':'immediate-command parameter 


             The compiler will accept  commands  entered  in  uppercase,
             lowercase,  or  mixed  case.  Furthermore,  it  will ignore
             blanks, except in the middle of file names,  option  names,
             and numbers.



             3.1 Compiling a Source File                 Compiling a Source File


             The  first  command  recognized  by  the  compiler  at  the
             asterisk prompt is the "compilation command".  It tells the
             compiler  to  compile a specified source file.  The form of
             this command is:

             [[rel-file] [','[lst-file]] '=']
                  source-file ['/'option [{','|'/'}option] ...]

             Note that  the  source  file  name  is  the  only  required
             information;  all  else is optional.  The optional portions
             are explained in Section 3.1.1 and 3.1.2.

             In the following example, which  shows  how  to  compile  a
             source file using the DEC-10/20 version of Tymshare Pascal,
             the name of the file is entered at the asterisk.

                       *DIGITS

             This  tells  the  compiler  to  compile  the  source  file,

             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 6


             DIGITS.PAS.  (If  a  file  extension  is omitted, ".PAS" is
             assumed.) A relocatable binary file with the same  name  as
             the  source  file  but  with  a  ".REL"  extension  will be
             produced (DIGITS.REL).  A listing file will not be  created
             unless  it  is explicitly requested (see Sections 3.1.1 and
             3.1.2).



             3.1.1 Relocatable and Listing Files                   Relocatable and Listing Files

             An optional portion  of  the  compilation  command  may  be
             entered preceding the source file name.  It allows the user
             to choose specific names for relocatable binary  files  and
             listing files rather than use the default names selected by
             the compiler.  The form of this optional portion is:

                       [rel-file] [','[lst-file]] '='

             When using this optional part, where  at  least  the  equal
             sign  is  included,  the  user  must  specify names for the
             relocatable binary file and the listing file or they  won't
             be  created.  If  the  file  extensions  are  omitted,  the
             compiler  will  assume  an  extension  of  ".REL"  for  the
             relocatable  binary  file  and ".LST" for the listing file.
             If a listing file is specified, the compiler will  print  a
             source  listing  unless  it is suppressed with "/NOSOURCE".
             For example, the user could enter:

                       *CITY.AMT,PAID.80=TAXES.CIT

             This compiles source  file  TAXES.CIT,  creating  a  binary
             relocatable  file  named  CITY.AMT and a listing file named
             PAID.80.

                       *PRICES.CHG=RATES.FIG

             This compiles source file RATES.FIG, creating a relocatable
             binary  file named PRICES.CHG.  Since the comma is omitted,
             the name to the left of the equal sign is assumed to  be  a
             ."REL" file name.  No listing file name is specified, so no
             listing file will be created.

                       *,TOTAL=DEBITS

             This will compile "DEBITS.PAS" and create  a  listing  file
             named  "TOTAL.LST",  but  it  will not create a relocatable
             binary file, since a name for it was  not  specified.  Note
             that  the  comma  is  necessary to set off the listing file
             name, regardless of whether or  not  a  relocatable  binary
             file is specified.

             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 7


                       *=TESTER

             This   asks   the   compiler   to  check  the  source  file
             "TESTER.PAS" for errors and type any error messages at  the
             terminal.  Neither  a relocatable binary nor a listing file
             will be created.  This response is equivalent to specifying
             the source file with the options, /NOSOURCE,NOCODE.


             3.1.2 Specifying Options                   Specifying Options

             Another  optional portion of the compilation command may be
             entered following the source file name.  It allows the user
             to  specify  "options".  The  form of this optional portion
             is:

                       '/'option [{','|'/'}option] ...

             A slash ("/") separates the options from other text on  the
             compiler  command  line.  Individual  options in an options
             list must be  separated  from  one  another  by  commas  or
             slashes.  Options  are specified when the user wishes to go
             beyond the  basic  compilation  with  its  various  default
             actions.  For  example,  for  a program or module, the user
             may want to obtain a listing, optimize, or compile in DEBUG
             mode  in  order to use the Pascal debugger.  Options may be
             specified either at the asterisk or in the  source  program
             (as   "block  options"  and  "source  directives").  Source
             directives are explained in Section 4.2.

             A few of the common options are listed  below.  A  complete
             description of compiler options is given in Section 5.

                         SOURCE   - creates a listing file with the same
                                    name  as  the  source  file  and  an
                                    extension of ".LST".

                         DEBUG    - compiles  a  module  so  it  can  be
                                    debugged using the Pascal  debugger.
                                    Both a ".REL" file and a ".DEB" file
                                    are produced.

                         NOCHECK  - causes run-time error checking to be
                                    disabled.

                         OPTIMIZE - generates   code   which   is   more
                                    efficient;  i.e.,  executes   faster
                                    and/or   takes   up   less  storage.
                                    However,   compilation   will   take
                                    longer.


             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 8


                         SYMBOLS  - adds    descriptions   of   declared
                                    symbols (identifiers) to the listing
                                    file.

                         XREF     - adds     symbolic    cross-reference
                                    information to the listing file.


                  Example:  The user wants  to  compile  a  file  called
             COUNTS.  A  listing  of  the  module is also required.  The
             following should be entered:

                       *COUNTS/SOURCE

             Since the file extension is omitted, the  compiler  assumes
             an  extension  of  .PAS.  This  will  create  a relocatable
             binary file named  COUNTS.REL  and  a  listing  file  named
             COUNTS.LST.

             The  FORMAT  utility  program may also be used to produce a
             source file list
                  Example:  The user wants to use the Pascal debugger to
             debug  a module, whose source is in COMPUT.PAS, and produce
             a listing of the module, complete  with  information  about
             the locations and uses of all the symbols in it.  To obtain
             this, the user can enter:

                       *COMPUT/DEBUG,SOURCE,SYMBOLS,XREF

             When COMPUT.REL is loaded, the Pascal  debugger  will  then
             load  the  file COMPUT.DEB, which was created by specifying
             the DEBUG option.


                  Example:  The program NAMES has been debugged  and  no
             more  run-time  errors  are  expected.  The  user wants the
             compiled  program  to  run  as  quickly  as  possible,  and
             therefore  wants run-time error checking disabled (NOCHECK)
             and the module optimized (OPTIMIZE).  In addition, the user
             wants  the  compilation  to  be terminated if there are any
             nonfatal warning messages (NOFINISH).  The user also  wants
             to  know how long the compiler took to compile the program,
             and how much memory the program required (STATISTICS).  The
             following should be entered:

                       *NAMES/NOCHECK,OPTIMIZE,NOFINISH,STATISTICS


                  Example:  The  user  has  just  started  working  on a
             module called RANDOM.NUM, and wants to see if there are any

             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 9


             mistakes  so  far.  Since the module is incomplete, there's
             no point  in  wasting  computer  resources  by  having  the
             compiler  generate  code  for  it.  The  user  can have the
             compiler check the module for syntactic and semantic errors
             without generating code by entering:

                       *RANDOM.NUM/NOCODE

             Many  options  take  numbers  or identifiers as parameters.
             Parameters are enclosed in  parentheses  to  separate  them
             from  the  option  name (a colon, equal sign, or blanks may
             also be used).  For example, a  parameter  to  the  STORAGE
             option (which specifies the number of words to be allocated
             to the program stack at run time) could be specified:

                       /STORAGE(4096)

             An identifier parameter to the ENABLE  option  (which  sets
             user-defined "flags" to TRUE), would be specified:

                       /ENABLE(TESTING)

             Multiple  parameters  for  an  option  must  be enclosed in
             parentheses and separated by commas.  For example:

                       /ENABLE(TRIAL1,TRIAL2,TRIAL8)

             The options shown in  these  examples  are  explained  more
             fully in Section 5.



             3.2 Changing Default Options                 Changing Default Options


             Occasionally  a  user  may  wish to change various compiler
             default option values.  (A complete  list  of  options  and
             their defaults is given in Section 5.) The user can do this
             by entering an "options command" at the asterisk prompt.

                       '/'option [{','|'/'}options] ...

             In this form, the user  omits  the  source  file  name  and
             enters only a slash and an options list.  This replaces the
             compiler default values for the  options.  The  new  values
             will  remain in effect on all subsequent lines, though they
             may be changed for any particular  line.  For  example,  to
             compile  programs  PEOPLE,  PHONES,  AGES, and SEX, and get
             listings for all of them except AGES, the user may enter:

                       */SOURCE

             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 10


                       *PEOPLE

                       *PHONES

                       *AGES/NOSOURCE

                       *SEX

             As shown in the example, specifying  an  option  by  itself
             changes  the default until it is changed again.  Specifying
             an option in conjunction  with  a  file  name  changes  the
             default for that file only.



             3.3 Specifying a Command File                 Specifying a Command File


             A  third compiler command allows the user to repeatedly run
             the compiler without having to type the same lines over and
             over.  Instead,  the  lines  are  put  into  a file and the
             compiler is told to read from that file.

             The form of this command is:

                       '@'command-file

             If the extension is omitted from the command file name, the
             compiler  will  first  look  for  a file with the extension
             ".CCL"; if it can't find that, it will look for a file with
             the extension ".CMD".

             The  compiler  will read and process lines until it reaches
             the end of the  command  file;  it  will  then  prompt  for
             another line from the terminal.

             When  the compiler is run with a command file, the compiler
             will not type prompts to the terminal.  It  will  type  out
             the  command  lines  from  the  file  only  if they contain
             errors.  Blank lines in  command  files  are  ignored.  The
             compiler  will  prompt  for  another line from the terminal
             when it reaches the end of the file.  It  will  stop  while
             reading a command file only if a /EXIT switch is read.



             3.4 Running Another Program from the Compiler                 Running Another Program from the Compiler


             A  fourth  compiler command causes the compiler to transfer
             control  to  another  program.  This  capability  is  often

             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 11


             useful  when  the  compiler  itself  is  run  from  another
             program.  The form of this compiler commmand is:

                       program'!'


             "Program!" tells the compiler to stop execution immediately
             and  run  another  program in its place, where "program" is
             the  file  name  of  the  program  to  be  executed.  If  a
             "device:"  is  not specified in the file name, the compiler
             will look in the SYS:  directory for the specified program.
             The  user can execute a program in his or her own directory
             by typing "DSK:program!".  To execute  a  program  in  some
             other   directory,  use  "DSK:program[ppn]!",  where  "ppn"
             stands   for   project-programmer   number   (also   called
             "account-user number").



             3.5 Using Immediate Commands                 Using Immediate Commands


             A  fifth  compiler  command  which  may  be  entered at the
             asterisk is an "immediate command".  An  immediate  command
             tells  the  compiler to perform all subsequent compilations
             with a specified  extended  environment  for  a  particular
             target  machine.  (See  Appendix  B  for  a  description of
             extended environments.) This compiler command has the form:

                       ':'immediate-command parameter

             Two immediate commands are presently  available:  ":TARGET"
             and  ":ENVIRON" (each may be abbreviated to the first three
             letters).

             ":TARGET" takes the parameter,  "machine-id",  which  tells
             the  compiler  to  generate  code for a particular machine:
             the DEC PDP-10, or the DEC VAX-11.  Machine identifiers are
             "P10" for the DEC PDP-10, and "VAX" for the DEC VAX-11.

             ":ENVIRON"   takes   a   file   name  parameter  called  an
             "environment  file".  It  tells  the  compiler  to  perform
             subsequent   compilations   using  the  specified  extended
             environment.  If  the  file  extension  is   omitted,   the
             compiler assumes an extension of ".ENV".

             Appendix  B gives a more complete description of the use of
             environment modules and discusses  their  interaction  with
             the ":TARGET" immediate command.



             Commands at the Compiler Prompt
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 12


             4 BLOCK OPTIONS AND SOURCE DIRECTIVES               BLOCK OPTIONS AND SOURCE DIRECTIVES



             Besides  commands specified at the asterisk or in a command
             file, the  compiler  also  recognizes  "block  options"  or
             "source  directives"  specified in the text of a program or
             module.



             4.1 Block Options                 Block Options


             Options  may  be  associated  with   a   program,   module,
             procedure,  or  function.  They  are specified in a special
             options clause on the heading statement  of  the  block  to
             which the options apply:

             block-head ::= program-heading [ options-clause ]       

               | module-heading [ options-clause ]        

               | procedure-heading [ options-clause ]     

               | function-heading [ options-clause ] 


             options-clause ::= OPTIONS ['*']option 
                  [','['*']option ] ...

             As  shown  above, a program, module, procedure, or function
             heading may be followed by an  options  clause  (i.e.,  the
             keyword OPTIONS, followed by a list of options separated by
             commas).  All  option  parameters  must  be   enclosed   in
             parentheses.  The  entire  options clause comes just before
             the semicolon at the end of the block heading.

             An option in the heading applies to any inner procedures or
             functions.  Thus,  an "OPTIONS DEBUG" clause on the program
             statement of a program will cause the  entire  program  and
             all  the  procedures and functions within it to be compiled
             in DEBUG mode.  An option that is  specified  on  an  inner
             block  overrides any options that are specified on an outer
             block; thus, if the main program is declared with  "OPTIONS
             XREF",  and  an  inner  procedure is declared with "OPTIONS
             NOXREF", then the inner procedure (and any other procedures
             within  it)  will  be  compiled  without  the  XREF option.
             Similarly, an option that is typed on the compiler  command
             line  will  be  overridden by an option that is declared in
             the program or module statement in the source file.

             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 13


             For exceptional cases where the user wants  to  specify  an
             option  so  that it applies only to a single block (and not
             to any blocks declared within it), the option name  may  be
             preceded  with  an  asterisk  ("*").  For example, "PROGRAM
             GARGLE OPTIONS ASSEMBLY" will produce an  assembly  listing
             of  the  entire  compilation,  but  "PROGRAM GARGLE OPTIONS
             *ASSEMBLY" will produce an assembly  listing  of  only  the
             main program.

                  Example:  In  the  following  example,  the  user  has
             specified 4096 words to be allocated to the  program  stack
             at  run time.  In addition, all error checking is disabled,
             and the DEBUG option has been selected.

                       PROGRAM ARMY_ANTS

                         OPTIONS STORAGE(4096),

                                NOCHECK, DEBUG


                  Example:  The user  wishes  to  compile  the  function
             "EXAM"  with  the  OPTIMIZE  option in an effort to improve
             code efficiency.  The following could be entered:

                       FUNCTION EXAM(QUESTION:  EASY):  INTEGER

                         OPTIONS OPTIMIZE;

                  Example:  The user has compiled the external procedure
             "COMPLEX"  with the FORTRAN compiler.  To tell the compiler
             that the procedure must be called with  a  FORTRAN  calling
             sequence, the user can enter:

                       EXTERNAL PROCEDURE COMPLEX

                         OPTIONS FORTRAN;

                  Example:  The  user  wants to obtain listings relating
             the line numbers for the block "SPEED"  with  addresses  in
             the  generated  code.  An assembly listing of the procedure
             (but not of any nested procedures  or  functions)  is  also
             needed.

                       PROCEDURE SPEED

                         OPTIONS MAP, *ASSEMBLY;





             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 14


             4.2 Source Directives                 Source Directives


             Source  directives are used for formatting a Pascal program
             or module listing (for example, setting the number of lines
             to  be  printed  per  page  in  the  compilation  listing),
             controlling conditional compilation, or including text from
             another  file  in  a compilation.  Source directives may be
             specified in the text of a Pascal program or module.

             The form of a source directive is:

             '$'directive-name [{':'|'='|' '}] parameter
             | '$'directive-name ['('parameter [','parameter] ...')']

             Source directives begin with a dollar sign  ($)  in  column
             one  and  a  source  directive name in column two; only one
             source directive per source line  is  allowed.  Numeric  or
             identifier  parameters  must  be  set  off  from the source
             directive name with blanks, a colon, or an equal  sign,  or
             enclosed   in  parentheses.  Multiple  parameters  must  be
             enclosed in parentheses and separated by commas.

             Source directive lines may contain Pascal comments,  but  a
             comment  that  starts  on a directive line must be entirely
             contained on that line.

                  Examples:

                       $LENGTH 80

                       $INCLUDE SALAMI.TYP (* SAUSAGE DEFINITIONS *)

                       $IF FLAG

                       $ENABLE (APRIL, JUNE)

                       $ENDIF


             4.2.1 Formatting                   Formatting

             The use of formatting source  directives  can  improve  the
             appearance and readability of a user's program.

             A few common formatting source directives and their actions
             are listed below.  See Section 5 for a complete list.

                  $LENGTH page-size - specifies the number of lines  per
                                      page   in   the   source   listing
                                      produced  by  the  compiler.   The

             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 15


                                      default  length  of  45 is usually
                                      satisfactory.

                  $TITLE text -      causes a title to be printed on the
                                      first  line  of  each  page of the
                                      listing file.  The title is set to
                                      the  text  specified  on  the same
                                      line as the $TITLE directive.

                  $PAGE [text] -      forces the next line in the source
                                      listing  to  begin  on a new page,
                                      regardless of paging  which  would
                                      have   taken   place  due  to  the
                                      $LENGTH   directive.   Any    text
                                      following  the  directive  on  the
                                      same line appears as a subtitle on
                                      subsequent pages.


             4.2.2 Conditional Compilation                   Conditional Compilation

             Tymshare  Pascal allows a program to contain code which may
             or may not be compiled, depending on the  values  of  flags
             which  may  be  specified  by  the  user  at  the  time  of
             compilation.  This facility is provided by the  ENABLE  and
             DISABLE  options,  which  set  and  reset specified "flags"
             (identifiers), and the $IF, $IFANY,  $IFNOT,  $IFNONE,  and
             $ENDIF  conditional  compilation  directives, which delimit
             code to be conditionally compiled.  Any identifier  may  be
             used as a conditional compilation flag.

             ENABLE and DISABLE may be specified on the compiler command
             line, or as $ENABLE and $DISABLE source directives.  ENABLE
             sets  all the flags in a list to TRUE; DISABLE sets all the
             flags to FALSE.  Flags  are  automatically  initialized  to
             FALSE.

             There  are  four  conditional compilation directives.  Each
             one takes a list of flags, and conditionally compiles  some
             Pascal code, depending on whether the flags are set to TRUE
             or FALSE.  The four directives are:

                       $IF - compile code if ALL flags are TRUE

                       $IFANY - compile code if ANY flags are TRUE

                       $IFNONE - compile code if ALL flags are FALSE

                       $IFNOT - compile code if ANY flags are FALSE

             These four directives all have the same  syntax.  They  may

             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 16


             be specified in two different ways:

                    (1)  $IF (flags)  single line of Pascal code
                    
                    (2)  $IF (flags)
                              one or more lines of Pascal code
                         $ENDIF

             The user can conditionally compile a single line of code by
             putting it after the flags on the  directive  line  itself.
             If  there is more than one line of code to be conditionally
             compiled, then nothing (not even comments) must follow  the
             flags  on the directive line.  All code between the $IF and
             a  matching  $ENDIF   will   be   conditionally   compiled.
             $IF/$ENDIF  pairs  may  be  nested  to  any  depth.  On the
             compiler listing, code  under  $IF  control  which  is  not
             compiled  will be marked with an asterisk ("*") in the left
             margin.


                  Example:  For debugging, at a  certain  point  in  the
             program, the user wants to conditionally compile statements
             to print the value of "X" if flag "TRACE_X" is set to TRUE,
             the value of "Y" if "TRACE_Y" is set to TRUE, and the value
             of "Z" if "TRACE_Z" is set to TRUE.  The following forms of
             the $IF source directive could be used:

                  $IF TRACE_X WRITE (TTYOUTPUT, X);

                  $IF TRACE_Y WRITE (TTYOUTPUT, Y);

                  $IF TRACE_Z WRITE (TTYOUTPUT, Z);

                  $IFANY  (TRACE_X,TRACE_Y,TRACE_Z) WRITELN (TTYOUTPUT);
                  BREAK;


                  Example:  "LEFT",  "RIGHT",  and  "CENTER"  are  three
             conditional  compilation flags.  The constant "MODE" should
             be 0 if only "CENTER" is set to TRUE, 1 if "CENTER" is  not
             set  to  TRUE  and  "LEFT" or "RIGHT" is, or 2 if all three
             flags are set to TRUE.










             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 17


                       $IF CENTER

                       $IFNONE (LEFT, RIGHT) CONST MODE = 0;

                       $ENDIF


                       $IFANY (LEFT, RIGHT)

                       $IFNOT CENTER

                          CONST MODE = 1;

                       $ENDIF

                       $ENDIF


                       $IF (LEFT, RIGHT, CENTER) CONST MODE = 2;


             4.2.3 Including Other Source Text                   Including Other Source Text

             The $HEADER, $INCLUDE, and $SYSTEM directives may  be  used
             to   tell   the   compiler   to   include  the  text  of  a
             user-specified file in the source file at the  point  where
             the  directive  is issued.  These directives are more fully
             described in Section 5.

             The $HEADER directive may be used to include  a  file  that
             contains  comments, such as comments on a block heading, in
             the  source  text.  Since  $HEADER  directives   are   only
             processed  when  a listing file is being created, their use
             may increase the efficiency of compilation.

             The $INCLUDE directive may be used to include shared  type,
             constant,  and  variable  declarations  in  multiple files.
             This aids program consistency since declarations need  only
             be  entered  once  and will be identical in all files which
             use  them.  Using  $INCLUDE  to  insert  executable   code,
             however,  may  make  debugging  more difficult and increase
             program size.

             Note:  The inclusion  of  large  quantities  of  text  with
             $INCLUDE  or  $SYSTEM  directives can result in very large,
             and   therefore    expensive,    compilations.    "Extended
             environments"  provide  a  way  to  compile a collection of
             declarations  only  once  and   then   use   the   compiled
             declarations  in  subsequent  compilations.  See Appendix B
             for more details.


             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 18


             The $SYSTEM directive may be used to include large files in
             the  source  text.  They  will  not  appear  as part of the
             source listing unless the user has  specified  the  LSYSTEM
             option.
















































             Block Options and Source Directives
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 19


             5 OPTION DESCRIPTIONS               OPTION DESCRIPTIONS



             This  section  describes  the  available  compiler options.
             Each option description begins with the  option  name.  The
             minimum  acceptable  abbreviation  for  an  option  name is
             underlined.  An option which can be negated is indicated by
             "[NO]"  before  the  option  name.  An  option which can be
             preceded  by  either  "NO"  or  "AUTO"  is   indicated   by
             "[NO|AUTO]".  If  the  user  specifies "AUTO", the compiler
             determines if the option will be  ON  or  OFF.  The  option
             name  is  followed by a list of the contexts it can be used
             in.  The valid contexts are:

             Prompt -     may be used on the compiler command line.

             Block -      may be  used  in  an  OPTIONS  clause  in  any
                          program,   module,   procedure,   or  function
                          heading.

             Program -    may be used in an OPTIONS clause on a  program
                          heading.

             Module -     may  be used in an OPTIONS clause on a module,
                          data module, or environment module heading.

             Directive -  may be used in a source directive line.

             (An option which is not allowed  on  a  program  or  module
             heading  will  be  ignored if it is specified on a compiler
             command line which directs the compilation of a program  or
             module,  respectively.)  The default value of the option, a
             description of the option's meaning, and any special  notes
             on its use are also given within each option description.


             ALLOC(code)
                  Context:  Prompt, Program
                  Default:  ALLOC(0)

                  The   ALLOC  option  selects  the  storage  allocation
                  algorithm to be used for the  processing  of  NEW  and
                  DISPOSE  calls in a program.  It may only be specified
                  on the program statement or on  the  compiler  command
                  line.  The "code" is an integer between 0 and 99.  See
                  Appendixes C and D for information regarding  the  use
                  of  the  ALLOC  option  with  the DEC-10/20 and VAX-11
                  versions of Tymshare Pascal.



             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 20


             [NO]ASSEMBLY
                  Context:  Prompt, Block
                  Default:  NOASSEMBLY

                  The ASSEMBLY option is used to tell  the  compiler  to
                  produce  a  symbolic  assembly  code  listing  of  the
                  generated  code  for  one  or   more   blocks   of   a
                  compilation.  The  assembly listing will appear at the
                  end of the listing  file.  NOASSEMBLY  suppresses  the
                  assembly code listing.


             [NO]BANNER
                  Context:  Prompt
                  Default:  BANNER

                  If  the  BANNER  option is specified, the listing file
                  will begin with two banner  pages.  Each  banner  page
                  will have the program or module name in large letters,
                  the  source  file  name,  the  compilation  date,  the
                  compiler  version,  and a list of all the options used
                  for the compilation.  NOBANNER suppresses  the  banner
                  pages.


             [NO]CALLS
                  Context:  Prompt, Block
                  Default:  NOCALLS

                  The  CALLS  option  can be used to obtain a listing of
                  all the routines from which a procedure or function is
                  called.  The  calls  listing  appears  as  part of the
                  cross-reference output (see SYMBOLS and  XREF),  which
                  comes  between  the  source  listing  and the assembly
                  listing in the listing file.  NOCALLS  suppresses  the
                  calls listing.


             [NO]CHECK [ (switches) ]
                  Context:  Prompt, Block
                  Default:  CHECK

                  The  CHECK  option tells the compiler to generate code
                  to test for a variety of  error  conditions  when  the
                  user  runs  the program produced by the compiler.  The
                  user  selects  the   check   conditions   desired   by
                  specifying  a  list  of  "switches".  The switches are
                  simply one or more identifiers.  Each  switch  may  be
                  abbreviated to its first three letters.

                  CHECK  without  any  switches enables all the run-time

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 21


                  error checks.  NOCHECK without any  switches  disables
                  all error checking.

                  CHECK  with a list of switches will cause the compiler
                  to generate error checks only for  the  conditions  in
                  the  list.  An option on the program heading overrides
                  an option specified on the compiler command line.  For
                  example, if "/CHECK (SUB,STR,VAL)" is specified on the
                  compiler command line, and "CHECK  (COM,SUB)"  in  the
                  OPTIONS  clause  of  the  program  heading,  then only
                  COMPATIBILITY and SUBSCRIPTS will be checked.

                  NOCHECK with a list of switches  simply  disables  the
                  specified  error  checks.  It  has  no  effect  on any
                  switches that are not in the list.

                  The check switches, and the  errors  they  check  for,
                  are:

                  ASSERTIONS:  If  assertion  checking  is  set ON,
                       then calls to the built-in procedure  ASSERT
                       will   be   compiled   as   run-time  tests.
                       Otherwise,  ASSERT  calls  simply  serve  as
                       commentary.

                  CASES:  This option controls the effect of a CASE
                       statement when the value of the  case  index
                       expression does not correspond to one of the
                       case labels.  If case checking  is  set  ON,
                       this is a run-time error.  Otherwise, such a
                       case statement has no effect.

                  COMPATIBILITY:  When one entire array (or  record
                       containing an array) is assigned to another,
                       and one or both of the arrays are  flexible,
                       this  check  will  make  sure that they have
                       matching upper and lower bounds.

                  FILES:  When a file variable is used  in  an  i/o
                       operation,  or the file's buffer is examined
                       ("file_var^"), this  check  will  make  sure
                       that  the  file  is  not NILF.  It will also
                       detect some unopened files.

                  INPUT:  When a real number or an integer is  read
                       with  a  READ  or GETSTRING call, this check
                       will make sure that the value read is in the
                       range  of legal values for the variable.  If
                       it  is  not,  then  the  variable  will   be
                       unchanged,  and  a  subsequent  call  to the
                       IOSTATUS function will  return  the  IO_NOVF

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 22


                       code.  Note  that  this is a recoverable i/o
                       error, rather than a fatal run-time error.

                  POINTERS:  When a pointer is  dereferenced,  this
                       check will make sure that the pointer is not
                       NIL.  It will also detect some uninitialized
                       pointers.

                  STRINGS:  This  check  will  make  sure  that the
                       index and length in a SUBSTRING  call  refer
                       to  a  substring  that  is really within the
                       base string.

                  SUBSCRIPTS:  This check will make sure  that  the
                       subscripts  in an array reference are within
                       the bounds of the array.

                  VALUES:  When a value is assigned to a scalar  or
                       subrange  variable  or passed as a scalar or
                       subrange parameter,  this  check  will  make
                       sure that the value is in the range of legal
                       values for the variable.



             [NO]CODE
                  Context:  Prompt
                  Default:  CODE

                  CODE causes machine  code  to  be  generated  for  the
                  compiled  program.  NOCODE  suppresses  generation  of
                  machine   code.   Notice   the   difference    between
                  ",LIST=RANDOM    /ASSEMBLY"   and   "RANDOM   /NOCODE,
                  ASSEMBLY".  The former will not create a binary  file,
                  but  the  compiler will still generate machine code so
                  it can produce an assembly listing.  The  latter  will
                  not  generate  machine code, and therefore it will not
                  produce an assembly listing.


             [NO]DEBUG
                  Context:  Prompt, Program, Module
                  Default:  NODEBUG

                  The  DEBUG  option  always  applies   to   an   entire
                  compilation.  It  causes  a  program  or  module to be
                  compiled in DEBUG mode so that it can be used with the
                  Tymshare  Pascal  debugger.  Compilation in DEBUG mode
                  produces a debugger symbol table file  which  has  the
                  same  name  as  the  relocatable  binary  file, and an
                  extension of ".DEB".  NODEBUG  suppresses  DEBUG  mode

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 23


                  compilation,  and  will  delete  any existing debugger
                  symbol  table  file  for  the  module.  If  NOCODE  is
                  specified,  or  no  binary  file  is created, then the
                  DEBUG/NODEBUG option will be  ignored.  Refer  to  the
                  Tymshare   Pascal   Debugger  User's  Guide  for  more
                  details.


             DISABLE (flags)
                  Context:  Prompt, Directive

                  The DISABLE option sets compilation "flags" to  FALSE.
                  It  is  the  opposite of the ENABLE option, which sets
                  compilation flags to  TRUE.  DISABLE  and  ENABLE  are
                  used  in  conjunction  with  $IF  source directives to
                  control conditional compilation (see Section 4.2.2).

                  The "flags" are one or more identifiers.  The  DISABLE
                  option sets all the listed identifiers to FALSE.

                  Flags  are  FALSE  unless they are explicitly enabled;
                  thus, flags which are never defined with a DISABLE  or
                  ENABLE option are set to FALSE by default.


             [NO]DUMP (switches)
                  Context:  Prompt, Block

                  The  DUMP  option  is  provided  to  obtain  dumps  of
                  compiler internal data structures during  compilation.
                  It  takes  a  list  of  "switches",  which  are simply
                  identifiers indicating particular data  structures  to
                  be  dumped.  NODUMP  disables  any specified switches.
                  All output from the DUMP option is printed in  a  file
                  with  the  same  name  as  the  source  file,  and  an
                  extension of ".DMP".  DUMP is useful if  the  user  is
                  working on the compiler itself.


             ENABLE (flags)
                  Context:  Prompt, Directive

                  The  ENABLE  option  sets compilation "flags" to TRUE.
                  It is the opposite of the DISABLE option,  which  sets
                  compilation flags OFF.  DISABLE and ENABLE are used in
                  conjunction with the various $IF source directives  to
                  control conditional compilation (see Section 4.2.2).

                  The  flags  are  one  or more identifiers.  The ENABLE
                  option sets all the listed identifiers to TRUE.


             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 24


                  Flags are false unless they  are  explicitly  enabled;
                  thus,  flags which are never defined with a DISABLE or
                  ENABLE option are set to FALSE by default.


             ENDIF
                  Context:  Directive
                  Default:  None

                  The $ENDIF directive marks the end  of  a  portion  of
                  code  which  is being conditionally compiled under the
                  control  of  an  $IF,  $IFANY,  $IFNOT,   or   $IFNONE
                  directive.  An  $ENDIF  directive  that does not match
                  some form of $IF directive is illegal.


             [NO]ERRORS
                  Context:  Prompt
                  Default:  NOERRORS

                  The  ERRORS  option  lists  error  messages  from  the
                  compilation but doesn't produce a source file listing.
                  This option tells the compiler to  write  exactly  the
                  same error messages on the listing file that it writes
                  to the user's terminal.  It is ignored if the user has
                  requested  a  source listing, since error messages are
                  always  printed  in  the  source   listing.   NOERRORS
                  suppresses the special error listing.


             EXIT
                  Context:  Prompt
                  Default:  None

                  /EXIT  tells  the  compiler to stop.  The current line
                  will not be processed  any  further.  A  command  file
                  line  containing  /EXIT  is  the  only way to stop the
                  compiler from a command file, since  blank  lines  are
                  ignored in command files (see Section 3.3).


             [NO]FINISH
                  Context:  Prompt
                  Default:  FINISH

                  The   FINISH  option  tells  the  compiler  to  finish
                  compiling (i.e.,  generate  code  for)  a  program  or
                  module,  even if there are warning messages.  NOFINISH
                  tells the compiler to treat warnings as  fatal  errors
                  and not to complete compilation if any occur.


             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 25


             FORTRAN
                  Context:  Block
                  Default:  None

                  OPTIONS   FORTRAN   may   only  be  specified  on  the
                  declaration of an external procedure or  function  and
                  tells  the  compiler  that  an  external  routine  was
                  compiled with the FORTRAN  compiler,  so  it  must  be
                  called with a FORTRAN calling sequence.


             [NO]GLOBAL
                  Context:  Prompt, Program, Module
                  Default:  NOGLOBAL

                  The  GLOBAL  option  tells  the  compiler to produce a
                  cross-reference  file  containing  all  the   routines
                  declared or called in the module being compiled.  This
                  cross-reference file has the same name as the  listing
                  file, but with an extension of ".SYM".  If the listing
                  file  is  suppressed  with  "rel-file=source-file"  or
                  "=source-file",  then  the  compiler  won't  create  a
                  cross-reference file either.


             HEADER file-name
                  Context:  Directive
                  Default:  None

                  The $HEADER directive tells the  compiler  to  include
                  the text of the file with the specified "file-name" in
                  the source file at this point, if the SOURCE option is
                  in  effect  and  a  listing file is being created.  If
                  NOSOURCE is in effect or there is no listing file, the
                  $HEADER  directive is ignored.  A $HEADER directive is
                  used to include a file that  contains  only  comments,
                  such  as  module header documentation.  If there is no
                  extension on the file name, the  compiler  assumes  an
                  extension of ".HDR".  The text in an included file may
                  contain  nested   $INCLUDE,   $HEADER,   and   $SYSTEM
                  directives   (refer   to   the  $INCLUDE  and  $SYSTEM
                  directives).


             IF (flags) [ text ]
                  Context:  Directive
                  Default:  None

                  The $IF directive will  cause  its  controlled  source
                  "text"  to  be compiled if all of the "flags" are TRUE
                  (see Section 4.2.2).

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 26


             IFANY (flags) [ text ]
                  Context:  Directive
                  Default:  None

                  The $IFANY directive will cause its controlled  source
                  "text"  to  be compiled if any of the "flags" are TRUE
                  (see Section 4.2.2).


             IFNONE (flags) [ text ]
                  Context:  Directive
                  Default:  None

                  The $IFNONE directive will cause its controlled source
                  "text"  to be compiled if none of the "flags" are TRUE
                  (see Section 4.2.2).


             IFNOT (flags) [ text ]
                  Context:  Directive
                  Default:  None

                  The $IFNOT directive will cause its controlled  source
                  "text"  to  be  compiled if not all of the "flags" are
                  TRUE (i.e., if  any  of  the  flags  are  FALSE)  (see
                  Section 4.2.2).


             INCLUDE file-name
                  Context:  Directive
                  Default:  None

                  The  $INCLUDE  directive tells the compiler to include
                  the text of the file with the specified "file-name" in
                  the  source  file  at  this  point.  If  there  is  no
                  extension on the file name, the compiler  will  assume
                  an   extension   of  ".INC".  The  $INCLUDE  directive
                  differs  from  the  $HEADER  directive  in  that   the
                  specified  file  will  always be included and compiled
                  unless within $IF, $ENDIF directives.  It differs from
                  the  $SYSTEM  directive in that the included text will
                  be listed if the source  file  is  being  listed.  The
                  text  in an included file may contain nested $INCLUDE,
                  $HEADER, and $SYSTEM directives.








             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 27


             LENGTH(page-size)
                  Context:  Prompt, Directive
                  Default:  LENGTH(45)

                  The LENGTH option tells the  compiler  the  number  of
                  lines  to  be  printed per page for the user's listing
                  file.  "Page-size"  is  the  number  of  lines  to  be
                  printed on each page.  It must be an integer between 4
                  and 255.

                  If there  is  a  LENGTH  directive  before  the  first
                  nondirective  line in the user's file, the length from
                  that  directive  will  take  effect  starting  at  the
                  beginning  of  the  listing  file.  All  other  LENGTH
                  directives take effect with the page on which they are
                  specified.


             [NO]LSYSTEM
                  Context:  Prompt
                  Default:  NOLSYSTEM

                  Normally,  source  lines  which  are included with the
                  $SYSTEM directive will not be listed, even if the user
                  is  getting  a  source  listing.  To  get  lines  from
                  $SYSTEM files listed, use the LSYSTEM  option  on  the
                  compiler  command line.  Note that LSYSTEM affects the
                  listing of  $SYSTEM  lines  only  when  a  listing  is
                  already  being  produced;  the user must still specify
                  the SOURCE option or an  optional  listing  file  (see
                  Section 3.1.1) to obtain a listing in the first place.


             [NO]MAINSEG
                  Context:  Prompt, Program, Module
                  Default:  NOMAINSEG

                  The  MAINSEG  option, given on the header statement or
                  on the compiler prompt line when the user is compiling
                  a  program  or  module,  tells  the compiler that this
                  module will be part of the master sharable overlay  in
                  a  program  which  will  be  processed  by  the Pascal
                  overlay  manager  (ODMS)  for  high-segment  swapping.
                  NOMAINSEG suppresses special MAINSEG processing.








             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 28


             [NO]MAP
                  Context:  Prompt, Block
                  Default:  NOMAP

                  The  MAP  option  is used to obtain a map relating the
                  line  numbers  for  a  block  with  addresses  in  the
                  generated  code.  Two  listings,  one  sorted  by line
                  number  and  one  sorted  by  code  address,  will  be
                  produced.  The  map  listing  comes  after  the source
                  listing in the listing file  (or  after  the  assembly
                  listing, if the user requested it).


             [NO]NAMES
                  Context:  Prompt
                  Default:  NONAMES

                  The  NAMES option causes the compiler to tell the user
                  when it  begins  each  compilation.  It  will  type  a
                  message  with the name of the main source file for the
                  compilation.  NONAMES suppresses the  typing  of  this
                  message.  The NAMES option is particularly useful when
                  the user is compiling from a command file (see Section
                  3.3),  and  wants  to  know  when  the compiler begins
                  compiling each module.


             [NO]OPTIMIZE
                  Context:  Prompt, Block
                  Default:  NOOPTIMIZE

                  The OPTIMIZE option causes the compiler  to  transform
                  and  rearrange  the code being compiled, in an attempt
                  to reduce the space it takes up and the time it  takes
                  to   run.   On   some   programs,   optimization   can
                  dramatically   improve   code   efficiency.   However,
                  optimization  increases the time required to compile a
                  program.  Furthermore,  some  compiler   errors   will
                  manifest   themselves   only   when   optimization  is
                  performed; and certain  marginally  legal  programming
                  practices  may  work  in  an  unoptimized program, but
                  violate   assumptions   made   during    optimization.
                  Therefore,  during development and debugging, the user
                  should  compile  modules  without  optimization.   The
                  modules can then be recompiled with OPTIMIZE when they
                  are working correctly.

                  The DEBUG option suppresses the OPTIMIZE option, since
                  optimization  could  leave the debugger unable to find
                  the statements in the program, and the debugger  could
                  violate the assumptions made by the optimizer.

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 29


             [NO]OVERLAY
                  Context:  Prompt, Module
                  Default:  NOOVERLAY

                  The  OVERLAY option used on the module statement or on
                  the compiler command line when the user is compiling a
                  module  (not  a  main program) tells the compiler that
                  this module will be part of an overlay to be processed
                  by   the  Pascal  overlay  manager  (ODMS).  NOOVERLAY
                  suppresses special overlay processing.


             PAGE  [text]
                  Context:  Directive
                  Default:  None

                  The PAGE directive causes a new page to be started  in
                  the  listing  file,  and  resets  the subtitle that is
                  printed at the top of each listing page.  The subtitle
                  is  set  to the "text" of the directive line, starting
                  with the first nonblank character following  the  PAGE
                  keyword.  However, if the directive line contains only
                  the directive $PAGE, with not so much as a space after
                  it,  then the only effect of the directive is to start
                  a new page, without changing the current  subtitle  or
                  section number.  The pagination and subtitles produced
                  by the PAGE directive are used by the Pascal  debugger
                  to identify lines in the source file.

                  A  $PAGE  directive (written in all uppercase letters)
                  with  the  procedure  name  as  the  subtitle  may  be
                  inserted  prior  to each procedure in the source file.
                  This makes the BOUND command in the QED editor  easier
                  to  use  because  it  allows  the  user  to limit line
                  addressing to a user-defined section  of  the  buffer.
                  Thereafter,  a  designated  section  will  be numbered
                  consecutively as though it were the entire buffer.  In
                  addition,  it  makes the Pascal debugger easier to use
                  because the user can refer to procedures by  name  and
                  to  lines  within  the  procedure  by  their  location
                  relative to the start of the procedure.


             [NO]QBLOCKS
                  Context:  Prompt, Block
                  Default:  QBLOCKS

                  QBLOCKS controls the use of quick  block  analysis  by
                  the  compiler.  Quick  block  analysis  is  a compiler
                  feature which allows the generation of more  efficient
                  code.  However,  it  limits  the amount of information

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 30


                  the user can get from a stack trace after  a  run-time
                  error.  QBLOCKS  directs  the  compiler  to  use quick
                  block  analysis;  NOQBLOCKS   suppresses   it.   DEBUG
                  implies NOQBLOCKS.


             [NO|AUTO]QUICK
                  Context:  Prompt
                  Default:  AUTOQUICK

                  The  compiler  has  two separate code generators.  The
                  optimizing code generator produces high-quality  code,
                  but   is  quite  slow.  The  checkout  code  generator
                  produces less efficient code, but runs  more  quickly.
                  The  QUICK  option  tells  the  compiler  to  use  the
                  checkout code generator.  (Since only  the  optimizing
                  code  generator  can  do  optimization,  the  OPTIMIZE
                  option will be ignored if the user  specifies  QUICK.)
                  NOQUICK  tells the compiler to use the optimizing code
                  generator.  AUTOQUICK allows the compiler to make  the
                  choice:  the  compiler  will  use  the optimizing code
                  generator if the user specifies  the  OPTIMIZE  option
                  for  any  part  of the program; otherwise, it will use
                  the checkout code generator.


             [NO|AUTO]SOURCE
                  Context:  Prompt, Directive
                  Default:  AUTOSOURCE

                  The SOURCE option controls the listing of  the  user's
                  Pascal source file.  SOURCE tells the compiler to list
                  the source file, and NOSOURCE tells it not to list the
                  source  file.  AUTOSOURCE  tells  the compiler to list
                  the source file if the user specifies a list file name
                  explicitly,  and  not  to  list  the  source  file  if
                  "/AUTOSOURCE" was specified  at  the  asterisk.  Since
                  SOURCE  may  be specified as a directive, the user can
                  turn it ON and OFF to list selected  portions  of  the
                  source  file.  Even  if the user specifies NOSOURCE, a
                  listing file may still be produced  if  other  listing
                  options  such  as  ASSEMBLY, SYMBOLS, or MAP have been
                  specified.


             [NO]SPECIAL [ (switches) ]
                  Context:  Prompt, Block
                  Default:  NOSPECIAL

                  There are certain constructs in Tymshare Pascal  whose
                  use  is  normally  unnecessary,  and  which can easily

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 31


                  result in program  errors  and  nonportable  programs.
                  The  use of these constructs is dangerous; however, it
                  is allowed when the user requests the SPECIAL option.

                  The "switches" are simply  one  or  more  identifiers.
                  Each  switch  may  be  abbreviated  to its first three
                  letters.  The  legal   special   switches,   and   the
                  constructs they allow, are:

                  COERCIONS:  This  switch  allows  the user to use
                       pointer   type   names   to   perform   type
                       coercions.  In  particular, it allows use of
                       the constructs "ptr_type  (integer)",  which
                       returns  a  pointer  of  the specified type,
                       pointing to the  specified  absolute  memory
                       location,  and  "ptr_type  (pointer)", which
                       turns a pointer of one type into  a  pointer
                       of  another type.  It also allows the use of
                       the standard  function  ADDRESS,  which  can
                       create a pointer to any variable.

                  PTR:  This  switch  allows  the  user  to declare
                       variables of type PTR  in  a  program.  Type
                       PTR   is   a   predefined   type,  which  is
                       compatible with all other pointer types.

                       Be especially  careful  when  using  pointer
                       coercions  or  type  PTR in conjunction with
                       the OPTIMIZE option,  since  their  use  can
                       easily  invalidate  the assumptions that the
                       optimizer makes about the behavior  of  data
                       in Pascal programs.

                  WORD:   This   switch   allows  the  use  of  the
                       predefined type MACHINE_WORD, which is  very
                       much like type INTEGER.  However, the set of
                       legal  values  of  a  MACHINE_WORD  variable
                       depends   on   the  machine  for  which  the
                       compiler is generating code, and  is  chosen
                       (a) to include all legal INTEGER values, and
                       (b) to  completely  fill  a  target  machine
                       "word".  This switch also relaxes the normal
                       compiler  restriction   that   all   integer
                       constants  be  in the range of type INTEGER,
                       allowing integer constants in the  range  of
                       type MACHINE_WORD instead.  See Appendixes C
                       and   D,   respectively,   for   information
                       regarding  the actual range of values in the
                       DEC-10/20 and VAX-11  versions  of  Tymshare
                       Pascal.


             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 32


                  SPECIAL  or  NOSPECIAL  without any switches will
                  allow or disallow all of the special  constructs.
                  SPECIAL  or  NOSPECIAL  with  a  list of switches
                  simply  allows   or   disallows   the   specified
                  constructs,  and  has  no  effect on any switches
                  that are not in the list.


             [NO]STANDARD
                  Context:  Prompt, Program, Module
                  Default:  NOSTANDARD

                  The STANDARD option tells the compiler  to  treat
                  any constructs that are not in standard Pascal as
                  errors.  This option is not yet  implemented;  it
                  is ignored.


             [NO]STATISTICS
                  Context:  Prompt
                  Default:  NOSTATISTICS

                  The  STATISTICS  option  causes  the  compiler to
                  report  information  about  the  compilation.  It
                  will report the run time (in CPU seconds) used by
                  each pass of the  compiler,  and  the  amount  of
                  code,   constant,   and   static   storage  space
                  allocated for the compiled  module.  NOSTATISTICS
                  suppresses the typing of compilation statistics.


             STORAGE(words)
                  Context:  Prompt, Program
                  Default:  STORAGE(2048)

                  The  STORAGE option specifies the number of words
                  to be allocated to the program stack at run time.
                  The  program  stack  contains all local variables
                  and return information for called procedures,  as
                  well  as any buffers and control blocks which are
                  allocated when files are  opened.  The  user  may
                  need  to  specify  a  larger  stack size than the
                  default because the program has deeply  recursive
                  procedures,  procedures  with  very  large  local
                  variables, or is a  large  program.  The  STORAGE
                  option  may  only  be  specified  on  the PROGRAM
                  statement or on the compiler  command  line.  For
                  information on overriding the stack size from the
                  STORAGE option, see Appendix C.  Appendix D gives
                  additional  information  on  the  behavior of the
                  STORAGE option.

             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 33


             [NO]SYMBOLS
                  Context:  Prompt, Block
                  Default:  NOSYMBOLS

                  The SYMBOLS option is used to obtain  a  list  of
                  all  the  symbols  declared  in a block and their
                  attributes:  kind  of  symbol  (constant,   type,
                  variable,  etc.),  type,  where declared, address
                  (for variables), or location (for  labels),  etc.
                  The  symbols  listing  appears  as  part  of  the
                  cross-reference  output  (see  CALLS  and  XREF),
                  which  comes  between  the source listing and the
                  assembly listing in  the  listing  file.  If  the
                  user  specifies  XREF,  then  the cross-reference
                  list for  each  symbol  will  follow  its  symbol
                  description.  NOSYMBOLS  suppresses  the  symbols
                  listing.


             SYSTEM file-name
                  Context:  Directive
                  Default:  None

                  The  $SYSTEM  directive  tells  the  compiler  to
                  include  the  text of the file with the specified
                  "file-name" in the source  file  at  this  point.
                  Unlike   text   included  with  the  $HEADER  and
                  $INCLUDE  directives,  text  included  with   the
                  $SYSTEM  directive  will  not  be  listed  in the
                  listing  file  unless  the  LSYSTEM   option   is
                  specified.  If  there is no extension on the file
                  name,  the  compiler  assumes  an  extension   of
                  ".INC".  The text in an included file may contain
                  nested $INCLUDE, $HEADER, and $SYSTEM directives.


             TERSE
                  Context:  Prompt
                  Default:  VERBOSE

                  The TERSE option tells the compiler to print only
                  an error number and a line number on the terminal
                  when it detects an error.  TERSE is the  opposite
                  of VERBOSE, which tells the compiler to print the
                  text of  the  source  line  and  the  full  error
                  message.






             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 34


             TITLE text
                  Context:  Directive
                  Default:  None

                  The  TITLE directive is used to establish a title
                  that is printed on the first line of each page of
                  the  listing  file.  The title is set to the text
                  of the directive line, starting  with  the  first
                  nonblank character following the TITLE keyword.

                  If  there  is  a TITLE directive before the first
                  nondirective line of the user's source file, then
                  the  title from that line will also appear in the
                  banner pages at the start  of  the  listing  file
                  (see  the BANNER option).  Other TITLE directives
                  take effect starting with the next listing  page.
                  If  there  is  no  TITLE  directive in the user's
                  source file, the source file name  will  be  used
                  for  the title.  A TITLE directive does not start
                  a new page.


             [NO]TRACE
                  Context:  Prompt, Block
                  Default:  TRACE

                  With the TRACE option, the compiler produces code
                  to  let  the  user  get  a  stack  traceback of a
                  program.  This can be helpful in locating bugs in
                  a  program.  An  executing  program  can call the
                  predefined procedure TRACE to obtain a  traceback
                  at any time.  Refer to Appendix C to learn how to
                  obtain a traceback after abnormal termination  on
                  the DEC-10/20.



             VERBOSE
                  Context:  Prompt
                  Default:  VERBOSE

                  The  VERBOSE command option tells the compiler to
                  print the source line text  and  the  full  error
                  message on the terminal when it detects an error.
                  VERBOSE is the opposite of TERSE, which tells the
                  compiler to print only an error number and a line
                  number.





             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 35


             WIDTH(columns)
                  Context:  Prompt, Directive
                  Default:  WIDTH(102)

                  The WIDTH option tells the compiler the number of
                  columns  to  be  printed  per page for the user's
                  listing  file.  "Columns"  is   the   number   of
                  characters  that  can  be  printed on a line.  It
                  must be an integer between 20  and  255.  Listing
                  file  lines  that  will  not fit in the specified
                  width will be continued on the next line.

                  If there is a WIDTH directive  before  the  first
                  nondirective  line of the user's source file, the
                  width from  that  directive  will  be  in  effect
                  starting  at  the  beginning of the listing file.
                  All other WIDTH directives  take  effect  at  the
                  point they are specified.


             [NO]XREF
                  Context:  Prompt, Block
                  Default:  NOXREF

                  The  XREF  option is used to obtain a list of all
                  the places where each symbol in a block is  used,
                  and  how  it  is  used in each place (e.g., it is
                  passed as a var parameter; it is modified; it  is
                  declared;   etc.).  The  cross-reference  listing
                  comes between the source listing and the assembly
                  listing in the listing file.  If SYMBOLS has also
                  been specified, then the cross-reference list for
                  each  symbol  will follow its symbol description.
                  NOXREF suppresses  the  symbolic  cross-reference
                  output.

















             Compiler Options
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 36


                  6 COMPILER OUTPUT                    COMPILER OUTPUT






             6.1 The Source Listing                 The Source Listing


             The  compiler  will  produce  a  source listing if the
             SOURCE option is specified  on  the  compiler  command
             line or as a source directive line in the source file,
             or if the user specifies a listing file.  Each page of
             the  source  listing  begins  with  a  title  line,  a
             subtitle line, and a blank line.  The title line gives
             the name of the program or module being compiled (from
             the program, module,  or  data  module  heading),  the
             current  title  (from  the  $TITLE directive), and the
             date and time of compilation.  The subtitle line gives
             the  current file number and the section number within
             the  file,  the  section   title   (from   the   $PAGE
             directive),  and  the number of the page in the source
             listing.

             A file index and a section index are  printed  at  the
             end  of  the  source  file  listing.  The  file  index
             contains  a  line  for  each  source  file  and   each
             $INCLUDE,  $SYSTEM,  or  $HEADER directive used in the
             compilation, giving the file number, file level,  page
             number,   and  file  name.  The  main  file  (the  one
             specified on the compiler command line line)  is  file
             0;  subsequent  files  are  numbered in the order that
             they are opened during compilation.  The main file  is
             at  level  0;  if  a  file  is included by a $INCLUDE,
             $SYSTEM, or $HEADER directive in  a  level  'n'  file,
             then  the  included  file is at level 'n'+1.  The page
             number is the number of the page in the source listing
             on  which  the $INCLUDE, $SYSTEM, or $HEADER directive
             for the file may be found.

             The section index  contains  a  line  for  each  $PAGE
             directive  in  the  compilation  which  has a nonblank
             section title.  These  are  sorted  alphabetically  by
             section  name.  Each  line  gives  the  section number
             (within its file), the number of the file in which the
             $PAGE directive occurred (the file name appears in the
             file index), the page number in the source listing  of
             the first page of the section, and the section title.



             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 37


             6.2 The Cross-Reference Listing                 The Cross-Reference Listing


             The compiler will produce a cross-reference listing if
             one or more of the SYMBOLS, XREF, or CALLS options was
             specified on the compiler command line or on any block
             heading.  The  cross-reference  listing   contains   a
             section  for  each  block (i.e., each program, module,
             procedure, or function) for which at least one of  the
             cross-reference  options  is  specified.  The sections
             are arranged in the same order that the block headings
             occur  in the source file.  Each section begins with a
             block name, followed by a list of "enclosing  blocks";
             that   is,   the  block  containing  the  block  whose
             cross-reference is currently being listed,  the  block
             containing  the enclosing block, etc.  The name, kind,
             and level of each enclosing  block  are  printed.  The
             kind  may  be  "program",  "module",  "procedure",  or
             "function".  A module or main program is at  level  1,
             top-level procedures are at level 2, etc.

             If  the  CALLS option is specified, and the block is a
             procedure or function,  then  the  list  of  enclosing
             blocks  is  followed  by a list of all the blocks that
             call that block.

             The SYMBOLS option produces one  line  of  output  for
             each  symbol  defined  in  the  block, in alphabetical
             order.  Each symbol line begins with the  symbol  name
             (up  to  18 characters).  If the symbol is a variable,
             constant, or parameter, then its name is followed by a
             colon  and  the  name  of  its type, if it has a named
             type, or its type kind (e.g., "scalar", "array", etc.)
             if its type is unnamed.

             The  next  entry  in  the  symbol  line  describes the
             symbol.  A variable, constant, procedure, or  function
             is   described   with   a   storage  class  ("public",
             "external", "static", or  "no  class",  indicating  an
             ordinary symbol) and the "type"; i.e., "var", "const",
             "procedure", or "function".  A parameter is  described
             as  a  "var parameter" or a "value parameter".  A type
             symbol is described as a "scalar type", "string type",
             "pointer type", etc.  A label is simply described as a
             "label".

             The next symbol line entry is the location  where  the
             symbol is declared, in the form:

                    file-number'-' section-number'/' line-number


             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 38


             The "file-number'-'" is not printed if the declaration
             is in the main  file,  and  "section-number/"  is  not
             printed  if  the  declaration  is in the first section
             (section 0) of its file.  If the symbol is a  variable
             or  parameter, the last entry in the line has the form
             "+nnnnnn", and represents the address  of  the  symbol
             relative  to  the  low segment, the stack frame of the
             current block, or a parameter list  whose  address  is
             passed  to  the  current  block.  If  the  symbol is a
             label, the last entry in the line is the  location  of
             the line at which the label actually occurs.

             The  XREF option produces a list of all the references
             to each symbol declared in the current block.  If  the
             user  has  also  specified  the  SYMBOLS  option,  the
             reference  list  follows  the  symbol  line  for  each
             symbol.  The  reference list is simply a list of lines
             on which references to the  symbol  occur.  Each  line
             has  the form "file-number- page-number/ line-number",
             as described above, and is followed by a  usage  code.
             The usage codes are:


                   V - the value of the symbol is used.

                   M - the  value  of  the symbol is modified by an
                       assignment or a read.  (If the symbol  is  a
                       label, then an M code represents the line on
                       which that label occurs.)

                   P - the symbol is used as a var parameter  in  a
                       procedure or function call.

                   R - the  symbol  is used in a WITH statement, or
                       as an argument in  a  call  to  the  ADDRESS
                       function.

                   D - the  reference  is  the  declaration  of the
                       symbol.  (No "D" references will be  printed
                       if the SYMBOLS option is also specified.)



             6.3 Sample Listing                 Sample Listing


             This section contains a listing produced by the NEWPAS
             compiler; portions of the  listing  are  labeled.  The
             program (in the file PBTREE.PAS) was compiled with the
             following line entered at the asterisk:


             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 39


                       PBTREE/SOURCE,NOBANNER



















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 40






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 41






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 42






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 43






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 44






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 45






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 46






















































             Compiler Output
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 47


             7 COMPILER OPTIONS SUMMARY               COMPILER OPTIONS SUMMARY



                 Name                        Context(s)1 Default

                 ALLOC(code)                  CP      ALLOC(0)
             [NO]ASSEMBLY                     CB      NOASSEMBLY
             [NO]BANNER                       C       NOBANNER
             [NO]CALLS                        CB      NOCALLS
             [NO]CHECK [(switches)]2          CB      CHECK
             [NO]CODE                         C       CODE
             [NO]DEBUG                        CPM     NODEBUG
                 DISABLE (flags)              CD      None
             [NO]DUMP (switches)              CB      None
                 ENABLE (flags)               CD      None
                 ENDIF                        D       None
             [NO]ERRORS                       C       NOERRORS
                 EXIT                         C       None
             [NO]FINISH                       C       FINISH
                 FORTRAN                      B       None
             [NO]GLOBAL                       CB      NOGLOBAL
                 HEADER file-name             D       None
                 IF (flags) [ text ]          D       None
                 IFANY (flags) [ text ]       D       None
                 IFNONE (flags) [ text ]      D       None
                 IFNOT (flags) [ text ]       D       None
                 INCLUDE file-name            D       None
                 LENGTH(page-size)            CD      LENGTH(45)
             [NO]LSYSTEM                      C       NOLSYSTEM
             [NO]MAINSEG                      CPM     NOMAINSEG
             [NO]MAP                          CB      NOMAP
             [NO]NAMES                        C       NONAMES
             [NO]OPTIMIZE                     CB      NOOPTIMIZE
             [NO]OVERLAY                      CM      NOOVERLAY
                 PAGE [ text ]                D       None
             [NO]QBLOCKS                      CB      QBLOCKS
        [NO|AUTO]QUICK                        C       AUTOQUICK
        [NO|AUTO]SOURCE                       CD      AUTOSOURCE
             [NO]SPECIAL [(switches)]3        CB      NOSPECIAL
             [NO]STANDARD                     CPM     NOSTANDARD
             [NO]STATISTICS                   C       NOSTATISTICS
                 STORAGE(words)               CP      STORAGE(2048)
             [NO]SYMBOLS                      CB      NOSYMBOLS
                 SYSTEM file-name             D       None
                 TERSE                        C       VERBOSE4
                 TITLE text                   D       None
             [NO]TRACE                        CB      TRACE
                 VERBOSE                      C       VERBOSE4
                 WIDTH(columns)               CD      WIDTH(102)
             [NO]XREF                         CB      NOXREF

             Options Summary
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 48


             Notes:

             1Contexts are:
                     B - Procedure and function headings
                     C - Compiler prompt line
                     D - Directives
                     M - Module heading
                     P - Program heading

            2CHECK switches are ASSERTIONS,  CASES,  COMPATIBILITY,
             FILES,   INPUT,  POINTERS,  STRINGS,  SUBSCRIPTS,  and
             VALUES.

            3SPECIAL switches are COERCIONS, PTR, and WORD.

            4TERSE and VERBOSE have opposite actions.




































             Options Summary
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 49


             APPENDIX A - VARIANT BNF NOTATION



             ::=         means "is defined as"

             [  ]        encloses optional item

             ...         indicates  one  or  more  occurrences   of
                         preceding item

             |           means    "choose    one   of";   indicates
                         alternatives

             lowercase   indicates category name

             UPPERCASE   indicates reserved word

             -           unites a compound variable name

             ' '         indicates   the   literal   character   or
                         characters enclosed by the single quotes.

             {  }        indicates  that the contents of the braces
                         are to be treated as a single item



























             Appendix A - Variant BNF Notation
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 50


             APPENDIX B - PASCAL ENVIRONMENTS








             B.1 The Standard Environment



             Every  Pascal  compilation  takes   place   within   a
             "standard environment".  This environment, provided by
             the compiler, contains the  declarations  of  all  the
             symbols,  types, procedures, etc., that are predefined
             in the Pascal language.




             B.2 Extended Environments



             The standard environment  for  a  compilation  may  be
             augmented   with   an   "environment   extension".  An
             environment extension is an additional set of symbols,
             whose  definitions are added to the definitions of the
             symbols in  the  standard  environment.  The  standard
             environment,   plus   all  the  definitions  from  the
             environment   extension,   make   up   an    "extended
             environment".  Since  an  extended  environment  is an
             extension of the standard environment, no symbol in it
             may  have  the same name as any symbol in the standard
             environment.  Environment extensions serve  a  similar
             function     to    $INCLUDE    directives;    however,
             recompilation of the source code of  the  declarations
             need  not  be performed each time the declarations are
             used.




             B.3 Creating an Extended Environment



             An extended environment is  created  by  compiling  an
             "environment  module".  An  environment  module  is  a

             Appendix B - Pascal Environments
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 51


             module which begins with the keyword ENVMODULE, rather
             than  PROGRAM,  MODULE, or DATAMODULE.  It may contain
             only  constant,  type,  and   external   declarations.
             Furthermore,  it  may  not contain declarations of any
             symbols whose names are the same as those  of  symbols
             already defined in the standard environment.

             When  the  compiler compiles an environment module, it
             does not create a relocatable  binary  file.  Instead,
             it creates an "environment file", which may be used in
             other  compilations.  The  environment  file  name  is
             taken  from  the first file name before the equal sign
             when the user has specified a relocatable binary  file
             name  (see  Section 3.1.1), or from a source file name
             which the user has specified at  the  compiler  prompt
             (see  Section 3.1).  However, its default extension is
             ".ENV" rather than ".REL".




             B.4 Using an Extended Environment



             The immediate command

                   ':'ENVIRON file-name

             tells  the  compiler   to   perform   all   subsequent
             compilations  with  a  specified extended environment.
             The "file-name" is the name  of  an  environment  file
             which was created earlier by the compiler.

             The  user  can  compile  an  environment  module in an
             extended  environment   rather   than   the   standard
             environment.   In  this  case,  the  environment  file
             created from the  compilation  will  contain  all  the
             definitions  from  the  standard environment, from the
             specified extended environment, and from the  compiled
             environment  module.  Thus,  the  user  can  create an
             extended environment which contains  another  extended
             environment   as   a   subset,  just  as  an  extended
             environment contains the  standard  environment  as  a
             subset.

             Warning:  An  extended  environment  is always created
             for a particular target machine.  Therefore, when  the
             user  loads  an  extended  environment, all subsequent
             compilations  will  not  only  take  place  with  that
             environment,  but for the same target machine that the

             Appendix B - Pascal Environments
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 52


             environment was created for.  Thus, an ENVIRON command
             will  override  any  previous  TARGET  keyword,  and a
             TARGET command will negate the effect of any  previous
             ENVIRON keyword.




             B.5 External Declarations



             Using  the  extended  environment  mechanism, a single
             environment file could contain  declarations  for  all
             the   types  and  external  references  in  a  system.
             Supposing that  the  environment  file  contained  the
             declaration for an "external procedure P", no conflict
             would  occur  if  the  module  containing  the  public
             declaration  for P were compiled with that environment
             file, since the external declaration  would  occur  in
             the   standard   environment  scope,  and  the  public
             declaration would occur in the module scope, and would
             therefore override the external declaration.





























             Appendix B - Pascal Environments
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 53


             APPENDIX C - THE DEC-10/20 VERSION OF Tymshare PASCAL


             Certain  compiler  options behave differently from the
             way they are described in Section 5 when the DEC-10/20
             version  of  Tymshare  Pascal  is used.  These options
             are:  ALLOC, FORTRAN, SPECIAL, STORAGE, and TRACE.



             ALLOC(code)

             The only  storage  allocation  algorithms  defined  at
             present  are  ALLOC(0), which brings in the "standard"
             allocator (the  quick-fit  algorithm),  and  ALLOC(1),
             which   brings   in   the   first-fit  algorithm.  The
             first-fit algorithm uses  the  available  memory  more
             efficiently  than  the  quick-fit  algorithm (i.e., it
             doesn't waste as much space), but it  also  runs  more
             slowly.  Therefore,  the  user will probably prefer to
             use ALLOC(0) for most applications, and  ALLOC(1)  for
             programs whose memory requirements become a problem.


             FORTRAN

             The DEC-10/20 FORTRAN-10 calling sequence is used.


             SPECIAL(WORD)

             On the DEC-10, this is the range -(2**35)..(2**35)-1.


             STORAGE(words)

             To  override  the  stack  size from the STORAGE option
             when  loading  a  program,   use   the   LINK   switch
             "/DEFINE:STACK.:words".  This  switch must be given to
             LINK before it searches the Pascal library,  which  it
             will  do  in response to an explicit "/SEARCH" switch,
             or at the end of loading, when the user specifies  the
             "/GO"    switch    (see   the   DECsystem-10   LINK-10
             Programmer's Reference Manual for more information  on
             LINK).







             Appendix C - DEC-10/20 Tymshare Pascal
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 54


             TRACE

             A  traceback  may  be  obtained  in  two  ways  on the
             DEC-10/20:  an  executing   program   can   call   the
             predefined  procedure  TRACE,  or  the  user  can type
             "REENTER",  and  then  "CONTINUE"  after   a   program
             terminates  abnormally.  NOTRACE suppresses generation
             of the TRACE  information.  If  the  DEBUG  option  is
             specified,  information  for  stack tracebacks will be
             included in the generated code.










































             Appendix C - DEC-10/20 Tymshare Pascal
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 55


             APPENDIX D - VAX-11 VERSION OF TYMSHARE PASCAL


             Relocatable Binary File Extension:  When  compiling  a
             source file on the VAX-11, the relocatable binary file
             which is produced will have an extension of ".OBJ".

             Certain compiler options are not available  or  behave
             differently from the way they are described in Section
             5 in the VAX-11  version  of  Tymshare  Pascal.  These
             options are:  ALLOC, DEBUG, FORTRAN, MAINSEG, OVERLAY,
             OPTIMIZE, QUICK, SPECIAL, STORAGE, and TRACE.



             ALLOC(code)

             ALLOC(0)  is  the  only  available  memory  allocation
             algorithm.


             DEBUG

             The  DEBUG  option adds information to the object file
             which  permits  a  traceback  of  the  most   recently
             executed   statements   when  the  program  terminates
             abnormally.


             FORTRAN

             The standard VAX FORTRAN calling sequence is used.


             MAINSEG

             The MAINSEG option is not available.


             OVERLAY

             The OVERLAY option is not available.


             OPTIMIZE

             The OPTIMIZE option is not available.





             Appendix D - VAX-11 Tymshare Pascal
                                           
                                           
                                           




                                           
                                           
                                           
             Tymshare Pascal Compiler User's Guide               Page 56


             QUICK

             The  QUICK  option  (the  default)  should  be   used.
             NOQUICK and AUTOQUICK are not available.


             SPECIAL(WORD)

             On the VAX, this is the range -(2**31)..(2**31)-1.


             STORAGE(words)

             This  option  has  no  effect  when  using  the VAX-11
             version of Tymshare Pascal.


             TRACE

             With  the  VAX-11  version  of  Tymshare   Pascal,   a
             traceback  will  be automatically included if abnormal
             termination occurs.






























             Appendix D - VAX-11 Tymshare Pascal
                                           
                                           
                                           




                                           
                                           
                                           
                Tymshare Pascal Compiler User's Guide               


        1   INTRODUCTION                                        1
        2   BASIC USE OF THE COMPILER                           2
        2.1 Exiting from the Compiler                           3
        2.2 The EXECUTE Command                                 3
        3   COMMANDS SPECIFIED AT THE ASTERISK                  5
        3.1 Compiling a Source File                             5
        3.1.1        Relocatable and Listing Files              6
        3.1.2        Specifying Options                         7
        3.2    Changing Default Options                         9
        3.3    Specifying a Command File                        10
        3.4    Running Another Program from the Compiler        10
        3.5    Using Immediate Commands                         11
        4   BLOCK OPTIONS AND SOURCE DIRECTIVES                 12
        4.1    Block Options                                    12
        4.2    Source Directives                                14
        4.2.1        Formatting                                 14
        4.2.2        Conditional Compilation                    15
        4.2.3        Including Other Source Text                17
        5   OPTION DESCRIPTIONS                                 19
        6   COMPILER OUTPUT                                     36
        6.1    The Source Listing                               36
        6.2    The Cross-Reference Listing                      37
        6.3    Sample Listing                                   38
        7   COMPILER OPTIONS SUMMARY                            47
        APPENDIX A - VARIANT BNF NOTATION                       49
        APPENDIX B - PASCAL ENVIRONMENTS                        50
        B.1  The Standard Environment                           50
        B.2  Extended Environments                              50
        B.3  Creating an Extended Environment                   50
        B.4  Using Extended Environments                        51
        B.5  External Declarations                              52
        APPENDIX C - DEC-10/20 VERSION                          53
        APPENDIX D - VAX-11 VERSION                             55



















             Contents
                                           
                                           
                                           


  U@ |r