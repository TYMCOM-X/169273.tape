$num off
$title right 'PASCAL I/O Runtime Support/\' right 'May 13, 1979 (revised March 18, 1980)'
$page
$ski 2
&Data Structures for PASCAL Files&
$ski
Input/output in PASCAL programs is performed through the mechanism of
&file variables&.
Such a variable may be dynamically associated with a file or a device,
and operations on the variable map into operations on the file or device.
In addition, semantics may be defined for equality and inequality
of file variables.
Finally, the &dereference& operation applied to a file variable accesses the
file's &component& (if it has one), which is the current file element
being transferred.
$ski
In the current PASCAL implementation, file variables themselves are
&file blocks&, containing control information and a component of
the file's base type.
The block contains addresses used in certain operations, as well as
the address of the component as the first word (thus permitting the
dereference operation to be implemented easily).
File variables, therefore, cannot be &assigned& (a duplication of the
control information would lead to total confusion, and indeed
such an operation is illegal) or &relocated& (the addresses within
the block are absolute, and not relative to the block).
The first restriction somewhat limits the flexibility of file variables
when compared to other types; the second causes file variables to
fail when created on the virtual heap, and also strengthens the
first restriction.
File variables contain a component of the base type, and thus are
not the same size for different base types.
Finally, file variables cannot be a base type of another structure.
$ski
The scheme envisioned for the new PASCAL implementation defines
a file variable to be a &pointer&. 
Thus, a file may be a component of
other structures.
A file variable points to a file block when active, which contains
information about the file, similar to the current file blocks.
The new file blocks, however, are not allocated on the heap, but rather
in a special &file block area& at the top of the stack,
similar to the allocation of ring headers and buffers by the current system.
File blocks do not move until the file associated with them is
CLOSEd or otherwise released.
This implies that absolute addresses may be used within such blocks
(a file &variable& may be created on the heap, but when it is opened,
its &file block& will be in the FBA), and that the maximum number
of file blocks needed at any time is equal to the maximum number
of channels available to the user program.
The first word of the file block will still be the address of the
component; since the component will be part of the file block, there
is no relocation problem.
When a file variable is first used (hopefully through one of the initializing
operations discussed later), it is allocated a file block within
the FBA.
During the course of subsequent operations, the value of the file
variable does not change.
Finally, when the file is CLOSEd, the FBA storage is released
and recycled.
The similarity between file variables and pointers is deliberate,
and provides a semantication for assignment and equality that is both
simple and familiar.
The assignment of a file variable sets the value of the pointer,
in the same manner that two pointers may point to the same record.
In general, two file variables are equal only after an assignment
(see the discussion on terminal I/O for an exception!), are undefined
until initialized, and may be left dangling by careless programmers.
These statements are true for pointers, and indeed, an operation on
a file variable (except OPEN and CLOSE) is an operation on its
dereferenced variable.
$ski
The need for a special dynamic storage area (the FBA) for file
blocks should be justified, since the PASCAL runtime system already
has a fairly sophisticated storage allocation and reclamation
system.
First, static storage could be used, associating a file block with
each file identifier.
This forces some of the file blocks to be on the heap (see below).
Also, this leads to complications with dangling pointers which are
difficult to resolve, to wit:
$ski $ind left +5 $ver
var f,g: text;
.\.\.
open (f, 'GRIZZL.WAX');
g := f;\\\\\\\\\\\\\\\\\\\\\\\(* f, g point to f's block *)
open (f, 'KARMA.BAD');\\\\\\\\(* f can't use its own block *)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\(* because g is using it *)
$ski $ind left -5 $jus
A second alternative is to use heap storage.
This leads to problems with unsuspecting users destroying the I/O system's
data structures.
For example, a user could perform a MARK before the I/O system allocates
the file block, and the subsequent RELEASE would destroy the block.
Also, since records on the virtual heap are relocatable, the file
system must use either relative addressing or virtual addresses when
in virtual mode.
The first alternative is a pain, but is tenable.
The second requires two separate copies of the I/O system, one which
dereferences virtual pointers to access its data, and the other
which performs normal addressing.
Neither solution is very attractive.
$ski
In the current I/O system, a portion of the file block storage is
allocated in an area similar to the proposed FBA.
This area contains the ring headers, whose addresses the operating
system remembers across calls.
Thus, they cannot be relocatable.
By placing the entire file block in such an area, the problem
with the ring headers is alleviated by making them part of the file
block, while the above mentioned problems are eliminated
if the file block is neither virtual nor relocatable.
Using such a system involves the creation of a storage manager
for the secreted stack space (which hopefully need not be too
complicated), and a dynamic chain fixer (to protect the space
stolen at the top from being pushed down onto).
The allocator in the current runtime need allocate only fixed
size blocks (for ring headers and buffers), and thus is primitive.
Since file components are of arbitrary size, the new manager
must be a little more sophisticated.
This is balanced by the reduced static storage requirements for file
variables.
$ski
On March 10, 1980, the runtime was changed to place file blocks on
the heap, removing the FBA allocation mechanism.
This was necessary because of a compiler bug involving the storing
of the stack pointer when using dynamic temporary variables.
Since the stack extension was not known at compile time, the old stack
pointer was stored before the stack was dynamically extended.
The FBA allocator would modify the left half of the stack pointer to
protect the newly allocated file block, and the restoring of
the stack pointer by the dynamic temp code would leave file blocks
vulnerable to attack by a roving stack pointer.
$ski
Consistent with the other runtime routines, the I/O routines
will get their arguments via ARG words following their call.
A file argument is specified by an ARG word whose effective
address is the address of the file block for the operation.
Thus,
$ski $ind left +5 $ver
MOVEI  ac,@0(TOP)
$ski $ind left -5 $jus
should suffice to load the file block address in ac.
$ski
The contents of a file block should remain unknown to the other
runtime routines.
Each file block will have at least the following words:
$ski $need 12
$ver $ind left +3 $tab 10,31
0	0,,addr(component)	;thus, f^ is a double dereference
1	backlink,,forelink	;all file blocks are chained
2	0,,channel	;effective addr is ch. #
3	eof	;also has eoln and eopage for text
4	cursor	;maintained for all files
5	error,,error	;nonfatal and fatal error codes
6	size	;component size if relevant
7	instr	;use XCT to dump/get a bufferload
10	status	;various bits
11	linenr	;p.a.[1..5] of char
12	filename	;filename in sixbit
13	filext	;file extension
14	?,,addr(buffer)-2	;first word of ring header
15	byte pointer	;second
16	byte counter	;third
17	?	;fourth
20	errors	;first word of buffer header
21	size,,addr(buffer)-2	;link to next buffer (only one)
22	0,,count	;size of buffer
23	buffer	;file/device/mode dependent
.\.\.		;  length
23+count	component	;may be arbitrarily long
$jus $ind left -3 $tab $ski 2
Word 10 above (status) contains, among other things,
the set of IO_OPTIONS and the file type bits given on
the OPEN call (see below).
Thus, validity of operations may be determined.
Some of the information is not needed for certain modes
or types of files, and the system will not allocate it.
Specifically, the component and the buffer will be identical
for files of component size 128 words, and the ring header
and buffer header will not be included for binary files using
the TENIO package.
$ski 2
&File operations&
$ski
The first operation on any file variable should be one of the
following &initializing& operations: OPEN, REWRITE, RESET,
or UPDATE.
These operations are mapped onto the following set of runtime
routines: <OPEN.> initializes a text file for input, <REWRT.>
initializes a text file for output,
<RESET.> performs an OPEN followed by a GET (standard function RESET)
on a text file, <OPNTP.> initializes a typed non-text
file, and <OPNBN.> a binary file ("file of *").
The ARG list for each of the five routines is the same, and
is listed below:
$ski $ind left +5 $ver
pushj     <routine>
  ARG     bits,component-length
  ARG     0,addr(bp)
  ARG     0,length-of-name
  ARG     0,addr(optionset)
$ski $ind left -5 $jus
where bp is a byte pointer to the file name to use such
that ILDB gets the first character, and bits define additional
attributes of the file.
The two lengths are given as immediate operands.
The AC field of the first operand is set as follows:
bits 0 and 1, used for <OPNTP.> and <OPNBN.>, are set to allow
input and output respectively.
For all operations, bit 2 is set if the file is packed, and bit 3 is set
to indicate that the file name is an internal descriptor of
the file &variable&, and should be translated into a suitable
external file name before attempting to open the file.
Notice that certain combinations of the arguments will never
occur (e.g., a component length for a binary file),
but it is assumed that the compiler has emitted
only correct calls.
All routines return the address of the new file block in AC1.
$ski
In summary, there are five initializing entry points:
$ski $ver $ind left +5
$tab 15
OPEN.	input, no GET
REWRT.	output
RESET.	input and GET
OPNTP.	open typed non-text file
OPNBN.	open binary file
$ski $tab $ind left -5 $jus
followed by four words of arguments.
$ski
In order to accomodate the variations on opening files with OPEN or
RESET, the following convention is specified.
The standard function OPEN is used &only& for text files, providing
a "hook" for interactive terminal I/O.
The standard functions RESET and UPDATE used with a typed
file require the loading of the file component.
This is performed by <RESET.> and <OPNTP.> respectively.
$ski
The GET and PUT operations are defined for all but binary files, and
take only a file variable argument as defined above.
The entry points are <GET.> and <PUT.> for typed files, and
<GETCH.> and <PUTCH.> for text files.
In addition, the entries <GETCR.> and <PUTCR.> are defined for
text files remembered from the previous GET, PUT, RD., or WR.\operation.
The READ and WRITE operations are defined in the standard language
in terms of assignment and GET/PUT.
The compiler emits these assignments and calls explicitly
in order to gain context for the assignment to the buffer.
$ski
The SEEK operation is defined for all but text files, and has
two ARGS; the first is a file block address, the second is the
address of an integer-compatible value to seek.
The entry point is <SEEK.>.
EXTENT takes a file variable argument, and returns an
integer-compatible value in AC1.
The size of the file's base type is examined, and the integer returned
is in units of the base type's size, or in words if
the file is binary.
The entry point <FILSZ.> is defined.
CURSOR is allocated a word within the file block, and may be accessed
directly by the compiled code.
The function BREAK takes a file variable, and is defined as
<BREAK.>.
The PAGE function is implemented as the entry point <PAGE.>, taking
a file block argument.
For binary files, the READ and WRITE operations are implemented
as the entry points <RDBIN.> and <WRBIN.>, which take
three arguments -- a file block, a core address from/to which to
write/read, and a length in words.
To assist in the use of this function, a function EXTENT (ptr) has
been defined, which returns the size in words of a record at
"the end" of ptr.
EXTENT works only with pointers to records in the dynamic memory
area; inasmuch as pointers to other kinds of records cannot be formed
"naturally" and must be coerced, no attempt is made to define
EXTENT of a static record, or of a subrecord of a dynamic record.
The first case is detectable, and will trap according to the
implementation; the second case is not, and its result are
not defined by any implementation.
$ski
Image I/O to text files is performed by two routines.  <RDIMG.>
and <WRIMG.> correspond to the GET8 and PUT8 predefined functions.
Each entry point takes two ARG words; the effective address of
the first is the address of the file block, and the effective
address of the second is the address of the integer variable
to read or write.
The associated file must have been opened with the IMAGE option.
$ski
To close a file, two operations are defined. CLOSE performs a normal
close, while SCRATCH deletes the file if possible.
These are implemented as two entries, <CLOSE.> and <CLOSD.>, taking
a single file variable descriptor.
The function EMPTY deletes the contents of a file open for output (at
least), setting eof true and CURSOR to zero.
EMPTY is implemented as the entry <EMPTX.> for text files and
<EMPTY.> for typed and binary files.
Each entry points takes a single file variable descriptor.
Finally, the CLOSE function with no file variable argument is implemented
<CLOSA.>, taking no arguments, which closes all open files.
$ski
Formatted I/O with text files is very general, having a total of 19
routines for all variable-text conversions.
Variants of the routines handle conversions for specific types.
The generic forms of the routines are <RD.ttf> and <WR.ttf>, where
tt designates the &target& of the operation (defined below), and
f designates the format of the target.
In this discussion, the following terms are used: the &datum& of a formatted
I/O operation is the base variable of the item being read, written,
parsed from text, or translated to text.
This may be an entity of any PASCAL atomic type, including temporary
variables and constants generated by the compiler.
The &target& of the operation is the file or string variable named
as the first parameter of the operation.
Each operation has a &target descriptor& as an argument, either stored
or explicit, which identifies the target variable or expression.
$ski
The first ARG word following a call to one of the formatted I/O
routines is an optional target descriptor, described for each
variant below.
Next is a required datum descriptor, whose interpretation
is dependent upon its AC bits, as described below.
After the datum descriptor is an optional set of format descriptors,
explained for each datum type below.
If a format descriptor is given, the AC field specifies special processing.
Notice that the presence of optional arguments is detected by the
presence of a zero opcode field in the words following the
return address.
The first two bits are type dependent; for all types, bit 2 is set to specify
non-minimal field width processing (the default is minimum), and
bit 3 is set to specify left justification, clear to specify
right justification.
Text processing code is grouped into modules with entries named below,
with a set of error routine calls to satisfy any unresolved requests.
The rightmost four bits of the AC field of the datum descriptor are used
to describe the type of datum and format descriptors, as follows:
$ski $ind left +6 $ind right +4 $par -6
0000-\integer.
The effective address of the datum descriptor is the address of the integer
datum to read or write.
If present, a format descriptor gives the field width as its effective
address, with bit 0 set to specify octal conversion, or bit 1 set
to specify hexadecimal conversion.
The symbol <INT.R> must be requested for integer reads, and <INT.W> for
writes.
$ski $par -6
0001-\single precision real.
The effective address of the datum descriptor is the address of the
single precision real number which is the datum.
On input, an optional format descriptor gives the field width as
its effective address.
On output, the high order bits of the AC field of the required first format
descriptor comprise a two bit integer specifying the output format, as follows.
Zero indicates the default G format ("x"); the EA of the format descriptor
gives the precision of the expression.
One indicates the E format ("x:10"); the second format descriptor gives
the user specified field width, and the EA of the first format descriptor
is not normally used.
Two indicates F format ("x:10:3"); the first format descriptor gives the
fractional field width instead of the precision, while the second gives
the field width.
Three indicates explicit E format ("x:10:3:E"); the first format descriptor
gives the explicit precision, while the second gives the field width.
The symbol <REAL.R> must be requested for real reads, and <REAL.W>
for real writes.
$ski $par -6
0010-\double precision real.
The arguments are identical to those for single precision real, except
that the datum is two words in length.
$ski $par -6
011\-\"X" format strings.
The datum descriptor is two words in length; the effective address of
the first ARG is the address of a byte pointer to the string or
substring, and the effective address of the second ARG is the length.
A single format descriptor, whose effective address gives the field
width, is optional.
The symbol <XSTR.R> must be requested for "X" format reads, and
<X> for "X" format writes.
$ski $par -6
0100-\"F" format strings.
The datum descriptor is two words in length; the effective address of
the first ARG is the address of the first word of the fixed length
string, and the effective address of the second ARG is the length.
A single format descriptor, whose effective address gives the field
width, is optional.
The symbol <FSTR.R> must be requested for "F" format reads, and
<FSTR.W> for "F" format writes.
$ski $par -6
0101-\"C" format strings.
The datum descriptor is one ARG word, whose effective address is the
address of a character variable.
A single format descriptor, whose effective address gives the field
width, is optional.
The symbol <CSTR.R> must be requested for "C" format reads, and
<CSTR.W> for "C" format writes.
$ski $par -6
0110-\string variables.
The datum descriptor is one or two words in length; the effective address
of the first ARG word is the address of the length word of the string,
and the effective address of the second ARG word is the string's
declared maximum length.
This form must be used for reading into a string variable
(so that the length may be set).
This datum type is not used in WR.\calls.
A single format descriptor, whose effective address gives the
field width, is optional.
The symbol <STRV.R> must be requested to use this datum type.
$ski $par -6
0111-\boolean.
The datum descriptor is one ARG word, whose effective address is the
address of a boolean variable.
A single format descriptor, whose effective address gives the field
width, is optional.
This mode is used only on output.
The symbol <BOOL.W> must be requested to use this mode.
$ski $par -6
1000-\subrange integer.
The arguments are the same as for the normal integer type (0000), except
that an ARG immediately following the datum descriptor contains the address
of a two word block giving the lower and upper bounds, respectively,
of the integer subrange for the input operation.
If this subrange is exceeded, the error IO_NOVF is indicated.
$ski $par -6
1001-\subrange single real.
The arguments are the same as for normal single real type (0001), except
as above, the ARG immediately following the datum descriptor
contains the address of a bounds block.
$ski $par -6
1010-\subrange double real.
The arguments are the same as for subrange single real above (1001), except
that the bounds block is four words in length, with two double real numbers
as the lower and upper bounds respectively.
$ski $ind left -6 $ind right -4
$ski
There are 19 variants on the <WR.> and <RD.> routines.
Unless specifically mentioned, each of the below variants has both
a <WR.> form and an <RD.> form.
The first argument is an
optional target descriptor, whose exact format is determined
by the variant used, as described below:
$ski $ind left +6 $par -6 $ind right +4
FDN\-\&new& file or device.
The target descriptor is a file variable argument as described above,
without type information (AC field zero).
It is a single ARG word whose effective address is
the address of the file block to be used.
$ski $par -6
FDR\-\&remembered& file or device.
The target is a file or device; the address of the file block has
been saved by the I/O runtime in the PASCAL data area from the
&previous& call.
There is no ARG word to describe the file argument.
$ski $par -6
SVN\-\new string variable.
The target is a varying length string variable.
The argument is a single word, whose effective address is that of
a two-word cell.
The first word is the address of the length word of the target string;
the second word is a cell which, in the WR.\variant,
is initialized by the inline code to the maximum permissible
length of translation.
The second argument is (usually) decremented for each operation,
such that the argument may be used as a countdown 
(number of positions remaining).
The WR.\variant, used for PUTSTRING, &concatenates& the translation,
and updates the length word of the string variable.
Its starting place is thus the <length> + 1 &th& character of the string,
and the inline code should initialize the length word of the
target string appropriately (usually zero).
The RD.\variant is not implemented, and the substring form is used.
$ski $par -6
SVR\-\remembered string variable.
The target is a varying length string variable.
The address of the length word and the location of the countdown cell
have been stored by the I/O runtime from the previous call.
There are no ARG words to describe the target.
$ski $par -6
SSN\-\new substring.
The target is an arbitrary substring of a string (varying or fixed length).
The argument is a pointer to a two word cell of arguments.
The first argument contains
a byte pointer which when incremented will point to the
first character of the substring;
the second word is a cell
containing the length of the substring.
The two argument cells are updated after the operation such that the
byte pointer, when incremented, points to the current character, and
the length is a countdown word.
$ski $par -6
SSR\-\remembered substring.
The target is an arbitrary substring.
The address of the two cells discussed above are remembered from
the previous SSN or SSR call, and modified according to the operation.
$ski $par -6
FSN\-\new fixed string.
The target is a fixed length string.
The argument is a pointer to a two-word cell.
The first word is a cell
containing the address of the first word of the fixed length string.
The second word is a cell
containing the length of the string.
The first argument is converted into a byte pointer which when incremented
points to the current character; the length is used as a countdown
word.  Thus, the FSR variant is functionally identical to the SSR
variant, since a byte pointer and countdown word are used in both.
Accordingly, there is no FSR variant.
$ski $par -6
LNN\-\new done with line.
The target is a file or device variable.
The argument is an explicit file variable descriptor.
This routine is used to implement the READLN and WRITELN functions
on the specified file, by calling after the processing
of the item list, if any.
$ski $par -6
LNR\-\remembered done with line.
The target is a file or device variable.
There is no explicit argument, and the saved address of the
file or device variable is used.
The routine performs the same function as the LNN variant.
$ski $par -6
DNN\-\new done.
The target is a fixed length string variable, or an arbitrary
substring of a fixed or varying length string variable.
The argument is a pointer to a two-word cell;
the first word contains
a byte pointer which when incremented points to the first character
to blank out; the second word contains the address of
a cell containing the countdown.
This is called at the end of a PUTSTRING to add trailing blanks
to the target of the PUTSTRING.
Only the WR.\variant is provided.
It should be noted that this routine assumes that one of the
above calls has already been made, and that in the case of a
packed array of char, the address has been translated into a
byte pointer.  This requires that every PUTSTRING have at least
one item.
$ski $par -6
DNR\-\remembered done.
The target is a fixed length string variable, or an arbitrary
substring of a fixed or varying length string variable.
The argument is saved from the previous call to any of the
substring and fixed length string routines,
and performs the same function as the DNN variant.
Only the WR.\variant is provided.
$ski $ind left -6 $ind right -4
The intended usage of the above variants is to use the "R" variant
whenever possible.
Thus, a typical sequence would use the "N" form to process the first
item, and the "R" form for the rest of the list.
This may only be used when there are no "side effects" -- specifically,
the arguments composing each item in the list are processed after
the previous item is complete.
If any routines are called during this evaluation which may perform
any formatted I/O (and thus stomp on the stored data), the
item must be processed using the "N" form.
This is not a serious drawback if the compiler tracks the two words
composing the "N" form arguments.
For example, they could be a pair of temps allocated in the local
stack frame, whose addresses are given relative to the basis
pointer whenever needed.
They could also be a pair of registers, if it is known that the
registers are available during the course of the evaluation.
Finally, if it is known that no other routines are called during
the processing of the list, any temporary cell could be
used to store the byte pointer and the countdown, and the
compiler need not track them at all.
Perhaps an option could be added to this specification (such as
an effective address of zero) to tell the I/O routines to use
cells in the PASCAL data area.
$ski
A few (correct) examples may further elucidate my ideas.
$ski $ver $ind left +3
putstring (substr (str, a, b), i: 10, x, 
           substr (str2, a, b) );
(* assume the substr pointers in EXP1 && EXP2,
   which are available for entire sequence *)

$ind left +3
pushj     wr.ssn         ;new substring
  ARG     0,EXP1         ;addr of two-word cell
  ARG     0,I            ;integer i
  ARG     0,12           ;decimal rt. just.,wid =10 dec
pushj     wr.ssr         ;continue
  ARG     001,X          ;single prec. real X
  ARG     0,prec(X)      ;precision factor
...                      ;EXP3 && EXP4 get ptrs to substring
                         ; assume EXP1 && EXP2 still good
pushj     wr.ssr         ;remember
  ARG     011,EXP3       ;X format; addr (b.p.)
  ARG     0,0(EXP4)      ;immediate length
pushj     wr.dnr         ;done with remembered substring
$ski $ind left -3
(* notice that in above example, EXP1 && EXP2 could be replaced by
   5(16) and 6(16), or A and B, if registers were not available. *)
$ski 2
read (f, i, a(i):6, q:z(i), q);
(* assume array a is unpacked *)
$ski $ind left +3
pushj     rd.fdn         ;new file or device
  ARG     0,@F           ;file F (assume LH of F zero)
  ARG     000,I          ;integer I
hrre      EXP1,I         ;load index
pushj     rd.fdr         ;remembered file or device
  ARG     000,-lb(EXP1)  ;lower bound hack, integer
  ARG     0,6            ;rt. just.,decimal, wid=6
...                      ;evaluate z(I) in EXP1
pushj     rd.fdn         ;new file or device
  ARG     0,@F           ;actually the same old file
  ARG     001,q          ;single real q
  ARG     0,0(EXP1)      ;rt. just.,dec, wid=z(I)
pushj     rd.fdr
  ARG     001,q          ;single real q, default format
  ARG     001,prec(q)
$ski $ind left -3
(* caveat user if F modified within z! *)
$ski 2
putstring (str, i:10, i: f(i), i:10);
(* assume no registers are available for 
   computation -- use local stack frame *)
$ski $ind left +3
movei     R1,STR         ;addr of string
movem     R1,5(16)
movei     R1,maxlen(STR) ;its allocated length
movem     R1,6(16)       ;next temp on stack
setzm     0,addr(STR)    ;set length word to zero
pushj     wr.svn         ;new string variable
  ARG     0,5(16)        ;addr of two-word cell
  ARG     000,I          ;integer I
...                      ;evaluate F(I) in 3(16)
pushj     wr.svn         ;knew that F did formatted I/O
  ARG     0,5(16)        ;same cells
  ARG     000,I          ;integer I
  ARG     0,@3(16)       ;hope ind. bit isn't set!!
pushj     wr.svr         ;one more
  ARG     000,I          ;integer I
  ARG     0,10           ;rt. just, decimal, wid=10
$ski 2 $just $ind left -6
$ski 2
&Terminal I/O&
$ski
In general, the job's controlling terminal, and any other attachable
device, is manipulated as a text file.
Any of the operations defined on a text file may be performed on
the teletype.
In addition, several file variables may have been opened independently
on the terminal, but all will point to the same file block. In
other words,
$ski $ind left +5 $ver
open (f, 'TTY:');
open (g, 'TTY:');
open (tty);
$ski $ind left -5 $jus
leaves the three file variables F, G, and TTY &equal&, and any
operation performed on any one is performed on all simultaneously.
Specifically, CLOSEing &any& of f, g, and tty CLOSEs &all& of them.
A common practice in MDSI's PASCAL utility programs is to have output
and input files separated by an equal sign, in the DEC manner.
Such programs typically have a processing section of code
with the following statements as brackets:
$ski $ind left +5 $ver
rewrite (foo, inputstring);
.\.\.
close (foo);
$ski $ind left -5 $jus
Now, if inputstring is equal to 'TTY:' from user input, the last
statement above will also close the output side
of the interactive terminal (usually leading to an unassigned
channel error on the next input prompt).
A more appropriate final statement for the above example would be
$ski $ind left +5 $ver
if foo <> ttyoutput then
  close (foo);
$ind left -5 $jus $ski
assuming that ttyoutput has been rewritten.
$ski
Several special functions are provided for the terminal as a text file.
CLEAR, implemented as the entry point <CLEAR.>,
takes a file variable as parameter, and flushes out all output
or input without looking at it. In other words, the terminal is
effectively reinitialized.
BREAK works on any text file, and suspends execution of the calling
program until all the output on the specified file variable has reached
its file or device. 
Finally, CURSOR, when used with a text file, returns the character
count for the current line.
$ski 2
&Errors&
$ski
In general, two classes of errors are recognized by the PASCAL
I/O system, which are best described as &fatal& errors and
&non&-&fatal& errors.
No non-fatal error will &directly& lead to program termination.
Fatal errors will cause program termination unless the file or
device has been opened with the OKERRS option.
In this case, the operation "completes" in the sense that the
runtime routine returns to the program.
The program can then call the IO_STATUS routines to obtain
information about the error, and to attempt to recover from the error.
If any other operation on that file variable is attempted,
the program terminates with
the same error condition as if OKERRS had not been specified.
$ski
Two error query routines are available.
The IOSTATUS routine returns a scalar of type IO_STATUS, which
is listed below.
The EXTSTATUS routine returns additional implementation-dependent
information about the error if it is available.
IOSTATUS takes a file variable as a parameter, and returns in AC1 the
status of the &last& operation performed on that variable.
EXTSTATUS does not take a parameter, and returns extended status
of the last operation performed by &any& of the I/O routines
described in this document.
The integer-compatible argument returned from EXTSTATUS is zero to
indicate either a successful operation or the lack of any
significant error information.
The meanings of non-zero EXTSTATUS returns are defined by the
specific implementation.
The runtime entry points for the status routines are <IOSTA.> for
IOSTATUS, taking a single ARG for the file block address, and
<IOSTL.> if no argument was given to IOSTATUS (see below).
Both return their result in AC1.
EXTSTATUS is implemented as the entry point <EXTST.>, taking
no arguments and returning its result in AC1.
$ski
The following is a list of the error conditions detected by the
I/O system.
The middle column defines the class of the error -- "F" for fatal,
"N" for non-fatal. In addition, "E" signifies that further information
is available from the IO_EXT_ERROR call.
Finally, "S" indicates that the error can occur on PUTSTRING or
GETSTRING (see below).
$ski $ind left +3 $ver $tab 14,24
IO_OK		last operation successful
IO_NOVF	NS	arithmetic overflow on conversion
IO_POVF	NS	PUTSTRING target length exceeded
IO_DGIT	NS	digit not within integer base,
		bad initial char seen
IO_GOVF	NS	GETSTRING attempt to read past end of string
$ski
IO_INTR	F	I/O system internal error
IO_REWR	F	"rewrite required" (not open for output)
IO_EOF	F	attempt to read beyond eof (count exceeded),
		also reading output-only file
IO_OUTF	FE	output failure (probably no disk space)
IO_INPF	FE	input failure (probably invalid conversion)
IO_SEEK	F	attempt to SEEK non-random file
IO_ILLC	F	attempt to SEEK invalid cursor value
IO_NEMP	FE	can't empty file
IO_OPNF	FE	can't open file
$ski 2 $ind left -3 $jus $tab
Formatting errors can occur during the PUTSTRING and GETSTRING operations.
There is no file variable associated with the target of such operations,
so the IOSTATUS function called without a parameter returns the IO_STATUS
code associated with the last formatting operation.
This includes formatted I/O from/to text files, and PUTSTRING and GETSTRING
calls.
The IO_POVF error (string field exceeded) indicates that the
maximum length associated with the target of a PUTSTRING has
been exceeded.
Any subsequent items in the PUTSTRING list will be evaluated but
will not create any additional text within the target.
When GETSTRING goes past the end of the target string, the IO_GOVF
error is returned, and the item base variable not modified.
$ski
It is important to realize that a call such as
$ski $ind left +5
writeln (f, foo, ech, gonzo, wacko);
$ski $ind left -5
is equivalent to five separate calls, to wit:
$ski $ind left +5 $ver
write (f, foo);
write (f, ech);
write (f, gonzo);
write (f, wacko);
writeln (f);
$ski $ind left -5 $jus
In fact, the code emitted for the two forms is identical.
A fatal error occuring within the list will not be available
to an IOSTATUS call after the statement.
Rather, the processing of the &next& item after the erroneous
one will cause program termination, as if the item
has occurred in its own procedure call (as in the second list
above).
   ax