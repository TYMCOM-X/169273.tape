$length terminal
$num off
$control off
$cen
Description of Overlay System
for #pvm, Version 1.0
$ski 4
$title right '#pvm Overlays' right 'May 12, 1980' right 'Page \'
$tab 9,17,25,33,41,49
$jus
This document describes the overlay functions to be provided
in all implementations of the #pvm, including support functions
on the host system.
It does not describe the means of implementation on target systems
(e.g., overlay database formats), since these must vary from system
to system to deal with different operating system functions
and performance.
It describes the means of implementation on the host system only
generally, because specific description has as a corequisite
the specification of the #pvm linker, and should have
as a basis the specification of the Pascal-10 overlay system
(version 2.0), not yet complete.
$ski
The Pascal overlay system for the #pvm is similar in
structure and function to the Pascal-10 overlay system.
The user defines overlay areas, modules and symbols in the Memory
Description Language (MDL), specifying area and module static sizes
in pages.
The MDL is input to an "MDLA" program, which performs the
Pascal-10 ODMS function of analyzing the MDL and producing
command files to drive the #pvm linker in creating the overlays.
Individual overlays are transferred to the target system for
use in a #pvm image.
The ODMS function of database maintenance resides in the target system.
$ski
The reason for this similarity of overlay systems is not immediately apparent,
since unlike the DEC-10 the #pvm is a virtual memory machine.
The principal reason for overlaying a program is to make it
fit into smaller address spaces; there is no compelling reason
to do this in a virtual memory system.
However, the Pascal-10 overlay system provides an extra function
beyond simply reducing program memory demands, namely dynamically
switching overlay module versions.
The ANC system requires this function.
Also, given large systems implemented for the #pvm and low-bandwidth
channels for transmitting updates, a way to update parts of
an image only is desirable, since it will save time and transmission costs.
The Pascal-10 overlay system allows separate relinking of
overlay modules; therefore, separate updating is also possible.
$ski
Use of the Pascal overlay system can be divided into four stages:
specification of the overlay structure in MDL,
production of individual overlays through linking,
maintenance of the database of overlays accessed at runtime,
and use of the overlays at runtime.
For the reason given in the first paragraph,
the third stage is not specified here.
#pvm overlays are linked and transferred to the target system
individually; database maintenance is thus a system-specific function.
The rest of this document deals with the other stages.
$ski
The #pvm MDL is basically the same as the Pascal-10 MDL.
However, the MACHINE and SYSTEM sections both have PVM as their argument;
overlay area and module static storage sizes are in units of
pages, not words;
and no provision is made for sharable overlays.
$ski
The #pvm overlay linking procedure also remains similar.
The MDLA produces linker command files specifying module base
addresses, and object files containing transfer vector symbol
definitions and memory allocation.
Although the linker is not specified yet, this
requires it to have commands to set relocation bases for
the p-sections in a link.
$ski
At runtime, the #pvm overlay system presents a simpler
interface to the program than does the Pascal-10 system.
Only one entry point, OVLVERSION, which establishes a
given version of a module as the current one, is defined.
Its calling sequence is the same as in the Pascal-10 system.
The other Pascal-10 entry points are for establishing and
de-establishing auxiliary databases and executable files
as sources of overlays.
These functions are of use only in a development environment;
production systems (for which the #pvm is intended)
can retrieve all overlays for a given image from a central
database associated with the image.
Therefore, such functions are not specified for the #pvm.
#pagsect(References)
$ski $jus
$ind 9
$par -5
\1.\\Gorgen, D.\P. and S.\M.\Roush.  "Specification of #pvm Version 1.0",
4/1/80.
