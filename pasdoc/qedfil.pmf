#DOCUMENT(Conversion of QED to Workfile Editing,6 November 1981,45)
#TITLE_PAGE_1("#TITLE,Description of Slinky File Scheme,&
Prepared by: Drew Montag)
#FOOTNOTES(LEFT)
#PAR_DEFAULT(,3)
#SECT(Introduction)
This document describes the scheme that is being proposed to change some of
the internal workings of QED.  QED is currently a buffer editor, and as such,
it can only process files that can fit into an internal buffer in memory.
The proposed changes to QED would convert it into a workfile editor, that
is, an editor that uses temporary file(s) to store a working copy of the file
that is being processed.  This scheme will allow QED to edit files of any size,
limited only by the amount of temporary disk space available to it.  The
file handling scheme described below is referred to as a "Slinky" file scheme.
#SECT(Overview)
#BEGINLEVEL
#SECT(Components)
The slinky file scheme consists of three main components:  Two workfiles and
an in-core buffer.  The workfiles are typed files, where the type is an array
of char.  The number of elements in the array hasn't been decided yet, but it
will be in the range of 50 to 200.
The actual text to be edited will be "packed" to fill these disk records,
with headers preceding the text for each line to indicate the length of
this string of characters.  It is possible for the text for a given line
to start in the middle of one disk record and end in the middle of 
another disk record.  As long as the lengths in the headers are correct,
the contents of a given line can be retrieved.
#PAR()
Another alternative to using a typed file is to use a binary file, where
each line contains a header with the length of the current line.  This
eliminates the need to pack and unpack the text to move it through the
in-core buffer.
#PAR()
One of the workfiles (File 1) contains
the lines of the file from the first line to the beginning of the in-core
buffer, in correct order.  The other workfile (File 2) contains the lines 
from the end of the in-core buffer to the last line read in from the input
file, in reverse order.  The in-core buffer contains either the last line
read in from the input file or the line being modified and a certain number
of lines before and after that line.  The in-core buffer is maintained as a
doubly-linked list, with the lines stored as flexible strings.
#SECT(Examples)
Examples of some typical situations will help clarify the scheme. 
In the first example, the editor is in its initial state.  Both workfiles are
closed.  The in-core buffer is empty.  There is no input file yet.
#BEGINFIGURE(16,0)
      File 1                                           File 2
      ------                                           ------

      Closed                                           Closed


			  In-core buffer
			  --------------

                              Empty


			    Input file
			    ----------

			    Undefined
#ENDFIGURE
#PAR()
In the next example, a Load command has been issued to QED.  This defines
the input file to be used.  This file is opened, but no records are read
from it yet.  The workfiles are still closed, and the in-core buffer is
still empty.
#BEGINFIGURE(23,0)
      File 1                                           File 2
      ------                                           ------

      Closed                                           Closed


			  In-core buffer
			  --------------

                              Empty


			    Input file
			    ----------

                Next record +--------+
			    |        |
			    |        |
			    |        |
			    |        |
			    |        |
			    |        |
			    +--------+
#ENDFIGURE
#PAR()
In the next example, a Print command has been entered to QED to print line
number i.  The in-core buffer is big enough to hold all the lines from the
input file from line 1 to line i, so the lines are read into the in-core
buffer.  The workfiles are still closed.
#BEGINFIGURE(31,0)
      File 1                                           File 2
      ------                                           ------

      Closed                                           Closed


			  In-core buffer
			  --------------

			  1 +--------+
			    |        |
			    |        |
			    |        |
			  i +--------+
                                ^
                                |
                                +---------------+
						|
						|
			    Input file          |
			    ----------          |
                                                |
                            +--------+          |
                            |        |          |
                            |        |          |
                            |        |          |
		Next record +- - - - +----------+
                        i+1 |        |
			    |        |
			    |        |
			    +--------+
#ENDFIGURE
#PAR()
If the input file is big enough, its contents may not fit entirely in the
in-core buffer.  In this case, File 1 is opened, and the overflow lines are "slinked"
from the top of the in-core buffer and added to the end of File 1.  File 2
is still closed.
#BEGINFIGURE(37,0)
      File 1                                           File 2
      ------                                           ------

  1 +--------+                                         Closed
    |        |
    |        |
  j +--------+
        ^
        |
        |
        |                 In-core buffer
        |                 --------------
        +-----------------------+
                                |
                                +
			j+1 +--------+
			    |        |
			    |        |
			    |        |
			  k +--------+
                                ^
                                |
                                +---------------+
						|
						|
			    Input file          |
			    ----------          |
                                                |
                            +--------+          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
		Next record +- - - - +----------+
                        k+1 |        |
			    |        |
			    +--------+
#ENDFIGURE
#PAR()
It is possible to read all the way through the input file, and still not
have to open File 2.  Once the last record ($) of the input file has been
referenced, and thus read into the in-core buffer, the input file is
closed.
#BEGINFIGURE(38,0)
      File 1                                           File 2
      ------                                           ------

  1 +--------+                                         Closed
    |        |
    |        |
    |        |
  m +--------+
        ^
        |
        |
        |                 In-core buffer
        |                 --------------
        +-----------------------+
                                |
                                +
			m+1 +--------+
			    |        |
			    |        |
			    |        |
			  $ +--------+
                                ^
                                |
                                +---------------+
						|
						|
			    Input file          |
			    ----------          |
                                                |
                            +--------+          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
		Next record +--------+----------+
#ENDFIGURE
#PAR()
It is also possible to have both workfiles open while the input file is still
open and being read from.  This will happen if the line to be modified is in
either workfile, not in the in-core buffer or the input file.
If the line to be modified is in either of the workfiles, then the files
must be "slinked" to get the line, and the lines surrounding it, into the
in-core buffer.  If the desired line is in File 1, then lines are taken off
the bottom of File 1 and put onto the top of the in-core buffer.  When the
buffer fills up, the overflow lines are taken off the end of the buffer and
put onto the bottom of File 2.  That is why File 2 is in reverse order.
The following diagram shows the direction of line movement for slinking the
files to get at a line that is in File 1.
#BEGINFIGURE(39,0)
      File 1                                           File 2
      ------                                           ------

  1 +--------+                                     q +--------+
    |        |                                       |        |
    |        |                                       |        |
    |        |                                   p+1 +--------+
    |        |                                           ^
  n +--------+                                           |
        +                                                |
        |                                                |
        |                                                |
        |                 In-core buffer                 |
        |                 --------------                 |
        +-----------------------+                        |
				|                        |
				v                        |
			n+1 +--------+                   |
			    |        |                   |
			    |        |                   |
			    |        |                   |
			    |        |                   |
			  p +--------+                   |
				+                        |
				|                        |
				+------------------------+


			    Input file
			    ----------

			    +--------+
			    |        |
			    |        |
			    |        |
			    |        |
                Next record +- - - - +
                        q+1 |        |
			    +--------+
#ENDFIGURE
#PAR()
The reverse operation is performed if the line to be modified is in File 2.
Lines are taken off the bottom of File 2 and added to the end of the in-core
buffer.  Overflow lines are taken off the top of the buffer and added to the
bottom of File 1.
If the files are in the above state, with both workfiles open and the input
file still being read from, and a line past point q in the input file is
referenced, then the following operations must take place:  The tail
end of the file must be slinked from File 2 into the in-core buffer, 
and the new lines from the input file are added onto the end of the in-core 
buffer.  It is also possible that the action of slinking File 2 into the
in-core buffer may require a slink operation from the in-core buffer to File 1.
This is the situation shown in the following figure.
#BEGINFIGURE(37,0)
      File 1                                           File 2
      ------                                           ------

  1 +--------+                                         Empty
    |        |
    |        |
    |        |
    |        |
    |        |
  r +--------+
        ^
        |
        |
        |                 In-core buffer
        |                 --------------
        +-----------------------+
                                |
                                +
			r+1 +--------+
			    |        |
			    |        |
			    |        |
			  s +--------+
                                ^
                                |
                                +---------------+
						|
						|
			    Input file          |
			    ----------          |
                                                |
                            +--------+          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
                            |        |          |
		Next record +- - - - +----------+
                        s+1 |        |
                            +--------+
#ENDFIGURE
#ENDLEVEL
#SECT(Workfiles)
#BEGINLEVEL
#SECT(<:"Shrinking" Workfiles:>)
As stated above, the workfiles used in this scheme are typed files.  This 
allows random access into the workfiles, which in turn allows workfiles to be 
"shrunk".  This is made possible by maintaining a pointer to the last valid
record in each workfile.
Therefore, where records are said to be "taken off the bottom" of a 
workfile, they aren't actually removed from the workfile, rather, the
pointer to the last valid record in the workfile is changed.  When
all the lines have been "taken out of" a workfile, it
could be closed, to be reopened later if needed, but the process of
closing and opening the file is expensive in terms of processing time.
#SECT(Lookup Tables)
Another effect of allowing random access into the
workfiles is that the files do not need to be slinked on print-only operations.
This is because a given line in a workfile can be accessed by means of a 
Lookup Table and printed out directly from the workfile.  Since the line
is only going to be printed, and not changed, it does not need to be
slinked into the in-core buffer.
#PAR()
There are 2 Lookup Tables, one for each workfile.  The Lookup Table for File 1
is referred to as Table 1, and the Lookup Table for File 2 is referred to as
Table 2.  These tables are fixed size arrays made up of records with 3
fields:  A QED line number field, a
workfile record number field, and a workfile record
displacement field.  All three fields are type integer.  The QED line number
field contains the line number of the line that this Lookup Table entry
points to.  The workfile record number field contains the index of the 
disk record in the workfile that contains the line that this Lookup Table
entry points to.  The workfile record displacement field contains the
displacement into the disk record at which the header for this line begins.
#PAR()
Each of these tables will be a fixed size, somewhere between 50 and 200
entries.  The entries will be in strictly ascending order (based on QED
line numbers) in Table 1, and in strictly descending order in Table 2.
It is desirable to keep the increment between the values of the QED
line number fields as small and as uniform as possible.  There are
several algorithms for setting up, maintaining, and making use of the
tables.  The most promising appears to be one that reorganizes a table
whenever the workfile it points to is slinked.  If lines are "shrunk"
from the workfile, then the pointer to the last valid entry in the table
is moved up to reflect this.  If lines are added to the workfile, then
new entries are added to the end of the table using an increment of 5
(only lines with QED line numbers that are multiples of 5 are pointed
to by table entries).  If there isn't enough room in the table, then
it is reorganized with an increment value of 10, starting from the 
beginning of the table.  This means that only entries with QED line numbers
that are multiples of 10 are put in the newly reorganized table.  If there
still isn't room, then the increment is doubled again to 20, and the table
is reoganized again from the beginning.  This process continues until the
pointers all fit in the table.  The last valid table entry pointer is set
to point to the last entry, and any subsequent lines added to the 
workfile will result in new pointers being added to the table, starting
at the next available entry, with an increment value of 5.
Note that the QED line number fields in Table 2 will have to be changed
everytime lines are added to or deleted from the in-core buffer.
#SECT(File Usage)
Initially, both files are empty and closed.  As lines are read in from the
input file, they are linked onto the end of the in-core buffer.  When the
in-core buffer runs out of room, then File 1 is opened, and some of the lines
are taken from the top of the buffer and added to the end of File 1.  File
2 is only opened if and when a slink operation needs it.  It is possible to
edit a "small" file entirely in the in-core buffer, and to edit any size file
using only the in-core buffer and File 1.  File 2 is only needed if a 
modification is made to a line that has been moved to File 1, which requires 
a slink backwards.  Therefore, if changes are made to the input file starting at
the beginning and preceding in order to the end, then File 2 need never be
opened.
#SECT(<:"Slinking" Workfiles:>)
In summary, the workfiles must be slinked in the following cases:
#BEGINITEM()
#ITEM()When the in-core buffer overflows while reading from the input
file.  This requires a slink from the in-core buffer to File 1.
#ITEM()When a line in either workfile is to be modified.  This requires
a slink to get the given line into the in-core buffer, and possibly a
slink from the in-core buffer to the other workfile if the in-core
buffer overflows.
#ITEM()When a line is referenced that is still in the input file and
both workfiles are in use.  This requires a slink to get the tail end
of the file from File 2 into the in-core buffer, and possibly a slink
from the in-core buffer to File 1 if the in-core buffer overflows.
#ENDITEM
#ENDLEVEL
#SECT(Input file)
The input file is opened when the QED Load command is given, but no records
are read from it.  Records are only read into the in-core buffer
when they are referenced, or when a line beyond them is 
referenced.  For example, if the QED command after the Load is a request to
print line 17, then the first 17 records are read into the in-core buffer
from the input file.
#PAR()
After the last record has been referenced and read in from the input file,
then the input file is closed and need not be opened again for input.
#SECT(In-core buffer)
The in-core buffer is maintained as a doubly linked list of records.
Each record has three fields:  a forwank field, a backward link
field, and a data field.  The forward and backward link fields are 
pointers to other records in the linked list.  The data field is a
flexible string, which implies that the actual text for a given line
must be "unpacked" if it is slinked in from a workfile into an in-core
buffer record, and "repacked" when it is to be added to a workfile.
Lines read from the input file into the in-core buffer don't need to
be unpacked, and the text is just placed into a flexible string.
#PAR()
Pointers to the beginning and end of the linked list are maintained.
The actual number of records making up the in-core buffer will vary
depending on the length of the data field of each line.  By using
the STORAGE_OVERFLOW exception condition handling, it is possible
to make the in-core buffer as large as possible, reducing the amount
and frequency of slinking required.
In addition, a "Set Buffer Size" command will be implemented to allow
the user to specify an absolute upper limit to the size of the in-core
buffer.  If no limit is specified, then the maximum that can be grabbed
will be taken.
#TOC
   +<B