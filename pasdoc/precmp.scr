$margin 10 $width 75
$title left 'Pre-Compiled Declarations' left 'Functional Specification' left '14 January 1980'
$just
$indent left +10 $indent right +10 $para 5 $skip 3
The most serious problem with the new compiler is the cost of compilation.
In this paper, we will consider possible compiler enhancements to reduce the
cost associated with the compilation of declarations.
Please consider these proposals, and submit any comments to Neil Faiman by
February 1.
$skip 2 $indent left -10 $indent right -10
I.\\\&Problem Description&
$skip $para 5
Consider the following points:
$skip $need 2 $para 5
(1)\\Compiler log data indicate that, in modules compiled by the Design, ANC,
and compiler groups, between 65% and 90% of the code typically comes from
 $INCLUDE files.
In normal usage, $INCLUDE files contain only declarations.
$skip $need 2 $para 5
(2)\\In large systems such as Design, ANC, or the new compiler, there is
frequently a large collection of declarations (anywhere from 1500 to 3000 lines)
which must be included in the compilation of every module in the system.
This naturally discourages the otherwise good practice of breaking a system
into small modules.
Splitting one 600-line module into two 300-line modules will not reduce
compilation costs significantly, if each module must include 2000 lines of
declarations.
$skip $need 2 $para 5
(3)\\Our figures suggest that the cost of compiling Design, ANC, and compiler
modules with the current compiler would be reduced approximately 20% if the
compilation of declarations could be eliminated.
When the checkout compiler becomes available, the cost reduction might be
between 25% and 40%.
$skip $need 2 $para 5
(4)\\All versions of the new compiler (optimizing, checkout, VAX, etc.) use
the same Pass 1.
Since declarations are processed only in pass 1, any improvements in declaration
processing will thus be immediately available in all versions of the
compiler.
$skip $need 2 $para 5
(5)\\The cost of compiling declarations cannot be reduced significantly,
but the compilation of the declarations might be divorced from the compilation
of the body of a module.
Since the declarations associated with a large system typically are changed much
less frequently than the executable code of the system, such a separation
could have the same effect as eliminating the cost of compiling declarations.
However, note that the actual improvement would depend on the frequency with
which the declarations were recompiled.
The figures in (3) above represent an ideal case, and not necessarily the
overall performance improvement which would actually be observed.
$skip 2 $need 4
II.\\&Objectives&
$skip $para 5
The objective of a pre-compiled declaration mechanism is to reduce the average
cost of compilation by allowing a collection of declarations to be compiled
once and then used many times.
The first consideration in the design of such a mechanism is therefore the
cost of using it.
If using previously compiled declarations cost as much as recompiling them,
pre-compilation would obviously be useless.
More generally, the lower the cost of using pre-compiled declarations, the
more valuable they will be.
$skip $need 2 $para 5
We must also balance the cost of a pre-compilation mechanism against its
flexibility.
Such a mechanism must be flexible enough to be generally useful.
$skip $need 2 $para 5
Assuming that we have a mechanism for pre-compiling a collection of declarations
and storing the result in a file, the basic question to be decided is whether it
will be possible to combine declarations from more than one such file in a
single compilation.
In the most general mechanism, pre-compiled declaration files could be used like
ordinary $INCLUDE files.
Any number could be included in a compilation, and the compiler would resolve
references between them.
$skip $need 2 $para 5
A much more restricted mechanism would allow only one pre-compiled declaration
file to be used in a compilation.
This is obviously less flexible, but it can be implemented much more efficiently.
In fact, using such a restricted mechanism, compilation with a pre-compiled
declaration file would be no more expensive than compilation of a module the
same size without the pre-compiled declarations.
By contrast, resolving cross- references among multiple pre-compiled declaration
files might turn out to be quite expensive (although still probably not as
expensive as actually compiling the declarations).
$skip $need 2 $para 5
In our proposal below, we describe a mechanism of the restricted variety.
It is our feeling that the improvement in speed makes up for the loss in
flexibility, particularly since the $INCLUDE mechanism will still be
available.
However, we would like any comments you may have on this issue.
$page $need 4
III.\&Proposal&
$skip 2
1.\\\&The Standard Environment&
$skip $para 5
Every Pascal compilation takes place within a standard environment.
This environment, provided by the compiler, contains the definitions of all the
symbols, types, procedures, etc.\that are predefined in the Pascal language.
$skip 2
2.\\\&Extended Environments&
$skip $para 5
The standard environment for a compilation may be augmented with an environment
extension.
An environment extension is an additional set of symbols, whose definitions are
added to the definitions of the symbols in the standard environment.
The standard environment, plus all the definitions from the environment
extension, make up an extended environment.
Since an extended environment is an extension of the standard environment,
no symbol in it may have the same name as any symbol in the standard
environment.
$skip 2
3.\\\&Creating an Extended Environment&
$skip $para 5
An extended environment is created by compiling an environment module.
An environment module is a module which begins with the keyword
ENVMODULE, rather than PROGRAM, MODULE, or DATAMODULE.
It may contain only constant, type, and external declarations.
Furthermore, it may not contain declarations of any symbols whose names are
the same as those of symbols already defined in the standard environment.
$skip $need 2 $para 5
When the compiler compiles an environment module, it does not create a
relocatable binary file.
Instead, it creates an environment file, which may be used in other
compilations.
The environment file name, like a relocatable binary file name, is taken from
the first file name before the equal sign in a full command line, or from the
source file name in a short command line.
However, its default extension is ".ENV" rather than ".REL".
$skip 2 $need 4
4.\\\&Using an Extended Environment&
$skip $para 5
To compile a program or module with an extended environment, you must use
a special version of the compiler, named ENVPAS.
When you run ENVPAS, it will ask you for the name of an environment file.
You give it the name of the environment file you want to use (it will assume
the extension of ".ENV").
Subsequently, ENVPAS will behave exactly like NEWPAS, except that any programs
or modules it compiles will be compiled with the specified extended
environment, rather than with the standard environment.
$skip $need 2 $para 5
Notice that you can compile an environment module using ENVPAS and an
extended environment, rather than NEWPAS and the standard environment.
In this case, the environment file created from the compilation will contain
all the definitions from the standard environment, from the extended
environment you specified to ENVPAS, and from the compiled environment
module.
Thus, you can create an extended environment which contains another extended
environment as a subset, just as any extended environment contains the
standard environment as a subset.
$skip $need 4
5.\\\&External Declarations&
$skip $para 5
Using the extended environment mechanism, a single environment file could
contain declarations for all the types and external references in a system.
Supposing that the environment file contained the declaration for an
"external procedure P", no conflict would occur if the module containing the
public declaration for P were compiled with that environment file, since the
external declaration would occur in the standard environment scope, and the
public declaration would occur in the module scope, and would therefore
override the external declaration.
   