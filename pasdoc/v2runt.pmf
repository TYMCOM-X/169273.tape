$length terminal
$num off
$cen
Specification of Runtime Interface
for Pascal Virtual Machine, Version 2
$ski 4
$title right 'PVM Runtime Spec.' right 'April 13, 1981' right 'Page \'
$tab 9,17,25,33,41,49
$jus
#sect(Introduction)
This document specifies the interface between Pascal programs
compiled for the Pascal Virtual Machine and the "runtime system."
Actually, the boundary between an architecture implemented
in software and a runtime system for a language compiled for
that architecture is not clear-cut.
However, we can make the distinction between "normal"
instructions and runtime system invocations along
traditional lines,
putting in the latter category I/O, environment inquiries,
math functions, dynamic memory management,
complicated data manipulation, and program monitoring.
This meshes well with the Pascal Virtual Machine architecture
defined in [1], since many of these functions require
several parameters, and the Format 8 instruction format (which
allows up to seven 16-bit arguments) is reserved for runtime calls.
$ski
All runtime calls defined in this document use the eight
Format 8 opcodes, XFA through XFH.
These opcodes, defined in Section 4.6 of [1],
take zero through seven 16-bit arguments respectively.
The meaning of these arguments depends on the function.
Format 8 instructions also have a one-byte subopcode field.
This field is used to differentiate among up to 256 different
runtime calls for each opcode.
Each function comes in one or more variants
which differ only in how they refer to their parameters;
these variants may or may not use the same opcode.
However, each opcode-subopcode pair is unique to a
particular variant of a particular function.
$ski
The descriptions below give for each function its name
and a list of any registers and condition codes it affects,
and give for each variant of the function the opcode name
and subopcode value,
and information defining the format of each argument.
This information is a three-letter code;
the possible codes are listed in the table below.
$ski
$need 10
$ver
	CON	argument is a 16-bit signed constant
	REG	argument contains a register number in low 4 bits
	BAS	argument contains a 4-bit base register number
		followed by a 12-bit displacement field
	AB1	argument is the high-order half of an absolute
		virtual address
	AB2	argument is the low-order half of an absolute
		virtual address
	SPC	argument has a special format described with
		the function
$jus
$ski
For input parameters,
CON arguments denote a parameter whose value is the value
of the constant;
REG arguments denote a parameter whose value is the contents
of the register;
BAS arguments denote a parameter whose value is at the address
calculated by adding the signed displacement to the contents
of the base register.
AB1 and AB2 arguments come in pairs;
together, they denote a parameter whose value is at the
virtual address they form.
$ski
For output parameters,
the low order 4 bits of REG arguments denote a register where
the parameter is to be stored;
BAS arguments, and AB1-AB2 argument pairs, denote a memory location,
whose address is calculated
as for input parameters, where the parameter is to be stored.
#numsect(1,I/O Functions)
#numsubsect(2,File Variable Maintenance)
$ver
IO	INITFILE
   XFD	00	CON,BAS,SPC
   XFD	01	BAS,BAS,SPC
IO	CLOSEALL
   XFA	00
IO	CLOSE
   XFB	00	BAS
IO	SCRATCH
   XFB	01	BAS
$jus
#numsubsect(2,General File Operations)
$ver
IO	BREAK
   XFB	02	BAS
IO	EMPTY
   XFB	03	BAS
IO	EXTSTATUS	R15
   XFA	01
IO	IOSTATUSL	R15
   XFA	02
IO	CURSOR	R15
   XFB	04	BAS
IO	IOSTATUSF	R15
   XFB	05	BAS
IO	FILENAME
   XFD	02	BAS,CON,BAS
IO	EOF	Z
   XFB	06	BAS
IO	MOVTOBUF
   XFC	00	BAS,BAS
   XFD	03	BAS,AB1,AB2
IO	MOVFROMBUF
   XFC	01	BAS,BAS
   XFD	04	BAS,AB1,AB2
$jus
#numsubsect(2,Non-text Files)
$ver
IO	EXTENTF	R15
   XFB	07	BAS
IO	GETTYPED
   XFB	08	BAS
IO	PUTTYPED
   XFB	09	BAS
IO	READBINARY
   XFD	05	BAS,CON,BAS
   XFD	06	BAS,REG,BAS
IO	WRITEBINARY
   XFD	07	BAS,CON,BAS
   XFD	08	BAS,REG,BAS
IO	SEEK
   XFC	01	REG,REG
$jus
#numsubsect(2,Text Files)
$ver
IO	CLEAR
   XFB	0A	BAS
IO	GETTEXT
   XFB	0B	BAS
IO	PAGE
   XFB	0C	BAS
IO	PUTTEXT
   XFB	0D	BAS
IO	READLN
   XFB	0E	BAS
IO	WRITELN
   XFB	0F	BAS
IO	EOLN	Z
   XFB	10	BAS
IO	EOPAGE	Z
   XFB	11	BAS
IO	READTEXT
   XFC	03	CON,BAS
IO	WRITETEXT
   XFC	04	CON,BAS
IO	GETSTRING
   XFC	05	CON,BAS
IO	PUTSTRINGF
   XFC	06	CON,BAS
IO	PUTSTRINGT
   XFC	07	CON,BAS
IO	PUTSTRINGV
   XFC	08	CON,BAS
$jus
#numsect(1,Non-I/O Functions)
#numsubsect(2,Environment Inquiries)
$ver
ENV	DATE
   XFB	12	BAS
ENV	RUNTIME	R15
   XFA	03
ENV	TIME	R15
   XFA	04
$jus
#numsubsect(2,Math Functions)
$ver
MTH	RANDOM0	R15
   XFA	05
MTH	RANDOM1	R15
   XFB	13	BAS
MTH	ARCCOS	R15
   XFB	14	BAS
MTH	DARCCOS	R14 R15
   XFB	15	BAS
MTH	ARCSIN	R15
   XFB	16	BAS
MTH	DARCSIN	R14 R15
   XFB	17	BAS
MTH	ARCTAN	R15
   XFB	18	BAS
MTH	DARCTAN	R14 R15
   XFB	19	BAS
MTH	COS	R15
   XFB	1A	BAS
MTH	DCOS	R14 R15
   XFB	1B	BAS
MTH	COSH	R15
   XFB	1C	BAS
MTH	DCOSH	R14 R15
   XFB	1D	BAS
MTH	COT	R15
   XFB	1E	BAS
MTH	DCOT	R14 R15
   XFB	1F	BAS
MTH	EXP	R15
   XFB	20	BAS
MTH	DEXP	R14 R15
   XFB	21	BAS
MTH	LN	R15
   XFB	22	BAS
MTH	DLN	R14 R15
   XFB	23	BAS
MTH	LOG	R15
   XFB	24	BAS
MTH	DLOG	R14 R15
   XFB	25	BAS
MTH	SIN	R15
   XFB	26	BAS
MTH	DSIN	R14 R15
   XFB	27	BAS
MTH	SINH	R15
   XFB	28	BAS
MTH	DSINH	R14 R15
   XFB	29	BAS
MTH	SQRT	R15
   XFB	2A	BAS
MTH	DSQRT	R14 R15
   XFB	2B	BAS
MTH	TAN	R15
   XFB	2C	BAS
MTH	DTAN	R14 R15
   XFB	2D	BAS
MTH	TANH	R15
   XFB	2E	BAS
MTH	DTANH	R14 R15
   XFB	2F	BAS
MTH	ARCTAN2	R15
   XFC	09	BAS,BAS
MTH	DARCTAN2	R14 R15
   XFC	0A	BAS,BAS
MTH	ROUND2	R15
   XFC	0B	BAS,BAS
MTH	DROUND2	R14 R15
   XFC	0C	BAS,BAS
MTH	POWFF	R15
   XFC	0D	BAS,BAS
MTH	POWDD	R14 R15
   XFC	0E	BAS,BAS
MTH	POWFL	R15
   XFC	0F	BAS,BAS
MTH	POWDL	R14 R15
   XFC	10	BAS,BAS
MTH	POWLL	R15
   XFC	11	BAS,BAS
$jus
#numsubsect(2,Heap Operations)
$ver
HEA	NEW
   XFC	12	CON,BAS
   XFC	13	REG,BAS
HEA	DISPOSE
   XFB	30	BAS
HEA	EXTENTP	R15
   XFB	31	BAS
$jus
#numsubsect(2,Monitor Functions)
$ver
MON	SPY
   XFA	06
MON	STOP
   XFA	07
MON	TRACE
   XFA	08
MON	UNWIND
   XFD	09	AB1,AB2,BAS
MON	UNWINDMAIN
   XFC	14	AB1,AB2
MON	SIGNAL
   XFB	32	CON
   XFB	33	BAS
$jus
#numsubsect(2,Utility Operations)
$ver
UTL	MOVBLOCK
   XFD	0A	CON,BAS,BAS
   XFD	0B	BAS,BAS,BAS
   XFE	00	CON,BAS,AB1,AB2
   XFE	01	BAS,BAS,AB1,AB2
   XFE	02	CON,AB1,AB2,BAS
   XFE	03	BAS,AB1,AB2,BAS
   XFF	00	CON,AB1,AB2,AB1,AB2
   XFF	01	BAS,AB1,AB2,AB1,AB2
$jus
#numsubsect(2,String Operations)
$ver
STR	MOVSTR
   XFD	10	CON,BAS,BAS
   XFD	11	BAS,BAS,BAS
   XFE	15	CON,BAS,AB1,AB2
   XFE	16	BAS,BAS,AB1,AB2
   XFE	17	CON,AB1,AB2,BAS
   XFE	18	BAS,AB1,AB2,BAS
   XFF	0C	CON,AB1,AB2,AB1,AB2
   XFF	0D	BAS,AB1,AB2,AB1,AB2
STR	MOVPADSTR
   XFE	19	CON,BAS,CON,BAS
   XFE	1A	BAS,BAS,CON,BAS
   XFE	1B	CON,BAS,BAS,BAS
   XFE	1C	BAS,BAS,BAS,BAS
STR	MOVLOWER
   XFE	1D	CON,BAS,CON,BAS
   XFE	1E	BAS,BAS,CON,BAS
   XFE	1F	CON,BAS,BAS,BAS
   XFE	20	BAS,BAS,BAS,BAS
STR	MOVUPPER
   XFE	21	CON,BAS,CON,BAS
   XFE	22	BAS,BAS,CON,BAS
   XFE	23	CON,BAS,BAS,BAS
   XFE	24	BAS,BAS,BAS,BAS
STR	INDEXSTR	R15
   XFF	0E	BAS,CON,BAS,CON,BAS
   XFF	0F	BAS,BAS,BAS,CON,BAS
   XFF	10	BAS,CON,BAS,BAS,BAS
   XFF	11	BAS,BAS,BAS,BAS,BAS
STR	SEARCH	R15
   XFF	12	BAS,CON,BAS,CON,BAS
   XFF	13	BAS,BAS,BAS,CON,BAS
   XFF	14	BAS,CON,BAS,REG,BAS
   XFF	15	BAS,BAS,BAS,REG,BAS
STR	VERIFY	R15
   XFF	16	BAS,CON,BAS,CON,BAS
   XFF	17	BAS,BAS,BAS,CON,BAS
   XFF	18	BAS,CON,BAS,REG,BAS
   XFF	19	BAS,BAS,BAS,REG,BAS
STR	CMPSTR	N Z
   XFD	12	CON,BAS,BAS
   XFD	13	BAS,BAS,BAS
STR	CMPPADSTR	N Z
   XFE	25	CON,BAS,CON,BAS
   XFE	26	BAS,BAS,CON,BAS
   XFE	27	CON,BAS,BAS,BAS
   XFE	28	BAS,BAS,BAS,BAS
$jus
#numsubsect(2,Set Operations)
$ver
SET	BLENGTH	R15
   XFC	15	REG,CON
   XFC	16	BAS,CON
SET	CLRSET
   XFC	17	CON,BAS
   XFC	18	REG,BAS
   XFD	0C	CON,AB1,AB2
   XFD	0D	BAS,AB1,AB2
SET	MOVSET
   XFD	0E	CON,BAS,BAS
   XFD	0F	REG,BAS,BAS
   XFE	04	CON,BAS,AB1,AB2
   XFE	05	REG,BAS,AB1,AB2
   XFE	06	CON,AB1,AB2,BAS
   XFE	07	REG,AB1,AB2,BAS
   XFF	02	CON,AB1,AB2,AB1,AB2
   XFF	03	REG,AB1,AB2,AB1,AB2
SET	CLIP
   XFE	08	BAS,CON,CON,CON
SET	GENRANGE
   XFF	04	CON,CON,CON,CON,BAS
   XFF	05	REG,CON,CON,CON,BAS
   XFF	06	CON,REG,CON,CON,BAS
   XFF	07	REG,REG,CON,CON,BAS
   XFF	08	CON,CON,CON,REG,BAS
   XFF	09	REG,CON,CON,REG,BAS
   XFF	0A	CON,REG,CON,REG,BAS
   XFF	0B	REG,REG,CON,REG,BAS
SET	UNION
   XFC	19	CON,BAS
   XFC	1A	REG,BAS
SET	INTER
   XFC	1B	CON,BAS
   XFC	1C	REG,BAS
SET	DIFF
   XFC	1D	CON,BAS
   XFC	1E	REG,BAS
SET	SETBIT
   XFE	09	CON,CON,CON,BAS
   XFE	0A	BAS,CON,CON,BAS
   XFE	0B	CON,CON,REG,BAS
   XFE	0C	BAS,CON,REG,BAS
SET	CLRBIT
   XFE	0D	CON,CON,CON,BAS
   XFE	0E	BAS,CON,CON,BAS
   XFE	0F	CON,CON,REG,BAS
   XFE	10	BAS,CON,REG,BAS
SET	TSTBIT	Z
   XFE	11	CON,CON,CON,BAS
   XFE	12	BAS,CON,CON,BAS
   XFE	13	CON,CON,REG,BAS
   XFE	14	BAS,CON,REG,BAS
SET	CMPSET	N Z
   XFG	00	CON,CON,BAS,CON,CON,BAS
   XFG	01	CON,REG,BAS,CON,CON,BAS
   XFG	02	CON,CON,BAS,CON,REG,BAS
   XFG	03	CON,REG,BAS,CON,REG,BAS
$jus
#numsect(1,Runtime Errors)
#numsubsect(2,I/O Errors)
#numsubsect(2,Non-I/O Runtime Errors)
#pagsect(Appendix A:  I/O runtime interface)
#pagsect(Appendix B:  Non-I/O runtime interface)
#pagsect(References)
$ski $jus
$ind 9
$ver
$jus
$par -5
$ver
$jus
\1.\\Gorgen, D.\P.  "Specification of Pascal Virtual Machine Version 2",
2/17/81.
$par -5
\2.\\"MDSI Pascal Language Reference Manual".
    