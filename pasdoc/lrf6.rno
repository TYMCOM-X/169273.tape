$footnote left 'Declaration and Use of Names' ' ' ' ' ' '
$page $level 1 $section
 ^# ^DDECLARATION AND USE OF NAMES|D
$skip 3
$entry '^#	DECLARATION AND USE OF NAMES	\'
A name may refer to an item belonging to one of eight categories:
labels, constants, types, variables, subroutines (procedures or functions), conditions, 
fields of records, and formal parameters.
All  names are identifiers, except for label names
which are  unsigned integers.
$skip 3 $need 5 $level 2 $section
 ^# ^DDeclarations|D
$skip 2
$entry '^#		Declarations	\'
A declaration is used to associate an item with a name.
All names except parameters and field names are declared by specific statements
in the declaration part of a block.
$skip
$verbatim
$ind left +5
declaration-part ::=
   declaration [ ';' declaration ] ...

declaration ::=
   label-declaration\|\data-declaration\
   |\subroutine-declaration\|\exception-declaration

data-declaration ::=
   const-declaration\|\type-declaration\
   |\var-declaration
$justify
$ind left -5
$skip
Formal parameters are declared in the parameter list
of a subroutine declaration.
Field names are declared in the field list
of a record type declaration.
$skip
$need 4
A declaration is considered to be at the same level
 as the block in which it appears.
For example, a declaration  in the outermost block is at level 1.
The name of a subroutine is declared in the block enclosing the subroutine;
the names of parameters are declared within the subroutine block and
are therefore at a level one greater than that of the subroutine's name.
$skip 3 $need 5 $level 2 $section
 ^# ^DScope of Names|D
$skip 2
$entry '^#		Scope of Names	\'
Within a compilation, a name may refer to more than one item.
Block structure is used to delimit the scope of  declarations
in order to distinguish  different uses of a name. A name is known (i.e., its declaration applies) within the block in which it is declared
and within any inferior block
in which there is not a local declaration of the same name.
There may not be multiple declarations
of the same name in a single block.
$skip
The use of function names  is an exception to this  rule.
Within the body of a function,
the function name may refer either to 
the function itself
or to the function return value.
The name refers to the function when it is used in a context where a function
is expected:
(1) in a function reference, denoted syntactically by a
parameter list following the function identifier;
(2) as an actual parameter being passed to a formal function parameter,
or (3) as the right-hand side of an assignment to a function variable.
In all other cases, the name refers to the function return value.
$skip
Within its scope, a name may not be referenced before it is declared,
except in certain cases where a name is used as a type identifier.
A type name used in the declaration of an external constant,
an external variable, or an external subroutine
(as a parameter or result type)
need only be declared before the item is used in the program.
If the item is never used,
the type need not be declared at all.
A type name used as the target of a pointer type need only be
declared before any pointer having that target type is dereferenced
(i.e., before a variable pointed to by such a pointer is referenced)
or is passed in a call to NEW (see Section 12).
Pointers bound to undeclared type names may be used freely,
so long as they are not dereferenced or passed to NEW.
$skip
If a name is declared in both an inner block and an enclosing
block, and is used before it is declared in the inner block,
then the declaration from the enclosing block will apply.
$skip
Names are not automatically known in all the compilations composing a program.
For sharing to occur, a name must be declared as PUBLIC
in one module and as EXTERNAL in another.
A public or external designation may only be applied
to a constant, variable, condition,  or subroutine declaration at level 1.
The public declaration defines the actual item;
the external declaration is only a reference.
Thus, the body of a subroutine,
the value of a constant, or
an initial value for a variable
is only given with the public declaration.
The external declaration must be identical to the public declaration
in all other respects.
$skip
$need 4
The language defines a number of "predefined"
constants, types, procedures, and functions.
The names of these items are predeclared in a scope which effectively
encloses the entire compilation.
Thus, redeclaration of a predeclared name, anywhere within a compilation,
overrides the predefined declaration.
$need 6
$skip 3 $need 5 $level 2 $section
 ^# ^DLabel Declarations|D
$skip 2
$entry '^#		Label Declarations	\'
A label declaration introduces a numeric label which is to be used as the
target of a GOTO statement.
$skip
$ver
$ind left +5
label-declaration ::=
   LABEL label [ ',' label ] ...

label ::= unsigned-integer
$ind left -5
$jus
$skip
A label thus declared must be defined
by its appearance on a statement in the same block in which it is declared.
$skip 3 $need 5 $level 2 $section
 ^# ^DConstant Declarations|D
$skip 2
$entry '^#		Constant Declarations	\'
Constants are items whose values are defined at compile time and
cannot be modified by the executing program.
An identifier is declared as denoting a constant value in
a const declaration,
which specifies a type and/or value.
$skip
$ind left +5
$ver
const-declaration ::=
   [ PUBLIC\|\EXTERNAL ] CONST
   constant-definition [ ';' constant-definition ] ...
$skip
constant-definition ::=
   identifier ':' type 
   |\identifier [ ':' type ] { '='\|\':=' } constant
$ind left -5
$jus
$skip
A "local constant" is defined when neither PUBLIC nor EXTERNAL is specified.
A value must be specified for a local constant.
If a type is given, the value must be compatible with the type;
otherwise, the apparent type of the value is used.
A type is required when the value is a structured expression.
A local constant may be used as a synonym for its value.
$skip
$need 4
If PUBLIC is specified, the name is made accessible to other compilations.
Both a type and a value must be given in a public declaration.
$skip
An external constant declaration permits one module to reference a
public constant defined in another.
Only the type is specified.
Since the value of the constant is not known during compilation,
the name cannot be used where a constant value is required.
$need 6
$ind 0
$skip 3 $need 5 $level 2 $section
 ^# ^DVariable Declarations|D
$skip 2
$entry '^#		Variable Declarations	\'
A variable declaration consists of a list of identifiers denoting
the new variables, followed by their type
and an optional initial value.
$skip
$ind left +5
$ver
var-declaration ::=
   [ PUBLIC\|\EXTERNAL\|\STATIC ] VAR
        var-definition [ ';' var-definition ] ...
$skip
var-definition ::=
   identifier-list ':' type [ ':=' constant ]
$skip
identifier-list ::= identifier [ ',' identifier ] ...
$ind left -5
$jus
$skip
$need 4
A variable declaration may specify that the variables are STATIC.
A "nonstatic" variable is created whenever the block
in which it is declared is entered, and is destroyed when the block terminates.
A nonstatic variable in a recursive routine may have several distinct
versions in existence simultaneously.
Static variables exist throughout the program execution,
and can thus be used to preserve information
between calls to a subroutine.
Variables declared in the outermost block
of a compilation are always static;
variables local to a subroutine are normally nonstatic.
$skip
Only static and public variables
may be given initial values.
An initial value must be a constant which could be assigned to the variable.
The variable receives its initial value when the program is loaded.
$need 6
$skip 3 $need 5 $level 2 $section
 ^# ^DOther Declarations|D
$skip 2
$entry '^#		Other Declarations	\'
Subroutine declarations are described in Section 7.1.
Type declarations are described in Section 8.1.
Condition declarations are described in Section 13.1.
   