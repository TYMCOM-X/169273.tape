$margin 10 $width 75
$number 0 $number off $center $skip 4
&F I N D&
$skip 2
A Program to Select Lines from Text Files
$skip
Version 1.0
$skip 5
&Abstract&
$skip $just $ind left 15 $ind right 15
One common use of a text editor is to select lines
from an input file, and type them on the terminal or write them to a new file.
However, a text editor is not very well adapted for this task.
Find is a program whose sole function is to select lines from text files,
according to user-specified patterns.
The patterns are based on regular expressions, and are somewhat more general
than those which QED can search for.
The selected lines may be counted,
and they, their line numbers, or both may be listed on the terminal or
copied to a specified file.
Find can take commands from an indirect command file (an "@" file), so
it can easily be used to search for all occurrences of a pattern in
a collection of files.
Find is much more efficient than QED for simple line selection tasks.
$skip 5 $ind left 0 $ind right 0 $verb
Prepared by:   R. N. Faiman
Last Updated:  24 January 1980
$justify
$title 'FIND -- A Program to Select Lines from Text Files          Page \' left 'Version 1.0'
$page
1.\\\&Introduction&
$skip $para 5
One common programming task is finding all the lines in some file or collection
of files which match some pattern -- for example, all the lines which contain
the string "if more > less", or all the lines containing a word starting with
"non" or "un" or "in", or all the lines that start with a number and end with
a period or a semicolon.
Normally, such tasks are performed with a text editor (for example, QED).
However, a text editor has much more power than you need for a simple line
selection problem, and it may not be very convenient for such a problem.
For example, using QED, if you wanted to find all the lines in FILE1, FILE2,
and FILE3 that contained the word "gabble", followed somewhere in the same
line by one of the words "boggle" or "frizzle", you would have to use a
sequence of commands something like:
$skip $verb $ind +5
.R QED
*LOAD FILE1
*SET WILDCARD ON
*FIND /GABBLE*BOGGLE/ OR /GABBLE*FRIZZLE/ P
Confirm? NO
*LOAD FILE2
*SET WILDCARD ON
*FIND /GABBLE*BOGGLE/ OR /GABBLE*FRIZZLE/ P
Confirm? NO
*LOAD FILE3
*SET WILDCARD ON
*FIND /GABBLE*BOGGLE/ OR /GABBLE*FRIZZLE/ P
Confirm? NO
*QUIT
$ind -5 $skip $need 2 $just
Furthermore, because QED is a large program, and because of the way it processes
files, this process will be much more expensive than it really needs to be.
$skip $need 2 $para 5
Find is a program whose only function is selecting lines from files.
Therefore, it can perform this task more efficiently and effectively than
a general purpose editor like QED.
In particular, Find runs faster than QED, allows more general pattern
specifications, and can search a whole list of files as easily as it can
search a single file.
The same task described above would be programmed with Find as:
$skip $verb $ind +5
.R RND:FIND
*/FIND:"GABBLE".*("BOGGLE"|"FRIZZLE")
*FILE1
*FILE2
*FILE3
*/EXIT
$ind -5 $skip $need 4
2.\\\&Some Examples&
$skip 2 $need 4
3.\\\&Command Line Syntax&
$skip $para 5
Find will prompt for a command line with an asterisk.
It will accept three command line formats.
$skip $verb
(1)  [[<output file name>] '='] <input file name> [<switches>]

(2)  <switches>

(3)  '@' <indirect file name>

<switches> ::= '/' <switch> [ ('/' | ',') <switch> ]*
$skip $need 2 $para 5 $just
Format (1) tells Find to read lines from the specified input file,
processing them according to the current processing switch values.
$skip $need 2 $para 5
Format (2) does not cause any processing to take place.
It tells Find to replace the current processing switch values by any switch
values specified on the command line.
$skip $need 2 $para 5
Format (3) tells Find to read command lines from the specified <indirect file>.
If no extension is specified, Find tries an extension of ".CMD" first, and
an extension of ".CCL" if that fails.
$skip $need 2 $para 5
It is important to note that certain "immediate action" switches (discussed
in section 5, below) override any other effect of the command line they
are specified on.
When such a switch is specified, the distinction between a format (1) command
line and a format (2) command line is immaterial.
$skip 2 $need 4
4.\\\&Processing Switches&
$skip $para 5
When you tell Find to read an input file, the processing that it does is
controlled by a set of processing switches.
These processing switches all have default values.
If you don't want to use the default values, you can specify switches on
a processing command line, to temporarily override the defaults, or you
can specify switches on a command line with no input file name, to change
the default switch values.
$skip $need 2 $para 5
There are several kinds of switches.
Some take parameters, which you give after the switch name, separated from
it by a colon.
Some can be either on or off;
you turn them on by giving just the switch name, and off by preceding the
switch name with "NO".
Switch names may be abbreviated.
In the descriptions below, the minimum abbreviation of each switch name is
underlined.
$skip 2 $need 6 $verb
4.1  Input Line Selection

     /&F&IND:pattern
$skip $just $para 5
You control the selection of lines from the input file with the Find switch.
The parameter of this switch is the pattern which the program uses in deciding
whether to select each line.
The patterns you can specify are described in section 6.
The defualt value of this switch is /FIND:"",
which will select every line from an input file.
$skip 2 $need 6 $verb
4.2  Input File Format

     /[&NO&]&CON&TROL
$skip $just $para 5
You can use the CONTROL switch to tell Find whether it should pay attention
to control characters in the input file.
When CONTROL is true, any control characters in the input file
will be included in the line that Find tests against its current pattern.
NOCONTROL causes Find to ignore most control characters, and to replace tabs
by spaces.
(Notice that when CONTROL is true, the last character of each line will normally
be a carriage return.)\
The default case is NOCONTROL.
$skip $need 4 $verb
     /&REC&ORD:number
$skip $just $para 5
You use the RECORD switch to tell Find how long the longest line in the input
file may be.
Normally, Find allows for 256-character input lines, but if your file contains
lines longer than this, you can specify /RECORD:n to indicate that lines
from the input file may be up to n characters long.
If an input line is longer than the maximum record length, FIND will print
a warning message and process the line as though it was only as long as the
maximum record length.
$skip 2 $need 9 $verb
4.3  Output File Contents

     /[&NO&]&PR&INT
     /[&NO&]&NUM&BER
     /[&NO&]&COU&NT
     /[&NO&]&ID&ENTIFY
$skip $just $para 5
You use these switches to tell Find what information you want written to the
terminal or the output file.
PRINT tells Find to copy the text of each selected line.
NUMBER tells Find to print the line number of each selected line in a
six-column field.
If you specify both PRINT and NUMBER, then each output line will have
the line number of a selected line in the first six columns,
followed by two spaces and the text of the line.
IDENTIFY tells Find to precede the output for each file with a line containing
six asterisks, two spaces, and the full file name of the input file.
COUNT tells Find to follow the output for each file with a line containing
six asterisks, two spaces, and the number of lines from the file
that were actually selected.
The default output file content switches are PRINT, NONUMBER, NOIDENTIFY, and
NOCOUNT.
$skip 2 $need 8 $verb
4.4  File Control

     /&IN&PUT:filename
     /&OUT&PUT:filename
     <output file name> =
$skip $just $para 5
You can use the INPUT switch to tell Find to make assumptions about default
file name extensions and directories.
For example, "/INPUT:.PAS[,121]" tells Find that it should assume an extension
of ".PAS" and a directory of "[,121]" on all input file names where you don't
explicitly specify an extension and directory.
"/INPUT:" with no filename tells Find not to make any default assumptions;
this is the default case.
$skip $need 2 $para 5
The OUTPUT switch works with the output file name the same way the INPUT
switch works with the input file name.
 