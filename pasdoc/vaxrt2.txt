VAXRT2.TXT, last modified 10/24/83, zw

VAX Pascal Runtime Specifications

General Notes..
To aid in understanding the VAX PASCAL I/O interface,  the  reader  is
referred to four documents:  VAX PASCAL Notes -- I/O, dated
17 September 1979; Chapter 14 of the MDSI PASCAL Report; PASCAL-10 I/O
System  Design,  dated  17 September 1979; PASCAL I/O Runtime Support,
dated 13 May, 1979.  The remainder of the runtime (non-I/O  functions)
follows   from   Digital   Equipment   Corporation-supplied   VAX  (R)
documentation and from other existing documents  concerning  the  MDSI
PASCAL system.

To  preserve  VAX  and  VMS  runtime  conventions, we should adopt the
following standards as a minimum requirement for our  runtime  support
code.  All  PASCAL  library  global  and universal symbols shall begin
with the prefix  "PAX$".  Notice  that  FORTRAN  routines  start  with
"FOR$",  standard  library  routines  with  "LIB$", object time system
routines with "OTS$", etc.  It is reasonable to assume  that  the  DEC
PASCAL  uses  "PAS$", so we shall use "PAX$" to avoid symbol conflicts
with VMS  and  other  coexistent  software.  Furthermore,  to  prevent
conflicts  between  user  symbols  and  PASCAL  runtime  symbols,  all
underlying runtime universal symbols shall also contain a period,  for
example "PAX$TXT.READ" or "PAX$UTL.NEW".

All  PASCAL  runtime  routines  shall be pure and reentrant, to permit
sharing of the PASCAL runtime.  This implies that all  system  service
requests  should  use  the  "_S"  form  of the macro call (except when
arguments are constant  and  not  modified  by  the  system  service).
"Executable"  code  (a  routine  address)  may be placed in the impure
address space to optimize CPU time, as  long  as  doing  so  does  not
compromise purity, reentrancy, and restartability of the constant code
section.  For example, a file block  may  contain  the  address  of  a
subroutine to write out its buffer if this will speed up the I/O code.
Note that this particular example uses  more  time  at  initialization
time  to  determine  which  address to store, but speeds up subsequent
operations which do not need to examine device  characteristics.  Note
also  that  storing a routine address prevents dynamic (i.e., runtime)
relocation of library code, which is not the  same  as  sharable  code
relocated  to  different  base  virtual addresses for different users.
The VAX address  instructions  (MOVAL,  for  example)  permit  address
references without compromising position independence.  Finally, since
the hardware  may  provide  execute  protection  in  the  future,  any
instructions  located  in  the  data  space  must be able to guarantee
execution protection.  Note that VAX  does  not  permit  execution  of
writable  code  without  a  change  mode  or  REI  instruction between
modification and execution.  In the above example, since  file  blocks
are  allocated  on  the  system  heap,  no  protection  guarantees are
possible.  Storing  addresses  of  subroutines  in  the  data   space,
however, does not require execute protection.

Runtime  routines  shall take arguments from the stack using the CALLS
convention.  We shall not  be  limited  completely  to  the  full  VMS
standard  in the following aspect:  "source" arguments need not expand
into exactly one stack argument (i.e., runtime parameter  passing  may
be arbitrarily tricky).

Runtime  errors  shall  signal  conditions  using  the  VMS  condition
signalling system (LIB$SIGNAL etc.).  The PASCAL runtime will  include
a level one condition handler, installed by INITP. into the main stack
frame, which will recognize PASCAL-generated error messages  and  flag
them.  Other errors (RMS, for example) which are completely unexpected
will be resignalled to the system.  The PASCAL handler will print  the
message  "Runtime  error".  PASCAL-generated condition codes will have
the inhibit bit set,  to  prevent  the  system  traceback.  Note  that
trapping  control-c is somewhat difficult on the VAX, and must be done
with ASTs and such.  Control-y cannot be trapped at all; its status as
a  interrupt character can be revoked, however, by the system manager.
Input errors (such as hitting a break during an  input  wait)  can  be
fielded by a procedure condition handler which looks for the RMS error
code coming out of the runtime.  The terminal can be  reopened  and  a
non-local GOTO performed.

Storage..
Static  storage  for  PASCAL  programs  will be contained in the PSECT
PAX$STATIC, to which each module  may  contribute  by  a  PSECT  named
PAX$STATIC  with  the  CONCATENATE  attribute.  Notice that a sharable
library's static will  be  contiguous  within  the  library,  with  no
conflict with non-sharable modules' static.  Heap storage is allocated
by cover routines to the library functions LIB$GET_VM and LIB$FREE_VM.
NEW  (PAX$UTL.NEW)  will  install  a  length  word and zero the block;
DISPOSE  (PAX$UTL.DSPOS)  will  fetch  the  length   word   and   call
LIB$FREE_VM.  Since  MARK  and  RELEASE are not being implemented, the
I/O system may use heap storage for file blocks.

Reentrancy Considerations...
Executable images in VMS may share sections of code  and  data  called
sharable  libraries  in  the  VAX  documentation.  A sharable program,
therefore, is a single sharable code area and a  "copy  on  reference"
non-sharable  data  area (precisely analogous to high and low segments
respectively in TOPS-10).  The virtual addresses  of  both  areas  are
fixed  at link time; static storage may be addressed in any manner, as
long  as  the  code  is  not  self-modifying.  There  is,  however,  a
distinction  between  the  linking  of the sharable library and of the
executable image (although the  only  additional  information  in  the
image  is  the  starting address within the library).  The bulk of the
PASCAL support will be contained in the sharable  library  PAXRTL,  or
perhaps  incorporated  into  VMSRTL  at  a later date.  A few modules,
however, will be contained in the  searchable  (non-sharable)  library
PAXLIB, due to addressibility requirements to be discussed below.

An  executable  image  may consist of several sharable code areas.  If
the sharable code is position independent (PIC),  it  will  be  mapped
into  the  image's virtual memory as if it were linked in as a private
copy.  Otherwise, it will be mapped to  its  proper  virtual  address.
Static storage for a sharable library should be together with the code
for the library in contiguous virtual  memory,  so  that  PC  relative
addressing  may  be  used  to access copy on reference static storage.
The PAX$STATIC PSECT will do this within the linking of  the  sharable
library.  Memory  may  not  be  shared  across  sharable libraries, or
between sharable and non-sharable modules.

A  second  area  of  concern   about   sharable   libraries   involves
inter-library   addressing.   Given  a  linear  dependency  graph  (no
sharable modules both require the same sharable), the routines may  be
concatenated  to  form  a  sharable library which performs PC relative
addressing across libraries.  This  relationship  will  exist  between
PAXRTL  and  VMSRTL/RMS;  the  compiler  is  forbidden  to emit system
service requests inline, and any extralingual support  routines  using
VMSRTL  or  RMS  must either be incorporated into PAXRTL or explicitly
loaded by the  user  (preferred).  If  two  distinct  sharable  PASCAL
libraries  both  reference  a third sharable library (e.g., QEDLIB and
PUDMS both need PAXRTL), PC  relative  addressing  is  not  sufficient
(PASLIB  cannot  be  concatenated  to  both QEDLIB and PUDMS).  If the
runtime support for PASCAL includes these library routines, then there
is  no  issue,  since  all  linkages will be resolved.  We can provide
distinct sharable library files for various combinations of libraries;
QEDPUD contains QED and PUDMS, along with PAXRTL and therefore VMSRTL,
while QEDLIB contains QED, PAXRTL, and VMSRTL.  Note that  PAXRTL  and
VMSRTL  are  truly  shared even in these cases, while the existence of
the multiple libraries represents a minor  waste  of  space.  Sharable
libraries  written  in PASCAL must have an explicit transfer vector at
the start of their code.  This can be done quite easily  using  macros
available with the runtime.

Program  initialization  will  be  performed  by  PAX$MON.INITP, whose
address  will  be  contributed  from  PASLIB  to  LIB$INITIALIZE.   By
convention,  the  first  entry in a sharable library's transfer vector
will be its initialization entry point.  Sharable libraries should use
a   contribution  PSECT  mechanism  to  set  up  their  initialization
routines, if they contain non-zero static storage; nothing  should  be
assumed   about   the  contents  of  "copy  on  reference"  memory  if
restartability is to be maintained.  As an example,  PAXRTL  will  use
the  PSECT PAX$INITIALIZE, to which each PAXRTL module may contribute.
Notice that  there  is  no  initialization  routine  called  from  the
mainline  prologue,  as  in  the  PDP-10  implementation;  the program
starting  address  distinguishes  the  program  block.  The   transfer
address  for  the program block should point to the entry mask for the
main block; the compiler will define the symbol  PAX$PROGRAM. as  this
value  also,  to  prevent multiple program blocks in the same program.
We are not precluded, however, from calling a program as  a  procedure
(by defining a symbol other than PAX$PROGRAM. for the subordinate), if
the program is self-initializing.

Interface to VAX RMS...
As discussed in PASCAL Implementation Notes, the VAX RMS can  be  used
for typed I/O in a straightforward manner.  Binary I/O will require an
underlying buffering mechanism but presents  no  major  implementation
issue.  However, reconciling the PASCAL file model for text files with
the RMS model is a definite problem area.

The PASCAL file model consists of a character stream, from  which  one
character  at  a  time is available, strewn with punctuation marks for
end of line, end of page, and end of file.  The RMS model is that of a
varying  length  record  file, each record of which is a line of text.
All RMS text file operations  occur  in  (varying  length)  quanta  of
lines, creating the following implementation issues:

1. Since  there  are no explicit line terminators, the ASCII option
   does not affect the contents of F^ when EOLN is true.

2. The IMAGE option will require a completely different file  block
   organization,  since  8-bit terminal operations are not possible
   using RMS.  To provide 8-bit operations, we must interface  with
   VMS directly using the QIO system directives, which will require
   completely different data structures in PASCAL file blocks.

3. Page marks on the VAX consist of a single record containing  one
   character,  form  feed  (FF).  If the file is line numbered, the
   number for that record is -1.  On input, we must read ahead  one
   record  to  determine  if  EOLN  is also EOPAGE.  VAX views page
   marks as being attached to the first line of the  new  page  (as
   well  as being a separate record).  PASCAL considers a page mark
   as an attribute of the line preceding it.

Number one above is not truly an issue but  rather  a  fact  of  life.
Whether  line  termination  characters from the terminal are available
through RMS is not clear at this time, but I do not feel that  such  a
requirement justifies the immediate scrapping of RMS for terminals.

Concerning  issue  two  above,  I  favor  an initial implementation of
terminal I/O using RMS, with subsequent conversion to QIOs.  This will
take  care  of the IMAGE issue.  Finally, if EOPAGE is never permitted
to be true for interactive input, then we never  have  to  read  ahead
from the terminal to look for a page mark for each line.  EOPAGE could
be made to work correctly for terminals using QIOs.

The following mechanism for text file output will be used:

1. Text file blocks will contain a 255 byte  buffer  through  which
   all RMS operations will be performed.  The component pointer can
   be incremented during a sequence of character operations; a  tab
   in  the  line will be replaced by a blank, with a status bit set
   to defer pointer incrementing  until  CURSOR  mod  8  equals  1.
   Control  characters  can  be skipped if ASCII was not specified.
   An implicit writeln will be performed every 255 characters.

2. BREAK will work in the following  manner.  BREAK  on  typed  and
   binary files will simply flush all PASCAL and RMS buffers out to
   disk.  BREAK on text disk  files  will  be  a  no-op.  BREAK  on
   TTYOUTPUT will cause the current partial line to be output, with
   an explicit leading line feed and no implicit carriage  control.
   A  static  flag  will be set (reset by writeln), so that further
   BREAKs and writelns will not use any initial  carriage  control.
   Where TTYOUTPUT has been opened with CONTROL, these same effects
   will  be  achieved  with  specially  inserted  FORTRAN  carriage
   control characters.

File Variable Initialization Entry Points...
All  file  variable  initialization routines take three parameters, as
specified below:

     file name string pointer (length word)
     options word
     component size (optional)

The component size  need  be  specified  only  for  typed  files.  The
options  longword contains the six user-specifiable option bits as its
low order six bits (ASCII, IMAGE, CONTROL, PRESERVE,  SEEKOK,  RETRY),
and contains other information in its higher-order bits:

6- set   if   file   name  is  an  internal  file  name,  clear  if
   user-specified.

7- set if file is packed, clear otherwise.

8- set if file is typed file, clear otherwise.

9- set if file is binary file, clear otherwise.  If both bits 8 and
   9 are clear, the file is a text file.

A- set if file is to be opened for output, clear otherwise.

B- set if file is to be opened for input, clear otherwise.

C- set if file is TTY

D- set if file is TTYOUTPUT

This  options  word  is  placed  in  the  file  block to verify future
operations.

Five initialization entry points are provided.  PAX$FVM.RESET performs
the  RESET  function  on a text file as an indivisible operation (OPEN
and GET).  PAX$FVM.OPEN performs the OPEN function  on  a  text  file.
PAX$FVM.REWRT   performs   the   REWRITE  function  on  a  text  file.
PAX$FVM.INITYP initializes a typed file, and PAX$FVM.INIBIN  a  binary
file.  Notice  that  for  text files, some of the bits specified above
are redundant, but since they are all constant,  the  compiler  should
have  no  problem  emitting  them.  Each  initialization  returns  the
address of the new file block in R0.

PASCAL file  blocks  will  contain  (at  a  minimum):  PASCAL  control
information, an RMS FAB, RAB, and a component buffer.  For text files,
a line buffer is needed for RMS operations.  The buffer should be  256
bytes  long,  one more than the maximum line length permitted, for the
following reason:  the extra byte will contain a  blank  so  that  the
component  pointer  can  be  pointed  there when EOLN is true, and the
remainder of the line buffer can be used for the necessary  read-ahead
to  determine EOPAGE.  In addition, the buffer will be preceded with a
byte containing either a line feed  character  or  a  FORTRAN  control
character  (the  latter  if  the file is open with CONTROL specified),
which will be output in partial lines caused by BREAK to the terminal,
as  appropriate.  For  non-text  files,  the XABFHC extended attribute
block must also be included, so that EXTENT  can  be  determined.  For
binary files, some number of 512 byte buffers are needed for block I/O
through RMS.  Finally, the files  PAX$INPUT  and  PAX$OUTPUT  must  be
recognized  as  the  job's  controlling  terminal,  and  multiple OPEN
operations must be directed to the same file block, as per the Report.

The PASCAL control information is as follows:

     0      component pointer      PFB$A_COMPTR        L
     4      fore pointer           PFB$A_FBQUEF        L
     8      back pointer           PFB$A_FBQUEB        L
     C      cursor                 PFB$L_CURSOR        L
     10     buffer pointer         PFB$A_BUFPTR        L
     14     filename string descr  PFB$Q_FNMDSC        Q
     1C     current line number    PFB$W_LINENR        W
     1E     status bits            PFB$W_STATUS        W
     20     error condition        PFB$W_ERRORS        W
     22     EOF, EOLN, EOPAGE,     PFB$B_EOFWRD        B
            and other dynamic status
     23     EOF countdown          PFB$B_EOFCNT        B

Three file termination operations are provided.  PAX$FVM.CLOSA  closes
all   open  files,  and  is  implicitly  called  upon  normal  program
termination.   PAX$FVM.CLOSE   performs   a   normal   close,    while
PAX$FVM.CLOSD  implements the SCRATCH function.  The last two take the
address of the file block to disassociate as a single parameter.

Upon closing a file, the file block is  returned  to  the  system  via
PAX$UTL.DSPOS.  Before  doing  so,  the file block is removed from the
file block chain.

Text Formatting Operations...
The general text formatting operations are similar in  spirit  to  the
entry   points  defined  in  the  PDP-10  PASCAL  implementation.  Six
routines are provided, one for each of  read,  write,  and  getstring,
with  a fixed string and a varying string putstring, and a termination
call for a  fixed  string  putstring.  Each  routine  takes  the  same
initial  parameters  to  describe  the item currently being processed.
The last parameter describes the target of the operation, as  follows.
The   text   file  operations  read  (entry  PAX$TXT.READ)  and  write
(PAX$TXT.WRITE) will have a longword pointing to the  file  variable's
file  block  as  last parameter.  Getstring (PAX$TXT.GSTR) will have a
pointer to an 8-byte block holding a longword  pointer  to  the  first
byte of the target, and a countdownword initialized to the string
or substring's length.  A fixed length putstring (PAX$TXT.PSTF) has  a
pointer  to  a  block  holding  a  longword  character  pointer  and a
countdown longword initialized to the length of the target.  A varying
length  putstring  (PAX$TXT.PSTV)  has  a pointer to a block holding a
longword pointer to the length word of the string, and a longword cell
initialized  to  the declared maximum length of the string.  Note that
the varying string must be initialized to the  null  string.  Finally,
done  with fixed length putstring (PAX$TXT.PSTD) takes the same target
parameter  as  PAX$TXT.PSTF.  The  8-byte  blocks  will  be  temporary
storage allocated by the compiler.

The  first item-specific parameter to each of these routines will be a
longword whose low order word is the first  numeric  argument  to  the
routine,  and whose high order word is a bit mask defining the type of
the item, along  with  processing  options.  Unless  otherwise  stated
below,  this  numeric  argument  will  be  the  field  width  for  the
operation, or zero if no width was  specified.  Since  these  routines
can  take  a  variable  number  of  parameters,  the  parameter  count
installed by the  CALLS  instruction  is  used  to  locate  both  this
argument  and  target  arguments.  The low order three bits (<0:2>) of
the mask define the item type; five item types are defined:

0- integer.  For read or getstring,  the  second  argument  is  the
   longword  address  of  a longword variable in which to place the
   integer value read (if any).  For write or putstring, the second
   argument  is the integer value to write, extended to longword if
   necessary.  An optional third argument, whose  presence  can  be
   detected by bit A in the mask being set, is the address of a two
   longword block giving the lower and upper bounds,  respectively,
   of  the integer subrange.  Bit A being set causes the runtime to
   perform a subrange check during a read or getstring, setting the
   I/O  error  IO_NOVF  (numeric  overflow)  if  the  value read is
   outside the specified subrange (it will not be  stored  in  this
   case).

1- single  precision  real.  For  read  or  getstring,  the  second
   argument is the longword address of a floating datum in which to
   place  the  value  read.  For  write  or  putstring,  the second
   argument is the  floating  value  to  be  converted.  The  first
   numeric  argument  is  the  precision  of the variable (possibly
   modified by a formatting argument).  An optional third  argument
   is  a  longword  value giving the field width for the operation.
   Notice that the precision  argument  is  actually  a  fractional
   field  width  specification  when "F" format is specified by the
   program.  An optional fourth argument,  whose  presence  can  be
   detected by bit A in the mask being set, is the address of a two
   longword block giving the lower and upper bounds,  respectively,
   of  the  real subrange.  The use of this block is similar to the
   action described for integers.

2- double precision real.  For all operations, the second  argument
   is  the  address of a double floating argument to read or write.
   The subrange block, if present, consists of two double  floating
   constants.  The  other  arguments,  including  the first numeric
   argument, are the same as for floating operations.

3- string variable.  This datum type is used only for  input  (read
   and  getstring).  The  second  argument  is  the  address of the
   string variable.  The third argument gives the declared  maximum
   length of the string variable as a longword value.

4- fixed length string variable, or substring.  The second argument
   is the address of the first character of the string.  The  third
   argument  gives  the  length  of  the fixed string or substring.
   Notice that character variables may be  read  or  written  as  a
   fixed length string of length 1.

5- boolean.  This  datum  type  is  used only for output (write and
   putstring).  The second argument is  a  longword  value  of  the
   boolean variable to write.

The remaining bits in the mask are assigned as follows:

3- set  to request left justification within field width.  Clear to
   request right justification.

4- set to indicate  that  a  field  width  was  specified  for  the
   operation,  and  its  value  is  in  the  low  order word of the
   longword parameter.  Clear to indicate free-format operation.

5- set to indicate octal mode for integer operations.

6- set to indicate hexadecimal  mode  for  integer  operations.  If
   both bits 5 and 6 are clear, the operation is in decimal mode.

7- set  to  indicate  that  a  field width was specified for a real
   output operation.

8- forms the low order bit of a two bit integer  (0..3)  specifying
   real  output format.  Zero indicates G, or default, format.  The
   precision is  specified  by  the  first  numeric  argument.  One
   indicates  E format, such as "x:12".  The precision is not used,
   and the third argument gives the  user  specified  field  width.
   Two  indicates F format, such as "x:12:4".  The fractional field
   width  replaces  the  precision  specification,  and  the  third
   argument   gives  the  field  width.  Finally,  three  indicates
   explicit  E  format,  such  as  "x:12:4:E".  The  first  numeric
   argument  gives the explicit precision, while the third argument
   gives the field width.

A- set to indicate the presence of explicit subrange limits on  the
   call.  As  mentioned  specifically under integer and real above,
   the address of a block containing  the  lower  and  upper  bound
   respectively of the subrange is provided on the call.

This  section  of the runtime will be implemented by pairs of consumer
and producer coroutines, as explained  in  I/O  System  Design.  There
will  be  two  file coroutines, a producer for read and a consumer for
write.  String  producer  and  consumer  routines  are  provided   for
getstring  and putstring respectively.  Item output will be simplified
considerably by a combination of the FAO$ system directive  (Formatted
Ascii Output) and the FORTRAN runtime library.  All datum types may be
converted to string before output, and thus  only  one  item  producer
coroutine  (for  strings)  is  needed.  Since input must be prescanned
before FORTRAN can be called, however, the  item  consumer  coroutines
must be a bit more complex.

The  coroutines  will  use  the  stack  for linkage, and registers for
communication and local computations.  Register R8  will  contain  the
current  character being transferred; registers R5, R6, and R7 are for
the exclusive use of consumers, while registers R2, R3, and R3 are for
producers.  Additionally,  the  adjacent  registers  R9  and  R10  are
available for item coroutines (either producers or consumers), usually
for  arithmetic processing of double real quantities.  Finally, R0 and
R1 are up for grabs at any time.

The stack will be set up like this:

        |---------------------------|
        | return addr to cover rtn. |
        |---------------------------|
        | producer epilogue address |
        |---------------------------|
        | consumer epilogue address |
        |---------------------------|
        | coroutine linkage word    |
        |---------------------------|  <---  (sp)

Each coroutine should have a prologue with which it  may  set  up  its
registers  but not modify any lasting state information.  The order of
execution:  producer prologue, consumer prologue, producer  character,
consumer  request,  . . ., consumer epilogue, producer epilogue.  When
either producer or consumer decides to end the operation, it pops  the
linkage  word  and  executes  an  RSB  to  work  its way down the exit
sequence.  The "exit" routines should perform any  clean-up  necessary
and  then also execute an RSB.  The cover routine executes a RET to go
back to the inline code.  An interesting wrinkle in the  above  scheme
is  for  free-format  numeric  reads,  which  will require the numeric
consumers to go past EOLN.  Normally, the file  producer  would  start
the exit sequence on EOLN, so the file producer will use the following
protocol:  if upon entry to its first character request, if R1 is  -1,
it  will  skip all white space (including intervening line boundaries)
until EOF or a  non-blank  character,  returning  it  with  its  first
co-call.

Binary and Typed File Operations...
Only three data transfer operations are defined for binary files.  All
three have the file block address  as  a  final  target  parameter.  A
binary   read   is   performed   by  PAX$NTX.RDBIN,  and  a  write  by
PAX$NTX.WRBIN, which each take two item parameters -- the  address  of
the  datum  to  read  or  write,  and the size of the datum.  The SEEK
operation is performed by PAX$NTX.SEEK, which takes as a  single  item
parameter the CURSOR value to seek.

As  mentioned elsewhere, binary I/O will require a buffering mechanism
similar to that provided by TENIO on the PDP-10.  By  maintaining  the
block number of the disk block currently buffered, and its clean/dirty
status, disk block transfers can be minimized.  The number of  buffers
can be specified by a cell on page one, or perhaps as a special option
to the RESET or UPDATE call.  For records shorter than  a  disk  block
(512 bytes), two buffers will give nearly optimal performance.

Read  and  write  for  typed files are defined in terms of GET and PUT
according to the language standard.  GET  and  PUT  are  performed  by
PAX$NTX.GET  and  PAX$NTX.PUT  respectively, which take the file block
address as a single parameter.  SEEK uses the  same  entry  point  for
both  binary  and  typed  files,  and performs no transfers except for
typed input-allowed files.  PAX$NTX.GET may be called by  PAX$NTX.SEEK
in this case.

For  typed files, the file component accessible to the user through F^
can be used directly  as  the  RMS  buffer.  The  RMS  $GET  and  $PUT
services  can  be  used  simply.  The UIF (update if) option should be
specified on the initialization to avoid the use (and extra hassle) of
$UPDATE.  Notice  that  an  explicit  $EXTEND  will be needed to write
records beyond the current EXTENT + 1; if the  file  was  opened  with
UPDATE, this must be done before the $GET.

For  both  typed  and binary files, the EXTENT function is provided by
PAX$NTX.EXTENT.  Since RMS  does  not  maintain  the  relative  record
number  of the last record in the file (EXTENT), we must obtain it for
typed files through the extended attribute block  XABFHC.  Also,  this
is  the  only  way  we  can determine EXTENT for binary files.  EXTENT
takes a single parameter giving the address of  the  file  block;  the
function value is returned in R0.

Miscellaneous Functions...
For  text  files,  PAX$TXT.RDLN  implements the readln function, while
PAX$TXT.WRLN implements the writeln  operation.  These  two  take  the
file  block  address as a parameter.  Finally, PAX$TXT.PAGE implements
the  PAGE  operation,  PAX$TXT.GETCH  implements  the  textfile   GET,
PAX$TXT.PUTCH   implements   the   textfile   PUT,  and  PAX$TXT.CLEAR
implements CLEAR.  All these also take the file  block  address  as  a
single parameter.

FILENAME is implemented as PAX$FIO.FNAME, taking two parameters -- the
address of the file block, and the address of a varying length  string
to  contain the result.  BREAK is implemented as PAX$FIO.BREAK, taking
the address of  the  file  block  as  a  single  parameter.  EMPTY  is
implemented   as   PAX$FIO.EMPTY,  with  the  file  block  address  as
parameter.  Error conditions are returned by PAX$FIO.STATF,  taking  a
file  block  address  as  parameter,  and  by  PAX$FIO.STATL  (without
parameter)  and  PAX$FIO.EXTST  (for  extended  status).   All   error
routines return the error codes in R0.
   mh`D