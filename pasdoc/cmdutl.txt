


     Command Utility Subroutines
     September 3, 1977
     Page 1

     Purpose$skip This document describes various utility subroutines which
     are of general use in constructing command processors.


     Summary of Features$skip
     LOOKUP    searches a list of command or option names for a token which
               is extracted from an input line.

     OPEN_FILE opens a text file for input or output.  For an output  file,
               append mode and old/new file prompting may be selected.  For
               both, a default extension may be supplied.

     PATHNAME  returns the full title (including device and  directory)  of
               an open text file.

     PR_FILE_ID
               scans  an  input  line  and  extracts a file title in system
               dependent format.

     QUERY     ask a question and waits for a yes or no response.

     IORESET   flushes terminal input and output.

     IRESET    flushes terminal input.


     Data Types$skip Modules performing parsing  functions  are  passed  an
     input  line  and index.  The index denotes the point at which to begin
     the  parse  and  is  typically  advanced  past  the  item  parsed,  if
     successful,  or is left pointing to the position at which an error was
     detected.  The types are as follows:

          CONST CMDLINELEN = 254;
          TYPE  CMDLINE = STRING [CMDLINELEN];
                CMDLINEIDX = 0..CMDLINEIDX+1;

     The length chosen yields an efficient representation for the index  on
     all  interesting  machines.  However,  calling  programs should not be
     written to rely on the specific value.

     Modules dealing with file names use the type,  FILE_ID,  to  hold  the
     name.  While  the  format  is  system  dependent,  the  type is always
     realized in terms of a varying string (of appropriate  length).  Thus,
     a  file_id  value is printable, and a literal string giving a specific
     filename may be used.


     Using these Modules$skip The documentation of each module  contains  a
     list  of  the  include  files needed to call the routine.  These files
     contain type declarations of the parameters and  declarations  of  the
     entry  points  as  external  procedures and functions.  They are to be
     used to insure consistency  and  to  aid  in  identifying  referencing
     modules in cases changes are required.









     Command Utility Subroutines
     September 3, 1977
     Page 2

     The include files may be found in the Tools Library, [2250,220].  This
     directory should not be mentioned  explicitly  in  program  text,  but
     should be set up as a search directory before compiling the program.

     The  relocatable  object  modules  for  these  routines  are kept in a
     LINK-10 library file, CMDUTL, in the same directory.
























































     Command Utility Subroutines
     September 3, 1977
     Page 3

     Module:  LOOKUP

     This function extracts the next token from an input line, and looks it
     up in a list of names.  Returns the index of the name, if found.


     Data  Structures$skip  The name list consists of an array of names and
     minimum abbreviation lengths.  The format is as follows:

          CMDLIST =
            RECORD
              NAME: PACKED ARRAY[1..10] OF CHAR;
              ABBREV: 1..10
            END;

          scalar_LIST = ARRAY [scalar] OF CMDLIST;


     Usage:

          EXTERNAL FUNCTION LOOKUP_scalar
                      (  LINE: CMDLINE;
                         VAR IDX: CMDLINEIDX;
                         VAR LIST: scalar_LIST;
                         MAXscalar: scalar;
                         VAR NAMEIDX: scalar     ): BOOLEAN;

     Input Arguments:

       LINE      is the input from which the name token is to be extracted.

       IDX       is the parsing cursor.  LOOKUP scans  from  this  position
                 for the token.

       LIST      is the name list to be searched.

       MAXscalar is  the upper bound of the LIST array.  The value "MAXIMUM
                 (scalar)" should be passed.

     Output Arguments:

       IDX       is set to the character following the end of the token, if
                 found in the list.  If the token is not found in the list,
                 this is set to the start of the  token.  If  there  is  no
                 token  on  the line, this is left pointing past the end of
                 the line.

       NAMEIDX   is the scalar associated with the token.  Set if the token
                 is found in the list.













     Command Utility Subroutines
     September 3, 1977
     Page 4

       <return value>
                 is true if a token appears in the line and is found in the
                 list; false otherwise.

     Algorithm:

       A token consists of any  number  of  alphanumeric  characters  or  a
       single  punctuation character.  A match for the token in the list is
       found if:  (1) the token is not longer than the  command  name,  (2)
       the  token is not shorter than the minimum abbreviation of the name,
       and (3) the token and name match to the length of the  token.  Upper
       and lowercase are viewed as equivalent.

     Notes:

       To  use  this  routine  with  lists associated with different scalar
       types, it is necessary to have one  set  of  declarations  for  each
       scalar  type.  The  template  above  is  followed,  substituting the
       actual name of the scalar type for "scalar".  The linker  links  all
       LOOKUP_scalar  references  to  the common LOOKUP routine.  This is a
       KLUDGE to be fixed when PASCAL allows.


     Include Files Required$skip
     CMDUTL.TYP
     LOOKUP.TYP contains only a  declaration  for  the  type  CMDLIST.  The
                scalar_LIST  and  entry  declaration  should be provided by
                each application.


































     Command Utility Subroutines
     September 3, 1977
     Page 5

     Module:  OPEN_FILE

     This subroutine opens a text file for input or  output.  The  mode  is
     specified  by  the  caller.  For  an  output  file,  the user may also
     request append mode and old/new file prompting.


     Usage:

          EXTERNAL FUNCTION OPEN_FILE
                      (  VAR F: TEXT;
                         FID: FILE_ID;
                         EXT: EXTENSION;
                         MODE: IO_MODE;
                         OPTIONS: IO_OPTION_SET  ): BOOLEAN;

     Input Arguments:

       F         is the text file to be opened.

       FID       is system dependent file_id string giving the title of the
                 file  or  device  to  be  opened.  It  is  assumed  to  be
                 correctly formatted.  If not, the results are undefined.

       EXT       is a string giving the  default  extension  for  the  file
                 name.  Used only on systems where this is meaningful.

       MODE      may be either INPUT_MODE or OUTPUT_MODE.

       OPTIONS   is a set including zero or more of the following:

                 APPEND_MODE - valid only with output mode, this causes the
                   output to be appended to the end of  an  existing  file.
                   If  the  file  does  not already exist, then this has no
                   effect.

                 CONFIRM_OPEN - valid only with output  mode,  this  causes
                   old/new file prompting.  If selected, it is assumed that
                   the files TTY and TTYOUTPUT have been opened.

     Output Arguments:

       <return value>
                 is true if the open is successful; false,  otherwise.  The
                 open  may  fail  if  options  incompatible  with  the mode
                 selected are used, the file is not found (input),  or  the
                 open is not confirmed (output).


     Include Files Required$skip CMDUTL.TYP
     FILUTL.INC











     Command Utility Subroutines
     September 3, 1977
     Page 6

     Module:  PR_FILE_ID

     This extracts a file title from an input string, and returns a file_id
     string  containing  the  text  of  the  title.  Use  of  this  routine
     localizes knowledge of the system dependent format of a file title.


     Usage:

          EXTERNAL FUNCTION PR_FILE_ID
                      (  LINE: CMDLINE;
                         VAR IDX: CMDLINEIDX;
                         VAR FID: FILE_ID      ): BOOLEAN;

     Input Arguments:

       LINE      is the line to be scanned.

       IDX       is  the parsing cursor.  It is assumed that this points to
                 the first character of the title.  Leading white space  is
                 not ignored.

     Output Arguments:

       IDX       is  set  to  the  first character past the end of the file
                 title  if  a  valid  title  is  found.  If  the  title  is
                 incorrectly formed, this is left pointing to the character
                 that is in error.

       FID       is set to the text of the  title,  if  a  valid  title  is
                 found; otherwise, it is left unchanged.

       <return value>
                 is  true  if  a  complete  and well-formed title is found;
                 false otherwise.


     Include Files Required$skip CMDUTL.TYP
     FILUTL.INC























     Command Utility Subroutines
     September 3, 1977
     Page 7

     Module:  PATHNAME

     This function returns the full title of an open text  file.  That  is,
     the name includes such information as device and actual directory.  It
     is useful in determining  the  file  found  when  there  is  directory
     searching in effect.


     Usage:

          EXTERNAL FUNCTION PATHNAME ( VAR F:  TEXT ):  FILE_ID;

     Input Arguments:

       F         is the file whose pathname is to be determined.

     Output Arguments:

       <return value>
                 is the full title of the file.


     Include Files Required$skip CMDUTL.TYP
     FILUTL.INC






































     Command Utility Subroutines
     September 3, 1977
     Page 8

     Module:  QUERY

     This  is  a utility to ask a caller supplied question, and fetch a yes
     or no reply.  YES, Y, NO, N, or <eoln>, meaning yes, are  accepted  as
     valid  replies.  Also,  REPEAT  is accepted as a request to repeat the
     question in case it is garbled.


     Usage:

          RESULT := QUERY ('QUESTION');

     Input Arguments:

       QUESTION  is a string (literal or variable) giving the  question  to
                 be  asked.  This  routine  appends a question mark and two
                 blanks to the end of this string.

     Output Arguments:

       RESULT    is a boolean value.  It is true if an affirmative response
                 is given; false if a negative response is given.

     Requirements:

       It  is  assumed  that  the  files TTY and TTYOUTPUT have been opened
       before this routine is called.

     Algorithm:

       This routine displays the question and waits for a response.  If  an
       invalid response is received, another is requested and processed.


     Include Files Required$skip QUERY.INC



























     Command Utility Subroutines
     September 3, 1977
     Page 9

     Module:  IORESET

     This  flushes  terminal input and output.  Useful for stopping ongoing
     output and discarded characters read ahead after an escape  signal  is
     received.

          EXTERNAL PROCEDURE IORESET;


     Entry:  IRESET

     This  flushes  terminal  input.  Useful for discarding characters read
     ahead after an error has been detected.

          EXTERNAL PROCEDURE IRESET;


     Include Files Required$skip IORESE.INC










































  