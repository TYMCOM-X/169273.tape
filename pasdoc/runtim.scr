$num off
$cen
PASCAL-11 RUNTIME I/O
$ski2
$jus
S.\M.\Roush
$par
12/14/78
$ski2
INTRODUCTION
$ski
$title left 'PASCAL-11 RUNTIME I/O' left 'December 20, 1978' left 'Page \'
The following is a description of the PASCAL-11 runtime
I/O system.
This document assumes the reader has read those sections
of the PASCAL-11 User Manual dealing with I/O.
$ski
$ind left5
$par-5
I.\\\REGISTER DEFINITIONS
$ver

MP = R4      AR = R0
SS = R5       R = R1
HP = R6      AD = R2
GP = R3

$jus
$par-5
II.\\OVERALL CONVENTIONS
$ski
All runtime routines are called via:
$par+5
$ski
'JSR\MP,\X\(PC)'
$ski
All routines return via:\\'RTS\MP'
$ski
PASCAL-11 uses two stacks, the 'hardware stack' and the
'software stack'.
The hardware stack is pointed at by register\'HP' and is used
by PDP-11 instructions JSR and RTS for return address
saving/restoring.
The software stack is pointed at by register 'SS' and is
the 'PASCAL' stack.
It is used for PASCAL procedure and function stack frames
and for passing parameters to runtime routines.
$ski
Runtime routine parameters are pushed onto the software
stack before the call to the routine.
The routine must pop the parameters from the stack before
returning.
Return values are generally pushed onto the stack before the
return.
$ski
Registers AR, R and AD may be used by runtime routines
without saving/restoring them.
$ski
THE FILE WINDOW
$ski
Each file has associated with it a data structure
known as a file window.
Figure\one is a diagram of a file window.
The offsets given are from the location pointed at by the
'File Window Pointer'.
A file window contains the following fields:
$ver
$ski
$page
OFFSET               DESCRIPTION
$ski
$tabs 5,20
	+2	Buffer count. For input TEXT files this
		is the number of bytes remaining in the
		buffer, i.e., bytes logically not yet read.
		For output TEXT files it is the number of
		bytes free in the (132\byte) buffer.
		Characters in the buffer have been logically,
		but not physically, written.
$need3

	0	Buffer pointer. For output TEXT files the
		next free byte in the buffer.  For input
		TEXT files the next byte to be logically
		read.  For non-TEXT files the buffer address.

	-2	FILTYP - file description bits:
$ver

                        BIT         DEFINITION

$tabs 25, 40
	1	random I/O
	2	UPDATE MODE
	4	APPEND MODE
	10	TEMPORARY FILE
	20	INSERT MODE
	40	SHARED MODE
	100	SPOOL FILE ON CLOSE
	200	BLOCK I/O
	20000	FILE IS TTY
	40000	TEXT FILE
	100000	INPUT FILE
.
$TABS 3,25

	-4	IORESULT - integer giving status of last
		I/O operation.

	-6	EOF status - 0 if at EOF, otherwise
		non-zero.

	-8.	EOLN status - 0 if at EOLN, otherwise
		non-zero.

	-104.	RSX file descriptor block unless the file
		is TTY or TTYOUTPUT.  I/O to TTY or
		TTYOUTPUT is done via the QIO system
		call. All other I/O is done via
		GET$ and PUT$ system calls.   
		For TTY files the 132 byte
		buffer preceeds (address wise) the EOLN
		status word.
$ski
$jus
TEXT FILES
$ski
The term "TEXT file" is used to refer to any file
whose element type is &character compatible&.
A type is character compatible if it is type CHAR, TEXT, BYTE
or a subrange of one of these.
$ski
$par-5
$need5
$SKI
$jus
LOGICAL UNIT NUMBER TABLE
$SKI
Register GP points to a global storage area.
At offset 10. from GP is the first word of a 14. word logical unit
number table.
The first word of the table contans the file window pointer
for file TTY.
The sixth word of the table (20.(GP)) contains the file window
pointer for TTYOUTPUT.
The remaining entries are initially zero.
When a file is first opened the file window pointer for that
file is inserted into the logical unit number table.
The word offset within the table is the RSX logical unit number
used for I/O.
$ski
$par-5
$ski
III.\CALLS GENERATED FOR PASCAL I/O ROUTINES
$SKI
$ind left+14
$par-14
1.\\RESET-\\\\generates call to $RESET
$ski
$par-14
2.\\REWRITE-\\generates call to $REWRITE
$ski
$par-14
3.\\GET-\\\\\\If the second parameter is present (for
random I/O) a call to $GETRM is generated, otherwise a call
to $GET is generated.
$ski
$par-14
4.\\PUT-\\\\\\If the second parameter is present (for random I/O)
a call to $PUTRM is generated, otherwise a cal to $PUT is generated.
$ski
$par-14
5.\\READ-\\\\\If the file's type is character compatible then calls may
be generated to any of the following routines:\$RDSTR,
 $RDI, $RDR, $RDC.
Which calls are actually generated depends on the types of the parameters
to READ.
If the type of the file is not character compatible then
a call to $RDREC will be generated.
$ski
$par-14
6.\\READLN-\\\Same as for READ except an additional
call may be generated after all other calls generated.
A call to $GETLN is generated if the type of the file
is character compatible.
$ski
$par-14
7.\\WRITE-\\\\If the file's type is character comptible
then calls may be generated to any of the following:\$WRCHA,
 $WRC, $WRS, $WRR, $WRFIX, $WRI, $WROCT, $WRB or $WRBFX.
Which cals are actually generated depends on the types
of the parameters to WRITE.
If the type of the file is not character compatible then
a call to $WRREC will be generated.
$ski
$par-14
8.\\WRITELN-\\The same calls are generated as for WRITE.
In addition if the type of file is character compatible a call
to $PUTLN will be generated.
$ski
$par-14
9.\\BREAK-\\\\Generates a call to $BRK.
$ski
$par-14
10.\PAGE-\\\\\Generates a call to $PAGE.
$ski
$par-14
11.\EOF, EOLN, IORESULT-a call to $TTPAR may be generated
depending on the way in which the file parameter must be
accessed.
Then in line code is generated to move the proper status
word from the file window block to the software stack.
$ski
$ind left0
IV.\\RUN TIME ROUTINES
$ski
$ind left5
INTRODUCTION
$ski
Each of the runtime routines mentioned in Section\III is described
 below.
Several other routines are involved indirectly in I/O.
Routine $INITA, the PASCAL initialization routine, reserves space
for the four standard files and opens TTY and 
TTYOUTPUT.
Routine $WRERROR uses the QIO system call to write runtime error
messages to the terminal.
Routine $EXIT, the PASCAL termination routine, flushes
all buffers and closes any open files.
$ski
$need3
FORMAT OF ROUTINE DESCRIPTIONS
$ski
Each routine description includes the following:
$ind left +8
$ski
$par-4
1.\\The entry point name and a brief description of the
function of the routine.
$ski
$par-4
2.\\The file in which the routine resides.
Currently all the files listed are packed together into a single
file called 'PASLIB2.PAC'.
A program exists to extract the individual files.
$ski
$par-4
3.\\A description of the parameters present on the software
stack.
Unless an exit stack description is given, all parameters
are popped from the stack by the runtime routine.
$ski
$ind left 0
ROUTINE DESCRIPTIONS
$ski
$ind left+4
$ski
$par-4
1.\\$REWRITE, $RESET-implement PASCAL procedures RESET and REWRITE.
$ski
File: P11RESET.MAC
$ski
On entry the stack is as follows:
$ver
  16.(SS) - File window pointer.
  14.(SS) - Record size or -1 if TEXT file
  12.(SS) - Address of file name string.
  10.(SS) - Length of file name string.
   8.(SS) - Address of file directory string, 0 if none.
   6 (SS) - Length of file directory string.
   4 (SS) - Address of file device string, 0 if none.
   2 (SS) - Length of file device string.
     (SS) - Iospec set.
$jus
$ski
These parameters correspond directly to the parameters
of the PASCAL routines RESET and REWRITE.
See the description supplied in the PASCAL-11 User Manual.
$ski
$par-4
2.\\$WRREC\-\write a file element to a file (used for non-TEXT files only).
$ski
File:\P11GETPUT.MAC
$ski
$par
Entry stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Address of record to be written.
$ski
Exit stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
3.\\$PUT\-\Implements PASCAL function PUT except when random I/O
is used.
$par
$ski
File:\P11GETPUT.MAC
$ski
$par
Entry stack:
$par+5
(SS)\-\Pointer to file window.
$ski
$par-4
4.\\$PUTLN\-\Writes a record to a text file.
$ski
File:\P11GETPUT.MAC
$ski
$par
Entry stack:
$par+5
(SS)\-\Pointer to file window.
$ski
$par-4
5.\\$BRK\-\Implements PASCAL-11 procedure BREAK.
$ski
File:\P11GETPUT.MAC
$ski
$par
Entry stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
6.\\$WRCHA\-\Writes a single character in a field of a given
length.
$ski
File:\P11GETPUT.MAC
$ski
Entry stack:
$par+5
4(SS)\-\File window pointer.
$par+5
2(SS)\-\Character to be written.
$par+5
(SS)\-\Field width.
$ski
Exit stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
7.\\$WRC\-\Write a character.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Character.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
8.\\$PAGE\-\Implements PASCAL-11 procedure PAGE.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
(SS)\-\File pointer.
$ski
$par-4
9.\\$WRS\-\Writes a string in a field of given width.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
6(SS)\-\File window pointer.
$par+5
4(SS)\-\Address of string.
$par+5
2(SS)\-\Field width.
$par+5
(SS)\-\Length of string.
$ski
Exit stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
10.\$RDC\-\Reads a character.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Address of byte to receive character.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
11.\$RDREC\-\Reads an element of a file for files which
are not of a character compatible type.
$ski
File:\-\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Starting address of locations to receive record.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
12.\$GETLN\-\Reads a record from a TEXT file.
$ski
File:\-\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
13.\$GET\-\Implements PASCAL function GET except when random I/O
is used.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
14.\$TTPAR\-\If file passed is the TTY then return the address
of file window pointer for TTYIN.
$ski
File:\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
(SS)\-\File window pointer.
$ski
Exit Stack:
$par+5
(SS)\-\If original file window pointer pointed to a TTY file,

then file window pointer for TTYIN otherwise original file
window pointer.
$ski
$par-4
15.\$RDSTR\-\Read a string.
$ski
File:\-\P11GETPUT.MAC
$ski
Entry Stack:
$par+5
4(SS)\-\File window pointer.
$par+5
2(SS)\-\Starting address of locations to receive string.
$par+5
(SS)\-\String length.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
16.\$WRR\-\Converts a real number to ASCII (using floating point
notation) and writes it to a file.
$ski
File:\-\P11WRREAL.MAC
$ski
Entry Stack:
$par+5
6(SS)\-\File window pointer.
$par+5
4(SS)\-\Real number word\2.
$par+5
2(SS)\-\Real number word\1.
$par+5
(SS)\-\Field width.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
17.\$WRFIX\-\Converts a real number to ASCII (fixed point notation)
and writes it to a file.
$ski
File:\-\P11WRREAL.MAC
$ski
Entry Stack:
$par+5
8.(SS)\-\File window pointer.
$par+5
6(SS)\-\Real number word\2.
$par+5
4(SS)\-\Real number word\1.
$par+5
2(SS)\-\Field width.
$par+5
(SS)\-\Number of decimal digits after decimal point.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
18.\$RDR\-\Reads a real number and converts it to binary.
$ski
File:\P11RDR.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Starting address of two words to receive the real.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
19.\$RDI\-\Reads an integer and converts to binary.
$ski
File:\-\P11RDI.MAC
$ski
Entry Stack:
$par+5
2(ss)\-\File window pointer.
$par+5
(SS)\-\Address of word to receive integer.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
20.\$WRI\-\Converts an integer to ASCII and writes it.
$ski
file:\P11WRI.MAC
$ski
Entry Stack:
$par+5
4(SS)\-\File window pointer.
$par+5
3(SS)\-\Integer
$par+5
(SS)\-\Field width.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
21.\$WROCT\-\Converts an integer to octal ASCII and writes it.
$ski
File\-\P11WROCT.MAC
$ski
Entry Stack:
$par+5
4(SS)\-\File window pointer.
$par+5
2(SS) Integer.
$par+5
(SS)\-\Field length.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
22.\$WRB\-\Writes a boolean value as 'TRUE\\' or 'FALSE\'.
$ski
File\-\P11WRBOOL.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Boolean value.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
23.\$WRBFX\-\Writes a boolean value as 'TRUE\' or 'FALSE\' in
a field of given width.
$ski
File\-\P11WRBOOL.MAC
$ski
Entry Stack:
$par+5
4(SS)\-\File window pointer.
$par+5
2(SS)\-\Boolean value.
$par+5
(SS)\-\Field width.
$ski
Exit Stack:
$par+5
(SS)\-\File window pointer.
$ski
$par-4
24.\$PUTRM\-\Write a record randomly.
$ski
File:\P11RANDOM.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Record number.
$ski
$par-4
25.\$GETRM\-\Read a record randomly.
$ski
File:\-\P11RANDOM.MAC
$ski
Entry Stack:
$par+5
2(SS)\-\File window pointer.
$par+5
(SS)\-\Record number.
$ski4
$ind left 0
SMR:ph
$par
12/18/78
$par
12/20/78
 