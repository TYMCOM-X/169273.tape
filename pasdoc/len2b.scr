$margin 10 $width 75
$number off
$center
$skip 3
Language Enhancement Notes #2B

Exceptions, Conditions, and Handlers

Revision B

5 January 1981
$skip 6 $ind left +10 $ind right +10 $just
The general problem of handling exceptional conditions was discussed in LEN-#2.
LEN-#2A contained a preliminary proposal for exception handling in MDSI Pascal,
based on the exception handling mechanism in Ada.
This paper contains a functional specification, based on that proposal and
the comments that were made about it,
and an expanded discussion of implementation issues.
$indent left -10 $indent right -10
$title left 'LEN-#2B' left 'Exceptions, Conditions, and Handlers' left '5 January 1981'
$footnote 'I-\'
$number 1
$page
$center
Part I

Functional Specification
$skip 2 $just $section
^#.\\\&Basic Concepts&
$entry '^#.	Basic Concepts	I-\'
$skip $para 5
An &exceptional event& (or simply &exception&) is an event which can occur
during the execution of a Pascal program,
and normally causes immediate termination of the program.
An exception may be independent of the program (for example,
an attention interrupt when a user hits the "break" key), or it may be caused
by some action of the program (for example, a subscript out of bounds,
division by zero, or illegal memory reference).
$skip $need 2 $para 5
Normally, an exception causes immediate termination of the program it occurs in.
However, when the Pascal runtime system's &exception manager& is enabled,
it will detect the occurrence of an exception, and
will signal the appropriate condition instead of terminating the program.
$skip $need 2 $para 5
A &condition& is a name used in conjunction with the Pascal signaling and
signal handling feature.
The language provides pre-defined conditions to denote the classes of
exceptions which can be detected by the runtime exception manager.
Other conditions, without any intrinsic meaning, may be explicitly declared.
$skip $need 2 $para 5
&Signaling& is a way of transferring control.
When the runtime exception manager detects an exception, it will signal an
appropriate condition.
A program can also signal a condition explicitly, by calling the standard
procedure SIGNAL.
When a condition is signaled, execution stops at the current location, and
resumes at a &handler& defined elsewhere in the program.
$skip 2 $need 4 $section
^#.\\\&Condition Names&
$entry ''
$entry '^#.	Condition Names	I-\'
$skip $para 5
Within a program, a condition is denoted by a &condition name&.
This is simply a symbol, which is subject to exactly the same scope rules as
type names, variable identifiers, etc.
$skip $need 2 $para 5
Names for user-defined conditions are declared in &exception declaration&s.
Condition names at the outermost level of a module may be declared
^dpublic|d or ^dexternal|d.
It doesn't matter which module a public condition name is declared in, so long
as it is declared public in exactly one module, and external in every other
module that uses it.
$skip $need 3 $verb $ind +5
<declaration> ::=
   <label declaration> || <data declaration> ||
   <subroutine declaration> || <exception declaration>
$skip $need 3
<exception declaration> ::=
   [ ^dpublic|d || ^dexternal|d ] ^dexception|d
      <identifier> [ ',' <identifier> ]*
$ind -5 $skip $need 2 $just $para 5
The language also defines a set of standard conditions, which are
automatically provided in the initial environment.
These are described in the "Standard Conditions" section below.
$skip 2 $need 4 $section
^#.\\\&Condition Handlers&
$entry ''
$entry '^#.	Condition Handlers	I-\'
$skip $para 5
Any compound statement (i.e., a ^dbegin|d-^dend|d statement) may have a &handler
clause& associated with it.
A handler clause follows the statement list of the compound statement, and
precedes the ^dend|d keyword.
Handler clauses are very similar to case statements, except that the
alternative statements in a handler clause are labeled with condition names
instead of constants.
$skip $need 12 $verb $ind +5
<compound statement> ::=
   ^dbegin|d <statement list> [ <handler clause> ] ^dend|d

<handler clause> ::=
   ^dexception|d <handler> [ ';' <handler> ]* [';']

<handler> ::=
   <condition list> ':' <unlabeled statement>

<condition list> ::=
   <condition identifier> [ ',' <condition identifier> ]*  ||
   ^dothers|d || ^dallconditions|d
$ind -5 $just $skip 2 $need 4 $section
^#.\\\&Handling a Signaled Condition&
$entry ''
$entry '^#.	Handling a Signaled Condition	I-\'
$skip $para 5
A condition may be signaled in two ways.
When the runtime exception manager detects an exception, it will signal an
appropriate standard condition.
User code may signal a user-declared condition with a call to
the standard procedure SIGNAL.
In either case, execution stops immediately,
and the following algorithm is executed:
$skip $need 2 $ind +5 $para -5
[1]\\The "current statement" is defined to be the statement which was being
executed when the condition was signaled.
$skip $need 2
If the current statement is contained in a compound statement
which has a handler clause, then we say that
handler clause is active.
Similarly, if the current statement is in a procedure or function, and the
statement which called it is contained in a compound statement
which has a handler clause, we say that that handler clause is active.
In general, a handler clause is active if any calling statement in the current
call stack is contained in its compound statement.
$skip $need 2
If some active handler clause contains a handler which is labeled with the
signaled condition or with ^dallconditions|d, then perform the signaling
algorithm, starting with step [2].
Otherwise, terminate the program immediately with an "unhandled signal" error
message.
(That is, if the condition will never be handled, then we terminate the program
without applying the rest of the signaling algorithm, leaving the program
state intact.
See the further discussion in the ^dallconditions|d section.)
$skip $need 2 $para -5
[2]\\Let the "current compound statement" be the innermost compound statement
which contains the current statement.
If the current compound statement has a handler clause containing a
handler which is labeled with the signaled condition, ^dothers|d, or
^dallconditions|d, then go to step [4].
Otherwise, go to step [3].
$skip $need 2 $para -5
[3]\\If the current compound statement is the body of a procedure or function,
then terminate this routine,
redefining the current statement to be the statement that this routine was
called from.
Otherwise, redefine the current statement to be the current compound statement.
Now repeat step [2].
$skip $need 2 $para -5
[4]\\Execute the handler statement which is labeled with the signaled condition,
^dothers|d, or ^dallconditions|d.
(If there is a choice, choose the handler statement which is labeled with the
signaled condition.
A handler clause is not allowed to contain both ^dothers|d and
^dallconditions|d handlers.)\
Following completion of the handler statement (provided it
doesn't do a goto, stop, return, signal, etc.), continue the
program as though the current compound statement had completed naturally.
$skip 2 $need 4 $ind -5 $level +1 $section
^#\\\The SIGNAL Procedure
$entry ''
$entry '^#		The SIGNAL Procedure	I-\'
$skip $para 5
The standard procedure SIGNAL may be called
with a user-defined condition name as an argument, to signal the indicated
condition.
User-defined conditions can be very useful for dealing with the kinds of
problems that non-local goto statements are usually used for.
For example, suppose that
some program must process command lines, and that
any error in the processing of a command line is to
return control to the main command loop in the body of the program.
Traditionally, this would be accomplished with a goto statement from the
command line processing routines back to the main program.
However, with user-defined conditions, the main program could declare
"^dexception|d commanderror".
Errors in the processing of a command line could then be signaled with
"SIGNAL(commanderror)",
which would transfer control to a handler in the main program.
$skip $need 2 $para 5
A call to SIGNAL without an argument is only allowed when some handler is active.
Here, it resignals the condition whose signaling caused the handler to
be activated.
This is particularly useful in an ^dothers|d handler, which may first perform some
general action, and then call SIGNAL to resignal the condition for
a specific handler.
$skip 2 $need 4 $section
^#\\\^dOthers|d Handlers
$entry '^#		^^dOthers||d Handlers	I-\'
$skip $para 5
If a handler clause has no handler labeled with the name of a signaled
condition, but does have a handler labeled with ^dothers|d,
then the ^dothers|d handler will be activated.
An ^dothers|d handler allows a routine to perform necessary clean-up
activities when it is terminated by the signaling of a condition that it
doesn't have an explicit handler for.
Therefore, an ^dothers|d handler should end with a SIGNAL() call, to
pass the signaled condition on to an explicit handler.
(This is not a language requirement, but an ^dothers|d handler which did not
end by resignaling its activating condition would not be useful.)\
The following example illustrates the intended use of ^dothers|d handlers:
$skip $need 7 $verb $ind +5
program example;
exception A, B, C;

procedure x;
begin
   (* may signal A, B, or C *)
end;
$skip $need 12
procedure p;
var f: text;
begin
   ...
   rewrite (f, ...);
   begin
      (* miscellaneous file processing; calls x;
         also calls p recursively *)
   exception
      others:  begin close (f); signal () end
   end;
end (* p *);
$skip $need 2 $just $ind -5
If procedure x were to return to the main program with a non-local goto on
encountering an error, then the files opened by the multiple, recursive
invocations of procedure p could never be closed.
Procedure x returns to the main program by signaling, however;
and each invocation of procedure p has its own handler, to close the file
that it has opened before resignaling the condition.
A possible sequence of actions might be:
$skip $need 15 $verb $ind +5
Main program calls p(1)
   p(1) opens f1
   p(1) calls p(2)
      p(2) opens f2
      p(2) calls p(3)
         p(3) opens f3
         p(3) calls x
            x signals A
         p(3)'s handler closes f3
         p(3)'s handler resignals A
      p(2)'s handler closes f2
      p(2)'s handler resignals A
   p(1)'s handler closes f1
   p(1)'s handler resignals A
Main program's handler for A takes control
$skip 2 $need 4 $just $ind -5 $section
^#\\\^dAllconditions|d Handlers
$entry '^#		^^dAllconditions||d Handlers	I-\'
$skip $para 5
An ^dothers|d handler and an ^dallconditions|d handler are very much alike:
Either may be activated if its handler clause doesn't have an explicitly
labeled handler for a signaled condition.
However, their intended uses are very different, as reflected in step [1]
of the signaling algorithm.
$skip $need 2 $para 5
An ^dothers|d handler performs some specific clean-up action and then
resignals its activating condition.
It does not handle any condition itself;
it simply allows the routine that declared it
to clean up behind itself when it is terminated by the
signaling of some condition, which presumably will be handled by an explicit
handler elsewhere in the program.
Consequently, step [1] of the signaling algorithm will invoke the full
signaling algorithm only if there is an active handler clause with an explicit
handler for the signaled condition:
if the only active handler which could handle the condition is an ^dothers|d
handler, then the program will simply die.
$skip $need 2 $para 5
An ^dallconditions|d handler acts as an explicit handler for any condition
which does not have a labeled handler in the same clause.
It really does handle any condition which may happen to be signaled,
and it is not expected to resignal the condition.
Thus, you can use an ^dallconditions|d handler in a program or subroutine
when you want to be able to recover from &any& exception or signaled
condition -- even ones you haven't thought of.
However, you should keep in mind the possibility that your recovery may be
imperfect, since you don't even know all the conditions your handler may have to
recover from.
In general, it is much safer to explicitly enumerate the conditions you are
prepared to handle.
$skip 2 $need 4 $level 1 $section
^#.\\\&Standard Conditions&
$entry ''
$entry '^#.	Standard Conditions	I-\'
$skip $para 5
The language provides a collection of standard conditions, which need not be
explicitly declared by programs that refer to them.
These standard conditions are signaled by the runtime exception manager when
it detects an exception.
$skip $need 2 $para 5
Many standard exceptions have standard status functions associated with them.
Such a status function may only be invoked when a handler for the
corresponding condition is active.
$skip $need 2 $level 2 $section
^#\\\Arithmetic Exceptions
$entry ''
$entry '^#		Arithmetic Exceptions	I-\'
$skip $para 5
Any arithmetic exception which can be detected by the implementation will
cause the standard condition MATH_ERROR to be signaled.
The MATH_ERROR condition may be signaled either for a hardware arithmetic
error, such as division by zero, or for an error in a standard math
function, such a negative argument to SQRT.
$skip $need 2 $para 5
A handler for this condition may call the standard function MATHSTATUS to
determine just which arithmetic exception occurred.
MATHSTATUS will return a value of the enumerated type MATH_STATUS.
The values of this type depend on the implementation, but their names will
all start with "MATH_".
(This means that no portable program may rely on knowing the names of the
possible MATHSTATUS values.)
$skip 2 $need 4 $section
^#\\\Input/Output Exceptions
$entry '^#		Input/Output Exceptions	I-\'
$skip $para 5
When a fatal error occurs during the performance of an i/o operation, the
runtime system will signal the standard condition IO_ERROR.
A handler for this condition may use the standard function EXIOSTATUS to
determine the particular i/o error which occurred.
EXIOSTATUS, like IOSTATUS, returns a value of type IO_STATUS.
However, IOSTATUS always returns a code describing the last i/o operation
that occurred, while EXIOSTATUS returns a code describing the exception
that caused the IO_ERROR handler to be activated.
$skip $need 2 $para 5
Note that when the RETRY option is set for a file, the IO_ERROR
condition will not be signaled until the i/o operation following the
operation on which the error actually occurs.
This allows the program to detect the error (with IOSTATUS) and correct it
before the exception has a chance to occur.
$skip 2 $need 4 $section
^#\\\Program Exceptions
$entry '^#		Program Exceptions	I-\'
$skip $para 5
Program exceptions are all those errors whose detection can be controlled with
the /CHECK option of the Pascal compiler.
When a user exception occurs, the PROGRAM_ERROR condition will be signaled.
A PROGRAM_ERROR handler can determine the particular user exception which
has occurred by calling the standard function PROGRAMSTATUS, which returns
a value of the enumerated type PROGRAM_STATUS.
The elements of this type include (but are not necessarily limited to)
PROGRAM_ASSERTION, PROGRAM_CASE, PROGRAM_COMPATIBILITY, PROGRAM_FILE,
PROGRAM_POINTER, PROGRAM_SUBSTRING, PROGRAM_SUBSCRIPT, and PROGRAM_VALUE.
$skip 2 $need 4 $section
^#\\\Attention and Overflow Exceptions
$entry '^#		Attention and Overflow Exceptions	I-\'
$skip $para 5
Most systems provide some sort of feature to allow a user to interrupt an
executing program.
In any implementation in which a program can trap such interrupts, a user
interrupt will cause the ATTENTION condition to be signaled.
$skip $need 2 $para 5
When a call to the dynamic storage allocator (NEW) causes the heap to
overflow, the allocator will signal the STORAGE_OVERFLOW condition.
If a program runs out of space in the stack that Pascal uses for storing local
variables and linkage information for procedures and functions, it will
signal the STACK_OVERFLOW condition.
(Note that if a handler for this condition attempts to do any procedure
or function calls, the result will probably be another stack overflow).
$skip $need 4 $section
^#\\\Miscellaneous Exceptions
$entry '^#		Miscellaneous Exceptions	I-\'
$skip $para 5
Most systems can detect a variety of miscellaneous errors
(for example, an illegal memory reference on the PDP-10).
The occurrence of such an error will cause the standard condition
SPECIAL_ERROR to be signaled.
A handler for this condition may call the standard function SPECIALSTATUS
to determine just which special exception occurred; this function will return
a value of the enumerated type SPECIAL_STATUS.
The possible values of this type are completely dependent on the implementation,
but their names will all start with "SPECIAL_".
$skip $need 2 $section
^#\\\Activating Exception Handling
$entry '^#		Activating Exception Handling	I-\'
$skip $para 5
The runtime exception manager will not always intercept all kinds of
exceptions.
In general, the exceptions associated with a particular condition will be
intercepted and signaled only if, somewhere in the program (not necessarily
in the main program compilation unit), there is a handler for that
condition.
An ^dallconditions|d handler anywhere in the program will cause all possible
exceptions to be intercepted and handled through the signaling system.
(This is an additional reason to use ^dallconditions|d handlers only when
necessary.)\
Consequently, if a program is to run with some condition constantly masked,
handling it only with the PENDING function (described in the next section),
then the program must still contain a handler for the condition, even if it
is only "begin exception cond: end" somewhere.
$skip 2 $need 4 $level 1 $section
^#.\\\&Maskable Exceptions&
$entry ''
$entry '^#.	MaskExceptions	I-\'
$skip $para 5
Most exceptions must be responded to immediately -- they would make
normal continuation of the program impossible.
However, some conditions may be signaled long after the occurrence of their
exceptions, allowing the program to continue normally in the interval.
Such exceptions are called &maskable&.
$skip $need 2 $para 5
It is useful to be able to tell the runtime exception manager to defer the
signaling of a maskable exception.
This can be done with the standard procedure call "MASK\(condition)",
which tells the exception manager not to signal "condition" when its
exception occurs, but simply to make an internal note of the exception.
Following a call to MASK, the condition is said to be &masked&.
A masked condition whose associated exception has actually occurred is said
to be &pending&.
Re-occurrence of a pending exception has no effect -- the only possible
states for a masked exception are pending and not pending.
The compiler will only allow MASK to be called with maskable conditions.
$skip $need 2 $para 5
A program can test whether a masked condition is pending
with the standard function call "PENDING\(condition)".
This will return TRUE if the condition is pending, and FALSE if it is not.
(It will always return FALSE if the condition is not masked.)\
It has the side effect of clearing the condition's internal "pending" flag,
so that a subsequent call to PENDING will
return FALSE unless the exception re-occurs in between.
$skip $need 2 $para 5
The standard procedure call "UNMASK\(condition)"
unmasks a masked condition.
When a masked,
pending condition becomes unmasked, it will be signaled immediately.
MASK and UNMASK calls can be "stacked";
that is, if condition A is not masked, then after the sequence MASK(A),
MASK(A), UNMASK(A), it will be masked, but after an additional UNMASK(A),
it will be unmasked.
A call to UNMASK with a condition which is not masked will result in a runtime
error.
$skip $need 2 $para 5
The standard function call "MASKED\(condition)" may be used to determine
whether a condition is masked.
It will return TRUE if the condition is masked and FALSE if it isn't.
Like MASK and UNMASK, MASKED may be called only
with the names of maskable conditions.
$skip 2 $need 4 $section
^#.\\\&Sequence of Actions&
$entry ''
$entry '^#.	Sequence of Actions	I-\'
$skip $para 5
A handler clause applies only to the statement list preceding it.
Therefore, a condition which is signaled during the execution of a handler
will not be handled by any handler in the same handler clause.
$skip $need 2 $para 5
No exceptions will be recognized between the signaling of a condition
(either by SIGNAL or by the runtime exception manager) and the activation of
its handler.
When control is returned to the user program at the start of the
handler, exceptions (including any exception that might have
occurred during the signaling process) may once again be recognized.
$skip $need 2 $para 5
A special rule is applied for attention exceptions.
An attention which occurs between the signaling of a condition and the
completion of the handler that deals with it will be ignored --
not just deferred, but completely disregarded.
This rule provides some protection:
if a user gets impatient, and hits the attention key three times instead of
once, the effect should be a single ATTENTION signal.
$skip 2 $need 6 $section
^#.\\\&Miscellaneous Features&
$entry ''
$entry '^#.	Miscellaneous Features	I-\'
$skip $level 2 $section
^#\\\Floating Underflow Control
$entry ''
$entry '^#		Floating Underflow Control	I-\'
$skip $para 5
On many machines, a floating-point
operation whose result has an exponent less than the minimum allowed
exponent may either cause an exception or simply return zero.
A compiler option switch, [NO]UNDERFLOW, will allow programs to take
advantage of this flexibility where the implementation provides it.
UNDERFLOW, the default option, causes floating underflow to be treated as
an arithmetic exception.
NOUNDERFLOW causes zero to be returned as the result of any underflowing
operation.
The UNDERFLOW option may be specified only on the command line or program
statement of a main program compilation.
$skip $need 4 $section
^#\\\Attention Masking Control
$entry '^#		Attention Masking Control	I-\'
$skip $para 5
During the debugging of a program, masking of the attention condition may
be too dangerous to be used.
(Remember that if a program goes into an infinite loop with the
attention condition masked, it may be almost impossible to stop.)\
Therefore, a compiler option switch, [NO]MASKING, is provided.
MASKING, the default option, causes all masking features to work as
described above.
However, when NOMASKING is specified, MASK\(ATTENTION) calls will not
cause the signaling of attention exceptions to be deferred.
This allows a program to be written with all the masking calls, but without
the danger of a masked infinite loop.
The MASKING option may be specified only on the command line or program
statement of a main program compilation.
$skip $need 4 $section
^#\\\Warning Messages
$entry '^#		Warning Messages	I-\'
$skip $para 5
For some programs, it may be useful to have a handler
(possibly an ^dallconditions|d handler)
which intercepts a large class of conditions,
ignores them, and simply restarts the program at a convenient point.
Such a handler may want to print a warning message describing the
condition that has been ignored.
Therefore, there is a standard procedure EXCEPTION_MESSAGE, which is called
with no arguments.
It will type, on the user's terminal, the appropriate message for the
condition that was last signaled.
Where appropriate, it will modify the message to indicate that it is
a warning message rather than an error message.
For example, following a subscript range error on the PDP-10, the message
would be "%Subscript out of range at user pc XXXXXX" rather than "?Subscript
out of range ...".
$skip 2 $need 4 $level 1 $section
^#.\\\&Optimization Considerations&
$entry ''
$entry '^#.	Optimization Considerations	I-\'
$skip $para 5
The Pascal optimizer assumes that it can determine the effects of the
statements in a program.
In particular, it assumes that it can tell when a given statement is
completely useless and can be safely removed from the program.
To see how this assumption can be invalidated by the use of condition
handlers, consider the following:
$skip $need 7 $verb $indent +5
begin
   A := 0;
   SIGNAL (X);
   A := 1;
exception
   X: write (A)
end;
$skip $need 2 $just $indent -5
The optimizer, observing that the value of A is never used between the time
it is set to zero and the time it is set to one, will delete the first
assignment .
Then, when the signal occurs and control is transferred to the handler, the
value of A that is written will be the value that A had before the compound
statement was entered.
$skip $need 2 $para 5
This problem is quite a general one.
If you are going to write a piece of code which sets values in variables
with the particular intention of having those values available if the
code is interrupted by a signal or an exception, then you should
explicitly disable optimization for the compilation of the routine
containing that piece of code.
(Do this with "options *nooptimize" to disable optimization for a single
routine, or with "options nooptimize" to disable optimization for a routine
and all the other routines contained within it.)
$skip 2 $need 6 $section 0
A.\\\&Appendix:  Machine-Dependent Status Types&
$entry ''
$entry 'A.	Appendix:  Machine-Dependent Status Types	I-\'
$entry ''
$skip $section
A.^#\\\DECsystem 10  Status Types
$entry 'A.^#		DECsystem 10 Status Types	I-\'
$skip $verb
$ind +5 $tab 21 $para -5
MATH_STATUS:
MATH_OK	never returned as an error code
MATH_FLT_UND	floating underflow
MATH_FLT_OVF	floating overflow
MATH_INT_OVF	integer overflow
MATH_ZERO_DIVIDE	division by zero
MATH_ARG_ARCSIN	argument to ARCSIN not in [-1..+1]
MATH_ARG_ARCCOS	argument to ARCCOS not in [-1..+1]
$skip $need 10 $para -5
PROGRAM_STATUS:
PROGRAM_OK	never returned as an error code
PROGRAM_ASSERTION	FALSE argument in assertion call
PROGRAM_CASE	case selector not in case label list
PROGRAM_COMPATIBIL	lengths don't match in array assignment
PROGRAM_FILE	NIL or undefined file in i/o call
PROGRAM_POINTER	NIL or undefined pointer dereferenced
PROGRAM_SUBSTRING	index or length out of bounds
PROGRAM_SUBSCRIPT	array subscript out of bounds
PROGRAM_VALUE	scalar value out of range
$skip $need 7 $para -5
SPECIAL_STATUS:
SPECIAL_OK	never returned as an error code
SPECIAL_ILL_MEM_REF	illegal memory reference
SPECIAL_ILL_INST	illegal instruction (not on Tymshare)
SPECIAL_NEW_NEG	ALLOCATE call with a negative size
SPECIAL_DISP_PTR	bad pointer in DISPOSE call
SPECIAL_DISP_TWICE	DISPOSE of previously freed pointer
$ind -5 $just
$skip 2 $need 4 $section
A.^#\\\VAX 11 Status Types
$entry 'A.^#	VAX 11 Status Types	\'
$skip $para 5
Exception handling has &not& yet been implemented in the VAX compiler.
Any attempt to use any of the features described in this document with the VAX
compiler will result in compilation errors.
$footnote ''
$page
$center
Part I

Functional Specification
$verb
$skip 3
$tab 12, 15, 60
$toc
$footnote 'II-\'
$number 1
$page
$center
Part II

P10 Implementation
$skip 2 $just $section 1
^#.\\\&Representation of Conditions&
$entry '^#.	Representation of Conditions	II-\'
$entry ''
$skip $para 5
In the compiled program, there is a &condition cell& for each condition.
A condition cell for a user-defined condition is a word containing its own
address.
A condition which is declared within a module will have its cell allocated
in the constant area for that module;
if the condition name is declared public, its cell address will be
denoted by a global symbol in the compiled module.
$skip $need 2 $para 5
A condition cell for a standard condition is a word allocated in the "standard
condition cell block", which is simply a portion of the runtime exception
manager's PSA.
A standard condition cell contains status information for the condition,
as follows:
$ind +10
$skip $need 2 $para -5
Bit\18\=\1 if the condition is maskable, 0 if it is not.
This bit is defined at load time, and should never be changed during
execution.
$skip $need 2 $para -5
Bit\19\=\1 if a masked condition is pending, 0 otherwise.
This bit is cleared at load time, when PENDING is called, or when the
condition is unmasked and signaled.
It is set if the exception occurs while the condition is masked.
$skip $need 2 $para -5
Bits\0-17\=\The masking count.
This is initialized to zero at load time.
It is incremented by a MASK call and decremented by an UNMASK call.
If it is non-zero, then the condition is masked.
If it is ever decremented below zero or incremented over 777777,
a runtime error must occur.
$ind -10 $skip $para 5 $need 2
$skip $need 2 $para 5
In compiler-generated code, a condition is represented by a
&condition address&.
The condition address for a user-defined condition declared in the same module
is simply the address of the condition cell.
The condition address of an external user-defined condition is the value of the
global symbol with the same name (which of course is defined as the address of
the condition cell in the module where the condition is declared as public).
$skip $need 2 $para 5
For each standard condition, the runtime exception manager contains a
constant word, whose value is the offset in the standard condition cell
block of the condition cell,
and whose address is denoted by a global symbol which is known
to the compiler.
The condition address for a standard condition is the value of this
global symbol.
The standard condition global symbols are:
$skip $need 7 $verb $ind +10 $tab 20
MATH_ERROR	EX.MTH
IO_ERROR	EX.IO
PROGRAM_ERROR	EX.USR
ATTENTION	EX.ATN
STORAGE_OVERFLOW	EX.STO
STACK_OVERFLOW	EX.STK
SPECIAL_ERROR	EX.SPC
$skip 2 $need 4 $ind -10 $just $section
^#.\\\&Runtime Entry Points&
$entry '^#.	Runtime Entry Points	II-\'
$entry ''
$skip $para 5
The standard procedure and function calls are listed below with their
generated code.
Boolean function call entry points return 0 or 1 in an arbitrary result
register, "result".
Calls with a condition argument have a condition address, "cond", as
a parameter.
$skip $ind +10 $verb $need 4 $tab 30, 38
&Source Code&	&Macro&
$skip
SIGNAL (cond);	PUSHJ	TOP,SIGNL.
	Z	cond
$skip
SIGNAL ();	PUSHJ	TOP,RSGNL.
$skip $need 2
MASK (cond);	PUSHJ	TOP,MASK.
	Z	cond
$skip $need 2
UNMASK (cond);	PUSHJ	TOP,UNMSK.
	Z	cond
$skip $need 2
:= MASKED (cond);	PUSHJ	TOP,TSMSK.
	Z	result,cond
$skip $need 2
:= PENDING (cond);	PUSHJ	TOP,PEND.
	Z	result,cond
$skip $need 2
EXCEPTION_MESSAGE ();	PUSHJ	TOP,EX.MSG
$skip 2 $ind -10 $need 4 $just $section
^#.\\\&Representation of Handlers&
$entry '^#.	Representation of Handlers	II-\'
$entry ''
$skip $para 5
A handler clause is represented by a &handler branch table& (HBT), which is
generated in the code area for a normal compilation, and in the constant area
for an overlay compilation.
The left half of the first word in the table is the address of the handler
common entry code.
To invoke one of the handlers in the table, the runtime loads the handler
address into register 0, and then branches to the common entry code,
which cleans up the program state -- "with" registers, for example --
and branches indirect through register 0 to the handler.
The right half of the first table word is the address of the next outer
handler table in the same procedure, or zero if there is none.
$skip $need 2 $para 5
The second word in the table contains the address, relative to the current stack
frame, of the &handler state block& (HSB) for this handler clause.
This is a two-word block, allocated in the stack frame, which is used by the
runtime exception manager to store information about the state of a handler.
It is described in more detail below.
$skip $need 2 $para 5
Subsequent words in the branch table contain a condition address in the
left half, and a handler address in the right half.
(The handler address is simply the address of the code for the particular
handler.)\
The last word in the table indicates the default action, if none of the
condition addresses preceding it match the signaled condition.
Its left half is 777777, to indicate an ^dothers|d case, or 777776, to
indicate an ^dallconditions|d case.
Its right half may be a normal handler address, or it may be zero,
indicating that the condition is not handled by this handler clause, and should
be resignaled.
$skip 2 $need 4 $section
^#.\\\&Locating the Active Handler Clauses&
$entry '^#.	Locating the Active Handler Clauses	II-\'
$entry ''
$skip $para 5
The current HBT address for a procedure is always kept in the left half of the
fourth word of the procedure's stack frame.
(This means that any routine which contains a handler must be non-quick.)\
All active handler clauses in a routine may thus be located by starting with the
current HBT, and then following the links in the right half of the first word of
each HBT.
This chain may include HBTs both for handler clauses which are ready to handle
a signaled condition, and for handler clauses containing a handler which has
already been invoked to handle a signaled condition, and has not yet finished.
The two kinds of handler clauses may be distinguished by their handler
state blocks.
$skip $need 2 $para 5
The compiler-generated code keeps the current HBT address current by
calling the EX.SET and EX.RST runtime routines.
These take an HBT address as a parameter:
$skip $need 5 $verb $ind +10
PUSHJ   EX.SET
Z       hbt

PUSHJ   EX.RST
Z       hbt
$ind -10$skip $need 2 $just $para 5
EX.SET is called at the start of the code controlled by a handler clause.
It sets the current HBT address, and marks the HSB for the handler clause
as "ready to handle a signaled condition".
At any point in the code controlled by one handler clause, which may be the
target of a branch from code controlled by some other handler clause,
EX.RST is called.
It resets the current HBT address, but doesn't affect the HSB.
$skip 2 $need 4 $section
^#.\\\&Handler State Blocks&
$entry ''
$entry '^#.	Handler State Blocks	II-\'
$skip $para 5
$skip 2 $need 4 $section
^#.\\\&The Runtime Exception Manager&
$entry '^#.	The Runtime Exception Manager	II-\'
$skip $para 5
The runtime exception manager consists of an exception intercept routine
for each standard condition, plus a central signal manager.
Intercept routines will only be loaded for those exceptions which are
to be handled by this program.
In an overlaid program, the intercept routines and signal manager must
be resident.
$skip $need 2 $para 5
Each intercept routine receives control when its exception occurs
(most intercept routine modules will need an initialization routine, to tell
the monitor about this).
Having done any exception-specific processing, an exception routine
loads the exception address (actually the address of the &next& instruction)
into register 0 and the address of an exception block into register 1,
and then branches to the central signal manager entry point, "EXCPT."\
("SIGNL." and "RSGNL." likewise load exception and exception block
addresses into registers 0 and 1, and then branch to "EXCPT.")
$skip $need 2 $para 5
The first word of an exception block contains the condition cell address in its
left half.
The low-order bit of the right half is 1 if the program may be continued
following the exception (true for assertion errors, case label errors, and
attentions, for example).
This word is followed by an ASCIZ string which, when preceded by "?" and
followed by "at user PC XXXXXX", will be the appropriate error message.
$skip $need 2 $para 5
An intercept routine for an exception with several sub-cases
(MATH_ERROR or SPECIAL_ERROR, for example) must also have a location where
it can save the particular sub-condition code, and an entry point for the
routine that returns the code.
The entry points are:
$skip $need 4 $ind +10 $verb $tab 20
MATHSTATUS	ST.MTH
USERSTATUS	ST.USR
IOSTATUS	IOSTL.
SPECIALSTATUS	ST.SPC
$just $ind -10
$footnote ''
$page
$center
Part II

Implementation
$verb
$skip 3
$tab 12, 15, 60
$toc
0 "