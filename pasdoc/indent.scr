$num off
$pag $ski 10 $cen
INDENT
&ABSTRACT&
$ski 3 $jus
$ind left +5 $ind right +5
INDENT is a text file processor for PASCAL source programs, similar to
the current PRETTY program (R.\N.\Faiman, 4-13-78). INDENT, however, is
more "tolerant" than PRETTY, and permits a greater degree of variation
and flexibility with respect to programming style. PRETTY completely
tokenizes the input, and then rearranges the tokens on lines
according to a fixed algorithm. INDENT does not rearrange tokens,
although it will split lines, and
 its indentation
algorithm may be modified somewhat by the user. Also, INDENT performs
a few functions of the current FORMAT program (J.\M.\Broughton, 
S.\Glauberman, 7-10-78).
$ski 6
$ind left 0
Prepared by:  J.\D.\Rosen
$par
Last updated: October 5, 1978
$tit right 'INDENT User''s Manual/\' right 'October 5, 1978'
$num off
$ind left 0 $ind right -5 $page $cen
&GENERAL DESCRIPTION&
$ski 2 $jus
The following functions are performed by INDENT:
$ski 2
$ind left +5 $par -5
1.\\\Insuring that blank lines or spaces are present at certain points in the
source, adding them only if there are not enough. The set of symbols
requiring spaces before or after them is specified by the user. All blank
lines or spaces in the input will be preserved in the output.
$ski $par -5
2.\\\Splitting lines only when (1) more than one (compound) statement or
declaration appears on an input line, or (2) output lines will be
longer than a specified maximum width. INDENT will never move symbols
between lines in any other cases, and will never join two or more input
lines into one output line.
$ski $par -5
3.\\\Indenting source lines according to an "indentation quantum", which
may be changed, to show the static structure of programs. User
selectable "options" are available for modifying the algorithm to
accomodate different personal or &de facto& standard styles.
$ski $par -5
4.\\\Performing indentation in a manner allowing source programs
to be formatted repetitively as they are entered or modified.
$ski $par -5
5.\\\Optionally performing several functions of the FORMAT program:
alignment of comments and case conversion of text.
$ski 2 $ind left -5 
The indentation "options" mentioned under (3) above, in combination
with judicious arrangement of tokens on an input line, permit the
use of INDENT as a source program entry/editing aid, accomodating
most personal and/or standard indentation styles. In addition,
INDENT can be used to reformat a poorly indented program.
$ski 
Generally, INDENT should be run over programs or program fragments
which have been newly entered without indentation. As it is also
capable of indenting a program which is partially indented, and
partially not, it may be run over source files which have been
extensively edited. However, minor edits, such as correction of
typos and syntax errors, should be entered with proper indentation,
as the savings in data entry time will be less than the cost
of running INDENT over the entire file.
$need 10 $cen
&USE OF INDENT&
$ski 2 $jus
INDENT is run from monitor level via
$ski $ver
     .r rnd:indent
$ski $jus
The user prompt is an asterisk (*). Input commands are of the form:
$ski $ver
  [  [outputfile =]  inputfile ]    [/options]
$ski $jus
All spaces in the command line are removed before processing.
 The default extensions are
'.NEW' for the output file, and '.PAS' for the input file. To terminate
INDENT, type a blank line.
$ski
Options are specified as a list after the slash, separated by commas. A
line containing only an option list changes the default values for the
remainder of the run.
An options is specified by a keyword, possibly requiring
a parenthisized list of parameters. Keywords may be abbreviated to
the minimum number of characters needed to make the keyword unambiguous.
The following is a summary of the available options:
$ski 2 $ind left +5 $par -5
AFTER (list)
$par -5
BEFORE (list)
$par
Specifies PASCAL reserved words and special symbols before or after
which a space must appear. INDENT will add a space only if 
none appear in the input.  Special symbols must be specified within quotes
or primes ( " or ' ); reserved words do not require delimiters. 
Quotes should be used in MIC files, as MIC requires that primes be
doubled to input a single prime to the program. The
items in the list must be separated by commas. The effect of
several AFTER or BEFORE options is cumulative, i.e.:
$ver $ski
/AFTER (','),AFTER('+')
/AFTER (',','+')
$ski $jus
are equivalent option selections. AFTER () or BEFORE () specify
no AFTER or BEFORE processing respectively, which are the defaults.
$ski $par -5
COLUMN (n)
$par
Specifies that terminal (end of line) comments are to be aligned to
column n in the output, similar to FORMAT. However, since INDENT will
not remove spaces from the input stream, terminal comments will
&not& be aligned if their position in the output line is to the
right of column n. In other words, comment alignment will only cause
the opening of terminal comments to be shifted &right&, if at all.
COLUMN(0) or COLUMN()
turns off comment alignment, which is the default.
$ski $par -5
INDENT (n  [,n]^1a* )
$par
Specifies the indentation option(s) to be used. The action of each
option is explained in detail later; the following
is a summary of the options:
$ski $ind left +3 $par -3
1--THEN [BEGIN] at the start of a line is recognized as a compound
statement heading (defined later) subordinate to its corresponding
IF <condition>, resulting in the THEN line (and corresponding ELSE, if present)
being indented a quantum more than the IF.
$ski $par -3
2--Continuation lines of compound statement headings are indented a
minimum of a quantum more than the keyword beginning the CSH; 
compound statement
terminators are indented a quantum more than the keyword; EXIT IF
is not de-indented; controlled statements of a compound statement
consisting only of BEGIN ... END are indented a minimum of the
indentation of the BEGIN.
$ski $par -3
3--Declarations of fields within a RECORD definition are indented
a minimum of a quantum past the RECORD keyword.
$ski $par -3
4--Continuation lines of procedure or function headings are indented
a quantum past the beginning of the line containing PROCEDURE or
FUNCTION.
$ski $par -3
5--A BEGIN appearing first on a line which would normally be considered
part of a compound statement heading is instead treated as the 
beginning of a compound statement in its own right, analogous to
the treatment of THEN under INDENT(1). Thus, the BEGIN line (and
corresponding END) will be indented a quantum more than the preceding
CSH keyword. Statements controlled by the BEGIN will be indented a
quantum in from the BEGIN, unless INDENT(2) is also specified, in which
case they will be indented the same as the BEGIN. Thus, INDENT(2,5)
is nearly identical to INDENT(2), and thus should be seldom used.
$ski 
$ind left -3
INDENT() specifies that no options are to be used, which is the default.
$ski 2
$par -5
SPREAD
$par -5
NOSPREAD
$par
Specifies the insertion or non-insertion of blank lines at points in
the program. SPREAD specifies enforcement of a blank line 
or $PAGE directive
before
all program sections (i.e. headings, LABEL, CONST, TYPE, VAR, and
code bodies), inserting a blank line if necessary. NOSPREAD specifies no
such enforcement, which is the default.
$ski 2 $par -5
WIDTH (n)
$par
Specifies the maximum output width. Lines exceeding this width will
be split as explained in detail below. The default width is 100.
$ski 2
$par -5
WORD ( UP || DOWN || MIXED || NONE )
$par -5
TEXT ( UP || DOWN || NONE )
$par
Specifies case conversion to be performed on reserved WORDs and
all other program TEXT (except within comments or string literals). UP
specifies upper casing, DOWN lower casing. MIXED, for reserved words only,
specifies the first letter capitalized, all others decapitalized (e.g.
'Begin').  NONE specifies no change, which is the default. UP, DOWN,
MIXED, and NONE are considered option keywords, and thus can be 
abbreviated as explained above.
$ski 2 $par -5
QUANTUM (n)
$par
Specifies the indentation quantum to be used. The default is 2.
$ind left -5 $ski 3
$need 6 $cen
&Command Files&
$ski 2 $jus
A command file facility is available, similar to that provided
by DEC software.
An input line consisting only of a file name preceded by an at sign
('@') specifies a command file (default extension '.CMD') to be read.
There are two levels of indirection available, i.e.\a line within
a command file may invoke another command file. This feature should be
useful to groups wishing to enforce a standard set of formatting
options (by setting up a common command file containing the standard
options). Individual user's command files may then contain an indirection
to the common option file.
$ski
The primary input is normally taken from 'TTY:'. However, before INDENT
opens TTY:, it will attempt to open a file '###IND.TMP' as its primary
source. If this succeeds, the contents of the file will be executed
as if its lines were typed from the terminal, and a blank line or end
of file will terminate the program. This is primarily intended for
direct invocation of INDENT from another program.
$ski
Erroneous commands cause an error message to appear on TTY:. If
a command file is being read, processing continues with the
line after the erroneous line.
$page
$cen
&Formatting of Comments&
$jus
$skip
There are two kinds of comments which must be considered: "stand-alone"
comments, whose beginning (the '(*') is the first symbol on a line, and
"embedded" comments, whose beginning is preceded by at least one non-comment
symbol on the same line.
A comment whose beginning immediately follows the end of another comment
on the same line, e.g., "*) <space(s)> (*", is considered to be a continuation
of the preceding comment, and is indented accordingly.
Spaces between them, if any, are preserved in the output.
There is one property which is shared by both, namely, that lines are &never&
split within the text of comments.
Further, a line will never be split immediately before the beginning of
a comment, i.e., an embedded comment will never be turned into a stand-alone
one.
However, lines will be split after the end of a comment if the line
was a continuation line of the comment, and the end of the comment was followed
by a non-comment symbol.
For example,
$skip
$ver
$ind lef 4
IF FOO = BAH THEN (*This is a comment
extending over more than one line*) BEGIN
$ind lef 0
$jus
$skip
will be split after the comment, but
$skip
$ind lef 4
$ver
IF FOO = BAH (* BAH is something *) THEN BEGIN
$skip
     and
$skip
(*This IF does X*) IF FOO = BAH THEN BEGIN
$skip
$ind lef 0
$jus
will not be split after the comment.
$skip
The program will insure that at least one blank line appears before a stand-alone
comment, unless it is immediately preceded by another stand-alone comment
or $PAGE directive.
Similarly, it will insure that at least one blank line follows, unless the
comment is immediately followed by another stand-alone comment
or $PAGE directive.
As blank lines and spacing are preserved by INDENT, blank lines between
stand-alone comments, and spaces before and after the beginning and end
of comments are preserved.
$skip
The beginning '(*' of stand-alone comments is always indented to
the indentation of the program text &following& the comment, with
two exceptions. If a compiler directive follows the comment, it
will be aligned to the current "minimum indentation", a term which
is defined later. If the comment is at the end of the input file, it
is aligned to the left margin, i.e.\the first line of the (set of)
comment(s) is placed at column one. 
$skip
Lines containing embedded comments are always indented according to the indentation
appropriate for the program text which precedes the comment.
However, the first non-blank character in continuation lines of embedded comments
is always positioned under the first non-blank character after the '(*' initiating
the comment.
Thus,
$skip
$ind lef 4
$ver
IF FOO = BAH THEN (*This is an example
   of an embedded comment*)
$skip
$par -5
will always appear as:
$skip
IF FOO = BAH THEN (*This is an example
                    of an embedded comment*)
$skip
$ind lef 0
$jus
no matter how the continuation line was indented in the input.
Programmers should take this into account if such comments are to contain
formatted information, which should seldom be the case, as such information
is normally put in stand-alone comments.
If no text follows the '(*' in an embedded comment, continuation lines
are indented a quantum (defined later) to the right of the '(*', e.g.,
$skip
$ver
$ind lef 4
IF FOO = BAH THEN (*
                    A continuation line*)
$skip
$ind lef 0
$center
&Directives&
$ski 2 $jus 
The keyword of a compiler directive line is capitalized. Other than this, 
the directive line is written verbatim to the output file with a
zero indentation.
$ski 2 $cen
&Line Splitting&
$skip
$jus
As noted previously, lines will be split if (1) non-comment text follows
a continuation line of a comment, (2) multiple statements or declarations
appear on a line, and (3) the non-comment text exceeds a user specifiable
maximum width.
The instances where the second rule is applied are discussed in each of the
following sections describing the handling of different parts of a program.
The final rule is applied if, after application of the first two rules and
indentation according to program structure, a non-comment symbol is still
to the right of the maximum width.
The application of this rule is the same throughout the program, as follows:
$skip
$ind lef 4
$par -4
1.\\The line is searched from the right for one of the following
symbols:
$skip
';', ':=', ANDIF, ORIF, AND, OR, THEN, DO
$skip
where the column position of the end of the token is less than or equal
to the maximum.
If such a symbol is found, the line is split after it, subject to restriction
(3a) below.
$skip
$par -4
2.\\If no such symbol is found, the line is split between two symbols 
separated by one or more spaces, where the split point is less than
or equal to the maximum, subject to restriction (3a).
$ski $par -4
3.\\If neither (1) nor (2) may be applied, then the line is split after the first non-comment
symbol ending in a column less than or equal to the maximum width, subject
to the following restrictions:
$ind lef 8
$skip
$par -4
a.\\If a comment immediately follows the symbol, the line will be split
after it, insuring that an embedded comment never becomes stand-alone.
$skip
$par -4
b.\\At least one symbol must remain on the line, even if the maximum width
is exceeded.
While this restriction might seem obvious, note that it is needed to resolve
the situation of a line containing only a literal extending beyond the maximum
width.
$skip
$par -4
c.\\A line is never split before a ',', ';' or ':'.
Also, a line is never split between multiple right or left parentheses.
This is equivalent to stating that a symbol followed by a comma, colon,
or semicolon, a string of left parentheses, and a string of right parentheses
are all considered to be single symbols for purposes of line splitting.
$skip
$ind lef 0
$center
&Indenting&
$jus
$skip
Programs will be indented to show their structure.
The points at which indentation is either increased or decreased are discussed
in the following sections.
The amount by which indentation is normally changed is called the indentation
&quantum&, and may be specified by the user, with two spaces being the default.
Some general indentation rules follow:
$skip
$ind lef 4
$par -4
1.\\For purposes of indenting, the program is viewed as a sequence of statements
and declarations, whose precise forms are discussed later.
It is important to note that these do not always coincide with Pascal statements
and declarations.
For a given statement or declaration, a &minimum indentation& is established.
No line of a statement or declaration will appear to the left of this column
in the output.
The minimum indentation is determined in the normal manner, i.e., by the
location of the statement or declaration in the program structure.
Statements controlled by other statements and declarations subordinate to
other declarations (as in the case of records) are indented an additional quantum
from the indentation of the beginning of the superordinate statement or declaration.
All statements and declarations begin with a &keyword& (or identifier), and all
line(s) composing a statement or declaration are indented to the same column
(or farther right) as the keyword.
Thus, in those cases where the keyword does not appear, and is not required
to appear first on a line, statements and declarations may be indented more
than the normal minimum, based on the quantum, e.g.,
$skip
$ver
A: BEGIN     is output as     A: BEGIN
B:= 2;                             B:= 2;
C:= 3                              C:= 3
END;                             END;
$skip
$jus
$par -4
2.\\Normally, when a statement or declaration extends across multiple lines
in the input, all lines but the first are indented an additional quantum
from the keyword.
The one exception is continuation lines of compound statement headings (discussed
in more detail later), where normally, all lines are indented the same as the
keyword, e.g.,
$skip
$ver
WHILE ... DO     not     WHILE ... DO
BEGIN                      BEGIN
  ...                        ...
$skip
$jus
However, if the first continuation line of any statement
or declaration is indented
&more than a quantum& in the &input relative& to the keyword, its relative
indentation will be preserved, e.g., if the following is input:
$skip
$ver
A:= ( FOO + BAH ) *
      ABS(BLETCH);
$skip
$jus
ABS will still line up with FOO in the output.
$ski
Finally, the indentation of subsequent continuation lines is
preserved relative to the first continuation line, so long as they
remain a quant more to the right of the statement keyword.
For example:
$ski $ver
TYPE X=(                  produces               TYPE X=(
FOO,                                                    FOO,
  FOO1,                                                   FOO1,
  FOO2,                                                   FOO2,
BAH);                                                   BAH);
$skip
$jus
$par -4
3.\\As noted previously, lines may be split either because they are too long,
or because (1) text follows a comment continuation line or (2) they contain multiple
statements or declarations.
If they are merely too long, the new line will always be indented a quantum more
than the line it was split from in the output.
However, in the second case, the new line will be assumed to have had no indentation
in the input, and hence will always have the current minimum indentation in the
output.
$ind lef 0
$skip
$center
&Formatting of (Code) Bodies&
$jus
$skip
Before launching into a discussion of how the executable portion of Pascal
programs will be formatted, it is necessary to define a few terms.
A &compound statement heading& is any of the following:
$skip
$ind lef 4
$ver
$need 5
&CASE& ... OF
&FOR& ... DO [BEGIN]
&WHILE& ... DO [BEGIN]
&WITH& ... DO [BEGIN]
&EXIT& IF ... DO
&IF& ... THEN [BEGIN]
&ELSE& IF ... THEN [BEGIN]
&ELSE& [BEGIN]
&BEGIN&
&LOOP&
&REPEAT&
$skip
$ind lef 0
$jus
ELSE [BEGIN] is treated as a compound statement whose indentation is a function
of a corresponding IF or ELSE IF.
Note that when BEGIN ... END is used to delimit statement(s) under control of
a compound statement, the BEGIN is considered part of the heading of that statement.
Otherwise, it is considered a compound statement heading in its own right,
as when it immediately follows a case label.
In each of the above statement fragments, the &compound statement keyword&
is underlined.
$skip
Lines in the body are always split before being indented in the following
instances:
$skip
$ind lef 4
$par -4
1.\\&Before& END, UNTIL, ELSE, and a statement or CASE label.
Lines are also split before a compound statement keyword, if a portion of another compound
statement heading precedes it somewhere on the line.
Note that as ELSE IF is considered to be a compound statement, it is not
split between the ELSE and the IF.
Also, while BEGIN may sometimes be considered a keyword for purposes of
indenting, it is not considered a keyword when splitting is performed.
$skip
$par -4
2.\\&After& END[;], UNTIL...[;], BEGIN, REPEAT, LOOP, semicolon, or a
colon following a non-case label.
Lines will be split after any embedded comment(s) immediately following
any of the above.
$skip
$ind lef 0
Indenting, after lines have been split as described above, proceeds as
follows:
$skip
$ind lef 4
$par -4
1.\\The indentation of the BEGIN at the head of the body is always the
same as the indentation of the corresponding PROGRAM or [PUBLIC] FUNCTION/PROCEDURE
heading, which is determined by lexical level.
Headings of first-level routines (and the PROGRAM heading) are indented zero,
second-level routines, one quantum, and so on.
$skip
$par -4
2.\\Statement(s) controlled by a compound statement are indented one quantum
from the controlling statement keyword, with relative indentation of statement
continuation lines preserved as described previously.
The outermost BEGIN...END of the body is treated as a compound statement.
$skip
$par -4
3.\\Continuation lines of compound statement headings are indented at a minimum
to the column position of the keyword.
Compound statement terminators (END, UNTIL) are indented to the position
of the corresponding keyword, as is ELSE (to the IF).
$skip
$par -4
4.\\EXIT IF is normally indented a quantum less than the current minimum
indentation if it occurs first on a line.
Note that since a BEGIN after EXIT IF is &not& considered part of the EXIT
IF heading, subordinate statements will be indented according to the
position of the BEGIN, e.g., if BEGIN is on the same line, then
$skip
$ver
LOOP
  BAH(IT,DONE);
EXIT IF DONE DO BEGIN
                  SAVEIT:= IT;
                  A[IT]:= FOO
                END;
$need 10
  NEXT;
$ski $jus
and if it is on a separate line:
$skip
$ver
LOOP
  BAH(IT,DONE);
EXIT IF DONE DO
  BEGIN
    SAVEIT:= IT;
    A[IT]:= FOO
  END;
  NEXT;
$skip
$jus
$par -4
5.\\Case labels are indented a quantum more than the CASE (and always begin
a line, by virtue of the semicolon splitting).
The minimum indentation of the statement which follows is a quantum more
than the first label, although, as mentioned before, if the keyword occurs
on the same line as (part of) the label, the indentation may be more.
$skip
$par -4
6.\\Non-case (declared) statement labels are always indented to the level
of the BEGIN...END enclosing the body, and the line is split if any code
follows.
$skip
$ind lef 0
Three indenting options are provided, INDENT(1), INDENT(2), and
INDENT(5), which implement
 popular variations of the default indenting method.
None can be accomplished by supplying relative indentation in the input,
hence the options.
$skip
INDENT(1) causes IF statements (note: only IF statements, not ELSE IF)
where the THEN begins a subsequent line to
be indented thusly:
$ind lef 4
$skip
$ver
$need 7
BEGIN
  IF A<>B
    THEN BEGIN
      T:= A;
      A:= B;
    END
    ELSE T:= 0;
$skip
$ind lef 0
$jus
This is accomplished internally by treating a THEN which begins a line as
a compound statement which may have a corresponding ELSE.
$skip
INDENT(2) has the following effects:
$skip
$ind lef 4
$par -4
1.\\Continuation line(s) in compound statements are indented a minimum of
a quantum more than the keyword, as are compound statement terminators.
$skip
$par -4
2.\\The minimum indentation of controlled statements of a compound statement
consisting only of BEGIN...END is the same as for the BEGIN.
$skip
$par -4
3.\\EXIT IF is not de-indented.
$skip
$ind lef 0
An example of the effect of INDENT(2):
$skip
$ind lef 4
$ver
BEGIN
IF A<>B THEN
  BEGIN
  T:= A;
  A:= B
  END
ELSE A:= 0;
REPEAT
  EXIT IF Z[A]=X DO
    FOUND:= TRUE;
  A:= A+1;
  UNTIL A>100;
$skip
$ind lef 0
$jus
$ski 2
INDENT(5) causes a BEGIN which terminates a compound statement heading
and which is first on the input line to be indented a quantum past
the compound statement header keyword (independent of INDENT(2)).
Controlled statements of the compound statement normally will be indented a quantum
past the BEGIN, and the END is indented the same as the BEGIN.
An example of INDENT (5):
$ski 2 $ver $ind left +4
BEGIN
  IF A <> B THEN
    BEGIN
      FOO := BAH;
      LOOP
        FOO := FOO + 1;
      EXIT IF FOO = B DO RETURN;
        DO_FOO(FOO)
      END
    END
  ELSE IF NOT Q 
  THEN
    BEGIN
      ...
    END
  ELSE
  IF NOT R THEN
    BEGIN
      etc.
$ski 2 $ind left -4
$jus
$need 12
Note, that concurrent specification of INDENT(2) overrides the additional
indentation of statements within BEGIN ... END. Thus, the above
example with INDENT(2,5) produces the following, which is the same
as would be produced by INDENT(2) alone:
$ski 2 $ver $ind left +4
BEGIN
  IF A <> B THEN
    BEGIN
    FOO := BAH;
    LOOP
      FOO := FOO + 1;
      EXIT IF FOO = B DO RETURN;
      DO_FOO(FOO)
    END
    END
  ELSE IF NOT Q
        etc.
$skip
$jus $ind left -4
All indentation options are non-exclusive, and any combination may
be specified, e.g. INDENT (1,2,5).
$ski 2
$center
&Formatting of Declarations&
$jus
$skip
Lines in declaration sections (LABEL, CONST, TYPE, VAR) are always split
before being indented in the following instances:
$skip
$ind lef 4
$par -4
1.\\&Before& LABEL, TYPE, EXTERNAL, PUBLIC, STATIC, END, and CASE...OF.
Also before PROCEDURE, FUNCTION, VAR, and CONST if not preceded by a storage class, e.g.,
EXTERNAL.
Exceptions to this rule are that lines are not split before PROCEDURE and
FUNCTION in routine types, and VAR in routine headings.
$skip
$par -4
2.\\&After& RECORD, CASE...OF, and semicolon (except within routine headings,
described in the next section).
As always, an embedded comment immediately after will be retained on the
same line.
$skip
$ind lef 0
The first line of declaration sections (the line containing the section
keyword, e.g., VAR) is indented a quantum more than the enclosing routine
heading if it is local, and zero if at the outermost level of scope.
By virtue of line splitting after semicolons, all identifier(s) declared
in declaration sections will appear first on a line, except for the
first declaration.
All identifiers declared in a section will be lined up at a column
position determined by the first declaration.
This column position becomes the minimum indentation for the section.
If the first declaration appears on the same line as the section
keyword, declarations will be indented thusly:
$skip
$ind lef 4
$ver
VAR A: ...;
    B,
    C: ...;
$ind lef 0
$jus
$ski
If it appears on a subsequent line, all declarations will be indented
a quantum from the line containing the section keyword, e.g.,
$ind lef 4
$ver
VAR
  A: ...;
  B,
  C: ...;
$ski
$ind lef 0
$jus
With the exception of RECORD types, which are subject to additional formatting,
lines composing a declaration will be indented as follows:
$ski
$ind lef 4
$par -4
1.\\Line(s) containing identifiers being declared will be positioned at the
minimum indentation for the section.
Thus,
$ski
$ver
  A,     becomes     A,
B,                   B,
    C: ...;          C: ...;
$ski
$jus
$par -4
2.\\Subsequent lines will be indented a minimum of a quantum more than the
identifier lines, with relative indentation between them &preserved&. Thus, in:
$ski
$ver
FOO = (BAH,
         BLETCH,
         ICK,
       BAR);
$ski
$jus
the offsetting of subsequent lines of the declaration will be preserved because
they will all end up indented more than a quantum from FOO.
$ski
$ind lef 0
In RECORD types, as lines are always split after semicolons, RECORD, and before
END, the first identifier of a field declaration in the fixed part will
always start a line.
Lines containing fixed part field identifiers will be placed at the minimum
indentation with continuation lines of field declarations being indented
a minimum of a quantum more (with relative indentation preserved).
Thus, the indenting of field declarations is analogous to the indenting of
first level declarations.
There are, however, two ways that the minimum indentation of fixed part
field identifiers is determined.
Normally, this is set to a quantum more than the indentation of the line
containing RECORD, e.g.,
$ski
$ind lef 4
$ver
$need 4
VAR A: RECORD
  F1: FOO;
  F2: ARRAY[1..2] OF BOOLEAN
END;
$ind lef 0
$ski
$jus
$need 7
If option INDENT(3) is specified, the minimum indentation is set to a quantum
more than the position  of the RECORD keyword, e.g.,
$ski
$ver
$ind lef 4
VAR A: RECORD
         F1: FOO;
         F2: ARRAY[1..2] OF BOOLEAN
       END;
$ski
$ind lef 0
$jus
CASE...OF, which always appears alone on a line, is forced to line up
with fixed part declarations.
Lines containing case labels are indented a quantum more than the CASE.
Field identifiers in variants (and an embedded CASE, if there is one) are
aligned to the same column, determined by the position of the first variant
field.
If the first variant field is on a separate line from the label(s), the line
will be indented a quantum more than the label(s).
Examples of variant input and output:
$ski
$ind lef 4
$ver
CASE ... OF     produces     CASE ... OF
A:( F1: FOO;                   A:( F1: FOO;
F2: BAH;                           F2: BAH;
CASE ... OF                        CASE ... OF
$SKI
CASE ... OF                  CASE ... OF
A:                             A:
( F1: FOO;                       ( F1: FOO;
F2: BAH;                           F2: BAH;
CASE ... OF                        CASE ... OF
$SKI
CASE ... OF                  CASE ... OF
A:(                            A:(
F1: FOO;                         F1: FOO;
F2: BAH;                         F2: BAH;
CASE ... OF                      CASE ... OF
$skip
$ind lef 0
$jus
Note that in all instances, the variant fields (and the embedded CASE)
are lined up.
$skip
As demonstrated in previous examples, the END is normally aligned with the line
containing the corresponding RECORD, or, if INDENT(3) is specified, with the
RECORD itself.
$ski
$center
&Formatting of Headings&
$ski
$jus
Formatting of headings (which includes formatting of routine types) is
simplistic when compared to code bodies and declarations.
No arbitrary line splitting is performed.
Continuation lines of headings may be indented in two different ways:
$ski
$ind lef 4
$par -4
1.\\Normally, the are aligned with the first non-comment symbol following
the '(' at the beginning of the parameter list, e.g.,
$ski
$ver
PROCEDURE FOO( VAR A: BAH;
               X: BAR);
$ski
$jus
If nothing follows the '(', continuation lines are indented a quantum
from the '('.
If the heading has no parameters (or is the PROGRAM heading), but has
continuation lines, they are indented a quantum from the beginning of the
PROGRAM, PROCEDURE, or FUNCTION keyword.
$ski
$par -4
2.\\If INDENT(4) is specified, continuation lines are indented a quantum
from the beginning of the line containing the PROCEDURE, FUNCTION, or
PROGRAM keyword, e.g.,
$ski
$ver
EXTERNAL PROCEDURE FOO(
  VAR A: BAH;
  X: BAR);
$ski
$jus
$ind lef 0
In either case, if a parameter declaration is split, the continuation
line is lined up either under or a quantum to the right of the parameter
identifier, in the manner of declarations discussed in the previous
section.
$ski 2 $cen
&Implementation Notes&
$jus $ski 2
The portion of INDENT which processes the PASCAL input text consists
of four simulated coroutines, READER, SPLITR, FORMAT, and WRITER
(cf. O.\J.\Dahl et.\al., &Structured Programming&, Dahl, Dijkstra, and Hoare,
pp. 184-193).
 They resume
each other in a chain in the order above, and communicate via global variables
contained in the module INDCOM. READER inputs the text, identifies
tokens, and performs BEFORE and AFTER space insertion. READER also
remembers the original indentation of the source line, and the offset
from the first non-blank character of the line of the current token.
SPLITR performs 'semantic' line splitting, i.e. the splitting of lines
containing multiple statements, splitting after continuation lines
of embedded comments. SPLITR also performs blank line insertion
before and after stand-alone comments, and as appropriate when the
SPREAD option has been specified. FORMAT determines the output
indentation for each token according to its position in the program
structure. Declarations are formatted via recursive routines within
FORMAT, while the formatting of code bodies is performed using a
special stack data structure contained in the module INDSTK. Finally,
WRITER performs output to the output file, and performs 'length'
line splitting and comment alignment.
$page $cen
&General Notes&
$ski 2 $jus
It is instructive to think of INDENT as a six-pass program, with
the passes performing the following functions:
$ski $ind +3 $par -3
1.\Perform BEFORE and AFTER spacing
$par -3
2.\Split lines for 'semantics', indenting the new lines formed
from the old lines along the left margin (column zero).
$par -3
3.\Insert blank lines if necessary.
$par -3
4.\Indent each line consonant with its position in the program structure.
$par -3
5.\Split lines for length.
$par -3
6.\Align comments if specified.
$ind left -3 $ski
This image of INDENT is easier to deal with; using it, the user may more
easily predict the results of an INDENT run.
$ski
If lines are split for width violations, a second run of a
program through INDENT may
cause considerable changes, although in general the program was designed
to avoid this. The following examples show the repeated formatting
of a function declaration, in which the maximum output width aligns
with the closing parenthesis in the first example:
$ski 2 $ver $ind left +5
function FOO (var BAR: CHAR): packed array[1..10] of CHAR;

function FOO (var BAR: CHAR):
  packed array[1..10] of
  CHAR;

function FOO (var BAR: CHAR):
              packed array
                [1..10] of
              CHAR;
$SKI $JUS $IND LEFT -5
The first heading is the original input. In the second, the original line
was split twice for length (the 'CHAR;' will not fit on the second line),
and the resulting extra lines were indented a quantum from the original.
In the third, the two previously split lines were considered continuation
lines of the heading, and were indented under the VAR. This caused the
line 'PACKED ARRAY[1..10] OF' to exceed the maximum width, and it was
split after 'ARRAY', with the resulting line indented a quantum past
the original.
$ski
In general, these results will be obtained by the INDENTing of a
fairly pathological program with very long, complex input lines, and
by the selection of a very small maximum width.  The differences between
the successive executions of INDENT result from the fact that the
processing of a given token can change if it appears first on a line,
and the length splitting from the previous execution of INDENT
causes tokens which previously were embedded to appear first on the new line.
$ski
Specifically, it is very difficult to distinguish between an indented
compound statement header, and one split for length (this caused 
considerable consternation during testing).  I suggest that during
the program entry/editing phase, if you have any reason to
believe you will have problems with width splitting, that you
set width to a very large value (say 120).
 ?@G