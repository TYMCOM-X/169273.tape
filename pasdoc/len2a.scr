$margin 10 $width 75
$center
$skip 3
Language Enhancement Notes #2A

Exceptional Condition Handlers

Revision A

1 August 1980
$title left 'LEN-#2A' left 'Exceptional Condition Handlers' left '1 August 1980'
$skip 3 $just $section
^#.\\\&Introduction&
$skip $para 5
In LEN-#2 [1], the general problem of exceptional condition handling was
discussed,
and a particular mechanism was proposed for implementation in MDSI Pascal.
The proposal in that paper had a number of shortcomings.
In particular, its implementation would probably prove quite awkward.
This paper proposes a completely different mechanism, based on lexical binding
of handlers (as in the original MDSI Pascal Report [2]),
rather than dynamic binding (as in [1]).
This new proposal is based largely on the exception mechanism in the ADA
language [3].
$skip 2 $need 4 $section
^#.\\\&Terminology&
$skip $para 5
A &condition& is simply a name for a class of events that can occur
during the execution of a program.
Any particular occurence of such an event is referred to as an &exception&.
The occurrence of an exception always corresponds to the &signalling& of the
condition which names the class of events to which the exception belongs.
$skip 2 $need 4 $section
^#.\\\&Condition Names&
$skip $para 5
An exceptional condition is identified by a &condition name&.
A condition name is a symbol, just like any other symbol in a program;
that is, condition names are subject to the same scope rules as other symbols,
and a condition name may not conflict with any other symbol.
$skip 2 $need 4 $level +1 $section
^#\\\\\Exception Declarations
$skip $para 5
Names for user-defined conditions are declared in an &exception declaration&.
Condition names declared at the outermost level of a module may be declared
&public& or &external&.
As with public and external variables, it doesn't matter which module of a
program a condition name is declared public in, so long as it is declared
public in exactly one module, and external in every other module that uses it.
$skip $need 6 $verb $ind +5
<declaration> ::=
   <label declaration> | <data declaration> |
   <subroutine declaration> | <exception declaration>

<exception declaration> ::=
   [ &public& | &external& ] &exception&
      <identifier> [ ',' <identifier> ]*
$ind -5 $just
$skip 2 $need 4 $section
^#\\\\\Predefined Condition Names
$skip $para 5
In addition to the user-defined conditions, a number of condition names are
automatically provided in the standard environment.
The language will provide a basic set of standard conditions (see "Standard
Conditions"); however, additional predefined conditions may be provided by a
particular implementation.
Not every implementation will necessarily
be capable of signalling every standard condition.
$level -1 $skip 2 $need 4 $section
^#.\\\&Exception Handlers&
$skip $para 5
Any compound statement (i.e., a &begin&-&end& statement) may have a &handler
clause& associated with it.
A handler clause follows the statement list of the compound statement, and
precedes the &end& keyword.
Handler clauses are very similar to case statements, except that the
alternative statements in a handler clause are labelled with condition
names rather than with simple constants.
All code in
the statement list of a compound statement with a handler clause is said to
be &under the control of& the handler clause;
the handler clause is said to be &in effect& during the execution of the
statement list.
$skip $need 12 $verb $ind +5
<compound statement> ::=
   &begin& <statement list> [ <handler clause> ] &end&

<handler clause> ::=
   &exception& <handler> [ ';' <handler> ]* [';']

<handler> ::=
   <condition list> ':' <unlabelled statement>

<condition list> ::=
   <condition identifier> [ ',' <condition identifier> ]* |
   &others&
$ind -5 $just
$skip $need 2 $para 5
Normally, following completion of the statement list of a compound statement,
execution continues at the end of the compound statement.
If the compound statement is the body of a procedure or function, then
control returns to the point of call;
if it is the body of a main program, then the program stops.
$skip $para 5 $need 2
When an exception occurs, execution stops immediately, with
the "current location" set to the statement which was being executed.
The following algorithm is then applied:
$skip $ind +5
$para -5
[1]\\Is the current location under the control of a handler clause containing
a handler which is labelled with the signalled condition?
If so, then go to step [4].
$skip $para -5
[2]\\Is the current location in the main program?
If so, then print an error message and terminate the program.
$skip $para -5
[3]\\Terminate the current procedure or function, set the "current location" to
the location it was called from, and return to step [1].
$skip $para -5
[4]\\Execute the handler statement which is labelled with the signalled
condition.
Then continue as though the compound statement containing the executed
handler had terminated normally.
$ind -5 $skip $need 2 $para 5
Note that a handler clause which does not contain a handler for the signalled
condition will be ignored completely.
However, a handler with the &others& label will match any condition.
This allows you to write a handler which will be invoked when any exception
occurs, will perform some "cleanup" action, and will then resignal the
same condition.
$skip 2 $need 4 $section
^#.\\\&The SIGNAL Procedure&
$skip $para 5
The standard procedure SIGNAL has two uses.
It may be called with a condition name as an argument, to cause an exception
by signalling that condition.
This is intended primarily for signalling user-defined conditions.
(It is also possible to signal a standard condition, but that would be
unusual.)\
For example, a main program could declare a condition "failure", and its body
could be under the control of a handler for the "failure" condition.
Then any procedure in the program could return control directly to the main
program by signalling "failure".
This would serve the same purpose that is now served by non-local
goto statements.
$skip $need 2 $para 5
A call to SIGNAL without any arguments is only allowed within a handler.
Here, it resignals the condition that caused the activation of the handler.
This is particularly useful in &others& handlers, which may
perform some general action, and then resignal the condition,
allowing a specific handler for it to take control.
$skip 2 $need 4 $section
^#.\\\&Standard Conditions&
$skip $para 5
The language provides a collection of standard conditions, which need not
be explicitly declared by programs that refer to them.
These standard conditions may be signalled by the runtime system when it detects
the occurrence of an exception.
$skip 2 $need 4 $level +1 $section
^#\\\\\Runtime Checking Exceptions
$skip $para 5
Whenever one of the runtime checks generated for the /CHECK option detects an
error, it will cause an appropriate exception.
The condition names for these conditions are:
$skip $verb $ind +5
ASSERT_CHECK
CASE_CHECK
COMPAT_CHECK
FILE_CHECK
POINTER_CHECK
SUBSTRING_CHECK
SUBSCRIPT_CHECK
VALUE_CHECK
$ind -5 $just
$skip 2 $need 4 $section
^#\\\\\Input/Output Exceptions
$skip $para 5
When a fatal error occurs in an i/o statement, the runtime system will signal
the standard condition IO_ERROR.
A handler routine for this condition may use the standard function IOSTATUS to
find out just what kind of i/o error occurred.
$skip 2 $need 4 $section
^#\\\\\Environmental Exceptions
$skip $para 5
In any implementation in which a user can interrupt a running program, and
a running program can trap such user interrupts, a user interrupt will
cause the runtime system to signal the ATTENTION condition.
When a call to the dynamic storage allocator causes the heap to overflow, the
allocator will signal the STORAGE_OVERFLOW condition.
$skip 2 $need 4 $section
^#\\\\\Arithmetic Exceptions
$skip $para 5
The standard conditions OVERFLOW, UNDERFLOW, and ZERO_DIVIDE may be signalled
when the corresponding conditions occur in an arithmetic operation.
OVERFLOW and ZERO_DIVIDE are applicable to both integer and real arithmetic;
UNDERFLOW occurs when the result of a real operation is too small to represent.
$level -1 $skip 2 $need 4 $section
^#.\\\&"Unwind" Handlers&
$skip $para 5
One common problem can occur when a procedure A calls a procedure B, which takes
some action (for example, opening a file), calls a procedure C, reverses the
action (for example, closes the file), and returns to A.
If it is possible for control to be transferred from C directly back to A
(by a non-local goto or an exception), then B may never get the opportunity to
"clean up" after itself.
Earlier exceptional condition proposals [1, 2] have suggested a standard
condition UNWIND, which would be specially signalled whenever the runtime
system was about to terminate a procedure in such a case.
An UNWIND handler could then do the necessary cleaning up.
Unfortunately, UNWIND would have been a condition unlike any other
condition.
Under this new proposal, special "unwind" handlers are not
needed, since an &others& handler on a procedure body will always receive
control when any condition is signalled within it (or within any procedure
called by it), unless the condition is handled at a deeper level.
Thus, such an &others& handler can perform the function of an "unwind" handler,
resignalling the condition afterwards to pass it up to the handler that was
intended to deal with it.
$skip 2 $need 4 $section
^#.\\\&Synchronization&
$skip $para 5
When an exception occurs, the runtime system exception manager takes control,
suppressing any further exceptions until it has finished deciding what to with
this one.
Once it finds a handler for the condition, it passes control to the handler,
unsuppressing all exceptions again.
If an exception occurred while the runtime manager had control, it is
signalled now.
An exception which occurs during the execution of a handler will not be dealt
with by the handler clause containing the interrupted handler, since a
handler clause only applies to the statement list preceding it.
$skip 2 $need 7 $section
^#.\\\&Additional Features&
$skip $level +1 $section
^#\\\\\Error Control
$skip $para 5
The proposed exception handling mechanism provides considerable flexibility.
However, there are reasonable responses to many standard exceptions which
are not programmable with exception handlers.
In particular, exception handlers do not provide any way for a program to ignore
an exception completely, or to patch up the result of a failing arithmetic
operation and continue.
Therefore, the basic exception handling mechanism is augmented
with a mechanism for specifying special responses to some standard conditions.
This mechanism is invoked with a standard procedure call:
$skip $need 4 $para 5
ERR_SET (condition [, primary_action [, secondary_action]])
$skip $para 5
A call to ERR_SET tells the runtime exception manager how to respond when an
exception corresponding to the specified condition occurs.
The primary and secondary action parameters are each integers; when omitted,
they default to zero.
In the absence of an ERR_SET call, the action codes for each standard
condition are initially zero.
The primary action codes and their meanings are:
$skip $need 2 $ind +6 $para -6
&<&\0:\\Suppress any special response to the exception.
For the attention condition, this suppresses any special attention processing.
For runtime checks, i/o errors, and storage overflow, it means the program
will terminate with an error message.
For arithmetic exceptions, the exception will be ignored and program
execution will continue, probably with bad results.
$skip $need 2 $para -6
=\1:\\If any handler currently in effect is specifically labelled with the
condition name (&others& doesn't count), then signal the condition;
otherwise, take the secondary action.
$skip $need 2 $para -6
=\2:\\If any handler currently in effect will handle the exception (&others&
does count), then signal the exception; otherwise, take the secondary action.
$skip $need 2 $para -6
&>&\3:\\Take the secondary action.
$skip $need 4 $para -6
The secondary action codes and their meanings are:
$skip $para -6
&<&\0:\\Terminate the program with an appropriate message.
If the exception is one for which corrective action is possible (see code 1
below),
then the program may subsequently be continued, with the appropriate
corrective action taking place automatically.
$skip $need 2 $para -6
=\1:\\Take an appropriate corrective action, print a warning message, and
continue from the point at which the exception occurred.
The corrective action for an arithmetic exception is to substitute an
appropriate value for the result of the computation that failed (maximum
value for overflow and division by zero, zero for underflow).
Corrective action for an assertion or case runtime check is simply to
continue.
For other standard exceptions, no corrective action is possible, and the
program simply terminates.
$skip $need 2 $para -6
&>&\2:\\Take an appropriate corrective action and continue.
$ind -6
$skip 2 $need 4 $section
^#\\\\\Attention Masking
$skip $para 5
It is sometimes useful (particularly with the ATTENTION condition) to be able
to tell the runtime exception manager to recognize exceptions for a
particular condition, but to simply note their occurrence rather than signalling
the condition.
This is accomplished with the standard procedures MASK and UNMASK, and the
standard function SIGNALLED.
MASK\(condition) tells the runtime system not to signal the specified
condition when its corresponding exception occurs, but simply to make
a note of its occurrence, instead.
SIGNALLED\(condition) is a boolean function which returns TRUE if an
exception has occurred for the specified condition, and FALSE otherwise.
It also clears the condition, so that a subsequent
call to SIGNALLED will return FALSE unless another exception occurs.
UNMASK\(condition) cancels the effect of MASK; in addition, if an
exception has occurred while the condition was masked, and has not been
cleared by a call to SIGNALLED, then the condition will be signalled as soon
as it is unmasked.
$skip 2 $need 4 $section
^#\\\\\Effects with User-defined Conditions
$skip $para 5
The effect of ERR_SET and MASK is to control the signalling of a condition
when an exception is detected by the runtime exception manager.
However, when a condition is explicitly signalled with a call to SIGNAL,
the signalling and the exception are one and the same.
Therefore, while ERR_SET and MASK may be called with user-defined conditions,
they can have no effect on them, since user-defined exceptions can be
signalled only with explicit SIGNAL calls.
$skip $need 2 $para 5
However, it is possible to write an assembly language routine which provides
the same sort of environmental exception management for some user-defined
public condition that the runtime system provides for the ATTENTION
condition; and in this case, the assembly routine could also allow for
masking and ERR_SET control.
$level -1 $skip 2 $need 4 $section
^#.\\\&Implementation&
$skip $para 5
There are several main issues in the implementation of exceptional condition
handlers.
(1) What internal representation for conditions will allow unambiguous
discrimination of conditions, even those declared locally in different
modules?
(2) When a condition is signalled, how can the runtime exception manager
determine what handler clauses are currently in effect?
(3) How is a handler clause represented?
(4) Where is status information for conditions (primary action,
secondary action, masking, etc.) kept?
The implementation strategy described below is quite simple, but should
prove efficient enough to be practical.
$skip 2 $need 4 $level +1 $section
^#\\\\\Representation of Conditions
$skip $para 5
A condition cell is allocated in static variable storage for each
condition name.
The address of this cell may be taken as the internal representation of the
condition name.
A public condition name is implemented as a global symbol whose name is the
first six characters of the condition name, and whose value is the
condition cell address.
Standard conditions have cells in the runtime routines that manage them.
The global symbol name for a standard condition is a runtime name such as
ZDIV.C; the compiler translates the external name to the internal name.
Status information for a condition can be kept in its cell; fields must be
allocated for the primary and secondary action flags, the mask status, the
exception status (whether an exception has occurred while the condition is
masked), and the address of any special corrective action routine needed
for the condition.
$skip 2 $need 4 $section
^#\\\\\Representation of Handlers
$skip $para 5
A handler clause is represented as a table in the code area.
This table is simply a list of <condition cell address, handler address>
pairs.
A condition cell address of zero represents the &others& case.
A handler address of zero means to propagate the condition to the next
outer handler clause.
The handler clause table begins with the address of the next outer handler
clause table in the same procedure, or zero if there is none.
$skip 2 $need 4 $section
^#\\\\\Locating the Active Handler Clauses
$skip $para 5
Each stack frame must have a location reserved for the address of the current
handler clause table of that procedure.
All active handlers in a procedure can thus be located by starting with the
table pointed to in the stack frame, and then following the nested table links
at the start of each table.
To keep the value of the handler table word in the stack frame correct, the
code of the procedure must update it whenever it enters or leaves a controlled
statement.
The table address must also be set at any label which can be the target
of a non-local goto.
$skip 2 $need 4 $para 5
&References&
$skip $ind +5 $para -5
[1]\\N.\Faiman, "Exceptional Condition Hrs", &Language Enhancement Notes
#2&, 1 July 1980.
$skip $para -5
[2]\\&MDSI Pascal Report&, Preliminary Version, July 1978.
$skip $para -5
[3]\\"Preliminary Ada Reference Manual", &Sigplan Notices& 14, 6 (June 1979).
  8x