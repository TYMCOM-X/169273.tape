$num off
$title left 'Soft Paging with the New Compiler' left '17 February 1979' left 'Page \'
&Introduction&
$skip
There are two goals for the implementation of the soft paging schemes in the new
compiler:
first, simply providing support for the features, and second,
effectively utilizing the optimizer to minimize translations.
Here, a discussion of straightforward issues (such as adding areas and the
new builtin functions to the language) will be omitted;
rather, the thorny issues related to address calculation and code generation
will be considered.
$skip
The implementation outlined here is based on two central ideas.
First, pointer translation and offset interpretation (conversion to a pointer)
is performed during shaping by introducing new operators (vtrans and compose,
respectively) which signal to the code generator that the operation needs
to be performed.
This also allows the optimizer to eliminate redundant translation without
special additional techniques.  The operators may be optimized in the same
way that any other operator would be.
Second, the page replacement algorithm is tied to the code generator's
register allocation algorithm.  In essense, the technique outlined insures
that a page will stay in core as long as the compiler holds a translated
pointer to it in a register.
This permits reuse of a translated pointer in a register without concern that
it may become invalid as the result of some other translation.   (If the register
must be saved, then the untranslated pointer is stored and retranslated when it
is next needed.)
The introduction of a load and translate pointer
operator (or instruction) is proposed.
$skip
Compilation for an in-core area scheme does not need the sophisticated
runtime translation scheme outlined.  In fact, it does not need
any changes, except perhaps for interface.  The reason is that there is no
concern that a translated pointer value will become invalid.  Thus, once a
pointer is translated, its value can be reused as many times as the optimizer
recognizes that it can be.
$skip
No attempt is made here to perform the special kinds of pointer translations
performed by the old compiler -- that is, translate with offset or size specified.
It is assumed that whenever a pointer is translated, it points into the page
of interest.
The special translations unduly complicate code generation and optimization.
Since their value, compared with that of reducing the number of translation
operations, is relatively small, this omission seems reasonable.
$skip 2
&Shaping Changes&
$skip
For the sake of discussion, take NAT to mean normal address translation mode;
ICA to mean in-core area mode; and VM to mean full virtual mode.
$skip
In modifying the shaper to produce LLIF to run in a soft paged environment,
it is useful to distinguish between pointers which may contain virtual
addresses (any dereference of a pointer, possibly including a parameter
pointer) and those which must contain in-core addresses (address of a local
or static variable, the result of an alc_temp_op).
Making this distinction permits the code generator to use the least expensive
form of addressing that it can.
Currently, a pointer
value may be one of two kinds:  a byte or nonbyte address.  The former has
a descriptor which marks it as a 36-bit pointer; and the latter, as an
18-bit pointer.  (Pointers are consider equivalent to integers for the
purpose of code generation.)
To introduce virtual pointers, it is necessary to tag the pointer in some
way -- for example, as a 35-bit pointer.
(Generation of virtual byte pointers will be addressed later.)
$skip
The rules for the interpretation of virtual addresses which must be embodied
in the shaper are as follows:
$skip
$ind left 8
$par -3
1.\The case of indirection through a parameter pointer must be separated
from that of indirection through some other pointer.   A parameter pointer
is a nonvirtual pointer in NAT or ICA mode, and a virtual pointer in VM mode.
$skip
$par -3
2.\Whenever indirection through a virtual pointer occurs in ICA mode, then
transform it as follows:  ptr: ptr35 => vtrans (ptr:ptr35): ptr18.
This handles translation for ICA mode;  the remaining rules apply only to
VM mode.
$skip
$par -3
3.\In the case of an access of an element of an array pointed to by a virtual
pointer, it is necessary to include the index calculation in the address to
be translated.  This is necessary because the page replacement algorithm
requires that a translated address remain intact -- e.g. that an index not be
added to it.  The transformation is as follows:
$skip
$par +10
offset [ subscripts + vptr ] =>
$par +15
0 [ (subscripts + offset) + vptr ]
$skip
Note that the array subscripting code insures that an index is always of the
form "subscripts + ptr" if a pointer is involved in the address, even in the
case of a multidimensional array.
$skip
$par -3
4.\In any case where an access is implied -- e.g. a mem_ref is formed or
a desc_ref (the address part) is constructed, an index which is a
virtual pointer, or involves a virtual pointer must be translated:
$skip
$par +10
offset [ virtual_index ] =>
$par +15
offset [ vtrans (virtual_index) ]
$skip
Notice that the offset will only be nonzero in the case of a reference to a
field within a record addressed by a virtual pointer.
$skip
$par -3
5.\Whenever the address of an item is taken (passing a parameter by address,
processing the address function, etc.), then any remaining offset must be
be subsumed into the address.  &No& translation would be applied.  One possible
problem here is that the code for passing set and string parameters acquires
the address of the string from the descriptor.  As noted above, this is a
translated address;  therefore, care must be taken to strip any translation
present.
$skip
$par +10
addr ( offset [ subscripts + vptr ] ) =>
$par +15
offset + subscripts + vptr
$ind left 0
$skip
These rules would be embodied in the "access" group of routines.  Much
care must be taken to insure that all the cases work out properly.  It
will probably be necessary to add additional wrapping routines that return
the appropriate flavor address for particular contexts, depending on the
mode of compilation (NAT, ICA, or VM).
$skip
Offset interpretation is performed by transforming a dereferenced offset
as follows:
$skip
$ind left 10
$ver
$ver
1:    p
2:    ptrref (1)
3:    fieldref (2, off)
4:    ptrref (3)
$skip
$par -3
becomes
$skip
1:    p
2:    vtrans (1)
3:    mem_ref off[2]
4:    compose (2, 3)
5:    vtrans (4)
$skip
$ind left 0
$jus
Here we assume that the vtrans function works as in the old compiler:
it produces a translated address in the RH and the original area id
somewhere in the LH.  The reason we compose with the translated pointer,
is that it is certain to be in a register.
$skip 2
&Code Generator Changes&
$skip
In VM mode, the vtrans operator must be treated specially.  Application
of the operator must be deferred until the time a referencing operator
is fetched.  When the value of a vtrans operator is cleared from its
register, the value should not be saved in a temporary;  rather, the
original untranslated pointer must be stored.  It will be retranslated
when reloaded.
$skip
This latter requirement will be tricky to implement.  It is one of those
cases where a value may have an implicit reference long after its last
explicit reference.
Therefore, when a vtrans operation is first encountered, the following
code must be generated:
$skip
$ind left 10
$ver
$tabs 1,5,13,21,29,37,45,53,61
	MOVE	reg,ptr
	MOVEM	reg,$1		; $1 is as yet unallocated temp
				; for the vtrans node
	PUSHJ	17,VTRANS.
	ARG	reg2,ptr	; reg2 will contain translated
				; address
$skip
$jus
The temporary is &not& marked as allocated on this first reference.
If the operator has only one use, or is never displaced from the register,
then the copy of the untranslated pointer will be deleted by cleanup.
Later if the register is cleared, the temporary should be marked as allocated.
On a subsequent use:
$skip
$ver
	PUSHJ	17,VTRANS.
	ARG	reg3,$1
$jus
$ind left 0
$skip
No special modifications are needed in the code generator to support ICA mode
except to implement the new operators in a straightforward way.
$skip 2
&Virtual Heap Runtime Changes&
$skip
Since we want to be able to leave translated pointers in registers for as
long as possible, without having to worry whether or not they will become
invalidated accidently,
the following change to the runtime's page replacement algorithm is suggested.
$skip
$ind left 5
Whenever a pointer is translated and loaded into a register, the page which
is reference remains locked in core as long as the pointer remains live
in the register.
A pointer "dies" when (1) another pointer is translated and loaded into the
same register, or (2) some other nonpointer value is loaded into the register.
$ind left 0
$skip
Essentially, the runtime has at least one page buffer for each register in
which the compiler might load a translated pointer (e.g. 2..15).
When a pointer is translated, the page buffer in which it points is locked by reference count,
and the value of the translated pointer and the buffer number stored in an
array index by
register number.  If a translation fails and there are no free buffers,
then we check all registers to see if they still contain a live translated
pointer, and for each which does not, free the buffer which they were
thought to lock.  Specifically:
$skip
$ind left 8
$par -3
1.\The buffer previously locked by the register to be loaded on this operation
is freed, as a pointer which it contains dies upon loading the new pointer.
$skip
$par -3
2.\For all other registers, we compare the saved value of the translated
pointer with the current contents of the register.  If different,
then we assume that the pointer is dead, and free the associated buffer.
This will on occasion give a
false positive result, but since (1) insures that we will always have
at least one free buffer, it does not matter.
$ind left 0
$skip
This will produce at least one free buffer into which the new page can
be loaded.
More sophisticated algorithms can be applied to resolve ties.
$skip
This ignores the problem of where to store page tables for lookup.  There are
at least two solutions to this problem.
First, a different lookup strategy can be employed which is optimized for
searching a small number of buffers.
Second, allocate buffers numbering at least two times the number of virtual
pointer registers used by the compiler (this can be kept small to reduce
storage).
$skip
This technique works with the compiler's register allocation scheme in the
following way.
Assume that there is a with reference active across an external procedure
call.  If the pointer is loaded in a register at the time of the call,
then because external calls kill all registers, it will be cleared and
reloaded (retranslated) after the call.  If, on the other hand, the call
is to an internal procedure which does not alter the register in which
the pointer is loaded, the pointer can remain in the register across the
call.  Since the pointer remains in the register &locking& the page buffer
it translations, the internal procedure can make as many references as
as it wants in &other& registers, without invalidating the original address.
   