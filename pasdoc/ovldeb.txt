






                                ODMS Version 3.0
                   Sharable Overlays and the Pascal Debugger
                                  June 6, 1980



     Version 3.0 of the Pascal overlay system will include a  facility  for
     declaring  and  using  sharable overlays.  This document describes how
     the Pascal Debugger will be made to work in a  program  with  sharable
     overlays.  First, a summary is given of where the Debugger will reside
     and how it is linked to the rest of the program.  Second,  a  list  of
     the  actions  required of ODMS when debug programs are built is given.
     Finally, the changes required in the Pascal Debugger are listed.


     Linking in the Debugger

     The Debugger will be linked with MAIN and placed in the  low  segment.
     Placing  the Debugger in the low segment will require special versions
     of the Debugger REL files.  These will  be  produced  via  a  Debugger
     maintenance  program  which  will change the origin records of the REL
     files to indicate placement of  the  code  in  the  low  segment.  The
     maintenance  program  will  also  have  to change the text of external
     requests in the REL files.  This is necessary since the Debugger  must
     call  all  runtime  routines  via  local  transfer vectors.  Since the
     Debugger is linked with MAIN and  MAIN  is  linked  with  the  runtime
     routines,  pseudonyms  for  the runtime routines must be created which
     reference  local  transfer  vector  entries  for  the  actual  runtime
     routines.  A disk file will be maintained which will contain the names
     of each external reference  of  the  Debugger  and  the  text  of  the
     corresponding pseudonym.


     Requirements of ODMS

     To include the Pascal Debugger the user must include the DEBUG keyword
     in the MDL SYSTEM section.  When the  DEBUG  keyword  is  present  and
     sharable   overlays   are  declared,  ODMS  will  take  the  following
     additional actions when a BUILD command is given.  First, when a BUILD
     MAIN  command  is  given  a master transfer vector (MTV) entry for the
     Debugger's  entry  point  (DEBUG$)  is  generated.  In  addition,  the
     modified  Debugger  REL  files must be forced in, either by explicitly
     including them in the LINK command file or by generating a request for
     a  library  symbol which will pull the overlay version of the Debugger
     in from the Pascal library.  Second, a BUILD command  for  a  sharable
     overlay  will  generate  local transfer vector entries for the runtime
     routines used by the Debugger.  ODMS will obtain  these  symbols  from
     the same disk file used by the Debugger maintenance program.  Finally,
     a BUILD of any overlay requires ODMS to generate a definition of STMT.
     as a MTV location.





                                     - 1 -






                                Sharable overlays and the Pascal Debugger/2
                                                               June 6, 1980


     Debugger Changes Required

     Several  minor  user  restrictions  or  Debugger  changes required are
     summarized below.  The one user restriction, present in Version 2.0 as
     well,  concerns  displaying  public variables or constants declared in
     overlays.  The Debugger determines the address of  vars  or  constants
     which  are declared external in the .DEB file by looking up the symbol
     name in the LINK symbol table.  Since the link symbol  table  contains
     only  entries  for PUBLICs declared in the link of MAIN, publics local
     to overlays will show up undefined.  Such variables and constants  can
     be  displayed  by opening the module in which they are declared.  They
     will then not appear as external in the .DEB file and can  be  located
     from their known offset within the (Pascal) module's low segment.

     The  first  change  is  also  required  for version 2.0.  The Debugger
     currently uses the value 377777b to  indicate  a  nil  overlay  module
     number  (this  value  is  placed  in a 17 bit field).  The new overlay
     system uses negative overlay module  indices  for  sharable  overlays.
     The  Debugger  itself does not operate on these overlay module indices
     except to compare them with the nil index.  Version 2.0 of the overlay
     manager  treats  overlay  module  indices  as  if  they  were declared
     -200000b..177777b, with the value -200000b reserved to indicate a  nil
     module  index.  The  Debugger should retain its present declaration of
     overlay module indices as 0..377777b and treat the  value  200000b  as
     the nil module index.

     The  Debugger  currently  assumes  that  the  main  routine  is always
     resident in main memory.  This assumption will be violated with shared
     overlays.  An  examination of the Debugger's code revealed one routine
     which assumes main is resident.  Routine  LOAD$OVERLAY  special  cases
     the  main  routine; this special case logic can simply be removed.  In
     addition, any Debugger command accepting  the  <module  name>@  syntax
     must be modified.  The Debugger assumes any module which is explicitly
     named is always resident.  Overlay modules  cannot  be  referenced  by
     name since the module is looked up in the LINK symbol table.  However,
     with sharable overlays the modules of MAIN are  present  in  the  LINK
     symbol  table  but  are  not  necessarily resident.  Thus any Debugger
     command with a module name as a parameter must force MAIN's  high  seg
     in  before  executing  the  command  and  restore  the  current module
     afterwards.















                                     - 2 -




