VAXIO.TXT, last modified 10/24/83, zw

VAX Pascal I/O

General Philosophy...
In the interests of meeting our deadlines for the VAX  cross-compiler,
as  well  as maintaining elegance and simplicity in the VMS interface,
the primary philosophy in the I/O design is "Let DEC do it".  Whenever
possible,  operating  system  utilities, facilities, and grotesqueries
should be fully exploited.  However, care must be taken to avoid being
"too  tricky", using a facility whose interface is so complex that the
code to use it becomes  unwieldy.  Using  VMS  and  RMS  intelligently
involves  a bottom-up approach in the design of the I/O system.  Since
the general top-down structure of a runtime I/O interface  for  PASCAL
can  be  borrowed from the PDP-10 implementation, an inside-out design
can be created quickly.

A second consideration is flexibility, the philosophy of "Don't  paint
yourself  into  a  corner".  A  cursory  examination  of the available
VAX/VMS documentation will create the accurate impression that certain
fundamentals  of  the  system are in the hands of language translators
and thus not well documented.  Since we are  producing  a  translator,
and  since  all available translators are produced by DEC, we may have
an interesting time discovering these hidden  wrinkles  by  trial  and
error.  At the same time that we throw up a quick edifice to interface
PAXCAL to VMS, we also must be  prepared  to  tear  down  and  rebuild
quickly.

File variable maintenance...
Variables  of file types will occupy one longword of memory (4 bytes),
and  will  be  a  pointer  to  a  file  block,  as   in   the   PDP-10
implementation.  Since  the  VAX  was  (hopefully)  chosen as a target
machine  because  of  its  large  addressing  space,  explicit  memory
management  in  the PAXCAL runtime support code will not be necessary.
This means that heap space can be used for file blocks, and a distinct
file  block allocation area need not be created.  The RMS and VMS code
requires hard addresses in its file blocks, so file blocks  cannot  be
relocatable   in   any   case.   Note  that  placing  runtime  control
information on the heap  precludes  the  implementation  of  MARK  and
RELEASE.  A  PAXCAL  file  block  will  be a contiguous area of memory
containing (in order):  PAXCAL control information, including  CURSOR,
EOF, and other file attributes; the RMS FAB and a single RAB; a buffer
(if necessary); a component  (if  necessary).  For  unsuccessful  file
association   calls,   "phony  file  blocks"  will  be  provided  with
appropriate error conditions specified,  as  is  done  in  the  PDP-10
implementation.

Since  it  appears  likely  at  this point that we can use RMS for the
entire I/O system, including terminal I/O, channel allocation  is  not
an  issue, as it is not mentioned in any of the RMS documentation.  If
we must ever allocate channels, the  system  service  $ASSIGN  can  be
used;  unless  RMS  does  not use $ASSIGN, a terminal I/O system using
$QIO directives can coexist with RMS without channel conflict.

Typed files...
Given that typed files in PASCAL consist of  sequential,  fixed-length
records,  the  sequential  file organization is the logical choice for
their  implementation.  This   provides   all   necessary   functions,
including  SEEK and append to end of file, without incurring the space
overhead of the relative file organization.  Note that the correct use
of  the RMS directives $GET, $FIND, $UPDATE, and $PUT requires that we
maintain the current size of the file, since one uses $PUT to write to
the end of the file, and $UPDATE to write anywhere else.

Binary files...
RMS  provides  a  block  I/O  facility similar to dump mode I/O on the
PDP-10 -- arbitrary amounts of data can be read or written from or  to
exact  block  boundaries  in  the  file.  To  implement our binary I/O
system would require an underlying buffering mechanism similar to  the
functions  provided by TENIO.  I do not see this as a major problem; a
fairly intelligent buffering mechanism can be  worked  up  quickly,  I
think.  There  is  no  way  to  convince  RMS  that a file consists of
varying length records without  either  specifying  a  maximum  record
length  or losing the ability to SEEK arbitrary records.  Also, I feel
that it is useful to provide  a  mechanism  of  manipulating  verbatim
files  (files  without  invisible control information).  However, note
that the operating system does provide a facility for random access to
variable-length record files using the relative file organization.  If
VMS uses this organization for some of  its  files,  then  perhaps  we
should  provide  it for our users.  Binary files may be an appropriate
mechanism if explicit lengths are not  specified  on  input.  Verbatim
files  could still be implemented at the user level by file of 0..255,
but would be terribly inefficient, requiring one operating system call
per byte operation.  This could be reduced somewhat by creating a file
of longwords, but the binary file facility was introduced to eliminate
this  hack  from  the language.  In order to preserve consistency with
the Pascal Report, I think that dump  mode  should  be  used  for  our
binary  file  implementation,  since  we  can  simulate  relative file
organization once we know its  internal  structure.  However,  if  the
relative (or indexed) file organization is widely used in VMS, then we
should provide facilities to use it (perhaps an extra-lingual  routine
package).  I  will  consider  relative  files more carefully later, if
appropriate.

Text files...
From my initial perusal of the VAX/VMS  documentation,  I  have  found
that  standard  text  files  are stored as sequential, variable length
record files with fixed length  control  information  (line  numbers).
This  implementation, with or without the line numbers, is amenable to
the PASCAL text file model; RMS can be used throughout the  text  file
handling  code.  Note  that  the line numbers can be made available to
the user program through a mechanism similar to the GETLINENR function
in the PDP-10 system.  On output, sequential line numbers could simply
be created for the new file.

Text files on the PDP-10 are character streams, with individual  lines
separated  by  sequences of control characters.  VAX/VMS precedes each
line of the text file by a byte count;  no  control  characters  other
than  those  contained  in  the  text  line  are  stored on disk.  For
purposes of portability and programmer satisfaction, however,  I  feel
that  we  should  attempt  to preserve the features of the PDP-10 text
file system:

  1. On output,  single  characters  are  placed  into  the  output
     stream.  CURSOR  is incremented for each.  Control characters,
     including line terminators or page marks, have  no  effect  on
     the I/O system and are stored into the file.

  2. Output  lines are terminated by the writeln operation.  Output
     pages are terminated by the PAGE operation.  The effect,  upon
     input,  of  control characters explicitly written to a file is
     implementation-dependent.

  3. Normal text file input proceeds as  specified  in  the  Pascal
     Report.  Since VAX/VMS files do not contain control characters
     as line terminators, using ASCII mode  on  a  disk  file  will
     still return a blank when EOLN is true.

  4. Interactive  input  works  as  it does on the PDP-10, with the
     readln operation performing an effective  dismiss  for  input.
     If  line terminators are available, they will be placed in the
     file buffer when ASCII mode is  specified;  if  not,  F^  will
     contain a blank when EOLN is true.

I have found no mention of a maximum record length in a disk file, but
terminal input and output lines  are  limited  in  size  by  a  SYSGEN
parameter.  Since  one  output operation puts one record to the output
device, we must insure that output operations  will  not  exceed  this
SYSGEN  size.  Note  that larger effective output lines can be written
to the terminal in pieces, without placing a CR-LF on  the  first  n-1
lines.  This  trick  will  not  work,  however, with disk files, so an
implicit writeln must be performed every 256 (or whatever) characters.
I  do  not  know what the system does with input lines longer than the
terminal buffer length; they may be available  through  multiple  read
operations.

The  above  discussion  pertains to all terminal I/O except that using
asynchronous system traps (ASTs) on input.  ASTs can be used to obtain
every  input  character  from  the  terminal,  including  all  control
characters.  I feel that writing an AST-driven input system for PASCAL
is  unnecessary,  and  even cumbersome, since the editing functions of
backspace, delete,  control-u,  etc.,  are  either  lost  or  must  be
performed  by  the  PASCAL  runtime.  Another approach to terminal I/O
involves using PASSALL mode  to  obtain  full  8-bit  input  from  the
terminal.  If  IMAGE  mode  is  to  be implemented, then using RMS for
terminal input and output is not  sufficient.  Also,  note  that  line
terminators  from  terminal  input  may  not available if RMS is used,
limiting the usefulness of  ASCII  mode.  It  appears,  however,  that
using  the  PRN  record  processing  option  and correctly setting the
fixed-length control area when performing output to  a  terminal  will
make  output without writeln work correctly (i.e., specify no carriage
control).  Note that since TTY and TTYOUTPUT will map to SYS$INPUT and
SYS$OUTPUT  respectively,  and  that  the  latter  two  may  map to an
indirect file as well as to the user's terminal, a  uniform  interface
to  both  devices  and  files  is desirable.  An indirect file may end
during execution, for example, and SYS$INPUT may suddenly  become  the
user's  terminal again.  I favor an initial implementation of terminal
I/O using RMS, and either  changing  to  explicit  I/O  operations  or
implementing  the  IMAGE option completely independently from the rest
of the terminal I/O support.

Format conversions...
The  $FAO  directive  will  handle  all  integer  and   boolean   text
conversions.  We  can  use the FORTRAN real number conversion routines
if we carefully prescan all input, since the FORTRAN routines are  not
well-equipped  to handle formatting errors.  The FORTRAN interface may
be an example  of  a  facility  too  complex  to  use  simply.  String
compatible items can be moved directly into the text file buffer.

Since ARG lists do not provide as elegant a mechanism on the VAX as on
the PDP-10 for passing parameters, we need another method.  Among  the
possibilities  are the following three methods.  We could assign fixed
argument registers (perhaps involving a code generation mechanism  not
dissimilar   to   that   required   to   use  the  native  VAX  string
instructions).  We could use  a  standard  CALLS  or  CALLG  sequence,
providing  the  added  features  of  register  preservation, condition
handling, and local storage for runtime routines.  Finally,  we  could
set  global  variables  from  the  inline  code,  which  will have the
responsibility of insuring their validity.  I favor the CALL approach;
the possibility of varying length parameter lists could be very useful
for the  text  formatting  routines,  in  addition  to  the  aforesaid
advantages.

  