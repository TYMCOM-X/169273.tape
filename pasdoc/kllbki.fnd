RTSYM.MAC	
{Page 1}...
	opdef	adjsp~	[105000000000]
	opdef	adjbp~	[ibp~]
...
	adjsp~	top,$maxlocal>>
...
	adjsp~	top,-$maxlocal>>
...
	adjsp~	top,$maxtemp>
...
	adjsp~	top,-$maxtemp>>
...
	blt~	r0,$len+addr>
...
	blt~	r0,$last

-----------------------------------------------------------------------
IOSYM.MAC	
{Page 1}...
	opdef	DADD~	[114000,,0]
	opdef	DSUB~	[115000,,0]
	opdef	DMUL~	[116000,,0]
	opdef	DDIV~	[117000,,0]

-----------------------------------------------------------------------
STSYM.MAC	
{Page 1}...
	adjbp~	r1,$str(pda)
...
	adjbp~	r1,$str(pda)
...
	adjbp~	r1+4,$str(pda)	; update dest byte pointer
...
	adjbp~	r1,$str(pda)	; update target byte pointer
...
	subttl	$CMPS~TRINGS
...
; $CMPS~TRINGS macro generates routines to compare two strings.
...
	define	$cmps~trings (str1,str2),<

-----------------------------------------------------------------------
OPDEFS.MAC	
{Page 1}...
	OPDEF	ADJSP~[105B8]	; DEC hasn't caught up with the KL10
	OPDEF	ADJBP~[133B8]	; yet
...
	OPDEF	CMPS~L[1B8]	; CoMPare String, skip if Less
	OPDEF	CMPS~E[2B8]	; CoMPare String, skip if Equal
	OPDEF	CMPS~LE[3B8]	; CoMPare String, skip if Less or Equal
	OPDEF	EDIT~[4B8]	; Process string by pattern
	OPDEF	CMPS~GE[5B8]	; CoMPare String, skip if Greater or Equal
	OPDEF	CMPS~N[6B8]	; CoMPare String, skip if Not equal
	OPDEF	CMPS~G[7B8]	; CoMPare String, skip if Greater
	OPDEF	CVTDBO~[10B8]	; ConVerT Decimal to Binary by Offset
	OPDEF	CVTDBT~[11B8]	; ConVerT Decimal to Binary by Translation
	OPDEF	CVTBDO~[12B8]	; ConVerT Binary to Decimal with Offset
	OPDEF	CVTBDT~[13B8]	; ConVerT Binary to Decimal with Translation
	OPDEF	MOVSO~[14B8]	; MOVe String, byte Offset
	OPDEF	MOVST~[15B8]	; MOVe String, byte Translation
	OPDEF	MOVSLJ~[16B8]	; MOVe String Left Justified
	OPDEF	MOVSRJ~[17B8]	; MOVe String Right Justified

-----------------------------------------------------------------------
RTMON.MAC	
{Page 1}...
	BLT~	R1,0(EXP1)
...
	ADJSP~	TOP,4		;PROTECT THE STACK FRAME
...
	ADJSP~	TOP,PROTECT	;PROTECT RUNTIME TEMPS
...
	ADJSP~	TOP,16		;PROTECT SAVED REGISTERS
...
	ADJSP~	TOP,-16		;RESTORE OLD PROGRAM STATE
...
	ADJSP~	TOP,-PROTECT
...
	ADJSP~	TOP,PROTECTION	;SAVE RUNTIME TEMPS
...
	ADJSP~	TOP,-PROTECTION
...
	ADJSP~	TOP,-PROTECTION

-----------------------------------------------------------------------
MMMODF.MAC	
{Page 1}...
	MOVEI	T2,0(NEW)		; set up end of BLT~ pointer in T2
...
	BLT~	T,0(T2)

-----------------------------------------------------------------------
NCQFIT.MAC	
{Page 1}...
	MOVEI	EXP1,2(RES)	; PREPARE BLT~ TO ZERO BLOCK
...
	BLT~	EXP1,0(EXP2)

-----------------------------------------------------------------------
MMQFIT.MAC	
{Page 1}...
	MOVEI	EXP1,2(RES)	; PREPARE BLT~ TO ZERO BLOCK
...
	BLT~	EXP1,0(EXP2)

-----------------------------------------------------------------------
RTCNV.MAC	
{Page 1}...
	adjsp~	top,$maxtemp
...
	adjsp~	top,-$maxtemp

-----------------------------------------------------------------------
RTSTRS.MAC	
...
; MOVSLJ~ instruction.
...
; table for the extended MOVST~ instruction specifying uppercasing.
...
; table for the extended MOVST~ instruction specifying lowercasing.

-----------------------------------------------------------------------
RTSETS.MAC	
{Page 1}...
	ibp~	exp5,addr2	;advance addr2 bptr
...
	ibp~	exp5,addr1
...
	move	r1,r0		;so adjbp~ works
	adjbp~	r1,bptemp	;now indicates appropriate bit

-----------------------------------------------------------------------
IOFILE.MAC	
{Page 1}...
	ADJSP~	TOP,$MAXTEMP	; save our stack
...
	ADJSP~	TOP,-$MAXTEMP	; ok
...
	ADJSP~	TOP,$MAXTEMP	; call filsz. while saving temps
...
	ADJSP~	TOP,-$MAXTEMP
...
	ADJSP~	TOP,$MAXTEMP	; protect our temps from TENIO
...
	ADJSP~	TOP,-$MAXTEMP	;   it worked -- fix local stack
...
	ADJSP~	TOP,$MAXTEMP
...
	ADJSP~	TOP,-$MAXTEMP
...
IONFG1:	ADJSP~	TOP,-$MAXTEMP	; fix the stack again
...
	HRLI	R1,FBLOCK	; BLT~ the parsed block into caller's
...
	BLT~	R1,5+MAXSFD(EXP2)
...
;GBZERO:	HRLZI	R0,0(FBL)	; set up BLT~ reg
...
;	BLT~	R0,-2(R1)	;   minus two to zero out
...
	ADJSP~	TOP,$MAXTEMP	; pad our temps
...
	ADJSP~	TOP,-$MAXTEMP	; fix stack
...
	ADJSP~	TOP,$MAXTEMP
...
	ADJSP~	TOP,-$MAXTEMP
...
	BLT~	R1,EOFWRD+OUTPHO

-----------------------------------------------------------------------
IOCHAR.MAC	
{Page 1}...
	ADJBP~	R1,NAME		; advance pointer to skip them
...
	DMOVEM	DWD1+2,2+JUNK	; save regs after DWD2 for DMUL~
	DMUL~	DWD1,DWTEN	; multiply by double word ten
...
	DADD~	DWD1,DWD1+2	; slap it in
...
	DADD~	DWD1,DW377	; round up the number (we lose 8 bits)
...
	DADD~	DWD1,R0		;   to get rid of binary exponent -- round up
...
	DADD~	DWD1,ROUND(R1)	;     then round up by factor
...
	DADD~	DWD1,ROUND(PR2)	; round
...
	DMUL~	DWD1,DWTEN	; ready for next time
...
DIV10G:	DDIV~	DWD1,TENF.(PR2)	; do it
...
D10RND:	DADD~	DWD1,DWONE	; add a double length "1"
...
	DMUL~	DWD1,TENF.(PR2)	; do it
...
	IBP~	0,BUFPTR(R1)	; increment the pointer
...
FDPGT1:	IBP~	0,BUFPTR(FBL)	; increment to go past tab
...
	ADJBP~	CO1,R1		; load up correct byte pointer
...
	ADJBP~	R1,PR1		;   so next ILDB will get current char

-----------------------------------------------------------------------
TENIO.MAC	
{Page 1}...
;	should be paid to the coding assumption that BLT~ will always	;
...
;	track of the current user memory address; it is used as a BLT~	;
...
	HRL	3,10		; Generate BLT~ pointer
...
	BLT~	3,-1(7)		; Copy just up to it
...
	BLT~	3,0(7)		; and move in the tail
...
	HRLI	7,0(5)		; Build BLT~ pointer
	BLT~	7,177(5)	; Zzzzzzzzzap!
...
	BLT~	3,-1(7)		; and copy required block
...
	HRRI	3,0(5)		; Grab buffer address for BLT~ output
...
	BLT~	3,0(7)		; and smash the buffer

-----------------------------------------------------------------------
PASDIS.MAC	
{Page 1}...
	BLT~	16,16(17)
...
	BLT~	16,16		; and restore them

-----------------------------------------------------------------------
ONESCA.MAC	
{Page 1}...
INT.AC:	ADJSP~	TOP,PROTECTION	; DON'T KILL RUNTIME TEMPS
...
	ADJSP~	TOP,-PROTECTION	; NO NEED TO PROTECT RUNTIME STORAGE
...
	ADJSP~	TOP,-PROTECTION
...
	ADJSP~	TOP,PROTECTION	;PROTECT RUNTIME TEMPS, ETC.
...
        adjsp~   top,-protection

-----------------------------------------------------------------------
1) "adjsp"	34
2) "adjbp"	11
3) "ibp"	5
4) "dadd"	7
5) "dsub"	1
6) "dmul"	5
7) "ddiv"	2
8) "blt"	26
9) "movslj"	2
10) "movso"	1
11) "movsrj"	1
12) "movst"	3
13) "cmps"	17
14) "cvtbdo"	1
15) "cvtbdt"	1
16) "cvtdbo"	1
17) "cvtdbt"	1
18) "edit"	1
