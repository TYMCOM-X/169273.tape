PARSER.DOC, last modified 10/14/83, zw

     This is  a  description  of  a  "left  linear"  parsing
algorithm  with error repair and recovery.  The goal of this
algorithm is to parse any given linear input list from  left
to  right  into  a  sentence  of  a specified grammar with a
minimum number of repair actions performed on the input.

     It is assumed that any  incorrect  input  was  probably
meant to be of the form obtained by making the fewest number
of changes to the input.

     The probe-ahead parameter, j, governs how  optimal  the
error  repair  is.  An exaustive search of the parse tree is
made down j levels to calculate the repair cost of  a  given
repair  action.   A  value greater or equal to the length of
the input list would allow a totally optimal  repair.   This
would  be  very  slow  for long input.  Smaller values allow
quicker  operation  with  the  possibility  of  more  repair
actions being taken.

     The look-ahead  parameter,  k,  is  a  measure  of  the
simplicity  of  the  grammar.   A look-ahead of k symbols is
done to recognize patterns in the input list.  The algorithm
will run faster for smaller values of k.

     An input list is a list  of  symbols  chosen  from  the
terminal  set of the grammar.  A grammar is a quadruple of a
set of non-terminal symbols, a set of  terminal  symbols,  a
set  of  productions  and  a start symbol.  The terminal and
non-terminal sets should partition the set of  all  symbols.
A  production  is  a  pair  of  a  non-terminal symbol and a
production list of symbols.  

     The costs of the various repair actions are  determined
under  the  assumption that, in the grammar, earlier defined
symbols are more important that those defined later with the
start  symbol  being  the  most important of all.  Important
symbols are cheaper to insert and more expensive  to  delete
than less important symbols.  The cost of exchanging symbols
is the difference of the respective insert and delete costs.
The insert and delete costs of a given symbol are related by
their sum always being equal to the total number of symbols.

     Symbols are parsed by matching patterns  in  the  input
list  with  those  described by the various production lists
associated with the non-terminal symbols.  At each stage  in
the  parsing  of  the  symbols of a given production list, a
look-ahead is made by checking all possible  start  patterns
of k symbols against the next k symbols of the input.  If no
match could be made, an error is declared and  a  repair  is
made on the input to recover from the error.

     A repair consists of trying all possible  single  token
repair  actions  at the current input token, probing ahead a
fixed number of input symbols, j, to determine the  cost  of
each  repair.   The  repair  action with the minimum cost is
then implemented and documented and parsing continues.  

     Errors are declared by specifying the  bad  symbol  and
its position in the input list.  The current parse symbol is
given as a context for the  error.   The  repair  action  is
documented  by describing the affected symbol and the action
taken to add, change or delete.  Documentation  phrases  are
constructed using the names of the symbols as defined in the
grammar.

     A parse tree can be constructed or  immediate  semantic
action taken at each step of the parse when not in the midst
of a repair.  Once an error has been  declared  all  further
semantic  processing  should  be  cancelled.   Although  the
repair action may be minimized,  any  changes  made  to  the
input  are  assumed  to  invalidate the understanding of its
original meaning.
