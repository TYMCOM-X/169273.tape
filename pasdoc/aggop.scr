$num off
$title left 'Aggregate Operations' left '14 February 1979' left 'Page \'
&General Considerations&
$skip
In the new compiler, aggregates (records and arrays) are stored differently
than in the old compiler.
The following rules apply to the allocation of aggregate data:
$skip
$ind left 9
$par -4
(1)\It is aligned on a word boundary;  this is dictated by the requirement
that all aggregates be accepted as var parameters.
$skip
$par -4
(2)\If the total bit size is less than 36 bits, then the remainder of the
word may be occupied by other data items.   This may occur when the aggregate
itself is a component of a packed aggregate, but must also be taken into
account when accessing any item which may be aliased to a component, e.g.
a parameter of pointer based item.
$skip
$par -4
(3)\If the total size is 36 bits or more, then the item is allocated in whole
word units.  Thus, 72 bits are allocated to hold a record whose fields occupy
53 bits.  This rule permits whole word moves to be used to assign records whose
lengths exceed one word;  unused bits in the last word can be overwritten with
impunity.
$skip
$par -4
(4)\Unused bits in the middle of a packed aggregate have undefined values.
That is, they are &not& zeroed as in the old compiler.
This
requires that comparision code carefully avoid examining the unused bits.
Techniques to do so are discussed below.
$ind left 0
$skip 2
&Aggregate Assignments&
$skip
Implementation of nonflexible aggregate values requires only straightforward
modifications to the compiler.
First, in the shaper (P10SEL), expand_reference must transform a reference
to a record or array in a manner dependent on its size and type:
$skip
$ind left 9
$par -4
Size < 36  and  item is potentially a packed field:
$par
Generate a packed mem_ref with appropriate bit size and a
bit offset of 0.
$skip
$par -4
Size = 36 to 72 bits  and  item is not flexible:
$par
Generate an unpacked mem_ref.  The item size should be 36 regardless
of whether one or two words are used.  (This follows conventions used
elsewhere;  when needed, the actual size can be acquired through desc.base.)
$skip
$par -4
Otherwise:
$par
Generate a desc_ref with two operands.  Operand one is the address of the
data part of the aggregate value.  Descriptor words of flexible arrays are
skipped.  Operand two is the size of the value in words.
$ind left 0
$skip
Second, in the code generator (P10GEN), the routine compile_body must be
modified to handle the array and record cases of assign_op and eval_op.
The cases to be processed are:
$skip
$ind left 10 $ver
mem_ref (packed) := mem_ref (packed)
mem_ref (1 word) := mem_ref (packed)
mem_ref (packed) := mem_ref (1 word)
mem_ref (1 word) := mem_ref (1 word)
mem_ref (2 words) := mem_ref (2 words)
desc_ref := desc_ref
$ind left 0 $jus
$skip
When processing the mem_ref cases, the data should be moved using a data alignment
type of "left_aligned".  This will cause the packed mem_ref's to be loaded with
ldb's and shifted into word alignment.  (By modifying do_move to special case
a byte load with zero bit offset, this could be replaced with a load-mask sequence.)
Stores will be accomplished by shifting and depositing (dpb).
The word alignment requirement is essential if multiple use aggregate values
are to be given to the code generator.
$skip
Long moves (the desc_ref to desc_ref case) can be accomplished with a BLT
instruction.
However, because the information in the desc_ref nodes is not precisely that
required by that instruction, the code sequence may be slightly suboptimal.
At some time in the future, an idiomatic move operator should be consider and
used for strings and sets, as well as aggregates.
Note also that it is permissible to assume that the source operand will fit
within target operand, thus the length of the source operand is used to
perform the move.
$skip
The above discussion ignores the special problems associated with flexible
aggregates: flexible or generic arrays and records ending in flexible aggregates.
There are several points to be made in this regard.
$skip
First, it is necessary to be compute at runtime the word size of a flexible
aggregate in order to move it.
For arrays, the computation is straightforward.  A tree representing
the size can be built during shaping.
(The routine runtime_size builds just such a tree, though the parameterization
would have to be changed.)
However, in the case of a flexible record with variants, the computation is
not simple just given the reference.
There are two choices:  (1) prohibit flexible record assignments, and (2) perform
flexible record assignments by introducing an implicit "extent" computation
as proposed for use with the random I/O routines.  (If so, we might as well
support p^ := q^ in the general case.)
$skip
Second, in check mode, bounds checks on assignments  (and comparisions)
involving flexible and generic arrays must be performed.  For flexible
arrays, the upperbound of the two operands must be compared;  for generic
arrays, both the upper and lower bounds must be checked.
This will require introduction of a new error check operator and runtime
routine, and implementation in pass 1.
$skip
Third, it is assumed that flexible aggregate references are expanded into
desc_ref's, and that the desc_ref to desc_ref move is prepared to handle
nonconstant lengths.
$skip
Fourth, it is necessary to insure that the "addr" function in the shaper
returns the address of the data portion of a flexible array and not the
address of any descriptor words.   This can be accomplished by special
casing the array case and using array_base instead of access.
$skip 2
&Parameter Passing&
$skip
Calls with (flexible) aggregate var and value parameters will work without
additional modifications assuming that the changes outline above for assignment
are made.
$skip
It is probably worth considering making the following change:  always passing
aggregate parameters (including those less than 2 words in length) by address.
The reason is to reduce the size of the parameter list.   The rational is
simply that except in the case of the assignment of short records, the
values are never needed in a register; therefore, there is no compelling
reason to place them in registers during a call.
$skip 2
&Aggregate Construction&
$skip
The use of composite expressions (parenthesized lists of expressions) are
not currently supported by the compiler even in the case of all constant
arguments.  Implementation requires the following change to the shaper.
$skip
When an agg_val operator is encountered in shaping, it is transformed into
one of two forms: an aggregate constant (if possible) or a temporary built
with explicit assignments.  To perform the latter expansion, a temporary
is allocated using alloc_temp.  This yields a pointer which can be used to
index subsequent references to components of the aggregate expression.
Optionally, the constant part of the agg_val operator can be factored out
and used to form a constant (with missing parts) which is assigned to the
entire temporary.   The remaining components are assigned individually to
the corresponding component of the temporary.  For example:
$skip
$ind left 10 $ver
var a: array[1..4] of integer;
a := (1, i+2, j, 4);
$skip
$par -3
becomes
$skip
t := alc_temp (4);
t^ := (1, *, *, 4);
t^[2] := i+2;
t^[3] := j;
a := t^;
$ind left 0 $jus
$skip
I would suggest generating the assignments first in terms of field_ref's and
element_ref's (e.g. (element_ref (ptr_ref (alc_temp (4)), 2))), and then shape these pass 1
style operators into mem_ref's.  There are two reasons for this:  it will avoid
senseless duplication of the addressing logic embodied in the shaper, and it
will allow the expansion code to be used verbatim in compilers for other machines.  The reason why the transformation is performed at all in the shaper is to
use the temporary allocation routines present there.
$skip
Note that in the case of assignment of a composite expression to a variable
(as opposed to the use of one where a temporary must be generated),
it is possible to use the variable as the location in which to construct
the expression.   This may be done if no overlapping is possible;
for example, it would not be legal for:
$skip
$par 10
a := (1, a[3], a[2], 4);
$skip
**** Note also, the type of composite expressions used passed to a flexible
parameter must be properly set by the first pass.
$skip 2
&Aggregate Comparision&
$skip
Because comparision of aggregates must sidestep unused bits when packed,
we are faced with a rather large problem.  Alternative one: disallow
comparision of aggregates.  Alternative two: disallow comparisions except
for the case of records and arrays containing only nonaggregate components.
Alternative three: pull out the big stick.
$skip
The following is a list of techniques for comparing various kinds of aggregates;
in certain cases, the definition is recursive -- expansion may produce other
compares of aggregates, which must be further processed.
$skip
In the case of the comparision of arrays containing scalars (etc.), pointers,
reals and sets, the comparision is straightforward.  An aggregate compare
operator can be introduced which compares leading bytes of each successive
word in the array.  In the case of an array whose element_size is less
than 36 bits, generate a desc_ref (byteptr, nwords) for both operands.  The
byte size in the byte pointer would be:
$skip
$par 10
36 - (nelems_per_word * element_size)
$skip
In the case of an array whose element_size is 36 bits or greater, generate
desc_ref (wordaddr, nwords) and compare full words at a time.
$skip
In the case of strings, arrays, records and files(??), it is necessary to
expand an array comparision in comparisions of each of the individual
elements:
$skip
$ind left 10
$ver
a1 :: a2
$skip
$par -3
becomes
$skip
  temp := true;
  for tidx := lowerbound (a1) to upperbound (a2) do begin
    if not (a1[tidx] :: a2[tidx]) then begin
      temp := false;
      goto 100;
    end;
  end;
100:
  use temp as result
$ind left 0 $jus
$skip
Note that it is not possible to treat multidimensional arrays as if they
were single dimensional arrays.
$skip
For record comparisions, we need only consider records which do not have
variant parts (this restriction is made in the MDSI report).  However,
a flexible array may be encountered.
Again, the comparision must be expanded:
$skip
$par 10
r1 :: r2
$skip
$par 7
becomes
$skip
$par 10
(r1.f1 :: r2.f1) and ... and (r1.fn :: r2.fn)
$skip
If the record contains adjacent fields of simple types (scalars, pointers, sets,
reals), then it is possible to concatenate those fields for the purpose of
comparision.
To achieve this optimization, however, a problem of representation must be solved.
The transformation must be applied using symbolic reference tuples, but there
is currently no way to represent an access to multiple fields at a time.
A new nary operator (e.g. field_cat) must be created.
Note that it will appear in a value context, and therefore need not affect
the calculation of the lifetime of values.
(There is some motivation for allowing it on the LHS, however.  For example:
r1.f1 := r2.f1; r1.f2 := r2.f2 could be done in one move versus two by
transforming it into fcat (r1, f1, f2) := fcat (r2, f1, f2).)
$skip
Where the comparision is expanded, as opposed to transformed into a new
operator, the expansion must be performed before boolean operations are
exploded, or concurrently.
$skip 3
aggop.scr[52250,234]
    