#system(RDLIB -- lookup.doc)
#module(LOOKUP,4/7/78)
This function extracts the next token from an input line, and looks it
up in a list of names. It returns the index of the name, if found.
#usage
external function LOOKUP_scalar
  ( LINE: CMDLINE;
    var IDX: CMDLINEIDX;
    var LIST: scalar_LIST;
    MAXscalar: scalar;
    var NAMEIDX: scalar): boolean;
#input(LINE)is the input from which the name token is to be extracted.
#input(IDX)is the parsing cursor. LOOKUP scans from this position for
the token.
#input(LIST)is the name list to be searched.
#input(MAXscalar)is the upper bound of the LIST array. The value
"maximum(scalar)" should be passed.
#output(IDX)is set to the character following the end of the token,
if found in the list. If the token is not found in the list, this is set
to the start of the token. If there is no token on the line, this is
left pointing past the end of the line.
#output(NAMEIDX)is the scalar associated with the token. Set if the
token is found in the list.
#output(LOOKUP)is true if a token appears in the line and is found
in the list; false otherwise.
#notes
The name list consists of an array of names and minimum abbreviation
lengths. The format is as follows:
$ski $ver $ind left +3
CMDLIST = record
  NAME: packed array[1..10] of char;
  ABBREV: 1..10
  end;

scalar_LIST = array [scalar] of CMDLIST;
$ski $jus $ind left -3
where "scalar" is the name of the base type of the tokens.
#algorithm
A token consists of any number of alphanumeric characters or a single
punctuation character. A match for the token in the list is made if:
(1) the token is not longer than the command name, (2) the token
is not shorter than the miminum abbreviation of the name, and (3)
the token and name match to the length of the token. Upper and lower
case are viewed as equivalent.
#requirements
To use this routine with lists associated with different scalar types,
it is necessary to have one set of declarations for each scalar type.
The template above is followed, substituting the actual name of the
scalar type for "scalar" above. The linker links all LOOKUP_scalar
references to the common LOOKUP routine. This is a PASCAL coercion
hack.
$ski
The scalar_LIST and entry declaration must be provided by the user
for each application.
The include file LOOKUP.TYP (below) only defines type CMDLIST.
#include(CMDUTL.TYP)
#include(LOOKUP.TYP)
#end
