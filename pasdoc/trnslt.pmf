$TITLE trnslt -- file transliteration program

program trnslt;


const
    version_number = '1.0';


const
    min_char = chr(0);
    backspace = chr(8);				(* ascii BS *)
    tab = chr(9);				(* ascii HT *)
    formfeed = chr(12);				(* ascii FF *)
    eol = chr(13);				(* ascii CR *)
    cdash = chr(22);				(* ascii SYN *)
    collapse = chr (26);			(* ascii SUB *)
    eof_ch = chr(28);				(* ascii FS *)
    escape = '@';
    shift = '#';
    except = '%';
    dash = '-';
    del = chr(127);				(* ascii DEL *)
    max_char = chr(127);


type
    cstring = string [128];


var
    from_str,
    to_str: cstring;

    translit_table: array [min_char..max_char] of char;

    collapse_char: char;


external procedure passcc;
$PAGE get_command
procedure get_command;

var
    ind: 0 .. 256;
    command,
    in_file_id,
    out_file_id: string [256];

label
    (* start *) 100;

  procedure usage_error;
  begin
    writeln (tty,'% USAGE: [<new file>=]<old file>/<source chars>[=<replacement chars>]');
    goto (* start *) 100;
  end;

begin
(* start *) 100:
  write (tty,'*');
  break;
  readln (tty);

  (*  Read the command line.  *)

  command := '';
  while not eoln(tty) do begin
    command := command || tty^;
    get (tty);
  end;

  (*  Check for stop request.  *)

  if command = '' then stop;

  (*  Get the output file id.  *)

  ind := search(command,['=','/']);
  if ind = 0 then usage_error;
  if command [ind] = '/' then
    out_file_id := ''
  else begin
    out_file_id := substr(command,1,ind-1);
    command := substr(command,ind+1);
  end;

  (*  Get the input file id.  *)

  ind := search(command,['/','=']);
  if ind = 0 then usage_error;
  if command [ind] <> '/' then usage_error;
  in_file_id := substr(command,1,ind-1);
  command := substr(command,ind+1);

  (*  Get the 'from' character set.  *)

  from_str := '';
  loop
    ind := search(command,['='],length(command)+1);
    from_str := from_str || substr(command,1,ind-1);
  exit if ind > length(command)
    do command := '';
  exit if (ind = 1) orif (command [ind-1] <> escape)
    do command := substr(command,ind+1);
    command := substr(command,ind+1);
  end;

  (*  Get the 'to' character set.  *)

  to_str := command;

  (*  Open the input and output files.  *)

  reset (input,in_file_id);
  if eof(input) then begin
    writeln (tty,'BAD INPUT FILE "',in_file_id,'"');
    goto (* start *) 100;
  end;
  rewrite (output,in_file_id||'.TMP '||out_file_id);
  if not eof(output) then begin
    writeln (tty,'BAD OUTPUT FILE "',out_file_id,'"');
    goto (* start *) 100;
  end;
end (* get_command *);
$PAGE make_table

procedure make_table;

var
    c: char;
    i,
    from_len,
    to_len: 0 .. 128;
    all_but,
    collapse_flag: boolean;
$PAGE make_table:  expand

procedure expand ( var s: cstring );

var
    i,
    j: 0 .. 129;
    c: char;
    buf: packed array [1..26] of char;

  function within ( c1, c2, lwb, upb: char ): boolean;
  begin
    within := (lwb <= c1) and (c1 <= upb) and (lwb <= c2) and (c2 <= upb)
  end;

begin

  (*  Process any shift or escape characters, and change any
      un-escaped dashes to cdashes.  *)

  i := 0;
  j := 1;
  while j < length(s) do begin
    c := s[j];
    if c = escape then
      begin
	j := j + 1;
	c := s[j];
	if uppercase(c) = 'B' then
	  c := backspace
	else if uppercase(c) = 'D' then
	  c := del
	else if uppercase(c) = 'F' then
	  c := formfeed
	else if uppercase(c) = 'N' then
	  c := eol
	else if uppercase(c) = 'S' then
	  c := ' '
	else if uppercase(c) = 'T' then
	  c := tab;
      end
    else if (c = shift) andif (s[j+1] in ['A'..'^']) then
      begin
	j := j + 1;
	c := chr(ord(s[j])+32);
      end
    else if (c = dash) andif (j <> 1) then
      c := cdash;
    i := i + 1;
    s[i] := c;
    j := j + 1;
  end;
  if j = length(s) then begin
    i := i + 1;
    s[i] := s[j];
  end;
  s := substr(s,1,i);

  (*  Scan the string, expanding cdash notation where appropriate.  *)

  loop
    i := index(s,cdash);
  exit if i = 0;
    if within(s[i-1],s[i+1],'0','9') orif
       within(s[i-1],s[i+1],'A','Z') orif
       within(s[i-1],s[i+1],lowercase('A'),lowercase('Z')) then
      begin
	j := 0;
	if s[i-1] <= s[i+1] then
	  for c := succ(s[i-1]) to pred(s[i+1]) do begin
	    j := j + 1;
	    buf[j] := c;
	  end
	else
	  for c := pred(s[i-1]) downto succ(s[i+1]) do begin
	    j := j + 1;
	    buf[j] := c;
	  end;
	s := substr(s,1,i-1) || substr(buf,1,j) || substr(s,i+1);
      end
    else
      s[i] := dash;
  end;
end (* expand *);
$PAGE make_table:  main routine

begin
  all_but := (from_str <> '') andif (from_str [1] = except);
  if all_but then
    from_str := substr(from_str,2);
  expand (from_str);
  expand (to_str);
  from_len := length(from_str);
  to_len := length(to_str);
  collapse_flag := (to_len < from_len);
  if to_str = '' then begin
    to_str := del;
    to_len := 1;
  end;
  collapse_char := to_str [to_len];
  if all_but then
    begin
      for c := minimum(char) to maximum(char) do
	translit_table [c] := collapse;
      for i := 1 to from_len do
	translit_table [from_str[i]] := from_str [i];
    end
  else
    begin
      for c := minimum(char) to maximum(char) do
	translit_table [c] := c;
      if to_len > from_len then
	to_len := from_len;
      for i := 1 to to_len do
	translit_table [from_str[i]] := to_str [i];
      if collapse_flag then
	for i := to_len to from_len do
	  translit_table [from_str[i]] := collapse;
    end;
  translit_table [eof_ch] := eof_ch;
end (* make_table *);
$PAGE transliterate

procedure transliterate;

var
    c_in,
    c_out: char;
    last_eol: boolean;
$PAGE transliterate:  get_char & put_char

#define (get_char,c,<:
begin
  if eof then
    c := eof_ch
  else if eoln then
    begin
      readln;
      c := eol;
    end
  else
    read (c);
end :>)



#define (put_char,c,<:
begin
  if c = eol then
    begin
      writeln;
      last_eol := true;
    end
  else if c = eof_ch then
    begin
      if not last_eol then
	writeln;
      last_eol := true;
      close (output);
    end
  else if c <> del then
    begin
      write (c);
      last_eol := false;
    end;
end :>)
$PAGE transliterate:  main routine

begin
  passcc;					(* Make sure we get tabs as tabs. *)
  last_eol := true;
  repeat
    get_char (c_in);
    c_out := translit_table [c_in];
    if c_out = collapse then begin
      put_char (collapse_char);
      repeat
	get_char (c_in);
	c_out := translit_table [c_in];
      until c_out <> collapse;
    end;
    put_char (c_out);
  until c_in = eof_ch;
  close (output);
end (* transliterate *);
$PAGE main program
begin
  open (tty);
  rewrite (tty);
  writeln (tty,'TRNSLT, Version ',version_number);
  writeln (tty);
  loop
    get_command;				(* Opens 'input' and 'output' and sets
						   'from_str' and 'to_str'. *)
    make_table;					(* Builds 'translit_table'. *)
    transliterate;				(* Copies 'input' to 'output'. *)
  end;
end (* trnslt *).
