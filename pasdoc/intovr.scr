$tab 9,17,25,33,41,49
$skip $indent +10
$paragraph -10
To:\\\\\\\P.\Pinkstaff
$skip $paragraph -10
From:\\\\\D.\Gorgen
$skip $paragraph -10
Date:\\\\\April 30, 1981
$skip $paragraph -10
Subject:\\Interpretation overhead in 940 COMPACT II and ANC
$skip 3 $indent -10
Recently, Steve Roush and I made measurements of the performance of
current COMPACT II on a Series II machine and ANC in processing a sample part program.
We counted the number of XDS 940 instructions simulated to do
the job for COMPACT II,
and the number of VAX instructions executed to do the job for ANC.
We reasoned that the ratio of these numbers would give us
an idea of the relative efficiency of a virtual machine
implementation of ANC compared to COMPACT II.
$ski
Briefly, the result was that the number of VAX instructions
for ANC was six times the number of 940 instructions for COMPACT II,
and that if the two measurements had been counting math operations
the same way the ratio would have been higher.
Given the power of the proposed ANC processor, the microEclipse,
this result indicates to us that no Pascal vehicle that
interprets a complete instruction set in software will give
remotely reasonable performance.
$ski
The part program we used was LINK11B,
one of the test programs we used in our recent investigation
of ANC page faulting.
This is a COMPACT II program of average length (83 lines),
a lathe program with two simple part boundaries,
three typical threads and some simple geometry.
Running the program from a disk file with no list or tape file
produced gave the following numbers of instructions executed:
$ski
$ver
ANC:		compiler generated code:	5,208,730
		Pascal runtime code:		  857,936
		VMSRTL runtime code:		2,025,161
$ski
		Total:				8,091,827
$ski
COMPACT II:	all XDS 940 code:		  867,311
$ski
$jus
Ignoring instructions executed in ANC runtime code, the
ratio of ANC VAX instructions executed to COMPACT II
940 instructions executed is 6.01:1.
However, this means that math library functions (e.g. trig
functions) are counted as one instruction for ANC (namely
the call into the runtime);
in COMPACT II, there are subroutines in 940 code for these
operations taking many instructions.
Therefore, if math library functions had been counted as one
instruction for COMPACT II, the ratio would have been higher,
by some unknown amount.
$ski
We have already determined that an instruction set as powerful
as that of the VAX is too complex for efficient software interpretation,
so ANC as compiled for any virtual machine will require more
instructions to be executed.
We are thus considering implementing an interpreter for an
instruction set probably more complicated than that of the 940,
which will have to interpret perhaps eight times as many instructions
to do the same job.
$ski
The same program was run on the slow Nova-based Series I
system; it took five minutes (list and tape files were
created in this test, however).
If we guess that the microEclipse is twice as fast as
this Nova, and if we assume we can improve somewhat
on the quality of the instruction interpretation code in our
interpreter over the 940 simulators, we may be left with
a factor of about three still to overcome to equal this
five minute time.
We know of no reason to believe this can be done.
$ski
This analysis takes no account of different memory management
schemes;
it is confined to interpretation efficiency alone.
Total elapsed times given in the last paragraph
include disk times, of course.
Number and size of disk transfers to simulate 940 relabeling
and link input turn out to be impractical to measure;
however, Paul Dankert reports that current in-house COMPACT II
systems are almost entirely CPU-bound.
This implies that the interpretation time arguments in
themselves show pretty clearly the infeasibility of running
ANC via a virtual machine on a microEclipse.
$ski
We need to do more investigation of possible memory management
schemes and their consequences for efficiency of address resolution,
frequency of disk transfers and use of main memory.
However, this should be in the context of a different basic
vehicle for ANC:
perhaps a hard code system,
or different hardware.
