#document(ANC MicroEclipse Vehicle Linker Design Notes,&
<:DRAFT -- July 21, 1981:>)
#sect(Introduction)
This document describes some aspects of the design of the
ANC Eclipse Vehicle linker.
The linker converts a set of object files to an executable image file
according to commands given in its command input;
see the specifications for the object language,
linker command language and image file format for details
on exact formats of input and output.
The sections below describe the basic functions of a linker
and the functions of the AEV linker commands.
#beginlevel
#sect(Basic Linking Functions)
Following are short descriptions of the general functions
performed by any link editor program.
#beginlevel
#sect(Code and data relocation)
Compilers and assemblers produce relocatable object files,
of which several are required to make up an executable program.
The code and data defined in these files can be placed anywhere
in the address space of the executing computer.
It is the responsibility of the linker to allocate address
space for each object file and place its code and data there.
#sect(External symbol resolution)
These separately compiled object modules must be able to
refer to data and code in other modules.
This is done by definition of and reference to "global"
or "public" symbols;
the linker must determine the final values of these symbols
and enter these values in the places making references to them.
Giving more than one definition of the same symbol is an error.
#sect(Image file creation)
When the linker has done these functions, it has created
the initial memory contents of the executable program.
It must then store these contents somewhere from where
they can be loaded into memory for actual execution.
This is usually a file on secondary storage.
#endlevel
#sect(Command Functions)
This section lists the particular linking functions that AEV
linker commands will perform.
#beginlevel
#sect(Specify object files)
The linker command language allows the user to give the
set of object files to be linked;
this syntax includes information defining the overlay structure
of the program.
Each object file is part of a particular overlay;
overlays are grouped into disk records,
which are associated with memory areas in the Eclipse.
#sect(Specify boundaries)
The user can specify which 1KW boundary in the address space
should be the start address for code.
The user can also specify the number of words the direct
static area is expected to occupy;
if it is larger, a warning message will be issued.
#sect(Informational files)
The linker will produce, at the user's option,
a link map file which contains, in readable form,
the correspondence between object files and memory
addresses for code (including overlay information),
direct data and virtual data.
It also contains a list of all public symbols and their values.
The linker may also produce a log file, listing all the
commands given to it,
and a cross-reference file,
listing for each public symbol the name of the object
module defining it and the names of all modules referencing it.
These latter two files need not be produced by the first version
of the AEV linker.
#sect(Library searching)
The first version of the AEV linker will not support searching
of object module libraries.
Eventually, when a library format is defined,
the AEV linker will supply commands to search an object library
for all modules defining currently undefined public symbols,
link all modules from a library,
link specific modules from a library,
exclude specific modules in a library from being linked,
or specify new external symbols which library searches are to satisfy.
#sect(Define new global symbols)
The linker will allow the user to give the definitions of
global symbols from command input.
If the symbol is previously or subsequently defined again,
from the user or an object module,
a multiply-defined symbol error will occur.
#sect(List symbols)
The linker will provide, on command, listings to the terminal
of all undefined public symbols, all defined public symbols,
or the values of named defined public symbols.
#endlevel
#endlevel
#sect(Overview of Linking Process)
The typical link editor program makes two passes over the
set of object modules to be linked
(both those specified explicitly and those linked from
searchable libraries).
The AEV linker will use this scheme;
this section outlines the particular tasks the linker
will do in its two passes and in its interpass phase.
#beginlevel
#sect(Pass 1)
Pass 1 of the linker involves reading the object files
to construct the symbol table and count contributions to
the code, direct data and virtual data segments.
It will also be responsible for managing searchable
object libraries when they are implemented.
Object modules in both pass 1 and pass 2 will be processed
in the order they are given in command input.
#beginlevel
#sect(Process command input)
First of all, of course, the linker must read and parse
the user's commands to learn what object files and libraries
are to be linked,
to get any boundary or global symbol definitions,
and to determine what output is to be produced.
#sect(Define symbols)
Symbol definitions appearing in command input and in
object files must be added to the linker symbol table;
multiple definition must be checked for also.
Relocatable symbols are defined in one of the segments of
the program, in terms of a given offset from the base of
this object module's contribution to the segment.
Absolute symbols simply take the absolute value given.
#sect(Process external symbol requests)
External symbol requests from object module or command input
are used only to determine what symbols must be resolved
by library searches.
Until object libraries are supported, external symbol
requests can be ignored.
#sect(Search libraries)
Library searching, when implemented, will be done as the
library search request appears in the command input.
Searching of a library will be repeated until no undefined
symbols are resolved by a search.
#sect(Count memory area contributions)
As object modules are processed, the information they contain
about the size of their contributions to each segment of the
program will be compiled.
#endlevel
#sect(Interpass phase)
After pass 1, the linker allocates the various segments of program
memory.
This phase is called the interpass phase.
When memory has been allocated, the linker proceeds to read all
the object modules again in order to produce the initial
memory contents in the image file; this is pass 2.
#beginlevel
#sect(Allocate direct data storage)
The linker totals the sizes of all modules' contributions to
the direct data area.
If the user gave a direct static area size and the total is greater,
a warning occurs.
Then the linker fills in the offset of the beginning of
each module's contribution to the area in the module table.
The modules' contributions are allocated in the order
the modules appear in the table, which is the order they
appeared in command input.
Direct static area is allocated from the code area start address down.
#sect(Allocate virtual data storage)
This is done in a way analogous to the allocation of direct
storage, except that no overflow check is made.
Also, virtual static is allocated from segment address zero up.
#sect(Allocate code storage in overlays)
For each overlay in the overlay table, the linker adds
up the sizes of the module code contributions for all the
modules in the overlay.
If this is larger than the code area size, an error occurs.
Otherwise, the linker fills in the offset of the beginning of
each module's contribution to the code area in the module's entry
of the module table.
The modules' contributions are allocated in the order
the modules appear in the table, which is the order they
appeared in command input.
#par()
The overlay length is filled in as the sum of its module code sizes.
Disk record lengths are filled in as the sum of their overlay sizes,
and memory area lengths are filled in as the maximum size of
any disk record associated with them.
#sect(Write map file)
From the allocation information and the symbol table,
the linker writes the map file during the interpass phase.
#endlevel
#sect(Pass 2)
On pass 2, the linker reads the object modules again for the purpose
of creating the output image file.
#beginlevel
#sect(Create initial memory contents)
The linker writes the image file header,
giving memory area sizes and overlay directory information,
and writes the initial contents of memory into the image file.
Object-language expressions involving the values of public symbols are evaluated
and the values stored in locations specified by the object module.
The image transfer address and overlay number are stored in
the image header.
#sect(Create traceback/line number tables)
From information in the object files and allocation information
generated during the interpass phase, the linker creates
traceback and line number tables,
placing them at the end of the image file and
giving directory information to them in the image header.
#endlevel
#endlevel
#sect(Address Space Layout)
The diagram below shows how the 32KW address space will be laid out.
#beginfigure(16,0)
$control off
     256W                     1KW                             2KW
+-------+-----------------------+-------------------------------+
|  LPZ  | Runtime Static :                Stack
+-------+-----------------------+-------------------------------+

  2KW                   nKW                        27KW  30KW32KW
    +---------------------+---------------------------+-----+---+
 ...   Stack    / DH : DS :           Code            | Scr |RR |
    +---------------------+---------------------------+-----+---+

n = an integer, 1 <= n <= 26
LPZ = Lower Page Zero
DH = Direct Heap
DS = Direct Static
Scr = Scratch Mapping
RR = Resident Runtime
$control on
#endfigure
In the above diagram, boundaries marked by vertical bars are
fixed at system implementation time
(i.e. the runtime system and the linker must agree on where they are),
boundaries marked by colons are fixed at link time,
and the boundary marked by a slash is variable, even at runtime.
#sect(Physical Memory Layout)
The linker does not lay out physical memory,
it merely writes the sizes and initial contents of the various segments
(direct storage, virtual static, virtual heap, code areas)
into the image file.
The runtime code is responsible for allocating and initializing
these segments.
If the sum of the segments is greater than the amount
of physical memory available,
the runtime will fail in the attempt to allocate memory
and the program will not run.
#sect(Symbol Table Structure)
The linker will store global symbol names,
object module names, overlay names, disk record names, and memory area names
in fixed-length 10 character strings.
#par()
Four tables,
the memory area table, the disk record table,
the overlay table and the module table,
are arranged for sequential access in the order their elements
appear in command input.
Areas, records, overlays and modules are referred to internally within
the linker by sequence number, which is the index of that
element in its table (the first element is sequence number 1).
These tables must also allow fast access by sequence number.
Fixed-size arrays are an acceptable representation.
#par()
The memory area table entries consist of the area name
and its size in 1KW pages.
The disk record table entries consist of the record name,
its size in pages
and the sequence number of the memory area it is associated with.
The overlay table entries contain the overlay name,
its size in pages,
the number of the disk record it is a part of,
and the offset of the start of its code within the record (in pages).
The module table entries hold the module name,
its code size in words,
the overlay it is in and the address of the start of its code,
the offset and size in words of its contribution
to direct static storage within the direct static area,
and the offset and size in words of its contribution
to virtual static within that area.
#par()
Because of the syntax of the linker command input,
all disk records associated with a memory area will occupy
contiguous positions in the record table,
and disk records for different memory areas will appear in the same
order as the areas appear in their table.
Similar statements apply to the overlays within a disk record
and to the modules within an overlay.
This makes link map output quite straightforward.
#par()
The global symbol table is arranged as a hash table
with the name of the symbol as the key.
Each entry contains the name of the symbol,
flags indicating whether it is the address of code or data
and whether it is in the direct or virtual areas or is a runtime symbol,
the module the symbol is defined in and its value
(i.e. its offset in its area,
relative to the start of the module's contribution).
Each entry also contains a pointer field with which entries
are chained into a singly-linked list for the same hash
bucket, and another pointer field to chain entries into
other singly-linked lists.
Two such lists, of which each entry will belong to one,
will exist:
a list of symbols with definitions and a list of undefined symbols.
In both lists, and the lists for hash buckets,
the order of elements is arbitrary
(i.e. for efficiency, they should be chained onto the front of the list).
#par()
Ten characters occupy two DEC-10 words.
It is suggested that a hash function start by shifting the first
word right one bit to use bit 36 and then add or exclusive-or the
two words.
Taking the result modulo the hash table size
should give reasonable performance.
The hash table will be an array of pointers to singly-linked
lists of symbol table entries.
It may be a good idea to start with a small hash table
and create a new one of twice the size whenever it fills up,
rehash all the old entries into the new table
and delete the old one.
#sect(Algorithms)
#beginlevel
#sect(Pass 1)
#sect(Interpass phase)
#sect(Pass 2)
#endlevel
#sect(Error Handling)
The general philosophy in error handling will be to continue the
current phase (pass 1, interpass phase, pass 2)
after an error if recovery is possible,
reporting other errors if found,
but terminating execution at the end of the phase.
Warnings will be reported but will not affect subsequent execution.
$ver

Pass 1 errors will include:
   Command syntax error
  Nonexistent or invalid object file
    Storage class of global does not match reference
      Multiply-defined global symbol
Pass 1 warnings will include:
 Undefined global symbol
Interpass phase errors will include:
 Code overflow
Interpass phase warnings will include:
 Direct static area overflow
Pass 2 errors will include:
      Image file creation error
Pass 2 warnings will include:
      Use of undefined global symbol
        Traceback information not available
$jus
#sect(Details of File I/O)
-- Object files are untyped binary
#par()
-- Image files are typed files of image-block data type
$ski 3
(pasdev14)aevlnk.pmf
#toc
     