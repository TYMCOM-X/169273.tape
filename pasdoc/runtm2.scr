$num off
$TITLE left 'New Compiler Runtime Support' left 'Amended, 16 December 1980' left 'Page \'
$tabs 1,9,17,25,33,41,49,57,65,73
&Basic Runtime Support&
$skip
The code as now generated uses the runtime from the old compiler for initialization
and routine entry/exit:
$skip
$ind left 10 $ver
INITP.
PNTRY.
PRTRN.
EXIT.
$ind left 0 $jus
$skip
Calling sequences are unmodified.  Note, however, that no attempt is made to
generate calls to alternate routines for non-KL10 processors.  In fact, the
compiler strongly assumes that it is generating code for only the KL10.
$skip
(A general proposal for a basic runtime package is given in the following
section.)
$skip
For nonlocal gotos, new form operators are introduced.  In the case of a nonlocal
goto to a label defined in a procedure or function, we use:
$skip
$ind left 10 $ver
PUSHJ	17,UW.RTN
JUMPA   reg,label
$skip
$par -3
where
$skip
$ind left +10
$jus
$par -10
reg\(RH)\\contains the stack frame pointer of the routine defining the "label".
$ind left 0 $jus
$skip
In the case of a goto into the main program, a special operator is used.
Unlike the above, it is not given the main stack frame pointer; rather, it must
search the stack for the main stack frame.
$skip
$ind left 10 $ver
PUSHJ	17,UW.PRG
JRST	label
$ind left 0 $jus
$skip
When coding these routines, it would be a good idea to avoid making any assumptions
about the relative addresses of stack frames (i.e., that the main stack frame
address is less than other stack frame addresses).  Coroutines currently
invalidate this assumption, and in the future others surely will too.
$skip 2
&Basic Runtime Package&
$skip
This proposal dictates a new layout for the low segment:
$page
$ind left 10 $ver
                 ._____________________.
0  ----------->  |                     |
		 |   Job Data Area     |
		 |		       |
		 |_____________________|
.JBDA  ------->  |                     |
		 |   Static Storage    |
		 |           	       |
			  ...

		 |_____________________|       __
.JBSA(LH)  --->  |		       |         \
		 |  Pascal Data Area   |         |
		 |                     |         |
		 |_____________________|         |
		 |		       |         |
		 |  Main Stack Frame   |         |
		 |		       |         |
		 |_____________________|         |--  Stack
		 |		       |         |
		 |    Remainder of     |         |
		 |       stack         |         |
		 |                     |         |
			  ...			 |
						 |
		 |_____________________|      __/
		 |		       |
		 |       Heap          |
		 |		       |
			  ...

.JBREL(RH)  -->  |_____________________|
$ind left 0 $jus
$skip
The stack is a threaded list of stack frames which hold the storage for the
runtime system, the main program and subroutines.
$skip
The stack is laid down at .JBSA(LH).  The first frame is, in fact, the Pascal
Data Area.  Immediately below this is the stack frame for the main program.
  The stack frame of the main program is identical in most
respects to that of any other stack frame.
$skip
Each stack frame begins with a header of the following form:
$skip
$ind left 10 $ver
$need 20
.__________________________________________________.
|						   |
|      flags	       ,,    return address        |
|__________________________________________________|
|						   |
|  caller's frame ptr  ,,    parent's frame ptr    |
|__________________________________________________|
|						   |
|         contents of register 17 at entry         |
|__________________________________________________|
|						   |
|          HBT         ,,    routine address + 1   |
|__________________________________________________|
$ind left 0 $jus
$skip
where HBT is the address of the current exception Handler Branch Table,
or zero if none is active.
During execution, register 16 (sp) points to the start of the current frame;
register 17 (sb) points to the end of the stack storage in use.  The LH of
sb is the pushdown overflow count.
$skip
A number of locations (60B) are reserved above the current top of the stack for use by
runtime routines.
The pushdown overflow count is adjusted to reserve this storage.
$skip
The Pascal Data Area is an area used for "static" storage by the runtime
support routines.
Its length is not fixed and may be increased as required by the runtime.
  It is pointed to by .JBSA(LH) -- the end of the low segment
when execution starts and never altered by the runtime.
$skip
The PDA begins with a vector of pointers to the Pseudo-Static Areas
allocated dynamically by INITP.
The rest of the PDA encompasses the allocated PSAs required by the runtime, ODMS,
debugger, etc.  For example:
(1) pointer to the main stack frame, (2) pointer to the current heap,
(3) pointers to active file blocks, etc.
$skip
The calling sequence for INITP. is as follows:
$skip
$ind left 10 $ver
MOVEI	16,stack_size
JSP	7,INITP.
entry sequence for main
$ind left 0 $jus
$skip
INITP.\must initialize the stack, including the PDA and requested PSAs.
The mainline has entry sequence identical to that of any other routine.
$skip
The entry sequence for nonquick subroutines is as follows:
$skip
$ind left 10 $ver
	HRR	16,0(16)	; as required to
	  ...			;   establish scope
PROC:	JSP	1,PNTRY.
	XWD	0,,trace_block
$skip
$par -3
The support routines are as follows:
$skip
PNTRY.:	DMOVEM	16,1(17)
	HRRZM	1,3(17)
	MOVEI	16,0(17)
	HRLI	16,0(16)
	JRST	1(1)
$skip
PRTRN.:	DMOVE	16,1(16)
	TLNE	16,777777
	HLR	16,16
	POPJ	17,
$ind left 0 $jus
$skip 2
&Library routines&
$skip
It is generaly assumed that no library routines (mathematical, string,
set, etc.) modify any registers other than 0 and 1
unless another register is designated in the call to receive the
result.
$skip
&Mathematical Routines&
$skip
The mathematical routines have a standardized calling sequence:
$skip
$ind left 10 $ver
PUSHJ	17,rtn
ARG	result,addr(operand(1))
ARG	result,addr(operand(2))
  ...
ARG	result,addr(operand(n))
$ind left 0 $jus
$skip
"ARG" denotes a zero opcode; i.e., the call is followed by one or more
indirect words giving the register in which to place the "result" and
the addresses of any operands of the function.   Note well:  the addresses
are full indirect words and may involve indirection and indexing; further,
they may give a register address.
$skip
The mathematical routines are detailed below.  Operand(1) corresponds to the
leftmost argument in the descriptor; operand(n), the rightmost.
The type of the value placed in the result register is given after the arrow.
$skip
$ind left 15
$par -10
II.EXP\\\\integer ** integer -> integer
$par -10
RI.EXP\\\\real ** integer -> real
$par -10
DI.EXP\\\\dreal ** integer -> dreal
$par -10
RR.EXP\\\\real ** real -> real
$par -10
DD.EXP\\\\dreal ** dreal -> dreal
$par -10
D.FLT\\\\\float (integer) -> dreal
$par -10
D.TRNC\\\\trunc (dreal) -> integer
$par -10
D.RND\\\\\round (dreal) -> integer
$par -10
DR.RND\\\\round (dreal) -> real
$par -10
R.RND2\\\\round (real, integer) -> real
$par -10
D.RND2\\\\round (dreal, integer) -> dreal
$par -10
R.SQRT\\\\sqrt (real) -> real
$par -10
D.SQRT\\\\sqrt (dreal) -> dreal
$par -10
R.LN\\\\\\ln (real) -> real
$par -10
D.LN\\\\\\ln (dreal) -> dreal
$par -10
R.LOG\\\\\log (real) -> real
$par -10
D.LOG\\\\\log (dreal) -> dreal
$par -10
R.EXP\\\\\exp (real, real) -> real
$par -10
D.EXP\\\\\exp (dreal, dreal) -> dreal
$par -10
R.SIN\\\\\sin (real) -> real
$par -10
D.SIN\\\\\sin (dreal) -> dreal
$par -10
R.ASIN\\\\arcsin (real) -> real
$par -10
D.ASIN\\\\arcsin (dreal) -> dreal
$par -10
R.SINH\\\\sinh (real) -> real
$par -10
D.SINH\\\\sinh (dreal) -> dreal
$par -10
R.COS\\\\\cos (real) -> real
$par -10
D.COS\\\\\cos (dreal) -> dreal
$par -10
R.ACOS\\\\arccos (real) -> real
$par -10
D.ACOS\\\\arccos (dreal) -> dreal
$par -10
R.COSH\\\\cosh (real) -> real
$par -10
D.COSH\\\\cosh (dreal) -> dreal
$par -10
R.TAN\\\\\tan (real) -> real
$par -10
D.TAN\\\\\tan (dreal) -> dreal
$par -10
R.TANH\\\\tanh (real) -> real
$par -10
D.TANH\\\\tanh (dreal) -> dreal
$par -10
R.CTN\\\\\cotan (real) -> real
$par -10
D.CTN\\\\\cotan (dreal) -> dreal
$par -10
R.ATN\\\\\arctan (real) -> real
$par -10
D.ATN\\\\\arctan (dreal) -> dreal
$par -10
R.ATN2\\\\arctan (real, real) -> real
$par -10
D.ATN2\\\\arctan (dreal, dreal) -> dreal
$par -10
RAND1.\\\\random (real) -> real
$par -10
RAND0.\\\\random () -> real
$ind left 0
$skip 2
&Allocation Routines&
$skip
The new compiler uses the same allocation routines, with revised calling
sequences, as does the old compiler:
$skip
$ind left 10 $ver
PUSHJ	17,NEW.
ARG	result,size(block)

PUSHJ	17,DSPOS.
ARG	0,addr(pointer)
$ind left 0 $jus
$skip 2
&Runtime Error Reporting&
$skip
The calling sequence for the error routines is:
$skip
$ind left 10 $ver
	JSP	1,rtn
$ind left 0 $jus
$skip
Each routine should print an appropriate message and exit to the debugger
or dot (in a way that the trace package can handle).
$skip
There are nine error routines:
$skip
$ind left 15
$par -10
SUBER.\\\\a subscript is out of range.
$par -10
STRER.\\\\the index or length argument to substr (or [i:l]) is out of range.
$par -10
VALER.\\\\the value assigned to a scalar variable is out of range.
$par -10
PTRER.\\\\an invalid pointer has been dereferenced.
$par -10
FILER.\\\\an invalid file variable has been dereferenced.
$par -10
CMPER.\\\\aggregate assignment incompatability.
$par -10
ASSER.\\\\assertion failure.
$par -10
CASER.\\\\case index out of range.
$par -10
FLDER.\\\\reference to a field not selected by the current value of the tag
field.  (Not yet generated.)
$ind left 0
$skip 2
&String Runtime Routines&
$skip
Arguments to the string runtime routines are denoted by one of three kinds of
descriptors:
$skip
$ind left 10 $ver
$need 7
$par -3
"F" format:
$skip
ARG	0,addr(text)	; may be full indirect ptr
ARG	0,length	; see below
$skip
$par -3
"X" format:
$skip
ARG	0,addr(byteptr)	; ildb byteptr -> 1st char
ARG	0,length
$skip
$par -3
"C" format
$skip
ARG	0,addr(char)
$ind left 0 $jus
$skip
The length operand is an immediate value.  It is assumed that the runtime
routine loads the length of the string with a "movei reg,@length_word".
Thus, the length may be specified in any one of several ways:
$skip
$ind left 10 $ver
ARG	0,cst_length	; for an immediate constant
ARG	0,0(reg)	; for a length in a register
ARG	0,cst(reg)	; for length = reg+cst
ARG	0,@address(int)	; for full word length
$ind left 0 $jus
$skip
Note that these cases work because we assume that the lengths of valid strings
lie in the range 0..377777B.
$skip
To move strings, there are six classes of routines, each of which operate on
all combinations descriptor types.
$skip
$ind left 10 $ver
MP.xx	    s1 <- s2
MPU.xx	    s1 <- uppercase (s2)
MPL.xx	    s1 <- lowercase (s2)
$skip
$jus
In this group, the source string is padded with blanks or truncated, as necessary,
to meet the length of the target string.
$skip
$ver
M.xx	    s1 <- s2
MU.xx	    s1 <- uppercase (s2)
ML.xx	    s1 <- lowercase (s2)
$skip
$jus
No padding is performed; min (length (s1), length (s2)) characters are moved.
$ind left 0 $jus
$skip
The modifier "xx" denotes how to access the first and second operands.  Possible
modifiers:
$skip
$ind left 15
$par -10
C\\\\\\\\\operand address by C format descriptor.  This is valid as the first
or second operand, but not both.
$par -10
F\\\\\\\\\operand addressed by F format descriptor.
$par -10
X\\\\\\\\\operand addressed by X format descriptor.
$par -10
R\\\\\\\\\the operand is the remainder of the last target string.
For example, whatever is left over after a non padded move.
This is valid only as the first modifier.
Note that the compiler insures that between original use of the target
string (with a C,F or X modifier) and the R form use, there will be
no operation, such as a function invocation, which will alter the stack.
Therefore, a byte pointer and length may be left in the stack extension,
perhaps as a by-product of the original operation.
$ind left 0
$skip
Example:
$skip
$ind left 10 $ver
var s1: packed array[1..4] of char;
    s2: string[12];
    t: packed array[1..16] of char;
$skip
t := uppercase (s1) || substr (s2, i, j+1)
$skip
$par -3
would generate:
$skip
	PUSHJ	17,MU.FF
	ARG	0,T
	ARG	0,16
	ARG	0,S1
	ARG	0,4
	MOVE	2,(byte ptr to (ith char of s2))
	MOVE	3,J
	PUSHJ	17,MP.RX
	ARG	0,2
	ARG	0,1(3)
$ind left 0 $jus
$skip
To concatenate strings, there are six classes of routines, each of which operate on
all combinations descriptor types.
$skip
$ind left 10 $ver
CP.xx	    s1 <- s1 |||| s2
CPU.xx	    s1 <- s1 |||| uppercase (s2)
CPL.xx	    s1 <- s1 |||| lowercase (s2)
$skip
$jus
In this group,
the source string is appended to the target string, which is then
padded with blanks to its maximum length.
$skip
$ver
C.xx	    s1 <- s1 |||| s2
CU.xx	    s1 <- s1 |||| uppercase (s2)
CL.xx	    s1 <- s1 |||| lowercase (s2)
$skip
$jus
No padding is performed;
min (maxlength (s1) - length (s1), length (s2)) characters are moved.
$ind left 0 $jus
$skip
The modifiers for the concatenation operators are as described above.
$skip
There are eight character string comparisions routines which are all variants
on one basic routine.  They differ only in the descriptor formats used to
address their operands.
$skip
$ind left 10 $ver
	CSP.CF	CSP.CX
CSP.FC	CSP.FF	CSP.FX
CSP.XC	CSP.XF	CSP.XX
$ind left 0 $jus
$skip
Their function is to compare the two string operands (with implicit padding
with blanks of the shorter operand).
The result (left in register 1) is the arithmetic difference of the leftmost
distinguishing characters, or zero if the strings are equal.
Thus the result is:
$skip
$ind left 10 $ver
negative   if   s1 < s2
zero	   if   s1 = s2
positive   if   s1 > s2
$ind left 0 $jus
$skip
There are eight runtime routines for performing "index" operations on strings;
they differ in the type of descriptors use to address their operands.
$skip
$ind left 10 $ver
	IX.CF	IX.CX
IX.FC	IX.FF	IX.FX
IX.XC	IX.XF	IX.XX
$ind left 0 $jus
$skip
The result, placed in register 1, is the defined result for index\(s1,\s2).
$skip 2
&Set Masks&
$skip
The code generated for certain kinds of short set operations makes use of
masks defined in the runtime:
$skip
$ind left 10 $ver
SM.SS:	400000,,000000	; the 36 one bits
	200000,,000000
	     ...
	000000,,000001
$skip
SM.SD1:	400000,,000000	; 2 word set, 0 bit on
	000000,,000000
$ind left 0 $jus
$skip 2
&Set Routines&
$skip
The set runtime routines are used to perform storage to storage operations
on long sets.  All sets referenced are word aligned and padded with zeros
in the last word.  There are three parameters used to describe a set:
(1) its address, (2) its lowerbound, that is, the index of the first element
in the set, and (3) its bit length (dimension), which may be zero.
$skip
The set operators use five kinds of operands, denoted by the modifiers in
their names.  The various kinds of operand descriptors are as follows:
$skip
$ind left 10 $ver
$par -3
"L" format
$skip
ARG	0,addr(set)	; full indirect word
ARG	0,lwb(set)	; lowerbound of set
ARG	0,dim(set)	; bit length
$skip
$par -3
"O" format
$skip
ARG	0,op1		; describes [op1..op2]
ARG	0,op2
$skip
$par -3
"Z" format
$skip
no operands, denotes the empty set [].
$skip
$par -3
"D" format
$skip
ARG	0,addr(set)	; for set of ' '..'g'
$skip
$par -3
"V" operand
$skip
ARG	0,addr(int)	; full integer argument
$ind left 0 $jus
$skip
The lwb, dim, op1 and op2 operands are immediate values specified in the same
way as string length words.  "O" format is used for [i] by representing the
set as [i..i].  "D" format is a special case useful for character sets.
$skip
There are three routines used to move/convert/generate long sets:
$skip
$ind left 10 $ver
SMV.LL	    s1 <- s2
SMV.LO	    s1 <- [op1..op2]
SMV.LZ	    s1 <- []
$ind left 0 $jus
$skip
Note that in SMV.LL, conversions of lowerbound and dimension must be performed
thru shifting, truncation or padding with zeros as necessary.
$skip
There are three routines used to perform the logical operations on sets.
The compiler insures that the set operands passed to these routines agree
in lowerbound, but not length.  If s2 is shorter than s1, it should be
implicitly padded with zero words; if s1 is shorter than s2, s2 should be
implicitly truncated.
$skip
$ind left 10 $ver
SUN.LL	    s1 <- s1 + s2
SIN.LL	    s1 <- s1 * s2
SDF.LL	    s1 <- s1 - s2
$ind left 0 $jus
$skip
There are two routines which are used in the set comparision.  They form
the logical sum (or) of a specified operation on each word of the set
operands, and place the result in register 1.
The operation is chosen so that the result is 0 if the tested condition
is true, and nonzero otherwise.
Note that processing may stop when a nonzero result is first generated.
  The compiler insures that
the operands agree as to lowerbound, but not length; the shorter operand
should be implicitly padded with zeros.
$skip
$ind left 10 $ver
SLE.LL	    forms s1 and (not s2)
SEQ.LL	    forms s1 xor s2
$ind left 0 $jus
$skip
There is one operator used to test if an element is in a long set.
It returns a boolean result in register 1.
$skip
$ind left 10 $ver
IN.VL	    reg1 <- op1 in s2
$ind left 0 $jus
$skip 2
&Search/Verify Routines&
$skip
There are two basic routines for search and verify both;  there are nine
variations on these basic routines taking various combinations of string
and set operand descriptors, as denoted by there modifiers.
The basic routines are:
$skip
$ind left 10 $ver
SR.xy	    reg1 <- search (str1, set2)
SRU.xy	    reg1 <- search (uppercase (str1), set2))
$skip
VF.xy	    reg1 <- verify (str1, set2)
VFU.xy	    reg1 <- verify (uppercase (str1), set2))
$ind left 0 $jus
$skip
The modifiers "x" and "y" denote the string and set descriptor types
respectively.  C, F and X formats may be used for strings, and L, O and D
formats may be used for sets.
$skotice that the routines VFU.xD and SRU.xD are equivalent to the functions
defined for the old compiler.
$skip 2
&General Rules&
$skip
Except as otherwise noted, runtime routines are expected to modify only
registers 0 and 1.  Any other registers which are used must be saved and
restored.  The operands to runtime routines, including operands in registers
must not be modified.
$skip
Runtime routines may make use of the stack extension for temporary variables.
In general, PUSHes and POPs should &not& be used to save temporaries or
registers.  This will make it easier to build an interruptable runtime.
Runtime routines which must save temporaries across a call to another
runtime routine should push a normal PASCAL stack frame.  A macro should
be provided for this purpose.
$skip 2
&Procedure Linkage Conventions&
$skip
The following rules are used for construction the parameter list for external
calls.  Currently, they also apply to calls within a compilation, but many
possibilities for optimization exist.
$skip
$ind left 8
$par -3
1.\Var parameters are passed by address.
$skip
$par -3
2.\Value parameters may be passed by address or value depending on their
type and size.
An address is passed if any of the following hold:  the value is a string
or a string compatible packed array of char;
the value is a flexible or generic array, or a record whose last field may
be a flexible array (i.e. typ^.flexible is true);
or the size of the value is greater than two words.
If none of these criteria apply, the value is passed using one or two words,
as appropriate, to store the value.
$skip
$par -3
3.\The parameter list is laid out as a record containing the values or
addresses to be passed.  If the total size is less than seven words, then
the parameters are placed in registers 2 thru 7.  If the total size for the
parameter list is seven words or greater, a parameter block is created in the
stack frame of the caller, and the address of this block is passed in register
2.  With the new compiler, the callee does not copy the parameter block.
$skip
$par -3
4.\A function return value may be passed in one of two ways:  first, a local
temporary may be allocated for the return value at a fixed offset in the
stack frame of the callee.  This location is known by the caller and used to
fetch the value.  Second, the caller may pass the address of the location in
which to store the result.  It is assumed that this location may be modified
at any point during the execution of the function.
Which of the two methods is used depends on the type and size of the return value.
If it would be passed by address if it were a value parameter, then the second
method is used; otherwise, the first method is used.
$skip
$par -3
5.\When the caller generates the address of the return value location,
it is passed to the function in the first register unused in calling the function.
For example, it is placed in register 2 if there are no parameters;
register 3, if only one parameter word is required; register 10B, if six
parameter words are required; and register 3 if the address of a parameter
block is passed.
$ind left 0
$skip 3
(pasdev6)runtm2.scr
  tRm$