$number off
$title LEFT 'Command Utility Subroutines' LEFT 'September 3, 1977' LEFT 'Page \'
&Purpose&
$skip
This document describes various utility subroutines
which are of general use in constructing command processors.
$skip 2
&Summary of Features&
$skip
$ind left 10
$par -10
LOOKUP\\\\searches a list of command or option names for a token
which is extracted from an input line.
$skip
$par -10
OPEN_FILE\opens a text file for input or output.
For an output file,
append mode and old/new file prompting may be selected.
For both, a default extension may be supplied.
$skip
$par -10
PATHNAME\\returns the full title (including device and directory)
of an open text file.
$skip
$par -10
PR_FILE_ID
$par
scans an input line and extracts a file title in system dependent format.
$skip
$par -10
QUERY\\\\\ask a question and waits for a yes or no response.
$SKIP
$par -10
IORESET\\\flushes terminal input and output.
$skip
$par -10
IRESET\\\\flushes terminal input.
$ind left 0
$skip 2
&Data Types&
$skip
Modules performing parsing functions are passed an input line and index.
The index denotes the point at which to begin the parse
and is typically advanced past the item parsed, if successful,
or is left pointing to the position at which an error was detected.
The types are as follows:
$skip
$ver
$ind left 5
CONST CMDLINELEN = 254;
TYPE  CMDLINE = STRING [CMDLINELEN];
      CMDLINEIDX = 0..CMDLINEIDX+1;
$JUS
$skip
$ind left 0
The length chosen yields an efficient representation for
the &index& on all interesting machines. However, calling
programs should not be written to rely on the specific value.
$skip
Modules dealing with file names use the type, FILE_ID, to
hold the name.
While the format is system dependent, the type is
always realized in terms of a varying string (of appropriate length).
Thus, a file_id value is printable, and a literal string giving
a specific filename may be used.
$skip 2
$need 4
&Using these Modules&
$skip
The documentation of each module contains a list of the include files
needed to call the routine.
These files contain type declarations of the parameters
and declarations of the entry points as external procedures and functions.
They are to be used to insure consistency and to aid in identifying referencing
modules in cases changes are required.
$skip
The include files may be found in the Tools Library, [2250,220].
This directory should not be mentioned explicitly in program text,
but should be set up as a search directory before compiling the program.
$skip
The relocatable object modules for these routines are kept in a LINK-10
library file, CMDUTL, in the same directory.
$page
&Module&:\\LOOKUP
$skip
This function extracts the next token from 
an input line,
and looks it up in a list of names.
Returns the index of the name, if found.
$skip 2
&Data Structures&
$skip
The name list consists of an array of names and minimum abbreviation
lengths.
The format is as follows:
$skip
$ver
$ind left 5
CMDLIST =
  RECORD
    NAME: PACKED ARRAY[1..10] OF CHAR;
    ABBREV: 1..10
  END;
$skip
scalar_LIST = ARRAY [scalar] OF CMDLIST;
$skip 2
$ind left 0
$jus
&Usage&:
$skip
$ind left 5
$ver
EXTERNAL FUNCTION LOOKUP_scalar
            (  LINE: CMDLINE;
               VAR IDX: CMDLINEIDX;
               VAR LIST: scalar_LIST;
               MAXscalar: scalar;
               VAR NAMEIDX: scalar     ): BOOLEAN;
$skip 
$jus
$indent left 12
$par -12
Input Arguments:
$skip
$par -10
LINE\\\\\\is the input from which the name token is to be
extracted.
$skip
$par -10
IDX\\\\\\\is the parsing cursor.
LOOKUP scans from this position for the token.
$skip
$par -10
LIST\\\\\\is the name list to be searched.
$skip
$par -10
MAXscalar\is the upper bound of the LIST array.
The value "MAXIMUM (scalar)" should be passed.
$skip
$par -12
Output Arguments:
$skip
$par -10
IDX\\\\\\\is set to the character following the end of the token,
if found in the list.
If the token is not found in the list,
this is set to the start of the token.
If there is no token on the line,
this is left pointing past the end of the line.
$skip
$par -10
NAMEIDX\\\is the scalar associated with the token.
Set if the token is found in the list.
$skip
$need 6
$par -10
<return value>
$par
is true if a token appears in the line and is found in the list;
false otherwise.
$skip
$ind left 2
$par -2
Algorithm:
$skip
A token consists of any number of alphanumeric characters
or a single punctuation character.
A match for the token in the list is found if:
(1) the token is not longer than the command name,
(2) the token is not shorter than the minimum abbreviation of the name,
and (3) the token and name match to the length of the token.
Upper and lowercase are viewed as equivalent.
$skip
$par -2
Notes:
$skip
To use this routine with lists associated with different
scalar types,
it is necessary to have one set of declarations for each scalar type.
The template above is followed, substituting the actual name of
the scalar type for "scalar".
The linker links all LOOKUP_scalar references to the common LOOKUP
routine.
This is a KLUDGE to be fixed when PASCAL allows.
$ind left 0
$skip 2
&Include Files Required&
$skip
$ind left 11
$par -11
CMDUTL.TYP
$par -11
LOOKUP.TYP\contains only a declaration for the type CMDLIST.
The scalar_LIST and entry declaration should be provided by each 
application.
$ind left 0
$page
&Module&:\\OPEN_FILE
$skip
This subroutine opens a text file for input or output.
The mode is specified by the caller.
For an output file, the user may also request
append mode and old/new file prompting.
$skip 2
&Usage&:
$skip
$ind left 5
$ver
EXTERNAL FUNCTION OPEN_FILE
            (  VAR F: TEXT;
               FID: FILE_ID;
               EXT: EXTENSION;
               MODE: IO_MODE;
               OPTIONS: IO_OPTION_SET  ): BOOLEAN;
$SKIP
$jus
$ind left 12
$par -12
Input Arguments:
$skip
$par -10
F\\\\\\\\\is the text file to be opened.
$skip
$par -10
FID\\\\\\\is system dependent file_id string
giving the title of the file or device to be opened.
It is assumed to be correctly formatted.
If not, the results are undefined.
$skip
$par -10
EXT\\\\\\\is a string giving the default extension for the file name.
Used only on systems where this is meaningful.
$skip
$par -10
MODE\\\\\\may be either INPUT_MODE or OUTPUT_MODE.
$skip
$par -10
OPTIONS\\\is a set including zero or more of the following:
$skip
$ind left +2
$par -2
APPEND_MODE - valid only with output mode,
this causes the output to be appended to the end of
an existing file.
If the file does not already exist, then this has no effect.
$skip
$par -2
CONFIRM_OPEN - valid only with output mode,
this causes old/new file prompting.
If selected, it is assumed that the files TTY and TTYOUTPUT
have been opened.
$skip
$ind left -2
$par -12
Output Arguments:
$skip
$par -10
<return value>
$par
is true if the open is successful; false, otherwise.
The open may fail
if options incompatible with the mode selected are used,
the file is not found (input),
or the open is not confirmed (output).
$ind left 0
$skip 2
&Include Files Required&
$skip
CMDUTL.TYP
$par
FILUTL.INC
$page
&Module&:\\PR_FILE_ID
$skip
This extracts a file title from an input string,
and returns a file_id string containing the text of the title.
Use of this routine localizes knowledge of the system dependent format
of a file title.
$skip 2
&Usage&:
$skip
$ind left 5
$ver
EXTERNAL FUNCTION PR_FILE_ID
            (  LINE: CMDLINE;
               VAR IDX: CMDLINEIDX;
               VAR FID: FILE_ID      ): BOOLEAN;
$jus
$skip
$ind left 12
$par -12
Input Arguments:
$skip
$par -10
LINE\\\\\\is the line to be scanned.
$skip
$par -10
IDX\\\\\\\is the parsing cursor.
It is assumed that this points to the first character of the title.
Leading white space is &not& ignored.
$skip
$par -12
Output Arguments:
$skip
$par -10
IDX\\\\\\\is set to the first character past the end of the file title
if a valid title is found.
If the title is incorrectly formed,
this is left pointing to the character that is in error.
$skip
$par -10
FID\\\\\\\is set to the text of the title, if a valid title is found;
otherwise, it is left unchanged.
$skip
$par -10
<return value>
$par
is true if a complete and well-formed title is found;
false otherwise.
$ind left 0
$skip 2
&Include Files Required&
$skip
CMDUTL.TYP
$par
FILUTL.INC
$page
&Module&:\\PATHNAME
$skip
This function returns the full title of an open text file.
That is, the name includes such information
as device and actual directory.
It is useful in determining the file found
when there is directory searching in effect.
$skip 2
&Usage&:
$skip
$ind left 5
EXTERNAL FUNCTION PATHNAME  ( VAR F: TEXT ): FILE_ID;
$ind left 12
$skip
$par -12
Input Arguments:
$skip
$par -10
F\\\\\\\\\is the file whose pathname is to be determined.
$skip
$par -12
Output Arguments:
$skip
$par -10
<return value>
$par
is the full title of the file.
$ind left 0
$skip 2
&Include Files Required&
$skip
CMDUTL.TYP
$PAR
FILUTL.INC
$page
&Module&:\\QUERY
$skip
This is a utility to ask a caller supplied question,
and fetch a yes or no reply.
YES, Y, NO, N, or <eoln>, meaning yes,
are accepted as valid replies.
Also, REPEAT is accepted as a request to repeat the question
in case it is garbled.
$skip 2
&Usage&:
$skip
$ind left 5
RESULT := QUERY ('QUESTION');
$skip
$ind left 12
$par -12
Input Arguments:
$skip
$par -10
QUESTION\\is a string (literal or variable) giving the question to be asked.
This routine appends a question mark and two blanks to the end of
this string.
$skip
$par -12
Output Arguments:
$skip
$par -10
RESULT\\\\is a boolean value.
It is true if an affirmative response is given;
false if a negative response is given.
$skip
$ind left 2
$par -2
Requirements:
$skip
It is assumed that the files TTY and TTYOUTPUT have been opened
before this routine is called.
$skip
$par -2
Algorithm:
$skip
This routine displays the question and waits for a response.
If an invalid response is received,
another is requested and processed.
$ind left 0
$skip 2
&Include Files Required&
$skip
QUERY.INC
$page
&Module&:\\IORESET
$skip
This flushes terminal input and output.  Useful for stopping ongoing output
and discarded characters read ahead after an escape signal is received.
$skip
$ind left 5
EXTERNAL PROCEDURE IORESET;
$ind left 0
$skip 2
&Entry&:\\IRESET
$skip
This flushes terminal input. Useful for discarding characters read
ahead after an error has been detected.
$skip
$ind left 5
EXTERNAL PROCEDURE IRESET;
$ind left 0
$skip 2
&Include Files Required&
$skip
IORESE.INC
  