VAXOSC.TXT, last modified 10/24/83, zw

VAX-ONESCAPE

1.0 Overview

     This  document  describes  the  routines  and   data   structures
associated with the VAX version of the ONESCAPE package.  The ONESCAPE
package contains a set of routines  which  allow  Pascal  programs  to
control  user interrupts, i.e.  Control C's.  There are seven routines
in the ONESCAPE package:

   ONESCAPE    Establishes  the  interrupt  handler.  Any   previously
               established interrupt handlers are lost.

   PUSHESCAPE  "Pushes"  the current interrupt handler and establishes
               a new interrupt handler.

   ESCOFF      Disables  any  active  escape  handlers,  "pushed"   or
               otherwise.  Any Control C's pending are ignored.

   ESCPOP      Disables  the  currently  active  interrupt  handler by
               popping it off the handler stack,  and  activating  the
               handler  on  top of the stack.  If there are no stacked
               interrupt handlers, ESCPOP performs as does ESCOFF.

   FIRESCAPE   Simulates a Control C entered at the keyboard.

   MASK        "Masks" any Control C's until the next UNMASK.

   UNMASK      Causes any "masked" interrupts to be  honored  now.  If
               an  interrupt  is  pending,  this  routine  will  cause
               control to  be  transfered  to  the  current  interrupt
               handler.

The  Pascal-callable interface can be found in ONESCA.INC, in the same
account in which Pascal is found.  The source for the routines  is  in
LIBESCAPE.MAR  on the PAXLIB subdirectory of the PASDEV account on the
VAX.

2.0 General Design

     To detect a Control C on the VAX, the user's program must request
the  terminal driver to establish an AST, asynchronous system trap, to
intercept a user-typed Control C (see VAX  System  Services  Reference
Manual,  Chapter  4  and VAX I/O Reference Manual, 2-23).  A Control C
AST will be established on the first call to ONESCAPE  or  PUSHESCAPE.
When a Control C is entered by the user, the system will cause the AST
service routine to be executed.  The Control  C  AST  service  routine
does the following:

   1. Establish  a  Control  C  AST for the next user-typed Control C.
      This is done because each AST intercepts one  Control  C.  Since
      every  Control  C causes the AST service routine to be executed,
      the program must establish a Control C AST for each  Control  C,
      or  the  next  Control  C  entered will be handled by the System
      handler, not the user's  program.  During  the  execution  of  a
      Control  C  AST  all  Control  C are implicitly masked until the
      Control C AST is finished because ASTs are  implicitly  disabled
      when  an AST service routine is executing, i.e.  one AST routine
      cannot be interrupted by another AST  routine  (see  VAX  System
      Services  Ref.  Manual,  4-5).  Note:  A  new  AST  need  not be
      established if the AST service routine was called  by  FIRESCAPE
      because the Control C AST has not been triggered.

   2. Test  to  see  if interrupts are "masked".  If so, set a flag to
      indicate that a Control C has been typed, but nothing  has  been
      done about it.

   3. If  Control  C's  are  not  masked,  clear  the pending flag and
      transfer control to the current escape handler.  This cannot  be
      done  simply  by  clearing  off  the stack and restarting at the
      proper address, because the compiler  may  have  generated  code
      which  depends  on  registers  containing  certain  values, i.e.
      ONESCAPE being called within the scope of a "with" statement.

         a. Retrieve the frame pointer  of  the  routine  that  called
            ONESCAPE.  The frame pointer is stored in the INT_FP_STK.

         b. Walk  the procedure call stack backwards searching for the
            frame  pointer  for  the  routine  that  established   the
            ONESCAPE.  While  traversing  the  call  stack  modify the
            return address for each  routine  to  point  to  a  return
            statement.  This  is  done  to  insure  that  no  code  is
            executed  while  returning  and  that  all  registers  are
            restored.  The  Control C AST routine must return normally
            to insure that any processing that  the  System  performs,
            such   as  resetting  of  AST  flags,  will  be  performed
            properly.  When a  match  is  found,  replace  the  return
            address,  that which will place us back into the "matched"
            routine, with the address for AST_RECOVER.  AST_RECOVER is
            a  routine which sets R0 to "1" and jumps to the interrupt
            recovery  address.  The  interrupt  recovery  address   is
            stored in INT_PC_STK.  R0 must contain the value "true" so
            that the interrupt code will be executed.

   4. Return.  If interrupts were masked, registers are  restored  and
      processing  begins where it was interrupted.  If interrupts were
      not masked, registers  will  be  restored  and  processing  will
      continue at the users interrupt handler.

The  following diagram shows the procedure call stack before and after
the manipulations by CNTRLC_AST, in the case where interrupts are  not
masked:

             Before                                   After

        |               |                       |               |
         _______________                         _______________
        | return PC     | 16(FP)                | return PC     |
         _______________                         _______________
        | caller's FP   | 12(FP)                | caller's FP   |
         _______________                         _______________
        |               |     Frame of routine  |               |
         _______________                         _______________
        |               |     that established  |               |
         _______________                         _______________
     -->|       0       | 0(FP)     handler  -->|       0       |
         _______________                         _______________
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
         _______________                         _______________
    |   | return PC     | 16(FP)            |   | AST RECOVER   |
         _______________                         _______________
    '<--| caller's FP   | 12(FP)            '<--| caller's FP   |
         _______________                         _______________
        |               |                       |               |
         _______________                         _______________
        |               |                       |               |
         _______________                         _______________
     -->|       0       | 0(FP)               ->|       0       |
         _______________                         _______________
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
         _______________                         _______________
    |   | return PC     | 16(FP)            |   | o--> RETURN   |
         _______________                         _______________
    '<--| caller's FP   | 12(FP)            '<--| caller's FP   |
         _______________                         _______________
        |               |                       |               |
         _______________                         _______________
        |               |                       |               |
         _______________                         _______________
     -->|       0       | 0(FP)               ->|       0       |
         _______________                         _______________
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
         _______________                         _______________
    |   | return PC     | 16(FP)            |   | o--> RETURN   |
         _______________                         _______________
    '<--| caller's FP   | 12(FP)            '<--| caller's FP   |
         _______________                         _______________
        |               |        FIRESCAPE or   |               |
         _______________                         _______________
        |               |      System routine   |               |
         _______________                         _______________
     -->|       0       | 0(FP)              -->|       0       |
         _______________                         _______________
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
    |   |       .       |                   |   |       .       |
         _______________                         _______________
    |   | return PC     | 16(FP)            |   | return PC     |
         _______________                         _______________
    '<--| caller's FP   | 12(FP)            '<--| caller's FP   |
         _______________                         _______________
        |               |                       |               |
         _______________                         _______________
        |               |        Control C AST  |               |
         _______________                         _______________
        |       0       | 0(FP)                 |       0       |
         _______________                         _______________
        |               |                       |               |

3.  Routine descriptions

     This  section  contains  descriptions  of  the  algorithms of the
routines  in  the  ONESCAPE  package.  The   next   section   contains
descriptions  of  the  data  structures  used  throughout the ONESCAPE
package.

   ONESCAPE
          This routine establishes a Control C interrupt  handler.  If
          there is no active interrupt handler, CUR_HDLR_IDX = 0, then
          call  a  routine   to   establish   the   Control   C   AST,
          SET_CNTRLC_AST.  If  there  are  any  interrupt  handlers in
          effect, CUR_HDLR_IDX <> 0, throw them away because  ONESCAPE
          overrides  them.  Get the address of the stack frame for the
          routine that called ONESCAPE and store it in the INT_FP_STK.
          Get  the  return  address for ONESCAPE and store that in the
          INT_PC_STK.  This  establishes  ONESCAPE  as  the  interrupt
          handler.  The  "masked"  and  "pending"  flags are unaltered
          after a  call  to  ONESCAPE.  ONESCAPE  will  use  the  same
          facility  that the Pascal runtime routines use to "mask" and
          "unmask" interrupts (see  PAX$MON.MASKED  in  Section  4.0).
          ONESCAPE is a function which must return "false".

   PUSHESCAPE
          PUSHESCAPE  is similar to ONESCAPE.  If there are no current
          interrupt handlers, CUR_HDLR_IDX = 0, then PUSHESCAPE is the
          same  as  ONESCAPE.  If there are active interrupt handlers,
          PUSHESCAPE does the same  thing  as  ONESCAPE,  except  that
          instead  of  clearing  all  previous  interrupt handlers, it
          stacks them so that they can be restored later by a call  to
          ESCPOP.   It   uses   CUR_HDLR_IDX  as  an  index  into  the
          INT_FP_STK and INT_PC_STK.  There is an arbitrary  limit  on
          the  number  of interrupt handlers that can be stacked.  The
          VAX version uses a maximum  of  five,  as  does  the  DEC-10
          version.  If an attempt is made to push more than the limit,
          an error message is issued and the program dies.

   ESCOFF
          This routine cancels all interrupt handlers.  It  does  this
          by  cancelling  the AST for Control C's using the QIO system
          call.  It then sets CUR_HDLR_IDX to zero so  that  the  next
          call  to ONESCAPE or PUSHESCAPE will establish a new Control
          C AST.

   ESCPOP
          This routine  unstacks  one  interrupt  handler  stacked  by
          PUSHESCAPE.  Stacked  interrupt  handlers  are  unstacked by
          decrementing  the  handler  stack  index,  CUR_HDLR_IDX.  If
          there  are  no  stacked  interrupt  handlers,  this  routine
          behaves as does ESCOFF, so it calls ESCOFF.

   FIRESCAPE
          This routine simulates a user-typed Control C.  This routine
          calls  the  Control  C AST service routine.  The stack frame
          for the user-typed Control C would look like:

                        | Pascal Routines |
                        |-----------------|
                        | Some number     |
                        |  of System call |
                        |  frames.        |
                        |-----------------|
                        | AST service rtn.|
                        -------------------   <-- Top of stack

          the call stack with the FIRESCAPE:

                        | Pascal Routines |
                        |-----------------|
                        | FIRESCAPE rtn.  |
                        |-----------------|
                        | AST service rtn.|
                        -------------------   <-- Top of stack

          Since the system routine uses AP to point to a register save
          block, FIRESCAPE must also provide this.  FIRESCAPE provides
          the "register save block" by allocating a block of the  same
          size  on  the  procedure call stack.  The CALLS instruction,
          used to call the AST service routine, will automatically set
          AP  to  point  to  this block.  The second parameter in this
          argument block is a user-controlled input parameter.  It has
          the  value  that  was passed to the QIO routine when the AST
          was established.  The AST always sets this parameter to "0".
          FIRESCAPE  will  set  this parameter to "1".  The CNTRLC_AST
          routine will examine  this  parameter  and  if  it  is  "0",
          CNTRLC_AST will call SET_CNTRLC_AST to issue another Control
          C AST.  If the value is "1", a "new" Control C AST will  not
          be  issued.  Because  the FIRESCAPE only simulated a Control
          C, the Control C AST is  still  there.  If  interrupts  were
          masked,  FIRESCAPE calls the AST service routine, which sets
          the CNTRLC_PENDING flag, and then returns.

   MASK
          This routine causes all interrupts to be delayed  until  the
          program  issues  an  UNMASK.  To delay the processing of the
          interrupt, it sets a flag.  When the Control C  AST  service
          routine  is  executed it examines this flag.  If the flag is
          set, the service routine sets  the  CNTRLC_PENDING  flag  to
          indicate  that  an interrupt has been triggered, but has not
          been  honored,  and  returns.  (Note:  for  the  "mask"  and
          "unmask"  functions  required by Pascal runtime routines see
          the description for PAX$MON.MASKED in section 4.0)

   UNMASK
          This routine clears the "mask" flag.  If  an  interrupt  was
          pending,  then  the  routine  calls FIRESCAPE to trigger the
          interrupt.

4.0 Data Structures

This  section  describes  the  data  structures  used  throughout  the
ONESCAPE package.

CNTRLC_PENDING     .byte   0
          This  is  a boolean indicating whether an interrupt has been
          triggered during a "masked" interval.  It should  always  be
          false if the PAX$MON.MASKED boolean is false.

CUR_HDLR_IDX       .byte   0
          This  is used as an array index to determine which interrupt
          handler is  in  effect.  A  zero  value  indicates  that  no
          handler  is  in  effect.  The  value  of CUR_HDLR_IDX cannot
          exceed the value of  MAX_NESTED.  CUR_HDLR_IDX  is  used  to
          access INT_FP_STK and INT_PC_STK.

INT_FP_STK         .blkl   max_nested
          This  is  a  stack which contains the addresses of the stack
          frames for the routines that called ONESCAPE or  PUSHESCAPE.
          INT_FP_STK  is  maintained so that the Control C AST service
          routine can determine how far back to clean  off  the  stack
          before   honoring   the  Control  C  by  indexing  with  the
          CUR_HDLR_IDX.

INT_PC_STK         .blkl   max_nested
          This stack contains the addresses at which processing is  to
          be  resumed after interrupts.  Each address is stored during
          the call to ONESCAPE or PUSHESCAPE.  The addresses  are  the
          return  values  for  ONESCAPE or PUSHESCAPE and are found at
          16(FP) during the calls to ONESCAPE or PUSHESCAPE.

PAX$MON.MASKED     .byte   0
          This is a boolean which, if true, indicates that  interrupts
          are to be delayed until an UNMASK.  MASK and UNMASK are used
          to set PAX$MON.MASKED to "true"  and  "false"  respectively.
          The Pascal runtime routines use this flag, not as a boolean,
          but rather as a stack of "masks" and "unmasks".  This  means
          that  any  runtime  routine which needs to be protected from
          Control C's must increment PAX$MON.MASKED when the  volatile
          portion  of  code  begins, and decrement PAX$MON.MASKED when
          the volitale portion is finished.  PAX$MON.MASKED is defined
          in  the Pascal runtime, not in the ONESCAPE package, bacause
          the Pascal runtime will always reference the  flag,  whether
          ONESCAPE  is  being  used, or not.  $MASK and $UNMASK macros
          have been set up on the VAX to allow the sharable runtime to       make the masking and unmasking process easier.  For routines
          that are part of the  runtime,  but  are  not  part  of  the
          sharable,  access  to  PAX$MON.MASKED  will  not be quite so
          easy.  To allow for the sharable runtime  to  be  "sharable"
          and  "relocatable" every public symbol is referenced through
          a transfer vector.  The transfer vector contains  an  offset
          for    the    symbol   that   is   being   referenced.   So,
          PAX$MON.MASKED, when referenced from outside  the  sharable,
          contains  a displacement to the real symbol, PAX$MON.MASKED.
          The general procedure for  referencing  PAX$MON.MASKED  from
          outside the sharable rouiine is:

               movab   pax$mon.masked,r0  ;R0<- addr in transfer vect.
               addl2   (r0),r0            ;R0<- addr of real data word
               tstb    (r0)               ;So now we can test, or ...

MAX_NESTED         = 5
          This  is  a  constant  which  limits  the  nesting of escape
          handlers.  On the DEC-10 it has the value five.  On the  VAX
          it will have the same value.
  F5s.