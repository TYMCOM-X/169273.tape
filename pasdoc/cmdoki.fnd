PASCAL.INC	
{Page 1}...
  command_options~ = 
...
  default_options~: command_options~;     (* default global options *)
...
  prog_options~: command_options~; (* global options--initialized to default_options~,

-----------------------------------------------------------------------
PASINI.PAS	
{Page 1}...
$PAGE init_default_options~
...
procedure init_default_options~;
...
const initial_options~: command_options~ =
...
  default_options~ := initial_options~
...
  init_default_options~;

-----------------------------------------------------------------------
PASCMD.PAS	
{Page 1}...
    save_options~: command_options~;
...
  sw_save (default_options~.switches, save_file);
  sw_save (default_options~.dump_switches, save_file);
  sea_save (default_options~.search_list, save_file);
...
  save_options~ := default_options~;
...
    default_options~ := save_options~;
...
    default_options~.switches := sw_load (save_file);
    default_options~.dump_switches := sw_load (save_file);
    default_options~.search_list := sea_load (save_file);
...
  with prog_options~ do
...
  with prog_options~ do
...
   points to the character past the '/' when entered.  On exit, prog_options~
...
  with prog_options~ do begin
...
    prog_options~ := default_options~;    (* initialize options from defaults *)
...
      default_options~ := prog_options~;
...
  prog_options~.switches := enable_switch (prog_options~.switches, tmprefix, true);
...
  if not switch (prog_options~.dump_switches, 'MANUAL') then begin

-----------------------------------------------------------------------
PASS1.PAS	
{Page 1}...
  if prog_options~.global_opt then
...
	      ((max_severity = 1) and prog_options~.finish_opt) );
...
  if prog_options~.global_opt then
...
                    ( prog_options~.code_opt andif
...
                      prog_options~.banner_opt ) );
...
    prog_options~.code_opt := false;
...
             ( ( prog_options~.quick_opt = opt_is_on ) or
               ( ( prog_options~.quick_opt = opt_is_auto ) and not ( optimize_opt in all_opts ) ) ) );
...
  if finish and (prog_options~.code_opt or (prog_options~.dump_switches <> nil)) then begin
...
  log_record.alloc_strategy := prog_options~.alloc_mode;
  log_record.opt_debug := prog_options~.debug_opt;
...
  log_record.opt_overlay := prog_options~.overlay_opt;
...
  log_record.opt_terse := prog_options~.terse_opt;
...
  log_record.opt_xref := prog_options~.global_opt;
...
  pop_switches (default_options~.switches, nil);
  pop_switches (default_options~.dump_switches, nil);
...
  if prog_options~.names_opt then begin
...
  root_block^.semantic_options := prog_options~.semantic_options;
  root_block^.dump_switches := prog_options~.dump_switches;
...
       ( (max_severity = 1) and prog_options~.finish_opt) ) and
...
  if prog_options~.statistics_opt then begin

-----------------------------------------------------------------------
PASSMO.PAS	
{Page 1}...
        prog_options~.storage := opt_node^.defn^.value.ival
...
        prog_options~.alloc_mode := opt_node^.defn^.value.ival;
...
	if positive and prog_options~.mainseg_opt then begin
...
        prog_options~.overlay_opt := positive;
...
	if positive and prog_options~.overlay_opt then begin
...
	  prog_options~.overlay_opt := false;
...
	prog_options~.mainseg_opt := true;
...
        prog_options~.debug_opt := positive;
...
	prog_options~.masking_opt := positive;
...
	prog_options~.underflow_opt := positive;
...
        prog_options~.global_opt := positive;
...
        if (option_ix = opt_optimize) and positive and prog_options~.debug_opt then begin

-----------------------------------------------------------------------
PASBLK.PAS	
{Page 1}...
    prog_options~.semantic_options := main^.semantic_options;
    prog_options~.dump_switches := main^.dump_switches;

-----------------------------------------------------------------------
PASBOD.PAS	
{Page 1}...
  if prog_options~.global_opt and in_body then
...
  if prog_options~.global_opt and in_body then
...
  if prog_options~.global_opt then begin
...
  if prog_options~.global_opt then

-----------------------------------------------------------------------
PASESM.PAS	
{Page 1}...
  if prog_options~.global_opt and in_body then begin

-----------------------------------------------------------------------
PASSFC.PAS	
{Page 1}...
    if prog_options~.global_opt and in_body then

-----------------------------------------------------------------------
PASGLB.PAS	
{Page 1}...
    prog_options~.global_opt := false;

-----------------------------------------------------------------------
PASCGR.PAS	
{Page 1}...
      prog_options~.debug_opt orif
...
    if switch (prog_options~.dump_switches, 'CGRAPH') then

-----------------------------------------------------------------------
PASALC.PAS	
{Page 1}...
  if switch (prog_options~.dump_switches, 'STORAGE') then

-----------------------------------------------------------------------
PASRDR.PAS	
{Page 1}...
  src_on := src_on and prog_options~.lsys_opt;
  get_lines_from_file (f, include_level, not prog_options~.lsys_opt (* system mode *));
...
    switch_true := switch (prog_options~.switches, switch_name);
...
	  prog_options~.switches := enable_switch (prog_options~.switches, switchname, eval);
...
	      then prog_options~.page_length := listfb.plength;
...
	      then prog_options~.page_width := listfb.width;
...
		prog_options~.source_opt := opt_is_on
...
		prog_options~.source_opt := opt_is_off
...
		prog_options~.source_opt := opt_is_auto;
...
  src_on := (prog_options~.source_opt = opt_is_on) or
            ((prog_options~.source_opt = opt_is_auto) and list_explicit);
...
  listfb.plength := prog_options~.page_length;
  listfb.width := prog_options~.page_width;
...
  sw_start := prog_options~.switches;
...
  pop_switches (prog_options~.switches, sw_start);       (* delete switches created in passing *)
  prog_options~.switches := sw_start;
...
  src_on := (prog_options~.source_opt = opt_is_on) or
            ((prog_options~.source_opt = opt_is_auto) and list_explicit);
...
  sw_start := prog_options~.switches;
...
  pop_switches (prog_options~.switches, sw_start);       (* dispose switch nodes created in passing *)
  prog_options~.switches := sw_start;

-----------------------------------------------------------------------
PASOPN.PAS	
{Page 1}...
  list := prog_options~.search_list;

-----------------------------------------------------------------------
PASS2.PAS	
{Page 1}...
        if optimize_opt in prog_options~.semantic_options then begin
...
  finish := (max_severity = 0) or ((max_severity = 1) and prog_options~.finish_opt);
...
  if prog_options~.statistics_opt then begin

-----------------------------------------------------------------------
PASJMP.PAS	
{Page 1}...
      if prog_options~.debug_opt

-----------------------------------------------------------------------
PASOPT.PAS	
{Page 1}...
  if switch (prog_options~.dump_switches, 'VLSYMS') then
...
  if switch (prog_options~.dump_switches, 'VV') then
...
  if switch (prog_options~.dump_switches, 'USEMOD0') then begin
...
  if switch (prog_options~.dump_switches, 'USEMOD1') then begin
...
  if switch (prog_options~.dump_switches, 'USEMOD2') then begin
...
    if switch (prog_options~.dump_switches, 'USEMOD2') then begin
...
    if switch (prog_options~.dump_switches, 'USEMOD3') then begin
...
  if switch (prog_options~.dump_switches, 'USEMOD') then begin

-----------------------------------------------------------------------
P10SEL.PAS	
{Page 1}...
          if prog_options~.overlay_opt and (id_sym^.kind <> conditions) and

-----------------------------------------------------------------------
PASS3.PAS	
{Page 1}...
  if (not prog_options~.terse_opt) and (line_text <> '') and
...
    if (prog_options~.terse_opt or (line_text = '')) and
...
    if not prog_options~.terse_opt then begin
...
  with prog_options~ do begin
...
  to_list_file := prog_options~.errors_opt and (list_file <> '');
...
  if opts_listing or prog_options~.errors_opt then begin
...
      listfb.width := prog_options~.page_width;    (* set up listing parameters *)
      listfb.plength := prog_options~.page_length;
...
      if prog_options~.banner_opt and opts_listing then begin
...
    if not prog_options~.finish_opt then
...
    if prog_options~.terse_opt
      then dump_errors (prog_options~.errors_opt and (list_file <> ''))
...
    if prog_options~.finish_opt and (max_severity = 1)
...
  if prog_options~.statistics_opt then begin
...
  if finish and prog_options~.code_opt then begin

-----------------------------------------------------------------------
PASS4.PAS	
{Page 1}...
  if finish and prog_options~.code_opt then begin
...
  if prog_options~.statistics_opt then begin
...
    if finish and prog_options~.code_opt then begin
...
    if prog_options~.overlay_opt then begin

-----------------------------------------------------------------------
P10GEN.PAS	
{Page 1}...
                    ( prog_options~.debug_opt and
...
  emit_code (static_area, loc_static, prog_options~.semantic_options);
  if (size_uninit > 0) and (assembly_opt in prog_options~.semantic_options) then
...
               prog_options~.debug_opt; (* if in debug mode *)
...
            if (stmt_index = 1) and prog_options~.debug_opt then begin
...
  if prog_options~.debug_opt then
...
    if prog_options~.debug_opt or (trace_opt in cur_block^.semantic_options)
...
  if prog_options~.debug_opt or (trace_opt in prog_options~.semantic_options) 
...
  gen_ri (movei, sp, prog_options~.storage);
...
  overlaid := prog_options~.overlay_opt or prog_options~.mainseg_opt;
...
  emit_code (code_area, loc_code, prog_options~.semantic_options);
...
  emit_code (cst_area, loc_cst, prog_options~.semantic_options);
  emit_code (bptr_area, loc_cst, prog_options~.semantic_options);
  emit_code (blt_area, loc_cst, prog_options~.semantic_options);
  if prog_options~.debug_opt then begin
...
    emit_code (code_area, loc_fp, prog_options~.semantic_options);
...
  if prog_options~.debug_opt then begin
...
  if overlaid and prog_options~.debug_opt then
...
  else if overlaid and not prog_options~.debug_opt then
...
  else if not overlaid and prog_options~.debug_opt then

-----------------------------------------------------------------------
P10EXP.PAS	
{Page 1}...
	if prog_options~.overlay_opt then begin
...
	if prog_options~.overlay_opt

-----------------------------------------------------------------------
P10DEB.PAS	
{Page 1}...
    if not prog_options~.debug_opt then
...
  if prog_options~.debug_opt then begin
...
  emit_code (code_area, location, prog_options~.semantic_options);

-----------------------------------------------------------------------
P10REL.PAS	
{Page 1}...
  for emit_symbols := (not prog_options~.overlay_opt) to true do begin
...
	    if emit_symbols and prog_options~.overlay_opt then
...
	  if emit_symbols and prog_options~.overlay_opt then
...
    rel_50 (req_global_sym, 'ALC' || cv_int (prog_options~.alloc_mode) || '.');
...
  if not prog_options~.masking_opt then begin
...
  if not prog_options~.underflow_opt then begin
...
  if prog_options~.overlay_opt

-----------------------------------------------------------------------
P10MAC.PAS	
{Page 1}...
  listfb.width := prog_options~.page_width;
  listfb.plength := prog_options~.page_length;

-----------------------------------------------------------------------
PASMAP.PAS	
{Page 1}...
  listfb.width := prog_options~.page_width;
  listfb.plength := prog_options~.page_length;

-----------------------------------------------------------------------
Q10GEN.PAS	
{Page 1}...
		    ( prog_options~.debug_opt and
...
  emit_code (static_area, loc_static, prog_options~.semantic_options);
  if (size_uninit > 0) and (assembly_opt in prog_options~.semantic_options) then
...
	    if (stmt_index = 1) andif prog_options~.debug_opt then begin
...
  if prog_options~.debug_opt then
...
    if prog_options~.debug_opt or (trace_opt in cur_block^.semantic_options)
...
  if prog_options~.debug_opt or (trace_opt in cur_block^.semantic_options)
...
  gen_ri (movei, sp, prog_options~.storage);
...
  overlaid := prog_options~.overlay_opt or prog_options~.mainseg_opt;
...
  emit_code (code_area, loc_code, prog_options~.semantic_options);
...
  emit_code (cst_area, loc_cst, prog_options~.semantic_options);
  emit_code (bptr_area, loc_cst, prog_options~.semantic_options);
  emit_code (blt_area, loc_cst, prog_options~.semantic_options);
  if prog_options~.debug_opt then begin
...
    emit_code (code_area, loc_fp, prog_options~.semantic_options);
...
  if prog_options~.debug_opt then begin
...
  if overlaid and prog_options~.debug_opt then
...
  else if overlaid and not prog_options~.debug_opt then
...
  else if not overlaid and prog_options~.debug_opt then

-----------------------------------------------------------------------
Q10EXP.PAS	
{Page 1}...
	  if (prog_options~.overlay_opt and (id_sym^.kind <> conditions)) andif 

-----------------------------------------------------------------------
Q10SET.PAS	
{Page 1}...
        if prog_options~.overlay_opt then begin
...
        if prog_options~.overlay_opt then

-----------------------------------------------------------------------
PASDAT.PAS	
{Page 1}...
  command_options~ = 
...
  default_options~: command_options~;     (* default global options *)
...
  prog_options~: command_options~; (* global options--initialized to default_options~,

-----------------------------------------------------------------------
PASDMP.PAS	
{Page 1}...
    if switch (prog_options~.dump_switches, 'TTY') then begin
...
    if switch (prog_options~.dump_switches, 'TTY')

-----------------------------------------------------------------------
   