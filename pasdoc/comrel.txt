


          MDSI Pascal Version 2A                                    Page 1
          9 September, 1982




          To:       All Ann Arbor Employees

          From:     Nancy J.  Egan/Development Software

          Date:     9 September, 1982

          Subject:   MDSI Pascal Version 2A



          1  Release Schedule             _______ ________



          Version 2A of MDSI Pascal is now availale on account  [52250,261]
          on  ADP  systems 12 and 13, along with compatible versions of the
          Pascal library (PASLIB), debugger, utilities library (RDLIB), and
          utilities.  If  no  serious  problems  are  reported with the new
          compiler system by ???, then  between  ??  and  ??  on  ???:  ***
          What date will it be released?

           1.   Version 1V(231) of the compiler system will be removed from
              account [52250,234].
           2.  Version 2(345) of the compiler system  will  be  transferred
              from account [52250,220] to account [52250,234].
           3.   Version  2A of the compiler system will be transferred from
              account [52250,261] to account [52250,220].  Version 2A  will
              also remain on account [52250,261] until ???.











          MDSI Pascal Version 2A                                    Page 2
          9 September, 1982


          This  schedule  is  tentative.  For  updates and further details,
          check the message file RELEAS.NOT[52250,261].

          Code generated by version 2A of the compiler is  compatible  with
          code  generated  by  version  2.  A  few  source code changes are
          required to use the new compiler with  existing  source  modules.
          These are as follows:

           1.  All references to the switch [NO]LIBRARY should be removed.
           2.   The  DATAMODULE  keyword  should  be  changed to the MODULE
              keyword.
           3.  Generic arrays can no longer  be  used.  This  affects  only
              programs compiled for the DEC-10 systems.
           4.   NEW  no longer implicitly initializes the storage allocated
              for a user.  Code which relied on  this  initialization  must
              perform explicit initialization.

























          MDSI Pascal Version 2A                                    Page 3
          9 September, 1982


          2  Enhancements and Modifications             ____________ ___ _____________





          2.1 :TARGET M68


          The  new compiler fully supports the :TARGET M68 compiler command
          as well as the :TARGET VAX and :TARGET P10 commands.  The :TARGET
          M68  command  causes code to be generated for the Motorola 68000.
          *** F.R.  478, 464



          2.2 M68 PEEPHOLE OPTIMIZER





          2.3 /[NO]EXTLENGTH(length)


          The new compiler switch, [NO]EXTLENGTH(length), allows  the  user
          to  specify  the number of characters which should be checked for
          uniqueness on  public  and  external  symbol  declarations.  This
          switch  causes  the  compiler  to  warn  the user when apparently
          unique symbols cannot be differentiated within the given  length.
          Normally the compiler will check symbols for uniqueness using the
          full length of the symbol.  This switch is useful since There are









          MDSI Pascal Version 2A                                    Page 4
          9 September, 1982


          symbol   length  limits  imposed  by  the  linkers  on  different
          machines.

          Using the switch as follows:

               /EXTLENGTH(6)

          will cause the  compiler  to  warn  the  user  that  the  symbols
          PARSE_RECORD  and  PARSE_COMMAND  are not unique within the given
          length of 6 characters.

          The length given must be between 1 and 255.  NOEXTLENGTH  is  the
          default  and  uses  the  full length of the symbol for uniqueness
          checking.  *** F.R.  500



          2.4 /HELP SWITCH



          The new compier switch, /HELP, prints instructions on the use  of
          the compiler.  The form "/HELP" prints a basic message, "/HELP:*"
          prints   all   available   information,   and   "/HELP:name"   or
          "/HELP:(name1,name2,...,name-n)"  prints  information on selected
          topics.  *** F.R.  449















          MDSI Pascal Version 2A                                    Page 5
          9 September, 1982


          2.5 /CHECK:STACK suboption


          *** F.R.  471



          2.6 /RUN:file-name switch


          The  /RUN:file-name  switch  directs  the  compiler  to  run  the
          specified  file.  The  default  ersatz  :SYS  is used unless some
          other device or ersatz is specified.  If a PPN is specified,  the
          device  must  also  be specified.  This switch is useful when the
          compiler is run from another program.  At the end of the the .COM
          file read by the compiler "/RUN:LINK" may be specified to run the
          linker.  This allows the ability to chain programs together.  ***
          F.R.  447



          2.7 /RUNOFFSET[:offset] switch



          The  /RUNOFFSET  switch  specifies  a  ccl offset for the program
          specified with the /RUN switch.  The default offset is 0  if  the
          /RUNOFFSET  switch  is  not  specified.  The  defaut  is 1 if the
          [:offset] portion is left off the switch.  This allows the use of
          the standard DEC convention of ccl offsets.  An offset of 1 tells
          the program that it was run from another program.  It  will  will
          then  look  for  a  .COM  file for input rather than promting for









          MDSI Pascal Version 2A                                    Page 6
          9 September, 1982


          input at a terminal.  *** F.R.  447



          2.8 /NOSEARCH switch



          The  new  switch,  /NOSEARCH,  will  cancel  the  effect  of  any
          previously specified search list.  *** F.R.  446



          2.9 [NO]LIBRARY switch removed



          The   /[NO]LIBRARY   switch  has  been  removed.  Library  search
          requests are emitted only for  main  program  compilations.  This
          switch should be removed wherever it is currently used.  *** F.R.
          466



          2.10 DATAMODULE keyword removed



          The DATAMODULE keyword  is  no  longer  valid.  MODULE  has  been
          generalized  to not require any code in the module and thus fills
          the function of the DATAMODULE keyword.  The  DATAMODULE  keyword
          should  be  changed  to MODULE werever it is currently used.  ***









          MDSI Pascal Version 2A                                    Page 7
          9 September, 1982


          F.R.  472



          2.11 New warning messages



          Warning messages are now put out by the compiler when:

           1.   Parentheses  are  not  used  around  each  level  of  array
              constructors or,
           2.  Octal constant are specified in the form "<number>B".

          Full parenthisization is necessary to avoid ambiguity when repeat
          counts are added to the language.  *** F.R.  474



          2.12 Improved Assembly Listing



          The assembly listings generated for any system  now  cleary  show
          all public symbols.  *** F.R.  502
















          MDSI Pascal Version 2A                                    Page 8
          9 September, 1982


          2.13 Allocation using NEW


          NEW no longer initializes the storage it allocates to zero.  Code
          that relied on implicit initialization must now perform  explicit
          initialization.  *** F.R.  480



          2.14 Generic Arrays Removed



          Generic  arrays  are  no  longer valid on the DEC-10's.  Any code
          using generic arrays must be modified to not  use  them.  ***F.R.
          473



          2.15 Improved compiler exception handling



          The  exception  handling  has  been improved in all passes of the
          compiler.  This should give the user more useful  information  in
          the case of a problem with the compiler.  *** F.R.  533















          MDSI Pascal Version 2A                                    Page 9
          9 September, 1982


          2.16 TTY and TTYOUTPUT



          The files TTY and TTYOUTPUT are now automatically associated with
          the user's terminal at the start of execution.  Any call to OPEN,
          RESET  or  REWRITE  specifying the user's terminal will associate
          the specified file variable with the  existing  input  or  output
          file.  Such a call will change the ASCII and RETRY options on the
          associated file in accordance with the options parameter  in  the
          call.  The  user's terminal would never be closed; CLOSE(TTY) has
          no  effect  and  CLOSE(TTYOUTPUT)  has   the   same   effect   as
          BREAK(TTYOUTPUT).

          No changes are necessary to any existing program.  *** F.R.  481


























          MDSI Pascal Version 2A                                    Page 10
          9 September, 1982


          3  Bug Fixes             ___ _____





          3.1 I/O Fixes



          All  reported  bugs  on  all  systems  have been fixed in the I/O
          routines.  In particular, the following changes have been made:

           1.  EMPTY on a text or typed file opened for output only on  the
              VAX  was not allowed.  The file association was incorrect and
              has been fixed.  *** F.R.  517
           2.  READs from a binary file opened for output only on  the  VAX
              were allowed.  This has been corrected to result in an error.
              *** F.R.  516
           3.  WRITEs to a text or binary file opened for input only on the
              VAX  were  allowed.  This  has been corrected to result in an
              error.  *** F.R.  515
           4.  Reading beyond end of file on  a  binary  file  opened  with
              update  on  the  DEC-10's resulted in an illegal instruction.
              The error condition is now handled properly.  *** F.R.  506
           5.  Attempting to do a number of SEEKs on typed files on the VAX
              sometimes  resulted  in an integer overflow.  This was caused
              by a count of the  number  of  eof  errors  encountered.  The
              problem has been fixed.  *** F.R.  509
           6.   Association  of  a file having a one character name did not
              work on the DEC-10's.  It now works properly.  *** F.R.  490
           7.  Typed file reads were reading the minimum size of  the  type









          MDSI Pascal Version 2A                                    Page 11
          9 September, 1982


              rather  than  reading  the size needed for a variable of that
              type.  The correct amount of data is now read.  *** F.R.  437
           8.  Checking the status of or closing a file whose's open failed
              sometimes  caused unexpected results.  Better checking is now
              done as to whether a file is  associated  or  not.  ***  F.R.
              425
           9.   A  binary file read on the VAX of a flex array did not work
              properly.  The read did not check for flex arrays or  records
              and read data on top of the upperbound longword.  These reads
              are now handled properly.  *** F.R.  441




          3.2 Compiler Death and Assertion Failures


          The  compiler  occasionally  died  or  got  unexpected  assertion
          failures.  The following improvements have been made:

              Problems  with  the  compiler's  register handling caused the
              compiler to die  or  to  generate  bad  code  at  times.  The
              register handling has been cleaned up.

              [  The  following is a wordier description of what was in the
              fix reports.  I plan to take it out.
           1.  Double register compares  often  failed  or  gave  bad  code
              because  the  second  register  of  the  pair  was  not being
              unlocked.  This no longer happens.  ***  F.R.  439  The  code
              generator  will  now get an assertion failure if there are no
              available registers when one is  needed.  ***  F.R.  438  The
              DEC-10 code generator at times got an assertion failure on an









          MDSI Pascal Version 2A                                    Page 12
          9 September, 1982


              attempt to free a register already having no  uses.  This  no
              longer happens.  *** F.R.  456.  ]
           2.    The   optimizing  code  generator's  recursive  processing
              sometimes would cause a PDL overflow.  This problem has  been
              resolved.

              [  The  following is a wordier description of the Fix Report.
              I plan to take it out.  Since the  code  generator  processed
              the  dominator  tree recursively, it would get a PDL overflow
              on a  very  deep  dominator  tree  on  the  flow  graph.  The
              recursion  has been removed and very deep dominator trees can
              now be processed.  *** F.R.  435.  ]
           3.  The instructions:

                   X:=ADDRESS(Y);  Z:=X^;

              did cause the compiler to get an  illegal  memory  reference.
              It now works properly.  *** F.R.  426
           4.   The  compiler  got  an  illegal  memory  reference  on  the
              following sequence of code:

                   PROGRAM FOO;
                   EXCEPTION = EX1;
                   BEGIN  END;

              since  there  was  no  valid  definition  for  the  condition
              declaration.  This  no  longer  kills the compiler.  *** F.R.
              476
           5.  An ENVIRON command specifying a nonexistant environment file
              no longer causes the compiler to die.  *** F.R.  445
           6.  A SEARCH list specified before a :TARGET or :ENVIRON command
              now works properly.  It used to die when it tried to use  the









          MDSI Pascal Version 2A                                    Page 13
          9 September, 1982


              SEARCH list.  *** F.R.  444
           7.   The  VAX  and DEC-10 code generators got assertion failures
              processing the use of aggregate  constructors  with  trailing
              flex arrays.  This has been fixed.

              [  The following is a wordier description.  I plan to take it
              out.  On  the  VAX  and  DEC-10's  the  upperbounds  of  flex
              records,   where  trailing  flex  array  is  supplied  as  an
              aggregate constructor and so UFB is known  at  compile  time,
              are  being  generated  in I/F as CST_REFS.  With this change,
              agg_val tuples no longer have users after aggregate expansion
              is  performed,  and reclaim can remove them, and their usages
              of the operands.  This fixes  assertion  failures.  ***  F.R.
              483.  ]
           8.  ANDIF/OFIF boolean expressions passed as parameters now work
              properly.  They did cause assertion failures due to  register
              counts.  *** F.R.  423
           9.   Using  a  TYPE in an external definition before it had been
              declared  caused  an  assertion  failure  in  the  VAX   code
              generator.  It now works properly.  *** F.R.  534
          10.   Attempting  to  pass a varying string to a FORTRAN external
              routine no longer results in an assertion failure in the  VAX
              code generator.  *** F.R.  530
          11.  PASS1 of the compiler no longer infinite loops on

                   WITH PTR(<expression>)

              It  did not work before because the "WITH" did not refer to a
              record.  *** F.R.  475
          12.  An assertion failure no longer results from code like:

                   READ(<file of X>,<ptr to flex>^:









          MDSI Pascal Version 2A                                    Page 14
          9 September, 1982


                         SIZE(<ptr to flex>^,LEN))

              Now only the type of the  first  argument  to  SIZE  is  used
              rather than all information about it.  *** F.R.  428




          3.3 Optimizing Compiler Bad Code



          The  following  changes  have  been  made  in the optimizing-code
          generator to fix bugs:

           1.  The call list of a procedure was being built  backwards.  It
              is now properly generated.  *** F.R.  455
           2.   Bad  code  was  generated for "ptr_type(constant integer)".
              The code generator was trying to replace the base pointer  by
              the  value of the base point but constants do not have target
              types.  The generated code is now correct.  *** F.R.  454
           3.  The assumption that an operand of any normal n-ary  operator
              may be freely replaced by its value caused the instructions:

                   X:=Y;
                   A:=ADDRESS(X);

              to assign the address of Y to A rather than the address of X.
              It now works properly.  *** F.R.  451
           4.  Bad code was sometimes generated for  some  array  subscript
              computations.  The  type  desc  was  being set wrong on a mem
              ref.  Now the array  subscripts  are  handled  properly. 









          MDSI Pascal Version 2A                                    Page 15
          9 September, 1982


              F.R.  442
           5.   Bad  code  was  generated  for  handling  common display op
              expressions.  The mode is now being correctly set.  ***  F.R.
              461
           6.  Bad code was generated for:

                   <ptr>:=PTR(<integer>-1);

              A  full  word was loaded with signed-value alignment but only
              18 bits precision  was  desired.  The  correct  code  is  now
              generated.  *** F.R.  459
           7.   Code  was  sometimes generated which overwrote register 15,
              the Pascal runtime PDA pointer.  This no longer happens.  The
              optimizing code generator bookeeping of register use has been
              improved.  At  times  bad  code  was  generated  because   of
              improper handling of registers.

              [  The following is a wordier description.  i plan to take it
              out.  *** F.R.  443 If op1 is loaded into a  register  and  a
              register  is then needed to make op2 available, and there are
              no registers free, then the register containing  op1  may  be
              displaced without allowance being made for it.  This resulted
              in bad code being generated.  It no longer happens.  *** F.R.
              429.  ]

















          MDSI Pascal Version 2A                                    Page 16
          9 September, 1982


          3.4 Miscellaneous Fixes



           1.   An  attempt  to read or write a flexible argument from/to a
              binary file without  specifying  an  explicit  size  was  not
              diagnosed  as  an  error  by  the compiler.  The compiler now
              prints an error message when an explicit size is  not  given.
              *** F.R.  450
           2.   PTR:=ADDRESS(procedure  name) was allowed by the first pass
              of  the  compiler,  but  was  not  supported  by   the   code
              generators.  It is now supported by the code generators.  ***
              F.R.  498
           3.  Passing a substring of a fixed  string  to  a  fixed  string
              formal  did  not work properly when both strings were nonflex
              and the length of the actual was greater than the  length  of
              the formal.  This now works properly.  *** F.R.  430
           4.   Constant aggregate constructors containing arrays sometimes
              did not  get  initialized  properly.  They  are  now  handled
              correctly.  *** F.R.  526
           5.   FOR  loops containing procedure calls in a main program did
              not work properly.  This has been corrected.  ***  F.R.  469,
              507
           6.   Substrings  were  not passed properly to nonflex nonvarying
              formals on the DEC-10's if the actual substring had  a  fixed
              length  identical to that of the formal.  They are now passed
              correctly.  *** F.R.  494, 495
           7.  Assignment of a longword integer to a packed word  field  is
              now  handled  properly  when  the  field  is unsigned but the
              expression is signed on the VAX.  *** F.R.  492
           8.  Packed fields in  unpacked  records  are  now  having  their
              packed  attribute  taken  into  account on the VAX.  *** F.R.









          MDSI Pascal Version 2A                                    Page 17
          9 September, 1982


              491 Sign/size information is now correctly  set  for  integer
              unary negation and absolute value.  *** F.R.  468
           9.   The  VAX  compiler generated code to compare integer values
              against (2**31)-1 and -2**32.  Limits of an arbitrary integer
              expression  should  be  the  min/max of a machine word on the
              target machine, not on the host.  This  has  been  corrected.
              *** F.R.  467
          10.   Runtime  value  checks were being generated for scalar type
              conversions even when compiled with /NOCHECK.  The checks are
              no longer generated.  *** F.R.  465
          11.   Code  for  the  coercion  of  an integer to a scalar is now
              properly generated for the VAX.  *** F.R.  462
          12.  Bad  code  was  generated  for  aggregate  constructors  for
              flexible arrays such as:

                   A^:=(fld1,fld2,...,fld-n,'string')

              There  was not enough context information to do the expansion
              properly.  These  aggregate  constructors  are  now   handled
              properly.  *** F.R.  477, 470, 436
          13.   Nested  WITHs  now have the usages properly transfered from
              the outer WITH to the inner WITH.  *** F.R.  431
          14.  Use of stack overflow conditions on the VAX will  no  longer
              result  in undefined symbols in the link.  The conditions are
              still not used.  *** F.R.  453
          15.  Bad code was generated for constructs like:

                   ORD(A^.B)

              where B is a pointer into a packed record.  It is now handled
              properly.  *** F.R.  457
          16.   Calling  a  variable  procedure  now  works  on the VAX.  A









          MDSI Pascal Version 2A                                    Page 18
          9 September, 1982


              dynamic temporary was being allocated on  the  stack  between
              pushing  the  parameters  and making the procedure call.  ***
              F.R.  496
          17.  The use of "OPTIONS ASSEMBLY"  on  a  block  now  causes  an
              assembly listing of only that block.  A listing of the entire
              module had been being generated.  *** F.R.  513
          18.  Range checking is now done for <char>:=CHR(<integer>) on the
              DEC-10's.  *** F.R.  532
          19.    The  correct  code  is  now  generated  for  the  VAX  for
              <string>:=CHR(<integer>).  CHR(<integer>)  was  put  into   a
              register  and  a  move  was  attempted  which cannot accept a
              register as a location of a string.  *** F.R.  440,452
          20.  Procedure and function variables were always passed as value
              parameters  on  the DEC-10's.  Passing them as VAR parameters
              now works properly.  *** F.R.  529
          21.  Concatenation of constant length  substrings  now  uses  the
              resulting  string  length  for  the  length  of the temporary
              string rather than using the maximum length  of  the  string.
              *** F.R.  510
          22.   The upper bound word for a flex string parameter on the VAX
              had been missing.  The size of the bound word was being added
              to  the  parameter offset before alignment rather than after.
              This has been corrected.  *** F.R.  501
          23.   The  compiler  will   now   diagnose   references   to   an
              non-addressable  flexible  non-varying string value parameter
              when an addressable reference is required (e.g.  ADDRESS(FOO)
              or WRITE(<binary-file>,FOO)).  *** F.R.  448
          24.   The  compiler  checks  a  set  to see if it is the null set
              before generating code for a SEARCH.  If  the  set  is  null,
              just  the  result is set up rather than making the call.  The
              check to see if the set was null was incorrect and  has  been
              fixed.  *** F.R.  427









          MDSI Pascal Version 2A                                    Page 19
          9 September, 1982


          3.5 Debugger Fixes



           1.     Use    of    the    [file]   option   on   the   .DISPLAY
              PAGES[module@][file] command no longer results in an improper
              termination error when it is used.  *** F.R.  527
           2.   The  stack is now left intact after a program failure.  Not
              enough room was being requested for the debugger static  area
              $DBBASE.  An  assignment  into  a  field near the end of that
              area overwrote data in $STBASE.  The result was  at  times  a
              "FATAL DEBUGGER ERROR".  *** F.R.  508
           3.   A  WITH command is now remembered across single steps.  ***
              F.R.  488
           4.  The Debugger has been  modified  to  eliminate  may  machine
              dependancies.  *** F.R.  463

























          MDSI Pascal Version 2A
          9 September, 1982





                                  Table of Contents                                  _____ __ ________


          SECTION                                                    PAGE

          1        RELEASE SCHEDULE                                    1


          2        ENHANCEMENTS AND MODIFICATIONS                      3

          2.1      :TARGET M68                                         3
          2.2      M68 PEEPHOLE OPTIMIZER                              3
          2.3      /[NO]EXTLENGTH(length)                              3
          2.4      /HELP SWITCH                                        4
          2.5      /CHECK:STACK suboption                              5
          2.6      /RUN:file-name switch                               5
          2.7      /RUNOFFSET[:offset] switch                          5
          2.8      /NOSEARCH switch                                    6
          2.9      [NO]LIBRARY switch removed                          6
          2.10     DATAMODULE keyword removed                          6
          2.11     New warning messages                                7
          2.12     Improved Assembly Listing                           7
          2.13     Allocation using NEW                                8
          2.14     Generic Arrays Removed                              8
          2.15     Improved compiler exception handling                8
          2.16     TTY and TTYOUTPUT                                   9

          3        BUG FIXES                                           10










          MDSI Pascal Version 2A
          9 September, 1982


          3.1      I/O Fixes                                           10
          3.2      Compiler Death and Assertion Failures               11
          3.3      Optimizing Compiler Bad Code                        14
          3.4      Miscellaneous Fixes                                 16
          3.5      Debugger Fixes                                      19


































*^%]p