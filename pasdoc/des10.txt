


                                      TYM-PASCAL PDP-10 I/O System Design/1
                                                               3 March 1980


     Design Summary

     The  I/O  routines  in  the  PASCAL-10  library  can  be  functionally
     partitioned into three classes:

       1. File  variable  maintenance, including the various association
          and termination  calls,  file  block  and  channel  allocation
          calls, and the error handling mechanism.

       2. Text file I/O, including text conversion routines and terminal
          and disk I/O interfaces.

       3. Typed and binary file I/O, including the PASCAL  interface  to
          TENIO.

     The  first group is the "catch-all" for routines that cannot be placed
     under the other, more well-defined  categories.  The  design  of  each
     category is detailed below.


     File variable maintenance

     There  are  five  file  variable  association  entry  points:  <OPEN.>
     initializes a text file,  including  a  terminal  device,  for  input;
     <REWRT.>  initializes  a  text file for output; <RESET.> initializes a
     text file for input and loads the first element of the file  into  the
     file  buffer;  <OPNTP.> initializes a typed file for input, output, or
     update; <OPNBN.> initializes a binary file.  Since the argument  lists
     for the five routines are identical, a single routine <FARGX.> is used
     to explode the ARG words from the caller, placing parameters in a temp
     stack area.  <GTIFN.> is called by all routines to parse the file name
     given to them.  The file name itself is extracted and  placed  in  the
     file  block  for  the  FILENAME  function.  <FGTBF.>  is called by all
     routines to allocate a block of storage on top of the stack (protected
     by the pushdown count) for use as a file block.  <OPNTP.> and <OPNBN.>
     have a common routine <OPNCOM> to  set  up  an  initializing  call  to
     TENIO.  <OPEN.>  and <REWRT.> have a common routine <DODEC.> to set up
     an initializing call to the  TOPS-10  monitor.  Finally,  <GETCN.>  is
     called to allocate a channel for the file.

     In general, the sequence of events for file variable association are:

       1. Parse the file name, recognizing the terminal if specified.

       2. Allocate a channel.

       3. Attempt  to  initialize  the  underlying  I/O  system  (either
          TOPS-10 or TENIO) for performing operations on the channel.

       4. Allocate a file block and initialize it.

     If errors occur, any channel allocated is returned to the  free  pool.
     <RESET.>  provides  a  wrapper  for  the  RESET operation, effectively









                                      TYM-PASCAL PDP-10 I/O System Design/2
                                                               3 March 1980


     performing an OPEN followed by a GET.  If the discrete operations were
     performed  and  the file were not found, the GET would cause an IO_EOF
     error instead of an IO_OPNF (file variable not  associated)  error  as
     desired.

     The  three  termination routines are <CLOSE.>, <CLOSD.>, and <CLOSA.>.
     <CLOSA.> implements the "close all files" operation; it walks the file
     block  chain  and  calls  <CLOSE.>  once  for  each active file block.
     <CLOSE.> and <CLOSD.> immediately fall together, but the  code  splits
     again to call TENIO for typed and binary files, and to perform monitor
     calls for text files.  Finally, the streams join  again  to  free  the
     channel using <FRECN.>, and the file block using <FFRBF.>.

     The  error  mechanism  involves  a  word  in  the file block, which is
     checked with a SKIPLE instruction in the prologue of most routines.  A
     positive  value  indicates  a  deferred  fatal error from the previous
     operation, which is then immediately reported.  The global  and  local
     error  cells  are  cleared if no error was deferred, and the operation
     continues.  Fatal errors are reported  immediately  through  <IOERR.>,
     which  prints  an  error message on the user terminal according to the
     usual  PASCAL  error  message  procedure.  The   error   interrogation
     routines <IOSTA.>, <IOSTL.>, and <EXTST.> are straightforward load and
     clear operations on local or global error cells.


     Text file operations

     Access to text files is regulated through a number  of  routines.  GET
     and  PUT map into <GETCH.> and <PUTCH.> respectively, which attempt to
     optimize single character operations.  For  various  reasons,  if  the
     optimizations  cannot  be  performed,  these  routines  branch  to the
     general routines <FDPROD> and <FDCONS>, which read and write character
     streams  from  and  to  text  files.  The  general formatted text file
     operation selects producer and consumer coroutines, which perform  the
     operation  a  character  at  a  time.  For example, writing an integer
     selects the integer producer coroutine and the file consumer  <FDCONS>
     coroutines,  which  resume  each  other  for  each  character  of  the
     converted integer value.  These coroutines may be  divided  into  four
     classes  --  target  producers, target consumers, datum producers, and
     datum consumers.  A read or a  GETSTRING  operations  pairs  a  target
     producer  with  a  datum consumer; a write or PUTSTRING pairs a target
     consumer with a datum producer.  When a producer resumes a consumer, a
     register  contains the current character being transferred.  There are
     eight kinds of datum producers  and  consumers,  for  integer,  single
     precision  real,  double  precision  real, boolean, X, F, and C format
     strings, and string variables.  Notice that booleans are  never  read,
     and  that string variables are written using an F format operation, so
     that there are a total of 14 datum coroutines.  There are  four  kinds
     of  target  coroutines,  for  files, string variables, substrings, and
     fixed strings.  Again, GETSTRINGS from string variables are  performed
     using  the  substring  form,  so  that  there  are a total of 7 target
     coroutines.










                                      TYM-PASCAL PDP-10 I/O System Design/3
                                                               3 March 1980


     The operations  readln  and  writeln  are  implemented  by  a  special
     consumer  and  producer  respectively  which modify EOLN.  A PUTSTRING
     termination operation, <WR.DNN>, is  provided,  to  pad  out  a  fixed
     length  string  or a substring after a sequence of PUTSTRING items has
     been translated into it.  Finally, most entry  points  have  alternate
     versions,  containing the letter "R" as their last letter, to indicate
     a "remembered" form of the routine; arguments  from  the  most  recent
     call to the standard version are used.

     Registers  are  allocated as follows during a coroutine transfer.  The
     producer and consumer are each given two registers for their  own  use
     during  the  transfer.  Register  R1  transfers  the current character
     during the RESUME from producer to consumer.  In addition, a  pair  of
     adjacent  registers  are  available  to  the  item  processing routine
     (either producer or consumer) only.  The  definitions  of  the  macros
     RESUME   and   DETACH  use  two  registers  containing  coroutine  and
     subroutine  return  addresses.  Note  that   the   other   coroutine's
     registers  are available to the current coroutine if they are restored
     after use.  Only that coroutine's registers will be preserved across a
     RESUME.


     Typed and binary operations

     Most   of   the   typed   and   binary   file   operations  are  coded
     straightforwardly, calling TENIO  as  needed.  For  typed  files,  the
     helper  <CKEOF.>  checks  a  new  value  of CURSOR against the current
     EXTENT of the file, and sets  EOF  accordingly.  The  helper  <FILLC.>
     performs  a  TENIO  operation  to  fill the component with the element
     addressed by CURSOR.  Note that the CURSOR value must  be  decremented
     and  then multiplied by the size of a typed file's base type to obtain
     a word address in the file.

     TENIO has been trained to conform to the PASCAL runtime standards,  as
     described  in  the Runtime Conventions document.  TENIO uses temporary
     storage on top of the  stack.  This  has  the  interesting  effect  of
     blasting  $TEMPs  above  the  stack  pointer (R17) without a procedure
     call, but with an LUUO.  Therefore, any runtime routine which  invokes
     TENIO  must  either  use  $LOCAL  instead of $TEMP for its storage, or
     adjust R17 before and after any call to  TENIO  to  frame  around  the
     routine's  $TEMPs.  Note  that  TENIO  does  use  $STATIC storage, and
     therefore at least part of TENIO must be contained within PASLIB.


     General Implementation Notes

     This section assumes reader familiarity with the  Runtime  Conventions
     document, the I/O System Design document, and the Pascal Report.

     All  I/O  routines save registers.  This is stated in Conventions, but
     cannot be emphasized enough here, since  the  I/O  routines  call  one
     another  frequently.  Note  also  that parameter (ARG) list evaluation
     must be performed before registers are modified.  Any register can  be









                                      TYM-PASCAL PDP-10 I/O System Design/4
                                                               3 March 1980


     used  in an ARG except R0, R1, and TOP.  R0 and R1 are used by the I/O
     routines to evaluate these ARGs.  $TEMPs are  used  whenever  a  given
     piece  of  code  does  not call another (including TENIO), and usually
     $LOCALs in other places.

     In the old runtime, the routine <PRFID.> was available as a hook  into
     the PASCAL filename parser, for various utilities needing it.  The new
     runtime has the  routine  <P.FID.>,  which  takes  as  parameters  the
     address  of a varying length string containing the file name to parse,
     and the address of a parse block to fill.  The parse block looks like,
     but is different from, the DEC style LOOKUP, ENTER, and PATH. blocks.

















































 