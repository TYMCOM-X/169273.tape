
bad_file, 3, 0
Unable to open file $.

flex_var_assignment, 2, 1
A record with variants which contains a flexible array or string may not be
assigned to.

incl_too_many, 3, 2
Include files may not be nested more than 3 levels.

file_variable, 2, 3
The file parameter in an i/o call must be a variable.

fmt_typed, 1, 4
A width parameter has been specified in a typed-file i/o statement.

bad_directive, 1, 5
Invalid directive.

mword_no_special, 2, 6
The MACHINE_WORD type is only allowed with the SPECIAL(WORD) option set.

unclosed_comment, 3, 7
Unclosed comment.

comments_too_deep, 3, 8
Comments may not be nested more than 8 levels.

unopened_comment, 2, 9
Unopened comment.

unbalanced_quote, 2, 10
Unterminated string. Check for a string extending across
a line boundary.

number_expected, 2, 11
Number expected.

bad_token, 2, 12
Invalid symbol "$" in input.

io_arg_type, 2, 13
The argument type is incompatible with the file component type.

size_generic, 2, 14
SIZE of a generic array requires that the lower and upper bounds be specified.

bad_option, 1, 15
Invalid option "$". The options supported are: check, debug, info, source,
map, symbols, list, verbose, terse, overlay, optimize, storage, width,
length, enable, disable.

parse_overflow, 3, 16
Parse stack overflow. The structure of the program was too complex;
reduce the logical nesting of statements and/or expressions and
recompile.  If this error persists, contact the compiler maintainance 
personel.

semi_expected, 1, 17
";" expected.

then_exp, 2, 18
Missing THEN in IF statement.

eq_instead, 1, 19
'=' used instead of ':='.

do_exp, 2, 20
DO expected.

until_exp, 2, 21
UNTIL expected.

end_exp, 2, 22
END expected.

if_exp, 2, 23
IF expected.

no_operand, 2, 24
Missing operand for "$".

no_expression, 2, 25
Missing expression.

no_rparent, 2, 26
")" expected.

no_rbracket, 2, 27
"]" expected.

range_exp, 2, 28
Range specification expected.

upb_exp, 2, 29
Upper bound of range expected after ".."

no_if_pred, 2, 30
Missing predicate after IF.

for_idx_exp, 2, 31
Missing FOR loop index variable.

no_until_pred, 2, 32
Missing predicate after UNTIL.

no_while_pred, 2, 33
Missing predicate after WHILE.

following_text, 3, 34
Text follows logical end of program.

prog_id_exp, 2, 35
Program identifier expected after PROGRAM.

dot_exp, 2, 36
"." expected to terminate program.

semi_before_else, 1, 37
";" found separating THEN and ELSE clauses.

for_init_exp, 2, 38
Missing initial value in FOR statement.

for_limit_exp, 2, 39
Missing termination value in FOR statement.

prog_exp, 2, 40
Program body expected.

fmt_packed, 2, 41
An argument in a formatted read statement is an element of a packed type.

no_begin, 1, 42
Body of main program must start with a BEGIN.

no_rhs, 2, 43
Right hand side of assignment is missing.  Probable error in expression.

stmt_end, 2, 44
Text follows end of statement.

bad_stmt, 2, 45
Invalid statement.

bad_clause, 2, 46
Clause is not properly terminated. Check for an error in an expression.

no_declaration, 2, 47
Declaration expected.

no_label, 2, 48
Label name expected; a positive integer constant must be supplied.

no_const_val, 2, 49
Expression giving the value of the constant is expected.

colon_exp, 1, 50
":" expected.

subr_id_exp, 2, 51
An identifier giving the subroutine name must follow $.

subr_body_exp, 2, 52
The procedure or function has no body.

parm_decl_exp, 2, 53
Parameter declaration expected.

id_expected, 2, 54
Identifier expected.

eq_expected, 1, 55
"=" expected.

lbracket_exp, 1, 56
"[" expected.

of_expected, 1, 57
OF expected.

semi_improper, 1, 58
Improper use of semicolon.

no_variant, 2, 59
Case must contain at least one variant.

lparent_exp, 1, 60
"(" expected.

no_case, 2, 61
At least one case must appear within a CASE statement.

no_stmt, 1, 62
No statement specified for this case. Check for an invalid statement.

no_with_ref, 2, 63
No record specified for WITH.

no_target_label, 2, 64
No label specified as target of GOTO.

no_field, 2, 65
Field identifier expected.

case_label_exp, 2, 66
Case label expected.

bad_case_label, 2, 67
Invalid case label.

set_compat, 2, 68
Set element types are incompatible.

no_type_decl, 2, 69
Type declaration expected.

no_idx_type, 2, 70
Index type expected in array declaration.

not_type, 2, 71
The identifier is not a type identifier.

no_names, 2, 72
One or more parameter names missing.

cst_too_large, 2, 73
The integer constant "$" is too large to be represented internally.

operands_bad, 2, 74
An operand of "$" is of a type not acceptable to the operator.

fil_text, 2, 75
A text file is not allowed in this call.

symb_kind, 2, 76
The identifier is a type or label name, and cannot be used in an
expression.

not_constant, 2, 77
An expression used in this context must yield a constant result.

not_variable, 2, 78
$ cannot be assigned to.

undeclared_name, 2, 79
Identifier not declared.

bad_record, 2, 80
The expression is not a record.

invalid_field, 2, 81
No such field in this record.

not_pointer, 2, 82
The expression is not a pointer.

not_array, 2, 83
The expression is not an array.

str_range, 1, 84
Constant substring reference out of range.

rhs_proc, 2, 85
A procedure has been used where a function is expected.

not_subr, 2, 86
The value is not a procedure or function.

not_scalar, 2, 87
Scalar valued expression expected.

bad_subr_decl, 2, 88
A declaration of this class ($) is not permitted except at level one.

class_bad, 2, 89
The storage class ($) is not permitted with this kind of declaration.

already_dcled, 2, 90
Previously declared.

ret_for_proc, 1, 91
Return type given for a procedure; the name will be declared as a
function.

no_return, 2, 92
No return type specified for a function.

opt_set_bad, 2, 93
The options parameter in an open call must be a set of IO_OPTIONS.

size_flexible, 2, 94
SIZE of a flexible array or string requires that the upper bound be specified.

zero_divide, 1, 95
Division by constant zero.

low_upb, 2, 96
Lower bound of subrange is greater than upper bound.

bad_element_type, 2, 97
The elements of a set must be of a scalar type.

type_dcl_invalid, 2, 98
Invalid type declaration.

module_has_body, 1, 99
A begin-end group appears at the end of a non-main program.  The file
is assumed to be a main program.

no_prgm_body, 1, 100
A main program has no body.  The file is assumed to be an external
declaration module instead.

pr_error, 3, 101
Compiler error.  Syntactic error not recovered from.  Correct all source
program errors and recompile.  If this message persists, contact the
compiler maintenance personnel.

ext_initial, 1, 102
Variables or constants specified as EXTERNAL must not have an initial
value specified.

type_undefined, 2, 103
Undefined type $.

func_parm_conflict, 2, 104
Function name and parameter name conflict.

trunc_string, 1, 105
String constant truncated to fit receiving field.

pad_char, 1, 106
Null string constant ('') padded to fit receiving char value.

no_forward_body, 2, 107
Forward declared procedure has no corresponding actual procedure.

loc_initial, 2, 108
Variables declared local to a subroutine may not have an initial value
specified.

no_initial, 2, 109
No initial value specified for constant.  Only constants declared as
EXTERNAL should have no initial value.

cst_type, 2, 110
Type information required for PUBLIC or EXTERNAL constants.

case_conflict, 2, 111
Case label conflicts with previous label.

sem_opt_bad, 1, 112
Invalid option name.

int_opt_bad, 1, 113
Invalid option for actual procedure or function.  The option is only
allowed for EXTERNAL declarations.

ext_opt_bad, 2, 114
Invalid option for external procedure or function.  The option may only
be applied to an actual subroutine.

set_not_scalar, 2, 115
Set elements must be of scalar type.

str_len, 1, 116
Negative string length not allowed.

sub_count, 2, 117
Too many subscripts.

not_string, 2, 118
The expression is not a string.

str_count, 2, 119
A second subscript is not legal in a substring reference.

sub_length, 2, 120
":" not allowed in an array subscript.

exit_bad, 2, 121
An EXIT IF clause may only appear within a looping construct.

return_bad, 2, 122
A RETURN statement may only be used within a subroutine.

io_str_format, 2, 123
A format may not be specified on the i/o string parameter.

idx_parameter, 2, 124
The index of a for loop may not be a parameter.

idx_complex, 2, 125
The index of a for loop must be a simple identifier.

idx_not_scalar, 2, 126
The index of a for loop is not a scalar.  Only booleans, integers
characters and declared scalar types are allowed.

list_found, 2, 127
A simple expression is required in this context.

with_not_record, 2, 128
The reference specified in a with is not a record value.

label_required, 2, 129
The target of the GOTO is not a label.

std_call_arg, 2, 130
Argument is not $ in standard procedure/function call.

io_no_args, 2, 131
No i/o arguments in read/write call.

io_file_format, 2, 132
A format may not be specified on the file parameter.

fmt_int, 2, 133
The only legal integer format codes are "O" and "H".

fmt_real, 2, 134
The only legal real format code is "E".

fmt_string, 2, 135
The only legal string format code is "L".

scalar_case_required, 2, 136
A scalar type is required for case selection.

lab_defined, 2, 137
The label has been previously defined.

lab_not_defined, 2, 138
Label $ is not defined.

incompatible_types, 2, 139
The operands of "$" are of incompatible types.

cvt_named, 2, 140
The expression can not be converted to type "$".

cvt_unnamed, 2, 141
The expression can not be converted to the required type.

no_file_name, 2, 142
A file name string must be specified if the file parameter is not a simple
variable.

addr_ref, 2, 143
ADDRESS must be called with an addressable data reference.

fmt_extra, 2, 144
Too many format codes.

text_out_type, 2, 145
The only data types which may be written to a TEXT file are
INTEGER, REAL, CHAR, STRING and BOOLEAN.

text_in_type, 2, 146
The only data types which may be read from a TEXT file are
INTEGER, REAL, CHAR and STRING.

lhs_func, 2, 147
Function used where a procedure is expected.

addr_packable, 2, 148
The argument to ADDRESS is an element of a packed type.

flex_type_required, 2, 149
Argument in NEW or SIZE call does not correspond to a variant tag
or flexible array bound.

bind_var, 2, 150
$ cannot be passed as a var parameter.

bind_named, 2, 151
Actual VAR parameter is not compatible with type "$".

bind_unnamed, 2, 152
Actual VAR parameter is not compatible with the formal parameter type.

arg_extra, 2, 153
Too many arguments.

arg_missing, 2, 154
Missing argument(s).

bind_packable, 2, 155
Actual VAR parameter is an element of a packed type.

elem_extra, 1, 156
Too many values in array expression.

elem_missing, 1, 157
Too few elements in array expression.

fld_extra, 1, 158
Too many values in record expression.

fld_missing, 1, 159
Trailing field value(s) omitted from record expression.

set_trunc, 1, 160
Set constant truncated.

sub_brackets, 1, 161
Subscript list enclosed in "( ... )" instead of "[ ... ]".

ptr_deref, 2, 162
Attempt to dereference NIL or variable of type PTR.

bad_forward, 2, 163
Type $ not previously declared.

bad_precision, 2, 164
Real precision must be in the range 1..16.

packing_invalid, 2, 165
The specified bit size is too small.

psize_not_allowed, 2, 166
A bit size may not be specified with this type.

not_packable, 2, 167
The type may not be packed.

bad_flexible, 2, 168
A flexible type may only be used in a pointer type or parameter declaration.

bad_generic, 2, 169
Only a parameter may be declared with a generic type.

flex_invalid, 2, 170
A star ("*") upper limit is not permitted in a real subrange.

data_dcl_bad, 2, 171
Declaration invalid in a DATAMODULE.

no_entry, 2, 172
Subroutine module compilation contains no public subroutines, and
therefore cannot be accessed.

digit_bad, 2, 173
Invalid octal digit.

cond_in_subr, 2, 174
A condition declaration may only appear in the outermost block of
a program or module.

cond_expected, 2, 175
Condition identifier required.

ptr_cvt, 2, 176
Pointer type conversions are allowed only with the SPECIAL(COERCIONS) option set.

ptr_no_special, 2, 177
The PTR type is only allowed with the SPECIAL(PTR) option set.

extent_textfile, 2, 178
The argument to EXTENT cannot be a text file.

dim_specified, 2, 179
Dimension parameter not allowed with $.

dim_too_large, 2, 180
Dimension parameter greater than number of array dimensions.

dim_less_one, 2, 181
Dimension parameter must be greater than zero.

row_major, 2, 182
Wrong number of elements in (possibly multi-dimensional)
array expression.

size_arg, 2, 183
Argument in SIZE call is not a type name or an unpacked data reference.

size_packable, 2, 184
Argument in SIZE call is an element of a packed type.

sub_range, 1, 185
Constant array subscript out of bounds.

exp_undef, 1, 186
Undefined exponential operation.

cst_field, 2, 187
No such field in this record variant.

lab_unrefer, 1, 188
Label $ is neither defined nor referenced.

bin_buffer, 2, 189
A binary file does not have a buffer variable.

for_assignment, 2, 190
Assignment to a for loop index is forbidden.

und_label, 1, 191
Label is not declared in this block.

fil_binary, 2, 192
A binary file is not allowed in this call.

xrf_ref, 3, 193
Compiler error:  Bad reference expression structure detected during
cross reference generation.  Please contact compiler maintenance personnel.

never_called, 1, 194
This procedure or function is never called.

eof, 3, 195
Matching END for IF directive not found.

unmatched_end, 2, 196
END directive has no corresponding IF/IFNOT.

in_system, 1, 197
The SOURCE directive is not allowed within a SYSTEM file.

sw_expected, 1, 198
Switch name expected.

opt_paren, 1, 199
Option value must be enclosed in parentheses.

val_expected, 1, 200
Option value expected.

dir_unterminated, 1, 201
Unrecognized text follows directive on line.

bad_length, 1, 202
Page length not allowed.

bad_width, 1, 203
Page width not allowed.

set_range, 2, 204
The bounds of the set type are outside the legal range.

flex_rec_invalid, 2, 205
A record containing a flex array cannot be a parameter or a field of another
record.

bio_ref, 2, 206
The argument in a binary write is not an addressable reference.

bio_packed, 2, 207
The argument in a binary i/o statement is an element of a packed type.

bio_generic, 2, 208
An explicit size must to specified for a generic argument in a binary i/o
statement.

bio_flexible, 2, 209
An explicit size must be specified for a flexible argument in a binary i/o
statement.

bio_fmt, 1, 210
An excess format parameter has been specified on the argument of a binary
i/o statement.

prog_option, 2, 211
This option may only be specified on a PROGRAM statement.

alloc_mode, 2, 212
The allocation mode must be between 0 and 99.

bad_hdr_fil, 1, 213
Unable to open header file $.

ovl_module, 2, 214
The OVERLAY option may only be specified on a MODULE statement.

deb_module, 1, 215
The DEBUG option may only be specified on a PROGRAM or MODULE statement.

deb_optimize, 1, 216
DEBUG and OPTIMIZE are incompatible options. Optimization will be suppressed.

cmt_dollar_option, 1, 217
The "(*$...*)" option syntax is not recognized in this version of Pascal.

addr_nospecial, 2, 218
The ADDRESS function is only allowed with the SPECIAL(COERCIONS) option set.

bad_expr, 2, 219
Compiler error:  invalid expression. Correct all source program errors and
recompile. If this message persists, please inform the compiler maintenance
personnel.

chk_sub_option, 2, 220
Invalid CHECK sub-option.

opt_comment, 2, 221
Unclosed comment on directive line.

inc_file_name, 3, 222
Invalid include file name.

fil_not_text, 2, 223
A text file is required in this call.

fil_typed, 2, 224
A typed file is not allowed in this call.

cst_special, 2, 225
Integer constants outside the range -(2**31)..(2**31)-1 are allowed only with
the SPECIAL(WORD) option set.

fmt_char, 2, 226
A width may not be specified on a character read.

upb_type, 2, 227
UPPERBOUND of a flexible or generic type is undefined.

lwb_type, 2, 228
LOWERBOUND of a generic type is undefined.

dim_type, 2, 229
DIMENSION of a flexible or generic type is undefined.

bnd_ref, 2, 230
Argument in $ call is not a type name or a data reference.

standard, 1, 231
The STANDARD option is not yet implemented.

scl_range, 1, 232
Constant scalar expression out of range.

sp_sub_option, 2, 233
Invalid SPECIAL sub-option.

flx_upb_required, 2, 234
An upperbound must be specified for a flexible array or string.

flx_record, 2, 235
A tag value must be specified for a record with flexible variants.

rng_empty, 1, 236
This subrange does not contain any elements.

env_dcl_bad, 2, 237
Declaration invalid in an ENVMODULE.

env_has_body, 2, 238
An executable statement part is not allowed in an ENVMODULE.

type_warning, 1, 239
Undefined type $.

envtype_undefined, 2, 240
Type $ undefined in environment.

bad_rl_const, 2, 241
Bad real constant $.

ovl_mainseg, 1, 242
OVERLAY and MAINSEG are incompatible options.  The module will be compiled as
a MAINSEG.

set_size, 2, 243
The set type is too large.

lib_module, 1, 244
The LIBRARY option may only be specified on a PROGRAM, MODULE, or DATAMODULE
statement.

    