Comparison of COMCON.603 with COMCON.702

	TOPS-10 6.03		TOPS-10 7.02

COMMAN:	PUSHJ P,TTYCOM	COMMAN:	PUSHJ P,TTYCOM	;Set up F, U, J, and W
	  POPJ	P,		  POPJ P,	;None found
	MOVEM J,COMJOB		MOVEM J,COMJOB	;For JOBSTS uuo
***>	PUSHJ P,COMUBR	 ***>	PUSHJ P,SVEUB	;Save UBR and set new one
	LDB   T1,LDPCMX		LDB   T1,LDPCMX	;Get forced command index
	MOVSI T2,LDBCMF		MOVSI T2,LDBCMF	;Is command forced?
	TDNE  T2,0(U)		TDNE  T2,0(U)	; ...
	 SKIPA T2,TTFCOM(T1)	 SKIPA T2,TTFCOM(T1) ;Yes, get SIXBIT name
COM1:	PUSHJ P,CTEXT	   COM1:PUSHJ P,CTEXT	;Scan command name to T1			PUSHJ P,FNDNAM		PUSHJ P,FNDABV	;Look it up

COMUBR does not save current UBR if JOB refers to a job that has no UPT.
SVEUB always saves the current UBR, regardless of J and JOB.  Note that J
was set up by SCNSER, and can be different from JOB, which was set up by
the scheduler.

-------------------------------------------------------------------------

SUBTTL	COMCON - INTERFACE TO COMMAND DECODER MODULE

;ROUTINE TO SETUP THE USER BASE REGISTER FOR COMMAND PROCESSING
;CALLING SEQUENCE:
;	PUSHJ	P,COMUBR
;	...	ALWAYS RETURN HERE - UBR POINTS TO THE UPMP OF THE
;		JOB THAT TYPED A COMMAND

COMUBR::MOVE	T1,.C0JOB##	;T1=JOB NUMBER OF CURRENTLY RUNNING JOB
	HRRZ	T1,JBTUPM##(T1)	;JOB HAVE A UPMP?  (NO, ONLY IF THE CURRENT
				; JOB DID  LOGOUT UUO GIVING BACK ALL
				; OF ITS CORE)?
	JUMPE	T1,STEUB	;NO, DON'T SAVE THE UBR SINCE IT POINTS
				; A UPMP WHICH HAS BEEN RETURNED
				; TO THE FREE CORE LIST - JUST POINT THE
				; UBR AT THE UPMP OF THE JOB THAT THE
				; COMMAND IS BEING DONE FOR
	JRST	SVEUB		;SAVE AND SETUP THE UBR

-------------------------------------------------------------------------
Note: .C0JOB and J do not necessarily have the same number!
-------------------------------------------------------------------------

;ROUTINE TO SAVE AND OPTIONALLY SET UP THE USER BASE REGISTER
; AND RESTORE IT ON A CPOPJ OR CPOPJ1 RETURN
;CALLING SEQUENCE:
;	PUSHJ	P,SVEUB		;TO SAVE USER BASE REGISTER AND SETUP
;				;USER BASE REGISTER FOR JOB IN J
;ALWAYS RETURN HERE

SVEUB::	PUSH	P,T1		;SAVE A TEMPORARY
	DATAI	PAG,T1		;GET THE CONTENTS OF THE UBR AND EBR
	PUSHJ	P,STEUB		;SETUP THE UBR FOR THE JOB WHOSE JOB NUMBER
				; IS IN J
SSEU1:	EXCH	T1,-1(P)	;GET THE CALLER'S PC AND SAVE THE CONTENTS
				; OF THE UBR AND EBR
	MOVEM	T1,1(P)		;SAVE THE CALLER'S PC IN A TEMPORARY LOCATION
				; ON THE STACK
	POP	P,T1		;RESTORE T1 TO ITS CONTENTS ON ENTRY
	PUSHJ	P,@2(P)		;RETURN TO THE CALLER LEAVING .+1 ON THE
				; STACK SO WHEN THE CALLER DOES A POPJ OR
				; A CPOPJ1, CAN RESTORE THE PREVIOUS CONTENTS
				; OF THE UBR AND THE EBR
	  CAIA			;CPOPJ RETURN
	AOS	-1(P)		;CPOPJ1 RETURN - BUMP RETURN PC
	EXCH	T1,(P)		;GET THE PREVIOUS CONTENTS OF THE UBR
	DATAO	PAG,T1		;RESTORE THE UBR AND THE EBR
	JRST	TPOPJ##		;RESTORE T1 AND RETURN

-------------------------------------------------------------------------

;ROUTINE TO SETUP USER AND EXEC BASE REGISTERS FOR A JOB
;CALLING SEQUENCE:
;	MOVE	J,JOB NUMBER
;	PUSHJ	P,STEUB

STEUB::	CAILE	J,JOBMAX##	;IS THIS A LOW SEGMENT?
	POPJ	P,		;NO, THE UBR MUST ALREADY BE SETUP
				; OR DOESN'T NEED TO BE (ADDRESSES WILL BE
				; MAPPED THROUGH THE EXEC MAP)
	PUSH	P,T1		;SAVE A TEMPORARY
	HRRZ	T1,JBTUPM##(J)	;T1 = THE PAGE NUMBER OF THE USER PAGE MAP PAGE
	TRNN	T1,17777	;IS THERE A UPMP
	JRST	TPOPJ##		;NO, DON'T CLOBBER UBR
	TLO	T1,(LG.LUB)	;REQUEST LOADING OF UBR
	DATAO	PAG,T1		;SET FOR CURRENT USER AND CLEAR THE AM
	JRST	TPOPJ##		;RESTORE T1 AND RETURN

-------------------------------------------------------------------------

The change from 603 to 702 was to make COMCON always preserved the status
of the UBR so that when it did a POPJ (such as when it had to delay the
command), the original UBR status would be restored.  In particular, 603
would fail if the current UBR was set up for job A, the last job to run
was job B which did a LOGOUT uuo, and COMCON is getting ready to run job
C.  Just because job B was the last one to run, that does not mean that
the UBR is currently set for job B.  The fix was to always preserve the
previous UBR status, regardless of which job ran last.

		Joe