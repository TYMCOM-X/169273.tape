entry
	NTQ!, CZAP!, CORG!, CYEL!, BALLS!,
	IntINI,  IntAUX,  IntZAP,  IntTrace,  IntCause,
	CreAUX,  AuxZAP,  AuxSYNC,
	AuxOUT,  AuxSTR,  AuxIN,   AuxLINE,
	AuxPORT, AuxTRACE
;
begin	"AUXINT"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
!get!definitions(tymint);
!get!definitions(proces);
require processes;


internal integer AUXPORT;
internal boolean AUXTRACE;
internal boolean NTQ!, CZAP!, CORG!, CYEL!, BALLS!;

Own Integer AXOCT;	! used by AUXOUT in case of interrupt ;

define	Int!NTQ      = 10
,	Int!CYEL     = 11
,	Int!CORG     = 12
,	Int!CZAP     = 13
;


Internal simple procedure IntINI(Itemvar INTPRO);
intset (INTPRO,pstack(8));


Internal simple boolean procedure IntTrace( Boolean Trace );
Return( AuxTrace_ Trace );


simple procedure NTQ;	NTQ! _ True;	! set flag;


simple procedure CYEL;
begin
    CYEL! _ True;
    If AuxTrace then Print( "[Ax.YEL]" );
end;


simple procedure CORG;
begin
    CORG! _ True;			! set flag ;
    BALLS!_ BALLS! + 1;			! increment counter ;
    If AuxTrace then Print( "[Ax.ORG]" );
end;


simple procedure CZAP;
begin
    CZAP! _ True;			! set flag ;
    If AuxTrace then Print( "[Ax.CZAP]" );
end;


Internal simple procedure IntAux( Integer AuxP );
begin
    AuxPort_ AuxP;
    CYEL! _ CORG! _ CZAP! _ NTQ! _ False;
    BALLS! _ 0;
    intmap (tinass( AuxPort, !IAYEL, Int!CYEL),CYEL,0);
    enable (newenb(Int!CYEL));
    intmap (tinass( AuxPort, !IAORG, Int!CORG),CORG,0);
    enable (newenb(Int!CORG));
    intmap (tinass( AuxPort, !IAZAP, Int!CZAP),CZAP,0);
    enable (newenb(Int!CZAP));
    intmap (intass(!IANTQ,Int!NTQ),NTQ,0);
    enable (newenb(Int!NTQ));
end;



Internal simple procedure IntZap;
begin
    disable (newenb(Int!CYEL));		! ignore yellow balls;
    disable (newenb(Int!CORG));		! ignore orange balls;
    disable (newenb(Int!CZAP));		! circuit zapper;
    disable (newenb(Int!NTQ));		! notice to quit;
end;



Internal simple procedure IntCause( integer intChan );
start!code
	move	1,intChan;	! channel with bits set;
	andi	1,'77;		! mask out newenb;
	movn	2,1;		! negate;
	movsi	1,'400000;	! set bit 0;
	rot	1,(2);		! rotate the right number of channels;
	tlo	1,'400000;	! set cause interrupt flag;
	calli	1,-'35;		! intact;
	 setom	!skip!;
end;

internal integer procedure CREAUX (string UNAME);
begin "CREAUX"
    integer I;
    integer array X[0:5];
    if length(UNAME)=0 then UNAME _ ":";
    if UNAME=":" then UNAME 
	_ cv6str(calli(!xwd(-1,!GTUNM),calli!GETTAB))
	& cv6str(calli(!xwd(-1,!GTUN1),calli!GETTAB))
	& UNAME;
    if UNAME[inf for 1]=":" then UNAME
	_ UNAME
	& cvs(calli(!xwd(!CNSYS,!GTCNF),calli!GETTAB));
    for I _ 0 upto 5 do X[i] _ cvasc(UNAME[1+5*i to 5+5*i]);
    AUXPORT _ I _ calli(location(X[0]),calli!CREAUX);
    if !SKIP! then return(AUXPORT);
    print(crlf,"?unable to build circuit to ",UNAME,crlf);
    case !lh(I) of begin
      	[CXSUP#] case !rh(I) of begin
	    [CXSFE#] print("?format error");
	    [CXSBU#] print("?user not in MUD");
	    [CXSBM#] print("?bad MUD");
	    [CXSHU#] print("?host unavailable");
	    [CXSDF#] print("?downline load/dialout request failure");
	    [CXSTO#] print("?timeout");
	    [CXSAB#] print("?access barred");
	    [CXSIS#] print("?error in ISIS");
	    [CXSLQ#] print("?long queue in supervisor");
	    else print("?unknown supervisor error code: '",cvos(!rh(I))) end;
	[CX2AX#] print("?too many circuits without AC license");
	[CXLOG#] print("?not your username without AC license");
	[CXDCB#] print("?no room in monitor");
	[CXNRR#] print("?sup did not respond to original req");
	[CXNRL#] print("?sup did not respond to login message");
	[CXNCH#] print("?sup did not supply a circuit");
	[CXERR#] print("?sup error from original request");
	else print("?unknown CREAUX error code: '",cvos(!lh(I)))
    end;
    print(crlf);
    !SKIP! _ false;
    return(AUXPORT _ -1);
end "CREAUX";


internal simple procedure AUXOUT(string S);
begin!code "AUXOUT"
	Label Loop, LWait, MWait, Gotit;
	HRRZ	1,-1(SP);		! Get the count ;
	MOVEM	1,AXOCT;		! Save in a variable ;
Loop:	HRL 	1,AuxPort;		! Get port ;
	HRRI	1,!AXO8;		! Output image character ;
	ILDB	2,(SP);			! Get character ;
	AUXCAL	1,2;			! Output ;
	SOSLE	AXOCT;			! Test count ;
	  JRST	Loop;			!  and loop if more ;
	SETZM	CORG!;			! Clear orange ball flag ;
LWait:	HRL 	1,AuxPort;		! Get port ;
	HRRI	1,!AXSYB;		! Send a yellow Ball ;
	AUXCAL	1,;			! Send it ;
	HRLI	1,1;			! Time in seconds ;
	HRRI	1,10;			! Wait for up to 10 seconds ;
	SOSG	BALLS!;			! If we think we have to ;
	 SKIPE	CORG!;			! (well, only if not yet);
	  CAIA;				!  [no waiting necessary]  ;
MWait:	uuo!HIBER 1,;			!  for Orange-Ball return ;
	 JFCL;				! Ignore sleepy errors ;
	SKIPG	BALLS!;			!  No balls -- no glory! ;
	 SKIPE	CORG!;			! Did we get one? ;
	  CAIA;				!    yes - sometime - so bye ;
	 Jrst	MWait;			! No -- so wait ;
Gotit:
end "AUXOUT";


internal simple integer procedure AUXIN (integer TIM(0) );
begin "AUXIN"
    integer C;
    calli( (auxport lsh 27) + !hl('111) + TIM, calli!HIBER);
    if !SKIP!
     then begin
    	C _ auxclv(AuxPort,0,!AXI8S);
	if AuxTrace
	 then outchr(C);
	if !SKIP!
	 then return(C)
	 else return(-1);
     end
     else return(-1);
end "AUXIN";


internal simple string procedure AuxLine(integer TIM(0));
begin
    String L; Integer J;
    L_ null;
    While -1 < J_ AuxIn(TIM)
     do begin
	If J = #LF then Return( L );
	If J neq #CR then L_ L & J;
     end;
    Return( L );
end;

internal simple procedure AUXZAP;
begin!code
	MOVE 1,AuxPort;
	uuo!ZAPCIR 1,;
	 JFCL;
end;


internal simple boolean procedure AuxSync(string CHS; integer TIM(0));
begin
    integer C,I;
    while length(CHS) do begin
      C _ lop(CHS);
      do begin
	I_AuxIn(TIM) land '177;
	if not !SKIP! then return(false);
      end until I=C or !lh(AuxPort);
    end;
    return(true);
end;


end	"AUXINT" $
