TITLE TRANS -- ROUTINES FOR TRANSMITTING AND RECEIVING DATA
;       INCLUDES COMPRESSION AND DECOMPRESSION LOGIC

ENTRY ACTRANS,BCTRANS,ACR,BCR
ENTRY SWBAC
ENTRY CPOPJ,CPOPJ1
ENTRY AC1,AAR1
ENTRY DNOR,RCVR,ST,STE,RANKT
; EXTERNAL ROUTINES
EXTERN BGC,CW,TRAP
 EXTERN ADIAG,BDIAG
; CELLS CONTAINING EXECUTABLE INSTRUCTIONS:
EXTERN BCR1X,ACR1X,AAR1X,G,PCH,TRANS
; EXTERNAL STORAGE:
EXTERN AC6,COPT,CCR,RECTYP,T1,T2

; RECEIVER DECOMPRESSION ROUTINES

; DECOMPRESS RECORD BY RANK ROUTINE
;       RETURN WHEN COUNTB IS ALL USED UP
;       SKIP RETURN IF CONTROL CODE IS ENCOUNTERED
ACR: XCT ACR1X  ;USUALLY CONTAINS JRST AAR1

; LOW-LEVEL CODE WITHIN ACR TO UNDO DUPLICATE CHAR COMPRESSION
AAR1: XCT AAR1X ;USUALLY CONTAINS PUSHJ P,BGC
 CAIG C,EM
 JRST AAR7
 

ACR5: CAIG C,NT+BIASA-1
 JRST ACR2              ;TRANSLATING CHAR
; COMBINED CHARACTER PAIR
 SUBI C,BIASA+NT
 IDIVI C,NC             ;REMAINDER GOES TO R10
 MOVE C,RANKT(C)        ;TRANSLATE FIRST OF PAIR
ACR5A: XCT PCH          ;WRITE THE CHAR
 JRST ACR7
; COUNTB USED UP.  MODIFY ACR1X TO START AT ACR6 NEXT.
 MOVE [JRST ACR6]
 MOVEM ACR1X
 POPJ P,

AAR7: CAIG C,CAN-1
 JRST AAR4
 CAIE C,EM
 JRST AARCAN            ;ESCAPED BYTE
; CONTROL CODE
 PUSHJ P,BGC
 CAIG C,77
 JRST .+3
 AOS (P)
 POPJ P,                ;SKIP RETURN FOR CONTROL CODE
; DUPLICATED BYTE
 SUBI C,BIASC-MINC
 MOVEM C,RCC            ;REPEATED CHAR COUNT
 PUSHJ P,BGC
 MOVEM C,RC             ;REPEATED CHAR
 MOVE [JRST AAR2]
 MOVEM AAR1X            ;MODIFY AAR1X TO JUMP TO AAR2 NEXT
AAR2: MOVE C,RC
 SOJGE RCC,ACR5         ;HANDLE COMPRESSED DATA
 MOVE [PUSHJ P,BGC]
 MOVEM AAR1X            ;RESTORE AAR1X
 JRST AAR1              ;AND FETCH NEXT CHAR
; PREFERRED CHAR COMPRESSION
AAR4:
 IFG 1,<TRNN C,-10
 JSR TRAP>
 SUBI C,BIASPA-MINPA
 MOVEM C,RCC
 SETZ RANK,             ;SECOND OF PAIR IS OF RANK 0
 MOVE [JRST AAR5]
 MOVEM AAR1X
AAR5: MOVE C,RANKT      ;TRANSLATE TO MASTER CHAR OF RANK 0
 SOJGE RCC,ACR5A        ;RANK0=RANK1=0
 MOVE [PUSHJ P,BGC]
 MOVEM AAR1X            ;RESTORE AAR1X
 JRST AAR1              ;AND FETCH NEXT CHAR
; ESCAPED BYTE
AARCAN: PUSHJ P,BGC
 JRST ACR4

; TRANSLATING CHAR
ACR2: SUBI C,BIASA      ;SUBTRACT BIAS
ACR3: MOVE C,RANKT(C)   ;TRANSLATE
ACR4: XCT PCH           ;WRITE BYTE TO FILE
 JRST ACR               ;FETCH NEXT
 POPJ P,                ;COUNTB EXHAUSTED
ACR6: MOVE [JRST AAR1]
 MOVEM ACR1X
ACR7: MOVE C,RANKT(RANK)
 XCT PCH                ;WRITE THE CHAR
 XCT ACR1X              ;ACR1X ALWAYS CONTAINS A JRST INST.
 POPJ P,                ;COUNTB EXHAUSTED.


; DECOMPRESS RECORD WITH DUPLICATE COMPRESSION
;       RETURN WHEN COUNTB IS EXHAUSTED
;       SKIP RETURN IF CONTROL CODE IS ENCOUNTERED
BCR: XCT BCR1X  ;USUALLY CONTAINS PUSHJ P,BGC 
 CAIG C,EM
 CAIG C,CAN-1
 JRST BCR8
 CAIE C,EM
 JRST BCRCAN    ;GOT DATA ESCAPE
 PUSHJ P,BGC
 CAIG C,BIASP-1
 JRST BCR2
; PREFERRED CHARACTER COMPRESSION
 SUBI C,BIASP-MINP
 MOVEM C,RCC    ;REPEATED CHAR COUNT
 MOVE [JRST BCR3]
 MOVEM BCR1X
BCR3: MOVE C,PREFER
 SOJGE RCC,BCR8
 MOVE [PUSHJ P,BGC]
 MOVEM BCR1X    ;RESTORE BCR1X
 JRST BCR       ;AND FETCH NEXT CHAR
BCR2: CAIG C,77
 JRST BCR5
; CONTROL CODE
 AOS (P)
 POPJ P,        ;SKIP RETURN WITH C=CONTROL CODE
; REPEATED CHAR COMPRESSION
BCR5: SUBI C,BIASC-MINC
 MOVEM C,RCC    ;REPEATED CHAR COUNT
 PUSHJ P,BGC
 MOVEM C,RC     ;REPEATED CHAR
 MOVE [JRST BCR6]
 MOVEM BCR1X    ;MODIFY BCR1X TO JUMP TO BCR6 NOW
BCR6: MOVE C,RC
 SOJGE RCC,BCR8
 MOVE [PUSHJ P,BGC]
 MOVEM BCR1X    ;RESTORE BCR1X
 JRST BCR       ;AND FETCH NEXT CHAR
BCRCAN: PUSHJ P,BGC
BCR8: XCT PCH   ;WRITE CHAR TO FILE
 JRST BCR       ;AND FETCH NEXT
 POPJ P,        ;COUNTB EXHAUSTED

; DUPLICATE COMPRESSION CODE.  TEDIOUSLY WRITTEN TO MINIMIZE
; EXECUTION TIME.  MODIFY WITH CAUTION.
BCTRANS: TROE F,HSW     ;SHOULD WE GENERATE A HEADER
 JRST BCT0      ;NO, ALREADY DONE
 PUSHJ P,BDIAG
 W [EM]
 W RECTYP
 W PREFER
BCT0: MOVE COPT         ;CHECK COMPRESSION OPTIONS
 TRNE R0,AUTO
 JRST S0                ;START COMPRESSION
BCT1: XCT G             ;FETCH BYTE
 JRST .+2
 POPJ P,                ;FINISHED BLOCK
 CAIG C,EM
 CAIG C,CAN-1
 JRST BCT2
 MOVEM C,RC
 W [CAN]
 MOVE C,RC
BCT2: PUSHJ P,CW
 JRST BCT1

S0: XCT G
 JRST S0B
 POPJ P,
S0A: MOVE C,R3  ;*R3 USED THROUGHOUT.  CHECK TO SEE IF PRESERVED
S0B: CAME C,PREFER
 JRST D0
 XCT G
 JRST S0C
; OUTPUT 1 PREFERRED CHAR AND EXIT
S1: MOVE RC,PREFER
; OUTPUT 1 NON-PREFERRED CHAR AND EXIT
D2: W1 RC
 POPJ P,
S0C: CAME C,PREFER
 JRST S2
 XCT G
 JRST S0D
; OUTPUT 2 PREFERRED CHAR AND EXIT
S3: MOVE RC,PREFER
; OUTPUT 2 NON-PREFERRED CHAR AND EXIT
D4: W2 RC
 POPJ P,
S0D: CAME C,PREFER
 JRST S4
 MOVEI RCC,MAXP-MINP-1   ;CHAR REPEATED 3 OR MORE TIMES
S0E: XCT G
 JRST S0F
; OUTPUT 3 OR MORE PREFERRED CHAR AND EXIT
S5: W [EM]
 MOVEI C,BIASP+MAXP-MINP-1
 SUB C,RCC
 PUSHJ P,CW
 POPJ P,
S0F: CAME C,PREFER
 JRST S6
 SOJGE RCC,S0E
; OUTPUT 130 PREFERRED CHAR AND CONTINUE
 W [EM]
 W [BIASP+MAXP-MINP]
 JRST S0

D0: MOVEM C,RC        ;FOUND NON-PREFERRED CHAR
D1: XCT G
 JRST .+2
 JRST D2
 CAME C,RC
 JRST D3
 XCT G
 JRST .+2
 JRST D4
 CAME C,RC
 JRST D5
 XCT G
 JRST D1A
; OUTPUT 3 NON-PREFERRED CHAR AND EXIT
 W3 RC
 POPJ P,
D1A: CAME C,RC
 JRST D7
 MOVEI RCC,MAXC-MINC-1   ;REPEATED 4 OR MORE TIMES
D1B: XCT G
 JRST D1C
; OUTPUT 4 OR MORE NON-PREFERRED CHAR AND EXIT
D8: W [EM]
 MOVEI C,BIASC+MAXC-MINC-1
 SUB C,RCC
 PUSHJ P,CW
 W RC
 POPJ P,
D1C: CAME C,RC
 JRST D9
 SOJGE RCC,D1B
; OUTPUT 59 NON-PREFERRED CHAR AND CONTINUE
 W [EM]
 W [BIASC+MAXC-MINC]
 W RC
 JRST S0
; FOUND DIFFERENT CHAR AFTER 1 NON-PREFERRED CHAR
D3: MOVEM C,R3
 W1 RC
 JRST S0A       ;TEST NEW CHAR FOR PREFERRED
; FOUND DIFFERENT CHAR AFTER 2 NON-PREFERRED CHAR
D5: MOVEM C,R3
 W2 RC
 JRST S0A
; FOUND DIFFERENT CHAR AFTER 3 NON-PREFERRED CHAR
D7: MOVEM C,R3
 W3 RC
 JRST S0A
; FOUND DIFFERENT CHAR AFTER 4 OR MORE NON-PREFERRED CHAR
D9: MOVEM C,R3
 W [EM]
 MOVEI C,BIASC+MAXC-MINC-1
 SUB C,RCC
 PUSHJ P,CW
 W RC
 JRST S0A
; FOUND DIFFERENT CHAR AFTER 1 PREFERRED CHAR
S2: MOVEM C,RC
 W1 PREFER
 JRST D1
; FOUND DIFFERENT CHAR AFTER 2 PREFERRED CHAR
S4: MOVEM C,RC
 W2 PREFER
 JRST D1
; FOUND DIFFERENT CHAR AFTER 3 OR MORE PREFERRED CHAR
S6: MOVEM C,RC
 W [EM]
 MOVEI C,BIASP+MAXP-MINP-1
 SUB C,RCC
 PUSHJ P,CW
 JRST D1
; COMPRESSION BY RANK METHOD.

ACTRANS: TROE F,HSW     ;SHOULD WE GENERATE A HEADER
 JRST A0        ;NO
 PUSHJ P,ADIAG
 W [EM]
 W RECTYP
 TRNN F,SORTFG  ;DO WE NEED TO RUN SORT
 PUSHJ P,SORT   ;YES
 TRZ F,SORTFG
 MOVE R2,[-NT,,0]
 MOVE C,RANKT(R2)
 PUSHJ P,CW
 AOBJN R2,.-2

A0: PUSHJ P,A
 JRST A0B
 POPJ P,
A0A: MOVE C,R3
A0B: CAIE C,NT+BIASA
 JRST AD0
 PUSHJ P,A
 JRST A0C
; OUTPUT PREFERRED BYTE AND EXIT
 W [NT+BIASA]
 POPJ P,
A0C: CAIE C,NT+BIASA
 JRST AS2
 MOVEI RCC,MAXPA-MINPA-1
A0D: PUSHJ P,A
 JRST A0E
; OUTPUT 2 OR MORE PREFERRED BYTES AND EXIT
 MOVEI C,BIASPA+MAXPA-MINPA-1
 SUB C,RCC
 PUSHJ P,CW
 POPJ P,
A0E: CAIE C,NT+BIASA
 JRST AS4
 SOJGE RCC,A0D
; OUTPUT 17 PREFERRED BYTES AND CONTINUE
 W [BIASPA+MAXPA-MINPA]
 JRST A0
AD0: MOVEM C,RC
AD1A: PUSHJ P,A
 JRST AD1B
; OUTPUT BYTE AND EXIT
 W RC
 POPJ P,
AD1B: CAME C,RC
 JRST AD3
 PUSHJ P,A
 JRST AD1C
; OUTPUT 2 BYTES AND EXIT
 MOVE C,RC
 REPEAT 2,<PUSHJ P,CW>
 POPJ P,
AD1C: CAME C,RC
 JRST AD5
 PUSHJ P,A
 JRST AD1D
; OUTPUT 3 BYTES AND EXIT
 MOVE C,RC
 REPEAT 3,<PUSHJ P,CW>
 POPJ P,
AD1D: CAME C,RC
 JRST AD7
 MOVEI RCC,MAXC-MINC-1
AD1E: PUSHJ P,A
 JRST AD1F
; OUTPUT 4 OR MORE REPEATED BYTES AND EXIT
 W [EM]
 MOVEI C,BIASC+MAXC-MINC-1
 SUB C,RCC
 PUSHJ P,CW
 W RC
 POPJ P,
AD1F: CAME C,RC
 JRST AD9
 SOJGE RCC,AD1E
; OUTPUT 59 REPEATED BYTES AND CONTINUE
 W [EM]
 W [BIASC+MAXC-MINC]
 W RC
 JRST A0
; FOUND DIFFERENT BYTE AFTER 1 NON-PREFERRED BYTE
AD3: MOVEM C,R3
 W RC
 JRST A0A
; FOUND DIFFERENT BYTE AFTER 2 NON-PREFERRED BYTE
AD5: MOVEM C,R3
 MOVE C,RC
 REPEAT 2,<PUSHJ P,CW>
 JRST A0A
; FOUND DIFFERENT BYTE AFTER 3 NON-PREFERRED BYTE
AD7: MOVEM C,R3
 MOVE C,RC
 REPEAT 3,<PUSHJ P,CW>
 JRST A0A
; FOUND DIFFERENT BYTE AFTER 4 OR MORE NON-PREFERRED BYTE
AD9: MOVEM C,R3
 W [EM]
 MOVEI C,BIASC+MAXC-MINC-1
 SUB C,RCC
 PUSHJ P,CW
 W RC
 JRST A0A
; FOUND NON-PREFERRED BYTE AFTER 1 PREFERRED BYTE
AS2: MOVEM C,RC
 W [NT+BIASA]
 JRST AD1A
; FOUND NON-PREFERRED BYTE AFTER 2 OR MORE PREFERRED BYTE
AS4: MOVEM C,RC
 MOVEI C,BIASPA+MAXPA-MINPA-1
 SUB C,RCC
 PUSHJ P,CW
 JRST AD1A

; GET COMPRESSED BY RANK BYTE.  SKIP FOR END OF BLOCK
A: JRST 0(AS)           ;DISPATCH TO APPROPRIATE CODE
AC1: XCT G
 JRST AC4
AC2: AOS (P)            ;FOR SKIP RETURN FROM A
AC3: MOVE C,AC6         ;RETRIEVE CHAR
 MOVEI AS,AC1
 POPJ P,
AC4: MOVEM C,R1         ;SAVE CHAR TEMPORARILY
 MOVE C,RANKC(C)        ;REPLACE CHAR BY ITS RANK
 CAIG C,LM              ;IS IT A MASTER
 JRST MS1               ;YES
 CAIG C,LT              ;NO, IS IT TRANSLATING THEN
 JRST TR1               ;YES
 IORI R1,400            ;PREVENT ESCAPED CHAR FROM STARTING A DUP STRING
 MOVEM R1,AC6           ;SAVE FOR NEXT TIME
; ESCAPED BYTE
AC5: MOVEI AS,AC3       ;SET TO GET SAVED BYTE NEXT
 MOVEI C,CAN
 POPJ P,
; TRANSLATING CHAR
TR1: ADDI C,BIASA
 POPJ P,
; MASTER CHAR
MS1: MOVEM C,RANK      ;SAVE RANK
 XCT G
 JRST MS2
 MOVEI AS,AC2           ;SET TO DO SKIP RETURN NEXT
 MOVE C,RANK           ;C MAY BE DESTROYED BY GA OR GB CODE AT END
 ADDI C,BIASA           ;TRANSLATE LAST CHAR IN BLOCK
 POPJ P,
MS2: MOVEM C,R1         ;SAVE 2ND CHAR TEMPORARILY
 MOVE C,RANKC(C)
 CAIG C,LC              ;IS IT COMBINING
 JRST MS3               ;YES
 CAIG C,LT              ;NO, TRANSLATING THEN?
 JRST TR2               ;YES
 IORI R1,400
 MOVEM R1,AC6           ;SAVE BYTE TO BE ESCAPED
 MOVEI AS,AC5           ;SET TO DO ESCAPE PAIR NEXT
 MOVE C,RANK
 ADDI C,BIASA           ;TRANSLATE MASTER CHAR
 POPJ P,
TR2: ADDI C,BIASA
 MOVEM C,AC6            ;SAVE TRANSLATED TRANSLATING CHAR
 MOVEI AS,AC3           ;SET TO OUTPUT JUST AC6 NEXT
 MOVE C,RANK
 ADDI C,BIASA           ;TRANSLATE MASTER CHAR
 POPJ P,
; COMBINING CHAR (8*21 COMBOS-- 130 THRU 377)
MS3: ADD C,NCRT(RANK)  ;RANK*NC
 ADDI C,BIASA+NT        ;BIAS FOR COMBO=130
 POPJ P,
Y==0
NCRT:
 REPEAT NM,<
 EXP Y*NC
Y==Y+1
 >
; SOME STORAGE ARRAYS
DNOR: BLOCK ^D256*3      ;DONOR CHECK BLOCK
RCVR: BLOCK ^D256*3      ;RECEIVER CHECK BLOCK
ST:   BLOCK ^D256       ;COUNT OF CHAR. FREQUENCY INDEXED BY CHAR
STE:
RANKT: BLOCK ^D256      ;CHARACTER VALUE INDEXED BY RANK
RANKC:          ;RANK INDEXED BY CHARACTER VALUE
WORK: BLOCK ^D256

; SUBROUTINES USED TO SWITCH TO COMPRESSION BY RANK METHOD

SORT: SETZ R0,
 MOVE R1,[ST-STE,,RANKT]
 MOVEM 0(R1)    ;INITIALIZE RANKT
 ADDI 1
 AOBJN R1,.-2
; MOVE ST TO WORK
 MOVE R1,[ST,,WORK]
 BLT R1,WORK+STE-ST-1
; DO SORT
 MOVEI R1,STE-ST-1
SORT1: MOVE R2,R1
SORT2: MOVE WORK(R2)
 CAMG WORK(R1)
 JRST SORT4
SORT3: SOJGE R2,SORT2
 SOJGE R1,SORT1
; INVERT RANKT TO RANKC
 MOVEI R1,STE-ST-1
 MOVE R2,RANKT(R1)
 MOVEM R1,RANKC(R2)
 SOJGE R1,.-2
 TRO F,SORTFG           ;INDICATE SORT AS DONE
 POPJ P,
; SWITCH ITEMS
SORT4: EXCH R0,WORK(R1)
 MOVEM WORK(R2)
 MOVE RANKT(R2)
 EXCH R0,RANKT(R1)
 MOVEM RANKT(R2)
 JRST SORT3

; TEST TO SEE IF COMPRESSION BY RANK METHOD IS LIKELY TO FAIL.
;       NO SKIP FOR SUCCESS
;       SKIP FOR FAILURE
; T1=TOTAL OF CHARS RANKC(0) THRU RANKC(20)  (COMBINING)
; T2=TOTAL OF CHARS RANKC(62) THRU RANKC(255)  (REQUIRING ESCAPE)
THRESH: SETZ R0,
 MOVE R3,[-NC,,RANKT]
 MOVE R2,0(R3)
 ADD ST(R2)
 AOBJN R3,.-2
 MOVEM T1
 SETZ R0,
 MOVE R3,[NT+ST-STE,,RANKT+NT]
 MOVE R2,0(R3)
 ADD ST(R2)
 AOBJN R3,.-2
 MOVEM T2
; DO NOT COMPRESS IF TRUE.  ASSUME ONLY 10 PCT. OF COMBINING CHARS COMBINE
;       TO MAKE TEST SENSITIVE TO PRESENCE OF CHARS REQUIRING ESCAPE
; .9*T1 + 2*T2 + [NT+2] > T1 + T2
; T2 + [NT+2] > .1*T1
; 10*T2 + 10*[NT+2] > T1
 MOVE T2
 IMULI ^D10
 ADDI ^D10*<NT+2>
 EXCH R0,T1
 CAMG T1
CPOPJ1: AOS (P)
CPOPJ: POPJ P,

; SKIP IF COMPRESSION BY RANK SHOULD NOT BE APPLIED

SWAC: MOVE R1,COPT      ;PICK UP COMPRESSION OPTIONS
 TRNN R1,ASCII
 JRST CPOPJ1
 MOVE CCR               ;ASSUME WE WILL GET 50% COMPRESSION
 CAIG 2*<NT+2>          ;ARE THERE ENUF CHARS LEFT TO JUSTIFY SENDING RANKT
 JRST CPOPJ1            ;NO
 TRNE R1,AUTO           ;TEST FOR AUTO OPTION
 PUSHJ P,THRESH         ;PERFORM TEST
 POPJ P,                ;NON-SKIP RETURN FOR SUCCESS
 JRST CPOPJ1            ;INSUFFICIENT COMPRESSION

; SELECT DUPLICATE OR COMPRESSION BY RANK METHOD
SWBAC: MOVE [PUSHJ P,BCTRANS]
 MOVEM TRANS            ;DUPLICATE COMPRESSION ASSUMED
 MOVEI BCMCOD
 MOVEM RECTYP
 PUSHJ P,SORT
 MOVE PREFER,RANKT
; TEST TO SEE IF WE SHOULD BE USING COMPRESSION BY RANK
 PUSHJ P,SWAC
 JRST TA4       ;YES
 POPJ P,        ;NO
TA4: MOVEI ACMCOD
 MOVEM RECTYP
 MOVE [PUSHJ P,ACTRANS]
 MOVEM TRANS
 POPJ P,

 END
  