TITLE RF -- CODE TO RECEIVE FILE 

ENTRY RF,DECOUT,EROFN,EROUN,TRAP,ALERT,STARTT,CRASH
ENTRY FLKER,CORF,COSF,FPFRF,FPFSF,BAD,UIO,IOERR,IOERW,PER,PEW,ERASE
ENTRY FLKR,INVU,OPF,FPF,ABTT,TRPER,UCC,UO,FWER,FPEW,FERER
; EXTERNAL ROUTINES
EXTERN IRF,ITF,SINIT,SPA,UPA,INITRN,CPOPJ1
EXTERN GCOD,GBCOD,BGC,GC,GC60,ABIOIP,LVBI
EXTERN COPYST,CKTIM,RUPCNT,SLOR,ELOR,SPOR,EPOR
EXTERN RCR,SCR,VERIF,SACK,SNAK,RRANKT,DSTRY
EXTERN ACR,BCR,PA,PB,GB,TRUNCATE
 EXTERN ADIAG,BDIAG
EXTERN SBYTE,SNDYEL,OPNROU,SUCROU,SCOD
EXTERN GD,RESET,ABT,CLRCIR
; CELLS CONTAINING EXECUTABLE INSTRUCTIONS:
EXTERN RCV,T1,PCH,ACKROU
; EXTERNAL STORAGE
EXTERN TMP
EXTERN DONOR,MASTER,BADD,UCHAR,NARG,CHCNT
EXTERN RMODE,RPARAM,RMODE,BF,RBLOCK
EXTERN SW10,SW370
EXTERN RBLK,DBLK,RBCNT,RBSIZ,RBEXT,RBPRV,RBLIC,FDLIC,ORBSIZ
EXTERN CCNT,BP,BP0,LRECL,RECL,RECL1,COUNTB
EXTERN CPTOP1,CPTOP2
EXTERN DCPTR,RCPTR,DNOR,RCVR,DPTR,RPTR,DPTR0,RPTR0,NUM,NUM0
EXTERN URECL,UBP0,DCC,CHKCOUNT
EXTERN LCOD1,IRTT
EXTERN TIMFLG
; RECEIVE FILE.
RF: PUSHJ P,IRF         ;INITIALIZE RECEIVERS AND FILE WRITERS
 PUSHJ P,ITF            ;WE WILL NEED THE FILE READERS TOO
 MOVE RMODE
 MOVE R1,RPARAM
 PUSHJ P,SPA            ;SELECT PARAMETERS FOR SPECIAL MODES
 MOVEM R1,RPARAM        ;AND SAVE
 PUSHJ P,UPA            ;UNPACK BINARY PARAMETERS
; OPEN FILE FOR OUTPUT.  IF DONOR IS 10 ENTER THE NEW RBLIC.
 MOVE RBSIZ     ;SAVE OLD SIZE (ZEROED IF NEW FILE)
 MOVEM ORBSIZ
 SETZM RBCNT+6 ;ZERO REMAINDER OF RIB
 MOVE R1,[RBCNT+6,,RBCNT+7]
 BLT R1,RBLIC
 SETZ R0,
 HRRM R0,RBEXT          ;MAKE SURE FILE GETS PRESENT DATE AND TIME
 MOVE R1,RMODE
 CAIN R1,5              ;KATAKANA MODE
 HRLZI 200              ;BIT 10 FOR KATAKANA FILE
 SKIPE SW10             ;ARE WE CONVERSING WITH A 10
 MOVE FDLIC             ;YES, GET FROM DONOR FILE
 AND R0,[1B2+1B3+1B8+1B9+1B10+1B11]
 MOVEM RBLIC
 HRLZI 007000 ;ALL ALL NO, PRESENT TIME
 MOVEM RBPRV
 ENTER FIL,RBCNT
 JSR CORF               ;CANNOT OPEN RECEIVE FILE
 PUSHJ P,INITRN         ;INITIALIZE FOR TRANSMISSION
; SEND OPNCOD IF MASTER, SUCCOD IF SLAVE
 MOVE [PUSHJ P,OPNROU]
 SKIPN MASTER           ;ARE WE MASTER
 MOVE [PUSHJ P,SUCROU]  ;NO, SLAVE
 MOVEM ACKROU
 TRO F,DEFFLG           ;SET DEFFLG TO DEFER SENDING REPLY
 TRZ F,MSGSW            ;CLEAR ONCE-ONLY SWITCH FOR COPYST
 SETZM CCNT             ;NO CHARS COPIED YET
 MOVE R1,RMODE
 MOVE PCHT(R1)
 MOVEM PCH
 JRST .(R1)
 JRST RFBEG             ;ASCII
 JSR UIO                ;EBCDIC UNIMPLEMENTED
 JRST RFBEG             ;BINARY
 JRST RF4
 JRST RFBEG             ;KATAKANA TREAT LIKE ASCII
 JRST RFBEG             ;IMAGE TREAT LIKE BINARY
PCHT=.-1
 PUSHJ P,PA
 PUSHJ P,PA
 PUSHJ P,PB
 PUSHJ P,PB
 PUSHJ P,PA
 PUSHJ P,PB

RFBEG: PUSHJ P,SINIT
 SETZM RECL1            ;NO DATA RECEIVED YET
 TIMER 60
 PUSHJ P,GBCOD
 DI <<FPFCOD,FPF>,<OPFCOD,OPF>,<ERRCOD,FWER>,<PERCOD,FPEW>,<FINCD1,RFEND>,<ACMCOD,RFAC>,<BCMCOD,RFBC>>

; READ DATA RECORD, RANK COMPRESSION METHOD
RFAC: MOVE [PUSHJ P,ACR]
 MOVEM RCV
 PUSHJ P,RRANKT         ;READ RANKT TABLE
 PUSHJ P,ADIAG
 JRST RFDATA

; READ DATA RECORD, DUPLICATE COMPRESSION METHOD
RFBC: MOVE [PUSHJ P,BCR]
 MOVEM RCV
 PUSHJ P,BGC
 MOVE PREFER,C          ;READ PREFERRED COMPRESSION CHARACTER
 PUSHJ P,BDIAG

; SET OUTPUT FILE CURSOR POSITION
RFDATA: PUSHJ P,COPYST
 MOVE BP0
 MOVEM BP

;READ 1 PAGE AT A TIME UNTIL END OF RECORD
R1PAGE: MOVEI 1000
 IMUL BF
 TRNE F,SERFLG
 MOVEI ^D9*^D256
 MOVEM LRECL
 MOVEM COUNTB
 XCT RCV
 JRST RXPAGE            ;COUNTB EXHAUSTED
; SOME CONTROL CODE READ.  CODE IN 'C'
 MOVEM C,IRTT
 MOVE LRECL
 SUB COUNTB
 ADDM BP
 ADDM RECL1
 DI <<PERCOD,FPEW>,<ERRCOD,FWER>,<EORCOD,REOR>,<EOTCOD,REOT>,<FINCD1,RFEND>>
RXPAGE: MOVE LRECL
 SUB COUNTB
 ADDM BP
 ADDM RECL1
 JRST R1PAGE

REOR: PUSHJ P,VERIF     ;VERIFY RECORD CHECKSUM AND SKIP IF BAD
 JRST .+3               ;GOOD
REOR1: PUSHJ P,SNAK     ;SEND NAKCOD
 JRST RFBEG             ;START OVER
 MOVE BP
 MOVEM BP0
 PUSHJ P,SACK           ;SEND ACKCOD
 PUSHJ P,RUPCNT
 PUSHJ P,CKTIM          ;MAKE PROGRESS REPORT
 JRST RFBEG             ;GET NEXT RECORD

REOT: PUSHJ P,VERIF
 JRST .+2
 JRST REOR1
REOT1: PUSHJ P,RUPCNT
 PUSHJ P,LVBI           ;TERMINATE BLOCK INPUT
 PUSHJ P,SACK           ;MUST FOLLOW LVBI OR GCOD MAY FAIL
 PUSHJ P,LVBI           ;SENSE IODEND FOR BLOCK TERMINATE REQUEST
 PUSHJ P,GC60
 DI <<FINCD1,CLOUT>,<ERRCOD,FWER>,<PERCOD,FPEW>>


; RECEIVE UPDATE MODE.

RF4: TRO F,UPDMOD       ;SWITCH TELLS NEWBLK TO READ OLD CONTENTS
RF4BEG: PUSHJ P,RCR     ;READ CHECK RECORD
 JSR BAD                ;+1 - NAKCOD
 JRST RF4CK             ;+2 - GOOD CHECK RECORD
 JRST .+3               ;+3 - SOME OTHER TYPE
 PUSHJ P,SNAK           ;+4 - BAD CHECK RECORD
 JRST RF4BEG
 DI <<FPFCOD,FPF>,<OPFCOD,OPF>,<ERRCOD,FWER>,<PERCOD,FPEW>,<FINCD1,RFEND>>

; BUILD CHECK RECORD TO EXCHANGE

RF4CK: PUSHJ P,COPYST
BEX4: SETZM NUM0             ;NO. OF DATA BLOCKS TO EXPECT
 MOVEI DNOR
 MOVEM DCPTR
 MOVEI RCVR
 MOVEM RCPTR
 MOVE CHKCOUNT
 MOVEM DCC
 PUSHJ P,SPOR
BEXL4: SETZ R3,         ;ZERO BITS 0-22 OF CHECKSUM
 SETZ R4,               ;ZERO BITS 23-45 OF CHECKSUM
 SETZ R5,               ;ZERO BITS 46-68 OF CHECKSUM
 MOVE RBLOCK
 MOVEM LRECL
 MOVEM COUNTB
BEXB4: PUSHJ P,GB
 JRST BEXCK4
 AND R3,[37,,777777]    ;EXTRACT 23 BITS
 AND R4,[37,,777777]    ;EXTRACT 23 BITS
 AND R5,[37,,777777]    ;EXTRACT 23 BITS
 MOVE R1,DCPTR
 MOVE R2,RCPTR
 MOVEM R3,FCK1(R1)
 CAME R3,FCK1(R2)
 HRLI R1,400000
 MOVEM R4,FCK2(R1)
 CAME R4,FCK2(R2)
 HRLI R1,400000
 MOVEM R5,FCK3(R1)
 CAME R5,FCK3(R2)
 HRLI R1,400000
 TLNE R1,400000
 AOS NUM0
 AOS DCPTR
 AOS RCPTR
 PUSHJ P,ELOR
 SOSL DCC
 JRST BEXL4
 MOVEI DNOR
 MOVEM DPTR0
 MOVEI RCVR
 MOVEM RPTR0
 MOVE RECL
 MOVEM URECL
 MOVE BP0
 MOVEM UBP0
; RETURN COMPLETED CHECK RECORD
SCK4: MOVEI EOTCOD
 PUSHJ P,SCR            ;TRANSMITTER TO LEAVE BLOCK INPUT MODE
; PREPARE TO RECEIVE DATA RECORDS
REC4: MOVE BP0
 MOVEM BP
 MOVE DPTR0
 MOVEM DPTR
 MOVE RPTR0
 MOVEM RPTR
 MOVE NUM0
 MOVEM NUM
 SETZM RECL1            ;NO DATA RECEIVED
 SETZM RECL
; LOOK FOR DATA RECORD OR NEW CHECK RECORD
 PUSHJ P,RCR
 JRST SCK4              ;+1 - NAK
 JRST BEXF4             ;+2 - CHECK RECORD--DONOR HAS NO MORE DATA
 JRST RFB4              ;+3 - OTHER TYPE, PROBABLY A DATA RECORD
 PUSHJ P,SNAK           ;+4 - BAD CHECK RECORD--TRY TO REREAD IT
 JRST REC4
BEXF4: MOVE URECL
 MOVEM RECL
 MOVE UBP0
 MOVEM BP0
 PUSHJ P,EPOR           ;ADVANCE BP0
 SKIPG NUM
 JRST BEX4              ;CONTINUE EXCHANGE
 JSR TRAP               ;INSUFFICIENT DATA
BEXCK4: IMULI R3,^D13
 ADD R3,C
 IMULI R4,^D17
 ADD R4,C
 IMULI R5,^D19
 ADD R5,C
 JRST BEXB4

; BETTER BE DATA RECORD.

RFB4: DI <<FINCD1,RFEND>,<ERRCOD,FWER>,<PERCOD,FPEW>,<ACMCOD,RFAC4>,<BCMCOD,RFBC4>>

RFAC4: MOVE [PUSHJ P,ACR]
 MOVEM RCV
 PUSHJ P,RRANKT
 PUSHJ P,ADIAG
 JRST RFDAT4
RFBC4: MOVE [PUSHJ P,BCR]
 MOVEM RCV
 PUSHJ P,BGC
 MOVE PREFER,C
 PUSHJ P,BDIAG

RFDAT4: SOSL NUM
 JRST RFDB4
; DUPLICATE SOME CODE FROM GBCOD HERE TO PRESERVE RECORD CHECKSUM
RFDD4: PUSHJ P,BGC
 CAIE C,CAN
 JRST RFDE4
 PUSHJ P,BGC
 JRST RFDD4
RFDE4: CAIE C,EM
 JRST RFDD4
 PUSHJ P,BGC
 CAIG C,MTOP
 CAIG C,MBOT
 JRST RFDD4
 MOVEM C,LCOD1
 MOVEM C,IRTT
 JRST RFDC4
RFDB4: MOVE RBLOCK
 MOVEM LRECL
 MOVEM COUNTB
 MOVE R1,DPTR
 MOVE R2,RPTR
 MOVE FCK1(R1)
 CAME FCK1(R2)
 JRST RFDA4             ;CHECKSUMS DIFFER-READ DATA
 MOVE FCK2(R1)
 CAME FCK2(R2)
 JRST RFDA4
 AOS DPTR
 AOS RPTR
 PUSHJ P,ELOR
 JRST RFDB4
RFDLN4: AOS DPTR
 AOS RPTR
 MOVE LRECL
 ADDM RECL1
 PUSHJ P,ELOR           ;ADVANCE RECL AND BP
 JRST RFDAT4
RFDA4: XCT RCV
 JRST RFDLN4            ;COUNTB EXHAUSTED
 AOS NUM        ;DON'T COUNT THIS RECORD AS RECEIVED YET
; C CONTAINS RECORD TERMINATION TYPE
 MOVEM C,IRTT
; A PHYSICAL RECORD MUST CONTAIN AN INTEGRAL NO. OF LOGICAL RECORDS
 MOVE COUNTB
 CAME LRECL
 PUSHJ P,DSTRY          ;DESTROY RECORD CHECKSUM TO FORCE RESEND
; DISPATCH ON RECORD TERMINATION TYPE
RFDC4: DI <<ERRCOD,FWER>,<PERCOD,FPEW>,<EORCOD,REOR4>,<EOTCOD,REOT4>>

REOR4: PUSHJ P,VERIF
 JRST REOR24
REOR14: PUSHJ P,SNAK
 JRST REC4
REOR24: PUSHJ P,SACK
 PUSHJ P,RUPCNT
 PUSHJ P,CKTIM          ;MAKE PROGRESS REPORT
 PUSHJ P,EPOR           ;ADVANCE BP0 BY RECL
 MOVE DPTR
 MOVEM DPTR0
 MOVE RPTR
 MOVEM RPTR0
 MOVE NUM
 MOVEM NUM0
 JRST REC4

REOT4: PUSHJ P,VERIF
 JRST REOT1             ;GOOD RECORD
 JRST REOR14            ;BAD RECORD


RFEND: PUSHJ P,RUPCNT
 SKIPA R1,[PUSHJ P,BGC]
CLOUT: MOVE R1,[PUSHJ P,GC]
 MOVEM R1,T1
 XCT T1
 MOVEM C,CHCNT          ;BYTE COUNT
 SETZM CPTOP1   ;NO. OF WHOLE BYTES
 SETZM CPTOP2   ;RESIDUAL BITS
CLOUT1: SOSGE CHCNT
 JRST CLOUT2
 XCT T1
 EXCH C,CPTOP1
 LSH C,10
 ADDM C,CPTOP1
 JRST CLOUT1
; READ RESIDUAL BITS
CLOUT2: XCT T1          ;READ PARTIAL BYTE COUNT (BITS) TO C
 TRNE F,SERFLG
 MOVEM C,CPTOP2         ;SAVE
; TERMINATE BLOCK INPUT MODE IF NOT ALREADY TERMINATED
 TRNN F,TI
 PUSHJ P,LVBI
; USE IMPLIED COUNT IN ASCII AND KATAKANA MODES.
 MOVE R1,CCNT   ;ACTUAL COUNT RECEIVED
 MOVE RMODE
 CAIE 5
 CAIN 1
 MOVEM R1,CPTOP1
 PUSHJ P,TRUNCATE       ;TRUNCATE FILE TO CORRECT SIZE
 LNKMSG FINCD2
 PUSHJ P,LVBI           ;SENSE IODEND FROM TERMINATE BLOCK INPUT REQUEST
 POPJ P,                ;RETURN FROM RF


; ERROR PROCESSING.

; ERROR DETECTED.  SEND ERROR MESSAGE ACROSS CIRCUIT AND WAIT RETURN
;       OF ABTCOD.  USE ERG MACRO TO SET UP ARGUMENT LIST:
;(SLAVE)        ARG1 - CODE TO SEND
;(SLAVE)        ARG2 - DISPATCH ADDRESS
;(MASTER)       ARG3 - CODE TO SEND
;(MASTER)       ARG4 - DISPATCH ADDRESS
;(OPTIONAL)     ARG5 - MESSAGE ADDRESS
;(OPTIONAL)     ARG6 - ADDR OF FILE BLOCK (RBLK OR DBLK) FOR PRINTING FILENAME

ERO: MOVE R1,(P)        ;INDEX TO NARG
 MOVE (R1)
 DMOVEM NARG
 PUSHJ P,ABIOIP         ;ABANDON BLOCK I/O IN PROGRESS
; SEND ESCAPES TO 370 DONOR SLAVE TO TRY TO INTERRUPT HIS TORE REQUEST.
 MOVEI C,ESC
 SKIPN DONOR
 SKIPN SW370
 JRST .+3
 PUSHJ P,SBYTE
 PUSHJ P,SBYTE
 DMOVE NARG
 MOVE C,3(R1)   ;ARG3
 SKIPN MASTER
 MOVE C,1(R1)   ;ARG1
 PUSHJ P,SCOD   ;SEND CODE
 CAIE C,BADCOD
 JRST .+3
 MOVE C,BADD
 PUSHJ P,SBYTE
 PUSHJ P,SNDYEL
; WAIT RETURN OF ABORT CODE
 TIMER 30
 PUSHJ P,GCOD
 CAIE C,ABTCOD
 CAIN C,BADCOD
 JRST .+2
 JRST .-4
 CAIN C,BADCOD
 JRST UCC
 DMOVE NARG
 SKIPN MASTER
 JRST @2(R1)
 CAIG 4         ;MORE THAN 4 ARGUMENTS
 JRST @4(R1)
 OUTSTR @5(R1)
 CAIG 5         ;MORE THAN 5 ARGUMENTS
 JRST @4(R1)
 MOVE R1,6(R1)  ;DBLK (DONOR) OR RBLK (RECEIVER)
 PUSHJ P,EROFN  ;PRINT FILENAME
 DMOVE NARG
 JRST @4(R1)
 
; ERROR NOTIFICATION.  RETURN ABTCOD.  IF MASTER, OPTIONALLY PRINT
;       MESSAGE AND FILENAME.  USE ERN MACRO TO SET UP
;       ARGUMENT LIST:
;(SLAVE)        ARG1 - DISPATCH ADDRESS
;(MASTER)       ARG2 - DISPATCH ADDRESS
;(OPTIONAL)     ARG3 - MESSAGE ADDR
;(OPTIONAL)     ARG4 - ADDR OF FILE BLOCK (RBLK OR DBLK) FOR PRINTING FILENAME

ERNO: MOVE R1,(P)       ;INDEX TO NARG
 MOVE (R1)
 DMOVEM NARG
 PUSHJ P,ABIOIP         ;ABANDON BLOCK I/O IN PROGRESS
 PUSHJ P,ABT            ;SEND ABTCOD.  PRESERVES REGISTERS
 DMOVE NARG
 SKIPN MASTER
 JRST @1(R1)
 CAIG 2                 ;MORE THAN 2 ARGUMENTS
 JRST @2(R1)            ;NO, DISPATCH
 OUTSTR @3(R1)          ;PRINT MESSAGE
 CAIG 3                 ;MORE THAN 3 ARGUMENTS
 JRST @2(R1)            ;NO, DISPATCH
 MOVE R1,4(R1)          ;DBLK (DONOR) OR RBLK (RECEIVER)
 PUSHJ P,EROFN          ;PRINT FILENAME
 DMOVE NARG
 JRST @2(R1)            ;DISPATCH

; PRINT (USERNAME:SYSNO).  R1=DBLK (DONOR) OR RBLK (RECEIVER)
EROUN: OUTCHI LPAREN
 MOVE R2,[POINT 6,UNAME(R1)]
 PUSH P,R1      ;SAVE R1 ON THE STACK
 PUSH P,R3      ;SAVE R3 ON THE STACK
 MOVE R3,[-14,,1]       ;LOOP INDEX AND CHAR COUNT
 PUSH P,R3              ;SAVE COUNT ON STACK
 ILDB R0,R2
 SKIPE R0
 HRRZM R3,(P)           ;SAVE POSITION OF LAST NON-BLANK
 AOBJN R3,.-3
 POP P,R3               ;RETREIVE POSITION
 MOVE R2,[POINT 6,UNAME(R1)]
 ILDB R0,R2
 ADDI 40
 OUTCHR R0
 SOJG R3,.-3
 OUTCHI COLON
 MOVE SYS(R1)
 PUSHJ P,DECOUT         ;DESTROYS R1
 OUTCHI RPAREN
 POP P,R3       ;UNSAVE R3
 POP P,R1       ;UNSAVE R1
 POPJ P,

; PRINT DECIMAL NO. FROM R0.
DECOUT: IDIVI R0,12
 HRLM R1,(P)    ;SAVE DIGIT IN STACK
 SKIPE R0       ;ARE WE DONE
 PUSHJ P,DECOUT         ;NO, CONTINUE
 HLRZ R0,(P)    ;POP DIGIT OFF STACK
 ADDI R0,"0"
 OUTCHR R0
 POPJ P,

; PRINT FILENAME.  R1=DBLK (DONOR) OR RBLK (RECEIVER)
EROFN: MOVE FSIZE(R1)
 MOVEM TMP
 MOVE R2,[POINT 6,FNAME(R1)]
EROFN1: ILDB R0,R2
 ADDI 40
 OUTCHR R0
 SOSG TMP
 POPJ P,
 JRST EROFN1


; TAKE SNAPSHOT OF PROGRAM FOR ANALYSIS.  NOT MUCH USE UNLESS PROGRAM
;       IS LOADED WITH DDT.  A SPECIAL LOADER MUST BE USED TO ANALYZE
;       CRASH.M OR CRASH.S.

TRAP: 0
 JSR CRASH
 JSR TRP
CRASH: 0
 MOVEM 17,TRAP0+17
 MOVEI 17,TRAP0
 BLT 17,TRAP0+16
 OPEN TRPDSK,TRPDEV
 JRST CRRET
 HRLZI (SIXBIT /M   /)
 SKIPN MASTER
 HRLZI (SIXBIT /S  /)
 MOVEM TRPEXT
 ENTER TRPDSK,TRPDIR
 JRST CRRET
 MOVEI 17
 SUB JOBREL##
 HRLI 17
 MOVSS 0,
 SETZ 1,
 OUTPUT TRPDSK,0
 RELEASE TRPDSK,
CRRET: MOVSI 17,TRAP0
 BLT 17,16
 MOVE 17,TRAP0+17
 JRST @CRASH
TRPDIR: 3
 XWD 11447,143725
 SIXBIT /CRASH/
TRPEXT: SIXBIT /M   /
TRPDEV: 17
 SIXBIT /DSK/
 0
TRAP0: BLOCK 20

; WE GOT SOMETHING IN INPUT BUFFER WHILE DOING BLOCK OUTPUT
;       CHAR BEING HELD IN "C".


ALERT: TIMER 30
 PUSHJ P,GCOD+1
 DI <<ERRCOD,FWER>,<PERCOD,FPEW>,<ERASCD,FERER>>


; TIMER LOGIC

; START TIMEOUT
STARTT: PUSH P,R1
 SETZ R1,
 SETTIM R1,     ;CANCEL EXITING TIMER
 JFCL
 HRRZ R1,-1(P)
 HRRZ R1,(R1)
 HRLI R1,1      ;SECONDS
 SETTIM R1,
 JRST .+2
 SETZM TIMFLG   ;STOP IGNORING TIMEOUTS
 POP P,R1
 JRST CPOPJ1    ;SKIP RETURN

;       ERROR DETECTION.  REPORT THE ERROR AND WAIT FOR RETURN OF
;       ABTCOD.

;LOOKUP FAILURE (SLAVE ONLY)
FLKER: 0
 ERG <FLKRCD,GD,FLKRCD,RESET>

;CANNOT OPEN RECEIVE FILE
CORF: 0
 ERG <OPFCOD,GD,OPFCOD,RESET,ERR12,RBLK>
ERR12: ASCIZ"
CANNOT OPEN 'COPY TO' FILE: "

;CANNOT OPEN SEND FILE
COSF: 0
 ERG <OPFCOD,GD,OPFCOD,RESET,ERR6,DBLK>
ERR6: ASCIZ"
UNABLE OPEN 'COPY FROM' FILE: "

;FILE PROTECTION ERROR--RECEIVE FILE
FPFRF: 0
 ERG <FPFCOD,GD,FPFCOD,RESET,NOTW,RBLK>

;FILE PROTECTION ERROR--SEND FILE
FPFSF: 0
 ERG <FPFCOD,GD,FPFCOD,RESET,NOTR,DBLK>

;PROGRAM TRAP
TRP: 0
 ERG <TRPCOD,GD,TRPCOD,RESET,TRPM1>
TRPM1: ASCIZ "
TRANSMISSION ABORTED DUE TO CONTROLLER TRAP
"

;UNEXPECTED CONTROL CODE
BAD: 0
 MOVE R1,[BADTL,,BADT]
 HRR (R1)
 CAME (R1)
 AOBJN R1,.-2
 TLNN R1,400000
 JRST BAD10
 HRRZ R1,(R1)
 JRST @R1
BAD10: MOVEM C,BADD
 ERG <BADCOD,GD,BADCOD,RESET,BADMSG>
BADMSG: ASCIZ"
TRANSFER ABORTED DUE TO UNEXPECTED SLAVE CODE
"
BADT:
 DIS <BADCOD,UCC>
 DIS <TRPCOD,TRPER>
 DIS <ABTCOD,ABTT>
 DIS <NICOD,UO>
BADTL==BADT-.

;UNIMPLEMENTED OPERATION REQUIRED
UIO: 0
 ERG <NICOD,GD,NICOD,RESET,UIOMSG>
UIOMSG: ASCIZ"
TRANSFER ABORTED DUE TO UNIMPLEMENTED CONTROLLER OPERATION
"

;FILE SYSTEM ERROR READING SEND FILE
IOERR: 0
 ERG <ERRCOD,GD,ERRCOD,RESET,RDER,DBLK>
RDER: ASCIZ"
TRANSFER ABORTED DUE TO ERROR READING: "

;FILE SYSTEM ERROR WRITING RECEIVE FILE
IOERW: 0
 ERG <ERRCOD,GD,ERRCOD,RESET,WTER,RBLK>
WTER: ASCIZ"
TRANSFER ABORTED DUE TO ERROR WRITING: "

;FILE SYSTEM ERROR POSITIONING SEND FILE
PER: 0
 ERG <PERCOD,GD,PERCOD,RESET,PERMSG,DBLK>
PERMSG: ASCIZ"
TRANSFER ABORTED DUE TO ERROR POSITIONING: "

;FILE SYSTEM ERROR POSITIONING RECEIVE FILE
PEW: 0
 ERG <PERCOD,GD,PERCOD,RESET,PERMSG,RBLK>

;FILE SYSTEM ERROR ERASING (TRUNCATING) RECEIVE FILE
ERASE: 0
 ERG <ERASCD,GD,ERASCD,RESET,ERAS,RBLK>
ERAS: ASCIZ"
TRANSFER ABORTED DUE TO ERROR ERASING: "


;       ERROR REPORTED.  REFLECT ABTCOD.


;FLKRCD - LOOKUP FAILED ON SLAVE SYSTEM
FLKR: SKIPN DONOR
 JRST FLKR1
 ERN <GD,RESET,ERR12,RBLK>
FLKR1: ERN <GD,RESET,ERR5,DBLK>
ERR5: ASCIZ"
UNABLE LOCATE 'COPY FROM' FILE: "

;ULKFCD (FROM LUD LOOKUP) - CANNOT GFD ON SLAVE SYSTEM
INVU: ERN <GD,INVU1,LUDMSG>
INVU1: MOVEI R1,RBLK    ;IF CONTROLLER IS DONOR, PRINT INFO. ABOUT RECEIVER
 SKIPN DONOR            ;ARE WE DONOR
 MOVEI R1,DBLK          ;NO, PRINT INFO. ABOUT TRANSMITTER
 PUSHJ P,EROUN          ;PRINT USER NAME AND SYSTEM
 JRST RESET
LUDMSG: ASCIZ"
UNABLE TO LOCATE FD FOR "

;OPFCOD--OPEN FAILURE
OPF: SKIPN DONOR
 JRST OPF1
 ERN <GD,RESET,ERR12,RBLK>
OPF1: ERN <GD,RESET,ERR6,DBLK>

;FPFCOD--FILE PROTECTION FAILURE
FPF: SKIPN DONOR
 JRST FPF1
 ERN <GD,RESET,NOTW,RBLK>
FPF1: ERN <GD,RESET,NOTR,DBLK>
NOTW: ASCIZ"
DECLARED NOT WRITABLE: "
NOTR: ASCIZ"
DECLARED NOT READABLE: "

;ABTCOD--REQUESTED ABORT
ABTT: SKIPN MASTER
 JRST GD
 ERN <GD,ABTT1,ABTT2>
ABTT1: PUSHJ P,CLRCIR
 JRST RESET     ;CLRCIR RESTORES REGISTERS 
ABTT2: ASCIZ"
ABORT REQUESTED
"

;TRPCOD--PROGRAM TRAP
TRPER: ERN <GD,RESET,TRPM2>
TRPM2: ASCIZ"
TRANSMISSION ABORTED DUE TO SLAVE TRAP
"

;BADCOD--UNEXPECTED CONTROL CODE
UCC: TRNE F,BI
 PUSHJ P,BGC
 TRNN F,BI
 PUSHJ P,GC
 MOVEM C,UCHAR
 ERN <GD,RESET,UCCMSG>
UCCMSG: ASCIZ"
TRANSFER ABORTED DUE TO UNEXPECTED CONTROLLER CODE
"

;NICOD--UNIMPLEMENTED OPERATION
UO: ERN <GD,RESET,UOMSG>
UOMSG: ASCIZ"
TRANSFER ABORTED DUE TO UNIMPLEMENTED SLAVE OPERATION
"

;ERRCOD--FILE SYSTEM ERROR READING SEND FILE OR WRITING RECEIVE FILE
FWER: SKIPN DONOR
 JRST FRER
 ERN <GD,RESET,WTER,RBLK>
FRER: ERN <GD,RESET,RDER,DBLK>

;PERCOD--FILE SYSTEM ERROR POSITIONING SEND OR RECEIVE FILE
FPEW: SKIPN DONOR
 JRST FPER
 ERN <GD,RESET,PERMSG,RBLK>
FPER: ERN <GD,RESET,PERMSG,DBLK>

;ERASCD--FILE SYSTEM ERROR ERASING RECEIVE FILE
FERER: ERN <GD,RESET,ERAS,RBLK>

        END
   