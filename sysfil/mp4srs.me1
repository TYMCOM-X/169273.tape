procedure MOD.TSR (TSR.NUM, PROD.NAME, OP.SYS, RUN.DIRECTORY)
    returning (C.TSR.NUM, C.PROD.NAME, C.PROD.VERSION, C.OP.SYS,
          C.RUN.DIRECTORY, C.PROGRAMMER)
%
  Run from SOFT, MOD.TSR allows the user to change the items of an ITSR.
It receives from SOFT the ITSR key values retrieved from either the command
line or the current ITSR information.  It retruns to SOFT the current
information drom the last successfully accessed TSR, if any.
  To compile, MOD.TSR requires the following texts for the indicated macros
and functions:
    TSR.FUNCTIONS  for RECORD.CUR.TSR, TYPE.VALID.TSR.CLASSES, TYPE.SHORT.TSR,
                       ACCEPT.TSR.SPECS, and GET.UNIQUE.TSR;
    SPEC.PARSER    for BREAK.UP.SPEC which is used by ACCEPT.TSR.SPECS.
For descriptions of the macros and functions, the fields they require, and
how they are used - see the appropriate text.
%

begin

controls for relation concurrent update

controls for procedure separator @cr  %allows comas in versions and desc's%

fields YES.NO            as '3c',      % Yes or No Field %
       FIELD.SPEC        as '30c',     % Field to Modify %
       KEY.CHANGE        as 'c',       % A Key Field has been Changed flag %
       DESC.CHANGE       as 'c',       % The Description has been Changed %
       NEW.TSR.NUM same as TSR.NUM,    % New ITSR Number %
       NEW.PROD.NAME same as PROD.NAME, % New Product Name %
       NEW.OP.SYS same as OP.SYS,      % New Operating System Type %
       NEW.RUN.DIRECTORY same as RUN.DIRECTORY,  % New run directory %
       NEW.LINE same as LINE,
       DELETE.DESC       as 'c',       % Description Should be Deleted flag %
       COPY.DESC         as 'c',       % Description Should be Copied flag %

       % Fields used by ACCEPT.TSR.SPECS %
       TSR.SPEC          as '30c',     % TSR Specification, Number/Name %
       SPACE.POSN        as '2n',      % Space Position %
       ITEM              as '30c',     % An Item in a Specification %
       I.QUOTE           as 'c',       % An Item's Quote Indicator%
       SPEC.STATUS       as '-nn',     % Status returned from parsing a spec %

       % Fields used by GET.UNIQUE.TSR %
       FOUND.COUNT       as '3n',      % Number of Instances Found %
       FIRST.NAME.FOUND  as '20c',     % First Product Name Found %
       FIRST.NUM.FOUND   as '8z',      % First ITSR Number Found %
       FIRST.OP.SYS.FOUND same as OP.SYS,
       FIRST.RUN.DIRECTORY.FOUND same as RUN.DIRECTORY,

       % Fields used by the macro 'BREAK.UP.SPEC'.  For more information %
       % see the text 'SPEC.PARSER'.                                     %
       SYMBOL.INDEX      as 'nn',
       PARAM             as '40c',
       PARAM.INDEX       as 'nn',
       SPEC.INDEX        as 'nnn',
       QUOTE.FLAG        as 'c',
       LEN.SPEC          as 'nnn',
       CHAR              as 'c'

constant MAX.TSR.SPECS = 4             % Maximum Number of Items in an ITSR %
                                       %   Specification.                   %

array TSR.ARRAY [1 to MAX.TSR.SPECS]   % The parsed Items of an ITSR Spec.  %
  data ITEM, I.QUOTE                   % Required by Accept.TSR.Specs       %

relation TEMP.DESC is      % Temporary Description, used in modifications %
  key COUNTER
  data LINE

macro ACCEPT.YES.NO is              % Accepts a yes/no responce, must be %
  begin

  accept YES.NO                     % default or cr = no.                %
  if substr(YES.NO,1,1) = "Y" or "y"
    then let YES.NO = "Y"
    else let YES.NO = "N"
  end
end.macro

include text 'SPEC.PARSER'
include text "TSR.FUNCTIONS"


macro CHANGE.TSR.NUM is
GET.NEW.TSR.NUM:
  begin

  type "ITSR Number:", TSR.NUM, " =>(cr for no change)"
  accept NEW.TSR.NUM
  if NEW.TSR.NUM ne default
    then select TSR where (TSR.NUM=NEW.TSR.NUM)
           then begin
                type "ITSR Number Already in Use", @cr
                move default to NEW.TSR.NUM
                repeat GET.NEW.TSR.NUM
                end
           else move "Y" to KEY.CHANGE
  end
end.macro


macro CHANGE.TSR.PROD is
  begin

  do begin
    type "Product Name:", PROD.NAME, " => "
    accept NEW.PROD.NAME
    let NEW.PROD.NAME = upper.case(NEW.PROD.NAME)
    select TSR where (TSR.NUM=TSR.NUM of procedure and
                      PROD.NAME=NEW.PROD.NAME and OP.SYS=OP.SYS of procedure
                      and RUN.DIRECTORY=RUN.DIRECTORY of procedure)
      then begin
           type "An ITSR for this Number and Product already Exists",@cr
           move default to NEW.PROD.NAME
           end
    end
  while NEW.PROD.NAME = default
  move "Y" to KEY.CHANGE
  end
end.macro


macro CHANGE.TSR.OP.SYS is
GET.NEW.OP.SYS:
  begin

  type "Operating System Type: ", trim(OP.SYS), " =>(cr for no change)"
  accept NEW.OP.SYS
  let NEW.OP.SYS = upper.case(NEW.OP.SYS)
  if NEW.OP.SYS ne default
    then select TSR where (TSR.NUM=TSR.NUM of procedure and PROD.NAME=
            PROD.NAME of procedure and OP.SYS=NEW.OP.SYS
            and RUN.DIRECTORY=RUN.DIRECTORY of procedure)
           then begin
                type "An ITSR for of this Number, Product, and System ",
                     "Already Exists", @cr
                move default to NEW.OP.SYS
                repeat GET.NEW.OP.SYS
                end
           else move "Y" to KEY.CHANGE
  end
end.macro


macro CHANGE.TSR.RUN.DIRECTORY is
GET.NEW.RUN.DIRECTORY:
  begin

  type "Run Directory: ", RUN.DIRECTORY, " =>(cr for no change)"
  accept NEW.RUN.DIRECTORY
  let NEW.RUN.DIRECTORY = upper.case(NEW.RUN.DIRECTORY)
  if NEW.RUN.DIRECTORY ne default
    then select TSR where (TSR.NUM=TSR.NUM of procedure and PROD.NAME=
            PROD.NAME of procedure and OP.SYS=OP.SYS of procedure
               and RUN.DIRECTORY=NEW.RUN.DIRECTORY)
           then begin
                type "An ITSR for of this Number, Product, and System ",
                     "Already Exists", @cr
                move default to NEW.RUN.DIRECTORY
                repeat GET.NEW.RUN.DIRECTORY
                end
           else move "Y" to KEY.CHANGE
  end
end.macro

macro CHANGE.TSR.DESC is
  % The user is allowed to keep lines of the old description, replace  %
  % lines of the old description, delete lines of the old decription,  %
  % and add lines to the end of the old description.  The old          %
  % description is not replaced with the new description until the user%
  % is done making changes and KEEP.TSR.CHANGES is executed.           %
  begin
  delete from TEMP.DESC all
  select TSR.DESC where (TSR.NUM = TSR.NUM of procedure) then
    begin
    type @cr, "Old Description: ", @cr
    for each TSR.DESC where (TSR.NUM = TSR.NUM of procedure) sorted on COUNTER
      do type trim(LINE),@cr 
    type @cr, "Changes (cr to keep old line, '-' to delete old line):", @cr
    let COUNTER of procedure = 1
    for each TSR.DESC where(TSR.NUM=TSR.NUM of procedure) sorted on COUNTER do
      begin
      type LINE, @cr, "=>"
      accept NEW.LINE
      if NEW.LINE = default then
        begin
        insert into TEMP.DESC using (COUNTER of procedure for COUNTER, 
                                 LINE of TSR.DESC for LINE)
        let COUNTER of procedure = COUNTER of procedure + 1
        end
      else if length(NEW.LINE)=1 and substr(NEW.LINE,1,1)="-"
        then nothing
      else begin
           insert into TEMP.DESC using
             (COUNTER of procedure for COUNTER, NEW.LINE for LINE)
           let COUNTER of procedure = COUNTER of procedure + 1
           end
      end  %for each tsr.desc%
    type "Additional Lines (blank line terminates):", @cr
    accept NEW.LINE
    while NEW.LINE ne default do
      begin
      insert into TEMP.DESC using(COUNTER of procedure for COUNTER,
        NEW.LINE for LINE)
      let COUNTER of procedure = COUNTER of procedure + 1
      accept NEW.LINE
      end
  end
  else begin
    type "Description (blank line terminates): ", @cr
    accept LINE
    let COUNTER = 1
    while LINE ne default do
      begin
      insert into TEMP.DESC
      let COUNTER = COUNTER + 1
      accept LINE
      end
    end
    move "Y" to DESC.CHANGE
  end
end.macro



macro UNCOMPLETE.TSR is
  begin

        % If the Date Out, Fixer, or Time Spent of a TSR is deleted  % 
        % during modification, this macro will conditionaly delete   % 
        % all the fields.  Used by CHANGE.TIME, CHANGE.DATE.OUT, and %
        % CHANGE.FIXER.                                              %
  type "ITSR had been Complete.", @cr, "Respond 'yes' to delete ",
       "Date Out, Fixer, and Time Spent: "
  ACCEPT.YES.NO
  if YES.NO = "Y"
    then move default to DATE.OUT, PROGRAMMER, TIME.SPENT
  end
end.macro


macro CHANGE.DATE.OUT is
  begin

  if DATE.OUT = default
    then begin
         type "Enter Date Out (closed) as mm/dd/yy: "
         accept DATE.OUT
         if DATE.OUT ne default
           then FINISH.TSR
         end
    else begin  % Date.out ne default %
         type "Date Out:", DATE.OUT, " => "
         accept DATE.OUT of procedure
         if DATE.OUT of procedure = default
           then UNCOMPLETE.TSR
           else move DATE.OUT of procedure to DATE.OUT
         end
  end
end.macro


macro CHANGE.FIXER is
  begin

  if PROGRAMMER = default
    then begin
         type "Four Character ID of Fixer: "
         accept PROGRAMMER
         let PROGRAMMER = upper.case(PROGRAMMER)
         if PROGRAMMER ne default
           then FINISH.TSR
         end
    else begin
         type "Fixer:", PROGRAMMER, " => "
         accept PROGRAMMER of procedure
         let PROGRAMMER of procedure = upper.case(PROGRAMMER of procedure)
         if PROGRAMMER of procedure = default
           then UNCOMPLETE.TSR
           else move PROGRAMMER of procedure to PROGRAMMER
         end
  end
end.macro


macro CHANGE.TIME is
  begin

  if TIME.SPENT = default
    then begin
         type "Time Spent in hours as nn.n: "
         accept TIME.SPENT
         if TIME.SPENT ne default
           then FINISH.TSR
         end
    else begin
         type "Time Spent:", TIME.SPENT, " => "
         accept TIME.SPENT of procedure
         if TIME.SPENT of procedure = default
           then UNCOMPLETE.TSR
           else move TIME.SPENT of procedure to TIME.SPENT
         end
  end
end.macro


macro KEEP.TSR.MOD.CHANGES is
  begin

  if KEY.CHANGE = "Y"
    then begin
         delete from TSR via key
         if NEW.TSR.NUM = default
           then move TSR.NUM to NEW.TSR.NUM
         if NEW.PROD.NAME = default
           then move PROD.NAME to NEW.PROD.NAME
         if NEW.OP.SYS = default
           then move OP.SYS to NEW.OP.SYS
         if NEW.RUN.DIRECTORY = default
           then move RUN.DIRECTORY to NEW.RUN.DIRECTORY
         insert into TSR using (NEW.TSR.NUM for TSR.NUM,
                          NEW.PROD.NAME for PROD.NAME, NEW.OP.SYS for OP.SYS,
                          NEW.RUN.DIRECTORY for RUN.DIRECTORY)
         % if there is another itsr with old number then dont delete desc. %
         select TSR where (TSR.NUM=TSR.NUM of procedure)
           then move "N" to DELETE.DESC
           else move "Y" to DELETE.DESC
         % if there is an itsr descwith new number then dont copy desc. %
         select TSR.DESC where (TSR.NUM=NEW.TSR.NUM of procedure)
           then move "N" to COPY.DESC
           else move "Y" to COPY.DESC
         for each TSR.DESC where (TSR.NUM=TSR.NUM of procedure) do
           begin
           if DELETE.DESC = "Y"
             then delete from TSR.DESC via key
           if COPY.DESC = "Y"
             then insert into TSR.DESC using (NEW.TSR.NUM for TSR.NUM)
           end
         move NEW.TSR.NUM to TSR.NUM, TSR.NUM of procedure
         move NEW.PROD.NAME to PROD.NAME, PROD.NAME of procedure
         move NEW.RUN.DIRECTORY to RUN.DIRECTORY
         end  %key change%
    else alter TSR
  if DESC.CHANGE = "Y"
    then begin
         delete from TSR.DESC via TSR.NUM = TSR.NUM of procedure
         for each TEMP.DESC do 
           insert into TSR.DESC
         end
  end
end.macro


%  BEGIN MODIFY TSR  %
  if (TSR.NUM=default) and (PROD.NAME=default)
    then ACCEPT.TSR.SPECS
  while (TSR.NUM ne default) or (PROD.NAME ne default) do
    begin
    if (TSR.NUM=default) or (PROD.NAME=default)
      then GET.UNIQUE.TSR
    if (TSR.NUM ne default) and (PROD.NAME ne default)
      then begin
           select TSR via key
             then begin
                  move "N" to KEY.CHANGE, DESC.CHANGE
                  move default to DATE.OUT of procedure, PROGRAMMER of
                       procedure, TIME.SPENT of procedure, NEW.TSR.NUM,
                       NEW.PROD.NAME, NEW.OP.SYS,NEW.RUN.DIRECTORY
                  type @cr
                  type "#", TSR.NUM as '8l', "  ", PROD.NAME, "  sys:",
                       trim(OP.SYS), @cr,"<",RUN.DIRECTORY,">",@cr
                  type "Field to Modify (cr to keep changes): "
                  accept FIELD.SPEC
                  let FIELD.SPEC = upper.case(FIELD.SPEC)
                  while (FIELD.SPEC ne default) and (FIELD.SPEC ne "ABORT") do
                    begin
                    conditional on substr(FIELD.SPEC,1,1)
                      begin
                      "C": do begin
                           type "Class:", trim(TSR.CLASS), " => "
                           accept TSR.CLASS
                           let TSR.CLASS = upper.case(TSR.CLASS)
                           if TSR.CLASS illegal
                             then TYPE.VALID.TSR.CLASSES
                           end
                           while TSR.CLASS illegal
                      "D": conditional on substr(FIELD.SPEC,2,1)
                             begin
                             "E": CHANGE.TSR.DESC 
                             "A": begin
                                  let SPACE.POSN = position(FIELD.SPEC," ")
                                  conditional on substr(FIELD.SPEC,
                                                        SPACE.POSN+1,1)
                                    begin
                                    "I": begin
                                         type "Enter Date as mm/dd/yy", @cr
                                         do begin
                                          type "Date In:", DATE.IN, " => "
                                          accept DATE.IN
                                          end
                                         while DATE.IN = default
                                         end
                                    "O": CHANGE.DATE.OUT
                                    end
                                  else type "Invalid Field Specification", @cr
                                  end
                             end
                           else type "Invalid Field Specification", @cr
                      "F": CHANGE.FIXER
                      "H": type "Valid Fields Are: Class, DEscription, ",
                           "DAte In, DAte Out, Fixer, Help, Number", @cr,
                           "PRIority, PROduct, Time spent, Version", @cr
                      "N": CHANGE.TSR.NUM
                      "O": CHANGE.TSR.OP.SYS
                      "P": conditional on substr(FIELD.SPEC,3,1)
                             begin
                             "I": do begin
                                  type "Priority:", PRIORITY, " => "
                                  accept PRIORITY
                                  end
                                  while PRIORITY = default
                             "O": CHANGE.TSR.PROD
                             end
                           else type "Invalid Field Specification", @cr
                      "T": CHANGE.TIME
                      "V": begin
                           type "Product Version:", PROD.VERSION, " => "
                           accept PROD.VERSION
                           let PROD.VERSION = upper.case(PROD.VERSION)
                           end
                      end
                    else type "Invalid Field Specification", @cr
                    type "Field to Modify (cr to keep changes): "
                    accept FIELD.SPEC
                    let FIELD.SPEC = upper.case(FIELD.SPEC)
                    end  %while field.spec do%
                  if FIELD.SPEC ne "ABORT"
                    then KEEP.TSR.MOD.CHANGES
                  RECORD.CUR.TSR
                  end  %select...then...%
                else type "Non-existent ITSR", @cr
                select PRODUCT via key
                    then nothing
                else type "Note:  A Product Entry Does Not Exist for ", 
                    trim(PROD.NAME), " v",trim(PROD.VERSION)," sys:", OP.SYS,
                    " <",trim(RUN.DIRECTORY),"> ", @CR

           end
    ACCEPT.TSR.SPECS
    end  %while not default do...%
  type @cr
  end  