%
    Spec Parser

  These macros are used to seperate the items entered in a specification line
and return them as items in an array.  A corresponding array is also returned
that indicates if an iten in the specificcation was entered between quote 
marks.  The value of the line is unchanged.  This allows a procedure to accept
from the user a variable number of items of any kind.  Verification of the 
items must be done by the calling procedure on the elements returned in the
item array.

  The parser is referenced by using the macro BREAK.UP.SPEC.  This should 
be rewritten as a function whenever functions are able to pass parameters.

The parameters needed by BREAK.UP.SPEC are:
    name of the specification line -- a character string,
    name of the array for the returned items -- it must have as data a
      specification item and a quoted indicator,
    name of the item -- a character string,
    name of the quote indicator -- a single character or a string,
    first position in the array for the first item found -- numeric: n>0,
    maximum number of items that should be found -- numeric: n>0, and
    status -- a signed numeric value returned by the parser.

For example:
    fields ITEMS as '20c',
           ITEM.QUOTE as 'c',
           PARSE.STAT as '-nn',
           FIRST.ITEM as 'n',
           SPEC.LINE as '80c'
    constant MAX.LIST.ITEMS = 5
    array SPEC.ITEMS [1 to MAX.LIST.ITEMS]
      data ITEMS, ITEM.QUOTE
      .
      .
      .
    let FIRST.ITEM=1
    type "Enter List: "
    accept SPEC.LINE
    BREAK.UP.SPEC (SPEC.LINE, SPEC.ITEMS, ITEMS, ITEM.QUOTE, FIRST.ITEM,
                   MAX.ITEMS, PARSE.STAT)

Note:  The maximum number of items, the first item's array position, and the
       size of the array should be compatible at all times.

  Spaces, commas, and single or double quote marks are considered to be item
seperators.  To include spaces or commas in an item the item must be quoted.
Quote marks can not be 'quoted' to be included in an item.  A pair of quote
marks with nothing between them is ignored.  To enter an empty item put at
least one space between the quotes.  If an item is within quotes then that
item's corrisponding element in the quote indicator array will equal 'Y'.  The
quote indicstor for non-quoted items is 'N'.  The quote marks are removed from
the items before they are returned.  If the first item in the line needs to be
within quotes then the whole line must also be within quotes.  For example:
    "'item,1' item2" -- will return two items: 'item,1' and 'item2'.  If these
same items were entered as:  'item,1' item2  -- MAGNUM will not accept it.
Leading blanks are not removed from quoted items.

Note:  For MAGNUM to allow commas within an input item the separator must be
       set to something else in a 'controls for procedure' statement or in
       a source declaration.  Entering the whole line between quotes may also
       work.

  Elements in the Item array equal to the Maximum number of items starting
with the First Positioned item are set to their default value and their
corresponding elements in the Quote Indicator array are set to 'N' prior to
the line being examined.  Items are placed into the array elements as they are
found.  Therefore, the Status returned and the Quote array should be used to
determine whether or not an element within the range set by the First Position
and the Maximum that equals the default value is an item with the default
value or not an item from the input line.

The status values returned are:
  Status > 0:  Status equals the number of items found without mishap.
  Status = 0:  Either the line is empty,
               the first position is less than or equal to zero,
               the maximum is les than or equal to zero,
               or no items were found.
  Status < 0:  Processing ended when one more than the maximum number of
               items was found.  The data in the arrays is good for the
               maximum number given to the parser.  The absolute value of 
               the status should equal the maximum number of items allowed
               and is the number of valid items found.

The following fields must be declared for the macros:
    SYMBOL.INDEX as 'nn',  --  Index into the elements of the Symbol (output)
                               arrays.
    PARAM as '40c',        --  A Parameter, or item, found in the input
                               Specification Line.
    PARAM.INDEX as 'nn',   --  Index into the characters of a Parameter.
    SPEC.INDEX as 'nnn',   --  Index to the characters of a Specification
                               Line.
    QUOTE.FLAG as 'c',     --  Indicates if the character being processed is
                               between quote marks.
    LEN.SPEC as 'nnn',     --  Length of the input Specification Line.
    CHAR as 'c'            --  A single character of the input Specification
                               Line.

The following names must be undefined:
    SPEC               SYMBOL.ARRAY2
    SYMBOL.ARRAY       SYMBOL2
    SYMBOL             FIRST2
    QUOTED             MAX.ITEMS2
    FIRST              STATUS2
    MAX.ITEMS
    STATUS.

%


macro FINISH.SYMBOL(SYMBOL.ARRAY2,SYMBOL2,FIRST2,MAX.ITEMS2,STATUS2) is
%  Called whenever a seperating character is found, this macro will store  %
%  any non-empty item in the output array if the maximum number of items   %
%  not been reached.                                                       %
  begin
  if PARAM.INDEX gt 1
    then begin
         if MAX.ITEMS2 lt (SYMBOL.INDEX - FIRST2 + 1)
           then begin
                %If more than the maximum number of items have been found,%
                %then return a negative status and exit the parser.       %
                let STATUS2 = -(STATUS2)
                finish BREAK.UP
                end
         move PARAM as SYMBOL2 to SYMBOL2[SYMBOL.INDEX] of SYMBOL.ARRAY2
         add 1 to SYMBOL.INDEX
         add 1 to STATUS2               %increment number of items count%
         let PARAM = default
         let PARAM.INDEX = 1
         end
  end
end.macro

macro BREAK.UP.SPEC(SPEC,SYMBOL.ARRAY,SYMBOL,QUOTED,FIRST,MAX.ITEMS,STATUS) is
BREAK.UP:
  begin
  if (SPEC=default) or (FIRST le 0) or (MAX.ITEMS le 0)
    then begin             % unuseable parameters sent to parser %
         move 0 to STATUS
         finish BREAK.UP
         end

  let SYMBOL.INDEX = FIRST
  while SYMBOL.INDEX le (FIRST + MAX.ITEMS -1) do    %clear the output arrays%
    begin
    let SYMBOL[SYMBOL.INDEX] of SYMBOL.ARRAY = default
    let QUOTED[SYMBOL.INDEX] of SYMBOL.ARRAY = 'N'
    add 1 to SYMBOL.INDEX
    end

  let STATUS = 0                       %clear count of items%
  let PARAM = default
  let PARAM.INDEX = 1
  let SYMBOL.INDEX = FIRST
  let SPEC.INDEX = 1
  let QUOTE.FLAG = 'N'
  let LEN.SPEC = length(SPEC)
  while SPEC.INDEX le LEN.SPEC do   %scan the line%
    begin
    let CHAR = substr(SPEC, SPEC.INDEX, 1)
    conditional on CHAR
      begin
      '"' or "'": begin
                  FINISH.SYMBOL(SYMBOL.ARRAY,SYMBOL,FIRST,MAX.ITEMS,STATUS)
                  if QUOTE.FLAG = "Y"
                    then begin         %process an ending quote - the quote %
                                       %array element is set to false to    %
                                       %avoid it being true from an empty   %
                                       %pair of quotes.                     %
                         let QUOTED[SYMBOL.INDEX] of SYMBOL.ARRAY = 'N'
                         let QUOTE.FLAG = 'N'
                         end
                    else begin         %a beginning quote%
                         let QUOTED[SYMBOL.INDEX] of SYMBOL.ARRAY = 'Y'
                         let QUOTE.FLAG = 'Y'
                         end
                  end
      ' ' or ',': begin
                  if QUOTE.FLAG = "Y"  %if the comma or space is whithin   %
                    then begin         %quotes, then keep it.              %
                         let substr(PARAM, PARAM.INDEX, 1) = CHAR
                         add 1 to PARAM.INDEX
                         end
                    else FINISH.SYMBOL(SYMBOL.ARRAY,SYMBOL,FIRST,MAX.ITEMS,
                                       STATUS)
                  end
      end
    else begin                         %store the character%
         let substr(PARAM, PARAM.INDEX, 1) = CHAR
         add 1 to PARAM.INDEX
         end
    add 1 to SPEC.INDEX
    end  %while...%
  %process last symbol (if any)%
  FINISH.SYMBOL(SYMBOL.ARRAY,SYMBOL,FIRST,MAX.ITEMS,STATUS)
  end  %break.up%
end.macro
  