	SUBTTL SYSTAT:  MAIN PROGRAM
	IF1 <PRINTX MAIN PROGRAM>
MAINSW==1		;INDICATES THIS IS THE MAIN.

DEFINE	BOMB(A),<JRST	[JSP	M,BOMB.
			ASCIZ	\A\]>

;  EXTERNAL SUBROUTINES

;  THE FOLLOWING SUBROUTINES ARE IN SSCAN
	EXTERN	CHGMOP,CHKNAM,CHKONC,CHKPPN,CHKPRG,CHKTIM
	EXTERN	CHKTTY,FNDPPN,FNDPRG,FNDTTN,FNDUSN,SCNSWT

;  THE FOLLOWING SUBROUTINES ARE IN SSIO
	EXTERN	CLRFLG,CRLF,FIELD,GA,GETCHR,LUDCHK,MSG,MSGDEC
	EXTERN	NOWHO,RDX10,SIXBP,SPACE,THISIS,TYO,TCKTIS,TYOCLR

;  THE FOLLOWING SUBROUTINES ARE IN SSDSPL
	EXTERN	DEVQ,DORMNT,ERREPT,FS,GIVAPR
	EXTERN	GIVER,GIVRPS,GIVSTA,OPNFIL,HGHSTS,SW

;  THE FOLLOWING SUBROUTINES ARE IN SYSCOM
	EXTERN	PSPCMD,SYSNO,UPCMD,UPSW,USECMD
	EXTERN	WHOAMI,WHOCMD,WHOME,WHRCMD

;  THE FOLLOWING SUBROUTINES ARE IN JOBSTT
	EXTERN	%CIO,%CON,%DIO,%FRM,%JOB,%LIC,%PPN,%PRG
	EXTERN	%SIZ,%STT,%TRU,%TTY,%TYM,%WHO

;  THE FOLLOWING SUBROUTINES ARE IN SSHELP
	EXTERN	H.CHAR,H.DISK,H.DISP,H.DSPT,H.HELP
	EXTERN	H.JOB,H.SEAR,HELP,HELPM
;        EXTERN  H.STAT            [OBSOLETE]

;  THE FOLLOWING SUBROUTINES ARE IN SSLOW
	EXTERN	FIRKU

;  THE FOLLOWING SUBROUTINES ARE IN SSDISK
	EXTERN	DP

;  EXTERNAL LOCATIONS

;  THE FOLLOWING LOCATIONS ARE IN SSLOW
	EXTERN	ACTUSE,BUF,BL.DUL,BL.LUD,BL.NOD,BL.TRU,BL.TTY
	EXTERN	CONSWT,CORUSE,DATE,DDBTBL,DSKUSE,DULOPN,EDDBTB
	EXTERN	DISPLA,JOBN,JOBTBL,LASJBF,LASPRI,LASPRV,LINLOL
	EXTERN	LOWEND,LOWUSE,LPTCSW,LPTOPN,LUDOPN,ME,MYJOB
	EXTERN	NOHEAD,NOJSWT,NOSPIT,NUMJOB,PDL,PTYS
	EXTERN	RPGSW,SAVLIC,SAVWD,SEGFLG,STATES,SYSPPN,SYSTAP
	EXTERN	TEMEND,TROEXT,TRUIOW,TTYBUF,TYOB,%TRUBU
	EXTERN	.DEV,.PPN,.PRG,.PRV,.SEGCT,.SGN,.STS,.TTY
	EXTERN	EVERSW,OLDSW,NORMSW,SVF,SVF1
	EXTERN	KY.PRG,KY.PPN,KY.TTN,KY.USN,CN.TIM

;  GLOBAL SUBROUTINES

	INTERN	BOMB.,HACKQ,NOCOR,FINIS


	SUBTTL	SWITCH TABLES

;EXTERNAL REFERENCES
EXTERN	JOBREL,JOBFF,JOBREN,JOBSA,JOBDDT,JOBJDA

DEFINE TBGEN(A,B,C)<	;GENERATE SWITCHES
DEFINE SWITCH (P,Q)
	<<SIXBIT /P/>>
A:	TABLE
	Z		;END OF TABLE IS A ZERO
B==.-A
DEFINE SWITCH(P,Q)
        <Q>
C:	TABLE
	Z		;END OF TABLE IS A ZERO
>

;SWITCH TABLES
;TABLE NO.1 - SYSTAT START-UP COMMANDS
DEFINE TABLE<

;COMMANDS WHICH ARE EITHER SYSTAT OR SYSNO
	SWITCH S,<JRST CKSYSN>
	SWITCH SY,<JRST CKSYSN>
	SWITCH SYS,<JRST CKSYSN>

;COMMANDS WHICH ARE THEMSELVES
	SWITCH SYSTAT,<JRST SSYSTAT>
	SWITCH SYSNO,<JRST SYSNO>
	SWITCH WHO,<JRST WHOCMD>
	SWITCH WHERE,<JRST WHRCMD>
	SWITCH PSP,<JRST PSPCMD>
	SWITCH USERS,<JRST USECMD>
	SWITCH ME,<JRST WHOAMI>		;WHOAMI CALLS GA FIRST
IFN FTUPCMD,<
	SWITCH UP,<JRST UPCMD>		;SAY SYSTEM UP TIME
>
	SWITCH GO,<JRST GOCMD>
	SWITCH RUN,<JRST GOCMD>
	SWITCH START,<JRST GOCMD>
>

	TBGEN	(STCMD,STLG,STCMD2)

;TABLE NO.2 - SYSTAT COMMANDS
DEFINE TABLE<
	SWITCH HELP,<JRST HELP>
	SWITCH ?DISK,<JRST H.DISK>
IFN FTRPS,<SWITCH ?DISPAT,<JRST H.DSPT>>
;	SWITCH ?PERFO,<JRST H.STAT>
	SWITCH ?CHAR,<JRST H.CHAR>
	SWITCH ?JOB,<JRST H.JOB>
	SWITCH ?DISPLA,<JRST H.DISPLA>
	SWITCH ?SEARCH,<JRST H.SEARCH>
	SWITCH ?HELP,<JRST H.HELP>
	SWITCH CONTIN,<SETOM CONSWT>
	SWITCH DPY,<SETOM DISPLA>
	SWITCH ?,<JRST HELP>
	SWITCH NOJOB,<SETOM NOJSWT>
	SWITCH NOHEAD,<SETOM NOSPIT>
	SWITCH PPN,<TLO F1,F1.PPN>
	SWITCH TYMNET,<TLO F1,F1.TYM>
	SWITCH PROGRA,<TLO F1,F1.PRG>
	SWITCH SIZE,<TLO F1,F1.SIZ>
	SWITCH STATE,<TLO F1,F1.STT>
	SWITCH TRU,<TLO F1,F1.TRU>
IFN FTCONN,<
	SWITCH CONNEC,<TLO F1,F1.CON>>
IFN FTCHIO,<
	SWITCH CHARIO,<TLO F1,F1.CIO>>
IFN FTDSIO,<
	SWITCH DSKIO,<TLO F1,F1.DIO>>
IFN FTUSIO,<
	SWITCH USETIO,<TLO F1,F1.UIO>>
IFN FTFROM,<
	SWITCH OWNER,<TLO F1,F1.FRM>>
	SWITCH WHO,<TLO F1,F1.WHO>
	SWITCH LICENS,<TLO F1,F1.LIC>
	SWITCH TTY,<TLO F1,F1.TTY>
;	SWITCH SWAP,<TRO F1,F1.SWP>
	SWITCH DEVICE,<TRO F1,F1.DEV>
	SWITCH BUSY,<TRO F1,F1.DEV>
	SWITCH DORMAN,<TRO F1,F1.DRM>
	SWITCH ERRORS,<TRO F1,F1.ERR>
	SWITCH STRUCT,<TRO F1,F1.STR>
	SWITCH GENERA,<TRO F1,F1.GEN>
	SWITCH FILES,<TRO F1,F1.FIL>
	SWITCH JOB,<TRO F1,F1.JBS>
	SWITCH LPT,<SETOM LPTCSW>
	SWITCH NONJOB,<TRO F1,F1.NON>
	SWITCH DISK,<TRO F1,F1.DSK>
	SWITCH SHORT,<OR F1,[F1.SRT,,F1.SHR]>
IFG FTVERS,<
	SWITCH VERSIO,<TRO F1,F1.VER>
>
	SWITCH EVERYT,<SETOM EVERSW>
	SWITCH OLD,<SETOM OLDSW>
	SWITCH NORMAL,<SETOM NORMSW>
	SWITCH TELETY,<OR F1,[F1.XXX,,F1.EVE]>
	SWITCH CHRONI,<OR F1,[F1.CRN,,F1.SHR]>
	SWITCH EXTRA,<TRO F1,F1.EXT>
IFG FTAPR,<
	SWITCH APR,<TRO F1,F1.APR>
>
	SWITCH PERFOR,<TRO F1,F1.SPF>
IFN FTRPS,<SWITCH DISPAT,<TRO F1,F1.RPS>>
	SWITCH ME,<JRST WHOME>		;WHOME DOES NOT CALL GA
IFN FTUPCMD,<
	SWITCH UP,<JRST UPSW>		;SAY SYSTEM UP TIME
>
>

	TBGEN	(CMDFL,CMDLG,CMDFL1)
	SUBTTL	INITIALIZATION

;HERE TO ZERO OUT SYSTAT
ZEROUT:	SETZM	JOBREN		;NO REENTER ADDRESS
	SKIPE	JOBDDT		;IF NO DDT THEN SKIP
	JRST	[OUTSTR [ASCIZ /
DDT

/]
		MOVE 1,JOBDDT
		JRST (1)]
IFN FTZCOR,<SETZM	JOBSA>
	RESET			;RESET ALL DEVICES
	JRST	FIRKU		;AND QUIT

;START HERE
SYSTAT:	TDZA	F,		;F = 0 ON NORMAL START-UP
	TDO	F,		;F = -1 ON RPG CALL
	RESET			;RESET ALL I/O AND RESTORE CORE
	MOVE	A,[XWD LOWEND,LOWEND+1]	;ZERO OUT LO-SEFG AREA
	SETZM	LOWEND		;WHICH IS BETWEEN LOWEND-TEMEND
	BLT	A,TEMEND	;(WHICH IS EXPECTED ZERO DATA)
	MOVEM	F,RPGSW		;SET THE RPG SWITCH
	SETZB	F,F1		;CLEAR FLAGS REGISTERS
	MOVE	P,PDP		;SETUP STACK PNTR.

; SAVE OUR CURRENT LICENSE, REDUCE "WC" LICENSE, CONTINUE
	HRRO	A,XJBLIC	;JBTLIC: USERS LICENSE TABLE
	GETTAB	A,		;GET TABLE
	 SETZ	A,		;ERROR
	MOVEM	A,SAVLIC	;LICENSE, AS NOW SET, SAVE
	TLZ	A,%WCLIC	;LH=FILE RH=USER, REMOVE WCLIC
	SETLIC	A,		;SET NEW LICENSE FIELD
	 JFCL			;HERE ON ERROR - IGNORE
NOSPY:	PJOB	A,		;GET MY JOB NUMBER
	MOVEM	A,MYJOB		;SAVE FOR FUTURE REFERENCE.
	HRRO	B,XJBPPN	;GET PPN
	GETTAB	B,		;GET MY PPN
	 BOMB	(Can not read your ppn from monitor GETTAB)
	MOVEM	B,ME		;SAVE FOR FUTURE TESTS

; 1. INIT THE TELETYPE OR SYSTAT DEVICE
	MOVEI	M,^D130		;LOL FOR 'SYSTAT' DEVICE
	MOVEM	M,LINLOL	;SAVE LINE LOL
	INIT	TTY,0		;TTY CHAN, MODE 0
	SIXBIT	/SYSTAT/	;LOGICAL DEVICE SYSTAT
	TYOB,,0			;OUTPUT BUFFER ONLY
	JRST	.+2		;NOT OPENED
	JRST	TTYOPN		;TTY IS OPENED
	INIT	TTY,400000	;TTY CHAN, MODE 0
	SIXBIT	/TTY/		;TRY THE TTY
	TYOB,,0			;OUTPUT BUFFER ONLY
	BOMB	(can not init device TTY: or device SYSTAT: for output)
	HRROI	A,27		;AUXCAL FCN-27 TERMINAL WIDTH
	SETO	B,		;OPERATION- -1, READ PARAMETER
	AUXCAL	A,B
	MOVEM	B,LINLOL	;SAVE NEW LINE LOL
TTYOPN:	MOVEI	C,TTYBUF	;GET ADR OF TTY BUFFERS
	EXCH	C,JOBFF		;FAKE OUT MONITOR
	OUTBUF	TTY,1		;1 OUTPUT BUFFER
	MOVEM	C,JOBFF		;RESET JOBFF
	ENTER	TTY,BL.TTY	;ENTER THE FILE NAME INCASE DSK
	BOMB	(ENTER UUO failed on output device TTY: or SYSTAT:)
	OUTPUT	TTY,		;SET UP OUTPUT RING HEADER.

; 2. INIT DSK FOR (TYMNET)NODES.MAP FILE
	INIT	NOD,16		;NOD CHAN, MODE 16 (DUMP)
	SIXBIT	/DSK/		;LOGICAL DEVICE SYS
	Z			;NO BUFFERS IN DUMP MODE
	BOMB	(can not init device DSK: for NODES.MAP file access)
	LOOKUP	NOD,BL.NOD	;LOOKUP THE NODES.MAP FILE.
	JFCL			;IGNORE ERRORS.

; 3. INIT AND OPEN SYS:DUL.SYS
	INIT	DUL,16		;DUL CHAN, MODE 16 (DUMP)
	SIXBIT	/SYS/		;LOGICAL DEVICE SYS
	Z			;NO BUFFERS IN DUMP MODE
	BOMB	(can not init device SYS: for DUL.SYS file access)
	LOOKUP	DUL,BL.DUL	;LOOK UP THE DUL
	TDZA	A,		;CAN NOT OPEN THE DUL, FLAG=0
	SETO	A,		;DUL OPEN, SET FLAG
	MOVEM	A,DULOPN	;A HAS OPEN FLAG(0=NOT,1=OPEN)

; 4. INIT AND OPEN SYS:LUD.SYS
	INIT	LUD,16		;LUD CHAN, MODE 16 (DUMP)
	SIXBIT	/SYS/		;LOGICAL DEVICE SYS
	Z			;NO BUFFERS IN DUMP MODE
	BOMB	(Can not init device SYS: for LUD.SYS file access)
	LOOKUP	LUD,BL.LUD	;LOOKUP THE LUD
	TDZA	A,		;CAN NOT OPEN LUD
	SETO	A,		;LUD OPEN
	MOVEM	A,LUDOPN	;A HAS OPEN FLAG(0=NOT,1=OPEN)

IFN FTTRUCTL,<
; 5. INIT AND OPEN (PJ)LTCURT.DAT FILE
	INIT	TRU,16		;TRU CHAN, MODE 16 (DUMP)
	SIXBIT	/DSK/		;DSK
	Z			;NO BUFFERS
	BOMB	(Can not init device DSK: to access tru control file)
	LOOKUP	TRU,BL.TRU	;LOOK UP THE FILE
	JRST	.+2		;COULD NOT OPEN FILE
	IN	TRU,TRUIOWD	;INPUT DATA FROM FILE
	JFCL			;FAILED
	RELEASE	TRU,		;DONT NEED CHANNEL ANY MORE
>; ASSEMBLE ABOVE FOR READING TRU CONTROL STUFF
;**********************************************
;*  SCAN USER COMMAND AND SET UP PARAMETERS   *
;**********************************************

	SKIPN	RPGSW		;SKIP IF AN RPG CALL
	SKIPE	JOBDDT		;ARE WE DEBUGGING ?
	JRST	GOCMD2		;YES-GO DEBUG

	RESCAN			;RESCAN USER COMMAND

COMND:	PUSHJ	P,GETCHR	;INPUT A CH.
	  JRST	NOGO		;NO CHS. LEFT OR A BREAK CH.
	CAIG	WD,"Z"
	CAIGE	WD,"A"		;IGNORE ALL NON-ALPHABETIC CHS.
	JRST	COMND		;BACK FOR MORE
	SETZ	M,
	MOVE	BP,[POINT 6,M]
	MOVEI	A,6		;6 CHARS MAXIMUM
	JRST	COMN1
COMN0:	PUSHJ	P,GETCHR
	JRST	COMN2
COMN1:	CAIG	WD,"Z"
	CAIGE	WD,"A"
	JRST	COMN2
	SOJL	A,COMN0
	SUBI	WD,40
	IDPB	WD,BP
	JRST	COMN0

COMN2:	MOVEM	WD,SAVWD	;SAVE LAST CHARACTER TYPED
	MOVEI	WD,STCMD	;TABLE ONE
	MOVEI	CH,STLG		;OFF SET
	JRST	SCNSWT		;SCAN SWITCH
;HERE ON "S", "SY" OR "SYS"
CKSYSN:	HRROI	B,6
	GETTAB	B,
	SETZ	B,
	TRNE	B,600		;IF SKIP PDP-10 MODE
	JRST	SYSNO
	JRST	SSYSTAT		;SYSTAT!

;HERE ON "GO" , "RUN" , "START"
GOCMD:	MOVEI	WD," "
	EXCH	WD,SAVWD	;EXCHANGE WD=CHAR SAVWD=SPACE
	JRST	GOCMD1
	INCHRS	WD		;TRY TO INPUT
	JRST	.+3		;NOTHING TO DO
GOCMD1:	CAIE	WD,12		;LF TERMINATING COMMAND?
	JRST	.-3		;NO-KEEP ON EATING !
GOCMD2:	TLZ	F,FL.BRK	;OFF SIGN FLAG
	OUTSTR	[ASCIZ /:-/]
	INCHWL	WD		;WAIT FOR LINE
	JRST	COMND+2		;AND ACCEPT COMMAND

;HERE ON SYSTAT COMMAND -- INITIALIZE STATISTICS
SSYSTAT: PUSHJ	P,GA		;BUILD TABLES
;	JRST	COMND1		;TO COMMAND DISPATCHER

COMND1:	MOVEI	WD," "
	EXCH	WD,SAVWD	;GET WD AND RESET FLAG
	JRST	AGAIN1
AGAIN:	PUSHJ	P,GETCHR	;LOOK FOR 1ST CH.
	  JRST	NOGO		;NO CHS. LEFT OR A BREAK CH.
AGAIN1:	CAIE	WD," "		;SKIP SPACES
	CAIN	WD,","		;AND COMMAS
	JRST	AGAIN		; ..
	CAIN	WD,"/"		;SKIP SLASH
	JRST	AGAIN		; ..
	MOVE	BP,[POINT 6,M]
	SETZ	M,
	MOVEI	A,6
	JRST	AGAIN3
AGAIN4:	PUSHJ	P,GETCHR
	JRST	NOGO
AGAIN3:	CAIN	WD,"?"		;Q-MARK O.K.
	JRST	AGAIN7
	CAIG	WD,"Z"
	CAIGE	WD,"A"
	JRST	AGAIN5
AGAIN7:	SOJL	A,AGAIN4
	SUBI	WD,40
	IDPB	WD,BP
	JRST	AGAIN4

AGAIN5:	CAIE	WD,12		;LINE FEED?
	CAIN	WD,15		;CARRIAGE RETURN?
	JRST	NOGO		;YES-END OF CMD STRING
	JUMPE	M,SPCDMC	;PROCESS SPECIAL COMMAND CHAR.
	MOVEM	WD,SAVWD
	MOVEI	WD,CMDFL	;TABLE ONE
	MOVEI	CH,CMDLG	;OFF SET
	PUSHJ	P,SCNSWT
	JRST	COMND1

;HERE TO PROCESS SPECIAL CHARACTER
SPCDMC:	PUSHJ	P,CHGMOP	;CHECK FOR JOB# SPECIFICATION.
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND...
	PUSHJ	P,CHKPRG	;CHECK FOR PROGRAM SEARCH
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND...
	PUSHJ	P,CHKPPN	;CHECK FOR A PPN SPECIFICATION
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND...
	PUSHJ	P,CHKNAM	;CHECK FOR A LUSER NAME
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND...
	PUSHJ	P,CHKTTY	;CHECK FOR TTY SPECIFICATION
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND
	PUSHJ	P,CHKTIM	;CHECK FOR TIME SPECIFICATION
	 JRST	COMND1		;SUCCESSFUL, NEXT COMMAND
        OUTPUT  TTY,            ;FAILURE, CLEAR TTY BUFFER
        JRST    HELPM           ;PROMPT FOR HELP

;HERE ON END OF USER COMMAND STRING
;0. IF THERE ARE NO LEFT HALF COMMANDS THEN SET F1.EXT
;1. IF USER HAS ENTERED COMMANDS CAUSING JOBS TO BE PRINTED
;   (NOHEAD#0) AND THERE IS NO LEFT HALF BITS SET, THEN SET
;   STANDARD LEFT HALF FIELD, ELSE GO TO STEP 2.
;2. IF USER HAS NOT ENTERED COMMANDS (NOHEAD=0) BUT THERE
;   ARE LEFT HALF COMMANDS THEN SET UP JOBTBL=ALL ONES
;   ELSE GO TO STEP 3.
;3. IF THERE ARE NO LEFT HALF AND NO RIGHT HALF COMMANDS THEN
;   SET STANDARD LEFT HALF MASK AND SET JOBTBL=ALL ONES, ELSE 4
;4. IF THERE ARE NO LEFT HALF BUT RIGHT HALF COMMANDS,
;   THEN NO JOBS ARE GOING TO BE OUTPUT.
;   IF A JOB IS GOING TO BE OUTPUT, SET JOBTBL(0)=0
;   ELSE SET JOBTBL(0)=1
;
; NOTE: LH BITS ONTROL JOB STATUS FIELD
;	RH BITS CONTROL DISPLAY FIELDS
NOGO:	JUMPE	M,NOGO1H	;IF M # 0 THEN PROC LAST CMD
	MOVEI	WD,CMDFL	;COMMAND TABLE
	MOVEI	CH,CMDLG	;LENGTH OF TABLE 
	PUSHJ	P,SCNSWT	;SCAN FINAL SWITCH
; CHECK FOR 'EVERYTHING' SWITCH (EVERSW # 0)
; 1. IF A JOB SELECTION IS GIVEN (NOHEAD # 0) THEN
;    OR IN (LH) BITS FROM F1.EVN ONLY (JOB STATUS BITS)
; 2. IF ANY DISPLAY SELECTIONS ASKED FOR (RH OF F1 # 0)
;    THEN EVERYTHING DOES NOTHING
; 3. IF NO DISPLAY SELECTIONS AND NO JOB SELECTIONS,
;    OR IN BOTH RH BITS FROM F1.EVE AND LH BITS FROM F1.EVN
NOGO1H:	SKIPE	LPTCSW		;TO THE LPT ??
	PUSHJ	P,LPTOPN	;YES, OPEN THE LPT
	SKIPN	EVERSW		;SKIP IF EVERYTHING TYPED
	JRST	NOGO0H		;NOTHING, GO ON
	SKIPE	NOHEAD		;ANY JOB SELECTIONS?
	JRST	NOGO2H		;YES, SET JUST LH BITS
	JUMPN	F1,NOGO0H	;ANY DISPLAY SELEC. JUMPS
; WE HAVE NO SELECTIONS AT ALL, SET ALL BITS
	OR	F1,[F1.EVN,,F1.EVE] ; ALL SELECTION BITS
	JRST	NOGO0H		;AND CONTINUE
; WE HAVE JOB SELECTION, JUST LH BITS
NOGO2H:	TLO	F1,F1.EVN	;SET LH BITS
; DROP INTO NOGO0H
NOGO0H:	SKIPN	OLDSW		;SKIP IF OLD SWITCH SET
	SKIPE	NORMSW		;SKIP IF NORMAL SWITCH NOT SET
	JRST	[MOVEM F1,SVF1
		MOVEM F,SVF	;SAVE THOISE REGISTER
		SETZB F,F1	;ZERO OUT
		JRST .+1]	;LOOKS LIKE SYS <CR>
	TLNE	F1,F1.ALL	;SKIP IF NO LH BITS SET
	JRST	.+2		;IF BITS SET, DONT SET FLAG
	SETOM	TROEXT		;NO LH BITS--FLAG /EXTRA SWITCH
	SKIPE	NOHEAD		;NOSKIP IF NO CMDS
	TLNE	F1,F1.ALL	;SKIP IF NO LEFT HALF BITS
	JRST	NOGO2		;GO TO STEP 2
	TLO	F1,F1.XXX	;SET STANDARD FIELD
	SETZM	JOBTBL		;SET JOB OUTPUT SWITCH
	JRST	OKGO		;AND PROCEED
NOGO2:	TLNE	F1,F1.ALL	;SKIP IF NO LH BITS SET
	SKIPE	NOHEAD		;SKIP IF NO COMMANDS GIVEN
	JRST	NOGO3		;GO TO STEP 3
NOGO1:	MOVEI	WD,MX.JOB	;MAXIMUM JOBTBL SIZE
	SETOM	JOBTBL(WD)	;SET ALL JOBTBL UP
	SOJG	WD,.-1		;LOOP
	SETZM	JOBTBL		;SET JOB OUTPUT SWITCH
	JRST	OKGO		;GO AHEAD
NOGO3:	JUMPN	F1,NOGO4	;SKIP IF NOTHING GIVEN
	TLO	F1,F1.XXX	;SET STANDARD FIELD
	JRST	NOGO1		;AND SET JOBTBL
NOGO4:	TLNE	F1,F1.ALL	;SKIP IF ANY BITS ARE SET
	JRST	.+2		;BITS SET--DONT SET FLAG
	SETOM	JOBTBL		;SET NO JOB OUTPUT

OKGO:	SKIPN	OLDSW
	SKIPE	NORMSW
	JRST	[MOVE F1,SVF1
		MOVE F,SVF
		SKIPE OLDSW
		OR F1,[F1.OLD,,0]
		SKIPE NORMSW
		OR F1,[F1.NOW,,0]
		JRST .+1]
	TLNE	F1,F1.ALL	;SKIP IF NO BITS SET
	SKIPE	NOJSWT		;IF ZERO SET JOB SWITCH
	JRST	.+2
	TLO	F1,F1.JOB	;SET THE JOB SWITCH

	TRNN	F1,F1.JBS	;JOB STATUS??
	JRST	TYMTIS		;GO INTO EXECUTION....

;HERE ON /JOB SWITCH -- SET JOB TABLE
	MOVEI	WD,MX.JOB
	SETOM	JOBTBL(WD)
	SOJG	WD,.-1
	SETZM	JOBTBL
	TLO	F1,F1.XXX
	JRST	TYMTIS		;AND AWAY WE GO
	SUBTTL	PRINT GENERAL SYSTEM STATUS

TYMTIS:	SKIPE	TROEXT		;/EXTRA FLAGGED??
	TRO	F1,F1.EXT	;YES--SET IT IN
	SKIPN	DISPLA		;ARE WE A DISPLAY?
	JRST	.+5		;NO
	MOVEI	CH,HOMEUP
	PUSHJ	P,TYO
	MOVEI	CH,ERASE
	PUSHJ	P,TYO		;HOME UP AND ERASE SCREEN
GODISP:	IFG	FTVERS,<
	TRNE	F1,F1.VER	;VERSION ASKED FOR??
	PUSHJ	P,GIVER		;YES-GIVE IT AWAY
>
IFG FTAPR,<
	TRNE	F1,F1.APR	;WANT APR SERIAL NO.?
	PUSHJ	P,GIVAPR	;YES
>
	SKIPE	NOSPIT		;NOSKIP - SET NO HEADING MODE
	TLO	F,FL.NOH
	TRNE	F1,F1.GEN!F1.NON
	JRST	TYMSIT
	SKIPE	NOHEAD		;IF NO SKIP NO FANCY HEADING
	TLO	F,FL.NOH
	TRNN	F1,F1.JBS!F1.SHR
	SKIPE	JOBTBL		;IF JOB TBL = 0 THEN NO JOB HDN
	TLO	F,FL.NOH
	TLNE	F,FL.NOH	;HEADING?
	JRST	TYMTIT		;NO
TYMSIT:
	HRRZ	A,STATES	;REPORT LOGIN AVAILABILITY
	ANDI	A,600000	;CHECK SHUT STATUS
;CHECK SYSTEM UP/DOWN/SIDEWAYS
	MOVEI	M,[ASCIZ //]	;BLANK MES
	CAIN	A,400000	;SHUT ON ?
	MOVEI	M,[ASCIZ /SYSTEM SHUT
/]
	CAIN	A,600000	;SKIP IF NOT SUPER-SHUT
	MOVEI	M,[ASCIZ /SYSTEM SUPER-SHUT
/]
	PUSHJ	P,MSG		;TYPE MESSAGE
	HRRZ	A,STATES	;CHECK FOR CONTROLLED
	TRNN	A,%RSTIM	;THERE?
	JRST	NOTCON		;NO, NOT
; SYSTEM CONTROLLED - SAY SO
	MOVEI	M,[ASCIZ /System controlled/]
	PUSHJ	P,MSG
IFN FTTRUCTL,<
	MOVE	D,[SIXBIT /OPER/]	;SETUP TO CONVERT TIME
	SETZ	J,		;TO USER'S TIME ZONE.  MUST
	PUSHJ	P,LUDCHK	;READ LUD AND GET TIME ZONE OF
	JRST	NOTSTOP		;OPER WHICH IS ZONE OF SYSTEM.
	MOVE	C,[400000,,400000]	;ZONE CONVERSION WORD.
	LDB	A,[POINT 6,LASPRI,7]	;GET ZONE BITS FOR THE
	DPB	A,[POINT 6,C,17]	;TIME CONVERSION WORD.
	SKIPN	A,%TRUBUFF+2	;GET FINISH TIME
	JRST	NOTSTOP		;NOPE..
	MOVEI	M,[ASCIZ / until /]
	PUSHJ	P,MSG		;SAY UNTIL
	MOVE	B,A		;SET UP TO DO TIME ZONE
	IMULI	B,^D2160	;CONVERT TO JIFFIES.
	MOVE	A,DATE		;CONVERSION TO USER'S TIME ZONE.
	MOVE	D,[A]
	DATUUO	D,		;DO IT!
	JFCL
	IDIVI	B,^D216000	;GET FIRST PART
	MOVE	N,B		;GET FIRST NO.
	PUSHJ	P,RDX10		;PRINT IT
	MOVEI	CH,":"
	PUSHJ	P,TYO		;TYPE THE :
	ADDI    C,1
	IDIVI   C,^D2160        ;MINUTES
	MOVE    N,C             ;READY FOR PUSH TO OUTPUT STRING
	PUSHJ	P,RDX10		;PRINT IT
	SKIPN	N,C		;IF B IS ZERO
	PUSHJ	P,RDX10	;PRINT ANOTHER ONE
NOTSTOP: MOVEI	M,[ASCIZ /
/]
	SKIPE	%TRUBUFF+4	;OVERRIDE SWITCH SET ?
	MOVEI	M,[ASCIZ / - Override switch set
/]
	PUSHJ	P,MSG
>
	

;SAY HELLO TO EVERYONE
NOTCON:	PUSHJ	P,THISIS	;SYSTAT...
	MOVE	A,XNLTIM	;# JIFFIES NULL JOB RAN
	GETTAB	A,
	JRST	TYMTIT		;FORGET IT
	MOVEI	M,[ASCIZ /Null time = /]
	PUSHJ	P,MSG
	PUSHJ	P,TCKTIS
	MOVEI	M,[ASCIZ /, Idle = /]
	PUSHJ	P,MSG
	MOVE	A,XNLTIM	;GET NULL TIME
	GETTAB	A,
	 SETZ	A,
	MOVE	C,XUPTIM	;GET UP TIME
	GETTAB	C,
	 SETZ	C,
	SETZB	B,D		;NO REMAINDERS
	IMULI	A,^D100		;COMPUTE PER CENT NULL TIME
	IDIV	A,C		;AND MAKE INTO PER CENT
	MOVE	N,A		;READY TO PRINT
	PUSHJ	P,RDX10
	MOVEI	M,[ASCIZ /% (Idle time per MIN. = /]
	PUSHJ	P,MSG
	MOVE	A,XNLMIN	;NULL TIME PER MIN
	GETTAB	A,
	 SETZ	A,
	IDIVI	A,^D36		;COMPUTE % PER MIN
	MOVE	N,A
	ANDI	N,177
	PUSHJ	P,RDX10
	MOVEI	M,[ASCIZ /%)
/]
	PUSHJ	P,MSG
TYMTIT:	SETZB	N,B		;COUNT JOBS AND LOGGED IN JOBS
	SETZB	C,D		;AND DETACHED JOBS
	MOVE	J,JOBN

CTJOB:	SOJLE	J,CTJOB1	;COUNT, PRINT IF DONE
	MOVE	A,@.STS
	TLNN	A,JNA		;SEE IF JOB NUMBER ASSIGNED
	JRST	CTJOB		;NO--DON'T COUNT
	AOS	N		;YES
	SKIPN	@.PPN		;IF PPN ZERO DONT COUNT DET
	JRST	CTJOB
	TLNN	A,JLOG		;SEE IF LOGGED IN
	AOS	B		;NO-COUNT
	MOVE	A,@.TTY
	TLNN	A,-1		;SEE IF DETACHED
	AOS	C		;YES
	JRST	CTJOB		;LOOP


;IF FOR SOME REASON NO HEADING IS TO BE GIVEN
;THE FOR GOD'S SAKE DONT
CTJOB1:	MOVEM	N,NUMJOB	;SAVE NO. OF ACTIVE JOBS
	TRNE	F1,F1.GEN!F1.NON
	JRST	CTJOB2
	TLNE	F,FL.NOH
	JRST	SYS4A

CTJOB2:	PUSH	P,N		;SAVE N.
	PUSHJ	P,RDX10	;PRINT NUMBER OF JOBS IN USE
	MOVEI	M,[ASCIZ / jobs in use out of /]
	MOVE	N,JOBN		;PRINT NO. IN SYSTEM
	SUBI	N,1		;ALLOW FOR NULL JOB
	PUSHJ	P,MSGDEC
	MOVEI	CH," ."
	POP	P,M		;GET BACK JOBS IN USE
IFN FT2MUCH,<
; PRINT ! IF (JOBN-10) LT M
	MOVE	N,JOBN		;GET MAX. JOB N.
		SM		;JOBN-USEDJOBS= # FREE
	CAIG	N,^D10		;AT LEAST 10 JOBS FREE?
	MOVEI	CH,"!"		;NO, PRINT ! (FULL!) >
	PUSHJ	P,TYO

PRDET:	MOVE	N,C		;NO DETACHED
	MOVEI	M,[ASCIZ /  /]
	JUMPE	C,PRNOT
	PUSHJ	P,MSGDEC	;TYPE SPACES AND MESSAGE
	MOVEI	M,[ASCIZ / detached/]
	PUSHJ	P,MSG

PRNOT:	MOVEI	M,[ASCIZ /, /]
	JUMPE	C,.+2
	MOVEI	M,[ASCIZ /  /]
	SKIPN	N,B
	JRST	.+4
	PUSHJ	P,MSGDEC
	MOVEI	M,[ASCIZ / not logged in/]
	PUSHJ	P,MSG
	PUSHJ	P,CRLF
	SUBTTL	PRINT JOB HEADING

SSTATS:	TRNE	F1,F1.GEN
	MOVE	WD,HEDFLG	;SET SILENCE IS GOLDEN FLAG
	SKIPE	NOHEAD		;SKIP IF NO HEADINGS
	JRST	SYS4A		;OK-SKIP

;OUTPUT JOB HEADINGS (YEH, YOU WISH)

DEFINE .HEAD(MESSAGE,LENGTH,BITS)<
	MOVEI	M,[ASCIZ /MESSAGE/]
	TLNN	F1,BITS
	JRST	.+4
	MOVEI	CH,LENGTH
	PUSHJ	P,FIELD
	PUSHJ	P,MSG
>; MACRO TO OUTPUT HEADINGS IN FIELD

	TLNE	F1,F1.EVN	;ANYTHING TYPE BEFORE HEADINGS?
	PUSHJ	P,CRLF		;YES, TYPE C.R.

	PUSHJ	P,CLRFLG	;CLEAR FIELD WIDTH FLAGS

	.HEAD	<JOB>,WD.JOB,F1.JOB
	.HEAD	<    PPN>,WD.PPN,F1.PPN
	.HEAD	< TYMNET>,WD.TYM,F1.TYM
	.HEAD	<  TTY>,WD.TTY,F1.TTY
	.HEAD	<PROG>,WD.PRG,F1.PRG
	.HEAD	<LO+HI(P)>,WD.SIZ,F1.SIZ
	.HEAD	<STATE>,WD.STT,F1.STT
IFN FTDSIO,<
	.HEAD	<DSKIO>,WD.DIO,F1.DIO>
IFN FTCHIO,<
	.HEAD	<CHARIO>,WD.CIO,F1.CIO>
IFN FTUSIO,<
	.HEAD	<USETIO >,WD.UIO,F1.UIO>
	.HEAD	<     TRU>,WD.TRU,F1.TRU
IFN FTCONN,<
	.HEAD	< CONNECT>,WD.CON,F1.CON>
	.HEAD	  <USER NAME>,WD.WHO,F1.WHO
IFN FTFROM,<
	.HEAD	<PROG OWNER >,WD.FRM,F1.FRM>
	.HEAD	< LICENSE>,WD.LIC,F1.LIC

	TLNE	F1,F1.ALL	;ANY LH BITS(HEADINGS OUTPUT?)
	PUSHJ	P,CRLF		;YES, TYPE C.R. AS HEADING

SYS4A:	MOVN	J,JOBN
	HRLZS	J
	SETZM	CORUSE		;CLEAR TOTAL VIRT. CORE USED
	SETZM	DSKUSE		;CLEAR TOTAL SWAPPING SPACE USED
	SETZM	ACTUSE		;CLEAR COUNT OF ACTIVE SWAPPING SPACE USED
	SETZM	LOWUSE		;CLEAR COUNT OF LOW SEGMENT SIZES
	SETZM	PTYS		;CLEAR COUNT OF PTY JOBS
	SETZM	SEGFLG		;CLEAR SEGMENT FLAG
	TRZ	F,FLGBTS		;CLEAR FLAG BITS
	SUBTTL	PRINT JOB STATUS

SYSL1:	SKIPN	JOBTBL(J)	;SKIP IF JOB OK
	JRST	SETPRG		;SET STATUS INFO.
	HRRZ	JS,J
	JUMPLE	JS,DUNJOB	;IGNORE JOBS <=0
	SKIPN	@.PPN		;IF PPN BLANK NEXT JOB PLEASE
	JRST	DUNJOB		;NOPE- NEXT
	PUSHJ	P,CLRFLG	;CLEAR FIELD SETTINGS
	MOVE	JS,@.STS	;GET JOB STATUS INTO (JS)
	TLNN	JS,JNA		;IS THE JOB ASSIGNED?
	JRST	DUNJOB		;NO, FORGET THIS JOB
	TLO	F,FL.DTJ
	MOVE	A,@.TTY		;GET TTY NAME
	TLNN	A,-1		;TEST FOR DETACHED
	TLOA	A,(SIXBIT /DET/) ;YES
	TLZ	F,FL.DTJ	;YES.SET NOT DETACHED
	MOVE	A,@.PPN		;FETCH PPN OF JOB
	PUSHJ	P,NOWHO		;PRINT *'S OR PRJPRG DEPENDING UPON GODLINESS
	MOVEM	A,@.PPN		;STORE IN CASE WIPEOUT
	TRO	F,FR.OVR
	CAME	A,[-1]		;HIDDEN--CLEAR
	CAIGE	N,^D100
	TRZ	F,FR.OVR
	TLNE	A,7B20
	TRNN	A,7B20
	TRZ	F,FR.OVR
	SUBTTL	PRINT JOB STATUS -- CALL ROUTINES

; MACRO: .PLINE(<LINE NAME>)
; WILL CHECK F1.NAME IN (F1) AND IF SET CALLS %NAME
; ELSE SETS FL.HUSH AND THEN CALLS %NAME
DEFINE .PLINE(NAME)<
	TLNN	F1,F1.'NAME	;IS THIS BIT SET ?
	TLO	F,FL.HUSH	;NO, TURN OFF PRINTING
	PUSHJ	P,%'NAME	;CALL THE OUTPUT ROUTINE
	TLZ	F,FL.HUSH	;TURN PRINTING BACK ON>

	.PLINE	<JOB>
	.PLINE	<PPN>
	.PLINE	<TYM>
	.PLINE	<TTY>
	.PLINE	<PRG>
	.PLINE	<SIZ>
	.PLINE	<STT>
IFN FTDSIO,<.PLINE	<DIO>>
IFN FTCHIO,<.PLINE	<CIO>>
IFN FTUSIO,<.PLINE	<UIO>>
	.PLINE	<TRU>
IFN FTCONN,<.PLINE	<CON>>
	.PLINE	<WHO>
IFN FTFROM,<.PLINE	<FRM>>
	.PLINE	<LIC>

	JRST	DOFLGS		;AND FINISH UP THIS JOB

;HERE WHEN JOBTBL(J) IS NOT OKAY BUT STATISTICS MUST
;BE GRABBED.  SET FL.HUSH AND CALL %JOB, %SIZ AND %STT.
SETPRG:	TLO	F,FL.HUSH	;SET HUSH FLAG
	PUSHJ	P,%JOB		;CALL JOB COMPUTE ROUTINE
	PUSHJ	P,%SIZ		;CALL SIZE COMPUTE ROUTINE
	PUSHJ	P,%STT		;CALL STATE ROUTINE
	TLZ	F,FL.HUSH	;RESET HUSH BIT
	JRST	DUNJOB		;AND FINISH UP THIS JOB
	SUBTTL	PRINT FLAGS FOR JOB

DOFLGS:	TLZ	WD,SIGN		;ON PRINTING - ON FASTER!
	MOVE	C,[POINT 6,A]	;SET-UP POINTER FOR FLAGS
	MOVEI	A,0		;CLEAR FLAGS
IFN FTTRUCTL,<
	MOVE	B,STATES	;CHECK FOR CONTROLLED TIME
	TRNN	B,%RSTIM	;CONTROLLED TIME ?
	JRST	NOCONT		;NOPE, FORGET THIS DISPLAY
	MOVE	B,LASPRV	;LAST LUD WORD 2 FOR USER
	TLNN	B,%CONME	;CONTROLLED BIT ?
	JRST	NOCONT		;NOPE, FORGET THIS LUSER
	MOVEI	M,(SIXBIT/  !/)	;USER IS CONTROLLED
	IDPB	M,C		;PUT CHAR OUT THERE
	TRO	F,FL.BANG	;SET THE FLAG
NOCONT:;>
	MOVE	B,@.PRV		;GET JBTPRV CELL
; CHECK FOR MAIL WAITING BIT SET
	MOVEI	M,(SIXBIT/  */)	;GET * READY
	TRNN	B,%MAILQ	;IS THE BIT SET 
	JRST	SYSNOM		;NO, SORRY CHARLIE.
	IDPB	M,C		;YES, PUT OUT THE CHAR
	TRO	F,FL.STAR	;AND SET THE * OUTPUT FLAG
SYSNOM:;
IFN FTPLUS,<
; CHECK FOR A TYMSHARE LUSER
	MOVEI	M,(SIXBIT/  +/)	;GET + SIGN READY
	TRNN	B,%TYMLC	;TYMSHAR BIT SET?
	JRST	SYSLTP		;NOT SET, 4 GET IT
	IDPB	M,C		;PUT OUT THE + SIGN
	TRO	F,FL.PLUS	;SET PLUS SIGN OUTPUT FLAG
SYSLTP:>
; CHECK FOR RUN ONLY PROGRAM
	MOVEI	M,(SIXBIT/  $/)	;GET $ READY
	TRNN	B,400000	;RUN ONLY BIT
	JRST	SYSLXG		;NOT SET
	TRO	F,FL.DOL
	IDPB	M,C
SYSLXG:	MOVE	B,@.STS		;GET JOB STATUS
SYSLKX:	SKIPG	B,@.SGN		;DOES JOB HAVE A HISEG?
	JRST	SYSL1E		;NO
	TLO	F,FL.HGH	;SET HISEGS IN USE FLAG
	PUSH	P,J		;SAVE J
	MOVE	J,B
	PUSH	P,A		;SAVE A
	MOVE	A,B
	SUB	A,JOBN
	AOS	@.SEGCT		;INCREMENT HI SEG USE COUNT
	POP	P,A		;RESTORE A
	SKIPE	B,@.PRG		;AN OBSOLETED SEGMENT?
	JRST	SYSL1A		;NO-CHECK IF IT'S A NON CUSP HISEG
	MOVE	B,@.STS
	TLNN	B,SHRSEG	;IS IT SHARABLE?
	JRST	SYSL1B		;NO-MUST BE PRIVATE
	MOVEI	B,(SIXBIT /  @/)
	IDPB	B,C		;PUT FLAG AWAY
	TRO	F,FL.NST	;YES-SET @ FLAG
	JRST	SYSL1B		;PRINT @

SYSL1A:	SKIPN	B,SYSTAP	;SEE IF SYSTEM TAPE IS NOT DISK
	JRST	SYSL1M		;IS DISK--CHECK PPN
	CAME	B,@.PPN		;CHECK LEV.C DEVICE NAME
	CAMN	B,@.DEV		;OR LEVEL D DEVICE NAME
	JRST	SYSL1B		;IS SYS
	JRST	SYSL1N		;IS NOT SYS
SYSL1M:	MOVE	B,@.PPN		;GET HISEG OWNER
	CAMN	B,SYSPPN	;IS IT A CUSP HISEG?
	JRST	SYSL1B		;YES-DON'T PRINT ANYTHING
SYSL1N:	MOVEI	B,(SIXBIT /  #/)  ;PREPARE TO FLAG JOB WITH #
	IDPB	B,C		;PUT FLAG AWAY
	TRO	F,FL.NUM	;SET # FLAG
SYSL1B:	POP	P,J		;RESTORE J & A
SYSL1E:	JUMPL	C,RET2		;IF NO FLAGS, JUMP
	PUSHJ	P,SPACE		;PRINT A SPACE
	PUSHJ	P,SIXBP		;PRINT @ OR #
RET2:	PUSHJ	P,CRLF
DUNJOB:	AOBJN	J,SYSL1

;IF SHORT JOB SW (RH=F1.SHR)
	TRNE	F1,F1.SHR	;CHECK TO SEE IF A CHRONIC
	JRST	FINIS		;MIKE GEARY, IF SO, QUIT.
;IF SINGL. USER THEN NO FLAG GARBAGE
	SKIPE	NOHEAD		;NOSKIP IF SINGL.JOB ACTION
	JRST	DONJOB		;ALL DONE

IFN FTPLUS,<
; CHECK FOR TYMSHAR USER FLAGE (+)
	MOVEI	M,[ASCIZ /+ means TYMSHARE inhouse user
/]
	TRNE	F,FL.PLUS	;IS THE + BIT SET ?
	PUSHJ	P,MSG		;YES, TYPE MESSAGE
>
	MOVEI	M,[ASCIZ /* means MAIL WAITING message pending
/]
	TRNE	F,FL.STAR	;IS THE MESSAGE FLAGGED
	PUSHJ	P,MSG		;YES, TYPE IT

	MOVEI	M,[ASCIZ /$ means RUN ONLY program
/]
	TRNE	F,FL.DOL
	PUSHJ	P,MSG
	MOVEI	M,[ASCIZ /@ means superseded Hi-Seg
/]
	TRNE	F,FL.NST
	PUSHJ	P,MSG
	MOVEI	M,[ASCIZ /# means non-system Hi-Seg
/]
	TRNE	F,FL.NUM
	PUSHJ	P,MSG

IFN FTTRUCTL,<
	MOVEI	M,[ASCIZ /! means controlled user
/]
	TRNE	F,FL.BANG	;IS HE CONTROLLED 
	PUSHJ	P,MSG		;YES, SAY SO.
>
	SUBTTL	PRINT REMAINING SELECTIVE DISPLAYS

DONJOB:	SETZ	WD,		;RESET FAKE NO PRINT FLAG

; FLAGS WHICH WE MUST LEARN TO LIVE BY:
; NOHEAD ::= 0  IF NO SELECTIVE SEARCHES HAVE BEEN ASKED FOR
;        ::= -1 IF A SELECTIVE SEARCH HAS BEEN ASKED FOR
; JOBTBL ::= 0 A JOB IS GOING TO BE PUT OUT
;        ::= -1 NO JOBS ARE GOING TO BE PUT OUT
DEFINE .PDISP(ROUTINE,BITS)<
	TLO	F,FL.HUSH	;PREPARE TO HUSH UP
	TRNE	F1,F1.'BITS	;IS THIS DISPLAY ASKED FOR ?
	TLZ	F,FL.HUSH	;YES, TURN ON PRINTING AGAIN
	PUSHJ	P,ROUTINE	;CALL THE ROUTINE
	TLZ	F,FL.HUSH	;AND TURN ON PRINTING>

; FIRST, DECIDE IF A HIGH SEG TABLE IS TO BE LISTED
; FL.HGH (LH F) WILL BE SET IF ANY HIGH SEGS MARKED IN USE
; HIGH SEG TABLE IS OUTPUT ONLY IF (A) NO SELECTIVE SEARCHES
; HAVE BEEN ASKED FOR, (B) F1.SHR AND F1.JBS ARE OFF IN
; RH OF F1.
	SKIPN	NOHEAD		;IF SKIP, NO HIGH SEG TABLE
	TLNN	F,FL.HGH	;NOSKIP IF NO HIGH SEGS IN USE
	TLO	F,FL.HUSH	;TURN OFF PRINTING
	PUSHJ	P,HGHSTS	;PRINT HIGH SEG TABLE
	TLZ	F,FL.HUSH	;TURN ON PRINTING

; NOW, DECIDE IF A DORMANT SEG TABLE IS TO BE LISTED
; F1.DRM MUST BE SET
	.PDISP	<DORMNT>,<DRM>	;CALL ONLY IF BITS SET

; NOW, SYSTEM PERFORMANCE STATISTICS
; IF F1.GEN, F1.SPF OR F1.NON ARE SET, TYPE MEM UTILIZATION
; OTHERWIZE, IF JOBTBL#0 OR FL.NOH IS SET, DONT
	TRNE	F1,F1.SPF!F1.GEN!F1.NON ; NOSKIP IF OUTPUT
	JRST	GVSTS		;GIVE STATISTICS
	SKIPN	NOHEAD		;SKIP IF A SELECTIVE SEARCH
	SKIPE	JOBTBL		;SKIP IF A JOB TO BE OUTPUT
	TLO	F,FL.HUSH	;TURN OFF PRINTING
GVSTS:	PUSHJ	P,GIVSTAT	;GIVE SYSTEM PERFORMANCE
	TLZ	F,FL.HUSH	;TURN ON PRINTING

; NOW, OPEN FILE STATISTICS
; IF NOHEAD#0 (JOB ASKED FOR) AND FL.EXT IS SET  THEN OUTPUT FILE STUFF
; OR IF F1.FIL OR F1.NON IS SET, OUTPUT FILE STUFF
	SKIPE	NOHEAD		;SKIP IF NOT OUTPUTTING HERE
	TRNN	F1,F1.EXT	;SKIP IF OUTPUTTING
	JRST	.+2		;NOT OUTPUTTING
	JRST	.+3		;WE ARE OUTPUTTING
	TRNN	F1,F1.FIL!F1.NON;SKIP IF NOT OUTPUTTING
	TLO	F,FL.HUSH	;TURN OFF PRINTING
	PUSHJ	P,OPNFIL	;TYPE OPEN FILE STUFF
	TLZ	F,FL.HUSH	;TURN PRINTING BACK ON

; NOW, OUTPUT BUSY DEVICE STATUS
; IF NOHEAD#0 THEN OUTPUT
; IF F1.DEV OF F1.NON SET THEN OUTPUT
	SKIPN	NOHEAD		;SKIP IF OUTPUTTING
	TRNE	F1,F1.DEV!F1.NON;SKIP IF NOT OUTPUTTING
	JRST	.+2		;WE ARE OUTPUTTING
	TLO	F,FL.HUSH	;TURN OFF PRINTING
	PUSHJ	P,DEVQ		;OUTPUT DEVICE STUFF
	TLZ	F,FL.HUSH	;TURN ON PRINTING

; NOW, OUTPUT FILE STRUCTURE STATUS
; F1.GEN OR F1.STR OR F1.NON MUST BE SET
	.PDISP	<FS>,<GEN!F1.STR!F1.NON>

IFN FTRPS,<
; NOW, OUTPUT RPS STATISTICS
	.PDISP	<GIVRPS>,<RPS!F1.NON>
>

; NOW, OUTPUT NON DISK ERROR REPORT
; F1.ERR OR F1.NON MUST BE SET
	.PDISP	<ERREPT>,<ERR!F1.NON>

; NOW, OUTPUT DISK PERFORMANCE
; F1.DSK OR F1.NON MUST BE SET
	.PDISP	<DP>,<DSK!F1.NON>

; NOW, OUTPUT SWAPPING STATISTICS
; F1.SWP OR F1.NON MUST BE SET
;	.PDISP	<SW>,<SWP!F1.NON>

;*************************************************
;*  ALL DONE - DO CLEANUP THING                  *
;*************************************************

; WHEN ANY COMMAND ETC. WANTS TO EXIT, DO
;A JUMP TO 'FINIS' -- THIS WILL CLEAN UP THE MESS
;HERE ON END OF RUN
FINIS:	PUSHJ	P,TYOCLR	;CAUSE TYO TO DUMP BUFFERS
	OUTPUT	TTY,		;EMPTY TTY
	SKIPN	CONSWT
	JRST	FINIS.
        MOVE    C,CN.TIM        ;TIME SPECIFIED?
        SLEEP   C,              ;SLEEP TIME
        MOVEI   M,[ASCIZ /----------------------------------------------------/]
        PUSHJ   P,MSG
	MOVE	C,LASJBF
	MOVEM	C,JOBFF		;RESET JOBFF
	PUSHJ	P,GA		;ANOTHER DUMP PLEASE
	SKIPE	DISPLA		;SKIP IF NOT A DISPLAY
	JRST	FINHAK
	SKIPE	LPTCSW		;TO LINE PRINTER ??
	JRST	FILPTS		;YES, SLEEP FOR 10 SECS INSTEAD
	MOVE	C,[40,,^D20*^D1000]
	HIBER	C,
        JFCL                    ;HIBER SKIPS
	PUSHJ	P,CRLF
	JRST	FINHK
; HERE WHEN LPT CONTINUOUS - SLEEP FOR 10 SECS
FILPTS:	MOVEI	C,^D10		;10 SECONDS
	SLEEP	C,		;SLEEP
FINHAK:	MOVEI	CH,ERASE
	PUSHJ	P,TYO
	MOVEI	CH,HOMEUP
	PUSHJ	P,TYO
	MOVEI	CH,177
	PUSHJ	P,TYO
FINHK:	SETZM	DDBTBL		;RESET FILE OPEN TABLE
	MOVE	C,[DDBTBL,,DDBTBL+1]	;BLT WORD
	BLT	C,EDDBTBL	;ZERO IT
;  CHECK SEARCH KEYS AND SET UP JOBTBL AGAIN, IF SEARCHING
;  ON A KEY.  DO NOT RESET IF JOB # USED.
	TLNN	F,FL.PRG	;CHECK FOR PROGRAM NAME KEY.
	JRST	KEYCHK		;NOPE!
	MOVE	A,KY.PRG	;RETRIEVE KEY AND
	MOVEI	D,FNDPRG	;DO THE JOB SEARCH.
	JRST	KYSRCH		;BACK THROUGH BIG LOOP.
KEYCHK:	TLNN	F,FL.PPN	;PPN
	JRST	KEYCH1
	MOVE	A,KY.PPN
	MOVEI	D,FNDPPN
	JRST	KYSRCH
KEYCH1:	TLNN	F,FL.TTN	;TTY # SEARCH.
	JRST	KEYCH2
	MOVE	A,KY.TTN
	MOVEI	D,FNDTTN
	JRST	KYSRCH
KEYCH2:	TLNN	F,FL.USN	;USER NAME.
	JRST	GODISP		;NO SEARCH KEYS (JOB # USED).
	MOVE	A,KY.USN
	MOVE	B,KY.USN+1
	MOVEI	D,FNDUSN
KYSRCH:	MOVEI	WD,MX.JOB	;RESET THE WHOLE
	SETZM	JOBTBL(WD)	;JOB TABLE AGAIN.
	SOJG	WD,.-1
	PUSHJ	P,@D		;SEARCH FOR THE GIVEN KEY.
	JRST	GODISP		;BACK THROUGH BIG LOOP.
FINIS.:	CLOSE	TTY,

HACKQ:	IFN HACKSW,<
	IFL	HACKSW,<
	MOVE	A,XAPRSN	;GET SERIAL NUMBER
	GETTAB	A,		; OF THIS MACHINE
	 SETZ	A,
	MOVSI	B,-LENHAQ	;SEARCH SPECIAL TABLE
HAQ1:	MOVE	C,HAQAPR(B)	; OF MACHINES TO BE
	CAME	A,C		; HACKED
	AOBJN	B,HAQ1		;LOOP
	JUMPGE	B,EXIT.		;EXIT. IF NOT THIS MACHINE
>
	SETZM	WD		;CLEAR WD IN CASE -VE SO PRINTING WILL HAPPEN
	MOVE	A,DATE
	IDIVI	A,^D31*^D12	;GET MODULO YEAR
	MOVEM	B,DATE
	MOVSI	J,-HAKLEN
	JUMPE	J,EXIT.		;GO AWAY IF EMPTY TABLE
HAKLUP:	MOVE	A,HAKTAB(J)
	HLRZ	B,A		;THE DATE FROM TABLE
	ANDI	B,7777		;JUST DATE CODE
	CAME	B,DATE		;TODAY?
	JRST	HAKNXT		;NO
	PUSHJ	P,CRLF2
	MOVEI	M,BMSG
	SKIPL	A
	PUSHJ	P,MSG
	HRRZ	M,A
	PUSHJ	P,MSG
	PUSHJ	P,CRLF
HAKNXT:	AOBJN	J,HAKLUP
>
	JRST	EXIT.

	IFL	HACKSW,<

;THIS IS A LIST OF THE PDP-10 APR SERIAL NO.S THAT WILL
;BE HACKED AT IF :HACKSW: IS -1

HAQAPR:	DEC	188		;APR SERIAL NOS TO HACK AT
LENHAQ==.-HAQAPR
>
NOCOR:	BOMB	(CORE UUO failed - can not build tables)
EXIT.:	CLOSE	TTY,		;CLOSE TTY IN CASE OF ^O
	JUMPL	F,KILL		;BREAK CH. FOUND-EXIT

;IN KILLER LOOP TEST FOR INP BUF EMPTY
;IF IT IS THEN KILL ANYWAY SO TTY DOESNT GET HUNG UP
	SKPINC			;SKIP IF INPUT WAITING
	JRST	KILL		;NOT-FORGET IT
	PUSHJ	P,GETCHR		;GOBBLE LEFTOVER CHRS.
	JRST	.+2
	JRST	.-2
KILL:	RELEASE	TTY,
	JRST	ZEROUT		;AND EXIT

; NOTE**** EXIT. KILL HACKQ, ETC SHOULD ALL NOT BE
; CALLED.  A LEGAL EXIT FROM SYSTAT IS A JUMP TO 'FINIS'

;HERE ON FATAL ERROR
BOMB.:	SKIPE	JOBJDA+TTY	;SEE IF TTY OPENED
	OUTPUT	TTY,		;YES, CLEAR IT OUT FIRST
	OUTSTR	[ASCIZ /
? SYSTAT error: /]
	OUTSTR	(M)
	OUTSTR	[ASCIZ /
Please report this problem to Operations or SQA.
/]
	CLRBFI
	JRST	ZEROUT		;FORGET HACKS

;  CONSTANTS

HEDFLG:	123560,,065321		;NOSPEACH WHEN PUT INTO "WD"
PDP:	IOWD	LN.PDL,PDL	;POINTER TO PUSH DOWN LIST
XJBPPN:	XWD	0,2	;JOB'S PPN (PRJPRG)
XNLMIN:	XWD	35,12	;NO. JIFFIES NULL JOB RAN IN LAST MINUTE
XNLTIM:	XWD	34,12	;NO. JIFFIES NULL JOB HAS RUN
XJBLIC:	XWD	0,-20	;JBTLIC TABLE
XUPTIM:	XWD	15,12	;JIFFIES SYSTEM HAS BEEN UP
SIGN=400000	;SIGN BIT.

	END	SYSTAT
 m>0pF