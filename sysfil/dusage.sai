


BEGIN "DUSAGE"

  REQUIRE ('2 lsh 18) lor 0 VERSION;
  REQUIRE "(SAILIB)SAIL.DEF" SOURCE!FILE;
  DEFINE DEBUG = {false};
  IFCR DEBUG THENC
    REQUIRE "(SYS)BAIPD8.REL" LOAD!MODULE;
    EXTERNAL PROCEDURE BAIL;
  ENDC
  !GET!MODULE(EXTEND);
  DEFINE count = '200;

  REQUIRE "(SAILIB)UUOSYM.DEF" SOURCE!FILE;
  REQUIRE "(SAILIB)MFDSCN.REQ" SOURCE!FILE;
  REQUIRE "(SAILIB)DUL.REQ" SOURCE!FILE;
  REQUIRE "(SAILIB)CVPPN.REQ" SOURCE!FILE;
  REQUIRE "(SAILIB)DULWLD.REQ" SOURCE!FILE;
  REQUIRE "LIC.REQ" SOURCE!FILE;

  INTEGER chan1,chan2,brtab1,brtab2,brchr1,brchr2,#users,
    dateB,dateC,ovscan,oldfile,usegan,ganmask,gantest,ganflag,
    ictime,icdate,iptime,ipdate,msg;
  BOOLEAN eof,eof1,compflag,sizflag,txtflag,flag;
  STRING num,infile,inpt,line,usrnam,filnam,olddat,
    spdate,sptime,sortflag,reply;
  LABEL more, out;

  RECORD!CLASS users
    ( STRING uname; INTEGER uppn,usize,udate;
    RECORD!POINTER( users )next );
  RECORD!POINTER ( users ) users1,users2,users3,users4,userlist;

  RECORD!CLASS data
    ( INTEGER dppn,dsize;
    RECORD!POINTER( data )next);
  RECORD!POINTER ( data ) data1,data3,datalist;




  PRELOAD!WITH

"    The DUSAGE program contains a series of requests for user input.
    The requests are structured to accept responses, each consisting
    of a keyword, CR, '?', or 'HELP' :
     
           Request for user input
           ( keyword, CR, '?', or 'HELP' )[ default response ]

    Left-oriented substrings of the acceptable response are permissable. 
    Example:  H, HE, HEL, HELP all are acceptable for the response 'HELP'.
    The default response, CR, denotes the keyword or action given in
    the square brackets.  A help message specific for each request will
    be available if requested by the user, following which the request is
    repeated.
", 
"    You may either report on all GANs, or on your GAN only.
",
"    If usernames is selected, a list containing one name per line will
    be read from the DUL and placed in the file, DUSAGE.TXT.  The
    diskusage option will be offered again after the file is created.
    If diskusage is chosen initially, a list of user names, either from 
    a file or from the DUL, will be placed in the file DUSAGE.RPT.  Disk
    storage data from the previous and from the current program run
    and access data also will appear in this report.
",
"    If requested, the list of usernames, one name per line, will be
    alphabetically sorted before being placed in the file, DUSAGE.TXT.
", 
"    A list of usernames from the DUL has been placed in the file,
    DUSAGE.TXT.  Do you wish to exit or to continue to get a disk usage
    report on users?
", 
"    The file, if specified, should contain one user name per line.  If
    no file name is supplied, DUSAGE will read from the DUL.  If the
    file specified is the current program version of DUSAGE.TXT, the
    user names will be taken from the DUL since this is quicker.  Finally,
    The prompt will be repeated if an illegal file name is supplied.
", 
"    The size option causes the report to be sorted by total disk 
    storage, with the largest first.  The user name option causes an 
    alphabetic sort on the user name.  
", 
"    When sorting by size, the report can restricted to the top N users.
", 
    "An 'old' file is one which has not been accessed after a given
    date.  A date should be entered here to request reporting of 'old'
    files and to define what an 'old' file is.  Note:  Specifying a
    date will require that the program perform additional work and will 
    require considerably longer time.
";

  STRING ARRAY HLPTXT[1:9];




  SIMPLE PROCEDURE Curdt (REFERENCE INTEGER time,date); 

  !  This procedure returns the current time and date in the user's;
  !  time zone.  "Time" is in seconds since midnight.  "Date' is in;
  !  DEC date format.						   ;

    BEGIN
      INTEGER time1;
      time1 := calli(0,'22); date := calli(0,'14); time := calli(0,'22);
      IF time < time1 THEN date := calli(0,'14); time := time/60;
      RETURN;
    END;   


  SIMPLE STRING PROCEDURE pr!time (INTEGER time);

  !  This procedure converts "time" expressed in seconds since      ;
  !  midnight into a printable string expressint the time in hours  ;
  !  and minutes.						    ;

    BEGIN
      INTEGER mins,hrs;  STRING tmpstr;
      mins := time/60;  hrs := mins/60;  mins :=  mins-(hrs*60);  
      setformat(-2,0);  tmpstr := cvs(hrs);
      tmpstr := tmpstr&":"&cvs(mins);  setformat(0,0);
      RETURN (tmpstr);
    END;


  SIMPLE STRING PROCEDURE pr!date (INTEGER date);
 
  !  This procedure converts "date" which should be in DEC date     ;
  !  format to a printable string of the form DD MON YR.            ;

    RETURN (stdate(date,'1031));


  SIMPLE STRING PROCEDURE Rpt.String( STRING str; INTEGER cnt );
    BEGIN
      STRING s; s := NULL;  
      WHILE cnt DO
	BEGIN
          s := s & str;
          cnt := cnt - 1;
        END;
      RETURN( s );
    END;
   



  SIMPLE BOOLEAN PROCEDURE Compare (STRING reply,command );

  !  This procedure returns true if reply matches or is a left-oriented ;
  !  substring of command, or if both reply and command are NULL strings ;

    BEGIN
      STRING sub;
      INTEGER len;
      IF ( LENGTH( command )) THEN          ! Command is not a CR;
        IF ( len := LENGTH( reply )) THEN   ! Reply is not a CR;
          BEGIN  
            sub := command[ 1 TO len  ];
            IF EQU( reply,sub ) THEN
              RETURN( true );
          END
        ELSE
          RETURN( false )
      ELSE                                  ! Command is a CR;
        IF NOT ( LENGTH( reply )) THEN
          RETURN( true );
    END;                


  SIMPLE BOOLEAN PROCEDURE Ask( STRING prmpt1,prmpt2,commd1,commd2;
    INTEGER helpmsg );

  !  Prmpt1 and prmpt2 together offer two keyword options, commd1,    ;
  !  and commd2, and the implied options, 'HELP' and CR.  The         ;
  !  procedure returns true when reply matches or is a left-oriented  ;
  !  substring of commd1, and false when it matches or is a left-     ;
  !  oriented substring of commd2, or is a CR.  When reply or         ;
  !  is 'HELP' a help message is printed and the procedure returns    ;
  !  false.                                                           ;

    BEGIN
      STRING reply;
      WHILE ( true ) DO
        BEGIN
          PRINT ( CRLF,prmpt1,CRLF,prmpt2 );
          IF NOT ( LENGTH ( reply := INCHWL )) OR ( Compare( reply,commd2 ))
            THEN RETURN ( false )
          ELSE
            IF ( Compare ( reply,"HELP" ) OR Compare( reply,"?" )) THEN
              PRINT ( CRLF,Hlptxt[ helpmsg ],CRLF)
            ELSE
              IF ( Compare ( reply,commd1 )) THEN
                RETURN ( true );
        END;
    END;  



integer
  Oper.License,			! License specified in the oper file ;
  Look.At;			! Which GAN to look at ;


! These are the possible values of "Look.At" above:
;

define
  UNDEFINED     = 0,
  THIS.GAN.ONLY = 1,
  ALL.GANS      = 2;

! Verify that the user has certain license. ;

simple integer procedure Verify.License (integer License);
begin "Verify.License"
  print(crlf);
  if (not Oper.License) then
    Oper.License _ Oper.Lic
      ;

  if (not Oper.License) then
    print(crlf);

  return(Oper.License land License);
end "Verify.License";


! Decide which GANs the user will look at. ;

procedure Decide.GANs;
begin "Decide.GANs"
  define
    exit  "<>" = <calli(0, '12)>,
    crlf2 "<>" = <crlf & crlf>;

  define
    TP =  !bit(21)	! Tymshare Personnel (in privilege word);,
    AS =  !bit(22)	! Account Supervisor (in privilege word);,
    RF =  !bit(32)	! Read Files         (in oper license word);,
    CS =  !bit(15)	! Customer Support   (in oper license word);;


  Oper.License _ 0;
  Look.At      _ UNDEFINED;

  if (TP land Get.Priv) then
  begin
    IF ( Ask( "Report on all GANs?",
      "( yes or no )[ no ] :   ","YES","NO", 2 )) THEN
      if ( Verify.License(RF lor CS)) then
        Look.At _ ALL.GANS;
  end;

  if (Look.At = UNDEFINED) then
    if ((AS land Get.Priv) or Verify.License(RF lor CS)) then
      Look.At _ THIS.GAN.ONLY
    else
      exit;
end "Decide.GANs";





    

  PROCEDURE SetUpRecord( INTEGER usrppn; STRING usrnam );

  !  PROCEDURE SetUpRecord puts a usernname and PPN into a record   ;
  !  structure and links it to the chain.			    ;

    BEGIN "SetUpRecord"
      users3 := NEW!RECORD( users );
      users:uname[users3] := usrnam;
      users:uppn[users3] := usrppn;
      #users := #users + 1;
      IF users1 NEQ NULL!RECORD THEN
        BEGIN
          users:next[users1] := users3;
          users1 := users3;
        END
      ELSE
        users1 := userlist := users3;
    END "SetUpRecord";



 PROCEDURE GetUserName( REFERENCE INTEGER chan,eof );

  !  PROCEDURE GetUserName gets a user name from the input file,    ;
  !  converts it to a PPN, and calls PROCEDURE SetUpRecord to put   ;
  !  them into a record structure.				    ;

    BEGIN "GetUserName"

      SETBREAK(brtab1 := GETBREAK, #LF,#FF&#CR,"ins");
      SETBREAK(brtab2 := GETBREAK, #SP&#HT, NULL, "xnr");
      line := INPUT(chan,brtab1);
      #users := 0;
      users1 := userlist := users3 := NULL!RECORD;
      WHILE NOT eof DO
        BEGIN
          SCAN( line,brtab2,brchr2 );
          SetUpRecord( CVPPN( line ),line);
          line := INPUT( chan,brtab1 );
        END;
      RELBREAK(brtab1);
      RELBREAK(brtab1);
      RELEASE(chan);
    END "GetUserName"; 



  
  
  PROCEDURE SortRecord( BOOLEAN sizflag );

  ! PROCEDURE SortRecord SORTS AN UNSORTED, LINKED RECORD LIST      ;
  ! THE POINTER TO THE UNSORTED LIST IS "USERS4", AND THE POINTER   ;
  ! TO THE SORTED LIST IS "USERLIST". 				    ;

    BEGIN "SortRecord"
      users4 := users:next[userlist];      
      users:next[userlist] := NULL!RECORD;
      WHILE users4 NEQ NULL!RECORD DO
        BEGIN 
          users1 := userlist;
          users2 := NULL!RECORD;
          users3 := users4;            ! CURRENT RECORD TO BE SORTED;
          users4 := users:next[users4];
          users:next[users3] := NULL!RECORD;
       
          WHILE true DO
            BEGIN "CompareLoop"
              compflag := (IF sizflag THEN (users:usize[users3] <
              users:usize[users1])  ELSE (CMPSTR(users:uname[users3],
              users:uname[users1]) > 0));
              IF compflag THEN
                BEGIN
                  users2 := users1;
                  IF users:next[users1] NEQ NULL!RECORD THEN
                    users1 := users:next[users1]
                  ELSE
                    DONE "CompareLoop";
                END
              ELSE
                DONE "CompareLoop";
            END "CompareLoop";
            IF users2 NEQ NULL!RECORD THEN
              BEGIN "InsertTheRecord"
                users:next[users2] := users3;
                IF users1 NEQ users2 THEN         
                  users:next[users3] := users1;
              END "InsertTheRecord"
            ELSE
              BEGIN "PutRecordAtFront"
                users:next[users3] := userlist;
                userlist := users3;
              END "PutRecordAtFront";
    END;
  END "SortRecord";





  PROCEDURE Proc( REFERENCE INTEGER ThisPPN; REFERENCE STRING ThisUser );

!   PROCEDURE Proc is passed to External Procedure DulWld            ;

    BEGIN "Proc"
      SetUpRecord( ThisPPN,ThisUser);
    END "Proc";



  PROCEDURE ReportNames( STRING sortflag );

!   PROCEDURE ReportName gets all the usernames in the DUL for the   ;
!   approved gan, performs a sort if requested, and creates a new    ;
!   file, DUSAGE.TXT, in which they are inserted, one name per line. ;

    BEGIN "ReportNames"
      #users := 0;
      users1 := users2 := users3 := userlist := NULL!RECORD;
      DulWld( !XWD( !LH(usegan),0 ), !XWD( ganflag,-1),Proc );
      IF ( LENGTH(sortflag) ) THEN
        SortRecord( sizflag :=0 );
      SETPRINT( "DUSAGE.TXT", "F");
      users1 := userlist;
      IF ( NULL!RECORD NEQ users1 ) THEN
        DO BEGIN "Namelist"
          PRINT( users:uname[ users1 ],CRLF );
          users1 := users:next[users1];
        END "Namelist"
        UNTIL ( NULL!RECORD = users1 );
      SETPRINT(NULL, "T" );
      PRINT( "DONE",CRLF );
    END "ReportNames";


  SIMPLE STRING PROCEDURE Blanks( INTEGER num );
    BEGIN "blanks"
      OWN STRING Blankstr;
      WHILE ( LENGTH( Blankstr ) < num ) DO
        Blankstr := Blankstr & "  " & Blankstr;
      RETURN( Blankstr[ 1 for num ]);
    END "blanks";


  STRING PROCEDURE Stringsz( STRING s );
    RETURN (( Blanks( 8 ) & s )[ inf - 8 to inf ] );


  SIMPLE STRING PROCEDURE Ctr.Txt (STRING Str; INTEGER Line.Len);
  BEGIN
    RETURN(Blanks((Line.Len - LENGTH(Str)) / 2) & Str);
  END;        




  PROCEDURE ReportUse(INTEGER numusers);

!   DUSAGE.DAT, the file containing user PPN's and the associated   ;  
! directory page sizes from the previous program run is read into   ;
! a record structure, "data", which is then used in the report.     ;
! A new file,DUSAGE.TMP, is created in which the current user PPN's ;
! and associated directory page sizes are stored.                   ;
!   Userlist points to the head of the sorted record list, users.   ;
! The Usage Report table is created from values taken from the      ;
! users and data record structures .  The new table overwrites the  ;
! previous one in DUSAGE.RPT.			                    ;
!   DUSAGE.DAT is destroyed and DUSAGE.TMP is renamed DUSAGE.DAT.   ;


    BEGIN "RecordRpt"
      INTEGER f1,f2,temp1,temp2,current,previous,difference,old,
        totcur,totpre,totdif,totold;
      OPEN(chan1 := GETCHAN,"dsk",'14,4,4,count,brchr1,eof := -1 );
        IF NOT eof THEN
          BEGIN
            LOOKUP(chan1,"DUSAGE.DAT",flag := -1 );
            IF NOT flag THEN 
              BEGIN
                sptime := pr!time(WORDIN(chan1));
                spdate := pr!date(WORDIN(chan1));             
                temp1 := WORDIN( chan1 );
                temp2 := WORDIN( chan1 );    
                WHILE NOT eof DO !  build the data record structure     ;
                  BEGIN          !  datalist points to the head, data3  ;
                                 !  points to the end, and data1 points ;
                                 !  to the current position             ;
                    data3 := NEW!RECORD( data );   
                    data:dppn[ data3 ] := temp1;
                    data:dsize[ data3 ] :=temp2;
                    IF data1 NEQ NULL!RECORD THEN
                      BEGIN
                        data:next[ data1 ] := data3;
                        data1 := data3;   
                      END
                    ELSE
                      data1 := datalist := data3;
                  temp1 := WORDIN( chan1 );
                  temp2 := WORDIN( chan1 );  
                END;
              END 
            ELSE
              sptime := spdate := NULL;
          END
        ELSE 
          USERERR( 0,1,"CANNOT INIT DISK CHANNEL, CANNOT GET 'DUSAGE.DAT'
            TO USE IN 'DUSAGE.RPT',WILL CONTINUE ANYWAY. ","CRLF" );




      OPEN( chan2 := GETCHAN,"dsk",'14,4,4,0,0,0 );
      ENTER( chan2,"DUSAGE.TMP",flag := -1 );
        IF  flag THEN
          PRINT( "CANNOT OPEN FILE : DUSAGE.TMP" );
      IF NOT( LENGTH( olddat )) THEN       
        olddat := "1 JAN 64";
      SETPRINT( "DUSAGE.RPT", "F" );   !  print table header;
      PRINT( CRLF,CRLF,Ctr.Txt( "DISK USAGE REPORT",70 ),CRLF );

      IF Look.At = THIS.GAN.ONLY THEN
        PRINT( Ctr.Txt( "Gan Number : " & cvos(!lh(usegan)), 70 ),CRLF,CRLF )
      ELSE IF Look.At = ALL.GANS THEN 
        PRINT( Ctr.Txt( "All Gans",70 ),CRLF,CRLF );

      PRINT( "Previous Run Date & Time : ",Stringsz( spdate ),"  ",
        Stringsz( sptime ),CRLF );
      PRINT( "Present  Run Date & Time : ",Stringsz( pr!date( icdate )),
        "  ",Stringsz( pr!time( ictime )),CRLF );
      PRINT( "Old File Date            : ",Stringsz( olddat ),CRLF );
      PRINT( "File Storage is Shown in Pages",CRLF,CRLF );
      PRINT( "    USER               CURRENT     PREVIOUS    ",
        "DIFFERENCE   OLD",CRLF );
      PRINT( Rpt.String( "-",70 ));
      GETFORMAT( f1,f2 );

      IF NOT ( numusers ) THEN
        numusers := #users;
      WORDOUT(chan2,ictime);    ! SAVE THE CURRENT TIME;
      WORDOUT(chan2,icdate);    ! SAVE THE CURRENT DATE;





      WHILE( #users NEQ 0 ) DO
        BEGIN "Create DUSAGE.DAT"
          WORDOUT( chan2,users:uppn[userlist] );
          WORDOUT( chan2,users:usize[userlist] );
          IF ( numusers > 0 ) THEN
            BEGIN "Build DUSAGE.RPT"
              usrnam := users:uname[userlist];    
              current := users:usize[userlist];
              old := users:udate[userlist]; 
              totcur := totcur + current;
              totold := totold + old;
              PRINT( CRLF, usrnam := 
                usrnam&Blanks(15)[1 FOR 15-LENGTH(usrnam)]);
              SETFORMAT( 12,0 );
              IF ( datalist NEQ NULL!RECORD ) THEN
                BEGIN
                  data1 := datalist;
                  WHILE( users:uppn[ userlist] NEQ data:dppn[ data1 ]) AND
                    ( data1 NEQ data3 ) DO
                    data1 := data:next[data1];   !  reset the pointer;
                  IF( EQU( users:uppn[ userlist ],data:dppn[ data1 ]))THEN
                    BEGIN
                      previous := data:dsize[ data1 ];
                      totpre := totpre + previous;
                      difference := current - previous;
                      totdif := totdif + difference;
                      PRINT( current,previous,difference,old );  
                    END
                  ELSE
                    PRINT( current,"        ----","        ----",old);
                END           ELSE
                PRINT( current,"        ----","        ----",old);
              numusers := numusers - 1;
            END "Build DUSAGE.RPT"; 
            userlist := users:next[ userlist ];
            #users := #users - 1;
        END "Create DUSAGE.DAT";
      PRINT( CRLF,(Rpt.String( "-",70 )));
      PRINT( CRLF, "TOTALS"&Blanks(15)[1 for 9],totcur,totpre,
        totdif,totold );
      SETFORMAT( f1,f2 );
      PRINT( CRLF,(Rpt.String( "-",70 )));
      RENAME( chan1,NULL,0,flag := -1 );
      RENAME( chan2,"DUSAGE.DAT",0,flag := -1 );
      RELEASE(chan2);
      PRINT(CRLF,CRLF);
      SETPRINT( NULL, "T" );
      PRINT( "DONE",CRLF );
    END "RecordRpt";




! PROCEDURES TO PASS TO MfdScn;
  
  BOOLEAN PROCEDURE WantUFD( REFERENCE INTEGER aun );

    BEGIN "WantUFD"  ! Find directory PPN which matches users PPN   ;
      users3 := userlist;     
      BEGIN
        IF( look.at = all.gans ) THEN
          usegan := aun;
            IF(( !LH(aun) = !LH( usegan ))
              AND ( !RH(aun)= !RH(users:uppn[users3])))
              THEN RETURN( true )
            ELSE
              WHILE(( users:next[users3]) NEQ NULL!RECORD ) DO
                BEGIN
                  users3 := users:next[users3];
                  IF(( !LH(aun) = !LH( usegan )) AND ( !RH(aun) =
                    !RH(users:uppn[users3]))) THEN
                    RETURN( true );
                END;
            RETURN( false );
      END;
    END "WantUFD";

  
  BOOLEAN PROCEDURE WantFile(REFERENCE INTEGER name, ext );
    BEGIN
      RETURN( true );
    END;



  
  PROCEDURE UfdProc( REFERENCE INTEGER chan; INTEGER ARRAY lkb );

  ! PROCEDURE UfdProc sets the allocated page size from the UFD.   ;
  ! Location !RBUSD contains the currently used page count while   ;
  ! the page count at the last LOGOUT can be read from !RBMXA.     ;
  ! This means that each file need not be read to get the total.   ;

    BEGIN
      If ( not dateB ) THEN
        users:usize[users3] := lkb[ !RBUSD ];
    END;


  
  PROCEDURE
    FileProc( REFERENCE INTEGER chan, countvar, breakvar, eofvar; 
      INTEGER ARRAY lkb);

  !  PROCEDURE FileProc supplies a user and a PPN to procedure SetUp;
  !  Record, if not available, and places page sizes and access     ;
  !  data in each corresponding users record structure.		    ;

    BEGIN "FileProc"
      users:usize[users3] := users:usize[users3] + lkb[ !RBALP ];
      IF ( lkb[!RBEXT] LAND '37777 ) < dateC THEN
	users:udate[users3] := users:udate[users3] + lkb[!RBALP];
    END "FileProc";




!  DUSAGE will create a file containing a list of user names,         ;
!  DUSAGE.TXT, and /or a diskusage report, DUSAGE.RPT, after          ;
!  checking user license and asking for a series of user inputs.      ;
!  The file, DUSAGE.DAT, is created to supply data to DUSAGE.RPT      ;
!  in the subsequent program run.                                     ;

IFCR DEBUG THENC BAIL; ENDC
  ttyup(true);
  curdt(ictime,icdate);
  PRINT(CRLF, "DUSAGE  v. ", Cvos( !lh(MEMORY[ '137 ]) ), ".",
	    Cvos( !rh(MEMORY[ '137 ]) ), CRLF);

  Ask( "Type ? or HELP for a help message",
    "( ?, help or CR )[ no help ] :   ","HELP","CR", 1 );
  Decide.GANs;
  UseGan := CALLI( !XWD( -1, !GTAUN ), calli!GETTAB );
  GanMask := CVSIX("######");		! Start with a full mask ;
  IF( look.at = this.gan.only ) THEN
    BEGIN
      ganflag := 0;
      GanTest := '77 lsh 30;		! Use this to test each field ;
      WHILE ( 0 = ( UseGan land GanTest )) DO
        BEGIN				! While no bits match ... do ;
          GanTest := GanTest lsh -6;	! Shift test mask ;
          GanMask := GanMask lsh -6		! Shift result mask ;
        END;				! GanMask := rightmost n #'s ;
    END
  ELSE
    ganflag := -1;                      !  look at all gans;

  IF( Ask( "What do you wish to report?",
    "( usernames or diskusage )[ diskusage ] :   ","USERNAMES",
      "DISKUSAGE", 3 )) THEN
    WHILE true DO
      BEGIN
        IF( Ask( "Sort the names?", 
          "( yes or no )[ no ] :   ","YES","NO", 4 )) THEN
          sortflag := "sort";
        PRINT( CRLF,"     Wait-----creating file DUSAGE.TXT-----" );
        ReportNames( sortflag );   
        txtflag := 1;
        IF NOT( Ask( "Get diskusage or exit?",
          "( diskusage or exit )[ exit ] :   ","DISKUSAGE",
          "EXIT", 5 )) THEN
          GO TO out
        ELSE
          DONE;
      END;




    WHILE true DO
      BEGIN
        PRINT( CRLF,"Give a file name for use in DUSAGE.RPT, if desired",
        CRLF,"( filename or CR )[ all names ] :   " );
        infile := INCHWL;
        IF Compare( infile,"HELP" ) OR Compare( infile,"?" ) THEN
          PRINT( CRLF,Hlptxt[ 6 ],CRLF)
        ELSE
             IF NOT( LENGTH( infile )) OR
            (( Compare( infile,"DUSAGE.TXT" )) AND ( txtflag )) then
            BEGIN
              #users := 0;
              users1 := users2 := users3 := userlist := NULL!RECORD;
              DULWLD( !XWD( !LH( usegan ),0 ), !XWD( ganflag,-1 ),Proc );  
              DONE;
            END
          ELSE
            BEGIN
              OPEN( chan1 := GETCHAN,"dsk",0,4,4,count,brchr1,eof1 := -1 );
              IF NOT eof1 THEN
                BEGIN
                  LOOKUP(chan1, infile, flag := -1 );
                  IF NOT flag THEN
                    BEGIN
                      GetUserName( chan1,eof1 );
                      DONE;
                    END
                  ELSE
                    PRINT(CRLF,"! Can not find file, try again !");
                END
              ELSE
                USERERR( 0,0,"CANNOT INIT DISK CHANNEL ","X" );
            END;
      END;




  IF (Ask ( "Sort by size or username?",
  "( size or username )[ username ] :   ","SIZE","USERNAME", 7 )) THEN
    BEGIN
      sizflag := 1;
      WHILE ( CVD(num) < 1 ) DO
        BEGIN
          PRINT( CRLF,"Number of users to report?",CRLF,
           "( 'number' or all )[ all ] :   ");   
          num := INCHWL;
          IF Compare( num,"HELP" ) OR Compare( num,"?" ) THEN
            BEGIN
              PRINT( CRLF,Hlptxt[ 8 ],CRLF);
              num := " 0 ";
            END
          ELSE
            IF( EQU( num,NULL )) OR ( Compare( num,"ALL" )) THEN
              DONE;
        END;
    END;
  WHILE ( true ) DO
    BEGIN
      PRINT( CRLF,"Last access date for old files?",CRLF,
      "( dd mon yr, or CR )[ 1 JAN 64 ] :   ");
      inpt := olddat := INCHWL;
      IF Compare( inpt,"HELP" ) OR Compare( inpt,"?" ) THEN
        PRINT( CRLF,Hlptxt[ 9 ],CRLF );
      IF ( LENGTH( inpt ) = 0  OR
        (RDDATE(dateB,ovscan,SCANU(inpt),inpt)) ) THEN
        DONE;
    END;
  dateC := CNVDATE(dateB,0,'400020);

  PRINT( CRLF,"     Wait-----creating files DUSAGE.DAT and DUSAGE.RPT-----" );
  MFDSET( '17,0,0,512 );   ! Tells MFDScn to not allocate any buffers ;
                           ! for files passed to FileProc ;
  MFDScn( GanMask, CVSIX( "*" ), CVSIX( "*" ),
    If ( dateB ) THEN -1 ELSE 0,
    WantUFD, UFDProc, WantFile, FileProc );
  SortRecord( sizflag );
  ReportUse( CVD( num ) );

out: END "DUSAGE";
    U29y