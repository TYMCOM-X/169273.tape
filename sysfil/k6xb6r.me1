procedure MOD.TRANS (TRANS.NO, PROD.NAME)
    returning (C.TRANS.NO, C.PROD.NAME, C.PROD.VERSION, C.OP.SYS, 
    C.RUN.DIRECTORY, C.TSR.NUM)
%
  Run from SOFT, MOD.TRANS allows the user to change the vaules of items in
a Transmittal.  It recieves from SOFT the Transmittal key values retrieved 
from either the command line or the current transmittal information.  It
returns to SOFT the current information from the last successfully referenced
Transmittal, if any.
  To compile, MOD.TRANS requires the following texts for the macros and
functions indicated:
     TRANS.FUNCTIONS  for RECORD.CUR.TRANS, TYPE.SHORT.TRANS,
                          ACCEPT.TRANS.SPECS, and GET.UNIQUE.TRANS;
     SPEC.PARSER      for  BREAK.UP.SPEC which is used by ACCEPT.TRANS.SPECS.
For descriptions of the macros and functions, the fields they require, and
how they are used - see the appropriate text.
%

begin

controls for relation concurrent update

controls for procedure separator @cr  %allows commas in versions and desc's%

fields FIELD.SPEC        as '30c',     % Field to Modify %
       SPACE.POSN        as '2n',      % Space Position %
       KEY.CHANGE        as 'c',       % A Key Field has been Changed flag %
       NEW.TRANS.DATE same as TRANS.DATE, % New Transmittal Date %
       NEW.TRANS.NO same as TRANS.NO,  % New Transmittal Number %
       NEW.AO same as ARCH.ONLY,       % New Archive Only setting %
       OLD.TRANS.NO same as TRANS.NO,
       AO.CHANGE.OK      as 'c',       % Archive Only Change OK flag %

       % Fields used by GET.UNIQUE.TRANS %
       FOUND.COUNT       as '3n',      % Number of Instances Found %
       FIRST.TRANS.NO.FOUND same as TRANS.NO,

       % Fields used by ACCEPT.TRANS.SPECS %
       TRANS.SPEC        as '40c',     % Transmittal Specification %
       ITEM              as '30c',     % An Item of a Specification %
       I.QUOTE           as 'c',       % An Item's Quote Indicator %
       SPEC.STATUS       as '-nn',     % Status returned from parsing a Spec %

       % Fields used by the macro BREAK.UP.SPEC.  For more Information %
       % see the text 'SPEC.PARSER'.                                   %
       SYMBOL.INDEX      as 'nn',
       PARAM             as '40c',
       PARAM.INDEX       as 'nn',
       SPEC.INDEX        as 'nnn',
       QUOTE.FLAG        as 'c',
       LEN.SPEC          as 'nnn',
       CHAR              as 'c'

constant MAX.TRANS.SPECS = 4           % Maximum Number of Items in a %
                                       %   Transmittal Specification. %

array TRANS.ARRAY [1 to MAX.TRANS.SPECS]  %The parsed Items of a Transmittal%
  data ITEM, I.QUOTE                      %specification.                   %

include text 'SPEC.PARSER'
include text "TRANS.FUNCTIONS"

macro CHANGE.TRANS.NUMBER is
GET.NEW.TRANS.NO:
  begin


  type "Transmittal Number:", TRANS.NO, " =>(cr for no change) "
  accept NEW.TRANS.NO
  if NEW.TRANS.NO ne default 
    then select TRANSMITTAL where (TRANS.NO = NEW.TRANS.NO)
           then begin
                type "Transmittal Number Already in Use", @cr
                move default to NEW.TRANS.NO
                repeat GET.NEW.TRANS.NO
                end
           else move "Y" to KEY.CHANGE
  end
end.macro


macro CHANGE.ARCHIVE.ONLY is
  begin


  CHANGE.AO: begin
    type "Archive Only: ", ARCH.ONLY, " => "
    accept NEW.AO as 'ccc'
    let NEW.AO = upper.case(NEW.AO)
    if NEW.AO ne "Y" and ne "N"
      then begin
           type "'Yes' or 'No' Only Please", @cr
           repeat CHANGE.AO
           end
  end  %change ao%
  % A Transmittal can not become Archive Only if the Transmittal has %
  % a Installation Date, or a Memo Date.                             %
  if ARCH.ONLY="N" and NEW.AO="Y"
    then begin
         move "Y" to AO.CHANGE.OK
         if INSTALL.DATE ne default
           then begin
                type "Installation Date has been entered.", @cr
                move "N" to AO.CHANGE.OK
                end
         if MEMO.DATE ne default
           then begin
                type "Memo Date has been entered.", @cr
                move "N" to AO.CHANGE.OK
                end
         if AO.CHANGE.OK ne "Y"
          then type "Delete the above before changing to Archive Only.", @cr,
                    "Transmittal is NOT Archive Only.", @cr
          else move NEW.AO to ARCH.ONLY
         end
    else move NEW.AO to ARCH.ONLY
  end
end.macro

macro KEEP.TRANS.CHANGES is
  begin


  if KEY.CHANGE = "Y"
    then begin
         delete from TRANSMITTAL via key

         move NEW.TRANS.NO to TRANS.NO, TRANS.NO of procedure
         if NEW.TRANS.DATE ne default
           then move NEW.TRANS.DATE to TRANS.DATE
         insert into TRANSMITTAL
         end  %key change%
    else begin
         if NEW.TRANS.DATE ne default
           then move NEW.TRANS.DATE to TRANS.DATE
         alter TRANSMITTAL
         end
  end
end.macro


%  BEGIN MODIFY TRANSMITTAL  %

  if TRANS.NO=default and PROD.NAME=default
    then ACCEPT.TRANS.SPECS
  while (TRANS.NO ne default) or (PROD.NAME ne default) do
    begin
    if TRANS.NO = default
      then GET.UNIQUE.TRANS
    if TRANS.NO ne default
      then select TRANSMITTAL via key
             then begin
                  move "N" to KEY.CHANGE
                  move default to NEW.TRANS.NO, NEW.TRANS.DATE
                  type "#", TRANS.NO as '6l', "    ", PROD.NAME, @cr
                  type "Field to Modify (cr to keep changes): "
                  accept FIELD.SPEC
                  let FIELD.SPEC = upper.case(FIELD.SPEC)
                  while FIELD.SPEC ne "ABORT" and ne default do
                    begin
                    conditional on substr(FIELD.SPEC,1,1)
                      begin
                      "A": begin
                           let SPACE.POSN = position(FIELD.SPEC," ")
                           conditional on substr(left.trim(substr(
                                FIELD.SPEC,SPACE.POSN)),1,1)
                             begin
                             "D": begin
                                  type "Archive Date:", ARCHIVAL.DATE , " => "
                                  accept ARCHIVAL.DATE
                                  end
                             "O": CHANGE.ARCHIVE.ONLY
                             end
                           else type "Invalid Field Specification", @cr
                           end
                      "H": type "Valid Fields/Commands are:  Archive Date, ",
                             "Archive Only, Help",@cr,"  Installation date, ",
                             "Memo date, Number, Transmittal date, and ",
                             "ABORT.", @cr, "To change the Product Name, ",
                             "Version, or Operating System - ", @cr,
                             "  please delete and re-enter the transmittal.",
                             @cr
                      "I": begin
                           if ARCH.ONLY = "Y" 
                             then type "Transmittal is Archive Only", @cr
                             else begin
                                  type "Installation Date:", INSTALL.DATE,
                                       " => "
                                  accept INSTALL.DATE
                                  end
                            end
                      "M": begin
                           if ARCH.ONLY = "Y"
                             then type "Transmittal is Archive Only", @cr
                             else begin
                                  type "Memo Date:", MEMO.DATE, " => "
                                  accept MEMO.DATE
                                  end
                           end
                      "N": CHANGE.TRANS.NUMBER
                      "T": begin
                           let NEW.TRANS.DATE = default
                           while NEW.TRANS.DATE = default do
                             begin
                             type "Transmittal Date:", TRANS.DATE, " => "
                             accept NEW.TRANS.DATE
                             end
                           end
                      end
                    else type "Invalid Field Specification", @cr
                    type "Field to Modify (cr to keep changes): "
                    accept FIELD.SPEC
                    let FIELD.SPEC = upper.case(FIELD.SPEC)
                    end  %while field spec... then...%
                  move TRANS.NO of procedure to OLD.TRANS.NO
                  if FIELD.SPEC ne "ABORT"
                    then KEEP.TRANS.CHANGES
                  RECORD.CUR.TRANS
                  end  %select ...then...%
      else type "Non-existent Transmittal", @cr
    if FIELD.SPEC ne "ABORT"
      then select PRODUCT where (TRANS.NO = OLD.TRANS.NO)
           then begin
                let TRANS.NO = NEW.TRANS.NO
                if NEW.TRANS.DATE ne default
                  then let TRANS.DATE = NEW.TRANS.DATE
                alter PRODUCT
                end
      else select PRODUCT where (SECOND.TRANS.NO = OLD.TRANS.NO)
           then alter PRODUCT using(NEW.TRANS.NO for SECOND.TRANS.NO)
    ACCEPT.TRANS.SPECS
    end  %while not default do %
  type @cr

end
 