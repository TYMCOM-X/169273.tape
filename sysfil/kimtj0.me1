%  Product Functions
  Functions and macros used by SOFT and MOD.PROD.
%
macro RECORD.CUR.PROD is
  % Record the information from the current Product.         %
  % Should be used within the scope of an access to PRODUCT. %
  % Used by DELETE.PRODUCT, ENTER.PRODUCT, LIST.PRODUCT, and %
  % MOD.PROD.                                                %
  begin
  move PROD.NAME to C.PROD.NAME
  move PROD.VERSION to C.PROD.VERSION
  move OP.SYS to C.OP.SYS
  move RUN.DIRECTORY to C.RUN.DIRECTORY
  move PROGRAMMER to C.PROGRAMMER
  move TRANS.NO to C.TRANS.NO
  move default to C.TSR.NUM   % forces TSR reference to be by new prod.name %
                              % rather than old tsr.num %
  end
end.macro


% Brief two lines of Product information.  Should be used within the %
% scope of an access to PRODUCT.  Used by LIST.PRODUCT and          %
% GET.UNIQUE.PROD.                                                  %

macro SHORT.PRODUCT.LINE is

  PROD.NAME,"   ",OP.SYS,"   ","[",trim(RUN.DIRECTORY),"]",@cr,
  " ",PROD.VERSION,"    ",TRANS.NO,"    ",SECOND.TRANS.NO,"  ",UNIT,"   ",
  PROGRAMMER,"   ",SUPPORT.CLASS,"     ",TRANS.DATE,@cr
end.macro


macro TYPE.FULL.PRODUCT is
  % This will display in several lines all the information on a      %
  % single product except for its description.  It should be used    %
  % within the scope on an access on PRODUCT.  Used by LIST.PRODUCT  %
  % and DELETE.PRODUCT.                                              %
  begin

  type " ", trim(PROD.NAME), "  v",trim(PROD.VERSION), "  sys:", 
  trim(OP.SYS) as '6c',@cr,"run dir: <",trim(RUN.DIRECTORY),">","  unit:",
  trim(UNIT) as '6c', "  ",@cr,"source dir: <",trim(SOURCE.LOCATION),">"
  if PROGRAMMER ne default
    then select PROGRAMMER.LIST via key
           then if (FIRST.NAME ne default) or (LAST.NAME ne default)
                  then type " ",trim(FIRST.NAME), " ", trim(LAST.NAME), @cr
                  else type " ",PROGRAMMER, @cr
           else type " ",trim(PROGRAMMER), @cr
    else type " Unknown Programmer", @cr
  if TRANS.NO ne default
    then type " trans# ", TRANS.NO as '6l'
  if TRANS.DATE ne default
    then type "  ", TRANS.DATE
  if SECOND.TRANS.NO ne default
    then type "  2nd trans# ", SECOND.TRANS.NO as '6l'
  if MANAGER ne default
    then select PROGRAMMER.LIST via (PROGRAMMER = MANAGER)
           then if (FIRST.NAME ne default) or (LAST.NAME ne default)
                  then type "  mgr.", trim(FIRST.NAME), trim(LAST.NAME)
                  else type "  mgr.", trim(MANAGER)
           else type "  mgr.", trim(MANAGER)
  type "  class ", trim(SUPPORT.CLASS), @cr
  if PROD.COMMENT ne default
    then type " ", trim(PROD.COMMENT), @cr
  if PROD.DOC ne default
    then type " documentation: ", trim(PROD.DOC), @cr
  end
end.macro


macro TYPE.PROD.DESC (PNAME,OS,RDIR) is
  % Displays each line of the desccription, if any, for the Product %
  % Name and Operating System type passed to it.                    %
  begin

  for each PRODUCT.DESC where (PROD.NAME = PNAME and OP.SYS = OS and
    RUN.DIRECTORY = RDIR) do
    type LINE, @cr
  end
end.macro


function ACCEPT.PROD.SPECS 
  % This will prompt the user to enter a product specification or a  %
  % carriage return.  A product specification is a product name which%
  % may be followed a version which may be followed by an operating  %
  % system type which may be followed by a run directory.            %
  % Each item must be separated by a space, comma,                   %
  % and/or enclosed within single or double quote marks.  See the    %
  % text SPEC.PARSER for more information on the macro BREAK.UP.SPEC %
  % and what it does.  If entered, the values of the product         %
  % specification are returned in:  PROD.NAME of procedure,          %
  % PROD.VERSION of procedure, OP.SYS of procedure, and              %
  % RUN.DIRECTORY of procedure.                                      %
  %                                                                  %
  % Required are the following:                                      %
  %    PROD.SPEC - a character string into which the specification is%
  %        accepted,                                                 %
  %    ITEM - a character string for an item of a specification,     %
  %    I.QUOTE - a single character string that indicates if an item %
  %        was entered within quote marks,                           %
  %    SPEC.STATUS - a signed numeric field for the returned status  %
  %        a parsed specification,                                   %
  %    MAX.PROD.SPECS - a constant or numeric with the maximum number%
  %        of items in a product specification, and                  %
  %    PROD.ARRAY - an array of ITEM and I.QUOTE in which the items  %
  %        of the parsed product specification are returned.         %
  %                                                                  %
  % For a list of what is required by BREAK.UP.SPEC see the text     %
  % SPEC.PARSER.                                                     %
  % This is used by:  DELETE.PRODUCT in SOFT, and MOD.PROD,          %
OBTAIN.PROD.SPECS:
  begin

  move default to PROD.NAME, PROD.VERSION, OP.SYS, RUN.DIRECTORY
  type "Product (cr to end): "
  accept PROD.SPEC
  if PROD.SPEC ne default
    then begin
         let PROD.SPEC = upper.case(PROD.SPEC)
         BREAK.UP.SPEC(PROD.SPEC,PROD.ARRAY,ITEM,I.QUOTE,1,MAX.PROD.SPECS,
                       SPEC.STATUS)
         if SPEC.STATUS gt 0
           then begin
                move ITEM[1] of PROD.ARRAY as PROD.NAME to PROD.NAME
                move ITEM[2] of PROD.ARRAY as PROD.VERSION to PROD.VERSION
                move ITEM[3] of PROD.ARRAY as OP.SYS to OP.SYS
                move ITEM[4] of PROD.ARRAY as RUN.DIRECTORY to RUN.DIRECTORY
                end
           else begin
                if SPEC.STATUS lt 0
                  then type "Product Specification Contains Too Many ",
                            "Items!", @cr
                  else type "Invalid Product Specification!", @cr
                repeat OBTAIN.PROD.SPECS
                end
         end  %prod.spec not default%
  end
% end function accept prod specs %


function GET.UNIQUE.PROD 
  % If the operating system type, or the operating system, version,    %
  % and/or run directory of a product are not known - this function is %
  % called to determine a unique product instance. It is not, and      %
  % should not be, called when the product name is not known.          %
  %  If there are no products that match 'PROD.NAME of procedure', then%
  % default values are returned.  If the information that is known does%
  % not reference just a single instance, the user is prompted for a   %
  % version, operating system, or run directory to clarify the         %
  % instance.  To help the user, a list of the choices can be printed. %
  % If the user enters only carriage return at the second request for  %
  % a product version or  operating system type then default values are%
  % returned for the product version and/or the operating system.  This%
  % means that a unique product may not have been found, but this may  %
  % also occur if any of the product in the data base have default     %
  % values for their version and/or operating system type.  If a       %
  % default product name is returned in 'PROD.NAME' of procedure then  %
  % a unique product was not found.                                    %
  %  The values used by the function to determine a unique product are %
  % passed in- and the key values of a unique product if found are     %
  % returned in- PROD.NAME of procedure, PROD.VERSION of procedure,    %
  % OP.SYS of procedure, and RUN.DIRECTORY of procedure.               %
  %  The following must be declared for the function:                  %
  %  fields FOUND.COUNT as '3n',                                       %
  %         FIRST.NAME.FOUND same as PROD.NAME,                        %
  %         FIRST.VERSION.FOUND same as PROD.VERSION,                  %
  %         FIRST.OP.SYS.FOUND same as OP.SYS.                         %
  %         FIRST.RUN.DIRECTORY.FOUND same as RUN.DIRECTORY            %
  % This is used by DELETE.PRODUCT of SOFT and MOD.PROD.               %
  begin
  let FOUND.COUNT = 0
  CHECK.FOR.PROD: begin
  for each PRODUCT where ((PROD.NAME=PROD.NAME of procedure) and
                          (PROD.VERSION=PROD.VERSION of procedure
                           or PROD.VERSION of procedure=default) and
                          (OP.SYS=OP.SYS of procedure
                           or OP.SYS of procedure = default) and
                          (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                           or RUN.DIRECTORY of procedure=default)) do
    begin
    let FOUND.COUNT = FOUND.COUNT + 1
    if FOUND.COUNT = 1
      then begin
           move PROD.VERSION to FIRST.VERSION.FOUND
           move OP.SYS to FIRST.OP.SYS.FOUND
           move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
           end
      else finish CHECK.FOR.PROD
    end
  end  %check.for.prod%
  conditional on FOUND.COUNT
    begin
    0: begin
       type "No Products Found for ", trim(PROD.NAME), "  v", PROD.VERSION,@cr
       move default to PROD.NAME, PROD.VERSION
       end
    1: begin
       move FIRST.VERSION.FOUND to PROD.VERSION
       move FIRST.OP.SYS.FOUND to OP.SYS
       move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
       end
    end
  else begin  %get version/op sys%
       if PROD.VERSION = default
         then begin
              type "Version of ", trim(PROD.NAME),
                   " (cr for list of possibilities): "
              accept PROD.VERSION
              if PROD.VERSION = default
                then begin
                     for each PRODUCT where 
                                (PROD.NAME=PROD.NAME of procedure) do
                       type SHORT.PRODUCT.LINE
                     type "Version of ", trim(PROD.NAME), ":"
                     accept PROD.VERSION
                     end
              let PROD.VERSION = upper.case(PROD.VERSION)
              let FOUND.COUNT = 0
              CHECK.FOR.VERSION: begin
              for each PRODUCT where ((PROD.NAME=PROD.NAME of procedure) and
                                 (PROD.VERSION=PROD.VERSION of procedure)) do
                begin
                let FOUND.COUNT = FOUND.COUNT + 1
                if FOUND.COUNT = 1
                  then begin
                    move OP.SYS to FIRST.OP.SYS.FOUND
                    move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
                    end
                  else finish CHECK.FOR.VERSION
                end
              end  %check.for.version%
              conditional on FOUND.COUNT
                begin
                0: begin
                   type "No Products Found for ", trim(PROD.NAME),
                        "  v", PROD.VERSION, @cr
                   move default to PROD.NAME, PROD.VERSION
                   end
                1: begin
                   move FIRST.OP.SYS.FOUND to OP.SYS
                   move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
                   end
                end
              end  %prod version = default%
       if FOUND.COUNT gt 1 then
         if OP.SYS = default then
           begin  %get op sys%
              type "Operating System type for ", trim(PROD.NAME),
                   "  v",trim(PROD.VERSION),
                   " (cr for list of possibilities):", @cr
              accept OP.SYS
              let OP.SYS = upper.case(OP.SYS)
              if OP.SYS = default
                then begin
                     for each PRODUCT where((PROD.NAME=PROD.NAME of procedure)
                           and (PROD.VERSION=PROD.VERSION of procedure)) do
                       type SHORT.PRODUCT.LINE
                     type "Operating System type for ", trim(PROD.NAME),"  v",
                          trim(PROD.VERSION), ":"
                     accept OP.SYS
                     let OP.SYS = upper.case(OP.SYS)
                     end
              end  %get op sys%
         else begin  %get run directory%
              type "Run Directory for ", trim(PROD.NAME),
                   "  v",trim(PROD.VERSION),
                   " (cr for list of possibilities):", @cr
              accept RUN.DIRECTORY
              let RUN.DIRECTORY = upper.case(RUN.DIRECTORY)
              if RUN.DIRECTORY = default
                then begin
                     for each PRODUCT where((PROD.NAME=PROD.NAME of procedure)
                           and (PROD.VERSION=PROD.VERSION of procedure)) do
                       type SHORT.PRODUCT.LINE
                     type "Run Directory for ", trim(PROD.NAME),"  v",
                          trim(PROD.VERSION), ":"
                     accept RUN.DIRECTORY
                     let RUN.DIRECTORY = upper.case(RUN.DIRECTORY)
                     end
              end  %get run directory%
       end  %get version/op sys%
  end
% end function get unique prod %

  