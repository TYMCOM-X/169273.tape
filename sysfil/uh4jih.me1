%
  Transmittal Functions
  Functions and macros used by SOFT and MOD.TRANS.
%

macro RECORD.CUR.TRANS is
  % Record the information from the current transmittal.  Should be %
  % used from within the scope of an access to TRANSMITTAL.  Used by%
  % COMPLETE.TRANSMITTAL, DELETE.TRANSMITTAL, ENTER.TRANSMITTAL,    %
  % LIST.TRANSMITTAL, and MOD.TRANS.                                %
  begin

  move TRANS.NO to C.TRANS.NO
  move PROD.NAME  to C.PROD.NAME
  move PROD.VERSION to C.PROD.VERSION
  move RUN.DIRECTORY to C.RUN.DIRECTORY
  move OP.SYS to C.OP.SYS
  move default to C.TSR.NUM   % clear for reference by new prod.name %
  end
end.macro

macro TYPE.SHORT.TRANS is
  % Brief one line of Transmittal information.  Should be used from within %
  % the scope of an access to TRANSMITTAL.  Used by LIST.TRANSMITTAL and   %
  % GET.UNIQUE.TRANS.                                                      %
  begin
  type TRANS.NO,"    ",PROD.NAME,"  ",PROD.VERSION,"  ",OP.SYS,
    "  ",TRANS.DATE,@cr
  if ARCH.ONLY = "Y"
    then type "  Archive Only", @cr
  end
end.macro


macro TYPE.LONG.TRANS is
  % All the information for a transmittal is displayed in several lines. %
  % Should be used from within the scope of an access to TRANSMITTAL.    %
  % Used by DELETE.TRANSMITTAL and LIST.TRANSMITTAL.                     %
  begin

  type "  #", TRANS.NO as '6l', "   ", trim(PROD.NAME), "   v", 
    trim(PROD.VERSION),
       "   sys:", trim(OP.SYS), "   ", TRANS.DATE, @cr
  if ARCH.ONLY = "Y"
    then type "  Archive Only", "    Archived: ", ARCHIVAL.DATE, @cr
    else begin
         type "  Archived: ", ARCHIVAL.DATE, "   Installed: ", INSTALL.DATE,
              "   Memo Date: ", MEMO.DATE, @cr
         end
  end
end.macro


function ACCEPT.TRANS.SPECS 
  % The user will be prompted for a transmittal specification or a      %
  % cariage return. A transmittal specification is either a transmittal %
  % number optionaly followed by a product name optionaly followed by a %
  % product version optionaly followed by an operating system type, or  %
  % product name optoinaly followed by a version optionaly followed by  %
  % an operating system type.  Each item in a specification must be     %
  % seperated by a space, comma, and/or inclosed within single or double%
  % quote marks.  See the text SPEC.PARSER for more information on the  %
  % macro BREAK.UP.SPEC and what it does.                               %
  % If entered, the values of a transmittal specification are returned  %
  % in: TRANS.NO of procedure, PROD.NAME of procedure, PROD.VERSION of  %
  % procedure, and OP.SYS of procedure.                                 %
  %                                                                     %
  % Required are the following:                                         %  
  %    TRANS.SPEC - a character string into which the specification is  %
  %        accepted,                                                    %
  %    ITEM - a character string for an item of a specification,        %
  %    I.QUOTE - a single character string that indicates if an item    %
  %        was entered within quote marks,                              %
  %    SPEC.STATUS - a signed numeric field for the returned status     %
  %        a parsed specification,                                      %
  %    MAX.TRANS.SPECS - a constant or numeric with the maximum number  %
  %        of items in a transmittal specification, and                 %
  %    TRANS.ARRAY - an array of ITEM and I.QUOTE in which the items    %
  %        of the parsed product specification are returned.            %
  %                                                                     %
  % For a list of what is required by BREAK.UP.SPEC see the text        %
  % SPEC.PARSER.                                                        %
  % This is used by COMPLETE.TRANSMITTAL, DELETE.TRANSMITTAL, and       %
  % MOD.TRANS.                                                          %
OBTAIN.TRANS.SPECS:
  begin

  move default to TRANS.NO, PROD.NAME, PROD.VERSION, OP.SYS
  type "Transmittal Number and/or Product (cr to end): "
  accept TRANS.SPEC
  if TRANS.SPEC ne default
    then begin
         let TRANS.SPEC = upper.case(TRANS.SPEC)
         BREAK.UP.SPEC(TRANS.SPEC,TRANS.ARRAY,ITEM,I.QUOTE,1,MAX.TRANS.SPECS,
                       SPEC.STATUS)
         if SPEC.STATUS gt 0
           then begin
                if ITEM[1] of TRANS.ARRAY is TRANS.NO
                  then begin
                       move ITEM[1] of TRANS.ARRAY as TRANS.NO to TRANS.NO
                       move ITEM[2] of TRANS.ARRAY as PROD.NAME to PROD.NAME
                       move ITEM[3] of TRANS.ARRAY as PROD.VERSION
                            to PROD.VERSION
                       move ITEM[4] of TRANS.ARRAY as OP.SYS to OP.SYS
                       end
                  else begin
                       move ITEM[1] of TRANS.ARRAY as PROD.NAME to PROD.NAME
                       move ITEM[2] of TRANS.ARRAY as PROD.VERSION
                            to PROD.VERSION
                       move ITEM[3] of TRANS.ARRAY as OP.SYS to OP.SYS
                       end
                end
           else begin
                if SPEC.STATUS lt 0
                  then type "Transmittal Specification Contains Too Many ",
                            "Items!", @cr
                  else type "Invalid Transmittal Specification!", @cr
                repeat OBTAIN.TRANS.SPECS
                end
         end  %spec not default%
  end
% end function accept trans specs %


function GET.UNIQUE.TRANS 
  % If the number of a transmittal is not known, but the product name, %
  % and optionaly the version and/or operating system type, is known   %
  % this function can return an unique transmittal number.  If a single%
  % transmittal can be determined from the known product information   %
  % the transmittal number is returned.  If there are no transmittals  %
  % match the product information then default values are returned.    %
  % If there are more than one qualifing instance the user is prompted %
  % for the transmittal number.  A list of the possibilities is made   %
  % available to the user at this time.  Whatever is enter at the      %
  % transmittal number prompt is returned without it being check - so  %
  % it may reference a vaild transmittal, it may be junk, or it may be %
  % default.                                                           %
  %  The values used by this function to determine a unique transmittal%
  % are passed in- and the values of a unique transmittal if found are %
  % returnind in- TRANS.NO of procedure, PROD.NAME of procedure,       %
  % PROD.VERSION of procedure, and OP.SYS of procedure.                %
  %  The following must be declared for the function:                  %
  % fields FOUND.COUNT as '3n',                                        %
  %        FIRST.TRANS.NO.FOUND same as TRANS.NO                       %
  % This function is used by COMPLETE.TRANS, DELETE.TRANS, and         %
  % MOD.TRANS.                                                         %
  begin
  let FOUND.COUNT = 0
  CHECK.FOR.TRANS: begin
  for each TRANSMITTAL where ((PROD.NAME=PROD.NAME of procedure
          or PROD.NAME of procedure = default)
        and (PROD.VERSION=PROD.VERSION of procedure or PROD.VERSION
              of procedure = DEFAULT)
        and (OP.SYS=OP.SYS of procedure or OP.SYS of procedure = default)) do
    begin
    let FOUND.COUNT = FOUND.COUNT + 1
    if FOUND.COUNT = 1
      then move TRANS.NO to FIRST.TRANS.NO.FOUND
      else finish CHECK.FOR.TRANS
    end
  end  %CHECK FOR TRANS %
  conditional on FOUND.COUNT
    begin
    0: begin
       type "No Transmittal Found for ", trim(PROD.NAME), " v",
            trim(PROD.VERSION), " sys:", OP.SYS, @cr
       move default to PROD.NAME, PROD.VERSION, OP.SYS
       end
    1: move FIRST.TRANS.NO.FOUND to TRANS.NO
    end
  else begin
       type "Transmittal Number of ", trim(PROD.NAME),
            " (cr for list of posibilities): "
       accept TRANS.NO
       if TRANS.NO = default
         then begin
             for each TRANSMITTAL where
                  ((PROD.NAME=PROD.NAME of procedure or PROD.NAME 
                      of procedure = default)
                 and (PROD.VERSION=PROD.VERSION of procedure or PROD.VERSION
                      of procedure = default)
                 and (OP.SYS=OP.SYS of procedure or OP.SYS of procedure =
                      default)) do
               TYPE.SHORT.TRANS
             type "Transmittal Number of ", trim(PROD.NAME), ":"
             accept TRANS.NO
             end
       end
  end
% end function get unique trans %
