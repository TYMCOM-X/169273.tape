%  TSR Functions
  Functions and macros used by SOFT and MOD.TSR
%

macro RECORD.CUR.TSR is
  % Record the information from the curent ITSR. Should be used from %
  % within the scope of an access to TSR.  Used by COMPLETE.TSR,     %
  % DELETE.TSR, ENTER.TSR, and MOD.TSR.                              %
  begin

  move TSR.NUM to C.TSR.NUM
  move PROD.NAME to C.PROD.NAME
  move PROD.VERSION to C.PROD.VERSION
  move OP.SYS to C.OP.SYS
  move RUN.DIRECTORY TO C.RUN.DIRECTORY
  move PROGRAMMER to C.PROGRAMMER
  end
end.macro

macro TYPE.VALID.TSR.CLASSES is
  % A message that can be used when an invalid TSR class is entered. %
  begin

  type "ITSR Class must be FIR, DEV, BUG, INQ, REQ, or DOC.", @cr
  end
end.macro

macro TYPE.SHORT.TSR is
  % A brief one line of ITSR information.  Should be used from  within %
  % the scope of an access to TSR.  Used by LIST.TSR and               %
  % GET.UNIQUE.TSR.                                                    %
  begin
  type TSR.NUM,"   ",PROD.NAME,"   ",OP.SYS,"  ",PROD.VERSION,"    ",
    PRIORITY,"     ",TSR.CLASS,@cr," ",DATE.IN,"  ",DATE.OUT,"  ",
  "[",trim(RUN.DIRECTORY),"]   ",PROGRAMMER,@cr
  end
end.macro  % type.short.tsr %


macro TYPE.LONG.TSR is
  % All the information of a TSR is displayed in several lines except %
  % for the description.  Should be used from within the scope of an  %
  % access of TSR.  Used by DELETE.TSR ,LIST.TSR, and COMPLETE.TSR.   %
  begin

  type " #", TSR.NUM as '4l4z', "  ", trim(PROD.NAME), "  v"
  if PROD.VERSION = default
    then type " ?        "
    else type trim(PROD.VERSION)
  type "  sys:", trim(OP.SYS) as '4c',@cr," <",trim(RUN.DIRECTORY),
    ">  pri:",PRIORITY, "  class:",
       trim(TSR.CLASS) as '4c', @cr
  type " date in: ", DATE.IN
  if DATE.OUT = default
    then type "    OUTSTANDING", @cr
    else begin
         type " date out: ", DATE.OUT, "  fixer: "
         if PROGRAMMER ne default
           then select PROGRAMMER.LIST via key
              then if (FIRST.NAME ne default) or (LAST.NAME ne default)
                  then type " ",trim(first.name), " ", trim(LAST.NAME),@cr
                         else type " ",trim(PROGRAMMER),@cr
           else type " UNKNOWN",@cr
         type " time spent:", TIME.SPENT, @cr
         end
  end
end.macro  % type.long.tsr %


macro TYPE.TSR.DESC(TSR.NUMBER) is
  % Types each line of the description, if any, of the TSR who's %
  % number is passed.                                            %
  begin

  for each TSR.DESC where (TSR.NUM = TSR.NUMBER)
           sorted on COUNTER do
    type trim(LINE), @cr
  end
end.macro


function ACCEPT.TSR.SPECS 
  %  The user will be prompted for a ITSR specification or a carriage %
  % return.  A ITSR specification is either an ITSR number optionaly  %
  % followed by a product optionaly followed by an operating system   %
  % type, or a product name optionaly followed by an operating system %
  % type.  Each item in a specification must be seperated by a space, %
  % comma, and/or inclosed in single or double quote marks.  For more %
  % information on the parsing of the specification see the text      %
  % SPEC.PARSER for a discussion of the macro BREAK.UP.SPEC.          %
  %  If entered, the values of a ITSR specification are returned in:  %
  % TSR.NUM of procedure, PROD.NAME of procedure,  OP.SYS of          %
  % procedure, and RUN.DIRECTORY of procedure.                        %
  %                                                                   %
  % Required are the following:                                       %
  %    TSR.SPEC - a character string into which the specification is  %
  %        accepted,                                                  %
  %    ITEM - a character string for an item of a specification,      %
  %    I.QUOTE - a single character string that indicates if an item  %
  %        was entered within quote marks,                            %
  %    SPEC.STATUS - a signed numeric field for the returned status   %
  %        a parsed specification,                                    %
  %    MAX.TSR.SPECS - a constant or numeric with the maximum number  %
  %        of items in a product specification, and                   %
  %    TSR.ARRAY - an array of ITEM and I.QUOTE in which the items    %
  %        of the parsed TSR specification are returned.              %
  %                                                                   %
  % For a list of what is required by BREAK.UP.SPEC see the text      %
  % SPEC.PARSER.                                                      %
  %  This is used by COMPLETE.TSR, DELETE.TSR, and MOD.TSR.           %
OBTAIN.TSR.SPECS:
  begin

  move default to TSR.NUM, PROD.NAME, OP.SYS, RUN.DIRECTORY
  type "ITSR Number and/or Product Name (cr to end): "
  accept TSR.SPEC
  if TSR.SPEC ne default
    then begin
         let TSR.SPEC = upper.case(TSR.SPEC)
         BREAK.UP.SPEC(TSR.SPEC,TSR.ARRAY,ITEM,I.QUOTE,1,MAX.TSR.SPECS,
                       SPEC.STATUS)
         if SPEC.STATUS gt 0
           then begin
                if ITEM[1] of TSR.ARRAY is TSR.NUM
                  then begin
                       move ITEM[1] of TSR.ARRAY as TSR.NUM to TSR.NUM
                       move ITEM[2] of TSR.ARRAY as PROD.NAME to PROD.NAME
                       move ITEM[3] of TSR.ARRAY as OP.SYS to OP.SYS
                       move ITEM[4] of TSR.ARRAY as RUN.DIRECTORY to
                         RUN.DIRECTORY
                       end
                  else begin
                       move ITEM[1] of TSR.ARRAY as PROD.NAME to PROD.NAME
                       move ITEM[2] of TSR.ARRAY as OP.SYS to OP.SYS
                       move ITEM[3] of TSR.ARRAY as RUN.DIRECTORY to
                         RUN.DIRECTORY
                       end
                end
           else begin
                if SPEC.STATUS lt 0
                  then type "ITSR Specification Contains Too Many Items!", @cr
                  else type "Invalid ITSR Specification!", @cr
                repeat OBTAIN.TSR.SPECS
                end
         end  %spec not default%
  end
% end function accept tsr specs %


function GET.UNIQUE.TSR 
  % If not all of a TSR key (TSR Number, Product Name, Operating System %
  % type) is known, but at least one item is, this function can         %
  % determine a unique TSR instance.  If a single TSR can be determined %
  % from the known information then the instances key values are        %
  % returned.  If a single TSR can not be determined, the user is asked %
  % for the missing information.  At this prompt, a carriage return will%
  % list for the user the possible TSRs the user may choose from.  The  %
  % values entered are not checked for validity - so the values returned%
  % may reference a valid TSR, the values may be junk, or the values may%
  % be default.                                                         %
  %  The valused by this function to determine a unique TSR are passed  %
  % in- and the values of a unique TSR if found are retruned in-        %
  % TSR.NUM of procedure, PROD.NAME of procedure, and OP.SYS of         %
  % procedure.                                                          %
  %  The following must be declared for the function:                   %
  % fields FOUND.COUNT as '3n',                                         %
  %        FIRST.NUM.FOUND same as TSR.NUM,                             %
  %        FIRST.OP.SYS.FOUND same as OP.SYS,                           %
  %        FIRST.NAME.FOUND same as PROD.NAME.                          %
  %        FIRST.RUN.DIRECTORY.FOUND same as RUN.DIRECTORY              %
  % This function is used by COMPLETE.TSR, DELETE.TSR, and MOD.TSR.     %
  begin
  if TSR.NUM = default
    then begin
         let FOUND.COUNT = 0
         CHECK.FOR.NUM: begin
         for each TSR where ((PROD.NAME=PROD.NAME of procedure
                             or PROD.NAME of procedure = default)
                         and (OP.SYS=OP.SYS of procedure
                             or OP.SYS of procedure = default) 
                         and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                             or RUN.DIRECTORY of procedure=default)) do
           begin
           let FOUND.COUNT = FOUND.COUNT + 1
           if FOUND.COUNT = 1
             then begin
                  move TSR.NUM to FIRST.NUM.FOUND
                  move OP.SYS to FIRST.OP.SYS.FOUND
                  move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
                  end
             else finish CHECK.FOR.NUM
           end
         end  %check.for.num%
         conditional on FOUND.COUNT
           begin
           0: type "No ITSRs for Product ", trim(PROD.NAME),"  sys:",
                   trim(OP.SYS), @cr
           1: begin
              move FIRST.NUM.FOUND to TSR.NUM
              move FIRST.OP.SYS.FOUND to OP.SYS
              move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
              end
           end
         else begin
              type "ITSR Number (cr for list of possibilities): "
              accept TSR.NUM
              if TSR.NUM = default
                then begin
                     for each TSR where ((PROD.NAME=PROD.NAME of procedure
                                    or PROD.NAME of procedure = default)
                                 and (OP.SYS=OP.SYS of procedure
                                    or OP.SYS of procedure = default) 
                                 and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                                    or RUN.DIRECTORY of procedure=default)) do
                       TYPE.SHORT.TSR
                     type "ITSR Number: "
                     accept TSR.NUM
                     end
              end 
         end  %if tsr.num=default then...% 
  if PROD.NAME = default
    then begin                               %Prod.Name = default%
         let FOUND.COUNT = 0
         CHECK.FOR.NAME: begin
         for each TSR where ((TSR.NUM=TSR.NUM of procedure
                             or TSR.NUM of procedure = default)
                         and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                             or RUN.DIRECTORY of procedure=default)
                         and (OP.SYS=OP.SYS of procedure
                             or OP.SYS of procedure = default)
                         and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                             or RUN.DIRECTORY of procedure=default)) do
           begin
           let FOUND.COUNT = FOUND.COUNT + 1
           if FOUND.COUNT = 1
             then begin
                  move PROD.NAME to FIRST.NAME.FOUND
                  move OP.SYS to FIRST.OP.SYS.FOUND
                  move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
                  end
             else finish CHECK.FOR.NAME
           end
         end  %check.for.name%
         conditional on FOUND.COUNT
           begin
           0: type "No ITSRs with Number ", TSR.NUM as '8l', "  sys:",
                   trim(OP.SYS), @cr
           1: begin
              move FIRST.NAME.FOUND to PROD.NAME
              move FIRST.OP.SYS.FOUND to OP.SYS
              move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
              end
           end
         else begin
              type "Product Name (cr for list of possibilities): "
              accept PROD.NAME
              let PROD.NAME = upper.case(PROD.NAME)
              if PROD.NAME = default
                then begin
                     for each TSR where ((TSR.NUM=TSR.NUM of procedure
                                    or TSR.NUM of procedure = default)
                                 and (OP.SYS=OP.SYS of procedure
                                    or OP.SYS of procedure = default)
                                 and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                                    or RUN.DIRECTORY of procedure=default)) do
                       TYPE.SHORT.TSR
                     type "Product Name: "
                     accept PROD.NAME
                     let PROD.NAME=upper.case(PROD.NAME)
                     end  %if name =default then ...%
              end
       end  %Prod.Name = default%
  if OP.SYS = default
    then begin                               %OP.SYS = default%
         let FOUND.COUNT = 0
         CHECK.FOR.OS: begin
         for each TSR where ((TSR.NUM=TSR.NUM of procedure
                             or TSR.NUM of procedure = default)
                         and (PROD.NAME=PROD.NAME of procedure
                             or PROD.NAME of procedure = default)
                         and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                             or RUN.DIRECTORY of procedure=default)) do
           begin
           let FOUND.COUNT = FOUND.COUNT + 1
           if FOUND.COUNT = 1
             then begin
                  move TSR.NUM to FIRST.NUM.FOUND
                  move PROD.NAME to FIRST.NAME.FOUND
                  move OP.SYS to FIRST.OP.SYS.FOUND
                  move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
                  end
             else finish CHECK.FOR.OS
           end
         end  %check.for.os%
         conditional on FOUND.COUNT
           begin
           0: type "No ITSRs with Number ", TSR.NUM as '8l',
                   "  ,Product:",trim(PROD.NAME), @cr
           1: begin
              move FIRST.NUM.FOUND to TSR.NUM
              move FIRST.NAME.FOUND to PROD.NAME
              move FIRST.OP.SYS.FOUND to OP.SYS
              move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
              end
           end
         else begin
              type "Operating System Type (cr for list of possibilities): "
              accept OP.SYS
              let OP.SYS = upper.case(OP.SYS)
              if OP.SYS = default
                then begin
                     for each TSR where ((TSR.NUM=TSR.NUM of procedure
                                    or TSR.NUM of procedure = default)
                                 and (PROD.NAME=PROD.NAME of procedure
                                    or PROD.NAME of procedure = default)
                                 and (RUN.DIRECTORY=RUN.DIRECTORY of procedure
                                    or RUN.DIRECTORY of procedure=default)) do
                       TYPE.SHORT.TSR
                     type "Operating System Type: "
                     accept OP.SYS
                     let OP.SYS=upper.case(OP.SYS)
                     end  %if op.sys =default then ...%
              end
       end  %OP.SYS = default%
  if RUN.DIRECTORY = default
    then begin                               %RUN.DIRECTORY = default%
         let FOUND.COUNT = 0
         CHECK.FOR.RUN.DIR: begin
         for each TSR where ((TSR.NUM=TSR.NUM of procedure
                             or TSR.NUM of procedure = default)
                         and (PROD.NAME=PROD.NAME of procedure
                             or PROD.NAME of procedure = default)
                         and (OP.SYS=OP.SYS of procedure
                             or OP.SYS of procedure=default)) do
               begin
           let FOUND.COUNT = FOUND.COUNT + 1
           if FOUND.COUNT = 1
             then begin
                  move TSR.NUM to FIRST.NUM.FOUND
                  move PROD.NAME to FIRST.NAME.FOUND
                  move OP.SYS to FIRST.OP.SYS.FOUND
                  move RUN.DIRECTORY to FIRST.RUN.DIRECTORY.FOUND
                  end
             else finish CHECK.FOR.RUN.DIR
           end
         end  %check.for.run.dir%
         conditional on FOUND.COUNT
           begin
           0: type "No ITSRs with Number ", TSR.NUM as '8l',
                   "  ,Product:",trim(PROD.NAME), @cr
           1: begin
              move FIRST.NUM.FOUND to TSR.NUM
              move FIRST.NAME.FOUND to PROD.NAME
              move FIRST.OP.SYS.FOUND to OP.SYS
              move FIRST.RUN.DIRECTORY.FOUND to RUN.DIRECTORY
              end
           end
         else begin
              type "Run Directory (cr for list of possibilities): "
              accept RUN.DIRECTORY
              let RUN.DIRECTORY = upper.case(RUN.DIRECTORY)
              if RUN.DIRECTORY = default
                then begin
                     for each TSR where ((TSR.NUM=TSR.NUM of procedure
                                    or TSR.NUM of procedure = default)
                                 and (PROD.NAME=PROD.NAME of procedure
                                    or PROD.NAME of procedure = default)
                                 and (OP.SYS=OP.SYS of procedure
                                    or OP.SYS of procedure=default)) do
                       TYPE.SHORT.TSR
                     type "Run Directory: "
                     accept RUN.DIRECTORY
                     let RUN.DIRECTORY=upper.case(RUN.DIRECTORY)
                     end  %if run.directory=default then ...%
              end
       end  %RUN.DIRECTORY = default%

  end
% end function get unique tsr %


macro FINISH.TSR is           
 % Prompts for the fields needed to complete %
 % a TSR.  Used by COMPLETE.TSR, and         %
 % CHANGE.DATE.OUT, CHANGE.FIXER, and        %
 % CHANGE.TIME which are used by MOD.TSR.    %
 % Should be used with a TSR scope.          %
  begin                       
  while PROGRAMMER=default do 
    begin                     
    type " Fixer (use 4 character id): "
    accept PROGRAMMER
    end
  let PROGRAMMER = upper.case(PROGRAMMER)
  while TIME.SPENT = default do
    begin
    type " Time Spent in hours as nn.n: "
    accept TIME.SPENT
    end
  while DATE.OUT = default do
    begin
    type " Date Out (closed) as mm/dd/yy: "
    accept DATE.OUT
    end
  end
end.macro

   