entry

	TFract
,	GetUDT
,	GetTDT
,	CvtDTM
,	CvSDat
,	CvSTim
,	CvSTym
,	TymDay
,	CvDate
,	CvTime
,	TheTime
;

begin "DAYTIME"

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)UUOSYM.DEF" source!file;


Preset!with 366,365,365,365;
	    Own safe integer array Years[ 0:3 ];

Preset!with 0,3,3,6,1,4,6,2,5,0,3,5;
	    Own safe integer array MonthOffset[0:11];

Preset!with 31,28,31,30,31,30,31,31,30,31,30,31;
	    Own safe integer array MonthDays[0:11];

Preset!with "January","February","March","April",
	    "May","June","July","August",
	    "September","October","November","December";
	    Own safe string array MonthName[0:11];

Preset!with "Janvier","Fevrier","Mars","Avril",
	    "Mai","Juin","Juillet","Aout",
	    "Septembre","Octobre","Novembre","Decembre";
	    Own safe string array MoisName[0:11];

Preset!with "Sunday","Monday","Tuesday","Wednesday",
	    "Thursday","Friday","Saturday";
	    Own safe string array Weekday[0:6];

Preset!with "Dimanche","Lundi","Mardi","Mercredi",
	    "Jeudi","Vendredi","Samedi";
	    Own safe string array Semaine[0:6];


Simple String Procedure CV( Integer Val, Wid(0), Typ(0) );
! ----------------------------------------------------------------------;
!									;
!	CV		ConVert a value "Val" into a numeric string of	;
!			width "Wid" using the conversion method "Typ".	;
!			Solves the problem of setting and resetting	;
!			the width and digits parameters to GETformat	;
!			and SETformat over and over again.		;
!									;
! ----------------------------------------------------------------------;
begin "my own cvxxx"

    Integer Width, Digits;
    Own String Str;

    GetFormat( Width, Digits );
    SetFormat( Wid,0 );

    Str_ Case Typ of ( Cvs( Val ), Cvos( Val) );

    SetFormat( Width, Digits );
    Return( Str );

end "my own cvxxx";

simple integer procedure CvFraction( Integer Time );
! ----------------------------------------------------------------------;
begin!code			! Time_ ( Time * 86400 ) lsh -18;

	Move	1,Time;		! get time ;
	Imuli	1,86400;	! do multiply ;
	Rot	1,18;		! rotate instead of shift ;
	Tlne	1,'777777;	! so we don't lose fraction ;
	  Aoj	1,;		!  if any fration, round up ;
	Tlz	1,'777777;	! clear fraction half ;
				! return ;
end;



Define !!cnDTM = !xwd( '53,!gtCNF );

internal simple integer procedure GetUDT;
return( calli( !!cnDTM, calli!GETTAB ) );



internal simple integer procedure GetTDT;
begin "universal date time"		! returns days,,fract ;
    Define calli!DAYTIM = -'143;
    Own Safe Integer Array Days[0:2];  Define Day = { Days[0] };

    Days[0]_ Calli( 0, calli!DAYTIM );	! Get secs since 1-Jan-64 ;
    Days[2]_ !xwd( '600000,'600020 );	! Old=current,,New=GMT ;
    Calli( location(days[0]), calli!DATUUO );
    
    Return( !Xwd(Day div 86400, ((Day mod 86400) lsh 18) div 86400) );

end "universal date time";


internal simple integer procedure CvtDTM( integer T, N, O (0) );
begin "convert date-time"
    Preset!with 60*60*24;
    Own Safe Integer Array Midnight[0:0];
!    Own Safe Integer Array Days[0:3];

!    Days[0]_ T;
!    Days[2]_ !xwd( '500000+O, '500000+N );
!    calli( location(days[0]), calli!DATUUO );
!    return( Days[0] );

    begin!code	
	Hrrz	1,T;		! get time ;
	Mul	1,MidNight[0];	! do multiply ;
	Rotc	1,-18;		! rotate instead of shift ;
	Tlne	1,'400000;	! more than half? ;
	  Aoj	2,;		! yes, increment ;
	Imuli	2,60;		! make into tics ;
	Hlrz	1,T;		! get date ;
	Hrlz	3,O;		! old time-zone ;
	Tlz	3,'777700;	! no weird stuff ;
	Tlo	3,'400000;	! 2 word tymshare format ;
	Hrr	3,N;		! new time zone ;
	Trz	3,'777700;	! no weird stuff ;
	Tro	3,'400000;	! 2 word tymshare format ;
	Movei	0,1;		! point at block ;
	uuo!DATUUO;		! convert date-time ;
	  jfcl;			!  better had skip ;
	Push	P,1;		! save this ;
	Idivi	2,60;		! make tics into seconds ;
	Move	3,1;		! copy date field ;
	Setz	1,;		! clear high-order bits ;
	Lshc	1,18;		! shift for fraction ;
	Div	1,MidNight[0];	! divide by seconds in a day ;
	Pop	P,3;		! restore this ;
	Hrl	1,3;		! all done - days,,fraction ;
    end;			! return ;

end  "convert date-time";


internal simple integer procedure TFract( String Time );
! ----------------------------------------------------------------------;
BEGIN
  integer Brk, Secs;

    Secs_ (intscan( Time,Brk ) * 3600 )	! hours ;
	+ (intscan( Time,Brk ) * 60   )	! minutes ;
	+  intscan( Time,Brk );		! seconds ;

    Return( (Secs ash 18) div 86400 );	! return value ;

END;

Internal simple string procedure CvSDat( Integer Date );
! ----------------------------------------------------------------------;
begin "CvSDat"
    Integer Year, Month, Y, M, N;

    If ( Date = 0 )
     then Return( "01-Jan-64" );

    Year_ 64;  Y_ 0;

    While ( Years[ Y land '3 ] leq Date )
     do begin
	Year_ Year + 1;
	Date_ Date - Years[ Y land '3 ];
	Y_ Y + 1;
     end;

    Month_ 0;
    For M_ 0 step 1 until 11
     do begin
	If ( M neq 1 )  or  ( Y land '3 )
	 then N_ MonthDays[ M ]
	 else N_ MonthDays[ M ] + 1;
	If ( N leq Date )
	 then begin
	    Month_ Month + 1;
	    Date_  Date  - N;
	 end
	 else done;
     end;

    Return( Cv( Date+1, -2 ) &
	    "-" & MonthName[ Month ][1 for 3] & "-" &
	    Cv( Year Mod 100, -2 )
	  );

end "CvSDat";



Internal simple string procedure CvSTim( Integer Time );
! ----------------------------------------------------------------------;
Return( If ( Time )
	 then

	    Cv( (Time_ CvFraction( Time )) div 3600, -2 ) & ":" &
	    Cv( (Time_ Time mod 3600) div 60, -2 ) & ":" &
	    Cv( Time mod 60, -2 )

	 else

	    "00:00:00"

	);


Internal simple string procedure CvSTym( Integer Time );
! ----------------------------------------------------------------------;
Return( If ( Time )
	 then

	    If ( ( (Time_ CvFraction( Time )) div 604800 ) )
	     then
		Cv( Time div 604800, 1 ) & "w " &
		Cv( (Time_ Time mod 604800) div 86400, 1 ) & "d" &
		Cv( (Time_ Time mod 86400) div 3600, 3 ) & "h" &
		Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
		Cv( Time mod 60, 3 ) & "s"
	     else
		If ( ( Time div 86400 ) )
		 then
		    Cv( Time div 86400, 1 ) & "d" &
		    Cv( (Time_ Time mod 86400) div 3600, 3 ) & "h" &
		    Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
		    Cv( Time mod 60, 3 ) & "s"
		 else
		    Cv( Time div 3600, 2 ) & "h" &
		    Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
		    Cv( Time mod 60, 3 ) & "s"

	 else

	    "00:00:00"

	);


Internal simple string procedure TymDay( Integer TimeOfDay );
! ----------------------------------------------------------------------;
!									;
!	TymDay		Routine to convert a date-time word, (with the	;
!			number of days since 1-Jan-64 in the left half	;
!			and fraction of a day in the right half),	;
!			into the string "DD-MMM-YY HH:MM:SS".		;
!									;
! ----------------------------------------------------------------------;
begin "date time converter"

    Return( CvSDat( !lh(TimeOfDay) ) & " " & CvSTim( !rh(TimeOfDay) ) );

end "date time converter";

simple boolean procedure LeapYear( Integer Year );
! ----------------------------------------------------------------------;
!									;
!	LeapYear	Returns TRUE if the specified year IS a		;
!			leap-year.  It assumes that every 4 years	;
!			but not every 100 years but every 400 years	;
!			there is (in fact) a leap-year.			;
!									;
! ----------------------------------------------------------------------;
Return( 0  =  (year mod   4) and
	0 neq (year mod 100) or
	0  =  (year mod 400) );


Internal simple integer procedure CvDate( Integer Month, Day, Year );
begin "CvDate"
    Integer Days;

    Month_ Month - 1;
    Year_ Year - 64;
    Days_ Year*365 + Year div 4 + Day;

    If ( LeapYear( Year+1964 ) and ( Month < 2 ) )
     then Days_ Days - 1;

    While( Month > 0 )
     do Days_ Days + MonthDays[ Month_ Month-1 ];

    Return( Days );

end "CvDate";


Internal simple integer procedure CvTime( String  Time );
begin "CvTime"
    Integer T, Brk;

    T_ 0;
    While ( Length( Time ) )
     do begin "convert time"

	T_ ( T * 60 ) + IntScan( Time, Brk );

	While( Time = " " )
	 do Brk_ Lop( Time );

	If ( Length( Time ) and ( Brk neq ":" ) )
	 then Return( 0 )
	 else If ( Length( Time ) )
	       then Brk_ Lop( Time );

     end "convert time";


    Return( T );

end "CvTime";


Internal Simple string Procedure TheTime;
! ----------------------------------------------------------------------;
Begin
  Integer Result;
  String Hours,Minutes,Seconds;

  Result_calli( 0,calli!MSTIME );
  Hours_  cvs(   (Result DIV 1000) DIV 3600 		     );
  Minutes_cvs(  ( (Result Div 1000) - ( cvd( Hours ) * 3600) ) Div 60  );
  Seconds_cvs(  ( (Result Div 1000) - ( cvd( Hours ) * 3600) ) Mod 60  );
  if length( hours ) < 2 then
    hours_ "0" & Hours;
  if length( minutes ) < 2 then
    Minutes_ "0" & Minutes;
  if length( Seconds ) < 2 then
    Seconds_ "0" & Seconds;
  return( Hours & ":" & Minutes & ":" & Seconds );
End;


End "DAYTIME";
