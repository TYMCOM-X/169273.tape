
DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 1
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

1	entry
2	
3		TFract
4	,	GetUDT
5	,	GetTDT
6	,	SysTDT
7	,	CvtDTM
8	,	CvSDat
9	,	CMonth
10	,	CvSTim
11	,	CvSTym
12	,	TymDay
13	,	CvDate
14	,	CvTime
15	,	TheTime
16	;
17	
18	begin "DAYTIME"
19	
20	require "(SAILIB)SAIL.DEF"   source!file;
21	require "(SAILIB)UUOSYM.DEF" source!file;
22	
23	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 2
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

24	
25	Preset!with 366,365,365,365;
26		    Own safe integer array Years[ 0:3 ];
27	
28	Preset!with 0,3,3,6,1,4,6,2,5,0,3,5;
29		    Own safe integer array MonthOffset[0:11];
30	
31	Preset!with 31,28,31,30,31,30,31,31,30,31,30,31;
32		    Own safe integer array MonthDays[0:11];
33	
34	Preset!with "January","February","March","April",
35		    "May","June","July","August",
36		    "September","October","November","December";
37		    Own safe string array MonthName[0:11];
38	
39	Preset!with "Janvier","Fevrier","Mars","Avril",
40		    "Mai","Juin","Juillet","Aout",
41		    "Septembre","Octobre","Novembre","Decembre";
42		    Own safe string array MoisName[0:11];
43	
44	Preset!with "Sunday","Monday","Tuesday","Wednesday",
45		    "Thursday","Friday","Saturday";
46		    Own safe string array Weekday[0:6];
47	
48	Preset!with "Dimanche","Lundi","Mardi","Mercredi",
49		    "Jeudi","Vendredi","Samedi";
50		    Own safe string array Semaine[0:6];
51	
52	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 3
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

53	
54	Simple String Procedure CV( Integer Val, Wid(0), Typ(0) );
55	! ----------------------------------------------------------------------;
56	!									;
57	!	CV		ConVert a value "Val" into a numeric string of	;
58	!			width "Wid" using the conversion method "Typ".	;
59	!			Solves the problem of setting and resetting	;
60	!			the width and digits parameters to GETformat	;
61	!			and SETformat over and over again.		;
62	!									;
63	! ----------------------------------------------------------------------;
64	begin "my own cvxxx"
65	
66	    Integer Width, Digits;
67	    Own String Str;
68	
69	    GetFormat( Width, Digits );
70	    SetFormat( Wid,0 );
71	
72	    Str_ Case Typ of ( Cvs( Val ), Cvos( Val) );
73	
74	    SetFormat( Width, Digits );
75	    Return( Str );
76	
77	end "my own cvxxx";
78	
79	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 4
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

80	simple integer procedure CvFraction( Integer Time );
81	! ----------------------------------------------------------------------;
82	begin!code			! Time_ ( Time * 86400 ) lsh -18;
83	
84		Move	1,Time;		! get time ;
85		Imuli	1,86400;	! do multiply ;
86		Rot	1,18;		! rotate instead of shift ;
87		Tlne	1,'777777;	! so we don't lose fraction ;
88		  Aoj	1,;		!  if any fration, round up ;
89		Tlz	1,'777777;	! clear fraction half ;
90					! return ;
91	end;
92	
93	
94	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 5
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

95	
96	Define !!cnDTM = !xwd( '53,!gtCNF );
97	
98	internal simple integer procedure GetUDT;
99	return( calli( !!cnDTM, calli!GETTAB ) );
100	
101	
102	
103	internal simple integer procedure GetTDT;
104	begin "universal date time"		! returns days,,fract ;
105	    Integer Day;
106	    Define calli!DAYTIM = -'143;
107	
108	    Day_ Calli( '20, calli!DAYTIM );	! Get secs since 1-Jan-64 GMT ;
109	    Return( !Xwd(Day div 86400, ((Day mod 86400) lsh 18) div 86400) );
110	
111	end "universal date time";
112	
113	
114	
115	internal simple integer procedure SysTDT;
116	begin "universal date time"		! returns days TDT,,fract ;
117	    Own Safe Integer Array Days[0:2];
118	
119	    Days[0]_ Calli( !xwd( 5,!gtNSW ), calli!GETTAB );	! System up UDT ;
120	    if ( Days[0] < 0 )			! -1 means not yet ;
121	     then return( -1 );
122	    if ( Days[0] = 0 )			!  0 means not implemented ;
123	     then return(  0 );
124	    Days[2]_ !xwd( '100020,'500020 );	! Old=GMT-UDT,,New=GMT-TDT ;
125	    Calli( location(days[0]), calli!DATUUO );
126	    
127	    Return( Days[0] );
128	
129	end "universal date time";
130	
131	
132	
133	internal simple integer procedure CvtDTM( integer T, N, O (0) );
134	begin "convert date-time"
135	    Own Safe Integer Array Days[0:3];
136	
137	    Days[0]_ T;
138	    Days[2]_ !xwd( '500000+O, '500000+N );
139	    Calli( location(days[0]), calli!DATUUO );
140	    return( Days[0] );
141	
142	end  "convert date-time";
143	
144	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 6
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

145	
146	internal simple integer procedure TFract( String Time );
147	! ----------------------------------------------------------------------;
148	BEGIN
149	  integer Brk, Secs;
150	
151	    Secs_ (intscan( Time,Brk ) * 3600 )	! hours ;
152		+ (intscan( Time,Brk ) * 60   )	! minutes ;
153		+  intscan( Time,Brk );		! seconds ;
154	
155	    Return( (Secs ash 18) div 86400 );	! return value ;
156	
157	END;
158	
159	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 7
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

160	Internal simple string procedure CvSDat( Integer Date );
161	! ----------------------------------------------------------------------;
162	begin "CvSDat"
163	    Integer Year, Month, Y, M, N;
164	
165	    If ( Date = 0 )
166	     then Return( "01-Jan-64" );
167	
168	    Year_ 64;  Y_ 0;
169	
170	    While ( Years[ Y land '3 ] leq Date )
171	     do begin
172		Year_ Year + 1;
173		Date_ Date - Years[ Y land '3 ];
174		Y_ Y + 1;
175	     end;
176	
177	    Month_ 0;
178	    For M_ 0 step 1 until 11
179	     do begin
180		If ( M neq 1 )  or  ( Y land '3 )
181		 then N_ MonthDays[ M ]
182		 else N_ MonthDays[ M ] + 1;
183		If ( N leq Date )
184		 then begin
185		    Month_ Month + 1;
186		    Date_  Date  - N;
187		 end
188		 else done;
189	     end;
190	
191	    Return( Cv( Date+1, -2 ) &
192		    "-" & MonthName[ Month ][1 for 3] & "-" &
193		    Cv( Year Mod 100, -2 )
194		  );
195	
196	end "CvSDat";
197	
198	
199	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 8
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

200	
201	Internal simple integer procedure CMonth( String Name );
202	! ----------------------------------------------------------------------;
203	begin "convert month name"
204	    own integer index;
205	
206	    for index_ 0 upto 11
207	     do if ( kequ( Name, MonthName[ index ][1 for 3] ) or
208		     kequ( Name, MoisName[ index ][1 for 3] )  )
209		 then return( index+1 );
210	
211	    return( 0 );
212	
213	end "convert month name";
214	
215	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 9
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

216	
217	Internal simple string procedure CvSTim( Integer Time );
218	! ----------------------------------------------------------------------;
219	Return( If ( Time )
220		 then
221	
222		    Cv( (Time_ CvFraction( Time )) div 3600, -2 ) & ":" &
223		    Cv( (Time_ Time mod 3600) div 60, -2 ) & ":" &
224		    Cv( Time mod 60, -2 )
225	
226		 else
227	
228		    "00:00:00"
229	
230		);
231	
232	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 10
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

233	
234	Internal simple string procedure CvSTym( Integer Time );
235	! ----------------------------------------------------------------------;
236	Return( If ( Time )
237		 then
238	
239		    If ( ( (Time_ CvFraction( Time )) div 604800 ) )
240		     then
241			Cv( Time div 604800, 1 ) & "w " &
242			Cv( (Time_ Time mod 604800) div 86400, 1 ) & "d" &
243			Cv( (Time_ Time mod 86400) div 3600, 3 ) & "h" &
244			Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
245			Cv( Time mod 60, 3 ) & "s"
246		     else
247			If ( ( Time div 86400 ) )
248			 then
249			    Cv( Time div 86400, 1 ) & "d" &
250			    Cv( (Time_ Time mod 86400) div 3600, 3 ) & "h" &
251			    Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
252			    Cv( Time mod 60, 3 ) & "s"
253			 else
254			    Cv( Time div 3600, 2 ) & "h" &
255			    Cv( (Time_ Time mod 3600) div 60, 3 ) & "m" &
256			    Cv( Time mod 60, 3 ) & "s"
257	
258		 else
259	
260		    "00:00:00"
261	
262		);
263	
264	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 11
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

265	
266	Internal simple string procedure TymDay( Integer TimeOfDay );
267	! ----------------------------------------------------------------------;
268	!									;
269	!	TymDay		Routine to convert a date-time word, (with the	;
270	!			number of days since 1-Jan-64 in the left half	;
271	!			and fraction of a day in the right half),	;
272	!			into the string "DD-MMM-YY HH:MM:SS".		;
273	!									;
274	! ----------------------------------------------------------------------;
275	begin "date time converter"
276	
277	    Return( CvSDat( !lh(TimeOfDay) ) & " " & CvSTim( !rh(TimeOfDay) ) );
278	
279	end "date time converter";
280	
281	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 12
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

282	simple boolean procedure LeapYear( Integer Year );
283	! ----------------------------------------------------------------------;
284	!									;
285	!	LeapYear	Returns TRUE if the specified year IS a		;
286	!			leap-year.  It assumes that every 4 years	;
287	!			but not every 100 years but every 400 years	;
288	!			there is (in fact) a leap-year.			;
289	!									;
290	! ----------------------------------------------------------------------;
291	Return( 0  =  (year mod   4) and
292		0 neq (year mod 100) or
293		0  =  (year mod 400) );
294	
295	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 13
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

296	
297	Internal simple integer procedure CvDate( Integer Month, Day, Year );
298	begin "CvDate"
299	    Integer Days;
300	
301	    Month_ Month - 1;
302	    Year_ Year - 64;
303	    Days_ Year*365 + Year div 4 + Day;
304	
305	    If ( LeapYear( Year+1964 ) and ( Month < 2 ) )
306	     then Days_ Days - 1;
307	
308	    While( Month > 0 )
309	     do Days_ Days + MonthDays[ Month_ Month-1 ];
310	
311	    Return( Days );
312	
313	end "CvDate";
314	
315	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 14
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

316	
317	Internal simple integer procedure CvTime( String  Time );
318	begin "CvTime"
319	    Integer T, Brk;
320	
321	    T_ 0;
322	    While ( Length( Time ) )
323	     do begin "convert time"
324	
325		T_ ( T * 60 ) + IntScan( Time, Brk );
326	
327		While( Time = " " )
328		 do Brk_ Lop( Time );
329	
330		If ( Length( Time ) and ( Brk neq ":" ) )
331		 then Return( 0 )
332		 else If ( Length( Time ) )
333		       then Brk_ Lop( Time );
334	
335	     end "convert time";
336	
337	
338	    Return( T );
339	
340	end "CvTime";
341	
342	

DAYTIM.SAI                      created 02-Dec-86 22:50                                  Page 15
Program Listing                 by CRFSYM %5 at 03-Dec-86 17:17

343	
344	Internal Simple string Procedure TheTime;
345	! ----------------------------------------------------------------------;
346	Begin
347	  Integer Result;
348	  String Hours,Minutes,Seconds;
349	
350	  Result_calli( 0,calli!MSTIME );
351	  Hours_  cvs(   (Result DIV 1000) DIV 3600 		     );
352	  Minutes_cvs(  ( (Result Div 1000) - ( cvd( Hours ) * 3600) ) Div 60  );
353	  Seconds_cvs(  ( (Result Div 1000) - ( cvd( Hours ) * 3600) ) Mod 60  );
354	  if length( hours ) < 2 then
355	    hours_ "0" & Hours;
356	  if length( minutes ) < 2 then
357	    Minutes_ "0" & Minutes;
358	  if length( Seconds ) < 2 then
359	    Seconds_ "0" & Seconds;
360	  return( Hours & ":" & Minutes & ":" & Seconds );
361	End;
362	
363	
364	End "DAYTIME";
    