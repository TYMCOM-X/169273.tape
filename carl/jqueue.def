
require "  - Job queue page layout definitions " message;

require "{}[]" delimiters;
redefine ! = {comment};

Define QueueMap  = 1;			! (1) Page # for queue status;
Define QueueMsg  = QueueMap + 1;	! (1) Page # for queue messages;
Define QueueRun  = QueueMsg + 1;	! (1) Page # for running entries ;
Define QueueAct  = QueueRun + 1;	! (2) Page # for active entries;
Define QueueData = QueueAct + 2;	! (n) Page # for queue entries;
Define QueueFile = {"(SYS)JQUEUE.SYS"};	! Name of file to use;

Define E!Length = 64;			! Entry length;
Define E!RPPage = 512 div E!Length;	! Records per page;
Define E!RunMax = E!RPPage * 1;		! RunMax ;
Define E!JobMax = E!RPPage * (QueueData-QueueAct);	! JobMax ;
Define E!ActMax = E!RunMax + E!JobMax;	! Run + Job : Max ;

!
!	+-----------------------+
!	|			|
!	|	QueueMap	|	(1)  File Page # for queue status
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueMsg	|	(1)  File Page # for queue messages
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueRun	|	(1)  File Page # for running entries
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueAct	|	(2)  File Page # for active entries
!	|			|
!	+-----------------------+
!	|			|
!	|			|
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueData	|	(n)  File Page # for data start
!	|			|
!	+-----------------------+
!	|			|
!	|	   ...		|
!	|			|
!	+-----------------------+
!
;

!	Fancy Macro Definitions
;

redefine !Block(Group, Name, Size) = {
    Ifcr Length(Cvps(Size)) = 0 thenc assignc Size = 1; Endc
    Define Group}&{Name = Group;
    Redefine Group = Group + Size;
};

define ForDef(Group,NameList) = {
    ReDefine Group = 0;
    ReDefine ForDefX = {
	Redefine Group}&{$Knt = 0;
	ReDefine Group}&{$Str = {};
	ForLC $Name$_ (}&{NameList}&{)
	 doC {  !Block(Group,$Name$)
		redefine Group}&{$Knt = Group}&{$Knt + 1;
		redefine Group}&{$Str = cvms(Group}&{$Str) &
		       ifcr length(cvms(Group}&{$Str)) thenc {,} & endc
		        { "$Name$" };
	     }
	 endC
    };
    ForDefX
};

define ForDefS(Group,NameList) = {
    ReDefine ForDefX = {
	!Block(ST$,Group)
	redefine ST$$Str = cvms(ST$$Str) &
			   ifcr length(cvms(ST$$Str)) thenc {,} & endc
			   { "Group" };
	redefine ST$$Off = cvms(ST$$Off) &
			   ifcr length(cvms(ST$$Off)) thenc {,} & endc
			   cvs(ST$$Knt);
	ReDefine PS}&"Group"[1 for 1]&{$ = 0;
	ForLC $Name$_ (}&{NameList}&{)
	 doC { !Block(PS}&"Group"[1 for 1]&{$,$Name$)
	       Define Group}&{$}&{$Name$ =
		   (ST$}&{Group lsh 6)
		    lor PS}&"Group"[1 for 1]&{$}&{$Name$;
	       redefine ST$$All = cvms(ST$$All) &
				  ifcr length(cvms(ST$$All)) thenc {,} & endc
				  {"$Name$"};
	       redefine ST$$Knt = ST$$Knt + 1;

	     }
	 endC
    };
    ForDefX
};


Define !!Ent(nam,siz,pnt,itm) = {
    Define P}&{nam (arr)   = { point( siz, (arr),  pnt ) };
    Define LP}&{nam (arr)  = { ldb( point( siz, (arr),  pnt ) ) };
    Define PP}&{nam (arr)  = { point( siz, (arr[itm]), pnt ) };
    Define LPP}&{nam (arr) = { ldb( point( siz, (arr[itm]), pnt ) ) };
    Define AP}&{nam (arr)  = { point( siz, memory[(arr)+itm], pnt ) };
    Define LAP}&{nam (arr) = { ldb( point( siz, memory[(arr)+itm], pnt ) ) };
};
Define !!Ento(nam,siz,pnt,itm) = {
    Define P}&{nam (arr)      = { point( siz, (arr),  pnt ) };
    Define PP}&{nam (arr,off) = { point( siz, (arr[itm+off]), pnt ) };
};


!	Feature test flags
;

Define !Byt(x,y)={( Ifcr length(CVPS(y)) thenc
	(x) lsh (35-(y)) elsec 1 lsh (35-(x)) endc )};

Define E!MinReq = '1;			! Minimum request number ;
Define E!MaxReq = '377777;		! Maximum request number ;
Define E!ParLength = 80;		! Chars in parameter field ;


Define QFet$Debug   = !Bit(0);		! debug code ;
Define QFet$RSched  = !Bit(1);		! restart scheduler ;
Define QFet$RProc   = !Bit(2);		! start processor ;
Define QFet$RDpy    = !Bit(3);		! restart display ;

Define QFet$DSched  = !Bit(6);		! debugging scheduler ;
Define QFet$Signal  = !Bit(7);		! signal scheduler ;
Define QFet$Tell    = !Bit(8);		! dump data tables ;

Define QFet$Trigger = !Bit(15);		! turn on software interrupts ;
Define QFet$Inter   = !Bit(16);		! use interlock mechanism ;
Define QFet$Shut    = !Bit(17);		! kill processor ;

!	Bits 18-23 ==			! Sleep time for scheduler ;
Define QFet$Pars    = !Bit(27);		! log parameter info ;
Define QFet$Items   = !Bit(28);		! log item info ;
Define QFet$Subs    = !Bit(29);		! log substitution info ;
Define QFet$Strs    = !Bit(30);		! log string,send info ;
Define QFet$Cmds    = !Bit(31);		! log command info ;
Define QFet$Ports   = !Bit(32);		! log port data ;
Define QFet$Files   = !Bit(33);		! log file info ;
Define QFet$Jobs    = !Bit(34);		! log job info ;
Define QFet$LogAll  = !Bit(35);		! log everything ;

!	Bits 18-35  = Scheduler, 0-17 = Processor
;
Define QF$Log       = !Bit(18);		! Job logged in and running ;
Define QF$Run       = !Bit(19);		! Job has run page interlock ;
Define QF$Act       = !Bit(20);		! Job has act page interlock ;


!   Page Format for Queue MAP
;

Define	Q! = 0, Q!Length = 512, Q!!Version = 0;
! -- Queue ;
    !Block(Q!,Version)			! queue format version ;
    !Block(Q!,Feature)			! queue features implemented ;
    !Block(Q!,Type)			! type of queue ;
    !Block(Q!,Name)			! queue name ;
    !Block(Q!,Lock)			! lock the entire queue ;
    !Block(Q!,WLock)			! write lock, ok to read ;
    !Block(Q!,Open)			! count of users in queue ;
    !Block(Q!,Next)			! next available req # ;
    !Block(Q!,High)			! highest entry in use ;
    !Block(Q!,Hole)			! first available entry slot ;
    !Block(Q!,Count)			! total entries in queue ;
    !Block(Q!,Request)			! cyclic request number ;
    !Block(Q!,Extra)			! extra entry word ;
! -- Parameter ;
    !Block(Q!,TruLim)			! default TRU limit (see E!TruLim) ;
    !Block(Q!,LogLim)			! default log limits (see E!LogLim) ;
    !Block(Q!,Action)			! default action (see E!Action) ;
! -- Counts ;
    !Block(Q!,RSlot)		!Block(Q!,ISlot)	! max queue slots ;
    !Block(Q!,RJobs)		!Block(Q!,IJobs)	! jobs to schedule ;
    !Block(Q!,Running)		!Block(Q!,Active)	! active entries ;
! -- Operation ;
    !Block(Q!,Flags)			! system interlock flags ;
    !Block(Q!,New)			! indicate something changed ;
    !Block(Q!,Daytime)			! last UDT scheduler was here ;
    !Block(Q!,System)			! system que start UDT ;
! -- Interlock ;
    !Block(Q!,Schedule)		!Block(Q!,Process)	! frame ;
    !Block(Q!,ScheduleUDT)	!Block(Q!,ProcessUDT)	! start UDT ;
    !Block(Q!,HaveS)		!Block(Q!,HaveP)	! we are here ;
! -- Per Job ;
    !Block(Q!,RFrame,E!RunMax)	!Block(Q!,IFrame,E!JobMax)	! frame ;
    !Block(Q!,Runner,E!RunMax)	!Block(Q!,Status,E!JobMax)	! status ;
    !Block(Q!,RunAct,E!RunMax)	!Block(Q!,JobAct,E!JobMax)	! action ;
    !Block(Q!,RunRec,E!RunMax)	!Block(Q!,JobRec,E!JobMax)	! record ;
    !Block(Q!,RunId,E!RunMax)	!Block(Q!,JobId,E!JobMax)	! frame-id ;
    !Block(Q!,RunTru,E!RunMax)	!Block(Q!,JobTru,E!JobMax)	! tru limit ;
    !Block(Q!,RunTim,E!RunMax)	!Block(Q!,JobTim,E!JobMax)	! time limit ;
    !Block(Q!,RunLog,E!RunMax)	!Block(Q!,JobLog,E!JobMax)	! log limits ;
    !Block(Q!,RunHlt,E!RunMax)	!Block(Q!,JobHlt,E!JobMax)	! halts ;
    !Block(Q!,RunCmd,E!RunMax)	!Block(Q!,JobCmd,E!JobMax)	! cmd line ;
! -- ;
    Define Q!LastEntry = Q! - 1;	! last used location ;
    ifcr ( Q! > Q!Length )
     thenc require "?"&crlf&"?JQUEUE.DEF error: Map size larger than "&
		    cvs(Q!Length)&" ... = "&cvs(Q!)&crlf
		    "?    Increase size of map area in queue!!!"& crlf&
		    crlf message;
    endc

Define	E! = 0;
    !Block(E!,RunTime)			! universal date,,time next run ;
    !Block(E!,PPN)			! Gfd (connected) directory ;
    !Block(E!,Privs)			! Privilege word ;
	!!Ent(Zone,  6,  7, E!Privs)		! Time zone ;
	!!Ent(Sup,   1, 22, E!Privs)		! Account Supervisor ;
	!!Ent(Mode,  2, 28, E!Privs)		! Exec Mode ;
    !Block(E!,AUN)			! Login directory ;
    !Block(E!,Username,2)		! Username ;
    !Block(E!,Network)			! Network Node-Port info ;
    !Block(E!,Project,3)		! Project Code ;
    !Block(E!,License)			! Frame License ;

    !Block(E!,RecNum)			! record number within file ;
    !Block(E!,RanTime)			! universal date,,time last ran ;

    !Block(E!,CmdFile,5)		! dev:(username)file.ext block ;
	Define F! = 0;			! ** File positions ** ;
	!Block(F!,Device)		! ** [0] Device name ;
	!Block(F!,User,2)		! ** [1] Username ;
	!Block(F!,Name)			! ** [3] File Name ;
	!Block(F!,Ext)			! ** [4] File Extension ;
	!!Ent(FErr, 18, 35, E!CmdFile+F!Ext)	! Lookup/Run error code ;

    !Block(E!,LogFile,5)		! dev:(username)file.ext block ;
	!!Ent(CCLF, 18, 35, E!LogFile+F!Ext)	! CCL file name for TMPCOR ;
    !Block(E!,Label)			! Checkpoint label for restart ;
    !Block(E!,TruLim)			! TRU limit ;
	Define E!DefTruLim = 0;		! Default TRU to 0 ;

    !Block(E!,LogLim)			! Logging limits [bit fields] ;
	Define E!DefLogLim = (0 lsh 18) lor (60 lsh 0);
	!!Ent(LogL, 9, 17,E!LogLim)	! [9]  Max logfile size in pages ;
	!!Ent(TimL,18, 35,E!LogLim)	! [18] Max elapsed time in minutes ;
	! - Note: 1hr#6bits,1d#11bits,1w#14bits,1m#16bits,6m#18bits ;



    !Block(E!,Status)			! Status information [bit fields] ;

	!!Ent(Stat, 3, 2, E!Status)	! [3] Entry Status ;
	!!Ent(Proc, 6, 8, E!Status)	! [6] Processing status ;
	!!Ent(Stap, 9, 8, E!Status)	! [9]=[3]+[6] Entry+Proc status ;
	!!Ent(Req, 18,35, E!Status)	! [18] Request number {0-262144} ;

	redefine ST$$Knt  =  0;
	redefine ST$$Off  = {};
	redefine ST$$Str  = {};
	redefine ST$$All  = {};
	redefine ST$      =  0;

	ForDefS(Queued,[Wait,Special,Abort,Crash])
	ForDefS(Hold,  [None,User,System,Restart])
	ForDefS(Sched, [Wait,Frame])
	ForDefS(Proc,  [Run,Pause,Stop,Restart,Cancel])
	ForDefS(Done,  [End,Stop,Restart,Error,Lost])
	ForDefS(Abort, [Input,License,Frame,Logout,Run,Enter,Update,Append,
			Halt,Error,Notice,Time,Tru,Zap,Command,Format])
	ForDefS(Cancel,[None,Kill,Error])

ifcr false
 thenc
	! example of how to setup ForDef(S) arrays ;

	Preset!with ST$$Str;
	String  Array StatusString[ 0:ST$-1 ];
	Preset!with ST$$Off;
	Integer Array StatusOffset[ 0:ST$-1 ];
	Preset!with ST$$All;
	String  Array AllStatusString[ 0:ST$$Knt-1 ];
 endc



    !Block(E!,Action)			! Action information [bit fields] ;

	!!Ent(Log,    2, 1, E!Action)	! [2] Logging action ;
	    ForDef(JL$,[None,Append,Supersede])
	!!Ent(Disp,   3, 4, E!Action)	! [3] Log file dispition ;
	    ForDef(JD$,[Keep,Delete,Error])
	!!Ent(Spl,    2, 6, E!Action)	! [2] Spool action  **Future** ;
	    ForDef(JS$,[None,LogFile,ErrorFile,All])	!   **Future** ;
	!!Ent(Mail,   2, 8, E!Action)	! [2] Mailer action ;
	    ForDef(JM$,[None,Success,Error,Always])
	!!Ent(Form,   2,10, E!Action)	! [2] Command file format ;
	    ForDef(JF$,[TymcomX,Tops10,Tops20])
	!!Ent(MPrg,   2,10, E!Action)	! [2] Mailer ;	!   **Obsolete** ;
	    ForDef(JP$,[TUMS,RPG,ONTYME,SPECIAL])	!   **Obsolete** ;
! ** Gap ** 11 ;
	!!Ent(Restart,3,14, E!Action)	! [3] Restart action ;
	    ForDef(JR$,[None,Start,CHKPNT,Label,Continue,Repeat])
	!!Ent(Uniq,   3,17, E!Action)	! [2] Unique login ;
	    ForDef(JU$,[None,User,Dir,Path,Job])

	!!Ent(JPri,   4,21, E!Action)	! [4] Job request priority ;
	Define JP$Min = 0, JP$Max = (2^4)-1, JP$Def = 5, JP$Sys = 10;
	!	Minimum     Maximum           Default     System    ;
	Define JP$Run = JP$Min-1;	! Pointer to active running jobs ;
! ** Gap 22-30 ;
	!!Ent(LogF,   1,31, E!Action)	! [1] Logout: allow job to logout ;
	!!Ent(HaltF,  1,32, E!Action)	! [1] Halt: not allowed to halt ;
	!!Ent(CtyF,   1,33, E!Action)	! [1] Cty: log events to cty/opr ;
	!!Ent(RunF,   1,34, E!Action)	! [1] Run: not a command file ;
	!!Ent(DetF,   1,35, E!Action)	! [1] Det: no PTY-pair requested ;
  
Define E!DefAction = !Byt(JL$None,1)   lor !Byt(JD$Keep,4)  lor
!		     !Byt(JS$None,6)   lor !Byt(JP$TUMS,10) lor ;
		     !Byt(JM$Always,8) lor !Byt(JR$None,14) lor
		     !Byt(JU$Job,17)   lor !Byt(JP$Min,21) lor
		     !Byt(0,30)        lor !Byt(0,31) lor
		     !Byt(0,32)        lor !Byt(0,33) lor
		     !Byt(0,34)        lor !Byt(0,35);

    !Block(E!,Parameters,(E!ParLength div 5))	! Pars {0-80 chars} ;

    !Block(E!,OperName,2)		! oper name in radix 45 ;

    !Block(E!,Descriptor)		! First Descriptior item pair ;


Define D! = 0;
	!Block(D!,Type)			! Type, modifiers, connector ;
	    ! [3]  M - Multiplier ;
	    ! [3]  T - Descriptor Type {Month,Nth-day,Specific,Weekday} ;
	    ! [4]  MM- Month modifier {0 to 11} (invalid 12 thru 15) ;
	    ! [23] B - Body value {0 to 31} ;
	    ! [3]  C - Connector {After,Before,And,...,Except,End} ;

	    !!Ento(Mult,   3, 2, D!Type)	! Mult    ;
	    !!Ento(Type,   3, 5, D!Type)	! Type    ;
	    !!Ento(MoMult, 4, 9, D!Type)	! MoMult  ;
	    !!Ento(Body,  23,32, D!Type)	! Body    ;
	    !!Ento(Conn,   3,35, D!Type)	! Conn    ;

    Comment
	+------------------------------------+----------------------------+
	| Mult | Type | MoMult |                Body               | Conn |
	+------------------------------------+----------------------------+
         0    2 3    5 6      9 10                               32 33  35
    ;

	!Block(D!,Daytime)		! Universal daytime ;
	    ! [36] Date,,Time in universal format ;

	    !!Ento(Date,  18,17, D!Daytime)	! Date    ;
	    !!Ento(Time,  18,35, D!Daytime)	! Time    ;
	    !!Ento(Day,   36,35, D!Daytime)	! Daytime ;

	!Block(D!,Length)		! Length of descriptor block ;

    Define E!MaxItem = ( E!Length - E!Descriptor ) div D!Length ;

    Comment
	+------------------------------------+----------------------------+
	|   Date - days since  Jan 1, 1964   |  Time - fraction of a day  |
	|   Date - days since  Nov 1, 1858   |  Time - fraction of a day  |
	+------------------------------------+----------------------------+
         0                                 17 18                        35
    ;


 