Title	$1000	Do some performance tests 1000 times
Subttl	By Carl A Baltrunas	Tymshare	11-Dec-80

	.request tymcab.rel
	Search	Carl,Macten,Jobdat,Uuosym

	Extern	Typouc,Outsix,Outdec,Outoct,Getwrd,Outhun,Trimt3,Getnum

	sall

	Hld==15		; place to hold mstime for calculation

Define	Print(part1,part2,part3,part4)<
	Auxcal	L,[Asciz \part1'part2'part3'part4\]
>
Define	Printl(part1,part2,part3,part4)<
	Auxcal	L,[Asciz \part1'part2'part3'part4
\]
>

	Subttl	Main processing loop

$1000:	reset			; start-up
	move	P,[iowd 30,pdl]	; need a pdl?
	hrroi	L,.Axost	; set for printing
	seto	F,		; setup repeat
	movnm	F,rptcnt	;  count
	movsi	F,.chopn	; open 0,'dsk'
	chanio	F,[exp 17,<sixbit/dsk/>,0]
	  jrst	[Printl	(Cannot find disk.)
		 exit]
	setzm	usresc		; Initially off!

$1000$:	skipe	usresc		; Skip if no escape seen yet
$Quit:	  exit			;   else byebye!
$10000:	Print	(Test> )
	setzb	T1,flag		; Get ready for input & mark flag false.
	pushj	P,Getwrd	; Then read a Sixbit command
	movem	T1,eol		; Store end of line status
	camn	t1,[-2]		; Did he type an escape?
	  setom	usresc		; Yea! Mark a flag
	jumpe	t2,$1000$	; If blank, go elsewhere
	movsi	T4,-cmdlen	; Pointer to table of functions
$10001:	move	T3,cmdnam(T4)	; Get the table entry
	pushj	P,trimt3	; Trim down t3 to match t2's data
	camn	T2,T3		; Match?
	 pushj	P,$10002	; Yes!
	  aobjn	T4,$10001	; No, Try again?
	skipn	flag		; Skip if flag is .true.
	Printl	(?Type "HELP" for help)
	Printl	();		; always give a blank line
	jrst	$10000		; restart

	Subttl	Main processing portion -- Dispatch loop

$10002:	Printl	()			; Give a blank line
$10003:	setom	flag			; Make it .true.
	tlz	T4,777777		; Clear left half
	aos	(P)			; skip next instruction upon return
	move	Cnt,rptcnt		; Get the repeat count


$10004:	skipl	P2,cmddsp(T4)		; check for group dispatch
	  pjrst	(P2)			; no, do simple routine.
	Auxcal	L,@cmdtxt(T4)		; tell us about this function
	Printl	()

$10005:	Print	(  * );			; indent for sub-levels
	hlrz	Hld,(P2)		; get print name
	Auxcal	L,(Hld)			;  and print it
	Print	(:	);		;  just like before
	move	P1,[-400,,400]		; setup for 256 iterations

	push	P,T4			; save pointer since routine might not
	pushj	P,@cmdset(T4)		; setup for routine
	hrrz	T1,(P2)			; copy address
	mstime	Hld,			; get a time marker
	pushj	P,(T1)			; do it and return
	mstime	Knt,			; Get the time consumed
	move	T4,(P)			; re-copy pointer,
	pushj	P,@cmdclr(T4)		;    make sure we're back to state
	pop	P,T4			; then restore pointer.
	sub	Knt,Hld			; from end-begin = elapsed in ms
	move	T1,Knt			; ms needed to perform 256 times
	pushj	P,outdec		; print a decimal # (clobbers t1-3)
	Print	( ms,  Times/sec: )
	move	T1,[^d256*^d1000*^d100]
	idiv	T1,Knt			; get # per second?
	pushj	P,Outhun		; print it
	Printl	();			; blank line
	aobjn	P2,$10005		; Loop for each function
	sojg	Cnt,$10004		; Loop n times
	popj	P,			; return

	Subttl	Main processing portion -- All, None, Help

$All:	movsi	T4,-cmdlen		; obtain the list length
$1All:	push	P,T4			;   don't trust it.
	skipge	cmddsp(T4)		; get dispatch item
	pushj	P,$10003		; perform the function
	  jfcl				; ignore skip here
	pop	P,T4			;   restore it.
	aobjn	T4,$1All		; then loop through all groups

cpopj:	popj	P,			; return



$Help:	movsi	T4,-cmdlen		; get length of list
	Printl	( <esc>	Exit)
$1help:	move	T1,cmdnam(T4)		; Get the command
	pushj	P,outsix		; Type it
	hrroi	T1,.Axoci
	Auxcal	T1,11			; tab.
	Auxcal	L,@cmdtxt(T4)		; print the action
	Printl	()
	aobjn	T4,$1help		; loop
	popj	P,


	Subttl	Individual processing portion -- Create

s$memo:
c$memo:
clr$hs:	move	T3,[1b7+400b17+400b35]	; 400 pages beginning at page 400
	vclear	T3,			; make sure they're not here
	  jfcl				; ignore error return
	move	T3,[.WSRNG,,[0b7+400b17+400b35]]
	wsctl	T3,			; remove them from working set
	  jfcl
	popj	P,


create:	movei	T2,(P1)			; get a page number
	hll	T2,[3b7+1b17]		; .prrw + 1 page
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	hrrz	T2,P1			; get page number
	lsh	T2,^d9			; shift for real page address
	move	T2,(T2)			; reference it.
	aobjn	P1,create		; more?
	popj	P,			; No--Return


creall:	move	T2,[3b7+400b17+400]	; .prrw + 400 pages,,400-777
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
crealp:	hrrz	T2,P1			; get page number
	lsh	T2,^d9			; shift for real page address
	move	T2,(T2)			; reference it.
	aobjn	P1,crealp		; more?
	popj	P,			; No--Return


crepre:	push	P,P1			; save counter
crepr1:	movei	T2,(P1)			; get a page number
	hll	T2,[3b7+1b17]		; .prrw + 1 page
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	aobjn	P1,crepr1		; more?
	pop	P,P1			; restore all
touch$:	move	T2,[.WSRNG,,[1b7+400b17+400b35]]
	wsctl	T2,			; Add pages to working set
	  jfcl
	movei	T2,777			; setup for page 777
	Preref	T2,			; reference it
	  jfcl				; ignore errors
	pjrst	crealp			; loop through & touch all


crapre:	move	T2,[3b7+400b17+400]	; .prrw + 400 pages,,400-777
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	pjrst	touch$			; add pages to WS, touch & go

	Subttl	Individual processing portion -- protection


crerro:	move	T2,[1b7+1b17+400]	; .prro 1 page at 400000
	vcreate	T2,			; make a page
	  pushj	P,paeerr		; Page already exists?
	move	T2,400000(P1)		; read a location (vary it on purpose)
	move	T2,[1b7+1b17+400]	; refclear 1 page at 400000
	vclear	T2,			; bye bye!
	  jfcl				; ignore error return
	aobjn	P1,crerro		; loop
	popj	P,


crercw:	move	T2,[2b7+1b17+400]	; .prro 1 page at 400000
	vcreate	T2,			; make a page
	  pushj	P,paeerr		; Page already exists?
	movem	T2,400000(P1)		; change a word (vary it on purpose)
	move	T2,[1b7+1b17+400]	; refclear 1 page at 400000
	vclear	T2,			; bye bye!
	  jfcl				; ignore error return
	aobjn	P1,crercw		; loop
	popj	P,


crerrw:	move	T2,[3b7+1b17+400]	; .prrw 1 page at 400000
	vcreate	T2,			; make a page
	  pushj	P,paeerr		; Page already exists?
	movem	T2,400000(P1)		; change a word (vary it on purpose)
	move	T2,[1b7+1b17+400]	; refclear 1 page at 400000
	vclear	T2,			; bye bye!
	  jfcl				; ignore error return
	aobjn	P1,crerrw		; loop
	popj	P,

	Subttl	Individual processing portion -- File writing

s$outp:	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	movsi	T2,.Chent		; enter
	Chanio	T2,dftfil		; Use this file
	 Printl	(Cannot enter file for FILE-pages test)
	move	T3,[3b7+1b17+400b35]	; need to setup data page
	vcreate	T3,			; create a page
	  jfcl				; ignore errors
	popj	P,			; done.

c$outp:	push	P,dftfil		; save name
	setzm	dftfil			; null file
	movsi	T2,.Chren		; delete it
	Chanio	T2,dftfil		;   .TMP <= 1000.TMP
	  jfcl				; ignore errors
	pop	P,dftfil		; restore name
	move	T3,[1b7+1b17+400b35]	; page 400
	vclear	T3,			; make it go away
	  jfcl				; ignore error return
	popj	P,			; and return


filcre:	movsi	T2,.chcfp		; create file page
	hrrzi	T3,-377(P1)		; Get page # from index
	CHANIO	T2,T3			; Try it.
	  pushj	P,cfperr		; Error -- Report it
	aobjn	P1,filcre		; Loop till all done
	popj	P,

fcrall:	movsi	T2,.chcfp		; create file page
	movei	T3,400			; pages 1-256
	CHANIO	T2,T3			; create all of them
	  pushj	P,cfperr		; report error, if any
	popj	P,			; done.


	Subttl	Individual processing portion -- File read setup

s$inpu:	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	movsi	T2,.Chent		; enter/update
	Chanio	T2,dftfil		; Use this file
	 Printl	(Cannot enter file for test)
	movsi	T2,.chcfp		; create file page
	movei	T3,400			; pages 1-256
	CHANIO	T2,T3			; create all of them
	  pushj	P,cfperr		; report error, if any
	movsi	T2,.Chcls		; Don't forget to close it
	Chanio	T2,
	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	movsi	T2,.Chlk		; lookup
	Chanio	T2,dftfil		; Use this file
	 Printl	(Cannot find file for test)
	pjrst	clr$hs			; clr high pages & return

c$inpu:	push	P,dftfil		; save name
	setzm	dftfil			; null file
	movsi	T2,.Chren		; delete it
	Chanio	T2,dftfil		;   .TMP <= 1000.TMP
	  jfcl				; ignore errors
	pop	P,dftfil		; restore name
	pjrst	clr$hs			; clr high pages & return


	Subttl	Individual processing portion -- File reading


fildel:	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	movsi	T2,.Chent		; enter/update
	Chanio	T2,dftfil		; Use this file
	 Printl	(Cannot enter file for test)
	mstime	Hld,			; re-set overhead clock
filde1:	movsi	T2,.chdfp		; delete file page
	hrrzi	T3,-377(P1)		; Get page # from index
	CHANIO	T2,T3			; Try it.
	  pushj	P,dfperr		; Error -- Report it
	aobjn	P1,filde1		; Loop till all done
	popj	P,


filtrn:	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	movsi	T2,.Chent		; enter/update
	Chanio	T2,dftfil		; Use this file
	 Printl	(Cannot enter file for test)
	mstime	Hld,			; re-set overhead clock
	movsi	T2,.chftr		; truncate file
	movei	T3,1			;  to one word as
	CHANIO	T2,T3			;  fast as possible
	  pushj	P,dfperr		; report if error
	movsi	T2,.chdfp		; delete page #1
	movei	T3,1			;  since .chftr
	CHANIO	T2,T3			;  can't do it.
	  pushj	P,dfperr		; report any errors
	popj	P,			; done.


filmfp:	push	P,P1			; save pointer
filmf1:	movsi	T1,.chmfp		; map file page
	hrrzi	T2,(P1)			; Get page # in memory
	hrli	T2,(1b7+1b17)		; Map page .prro
	hrrzi	T3,-377(P1)		; Get page # from index
	CHANIO	T1,T2			; Try it.
	  pushj	P,dfperr		; Error -- Report it
	aobjn	P1,filmf1		; Loop till all done
	pop	P,P1			; then restore pointer
	pjrst	touch$			; touch pages and go

filmap:	push	P,P1			; save pointer
	movsi	T1,.chmfp		; map file page
	move	T2,[1b7+400b17+400b35]	; Setup for all pages
	movei	T3,1			; # 1-400 from file
	CHANIO	T1,T2			; Try it.
	  pushj	P,dfperr		; Error -- Report it
	pop	P,P1			; then restore pointer
	pjrst	touch$			; touch pages and go


	Subttl	Individual processing portion -- Simio I/O Blks/Pages


blkout:	tdza	T1,T1			; set entry
pagout:	seto	T1,
	movsi	F,.chopt		; Output
	  jrst	simio			; fall into simio code

dmpblk:	tdza	T1,T1			; set entry
dmppag:	seto	T1,
	movsi	F,.chipt		; Input
	move	T3,[3b7+1b17+400b35]	; need a page
	vcreate	T3,			; to scribble on
	  jfcl				; (not setup for read)

simio:	hrl	T2,[Exp -1000,-200]+1(T1)
	hrri	T2,377777		; Setup IOWD -n,400000
	setz	T3,			;		0

	skipn	T1			; blocks?
	  lsh	P1,2			;  yes, fixup counter

	mstime	Hld,			; re-set overhead clock

$simio:	chanio	F,T2			; Read/Write page/block
	aobjn	P1,$simio		;  until all done.
	popj	P,




	Subttl	Individual processing portion -- Page error messages

pcrerr:	movei	T4,[asciz\ cannot be removed
\]
	caia
paeerr:	movei	T4,[Asciz\ already exists
\]
pagerr:	Print	( Page )
	movei	T1,400(P1)		; Get page number
	pushj	P,outoct		; Memory Page numbers are in octal
	Auxcal	L,(T4)			; Print message
	popj	P,


dfperr:	Print	(Cannot delete file page )
	caia
cfperr:	Print	(Cannot create file page )
	move	t1,t3			; Get page number
	pushj	P,outdec		; File pages are in decimal
	Printl	();			; finish up the line
	popj	P,

	Subttl	Individual processing portion -- Enter & Close the files

s$uuos:
c$uuos:	popj	p,			; nothing to setup


entcls:	move	T1,P1			; Use this name
	movsi	T2,'TMP'		; use a .tmp extension
	setzb	T3,T4			; make sure these are clear
	movsi	F,.chent
	chanio	F,T1			; file -n,,m.tmp
	  pushj	P,ceferr		; Can't enter file error
	movsi	F,.Chcls
	chanio	F,			; Note!!! .Chcls doesn't skip
	aobjn	P1,entcls		; loop
	popj	P,

updcls:	move	T1,P1			; Use this name
	movsi	T2,'TMP'		; use a .tmp extension
	setzb	T3,T4			; make sure these are clear
	movsi	F,.chlk
	chanio	F,T1			; file -n,,m.tmp
	  jfcl				; ignore error on lookup
	movsi	F,.chent
	chanio	F,T1			; file -n,,m.tmp
	  pushj	P,ceferr		; Can't enter file error
	movsi	F,.Chcls
	chanio	F,			; Note!!! .Chcls doesn't skip
	aobjn	P1,updcls		; loop
	popj	P,

delete:	move	T1,P1			; Get file name to check up
	movsi	T2,'TMP'		; use a .tmp extension
	setzb	T3,T4			; make sure these are clear
	movsi	F,.chlk			; Lookup
	chanio	F,T1			; file -n,,m.tmp
	  pushj	P,cdferr		; Cannot fine file error!
	setzb	T3,T4
	setz	T1,			; clear name
	movsi	F,.chren
	chanio	F,T1			; Delete it
	  pushj	P,cdferr		; OOPS!
	aobjn	P1,delete		; loop
	popj	P,

cdferr:	Print	(Cannot find file )
	caia
ceferr:	Print	(Cannot ENTER file )
	move	T1,P1			; Get file name
	pushj	P,outsix		; print it (ha ha funny name)
	hrroi	T1,.Axoci		; next
	Auxcal	T1,"."			; a dot
	movsi	t1,'tmp'		; Always .TMP
	pushj	P,outsix		; and type more
	Printl	()
	popj	P,			; Continue

	Subttl	Individual processing portion -- Tape setup routine

s$tape:	move	F,[.chopn,,1]
	chanio	F,[ 3b28+17b35
		   sixbit/FTA/
			 0]
	  jrst	ftaerr			; No FTA?
iopage:	move	T3,[1b7+1b17+400]	; page to setup
	vclear	T3,			; insure a clean page
	  jfcl				; ignore error return
	move	T3,[3b7+1b17+400]	; create page 400
	vcreate	T3,
	 Printl	(Cannot create special page.)
	move	T3,[252525252525]
	setam	T3,400000
	setcam	T3,400001
	move	T3,[400000,,400002]
	blt	T3,400777
	popj	P,


c$tape:	move	T3,[1b7+1b17+400]	; page to remove
	vclear	T3,
	  jfcl				; ignore error return
	move	F,[.chcls,,1]		; Now close the file
	chanio	F,
	move	F,[.chrel,,1]		; And release it
	chanio	F,
	popj	P,			; return


ftaerr:	Printl	(No device FTA available.  Please assign the proper devices.)
	pop	P,(P)			; pop save'd P4
	pop	P,(P)			; deliberately lose a level
	popj	P,			; bye.



Tread:	move	F,[.chipt,,1]		; Input
	  caia
Twrite:	move	F,[.chopt,,1]		; Output

	move	T2,[.chmta,,1]		; Mtape function
	chanio	T2,.mtrew		; Tape rewound?
	chanio	T2,.mtdec		; Set DEC 9-track mode

	chanio	F,[Iowd 1000,400000	;   1 Page starting here
		  0]
	aobjn	P1,.-1			;  loop for (P1) pages
	popj	P,


	Subttl	Individual processing portion -- CPU exercises

s$CPU:					; maybe set ill inst trap?
c$CPU:	popj	P,			; return (clear traps)

insmov:	lsh	P1,10
	move	T1,T2			; Copy AC
	movei	T2,T1			; Addr of AC
	hrlzi	T3,T2			; ...
	movnm	T1,T2			; indirect through AC
	movss	T3			; Self swapped
	movsi	T2,T3			; Copy addr
	movmi	T2,T1			; fooling around
	hrroi	T1,T2			; get addr
	hrli	T1,T1			; use self
	blt	T1,T3			; copy through acs
	movem	T1,T3			; Ac to Ac
	exch	T1,T3			; is it the same?
	movni	T2,1			; negative
	exch	T3,T2			; swap it
	moves	T3			; Self to self
	aobjn	P1,insmov+1		; loop for all moves
	popj	P,

inslog:	lsh	P1,10
	setz	T1,			; clear
	iorb	T2,T1
	seta	T3,T2			;
	xori	T1,222222
	setcam	T2,T2
	setab	T3,T3
	andcmm	T1,T2
	iori	T1,252525
	andi	T1,525252
	seto	T2,
	xor	T3,T2
	eqv	T3,T2
	setm	T2,T1
	setcai	T1,T1
	eqvb	T1,T2
	aobjn	P1,inslog+1
	popj	P,

insjmp:	lsh	P1,10
	jumpe	T1,.+1
	skipn	T2,.+1
	aosle	T1,T3
	sojg	T2,.+1
	aoja	T3,.+1
	sosl	T1,T2
	jumpl	T2,.+1
	skipn	T1,.+1
	caie	T3,T1
	skipa	T2,T1
	camle	T2,T2
	soje	T1,.+1
	aos	T2,T1
	jumpge	T1,.+1
	cai	T1,(T2)
	aobjn	P1,insjmp+1
	popj	P,

	Subttl	More instruction stuff


insrot:	lsh	P1,10
	ash	T1,-4
	rotc	T2,(T1)
	lsh	T3,-1
	ldb	T1,[point 18,insrot,25]
	lshc	T1,-12
	rot	T3,(T2)
	dpb	T2,[point 12,T3,22]
	ashc	T2,7
	rot	T2,-14
	ldb	T1,[point 22,P1,30]
	rotc	T2,-2
	ash	T1,4
	lsh	T2,17
	dpb	T2,[point 6,T2,12]
	rot	T3,-37
	aobjn	P1,insrot+1
	popj	P,

insint:	lsh	P1,10
	addi	T1,T4
	sub	T1,P1
	addm	T2,T1
	addb	T3,T2
	sub	T1,T3
	muli	T2,147
	idiv	T1,144
	subb	T2,T3
	imulm	T1,T1
	divi	T1,252525
	add	T2,T2
	subi	T1,(T3)
	idivi	T1,T2
	addb	T2,T3
	subm	T1,T3
	aobjn	P1,insint+1
	popj	P,

insflt:	lsh	P1,10
	FAD	T1,T1
	FSBM	F,T1
	FMP	F,F
	FADB	T1,T2
	FSB	F,T1
	FADB	T1,T1
	FSBM	T2,F
	FAD	T2,T1
	FSB	T1,T2
	FADB	F,T1
	FSBB	T1,T2
	FADM	T3,T1
	FSB	F,T1
	FADB	T2,T1
	FSBM	T3,F
	aobjn	P1,insflt+1
	popj	P,


	Subttl	even more instruction stuff


insbit:	lsh	P1,10
	trcn	T1,777
	tdz	T2,T3
	tlne	T2,777444
	tlon	T3,444
	tdce	T1,T2
	trze	T2,777777
	tln	T1,12345
	tdc	T2,.-1
	tlon	T1,222222
	trc	T3,111111
	tdoe	T1,insbit+2
	trce	T2,.-2
	tlnn	T3,111222
	tdz	T1,T1
	tdo	T2,T3
	trcn	T3,T2
	tdoe	T1,T4
	tlc	T2,444444
	troe	T2,111111
	tdz	T1,T2
	aobjn	P1,insbit+1
	popj	P,


	Subttl	Individual processing portion -- Repeat function

$repeat:
	skipl	eol				; Skip if we're already at eol
	  jrst	repet0				; Else, skip this message
	Print	<
Repeat Count (>
	move	T1,rptcnt			; Get the repeat count
	pushj	P,outdec			; Print it
	Print	<) :>;				; Print prompt!
repet0:	setz	T1,
	Pushj	P,Getnum			; Get a number
	skipe	N				; Cr? Eol? ...
	movem	N,rptcnt
	popj	P,				; Apparently! ...

	Subttl	Dispatch Tables

define	dispat<

dsp	Memory,	<Virtual memory tests>,<
    X	create,	<vcreate each 1 by 1 REF>
    X	crepre,	<vcreate each PRE REF>
    X	creall,	<vcreate at once REF>
    X	crapre,	<vcreate at once WS PREREF>
    X	crerro,	<vcreate .prro REF remove>
    X	crerrw,	<vcreate .prrw CHG remove>
    X	crercw,	<vcreate .prcw CHG remove>
  >
dsp	Output,	<Disk file output tests>,<
    X	filcre,	<Create each page 1 by 1>
    X	fcrall,	<Create pages all at once>
    X	blkout,	<Dump output DSK blocks>
    X	pagout,	<Dump output DSK pages>
;    X	mwp,	<Map out create file>	; .chVMP
;    X	vmp,	<Map out write file>	; ????
  >
dsp	Input,	<Disk file input tests>,<
    X	fildel,	<Delete each page 1 by 1>
    X	filtrn,	<Truncate then delete page>
    X	dmpblk,	<Dump input DSK blocks>
    X	dmppag,	<Dump input DSK pages>
    X	filmfp,	<Map in each page 1 by 1>
    X	filmap,	<Map in pages all at once>
  >
dsp	Uuos,	<File UUO-combination tests>,<
    X	entcls,	<Create files>
    X	entcls,	<Supercede files>
    X	delete,	<Delete files>
    X	updcls,	<Update new files>
    X	updcls,	<Update old files>
    X	delete,	<Delete files>
  >
dsp	Tape,	<Magnetic tape r/w tests>,<
    X	Twrite,	<Write tape>
    X	Tread,	<Read tape>
  >
dsp	CPU,	<CPU instruction exercises>,<
    X	insmov,	<Data word manipulations>
    X	inslog,	<Logical word operations>
  nsjmp,	<Skip Jump and Compare >
    X	insrot,	<Shifts and Rotation>
    X	insint,	<Integer  arithmetic>
    X	insflt,	<Floating point code>
    X	insbit,	<Bit test operations>
  >

cmd	Help,	<This list of commands>
cmd	Repeat,	<Set the REPEAT count (default 1)>
cmd	Quit,	<Leave the program>
cmd	All,	<Perform all repeatable functions>

>


define dsp(nam,txt,tbl)< <sixbit\nam\> >
define cmd(nam,txt)< <sixbit\nam\> >
cmdnam:	dispat
    cmdlen==.-cmdnam

define dsp(nam,txt,tbl)<[asciz\txt\]>
define cmd(nam,txt)<[asciz\txt\]>
cmdtxt:	dispat

define dsp(nam,txt,tbl)<s$'nam>
define cmd(nam,txt)<>
cmdset:	dispat

define dsp(nam,txt,tbl)<c$'nam>
define cmd(nam,txt)<>
cmdclr:	dispat

define dsp(nam,txt,tbl)<
    define X(rtn,msg)<..xx..==..xx..+1>
    ..xx..==0
    tbl
    define X(rtn,msg)<Xwd [asciz\msg\],rtn>
    Xwd -..xx..,[tbl]
>
define cmd(nam,txt)<$'nam>
cmddsp:	dispat

	Subttl	Miscellaneous data


dftfil:	sixbit	/1000/
	sixbit	/tmp/
	0
	0

rptcnt:	-1
eol:	z
usresc:	block	1
flag:	z

pdl:	block	30



end	$1000
^@R(