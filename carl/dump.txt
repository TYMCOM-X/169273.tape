
internal recursive procedure LTake( integer f, r, l );
begin "license taking"
    integer g;				! lic & grant, actual lic ;
    own integer h, t, v, w, x;		! temporary pointers to records ;

    if ( w_ x_ Grt( f ) )		! get grant list for grantor ;
     then while( Rix( w ) neq r )	! search for matching gift ;
	   do if not( w_ Glk( x_ w ) )	! remembering previous grant ;
	   then bomb( ["?OPRNGF No grant found for ",NoSp(Sxt(Opr(r))),"."] );
					! w should = grant, x = previous ;

    if ( t_ v_ Gft( r ) )		! get gift list for grantee ;
     then while( Gix( t ) neq f )	! search for matching grant ;
	   do if not( t_ Rlk( v_ t ) )	! remembering previous gift ;
	       then bomb( ["?OPRNGF No gift found from ",NoSp(Sxt(Opr(f))),"."] );
					! t should = gift, v = previous ;

    if ( l land '14 )			! if any of WA WF WP ;
     then l_ l lor '14;			!  then remove all WA-WP ;
    if ( l land  '3 )			! if any of RA RF RP ;
     then l_ l lor  '3;			!  then remove all RA-RP ;

    g_ GlcRlc( t );			! variable for work ;
    h_ g land l;			! license actually removed ;

    if not( GlcRlc( t )_ g land lnot l )
     then begin "remove link"

	if ( w = x )			! grant link = grant block ;
	 then Grants( f )_ !xwd( Glk( w ), Grants( f ) )
	 else GlkRlk( x )_ !xwd( Glk( w ), GlkRlk( x ) );

	if ( t = v )			! gift link = gift block ;
	 then begin "cheat first link"

	    ! Grants( r )_ !xwd( Grt( r ), Rlk( t ) );
	    if ( t_ Rlk( v ) )
	     then begin "copy entry"

		GixRix( v )_ GixRix( t );  GlkRlk( v )_ GlkRlk( t );
		GdtRdt( v )_ GdtRdt( t );  GlcRlc( v )_ GlcRlc( t );

		if ( t = Grt( g_ Gix( t ) ) )
		 then Grants( g )_ !xwd( v, Gft( g ) )
		 else begin "transfer grant"
		    g_ Grt( g );
		    while( t neq g_ Glk( g ) )
		     do;
		    GlkRlk( g )_ !xwd( v, Rlk( g ) );
		 end "transfer grant";

	     end "copy entry"
	     else GixRix( v )_ GlkRlk( v )_ GdtRdt( v )_ 0;

	 end "cheat first link"
	 else GlkRlk( v )_ !xwd( Glk( v ), Rlk( t ) );

	if ( t )
	 then begin "free grant block"
	    GixRix( t )_ GlkRlk( t )_ GdtRdt( t )_ 0;
	    idpb( 0, t_ BitPtr( t ) );
	 end "free grant block";

     end "remove link";

    l_ h;				! remember any taken license as arg ;
    h_ AllLic( r );			! current total license left ;
    if ( h land '14 )			! any of WA-WP still available ;
     then h_ h lor '14;			!  then mask entire field ;
    if ( h land  '3 )			! any of RA-RP still available ;
     then h_ h lor  '3;			!  then mask entire field ;

    if ( l )				! any license taken ;
     then print( " ", Sxt( Opr( f ) )," to ", Sxt( Opr( r ) )," ", LicPrt( l ), crlf );

    if ( l_ ( l land lnot h ) )		! don't remove what we still have ;
     then begin "license removed"

	if ( g_ Grt( r ) )		! if any grants by this opername ;
	 then begin "taking more"

	    LTake( r, Rix( g ), l );	! take this license away ;
	    while( g_ Glk( g ) )	! if additional grants ;
	     do LTake( r, Rix(g), l );	!  take that away ;

	 end "taking more";

     end "license removed";

end "license taking";


simple procedure C.Remove;
begin "remove from entry"
    integer Lic, r;

    if not( SuperUser  or  ( Licens( MySelf ) land L!LG ) )
     then bomb( "?OPRMHL Must have ""license-grant"" license." );

    if not( length( Line ) )
     then Line_ prompt( "Remove license from: " );

    if length( Line )
     then begin "find name"

	if not( r_ FndName( Token( Line ), 0 ) )
	 then return;			! ?OPRNNF message already printed ;

	if ( r = RootNode )		! trying to remove from the ROOT ;
	 then bomb( "?OPRCGR cannot remove license from ROOT." );

	if ( r = MySelf )		! trying to remove from yourself ;
	 then bomb( "?OPRCGS cannot remove license from yourself." );

	if not( length( Line ) )
	 then Line_ Prompt( "License: " );

	if length( Line )
	 then begin "check the license"

	    if ( 0 > Lic_ LicRd( Line ) )
	     then bomb( "?OPRUNK Unknown license name." );

	    print( "Removing license grants:"& crlf );
	    LTake( Myself, r, Lic );	! take away the license ;

	 end "check the license";

     end "find name"
     else bomb( "?OPRSYN Syntax error: opername required in command." );

    print( Crlf );

end "remove from entry";


simple Procedure C.Show;
Display( ShowEntry, Line );

