
begin "CHKADD"

require "(SAILIB)SAIL.DEF" source!file;
require "(CARL)VMFILE.REQ" source!file;

Define Uppercase(x) = {Scan(x, B!Up, Dummy)};
Define White(x) = {Scan(x, B!Wht, Brk)};

Real PerCnt;
Real Total,Tax,Goods;
Real TTot,TTax,TGds;

Integer	Brk,	Dummy,	B!CR	! Break variable, dummy break, Break on CR;
,	B!Lin,	B!Cmd,	B!Brk	! Break on line, command, brk-char;
,	B!Nam,	B!Usr,	B!Ppn	! Break on Name, user, ppn;
,	B!Quote,B!Sub,	B!Par	! Break on quotes, substitution, parameter;
,	B!Num,	B!Wht,	B!Up	! Break on numerics, whitespace, uppercase;
,	Chan
,	DD,MM,LD,LM
;

String DataFile, Line, Cmd, Copy, What;

Define     $Tax=0, $Tot=1,  $Itm=2;
Preset!with "Tax", "Total", "Item";
Own safe string array Commands[ 0:2 ];


procedure BrkIni;
begin
    Define ##Cmd = {";=/ "&#ht}
    ,      ##Wht = {" "&#ht&#cr}
    ,      ##Brk = {" !@#%^&*()a=~`[]|\:;'<>,?/" & '42 & '173 & '175}
    ,      ##Sub = {"""',/= " & #ht & '177}
    ,      #Upper = {"ABCDEFGHIJKLMNOPQRSTUVWXYZ"}
    ,      #Lower = {"abcdefghijklmnopqrstuvwxyz"}
    ,      #Alpha = {#Upper & #Lower}
    ,      #Digit = {"0123456789"}
    ,      #Chars = {#Alpha & #Digit}
    ,      #Par   = {#Alpha & "$-_"}
    ;

    setbreak(B!CR _Getbreak,#cr,         null, "AINF");	! carriage-return;
    setbreak(B!Lin_Getbreak,#lf,         null, "SINF");	! line;
    setbreak(B!Nam_Getbreak,#Chars&crlf, crlf, "RXNF");	! name or token;
    setbreak(B!Usr_Getbreak, ")",        null, "SINK");	! end of username;
    setbreak(B!Ppn_Getbreak,"01234567,", null, "SXNK");	! only allow these;
    setbreak(B!Num_Getbreak,#Digit&"+-.",null, "RXNK");	! skip digits;
    setbreak(B!Wht_Getbreak,##Wht&crlf,  crlf, "RXNK");	! white space;
    setbreak(B!Brk_Getbreak,#lf & ##Brk, #cr,  "RINK");	! all break chars;
    setbreak(B!Par_Getbreak, #Par,       null, "RXNK");	! parameter variable;
    setbreak(B!Sub_Getbreak, ##Sub,      #cr,  "SINF");	! substitutions;
    setbreak(B!Cmd_Getbreak,#lf & ##Cmd, #cr,  "SINK");	! command;
    setbreak(B!Up _Getbreak, null,       null, "SINK"); ! make uppercase;
end;
require BrkIni initialization;

internal simple integer procedure FndKey( String Key; String Array CMD.Names );
begin "Find Key"
    Own Integer Low, High, CMD.Index, Cmd;

    Low_  ArrInfo( CMD.Names, 1 );	! initialize low index   ;
    High_ ArrInfo( CMD.Names, 2 );	! initialize high index  ;

    CMD.Index_ Low - 1;			! setup default: invalid ;

    For Cmd_ Low step 1 until High	! for each keyword;
     do
	If KEqu( Key, CMD.Names[ Cmd ][1 for length(Key)] )
	 then if KEqu( Key, CMD.Names[ Cmd ] )
	     then Return( Cmd )		!  -- exact match --;
	     else if CMD.Index < Low	!  -check ambiguity-;
		then CMD.Index_ Cmd	!  Ok, set instance ;
		else Return( Low - 2 );	!  No, set error    ;

    Return ( CMD.Index );		! return result;
end "Find Key";


simple string procedure Prompt( string P );
begin
    Outstr( P );
    Return( Inchwl );
end;


simple boolean procedure Numeric( String Str );
begin
    Scan( Str, B!Num, Dummy);
    Return( Length( Str ) = 0 );
end;


string procedure TOK ( reference string S );
begin
    string S1;
    White( S );				! clear whitespace;
    S1 _ scan(S, B!Brk, BRK);		! get the next word;
    if length(S1) = 0			! null?;
	then if length(S) = 0		!   null source also?;
	    then return (null)		!    yes - return null;
	    else S1 _ lop(S);		!    no  - get a character;
    White( S );				! clear whitespace;
!    Print( "TOK: ",S1,crlf );
    return(S1);				! return the token;
end;


!	*** M A I N   P R O G R A M ***
;

Do begin "find file"

    DataFile_ Prompt( "Data file? " );
    If ( Length( DataFile ) = 0 )
     then DataFile_ "CHKLST.DAT";

    If not( 0 < Chan_ VMFile( DataFile, VM$Read ) )
     then UserErr( 0,0, "Cannot find file: "&DataFile, "X" );

end "find file" until Chan > 0;

While ( Length( Line_ VMLine( Chan, Brk ) ) or Brk )
 do begin "process"

    If ( Numeric(Cmd_ Tok( Copy_ Line )) )
     then begin "numeric?"
	IntScan( Line, Brk );		! eat date ;
	Goods_ RealScan( Line, Brk );	! get amount ;
	Tax_   RealScan( Line, Brk );	! get tax ;
	Total_ RealScan( Line, Brk );	! get totals ;
     end "numeric?";

    White( Line );
    What_ Line;

    TTot_ TTot + Total;
    TTax_ TTax + Tax;
    TGds_ TGds + Goods;

    SetFormat( 10,2 );
    Print(  CvF(Goods), CvF(Tax), CvF(Total), Crlf,
	    CvF(TGds),  CvF(TTax), CvF(TTot),"  ", What[1 for 40], Crlf );
    Total_ Tax_ Goods_ 0.0;	MM_ DD_ 0;

 end "process";

VMFree( Chan );

Call( 0, "EXIT" );

End "CHKADD";