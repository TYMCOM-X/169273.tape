
begin "CARDS"

require "(CARL)MySAIL.DEF" source!file;
require "(CARL)RANDOM.REQ" source!file;
require "(CARL)SYDISP.REQ" source!file;

require 600 new!items, pnames;

define	MaxRow = 24;			! maximum row in screen array ;
define	CmdRow = MaxRow;		! row to display commands ;
define	MsgRow = MaxRow-1;		! row to display messages ;

define	DpyHand  = 0;			! screen for normal display ;
define	DpyHelp  = DpyHand + 1;		! screen for help text ;
define	DpyMax   = DpyHelp;		! maximum screen count ;

define Msg(y,x,text) = {Install(BP_point(7,Buffer[y,x],-1),text)};


boolean StillRunning;			! true while we're still going ;

integer Row, Col			! current row, col within buffer ;
,	BP, V, I			! byte pointer, value, index ;
,	ThisScreen			! which display screen ;
,	LineCount			! counter for displayed lines ;
,	StartRow			! row to start incrmental display ;
,	CmdArg				! command argument value ;
;

string S, CmdLine, MsgLine;		! text of cmd and msg lines ;

integer array Buffer[ 1:MaxRow, 1:27 ];	! screen buffer for redisplay ;

preset!with "Ace","Two","Three","Four","Five","Six","Seven",
	    "Eight","Nine","Ten","Jack","Queen","King","Ace";
safe string array RankNames[1:14];
preset!with "A","2","3","4","5","6","7","8","9","10","J","Q","K","A";
safe string array RankName[1:14];

preset!with "Club", "Diamond", "Heart", "Spade";
safe string array SuitName[1:4];


set  Cards, Play, Seen;			! places cards go  for checking ;
list Deck, Pile;			! places cards are for use ;

list Dealer, Hands;			! order of play ;
list Suits, Ranks;			! types of cards ;

! Utility routine to put a string into the buffer
;

simple integer procedure Install( integer BP; string S );
begin "install string"

    while ( length( S )) do idpb( lop( S ), BP );
    return( BP );

end "install string";

! display initialization ;

simple procedure InitDpy;
begin "initialization"

    T!Init;
    R!Init;

    StillRunning_ true;
    CmdArg_ 0;

    ThisScreen_ DpyHand;	! 0=game, 1=help ... ;
    CmdLine_ NULL;
    MsgLine_ "Type ? for Help";

end "initialization";


list procedure Shuffle( list D );
begin "shuffle"
    itemvar card;
    integer this, that;

    for this_ length( D ) downto 2			! for each card ;
     do if ( this neq that_ ran( this ) + 1 )		! if not the same ;
	 then begin "swap card"

	    remove ( card_ D[ that ] ) from D;		! remove a random ;
	    put card in D before this;			! put at index ;
	    remove ( card_ D[ this-1 ] ) from D;	! remove index ;
	    put card in D before that;			! put at random ;

	 end "swap card";

ifcr false thenc
    foreach ss | ss in suits
     do print( "each suit: ",datum(ss),crlf );
    foreach rs | rs in ranks
     do print( "each rank: ",datum(rs),crlf );
endc

    return( D );

end "shuffle";


Procedure DealCards;
begin "deal the cards"
    list itemvar hi;
    integer itemvar di;

    foreach hi | hi in Dealer		! make sure each hand ;
     do datum( hi )_ PHI;		! is reset to zero ;

    while length( Deck )		! while we have cards ;
     do begin "each hand"		! deal them out to each ;

	put (hi_ lop( Dealer )) in Dealer after inf;
	put (di_ lop( Deck )) in datum( hi ) after inf;

     end "each hand";

end "deal the cards";


list procedure NewDeck( list Suits, EachSuit, Ranks, EachRank );
begin "new deck"
    string R, S;
    integer rank, NoName;
    list itemvar deck;
    set itemvar ss, rs;
    itemvar si, ri, card;

    deck_ new( NIL );			! create an empty list ;

    foreach ss | ss in Suits
     do begin "each suit"

	put (si_ lop( EachSuit )) in EachSuit after inf;
	S_ cvis( si, NoName )[1 for 1];	! get first character of name ;
	if ( NoName )
	 then print( "newdeck: suit pname missing?" );

	rank_ 1;			! +1 starts with 2 (two) ;
	foreach rs | rs in Ranks
	 do begin "each rank"

	    put (ri_ lop( EachRank )) in EachRank after inf;
	    R_ cvis( ri, NoName );	! name of rank ;
	    if ( NoName )
	     then print( "newdeck: rank pname missing?" );
	    card_ New( rank_rank+1 );	! rank high-card points ;
	    props( card )_ 0 max (rank - 10);
	    New!PName( card, S & R );	! name each card suit-rank ;

	    put card in datum( ss );	! put card into suit ;
	    put card in datum( rs );	! put card into rank ;
	    put card in datum( deck ) after inf;

	 end "each rank";

     end "each suit";

    return( datum( deck ) );		! give caller a fresh deck ;

end "new deck";


procedure BridgeDeck;
begin "bridge deck"
    set itemvar si;
    list itemvar li;
    integer itemvar ii;
    integer index;

    Ranks_ PHI;				! initialize ;
    for index_ 2 upto 14
     do begin "ranks and labels"
	put ( si_ new( NIL ) ) in Ranks after inf;
	New!PName( si, RankName[ index ] );
	props( si )_ index;
     end "ranks and labels";

    Suits_ PHI;
    for index_ 4 downto 1
     do begin "suits and labels"
	put ( si_ new( NIL ) ) in Suits after inf;
	New!PName( si, SuitName[ index ] );
	props( si )_  5 - index;
     end "suits and labels";

    Deck_ NewDeck( Suits, EachSuit, Ranks, EachRank );

    Dealer_ PHI;
    put ( li_ new( PHI ) ) in Dealer after inf;
    New!PName( li, "West" );
    put ( li_ new( PHI ) ) in Dealer after inf;
    New!PName( li, "North" );
    put ( li_ new( PHI ) ) in Dealer after inf;
    New!PName( li, "East" );
    put ( li_ new( PHI ) ) in Dealer after inf;
    New!PName( li, "South" );

    Cards_ cvSet( Deck );
    Pile_ PHI;
    Play_ PHI;
    Seen_ PHI;

end "bridge deck";


procedure ShowHand( list itemvar MyHand; integer R, C );
begin "show hands"
    set Suit, Hand;
    set itemvar si;
    integer itemvar Card;
    string S, Name;
    integer Line, High, Dist, Rank, Size;
    boolean NoName;

    Hand_ cvSet( datum( MyHand ) );

    High_ Dist_ Rank_ 0;		! initially no points ;
    foreach card | card in Hand		! count any points ;
     do High_ High + props( card );	!  in high cards ;

    Line_ 0;
    foreach si | si in Suits
     do if ( Size_ length( Suit_ datum( si ) inter Hand ) )
	 then begin "show suit"		! show counts ;

	    if ( Size < 3 )		! few cards ;
	     then Dist_ Dist + (3 - Size);
	    if ( Size > 5 )		! many cards ;
	     then Dist_ Dist + (Size - 5);

	    S_ cvis(  si, NoName );	! check pname for suit ;
	    if ( NoName )		!  to prevent errors ;
	     then S_ "?";		!  in SAIL runtimes! ;
	    S_ (S&"        ")[1 for 9];	! little bit of formatting ;

	    foreach Card | Card in Suit
	     do begin "each card"
		Name_ cvis( Card, NoName );
		S_ S &" "& (if NoName then "-" else Name[2 to inf]);
		Rank_ Rank + datum( Card );
	     end "each card";

	    Line_ Line + 1;		! one suit per line ;
	    Msg( R+Line, C, S );	! at the designated place ;

	 end "show suit"
	 else Dist_ Dist + 3;

    Msg( R, C, "HC "&cvs(High)&"   d "&cvs(Dist)&"   c "&cvs(Rank) );

end "show hands";


! display each hand - in a diamond shape
!	N
!    W     E
!	S
!
;

procedure DisplayHand;
begin "show of hands"
    preset!with 3,10,10,17;    own integer array rows[1:4];
    preset!with 7, 2,11, 7;    own integer array cols[1:4];
    list itemvar li;
    integer hand;

    arrclr( Buffer, cvasc("     ") );	! fill in the display ;

    hand_ 0;
    foreach li | li in Dealer
     do ShowHand( li, rows[hand_hand+1], cols[hand] );

end "show of hands";


! display a help message
;

procedure DisplayHelp;
begin "help me"

    arrclr( Buffer, cvasc("     ") );	! fill in the display ;

    Msg(  4,4, ["          Command Summary"] );
    Msg(  6,4, ["? or H    Display this text"] );
    Msg(  7,4, ["N         Display normal frame information"] );
    Msg(  8,4, ["Q or ^Z   Exit to monitor level (also ^C)"] );
    Msg(  9,4, ["0 thru 9  Set argument value"] );

end "help me";


! Fill the buffer with text to be displayed
;

procedure SetupBuffer;
  begin "setup buffer"
    integer BP;

    arrclr( Buffer, cvasc("     ") );	! fill in the display ;

    Case ( ThisScreen )
     of begin "do right screen"
	[DpyHand]  DisplayHand;
	[DpyHelp]  DisplayHelp;
	[Else]      begin
		    end
     end "do right screen";

    Install( BP_ point( 7, Buffer[MsgRow,1], -1 ), MsgLine );
    Install( BP_ point( 7, Buffer[CmdRow,1], -1 ), CmdLine );
    
  end "setup buffer";

! Command Scanner
;

procedure CommandScan;
begin "command scan"
  integer C;

  while ( T!ChrP )
   do begin "get a character"

    C_ T!GetC;

    Case ( C )
     of begin "each character"

	[" "]
	    begin end;

	["C"-'100]["Z"-'100] ["Q"]["q"]
	    StillRunning_ false;
	[#CR][#Esc] begin
		MsgLine_ Null;
		CmdArg_ 0;
	     end;
	[#FF] begin
		arrclr( Buffer, cvasc("     ") );
		R!Disp( Buffer, true, 1, 1 );
	     end;

	["?"]["H"]["h"]
	    ThisScreen_ DpyHELP;

	["0"]["1"]["2"]["3"]["4"]["5"]["6"]["7"]["8"]["9"]
	    CmdArg_ (CmdArg * 10) + (C - "0");
	["H"-'100]['177]
	    CmdArg_ CmdArg div 10;

	["N"]["n"]["P"]["p"] begin
		ThisScreen_ DpyHand;
	     end;
	["S"]["s"] begin
		Deck_ cvList( Cards );
		for I_ 0 upto Ran( 7 )
		 do Deck_ Shuffle( Deck );
		DealCards;
	     end;

	[else] begin
		T!Bell;
		CmdArg_ 0;
		MsgLine_ "Type ? for Help";
	     end

	end "each character";

     end "get a character";

    if ( CmdArg )
     then CmdLine_ "Arg: " & Cvs( CmdArg )
     else CmdLine_ NULL;

  end "command scan";

! Routine to sleep for the specifed amount of time or until a
! break character arrives
;

procedure Snooze;
begin

    calli( !xwd( '31, 0 ), '72 );	! hiber  till character ;

end;


!	***  M A I N   P R O G R A M  ***
;

    BridgeDeck;
    For I_ 0 upto Ran( 7 )
     do Deck_ Shuffle( Deck );

    DealCards;

    InitDpy;

    while ( StillRunning )
     do begin "main loop"

	SetupBuffer;

	R!Disp( Buffer, true, 1, 1 );

	if ( T!ChrP )
	 then CommandScan
	 else Snooze;

    end "main loop";

  T!Fini;

  call(0,"EXIT");
    

end "CARDS";
   