entry

	PrtDis,  IntPrt,  IntZap

;
begin "XEXINT"

require "(SAILIB)SAIL.DEF" source!file;
require "(MPL)UUOSYM.DEF"  source!file;
require "(CARL)JQUEUE.DEF" source!file;
require "(CARL)XEXEC.REQ"  source!file;
require "(CARL)INTTRP.REQ" source!file;
require "(CARL)INTTRP.DEF" source!file;
!get!definitions(tymint);

internal boolean
	CHR!	! true if character-break ;	! per-port interrupts ;
,	LOS!	! true if characters lost ;
,	ORG!	! true if orange ball ;
,	ZAP!	! true if circuit zap ;
;


simple procedure ZAP( Integer Bits );
begin "ZAP"
    ZAP!_ ZAP! lor Bits;
    CHR!_ CHR! lor Bits;
end "ZAP";

ForC ZapC_ 0 stepC 1 untilC E!JobMax
 doC {
    Simple Procedure ZAP}&"ZapC"&{;
    ZAP(1 lsh ZapC);
    }
 endc


simple procedure LOS;	GetInt( LOS!,LXROCL lor LXRICL );
simple procedure ORG;	GetInt( ORG!,LXROBS );	! check for OBS and return ;
simple procedure CHR;	GetInt( CHR!,LXRBRK );	! check for BRK and return ;

internal simple procedure intZap( integer Port );
begin

    intMap( tinass( Port,!IABRK,0 ), CHR, 0 );	! break characters ;
    intMap( tinass( Port,!IALOS,0 ), LOS, 0 );	! lost characters ;
    intMap( tinass( Port,!IAORG,0 ) ,ORG, 0 );	! orange balls ;

    Case MyJob
     of begin
	ForC ZapC_ 0 stepC 1 untilC E!JobMax	! circuit zaps ;
	 doC {
	    intMap( Tinass( Port,!iaZAP,0 ), ZAP}&"ZapC"&{, 0 );
	    }
	 endc
      end;
end;


internal simple procedure PrtDis;	! disable all interrupts ;
begin
    disable (newenb(int!CHR));		! break characters ;
    disable (newenb(int!LOS));		! lost characters ;
    disable (newenb(int!ORG));		! orange balls ;
    for ZAP!_ int!ZAP step 1 until ( int!Zap + E!JobMax )
     do disable (newenb(ZAP!));		! circuit zaps ;
end;


internal simple procedure intPrt( integer Port );
begin

    Auxclv( Port,#LF ! lor !bit(27); ,!AXS8B );	! #lf is break;
    intMap( tinass(Port,!IABRK,int!CHR),CHR,0 );
    enable( newenb( int!CHR ) );
    intMap( tinass(Port,!IALOS,int!LOS),LOS,0 );
    enable( newenb( int!LOS ) );
    intMap( tinass(Port,!IAORG,int!ORG),ORG,0 );
    enable( newenb( int!ORG ) );

    Case MyJob
     of begin
	ForC ZapC_ 0 stepC 1 untilC E!JobMax	! circuit zaps ;
	 doC {
	    intMap( Tinass(Port,!iaZAP,int!Zap+ZapC), ZAP}&"ZapC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!ZAP + MyJob ) );

    Auxclr( Port, 0, !AXLDE );	! start it up by saying we're ready ;
    Auxclr( Port, 0, !AXSYB );	! then reflect the yellow ball ;
    intMak( int!ORG );		! and setup the interrupt ;

end;

end "XEXINT" $

