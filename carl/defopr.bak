begin "SETOP SYSTEMS"

require "(CARL)DEFOPR.INF"   source!file;

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)VMFILE.REQ" source!file;
require "(SAILIB)BITARY.REQ" source!file;

require "(CARL)DEFOPR.DEF"   source!file;
require "(CARL)BRKINI.REQ"   source!file;
require "(CARL)LICSUB.REQ"   source!file;
require "(CARL)DAYTIM.REQ"   source!file;


define
	C$$PRV = !bit(0)	! privileged command ;
,	C$$INV = !bit(1)	! invisible command ;
,	C$$DEV = C$$PRV lor C$$INV
;

Define All.Commands = {

!C!( Add, "      opername  Create a new opername entry.", C$$PRV )
!C!( Cancel, "   opername  Remove an opername entry.", C$$PRV )
!C!( Imitate, "  opername  Assume another identity.", C$$PRV )

!C!( Request, "  opername  Request a new opername from validations." )
!C!( List, "     opername  List one or more opername entries." )
!C!( Managed, "  opername  List all names managed by opername." )
!C!( Change, "   opername  Change information for an opername entry." )
!C!( Transfer, " oper man  Transfer opername oper to manager man." )

!C!( Grant, "    opername  Grant license to another entry." )
!C!( Remove, "   opername  Remove license from an opername entry." )
!C!( Show, "     opername  Show license grant links for an entry." )

!C!( Brief, "              Disable VERBOSE mode." )
!C!( Verbose, "            Enable verbose messages when available." )
!C!( Help, " or ?          Reprint this message." )
!C!( Exit, "               Exit program.", C$$INV )
!C!( Quit, "               Exit program." )

!C!( Debug, "              Allow developer to debug the program.", C$$DEV )
!C!( Futz, "               Do something special.", C$$DEV )
!C!( Open, "     <file>    Read system file or <file> into memory.", C$$DEV )
!C!( Statistic," opername  SHow statistics for an opername entry.", C$$DEV )
!C!( Trace, "    opername  Print trace information for an entry.", C$$INV )

    };

Redefine Len.Commands = 0;
Redefine !C!(Nam,Hlp,Flg,AltC) = {
    Ifcr Len.Commands > 0 thenc , endc CvPS(Nam)
    Redefine Len.Commands = Len.Commands + 1;};
Preset!with All.Commands;
Own safe string array CmdName[1:Len.Commands];


Redefine Len.Commands = 0;
Redefine !C!(Nam,Hlp,Flg,AltC) = {
    Ifcr Len.Commands > 0 thenc , endc
    Ifcr Length(CvPS(Flg)) thenc Flg elsec 0 endc
    Redefine Len.Commands = Len.Commands + 1;};
Preset!with All.Commands;
Own safe integer array CmdFlag[1:Len.Commands];


Redefine Len.Commands = 0;
Redefine !C!(Nam,Hlp,Flg,AltC) = {
    Ifcr Len.Commands > 0 thenc , endc Cvps(Nam) & Hlp
    Redefine Len.Commands = Len.Commands + 1;};
Preset!with All.Commands;
Own safe string array CmdText[1:Len.Commands];


Redefine !C!(Nam,Hlp,Flg,AltC) = {
    Ifcr Length(CvPS(AltC))
     thenc AltC;
     elsec C.}&{Nam}&{;
    endc};

define pagebreak = {};
define spaces = 
    {"                                                                "};
define lpad(x,y) = {(spaces[1 for y]&(x))[inf-(y-1) to inf]};


Integer vml,vmi,vmx;			! length, index-page, data-page ;
Integer MySelf, MyOper1, MyOper2, Level;
Integer BinSlot, BinChan, TxtSlot, TxtChan, Eof, EndOfFile, Count, Index, I;

Boolean Verbose, FileModified, SetMgr, SuperUser;

String  Filename, Command, Line, MessageText, Str, L;
String  MyOper, MyName;


simple procedure InitMemPointer;
begin

    begin!code
	Setzm	vml;			! initialize length of buffer ;
	Movei	'1,'677000;		! use page 677 ;
	Movem	'1,vmi;			! for the index page ;
	Movei	'1,'700000;		! start with page 700 ;
	Movem	'1,vmx;			! for the data ;
    end;

end;
require InitMemPointer initialization;


simple boolean Procedure Slt( integer A, B );
begin "compare sixbit"

    begin!code
	Label Loop, NoMore;
	Define flg = '1, ct = '13, chA = '14, chB = '15;

	Hrrzi	ct,'440600;		! sixbit pointer ;
	Hrlm	ct,A;			! address of A ;
	Hrlm	ct,B;			!  and of B ;
	Hrrz	ct,12;			! 12 characters ;
Loop:	Ildb	chA,A;			! get byte ;
	Ildb	chB,B;			!  from each string ;
	Camge	chA,chB;		! compare ;
	  Jrst	NoMore;			! .LT.  All right! ;
	Camg	chA,chB;		! compare ;
	  Sojg	ct,Loop;		! .EQ.  Try for more ;
	Tdza	flg,flg;		! .GT. or .EQ.  set to false ;
NoMore:	Seto	flg,;			! set to true ;
    end;

end "compare sixbit";


simple string procedure NoSp( string S );
begin "no spaces"

    begin!code
	define ptr= '1, ch = '13, cnt = '14, knt= '15;
	label  loop;

	Move	ptr,(sp);		! get character pointer ;
	Hrrz	knt,-1(sp);		! and string length ;
	Hllzs	-1(sp);			! initialize count field ;
	Setz	cnt,;			! clear current count ;
Loop:	Ildb	ch,ptr;			! get a character ;
	Aoj	cnt,;			! count it ;
	Caie	ch,'40;			! is it a space? ;
	  Hrrm	cnt,-1(sp);		!  no, set counter ;
	Sojg	knt,loop;		! any left? ;
    end;
    return( S );

end "no spaces";



simple string procedure SxO( integer Mem );
begin "sixbit string"

    begin!code
	define ptr = '1;

	Exch	ptr,Mem;		! save ac used ;
	Hrli	ptr,'440600;		! make into a pointer ;
	Push	p,ptr;			! save ;
	Movei	ptr,12;			! setup 0,,size ;
	Push	sp,ptr;			! store on stack ;
	Pop	p,ptr;			! restore pointer ;
	Push	sp,ptr;			! store on stack ;
	Exch	ptr,Mem;		! restore ac ;
    end;

end "sixbit string";



simple string Procedure Sxt( integer Mem );
begin "assemble text"
    preset!with "LongUserName";
    own safe string array StupidString[ 0:0 ];

    begin!code
	Define ch = '1, ct = '13, chp = '14, sxp = '15;
	Label Loop;

	Hrrzi	ct,12;			! 12 characters ;
	Hrli	sxp,'440600;		! sixbit pointer to ;
	Hrr	sxp,Mem;		! given address ;
	Move	chp,StupidString[0];	! get pointer to string space ;
Loop:	Ildb	ch,sxp;			! get byte ;
	Movei	ch,'40(ch);		! convert to ASCII ;
	Idpb	ch,chp;			! and store ;
	Sojg	ct,Loop;		! check for more ;
     end;				! end begin!code ;

    return( StupidString[0] );		! return new constant string;

end "assemble text";


simple integer procedure Traverse( integer r );
begin "traverse tree"
    own integer t;

    if ( t_ Sub( r ) )			! if a subordinate ;
     then begin "down a level"
	Level_ Level + 1;		! count levels downward ;
	return( t );			!  that is who is next ;
     end "down a level";

    if ( t_ Sib( r ) )			! if a sibling ;
     then return( t );			!  that is who is next ;

    while ( r_ Man( r ) )		! go up one level at a time ;
     do begin "up a level"
	Level_ Level - 1;		! no more downward travel ;
	if ( t_ Sib( r ) )		!  checking for siblings ;
	 then return( t );		!  return if found, else loop ;
     end "up a level";

    level_ Level - 1;			! nothing left at this level ;
    return( 0 );			! so decrement and return 0 ;

end "traverse tree";


define TopManager = '2000;
safe integer array Mgrs[ 0:TopManager-1 ];
safe string  array Managers[ 0:TopManager-1 ];
integer UsedMgrs;


simple procedure Forget;
begin "management purge"
    own integer r, l;

    arrClr( Mgrs );			! clear pointer array ;
    arrClr( Managers );			! clear text array ;
    UsedMgrs_ -1;			! reset manager count ;

    if ( BinSlot )
     then VMFree( BinSlot );

    InitMemPointer;

end "management purge";
require Forget initialization;


simple string procedure Token (reference string S);
! ----------------------------------------------------------------------;
!									;
!	Token		Scan the string S and return the first word	;
!			or punctuation character to the caller.		;
!									;
! ----------------------------------------------------------------------;
begin
    own string L;

    Scan( S, BrkWht, Brk );	! clear whitespace;
    L _ scan(S, BrkBrk, Brk);	! get the next word;
    If length(L) = 0		! null?;
	then if length(S) = 0	!   null source also?;
	    then return (null)	!    yes - return null;
	    else L _ lop(S);	!    no  - get a character;
    Scan( S, BrkWht, Brk );	! clear whitespace;
    Return(L);			! return the token;
end;



string procedure Prompt( String P );
! ----------------------------------------------------------------------;
!									;
!	Prompt		Print a line and read an answer.		;
!									;
! ----------------------------------------------------------------------;
begin
    Print( P );
    Return( inchwl );
end;


integer procedure CvPrt( String P; Integer D );
! ----------------------------------------------------------------------;
!									;
!	CvPrt		Convert the response from Prompt to decimal	;
!			and return that value if geq 0, else return	;
!			the specified default.				;
!									;
! ----------------------------------------------------------------------;
Return( If Length( L_ Prompt(P) ) and 0 leq I_ cvd(L)
	 then I
	 else D  );


Simple procedure NotImp;
Print( "Not Implemented", Crlf );



procedure Subordinate( integer r, M );
begin "make subordinate"
    integer t, v;

    if ( t_ Sub( M ) )			! any subordinates ;
     then begin "sort subordinates"

	while ( t )			! yes, check order ;
	 do if ( Slt( Opr(t),Opr(r) ) )	! of opernames provided ;
	     then t_ Sib( (v_ t) )	! try next subordinate ;
	     else done;			! we are in front ;

	if ( t )			! found one ;
	 then begin "insert new subordinate"
	    GniSib( r )_ !xwd( v_Gni( t ), t );	! setup last,next sibling ;
	    GniSib( t )_ !xwd( r, Sib( t ) );	! set next to point to me ;
	    if ( v )				! if any back pointer ;
	     then GniSib( v )_ !xwd( Gni( v ), r );
	    if ( t = Sub( M ) )			! if first subordinate ;
	     then ManSub( M )_ !xwd( Man( M ), r );
	 end "insert new subordinate"
	 else begin "tack on the end"
	    GniSib( v )_ !xwd( Gni( v ), r );	! I must be next for previous ;
	    GniSib( r )_ !xwd( v, Sib( r ) );	! and previous is my previous ;
	 end "tack on the end";

     end "sort subordinates"
     else ManSub( M )_ !xwd( Man( M ), r );	! set as only subordinate ;

    ManSub( r )_ !xwd( M, Sub( r ) );		! set as manager ;

end "make subordinate";


simple Procedure ValidateManager;
begin "validations"
    integer v;

    MySelf_ 0;			! insure security, reset each time ;

    while ( true )
     do begin "validate name"

	if ( length( Line ) )
	 then MyOper_ Line
	 else if ( "?" = MyOper_ Prompt( "Opername: " ) )
	       then begin "help wanted"
		  print( crlf &"Please enter your Opername"& crlf );
		  continue;
	       end "help wanted";

	Line_ null;			! clear this for loop-back ;

	if not( length( MyOper ) )	! allow a carriage return ;
	 then MyOper_ RootHead;		! to setup as root ;

	MyOper1_ cvSix( MyOper[ 1 for 6 ] );
	MyOper2_ cvSix( MyOper[ 7 for 6 ] );

	if ( v_ Sub( 0 ) )		! tree trunk ;
	 then while ( v )		!  for each branch ;
	  do if ( MyOper1 = OprNam( v ) ) and
		( MyOper2 = OprNa1( v ) )
	      then done			! I am the manager ;
	      else v_ Traverse( v );	!  look through the tree ;

	if ( v )			! did we fall out or find out ;
	 then begin "setup self"

	    MySelf_ v;			! found me ;
	    if ( Licens( v ) < 0 )	! check privilages ;
	     then SuperUser_ true;	!  and set ;
	    done;			! then finish validation ;

	 end "setup self";

	print( "No opername found matching ", MyOper, crlf );

     end "validate name";

    print( (if v_ Man( MySelf )
	     then "Manager: "& NoSp( Sxt( Opr( v ) ) )
	     else null),
	   crlf );

end "validations";


Procedure C.Open;
! ----------------------------------------------------------------------;
!									;
!	"OPEN"		Read a new copy of the master opername list.	;
!									;
! ----------------------------------------------------------------------;
begin
    own safe integer array arg[ 0:1 ];

    if ( BinSlot > 0 )			! Do we have the file open? ;
     then VMFree( BinSlot );		! Maybe, so close this slot ;

    print( "Reading system file."& Crlf );
    if not( length( Filename_ Line ) )
     then Filename_ System.File;

    Forget;				! empty list ;
    Count_0;

    if ( 0 > BinSlot_ VMFile( Filename, VM$Read, 1, '677 ) )
     then begin
	print( Filename," not found.  Empty list created.",Crlf );
	vml_ 1;
     end
     else begin
	vml_ VMGetC( BinSlot, VM$Size ) div 5;
	if ( vml mod 512 )		! if eof is inside a page ;
	 then vml_ (vml div 512)	!  remember that page + 1 - 1 ;
	 else vml_ (vml div 512) - 1;	!  else that page - 1 ;
	VMFree( BinSlot );		! close file ;
     end;

    if ( 0 > BinSlot_ VMFile( Filename, VM$Multi, 1+vml, '677 ) )
     then begin
	print( "SETOP master file unavailable.  Contact software support."&crlf );
	calli( 0, calli!EXIT );
	start!code uuo!EXIT end;
     end;

    if ( 0 > TxtSlot_ VMFile( Text.File, VM$Multi, 1, '676 ) )
     then begin
	print( Text.File &" not found."& crlf );
	return
     end;

    VMGetW( BinSlot, 0 );		! pull in the file ;

    ValidateManager;			! figure out who we are ;

end;


Procedure WriteFile( Boolean Reality );
! ----------------------------------------------------------------------;
!									;
!	"WRITE"		Write out a copy of the in-core system list	;
!			on the current user's directory.		;
!									;
! ----------------------------------------------------------------------;
begin

    if not( FileModified )
     then Print( "No changes made."& Crlf );
    Print( "Writing..." );

    VMFree( BinSlot );

    FileModified_ False;
    Print( "Done."& Crlf );

end;



procedure printEntry( reference integer r );
begin "print entry"
    integer t, doe;

    print(  Sxt( Opr( r ) ),
	    (if Verbose
	      then LicPrt( Licens( r ) )
	      else lpad( cvos(!lh(Licens(r))),7 )
		 & lpad( cvos(!rh(Licens(r))),7 ) ),
	    crlf,
	    (case ( t_ ( ISGDst( r ) lsh -20 ) land '77 )
	      of ([0] "#",		! St. Louis Payroll ;
		  [1] "I",		! Irvine Payroll ;
		  [else] "?")),		! ? Payroll group ;
	    (if ( t_ ISGDst( r ) land '3777777 )
	      then lpad( cvs( t ),6 )	! ISG Number ;
	      else "      "),
	    "     Manager: ",
	    (if ( t_ Man( r ) )
	      then NoSp( Sxt(Opr( t )) )
	      else "-none-"),
	    (if ( t_ISGDst( r ) lsh -26 )
	      then crlf&"            District: "&cvs( t )
	      else null),
	    crlf );

    if ( EmpMsc( r ) )			! Validated Employee? ;
     then begin "give more info"

	VMSetC( TxtSlot, EmpMsc( r )+2 );	! setup for employee ;
	Line_ VMLine( TxtSlot, Brk );		! Entry info ;
	print( "Entry date: ", TymDay( cvo( Line[1 for 12] ) ),
		" by ", NoSp( Line[14 for 12] ), crlf );

	while ( length( Line_ VMLine( TxtSlot, Brk ) ) )
	 do print( NoSp( Line ), crlf );

      end "give more info";

    print( crlf );

end "print entry";


simple procedure printGrant( integer g, ch );
begin "print grants"

    if ( ch = "R" )
     then print( (if Verbose then " from " else " f-"),
		 Sxt( Opr( Gix( g ) ) ) )
     else print( (if Verbose then " to   " else " t-"),
		 Sxt( Opr( Rix( g ) ) ) );

    print( (if verbose then " on " else null),
	    cvSDat( Gdt( g ) ),
	    (if Rdt( g )
	      then (if Verbose then " until " else "-")
		    & cvSDat( Rdt( g ) )
	      else (if Verbose then crlf&"      " else "         ") ),
	    (if Verbose
	      then LicPrt( GlcRlc( g ) )
	      else lpad( cvos(Glc(g)),7 ) & lpad( cvos(Rlc(g)),7 ) ),
	    crlf );

end "print grants";


simple procedure ShowEntry( reference integer r );
begin "show grants"
    integer t;

    print(  Sxt( Opr( r ) ),
	    lpad( cvos( r ), 6 ),
	    crlf );

    if ( t_ Gft( r ) )
     then begin "show gifts"
	printGrant( t, "R" );
	while ( t_ Rlk( t ) )
	 do printGrant( t, "R" );
     end "show gifts";

    if ( t_ Grt( r ) )
     then begin "show grants"
	printGrant( t, "G" );
	while ( t_ Glk( t ) )
	 do printGrant( t, "G" );
     end "show grants";

    print( crlf );

end "show grants";



simple procedure EntryStatus( reference integer r );
begin "set grants"
    integer t, b, c, ms, es, rs, gs, ei;

    print(  Sxt( Opr( r ) ),
	    lpad( cvos( r ), 6 ),
	    "o"
	);

    ms_ es_ rs_ gs_ 0;			! no size yet ;

    b_ BitPtr(r div 4) + vmi + I!Sat;	! get pointer into bitmap ;
    for c_ 1 upto 3
     do if ( ildb( b ) )		! bit set in bitmap? ;
	 then es_ es + 1		! marked size ;
	 else ms_ ms + 1;		! un-marked size ;

    if ( t_ Gft( r ) )
     then begin "show gifts"
	if ( ildb( b_ BitPtr(t lsh -2) + vmi + I!Sat ) )
	 then rs_ rs + 1
	 else ms_ ms + 1;
	while ( t_ Rlk( t ) )
	 do if ( ildb( b_ BitPtr(t lsh -2) + vmi + I!Sat ) )
	     then rs_ rs + 1
	     else ms_ ms + 1;
     end "show gifts";

    if ( t_ Grt( r ) )
     then begin "show grants"
	if ( ildb( b_ BitPtr(t lsh -2) + vmi + I!Sat ) )
	 then gs_ gs + 1
	 else ms_ ms + 1;
	while ( t_ Glk( t ) )
	 do if ( ildb( b_ BitPtr(t lsh -2) + vmi + I!Sat ) )
	     then gs_ gs + 1
	     else ms_ ms + 1;
     end "show grants";

    ei_ EmpMsc( r );			! employee info record ;

    print( NoSp( (if es then lpad( cvs( es ), 4 ) &"e" else "     ") &
		 (if rs then lpad( cvs( rs ), 4 ) &"r" else "     ") &
		 (if gs then lpad( cvs( gs ), 4 ) &"g" else "     ") &
		 (if ei then lpad( cvs( ei ), 8 ) &"i" else "         ") &
		 (if ms then lpad( cvs( ms ), 4 ) &"m" else null )
	       ),
	   crlf
	  );

end "set grants";


procedure printTrace( reference integer r );
begin "print trace"
    integer t;

	print(	Sxt( Opr( r ) ),
		lpad( cvos( r ), 6 ),
		" ^:",
		( if ( t_ Man( r ) ) then Sxt(Opr( t )) else "-none-      " ),
		" v:",
		( if ( t_ Sub( r ) ) then Sxt(Opr( t )) else "-none-      " ),
		" <:",
		( if ( t_ Gni( r ) ) then Sxt(Opr( t )) else "-none-      " ),
		" >:",
		( if ( t_ Sib( r ) ) then NoSp(Sxt(Opr( t ))) else "-none-" ),
		Crlf );

end "print trace";


Simple Procedure ChangeList( Boolean Change );
! ----------------------------------------------------------------------;
!									;
!	ChangeList	Perform common functions for the "CHANGE"	;
!			and "LIST" commands.				;
!									;
! ----------------------------------------------------------------------;
begin "Change-List"

    FileModified_ true;

end "Change-List";

Simple Procedure C.Change;
ChangeList( true );


Simple integer procedure FindName( string s; integer r );
begin "find a name"  MyOper1_ cvSix( S[1 for 6] );	! make string more suitable ;
    MyOper2_ cvSix( S[7 for 6] );	!  for repeated comparisons ;

    Level_ 0;				! initialize level indicator ;

     do begin "check one"		! while anything to check ;

	if ( ( MyOper1 = OprNam( r ) ) and
	     ( MyOper2 = OprNa1( r ) )  )
	 then return( r )		! a match... a winner ;
	 else r_ traverse( r );		! try the next twig ;

     end "check one" until Level leq 0;	! is this twig on the level? ;

    print( "?OPRNNF Opername ", s ," not found"& crlf&crlf );
    return( 0 );

end "find a name";


Simple procedure Display( procedure Dispatch );
begin "display entry"
    own integer r;

    if length( Line )			! anything specified? ;
     then begin "find name"

	if ( r_ FindName( Line, 0 ) )	! allow display of anyone ;
	 then Dispatch( r )		! found it... type it ;
	 else return;			! not there, goodbye. ;

     end "find name"
     else begin "all names"

	level_ 0;			! initialize level indicator ;
	r_ MySelf;			! setup major trunk ;

	 do begin "list all"		! while any wood left ;

	    Dispatch( r );		! put it on the screen ;
	    r_ traverse( r );		! any more wood? ;

	 end "list all" until Level leq 0;

     end "all names";

    print( Crlf );

end "display entry";


Simple procedure C.Managed;
begin "display entry"
    own integer r, t;

    if length( Line )
     then begin "find name"

	if not( r_ FindName( Line, MySelf ) )
	 then return;

	if ( t_ Sub( r ) )		! to manage, one must have children ;
	 then begin "ah children"

	    printEntry( t );		! list the first child ;
	    while ( t_ Sib( t ) )	! while any siblings are here ;
	     do printEntry( t );	! list them also ;

	 end "ah children"
	 else print( "%OPRNTM No one to manage for ",Sxt( Opr( r ) ),crlf );

     end "find name"
     else begin "managed syntax error"

	print( "?OPRSYN Syntax error: opername required in command."&
		crlf&crlf );
	return;

     end "managed syntax error";

    print( Crlf );

end "display entry";


simple procedure C.Transfer;
begin "transfer entry"
    own integer r, M, v;

    if not( length( Line ) )
     then Line_ prompt( "Opername to transfer: " );

    if length( Line )
     then begin "find name"

	if not( r_ FindName( Token( Line ), (if SuperUser then 0 else MySelf) ) )
	 then return;			! ?OPRNNF message already printed ;

	if not( length( Line ) )
	 then Line_ Prompt( "Manager name: " );

	if length( Line )
	 then begin "find new manager"

	    if not( M_ FindName( Line, (if SuperUser then 0 else MySelf) ) )
	     then return;		! ?OPRNNF message already printed ;

	    if ( v_ Gni( r ) )		! fixup previous sibling (if any) ;
	     then GniSib( v )_ !xwd( Gni( v ), Sib( r ) );
	    if ( v_ Sib( r ) )		! fixup next sibling (if any ) ;
	     then GniSib( v )_ !xwd( Gni( r ), Sib( v ) );
	    GniSib( r )_ 0;		! forget my current siblings ;
	    Subordinate( r, M );	! setup new manager and siblings ;

	    print( Sxt( Opr( r ) )," ==> ", Sxt( Opr( M ) ),crlf );

	 end "find new manager"
	 else begin "no manager"
	    print( "?OPRSYN Syntax error: manager name required in command."&
		    crlf&crlf );
	    return;
	 end "no manager";

     end "find name"
     else begin "managed syntax error"

	print( "?OPRSYN Syntax error: opername required in command."&
		crlf&crlf );
	return;

     end "managed syntax error";

    print( Crlf );

end "transfer entry";


simple procedure C.Add;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command.";

simple procedure C.Cancel;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command.";


simple procedure C.Debug;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command."
 else if ( memory[ !jbddt ] )
       then quick!code
		push	'17,'1;
		hrrz	'1,!jbddt;
		pushj	'17,@'1;
		pop	'17,'1;
       end
       else MessageText_ "?OPRPRV DDT not loaded.";

simple Procedure C.Imitate;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command."
 else ValidateManager;

simple procedure C.Statistic;
Display( EntryStatus );

simple procedure C.Futz;
print( crlf &"Nothing to do."& crlf );

simple Procedure C.Trace;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command."
 else Display( printTrace );


simple Procedure C.Write;
if not( SuperUser )
 then MessageText_ "?OPRPRV Invalid command."
 else WriteFile( true );



simple procedure C.Request;
return;

simple Procedure C.List;
Display( printEntry );


simple procedure C.Grant;
return;

simple procedure C.Remove;
return;

simple Procedure C.Show;
Display( ShowEntry );


simple Procedure C.Quit;
begin
    if ( BinSlot )
     then VMFree( BinSlot );
    if ( TxtSlot )
     then VMFree( TxtSlot );
    calli( 0, calli!EXIT );
    start!code uuo!EXIT end;
end;


simple procedure C.Brief;
Verbose_ false;

simple procedure C.Verbose;
Verbose_ true;


simple Procedure C.Help;
begin
    print(  Crlf,  "License manager %",
	    cvOS(!lh(memory['137])), ".",
	    cvOS(!rh(memory['137])), Crlf,
	    "Commands:", Crlf );
    for Index_ 1 upto Len.Commands
     do if ( SuperUser  or  not( CmdFlag[ Index ] land C$$Prv ) )
	 then if not( CmdFlag[ Index ] land C$$Inv )
	       then print( "  ", CmdText[ Index ], Crlf );
    print( Crlf );
end;


simple Procedure C.HelpMe;
begin
    print( crlf &"Please type HELP for help"& crlf );
end;


Simple Procedure C.Exit;
begin
    Line_ System.File;

    if ( FileModified )
     then WriteFile( false );

    C.Quit;
end;


ifcr false
 thenc

simple procedure C.FixupTexts;		! requires patch VM$Multi in C.Open ;
begin "futz"
    integer r, Brk, More, NewText, OldText, Count;
    string Line;

    if ( 0 > OldText_ VMFile( Text.File, VM$Read, 1, '777 ) )
     then begin
	MessageText_ "?OPRFUK Cannot find "& Text.File;
	return;
     end;
    if ( 0 > NewText_ VMFile( Text.File, VM$Write, 1, '776 ) )
     then begin
	MessageText_ "?OPRFUK Cannot enter "& Text.File;
	return;
     end;

    VMSetC( NewText, 0 );			! start at the beginning ;
    Print( Sxt( Opr( r ) ), EmpMsc( r ), "	" );
    VMSetC( OldText, EmpMsc( r ) + 2 );		! position past crlf ;
    VMLine( OldText, Brk );			! skip isg #, dist ;
    print( EmpMsc( r )_ VMGetC( NewText ), crlf );
    VMText( NewText, Crlf );			! write blank line ;
    while ( length( Line_ VMLine( OldText, Brk ) ) )
     do VMText( NewText, Line & Crlf );		! write remainder ;

    while r_ traverse( r )
     do begin "operate"
	if ( ISGDst( r ) land '3777777 )
	 then begin "write new employee info"
	    Print( Sxt( Opr( r ) ), EmpMsc( r ), "	" );
	    VMSetC( OldText, EmpMsc( r ) + 2 );		! position past crlf ;
	    VMLine( OldText, Brk );			! skip isg #, dist ;
	    print( EmpMsc( r )_ VMGetC( NewText ), crlf );
	    VMText( NewText, Crlf );			! write blank line ;
	    while ( length( Line_ VMLine( OldText, Brk ) ) )
	     do VMText( NewText, Line & Crlf );		! write remainder ;
	 end "write new employee info"
	 else EmpMsc( r )_ 0;
	Count_ Count + 1;
     end "operate";

    VMFree( OldText );
    VMFree( NewText );
    print( "Processed ", Count, " entries."& crlf );

end "futz";

endc

ifcr false
 thenc

Simple procedure C.LinkG;		! keep around for debugging
begin
    integer r, g, l, n;

    r_ 0;				! head of list ;
    while ( r_ traverse( r ) )		! for each node... ;
     do begin "link grants"
	if ( n_ Sub( r ) )		! if any subordinates ;
	 then begin "grants to link"
	    printTrace( n );
	    Grants( r )_ !xwd( g_ Gft( n ), Gft( r ) );
	    while ( n_ Sib( n ) )	! if any siblings ;
	     do begin "link siblings"
		printTrace( n );
		GlkRlk( g )_ !xwd( l_ Gft( n ), Rlk( g ) );
		g_ l;
	     end "link siblings";
	 end "grants to link";
     end "link grants";

end;

endc
Simple string procedure Perform!Command;
! ----------------------------------------------------------------------;
!									;
!    Perform!Command	This is the CRUX of the main program.  This	;
!			routine reads the user's command line and then	;
!			dispatches to the proper routine to perform	;
!			the specified command.  Initial data requests	;
!			for each command are also read and verified	;
!			by this routine before further processing is	;
!			allowed.					;
!									;
! ----------------------------------------------------------------------;
begin "perform command"
    Integer Cmd, Cdx, C, P;

    Line_ inchwl;				! Get a command;
    Command_ Token( Line );			! Get the first word;
    if Length( Command ) = 0			! Ignore blank lines;
     then return( Null );

    if kequ(Command, "?") then Command_ "HELP";	! "?" means "HELP";

    Cdx _ 0;
    for Cmd _ 1 step 1 until Len.Commands
     do if ( SuperUser  or  not( CmdFlag[ Cmd ] land C$$PRV ) )
	 then if kequ( Command, CmdName[ Cmd ][1 for length(Command)] )
	       then if Cdx neq 0
		     then return( "Ambigious command." )
		     else Cdx _ Cmd;

    if 0 < Cdx leq Len.Commands
     then begin "setup command defaults"

	scan( Line, BrkWht, Brk );		! remove any whitespace;
	if Line = "?"				! if first character is "?";
	 then return( CmdText[ Cdx ] );		! give an help message ;

	Command_ CmdName[ Cdx ];		! copy name for later;

	MessageText_ null;			! default message is null ;
	Case Cdx-1 of begin All.Commands end;	! perform command ;
	return( MessageText );			! return null or message ;

     end "setup command defaults"
     else return( "?OPRINV Invalid command" );	! canned error message ;

end;


TTYUP( True );
Print(  Crlf, "License manager %", Cvos(!lh(Memory['137])),
	".",Cvos(!rh(Memory['137])), Crlf );

VMValF_ false;				! try to speed up i/o ;
SuperUser_ false;			! initially we are human ;
C.Verbose;				! use longer messages ;

C.Open;					! read in the data ;

while TRUE
 do begin
    String More;
    print( "SETOP> " );
    print( More_ Perform!Command );
    if length( More )
     then print( Crlf );
 end;

end "SETOP SYSTEMS";
   o 
ur