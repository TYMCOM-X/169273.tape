Title	$1000	Do some performance tests 1000 times
Subttl	By Carl A Baltrunas	Tymshare	11-Dec-80

	.request tymcab.rel
	Search	Carl,Macten,Jobdat,Uuosym

	Extern	Typouc,Outsix,Outdec,Outoct,Getwrd,Outhun,Trimt3,Getnum

;	sall


Define	Print(part1,part2,part3,part4)<
	Auxcal	L,[Asciz \part1'part2'part3'part4\]
>
Define	Printl(part1,part2,part3,part4)<
	Auxcal	L,[Asciz \part1'part2'part3'part4
\]
>

	Subttl	Main processing loop

$1000:	reset
	move	P,[iowd 30,pdl]; need a pdl?
	hrroi	L,.Axost
	seto	F,
	movnm	F,rptcnt
	movsi	F,.chopn
	chanio	F,[	17
		 sixbit/dsk/
			0]
	  jrst	[Print	(Cannot find disk.)
		 exit]
	setzm	usresc		; Initially off!

$1000$:	skipe	usresc		; Skip if no escape seen yet
Byebye:	  exit			;   else byebye!
$10000:	Print	(Test> )
	setzb	T1,flag		; Get ready for input & mark flag false.
	pushj	P,Getwrd	; Then read a Sixbit command
	movem	T1,eol		; Store end of line status
	camn	t1,[-2]		; Did he type an escape?
	  setom	usresc		; Yea! Mark a flag
	jumpe	t2,$1000$	; If blank, go elsewhere
	movsi	T4,-dsplen	; Pointer to table of functions
	move	T3,dspchr(T4)	; Get the table entry
	pushj	P,trimt3	; Trim down t3 to match t2's data
	camn	T2,T3		; Match?
	  pushj	P,$10003	; Yes!
	aobjn	T4,.-4		; Try again?
	skipn	flag		; Skip if flag is .true.
	Printl	(?Type "HELP" for help
)
	jrst	$10000		; restart

	Subttl	Main processing portion -- All function

$10002:	movsi	14,-<dsplen-dspspc>	; obtain the list length
	move	T4,14			; copy it for loop
	push	P,14
	pushj	P,$10003		; perform the function
	jfcl				; ignore skip here
	pop	p,14
	aobjn	14,.-5			; then loop through all groups
	setz	13,			; Unnecessary, but make sure no-repeat
cpopj:	popj	P,			; return

	Subttl	Main processing portion -- Main loop

$10003:	move	13,rptcnt		; Get the repeat count
	tlz	T4,777777		; Clear left half
	setom	flag			; Make it .true.
	aos	(p)			; skip next instruction upon return
$1.003:	cail	T4,dsplen-dspspc	; unless it's special
	  jrst	$10.03			; then skip msg
	Auxcal	L,@dspmsg(T4)		; tell us about this function
	Print	(:	)
$10.03:	move	P1,[-400,,400]		; setup for 256 iterations
	pushj	P,@dspset(T4)		; do setup if special then iterations
	push	P,T4			; save pointer since routine might not
	mstime	15,			; get a time marker
	pushj	P,@dspprg(T4)		; do it and return
	mstime	14,			; Get the time consumed
	pop	P,T4			; restore pointer,
	cail	T4,dsplen-dspspc	; Only type stuff if
	  jrst	$100.3			;  it's non-special (never cleanup)
	pushj	P,@dspclr(T4)		;    make sure we're back to state
	sub	14,15			; from end-begin = elapsed in ms
	move	T1,14			; ms needed to perform 256 times
	pushj	P,outdec		; print a decimal # (clobbers t1-3)
	Print	( ms,  Times/sec: )
	move	T1,[^d256*^d1000*^d100]
	idiv	T1,14			; get # per second?
	pushj	P,Outhun		; print it
$100.3:	Print	(
)
	sojg	13,$1.003		; Loop n times
	popj	P,			; return

	Subttl	Individual processing portion -- Help text

help:	movsi	T3,-dsplen		; get length of list
	Print	(
<esc>	Exit)
helplp:	Printl	()
	move	T1,dspchr(T3)		; Get the command
	pushj	P,outsix		; Type it
	hrroi	T1,.Axoci
	Auxcal	T1,11			; tab.
	Auxcal	L,@dspmsg(T3)		; print the action
	aobjn	T3,helplp		; loop
	setz	13,			; Don't repeat help text
	popj	P,
	Subttl	Individual processing portion -- Create

creset:	move	T3,[1b7+400b17+400b35]	; 400 pages beginning at page 400
	vclear	T3,			; make sure they're not here
	  jfcl
	move	T3,[.WSRNG,,[0b7+400b17+400b35]]
	wsctl	T3,			; remove them from working set
	  jfcl
	popj	P,

create:	movei	T2,(P1)			; get a page number
	hll	T2,[3b7+1b17]		; .prrw + 1 page
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	hrrz	T2,P1			; get page number
	lsh	T2,^d9			; shift for real page address
	move	T2,(T2)			; reference it.
	aobjn	P1,create		; more?
	popj	P,			; No--Return

creall:	move	T2,[3b7+400b17+400]	; .prrw + 400 pages,,400-777
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
crealp:	hrrz	T2,P1			; get page number
	lsh	T2,^d9			; shift for real page address
	move	T2,(T2)			; reference it.
	aobjn	P1,crealp		; more?
	popj	P,			; No--Return

crepre:	push	P,P1			; save counter
crepr1:	movei	T2,(P1)			; get a page number
	hll	T2,[3b7+1b17]		; .prrw + 1 page
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	aobjn	P1,crepr1		; more?
	move	T2,[.WSRNG,,[1b7+400b17+400b35]]
	wsctl	T2,			; Add pages to working set
	  jfcl
	movei	T2,400			; setup for page 400
	Preref	T2,			; reference it
	  jfcl				; ignore errors
	pop	P,P1			; restore all
	pjrst	crealp			; loop through & touch all

crapre:	move	T2,[3b7+400b17+400]	; .prrw + 400 pages,,400-777
	VCREAT	T2,
	  pushj	P,paeerr		; Tell me where...err..err...
	move	T2,[.WSRNG,,[1b7+400b17+400b35]]
	wsctl	T2,			; Add pages to working set
	  jfcl
	movei	T2,400			; setup for page 400
	Preref	T2,			; reference it
	  jfcl				; ignore errors
	pjrst	crealp			; loop through & touch all

creclr:	move	T3,[1b7+400b17+400b35]	; 400 pages beginning at page 400
	vclear	T3,			; make sure they're not here
	  jfcl
	move	T3,[.WSRNG,,[0b7+400b17+400b35]]
	wsctl	T3,			; remove them from working set
	  jfcl
	popj	P,			; Then return

	Subttl	Individual processing portion -- File pages

filset:	movsi	T2,.Chent
	setzm	dftfil+2		; clear funny extra stuff
	setzm	dftfil+3		; made by lookup/enter uuos
	Chanio	T2,dftfil		; Use this file
	 Printl(Cannot enter file for FILE-pages test)
	popj	P,

fcrall:	movsi	T2,.chcfp		; create file page
	movei	T3,400			; pages 1-256
	CHANIO	T2,T3			; create all of them
	  pushj	P,cfperr		; report error, if any
	popj	P,			; done.

filcre:	movsi	T2,.chcfp		; create file page
	hrrzi	T3,-377(P1)		; Get page # from index
	CHANIO	T2,T3			; Try it.
	  pushj	P,cfperr		; Error -- Report it
	aobjn	P1,filcre		; Loop till all done
	popj	P,

filclr:	movsi	T2,.Chcls		; Don't forget to close it
	Chanio	T2,
	move	T3,[1b7+1b17+400b35]	; 400 pages beginning at page 1
	vclear	T3,			; make sure they're not here
	  jfcl
	popj	P,			; and return


cfperr:	 Print	(
Cannot create file page )		; Nope! Complain
	move	t1,t3			; Get page number
	pushj	P,outdec		; File pages are in decimal
	popj	P,
	Subttl	Individual processing portion -- READS

reads:	move	T2,[1b7+1b17+400]	; .prro 1 page at 400000
	vcreate	T2,			; make a page
	  pushj	P,paeerr		; Page already exists?
	move	T2,400000(P1)		; read a location (vary it on purpose)
	move	T2,[1b7+1b17+400]	; refclear 1 page at 400000
	vclear	T2,			; bye bye!
	  pushj	P,pcrerr		; Page cannot be removed?
	aobjn	P1,reads		; loop
	popj	P,

	Subttl	Individual processing portion -- Writes

writes:	move	T2,[3b7+1b17+400]	; .prrw 1 page at 400000
	vcreate	T2,			; make a page
	  pushj	P,paeerr		; Page already exists?
	movem	T2,400000(P1)		; change a location (vary it on purpose)
	move	T2,[1b7+1b17+400]	; refclear 1 page at 400000
	vclear	T2,			; bye bye!
	  pushj	P,pcrerr		; Page cannot be removed?
	aobjn	P1,reads		; loop
	popj	P,

	Subttl	Individual processing portion -- Page error messages

pcrerr:	movei	T4,[asciz\ cannot be removed
\]
	caia
paeerr:	movei	T4,[Asciz\ already exists
\]
pagerr:	Print	( Page )
	movei	T1,400(P1)		; Get page number
	pushj	P,outoct		; Memory Page numbers are in octal
	Auxcal	L,(T4)			; Print message
	popj	P,
	Subttl	Individual processing portion -- Enter & Close the files

entcls:	move	T1,P1		; Use this name
	movsi	T2,'TMP'	; use a .tmp extension
	setzb	T3,T4		; make sure these are clear
	movsi	F,.chent
	chanio	F,T1		; file -n,,m.tmp
	  pushj	P,ceferr	; Can't enter file error
	movsi	F,.Chcls
	chanio	F,		; Note!!! .Chcls doesn't skip
	aobjn	P1,entcls	; loop
	popj	P,

ceferr:	Print	(Cannot ENTER file )
prtfil:	move	T1,P1		; Get file name
	pushj	P,outsix	; print it (ha ha funny name)
	hrroi	T1,.Axoci	; next
	Auxcal	T1,"."		; a dot
	movsi	t1,'tmp'	; Always .TMP
	pushj	P,outsix	; and type more
	Printl	()
	popj	P,		; Continue

	Subttl	Individual processing portion -- Delete files created above

delete:	move	T1,P1		; Get file name to check up
	movsi	T2,'TMP'	; use a .tmp extension
	setzb	T3,T4		; make sure these are clear
	movsi	F,.chlk		; Lookup
	chanio	F,T1		; file -n,,m.tmp
	  pushj	P,cdferr	; Cannot fine file error!
	setzb	T3,T4
	setz	T1,		; clear name
	movsi	F,.chren
	chanio	F,T1		; Delete it
	  pushj	P,cdferr	; OOPS!
	aobjn	P1,delete	; loop
	setz	13,		; Can't delete more than once
	popj	P,

cdferr:	Print	(Cannot find file )
	jrst	prtfil
	Subttl	Individual processing portion -- Enter & Write to n pages

outset:	movsi	F,.chent		; we want to enter the file
	movei	T2,[asciz\Cannot enter file 1000.TMP  Please check the disk.
\]
	jrst	rwfile			; Go and Write the file

indset:	movsi	F,.chlk			; See if the file exists
	movei	T2,[Asciz\
File 1000.TMP not found.  Please use OUTPUT function to
create the file before trying to read from it.  Thanks!
\]
rwfile:	setzm	dftfil+2		; For insurance...
	setzm	dftfil+3		;   make sure this info is clear
	chanio	F,dftfil		; Using the default: 1000.tmp
	  caia
	jrst	ioprem			; Ok.  Go on to the i.o page stuff
	Auxcal	L,(T2)			;  Type the error msg
	pop	P,(p)			; Drop a level (intentionally)
	popj	P,			; And return there
	Subttl	Individual processing portion -- I/O Page removal & setup

ioprem:	move	T3,[1b7+1b17+400]	; page to remove
	vclear	T3,
	 jfcl
	move	T3,[3b7+1b17+400]	; create page 400
	vcreate	T3,
	 Printl	(Cannot create page to write to disk.)
	setz	t2,			; Make sure we can write to page 400
	setuwp	t2,			; Ok.
	 Printl	(Cannot write into Page 400,<,>, Throw in the towel!)
	move	t1,[252525252525]
	movem	t1,400000
	move	t1,[400000,,400001]
	blt	t1,400777
	popj	P,

	Subttl	Individual processing portion -- I/O for disk

outdsk:	movsi	F,.chopt		; Output
	  caia
indisk:	movsi	F,.chipt		; Input
	chanio	F,[Iowd 1000,400000	;   1 Page starting here
		  0]
	aobjn	P1,.-1
	popj	P,

dskclr:	move	T3,[1b7+1b17+400]	; page to remove
	vclear	T3,
	  jfcl
	movsi	F,.chcls		; Now close the file
	chanio	F,
	popj	P,

	Subttl	Individual processing portion -- Tape setup routine

Tapset:	move	F,[.chopn,,1]
	chanio	F,[ 3b28+17b35
		   sixbit/FTA/
			 0]
	  jrst	ftaerr				; No FTA?
	move	F,[.chmta,,1]			; Mtape function
	chanio	F,.mtrew			; Tape rewound?
	chanio	F,.mtdec			; Set DEC 9-track mode
	pushj	P,ioprem			; Setup page 400 to r/w with
	popj	P,				; skip & take care


ftaerr:	Printl	(
No device FTA available.  Please assign the proper devices.)
	pop	P,				; deliberately lose a level
	popj	P,				; bye.
	Subttl	Individual processing portion -- TREADS / TWRITE

Treads:	move	F,[.chipt,,1]		; Input
	  caia
Twrite:	move	F,[.chopt,,1]		; Output
	chanio	F,[Iowd 1000,400000	;   1 Page starting here
		  0]
	aobjn	P1,Twrite
	popj	P,

Tapclr:	move	T3,[1b7+1b17+400]	; page to remove
	vclear	T3,
	  jfcl
	move	F,[.chcls,,1]		; Now close the file
	chanio	F,
	move	F,[.chrel,,1]		; And release it
	chanio	F,
	popj	P,			; return

	Subttl	Individual processing portion -- Repeat function

repete:	skipl	eol				; Skip if we're already at eol
	  jrst	repet0				; Else, skip this message
	Print	<
Repeat Count (>
	move	T1,rptcnt			; Get the repeat count
	pushj	P,outdec			; Print it
	Print	<) :>;				; Print prompt!
repet0:	setz	T1,
	Pushj	P,Getnum			; Get a number
	skipe	N				; Cr? Eol? ...
	movem	N,rptcnt
	setz	13,				; Clear the repeat loop word
	popj	P,				; Apparently! ...

	Subttl	Dispatch Table

define	dispat<

dsp	VCreat,create,creset,creclr,	<Virtual pages created 1 by 1>
dsp	AVCrea,creall,creset,creclr,	<Virtual pages created at once>
dsp	PVCrea,crepre,creset,creclr,	<Virtual pages created PREREF 1 by 1>
dsp	APVCre,crapre,creset,creclr,	<Virtual pages created PREREF at once>
dsp	File,filcre,filset,filclr,	<File pages created 1 by 1>
dsp	AFile,fcrall,filset,filclr,	<File pages created at once>
dsp	Read,reads,cpopj,cpopj,		<Map r/o read and remove>
dsp	Write,writes,cpopj,cpopj,	<Map r/w change & remove>
dsp	Enter,entcls,cpopj,cpopj,	<ENTER/CLOSE pairs for files>
dsp	Delete,delete,cpopj,cpopj,	<Delete files created by "E">
dsp	Output,outdsk,outset,dskclr,	<Output to DSK dump mode>
dsp	Input,indisk,indset,dskclr,	<Input from DSK dump mode>
dsp	Twrite,twrite,tapset,tapclr,	<Tape writes 1 page records>
dsp	Tread,treads,tapset,tapclr,	<Tape reads 1 page records>
dsp	Nothin,cpopj,cpopj,cpopj,	<Null test - overhead check>
dsp	Help,help,cpopj,cpopj,		<This list of commands>
dsp	Repeat,repete,cpopj,cpopj,	<Set the REPEAT count (default 1)>
dsp	Exit,Byebye,cpopj,cpopj,	<Leave the program>
dsp	All,$10002,cpopj,cpopj,		<Perform all repeatable functions>
>
dspspc==4	; 4 special commands help,repeat,exit,all

define	table(nam)<
define	dsp(chr,prg,set,clr,msg)<exp	nam>
dsp'nam:	dispat
>

define dsp(chr,prg,set,clr,msg)<	<sixbit\chr\>>
dspchr:	dispat
dsplen==.-dspchr
table	prg
table	set
table	clr
define	dsp(chr,prg,set,clr,msg)<	[asciz\msg\]>
dspmsg:	dispat

	Subttl	Miscellaneous data

define dsp(chr,prg,set,clr,msg)<
    ifndef prg,<prg==.>
    ifndef set,<set==.>
    ifndef clr,<clr==.>
>
	dispat
	outstr	[asciz\
Not implemented
\]
	setz	T1,
	popj	P,

dftfil:	sixbit	/1000/
	sixbit	/tmp/
	0
	0

rptcnt:	-1
eol:	z
usresc:	block	1
flag:	z

pdl:	block	30



end	$1000
   