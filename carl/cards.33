
begin "CARDS"

require '3 lsh 24 lor '0 lsh 18 lor '200 version;

require "(CARL)MySAIL.DEF" source!file;
require "(CARL)RANDOM.REQ" source!file;
require "(CARL)SYDISP.REQ" source!file;
require "(SAILIB)VMFILE.REQ" source!file;

define	MaxRow = 24;			! maximum row in screen array ;
define	CmdRow = MaxRow;		! row to display commands ;
define	MsgRow = MaxRow-1;		! row to display messages ;
define	BidRow = 1;			! row to display bidding  ;

define	BidWid = 6;			! how wide are the bids   ;
define	BridgeTricks = 13;		! how many tricks in bridge ;
define	BridgeHands  = 4;		! how many hands  in bridge ;
define	BridgeSuits  = 4;		! how many suits  in bridge ;
define	BridgeBids   = 5;		! how many bid suits ;

define AnyCard   = '77777;		! any card in a suit ;

define	DpyHand  = 0;			! screen for normal display ;
define	DpyHelp  = DpyHand + 1;		! screen for help text ;
define	DpyMax   = DpyHelp;		! maximum screen count ;

define	DataFile = { "CARDS.DAT" };	! file for storing hands ;
define	EntrySize = 5;			! lines in file per entry ;
define	Msg(y,x,text) = {Install(BP_point(7,Buffer[y,x],-1),text)};


boolean Bidding				! true while bidding not playing ;
,	FixedDeal			! true while fixed dealer ;
,	Invisible			! true if in invisible mode ;
,	StillRunning			! true while we're still going ;
;

integer Row, Col			! current row, col within buffer ;
,	BP, V, I			! byte pointer, value, index ;
,	Tok				! breaktable for offline file ;
,	ThisScreen			! which display screen ;
,	LineCount			! counter for displayed lines ;
,	StartRow			! row to start incrmental display ;
,	CmdArg				! command argument value ;
,	Double				! times the bidding was doubled ;
,	Pass				! times the bidding was passed ;
,	BidRank				! rank bid 1-7 ;
,	BidSuit				! suit bid 1-5 (C-D-H-S-N) ;
,	Trick				! current trick ;
,	Hands				! current hand ;
,	Bids				! current bid line ;
,	Declarer, Dummy			! who is dummy, declarer ;
,	Dealer, ThisHand		! what hand is dealing, playing ;
;

string We, They;			! pairs for a deal (for now) ;
string S, CmdLine, MsgLine;		! text of cmd and msg lines ;
string array TheTrick[1:BridgeHands];	! current tricks on screen ;
string array BidLine[0:8];		! bidding strings ;

safe integer array Buffer[ 1:MaxRow, 1:27 ];	! screen buffer for redisplay ;

preset!with "Ace","Two","Three","Four","Five","Six","Seven","Eight",
	    "Nine","Ten","Jack","Queen","King","Ace","Joker";
safe string array RankNames[1:15];
preset!with "A","2","3","4","5","6","7","8","9","10","J","Q","K","A","*";
safe string array RankName[1:15];

preset!with "Club", "Diamond", "Heart", "Spade", "NoTrump";
safe string array SuitName[1:BridgeBids];
safe string array SuitBid[1:BridgeBids];	! match first bid suits ;

preset!with "South","West","North","East";
safe string array HandName[1:BridgeHands];

safe integer array Cards, Play, Seen[ 1:BridgeSuits ];	! for checking ;
safe integer array Deck, Pile, LastDeck[ 1:52 ];	! ordered cards ;
safe integer array Winners[ 1:BridgeTricks ];		! winning hands ;

safe integer array Hand[ 1:BridgeHands, 1:BridgeSuits ];

preset!with '100000, '200000, '300000, '400000;
safe integer array Suits[ 1:BridgeSuits ];	! Club,Diamond,Heart,Spade ;

preset!with '1, '2, '4, '10, '20, '40, '100, '200, '400,
	    '1000, '2000, '4000, '10000;
safe integer array Ranks[ 2:BridgeTricks+1 ];	! types of cards ;

safe integer array EachCard[ 1:BridgeSuits, 0:BridgeTricks+1 ];
safe integer array Tricks[ 1:BridgeTricks, -1:BridgeHands ]; ! each trick ;
! index 1-4 for each card, 0 for the lead card, -1 for the winning card ;

! Utility routine to put a string into the buffer
;

simple integer procedure Install( integer BP; string S );
begin "install string"

    while ( length( S )) do idpb( lop( S ), BP );
    return( BP );

end "install string";

!	routine to put a message into the message line on error
;

simple boolean procedure NeedHelp( string text(null) );
begin "need help"

    T!Bell;				! beep ;

    CmdArg_ 0;				! clear command args ;

    if ( length( text ) )		! if we supplied a text ;
     then MsgLine_ text			!  then use it ;
     else MsgLine_ "Type ? for Help";	!  else use default text ;

    return( false );

end "need help";

! display initialization ;

simple procedure InitDpy;
begin "initialization"

    T!Init;
    R!Init;

    StillRunning_ true;
    CmdArg_ 0;

    ThisScreen_ DpyHand;	! 0=game, 1=help ... ;
    CmdLine_ NULL;
    MsgLine_ "Type ? for Help";

end "initialization";


simple string procedure Cviss( integer iv; string str( "Unknown" ) );
begin "cvis string"
    own integer Rank, Suit;

    Suit_ iv lsh -15;
    for Rank_ 2 upto BridgeTricks+1
     do if ( iv = EachCard[ Suit, Rank ] )
	 then return( SuitName[ Suit ][1 for 1] & RankName[ Rank ] );

    return( str );

end "cvis string";



simple string procedure TextSuit( integer iz );
begin "text of suit"
    integer ix;
    string str;

    str_ null;
    for ix_ BridgeTricks+1 downto 2
     do if ( Ranks[ ix ] land iz )
	 then str_ str &" "& RankName[ ix ];

    return( str );

end "text of suit";



simple procedure Shuffle( integer array D );
begin "shuffle"
    integer this, that;

    for this_ arrinfo( D,2 ) downto 2		! for each card ;
     do if ( this neq that_ ran( this ) + 1 )	! if not the same ;
	 then D[ this ] swap D[ that ];		!  swap it ;

end "shuffle";


Simple Procedure DealCards;
begin "deal the cards"
    integer di, dx, ds;

    dx_ arrinfo( Hand,2 );		! highest of first order index ;
    arrClr( Hand );			! clear old hands ;

    for di_ arrinfo( Deck,1 ) upto arrinfo( Deck,2 )
     do begin "deal each hand"

	LastDeck[ di ]_ Deck[ di ];	! make a copy of the deck ;

	Dealer_ (Dealer mod dx) + 1;	! next hand ;
	ds_ Deck[ di ] lsh -15;		! figure suit ;

	Hand[ Dealer,ds ]_ Hand[ Dealer,ds ] lor Deck[ di ];

     end "deal each hand";

end "deal the cards";


procedure BridgeDeck;
begin "bridge deck"
    integer si, ri, ci;

    ci_ 0;				! start at the beginning ;
    arrclr( EachCard );
    arrclr( Deck );

    for si_ BridgeSuits downto 1
     do begin "suits and labels"

	EachCard[ si,0 ]_ Suits[ si ];	! mark the suit indicator ;

	for ri_ BridgeTricks+1 downto 2
	 do begin "ranks and labels"

	    EachCard[ si, ri ]_ Deck[ ci_ ci+1 ]_ Suits[ si ] lor Ranks[ ri ];
	    EachCard[ si,  0 ]_ EachCard[ si,0 ] lor Ranks[ ri ];

	 end "ranks and labels";

     end "suits and labels";

    arrclr( Pile );
    arrclr( Play );
    arrclr( Seen );

end "bridge deck";


simple procedure ShowHand( integer H, R, C );
begin "show hands"
    integer si, di, Card;
    string S;
    integer Dist, High, Line, Prop, Quick, Rank, Size;
    own safe integer array MyProps[0:4];

    High_ Dist_ Quick_ Rank_ 0;		! initially no points ;

    Line_ 0;
    for si_ BridgeSuits downto 1
     do begin "show suit"		! show counts ;

	Size_ 0;
	S_ ( SuitName[ si ] &"        ")[1 for 8];

	arrclr( MyProps );
	for di_ BridgeTricks+1 downto 2
	 do if ( AnyCard land Hand[ H,si ] land (Card_ EachCard[ si,di ]) )
	     then begin "each card"
		Size_ Size + 1;
		S_ S &" "& Cviss( Card, "-" )[2 to inf];
		Rank_ Rank + di;
		if ( di > 10 )
		 then begin "count face cards"
		    High_ High + ( di - 10 );
		    MyProps[ di-10 ]_ MyProps[ di-10 ] + 1;
		 end "count face cards"
	     end "each card";

	if ( Size < 3 )			! few cards ;
	 then Dist_ Dist + (3 - Size);
!	if ( Size > 5 )			! many cards ;
!	 then Dist_ Dist + (Size - 5);

	if ( Size = 0 )			! if a void... ;
	 then continue;			!  nothing to show ;

	if ( MyProps[ 4 ] )
	 then if ( MyProps[ 3 ] )
	       then Quick_ Quick + 4		! A-K = 2.0 ;
	       else if ( MyProps[ 2 ] )
		     then Quick_ Quick + 3	! A-Q = 1.5 ;
		     else Quick_ Quick + 2	! A   = 1.0 ;
	 else if ( MyProps[ 3 ] )
	       then if ( MyProps[ 2 ] )
		     then Quick_ Quick + 2	! K-Q = 1.0 ;
		     else Quick_ Quick + 1;	! K   = 0.5 ;

	Line_ Line + 1;		! one suit per line ;
	Msg( R + Line, C, S );

     end "show suit";

    Msg( R, C, HandName[ H ] &
		(if ( Bidding )
		  then	"  "&cvs(High)
			&(if Dist
			   then "  d "&cvs(Dist)
			   else null)
			&"  c "&cvs(Rank)
			&(if Quick
			   then "  q "&cvs( Quick div 2 )&
			      (if Quick mod 2 then ".5" else null)
			   else null)
		  else null )  );

end "show hands";


! display each hand - in a diamond shape
!	   N (2)
!    W (1)       E (3)
!	   S (4)
!
;

procedure DisplayHand;
begin "show of hands"
    preset!with 17, 10, 3, 10;    own integer array rows[1:BridgeHands];
    preset!with  7,  2, 7, 11;    own integer array cols[1:BridgeHands];
    integer li, mi, hi, wcount, tcount;
    string Name;

    for hi_ 0 upto 8
     do Msg( BidRow+hi, 1, BidLine[hi] );

    Msg( BidRow+1, 15, (if Bidding then "Bid" else "Play") );
    if ( 1 leq BidSuit leq BridgeBids ) and ( 1 leq BidRank leq 7 )
     then begin "show contract"
	Msg( BidRow,   12, "Contract" );
	Msg( BidRow+1, 12, cvs(BidRank) &"-"& SuitName[BidSuit] );
     end "show contract";

    ! display the current hand ;

    Msg( BidRow, 15, HandName[ Hands ] );	! put up the hand name ;
    for hi_ 1 upto BridgeHands			! display scrolling tricks ;
     do Msg( 10+hi, 7, TheTrick[ hi ] );

    for hi_ 1 upto Bridgehands
     do begin "each hand"
	if not( invisible )			! if not invisible mode ;
	   or ( Dealer = Hands )		!   or hand is my hand ;
	   or ( not( Bidding )  and		!   playing and ;
		( Tricks[1,0] ) and		!   initial trick lead ;
		( Dealer = Dummy		!   dummy hand or declarer ;
		or ( Hands = Dummy and Dealer = Declarer ) ) )
	 then ShowHand( Dealer, rows[hi], cols[hi] );
	Dealer_ ( Dealer mod Bridgehands ) + 1;	! cycle the hands ;
     end "each hand";

    wcount_ tcount_ 0;				! clear counts ;
    for hi_ 1 upto Trick-1			! foreach winning hand ;
     do begin "winning hands"
	Msg( BidRow+2 + hi, 15, HandName[ li_ Winners[ hi ] ] );
	if ( li = We[1 for 1] )  or  ( li = We[2 for 1 ] )
	 then wcount_ wcount + 1;
	if ( li = They[1 for 1] )  or  ( li = They[2 for 1 ] )
	 then tcount_ tcount + 1;
     end "winning hands";

    if not( Bidding )
     then begin "keep score"

	Msg( MsgRow, 12, "We "&cvs( wcount ) );
	Msg( MsgRow, 14, "They "&cvs( tcount ) );

	if ( 0 leq Wcount_ Wcount - BidRank - 6 )
	 then Msg( BidRow+2, 12, "Made "&
		    (if Wcount then "+"&cvs(Wcount) else null) )
	 else if ( Trick > BridgeTricks )		! hand over ;
	       then Msg( BidRow+2, 12, "Down "&cvs(-Wcount) )
	       else Msg( BidRow+2, 12, "Need "&cvs(-Wcount) );

	Name_ Null;
	for hi_ 1 upto length( We )
	 do Name_ Name & " " & HandName[ We[hi for 1] ][1 for 1];
	Msg( MsgRow-1, 12, Name );

	Name_ Null;
	for hi_ 1 upto length( They )
	 do Name_ Name & " " & HandName[ They[hi for 1] ][1 for 1];
	Msg( MsgRow-1, 14, Name );

     end "keep score";

    for hi_ 1 upto BridgeTricks
     do begin "winning cards"
	if not( li_ Tricks[ hi, -1 ] )
	 then done;
	Name_ Cviss( li, "Unk" );
	Msg( BidRow+2 + hi, 16,
	     " "& SuitName[ Tricks[hi,0] lsh -15 ][1 for 1] &
	     (if Name = SuitName[ Tricks[hi,0] lsh -15 ]
	       then " " else "*") & Name[2 to inf] );
     end "winning cards";

end "show of hands";


! display a help message
;

procedure DisplayHelp;
begin "help me"

    Msg(  4,4, ["           Command Summary"] );
    Msg(  6,4, [" 0-10,J-A  Set bid or card value"] );
    Msg(  7,4, [" C S H D   Bid a suit or play a card"] );
    Msg(  8,4, [" D or R    Without an argument, double or redouble"] );
    Msg(  9,4, [" N         No Trump during bidding"] );
    Msg( 10,4, [" P         Pass during bidding"] );
    Msg( 11,4, [" B         Backup a play or bid"] );
    Msg( 12,4, [" I         Toggle invisible mode"] );
    Msg( 13,4, [" F         Toggle fixed-dealer mode"] );
    Msg( 14,4, [" W         Write current hand to storage"] );
    Msg( 15,4, [" - or n-   New Deal or Deal nth hand from storage"] );
    Msg( 17,4, [" ?         Display this text"] );
    Msg( 18,4, ["^Z         Exit to monitor level (also ^C)"] );

end "help me";


! Fill the buffer with text to be displayed
;

procedure SetupBuffer;
begin "setup buffer"
    integer BP;

    arrclr( Buffer, cvasc("     ") );	! clear the display ;

    Case ( ThisScreen )
     of begin "do right screen"
	[DpyHand]  DisplayHand;		! show of hands ;
	[DpyHelp]  DisplayHelp;		! help message  ;
	[Else]      begin
		    end
     end "do right screen";

    Msg( MsgRow, 1, MsgLine );
    Msg( CmdRow, 1, CmdLine );
    
end "setup buffer";


simple procedure SetupDummy;
begin "setup dummy"
    integer di, hi;

    Declarer_ 0;
    hi_ SuitBid[ BidSuit ][inf for 1];
    while not( Declarer ) and ( length( SuitBid[ BidSuit ] ) )
     do if not( (hi xor (di_ lop( SuitBid[ BidSuit ] ))) land 1 )
	 then Declarer_ di;

    Dummy_ if Declarer > 2		! need to split them so ;
	    then Declarer - 2		!  we can flip low to high ;
	    else Declarer + 2;		!  and high to low ;
     
    We_ Declarer & Dummy;		! setup our accounts ;
    They_ if ( Declarer land 1 )
	   then ( Declarer + 1 ) & ( Dummy + 1 )
	   else if ( Declarer land 2 )
	         then ( Declarer + 1 ) & ( Dummy - 3 )
		 else ( Declarer - 3 ) & ( Dummy + 1 );

    Hands_ (Declarer mod BridgeHands) + 1;

end "setup dummy";


simple procedure FigureBid;
begin "figure bid"
    integer MyHand, li, MySuit, MyRank;
    integer MyLine, Brk;
    string MyBid, S;

    Arrclr( SuitBid );			! start over ;
    MyHand_ Dealer;			! setup to start with dealer ;

    for MyLine_ 1 upto Bids		! do each line ;
     do if ( length( S_ BidLine[MyLine] ) )
	 then while ( length( S ) )
	       do begin "decipher bid"

		case MyRank_ lop( MyBid_ Scan( S,Tok,brk ) )
		 of begin
		    ["1"]["2"]["3"]["4"]["5"]["6"]["7"]
		    begin
			BidRank_ MyRank - "0";
			Pass_ Double_ 0;
		    end;
		    ["P"]["p"] begin
			Pass_ Pass + 1;
			continue "decipher bid";
		     end;
		    ["D"]["d"]["R"]["r"] begin
			Double_ Double + 1;
			continue "decipher bid";
		     end
		 end;

		for MySuit_ 1 upto BridgeBids	! what suit was this ;
		 do if ( MyBid = SuitName[ MySuit ] )
		      then done;

		if ( 1 leq MySuit leq BridgeBids )
		 then begin "take a bid"
		    BidSuit_ MySuit;		! set new suit ;
		    SuitBid[ BidSuit ]_ SuitBid[ BidSuit ] & MyHand;
		 end "take a bid";

	     end "decipher bid"
	     else done;

end "figure bid";


string procedure TextHand( integer MyHand );
begin "text of hand"
    integer si, Card;
    string S;

    S_ null;				! start with nothing ;
    for si_ BridgeSuits downto 1	! for each matching suit ;
     do if ( Hand[MyHand,si] land AnyCard )
	 then S_ S &" "& SuitName[si][1 for 1] & TextSuit( Hand[MyHand,si] );

    return( HandName[ MyHand ] & S );	! one hand in a string ;

end "text of hand";


boolean procedure NewHand( string S );
begin "new hand"
    integer Rank, Suit, li;
    string Name, Card;

    Name_ Scan( S, Tok, I );		! get hand name ;
    for li_ 1 upto BridgeHands		! check it against the real names ;
     do if kequ( HandName[ li ],Name )	! if we see a match ;
	 then done;			!  we are done;

    if not( 1 leq li leq BridgeHands )	! verify index is within range ;
     then return( Needhelp( "bad hand name "& Name ) );

    Name_ Scan( S, Tok, I );		! first suit name ;
    while ( length( S ) )		! as long as we have something ;
     do begin "each suit"

	for Suit_ 1 upto BridgeSuits		! figure out what suit ;
	 do if ( Name = SuitName[ Suit ] )
	  then done;

	if not( 1 leq Suit leq BridgeSuits )	! verify that we have a suit ;
	 then return( NeedHelp( "bad suit name "& Name ) );

	while ( length( S ) )
	 do begin "each card"

	    Card_ Scan( S, Tok, I );		! get a card ;
	    for Rank_ 1 upto BridgeSuits	! check to see if a suit ;
	     do if ( Card = SuitName[ Rank ] )
		 then begin "change suits"
		    Name_ Card;
		    continue "each suit";
		 end "change suits";

	    for Rank_ 2 upto BridgeTricks+1
	     do if ( Card = RankName[ Rank ] )
		 then done;

	    if not( 2 leq Rank leq BridgeTricks+1 )
	     then return( NeedHelp( "bad card "& Card ) );

	    Hand[ li,Suit ]_ Hand[ li,Suit ] lor EachCard[ Suit,Rank ];

	 end "each card";

     end "each suit";

    return( true );			! made it!  so return ok ;

end "new hand";


simple boolean procedure OffLine( integer Arg, Cmd );
begin
    boolean flag;
    integer chan, brk, count, li;
    string  S, Name;

    case ( Cmd ) of begin
    ["-"] if not( Arg )			! request new deal ;
	   then return( false )		!  then use our deck ;
	   else begin "read entry"	!  else attempt file read ;
	      arrClr( Hand );		! clear hand values ;
!	      arrClr( BidLine );	!  and bids ;
	      flag_ true;		! assume good at first ;
	      if ( 0 < chan_ VMFile( DataFile, VM$Read, 1, '777 ) )
	       then begin "reading file"
		  if ( Arg > 1 )	! argument specified? - skip ;
		   then flag_ VMMove( chan, (Arg-1)*EntrySize );
		  if not( flag ) or ( VMGetC( chan ) = VMGetC(chan,VM$Size) )
		   then MsgLine_ "not enough hands saved: "&cvs(Arg)
		   else begin "get dealer"
		      if ( flag_ length( S_ VMLine( chan,brk ) ) )
		       then begin "first line"
			  Name_ Scan( S,Tok,brk );
			  for Dealer_ 1 upto BridgeHands
			   do if kequ( HandName[ Dealer ],Name )
			       then done;
			  if not( 1 leq Dealer leq BridgeHands )
			   then MsgLine_ "Bad file format, Dealer: "& Name & S;
			  Name_ Scan( S,Tok,brk );
			  for li_ 1 upto BridgeHands
			   do if kequ( handName[ li ],Name )
			       then done;
			  if not( 1 leq li leq BridgeHands )
			   then MsgLine_ "Bad file format, Hand: "& Name & S;
			  count_ 0;
			  while ( length( S ) )
			   do begin "set bids"
			      BidLine[ Bids ]_ BidLine[ Bids ] &
				  (Scan( S,Tok,brk )&"      ")[1 to BidWid];
			      if ( 0 = ( count_ ((count+1) mod BridgeHands ) ) )
			       then Bids_ Bids + 1;
			   end "set bids";
			  FigureBid;
			  Bidding_ if (q BidRank leq 7 ) and
				      ( 1 leq BidSuit leq BridgeBids )
				    then ( 3 > Pass )
				    else ( true );
			  if not( Bidding )		! must be playing ;
			   then SetupDummy;		! setup so we can play ;
			  Hands_ li;			! where were we? ;
		       end "first line"
		       else return( NeedHelp( "not enough hands saved: "&cvs(Arg) ) );
		   end "get dealer";

		  if ( flag )			! everything still ok? ;
		   then for count_ 1 upto BridgeHands	! read 4 lines ;
			 do begin "each hand"
			    if ( Flag_ length( S_ VMLine( chan, brk ) ) )
			     then Flag_ NewHand( S );
			    if not( Flag )	! error? then stop ;
			     then begin "bad format"
				MsgLine_ "Bad file format, Hands: "& S;
				done;		! no use to continue ;
			     end "bad format";
			 end "each hand";

		  VMFree( chan );	! clear channel ;
		  if ( Flag )		! if all went ok ;
		   then return( true )	!  we are done ;
		   else return( false );
	       end "reading file"
	       else return( NeedHelp( "no stored hands" ) );
	      ThisHand_ Hands;		! setup hands in order ;
	   end "read entry";

    ["W"] if ( 0 < chan_ VMFile( DataFile, VM$Update, 1, '777 ) )
	   then begin "writing entry"

	      count_ 1;				! assume first hand. ;
	      while ( VMMove(chan, EntrySize) )	! while able to move ;
	       do count_ count + 1;		! increment count... ;

	      VMText( chan, HandName[Dealer] );	! dealer ;
	      VMText(chan," "&Handname[Hands]);	! bidder ;

	      for li_ 1 upto Bids		! also print any bid ;
	       do if ( length( S_ BidLine[ li ] ) )
		   then while ( length( S ) )
			 do VMText( chan, " "& Scan( S,Tok,brk ) );

	      VMText( chan, crlf );		! finish with a crlf ;

	      for li_ 1 upto BridgeHands	! write each hand to file ;
	       do begin "write hands"
		  VMText( chan, TextHand( Dealer ) & crlf );
		  Dealer_ (Dealer mod BridgeHands) + 1;
	       end "write hands";

	      VMFree( chan );
	      MsgLine_ "Entry "& cvs( count ) &" written to file";

	   end "writing entry"
	   else return( NeedHelp( "cannot store hand, enter error" ) );

    [else] return( NeedHelp( "illegal offline command" ) )

    end;

    return( true );
end;


simple procedure NewDeal( integer Arg( 0 ) );
begin "new deal"
    integer li;

    CmdArg_ 0;				! reset bidding/play argument ;

    arrClr( Tricks );			! clear tricks ;
    Trick_ 1;				! reset hand ;

    arrClr( TheTrick );			! clear text ;
    TheTrick[ 4 ]_ "  ";		! add spacing ;

    arrClr( Winners );			! no winners yet ;

    MsgLine_ null;			! clear messages ;

    if ( Arg = -1 )			! special redeal same deck ;
     then begin "redeal"
	for li _ 1 upto 52		! use last deck dealt ;
	 do Deck[ li ]_ LastDeck[ li ];
	DealCards;			!  deal the cards ;
	Dealer_ Hands_ ThisHand;	!  reset order of hands ;
	return;				!  and return ;
     end "redeal";

    Bidding_ true;			! initially bidding ;
    Arrclr( BidLine );			! clear bid strings ;
    Bids_ 1;				! start bidding at line 1 ;
    BidSuit_ BidRank_ Pass_ Double_ 0;	! initialize flags ;

    arrclr( SuitBid );			! no suits bid ;
    We_ They_ null;			! clear both partnerships ;

    if not( FixedDeal )			! if rotating deal, do so ;
     then Dealer_ ( Dealer mod BridgeHands ) + 1;

    for li_ 1 upto BridgeHands
     do begin "show deal"
	BidLine[ 0 ]_ BidLine[ 0 ] & ( HandName[ Dealer ]&"      " )[1 to BidWid];
	Hands_ Dealer_ ( Dealer mod BridgeHands ) + 1;
     end "show deal";

    if not( OffLine( Arg, "-" ) )	! offline request or ;
     then begin "use our deck"		! just a new deal? ;

	for I_ 0 upto Ran( 7 )		! and shuffle it ;
	 do Shuffle( Deck );		! a random amount ;

	DealCards;			! deal out the cards ;

     end "use our deck";

end "new deal";


simple integer procedure BestHand;
begin "best hand"
    own integer di, Winner;
    integer MySuit, MyRank, Card;
    integer MaxTrump, MaxLead, LeadSuit;

    MaxTrump_ MaxLead_ 0;		! clear top cards ;
    LeadSuit_ Tricks[Trick,0] lsh -15;	! set lead suit ;

    for di_ 1 upto BridgeHands
     do begin "find winning trick"

	MySuit_ ( Card_ Tricks[ Trick, di ] ) lsh -15;

	for MyRank_ 2 upto BridgeTricks+1
	 do if ( Card = EachCard[ MySuit, MyRank ] )
	     then done;

	if ( MySuit = LeadSuit ) and	! lead suit? - check for win ;
	   ( MyRank = MaxLead_ MaxLead max MyRank )
	   and not( MaxTrump )		! if any trump, not a winner ;
	 then Winner_ di;

	if ( MySuit = BidSuit ) and	! trump suit? - check for win ;
	   ( MyRank = MaxTrump_ MaxTrump max MyRank )
	 then Winner_ di;

     end "find winning trick";

    return( Winner );

end "best hand";


boolean procedure ThePlay( integer Arg, Suit );
begin "the play"
    own integer TheHand, Winner;
    integer MySuit, MyRank, index, li;
    string card;

    if ( Suit = "B" ) and ( TheHand )	! want's to backup a play ;
     then begin "oh all right"

	TheHand_ 0 max TheHand - 1;	! decrement hand count ;
	if not( Hands_ Hands - 1 )	! rotate hand backward ;
	 then Hands_ Bridgehands;	! oops, go back to top ;

	li_ Tricks[ Trick,Hands ];	! get card ;
	Tricks[ Trick,Hands ]_ 0;	!  from the table ;

	Hand[ Hands, li lsh -15 ]_ Hand[ Hands, li lsh -15 ] lor li;

	if ( length( TheTrick[ 4 ] ) > BridgeHands )
	 then TheTrick[ 4 ]_ TheTrick[ 4 ][1 to inf-4]
	 else TheTrick[ 4 ]_ null;

	return( true );			! all done - backed up ;

     end "oh all right";

    for MySuit_ 1 upto BridgeSuits
     do if ( Suit = SuitName[ MySuit ] )
	 then done;

    if not( 1 leq MySuit leq BridgeSuits )
     then return( NeedHelp( "bad suit: "& Suit ) );

    if ( 2 leq Arg leq 10 )		! within legal card range ;
     then MyRank_ Arg			! yes, use integer value ;
     else begin "calculate arg"
	for MyRank_ 11 upto BridgeTricks+1
	 do if ( Arg = RankName[ MyRank ] )
	     then done;
	if not( 11 leq MyRank leq BridgeTricks+1 )
	 then return( NeedHelp( "illegal card: "& Arg & Suit ) );
     end "calculate arg";

    if not( 2 leq MyRank leq BridgeTricks+1 )
     then return( NeedHelp( "illegal card: "& cvs(Arg) & Suit ) );

    if ( Hand[ Hands,MySuit ] land Ranks[ MyRank ] )	! card in hand? ;
     then begin "check lead"
	if ( li_ Tricks[ Trick,0 ] lsh -15 )	! any lead suit? ;
	 then if ( MySuit neq li )		! yes, same as mine? ;
	       then if ( Hand[ Hands,li ] land AnyCard )
		     then return( NeedHelp( "must follow suit" ) );
	Hand[ Hands,MySuit ]_ Hand[ Hands,MySuit ] land lnot Ranks[ MyRank ];
     end "check lead"
     else return( NeedHelp( "card not in hand: " &
			      RankName[ MyRank ] & SuitName[ MySuit ] ) );

    TheTrick[ 4 ]_ TheTrick[ 4 ] &
		    ("  " & card[2 to inf]& card[1 for 1])[inf-3 to inf];
    TheHand_ TheHand + 1;

    Tricks[ Trick,Hands ]_ EachCard[ MySuit,MyRank ];

    for li_ 1 upto BridgeHands
     do if not( Tricks[ Trick,li ] )
	 then done;
    if not( 1 leq li leq BridgeHands )
     then begin "setup next trick"

	for index_ 1 upto 3			! scroll the tricks ;
	 do TheTrick[ index ]_ TheTrick[ index+1 ];
	TheTrick[ 4 ]_ "  ";

	Winner_ BestHand;			! find the winner ;
	for Hands_ 1 upto BridgeHands
	 do if ( Tricks[ Trick,Hands ] = Winner )
	     then done;

	Winners[ Trick ]_ Hands;		! save hand as winner ;
	TheHand_ 0;				! clear backup hand-count ;

	if ( ( Trick_ Trick + 1 ) > BridgeTricks )	! if still on regular tricks ;
	 then MsgLine_ "Game over!   Type ""-"" to play again" &
			    ", ""^C"" to quit.";

     end "setup next trick"
     else Hands_ (Hands mod BridgeHands) + 1;

    if ( Trick leq BridgeTricks )
     then MsgLine_ Null;		! clear message line ;
    return( true );			! and we are done ;

end "the play";


boolean procedure FixupBidding;
begin "fix up the bid"

    if ( length( BidLine[Bids] ) = 0 )	! any bids on this line ;
     then if ( Bids > 1 )		! any previous lines ;
	   then Bids_ Bids - 1		! yes, backup one ;
	   else return( false );

    BidLine[Bids]_ BidLine[Bids][1 to inf-BidWid];	! truncate ;

    BidSuit_ BidRank_ 0;		! nothing bid yet ;
    Pass_ Double_ 0;			! none of this either ;

    FigureBid;				! figure out the current bid ;

    return( true );

end "fix up the bid";


simple boolean Procedure TheBid( integer Arg, Suit );
begin "the bid"
    integer MySuit, card, hi;

    if ( Arg > 7 )			! bid out of range ;
     then return( NeedHelp( "bid too high: "& cvs( Arg ) ) );

    MsgLine_ null;			! clear out previous msgs ;

    if not( Arg )
     then Case ( Suit ) of begin "single"

	["B"] begin "backup hands"
	    if not( FixupBidding )	! fixup the bidding ;
	     then return( NeedHelp( "no bids" ) );
	    if not( Hands_ Hands - 1 )	! backup one hand ;
	     then Hands_ BridgeHands;	!  if 0, set to top ;
	    return( true );
	 end "backup hands";

	["D"]["R"] begin "re double"
	    if not( 2 geq Double_ Double + 1 )
	     then return( NeedHelp( "cannot "&
			    (if Suit = "R" then "re" else null) &
			    "double a redouble" ) );
	    if not( 1 leq BidRank leq 7 and 1 leq BidSuit leq BridgeBids )
	     then return( NeedHelp( "cannot "&
			    (if Suit = "R" then "re" else null) &
			    "double without a bid" ) );
	    Pass_ 0;
	    BidLine[Bids]_ BidLine[Bids] &
			    (case Double-1 of ("dbl   ", "rdbl  " ) );
	 end "re double";

	["P"] begin "passing"
	    Bidding_ if ( 1 leq BidRank leq 7 and 1 leq BidSuit leq BridgeBids )
		      then ( 3 > Pass_ Pass + 1 )
		      else ( 4 > Pass_ Pass + 1 );
	    BidLine[Bids]_ BidLine[Bids] & "Pass  ";
	    if not( Bidding )		! on a pass-out ;
	     then begin "new hand"
		if ( Pass = 4 )			! low point hands ;
		 then begin "need deal"
		    NewDeal;			! setup new deck ;
		    MsgLine_ "--New Deal--";	! let players know ;
		    return( true );		! and return ;
		 end "need deal";
		Trick_ 1;			! initialize the play ;

		SetupDummy;			! set declarer and dummy ;
		return( true );			! and return ;

	     end "new hand";
	 end "passing";

	 [else] return( NeedHelp( "illegal command: "& Suit ) )

     end "single"
     else begin "supplied"

	if ( Suit = "B" )
	 then begin "act like rubout"
	    CmdArg_ CmdArg div 10;
	    return( true );
	 end "act like rubout";

	if not( 1 leq Arg leq 7 )	! within legal bid range ;
	 then return( NeedHelp( "bid out of range: " & cvs( Arg ) & Suit ) );

	for MySuit_ 1 upto BridgeBids
	 do if ( Suit = SuitName[ MySuit ] )
	     then done;
	if not( 1 leq MySuit leq BridgeBids )
	 then return( NeedHelp( "bad suit: "& Suit ) );

	if ( Arg > BidRank )		! next level? all ok ;
	 then begin "new rank"
	    BidRank_ Arg;		! set bid level ;
	    BidSuit_ MySuit;		! set suit ;
	 end "new rank"
	 else if ( Arg = BidRank ) and ( MySuit > BidSuit )
	       then BidSuit_ MySuit	! higher suit? ;
	       else return( NeedHelp("bid not high enough: "&cvs(Arg)&Suit) );

	Pass_ Double_ 0;		! reset passing and doubling ;
	BidLine[Bids]_ BidLine[Bids] &	! add bid to line ;
		( cvs(Arg)&SuitName[MySuit][1 for 1]&"      ")[1 to BidWid];

	SuitBid[ MySuit ]_ SuitBid[ MySuit ] & Hands;

     end "supplied";
    
    Hands_ (Hands mod BridgeHands) + 1;

    if ( length( BidLine[Bids] ) > ( 3 * BidWid ) )
     then begin "new bids"
	if ( 8 < Bids_ Bids + 1 )
	 then for Bids_ 2 upto 8
	       do BidLine[ Bids-1 ]_ BidLine[ Bids ];
	Bidline[ Bids ]_ null;
     end "new bids";

    return( true );

end "the bid";

! Command Scanner
;

procedure CommandScan;
begin "command scan"
  integer C;

  ThisScreen_ DpyHand;

  while ( T!ChrP )
   do begin "get a character"

    C_ T!GetC;

    Case ( C )
     of begin "each character"

	[" "]
	    begin end;

	["C"-'100]["Z"-'100]
	    StillRunning_ false;
	[#CR][#Esc] begin
		MsgLine_ Null;
		CmdArg_ 0;
	     end;
	[#FF] begin
		arrclr( Buffer, cvasc( #sp&#sp&#sp&#sp&#sp ) );
		R!Disp( Buffer, true, 1, 1 );
	     end;

	["?"]
	    ThisScreen_ DpyHELP;

	["1"]["2"]["3"]["4"]["5"]["6"]["7"]["8"]["9"]["0"]
	    CmdArg_ (CmdArg * 10) + (C - "0");

	["H"-'100]['177]
	    if ( CmdArg leq 10 )
	     then CmdArg_ CmdArg div 10
	     else CmdArg_ 0;

	["A"]["a"]["K"]["k"]["Q"]["q"]["J"]["j"]
	    if not( CmdArg ) and not( Bidding )
	     then CmdArg_ C land '137
	     else NeedHelp( "illegal card value" );

	["F"]["f"]
	    FixedDeal_ not( FixedDeal );

	["I"]["i"]
	    Invisible _ not( Invisible );

	["P"]["p"] begin
	    if ( Bidding )
	     then TheBid( CmdArg, C land '137 )
	     else NeedHelp( "illegal command, type ? for help" );
	    CmdArg_ 0;
	 end;
	["B"]["b"]["C"]["c"]["D"]["d"]["H"]["h"]
	["N"]["n"]["S"]["s"]
	 begin
	    if ( Bidding )
	     then TheBid( CmdArg, C land '137 )
	     else ThePlay( CmdArg, C land '137 );
	    CmdArg_ 0;
	 end;
	["R"]["r"]
	 begin
	    if ( Bidding )
	     then TheBid( CmdArg, C land '137 )
	     else NewDeal( -1 );
	    CmdArg_ 0;
	 end;
	["-"] NewDeal( CmdArg );

	["W"]["w"]["L"]["l"] 
	    OffLine( CmdArg, C land '137 );

	[else] NeedHelp

	end "each character";

     end "get a character";

    if not( Bidding or BidRank or BidSuit )
     then NewDeal;

    if ( Bidding )			! preset cmdline with ;
     then CmdLine_ "Bid: "		!  the proper prompt ;
     else CmdLine_ "Card: ";

    if ( CmdArg )
     then if ( CmdArg leq "@" ) or ( CmdArg > "Q" )
	   then CmdLine_ CmdLine & Cvs( CmdArg )
	   else CmdLine_ CmdLine & CmdArg & null
     else CmdLine_ null;

  end "command scan";


! Routine to sleep forever or until a character arrives
;

procedure Snooze;
begin

    calli( !xwd( '31, 0 ), '72 );	! hiber  till character ;

end;


!	***  M A I N   P R O G R A M  ***
;

    setbreak( Tok_ getbreak, " "&#HT, crlf&" "&#ht, "SNIFT" );
    VMInit( 0, 0 );			! no cache ;

    FixedDeal_ Invisible_ true;		! default "on" ;
    BridgeDeck;				! initialize deck ;
    Dealer_ 1;				! start with "south" as dealer ;
    NewDeal;				! set everything straight ;

    InitDpy;				! initialize display ;

    while ( StillRunning )
     do begin "main loop"

	SetupBuffer;			! put display into buffer ;

	R!Disp( Buffer, true, 1, 1 );	! re-display, abort on input ;
	T!Cpos( CmdRow, length( CmdLine ) + 1 );

	if ( T!ChrP )			! if character received ;
	 then CommandScan		!  process as a command ;
	 else Snooze;			!  else sleep forever ;

    end "main loop";

  T!Fini;				! finish terminal i/o ;

  call(0,"EXIT");			! exit to EXEC ;
    

end "CARDS";
8 