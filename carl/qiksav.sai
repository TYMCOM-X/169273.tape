
begin "QIKSAV"

require "(SAILIB)SAIL.DEF"    source!file;
require "(SAILIB)UUOSYM.DEF"  source!file;
require "(CARL)QIKSAV.DEF"    source!file;
require "(SAILIB)VMFILE.REQ"  source!file;


integer Slot, Chan.i, Chan.o;
integer Str!PPU, Str!CHR;

safe integer array Page.i, Page.o[0:1];
safe integer array Dev[0:2];
safe integer array DSKCHR[ 0:7 ];



define
	INP.PG = '777, INP.AD = INP.PG lsh 9	! Input page ;
,	OUT.PG = '776, OUT.AD = OUT.PG lsh 9	! Output page ;
,	DIR.PG = '775, DIR.AD = DIR.PG lsh 9	! Directory page ;
,	SPG.PG = '774, SPG.AD = SPG.PG lsh 9	! Spages page ;
,	HOM.PG = '773, HOM.AD = HOM.PG lsh 9	! HOM page ;
;

define Str  = { Dev[1] };
define D(n) = { (memory[ HOM.AD+(n) ] land '777777) };
define X(n) = { ( cvSIX( "n" ) ) };


simple procedure CopyPage( integer DPage, FPage, Code );
begin "copy page"

    Page.i[1]_ DPage;					! map "input" page ;
    Chnior( Chan.i, Page.i[0], !chSMP );

    VMGetW( Slot, (FPage*512) );			! map "output"  page ;
    Page.o[1]_ calli( SPG.PG, calli!VDSKPT );		! find physical page ;
    Chnior( Chan.o, Page.o[0], !chSMP );		! map  physical page ;

    arrBlt( memory[OUT.AD], memory[INP.AD], 512 );	! copy data ;
    memory[ DIR.AD+FPage ]_ Code;			! mark directory ;

    calli( !xwd( '2002, OUT.PG ), calli!VCLEAR );		! unmap physical(s) ;

end "copy page";



    Str_ 0;					! first structure ;
    do begin "get structure"

	Str_ calli( Str, calli!SYSSTR );	! loop for each ;
	if ( Str )
	 then begin "each structure" 

	    print( cv6str( Str ) );
	    if ( 0 > Slot_ VMFile( cv6str(Str)&":(SYS)SPAGES.SYS",
					VM$Read, 1, SPG.PG ) )
	     then usererr( 0,0, cv6Str(Str)&" file error!", "X" );

	    DSKCHR[ 0 ]_ cv6str( Str );
	    calli( !xwd( 7,location(DSKCHR[0]) ), calli!DSKCHR );
	    Str!CHR_ DSKCHR[ 5 ];	! characteristics word ;
	    Str!PPU_ DSKCHR[ 6 ];	! pages on this/each unit ;

	    Chnior( Chan.i_ VMChan, Dev[0], !chOPN );
	    if not( !Skip! )
	     then done;

	    Chnior( Chan.o_ VMChan, Dev[0], !chOPN );
	    if not( !Skip! )
	     then done;

	    Page.i[0]_ !prro + !xwd(1,HOM.PG);	! 'HOM' page for use ;
	    Page.i[1]_ 1;
	    Chnior( Chan.i, Page.i[0], !chSMP );

	    VMGetW( Slot, 0 );			! map directory page ;
	    Page.o[0]_ !prrw + !Xwd(1,DIR.PG);	! 'DIR' page for use ;
	    Page.o[1]_ calli( SPG.PG, calli!VDSKPT );
	    Chnior( Chan.o, Page.o[0], !chSMP );

	    memory[ DIR.AD ]_ 0;		! clear directory page ;
	    arrBlt( memory[ DIR.AD+1 ], memory[ DIR.AD ], 511 );

	    memory[ DIR.AD+QIK.STR ]_ Str;	! set structure ID ;
	    memory[ DIR.AD+QIK.COD ]_ COD.QIK;	! set unlikely code ;
	    memory[ DIR.AD+QIK.NAM ]_ NAM.QIK;	! set file-save name ;

	    Page.i[0]_ !prro + !Xwd(1,INP.PG);	! 1 page, at '777 ;
	    Page.o[0]_ !prrw + !Xwd(1,OUT.PG);	! 1 page, at '776 ;

	    CopyPage( 1,      1, X(PAGHOM) );	! HOME page ;
	    CopyPage( D('20), 2, X(RIBHOM) );	! RIB for HOME.SYS ;
	    CopyPage( D('17), 3, X(RIBSAT) );	! RIB for SAT.SYS  ;
	    CopyPage( D('25), 4, X(RIBUFD) );	! RIB for [1,1] UFD ;
	    CopyPage( D('23), 5, X(RIBSYS) );	! RIB for [1,4] UFD ;
	    
	    VMFree( Slot );			! close it securely ;
	    print( ": QIK file written."&crlf );

	 end "each structure" ;

    end "get structure"
     until Str = 0;				! until they are gone ;

    start!code uuo!EXIT 1,; uuo!EXIT end;	! no "End of Sail" message ;


end "QIKSAV";
