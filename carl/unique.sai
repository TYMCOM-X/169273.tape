
begin

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)MFDSCN.REQ" source!file;
require "(SAILIB)ATFILE.REQ" source!file;
require "(SAILIB)CVPPN.REQ" source!file;

Own string FileLine, FileSpec, CopySpec, Text;
Own Integer Inbrk, InLst, Quest, Brk, File, Ext, UserPPN;

Record!Class E( Integer Ext; r!p (E) Next );
Record!Class F( Integer File; r!p (E) Ext; r!p (F) Next );

r!p (F) Files, That, Name;
r!p (E) Last, This;

Define BrkString =
    {(If Brk="*" then "######" else if Brk="?" then "#" else null)};

Define !FILE = 0, !EXT = 1;


boolean procedure WantFile( Reference Integer Filename, Extension );
begin
    Return( Extension neq CvSix("TMP") );
end;

procedure FileProc( Reference Integer Chan, Cnt, Brk, FileEof;
		    Integer Array LKB );
Begin "Each File"
    Integer N;

    Name_ Files;				! Head of list   ;

    While ( That_ F:Next[ Name ] )		! While ( more ) ;
     do If ( LKB[!File] = N_ F:File[ That ] )	!  do if same    ;
	 then begin "New extension"		!   then add ext ;
	    Last_ F:Ext[ That ];		!   : first one  ;
	    While ( This_ E:Next[ Last ] )	!   : scan list  ;
	     do If ( !lh( LKB[!Ext] ) < !lh( E:Ext[This] ) )
		 then done			!   : insert it  ;
		 else Last_ This;		!   : make ext!  ;
	    E:Next[ Last_ E:Next[ Last ]_ new!record( E ) ]_ This;
	    E:Ext[ Last ]_ LKB[!Ext];		!   : in place   ;
	    Return;				! then return.   ;
	 end "New extension"
	 else If ( LKB[!File] < N )		!  else insert?  ;
	       then done			!    yes, skip!  ;
	       else Name_ That;			! no, re do scan ;

    F:Next[ Name_ F:Next[ Name ]_ new!record( F ) ]_ That;
    F:File[ Name ]_ LKB[!File];
    This_ F:Ext[ Name ]_ new!record( E );
    E:Ext[ E:Next[ This ]_ new!record( E ) ]_ LKB[!Ext];

end "Each File";

setbreak(inbrk_getbreak,#LF&#FF,null,"INS");	! break on LF FF;
setbreak(inlst_getbreak,",",Null,"KINS");	! break on comma;
setbreak(quest_getbreak,"?*",Null,"INS");	! break on qmark;
MFDset( 0, 4, 0, 132 );				! ascii, in, out, count;

while ( true )
 do begin "!TRUE!"
    Print( "Spec(s): " );
    FileLine_ AtFile( True );
    If Length( FileLine ) = 0 then Calli(0,Calli!EXIT);

    Files_ new!record( F );			! initialize...;

    While Length( FileLine )
     do begin "line typed"
	FileSpec_ Scan(FileLine,inlst,brk);	! gobble one file-spec;
	If Length( FileSpec )
	 then begin "file typed"
	    CopySpec_ Null;
	    Brk_ 0;
	    While ( length( FileSpec ) )
	     do CopySpec_ CopySpec & BrkString & Scan( FileSpec, quest, Brk );
	    CopySpec_ CopySpec & BrkString;
	    File_ cvfil( CopySpec, Ext, UserPpn );
	    If ( 0 neq (File lor Ext lor UserPpn) )
	     then begin "use GFD ppn"
		If UserPpn = 0
		 then UserPpn_ Calli( !Xwd(-1,!GtPPN), Calli!GETTAB );
		If !lh( UserPpn ) = 0
		 then UserPpn_ CvPPN( Cv6str( memory[ UserPpn   ] ) &
				      Cv6str( memory[ UserPpn+1 ] ) );
	     end "use GFD ppn";
	    If File = 0 then File_ cvsix("*");
	    If Ext = 0 then Ext_ cvsix("*");
	    UfdScn( UserPpn, File, Ext, 1, WantFile, FileProc );

	 end "file typed"
     end "line typed";

    Name_ Files;
    While ( That_ F:Next[ Name ] )
     do begin "print file"
	Print( CvXstr( F:File[ That ] ) );
	This_ F:Ext[ That ];
	While ( This_ E:Next[ This ] )
	 do Print( (" " & CvXstr( E:Ext[This] ))[1 for 4] );
	Print( Crlf );
	Name_ That;
     end "print file";

 end "!TRUE!";


end;
