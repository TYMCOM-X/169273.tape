begin	"MONDOC"

require '3 version;

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)EXTEND.REQ" source!file;



string MySys,Today,UName;

define	Dashes = {"------------------------------------------------"};
integer MemChan;		! channel for .MEM file;
integer MemSize;		! # of last existant .MEM file page;
integer MemVer;			! numeric MEM file version;
integer MemPtr;			! word pointer to file;
integer AppPtr;			! append pointer to file;
r!p(MAP1) MemPages;		! list of pages;


simple procedure Ini;
begin
    setformat(-2,0);
    MySys _ cvs(calli(!xwd('33,'11),'41));
    Today _ StDate(calli(0,'14),0);
    UName _ cv6str(calli(-'22,'41)) & cv6str(calli(-'21,'41));
end;
require ini initialization;

procedure OpenMemFile (string FileName, How);
begin	"OpenMemFile"
    Integer MemEof;
    Integer Array MemInfo[1:6];

    Open( MemChan_ getchan,"DSK",'17, 0,0, 0,0, MemEof_ -1 );

    Lookup( MemChan, FileName, MemEof_ -1 );
    If ( MemEof )
     then usererr( 0,0, "Mem file lookup problem", "X" );

    FileInfo( MemInfo );
    MemSize_ MemInfo[ 6 ];

    If ( How = "W"  or  How = "w" )
     then begin "update file"
	Own Integer EntryCount;

	EntryCount_ 0;
	Enter( MemChan, FileName, MemEof_ -1 );
	If ( MemEof )
	 then If ( !rh( MemEof ) = 3 )
	     then do begin

		If not( EntryCount )
		 then Print( Crlf& "Mem file busy, please wait..." );
		Calli( !xwd( 1,5 ), '72 );
		Enter( MemChan, FileName, MemEof_ -1 );
		EntryCount_ EntryCount + 1;

	     end until ( !rh( MemEof ) neq 3 );
	     else usererr( 0,0, "Mem file enter problem", "X" );

     end "update file";

    AppPtr_ 0;

end	"OpenMemFile";

procedure CloseMemFile;
begin	"CMemFile"
    define !chFTR = '45;
    Integer I;

    I_ Chniov( MemChan, MemSize+AppPtr, !chFTR );
    if not( !SKIP! )
     then usererr( I,2, "!CHFTR failed: ","X" );

    Close( MemChan );
    Release( MemChan );

end	"CMemFile";

procedure MapRO (integer Ptr);
begin	"MapRO"

    ! o UnMaps 2nd read-page.                           ;
    ! o Replicates 1st read-page into 2nd read-page.    ;
    !   UnMaps 1st read-page.                           ;
    ! o Maps page (ptr) into 1st read-page.             ;

    ! - Ptr is a word address.                          ;

end	"MapRO";

procedure MapRW (integer Ptr);
begin	"MapRW"

    ! o UnMaps 1st write-page.                          ;
    ! o Replicates 2nd write-page into 1st write-page.  ;
    ! o Unmaps 2nd write-page.                          ;
    ! o Maps or creates page (ptr) into 2nd write-page. ;

    ! - Ptr is a word address.                          ;

end	"MapRW";

simple integer procedure ReadWord;
begin	"ReadWord"
    Own integer Read1, Read2;

    integer W;
    if MemPtr < 0 then return(0);
    while MemPages = null!record or MemPtr < MAP1:ui[MemPages] 
	do MapRW (MemPtr);
    W_ MAP1:a[MemPages][MemPtr land '777];
    MemPtr_ MemPtr -1;
    return (W);
end	"ReadWord";

simple string procedure ReadLine;
begin	"ReadLine"
    own integer W,P,C; string S;
    S_ null;
    do begin "getchar"
	if P=0 then begin 
	    if MemPtr < 0 then return (S);
	    W_ ReadWord; 
	    if W and AppPtr < 0 then AppPtr_ MemPtr +1;
	    P_ 5; 
	end;
	C_ W lsh (P*7-36) land '177;
	P_ P -1;
	if C > '40 then S_ C & S;
    end until C=#lf;
    return (S);
end	"ReadLine";


simple procedure WriteLine (string S);
begin	"WL"
    while MemPages = null!record or AppPtr > MAP1:ui[MemPages]+'777
	do MapRW (AppPtr);
    S_ cvastr(MAP1:a[MemPages][AppPtr land '777]) & S & crlf;
    while length(S) do begin
	while MemPages = null!record or AppPtr > MAP1:ui[MemPages]+'777
	  do MapRW (AppPtr);
	MAP1:a[MemPages][AppPtr land '777]_ cvasc(S[1 for 5]);
	S_ S[6 to inf];
	AppPtr_ AppPtr + 1;
    end;
    AppPtr_ AppPtr - 1;
end	"WL";

simple procedure WriteHeading (string S);
begin	"WH"
    WriteLine (null);
    WriteLine (S);
    WriteLine (Dashes[1 for length(S)]);
end	"WH";

string	MinVer;			! global for default if <CR>;
boolean	TextMin;		! no min head follows last text;

simple procedure ParseMEM;
comment
	There are two types of headers in the file: major and minor.
	MinVer is the last minor header which has text after it.
	MajVer is the last major header which has text after it.
	Note that this routine scans the file backwards.
;
begin	"ParseMEM"
    boolean TextFlag;
    string S,Min1;
    TextFlag_ TextMin_ false; 
    MinVer_ Min1_ null;
    setformat(-3,0);
    do begin
	S_ ReadLine;
	if equ(S,dashes[1 for length(S)]) then S_ null;
	if S="/" and length(S)<7 
	    then if TextFlag 
		then if length(MinVer)=0 
		    then MinVer_ S 
		    else
		else Min1_ S
	else if length(S) then begin
	    TextFlag_ true;
	    if length(Min1)=0 then TextMin_ true;
	end;
    end until MemPtr < 0 or length(MinVer);
    if length(MinVer)=0 then
	if TextFlag or length(Min1)=0 
	    then usererr(0,0,"?cant parse .MEM file","X")
	    else begin
		MinVer_ Min1;
	    end;
end	"ParseMEM";

string procedure NameMEM;
! return the version number from the name of the appropriate .MEM file;
begin	"NameMEM"
    integer Flag, Chan,Eof;
    MEMver_ 030;
    setformat(-3,0);		! 3 digits;
    open(Chan_getchan,"DSK",0,0,0, 0,0,EOF);
    if EOF then usererr(EOF,2,"?open failure for DSK: ","X");
    Flag_ false;
    do begin
	lookup(Chan,"P"&cvs(MEMver_MEMver+1)&".MEM",Eof);
    end until (MEMver > 099) or ((Flag_ Flag or not Eof) and Eof);
    if MEMver > 099 then return(null);
    MEMver_ MEMver - 1;
    release(Chan);
    return("P" & cvs(MEMver) & ".MEM");
end 	"NameMEM";

integer LinBrk,MNB1,MNB2,MNB3,MNB4;

simple procedure IniBreak;
begin
    setbreak(LinBrk_getbreak,#lf&#ff,#cr,"SINF");
    setbreak(MNB1_getbreak,"-",null,"SINK");
    setbreak(MNB2_getbreak,"0123456789",null,"RINK");
    setbreak(MNB3_getbreak,"/",null,"SINK");
    setbreak(MNB4_getbreak,"-0123456789",null,"RINK");
end;
require IniBreak initialization;

simple procedure MonParse (
	string S;
	reference string A,B,C );
!
	P033/FA01-2
         AAA B CC
;
begin
    own integer I;
    scan(S,MNB2,I);
    A_scan(S,MNB3,I);
    B_scan(S,MNB4,I);
    C_scan(S,MNB1,I);
end ;

!	M A I N   P R O G R A M	;

string SName;			! temp name;
integer B;			! break character;
boolean NoMEM;		       	! there is no .MEM file;

NoMEM_ true;
if length(SName_ NameMEM) then begin "MemFileFound"
    OpenMemFile ( SName );
    ParseMEM;
    if AppPtr < 0 then usererr(0,0,
    	"?.MEM file is empty! Don't do that to me!","X");
    NoMEM_ false;
end "MemFileFound";
if NoMEM then usererr(0,0,"?no .MEM file","X");

print("[updating ",SName," entry for ",MinVer,"]",crlf);
print("Enter comments (or ?):",crlf);
WriteLine(null);
do begin
    string S;
    S_ inchwl; B_ !SKIP!;
    if equ(S,"?") then begin print("
Enter any number of lines of text to be appended to the log (",SName,").
A line of the form 
    @<filename>
will include the contents of the named file in the log at that point.
A line ending with ^D,^Z or <ESC> will terminate the log entry and add
a signature in the form 
    /<username><date>
Warning: text is appended as it is typed!  There is no need to 'lock'
the .MEM file by renaming it - it is opened in single user update mode.
"); continue end;
    if B neq #cr then begin
	string X;
	X_ "/"& UName& " "& Today;
	if length(S) + length(X) + 2 > 72 then X_ crlf& X
	else if length(S) > 0 then X_ "  "& X
	else ;
	S_ S& X;
	print (X,crlf);
    end;
    if S="@" 
	then begin "file"
	    integer C,B,E;
	    open(C_getchan,"DSK",1,4,0,256,B,E);
	    lookup(C,S[2 to inf],E);
	    if E then print("?cant read file ",S[2 to inf],crlf);
	    while not E do WriteLine(input(C,LinBrk));
	    release(C);
	end "file"
	else WriteLine(S);
end until B neq #cr;
CloseMemFile;

end	"MONDOC" .

  