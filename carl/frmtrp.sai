
entry
	FEX!,   ECF!,   LCF!
,	SIP!,   SIC!,   SIS!,   SIA!
,	FEXEnb, FEXDis, ECFEnb, EFCDis, LCFEnb, LCFDis
,	SIPEna, SIPDis, SICEna, SICDis, SISEna, SISDis, SIAEna, SIADis
;
begin "FRMTRP"

require "(SAILIB)SAIL.DEF" source!file;
require "(MPL)UUOSYM.DEF"  source!file;
require "(CARL)JQUEUE.DEF" source!file;
require "(CARL)XEXEC.REQ"  source!file;
require "(CARL)INTTRP.DEF" source!file;
!get!definitions(tymint);

Define	!iaECF=0, !iaLCF=1, !iaSIP=2, !iaSIC=3, !iaSIS=4, !iaSIA=5;

Internal boolean
	FEX!	! true if exit in child ;	! .IAFEX any child ;
,	ECF!	! true if exit in child ;	! .IAECF specified ;
,	LCF!	! true if logout in child ;	! .IALCF specified ;
,	SIP!	! true if software interrupt from parent ;
,	SIC!	! true if software interrupt from child ;
,	SIS!	! true if software interrupt from sibling ;
,	SIA!	! true if software interrupt from anyone ;
;


simple procedure ECF( Integer Bits );
ECF!_ ECF! lor Bits;

simple procedure LCF( Integer Bits );
LCF!_ LCF! lor Bits;

ForC FEXC_ 0 stepC 1 untilC E!JobMax
 doC {
    Simple Procedure ECF}&"FEXC"&{;
    ECF(1 lsh FEXC);
    Simple Procedure LCF}&"FEXC"&{;
    LCF(1 lsh FEXC);
    }
 endc

simple procedure Dummy;	begin end;

simple procedure FEX;	FEX!_ true;

simple procedure SIP;	SIP!_ true;
simple procedure SIC;	SIC!_ true;
simple procedure SIS;	SIS!_ true;
simple procedure SIA;	SIA!_ true;


internal simple procedure FrmDis( integer Frame );
begin
    intMap( finass( Frame,!iaECF,0 ), Dummy, 0 );
    intMap( finass( Frame,!iaLCF,0 ), Dummy, 0 );
    disable( newenb( int!ECF+MyJob ) );
end;

internal simple procedure EcfDis( integer Frame );
begin
    intMap( finass( Frame,!iaECF,0 ), Dummy, 0 );
    disable( newenb( int!LCF+MyJob ) );
end;

internal simple procedure LcfDis( integer Frame );
begin
    intMap( finass( Frame,!iaLCF,0 ), Dummy, 0 );
    disable( newenb( int!LCF+MyJob ) );
end;

internal simple procedure FEXDis;  disable( newenb( int!FEX ) );
internal simple procedure SIPDis;  disable( newenb( int!SIP ) );
internal simple procedure SICDis;  disable( newenb( int!SIC ) );
internal simple procedure SISDis;  disable( newenb( int!SIS ) );
internal simple procedure SIADis;  disable( newenb( int!SIA ) );


internal simple procedure FrmEnb( integer Frame );
begin
    Case MyJob
     of begin
	ForC FEXC_ 0 stepC 1 untilC E!JobMax	! frame exits ;
	 doC {
	    intMap( finass(Frame,!iaLCF,int!LCF+FEXC), ECF}&"FEXC"&{, 0 );
	    intMap( finass(Frame,!iaECF,int!ECF+FEXC), ECF}&"FEXC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!ECF + MyJob ) );
end;


internal simple procedure EcfEnb( integer Frame );
begin
    Case MyJob
     of begin
	ForC FEXC_ 0 stepC 1 untilC E!JobMax	! frame exits ;
	 doC {
	    intMap( finass(Frame,!iaECF,int!ECF+FEXC), ECF}&"FEXC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!ECF + MyJob ) );
end;


internal simple procedure LcfEnb( integer Frame );
begin
    Case MyJob
     of begin
	ForC FEXC_ 0 stepC 1 untilC E!JobMax	! frame exits ;
	 doC {
	    intMap( finass(Frame,!iaLCF,int!LCF+FEXC), LCF}&"FEXC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!LCF + MyJob ) );
end;


internal simple procedure FEXEnb;  enable( newenb( int!FEX ) );
internal simple procedure SIPEnb;  enable( newenb( int!SIP ) );
internal simple procedure SICEnb;  enable( newenb( int!SIC ) );
internal simple procedure SISEnb;  enable( newenb( int!SIS ) );
internal simple procedure SIAEnb;  enable( newenb( int!SIA ) );


end "FRMTRP" $

