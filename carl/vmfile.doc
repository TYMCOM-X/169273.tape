

VMFILE  A software library package designed to aid SAIL programmers in
	the art of mapping disk files for various access methods using
	virtual memory system calls.  This package also raises the 16
	i/o channel limit to the 47 channels available in TYMCOM-X.

	The package is modular and is divided into these categories:

	VMFILE  The main module containing the basic data structures and
		routines to select a file, release a file, map pages to
		virtual memory, position the input/output pointer in the
		file, read and write to selected portions of the file.

	VMTEXT  The text manipulation module containing routines to read
		and write text strings anywhere in the file.  A special
		pointer routine is available to move forward or backward
		line by line.  (Future implementations will allow a user
		to read/write/move text page by text page or message by
		message).

	VMSPEC  A self-contained library routine to read a TYMCOM-X file
		specification and return a structured data block usable
		by various file manipulation system calls.

	VMCHAN  A self-contained library routine to select the next file
		channel available for use to the user.  This routine is
		especially useful to insure that various i/o packages do
		not interfere with each other when assigning channels.


	The general design of the package is to allow the programmer to
	manipulate text and data files easily while taking advantage of
	the speed and sharing capabilities inherent in directly mapping
	virtual memory pages to file data pages.  The user may select a
	file and then read it as text, in both the forward and backward
	direction.  The data may also be accessed by reading and writing
	to the proper memory addresses directly.  A single page may be
	used to access a file or an entire range of pages.  (See VMINIT
	and VMFILE routine descriptions for more detailed information.)


VMINIT	To use the VMFILE package properly the user must select a set of
	virtual memory pages and pass this information to VMFILE via the
	VMINIT routine.  VMINIT will initialize these pages for use as a
	file-page cache which the package will allocate and deallocate
	as needed.  This cache should be large enough to hold the total
	number of pages from each of the files the user wants to access
	simultaneously.  The sophisticated user may specify that no cache
	is set aside and then specify the page count and base location as
	each file is selected.

	VMINIT( Integer Array FilePointer; Integer PageCount, BasePage );

	FilePointer is an array specified by the user to be used soley
		by the package to keep track of record pointers for each
		file opened.  The size determines the maximum number of 
		files which the package will use.

	PageCount is the size of the file-page cache to set aside for the
		program.  If PageCount is 0, then no page cache will be
		specified and the user is required to specify a PageCount
		and BasePage for each file as it is selected.

	BasePage is the first page of the file page-cache.  If PageCount
		is 0, then this value is ignored.  If PageCount is not 0,
		then all pages from BasePage for a count of PageCount are
		unmapped.


VMFILE  The VMFILE routine selects the specified file and opens it in the
	mode specified by the user.  The file may be opened for reading,
	writing, update or multiple-update.  A flag may also be specified
	which allows the user to append to an existing file.

	slot_ VMFILE( String Name; Integer Mode, PageCount, BasePage );

	Name    is the file specification in standard TYMCOM-X format:
		"DEVICE:(USERNAME)FILNAM.EXT"  where DEVICE defaults to
		"DSK:" and (USERNAME) defaults to the connected directory
		if thay are omitted.

	Mode    is the access mode for the file.  Legal values are:
		VM$READ    to read the file (this is the default)
		VM$WRITE   to write the file single-access
		VM$UPDATE  to both read and write the file single-access
		VM$MULTI   to both read and write the file multi-access

		The flag VM$APPEND may be 'OR'ed with any of the writing
		modes to quickly allow writing at the end of an existing
		file.  Appending to a new file has no effect.

	PageCount is the number of pages to map for this particular file.
		If PageCount is 0, then 1 page is assumed.  If BasePage
		is 0, negative or omitted, the pages for this file will
		come from the file-page cache.  If BasePage is a positive
		number, then PageCount pages are verified as un-mapped
		beginning with BasePage.  If any of the pages are already
		in use VMFILE will return an error code.

	BasePage is the base page for the file-page cache for this file.
		(See PageCount for information regarding this value.)

!
!   Slot_ VMFile( StringSpec, AccessMode )
!	Opens a file for access.  A positive slot number is returned if the
!	file is available.  A value of 0 means no slots available, a negative
!	value means a file operation error or access violation occurred with
!	the RH of the value containing the TYMCOM-X lookup/enter codes.
!	A -1 value indicates an unavailable device.  Access mode is one of:
!	(0=Read !chLK, 1=Write !chENT, 2=Multi-Write !chMEN).
!
!   Ok_ VMFree( Slot, Bits(0) )
!	Closes any open file for this slot and frees the slot for future use.
!	Returns true if the slot was in use.  If any writes were performed
!	the file is actually closed, otherwise the channel is simply released.
!	If writing and Bits = -1 then delete the file, else if bits # 0 use
!	the value of Bits on the close option.
!
!   Line_ VMLine( Slot, More, Dir(0) )
!	Returns the next consecutive line from the file that is connected
!	to the specified slot.  More is set to the line terminator ( LF, FF
!	or VT ) on a normal return, to 0 when the end of the file is reached
!	or the slot is inactive.  Dir is the direction to read the file
!	(0 = forward, non-zero = backward).
!
!   Ok_ VMText( Slot, TextString )
!	Writes the next consecutive line to the file that is connected
!	to the specified slot.  Returns false for insufficient file access
!	and for any other errors while writing, otherwise returns true.
!
!   Ok_ VMMove( Slot, HowMany(1) )
!	Moves the position pointer forward or backward up to how-many lines
!	in the file.  Returns true if the slot is active and the specified
!	number of lines exist, otherwise it returns false and leaves the
!	pointer positioned at logical end of file.
!
!   Position_ VMGetC( Slot, Index )
!	Read the specified characteristic from the file table.  [0]character,
!	[1]line or [2]page position in the file, [3]eol char, [4]eol-cr-seen,
!	size in [5]characters, [6]lines or [7]pages, [8]file license.  If no
!	file is open or an invalid slot, return -2.  If the index is out of
!	range, return -3.  If the file is open, but no reads have been done,
!	return -1.
!
!   Ok_ VMSetC( Slot, CharacterPosition )
!	Set the character position with the file open on the specified slot.
!	All further references to the file will use the new position.  If the
!	specified position is outside the file, the position is set to -1.
!	The routine always returns the new position.
!
!   License_ VMFLic( Slot )
!	Returns the license of the file open on the specified slot.
;

