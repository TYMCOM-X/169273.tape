begin "SETOP SYSTEMS"

require "(CARL)DEFOPR.INF"   source!file;

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(CARL)VMFILE.REQ"   source!file;
require "(CARL)BRKINI.REQ"   source!file;
require "(CARL)DAYTIM.REQ"   source!file;


Define System.File = {"DRWSPR.EPO"};
Define PswSiz = 7;
Define PswMax = 1500;

define pswOpr(x) = { OTree[ (x)   ] }
,      pswOp1(x) = { OTree[ (x)+1 ] }
,      pswCph(x) = { OTree[ (x)+2 ] }
,      pswLic(x) = { OTree[ (x)+3 ] }
,      pswDat(x) = { OTree[ (x)+4 ] }
,      pswMan(x) = { OTree[ (x)+5 ] }
,      pswMa1(x) = { OTree[ (x)+6 ] }
;

define spaces = 
    {"                                                                "};
define lpad(x,y) = {(spaces[1 for y]&(x))[inf-(y-1) to inf]};
define lpaz(x,y,z) = {(z[1 for y]&(x))[inf-(y-1) to inf]};


Integer Chan, Eof, EndOfFile, Count, Index, I;
Integer R.Count, R.Begin, R.End;

Boolean FileModified;

String  Filename, Command, Line, Str, L;
String  MyOper, MyName;

Integer Array OTree[ 0:PswSiz*PswMax ];


record!class O( r!p (O)	Mgr;		! Manager record pointer ;
		r!p (O)	Sub;		! First subordinate opername ;
		r!p (O)	Sib;		! Next opername at this level ;
		r!p (O) Gni;		! Previous opername at this level ;
		Integer Idx;		! Array index of block ;
		Integer Man1, Man2;	! Radix 45 Manager ;
		String	Oper		! Opername ;
    );


r!p (O) ODormant, OHead, OList;

r!p (O) O!b, O!t, O!n;

r!p (O) MySelf, MyRoot;


define TopManager = 99;
safe r!p (O) array Mgrs[ 0:TopManager ];
safe string  array Managers[ 0:TopManager ];
integer UsedMgrs;


simple procedure ClearManagers;
begin "management purge"

    arrClr( Mgrs );
    arrClr( Managers );
    UsedMgrs_ -1;

end "management purge";
require ClearManagers initialization;


r!p (O) Procedure FindRoot( r!p (O) Self );
begin "find root"
    r!p (O) r;

    r_ Self;				! base record ;
    while ( O:Mgr[ r ] )		! as long as anyone there ;
     do r_ O:Mgr[ r ];			! find out that manager ;

    return( r );

end "find root";


r!p (O) procedure NextSeen( r!p (O) r, Self, Root );
begin "next seen"
    r!p (O) M;

    if not( r_ O:Lnk[ r ] )		! end of the line? ;
     then return( null!record );	! yes, nothing more to do ;
    if ( r = Self )			! possibly only me ;
     then return( r );			! so let me see me ;
    if not( M_ O:Mgr[ r ] )		! get manager record ;
     then return( null!record );	! none? say so ;

    while ( true )
     do begin "trace manager"

	if ( M = Self )			! if manager is me ;
	 then return( r );		!  don't look any further ;
	if ( M = Root )			! if manager is my root ;
	 then return( null!record );	!  we must have passed me ;
	if not( M_ O:Mgr[ M ] )		! if no more managers ;
	 then return( null!record );	!  we must be in another tree ;

     end "trace manager";

end "next seen";


r!p (O) Procedure FindManager( String Name );
begin "find manager"
    integer Mgr;
    r!p (O) M;

    for Mgr_ 0 upto UsedMgrs
     do if ( kequ( Name, Managers[ Mgr ]  ) )
	 then return( Mgrs[ Mgr ] );	! same as previous, skip some work ;

    M_ OHead;				! start at top ;
    while ( M_ O:Lnk[ M ] )		! loop through all ;
     do if ( Kequ( Name, O:Oper[ M ] ) )
	     then done;			! got one, skip out ;

    if not( M )				! if blank, we went through them ;
     then return( null!record );	!  all and none was found ;

    if ( TopManager < UsedMgrs_ UsedMgrs + 1 )
     then begin "shift data arrays"

	Mgrs[0]_ null!record;		! make sure cleanup works ;
	Managers[0]_ null;
	UsedMgrs_ TopManager;		! set ceiling, copy arrays down 1 ;

	ArrBlt( Mgrs[0], Mgrs[1], TopManager-1 );
!	ArrBlt( Managers[0], Managers[1], TopManager*2 );
	start!code
	MOVEI	'1,Managers[0];		! destination ;
	PUSH	'17,'1;
	MOVEI	'1,Managers[1];		! source ;
	PUSH	'17,'1;
	MOVEI	'1,TopManager;		! count ;
	LSH	'1,1;			! multiply by 2 ;
	PUSH	'17,'1;
	PUSHJ	'17,arrBlt;		! copy the data ;
	end;

     end "shift data arrays";

    Managers[ UsedMgrs ]_ Name;		! remember manager name for later ;
    return( Mgrs[ UsedMgrs ]_ M );	! remember and return pointer ;

end "find manager";


Procedure ValidateManager;
begin "validations"
    r!p (O) v;

    MySelf_ null!record;		! insure security, reset each time ;

    while ( true )
     do begin "validate name"

	if not( length( MyOper_ Prompt( "Opername: " ) ) )
	    or ( MyOper = "?" )
	 then begin "no name specified"
	    print( crlf &"Please enter your Opername"& crlf );
	    continue;
	 end "no name specified";

	MyOper_ ( MyOper & spaces )[1 for 12];
	v_ OHead;			! base record ;
	while ( v_ O:Lnk[ v ] )		! as long as anyone there ;
	 do begin "name loop"
	    if ( kequ( MyOper, O:Oper[ v ] ) )
	     then done;			! we found me ;
	 end "name loop";

	if ( v neq null!record )	! did we fall out or find out ;
	 then begin "setup self"
	    OList_ NewO;		! setup dummy pointer record ;
	    O:Lnk[ OList ]_ MySelf_ v;	! found me ;
	    MyRoot_ FindRoot( MySelf );	! now set my root ;
	    done;			! and finish validation ;
	 end "setup self";

	print( "No opername found matching ", MyOper, crlf );

     end "validate name";

    print( (if O:Mgr[ MySelf ]
	     then "Manager: "& O:Oper[ O:Mgr[ MySelf ] ] &" "
	     else null),
	   "Root: ", O:Oper[ MyRoot ],

	   crlf );

end "validations";


Procedure Forget;
begin
    ClearManagers;			! clear our management list ;

    O!b_ O!t_ OHead;			! start at beginning ;
    OHead_ null!record;

    if not( O!t )			! if just starting, ok ;
     then return;

    while ( O!t_ O:Lnk[ O!t ] )		! for each current record ;
     do begin "forget record"

	O:Lnk[ O!b ]_ null!record;	! forget it's pointer ;
	NoO( O!b );

	O:Bak[ O!t ]_ null!record;	! forget it's information ;
	O:Mgr[ O!t ]_ null!record;
	O:Nxt[ O!t ]_ null!record;
	O:Sub[ O!t ]_ null!record;

	if ( G!b_ O:Gift[ O!t ] )
	 then begin "forget gifts"
	    while ( G!t_ G:Nxt[ G!b ] )
	     do begin "return gifts"
		NoG( G!b );
		G!b_ G!t;
	     end "return gifts";
	    NoG( G!b );
	 end "forget gifts";

	if ( G!b_ O:Grant[ O!t ] )
	 then begin "forget grants"
	    while ( G!t_ G:Nxt[ G!b ] )
	     do begin "return grants"
		NoG( G!b );
		G!b_ G!t;
	     end "return grants";
	    NoG( G!b );
	 end "forget grants";

	if ( C!b_ O:Remark[ O!t ] )
	 then begin "forget comments"
	    while ( C!t_ C:Nxt[ C!b ] )
	     do begin "return comments"
		C:Nxt[ C!b ]_ null!record;
		C!b_ C!t;
	     end "return comments";
	    C:Nxt[ C!b ]_ null!record;
	 end "forget comments";

	O!b_ O!t;

     end "forget record";

end;

Procedure Read;
! ----------------------------------------------------------------------;
!									;
!	"READ"		Read a new copy of the master opername list.	;
!									;
! ----------------------------------------------------------------------;
begin
    r!p (O) M;

    Forget;
    print( "Reading system file."& Crlf );
    if not( length( Filename_ Line ) )
     then Filename_ System.File;

    Count_0;				! empty list ;
    OHead_ O!t_ NewO;			! base record ;

    if ( 0 > Chan_ VMFile( Filename, VM$Read ) )
     then begin
	Print( Filename," not found.  Empty list created.",Crlf );
	Return
     end;

  while true
   do begin "read loop"

    while ( length( Line_ VMLine(Chan,Brk) ) )	! ignore up to a blank line ;
     do begin "miscellaneous"

	if ( Line = "L" )
	 then begin "licenses"
	    O:License[ O!t ]_ !xwd( cvo(Line[3 for 6]), cvo(Line[10 for 6]) );
	 end "licenses"
	 else if ( Line = "G" )
	 then begin "grants"
	    if not( G!t )
	     then G!t_ O:Grant[ O!t ]_ NewG
	     else G!t_ G:Nxt[ G!t ]_ NewG;
	    DoGrant( G!t );
	 end "grants"
	 else if ( Line = "R" )
	 then begin "receipts"
	    if not( R!t )
	     then R!t_ O:Gift[ O!t ]_ NewG
	     else R!t_ G:Nxt[ R!t ]_ NewG;
	    DoGrant( R!t );
	 end "receipts"
	 else begin "comments"
	    if not( O:Remark[ O!t ] )		! if none, create initial ;
	     then O:Remark[ O!t ]_ C!t_ new!record( C );
	    C!t_ C:Nxt[ C!t ]_ new!record( C );	! create comment line ;
	    C:Line[ C!t ]_ Line;
	 end "comments";

     end "miscellaneous";

    if not( Brk )				! have we seen eof? ;
     then begin "finished"
	Print( (If Count = 0
		 then "Empty list created."
		 else Cvs( Count )&" entries found."), Crlf );
	return
     end "finished";

    Count_ Count + 1;				! Count records ;
    O!n_ O:Lnk[ O!t ]_ NewO;			! Get a new opername record ;
    O:Bak[ O!n ]_ O!t;				! Set back pointer ;
    O!t_ O!n;					!   and reset this pointer ;
    G!t_ R!t_ null!record;			! Clear pointers ;

    Line_ VMLine( Chan, Brk );			! OperName:date time:who ;
    O:Oper[ O!t ]_ Line[1 for 12];
    O:E!Date[ O!t ]_ cvDay( Line[14 for 18] );
    O:E!Who[ O!t ]_ Line[33 for 12];

    Line_ VMLine( Chan, Brk );			! Emp#:district:Manager ;
    O:Employee[ O!t ]_ cvd( Line[ 1 for  6] );
    O:District[ O!t ]_ cvd( Line[ 8 for  4] );
    O:Manager[ O!t ]_ Line[13 for 12];

    O:Name[ O!t ]_ VMLine( Chan, Brk );		! Employee name ;
    O:Phone[ O!t ]_ VMLine( Chan, Brk );	! Employee phone ;
    O:User[ O!t ]_ VMLine( Chan, Brk );		! Legal usernames ;
    O:Mail[ O!t ]_ VMLine( Chan, Brk );		! Security mail address ;

    Line_ VMLine( Chan, Brk );			! change date time:who ;
    O:C!Date[ O!t ]_ cvDay( Line[ 1 for 18] );
    O:C!Who[ O!t ]_ Line[20 for 12];

    Line_ VMLine( Chan, Brk );			! hash:date time:who ;
    O:Password[ O!t ]_ CVO( Line[ 1 for 12] );
    O:P!Date[ O!t ]_ cvDay( Line[14 for 18] );
    O:P!Who[ O!t ]_ Line[33 for 12];

    if ( M_ O:Mgr[ O!t ]_ FindManager( O:Manager[ O!t ] ) )
     then begin "manager found"
	if ( O!n_ O:Sub[ M ] )		! does manager have anyone ;
	 then begin "any subordinate"
	    while ( M_ O:Nxt[ O!n ] )	! while any-more set next ;
	     do O!n_ M;
	    O:Nxt[ O!n ]_ O!t;		! set self as next subordinate ;
	 end "any subordinate"
	 else O:Sub[ M ]_ O!t;		! set self as only subordinate ;
     end "manager found"
     else print( "Tree top: ",O:Oper[ O!t ]," under ",O:Manager[ O!t ],crlf );

   end "read loop";

end;


Procedure WriteFile( Boolean Reality );
! ----------------------------------------------------------------------;
!									;
!	"WRITE"		Write out a copy of the in-core system list	;
!			on the current user's directory.		;
!									;
! ----------------------------------------------------------------------;
begin
    if not( FileModified )
     then Print( "No changes made."& Crlf );
    Print( "Writing..." );

    if ( 0 > Chan_ VMFile( Filename, VM$Update ) )
     then begin
	Print(  "Enter failure for file (",!Rh(Chan),")"&
		Crlf &"File not written."& Crlf );
	Return
     end;

    O!t_ OHead;				! base record ;
    C!t_ O:Remark[ O!t ];		! any initial comments? ;

    while ( C!t )
     do begin "initial comments"
	VMText( Chan, C:Line[ C!t ] & Crlf );
	C!t_ C:Nxt[ C!t ];
     end "initial comments";

    while ( O!t_ O:Lnk[ O!t ] )		! as long as there is life ;
     do begin "write loop"

    !    Count_ Count + 1;				! Count records ;

	VMText( Chan, Crlf &		! all entries START, blank line ;
		      O:Oper[ O!t ] &
		      ";" & TymDay( O:E!Date[ O!t ] ) &
		      ";" & O:E!Who[ O!t ] & Crlf );

	VMText( Chan, lpaz( cvS( O:Employee[ O!t ] ), 6, "000000" ) &
		      ";" & lpad( cvS( O:District[ O!t ] ), 4 ) &
		      ";" & O:Manager[ O!t ] & Crlf );

	VMText( Chan, O:Name[ O!t ]  & crlf );
	VMText( Chan, O:Phone[ O!t ] & crlf );
	VMText( Chan, O:User[ O!t ]  & crlf );
	VMText( Chan, O:Mail[ O!t ]  & crlf );

	VMText( Chan, TymDay( O:C!Date[ O!t ] ) &
		      ";" & O:C!Who[ O!t ] & Crlf );

	VMText( Chan, lpad( cvOS( O:Password[ O!t ] ), 12 ) &
		      ";" & TymDay( O:P!Date[ O!t ] ) &
		      ";" & O:P!Who[ O!t ] & Crlf );

	if ( O:License[ O!t ] )
	 then VMText( Chan, "L;" &
			    lpad( cvOS( !lh( O:License[O!t] ) ), 6 ) &
			    lpad( cvOS( !rh( O:License[O!t] ) ), 7 ) &
			    Crlf );

	if ( R!t_ O:Gift[ O!t ] )
	 then while ( R!t )
	       do R!t_ WriteGrant( R!t, "R" );

	if ( G!t_ O:Grant[ O!t ] )
	 then while ( G!t )
	       do G!t_ WriteGrant( G!t, "G" );

	if ( C!t_ O:Remark[ O!t ] )
	 then while ( C!t_ C:Nxt[ C!t ] )
	       do VMText( Chan, C:Line[ C!t ] & Crlf );

     end "write loop";

    VMFree( Chan );
    FileModified_ False;
    Print( "Done."& Crlf );

end;



procedure printEntry;
begin "print entry"

	print(  Crlf,		! all entries START, blank line ;
		O:Oper[ O!t ],
		";", TymDay( O:E!Date[ O!t ] ),
		";", O:E!Who[ O!t ], Crlf );

	print(  lpaz( cvS( O:Employee[ O!t ] ), 6, "000000" ),
		";", lpad( cvS( O:District[ O!t ] ), 4 ),
		";", O:Manager[ O!t ], Crlf );

	print(  O:Name[ O!t ] , crlf );
	print(  O:Phone[ O!t ], crlf );
	print(  O:User[ O!t ] , crlf );
	print(  O:Mail[ O!t ] , crlf );

	print(  TymDay( O:C!Date[ O!t ] ),
		";", O:C!Who[ O!t ], Crlf );

	print(  lpad( cvOS( O:Password[ O!t ] ), 12 ),
		";", TymDay( O:P!Date[ O!t ] ),
		";", O:P!Who[ O!t ], Crlf );

	if ( O:License[ O!t ] )
	 then print( "L;",
			lpad( cvOS( !lh( O:License[O!t] ) ), 6 ),
			lpad( cvOS( !rh( O:License[O!t] ) ), 7 ),
			Crlf );

	if ( R!t_ O:Gift[ O!t ] )
	 then while ( R!t )
	       do R!t_ PrintGrant( R!t, "R" );

	if ( G!t_ O:Grant[ O!t ] )
	 then while ( G!t )
	       do G!t_ PrintGrant( G!t, "G" );

	if ( C!t_ O:Remark[ O!t ] )
	 then while ( C!t_ C:Nxt[ C!t ] )
	       do print( C:Line[ C!t ], Crlf );

end "print entry";



end "SETOP SYSTEMS";
    