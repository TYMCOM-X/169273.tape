entry
	AllLic		comment  Return all license for an entry ;
,	BinLock		comment  Lock the binary file ;
,	BinUnlock	comment  Unlock the binary file ;
,	BinWait		comment  Wait for binary file unlock ;
,	CvPRT		comment  Return decimal value/default ;
,	Display		comment  Display pertinent data ;
,	EolTrm		comment  EOL character from prompt routine ;
,	FndName		comment  Find a name in a tree ;
,	Fnd4wd		comment  Find a 4word block for use ;
,	FndEwd		comment  Find 4 4word blocks for use ;
,	FndGwd		comment  Find a 4word block for use ;
,	Itemize		comment  Perform something regular ;
,	LCheck		comment  Return true if grants to self ;
,	LTake		comment  Remove license from lower grants ;
,	Prompt		comment  Return a string after message ;
,	SendMail	comment  Send mail to address ;
,	Subordinate	comment  Make this entry a subordinate ;
,	Token		comment  Return the next token ;
,	TokNam		comment  Return the next name token ;
,	Traverse	comment  Return the next tree leaf ;
,	TxtLock		comment  Lock the text file ;
,	TxtUnlock	comment  Unlock the text file ;
,	TxtWait		comment  Wait for text file unlock ;
;
begin

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)BITARY.REQ" source!file;
require "(SAILIB)FRMRUN.REQ" source!file;
require "(CARL)DEFOPR.DEF"   source!file;
require "(CARL)DEFOPR.DCL"   source!file;
require "(CARL)DAYTIM.REQ"   source!file;
require "(CARL)BRKINI.REQ"   source!file;
require "(CARL)STXLIB.REQ"   source!file;
require "(CARL)LICSUB.REQ"   source!file;

define Bomb(text) = {begin print(text&crlf&crlf); return end};


internal integer EolTrm;		! holds !skip! after inchrw ;

preset!with !bit(0),  !bit(1),  !bit(2),  !bit(3),  !bit(4),  !bit(5),
	    !bit(6),  !bit(7),  !bit(8),  !bit(9),  !bit(10), !bit(11),
	    !bit(12), !bit(13), !bit(14), !bit(15), !bit(16), !bit(17),
	    !bit(18), !bit(19), !bit(20), !bit(21), !bit(22), !bit(23),
	    !bit(24), !bit(25), !bit(26), !bit(27), !bit(28), !bit(29),
	    !bit(30), !bit(31), !bit(32), !bit(33), !bit(34), !bit(35);
own safe integer array Bittbl[ 0:35 ];

preset!with '740000000000, '036000000000, '001700000000,
	    '000074000000, '000003600000, '000000170000,
	    '000000007400, '000000000360, '000000000017;
own safe integer array BitMsk[ 0:8 ];


internal simple integer procedure Fnd4wd;
begin!code
    Label Try, Got, Ret;
    define T1 = '1, T2 = '2, Idx = '13;
    define SatCnt = 512 - I!Sat;

	Movsi	Idx,-SatCnt;		! index count ;
	Add	Idx,vmi;		!  page address of table ;
	Addi	Idx,I!Sat;		!  offset to SATs ;
Try:	Setcm	T1,(Idx);		! use complement to find holes ;
	Jffo	T1,Got;			! as ones (with hardware) ;
	Aobjn	Idx,Try;		! none here, try next ;
	Setz	T1,;			! none available, clear result ;
	Jrst	Ret;			! and return ;

Got:	Move	T1,Bittbl[0](T2);	! get bit from table ;
	Iorm	T1,(Idx);		! and mark it in use ;
	Hlre	T1,Idx;			! get index value ;
	Addi	T1,SatCnt;		! convert to word number ;
	Imuli	T1,36;			! multiply by wordsize ;
	Add	T1,T2;			! add in bit number ;
	Lsh	T1,2;			! convert to word number ;
Ret:

end;


internal simple integer procedure FndGwd;
return( Fnd4wd );


internal simple integer procedure FndEwd;
begin!code
    Label Try, MTry, MNxt, Got, Ret;
    define T1 = '1, T2 = '2, Idx = '13;
    define SatCnt = 512 - I!Sat;

	Movsi	Idx,-SatCnt;		! index count ;
	Add	Idx,vmi;		!  page address of table ;
	Addi	Idx,I!Sat;		!  offset to SATs ;
Try:	Setcm	T1,(Idx);		! use complement to find holes ;
	Jumpe	T1,MNxt;		! none in this word, so try next ;
	Setcm	T1,T1;			! re-complement for testing ;
	Movsi	T2,-9;			! index count ;
MTry:	Tdnn	T1,BitMsk[0](T2);	! is it available ;
	  Jrst	Got;			! yes, mark it ;
	Aobjn	T2,MTry;		! no, try next field ;
MNxt:	Aobjn	Idx,Try;		! none here, try next ;
	Setz	T1,;			! none available, clear result ;
	Jrst	Ret;			! and return ;

Got:	Move	T1,BitMsk[0](T2);	! get mask from table ;
	Iorm	T1,(Idx);		! and mark it in use ;
	Hlre	T1,Idx;			! get index value ;
	Addi	T1,SatCnt;		! convert to word number ;
	Imuli	T1,36;			! multiply by wordsize ;
	Hlre	T2,T2;			! get offset value ;
	Addi	T2,9;			! convert to field number ;
	Lsh	T2,2;			! multiply by 4 bits (mask size) ;
	Add	T1,T2;			! add in bit number ;
	Lsh	T1,2;			! convert to word number ;
Ret:

end;


internal simple procedure BinLock;
begin "lock binary file"

    begin!code

	label bloop, bdone;
	define t1='1, scr='13;

	Push	p,scr;				! save sail scratch register ;
bloop:	Move	t1,vmi;				! index page address ;
	Move	scr,MyLock;			! get unique lock id ;
	Camn	scr,I!WhoLock(t1);		! check against lock id ;
	  Jrst	bdone;				! yes, we already have it ;
	Aosg	t1,I!Lock(t1);			! see if already locked ;
	  Jrst	bdone;				! no, we have the lock ;
;	Hrli	t1,1;				! milliseconds ;
	Hrri	t1,'200;			! a few ;
	uuo!HIBER t1,;				! sleep a bit ;
	  Jfcl;					! ignore errors ;
	Jrst	bloop;

bdone:	Move	scr,MyLock;			! get unique lock id ;
	Movem	scr,I!WhoLock(t1);		! mark we have the lock ;
	Pop	p,scr;				! restore scratch ;
	Aos	BinLevel;			! increase lock level ;

    end;

end "lock binary file";


internal simple procedure BinUnlock;
if ( 0 = BinLevel_ 0 max (BinLevel - 1) )	! if last level ;
 then memory[ vmi + I!Lock ]_ -1;		!  unlock file ;


internal simple procedure BinWait;
while ( memory[ vmi + I!Lock ] geq 0  )		! if locked and ;
 do if ( memory[ vmi + I!WhoLock ] neq MyLock )	!  not MyLock ;
     then begin
	if ( 40 < LockWait_ LockWait + 1 )
	 then memory[ vmi + I!Lock ]_ LockWait_ -1
	 else calli( !xwd( '0,'200 ), calli!HIBER );	! wait here ;
     end
     else return;


internal simple procedure TxtLock;
begin "lock text file"

    BinLock;					! lock binary file first ;

    begin!code

	label tloop, tdone;
	define t1='1, scr='13;

	Push	p,scr;				! save sail scratch register ;
tloop:	Move	t1,vmi;				! index page address ;
	Move	scr,MyLock;			! get unique lock id ;
	Camn	scr,I!WhoText(t1);		! check against lock id ;
	  Jrst	tdone;				! yes, we already have it ;
	Aosg	t1,I!Text(t1);			! see if already locked ;
	  Jrst	tdone;				! no, we have the lock ;
!	Hrli	t1,1;				! milliseconds ;
	Hrri	t1,'200;			! a few ;
	uuo!HIBER t1,;				! sleep a bit ;
	  Jfcl;					! ignore errors ;
	Jrst	tloop;

tdone:	Movem	scr,I!WhoText(t1);		! mark we have the lock ;
	Pop	p,scr;				! restore scratch ;
	Aos	TxtLevel;			! increase lock level ;

    end;

end "lock text file";


internal simple procedure TxtUnlock;
if ( 0 = TxtLevel_ 0 max (TxtLevel - 1) )
 then begin
    memory[ vmi + I!Text ]_ -1;			! unlock file ;
    BinUnLock;
 end;

internal simple procedure TxtWait;
while ( memory[ vmi + I!Text ] geq 0  )		! if locked and ;
 do if ( memory[ vmi + I!WhoText ] neq MyLock )	!  not MyLock ;
     then begin
	if ( 40 < LockWait_ LockWait + 1 )
	 then memory[ vmi + I!Text ]_ LockWait_ -1
	 else calli( !xwd( '0,'200 ), calli!HIBER );	! wait here ;
     end
     else return;


internal simple integer procedure Traverse( integer r );
begin "traverse tree"
    own integer t;

    BinWait;				! wait for binary unlock ;

    if ( t_ Sub( r ) )			! if a subordinate ;
     then begin "down a level"
	Level_ Level + 1;		! count levels downward ;
	return( t );			!  that is who is next ;
     end "down a level";

    if ( t_ Sib( r ) )			! if a sibling ;
     then return( t );			!  that is who is next ;

    while ( r_ Man( r ) )		! go up one level at a time ;
     do begin "up a level"
	Level_ Level - 1;		! no more downward travel ;
	if ( t_ Sib( r ) )		!  checking for siblings ;
	 then return( t );		!  return if found, else loop ;
     end "up a level";

    level_ Level - 1;			! nothing left at this level ;
    return( 0 );			! so decrement and return 0 ;

end "traverse tree";


internal recursive boolean procedure LCheck( integer r, f, lic );
begin "license check"
    own integer TDT, Val;

    TDT_ Today lsh -18;			! get current date ;

    while ( f_ Glk( f ) )		! if any grant packages ;
     do if ( not( Rdt( f ) ) ) or 	!  check date range for expiration ;
	   ( Gdt( f ) leq TDT leq Rdt( f ) )
	 then if ( Val_ LicAnd( lic, GlcRlc( f ) ) )
	       then if ( r = Rix( f ) )
		     then return( Val )
		     else if ( Val_ LCheck( r, Rix( f ), lic ) )
			   then return( Val );

    return( false );

end "license check";


internal simple integer procedure AllLic( integer r, except(0), miss(0) );
begin "all license"
    integer l, t, TDT, v;

    TDT_ Today lsh -18;			! get current date ;
    if ( L!Hold land (l_ Licens( r )) )	! initial license (on hold?) ;
     then return( L!Hold );		! yes, holding so report none ;

    t_ r;
    while ( t_ Rlk( t ) )		! if any gift packages ;
     do if ( not( Rdt(t) ) ) or 	!  check date range for expiration ;
	   ( Gdt(t) leq TDT leq Rdt(t) )
	 then l_ LicOr( l, (if t = except
			     then LicNot( GlcRlc( t ), miss )
			     else GlcRlc( t ) ) );

    return( l );			! return accumulated license ;

end "all license";


internal recursive procedure LTake( integer f, r, l );
begin "license taking"
    integer g, h;			! lic & grant, actual lic ;
    own integer t, v, w, x;		! temporary pointers to records ;

    if ( w_ x_ Grt( f ) )		! get grant list for grantor ;
     then while( Rix( w ) neq r )	! search for matching gift ;
	   do if not( w_ Glk( x_ w ) )	! remembering previous grant ;
	   then bomb( ["?OPRNGF No grant found for ",NoSp(Sxt(Opr(r))),"."] );
					! w should = grant, x = previous ;

    if ( t_ v_ Gft( r ) )		! get gift list for grantee ;
     then while( Gix( t ) neq f )	! search for matching grant ;
	   do if not( t_ Rlk( v_ t ) )	! remembering previous gift ;
	       then bomb( ["?OPRNGF No gift found from ",NoSp(Sxt(Opr(f))),"."] );
					! t should = gift, v = previous ;
					! t = w, x and v are unrelated ;

    if ( l land '14 )			! if any of WA WF WP ;
     then l_ l lor '14;			!  then remove all WA-WP ;
    if ( l land  '3 )			! if any of RA RF RP ;
     then l_ l lor  '3;			!  then remove all RA-RP ;

    g_ GlcRlc( t );			! variable for work ;
    h_ g land l;			! license actually removed ;

    if not( GlcRlc( t )_ g land lnot l )
     then begin "remove link"

	if ( w = x )			! grant link = grant block ;
	 then Grants( f )_ !xwd( Glk( w ), Grants( f ) )
	 else GlkRlk( x )_ !xwd( Glk( w ), GlkRlk( x ) );

	if ( t = v )			! gift link = gift block ;
	 then begin "cheat first link"

	    ! ** Grants( r )_ !xwd( Grt( r ), Rlk( t ) ) ** ;
	    if ( t_ Rlk( v ) )
	     then begin "copy entry"

		GixRix( v )_ GixRix( t );  GlkRlk( v )_ GlkRlk( t );
		GdtRdt( v )_ GdtRdt( t );  GlcRlc( v )_ GlcRlc( t );

		if ( t = w_ Grt( x_ Gix( t ) ) )
		 then Grants( x )_ !xwd( v, Gft( x ) )
		 else begin "transfer grant"
		    while( t neq w_ Glk( x_ w ) )
		     do;
		    GlkRlk( x )_ !xwd( v, Rlk( x ) );
		 end "transfer grant";

	     end "copy entry"
	     else GixRix( v )_ GlkRlk( v )_ GdtRdt( v )_ 0;

	 end "cheat first link"
	 else GlkRlk( v )_ !xwd( Glk( v ), Rlk( t ) );

	if ( t )
	 then begin "free grant block"
	    GixRix( t )_ GlkRlk( t )_ GdtRdt( t )_ 0;
	    idpb( 0, t_ BitPtr( t lsh -2 ) + vmi + I!Sat );
	 end "free grant block";

     end "remove link";

    l_ h;				! remember any taken license as arg ;
    h_ AllLic( r ) land lnot (L!MG lor L!SU lor L!LG);	! current total ;
    if ( h land '14 )			! any of WA-WP still available ;
     then h_ h lor '14;			!  then mask entire field ;
    if ( h land  '3 )			! any of RA-RP still available ;
     then h_ h lor  '3;			!  then mask entire field ;

    if ( l )				! any license taken ;
     then print( " ", Sxt( Opr( f ) )," to ", Sxt( Opr( r ) )," ", LicPrt( l ), crlf );

    if ( l_ ( l land lnot h ) )		! don't remove what we still have ;
     then begin "license removed"

	g_ h_ r;			! copy pointers ;
	while ( g_ Glk( h_ g ) )	! if any grants by this opername ;
	 do begin "take grants"
	    LTake( r, Rix( g ), l );	!  take the license away ;
	    if ( Glk( h ) neq g )	! if previous link points to ;
	     then g_ h;			!  a new link, use previous ;
	 end "take grants";

     end "license removed";

end "license taking";


internal simple string procedure Token (reference string S);
! ----------------------------------------------------------------------;
!									;
!	Token		Scan the string S and return the first word	;
!			or punctuation character to the caller.		;
!									;
! ----------------------------------------------------------------------;
begin
    own string L;

    scan( S, BrkWht, Brk );	! clear whitespace;
    L _ scan(S, BrkBrk, Brk);	! get the next word;
    if length(L) = 0		! null?;
	then if length(S) = 0	!   null source also?;
	    then return (null)	!    yes - return null;
	    else L _ lop(S);	!    no  - get a character;
    scan( S, BrkWht, Brk );	! clear whitespace;
    return(L);			! return the token;

end;



internal simple string procedure TokNam(reference string S);
! ----------------------------------------------------------------------;
!									;
!	TokNam		Scan the string S and return the first name	;
!			or punctuation character to the caller.		;
!									;
! ----------------------------------------------------------------------;
begin
    own string L;

    scan( S, BrkWht, Brk );	! clear whitespace;
    L_ scan( S, BrkBrk, Brk );	! get the next word;
    if ( Brk = "." or Brk = "/" or Brk = "-" or Brk = "*" )
     then L_ L & (Brk_ lop( S )) & scan( S, BrkBrk, Brk );
    if length( L ) = 0		! null?;
	then if length( S ) = 0	!   null source also?;
	    then return (null)	!    yes - return null;
	    else L_ lop( S );	!    no  - get a character;
    scan( S, BrkWht, Brk );	! clear whitespace;
    return( L );		! return the token;

end;



internal simple string procedure Prompt( String P );
! ----------------------------------------------------------------------;
!									;
!	Prompt		Print a line and read an answer.		;
!									;
! ----------------------------------------------------------------------;
begin
    own string str;

    print( P );				! print prompt ;
    str_ inchwl;			! get line ;
    EolTrm_ !skip!;			! return skip character ;
    return( str );

end;



internal simple integer procedure CvPrt( String P; Integer D );
! ----------------------------------------------------------------------;
!									;
!	CvPrt		Convert the response from Prompt to decimal	;
!			and return that value if geq 0, else return	;
!			the specified default.				;
!									;
! ----------------------------------------------------------------------;
begin
    own string L;
    own integer I;

    return( if Length( L_ Prompt(P) ) and 0 leq I_ cvd(L)
	 then I
	 else D  );

end;


internal simple boolean procedure SendMail( String Address, Type, Text );
begin "sending mail"
    Own string Mail, System;
    Own integer Code;
    define MailerName = { "(MAIL)MAILER.SAV" };
    redefine gettab( x,y ) = { calli( !xwd(x,y), calli!GETTAB ) };

    System_ cvstr( Gettab( 0,!gtCNF ) )[1 for 1] &
	    cvs( Gettab( !cnSYS,!gtCNF ) );

   
    Mail_
	"From:  "& cv6str( Gettab( -1,!gtUNM ) ) &
		   cv6str( Gettab( -1,!gtUN1 ) ) &
	     "@" & System & ".Tymnet" & crlf &
	"To:  "& Address & crlf &
	"Subject:  "& Type &" request at "& TymDay( GetTDT ) & crlf &
	crlf &
	Text & crlf &
	#EOT;

    return( FrmRun( MailerName,
		    F.CCL lor F.NTTY lor F.NWAI lor F.NEOL,
		    Code, "MAI", Mail
		  )
	);

end "sending mail";


internal simple procedure Subordinate( integer r, M );
begin "make subordinate"
    integer t, v;

    if ( t_ Sub( M ) )			! any subordinates ;
     then begin "sort subordinates"

	while ( t )			! yes, check order ;
	 do if ( Slt( Opr(t),Opr(r) ) )	! of opernames provided ;
	     then t_ Sib( (v_ t) )	! try next subordinate ;
	     else done;			! we are in front ;

	if ( t )			! found one ;
	 then begin "insert new subordinate"
	    GniSib( r )_ !xwd( v_Gni( t ), t );	! setup last,next sibling ;
	    GniSib( t )_ !xwd( r, Sib( t ) );	! set next to point to me ;
	    if ( v )				! if any back pointer ;
	     then GniSib( v )_ !xwd( Gni( v ), r )
	     else ManSub( M )_ !xwd( Man( M ), r );
	 end "insert new subordinate"
	 else begin "tack on the end"
	    GniSib( v )_ !xwd( Gni( v ), r );	! I must be next for previous ;
	    GniSib( r )_ !xwd( v, Sib( r ) );	! and previous is my previous ;
	 end "tack on the end";

     end "sort subordinates"
     else ManSub( M )_ !xwd( Man( M ), r );	! set as only subordinate ;

    ManSub( r )_ !xwd( M, Sub( r ) );		! set as manager ;

end "make subordinate";


internal simple integer procedure FndName( string s; integer r );
begin "find a name"
    integer MyOper1, MyOper2;

    MyOper1_ cvSix( S[1 for 6] );	! make string more suitable ;
    MyOper2_ cvSix( S[7 for 6] );	!  for repeated comparisons ;

    Level_ 0;				! initialize level indicator ;

     do begin "check one"		! while anything to check ;

	if ( ( MyOper1 = OprNam( r ) ) and
	     ( MyOper2 = OprNa1( r ) )  )
	 then return( r )		! a match... a winner ;
	 else r_ traverse( r );		! try the next twig ;

     end "check one" until Level leq 0;	! is this twig on the level? ;

    print( "?OPRNNF Opername ", s ," not found"& crlf&crlf );
    return( 0 );

end "find a name";


internal simple procedure itemize( integer req, slf, who; procedure what; string p,q );
begin "itemize entry"
    own integer r;

    if not( slf  or  Licens( MySelf ) land req )
     then bomb( ["?OPRREQ Requires ",LicPrt( req )," to do that."] );

    if not( Licens( MySelf ) land req ) ! make believe we said self ;
     then Line_ Sxt( Opr( MySelf ) ) & " " & Line
     else if not( length( Line ) )
	   then Line_ prompt( p );

    if length( Line )
     then begin "find name"

	if not( r_ FndName( TokNam( Line ), who ) )
	 then return;			! ?OPRNNF message already printed ;

	if ( r = RootNode )		! trying to do root? ;
	 then bomb( q &" ROOT." );

	if ( slf )			! is selowed? ;
	 then if ( r = MySelf )		! trying to do self? ;
	       then
	       else if not( Licens( MySelf ) land req )
		     then bomb( ["?OPRREQ Requires ",LicPrt( req )," to do that."] )
		     else
	 else if ( r = MySelf )		! trying to do self? ;
	       then bomb( q &" Self." );

	what( r );

     end "find name"
     else bomb( "?OPRSYN Syntax error: opername required in command." );

    print( Crlf );

end "itemize entry";


internal simple procedure Display( procedure Dispatch );
begin "display entry"
    own integer r;

    if length( Line )			! anything specified? ;
     then begin "find name"		! allow display of anyone ;

	if ( r_ FndName( TokNam( Line ), 0 ) )
	 then Dispatch( r )		! found it... type it ;
	 else return;			! not there, goodbye. ;

     end "find name"
     else begin "all names"

	level_ 0;			! initialize level indicator ;
	r_ MySelf;			! setup major trunk ;

	 do begin "list all"		! while any wood left ;

	    Dispatch( r );		! put it on the screen ;
	    r_ traverse( r );		! any more wood? ;

	 end "list all" until Level leq 0;

     end "all names";

    print( Crlf );

end "display entry";


end;  %z^