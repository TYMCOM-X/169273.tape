
require "  - Printer queue page layout definitions " message;

require "{}[]" delimiters;
redefine ! = {comment};

Define QueueMap  = 1;			! (1) Page # for queue status;
Define QueueAct  = QueueMap + 1;	! (1) Page # for active devices;
Define QueueData = QueueAct + 1;	! (n) Page # for queue entries;
Define QueueFile = {"(SYS)PQUEUE.SYS"};	! Name of file to use;

Define E!Length = 32;			! Entry length;
Define E!RPPage = 512 div E!Length;	! Records per page;
Define E!JobMax = E!RPPage;		! JobMax ;

!
!	+-----------------------+
!	|			|
!	|	QueueMap	|	(1)  File Page # for queue status
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueAct	|	(1)  File Page # for active entries
!	|			|
!	+-----------------------+
!	|			|
!	|	QueueData	|	(n)  File Page # for data start
!	|			|
!	+-----------------------+
!	|			|
!	|	   ...		|
!	|			|
!	+-----------------------+
!
;

!	Fancy Macro Definitions
;

redefine !Block(Group, Name, Size) = {
    Ifcr Length(Cvps(Size)) = 0 thenc assignc Size = 1; Endc
    Define Group}&{Name = Group;
    Redefine Group = Group + Size;
};

define ForDef(Group,NameList) = {
    ReDefine Group = 0;
    ReDefine ForDefX = {
	Redefine Group}&{$Knt = 0;
	ReDefine Group}&{$Str = {};
	ForLC $Name$_ (}&{NameList}&{)
	 doC {  !Block(Group,$Name$)
		redefine Group}&{$Knt = Group}&{$Knt + 1;
		redefine Group}&{$Str = cvms(Group}&{$Str) &
		       ifcr length(cvms(Group}&{$Str)) thenc {,} & endc
		        { "$Name$" };
	     }
	 endC
    };
    ForDefX
};

define ForDefS(Group,NameList) = {
    ReDefine ForDefX = {
	!Block(ST$,Group)
	redefine ST$$Str = cvms(ST$$Str) &
			   ifcr length(cvms(ST$$Str)) thenc {,} & endc
			   { "Group" };
	redefine ST$$Off = cvms(ST$$Off) &
			   ifcr length(cvms(ST$$Off)) thenc {,} & endc
			   cvs(ST$$Knt);
	ReDefine PS}&"Group"[1 for 1]&{$ = 0;
	ForLC $Name$_ (}&{NameList}&{)
	 doC { !Block(PS}&"Group"[1 for 1]&{$,$Name$)
	       Define Group}&{$}&{$Name$ =
		   (ST$}&{Group lsh 6)
		    lor PS}&"Group"[1 for 1]&{$}&{$Name$;
	       redefine ST$$All = cvms(ST$$All) &
				  ifcr length(cvms(ST$$All)) thenc {,} & endc
				  {"$Name$"};
	       redefine ST$$Knt = ST$$Knt + 1;

	     }
	 endC
    };
    ForDefX
};


Define !!Ent(nam,siz,pnt,itm) = {
    Define P}&{nam (arr)   = { point( siz, (arr),  pnt ) };
    Define LP}&{nam (arr)  = { ldb( point( siz, (arr),  pnt ) ) };
    Define PP}&{nam (arr)  = { point( siz, (arr[itm]), pnt ) };
    Define LPP}&{nam (arr) = { ldb( point( siz, (arr[itm]), pnt ) ) };
    Define AP}&{nam (arr)  = { point( siz, memory[(arr)+itm], pnt ) };
    Define LAP}&{nam (arr) = { ldb( point( siz, memory[(arr)+itm], pnt ) ) };
};
Define !!Ento(nam,siz,pnt,itm) = {
    Define P}&{nam (arr)      = { point( siz, (arr),  pnt ) };
    Define PP}&{nam (arr,off) = { point( siz, (arr[itm+off]), pnt ) };
};


!	Feature test flags
;

Define !Byt(x,y)={( Ifcr length(CVPS(y)) thenc
	(x) lsh (35-(y)) elsec 1 lsh (35-(x)) endc )};

Define E!MinReq = '1;			! Minimum request number ;
Define E!MaxReq = '377777;		! Maximum request number ;
Define E!ParLength = 80;		! Chars in parameter field ;


Define QFet$Debug   = !Bit(0);		! debug code ;
Define QFet$Rerun   = !Bit(1);		! restart printer ;
Define QFet$RDpy    = !Bit(3);		! restart display ;

Define QFet$Signal  = !Bit(7);		! signal scheduler ;
Define QFet$Tell    = !Bit(8);		! dump data tables ;

Define QFet$Trigger = !Bit(15);		! turn on software interrupts ;
Define QFet$Inter   = !Bit(16);		! use interlock mechanism ;
Define QFet$Shut    = !Bit(17);		! kill printer ;

Define QFet$Cmds    = !Bit(31);		! log command info ;
Define QFet$Ports   = !Bit(32);		! log port data ;
Define QFet$Files   = !Bit(33);		! log file info ;
Define QFet$Jobs    = !Bit(34);		! log job info ;
Define QFet$LogAll  = !Bit(35);		! log everything ;


!   Page Format for Queue MAP
;

Define	Q! = 0, Q!Length = 512, Q!!Version = 0;
! -- Queue ;
    !Block(Q!,Version)			! queue format version ;
    !Block(Q!,Feature)			! queue features implemented ;
    !Block(Q!,Type)			! type of queue ;
    !Block(Q!,Name)			! queue name ;
    !Block(Q!,Lock)			! lock the entire queue ;
    !Block(Q!,WLock)			! write lock, ok to read ;
    !Block(Q!,Open)			! count of users in queue ;
    !Block(Q!,Next)			! next available req # ;
    !Block(Q!,High)			! highest entry in use ;
    !Block(Q!,Hole)			! first available entry slot ;
    !Block(Q!,Count)			! total entries in queue ;
    !Block(Q!,Request)			! cyclic request number ;
    !Block(Q!,Extra)			! extra entry word ;
! -- Parameter ;
    !Block(Q!,LogLim)			! default log limits (see E!LogLim) ;
! -- Counts ;
    !Block(Q!,Slots)			! max queue slots ;
    !Block(Q!,Jobs)			! jobs to schedule ;
    !Block(Q!,Pages)			! page printed to date ;
! -- Operation ;
    !Block(Q!,Flags)			! system interlock flags ;
    !Block(Q!,New)			! indicate something changed ;
    !Block(Q!,Daytime)			! last UDT scheduler was here ;
    !Block(Q!,System)			! system que start UDT ;
! -- Per Job ;
    !Block(Q!,Device,E!JobMax)		! print device ;
    !Block(Q!,Status,E!JobMax)		! status ;
    !Block(Q!,JobAct,E!JobMax)		! action ;
    !Block(Q!,JobRec,E!JobMax)		! record being printed ;
    !Block(Q!,JobLog,E!JobMax)		! log limits ;
! -- ;
    Define Q!LastEntry = Q! - 1;	! last used location ;
    ifcr ( Q! > Q!Length )
     thenc require "?"&crlf&"?PQUEUE.DEF error: Map size larger than "&
		    cvs(Q!Length)&" ... = "&cvs(Q!)&crlf
		    "?    Increase size of map area in queue!!!"& crlf&
		    crlf message;
    endc

Define	E! = 0;
    !Block(E!,Device)			! Sixbit queue device ;
    !Block(E!,Forms)			! Sixbit Forms type ;
    !Block(E!,Privs)			! Privilege word ;
	!!Ent(Zone,  6,  7, E!Privs)		! Time zone ;
	!!Ent(Sup,   1, 22, E!Privs)		! Account Supervisor ;
    !Block(E!,AUN)			! Login directory ;
    !Block(E!,Username,2)		! Username ;
    !Block(E!,Network)			! Network Node-Port info ;
    !Block(E!,Project,3)		! Project Code ;

    !Block(E!,RecNum)			! record number within file ;

    !Block(E!,CmdFile,5)		! dev:(username)file.ext block ;
	Define F! = 0;			! ** File positions ** ;
	!Block(F!,Device)		! ** [0] Device name ;
	!Block(F!,User,2)		! ** [1] Username ;
	!Block(F!,Name)			! ** [3] File Name ;
	!Block(F!,Ext)			! ** [4] File Extension ;
	!!Ent(FErr, 18, 35, E!CmdFile+F!Ext)	! Lookup/Run error code ;

    !Block(E!,Limits)			! Limits [bit fields] ;
	!!Ent(Wid, 9,  8, E!Limits)	! [9] Line width ;
	!!Ent(Len, 9, 17, E!Limits)	! [9] Page length ;
	!!Ent(Ind, 9, 26, E!Limits)	! [9] Indentation width ;
	!!Ent(Pri, 3, 29, E!Limits)	! [3] Job request priority ;
	    Define JP$Min = 0, JP$Max = (2^3)-1, JP$Def = 3, JP$Sys = 6;
	    !      Minimum     Maximum           Default     System    ;
	    Define JP$Run = JP$Min-1;	! Pointer to active running jobs ;
	!!Ent(Cop, 6, 35, E!Limits)	! [6] 1 to 64 copies maximum ;

    !Block(E!Option)			! Option word ;
	!!Ent(Disp,   1,  0, E!Option)	! [1] Print file disposition ;
	    ForDef(PD$,[Keep,Delete])	! ( Copy & Rename ) pre-process ;
	!!Ent(Space,  2,  2, E!Option)	! [2] 0-2 Single,Double,Triple ;
	    ForDef(SP$,[Single,Double,Triple])
	!!Ent(CtyF,   1,  3, E!Option)	! [1] Cty: log events to cty/opr ;

	!!Ent(Restart,3,14, E!Option)	! [3] Restart action ;
	    ForDef(JR$,[None,Start,Page])

	!!Ent(Font,   6, 23, E!Option)	! [?] Character font ;
	!!Ent(HPitch, 6, 29, E!Option)	! [?] Horizontal pitch ;
	!!Ent(VPitch, 6, 35, E!Option)	! [?] Vertical pitch ;
  


    !Block(E!,Status)			! Status information [bit fields] ;

	!!Ent(Stat, 3, 2, E!Status)	! [3] Entry Status ;
	!!Ent(Proc, 6, 8, E!Status)	! [6] Processing status ;
	!!Ent(Stap, 9, 8, E!Status)	! [9]=[3]+[6] Entry+Proc status ;
	!!Ent(Req, 18,35, E!Status)	! [18] Request number {0-262144} ;

	redefine ST$$Knt  =  0;
	redefine ST$$Off  = {};
	redefine ST$$Str  = {};
	redefine ST$$All  = {};
	redefine ST$      =  0;

	ForDefS(Queued,[Wait,Special,Abort,Crash])
	ForDefS(Hold,  [None,User,System,Restart])
	ForDefS(Sched, [Wait])
	ForDefS(Proc,  [Run,Pause,Stop,Restart,Cancel])
	ForDefS(Done,  [End,Restart,Error,Lost])
	ForDefS(Abort, [Input,License,Error,Notice,Zap])
	ForDefS(Cancel,[None,Kill,Error])

ifcr false
 thenc
	! example of how to setup ForDef(S) arrays ;

	Preset!with ST$$Str;
	String  Array StatusString[ 0:ST$-1 ];
	Preset!with ST$$Off;
	Integer Array StatusOffset[ 0:ST$-1 ];
	Preset!with ST$$All;
	String  Array AllStatusString[ 0:ST$$Knt-1 ];
 endc

    