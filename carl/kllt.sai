Entry
		KLLT
;
Begin "KLLT"

Comment

    DSCR BOOLEAN_KLLT("STR1","STR2")

    Caseless string comprison.
    returns TRUE if "STR1" is lexically less than "STR2".

;
Internal simple boolean procedure KLLT( String Str1, Str2 );
start!code
    define a=1, b=2, lpsa='13, temp='14, user='15, sp='16, p='17;
    define ! = "comment";
    label klup, notkeq, keqret;

	HRRZS	-1(SP);		! clear string descriptor markers;
	HRRZS	-3(SP);		! so we can use them directly;
	EXCH	A,B;		! SWAP ACs to not clobber B;
	EXCH	A,-3(SP);	! LENGTH OF THE "STR1", save extra AC;
	MOVE	USER,-2(SP);	! ONE BYTE POINTER;
	MOVE	LPSA,(SP);	! THE OTHER BYTE POINTER ;

KLUP:	SOSGE	-1(SP);		! track length of "STR2";
	  JRST	NOTKEQ;		! if ran out, then "STR1" cannot be less;
	SOJL	A,KEQRET;	! track length of "STR1", -1=true if runs out;
	ILDB	TEMP,USER;	! ONE CHAR;
	TRZ	TEMP,'40;	! clear case bit and check for alphabetic;
	CAIL	TEMP,"A";	! this makes it upper case when it was;
	 CAILE	TEMP,"Z";	!  either upper case or lower case;
	  LDB	TEMP,USER;	!  well, not alphabetic retrieve character;
	
	ILDB	B,LPSA;		! ANOTHER;
	TRZ	B,'40;		! clear case bit and check for alphabetic;
	CAIL	B,"A";		! this makes it upper case when it was;
	 CAILE	B,"Z";		!  either upper case or lower case;
	  LDB	B,LPSA;		!  well, not alphabetic retrieve character;

	CAMN	TEMP,B;		! compare values;
	  JRST	KLUP;		! exactly equal;
	CAMGE	TEMP,B;		! is it less;
	 TLOA	A,-1;		! yes, set -1,,n in AC;
NOTKEQ:	  MOVEI	A,0;		! no,  return false;
KEQRET:	MOVE	B,-3(SP);	! RESTORE AC;

end;

end "KLLT";
