Entry

	GetLic, GetOpr
;
Begin
Require "(SAILIB)SAIL.DEF" Source!file;

define SystemDevice = {"DSK"};		! {"SYS"};

simple procedure LevDef;
begin
end;

string procedure get!line;
begin "G!L"
    integer I;
    string S;
    S _ null;
    do begin
	I _ auxclv(-1,0,'46);		! input a character;
	if I geq '173 then done;	! these are line breaks (ugh);
	if I geq '140 then I _ I - '40;	! convert lower to upper case;
	if I geq '40  then S _ S & I;	! add to string if legal;
    end until I < '40;
    if I = #cr then auxclv(-1,0,'46);	! If CR then read the LF;
    auxclv(-1,0,'11);			! Try and get node to echo;
    return(S);
end "G!L";


internal long real procedure GetOpr( string Name(null) );
begin
    Simple Integer Procedure Radix.45(Integer Ch);
    Begin
	If Ch geq "A" and Ch leq "Z" then Return( Ch+1  - "A" );
	If Ch geq "a" and Ch leq "z" then Return( Ch+1  - "a" );
	If Ch geq "0" and Ch leq "9" then Return( Ch+31 - "0" );
	Return(
	    Case Ch of (
		[" "]  0,
		["-"] 28,
		["."] 29,
		["/"] 30,
		[":"] 41,
		["*"]["@"] 42,
		["'"] 43,
		else 44
	    )
	);
    end;
    
  integer C,NM1,NM2;
  long real L;

  while ( ( length( Name ) = 0 ) or ( Name = "?" ) )
   do begin
    if ( Name = "?" )
      then print( "Enter your name as it appears in the OPER"&
		  " license file."& crlf);
    print("Oper name: ");
    Name _ get!line;
   end;

  Name _ (Name & "            ")[1 for 12];
  NM1 _ NM2 _ 0;
  while ( length( Name ) ) do begin
    C _ Radix.45( Lop(NAME) );
    start!code
      MOVE 3,NM1;
      MOVE 1,NM2;
      IMULI 3,45;
      MULI 1,45;
      ADD 1,3;
      ADD 2,C;
      MOVEM 1,NM1;
      MOVEM 2,NM2;
      end;
    end;
  memory[location(L)] _ NM1;
  memory[location(L)+1] _ NM2;
  return(L);
end;

integer procedure CVHASH(string PW);
begin
  integer C,FIVES,T1,T2,T3,T4;
  integer array X[0:4];
  X[0] _ X[2] _ X[4] _ '555555555555;
  X[1] _ X[3] _ '361275431652;
  FIVES _ '343277244615;
  T3 _ 0;
  while length(PW) do begin "PSWLP"
    C _ lop(PW);
    X[0] _ X[0] + C;
    X[3] _ X[3] + C;
    T4 _ '40;
    do begin "RAND"
      T1 _ X[T3];
      start!code
	MOVE 1,T1;
	MUL 1,FIVES;
	MOVEM 1,T1;
	MOVEM 2,T2;
	end;
      T3 _ T3 + 1;
      X[T3] _ X[T3] + T2;
      if T3 = 4 then begin
	T3 _ X[4] lsh -'42;
	X[0] _ X[0] + X[4];
	end;
      end "RAND" until (T4_T4-1) leq 0;
    end "PSWLP";
  return(X[0]);
  end;


string OPER!NAME;
internal integer procedure GetLic( string OPN(null) );
begin
  long real NAME;
  integer HASH,LIC,PTR,OP,EOF;
  integer array BUF[0:'777];
  string TMP;
  define bomb (X) = {begin
	print(X,crlf);
	release(OP);
	Oper!Name _ null;
	return(0) end};
  define
    bfnm1 = 0,
    bfnm2 = 1,
    bfpsw = 2,
    bflic = 3,
    nm1 = {location(NAME)},
    nm2 = {location(NAME)+1};

  if ( length( OPN ) = 0 )		! oper name not supplied? ;
   then return( 0 );			! return without the goodies ;

  NAME _ GetOpr (OPER!NAME _ OPN);	! Hash name;

  auxclr(-1,memory['200],'64);		! Turn off echo;
  while true do begin
    print("Password: ");
    TMP _ get!line;
    if TMP = "?"
      then print("?",crlf,
	"Enter your password associated with the OPER name ",
	OPER!NAME, ".",crlf)
      else done;
    end;
  HASH _ CVHASH (TMP);				! hash password;
  print(crlf);
  auxclr(-1,memory[0],'64);			! Turn on echo;
  auxclv(-1,0,'11);				! !LVDEF;
  open(OP_getchan, SystemDevice, '17,0,0,0,0,EOF_true);
  if EOF then bomb("?Can't init SYS:");
  begin "LOOKUP"
    define !CHLK = '4;		! CHANIO lookup function;
    define !RBLIC = '14;	! RIB address of file license;
    integer array XL[0:!RBLIC];
    XL[0]_arrinfo(XL,2);
    XL[2]_cvsix("DRWSPR");
    XL[3]_cvsix("EPO");
    chnior(OP,XL[0],!CHLK);
    if not !SKIP! then
	bomb("?OPER password file not found");
    if (XL[!RBLIC] land '400000)=0 then 
	bomb("?OPER password file has no license");
    end "LOOKUP";
  do begin "SEARCH"
    arryin(OP,BUF[0],'1000);
    if EOF then done "SEARCH";
    for PTR _ 0 step 7 until '770 do begin "TRY"
      if BUF[PTR+bfnm1] neq memory[nm1] then continue "TRY";
      if BUF[PTR+bfnm2] neq memory[nm2] then continue "TRY";
      EOF _ BUF[PTR+bfpsw] neq HASH;
      LIC _ BUF[PTR+bflic];
      done "SEARCH";
      end "TRY";
    end "SEARCH" until EOF;
  close(OP);
  release(OP);
  if EOF then begin
    print("?Bad name or password",crlf);
    return(0);
    end;
  return(LIC);
  end;


End;
