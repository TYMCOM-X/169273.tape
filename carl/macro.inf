MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 1
GENERAL INFORMATION - MACRO.DOC AND MACRO.INF


1.0  GENERAL INFORMATION - MACRO.DOC AND MACRO.INF

     This file, MACRO.INF, is all of the  external  changes  from  MACRO
46(52) to MACRO 53B(1155).

     The file, MACRO.DOC, is internal documentation for the changes from
MACRO  46(52)  to  MACRO  53B(1155A).   This  includes  known  bugs  and
deficiencies, with solutions  or  examples  of  work  arounds  for  some
problems.

     NOTE:  The changes in this version of macro are to match changes in
DEC's  macros.  The Macro Assembler Reference Manual can be ordered from
DEC (order number AA-4159C-TM, or AA-C780C-TB).






2.0  SUMMARY

MCR47.DOC -- Changes from MACRO 46(52) to MACRO 47(113) Dec, 1971
Macro version 47 is version  46  with  edits  #53  through  #113.   This
version has no known deficiencies and fully replaces version 46.

MCR50.DOC -- Changes from MACRO 47(113) to MACRO 50(272) Oct, 1974
Macro version 50 is version 47 with edits #114 through  #272  inclusive.
This version has no new deficiencies and fully replaces version 47.

MCR50A.DOC -- Changes from MACRO %50(272) to MACRO %50A(432) August 1976
The purpose for this release is  to  consolidate  enhancements  and  bug
fixes  made  since  the last release.  This release includes 80 seperate
changes to MACRO.  Version 50A has been successfully tested in-house and
at several field-test sites.

No major new features have  been  implemented.   New  arguments  to  the
.DIRECTIVE  pseudo-op have been added, and are discussed in elsewhere in
this document.  KL10 opcodes and extended opcodes have been  implemented
in  this  release, and the values for CALLIs through 162 have been added
to bring MACRO into sync with DEC's 6.02 monitor release.

There is no problem in converting to the  new  version.   However,  this
release  implements  version 5 universal files, which are not downwardly
compatible with version 4.  In certain instances, the user will be asked
by  MACRO  to  recompile  existing  universal  files.   Under version 5,
default arguments are saved in binary universals.

Version 50A fully supersedes all previous versions, and  includes  edits
#373  to  #432,  excluding  edits  #300  to  #317, which were used for a
special TOPS-20 version of MACRO (identified as MACRO 51).

MCR52.DOC -- Changes from V50A(432) to V52(551) February 1977
The purpose for this release is to produce a single version of MACRO for
both  the  DECSYSTEM-20  and  DECSYSTEM-10  by merging versions 51 (from
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 2
SUMMARY


TOPS-20) and 50A (from TOPS-10).   The  single  version  of  MACRO  will
reduce the current support exposure.  The functional goals for MACRO V52
are as follows:

     A.  Enhance MACRO processing capabilities

     B.  Fix bugs

     C.  Provide a single basis for coherent future development.

     D.  Support use of external symbols in arbitrary expressions.



Version 52 fully supersedes all previous versions, and includes edits up
to #551.


                             ***WARNING***

MACRO V52 requires that the REL files it generates be loaded  with  LINK
V3A, which supports the POLISH fixup capability with one patch required.

MCR53.DOC -- Changes from V52(551) to V53(1020) March 1978
The   purpose   of   this   release   is   to   provide    a    software
multiple-segmentation (PSECT) facility.

Version 53 fully supersedes all previous versions, and includes edits up
to  #1020.   If PSECTS are used, the resultant .REL files be loaded with
LINK V4, which fully supports the PSECT facility.

MCR53A.DOC -- Changes from  V53(1020)  to  V53A(1152)  August  1979  The
purpose  of  this  release  is to provide a more reliable version of the
product.

MACRO version 53A includes edits up to #1152.  If PSECTS are  used,  the
resultant  .REL  files  must  be  loaded with LINK V4 or later versions,
which support the PSECT facility.

For TOPS-10 systems, MACRO is  documented  in  the  DECsystem-10  User's
Guide,  and  in the DECsystem-10 MACRO Assembler Reference Manual, order
number AA-C780C-TB.

For TOPS-20 systems, MACRO is documented in the  TOPS-20  User's  Guide,
and  in  the DECSYSTEM-20 MACRO Assembler Reference Manual, order number
AA-4159C-TM.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 3
EXTERNAL CHANGES


3.0  EXTERNAL CHANGES

3.1  Version 47

     A.  Add new CALLIs #111 thru #120.

     B.  Turn on KI-10 opcodes by default  so  that  KI-10  opcodes  are
         generated whenever possible.

     C.  Allow a user  to  save  the  current  MACRO  core  image  after
         UNIVERSAL files have been assembled by re-starting MACRO at the
         REENTER address.  A new switch /U clears the universal area and
         setsts the starting address.

     D.  Add new suffixes K, M and G after numbers to designate  1000*n,
         1000000*n and 1000000000*n.

     E.  Add MTAPE UUO mnemonics as well as CALLIs and TTCALLs.

     F.  Implement  the  ARRAY  and  INTEGER  pseudo-ops  as   standard.
         INTEGER  allocates  a  single word of storage per variable, and
         ARRAY allocates as many words  as  specified  by  ARRAY  FOO[n]
         where n is an integer number.

     G.  The program break may be larger if a  LIT  pseudo-op  is  given
         just  before  the END statement (so literals are printed), than
         if no LIT is given.

         NOTE:  PRGEND cannot be used in macros which intend to continue
         over the PRGEND.


MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 4
EXTERNAL CHANGES


3.2  Version 50

     A.  Implement binary UNIVERSAL  files.   That  is,  write  file.UNV
         which  contains definitions, opdefs, and macro definitions in a
         form which  can  be  read  directly  into  memory  rather  than
         re-assembling  the  specified UNIVERSAL file.  Change (Add?) /U
         which prevents writing over an existing UNV file thus  allowing
         new versions to be tested without overwriting the old version.

     B.  Add pseudo-ops .REQUEST and .REQUIRE which  generate  the  SAIL
         block types 16 and 17.  Syntax for both is:

             .REQUEST DEV:FILE[PPN]

         where the only legal extension is .REL and [PPN]  is  optional.
         The only difference between the two pseudo-ops is that .REQUEST
         loads the file in library search mode, while .REQUIRE does not.

     C.  Add the operators ^!  and ^- to mean logical  XOR  and  logical
         NOT.

     D.  Add global symbol .CPU.  which is  put  in  the  user's  symbol
         table  with  a  value which reflects the CPU type that MACRO is
         running on.  This value may be tested with IFN's etc,  and  the
         values are:

              1 = PDP-6,  2 = KA-10,  3 = KI-10

     E.  Make the location counter on the listing file show  the  PHASED
         location on a PHASE pseudo-op rather than the current location.
         This is the location of where the code should  be  when  it  is
         executed.

     F.  Add  the  FAIL-compatible  pseudo-ops  LINK,  LNKEND  and  ORG.
         However,  since  all  new  pseudo-ops  begin with "." these are
         .LINK, .LNKEND and .ORG.  .LINK and .LNKEND (used to be .ELINK)
         will  generate link block type 12 code.  .ORG is similar to LOC
         and RELOC.

     G.  Add  the  pseudo-op  .DIRECTIVE  which  takes  a  list  of  new
         pseudo-ops  which  need no arguments.  See the MACRO manual for
         more information.

     H.  Add switch /nnL to define the page size for the listing file.

     I.  Add .TEXT pseudo-op to generate ASCIZ block type for LINK-10.

     J.  Enhance the SEARCH statement  to  allow  the  expanded  syntax:
         "SEARCH  FOO(DSKB:BAR.ABC[123,456,SFD,LIST])"  to first look in
         memory  for  the  UNIVERSAL  then,  to  look  on  device  DSKB:
         [123,456,SFD,LIST]  for the file named BAR.ABC and copy it into
         core  with  the  UNIVERSAL  name   FOO.    The   default   file
         specification is "DSK:xxxxxx.UNV" where xxxxxx is the UNIVERSAL
         name.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 5
EXTERNAL CHANGES


     K.  The .DIRECTIVE pseudo-op takes KA10 and KI10  as  an  argument.
         These  pseudo-ops  take  as  values  the types of CPUS that the
         produced program can run on.  More than one CPU type can be set
         via  the  .DIRECTIVE.   LINK detects conflicts at load time and
         reports them.  The produced CPU type codes are:

             KA10=1b5  KI10=2b5

     L.  Fix the problem in version 47 so that the  LIT  statement  seen
         just  before  the  END  or  PRGEND  statements  will  now  work
         correctly and the program break will be correct.

     M.  Add the ".IF conditional", Form is:

             .IF SYMBOL ATTRIBUTE,<CODE>

         where attribute is one of:

             SYMBOL, SYNONYM, MACRO, OPDEF, EXTERNAL, ENTRY,
             INTERNAL, GLOBAL, LOCAL, LABEL, ASSIGNMENT,
             ABSOLUTE, RELOCATEABLE, LRELOCATEABLE(LHS),
             RRELOCATEABLE(RHS), NUMERIC


MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 6
EXTERNAL CHANGES


3.3  Version 50A

     A.  Two new arguments to the .DIRECTIVE pseudo-op have been  added,
         .OKOVL  and  .EROVL.   When  the condition is .OKOVL, overflows
         from divide and multiply  operations  are  ignored.   When  the
         condition  is  .EROVL,  an  "N"  error is produced on overflow.
         Note that although the code is generated in either case when an
         overflow  occurs, existing programs that compiled without error
         before may now produce "N" errors because .DIRECTIVE .EROVL  is
         the default.

     B.  A single "!" (exclamation point) can  follow  symbol  names  in
         pseudo-ops  like  INTERN  and EXTERN.  The effect is to supress
         the symbol to DDT.

     C.  The value of the symbol .CPU. is  now  defined  for  the  KL-10
         processor.  The values of this built in symbol are:

             PDP6 = 1, KA10 = 2, KI10 = 3, and KL10 = 4

     D.  The KL10 opcodes and extended opcodes have been  added  to  the
         built in symbols.

     E.  The .DIRECTIVE pseudo-op now takes KL10 as an argument, as well
         as KA10 and KI10.  These pseudo-ops take as values the types of
         CPUS that the produced program can run on.  More than  one  CPU
         type  can be set via the .DIRECTIVE.  LINK detects conflicts at
         load time and reports them.  The produced CPU type codes are:

             KA10=1b5  KI10=2b5  KL10=4b5

     F.  The values for the CALLIS thru 162 have  been  added  to  bring
         MACRO  into  sync  with  the TOPS-10 6.02 monitor release.  The
         PORTAL opcode has also been added.

     G.  Two new .DIRECTIVE  pseudo-op  arguments  have  been  added  to
         facilitate  the  development  and  debugging  of new LINK block
         types.   These  two   arguments,   under   the   normally   off
         conditional,  "TSTCD", are .TCDON and .TCDOFF (Test CoDe ON and
         Test CoDe OFF).  When a .DIRECTIVE .TCDON is seen, the  current
         LINK  REL block is closed and a special flag is set.  From that
         point on any code that would normally be placed in a  formatted
         code  block  (LINK  type 1), is put verbatim into the REL file.
         The flag is cleared when a corresponding .DIRECTIVE .TCDOFF  is
         seen.  The effect is much like the .TEXT pseudo-op, except that
         any number of arbitrary values can be placed in the  REL  file.
         The expressions stowed while between .TCDON and .TCDOFF must be
         absolute and not EXTERNAL.

     H.  The .DIRECTIVE pseudo-op now accepts  NO  before  an  argument,
         which  functions as a logical not.  NO preceding an argument to
         the .DIRECTIVE operator  causes  the  negative  of  the  action
         described  by  that  argument  to  take  place.   If no logical
         negative action makes sense, an "A" error is produced.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 7
EXTERNAL CHANGES


3.4  Version 52

     A.  Polish Externals
         MACRO generates and passes to LINK Polish fixups for  externals
         symbols  appearing  in  arbitrary  expressions.   These complex
         expressions are allowed wherever an external symbol was allowed
         previously.

     B.  .IFN Pseudo-op added, .IF/.ifn bugs fixed.
         General format is:

              .IF symbol, QUALIFIER, <conditional assembly>

         where QUALIFIER is one of:

                SYMNONYM, MACRO, OPDEF, EXTERNAL, ENTRY, INTERNAL,
                GLOBAL, LOCAL, LABEL, ASSIGNMENT, ABSOLUTE, OPCODE,
                RELOCATABLE, LRELOCATABLE, RRELOCATABLE, NUMERIC

         Differences from previous version:

         1.  There must be a comma "," after the  qualifier  and  before
             the conditional assembly.

         2.  More qualifiers

         3.  Unique abbreviation allowed for qualifier.



     C.  MACRO call argument handling:

         1.  Tabs and spaces before and after each are eliminated unless
             within parentheses or angle-brackets.  Directive .ITABM and
             .XTABM are used to control the tab/space trimming.

         2.  Square-brackets are counted and act as  quotation  brackets
             when not in angle brackets.  Hence the following MACRO call
             may be written:

                 FOO [MOVE 1,1
                       MOVE 2,2]

             also,

                 JRST [FOO 123]

             where FOO is a defined MACRO.

             argument  list  will  be  terminated  on   unpaired   right
             parenthesis, square-bracket, or angle bracket.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 8
EXTERNAL CHANGES


         3.  .DIRECTIVE MACMPD (MACRO match  paired  delimiters)  causes
             the  above  described delimiter handling and imply a .XTABM
             also (.ITABM has no effect with MACMPD).

         4.  .DIRECTIVE NO MACMPD disables the new  delimiter  handling.
             Both  .ITABM  and  .XTABM  may  be  used with .DIRECTIVE NO
             MACMPD.   (.DIRECTIVE  NO  MACMPD   and   .XTABM   together
             correspond to default of V50 and before).

             Note:  (See a later section for a more detailed write-up on
             the new MACRO call handling.)



     D.  Use of "NO" on  a  directive  which  has  no  logical  negative
         produces an error.

     E.  Other new directives

         1.  .DIRECTIVE LITLST -- MACRO lists  binary  in-line  for  all
             literals.    the  listing  of  literals  at  "LIT"  is  not
             affected.

         2.  .DIRECTIVE FLBLST(first-line binary listing) -- causes only
             the  first  binary  word  to be listed for Pseudo-op (e.g.,
             ASCII) which may  generate  many  words.   This  makes  the
             listing  appearance  more  like  the  source and eliminates
             generally useless octal output.

         3.  .DIRECTIVE MACPRF -- affects assembly  when  a  symbol  has
             both  a  value and a MACRO definition.  Normally, the MACRO
             1efinition is taken if the symbol appears in  the  operator
             field  of  a  statement,  otherwise  the  value  is  taken.
             ".DIRECTIVE MACPRF" causes the MACRO definition to be taken
             first  always.   This is intended to support programs which
             use MACRO definitions as variables.  The default setting is
             "NO MACPRF", i.e., compatible with MACRO-50 and before.

         4.  .DIRECTIVE SFCOND(suppress failing conditionals) -- when in
             effect,  this  suppresses  listing  of  source lines within
             assembler conditionals which fail.  This  is  intended  for
             use  with  programs  having  many feature test switches and
             allows listings to be produced which  show  only  the  code
             actually in use.



     F.  The INTERNAL declaration is legal on a symbol declared OPDEF.

     G.  Tags within literals now work properly, and any number  may  be
         used.   Tags  may also be used with nested literals.  Such tags
         may be referenced within the scope of a literal or a  group  of
         nested  literals.   However forward references from outside the
         literal or another literal may not be made.  Tags defined in  a
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)         Page 9
EXTERNAL CHANGES


         literal,  also,  may  not  appear  in  any arbitrary arithmetic
         expression.  MACRO will  interpret  them  as  external  symbols
         instead and a polish fixup is generated.

     H.  The listing output when within literals is generally  improved,
         e.g., the listing mode (SALL/LALL/XALL) is properly observed.

     I.  The general error message of LABEL+n has been improved, where n
         is  a  decimal  number representing the offset of lines of code
         generated from the given label.

     J.  When a symbol normally used as an operator is encountered  with
         an  arithmetical or a logical operator immediately following it
         instead of a  tab  or  a  space  as  expected,  the  symbol  is
         interpreted  by  MACRO  as  a  part of an arithmetic or logical
         expression rather than as an operator.   The  opcode  value  is
         used in the evaluation of the expression.

     K.  MACRO'S  asterisk-level  command  scanner  has  been  generally
         improved.   Added  features  are  that  SFDS are now allowed on
         output file specifications, comments are  allowed,  [P,pn<CRLF>
         no  longer  generates  a command error, and null extensions are
         allowed on input file specifications.

     L., RIM10 and RIM10B are now cleared at PRGEND.

     M.  The "SYN" pseudo-op may be used in a UNV  file.   The  internal
         storage  of  a  symbol  that is declared to be synonymous to an
         operator is changed to keep the sixbit  operator  name  as  its
         value.

     N.  New universal file format

                1st word/   777,,code
                2nd word/   MACRO version #

         where the code field indicates what type of data  is  contained
         in  this  UNV  file.   It  was  previously  referred as the UNV
         version #, and has the following bit definitions:

         000001 on, if default arguments specified in MACRO definitions
         000002 on, if Polish is included
         000004 must be on to be compatible with previous versions
         000010 on if new SYN handling in UNV
         000020 on if a MACRO version number is written as the second word

         NOTE:  MACRO V52 will read UNV file generated by  all  previous
         versions   of   MACRO.    However,  a  UNV  file  generated  by
         MACRO V52(551) will not be read by previous MACROS.

     O.  No check will be made with the types of  symbols  being  PURGED
         with   "PURGE"  pseudo-op.   All  specified  symbols  including
         undefined and  external  will  be  removed  from  symbol  table
         without error messages.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 10
EXTERNAL CHANGES


     P.  The coding format for the MACRO source file MACRO.mac has  been
         changed to conform to the TOPS20 coding convention.





3.4.1  Suggestions To The Users - 

     A.  Users are warned that they should begin  to  search  UUOSYM  in
         their  MACRO  programs,  as CALLIs will disappear from MACRO in
         some future version.

     B.  If you find a working MACRO program no  longer  assembles  with
         MACRO  V52, and you are getting bizarre errors, such as "No END
         Statement Encountered" or a bunch of U- or  Q-errors,  try  the
         following two things before anything else:

         1.  Put in ".DIRECTIVE NO MACMPD"  at  the  beginning  of  your
             program.    This  directive  tells  MACRO  to  do  the  old
             macro-call argument processing.

         2.  Look for "un-quoted", un-matched [,], (,) in a  macro  call
             line.  When you find them, quote them with < >, or whatever
             is appropriate.




MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 11
EXTERNAL CHANGES


3.5  Version 53

     A.  .PSECT pseudo-op:
         The .PSECT pseudo-op directs MACRO to start or continue placing
         code and/or data into the named program section.
         Syntax:

             .PSECT name, origin

         Where "name" is the name of the program section;  name  may  be
         any  construction which would be valid as a symbol but will not
         conflict with a symbol or macro of the same name.   MACRO  will
         generate a global symbol having the PSECT name and at load time
         the symbol will take on the PSECT origin as its value.

         The origin, if supplied in the program, tells  LINK  where  the
         PSECT origin should be.  If not supplied then it must be set by
         the /SET:NAME:ORIGIN switch to LINK.   If  both  are  supplied,
         whichever  occurs  first is used and cannot be over-ridden by a
         later declaration.

     B.  .ENDPS pseudo op:
         The .ENDPS pseudo-op directs MACRO to stop placing code  and/or
         data  into  the current program section and to start placing it
         in the previous (more outer nested) program section.
         Syntax:

             .ENDPS [name]

         The name field is optional  and  if  present  will  be  checked
         against the current .PSECT name.  If there is a disagreement, a
         warning diagnostic will be issued.  This check cannot  be  done
         for the blank .PSECT.

     C.  "PSECT" Nesting
         .PSECT and .ENDPS are essentially brackets which  surround  the
         code  and/or  data which is to be loaded into the named program
         section.  These brackets may be nested to a maximum depth which
         is  an  assembly  parameter normally set to 16 decimal when the
         MACRO assembler is assembled.  Another such assembly  parameter
         within  MACRO  is  the  maximum number of distinct .PSECT names
         which may occur within a single assembly;  it is  normally  set
         to 64 decimal.

     D.  Restrictions

         1.  .PSECT and .ENDPS are  not  allowed  within  a  "UNIVERSAL"
             file.

         2.  While MACRO allows a macro and a symbol to  have  the  same
             name, this can produce unpredictable results if the two are
             not in the same symbol table during an assembly.  This  can
             happen  if one is in a universal symbol table and the other
             is not, or if the two appear to be  in  separate  segments.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 12
EXTERNAL CHANGES


             It  is recommended that symbols and macros of the same name
             not be employed.  If they are, DEC reserves  the  right  to
             change  the  implementation  of  the  MACRO  assembler with
             respect to how this situation is treated.

         3.  If universal files are searched while assembling a  program
             with   multiple   program   sections,  symbols  within  the
             universal files will appear to  be  in  the  blank  program
             section.   This  is  particularly  relevant  to relocatable
             symbols.

         4.  .PSECT, HISEG, and TWOSEG are all mutually exclusive.

         5.  Literals containing  inter-PSECT  references  will  not  be
             collapsed,  therefore  if  there  are  two  such  identical
             literals, two separate entries in the literal table will be
             made.

         6.  PRGEND is illegal with .PSECT and MACRO will treat it  like
             END and the rest of the file will be truncated.



     E.  New Error Messages:

         1.  "S" Errors:
                 Attempt to nest .PSECTs too deep.
                 Attempt to unnest .PSECTs too far.
                 .PSECT occurs while assembling a universal.
                 Too many distinct .PSECT names.
                 Attempt to mix .PSECT with HISEG/TWOSEG.

         2.  "Q" Warning (additional):
                 .ENDPS specifies the wrong name.
                 .PSECT specifies conflicting attributes.
                 .PSECT specifies unknown attributes.

         3.  New MCR error messages:
                 MCRSTO -- Search table overflow
                 MCRATS -- Argument too small.
                 MCRLTL -- Literal too long.
                 MCRISD -- Illegal syntax in DEFINE.
                 MCRISR -- Illegal syntax in REPEAT.
                 MCRISC -- Illegal syntax in conditional.
                 MCRISI -- Illegal syntax in IRP or IRPC or REPEAT.



     F.  .IF ARG,REFERENCED, ....  >
         The code will be assembled if arg is in the symbol table.

     G.  .IF ARG,NEEDED, ....  >
         The code will be assembled if arg is in the  symbol  table  and
         its value is undefined.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 13
EXTERNAL CHANGES


     H.  Alternate  Interpretations  of  MACRO  Arguments   The   normal
         argument  passed  by  a  macro  call  is  simply  the string of
         characters given with the call.  MACRO offers  three  alternate
         interpretations of the passed argument.

         1.  If you prefix a backslash-quotemark (") to an argument, the
             argument  is  expected  to  have a value of a ASCII string.
             The ASCII string value is passed.

         2.  If you prefix a backslash-apostrophe (')  to  an  argument,
             the  argument  is  expected  to  have  a  value of a SIXBIT
             string.  The ASCII representation of that SIXBIT  value  is
             passed.

         3.  If you prefix a backslash () to an argument, MACRO  expects
             a  numerical  value  and the ASCII string representation of
             the value is passed.



         LALL
         DEFINE LOOKIE(STR,ARG)< 
                 REMARK  The passed argument is:  ARG
                 REMARK  build a new string:     str'arg >
 
 ;Example of prefixing argument with \"
 CASE1:  VALUE="XIT"
         LOOKIE  <?ERROR IN LINK MODULE LNK>,VALUE^
                 REMARK  The passed argument is: VALUE
                 REMARK  build a new string:     ?ERROR IN LINK MODULE LNKVALUE ^
 CASE1A:  LOOKIE <?ERROR IN LINK MODULE LNK>,\"VALUE^
                 REMARK  The passed argument is: XIT
                 REMARK  build a new string:     ?ERROR IN LINK MODULE LNKXIT

 ;Example of prefixing argument with \'
 CASE2:  VALUE='A'
         LOOKIE  DSK,VALUE^
                 REMARK  The passed argument is: VALUE
                 REMARK  build a new string:     DSKVALUE      ^
 CASE2A: REPEAT  3,<
         LOOKIE  DSK,\'VALUE
                 VALUE=VALUE+1>
         LOOKIE  DSK,\'VALUE^
                 REMARK  The passed argument is: A
                 REMARK  build a new string:     DSKA    ^
                 VALUE=VALUE+1
         LOOKIE  DSK,\'VALUE^
                 REMARK  The passed argument is: B
                 REMARK  build a new string:     DSKB    ^
                 VALUE=VALUE+1
         LOOKIE  DSK,\'VALUE^
                 REMARK  The passed argument is: C
                 REMARK  build a new string:     DSKC    ^
                 VALUE=VALUE+1
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 14
EXTERNAL CHANGES


 ;Example of prefixing actual argument with \
 CASE3:  VALUE=0
         LOOKIE LPT,value+1>^
                 REMARK  The passed argument is:  VALUE+1
                 REMARK  build a new string:     LPTVALUE+1
 CASE3A: REPEAT 3,<
         LOOKIE  LPT,\<VALUE+1>
                 VALUE=VALUE+1>
         LOOKIE  LPT,\<VALUE+1>^
                 REMARK  The passed argument is: 1
                 REMARK  build a new string:     LPT1    ^
                 VALUE=VALUE+1
         LOOKIE  LPT,\<VALUE+1>^
                 REMARK  The passed argument is: 2
                 REMARK  build a new string:     LPT2    ^
                 VALUE=VALUE+1
         LOOKIE  LPT,\<VALUE+1>^
                 REMARK  The passed argument is: 3
                 REMARK  build a new string:     LPT3    ^
                 VALUE=VALUE+1

     I.  Polish bugs fixed in the following areas:
             <XWD POL,POL> or <POL,,POL>
             <IOWD POL>
             <-POL>
             -EXP where EXP is a relocatable expression
             @POL(AC)
             OPDEF FOO [ POL ]
             Generate full word fixup for FOO  

     J.  Polish listing format -- A  number  sign  ( )  in  the  listing
         indicates  that  a Polish expression is required to resolve the
         expression.  For example:

         561  02  000  000000#      ;requires right half Polish fixup
         000000000000#              ;requires full word Polish fixup
         000000# 000002             ;requires left half Polish fixup
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 15
EXTERNAL CHANGES


     K.  PSECT index in listing -- PSECT index is output at the  end  of
         relocation counter value in the listing, see example below:

         5176  005656'02 201 03 0 02 000000          MOVEI   T3,.NDNOD(T2) 
         5177  005657'02 561 02 0 00 000000#         HRROI   T2,OURNAM-1   
         5178  005660'02 260 17 0 00 000000*         CALL    CPYTU1        
         5179  005661'02 254 00 0 00 005653*         RETSKP                
         5180
         5181                                        TNXEND
         5182                                        END
         PROGRAM BREAK IS 000000
         PSECT 1 BREAK IS 000534 FOR RSCOD
         PSECT 2 BREAK IS 007036 FOR NRCOD
         PSECT 3 BREAK IS 000066 FOR BGSTR
         PSECT 4 BREAK IS 000011 FOR BGPTR
         CPU TIME USED 02:28.153
         98P CORE USED

     L.  Polish not allowed with RELOC BLOCK Conditionals

     M.  KL instructions have been updated:

                           JRST and JFCL Mnemonics
                           -----------------------
          254 04 0 00 000000      HALT     254 04 0 00 000000    JRST 4,
          255 06 0 00 000000      JCRY     255 06 0 00 000000    JFCL 6,
          255 04 0 00 000000      JCRY0    255 04 0 00 000000    JFCL 4,
          255 02 0 00 000000      JCRY1    255 02 0 00 000000    JFCL 2,
          254 12 0 00 000000      JEN      254 12 0 00 000000    JRST 12,
          255 01 0 00 000000      JFOV     255 01 0 00 000000    JFCL 1,
          255 10 0 00 000000      JOV      255 10 0 00 000000    JFCL 10,
          254 02 0 00 000000      JRSTF    254 02 0 00 000000    JRST 2,
          254 01 0 00 000000      PORTAL   254 01 0 00 000000    JRST 1,
          254 06 0 00 000000      XJEN     254 06 0 00 000000    JRST 6,
          254 05 0 00 000000      XJRSTF   254 05 0 00 000000    JRST 5,
          254 07 0 00 000000      XPCW     254 07 0 00 000000    JRST 7,
          254 14 0 00 000000      XSFM     254 14 0 00 000000    JRST 14,

                      KL10 EXTEND Instruction Mnemonics
                      ---------------------------------
          002 00 0 00 000000      CMPSE    010 00 0 00 000000     CVTDBO
          007 00 0 00 000000      CMPSG    011 00 0 00 000000     CVTDBT
          005 00 0 00 000000      CMPSGE   004 00 0 00 000000     EDIT
          001 00 0 00 000000      CMPSL    016 00 0 00 000000     MOVSLJ
          003 00 0 00 000000      CMPSLE   014 00 0 00 000000     MOVSO
          006 00 0 00 000000      CMPSN    017 00 0 00 000000     MOVSRJ
          012 00 0 00 000000      CVTBDO   015 00 0 00 000000     MOVST
          013 00 0 00 000000      CVTDBT   020 00 0 00 000000     XBLT

     N.  Tags defined in a literal -- Tags in literals may be referenced
         anywhere from the program with the following restrictions:
             May NOT be used in an arbitrary expression.
             May NOT be referenced from another PSECT.


MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 16
EXTERNAL CHANGES


     O.  Code Generation Changes -- The descriptions of the block  types
         24,23, and 22 supercede the descriptions in the LINK manual.

         1.  BLOCK 24 -- MACRO generates a set  of  block  24's  at  the
             beginning  of the Rel file for each PSECT in this assembly.
             A type 24 contains three data words  --  a  PSECT  name  in
             SIXBIT,  its  attributes  (right  half) and its index (left
             half), and its origin.  A block 24 establishes a PSECT  and
             associates  it  with an index number so that block 22's and
             block 11's that follow may reference PSECTs  by  the  PSECT
             index number.

         2.  BLOCK 22 -- Interspersed with the type 1 and type  2  codes
             there  are  type  22  codes.  A type 22 directs the linking
             loader to place subsequent type 1 and  type  2  information
             into  the  named  .PSECT.   A type 22 will also precede the
             type 7 block if one occurs and other  type  22s  have  been
             emitted.   A  type  22 contains only one data word which is
             the PSECT index.

         3.  BLOCK 23 -- MACRO generates a set of block 23's for all the
             PSECTs at the end.  A type 23 contains two data words.  The
             first is a .PSECT name in SIXBIT.  The second contains  the
             .PSECT break.

         4.  BLOCK 11 -- There is an additional  type  of  Polish  fixup
             which  occurs  for  assemblies with multiple .PSECTs.  With
             multiple .PSECTs, it is necessary to distinguish among  the
             .PSECTs  within  the  fixups  in order that relocation will
             occur  properly.   Halfword  PSECT  index   of   the   form
             400000+(n-1)  indicates  next  relocatable address is to be
             relocated with respect to the PSECT which is named  by  the
             n'th type 23 block.  The very first PSECT index in block 11
             defines the current PSECT and the  relocation  counter  for
             the   store   address.   Any  relocatable  operand  with  a
             different relocation counter must be preceded by the proper
             PSECT index.

         5.  BLOCK 10 -- Forward  references  of  a  tag  defined  in  a
             LITERAL are chained similarly to that of an external chain.
             A block 10 is generated containing the value of the tag and
             the  start of the chain.  A separate chain is generated for
             each PSECT just as a separate external chain  is  generated
             for PSECT.



     P.  Better RELOC,LOC, .ORG interactions

     Q.  Add .NODDT pseudo-op -- Suppress DDT and part of symbol names

     R.  REL files generated by MACRO V52 and MACRO V53 may not  compare
         with FILCOM.
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 17
EXTERNAL CHANGES


     S.  Universals are not searched  when  processing  label,  ##,  END
         statement   and   the  following  pseudo-ops:   EXTERN,  OPDEF,
         .ASSIGN, SYN,  INTEGER,  ARRAY,  .COMMON,  DEFINE.   Pseudo-ops
         INTERN  and  ENTRY  will still search universals since they are
         not truely defining occurrences.

     T.  OPDEF's may be declared INTERNAL only if no label of  the  same
         name exists.

     U.  LABEL+OFFSET error reporting is now  entirely  source-oriented.
         Specifically,  blank  lines  are  reflected  in the offset, and
         MACRO/REPEAT expansion lines are not.


MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 18
EXTERNAL CHANGES


3.6  Version 53A

     A.  BYTE pseudo-op:
         Externals must be loaded  into  either  fullword  (36  bit)  or
         halfword  (18  bit)  bytes.   Relocatables  must be loaded into
         fullword or halfword bytes, with the  exception  that  a  right
         half only relocatable can be loaded into a right justified byte
         that is between 18 and 36 bits in length.  Examples:

                         BYTE (18) REL1, REL2 (6) 3 (30) RHREL3
                         BYTE (10) 5 (26) RHREL4

     B.  Unary operators:
         Unary operators now properly take precedence  over  all  binary
         and   shift   operators.   This  conflicts  with  the  existing
         documentation.  The hierarchy is now as follows:

         1.  All unary operators
             (+, -, ^-, ^D, ^O, ^B, ^F, ^L, E, K, M, G)

         2.  Shift operators (B-shift, underscore-shift)

         3.  Logical binary operators (!, ^!, &)

         4.  Multiplicative operators (*, /)

         5.  Additive operators (+, -)



     C.  Error message standard:
         On TOPS-10 systems, MACRO will now observe the setting  of  the
         message  level  bits  during  error  message typeout (reference
         monitor GETTAB table .GTWCH(35)).

     D.  Macro call statements and XALL
         MACRO will now list the entire statement in which a macro  call
         appears  if  XALL is in effect.  This may cause the source line
         to be broken up in the listing if multiple macro  calls  appear
         on  the  same  line,  and  the called macros have imbedded line
         terminators.   Comments  on   macro   calls   imbedded   within
         conditionals  will  also  be listed, with the comment appearing
         along with the last line of the macro  expansion,  even  if  no
         code is generated for that line.

     E.  .IF/.IFN pseudo-ops
         Contrary to what the documentation states,  the  .IF  and  .IFN
         pseudo-ops   were   never   intended  to  take  angle-bracketed
         expressions  as  arguments.   Instead,  they  are  intended  to
         provide   a   powerful  mechanism  for  querying  symbol  table
         attributes, given a valid mnemonic  consisting  of  up  to  six
         RADIX50  characters.   The newly defined attribute, "NAME", can
         be used to determine if the argument is a single RADIX50 symbol
         name.   Such a symbol may be enclosed in angle brackets, nested
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 19
EXTERNAL CHANGES


         to any  depth.   The  use  of  angle-bracketed  expressions  is
         allowed,  and  treated  as decribed below, however their use is
         not recommended.

         Limited expression handling  has  been  implemented  to  handle
         situations  in  which  angle-bracketed  expressions are used as
         arguments.  Such an argument will return the  combined  (IORed)
         attributes  of its components, except in the case of relocation
         attributes, which are handled correctly only for a symbol.   In
         addition,  an  angle-bracketed  expression  will have the newly
         defined attribute "EXPRESSION", providing a means of  defending
         against  angle-bracketed  expressions  passed  as  arguments to
         macro calls.  Note that all arguments that work  outside  angle
         brackets will work inside them.

     F.  Psects and literals
         Proper  termination  of  literals  within   code   bounded   by
         .PSECT/.ENDPS  is now enforced.  Early termination of a literal
         which was started in the same PSECT but at a higher level  (due
         to  nesting),  or  the failure to terminate a literal which was
         started in the current PSECT will produce an L error, and  will
         generate the new MCRLNI Literal nesting incorrect message.

     G.  Suppressed symbols
         Symbols  declared  as  suppressed  internal,  but  defined   by
         externals  or  Polish  will now retain the suppressed attribute
         and will not be typed out by DDT.

     H.  PSECT attributes
         Valid PSECT attributes and their definitions are as follows:

         CONCATENATED   When  loading  multiple  modules,  all   PSECT
                        blocks   having   the   same   name   will  be
                        concatenated at load time.
         OVERLAID       When  loading  multiple  modules,  all   PSECT
                        blocks  having  the  same  name will be loaded
                        starting at the same  origin  (each  one  will
                        'overlay' the previous one).
         RWRITE         The PSECT can be  read  and  written  (TOPS-20
                        only).
         RONLY          The PSECT can only be read (TOPS-20 only).
         PALIGNED       When  loading  relocatable  PSECTs  (not   yet
                        supported),  the  PSECT origin will be started
                        at a page boundary.

     I.  PSECTs and PRGEND
         PRGENDs can now occur in a source file containing PSECTs.

     J.  Assembler typeout for PRGENDed programs
         When MACRO is executed via  a  RUN  command,  and  the  listing
         device  is not the terminal, the informational messages (BREAK,
         CPU TIME, CORE USED,  etc...),  will  be  typed  out  for  each
         program  module  in  a  PRGENDed  source  file.  The particular
         program module will be identified by a line following the error
MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 20
EXTERNAL CHANGES


         counts,   indicating   "PROGRAM  XXXX",  where  "XXXX"  is  the
         information appearing on the TITLE statement  for  the  module.
         If  no  TITLE  is specified, the default TITLE, ".MAIN" will be
         typed.  The program  identification  line  will  no  longer  be
         output  to  the  listing file, however, it will now appear with
         the errors typed out when MACRO is invoked via  the  CCL  entry
         point, as done by the COMPIL class commands under TOPS-10.

     K.  New Error Messages:

         1.  "Q" errors:
                 @ appearing in or before AC field
                 Index value has left half for POLISH(INDEX)
                 BYTE (n) RELOCATBLE where n is not 36 or halfword 18
                 @ in unbracketed expression to DEC/EXP/OCT
                 Multiple TITLEs or TITLE/UNIVERSAL conflicts ("M")

         2.  "E" errors:
                 BYTE (n) EXTERNAL where n is not 36 or halfword 18
                 BYTE (n) POLISH symbol where n is not 36 or halfword 18
                 EXTERN/INTERN conflicts

         3.  "X" errors:
                 Created symbol exceeds ..7777

         4.  "A" errors:
                 OPDEF produces no code
                 PSECT origin not absolute

         5.  "L" errors:
                 PSECT literal level mismatch
                 Assignment involves a label defined within a literal

         6.  New MCR error messages:
                 MCRLNI -- Literal nesting incorrect at end of PSECT

         7.  Modified MCR error messages:
                 MCRPTC -- Polish too complex for location nnnnnn
                 MCRPTC -- Polish too complex for symbol XXXXXX

         8.  Deleted MCR error messages:
                 MCRPIP -- PRGEND illegal with PSECT


MACRO.DOC -- Changes from MACRO 46(52) to MACRO 53B(1155)        Page 21
EXTERNAL CHANGES


     L.  Polish bugs fixed in the following areas:

         1.  <POINT K,POLISH>

         2.  <POLISH>B<EXP>

         3.  Polish imbedded within a polish expression such as:
                 A##+B##+<C##+D##>
                 <EXT##,,POLISH>
                 <EXT##+1,,0>
                 POLISH(INDEX)
                 OP AC,ADDR(POLISH)
                 OP AC,-<POLISH>
                 OP AC,POLISH(LH,,RH)

         4.  Generate fullword fixups only for externals such as:
                 0,,EXT##

         5.  Simplex forward references to Polish such as:
                 EXP POLISH
                 POLISH=EXT##+K

         6.  Generate Polish when needed when A or B is relocatable  for
             expressions such as:
                 A+B or A-B

         7.  Generate proper polish when referencing relocatables across
             PSECTs




New MACRO CALL argument handling -- MACRO Version 52 and later   Page 22
GENERAL FORMAT


4.0  GENERAL FORMAT

A MACRO Call has the general format:

        (1)##NAME ARG1,ARG2,etc.
                or
        (2)##NAME (ARG1,ARG2,etc.)
where:

NAME    is the name of the MACRO being called

ARG1, ARG2, etc.
          is the argument list.  The arguments in the argument list  are
          separated  by  commas.   The  argument list is terminated by a
          CR-lf or a semicolon in form (1) and close  parenthesis,  ")",
          in form (2)

Example:

                FOO A,B,C       FOO has 3 ARGS: A
                                                B
                                                C

Note:  FOO is assumed to be defined as a MACRO and is used throughout in
the remainder of this write-up.
New MACRO CALL argument handling -- MACRO Version 52 and later   Page 23
SPECIAL CHARACTERS


5.0  SPECIAL CHARACTERS

     I.  THIS  DISCUSSION  APPLIES  TO  FORM  1  ONLY.   The   following
         characters  have special meanings when they appear in the MACRO
         Call line, unless they are  "QUOTED"  by  the  Special  Quoting
         Characters.   This  rule  also  applies  to  quoting characters
         themselves.

                Comma ","       Delimits an argument
                CR-lf           Terminates an argument list
                Semi-colon ";"  Terminates an argument list and
                                starts the comment

         Special Quoting Characters:

                < >     Angle Brackets
                ( )     Parenthesis
                [ ]     Square Brackets
                " "     Quote Marks

         Note:  Single-Quotes are not special quoting characters.

         A.  The Special Quoting Characters do  not  delimit  arguments.
             Their  function  is  merely  to tell the MACRO assembler to
             treat all characters enclosed as regular characters.

         B.  The Special Quoting  Characters  are  always  part  of  the
             argument except for the following exception:
             <   If  an  <  is  encountered  as  the   first   character
                 (including spaces) of the argument list or as the first
                 character after an unquoted Comma < >  are  treated  as
                 quoting  characters,  but they are not included as part
                 of the argument.





    II.  FORM 2

         In form 2, the outermost ( ) are not quoting characters.   They
         are  argument list designators.  If this form is used, the only
         special quoting  characters  are  angle  brackets,  < >.   They
         followed the exception rule described in 1.2.  Handling of Form
         2 has not changed from the previous version of MACRO.  Most  of
         the  examples given in the remaining of this discussion will be
         using Form 1.
New MACRO CALL argument handling -- MACRO Version 52 and later   Page 24
SPECIAL CHARACTERS


   III.  Why the new FORM 1 handling?

         Prior to Version 52, the only quoting characters were < >.   By
         making  < >,  [ ], ( ), and " ", quoting characters, we now can
         write:

                FOO <[MOVE  1,1                 FOO  [MOVE  1,1
                      MOVE#2,2]>        as            MOVE#2,2]
         
                FOO <",">               as      FOO  ","
         
                FOO <A,<Z B>>           as      FOO  A,<Z B>

         This way, we don't need to write the outermost  < >.   A  MACRO
         CALL looks more like an instruction.  However, when we want the
         quoting characters to be treated as  regular  characters,  they
         must be quoted by a pair of different quoting characters.





6.0  OTHER RULES FOR FORM 1

     I.  Nesting
             Only another < > may be nested in a < >.
             Only another [ ] may be nested in a [ ].
             Only another ( ) may be nested in a ( ).
             No nesting with Quote-marks.

    II.  All leading and trailing spaces and tabs for each argument  are
         ignored unless "Quoted".

   III.  An unmatched >, ), ], terminates the argument list.


New MACRO CALL argument handling -- MACRO Version 52 and later   Page 25
EXAMPLES OF USING SPECIAL QUOTING CHRACTERS:


7.0  EXAMPLES OF USING SPECIAL QUOTING CHRACTERS:

     I.  When you want commas, semi-colons, and CR-LF to be  treated  as
         regular characters:

         FOO  <A,B>,C   FOO has 2 args: A,B
                                        C

         The comma quoted by < > is  treated  as  a  regular  character.
         Because  <  is  the first character, the first arg is "A,B" not
         "<A,B>".  < > are not part of arg.

         FOO  C,<A,B>   FOO has 2 args: C
                                        A,B

         < > are not part of 2nd arg, since <  is  the  first  character
         after an unquoted comma.

         FOO  C<A,B>    FOO has 1 arg:  C<A,B>
                        < > are part of the argument.
         
         FOO  <THIS     FOO has 1 arg:  All the characters in
               IS A                     between < and > including
               MULTI-LINE               spaces and CR-LFs.
               TEXT ARGUMENT>   < > are not part of arg.

    II.  When you want a special quoting character to be  treated  as  a
         regular character:

         FOO  <ASCIZ /[ IS      FOO has 1 arg:  All the characters in
                 PART OF                        between < > including
                  THE TEXT/>                    [.
                                < > are not part of arg.
         
         FOO  [MOVE A,1(B)      FOO has 1 arg:  [...]
               JRST XYZ]                ( ) are treated as regular characters.
                                [ ] are part of arg.
         
         FOO  "["               FOO has 1 arg:  "["
                                [ is treated as a regular character.
                                " " ARE PART OF ARG
         
         FOO  <">               FOO has 1 arg:  "
                                " is treated as a regular character.
                                < > are not part of the arg.

New MACRO CALL argument handling -- MACRO Version 52 and later   Page 26
EXAMPLES OF USING SPECIAL QUOTING CHRACTERS:


   III.  Examples with (...)

         FOO (A,B,C)    FOO HAS 3 ARGS: A
                                        B
                                        C

         Form 2 is used here.  ( )  designates  the  ARG  list  and  the
         Commas delimite the arguments.  This case is same as FOO A,B,C

         FOO  A,(B,C)   FOO has 2 args: A
                                        (B,C)
                        ( ) are part of the arg because "("
                            was not the first character.
         
         FOO TABLE-1(AC)        FOO has 1 arg:  TABLE-1(AC)
                        ( ) are part of arg.
         
         FOO (?LENGTH >132)     FOO HAS 1 ARG:  All the characters in
                                                between ( ) including ">".
                                ( ) are not part of the arg.


    IV.  Examples with <...>

         FOO  <A,B,C>   FOO has 1 arg:  A,B,C
                        < > are not part of arg because
                        "<" is the first character.
         
         FOO  A,<B,C>   FOO has 2 args: A
                                        <B,C>
                        < > are part of arg because
                        "<" was not the first character.
         
         FOO <<POINT 7,0>>      FOO has 1 arg:  <POINT 7,0>
                                The outer < >  are not part of arg.


     V.  Examples with [...]

         FOO  [XWD 1,L1         FOO has 1 arg:  [...]-1(AC)
               XWD 2,L2]-1(AC)  [ ],( ) are all part of arg.


    VI.  Examples with "..."

         FOO  "(",0     FOO has 2 args: "("
                                         0
                        " " ARE PART OF ARG
         
         FOO  "THIS     FOO has 1 arg:  All the characters enclosed
               IS A                     by " " including the " "
               MULTI-LINE               themselves.a
               TEXT ARGUMENT"
   d@l