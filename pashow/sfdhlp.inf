*$HELP*

COMMAND                DESCRIPTION
_______                ____________

&                      Indicates end of input from the terminal
ABORT                  Leaves Debugger, returns to XEXEC
BREAK                  Sets breakpoints
CANCEL                 Cancels specified files
CLOSE                  Closes specified files
COMPILE                Compiles specified files
CONTINUE               Resumes execution of user's program
CREATE                 Returns to Editor; creates new file
DEBUG                  Sets context of debugging
DISPLAY                Prints values of specified variables
DO                     Starts execution of a command file
ECHO                   Starts echoing of commands
EXPLAIN                Explains a command
GET                    Returns to Editor; gets an existing file
GO                     Starts execution of user's program
HELP                   Prints this list
HUSH                   Inhibits printing of unrequested terminal output
INITIALIZE             Loads and initializes specified files
LIST                   Lists break or trace points, debugging context,
                       or version
MODE                   Sets mode of variable display
NEXT                   Executes specified number of lines
PRODUCTION RUN,
    INITIALIZE,        RUNS, INITIALIZES, or COMPILES specified files
 OR COMPILE            without debugging infromation
QUIT                   Returns to XEXEC
RUN                    Runs specified files
SET                    Sets values of variables
STEP                   Executes specified number of lines
TERMINAL               Gets a command from the terminal
TOUT                   Specifies a terminal output destination
TRACE                  Sets program trace points
TYPE                   Types a message at the terminal from a command file
VALUE BREAK            Sets value breakpoints
NO BREAK
NO ECHO
NO HUSH
NO TRACE
NO VALUE BREAK
NO VALUE TRACE         Cancels effect of associated command

*&*
The ampersand typed alone on a line denotes end of input from the 
terminal. It is used when a command file executes the
statement DO TERMINAL. After the ampersand is typed, control returns
to the command file.
*?*
'?' typed after NO, LIST, PRODUCTION, VALUE, or MODE gives a
list of options. Typed by itself, prints a list of commands with brief
descriptions.
*ABORT*
ABORT returns the user to XEXEC after closing all files.
*BREAK*
BREAK is used to set breakpoints; i.e., a
statement to stop at before executing. When such a statement is
reached, SUPER FORTRAN prints the name of the running subprogram
and the line number of the breakpoint. The line numbers typed 
in this command will refer to those in this subprogram unless the
DEBUG command has been used. If optional variables are specified,
then their values will be DISPLAYed at the breakpoint. The optional
@integer specifies how often the reaching of the breakpoint is reported.
*CONTINUE*
CONTINUE resumes execution of the program.
*DEBUG*
Since line numbers and names of variables may be the same in different
subprograms, the DEBUG command is used to specify the subprogram which
contains the variables or line numbers the user wants to refer to.
Normally, the subprogram in which execution stopped determines the 
context. If no line number or routine name is specified, the context is 
set to the MAIN program.
*DISPLAY*
DISPLAY prints the values of the specified variables.
Only variables known in the current DEBUG context, determined
by the point at which execution halts or the DEBUG command,
may be DISPLAY-ed.  The values are displayed in their
declared mode unless a MODE command has been given.
Arrays may be subscripted by constants or variables.
*DO*
Commands are taken from the specified file until its end, unless an
error is encountered. If the file name has no extension, SUPER FORTRAN
looks first for a file with extension .CMD, then for a file with no 
extension. The ECHO command provides a trace of all commands executed
from the command file. If the TERMINAL is specified as the command file,
a single ampersand denotes end of input from the terminal.
*ECHO*
The ECHO command provides a trace of commands executed from a command
file. If there is a TOUT file, then commands typed at the terminal
will also 'echo' to that file, as will commmands taken from a command
file. Type NO ECHO to shut off echoing.
*EXPLAIN*
EXPLAIN explains how to use the specified command.
*GET*
This command always returns to the SUPER FORTRAN Editor, and enters
the contents of the specified file into the working area of the Editor.
If no file is given, the last file that occupied the working area will
still be available for modification. If the user was not previously
in the Editor, an error results.
*GO*
This command starts execution at the specified line number. If
no line number is given, execution starts at the first statement in
the MAIN program. In this case, all user files are closed.
*HELP*
This command prints a list of commands and a brief description of
each.
*HUSH*
HUSH inhibits unrequested printing, such as the '*'. To turn off HUSH,
type NO HUSH.
*INITIALIZE*
INITIALIZE compiles each file in the file list, if necessary, and loads
the files. If no files are specified, and if the user was previously 
in the SUPER FORTRAN Editor, then the files last RUN, INITIALIZed, or
COMPILed are chosen.
*INSTRUCTIONS*
INSTRUCTIONS gives directions on how to use the SUPER FORTRAN 
processing commands.
*LIST* *LIST ?*
This command lists the requested infromation. Type 
'EXPLAIN LIST <option>' for more  specific information.
*MODE* *MODE ?*
This command determines the mode of display for the specified 
variables: as character strings (ASCII), octal digits (OCTAL), or
whatever type the variables were declared as (DECLARED). Each time
the variables are DISPLAYed, they will print in the assigned format.
*NEXT*
NEXT continues execution, and executes 'integer' number of lines. If
no integer is specified, one line is executed.
*PRODUCTION* *PRODUCTION ?*
Specifies a non-development COMPILE, INITIALIZE, or RUN.
*QUIT*
Returns the user to XEXEC after closing all files.
*RUN* *RU*
Compiles each file in the file list, if necessary, and
loads and runs the files. See INITIALIZE.
*STEP*
Same as NEXT except that the line number of each command executed
is printed.
*TRACE*
Same as BREAK, except execution does not stop at the tracepoints.
*VALUE* *VALUE ?*
Sets value breaks or traces. Whenever the value of the specified
variable changes, a break or a trace automatically occurs. The variable
is only checked upon at the specified lines, or at all lines in
the currently executing subprogram if no lines are specified.
If 'ALL' is specified for the line list, then all lines in all 
subprograms will be checked for changes in the values of the specified
variables.
*CANCEL*
This command closes the specified files, discarding the new copy
of any file open for output and restoring the old file as it was 
before it was OPENed. If no file numbers are specified, all open file 
numbers from 2 to 60 are CANCELed.
*CLOSE*
Closes the specified files, or all open files if no file numbers
are specified.
*COMPILE*
Compiles each file in the file list, if necessary.
*CREATE*
This command always returns to the SUPER FORTRAN Editor, and gets
a new working area (as long as the file does not already exist). If the
user was not previously in the Editor, an error results.
*NO* *NO ?*
Negates the effect of the associated command.
*SET*
Changes the value(s) of the specified variable(s) to the specified
value(s).
*TERMINAL*
This command is used only in command files. It instructs SUPER FORTRAN
to get the next command from the terminal, then to return to the
command file. It is usually used in conjunction with the TYPE command.
*TOUT*
Instructs SUPER FORTRAN to print all information to the specified file,
instead of to the terminal. If TERMINAL is specified as the file, normal
printing is resumed.
*TYPE*
This command is used only in command files. It prints a message at
the terminal, and to the TOUT file if there is one. Single or double
quotes may be used, and two consecutive quotes of the delimiting
type produce one quote in the resulting message.
*NO BREAK*
Cancels effect of BREAK for the specified lines.
*NO ECHO*
Cancels the effect of ECHO.
*NO HUSH*
Cancels the effect of HUSH.
*NO TRACE*
Cancels the effect of TRACE for the specified lines.
*NO VALUE*
Cancels the effect of VALUE BREAK or VALUE TRACE for the specified
variables.
*LIST BREAK*
Lists the line numbers of all breakpoints set on lines in the line list.
If the line list is omitted, the line numbers of all breakpoints are
printed.
*LIST DEBUG*
This command lists the current context for variable names and
line numbers as well as the name of the subprogram in which execution
last stopped.
*LIST TRACE*
Lists the line numbers of all tracepoints set on lines in the line
 list. If the line list is omitted, the line numbers of all tracepoints
are printed.
*LIST VALUE*
Prints those variables in the variable list which have value breaks 
or traces on them. If the variable list is omitted, all such variables
are printed.
*LIST VERSION*
Lists the version of SUPER FORTRAN.
*PRODUCTION COMPILE*
COMPILEs specified files for non-development.
*PRODUCTION INITIALIZE*
INITIALIZEs specified files for non-development.
*PRODUCTION RUN*
RUNs specified files for non-development.
*VALUE TRACE*
Instructs SUPER FORTRAN to inform the user of where and to what value
a variable is being changed. The variables in the variable list are
displayed only when their value changes. Type 'EXPLAIN VALUE' for more
information.
*VALUE BREAK*
Instructs SUPER FORTRAN to stop execution and inform the user of where
and to what value a variable is being changed. The variables in the
variable list are displayed only when their value changes. Type
'EXPLAIN VALUE' for more information.
*MODE ASCII*
This command causes the specified variables, from now on, to be
DISPLAYed in ASCII mode. This means that each physical word of the 
variable will be interpreted as containing five ASCII characters, seven 
bits per, left justified in each word.
*MODE DECLARED*
This command causes the specified variables, from now on, to be
DISPLAYed in the mode in which they were declared, thus cancelling
the effect of a previous MODE command.
*MODE OCTAL*
This command causes the specified variables, from now on, to be
DISPLAYed in OCTAL mode. This means that each physical word of the 
variable will be interpreted as containing twelve octal digits, three 
bits per.
  