module vue(timer=external(six12),stack=own(stack,2000),ccl) = begin

!Copyright 1979 by Michael L. Kazar

macro iudent=(owns)$;
macro spacect=(owns+1)$;
macro tabwidth=(owns+2)$;
macro indend=(owns+3)$;
macro commentpos=(owns+4)$;

bind twenex=0;
bind extra = 100;

structure based[i] = (@.based+.i)<0,36>;
structure odas[i] = .odas + .i; !based at zero array
structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;
structure strs[i,j]=
    ( .strs + ((.j-1)/5) + ((.i-1)*27) ) <36-((((.j-1) mod 5)+1)*7),7>;

local qbp;

external fef,fen,ttyini,clulin,cluhack,cclstuff,cclmultix,writestring,gettty;
!front end command stuff and ccl linkage.
external mark,screen,physline,physpos,updatecursor,filblk,time,date,ttyzap;
external scrmod,muline,ocline,flubfr,csnum,qreg,newcount,allmod,curbuf;
external moveforward,moveback,quit,metar,metaq,clearline,defdsk,bufini;
external metalb,metarb,metaz,ctrlz,metaquest,ToPrompt,physlin;
external hitsts,gppn,bfblk2,getstr,winit,fini,therep,relcore;
external xeflag,owns,hatuvl,modpos,exini,silent,freestk,freezone,errstr;
external sosmod;


bind kilsiz=5000;
own kilbuf[kilsiz],killen,laskil,lasmov,kilptr,pcolumn;

global XPrefix="?X";
global MetaPrefix=#033;
global EscValue=#033;
global bind maxcalls=100;
global rstk[MaxCalls*2+2],callchar;
global cstk[MaxCalls+1];

map odas cstk;
map strs screen;
map odas rstk;

external fixfil,ppn,cucl,writeloss,comchar,repcount,maxss,setint,flush;
external reset,coresize,lowend,hend,hbot,clearscreen,p,curline,base;
external physpos,goxy,scrsze,readch,filescan,dorescan,setlab,discat;
external buffers,dskbuf,dskbfh,open,lookop,enter,munchi,muncho,close;
external autoloss,metaj,distbl,initdispatch,combuf;

external repcount,comchar;
external redisp,ttyidle,ctrll,getchxr;

forward ctrla,ctrlb,ctrld,ctrle,ctrlf,ctrlg,ctrlk,ctrln,ctrln2;
forward ctrlo,ctrlp,ctrlp2,ctrlq,rubout,ctrlxm,ctrlxr;
forward insertchar,commonwrite,ctrlxs,wbreak,ctrlxx,delforward;
forward metacn,metacp,metaw,metab,munchnnl;

global rptr,vecadr,autoinc,autotime,autowrit,cclflag;

global routine echord = begin local tp;
	tp_readch(flubfr()); ! read a character
	if .tp eql #177 or .tp eql #010 or .tp eql #007 then begin
		flush_1; !mark it as a loss.
		writestring(plit asciz 'Aborted')
		end;
	writeloss(.tp); ! print it out.
	return .tp;
	end;

global routine metalt = begin
    moveback (.lowend-1);
    muline_1;
    scrmod_1;
    if .curline lss 1 then curline_1;
end;


global routine metagt = begin
	muline_1;
	scrmod_1;	!force a redisplay.
	moveforward (.hend-.hbot);
	if .curline gtr .scrsze then curline_.scrsze/2+1
	end;

global routine metap = begin
	if .csnum eql 0 then return;   !already popped to top.
	freezone_.freestk[.csnum];     !restore this value
	csnum_.csnum-1; !return from qregister.
	rptr_.rptr-2;
	repcount_.rstk[.rptr+1];
	callchar_.rstk[.rptr];
	base_#400;		! C-X
	comchar_"E";		!  E
	newcount_0;
	end;

global routine zapmac = begin
	if .csnum eql 0 then return; !already popped to top.
	csnum_.csnum-1; !return from qregister.
	rptr_.rptr-2;
	repcount_1;
	callchar_.rstk[.rptr];
	base_#400;		! C-X
	comchar_"E";		!  E
	newcount_0;
	end;
global routine metac = begin
	if .csnum geq MaxCalls then begin
	    errstr(plit asciz'Macro Depth Overflow');
	    return ctrlg();
	end;
	if .newcount then callchar_readch(flubfr());
	if .callchar geq "A" and .callchar leq "Z"	  ![CB] Capitals now
			    then  callchar_.callchar+("a"-"A"); ! work also ...
	if .callchar lss "a" or .callchar gtr "z" then return
	    errstr(plit asciz'Illegal Macro Slot.');
	newcount_0;
	csnum_.csnum+1;
	rstk[.rptr]_.callchar;
	rstk[.rptr+1]_.repcount;
	rptr_.rptr+2;
	repcount_1;
	cstk[.csnum]_qreg(.callchar); !start at the right q-register.
	freestk[.csnum]_.freezone;
end;
global routine ctrlu = begin
	local tp,count,flag;
	flag_0;
	count_.hatuvl;
	while 1 do begin
		tp_readch(flubfr()); !read a character.
		if .tp eql "?U" then begin
			count_.count*.hatuvl;
			end
		else if .tp lss "0" or .tp gtr "9" then begin
			repcount_.count+1; !readers rep ct.
			comchar_.tp; !readers command.
			if .comchar eql .MetaPrefix then base_#200
			else if .comchar eql .XPrefix then base_#400
			else base_0;
			if .base neq 0 then comchar_readch(flubfr());
			newcount_1;
			return; !back to the shadows again!
			end !hack to blast reader away from ^u.
		else begin
			if .flag eql 0 then (flag_1;count_0);
			count_.count*10+.tp-48;
			end;
		end;
	end;

routine finishbuffer =
if .allmod[.curbuf] eql 0 then
    ToPrompt(plit asciz 'No changes made.')
else begin
    combuf(1);
    close (2);
    ToPrompt(plit asciz 'Writing buffer...');
    return commonwrite();
end;

global routine ctrlxs = finishbuffer();

routine exitbuffer = begin
    If not finishbuffer() then return Writestring(plit asciz 'Error!');
    ToPrompt(plit asciz'');
    ttyzap();
    fen();
    if .cclflag neq 0 then cclmultix()
	    else if .xeflag then cucl() else quit();
end;

global routine ctrlxe = begin
    xeflag_1;
    exitbuffer();
end;

global routine ctrlxf = begin
    xeflag_0;
    exitbuffer();
end;

global routine ctrlxr = begin local glbuffer [100];
	local tp;
	muline_1;
	scrmod_1;
	hitsts_1;
	flush_0;
	ToPrompt(plit asciz'Read File: ');
	(filblk+4)_0; !default to our ppn.
	filblk_.defdsk;
	tp_(glbuffer-1)<1,7>;
	getstr(.tp);
	if not (filescan (tp,filblk)) then return
	    errstr(plit asciz'Illegal File Name');
	if .flush then return ctrlg();
	hbot_.hend; !get rid of text.
	lowend_1;
	ppn_.(filblk+4);
	open (2,0,.filblk,dskbfh<0,0>);
	buffers (2,1,1,dskbuf); !get a disk buffer formatted.
	if lookop() then munchi ((.p+extra/5)<1,7>)
	else ToPrompt(plit asciz'File not found.');
	allmod[.curbuf]_0;	       !not modified.
	close (2);
	hend_.lowend+5+extra;
	hbot_6+extra;
	lowend_1;
	relcore();
	end;

global routine ctrlxw = begin local glbuffer [100];
	local tp;
	flush_0;
	hitsts_1;
	filblk_.defdsk;
	(filblk+4)_0; !default to regular ppn.
	ToPrompt(plit asciz 'Write File: ');
	tp_(glbuffer-1)<1,7>;
	getstr(.tp);
	if not (filescan (tp,filblk)) then return ctrlg();
	if .flush then return ctrlg();
	ppn_.(filblk+4);
	commonwrite();
	end;

routine commonwrite = begin
	local tp;
	tp_0;
	tp<18,18>_dskbfh;
	flubfr();
	fixfil();	!renames bak files around. uses channel three.
	(filblk+4)_.ppn;	!use last ppn.
	open (2,0,.filblk,.tp);
	buffers (2,1,0,dskbuf);
	if not enter (2,(filblk+1)<0,0>) then begin
		ToPrompt(plit asciz'Enter failed, probably quota exhausted.');
		close(2);
		return 0;
		end;
	if not muncho (.lowend-1,(.p-1)<1,7>) then begin
	    ToPrompt(plit asciz'Write failed, cannot begin save.');
	    close(2);
	    return 0;
	end;
	if not muncho (.hend-.hbot, (.p+(.hbot-2)/5)
	  <29-7*(.hbot-2-5*((.hbot-2)/5)),7>) then begin
	    ToPrompt(plit asciz'Write failed, cannot complete save.');
	    close(2);
	    return 0;
	end;
	writestring(plit asciz'Write completed.');
	close (2);
	allmod[.curbuf]_0;
	return 1
	end; !routine

!global routine therep (line,off) = begin
!	! takes a ptr to a line and tells if at the right place for s&r
!	register char;
!
!	incr i from 0 to (..line)-1 do begin
!		char_getchxr(.i+.off);
!		if .char geq "a"  and .char leq "z" then
!			char_.char and #737;
!		if .(.line+.i+1) neq .char then return 0;
!		end;
!
!	return 1; !winnage
!	end; !whole therep routine.
global routine munchline(line,prompt,terminator) = begin
    local retval;
    ToPrompt(plit asciz'');
    retval_munchnnl(.line,.prompt,.terminator);
    WriteLoss("$");
    flubfr();
    return .retval;
end;
global routine munchnnl (line,prompt,terminator) = begin
	local tc,i;
	writestring(.prompt);
	i_1;
	while .i lss 132 do begin
		tc_readch(flubfr()); ! read a character.
		if .tc eql #177 or .tc eql #010 then begin
			if .i leq 1 then exitcompound[2];
			i_.i-1;
			goxy(.physpos-1,.physlin);
			if .(.line+.i) leq "?Z" then
			    goxy(.physpos-1,.physlin);
			clearline();
			.line_.i-1;
			exitcompound[2];
			end;
		if .tc eql .terminator then begin
			flubfr();
			return 1
			end;
			! if we are done.
		if .tc eql 7 then return 0; !lossage
		if .tc eql "?Q" then begin
			(.line+.i)_readch(flubfr());	!set the char.
			writeloss(.(.line+.i));
			.line_.i;
			i_.i+1
			end
		else if .tc neq 10 then begin
			writeloss(.tc);
			(.line+.i)_.tc; ! set the char.
			.line_.i;
			i_.i+1
			end;
		end; ! the inner loop.
	end; ! the routine.


global routine setchar (i,q) = begin
	local iabs,irel,tp;

	if .i lss .lowend then iabs_.i
		else iabs_.i+.hbot-.lowend;

	irel_(.iabs-5*((.iabs-1)/5))*7;
	irel_36-.irel;
	tp_.p+(.iabs-1)/5;
	(.tp<0,36>)<.irel,7>_.q; ! set the byte.
	end; !gloroutine

!global routine getchxr(i) = begin
!	external p,hend,lowend,hbot;
!	local iabs,irel,tp;
!
!	if .i lss 1 or .i geq (.lowend+.hend-.hbot) then return #015;
!
!	if .i lss .lowend then iabs_.i
!		else iabs_.i+.hbot-.lowend;
!	irel_(.iabs-5*((.iabs-1)/5))*7;
!	irel_36-.irel;
!	tp_.p+(.iabs-1)/5; !the value of the new ptr.
!	return .(.tp<0,36>)<.irel,7> ! return the byte.
!	end; !gloroutine

global routine getc (p,i) = begin
	local irel,tp;
	irel_(.i-5*((.i-1)/5))*7;
	irel_36-.irel;
	tp_.p+(.i-1)/5;
	return .(.tp<0,36>)<.irel,7> !return the byte
	end;

global routine setc(p,i,c) = begin
	local tp,irel;
	irel_(.i-5*((.i-1)/5))*7;
	irel_36-.irel;
	tp_.p+(.i-1)/5;
	(.tp<0,36>)<.irel,7>_.c
	end;

global routine ctrlw = begin
	local n,tp;
	if .mark eql 0 then return errstr(plit asciz'Mark not set.');
	if .lowend gtr .mark then ctrlxx(); !mark must be after lowend
	if not(.laskil) then (killen_0;kilptr_(kilbuf-1)<1,7>);
	n_.mark-.lowend; !how much to kill.
	if .n gtr 5*kilsiz then begin
		ToPrompt(plit asciz
'Killbuffer Overflow.  Text too large.  Delete text??');
		tp_readch(flubfr());
		if .tp eql " " or .tp eql "y" or .tp eql "Y" then
			exitcompound
		else return;
	end;

	while 1 do begin
		if .n eql 0 then exitloop;
		if .hbot eql .hend then exitloop; ! bad mark
		if .killen lss 5*kilsiz then
			replacei(kilptr,getchxr(.lowend));
		delforward();
		n_.n-1; !we just killed a character.
		killen_.killen+1;
		end;
	if .killen gtr 5*kilsiz then (killen_5*kilsiz);
	mark _ 0
	end;

global routine metcw = begin
	local n;
	if .mark eql 0 then return errstr(plit asciz'Mark not set.');
	if .lowend gtr .mark then ctrlxx(); !mark must be after lowend
	if not(.laskil) then (killen_0;kilptr_(kilbuf-1)<1,7>);
	n_.mark-.lowend; !how much to kill.
	if (.n+.killen) gtr 5*kilsiz then begin
		ToPrompt(plit asciz
		    'Killbuffer Overflow. Cannot copy text.');
		flubfr();
		return
	end;

	while 1 do begin
		if .n eql 0 then exitloop;
		if .hbot eql .hend then exitloop; ! bad mark
		replacei(kilptr,getchxr(.lowend));
		moveforward(1);
		n_.n-1; !we just killed a character.
		killen_.killen+1;
		end;
	ToPrompt(plit asciz 'Copy complete.');
	flubfr();
	mark _ 0
	end;

global routine ctrly = begin
    local tp;
    tp_(kilbuf-1)<1,7>;
    incr i from 1 to .killen do
	insertchar(scani(tp));
end;
global routine delforward  = begin local cc;
	cc_getchxr(.lowend);
	if .cc eql #15 or (.cc eql "?L" and .sosmod) then begin
		muline_1; !multiple lines.
		end;
	hbot_.hbot+1;
	allmod[.curbuf]_1;
	scrmod_1; !modifies screen
	end;

global routine delbackward  = begin;
	moveback(1);
	delforward();
	end;

global routine insertchar(i) =  begin;
	if (.hbot-.lowend) lss 25 then begin
		register bufr;
		map based bufr;
		coresize(512); ! get more core
		bufr_.p;
		if .hend gtr .hbot then!shift down
		    decr i from (.hend/5)+1 to (.hbot/5)-1 do
			bufr[.i+512] _ .bufr[.i];
		hend_.hend+2560;
		hbot_.hbot+2560
		end;
	allmod[.curbuf]_1;
	scrmod_1;
	lowend_.lowend+1;
	setchar(.lowend-1,.i);
	if (.i eql "?L" and .sosmod) or .i eql #015 then
		(curline_.curline+1;muline_1);
	end; ! gloroutine

global routine ctrlv = begin
    muline_1;
    scrmod_1;
    incr i from 1 to
	(if .curline leq .scrsze and .curline geq 1
		    then .scrsze-.curline
		    else .scrsze)
	    do if ctrln2() then exitloop;
    if .hend neq .hbot then curline_1; !if not at the end of the file.
    end;
global routine metav = begin
    muline_1;
    scrmod_1;
    incr i from 1 to
	    (if .curline leq .scrsze and .curline geq 1
			    then .scrsze+.curline-2
			    else .scrsze)
	    do if ctrlp2() then
		if .curline leq 0 then begin   !properly past top of screen.
		    ctrln2();	       !show predecessor.
		    exitloop;
		end;
    curline_1;
end;
global routine ctrlt = begin
	local tc;
	if .lowend lss 3 then return (ctrlg()); !crapout if not two chars.
	tc_getchxr(.lowend-1);
	allmod[.curbuf]_1;	       !mark it as munged.
	setchar(.lowend-1,getchxr(.lowend-2));
	setchar(.lowend-2,.tc);
	if getchxr(.lowend-1) eql"?M" or getchxr(.lowend-2) eql "?M" then
	    begin
		muline_1; !in case of moving a cr.
		scrmod_1; !for sure!
	    end;
	end;

global routine ctrls = begin
	local i,char;
	external sst;
	if not munchline (sst,plit asciz'Search: ',.EscValue) then return
	    (errstr(plit asciz'Search aborted.');-1);

	incr i from 0 to (.sst)-1 do begin
		char_.(sst+.i+1);
		if .char geq "a" and .char leq "z" then
			(sst+.i+1)_.char and #737;
		end;

	incr i from .lowend to .lowend+.hend-.hbot-.sst+1 do
		if therep (sst,.i) then begin
			moveforward(.i+.sst[0]-.lowend);
			if .repcount eql 1 then return 0;
			repcount_.repcount-1;
			end;
	return (errstr(plit asciz'Search failed');-1);
	end;

global routine  ctrlat = begin
	if .repcount eql 1 then begin			! default = 1
		mark_.lowend;				!   means set mark
		ToPrompt(plit asciz 'Mark set')
		end
	else begin					! else any arg
		mark_0;					!   means to clear it
		ToPrompt(plit asciz 'Mark cleared')
		end;
	flubfr();
        repcount_1
	end;

global routine horizspace (tc) =
	if .tc eql " " then return 1
	else if .tc eql #11 then return 1
	else return 0;

global routine whitespace(tc) =
	if .tc eql " " then return 1
	else if .tc eql #11 then return 1	!a tab
	else if .tc eql "?M" then return 1	!a cr.
	else return 0;

global routine metadel = begin local tc,td;
	tc_.lowend;
	metab();
	td_.lowend;
	moveforward(.tc-.td);
	incr i from .td to .tc-1 do delbackward();
	end;

global routine metab = begin
	ctrlb();
	while .lowend gtr 1 and whitespace(getchxr(.lowend)) do ctrlb();
	while 1 do begin
		if .lowend eql 1 then return zapmac();
		if wbreak (getchxr(.lowend-1)) then return;
		ctrlb();
		end;
	end;

global routine metaf = begin
	while .hend neq .hbot and whitespace(getchxr(.lowend)) do ctrlf();
	while 1 do begin
		ctrlf();
		if .hbot eql .hend then return zapmac();
		if wbreak(getchxr(.lowend)) then exitloop;
		end;
	end;

global routine metad =  begin
	while .hend neq .hbot and whitespace(getchxr(.lowend)) do ctrld();
	while 1 do begin
		ctrld();
		if .hbot eql .hend then return zapmac();
		if wbreak (getchxr(.lowend)) then exitloop;
		end;
	end;

global routine wbreak (foo) =
	if .foo geq #141 and .foo leq #172 then 0
	else if .foo geq #101 and .foo leq #132 then 0
	else if .foo geq #060 and .foo leq #071 then 0
	else 1;

global routine ctrlxx = begin
	local tmark;
	if .mark eql 0 then mark_1;	!if undefined it is 1.
	tmark_.lowend;
	if .mark gtr .lowend+.hend-.hbot then return metagt(); !bad mark
	if .mark lss .lowend then moveback (.lowend-.mark);
	if .mark gtr .lowend then moveforward (.mark-.lowend);
	return (mark_.tmark)
	end;

global routine ctrlr = begin
	local i,char;
	external sst;
	if not munchline (sst,plit asciz'Reverse Search: ',.EscValue) then
		return (errstr(plit asciz'Reverse Search aborted.');-1);

	incr i from 0 to (.sst)-1 do begin
		char_.(sst+.i+1);
		if .char geq "a" and .char leq "z" then
			(sst+.i+1)_.char and #737;
		end;

	decr i from .lowend-.sst[0] to 1 do
		if therep(sst,.i) then begin
			moveback(.lowend-.i);
			if .repcount eql 1 then return 0;
			repcount_.repcount-1;
			end;
	return (errstr(plit asciz'Reverse Search Failed');-1);
	end;

global routine dispatch = begin
    local tp,ip;
    bind zone1=#2000;
    while .repcount gtr 0 do begin		! Check > 0, else -big loop!
	vecadr_.comchar+.base;			! vecadr _ command-key
	tp_.distbl[.vecadr];			! tp _ command-dispatch
	ip_.tp;					! ip _ copy of tp
	do begin
	    if (.ip lss 0) and (.ip gtr -zone1)
	    then begin				! if command-rebound then
		tp_.discat[-.ip];		! command _ rebinding
		ip_.discat[-.ip+1];		! pointer _ next?
	    end
	    else ip_0;				! else pointer _ nil

	    if .tp eql 1 then insertchar(.comchar)
	    else if .tp eql 0 then 0
	    else if .tp leq -zone1 then begin   ! if bound to a macro
		if .csnum geq MaxCalls then begin
		    errstr(plit asciz'Macro Depth Overflow');
		    repcount_1;
		    return;
		end;
		callchar_(-.tp-zone1+"a")<0,0>;		! which macro char?
		csnum_.csnum+1;				! increment level
		rstk[.rptr]_(.callchar)<0,0>;
		rstk[.rptr+1]_.repcount;
		rptr_.rptr+2;				! bump pointer
		cstk[.csnum]_qreg(.callchar);		! set macro address
		freestk[.csnum]_.freezone;
		repcount_1;				! once per call
	    end
	    else (.tp)();				! else do command
	end
	until .ip eql 0;				! throughout rebinds
	if .vecadr neq "?U" then
	    if .vecadr eql "?W" or .vecadr eql "?K"	! if was a kill
	    then laskil_1				!  then mark it
	    else laskil_0;				!  else clear it

	if .vecadr eql "?N" or .vecadr eql "?P"		! if move up/down
	then lasmov_1					!  then mark move
	else lasmov_0;					!  else clear move

	repcount_.repcount-1;				! repeat for count
    end
end;

global routine reader = begin local igct,wonp;
setlab();
setint();
igct_0;
repcount_1;
while 1 do begin
	if .cstk[.csnum] eql 0 and ttyidle() then begin
		autoloss();	!call autosave code.
		wonp_if .igct geq 10 then redisp(0)
		    else redisp(1);
		if .wonp then begin	!newscreen if idle user
			igct_0;	       !no ignored commands.
			scrmod_0; !screen not modified.
			cluhack_0;!clear direction bi		muline_0; !only one line hacked.
!			hitsts_0; !true if changed the status line.
			end;
		ocline_.curline; !remember line we are on.
		end;
	comchar_readch(flubfr());
	igct_.igct+1;		       !count of undisplayed commands.
	if .comchar eql .MetaPrefix then base_#200
		else if .comchar eql .XPrefix then base_#400
			else base_0;
	if .base neq 0 then comchar_readch();   !if $ or ^x, get real command
	newcount_1;
	dispatch();   !execute the command
	repcount_1;
	end;
end; !routine begin

global routine ctrlxm = begin
    local tp,lasttp,qbp;
    ToPrompt(plit asciz'Macro Slot: ');
    tp_readch(flubfr()); !get the macro character slot.
    writeloss(.tp);
    if .tp geq "A" and .tp leq "Z" then tp_.tp+("a"-"A");![CB] *Capitals*
    if .tp lss "a" or .tp gtr "z" then return
    errstr(plit asciz'Illegal Slot Name.');
    writestring(plit asciz' def: ');
    qbp_qreg(.tp);
    lasttp_0;
    while 1 do begin
	tp_readch(flubfr()); ! get a char.
	replacei (qbp,.tp);
	writeloss(.tp);
	if .lasttp eql .XPrefix and .tp eql ")" then return;
	lasttp_.tp;
    end;
end;

global routine metaw = begin
	local tp,oct;
	external sst;
	oct_.repcount;
	repcount_1;
	ctrlat();
	if .oct eql 4 then begin
		tp_ctrlr()
		end
	else begin
	    tp_ctrls();
	    if .tp neq -1 then moveback(.sst[0]) !go past search str.
	end;
	if .tp eql -1 then return errstr(plit asciz'Wipe string not found.');
	ctrlw();
	end;

global routine ctrla  = while 1 do begin local cc;
	cc_getchxr(.lowend-1);
	if .cc eql #015 or .lowend eql 1 or
	    (.cc eql #014 and .sosmod) then return;
	moveback(1)
	end; !ctrla

global routine ctrlb  =  if .lowend neq 1 then moveback(1)
	else return zapmac();

global routine ctrld = if .hbot neq .hend then delforward()
	else return zapmac();

global routine ctrle = while 1 do begin local cc;
	cc_getchxr(.lowend);
	if .cc eql #015 or .hend eql .hbot or (.sosmod and .cc eql #014)
	    then return;
	moveforward(1);
	end;

global routine ctrlf  = if .hend neq .hbot then moveforward(1)
	else return zapmac();

global routine ctrlg = begin
	rptr_0;
	silent_0;
	hitsts_1;
	repcount_1; !pull out of lossage loops.
	csnum_0; !back to the tty for input mode.
	ToPrompt(plit asciz'Error');
	return -1
end;
global routine ctrlk  = begin local cc;
	if not(.laskil) then (killen_0;kilptr_(kilbuf-1)<1,7>);
	if .hend eql .hbot then return zapmac();
	cc_getchxr(.lowend);
	if .cc eql #015 then begin
		if .killen lss 5*kilsiz then replacei(kilptr,#15);
		killen_.killen+1;
		delforward();
		end
	else while 1 do begin;
		if .hend eql .hbot then return zapmac();
		cc_getchxr(.lowend);
		if .cc eql #015 or (.cc eql #014 and .sosmod) then exitloop;
		if .killen lss 5*kilsiz then
			replacei(kilptr,getchxr(.lowend));
		killen_.killen+1;
		delforward();
		end; ! loop
	if .killen gtr 5*kilsiz then (killen_5000;ctrlg())
	end; !ctrl k
routine GetPos (npcol) = begin
    local place,temp;
    !This routine tells you what column you will be in, when the
    ! redisplay will finally calm down.

    place_.lowend;
    while 1 do begin		       !decrement from lowend-1 down.
	if .place eql 1 then exitloop; !we have found start of line.
	temp_getchxr(.place-1);
	if .temp eql "?M" or (.temp eql "?L" and .sosmod) then exitloop;
	place_.place-1;
    end;

    ! Now move forward.
    .npcol_1;
    incr i from .place to .lowend-1 do begin !all the stuff to where we are
	temp_getchxr(.i);	       !get the data.
	.npcol_updatecursor(.temp,..npcol);
    end;
end;
global routine ctrln = begin
	local pos;
	if not .lasmov then GetPos(pcolumn);
	incr i from 1 to .repcount do ctrln2();
	pos_1;
	incr i from 1 to .pcolumn-1 do
		if  .pos geq .pcolumn or getchxr(.lowend) eql "?M"
		    or (getchxr(.lowend) eql "?L" and .sosmod)
			then exitloop
			else begin
				pos _ updatecursor(getchxr(.lowend),.pos);
				ctrlf()
			     end;
	repcount _ 1
	end;

global routine ctrln2  = while 1 do begin;
	if .hend eql .hbot then return zapmac();
	moveforward(1);
	if getchxr(.lowend-1) eql #015 then return 0;
	if .sosmod then if getchxr(.lowend-1) eql #014 then return 1;
	end;

global routine ctrlo  = begin;
	insertchar(#015);
	moveback(1);
	end;

global routine ctrlp = begin
	local pos;
	if not .lasmov then GetPos(pcolumn);
	incr i from 1 to .repcount do ctrlp2();
	pos_1;
	incr i from 1 to .pcolumn-1 do
		if .pos geq .pcolumn or getchxr(.lowend) eql "?M"
		    or (getchxr(.lowend) eql "?L" and .sosmod)
			then exitloop
			else begin
				pos _ updatecursor(getchxr(.lowend),.pos);
				ctrlf()
			     end;
	repcount _ 1
	end;

global routine ctrlp2  = while 1 do begin;
	if .lowend eql 1 then return zapmac();
	moveback(1);
	if getchxr(.lowend) eql #015 then return(ctrla();0);
	if .sosmod then if getchxr(.lowend) eql #014 then return(ctrla();1);
	end;

global routine ctrlq  = insertchar(readch(flubfr()));

global routine rubout = begin;
	if .lowend eql 1 then return zapmac();
	delbackward();
	end;

global routine metacn = begin
    incr i from 1 to .scrsze-.curline do if ctrln2() then begin
	ctrlp2();		       !back over the page mark.
	exitloop;
    end;
    ctrle();
end;

global routine metacp = begin
    incr i from 1 to .curline-1 do ctrlp2();
    ctrla();
end;


! main startup code for the Vue code.
! is here

cclflag_.vreg;
repcount_1; !for the ctrll() call in the dorescan to work.
reset();
setint();
killen_0;
kilptr_(kilbuf-1)<1,7>;
p_coresize(512);
lowend_1;
hbot_2500-extra;
hend_2500-extra;
rptr_0;
bufini();
(bfblk2+4)_gppn();
fef();	!turn off the front end.	![CB] Move to here ...
if not twenex then begin
    if .cclflag eql 0 then dorescan() !get line perhaps. does actrlxr
	else cclstuff();
end;
if gettty() then begin			![CB] User must type terminal type
    incr i from 1 to .maxss do screen[.i,1]_"?M";	! One CR per line
    hitsts_1;
    autoinc_100;
    autotime_0;
    autowrit_0;
    initdispatch();
    incr i from "a" to "z" do begin	! might as well be 'hard' coded!!!
	qbp_qreg(.i);			! this code is executed but once!
	replacei(qbp,.XPrefix);	! C-X   (was .Metaprefix <esc>)
	replacei(qbp,")");		! ")"   (was "p")
    end;
    fini();
    iudent_72;
    commentpos_41;			![face]
    tabwidth_4;
    exini();				![CB] Before any init File, *SORRY*
    clearscreen();			![CB] Move this till after rescan
    winit();				![CB] Ditto ...
    reader();
end					![CB] Can't get tty type -- just exit
else fen();

end eludom
    ]@nM