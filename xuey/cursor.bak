module cursor = begin

!Copyright 1979 by Michael L. Kazar
!Modified extensively by Carl A. Baltrunas 1980-1/cb
machop ttcall = #051;
macro outstr(x) = ttcall(3,x,,1)$;

bind vanilla=1;
bind tymcom=1;
bind twenex=0;

external physpos,physlin,tabsize,puntsos,open,init,close,gppn,dmpin,flubfr;
external putch,ttytyp,wrnum,imout,scrsze,linesz,realup,linmax,writeloss;
external inwind,modpos,scrlen,scroff,readch,flubfr,writestring,wndsiz;
external getwid,getlen,trmtyp,gt20,gt10,tspeed;

forward gettty,home,defwindow,goxy,clearline,inversevideo,gopos,goline;
forward clearscreen, WhiteLine;
forward vt100setregion;

global wndpea=0, baudrate=1200, echosize=3;

global Clines, Ccols;

![CB @ GC] BIND these numbers to names for improved access
! Here are the numbers that are reserved for tty's
bind	superbee=  1;	! beehive superbee
bind	adm3a	=  2;	! adm3a
bind	infotn	=  3;	! infoloss
bind	beehive	=  4;	! beehive
bind	annarbor=  5;	! annarbor half soroc
bind	con100	=  6;	! concept 100
bind	hp2648	=  7;	! hp2648
bind	gp100	=  8;	! gp100
bind	dm2500	=  9;	! dm2500
bind	vt100	= 10;	! VT100
bind	tk4025	= 11;	! tek 4025
bind	tk4027	= 12;	! tek 4027
bind	hz1500	= 13;	! hazeltine 1500
bind	hkit19	= 14;	! hkit19 (Ansi Mode)
bind	dm1500	= 15;	! dm1500
bind	act4	= 16;	! act4
bind	vt52	= 17;	! DEC VT52
bind	add100	= 18;	! adds 100
bind	info200	= 19;	! infoton 200
bind	tr1061	= 20;	! teleray 1061
bind	mime4	= 21;	! Mime 4 ??? (Act 4)
bind	bantam	= 22;	! Bantam ???
bind	hp2621	= 23;	! HP 2621
bind	vt102	= 24;	! DEC VT102

bind	h19	= 27;	! Heath-kit 19 (Heath mode)
bind	adm31	= 28;	! Adm-31
bind	tk4023	= 29;	! tektronix 4023
bind	hz2000	= 30;	! hazeltine 2000
bind	gtvt06	= 31;	! gt-40 vt06 simulation
routine escape(char) = begin
    putch(#33);
    putch(.char)
end;

routine padd(count) = begin
    local p;
    incr p from 1 to (.count*.baudrate)/1200 do
	if .ttytyp eql Adm31 then imout(#0) else imout(#177);
    flubfr()
end;
global routine ttyzap = begin
    clearscreen();
    if .ttytyp eql con100 then begin
	escape("4");putch(" ");putch("l");
	defwindow(1,1,.Ccols,.Clines);
	physpos_1;
	physlin_1;
	goxy(1,.modpos+.echosize);
    end
    else if .ttytyp eql h19 then begin
	escape("z");
    end
    else if .ttytyp eql vt100 then begin
	defwindow(1,1,.Ccols,.Clines);
    end
    else if .ttytyp eql dm2500 then
	(putch(#030);putch(#035));
end;
global routine delchar =
    select .ttytyp of nset
	con100:	return  escape("?A");

	vt102:	return	(escape("[");putch("P"));
	hkit19:	return  (escape("[");putch("P"));
	h19:	return	escape("N");

	tr1061:	return  escape("Q");

	hp2621:	return  escape("P");

	adm31:	return	escape("W");
    tesn;
global routine inschar =
    select .ttytyp of nset
	con100:	return  (escape("?P");putch(" ");
			 putch(#33);imout(0);
			 physpos_.physpos+1);

	vt102:	return  (escape("[");putch("4");putch("h");
			 putch(" ");
			 escape("[");putch("4");putch("l");
			 physpos_.physpos+1);
	hkit19:	return  (escape("[");putch("4");putch("h");
			 putch(" ");
			 escape("[");putch("4");putch("l");
			 physpos_.physpos+1);
	h19:	return	(escape("@");putch(" ");escape("O");
			 physpos_.physpos+1);

	tr1061:	return  escape("P");

	hp2621:	return  (escape("Q");putch(" ");
			 escape("R");
			 physpos _ .physpos+1);

	Adm31:	return	escape("Q");
    tesn;
global routine ttyin2 = begin
    modpos_.Clines-.echosize;
    linesz_.Ccols-1;
    Modpos_(case .ttytyp of set
	0;	!0: non-video
	0;	!1: superbeen
	24;	!2: adm3a
	20;	!3: infoloss
	0;	!4: beehive
	21;	!5: soroc
	0;	!6: concept 100
	22;	!7: hp2648
	22;	!8: gp100
	22;	!9: dm2500
	22;	!10:vt100
	22;	!11:tek 4025
	22;	!12:tek 4027
	24;	!13:hazel (0-21)=22 0=top
	24;	!14:hkit19
	22;	!15:dm1500
	24;	!16:act4
	24;	!17:vt52
	24;	!18:adds
	24;	!19:infoloss 200
	24;	!20:teleray1061
	24;	!21:mime4
	24;	!22:bantam
	24;	!23:HP2621
	24;	!24:VT102
	24;
	24;
	24;	!27:H19 (Heath mode)
	24;	!28:Adm-31
	24;	!29:tk4023
	27;	!30:h2000
	31;	!31:gtvt06
    tes)-.echosize;

    wndsiz[0]_.modpos;	       !init the window size.
    scrsze_.modpos;

    return;
end;
global routine ttyini = begin
	Clines _ GetLen()+1;
	if .Clines eql 1 then Clines_24;   !check for .tt ps lossage

	Ccols _ GetWid();		    ! [CB] Use system's idea of width
	if .Ccols eql 0 then Ccols _ 80;    ! [CB] if none set then 80;
	if .Ccols gtr 132 then Ccols_132;   ! [CB] max with = 132

	select .ttytyp of nset
	    con100:	return  (Ccols _ GetWid();
				 wndpea_1;
				 escape("U");
				 escape("4");putch(" ");putch("f");
				 defwindow(1,1,.Ccols,.Clines));

	    vt100:	return	defwindow(1,1,.Ccols,.Clines);
	    vt102:	return	defwindow(1,1,.Ccols,.Clines);

	    hkit19:	return  escape("<");
	    h19:	return  (escape("[");putch("??");
				 putch("2");putch("h"));
	tesn;
end;
global routine ToPrompt(foo) =
begin
	defwindow(1,1,.linesz,.modpos+.echosize);
	goxy(1,.modpos+2);
	clearline();
	Writestring(.foo);
	inwind_1
end;

global routine ToStatus =
begin
	defwindow(1,1,.linesz,.modpos+.echosize);
	goxy(1,.modpos+1);
	clearline();
	inwind_1
end;

global routine defwindow (x,y,c,l) =
! x,y is the position to start,
! c   is the length of the window
! l   is its depth, in lines.

if .ttytyp eql con100 then begin	!concept 100 is only window supported terminal.
    physlin_.y;
    physpos_.x;
    escape("v");	!define window mode.
    wrnum(.y);		!write the y position
    wrnum(.x);
    wrnum(.l+1);
    wrnum(.c+1)
end			!the if statement
else if .ttytyp eql vt100 then		!vt100
	vt100setregion(0,.Clines)
else begin
    scroff_.y-1;
    scrlen_.l;
end;
routine vt100setregion (top,bottom) = begin
    escape("[");
    if .top    gtr 1 then wrnum(.top+1);
    if .bottom gtr 1 then begin
	putch(";");
	wrnum(.bottom+1);
	end;
    putch("r");				! Set scrolling region
end;
global routine inslin (times) =
select .ttytyp of nset
    hz1500:	return  incr i from 1 to .times do begin
			putch(#176);putch(#232);padd(2)	end;
    hz2000:	return  incr i from 1 to .times do begin
			putch(#176);putch(#232);padd(2)	end;
    vt100:	return  (escape("7");	! save the cursor position
			 vt100setregion(.physlin,.modpos+.echosize);
			 escape("8");	! restore cursor position
			 incr i from 1 to .times do escape("M");
			 vt100setregion(0,.modpos+.echosize);
			 escape("8"));	! restore cursor position
    vt102:	return  (escape("[");wrnum(.times+1);putch("L");padd(8));
    tr1061:	return  incr i from 1 to .times do escape("L");
    adm31:	return	incr i from 1 to .times do (escape("E");padd(16));
    superbee:	return  incr i from 1 to .times do begin
			local j;escape("L");
			incr j from 1 to 4 do putch(13);
			end;
    dm2500:	return  incr i from 1 to .times do begin
			putch(#20);putch(#12);putch(#30)
			end;
    con100:	return  incr i from 1 to .times do begin
			escape("?R");padd(3)
			end;
    hkit19:	return  (escape("[");wrnum(.times+1);putch("L"));
    h19:	return	incr i from 1 to .times do escape("L");
    mime4:	return  incr i from 1 to .times do putch("?A");
    hp2621:	return  incr i from 1 to .times do escape("L");
tesn;
global routine dellin (times) =
select .ttytyp of nset
    hz1500:	return  incr i from 1 to .times do begin
			putch(#176);putch(#223);padd(2) end;
    hz2000:	return  incr i from 1 to .times do begin
			putch(#176);putch(#223);padd(2) end;
    vt100:	return  (escape("7");
			 vt100setregion(.physlin,.modpos+.echosize);
			 escape("[");wrnum(.modpos+.echosize);putch("H");
			 incr i from 1 to .times do putch("?J");
			 vt100setregion(0,.modpos+.echosize);
			 escape("8"));
    vt102:	return  (escape("[");wrnum(.times+1);putch("M");padd(8));
    con100:	return  incr i from 1 to .times do begin
			escape("?B");padd(3) end;
    tr1061:	return  incr i from 1 to .times do escape("M");
    adm31:	return	incr i from 1 to .times do (escape("R");padd(16));
    superbee:	return  incr i from 1 to .times do begin
			local j;escape("M");
			incr j from 1 to 12 do putch(13);
			end;
    dm2500:	return  incr i from 1 to .times do begin
			putch(#20);putch(#32);putch(#30);
			end;
    hkit19:	return  (escape("[");wrnum(.times+1);putch("M"));
    h19:	return	incr i from 1 to .times do escape("M");
    mime4:	return  incr i from 1 to .times do putch("?W");
    hp2621:	return  incr i from 1 to .times do escape("M");
tesn;
global routine clearscreen = begin
	tabsize_8;
	ttyini();
	case .ttytyp of set
		0;					!0: non-video
		putch(12);				!1: superbee
		begin					!2: adm
		    putch(26);
		    incr i from 1 to .modpos do linmax[.i]_0;
		end;
		putch(12);				!3: infoloss
		putch(12);				!4: beehive
		escape("*");				!5: soroc
		(defwindow(1,1,.Ccols,.Clines);		!6: concept
		 physpos_1;physlin_1;putch("?L"));
		(home();escape("J"));			!7: HP2648
		0;					!8: gp100
		(putch("?X");putch(#36));		!9: dm2500
		(home();escape("[");			!10:vt100
			putch("2");putch("J");padd(8));
		0;					!11:tek 4025
		0;					!12:tek 4027
		(putch(#176);putch(#234);padd(4));	!13:Hazeltine 1500
		(escape("[");putch("2");putch("J"));	!14:heath 19
		putch(#14);				!15:dm1500
		putch("?L");				!16:act4
		(home();escape("J"));			!17:vt52
		0;					!18:adds
		0;					!19:info 200
		putch("?L");				!20:teleray 1061
		putch("?L");				!21:mime4
		escape("K");				!22:bantam
		(home();escape("J"));			!23:HP2621v
		(home();escape("[");			!24:vt102
			putch("2");putch("J");padd(8));
		0;
		0;
		escape("E");				!27:Heath-kit 19
		(escape(":");padd(8));			!28:Adm-31
		(escape(#14);padd(2));			!29:Tektronix 4023
		(putch(#176);putch(#234);padd(4));	!30:Hazeltine 2000
		putch("?L");				!31:Gt-40 Vt06
		tes;
	physpos_1;
	physlin_1;
	end;
global routine leftmargin = begin
    if .ttytyp eql superbee then (putch(13);putch(10);escape("A"))
    else putch(13);
    physpos_1;
end;
global routine home = begin
	case .ttytyp  of set
		0;					!0: printing terminal
		escape("H");				!1: superbee
		putch("?^");				!2: adm3a
		putch(8);				!3: infoton
		escape("H");				!4: beehive
		putch("?^");				!5: soroc
		escape("??");				!6: concept
		escape("H");				!7: hp 2648
		0;					!8: gp100
		putch(2);				!9: dm2500
		(escape("[");putch("H"));		!10:vt100
		0;					!11:tek 4025
		0;					!12:tek 4027
		(putch(#176);putch(#22);padd(2));	!13:Hazeltine 1500
		(escape("[");putch("H"));		!14:heath 19
		putch(#31);				!15:dm1500
		putch("?]");				!16:act4
		escape("H");				!17:vt52
		0;					!18:adds
		0;					!19:info200
		escape("H");				!20:teleray 1061
		putch("?]");				!21:mime4
		escape("H");				!22:bantam
		escape("H");				!23:HP2621
		(escape("[");putch("H"));		!24:vt102
		0;
		0;
		escape("H");				!27:Heath-kit 19
		putch(#36);				!28:Adm-31
		(putch(#34);putch(" ");putch(" "));	!29:Tektronix 4023
		(putch(#176);putch(#22);padd(2));	!30:Hazeltine 2000
		putch(#35);				!31:Gt40 Vt06
		tes;
	physpos_1;
	physlin_1;
	end;

routine goline (n) = while 1 do begin
	if .n eql .physlin then exitloop;
	if .n lss (.physlin-.n) then begin
		home();
		goline (.n);
		exitcompound[2];
		end;
	if .n lss .physlin then begin
		select .ttytyp of nset
			adm3a:		putch(#13);
			infotn:		putch(#34);
			annarbor:	putch(#13);
			tesn;
		physlin_.physlin-1;
		exitcompound[2];
		end;
	select .ttytyp of nset
		adm3a:		putch(#12);
		infotn:		putch(#35);
		annarbor:	putch(#12);
		tesn;
	physlin_.physlin+1;
	end; !compound loop of do.
global routine goxy (xloc,yloc) = begin
own x,y;

routine yxechar(ch) = begin
    escape(.ch);    putch(.y+#37);    putch(.x+#37);
end;
routine xychar(ch) = begin
    putch(.ch);    putch(.x+#37);    putch(.y+#37);
end;
routine yxchar(ch) = begin
    putch(.ch);    putch(.y+#37);    putch(.x+#37);
end;

routine xynum(ch) = begin
    putch(.ch);    wrnum(.x);    wrnum(.y);
end;
routine yxnum(ch) = begin
    putch(.ch);    wrnum(.y);    wrnum(.x);
end;

routine xyenum(ch) = begin
    putch(#33);    xynum(.ch);
end;
routine yxenum(ch) = begin
    putch(#33);    yxnum(.ch);
end;

routine xyhp26xx = begin
    escape("&");    putch("a");
    wrnum(.y);      putch("y");
    wrnum(.x);      putch("C");
end;

routine xydm2500 = begin
    putch(#14);    putch(.x-1 xor #140);    putch(.y-1 xor #140);
end;
routine xydm1500 = begin
    putch(#36);    imout(.x+31);    imout(.y-1);
end;

routine xyvt100 = begin
    escape("[");
    if .y gtr 1 then wrnum(.y+1);
    if .x gtr 1 then begin putch(";"); wrnum(.x+1); end;
    putch("H");
end;

routine xyhazeltine = begin
    putch(#176);    putch(#21);
    imout(.x-1);	!	    putch(.x);
    imout(.y-1);	!	    putch(.y);
end;

routine xybantam = begin
    escape("Y");    putch(.x+31);
    escape("X");    putch(.y+31);
end;
! begin real code for goxy here ****	[CB @ GC]

if .xloc eql .physpos and .yloc eql .physlin then return;
x_.xloc; y_.yloc;
case .ttytyp of set
    0;				! 0: non-video
    xyenum("F");		! 1: superbee
    yxechar("=");		! 2: adm3a
    (goline(.y);gopos(.x));	! 3: infoloss
    yxenum("F");		! 4: beehive
    (goline(.y);gopos(.x));	! 5: soroc
    yxenum("a");		! 6: concept 100
    xyhp26xx();			! 7: hp 2648
    (goline(.y);gopos(.x));	! 8: gp-100
    xydm2500();			! 9: dm2500
    xyvt100();			!10: vt100
    0;				!11: tek 4025
    0;				!12: tek 4027
    xyhazeltine();		!13: hazeltine 1500
    xyvt100();			!14: heath-19
    xydm1500();			!15: dm1500
    yxnum("?T");		!16: act4
    yxechar("Y");		!17: vt52
    (goline(.y);gopos(.x));	!18: adds
    (goline(.y);gopos(.x));	!19: info 200
    yxechar("Y");		!20: teleray 1061
    yxnum("?T");		!21: mime4
    xybantam();			!22: bantam
    xyhp26xx();			!23: hp 2621v
    xyvt100();			!24: vt102
	0;
	0;
    yxechar("Y");		!27: Heath-kit 19 (Heath mode)
    yxechar("=");		!28: Adm-31
    xychar(#34);		!29: Tektronix 4023
    xyhazeltine();		!30: hazeltine 2000
    yxchar(#16);		!31: gt40 vt06 simulator
tes;
physlin_.y;
physpos_.x;
return;
end;
global routine clearline = case .ttytyp of set
	0;			       !0: printing
	escape("K");		       !1: superbee
	begin local tc;		       !2: adm (simulated)
		tc_.physpos; !remember where we are.
		incr i from .tc to .linmax[.physlin] do begin
			if .i gtr .linesz then exitloop;
			writeloss(" "); !adm3
		end;
		linmax[.physlin]_.tc;  !reset this value.
		goxy(.tc,.physlin)    !go back to where we were.
		end;
	putch("?K");		       !3: infoton
	escape("K");		       !4: beehive
	escape("T");		       !5: soroc
	escape(19);		       !6: concept
	escape("K");		       !7: hp2648
	0;			       !8: gp100
	putch(#27);		       !9: dm2500
	(escape("[");putch("K"));      !10:vt100
	0;			       !11:tek 4025
	0;			       !12:tek 4027
	(putch(#176);putch(#17);padd(2)); !13:hazel
	(escape("[");putch("K"));      !14:heath 19
	putch(#35);		       !15: dm1500
	putch("?^");		       !16: act4
	escape("K");		       !17: vt52
	0;			       !18: adds
	0;			       !19: info 200
	escape("K");		       !20: t1061
	putch("?^");		       !21: mime4
	escape("I");		       !22: batshit
	escape("K");		       !23: HP2621
	(escape("[");putch("K"));      !24: vt102
	0;
	0;
	escape("K");		       !27: Heath-kit 19 (Heath mode)
	escape("T");		       !28: Adm-31
	begin local tc;		       !29: tek 4023 (simulated)
		tc_.physpos; !remember where we are.
		incr i from .tc to .linmax[.physlin] do begin
			if .i gtr .linesz then exitloop;
			writeloss(" ");
		end;
		linmax[.physlin]_.tc;  !reset this value.
		goxy(.tc,.physlin)    !go back to where we were.
		end;
	0;					!Hazeltine 2000
	putch(#36);				!gt40 vt06
	tes;
routine gopos (n) = while 1 do begin
	if .n eql .physpos then exitloop;

	if .n lss (.physpos-.n) then begin
 		leftmargin();
		gopos (.n);
		exitloop;
		end;
	if .n lss .physpos then begin
		select .ttytyp of nset
			adm3a:		putch(8);
			infotn:		putch(#32);
			beehive:	escape("D");
			annarbor:	putch("?H");
			tesn;
		physpos_.physpos-1;
		exitcompound[2];
		end;
	select .ttytyp of nset
		adm3a:		imout("?L");
		infotn:		putch(#31);
		beehive:	escape("C");
		annarbor:	putch("?L");
		tesn;
	physpos_.physpos+1;
	end; !do loop
global routine gettty = begin

external ttype;			!terminal type sixbit made global [CB@GC]
register q;
own iniblk[6];

machop calli = #047;
macro	pjob(ac) =calli ((ac),#30)$,
	trmno(ac)=calli((ac),#115)$,
	trmop(ac)=calli((ac),#116)$,
	skip (op)=ifskip (op) then 1 else 0$;

routine askuser = while 1 do begin local tp,sp;
if .ttytyp eql 0 then begin tp_plit'?M?J'; Outstr(tp); end;
ToPrompt(plit asciz 'Enter terminal type (?? for help, E for exit): ');
tp_readch(flubfr());
if .tp geq "a" and .tp leq "z" then tp_.tp-32;	! Lower==>Upper
if .tp eql "??" then begin
    clearscreen();
    tp_plit asciz'?J?M
?JTerminals are:
?J A    Adm-3A             ^A    Adm-31 (TYM 425)
?J B    Beehive             C    Concept 100
?J^E    MIMEs Act4
?J G    GP-100             ^G    GT-40 VT06
?J H    Hazeltine 2000     ^H    Hazeltine 1500
?J I    Infoton             K    Heath-Kit 19
?J N    Bantam              P    HP-2621 (TYM 444)
?J Q    Annarbor            R    Teleray 1061
?J S    Superbee            T    VT102 (Rainbow)
?J V    VT52               ^V    VT100              
?J 1    DM-1500             2    DM-2500
?J 3    TEK 4023            4    ACT-IV
?J 5    TEK 4025            7    TEK 4027
?J 8    HP-2648             9    Heath 19 (ANSI)
?J
?J';
Flubfr();
Outstr(tp);
     end
	else select .tp of nset
	"P":	return sixbit 'HP2621';
	"T":	return sixbit 'VT102 ';
	"K":	return sixbit 'H19   ';
	"?H":	return sixbit 'H1500 ';
	"H":	return sixbit 'H2000 ';
	"?G":	return sixbit 'GTVT06';
	"V":	return sixbit 'vt52  ';
	"?V":	return sixbit 'vt100 ';
	"C":	return sixbit 'concep';
	"?A":	return sixbit 'adm31 ';
	"3":	return sixbit 'tek023';
	"8":	return sixbit 'hp2648';
	"G":	return sixbit 'gp100 ';
	"A":	return sixbit 'adm   ';
	"N":	return sixbit 'bantam';
	"R":	return sixbit 't1061 ';
	"B":	return sixbit 'beehiv';
	"I":	return sixbit 'infoto';
	"S":	return sixbit 'superb';
	"Q":	returbit 'annarb';
	"9":	return sixbit 'hkit19';
	"1":	return sixbit 'DM1500';
	"2":	return sixbit 'dm2500';
	"4":	return sixbit 'act4  ';
	"?E":	return sixbit 'mime4 ';
	"5":	return sixbit 'tek025';
	"7":	return sixbit 'tek027';
	"E":	return 0;
	"?C":	return 0;
	"?U":	return 0;
	otherwise:	Begin
    tp_plit '?J?M?J
Please type "E" to EXIT, or type "??" for a list of terminal types.?J
Then type the single character preceeding the kind of terminal you?J
would like to use.
';
    Outstr(tp);
    End;		! Otherwize Begin ... End;
	tesn;
end;	!the whole routine.


routine termno (dummy) =
	begin
	pjob (q); ! fetch hither the job number.
	if skip (trmno(q)) then .q else 0
	end;

routine termop (fncode,trmnum)=
	begin own adr[2];
	adr_.fncode;
	(adr+1)_.trmnum;
	q<18,18>_2;
	q<0,18>_adr;
	if skip (trmop(q)) then .q else -1
	end;

![CB] Removed completely so can be checked in VUE.INI file in EXINI()
!if vanilla then begin
!		iniblk_sixbit 'dsk';
!		(iniblk+1)_sixbit 'vue';
!		(iniblk+2)_sixbit 'ini';
!		(iniblk+3)_0;
!!		(iniblk+4)_gppn();		! Removed by CB vis. next line
!		(iniblk+4)_0;			! Use current path first
!		open (2,#16,.iniblk,0<0,0>);
!		if realup(iniblk+1<0,0>) then dmpin(2,ttype,#1)
!		else ttype_sixbit'PSEUDO';
!		close(2);
!end;

global routine sttype = begin
local tp,savetype,savettytype;

global routine rstype = begin
external DoStat;

ttype _ case .ttytyp of set
	sixbit'PSEUDO';			! non-video	!  0
	sixbit'SUPERB';			! superbee;	!  1
	sixbit'ADM   ';			! adm3a;	!  2
	sixbit'INFOTO';			! infotn;	!  3
	sixbit'BEEHIV';			! beehive;	!  4
	sixbit'ANNARB';			! annarbor;	!  5
	sixbit'CONCEP';			! con100;	!  6
	sixbit'HP2648';			! hp2648;	!  7
	sixbit'GP100 ';			! gp100;	!  8
	sixbit'DM2500';			! dm2500;	!  9
	sixbit'VT100 ';			! vt100;	! 10
	sixbit'tek025';			! tk4025;	! 11
	sixbit'tek027';			! tk4027;	! 12
	sixbit'H1500 ';			! hz1500;	! 13
	sixbit'hkit19';			! hkit19;	! 14
	sixbit'DM1500';			! dm1500;	! 15
	sixbit'act4  ';			! act4;		! 16
	sixbit'vt52  ';			! vt52;		! 17
	sixbit'adds  ';			! add100;	! 18
	sixbit'i200  ';			! info200;	! 19
	sixbit't1061 ';			! tr1061;	! 20
	sixbit'mime4 ';			! mime4;	! 21
	sixbit'bantam';			! bantam;	! 22
	sixbit'HP2621';			! hp2621;	! 23
	sixbit'VT102 ';			!		! 24
	sixbit'PSEUDO';			!		! 25
	sixbit'PSEUDO';			!		! 26
	sixbit'H19   ';			! h19		! 27
	sixbit'adm31 ';			! Adm-31;	! 28
	sixbit'TEK023';			! tk4023;	! 29
	sixbit'H2000 ';			! hz2000;	! 30
	sixbit'GTVT06';			! gtvt06;	! 31
    tes;
    DoStat();
end;

if not vanilla then savetype_termop(#3001,termno());
if vanilla then savetype_gt10();	! for vanilla tops-10
if twenex then savetype_gt20();		! the twenex version of magic cmuuuo.

if .savetype eql sixbit'PSEUDO' then savetype_askuser()
else begin
	writestring(plit asciz '?M?JTerminal Type set by the Monitor = ');
	tp _ .ttype<36,6>;
	incr i from 1 to 6 do writeloss(scani(.tp)+#40);
	writestring(plit asciz '?M?J');
    end;

if .savetype eql 0 then return 0
else ttype _ .savetype;

savettytype_select .ttype of nset
	sixbit'SUPERB':		superbee;	!  1
	sixbit'ADM   ':		adm3a;		!  2
	sixbit'INFOTO':		infotn;		!  3
	sixbit'BEEHIV':		beehive;	!  4
	sixbit'ANNARB':		annarbor;	!  5
	sixbit'CONCEP':		con100;		!  6
	sixbit'HP2648':		hp2648;		!  7
	sixbit'GP100 ':		gp100;		!  8
	sixbit'DM2500':		dm2500;		!  9
	sixbit'VT100 ':		vt100;		! 10
	sixbit'tek025':		tk4025;		! 11
	sixbit'tek027':		tk4027;		! 12
	sixbit'H1500 ':		hz1500;		! 13
	sixbit'hkit19':		hkit19;		! 14
	sixbit'DM1500':		dm1500;		! 15
	sixbit'act4  ':		act4;		! 16
	sixbit'vt52  ':		vt52;		! 17
	sixbit'adds  ':		add100;		! 18
	sixbit'i200  ':		info200;	! 19
	sixbit't1061 ':		tr1061;		! 20
	sixbit'mime4 ':		mime4;		! 21
	sixbit'bantam':		bantam;		! 22
	sixbit'HP2621':		hp2621;		! 23
	sixbit'VT102 ':		vt102;		! 24

	sixbit'h19   ':		h19;		! 27
	sixbit'ADM31 ':		adm31;		! 28
	sixbit'TEK023':		tk4023;		! 29
	sixbit'H2000 ':		hz2000;		! 30
	sixbit'GTVT06':		gtvt06;		! 31
	sixbit'EXIT  ':		return 0;
	otherwise:		return 0;
    tesn;
if .savettytype neq 0 then ttytyp_.savettytype;
return 1;
end;

return sttype();			![CB] Make the procedure global

end; !crocedure.

Global Routine WhiteLine = begin
    if .ttytyp eql 7 then begin
	ClearLine();
	InverseVideo();
    end
    else begin
	InverseVideo();
	ClearLine();
    end;
end;
global routine inversevideo =
select .ttytyp of nset
    hz1500:	return  (putch(#176);putch(#237));
    hz2000:	return  (putch(#176);putch(#237));
    vt100:	return  (escape("[");putch("7");putch("m"));
    vt102:	return  (escape("[");putch("7");putch("m"));
!    adm31:	return	(escape("G");putch("4"));
    con100:	return  (escape("D");escape("E"));
    hkit19:	return  (escape("[");putch("7");putch("m"));
    h19:	return	escape("p");
!   tr1061:	return	(escape("R");putch("F"));	! looks horrible
tesn;
global routine normalvideo =
select .ttytyp of nset
    hz1500:	return  (putch(#176);putch(#231));
    hz2000:	return  (putch(#176);putch(#231));
    con100:	return  (escape("d");escape("e"));
!    adm31:	return	(escape("G");putch("0"));
    vt100:	return  (escape("[");putch("m"));
    vt102:	return  (escape("[");putch("m"));
    hkit19:	return  (escape("[");putch("m"));
    h19:	return	escape("q");
!   tr1061:	return	(escape("R");putch("@"));   ! looks horrible
tesn;

end eludom
  '@=R