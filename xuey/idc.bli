module inchar = begin

structure tdas[i,j]=.tdas+(.j-1)+(.i-1)*132;
structure strs[i,j]=
    ( .strs + ((.j-1)/5) + ((.i-1)*27) ) <36-((((.j-1) mod 5)+1)*7),7>;

external screen,lowend,hend,hbot,getchxr,inschar,delchar,ttytype,scroff;
external goxy,updatecursor,linesz,wndorg,curwin;
map strs screen;

! Copyright 1980 by Michael L. Kazar
global routine idc (firstchar,line) = begin

    own mypos,myscreenpos,suffix,prefix,differed,eobuffer,eoscreen,i;
    own crpos,crscreenpos,myphyspos,distance,endphyspos,fudge,preend;

    ! firstchar is the character position of the first
    ! character in the buffer to be updated.
    ! line is the screen image line we are working with.

    if (.ttytype neq 6) and (.ttytype neq 20) and
	(.ttytype neq 14) and (.ttytype neq 24) and
	(.ttytype neq 28) and (.ttytype neq 23)
	then return;

    myphyspos_1;		       !where we are on the screen
    preend_.firstchar-1;	       !initialize it.
    endphyspos_1;		       !where the end  of the line would be.
    differed_0;			       !so far the same.
    prefix_0;			       !number of chars the same.
    mypos_.firstchar;		       !place to start.
    myscreenpos_1;		       !place on the screen.

    eobuffer_0;
    eoscreen_0;

    while 1 do begin       !while still the same do
	if getchxr(.mypos) eql "?M" then eobuffer_1;
	if .screen[.line,.myscreenpos] eql "?M" then eoscreen_1;

	if .eoscreen and .eobuffer then exitloop;  !are we done?

	if ( .screen[.line,.myscreenpos] neq getchxr(.mypos) ) then
	    differed_1;		       !now its true.

	endphyspos_updatecursor(.screen[.line,.myscreenpos],.endphyspos);
	if not .differed then begin
	    preend_.mypos;	       !pos(last char in prefix)
	    prefix_.prefix+1;
	    myphyspos_.endphyspos;      !where we are when the difference is.
	end
	else
	if getchxr(.mypos) eql "?I" or .screen[.line,.myscreenpos] eql "?I"
	    then return;  !lossage.

	if not .eobuffer then mypos_.mypos+1;
	if not .eoscreen then myscreenpos_.myscreenpos+1;

    end;

    !too much grief when lines overflow
    if .endphyspos geq .linesz then return;

    crpos_.mypos-.firstchar+1;	       !carriage return position
    crscreenpos_.myscreenpos;	       !ditto for screen.

    ! Now we have found the common prefix length, the position of the
    ! carriage return in the screen image and the same in the buffer.
    ! Now we scan backwards getting the suffix length.

    suffix_-1;			       !the suffix length.

    while 1 do begin
	if .screen[.line,.myscreenpos] eql getchxr(.mypos) then
	    suffix_.suffix+1;

	if .myscreenpos eql .prefix+1 then exitloop;
	if .mypos eql .preend+1 then exitloop;

	myscreenpos_.myscreenpos-1;
	mypos_.mypos-1;
    end;

    ! Now we have all the information.  If it is worthwhile, we
    ! should now do the operations.

    !Heuristic to punt on no change to the line.
    if .crscreenpos eql .crpos then return;

    goxy(.myphyspos,.line-.wndorg[.curwin]+1+.scroff);!get to right spot.

    fudge_.myphyspos;		       !where the prefix ends.

    if .suffix eql 0 then return;      !obviously.

    if .crpos-1 gtr .suffix+.prefix then begin !insertchar
	distance_.crpos-1-.suffix-.prefix;

	incr i from .prefix+1 to .prefix+.distance do
	    fudge_updatecursor(getchxr(.firstchar+.i-1),.fudge);

	if .distance gtr .suffix then return;  !why bother

	!First cleean up the screen image properly.
	decr i from 132-.distance to .prefix do
	    screen[.line,.i+.distance]_.screen[.line,.i];
	incr i from .prefix+1 to .prefix+.distance do
	    screen[.line,.i]_" ";
	incr i from 1 to .fudge-.myphyspos do
	    inschar();
    end
    else if .crscreenpos-1 gtr .suffix+.prefix then begin
	!Fix up the screen image.
	distance_.crscreenpos-1-.suffix-.prefix;
	incr i from .prefix+1 to .prefix+.distance do
	    fudge_updatecursor(.screen[.line,.i],.fudge);

	if .distance gtr .suffix then return;

	incr i from .prefix+1 to 132-.distance do
	    screen[.line,.i]_.screen[.line,.i+.distance];
	incr i from 1 to .fudge-.myphyspos do
	    delchar();
    end;
    

end;				       !the whole procedure

end eludom
