TITLE	Reverse a line of input.		Example 4A

Comment	$
	Program to reverse the characters on each line of input.
	Program will stop when an empty line is input.

	This program demonstrates the last-in first-out property
	of push-down stacks.
	$

	;-Some defination

	A=1			;-Symbolic names for accumulators
	P=17			;-Register for the stack pointer

	PDLEN==200		;-Room for 128 characters
	PDLIST:BLOCK PDLEN	;-Reserved space for stack

START:	RESET			;-Initialize the program
	OUTSTR	[ASCIZ/Welcome to the reverse program
/]				;-Send a friendly message

	;-Initialize for another input line

GETLIN:	OUTSTR	[ASCIZ/Please type a line:    /]
	MOVE	P,[IOWD PDLEN,PDLIST]	;-Initialize stack pointer

CHLOOP:	INCHWL	A		;-Obtain a character
	CAIN	A,15		;-Skip unless this is a a carriage return
	 JRST	CHLOOP		;-Discard CR, go get the next character
	CAIN	A,12		;-Skip unless this is a line feed
	 JRST	EOLN		;-This is a line feed, Jump to EOLN
	PUSH	P,A		;-Add character to the stack
	JRST	CHLOOP		;-Loop to obtain another character

EOLN:	CAMN	P,[IOWD PDLEN,PDLIST]	;-Is the stack empty?
	 JRST	STOP		;-Empty line, stop running
	OUTSTR	[ASCIZ/Reverse line is:  /]

POPIT:	POP	P,A		;-Get one character from the stack
	OUTCHR	A		;-Send it to the terminal
	CAME	P,[IOWD PDLEN,PDLIST]	;-Is the stack empty now?
	 JRST	POPIT		;-Not yet, loop again
	OUTSTR	[ASCIZ/
/]				;-Add CRLF to end of the output line
	JRST	GETLIN		;-Go get another input line

STOP:	OUTSTR[ASCIZ/Done.
/]
	EXIT	1,		;-Stop the job and return to monitor mode

	END	START
