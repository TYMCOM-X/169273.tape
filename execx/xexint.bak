entry

	ESC!,   EscEnb, EscDis
,	NTQ!,   NtqEnb, NtqDis
,	TIM!,   TimEnb, TimDis, SetTim

,	CHR!,   PrtEnb, PrtDis
,	ORG!,   LOS!,   ZAP!,   ZapTim

,	FEX!,   FEXEnb, FEXDis
,	ECF!,   ECFEnb, EFCDis
,	LCF!,   LCFEnb, LCFDis
,	NIC!,	NICEnb, NICDis
,	SIP!,   SIPEna, SIPDis
,	SIC!,   SICEna, SICDis
,	SIS!,   SISEna, SISDis
,	SIA!,   SIAEna, SIADis
;
begin "XEXINT"

require "(SAILIB)SAIL.DEF" source!file;
require "(MPL)UUOSYM.DEF"  source!file;
require "(CARL)JQUEUE.DEF" source!file;
require "(CARL)XEXEC.REQ"  source!file;
require "(CARL)XEXINT.DEF" source!file;
require "(CARL)DAYTIM.REQ" source!file;
!get!definitions(tymint);


!	Definitions
;

Define	!iaLCF='0,  !iaECF='1,  !iaNIC='2
,	!iaSIP='6,  !iaSIC='7,  !iaSIS='10, !iaSIA='11;

Define SetFlg(x) = { x_ x lor MyBit };
Define ClrFlg(x) = { x_ x land NoBit };


internal boolean
	NTQ!	! true if notice-to-quit ;	! generally from KSYS ;
,	ESC!	! true if ^C or ESC hit ;	! keyboard interrupt ;
,	TIM!	! true if timer interrupt ;	! general clock timer ;

,	CHR!	! true if character-break ;	! per-port interrupts ;
,	ORG!	! true if orange ball ;
,	ZAP!	! true if circuit zap ;
,	ZapTim	! TDT of last zapper received ;
,	LOS!	! true if characters lost ;

,	FEX!	! true if exit in child ;	! .IAFEX any child ;
,	ECF!	! true if exit in child ;	! .IAECF specified ;
,	LCF!	! true if logout in child ;	! .IALCF specified ;
,	NIC!	! true if notice in child ;	! .IANIC specified ;

,	SIP!	! true if software interrupt from parent ;
,	SIC!	! true if software interrupt from child ;
,	SIS!	! true if software interrupt from sibling ;
,	SIA!	! true if software interrupt from anyone ;
;


!	the interrupt cause routine
;

Internal simple procedure IntMak( integer intChan );
start!code
	move	1,intChan;	! channel with bits set;
	andi	1,'77;		! mask out newenb;
	movn	2,1;		! negate;
	movsi	1,'400000;	! set bit 0;
	rot	1,(2);		! rotate the right number of channels;
	tlo	1,'400000;	! set cause interrupt flag;
	calli	1,-'35;		! intact;
	 setom	!skip!;
end;


!	Interrupt routines
;

simple procedure ESC;    ESC!_ true;	! set ESC flag and return ;
simple procedure NTQ;    NTQ!_ true;	! set NTQ flag and return ;
simple procedure NIC;    NIC!_ true;	! set NIC flag and return ;

!	Port interrupt procedures
;

simple procedure Dummy;	begin end;

simple procedure ZAP( Integer Bits );
begin "ZAP"
    ZapTim_ GetTDT;
    ZAP!_ ZAP! lor Bits;
    CHR!_ CHR! lor Bits;
end "ZAP";

ForC ZapC_ 0 stepC 1 untilC E!JobMax
 doC {
    Simple Procedure ZAP}&"ZapC"&{;
    ZAP(1 lsh ZapC);
    }
 endc


simple procedure LOS;	GetInt( LOS!,LXROCL lor LXRICL );
simple procedure CHR;	GetInt( CHR!,LXRBRK );	! check for BRK and return ;

simple procedure ORG;
begin
    own integer Flag;
    GetInt( Flag_ 0,LXROBS );	! check for OBS and return ;
    ORG!_ ORG! lor Flag;
    CHR!_ CHR! lor Flag;
end;


!	Frame interrupt procedures
;

simple procedure ECF( Integer Bits );    ECF!_ ECF! lor Bits;
simple procedure LCF( Integer Bits );    LCF!_ LCF! lor Bits;


ForC FEXC_ 0 stepC 1 untilC E!JobMax
 doC {
    Simple Procedure ECF}&"FEXC"&{;    ECF(1 lsh FEXC);
    Simple Procedure LCF}&"FEXC"&{;    LCF(1 lsh FEXC);
    }
 endc

simple procedure FEX;    FEX!_ true;

simple procedure SIP;    SIP!_ true;
simple procedure SIC;    SIC!_ true;
simple procedure SIS;    SIS!_ true;
simple procedure SIA;    SIA!_ true;


!	Disable procedures
;

internal simple procedure EscDis;
begin "disable ESC"
    intMap( intass( !iaESC,0 ), Dummy, 0 );
    disable (newenb(int!ESC));	! <esc> ;
end "disable ESC";

internal simple procedure TimDis;
begin "disable TIM"
    intMap( intass( !iaTIM,0 ), Dummy, 0 );
    disable (newenb(int!TIM));	! timer ;
end "disable TIM";

simple procedure TIM;
begin "tim"
    TIM!_ true;			! set TIM flag and return ;
    TimDis;			! one time timer ;
end "tim";


internal simple procedure NTQDis;
begin "disable NTQ"
    intMap( intass( !iaNTQ,0 ), Dummy, 0 );
    disable (newenb(int!NTQ));	! NTQ ;
end "disable NTQ";

!	Port Disable procedures
;

internal simple procedure PrtDis( integer Port );
begin

    intMap( tinass( Port,!iaBRK,0 ), CHR, 0 );	! break characters ;
    intMap( tinass( Port,!iaLOS,0 ), LOS, 0 );	! lost characters ;
    intMap( tinass( Port,!iaORG,0 ) ,ORG, 0 );	! orange balls ;
    intMap( tinass( Port,!iaZAP,0 ), Dummy, 0 );

end;


!	Frame Disable procedures
;

internal simple procedure EcfDis( integer Frame );
begin
    intMap( finass( Frame,!iaECF,0 ), Dummy, 0 );
    disable( newenb( int!LCF+MyJob ) );
end;

internal simple procedure LcfDis( integer Frame );
begin
    intMap( finass( Frame,!iaLCF,0 ), Dummy, 0 );
    disable( newenb( int!LCF+MyJob ) );
end;

internal simple procedure FEXDis;
begin
    intMap( intass( !iaFEX,0 ), Dummy, 0 );
    disable( newenb( int!FEX ) );
end;

internal simple procedure SIPDis;
begin
    intMap( intass( !iaSIP,int!SIP ), Dummy, 0 );
    disable( newenb( int!SIP ) );
end;

internal simple procedure SICDis;
begin
    intMap( intass( !iaSIC,int!SIC ), Dummy, 0 );
    disable( newenb( int!SIC ) );
end;

internal simple procedure SISDis;
begin
    intMap( intass( !iaSIS,int!SIS ), Dummy, 0 );
    disable( newenb( int!SIS ) );
end;

internal simple procedure SIADis;
begin
    intMap( intass( !iaSIA,int!SIA ), Dummy, 0 );
    disable( newenb( int!SIA ) );
end;



!	Enable procedures
;

internal simple procedure TimEnb;
begin
    TIM!_ False;
    intmap (intass(!IATIM,int!TIM),TIM,0);
    enable (newenb(int!TIM));
end;


internal simple procedure SetTim( integer Time, Units( 1 ) );
begin "set time"
    TimEnb;		! just in case it wasn't ;
    calli( !Xwd( Units,Time ), calli!SETTIM );
end "set time";


internal simple procedure NtqEnb;
begin
    NTQ!_ False;
    intmap (intass(!IANTQ,int!NTQ),NTQ,0);
    enable (newenb(int!NTQ));
end;


internal simple procedure EscEnb;
begin
    ESC!_ False;
    intmap (tinass(-1,!IAESC,int!ESC),ESC,0);
    enable (newenb(int!ESC));
end;


!	Port Enable procedures
;

internal simple procedure PrtEnb( integer Port );
begin

    ClrFlg( CHR! );
    ClrFlg( ZAP! );
    ClrFlg( LOS! );
    ClrFlg( ORG! );

    Auxclv( Port,#LF ! lor !bit(27); ,!AXS8B );	! #lf is break;

    intMap( tinass(Port,!iaBRK,int!CHR),CHR,0 );
    enable( newenb( int!CHR ) );
    intMap( tinass(Port,!iaLOS,int!LOS),LOS,0 );
    enable( newenb( int!LOS ) );
    intMap( tinass(Port,!iaORG,int!ORG),ORG,0 );
    enable( newenb( int!ORG ) );

    Case MyJob
     of begin
	ForC ZapC_ 0 stepC 1 untilC E!JobMax	! circuit zaps ;
	 doC {
	    intMap( Tinass(Port,!iaZAP,int!Zap+ZapC), ZAP}&"ZapC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!ZAP + MyJob ) );

    Auxclr( Port, 0, !AXLDE );	! start it up by saying we're ready ;
    Auxclr( Port, 0, !AXSYB );	! then reflect the yellow ball ;
    intMak( int!ORG );		! and setup the interrupt ;

end;


!	Frame Enable procedures
;

internal simple procedure LcfEnb( integer Frame );
begin
    ClrFlg( LCF! );
    Case MyJob
     of begin
	ForC FEXC_ 0 stepC 1 untilC E!JobMax	! frame lost ;
	 doC {
	    intMap( finass(Frame,!iaLCF,int!LCF+FEXC), LCF}&"FEXC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!LCF + MyJob ) );
end;

internal simple procedure EcfEnb( integer Frame );
begin
    ClrFlg( ECF! );
    Case MyJob
     of begin
	ForC FEXC_ 0 stepC 1 untilC E!JobMax	! frame exits ;
	 doC {
	    intMap( finass(Frame,!iaECF,int!ECF+FEXC), ECF}&"FEXC"&{, 0 );
	    }
	 endc
      end;
    enable( newenb( int!ECF + MyJob ) );
end;

internal simple procedure FEXEnb;
begin
    FEX!_ false;
    intMap( intass( !iaFEX,int!FEX ), FEX, 0 );
    enable( newenb( int!FEX ) );
end;


!	Software interrupts
;

simple procedure SIPEnb;
begin
    SIP!_ false;
    intMap( intass( !iaSIP,int!SIP ), SIP, 0 );
    enable( newenb( int!SIP ) );
end;

internal simple procedure SICEnb;
begin
    SIC!_ false;
    intMap( intass( !iaSIC,int!SIC ), SIC, 0 );
    enable( newenb( int!SIC ) );
end;

internal simple procedure SISEnb;
begin
    SIS!_ false;
    intMap( intass( !iaSIS,int!SIS ), SIS, 0 );
    enable( newenb( int!SIS ) );
end;

internal simple procedure SIAEnb;
begin
    SIA!_ false;
    intMap( intass( !iaSIA,int!SIA ), SIA, 0 );
    enable( newenb( int!SIA ) );
end;



end "XEXINT" $
 