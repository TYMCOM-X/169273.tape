
entry
	GetRec, ModRec, ClsQue, OpnQue
,	Queue,  QueMsg, QueAct, InQue
;
Begin "JQUE"

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)UUOSYM.DEF" source!file;

require "(CARL)JQUEUE.DEF" source!file;

Define ErrCMS = 1;
Define ErrCMR = 2;

Define QQ(x)  = { memory[queue+(x)] };
Define QM(x)  = { memory[quemsg+(x)] };
Define QA(x)  = { memory[queact+(x)] };
Define QQS(j) = { QQ( Q!Status-1+(j) ) };
Define QQU(j) = { QQ( Q!Uid-1+(j) ) };


Internal Boolean InQue;
Internal Integer Queue, QueMsg, QueAct;

Own Boolean Eof, Err, MapLock, Lockey, AllOk;
Own Integer BasePage, Base, QueuePage, MsgPage, ActPage;
Own Integer Chan, MyPage, MyRecord, RecBase;
Own Integer NewPage, NewRecord, NewBase;
Own Integer Reading, Writing, Modify;
Own Integer Sequence;

Own Safe Integer Array File[ 1 : 6 ];
Own Safe Integer Array Hold[ 0 : E!Length-1 ];

Preload!with [E!Length]0;
Own Safe Integer Array Zeros[ 0 : E!Length-1 ];

Preload!with ['6000]0;
Own Safe Integer Array VirtualStorage[ 0 : '5777 ];

simple procedure SetupBasePage;
! ----------------------------------------------------------------------;
!									;
!	SetupBasePage	Initialize the page variables and setup for	;
!			normal queue-file manipulation.			;
!									;
! ----------------------------------------------------------------------;
begin

    BasePage_ (Location(VirtualStorage[0]) +'777) lsh -9;
    Base_ BasePage lsh 9;		! set base offsets into array;
    QueuePage_ BasePage + 1;		! use next page for status;
    Queue_ QueuePage lsh 9;		! easy access queue addess;
    MsgPage_ QueuePage + 1;		! use next page for messages;
    QueMsg_ MsgPage lsh 9;		! easy access msg address;
    ActPage_ MsgPage + 1;		! use next 2 pages for active;
    QueAct_ ActPage lsh 9;		! easy access active address;

    MapLock_ InQue_ 0;			! clear lock & status;
    Calli( !Xwd('2005,BasePage), -'66);	! unmap any previous pages;

    If ( Chan ) then Release( Chan );	! clear any file usage;
    Chan_ MyPage_ MyRecord_ RecBase_ 0;	! clear entry information;

end;
require SetupBasePage initialization;


Simple Procedure GetLock;
! ----------------------------------------------------------------------;
!									;
!	GetLock		Routine to lock the queue for single-access. 	;
!			If the lock is in use, the routine will wait	;
!			indefinately until the lock is free.		;
!									;
! ----------------------------------------------------------------------;
begin!code
    label Retry, GWait, GReady;

	Skipe	MapLock;		! do we already have it?;
	  Jrst	GReady;			! yes, count one more;
	Push	P,'1;			! don't clobber ac;
	Movei	'1,50;			! 5 * 10 * 200ms = 10 seconds ;
	Movem	'1,Lockey;		! The skeleton key ;
	Move	'1,Queue;		! get base address of map;
	Push	P,'3;			! make this a painless sleep;
Retry:	Sosl	'3,Q!Lock('1);		! get lock counter;
	  Jrst	GWait;			! nope, sleep it off;
	Camn	'3,[ -1 ];		! if we're lucky, we got it;
	 Skipa;				! got it!
	Sosg	Lockey;			! have we timed out waiting ;
	 Skipa;				! got it!
	  Jrst	GWait;			! nope, sleep it off;
	Setom	Q!Lock('1);		! force the lock ;
	Pop	P,'3;			! back to the real world;
	Pop	P,'1;			! restore ac;
	Jrst	GReady;			! set internal lock and return;

GWait:	Movei	'3,'200;		! get hibernation counter;
	Calli	'3,calli!hiber;		! sleep for a bit;
	  Jfcl;				! ignore error return;
	Skipn	Q!Lock('1);		! is there still a lock;
	  Jrst	Retry;			!   no -- try to get it now;
	 Jrst	GWait;			! well... back to sleep;

GReady:	Sos	MapLock;		! mark that we have the lock;
					! one or more times ;
end;


simple procedure UnLock;
! ----------------------------------------------------------------------;
!									;
!	UnLock		Routine to release the global lock on the	;
!			queue.  This action reenables multiple access.	;
!									;
! ----------------------------------------------------------------------;
begin!code
    Label UReady;

	Aosge	MapLock;		! release one level of locks;
	  Jrst	UReady;			! and simply return if more;
	Push	P,'1;			! don't clobber ac;
	Move	'1,Queue;		! get queue address offset;
	Setzm	Q!Lock('1);		! release the global lock;
	Pop	P,'1;			! restore ac;
	Setzm	MapLock;		! insure this is given away;
UReady:

end;


simple boolean procedure MapQueuePage;
! ----------------------------------------------------------------------;
!									;
!	MapQueuePage	Map the queue status page into memory at	;
!			BasePage after insuring the page is clear.	;
!									;
! ----------------------------------------------------------------------;
begin "Map Status Page"
    own safe integer array arg[0:1];

    Calli(!Xwd('2002,QueuePage),-'66);	! unmap any previous pages;

    Arg[ 0 ]_ !Xwd( '6002,QueuePage );	! <.prrw>b7 + 1b17,,queue;
    Arg[ 1 ]_ QueueMap;			! use specified file-page;

    Chnior( Chan, Arg[0], !chMFP );	! map file page;
    If not( !skip! )
     then begin "cannot get status"
	!Skip!_ ErrCMS;
	Return( false );
     end "cannot get status";

    Return( QQ( Q!Open )_ QQ( Q!Open ) + 1 );

end "Map Status Page";


simple boolean procedure MapRecord( Integer r );
! ----------------------------------------------------------------------;
!									;
!	MapRecord	Map a queue record into memory and set all	;
!			the associated offset variables: RecBase and	;
!			MyRecord.					;
!									;
! ----------------------------------------------------------------------;
begin "Map Record"
    own safe integer array arg[0:1];

    GetLock;					! lock queue;

    If not( r )					! no record specified;
     then If ( r_ QQ( Q!Hole ) )		! set any "known" hole;
	   then QQ( Q!Hole )_ 0;		!   if found, clear it;

    If not( r )					! no "known" specified;
     then If ( QQ( Q!High ) leq QQ( Q!Count ) )
	   then begin "no holes"
	      r_ QQ( Q!Count ) + 1;		! setup high record + 1;
	   end "no holes";

    If ( not( r ) and ( MyPage ) )		! still nothing shown;
     then for NewRecord_ 1 step 1		! look for an empty entry;
	   until E!RPPage			!  on the current page;
	   do begin "check my page"
	      If not( memory[RecBase_ Base + (NewRecord-1) * E!Length] )
	       then begin "got page"
		  UnLock;			! unlock the queue;
		  MyRecord_ ((MyPage-QueueData-1) * E!RPPage) + NewRecord;
		  Return( true );		! return to the caller;
	       end "got page";
	   end "check my page";

    If not( r )					! still nothing shown;
     then begin "Find Hole"			!  then find a hole;

	For NewPage_ QueueData step 1
	 until QueueData + ((QQ( Q!High )-1) div E!RPPage)
	 do begin "check each page"

	    Calli( !Xwd('2001,BasePage), -'66);	! unmap any previous page;
	    Arg[ 0 ]_ !Xwd( '6001, BasePage );	! <.prrw>b7 + 1b17,,base;
	    Arg[ 1 ]_ MyPage_ NewPage;		! setup new file page;
	    Chnior( Chan, Arg[0], !chMFP );	! map file page;
	    If not( !skip! )			!  oops...later;
	     then begin "cannot map record"
		UnLock;				! unlock the queue;
		MyPage_ MyRecord_ RecBase_ 0;	! clear current data;
		!Skip!_ ErrCMR;			! cannot map record;
		Return( false );		! error return;
	     end "cannot map record";

	    For NewRecord_ 1 step 1		! look for an empty entry;
	       until E!RPPage			!  on the current page;
	       do begin "check this page"
		  If not( memory[RecBase_ Base + (NewRecord-1) * E!Length] )
		   then begin "got page"
		      UnLock;			! unlock the queue;
		      MyRecord_ ((MyPage-QueueData-1) * E!RPPage) + NewRecord;
		      Return( true );
		   end "got page";
	       end "check this page";

	   end "check each page";
     end "Find Hole";

    NewPage_ QueueData + ( (r-1) div E!RPPage );
    If ( MyPage neq NewPage )
     then begin "map new page"

	Calli( !Xwd('2001, BasePage), -'66);	! unmap any previous page;
	Arg[ 0 ]_ !Xwd( '6001, BasePage );	! <.prrw>b7 + 1b17,,base;
	Arg[ 1 ]_ MyPage_ NewPage;		! setup new file page;
	Chnior( Chan, Arg[0], !chMFP );		! map file page;
	If not( !skip! )			!  oops...later;
	 then begin "cannot map record"

	    Chniov( Chan, MyPage, !chCFP );	! create page in file;
	    If ( !skip! )
	     then begin "validate and map"
		Chnior( Chan, 0, !chVRB );	! validate rib;
		Chnior( Chan, Arg[0], !chMFP );	! map file page;
	     end "validate and map";

	    If not( !skip! )
	     then begin "cannot map page"
		UnLock;				! unlock the queue;
		MyRecord_ MyPage_ RecBase_ 0;	! clear data fields;
		!skip!_ ErrCMR;			! error flag;
		Return( false );
	     end "cannot map page";

	 end "cannot map record";

     end "map new page";

    UnLock;					! unlock the queue;
    MyRecord_ r;				! store record number;
    RecBase_ Base + ( ( (r-1) * E!Length ) land '777 );

    Return( true );

end;


simple boolean procedure ArrCMP(reference integer LOC1, LOC2; integer Count);
! ----------------------------------------------------------------------;
!									;
!	ArrCMP		Compare the contents of two arrays beginning	;
!			at LOC1 for array 1 and LOC2 for array 2 for	;
!			a total of COUNT words.  Return false [0] if	;
!			any of the compared words do not match.		;
!			Return true [-1] otherwise.			;
!									;
! ----------------------------------------------------------------------;
start!code "ARRCMP"
    Define C='0, T1='1, CH1='2, CH2='3, P='17;
    Label Loop, OK, NoGood;

	SETZ	T1,;			! assume .false. at first ;
	MOVE	C,-1(P);		! get the count ;
	JUMPE	C,OK;			! zero count? must all match ;
	HRRI	CH1,'444400;		! (point 36,0,-1) ;
	HRLM	CH1,-3(P);		! build pointer to LOC1 ;
	HRLM	CH1,-2(P);		! build pointer to LOC2 ;
Loop:	ILDB	CH1,-3(P);		! get item to compare ;
	ILDB	CH2,-2(P);		! get item to compare ;
	CAME	CH1,CH2;		! match ? ;
	  JRST	NoGood;			! No... return .false. ;
	SOJG	C,Loop;			! Loop till out of words ;
OK:	SETO	T1,;			! Set to .true. ;
NoGood:

end "ARRCMP";


Simple procedure Wrap;
! ----------------------------------------------------------------------;
!									;
!	Wrap		Routine to resequence the queue and return to	;
!			NextSequence with the next sequence number.	;
!									;
! ----------------------------------------------------------------------;
Return;

Simple integer procedure NextSequence;
! ----------------------------------------------------------------------;
!									;
!	NextSequence	Routine to generate the next logical sequence	;
!			number for the queue.  The values range from	;
!			1 to 131071  (or '1 to '377777).		;
!									;
! ----------------------------------------------------------------------;
begin!code
	Label NoWrap;

	Pushj	P,GetLock;		! Lock the queue;
	Push	P,'2;			! Save register;
	Move	'1,Queue;		! Setup status page offset;
	Aos	'2,Q!Next('1);		! Increment sequence number;
	Trnn	'2,'400000;		! Wrap around?;
	 Jrst	NoWrap;			! Nope, all is ok;
	Setzm	Q!Next('1);		! Yep, reset to 0;
	Pushj	P,Wrap;			!  and do all the work;
	Aos	'2,Q!Next('1);		! Now get new sequence number;
NoWrap:	Pushj	P,UnLock;		! all done;
	Exch	'1,'2;			! put result in ac 1;
	Pop	P,'2;			! restore register;

end;


Internal simple procedure ClsQue;
! ----------------------------------------------------------------------;
!									;
!	ClsQue		Routine to close out the queue.  Unmap data	;
!			pages and close the files.			;
!									;
! ----------------------------------------------------------------------;
begin

    If ( InQue )			! if queue is open ;
     then begin "close queue"		!  we need to clear these ;

	QQ( Q!Open )_ ( 0 min ( QQ( Q!Open )-1 ) );

	Calli( !Xwd('2001,BasePage), calli!VCLEAR );	! record data ;
	Calli( !Xwd('2002,QueuePage), calli!VCLEAR );	! queue & msg ;
	Calli( !Xwd('2002,ActPage), calli!VCLEAR );	! active data ;
	Close( Chan );			! close the file;
	Release( Chan );		!  and release the channel;

     end "close queue";

    Chan_ InQue_ 0;			! reset all variables;
    MyPage_ MyRecord_ RecBase_ 0;

end;


simple boolean procedure OpenQueue;
! ----------------------------------------------------------------------;
!									;
!	OpenQueue	Routine to read the queue status page into	;
!			memory and allow the caller to access the	;
!			individual records in the queue.		;
!									;
! ----------------------------------------------------------------------;
begin

    Open(Chan_getchan,"DSK",'17,0,0,0,0,Eof_-1);
    Lookup( Chan, QueueFile, Eof_-1);

    If Eof then begin

	FileInfo( FILE );
	Chnior( Chan, FILE[1], !chENT);		! create file;

	Eof_ If not( !SKIP! )			! if skip, all is good;
	      then !rh( FILE[2] ) else 0;

	If not( EOF )				! Otherwise -- we must stop;
	 then begin "no errors"

	    Chnior( Chan, QueueMap,   !chCFP );	! Create page  [1]   Map;
	    Chnior( Chan, QueueMsg,   !chCFP );	! Create page  [2]   Msg;
	    Chnior( Chan, QueueAct+1, !chCFP );	! Create pages [3,4] Act;
	    If ( InQue_ MapQueuePage )
	     then begin "init queue"
		QQ( Q!MSlot )_ E!JobMax;	! number of slots to use ;
		QQ( Q!Slots )_ E!JobMax;	! number of slots available ;
		QQ( Q!New )_ -1;		! indicate something changed ;
		QQ( Q!LogLim )_ E!DefLogLim;	! no page limit, 60 minutes ;
		QQ( Q!Action )_ E!DefAction;	! action parameters ;
		ClsQue;				! close and reset ;
		Open(Chan_getchan,"DSK",'17,0,0,0,0,Eof_-1);
	     end "init queue"
	     else begin
		Release( Chan );		! *** error, free channel ;
		return( InQue_ false );		! *** and return false ;
	     end;
	    Lookup( Chan, QueueFile, Eof_-1);	! then re-open file;

	end "no errors";

    end;

    If not( EOF )
     then begin "continue entry code"

	FileInfo( FILE );			! read file data;
	Chnior( Chan, FILE[1], !chMEN);		! multiple enter;
	Eof_ If not( !SKIP! )			! if skip, all is good;
	      then !rh(FILE[2]) else 0;

     end "continue entry code"
     else begin "must not continue"

!	Print( "File error ",Cvos(EOF)," on ",QueueFile,crlf);
	Return( InQue_ false );

     end "must not continue";

    Return( InQue_ MapQueuePage );

end;


internal simple boolean procedure OpnQue;
! ----------------------------------------------------------------------;
!									;
!	OpnQue		Open the queue and map the status and active	;
!			pages into memory for queue manipulation.	;
!									;
! ----------------------------------------------------------------------;
begin "OpnQue"
    own safe integer array arg[0:1];

    If not( InQue )			! if initial entry;
     then If not( OpenQueue )		!  then open things up;
	   then return( false );	!  oops! queue error;

! *** Should we check here for QM license?
;

    Calli(!Xwd('2002,ActPage),-'66);	! unmap any previous pages;
    Arg[ 0 ]_ !Xwd( '6002,ActPage );	! <.prrw>b7 + 1b17,,active;
    Arg[ 1 ]_ QueueAct;			! use specified file-page;

    Chnior( Chan, Arg[0], !chMFP );	! map file page;
    If not( !skip! )
     then begin "cannot open ACT area"
	ClsQue;				! close queue first ;
	Return( false );		! then report error ;
     end "cannot open ACT area";

end "OpnQue";


simple boolean procedure FindRecord( integer A );
! ----------------------------------------------------------------------;
!									;
!	FindRecord	Routine to scan through the queue for the	;
!			specified record.  Return true if found,	;
!			otherwise return false and set !skip! to	;
!			the proper error code.				;
!									;
! ----------------------------------------------------------------------;
begin "Find Record"

    For NewRecord_ 1 step 1 until QQ( Q!High  )
     do begin "check record"

	AllOk_ MapRecord( NewRecord );	! get a record ;
	If ( ( AllOk )  and
	     ( memory[ RecBase + E!Runtime ] ) and
	     ( !rh( memory[ RecBase + E!Status ] ) = 
	       !rh( memory[ A + E!Status ] ) )
	   )
	 then return( true );

     end "check record";

    Return( false );

end "Find Record";


simple boolean procedure NextRecord( integer A );
! ----------------------------------------------------------------------;
!									;
!	NextRecord	Routine to scan through the queue for the next	;
!			record which matches the specified criteria.	;
!			If no fields are specified, the next record is	;
!			returned.  Match fields include: AUN, USER,	;
!			PPN, PROJECT and JOBNAME (control file name).	;
!			If a record exists return true, otherwise set	; 
!			!skip! to the proper code and return false.	;
!									;
! ----------------------------------------------------------------------;
begin "Next Record"

Define Chk(x,op) = {
    If ( memory[A+(x)] )
     then If (memory[A+(x)] op memory[RecBase+(x)])
	   then continue "check record"
};

    For NewRecord_ MyRecord+1 step 1 until QQ( Q!High )
     do begin "check record"

	AllOk_ MapRecord( NewRecord );	! get a record ;
	If ( AllOk  and  memory[ RecBase + E!Runtime ] )
	 then begin "good record"

	    Chk( E!PPN, neq );
	    Chk( E!AUN, neq );
	    Chk( E!Username, neq );
	    Chk( E!Username+1, neq );
	    Chk( E!Project, neq );
	    Chk( E!Project+1, neq );
	    Chk( E!Project+2, neq );
	    Chk( E!CmdFile+F!Name, neq );
	    Chk( E!Runtime, [<] );

	    Return( true );

	 end "good record";

     end "check record";

    Return( false );

end "Next Record";


simple procedure DeleteRecord;
! ----------------------------------------------------------------------;
!									;
!	DeleteRecord	Routine to clear the current record entry	;
!			and reset the appropriate queue data fields	;
!			concerning highest records and counts.		;
!									;
! ----------------------------------------------------------------------;
begin "delete record"

    ArrBlt( memory[RecBase], Zeros[0], E!Length );
    QQ( Q!Count )_ QQ( Q!Count ) - 1;

    If ( MyRecord geq QQ( Q!High ) )
     then begin "decrement high"

	while ( ( RecBase geq Base ) and not( memory[Recbase] ) )
	 do begin "backup on current page"

	    RecBase_ RecBase - E!Length;
	    MyRecord_ QQ( Q!High )_ QQ( Q!High ) - 1;

	    If ( RecBase < Base )
	     then begin "backup a page"

		Chnior( Chan, MyPage,         !chDFP );	! delete page;
		Chniov( Chan, (MyPage-1)*512, !chFTR );	! truncate file;
		Chnior( Chan, 0,              !chVRB );	! validate RIB;

		If not( MapRecord( MyRecord ) )
		 then RecBMyPage_ 0;

	     end "backup a page";		
	 end "backup on current page";

	If ( QQ( Q!Hole ) geq QQ( Q!High ) )
	 then QQ( Q!Hole )_ 0;

     end "decrement high"
     else begin "check hole"

	If ( MyRecord < NewRecord_ QQ( Q!Hole ) )
	   or not( NewRecord )
	 then QQ( Q!Hole )_ MyRecord;

     end "check hole";

end "delete record";



internal simple boolean procedure GetRec( integer A );
! ----------------------------------------------------------------------;
!									;
!	GetREC		Routine to scan the job queue and return one	;
!			of the following:				;
!			  (a) the first record of the requested type	;
!			  (b) the next record of the requested type	;
!			  (c) a specific record				;
!									;
!			The key to which action is performed for the	;
!			is the sequence number field.  The contents	;
!			of the username, aun, ppn, jobname, project	;
!			and runtime fields affect which records are	;
!			to be considered.				;
!									;
! ----------------------------------------------------------------------;
begin "GETREC"

    If not( InQue )			! if initial entry;
     then If not( OpenQueue )		!  then open things up;
	   then return( false );	!  oops! queue error;

    Sequence_ Ldb( PSeq( memory[A+E!Status] ) );
    If ( Sequence land '400000 )	! if seq negative - reset file pointers;
     then MyPage_ MyRecord_ RecBase_	! clear record field information;
		    Sequence_ 0;	!   and sequence data;

!    GetLock;				! lock the queue during fetch;
    If ( Sequence )			! was a specific record requested;
     then AllOk_ FindRecord( A )	! YES, see if the record is there;
     else AllOk_ NextRecord( A );	! No,  are there any more records;

    If ( AllOk )			! if ok, copy the entry;
     then ArrBlt( memory[A], memory[RecBase], E!Length );
!    UnLock;				! and release the queue-lock;

    Return( AllOk );

end "GETREC";


internal simple boolean procedure ModRec( integer A, S );
! ----------------------------------------------------------------------;
!									;
!	ModRec		Routine to modify an existing record in the	;
!			queue or insert a new record into the queue.	;
!			The determination is made by examining the	;
!			value of the sequence number: if zero it is	;
!			a new insert, otherwise it is a modification.	;
!			On modificiation, if the next runtime is zero	;
!			the record is deleted from the queue.		;
!									;
! ----------------------------------------------------------------------;
begin "MODREC"

    If not( InQue )			! if initial entry;
     then If not( OpenQueue )		!  then open things up;
	   then return( false );	!  oops! queue error;

    Sequence_ !rh(memory[A+E!Status]);	! read the sequence field;

    If ( Sequence )			! was a specific record requested;
     then begin "specific record"

	GetLock;			! Lock the queue first;
	AllOk_ FindRecord( S );		! YES, see if the record is there;

	If ( AllOk )			! Ok, is it the same record;
	 then AllOk_ ArrCMP( memory[S], memory[RecBase], E!Length );

	If ( AllOk )			! same, then process it;
	 then If (memory[A+E!Runtime])	! if Runtime non-zero modify it;
	       then ArrBlt( memory[RecBase], memory[A], E!Length )
	       else DeleteRecord;	!  else delete it;
	UnLock;				! unlock the queue;

     end "specific record"
     else begin "insert record"

	Sequence_ NextSequence;
	Dpb( Sequence, PSeq( memory[A+E!Status] ) );

	GetLock;
	if ( AllOk_ MapRecord( QQ( Q!Hole ) ) )
	 then begin "create entry"
	    ArrBlt( memory[RecBase], memory[A], E!Length );
	    QQ( Q!Count )_ QQ( Q!Count ) + 1;
	    If ( QQ( Q!High ) < MyRecord )
	     then QQ( Q!High )_ MyRecord;
	    QQ( Q!Hole )_ 0;
	 end "create entry";
	UnLock;

     end "insert record";

    if ( AllOk )
     then QQ( Q!New )_ -1;		! indicate something changed ;

    return( AllOk );

end "MODREC";

end $
   v 
