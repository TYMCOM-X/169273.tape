begin	"XEXEC"

require "XEXEC.INF" source!file;

Define XEXEC!VERSION = (XEXEC!!VER lsh 24) lor XEXEC!!EDIT;
require XEXEC!VERSION version;

require "

XEXEC %"&CVOS(XEXEC!VERSION lsh -24)&"("&CVOS(XEXEC!VERSION land '777777)&")"&
     " - TYMCOM-X Periodic Processing Scheduler

Assembly: Load @XEXEC.CMD


Sources:  XEXEC.SAI                 Main program source file
          XEXEC.INF                 Main release information file
          XEXEC.PAR                 Main parameter file
          XEXEC.REQ                 Global declaration file
          SAIL.DEF                  General macro definition file
          UUOSYM.DEF                System call definition file
          JQUEUE.DEF                Job queue definition file

Library:  JQUE.REQ   [SAI] [REL]    Job queue manipulation package
          NEXTIM.REQ [SAI] [REL]    Job reschedule routine
          VMFILE.REQ [SAI] [REL]    VM input file mapping pacakge
          DAYTIM.REQ [SAI] [REL]    Date time conversion package
          ESCTRP.REQ [SAI] [REL]    Escape trapping package
          FRMTRP.REQ [SAI] [REL]    Frame trapping package

License:  ALL license bits!!!
          WC RC SY OP GD TD ST JL AC XC HF RA WA
          WC       - absolute frame access rights
          SY       - reading info about jobs
          HF QM JL - writing system queue and log files

" message;

require "(SAILIB)SAIL.DEF" source!file;
require "(CARL)XEXEC.PAR"  source!file;
require "(MPL)UUOSYM.DEF"  source!file;
require "(CARL)JQUEUE.DEF" source!file;
require "(CARL)JQUE.REQ"   source!file;
require "(CARL)NEXTIM.REQ" source!file;
require "(CARL)VMFILE.REQ" source!file;
require "(CARL)DAYTIM.REQ" source!file;
require "(CARL)ESCTRP.REQ" source!file;
require "(CARL)FRMTRP.REQ" source!file;


!	Definitions
;

Define JobLog = { "(CARL)JQUEUE.LOG" };
Define DebLog = { "(CARL)XEXDEB.LOG" };

Define
	Sys$Run   =  0		! normal operation ;
,	Sys$Reset =  1		! system reset ;
,	Sys$Abort =  2		! error indication ;
;

Define !gtRDV = '135, !gtRDI = '136, !gtRFN = '137;
Define Gettab(x,y) = { calli( !xwd( (x), (y) ), calli!GETTAB ) };

Define SetFlg(x,y) = { x_ x lor (1 lsh y) };		! set bit lsh x ;
Define ClrFlg(x,y) = { x_ x land lnot(1 lsh y) };	! clr bit lsh x ;

Define SetStp(x,y,z) = { begin Dpb(x,PStat(z)); Dpb(y,PProc(z)); end };
Define SetSpp(x,y,z) = { begin Dpb(x,PPStat(z)); Dpb(y,PPProc(z)); end };

!	Variable definitions for outer block;

Internal integer
	MyJob			! current job slot;
;

boolean
	NeedEscape		! flag whether waiting for escape;
,	NeedReset		! flag whether this is a reset ;
,	HaveProcessor		! flag whether we have a processor ;
;

integer 
	Status			! job status code from record ;
,	JPri			! schedule priority level -1,0,1-9,10-15;
,	Uptime			! current system uptime ;
,	SlotAdr			! address of record slot in memory ;
,	JobType			! type of job, 2 = DET + RUN = RJob ;
,	Seq			! current sequence number index;
;

string
	S			! temporary string variable;
;

!	Record and array definitions
;

record!class job( Integer Run, Seq, Sts, Opt; r!p (job) Nxt );
r!p (job) jobs, tjob, njob, ljob;

Own safe r!p (job) array JobPri[ JP$Run : JP$Max ]; ! job queue by priority ;

Preset!with [E!Length] 0;
Own safe integer array Del[ 0 : E!Length-1 ];	! For Delete ;
Preset!with [E!Length] 0;
Own safe integer array Rec[ 0 : E!Length-1 ];	! The Record ;

!	Support routines
;

Simple Boolean Procedure ClearFrame( Integer This );
begin "clear frame"

    if ( QRF( This ) )			! anything here? ;
     then begin "frame must die"
	QRF( This )_ 0;			! clear frame position ;
     end "frame must die";

    return( false );			! give 'em what they came for ;

end "clear frame";




Simple procedure KillJob( Integer J );
begin "Kill Job"

    if not( calli( !Xwd(1,J land '777), calli!EVICT ) )
     then calli( !Xwd(3,J land '777), calli!HANG );

end "Kill Job";


Simple procedure Talk( integer j; string s );
! ----------------------------------------------------------------------;
!									;
!	Talk( Job, Text )						;
!		Output the specified Text to the port connect to Job	;
!		by executing the SETUUO call to talk to a frame.	;
!									;
! ----------------------------------------------------------------------;
begin "Talk"
    Define T1=1, T2=2, !stTLK = '10;
    Label Talk, TalkOk;

    begin!code				! simulate OUTSTR to CTY ;
	Move	T2,S;			! string byte pointer ;
	Move	T1,J;			!  to job J (0 = CTY ) ;
Talk:	Hrri	0,T1;			! pointer to block ;
	Hrli	0,!stTLK;		! function to talk ;
	uuo!SETUUO;			! doit ;
	  caia;				! error - skip ;
	 jrst	TalkOk;			! ok, so leave ;
	Hrrzi	0,200;			! 200 ms wait ;
	uuo!HIBER;			! then setup to ;
	  jfcl;				!  try it all ;
	jrst	Talk;			!  again ;
TalkOk:
    end;

end "Talk";


Simple string procedure TimeStamp;
return( TymDay( GetTDT ) & " GMT " );



Simple boolean procedure CTYLog( String Text );
! ----------------------------------------------------------------------;
!									;
!	CTYLog		Routine to print a string on the system CTY	;
!			stamped with the current GMT date and time.	;
!									;
! ----------------------------------------------------------------------;
begin

    Talk( 0, Crlf & TimeStamp & Text & Crlf );
    return( false );

end;


Simple procedure EXIT( String Msg(Null) );
! ----------------------------------------------------------------------;
!									;
!	Exit	Routine to print a message to the CTY and then exit	;
!		checking the Logout enable flag.			;
!									;
! ----------------------------------------------------------------------;
begin
    own boolean Logout;

    ExcDis;				! disable any interrrupts ;
    CtyLog( "XEXEC: "& Msg & " -- Aborting! " );

    if ( InQue land que$Map )		! check for logoff flag ;
     then Logout_ ( QQ(Feature) land QFet$Logout ) or NTQ!
     else Logout_ NTQ!;

    calli(querun lsh -9, calli!CLBLEV);	! leave RUN page club ;
    ClsQue;

    if ( Logout )			! if debugging on ;
     then calli( 0, calli!LOGOFF )	!  and maybe logout ;
     else start!code uuo!EXIT end;	!  else just exit ;

end;


Simple procedure LogInfo( String Text );
! ----------------------------------------------------------------------;
!									;
!	LogInfo		Routine to make an entry to the appropriate	;
!			job queue log file.				;
!									;
! ----------------------------------------------------------------------;
begin "Log Job Info"
    Integer Chan;

    Chan_ VMFile( JobLog, VM$Append lor VM$Update );	! $Update ;

    if ( Chan leq 0 )			! all ok? ;
     then CTYLog( "XEXEC: cannot log XEXEC job, open failure" )
     else begin "setup file"

	VMText(Chan, TimeStamp & Text);	! write log message ;
	VMFree( Chan );			! release the channel ;

     end "setup file";

end "Log Job Info";


Simple procedure Logit( Integer Bits; String Text );
! ----------------------------------------------------------------------;
!									;
!	LogIt		Routine to make an entry to the appropriate	;
!			job queue log file.	*Debug*			;
!									;
! ----------------------------------------------------------------------;
begin "Log Debug Info"
    Own Integer Chan, Ok;

    if not( InQue land que$Map )		! non-zero must be open ;
     then return;
    if not( QQ(Feature) land QFet$Logit )	! logging enabled? ;
     then return;
    if not( QQ(Feature) land Bits )		! correct bits enabled? ;
     then return;

    if ( Chan leq 0 )
     then begin "open logging"			! open in $Update? ;

	Chan_ VMFile( DebLog, VM$Append lor VM$Update );

	if ( Chan leq 0 )			! all ok? ;
	 then CTYLog( "*DEBLOG* failure "&cvos(bits) );

     end "open logging";

    if ( Chan > 0 )
     then VMText( Chan, Text );			! write log message ;

end "Log Debug Info";


Simple procedure RunSelf;
! ----------------------------------------------------------------------;
!									;
!	RunSelf		Routine to determine run a new copy of the	;
!			current program from the same run directory.	;
!			GFD'd directory is used for EXECUTE programs.	;
!									;
! ----------------------------------------------------------------------;
begin "run self"
    Own Safe Integer Array RunBlock[0:5];

    if ( InQue land que$Map )		! is the queue open ;
     then begin "finish up"
	QQ( Feature )_ QQ( Feature ) land lnot QFET$RSched;
	ClsQue;				! close the queue ;
     end "finish up";

    CtyLog( "Restarting by Feature-Test" );

    RunBlock[0]_ Gettab( -1, !gtRDV );
    RunBlock[1]_ Gettab( -1, !gtRFN );
    RunBlock[4]_ Gettab( -1, !gtRDI );
    Calli( location(RunBlock[0]), calli!RUN );
    if not( !Skip! )
     then Exit( "Cannot run self" );

end "run self";

!	Initialization routines;

simple procedure LicenseCheck;
! ----------------------------------------------------------------------;
!									;
!	LicenseCheck	Routine to check the license set on the frame	;
!			and the program to determine if it is really	;
!			sufficient to get any work accomplished.	;
!									;
! ----------------------------------------------------------------------;
begin
! '777617 ;
    If ( Gettab( -1, !GTLIC )
  Ifcr PRELIMINARY thenc
	land ( LC!SY lor LC!JL lor LC!WC )
	 neq ( LC!SY lor LC!JL lor LC!WC ) )
  elsec
	land ( LC!SY lor LC!JL lor LC!WC lor LC!HF )
	 neq ( LC!SY lor LC!JL lor LC!WC lor LC!HF ) )
  endc
     then EXIT( "Insufficient License - SY JL WC HF -" );
end;
require LicenseCheck initialization;


simple string procedure CvNAME( integer AUN );
! ----------------------------------------------------------------------;
!									;
!	CvName		Routine to look at the username in the UFD	;
!			for a particular PPN and return a string.	;
!									;
! ----------------------------------------------------------------------;
begin
    integer NotEof;
    Preset!with 0, cvSIX( "DSK   " ), '17;
    Own safe integer array Dev[ 0 : 2 ];
    Own safe integer array Look[ 0 : !RBUNM+1 ];

    Look[ !RBCNT ]_ !RBUNM+1;		! PPN -> User;
    Look[ !RBPPN ]_ !Xwd( 1,1 );	! (UFD)  ;
    Look[ !RBNAM ]_ AUN;		! [user] ;
    Look[ !RBEXT ]_ cvSIX("UFD   ");	! .UFD   ;

    Chnior( 0, Dev[ 0 ], !chOPN );
    If ( NotEof_ !skip! )
     then begin
	Chnior( 0, Look[!RBCNT], !chLK );
	NotEof_ !skip!;
	Chnior( 0, memory[0], !chCLS );
     end;

    If ( NotEof )
     then return( Cv6str(Look[!RBUNM])&Cv6str(Look[!RBUNM+1]) )
     else return( Cvos(!lh(aun))&","&Cvos(!rh(aun)) );
end;


simple boolean procedure Create!Child;
! ----------------------------------------------------------------------;
!									;
!	Create!Child	Routine to create a child frame from the	;
!			information found in the REC array.		;
!									;
! ----------------------------------------------------------------------;
begin "birth procedure"
    Own Integer frame!index;

    Redefine CF!LIC = !bit(16);		! until UUOSYM.DEF is right;
    Redefine CF!LOG = 0;		! really !bit(17);

    Rec[ E!Runtime ]_ CF!LIC lor CF!LOG lor (E!License - E!Runtime - 1);

    start!code				! take a trip to the hospital ;
	Setom	!skip!;			! skip return;
	Hrli	1,!foCFM;		! function: create frame;
	uuo!FRMOP 1,Rec[E!Runtime];	! attempt to bear a child;
	  Setzm	!skip!;			!   unbearable!;
	Skipn	!skip!;			! successful birth? ;
	  Exch	1,!skip!;		! no - swap error & skip ;
    end;

end "birth procedure";


Simple boolean procedure FrontEnd;
begin "FrontEnd"
    integer C, Chan, RunFlag;
    string MyName, MySelf;

    dpb( Seq, PPSeq( Rec ) );			! store sequence ;
    if not( Seq_ GetRec( Rec[E!Runtime] ) )	! get record from queue ;
     then return( false );			! not there? oops! ;

  Ifcr PRELIMINARY thenc
    Print( if LPPProc( Rec ) then "ReCreating" else "Creating" );
    Print( "(", Cv6str(Rec[E!LogFile+F!User]),Cv6str(Rec[E!LogFile+F!User+1]),")",
	    Cv6str(Rec[E!LogFile+F!Name]),".",Cv6str(Rec[E!LogFile+F!Ext])[1 for 3],
	" = (",Cv6str(Rec[E!CmdFile+F!User]),Cv6str(Rec[E!CmdFile+F!User+1]),")",
	    Cv6str(Rec[E!CmdFile+F!Name]),".",Cv6str(Rec[E!CmdFile+F!Ext])[1 for 3],
	crlf );
  endc

    MyName_ cv6str(Rec[ E!Username ]) & cv6str(Rec[ E!Username+1 ]);

    If ( Rec[ E!AUN ] = Rec[ E!PPN ] )		! if same ppn/aun ;
     then MySelf_ MyName			!  then copy name ;
     else MySelf_ cvName(Rec[ E!PPN ]);		!  else generate. ;

!	setup input file 
;
    If ( RunFlag_ LPPRunF(Rec) )		! if RUN program  ;
      and ( LPPDetF(Rec) )			!    and DETACH   ;
     then begin "run detached job"		!  then do it.    ;

	If (QRF(MyJob)_ Create!child )		! create a child frame;
	 then QRU(MyJob)_ Gettab( QRF(MyJob), !gtUID )
	 else begin "birth defect"
	    If ( !rh( QRF(MyJob) ) < 2 )	! frame error code ;
	     then begin "labor pains"		! capacity error   ;
		SetSpp( JS$Sched, PSS$Frame, Rec );
		return( false );		! so, try later... ;
	     end "labor pains"
	     else begin "still birth"		! other error code ;
		SetSpp( JS$Abort, PSA$Frame, Rec );
		return( false );		! abort & give up! ;
	     end "still birth";
	 end "birth defect";

	! **** Do RUN uuo on cmd-file-name here **** ;
	! **** wait for it to actually run/halt **** ;
	! **** then put mark it in-progress,etc **** ;

	SetSpp( JS$Proc, PSP$Run, Rec );	! Processing, Run ;

     end "run detached job"
     else begin "schedule job for processing"

	SetSpp( JS$Sched, PSS$Wait, Rec );	! Scheduled, Wait ;

     end "schedule job for processing";

	ArrBlt( memory[querun+(MyJob-1)*E!Length], Rec[0], E!Length );
	QRS( MyJob )_ Rec[ E!Status ];		! copy status ;

!	LOG attempt to schedule job
;

    LogInfo( "Scheduling job "& 
	(if LPPLog( Rec )
	 then Cv6str( Rec[E!LogFile+F!Device] ) & ":" &
	      "("& Cv6str( Rec[ E!LogFile + F!User ] ) &
	      Cv6str( Rec[ E!LogFile + F!User+1 ] ) & ")" &
	      Cv6str( Rec[ E!LogFile + F!Name ] ) &
	      (if ( Rec[E!LogFile + F!Ext] )
	       then "."&cv6str( Rec[ E!LogFile + F!Ext ] )[1 for 3]
	       else "") &"="
	 else "") &
	(if ( RunFlag )
	 then " Running "  else "") &
	Cv6str( Rec[E!CmdFile+F!Device] ) & ":" & 
	"("& Cv6str( Rec[ E!CmdFile + F!User ] ) &
	Cv6str( Rec[ E!CmdFile + F!User+1 ] ) & ")" &
	Cv6str( Rec[ E!CmdFile + F!Name ] ) &
	(if ( Rec[ E!CmdFile + F!Ext ] )
	 then "."&cv6str( Rec[ E!CmdFile + F!Ext ] )[1 for 3]
	 else "")
	& Crlf );

end "FrontEnd";


Simple Boolean Procedure CommandMode;
return( Gettab( QRF(MyJob), !gtSTS ) geq 0 );

Simple Procedure FrmXct(Integer Frame; Reference Integer Arg; Integer Funct);
begin!code
    Label More,Less;
	Hrrz	1,Frame;		! Get frame number from array ;
	Hrl	1,Funct;		! Get function ;
	Movei	2,Arg;			! Get argument address ;
	Setom	!skip!;			! Set skip return ;
	uuo!FRMOP  1,(2);		! Do the work ;
	  Setzm	!skip!;			! OOPS! too bad ;
end;


procedure ESCAPE;
begin "Escape"

    if ( CommandMode )				! if command mode ;
     then ClrFlg( NeedEscape, MyJob )		!  clear escape   ;
     else begin "halt frame"
	DEFINE !FOSTP = '41;
	FrmXct( QRF(MyJob), 0, !foSTP );	! stop the frame  ;
	SetFlg( NeedEscape, MyJob );		!  set NeedEscape ;
     end "halt frame";

end "Escape";


Simple Procedure StartProcessor;
begin "startup a processor"
    preset!with 5,cvSIX("SYS"),0,cvSIX("EXECX"),0,0;
    own safe integer array RunBlock[0:5];
    Own integer Check, Err;

    if ( HaveProcessor )		! if we're already here ;
     then return;			!  then just go back ;

    Check_ queAct lsh -9;		! ACT page number ;
    calli( Check, calli!CLBADD );	! join ACT club ;
    Err_ calli( location(Check), calli!CLBINI );
    if not( !Skip! )			! cannot get interlock ;
     then begin "no interlock"
	if ( Err = CBAIL# )		! interlock busy ;
	 then begin "have processor"
	    CtyLog("EXECX running on job "&cvs(QQ(Process+Q$Job) land '777));
	    HaveProcessor_ true;
	 end "have processor"
	 else CtyLog( "EXECX interlock problem ("&cvos(Err)&")" );
	return;				! we are done for the moment ;
     end "no interlock";

    ArrClr( Rec );				! setup empty slate ;
    Rec[ E!PPN ]_      Gettab( -1,!gtPPN );	! gfd'd ppn ;
    Rec[ E!Privs ]_    Gettab( -1,!gtPRV );	! privileges ;
    Rec[ E!AUN ]_      Gettab( -1,!gtAUN );	! login ppn ;
    Rec[ E!Username ]_ Gettab( -1,!gtUNM );	! username - part 1 ;
    Rec[E!Username+1]_ Gettab( -1,!gtUN1 );	! username - part 2 ;
    Rec[ E!License ]_  Gettab( -1,!gtLIC );	! license ;

    calli( queAct lsh -9, calli!CLBRLI );	! release interlock ;
    calli( queAct lsh -9, calli!CLBLEV );	! leave club ;

    if ( QQ(Process+Q$Job)_ create!child )	! create processor and ;
     then begin "successful"			! let him fend for himself ;

	CtyLog("Starting EXECX on job "&cvs(QQ(Process+Q$Job) land '777));
	QQ(Process+Q$Uid)_ Gettab(QQ(Process+Q$Job),!gtUID);
	RunBlock[1]_ Gettab( -1,!gtRDV );
	RunBlock[2]_ Gettab( -1,!gtRDI );
	FrmXct( QQ(Process+Q$Job), RunBlock[0], !foRUN );
	HaveProcessor_ true;

     end "successful";

 end "startup a processor";


Simple Boolean Procedure NextRecord;
begin "next record"

    arrclr( Rec );			! clear record fields ;

    if ( ESC! or NTQ! )			! if ( ^C or Notice-to-quit ) ;
     then return( false );		!  just return immediately ;

    dpb( Seq, PPSeq( Rec ) );		! set sequence number to select ;
    return(GetRec(Rec[E!Runtime],-1));	! oh, get on with it ;

end "next record";


Procedure SortQueue;
begin "sort queue"
    Integer ASeq;

    Seq_ 0;					! loop through them all ;

    if ( LPPStat(Rec) = JS$Cancel )		!  if cancel, remove it ;
     then begin "cancel it"
	ArrBlt( Del[E!Runtime+1], Rec[E!Runtime+1], E!Length-1 );
	ModRec( Del[E!Runtime], Rec[E!Runtime] );
	return;
     end "cancel it";

    ASeq_ LPPSeq( Rec );			! remember this a while ;
    JPri_ LPPJPri( Rec );			! get priority level ;
    if ( JPri = JP$Min )			! absolute minimum says ;
     then JPri_ LPJPri( QQ( Action) );		!  use default priority ;

    if not( JobPri[ JP$RUN ] )			! check the run list ;
     then njob_ JobPri[JP$Run]_ new!record(job)	!  null?  make a record ;
     else njob_ JobPri[JP$Run];			! begin at top of list  ;

    while ( njob_ job:Nxt[tjob] )		! until the empty list  ;
     do if ( job:Seq[njob] = ASeq )		! if same as record ;
	 then return;				!  then try again later ;

    if not( JobPri[ JPri ] )			! check this priority   ;
     then njob_ JobPri[JPri]_ new!record(job)	!  null?  make a record ;
     else njob_ JobPri[JPri];			! begin at top of list  ;

    while ( njob_ job:Nxt[tjob_njob] )		! until the empty list  ;
     do begin "new passive job"
	if ( job:Seq[njob] = ASeq )		!  if matching sequence ;
	 then return;				!   then no repeaters   ;
	if ( Rec[E!Runtime] < job:Run[njob] )	!  if runtime < job:Run ;
	 then done;				!   then fall to insert ;
     end "new passive job";

    tjob_ job:Nxt[tjob]_ new!record( job );	! create the new record ;
    job:Nxt[tjob]_ njob;			! keep any forward ptrs ;
    job:Opt[tjob]_ Rec[E!Action];		! copy all action flags ;
    job:Sts[tjob]_ Rec[E!Status];		! copy status field ;
    job:Run[tjob]_ Rec[E!Runtime];		! copy runtime  & seq # ;
    job:Seq[tjob]_ ASeq;

  Ifcr PRELIMINARY thenc
    Print( "Addrec ",ASeq," at ", TymDay( Rec[E!Runtime] ), " Pri:", JPri, crlf );
  endc

end "sort queue";


Procedure Prune( Integer ASeq  );
begin "prune"
    r!p (job) nj,tj;
    integer Pri;

    for Pri_ JP$Run upto JP$Max		! for each priority level ;
     do begin "each level of priority"

	if not( nj_ JobPri[ Pri ] )	! if nothing at this level ;
	 then continue;			!  then try the next one ;

	while ( nj_ job:Nxt[tj_nj] )	! for each record ;
	 do if ( job:Seq[nj] = ASeq )	! if seq match ;
	   then begin "process"
	      job:Nxt[tj]_ job:Nxt[nj];	! delete NJOB from list ;
	      return;			! return to caller ;
	   end "process";

     end "each level of priority";

end "prune";


Procedure Prime( Integer Stat, Run(0) );
begin "prime"
    r!p (job) nj,tj;
    integer Pri,ASeq;

    ASeq_ LPStat( Stat );		! get sequence number ;
    for Pri_ JP$Run upto JP$Max		! for each priority level ;
     do begin "each level of priority"

	if not( nj_ JobPri[ Pri ] )	! if nothing at this level ;
	 then continue;			!  then try the next one ;

	while ( nj_ job:Nxt[tj_nj] )	! for each record ;
	 do if ( job:Seq[nj] = ASeq )	! if seq match ;
	   then begin "process"
	      job:Sts[tj]_ Stat;	! change status in list ;
	      if ( Run )		! if a new runtime ;
	       then job:Run[tj]_ Run;	!  then put it in ;
	      return;			! return to caller ;
	   end "process";

     end "each level of priority";

end "prime";


simple procedure ReBuildQueue;
begin "rebuild"

    Seq_ -1;				! initialize sequencer  ;

    While ( NextRecord )		! while records exist   ;
     do SortQueue;			!  sort/insert in list  ;

end "rebuild";


Integer Procedure SlotsAvailable;
begin "slots available"
    Own r!p (job) rjob;

    QQ( Daytime )_ GetTDT;		! specify schedule time ;
    QQ( Uptime )_Gettab(!nsUPT,!gtNSW);	!    set current uptime ;
    QQ( Uptime )_ Uptime;		! and track it with uptime ;

    If ( QQ( New ) )			! if anything changed ;
     then begin "un-mark queue"
	QQ( New )_ 0;			! clear change flag ;
	QQ( Daytime )_ GetTDT;		! leave a timestamp ;
	ReBuildQueue;			! and sort the queue ;
     end "un-mark queue";

    for JPri_ JP$Max downto JP$Min	! for each priority level ;
     do begin "each level of priority"

	if not( njob_ JobPri[ JPri ] )	! if nothing at this level ;
	 then continue;			!  then try the next one ;

	while ( njob_ job:Nxt[tjob_njob] )	! for each record ;
	 do begin "process queue"

	    if ( ESC! or NTQ! )		! if ( ^C or Notice-to-quit ) ;
	     then return( 0 );		!  just go home now... ;

	    if ( LPStat(job:Sts[njob]) neq JS$Queued )
		 or ( LPProc(job:Sts[njob]) neq PSQ$Wait )
	     then continue;			! only schedule queued jobs ;

	    if ( job:Run[njob] > GetTDT )	! scheduled for later? ;
	     then done;				! none left on this level ;

	    if ( LPRunF( job:Opt[njob] )	! if runnable job ;
	      and LPDetF( job:Opt[njob] ) )	!  and run detached ;
	     then begin "running job"

		if ( QQ( Running ) geq QQ( RJobs ) )
		 then continue;			! run slots available? ;
		for MyJob_ 1 upto QQ( RSlot )	! yes, find right slot ;
		 do if not( QRS( MyJob ) )	!  in range 1 to Q!Rslot ;
		     then done;
		if ( QRS( MyJob ) )		! find one? ;
		 then continue;			! no? ;

	     end "running job"
	     else begin "interactive job"

		if ( QQ( Active ) geq QQ( IJobs ) )
		 then continue;			! i slots available? ;
		for MyJob_ E!RunMax+1 upto QQ( ISlot )
		 do if not( QRS( MyJob ) )	!  in range for Q!ISlot ;
		     then done;
		if ( QRS( MyJob ) )		! find one? ;
		 then continue;			! no? ;

	     end "interactive job";

	    job:Nxt[tjob]_ job:Nxt[njob];	! delete NJOB from list ;

	    tjob_ JobPri[ JP$Run ];		! to insert in active list ;
	    while ( tjob_ job:Nxt[rjob_tjob] )	!  loop through the list ;
	     do if ( job:Run[njob] < job:Run[tjob] )
		 then done;			!  runtime < job:Run ;

	    job:Nxt[njob]_ tjob;		! copy the current record pointer ;
	    job:Nxt[rjob]_ njob;		! and insert this in active list ;

	    return( job:Seq[njob] );	! return this record number ;

	 end "process queue";
     end "each level of priority";

    return( 0 );			! nothing there to do ;

end "slots available";


Internal Simple Procedure ReSchedule( Integer JobSlot, Type( Sys$Run ) );
begin "reschedule"
    Own integer Adr, MyAction;
    Define Act#Que = !bit(0), Act#Pend = !bit(1), Act#Restart = !bit(2),
	Act#Crash = !bit(3), Act#Abort = !bit(4), Act#Cancel = !bit(5);

    arrClr( Rec );
    Adr_ QueRun + E!Length * ( JobSlot - 1 );
    dpb( Seq_ LPSeq(QRS(JobSlot)), PPSeq(Rec) );

    if ( Seq )
     then begin "valid slot info"
	if ( Seq_ GetRec( Rec[E!Runtime] ) )
	 then begin "valid queue entry"

	    MyAction_ Case LPStat( QRS(JobSlot) )
	     of (
		[JS$Queued] Act#Que,
		[JS$Hold]   Act#Que,
		[JS$Sched]  Act#Pend,
		[JS$Done]   Act#Que   lor Case Type of (0, Act#Restart, 0),
		[JS$Proc]   Act#Crash lor Case Type of (0, Act#Restart, 0),
		[JS$Abort]  Act#Abort lor Case Type of (0, Act#Restart, 0),
		[JS$Cancel] Act#Cancel,
		[else] 0 );

	    if ( Rec[ E!Runtime ] )
	     then begin "check schedule"

		Memory[Adr+E!RanTime]_ Rec[E!Runtime];
		Memory[Adr+E!Runtime]_ NexTim( Memory[Adr],GetTDT);
		if not( ModRec( Memory[Adr+E!Runtime], Rec[E!Runtime] ) )
		 then Print( "Modrec failed" );
		if ( Memory[Adr+E!Runtime] )	! if run again, setup ;
		 then Prime( QRS(JobSlot), Memory[Adr+E!Runtime] )
		 else Prune( Seq );		!  else prune JobPri tree ;

	     end "check schedule";

	 end "valid queue entry";
     end "valid slot info";

    Memory[Adr]_ 0;			! clear out slot ;
    ArrBlt( Memory[Adr+1], Memory[Adr], E!Length );

    QRF( JobSlot )_ QRU( JobSlot )_	! cleanup database: frame, uid ;
    QRS( JobSlot )_ QRA( JobSlot )_ 0;	! cleanup database: status, action ;

end "reschedule";


Simple procedure FirstTime;
begin "first time"

    QQ( System )_ QQ( Schedule );		! set restart time.  ;

    For MyJob_ 1 upto E!RunMax + E!JobMax	! loop thru active area ;
     do begin "reset job slot"

	QRF(MyJob)_ QRU(MyJob)_ 0;		! clear bogus identifiers ;
	ReSchedule( MyJob, Sys$Reset );		!  and better reschedule ;

     end "reset job slot";

    QQ( Active )_ QQ( Running )_ 0;		! nobody is active now ;

end "first time";


Simple procedure SecondTime;
begin "scheduler restart"
    Integer Act, Run;				! count of active jobs ;

    Act_ Run_ 0;				! clear active job count ;
    For MyJob_ 1 upto E!RunMax			! for each running job ;
     do begin "capture jobs"

	if ( QRF(MyJob)   and			! frame and uid's match ;
	     QRU(MyJob) = Gettab(QRF(MyJob),!gtUID) )
	 then begin "graft job"			! this incarnation ok ;

	    Run_ Run + 1;			! increment running jobs ;
	    FrmXct( QRF(MyJob), QQ(Schedule+Q$Job), !foGFT );
	    CtyLog( "Job "&cvs(QRF(MyJob)) &
		    (if ( !skip! ) then null else " not") & " grafted." );

	 end "graft job"
	 else begin "clear job"			! wrong incarnation here ;
	    Reschedule( MyJob, Sys$Abort );	! clear it out for later ;
	 end "clear job";

     end "capture jobs";

    QQ( Running )_ Run;				! set running total now ;

    For MyJob_ 1 upto E!JobMax			! for each active job ;
     do begin "count active jobs"

	if ( QQS(MyJob) )			! with a valid entry ;
	 then Act_ Act + 1;			! increment the counter ;

     end "count active jobs";

    QQ( Active )_ Act;				! set active total now ;

end "scheduler restart";


Simple procedure SetupJobTables;
begin "setup job tables"
    Own integer Err;

    HaveProcessor_ false;			! don't have one now ;
    Arrclr( JobPri );				! clear schedule board ;
    ReBuildQueue;				! Initialize "my" queue ;

    Seq_ queRun lsh -9;
    calli( Seq, calli!CLBADD );			! join club on RUN page ;
    if not( !Skip! )				! this should be easy ;
     then Exit( "No Club for Scheduler" );	!  otherwise weird... ;

    Err_ calli( location(Seq), calli!CLBINI );	! get interlock, nowait ;
    if not( !Skip! )
     then begin "not me"
	Exit( "Scheduler Interlock Busy ("&cvos(Err)&")" );	! sigh! ;
     end "not me";

    QQ( Schedule )_ GetTDT;			! setup my start time ;
    QQ( Schedule+Q$Job )_ calli( 0, calli!PJOB );
    QQ( Schedule+Q$Uid )_ Gettab( QQ(Schedule+Q$Job), !gtUID );
    CtyLog( "Starting XEXEC on job "& cvs(QQ(Schedule+Q$Job)) );

    if ( QQ( Uptime ) = 0 ) or			! If never been set or  ;
     ( Gettab( !nsUPT,!gtNSW ) < QQ( UpTime ) )	! If less than reported ;
     then FirstTime				!  the system went away ;
     else SecondTime;				!  else was I went away ;

    QQ( Uptime )_ Gettab( !nsUPT,!gtNSW );	! set current uptime ;

end "setup job tables";


Simple procedure MonitorActiveJobs;
For MyJob_ 1 upto E!JobMax	
 do begin "monitor active jobs"

    if ( QQS( MyJob ) )			! something in slot ;
     then begin "active slot"

	Case ( LPStat(QQS(MyJob)) )
	 of begin

	[JS$Done]			! complete, good termination ;
	if ( LPProc(QQS(MyJob)) = PSD$Restart )
	 then SetStp( JS$Hold, PSH$Restart, QQS(MyJob) )
	 else begin "complete and reschedule"
	    ReSchedule( MyJob+E!RunMax );
	    QQ( Active )_ QQ( Active )-1;
	 end "complete and reschedule";

	[JS$Hold]			! hold user request - restart ;
	[JS$Abort]			! abort on error condition ;
	 begin "abort and reschedule"
	    ReSchedule( MyJob+E!RunMax );
	    QQ( Active )_ QQ( Active )-1;
	 end "abort and reschedule";

	[else]
	end;

     end "active slot";

    If not( QQ( Active ) )		! if no activity left ;
     then begin "Kill Processor"

	KillJob( QQ(Process+Q$Job) );	!  then take care of it ;
	HaveProcessor_ false;		! mark him deceased ;

     end "Kill Processor";

end "monitor active jobs";


!	M A I N   program
;

If not ( OpnQue( que$Run lor que$Act ) )	! we are in deep #### ;
 then Exit( "Serious startup error, check job queue" );

SetupJobTables;				! set everything up ;

While not( ESC! or NTQ! )		! while it's ok to proceed ;
 do begin "the system is running"

    If ( QQ( Active ) )			! anything active ;
     then MonitorActiveJobs		! yes, monitor activity ;
     else if ( ESC! or NTQ! )		! no, check for done ;
	  then done;

    If ( ESC! or NTQ! )			! if notice received ;
     then begin "kill jobs"		!  start genocide process ;

	For MyJob_ 1 upto E!RunMax	! for each run job ;
	 do if ( QRS( MyJob ) )		!  if there is one ;
	    then KillJob( QRF(MyJob) );	!   knock if off   ;

     end "kill jobs";

    if ( Seq_ SlotsAvailable )		! if any slots are available ;
     then begin "check availability"	!  try to schedule it ;

	If ( ESC! or NTQ! )		! if ( ^C or Notice-to-quit ) ;
	 then done;			!  just return immediately ;

	if ( FrontEnd )			! setup user and keep track ;
	 then begin "got one"		! put into slot and log it. ;

	    if ( MyJob > E!RunMax )	! increment proper counter ;
	     then begin "add job"
		if not( QQ( Active ) )	! if nothing yet ;
		 then StartProcessor;	!  then start one ;
		QQ( Active )_  QQ( Active )  + 1;
	     end "add job"
	     else QQ( Running )_ QQ( Running ) + 1;

	 end "got one";	    

     end "check availability";

    calli( 10, calli!SLEEP );		! sleep for awhile (1 sec) ;
    ifcr PRELIMINARY thenc  print( "|" ); endc

    if ( QQ( Feature ) < 0 and QQ( Feature ) land QFet$RSched )
     then RunSelf;

 end "the system is running";

Exit( "Signing off." );

end 	"XEXEC" $

     