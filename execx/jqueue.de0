require "  - Job queue page layout definitions " message;

require "{}[]" delimiters;
redefine ! = {comment};

Define QueueMap  = 1;			! Page # for queue status;
Define QueueMsg  = QueueMap + 1;	! Page # for queue messages;
Define QueueData = QueueMsg + 1;	! Page # for queue entries;
Define QueueFile = {"JQUEUE.SYS"};	! Name of file to use;

redefine !Block(Group, Name, Size) = {
    Ifcr Length(Cvps(Size)) = 0 thenc assignc Size = 1; Endc
    Define Group}&{Name = Group;
    Redefine Group = Group + Size;};


!   Page Format for Queue MAP
;

Define	Q! = 0, Q!Length = 512, Q!!Version = 0;
	!Block(Q!,Version)		! queue format version ;
	!Block(Q!,Lock)			! lock the entire queue ;
	!Block(Q!,WLock)		! write lock, ok to read ;
	!Block(Q!,Open)			! count of users in queue ;
	!Block(Q!,Next)			! next available seq # ;
	!Block(Q!,High)			! highest entry in use ;
	!Block(Q!,Hole)			! first available entry slot ;
	!Block(Q!,Count)		! total entries in queue ;
	!Block(Q!,New)			! indicate something changed ;
	!Block(Q!,Daytime)		! last time scheduler was here ;
	!Block(Q!,Active)		! total active entries/jobs ;
	!Block(Q!,Slots)		! available job slots ;
! -- ;
	!Block(Q!,Read)			! count of readers ;
	!Block(Q!,Write)		! count of writers ;
	!Block(Q!,Modify)		! count of modifiers ;
! -- ;


Define D! = 0;
	!Block(D!,Type)			! Type, modifiers, connector ;
	    ! [3] T - Descriptor Type {Month,Nth-day,Specific,Weekday} ;
	    ! [4] MM- Month modifier {0 to 11} (invalid 12 thru 15) ;
	    ! [3] C - Connector {After,Before,And} ;
	    ! [5] B - Body value {0 to 31} ;
	    Define PMult(pos)   = { point(  3, (pos),  2 ) };	! Mult   ;
	    Define PType(pos)   = { point(  3, (pos),  5 ) };	! Type   ;
	    Define PMoMult(pos) = { point(  4, (pos),  9 ) };	! MoMult ;
	    Define PBody(pos)   = { point( 23, (pos), 32 ) };	! Body   ;
	    Define PConn(pos)   = { point(  3, (pos), 35 ) };	! Conn   ;
	!Block(D!,Daytime)		! Universal daytime ;
	    ! [36] Date,,Time in universal format ;
	    Define PDate(pos)   = { point( 18, (pos), 17 ) };	! Ref?   ;
	    Define PTime(pos)   = { point( 18, (pos), 35 ) };	! Time   ;
	    Define PDay(pos)    = { point( 36, (pos), 35 ) };	! Daytime;
	!Block(D!,Length)		! Length of descriptor block ;

    Comment
	+------------------------------------+----------------------------+
	| Mult | Type | MoMult | Body | Conn |         F  R  E  E         |
	+------------------------------------+----------------------------+
         0    2 3    5 6      9 10  14 15  17 18                        35

	+------------------------------------+----------------------------+
	|   Date - days since  Nov 1, 1858   |  Time - fraction of a day  |
	+------------------------------------+----------------------------+
         0                                 17 18                        35
    ;



Define E!Length = 64;			! Entry length;
Define E!RPPage = 512 div E!Length;	! Records per page;
Define E!MinSeq = '1;			! Minimum sequence number ;
Define E!MaxSeq = '377777;		! Maximum sequence number ;
Define E!ParLength = 80;		! Chars in parameter field ;

Define	E! = 0;
	!Block(E!,RunTime)		! universal date,,time ;
	!Block(E!,PPN)			! Gfd (connected) directory ;
	!Block(E!,Privs)		! Privilege word ;
	!Block(E!,AUN)			! Login directory ;
	!Block(E!,Username,2)		! Username ;
	!Block(E!,License)		! Frame License ;
	!Block(E!,Project,3)		! Project Code ;
	!Block(E!,Network)		! Network Node-Port info ;
	!Block(E!,CmdFile,5)		! device:(username)file.ext block ;
	    Define PTmpN(pos)   = { point( 18, (pos), 35 ) };	! Temp name ;
	!Block(E!,LogFile,5)		! device:(username)file.ext block ;
	    Define F! = 0;		! ** File positions ** ;
	    !Block(F!,Device)		! ** Device name ;
	    !Block(F!,User,2)		! ** Username ;
	    !Block(F!,Name)		! ** File Name ;
	    !Block(F!,Ext)		! ** File Extension ;
	!Block(E!,Label)		! Checkpoint label - for restart ;
	!Block(E!,TruLim)		! TRU limit ;
	!Block(E!,LogLim)		! Logging limits [bit fields] ;
	    ! [9]  Maximum logging file size in pages ;
	    Define PLogL(pos)   = { point(  9, (pos), 17 ) };	! logfile;
	    ! [18] Maximum elapsed running time in minutes ;
	    ! - Note: 1hr#6bits,1d#11bits,1w#14bits,1m#16bits,6m#18bits ;
	    Define PTimL(pos)   = { point( 18, (pos), 35 ) };	! timelim;
	!Block(E!,Status)		! Status information [bit fields] ;
	    ! [3] Entry status {queued,wait,proc,abort,cancel,restart,done} ;
	    Define PStat(pos)  = { point(  3, (pos),  2 ) };	! status  ;
	    ! [2] Processing status {pause,stop} ;
	    Define PProc(pos)  = { point(  2, (pos),  4 ) };	! proc sta;
	    ! [6] Dependency level {0-63} ;
	    Define PDepL(pos)  = { point(  6, (pos), 10 ) };	! depend L;
	    ! [18] Sequence number {0-262144} ;
	    Define PSeq(pos)   = { point( 18, (pos), 35 ) };	! sequence;
	!Block(E!,Action)		! Action information [bit fields] ;
	    ! [2] Logging action {none,append,supersede,spooling} ;
	    Define PLog(pos)   = { point(  2, (pos),  1 ) };	! Log action ;
	    ! [3] Log file disposition {none,delete,?error} ;
	    Define PDisp(pos)  = { point(  3, (pos),  4 ) };	! Disposition;
	    ! [2] Spool action {none,logfile,errorlog}  **Future** ;
	    Define PSpl(pos)   = { point(  2, (pos),  6 ) };	! Spooling   ;
	    ! [2] Mailer action {none,error,success,always} ;
	    Define PMail(pos)  = { point(  2, (pos),  8 ) };	! Mail action;
	    ! [2] Mailer {system:RPG,system:TUMS,system:ONTYME,special} ;
	    Define PMPrg(pos)  = { point(  2, (pos), 10 ) };	! Mail prog  ;
	    ! [3] Restart action {none,checkpoint,label,continue,repeat} ;
	    Define PRestart(pos) = { point( 3, (pos), 13 ) };	! Restart    ;
	    ! [2] Unique login {none,user,path,job} ;
	    Define PUniq(pos)  = { point(  2, (pos), 15 ) };	! Uniqueness ;
	    ! [1] Run: this is a program not a command file;
	    Define PRunF(pos)  = { point(  1, (pos), 16 ) };	! Run me ;
	    ! [1] Det: this does not require a PTY-pair port connection;
	    Define PDetF(pos)  = { point(  1, (pos), 17 ) };	! Detach ;
	!Block(E!,Parameters,(E!ParLength div 5))	! Pars {0-80 chars} ;
	!Block(E!,Descriptor)		! First Descriptior item pair ;

Define E!MaxItem = ( E!Length - E!Descriptor ) div D!Length ;

