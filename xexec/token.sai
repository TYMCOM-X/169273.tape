begin

require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)ARGS.REQ" source!file;
require 1 version;

string item	INFILE;
string item	OUTFILE;

string IFN,S;
integer IC,B,E,TokenBrk,ComBrk;
label STPT,EXIT;

open(IC_getchan,"DSK",0,4,0,256,B,E:=-1);
define Punct = {"!@#$%^&*()_+~`={}|[]\:"";<>?,./ "&#ht&#lf&#cr};
setbreak(TokenBrk_getbreak,Punct,Punct,"TISKN");
setbreak(ComBrk_getbreak,","," "&#ht,"ISK");
if ARGC = 1 then print( "TOKEN version ",cvos(memory['137]),crlf );
STPT:
if ARGC = 1 then begin
    print( "*" );
    ARGS := inchwl;
end;
datum(INFILE) := null;
ArgParse( OutFile, InFile, PHI, Args );
while length(datum(InFile)) do begin
string FN;
FN := scan( datum(INFILE), ComBrk, B );
    lookup(IC,FN,E);
    if E then begin
	outstr( "%lookup failure: " );
	outstr( FN );
	outstr( crlf );
	continue;
    end;
    if props(OUTFILE) then setprint( datum(OUTFILE), "F" );
    while not E do begin
	S := input( IC,TokenBrk );
	if length(S) then print( S,crlf );
    end;
    close( IC );
end;

EXIT:
setprint( null,"T" );
if ARGC = 1 then goto STPT;
release( IC );
call(0,"EXIT");

end $