.library RECORD.DFS;
.Sec Runtime Procedures,Runtime:
.ind runtimes;
.ind primative functions;

The group of statements or procedures which are implemented within
the exec itself as %SAIL procedures% are called runtimes or primitives.
These provide functions upon which all other functions may be defined.
The proposed set of runtimes are described below:

.Ss Declarations;
These runtimes declare and allocate storage for data structures which
are accessible to the user.
The declarations follow block structure in that they are only
visible withing the block in which they are defined,
and in that they are deallocated when the block in which they are
defined is exited.

.Sss |IVAR, SVAR|;
The %IVAR statement% and %SVAR statement% have the form
.chart
--IVAR <var1>,<var2>...<varn>
--SVAR <var1>,<var2>...<varn>
.endChart
IVAR produces an %integer variable%;
SVAR produces a %string variable%.
The named variables are declared local to the current block.
If the variable exists in a surrounding block,
the value of the new variable is initialized to that of the
one in the surrounding block,
otherwise,
the value is initialized to null.

.Sss DEF;
The %DEF statement% is of the form
.chart
--DEF <proc> = <proc'>
--DEF <proc> = <val>
--DEF <proc> = <val> <val'>
.endChart
In the former case,
<proc> is made identical to <proc'>.
In the last two cases,
the block of code <val> is stored (unevaluated) as the 
%procedure body% for <proc>.
In the last case, 
the block of code <val'> is also storred (unevalueted) as the 
%help handler% for <proc>.
If <proc> is called with a single argument of %question-mark% (?),
the help handler will be evaluated rather than the body.

If <proc> is already defined in the current block, an error is
flagged.
(<proc> may be defined in a surrounding block without error)

.Sss GLOBAL;
The %GLOBAL statement% has the form
.chart
--GLOBAL IVAR <var1>,<var2>...<varn>
--GLOBAL SVAR <var1>,<var2>...<varn>
--GLOBAL DEF <proc> = <proc'>
--GLOBAL DEF <proc> = {<body>}
.endChart
This statement causes the items to be declared in the outermost block.
If any variable with the same name exists anywhere, it is an error.

.Ss Execution Control;
.ind execution control;
.ind flow control;

.Sss IF;
The %IF statement% has the form
.chart
--IF <be> THEN <val> ELSE <val'>
--IF <be> THEN <val>
--IF <be> ELSE <val'>
.endChart
The value of the statement is the value of <val> if <be>=true
or the value of <val'> if <be>=false.
Only the <val> to be returned is evaluated.

.Sss WHILE;
The %WHILE statement% has the form
.chart
--WHILE <be> DO <val>
.endChart
The expresion <be> is evaluated repeatedly until its value is false.
After each evaluation which is true,
the expresion <val> is evaluated.
The value of the last time <val> was evaluated is returned as the
value of the statement.
If <val> is not evaluated (for any reason),
the value returned is null.
The loop may also be terminated by the DONE statement.

.Sss UNTIL;
The %UNTIL statement% has the form
.chart
--UNTIL <be> DO <val>
.endChart
The expresion <be> is evaluated repeatedly until its value is true.
After each evaluation which is false,
the expresion <val> is evaluated.
The value of the last time <val> was evaluated is returned as the
value of the statement.
If <val> is not evaluated (for any reason),
the value returned is null.
The loop may also be terminated by the DONE statement.

.Sss FOR;
The %FOR statement% has the form
.chart
--FOR <var> = <val1> TO <val2> BY <val3> DO <val'>
--FOR <var> = <val1> TO <val2> DO <val'>
--FOR <var> = <val1> BY <val2> DO <val'>
--FOR <var> = <val1> DO <val'>
--FOR <var> OF <val1>,<val2>,<val3>...<valn> DO <val'>
.endChart
<var> is a declared variable which is assigned various
values before evaluating <val'>.
The value of the statement is the last value of <var> for which
<val'> was evaluated.
If <val'> is not evaluated (for any reason),
the returned value is null.

.Sss REPEAT;
The %REPEAT statement% has the form
.chart
--REPEAT <val>
--REPEAT <val> UNTIL <val'>
--REPEAT <val> WHILE <val'>
.endChart
The value of <val> is computed repeatedly.
After each evaluation, 
the termination condition is tested by evaluating <val'>.
If the condition is met (UNTIL TRUE or WHILE FALSE),
the loop is exited.
The DONE statement may be used to exit regardless of the termination
condition.

.Sss DONE;
The %DONE statement% has the form
.chart
--DONE
.endChart
The immediately enclosing loop is exited unconditionally.
This applies to FOR, WHILE and REPEAT.

.Sss NEXT;
the %NEXT statement% has the form
.chart
--NEXT
.endChart
The remainder of the current iteration of the immediately enclosing
loop is skiped.
The next value of the %iteration variable% (if any) is assigned
and the %termination condition% (if any) is tested.
If the termination condition is met, the loop terminates as normal.
Otherwise,
the loop body is reevaluated from the beginning with the new value
of the iteration variable.

.Sss CASE;
The %CASE statement% has the form
.chart
--CASE <val> OF {<val1>\<val2>\<val3>\...\<valn>\else <val'>}
--CASE <val> OF {[<val1>]<val1'>\[<val2>]<val2'>\...\else <val'>}
.endChart
In the unlabeled case (first one),
the <val>'th item in the list is evaluated and its value returned.
If there is no <val>'th item, the else item is evaluated.
In the labeled case,
the item whose square bracketed value matches <val> is evaluated.
If none match,
the else item is evaluated.
The else item is optional.
The "\" is interchangeable with a <crlf>.
In the labeled case,
the values may be strings.
Note that if more than one label is satisfied, they will all
be evaluated and the last one will be returned.
This makes the following reasonable:
.begin verbatim
	CASE true OF {
		[a=b] {TYPE "A=B"}
		[c=d] {TYPE "C=D"}
		[a=c] {TYPE "A=C"}
		else {TYPE "Nothing is equal!"}
	}
.end
Note that order of execution is guaranteed.

.Sss QUIT;
the %QUIT statement% has the form
.chart
--QUIT
.endChart
The current instantiation of the exec is terminated.
The job is not logged off.
Control passes to the parent or to COMCON if no parent exists.

.Ss Subsystem Command Generators;

.Sss DO,DoWith:
.ind DO-WITH statement;
The %DO statement% has the form
.chart
--DO <val> WITH <val'>
.endChart
The value of the statement is the value of <val>,
which is evaluated exactly once.
<val'> is a dependant co-routine (is evaluated at the same time as
<val>) which supplies the standard input for any functions called
by <val>.
The statements listed below are used within <val'> 
to provide input data and test the state of <val>.

.Sss STEXT;
The %STEXT statement% (%send text%) has the form
.chart
--STEXT <val>
.endChart
The string value of <val> is provided as standard input to the
primary statement of the enclosing DO statement.
This is only legal within the scope of the WITH clause of the
DO statement.

.Sss PLINE;
%PLINE% (%prompt line%) 
is a special procedure variable which contains the last line
of text sent to the standard output by the primary statement of
the enclosing DO statement.
The PLINE procedure will not return until the primary statement is
waiting for input from its standard input.
This is only legal within the scope of the WITH clause of the
DO statement.

.Ss Infix Operators;
.ind infix operators;

.Sss Arithmetic;
The operators "+","-","/" and "*" perform the appropriate
integer %arithmetic% on the two operands.
If the operands contain other than digits,
the results will be undefined.

.Sss Assignment;
The operator "_" (%underscore%) will provide %assignment%.
The variable on the left will be assigned the value of the 
expression on the right.
The value of the operation will be the value assigned.

.Sss Comparison;
The operator "=" (%equals%) is used to compare strings to be identical.
Note that (0=00) is not true because the %comparison% is done
in string mode.
It should be noted however,
that numeric values produced by any exec function will always
be %canonical integers%,
therefore,
it is not unreasonable to perform the comparison in this way
for integers
(ie. (00+0=0+0) is true).

An alternate implementations is to determine if the operands
contain only digits and signs.
If so, the comparison would be numeric,
otherwise,
it would be string.
This is not as much a problem with "=" as it is with "<" and ">".

Yet another alternate implementations is to use another operator
to compare strings (such as "?").

.Sss Booleans;
The operators "or" and "and" perform the obvious boolean functions.
These are not the bitwise logical functions.

.Ss Token Retrieval;
In order to scan the arguments to a procedure (command),
the following runtimes may be called from within a procedure
only to return various parameters which appear in the procedure call.

Note that most of the following routines have optional arguments of
the form
.chart
--DEFAULT:<val>
--PROMPT:<val>
--ERROR:<val>
.endChart
Should the %DEFAULT clause% be missing,
then the field is mandatory:
it will be prompted for if missing.
The %PROMPT clause% is the message used to obtain the value if
a "?" was entered or if the field is ommited and there is no default.
Prompting is available only when input is from a physical terminal.
If the %ERROR clause% is provided,
no error message will be issued if any errors are detected,
rather an error code (and perhaps message) will be assigned to the
variable and the error expresion will be evaluated.
The error expresion may use the statements NEXT and DONE.
Any combination of these clauses is legal in any order.

.Sss GETVALUE;
The %GETVALUE statement% has the form
.chart
--GETVALUE <var> 
--GETVALUE <var> <clauses>
.endChart
The value returned is the value from evaluating the next token in the
procedure call in the context in which the procedure call was made.
Multiple token expressions are permited if they are enclosed in () or
{}.
If no more input exists in the procedure call, null is returned.

.Sss GETIVAL;
The %GETIVAL statement% has the form
.chart
--GETIVAL <var>
--GETIVAL <var> <clauses>
.endChart
This identical to GETVALUE 
except that it is an error if the resulting value is not an integer.

.Sss GETTEXT;
The %GETTEXT statement% has the form
.chart
--GETTEXT <var> 
--GETTEXT <var> <clauses>
.endChart
This runtime will scan exactly as far as the GETVALUE runtime but the
arguments will not be evaluated.
Everything scanned will be returned as a string.

.Sss GETTOKEN;
The %GETTOKEN statement% has the form
.chart
--GETTOKEN <var>
.endChart
This runtime will return exactly one unevaluated token.
If no more input exists in the procedure call, null is returned.

.Sss GETREFERENCE;
The %GETREFERENCE statement% has the form
.chart
--GETREFERENCE <var>
.endChart
The next token in the procedure call is expected to be the name
of a variable.
This routine makes the given variable into a reference variable.
The variable may be used in any context that a normal variable may
be used but assignments and reads to it will actually reference
the variable named in the procedure call.

.Sss RESCAN;
The %RESCAN statement% will return the entire (including the call to
the procedure) command line as one string.

.Ss String Functions;

.Sss SUBSTR;
The %SUBSTR statement% has of the form
.chart
--SUBSTR <val> <val1> <val2>
.endChart
The <val1> through <val2>'th characters of <val> are returned.
The special variable "$" may be used in <val1> or <val2> to
denote the length of the string.
That is {SUBSTR "ABCD" 2 ($-1)} would return "BC".

.Sss LENGTH;
The %LENGTH statement% has the form
.chart
--LENGTH <val>
.endChart
The length of <val> in characters is returned.

.Ss Frame Operations;

.Sss ERUN;
The %ERUN statement% has the form
.chart
--ERUN <prog> 
--ERUN <prog> <val>
.endChart
The program named will be run in a seperate fork.
When it is completed,
the fork will be destroyed and the previously current fork
will be made current again.
If <val> is given, it is the core assignment in K.

.Sss RUN;
The %RUN statement% has the form
.chart
--RUN <prog> 
--RUN <prog> <val>
.endChart
The program named will be run in the current fork.
The current program if any will be overlaid.
If <val> is given, it is the core assignment in K.

.Sss XEXEC;
The %XEXEC statement% has the form
.chart
--XEXEC
--XEXEC <prog>
.endChart
The named program replaces the current exec 
(all children are destroyed).
The default is to place the user in XEXEC mode (for compatibility).


  