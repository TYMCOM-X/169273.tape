begin

require '1 lsh 24 lor '005 version;	comment version 1(5);
require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)ARGS.REQ" source!file;
require "(WRS)AUXLIB.REQ" source!file;
require "(MPL)UUOSYM.SAI" source!file;
require 8000 new!items;

string item LOGFILE;
string item NAMES;

        item CHECK;
 string item HOSTS;
        item LISTONLY;
 string item MASTER;
integer item RETRIES;
integer item TIMEOUT;
        item TRACE;
        item UPDATEMODE;
 string item USER;
        item VERBOSE;

set AllFiles;
integer TEL.COM;

integer commaBreak,noBlank;
string JJJ;
simple procedure breakIni;
begin
    setbreak(commaBreak_getbreak,",",null,"SIK");
    setbreak(noBlank_getbreak,null," ","SIK");
    JJJ := cvs(1000+calli(0,calli!PJOB))[2 to 4];
end;
require breakIni initialization;

procedure Run (
	string 	File;
	integer Start(0) );
begin "run"
    integer array RNB[0:5];
    RNB[0] _ cvsix("DSK");
    RNB[1] := cvfil( File, RNB[2], RNB[4] );
    RNB[3] _ RNB[5] _ 0;
    calli( (Start lsh 18) + location(RNB[0]), calli!RUN );
end "run";

string procedure AllHosts;
begin
	integer chan,eof,i,h,lastHost;
	integer array HostTab[0:99];
	string S;
	open(Chan_getchan,"DSK",'14,2,0, 0,0,Eof);
	lookup(Chan,"(PJ)JOBS.DAT",Eof);
	if Eof then usererr(0,0,"Can't read (PJ)JOBS.DAT","X");
	for h _ 0 upto 12 do wordin(Chan);
	h _ -1;
	while -1 neq i_wordin(chan) do		! Stop at -1, not 1B0;
	    if i land '1000000000 then
			! The master system should be excluded here;
	    	HostTab[h_h+1] _ i land '777777;
	release(Chan);
	lasthost _ h;
	do begin "slow-sort"
	    i _ 0;
	    for h _ 1 upto lasthost do
		if HostTab[h-1] > HostTab[h] then begin
		    HostTab[h-1] swap HostTab[h];
		    i _ i + 1;
		end;
	end until i=0;
	S := cvs(HostTab[0]);
	for h _ 1 upto lastHost do
	    S := S& ","& cvs(HostTab[h]);
	return( S );
end;

procedure DefaultUserNames( reference string NAMES; string USER );
begin
    string S;
    integer B;
    S := null;
    while length(NAMES) do begin
	if NAMES neq "(" then S := S& "("& USER& ")";
	S := S& scan( NAMES, commaBreak, B );
	if length(NAMES) then S := S& ",";
    end;
    NAMES := S;
end;

boolean procedure Login( string USER; integer HOST );
begin
    integer RetryCnt;
    string S;
    auxRNC := true;		! no controls on auxRead;
    for RetryCnt := 1 upto datum(RETRIES) do begin
	creaux( USER & ":" & cvs(HOST) );
	if !SKIP! then done;
    end;
    if not !SKIP! then begin
	print( "Creaux failed to ", USER, ":", HOST, crlf );
	return( false );
    end;
    ! Send one CR for "project code" and another for "attach to job?";
    auxOut( #cr& #cr& "SET LOGOUT"& #cr& "TTY NO CRLF"& #cr );
    return( true );
end;

procedure FINDIT( string NAMES; procedure CALLIT );
begin
    string S;
    auxOut( "R(SPL)FINDIT"&#cr );
    auxSync( #lf& "Find file: ", 60 );
    auxOut( NAMES&#cr );
    auxSync( #lf, 30 );
    while true do case auxRead( S, datum(TIMEOUT) ) of begin
	[aux!Prompt] done;
	[aux!Line] if S = "(" then CALLIT( S )
	    else if S = "?" then print( S, crlf );
	[aux!Zap] begin
	    print( "##"& crlf& "Findit: circuit zapped"& crlf );
	    return;
	end;
	[aux!Timeout] begin
	    print( "##"& crlf& "Findit: timeout"& crlf );
	    return;
	end
    end;
    if props(TRACE) then print( crlf );
end;

boolean needTelecopy;

procedure Copy( string S );
begin
    S := S[1 to 14]& datum(MASTER)& S[19 to 30]& ","& S[1 to 30];
    cprint( TEL.COM, scan( S, noBlank, !SKIP! ), crlf );
    needTelecopy := TRUE;
end;

procedure Delete( string S );
begin
    S := scan( S := S[1 to 13]& S[19 to 30], noBlank, !SKIP! );
end;

procedure Declare( string S; string Protection );
begin
    S := scan( S := S[1 to 13]& S[19 to 30], noBlank, !SKIP! );
end;

procedure Setlic( string S; integer License );
begin
    S := scan( S := S[1 to 13]& S[19 to 30], noBlank, !SKIP! );
end;

comment
0000000001111111111222222222233333333334444444444555555555566666666667777777777
1234567890123456789012345678901234567890123456789012345678901234567890123456789
(TUMS        :  39) RDISTX.SAI 12345 24-Jun-87 19:33 LOGHEH$ ALL  RD  NO 777777
<---PNAME--->     <---PNAME-->       1234567890123456789012345678901234567
;

procedure Build( reference string S );
begin
    string itemvar SIV;
    new!pname( SIV := new(S[38 to inf]), S[1 to 13]& S[19 to 30] );
    put SIV in AllFiles;
    if props(VERBOSE) then
	print( S, crlf );
end;

procedure BuildDataBase( string USER, NAMES );
begin
    Login( USER, cvd(datum(MASTER)) );
    Findit( NAMES, Build );
    auxZap;
    print( length(AllFiles), " files on master system."& crlf );
end;

comment
0000000001111111111222222222233333333334444444444555555555566666666667777777777
1234567890123456789012345678901234567890123456789012345678901234567890123456789
(TUMS        :  39) RDISTX.SAI 12345 24-Jun-87 19:33 LOGHEH$ ALL  RD  NO 777777
<---PNAME--->     <---PNAME-->       1234567890123456789012345678901234567
;

set MissingSet;

procedure Update( reference string S );
begin
    string itemvar SIV;
    string File;
    boolean FLAG,CURRENT;
    if props(LISTONLY) then begin
	print( S, crlf );
	return;
    end;
    CURRENT := TRUE;
    File := S[1 to 13]& S[19 to 30];
    SIV := cvsi( File, FLAG );
    if FLAG
	then begin
	    print( S[1 to 52], " -- missing on master"& crlf );
	    Delete( S[1 to 30] );
	    CURRENT := FALSE;
	end
	else begin
comment
(TUMS        :  39) RDISTX.SAI 12345 24-Jun-87 19:33 LOGHEH$ ALL  RD  NO 777777
<---PNAME--->     <---PNAME-->       1234567890123456789012345678901234567
;
	    if not equ(S[54 to 59],datum(SIV)[17 to 22]) then begin
		print( S[1 to 52], " -- bad checksum ", S[54 to 59], crlf );
		print("                           should be ",datum(SIV),crlf);
		Copy( S[1 to 30] );
		CURRENT := FALSE;
	    end
	    else begin
		if not equ(S[62 to 72],datum(SIV)[25 to 35]) then begin
		    print( S[1 to 52], " -- protection ", S[62 to 72],crlf);
		print("                           should be ",datum(SIV),crlf);
		    Declare( S[1 to 30], datum(SIV)[25 to 35] );
		    CURRENT := FALSE;
		end;
		if not equ(S[74 to inf],datum(SIV)[37 to inf]) then begin
		    print( S[1 to 52], " -- bad license ", S[74 to inf], crlf );
		print("                           should be ",datum(SIV),crlf);
		    Setlic( S[1 to 30], cvo(datum(SIV)[37 to inf]) );
		    CURRENT := FALSE;
		end;
	    end;
	    remove SIV from MissingSet;
	end;
    if CURRENT and props(VERBOSE) then
	print( S[1 to 52], " -- current"& crlf );
end;

procedure UpdateHost( string USER, HOST, NAMES );
begin
    string itemvar SIV;
    boolean Zapped;
    if not props(LISTONLY) then print( "Checking host ", HOST, crlf );
    if not Login( USER, cvd(HOST) ) then return;
    MissingSet := AllFiles;
    Findit( NAMES, Update );
    Zapped _ !lh(auxPort);	! Set flag if premature zap;
    auxZap;
    if Zapped then print ("Check incomplete for host ", HOST, crlf) else
      foreach SIV | SIV in MissingSet do begin
	string S;
	S := cvis( SIV, !SKIP! );
	S := S[1 to 13]& ":"& "   "[length(HOST) to inf]& HOST& S[14 to inf];
	print( S, "                      "& " -- missing on slave"& crlf );
	Copy( S[1 to 30] );
      end;
end;

procedure Usage;
begin
  print( "Usage: RDIST LOGFILE=FILESPEC/SWITCHES"&crlf);
  calli(1,calli!EXIT);
end;
begin	"MAIN"
    string HOST;
    integer B;
    define !GTNM1='31, !GTNM2='32;	! Name of current directory;
    needTELECOPY := false;
    datum(MASTER) := cvs(calli(!xwd(!CNSYS,!GTCNF),calli!GETTAB));
    datum(RETRIES) := 5;
    datum(TIMEOUT) := 600;
    datum(HOSTS) := AllHosts;
    datum(USER) :=
	cv6str(calli(!xwd(-1,!GTUNM),calli!GETTAB)) &
	cv6str(calli(!xwd(-1,!GTUN1),calli!GETTAB));
!	cv6str(calli(!xwd(-1,!GTNM1),calli!GETTAB)) &
!	cv6str(calli(!xwd(-1,!GTNM2),calli!GETTAB));
    ArgParse(
	LOGFILE, NAMES,
	{CHECK,HOSTS,LISTONLY,MASTER,RETRIES,TIMEOUT,TRACE,UPDATEMODE,USER,VERBOSE},
	ARGS );
    if not props(NAMES) then Usage;
    if props(LOGFILE) then setprint( datum(LOGFILE), "B" );
    DefaultUserNames( datum(NAMES), datum(USER) );
    auxTrace := props(TRACE);
    if not props(LISTONLY) then begin
	open( TEL.COM_getchan,"DSK",0,0,4, 0,0,!SKIP! );
	enter( TEL.COM, JJJ&"TEL.TMP", !SKIP! );
	cprint( TEL.COM, "REPLACE"&crlf);
	if props(UPDATEMODE) then cprint( TEL.COM, "UPDATE"&crlf)
	                     else cprint( TEL.COM, "NO UPDATE"&crlf );
	print( "Master host: ", datum(MASTER), crlf );
	BuildDataBase( datum(USER), datum(NAMES) );
	print( "Slave hosts: ", datum(HOSTS), crlf );
    end;
    while length(HOST := scan(datum(HOSTS),commaBreak,B)) do
	UpdateHost( datum(USER), HOST, datum(NAMES) );
    setprint(null,"T");
    if not props(LISTONLY) then begin
	release(TEL.COM);
	if needTELECOPY and not props(CHECK) then begin
	    print( "Starting TELECOPY"& crlf );
	    Run( "(SYS)TELECO", 1 );
	end;
    end;
end	"MAIN"
end $
   