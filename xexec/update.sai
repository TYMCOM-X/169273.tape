begin

require "(SAILIB)SAIL.DEF" source!file;
require "(WRS)ARGS.REQ" source!file;

integer	LineBrk;
integer	PageBrk;
integer	CommaBrk;
integer	ICnew,ICold,B,E;
string FNnew,FNold;
string item OUTFILE;
string item INFILES;

string procedure InHead( integer CHAN );
begin
    string Head,S;
    Head := null;
    do begin
	S := input( CHAN, LineBrk );
	if E then return( Head );
	Head := Head & S;
	if B = #ff then Head := null;
    end until length(S) > 2;
    return( Head );
end;

string procedure InPage( integer CHAN );
begin
    return( input( CHAN, PageBrk ));
end;

setbreak( LineBrk_getbreak,#lf&#ff,null,"IAN" );
setbreak( PageBrk_getbreak,#ff,null,"IAN" );
setbreak( CommaBrk_getbreak,",",null,"IS" );
if ARGC = 1 then begin
    print( "Create file containing changed pages."&crlf&
	"Usage: UPDATE outfile = newsource, oldsource"&crlf );
    call( 0,"EXIT" );
end;
ArgParse( OUTFILE, INFILES, PHI, Args );
if not props(INFILES) then call(0,"EXIT");
open( ICnew_getchan,"DSK",0,4,0, 266*66,B,E );
lookup( ICnew,FNnew_scan(datum(INFILES),CommaBrk,B),E );
if E then usererr(E,2,"Lookup failure for "&FNnew&" ","X");
open( ICold_getchan,"DSK",0,4,0, 266*66,B,E );
lookup( ICold,FNold_scan(datum(INFILES),CommaBrk,B),E );
if E then usererr(E,2,"Lookup failure for "&FNold&" ","X");
if props(OUTFILE) then setprint( datum(OUTFILE), "F" );

while not E do begin
    string HDnew,PGnew,PGold;
    HDnew := InHead( ICnew );
    InHead( ICold );
    PGnew := InPage( ICnew );
    PGold := InPage( ICold );
    if not equ( PGnew, PGold ) then print( HDnew, PGnew );
end;

release( ICnew );
release( ICold );
setprint( null, "T" );
call( 0, "EXIT" );
end $
