.library RECORD.DFS;
.Sec Requirements and Specifications,Spec:
.ind requirements; ind specifications; ind general specifications;

This section deals with the general specification of
language and system features.
This is not intended as a complete specification,
rather guideline to be used in developing a complete specification.

The language is to be used to express commands and groups of commands
(procedures) to the %executive system%.
The executive language combined with the executive system will
replace and upgrade the service provided by the module %COMCON% in
the %P033 monitor%.
Important and significant new features include
.myList
--control of more than one process from a single terminal
--execution with flow control of commands from a file 
--preparsing of program arguments
--ability to emulate several user interfaces
.endList
In addition to this,
compatibility with the user interface offered by COMCON must be
maintained (the %albatross%).

.Ss Exec vs COMCON Usage;
.ind exec vs COMCON; ind COMCON vs exec;
COMCON will be maintained in a skeleton form to service those people
who would rather suffer.
As a result,
there will be occasion for people running without an EXEC to invoke
one to perform a brief task and then dispose of it.

In general,
the system will be designed with the user who is perpetually running
a %top-level EXEC% in mind.
The action of a user discarding his top-level EXEC and later replacing
it will be comparable to begining a new session in that all global
storage (including %TMPCOR%) may be lost.
Also note that if a subordinate EXEC is invoked,
it will not necessarily be able to access the global storage of its
parent.
This type of global access between generations is, however,
a desirable feature
and should be considered.

.Ss |Procedures (or commands)|;
.ind procedures; ind commands;
The term "procedure" will be used to describe any task or subtask
that may be invoked by the exec.
Procedures may be any of the following
.myList
--a %primative function%
--an %internal function%
--an %external function% (commands file)
--a %compiled external function%
--an %external program% (executable file)
.endList

A primative function is a command which is hardwired in to the
exec interpreter.
Few of these functions will be of any use to the user,
rather they will be used to build useful functions.
$$
If statistical analysis shows that a particular command is being
executed frequently and has high overhead associated with it,
it may be coded in as a primative for efficiency even though it
may not be primative by definition.
*

An internal function is a command procedure which has been declared
at some point during this instantiation of the exec.
This may be done in the %exec profile%.
The %profile% is an external procedure which executes automatically
upon exec instantiation (similar to an %init program%).
Once a procedure is defined,
it is stored in an internal form (after macro expansion) for future
calls as a procedure.

An external function is essentially a %command file%.
The file is a text file containing commands to be executed.
The file has the name of the command which invokes it.

A compiled external function is a command file which has been
compiled into a series of machine executable calls to primative
functions.
This executable code is saved in a core image file along with a
routine to obtain the %primative function library% routines for
the particular version of the exec the file was compiled under.
The program may then be protected or given license as any core image
file may.
The compiled function is therefore not sensitive to new versions of
the exec or private execs which may be incompatible.
The external function is treated in all ways identically to an external
program by the exec which is invoking it.

An external program is a program written in any language which has
been compiled,
linked and saved in a core image file.
The external program is treated in all ways identically to an external
function by the exec which is invoking it.

.Ss Top-down command files;
.ind command files;
.ind top-down command files;
The ability to obtain input data for subsystems from the same stream as
commands is desirable in many instances.
At the sacrifice of the reliability associated with the %do-with%
construct (see {SssRef DoWith}),
the user shall be able to specify the exec procedure as the default
standard input for subsystems (programs).
The result is that whenever a program enters input wait on its standard
input, the exec will supply the next statement from the procedure.
The declaration of %StandardInput% := "." would have effect within the
scope of the current block.  
Note the following example of how this will easily lead to chaos:
.chart
--{StandardInput _ "."
--SPOOL
--PRINT REMOTE 
--QUIT
--}
.endChart
Should the spool program have a bug which causes it to exit before
reading any input commands,
the exec would read "PRINT REMOTE" and run the lister program which
would try to print the file REMOTE on device LPT:.
In this example,
the spool program will not be allowed to read past the end of block "}".

.Ss Operations Requiring License;
All functions of the exec which require license (ie. sending mail,
GFDing, etc.) shall be provided by licensed utility programs
which may be executed by any unlicensed exec.
This is to allow private versions of the exec to be maintained by user
groups without requiring license.
Note that the system exec may actually be licensed so that it may
perform some of these tasks internally for efficiency.

The utility programs provided for this purpose shall be written in
such a way that the calling program may execute them, 
supply all necessary parameters,
and receive all results in a manner that is transparent to the user.
Any errors encountered should be able to be simply trapped by the
exec.

.Ss Services Available to Children;
Any program which is executed by the exec will be a child.
Children will be able to request various services from the parent exec
by executing certain instructions.
The instruction executed would normally be an illegal instruction or
illegal UUO but would be trapped by the exec which would take the
appropriate action.
If the parent is not an exec,
or is a version which does not recognize this instruction,
or the program is an orphan,
the instruction would be treated as any other illegal instruction and
cause a fatal error.
See {SsRef ITSeval} for a description of this feature in ITS DDT.

Examples of services which may be provided are
.chart
--executing a string of commands for the program
--passing arguments to the program
--returning results from the program
--setting and examining exec variables
.endChart

Note that by nature of the framing system,
grandchildren are normally invisible to the grandparent.
Therefore,
it would be normally impossible for the exec to handle requests from
its grandchildren.
The most likely procedure for handling these requests is to
have the child trap the request,
and in turn execute a request to its parent which passes a frame
handle to the grandchild so that the exec may actually perform the
operation.

.Ss Error Trapping;
The user should have complete control over how all errors are
handled.
The prefered method of implementation involves providing an internal
procedure for each class of error.
These procedures would be initialized to some default action when the
exec is started up.
The user may then redefine them at will to contain any procedure which
he may wish to execute for that error condition.

Note that a side effect of this method is that error handling will
be local to the block it is declared in.
If a block (or procedure)
is entered which wishes to perform a special function on a particular
error, it would redeclare the particular %error handler%.
The redefinition would be local to the block (or procedure) and would
revert to whatever was in effect before the procedure call when the
procedure exited.

.Ss Miscellaneous;
Several other subjects which may be considered to belong here are
actually found elsewhere in a chapter of their own.
This is due to the enormity of material on each.

