begin

require "(SAILIB)SAIL.DEF" source!file;
require "(SAILIB)FRMRUN.REQ" source!file;
require "(WRS)ARGS.REQ" source!file;
require 1 version;

string item	INFILE;
string item	OUTFILE;
integer item	KEYPOS;
integer item	KEYLEN;
integer item	RECLEN;
item		NUMERIC;
item		REVERSE;

label STPT,EXIT;

if ARGC = 1 then print( "TOKEN version ",cvos(memory['137]),crlf );
STPT:
if ARGC = 1 then begin
    print( "*" );
    ARGS := inchwl;
end;
datum(INFILE) := null;
ArgParse( OutFile, InFile, {KEYPOS,KEYLEN,RECLEN,NUMERIC,REVERSE}, Args );
if length(datum(InFile)) then begin
    integer PERR;
    if not props(KEYPOS) then datum(KEYPOS) := 1;
    if not( props(KEYLEN) or props(RECLEN) ) then begin
	datum(KEYLEN) := 81-datum(KEYPOS);
	datum(RECLEN) := 81;
    end
    else if not props(KEYLEN) then
	datum(KEYLEN) := datum(RECLEN)-datum(KEYPOS)
    else if not props(RECLEN) then
	datum(RECLEN) := 81 max (datum(KEYPOS)+datum(KEYLEN));
    if not props(OUTFILE) then datum(OUTFILE) := "TTY:";
    FRMRUN( "(SYS)SORT", F.CCL, PERR, "SOR",
	datum(OUTFILE)&
	"_"&
	datum(INFILE)&
	"/K"&
	(if props(NUMERIC) then "SN" else "X")&
	(if props(REVERSE) then "D" else "A")&
	cvs(datum(KEYPOS))&
	"."&
	cvs(datum(KEYLEN))&
	"/R"&
	cvs(datum(RECLEN))  );
end;

EXIT:
if ARGC = 1 then goto STPT;
call(0,"EXIT");

end $