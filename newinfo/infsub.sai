! utility procedures;

simple integer procedure Compare(string A,B);
begin
    integer A1,B1;
    while length(A) and length(B) do begin
	A1 _ lop(A) land '137;
	B1 _ lop(B) land '137;
	if A1 < B1 then return (-1);
	if A1 > B1 then return (1);
    end;
    return (0);
end;

procedure BOMB(string M); begin "BOMB"
  MSG(M);
  goto NXTCMD;
  end "BOMB";

procedure kill!temp(string FILE); begin "TD"
  integer array FOO[0:1];
  FOO[0]:=cvsix(FILE);
  FOO[1]:=!hl(-1)+location(FOO[0]);
  calli(!hl(2)+location(FOO[0]),'44);
  if not !SKIP! then begin "try-disk"
    integer A,B,I;
    getformat(A,B);
    setformat(-3,0);
    open(I_getchan,"DSK",17,0,0,0,0,!SKIP!);
    lookup(I,cvs(call(0,"PJOB")),!SKIP!);
    if not !SKIP! then rename(I,null,null,!SKIP!);
    release(I);
    setformat(A,B);
    end "try-disk";
  end "TD";

string procedure read!temp(string NAME;
	reference boolean FLAG); begin "RT"
  integer A,B,I;
  string DATA;
  DATA:=tmpin(NAME,FLAG);
  if not FLAG then return(scan(DATA,8,I));
  getformat(A,B); setformat(-3,0);
  open(I_getchan,"DSK",1,1,0,256,!SKIP!,!SKIP!);
  lookup(I,cvs(call(0,"PJOB")),FLAG);
  if not FLAG then DATA:=input(I,8);
  close(I); release(I);
  setformat(A,B);
  return(DATA);
  end "RT";

boolean procedure LOCATE(string S;
		reference record!pointer(NODE)N;
		record!pointer(NODE)R(null!record)); begin "LOCATE"
  integer INDEX,SLEN,BRK;
  record!pointer(NODE)F,T;
  string TOK;
  recursive procedure LOCATOR(record!pointer(NODE) M); begin "LOR"
    record!pointer(NODE)T;
    T:=M;
    while T and not F do begin
      if equ(node:NAME[T][1 for SLEN],TOK)
	then F:=T;
      if T=M
	then T:=node:DOWN[T]
	else T:=node:NEXT[T];
      end;
    if M neq null!record then begin
      T:=node:DOWN[M];
      while T and not F do begin
        LOCATOR(T);
        T:=node:NEXT[T];
        end;
      end;
    end "LOR";
  F:=null!record;
  if R
    then T:=R
    else T:=CN;
  while S do begin
    TOK:=scan(S,7,BRK);
    SLEN:=length(TOK);
    if (F=null!record) and BRK then T:=root;
    F:=null!record;
    LOCATOR(T);
    if F=null!record then return(false);
    T:=F;
    end;
  N:=T;
  return(true);
  end "LOCATE";


! file utility procedures;

simple boolean procedure SEC!HEAD(string S); begin "SEC!HEAD"
  own string T;
  own integer BRK;
  if lop(S) neq "$" then return(false);
  T:=scan(S,2,BRK);
  if BRK neq ";" then return(false);
  if equ(t[1 for 4],"MENU") or equ(t[1 for 4],"TEXT") then begin
    SEC!TYPE:=lop(T);
    SEC!NAME:=T[4 to inf];
    SEC!TITLE:=scan(S,3,BRK);
    return(true);
  end;
  return(false);
end "SEC!HEAD";

string procedure GET!LINE; begin "GET!LINE"
  string LINE;
  LINE:=NEXT!LINE;
  NEXT!LINE:=input(INCHAN,1);
  !FILE!:=!PAGE!:=false;
  if BRK='14 then begin
    !PAGE!:=true;
    NEXT!LINE:=input(INCHAN,1);
  end;
  if EOF or (!PAGE! and !FORM! and SEC!HEAD(NEXT!LINE))
    then !FILE!_ !PAGE!_ true;
  return(LINE);
end "GET!LINE";

boolean procedure OPEN!NODE(record!pointer(NODE)N;
	integer T("TEXT") ); begin "OPEN!NODE"
  ! NOTE: return codes are:
    0 - file found,
    1 - file not found,
    2 - file found but file type not found;
  !FORM!:=false;
  lookup(INCHAN,node:FILE[N]&ME,FLG);
  if FLG then return(1);
  !FORM!:=SEC!HEAD(NEXT!LINE:=input(INCHAN,1));
  !PAGE!:=false;
  !FILE!:=true;
  if not !FORM! then return(0);
  while (not EOF) and (not equ(node:NAME[N],SEC!NAME)) do
    GET!LINE;
  if EOF then return(1);
  if T=SEC!TYPE then return(0);
  if T="M" then return(2);
  do GET!LINE until !FILE!;
  if (T=SEC!TYPE) and equ(node:NAME[N],SEC!NAME) then return(0);
  return(2);
end "OPEN!NODE";

integer procedure CRE!DATE;
begin "CRE!DATE"
  integer array LB[1:6];
  integer I;
  fileinfo(LB);
  I:=ldb(point(11,LB[3],23));	! creation time;
  dpb(LB[3],point(12,I,17));	! creation date;
  dpb(ldb(point(2,LB[2],20)),point(2,I,5));
  return(I);	! 14-bit date in LH, 11-bit GMT time in RH;
end "CRE!DATE";

procedure MENU!SCAN(record!pointer(NODE)N;
	string L); begin "MENU!SCAN"
  own string S;
  L:=L[2 to inf];
  node:FILE[N]:=scan(L,2,BRK);
  node:NAME[N]:=(if BRK=":"
    then scan(L,2,BRK)
    else node:FILE[N]);
  node:TITLE[N]:=(if BRK=";"
    then scan(L,3,BRK)
    else null);
end"MENU!SCAN";

