


1.0  INTRODUCTION

The purpose  of  this  document  is  to  outline  the  steps
necessary   to  distinguish  simple  hardware  crashes  from
software crashes or unknown crashes.  The reader  should  be
familiar  with  the PDP10 instruction set, page map function
and format, internal device status bits (APR, PI, etc.)  and
should know how to use DDT.



2.0  DISCLAIMER

Diagnosing hardware from software crashes on the  -10  is  a
very tricky buisiness - many of the reasons for crashing can
be in  a  specific  situation  can  be  either  hardware  or
software caused.  Hardware failures can cause the monitor to
execute STOPCDs (stop codes) originally inserted  to  detect
software   problems.   Additionally,  software  crashes  can
sometimes have confusing enough symptoms to fool the analyst
into  thinking some obscure hardware problem is responsible.
Therefore, whenever in this document it  is  suggested  that
such  and  such  a  crash condition is software or hardware,
what is meant is that our experience has shown  that  it  is
MOST  LIKELY  to  be  software  or  hardware,  and  that the
alternative reason must be considered  also.   For  example,
the  parity  error  flag  in  APR status usually signifies a
hardware error, but there is a small chance that the monitor
executed  an  instruction  to  turn  the  flag on (has never
happened as  far  as  we  know).   At  other  times,  it  is
necessary  to interpret the first level symptom in the light
of what the monitor was doing at the time in order to make a
software  vs.   hardware  diagnosis  -  if we get an illegal
instruction trap  crash,  and  the  instruction  in  UPT+424
doesn't match the one at c(UPT+425)-1, it is possibly caused
by software setting an EPT map slot incorrectly, and  it  is
also   possibly   caused   by  the  hardware  garbaging  the
instruction before it got executed.



3.0  USING CRSHID TO IDENTIFY CRASH FILES.

Crash files are usually found on directory (SYS) with  names
like  CRA001.SAV,  CRA002.SAV,  etc.   To  start examining a
crash file, find out what monitor version the crash file  is
of.   To do this, one can run the program (M33)CRSHID.  Lets
say you want to look at CRA003.  First, type

        .RUN (M33)CRSHID;(SYS)CRA003

CRSHID  will  come back with a line of output describing the
crash.  For example, in the case of  CRA003,  lets  say  the
output from CRSHID looks like the following:

Beginning Crash Analysis                              Page 2


        25 SEP 2031 D54-P034/F-3 $? #1376-KL CRA007, Base type 7,
           CH1/CLOCK1:CLKINT+7, StopPC/1 Input ring processing time-out.

The date and time (in the local time of the username you are
logged  into)  the system name and monitor version, a dollar
sign ($) followed by a question mark, which is used later by
crash  analysts  to  indicate  what type of crash this is by
replacing the question  mark  with  a  single  character  as
follows:

        $H      hardware
        $S      software
        $O      operator caused or induced
        $N      network
        $U      unknown

The  name  of  the  crash  file  follows  next,  followed by
information that CRSHID extracts from the crash file.   This
information  is  in  most cases a preliminary analysis only,
and often needs to be corroborated by  actually  looking  at
the crash file.

CRSHID also writes whatever output you see on  the  terminal
into  the  file  CRSHID.LOG in the directory you are running
in.  Any old CRSHID.LOG file is superceded.  Since it  takes
CRSHID  a  while to generate this file, it is suggested that
after running CRSHID once that you refer to  the  CRSHID.LOG
file afterwards.

If you run CRSHID without specifying which  crash  file,  it
defaults  to  all crash files currently in (SYS).  (I.E.  if
you just type RU (M33)CRSHID).



3.1  CRSHID Output For BOOTS LOADED Crashes.

The output for BOOTS LOADED crashes appears as follows:

23 OCT 2237 V25-P034/G $? #733-KI CRA005, StopPC/SCNSER:BADPRT+2

If there are any parity errors or other processor error bits
present in CONI APR, they will appear on the line also  (see
section  on  parity  errors).   The  output  shows  that the
monitor has executed what is known as a "STOPCD", which is a
macro  that  generates  an instruction to deliberately crash
the monitor.  This type of  crash  can  be  caused  by  both
hardware  and  software,  and the only way to determine what
type of crash it is  is  to  look  at  the  PC  shown  after
"StopPC/"  (in  this  example the PC is in the module SCNSER
and the STOPCD macro it executed is at  location  BADPRT+2.)
Put  the  microfiche  for  the  module in the reader, lookup
BADPRT in the cref listing in the back, and start looking at
the  code.   (See  section  on  how to setup a crash file in
FILDDT)
Beginning Crash Analysis                              Page 3


3.2  Base Initiated Crashes

The base will cause the PDP10 to crash itself by  depositing
into  location  30  of PDP10 memory for a number of reasons.
Some of these reasons are because the base has  detected  an
error  in  itself, and some of these reasons are because the
base has detected an error in the PDP10.  A  base  initiated
crash  is characterized by SYSCRS containing a zero, and the
contents of  SAV30  and  location  30  in  the  crash  being
identical  and  not  equal to 1 (which is what the operators
usually deposit in location 30 to bring  the  system  down).
The reason the base brought the -10 down can be found in the
first  8  bit  byte  of  location  KEY620  (say  to   FILDDT
KEY620$8o/).  The currently known codes are as follows:

1       "Host crashing due to base crash."
        (Usually never seen)

2       "MIC error or MIC reject tring to read key."
        (This also appears when host fails to refresh key - frequently
         seen in deposit 30 and BOOTS LOADED crashes)

3       "Read bad key from host."
        This happens if the data in the key cell is not the magic
        number the -10 is supposed to put there and is not the
        number the base writes there either. Hardware causes - MIC
        failure with no error indications causing bad data to be read,
        software causes - monitor clobbered location containing key
        cell data, monitor clobbered key cell and is not refreshing it.

4       "Bad data type or port number from host."
        This usually turns out to be a software problem - the network
        service sends a port number greater than the number of ports
        the monitor told the base it had, or network service sends
        a bad message type (first byte) to the base. The location
        ORP620 contains the number of words past the start of
        the output ring (symbol ORING) where the message can be found.
        If someone has clobbered the output ring or the base's
        output ring take pointer (ORP620), this crash can happen.
        Print out the message by typing "ORP620[ $Q+ORING$8O/"
        Check message number against table of known good message
        types to be sent out (listing can be found in beginning
        of network service module SCNSER). Make sure the
        number in ORP620 is not larger than the value of symbol
        "MSKORG" (type in "MSKORG=" to FILDDT to see what that value is.)

5       "Illogical data type from host."
        If you see this base init type, pass it on to more experienced
        crash analysts. There is probably a problem in the base
        or -10 software.
        

6       "MIC busy trying to read host (IN10)."
        This is due to a hardware problem in either the memory
        interface (MIC) or the -10 memory itself.
Beginning Crash Analysis                              Page 4


7       "Input ring processing time-out."
        This is almost always due to a loop in the -10 monitor.
        It also happens during the parity error scan sometimes.
        (The PC at the time of the -10 going down is in location
        CH1 - see if that PC is in the parity error scan code.)
        An experienced crash analyst must follow the code, starting
        at the PC in CH1, to see what is causing the loop.

10      "MIC time-out error (sen 337)."
        A hardware problem with the MIC or -10 memory.

11      "Parity error from MIC (sen 237)."
        MIC has detected a parity error from -10 memory. Can be
        either -10 memory problem (more likely) or MIC problem
        (less likely)

12      "MIC busy for 232 cycles in addr portion of 'look'."
        Another hardware problem.

13      "Host told base to crash...this is a no-no!!"
        Usually not seen, requires further analysis.

14      "MIC busy (look) from prior operation in 'look'."
        Hardware problem.

15      "Overran block i/o table."
        Either Net software or -10 software problem.

16      "Terminate block input req. is invalid."
        Net software or -10 software problem.

17      "Base crash...power failure."
        Environmental problem.

20      "Base crash...manual restart."
        This happens when operator restarts base manually,
        and is logged as a network failure.

21      "Base crash...."
        Unused.

22      "Base crash...GCI crash."
        Base problem - get network support group to obtain and analyze
        a dump of the base.

23      "Base crash...WCD crash."
        Base problem.

24      "Base crash...WCI crash."
        Base problem.

25      "Base crash...GCOL crash."
        Base problem.

26      "Base crash...speed crash."
Beginning Crash Analysis                              Page 5


        Base problem.

27      "Base crash...unidentified crash."
        Base problem.

30      "Base crash...."
        Unused
31      "Base crash...WWI crash."
        Base problem.

32      "Base crash...empty crash."
        Base problem.

33      "Base crash...parity error."
        Base hardware problem - parity error in base's memory.

34      "Base crash...bad 201 interrupt."
        Base hardware problem - faulty sync line hardware.



3.3  Examples Of CRSHID Output For Base Initiated Crashes

Input ring timeout:

14 OCT 1615 V25-P034/D-3 $? #733-KI CRA002, Base type 7,
   CH1/SCHED1:PAGWK1+3 Input ring processing time-out.

Illogical data type from host, type 5:

20 NOV 1544 C22-P034/G-2 $? #1332-KL CRA002, Base type 5,
   CH1/usr+562661, StopPC/usr+777777 Illogical data type from host.

Read bad key from host:

8 OCT 1651 V27-P034/F-3 $? #629-KI CRA002, Base type 3, CH1/usr+1,
   StopPC/0 Read bad key from host.

Base power failure:

17 NOV 2338 H31-P034/G-1 $? #657-KI CRA018, Base type 17, CH1/usr+1,
   StopPC/usr+777777 Base crash...power failure.




3.4  CRSHID Output For Crashes Where APR Status Bit Are Set

Usually, if  any  APR  status  bits  are  set,  a  processor
interrupt  is  generated  and the monitor either HALTs (exec
mode parity errors), executes a STOPCD (APRFAT)  or  dies  a
horrible  death because things were messed up enough to stop
the processor from executing the code it  normally  does  to
handle the error bit.
Beginning Crash Analysis                              Page 6


3.5  Examples Of APR Status Bit Errors


24 OCT 0415 V30-P034/G $? #574-KI CRA004, Parity, NXM, Base type 2,
   CH1/FILIO:SETFCT+2, StopPC/ERRCON:EXCMPE+3 MIC error or MIC reject
   tring to read key.
Notice that in the above example, parity error and NXM flags
were  on  in  the  APR status, and StopPC was also set which
technically  classifies  this  as  a  BOOTS  LOADED   crash.
However,  something  else is going on, and whatever happened
to cause the parity error is probably  responsible  for  the
stopcode,  which  in  this case is due to a page fault for a
page that should not have been referenced (access  bit  off,
exec  address  space).  The MIC error or MIC reject is often
seen in association with BOOTS LOADED crashes.

31 OCT 0507 V30-P034/G $? #733-KI CRA007, NXM, StopPC/PICON:APRFAT

This   crash   was   an  ordinary  NXM,  and  the  processor
successfully arrived at the STOPCD that it was  supposed  to
for NXM errors.  It is equally probable that a NXM crash can
be hardware or software.  To determine which,  you  must  1)
find  out  which  memory location was referenced that caused
the NXM;  2) See if the page map slot for that  location  is
setup  to a value which does not exceed the available amount
of memory on the system.  Finding out which memory  location
is easy on a KL - the location ERASTS contains the result of
a RDERA instruction  if  the  crash  code  was  successfully
executed   (see  DECsystem10  system  reference  manual  for
description of  the  bits).   The  bits  14-35  contain  the
physical  address of the failure if a reset hasn't been done
before the RDERA got a  chance  to  execute  (sometimes  the
operator  can't  dump  the  monitor  unless  he  resets  the
machine).  If the RDERA data isn't latched, it will  contain
the  last physical address the monitor had to actually fetch
from memory (as opposed to the cache), so watch out for this
possiblility.  

On the KI, F3, and KS, there is no handy  ERA  register,  so
one  has to guess at which of the last few memory references
before the APR interrupt caused the NXM.  Look at the PC  in
location  CH1, which is a few instructions away from the one
that caused the NXM.  Keep in mind that the processor  could
have  jumped to the place close to where the PC was when the
interrupt actually came in, and in that case it might not be
possible  to  find the memory reference that caused the NXM.
The other alternative is to look at all the map slots in the
UPT and the EPT.  The map slots should be found in %UPT thru
%UPT+1037, and in EPT+200 thru EPT+377.  On F3, KS, and  KL,
EPT+600 thru EPT+757 have the slots for exec virtual 0-337.
