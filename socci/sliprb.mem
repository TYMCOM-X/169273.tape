From: SLIAPL10
Date: JANUARY 30,1981 15:37
please type out memo

(slibaras)netpb.mem

thanks
Hi Ernie. I have a couple of problems/requests tied to APL-NET
development. 

1) APL-NET communicates with a slave APL processor on another hosts
to do file operations. recently, I was very surprised at the response time
for low volume requests, as I was using 2 hosts with very light loads.

I went on several wrong tracks to attempt to isolate the long response
time, and finally did some statistics on the response time. I discovered
the following:

most of my transactions took .6 seconds (a very good time indeed), with
some taking exactly 14 seconds more (14.6). I figured the problem
might be tied to a block io time-out problem of some sort.

the way we do block io, is to initiate block io with an auxibs of length
oct 614. then all transfers shorter than #614 are followed by a yellow ball
in order to terminate input wait at the other end.

This appears to work randomly. I tried waiting (HIBER) a second before
sending out the yellow ball, but in that case, i got a systematic 14 sec wait
(15.6 sec  <14+1+.6>). that sample size was small, so I don't trust this
information 100%. I also tried padding all blocks to length 614; there was
no extra wait, but an average response time of 4.5 secs, accounted by
the extra data sent each way.

Do you have any idea of what the problem might be? or should I research
the problem some more?


SAMPLE DATA (response time for the same transaction <read 50 chars on remote file>
  0.7 14.6  0.6 14.6 14.6 14.6 14.6 14.9  0.7  0.9  0.7  0.6  0.7  0.6 14.6  0.9  0.6
 14.8 14.6 14.6  0.6  0.8  0.6  0.6  0.7  0.6 14.6  0.7  0.6 14.6 14.6 14.6  0.7  0.7
 14.6 14.8  0.6 14.6 14.6 14.6  0.8 14.7 14.6  0.7 14.6 14.6 14.6  0.7 14.6  0.8  0.6

2) We have an application for multiple terminals on a job, and have
introduced an AUXSLV facility in APL-NET, but we need the inverse
function, to tranform a slave port back to be the command port. Can
you do anything about that?

regards, jp
From: SLIAPL10
Date: FEBRUARY 4,1981 9:57
YES IT DOES LOOK LIKE THE YELLOW BALL IS NOT RELIABLY TERMINATING THE INPUT
AT THE OTHER END. WE ARE USING THE AUXCAL TO SEND THE YELLOW BALL, NOT HIBER.
ALSO, THE WAIT TIME IS 14 SECS, NOT 20.
I WILL TRY TO GET MORE INFORMATION TO YOU, IF WHAT I HAVE SENT IS NOT ENOUGH.


From: SLIAPL10
Date: FEBRUARY 4,1981 10:07
THE NON TERMINATING INPUT UNFORTUNATELY DOES NOT OCCUR IF THE CIRCUIT
IS BUILT TO THE SAME HOST. THIS PROHIBITS OUR WRITING A SMALL PROGRAM EASILY
WHICH EXHIBITS THE SAME BEHAVIOR. WRITING AND DEBUGGING SUCH A PROG. 
WOULD TAKE ABOUT A WEEK, BECAUSE TESTING COMMUNICATING PROGS 

From: SLIAPL10
Date: FEBRUARY 4,1981 15:19
more on our pb in file
(sliapl10)net2.mem
We have done some more research  about the 14 sec delay and bloc io, while
attempting to reproduce the problem in minimal context for you.

The receiving end of the BIO transfer has interrupt armed on
reception of a yellow ball. ( the interrupt routine does nothing, but is just
there to prevent unwanted orange ball reflection, as orange balls
are used elsewhere for re-synch.).

When we remove the "interrupt on yellow ball", we no longer observe
the delay.

We cannot use this as a permanent solution, because our re-synch. system would
not work.

I believe the base is confused with yellow balls when it is doing BIO, with
short blocs and yellow ball interrupts are enabled. As I told you
in the previous memo, if the sender waits a sec before sending a yellow ball,
then we systematically get the 15 (14+1) sec wait.

Could it be that if the yellow ball arrives "in the same packet" as the
short bloc, the base interprets the yellow ball as a BIO input termination,
but that if the YB gets there later, it first looks at "interrupts
enabled on YB"?

I'm aware that you are not responsible for NETWORK debugging,
but could you possibly pass this information to the right person?

regards, jp
From: SLIAPL10
Date: FEBRUARY 9,1981 10:54
Thank you for info about RESET and Slaved ports. We will clean up accordingly.

The timing problem with BIO is becoming critical to our operations. We are now
sure that the problem only occurs ifthe slave machine has interrupts
armed on yellow ball. Contrarilly to a former hypothesis, the slave always
gets the yellow ball interrupt, whether or not the yellow ball has successfully
terminated the bloc input wait. Removing the "interrupt on yellow ball",
works, but our resynchronisation mechanism does not.

I don't know what to do at this point to solve the problem.
I will only code the minimal set in MACRO if you tell
me that it is the only way that you'll consider the problem. My
other choice is to redesign our SYNCH mechanisms with "numbered" balls,
but that is not a trivial task, and I'm not sure that I won't discover
another BASE or Monitor related problem.

What do you suggest?
jean-pierre
From: SLIAPL10
Date: FEBRUARY 23,1981 13:36
please read files
(SLIAPL10)14.sec
and (SLIAPLQA)master.doc
for information and program references reg. our 14 second delay problem.
jp


From: SLIAPL10
Date: FEBRUARY 23,1981 13:37
by the way, the master and slave programs must be run on different host to
exhibit the delay problem.


From: SLIAPL10
Date: FEBRUARY 26,1981 13:09
DID YOU GET A CHANCE TO LOOK AT OUR MASTER/SLAVE COMMUNICATION DELAY
PROBLEM? JP
Hi. We went to the necessary trouble to create the minimal set
of instruction to reproduce our 14 sec. delay problem.

programs: MASTER and SLAVE in account
(SLIAPLQA)
on hosts 90,83, and 930, reproduce the condition nicely. Instead of
transmitting data blocs, as in APL-NET, they tranmit
sec. from GMT 0. and the master print differences. We discovered while
testing this program that GMT ref time is not identical on all machines!!!!
the program attempts to determine an average value of GMT for accuracy purposes. you will find an explanation of the programs
in file
(SLIAPLQA)MASTER.DOC.

Tell me if you need more to go on. thanks, jp

MASTER and SLAVE reproduce the state of APL,when
-MASTER sends a "short" block in block io mode,ended with a yellow ball
-SLAVE answers with a short block  ,ended with a yellow ball

Interrupts on yellow and orange balls are tehe same as APL.

USE
-because "gmt midnight" is not the same on two different hosts,MASTER and
SLAVE try to have a better reference time.But that implies an
imprecision on measures.So MASTER first prints the maximum possible
imprecision (in seconds).

Then MASTER prints * and waits for input of the number of samples 
 (0 or carriage return implies exit of MASTER and logout of SLAVE)
for each sample, the master prints the delay for the message to reach the slave, 
followed by the delay for the answer to come back.
t1:TIME WHEN MASTER sends a block
T2: TIME WHEN SLAVES RECEIVES IT (IT IMMEDIATELY ANSWERS)
T3:TIME WHEN MASTER receives answer
MASTER prints t2-t1 and t3-t2 FOR EACH SAMPLE
these values are sometimes lower than 2 seconds,sometimes higher than 14 sec.

the tests have been made with 83 ASSEMBLED AS THE SLAVE HOST
(to use on another host,the word HOST in MASTER must be changed)
BUT BEAR IN MIND THAT MASTER AND SLAVE SYSTEMES MUST BE DISTINCT FOR
THE PROBLEM TO APPEAR.
I HOPE YOU HAVE ENOUGH TO GO ON.

/m.o. pilloy
From: SLIAPL10
Date: FEBRUARY 27,1981 12:07
I DON'T KNOW WHETHER THIS INFORMATION IS OF VALUE TO YOU,
BUT IF MASTER AND SLAVE ARE O THE SAME MACHINE (WHETHER THE
BASE IS A MICRONODE OR TYMNET BASE), WE NEVER EXPERIENCE
THE LONG DELAY. ANOTHER INFORMATION IS THAT THE LONG DELAY IS
PRACTICALLY IN THE DIRECTION MASTER TO SLAVE.
WE HAVE ONLY SEEN A LONG DELAY IN THE OTHER DIRECTION
(SLAVE TO MASTER) A FEW TIMES, BUT ONLY ON THE FIRST SAMPLE!?!
(THIS SECOND PIECE OF INFORMATION APPLIES TO TESTS ON DISTINCT HOSTS,
OF COURSE).


From: SLIAPL10
Date: FEBRUARY 27,1981 12:12
RE PREVIOUS MESSAGE, I'M NOT SURE "DISTINCT" IS AN ENGLISH WORD.
ANYHOW, IN FRENCH IT MEANS "DIFFERENT".
JP


From: SLIAPL10
Date: MARCH 1,1981 12:46
I AM NOT ABSOLUTELY SURE THAT REMOVING THE YELLOW BALL INTERRUPT ALWAYS
CANCELS OUT THE DELAY. THAT INFORMATION COMES FROM EARLY TESTS, WITH
AN INSUFFICIENT NUMBER OF SAMPLES. I WILL TRY IT AGAIN ON MONDAY.

THE YELLOW BALL INTERRUPT ROUTINE IN APLNET DOES NOTHING.
IT IS ONLY THERE TO PREVENT AUTOMATIC REFLECTION OF ORANGE BALLS
IN CASE A STRAY YELLOW BALL REACHES THE OTHER END, SINCE WE USE
ORANGE BALLS AS A SIGNAL FROM THE SLAVE TO THE MASTER TO INDICATE
THAT THE SLAVE IS AGAIN READY TO RECEIVE COMMANDS, AFTER A
POSSIBLE DE-SYNCHRONISATION. SO I DON'T UNDERSTAND
WHAT YOU MEAN WHEN YOU SAY THAT
"THE YELLOW BALL INTERRUPT MIGHT INTRODUCE A DELAY IN  THE
PROGRAM SOMEWHERE THAT AFFECTS THE TIMING".


From: SLIAPL10
Date: MARCH 3,1981 7:39
I re-read your mail about the 14 sec delay. on Feb 27, 19:30, you say
"I also noticed from trying the programs that
the delay occurred <<<only in the master to slave direction>>>",

in all our samples, the second figure is the one above 14 secs, that is the
time difference for the "slave to master reply". In all our tests, the only
time we ever got a delay in the master to slave direction was on the
first sample out of a series. There seem to be a high correlation
between this occurence (delay in first transactoin), and generally
high number of delays in the total samples.


From: SLIAPL10
Date: MARCH 3,1981 7:44
IBM sofware frequently responds to the BREAK signal from a terminal.

Is there a way to send such a signal down a circuit with AUXCAL'S?


From: SLIAPL10
Date: MARCH 4,1981 9:25
I don't understand what you mean by sending more data after the Yellow BALL.
In APLNET and in the MASTER/SLAVE simulation of what APLNET does,
we wait for the end of the reception before starting a new transaction. 
So where would the additional data "cancelling" the Yellow Ball 
come from?



From: SLIAPL10
Date: MARCH 5,1981 18:07
DOES THEE EXIST TO YOUR KNOWLEDGE A MEANS TO BUILD A CIRCUIT TOWARDS
SOMETING OTHER THAN A TYMSHARE HOST? FOR EXAMPLE A TERMINAL HARDWIRED
TO A SPECIFIC TYMSAT PORT WITH AN AUTOMATIC ANSWER DATASET?
JP
   