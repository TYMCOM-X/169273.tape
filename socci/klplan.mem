


     1.0  GENERAL

     This plan is the implementation plan for converting the  TYMCOM-X
     monitor  to  the KL-10 processor.  After the end of this project,
     it is intended that the full  functionality  of  the  monitor  as
     currently running on KI-10 processors be supported.  In addition,
     some new features of the KL-10 will be exploited.

     The implementation is divided into separate stages.   The  object
     is  to  get  the  KL-10  running  some kind of monitor as soon as
     possible,  adding  less  critical   features   as   the   project
     progresses.

     The total completion times given in this document are  predicated
     on total availability of the resources specified as being needed;
     this includes hardware and personnel.



     2.0  STAGE I

     At the completion of this stage, the KL-10 will  have  a  running
     monitor,  although  the monitor must be bootstrapped with the aid
     of the KI-10 processor.  This will  require  either  presence  of
     operating  systems programmers at the KL-10 site or two datasets,
     one being connected to the KI and one to the KL.

     All tasks under this stage must be  coded  before  debugging  can
     begin.



     2.1  Conditional Assembly Scheme

     2.1.1  Task - Must determine the best way to allow generation  of
     monitors  for  both KI and KL processors from one set of sources.
     Will require conditional assembly of monitor  sources,  thus  the
     addition  of  a  small  parameter  file which specifies processor
     type.  Will require another directory to be  setup  in  which  to
     generate  .REL  and .SAV files for the KL monitor.  Miscellaneous
     adjustments  to  current  monitor  building  and  other   related
     procedures



     2.1.2  Personnel - Ernie Socci



     2.1.3  Hardware - Availability of  c37  for  1  or  two  days  to
     accomplish conversion.
KL-10 Implementation Plan                                       Page 2


     2.1.4  Total Completion Time - 4 days.



     2.2  CTY

     2.2.1  Task - ONCTYO, CTYTYP, and other critical monitor routines
     must be converted to use the KLDCP style cty



     2.2.2  Personnel - Randy Gobbel



     2.2.3  Hardware Requirements - Operational   KL-10   system   and
     companion KI, 1 day for debugging.



     2.2.4  Total Completion Time - 2 weeks coding, 2 weeks debugging.



     2.3  Initial Command Files

     2.3.1  Task - Must get enough command files  operational  to  run
     the KL-10 CPU.  Digital supplied command files probably adequate.



     2.3.2  Personnel - Ernie Socci



     2.3.3  Hardware Requirements - 



     2.3.4  Total Completion Time - 1 day.



     2.4  KI/kl Differences

     2.4.1  Task - 

     1.  Setup EPT map to account for the fact that exec virtual pages
         0-337 are now mapped.

     2.  Convert MAP instructions

     3.  Convert to new page fail word
KL-10 Implementation Plan                                       Page 3


     4.  internal device differences

         1.  apr

         2.  60 HZ clock simulation with interval timer

         3.  Simulate AC stack


     5.  Executive XCT instruction - convert to macro.




     2.4.2  Personnel - Ernie Socci



     2.4.3  Hardware Requirements - Operational   KL-10   system   and
     companion KI for 2 weeks, debugging.



     2.4.4  Total Completion Time - 2 weeks coding, 2 weeks debug.



     3.0  STAGE II

     This stage is aimed at  converting  the  bootstrap  programs  for
     running  on the KL and providing a method for getting them onto a
     KLDCP dectape.



     3.1  CTY

     3.1.1  Task - Create versions of BOOTS, PAKCOP, FTALOD which  use
     KLDCP CTY, and account for other KI/kl differences.



     3.1.2  Personnel - Randy Gobbel



     3.1.3  Hardware Requirements - KL system, companion KI system for
     2 weeks, debugging.
KL-10 Implementation Plan                                       Page 4


     3.1.4  Total Completion Time - 1 week coding, 1 week debugging.



     3.2  KLDCP Communication

     3.2.1  Task - Need a method for transferring  bootstrap  programs
     to  DECtape  or  other  media where KLDCP can read them.  Must be
     suitable for future releases of stand alone exec  mode  programs.
     Probably  can  be  accomplished through mechanism which exists in
     KLDCP to transfer data over a high-speed line.  Will  need  KLDCP
     listings to determine APT10 protocol.  Will need to write program
     to run on a TYMSHARE PDP-10 system to provide the data.   Another
     possible  way  of  doing this would be to establish a simple data
     transfer protocol between KLDCP and its KL-10 thru the DTE.  This
     would definitely require access to KLDCP sources.



     3.2.2  Personnel - Ernie Socci and Randy Gobbel



     3.2.3  Hardware Requirements - Need a third DL-11 whose line runs
     into a network node.



     3.2.4  Total Completion Time - 2 weeks coding, 2 weeks debugging.



     3.3  Command Files

     3.3.1  Task - Need additional command files to load in bootstraps
     which  take  account of bus mode, etc.  Write operator procedures
     for loading system from scratch.



     3.3.2  Personnel - Ernie Socci



     3.3.3  Hardware Requirements - KL system, companion KI.



     3.3.4  Total Completion Time - 1 week
KL-10 Implementation Plan                                       Page 5


     4.0  STAGE III

     The completion of this stage results in the KL-10 monitor running
     with the cache turned on.



     4.1  Cache Handling

     4.1.1  Task - 

     1.  System init code to turn on cache, invalidate

     2.  Formulate optimal cache strategy

     3.  Insert cache sweep logic into disk and tape drivers

     4.  Devise method for specifying areas of physical  memory  which
         is to have the cache turned off

     5.  Locate all areas of physical memory which must be uncached

         1.  Channel command lists

         2.  Base/Host communication region

         3.  Block IO buffers (maybe sweep instead).

         Note that "disbatch" base will not be supported.




     4.1.2  Personnel - Randy Gobbel and Ernie Socci



     4.1.3  Hardware Requirements - Operational   KL-10   system   for
     debugging, KI-10 companion system.



     4.1.4  Total Completion Time - 2 weeks coding, 2 weeks  debugging
     for each person.



     5.0  STAGE IV

     This stage will provide a substitute  for  the  DK-10  microcycle
     clock currently in use in KI-10 systems.
KL-10 Implementation Plan                                       Page 6


     5.1  Accounting Clock

     5.1.1  Task - Use  KL-10  EBOX-MBOX  runtime  meter  to  generate
     substitute  for microcycles.  adjust parameters to get TRUs to be
     as close as possible to TRUs on KI systems.



     5.1.2  Personnel - Randy Gobbel



     5.1.3  Hardware Requirements - KL system.



     5.1.4  Total Completion Time - 1 week coding, 3 weeks debugging.



     6.0  STAGE V

     This stage will take advantage of KL-10 internal parity  checking
     features.



     6.1  KL Parity Handling

     6.1.1  Task - Previous to the completion of this task, the system
     will  handle  AR/ARX  parity traps in a very simple manner.  This
     task will put full retry capability and complete error  reporting
     into the parity error code.



     6.1.2  Personnel - Ernie Socci



     6.1.3  Hardware Requirements - KL system.



     6.1.4  Total Completion Time - 2 weeks coding, 2 weeks debugging.



     7.0  STAGE VI

     This stage will replace KLDCP command  files  with  an  automatic
     system initialization method.  The operator will not have to type
     any cryptic commands to KLDCP to perform his necessary tasks.
KL-10 Implementation Plan                                       Page 7


     7.1  Operator Interface Program

     7.1.1  Task - Write a  PDP-11  program  which  runs  under  KLDCP
     through  which  all  operator tasks are performed.  automatically
     determines memory interleave mode, loads boots at proper spot  in
     core, loads microcode, etc.



     7.1.2  Personnel - Randy Gobbel and Ernie Socci



     7.1.3  Hardware Requirements - KL system, stand alone for testing
     and developing.



     7.1.4  Other Requirements - KLDCP  sources,  operational   PDP-11
     assembler to assemble KLDCP and the program itself.



     7.1.5  Total Completion Time - Who knows.



     8.0  STAGE VII

     This provides a method for loading diagnostics from a stand alone
     3330 type disk pack connected to the PDP-11 thru an SA-11.



     8.1  SA-11 Support In KLDCP

     8.1.1  Task - Code and debug a  FILES-11  interface  routine  for
     KLDCP to replace its RP04 driver.



     8.1.2  Personnel - Unknown



     8.1.3  Hardware Requirements - PDP-11 with  DECtapes  and  SA-11.
     Not  necessary  to  be  connected  to  KL  system  unless project
     specification requires it for some reason.
KL-10 Implementation Plan                                       Page 8


     8.1.4  Total Completion Time - 4 weeks coding, 4 weeks  debugging
     (tentative).



     8.1.5  Other Requirements - KLDCP sources and assembler.



     9.0  MILESTONES

     1 March


     1.  ernie starts KI/kl differences change

     2.  Randy starts CTY code



     15 March


     1.  KI/kl difference code complete

     2.  CTY code complete.

     3.  KL monitor diverges from KI monitor (KI development now  uses
         new conventions necessary for KL.  )

     4.  KLDCP listings available

     5.  Ernie starts KLDCP xfer method code

     6.  Randy starts converting BOOTS, PAKCOP, MAGRIM, etc.



     1 April


     1.  Xfer method coding complete

     2.  Bootstrap program conversion complete

     3.  Randy and Ernie begin cache coding



     15 April


     1.  Cache coding complete.
KL-10 Implementation Plan                                       Page 9


     2.  KL-10 CPU operational

     3.  KLINIK dataset operational

     4.  Third DL-11 operational, hooked up to a network node.

     5.  Randy and Ernie begin KL debugging.



     15 May


     1.  KL monitor debugging complete.

     2.  KI CPU available for another system.

     3.  KL available for C37 timesharing permanently.

     4.  KL monitor SMERGED back into main monitor.

     5.   6.03 listings available

     6.  Randy starts accounting clock coding.

     7.  Ernie starts parity error coding.



     22 May


     1.  Accounting code complete.

     2.  Randy starts accounting code debug.



     1 June


     1.  Parity error code compete

     2.  Ernie starts parity error debug

     3.  Randy continues with acct code debug and adjustment.



     15 June

     Two weeks safety margin.


     1 July
KL-10 Implementation Plan                                      Page 10


     1.  KL available for inhouse systems



     1 September


     1.  KL available for customer systems

     2.  SA-11 support available for customer systems

     [End KLPLAN.MEM]
   