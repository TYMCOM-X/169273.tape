COMMENT \ INTRODUCTION
	THIS IS THE FILE OF MACRO DEFINITIONS AND GLOBAL AC
	ASSIGNMENTS FOR THE SAIL COMPILER, THE SAIL RUNTIME
	ROUTINES.  NEEDLESS TO SAY, NOT ALL PORTIONS ARE USED
	BY ALL PEOPLE.
\
for @' A in (SA,VER,REN,UUO,SYM,FF,REL,41,DDT,CNI,TPC,UUO,APR,HRL) 
    <	EXTERNAL .JB'A
	DEFINE JOB'A <.JB'A>
    >
COMMENT \  SWITCHES : AN INTRODUCTION
Conditional assembly runs rampant in SAIL.  Most of the switches are used to
 select options (debug or no debug, etc.) Some are only valid at Stanford.

We have a program which, by reading the SAIL files and looking for switch-
 testing macros, can do the conditional assembly once and for all (removing
 the conditional stuff from the files.  It is such a set of files which
 we normally send out, so if you see some switches and macros below that
 never get referenced, it's because that code was taken out of your files.

The conditional assembly switches are assigned in the following files:

DCS	DCS	_2				;SLS (experimental) system
	FTDEBUG _1				;include debugging in cmplr

WOM	DCS	_1				;WOM (experimental) system

HEAD
	DCS	_if NDEF then 0 else DCS
	SIXSW	_if NDEF then STANSW else SIXSW ;sixbit PPN's
	HEDSYM	_if NDEF then 0 else HEDSYM	;With HEDSYM on, assembling HEAD
						; yields HEAD.REL, a symbol
						; file for the USERCON function

GLB	GLOBSW	_1				;runtimes know about glb mdl

LOW	SEGS	_1				;upper or lower assembly
	LOWER	_1				;assembles SAILOW or GLBLOW
	UPPER	_0

UP	SEGS	_1
	LOWER	_0
	UPPER	_1				;assembles UPPER or GLOBAL

FILSPC IS PART OF HEAD AS OF NOV 1973
FILSPC	FILXXX	_SAISGn				;SAIL upper segment name
	SLOFIL	_SAILOW				;SAIL lower segment name
GLOB <
	FILXXX	_GLBSGn			;global model upper segment name
	SLOFIL	_GLBLOW			;global model lower segment name
>;GLOB
	SGDEVC	_0			;device for segment files
	SGPPNN	_0			;PPN for segment files
	LOCSYM	_0			;no local uppers in lower file
	NOPROT	_0			;want upper segment protected

DB	FTDEBUG	_1

SAIL	LEAPSW	_1				;LEAP exists
	FTDEBUG	_if NDEF then 0 else FTDEBUG
	GLOBC	_if LEAP and STANSW then 1 else if NDEF then 0 else GLOBC
	PATSW	_if NDEF then 0 else PATSW	;compile AOS/SOS to PAT words
	RENSW	_if NDEF then 1 else RENSW	;compile Re-entrant Code
	TMPCSW	_if NDEF then (if STANSW then 0 else 1) else TMPCSW
					;TMPCOR UUO available and used
	LOADVR  _if NDEF then 54 else LOADVR (for differences in block code
			for required rel files,libraries in LOADER 54)
	 SAILRUN was a switch controlling some runtimes.  Now runtimes will
	  be assembled to assume a compiler (since that's common anyway).
	BAISW	_if STANFO then 1 else 0	;Bail only at stanford

GOGOL	UPPER	_if NDEF then 0 else 
	UPPER	_if NDEF then 0 else UPPER
	LOWER	_if NDEF then 0 else LOWER
	SEGS	_UPPER or LOWER
	GLOBSW	_if NDEF then 0 else GLOBSW
	RENSW	_if NDEF then 1 else RENSW	;assemble Upper-Segment Library
	 SAILRUN  no longer exists.


; SWITCH SETTINGS & MACROS

These macros come in pairs, and exist so that the above-mentioned
 program will have an easy job of it.  The meaning of each pair is
 obvious.  They may be used only as in the following example:
SW <		;or NOSW, starting in col. 1 (any comment out here)
(code to appear under this switch)
>;SW			or NOSW, must be same, any comment out here
 These things may be nested without confusing anyone.

Here are the macros
\

COMMENT \ The sites for SAIL compilers which want some code changes
	CMU	Carnegie-Mellon University
	IMSSS	Stanford University IMSSS (version of TENEX)
	ITS	MIT (Incompatible Timesharing System)
	JPL	Jet Propulsion Laboratory
	NIH	National Institutes of Health
	PARC	Xerox Palo Alto Research Center
	SRIAI	Stanford Research Institute AI
	SUAI	Stanford University AI
	SUMEX	Stanford University Medical Exchange - AI in Medicine
	TYMSHR	TYMSHARE (TYMCOM-X monitor)
	UOR	University Of Rochester


define def2 # (name,reason) <
	DEFINE name <IFN reason,>
	DEFINE NO#name <IFE reason,> 
  >
FOR @# SITE IN (CMU,ITS,JPL,NIH,PARC,SRIAI,SUMEX,UOR,DEC) <
	DEFINE site <IFN site#SW,>
	DEFINE NO#site <IFE site#SW,>
  >
def2(TYMSHR,TYMSW)	;TYMSHARE code (names are not regular)
def2(STANFO,STANSW)	;SU-AI code (names are not regular)
def2(IMSSS,IMSSSW)	;IMSSS code (names are not regular)
def2(BAIL,BAISW)	;DEBUGGER STUFF
def2(GLOB,GLOBSW)	; global model [GLOBC is different] 
def2(GLOC,GLOBC)	;global compiler can service non-global code 
def2(HACK,HACKSW)	;TEMPORARILY VERSION FOR STANFORD WILL DISAPPEAR NEXT SAISG
def2(KI10,KI10SW)	;CPU IS A KI10 (or KL10)
def2(KL10,KL10SW)	;CPU IS A KL10
def2(LOW,LOWER)		;lower bootstrap for 2 seg thing (only used in runtime) 
def2(LEP,LEAPSW)	;this compiler understands LEAP
def2(NRC,NRCSW)		;NEW-STYLE RECORD DESCRIPTORS
def2(REC,RCDSW)		;RECORDS ARE CONDITIONAL UNTIL DEBUGGED BETTER
			;RECSW WAS A VARIABLE IN THE COMPILER
def2(REN,RENSW)		;Re-entrant output (comp), runtimes (runtim)
def2(RENC,RENCSW)	;The compiler itself is reentrant
def2(RGC,RGCSW)		;RECORD GARBAGE COLLECTION (INSTEAD OF REF CNT)
def2(SFDS,SFDLVL)	;Operating system supports SFDs 
			;note: SFDLVL can be gtr 1, was IFG,IFE
def2(TENX,TENXSW)	;FOR TENEX (or TOPS-20) SYSTEMS
def2(UP,UPPER)		;upper segment code (only used in runtime)
def2(URHASH,URHSW)	;NEW LEAP HASH ROUTINES AND SEARCHES
def2(URLEAP,URLPSW)	;TRUE FOR DESCENDING ITEM ALLOCATION
			;FALSE FOR LOCALS ASCENDING, GLOBALS DESCENDING
def2(URSTAT,URSTSW)	;TRUE IF YOU WANT LEAP SEARCH STATISTICS
def2(XCOM,XCOMSW)	;COMPILER SAVE/RESTART (EXTEND) FACILITY
; ** CONDITIONAL SETTINGS ** SITE DEPENDENT

IFDEF AUXCAL,<STSW (TYMSW,1)>	;AUXCAL ONLY DEFINED AT TYMSHARE
IFDEF SPCWAR,<STSW(STANSW,1)>	;SPCWAR ONLY DEFINED AT STANFORD AI
IFDEF GTJFN, <STSW(TENXSW,1)>	;GTJFN on TENEX
IFDEF JGTJFN,<STSW(TENXSW,1)>	;JGTJFN on TOPS-20
STSW(TENXSW,0)			;normally non-tenex (over-ride follows)
FOR @# SITE IN (CMU,ITS,JPL,NIH,PARC,SRIAI,SUMEX,UOR,TYM,STAN,IMSS) <
	IFNDEF site#SW, <?site#SW__0> >

STANFO <
STSW (SIXSW,1)
?KI10SW__1
?KL10SW__1
?SFDLVL__0		;STANFORD DOESN'T HAVE SFD'S
>;STANFO	

CMU < ;**** EXTRA SWITCHES FOR CMU ******
DEFINE GGAS <IFN GASSW,>	;cmu version of global segment
DEFINE NOGGAS <IFE GASSW,>	;inverse
DEFINE GGGON <^^ GLOBSW__GASSW>	;
DEFINE GGGOFF <^^ GLOBSW __0>	;USED TO SELECT SOME OF SU-AI GLOB STUFF
STSW(GASSW,0)			;NOT USUALLY CMU GLOBAL
STSW(GLOBSW,0)			;CMU WILL DIDDLE THIS SWITCH DIRECTLY
?SFDLVL__0		 ;CMU DOESN'T HAVE SFD'S
>;CMU

IMSSS <;DEFAULT SETTINGS AT IMSSS
?TENXSW__1			;TENEX AT IMSSS
?KI10SW__1			;AND A KI
?SIXSW__1			;USE SIXBIT PPN'S FOR LOADER AT IMSSS
>;IMSSS

PARC <
?TENXSW__1			;TENEX AT PARC
?KI10SW__1
?SIXSW__0
>;PARC

JPL <
?TENXSW__1
?SIXSW__0
>;JPL

SRIAI <
?TENXSW__1			
?SIXSW__0
>;SRIAI

SUMEX <
?IMSSSW__1			;MOST IMSSS FEATURES
?SIXSW__0			;EXCEPT DONT USE SIXBIT
?TENXSW__1			;BUT IS TENEX
?KI10SW__1			;IS KI
>;SUMEX

UOR <
?DECSW __ 1			;DEC TOPS-10 MONITOR
?KL10SW__1			;IS KL
?STANSW __ 0			; NOT AT STANFORD
?GLOCSW __ 0			; NO GLOBAL MODEL
?GLOBSW __ 0			; NO GLOBAL MODEL STUFF
?URHSW __ 1			; USE NEW HASH TECHNIQUE
?URLPSW __ 1			; ALLOCATE ITEMS TOP DOWN
>;UOR

TYMSHR<
?SFDLVL__0			;NO SFD'S AT TYMSHARE
?KI10SW__1			;ALL KI'S
STSW(KL10SW,0)			;NO KL10 code for production (confusing)
>;TYMSHR

TENX <
?RENCSW__1			;WANT A RE-ENTRANT COMPILER
?RENSW__1			;WANT A RE-ENTRANT RUNTIME
?DECSW__0			;NOT A DEC SYSTEM
?STANSW__0			;IN FACT, EXPLICITLY NOT STANFORD
?GLOBSW__0			;NOT USUALLY GLOBAL FOR TENEX
?GLOBC__0			;
STSW(LOADVR,=54)			;TENEX SITES SEEM TO HAVE V. 54
?SFDLVL__0			;NO TENEX SITE HAS SFD'S
>;TENX


;; ** Conditional settings ** set if not defined above
STSW (TENXSW,<IMSSSW!PARCSW!JPLSW!SRIAISW!SUMEXSW>)
STSW (DECSW,<1-<STANSW!TENXSW!CMUSW!TYMSW>>)
STSW (HACKSW,STANSW)	;ONLY AT STANFORD
STSW (RENCSW,0)		;NOT USUALLY A REENTRANT COMPILER
STSW (HEDSYM,0)		;USUALLY NOT A USER-TABLE SYMBOL GENERATOR
STSW (KL10SW,.CPU.-2)	;.CPU. IS 4 FOR KL, 2 FOR KI, 1 FOR KA, 0 FOR 6
STSW (KI10SW,.CPU.-1)	;(funny character '26 = ^V = XOR)
STSW (XCOMSW,1)		;COMPILER SAVE/RESTART USUALLY SUPPORTED
STSW (SFDLVL,5)		;NORMAL SITE ALLOWS SFDs
STSW (RCDSW,1)		; NORMAL SITE ALLOWS RECORDS
STSW (RGCSW,RCDSW)	; NORMAL SITE USES RECORD GARBAGE COLLECTION
STSW (NRCSW,1)		; USUALLY A NEW-STYLE RECORD SYSTEM (now) ****
STSW (GLOBSW,0)		;USUALLY NOT A GLOBAL SEGMENT BEING MADE
STSW (SIXSW,0)		;usually PPNs are not SIXBIT
STSW (BAISW,1)		;USUALLY ON (BAIL)
STSW (URLPSW,1)		; from 9 on default to ROCHESTER LEAP 
STSW (URHSW,URLPSW)	;	ROCHESTER LEAP NEEDS ROCHESTER HASH
STSW (URSTSW,0)		;GENERALLY DON'T WANT THIS
IFG URLPSW-URHSW,<	;IF URLPSW = 1 & URHSW = 0
	PRINTX	URLPSW REQUIRES URHSW [FAIL ERROR ON NEXT LINE]
	#SWERR
>

KL10<	?KI10SW__1		;NORMALIZE
>;KL10
NOKI10<	?KL10SW__0
>;NOKI10

FOR SWITCH IN (CMUSW,ITSSW,JPLSW,PARCSW,SRIAISW,SUMEXSW,UORSW,STANSW,TYMSW,IMSSSW,TENXSW,DECSW)
 <IFN SWITCH <
	PRINTS * SWITCH: ON *
>>
IFG STANSW+TENXSW+CMUSW+TYMSW-1,<	;AT MOST ONE OF THESE CAN BE SET
	PRINTX	SWITCH INCOMPATIBILITY [TOO MANY SITES TURNED ON]
	#SWERR
>



STSW(TSTSEG,0)	;TRUE MEANS TEST SEGMENT BEING USED
	stdef(filxxx,<SIXBIT /SAISGT/>)
	stdef(slofil,<SIXBIT /SAILWT/>)
	stdef(sgdevc,<SIXBIT /DSK/>)
	STANFO < stdef(sgppnn,<SIXBIT /  SAIL/>) >;STANFO
	?LOCSYM__1
	?NOPROT__1

stdef(FILXXX,<SIXBIT /SAISG9/>)
stdef(SLOFIL,<SIXBIT /SAILOW/>)		;PRODUCTION SAIL
stdef(SGDEVC,<SIXBIT /SYS/>)
stdef(SGPPNN,<0>)
STSW(LOCSYM,0)		;DON'T WANT LOCAL SEGMENT SYMBOLS
STSW(NOPROT,0)		;DON'T WANT SEGMENT PROTECT IF NOT GLOBAL

stdef(procsr,<ASCIZ /SAIL: />)		;FOR PRINTOUT OF PROCESSOR
stdef(rpgfil,<SIXBIT /QQSAIL/>)		;FOR COMPIL PURPOSES
stdef(defext,<'SAI'>)			;DEFAULT EXTENSION
stdef(BKTDEV,<FILEXX(<SYS>,3)>)
stdef(BKTFIL,<FILEXX(<BKTBL.BKT>,9)>)	;Standard break tables

stdef(liblow,<FILEXX(<SYS:LIBSA9>,10)>)	;REQUIRED LIBRARY
stdef(libhi,< FILEXX(<SYS:HLBSA9>,10)>)	; (HISEG VERSION)
stdef(bailod,<FILEXX(<SYS:BAIL.REL>,12)>)	;RESIDENCE OF BAIL
stdef(baipds,<FILEXX(<SYS:BAIPD9.REL>,14)>)	;JFR pd's FOR RUNTIMES

stdef(opdev,<SIXBIT /SYS/>)	;DEVICE FOR OPCODE FILE
stdef(opname,<SIXBIT /2OPS2/>)	;NAME (EXTEN ALWAYS OPS)
stdef(opppn,<0>)		;WHERE IT'S AT

GLOB <
DEFINE FILXXX <SIXBIT /GLBSG9/>
DEFINE SLOFIL <SIXBIT /GLBLOW/>
DEFINE SGDEVC <SIXBIT /SYS/>
DEFINE SGPPNN <0>
?NOPROT__1
?LOCSYM__1
>;GLOB

TENX <
DEFINE FILEXX (tnxstr,tnxlen,t20str,t20len) ...

IFN TSTSEG,<
	stdef(FILXXX,<FILEXX(<<SAIL>T-SAISGT.SAV>,18,<SAI:T-SAISGT.EXE>,16)>)
	stdef(SLOFIL,<SIXBIT /SAILWT/>)
	stdef(LIBLOW,<FILEXX(<LIBSAT.REL>,10,<LIBSAT.REL>,10)>)
	?LOCSYM__1
	?NOPROT__1

stdef(BAILOD,<FILEXX(<<SAIL>BAIL.REL>,14,<SAI:BAIL.REL>,12)>)
stdef(BAIPDS,<FILEXX(<<SAIL>BAIPD9.REL>,16,<SAI:BAIPD9.REL>,14)>)
stdef(FILXXX,<FILEXX(<<SAIL>T-0-SAISG9.SAV>,20,<SAI:T-0-SAISG9.EXE>,18)>)
stdef(SLOFIL,<SIXBIT /LOWTSA/>)
stdef(SLOLOD,<ASCIZ/SYS:LOWTSA,/>)		;FOR INTERFACE TO LOADER
stdef(LIBLOW,<FILEXX(<<SAIL>LIBSA9.REL>,16,<SAI:LIBSA9.REL>,14)>)
stdef(LIBHI,< FILEXX(<<SAIL>HLBSA9.REL>,16,<SAI:HLBSA9.REL>,14)>)
stsw(LOCSYM,0)
stsw(NOPROT,0)

STSW(SEGPAG,630)		;PAGE WHERE THE SEGMENT STARTS
STSW(STARTPAGE,610)		;PAGE WHERE CHANNEL BUFFERS BEGIN
STSW(JFNSIZE,20)		;NUMBER OF CHANNELS ALLOWED

stdef(RUNLOD,<FILEXX(<<SUBSYS>LOADER.SAV>,18,SYS:LINK.EXE,12)>)
stdef(LODTFN,<FILEXX(LOA.TMP,7,LNK.TMP,7)>)
stdef(BKTFIL,<FILEXX(<<SAIL>BKTBL.BKT>,15,BKTBL.BKT,9)>)
stdef(BKTDEV,<FILEXX(DSK,3,SAI,3)>)
stdef(UDTFIL,<FILEXX(<<SAIL>UDDT.SAV>,14,<SYS:UDDT.EXE>,12)>)
stdef(OPFILE,<FILEXX(<<SAIL>3OPS3.OPS>,15,<SAI:3OPS3.OPS>,13)>)

	CX RESET,0	;0 RESET IO
	CX DDTIN,1	;1 EXT-GET DDT CHAR.
	CX SETDDT,2	;2 SETDDT LOC IN PROTECTED JOB DATA
	CX DDTOUT,3	;3 EXT:SEND DDT CHAR.
	CX DEVCHR,4	;4 DEVICE CHARACTISTICS
	CX DDTGT,5	;5 GET DDT MODE
	CX GETCHR,6	;6 DEVICE CHAR.(DIFF. NAME)
	CX DDTRL,7	;7 RELEASE DDT MODE
	CX WAIT,10	;10 WAIT TILL DEVICE INACTIVE
	CX CORE,11	;11 CORE UUO
	CX EXIT,12	;12 EXIT
	CX UTPCLR,13	;13 CLEAR DEC TAPE DIRECTORY 
	CX DATE,14	;14 GET DATE
	CX APRENB,16	;16 ENABLE APR FOR TRAPPING
	CX SWITCH,17	;20 RETURN DATA SWITCHES
	CX REASSIGN,21	;21 REASSIGN DEVICE TO ANOTHER JOB
	CX TIMER,22	;22 RETURN JIFFY CLOCK TIME
	CX MSTIME,23	;23 RETURN TIME OF DAY IN MS
	CX GETPPN,24	;24 RETURN PROJECT-PROGRAMMER NUMBER
	CX TRPSET,25	;25 SET PI TRAP LOC, AND USER IO
	CX TRPJEN,26	;26 DISMISS INTERRUPT TO EXEC MODE
	CX RUNTIM,27	;27 RETURN TOTAL JOB RUNNING TIME
	CX PJOB,30	;30 RETURN JOB NUMBER
	CX SLEEP,31	;31 SLEEP FOR N SECONDS, THEN RETURN TO USER
	CX SETPOV,32	;32 SET PUSH DOWN OVERFLOW TRAP
				;(FOR COMPATIBILITY ONLY)
	CX PEEK,33	;33 PEEK INTO SYSTEM CORE.		;JS
	CX GETLIN,34	;34 GET NAME OF TTY
	CX RUN,35	;35 RUN COMMAND
	CX SETUWP,36	;36 SET USER WRITE PROTECT
	CX REMAP,37	;37 REDO CORE MAP
	CX GETSEG,40	;40 GET SEGMENT
	CX GETTAB,41	;41 GETTAB ILLEGAL AT STANFORD.
>;NOSTANFO
>;NOTENX




; VARIOUS DEFINITIONS OF USER UUO'S.
FLOAT_2B8	OPDEF	FLOAT	[2B8]
PDPFIX_<KAFIX>	OPDEF	PDPFIX	[KAFIX]		-> STANFO
FIXUUO_3B8	OPDEF	FIXUUO	[3B8]

DMOVE_120B8	OPDEF	DMOVE	[120B8]
DMOVEM_124B8	OPDEF	DMOVEM	[124B8]
DMOVN_121B8	OPDEF	DMOVN	[121B8]
DMOVNM_125B8	OPDEF	DMOVNM	[125B8]

FIXR_126B8	OPDEF	FIXR	[126B8]
FLTR_127B8	OPDEF	FLTR	[127B8]
KIFIX_122B8	OPDEF	KIFIX	[122B8]
ADJSP_105B8	OPDEF	ADJSP	[105B8]

DFAD_110B8	OPDEF	DFAD	[110B8]
DFSB_111B8	OPDEF	DFSB	[111B8]
DFMP_112B8	OPDEF	DFMP	[112B8]
DFDV_113B8	OPDEF	DFDV	[113B8]

DADD_114B8	OPDEF	DADD	[114B8]
DSUB_115B8	OPDEF	DSUB	[115B8]
DMUL_116B8	OPDEF	DMUL	[116B8]
DDIV_117B8	OPDEF	DDIV	[117B8]

IOERR._4B8	OPDEF	IOERR.	[4B8]
ERR._5B8	OPDEF	ERR.	[5B8]
SIXPNT_6B8	OPDEF	SIXPNT	[6B8]
ARERR_7B8	OPDEF	ARERR	[7B8]

RECUUO _ 10B8	OPDEF	RECUUO	[10B8]
DECPNT_11B8	OPDEF	DECPNT	[11B8]
OCTPNT_12B8	OPDEF	OCTPNT	[12B8]

ERRSPL_13B8	OPDEF	ERRSPL	[13B8]
SNGL_14B8	OPDEF	SNGL	[14B8]

TENX <
PUUO_15B8	OPDEF	PUUO	[15B8]
		OPDEF	TTCALL	[PUUO]
>;TENX
NOTENX <
PUUO_<TTYUUO>	OPDEF	PUUO	[TTYUUO]
		OPDEF	TTCALL	[TTYUUO]
>;NOTENX

JFOV_<JFCL 1,0>	OPDEF	JFOV	[JFCL 1,0]

		OPDEF	TRZ	[ANDCMI]
		OPDEF	TRC	[XORI]
		OPDEF	TRO	[IORI]

STANFO <
DPYOUT_703B8	OPDEF	DPYOUT	[703B8]
DPYCLR_701B8	OPDEF	DPYCLR	[701B8]
UINBF_704B8	OPDEF 	UINBF	[704B8]

?SEGSIZUUO 	_ 400022	;GET SIZE OF SECOND SEGMENT.
?CORE2UUO	_ 400015	;GET SOME MORE SECOND SEGMENT.
?GLBAR		__ 1000		;CURRENT LENGTH OF GLOBAL MODEL AREA.
>;STANFO

DSCR USER DATA AREA TEMPLATE  
DES These values serve as indices for the run-time routines
  into the user's data table. The table is necessary to allow
  the routines to be re-entrant.  The table is allocated
  in the SAILOR sequence at startup time; many of its values
  (data area bounds, etc.) are placed in it at that time.
 One can force re-initialization of this and all other dynamic
  areas by setting GOGTAB to 0 before next CORGET.
SEE XX descriptions for all these goodies directly below

 XX CLER,,1	; LINK TO STRING BLOCKS FOR STRING GARBAGE COLLECTOR
 XX UUO1	;TRADITIONAL LOC FOR GOGOL RETRN ADRS FOR ERROR MSGS.
 XX STRLNK	;LOADER LINK CHAINS
 XX SPLNK	;LINK END FOR SPACE ALLOCATION.
 XX SETLNK	;LINK END FOR SETS.
 XX SGROUT	;LINK UP STRING DSCRPTR GENERATOR ROUTINES HERE
 XX KNTLNK	;PROFILE COUNTER LINK END
 XX ST		;BOTTOM OF STRING SPACE
 XX STTOP	;TOP OF STRING SPACE 
 XX STLIST	;HEAD OF LIST OF STRING SPACES
 XX TOPBYTE	;NEXT FREE BYTE
 XX REMCHR	;-REMAINING FREE CHARS
 XX SGLIGN	;ON IF MUST BE ALIGNED TO FW BDRY (COMPILER ONLY).
 XX CHANS,20	; I/O CHANNEL POINTER TABLE (each points to a "CDB")
		; I/O BREAK TABLES (FOR INPUT SCANNING ROUTINES)
 XX BKTPRV		;0 for UNPRIVILEGED, non-0 for PRIVILEGED. 
 XX BKTPTR,4,,		;POINTERS TO CORGET BLOCKS OF 18 BREAKTABLES EACH
	DSPTBL__0		;BREAK CHAR DISPOSITION TABLE
	LINTBL__=19+DSPTBL	;LINE NUMBER DISPOSITION TABLE 
	BRKTBL__=19+LINTBL	;BREAK CHAR TABLE
	BKJFFO__=128+BRKTBL	;RESERVATION WORD
	BRKCVT__1+BKJFFO	;UPPER CASE CONVERSION
	BRKOMT__1+BRKCVT	;OMIT SPEED UP
	BRKDUM__1+BRKOMT	;%DQ% used to hold "Z" bit flag
 XX TTYCVT		; DITTO FOR TTY INPUT
 XX FSTATS		; FOR GETSTS
 XX PDL		;IOWD SIZE,BASE  FOR SYSTEM PDL
 XX SPDL	;XWD SIZE,BASE FOR STRING PDL
 XX ZAPBEG,,1	;BEGINNING OF SECOND SEGMENT COPY OF STUFF.
		;FOR GLOBAL MODEL ONLY.  <STANFO or CMU only>
;LEAP   THINGS.
 XX CURMES		;CURRENT MESSAGE.  <STANFO> 
 XX MAXITM		;CURRENT TOP ITEM NUMBER.
 XX OLDITM		;LINKED LIST OF OLD ITEMS (DUMP HEAP).
 XX INFOTAB		;POINTER TO "GOOD POINTER" BLOCK OF CORE.
 XX DATAB		;POINTER TO DATUM AREA.
 XX HASTAB		;POINTER TO THE LEAP HASH TABLE.
 XX FP1			;FREE STORAGE -- 1 WORD.
 XX FP2			;FREE STORAGE -- 2 WORDS.
 XX HASMSK		;THE MASK FOR HASHING INTO OUR HASH SPACE.
 XX RMASK1		;NEW MASK FOR MODIFIED LEAP ROUTINES
 XX RMASK2		;(RICK RASHID 3/15/76) WHICH IMPROVE
 XX RMASK3		;A XOR Y EQV Z AND X XOR B EQV Z SEARCHES
 XX RMASK4		;END OF NEW MASKS (3/15/76 -- IDES OF MARCH!)
 XX BRACKL		;POINTER TO LIST OF BRACKETED TRIPLE BLOCKS
 XX HASHP		;FOR PNAMES. XWD NEXT FREE ARRAY ENTRY,ARRAY BASE.
 XX MKBP		;MAKE BREAK-POINT
 XX ERBP		;ERASE BREAK-POINT
 XX PUBP		;PUT BREAK-POINT (NOT IMPLEMENTED)
 XX REBP		;REMOVE BREAK-POINT.(NOT IMPLEMENTED)
 XX ITMTOP		;MAXIMUM PERMISSIBLE ITEM NUMBER.
 XX LEABOT		; PTR TO SEARCH CONTROL BLOCK FOR DERIVED SETS ERASE. 
 XX FRLOC		; PTR TO CURRENT ACTIVE FOREACH CONTROL BLOCK POINTER
 XX SCBCHN		; PTR TO CHAIN OF ABANDONED SCB'S
 XX FREITM		;NUMBER OF FREE ITEMS REMAINING
 XX ARYDIR	;FOR TELLING FOUR ARRAY ROUTINES WHICH END IS UP.
 XX ARYLS	;A LINKED LIST (LUCKILY) OF STRING ARRAYS IN LEAP, AND SO FORTH.
		;THIS IS SO STRING GARB COLLECTOR CAN FIND THEM ALL.
 XX BLKTAB,3,3	;BASE OF BLOCK CONTROL TABLE
   XX LOWC	;LOW LIMIT OF ALLOCATABLE "BLOCK" CORE
   XX TOP	;UPPER LIMIT OF SAME
   XX FRELST	;POINTER TO BLOCK FREE STORAGE LIST
 XX XPAND	;PERMISSION TO EXPAND IN CORREL IF 0
 XX ATTOP	;REQUEST TO ALLOCATE OFF TOP OF CORE IF NON-0
 XX NOSHRK	;IF ON, CORREL NOT GIVEN PERMISSION TO SHRINK CORE
 XX USCOR2	;IF ON, CORGET WILL USE CORE2 ROUTINES.  <STANFO>
 XX BUFACS,10,,	;FOR BUFFER ALLOCATOR
XX ZAPEND,,1	;END OF SECOND SEGMENT AREA.  <STANFO>
XX USCOR2		;THE COPYCATS  <CMU>
XX ZAPEND,,1		;ditto ZAPBEG  <CMU>
 XX STBUCK,1,1		;USED IN STRING GCEEP TRACK OF BLOCKS
 XX OFFSET		;Distance to move a string space, see STRNGC
 XX STINCR		;String space increment size, see STRNGC
 XX STREQD		;String space threshold size, see STRNGC
 XX SGCCNT		;NUMBER OF TIMES STRNGC HAS BEEN CALLED
 XX SGCTIME		;Time of last GC if non-zero, else not enabled
 XX SGCTOTAL		;Total GC time while enabled (set SGCTIME -1 to enable)
 XX SGCNUM		;Number of strings collected last GC
 XX SGCWASTE		;Number of wasted words after last GC
 XX SRELOC
 XX CODAC		;SAVE AC 1 OVER CALLS ON "CODE" RUNTIME ROUTINE
 XX WDTH		;GLOBAL WIDTH FOR STRING CONVERSION ROUTNES
 XX DIGS		; "" FOR # OF DECIMAL DIGITS
 XX CDBLOC	;IF CHNL IS A CH #, @CDBLOC(USER) GETS ITS CDB ADDR
 XX FNAME	;ENTER-LOOKUP TABLE
 XX EXT
 XX WD3
 XX PRPN
 XX LONGWD		;LONG FORM LOOKUPS AND ENTERS POKE THIS
 XX LONG2		; AND THIS -- FILEINFO ROUTINE GIVES TO USER
 XX PROJ		;USED BY FILNAM ROUTINE
XX FUSER		; <TYMSHR>
XX FUSER1		;TYMSHARE USER NAMES <TYMSHR>
 XX RACS,13,,		;RE-ENTRANT ROUTINES SAVE HERE
 XX SGACS,14,,		;AVAILABLE ANY TIME IF YOU DO NOT CALL STRNGC
 XX STACS,14,,		;YET ANOTHER AC SAVE AREA
 XX PGNNFL
			?NPRIS__20	;NUMBER OF PRIORITIES
 XX PRILIS,NPRIS,, 	;PRIORITY LIST HEADERS
 XX GGDAD		;THE BASE FOR THE MAIN PROCESS (IF HAVE ONE)
 XX TIMER		;COUNTED DOWN FOR CLOCK INTERRUPTS
 XX SCHDRQ		;SET non-0 FOR SCHEDULER REQUEST (USED BY EVENTS)
 XX STKURT		;PLACE FOR STACKUNWINDER RETN ADRS
 XX INTQWP		;INTERRUPT NOTICE BUFFER WRITE PTR
 XX INTQRP		;READ PTR
 XX INTQWT		;TOP OF BUFFER 
 XX INTQWB		;BOTTOM OF BUFFER
 XX INTPRC		;INTERRUPT PROCESS BASE
 XX DISPAT		;DISPATCH TABLE FOR INTERRUPT LEVEL MODULE
 XX DFRINF		; AOBJN PTR TABLE FOR DEFERRED INTERRUPTS
 XX IPDP		;INTERRUPT PDP  <NOTENX>
 XX IPDP1		;<TENX>
 XX IPDP2		;<TENX>
 XX IPDP3		;<TENX>
 XX ISPDP1		;<TENX>
 XX ISPDP2		;<TENX>
 XX ISPDP3		;<TENX>
 XX TIMFRK		;<TENX>TABLE OF FORK HANDLES FOR INTERRUPT SYSTEM, PROCESSES
 XX IJBCNI		;JOBCNI FROM A DEFERRED INTERRUPT
 XX IJBTPC		;JOBTPC FROM DEFERRED INTERRUPT
 XX IRUNNR		;RUNNER AT TIME OF DEFERRED INTERRUPT
 XX ISPDP		;STRING PDP FOR INTERRUPT LEVEL  <NOTENX>
 XX $FSLIS		;LIST OF FREE STORAGE ALLOCATORS
 XX PRNINF		;$PRINT DEFAULTS
 XX BAILOC		;IF NONZERO, ADDRESS OF BAIL INTERCEPT ROUTINE
 XX JFRCEL		; USED TO BE XX <NOTHING>
 XX RSGCLK		;TWO WORD BLOCK FOR SGINS FOR STRNGC OF RECORD STRINGS
 XX RSGCL2		; AND A SECOND WORD
 XX STBLST		;HEAD OF CHAIN OF STRING DESCR ARRAYS FOR RECORDS
 XX RGCOFF		;SET THIS TO TURN OFF AUTO GC
 XX TGRADJ		;PUT PUSHJ ADR HERE TO ADJUST OWN TRIGGER LEVELS
 XX RGCRHO		;-1.0+1/"%FILL" LEVEL DESIRED FOR RECORD SPACES
 XX SPARUT,1,,		;SPARE USER TABLE ENTRIES
 XX PRTINF		;PRINT OUTPUT INFORMATION  XWD BITS,CHAN
 XX $$PROU		;PRINT OUTPUT TRAP FOR ALL STRINGS
 XX $$FINT		;USER FORMATTING FUNCTION FOR INTEGERS
 XX $$FREL		;USER FORMATTING FUNCTION FOR REALS
 XX $$FITM		;USER FORMATTING FUNCTION FOR ITEMS
 XX $$FSET		;USER FORMATTING FUNCTION FOR SETS
 XX $$FLST		;USER FORMATTING FUNCTION FOR LISTS
 XX $$FSTR		;USER FORMATTING FUNCTION FOR STRINGS
 XX $$FREC		;USER FORMATTING FUNCTION FOR RECORDS
 XX $$FLRL		;USER FORMATTING FUNCTION FOR LONG REAL
 XX PATHBL,4+SFDLVL,,		;PATH BLOCK  <SFDS>
 XX EXPCHR	;"@" OR "E" FOR REAL NUMBER EXPONENT CHARACTER
 XX SEGBOT	;ADDR WHICH SAIL FREE STORAGE MUST NOT EXCEED
		; (DEFAULT TO 400000 = LOWEST ADDR OF USER PURE CODE)
 XX CORINS	; CORE uuo hook (non-zero means this instead of core)
 XX BKGETC	; if non-zero, execute on entry to GETCHAN
 XX BKOPEN	; if non-zero, execute on entry to OPEN
 XX BKRELS	; if non-zero, execute on entry to RELEASE
 XX ENDREN	; END OF USER DATA TABLE


    