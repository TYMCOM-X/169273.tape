begin "scanax"
string source, result, answer;
integer break, desiredBreak;
string tran; integer table, mode;
integer ioChan,ioBrk,ioEof;
external integer $$PROU;

string CurrentHeader;
boolean found!error;
simple procedure header(string s);
if found!error
 then print( '15&'12, CurrentHeader_ s )
 else begin
	outstr('15&'12);
	outstr( CurrentHeader_ s );
      end;

simple procedure errPrint(integer chan; string ms );
begin	integer v;
outstr(" [errors also recorded on TBREAK.ERR] 
");
setprint("TBREAK.ERR","F");
found!error_ true; 
userCon($$PROU, v_0, 1);
print( '15&'12, CurrentHeader );
setprint( null, "B" );
print( ms );
end;

simple procedure setupRecording;
begin	integer v;
currentHeader_ null; 
found!error_ false; 
userCon($$PROU, v_ location(errPrint), 1);
end;
require setupRecording initialization;
procedure check( string operation; integer resLen, beginSource );
begin	string ms,ioIn,ioLeft;
ms_null;
if break neq desiredBreak			then ms_ "break";
if not equ(result,answer[1 for resLen])
 then ms_ (if length(ms) then ms&"," else null) & "result";
if not equ(source,answer[1+beginSource to inf])
 then ms_ (if length(ms) then ms&"," else null) & "source";
if length(ms) then print( "
 ", operation, ", t=", table, "["&mode, tran, "], b=", break,
	", l(r)=", length(result), 
	", l(s)=", length(source),
	", l(a)=", length(answer), " [", ms, "]" );
end;

procedure verify( integer endResult, beginSource );
begin
result_ scan( source, table, break );
check("r_SCAN(s_a,t,b)", endResult, beginSource ); 
useti(ioChan,1); 
result_ (if length(tran) > 1 then null else 0) & input(ioChan,table);
break_ ioBrk;
source_ input(ioChan,0);
check("r_INPUT(c,t);s_INPUT(c,0)", endResult, beginSource ); 
end;
procedure disp!check( integer bc, lRes; string src );
begin 
	simple procedure d!check;
	begin
	breakset(table,"", mode_"A"); source_src; verify(lres+1,lres+1);
	breakset(table,"", mode_"S"); source_src; verify(lres,  lres+1);
	breakset(table,"", mode_"R"); source_src; verify(lres,  lres  );
	end;

table_ bc;
			tran_"F";	d!check;
breakset(table,"","K");	tran_"K";	d!check;
breakset(table,"","Z");	tran_"KZ";	d!check;
breakset(table,"","F"); tran_"FZ";	d!check;
end;

string allc;
integer c;

procedure CheckStandard;
begin "checkStandard"	integer ltab, tries;
    procedure lcheck(string res; integer b);
	begin
	if table neq ltab then begin ltab_table; tries_0; end;
	tries_ tries+1;
	result_scan(answer, table, break); 
	if break neq b or not equ(res,result) 
	 then print("
SCAN:STDBRK #", table, ", try ", tries, " desired: ", length(res), 
		"/", b, ", but got ", length(result), "/", break );
	if b=0 and tries=1 then return;	COMMENT I/O ignores 0;
	if res=0 then lop(res);		COMMENT for I/O;
	result_ input(ioChan,table);
	if ioBrk neq b or not equ(res,result) 
	 then print("
INPUT:STDBRK #", table, ", try ", tries, " desired: ", length(res), 
		"/", b, ", but got ", length(result), "/", ioBrk );
	end;

    simple procedure rcheck(string res; integer b);
	begin 
	if length(res) then lcheck(res,b);
	lcheck(null,b);
	if not ( (break_lop(answer)) = (ioBrk_wordin(ioChan)) = b )
	 then print("
Error `LOP'ing: LOP=", break, ", WORDIN=", ioBrk, ", not ", b );
	end;

stdbrk(getchan); ltab_-1;

answer_allc; useti(ioChan,1); table_1;
lcheck(allc[1 to '12],'12);
rcheck('13&'14& allc[1+'16 to inf],0);

answer_allc; useti(ioChan,1); table_2;
lcheck(allc[1 for '12+1],'12);
rcheck(allc[1+'13 to inf],0);

answer_allc; useti(ioChan,1); table_3;
for c_ 0 step 1 until '10 do rcheck(null, c);
rcheck('11&'12,'13); 
rcheck('14&'15,'16); 
for c_ '17 step 1 until '40-1 do rcheck(null, c);
rcheck('40,'41); 
for c_ '42 step 1 until '177 do rcheck(null, c);
rcheck(null, 0);

answer_allc; useti(ioChan,1); table_4;
lcheck(allc[1 to '30],'30);
lcheck(allc[2+'30 to "0"],"0");
for c_ "1" step 1 until "9" do lcheck(null, c);
lcheck(allc[2+"9" to "A"],"A");
for c_ "B" step 1 until "Z" do lcheck(null, c);
lcheck(allc[2+"Z" to "a"],"a");
for c_ "b" step 1 until "z" do lcheck(null, c);
rcheck(allc[2+"z" to inf], 0);

answer_allc; useti(ioChan,1); table_5;
rcheck(allc[1 to '30],'30);
rcheck(allc[2+'30 to "0"],"0");
for c_ "1" step 1 until "9" do rcheck(null, c);
rcheck(allc[2+"9" to "A"],"A");
for c_ "B" step 1 until "Z" do rcheck(null, c);
rcheck(allc[2+"Z" to "a"],"a");
for c_ "b" step 1 until "z" do rcheck(null, c);
rcheck(allc[2+"z" to inf], 0);

answer_allc; useti(ioChan,1); table_6;
for c_ 0 step 1 until '30-1 do rcheck(null, c);
rcheck('30,'31);
for c_ '32 step 1 until "A"-1 do rcheck(null, c);
rcheck("ABCDEFGHIJKLMNOPQRSTUVWXYZ","Z"+1);
for c_ "Z"+2 step 1 until "a"-1 do rcheck(null, c);
rcheck("abcdefghijklmnopqrstuvwxyz","z"+1);
for c_ "z"+2 step 1 until '177 do rcheck(null, c);
rcheck(null,0);

answer_allc; useti(ioChan,1); table_7;
for c_ 0 step 1 until "0"-1 do rcheck(null, c);
rcheck("0123456789","9"+1);
for c_ "9"+2 step 1 until '177 do rcheck(null, c);
rcheck(null,0);

answer_allc; useti(ioChan,1); table_8;
lcheck(allc[1 to "0"],"0");
for c_ "1" step 1 until "9" do lcheck(null, c);
rcheck(allc[2+"9" to INF],0);

answer_allc; useti(ioChan,1); table_9;
rcheck(allc[1 to "0"],"0");
for c_ "1" step 1 until "9" do rcheck(null, c);
rcheck(allc[2+"9" to INF],0);

answer_allc; useti(ioChan,1); table_10;
for c_ 0 step 1 until "+"-1 do rcheck(null, c);
rcheck("+","+"+1);
rcheck("-.","."+1);
rcheck("0123456789","9"+1);
for c_ 2+"9" step 1 until "@"-1 do rcheck(null, c);
rcheck("@","@"+1);
for c_ "@"+2 step 1 until '177 do rcheck(null, c);
rcheck(null,0);

answer_allc; useti(ioChan,1); table_11;
lcheck(allc[1 to "+"],"+");
lcheck(allc[2+"+" to "-"],"-");
lcheck(allc[2+"-" to "."],".");
lcheck(allc[2+"." to "0"],"0");
for c_ "1" step 1 until "9" do lcheck(null, c);
lcheck(allc[2+"9" to "@"],"@");
rcheck(allc[2+"@" to INF],0);

answer_allc; useti(ioChan,1); table_12;
rcheck(allc[1 to "+"],"+");
rcheck(allc[2+"+" to "-"],"-");
rcheck(allc[2+"-" to "."],".");
rcheck(allc[2+"." to "0"],"0");
for c_ "1" step 1 until "9" do rcheck(null, c);
rcheck(allc[2+"9" to "@"],"@");
rcheck(allc[2+"@" to INF],0);

for c_13 step 1 until 18
   do if c neq break_getbreak
	 then print("table ",c," used?  Got ", break);
end;
simple procedure chkLres( integer Break; string style, desiredResult );
begin
result_ input(ioChan, table);
if equ(result, desiredResult) and ioBrk=break then return;
print("
table #", table, ", [", style, "] wanted: `", desiredResult, "' / ",
	break, "=-cvasc(", cvstr(-break),"), 
	but got: `", result, "' / ", ioBrk, 
		"=-cvasc(", cvstr(-ioBrk),")" );
end;

procedure ldispTest(integer bc);
begin
table_ bc;
useti(ioChan, 1); breakset(bc,null,"P");
chkLres( 0, "PASS",
	"00010" & '11 & "A Mixed Case line." & '15&'12 & '14 & '15&'12 &
	"00020" & '11 & "Another Mixed Case line." & '15&'12 );

useti(ioChan, 1); breakset(bc,null,"N");
chkLres( 0, "NOLINE",
	"A Mixed Case line." & '15&'12 & '14 & '15&'12 &
	"Another Mixed Case line." & '15&'12 );

useti(ioChan, 1); breakset(bc,null,"L");
chkLres( -1, "LINE", null );
chkLres( -1, "LINE", 
	"00010" & '11 & "A Mixed Case line." & '15&'12 & '14 & '15&'12);
chkLres( 0, "LINE", 
	"00020" & '11 & "Another Mixed Case line." & '15&'12 );

useti(ioChan, 1); breakset(bc,null,"E");
chkLres( -cvasc("00010")-1, "ERMAN", null );
chkLres( -cvasc("00020")-1, "ERMAN", 
	"A Mixed Case line." & '15&'12 & '14 & '15&'12 );
chkLres( 0, "ERMAN", 
	"Another Mixed Case line." & '15&'12 );

end;
string ioFile; integer drop,raise;
drop_19; raise_20;	comment avoid the STDBRK area;
ioFile_ "TBREAK.TMP";
allc_ 0;
for c_1 step 1 until '177 do allc_ allc & c;

open(ioChan_getbreak,"DSK",0, 1,1, 512,ioBrk,ioEof);
enter(ioChan, ioFile, ioEof);
out(ioChan,allc);
close(ioChan);
lookup(ioChan, ioFile, ioEof);

header("StdBrk: ");
CheckStandard;		COMMENT standard breaks when they allocate;
header("Specials: ");
desiredBreak_ "Z"; answer_allc;
breakset(1, null, "O");
setbreak(1, "Z", null, "I");	disp!check(1, "Z", allc );
setbreak(2, "Z",  "z", "I");	disp!check(2, "Z", allc );
setbreak(3, "Z", "zZ", "I");	disp!check(3, "Z", allc );
answer_allc[1 to "Y"] & allc["Z"+1 to INF];
setbreak(4, "Z",  "Y",  "I");	disp!check(4, "Z"-1, allc );
setbreak(5, "Z",  "Yz", "I");	disp!check(5, "Z"-1, allc );
setbreak(6, "Z",  "YZz","I");	disp!check(6, "Z"-1, allc );

header("StdBrk: ");
CheckStandard;		COMMENT standard breaks with no allocation;

header("Case Conversion:");
table_1;
setbreak(table, null, null, "IOSZF"); mode_"S"; tran_"ZF";
source_ allc; while length(source) mod (36%7) do source_source & 0;
answer_ source; desiredBreak_ 0;
verify( length(answer), length(answer) );

setbreak(table_raise,"","", "IOSZK"); mode_"S"; tran_"ZK";
source_ answer;
answer_ source[1 to "a"]& source[1+"A" to 1+"Z"] & source["z"+2 to INF];
verify( length(answer), length(answer) );

setbreak(table_drop, "","", "IOSZC"); mode_"S"; tran_"ZC";
source_ allc; while length(source) mod (36%7) do source_source & 0;
answer_ source[1 to "A"]& source[1+"a" to 1+"z"] & source["Z"+2 to INF];
verify( length(answer), length(answer) );

header("Line stuff: ");
close(ioChan);
enter(ioChan, ioFile, ioEof);
linout(ioChan,10);
out(ioChan,"A Mixed Case line." & '15&'12 & '14 & '15&'12 );
linout(ioChan,20);
out(ioChan,"Another Mixed Case line." & '15&'12);
close(ioChan);
lookup(ioChan, ioFile, ioEof);

result_ input(ioChan,0);
if ioEof and equ(result, "00010" & '11 & "A Mixed Case line." & 
		'15&'12 & '14 & '15&'12 & 
		"00020" & '11 & "Another Mixed Case line." & '15&'12)
 then else print("input(c,0) doesn't (initially) do PASS mode");

header("Line Numbers: ");
ldispTest(0);	comment table 0 is special;
setbreak(18,null,null,"IOS");
ldispTest(18);	comment table 0 is special; 
header("SETPL:");
  begin own integer page,line,sos; comment since it sticks;
    setpl(ioChan,line,page,sos);
    line_page_sos_23;
    ldispTest(0);	comment table 0 is special;
    if not (page=27 and line=2 and sos=cvasc("00020")+1)
     then print(" 
SETPL values bad: p", page, " l", line, " sos=", cvstr(sos) );
    line_page_sos_23;
    ldispTest(18);	comment table 0 is special; 
    if not (page=27 and line=2 and sos=cvasc("00020")+1)
     then print(" 
SETPL values bad: p", page, " l", line, " sos=", cvstr(sos) );
    line_page_sos_23;
    useti(ioChan,1); setbreak(18, '12&'14, null, "IPR");
    input(ioChan,18); input(ioChan,18); input(ioChan,18);
    if not(line=23=page) or IoBrk neq '12 then print("
Retaining LF mangles counts: l=", line-23, " p=", page-23 );
    setbreak(18, '14, '12, "IR"); comment ignore the LFs;
    input(ioChan,18); input(ioChan,18); input(ioChan,18);
    if not(line=24 and page=23) or IoBrk neq '14 then print("
Retaining FF mangles counts: l=", line-24, " p=", page-23 );
    breakset(18, null, "S"); comment skipover the FFs;
    input(ioChan,18); input(ioChan,18); 
    if not(line=2 and page=24) or IoBrk neq 0 then print("
Retaining FF mangles counts: l=", line-2, " p=", page-24 );
  end;

rename(ioChan,null,0,c);
release(ioChan);
end "scanax" $

    