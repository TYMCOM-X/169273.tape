BEGIN "DUMP"
require "lexcmp.rel" load!module;
require 200 system!pdl;
require 2000 string!pdl;

COMMENT	This routine will read any file & output the file as a dump of itself in the following line format!

addr\	octal	sixbit	ascii	decimal

from the start range through stop range.;

external boolean procedure llt(value string a; value string b);
external boolean procedure lgt(value string a; value string b);

integer start!range, stop!range, range!counter;
integer data!word, last!word, validity!flag;
integer eofin, line!count, page!count;
string file!name, dump!name;
	Preload!with        "       ","       ",
	"       ","       ","       ","       ","       ","       ",
	"       ","       ","       ","       ","       ","       ",
	"       ","       ","       ","       ","       ","       ",
	"       ","       ","       ","       ","       ","       ",
	"       ","       ","       ","       ","       ","       ",
	"CALL   ","INIT   ","       ","       ","       ","       ",
	"       ","CALLI  ","OPEN   ","TTCALL ","       ","       ",
	"       ","RENAME ","IN     ","OUT    ","SETSTS ","STATO  ",
	"GETSTS ","STATZ  ","INBUF  ","OUTBUF ","INPUT  ","OUTPUT ",
	"CLOSE  ","RELEAS ","MTAPE  ","UGETF  ","USETI  ","USETO  ",
	"LOOKUP ","ENTER  ","       ","       ","       ","       ",
	"       ","ADJSP  ","       ","       ","DFAD   ","DFSB   ",
	"DFMP   ","DFDV   ","DADD   ","DSUB   ","DMUL   ","DDIV   ",
	"DMOVE  ","DMOVN  ","KIFIX  ","EXTEND ","DMOVEM ","DMOVNM ",
	"FIXR   ","FLTR   ","UFA    ","DFN    ","FSC    ","IBP    ",
	"ILDB   ","LDB    ","IDPB   ","DPB    ","FAD    ","FADL   ",
	"FADM   ","FADB   ","FADR   ","FADRI  ","FADRM  ","FADRB  ",
	"FSB    ","FSBL   ","FSBM   ","FSBB   ","FSBR   ","FSBRI  ",
	"FSBRM  ","FSBRB  ","FMP    ","FMPL   ","FMPM   ","FMPB   ",
	"FMPR   ","FMPRI  ","FMPRM  ","FMPRB  ","FDV    ","FDVL   ",
	"FDVM   ","FDVB   ","FDVR   ","FDVRI  ","FDVRM  ","FDVRB  ",
	"MOVE   ","MOVEI  ","MOVEM  ","MOVES  ","MOVS   ","MOVSI  ",
	"MOVSM  ","MOVSS  ","MOVN   ","MOVNI  ","MOVNM  ","MOVNS  ",
	"MOVM   ","MOVMI  ","MOVMM  ","MOVMS  ","IMUL   ","IMULI  ",
	"IMULM  ","IMULB  ","MUL    ","MULI   ","MULM   ","MULB   ",
	"IDIV   ","IDIVI  ","IDIVM  ","IDIVB  ","DIV    ","DIVI   ",
	"DIVM   ","DIVB   ","ASH    ","ROT    ","LSH    ","JFFO   ",
	"ASHC   ","ROTC   ","LSHC   ","       ","EXCH   ","BLT    ",
	"AOBJP  ","AOBJN  ","JRST   ","JFCL   ","XCT    ","       ",
	"PUSHJ  ","PUSH   ","POP    ","POPJ   ","JSR    ","JSP    ",
	"JSA    ","JRA    ","ADD    ","ADDI   ","ADDM   ","ADDB   ",
	"SUB    ","SUBI   ","SUBM   ","SUBB   ","CAI    ","CAIL   ",
	"CAIE   ","CAILE  ","CAIA   ","CAIGE  ","CAIN   ","CAIG   ",
	"CAM    ","CAML   ","CAME   ","CAMLE  ","CAMA   ","CAMGE  ",
	"CAMN   ","CAMG   ","JUMP   ","JUMPL  ","JUMPE  ","JUMPLE ",
	"JUMPA  ","JUMPGE ","JUMPN  ","JUMPG  ","SKIP   ","SKIPL  ",
	"SKIPE  ","SKIPLE ","SKIPA  ","SKIPGE ","SKIPN  ","SKIPG  ",
	"AOJ    ","AOJL   ","AOJE   ","AOJLE  ","AOJA   ","AOJGE  ",
	"AOJN   ","AOJG   ","AOS    ","AOSL   ","AOSE   ","AOSLE  ",
	"AOSA   ","AOSGE  ","AOSN   ","AOSG   ","SOJ    ","SOJL   ",
	"SOJE   ","SOJLE  ","SOJA   ","SOJGE  ","SOJN   ","SOJG   ",
	"SOS    ","SOSL   ","SOSE   ","SOSLE  ","SOSA   ","SOSGE  ",
	"SOSN   ","SOSG   ","SETZ   ","SETZI  ","SETZM  ","SETZB  ",
	"AND    ","ANDI   ","ANDM   ","ANDB   ","ANDCA  ","ANDCAI ",
	"ANDCAM ","ANDCAB ","SETM   ","SETMI  ","SETMM  ","SETMB  ",
	"ANDCM  ","ANDCMI ","ANDCMM ","ANDCMB ","SETA   ","SETAI  ",
	"SETAM  ","SETAB  ","XOR    ","XORI   ","XORM   ","XORB   ",
	"IOR    ","IORI   ","IORM   ","IORB   ","ANDCB  ","ANDCBI ",
	"ANDCBM ","ANDCBB ","EQV    ","EQVI   ","EQVM   ","EQVB   ",
	"SETCA  ","SETCAI ","SETCAM ","SETCAB ","ORCA   ","ORCAI  ",
	"ORCAM  ","ORCAB  ","SETCM  ","SETCMI ","SETCMM ","SETCMB ",
	"ORCM   ","ORCMI  ","ORCMM  ","ORCMB  ","ORCB   ","ORCBI  ",
	"ORCBM  ","ORCBB  ","SETO   ","SETOI  ","SETOM  ","SETOB  ",
	"HLL    ","HLLI   ","HLLM   ","HLLS   ","HRL    ","HRLI   ",
	"HRLM   ","HRLS   ","HLLZ   ","HLLZI  ","HLLZM  ","HLLZS  ",
	"HRLZ   ","HRLZI  ","HRLZM  ","HRLZS  ","HLLO   ","HLLOI  ",
	"HLLOM  ","HLLOS  ","HRLO   ","HRLOI  ","HRLOM  ","HRLOS  ",
	"HLLE   ","HLLEI  ","HLLEM  ","HLLES  ","HRLE   ","HRLEI  ",
	"HRLEM  ","HRLES  ","HRR    ","HRRI   ","HRRM   ","HRRS   ",
	"HLR    ","HLRI   ","HLRM   ","HLRS   ","HRRZ   ","HRRZI  ",
	"HRRZM  ","HRRZS  ","HLRZ   ","HLRZI  ","HLRZM  ","HLRZS  ",
	"HRRO   ","HRROI  ","HRROM  ","HRROS  ","HLRO   ","HLROI  ",
	"HLROM  ","HLROS  ","HRRE   ","HRREI  ","HRREM  ","HRRES  ",
	"HLRE   ","HLREI  ","HLREM  ","HLRES  ","TRN    ","TLN    ",
	"TRNE   ","TLNE   ","TRNA   ","TLNA   ","TRNN   ","TLNN   ",
	"TDN    ","TSN    ","TDNE   ","TSNE   ","TDNA   ","TSNA   ",
	"TDNN   ","TSNN   ","TRZ    ","TLZ    ","TRZE   ","TLZE   ",
	"TRZA   ","TLZA   ","TRZN   ","TLZN   ","TDZ    ","TSZ    ",
	"TDZE   ","TSZE   ","TDZA   ","TSZA   ","TDZN   ","TSZN   ",
	"TRC    ","TLC    ","TRCE   ","TLCE   ","TRCA   ","TLCA   ",
	"TRCN   ","TLCN   ","TDC    ","TSC    ","TDCE   ","TSCE   ",
	"TDCA   ","TSCA   ","TDCN   ","TSCN   ","TRO    ","TLO    ",
	"TROE   ","TLOE   ","TROA   ","TLOA   ","TRON   ","TLON   ",
	"TDO    ","TSO    ","TDOE   ","TSOE   ","TDOA   ","TSOA   ",
	"TDON   ","TSON   ";

	String array ops[0:'677];
	Preload!with	"RESET  ", "DDTIN  ", "SETDDT ", "DDTOUT ",
			"DEVCHR ", "DDTGT  ", "GETCHR ", "DDTRL  ",
			"WAIT   ", "CORE   ", "EXIT   ", "UPTCLR ",
			"DATE   ", "LOGIN  ", "APRENB ", "LOGOUT ",
			"SWITCH ", "REASSI ", "TIMER  ", "MSTIME ",
			"GETPPN ", "TRPSET ", "       ", "RUNTIM ",
			"PJOB   ", "SLEEP  ", "SETPOV ", "PEEK   ",
			"GETLIN ", "RUN    ", "SETUWP ", "REMAP  ",
			"GETSEG ", "GETTAB ", "SPY    ", "SETNAM ",
			"TMPCOR ", "DSKCHR ", "SYSSTR ", "JOBSTR ",
			"STRUUO ", "SYSPHY ", "FRECHN ", "DEVTYP ",
			"DEVSTS ", "DEVPPN ", "SEEK   ", "RTTRP  ",
			"LOCK   ", "JOBSTS ", "LOCATE ", "WHERE  ",
			"DEVNAM ", "CTLJOB ", "GOBSTR ", "ACTIVA ",
			"DEACTI ", "HPQ    ", "HIBER  ", "WAKE   ",
			"CHGPPN ", "SETUUO ", "DEVGEN ", "OTHUSR ",
			"CHKACC ", "DEVSIZ ", "DAEMON ", "JOBPEK ",
			"ATTACH ", "DAEFIN ", "FRCUUO ", "DEVLNM ",
			"PATH.  ", "METER. ", "MTCHR. ", "JBSET. ",
			"POKE.  ", "TRMNO. ", "TRMOP. ", "RESDV. ",
			"UNLOK. ", "DISK.  ", "DVRST. ", "DVURS. ",
			"XTTSK. ", "CAL11. ", "MTAID. ", "IONDX. ",
			"CNECT. ", "MVHDR. ", "ERLST. ", "SENSE. ",
			"CLRST. ", "PIINI. ", "PISYS. ", "DEBRK. ",
			"PISAV. ", "PIRST. ", "IPCFR. ", "IPCFS. ",
			"IPCFQ. ", "PAGE.  ", "SUSET. ", "       ",
			"SCHED. ", "ENQ.   ", "DEQ.   ", "ENQC.  ",
			"TAPOP. ", "FILOP. ", "       ", "NODE.  ",
			"ERRPT. ", "       ", "PERF.  ", "       ",
			"DVPHY. ", "GTNTN. ", "GTXTN. ", "ACCT.  ",
			"DEVOP.  ";

	String array calli!name[0:'170];
recursive string procedure dupl(value string character; value integer times);
begin "dupl"
	integer x; string s;
	if (times-1) > 0 then return(character&dupl(character,(times-1))) else return(character);
end "dupl";

string procedure rpad(value string characters; value integer times; value string padding);
begin "rpad"
	string s;
	if not equ(padding," ") then s_lop(padding) else s_" ";
	if not length(characters) < times then return(characters) else
		return(characters&dupl(s,times-length(characters)));
end "rpad";

string procedure lpad(value string characters; value integer times; value string padding);
begin "lpad"
	string s;
	if not equ(padding," ") then s_lop(padding) else s_" ";
	if not length(characters) < times then return(characters) else
		return(dupl(s,times-length(characters))&characters);
end "lpad";
string procedure ascspc(value integer ascii!space);
begin "ascspc"
	string s,t,u;
	s_cvstr(ascii!space);
	u_"";
	while length(s) > 0 do begin "zapping characters"
		t_lop(s);
		if llt(t," ") or lgt(t,"}") then t_" ";
		u_u&t;
	end "zapping characters";
	return(u);
end "ascspc";

string procedure assemble(value integer data);
begin "assemble"
	string op,ac,in,ix,ef;
	integer sw,sd;
	getformat(sw,sd);	"save old format"
	setformat(-3,0); op _ cvos(ldb(point(9,data,8)));
	setformat(-2,0); ac _ cvos(ldb(point(4,data,12)));
	setformat(-1,0); in _ cvos(ldb(point(1,data,13)));
	setformat(-2,0); ix _ cvos(ldb(point(1,data,17)));
	setformat(-6,0); ef _ cvos(data land '777777);
	setformat(sw,sd);
	return(op&" "&ac&" "&in&" "&ix&" "&ef);
end "assemble";

string procedure macrocode(value integer data);
begin "macrocode"
	string op,in,ix;
	integer o,a,i,x;
	o _ ldb(point(9,data,8));
	a _ ldb(point(4,data,12));
	i _ ldb(point(4,data,17));
	in _ ""; if data land '20000000 then in _ "@";
	if o < '700 then op _ ops[o]  else op _ "       ";
	ix _ ""; if i neq 0 then ix _ "("&cvos(i)&")";
	if equ(op,"       ") then return ("Xwd     "&
		cvos(ldb(point(18,data,17)))&","&
		cvos(data land '777777)) else
		if equ(op,"CALLI  ") and data land '777777 leq '170
		   then begin "setup calli code"
			op _ calli!name[data land '777777];

			return(op&" "&cvos(a)&",");
			end "setup calli code"  else
		return(op&" "&cvos(a)&","&in&cvos(data land '777777)&ix);
end "macrocode";
procedure write!header;
begin "write!header"
	if page!count then out(2,'14);
	page!count _ page!count + 1;
	out(2,"DUMP %1 - File Dumping Program	by Carl A Baltrunas	Gallaudet College"&'11&'11&"Page "&
		cvs(page!count)&'15&'12&"Output file: "&dump!name&" produced from Input file: "&file!name&
		" using range "&cvos(start!range)&" through "&cvos(stop!range)&'15&'12&'15&'12&'15&'12&
		"_______	   ___________              _____      ______     _____        _______"&'15&
		"Address	   Instruction              Octal      Sixbit     Ascii        Decimal"&'15&'12);
end "write!header";

procedure print!line(value integer address; value integer data);
Begin "print!line"
	if line!count = 0 then write!header;
	line!count _ line!count + 1;
	out(2,cvos(address)&"\"&'11&
	rpad(macrocode(data),24," ")&
	lpad(cvos(data),12,"0")&"  "&
	"'"&cvxstr(data)&"'"&
	lpad("'"&rpad(ascspc(data),5," ")&"'",10," ")&
	lpad(cvs(data),14," ")&"."&'15&'12);
end "print!line";

procedure block!line;
begin "block!line"
	if line!count = 0 then write!header;
	out(2,cvos(last!word)&"\"&'11&"Block"&'11&
		cvos(validity!flag)&'15&'12&'15&'12);
	line!count_line!count + 2;
end "block!line";

procedure dump!file;
	begin "DUMP!FILE"
	data!word_wordin(1);
	if line!count > 49 then line!count_-1;
	if data!word neq 0 then begin "output it"
		if validity!flag neq 0 then begin "blank line"
			if validity!flag = 1 then
			print!line(last!word, 0) else block!line;
		validity!flag_0;
		end "blank line";
	print!line(range!counter, data!word);
	end "output it"
	else begin "set validity!flag"
		validity!flag_validity!flag+1;
		if validity!flag = 1 then last!word _ range!counter;
		end "set validity!flag";
	range!counter_range!counter+1;
	end "DUMP!FILE";
comment	begin main program section now -- all subroutines have been defined!;

open(1,"dsk",'10,2,0,0,0,eofin);
open(2,"dsk",'0,0,2,0,0,0);
	outstr("What Input File? ");lookup(1,file!name_inchwl,eofin);
	outstr("What Output File?");enter(2,dump!name_inchwl,0);

outstr("Ok."&'15&'12);
outstr("What start range? "); start!range_cvo(inchwl);
outstr("What stop address? "); stop!range_cvo(inchwl);

range!counter_0;	comment start at beginning of file;
line!count _ page!count _ 0;
while range!counter < start!range and not eofin do begin range!counter_range!counter+1;wordin(1); end;
while not (range!counter < start!range)  and not (range!counter > stop!range) and not eofin do DUMP!FILE;
close(2);release(2);release(1);

end "DUMP";
