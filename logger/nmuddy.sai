begin
  require 9 version;

  integer Port,I,J,K,L,C;
  string Logstr,S;
  external boolean !SKIP!;
  require "{}()" delimiters;
  define Bit(M) = {(I land M)};
  define theCud = {"VALNETNCUD1"};

SIMPLE INTEGER PROCEDURE CREAUX(STRING LOG!STR);
BEGIN
  INTEGER ERRCD;
  STRING LS;
  LS:=LOG!STR;
  START!CODE
    HRRZ LS;
    SETZM ERRCD;
    CALLI -'44;
      MOVEM ERRCD;
    MOVEM PORT;
    END;
  IF ERRCD THEN PORT:=0;
  RETURN(ERRCD);
  END;

SIMPLE PROCEDURE ZAPCIR;
BEGIN
  START!CODE
    MOVE PORT;
    CALLI -'45;
    END;
  END;

simple integer procedure CIPHER(string PASSWORD); begin "CIPHER"
  integer A,B,I,CH;
  define bits!32 = '37777777777;
  A:=B:=0;
  while CH:=lop(PASSWORD) do begin "NEXT-CHARACTER"
    for I:=1 step 1 until 7 do begin "NEXT-PASS"
      B:=A+B+CH;
      A:=A+B;
      if (A land '100) then A:=A+CH;
      A:=((A lsh 3) land bits!32)+((A lsh -29) land 7);
      end "NEXT-PASS";
    end "NEXT-CHARACTER";
  A:=A xor B;
  return(A land bits!32);
  end "CIPHER";


SIMPLE INTEGER PROCEDURE IMAGE!IN;
BEGIN
  define !AXI8C = 0;
  INTEGER IC;
  AUXCLR(PORT,IC,!AXI8C);
  if not !SKIP! then begin
    outstr(13&10&"?circuit zapped");
    while true do call(0,"EXIT");
    end;
  RETURN(IC);
END;

SIMPLE PROCEDURE IMAGE!OUT(INTEGER IC);
BEGIN
  define !AXO8 = 3;
  AUXCLR(PORT,IC,!AXO8);
  print("'",cvos(IC),13&10);
END;


SIMPLE PROCEDURE COMPLAIN(STRING MSG);
BEGIN
  OUTSTR(MSG);
  WHILE TRUE DO CALL(0,"EXIT");
  END;


define NOTHING =
{ BEGIN
  END};

define SETUP =
{ BEGIN
  TTYUP(true);
  outstr("Version "&cvs(memory['137])&13&10);
  END};

define HAND!SHAKE =
{ BEGIN
  FOR I:=1 STEP 1 UNTIL 4 DO IMAGE!OUT(I);
  WHILE IMAGE!IN NEQ 1 DO NOTHING;
  IF IMAGE!IN NEQ 2 THEN COMPLAIN("?Bad handshake");
  IF IMAGE!IN NEQ 3 THEN COMPLAIN("?Bad handshake");
  IF IMAGE!IN NEQ 4 THEN COMPLAIN("?Bad handshake");
  END};

SIMPLE BOOLEAN PROCEDURE TEST!ACK; BEGIN
  OWN INTEGER FOO;
  IF (FOO:=IMAGE!IN)=1 THEN RETURN(TRUE);
  CASE FOO OF BEGIN
    [2] OUTSTR("?Name not in mud");
    [3] OUTSTR("?Name already in mud");
    [4] OUTSTR("?Mud file busy");
    [5] OUTSTR("?Out of synch - slave did not recieve eor");
    [6] OUTSTR("?Illegal command");
    [7] OUTSTR("?Trouble with change file");
    [8] OUTSTR("?Trouble with industry description file");
    [9] OUTSTR("?Trouble with industry base file");
    [10] OUTSTR("?File busy");
    [11] OUTSTR("?Cannot delete last class for user");
    [12] OUTSTR("?Too many classes");
    [13] OUTSTR("?Class not found");
    [14] OUTSTR("?CLass has no home");
    ELSE OUTSTR("?Error code "&CVS(FOO)&". from slave")
    END;
  OUTSTR(13&10); RETURN(FALSE);
  END;

SIMPLE BOOLEAN PROCEDURE TEST!SYNCH; BEGIN
  OWN INTEGER I;
  I:=IMAGE!IN;
  IF I='40 THEN RETURN(TRUE);
  OUTSTR("?Out of synch"&13&10);
  RETURN(FALSE);
  END;

SIMPLE PROCEDURE Send!UserName; BEGIN
  OUTSTR("User name: ");
  S:=INCHWL;
  WHILE S DO BEGIN
    IF LENGTH(S)>4 
      THEN IMAGE!OUT(LOP(S))
      ELSE IMAGE!OUT(LOP(S)+'200);
    IMAGE!OUT(LOP(S));
    IMAGE!OUT(LOP(S));
    IMAGE!OUT(LOP(S));
    END;
  END;

SIMPLE INTEGER PROCEDURE GET!WORD(INTEGER BYTE!CNT);
BEGIN
  OWN INTEGER I,J;
  I:=0;
  FOR J:=1 STEP 1 UNTIL BYTE!CNT DO
    I:=(I LSH 8) LOR IMAGE!IN;
  RETURN(I);
  END;

SIMPLE PROCEDURE Send!WORD(INTEGER BYTE!CNT,WORD);
BEGIN
  OWN INTEGER I,J;
  FOR I:=BYTE!CNT-1 STEP -1 UNTIL 0 DO
    IMAGE!OUT((WORD LSH (-8*I))LAND '377);
  END;

define GET!MUD!DATA =
{ BEGIN
  IMAGE!OUT(10);
  Send!UserName;
  IMAGE!OUT('40);
  IF TEST!ACK THEN BEGIN
    Print!PPN;
    Print!CPARW;
    Print!Options;
    OUTSTR("District: "&CVS(GET!WORD(2))&"."&13&10);
    OUTSTR("IRC: "&CVOS(GET!WORD(1))&13&10);
    PrintClasses;
    Print!PASS!DATE;
    END;
  TEST!SYNCH;
  END};

define HELPMSG =
{"  0 exit
  1 new user
  2 change billable
  3 delete user
  4 change CPARW
  5 change GAN
  6 change user name
  7 check name
  10 get MUD data
  12 set GFD only
  19 delete user - don't tell PJ
  20 change no-password bit
  21 change class
  22 change UUN
  23 change PPN
  24 change ignore-colon-option bit
  25 change IRC
  26 add class
  27 delete class
  28 change district
  29 get pasword cipher (local)
  30 change password
"};

define KILL =
{ BEGIN
  ZAPCIR;
  WHILE TRUE DO CALL(0,"EXIT");
  END};

SIMPLE PROCEDURE PrintClasses;
BEGIN
  OWN INTEGER I,J,K,C;
  C _ 0;
  while (I_get!word(1))neq '377 do begin "NextClass"
    print(cvos(C), ":");
    for J _ 0 step 1 until I do begin "NextGroup"
        K _ get!word(2);
    	print(" (",
	    (if (K lsh -14)=0 then "class" else
		(if (K lsh -14)=1 then "group" else
		    (if (K lsh -14)=2 then "home" else "hg"))),
	    ") ",
	    K land '37777,
	    ".");
        end "NextGroup";
    print(13&10);
    C _ C+1;
    end "NextClass";
  END;

SIMPLE PROCEDURE Print!CPARW;
BEGIN
  OWN INTEGER I;
  I:=GET!WORD(2);
  OUTSTR("CPARW: "&CVOS(I));
  IF BIT('100000) THEN OUTSTR(",internal");
  IF BIT('40000) THEN OUTSTR(",premium");
  if bit('20000) then outstr(",bit-13");
  IF BIT('10000) THEN OUTSTR(",over-shut");
  IF BIT('4000) THEN OUTSTR(",acct-sup");
  IF BIT('2000) THEN OUTSTR(",hush");
  if bit('1000) then outstr(",bit-9");
  IF BIT('400) THEN OUTSTR(",Tymshare");
  if bit('200) then outstr(",bit-7");
  if bit('100) then outstr(",bit-6");
  if bit('40) then outstr(",bit-5");
  IF BIT('20) THEN OUTSTR(",restricted");
  if bit('10) then outstr(",bit-3");
  if bit('4) then outstr(",bit-2");
  if bit('2) then outstr(",bit-1");
  if bit('1) then outstr(",bit-0");
  OUTSTR(13&10);
  END;

simple procedure Print!Options;
begin
  own integer I;
  I _ get!Word(1);
  outstr("Options: "&cvos(I));
  if bit('200) then outstr(",non-billable");
  if bit('100) then outstr(",ignore-colon");
  if bit('40) then outstr(",mystery-bit");
  if bit('20) then outstr(",no-password");
  if bit('10) then outstr(",bit-3");
  if bit('4) then outstr(",bit-2");
  if bit('2) then outstr(",bit-1");
  if bit('1) then outstr(",bit-0");
  outstr(13&10);
  end;

define New!User =
{ BEGIN
  IMAGE!OUT(1);
  Send!UserName;
  Send!Password;
  Send!GAN;
  Send!UUN;
  Send!CPARW;
  image!out(0); comment Send!OPTIONS;
  Send!District;
  Send!IRC;
  Send!Classes;
  IMAGE!OUT('40);
  IF TEST!ACK
    THEN Print!PPN;
  TEST!SYNCH;
  END};

SIMPLE PROCEDURE Send!Password; BEGIN
  OUTSTR("Password: ");
  Send!WORD(4,CIPHER(INCHWL));
  END;

SIMPLE PROCEDURE Send!GAN; BEGIN
  OUTSTR("GAN: ");
  Send!WORD(4,CVO(INCHWL));
  END;

SIMPLE PROCEDURE Send!UUN; BEGIN
  OUTSTR("UUN: ");
  Send!WORD(4,CVO(INCHWL));
  END;

procedure Send!cparw; begin
  string LN;
  integer CPARW;
  outstr("CPARW: ");
  LN:=inchwl;
  if length(LN) and (LN neq "?") 
    then Send!WORD(2,cvo(LN))
    else begin
      define P(A,B) = {
	outstr(A&"? ");
	if inchwl="Y" then CPARW:=CPARW lor B};
      p("Internal",'100000);
      p("Premium",'40000);
      p("Shut override",'10000);
      p("Acct supervisor",'4000);
      p("Hush",'2000);
      p("Tymshare",'400);
      p("Restricted (RUB)",'20);
      Send!WORD(2,CPARW);
  end;
      end;

SIMPLE PROCEDURE Send!OPTIONS; BEGIN
  string LN;
  integer Options;
  outstr("Options: ");
  LN:=inchwl;
  if length(LN) and (LN neq "?") 
    then Send!WORD(2,cvo(LN))
    else begin
      define q(A,B) = {
	outstr(A&"? ");
	if inchwl="Y" then Options:=Options lor B};
      q("non-billable",'200);
      q("ignore-colon",'100);
      q("mystery bit ('40)",'40);
      q("no-password",'20);
      Send!WORD(2,Options);
    end;
  end;

SIMPLE PROCEDURE Send!District; BEGIN
  OUTSTR("District: ");
  Send!WORD(2,CVD(INCHWL));
  END;

SIMPLE PROCEDURE Send!IRC; BEGIN
  OUTSTR("IRC: ");
  Send!WORD(1,CVO(INCHWL));
  END;

PROCEDURE Send!Class; BEGIN
  integer array Groups[0:99];
  own integer GRPCNT,I;
  own string S;
  GrpCnt _ 0;
  while true do begin
    print("Class data: ");
    S _ inchwl;
    case lop(S) of begin
	[0] done;
	["C"] Groups[GrpCnt]_cvd(S);
	["G"] Groups[GrpCnt]_'40000 lor cvd(S);
	["H"] Groups[GrpCnt]_'100000 lor cvd(S);
	["?"] begin
	    print(
"Enter a single letter data type: C(lass), G(roup) or H(ome).  Follow
it immediately with the decimal value for the data.  Example: H37
Enter a <CR> to end the list.
");	    continue;
	    end;
	else begin
	    print("Error, bad type, ""?"" for help.",13&10);
	    end
	end;
    GrpCnt _ GrpCnt +1;
    end;
  image!out(GrpCnt-1);
  for i_0 step 1 until GrpCnt-1 do Send!Word(2,Groups[i]);
  END;

SIMPLE PROCEDURE Send!Classes; BEGIN
  OWN INTEGER CLSCNT,I;
  print("# of classes: ");
  CLSCNT:=CVD(INCHWL);
  FOR I:=0 STEP 1 UNTIL (CLSCNT-1 max 1) DO BEGIN
    print("Class ",i,":"&13&10);
    Send!Class;
  END;
END;

SIMPLE PROCEDURE Print!PPN; BEGIN
  OUTSTR("["&CVOS(GET!WORD(4))&","&CVOS(GET!WORD(4))&"]"&13&10);
  END;

define Delete!User = { BEGIN
  OUTSTR("Delete ");
  IMAGE!OUT(3);
  Send!UserName;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!CPARW = { BEGIN
  IMAGE!OUT(4);
  Send!UserName;
  Send!CPARW;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!UserName = { BEGIN
  IMAGE!OUT(6);
  OUTSTR("New ");
  Send!UserName;
  OUTSTR("Old ");
  Send!UserName;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!GAN = { BEGIN
  IMAGE!OUT(5);
  Send!UserName;
  Send!GAN;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!Billable = { Begin
  image!out(2);
  Send!userName;
  print("Billable? ");
  Image!Out(not(inchwl="Y"));
  image!out('40);
  test!ack;
  test!synch;
  end };

define CHECK!NAME = { BEGIN
  IMAGE!OUT(7);
  Send!UserName;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define SET!GFD = { BEGIN
  IMAGE!OUT(12);
  Send!UserName;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!UUN = { BEGIN
  IMAGE!OUT(22);
  Send!UserName;
  Send!UUN;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!PPN = { BEGIN
  IMAGE!OUT(23);
  Send!UserName;
  Send!GAN;
  Send!UUN;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!District = { BEGIN
  IMAGE!OUT(28);
  Send!UserName;
  Send!District;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Change!No!Password!Bit = { Begin
  Image!Out(20);
  Send!UserName;
  print("Require password? ");
  Image!Out(inchwl="N");
  Image!Out('40);
  Test!Ack;
  Test!Synch;
  end};

define Ignore!Colon!Option = {begin
  Image!Out(24);
  Send!UserName;
  print("Ignore colon option? ");
  Image!Out(inchwl="Y");
  Image!Out('40);
  Test!Ack;
  Test!Synch;
  end};

define Change!IRC = { BEGIN
  IMAGE!OUT(25);
  Send!UserName;
  Send!IRC;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define ADD!Class = { BEGIN
  IMAGE!OUT(26);
  Send!UserName;
  Send!Class;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Delete!Class = { BEGIN
  IMAGE!OUT(27);
  Send!UserName;
  Send!Class!POS;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

SIMPLE PROCEDURE Send!Class!POS; BEGIN
  OUTSTR("Class position: ");
  IMAGE!OUT(CVD(INCHWL));
  END;

define Change!Class = { BEGIN
  IMAGE!OUT(21);
  Send!UserName;
  OUTSTR("Class position: ");
  IMAGE!OUT(CVD(INCHWL));
  Send!Class;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

define Delete!User!NoPJ = { BEGIN
  OUTSTR("Delete ");
  IMAGE!OUT(19);
  Send!UserName;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};

SIMPLE PROCEDURE Print!PASS!DATE; BEGIN
  OWN INTEGER I;
  I:=GET!WORD(3);
  OUTSTR("Password changed: "&cvs(I)&13&10);
  END;

define GET!CIPHER = { BEGIN
  outstr("Password: ");
  outstr(cvos(CIPHER(inchwl))&13&10);
  END};

define Change!Password = { BEGIN
  IMAGE!OUT(30);
  Send!UserName;
  Send!Password;
  IMAGE!OUT('40);
  TEST!ACK;
  TEST!SYNCH;
  END};


BEGIN "MAIN"
  OUTSTR("Building circuit...");
  SETBREAK(10,", ",NULL,"INS");
  LOGSTR:= theCud;
  IF CREAUX(LOGSTR&";")
    THEN COMPLAIN("?Creaux to "&LOGSTR&" failed");
  OUTSTR(13&10);
  SETUP;
  IMAGE!OUT('15);
  HAND!SHAKE;

  WHILE TRUE DO BEGIN
    OUTSTR("*"); S:=INCHWL;
    IF S="?" THEN OUTSTR(HELPMSG) ELSE
    CASE CVD(S) OF BEGIN

      [1] New!User;
      [2] Change!Billable;
      [3] Delete!User;
      [4] Change!CPARW;
      [5] Change!GAN;
      [6] Change!UserName;
      [7] CHECK!NAME;
      [10] GET!MUD!DATA;
      [12] SET!GFD;
      [19] Delete!User!NoPJ;
      [20] Change!No!Password!Bit;
      [21] Change!Class;
      [22] Change!UUN;
      [23] Change!PPN;
      [24] Ignore!Colon!Option;
      [25] Change!IRC;
      [26] ADD!Class;
      [27] Delete!Class;
      [28] Change!District;
      [29] GET!CIPHER;
      [30] Change!Password;

      [0] KILL;
      ELSE OUTSTR("?Unrecognized command"&13&10)
      END;
    END;
  KILL;
  END "MAIN";
END
  