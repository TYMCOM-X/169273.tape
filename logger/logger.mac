title	LOGGER	(PAUX) PTY transparent link hack
subttl	by WRS, hacked by CARL

debug==	0			;=1 to trace special interrupts
minver==14			;version rh
majver==0			;version lh

twoseg
loc	137
xwd	majver,minver
reloc	400000

X==	0			;be careful - for null job
P==	1			;stack pointer
A==	2			;for interrupt routines
B==	3
C==	4
D==	5
TC==	6			;TTY character
PC==	7			;PTY character
T1==	10			;for TTY character interrupts
T2==	11
T3==	12
T4==	13
P1==	14			;for PTY character interrupts
P2==	15
P3==	16
P4==	17

LUD==1				; channel for LUD lookup,etc.


if2 <ifn DEBUG,<printx [debug switch enabled]>>
Subttl	Definitions

;;	CALLI's
opdef	CREPTY	[CALLI -141]	;create PTY
    CPNPT%==1			;PTY capacity exceeded
opdef	RETACH	[CALLI -135]	;reattach a port to another frame
opdef	VPEEK	[CALLI -136]	;peek at virtual address

;;	interrupt causes
.IACHR==1			;character received
.IAORG==6			;orange ball received
.IAZAP==7			;circuit zapper received
.IAYEL==11			;yellow ball received
.IAGOB==12			;character gobbler received
.IATCC==13			;terminal characteristic changed in PTY
.IANTQ==13			;notice to quit

;;	auxcal function codes
.AXI8S==1			;input image character and skip
.AXO8==	3			;output image character
.AXCBI==6			;clear input buffer
.AXCBO==7			;clear output buffer (send gobbler)
.AXLDE==11			;leave deffered echo
.AXSYB==12			;send yellow ball
.AXCFS==64			;change file status bits for port
.AXSOB==70			;send orange ball
.AXTCN==73			;read/set term char by number
.AXTCP==74			;read changed term char from PTY
.AXOSF==76			;output string as will fit

;;	frmop function codes
.FOCFM==1			; create frame
    CF.FCE==1			; frame capacity exceeded
.FORUN==33			; run program in frame

;;	gettab table numbers
.GTLOG==-24			;LDBLOG(U)
.GTUNM==-22			;JBTUNM(J)
.GTUN1==-21			;JBTUN1(J)
.GTLIC==-20			;JBTLIC(J)
.GTSTS==0			;JBTSTS(J)
.GTPRV==6			;JBTPRV(J)
.GTTTY==10			;TTYTAB(J)
.GTSLF==23			;NUMTAB(I)

;;	lud offset parameters
LudBit==2			; bits describing the user
LudHsh==4			; position of hash in entry
LudPrg==5			; program name for init (-1)
LudUsr==6			; user name for init    (-1)


Subttl	Macro definitions

;;	fatal error message macro
define	fatal (M)	<
	jrst	[reset
		outstr [asciz "M"]
		logout
		]	>

;;	debug error message macro
ifn	debug,<define	bug (M)	<outstr [asciz "[M]"]>>
ife	debug,<define	bug (M)	<;>>

Subttl	HASH routine for reading the LUD


HASH:	MOVEI A,0			; Username in T1,T2
	MOVE B,[555555555555]
	MOVE C,[361275431652]
	MOVE D,[612754316523]
	PUSHJ P,RND
	PUSHJ P,RND
	PUSHJ P,RND
	PUSHJ P,RND
	XOR D,C
	MOVE T1,D
	TLZ T1,400000
	IDIVI T1,^D887
	MOVE T1,D
	XOR T1,B
	ADDI T2,1
	POPJ P,				; T1 = Hash, T2 = Block #

RND:	ADD C,T1
	ROTC T1,-22
	PUSHJ P,RND1
	PUSHJ P,RND1
	PUSHJ P,RND1
	PUSHJ P,RND1
RND1:	MOVE T3,C(A)
	MUL T3,[5*5*5*5*5*5*5*5*5*5*5*5*5*5*5]
	ADDM T4,D(A)
	AOJE A,RND2
	MOVNI A,1
	TRNE C,1
	SKIPL D
	MOVEI A,0
	EXCH B,D
RND2:	POPJ P,

subttl	create frame and PTYs
;	* initialize the stack
;	* create PTY
;	* create frame
;	* set frame license
;	* initialize PTY terminal characteristics
;	* set mode on our end of PTY
;	* attach PTY to frame
;	* set mode on command port
;	* set logout on disconnect

array	PDL[40]			;stack

START:	MOVE	P,[iowd 40,PDL]	;init stack pointer

	SETZ	T1,		;create PTY pair
	CREPTY	T1,
	  fatal	<?host port capacity exceeded>
	MOVEM	T1,PP#		;PTY port #
	SETOM	TT#		;TTY port #

	MOVE	T1,[.GTSTS,,.GTSLF]
	GETTAB	T1,		;get address of JBTSTS
	  fatal	<?host not available>
	PJOB	T2,		;get frame number
	ADD	T1,T2		;T1/ JBTSTS+(frame#)
	TLO	T1,(1B0)	;virtual memory reference
	HRLZI	T2,(1B15)	;T2/ JB.LOG
	SETZ	T3,		; clear the bit
	MOVEI	T4,T1		;arg block at T1/ADDR,ANDCAM,IORM
	BITPOK	T4,
	  fatal	<?host not available>

	MOVSI	T1,.FOCFM	;create frame with default parameters
	FRMOP	T1,[0]
	  fatal	<?host capacity exceeded>
	MOVEM	T1,FD#
	
Subttl	Lookup LUD info, i.e. Do we have an INIT file

	Hrli	A,[Exp 17		; Copy OPEN block for DSK
		   Sixbit /DSK/
		   Exp  0]
	Hrri	A,T1
	Blt	A,T3
	Open	LUD,T1			; OPEN "DSK"
	  fatal	<?no lud>

	Hrli	A,[Sixbit /LUD/		; Copy LOOKUP block for LUD.SYS
		   Sixbit /SYS/
		   Exp 0
		   Xwd 1,4]
	Hrri	A,T1
	Blt	A,T4
	Lookup	LUD,T1			; LOOKUP (SYS)LUD.SYS
	  fatal	<?no lud>

	Hrroi	T1,.GTUNM		; Get username
	Hrroi	T2,.GTUN1		; in two parts
	GETTAB	T1,
	  fatal	<?system error>
	GETTAB	T2,
	  fatal	<?system error>
	PUSHJ	P,HASH			; Get hash of username,lud block

LudNxt:	USETI	LUD,(T2)		; Setup to read block n
	Move	T2,[Iowd 200,LudBlk]	;  into the buffer area
	Setz	T3,
	INPUT	LUD,T2			; Read the block
	Hrrzi	T2,LudBlk		; Setup pointers

LudEnt:	Skipg	(T2)			; Check for good data
	  Jrst	LudDon			; No -- give up!
	Camn	T1,LudHsh(T2)		; Is it me?
	  Jrst	LudFnd			; Yes, get bits to check
	Move	T3,LudBit(T2)		; Copy bits
	Andi	T2,177			;   and mask out size
	Add	T2,T3			; Position to next
	Jrst	LudEnt

LudDon:	Move	T2,(T2)			; Copy word
	Jumpl	T2,LudNxt		;  If negative, try next link
	fatal	<?not authorized on this computer>

LudFnd:	Move	T1,LudBit(T2)		; Copy bits to check
	Setzm	IniNam			; Clear INIT name
	Trnn	T1,400			; Do we have an init program?
	  Jrst	NoINIT			; NO -- skip this rot
	Tlne	T1,20000		; Budget present?
	  Aoj	T2,			; Yes!  BUMP it
	Move	T1,LudPrg(T2)		; Copy program name
	Movem	T1,IniNam
	Move	T1,LudUsr(T2)		; Copy username
	Movem	T1,IniUsr
	Move	T1,LudUsr+1(T2)
	Movem	T1,IniUsr+1

NoINIT:	Release	LUD,			; Finish with LUD file


Subttl	copy frame license and port info

	HRROI	T1,.GTLIC	;copy frame license
	GETTAB	T1,		;get our license
	 JRST	LICDON
	MOVE	T2,[.GTLIC,,.GTSLF]
	GETTAB	T2,		;get address of JBTLIC
	 JRST	LICDON
	MOVE	T3,FD		;get child frame number
	ANDI	T3,7777		;mask off abs frame number
	ADD	T2,T3		;T2/ JBTLIC+(frame#)
	TLO	T2,(1B0)	;virtual memory reference
	MOVEI	T3,T1		;arg block at T1
	POKE	T3,
	 JRST	LICDON
	bug <LIC>

LICDON:
	;; here set LDBLOG on PTY's LDB
	MOVE	A,[.GTLOG,,.GTSLF]
	GETTAB	A,
	 JRST	NOLOG
	HRRZM	A,B		;(B)=GETLOG temporarily
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(PUSHJ 1,)
	 JRST	NOLOG
	ADDI	A,4		;offset into LINCHK of LINTAB
	HRLI	A,(1b0)
	VPEEK	A,
	 JRST	NOLOG
	HLRZ	T1,A
	CAIE	T1,(<SKIPA 5,(5)>)
	 JRST	NOLOG
	HRRZM	A,C		;(C)=LINTAB
	ADDI	B,2		;offset from GETLOG of LDBLOG
	HRLI	B,(1b0)
	VPEEK	B,
	 JRST	NOLOG
	HLRZ	T1,B
	CAIE	T1,(<SKIPA 6,(5)>)
	 JRST	NOLOG
	HRRZM	B,B		;(B)=LDBLOG
	HRRZ	T1,PP		;port number
	ADD	T1,C		;+LINTAB
	HRLI	T1,(1b0)
	VPEEK	T1,
	 JRST	NOLOG
	TLNE	T1,-1
	 JRST	NOLOG
	ADD	T1,B		;(T1)=LDBLOG(U)
	HRLI	T1,(1b0)
	MOVE	T2,[17b11!1b16!77b19!77b27!177b35]
	HRROI	T3,.GTLOG
	HRL	T3,TT
	GETTAB	T3,
	 JRST	NOLOG
	AND	T3,T2
	MOVE	A,T1
	VPEEK	A,
	 JRST	NOLOG
	HRROI	B,.GTLOG
	HRL	B,PP
	GETTAB	B,
	 JRST	NOLOG
	CAME	A,B
	 JRST	NOLOG
	MOVEI	A,T1
	BITPOK	A,
	 JRST	NOLOG
	bug <LOG>

NOLOG:

Subttl	...more...

	HRROI	T1,.AXTCN	;copy terminal characteristics
	HRL	T1,TT
	HRROI	T2,.AXTCN	
	HRL	T2,PP
	SETZ	T3,		;start with characteristic 0
TCINI:	HLLOS	T3		;read characteristics
	AUXCAL	T1,T3		;get characteristic from real TTY
	 JRST	TCDON		;no more characteristics
	AUXCAL	T2,T3		;set it on other end of PTY
	 fatal	<?host out of available ports>
	ADD	T3,[1,,0]	;incriment terminal char #
	JRST	TCINI
TCDON:

	HLL	T1,PP		;set mode on our end of PTY
	HRRI	T1,.AXCFS	;change file status for port
	AUXCAL	T1,214		;image binary no echo

	HRRO	T1,FD		;move PTY to child
	HRLI	T2,(2B2)	;attach in command mode
	HRR	T2,PP		;his port number
	MOVEI	T3,T1		;address of arg block
	RETACH	T3,
	 fatal	<?cant attach port>
	
	HRROI	T1,.AXCFS	;change file status for port
	HRL	T1,TT
	AUXCAL	T1,214		;image binary no echo

	HRROI	T1,.GTPRV	;set logout on disconnect
	GETTAB	T1,
	 fatal	<?cant read port>
	TRZ	T1,3B20		;all off=logout on disconnect
	SETPRV	T1,

	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
TCCCLR:	AUXCAL	A,B
	 fatal	<?cant connect port>
	JUMPGE	B,TCCCLR	;more?

subttl	initialize interrupt system
;	* reset and enable INTADR system
;	* assign causes to channels
;	* enable all channels

	MOVE	T1,[VECDAT,,VECTOR]	;load the vector
	BLT	T1,VECTOR+VECLEN-1

	MOVE	T1,[6,,VECTOR]		;clear and enable system
	INTADR	T1,
	 fatal	<?cant initialize INTADR system>
	
	MOVE	T1,[.IANTQ,,ZAP..C]	;NTQ 
	INTASS	T1,
	 fatal	<?cant assign NTQ>

	HRLOI	T1,<.IAZAP>B26+ZAP..C	;PTY ZAP
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign PTY ZAP>

	HRLOI	T1,<.IAORG>B26+ORG.TC	;ORANGE BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for TTY>

	HRLOI	T1,<.IAORG>B26+ORG.PC	;ORANGE BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign ORANGE BALL for PTY>

	HRLOI	T1,<.IAYEL>B26+YEL.TC	;YELLOW BALL from TTY 
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for TTY>

	HRLOI	T1,<.IAYEL>B26+YEL.PC	;YELLOW BALL from PTY 
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign YELLOW BALL for PTY>

	HRLOI	T1,<.IAGOB>B26+GOB.TC	;GOBBLER from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for TTY>

	HRLOI	T1,<.IAGOB>B26+GOB.PC	;GOBBLER from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign GOBBLER for PTY>

	HRLOI	T1,<.IATCC>B26+TCC.PC	;TERM CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign TERM CHAR for PTY>

	HRLOI	T1,<.IACHR>B26+CHR.TC	;CHAR from TTY
	HRR	T1,TT
	TINASS	T1,
	 fatal	<?cant assign CHAR for TTY>

	HRLOI	T1,<.IACHR>B26+CHR.PC	;CHAR from PTY
	HLR	T1,PP
	TINASS	T1,
	 fatal	<?cant assign CHAR for PTY>

	SETO	X,			;enable all interrupt channels
	INTENB	X,
	 fatal	<?cant enable interrupt channels>

;
;	here to put code to run user's INIT program.

	Skipn	IniNam			; Is there an init file?
	  Jrst	WAIT			; NO ---

	Movsi	T1,'DSK'		; Setup device
	Movem	T1,IniDev
	Hrrzi	T1,IniUsr		; Init Username
	Movem	T1,IniUun
	Hrrzi	T1,5			; Count for block
	Movem	T1,IniBlk
	Move	T1,FD			; Setup run for child
	Hrli	T1,.FORUN		;   .FORUN,,FD
	FRMOP	T1,IniBlk		; RUN!
	  Jfcl				;  ignore errors

WAIT:	SETZ	X,			; don't wake up for anything
	HIBER	X,
	 JRST	WAIT
	JRST	WAIT

subttl	interrupt routines for special balls

ZAP..:	bug <ZAP..>
	MOVEI	A,2
	SLEEP	A,		; wait a sec... (or 2)

    ; msg here if so desired

	MOVSI	1
	LOGOFF

ORG.T:	PUSH	P,A
	bug <ORG.T>
	HRROI	A,.AXSOB	;send orange ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

ORG.P:	PUSH	P,A
	bug <ORG.P>
	HRROI	A,.AXSOB	;send orange ball to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.T:	PUSH	P,A
	bug <YEL.T>
	HRROI	A,.AXSYB	;send yellow ball to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	DISMIS

YEL.P:	PUSH	P,A
	bug <YEL.P>
	HRROI	A,.AXSYB	;send yellow ball to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	DISMIS

GOB.T:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to PTY
	HLL	A,PP
	AUXCAL	A,
	POP	P,A
	bug <GOB.T>
	DISMIS

GOB.P:	PUSH	P,A
	HRROI	A,.AXCBO	;send gobbler to TTY
	HRL	A,TT
	AUXCAL	A,
	POP	P,A
	bug <GOB.P>
	DISMIS

subttl	interrupt routines for terminal characteristics
;	no TCC.T because can't do anything with them

TCC.P:	PUSH	P,A
	PUSH	P,B
TCC.P0:	HRROI	A,.AXTCP	;get next characteristic
	HLL	A,PP
	AUXCAL	A,B
	 fatal	<?cant read terminal characteristics from PTY>
	JUMPL	B,TCC.P1	;none left?
	bug <TCC.P>
	HRROI	A,.AXTCN
	HRL	A,TT
	AUXCAL	A,B		;go set it on real TTY:
	 fatal	<?cant set terminal characteristic on TTY>
	JRST	TCC.P0
TCC.P1:	POP	P,B
	POP	P,A
	DISMIS

subttl	interrupt routines for terminal originated traffic
;	T1-T4 are reserved for these routines

CHR.T:	HRROI	T1,.AXI8S	;get next character
	HRL	T1,TT
	AUXCAL	T1,TC
	 DISMIS			;no more characters
	HRROI	T1,.AXO8	;output to PTY 
	HLL	T1,PP
	AUXCAL	T1,TC
	JRST	CHR.T

subttl	interrupt routines for PTY originated traffic
;	P1-P4 are reserved for these routines

CHR.P:	HRROI	P1,.AXI8S	;get next character
	HLL	P1,PP
	AUXCAL	P1,PC
	 DISMIS			;no more characters
	HRROI	P1,.AXO8	;output character
	HRL	P1,TT
	AUXCAL	P1,PC
	JRST	CHR.P		;try again

subttl	define interrupt vector and channel numbers

VECDAT:	;; interrupt vectors
define	INTDEF (x) < irp x <
EXP 0,x				;;load vector table
x'C==<.-VECDAT>/2		;;define interrupt channel number
>>
intdef	<GOB.T,GOB.P>
intdef	<CHR.T,ORG.T,YEL.T>
intdef	<TCC.P>
intdef	<CHR.P,ORG.P,YEL.P>
intdef	<ZAP..>
VECLEN==.-VECDAT

lit
reloc	0
var
VECTOR:	block ^D72

IniUsr:	Block	2
IniBlk:	Block	1
IniDev:	Block	1
IniUun:	Block	1
IniNam:	Block	3

LudBlk:	Block	200

end	START
 