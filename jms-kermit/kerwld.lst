FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLOCK	.RBMAX			; LOOKUP/ENTER block for dik for directories
V	DSKBUF:	BLOCK	.DCMAX		; DSKCHR block
V	FLP:	BLOCK	.FOMAX			; FILOP. block
V	FLKP:	BLOCK	.RBMAX			; LOOKUP block
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 1
KERWLD	MAC	18-Jan-73 17:20		Robert C McQueen		22-June-1983

     1						TITLE	KERWLD - Wild card processing for KERMIT-10 under TOPS-10
     2						SUBTTL	Robert C McQueen		22-June-1983
     3
     4					; Universals
     5
     6						SEARCH	GLXMAC			; Galaxy library
     7						SEARCH	KERUNV			; Kermit definitions
     8
     9					; Directives
    10
    11						.DIRECT	FLBLST			; List first line of binary only
    12						SALL				; Suppress macro expansions
    13						PROLOG	(KERWLD)		; Generate the prologue
    14
    15					  ; Version number
    16
    17					;[CSM] According to KERV3.MEM, this is KERMIT version 3(123)
    18			000003			WLDVER==3			; Major version number
    19			000000			WLDMIN==0			; Minor version number
    20			000124			WLDEDT==124			; Edit level
    21			000000			WLDWHO==0			; Customer edit
    22
    23					TOPS20<	END>				; Quick end for the -20
    24
    25	400000'					TWOSEG	400K			; Two segment code
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 2
KERWLD	MAC	18-Jan-73 17:20		Table of Contents

    26						SUBTTL	Table of Contents
    27
    28					;+
    29					;.pag.lit
    30					;                          Table of Contents of KERWLD
    31					;
    32					;
    33					;                                    Section                             Page
    34					;   1.   Table of Contents. . . . . . . . . . . . . . . . . . . . . . . .   2
    35					;   2.   Revision History . . . . . . . . . . . . . . . . . . . . . . . .   3
    36					;   3.   Main routine . . . . . . . . . . . . . . . . . . . . . . . . . .   4
    37					;   4.   File found - Fill in the user data . . . . . . . . . . . . . . .   9
    38					;   5.   OPNDIR - Open the current directory if needed. . . . . . . . . .  10
    39					;   6.   NXTBLK - Routine to advance to the next block of the directory .  11
    40					;   7.   REREAD - Reread the current directory block. . . . . . . . . . .  12
    41					;   8.   RDBLK - Routine to read a directory block. . . . . . . . . . . .  13
    42					;   9.   Initialization routine . . . . . . . . . . . . . . . . . . . . .  14
    43					;   10.  DIRECTORY SUBROUTINES. . . . . . . . . . . . . . . . . . . . . .  15
    44					;   11.  STRUCTURE SUBROUTINES. . . . . . . . . . . . . . . . . . . . . .  17
    45					;   12.  Logical Name Subroutines
    46					;      12.1.   .INILN - Initialize logical name . . . . . . . . . . . . .  22
    47					;      12.2.   .NXTLN - Set up for the next name. . . . . . . . . . . . .  23
    48					;   13.  USEFUL SUBROUTINES . . . . . . . . . . . . . . . . . . . . . . .  24
    49					;   14.  TOPS-10 error codes. . . . . . . . . . . . . . . . . . . . . . .  27
    50					;   15.  End of KERWLD. . . . . . . . . . . . . . . . . . . . . . . . . .  29
    51					;
    52					;.end lit.pag
    53					;-
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 3
KERWLD	MAC	18-Jan-73 17:20		Revision History

    54						SUBTTL	Revision History
    55
    56					COMMENT	|
    57
    58
    59					116	By: Nick Bush		On: 14-March-1984
    60						Add parsing for all REMOTE commands.
    61						Add support for some generic and local commands.
    62						Fix wild card processing to handle pathological names correctly.
    63						Modules: KERMIT,KERSYS,KERWLD
    64
    65					120	By: Robert C. McQueen		On: 28-March-1984
    66						Add bug fixes from WMU.  Many thanks to the people out in Kalamazoo.
    67						Modules: KERMIT,KERWLD
    68
    69					121	By: Robert C. McQueen		On: 28-March-1984
    70						Add SET PROMPT command.  Start adding support for generic COPY and
    71						RENAME commands.
    72						Modules: KERUNV,KERMIT,KERWLD
    73
    74					124	By: Robert C. McQueen		On: 8-May-1984
    75						Fix KERMIT-10's handling of remote directories
    76						Modules: KERWLD
    77					|
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 4
KERWLD	MAC	18-Jan-73 17:20		Secondary wildcard routine

    78						SUBTTL	Secondary wildcard routine
    79
    80					;+
    81					;.hl1 SECWLD
    82					;This routine is used to fill wild card information into a secondary
    83					;file specification.
    84					;.literal
    85					;
    86					; Usage:
    87					;	MOVEI	S1,Length
    88					;	MOVEI	S2,Address of argument block
    89					;	PUSHJ	P,SECWLD
    90					;	(Return)
    91					;
    92					;--
    93
    94						ENTRY	SECWLD
    95
    96	400000'	304 00 0 00 000000 	SECWLD:	$SAVE	<S1,S2>			; Save the arguments
    97
    98	400005'	260 17 0 00 000000*		$SAVE	<P1>			; Save this register also
    99
   100					; First check and copy the arguments
   101
   102	400006'	302 01 0 00 000003 		CAIE	S1,$LKLEN		; Correct size?
   103	400007'	324 17 0 00 000000*		 $RETF				; No, incorrect size
   104	400010'	202 02 0 00 000000'		MOVEM	S2,SECBLK		; Save address of argument
   105	400011'	550 01 0 02 000001 		LOAD	S1,$LKFLP(S2),LK$FLP	; Get the FILOP. block address
   106	400012'	202 01 0 00 000001'		MOVEM	S1,SECFLP		; Store it
   107	400013'	554 01 0 02 000001 		LOAD	S1,$LKFLP(S2),LK$FLN	; Get the length
   108	400014'	202 01 0 00 000002'		MOVEM	S1,SECFLN		; Store it too
   109	400015'	200 01 0 02 000002 		MOVE	S1,$LKFLG(S2)		; Get the flags
   110	400016'	202 01 0 00 000003'		MOVEM	S1,SECFLG		; Store the flags
   111	400017'	200 01 0 02 000000 		LOAD	S1,$LKFDB(S2)		; Get the .FD block address
   112	400020'	554 02 0 01 000000 		LOAD	S2,.FDLEN(S1),FD.LEN	; Get the length of the .FD block
   113	400021'	302 02 0 00 000024 		CAIE	S2,.FDSIZ		; Right size?
   114	400022'	324 17 0 00 400007*		  $RETF				; No, error return
   115	400023'	550 02 0 01 000000 		LOAD	S2,.FDLEN(S1),FD.TYP	; Get the type
   116	400024'	302 02 0 00 000000 		CAIE	S2,.FDNAT		; Native file specification?
   117	400025'	324 17 0 00 400022*		  $RETF				; No, error
   118
   119					; At this point the arguments have been validated.
   120
   121	400026'	324 17 0 00 400025*		$RETF				; For now
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 5
KERWLD	MAC	18-Jan-73 17:20		Main routine

   122						SUBTTL	Main routine
   123
   124					;+
   125					;.hl1 LOKWLD
   126					;This routine will look for a wild carded file specification on the
   127					;specified directory.
   128					;.literal
   129					;
   130					; Usage:
   131					;	MOVEI	S1,Length
   132					;	MOVEI	S2,Address of argument block
   133					;	PUSHJ	P,LOKWLD
   134					;	(Return)
   135					;
   136					; On a true return:
   137					;	- Found file, information stored
   138					;
   139					; On a false return:
   140					;	- File not found.  Error text in low segment area.
   141					;
   142					;
   143					;.end literal
   144					;-
   145
   146						ENTRY	LOKWLD			; Entry point into this module
   147
   148	400027'	304 00 0 00 000000 	LOKWLD:	$SAVE	<S1,S2>			; Save the arguments
   149
   150	400034'	260 17 0 00 400005*		$SAVE	<P1>			; Save P1 also
   151
   152					; First check and copy the arguments
   153
   154	400035'	302 01 0 00 000003 		CAIE	S1,$LKLEN		; Correct size?
   155	400036'	324 17 0 00 400026*		 $RETF				; No, incorrect size
   156	400037'	202 02 0 00 000007'		MOVEM	S2,ARGBLK		; Save address of argument
   157	400040'	550 01 0 02 000001 		LOAD	S1,$LKFLP(S2),LK$FLP	; Get the FILOP. block address
   158	400041'	202 01 0 00 000005'		MOVEM	S1,ARGFLP		; Store it
   159	400042'	554 01 0 02 000001 		LOAD	S1,$LKFLP(S2),LK$FLN	; Get the length
   160	400043'	202 01 0 00 000004'		MOVEM	S1,ARGFLN		; Store it too
   161	400044'	200 01 0 02 000002 		MOVE	S1,$LKFLG(S2)		; Get the flags
   162	400045'	202 01 0 00 000006'		MOVEM	S1,ARGFLG		; Store the flags
   163	400046'	200 01 0 02 000000 		LOAD	S1,$LKFDB(S2)		; Get the .FD block address
   164	400047'	554 02 0 01 000000 		LOAD	S2,.FDLEN(S1),FD.LEN	; Get the length of the .FD block
   165	400050'	302 02 0 00 000024 		CAIE	S2,.FDSIZ		; Right size?
   166	400051'	324 17 0 00 400036*		  $RETF				; No, error return
   167	400052'	550 02 0 01 000000 		LOAD	S2,.FDLEN(S1),FD.TYP	; Get the type
   168	400053'	302 02 0 00 000000 		CAIE	S2,.FDNAT		; Native file specification?
   169	400054'	324 17 0 00 400051*		  $RETF				; No, error
   170	400055'	505 01 0 00 000010'		HRLI	S1,FDB			; Place to store the information
   171	400056'	207 00 0 00 000001 		MOVSS	S1			; Move to correct places
   172	400057'	251 01 0 00 000033'		BLT	S1,FDB+.FDSIZ-1		; Move all the information
   173
   174					; Now set up the initial depth and other information
   175
   176	400060'	205 01 0 00 400000 		MOVX	S1,LK$FRS		; First time?
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 5-1
KERWLD	MAC	18-Jan-73 17:20		Main routine

   177	400061'	616 01 0 00 000006'		TDNN	S1,ARGFLG		; . . .
   178	400062'	254 00 0 00 400114'		  JRST	RESTART			; Continue processing
   179	400063'	201 01 0 00 000447 		MOVEI	S1,ZERLEN		; Get the length
   180	400064'	201 02 0 00 000034'		MOVEI	S2,ZERBEG		; Start of the area to clear
   181	400065'	260 17 0 00 000000*		$CALL	.ZCHNK			; Clear it
   182	400066'	260 17 0 00 400370'		$CALL	LOKINI			; Initialize the data base
   183	400067'	260 17 0 00 400700'		$CALL	.INILN			; Initialize the logical name processing
   184
   185	400070'	200 03 0 00 000011'		MOVE	T1,FDB+.FDSTR		; Get the structure
   186	400071'	400 04 0 00 000000 		SETZ	T2,			; Clear this
   187	400072'	260 17 0 00 400465'		$CALL	.INIST			; Initialize the structure scanning
   188	400073'	260 17 0 00 400617'		$CALL	.NXSTR			; Set up the first structure
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 6
KERWLD	MAC	18-Jan-73 17:20		Main routine

   189					; Here to set the initial path that will be looked at in this
   190					; structure.  This is done after each scan of a structure.
   191
   192	400074'	415 07 0 00 000010'	LOKW.0:	XMOVEI	P1,FDB			; Point to the structure
   193	400075'	260 17 0 00 400414'		$CALL	SETDIR			; Set up the directory defaults
   194	400076'	205 01 0 00 777772 		MOVSI	S1,-<D$MSFD+1>		; Build the AOBJx pointer
   195	400077'	400 03 0 00 000000 		SETZ	T1,			; Clear the counter
   196	400100'	200 02 0 01 000014'	LOKW.1:	MOVE	S2,FDB+.FDPPN(S1)	; Get the PPN
   197	400101'	322 02 0 00 400110'		JUMPE	S2,LOKW.2		; Finished?
   198	400102'	404 02 0 01 000024'		AND	S2,FDB+.FDDIM(S1)	; Mask it
   199	400103'	312 02 0 01 000014'		CAME	S2,FDB+.FDPPN(S1)	; Same?
   200	400104'	254 00 0 00 400110'		 JRST	LOKW.2			; No, finished
   201	400105'	202 02 0 01 000062'		MOVEM	S2,DPTH+.PTPPN(S1)	; Store the device
   202	400106'	340 03 0 00 000000 		AOJ	T1,			; Count the levels
   203	400107'	253 01 0 00 400100'		AOBJN	S1,LOKW.1		; Loop for all levels
   204	400110'	275 03 0 00 000001 	LOKW.2:	SUBI	T1,1			; Decrement the index
   205	400111'	202 03 0 00 000035'		MOVEM	T1,TOP			; Get the current level	
   206	400112'	202 03 0 00 000034'		MOVEM	T1,DEPTH		; Store the depth we are at
   207	400113'	254 00 0 00 400120'		JRST	REST.1			; Start up again
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 7
KERWLD	MAC	18-Jan-73 17:20		Main routine

   208
   209					; Now open the directory and set up the pointers correctly
   210					;
   211					; Register usage:
   212					;
   213					;	T1 - AOBJx pointer into the data block
   214
   215	400114'				RESTART:
   216	400114'	200 03 0 00 000034'		MOVE	T1,DEPTH		; Get the depth we are working at
   217	400115'	336 00 0 03 000036'		SKIPN	DIRCHN(T1)		; Have a channel open?
   218	400116'	324 17 0 00 400054*		  $RETF				; No, give a failure return
   219										;  This catches the case of calling
   220										;  LOKWLD after we have processed
   221										;  the last block of the UFD
   222	400117'	254 00 0 00 400122'		JRST	REST.2			; Continue processing
   223
   224	400120'	336 00 0 03 000036'	REST.1:	SKIPN	DIRCHN(T1)		; Have a channel for this level?
   225	400121'	254 00 0 00 400127'		  JRST	REST.0			; Have to open the directory
   226
   227	400122'	200 03 0 03 000052'	REST.2:	MOVE	T1,DIRIDX(T1)		; Reset the index into the block
   228	400123'	205 01 0 00 200000 		MOVX	S1,LK$SFD		; Ignoring directories?
   229	400124'	612 01 0 00 000006'		TDNE	S1,ARGFLG		; . . .
   230	400125'	254 00 0 00 400154'		  JRST	NXTFIL			; Advance to the next file
   231	400126'	254 00 0 00 400150'		JRST	TRYDIR			; Check to make sure we don't skip
   232										;  the directory we may have passed back
   233	400127'	260 17 0 00 400242'	REST.0:	$CALL	OPNDIR			; Open the current level and set up
   234										;  pointers
   235	400130'	322 00 0 00 400160'		JUMPF	NXTDIR			; Try for the level above this one
   236										;  if there is one
   237
   238	400131'	336 01 0 03 000000 	FILELP:	SKIPN	S1,(T1)			; Get the file name
   239	400132'	254 00 0 00 400154'		  JRST	NXTFIL			; No entry, skip it then
   240	400133'	430 01 0 00 000012'		XOR	S1,FDB+.FDNAM		; XOR with the name
   241	400134'	612 01 0 00 000022'		TDNE	S1,FDB+.FDNMM		; Is this it?
   242	400135'	254 00 0 00 400154'		  JRST	NXTFIL			; No, advance to the next entry
   243	400136'	510 01 0 03 000001 		HLLZ	S1,1(T1)		; Get the extension
   244	400137'	430 01 0 00 000013'		XOR	S1,FDB+.FDEXT		; XOR with what was given
   245	400140'	612 01 0 00 000023'		TDNE	S1,FDB+.FDEXM		; Is this ok?
   246	400141'	254 00 0 00 400154'		  JRST	NXTFIL			; No, try for the next
   247
   248					; We now have a file that we are going to pass back.  Check to see if this is
   249					; a directory and if we are allowed to pass it back.
   250
   251	400142'	554 01 0 03 000001 		HLRZ	S1,1(T1)		; Get the extension
   252	400143'	205 02 0 00 200000 		MOVX	S2,LK$SFD		; Allowed to pass it back?
   253	400144'	302 01 0 00 654644 		CAIE	S1,'UFD'		; UFD?
   254	400145'	306 01 0 00 634644 		 CAIN	S1,'SFD'		; Or Sub File Directory?
   255	400146'	612 01 0 00 000006'		  TDNE	S1,ARGFLG		; Directory, allowed to pass back?
   256	400147'	254 00 0 00 400215'		JRST	FOUND			; Not directory or allowed to pass back
   257
   258					; Now check to see if it is directory and if we must search it also
   259
   260	400150'	554 02 0 03 000001 	TRYDIR:	HLRZ	S2,1(T1)		; Get the extension
   261	400151'	302 02 0 00 654644 		CAIE	S2,'UFD'		; Is this a UFD?
   262	400152'	306 02 0 00 634644 		 CAIN	S2,'SFD'		;  Or subfile directory?
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 7-1
KERWLD	MAC	18-Jan-73 17:20		Main routine

   263	400153'	254 00 0 00 400175'		  JRST	FNDDIR			; Found a directory
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 8
KERWLD	MAC	18-Jan-73 17:20		Main routine

   264					; Here to advance to the next entry in a directory
   265
   266	400154'	340 03 0 00 000000 	NXTFIL:	AOJ	T1,			; Point past the file name
   267	400155'	253 03 0 00 400131'		AOBJN	T1,FILELP		; Loop for all files in the directory
   268	400156'	260 17 0 00 400313'		$CALL	NXTBLK			; Get the next directory block
   269	400157'	326 00 0 00 400131'		JUMPT	FILELP			; Loop for the file
   270
   271					; Here if there are no more files in the correct directory, attempt to
   272					; go up a level
   273
   274	400160'	200 03 0 00 000034'	NXTDIR:	MOVE	T1,DEPTH		; Get the current depth
   275	400161'	316 03 0 00 000035'		CAMN	T1,TOP			; At the top?
   276	400162'	254 00 0 00 400166'		  JRST	STRLOP			; Yes, try the next structure
   277
   278	400163'	370 00 0 00 000034'		SOS	DEPTH			; Decrement the depth
   279	400164'	260 17 0 00 400321'		$CALL	REREAD			; Reread the directory block
   280	400165'	254 00 0 00 400154'		JRST	NXTFIL			; And continue in the file processing
   281
   282	400166'	260 17 0 00 400617'	STRLOP:	$CALL	.NXSTR			; Advance to the next structure
   283	400167'	326 00 0 00 400074'		JUMPT	LOKW.0			; Open the directory and go
   284
   285					; Here if we have run out of structures, attempt the next logical name if we
   286					; are doing logical name processing
   287
   288	400170'	336 00 0 00 000325'		SKIPN	LNMFLG			; Doing logical names?
   289	400171'	254 00 0 00 400174'		  JRST	DONE			; No, finished
   290	400172'	260 17 0 00 400745'		$CALL	.NXTLN			; Advance to the next
   291	400173'	326 00 0 00 400074'		JUMPT	LOKW.0			; Set up to open the directory
   292
   293					; Here if no more structures or logical names and we have finished reading the
   294					; directory.
   295
   296	400174'	324 17 0 00 400116*	DONE:	$RETF				; Give a a failure return to the caller
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 9
KERWLD	MAC	18-Jan-73 17:20		Main routine

   297					; Here if we have found a file directory in the directory we are currently
   298					; scanning.  We must determine if we are allowed to go into this directory
   299					; to look for files or it we must just skip it and do the normal file checks.
   300
   301
   302	400175'	200 01 0 00 000034'	FNDDIR:	MOVE	S1,DEPTH		; Get the level we are at
   303	400176'	336 02 0 01 000015'		SKIPN	S2,FDB+.FDPAT(S1)	; Get the directory the user supplied
   304	400177'	254 00 0 00 400154'		  JRST	NXTFIL			; Doesn't want this level
   305	400200'	430 02 0 03 000000 		XOR	S2,(T1)			; XOR with the given name
   306	400201'	612 02 0 01 000025'		TDNE	S2,FDB+.FDSFM(S1)	; Ok?
   307	400202'	254 00 0 00 400154'		  JRST	NXTFIL			; No, advance to the next directory entry
   308
   309					; Here if we must ad to the next level in the directory
   310					; processing.
   311
   312	400203'	202 03 0 01 000052'		MOVEM	T1,DIRIDX(S1)		; Save for later
   313	400204'	200 02 0 03 000000 		MOVE	S2,(T1)			; Get the name again
   314	400205'	202 02 0 01 000063'		MOVEM	S2,DPTH+.PTSFD(S1)	; Store the information
   315	400206'	350 00 0 00 000034'		AOS	DEPTH			; One lower in the tree
   316	400207'	260 17 0 00 400242'		$CALL	OPNDIR			; Open the directory
   317	400210'	326 00 0 00 400131'		JUMPT	FILELP			; Got the directory
   318	400211'	370 03 0 00 000034'		SOS	T1,DEPTH		; Back out the depth we are at
   319	400212'	402 00 0 01 000063'		SETZM	DPTH+.PTSFD(S1)		; Clear what we just stored
   320	400213'	200 03 0 03 000052'		MOVE	T1,DIRIDX(T1)		; Get the index we stored
   321	400214'	254 00 0 00 400154'		JRST	NXTFIL			; And advance to the next file
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 10
KERWLD	MAC	18-Jan-73 17:20		File found - Fill in the user data

   322						SUBTTL	File found - Fill in the user data
   323
   324					; Enter here with:
   325					;
   326					;	T1 - Address of the entry in the directory of the file
   327
   328	400215'	200 02 0 00 000034'	FOUND:	MOVE	S2,DEPTH		; Get the depth we are at
   329	400216'	202 03 0 02 000052'		MOVEM	T1,DIRIDX(S2)		; Store the index
   330	400217'	200 04 0 00 000005'		MOVE	T2,ARGFLP		; Get the FILOP. block address
   331	400220'	200 05 0 04 000005 		MOVE	T3,.FOLEB(T2)		; Get the address of the LOOKUP block
   332	400221'	120 01 0 03 000000 		DMOVE	S1,(T1)			; Get the file information
   333	400222'	202 01 0 05 000002 		MOVEM	S1,.RBNAM(T3)		; Store the name
   334	400223'	512 02 0 05 000003 		HLLZM	S2,.RBEXT(T3)		; Store the extension
   335	400224'	336 01 0 00 000272'		SKIPN	S1,LASSTR		; Get the last structure name
   336	400225'	200 01 0 00 000011'		 MOVE	S1,FDB+.FDSTR		; Get the device
   337	400226'	202 01 0 04 000002 		MOVEM	S1,.FODEV(T2)		; Store the device name
   338	400227'	200 02 0 05 000001 		MOVE	S2,.RBPPN(T3)		; Get the address of the PATH. block
   339	400230'	201 02 0 02 000002 		MOVEI	S2,.PTPPN(S2)		; Point to the first place
   340	400231'	505 02 0 00 000062'		HRLI	S2,DPTH+.PTPPN		; Point to the PPN we are using
   341	400232'	541 01 0 02 000006 		HRRI	S1,.PTMAX-.PTSFD(S2)	; End point
   342	400233'	251 02 0 01 000000 		BLT	S2,(S1)			; Move the data
   343	400234'	200 01 0 00 000007'		MOVE	S1,ARGBLK		; Point at original argument block
   344	400235'	200 01 0 01 000000 		LOAD	S1,$LKFDB(S1)		; Get FDB address we were called with
   345	400236'	505 01 0 00 000010'		HRLI	S1,FDB			; Set up to copy current data back
   346	400237'	201 02 0 01 000000 		MOVEI	S2,(S1)			; Get copy of destination address
   347	400240'	251 01 0 02 000023 		BLT	S1,.FDSIZ-1(S2)		; Copy entire FDB back to user
   348	400241'	324 17 0 00 000000*		$RETT				; Give a good return
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 11
KERWLD	MAC	18-Jan-73 17:20		OPNDIR - Open the current directory if needed

   349						SUBTTL	OPNDIR - Open the current directory if needed
   350
   351					; OPNDIR - This routine will open the current directory to read information
   352					; if needed.  It will return with the pointer to the current block set up
   353					; in T1 and the channel stored into the DIRCHN block indexed by the
   354					; depth we are currently at.  The current block we are reading will be stored
   355					; in DIRBLK.
   356
   357
   358	400242'	260 17 0 00 401040'	OPNDIR:	$CALL	SETOPN			; Set up the FILOP. block
   359	400243'	200 03 0 00 000034'		MOVE	T1,DEPTH		; Get the depth we are working at
   360	400244'	200 01 0 00 401151'		MOVX	S1,FO.ASC!FO.PRV!.FORED	; Get the function and other bits
   361	400245'	202 01 0 00 000060'		MOVEM	S1,DFLP+.FOFNC		; Store the function info
   362	400246'	201 01 0 00 000060'		MOVEI	S1,DLEB			; Point to the LOOKUP/ENTER block
   363	400247'	202 01 0 00 000065'		MOVEM	S1,DFLP+.FOLEB		; Store it
   364	400250'	402 00 0 00 000063'		SETZM	DFLP+.FOBRH		; No buffer headers
   365	400251'	402 00 0 00 000064'		SETZM	DFLP+.FONBF		; No buffers
   366	400252'	200 02 0 03 000062'		MOVE	S2,DPTH+.PTPPN(T1)	; Get the thing
   367	400253'	202 02 0 00 000062'		MOVEM	S2,DLEB+.RBNAM		; Store as the name
   368	400254'	402 00 0 03 000062'		SETZM	DPTH+.PTPPN(T1)		; Clear this
   369	400255'	326 03 0 00 400262'		JUMPN	T1,OPND.0		; What we are looking for ?
   370	400256'	200 01 0 00 000310'		MOVE	S1,MFDPPN		; Get the MFD PPN
   371	400257'	202 01 0 00 000062'		MOVEM	S1,DPTH+.PTPPN		; Store as the PPN
   372	400260'	402 01 0 00 000063'		SETZM	S1,DPTH+.PTSFD		; Clear the first SFD
   373	400261'	334 01 0 00 401152'		SKIPA	S1,[SIXBIT /UFD/]	; Get the other directory
   374	400262'	205 01 0 00 634644 	OPND.0:	MOVX	S1,<SIXBIT /SFD/>	; SFDs
   375	400263'	202 01 0 00 000063'		MOVEM	S1,DLEB+.RBEXT		; Store in the extension
   376	400264'	201 01 0 00 000060'		MOVEI	S1,DPTH			; Get the path
   377	400265'	202 01 0 00 000061'		MOVEM	S1,DLEB+.RBPPN		; Store it
   378U						MOVX	S1,.RBMAX		; Get the length
   379U	400266'	200 01 0 00 401153'
   380	400267'	202 01 0 00 000060'		MOVEM	S1,DLEB+.RBCNT		; Store it
   381U	400270'	200 01 0 00 401154'		MOVE	S1,[XWD .FOMAX,DFLP]	; Point to the argument block
   382	400271'	047 01 0 00 000155 		FILOP.	S1,			; Do it
   383	400272'	254 00 0 00 400306'		  JRST	OPND.1			; Failed, determine why
   384	400273'	202 02 0 03 000062'		MOVEM	S2,DPTH+.PTPPN(T1)	; Store the depth back
   385	400274'	135 01 0 00 401155'		LOAD	S1,DFLP+.FOFNC,FO.CHN	; Get the channel number
   386	400275'	202 01 0 03 000036'		MOVEM	S1,DIRCHN(T1)		; Store the channel number
   387	400276'	402 00 0 03 000044'		SETZM	DIRBLK(T1)		; Clear the block we are processing
   388	400277'	260 17 0 00 400313'		$CALL	NXTBLK			; Read a block
   389	400300'	326 00 0 00 000000*		$RETIT				; Return if this worked
   390
   391					; Now to back out of opening the directory
   392
   393	400301'	200 03 0 00 000034'		MOVE	T1,DEPTH		; Get the current depth
   394	400302'	400 01 0 00 000000 		SETZ	S1,			; Clear this
   395	400303'	250 01 0 03 000036'		EXCH	S1,DIRCHN(T1)		; Get the channel we just opened
   396	400304'	047 01 0 00 000117 		RESDV.	S1,			; Make this go away
   397	400305'	263 17 0 00 000000 		$RET				; Pass back the false return
   398
   399					; Here if there was an error attempting to open the directory.
   400
   401	400306'	202 02 0 03 000062'	OPND.1:	MOVEM	S2,DPTH+.PTPPN(T1)	; Store the thing we just opened back
   402	400307'	135 02 0 00 401155'		LOAD	S2,DFLP+.FOFNC,FO.CHN	; Get the channel if one was assigned
   403	400310'	047 02 0 00 000117 		RESDV.	S2,			; Get rid of it
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 11-1
KERWLD	MAC	18-Jan-73 17:20		OPNDIR - Open the current directory if needed

   404	400311'	255 00 0 00 000000 		  JFCL				; Don't care about error returns
   405	400312'	324 17 0 00 400174*		$RETF				; Give a failure return
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 12
KERWLD	MAC	18-Jan-73 17:20		NXTBLK - Routine to advance to the next block of the directory

   406						SUBTTL	NXTBLK - Routine to advance to the next block of the directory
   407
   408					; NXTBLK - This routine will advance to the next block of the directory.  It
   409					; will return false when the end of the current directory is reached.  It will
   410					; release the channel for the directory and clear any other directory 
   411					; information.
   412
   413
   414	400313'	200 01 0 00 000034'	NXTBLK:	MOVE	S1,DEPTH		; Get the depth
   415	400314'	350 01 0 01 000044'		AOS	S1,DIRBLK(S1)		; Increment the block
   416	400315'	260 17 0 00 400330'		$CALL	RDBLK			; Read the specified block
   417	400316'	322 00 0 00 400300*		$RETIF				; Return if that fails
   418	400317'	200 03 0 00 401156'		MOVX	T1,<XWD -<D$BLKS/2>,DIR> ; Point to the information
   419	400320'	324 17 0 00 400241*		$RETT				; Give a good return to the caller
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 13
KERWLD	MAC	18-Jan-73 17:20		REREAD - Reread the current directory block

   420						SUBTTL	REREAD - Reread the current directory block
   421
   422					; This routine is used when the directory scanning is backing out of a
   423					; lower level directory to this level.  We have to reread the current block
   424					; so that we can pick up where we were scanning.
   425
   426	400321'	200 01 0 00 000034'	REREAD:	MOVE	S1,DEPTH		; Get the current depth
   427	400322'	200 01 0 01 000044'		MOVE	S1,DIRBLK(S1)		; Get the directory block
   428	400323'	260 17 0 00 400330'		$CALL	RDBLK			; Read the directory block
   429	400324'	322 00 0 00 400316*		$RETIF				; Pass back errors
   430	400325'	200 01 0 00 000034'		MOVE	S1,DEPTH		; Get the depth again
   431	400326'	200 03 0 01 000052'		MOVE	T1,DIRIDX(S1)		; Get the index
   432	400327'	324 17 0 00 400320*		$RETT				; Give a good return
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 14
KERWLD	MAC	18-Jan-73 17:20		RDBLK - Routine to read a directory block

   433						SUBTTL	RDBLK - Routine to read a directory block
   434					;
   435					; This routine will read a block from the current directory.  This routine
   436					; assumes that the directory will already be open.
   437					;
   438					; Usage:
   439					;	S1/ Block number to read
   440					;	$CALL	RDBLK
   441					;	(Return)
   442					;
   443					; On a false return:
   444					;	EOF or reading error
   445					;
   446					; On a true return:
   447					;	Directory block read
   448
   449	400330'	202 01 0 00 000061'	RDBLK:	MOVEM	S1,DFLP+.FOFNC+1	; Store the block number
   450	400331'	200 01 0 00 000034'		MOVE	S1,DEPTH		; Get the depth that we are at
   451	400332'	402 00 0 00 000060'		ZERO	DFLP+.FOFNC		; Clear the function word
   452	400333'	200 02 0 01 000036'		MOVE	S2,DIRCHN(S1)		; Get the channel we are using
   453	400334'	137 02 0 00 401155'		STORE	S2,DFLP+.FOFNC,FO.CHN	; Store the channel number
   454	400335'	201 02 0 00 000011 		MOVX	S2,.FOUSI		; Do a USETI
   455	400336'	202 02 0 00 000060'		STORE	S2,DFLP+.FOFNC,FO.FNC	; Store the function
   456	400337'	200 02 0 00 401157'		MOVE	S2,[XWD .FOFNC+2,DFLP]	; Point to the arguments
   457	400340'	047 02 0 00 000155 		FILOP.	S2,			; Point to the block
   458	400341'	254 00 0 00 400354'		  JRST	RDBL.0			; Failed, see if EOF
   459	400342'	201 02 0 00 000017 		MOVX	S2,.FOINP		; Get the function
   460	400343'	202 02 0 00 000060'		STORE	S2,DFLP+.FOFNC,FO.FNC	; Store the function
   461	400344'	201 02 0 00 000003 		MOVEI	S2,T1			; Point to the IOWD list
   462	400345'	202 02 0 00 000061'		MOVEM	S2,DFLP+.FOFNC+1	; Store it
   463	400346'	200 03 0 00 401160'		MOVX	T1,<IOWD D$BLKS,DIR>	; Point to the block
   464	400347'	400 04 0 00 000000 		SETZ	T2,			; Clear the next word
   465	400350'	200 02 0 00 401157'		MOVE	S2,[XWD .FOFNC+2,DFLP]	; Point to the arguments
   466	400351'	047 02 0 00 000155 		FILOP.	S2,			; Get the block
   467	400352'	334 00 0 00 000000 		  SKIPA				; Skip if failure
   468	400353'	324 17 0 00 400327*		$RETT				; Give a good return
   469
   470					; Here if the FILOP. failed, see why.
   471
   472	400354'	606 02 0 00 020000 	RDBL.0:	TXNN	S2,IO.EOF		; End of file?
   473	400355'	254 00 0 00 400365'		 JRST	RDBL.1			; No, problem
   474	400356'	402 00 0 01 000044'	RDBL.2:	SETZM	DIRBLK(S1)		; Clear the block number
   475	400357'	200 02 0 01 000036'		MOVE	S2,DIRCHN(S1)		; Get the channel
   476	400360'	047 02 0 00 000117 		RESDV.	S2,			; Make it go away
   477	400361'	255 00 0 00 000000 		 JFCL				; Shouldn't fail
   478	400362'	402 00 0 01 000036'		SETZM	DIRCHN(S1)		; This channel not used any more
   479	400363'	402 00 0 01 000063'		SETZM	DPTH+.PTSFD(S1)		; Clear this so not to get confused.
   480	400364'	324 17 0 00 400312*		$RETF				; Give a failure return
   481
   482	400365'	260 17 0 00 000000*	RDBL.1:	KERERR	(<Error reading directory for ^F/FDB/>)
   483	400366'	320 00 0 00 401167'
   484	400367'	254 00 0 00 400356'		JRST	RDBL.2			; And return
KERWLD - Wild card processing for KERMIT-10 under TOPS-10	MACRO %53B(1155)-2 00:39  3-Oct-85 Page 15
KERWLD	MAC	18-Jan-73 17:20		Initialization routine

   485						SUBTTL	Initialization routine
   486
   487					; This routine will initialize some system constants.
   488
   489	400370'	561 01 0 00 777777 	LOKINI::MOVX	S1,-1			; Use this job number
   490	400371'	201 02 0 00 000003 		MOVX	S2,JI.USR		; Get my user id
   491	400372'	260 17 0 00 000000*		$CALL	I%JINF			; From the system
   492	400373'	322 00 0 00 400324*		$RETIF				; Return if that failed
   493	400374'	202 02 0 00 000311'		MOVEM	S2,MYPPN		; Store my PPN
   494	400375'	201 01 0 00 000016 		MOVX	S1,%LDMFD		; Get the MFD PPN
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-173
KERMSG	MAC	18-Jan-73 17:20	

  9516	405324'	302 02 0 00 000056 		CAIE	AC2,56				; AC2,56
  9517	405325'	254 00 0 00 405330'		JRST	L.349				; L.349
  9518						MOVEI	AC14,1				; IGNORE%BAD,1				
  9519	405326'	201 14 0 00 000001 						5163
  9520						JRST	L.350				; L.350					
  9521	405327'	254 00 0 00 405331'						5162
  9522					L.349:	SOJGE	AC3,L.348			; I,L.348				
  9523	405330'	365 03 0 00 405323'						5158
  9524					L.350:	MOVE	AC1,AC4				; POINTER,WRT%POINTER			
  9525	405331'	200 01 0 00 000004 						5169
  9526					L.351:	MOVE	AC3,-11(SP)			; AC3,FILE%LENGTH			
  9527	405332'	200 03 0 17 777767 						5171
  9528	405333'	311 16 0 03 000000 		CAML	AC16,0(AC3)			; FILE%CTR,0(AC3)
  9529	405334'	254 00 0 00 405413'		JRST	L.363				; L.363
  9530						ILDB	AC2,AC1				; CH,POINTER				
  9531	405335'	134 02 0 00 000001 						5173
  9532						ADDI	AC16,1				; FILE%CTR,1				
  9533	405336'	271 16 0 00 000001 						5174
  9534						CAIL	AC2,60				; CH,60					
  9535	405337'	301 02 0 00 000060 						5176
  9536	405340'	254 00 0 00 405344'		JRST	L.352				; L.352
  9537	405341'	306 02 0 00 000056 		CAIN	AC2,56				; CH,56
  9538	405342'	602 13 0 00 000001 		TRNE	AC13,1				; FIRST%PERIOD,1
  9539	405343'	254 00 0 00 405355'		JRST	L.354				; L.354
  9540	405344'	303 02 0 00 000172 	L.352:	CAILE	AC2,172				; CH,172
  9541	405345'	254 00 0 00 405355'		JRST	L.354				; L.354
  9542	405346'	307 02 0 00 000071 		CAIG	AC2,71				; CH,71
  9543	405347'	254 00 0 00 405352'		JRST	L.353				; L.353
  9544						CAIGE	AC2,101				; CH,101				
  9545	405350'	305 02 0 00 000101 						5177
  9546	405351'	254 00 0 00 405355'		JRST	L.354				; L.354
  9547	405352'	303 02 0 00 000132 	L.353:	CAILE	AC2,132				; CH,132
  9548	405353'	301 02 0 00 000141 		CAIL	AC2,141				; CH,141
  9549	405354'	254 00 0 00 405360'		JRST	L.355				; L.355
  9550					L.354:	MOVEI	AC5,1				; BAD%CHAR,1				
  9551	405355'	201 05 0 00 000001 						5180
  9552						MOVEI	AC2,130				; CH,130				
  9553	405356'	201 02 0 00 000130 						5181
  9554						JRST	L.356				; L.356					
  9555	405357'	254 00 0 00 405363'						5176
  9556					L.355:	SETZ	AC5,				; BAD%CHAR,				
  9557	405360'	400 05 0 00 000000 						5185
  9558						CAIL	AC2,141				; CH,141				
  9559	405361'	301 02 0 00 000141 						5187
  9560	405362'	275 02 0 00 000040 		SUBI	AC2,40				; CH,40
  9561					L.356:	CAIE	AC2,56				; CH,56					
  9562	405363'	302 02 0 00 000056 						5191
  9563	405364'	254 00 
   495					;   5153  2	
   496					;   5154  2	    IF .NAME%LENGTH GTR 0
   497					;   5155  2	    THEN
   498					;   5156  3		BEGIN
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-171
KERMSG	MAC	18-Jan-73 17:20	

   499					;   5157  3	
   500					;   5158  3		DECR I FROM ..FILE%LENGTH TO 0 DO
   501					;   5159  3	
   502					;   5160  3		    IF CH$RCHAR%A (POINTER) EQL %C'.'
   503					;   5161  3		    THEN
   504					;   5162  4			BEGIN
   505					;   5163  4			IGNORE%BAD = TRUE;
   506					;   5164  4			EXITLOOP;
   507					;   5165  3			END;
   508					;   5166  3	
   509					;   5167  2		END;
   510					;   5168  2	
   511					;   5169  2	    POINTER = .WRT%POINTER;
   512					;   5170  2	
   513					;   5171  2	    WHILE .FILE%CTR LSS ..FILE%LENGTH DO
   514					;   5172  3		BEGIN
   515					;   5173  3		CH = CH$RCHAR%A (POINTER);		! Get a character
   516					;   5174  3		FILE%CTR = .FILE%CTR + 1;
   517					;   5175  3	
   518					;   5176  4		IF (.CH LSS %C'0' AND (.CH NEQ %C'.' OR .FIRST%PERIOD)) OR .CH GTR %
   519					C'z' OR (.CH GTR %C'9'
   520					;   5177  4		    AND .CH LSS %C'A') OR (.CH GTR %C'Z' AND .CH LSS %C'a')
   521					;   5178  3		THEN
   522					;   5179  4		    BEGIN
   523					;   5180  4		    BAD%CHAR = TRUE;
   524					;   5181  4		    CH = %C'X';
   525					;   5182  4		    END
   526					;   5183  3		ELSE
   527					;   5184  4		    BEGIN
   528					;   5185  4		    BAD%CHAR = FALSE;
   529					;   5186  4	
   530					;   5187  4		    IF .CH GEQ %C'a' THEN CH = .CH - (%C'a' - %C'A');
   531					;   5188  4	
   532					;   5189  3		    END;
   533					;   5190  3	
   534					;   5191  3		IF .CH EQL %C'.'
   535					;   5192  3		THEN
   536					;   5193  4		    BEGIN
   537					;   5194  4		    FIRST%PERIOD = TRUE;
   538					;   5195  4		    CH$WCHAR%A (.CH, WRT%POINTER);
   539					;   5196  4		    WRT%SIZE = .WRT%SIZE + 1;
   540					;   5197  4		    END
   541					;   5198  3		ELSE
   542					;   5199  3	
   543					;   5200  3		    IF NOT .BAD%CHAR OR NOT .IGNORE%BAD
   544					;   5201  3		    THEN
   545					;   5202  3	
   546					;   5203  3			IF NOT .FIRST%PERIOD
   547					;   5204  3			THEN
   548					;   5205  4			    BEGIN
   549					;   5206  4	
   550					;   5207  4			    IF .NAME%LENGTH LSS 0 OR .NAME%CTR LSS .NAME%LENGTH
   551					;   5208  4			    THEN
   552					;   5209  5				BEGIN
   553					;   5210  5				NAME%CTR = .NAME%CTR + 1;
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-172
KERMSG	MAC	18-Jan-73 17:20	

   554					;   5211  5				WRT%SIZE = .WRT%SIZE + 1;
   555					;   5212  5				CH$WCHAR%A (.CL.178:	PUSH	SP,C.15				; SP,[106]				
   556	402704'	261 17 0 00 400603'						3456
   557	402705'	261 17 0 00 400261'		PUSH	SP,C.12				; SP,[122]
   558	402706'	260 17 0 00 402011*		PUSHJ	SP,XFR%STATUS			; SP,XFR%STATUS
   559						SETZM	U.61				; TEXT%HEAD%FLAG			
   560	402707'	402 00 0 00 000106'						3457
   561						MOVEI	AC1,1				; AC1,1					
   562	402710'	201 01 0 00 000001 						3458
   563	402711'	202 01 0 00 000104'		MOVEM	AC1,U.59			; AC1,FILE%OPEN%FLAG
   564						PUSH	SP,C.20				; SP,[131]				
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-106
KERMSG	MAC	18-Jan-73 17:20	

   565	402712'	261 17 0 00 401015'						3459
   566	402713'	261 17 0 00 401023'		PUSH	SP,C.26				; SP,[0]
   567	402714'	261 17 0 00 000020'		PUSH	SP,U.53				; SP,MSG%NUMBER
   568	402715'	260 17 0 00 404426'		PUSHJ	SP,U.24				; SP,SEND%PACKET
   569						MOVE	AC1,U.52			; AC1,NUM%RETRIES			
   570	402716'	200 01 0 00 000017'						3460
   571	402717'	202 01 0 00 000016'		MOVEM	AC1,U.51			; AC1,OLD%RETRIES
   572						SETZM	U.52				; NUM%RETRIES				
   573	402720'	402 00 0 00 000017'						3461
   574						MOVE	AC1,U.53			; AC1,MSG%NUMBER			
   575	402721'	200 01 0 00 000020'						3462
   576	402722'	271 01 0 00 000001 		ADDI	AC1,1				; AC1,1
   577	402723'	135 02 0 00 401013'		LDB	AC2,C.18			; AC2,[POINT 6,AC1,35]  <0,6>
   578	402724'	202 02 0 00 000020'		MOVEM	AC2,U.53			; AC2,MSG%NUMBER
   579						ADJSP	SP,-7				; SP,-7					
   580	402725'	105 17 0 00 777771 						3416
   581	402726'	254 00 0 00 402765'		JRST	L.181				; L.181
   582					L.179:	CAIE	AC1,130				; AC1,130				
   583	402727'	302 01 0 00 000130 						3466
   584	402730'	254 00 0 00 402767'		JRST	L.182				; L.182
   585						MOVE	AC1,U.53			; AC1,MSG%NUMBER			
   586	402731'	200 01 0 00 000020'						3473
   587	402732'	312 01 0 00 000021'		CAME	AC1,U.54			; AC1,REC%SEQ
   588	402733'	254 00 0 00 402774'		JRST	L.183				; L.183
   589						MOVEI	AC1,1				; AC1,1					
   590	402734'	201 01 0 00 000001 						3480
   591	402735'	202 01 0 00 000106'		MOVEM	AC1,U.61			; AC1,TEXT%HEAD%FLAG
   592						MOVEI	AC1,U.31			; AC1,TYPE%CHAR				
   593	402736'	201 01 0 00 406711'						3481
   594	4027372)			; I,0(AC2)
   595	405322'	344 03 0 00 405330'		AOJA	AC3,L.349			; I,L.349
   596					L.348:	ILDB	AC2,AC1				; AC2,POINTER				
   597	405323'	134 02 0 00 000001 						5160
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-173
KERMSG	MAC	18-Jan-73 17:20	

   598	405324'	302 02 0 00 000056 		CAIE	AC2,56				; AC2,56
   599	405325'	254 00 0 00 405330'		JRST	L.349				; L.349
   600						MOVEI	AC14,1				; IGNORE%BAD,1				
   601	405326'	201 14 0 00 000001 						5163
   602						JRST	L.350				; L.350					
   603	405327'	254 00 0 00 405331'						5162
   604					L.349:	SOJGE	AC3,L.348			; I,L.348				
   605	405330'	365 03 0 00 405323'						5158
   606					L.350:	MOVE	AC1,AC4				; POINTER,WRT%POINTER			
   607	405331'	200 01 0 00 000004 						5169
   608					L.351:	MOVE	AC3,-11(SP)			; AC3,FILE%LENGTH			
   609	405332'	200 03 0 17 777767 						5171
   610	405333'	311 16 0 03 000000 		CAML	AC16,0(AC3)			; FILE%CTR,0(AC3)
   611	405334'	254 00 0 00 405413'		JRST	L.363				; L.363
   612						ILDB	AC2,AC1				; CH,POINTER				
   613	405335'	134 02 0 00 000001 						5173
   614						ADDI	AC16,1				; FILE%CTR,1				
   615	405336'	271 16 0 00 000001 						5174
   616						CAIL	AC2,60				; CH,60					
   617	405337'	301 02 0 00 000060 						5176
   618	405340'	254 00 0 00 405344'		JRST	L.352				; L.352
   619	405341'	306 02 0 00 000056 		CAIN	AC2,56				; CH,56
   620	405342'	602 13 0 00 000001 		TRNE	AC13,1				; FIRST%PERIOD,1
   621	405343'	254 00 0 00 405355'		JRST	L.354				; L.354
   622	405344'	303 02 0 00 000172 	L.352:	CAILE	AC2,172				; CH,172
   623	405345'	254 00 0 00 405355'		JRST	L.354				; L.354
   624	405346'	307 02 0 00 000071 		CAIG	AC2,71				; CH,71
   625	405347'	254 00 0 00 405352'		JRST	L.353				; L.353
   626						CAIGE	AC2,101				; CH,101				
   627	405350'	305 02 0 00 000101 						5177
   628	405351'	254 00 0 00 405355'		JRST	L.354				; L.354
   629	405352'	303 02 0 00 000132 	L.353:	CAILE	AC2,132				; CH,132
   630	405353'	301 02 0 00 000141 		CAIL	AC2,141				; CH,141
   631	405354'	254 00 0 00 405360'		JRST	L.355				; L.355
   632					L.354:	MOVEI	AC5,1				; BAD%CHAR,1				
   633	405355'	201 05 0 00 000001 						5180
   634						MOVEI	AC2,130				; CH,130				
   635	405356'	201 02 0 00 000130 						5181
   636						JRST	L.356				; L.356					
   637	405357'	254 00 0 00 405363'						5176
   638					L.355:	SETZ	AC5,				; BAD%CHAR,				
   639	405360'	400 05 0 00 000000 						5185
   640						CAIL	AC2,141				; CH,141				
   641	405361'	301 02 0 00 000141 						5187
   642	405362'	275 02 0 00 000040 		SUBI	AC2,40				; CH,40
   643					L.356:	CAIE	AC2,56				; CH,56					
   644	405363'	302 02 0 00 000056 						5191
   645	405364'	254 00 0 00 405370'		JRST	L.357				; L.357
   646						MOVEI	AC13,1				; FIRST%PERIOD,1			
   647	405365'	201 13 0 00 000001 						5194
   648						IDPB	AC2,AC4				; CH,WRT%POINTER			
   649	405366'	136 02 0 00 000004 						5195
   650						AOJA	AC12,L.351			; WRT%SIZE,L.351			
   651	405367'	344 12 0 00 405332'						5191
   652					L.357:	TRNN	AC5,1				; BAD%CHAR,1				
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-174
KERMSG	MAC	18-Jan-73 17:20	

   653	405370'	606 05 0 00 000001 						5200
   654	405371'	254 00 0 00 405374'		JRST	L.358				; L.358
   655	405372'	602 14 0 00 000001 		TRNE	AC14,1				; IGNORE%BAD,1
   656	405373'	254 00 0 00 405332'		JRST	L.351				; L.351
   657					L.358:	TRNE	AC13,1				; FIRST%PERIOD,1			
   658	405374'	602 13 0 00 000001 						5203
   659	405375'	254 00 0 00 405403'		JRST	L.360				; L.360
   660						MOVE	AC3,-10(SP)			; AC3,NAME%LENGTH			
   661	405376'	200 03 0 17 777770 						5207
   662	405377'	321 03 0 00 405402'		JUMPL	AC3,L.359			; AC3,L.359
   663	405400'	311 11 0 00 000003 		CAML	AC11,AC3			; NAME%CTR,AC3
   664	405401'	254 00 0 00 405332'		JRST	L.351				; L.351
   665					L.359:	AOJA	AC11,L.362			; NAME%CTR,L.362			
   666	405402'	344 11 0 00 405410'						5210
   667					L.360:	MOVE	AC3,-7(SP)			; AC3,TYPE%LENGTH			
   668	405403'	200 03 0 17 777771 						5218
   669	405404'	321 03 0 00 405407'		JUMPL	AC3,L.361			; AC3,L.361
   670	405405'	311 10 0 00 000003 		CAML	AC10,AC3			; TYPE%CTR,AC3
   671	405406'	254 00 0 00 405332'		JRST	L.351				; L.351
   672					L.361:	ADDI	AC10,1				; TYPE%CTR,1				
   673	405407'	271 10 0 00 000001 						5221
   674					L.362:	ADDI	AC12,1				; WRT%SIZE,1				
   675	405410'	271 12 0 00 000001 						5222
   676						IDPB	AC2,AC4				; CH,WRT%POINTER			
   677	405411'	136 02 0 00 000004 						5223
   678						JRST	L.351				; L.351					
   679	405412'	254 00 0 00 405332'						5218
   680					L.363:	MOVE	AC1,-11(SP)			; AC1,FILE%LENGTH			
   681	405413'	200 01 0 17 777767 						5228
   682	405414'	202 12 0 01 000000 		MOVEM	AC12,0(AC1)			; WRT%SIZE,0(AC1)
   683						SETZ	AC1,				; AC1,					
   684	405415'	400 01 0 00 000000 						5229
   685	405416'	136 01 0 00 000004 		IDPB	AC1,AC4				; AC1,WRT%POINTER
   686						POP	SP,AC16				; SP,AC16				
   687	405417'	262 17 0 00 000016 						5074
   688	405420'	262 17 0 00 000014 		POP	SP,AC14				; SP,AC14
   689	405421'	262 17 0 00 000013 		POP	SP,AC13				; SP,AC13
   690	405422'	262 17 0 00 000012 		POP	SP,AC12				; SP,AC12
   691	405423'	262 17 0 00 000011 		POP	SP,AC11				; SP,AC11
   692	405424'	262 17 0 00 000010 		POP	SP,AC10				; SP,AC10
   693	405425'	263 17 0 00 000000 		POPJ	SP,				; SP,
   694
   695					; Routine Size:  87 words
   696
   697
   698					;   5231  1	%SBTTL 'Buffer filling -- Main routine'
   699					;   5232  1	ROUTINE BFR%FILL (FIRST%FLAG) =
   700					;   5233  1	
   701					;   5234  1	!++
   702					;   5235  1	! FUNCTIONAL DESCRIPTION:
   703					;   5236  1	!
   704					;   5237  1	!	This routine will fill the buffer with data from the file.  It
   705					;   5238  1	!	will do all the quoting that is required.
   706					;   5239  1	!
   707					;   5240  1	! CALLING SEQUENCE:
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-175
KERMSG	MAC	18-Jan-73 17:20	

   708					;   5241  1	!
   709					;   5242  1	!	EOF%FLAG = BFR%FILL(.FIRST%FLAG);
   710					;   5243  1	!
   711					;   5244  1	! INPUT PARAMETERS:
   712					;   5245  1	!
   713					;   5246  1	!	FIRST%FLAG - Flag whether first call for this file
   714					;   5247  1	!
   715					;   5248  1	! IMPLICIT INPUTS:
   716					;   5249  1	!
   717					;   5250  1	!	None.
   718					;   5251  1	!
   719					;   5252  1	! OUTPUT PARAMETERS:
   720					;   5253  1	!
   721					;   5254  1	!	True - Buffer filled may be at end of file.
   722					;   5255  1	!	False - At end of file.
   723					;   5256  1	!
   724					;   5257  1	! IMPLICIT OUTPUTS:
   725					;   5258  1	!
   726					;   5259  1	!	Number of characters stored in the buffer.
   727					;   5260  1	!
   728					;   5261  1	! COMPLETION CODES:
   729					;   5262  1	!
   730					;   5263  1	!	None.
   731					;   5264  1	!
   732					;   5265  1	! SIDE EFFECTS:
   733					;   5266  1	!
   734					;   5267  1	!	None.
   735					;   5268  1	!
   736					;   5269  1	!--
   737					;   5270  1	
   738					;   5271  2	    BEGIN
   739					;   5272  2	
   740					;   5273  2	    LITERAL
   741					;   5274  2		NO%CHAR = -1,				! No character next
   742					;   5275  2		EOF%CHAR = -2;				! EOF seen
   743					;   5276  2	
   744					;   5277  2	    LOCAL
   745					;   5278  2		I,					! Temp loop index
   746					;   5279  2		MAX%SIZE,				! Maximum size of data
   747					;   5280  2		POINTER;				! Pointer into the message b
   748					uffer
   749					;   5281  2	
   750					;   5282  2	    OWN
   751					;   5283  2		NEXT%CHR,				! Saved character
   752					;   5284  2		STATUS,					! Status value
   753					;   5285  2		REPEAT%COUNT,				! Number of times character 
   754					repeated
   755					;   5286  2		CHAR%8%BIT,				! 8 bit character from file
   756					;   5287  2		CHRS : VECTOR [5],			! String needed to represent
   757					 character
   758					;   5288  2		CHR%IDX,				! Index into CHRS
   759					;   5289  2		OLD%CHAR%8%BIT,				! Previous 8-bit character
   760					;   5290  2		OLD%CHRS : VECTOR [5],			! String for previous charac
   761					ter
   762					;   5291  2		OLD%CHR%IDX;				! Index for previous charact
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-176
KERMSG	MAC	18-Jan-73 17:20	

   763					er
   764					;   5292  2	
   765					;   5293  2	    ROUTINE GET%QUOTED%CHAR =
   766					;   5294  2	!
   767					;   5295  2	! This routine gets a character from the file and returns both
   768					;   5296  2	! the character and the string needed to represent the character
   769					;   5297  2	! if it needs quoting.
   770					;   5298  2	!
   771					;   5299  3		BEGIN
   772					;   5300  3	
   773					;   5301  3		IF .NEXT%CHR GEQ 0
   774					;   5302  3		THEN
   775					;   5303  4		    BEGIN
   776					;   5304  4		    CHAR%8%BIT = .NEXT%CHR;
   777					;   5305  4		    NEXT%CHR = NO%CHAR;
   778					;   5306  4		    STATUS = KER%NORMAL;
   779					;   5307  4		    END
   780					;   5308  3		ELSE
   781					;   5309  3	
   782					;   5310  3		    IF .NEXT%CHR EQL NO%CHAR
   783					;   5311  3		    THEN
   784					;   5312  3			STATUS = (.GET%CHR%ROUTINE) (CHAR%8%BIT)
   785					;   5313  3		    ELSE
   786					;   5314  3			STATUS = KER%EOF;
   787					;   5315  3	
   788					;   5316  3		IF .STATUS EQL KER%NORMAL
   789					;   5317  3		THEN
   790					;   5318  4		    BEGIN
   791					;   5319  4	!
   792					;   5320  4	! Determine if we should just quote the character
   793					;   5321  4	!	Either:
   794					;   5322  4	!		Character is a delete (177 octal)
   795					;   5323  4	!	or	Character is a control character (less than 40 octal)
   796					;   5324  4	!	or	Character is a quote character
   797					;   5325  4	!	or	Character is the repeat character and doing repeat compressi
   798					on
   799					;   5326  4	!	or	Character is an eight bit quote character and doing eight bi
   800					t
   801					;   5327  4	!		  quoting.
   802					;   5328  4	!
   803					;   5329  4	
   804					;   5330  5		    IF ((.CHAR%8%BIT AND %O'177') LSS %C' ') OR ((.CHAR%8%BIT AND %O
   805					'177') EQL CHR%DEL) OR (
   806					;   5331  7			(.CHAR%8%BIT AND %O'177') EQL .RCV%QUOTE%CHR) OR (.FLAG%REPE
   807					AT AND ((.CHAR%8%BIT AND
   808					;   5332  6			%O'177') EQL .REPT%CHR)) OR (.FLAG%8QUOTE AND ((.CHAR%8%BIT 
   809					AND %O'177') EQL
   810					;   5333  5			.SEND%8QUOTE%CHR))
   811					;   5334  4		    THEN
   812					;   5335  5			BEGIN
   813					;   5336  5	!
   814					;   5337  5	! If the character is a control character or delete we must do a CTL(Charact
   815					er)
   816					;   5338  5	! so it is something that we can be sure we can send.
   817					;   5339  5	!
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-177
KERMSG	MAC	18-Jan-73 17:20	

   818					;   5340  5	
   819					;   5341  6			IF ((.CHAR%8%BIT AND %O'177') LSS %C' ') OR ((.CHAR%8%BIT AN
   820					D %O'177') EQL CHR%DEL)
   821					;   5342  5			THEN
   822					;   5343  6			    CHRS [0] = CTL (.CHAR%8%BIT)
   823					;   5344  5			ELSE
   824					;   5345  5			    CHRS [0] = .CHAR%8%BIT;
   825					;   5346  5	
   826					;   5347  5			CHR%IDX = 1;
   827					;   5348  5			CHRS [1] = .RCV%QUOTE%CHR;	![035] Use character we said
   828					 we would send
   829					;   5349  5			END
   830					;   5350  4		    ELSE
   831					;   5351  5			BEGIN
   832					;   5352  5			CHR%IDX = 0;
   833					;   5353  5			CHRS [0] = .CHAR%8%BIT;
   834					;   5354  4			END;
   835					;   5355  4	
   836					;   5356  4		    END
   837					;   5357  3		ELSE
   838					;   5358  3	
   839					;   5359  3		    IF .STATUS NEQ KER%EOF THEN KRM%ERROR (.STATUS);	! Report err
   840					or
   841					;   5360  3	
   842					;   5361  3		RETURN .STATUS;
   843					;   5362  2		END;
   844
   845
   846	000115'					RELOC	115
   847					; NEXT%CHR
   848	000115'				U.81:	BLOCK	1
   849					; STATUS
   850	000116'				U.82:	BLOCK	1
   851					; REPEAT%COUNT
   852	000117'				U.83:	BLOCK	1
   853					; CHAR%8%BIT
   854	000120'				U.84:	BLOCK	1
   855					; CHRS
   856	000121'				U.85:	BLOCK	5
   857					; CHR%IDX
   858	000126'				U.86:	BLOCK	1
   859					; OLD%CHAR%8%BIT
   860	000127'				U.87:	BLOCK	1
   861					; OLD%CHRS
   862	000130'				U.88:	BLOCK	5
   863					; OLD%CHR%IDX
   864	000135'				U.89:	BLOCK	1
   865
   866
   867	405426'					RELOC	405426
   868					; GET%QUOTED%CHAR
   869					U.90:	MOVE	AC1,U.81			; AC1,NEXT%CHR				
   870	405426'	200 01 0 00 000115'						5301
   871	405427'	321 01 0 00 405434'		JUMPL	AC1,L.364			; AC1,L.364
   872						MOVEM	AC1,U.84			; AC1,CHAR%8%BIT			
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-178
KERMSG	MAC	18-Jan-73 17:20	

   873	405430'	202 01 0 00 000120'						5304
   874						SETOM	U.81				; NEXT%CHR				
   875	405431'	476 00 0 00 000115'						5305
   876						MOVEI	AC1,13				; AC1,13				
   877	405432'	201 01 0 00 000013 						5306
   878	405433'	254 00 0 00 405445'		JRST	L.366				; L.366
   879					L.364:	CAME	AC1,C.37			; AC1,[-1]				
   880	405434'	312 01 0 00 401662'						5310
   881	405435'	254 00 0 00 405444'		JRST	L.365				; L.365
   882						MOVE	AC1,U.66			; AC1,GET%CHR%ROUTINE			
   883	405436'	200 01 0 00 000113'						5312
   884	405437'	261 17 0 00 405520'		PUSH	SP,C.99				; SP,[0,,CHAR%8%BIT]
   885	405440'	260 17 0 01 000000 		PUSHJ	SP,0(AC1)			; SP,0(AC1)
   886	405441'	202 01 0 00 000116'		MOVEM	AC1,U.82			; AC1,STATUS
   887	405442'	105 17 0 00 777777 		ADJSP	SP,-1				; SP,-1
   888						JRST	L.367				; L.367					
   889	405443'	254 00 0 00 405446'						5310
   890					L.365:	MOVEI	AC1,113				; AC1,113				
   891	405444'	201 01 0 00 000113 						5314
   892	405445'	202 01 0 00 000116'	L.366:	MOVEM	AC1,U.82			; AC1,STATUS
   893					L.367:	MOVE	AC1,U.82			; AC1,STATUS				
   894	405446'	200 01 0 00 000116'						5316
   895	405447'	302 01 0 00 000013 		CAIE	AC1,13				; AC1,13
   896	405450'	254 00 0 00 405510'		JRST	L.372				; L.372
   897						MOVE	AC2,U.84			; AC2,CHAR%8%BIT			
   898	405451'	200 02 0 00 000120'						5330
   899	405452'	135 01 0 00 405517 17 0 00 000000 		POPJ	SP,				; SP,
  1752	400167'	000000	000124		C.5:	EXP	124				; 124
  1753	400170'	000000	000111		C.6:	EXP	111				; 111
  1754	400171'	000000	000016		C.7:	EXP	16				; 16
  1755
  1756					; Routine Size:  19 words
  1757
  1758
  1759					;   1502  1	
  1760					;   1503  1	%SBTTL 'SEND%SWITCH'
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-32
KERMSG	MAC	18-Jan-73 17:20	

  1761					;   1504  1	
  1762					;   1505  1	GLOBAL ROUTINE SEND%SWITCH =
  1763					;   1506  1	
  1764					;   1507  1	!++
  1765					;   1508  1	! FUNCTIONAL DESCRIPTION:
  1766					;   1509  1	!
  1767					;   1510  1	!	This routine is the state table switcher for sending files.  It
  1768					;   1511  1	!	loops until either it is finished or an error is encountered.  The
  1769					;   1512  1	!	routines called by SEND%SWITCH are responsible for changing the stat
  1770					e.
  1771					;   1513  1	!
  1772					;   1514  1	! CALLING SEQUENCE:
  1773					;   1515  1	!
  1774					;   1516  1	!	SEND%SWITCH();
  1775					;   1517  1	!
  1776					;   1518  1	! INPUT PARAMETERS:
  1777					;   1519  1	!
  1778					;   1520  1	!	None.
  1779					;   1521  1	!
  1780					;   1522  1	! IMPLICIT INPUTS:
  1781					;   1523  1	!
  1782					;   1524  1	!	None.
  1783					;   1525  1	!
  1784					;   1526  1	! OUTPUT PARAMETERS:
  1785					;   1527  1	!
  1786					;   1528  1	!	Returns:
  1787					;   1529  1	!	    TRUE - File sent correctly.
  1788					;   1530  1	!	    FALSE - Aborted sending the file.
  1789					;   1531  1	!
  1790					;   1532  1	! IMPLICIT OUTPUTS:
  1791					;   1533  1	!
  1792					;   1534  1	!	None.
  1793					;   1535  1	!
  1794					;   1536  1	! COMPLETION CODES:
  1795					;   1537  1	!
  1796					;   1538  1	!	None.
  1797					;   1539  1	!
  1798					;   1540  1	! SIDE EFFECTS:
  1799					;   1541  1	!
  1800					;   1542  1	!	None.
  1801					;   1543  1	!
  1802					;   1544  1	!--
  1803					;   1545  1	
  1804					;   1546  2	    BEGIN
  1805					;   1547  2	
  1806					;   1548  2	    LOCAL
  1807					;   1549  2		STATUS;					! Status result
  1808					;   1550  2	
  1809					;   1551  2	    IF .CONNECT%FLAG THEN SY%DISMISS (.DELAY);	! Sleep if the user wanted u
  1810					s to
  1811					;   1552  2	
  1812					;   1553  2	    INIT%XFR ();				! Initialize for this transf
  1813					er
  1814					;   1554  2	    TEXT%HEAD%FLAG = FALSE;			! Set text flag correctly
  1815					;   1555  2	    XFR%STATUS (%C'I', %C'S');			! Start141	 10143	 10144	 10146	 10148	 10150	 10156
	 10158	 10160	 10162	 10164	 10165	 10169	 10171	 10176	 10177	 10180	 10187	 10189	 10198	 10199
	 10233	 10234	 10236	 10237	 10239	 10240	 10242	 10243	 10244	 10245	 10247	 10248	 10249	 10250
	 10252	 10253	 10255	 10257	 10259	 10260	 10263	 10265	 10266	 10268	 10271	 10273	 10274	 10275
	 10281	 10283	 10284	 10289	 10291	 10293	 10298	 10299	 10301	 10307	 10309	 10509	 10624	 10625
	 10626	 10629	 10662	 10664	 10665	 10668	 10707	 10709	 10711	 10713	 10714	 10716	 10717	 10719
	 10720	 10722	 10723	 10725	 10726	 10728	 10729	 10731	 10732	 10735	 10737	 10738	 10740	 10741
	 10743	 10816	 10818	 10820	 10822	 10828	 10830	 10831	 10833	 10928	 10930	 10932	 10936	 10938
	 10944	 10947	 10950	 10952	 10953	 10955	 10958	 10959	 10962	 10963	 10965	 10967	 10969	 10971
	 10972	 11093	 11095	 11097	 11100	 11102	 11103	 11105	 11106	 11108	 11109	 11111	 11112	 11114
	 11115	 11117	 11118	 11120	 11121	 11123	 11124	 11126	 11127	 11129	 11130	 11132	 11133	 11135
	 11162	 11223	 11225	 11226	 11228	 11229	 11231	 11232	 11234	 11235	 11237	 11238	 11240	 11241
	 11243	 11244	 11246	 11249	 11250	 11482	 11484	 11485	 11486	 11567	 11569	 11571	 11585	 11587
	 11687	 11770	 11772	 11777	 11871	 11873	 11878	 12252	 12255	 12256	 12257	 12265	 12267	 12268
	 12269	 12270	 12289	 12291	 12292	 12293	 12295	 12297	 12298	 12371	 12372	 12373	 12390	 12392
	 12405	 12407	 12422	 12423	 12433	 12435	 12441	 12443	 12452	 12453	 12471	 12472	 12477	 12479
	 12480	 12486	 12487	 12494	 12495	 12496	 12508	 12509	 12514	 12516	 12517	 12523	 12524	 12529
	 12531	 12532	 12538	 12539	 12544	 12546	 12547
AC10	  1432#	  9484	  9493	  9588	  9590	  9610	 10458	 10517	 12243	 12386	 12387	 12416	 12572
AC11	  1433#	  9486	  9491	  9581	  9583	  9609	 10460	 10465	 10472	 10482	 10486	 10516	 12244	 12368
	 12370	 12373	 12383	 12418	 12571
AC12	  1434#	  6541	  6546	  6548	  6568	  6586	  6591	  6596	  9487	  9493	  9568	  9592	  9600	  9608
	 10461	 10467	 10469	 10474	 10488	 10515	 12245	 12253	 12255	 12265	 12289	 12295	 12380	 12437
	 12570
AC13	  1435#	  6543	  6549	  6554	  6555	  6572	  6577	  6582	  6588	  6595	  8255	  8268	  8269	  8270
	  8298	  8300	  8317	  8321	  8324	  8327	  8424	  9488	  9495	  9505	  9538	  9564	  9575	  9607
	 10462	 10472	 10476	 10486	 10494	 10514	 10519	 10812	 10824	 10837	 10842	 12246	 12388	 12390
	 12414	 12416	 12569
AC14	  1436#	  1613	  1621	  1622	  1633	  1654	  2489	  2524	  2528	  2633	  264
   900						LDB	AC1,C.100			; AC1,[POINT 7,CHRS,35]  <0,7>		
   901	405525'	135 01 0 00 405542'						5378
   902	405526'	316 01 0 00 000121'		CAMN	AC1,U.85			; AC1,CHRS
   903	405527'	254 00 0 00 405540'		JRST	L.374				; L.374
   904	405530'	201 01 0 00 000001 		MOVEI	AC1,1				; AC1,1
   905	405531'	616 01 0 00 000012'		TDNN	AC1,U.47			; AC1,FLAG%8QUOTE
   906	405532'	254 00 0 00 405540'		JRST	L.374				; L.374
   907						LDB	AC1,C.100			; AC1,[POINT 7,CHRS,35]  <0,7>		
   908	405533'	135 01 0 00 405542'						5381
   909	405534'	202 01 0 00 000121'		MOVEM	AC1,U.85			; AC1,CHRS
   910						AOS	AC1,U.86			; AC1,CHR%IDX				
   911	405535'	350 01 0 00 000126'						5383
   912	405536'	200 02 0 00 000007'		MOVE	AC2,U.44			; AC2,SEND%8QUOTE%CHR
   913	405537'	202 02 0 01 000121'		MOVEM	AC2,U.85(AC1)			; AC2,CHRS(AC1)
   914					L.374:	MOVE	AC1,U.82			; AC1,STATUS				
   915	405540'	200 01 0 00 000116'						5369
   916						POPJ	SP,				; SP,					
   917	405541'	263 17 0 00 000000 						5363
   918	405542'	00 07 0 00 000121'	C.100:	POINT	7,U.85,35			; 7,CHRS,35
   919
   920					; Routine Size:  18 words
   921
   922
   923					;   5390  2	!
   924					;   5391  2	! Start of code for BFR%FILL
   925					;   5392  2	!
   926					;   5393  2	! Initialize pointer and count
   927					;   5394  2	!
   928					;   5395  2	    SIZE = 0;
   929					;   5396  2	    POINTER = CH$PTR (SND%MSG, PKT%MSG, CHR%SIZE);
   930					;   5397  2	    MAX%SIZE = .SEND%PKT%SIZE - PKT%OVR%HEAD - (.BLK%CHK%TYPE - CHK%1CHAR);
   931					;   5398  2	!
   932					;   5399  2	! If last call got an error or eof, return it now
   933					;   5400  2	!
   934					;   5401  2	
   935					;   5402  2	    IF NOT .FIRST%FLAG AND (.STATUS NEQ KER%NORMAL) THEN RETURN .STATUS;
   936					;   5403  2	
   937					;   5404  2	!
   938					;   5405  2	! If first time for a file prime the pump with the first character.
   939					;   5406  2	!
   940					;   5407  2	
   941					;   5408  2	    IF .FIRST%FLAG
   942					;   5409  2	    THEN
   943					;   5410  3		BEGIN
   944					;   5411  3		FIRST%FLAG = FALSE;
   945					;   5412  3		NEXT%CHR = -1;				! No backed up character
   946					;   5413  3	
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-181
KERMSG	MAC	18-Jan-73 17:20	

   947					;   5414  3		IF .FLAG%8QUOTE THEN STATUS = GET%8%QUOTED%CHAR () ELSE STATUS = GET
   948					%QUOTED%CHAR ();
   949					;   5415  3	
   950					;   5416  3		IF .STATUS NEQ KER%NORMAL THEN RETURN .STATUS;
   951					;   5417  3	
   952					;   5418  3		OLD%CHAR%8%BIT = .CHAR%8%BIT;
   953					;   5419  3	
   954					;   5420  3		INCR OLD%CHR%IDX FROM 0 TO .CHR%IDX DO
   955					;   5421  3		    OLD%CHRS [.OLD%CHR%IDX] = .CHRS [.OLD%CHR%IDX];
   956					;   5422  3	
   957					;   5423  3		OLD%CHR%IDX = .CHR%IDX;
   958					;   5424  3		REPEAT%COUNT = 0;			! Character was not repeated
   959					 yet
   960					;   5425  3							! Will always be incremented
   961
   962					;   5426  2		END;
   963					;   5427  2	
   964					;   5428  2	!
   965					;   5429  2	! Otherwise, loop until we fill buffer
   966					;   5430  2	!
   967					;   5431  2	
   968					;   5432  2	    WHILE .SIZE LSS .MAX%SIZE DO 		! Normal exit is via an EXIT
   969					LOOP
   970					;   5433  3		BEGIN
   971					;   5434  3	!
   972					;   5435  3	! Check if we are doing run compression
   973					;   5436  3	!
   974					;   5437  3	
   975					;   5438  3		IF .FLAG%REPEAT
   976					;   5439  3		THEN
   977					;   5440  4		    BEGIN
   978					;   5441  4	!
   979					;   5442  4	! Here with previous character in OLD%xxx.  As long as we
   980					;   5443  4	! are getting the same character, just count the run.
   981					;   5444  4	!
   982					;   5445  4	
   983					;   5446  4		    WHILE (.CHAR%8%BIT EQL .OLD%CHAR%8%BIT) AND (.REPEAT%COUNT LSS 9
   984					4) DO
   985					;   5447  5			BEGIN
   986					;   5448  5			REPEAT%COUNT = .REPEAT%COUNT + 1;
   987					;   5449  5	
   988					;   5450  5			IF .FLAG%8QUOTE THEN STATUS = GET%8%QUOTED%CHAR () ELSE STAT
   989					US = GET%QUOTED%CHAR ();
   990					;   5451  5	
   991					;   5452  5			IF .STATUS NEQ KER%NORMAL
   992					;   5453  5			THEN
   993					;   5454  5	
   994					;   5455  5			    IF .STATUS NEQ KER%EOF
   995					;   5456  5			    THEN
   996					;   5457  5				CHAR%8%BIT = NO%CHAR
   997					;   5458  5			    ELSE
   998					;   5459  6				BEGIN
   999					;   5460  6				CHAR%8%BIT = EOF%CHAR;
  1000					;   5461  6				CHR%IDX = -1;
  1001					;   5462  5				END;
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-182
KERMSG	MAC	18-Jan-73 17:20	

  1002					;   5463  5	
  1003					;   5464  4			END;
  1004					;   5465  4	
  1005					;   5466  5		    IF .OLD%CHR%IDX + 1 + 2 LSS ((.OLD%CHR%IDX + 1)*.REPEAT%COUNT)
  1006					;   5467  4		    THEN
  1007					;   5468  5			BEGIN
  1008					;   5469  5	
  1009					;   5470  5			IF .SIZE + .OLD%CHR%IDX + 1 + 2 GTR .MAX%SIZE
  1010					;   5471  5			THEN
  1011					;   5472  6			    BEGIN
  1012					;   5473  6	
  1013					;   5474  6			    IF .CHAR%8%BIT EQL .OLD%CHAR%8%BIT
  1014					;   5475  6			    THEN
  1015					;   5476  7				BEGIN
  1016					;   5477  7				NEXT%CHR = .CHAR%8%BIT;
  1017					;   5478  7				REPEAT%COUNT = .REPEAT%COUNT - 1;
  1018					;   5479  6				END;
  1019					;   5480  6	
  1020					;   5481  6			    IF .CHAR%8%BIT EQL EOF%CHAR
  1021					;   5482  6			    THEN
  1022					;   5483  7				BEGIN
  1023					;   5484  7				NEXT%CHR = EOF%CHAR;	! Remember EOF for next time
  1024
  1025					;   5485  7				STATUS = KER%NORMAL;	! And give good return now
  1026					;   5486  6				END;
  1027					;   5487  6	
  1028					;   5488  6			    EXITLOOP;
  1029					;   5489  5			    END;
  1030					;   5490  5	
  1031					;   5491  5			OLD%CHRS [.OLD%CHR%IDX + 1] = CHAR (.REPEAT%COUNT);
  1032					;   5492  5			OLD%CHRS [.OLD%CHR%IDX + 2] = .REPT%CHR;
  1033					;   5493  5			OLD%CHR%IDX = .OLD%CHR%IDX + 2;
  1034					;   5494  5	!
  1035					;   5495  5	! Count the number of file characters this represents
  1036					;   5496  5	!
  1037					;   5497  5			SMSG%DATA%CHARS = .SMSG%DATA%CHARS + .REPEAT%COUNT - 1;
  1038					;   5498  5			FILE%CHARS = .FILE%CHARS + .REPEAT%COUNT - 1;
  1039					;   5499  5			REPEAT%COUNT = 1;		! Only one time for this str
  1040					ing
  1041					;   5500  4			END;
  1042					;   5501  4	
  1043					;   5502  4	!
  1044					;   5503  4	! If we don't have enough room for this character, wait till next
  1045					;   5504  4	! time.
  1046					;   5505  4	!
  1047					;   5506  4	
  1048					;   5507  4		    IF .SIZE + (.OLD%CHR%IDX + 1)*.REPEAT%COUNT GTR .MAX%SIZE
  1049					;   5508  4		    THEN
  1050					;   5509  5			BEGIN
  1051					;   5510  5	! If the next character is the same, the count will get incremented
  1052					;   5511  5	! next time we enter, so back it off now.
  1053					;   5512  5	
  1054					;   5513  5			IF .CHAR%8%BIT EQL .OLD%CHAR%8%BIT
  1055					;   5514  5			THEN
  1056					;   5515  6			    BEGIN
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-183
KERMSG	MAC	18-Jan-73 17:20	

  1057					;   5516  6			    NEXT%CHR = .CHAR%8%BIT;
  1058					;   5517  6			    REPEAT%COUNT = .REPEAT%COUNT - 1;
  1059					;   5518  5			    END;
  1060					;   5519  5	
  1061					;   5520  5			EXITLOOP;
  1062					;   5521  4			END;
  1063					;   5522  4	
  1064					;   5523  4		    SMSG%DATA%CHARS = .SMSG%DATA%CHARS + .REPEAT%COUNT;
  1065					;   5524  4		    FILE%CHARS = .FILE%CHARS + .REPEAT%COUNT;
  1066					;   5525  4	
  1067					;   5526  4		    DECR REPEAT%COUNT FROM .REPEAT%COUNT TO 1 DO
  1068					;   5527  4	
  1069					;   5528  4			DECR I FROM .OLD%CHR%IDX TO 0 DO
  1070					;   5529  5			    BEGIN
  1071					;   5530  5			    CH$WCHAR%A (.OLD%CHRS [.I], POINTER);
  1072					;   5531  5			    SIZE = .SIZE + 1;
  1073					;   5532  4			    END;
  1074					;   5533  4	
  1075					;   5534  4	!
  1076					;   5535  4	! If we got an error (or EOF) then exit
  1077					;   5536  4	!
  1078					;   5537  4	
  1079					;   5538  4		    IF (.STATUS NEQ KER%NORMAL) THEN EXITLOOP;
  1080					;   5539  4	
  1081					;   5540  4	!
  1082					;   5541  4	! Otherwise, copy the character which broke the run
  1083					;   5542  4	!
  1084					;   5543  4		    OLD%CHAR%8%BIT = .CHAR%8%BIT;
  1085					;   5544  4	
  1086					;   5545  4		    INCR OLD%CHR%IDX FROM 0 TO .CHR%IDX DO
  1087					;   5546  4			OLD%CHRS [.OLD%CHR%IDX] = .CHRS [.OLD%CHR%IDX];
  1088					;   5547  4	
  1089					;   5548  4		    OLD%CHR%IDX = .CHR%IDX;
  1090					;   5549  4		    REPEAT%COUNT = 0;
  1091					;   5550  4		    END
  1092					;   5551  3		ELSE
  1093					;   5552  3	!
  1094					;   5553  3	! Here if we are not doing run compression.  We can do things much
  1095					;   5554  3	! easier.
  1096					;   5555  3	!
  1097					;   5556  4		    BEGIN
  1098					;   5557  4	
  1099					;   5558  4		    IF (.SIZE + .CHR%IDX + 1) GTR .MAX%SIZE THEN EXITLOOP;
  1100					;   5559  4	
  1101					;   5560  4		    SMSG%DATA%CHARS = .SMSG%DATA%CHARS + 1;
  1102					;   5561  4		    FILE%CHARS = .FILE%CHARS + 1;
  1103					;   5562  4	
  1104					;   5563  4		    DECR CHR%IDX FROM .CHR%IDX TO 0 DO
  1105					;   5564  5			BEGIN
  1106					;   5565  5			CH$WCHAR%A (.CHRS [.CHR%IDX], POINTER);
  1107					;   5566  5			SIZE = .SIZE + 1;
  1108					;   5567  4			END;
  1109					;   5568  4	
  1110					;   5569  4		    IF .FLAG%8QUOTE THEN STATUS = GET%8%QUOTED%CHAR () ELSE STATUS =
  1111					 GET%QUOTED%CHAR ();
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-184
KERMSG	MAC	18-Jan-73 17:20	

  1112					;   5570  4	
  1113					;   5571  4		    IF (.STATUS NEQ KER%NORMAL) THEN EXITLOOP;
  1114					;   5572  4	
  1115					;   5573  3		    END;
  1116					;   5574  3	
  1117					;   5575  2		END;
  1118					;   5576  2	
  1119					;   5577  2	!
  1120					;   5578  2	! Determine if we really stored anything into the buffer.
  1121					;   5579  2	!
  1122					;   5580  2	
  1123					;   5581  2	    IF .SIZE NEQ 0 THEN RETURN KER%NORMAL ELSE RETURN .STATUS;
  1124					;   5582  2	
  1125					;   5583  1	    END;					! End of BFR%FILL
  1126
  1127
  1128					; BFR%MOVEM	AC1,U.87			; AC1,OLD%CHAR%8%BIT
  1129						SETO	AC1,				; OLD%CHR%IDX,				
  1130	405577'	474 01 0 00 000000 						5420
  1131	405600'	254 00 0 00 405603'		JRST	L.379				; L.379
  1132					L.378:	MOVE	AC2,U.85(AC1)			; AC2,CHRS(OLD%CHR%IDX)			
  1133	405601'	200 02 0 01 000121'						5421
  1134	405602'	202 02 0 01 000130'		MOVEM	AC2,U.88(AC1)			; AC2,OLD%CHRS(OLD%CHR%IDX)
  1135					L.379:	ADDI	AC1,1				; OLD%CHR%IDX,1				
  1136	405603'	271 01 0 00 000001 						5420
  1137	405604'	317 01 0 00 000126'		CAMG	AC1,U.86			; OLD%CHR%IDX,CHR%IDX
  1138	405605'	254 00 0 00 405601'		JRST	L.378				; L.378
  1139					L.380:	MOVE	AC1,U.86			; AC1,CHR%IDX				
  1140	405606'	200 01 0 00 000126'						5423
  1141	405607'	202 01 0 00 000135'		MOVEM	AC1,U.89			; AC1,OLD%CHR%IDX
  1142						SETZM	U.83				; REPEAT%COUNT				
  1143	405610'	402 00 0 00 000117'						5424
  1144					L.381:	CAMG	AC16,U.50			; MAX%SIZE,SIZE				
  1145	405611'	317 16 0 00 000015'						5432
  1146	405612'	254 00 0 00 406020'		JRST	L.402				; L.402
  1147						MOVEI	AC1,1				; AC1,1					
  1148	405613'	201 01 0 00 000001 						5438
  1149	405614'	616 01 0 00 000013'		TDNN	AC1,U.48			; AC1,FLAG%REPEAT
  1150	405615'	254 00 0 00 405771'		JRST	L.397				; L.397
  1151					L.382:	MOVE	AC1,U.84			; AC1,CHAR%8%BIT			
  1152	405616'	200 01 0 00 000120'						5446
  1153	405617'	312 01 0 00 000127'		CAME	AC1,U.87			; AC1,OLD%CHAR%8%BIT
  1154	405620'	254 00 0 00 405646'		JRST	L.386				; L.386
  1155	405621'	201 01 0 00 000136 		MOVEI	AC1,136				; AC1,136
  1156	405622'	317 01 0 00 000117'		CAMG	AC1,U.83			; AC1,REPEAT%COUNT
  1157	405623'	254 00 0 00 405646'		JRST	L.386				; L.386
  1158						AOS	U.83				; REPEAT%COUNT				
  1159	405624'	350 00 0 00 000117'						5448
  1160						MOVEI	AC1,1				; AC1,1					
  1161	405625'	201 01 0 00 000001 						5450
  1162	405626'	616 01 0 00 000012'		TDNN	AC1,U.47			; AC1,FLAG%8QUOTE
  1163	405627'	254 00 0 00 405632'		JRST	L.383				; L.383
  1164	405630'	260 17 0 00 405521'		PUSHJ	SP,U.91				; SP,GET%8%QUOTED%CHAR
  1165	405631'	254 00 0 00 405633'		JRST	L.384				; L.384
  1166	405632'	260 17 0 00 405426'	L.383:	PUSHJ	SP,U.90				; SP,GET%QUOTED%CHAR
  1167	405633'	202 01 0 00 000116'	L.384:	MOVEM	AC1,U.82			; AC1,STATUS
  1168						CAIN	AC1,13				; AC1,13				
  1169	405634'	306 01 0 00 000013 						5452
  1170	405635'	254 00 0 00 405616'		JRST	L.382				; L.382
  1171						CAIN	AC1,113				; AC1,113				
  1172	405636'	306 01 0 00 000113 						5455
  1173	405637'	254 00 0 00 405642'		JRST	L.385				; L.385
  1174						SETOM	U.84				; CHAR%8%BIT				
  1175	405640'	476 00 0 00 000120'						5457
  1176						JRST	L.382				; L.382					
  1177	405641'	254 00 0 00 405616'						5455
  1178					L.385:	HRROI	AC1,-2				; AC1,-2				
  1179	405642'	561 01 0 00 777776 						5460
  1180	405643'	202 01 0 00 000120'		MOVEM	AC1,U.84			; AC1,CHAR%8%BIT
  1181						SETOM	U.86				; CHR%IDX				
  1182	405644'	476 00 0 00 000126'						5461
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-186
KERMSG	MAC	18-Jan-73 17:20	

  1183						JRST	L.382				; L.382					
  1184	405645'	254 00 0 00 405616'						5452
  1185					L.386:	MOVE	AC2,U.89			; AC2,OLD%CHR%IDX			
  1186	405646'	200 02 0 00 000135'						5466
  1187	405647'	200 04 0 00 000002 		MOVE	AC4,AC2				; AC4,AC2
  1188	405650'	271 04 0 00 000003 		ADDI	AC4,3				; AC4,3
  1189	405651'	200 01 0 00 000002 		MOVE	AC1,AC2				; AC1,AC2
  1190	405652'	350 03 0 00 000001 		AOS	AC3,AC1				; AC3,AC1
  1191	405653'	220 03 0 00 000117'		IMUL	AC3,U.83			; AC3,REPEAT%COUNT
  1192	405654'	311 04 0 00 000003 		CAML	AC4,AC3				; AC4,AC3
  1193	405655'	254 00 0 00 405722'		JRST	L.389				; L.389
  1194						MOVE	AC3,U.50			; AC3,SIZE				
  1195	405656'	200 03 0 00 000015'						5470
  1196	405657'	270 03 0 00 000002 		ADD	AC3,AC2				; AC3,AC2
  1197	405660'	271 03 0 00 000003 		ADDI	AC3,3				; AC3,3
  1198	405661'	317 03 0 00 000016 		CAMG	AC3,AC16			; AC3,MAX%SIZE
  1199	405662'	254 00 0 00 405701'		JRST	L.388				; L.388
  1200						MOVE	AC3,U.84			; AC3,CHAR%8%BIT			
  1201	405663'	200 03 0 00 000120'						5474
  1202	405664'	312 03 0 00 000127'		CAME	AC3,U.87			; AC3,OLD%CHAR%8%BIT
  1203	405665'	254 00 0 00 405671'		JRST	L.387				; L.387
  1204						MOVE	AC3,U.84			; AC3,CHAR%8%BIT			
  1205	405666'	200 03 0 00 000120'						5477
  1206	405667'	202 03 0 00 000115'		MOVEM	AC3,U.81			; AC3,NEXT%CHR
  1207						SOS	U.83				; REPEAT%COUNT				
  1208	405670'	370 00 0 00 000117'						5478
  1209					L.387:	HRROI	AC3,-2				; AC3,-2				
  1210	405671'	561 03 0 00 777776 						5481
  1211	405672'	312 03 0 00 000120'		CAME	AC3,U.84			; AC3,CHAR%8%BIT
  1212	405673'	254 00 0 00 406020'		JRST	L.402				; L.402
  1213						HRROI	AC3,-2				; AC3,-2				
  1214	405674'	561 03 0 00 777776 						5484
  1215	405675'	202 03 0 00 000115'		MOVEM	AC3,U.81			; AC3,NEXT%CHR
  1216						MOVEI	AC3,13				; AC3,13				
  1217	405676'	201 03 0 00 000013 						5485
  1218	405677'	202 03 0 00 000116'		MOVEM	AC3,U.82			; AC3,STATUS
  1219						JRST	L.402				; L.402					
  1220	405700'	254 00 0 00 406020'						5481
  1221					L.388:	MOVE	AC3,U.83			; AC3,REPEAT%COUNT			
  1222	405701'	200 03 0 00 000117'						5491
  1223	405702'	271 03 0 00 000040 		ADDI	AC3,40				; AC3,40
  1224	405703'	202 03 0 01 000130'		MOVEM	AC3,U.88(AC1)			; AC3,OLD%CHRS(AC1)
  1225						MOVE	AC1,U.38			; AC1,REPT%CHR				
  1226	405704'	200 01 0 00 000001'						5492
  1227	405705'	202 01 0 02 000132'		MOVEM	AC1,U.88+2(AC2)			; AC1,OLD%CHRS+2(AC2)
  1228						MOVEI	AC1,2				; AC1,2					
  1229	405706'	201 01 0 00 000002 						5493
  1230	405707'	272 01 0 00 000135'		ADDM	AC1,U.89			; AC1,OLD%CHR%IDX
  1231						MOVE	AC1,SMSG%DATA%CHARS		; AC1,SMSG%DATA%CHARS			
  1232	405710'	200 01 0 00 000000*						5497
  1233	405711'	270 01 0 00 000117'		ADD	AC1,U.83			; AC1,REPEAT%COUNT
  1234	405712'	275 01 0 00 000001 		SUBI	AC1,1				; AC1,1
  1235	405713'	202 01 0 00 405710*		MOVEM	AC1,SMSG%DATA%CHARS		; AC1,SMSG%DATA%CHARS
  1236						MOVE	AC1,U.60			; AC1,FILE%CHARS			
  1237	405714'	200 01 0 00 000105'						5498
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-187
KERMSG	MAC	18-Jan-73 17:20	

  1238	405715'	270 01 0 00 000117'		ADD	AC1,U.83			; AC1,REPEAT%COUNT
  1239	405716'	275 01 0 00 000001 		SUBI	AC1,1				; AC1,1
  1240	405717'	202 01 0 00 000105'		MOVEM	AC1,U.60			; AC1,FILE%CHARS
  1241						MOVEI	AC1,1				; AC1,1					
  1242	405720'	201 01 0 00 000001 						5499
  1243	405721'	202 01 0 00 000117'0 00 405745'						5526
  1244						MOVEI	AC1,13				; AC1,13				
  1245	405754'	201 01 0 00 000013 						5538
  1246	405755'	312 01 0 00 000116'		CAME	AC1,U.82			; AC1,STATUS
  1247	405756'	254 00 0 00 406020'		JRST	L.402				; L.402
  1248						MOVE	AC1,U.84			; AC1,CHAR%8%BIT			
  1249	405757'	200 01 0 00 000120'						5543
  1250	405760'	202 01 0 00 000127'		MOVEM	AC1,U.87			; AC1,OLD%CHAR%8%BIT
  1251						SETO	AC1,				; OLD%CHR%IDX,				
  1252	405761'	474 01 0 00 000000 						5545
  1253	405762'	254 00 0 00 405765'		JRST	L.396				; L.396
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-188
KERMSG	MAC	18-Jan-73 17:20	

  1254					L.395:	MOVE	AC2,U.85(AC1)			; AC2,CHRS(OLD%CHR%IDX)			
  1255	405763'	200 02 0 01 000121'						5546
  1256	405764'	202 02 0 01 000130'		MOVEM	AC2,U.88(AC1)			; AC2,OLD%CHRS(OLD%CHR%IDX)
  1257					L.396:	ADDI	AC1,1				; OLD%CHR%IDX,1				
  1258	405765'	271 01 0 00 000001 						5545
  1259	405766'	317 01 0 00 000126'		CAMG	AC1,U.86			; OLD%CHR%IDX,CHR%IDX
  1260	405767'	254 00 0 00 405763'		JRST	L.395				; L.395
  1261	405770'	254 00 0 00 405606'		JRST	L.380				; L.380
  1262					L.397:	MOVE	AC1,U.50			; AC1,SIZE				
  1263	405771'	200 01 0 00 000015'						5558
  1264	405772'	270 01 0 00 000126'		ADD	AC1,U.86			; AC1,CHR%IDX
  1265	405773'	271 01 0 00 000001 		ADDI	AC1,1				; AC1,1
  1266	405774'	313 01 0 00 000016 		CAMLE	AC1,AC16			; AC1,MAX%SIZE
  1267	405775'	254 00 0 00 406020'		JRST	L.402				; L.402
  1268						AOS	SMSG%DATA%CHARS			; SMSG%DATA%CHARS			
  1269	405776'	350 00 0 00 405740*						5560
  1270						AOS	U.60				; FILE%CHARS				
  1271	405777'	350 00 0 00 000105'						5561
  1272						MOVE	AC1,U.86			; CHR%IDX,CHR%IDX			
  1273	406000'	200 01 0 00 000126'						5563
  1274	406001'	344 01 0 00 406005'		AOJA	AC1,L.399			; CHR%IDX,L.399
  1275					L.398:	MOVE	AC2,U.85(AC1)			; AC2,CHRS(CHR%IDX)			
  1276	406002'	200 02 0 01 000121'						5565
  1277	406003'	136 02 0 00 000014 		IDPB	AC2,AC14			; AC2,POINTER
  1278						AOS	U.50				; SIZE					
  1279	406004'	350 00 0 00 000015'						5566
  1280					L.399:	SOJGE	AC1,L.398			; CHR%IDX,L.398				
  1281	406005'	365 01 0 00 406002'						5563
  1282						MOVEI	AC1,1				; AC1,1					
  1283	406006'	201 01 0 00 000001 						5569
  1284	406007'	616 01 0 00 000012'		TDNN	AC1,U.47			; AC1,FLAG%8QUOTE
  1285	406010'	254 00 0 00 406013'		JRST	L.400				; L.400
  1286	406011'	260 17 0 00 405521'		PUSHJ	SP,U.91				; SP,GET%8%QUOTED%CHAR
  1287	406012'	254 00 0 00 406014'		JRST	L.401				; L.401
  1288	406013'	260 17 0 00 405426'	L.400:	PUSHJ	SP,U.90				; SP,GET%QUOTED%CHAR
  1289	406014'	202 01 0 00 000116'	L.401:	MOVEM	AC1,U.82			; AC1,STATUS
  1290						MOVEI	AC1,13				; AC1,13				
  1291	406015'	201 01 0 00 000013 						5571
  1292	406016'	316 01 0 00 000116'		CAMN	AC1,U.82			; AC1,STATUS
  1293						JRST	L.381				; L.381					
  1294	406017'	254 00 0 00 405611'						5432
  1295					L.402:	SKIPN	U.50				; SIZE					
  1296	406020'	336 00 0 00 000015'						5581
  1297	406021'	254 00 0 00 406024'		JRST	L.403				; L.403
  1298	406022'	201 01 0 00 000013 		MOVEI	AC1,13				; AC1,13
  1299	406023'	254 00 0 00 406025'		JRST	L.404				; L.404
  1300	406024'	200 01 0 00 000116'	L.403:	MOVE	AC1,U.82			; AC1,STATUS
  1301					L.404:	POP	SP,AC16				; SP,AC16				
  1302	406025'	262 17 0 00 000016 						5232
  1303	406026'	262 17 0 00 000014 		POP	SP,AC14				; SP,AC14
  1304	406027'	263 17 0 00 000000 		POPJ	SP,				; SP,
  1305
  1306					; Routine Size:  181 words
  1307
  1308
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-189
KERMSG	MAC	18-Jan-73 17:20	

  1309					;   5584  1	%SBTTL 'BFR%EMPTY'
  1310					;   5585  1	ROUTINE BFR%EMPTY =
  1311					;   5586  1	
  1312					;   5587  1	!++
  1313					;   5588  1	! FUNCTIONAL DESCRIPTION:
  1314					;   5589  1	!
  1315					;   5590  1	!	This routine will empty the data from the REC%MSG message buffer
  1316					;   5591  1	!	to the file.  It will process quoting characters.
  1317					;   5592  1	!
  1318					;   5593  1	! CALLING SEQUENCE:
  1319					;   5594  1	!
  1320					;   5595  1	!	Flag = BFR%EMPTY();
  1321					;   5596  1	!
  1322					;   5597  1	! INPUT PARAMETERS:
  1323					;   5598  1	!
  1324					;   5599  1	!	None.
  1325					;   5600  1	!
  1326					;   5601  1	! IMPLICIT INPUTS:
  1327					;   5602  1	!
  1328					;   5603  1	!	None.
  1329					;   5604  1	!
  1330					;   5605  1	! OUTPUT PARAMETERS:
  1331					;   5606  1	!
  1332					;   5607  1	!	Tru 144 135 0 		BYTE	(7)"r","t","e","d","]"		; rted]
  2485	400415'	000 000 000 000 000 0 		BYTE	(7)000,000,000,000,000
  2486
  2487
  2488					; DO%TRANSACTION
  2489					U.1:	PUSH	SP,AC14				; SP,AC14				
  2490	400416'	261 17 0 00 000014 						1793
  2491	400417'	261 17 0 00 000016 		PUSH	SP,AC16				; SP,AC16
  2492						SETZM	U.52				; NUM%RETRIES				
  2493	400420'	402 00 0 00 000017'						1838
  2494						MOVE	AC1,-3(SP)			; AC1,INIT%STATE			
  2495	400421'	200 01 0 17 777775 						1839
  2496	400422'	202 01 0 00 000014'	L.31:	MOVEM	AC1,U.49			; AC1,STATE
  2497					L.32:	MOVE	AC1,U.49			; AC1,STATE				
  2498	400423'	200 01 0 00 000014'						1843
  2499	400424'	200 02 0 00 000001 		MOVE	AC2,AC1				; AC2,AC1
  2500	400425'	361 02 0 00 400455'		SOJL	AC2,L.34			; AC2,L.34
  2501	400426'	305 02 0 00 000024 		CAIGE	AC2,24				; AC2,24
  2502	400427'	254 00 0 02 400431'		JRST	L.33(AC2)			; L.33(AC2)
  2503	400430'	254 00 0 00 400455'		JRST	L.34				; L.34
  2504	400431'	254 00 0 00 400554'	L.33:	JRST	L.44				; L.44
  2505	400432'	254 00 0 00 400550'		JRST	L.42				; L.42
  2506	400433'	254 00 0 00 400546'		JRST	L.41				; L.41
  2507	400434'	254 00 0 00 400552'		JRST	L.43				; L.43
  2508	400435'	254 00 0 00 400564'		JRST	L.48				; L.48
  2509	400436'	254 00 0 00 400572'		JRST	L.51				; L.51
  2510	400437'	254 00 0 00 400570'		JRST	L.50				; L.50
  2511	400440'	254 00 0 00 400566'		JRST	L.49				; L.49
  2512	400441'	254 00 0 00 400574'		JRST	L.52				; L.52
  2513	400442'	254 00 0 00 400455'		JRST	L.34				; L.34
  2514	400443'	254 00 0 00 400455'		JRST	L.34				; L.34
  2515	400444'	254 00 0 00 400562'		JRST	L.47				; L.47
  2516	400445'	254 00 0 00 400560'		JRST	L.46				; L.46
  2517	400446'	254 00 0 00 400531'		JRST	L.37				; L.37
  2518	400447'	254 00 0 00 400542'		JRST	L.39				; L.39
  2519	400450'	254 00 0 00 400544'		JRST	L.40				; L.40
  2520	400451'	254 00 0 00 400544'		JRST	L.40				; L.40
  2521	400452'	254 00 0 00 400556'		JRST	L.45				; L.45
  2522	400453'	254 00 0 00 400455'		JRST	L.34				; L.34
  2523	400454'	254 00 0 00 400455'		JRST	L.34				; L.34
  2524					L.34:	SETZ	AC14,				; RETURN%VALUE,				
  2525	400455'	400 14 0 00 000000 						1937
  2526						CAIN	AC1,23				; AC1,23				
  2527	400456'	306 01 0 00 000023 						1939
  2528	400457'	201 14 0 00 000312 		MOVEI	AC14,312			; RETURN%VALUE,312
  2529						MOVEI	AC1,1				; AC1,1					
  2530	400460'	201 01 0 00 000001 						1945
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-46
KERMSG	MAC	18-Jan-73 17:20	
		;   5320  4	! Determine if we should just quote the character
   793					;   5321  4	!	Either:
   794					;   5322  4	!		Character is a delete (177 octal)
   795					;   5323  4	!	or	Character is a control character (less than 40 octal)
   796					;   5324  4	!	or	Character is a quote character
   797					;   5325  4	!	or	Character is the repeat character and doing repeat compressi
   798					on
   799					;   5326  4	!	or	Character is an eight bit quote character and doing eight bi
   800					t
   801					;   5327  4	!		  quoting.
   802					;   5328  4	!
   803					;   5329  4	
   804					;   5330  5		    IF ((.CHAR%8%BIT AND %O'177') LSS %C' ') OR ((.CHAR%8%BIT AND %O
   805					'177') EQL CHR%DEL) OR (
   806					;   5331  7			(.CHAR%8%BIT AND %O'177') EQL .RCV%QUOTE%CHR) OR (.FLAG%REPE
   807					AT AND ((.CHAR%8%BIT AND
   808					;   5332  6			%O'177') EQL .REPT%CHR)) OR (.FLAG%8QUOTE AND ((.CHAR%8%BIT 
   809					AND %O'177') EQL
   810					;   5333  5			.SEND%8QUOTE%CHR))
   811					;   5334  4		    THEN
   812					;   5335  5			BEGIN
   813					;   5336  5	!
   814					;   5337  5	! If the character is a control character or delete we must do a CTL(Charact
   815					er)
   816					;   5338  5	! so it is something that we can be sure we can send.
   817					;   5339  5	!
KERMSG	MACRO %53B(1155)-2 15:27  3-Oct-85 Page 1-177
KERMSG	MAC	18-Jan-73 17:20	

   818					;   5340  5	
   819					;   5341  6			IF ((.CHAR%8%BIT AND %O'177') LSS %C' ') OR ((.CHAR%8%BIT AN
   820					D %O'177') EQL CHR%DEL)
   821					;   5342  5			THEN
   822					;   5343  6			    CHRS [0] = CTL (.CHAR%8%BIT)
   823					;   5344  5			ELSE
   824					;   5345  5			    CHRS [0] = .CHAR%8%BIT;
   825					;   5346  5	
   826					;   5347  5			CHR%IDX = 1;
   827					;   5348  5			CHRS [1] = .RCV%QUOTE%CHR;	![035] Use character we said
   828					 we would send
   829					;   5349  5			END
   830					;   5350  4		    ELSE
   831					;   5351  5			BEGIN
   832					;   5352  5			CHR%IDX = 0;
   833					;   5353  5			CHRS [0] = .CHAR%8%BIT;
   834					;   5354  4			END;
   835					;   5355  4	
   836					;   5356  4		    END
   837					;   5357  3		ELSE
   838					;   5358  3	
   839					;   5359  3		    IF .STATUS NEQ KER%EOF THEN KRM%ERROR (.STATUS);	! Report err
   840					or
   841					;   5360  3	
   842					;   5361  3		RETURN .STATUS;
   843					;   5362  2		END;
   844
   845
   846	000115'					RELOC	115
   847					; NEXT%CHR
   848	000115'				U.81:	BLOCK	1
   849					; STj9B`@O@$2()MabDV 2j9Bp"@N<(1H\0qj9C@N@
0(9DU#Blj9C	c@Lp<0D\&16j9J
@P@0Iu X9e
E@6x00@X9e@@7`00:pF9p"@6x<0>X9e u@7P"0#8#H!
$=j92`@7'<(8(
F9KJ@7 +<,8,X9e`
@7h/0080"(X9t@;@83<4@4F9K
]@87<8@8F9
&@90;$<@<=0
Q!hJX9uz@9@$A@Aj9"p*@P DE@E'@u j9"@e@9H<IHI(1"
4(oX9v 	@FxM0N
0N. X9v@GQ0R
0R04X9-@NhU$V
8V(X9 B@PhY$Z
8Z!$Xj9*
@Px]$^
8^#,B0X9"@	Y@Pxa<E
8b+)x,B&Ej9#@Ghe<f
8f6X9`t@Npi$j
8j;X9@v@Ixmn
8n=9S`
(2"8X9@@Jrs
@s
X9`
A@Hpv0w
@w.":-
j9JK@P0{$|
@|3(X9@Hx0
@6X9 4@IP0
H(8BIqF(Sp?80X9 @JH<
P&(Q"(X9@L($
P?`
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

AC1	   561	   563	   569	   571	   574	   576	   582	   585	   587	   589	   591	   592	   594	   596
	   606	   612	   680	   682	   683	   685	   869	   871	   872	   876	   879	   882	   885	   886
	   890	   892	   893	   895	   899	   900	   902	   904	   905	   907	   909	   910	   913	   914
	  1129	  1132	  1134	  1135	  1137	  1139	  1141	  1147	  1149	  1151	  1153	  1155	  1156	  1160
	  1162	  1167	  1168	  1171	  1178	  1180	  1189	  1190	  1224	  1225	  1227	  1228	  1230	  1231
	  1233	  1234	  1235	  1236	  1238	  1239	  1240	  1241	  1243	  1244	  1246	  1248	  1250	  1251
	  1254	  1256	  1257	  1259	  1262	  1264	  1265	  1266	  1272	  1274	  1275	  1280	  1282	  1284
	  1289	  1290	  1292	  1298	  1300
AC10	   670	   672	   692
AC11	   663	   665	   691
AC12	   650	   674	   682	   690
AC13	   620	   646	   657	   689
AC14	   600	   655	   688	  1277	  1303
AC16	   610	   614	   686	  1144	  1198	  1266	  1301
AC2	   577	   578	   596	   598	   612	   616	   619	   622	   624	   626	   629	   630	   634	   640
	   642	   643	   648	   676	   897	   912	   913	  1132	  1134	  1185	  1187	  1189	  1196	  1227
	  1254	  1256	  1275	  1277
AC3	   595	   604	   608	   610	   660	   662	   663	   667	   669	   670	  1190	  1191	  1192	  1194
	  1196	  1197	  1198	  1200	  1202	  1204	  1206	  1209	  1211	  1213	  1215	  1216	  1218	  1221
	  1223	  1224
AC4	   606	   648	   676	   685	  1187	  1188	  1192
AC5	   632	   638	   652
ARGBLK	   156	   343
ARGFLG	   162	   177	   229	   255
ARGFLN	   160
ARGFLP	   158	   330
C.100	   900	   907	   918#
C.12	   557
C.18	   577
C.20	   564
C.26	   566
C.37	   879
C.98	   899
C.99	   884
D$BLKS	   418	   463
D$MSFD	   194
DEPTH	   206	   216	   274	   278	   302	   315	   318	   328	   359	   393	   414	   426	   430	   450
DFLP	   361	   363	   364	   365	   381	   385	   402	   449	   451	   453	   455	   456	   460	   462
	   465
DIR	   418	   463
DIRBLK	   387	   415	   427	   474
DIRCHN	   217	   224	   386	   395	   452	   475	   478
DIRIDX	   227	   312	   320	   329	   431
DLEB	   362	   367	   375	   377	   380
DONE	   289	   296#
DPTH	   201	   314	   319	   340	   366	   368	   371	   372	   376	   384	   401	   479
FD.LEN	   112	   164
FD.TYP	   115	   167
FDB	   170	   172	   185	   192	   196	   198	   199	   240	   241	   244	   245	   303	   306	   336
	   345
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

FILELP	   238#	   267	   269	   317
FNDDIR	   263	   302#
FO.ASC	   360
FO.CHN	   385	   402	   453
FO.FNC	   455	   456	   460	   461
FO.PRV	   360
FOUND	   256	   328#
FTJSYS	    23
FWMASK	   455	   460
I%JINF	   491
IO.EOF	   472
JI.USR	   490
L.179	   582#
L.181	   581
L.182	   584
L.183	   588
L.348	   596#	   604
L.349	   595	   599	   604#
L.350	   602	   606#
L.351	   608#	   650	   656	   664	   671	   678
L.352	   618	   622#
L.353	   625	   629#
L.354	   621	   623	   628	   632#
L.355	   631	   638#
L.356	   636	   643#
L.357	   645	   652#
L.358	   654	   657#
L.359	   662	   665#
L.360	   659	   667#
L.361	   669	   672#
L.362	   665	   674#
L.363	   611	   680#
L.364	   871	   879#
L.365	   881	   890#
L.366	   878	   892#
L.367	   888	   893#
L.372	   896
L.374	   903	   906	   914#
L.378	  1132#	  1138
L.379	  1131	  1135#
L.380	  1139#	  1261
L.381	  1144#	  1293
L.382	  1151#	  1170	  1176	  1183
L.383	  1163	  1166#
L.384	  1165	  1167#
L.385	  1173	  1178#
L.386	  1154	  1157	  1185#
L.387	  1203	  1209#
L.388	  1199	  1221#
L.389	  1193
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

L.395	  1254#	  1260
L.396	  1253	  1257#
L.397	  1150	  1262#
L.398	  1275#	  1280
L.399	  1274	  1280#
L.400	  1285	  1288#
L.401	  1287	  1289#
L.402	  1146	  1212	  1219	  1247	  1267	  1295#
L.403	  1297	  1300#
L.404	  1299	  1301#
LASSTR	   335
LK$FLN	   107	   159
LK$FLP	   105	   157
LK$FRS	   176
LK$SFD	   228	   252
LNMFLG	   288
LOKINI	   182	   489#
LOKW.0	   192#	   283	   291
LOKW.1	   196#	   203
LOKW.2	   197	   200	   204#
LOKWLD	   146	   148#
LSTIN.	    13	    97	    98	    98#	    99	   149	   150	   150#	   151	   483
MFDPPN	   370
MYPPN	   493
NXTBLK	   268	   388	   414#
NXTDIR	   235	   274#
NXTFIL	   230	   239	   242	   246	   266#	   280	   304	   307	   321
OPND.0	   369	   374#
OPND.1	   383	   401#
OPNDIR	   233	   316	   358#
P	    14	    98	   150
P1	    96	    98	   148	   150	   192
P2	    96	    98	   148	   150
P3	    96	    98	   148	   150
P4	    96	    98	   148	   150
RDBL.0	   458	   472#
RDBL.1	   473	   482#
RDBL.2	   474#	   484
RDBLK	   416	   428	   449#
REREAD	   279	   426#
REST.0	   225	   233#
REST.1	   207	   224#
REST.2	   222	   227#
RESTAR	   178	   215#
S1	    96	   102	   105	   106	   107	   108	   109	   110	   111	   112	   115	   148	   154	   157
	   158	   159	   160	   161	   162	   163	   164	   167	   170	   171	   172	   176	   177	   179
	   194	   196	   198	   199	   201	   203	   228	   229	   238	   240	   241	   243	   244	   245
	   251	   253	   254	   255	   302	   303	   306	   312	   314	   319	   332	   333	   335	   336
	   337	   341	   342	   343	   344	   345	   346	   347	   360	   361	   362	   363	   370	   371
	   372	   373	   374	   375	   376	   377	   379	   380	   381	   382	   385	   386	   394	   395
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

	   396	   414	   415	   426	   427	   430	   431	   449	   450	   452	   474	   475	   478	   479	   489
	   494
S2	    96	   104	   105	   107	   109	   111	   112	   113	   115	   116	   148	   156	   157	   159
	   161	   163	   164	   165	   167	   168	   180	   196	   197	   198	   199	   201	   252	   260
	   261	   262	   303	   305	   306	   313	   314	   328	   329	   334	   338	   339	   340	   341
	   342	   346	   347	   366	   367	   384	   401	   402	   403	   452	   453	   454	   455	   456
	   457	   459	   460	   461	   462	   465	   466	   472	   475	   476	   490	   493
SECBLK	   104
SECFLG	   110
SECFLN	   108
SECFLP	   106
SECWLD	    94	    96#
SETDIR	   193
SETOPN	   358
SMSG%D	  1231	  1235	  1268
SP	   557	   558	   564	   566	   567	   568	   579	   608	   660	   667	   680	   686	   688	   689
	   690	   691	   692	   693	   884	   885	   887	   916	  1164	  1166	  1286	  1288	  1301	  1303
	  1304
STRLOP	   276	   282#
T1	   185	   195	   202	   204	   205	   206	   216	   217	   224	   227	   238	   243	   251	   260
	   266	   267	   274	   275	   305	   312	   313	   318	   320	   329	   332	   359	   366	   368
	   369	   384	   386	   387	   393	   395	   401	   418	   431	   461	   463
T2	   186	   330	   331	   337	   464
T3	   331	   333	   334	   338
T4	    96	    98	   148	   150
TOP	   205	   275
TRYDIR	   231	   260#
U.24	   568
U.31	   592
U.38	  1225
U.44	   912
U.47	   905	  1162	  1284
U.48	  1149
U.50	  1144	  1194	  1262	  1278	  1295
U.51	   571
U.52	   569	   572
U.53	   567	   574	   578	   585
U.54	   587
U.59	   563
U.60	  1236	  1240	  1270
U.61	   559	   591
U.66	   882
U.67	   594
U.81	   848#	   869	   874	  1206	  1215
U.82	   850#	   886	   892	   893	   914	  1167	  1218	  1246	  1289	  1292	  1300
U.83	   852#	  1142	  1156	  1158	  1191	  1207	  1221	  1233	  1238	  1243
U.84	   854#	   872	   897	  1151	  1174	  1180	  1200	  1204	  1211	  1248
U.85	   856#	   902	   909	   913	   918	  1132	  1254	  1275
U.86	   858#	   910	  1137	  1139	  1181	  1259	  1264	  1272
U.87	   860#	  1153	  1202	  1250
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

U.88	   862#	  1134	  1224	  1227	  1256
U.89	   864#	  1141	  1185	  1230
U.90	   869#	  1166	  1288
U.91	  1164	  1286
WLDEDT	    20#
WLDMIN	    19#
WLDVER	    18#
WLDWHO	    21#
XFR%ST	   558
ZERBEG	   180
ZERLEN	   179
$LKFDB	   111	   163	   344
$LKFLG	   109	   161
$LKFLP	   105	   107	   157	   159
$LKLEN	   102	   154
%FD.LE	   112	   113	   164	   165
%FD.TY	   115	   116	   167	   168
%FO.CH	   385	   386	   402	   403	   453	   454
%LDMFD	   494
%LK$FL	   105	   106	   107	   108	   157	   158	   159	   160
..0001	    98	    98#
..0002	    99#
..0003	   150	   150#
..0004	   151#
..CSC	   105#	   105	   106	   106#	   107#	   107	   108	   108#	   112#	   112	   113	   113#	   115#	   115
	   116	   116#	   157#	   157	   158	   158#	   159#	   159	   160	   160#	   164#	   164	   165	   165#
	   167#	   167	   168	   168#	   385#	   385	   386	   386#	   402#	   402	   403	   403#	   453#	   453
	   454	   454#	   455#	   455	   456	   456#	   460#	   460	   461	   461#
..CSN	   105#	   105	   107#	   107	   112#	   112	   115#	   115	   157#	   157	   159#	   159	   164#	   164
	   167#	   167	   385#	   385	   402#	   402	   453#	   453	   455#	   455	   460#	   460
..MMJ	   495
..MX1	   176#	   176	   177	   228#	   228	   229	   252#	   252	   253	   360#	   360	   361	   374#	   374
	   375	   378#	   380	   418#	   419	   454#	   454	   455	   459#	   459	   460	   463#	   464	   489#
	   489	   490	   490#	   491	   494#	   494
..MX2	   176#	   176	   177	   228#	   228	   229	   252#	   252	   253	   360#	   360	   361	   374#	   374
	   375	   454#	   455	   459#	   460	   489#	   489	   490	   490#	   491	   494#	   495
..PST	   105#	   105	   107#	   107	   112#	   112	   115#	   115	   157#	   157	   159#	   159	   164#	   164
	   167#	   167	   385#	   385	   402#	   402	   453#	   453	   455#	   455	   460#	   460
..TSA1	    96#	    96	    98#	    98	   148#	   148	   150#	   150
..TX1	   472#	   472	   473
..TX2	   472#	   473
.A13	    96	    99	   148	   151
.A14	    96	    99	   148	   151
.A15	    96	    99	   148	   151
.A16	    96	    98	    99	   148	   150	   151
.ACB	    96#	    96	    98#	    98	   148#	   148	   150#	   150
.ACM	    96#	    96	    98	    98#	    99	   148#	   148	   150	   150#	   151
.FDDIM	   198
.FDEXM	   245
.FDEXT	   244
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Symbol cross reference

.FDLEN	   112	   115	   164	   167
.FDNAM	   240
.FDNAT	   116	   168
.FDNMM	   241
.FDPAT	   303
.FDPPN	   196	   199
.FDSFM	   306
.FDSIZ	   113	   165	   172	   347
.FDSTR	   185	   336
.FOBRH	   364
.FODEV	   337
.FOFNC	   361	   385	   402	   449	   451	   453	   455	   456	   460	   462	   465
.FOINP	   459
.FOLEB	   331	   363
.FOMAX	   381
.FONBF	   365
.FORED	   360
.FOUSI	   454
.INILN	   183
.INIST	   187
.KERER	   482	   482#
.NVR	    96#	    96	    98	    98#	    99	   148#	   148	   150	   150#	   151
.NXSTR	   188	   282
.NXTLN	   290
.POPJ	    14
.PSECT	    96	    98	   148	   150	   176	   177	   228	   229	   252	   253	   360	   361	   374	   375
	   379	   380	   418	   419	   454	   455	   459	   460	   463	   464	   472	   473	   489	   490
	   491	   494
.PTMAX	   341
.PTPPN	   201	   339	   340	   366	   368	   371	   384	   401
.PTSFD	   314	   319	   341	   372	   479
.RBCNT	   380
.RBEXT	   334	   375
.RBMAX	   378	   379
.RBNAM	   333	   367
.RBPPN	   338	   377
.RETF	    14
.RETT	    14
.SAVE1	    98	   150
.ZCHNK	   181
FO.FNC IS NOT DEFINED
FO.FNC IS NOT DEFINED
V	DFLP:	BLOCK	.FOMAX			; Directory FILOP. block
V	DLEB:	BLO
Macro/Opdef cross reference

FILOP.	   382	   457	   466
GLOB	    14	   482
ITEXT	   483
JUMPF	    14	   235
JUMPT	    14	   269	   283	   291	   317
KERERR	   482
LOAD	   105	   107	   111	   112	   115	   157	   159	   163	   164	   167	   344	   385	   402
LSTOF.	    13	    97	   149	   483
LSTON.	    98	    99	   150	   151
MOVX	   176	   228	   252	   360	   374	   378	   418	   454	   459	   463	   489	   490	   494
PJRST	    14
POINTR	   385	   402	   453
POS	   385	   402	   453
PROLOG	    13
RESDV.	   396	   403	   476
STORE	   453	   455	   460
TOPS20	    23
TXNN	   472
WID	   385	   402	   453
XMOVEI	   192
ZERO	   451
$CALL	    98	   150	   181	   182	   183	   187	   188	   193	   233	   268	   279	   282	   290	   316
	   358	   388	   416	   428	   482	   491
$RET	    14#	    14	   397
$RETF	    14#	    14	   103	   114	   117	   121	   155	   166	   169	   218	   296	   405	   480
$RETIF	    14#	    14	   417	   429	   492
$RETIT	    14#	    14	   389
$RETT	    14#	    14	   348	   419	   432	   468
$SAVE	    96	    98	   148	   150
%....U	   378	   379	   381
..CAS1	   105	   107	   112	   115	   157	   159	   164	   167	   385	   402	   453	   455	   460
..DPB	   453	   455	   460
..LDB	   105	   107	   112	   115	   157	   159	   164	   167	   385	   402
..POP	    98	   150
..PUSH	    98	   150
..STR0	   105	   107	   112	   115	   157	   159	   164	   167	   385	   402	   453	   455	   460
..TSAC	    96	    98	   148	   150
..TSIZ	   105	   107	   112	   115	   157	   159	   164	   167	   385	   402	   453	   455	   460
..TX	   472
.CASE	   105	   107	   112	   115	   157	   159	   164	   167	   385	   402	   453	   455	   460
.NV1	    98#	    98	   150#	   150
.NV2	    98#	    98	   150#	   150 A N]