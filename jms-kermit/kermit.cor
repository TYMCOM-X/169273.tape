 REP 1/1
		TITLE	KERMIT-10 - KL10 Error-free Reciprocol Micro Interface Transfer
 WIT
	TITLE	KERMIT-10 - KL10 Error-free Reciprocol Micro Interface Transfer

		;[CSM] Edits applicable to all TOPS-10 sites
	;[CSM] Bug at OPNWR0 - FILNAM.000 not created in right SFD.
	;[CSM] New feature at CN.ESC - Allow ^\^C (accept ^C same as "C").
	;[CSM] Make sure XFRTRM+$TTDEV is always consistant.
	;[CSM] Clear input buffer of XFR terminal in CONNECT command.
	;[CSM] Change .IOPIM!IO.SUP to .IOPIM!IO.LEM since IO.SUP is redundant.
	;[CSM]   (if SCNSER is modified, IO.LEM enables XON/XOFF dual processing)
	;[xxx] Need to modify BLISS routines to prefix NAK with XON in case
	;[xxx]   other KERMIT stop sending because noise on the line looked like
	;[xxx]   an XOFF.

	  FTCSM==-1 ;[CSM] Modifications specific to the Colorado School of Mines
	;[CSM] At FILE%OPEN, make it illegal to create files when not logged in.
	;[CSM] Change help FDB to access HLP:KERM10.HLP, KERMIT.HLP is general info.
	;[CSM] Add "CONNECT DIAL-MODEM", "CONNECT CRUNCH-1091", "CONNECT MUNCH-2020".
	;[CSM] GTNTN. is implemented, but .NDTCN is not, put in temp *HACK*.
 REP 19/1
		MITEDT==123			; Edit level
 WIT
		MITEDT==126			; Edit level
 REP 46/3
		Clear the input buffer before we send a message.  This ignores any garbage
		which came in on the line since the last message we received.
 WIT
		Clear the input buffer before we send a message.  This ignores any
		garbage which came in on the line since the last message we received.
 REP 53/3
		carriage return will force a timeout (therefore either a NAK or retransmission).
 WIT
		carriage return will force a timeout (therefore either a NAK or
		retransmission).
 REP 86/3
		pointers for the KI10s that use Kermit.'
 WIT
		pointers for the KI10s that use Kermit.
 INS 98/3

	124	Released to COLUMBIA and LCG.MARKET

	125	Bug fixes from CSM and other places

	126	By: Nick Bush		On: 11-July-1984
		RECEIVE FOO.BAR would not work correctly.
		It thought the extension was wild-carded.
 INS 91/4


 INS 94/4



 REP 3/5
	CON000:	$NOISE	(CON010,<to line>)
 WIT
	CON000:	$NOISE	(CON010,<to line>)	;No argument required if SET LINE
 INS 21/5
	;CON100 is used only if no previous SET LINE has been done, therefore an
	;argument is required (cannot CONNECT to your own terminal).

 REP 36/5
	CON150:	$NUMBER	(CONFRM,^D8,<line number to use for virtual terminal>)
 WIT
	IFE FTCSM,<
	CON150:	$NUMBER	(CONFRM,^D8,<line number to use for virtual terminal>)
	>  ;End of IFE FTCSM

	IFN FTCSM,<	;Allow "CONNECT DIALER-MODEM", "CONNECT CRUNCH-1091"
	CON150:	$NUMBER	(CONFRM,^D8,<Line number to use for virtual terminal or>,<$ALTERNATE(CON160),$ERRPDB(CON160)>)
	CON160:	$NOISE	(CON170,<Name of special terminal line>) ;[CSM]
	CON170:	$KEYDSP	(LIN500,<$ALTERNATE(SET005)>)	;[CSM] Table in SET LINE
	>  ;End of IFN FTCSM

 DEL 22/6
 REP 4/7
 WIT



 REP 18/17
	LIN050:	$NUMBER	(SET005,^D8,<line number to use for virtual terminal>,$ALTERNATE(SET005))
	>; End of TOPS10 conditional
 WIT
	IFE FTCSM,<
	LIN050:	$NUMBER	(SET005,^D8,<Line number to use for virtual terminal>,<$ALTERNATE(SET005)>)
	>  ;End of IFE FTCSM
	IFN FTCSM,<
	LIN050:	$NUMBER	(SET005,^D8,<Line number to use for virtual terminal or>,<$ALTERNATE(LIN060),$ERRPDB(LIN060)>)

	LIN060:	$NOISE	(LIN070,<Name of special terminal line>) ;[CSM]

	LIN070:	$KEYDSP	(LIN500,<$ALTERNATE(SET005)>)	;[CSM]

	LIN500:	$STAB					;[CSM]
		 DSPTAB	(CONFRM,1,<CRUNCH-1091>)	;[CSM] Line from 2020 to 1091
		 DSPTAB	(CONFRM,0,<DIALER-MODEM>)	;[CSM] Autodial modem on 1091
		 DSPTAB	(CONFRM,2,<MUNCH-2020>)		;[CSM] Line from 1091 to 2020
		$ETAB					;[CSM]

	;[CSM] List of node,line for special terminals
	CSMNOD:	XWD	1,133	;[CSM] 0 = DIALER-MODEM, line 133 on CRUNCH(1)
		XWD	2,4	;[CSM] 1 = CRUNCH-1091, line 4 on MUNCH(2)
		XWD	1,127	;[CSM] 2 = MUNCH-2029, line 133 on CRUNCH(1)
	>  ;End of IFN FTCSM
 INS 49/28

	; Determine if we are logged in.  (In conditional after START:)

		PJOB	S1,			;[125] Get our job number
		MOVNS	S1			;[125] Set up for JOBSTS
		JOBSTS	S1,			;[125] Get status for us
		  MOVX	S1,JB.ULI		;[125]  Old TOPS-10 maybe?
		TXNN	S1,JB.ULI		;[125] Logged in?
		 SETZ	S1,			;[125] No, remember that
		MOVEM	S1,LOGDIN		;[125] Flag file creation time
 REP 15/29
		 $CALL	I%EXIT			; And exit
 WIT
		 $CALL	C$EXI0			;[125] And exit
 INS 66/32

 INS 6/33
		MOVX	S1,<<SIXBIT |INI|>>	;[125] Try INI:KERMIT.INI first
		MOVEM	S1,INIFD+.FDSTR		;[125]  for global defs
		MOVEI	S1,INIFD		;[125] Get the FD address
		SETZ	S2,			;[125] No log file FD
		$CALL	P$TAKE			;[125] Set up the take
		JUMPF	REDIN0			;[125] If not there don't worry
		MOVEM	S1,INIIFN		;[125] Save the IFN
		$CALL	PARL.1			;[125] Parse the file

	REDIN0:	MOVSI	S1,'DSK'		;[125] Now we will use
		MOVEM	S1,INIFD+.FDSTR		;[125] DSK:KERMIT.INI[,]
 INS 30/39

	;[CSM] There is a bug in the TOPS-10 monitor - If a terminal other than
	;[CSM] the controlling TTY has characters in its input buffer when it is
	;[CSM] INITed in Packed Image Mode, then the count of break characters
	;[CSM] wrong.  The Monitor remains N characters behind.  Until SCNSER is
	;[CSM] fixed, clear the input buffer when connecting.  At CNCT.0+4.

		MOVX	T1,.TOCIB	;[CSM]	; Clear the input buffer
		MOVE	T2,XFRTRM+$TTUDX;[CSM]	; Get the UDX
		MOVX	S1,[XWD 2,T1]	;[CSM]	; Point to the argument
		TRMOP.	S1,		;[CSM]	; Clear the input buffer
		  JFCL			;[CSM]	; Don't care

 REP 41/39
		XMOVEI	S1,MYTERM		; Point to the block
 WIT
		XMOVEI	S2,MYTERM		;[125] Point to the block
 INS 84/39
		MOVE	S2,S1			;[125] Copy character
		ANDI	S2,177			;[125] Ignore parity bit in the compares
 REP 88/39
		CAME	S1,ESCAPE		; Is this escape?
 WIT
		CAME	S2,ESCAPE		;[125] Is this escape?
 REP 94/39
	CN.ESC:	CAIE	S1,"C"			; Is is C
		 CAIN	S1,"c"			; or lower case c?
		  JRST	CN.END			; Yes done
		MOVEI	P1,"S"			; Assume not send control chr
		CAMN	S1,ESCAPE		; Another escape?
		 JRST	CN.SND			; Yes, send a real one
		CAIN	S1,"?"			; want help?
		 JRST	CN.HLP			; Yes, do it
		CAIE	S1,"S"			; Want status?
		 CAIN	S1,"s"			; or lower case "s"
		  JRST	CN.STS			; Yes
		CAIE	S1,"O"			; Clear buffers?
		 CAIN	S1,"o"			;  .  .  .
		   JRST	CN.CLR			; Yes, go clear terminal buffers
		CAIE	S1,"Q"			; Quit logging?
		 CAIN	S1,"q"			;  .  .  .
		  JRST	CN.QUT		; Quit logging
		CAIE	S1,"R"			; Resume logging
		 CAIN	S1,"r"			;  .  .  .
		  JRST	CN.RSM			; Yes, do it
		CAIE	S1,"^"			; Want control chr?
 WIT
	CN.ESC:	CAIN	S2,"C"-100	;[CSM]	; Control-C?
		 JRST	CN.END		;[CSM]	; Yes, close connection
		CAIE	S2,"C"			; Is is C
		 CAIN	S2,"c"			; or lower case c?
		  JRST	CN.END			; Yes done
		MOVEI	P1,"S"			; Assume not send control chr
		CAMN	S2,ESCAPE		; Another escape?
		 JRST	CN.SND			; Yes, send a real one
		CAIN	S2,"?"			; want help?
		 JRST	CN.HLP			; Yes, do it
		CAIE	S2,"S"			; Want status?
		 CAIN	S2,"s"			; or lower case "s"
		  JRST	CN.STS			; Yes
		CAIE	S2,"O"			; Clear buffers?
		 CAIN	S2,"o"			;  .  .  .
		   JRST	CN.CLR			; Yes, go clear terminal buffers
		CAIE	S2,"Q"			; Quit logging?
		 CAIN	S2,"q"			;  .  .  .
		  JRST	CN.QUT			; Quit logging
		CAIE	S2,"R"			; Resume logging
		 CAIN	S2,"r"			;  .  .  .
		  JRST	CN.RSM			; Yes, do it
		CAIE	S2,"^"			; Want control chr?
 REP 149/39
		CAIL	S1,"@"			; See if reasonable
		 CAILE	S1,"~"			; also allow lower case
		  JRST	CN.ESE			; No, ignore it
		ANDI	S1,37			; make a control chr
 WIT
		CAIL	S2,"@"		;[CSM125]; See if reasonable
		 CAILE	S2,"~"		;[CSM125]; also allow lower case
		  JRST	CN.ESE			; No, ignore it
		CAIL	S2,"`"		;[CSM]	;[125] Lower case range?
		 XORI	S1,240			;[125] Toggle parity & case
		XORI	S1,300			;[125] Convert to control
 REP 192/39
	; Send the chr in S1 down the data line
	CN.SND:	XMOVEI	S2,XFRTRM		; Get the terminal control block
 WIT
	; Send the chr in S1 down the data line (S1 has an 8-bit char with parity)
	CN.SND:	BLSCAL	GEN%PARITY##,<S1>	;[125] Generate correct parity
		XMOVEI	S2,XFRTRM		; Get the terminal control block
 INS 197/39
		$CALL	CN.PAR			;[125] Even parity unless PR%NONE
 REP 238/39
	CN.TYP:	XMOVEI	S2,MYTERM		; Point to the terminal block
		$CALL	T$CCOT			; Output the character
		$RETT				; and return
 WIT
	CN.TYP:	$CALL	CN.PAR			;[125] Even parity if needed
		XMOVEI	S2,MYTERM		; Point to the terminal block
		$CALL	T$CCOT			; Output the character
		$RETT				; and return

	;[125] Here to put even parity on a character.

	CN.PAR:	MOVE	S2,PARITY%TYPE##	;[125] Get the parity type
		CAIN	S2,PR%NONE##		;[125] No parity?
		 $RET				;[125] Yes, leave it alone
		ANDI	S1,177			;[125] Keep only 7 bits
		MOVEI	S2,(S1)			;[125] Get a copy
		LSH	S2,-4			;[125] Shift back 4 bits
		XORI	S2,(S1)			;[125] Combine halves
		TRCE	S2,14			;[125] Left bits both 0
		 TRNN	S2,14			;[125] Or both 1?
		  XORI	S1,200			;[125] Yes, change high bit
		TRCE	S2,3			;[125] Right bits both zero
		 TRNN	S2,3			;[125] Or both one?
		  XORI	S1,200			;[125] Yes, change high bit
		$RET				;[125] All done
 REP 8/41
	C$EXI0:	$HALT				; Exit to the monitor
 WIT
	C$EXI0:	SKIPN	LOGDIN			;[125] Are we logged in?
		 JRST	[$TEXT	(,<.KJOB^M^J.^A>) ;[125] No, make nice msg
			 LOGOUT	1,		;[125] And quit
			 JRST	.+1]		;[125] Shouldn't get here...
		$HALT				; Exit to the monitor
 REP 6/42
	;server to exit and then will cause the local Kermit to exit.
 WIT
	;server to LOGOUT and then will cause the local Kermit to exit.
 REP 23/52
		HLLOS	USRFX+.FDEXM		; . . .
 WIT
	;[126];@C$RECEIVE + 9
		HRROS	USRFX+.FDEXM		;[126] . . .
 INS 17/57
		MOVE	S1,$TTDEV+MYTERM ;[CSM]	; For SET LINE<CR>
		MOVEM	S1,$TTDEV+XFRTRM ;[CSM]	;  use correct logical name
 REP 23/57
	LINSBR:	$CALL	P$NUM			; Get the line number
 WIT
	LINSBR:	SETZM	XFRTRM+$TTDEV	;[CSM]	; Zero it until validated
		$CALL	P$NUM			; Get the line number
 REP 71/57
	SETLI1:	$CALL	P$DEV			; Parse the terminal name
		$RETIF				; Return if that failed
 WIT
	;[CSM] Here if $CALL P$NODE failed

	SETLI1:	$CALL	P$DEV			; Parse the terminal name
	IFE FTCSM,< $RETIF >			; Return if that failed
	IFN FTCSM,< JUMPF SETLI9 >	;[CSM]	; Try for a keyword
 INS 76/57
		MOVEM	S2,XFRTRM+$TTDEV ;[CSM]	; Save device name
 INS 103/57
	IFN FTCSM,<;Keywords have been defined so that certain lines have logical names

	SETLI9:	$CALL	P$KEYW			;[CSM] Check for keyword
		$RETIF				;[CSM] Return if this fails
		HRROI	S2,.GTLOC		;[CSM] Get located node
		GETTAB	S2,			;[CSM]
		  MOVEI	S2,0			;[CSM]
		CAMN	S1,S2			;[CSM] Same?
		 JRST	[$KERR (<Already connected to that computer>)	;[CSM]
			 $RETF]			;[CSM]
		MOVE	S2,CSMNOD(S1)		;[CSM] Get line number
		HLRZM	S2,XFRTRM+$TTNOD	;[CSM] Store the node number
		HRRZM	S2,XFRTRM+$TTLIN	;[CSM] And the line number
		JRST	SETLI6			;[CSM] Go grab the terminal
	>  ;End of IFN FTCSM

 INS 26/75
	;[CSM] Change in FILE%OPEN to prevent creation of HLP:FUCKIT.HLP[2,5]
	TOPS10<	IFN FTCSM,< ;Not allowed to create files in [2,5] not logged in
		SKIPN	LOGDIN		;[CSM]	; Is job logged in?
		 JRST	[KERERR (<Cannot write files without LOGIN first>);[CSM]
			BLSRET	RMS32]	;[CSM]
	> ;End of IFN FTCSM	> ;End of TOPS10

 REP 67/75
		MOVE	S1,[XWD .FOMAX-1,FLP]	; Point to the argument block
 WIT
	;[CSM] Bug at OPNWR3 - 3, files created in UFD instead of SFD when
	;[CSM] FILE-WARNING in ON due to path getting lost.
		MOVE	S1,[XWD .FOMAX-1,FLP]	; Point to the argument block
		MOVE	T4,ELB+.RBPPN	;[CSM]	; Remember SFD pointer
 REP 110/75
	OPNWR4:	MOVE	S1,[XWD .FOMAX-1,FLP]	; Point to the argument block
 WIT

	;[CSM] Reset path pointer before trying next file extension
	OPNWR4:	MOVE	S1,[XWD .FOMAX-1,FLP]	; Point to the argument block
		MOVEM	T4,ELB+.RBPPN	;[CSM]	; Create in right SFD
 REP 34/100
		MOVX	S1,.IOPIM!IO.SUP!UU.AIO	; Get the mode and other information
 WIT
	;[CSM] Change at T$OPEN+8 from IO.SUP to IO.LEM to pass XON/XOFF
	;[CSM] IO.SUP is redundant and IO.LEM enables a SCNSER modification
		MOVX	S1,.IOPIM!IO.LEM!UU.AIO	;[CSM] PIM and async I/O
 REP 10/105
	;	MOVEI	S1,Terminal information block
 WIT
	;	MOVEI	S1,Terminal information block ($TTLIN and $TTNOD)
 REP 15/105
	;	S1/ Terminal name in sixbit
 WIT
	;	S1/ Terminal name in sixbit (also returned in $TTDEV)
 REP 21/105
	T$CONN:	$SAVE	<P1>			; Save this registers
 WIT
	T$CONN:	$SAVE	<P1>			; Save this register
 REP 27/105
		NODE.	S1,			; Connect the terminal
		 JRST	.+2			; Not a network system
		$RET				; Return to the caller
 WIT
	;[CSM] At T$CONN+6, make sure that $TTDEV(P1) is correct in all cases
		NODE.	S1,			; Connect the terminal
		 JRST	T$CON0			; Not a network system
		MOVEM	S1,$TTDEV(P1)		;[CSM] Store device name
		$RET				; Return to the caller

	T$CON0:	DMOVE	S1,$TTNOD(P1)		;[CSM] Get node and line number
		CAMN	S1,MYTERM+$TTNOD	;[CSM] Going to controlling terminal?
		CAME	S2,MYTERM+$TTLIN	;[CSM]
		 SKIPA	S1,$TTDEV(P1)		;[CSM] No, get device name
		  MOVE	S1,MYTERM+$TTDEV	;[CSM] Yes, use correct name
		JUMPN	S1,T$CON1		;[CSM] Use it if nonzero
 INS 34/105
	T$CON1:	MOVEM	S1,$TTDEV(P1)		;[CSM] Remember device name
 INS 41/112
	LOGDIN:	BLOCK	1			;[125] Nonzero if job is logged in
 INS 10/113
	;[CSM] KERMIT.HLP has general info on KERMIT-10, KERMIT-80, and KERMIT-86.
	;[CSM] KERM10.HLP is in GLXLIB format for KERMIT-10 on-line help.
	;[CSM] This change is specific to Colorado School of Mines only.
 REP 14/113
		 $SET	.FDNAM,,%%.MOD		; KERMIT
 WIT
	IFE FTCSM,<$SET	.FDNAM,,%%.MOD >	; KERMIT
	IFN FTCSM,<$SET	.FDNAM,,<SIXBIT /KERM10/> > ;[CSM] HLP:KERM10.HLP
 SUM 163696
  