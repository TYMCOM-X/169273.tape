        TITLE   TAPCHG
;       EXTERNAL  MAKCHG REMOVED 9/16/77 CLC
;
;       PURPOSE IS TO RECEIVE RECORDS FROM PJ WHICH
;       INDICATE SPOOL REQUESTS PROCESSES ON OTHER SYSTEMS
;       AND CREATE ACCT. RECORDS FOR THEM.
;
;       ACCUMULATOR ASSIGNMENTS
;
        AC= 0                   ;BASIC ACCUMULATORS
        AC1= 1                  ;SAME
        AC2= 2                  ;
        AC3= 3                  ;
        AC4= 4                  ;
        AC5= 5                  ;
        REQNUM= 6               ;HOLDS TAPE REC. REQ. NUM.
        DATES= 7                ;HOLDS TAPE REC. DATES
        BUFADR= 10              ;CONTAINS ADDRESS OF GD BUFFER
        GDCHL= 1                ;CHANNEL FOR READING IN REQS
        ACTCHL= 5               ;CHANNEL FOR ACCOUNTING FILE
        RCHL==11
        CH= 15          ;CHANNEL FOR AUX CIRCUITS
        P= 17                   ;PUSH AND POP REGISTER
        LOC 137
        XWD     1,1     ;1.1
        RELOC
START: MOVE     P,[IOWD 20,PDL] ;SET UP PUSH AND POP POINTER
        RESET
;
;       SETUP CHANNEL AND DO HANDSHAKE WITH MASTER
;
        MOVEI   CH,214          ;SET UP NO ECHO
        SETMOD  CH,             ;SAME
        HRROI   CH,4            ;SEND OFF CHARACTERS
        AUXCAL  CH,1            ;SEND A 1
        AUXCAL  CH,2            ;SEND A 2
        AUXCAL  CH,3            ;SEND A 3
        AUXCAL  CH,4            ;SEND A 4
;
;       GET HANDSHAKE BACK
;
        HRROI   CH,1            ;GET READY TO RECEIVE CHARACTERS
TRYAGN: AUXCAL  CH,AC           ;RECEIVE A CHARACTER
        JRST    .-1             ;WAIT TIL WE GET IT
        CAIE    AC,1            ;SEE IF IT IS A 1
        JRST    TRYAGN          ;NO , GO GET IT TIL IT IS
        AUXCAL  CH,AC           ;NEXT NEXT HANDSHAKE
        JRST    .-1             ;WAIT TIL WE GET IT
        CAIE    AC,2            ;SEE IF IT IS A 2
        JRST    TRYAGN          ;NO, THEN GO START ALL OVER
        AUXCAL  CH,AC           ;GET NEXT PART OF HAND SHAKE
        JRST    .-1             ;WAIT TIL WE GET IT
        CAIE    AC,3            ;SEE IF IT IS A 3
        JRST    TRYAGN          ;NO, START ALL OVER
        AUXCAL  CH,AC           ;GET LAST PART OF HANDSHAKE
        JRST    .-1             ;WAIT TIL WE GET IT
        CAIE    AC,4            ;SEE IF IS A 4
        JRST    TRYAGN          ;NO, THEN START ALL OVER
;
;       GET REQUEST NUMBER AND DATES FROM MASTER
;
SEMSTR: MOVEI   AC5,5           ;NO. REQ. NO. BYTES TO RECEIVE
        SETZ    REQNUM,         ;ZERO HOLDING AREA
        MOVE    AC1,[POINT 6,REQNUM,^D5] ;POINT TO STORAGE AREA
        HRROI   CH,1            ;SHOW GOING TO RECEIVE CHARACTERS
REQINP: AUXCAL  CH,AC           ;GET A BYTE
        JRST    .-1             ;WAIT TIL WE GET IT
        IDPB    AC,AC1          ;STORE BYTE
        SOJG    AC5,REQINP      ;GO GET REST OF NUMBER
;
;       GET DATES
;
        SETZ    DATES,          ;ZERO HOLDING AREA
        MOVE    AC1,[POINT ^D8,DATES,^D1] ;POINT TO STORAGE
        AUXCAL  CH,AC           ;GET DATE
        JRST    .-1             ;WAIT TIL WE GET IT
        IDPB    AC,AC1          ;SAVE DATE
        AUXCAL  CH,AC           ;GET REST OF DATE
        JRST    .-1             ;WAIT
        IDPB    AC,AC1          ;SAVE DATE
        MOVE    AC1,[POINT ^D8,DATES,^D19] ;POINT TO STORAGE
        AUXCAL  CH,AC           ;GET A BYTE
        JRST    .-1             ;WAIT
        IDPB    AC,AC1          ;SAVE BYTE
        AUXCAL  CH,AC           ;GET LAST BYTE
        JRST    .-1             ;WAIT
        IDPB    AC,AC1          ;SAVE DATE
;
;       SET UP CHANNELS TO DO THE I/O
;
        OPEN    GDCHL,GDDEF     ;GET CHANNEL FOR GD REQUEST
        JRST    ERROR1          ;CANT GET A CHANNEL
        INBUF   GDCHL,1         ;SET INPUT BUFFER SIZE
        OUTBUF  GDCHL,1         ;SAME FOR OUTPUT
        OPEN    ACTCHL,ACTDEF   ;GET CHANNEL FOR ACCT. RECORD
        JRST    ERROR1          ;CANT GET CHANNEL
        INBUF   ACTCHL,1
        OUTBUF  ACTCHL,1
;
ALLOVR: SETZM   ,BLKPTR         ;ZERO BLK COUNTER
        MOVE    AC,SPLGAN
        MOVEM   AC,GDBLK+3      ;STORE FOR LOOKUP
        LOOKUP  GDCHL,GDBLK     ;GO GET GD TABLE
        JRST    GDERR           ;CANT FIND TABLE
        SETZM   ,GDBLK+2        ;ZERO FOR ENTER
        MOVEM   AC,GDBLK+3      ;FOR LATER ENTER ON TABLE
        HLLZS   ,GDBLK+1        ;ZERO FOR LATER ENTER
GETNEX: IN      GDCHL,          ;READ A REQ. IN
        SKIPA                   ;SKIP ON GOOD READ
        JRST    WHYEND          ;SEE WHY WE CAME HERE
        AOS     ,BLKPTR         ;INCREASE BLK COUNTER
        HRR     BUFADR,GDIN+1   ;GET BUFFER ADDRESS
        ADDI    BUFADR,1        ;ADJUST TO CORRECT POSITION
        MOVE    AC,@BUFADR      ;GET GD REQ. NUM
        TLZ     AC,770000       ;ZERO OFF STATUS
        CAME    AC,REQNUM       ;SEE IF GD MATCHES REQ. RECORD
        JRST    GETNEX          ;NO MATCH, GET NEXT REQUEST
        HLRZ    AC2,@BUFADR     ;GET STATUS OF REQUEST
        MOVE    AC1,BUFADR      ;GET BUFFER POINTER
        ADDI    AC1,3           ;POINT TO REQ. DATE OF GD
        HLRZ    AC1,@AC1        ;GET GD REQ. DATE
        HLRZ    AC,DATES        ;GET TAPE REQ. REQ. DATE
        CAME    AC,AC1          ;SEE IF DATES MATCH
        JRST    GETNEX          ;NO, THEN GET NEXT REQ.
        LSH     AC2,-^D12       ;SHIFT STATUS OVER TO CHECK
        SETZM   REMLOC#
        CAILE   AC2,4           ;PEND, IN PROCE OR TAPE XFER
        JRST    DONEIT          ;YES, THEN DONT CREATE ACCT REC.
;
;       HAVE REQUEST THAT MATCHES THE TAPE RECORD SPECIFIED
;       BUILD ACCT. REC. AND FLAG REQUEST AS COMPLETED
;
GOTIT:  MOVE    AC1,BUFADR      ;GET BUFFER POINTER
        ADDI    AC1,21          ;POINT TO COMPLETED DATE AREA
        HRRM    DATES,@AC1      ;STORE COMPLETED DATE TO BUFFER
        HLRZ    AC,@BUFADR      ;GET STATUS HALF WD
        TRZ     AC,770000       ;MASK OFF OLD STATUS
        IORI    AC,50000        ;MASK IN COMPLETED FLAG
        HRLM    AC,@BUFADR      ;PUT BACK TO BUFFER
        MOVE    AC5,[POINT 7,RECORD] ;POINT TO STORAGE
        MOVE    AC1,@BUFADR     ;GET REQUEST NUMBER
        LSH     AC1,6           ;LEFT JUSTIFY FIGURE
        MOVEI   AC4,5           ;NO. CHAR TO PROCESS
        PUSHJ   P,CONINS        ;CONVERT TO ASCII AND STORE
        ADDI    BUFADR,4                ;POINT TO PRI LOC
        HRRZ    AC,@BUFADR      ;GET IT
        ANDI    AC,777          ;KEEP IT
        HRRM    AC,REMLOC       ;SAVE IT
        SUBI    BUFADR,1
        HRRZ    AC,@BUFADR      ;GET WHERE TO PRINT
        ANDI    AC,7            ;KEEP IT
        HRLM    AC,REMLOC
        HLRZ    AC1,@BUFADR     ;GET DATE OF REQUEST
        IDIVI   AC1,^D31        ;DIVIDE BY 31
        ADDI    AC2,1           ;CREATE CORRECT DAY
        MOVE    AC,AC1          ;GET MONTH AND YR
        IDIVI   AC,14           ;DIVIDE BY 12
        ADDI    AC1,1           ;CORRECT MONTH
        MOVE    AC,AC1          ;PUT MONTH IN CORRECT PLACE
        MOVEM   AC2,16          ;SAVE DAY FOR LATER
        PUSHJ   P,DECINS        ;CONVERT TO ASCII AND STORE
        MOVE    AC,16           ;GET THAT DAY WE SAVED
        PUSHJ   P,DECINS        ;CONVERT TO ASCII AND STORE
        SUBI    BUFADR,2        ;POINT TIME OF REQUEST
        HRRZ    AC,@BUFADR      ;GET TIME OF REQUEST
        IDIVI   AC,^D60         ;CREATE HOURS AND MINUTES
        MOVEM   AC1,16          ;SAVE MINUTES
        PUSHJ   P,DECINS        ;CONVERT AND STORE
        MOVE    AC,16           ;GET MINUTES
        PUSHJ   P,DECINS        ;CONVERT AND STORE
        ADDI    BUFADR,30       ;POINT TO CHARAGEABLE USER
        DMOVE   AC1,@BUFADR     ;GET USERNAME
        MOVEI   AC4,6
        PUSHJ   P,CONINS        ;CONVERT AND STORE
        MOVEI   AC4,6   
        MOVE    AC1,AC2
        PUSHJ   P,CONINS
        SUBI    BUFADR,11
        HLLZ    AC1,@BUFADR     ;GET GAN
        MOVEI   AC4,6           ;MAX SIZE OF GAN
        PUSHJ   P,OCTINS        ;CONVERT AND STORE
        HRLZ    AC1,@BUFADR     ;GET UUN
        MOVEI   AC4,6           ;SIZE OF UUN
        PUSHJ   P,OCTINS        ;CONVERT AND STORE
        ADDI    BUFADR,1        ;POINT TO DISTRICT WORD
        HLRZ    AC,@BUFADR      ;GET DISTRICT HALF WORD
        ANDI    AC,777          ;KEEP JUST THE DISTRICT
        MOVEM   AC,SAVE+1       ;SAVE FOR LATER
        MOVEI   AC4,3           ;WIDTH OF FIELD
        PUSHJ   P,SUPZRO        ;CONVERT AND SUPRESS BLANKS
        SUBI    BUFADR,7        ;POINT TO PROJECT CODE
        MOVE    AC1,[POINT 6,AC] ;DUMMY POINTER
        HRR     AC1,BUFADR      ;CORRECT POINTER
        MOVEI   AC4,14          ;WIDTH OF FIELD
        ILDB    AC,AC1          ;GET A CHARACTER
        ADDI    AC,40           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE CHARACTER
        SOJG    AC4,.-3         ;GO DO MORE PROJECT CODE
        SUBI    BUFADR,5        ;POINT TO CUSTOMER FLAG
        HLRZ    AC1,@BUFADR     ;GET THAT HALF WORD
        MOVEI   AC,61           ;FOR POSSIBLE CUSTOMER
        TRNN    AC1,40          ;SEE IF CUSTOMER FLAG SET
        MOVEI   AC,60           ;CUSTOMER FLAG NOT SET
        IDPB    AC,AC5          ;STORE CUSTOMER INDICATOR
        MOVEI   AC,40           ;STORE FOR JOB TYPE OF 1
        IDPB    AC,AC5          ;SAME
        MOVEI   AC,61           ;GET THE ONE
        IDPB    AC,AC5          ;STORE JOB TYPE
        SUBI    BUFADR,1        ;POINT TO VOLUME
        HLRZ    AC,@BUFADR      ;GET PAGES SPOOLED
        MOVEI   AC4,6           ;SIZE OF FIELD
        LSH     AC,-^D8         ;RIGHT JUSTIFY IT
        PUSHJ   P,SUPZRO        ;CONVERT AND SUPRESS ZERO
        MOVEI   AC,40           ;FOR NO. PARTS
        IDPB    AC,AC5          ;STORE FOR PARTS
        ADDI    BUFADR,1        ;POINT TO NO. PARTS WD
        HLRZ    AC,@BUFADR      ;GET HALF WD WITH NO. PARTS
        ANDI    AC,70000        ;MASK THE PARTS
        LSH     AC,-14          ;RIGHT JUSTIFY FIGURE
        ADDI    AC,60           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE NO. PARTS
        HLRZ    AC1,@BUFADR     ;GET DECOLATION FLAG
        MOVEI   AC,60           ;FOR POSSIBLE NO DECOLATION
        TRNE    AC1,7000                ;CHECK FOR DECOLATION
        MOVEI   AC,61           ;FOR DECOLATION
        IDPB    AC,AC5          ;STORE DECOLATION FLAG
;
;       SEE WHICH FILE RECORD IS TO BE WRITTEN
;
        HLRZ    AC,@BUFADR      ;GET DELIVERY MODE HALF WD
        ANDI    AC,700          ;GET ACTUAL MODE
        LSH     AC,-6           ;RIGHT JUSTIFY FIGURE
        SETZ    16,             ;ZERO FOR LATER
        CAIE    AC,6            ;SKIP IF THIS INTER-OFFICE
        CAIN    AC,1            ;SEE IF MODE IS PICKUP
        JRST    COMCHG          ;GO COMPUT PRINTING CHARGE
;
;       ZERO RECORD FOR PARCHG.DAT
;
        MOVE    AC4,[POINT 7,RECORD] ;POINT TO START
        MOVEI   AC,60           ;TO INDICATE PARTIAL RECORD
        IDPB    AC,AC4          ;STORE SAME
        MOVEI   AC,63           ;SAME
        IDPB    AC,AC4          ;SAME
        SETO    16,             ;SHOWS WHICH FILE TO APPEND TO
;
;       COME HERE TO COMPUTE CHARGES AND SHOW
;       WHICH FILE TO WRITE TO
;
COMCHG: MOVEI   AC4,6           ;NO. BLANKS TO DO
        MOVEI   AC,60           ;GET ACTUAL ZERO
        IDPB    AC,AC5          ;STORE ZERO
        SOJG    AC4,.-1         ;ZERO REST OF FIELD
        MOVEI   AC1,1           ;SHOWS PRINT REQUEST FOR CALL
        HLRZ    AC2,@BUFADR     ;GET PARTS HALF WD
        ANDI    AC2,70000       ;MASK PARTS
        LSH     AC2,-14         ;RIGHT JUSTIFY FIGURE
        SUBI    BUFADR,1        ;POINT TO VOLUME FIGURE
        HLRZ    AC3,@BUFADR     ;GET VOLUME FOR CALL
        MOVEM   AC5,SAVE        ;SAVE RECORD POINTER
        SETZ    AC4,            ;AMT. OF ADDITION VOLUME NEEDED
        MOVEI   AC5,1           ;MIN. CHG. APPLIES
        EXCH    6,SAVE+1        ;GETDISTRICT AND SAVE 6
        MOVEM   17,14           ;SAVE POP REGISTER
;       JSP     17,MAKCHG       ;GO COMPUTE FIGURE REMOVED 9/16/77 CLC
        MOVE    17,14           ;RESTORE POP REGISTER
        SETZ    AC1,
        JUMPL   AC1,ERROR       ;ERROR IN COMPUTING
        MOVEM   AC1,SAVE+2      ;SAVE VALUE
        ADDI    BUFADR,1        ;POINT TO DECOLATION WORD
        HLRZ    AC,@BUFADR      ;GET DEC. WD
        TRNN    AC,7000         ;CHECK FOR DECOLATION
        JRST    NODEC           ;BR. IF NO DEC. CHARGE
        MOVEI   AC1,^D199       ;GIVE DECOLATION CHARGE
        SETZB   AC2,AC5         ;ZERO FOR CALL
        MOVEI   AC3,1           ;SIZE OF VOLUMN
        MOVEM   17,14           ;SAVE POP REGISTER
;       JSP     17,MAKCHG       ;GO GET DEC. CHARGE
        SETZ    AC1,            ;9/16/77 REMOVE MAKCHG
        MOVE    17,14           ;RESTORE POP REGISTER
        MOVE    AC,SAVE+2       ;GET PRINTING CHG
        ADD     AC,AC1          ;ADD DECOLATION CHARGE
        JRST    .+2             ;SKIP NEXT INST
NODEC:  MOVE    AC,AC1          ;GET PRINTING CHARGE
        MOVEI   AC4,7           ;WIDTH OF FIELD
        MOVE    AC5,SAVE                ;RESTORE POINTER
        PUSHJ   P,SUPZRO        ;CONVERT ANS SUPRESS ZERO
;
;       PUT IN COMPLETION DATE, CR LF AND WRITE RECORD
;
GETDTE: ADDI    BUFADR,14       ;POINT TO COMPLETION DATE
        HRRZ    AC,@BUFADR      ;GET THAT DATE
        IDIVI   AC,^D31         ;DIVIDE BY 31 DAYS
        ADDI    AC1,1           ;CORRECT THE DAY
        MOVEM   AC1,SAVE+1      ;SAVE THAT DAY
        IDIVI   AC,14           ;DIVIDE BY MONTHS
        ADDI    AC1,1           ;CORRECT THE MONTH
        ADDI    AC,100          ;CORRECT THE YEAR
        MOVEM   AC1,SAVE+2      ;SAVE THE MONTH
        PUSHJ   P,DECINS        ;CONVERT AND STORE
        MOVE    AC,SAVE+2       ;GET MONTH
        PUSHJ   P,DECINS        ;CONVERT AND STORE
        MOVE    AC,SAVE+1       ;GET DAY
        PUSHJ   P,DECINS        ;CONVERT AND STORE
;
;       INSERT CR AND LF THEN WRITE OUT RECORD
;
        MOVEI   AC,15           ;GET A CARRIGE RETURN
        IDPB    AC,AC5          ;STORE IN RECORD
        MOVEI   AC,12           ;GET A LINE FEED
        IDPB    AC,AC5          ;STORE IN BUFFER
;
;       SEE WHICH FILE TO WORK ON
;
        JUMPE   16,COMFIL       ;BR TO DO COMPLETED REQUEST
;
;       BUILD RECORD DESCRIPTOR FOR PARTIAL COMPLETED REQUEST
;
        SUBI    BUFADR,21       ;RESTORE POINTER
        MOVE    AC,FILPAR       ;GET FILE NAME
        MOVEM   AC,ACTFIL       ;STORE FOR LOOKUP
        MOVE    AC,FILPAR+1     ;GET EXTENSION NAME
        JRST    RESTBK          ;GO STORE EXTENSION NAME
;
;       COME HERE TO GET FILE NAME OF FILE FOR HOLDING
;       RECORDS THAT NEED NO MORE INFORMATION
;
;       GET SYSTEM NO. FROM REQUEST NO.
;
COMFIL: MOVE    AC1,BUFADR      ;GET BUFFER POINTER
        SUBI    AC1,21          ;POINT TO REQ. NO.
        MOVE    AC1,@AC1        ;GET REQ. NO. WD.
        LSH     AC1,6           ;LEFT JUSTIFY REQ. NO.
        MOVE    AC2,[POINT 6,FILCOM,^D23] ;POINT TO FILE NAME
        SETZ    AC,             ;FOR NEXT INST.
        LSHC    AC,6            ;BRING OVER FIRST SYS. NO.
        IDPB    AC,AC2          ;STORE SYS. NO.
        SETZ    AC,             ;FOR NEXT INST.
        LSHC    AC,6            ;BRING OVER LAST SYS. NO.
        IDPB    AC,AC2          ;STORE LAST SYS. NO.
        MOVE    AC,FILCOM       ;GET FILE NAME
        MOVEM   AC,ACTFIL       ;STORE FILE NAME
        HRRZ    AC,@BUFADR      ;GET COMPLETION DATE
        SUBI    BUFADR,21       ;RESTORE POINTER
        IDIVI   AC,^D31         ;GET DAY
        IDIVI   AC,14           ;GET MONTH
        IDIVI   AC1,2           ;CREATE POINTER
        HLLZ    AC,MONTHS(AC1)  ;GET AN EXTENSION NAME
        SKIPE   ,AC2            ;SEE IF CORRECT EXT. NEEDED
        HRLZ    AC,MONTHS(AC1)  ;GET CORRECT EXTENSION
RESTBK: MOVEM   AC,ACTFIL+1     ;STORE EXTENSION
LOKAGN: SETZM   ,ACTFIL+2       ;ZERO FOR LOOKUP
        MOVE    AC,OWNER        ;GET OWNERS PPN
        MOVEM   AC,ACTFIL+3     ;STORE FOR LOOKUP
;
;       DO LOOKUP ON THAT FILE AND ALSO ENTER ON SAME
;
        LOOKUP  ACTCHL,ACTFIL   ;GO GET FILE
        JRST    CREATE          ;GO CREATE FILE IF NOT THERE
        HLRE    AC1,ACTFIL+3    ;GET NEG LENGTH
        MOVEM   AC,ACTFIL+3     ;RESTORE PPN
        MOVN    AC1,AC1         ;CONVERT TO POSITIVE
        IDIVI   AC1,200         ;GET BLOCK SIZE
        ADDI    AC1,1           ;ADJUST POINTER
        ENTER   ACTCHL,ACTFIL   ;DO ENTER ON FILE
        JRST    ACTWHY          ;SEE WHY CANT DO ENTER ON FILE
        JUMPE   AC2,EVNBND      ;BR. FOR EVEN BOUNDRIES
        USETI   ACTCHL,@AC1     ;SET INPUT POINTER
        INPUT   ACTCHL,         ;READ IN BLK
        OUTPUT  ACTCHL,         ;DUMMY OUTPUT
        USETO   ACTCHL,@AC1     ;SET OUTPUT POINTER
;
;       PASS OVER OLD DATA IN BUFFER
;
PASDAT: SOSGE   ACTI+2          ;SEE IF BUFFER EMPTY
        JRST    PUTREC          ;GO PUT IN NEW REC.
        ILDB    AC,ACTI+1       ;GET OLD DATA
        SOS     ACTO+2          ;DECREASE BYTE COUNTER
        IDPB    AC,ACTO+1       ;STORE OLD DATA
        JRST    PASDAT          ;GO DO MORE OF SAME
PUTREC: SETZ    AC5,            ;ZERO WR. POINTER
MORREC: MOVE    AC,RECORD(AC5)  ;GET WD OF RECORD
        SOSGE   ACTO+2          ;SEE IF BUFFER FULL
        JRST    EMPTY           ;GO EMPTY BUFFER
STRDTA: IDPB    AC,ACTO+1       ;STORE RECORD
        ADDI    AC5,1           ;INCREASE POINTER
        CAIGE   AC5,21          ;SEE IF RECORD PASSED OVER
        JRST    MORREC          ;GO DO MORE RECORD
        JRST    DONREC          ;RECORDED IS PASSED
EMPTY:  OUTPUT  ACTCHL,         ;PUT OUT FULL BUFFER
        SOS     ACTO+2          ;SUB FOR CURRENT DATA
        JRST    STRDTA          ;GO STORE CURRENT DATA
EVNBND: OUTPUT  ACTCHL,         ;DUMMY OUTPUT
        USETO   ACTCHL,@AC1     ;POINT TO CORRECT PLACE
        JRST    PUTREC          ;GO PUT OUT RECORD
DONREC: OUTPUT  ACTCHL,         ;PUT OUT CURRENT DATA
        RELEAS  ACTCHL,         ;RELEASE ACCT. CHANNEL
   JRST    MODGD           ;GO MODIFY THE GD RECORD
ACTWHY: HRRZ    AC,ACTFIL+1     ;GET REASON FOR FAILURE
        CAIE    AC,3            ;SEE IF FILE OPENED
        JRST    ERROR6          ;CANT OPEN FOR OUTPUT
        MOVEI   AC,12           ;SLEEP FOR 10 SEC.
        SLEEP   AC,             ;GO TO SLEEP
        JRST    LOKAGN          ;GO TRY AGAIN
;
;       CONVERT DECIMAL TO ASCII AND PUT OUT
;
SUPZRO: SUBI    AC4,1           ;PREPARE TO CREATE POWER
        MOVEI   AC2,1           ;INITIAL POWER
        IMULI   AC2,12          ;MULT BY 10
        SOJG    AC4,.-1         ;GO CREATE CORRECT POWER
        SETZ    AC4,            ;BLANK SUPPRESS FLAG
SUPMOR: IDIV    AC,AC2          ;DIVIDE BY POWER
        JUMPE   AC,SUPRES       ;BR. IF ZERO
        SETO    AC4,            ;TURN SUPRESS FLAG OFF
SUPOK:  ADDI    AC,60           ;CONVERT TO ASCII
SUPOK1: IDPB    AC,AC5          ;STORE THE CHAR
        MOVE    AC,AC1          ;GET REMAINDER
        IDIVI   AC2,12          ;REDUCE POWER BY 10
        CAIE    AC2,1           ;SEE IF POWER IS 1
        JRST    SUPMOR          ;NO, THEN GO DIVIDE AGAIN
        ADDI    AC,60           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE CHAR.
        POPJ    P,              ;RETURN TO CALLER
SUPRES: JUMPN   AC4,SUPOK       ;BR. IF FLAG TURNED OFF
        MOVEI   AC,40           ;SUPRESS ZERO WITH BLANK
        JRST    SUPOK1          ;GO STORE IT
;
;       CONVERT 6 BIT TO ASCII AND STORE
;
CONINS: SETZ    AC,             ;FOR NEXT INST
        LSHC    AC,6            ;SHIFT LEFT
        ADDI    AC,40           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE IN RECORD
        SOJG    AC4,CONINS      ;GO DO MORE
        POPJ    P,              ;RETURN TO CALLER
;
;       CONVERT FROM OCTAL TO ASCII
;
OCTINS: SETZ    AC,             ;ZERO FOR NEXT INST.
        LSHC    AC,3            ;BRING OVER A CHAR
        JUMPN   AC,OCTSAV       ;BR. IF NOT ZERO
        MOVEI   AC,40           ;FILL WITH BLANKS
        IDPB    AC,AC5          ;STORE DIGIT
        SOJG    AC4,OCTINS      ;GO DO REST OF DIGITS
        POPJ    P,              ;RETURN TO CALLER
OCTMOR: SETZ    AC,             ;FOR NEXT INST
        LSHC    AC,3            ;BRING OVER A DIGIT
OCTSAV: ADDI    AC,60           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE DIGIT
        SOJG    AC4,OCTMOR      ;GO DO REST OF DIGITS
        POPJ    P,              ;RETURN TO CALLER
;
;       CONVERT 2 DIGITS TO ASCII AND STORE
;
DECINS: IDIVI   AC,12           ;DIVIDE BY 10
        ADDI    AC,60           ;CONVERT TO ASCII
        IDPB    AC,AC5          ;STORE DIGIT
        ADDI    AC1,60          ;CONVERT LAST TO ASCII
        IDPB    AC1,AC5         ;STORE LAST DIGIT
        POPJ    P,              ;RETURN TO CALLER
;
;       CREATE ACCOUNTING FILE IF NOT THERE
;
CREATE: MOVEM   AC,ACTFIL+3     ;RESTORE PPN
        ENTER   ACTCHL,ACTFIL   ;GO CREATE FILE
        JRST    ERROR3          ;CANT CREATE ACCT FILE
        OUTPUT  ACTCHL,         ;DUMMY OUTPUT
        JRST    PUTREC          ;GO PUT OUT RECORD
;
;       COPY GD REQ. TO OUTPUT BUFFER AND WRITE BACK OUT TO DSK
;
MODGD:  ENTER   GDCHL,GDBLK     ;DO ENTER ON GD TABLE
        JRST    GDWHY           ;GO SEE WHY
        OUTPUT  GDCHL,          ;DUMMY OUPUT
        HRL     AC,GDIN+1       ;GET INPUT BUFFER POINTER
        HRR     AC,GDOUT+1      ;GET OUTPUT BUFFER POINTER
        AOBJN   AC,.+1          ;ADJUST POINTERS
        HRRZ    AC1,AC          ;GET OUTBUF CORRECTED ADDRESS
        ADDI    AC1,177         ;SHOW LWA OF OUTPUT BUFFER
        BLT     AC,@AC1         ;MOVE BUFFER ACROSS
        MOVEI   AC,200          ;NO. WDS. MOVED
        ADDM    AC,GDOUT+1      ;ADJUST BYTE POINTER
        USETI   GDCHL,@BLKPTR   ;SET OUTPUT POINTER
        OUTPUT  GDCHL,          ;WRITE BLK BACK OUT
        RELEAS  GDCHL,          ;RELEASE THE CHANNEL
        MOVEI   AC5,4           ;TIMES TO TRY
        SKIPN   REMLOC          ;SKIP IF TO UPDATE REMOTE CNT.
        JRST    DONEIT          ;DONT DO IT
        HLRZ    16,REMLOC       ;GET STATUS
        JUMPE   16,DONEIT
;
        INIT    RCHL,10
        SIXBIT/DSK/
        XWD     GDOUT,GDIN
        JRST    .-3
        INBUF   RCHL,1
        OUTBUF  RCHL,1
        HLRZ    AC1,REMLOC      ;GET REMOTE LOCATION
        MOVE    AC,[SIXBIT/SPLCNT/]
        CAIE    16,1            ;SKIP IF CENTER UPDATE
        MOVE    AC,[SIXBIT/REMCNT/]
        MOVEM   AC,REMCNT
        HRRZ    AC,REMLOC       ;GET PRI LOC NO.
        CAIN    AC1,1           ;IF TO CENTER
        SETZ    AC,             ;FOR CENTER
        MOVEM   AC,AC1
FINPRI: MOVE    AC,SPLGAN       ;GET SPOOLERS PPN
        MOVEM   AC,REMCNT+3     ;STORE FOR LOOKUP
        SETZM   ,REMCNT+2       ;ZERO FOR LOOKUP
        SETZM   REMCNT+1        ;SAVE
        LOOKUP  RCHL,REMCNT     ;GET FILE
        JRST    ERROR
        MOVEM   AC,REMCNT+3     ;STORE PPN FOR ENTER
        ENTER   RCHL,REMCNT     ;SEIZE FILE FOR OUTPUT
        JRST    REMWHY          ;GO SEE WHY CANT GET IT
        MOVEM   AC1,AC          ;SAVE PRINTER LOC
        LSH     AC1,-7          ;CONVERT TO BLK NO.-1
        ADDI    AC1,1           ;ADJUST BLK POINTER
        USETI   RCHL,@AC1       ;SET INPUT POINTER
        IN      RCHL,           ;READ IN CORRECT BLK
        JRST    FINPR2          ;GO ON GOOD READ
        JRST    ERROR           ;SHOULDNT GET EOF OR ANYTHING ELSE
FINPR2: OUTPUT  RCHL,
FINPR1: USETO   RCHL,@AC1       ;SET OUTPUT POINTER
        IDIVI   AC,200          ;GET INDEX TO BLOCK
        HRRZ    AC,GDIN+1       ;GET INPUT POINTER
        ADD     AC1,AC          ;ADDRESS OF WD. TO READ
        ADDI    AC1,1           ;ADJUST FOR BUFFER POINTER
        MOVE    AC,@AC1         ;GET WD. TO CHANGE
;
;       ALTER THE REMOTE COUNT
;
        TLZ     AC,400000       ;TURN SIGN BIT OFF IF THERE
        SKIPLE  ,AC             ;SKIP IF ALREADY ZERO
        SUBI    AC,1            ;ELSE REDUCE BY ONE
        CAIE    16,1            ;SKIP IF CENTER
        TLO     AC,400000       ;TURN CHANGE BIT ON
;
;       WRITE CHANGE COUNT BACK OUT
;
WRIPRI: MOVEM   AC,@AC1         ;WRITE CHANGE BACK OUT
        HRL     AC,GDIN+1       ;GET INPUT POINTER
        HRR     AC,GDOUT+1      ;GET OUTPUT POINTER
        AOBJN   AC,.+1          ;ADJUST POINTERS
        HRRZ    AC1,AC          ;GET OUTPUT POINTER
        ADDI    AC1,177         ;LAST WD TO CARRY OVER
        BLT     AC,@AC1         ;MOVE BLOCK OVER
        MOVEI   AC1,200         ;NO. WDS. MOVED
        ADDM    AC1,GDOUT+1     ;CHANGE BYTE POINTER
        OUTPUT  RCHL,           ;WRITE BLOCK BACK OUT
        RELEAS  RCHL,           ;CLOSE FILE, RELEASE CHANNEL
        JRST    DONEIT          ;TELL MASTER, EVERYTING OK
REMWHY: HRRZ    AC,REMCNT+1     ;GET REASON FOR ERROR
        CAIE    AC,3            ;FILE BUSY
        JRST    ERROR
        MOVEI   AC,1            ;SLEEP FOR A WHILE
        SLEEP   AC,             ;SAME
        SOJG    AC5,FINPRI
        JRST    ERROR
;
;       TELLL MASTER WE COMPLETED REQUEST OK
;
DONEIT: HRROI   CH,4            ;GOING TO SEND SOMETHING
        AUXCAL  CH,151          ;COMPLETED REQUEST
        JRST    SEMSTR          ;GO SEE MASTER
WHYEND: STATZ   GDCHL,340000    ;CHECK STATUS
        JRST    ERROR8          ;ERROR ON INPUT
        JRST    ERROR9          ;REQUEST DOESNT EXIST
GDWHY:  HRRZ    AC,GDBLK+1      ;GET REASON FOR NO ENTER
        CAIE    AC,3            ;SEE IF FILE BUSY
        JRST    ERROR6          ;CAN OPEN FOR OUTPUT
        MOVEI   AC,5            ;SLEEP IT OFF
        SLEEP   AC,             ;DO IT
        JRST    ALLOVR          ;GO TRY AGAIN
ERROR:                          ;ERROR COPUTING CHARGE
ERROR1:                         ;CANT SECURE A CHANNEL
ERROR3:                         ;CANT CREATE ACCT. FILE
ERROR6:                         ;CANT OPEN FILE FOR OUTPUT
ERROR7:                         ;TROUBLE GETTING USERS NAME
ERROR8:                         ;TROUBLE DOING AN INPUT
GDERR:                          ;GD TABLE DOESNT EXIST
        HRROI   CH,4            ;GOING TO SEND SOMETHING BACK
        AUXCAL  CH,152          ;COULDNT COMPLETE THE REQUEST
        JRST    SEMSTR          ;GO SEE MASTER
ERROR9:                         ;REQUEST DOESNT EXIST
        HRROI   CH,4            ;GOING TO TELL MASTER SOMETHING
        AUXCAL  CH,153          ;NOT VALID REQUEST FOR TAPE
        JRST    SEMSTR          ;GO SEE MASTER
SAVE:   BLOCK 3                 ;TEMP HOLDER OF STORAGE
BLKPTR: BLOCK 1
RECORD: BLOCK 21                ;HOLD ACCOUNTING FILE
ACTDEF: EXP  10
        SIXBIT/DSK/
        XWD ACTO,ACTI
ACTO:   BLOCK  3
ACTI:   BLOCK 3
OWNER:  1,,2            ;OWNER IS *1BATCH
FILPAR: SIXBIT/PARCHG/
        SIXBIT/DAT/
FILCOM: SIXBIT/BAT0/
MONTHS: SIXBIT/JANFEB/
        SIXBIT/MARAPR/
        SIXBIT/MAYJUN/
        SIXBIT/JULAUG/
        SIXBIT/SEPOCT/
        SIXBIT/NOVDEC/
ACTFIL: BLOCK 4
GDDEF:  EXP 10
        SIXBIT/DSK/
        XWD GDOUT,GDIN
GDOUT:  BLOCK 3
GDIN:   BLOCK 3
GDBLK:  SIXBIT/SPOOL/
        SIXBIT/GDF/
        0
        0
SPLGAN: 1,,133677
REMCNT: SIXBIT/REMCNT/
        0
        0
        1,,133677
PDL:    BLOCK 21
        END     START
    4@FL