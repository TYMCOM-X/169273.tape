TITLE	INT -  INTERRUPT HANDLER
SUBTTL	Modified for FOROTS version 5A by Joe Smith, 14-May-85

	SEARCH	FORPRM	;Get definitions of STK.SZ, INT.PC, FT$TYM
IFE FT$TYM,<PRINTX ?Wrong version of FORPRM.UN - FT$TYM is not set>
	STK.SZ==STK.SZ	;Include stack size value in CREF listing
	INT.PC==INT.PC	;Include offset to PC and flag in CREF listing

;  CONTAINS EXTERNALLY CALLABLE ROUTINES:
;	INTDIS		DISABLES ALL INTERRUPTS
;	INTENA		(RE)ENABLES ALL INTERRUPTS
;	OFFINT		DISABLES <ESCAPE> HANDLING
;	ONINT		ENABLES <ESCAPE> HANDLING
;	RESUME		RESUMES NORMAL EXECUTION AFTER <ESCAPE>
;	TIMER		SETS TIME LIMIT FOR REST OF JOB
;	TRULIM		PREPARES JUMP TO LABEL WHEN TRU'S EXCEEDED
;
;	ALSO CONTAINS VARIOUS ROUTINES CALLED ONLY WITHIN
;	THIS MODULE.
;
;  NOTE:
;	ROUTINES OCCUR IN ALPHABETIC ORDER.
;
;  NOTE:
;	INTERRUPTS ARE HANDLED WITH THE "INTADR" INTERRUPT
;	SYSTEM.
;	THESE ROUTINES ARE IMPLEMENTED TO BE INTERRUPTED WHEN
;	AN <ESCAPE> CHARACTER IS TYPED.  THIS EVENT HAS BEEN
;	ASSIGNED TO "INTADR" CHANNEL 7 TO ALLOW LATER EXPANSION
;	WITH BOTH HIGHER AND LOWER PRIORITY CHANNELS.
;
;	CHANNEL 7 INTERRUPTS, WHICH CAN CAUSE EXECUTION OF USER CODE,
;	 WILL BE DEFERRED WHEN VARIABLE 'INT.DF' IS NON-ZERO.
;	 THE INTERRUPT HANDLER WILL SET 'INT.RE' TO AN ADDRESS TO BE
;	 EXECUTED WHEN THE INTERRUPT IS READY TO BE HANDLED.
;	 THEN 'INT.RE' MUST BE SET AS IF IT WERE THE OLD PC ADDRESS.
;	THIS METHOD CAN LOSE INTERRUPTS OVER THIS SPAN, BUT THE
;	 MONITOR CAN DO THE SAME SO IT IS NOT THAT SIGNIFICANT.

OPDEF	DISMIS	[CALLI -23]	;Dismiss current interrupt
OPDEF	INTADR	[CALLI -33]	;Declare address for interrupt system
	IA.DIS==1		; Disable system
	IA.REE==2		; Enable or reenable system
	IA.CLR==4		; Clear system
OPDEF	INTENB	[CALLI -34]	;Enable interrupt channels
	CH.ENB==1B0		; Enable channels
	CH.3==1B3		; Enable channel 3
	CH.5==1B5		; Enable channel 5
	CH.7==1B7		; Enable channel 7
OPDEF	INTASS	[CALLI -36]	;General interrupt assignment
	.IACLK==1B17		; Clock ticked while program was running
	.IATIM==4B17		; SETTIM timer interrupt
OPDEF	SETTIM	[CALLI -37]	;Set elapsed time limit
	ST.MIN==1B17		; RH has units in seconds
OPDEF	TINASS	[CALLI -42]	;TTY interrupt assignment
	.IAESC==0B8		; Receipt of ESCape(XEXEC) or Control-C(PDP)
SUBTTL	INT3. -  INTERRUPT HANDLER FOR CHANNEL 3
;
;  CALLING SEQUENCE:
;	LABEL "INT3." IS JUMPED TO BY THE SYSTEM WHEN
;	 A CLOCK TICK OCCURS WHILE RUNNING.
;
;  DOES:
;	GETS THE NUMBER OF DEMILLI-TRU'S CURRENTLY CONSUMED.
;	IF THIS NUMBER IS .GE. 'TRUHGH' & 'TRULOW',
;	    RESTORES THE STACK AND REGISTERS AS THEY WERE AT 'TRULIM',
;	    JUMPS TO @'TRULBL'
;	ELSE
;	    RESUMES NORMAL EXECUTION.
INT3.:	DMOVEM	0,SAVE0		;SAVE REGISTERS 0 AND 1
	MOVE	[-1,,-44]	;DEMILLI-TRU'S FOR CURRENT JOB
	GETTAB	0,		;SET REG 0 = HIGH-ORDER, REG 1 = LOW
	  HALT			;  (ERROR RETURN)
;DECIDE WHETHER TO RESUME OR JUMP TO $<LABEL>
	CAMGE	0,TRUHGH	;IF HIGH .LT. 'TRUHGH',
	  JRST	  INT3.2	;  RESUME NORMAL PROCESSING
	CAME	0,TRUHGH	;IF HIGH .GT. 'TRUHGH',
	  JRST	  INT3.1	;  JUMP TO $<LABEL>
	CAMGE	1,TRULOW	;IF LOW .LT. 'TRULOW',
	  JRST	  INT3.2	;  RESUME NORMAL PROCESSING
; ASSOCIATE CLOCK TICK WITH CHANNEL 0
INT3.1:	MOVE	0,[.IACLK+0]
	INTASS	0,
	  HALT			;  (ERROR RETURN)
; RESTORE STACK
	HRRZ	1,TRU17		;ADDRESS OF LAST-USED WORD
	HLRE	2,TRU17		;-(NO. OF UNUSED WORDS)
	SUB	1,2		;ADDRESS OF LAST USABLE WORD
	MOVE	0,1
	SUBI	0,STK.SZ-1	;SET DESTINATION FOR BLT
	HRLI	0,TRUSTK	;SOURCE = "TRU" STACK
	BLT	0,(1)		;RESTORE THE ORIGINAL STACK
; PREPARE 'DISMIS' TO JUMP TO @'TRULBL'
	MOVE	0,TRULBL	;$<LABEL> TO JUMP TO
	HRRZM	0,TRAPS.-2+2*3	;INSERT INTO INTERRUPT VECTOR TABLE
; RESTORE REGISTERS AS THEY WERE BEFORE CALL TO 'TRULIM'
	MOVSI	17,TRUREG
	BLT	17,16		;RESTORE REGISTERS 0-16
	MOVE	17,TRU17	;RESTORE REGISTER 17
; JUMP TO @'TRULBL' WHILE TURNING OFF BIT THAT SAYS
;  "INTERRUPT IN PROGRESS FOR CHANNEL 3"
	DISMIS			;JUMP TO 'TRULBL' LABEL (VIA TRAPS.)
; RESUME NORMAL PROCESSING
INT3.2:	DMOVE	0,SAVE0		;RESTORE ORIGINAL REGISTER 0 AND 1
	DISMIS			;RESUME NORMAL PROCESSING
				; WHILE TURNING OFF THE BIT THAT SAYS
				; "INTERRUPT IN PROGRESS FOR CH 3"
SUBTTL	INT5. -  INTERRUPT HANDLER FOR CHANNEL 5
;
;  CALLING SEQUENCE:
;	LABEL "INT5." IS JUMPED TO BY THE SYSTEM WHEN
;	 THE TIME INTERVAL SET BY 'SETTIM' HAS ELAPSED.
;
;  DOES:
;	TYPES THE MESSAGE "MAXIMUM RUN TIME EXCEEDED".
;	EXITS TO XEXEC.

INT5.:	OUTSTR	[ASCIZ /
MAXIMUM RUN TIME EXCEEDED/]
	EXIT	1,		;EXIT TO XEXEC WITHOUT 'RELEAS'ING
				; CHANNELS OR TYPING "EXIT"
SUBTTL	INT7. -  INTERRUPT HANDLER FOR CHANNEL 7
;
;  CALLING SEQUENCE:
;	LABEL "INT7." IS JUMPED TO BY THE SYSTEM
;	WHEN AN <ESCAPE> IS ENCOUNTERED BY THE "INTADR"
;	INTERRUPT SYSTEM.
;
;  DOES:
;	ASSOCIATES <ESCAPE> WITH NORMAL EFFECT INSTEAD OF CHANNEL 7.
;	SAVES THE OLD PC ADDRESS AS THE "ESC" LABEL.
;	SAVES THE CURRENT STACK AS THE "ESC" STACK.
;	SETS UP THE "ONINT" STACK.
;	SETS UP THE "ONINT" REGISTERS
;	JUMPS TO THE "ONINT" LABEL, WHILE TURNING OFF THE BIT THAT SAYS
;	 "INTERRUPT IN PROGRESS FOR CHANNEL 7".
;
;	RESTORES ALL REGISTERS TO THEIR ORIGINAL "ONINT" VALUES.
 
INT7.:	DMOVEM	0,SAVE0		;SAVE REGISTER 0 AND 1
	HRRZ	1,.JBOPS	;[JMS] Get pointer to FOROTS's data
; IF WE ARE IN A ROUTINE THAT DOES NOT WANT TO BE INTERRUPTED
;  BY CHANNEL 7, NOTE IT AND CATCH IT WHEN IT IS DONE.
	SKIPE	INT.PC(1)	;[JMS] This word is negative to defer
	 JRST	[MOVE	0,[1B0+INT7.2]	;[JMS] Keep neg, get resume address
		 MOVEM	0,INT.PC(1)	;[JMS] Tell FOROTS where to go
		 DMOVE	0,SAVE0		;RESTORE REGISTER 0 AND 1
		 DISMIS	]		;RESUME EXECUTION
; ASSOCIATE <ESCAPE> WITH NORMAL EFFECT INSTEAD OF CHANNEL 7.
	MOVE	0,[.IAESC+0B17+777777]
	TINASS	0,
	  HALT	.
; SAVE THE OLD PC ADDRESS AS THE "ESC" LABEL
	MOVE	0,TRAPS.-2+2*7
	MOVEM	0,ESCLBL
; SAVE THE CURRENT STACK AS THE "ESC" STACK
INT7.1:	MOVEM	17,ESC17	;SAVE REGISTER 17
	MOVEI	17,ESCREG	;SET BLT DESCRIPTOR
	DMOVE	0,SAVE0		;RESTORE INCOMING REGISTER 0
	BLT	17,ESCREG+16	;SAVE REGISTERS 0-16
	HRRZ	0,ESC17		;ADDRESS OF LAST-USED WORD
	HLRE	17,ESC17	;-(NO. OF UNUSED WORDS)
	SUB	0,17		;ADDRESS OF LAST USABLE WORD
	SUBI	0,STK.SZ-1	;ADDRESS OF FIRST USED WORD
	HRLZ	0,0		;SET SOURCE FOR BLT
	HRRI	0,ESCSTK	;SET DESTINATION FOR BLT
	BLT	0,ESCSTK+STK.SZ-1  ;SAVE STACK AS "ESC" STACK
; SET UP THE "ONINT" STACK
	HRRZ	1,ONI17		;ADDRESS OF LAST-USED WORD
	HLRE	2,ONI17		;-(NO. OF UNUSED WORDS)
	SUB	1,2		;ADDRESS OF LAST USABLE WORD
	MOVE	0,1
	SUBI	0,STK.SZ-1	;SET DESTINATION FOR BLT
	HRLI	0,ONISTK	;SOURCE = "ONINT" STACK
	BLT	0,(1)		;RESTORE THE ORIGINAL STACK
; GET READY FOR 'DISMIS'
	MOVE	0,ONILBL	;LABEL TO JUMP TO
	HRRZM	0,TRAPS.-2+2*7	;INSERT INTO INTERRUPT VECTOR TABLE
; SET UP THE "ONINT" REGISTERS
	MOVSI	17,ONIREG	;SET BLT DESCRIPTOR
	BLT	17,16		;RESTORE REGISTERS 0-16
	MOVE	17,ONI17	;RESTORE ORIGINAL REGISTER 17
; JUMP TO "ONINT" LABEL, WHILE TURNING OFF THE BIT THAT SAYS
;  "INTERRUPT IN PROGRESS FOR CHANNEL 7"
	DISMIS			;ACCORDING TO CHANNEL 7 ENTRY IN TRAPS.
				;  (FALL THROUGH IF DEFERRED INTERRUPT)
	JRSTF	@TRAPS.-2+2*7	;JUMP TO "ONINT" LABEL ANYWAY
 
; HANDLE A DEFERRED INTERRUPT
INT7.2:	MOVEM	0,SAVE0		;SAVE REGISTER 0
; ASSOCIATE <ESCAPE> WITH NORMAL EFFECT INSTEAD OF CHANNEL 7.
	MOVE	0,[.IAESC+0B17+777777]
	TINASS	0,
	  HALT	.
; SAVE 'INT.RE' AS THIS "ESC" LABEL
	MOVE	0,INT.RE
	MOVEM	0,ESCLBL
	SETZM	INT.RE		;NOTE THAT THE DEFERRED INTERRUPT
				; HAS BEEN HANDLED
	JRST	INT7.1		;CONTINUE WITH INTERRUPT HANDLING
SUBTTL	INTDIS -  Disables ALL interrupts
;
;  Calling sequence:			(from FORTRAN-10)
;	CALL INTDIS
;     or				(from MACRO)
;	PUSHJ	17,INTDIS
;
;  Does:
;	Disables the INTADR interrupt system.
 
	ENTRY	INTDIS
INTDIS:	MOVE	0,[IA.DIS,,TRAPS.]
	INTADR	0,
	  HALT	.		;(only if address of TRAPS. is 0)
	POPJ	17,		;Exit to caller
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	SUBTTL	INTENA -   (Re)enables ALL interrupts
;
;  Calling sequence:			(from FORTRAN-10)
;	CALL INTENA
;     or				(from MACRO)
;	PUSHJ	17,INTENA
;
;  Does:
;	(Re)enables the INTADR interrupt system.
 
	ENTRY	INTENA
INTENA:	MOVE	0,[IA.REE,,TRAPS.]
	INTADR	0,
	  HALT	.		;(only if address of TRAPS. is 0)
	POPJ	17,		;Exit to caller
SUBTTL	OFFINT -  DISABLE INTERRUPTS
;
;  CALLING SEQUENCE:			(FROM FORTRAN-10)
;	CALL OFFINT
;     OR				(FROM MACRO)
;	PUSHJ	17,OFFINT
;
;  DOES:
;	ASSOCIATES <ESCAPE> WITH NORMAL EFFECT INSTEAD OF CHANNEL 7.
 
	ENTRY	OFFINT
OFFINT:	MOVEM	0,SAVE0		;SAVE REGISTER 0
	MOVE	0,[.IAESC+0B17+777777]
	TINASS	0,
	  JFCL			;IF 'INTADR' NOT ACTIVE, CONTINUE
	MOVE	0,SAVE0		;RESTORE INCOMING REGISTER 0
	POPJ	17,		;EXIT TO CALLER
SUBTTL	ONINT -  ENABLE INTERRUPT HANDLING
;
;  CALLING SEQUENCE:			(FROM FORTRAN-10)
;	CALL ONINT($<LABEL>)
;     OR				(FROM MACRO)
;	MOVEI	16,APLIST
;	PUSHJ	17,ONINT
;	...
;APLIST	<TYPE>,,$<LABEL>	(ACTUAL PARAMETER LIST)
;
;  GIVEN:
;	$<LABEL> = ADDRESS OF A LABEL.
;
;  DOES:
;	ASSOCIATES <ESCAPE> WITH NORMAL EFFECT.
;	SAVES $<LABEL> AS "ONINT" LABEL.
;	SAVES CURRENT STACK AS "ONINT" STACK.
;	ASSOCIATES <ESCAPE> WITH CHANNEL 7.
;
;	PRESERVES ALL REGISTERS.
;
 
	ENTRY	ONINT
ONINT:
	MOVEM	0,SAVE0		;SAVE REGISTER 0
; ASSOCIATE <ESCAPE> WITH NORMAL EFFECT
	MOVE	0,[.IAESC+0B17+777777]
	TINASS	0,
	  JRST [MOVE	0,[IA.CLR+IA.REE,,TRAPS.]
		INTADR	0,		;ENABLE 'INTADR' SYSTEM
		  HALT	.		;  ERROR RETURN
		MOVSI	0,(CH.ENB+CH.7)	;ENABLE CHANNEL 7
		INTENB	0,
		  HALT	.
		JRST	ONINT1]
ONINT1:
; SAVE $<LABEL> AS "ONINT" LABEL.
	HRRZ	0,0(16)		;ADDRESS OF $<LABEL>
	MOVEM	0,ONILBL	;SAVE AS "ONINT" LABEL
; SAVE THE CURRENT STACK AS THE "ONINT" STACK
	POP	17,TEMP		;SET REGISTER 17 AS IT SHOULD BE AFTER
				; THE POPJ 17,
	MOVEM	17,ONI17	;SAVE REGISTER 17
	MOVEI	17,ONIREG	;SET BLT DESCRIPTOR
	MOVE	0,SAVE0		;INCLUDE ORIGINAL REGISTER 0
	BLT	17,ONIREG+16	;SAVE REGISTERS 0-16
	HRRZ	0,ONI17		;ADDRESS OF LAST-USED WORD
	HLRE	17,ONI17	;-(NO. OF UNUSED WORDS)
	SUB	0,17		;ADDRESS OF LAST USABLE WORD
	MOVE	17,ONI17	;RESTORE ORIGINAL REGISTER 17
	SUBI	0,STK.SZ-1	;ADDRESS OF FIRST USED WORD
	HRLZ	0,0		;SET SOURCE FOR BLT
	HRRI	0,ONISTK	;SET DESTINATION FOR BLT
	BLT	0,ONISTK+STK.SZ-1  ;SAVE STACK AS "ONINT" STACK
	PUSH	17,TEMP		;PREPARE FOR "POPJ 17,"
; ASSOCIATE <ESCAPE> WITH CHANNEL 7
	MOVE	0,[.IAESC+7B17+777777]
	TINASS	0,
	  HALT	.
; EXIT
	MOVE	0,SAVE0		;RESTORE REGISTER 0
	POPJ	17,		;EXIT TO CALLER
SUBTTL	RESUME -  RESUME PRE-INTERRUPT EXECUTION
;
;  CALLING SEQUENCE:			(FROM FORTRAN-10)
;	CALL RESUME
;     OR				(FROM MACRO)
;	PUSHJ	17,RESUME
;
;  DOES:
;	IF NO "ESC" STACK SAVED,
;	    RETURNS NORMALLY.
;	SETS UP "ESC" STACK AND REGISTERS.
;	JUMPS TO "ESC" LABEL, RESTORING FLAGS.
 
	ENTRY	RESUME
RESUME:
	MOVEM	0,SAVE0		;SAVE REG. 0 IN CASE NO RESUME
; IF NO "ESC" STACK SAVED, RETURN NORMALLY
	SKIPN	0,ESCLBL	;IF NO "ESC" STACK,
	  JRST [MOVE	0,SAVE0		;RESTORE REGISTER 0
		POPJ	17,]		;EXIT TO CALLER
; SET UP THE "ESC" STACK
	HRRZ	1,ESC17		;ADDRESS OF LAST-USED WORD
	HLRE	2,ESC17		;-(NO. OF UNUSED WORDS)
	SUB	1,2		;ADDRESS OF LAST USABLE WORD
	MOVE	0,1
	SUBI	0,STK.SZ-1	;SET DESTINATION FOR BLT
	HRLI	0,ESCSTK	;SOURCE = "ESC" STACK
	BLT	0,(1)		;RESTORE THE ORIGINAL STACK
; SET UP THE "ESC" REGISTERS
	MOVSI	17,ESCREG
	BLT	17,16		;RESTORE REGISTERS 0-16
	MOVE	17,ESC17	;RESTORE REGISTER 17
; ASSOCIATE <ESCAPE> WITH NORMAL EFFECT
	MOVE	0,[.IAESC+0B17+777777]
	TINASS	0,
	  JRST [MOVE	0,[IA.CLR+IA.REE,,TRAPS.]
		INTADR	0,		;ENABLE 'INTADR' SYSTEM
		  HALT	.		;  ERROR RETURN
		MOVSI	0,(CH.ENB+CH.7)	;ENABLE CHANNEL 7
		INTENB	0,
		  HALT	.
		JRST	RESUM1]

; RESUME NORMAL PROCESSING
RESUM1:	JRSTF	@ESCLBL		;RESTORE FLAGS AND JUMP
SUBTTL	TIMER -  SET TIME LIMIT FOR REST OF JOB
;
;  CALLING SEQUENCE:			(FROM FORTRAN-10)
;	CALL TIMER(<VALUE>)
;     OR				(FROM MACRO)
;	MOVEI	16,APLIST
;	PUSHJ	17,TIMER
;	...
;APLIST	<TYPE>,,<VALUE>
;
;  GIVEN:
;	<VALUE> = INTEGER VALUE.
;
;  DOES:
;	IF <VALUE> IS LESS THAN OR EQUAL TO ZERO,
;	    IMMEDIATELY TYPES THE MESSAGE AND EXITS TO XEXEC.
;	SETS UP CHANNEL 5 FOR INTERVAL TIMER.
;	SETS INTERVAL TIMER FOR <VALUE> SECONDS.
;
;	DESTROYS REGISTER 0.
 
	ENTRY	TIMER
TIMER:	MOVE	0,@0(16)	;EXAMINE NUMBER OF SECONDS
	CAIG	0,0		;IF NUMBER OF SECONDS .LE. ZERO,
	  JRST	  INT5.		;  TYPE MESSAGE AND EXIT TO XEXEC
; ASSOCIATE INTERVAL TIMER WITH CHANNEL 5
TIMER1:	MOVE	0,[.IATIM+5]
	INTASS	0,
	  JRST [MOVE	0,[IA.CLR+IA.REE,,TRAPS.]
		INTADR	0,		;ENABLE 'INTADR' SYSTEM
		  HALT	.		;  (ERROR RETURN)
		JRST	TIMER1]		;GO TRY AGAIN
; ENABLE CHANNEL 5
	MOVSI	0,410000
	INTENB	0,
	  HALT	.
; ACTIVATE INTERVAL TIMER
	MOVE	0,@0(16)	;NUMBER OF UNITS
	HRLI	0,1		;1 UNIT = 1 SECOND
	SETTIM	0,
	  HALT	.		;  "NEVER TAKEN"
; EXIT TO CALLER
	POPJ	17,
SUBTTL	TRULIM -  JUMP TO LABEL WHEN TRU'S EXCEEDED
;
;  CALLING SEQUENCE:			(FROM FORTRAN-10)
;	CALL TRULIM(NTRUS, $<LABEL>
;	
;     OR				(FROM MACRO)
;	MOVEI	16,APLIST
;	PUSHJ	17,TRULIM
;	...
;APLIST	<TYPE>,,NTRUS
;	<TYPE>,,$LABEL
;
;  GIVEN:
;	NTRUS = INTEGER VALUE.
;	$<LABEL> = ADDRESS OF A FORTRAN LABEL.
;
;  DOES:
;	IF 'NTRUS' IS LESS THAN OR EQUAL TO ZERO,
;	    JUMPS TO $<LABEL>.
;	ADDS 'NTRUS' TO THE NUMBER OF CURRENTLY CONSUMED TRU'S TO GET
;	 'TRUHGH' AND 'TRULOW'.  (ACTUALLY, NUMBER OF DEMILLI-TRU'S)
;	SAVES THE CURRENT STACK AND REGISTERS.
;	ASSOCIATES A CLOCK TICK WITH CHANNEL 3.
;	ENABLES CHANNEL 3.
;
;	THE INTERRUPT ROUTINE, INT3., WILL GET THE NUMBER OF
;	 CONSUMED TRU'S AND IF THAT NUMBER EXCEEDS 'TRUHGH' AND
;	 'TRULOW' IT WILL RESTORE THE STACK AND REGISTERS AND
;	 JUMP TO $<LABEL>.
 
	ENTRY	TRULIM
TRULIM:
; SAVE $<LABEL> AS 'TRULBL'
	MOVE	0,1(16)		;<TYPE>,,$<LABEL>
	HRRZM	0,TRULBL
; IF THE NUMBER OF ADDITIONAL TRU'S .LE. ZERO, JUMP TO $<LABEL>
	MOVE	0,@0(16)	;EXAMINE NUMBER OF TRU'S
	CAIG	0,0		;IF NUMBER OF TRU'S .LE. ZERO,
	  JRST	  @TRULBL	;  GO TO $<LABEL>
; SAVE THE CURRENT STACK AS THE "TRU" STACK
	POP	17,TEMP		;SET REGISTER 17 AS IT SHOULD BE AFTER
				; THE POPJ 17,
	MOVEM	17,TRU17	;SAVE REGISTER 17
	MOVEI	17,TRUREG	;SET BLT DESCRIPTOR
	MOVE	0,SAVE0		;INCLUDE ORIGINAL REGISTER 0
	BLT	17,TRUREG+16	;SAVE REGISTERS 0-16
	HRRZ	0,TRU17		;ADDRESS OF LAST-USED WORD
	HLRE	17,TRU17	;-(NO. OF UNUSED WORDS)
	SUB	0,17		;ADDRESS OF LAST USABLE WORD
	SUBI	0,STK.SZ-1	;ADDRESS OF FIRST USED WORD
	HRLZ	0,0		;SET SOURCE FOR BLT
	HRRI	0,TRUSTK	;SET DESTINATION FOR BLT
	BLT	0,TRUSTK+STK.SZ-1  ;SAVE STACK AS "TRU" STACK
; MULTIPLY 'NTRUS' BY 10000 INTO REGISTERS (2,3)
	HRRZ	1,@0(16)	;RIGHT 18 BITS OF 'NTRUS'
	IMULI	1,^D10000	;32-BIT RESULT
	HLRZ	0,@0(16)	;LEFT 18 BITS OF 'NTRUS'
	IMULI	0,^D10000	;32-BIT RESULT
	HRLZ	3,0		;LOW-ORDER PART
	HLRZ	2,0		;HIGH-ORDER PART
	ADD	3,1		;ADD LOW-ORDER PARTS
	TLZE	3,400000	;IF OVERFLOW, CLEAR OVERFLOW BIT
	  ADDI	  2,1		;  AND INCREMENT HIGH-ORDER PART
; GET NUMBER OF CURRENTLY-USED DEMILLI-TRU'S INTO REGISTERS (0,1)
	MOVE	0,[-1,,-44]	;DEMILLI-TRU'S FOR CURRENT JOB
	GETTAB	0,		;SET REGISTERS 0 AND 1
	  HALT	.		;  (ERROR RETURN)
; ADD REGISTERS (2,3) TO REGISTERS (0,1) TO GET TARGET
	ADD	0,2		;HIGH-ORDER PARTS TO REGISTER 0
	ADD	1,3		;LOW-ORDER PARTS TO REGISTER 1
	TLZE	1,400000	;IF OVERFLOW, CLEAR OVERFLOW BIT
	  ADDI	  0,1		;  AND INCREMENT HIGH-ORDER PART
	MOVEM	0,TRUHGH	;SAVE HIGH-ORDER PART
	MOVEM	1,TRULOW	;SAVE LOW-ORDER PART
; ASSOCIATE CLOCK TICK WITH CHANNEL 3
TRULI1:	MOVE	0,[.IACLK+3]
	INTASS	0,
	  JRST [MOVE	0,[IA.CLR+IA.REE,,TRAPS.]
		INTADR	0,		;(RE)ENABLE 'INTADR' SYSTEM
		  HALT	.		;  (ERROR RETURN)
		JRST	TRULI1]		;TRY AGAIN
; ENABLE CHANNEL 3
	MOVSI	0,440000
	INTENB	0,
	  HALT	.
; RESTORE REGISTERS AND EXIT
	MOVSI	17,TRUREG
	BLT	17,16		;RESTORE REGISTERS 0-16
	MOVE	17,TRU17	;RESTORE REGISTER 17
	PUSH	17,TEMP		; TO ORIGINAL VALUE ON ENTRY
	POPJ	17,		;EXIT TO CALLER
SUBTTL	DATA AREA
 
ESCLBL:	0,,0			;"ESC" LABEL
ESCREG:	BLOCK	17		;REGISTERS 0-16 FOR "ESC"
ESCSTK:	BLOCK	STK.SZ		;"ESC" STACK
ESC17:	BLOCK	1		;REGISTER 17 FOR "ESC"
ONILBL:	BLOCK	1		;"ONINT" ADDRESS
ONIREG:	BLOCK	17		;REGISTERS 0-16 FOR "ONINT" CALL
ONISTK:	BLOCK	STK.SZ		;"ONINT" STACK
ONI17:	BLOCK	1		;REGISTER 17 FOR "ONINT" CALL
SAVE0:	BLOCK	1		;INCOMING REGISTER 0
SAVE1:	BLOCK	1		;INCOMING REGISTER 1
TEMP:	BLOCK	1		;(USED BY ONINT)
TRAPS.:	BLOCK	2+2		;CHANNELS 1 & 2 OLD PC AND TRAP ADDRESS
	BLOCK	1		;CHANNEL 3 OLD PC ADDRESS
	0,,INT3.		;CHANNEL 3 TRAP ROUTINE ADDRESS
	BLOCK	1		;CHANNEL 4 OLD PC ADDRESS
	BLOCK	1		;CHANNEL 4 TRAP ROUTINE ADDRESS
	BLOCK	1		;CHANNEL 5 OLD PC ADDRESS
	0,,INT5.		;CHANNEL 5 TRAP ROUTINE ADDRESS
	BLOCK	1		;CHANNEL 6 OLD PC ADDRESS
	BLOCK	1		;CHANNEL 6 TRAP ROUTINE ADDRESS
	BLOCK	1		;CHANNEL 7 OLD PC ADDRESS
	0,,INT7.		;CHANNEL 7 TRAP ROUTINE ADDRESS
	BLOCK	^D28+^D28	;CHANNELS 8-35 OLD PC & TRAP ADR
TRUHGH:	BLOCK	1		;HIGH-ORDER PART OF TARGET TRU'S
TRULBL:	BLOCK	1		;"TRU" LABEL
TRULOW:	BLOCK	1		;LOW-ORDER PART OF TARGET TRU'S
TRUREG:	BLOCK	17		;REGISTERS 0-16 FOR "TRULIM" CALL
TRUSTK:	BLOCK	STK.SZ		;"TRU" STACK AT "TRULIM" CALL
TRU17:	BLOCK	1		;REGISTER 17 FOR "TRULIM" CALL
 
	END
   