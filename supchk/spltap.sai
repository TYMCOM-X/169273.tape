begin "SPLTAP"

require "(SAILIB)SAIL.DEF"   source!file;
require "(SAILIB)UUOSYM.DEF" source!file;
require "(SAILIB)VMFILE.REQ" source!file;
require "(CARL)DAYTIM.REQ"   source!file;

define File.Page = '776;

integer GdfSlot, GdfSize;
integer TapSlot, TapSize;
integer loop, req, dat, state;

if ( 0 > GdfSlot_ VMFile( "(SPOOL)SPOOL.GDF", VM$Read, 1, File.Page ) )
 then userErr( 0,0, "(SPOOL)SPOOL.GDF not found.", "X" );

if ( 0 > TapSlot_ VMFile( "SPOOL.TAP", VM$Write, 1, File.Page - 1 ) )
 then userErr( 0,0, "Cannot write SPLTAP.DAT", "X" );

GdfSize_ VMGetC( GdfSlot, VM$Size ) div 5;
TapSize_ 0;

for loop_ 0 step '200 until GdfSize-'200
 do begin "get entry"

    req_ VMGetW( GdfSlot, loop );
    dat_ VMGetW( GdfSlot, loop + 3 );
    state_ ldb( point( 6,req,5 ) );

! case state                                     ;
!  of ( "Pending  ", "Hold     ", "Transfer ",   ;
!	"Process  ", "Tape     ", "TapeDone ",   ;
!	"Normal   ", "Completed", "Cancelled" ), ;

    if ( req  and  state = 4 )
     then begin "print entry"
	print(  " req #", cvXstr( req lsh 6 ),
		cvDDat( dat lsh -18 ), " ", cvos( dat land '777777 ),
		crlf );
	VMSetW( TapSlot, req land '7777777777,                    TapSize   );
	VMSetW( TapSlot, !xwd( !lh( dat ), calli(0,calli!DATE) ), TapSize+1 );
	TapSize_ TapSize + 2;
     end "print entry";

 end "get entry";

if ( TapSize )
 then begin "set file"
    chnior( VMGetC( TapSlot, VM$Chan ), memory[ TapSize ], !chFTR );
    VMFree( TapSlot );
 end "set file"
 else VMFree( TapSlot, CL!ACS lor CL!RST );
VMFree( GdfSlot );

end "SPLTAP";
