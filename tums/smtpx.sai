begin	"SMTP transmitter"

require "(SAILIB)SAIL.DEF" source!file;
require "ARGS.REQ" source!file;
require "AUXLIB.REQ" source!file;
require "MAILIB.REQ" source!file;
require "MAILOG.REQ" source!file;
require '23 version;

! v23	15-Dec-88 WRS	Add /X25:address for Televerket (fangorn);
! v22	 9-Sep-88 JMS	Add /GATEWAY for TRW;
! v21	23-May-87 WRS	added message-id to log;
! v20	20-May-87 WRS	added hack to deal with proj code: prompt;
! v17	10-Jan-87 WRS	improved timeout logic;
! v16	19-Dec-86 WRS	improve error message - less verbose in log;
! v15	22-Jul-86 WRS	fold in SMTLIB, fix SETNAM stuff;
! v14	22-Jul-86 WRS	make host independent;
! v13	21-Jul-86 WRS	mod for new SMTLIB;
! v12	19-Jun-86 WRS	added /HOST and SETNAM to support ROUTER.DAT;
! v11			no history;

redefine calli!SETNAM = '43;

string item QUEUEFILE;
item AUGMENT;
item BUBBNET;
item DELETE;
item GATEWAY;
string item HOST;
integer item RETRIES;
integer item TIMEOUT;
item TRACE;
item TYMCOMX;
item UNIX;
string item X25;

procedure Fatal( string MSG );
usererr(0,0,MSG);

procedure GiveUp( string MSG );
begin
    cprint( logChan, "%", MSG, crlf );
    logExit;
end;

integer smtTimeout;

simple boolean procedure IsLeft( string Text,Targ );
begin
    while Text=#cr do lop(Text);
    return( kequ(Text[1 to length(Targ)],Targ) );
end;

simple boolean procedure IsRight( string Text,Targ );
return( kequ(Text[inf-length(Targ)+1 to inf],Targ) );

integer msgBreak;
simple procedure smtIni;
begin
    define ignores = {0&1&2&3&4&5&6&11&15&16&17&18&19&20&21&22&23&24&25&26&
	27&28&29&30&31&127};
    setbreak(msgBreak_getbreak,#lf&#ff,ignores,"IA");
end;
require smtIni initialization[0];

integer procedure smtCmd( string CMD; reference string REPLY );
begin
    string TXT,TXT1;
    auxRNC := true;
    auxOut( CMD );
    auxOut( crlf );
    REPLY := TXT1 := null;
    while true do case auxRead( TXT, smtTimeout ) of begin
	[aux!zap] begin REPLY_"aux!zap"; return( 1000 ) end;
	[aux!timeout] begin REPLY_"aux!timeout"; return( 1000 ) end;
	[aux!prompt] TXT1 := TXT;
	[aux!line] if cvd(TXT_TXT1&TXT) then begin
	    REPLY := REPLY& TXT;
	    if TXT[4 to 4] neq "-" then return( cvd( TXT ));
	end
    end;
end;

procedure smtMAIL( r!p(mai) M );
begin
    integer B,P;
    string S,RPath,CMD,RESP,FPath,MSG,RCPTs;
    define ReQueue = { begin
	maiQueue( M );
	return;
    end };
    define RTS(X) = { begin
	cprint( logChan, "?command: ", CMD, crlf& "?response: ", RESP, crlf );
	maiRTS( M,
"
  The remote host returned an error code in response to the command:
    "& CMD,
"
  The error code and message was:
    "& RESP,
"
  As a result of the error, TUMS was unable to deliver this message to
  the following recipients (any other recipients are not affected):
    "& mai:RCPT[M]
);	ifcr length("X") thenc
	    smtCmd( "RSET", RESP );
	    return;
	endc
    end };
    if not CheckPort then ReQueue;
    RPath := maiBScan( S := maiRPath( M ), B );
    case smtCmd( CMD := "MAIL FROM: "& RPath, RESP ) of begin
	[250] ;
	[421]
	[1000] ReQueue;
	[else] RTS(return)
    end;
    RCPTs := null;
    FPath := mai:RCPT[M];
    while length( mai:RCPT[M] := maiBScan( FPath, B ) ) do
	case smtCmd( CMD := "RCPT TO: "& mai:RCPT[M], RESP ) of begin
	    [250][251] RCPTs := RCPTs & mai:RCPT[M];
	    [551] begin "please forward"
		mai:RCPT[M] := maiBScan( RESP, B );
		maiQueue( M );
	    end;
	    [1000] ReQueue;
	    [else] RTS()
	end;
    if length( RCPTs ) = 0 then begin
	smtCmd( "RSET", RESP );
	return;
    end;
    mai:RCPT[M] := null;
    mai:BCC[M] := null;
    MSG := maiMMake( M );
    mai:RCPT[M] := RCPTs;
    case smtCmd( CMD := "DATA", RESP ) of begin
	[354] ;
	[1000] ReQueue;
	[else] RTS(return)
    end;
    while length(MSG) do begin
	string S;
	integer B;
	S := scan( MSG, msgBreak, B );
	if S = "." then auxOut( "." );
	auxOut( S );
    end;
    case smtCmd( CMD := ".", RESP ) of begin
	[250] ;
	[1000] ReQueue;
	[else] RTS(return)
    end;
end;

define AugmentLogin = {( char!w('200,8)& char!w('001,8)& char!w('000,8)&
    char!w('077,8)& char!w('377,8)& char!w('300,8)& char!w('200,8) )};

preload!with "login:", "tums"&#cr, "password:", "long live ontyme"&#cr;
string array UnixLogin[1:4];

procedure Login;
begin
    string AuxHost,Text,AccuText;
    integer Status,RetryCnt;
    label Retry,Error;
    auxRNC := true;		! no controls on auxRead;
    RetryCnt := 0;
Retry:
    creaux( '4 & ( AuxHost :=
	if maiHost = "B"
	    then if props(BUBBNET)
		then datum(HOST)
		else "C"
	    else if props(BUBBNET)
		then "BUBB"
		else datum(HOST)  ));
    if not !SKIP! then begin
	AccuText := "Creaux failed to "& AuxHost& crlf;
Error:	auxZap;
	if ( RetryCnt := RetryCnt + 1 ) > datum(RETRIES) then begin
	    cprint( logChan,
		"login: retry count exceeded, last failure:"& crlf,
		AccuText );
	    logExit;
	end;
	call( case RetryCnt of (2,4,8,15,30,[else]60), "SLEEP" );
	goto Retry;
    end;
    AccuText := null;
    Status := if ( maiHost = "B" ) = ( props(BUBBNET) = 0 ) then 0 else 1;
    if props(GATEWAY) then Status := 0;    ! Zero if not in right network yet;
    if props(AUGMENT) and Status = 1 then auxOut( AugmentLogin );
    if props(X25) then begin "X25"
	auxOut(datum(X25));
	auxOut(#cr);
    end "X25";
    while true do case AuxRead( Text, smtTimeout ) of begin
	[aux!prompt] begin
	    if kequ(Text,";") then continue;
	    AccuText := AccuText& Text& crlf;
	    if Status = 0 then begin "GATEWAY"
		if IsLeft(Text,"please log in:") then begin
		    auxOut( '4 );
			! When HOST is a gateway host number, then user;
			! name MAIL must be homed to the destination. ;
		    if props(GATEWAY) then auxOut("MAIL")
		                      else auxOut( datum(HOST) );
		    if IsLeft(datum(HOST),"MAIL:") then
			 auxOut( ";I SPELL RELIEF TUMS" );
		    auxOut( #cr );
		    if auxTrace then print( datum(HOST)& crlf );
		    Status := 1;
		    if props(AUGMENT) then auxOut( AugmentLogin );
		end
		else goto Error;
	    end "GATEWAY"
	    else if props(AUGMENT) then begin "AUGMENT"
		goto Error;
	    end "AUGMENT"
	    else if props(TYMCOMX) then begin "TYMCOMX"
		if IsLeft(Text,"proj code:")
		    then auxOut( #cr )
		    else goto Error;
	    end "TYMCOMX"
	    else if props(UNIX) then begin "UNIX"
		if 1 leq Status < arrinfo(UnixLogin,2)
		and IsLeft(Text,UnixLogin[Status]) then begin
		    auxOut( UnixLogin[Status+1] );
		    auxOut( #cr );
		    if not auxSync( #lf, smtTimeout ) then goto Error;
		    Status := Status + 2;
		end
		else goto Error;
	    end "UNIX"
	    else goto Error;
	end;
	[aux!line] begin
	    if length(Text) = 0 then continue;
	    AccuText := AccuText& Text& crlf;
	    if IsLeft(Text,"220 ") then done;
	    if IsLeft(Text,"421 ")
	    or IsLeft(Text,"Login incorrect")
	    or IsLeft(Text,"host out of ports")
	    or IsLeft(Text,"host down")
	    or IsLeft(Text,"host shut")
	    or IsLeft(Text,"host not available")
	    then begin
		AccuText := Text& crlf;
		goto Error;
	    end;
	end;
	[aux!zap] begin
	    AccuText := AccuText& "aux!zap"& crlf;
	    goto Error;
	end;
	[aux!timeout] begin
	    AccuText := AccuText& "aux!timeout"& crlf;
	    goto Error;
	end
    end;
    while length(Text) and Text[inf for 1] leq " " do Text := Text[1 to inf-1];
    cprint( logChan, Text, crlf );
end;

procedure HELO;
begin
    string S,MyDomain;
    MyDomain := adr:Host[maiMyAddress]& "."& adr:Net[maiMyAddress];
    case smtCmd( "HELO "& MyDomain, S ) of begin
	[250] ;
	[else] Fatal( "HELO: "& S )
    end;
end;

procedure QUIT;
begin
    string S;
    case smtCmd( "QUIT", S ) of begin
	[221] ;
	[else] cprint( logChan,
	    "%QUIT: bad response """, S, """"& crlf )
    end;
    auxZap;
end;

procedure QServer( reference string MSG );
if length( MSG ) then begin
    r!p(mai)M;
    M := maiMParse( MSG );
    cprint( logChan,
	mai:Message.ID[M], " "&
	"From: ", maiRPath(M), " "&
	"To: ", mai:RCPT[M], crlf );
    smtMAIL( M );
end;

begin	"MAIN"
    integer I;
    datum(RETRIES) := 5;
    datum(TIMEOUT) := 600;
    ArgParse( ANY, QUEUEFILE,
	{AUGMENT,BUBBNET,DELETE,GATEWAY,HOST,RETRIES,TIMEOUT,TRACE,TYMCOMX,
		UNIX,X25},
	ARGS );
    case ( props(AUGMENT)+props(TYMCOMX)+props(UNIX) )
    lsh -11 of begin
	[0] props(TYMCOMX) := true;
	[1] ;
	[else] usererr(0,0,"?conflicting host types specified","X")
    end;
    if not props(HOST) then usererr(0,0,"?no /HOST: specified","X");
    if not props(QUEUEFILE) then begin
	datum(QUEUEFILE) := "(MAIL)"&datum(HOST)&".Q";
	props(DELETE) := true;
    end;
    if "0" leq datum(HOST) leq "9" then
	datum(HOST) := "MAIL:"& datum(HOST);
    smtTimeout := datum(TIMEOUT);
    calli( cvfil( datum(QUEUEFILE), I, I ), calli!SETNAM );
    auxTrace := props(TRACE);
    Login;
    auxEcho := auxTrace;
    HELO;
    maiFEMessage( QServer, datum(QUEUEFILE), props(DELETE) );
    QUIT;
    logExit;
end	"MAIN"
end $
    