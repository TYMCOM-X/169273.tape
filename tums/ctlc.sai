begin	"CTLC - example of program using processes to trap ^C"
require "(SAILIB)SAIL.DEF" source!file;
!get!definitions(TYMINT);

require processes;		! turns on SAIL process support;
require 100 polling!interval;	! interval at which to check for ^C or ESC;
item CmdProcess;		! process item for commands;
item IntProcess;		! process item for interrupts;
boolean QUIT.flag;		! set to TRUE by the QUIT command;

! The EscSvc procedure is the interrupt service procedure that is called
  by the SAIL deffered interrupt handler in response to a ^C interrupt.
  This is setup by the OnInt routine, below.  Since this is a deffered
  interrupt, this procedure has access to all SAIL data structures.  The
  only caveat is that it can not do a GOTO outside of its own scope.
;
procedure EscSvc;
begin
	auxclv( -1, 0, 6 );		! .axCBI (flush input buffer);
	auxclv( -1, 0, 7 );		! .axCBO (flush output buffer);
	print( "^C"& crlf );		! print a message;
	terminate( CmdProcess );	! abort the current command;
end;

! OnInt is called to turn on interrupts for ^C and ESC.  Other causes such
  as notice to quit can also be assigned to the same channel (10) or to
  seperate channels by following the example.
;
procedure OnInt;
begin
    own integer array EscBlk[1:2];
    IntSet( IntProcess );	! startup interrupt process;
    define EscChan = 10;	! interrupt channel to use for escape;
    define !iaESC = 0;		! TINASS cause code for escape;
    EscBlk[1] := 2;
    EscBlk[2] := !hl(-1)+location(EscSvc);
    intmap ( tinass(-1,!iaESC,EscChan), dfrint, location(EscBlk[1]) );
    enable ( newenb(EscChan) );
end;

! CmdProcess is called as a seperate process by MAIN.  It must process
  exactly one command from the terminal.  If a command file is opened,
  the entire command should be processed as one call to CmdProcess which
  generally means CmdProcess will call another procedure to actually
  process the command.  The other procedure may be recursive.
;
procedure CmdProcess;
begin
	print( "Enter command: " );
	CommandLine := inchwl;
	case CommandLine of begin	! a VERY CRUDE parser;
		["0"]["1"]["2"]["3"]["4"]["5"]["6"]["7"]["8"]["9"] begin
			integer N;
			N := intscan( CommandLine, !SKIP! );
			while( N > 0 ) do begin
				print( N, CommandLine, crlf );
				N := N - 1;
			end;
		end;
		["Q"] QUIT := true;
		["?"] print( "
This is a dummy program to demonstrate the use of processes to handle
^C (or Escape) and Notice to Quit interrupts in a SAIL program.

This program accepts the following commands:
	?		- display this message
	n message	- displays the message ""message"" n times
	QUIT		- exits the program

" );
		[else] print( "?illegal command, type ""?"" for help"& crlf )
	end;
end;

! MAIN PROGRAM
;
OnInt;					! enable interrupts;
QUIT.flag := false;
while not QUIT.flag do begin
	sprout( CmdProcess, ProcessCmds );
	join( {CmdProcess} );
end;

end "TUMS"
$
