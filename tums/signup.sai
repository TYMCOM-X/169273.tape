begin	"SIGNUP"

require "(SAILIB)SAIL.DEF" source!file;
!get!definitions(GOGTAB);
require "ARGS.REQ" source!file;
require "AUXLIB.REQ" source!file;
require "LICENS.REQ" source!file;
require "MAILIB.REQ" source!file;
!License!Required(OP SY WF);
require !xwd('0,'3) version;

! v0.1	21-Jul-86 WRS	program to signup for Ontyme forwarding;

define noecho = '200, !axCFS = '64;
internal integer logChan;

string item USERID;
item TRACE;

record!class otm (
    string	Host;
    string	Id;
    string	Key;
    string	Addrs;
    r!p(otm)	Link );

r!p(otm) otMap;
r!p(mai) M;
define	maxOTM = 99;
r!p(otm) array OTS[1:maxOTM];
integer OTN;

integer	break.token,break.dat,break.quote,break.tab;
simple procedure otINIT;
begin
    setbreak( break.token := getbreak, " "&#lf, " "&#cr, "TIS" );
    setbreak( break.dat := getbreak, ""","&#lf&#ff, " "&#ht&#cr, "SIN" );
    setbreak( break.quote := getbreak, """", null, "SIN" );
    setbreak( break.tab := getbreak, #ht&#ff&crlf, null, "SIN" );
end;
require otINIT initialization[0];

simple boolean procedure lequ( string S1,S2 );
return(kequ( S1[1 to length(S2)],S2 ));

simple boolean procedure requ( string S1,S2 );
return(kequ( S1[inf-length(S2)+1 to inf],S2 ));

integer procedure index( string S1, S2 );
comment
    Return the index of the first occurance of string S2 in string S1.
    If not found, return 0.
;
begin
    integer I;
    I := 1;
    while length(S1) geq length(S2) do
	if kequ(S1[1 to length(S2)],S2)
	    then return( I )
	    else begin I := I + 1; lop(S1) end;
    return( 0 );
end;

string procedure Ask. (
    string	PromptMsg;
    string	HelpMsg );
begin "Ask."
    string	InputLine;
    do begin
	print( PromptMsg );
	InputLine := inchwl;
	if equ(InputLine,"?") then print( HelpMsg );
    end until not equ(InputLine,"?");
    return( InputLine );    
end	"Ask.";

recursive boolean procedure Ask.Y!N (
    string	PromptMsg;
    string	HelpMsg );
while true do begin "Ask.Y!N"
    string	S;
    S := Ask. (
        PromptMsg& " (Y,N,?)? ",
	HelpMsg );
    if kequ( S,"YES"[1 for length(S)] ) then return( true );
    if kequ( S,"NO"[1 for length(S)] ) then return( false );
    print( crlf&
	"Must answer ""YES"" or ""NO"", or enter ""?"" for help."&crlf&
	crlf
    );
end	"Ask.Y!N";

integer procedure Ask.Integer (
    string	PromptMsg;
    string	HelpMsg;
    integer	Default( !bit(0) ) );
begin	"Ask.Integer"
    integer	I,BRK;
    string	S;
    label	Prompt;
Prompt:
    S := Ask.( PromptMsg, HelpMsg );
    if length( S ) = 0 and Default neq !bit(0) then begin
	return( Default );
    end;
    I := IntScan( S, BRK );
    if length( S ) > 0 or BRK = -1 or I < 0 then begin
	print( crlf&
	    "Expected a positive decimal integer.  Enter ""?"" for help."&crlf&
	    crlf
	);
	goto Prompt;
    end;
    return( I );
end	"Ask.Integer";

string procedure Ask.Line (
    string	PromptMsg;
    string	HelpMsg );
begin	"Ask.Line"
    return( Ask.( PromptMsg, HelpMsg ) );
end	"Ask.Line";

string procedure Ask.ID( string Prompt, Help );
begin
    string ID;
    label Again;
Again:
    ID := Ask.Line( Prompt, Help );
    if not index(ID,".") then begin
	print(
"The Ontyme ID must include the account name, for example:
	NTD.J/PUBLIC
" );	goto Again;
    end;
    if index(ID,",") or index(ID,"""") then begin
	print( "Ontyme ID must not contain commas (,) or quotes ("")."& crlf );
	goto Again;
    end;
    return( ID );
end;

procedure otSignup( string ARG );
begin
    if not index( ARG, "@" ) then ARG := ARG& "@"& maiHost;
    mai:Text[M] := mai:Text[M]&
	"D;,"& ARG& crlf;
    if ask.Y!N(
"Do you wish to have Ontyme messages forwarded to "& ARG,
"Enter YES to continue, or NO to stop any automatic forwarding of
messages from Ontyme to "& ARG& "."& crlf
    ) then do begin
	string ID,KEY;
	label oops;
	ID := Ask.ID(
"Ontyme ID: ",
"Enter the Ontyme ID from which you wish mail to be forwarded,"& crlf&
"and through which you wish to send messages into Ontyme."& crlf );
	auxcli( -1, noecho, !axCFS );
oops:
	print( "Enter KEY for ", ID, ": " );
	KEY := inchwl;
	print( crlf& "... Again: " );
	if not kequ( Key, inchwl ) then begin
	    print( crlf& "KEYS do not match, try again."& crlf );
	    goto oops;
	end;
	print( crlf );
	auxcli( -1, 0, !axCFS );
	mai:Text[M] := mai:Text[M]&
	    "D;,"& ID& ","& crlf&
	    "I;EMS"& ID[1 to index(ID,".")-1]& ","& ID& ","""& KEY& ""","&
		ARG& crlf;
    end until not ask.Y!N(
"Are there any more Ontyme names to be forwarded to "& ARG,
"Answer YES if all Ontyme names have been setup, or
answer NO if more Ontyme names must be entered.
" );
    if length(mai:Text[M]) then begin
	mai:RCPT[M] := mai:To[M] := "<"& maiName& "@MEP.Tymnet>";
	mai:From[M] := maiName& "@"& maiHost& ".Tymnet";
	mai:Subject[M] := "TUMS-ONTYME signup request (801)";
	if props(TRACE) then print( maiMMake( M ));
	maiQueue( M );
	maiSend;
	print( "Request submitted."& crlf );
    end;
end;

logChan := -1;
ttyup(TRUE);
M := new!record( mai );
argparse( any, USERID, {TRACE}, ARGS );
print(
	crlf&
	"TUMS Signup Program  v",
	cvos(!lh(memory['137])), ".", cvos(!rh(memory['137])), crlf,
	maiDate, crlf,
	"Type ""?"" for help.",
	crlf
);
otSignup( if props(USERID) then datum(USERID) else maiName );

end	"SIGNUP"
$
