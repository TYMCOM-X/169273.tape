begin	"SIGNUP"

require "(SAILIB)SAIL.DEF" source!file;
!get!definitions(GOGTAB);
require "ARGS.REQ" source!file;
require "AUXLIB.REQ" source!file;
require "LICENS.REQ" source!file;
require "MAILIB.REQ" source!file;
!License!Required(OP SY WF);
require !xwd('0,'3) version;

! v0.1	21-Jul-86 WRS	program to signup for Ontyme forwarding;

string item USERID;
item TRACE;

record!class otm (
    string	Host;
    string	Id;
    string	Key;
    string	Addrs;
    r!p(otm)	Link );

r!p(otm) otMap;
r!p(mai) M;
define	maxOTM = 99;
r!p(otm) array OTS[1:maxOTM];
integer OTN;

integer	break.token,break.dat,break.quote,break.tab;
simple procedure otINIT;
begin
    setbreak( break.token := getbreak, " "&#lf, " "&#cr, "TIS" );
    setbreak( break.dat := getbreak, ""","&#lf&#ff, " "&#ht&#cr, "SIN" );
    setbreak( break.quote := getbreak, """", null, "SIN" );
    setbreak( break.tab := getbreak, #ht&#ff&crlf, null, "SIN" );
end;
require otINIT initialization[0];

simple boolean procedure lequ( string S1,S2 );
return(kequ( S1[1 to length(S2)],S2 ));

simple boolean procedure requ( string S1,S2 );
return(kequ( S1[inf-length(S2)+1 to inf],S2 ));

internal procedure otGetDat;
begin
    integer C,B,E,LineNo,PageNo,SosNo;
    string procedure inputString;
    begin
	string S;
	S := input( C, break.dat );
	if B = """" and length(S) then begin
	    print( 
		"?(MAIL)ONTYME.DAT bad string syntax in page ",
		PageNo, " line ", LineNo+1, " at ", S, """"& crlf );
	    S := null;
	end;
	while B = """" do begin
	    string S1;
	    if length(S) then S := S& """";
	    S := S& input( C, break.quote );
	    S1 := input( C, break.dat );
	    if length(S1) then print(
		"?(MAIL)ONTYME.DAT bad string syntax in page ",
		PageNo, " line ", LineNo+1, " at """, S, """", S1, crlf );
	end;
	return( S );
    end;
    string procedure inputLine;
    begin
	string S;
	S := inputString;
	while B geq " " do S := S& B& inputString;
	return( S );
    end;
    open( C:=getchan, "DSK", 0,4,0, 256,B,E );
    lookup( C, "(MAIL)ONTYME.DAT", E );
    if E then print( "?(MAIL)ONTYME.DAT not found"& crlf );
    LineNo := 0; PageNo := 1;
    setpl( C, LineNo, PageNo, SosNo );
    while not E do begin
	string Host,ID,KEY;
	procedure linkUp( reference r!p(otm) ROOT; string Addr );
	if length( Addr ) then begin
	    r!p( otm ) R;
	    integer B;
	    R := new!record( otm );
	    otm:Link[R] := ROOT;
	    ROOT := R;
	    otm:Host[R] := Host;
	    otm:ID[R] := ID;
	    otm:KEY[R] := KEY;
	    otm:Addrs[R] := Addr;
	end;
	define formatError = {
	begin
	    print(
		"?(MAIL)ONTYME.DAT format error in page ",
		PageNo, " line ", LineNo+1, crlf );
	    continue;
	end };
	Host := inputString;
	if B neq "," then continue;
	ID := inputString;
	if B neq "," then formatError;
	KEY := inputString;
	if B neq "," then formatError;
	linkUp( otMap, inputLine );
    end;
    release( C );
end;

comment
	TAB stuff

	This stuff handles tabs on output through the print and cprint.
	The macro TAB(n) may be included in the print output list to tab
	to print column "n" on output.  For this to work, any crlf that
	are output on the channel must be output as a seperate list item.
;

external integer array GOGTAB[0:ENDREN];

define MaxChan = 48;
define Tab(X) = "char!w(X,35)";

integer array Pos[-1:MaxChan];
integer OldPROU;

define Tabs = "(#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht&#ht)";

simple procedure MyPrint( integer Chan; string S );
begin
    GOGTAB[$$PROU] := OldPROU;
    if -1 leq Chan leq MaxChan
	then if width(S)=35 and length(S)=1
	    then begin
		integer I;
		if ( I := S%8 - Pos[Chan]%8 ) > 0 then begin
		    cprint( Chan, Tabs[1 to I] );
		    Pos[Chan] := S land -8;
		end;
		S := "        "[1 to S-Pos[Chan]];
	    end
	    else Pos[Chan] := if S < " " then 0 else Pos[Chan]+length(S);
    cprint( Chan, S );
    GOGTAB[$$PROU] := location(MyPrint);
end;

simple procedure MyPrintIni;
begin
    OldPROU := GOGTAB[$$PROU];
    GOGTAB[$$PROU] := location(MyPrint);
end;
require MyPrintIni initialization[0];

integer procedure index( string S1, S2 );
comment
    Return the index of the first occurance of string S2 in string S1.
    If not found, return 0.
;
begin
    integer I;
    I := 1;
    while length(S1) geq length(S2) do
	if kequ(S1[1 to length(S2)],S2)
	    then return( I )
	    else begin I := I + 1; lop(S1) end;
    return( 0 );
end;

string procedure Ask. (
    string	PromptMsg;
    string	HelpMsg );
begin "Ask."
    string	InputLine;
    do begin
	print( PromptMsg );
	InputLine := inchwl;
	if equ(InputLine,"?") then print( HelpMsg );
    end until not equ(InputLine,"?");
    return( InputLine );    
end	"Ask.";

recursive boolean procedure Ask.Y!N (
    string	PromptMsg;
    string	HelpMsg );
while true do begin "Ask.Y!N"
    string	S;
    S := Ask. (
        PromptMsg& " (Y,N,?) ",
	HelpMsg );
    if kequ( S,"YES"[1 for length(S)] ) then return( true );
    if kequ( S,"NO"[1 for length(S)] ) then return( false );
    print( crlf&
	"Must answer ""YES"" or ""NO"", or enter ""?"" for help."&crlf&
	crlf
    );
end	"Ask.Y!N";

string procedure Ask.Phone (
    string	PromptMsg;
    string	HelpMsg );
begin	"Ask.Phone"
    integer	I;
    string	S;
    label	Prompt;
Prompt:
    S := Ask.( PromptMsg, HelpMsg );
    if S="(" then begin
	lop( S );
    end;
    for I := 4,8 do 
	if S[I for 1] neq "-"
	    and S[I for 1] neq "/"
	    and S[I for 1] neq ")"
	    and S[I for 1] neq " "
	    then begin
		print( crlf& "Format is 408-446-6000 x1234."&crlf&crlf );
		goto Prompt;
	    end;
    for I := 1,2,3, 5,6,7, 9,10,11,12 do
	if not ("0" leq S[I for 1] leq "9")
	    then begin
		print( crlf& "Format is 408-446-6000 x1234."&crlf&crlf );
		goto Prompt;
	    end;
    S := S[1 to 3]& "-"& S[5 to 7]& "-"& S[9 to inf];
    return( S );
end	"Ask.Phone";

integer procedure Ask.Integer (
    string	PromptMsg;
    string	HelpMsg;
    integer	Default( !bit(0) ) );
begin	"Ask.Integer"
    integer	I,BRK;
    string	S;
    label	Prompt;
Prompt:
    S := Ask.( PromptMsg, HelpMsg );
    if length( S ) = 0 and Default neq !bit(0) then begin
	return( Default );
    end;
    I := IntScan( S, BRK );
    if length( S ) > 0 or BRK = -1 or I < 0 then begin
	print( crlf&
	    "Expected a positive decimal integer.  Enter ""?"" for help."&crlf&
	    crlf
	);
	goto Prompt;
    end;
    return( I );
end	"Ask.Integer";

string procedure Ask.Line (
    string	PromptMsg;
    string	HelpMsg );
begin	"Ask.Line"
    return( Ask.( PromptMsg, HelpMsg ) );
end	"Ask.Line";

integer procedure OtMenu( string Selector; boolean ShowKeys(false) );
begin
    r!p(otm) R;
    print(
	crlf,
	"item", tab(6),
	"host", tab(16),
	"ontyme id", tab(32),
	if ShowKeys then "ontyme key" else "addresses", crlf,
	"----", tab(6),
	"----", tab(16),
	"---------", tab(32),
	if ShowKeys then "----------" else "---------", crlf );
    OTN := 0;
    R := otMap;
    while R do begin
	if kequ( otm:Host[R], Selector )
	or kequ( otm:ID[R], Selector )
	or requ( otm:ID[R], "."& Selector )
	or requ( otm:ID[R], "/"& Selector )
	or index( otm:Addrs[R], Selector& "@" ) = 1
	or index( otm:Addrs[R], ","& Selector& "@" )
	or index( otm:Addrs[R], Selector& "/" ) = 1
	or index( otm:Addrs[R], ","& Selector& "/" ) then begin
	    OTS[OTN:=OTN+1] := R;
	    print(
		" ", OTN, tab(6),
		otm:Host[R], " ", tab(16),
		otm:ID[R], " ", tab(32),
		if ShowKeys then otm:KEY[R] else otm:Addrs[R], crlf  );
	end;
	R := otm:Link[R];
    end;
    if OTN = 0
	then print( "[ no matches ]", crlf& crlf )
	else print( crlf );
    return( OTN );
end;

string procedure Ask.ID( string Prompt, Help );
begin
    string ID;
    label Again;
Again:
    ID := Ask.Line( Prompt, Help );
    if not index(ID,".") then begin
	print(
"The Ontyme ID must include the account name, for example:
	NTD.J/PUBLIC
" );	goto Again;
    end;
    if index(ID,",") or index(ID,"""") then begin
	print( "Ontyme ID must not contain commas (,) or quotes ("")."& crlf );
	goto Again;
    end;
    return( ID );
end;

procedure otEditItem( integer I );
begin
    r!p(otm) R;
    string S;
    R := OTS[i];
    S := "D;"& otm:Host[R]& ","& otm:Id[R]& ","& crlf;
    if length(otm:Addrs[R]) then
	S := S& "I;"& otm:Host[R]& ","& otm:Id[R]& ","&
	    """"& otm:Key[R]& ""","& otm:Addrs[R]& crlf;
    mai:Text[M] := mai:Text[M]& S;
    if props(TRACE) then print( S );
end;

procedure otAddCmd;
begin
    r!p(otm) R,R1;
    label Again,oops;
    string S;
    define !axCFS = '64, noecho = '200;
    R := new!record(otm);
Again:
    otm:Id[R] := Ask.ID(
	"Ontyme ID: ",
	"Enter the Ontyme ID from which you wish mail to be forwarded,"& crlf&
	"and through which you wish to send messages into Ontyme."& crlf );
    otm:Host[R] := "EMS"& otm:Id[R][1 to index(otm:Id[R],".")-1];
    R1 := otMap;
    while R1 do
	if kequ( otm:ID[R1], otm:ID[R] )
	    then begin
		print( "ID already in data base."& crlf );
		goto Again;
	    end
	    else R1 := otm:Link[R1];
    auxcli( -1, noecho, !axCFS );
oops:
    print( "Enter KEY for "& otm:ID[R]& ": " );
    otm:Key[R] := inchwl;
    print( "... Again: " );
    if not kequ( otm:Key[R], inchwl ) then begin
	print( crlf& "KEYS do not match, try again."& crlf );
	goto oops;
    end;
    print( crlf );
    auxcli( -1, 0, !axCFS );
    S := maiName& "@"& maiHost& ","& maiName& "@*";
    otm:Addrs[R] := Ask.Line(
	"Addresses ("&S&"): ",
	"Enter a list of TUMS addresses seperated by commas.  The first"& crlf&
	"address (which may be null) is the address to which Ontymes to"& crlf&
	otm:ID[R]&" will be forwarded.  The remaining addresses are"& crlf&
	"those TUMS users authorized to send Ontymes as "&otm:ID[R]&"."& crlf&
	"These addresses may contain a domain of ""*"" to indicate any"& crlf&
	"host.  If <cr> is entered, the default addresses will be used:"& crlf&
	"	"& S& crlf  );
    if length(otm:Addrs[R]) = 0 then otm:Addrs[R] := S;
    if Ask.Y!N( "All entries correct", "Confirm with ""Y"" to add item." )
	then begin
	    otm:Link[R] := otMap;
	    OTS[OTN:=OTN+1] := R;
	    otMap := R;
	    otEditItem( OTN );
	end
	else print( "Item not added."& crlf );
end;

procedure otChangeCmd;
begin
    string Addrs,S;
    integer I;
    Addrs := Ask.Line(
	"Enter addresses: ",
	"Enter the home address, followed by a comma and a list"& crlf&
	"of other addresses allowed to send through this ID."& crlf&
	"For example: JOHN@HOME,JOHN@*,JOHNNY@*"& crlf );
    for I := 1 upto OTN do begin
	if not Ask.Y!N(
	    "Change addresses for "& otm:Id[OTS[i]],
	    "To confirm changing the addresses for this ID, enter ""Y""."&
	    crlf )
	then continue;
	otm:Addrs[OTS[I]] := Addrs;
	otEditItem( I );
    end;
end;

procedure otDeleteCmd;
begin
    integer I,N;
    r!p(otm) R;
    if OTN leq 0 then begin
	print( "No items to delete."& crlf );
	return;
    end;
    N := Ask.Integer(
	"Enter item number to be deleted: ",
	"Enter the number of the item on the menu to be deleted from"& crlf&
	"the list of Ontyme IDs registered for use with TUMS."& crlf );
    if not (1 leq N leq OTN) then begin
	print( "Number out of range."& crlf );
	return;
    end;
    otm:Addrs[OTS[N]] := null;
    otEditItem( N );
    OTN := OTN - 1;
    for I := N upto OTN do OTS[I] := OTS[I+1];
end;

procedure otHomeCmd;
begin
    string HOME,S;
    integer I;
    HOME := Ask.Line(
	"Home address ("& maiName& "@"& maiHost& "): ",
	"The home address is the address to which mail will"& crlf&
	"be forwarded to as it is received from Ontyme."& crlf&
	"Enter <cr> to set the home address to "& maiName& "@"& maiHost& crlf);
    if length(HOME) = 0 then HOME := maiName& "@"& maiHost;
    for I := 1 upto OTN do begin
	if not Ask.Y!N(
	    "Change home for "& otm:Id[OTS[i]],
	    "To confirm changing the home for this ID, enter ""Y""."& crlf&
	    "The home address is the address to which mail will"& crlf&
	    "be forwarded to as it is received from Ontyme."& crlf  )
	then continue;
	S := otm:Addrs[OTS[I]];
	otm:Addrs[OTS[I]] := if index(S,",")
	    then HOME& S[index(S,",") to inf]
	    else HOME;
	otEditItem( I );
    end;
end;

procedure otKeyCmd;
begin
    string OLD,NEW;
    r!p(otm) R;
    integer NumberOfMatches, I;
    label oops;
    define !axCFS = '64, noecho = '200;
    auxcli( -1, noecho, !axCFS );
    print( "Enter old Ontyme KEY: " );
    OLD := inchwl;
    NumberOfMatches := 0;
    for I := 1 upto OTN do
	if kequ( OLD, otm:Key[OTS[i]] )
	    then NumberOfMatches := NumberOfMatches + 1;
    if NumberOfMatches = 0 then begin
	print( crlf& "No items found having that key."& crlf );
	auxcli( -1, 0, !axCFS );
	return;
    end;
oops:
    print( crlf& "Enter new Ontyme KEY: " );
    NEW := inchwl;
    print( "... Again: " );
    if not kequ( NEW, inchwl ) then begin
	print( crlf& "New KEYS do not match, try again." );
	goto oops;
    end;
    print( crlf );
    auxcli( -1, 0, !axCFS );
    for I := 1 upto OTN do if kequ( OLD, otm:Key[OTS[i]] ) then begin
	if not Ask.Y!N(
	    "Change KEY for "& otm:Id[OTS[i]],
	    "To confirm changing the key for this ID, enter ""Y""."& crlf  )
	then continue;
	otm:Key[OTS[i]] := NEW;
	otEditItem( I );
    end;
end;

procedure otSignup( string ARG );
begin
    string CMD;
    otGetDat;
    otMenu( ARG );
    do begin "CommandLoop"
	print( crlf );
	CMD := Ask.Line(
	    "Command (ADD,CHANGE,DELETE,HOME,KEY,LIST,QUIT,SHOW,?): ",
	    "Enter the command desired:
	ADD	add a new Ontyme ID
	CHANGE	change addresses
	DELETE	delete an Ontyme ID
	HOME	change HOME addresses
	KEY	change Ontyme KEY (password)
	LIST	show list of items with addresses
	QUIT	leave the SIGNUP program
	SHOW	show list of items with KEYs"& crlf& crlf );
	case CMD of begin
	    ["A"] otAddCmd;
	    ["C"] otChangeCmd;
	    ["D"] otDeleteCmd;
	    ["H"] otHomeCmd;
	    ["K"] otKeyCmd;
	    ["L"] otMenu( ARG );
	    ["Q"][0] done;
	    ["S"] otMenu( ARG, true );
	    ["T"] props(TRACE) := not props(TRACE);
	    [else] begin print( "?invalid command"& crlf ); continue end
	end;
    end until false;
    if length(mai:Text[M]) then begin
	mai:RCPT[M] := mai:To[M] := "<@MEP>";
	mai:From[M] := maiName& "@"& maiHost;
	mai:Other[M] := "Executive-function-code: 801 (MAIL)ONTYME.DAT"& crlf;
	maiQueue( M );
	maiSend;
    end;
end;

ttyup(TRUE);
M := new!record( mai );
argparse( any, USERID, {TRACE}, ARGS );
print(
	crlf&
	"TUMS Signup Program  v",
	cvos(!lh(memory['137])), ".", cvos(!rh(memory['137])), crlf,
	maiDate, crlf,
	"Type ""?"" for help.",
	crlf
);
otSignup( if props(USERID) then datum(USERID) else maiName );

end	"SIGNUP"
$
  