!! title COMSUB - Command Subroutines ;
! *************************************************************************
*									  *
*				  COMSUB				  *
*			    Command Subroutines				  *
*									  *
***************************************************************************


	   This file is required as a source!file in COMAND.SAI.


**************************************************************************;
!! title Rtn C!IsAlphaP ;
! Predicate functions to help us scan for thingies ;

! Predicate to tell if the point character is alphabetic ;

simple boolean procedure C!IsAlphaP;
  return( C!Tab[ B!GetC ] land IsAlpha );
!! title Rtn C!IsDelimP ;
! Predicate to tell if the point character may be a delimiter ;

simple boolean procedure C!IsDelimP;
  return( C!Tab[ B!GetC ] land IsDelim );
!! title Rtn C!IsWhiteP ;
! Predicate to tell if the point character is whitespace ;

simple boolean procedure C!IsWhiteP;
  return( C!Tab[ B!GetC ] land IsWhite );
!! title Rtn C!IsGrayP ;
! Predicate to tell if the current character is grayspace ;

simple boolean procedure C!IsGrayP;
  return( C!Tab[ B!GetC ] land ( IsWhite+IsEOL ) );
!! title Rtn C!IsEOLP ;
! Predicate to tell if the current character is an end of line ;

simple boolean procedure C!IsEOLP;
  return( C!Tab[ B!GetC ] land IsEOL );
!! title Rtn C!IsSpecial ;
! Predicate to tell if the the current character is 'special' ;

simple boolean procedure C!IsSpecial;
  return( C!Tab[ B!GetC ] land IsSpecial );
!! title Rtn AtEOL ;
! Routines to help deal with different flavors of end-of-line ;

simple boolean procedure AtEOL;
  begin
    if ( B!EndP or ( B!GetC = FF )) then return( true );
    if ( B!GetC neq CR ) then return( false );
    B!Move( FORWARDS );
    if ( B!EndP or ( B!GetC = LF )) then
      begin
	B!Move( BACKWARDS );
	return( true );
      end
    else
      begin
	B!Move( BACKWARDS );
	return( false );
      end;
  end;
!! title Rtn AfterEOL ;
simple boolean procedure AfterEOL;
  begin
    if ( B!BegP ) then return( true );
    B!Move( BACKWARDS );
    if ( B!GetC = FF ) then
      begin
	B!Move( FORWARDS );
	return( true );
      end
    else if ( B!GetC = LF ) then
      begin
	B!Move( BACKWARDS );
	if ( B!BegP or ( B!GetC = CR )) then
	  begin
	    B!Move( FORWARDS ); B!Move( FORWARDS );
	    return( true );
	  end
	else
	  begin
	    B!Move( FORWARDS );  B!Move( FORWARDS );
	    return( false );
	  end;
      end
    else
      begin
	B!Move( FORWARDS );
	return( false );
      end;
  end;
!! title Rtn MoveForwards ;
! Procedures to help us move about ;

simple procedure MoveForwards;
  begin "move forwards"
    own integer C;

    C := B!GetC;
    B!Move( FORWARDS );
    if (( C = CR ) and ( B!GetC = LF )) then B!Move( FORWARDS );

  end "move forwards";
!! title Rtn MoveBackwards ;
simple procedure MoveBackwards;
  begin "move backwards"

    if ( B!BegP ) then return;
    B!Move( BACKWARDS );
    if (( B!GetC = LF ) and ( not B!BegP )) then
      begin
	B!Move( BACKWARDS );
	if ( B!GetC neq CR ) then
	  B!Move( FORWARDS );
      end;

  end "move backwards";
!! title Rtn MoveToBOL ;
! Move to the beginning of the line ;

procedure MoveToBOL;
  begin
    while ( not AfterEOL ) do
      MoveBackwards;
  end;
!! title Rtn MoveToEOL ;
! Move to the end of the current line ;

procedure MoveToEOL;
  begin
    while ( not AtEOL ) do
      MoveForwards;
  end;
!! title Rtn C!ReadString ;
! Routine to read a string until a specified terminator is seen. ;

internal simple boolean procedure C!ReadString( string Prompt; integer Delim1, Delim2 );
  begin
    integer C;
    C!String := NULL;
    W!MsgF := true;
    forever do
      begin
	W!Msg( Prompt & C!String );
	C := C!GetC;
	if ( C = '7 ) then
	  begin
	    C!String := NULL;
	    W!MsgF := false;
	    return( false );
	  end
	else if ( C = Delim1 or C = Delim2 ) then done
	else if ( C = BS or C = DEL ) then
	  begin
	    if (( C!String[ INF for 1 ] = LF ) and
		( C!String[ INF-1 for 1 ] = CR )) then
	      C!String := C!String[ 1 for INF-2 ]
	    else
	      C!String := C!String[ 1 for INF-1 ];
	  end
	else if ( C = '21 ) then		! ^Q - quote next ;
	  C!String := C!String & C!GetC
	else if ( C = CR ) then
	  C!String := C!String & ('15&'12)
	else
	  C!String := C!String & C;
      end;
    W!Msg( Prompt & C!String & "$" );
    W!MsgF := false;
    return ( true );
  end;
!! title Rtn C!ReadLitString ;
! Routine to read a string until a specified terminator is seen. ;
! Note - this is just like C!ReadString, but it doesn't expand <cr>
!  to <cr><lf> ;

boolean procedure C!ReadLitString( string Prompt; integer Delim1, Delim2 );
  begin
    integer C;
    C!String := NULL;
    W!MsgF := true;
    forever do
      begin
	W!Msg( Prompt & C!String );
	C := C!GetC;
	if ( C = '7 ) then
	  begin
	    C!String := NULL;
	    W!MsgF := false;
	    return( false );
	  end
	else if ( C = Delim1 or C = Delim2 ) then done
	else if ( C = BS or C = DEL ) then
	  begin
	    if (( C!String[ INF for 1 ] = LF ) and
		( C!String[ INF-1 for 1 ] = CR )) then
	      C!String := C!String[ 1 for INF-2 ]
	    else
	      C!String := C!String[ 1 for INF-1 ];
	  end
	else if ( C = '21 ) then		! ^Q - quote next ;
	  C!String := C!String & C!GetC
	else
	  C!String := C!String & C;
      end;
    W!Msg( Prompt & C!String & "$" );
    W!MsgF := false;
    return ( true );
  end;

!! title Rtn C!ReadESCString ;
! Read a string, but allow imbedded ESCapes
;

internal simple boolean procedure C!ReadESCString( string Prompt );
  begin "read string"
    integer C;

    C!String := NULL;
    W!MsgF := true;

    forever do
      begin
	W!Msg( Prompt & C!String );
	C := C!GetC;
	if ( C = '7 ) then
	  begin
	    C!String := NULL;
	    W!MsgF := false;
	    return( false );
	  end
	else if ( C = ESC and ( length( C!String ) = 0 )) then done
	else if ( C = ESC and ( C!String[ Inf for 1 ] = ESC )) then done
	else if ( C = BS or C = DEL ) then
	  begin
	    if (( C!String[ INF for 1 ] = LF ) and
		( C!String[ INF-1 for 1 ] = CR )) then
	      C!String := C!String[ 1 for INF-2 ]
	    else
	      C!String := C!String[ 1 for INF-1 ];
	  end
	else if ( C = '21 ) then		! ^Q - quote next ;
	  C!String := C!String & C!GetC
	else
	  C!String := C!String & C;
      end;
    W!Msg( Prompt & C!String & "$" );
    W!MsgF := false;

    return ( true );

  end "read string";
!! title Rtn C!Ask ;
! Routine to ask a yes/no question ;

internal boolean procedure C!Ask( string Question );
  begin
    while ( true ) do
      begin
	if ( not C!ReadString( Question, ESC, CR )) then
	  continue
	else if (( C!String = "Y" ) or ( C!String = "y" )) then
	  return( true )
	else if (( C!String = "N" ) or ( C!String = "n" )) then
	  return( false );
	T!Bell;
      end;
  end;
!! title Rtn CVCmdChr ;
! Routine to convert a command character into a string
;

string procedure CVCmdChr( integer C );
  begin "cv"
    string S;

    if ( C >= '400 ) then S := "XMeta "
    else if ( C >= '200 ) then S := "Meta "
    else S := NULL;

    C := C land '177;

    if ( C = 0 ) then S := S & "Null"
    else if ( C = '33 ) then S := S & "Esc"
    else if ( C = '40 ) then S := S & "Space"
    else if ( C = '177 ) then S := S & "Del"
    else if ( C < '40 ) then S := S & "^" & ( C + '100 )
    else S := S & C;

    return( S );

  end "cv";
!! title Rtn CVCmdStr ;
! Routine to convert a string of commands into a string
;

string procedure CVCmdStr( string Str );
  begin "cv-str"
    string S;
    integer C;

  string procedure CV( integer C );
    begin "cv-char"
      string S;

      if ( C geq '400 ) then S_ "<XMeta>"
      else if ( C geq '200 ) then S_ "<Meta>"
      else S_ NULL;
      C := C land '177;
      if ( C = 0 ) then S := S & "<Null>"
      else if ( C = '33 ) then S := S & "<Esc>"
      else if ( C = '177 ) then S := S & "<Del>"
      else if ( C < '40 ) then S := S & "^" & ( C + '100 )
      else S := S & C;
      return( S );
    end "cv-char";

    S_ Null;
    while ( length( Str ) ) do
      S_ S & CV( C_ Lop( Str ) );

    return( S );

  end "cv-str";

!! title Rtn MoveTo ;
! Some utility routines to find things. ;

! Move to a thingy.  Calls 'ThingP' at each step, returning when
!  the predicate returns true.  If by some chance we run into either
!  the beginning or end of the buffer before finding a thingy, then
!  return false. ;

boolean procedure MoveTo( boolean procedure ThingP; integer Dir );
  begin "move to"
    forever do
      begin
	if ( Dir = BACKWARDS ) then
	  begin
	    if ( B!BegP ) then return( false );
	    B!Move( BACKWARDS );
	    if ( ThingP ) then return( true );
	  end
	else if ( Dir = FORWARDS ) then
	  begin
	    if ( ThingP ) then return( true );
	    B!Move( FORWARDS );
	    if ( B!EndP ) then return( false );
	  end
	else
	  usererr( 0,0,"[MoveTo]" );
      end;
  end "move to";
!! title Rtn MovePast ;
! Move past a thingy.  Calls 'ThingP' until we pass the thingy.
!  Return true unless we run into the beginning or end of the buffer. ;

boolean procedure MovePast( boolean procedure ThingP; integer Dir );
  begin "move past"
    forever do
      begin
	if ( Dir = FORWARDS ) then
	  begin
	    B!Move( FORWARDS );
	    if ( B!EndP or not ThingP ) then return( true );
	  end
	else if ( Dir = BACKWARDS ) then
	  begin
	    B!Move( BACKWARDS );
	    if ( B!BegP or not ThingP ) then return( true );
	  end
	else
	  usererr( 0,0,"[MovePast]" );
      end;
  end "move past";
!! title Rtn CharWidth ;
! Routine to tell us how "wide" a character is in a given column ;

integer procedure CharWidth( integer C, Col );
  begin
    integer Temp;

    if (( C >= " " ) and ( C < '177 )) then
      return( 1 )
    else if ( C = CR ) then
      return( 0 )		! "should" never hit this case ;
    else if ( C = ESC ) then
      begin
	if ( G!ESCF ) then return( 1 ) else return( 2 );
      end
    else if ( C = TAB ) then
      begin
        Temp := 1;
	while ( Col mod C!TABWidth ) do		! ** hack ** ;
	  begin
	    Temp := Temp + 1;
	    Col := Col + 1;
	  end;
	return( Temp );
      end
    else
      return( 2 )
  end;

!! title Rtn GetColumn ;
! Routine to tell us what column we're on ;

simple integer procedure GetColumn;
begin
  integer
    SavePoint,
    Col,
    C;

  SavePoint _ B!GetP;
  MoveToBOL;
  Col _ 1;

  while (SavePoint neq B!GetP) do
  begin
    incr(Col, CharWidth(B!GetC, Col));
    B!Move(FORWARDS);
  end;

  return(Col);
end;
!! title Rtn GetIndent ;
! Tell us how much the current line is indented.
;

simple integer procedure GetIndent;
begin
  integer
    SavePoint,
    Indent,
    C;

  SavePoint _ B!GetP;
  MoveToBOL;
  Indent _ 1;

  while (C!IsWhiteP) do
  begin
    incr(Indent, CharWidth(B!GetC, Indent));
    B!Move(FORWARDS);
  end;

  B!SetP(SavePoint);
  return(Indent - 1);
end;
!! title Rtn TryColumn ;
! Try to get to a specified column on the current line.
;

simple procedure TryColumn (integer DesiredColumn);
begin
  integer
    ThisCol,
    C;

  ThisCol _ GetColumn;

  if (ThisCol > DesiredColumn) then
  begin
    MoveToBOL;
    ThisCol _ 1;
  end;

  while (ThisCol < DesiredColumn) do
  begin
    C _ B!GetC;

    if (C = CR or C = FF) then
      done;

    B!Move(FORWARDS);
    incr(ThisCol, CharWidth(C, ThisCol));
  end;
end;
!! title Rtn ForceIndent ;
! Force the indentation of the current line to be a specified width,
! using Tabs iff C!UseTabs is true.
;

simple procedure ForceIndent (integer HowMuch);
begin
  integer
    NewColumn,
    SpsToAdd,
    TabsToAdd;

  if (HowMuch < 0) then
    HowMuch _ 0;

  NewColumn _ (GetColumn + (HowMuch - GetIndent)) max 1;

  TabsToAdd _ 0;
  SpsToAdd  _ HowMuch;

  if (C!UseTabs) then
  begin
    TabsToAdd _ HowMuch div C!TabWidth;
    SpsToAdd  _ HowMuch mod C!TabWidth; 
  end;

  MoveToBOL;

  while (C!IsWhiteP) do
    B!Delete(FORWARDS);

  while (TabsToAdd) do
  begin
    B!Insert(Tab);
    decr(TabsToAdd);
  end;

  while (SpsToAdd) do
  begin
    B!Insert(" ");
    decr(SpsToAdd);
  end;

  TryColumn(NewColumn);
end;
!! title a quiet data structure ;
! String routines used by various peoples ;

preload!with
 "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec";
own safe string array MonthName[ 1:12 ];

!! title Rtn DateStr ;
string procedure DateStr;
  begin
    integer UDT, DD, MM, YY;

IFCR TYMCOMX THENC
    UDT := calli('0,'14);
    DD := ( UDT mod 31 ) + 1;
    UDT := UDT div 31;
    MM := ( UDT mod 12 ) + 1;
    YY := ( UDT div 12 ) + 64;
ENDC
IFCR TOPS20 THENC
    start!code
      seto 2,;
      setz 4,;
      odcnv;
      hrrzm 2,MM;		! store month-1 ;
      aos MM;			! adjust ;
      hlrz 1,2;
      idivi 1,100;
      movem 2,YY;		! store year ;
      hlrzm 3,DD;		! store day-1 ;
      aos DD;			! adjust ;
    end;
ENDC
    return( cvs(DD) & "-" & MonthName[MM] & "-" & cvs(YY) );
  end;

!! title Rtn TimeStr ;
string procedure TimeStr;
  begin
    integer T,HH,MM,SS;

IFCR TYMCOMX THENC
    T := calli('0,'22) div 60;
ENDC
IFCR TOPS20 THENC
    start!code
      seto 2,;
      setz 4,;
      odcnv;
      hrrzm 4,T;		! store seconds ;
    end;
ENDC
    SS := T mod 60;
    T := T div 60;
    HH := T div 60;
    MM := T mod 60;
    return( cvs( HH ) & ":" &
	    cvs( 100 + MM )[2 for 2] & ":" &
	    cvs( 100 + SS )[2 for 2] );
  end;
!! title Rtn FindEOS ;
! Find and return the location of the end of the current screen.  (We
! duplicate a fair amount of code here in order to make execution as
! efficient as possible.)
;

simple integer procedure FindEOS;
begin "FindEOS"
  integer
    C,
    Col,
    Line,
    RetPoint,
    SavePoint;

  SavePoint _ B!GetP;
  B!SetP(W!GetS);

  if (G!WrapP) then
  begin
    Col  _ 1;
    Line _ 0;

    while (true) do
    begin
      if (B!EndP) then
        done;

      C _ B!GetC;

      if (C = FF and G!FFBreak) then
        done;

      incr(Col, CharWidth(C, Col));

      if (C = CR or C = FF or Col - 1 >= T!Width) then
      begin
        if ((incr(Line)) = W!Size) then
          done
        else
          Col _ CharWidth(C, 1) + 1;
      end;

      MoveForwards;
    end;
  end
  else
  begin
    Line _ 0;

    while (true) do
    begin
      if (B!EndP) then
        done;

      C _ B!GetC;

      if (C = FF and G!FFBreak) then
        done;

      if (C = CR or C = FF) then
      begin
        if ((incr(Line)) = W!Size) then
          done;
      end;

      MoveForwards;
    end;

    TryColumn(T!Width);
  end;

  RetPoint _ B!GetP;
  B!SetP(SavePoint);
  return(RetPoint);
end "FindEOS";
!! title Rtn DownLine ;
! Move down to the beginning of the next line.
;

simple procedure DownLine;
begin "DownLine"
  MoveToEOL;
  MoveForwards;
end "DownLine";
!! title Rtn UpLine ;
! Move up to the end of the previous line.
;

simple procedure UpLine;
begin "UpLine"
  MoveToBOL;
  MoveBackwards;
end "UpLine";
!! title Rtn SkipNWS ;
! Skip over the next chunk of non-White Space on the current line.
;

simple procedure SkipNWS (integer Direction);
begin "SkipNWS"
  if (Direction = FORWARDS) then
  begin
    while (not AtEol and not C!IsWhiteP) do
      MoveForwards;
  end
  else if (Direction = BACKWARDS) then
  begin
    MoveBackwards;

    while (not AfterEOL and not C!IsWhiteP) do
      MoveBackwards;

    if (C!IsWhiteP) then
      MoveForwards;
  end;
end "SkipNWS";
!! title Rtn SkipWS ;
! Skip over the next chunk of White Space.
;

simple procedure SkipWS (integer Direction);
begin "SkipWS"
  if (Direction = FORWARDS) then
  begin
    while (not AtEOL and C!IsWhiteP) do
      MoveForwards;
  end
  else if (Direction = BACKWARDS) then
  begin
    MoveBackwards;

    while (not AfterEOL and C!IsWhiteP) do
      MoveBackwards;

    if (not C!IsWhiteP) then
      MoveForwards;
  end;
end "SkipWS";
!! title Rtn LineEmpty ;
! Determine whether the current line is empty.
;

simple boolean procedure LineEmpty;
begin "LineEmpty"
  boolean
    EmptyP;
  integer
    OrigPt;

  OrigPt _ B!GetP;
  MoveToBOL;

  while (not B!EndP and C!IsWhiteP) do
    MoveForwards;

  set(EmptyP, B!EndP or AtEOL);
  B!SetP(OrigPt);
  return(EmptyP);
end "LineEmpty";
!! title Rtn GenerateWS ;
! Generate the required amount of whitespace.
;

simple procedure GenerateWS (integer N);
begin "GenerateWS"
  while (N > 0) do
  begin
    B!Insert(" ");
    decr(N);
  end;
end "GenerateWS";
!! title Rtn GenerateCRLF ;
! Generate a number of CRLFs followed by the appropriate indentation.
;

simple procedure GenerateCRLF (integer Count(1), Indent(0));
begin "GenerateCRLF"
  while (Count > 0) do
  begin
    B!Insert(CR);
    B!Insert(LF);

    if (Indent) then
      ForceIndent(Indent);

    decr(Count);
  end;
end "GenerateCRLF";
!! title Rtn CompressGS ;
!  Compress the grayspace following the point to a mere nothing.
;

simple procedure CompressGS (integer Direction, EndMk(-1));
begin "CompressGS"
  if (EndMk > -1) then
  begin
    if (Direction = FORWARDS) then
    begin
      while (B!GetP < B!GetM(EndMk) and C!IsGrayP) do
        B!Delete(FORWARDS);
    end
    else if (Direction = BACKWARDS) then
    begin
      if (B!GetP > B!GetM(EndMk)) then
      begin
        while (B!GetP > B!GetM(EndMk)) do
        begin
          MoveBackwards;

          if (C!IsGrayP) then
            B!Delete(FORWARDS);
        end;

        if (not C!IsGrayP) then
          MoveForwards;
      end;
    end;
  end
  else
  begin
    if (Direction = FORWARDS) then
    begin
      while (not B!EndP and C!IsGrayP) do
        B!Delete(FORWARDS);
    end
    else if (Direction = BACKWARDS) then
    begin
      if (not B!BegP) then
      begin
        whilt B!BegP) do
        begin
          MoveBackwards;

          if (C!IsGrayP) then
            B!Delete(FORWARDS)
          else
            done;
        end;

        if (not C!IsGrayP) then
          MoveForwards;
      end;
    end;
  end;
end "CompressGS";
!! title Rtn CompressWS ;
! Compress the whitespace following the point to a mere nothing.
;

simple procedure CompressWS (integer Direction, EndMk(-1));
begin "CompressWS"
  if (EndMk > -1) then
  begin
    if (Direction = FORWARDS) then
    begin
      while (B!GetP < B!GetM(EndMk) and C!IsWhiteP) do
        B!Delete(FORWARDS);
    end
    else if (Direction = BACKWARDS) then
    begin
      if (B!GetP > B!GetM(EndMk)) then
      begin
        while (B!GetP > B!GetM(EndMk)) do
        begin
          MoveBackwards;

          if (C!IsWhiteP) then
            B!Delete(FORWARDS)
          else
            done;
        end;

        if (not C!IsWhiteP) then
          MoveForwards;
      end;
    end;
  end
  else
  begin
    if (Direction = FORWARDS) then
    begin
      while (not B!EndP and C!IsWhiteP) do
        B!Delete(FORWARDS);
    end
    else if (Direction = BACKWARDS) then
    begin
      if (not B!BegP) then
      begin
        while (not B!BegP) do
        begin
          MoveBackwards;

          if (C!IsWhiteP) then
            B!Delete(FORWARDS)
          else
            done;
        end;

        if (not C!IsWhiteP) then
          MoveForwards;
      end;
    end;
  end;
end "CompressWS";
!! title Rtn SkipGraySpace ;
! Skip any grayspace (space, tab, or crlf) following (or preceding) the
! cursor and wind up at the beginning (or end) of the next (or previous)
! token.
;

simple procedure SkipGraySpace (integer Dir(FORWARDS));
begin "SkipGraySpace"
  if (Dir = FORWARDS) then
  begin
    ! Move Forwards.
    ;

    while (not B!EndP) do
    begin
      if (not C!IsGrayP) then
        done;

      MoveForwards;
    end;
  end
  else if (Dir = BACKWARDS) then
  begin
    ! Move Backwards.
    ;

    MoveBackwards;

    while (not B!BegP and C!IsGrayP) do
      MoveBackwards;

    if (not C!IsGrayP) then
      MoveForwards;
  end;
end "SkipGraySpace";
!! title Rtn DoFill ;
! Perform paragraph fill between the point and the mark EndMk (presumed
! to be the end of the paragraph).
;

simple procedure DoFill (reference integer Col; integer EndMk, LM, RM);
begin "DoFill"
  boolean
    WSFlg;
  integer
    Char,
    Point,
    SaveMk,
    WSI,
    WSP;
  define
    IsDotty (X)     = {(X = "." or X = ":" or X = "!" or X = "?")},
    IsInvisible (X) = {(X = ">" or X = ")" or X = "]" or X = """" or
                        X = "'")}; 


  WSI _ 1;
  WSP _ -1;
  clear(WSFlg);

  SaveMk _ B!AllocateMark;

  while ((Point _ B!GetP) < B!GetM(EndMk)) do
  begin
    if (C!IsGrayP) then
    begin
      CompressGS(FORWARDS, EndMk);

      if (Col > RM) then
      begin
        GenerateCRLF(1, LM-1);
        Col _ LM;
        clear(WSFlg);
      end
      else
      begin
        WSP _ Point;
        GenerateWS(WSI);
        incr(Col, WSI);
        set(WSFlg);
      end;
    end
    else
    begin
      Char _ B!GetC;
      WSI  _
          if (IsDotty(Char)) then
            2
          else if (IsInvisible(Char)) then
            WSI
          else
            1;

      MoveForwards;

      if (Col > RM and WSFlg) then
      begin
        integer
          Ofst;

        B!SetM(SaveMk, B!GetP);
        B!SetP(WSP);

        CompressGS(FORWARDS, EndMk);
        Ofst _ B!GetM(SaveMk) - WSP;
        GenerateCRLF(1, LM-1);
        B!SetP(B!GetM(SaveMk));
        Col _ LM + Ofst;
      end
      else
        if (Char = BS) then
          decr(Col)
        else
          incr(Col);
    end;
  end;

  B!DeallocateMark(SaveMk);
end "DoFill";


! ************************** End of COMSUB.SAI ***************************;
  9>