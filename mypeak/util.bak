Entry;
begin "Peak Utility Module"
  require "Ded.Def" source!file;
!! title Peak Utility Module ;
! *************************************************************************
*                                                                         *
*                         Utilities used commonly                         *
*                     throughout the Corpus Collosum                      *
*                                 of Peak                                 *
*                                                                         *
**************************************************************************;


!                      From the SAIL Runtime System
;

  external integer
    !skip!;                             ! Indicate a skip on UUO execution.


!                         From the Window Module
;
  external simple procedure
    W!Msg (string S);                   ! Put a message in the message
                                        ! line.
                                        ;

! ************************************************************************;
!! title Internal Data Structures ;
! ************************************************************************;
!
!  The following magic is used to build byte pointers.  The five numbers
!  point to the 0th, 1st, ... 4th 7 bit characters in a 36 bit word. ;

  preset!with
      hl('350700),
      hl('260700),
      hl('170700),
      hl('100700),
      hl('010700);

  own safe integer array
    BPLeft [0:4];

! ************************************************************************;
!! title Rtn Develop.Ptr ;
!  Create a bytepointer to the byte specified by the parameters Byte and
!  Loc.  If Ildb.Ptr is true, the pointer is constructed such that ILDB
!  will retrieve its value.  Otherwise, it is constructed so that LDB will
!  retrieve its value.
;

internal simple integer procedure Develop.Ptr (integer Loc, Byte;
    boolean Ildb.Ptr(false));
begin "Develop.Ptr"
  if (Ildb.Ptr) then
    decr(Byte);

  return(
      if (Byte < 0) then
        (hl('440700) lor Loc)
      else
        (BPLeft[Byte mod 5] lor (Loc + (Byte div 5)))
  );
end "Develop.Ptr";
!! title Rtn ffffp ;
! Find the first free file page in the specified file starting with the
! specified page number, and return its index.
;

ifcr Tops20 thenc
  internal simple integer procedure ffffp (integer Jfn, StartPage(0));
  begin "ffffp"
    integer
      Result;

    start!code
      hrl         1, StartPage;
      hrr         1, Jfn;
      ffffp;
      movem       1, Result;
    end;

    if (Result = -1) then
      return(-1)
    else
      return(rh(Result));
  end "ffffp";
endc
!! title Rtn ufpgs ;
! Update File Page(s), forcing them to disk right now.
;

ifcr Tops20 thenc
  internal simple procedure ufpgs (integer AC1, AC2);
  begin "ufpgs"
    start!code
      move	1, AC1;
      move	2, AC2;
      ufpgs;
        jfcl;
    end;
  end "ufpgs";
endc
!! title Rtn MoveBytes ;
! Move the specified number of bytes from the source to the target.
;
! <<  Who uses this?
;

internal simple procedure MoveBytes (integer SrcPtr, TgtPtr, BytCnt);
begin "MoveBytes"
  start!code
    protect!acs
      1, 2, 3;
    label
      NoWork,
      Loop;

      skipg       3, BytCnt;
      jrst        NoWork;

      move        2, SrcPtr;
      move        4, TgtPtr;
      ldb         1, 2;
      dpb         1, 4;
      sosg        3, BytCnt;
      jrst        NoWork;

    Loop:
      ildb        1, 2;
      idpb        1, 4;
      sojg        3, Loop;

    NoWork:
  end;
end "MoveBytes";
!! title Rtn DoBlt ;
! Perfrom a BLT for the folks.
;

simple procedure DoBlt (integer Src, Dst, DstEnd);
begin "DoBlt"
  start!code
    hrl     1, Src;
    hrr     1, Dst;
    blt     1, DstEnd;
  end;
end "DoBlt";
!! title Rtn Blt ;
! Move words of stuff from one place to the other in the most efficient
! manner possible.
!
!   SrcStart    - Starting address in memory of the source region.
!   DstStart    - Starting address in memory of the destination region.
!   SrcLen      - Length in words of the source region.
;

! <<  This routine is open to severe and subtle optimization.
;

internal simple procedure Blt (integer SrcStart, DstStart, SrcLen);
begin "Blt"
  integer
    I,
    J;

  if (SrcStart = DstStart) then
    return
  else if ((SrcStart > DstStart) or ((SrcStart + SrcLen) < DstStart)) then
  begin
    ! Source does not overlap the destination.
    ;

    arrblt(memory[DstStart], memory[SrcStart], SrcLen);
  end
  else
  begin
    ! Source overlaps destination. Work from the back forwards.
    ;

    J _ DstStart + SrcLen - 1;

    for I _ SrcStart + SrcLen - 1 step -1 until SrcStart do
    begin
      memory[J] _ memory[I];
      decr(J);
    end;
  end;
end "Blt";
!! title Rtn DecrBP ;
! Semi-magic routine to decrement a byte pointer.  Don't worry about it.
;

internal simple integer procedure DecrBP (integer BP);
begin "DecrBP"
  begin!code
    move        T1, BP;                 ! Get the pointer ;
    add         T1, [bit(7,5)];         ! Decrement the pointer ;
    skipge      T1;                     ! If the pointer went negative ;
      sub       T1, [xwd('430000,1)];   !  subtract the backup offset ;
    movem       T1, BP;                 ! Store the result ;
  end;

  return(BP);
end "DecrBP";
!! title Rtn DoErstr ;
! Get error info from Tops-20, and print it out.
;

! <<  This doesn't appear to work!
;

ifcr Tops20 thenc
  internal simple procedure DoErstr;
  begin "DoErstr"
    integer
      C,
      BP;
    own integer array
      Buf[0:29];
    string
      S;

    arrclr(Buf);
    S _ null;

    start!code
      hrroi       1, access(Buf[0]);
      hrloi       2, '400000;           ! last error in current process ;
      setz 3,;
      erstr;
      jfcl;
      jfcl;
    end;

    BP _ point(7, Buf[0], -1);

    while (C _ ildb(BP)) do
      appnd(S, C);

    W!Msg(S);
  end "DoErstr";
endc
!! title Rtn kequ ;
! Perform a case-independent string comparison and return the results.
! (This heavy-handedness is only necessary on Tops-20 since the SAIL
! compiler there is of more questionable pedigree than that of its
! Tymcom-X counterpart).
! (This code was ripped off from the Tymcom-X FAIL sources for SAIL.)
;

ifcr Tops20 thenc
  internal simple boolean procedure kequ (string Str1, Str2);
  begin "kequ"
    start!code
      define
        A    = 1,
        B    = 2,
        Lpsa = '13,
        Temp = '14,
        User = '15,
        Sp   = '16,
        P    = '17;
      label
        Kaschk,
        Klup,
        Notkeq,
        Keqret;


        hrrz	A, -3(Sp);	! Length of one string;
        exch	B, -1(Sp);	! Length of the other, save extra AC;
        caie	A, (B);		! Same length? (ignore lh of B);
         jrst	Notkeq;		! No, not equal strings;
        move	Lpsa, (Sp);	! One byte pointer;
        move	User, -2(Sp);	! The other byte pointer;
        jrst	klup;		! Go start the loop;

      Kaschk:
        trz	B, '40;		! Clear case bit and check for alphabetic;
        cail	B, "A";		! This makes it upper case when it was;
        caile	B, "Z";		!  either upper case or lower case;
        jrst	Notkeq;		! Not alphabetic - must be mismatch;

      Klup:
        sojl	A, Keqret;	! A will be -1 (=true) on loop termination;
        ildb	Temp, User;	! One character;
        ildb	B, Lpsa;	! Another;
        xor	Temp, B;	! Compare values;
        jumpe	Temp, Klup;	! Exactly equal;
        cain	Temp, '40;	! Differ only by case bit?;
        jrst	Kaschk;		! Yes - Go check more carefully;

      Notkeq:
        movei	A, 0;		! Character mismatch - Return false;

      Keqret:
        move	B, -1(Sp);	! Restore AC;
    end;
  end "kequ";
endc
!! title Rtn chsizef ;
! Return the size in characters of the file open on the specified
! channel.
;

ifcr Tops20 thenc
  internal simple integer procedure chsizef (integer Chan);
  begin "chsizef"
    integer
      OldPos,
      Siz;

    OldPos _ rchptr(Chan);
    schptr(Chan, -1);
    Siz    _ rchptr(Chan);
    schptr(Chan, OldPos);
    return(Siz);
  end "chsizef";
endc
!! title Rtn Warp ;
! Call Warp to create a file that may be loaded and executed by
! WARPLD.  Should be called immediately following initialization.
! Restrictions:  no files or interrupts may be open, no instantiation
! dependent code should precede the call to Warp.  Also, no shared or
! non-private pages may exist in the low segment.  Only one file may
! be mapped in the high segment.
;

ifcr WarpLoad thenc
  internal simple procedure Warp (string Filename);
  begin "Warp"
    own integer
      VP,
      E,
      AC12,
      AC16,
      AC17;
    own safe integer array
      X[0:1],
      Seg[0:7];
    own string
      SegName,
      SegERR;
    label
      RESTART;

    quick!code
      movem       '12, AC12;
      movem       '16, AC16;
      movem       '17, AC17;
      hrri        1, RESTART;
      hrli        1, '44;
      add         1, ['1000000];
      movem       1, '120;
    end;

    calli(xwd(-8, location(Seg[0] _ '400)), -'103);

    if (Seg[0] _ !skip!) then
    begin
      SegName _ cv6str(Seg[3]) &  xwdstr(Seg[6]);
      SegERR  _ "?Warp: GETSEG failure for " &  SegName &  0;
      print("Warp: high segment from ", SegName, crlf);
    end;

    open(0, "DSK", '14, 0, 4, 0, 0, E);
    enter(0, Filename, E);
    X[1] _ -1;

    if (E) then
      usererr(E, 2, "?Warp: unable to enter file " & Filename & ": ", "X");

    for VP_ 0 upto '777 do
    begin
      E _ chnior(0, X[0] _ xwd(1, VP), '47);

      if (!skip!) then
        calli(2*bit(7)+bit(17)+X[0], -'70)
      else
        done;
    end;

    release(0);
    print("Warp: ", VP, " pages written to ", Filename, crlf);
    return;

    RESTART:
    quick!code
      external integer
        RPGSW,
        INIACS;
      label
        NOSEG;

        jump      RPGSW;
        jump      INIACS;
        move      '12, AC12;
        move      '16, AC16;
        move      '17, AC17;
        skipn     Seg[0];
         jrst     NOSEG;
        movei     1, Seg[2];
        calli     1, '40;               ! GETSEG;
          ttcall  '17, SegERR;          ! OUTPTR;

      NOSEG:
    end;
  end "Warp";
endc
end "Peak Utility Module";


! **************************  End of Util.Sai  ************************** ;
 