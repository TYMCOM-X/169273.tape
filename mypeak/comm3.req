!! title COMM3 - Macro and Key Binding routines ;
! *************************************************************************
*									  *
*				   COMM3				  *
*		      Macro and Key Binding routines			  *
*									  *
***************************************************************************


	   This file is required as a source!file in COMAND.SAI.


**************************************************************************;
!! title Rtn C!AssignVar ;
! Routine to assign to an "environment variable" the value of the
!  argument.  These variables live in the same symbol table as the
!  other symbolic stuff, but are differentiated by having a leading
!  asterisks.  Such a hack!, but it saves having to have special
!  bits on in the symbol table. ;

simple procedure C!AssignVar;
  begin "var"
    integer Addr, LastVal;

    if ( not C!ReadString( "Variable: ", ESC, CR )) then
      begin
	W!Msg( "Aborted" );
	C!ArgV := 0;
	return;
      end;

    Addr := SymVarAddr( C!String );
    if ( Addr <= 0 ) then
      Case ( -Addr ) of
        begin
	  [0] W!Msg( "Variable: "& C!String &" is unknown" );
	  [1] W!Msg( "Variable: "& C!String &" is ambigious" )
        end
    else
      begin
	LastVal := C!ArgV;
	memory[ Addr, integer ] swap LastVal;
	W!Msg( "Variable: " & SymVarName( Addr ) & " is " & cvs( C!ArgV ) &
		", was " & cvs( LastVal ) );
      end;

    C!ArgV := 0;

  end "var";
!! title Rtn C!QueryVar ;
! Routine to query the value of an environment variable ;

simple procedure C!QueryVar;
  begin "query"
    integer Addr;

    C!ArgV := 0;

    if ( not  C!ReadString( "Variable: ", CR, ESC )) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    Addr := SymVarAddr( C!String );
    if ( Addr <= 0 ) then
      Case ( -Addr ) of
        begin
	  [0] W!Msg( "Variable: "& C!String &" is unknown" );
	  [1] W!Msg( "Variable: "& C!String &" is ambigious" )
        end
    else
      W!Msg( "Variable: " & SymVarName( Addr ) &
	     " is " & cvs( memory[ Addr, integer ] ) );

  end "query";
!! title Rtn C!NewNameMacro ;
! Routine to create and insert a macro-record on the macro name stack. ;
!  This routine is necessary because SAIL is "very" "very" picky
!  about where you can create record!pointer temps while calling
!  routines, doing arithmetic, etc.  You can't do these kind of
!  things in a SIMPLE routine.
;

record!pointer (Macro) procedure C!NewNameMacro;
  begin "new name macro"
    record!pointer (Macro) This;

      !
      !  Head: < C!MacroNames >
      !    +----------------+----------------+
      !    |   Previous: 0  |   Next: List   |
      !    +----------------+----------------+
      !    |        0       |       New      |
      !    +----------------+----------------+
      !
      !           New: < This _ New!Record( Macro ) >
      !            +----------------+----------------+
      !            |    Previous:   |      Next:     |
      !            +----------------+----------------+
      !            |      Head      |      List      |
      !            +----------------+----------------+
      !
      !                 List: < Macro:Next[ C!MacroNames ] >
      !                    +----------------+----------------+
      !                    | Previous: Head |     Next: 0    |
      !                    +----------------+----------------+
      !                    |       New      |        0       |
      !                    +----------------+----------------+
      ;

    This_ new!record( Macro );
    Macro:Next[ This ]_ Macro:Next[ C!MacroNames ];
    Macro:Last[ This ]_ Macro:Last[ Macro:Next[ C!MacroNames ] ];
    Macro:Last[ Macro:Next[ C!MacroNames ] ]_ This;
    Macro:Next[ C!MacroNames ]_ This;

    Macro:Id[ This ]_ xwd( C!MacroPointer, C!PointerToInteger( This ) );

      !  Always insert "new" name bindings at the head of the list.
      !  This way, new bindings replace old ones, and un-binding
      !  will restore the most previous binding.  SAIL will take
      !  care of garbage collecting strings and record space.
      ;

    return( This );

  end "new name macro";

!! title Rtn C!NewStackMacro ;
! Routine to create and insert a macro-record on the macro key stack. ;
!  This routine is necessary because SAIL is "very" "very" picky
!  about where you can create record!pointer temps while calling
!  routines, doing arithmetic, etc.  You can't do these kind of
!  things in a SIMPLE routine.
;

record!pointer (Macro) procedure C!NewStackMacro;
  begin "new stack macro"
    record!pointer (Macro) This;

      !
      !  Head: < C!MacroStack >
      !    +----------------+----------------+
      !    |   Previous: 0  |   Next: List   |
      !    +----------------+----------------+
      !    |        0       |       New      |
      !    +----------------+----------------+
      !
      !           New: < This _ New!Record( Macro ) >
      !            +----------------+----------------+
      !            |    Previous:   |      Next:     |
      !            +----------------+----------------+
      !            |      Head      |      List      |
      !            +----------------+----------------+
      !
      !                 List: < Macro:Next[ C!MacroStack ] >
      !                    +----------------+----------------+
      !                    | Previous: Head |     Next: 0    |
      !                    +----------------+----------------+
      !                    |       New      |        0       |
      !                    +----------------+----------------+
      ;

    This_ new!record( Macro );
    Macro:Next[ This ]_ Macro:Next[ C!MacroStack ];
    Macro:Last[ This ]_ Macro:Last[ Macro:Next[ C!MacroStack ] ];
    Macro:Last[ Macro:Next[ C!MacroStack ] ]_ This;
    Macro:Next[ C!MacroStack ]_ This;

    Macro:Id[ This ]_ xwd( C!MacroPointer, C!PointerToInteger( This ) );

      !  Always insert "new" stack macros at the head of the list.
      !  This way, new key bindings replace old ones, and un-binding
      !  the keys will restore the most previous binding.  SAIL will
      !  take care of garbage collecting strings and record space.
      ;

    return( This );

  end "new stack macro";

!! title Rtn C!ReBind ;
! Routine to bind a key to a function symbolically. ;
!  Prompt for the function and the key.  Some keys may not be
!  rebound, although this is not obvious from this routine.
!  The keys which cannot be re-bound are hardcoded elsewhere.
;

simple procedure C!ReBind;
  begin "rebind"
    own integer Addr, Key;
    own record!pointer (Macro) Ptr, Copy;
    own string Text;

    C!ArgV_ 0;

    Text_ "Bind Function: ";
    if ( not C!ReadString( Text, ESC, CR )) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    Addr_ SymCmdAddr( C!String );
    if ( Addr <= 0 ) then
      Case ( -Addr ) of
        begin
	  [0] W!Msg( Text & C!String &" is unknown" );
	  [1] W!Msg( Text & C!String &" is ambigious" )
        end
    else
      begin "assign to key"

	set(W!MsgF);
	W!Msg( Text_ Text & SymCmdName( Addr ) &"$ To Key: " );
	Key_ C!GetCMD;
	clear( W!MsgF );

	if ( lh( Addr ) = C!MacroPointer ) then
	begin "copy macro record"

	  Ptr_ C!NewStackMacro;

	    !  Create a macro record for this key binding.
	    ;

	  Copy_ C!IntegerToPointer( Addr );
	  Macro:Name[ Ptr ]_ Macro:Name[ Copy ];
	  Macro:Body[ Ptr ]_ Macro:Body[ Copy ];

	    !  Copy the pertinent information from the "named" macro
	    !  into the newly created macro-record on the stack.
	    ;

	  Macro:Key[ Ptr ]_ C!Dispatch[ Key ];
	  Addr_ Macro:Id[ Ptr ];

	    !  Remember the old dispatch table value for this key.
	    !  Also make sure Addr is updated for the Stack Macro
	    !  instead of the "named" Macro.
	    ;

	end "copy macro record";

        C!Dispatch[ Key ]_ Addr;
	W!Msg( Text & CvCmdChr( Key ) &" [Ok]" );

      end "assign to key";

  end "rebind";
!! title Rtn C!QueryKey ;
! Query a key binding ;

simple procedure C!QueryKey;
  begin "key"
    string F;
    integer Cmd, Key;
    own record!pointer (Macro) Ptr;

    W!Msg( "Key:" );
    set( W!MsgF );
    Key_ C!GetCMD;
    clear( W!MsgF );

    F := SymCmdName( Cmd_ C!Dispatch[ Key ] );
    if ( not F ) then
      W!Msg( "Key "& CvCmdChr( Key ) &" isn't bound" )
    else
      if ( lh( Cmd ) neq C!MacroPointer ) then
	W!Msg( "Key "& CvCmdChr( Key ) &" is: "& F )
      else
	W!Msg( "Key "& CvCmdChr( Key ) &" is: "& F &
		" "& CvCmdStr(Macro:Body[C!IntegerToPointer(Cmd)]) );

    C!ArgV_ 0;

  end "key";
!! title Rtn C!MacroDispatch( MacroPointer ) ;
! Routine to execute the macro body contained in the specified record. ;
!  This routine is called by C!SymDispatch and by Dispatch whenever a
!  valid MacroPointer is found.  Here, we "ASSUME" the checking work
!  has already been completed by the appropriate routines.
!  Note however, that this routine keeps track of the calling depth
!  and attempts to recover gracefully when the user goes into a loop.
;

recursive procedure C!MacroDispatch( Integer MacroPointer );
  begin "macro dispatch"
    integer OldLength, OurArgV, Cmd;
    record!pointer (Macro) Ptr;

    
    if ( C!MacroDepth < MaxMacroDepth ) then
      incr( C!MacroDepth )

    else
      begin "depth overflow"

	set( C!MAbort );
	W!Msg( "Macro depth overflow - macro aborted." );
	T!Bell;
	return;

      end "depth overflow";

    OurArgV_ C!ArgV;
    C!ArgV_ 0;

    if ( OurArgV leq 0 ) then OurArgV_ 1;

    clear( C!MAbort );

    Ptr_ C!IntegerToPointer( MacroPointer );

    while ( OurArgV ) do
      begin "exec"

	OldLength_ length( C!Macro );
	C!Macro_ Macro:Body[ Ptr ] & C!Macro;

	while ( length( C!Macro ) > OldLength ) do
	  begin "one time"

	    Dispatch( Cmd_ C!GetCMD );

	    if ( C!MAbort ) then
	      begin
		C!Macro_ C!Macro[ (Inf-OldLength+1) to Inf ];
		done "exec";
	      end;
	  end "one time";

	decr( OurArgV );

      end "exec";

    decr( C!MacroDepth );

    C!ArgV_ 0;

  end "macro dispatch";

!! title Rtn C!SymDispatch ;
! Dispatch a command symbolically by looking its address up in the
!  symbol table and pushj'ing off to it.  Note that if the dispatch
!  is successful the function dispatched to is responsible for C!ArgV ;

simple procedure C!SymDispatch;
  begin "dispatch"
    integer Addr;

    if ( not C!ReadString( "Execute Function: ", ESC, CR )) then
      begin
	W!Msg( "Aborted" );
	C!ArgV_ 0;
	return;
      end;

    Addr := SymCmdAddr( C!String );
    if ( Addr <= 0 ) then
      begin
        Case ( -Addr ) of
          begin
	    [0] W!Msg( "Execute Function: "& C!String &" is unknown" );
	    [1] W!Msg( "Execute Function: "& C!String &" is ambigious" )
          end;

	set( C!MAbort );
	C!ArgV_ 0;
	return;

      end;

      W!Msg( "Execute Function: "& SymCmdName( Addr ) &"$" );
      W!Disp( True );

      if ( lh( Addr ) = C!MacroPointer ) then

	C!MacroDispatch( Addr )

      else

	begin!code
	  pushj p,@Addr;	! go do it! ;
	end;

  end "dispatch";
!! title Rtn C!MacroByExample ;
! Turn on 'macro by definition' ;

simple procedure C!MacroByExample;
  begin "by example"

    C!ArgV := 0;
    C!DefiningMacro := true;
    C!LastMacro := NULL;
    W!Msg( "Defining Macro by example.  ^G to end definition." );

  end "by example";
!! title Rtn C!ReadMacro ;
! Read a delimited macro.  Delimiters allow just about any characters to
!  be used in the macro body (including the delimiter itself, if preceeded
!  by a ^Q.  For this reason, ^Q MAY NOT be used as a delimiter.  ;

procedure C!ReadMacro;
  begin "macro"
    string Prompt;
    integer C;

    C!ArgV := 0;

    Prompt := "Delimited Macro";
    W!Msg( Prompt );

    C := C!GetC;
    Prompt := Prompt & " <" & C & ">: ";

    if ( not C!ReadLitString( Prompt, C, C )) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    C!LastMacro := C!String;
    W!Msg( NULL );

  end "macro";
!! title Rtn C!BindMacro ;
! Routine to bind the last macro defined to a key. ;

simple procedure C!BindMacro;
  begin "bind macro"
    own integer Key;
    own record!pointer (Macro) Ptr;

    C!ArgV_ 0;

    if ( length( C!LastMacro ) = 0 ) then
      begin
	W!Msg( "Keyboard macro empty." );
	return;
      end;

    W!Msg( "Bind Macro to Key: " );
    set( W!MsgF );
    Key_ C!GetCMD;
    clear( W!MsgF );

    W!Msg( "Bind Macro to Key: "& CvCmdChr( Key ) &"[ok]" );

    Ptr_ C!NewStackMacro;

      !  Create a macro record for this key binding.
      ;

    Macro:Name[ Ptr ]_ Null;
    Macro:Body[ Ptr ]_ C!LastMacro;

      !  Copy the pertinent information from the "named" macro
      !  into the newly created macro-record on the stack.
      ;

    Macro:Key[ Ptr ]_ C!Dispatch[ Key ];
    C!Dispatch[ Key ]_ Macro:Id[ Ptr ];

      !  Remember the old dispatch table value for this key
      !  and reset the entry for macro execution.
      ;

    W!Msg( NULL );

    if ( B!Mode[ inf for 1 ] neq "+" ) then
      begin
	B!Mode_ B!Mode & "+";
	W!NewS;
      end;
    return;

  end "bind macro";

!! title Rtn C!UnBindKey ;
! Routine to unbind the most recent definition of a key. ;

simple procedure C!UnBindKey;
  begin "unbind key"
    own integer Key, Cmd;
    own record!pointer ( Macro ) This, Last, Next;

    C!ArgV_ 0;

    W!Msg( "Key: " );
    set( W!MsgF );
    Cmd_ C!Dispatch[ Key_ C!GetCMD ];
    clear( W!MsgF );

    if ( lh( Cmd ) = C!MacroPointer ) then
    begin "look for entry"

      This_ C!IntegerToPointer( Cmd );
      C!Dispatch[ Key ]_ Macro:Key[ This ];

      Last_ Macro:Last[ This ];
      Next_ Macro:Next[ This ];
      Macro:Next[ Last ]_ Next;
      Macro:Last[ Next ]_ Last;

      W!Msg( "Key: "& CVCmdChr( Key ) &" [ok]" );

	!  Simply reset the key binding to the "remembered" key
	!  binding and the remove the record from the linked list.
	;

    end "look for entry"
    else
      begin "can't unbind function"

	W!Msg( "Key: "& CVCmdChr( Key ) &
		" cannot be un-bound from a function." );
	set( C!MAbort );
	T!Bell;

      end "can't unbind function";

    return;

  end "unbind key";

!! title Rtn C!NameMacro ;
! Routine to bind a function name to the last keyboard macro defined. ;
!  The given name and a pointer to the current macro text is placed
!  on a record structure similar to the macro-key binding structure.
!  These macro can be later executed via the M-X "function-name" call
!  or bound to keys using "Bind Function".
;

simple procedure C!NameMacro;
  begin "name macro"
    own record!pointer (Macro) Ptr;

    C!ArgV_ 0;

    if ( length( C!LastMacro ) = 0 ) then
      begin
	W!Msg( "Keyboard macro empty." );
	return;
      end;

    if ( not C!ReadString( "Name for Macro: ", ESC, CR )) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    Ptr_ C!NewNameMacro;

      !  Create a macro record for this named macrov.
      ;

    Macro:Name[ Ptr ]_ C!String;
    Macro:Body[ Ptr ]_ C!LastMacro;
    W!Msg( "Macro named: """& C!String &""" [ok]" );

    if ( B!Mode[ inf for 1 ] neq "+" ) then
      begin
	B!Mode_ B!Mode & "+";
	W!NewS;
      end;
    return;

  end "name macro";

!! title Rtn C!UnNameMacro ;
! Routine to forget the most recent definition of a "named" macro. ;

simple procedure C!UnNameMacro;
  begin "unname macro"
    own record!pointer (Macro) This, Next, Last;
    own integer Addr;
    own string Text;

    C!ArgV_ 0;

    Text_ "Macro Name: ";
    if ( not C!ReadString( Text, ESC, CR )) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    Addr_ SymCmdAddr( C!String );

    if (( Addr > 0 ) and ( lh( Addr ) neq C!MacroPointer )) then
      Addr_ 0;

    if ( Addr leq 0 ) then
      begin "unknown or ambigious"

	Case ( -Addr ) of
	  begin
	    [0] W!Msg( Text & C!String &" is unknown" );
	    [1] W!Msg( Text & C!String &" is ambigious" )
	  end;

	  set( C!MAbort );
	  T!Bell;

      end "unknown or ambigious"
    else
      begin "delete macro entry"

	W!Msg( "Macro: """& SymCmdName( Addr ) &""" removed [ok]" );

	This_ C!IntegerToPointer( Addr );
	Last_ Macro:Last[ This ];
	Next_ Macro:Next[ This ];
	Macro:Next[ Last ]_ Next;
	Macro:Last[ Next ]_ Last;

      end "delete macro entry";

    return;

  end "unname macro";

!! title Rtn C!ExecLastMacro ;
! Routine to execute the last keyboard macro ;

recursive procedure C!ExecLastMacro;
  begin "execute macro"
    integer SaveLength, OurArgV, Cmd;

    OurArgV_ C!ArgV;
    C!ArgV_ 0;
    if ( OurArgV leq 0 ) then
      OurArgV_ 1;

    if ( length( C!LastMacro ) = 0 ) then
      begin
	W!Msg( "Keyboard macro empty." );
	set( C!MAbort );
	return;
      end;

    SaveLength := length( C!Macro );

    clear( C!MAbort );

    while ( OurArgV > 0 ) do
      begin "exec macro"

	C!Macro := C!LastMacro & C!Macro;

	while ( length( C!Macro ) > SaveLength ) do
	  begin

	    Dispatch( Cmd_ C!GetCMD );

	    if ( C!MAbort ) then
	      begin
		C!Macro_ C!Macro[ (Inf - SaveLength + 1) to Inf ];
		done "exec macro";
	      end;

	  end;

	decr( OurArgV );

      end "exec macro";

    C!ArgV_ 0;

  end "execute macro";
!! title Rtn C!Comment ;
! Implement comments by ignoring all characters seen until one that matches
!  the low order seven bits of the command that invokes us. ;

simple procedure C!Comment;
  begin
    own integer Comment!Char, C;
    C!ArgV := 0;
    Comment!Char := C!Cmd land '177;
    W!Msg( "Defining comment.  End with " & Comment!Char );

    while ( ( C := C!GetC ) neq Comment!Char ) do
      if ( C!Dispatch[C] = location( C!Quote ) ) then
	C!GetC
      else if ( C!Dispatch[C] = location( C!Err ) ) then
      begin
	C!Err;
	done;
      end;

    W!Msg( NULL );
  end;
!! title Rtn GetChar ;
! Routines to twiddle things in C!Tab ;

integer procedure GetChar( string What );
  beget char"
    integer C;

    W!MsgF := true;
    W!Msg( "Char: " );
    C := C!GetC;
    W!MsgF := false;
    W!Msg( "Char: "& CvCmdChr( C ) &" "& What );
    return( C );

  end "get char";
!! title Rtn C!SetNum ;
procedure C!SetNum;
  begin
    integer C;
    C := GetChar( "is in <number>" );
    C!Tab[ C ] := C!Tab[ C ] lor IsNum;
    C!ArgV := 0;
  end;
!! title Rtn C!ClearNum ;
procedure C!ClearNum;
  begin
    integer C;
    C := GetChar( "is not in <number>" );
    C!Tab[ C ] := C!Tab[ C ] xor IsNum;
    C!ArgV := 0;
  end;
!! title Rtn C!SetToken ;
procedure C!SetToken;
  begin
    integer C;
    C := GetChar( "is in <token>" );
    C!Tab[ C ] := C!Tab[ C ] lor IsToken;
    C!ArgV := 0;
  end;
!! title Rtn C!ClearToken ;
procedure C!ClearToken;
  begin
    integer C;
    C := GetChar( "is not in <token>" );
    C!Tab[ C ] := C!Tab[ C ] xor IsToken;
    C!ArgV := 0;
  end;
!! title Rtn C!SetDelim ;
procedure C!SetDelim;
  begin
    integer C;
    C := GetChar( "is in <delimeter>" );
    C!Tab[ C ] := C!Tab[ C ] lor IsDelim;
    C!ArgV := 0;
  end;
!! title Rtn C!ClearDelim ;
procedure C!ClearDelim;
  begin
    integer C;
    C := GetChar( "is not in <delimeter>" );
    C!Tab[ C ] := C!Tab[ C ] xor IsDelim;
    C!ArgV := 0;
  end;
!! title Rtn C!SetSpecial ;
procedure C!SetSpecial;
  begin
    integer C;
    C := GetChar( "is in <special>" );
    C!Tab[ C ] := C!Tab[ C ] lor IsSpecial;
    C!ArgV := 0;
  end;
!! title Rtn C!ClearSpecial ;
procedure C!ClearSpecial;
  begin
    integer C;
    C := GetChar( "is not in <special>" );
    C!Tab[ C ] := C!Tab[ C ] xor IsSpecial;
    C!ArgV := 0;
  end;
!! title Rtn C!EnvironStr ;
! Routine to implement 'environment' strings. ;
! ** hack ** hack ** hack ** hack ** ;

simple procedure C!EnvironStr;
  begin "e var"
    string S;

    C!ArgV := 0;

    if ( not ( C!ReadString( "I-Str: ", ESC, CR ))) then
      begin
	W!Msg( "Aborted" );
	return;
      end;

    if ( kequ( C!String, "USERNAME" )) then
      begin
	S := C!UserName;
      end
    else if ( kequ( C!String, "DATE" )) then
      S := DateStr
    else if ( kequ( C!String, "TIME" )) then
      S := TimeStr
    else
      begin
	W!Msg( "I-Str: " & C!String & " is unknown" );
	T!Bell;
	return;
      end;

    while ( length( S )) do B!Insert( lop( S ));

    W!Msg( NULL );

  end "e var";
!! title Rtn C!MsgText ;
! Routine to put a string into the message line ;

procedure C!MsgText;
  begin "msg"
    string S; integer C, Delim;

    Delim := C!Cmd land '177;
    W!Msg( "Defining Text Message.  End with " & Delim );

    S := NULL;

    while ( ( C := C!GetC ) neq Delim ) do
    begin
      if ( C!Dispatch[C] = location( C!Err ) ) then
      begin
	S := NULL;
	C!Err;
	done;
      end
      else
      begin
	if ( C!Dispatch[C] = location( C!Quote ) ) then
	  S := S & C!GetC
	else
	  S := S & C;
      end;
    end;

    W!Msg( S );
    C!ArgV := 0;

  end "msg";
!! title Rtn C!DateTimeMsg ;
! Routine to put the date and time into the message line ;

procedure C!DateTimeMsg;
  begin
    W!Msg( DateStr & "  " & TimeStr );
    C!ArgV := 0;
  end;


! ************************** End of COMM3.REQ ****************************;
& B*