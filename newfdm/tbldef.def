
require "  Definitions for table building  " message;

!  Examples:
!
!    ##BitList( [ Name, Text, Info, Flag, Proc ] )
!    ##BitList( [ Switch, Storage, Proc, Table, Default, Flags ] )
!    ##BitList( [ Nam, Hlp, Inf, Flg, Alt,,,,,,, Help, Quit ] )
;

Define ##BitList( BitNames ) = {
    Redefine #T##Args = { ( BitNames ) }, #T##Len = 1, ##F#ALL = 0;
    ForLC #T##Arg _ #T##Args
     DoC
      { IfCR Length(CvPS(#T##Arg))
	 ThenC
	    Define ##F##}&{#T##Arg = #T##Len;
	    Redefine ##F#ALL = ##F#ALL lor #T##Len;
	 EndC
	Redefine #T##Len = #T##Len lsh 1;
      }
     EndC

};


! Hack!!!! for now.
;

Define CvPRC( Proc ) = {
    Forward procedure C.}&{Proc;
    C.}&{Proc
};


Define	#T##Entry   = 0
,	#T##String  = 1
,	#T##Integer = 2
,	#T##Boolean = 3
,	#T##Array   = 4
,	#T##Proc    = 5
;

Define ##ArgList( Nam, Typ, Bit ) = {

  IfCR Length(CvPS(Typ)) = 0
   ThenC AssignC Typ = "String";
   EndC
  Redefine ##A##}&{Nam = #T##}&{Typ
    IfCR Length(CvPS(Bit)) ThenC , ##F##}&{Nam = Bit EndC ;

};

!  Default definitions -- note, no bit positions specified.
!  No spaces after "typ" or else it's part of the arg.
;


##ArgList( Name,  Entry)
##ArgList( Point, Integer)
##ArgList( Text,  String)
##ArgList( Info,  String)
##ArgList( Array, Array)
##ArgList( Flag,  Integer)
##ArgList( Proc,  Proc)


Define ##Tables( DataTables, TMacro, Prefix, Bits, Names ) = {

    require "( "& CvPS(Names) &" )"&Crlf message;
    Redefine #T##Args = { (Names) };

    ForLC #T##Arg _ #T##Args
     DoC
      {
	require crlf&"    ["&CvPS(#T##Arg)&"] " message;
	IfCR ( Bits land ##F##}&{#T##Arg )
	 ThenC
	    Redefine Prefix}&{#Length = 0;
	    Redefine #T##Type = ##A##}&{#T##Arg;

	    Redefine TMacro( Names ) = {

		IfCR Prefix}&{#Length > 0
		 ThenC
		    CaseC #T##Type OfC
			{ , }, { , }, { , },
			{ , }, { ; }, { ; }
		     EndC 
		 EndC

		IfCR ( #T##Type = 0 ) ThenC CvPS(}&{#T##Arg}&{) EndC
		IfCR ( #T##Type = 1 ) ThenC CvPSV(}&{#T##Arg}&{,Null) EndC
		IfCR ( #T##Type = 2 ) ThenC CvPSV(}&{#T##Arg}&{,0) EndC
		IfCR ( #T##Type = 3 ) ThenC CvPSV(}&{#T##Arg}&{,False) EndC
		IfCR ( #T##Type = 4 ) ThenC }&{#T##Arg}&{ EndC
		IfCR ( #T##Type = 5 )
		 ThenC
		    IfCR ( Length(CvPS(}&{#T##Arg}&{)) )
		     ThenC
			IfCR ( Declaration( }&{#T##Arg}&{ ) = 0 )
			 ThenC
			    Forward simple procedure }&{#T##Arg}&{
			 EndC
		     ElseC
			require crlf&"--missing procedure name-- (#"&
				cvs(Prefix}&{#Length)&")"&crlf message;
		     EndC
		 EndC

		Redefine Prefix}&{#Length = Prefix}&{#Length + 1;
	    };


	    IfCR ( ( #T##Type = 0 ) or ( #T##Type = 1 ) )
	     ThenC
		require " String  array " message;
		Preset!with
	     EndC
	    IfCR ( #T##Type = 2 )
	     ThenC
		require " Integer array " message;
		Preset!with
	     EndC
	    IfCR ( #T##Type = 3 )
	     ThenC
		require " Boolean array " message;
		Preset!with
	     EndC
	    IfCR ( #T##Type = 4 )
	     ThenC
		require " Start_code    " message;
		Internal simple procedure Prefix}&{#T##Arg;
		Start!code
	     EndC
	    IfCR ( #T##Type = 5 )
	     ThenC
		require " Forward procedures " message;
		DataTables ;
		Redefine TMacro( Names ) = {CvPSV(}&{#T##Arg}&{,0);};
		require " Start_code    " message;
		Internal simple procedure Prefix}&{#T##Arg;
		Start!code
	     EndC

	    DataTables ;


	    IfCR ( ( #T##Type = 0 ) or ( #T##Type = 1 ) )
	     ThenC
		Own Safe String  Array Prefix}&{#T##Arg[ 0:Prefix}&{#Length ];
	     EndC
	    IfCR ( #T##Type = 2 )
	     ThenC
		Own Safe Integer Array Prefix}&{#T##Arg[ 0:Prefix}&{#Length ];
	     EndC
	    IfCR ( #T##Type = 3 )
	     ThenC
		Own Safe Boolean Array Prefix}&{#T##Arg[ 0:Prefix}&{#Length ];
	     EndC
	    IfCR ( ( #T##Type = 4 ) or ( #T##Type = 5 ) )
	     ThenC
		End;
	     EndC

	 EndC
      }
     EndC

};


