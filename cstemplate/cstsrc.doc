
Command Scanner Template					Page 1
Introduction

  Introduction

      The command scanner template was put together in pieces taken
    from various other development projects.  It was noticed that a
    small set of basic command line scanning and  table  comparison
    functions were needed in each of the separate projects  and  an
    attempt was made to make it easier to  install  these  standard
    functions.

      The template package consists of:

	o  CSTSRC.SAI	The skeleton template source which needs
			one line to be edited by the application.

	o  CMDTBL.DEF	The command macro storage definition file
			which defines the command scanning macros
			for the command tables.

	o  TBLDEF.DEF	The "general" table storage macros called
			by the CMDTBL.DEF module.

	o  CMDSCN.REQ	The library scanning routines for reading
			the command line and searching the tables
			of commands and command parameters.  Also
			see CMDSCN.DOC and CMDSCN.SAI to  rebuild
			the library file CMDSCN.REL.

	o  MYSAIL.DEF	Some standard definitions

	o  BRKINI.REQ	Break table init module.   See BRKINI.SAI
			to rebuild the library file BRKINI.REL.

      The following modules are to be created by the user application
    and will be described in more detail later:

	o  Program Definition File
			This file contains a set of definitions which
			are used by the skeleton module.

	o  Command Definition File
			This file contains the necessary information
			to build all of the command tables.

	o  Command Utility Require File  (Optional)
			This file contains any GLOBAL variable storage
			and a request for a library of utility routines
			used by the command routines defined later.

	o  Command Utility Routines File (Optonal)
			This file contains the utility routines above
			as a separately compiled library.

	o  Command Routines File
			This file contains the actual routines to be
			executed by the command scanner skeleton when
			each of the individual commands are found.

Command Scanner Template					Page 2
Cookbook Usage
			
  Cookbook Usage

      In order to use the package, the user should do the following
    list of things.  The order is unimportant, as long as each and
    every item is completed.

    ****
    **** Edit the file CSTSRC.SAI and replace the line which says:
    ****
	require "ProgramDefinitionFile" source!file;

    with one which requires the appropriate definition file for the
    specific application.  It is then a good idea to copy the newly
    edited file and give it the name of your application.  E.G. For
    a directory managment program, you might use DMPROG.SAI as  the
    file name.

    ****
    **** Create the program definition file, which contains a list
    **** of definitions needed by the skeleton module.   This is a
    good place to define symbols and macro definitions which  will
    be needed by the other sections of your program. The following
    strings need to be defined here.  The "{}" braces are used for
    macro definitions in lieu of double quotes.

	What			Data Type
	--------------------	--------------------
	!VER			Integer - Major version number
	!EDIT			Integer - Edit level
	!VERSION		Integer - xwd( !VER, !EDIT )

	ProgramName		String  - Name for Banner
	ProgramPrompt		String  - Prompt string
	ProgramVersion		String  - Version as text
	ProgramBanner		String  - Banner to print

	CommandDefinitions	String  - command definitions file
	CommandRoutines		String  - command routines file
	CommandUtilities	String  - command utilities req file


      Refer to the examples at the end of this document for further
    information and an example definition file.


Command Scanner Template					Page 3
Cookbook Usage

    ****
    **** Create the commands definition file.  This file contains
    **** any command bit definitions to be kept in the flags area
    and the full definition of each  command  inside  the $$C$ALL
    macro definition.  Each command is  defined using the $$C$CMD
    macro.

	Define CMD$Inv = '1, CMD$Oper = '2;	! command bits ;
	Define $$C$ALL = {
	    $$C$CMD( ... )			! each command ;
		...
	};

	Define $$C$HELP = {
	    $$C$CMD( HELP, "customized help text", ... )
	};

	$$C$DATA( Names, HelpTexts, InfoTexts, Flags )

    Notes:  $$C$HELP need only specify the command-name, help-text
    and info-text portions of the $$C$CMD macro.  The HELP command
    is kept separate from the other commands because there already
    exists an  internal HELP command  formatted  as in CMDSCN.DEF.
    If you do not specify $$C$HELP then the default will  be used.
    The format of the $$C$CMD macro is as follows:

    $$C$CMD( command-name, help-text, info-text, flag-bits, proc )

    for example,

	$$C$$CMD( Help, [" or ?   Retype this message"], ["
		    To display a list of brief one-line messages
		    about all of the commands, type:

			HELP <return>

		    To display any in-depth information provided
		    by the product developer about any specific
		    command, type:

			HELP command-name <return>

		    Note:  ? may be used in place of HELP."],
		Cmd$Oper lor Cmd$Inv, C.HELPME )

      There are two things to notice here.  First, there was not a
      semicolon (";") at the end of the definition.  Second, there
      were square brackets ("[]") around each textual  argument to
      the $$C$CMD macro.  The brackets indicate a single parameter
      to the macro, regardless of the string length or the  number
      of commas found in the text.  The brackets may be omitted on
      short texts with no imbedded commas.


Command Scanner Template					Page 4
Cookbook Usage

    **** [OPTIONAL]
    **** Create the utility require file which is to be  included as
    **** part of the skeleton module.  This module  contains  all of
    the external declarations for variables and procedures which are
    to be referenced by the command procedures. There should also be
    a require load!module or a require library statement to  request
    the loading of the appropriate routines.


    **** [OPTIONAL]
    **** Create a separate module, xxxxxx.SAI which  contains all of
    **** the routines, variables and procedures that are  referenced
    from the command procedures.  This module is to be compiled as a
    separately-compiled file.  (If more information is needed,  then
    see the SAIL manual for details).

    ****
    **** Create the command routines file which  contains the set of
    **** procedures to execute each of the commands  defined in  the
    the command definition file.  If the "proc" entry was omitted in
    the $$C$CMD macro, then the procedure name to execute any  given
    command is "C.command".  For example, the command EXIT would use
    a procedure named C.EXIT unless another name were specified  for
    the "proc" entry.  (i.e. as in the example definition for a HELP
    command given above, the procedure name is C.HELPME will work.

      If a procedure is not written for each command,  then the SAIL
    compiler will flag missing procedure names as errors and  abort.
    For testing purposes, the dummy procedure name, NOTIMP,  can  be
    used which which simply typed a message stating that the command
    is not implemented yet.  NOTE: THIS PROCEDURE IS ALREADY DEFINED
    FOR YOU, DO NOT REDEFINE IT!!!



  Conclusion

      Now, all that is needed is a proper compilation and linkage of
    the skeleton module with all of the pieces mentioned above.  The
    attached APPENDIX shows a working example of each of the modules
    described above.   Granted, the example shown doesn't do much of
    anything, but it is an example from which a customization  which
    is far more elaborate can be made.


  Post Script:

      The macro names full of wonderful dollar signs were chosen so
    there would be no conflict with names that any  "normal" person
    might use in a program or a macro.  In fact, they are NOT to be
    construed as an intended aggravation to Ken.


Command Scanner Template					Page A-I
Appendix I


    An example program definition file:

    require "  Test Utility - Parameter Definitions  " message;

    define

		!VER               = 0
	,	!EDIT              = 1
	,	!VERSION           = (!VER lsh 18) lor !EDIT

	,	ProgramName        = { "Test Utility" }
	,	ProgramPrompt      = { "TEST> " }
	,	ProgramVersion     = { "%"&Cvos(!VER)&"."&Cvos(!EDIT) }
	,	ProgramBanner      = { ProgramName&" "&ProgramVersion }

	,	CommandDefinitions = { "TSTCMD.DEF" }
	,	CommandRoutines    = { "TSTCMD.SAI" }
	,	CommandUtilities   = { "TSTSUB.REQ" };



    
Command Scanner Template					Page A-II
Appendix II


    An example commands definition file:


    require "  Test Utility - Command Definitions  " message;

    Define CMD$Inv = !bit(0);	! This command is invisible.   ;
    				! This bit is defined for the  ;
    				! standard internal HELP code. ;

    Define $$C$ALL = {

    $$C$CMD( Test, "        Perform some kind of test", ["
		To execute the test procedure which then
		reads the remainder of the command from the
		command-line.  What happens here is anyone's
		best guess.  After all, this is ONLY a TEST!"],
	     0, C.GUESSWHAT )

    $$C$CMD( Exit, "        Exit from the program", ["
		This is the normal way to return to EXEC level."],
	     CMD$Inv, C.Quit )

    $$C$CMD( Quit, "        Exit from the program", ["
		This is the normal way to return to EXEC level."] )

    };

    $$C$DATA( Cmd.Name, Cmd.Text, Cmd.Info, Cmd.Flag )



Command Scanner Template					Page A-III
Appendix III


    An example utility require file:


	require "  Test Utility - Subroutines  " message;

	External Procedure Oops( String Reason );
	External Integer Procedure Findit( String S1, S2 );

	require "TSTUTL" library;



    An example of the command utility routines file:


	entry
		Oops,  Findit
	;

	begin "TSTUTL"


	Internal Procedure Oops( String Reason );
	begin

	    Print( "?oops" & '15&'12 & "?" & Reason & '15&'12 );
	    Call( 0, "EXIT" );

	end;



	Internal Integer Procedure Findit( String S1, S2 );
	begin

	    Integer I;

	    For I_ 1 step 1 until Length(S2) - Length(S1)
	     do If ( Equ(S1,S2[I for Length(S1)]) )
		 then Return( I );

	    Return( 0 );

	end;


	end "TSTUTL";


Command Scanner Template					Page A-IV
Appendix IV


    An example command routines file:


	Procedure C.QUIT;
	begin "QUIT"

	    Print( "Test complete.  Exiting to EXEC" & Crlf );
	    Call( 0, "EXIT" );

	end "QUIT";


	Procedure C.HELP;
	begin "HELP"

	    Print( Crlf & "Go away, I don't want to help you." &
		   Crlf & "besides, you should know more than that!" &
		   Crlf & Crlf );

	end "HELP";


	Procedure C.GUESSWHAT;
	begin "TEST"

	    Integer Num;

	    Print( "Pick a number, any number: " );
	    Num_ CvD( Inchwl );
	    If ( 0 < Num < 10 )
	     then case ( num )
		   of begin

		      [1] Print( "Cherry Heart  Donut"  & Crlf );
		      [2] Print( "Heart  Donut  Heart"  & Crlf );
		      [3] Print( "Donut  Cherry Cherry" & Crlf );
		      [4] Print( "Cherry Heart  Cherry" & Crlf );
		      [5] Print( "Heart  Cherry Heart"  & Crlf );
		      [6] Print( "Cherry Cherry Donut"  & Crlf );
		      [7] Print( "Cherry Donut  Donut"  & Crlf );
		      [8] Print( "Donut  Donut  Orange" & Crlf );
		      [9] Print( "TILT! You lose again" & Crlf );

		   end			! There are NO winners;

	     else Print( "Not your LUCKY day -- Please try again"
			 & Crlf );
	    

	end "TEST";

  