TITLE DSKIO -- ROUTINES FOR WRITING AND READING DISK FILES
;       INCLUDES CODE TO FORMAT ALL TRANSMISSION MODES

ENTRY IRF,ITF,SIZE,UPA,SPA,GB,GA,PB,PA,WRBLK,TRUNCATE
; EXTERNAL ROUTINES
EXTERN RINIT,SINIT,UIO,IOERR,IOERW,BGC,PEW,AC1,AAR1,ERASE
; CELLS CONTAINING EXECUTABLE INSTRUCTIONS:
EXTERN GA1X,PA1X,AAR1X,ACR1X,BCR1X
; EXTERNAL STORAGE:
EXTERN ST,BF,N,PMSK,BYTESIZ,BP,BP0,BLKNO,POS,BPARAM,TMODE
EXTERN BPG,GWCNT,PWCNT,MBC,COUNTB,LRECL,TMP1,CCR
EXTERN CPTOP1,CPTOP2,CPTOP3,CPTOP4,CPTOP5
EXTERN ORBSIZ,RBSIZ,RBCNT,RBALC,RBEST,RBPRV
; GET ASCII OR KATAKANA BYTE FROM FILE
;       SECOND HALF OF ASCTAB IS REFERENCED ONLY IN KATAKANA MODE
; GA1X SHOULD BE INITIALIZED TO "PUSHJ P,GB"
; BPARAM SHOULD BE INITIALIZED TO 311 FOR ASCII OR 407 FOR KATAKANA.
; POS SHOULD BE INITIALIZED TO ZERO.
; GL94BX CODE SHOULD TRAP TO ILL9 FOR ILLEGAL 9-BIT CHARS.

; SKIP RETURN FOR END OF BLOCK OR FILE.
IGNR: SOS ST(C)         ;DON'T COUNT IGNORED CHARS
GA: XCT GA1X
 JRST @ASCTAB(C)
 AOS (P)
 POPJ P,

ASCTAB: EXP IGNR        ;IGNORE NULL
 REPEAT ^D8,<EXP CONT>  ;SOH THRU BS
 EXP HT1                ;TAB
 REPEAT 3,<EXP CONT>    ;LF,VT,FF
 EXP CR1                ;CARRIAGE RETURN
 REPEAT ^D13,<EXP CONT> ;SO THRU SUB
 EXP ESC1               ;ESCAPE
 REPEAT 2,<EXP CONT>    ;FS,GS
 EXP RS1                ;RS
 EXP CONT               ;US
 REPEAT ^D32,<EXP DATA> ;PUNCTUATION
 EXP DATA               ;@
 REPEAT ^D31,<EXP DATA> ;A-Z,PUNCTUATION
 REPEAT ^D31,<EXP LC1>  ;GRAVE, LOWER CASE THRU TILDA
 EXP IGNR               ;IGNORE DEL
 REPEAT ^D32,<EXP ILL8> ;ILLEGAL 8-BIT  200-237
 REPEAT ^D64,<EXP DATA> ;KATAKANA CHARS 240-337
 REPEAT ^D32,<EXP ILL8> ;ILLEGAL 8-BIT 340-377

;LOWER CASE
LC1: TRNN F,LCO         ;IS LOWER CASE PERMITTED
 JRST   [ SOS ST(C)     ;NO, CONVERT TO UPPER
        SUBI C,40
        AOS ST(C)
        JRST DATA]
CONT:
DATA: AOS POS           ;ADVANCE POSITION
 POPJ P,                ;RETURN

ESC1: MOVE [JRST ESC2]
 MOVEM GA1X
 POPJ P,                ;ESC ALREADY COUNTED BY GB
ESC2: MOVE [PUSHJ P,GB]
 MOVEM GA1X
 MOVEI C,ESC
 AOS ST+ESC             ;THIS ONE NOT COUNTED
 AOS POS                ;ADVANCE POSITION
 POPJ P,

RS1: MOVE [JRST RS2]
 MOVEM GA1X
 AOS ST+ESC             ;COUNT ESCAPE.  RS ALREADY COUNTED.
 MOVEI C,ESC
 POPJ P,
RS2: MOVE [PUSHJ P,GB]
 MOVEM GA1X
 MOVEI C,RS
 AOS POS                ;ADVANCE POSITION
 POPJ P,

; TAB EXPAND.

HT1: SOS ST+HT          ;DON'T COUNT TAB
 MOVE POS
 IDIVI TABSIZ
 MOVEI TABSIZ
 SUB R0,R1
 MOVEM MBC              ;MULTIPLE BLANK COUNT
 MOVE [JRST HT2]
 MOVEM GA1X
HT2: SOSGE MBC
 JRST HT3
 MOVEI C,BL
 AOS ST+BL
 AOS POS
 POPJ P,
HT3: MOVE [PUSHJ P,GB]
 MOVEM GA1X
 JRST GA

; CARRIAGE RETURN RESET LINE POSITION.
CR1: SETZM POS
; TEST FOR END OF BLOCK
 SKIPE COUNTB
 JRST .+3               ;END NOT REACHED
 AOS COUNTB             ;IF AT END, INCREASE LRECL AND COUNTB
 AOS LRECL
 PUSHJ P,GB             ;NEVER SKIPS
 CAIN C,LF              ;END OF RECORD
 JRST CRLF              ;YES
 MOVEM C,ACHAR#         ;SAVE CHAR FOLLOWING CR
 MOVE [JRST CR2]
 MOVEM GA1X
 MOVEI C,CR
 POPJ P,                ;CR ALREADY COUNTED
CR2: MOVE [PUSHJ P,GB]
 MOVEM GA1X
 MOVE C,ACHAR#          ;RETRIEVE CHAR FOR REPLAY
 JRST @ASCTAB(C)        ;REPLAY CHAR (ALREADY COUNTED BY GB)

CRLF: SOS ST+CR         ;DON'T COUNT CR
 AOS ST+RS              ;COUNT RS INSTEAD.
 MOVEI C,RS
 POPJ P,

ILL8: JSR IOERR         ;ILLEGAL 8-BIT CHAR ENCOUNTERED IN KATAKANA FILE
ILL9: JSR IOERR         ;ILLEGAL 9-BIT CHAR ENCOUNTERED IN KATAKANA FILE

DEFINE GBY9(A,B),< LDB C,A
 MOVEI GS,B
 JRST GEX9
 >

DEFINE GBY1(A,B),< LDB C,A
 MOVEI GS,B
 JRST GEX1
 >

DEFINE GBY(A,B),< LDB C,A
 MOVEI GS,B
 JRST GEX
 >
; GET BINARY BYTE

GB: SOSGE COUNTB
 JRST EOB               ;END OF BLOCK OR FILE
 JRST 0(GS)             ;DISPATCH TO APPROPRIATE CODE
EOB: MOVEI GS,GBINIT
 AOS (P)
 POPJ P,

L7G0: POINT 7,0(GX),6
L7G1: POINT 7,0(GX),13
L7G2: POINT 7,0(GX),20
L7G3: POINT 7,0(GX),27
L7G4: POINT 7,0(GX),34

; BLOCKING = 5 BYTESIZE = 7 LEFT FILL
GL75B0: SOSG GWCNT
 PUSHJ P,NSBI
 LDB C,L7G0
 MOVEI GS,GL75B1
 TRNN F,EDIT10          ;IS THIS AN EDIT-10 FILE?
 JRST GEX               ;NO, EXIT NORMALLY
 MOVE (GX)
 TRNN 1                 ;LOOK FOR BIT 35
 JRST GEX               ;THIS WORD DOES NOT CONTAIN A LINE NO.
 MOVE COUNTB            ;ADJUST COUNTB TO CONSUME 5 CHARS
 SUBI 5
 CAIL 0
 JRST .+4
 MOVN R0,R0
 ADDM LRECL
 SETZ R0,
 MOVEM COUNTB
 AOS GX
 SOSG GWCNT
 PUSHJ P,NSBI
 LDB C,L7B0             ;WE HAVE NOW PASSED OVER THE LINE NO.
 CAIE C,HT              ;IS LINE NO. FOLLOWED BY A TAB
 JRST GEX               ;NO, EXIT
 JRST GB                ;SKIP OVER THE TAB TOO
GL75B1: GBY L7G1,GL75B2
GL75B2: GBY L7G2,GL75B3
GL75B3: GBY L7G3,GL75B4
GL75B4: GBY1 L7G4,GL75B0

; BLOCKING = 9 BYTESIZE = 8 LEFT FILL SERIAL
GL89B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY L8G0,GL89B1
GL89B1: GBY L8G1,GL89B2
GL89B2: GBY L8G2,GL89B3
GL89B3: GBY L8G3,GL89B4
GL89B4: LDB C,L8G4A
 LSH C,4
 MOVEM C,TMP#
 AOS GX
 SOSG GWCNT
 PUSHJ P,NSBI
 LDB C,L8G4B
 IOR C,TMP
 MOVEI GS,GL89B5
 JRST GEX
GL89B5: GBY R8G0,GL89B6
GL89B6: GBY R8G1,GL89B7
GL89B7: GBY R8G2,GL89B8
GL89B8: GBY1 R8G3,GL89B0

; BLOCKING = 4 BYTESIZE = 9 LEFT FILL KATAKANA
L9G0: POINT 9,0(GX),8
L9G1: POINT 9,0(GX),17
L9G2: POINT 9,0(GX),26
L9G3: POINT 9,0(GX),35
GL94B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY9 L9G0,GL94B1
GL94B1: GBY9 L9G1,GL94B2
GL94B2: GBY9 L9G2,GL94B3
GL94B3: LDB C,L9G3
 AOS GX
 MOVEI GS,GL94B0
GEX9: TRNE C,400
 JRST ILL9
 AOS ST(C)
 POPJ P,

; BLOCKING = 5 BYTESIZE = 8 LEFT FILL
;       NOTE BYTESIZE IS ACTUALLY 7 EXCEPT ON BYTE 4, AND
;       THAT BYTE IS ROTATED 1 BIT TO FAVOR COMPRESSION
GL85B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY L7G0,GL85B1
GL85B1: GBY L7G1,GL85B2
GL85B2: GBY L7G2,GL85B3
GL85B3: GBY L7G3,GL85B4
GL85B4: LDB C,R8G3
 TRNE C,1
 XORI C,401     ;MOVE BIT 35 TO BIT 27
 LSH C,-1       ;REJUSTIFY
 MOVEI GS,GL85B0
GEX1: AOS GX
GEX: AOS ST(C)
 POPJ P,

; BLOCKING = 4 BYTESIZE = 8 LEFT FILL
L8G0: POINT 8,0(GX),7
L8G1: POINT 8,0(GX),15
L8G2: POINT 8,0(GX),23
L8G3: POINT 8,0(GX),31
L8G4A: POINT 4,0(GX),35
L8G4B: POINT 4,0(GX),3
GL8B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY L8G0,GL8B1
GL8B1: GBY L8G1,GL8B2
GL8B2: GBY L8G2,GL8B3
GL8B3: GBY1 L8G3,GL8B0

; BLOCKING = 4 BYTESIZE = 8 RIGHT FILL
R8G0: POINT 8,0(GX),11
R8G1: POINT 8,0(GX),19
R8G2: POINT 8,0(GX),27
R8G3: POINT 8,0(GX),35
GR8B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY R8G0,GR8B1
GR8B1: GBY R8G1,GR8B2
GR8B2: GBY R8G2,GR8B3
GR8B3: GBY1 R8G3,GR8B0

; BLOCKING = 3 BYTESIZE = 8 LEFT FILL
GL83B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY L8G0,GL83B1
GL83B1: GBY L8G1,GL83B2
GL83B2: GBY1 L8G2,GL83B0

; BLOCKING = 3 BYTESIZE = 8 RIGHT FILL
GR83B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY R8G1,GR83B1
GR83B1: GBY R8G2,GR83B2
GR83B2: GBY1 R8G3,GR83B0

; BLOCKING = 2 BYTESIZE = 8 LEFT FILL
GL82B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY L8G0,GL82B1
GL82B1: GBY1 L8G1,GL82B0

; BLOCKING = 2 BYTESIZE = 8 RIGHT FILL
GR82B0: SOSG GWCNT
 PUSHJ P,NSBI
 GBY R8G2,GR82B1
GR82B1: GBY1 R8G3,GR82B0

; BLOCKING = 1 BYTESIZE = 8 LEFT FILL
GL81B0: SOSG GWCNT
 PUSHJ P,NSBI
 LDB C,L8G0
 JRST GEX1

; BLOCKING = 1 BYTESIZE = 8 RIGHT FILL
GR81B0: SOSG GWCNT
 PUSHJ P,NSBI
 LDB C,R8G3
 JRST GEX1

; POSITION TO BYTE POSITION BP.
GBINIT: PUSHJ P,UPA     ;UNPACK BINARY PARAMETERS.  RETURNS R0=PAGE NO.
 PUSHJ P,RDBLK          ;READ PAGE.  WRITE OUT OLD FIRST IF CHANGED.
;                       SETS GX=BUFFER
;       SKIP FIRST WORD OF EDIT-10 FILES
 SKIPE BP               ;ARE WE AT BEGINNING OF FILE
 JRST GBI2              ;NO
 SETZM POS              ;ZERO POS (MUST BE DONE WHENEVER BP=0)
 MOVE BUFFER            ;EXAMINE FIRST WORD IN THE FILE
 MOVE R1,TMODE          ;BUT ONLY WHEN MODE=1 (ASCII)
 CAIN R1,1
 TRNN 1
 JRST GBI2              ;FILE DOES NOT QUALIFY FOR EDIT-10 TREATMENT
 TRO F,EDIT10           ;TURN ON FLAG FOR GL7B0
; END EDIT10 INITIALIZATION
GBI2: MOVE N
 TRNE F,SERFLG          ;SERIAL MODE
 JRST [ LSH R0,3        ;CALCULATE BIT POSITION IN PAGE
        IDIVI 44
        ADDM GX
        SUBI 1000
        MOVNM GWCNT
        MOVE N
        IDIVI 11        ;MOD 9
        MOVE GS,GSETAB(R1)
        JRST GBI1]
 IDIV BF
 ADDM GX
 SUBI 1000
 MOVNM GWCNT
 MOVE R2,BPARAM
 TRNE R2,400
 JRST [ MOVE GS,GKTAB(R1)
        JRST GBI1]
 ANDI R2,41             ;EXTRACT FILL AND LOW ORDER BIT OF BYTESIZE
 TRZE R2,40             ;IF LOW ORDER BIT IS ON THEN BYTESIZE=8
 TRO R2,2
 LSH R2,3
 ADD R2,BF
 ADD R1,GBTAB(R2)       ;INDEX INTO APPROPRIATE TABLE
 MOVE GS,0(R1)          ;INITIAL STATE
GBI1: TLNE GS,IW             ;SHOULD WE INCREMENT GWCNT
 AOS GWCNT              ;YES
 JRST 0(GS)             ;COUNTB ALREADY DECREMENTED

IW=400000               ;INCREMENT GWCNT FIRST
; INDEX INTO THIS TABLE IS XYZZZ
;       X= BYTESIZE 8
;       Y= LEFT FILL
;       ZZZ= BLOCKING
GBTAB: EXP G7L5,G7L5,G7L5,G7L5,G7L5,G7L5,G7L5,G7L5
       EXP G7L5,G7L5,G7L5,G7L5,G7L5,G7L5,G7L5,G7L5
       EXP G8R4,G8R1,G8R2,G8R3,G8R4,G8R4,G8R4,G8R4
       EXP G8L4,G8L1,G8L2,G8L3,G8L4,G8L5,G8L4,G8L4
G7L5: XWD IW,GL75B0
 EXP GL75B1,GL75B2,GL75B3,GL75B4
G8L5: XWD IW,GL85B0
 EXP GL85B1,GL85B2,GL85B3,GL85B4
G8R4: XWD IW,GR8B0
 EXP GR8B1,GR8B2,GR8B3
G8L4: XWD IW,GL8B0
 EXP GL8B1,GL8B2,GL8B3
G8R3: XWD IW,GR83B0
 EXP GR83B1,GR83B2
G8L3: XWD IW,GL83B0
 EXP GL83B1,GL83B2
G8R2: XWD IW,GR82B0
 EXP GR82B1
G8L2: XWD IW,GL82B0
 EXP GL82B1
G8R1: XWD IW,GR81B0
G8L1: XWD IW,GL81B0

;KATAKANA MODE
GKTAB: XWD IX,GL94B0
 EXP GL94B1,GL94B2,GL94B3

;SERIAL MODE
GSETAB: XWD IW,GL89B0
 EXP GL89B1,GL89B2,GL89B3,GL89B4,GL89B5,GL89B6,GL89B7,GL89B8

; READ NEXT SEQUENTIAL INPUT PAGE
NSBI: MOVE BLKNO
 ADDI 1
 PUSHJ P,RDBLK
 MOVEI 1000
 MOVEM GWCNT
 MOVEI GX,BUFFER
 POPJ P,

; READ PAGE NO. IN R0 FROM INPUT FILE
RDBLK: MOVEM TMP1       ;SAVE DESIRED PAGE NO.
 PUSHJ P,WRBLK          ;WRITE OUT OLD PAGE IF CHANGED
 MOVEI GX,BUFFER
 MOVE TMP1
 EXCH BLKNO
 CAMN TMP1
 POPJ P,                ;SAME PAGE
 PUSHJ P,RBZ            ;READ CONTENTS
 POPJ P,                ;FINISHED


; INITIALIZE TRANSMITTERS AND FILE READERS

ITF: PUSHJ P,RINIT
 MOVE [-1]
 MOVEM BLKNO
 SETZM BP
 SETZM BP0
 MOVEI GS,GBINIT
 MOVE [PUSHJ P,GB]
 MOVEM GA1X
 SETZM POS
 TRZ F,CHGFLG+UPDMOD+EDIT10
 MOVEI AS,AC1
 POPJ P,

; CALCULATE NO. OF FILE BYTES TO SEND
SIZE: MOVE RBSIZ
 SETZ R1,               ;REMAINDER=0
 TRNE F,SERFLG          ;SERIAL MODE
 JRST [ MULI 44         ;CALCULATE NO. OF BITS
        DIVI 10         ;NO OF BYTES
        JRST SIZ1]
 IMUL BF
SIZ1: MOVEM CPTOP1      ;WHOLE NO. OF FILE BYTES
 MOVEM R1,CPTOP2        ;REMAINDER BITS
 TRNE R1,777777         ;ANY REMAINDER
 ADDI 1                 ;YES
 MOVEM CCR              ;NO. OF BYTES TO TRANSMIT
 POPJ P,

; ADJUST BINARY PARAMETERS FOR SPECIAL MODES
;       R0=MODE R1=RPARAM OR TPARAM
SPA: CAIN 6     ;IMAGE MODE
 MOVEI R1,SMODE ;YES, TREAT LIKE SERIAL MODE
 CAIN 5         ;KATAKANA MODE
 MOVEI R1,KMODE ;YES, SET BYTESIZE=9 BLOCKING=4 LEFT FILL
 CAIN 1         ;ASCII MODE
 MOVEI R1,AMODE ;YES, SET BYTESIZE=7 BLOCKING=5 LEFT FILL
 MOVEM R1,BPARAM ;SET BPARAM
 POPJ P,        ;EXIT WITH R1 TO BE STORED INTO RPARAM OR TPARAM

; UNPACK AND DECIPHER BINARY PARAMETERS

UPA: TRZ F,SERFLG+LEFTFG+MASKFG
 MOVE R1,BPARAM
 CAIE R1,361            ;111+1000+1 BYTESIZE=8 BLOCKING 9 FILL=LEFT
 TRNN R1,777            ;TEST FOR SERIAL MODE
 JRST [ TRO F,SERFLG
        MOVEI R1,361
        JRST UPA1]
 CAIN R1,360    ;111+1000+0 BYTESIZE=8 BLOCKING 9 FILL=RIGHT
 JSR UIO
UPA1: MOVEM R1,BPARAM
 TRNE R1,1
 TRO F,LEFTFG   ;LEFT FILL
 LDB R0,[POINT 4,R1,34]
 ADDI 1
 MOVEM BF       ;BLOCKING FACTOR
 LDB R0,[POINT 4,R1,30]
 ADDI 1
 MOVEM BYTESIZ
 CAIN 11
 JRST UPA11     ;BYTESIZE 9 BETTER BE KATAKANA
 CAIN 10
 JRST UPA10     ;BYTESIZE=8
 TRNE F,LEFTFG
 CAIE 7
 JSR UIO        ;NOT LEFT FILL OR BYTESIZE=7
; BYTESIZE=7
 MOVE BF
 CAIE 5
 JSR UIO
 MOVE R1,[777777,,777776]
UPA2: MOVEM R1,PMSK     ;SAVE MASK
 TRO F,MASKFG           ;PAGE MAY BE MASKED
UPA3: LSH R0,11         ;CALCULATE BYTES/PAGE
UPA4: MOVEM BPG         ;AND SAVE
 MOVE BP                ;CALCULATE PAGE AND BYTE WITHIN PAGE
 IDIV BPG
 MOVEM R1,N             ;SAVE BYTE WITHIN PAGE
 POPJ P,                ;RETURN WITH R0=PAGE NO.
UPA10: MOVE BF
 CAIN 5
 JRST UPA3
 CAIN 11
 JRST [MOVEI ^D256*^D9
        JRST UPA4]
 CAIL 5
 JSR UIO
 MOVEM R1               ;USE BF FOR INDEXING
 MOVE R1,RMSK-1(R1)
 TRNE F,LEFTFG
 MOVE R1,LMSK-1(R1)
 JRST UPA2

RMSK: XWD 0,377         ;BLOCKING=1
 XWD 0,177777           ;BLOCKING=2
 XWD 77,777777          ;BLOCKING=3
 XWD 37777,777777       ;BLOCKING=4

LMSK: XWD 776000,0      ;BLOCKING=1
 XWD 777774,0           ;BLOCKING=2
 XWD 777777,770000      ;BLOCKING=3
 XWD 777777,777760      ;BLOCKING=4

UPA11: MOVE BF
 TRNE F,LEFTFG
 CAIE 4
 JSR UIO        ;NOT LEFT FILL OR BLOCKING = 4
 JRST UPA3
DEFINE PBY(A,B),<DPB C,A
 MOVEI PS,B
 JRST PBEX
 >

; PUT ASCII OR KATAKANA BYTE
PA: XCT PA1X            ;USUALLY CONTAINS CAIG C,RS
 JRST PA3
PA2A: PUSHJ P,PB
 POPJ P,
 AOS (P)
 POPJ P,
PA3: CAIE C,RS
 JRST PA5
 MOVEI C,CR
 TRO F,IGNEOF           ;IGNORE DEPLETION OF COUNTB QUANTUM
 PUSHJ P,PB             ;CANNOT SKIP
 TRZ F,IGNEOF
 MOVEI C,LF
 JRST PA2A
PA5: CAIE C,ESC
 JRST PA2A
 MOVE [JRST PA6]
 MOVEM PA1X
 POPJ P,
PA6: MOVE [CAIG C,RS]
 MOVEM PA1X
 JRST PA2A
 
; PUT BINARY BYTE
PB: JRST 0(PS)          ;DISPATCH TO APPROPRIATE CODE

L7B0: POINT 7,0(PX),6
L7B1: POINT 7,0(PX),13
L7B2: POINT 7,0(PX),20
L7B3: POINT 7,0(PX),27
L7B4: POINT 7,0(PX),34

; BLOCKING = 5 BYTESIZE = 7 LEFT FILL
PL75B0: AOS PX
 PBY L7B0,PL75B1
PL75B1: PBY L7B1,PL75B2
PL75B2: PBY L7B2,PL75B3
PL75B3: PBY L7B3,PL75B4
PL75B4: DPB C,L7B4
 MOVEI PS,PL75B0
 JRST PBEX1

; BLOCKING = 9 BYTESIZE = 8 LEFT FILL SERIAL
PL89B0: AOS PX
 PBY L8B0,PL89B1
PL89B1: PBY L8B1,PL89B2
PL89B2: PBY L8B2,PL89B3
PL89B3: PBY L8B3,PL89B4
PL89B4: MOVE C
 LSH C,-4
 DPB C,L8B4A
 MOVEM C
 SOSG PWCNT
 PUSHJ P,NSBO
 AOS PX
 PBY L8B4B,PL89B5
PL89B5: PBY R8B0,PL89B6
PL89B6: PBY R8B1,PL89B7
PL89B7: PBY R8B2,PL89B8
PL89B8: DPB C,R8B3
 MOVEI PS,PL89B0
 JRST PBEX1

; BLOCKING = 4 BYTESIZE = 9 LEFT FILL KATAKANA
L9B0: POINT 9,0(PX),8
L9B1: POINT 9,0(PX),17
L9B2: POINT 9,0(PX),26
L9B3: POINT 9,0(PX),35
PL94B0: AOS PX
 PBY L9B0,PL94B1
PL94B1: PBY L9B1,PL94B2
PL94B2: PBY L9B2,PL94B3
PL94B3: DPB C,L9B3
 MOVEI PS,PL94B0
 JRST PBEX1

; BLOCKING = 5 BYTESIZE = 8 LEFT FILL
;       NOTE BYTESIZE IS ACTUALLY 7 EXCEPT ON BYTE 4, AND
;       THAT BYTE IS ROTATED 1 BIT TO FAVOR COMPRESSION
PL85B0: AOS PX
 PBY L7B0,PL85B1
PL85B1: PBY L7B1,PL85B2
PL85B2: PBY L7B2,PL85B3
PL85B3: PBY L7B3,PL85B4
PL85B4: LSH C,1
 TRNE C,400
 XORI C,401
 DPB C,R8B3
 MOVEI PS,PL85B0
PBEX1: SOSG PWCNT
 PUSHJ P,NSBO           ;NEXT SEQUENTIAL BLOCK OUT
PBEX: SOSLE COUNTB           ;IS QUANTUM EXHAUSTED
 POPJ P,                ;NO, NON-SKIP RETURN FROM PB
 TRNE F,IGNEOF          ;ARE WE IGNORING QUANTUM
 POPJ P,                ;YES
 AOS (P)                ;NO
 MOVEI PS,PBINIT
 POPJ P,

; BLOCKING = 4 BYTESIZE = 8 LEFT FILL
L8B0: POINT 8,0(PX),7
L8B1: POINT 8,0(PX),15
L8B2: POINT 8,0(PX),23
L8B3: POINT 8,0(PX),31
L8B4A: POINT 4,0(PX),35
L8B4B: POINT 4,0(PX),3
PL8B0: AOS PX
 PBY L8B0,PL8B1
PL8B1: PBY L8B1,PL8B2
PL8B2: PBY L8B2,PL8B3
PL8B3: DPB C,L8B3
 MOVEI PS,PL8B0
 JRST PBEX1

; BLOCKING = 4 BYTESIZE = 8 RIGHT FILL
R8B0: POINT 8,0(PX),11
R8B1: POINT 8,0(PX),19
R8B2: POINT 8,0(PX),27
R8B3: POINT 8,0(PX),35
PR8B0: AOS PX
 PBY R8B0,PR8B1
PR8B1: PBY R8B1,PR8B2
PR8B2: PBY R8B2,PR8B3
PR8B3: DPB C,R8B3
 MOVEI PS,PR8B0
 JRST PBEX1

; BLOCKING = 3 BYTESIZE = 8 LEFT FILL
PL83B0: AOS PX
 PBY L8B0,PL83B1
PL83B1: PBY L8B1,PL83B2
PL83B2: DPB C,L8B2
 MOVEI PS,PL83B0
 JRST PBEX1

; BLOCKING = 3 BYTESIZE = 8 RIGHT FILL
PR83B0: AOS PX
 PBY R8B1,PR83B1
PR83B1: PBY R8B2,PR83B2
PR83B2: DPB C,R8B3
 MOVEI PS,PR83B0
 JRST PBEX1

; BLOCKING = 2 BYTESIZE = 8 LEFT FILL
PL82B0: AOS PX
 PBY L8B0,PL82B1
PL82B1: DPB C,L8B1
 MOVEI PS,PL82B0
 JRST PBEX1

; BLOCKING = 2 BYTESIZE = 8 RIGHT FILL
PR82B0: AOS PX
 PBY R8B2,PR82B1
PR82B1: DPB C,R8B3
 MOVEI PS,PR82B0
 JRST PBEX1

; BLOCKING = 1 BYTESIZE = 8 LEFT FILL
PL81B0: AOS PX
 DPB C,L8B0
 JRST PBEX1

; BLOCKING = 1 BYTESIZE = 8 RIGHT FILL
PR81B0: AOS PX
 DPB C,R8B3
 JRST PBEX1

PBINIT: PUSHJ P,UPA     ;GET BLOCK NO.
 PUSHJ P,NEWBLK         ;WRITE OUT OLD BLOCK, GET NEW
 MOVEI PX,BUFFER-1      ;NEWBLK WILL NOT WRITE PAGE IF IT IS THE SAME.
;                       MARK THE PAGE CLEAN ANYWAY AS IT WILL BE MARKED
;                       DIRTY BY THE TIME WE GET THROUGH PBINIT.
 MOVE N                 ;N= NO. OF BYTES INTO PAGE
 TRNE F,SERFLG
 JRST [ LSH R0,3        ;CALCLULATE BIT POSITION IN PAGE
        IDIVI 44
        ADDM PX
        SUBI 1000
        MOVNM PWCNT
        MOVE N
        IDIVI 11        ;MOD 9
        MOVE PS,SERTAB(R1)
        JRST PBI1]
 IDIV BF                ;DIVIDE BY BLOCKING FACTOR
 ADDM PX                ;POINT TO CORRECT WORD IN PAGE
 SUBI 1000              ;CALCULATE WORDS REMAINING (-)
 MOVNM PWCNT            ;AND SAVE (+)
 MOVE R2,BPARAM
 TRNE R2,400            ;CHECK FOR BYTESIZE=9 (KATAKANA)
 JRST [MOVE PS,PKTAB(R1)
        JRST PBI1]
 ANDI R2,41             ;EXTRACT FILL AND LOW ORDER BIT OF BYTESIZE
 TRZE R2,40             ;IF LOW ORDER BIT IS ON BYTESIZE=8
 TRO R2,2
 LSH R2,3
 ADD R2,BF
 ADD R1,PBTAB(R2)       ;INDEX INTO APPROPRIATE TABLE
 MOVE PS,0(R1)          ;INITIAL STATE
PBI1: TLNE PS,IX             ;SHOULD WE INCREMENT PX
 AOS PX                 ;YES
 JRST 0(PS)

IX=400000       ;INCREMENT PX FIRST
; INDEX INTO THIS TABLE IS XYZZZ
;       X= BYTESIZE 8
;       Y= LEFT FILL
;       ZZZ= BLOCKING
PBTAB: EXP P7L5,P7L5,P7L5,P7L5,P7L5,P7L5,P7L5,P7L5
 EXP P7L5,P7L5,P7L5,P7L5,P7L5,P7L5,P7L5,P7L5
 EXP P8R4,P8R1,P8R2,P8R3,P8R4,P8R4,P8R4,P8R4
 EXP P8L4,P8L1,P8L2,P8L3,P8L4,P8L5,P8L4,P8L4
P7L5: EXP PL75B0
 XWD IX+7,PL75B1
 XWD IX+16,PL75B2
 XWD IX+25,PL75B3
 XWD IX+34,PL75B4
P8L5: EXP 0
 XWD IX+7,PL85B1
 XWD IX+16,PL85B2
 XWD IX+25,PL85B3
 XWD IX+34,PL85B4
P8R4: EXP PR8B0
 XWD IX+14,PR8B1
 XWD IX+24,PR8B2
 XWD IX+34,PR8B3
P8L4: EXP PL8B0
 XWD IX+10,PL8B1
 XWD IX+20,PL8B2
 XWD IX+30,PL8B3
P8R3: EXP PR83B0
 XWD IX+24,PR83B1
 XWD IX+34,PR83B2
P8L3: EXP PL83B0
 XWD IX+10,PL83B1
 XWD IX+20,PL83B2
P8R2: EXP PR82B0
 XWD IX+34,PR82B1
P8L2: EXP PL82B0
 XWD IX+10,PL82B1
P8R1: EXP PR81B0
P8L1: EXP PL81B0

;KATAKANA MODE
PKTAB: EXP PL94B0
 XWD IX+11,PL94B1
 XWD IX+22,PL94B2
 XWD IX+33,PL94B3

;SERIAL MODE
SERTAB: EXP PL89B0
 XWD IX,PL89B1
 XWD IX,PL89B2
 XWD IX,PL89B3
 XWD IX,PL89B4
 XWD IX,PL89B5
 XWD IX,PL89B6
 XWD IX,PL89B7
 XWD IX,PL89B8

; ADVANCE TO NEXT SEQUENTIAL BLOCK NO.
NSBO: MOVE BLKNO
 ADDI 1
 PUSHJ P,NEWBLK
 MOVEI 1000
 MOVEM PWCNT
 MOVEI PX,BUFFER-1
 POPJ P,

; READ BLOCK IN R0.  WRITE OUT OLD BLOCK FIRST, IF CHANGED.
NEWBLK: MOVEM TMP1      ;SAVE DESIRED BLOCK NO.
 CAME BLKNO             ;SKIP WRITE IF SAME PAGE (LEAVE PAGE DIRTY)
 PUSHJ P,WRBLK          ;WRITE OUT OLD BLOCK, IF CHANGED
 MOVE TMP1
 EXCH BLKNO
 CAMN TMP1
 POPJ P,                ;SAME BLOCK
 TRNE F,UPDMOD          ;ARE WE UPDATING AN OLD FILE
 PUSHJ P,RBZ            ;YES, READ FORMER CONTENTS
 POPJ P,

; READ PAGE NO. IN "BLKNO".  NOTE PAGE 0= BLOCKS 1 THRU 4
RBZ: MOVE R1,BLKNO
 LSH R1,2
 USETI FIL,1(R1)
 INPUT FIL,RPAGE
 GETSTS FIL,R1
 TRNN R1,760000
 JRST EOF3
 TRNE R1,740000
 JSR IOERR
 ANDCMI R1,760000 ;RESET ERROR BITS
 SETSTS FIL,(R1)
 MOVE R1,RBSIZ
; DIVIDE BY NO. OF WORDS/PAGE = 2^9
 LSH R1,-11
 CAME R1,BLKNO
 JRST EOF2
 LSH R1,11
 SUB R1,RBSIZ
 MOVN R1,R1
EOF1: ADDI R1,BUFFER
 SETZM 0(R1)
 HRL R1,R1
 AOS R1         ;FORM BLT TABLE
 BLT R1,BUFFER+777
; IN UPDATE MODE READ MASK UNWANTED BITS
EOF3: TRNE F,MASKFG     ;DO WE NEED MASK
 TRNN F,UPDMOD  ;YES, ARE WE IN UPDATE MODE
 POPJ P,        ;NO TO EITHER
 PUSH P,R2      ;SAVE R2 ON THE STACK
 MOVE R1,PMSK   ;LOAD MASK
 MOVE R1
 XOR [-1]
 MOVE R2,[-1000,,BUFFER]
EOF4: TDNE R0,0(R2)  ;TEST SPECIFIED BITS
 JRST EOF6
 AOBJN R2,EOF4
EOF5: POP P,R2
 POPJ P,
EOF6: TRO F,CHGFLG
 ANDM R1,0(R2)  ;TURN OFF UNWANTED BITS
 AOBJN R2,EOF4
 JRST EOF5
EOF2: CAML R1,BLKNO
 JSR PEW
 SETZ R1,
 JRST EOF1
BUFFER: BLOCK 1000
 0      ;SOMETIMES OVERWRITTEN BY BLT
RPAGE: IOWD 1000,BUFFER
 0

; WRITE OUT OLD BLOCK IF CHANGED
WRBLK: HRRZ R1,PX
 CAIG R1,BUFFER-1       ;WAS PAGE WRITTEN INTO
 TRNE F,CHGFLG          ;OR ALTERED BY RBZ
 JRST .+2               ;YES TO EITHER OF ABOVE
 POPJ P,                ;PAGE NOT CHANGED
 MOVE R1,BLKNO
 LSH R1,2
 USETO FIL,1(R1)
 OUTPUT FIL,RPAGE
 MOVEI PX,BUFFER-1
 TRZ F,CHGFLG
 MOVE R1,BLKNO
 ADDI R1,1
 LSH R1,11
 CAMLE R1,ORBSIZ
 MOVEM R1,ORBSIZ        ;UPDATE ORBSIZ - MAXIMUM FILE LENGTH (WORDS)
 STATZ FIL,740000
 JSR IOERW
 POPJ P,

; INITIALIZE RECEIVERS AND FILE ROUTINES

IRF: PUSHJ P,SINIT
 MOVE [PUSHJ P,BGC]
 MOVEM AAR1X
 MOVE [JRST AAR1]
 MOVEM ACR1X
 MOVE [PUSHJ P,BGC]
 MOVEM BCR1X
 MOVE [-1]
 MOVEM BLKNO
 SETZM BP
 SETZM BP0
 MOVEI PS,PBINIT
 MOVE [CAIG C,RS]
 MOVEM PA1X
 TRZ F,IGNEOF+CHGFLG+UPDMOD
 POPJ P,


COMMENT ;
TOTAL FILE BITS = CPTOP1*10+CPTOP2
CPTOP1 - FILE SIZE IN 8-BIT BYTES
CPTOP2 - RESIDUAL BITS WHEN FILE SIZE EXPRESSED IN 8-BIT BYTES
TOTAL FILE BITS = CPTOP3*44000+CPTOP4+44+CPTOP5
RBSIZ - FILE SIZE IN 36-BIT WORDS
CPTOP3 - FILE SIZE IN PAGES
CPTOP4 - RESIDUAL WORDS WHEN FILE SIZE EXPRESSED IN PAGES
CPTOP5 - RESIDUAL BITS WHEN FILE SIZE EXPRESSED IN 36-BIT WORDS
;
TRUNCATE: MOVE CPTOP1
 TRNE F,SERFLG          ;SERIAL MODE
 JRST [LSH R0,3         ;YES, CALCULATE TOTAL BITS SENT
        ADD CPTOP2
        IDIVI 44        ;GET WORDS AND BITS
        MOVEM RBSIZ
        JRST TRUNC1]
 IDIV R0,BF
 MOVEM RBSIZ           ;LENGTH OF FILE IN WORDS
 MOVE R2,BPARAM
 TRNE R2,400            ;TEST FOR KATAKANA
 JRST [LDB R1,[POINT 6,PKTAB(R1),17]
        JRST TRUNC1]
 ANDI R2,41             ;EXTRACT FILL AND LOW ORDER BIT OF BYTESIZE
 TRZE R2,40             ;IF LOW ORDER BIT IS ON, BYTESIZE=8
 TRO R2,2
 LSH R2,3
 ADD R2,BF
 ADD R1,PBTAB(R2)       ;MAKE POINTER TO APPROPRIATE TABLE ENTRY
 LDB R1,[POINT 6,0(R1),17]
TRUNC1: MOVEM R1,CPTOP5 ;REMAINING BITS
 MOVE RBSIZ
 ANDI 777
 MOVEM CPTOP4   ;WORDS
 MOVE RBSIZ
 LSH R0,-11
 MOVEM CPTOP3   ;PAGES

;BEGINNING OF TRUNCATE CODE.  TEST FOR FILE END ON PAGE BOUNDARY FIRST.

 SKIPN CPTOP4
 SKIPE CPTOP5
 JRST TRUNC6
 JRST TRUNC3

;FILE ENDS ON PAGE BOUNDARY
TRUNC3: PUSHJ P,WRBLK   ;FLUSH BUFFER (ADVANCE ORBSIZ, POSSIBLY)
 CLOSE FIL,
 MOVEI R0,200000        ;BIT 19 - TAKE RBALC IN WORDS
 IORM R0,RBCNT          ;SET BIT FOR EXTENDED RENAME
 MOVE RBSIZ
 MOVEM RBALC
 SETZM RBEST
 MOVS RBPRV
 ANDCMI 777000
 IORI 047000    ;ALL RD NO
 MOVSM RBPRV
 RENAME FIL,RBCNT       ;TRUNCATE TO RBSIZ WORDS
 JSR ERASE
 JRST TRUFIN

;POSITION FILE TO LAST PAGE.

TRUNC6: MOVE CPTOP3
 PUSHJ P,NEWBLK         ;POSITION TO LAST PAGE IN FILE
 MOVE R2,CPTOP5
        MOVE R1,CPTOP4
        CAIG R2,0
        JRST TRUNC7     ;NO RESIDUAL BITS
        AOS RBSIZ       ;ADVANCE RBSIZ TO CONTAIN LAST FEW BITS
        AOS CPTOP4      ;ADVANCE CPTOP4 TO WRITE 1 EXTRA WORD
        MOVN R2,R2      ;NEGATE NO. OF BITS
        HRLZI R0,400000
        ASH R0,1(R2)    ;CREATE MASK
        ANDM R0,BUFFER(R1)
        MOVE R1,CPTOP4
TRUNC7: TRO F,CHGFLG    ;MARK PAGE CHANGED
        ADDI R1,BUFFER
        SETZM (R1)      ;ZERO REMAINDER OF PAGE
        HRL R1,R1
        AOS R1
        BLT R1,BUFFER+777
        JRST TRUNC3
TRUFIN: TRZ F,CHGFLG
 MOVEI PX,BUFFER-1
 STATZ FIL,740000
 JSR IOERW
 POPJ P,

 END
      Y