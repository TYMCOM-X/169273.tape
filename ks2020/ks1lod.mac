TITLE KS1LOD - LOADER FOR 2020 TAPE FILES

R=1		;RELOCATION REGISTER.
TAC1==2		;TEMPORARY
TAC2==3		;ACS.
TAC3==4
TAC4==5
TAC5==6
TAC6==7

ACCS1==10	;THESE ACS HOLD THE CORRESPONDING REGISTERS,
ACFC==11	;FROM TIME TO TIME.
ACCS2==12
ACDS==13
ACER==14
ACTC==15

P=17		;PUSH DOWN LIST AC.


;TAPE REGISTERS.
;SEE LAST PAGE FOR FULL WORD DEFINITIONS.

;MTCS1		;CONTROL AND STATUS ONE.
	CS1SC==100000
	CS1TRE==040000
	CS1MCP==020000
	CS1MFN==000077
	    FNPBSR==33
	    FNPRED==71
	    FNPDRC==11

;MTWC		;WORD COUNT.

;MTBA		;UNIBUS ADDRESS.

;MTFC		;FRAME COUNT.

;MTCS2		;CONTROL AND STATUS TWO.
	CS2DLT==100000
	CS2NED==010000
	CS2NXM==004000
	CS2PGE==002000
	CS2MXF==001000
	CS2MDP==000400
	CS2CLR==000040

;MTDS		;DRIVE STATUS.
	DSATA==100000
	DSERR==040000
	DSEOT=002000
	DSDRY==000200
	DSSSC==000100
	DSTM==000004

;MTER		;ERROR.
	ERCOR==100000
	ERUNS==040000
	EROPI==020000
	ERDTE==010000
	ERNEF==004000
	ERCS==002000
	ERFCE==001000
	ERNSG==000400
	ERPEF==000200
	ERINC==000100
	ERFMT==000020
	ERCPAR==000010
	ERRMR==000004
	ERILR==000002
	ERILF==000001

;MTSN		;DRIVE SERIAL NUMBER.

;MTTC		;TAPE CONTROL.
	TCMDEN==003400
	    PE=002000
	TCMFRM==000360
	    IBM==000060
	TCMPAR==000010
	TCMUNI==000007


;UBA REGISTERS.
;SEE LAST PAGE FOR FULL WORD DEFINITIONS.

;UBA1RM		;UNIBUS 1 PAGING RAM.
	UBAVAL==040000

;UBA1SR		;UNIBUS 1 STATUS REGISTER.
	UBATMO==400000
	UBAMPE==200000
	UBABPE==100000
	UBANDV==040000
	UBAPWF==001000
	UBAINI==000100

;UBA3RM		;UNIBUS 3 PAGING RAM.

;UBA3SR		;UNIBUS 3 STATUS REGISTER.


;8080.
CTYOWD==33		;WORD FOR OUTPUT.
	CTYOVL==1B27	;OUTPUT VALID FLAG.


;NEW KS INSTRUCTIONS.

OPDEF WRAPR [700200000000]
	APRCLF==020000	;CLEAR FLAGS INDICATED BY BITS 26-31.
	APRSTF==010000	;SET FLAGS      "      "   "    ".
	APR808==002000	;INTERRUPT THE 8080.
	APRNXM==000400	;NXM.

OPDEF RDAPR [700240000000]

OPDEF WRPI [700600000000]
	PICLR==010000
	PIOFF==001000
	PIDEA==000400
	PICHN==000177

OPDEF RDIO [712000000000]

OPDEF WRIO [713000000000]

OPDEF BSIO [714000000000]

OPDEF PJRST [JRST]


DEFINE FATERR (MSG)<
	JRST	[MOVEI TAC1,[ASCIZ !MSG!](R)
		JRST	TYPERR(R)](R)>

DEFINE FA2ERR (MSG)<
	JRST	[MOVEI TAC1,[ASCIZ !MSG!](R)
		JRST	REGERR(R)](R)>


LOC 1000


;MOVE THE LOADER OUT OF THE WAY, TO THE "TOP" OF CORE.


    ;FIND THE TOP OF CONTIGUOUS CORE (BUT <= 256K.).
	WRAPR	APRCLF!APRNXM	;CLEAR NXM.
	HRROI	R,0		;R/-1,,0.
NXMCHK:	ADDI	R,2000		;GO BY 1 K CHUNKS.
	MOVE	0,(R)		;TRY TO CAUSE NXM.
	RDAPR	TAC1		;
	TRNN	TAC1,APRNXM	;NXM?
	JUMPL	R,NXMCHK	;NO, AND NOT END OF CORE.

    ;BLT US UP OUT OF THE WAY OF THE FILE TO BE LOADED.
	HRRZI	R,-2000(R)	;LEAVE ROOM FOR US(1 PAGE) +
	MOVEI	TAC1,(R)	;1 PAGE BUFFER.
	HRLI	TAC1,1000	;OLD START IS 1000.
	BLT	TAC1,777(R)	;
	HRRZI	R,-1000(R)	;
	JRST	.+1(R)		;GO TO NEW START.

;INITIALIZE SOME THINGS.


	MOVEI	TAC1,UBAINI	;CLEAR ALL
	BSIO	TAC1,@UBA1SR(R)	;PERIPHERAL
	BSIO	TAC1,@UBA3SR(R)	;KONTROLLERS.
	WRPI	PICLR!PIOFF!PIDEA!PICHN ;TURN OFF & CLR PI SYS.
	MOVE	P,PDL(R)	;SET UP
	ADDI	P,(R)		;PUSHDOWN LIST.
	RDIO	TAC1,@MTTC(R)	;FIND UNIT, FORMAT, DENSITY, AND
	ANDI	TAC1,TCMDEN!TCMFRM!TCMPAR!TCMUNI ;PARITY.  CLEAR
	MOVEM	TAC1,SAVTC(R)	;ALL BUT THESE.  SAVE THEM.
	ANDI	TAC1,TCMUNI	;
	HRLM	TAC1,SAVTC(R)	;
;MAIN ROUTINE TO LOAD IN THE MONITOR.


FTBOOT:	SETZM	30		;CLEAR
	MOVE	TAC1,[XWD 30,31](R) ;MOST OF
	BLT	TAC1,FTBOOT(R)	;CORE.
	PUSHJ	P,KONINI(R)	;INITIALIZE TAPE KONTROLR/DRIVE.
	PUSHJ	P,REDREC(R)	;JUMP EOF AFTER KSTLOD
	FATERR	<NO EOF AFTER KSTLOD>
	PUSHJ	P,REDREC(R)	;READ 1ST PAGE.
	SKIPE	LENEND(R)	;OKAY IF NO LENERR.
	JRST	FTBERR(R)	;GO TO LEN ERR OR EOF DIE.
	HRRZI	TAC1,BUF(R)	;PNTR TO
	HRLI	TAC1,-1000	;DATA AREA.

EXPND0:	PUSHJ	P,RWORD(R)	;GET -N,,LOC OR JRST WORD.
	SKIPL	TAC3,TAC2	;JRST WORD?
	JRST	GO(R)		;YES.
EXPND:	PUSHJ	P,RWORD(R)	;EXPAND.
	MOVEM	TAC2,1(TAC3)	;STORE WORD.
	AOBJN	TAC3,EXPND(R)	;ADJUST CORE PNTR.
	JRST	EXPND0(R)	;CONTINUE.

RWORD0:	SKIPN	TAC1,LENEND(R)	;PNTR
	HRLZI	TAC1,-1000	;TO
	HRRI	TAC1,BUF(R)	;DATA AREA.
RWORD:	JUMPGE	TAC1,RWNXT(R)	;JUMP ON NEED A PAGE.
	MOVE	TAC2,(TAC1)	;GET THE WORD.
	AOBJN	TAC1,.+1(R)	;ADJUST PNTR TO DATA AREA.
	POPJ	P,		;RETURN.
RWNXT:	SKIPE	LENEND(R)	;DONE (LENERR)?
	JRST	FTBERR(R)	;GO TO LEN ERR OR EOF DIE.
	PUSH	P,TAC3		;SAVE SINCE DESTROYED IN REDREC
	PUSHJ	P,REDREC(R)	;READ A PAGE.
	POP	P,TAC3		;RESTORE TAC3
	JRST	RWORD0(R)	;OKAY.
FTBERR:	FATERR	<LEN ER OR EOF>

GO:	PUSH	P,TAC3		;SAVE 
	PUSHJ	P,REDREC(R)	;READ PAST THE
	JRST	.-1(R)		;MONITOR EOF.
	POP	P,TAC3		;RESTORE TAC3
	MOVEI	TAC1,UBAINI	;CLEAR
	BSIO	TAC1,@UBA3SR(R)	;UBA3.
	JRST	(TAC3)		;START MONITOR.
;SUBR TO INITIALIZE KONTROLLER AND UBA RAM AT START.

KONINI:	MOVEI	TAC1,UBAINI	;CLEAR UBA 3 AND ALL ITS
	BSIO	TAC1,@UBA3SR(R)	;DEVICES.

    ;HERE TO SET UP UBA PAGING RAM.
	MOVEI	TAC1,BUF(R)	;GET THE PHYSICAL
	LSH	TAC1,-9		;PAGE NUMBER OF THE BUFFER.
	TRO	TAC1,UBAVAL	;MAKE THE ENTRY VALID.
	WRIO	TAC1,@UBA3RM(R)	;
	POPJ	P,
;SUBR TO HELP START UP A COMMAND.  CALLER HAS SET ALL DEVICE
;REGISTERS OF INTEREST EXCEPT CS1.  EXPECTS TAC2/ WHAT TO WRITE
;INTO CS1.  THIS ROUTINE CHECKS FOR REGISTER PARITY ERRORS,
;STARTS THE FUNCTION, WAITS FOR THE FUNCTION TO COMPLETE,
;SETS UP REGS AFTERWARD, AND CHECKS THEM FOR PAR ERRS.
;THIS ROUTINE EXPECTS ONLY READ AND BACKSPACE RECORD COMMANDS.
;THIS ROUTINE DIES WITH A FATAL ERROR MSG IF THERE ARE ERRORS.

STRTIT:	RDIO	ACER,@MTER(R)	;WERE THERE ERRORS
	RDIO	ACCS1,@MTCS1(R)	;ON THE REGISTER
	TRNE	ACCS1,CS1MCP	;READS OR
	FA2ERR	<REG READ PAR ER>
	TRNE	ACER,ERCPAR!ERRMR!ERILR ;WRITES?
	FA2ERR	<REG WRITE PAR ER OR IL/NONEXS REG>
	MOVEI	TAC1,FNPDRC
	WRIO	TAC1,@MTCS1(R)		;ISSUE DRIVE CLEAR
	WRIO	TAC2,@MTCS1(R)	;REQUEST FUNCTION.
	AOS	NUMIO(R)

    ;WAIT FOR COMPLETION.
	ANDI	TAC2,CS1MFN	;READS MUST WAIT
	MOVEI	TAC1,DSDRY	;FOR DRIVE
	CAIN	TAC2,FNPRED	;READY,
	JRST	STRTI4(R)	;AND
	MOVEI	TAC1,DSATA	;BSR WAITS
	CAIE	TAC2,FNPBSR	;FOR ATA.
	FA2ERR	<STRTIT LOGIC ER>
STRTI4:	MOVEI	TAC2,^D250000	;
	RDIO	ACDS,@MTDS(R)	;LOOK FOR ATA OR DRY.
	TRNN	ACDS,(TAC1)	;ATTENTION OR DRIVE READY?
	SOJG	TAC2,.-2(R)	;NOT YET.

    ;CHECK HERE FOR ERRORS.
	RDIO	ACCS2,@MTCS2(R)	;READ SOME REGISTERS
	RDIO	ACER,@MTER(R)	;OF INTEREST, BOTH FOR
	RDIO	ACFC,@MTFC(R)	;NORMAL RESULT AND FOR
	RDIO	ACCS1,@MTCS1(R)	;ERROR HANDLING.
	RDIO	TAC3,@UBA3SR(R)	;FIRST CHECK THE
	TRNE	TAC3,UBATMO!UBAMPE!UBABPE!UBANDV!UBAPWF ;UNIBUS.
	FATERR	<UBA DETECTED ER>
	JUMPN	TAC2,.+2(R)	;JUMP UNLESS TIMED OUT.
	FATERR	<NO RESPONS FROM DEV>
	TRNE	ACCS1,CS1MCP	;ANY ERRORS ON REG READS?
	FATERR	<REG READ PAR ER>
	TRNE	ACER,ERCPAR!ERRMR!ERILR!ERILF ;ERR ON DRIVE WRITE?
	FATERR	<REG WRITE PAR ER, IL FNC/REG, OR REG MOD REFUSD>
	POPJ	P,
COMMENT #
@@SUBROUTINE REDREC
@@PURPOSE
SUBROUTINE TO READ ONE RECORD (1000 WORDS LONG) FROM THE TAPE.
DOES A LITTLE ERROR RECOVERY.  ASSUMES THE DRIVE IS ERROR-FREE
ON ENTRY TO THIS ROUTINE.
@@ENTRY
EXPECTS
@@ACCUM
DESTROYS
@@EXIT
(1) SKIP RETURNS ON EOF.
(2) NON-SKIP RETURNS ON NORMAL (ERROR FREE OR JUST LENERR) READ.
    (IF LENERR, NEGATIVE COUNT OF WORDS READ IS RETURNED IN 
	THE LH OF LENEND, ELSE LENEND/0.).
(3) DIES WITH FATAL ERROR MSG IF UNRECOVERABLE ERROR SEEN.
@@ #

REDREC:	MOVEI	TAC1,^D10	;SET UP RETRY
	MOVEM	TAC1,COUNT(R)	;COUNT.

    ;SET UP THE VARIOUS REGISTERS AND THEN SAY GO.
REDAGN:	HLRZ	TAC1,SAVTC(R)	;SET THE UNIT
	WRIO	TAC1,@MTCS2(R)	;FIELD IN CS2.
	MOVNI	TAC1,2000	;SET UP COUNT OF
	WRIO	TAC1,@MTWC(R)	;1000 WORDS.
	SETZ	TAC1,		;
	WRIO	TAC1,@MTFC(R)	;CLEAR THE FRAME COUNT.
	WRIO	TAC1,@MTBA(R)	;UBA PAGING RAM ALREADY SET UP.
	HRRZ	TAC1,SAVTC(R)	;SET DENS, FMT, PAR,
	WRIO	TAC1,@MTTC(R)	;AND UNIT.  SET UP TO SAY UNIBUS
	MOVEI	TAC2,FNPRED	;A, A17&A16=0, NO IE, FN AND GO.
	PUSHJ	P,STRTIT(R)	;
	TRNE	ACCS1,CS1SC	;ANY ERROR ON THE READ ATTEMPT?
	JRST	REDERR(R)	;YES.

    ;NO ERRORS, EXCEPT MAYBE LENERR(FLAVOR REC TOO BIG) OR EOF.
REDNER:	TRNN	ACDS,DSTM	;EOF?
	JRST	.+3(R)		;NO.
REDTM:	AOS	(P)		;YES, SKIP
	POPJ	P,		;RETURN.
REDLER:	SETZM	LENEND(R)	;SAY, NO LENGTH ERROR.
	MOVE	TAC1,ACFC	;GET COUNT OF BYTES READ.
	HRRZ	TAC3,SAVTC(R)	;GET THE
	ANDI	TAC3,TCMFRM	;FORMAT.
	CAIE	TAC3,IBM	;IBM OR DEC?
	JRST	REDLR2(R)	;DEC.
	IDIVI	TAC1,4		;IBM.  CONVERT TO WORDS.
	JUMPE	TAC2,REDLR4(R)	;A PARTIAL WORD?
	AOJA	TAC1,REDLR4(R)	;YES.  COUNT IT.
REDLR2:	JUMPE	TAC3,.+2(R)	;BETTER BE DEC.
	FATERR	<UNKNWN FORMAT>
	IDIVI	TAC1,5		;DEC.
REDLR4:	CAIN	TAC1,1000	;LENGTH ERROR?
	POPJ	P,		;NO.
	MOVNI	TAC1,(TAC1)	;YES.
	HRLZM	TAC1,LENEND(R)	;STORE COUNT READ IN LENEND.
	POPJ	P,		;RETURN.

    ;HERE ON ERROR ON READ.  MAYBE NON-FATAL, FATAL, OR
    ;LENERR (FLAVOR REC TOO SMALL).
REDERR:	SOSGE	COUNT(R)	;COUNT=COUNT-1.
	FATERR	<OUT OF RETRIES ON READ FAILS>
	TRNN	ACDS,DSATA	;SC>ATTENTION?
	JRST	REDER2(R)	;NO, MUST BE SC>TRE.
	TRNE	ACDS,DSSSC	;SC>ATA>SSC?
	FATERR	<INTRVNT REQ'D OR PWR FAL>
	TRNE	ACDS,DSEOT	;SC>ATA>EOT?
	FATERR	<READ: SAW EOT>
	TRNE	ACDS,DSTM
	JRST	REDTM(R)		;JUMP ON TAPE MARK
	FATERR	<RD UNKNWN ER 1>
REDER2:	TRNN	ACCS1,CS1TRE	;MUST BE SC>TRE HERE.
	FATERR	<RD UNKNWN ER 2>
	TRNE	ACCS2,CS2NXM	;NXM?
	FATERR	<NXM>
	TRNE	ACCS2,CS2NED!CS2PGE!CS2MXF!CS2MDP ;
	FATERR	<HRDWARE OR LOGIC ER(NED,PGE,MXF,MDP)>
	TRNN	ACCS2,CS2DLT	;THIS LEAVES DLT/DSERR.
	JRST	REDER6(R)	;BETTER BE DSERR.
	JUMPE	ACER,REDPOS(R)	;JUMP IF JUST DLT.
	JRST	REDR62(R)	;SEE IF DSERR OVERRIDES DLT.
    ;HERE ON DSERR.
REDER6:	JUMPN	ACER,.+2(R)	;BUG CHECK.
	FATERR	<RD UNKNWN ER 3>
REDR62:	TRNE	ACER,ERUNS	;UNSAFE?
	FATERR	<INTRVNT REQ'D OR PWR FAL>
	TRNE	ACER,ERDTE!ERNEF!ERFMT ;
	FATERR	<HRDWARE OR LOGIC ER(DTE,NEF,FMT)>
	TRNE	ACER,EROPI	;RUNAWAY?
	FATERR	<HNG DEV>
	TRNE	ACER,ERNSG!ERPEF!ERINC ;NON-FATAL, BSR NEEDED?
	JRST	REDPOS(R)	;GO TO BSR.
	TRNE	ACCS2,CS2DLT ;IF WE GOT HERE FROM TRE, WE
	JRST	REDPOS(R)	;HAVE SEEN ALL OVERRIDERS.
	HRRZ	TAC1,SAVTC(R)	;ARE WE IN PE
	TRNE	TAC1,PE		;OR NRZ?
	JRST	REDER7(R)	;PE. IGNORE COR AND CS.
	TRNE	ACER,ERCOR	;NRZ.
	JRST	REDPOS(R)	;
	TRNE	ACER,ERCS	;SEMI-TAPE MARK?
	JRST	REDTM(R)	;
REDER7:	TRNN	ACER,ERFCE	;LENERR?
	JRST	REDNER(R)	;MUST BE PE NO ERROR.
	JRST	REDLER(R)	;LEN ERR, RECORD TOO SHORT.

    ;HERE WHEN PROBABLY NEED TO BSR BEFORE READ RETRY.
REDPOS:	PUSHJ	P,KONINI(R)	;CLEAR THINGS UP.
	CAIGE	ACFC,^D13	;WAS THIS A NOISE RECORD?
	JRST	REDAGN(R)	;YES, NO NEED TO BSR FIRST.
	HLRZ	TAC1,SAVTC(R)	;SET THE UNIT
	WRIO	TAC1,@MTCS2(R)	;FIELD IN CS2.
	MOVEI	TAC1,1		;
	WRIO	TAC1,@MTFC(R)	;
	HRRZ	TAC1,SAVTC(R)	;SET DENS, FMT, PAR,
	WRIO	TAC1,@MTTC(R)	;AND UNIT.
	MOVEI	TAC2,FNPBSR	;
	PUSHJ	P,STRTIT(R)	;
	TRNN	ACCS1,CS1TRE	;ANY ERRORS
	TRNE	ACDS,DSERR	;ON THE BSR?
	JRST	RDPSER(R)	;YES.
	TRNN	ACDS,DSATA	;MAYBE.  WE EXPECT ATA WITHOUT SSC.
	FATERR	<BSR: NO ATA>
	TRNE	ACDS,DSSSC	;
	FATERR	<INTRVNT REQ'D OR PWR FAL>
	JRST	REDAGN(R)	;ERROR FREE BSR.

RDPSER:	TRNE	ACER,ERUNS	;
	FATERR	<INTRVNT REQ'D OR PWR FAL>
	TRNN	ACCS2,CS2NED	;
	TRNE	ACER,ERNEF!ERFCE
	FATERR	<HRDWARE OR LOGIC ER(NED,NEF,FCE)>
	TRNE	ACER,EROPI	;RUNAWAY?
	FATERR	<HNG DEV>
	FATERR	<BSR UNKNWN ER>
COMMENT #
@@SUBROUTINE TYPERR/REGERR
@@PURPOSE
SUBR TO TYPE OUT A FATAL ERROR MESSAGE, SOME REGISTERS, AND
THEN DIE.  TYPERR TYPES OUT CS1/CS2/FC/DS/ER/WC/BA/TC/SN AND
UBA3SR.  REGERR TYPES OUT CS1/ER AND TAC2.
@@ENTRY
BOTH TYPERR AND REGERR EXPECT TAC1/ ADDRESS OF FATAL ERROR
MSG IN ASCIZ.  TYPERR EXPECTS THE REGISTER ACS FOR CS1/CS2/FC/
DS/ER TO BE ALREADY SET UP.  REGERR EXPECTS THE REGISTER ACS FOR
CS1/ER TO BE ALREADY SET UP.
@@ACCUM
DESTROYS TAC1-TAC6.
@@EXIT
NEVER RETURNS.
@@ #

REGERR:	MOVEI	TAC5,AC2TAB(R)	;
	MOVE	TAC6,TAC2	;SAVE FOR TYPE OUT BELOW.
	JRST	.+2(R)		;

TYPERR:	MOVEI	TAC5,ACTAB(R)	;
	PUSHJ	P,SAVREG(R)
	PUSHJ	P,CRLF(R)	;PRECEED IT BY CR,LF.
	MOVE	TAC2,[POINT 7,(TAC1)](R)
FATER2:	ILDB	TAC3,TAC2	;GET THE NEXT CHARACTER.
	JUMPE	TAC3,FATER4(R)	;JUMP IF TEXT MESSAGE IS DONE.
	PUSHJ	P,ASCCHR(R)	;
	JRST	FATER2(R)	;
FATER4:	PUSHJ	P,CRLF(R)	;FOLLOW MSG BY CR,LF.
	PUSHJ	P,OUTREG(R)	;TYPE OUT THE TAPE REGS.
	HALT	.(R)		;DIE.


COMMENT #
@@SUBROUTINE SAVREG
@@ PURPOSE
SUBROUTINE TO STORE REG INTO MEMORY
@@ #
SAVREG:	MOVEM	TAC1,MAC1(R)
	MOVEM	TAC2,MAC1+1(R)
	MOVEM	TAC3,MAC1+2(R)
	HRLI	TAC1,-11
	HRRI	TAC1,MAC1+3(R)	;START OF SAVE AREA PLUS -COUNT
	HRRZI	TAC3,TAC4
SAVR2:	MOVE	TAC2,(TAC3)
	MOVEM	TAC2,(TAC1)
	AOJ	TAC3,
	AOBJN	TAC1,SAVR2(R)
	MOVE	TAC1,MAC1(R)
	MOVE	TAC2,MAC1+1(R)
	move	tac3,mac1+2(r)
	HALT	.(R)		;DEBUG
	POPJ	P,


COMMENT #
@@SUBROUTINE ASCCHR
@@PURPOSE
SUBR TO OUTPUT A CHARACTER TO THE 8080.
@@ENTRY
EXPECTS CHAR IN TAC3.
@@ACCUM
DESTROYS TAC3.
@@EXIT
NON-SKIP RETURNS, UNLESS 8080 IS DEAD IN WHICH CASE IT
JUST DIES.
@@ #

ASCCHR:	PUSHJ	P,GETPAR(R)	;PUT PARITY ON THIS CHARACTER.
	TRO	TAC3,CTYOVL	;SAY CHARACTER IS VALID.
	MOVEM	TAC3,CTYOWD	;
	WRAPR	APRSTF!APR808	;WHAP THE 8080.
	SKIPE	CTYOWD		;CHARACTER TAKEN YET?
	JRST	.-1(R)		;NO, WAIT.
	POPJ	P,		;OKAY, CHARACTER TAKEN.


COMMENT #
@@SUBROUTINE CRLF
@@PURPOSE
SUBR TO TYPE OUT A CR, LF.
@@ACCUM
DESTROYS TAC3.
@@ #

CRLF:	MOVEI	TAC3,15		;CR.
	PUSHJ	P,ASCCHR(R)	;
	MOVEI	TAC3,12		;LF.
	PJRST	ASCCHR(R)	;



COMMENT #
@@SUBROUTINE GETPAR
@@PURPOSE
SUBR TO PUT EVEN PARITY ON THE CHARACTER IN TAC3.
@@ENTRY
EXPECTS CHAR IN TAC3.
@@ACCUM
DESTROYS TAC3.
@@EXIT
RETURNS CHAR IN TAC3.
@@ #

GETPAR:	PUSH	P,TAC1
	PUSH	P,TAC2
	LDB	TAC1,[POINT 7,TAC3,35](R)
	IMUL	TAC1,[2010040201](R)
	AND	TAC1,[21002104377](R)
	IDIVI	TAC1,3600
	LDB	TAC3,[POINT 8,TAC1+1,35](R)
	POP	P,TAC2
	POP	P,TAC1
	POPJ	P,



COMMENT #
@@SUBROUTINE OUTREG
@@PURPOSE
SUBR TO TYPE OUT THE CONTENTS OF SOME DEVICE REGISTERS OF
INTEREST.
@@ENTRY
TYPES OUT MTSC1/CS2/WC/FC/BA/DS/ER/TC/SN AND UBA3SR.
EXPECTS ACCS1/CS2/FC/DS/ER TO BE SET UP ON ENTRY.  READS
MTWC/BA/TC/SN AND UBA3SR ITSELF.
EXPECTS TAC5/ ADDRESS OF CONTROL TABLE.
@@ACCUM
DESTROYS TAC1-TAC5.
@@ #

OUTREG:	SKIPN	TAC2,(TAC5)	;TAC2/ADR OF VALUE,,SIXBIT NAME.
	POPJ	P,		;NO MORE ENTRIES.
	PUSH	P,TAC5		; SAVE TAC5
	PUSHJ	P,TYPVAL(R)	;TYPE THIS ENTRY.
	POP	P,TAC5
	AOJ	TAC5,
	JRST	OUTREG(R)	;LOOK FOR ANOTHER ENTRY.

ACTAB:	ACCS1,,(SIXBIT/CS1/)
	ACCS2,,(SIXBIT/CS2/)
	ACFC,,(SIXBIT/FC/)
	ACDS,,(SIXBIT/DS/)
	ACER,,(SIXBIT/ER/)
	MTWC,,(SIXBIT/WC/)
	MTBA,,(SIXBIT/BA/)
	MTTC,,(SIXBIT/TC/)
	MTSN,,(SIXBIT/SN/)
	UBA3SR,,(SIXBIT/UBA/)
	Z

AC2TAB:	ACCS1,,(SIXBIT/CS1/)
	ACER,,(SIXBIT/ER/)
	TAC6,,(SIXBIT/TA2/)
	Z


    ;DESTROYS TAC1-TAC4.
    ;EXPECTS TAC2/ ADDR OF VALUE,,SIXBIT NAME.
TYPVAL:	HRRZ	TAC1,TAC2	;GET TAC1/ SIXBIT NAME.
	MOVEI	TAC4,40		;INCREMENT TO MAKE ASCIZ.
	MOVE	TAC5,[POINT 6,TAC1,^D17](R)
	PUSHJ	P,OCTOUT(R)	;TYPE IT OUT.
	MOVEI	TAC3,40		;SEPARATE IT FROM VALUE BY
	PUSHJ	P,ASCCHR(R)	;TWO
	MOVEI	TAC3,40		;BLANK
	PUSHJ	P,ASCCHR(R)	;SPACES.
	HLRZ	TAC2,TAC2	;GET TAC1/ ADDRESS OF VALUE.
	CAIGE	TAC2,20		;KROCK.
	JRST	TYPVL2(R)	;
	ADDI	TAC2,(R)	;NOT AN AC.
	RDIO	TAC1,@(TAC2)	;GET REGISTERS INDIRECT.
	JRST	TYPVL3(R)
TYPVL2:	MOVE	TAC1,(TAC2)
TYPVL3:	MOVEI	TAC4,60		;
	MOVE	TAC5,[POINT 3,TAC1,^D17](R)
	PUSHJ	P,OCTOUT(R)	;TYPE IT OUT.
	PJRST	CRLF(R)		;FOLLOW IT BY A CR,LF.



    ;DESTROYS TAC3 AND TAC5.
    ;EXPECTS TAC1/ MAX OF 18 BITS(RIGHT ADJUSTED) AND TAC4/
    ;INCREMENT TO MAKE CHARACTERS ASCIZ.
OCTOUT:
OCTOU2:	ILDB	TAC3,TAC5	;GET NEXT DIGIT.
	ADDI	TAC3,(TAC4)	;MAKE IT ASCIZ.
	PUSHJ	P,ASCCHR(R)	;
	TLNE	TAC5,770000	;AT END OF WORD?
	JRST	OCTOU2(R)	;
	POPJ	P,		;YES.
SAVTC:	Z		;
NUMIO:	Z		;SAVE NUMBER OF IO REQUESTS

PDL:	IOWD 14,.+1
	BLOCK 14

LENEND:	Z		;
COUNT:	Z		;HOLDS RETRY COUNT FOR READ A PAGE.

MAC1:	BLOCK	14

;SEE PAGE 1 FOR DEFINITIONS OF TAPE REGISTERS.
MTCS1:	XWD 1,776700	; XWD 3,772440
MTWC:	XWD 1,776702	; XWD 3,772442
MTBA:	XWD 1,776704	; XWD 3,772444
MTFC:	XWD 1,776706	; XWD 3,772446
MTCS2:	XWD 1,776710	; XWD 3,772450
MTDS:	XWD 1,776712	; XWD 3,772452
MTER:	XWD 1,776714	; XWD 3,772454
MTSN:	XWD 1,776730	; XWD 3,772470
MTTC:	XWD 1,776732	; XWD 3,772472

;SEE PAGE 1 FOR DEFINITIONS OF UBA REGISTERS.
UBA1RM:	XWD 1,763000	;USE FOR CLEAR (ONLY)
UBA1SR:	XWD 1,763100
UBA3RM:	XWD 1,763000	; XWD 3,763000
UBA3SR:	XWD 1,763100	; XWD 3,763100
LIT

LODEND==.
IFG LODEND-2000,<PRINTX<LOADER TOO BIG; IT MUST FIT IN 1 PAGE.>>

BUF==2000		;START OF 1 PAGE BUFFER FOR READS.

DUMP:	RESET
	OPEN [	17
		SIXBIT/DSK/
		0]
	 JRST 4,.
	ENTER [	SIXBIT/KS1LODDMP/
		0
		0]
	 JRST 4,.
	OUTPUT [-1000,,777
		0]
	EXIT

END DUMP
    