        TITLE TIEMAC - Supporting routines for TIE
        TWOSEG
        RADIX   8
        RELOC   400000

        KATAFG==1       ; KATA KANA CONDITIONAL ASSEMBLY FLAG
                        ;  0 FOR NO KATA KANA
                        ;  1 FOR KATA KANA


;TIRE entries:

TIRCNT==0
RTNCOD==1
OB.ADR==2
NB.ADR==3
PROMPT==4
TABADR==5
%STALT==6
%ACTVT==7
TXT.P==8
ACTCHR==^D9
ACONDP==^D10
ACONQP==^D11
ACRING==^D12
ACTMSK==^D13
BUFNUM==^D14

%GTCHR==^D17
%OTCHR==^D18
CTL.P==^D19
CTLG.P==^D20
CONTNP==^D21
SEMI.P==^D22
KATA.P==^D23
;CHARACTER FLAGS

        PUNC.F==      1 ;Punctuation other than below
        ALPHA==       2 ;Lower and Upper case alpha, numerics and space
        DDT.F==       4 ;% ; ! (DDT activation characters)
        ACEDIT==     10 ;/ = _ ^ (EDITOR activation characters)
        CNTRL==      60 ;Control characters and DEL other than ^I ^J ^M
        CTL.I==     100 ;Control I (TAB)
        ACMCJC==    200 ;Control M (Carriage Return) and Control J (Line Feed)
        B.LOAD==    400 ;Control chars that have a function while loading a buffer
        DEL.F==    1000 ;Character is a text delimeter
        ADD2.F==   2000 ;Delimeter character whose match is char+2
        TEX.F==    4000 ;Text delimeter: ' " [ ]
        LET.F==   10000 ;Lower and upper case alpha but not space
        NUM.F==   20000 ;Numeral
        CTL.F==   40000 ;Alphabetic control characters (^A thru ^Z)

        ACT.F==CNTRL!ACMCJC!ACEDIT
        TERM.F==ACMCJC
        ENTRY   .HMSG

.HMSG:  OUTSTR [ASCIZ /Please use Control N
/]
        POPJ    17,
;CHARACTER TABLE



.CTTAB::XWD     CNTRL,0
        XWD     CTL.F+CNTRL+B.LOAD,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL+B.LOAD,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CTL.I,.-.CTTAB
        XWD     CTL.F+ACMCJC,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
CRFLG::!XWD     CTL.F+ACMCJC+B.LOAD,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL+B.LOAD,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL+B.LOAD,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB
        XWD     CTL.F+CNTRL,.-.CTTAB

        XWD     CNTRL,.-.CTTAB                  ; ESC

        XWD     CNTRL,.-.CTTAB                  ; FS (CTL-\)
        XWD     CNTRL,.-.CTTAB                  ;    (CTL-])
        XWD     CNTRL,.-.CTTAB                  ;    (CTL-^)
        XWD     CNTRL,.-.CTTAB                  ;    (CTL-_)
        XWD     ALPHA,.-.CTTAB                  ; SPACE

        XWD     DEL.F+DDT.F,.-.CTTAB            ; !
        XWD     DEL.F+TEX.F+PUNC.F,.-.CTTAB       ; "

        XWD     PUNC.F,.-.CTTAB                   ; #
        XWD     PUNC.F,.-.CTTAB                   ; $
        XWD     DDT.F,.-.CTTAB                  ; %
        XWD     PUNC.F,.-.CTTAB                   ; & 
        XWD     DEL.F+TEX.F+PUNC.F,.-.CTTAB       ; '

        XWD     PUNC.F,.-.CTTAB                   ; (
        XWD     PUNC.F,.-.CTTAB                   ; )
        XWD     PUNC.F,.-.CTTAB                   ; *
        XWD     PUNC.F,.-.CTTAB                   ; +
        XWD     PUNC.F,.-.CTTAB                   ; ,
        XWD     PUNC.F,.-.CTTAB                   ; -
        XWD     PUNC.F,.-.CTTAB                   ; .
        XWD     ACEDIT,.-.CTTAB                 ; /

;NUMBERS

REPEAT 12,<     XWD     NUM.F+ALPHA,.-.CTTAB
>

        XWD     DEL.F+PUNC.F,.-.CTTAB             ; :
        XWD     DDT.F,.-.CTTAB                  ; ;
        XWD     DEL.F+ADD2.F+PUNC.F,.-.CTTAB      ; <
EQFLG::!XWD     ACEDIT,.-.CTTAB                 ; =
        XWD     DEL.F+PUNC.F,.-.CTTAB             ; >
        XWD     PUNC.F,.-.CTTAB                   ; ?
        XWD     PUNC.F,.-.CTTAB                   ; @

;Upper case alpha
REPEAT 32,<     XWD     LET.F+ALPHA,.-.CTTAB
>

        XWD     DEL.F+ADD2.F+TEX.F+PUNC.F,.-.CTTAB; [
        XWD     PUNC.F,.-.CTTAB                   ; \
        XWD     DEL.F+TEX.F+PUNC.F,.-.CTTAB       ; ]
UPFLG::!XWD     ACEDIT,.-.CTTAB                 ; ^
        XWD     ACEDIT,.-.CTTAB                 ; _
        XWD     PUNC.F,.-.CTTAB                   ; `

;Lower case alpha

REPEAT 32,<     XWD     LET.F+ALPHA,.-.CTTAB
>

        XWD     PUNC.F,.-.CTTAB                   ; {
        XWD     PUNC.F,.-.CTTAB                   ; |
        XWD     PUNC.F,.-.CTTAB                   ; }
        XWD     PUNC.F,.-.CTTAB                   ; ~
        XWD     CNTRL,.-.CTTAB                  ; DEL

; EXTENDED ASCII CHARACTERS  (KATA KANA)


        IFN KATAFG,<

REPEAT ^O20,<	XWD     LET.F+ALPHA,.-.CTTAB
>
  XWD     ALPHA,.-.CTTAB        ;KK SPACE

REPEAT ^O157,<  XWD     LET.F+ALPHA,.-.CTTAB
>
>
 ;Sets and returns values in link arrays for intraline editing.
 ;Each bit corresponds to a character position
 ;in the new or old line image. The first word contains values for positions
 ;zero thru 35: the 35th bit is bit 0, etc.
 ;If a bit in the new line is on, then the character position corresponding
 ;to that bit has not been entered in an insert.
 ;If a bit in the old line is on, then the character position corresponding
 ;to that bit has not been deleted with Control-S, -K, -P, or -X.
 ;First parameter, in register 1, contains the position  >=0 
 ;Second parameter, in register 2, contains the address of the first
 ;word of the bit array.

        param1=1
        param2=2
        addr=3
        mask=4
        div=5           ;quotient
        rem=6           ;remainder
        opr=7           ;contains word to be operated upon
        p=17            ;subroutine call register

        r0==0
        r1==1
        r2==2
        r3==3
        r4==4
        r5==5
        r6==6

        entry stnphk,stophk,nlhk,olhk

GETOPR: MOVEM   PARAM1,DIV              ;position count into bit array
        IDIVI   DIV,^D36                ;divide by 36
        MOVEI   MASK,1
        LSH     MASK,(REM)              ;create one-bit mask
        ADD     ADDR,DIV
        MOVE    OPR,(ADDR)              ;get the correct word of array.
        POPJ    P,                      ;all done

STNPHK: PUSHJ   P,GETOPR                ;get correct word into opr and set up mask
        SKIPN   PARAM2                  ;skip to set the bit to 1
        TDZA    OPR,MASK                ;set the bit to 0 and skip
        TDO     OPR,MASK                ;set the bit to 1
        MOVEM   OPR,(ADDR)              ;move the word back into the array
        POPJ    P,                      ;return

NLHK:   MOVE    ADDR,PARAM2             ;address of bit array
        PUSHJ   P,GETOPR                ;get correct word of array and set up mask
        TDNE    OPR,MASK                ;skip if bit is zero.
        JRST    ONBIT
        MOVEI   PARAM1,0                ;return value 0
        POPJ    P,
ONBIT:  MOVEI   PARAM1,1                ;return value 1
        POPJ    P,

        stophk=stnphk
        olhk=nlhk
        SUBTTL  IN%CHR Input character

        EXTERN  .TTSTS, I%CHAR, I%MASK, I%TIRE, .LCALT, .TIALT

;Input: R1 - activation mask
;       R2 - routine to call to get a character
;Globals: I%TIRE, global TIRE
;Output:  stores character into I%CHAR, eats linefeed following CR.

        ENTRY   IN%CHR

IN%CHR: MOVEM   R2,ROUTINE
        JUMPE   R2,IN%CH1

        MOVEI   R1,I%TIRE
        PUSHJ   P,(R2)
        MOVEM   R1,I%CHAR
        JRST    IN%CH3

IN%CH1: TRNE    R1,ALPHA
        JRST    IN%CH2          ;Wake up on every char
        INCHWL  I%CHAR
        SKIPA
IN%CH2: INCHRW  I%CHAR

IN%CH3: MOVE    R2,I%CHAR
        CAIE    R2,15
        POPJ    P,

        SKIPN   R2,ROUTINE
        JRST    IN%CH4
        MOVEI   R1,I%TIRE
        PUSHJ   P,(R2)
        POPJ    P,

IN%CH4: INCHRW  R0
        POPJ    P,

        RELOC
ROUTIN: BLOCK 1         ;Store second arg to IN%CHR
        RELOC
        SUBTTL SETUP AND RETURN FOR I%TIE

        ENTRY   .R%RTN, .SETUP

;These routines save, change, and restore the state of terminal characteristics
;necessary for the proper functioning of TIE. All terminal characteristics
;values are stored in the array .TTSTS as follows:

        SVLCH==.TTSTS   ;GETLCH word
        NOTAB==.TTSTS+1 ;state of "no special action on tabs"
        SVSTS==.TTSTS+2 ;TTY status
        SVPRV==.TTSTS+3 ;privilege bits
        ACTAB==.TTSTS+4 ;state of tabs as activation characters
        FILL1==.TTSTS+5 ;filler class 1 value

;Routine to return process to previous state of terminal characteristics.
;Input: R1 - value to be passed through without change
;       .TTSTS - array of terminal characteristics values
;       I%TIRE - global TIRE
;       .LCALT - contains previous escape dispatch address
;Output: R1 - unchanged from input

.R%RTN: PUSH    P,R1

;1. Restore monitor tab recognition:

        HRROI   R2,25
        AUXCAL  R2,NOTAB

;2. Restore tabs as activation characters:

        HRROI   R2,26
        AUXCAL  R2,ACTAB

;3. Restore TTY status (^A and ^Q translation and activation set):

        HRROI   R2,32
        MOVE    R1,SVSTS
        AUXCAL  R2,(R1)         ;weird UUO form!

;4. Restore XEXEC/PDP state:

        MOVE    R1,SVPRV
        SETPRV  R1,

;5. If we are handling escapes, restore previous dispatch address:

        MOVE    R1,.LCALT
        SKIPE   I%TIRE+%STALT
        PUSHJ   P,@I%TIRE+%STALT

        POP     P,R1
        POPJ    P,


;Routine to set up terminal characteristics for current process.
;First, we save the current terminal characteristics in the array .TTSTS .
;Then, if we are trapping escapes, we arm the dispatch address to .TIALT
;and save the previous dispatch address in .LCALT .
;Finally, we set all the terminal characteristics as follows:
; 1. Suppress monitor special action on tabs and form feeds
; 2. Make tab an activation character
; 3. Set TTY status
;       a. no monitor translation of ^A or ^Q
;       b. set appropriate activation set given activation mask I%MASK
; 4. Set PRV mode to XEXEC so ^C is not escape

.SETUP:

;1. Save monitor tab action:

        SETOM   NOTAB
        HRROI   R2,25
        AUXCAL  R2,NOTAB

;2. Save tab activation:

        SETOM   ACTAB
        HRROI   R2,26
        AUXCAL  R2,ACTAB

;3. Save TTY status (^A,^Q translation and activation set):

        PUSHJ   P,GT.STS
        MOVEM   R1,SVSTS

;4. Save PRV bits (XEXEC/PDP):

        HRROI   R2,6
        GETTAB  R2,
         JFCL
        MOVEM   R2,SVPRV

;Save and set escape dispatch address if we are trapping escapes:

        MOVEI   R1,.TIALT
        SKIPE   I%TIRE+%STALT
        PUSHJ   P,@I%TIRE+%STALT
        MOVEM   R1,.LCALT

;1a:

        HRROI   R1,25
        MOVEI   R2,1
        AUXCAL  R1,R2

;2a:

        HRROI   R1,26
        MOVEI   R2,1
        AUXCAL  R1,R2

;3a:

        PUSHJ   P,.T%STS

;4a:

        MOVE    R1,SVPRV
        TRZ     R1,600
        TRO     R1,200
        SETPRV  R1,

        POPJ    P,
        SUBTTL  SUPPORTING TTY ROUTINES

        ENTRY   .T%STS

;Set TTY status (no translation on ^A or ^Q and appropriate activation set).
;I%MASK contains user-requested activation mask.

.T%STS: MOVE    R1,SVSTS
        TRO     R1,100          ;no translation of ^A or ^Q
        MOVE    R2,I%MASK
        TRZ     R1,1000
        TRNE    R2,PUNC.F!DDT.F!ACEDIT  ;activate on punctuation?
        TRO     R1,1000         ;yes
        HRROI   R2,32
        AUXCAL  R2,(R1)         ;weird UUO form!
        POPJ    P,

        ENTRY GT.STS

;Get TTY status into R1.

GT.STS: HRROI   R1,-31
        GETTAB  R1,
         JFCL
        POPJ    P,

        ENTRY TT.POS

;Get TTY position into R1.

TT.POS: HRROI   R1,-32  ;GETLPS
        GETTAB  R1,
         JFCL
        POPJ    P,

        ENTRY TT.WID

;Get TTY width into R1.

TT.WID: HRROI   R0,27
        SETO    R1,
        AUXCAL  R0,R1
        POPJ    P,

        ENTRY   NO.ECH, ON.ECH

;Set echo off and on.

NO.ECH: HRROI   R1,-31          ;GETMOD
        GETTAB  R1,
         JFCL
        TRO     R1,200
        SETMOD  R1,
        POPJ    P,

ON.ECH: HRROI   R1,-31          ;GETMOD
        GETTAB  R1,
         JFCL
        TRZ     R1,200
        SETMOD  R1,
        POPJ    P,
        SUBTTL  VB%CH  VARIABLE BYTE SIZE CH FUNCTION


; INPUT:        R1 ADDRESS OF BUFFER
;               R2 CHARACTER OFFSET  FIRST CHAR IS NUMBER 0
;
; OUTPUT:       R1 SPECIFIED CHARACTER

; GLOBALS:      I%TIRE  GLOBAL TIRE

        ENTRY   VB%CH

VB%CH:  SKIPE   I%TIRE+KATA.P   ; ARE WE DEALING WITH 9 BIT KATA KANA BYTES?
        JRST    DOKATA          ;  YES, GO HANDLE THE 9 BIT CASE

        IDIVI   2,5             ;  NO, ITS FIVE 7 BIT CHARS PER WORD
        JUMPGE  3,VBA           ; IF THE REMAINDER IS NEGATIVE (FROM NEG OFFSET)
        SOJ     2,              ; THEN BACK UP A WORD
        ADDI    3,5             ; AND CORRECT CHARACTER POSITION
VBA:    HLL     1,B7TAB(3)      ; MAKE BYTE POINTER OVER BUFFER ADDRESS
                                ; REMAINDER FROM THE IDIVI CHOOSES WHICH POINTER
        ADD     1,2             ; ADD NUMBER OF FULL WORDS IN CHARACTER OFFSET
        LDB     1,1             ; GET THE SPECIFIED CHARACTER
        POPJ    P,              ; AND RETURN WITH IT IN R1

DOKATA: IDIVI   2,4             ; HERE WE HANDLE THE KATA KANA CASE
        JUMPGE  3,VBB           ; IF REMAINDER IS NEGATIVE
        SOJ     2,              ; THEN BACK UP A WORD
        ADDI    3,4             ; AND POSITATE THE CHARACTER POSITION
VBB:    HLL     1,B9TAB(3)      ; MAKE BYTE POINTER OVER BUFFER ADDRESS
                                ; REMAINDER FROM THE IDIVI CHOOSES WHICH POINTER
        ADD     1,2             ; ADD NUMBER OF FULL WORDS IN CHARACTER OFFSET
        LDB     1,1             ; GET THE SPECIFIED CHARACTER
        POPJ    P,              ; AND RETURN WITH IT IN R1


        SUBTTL V%CHPT  VARIABLE BYTE SIZE CHPT FUNCTION

; INPUT:        R1 ADDRESS OF BUFFER
;               R2 CHARACTER OFFSET

; OUTPUT:       R1 BYTE POINTER TO SPECIFIED CHARACTER

        ENTRY   V%CHPT

        ; THIS LOOKS VERY MUCH LIKE VB%CH ABOVE

V%CHPT: SKIPE   I%TIRE+KATA.P   ; ARE WE DEALING WITH 9 BIT KATA KANA BYTES?
        JRST    KATADO          ;  YES, GO TO IT

        IDIVI   2,5             ;  NO, HANDLE NORMAL ASCII
        JUMPGE  3,VCA           ; REMAINDER MAY BE < 0
        SOJ     2,              ; IN WHICH CASE WE BACK UP ONE WORD
        ADDI    3,5             ; AND CORRECT THE CHARACTER POSITION
VCA:    HLL     1,B7TAB(3)
        ADD     1,2
        POPJ    P,              ; RETURN WITH THE BYTE POINTER IN R1

KATADO: IDIVI   2,4
        JUMPGE  3,VCB
        SOJ     2,
        ADDI    3,4
VCB:    HLL     1,B9TAB(3)
        ADD     1,2
        POPJ    P,              ; RETURN WITH BYTE POINTER IN R1


        SUBTTL  CH%SET   CH FOR A LEFT PART OF AN ASSIGNMENT

; INPUT:        R1 ADDRESS OF BUFFER
;               R2 CHARACTER OFFSET
;               R3 CHARACTER TO BE DEPOSITED

; OUTPUT:       R1 CHARACTER PASSED IN R3


        ENTRY CH%SET

CH%SET: MOVE    4,3     ; SAVE CHARACTER
        PUSHJ   P,V%CHPT        ; GET BYTE POINTER
        DPB     4,1             ; DEPOSIT THE CHARACTER
        MOVE    1,4     ; THEN PUT CHAR INTO R1
        POPJ    P,              ; AND RETURN


; AND NOW FOR THE TABLES

B7TAB:  POINT   7,0,6   ; XXX XXX X.. ... ... ...  ... ... ... ... ... ...
        POINT   7,0,13  ; ... ... .XX XXX XX. ...  ... ... ... ... ... ...
        POINT   7,0,20  ; ... ... ... ... ..X XXX  XXX ... ... ... ... ...
        POINT   7,0,27  ; ... ... ... ... ... ...  ... XXX XXX X.. ... ...
        POINT   7,0,34  ; ... ... ... ... ... ...  ... ... ... .XX XXX XX.

; AND THIS ONES FOR KATA KANA

B9TAB:  POINT   9,0,8   ; XXX XXX XXX ... ... ...  ... ... ... ... ... ...
        POINT   9,0,17  ; ... ... ... XXX XXX XXX  ... ... ... ... ... ...
        POINT   9,0,26  ; ... ... ... ... ... ...  XXX XXX XXX ... ... ...
        POINT   9,0,35  ; ... ... ... ... ... ...  ... ... ... XXX XXX XXX

        SUBTTL  PREDICATE-VALUED ROUTINES FOR I%TIE

        ENTRY   TEXT.P, .ACTIV, .CNTRL

;Routine to determine if I%CHAR is text or whether it has
;a control character function. Returns True/False in R1.

TEXT.P: MOVE    R2,I%CHAR
        SETZ    R1,
        MOVE    R2,.CTTAB(R2)   ;get character bits
        TLNE    R2,B.LOAD       ;if this is cntrl char that even has a function
                                ;while in buffer-load mode, return false
        POPJ    P,              ;(i.e., it is never Text)
        TLNE    R2,CTL.F        ;if char is alpha cntrl then it is not Text
        SKIPE   I%TIRE+SEMI.P   ;unless we're in buffer-load mode (Semi-edit)
        MOVEI   R1,1
        POPJ    P,

;Routine to determine if I%CHAR is an activation character. Returns
;True/False in R1.

.ACTIV: MOVE    R1,I%CHAR
        HLRZ    R1,.CTTAB(R1)
        AND     R1,I%MASK
        POPJ    P,

;Routine to determine if I%CHAR is a control character or DEL.
;Returns True/False in R1.

.CNTRL: MOVE    R1,I%CHAR
        HLRZ    R1,.CTTAB(R1)
        ANDI    R1,CNTRL!CTL.F
        POPJ    P,

        end
