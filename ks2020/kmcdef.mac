.TITLE	KMCKOD - KMC11 host-base microcode
.SBTTL	KMCDEF - KMC definitions
.ENABL LC
.NLIST	SYM
;-----
; KMC Host-Base Microcode
; *** Caution ***
; Making modifications to this code without a complete understanding
; of the KMC instruction set, the Tymshare host interface and LinkF
; in the node is NOT RECOMENDED! The KMC is not a conventional computer
; and requires rather unusual coding techniques and a complete
; understanding of its internal architecture and limitations.
;-----
; This code is designed to interface up to 4 NEXNET nodes with
; a Tymshare 20/20 host. The nodes use LinkF to emulate a Tymnet base.
; The KMC preforms the function of multiplexing messages to
; and from the host input and output ring buffers to the nodes
; through DR11's invisable to the host. DMA blockmode is also implemented
; to take further load from the host. The host never gets interrupted
; by the KMC or the DR's. Another feature is a node
; crash will not affect the host or other nodes on the system.
; A sick host however will cause the KMC to hang and bring all
; nonsense to a screaching halt. This allows the nodes to timeout
; and prepare for the host to be reloaded.
; The KMC code is not restartable and must be reloaded with the new monitor.
;
; Designed Dec/79 Implemented Apr/80 by Leland G Hoover
;	Nexilis Systems Inc.
;	2302 East Speedway
;	Tucson, Az  85719
;	(602) 795-8303
;
; Last mod Apr/80 Leland G Hoover
;-----
;-----
; KMC Microcode assembly instructions:
; r macn11
; *tmp,tmp=kmcmac,kmcdef,kmckod,kmcsub,kmctab
;
; r link11
; *kmccod.bin/img=tmp/e
;-----

;-----
; KMC data tables - to be loaded into KMC RAM with CRAM code.
; Variables and constants are mixed with abandon to save CRAM space.
; The idea is to load the MAR as infrequently as possible.
; That is point to a block of data and inc the MAR.
; When changing the data tables great care must be taken not to
; break up contiguous blocks that are expected to be accessed sequentialy.
;-----

.page
.sbttl	DR11 device addresses
;-----
; Device addresses
;-----
.IIF NDF DR0CSR		DR0CSR=	167770
.IIF NDF DR1CSR		DR1CSR=	167760
.IIF NDF DR2CSR		DR2CSR=	167750
.IIF NDF DR3CSR		DR3CSR=	167740

DR0HIB=	DR0CSR&177400/400&377
DR1HIB=	DR1CSR&177400/400&377
DR2HIB=	DR2CSR&177400/400&377
DR3HIB=	DR3CSR&177400/400&377
DR0LOB=	DR0CSR&377
DR1LOB=	DR1CSR&377
DR2LOB=	DR2CSR&377
DR3LOB=	DR3CSR&377

.PAGE
;-----
; PDP10 ring pointer data block as Unibus addresses
;-----
IRBASE=	1153*4+2		;CONVERT PDP10 AD, POINTERS ARE RIGHT JUSTIFIED
IRSIZE=	IRBASE+4
IRPPDP=	IRBASE+10
IRPKMC=	IRBASE+14
ORBASE=	IRBASE+20
ORSIZE=	IRBASE+24
ORPPDP=	IRBASE+30
ORPKMC=	IRBASE+34

KILLOC=	30*4+2		;Magik addr to kill host

IRBAHI=	IRBASE&177400/400&377
IRBALO=	IRBASE&377
IRPPHI=	IRPPDP&177400/400&377
IRPPLO=	IRPPDP&377
IRPKHI=	IRPKMC&177400/400&377
IRPKLO=	IRPKMC&377
IRSILO=	IRSIZE&377
IRSIHI=	IRSIZE&177400/400&377

ORBAHI=	ORBASE&177400/400&377
ORBALO=	ORBASE&377
ORPPHI=	ORPPDP&177400/400&377
ORPPLO=	ORPPDP&377
ORPKHI=	ORPKMC&177400/400&377
ORPKLO=	ORPKMC&377
ORSILO=	ORSIZE&377
ORSIHI=	ORSIZE&177400/400&377

KILLLO=	KILLOC&377
KILLHI=	KILLOC&177400/400&377
.PAGE
;-----
; Data table entry points. These are offsets into the KMC's 256 byte pages.
;-----
DR0ST=	DR0STX&377			;Node state variables
DR1ST=	DR1STX&377
DR2ST=	DR2STX&377
DR3ST=	DR3STX&377
DRCSR=	DRCSRX&377
INIT=	INITX&377
INIT0=	INIT0X&377
INIT1=	INIT1X&377
INIT2=	INIT2X&377
DRINBF=	DRINBX&377
IOTIMR=	IOTIMX&377
DROBUF=	DROBFX&377
RHNPRZ=	RHNPRX&377
WNPRZ=	WNPRX&377
CONST=	CONSTX&377
CST=	CSTX&377
CSZ=	CSZX&377
MXMSG=	MXMSGX&377
NXMBTB=	NXMBTX&377
HSMEXT=	HSMEXX&377
KILDAT=	KILDAX&377

IRKAD=	IRKADX&377
IRMXAD=	IRMXAX&377
IRBAD=	IRBADX&377
IRK=	IRKX&377
IRKMX=	IRKMXX&377
IRP=	IRPX&377
IRPPD=	IRPPDX&377
IRPKM=	IRPKMX&377

ORK=	ORKX&377
ORP=	ORPX&377
ORPPD=	ORPPDX&377
ORKAD=	ORKADX&377
ORMXAD=	ORMXAX&377
ORBAD=	ORBADX&377
ORKMX=	ORKMXX&377
ORPKM=	ORPKMX&377

.PAGE
;-----
; Npr bit definitions
;-----
HSTEXT=	4				;Host memory ext (bits 16-17)
DEVEXT=	14				;Device memory extension
NPRREQ=	1				;Initiates a npr request
NPROUT=	20				;Npr write cycle
RDVNPR=	NPRREQ ! DEVEXT			;Device read npr
RHSNPR=	NPRREQ ! HSTEXT			;Host read npr
WNPR=	NPRREQ ! NPROUT			;Write npr for both dev and host

;-----
; Misc definitions
;-----
BKMHDR=	177				;Block mode header
NDACT=	176				;Node active msg (null msg)
MAXMSG=	63				;Maximum valid message number+1
PMASK=	77			;Mask to remove node # from port # on output
				; message headers

.PAGE
.SBTTL	KMC Register usage
;-----
; KMC Register usage
;	Scratch pad:
;		SP17 =>	0	Initialized constant
;		SP16 =>	1	 "
;		SP15 => 2	 "
;		SP14 =>	177	 " Data message bit mask
;
;		SP13 =>	Subroutine calls level 0
;		SP12 =>	Subroutine calls level 1
;
;		SP11 =>	Current node state memory pointer
;		SP10 =>	Current node number (0-3)
;
;		SP7 =>	Used by CHKSTA for disable interface bit calculations

;		SP6 =>	Words-to-go for current message (16 bit words)

;
;		SP5 =>	Data message queue. Second msg header
;		SP4 =>	 "
;		SP3 =>	Scratch reg
;		SP2 =>	 "	& MSG HEADER
;
;		SP1 =>	Current device number (0-7)
;
;		SP0 =>	Scratch register (magik for OUT & BRADDR)
;-----
.page
.sbttl	CSR Resister definitions
;-----
;	CSR Register definitions (8 bit registers):
;
;		CSR0 =>	Reserved for debugger KMCDDT
;		CSR1 =>	Reserved for debugger & run bit
;		CSR2 =>	Bit 0 is the Interface Disable Register
;			interlock. This is set only by the host before
;			any attempt to read or write this register and
;			must be cleared immediatly after accessing
;			the reg.
;		CSR3 =>	Interface disable register. These
;			four bits are set by the KMC to disable a node
;			caused by either a timeout durring a DR handshake
;			or an illegal message header or a zero length data
;			message. That is the node is sick. The host
;			must clear this bit after allowing enough time for
;			the node to time out.
;			Bit 0 => Node 0 (DR0 - 767770)
;			Bit 1 => Node 1 (DR1 - 767760)
;			Bit 4 => Node 2 (DR2 - 767750)
;			Bit 7 => Node 3 (DR3 - 767740)
;		CSR4 =>	Nonexistant Device Register. Bits for this register
;			are the same as defigned in CSR3. These bits are set
;			by the KMC and read by the host to indicate that
;			a message was sent to a nonexistant device. That
;			probably means that the host is configured for
;			the wrong number of ports. The port - node
;			association is as follows:
;			Host ports 0-77 => Node 0
;			Host ports 100-177 => Node 1
;			Host ports 200-277 => Node 2
;			Host ports 300-377 => Node 3
;		CSR6 =>	Reserved for KMC temporary storage
;		CSR7 =>	  "
;-----
.PAGE
.SBTTL	Subroutine diagram
;-----
; Subroutine call diagram
;
;  +--------------------------------------------------------------------------+
;  !		Main program						      !
;  +--------------------------------------------------------------------------+
;	    !	   !  !	    !		    !		    !		    !
; Level 0:  !	   !  !	    !		    !		    !		    !
;	+-------+  !  !	+------+	+------+	+------+	+------+
;	!Calcnd !  !  !	!Getdr !	!Putdr !	!Get20 !	!Put20 !
;	+-------+  !  !	+------+	+------+	+------+	+------+
;	!Chksta !  !  !   ! ! !		     ! !	!Incpt !
;	+-------+  !  !   ! ! !		     ! !	+------+
;	    !	   !  !   ! ! !		     ! !
;	    ! +----+  !	  ! ! !              ! !
;	    ! !	      +--+! ! +------------+ ! !
;	    +-!----------!!-!------------+ ! ! !
; Level 1: +--!----------!+ !   	 ! ! ! +------------+
;	   !  !		 !  !   	 ! ! !		    !
;	+-------+	+-------+	+-------+	+-------+
;	!Getdrh !	!Accept !	!Getdrc !	!Timchk !
;	+-------+	+-------+	+-------+	+-------+
;
;-----
.PAGE
.SBTTL	Macro definitions

;-----
;IOWAIT - Wait for NPR done bit
;-----
	.MACRO	IOWAIT	?LAB
	LAB:	BRWRTE	IBUS, NPR	;Copy NPR register
		BR0	LAB		;Br till done
	.ENDM

;-----
;WAIT - Nop for 50 usec. Used while waiting for PDP11 to respond
;-----
	.MACRO	WAIT	?LAB
		BRWRTE	IMM, 20		;Load timer bit
		OUT	BR, SELB, OBR	;Start 50 usec timer
	LAB:	BRWRTE	IBUS, UBBR	;Get timer bit
		BR4	LAB		;Wait
	.ENDM

;-----
;CLR44 - Clr 44 BITS in mem
;-----
	.MACRO	CLR44	DISP
		LDMA	IMM, DISP	;point to mem loc
		MEM	IMM, 0, INCMAR	;Zero loc
		MEM	IMM,	0,	INCMAR
		MEM	IMM,	0,	INCMAR
		MEM	IMM,	0,	INCMAR
		MEM	IMM, 0
	.ENDM

;-----
; HANG - LOOP FOREVER SINCE THERE IS NO HALT
;-----
	.MACRO	HANG
		ALWAYS	.		;LOOP FOREVER, SAVES STATE
	.ENDM
  