KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 0-1
KMCDEF  MAC			Table  of  Contents

    532		KMCDEF - KMC definitions
    584		DR11 device addresses
    703		KMC Register usage
    733		CSR Resister definitions
    770		Subroutine diagram
    796		Macro definitions
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 0-2
KMCKOD  MAC			Table  of  Contents

    834		KMCKOD - Main program
    838		NXTDEV - Main loop - Device scheduling
    901		Host input routine
    981		GETHDR - Get header from node
   1120		Normal input => 20
   1262		NULL MESSAGE
   1294		DATAIN - Data input => 20
   1545		BLKMOD - Block_mode input and output
   2093		BLKIPT - Block mode host input
   2399		DO20 - Output service routine
   2513		Output normal message
   3108		INIT - Initialize KMC, once only code
   4330		DATA message wrap around check for input
   4787		NXMTRP - NONEXISTANT MEMORY TRAP
   4906		EATMSG - Eat rest of output message
   4964		UPDOPZ - Update output ring pointer
   5160		TMOTI - Timeout for host input
   5464		RSTITF - Crash node
   5817		KILHST - Kill host, Fatal error routine.
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 0-3
KMCSUB  MAC			Table  of  Contents

   6099		CHKSTA - Check node state for 20 input
   6946		I/O Subroutines
   7595		GETDR - Get word from node
   8446		Return jump table
   8467		GET20 - Routine to get a word from host ring buffer
   9243		PUT20 - Routine to put a word in host ring buffer
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 0-4
KMCTAB  MAC			Table  of  Contents

  10141		KMCTAB - KMC Data tables
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 1
KMCMAC  MAC	BRANCH INSTRUCTIONS

    529		000000			.ASECT
    530					START:
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 1
KMCDEF  MAC	BRANCH INSTRUCTIONS

    531					.TITLE	KMCKOD - KMC11 host-base microcode
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2
KMCDEF  MAC	KMCDEF - KMC definitions

    532					.SBTTL	KMCDEF - KMC definitions
    533					.ENABL LC
    534					.NLIST	SYM
    535					;-----
    536					; KMC Host-Base Microcode
    537					; *** Caution ***
    538					; Making modifications to this code without a complete understanding
    539					; of the KMC instruction set, the Tymshare host interface and LinkF
    540					; in the node is NOT RECOMENDED! The KMC is not a conventional computer
    541					; and requires rather unusual coding techniques and a complete
    542					; understanding of its internal architecture and limitations.
    543					;-----
    544					; This code is designed to interface up to 4 NEXNET nodes with
    545					; a Tymshare 20/20 host. The nodes use LinkF to emulate a Tymnet base.
    546					; The KMC preforms the function of multiplexing messages to
    547					; and from the host input and output ring buffers to the nodes
    548					; through DR11's invisable to the host. DMA blockmode is also implemented
    549					; to take further load from the host. The host never gets interrupted
    550					; by the KMC or the DR's. Another feature is a node
    551					; crash will not affect the host or other nodes on the system.
    552					; A sick host however will cause the KMC to hang and bring all
    553					; nonsense to a screaching halt. This allows the nodes to timeout
    554					; and prepare for the host to be reloaded.
    555					; The KMC code is not restartable and must be reloaded with the new monitor.
    556					;
    557					; Designed Dec/79 Implemented Apr/80 by Leland G Hoover
    558					;	Nexilis Systems Inc.
    559					;	2302 East Speedway
    560					;	Tucson, Az  85719
    561					;	(602) 795-8303
    562					;
    563					; Last mod Apr/80 Leland G Hoover
    564					;-----
    565					;-----
    566					; KMC Microcode assembly instructions:
    567					; r macn11
    568					; *tmp,tmp=kmcmac,kmcdef,kmckod,kmcsub,kmctab
    569					;
    570					; r link11
    571					; *kmccod.bin/img=tmp/e
    572					;-----

    574					;-----
    575					; KMC data tables - to be loaded into KMC RAM with CRAM code.
    576					; Variables and constants are mixed with abandon to save CRAM space.
    577					; The idea is to load the MAR as infrequently as possible.
    578					; That is point to a block of data and inc the MAR.
    579					; When changing the data tables great care must be taken not to
    580					; break up contiguous blocks that are expected to be accessed sequentialy.
    581					;-----

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-1
KMCDEF  MAC	DR11 device addresses

    584					.sbttl	DR11 device addresses
    585					;-----
    586					; Device addresses
    587					;-----
    588					.IIF NDF DR0CSR		DR0CSR=	167770
    589					.IIF NDF DR1CSR		DR1CSR=	167760
    590					.IIF NDF DR2CSR		DR2CSR=	167750
    591					.IIF NDF DR3CSR		DR3CSR=	167740

    593		000357			DR0HIB=	DR0CSR&177400/400&377
    594		000357			DR1HIB=	DR1CSR&177400/400&377
    595		000357			DR2HIB=	DR2CSR&177400/400&377
    596		000357			DR3HIB=	DR3CSR&177400/400&377
    597		000370			DR0LOB=	DR0CSR&377
    598		000360			DR1LOB=	DR1CSR&377
    599		000350			DR2LOB=	DR2CSR&377
    600		000340			DR3LOB=	DR3CSR&377

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-2
KMCDEF  MAC	DR11 device addresses

    603					;-----
    604					; PDP10 ring pointer data block as Unibus addresses
    605					;-----
    606		004656			IRBASE=	1153*4+2		;CONVERT PDP10 AD, POINTERS ARE RIGHT JUSTIFIED
    607		004662			IRSIZE=	IRBASE+4
    608		004666			IRPPDP=	IRBASE+10
    609		004672			IRPKMC=	IRBASE+14
    610		004676			ORBASE=	IRBASE+20
    611		004702			ORSIZE=	IRBASE+24
    612		004706			ORPPDP=	IRBASE+30
    613		004712			ORPKMC=	IRBASE+34

    615		000142			KILLOC=	30*4+2		;Magik addr to kill host

    617		000011			IRBAHI=	IRBASE&177400/400&377
    618		000256			IRBALO=	IRBASE&377
    619		000011			IRPPHI=	IRPPDP&177400/400&377
    620		000266			IRPPLO=	IRPPDP&377
    621		000011			IRPKHI=	IRPKMC&177400/400&377
    622		000272			IRPKLO=	IRPKMC&377
    623		000262			IRSILO=	IRSIZE&377
    624		000011			IRSIHI=	IRSIZE&177400/400&377

    626		000011			ORBAHI=	ORBASE&177400/400&377
    627		000276			ORBALO=	ORBASE&377
    628		000011			ORPPHI=	ORPPDP&177400/400&377
    629		000306			ORPPLO=	ORPPDP&377
    630		000011			ORPKHI=	ORPKMC&177400/400&377
    631		000312			ORPKLO=	ORPKMC&377
    632		000302			ORSILO=	ORSIZE&377
    633		000011			ORSIHI=	ORSIZE&177400/400&377

    635		000142			KILLLO=	KILLOC&377
    636		000000			KILLHI=	KILLOC&177400/400&377
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-3
KMCDEF  MAC	DR11 device addresses

    638					;-----
    639					; Data table entry points. These are offsets into the KMC's 256 byte pages.
    640					;-----
    641		000125			DR0ST=	DR0STX&377			;Node state variables
    642		000126			DR1ST=	DR1STX&377
    643		000127			DR2ST=	DR2STX&377
    644		000130			DR3ST=	DR3STX&377
    645		000105			DRCSR=	DRCSRX&377
    646		000063			INIT=	INITX&377
    647		000072			INIT0=	INIT0X&377
    648		000075			INIT1=	INIT1X&377
    649		000100			INIT2=	INIT2X&377
    650		000103			DRINBF=	DRINBX&377
    651		000201			IOTIMR=	IOTIMX&377
    652		000114			DROBUF=	DROBFX&377
    653		000163			RHNPRZ=	RHNPRX&377
    654		000113			WNPRZ=	WNPRX&377
    655		000122			CONST=	CONSTX&377
    656		000112			CST=	CSTX&377
    657		000110			CSZ=	CSZX&377
    658		000124			MXMSG=	MXMSGX&377
    659		000206			NXMBTB=	NXMBTX&377
    660		000133			HSMEXT=	HSMEXX&377
    661		000212			KILDAT=	KILDAX&377

    663		000131			IRKAD=	IRKADX&377
    664		000135			IRMXAD=	IRMXAX&377
    665		000137			IRBAD=	IRBADX&377
    666		000141			IRK=	IRKX&377
    667		000143			IRKMX=	IRKMXX&377
    668		000145			IRP=	IRPX&377
    669		000147			IRPPD=	IRPPDX&377
    670		000152			IRPKM=	IRPKMX&377

    672		000155			ORK=	ORKX&377
    673		000157			ORP=	ORPX&377
    674		000161			ORPPD=	ORPPDX&377
    675		000164			ORKAD=	ORKADX&377
    676		000167			ORMXAD=	ORMXAX&377
    677		000171			ORBAD=	ORBADX&377
    678		000173			ORKMX=	ORKMXX&377
    679		000175			ORPKM=	ORPKMX&377

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-4
KMCDEF  MAC	DR11 device addresses

    682					;-----
    683					; Npr bit definitions
    684					;-----
    685		000004			HSTEXT=	4				;Host memory ext (bits 16-17)
    686		000014			DEVEXT=	14				;Device memory extension
    687		000001			NPRREQ=	1				;Initiates a npr request
    688		000020			NPROUT=	20				;Npr write cycle
    689		000015			RDVNPR=	NPRREQ ! DEVEXT			;Device read npr
    690		000005			RHSNPR=	NPRREQ ! HSTEXT			;Host read npr
    691		000021			WNPR=	NPRREQ ! NPROUT			;Write npr for both dev and host

    693					;-----
    694					; Misc definitions
    695					;-----
    696		000177			BKMHDR=	177				;Block mode header
    697		000176			NDACT=	176				;Node active msg (null msg)
    698		000063			MAXMSG=	63				;Maximum valid message number+1
    699		000077			PMASK=	77			;Mask to remove node # from port # on output
    700									; message headers

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-5
KMCDEF  MAC	KMC Register usage

    703					.SBTTL	KMC Register usage
    704					;-----
    705					; KMC Register usage
    706					;	Scratch pad:
    707					;		SP17 =>	0	Initialized constant
    708					;		SP16 =>	1	 "
    709					;		SP15 => 2	 "
    710					;		SP14 =>	177	 " Data message bit mask
    711					;
    712					;		SP13 =>	Subroutine calls level 0
    713					;		SP12 =>	Subroutine calls level 1
    714					;
    715					;		SP11 =>	Current node state memory pointer
    716					;		SP10 =>	Current node number (0-3)
    717					;
    718					;		SP7 =>	Used by CHKSTA for disable interface bit calculations

    720					;		SP6 =>	Words-to-go for current message (16 bit words)

    722					;
    723					;		SP5 =>	Data message queue. Second msg header
    724					;		SP4 =>	 "
    725					;		SP3 =>	Scratch reg
    726					;		SP2 =>	 "	& MSG HEADER
    727					;
    728					;		SP1 =>	Current device number (0-7)
    729					;
    730					;		SP0 =>	Scratch register (magik for OUT & BRADDR)
    731					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-6
KMCDEF  MAC	CSR Resister definitions

    733					.sbttl	CSR Resister definitions
    734					;-----
    735					;	CSR Register definitions (8 bit registers):
    736					;
    737					;		CSR0 =>	Reserved for debugger KMCDDT
    738					;		CSR1 =>	Reserved for debugger & run bit
    739					;		CSR2 =>	Bit 0 is the Interface Disable Register
    740					;			interlock. This is set only by the host before
    741					;			any attempt to read or write this register and
    742					;			must be cleared immediatly after accessing
    743					;			the reg.
    744					;		CSR3 =>	Interface disable register. These
    745					;			four bits are set by the KMC to disable a node
    746					;			caused by either a timeout durring a DR handshake
    747					;			or an illegal message header or a zero length data
    748					;			message. That is the node is sick. The host
    749					;			must clear this bit after allowing enough time for
    750					;			the node to time out.
    751					;			Bit 0 => Node 0 (DR0 - 767770)
    752					;			Bit 1 => Node 1 (DR1 - 767760)
    753					;			Bit 4 => Node 2 (DR2 - 767750)
    754					;			Bit 7 => Node 3 (DR3 - 767740)
    755					;		CSR4 =>	Nonexistant Device Register. Bits for this register
    756					;			are the same as defigned in CSR3. These bits are set
    757					;			by the KMC and read by the host to indicate that
    758					;			a message was sent to a nonexistant device. That
    759					;			probably means that the host is configured for
    760					;			the wrong number of ports. The port - node
    761					;			association is as follows:
    762					;			Host ports 0-77 => Node 0
    763					;			Host ports 100-177 => Node 1
    764					;			Host ports 200-277 => Node 2
    765					;			Host ports 300-377 => Node 3
    766					;		CSR6 =>	Reserved for KMC temporary storage
    767					;		CSR7 =>	  "
    768					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-7
KMCDEF  MAC	Subroutine diagram

    770					.SBTTL	Subroutine diagram
    771					;-----
    772					; Subroutine call diagram
    773					;
    774					;  +--------------------------------------------------------------------------+
    775					;  !		Main program						      !
    776					;  +--------------------------------------------------------------------------+
    777					;	    !	   !  !	    !		    !		    !		    !
    778					; Level 0:  !	   !  !	    !		    !		    !		    !
    779					;	+-------+  !  !	+------+	+------+	+------+	+------+
    780					;	!Calcnd !  !  !	!Getdr !	!Putdr !	!Get20 !	!Put20 !
    781					;	+-------+  !  !	+------+	+------+	+------+	+------+
    782					;	!Chksta !  !  !   ! ! !		     ! !	!Incpt !
    783					;	+-------+  !  !   ! ! !		     ! !	+------+
    784					;	    !	   !  !   ! ! !		     ! !
    785					;	    ! +----+  !	  ! ! !              ! !
    786					;	    ! !	      +--+! ! +------------+ ! !
    787					;	    +-!----------!!-!------------+ ! ! !
    788					; Level 1: +--!----------!+ !   	 ! ! ! +------------+
    789					;	   !  !		 !  !   	 ! ! !		    !
    790					;	+-------+	+-------+	+-------+	+-------+
    791					;	!Getdrh !	!Accept !	!Getdrc !	!Timchk !
    792					;	+-------+	+-------+	+-------+	+-------+
    793					;
    794					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-8
KMCDEF  MAC	Macro definitions

    796					.SBTTL	Macro definitions

    798					;-----
    799					;IOWAIT - Wait for NPR done bit
    800					;-----
    801						.MACRO	IOWAIT	?LAB
    802						LAB:	BRWRTE	IBUS, NPR	;Copy NPR register
    803							BR0	LAB		;Br till done
    804						.ENDM

    806					;-----
    807					;WAIT - Nop for 50 usec. Used while waiting for PDP11 to respond
    808					;-----
    809						.MACRO	WAIT	?LAB
    810							BRWRTE	IMM, 20		;Load timer bit
    811							OUT	BR, SELB, OBR	;Start 50 usec timer
    812						LAB:	BRWRTE	IBUS, UBBR	;Get timer bit
    813							BR4	LAB		;Wait
    814						.ENDM

    816					;-----
    817					;CLR44 - Clr 44 BITS in mem
    818					;-----
    819						.MACRO	CLR44	DISP
    820							LDMA	IMM, DISP	;point to mem loc
    821							MEM	IMM, 0, INCMAR	;Zero loc
    822							MEM	IMM,	0,	INCMAR
    823							MEM	IMM,	0,	INCMAR
    824							MEM	IMM,	0,	INCMAR
    825							MEM	IMM, 0
    826						.ENDM

    828					;-----
    829					; HANG - LOOP FOREVER SINCE THERE IS NO HALT
    830					;-----
    831						.MACRO	HANG
    832							ALWAYS	.		;LOOP FOREVER, SAVES STATE
    833						.ENDM
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 1
KMCKOD  MAC	KMCKOD - Main program

    834					.SBTTL	KMCKOD - Main program
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2
KMCKOD  MAC	KMCKOD - Main program

    835						ALWAYS	STARTX			;Jump to initialization code
    838					.SBTTL	NXTDEV - Main loop - Device scheduling
    839					;-----
    840					;NXTDEV - Main loop and device scheduler.
    841					;	There are 8 device states, all odd states dispatch to PDP20
    842					;	service routine, even states dispatch to DR11 service routine.
    843					;	All scheduling variables & data are stored in page 0.
    844					;
    845					;	States:	0,2,4,6 => DR0,DR1,DR2,DR3	(base)
    846					;		1,3,5,7 => PDP20		(host)
    847					;-----

    849					;-----
    850					; Select next device and store in SP1
    851					;-----
    852	000002				NXTDEV:	SP	BR,	INCA,	SP1	;Select next device
    866	000004					BRWRTE	IMM,	7		; Insure that there is no wrap around
    880	000006					SPBR	BR,	AANDB,	SP1
    895					;-----
    896					; Dispatch to input or output routines
    897					;-----
    898	000010					BR0	DO20			;If DEVICE is odd do 20 service
    901					.SBTTL	Host input routine
    902					;-----
    903					; Host input routine
    904					;	SP1 => Current node*2
    905					;-----
    906	000012					BRSHFT				;Calc unit number
    921	000014					SP	BR,	SELB,	SP10	; and save in SP10
    935	000016					CALLSB	SP13,	CHKSTA		;See if node is up
    975	000024					  ALWAYS	NXTDEV		;Dead node
    978										;Skip return if node is up

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-1
KMCKOD  MAC	GETHDR - Get header from node

    981					.SBTTL	GETHDR - Get header from node
    982					;-----
    983					;GETHDR - Node wishes to speak, get header, check for valid msg type
    984					;	and dispatch to proper processing routine. The DR11's
    985					;	$DVACP bit is not set till the msg at least appears valid
    986					;-----
    987	000026				GETHDR:	CALLSR	SP12,	GETDRH,	RX0	;Get header word
   1011					;-----
   1012					; Calculate host port number from node number and port number
   1013					; supplied by node and restore to header.
   1014					;	host port # = node port # + node # * 100
   1015					;-----
   1016	000034				RT0:	BRWRTE	BR,	SELA,	SP10	;Load node number (0-3)
   1030	000036					BROTAT				;Rotate to 2 highest bit positions
   1033	000040					BROTAT
   1036	000042					SP	IBUS,	INDAT1,	SP0	;Load port number from header
   1050	000044					OUT	BR,	AORB,	OIDAT1	;Calc host port number & restore
   1064					;-----
   1065					; Dispatch on message type
   1066					;-----
   1067	000046					SPBR	IBUS,	INDAT2,	SP2	;Get MSG_TYP from header
   1082	000050					BR7	DATAIN			;Br if data msg
   1085	000052					COMP	BR,	SP17		;Test MSG_TYP for valdity1088	000054					Z	RSTITF			;Br if invalid msg type
   1091	000056					LDMA	IMM,	CONST
   1100	000060					COMP	MEMI,	SP2		;
   1103	000062					Z	BLKMOD			;Br if block mode
   1106	000064					COMP	MEMI,	SP2		;Test for Node Active msg
   1109	000066					Z	NODACT			;Br if node active msg
   1112	000070					COMP	MEMI,	SP2		;Test for MSG_TYP > MSGMAX
   1115	000072					C	RSTITF			;Br if invalid msg type
   1118										;Fall into normal msg code
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-2
KMCKOD  MAC	Normal input => 20

   1120					.SBTTL	Normal input => 20
   1121					;-----
   1122					;Normal Input => 20's ring buffer
   1123					;	Accept header, lookup msg length and xfer msg
   1124					;-----
   1125	000074					CALLSR	SP12,	ACCEPT,	RX2	;Accept msg
   1149	000102				RT2:	NODST	BR,	SELA,	SP2, LDMAR ;Load msgtype as table offset
   1164	000104					SP	MEMX,	SELB,	SP6	;Get wrd_to_go
   1178	000106				XFER00:	CALLSB	SP13,	PUT20		;Output word
   1218	000114					CALLSB	SP13,	GETDR		;Get data word
   1258	000122					ALWAYS	XFER00			;More to xfer

   1262					.SBTTL	NULL MESSAGE
   1263					;-----
   1264					; NULL Message - Used to sequence the node from a down state
   1265					; to an up state. This msg is discarded.
   1266					;-----
   1267	000124				NODACT:	CALLSR	SP12,	ACCEPT,	RX10	;Accept this msg
   1291					;	ALWAYS	NXTDEV			;RETURN VIA INTERPAGE RETURN

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-3
KMCKOD  MAC	DATAIN - Data input => 20

   1294					.SBTTL	DATAIN - Data input => 20
   1295					;-----
   1296					;DATAIN-Xfer data blk 11 => 20
   1297					;	Note: May eventually want to breakup data msg that wrap around
   1298					;-----
   1299	000132				DATAIN:	CALLSR	SP12,	ACCEPT,	RX4	;Accept header
   1323	000140				RT4:
   1324					;-----
   1325					; Entry point for 2nd data message
   1326					;-----
   1327	000140				MUNG2:	BRWRTE	IBUS,	IODAT2		;Get header
   1341	000142					BRWRTE	BR,	AANDB,	SP14	;Mask to get byte count
   1355	000144					SP	BR,	SELB,	SP2	;Save byte count
   1369	000146					COMP	BR,	SP17		;Check for 0 length data msg
   1372	000150					Z	RSTITF			;Br on invalid message length
   1375	000152					BRWRTE	IMM,	2		;Check for short data msg
   1389	000154					COMP	BR,	SP2		;
   1392	000156					C	MUNGCK			;Br if must check for data msg wrap arnd
   1395					;-----
   1396					; Convert header byte count to word count
   1397					; by masking off sign bit, rounding up one byte and shifting
   1398					; bytes => words.
   1399					;-----
   1400	000160				MUNGRT:	BRWRTE	BR,	ADD,	SP16	;Round up to next word
   1414	000162					BRSHFT				;Mask and shift
   1429	000164					BRWRTE	BR,	ADD,	SP16	;Add one for the header
   1443	000166					SP	BR,	SELB,	SP6	;Store wrd_to_go
   1457					;-----
   1458					; Xfer data
   1459					;-----
   1460	000170				XFER01:	CALLSB	SP13,	PUT20		;Put word in 20's ring buffer
   1500	000176					CALLSB	SP13,	GETDR		;Get data word
   1540	000204					ALWAYS	XFER01			;More to do!

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-4
KMCKOD  MAC	BLKMOD - Block_mode input and output

   1545					.SBTTL	BLKMOD - Block_mode input and output
   1546					;-----
   1547					;BLKMOD -- Start block mode. This can only be initiated by the
   1548					;	base.  Accept msg, get rest of msg (KMC swallows this msg).
   1549					;	START_BLOCKMOD msg =>	177,	wrdcnt,	address
   1550					;				1 byte	2 bytes	3 bytes
   1551					;-----

   1553	000206				BLKMOD:	CALLSR	SP12,	ACCEPT,	RX6	;Accept msg header
   1577	000214				RT6:	SP	IBUS,	IODAT1,	SP7	;Get xfer direction bit (bit 7)
   1591	000216					CALLSB	SP13,	GETDR		;Get more of msg
   1631	000224					SP	IBUS,	IODAT2,	SP6	;Get word count
   1645	000226					CALLSB	SP13,	GETDR		;Get last of msg
   1685					;-----
   1686					; Convert address from PDP10 to Unibus. That is shift left 2
   1687					;-----
   1688	000234					CALLSB	SP13,	SHFL16		;Shift INDAT left
   1728	000242					CALLSB	SP13,	SHFL16		; "
   1768	000250					SP	IBUS,	IODAT1,	SP2	;Save addr
   1782	000252					SP	IBUS,	IODAT2,	SP3
   1796					;-----
   1797					; We now have word count in SP6 and the unibus addr in SP2 & SP3
   1798					; Test for transfer direction: pos => OUTPUT, neg => INPUT
   1799					;-----
   1800	000254					BRWRTE	BR,	SELA,	SP7	;Get direction bit (sign)
   1814	000256					BR7	XBTO20			;Br if => 20
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-5
KMCKOD  MAC	BLKMOD - Block_mode input and output

   1818					; Blockmode output  20 => 11
   1819	000260				XBTO11:	BRWRTE	BR,	SELA,	SP2	;Load input addr
   1833	000262					OUT	BR,	SELB,	IBA1
   1847	000264					BRWRTE	BR,	SELA,	SP3
   1861	000266					OUT	BR,	SELB,	IBA2
   1875	000270					LDMA	IMM,	RHNPRZ
   1884	000272					OUT	MEMI,	SELB,	ONPR	;Load high bits & start NPR
   1898	000274					IOWAIT
   1916	000300					SP	IBUS,	IIBA1,	SP2	;Save xfer addr
   1930	000302					SP	IBUS,	IIBA2,	SP3
   1944	000304					OUT	IBUS,	INDAT1,	OUTDA1	;Xfer data to output reg
   1958	000306					OUT	IBUS,	INDAT2,	OUTDA2
   1972	000310					CALLSB	SP13,	PUTDR		;Send data
   2012	000316					SPBR	BR,	DECA,	SP6	;Dec wrd to go
   2027	000320					COMP	BR,	SP17		;See if upper byte = 0
   2030	000322					Z	NXTDEV			;Br if done
   2033	000324					BRWRTE	IMM	2		;Inc input addr by two
   2047	000326					SP	BR,	ADD,	SP2
   2061	000330					BRWRTE	IMM,	0
   2075	000332					SP	BR,	ADDC,	SP3
   2089	000334					ALWAYS	XBTO11			;More to do
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-6
KMCKOD  MAC	BLKIPT - Block mode host input

   2093					.SBTTL	BLKIPT - Block mode host input
   2094					;-----
   2095					;XFER => 20 - No header is sent, no pointers to keep!
   2096					;-----
   2097	000336				XBTO20:	BRWRTE	BR,	SELA,	SP6	;GET COUNT
   2111	000340					BRWRTE	BR,	SUB,	SP17	;Count is neg so compliment it
   2125	000342					SP	BR,	SELB,	SP6	;Restore pos count
   2139	000344				TO20:	CALLSB	SP13,	GETDR		;Get data word
   2179	000352					BRWRTE	BR,	SELA,	SP2	;RESTOREOUTPUT ADDR
   2193	000354					OUT	BR,	SELB,	OBA1
   2207	000356					BRWRTE	BR,	SELA,	SP3	;Restore high byte of addr
   2221	000360					OUT	BR,	SELB,	OBA2
   2235	000362					LDMA	IMM,	HSMEXT		;Load host mem ext
   2244	000364					OUT	MEMI,	SELB,	OBR
   2258	000366					OUT	MEMX,	SELB,	ONPR	;Start out-npr
   2272	000370					IOWAIT
   2290	000374					SPBR	BR,	DECA,	SP6	;Dec wrd to go
   2305	000376					COMP	BR,	SP17		;Done with xfer?
   2308	000400					Z	NXTDEV			;Br if done
   2311	000402					BRWRTE	IBUS,	IOBA1		;Load low byte of addr
   2325	000404					BRWRTE	BR,	ADD,	SP15	;Inc output address by two
   2339	000406					SP	BR,	SELB,	SP2	;Save low byte of output addr
   2353	000410					BRWRTE	IBUS,	IOBA2		;Load high byte of addr
   2367	000412					BRWRTE	BR,	ADDC,	SP17	;Add in carry
   2381	000414					SP	BR,	SELB,	SP3	;Save output addr
   2395	000416					ALWAYS	TO20			;More to do
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-7
KMCKOD  MAC	DO20 - Output service routine

   2399					.SBTTL	DO20 - Output service routine
   2400					;-----
   2401					;DO20 - Output service routine 20 => 11
   2402					;-----

   2404					;-----
   2405					; Return with msg header if success flag set  else buffer empty
   2406					;-----
   2407	000420				DO20:	CALLSB	SP12,	GET20
   2447	000426					BR0	CHKHDR			;Br if successful
   2450	000430					ALWAYS	NXTDEV			;Output buffer is empty

   2454					;-----
   2455					;CHKHDR - Check for valid msg type and dispatch to proper code
   2456					;-----
   2457	000432				CHKHDR:	SPBR	IBUS,	INDAT2,	SP2	;Save header for future use
   2472	000434					SP	IBUS,	INDAT1,	SP3
   2486	000436					BR7	DATOUT			;BR IF DATA MESSAGE
   2489	000440					COMP	BR,	SP17
   2492	000442					Z	KILHST			;Br if invalid msg type
   2495	000444					LDMA	IMM,	MXMSG
   2504	000446					COMP	MEMX,	SP2
   2507	000450					C	KILHST			;Br if invalid msg type
   2510										;Fall into normal msg code

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-8
KMCKOD  MAC	Output normal message

   2513					.SBTTL	Output normal message
   2514					;-----
   2515					;Output normal msg
   2516					;-----
   2517					; Get msg length
   2518	000452					NODST	BR,	SELA,	SP2, LDMAR ;Load msgtype as table offset
   2533	000454					SP	MEMX,	SELB,	SP6	;Get wrd-to-go

   2548					; Calc node number from port number and check node state
   2549	000456					CALLSB	SP13,	CALCND		;Return node number in SP10
   2589										; and fall into CHKSTA
   2590	000464					  ALWAYS	EATOPT		;Node is down,chuck msg
   2593										;Skip return if node is up

   2595					; Xfer rest of msg
   2596	000466				XFER03:	CALLSB	SP13,	PUTDR		;Output word
   2636	000474					SPBR	BR,	DECA,	SP6	;Dec wrd-to-go
   2651	000476					COMP	BR,	SP17
   2654	000500					Z	UPDOPT			;Br if wrd-to-go = 0
   2657	000502					CALLSB	SP12,	GET20		;Get next word from host
   2697	000510					BR0	XFER03			;Br if no err
   2700	000512					ALWAYS	KILHST			;Out of sync, kill host

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-9
KMCKOD  MAC	Output normal message

   2705					;-----
   2706					;DATOUT - Xfer data msg from host to base
   2707					;-----
   2708	000514				DATOUT:
   2709					; Get wrd-to-go
   2710	000514					BRWRTE	BR,	SELA,	SP2	;Get header
   2724	000516					BRWRTE	BR,	AANDB,	SP14	;Mask
   2738	000520					BRWRTE	BR,	ADD,	SP16	;Round up one byte
   2752	000522					BRSHFT				;Bytes => words
   2767	000524					COMP	BR,	SP17		;Check for 0 length data message
   2770	000526					Z	KILHST			;Br on invalid msg length
   2773	000530					BRWRTE	BR,	ADD,	SP16	;Add one for header
   2787	000532					SP	BR,	SELB,	SP6	;Store wrd-to-go
   2801	000534					CALLSB	SP13,	CALCND		;Return node number in SP10
   2841										; and fall into CHKSTA
   2842	000542					  ALWAYS	EATOPT		;Node is down, chuck rest of msg
   2845										;Skip return if node is up

   2847	000544				XFER04:	CALLSB	SP13,	PUTDR		;Write word to node
   2887	000552					SPBR	BR,	DECA,	SP6	;Dec wrd-to-go
   2902	000554					COMP	BR,	SP17
   2905	000556					Z	UPDOPT			;Br if done with xfer
   2908	000560					CALLSB	SP12,	GET20		;Get data word
   2948	000566					BR0	XFER04			;Br if successful
   2951					;-----
   2952					; Error! data message is 0 length or header
   2953					; requested more data than ring provided. That is KMC and host
   2954					; are out of sync.
   2955					;-----
   2956	000570					ALWAYS	KILHST			;Out of sync, kill host!

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-10
KMCKOD  MAC	Output normal message


   2962					; Here on nxm
   2963	000572				NXM:	CALLSB	SP13,	NXMTRP		;Set nxm bit
   3003	000600					BRWRTE	BR,	SELA,	SP1	;Doing input or output?
   3017	000602					BR0	EATOPT			;Br if output
   3020	000604					ALWAYS	RSTITF			;Input

   3024	000606				EATOPT:	CALLSB	SP13,	EATMSG		;Eat rest of output msg
   3064	000614					ALWAYS	RSTITF			;Send Reset Interface msg & mark
   3067										;node as down

   3069	000616				UPDOPT:	CALLSR	SP13,	UPDOPZ,	NXTDEV	;Update output ring pointer
   3093					;	ALWAYS	NXTDEV			;Returns directly to scheduler

   3095	000624				RX12:	ALWAYS	RT12		;Inter page return for EATMSG
   3098	000626				RX14:	ALWAYS	RT14		;Inter page return for TMOTI
   3101	000630				RX16:	ALWAYS	RT16		;Inter page return for TMOTI
   3104	000632				RX22:	ALWAYS	RT22		;Inter page return
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-11
KMCKOD  MAC	INIT - Initialize KMC, once only code

   3108					.SBTTL	INIT - Initialize KMC, once only code
   3109		001000			.=	1000
   3110					;-----
   3111					; INIT - Here on startup.
   3112					; Initialize KMC, execute this code only once.
   3113					; Init scratch pad constants.
   3114					;-----
   3115	001000				STARTX:	LDMAP	IMM,	0		;Set to page 0 in data RAM
   3124	001002					LDMA	IMM,	INIT
   3133	001004					OUT	MEMX,	SELB,	OOCON	;INIT REGESTER MODIFY DISABLE REG
   3147	001006					OUT	MEMX,	SELB,	OPORT1	;INIT NXM REG
   3161	001010					OUT	MEMX,	SELB,	OBR	;INIT NXM BIT
   3175	001012					SP	MEMX,	SELB,	SP1	;INIT DEV SELECT #
   3189	001014					SP	MEMX,	SELB,	SP5	;Init 2nd data msg queue
   3203	001016					SP	MEMI,	SELB,	SP17
   3217	001020					SP	MEMI,	SELB,	SP16
   3231	001022					SP	MEMI,	SELB,	SP15
   3245	001024					SP	MEMI,	SELB,	SP14
   3259					;-----
   3260					; Fetch input ring base (IRBASE) and input ring size (IRSIZE)
   3261					;-----
   3262	001026					OUT	MEMI,	SELB,	IBA1	;Get IRBASE from host
   3276	001030					OUT	MEMI,	SELB,	IBA2
   3290	001032					OUT	MEMI,	SELB,	ONPR
   3304	001034					LDMA	IMM,	IRBAD		;Store IRBAD
   3313	001036					IOWAIT
   3331	001042					MEM	IBUS,	INDAT1,	INCMAR
   3345	001044					MEM	IBUS,	INDAT2,	INCMAR
   3359	001046					LDMA	IMM,	IRKAD		;Init IRKAD
   3368	001050					MEM	IBUS,	INDAT1,	INCMAR
   3382	001052					MEM	IBUS,	INDAT2,	INCMAR
   3396	001054					LDMA	IMM,	INIT0		;Get IRSIZE from host
   3405	001056					OUT	MEMI,	SELB,	IBA1
   3419	001060					OUT	MEMI,	SELB,	IBA2
   3433	001062					OUT	MEMI,	SELB,	ONPR
   3447	001064					LDMA	IMM,	IRBAD		;Get IRBAD again
   3456	001066					SP	MEMI,	SELB,	SP2
   3470	001070					SP	MEMI,	SELB,	SP3
   3484	001072					IOWAIT
   3502	001076					BRWRTE	IBUS,	INDAT1		;Add IRBASE & IRSIZE
   3516	001100					LDMA	IMM,	IRMXAD		;Store max ring addr
   3525	001102					MEM	BR,	ADD,	SP2, INCMAR
   3539	001104					BRWRTE	IBUS,	INDAT2
   3553	001106					MEM	BR,	ADDC,	SP3, INCMAR
   3567					;Convert bytes => PDP10 words
   3568	001110					CALLSB	SP13,	SHFR16		;Do 16 bit shift right on INDAT
   3608	001116					CALLSB	SP13,	SHFR16
   3648	001124					LDMA	IMM,	IRKMX
   3657	001126					MEM	IBUS,	INDAT1,	INCMAR
   3671	001130					MEM	IBUS,	INDAT2,	INCMAR
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-12
KMCKOD  MAC	INIT - Initialize KMC, once only code

   3686					;-----
   3687					; Fetch output ring base (ORBASE) and output ring size (ORSIZE)
   3688					;-----
   3689	001132					LDMA	IMM,	INIT1
   3698	001134					OUT	MEMI,	SELB,	IBA1	;Get ORBASE from host
   3712	001136					OUT	MEMI,	SELB,	IBA2
   3726	001140					OUT	MEMI,	SELB,	ONPR
   3740	001142					LDMA	IMM,	ORBAD		;Store ORBAD
   3749	001144					IOWAIT
   3767	001150					MEM	IBUS,	INDAT1,	INCMAR
   3781	001152					MEM	IBUS,	INDAT2,	INCMAR
   3795	001154					LDMA	IMM,	ORKAD		;Init ORKAD
   3804	001156					MEM	IBUS,	INDAT1,	INCMAR
   3818	001160					MEM	IBUS,	INDAT2,	INCMAR
   3832	001162					LDMA	IMM,	INIT2		;Get ORSIZE from host
   3841	001164					OUT	MEMI,	SELB,	IBA1
   3855	001166					OUT	MEMI,	SELB,	IBA2
   3869	001170					OUT	MEMI,	SELB,	ONPR
   3883	001172					LDMA	IMM,	ORBAD		;Get ORBAD again
   3892	001174					SP	MEMI,	SELB,	SP2
   3906	001176					SP	MEMI,	SELB,	SP3
   3920	001200					IOWAIT
   3938	001204					BRWRTE	IBUS,	INDAT1		;Add ORBASE & ORSIZE
   3952	001206					LDMA	IMM,	ORMXAD
   3961	001210					MEM	BR,	ADD,	SP2, INCMAR
   3975	001212					BRWRTE	IBUS,	INDAT2
   3989	001214					MEM	BR,	ADDC,	SP3, INCMAR
   4003	001216					CALLSB	SP13,	SHFR16		;Do 16 bit shift right on INDAT
   4043	001224					CALLSB	SP13,	SHFR16		; once more with feeling!
   4083	001232					LDMA	IMM,	ORKMX		;Init ORKMX
   4092	001234					MEM	IBUS,	INDAT1,	INCMAR
   4106	001236					MEM	IBUS,	INDAT2,	INCMAR
   4120	001240					ALWAYS	NXTDEV			;Jump to main program

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-13
KMCKOD  MAC	INIT - Initialize KMC, once only code

   4125					;-----
   4126					; SHFR16 - 16 BIT right shift of INDAT1 & INDAT2
   4127					;	uses SP0, BRG
   4128					;-----
   4129	001242				SHFR16:	SPBR	IBUS,	INDAT2,	SP0	;GET HIGH BYTE SAVING BIT 0 IN SP0
   4144	001244					BRSHFT				;SHIFT RIGHT
   4159	001246					OUT	BR,	SELB,	OIDAT2	;RESTORE
   4173	001250					BRWRTE	IBUS,	INDAT1		;GET LOW BYTE
   4187	001252					BRSHFT	BR,	SELA,	SP0	;SHIFT RIGHT, BIT 7 = SP0 BIT 0
   4202	001254					OUT	BR,	SELB,	OIDAT1	;RESTORE
   4216	001256					RTNSUB	SP13,	P1

   4229					;-----
   4230					; SHFL16 - 16 bit left shift of OUTDA1 & OUTDA2
   4231					;	uses SP0, BRG
   4232					;-----
   4233	001260				SHFL16:	SP	IBUS,	IODAT1,	SP0	;Load low byte
   4247	001262					SP	BR,	TWOA,	SP0	;Shift left one, bit 7 => carry
   4261	001264					OUT	BR,	SELA,	OUTDA1	;Restore
   4275	001266					SP	IBUS,	IODAT2,	SP0	;Load high byte
   4289	001270					SP	BR,	TWOAC,	SP0	;Shift left 1, bit 0 = carry
   4303	001272					OUT	BR,	SELA,	OUTDA2	;Restore result
   4317	001274					RTNSUB	SP13,	P0
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-14
KMCKOD  MAC	DATA message wrap around check for input

   4330					.SBTTL	DATA message wrap around check for input
   4331					;-----
   4332					; Here when doing host input and the data msg may wrap arround the end
   4333					; of the input ring buffer. If message will wrap arround the message
   4334					; must be broken into two data messages because the host can't handle
   4335					; the wrap around.
   4336					;-----
   4337	001276				MUNGCK:	LDMA	IMM,	IRKMX		;See how much room is left in buffer
   4346	001300					SP	MEMI,	SELB,	SP3	;Get max offset for buffer
   4360	001302					SP	MEMI,	SELB,	SP4
   4374	001304					LDMA	IMM,	IRK		;Get current buffer pointer
   4383	001306					SP	MEMI,	SUB,	SP3	;Sub low bytes (A-B)
   4397	001310					SP	MEMI,	SUBC,	SP4	; " High bytes (A-B-Carry)
   4411	001312					SP	BR,	TWOA,	SP3	;Convert PDP10 words to bytes
   4425	001314					SP	BR,	TWOAC,	SP4
   4439	001316					SP	BR,	TWOA,	SP3
   4453	001320					SP	BR,	TWOAC,	SP4
   4467	001322					BRWRTE	IMM,	2
   4481	001324					SP	BR,	SUB,	SP3	;Adjust for 2 in header word
   4495	001326					BRWRTE	IMM,	0
   4509	001330					SP	BR,	SUBC,	SP4
   4523					;-----
   4524					; SP3 & SP4 = Free bytes in input buffer.
   4525					; Subtract msg size and free bytes
   4526					;-----
   4527	001332					BRWRTE	BR,	SELA,	SP3	;Load buffer size
   4541	001334					BRWRTE	BR,	SUB,	SP2	;Sub msg size (A-B)
   4555	001336					SP	BR,	SELB,	SP3	;Save difference
   4569	001340					BRWRTE	BR,	SELA,	SP4	;Load high byte of buffer size
   4583	001342					BRWRTE	BR,	SUBC,	SP17	; (A-B-Carry)
   4597	001344					C	MUNGDT			;Br if msg will not fit
   4600					;Here if data msg will fit
   4601	001346				FIT:	BRWRTE	BR,	SELA,	SP2	;Restore byte count
   4615	001350					ALWAYS	MUNGRT			;Return and process data normally

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-15
KMCKOD  MAC	DATA message wrap around check for input

   4620					;-----
   4621					; Here if data message needsmunged. That is the message will wrap
   4622					; around the end of the buffer and must be broken into two messages
   4623					;-----
   4624	001352				MUNGDT:	COMP	BR,	SP17		;COMP TO SET Z & C BIT
   4627	001354					Z	2$			;BR IF MSG FITS EXACTLY
   4630	001356					ALWAYS	4$			;Will not fit

   4634	001360				2$:	COMP	BR,	SP3		;Test low byte for exact fit
   4637	001362					Z	FIT			;Br if msg fits exactly
   4640	001364				4$:	BRWRTE	IMM,	200		;Compose 2nd message header
   4654	001366					BRWRTE	BR,	AORB,	SP3	;OR in data message bit
   4668	001370					SP	BR,	SELB,	SP5	;SP5 = 2nd msg header
   4682	001372					SP	IBUS,	IODAT1,	SP4	;SP4 = 2nd msg port number
   4696					;-----
   4697					; Fix up header for this message
   4698					;-----
   4699	001374					BRWRTE	BR,	SELA,	SP3	;Get byte count for 2nd msg
   4713	001376					SP	BR,	SUB,	SP2	;SP2 = 1st msg byte count
   4727	001400					BRWRTE	IMM,	200		;Compose new header
   4741	001402					BRWRTE	BR,	AORB,	SP2	;Got new header
   4755	001404					OUT	BR,	SELB,	OUTDA2	;Restore header
   4769	001406					BRWRTE	BR,	SELA,	SP2	;Restore byte count
   4783	001410					ALWAYS	MUNGRT			;All fixed up, return & process 1st msg
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-16
KMCKOD  MAC	NXMTRP - NONEXISTANT MEMORY TRAP

   4787					.SBTTL	NXMTRP - NONEXISTANT MEMORY TRAP
   4788					;-----
   4789					; Nxmtrp - Here on attempt to write to a nonexistant DR11
   4790					; This is responded to by setting a bit in the
   4791					; non existant device regester (CSR 3).
   4792					;-----
   4793	001412				NXMTRP:	BRWRTE	IMM,	0		;Clr nxm bit as it may have been set
   4807	001414					OUT	BR,	SELB,	OBR	; while checking DR states.
   4821					; Set NXM bit for this device
   4822	001416					BRWRTE	IMM,	NXMBTB		;Load base of NXM bit table in mem
   4836	001420					NODST	BR,	ADD,	SP10, LDMAR ;Calc & load table offset in MAR
   4851	001422					BRWRTE	MEMX,	SELB		;Pick up bit value from table in BRG
   4865	001424					SP	IBUS,	PORT1,	SP0	;Copy current NXM reg
   4879	001426					OUT	BR,	AORB,	OPORT1	;Restore all NXM bits to CSR
   4893	001430					RTNSUB	SP13,	P0		;The bits are set, return
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-17
KMCKOD  MAC	EATMSG - Eat rest of output message

   4906					.SBTTL	EATMSG - Eat rest of output message
   4907					;-----
   4908					; EATMSG - Eat rest of msg in output ring buffer
   4909					; Here when node has timed out. The output ring in the host must
   4910					; be cleaned up and a reset node msg sent to host.
   4911					;-----
   4912	001432				EATMSG:	SPBR	BR,	DECA,	SP6	;Dec word count
   4927	001434					COMP	BR,	SP17		;Done eating msg?
   4930	001436					Z	UPDOPZ			;Br if so
   4933	001440					CALLSR	SP12,	GET20,	RX12	;Eat next word in output buffer
   4957	001446				RT12:	BR0	EATMSG			;Br if successful read
   4960					;-----
   4961					; Here on attempt to read past end of output ring buffer
   4962					; In this case it is OK, at least KMC and host should still be in sync.
   4963					;-----
   4964					.SBTTL	UPDOPZ - Update output ring pointer
   4965					;-----
   4966					; UPDOPZ - Update output ring pointer ORPKMC
   4967					; First round up pointers to next PDP10 addr
   4968					;-----
   4969	001450				UPDOPZ:	LDMA	IMM,	ORKAD
   4978	001452					BRWRTE	MEMX,	SELB
   4992	001454					BR1	2$
   4995	001456					ALWAYS	RT22

   4999	001460				2$:	CALLSR	SP12,	INCPT,	RX22	;Round pointers
   5023					;-----
   5024					; Update pointers in host
   5025					;-----
   5026	001466				RT22:	LDMA	IMM,	ORK
   5035	001470					OUT	MEMI,	SELB,	OUTDA1
   5049	001472					OUT	MEMI,	SELB,	OUTDA2
   5063	001474					LDMA	IMM,	ORPKM
   5072	001476					OUT	MEMI,	SELB,	OBA1
   5086	001500					OUT	MEMI,	SELB,	OBA2
   5100	001502					OUT	MEMI,	SELB,	OBR	;Load host mem ext
   5114	001504					OUT	MEMI,	SELB,	ONPR
   5128	001506					IOWAIT
   5146	001512					RTNSUB	SP13,	P0		;Done

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-18
KMCKOD  MAC	TMOTI - Timeout for host input

   5160					.SBTTL	TMOTI - Timeout for host input
   5161					;-----
   5162					; Here for timeout on DR handshake durring host input.
   5163					;-----
   5164	001514				TMOTI:	LDMA	IMM,	IRPKM		;Point to timeout data block
   5173	001516					OUT	MEMI,	SELB,	IBA1	;Load IRPKMC address
   5187	001520					OUT	MEMI,	SELB,	IBA2
   5201	001522					LDMA	IMM,	RHNPRZ
   5210	001524					OUT	MEMI,	SELB,	ONPR	;Read from host
   5224					;-----
   5225					; Restore old IRK
   5226					;-----
   5227	001526					LDMA	IMM,	IRK		;Point to IRK
   5236	001530					MEM	IBUS,	INDAT1,	INCMAR	;Restore old IRK
   5250	001532					MEM	IBUS,	INDAT2,	INCMAR
   5264	001534					OUT	IBUS,	INDAT1,	OUTDA1	;Xfer to shift registers
   5278	001536					OUT	IBUS,	INDAT2,	OUTDA2
   5292	001540					CALLSR	SP13,	SHFL16,	RX14	;Convert 10 Addr => Unibus addr
   5316	001546				RT14:	CALLSR	SP13,	SHFL16,	RX16
   5340	001554				RT16:	SP	IBUS,	IODAT1,	SP2	;Load offset
   5354	001556					SP	IBUS,	IODAT2,	SP3
   5368	001560					LDMA	IMM,	IRBAD		;Point to base addr (Unibus)
   5377	001562					BRWRTE	MEMI,	SELB		;Get IRBASE low byte
   5391	001564					LDMA	IMM,	IRKAD		;Point to IRKAD
   5400	001566					MEM	BR,	ADD,	SP2	;Restore output addr
   5414	001570					LDMA	IMM,	IRBAD+1		;Do high byte
   5423	001572					BRWRTE	MEMI,	SELB		;Get IRBASE high byte
   5437	001574					LDMA	IMM,	IRKAD+1		;Point to IRKAD
   5446	001576					MEM	BR,	ADDC,	SP3	;Restore high byte
   5460					;-----
   5461					; Fall into Reset Interface routine
   5462					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-19
KMCKOD  MAC	RSTITF - Crash node

   5464					.SBTTL	RSTITF - Crash node
   5465					;-----
   5466					;RSTITF - The current node is sick so we tell the host
   5467					;	by sending a Reset Interface message and setting node
   5468					;	state to down. Now it's the host's problem.
   5469					;-----
   5470	001600				RSTITF:	BRWRTE	IMM,	NXMBTB		;Load base of nxm bit table in mem
   5484	001602					NODST	BR,	ADD,	SP10, LDMAR ;Calc offset & get load MAR
   5499	001604				2$:	BRWRTE	IBUS,	OCON		;Has disable reg been locked out?
   5513	001606					BR0	2$			;Br if so
   5516	001610					BRWRTE	MEMX,	SELB		;Get bit value from table
   5530	001612					SP	IBUS,	LINENM,	SP0	;Copy current reg value
   5544	001614					OUT	BR,	AORB,	OLINEN	;Restore reg with current disable bits
   5558					; CLR DRCSR TO PREVENT DEADLOCK
   5559	001616					LDMA	IMM,	DRCSR
   5568	001620					OUT	MEMI,	SELB,	OBA1	;LOAD DRCSR ADDRESS
   5582	001622					OUT	MEMI,	SELB,	OBA2
   5596	001624					LDMA	IMM,	CSZ
   5605	001626					OUT	MEMX,	SELB,	OBR	;LOAD HOST MEM EXTENSION
   5619	001630					LDMA	IMM,	CST
   5628	001632					OUT	MEMI,	SELB,	OUTDA1	;LOAD OUTPUT DATA
   5642	001634					OUT	MEMI,	SELB,	ONPR	;SEND ZERO BYTE
   5656	001636					BRWRTE	BR,	SELA,	SP10	;Calc port number for node
   5670	001640					BROTAT
   5673	001642					BROTAT
   5676	001644					OUT	BR,	SELB,	OUTDA1	;Compose host reset by base msg
   5690	001646					BRWRTE	IMM,	3
   5704	001650					OUT	BR,	SELB,	OUTDA2
   5718	001652					NODST	BR,	SELA,	SP11, LDMAR ;Set node state to down
   5733	001654					MEM	IMM,	1
   5747	001656					BRWRTE	IMM,	1		;Load word length
   5761	001660					SP	BR,	SELB,	SP6
   5775	001662					CALLSB	SP13,	PUT20		;Send msg to host
   5815					;	ALWAYS	NXTDEV			;Returns directly to scheduler
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-20
KMCKOD  MAC	KILHST - Kill host, Fatal error routine.

   5817					.SBTTL	KILHST - Kill host, Fatal error routine.
   5818					;-----
   5819					; KILHST - Here on invalid msg type or 0 length data msg.
   5820					; Probably KMC and host are out of sync. This is not recoverable
   5821					; so the host is killed to preserve the remains for posterity.
   5822					;-----
   5823	001670				KILHST:	LDMA	IMM,	KILDAT		;Load data to send host
   5832	001672					OUT	MEMI,	SELB,	OUTDA1	;Load output reg
   5846	001674					OUT	MEMI,	SELB,	OUTDA2
   5860	001676					OUT	MEMI,	SELB,	OBA1	;Load output addr
   5874	001700					OUT	MEMI,	SELB,	OBA2
   5888	001702					OUT	MEMI,	SELB,	OBR	;Load host memory extension
   5902	001704					OUT	MEMI,	SELB,	ONPR	;Write npr
   5916	001706					HANG		;The time has come for all good things to end.
   5920								;Daisy,  Daisy...
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2
KMCSUB  MAC	KILHST - Kill host, Fatal error routine.

   5922					;-----
   5923					;CALCND - Calc node number from port
   5924					;	Node number = two highest bits of port number
   5925					;	Inputs:
   5926					;		INDAT1 =>	Port number
   5927					;	Outputs:
   5928					;		SP10 =>		Node number (0-3)
   5929					;
   5930					;-----
   5931		002000			.=	2000				;Load in page 2
   5932	002000				CALCND:	BRWRTE	IBUS,	INDAT1		;Get port number
   5946	002002					BRSHFT				;Shift right 6 to get node number
   5961	002004					BRSHFT
   5976	002006					BRSHFT
   5991	002010					BRSHFT
   6006	002012					BRSHFT
   6021	002014					BRSHFT
   6036	002016					SP	BR,	SELB,	SP10	;Load current node number
   6050					;-----
   6051					; Mask off node number, Leaves only port number.
   6052					;-----
   6053	002020					BRWRTE	IMM,	PMASK		;Load port mask
   6067	002022					SP	IBUS,	INDAT1,	SP0	;Get node+port from header
   6081	002024					OUT	BR,	AANDB,	OUTDA1	;Mask off node # leaving port #
   6095					;-----
   6096					; Fall into CHKSTA
   6097					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-1
KMCSUB  MAC	CHKSTA - Check node state for 20 input

   6099					.SBTTL	CHKSTA - Check node state for 20 input
   6100					;-----
   6101					;CHKSTA - Check node state
   6102					;	Node state description:
   6103					;	  Hard down:  Used for nonexistant nodes and while downloading nodes.
   6104					;		These bits are set/cleared by the host in the KMC device
   6105					;		register LINENM (76xxx3). Bits in this reg are defined as:
   6106					;
   6107					;		0 =>	Node 0
   6108					;		1 =>	Node 1
   6109					;		4 =>	Node 2
   6110					;		7 =>	Node 3
   6111					;
   6112					;	  State table:  These are used to dynamically bring up nodes
   6113					;		and to keep the KMC from hanging on a node that has
   6114					;		gone out to lunch.
   6115					;
   6116					;		0 => up		Proceed
   6117					;		1 => down	Try to change state to up-pending
   6118					;		2 => up-pending	Try to change state to up
   6119					;
   6120					;	GETDRC will not return if current DR does not exist.
   6121					;	Dispatch on current node state
   6122					;
   6123					;	CALL SEQUENCE:	Main level routine only!
   6124					;		CALLSB	SP13,	CHKSTA
   6125					;
   6126					;	INPUTS:		SP10 =>	Current node number (0-3)
   6127					;
   6128					;	RETURNS:	Skip return on node up
   6129					;			No skip return if node is down
   6130					;			SP11 =>	Memory offset for current node state
   6131					;
   6132					;-----
   6133	002026				CHKSTA:	SPBR	IBUS,	LINENM,	SP7	;Copy Line Down reg
   6148	002030					BRWRTE	IBUS,	LINENM		;Copy twice as it may have changed
   6162										; since this is dual ported RAM
   6163	002032					COMP	BR,	SP7		;Are both reads the same?
   6166	002034					Z	2$			;Br if read was good
   6169	002036					ALWAYS	CHKSTA			;Bad read, try again

   6173	002040				2$:	LDMA	IMM,	DRCSR		;Prepare to load DRCSR low byte
   6182	002042					BRWRTE	IMM,	DR0ST		;LOAD TABLE BASE INCASE OF DOWN ND
   6196	002044					SP	BR,	SELB,	SP11
   6210	002046					BRWRTE	BR,	SELA,	SP10	;Get node number
   6224	002050					SP	BR,	SELB,	SP0
   6238	002052					BRADDR	XTAB
   6241					;-----
   6242					; Jump table for DR address and node selection
   6243					;-----
   6244	002054					.ALWAY	BR,	ADD,	SP0,	P2
   6255	002056				XTAB:	ALWAYS	DR0
   6258	002060					ALWAYS	DR1
   6261	002062					ALWAYS	DR2
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-2
KMCSUB  MAC	CHKSTA - Check node state for 20 input

   6265					;-----
   6266					; Here for node 3
   6267					;-----
   6268	002064				DR3:	BRWRTE	BR,	SELA,	SP7	;Load device down bits
   6282	002066					BR7	NDR3			; Br if host is down
   6285	002070					MEM	IMM,	DR3LOB		;Load device addr
   6299	002072					BRWRTE	IMM,	DR3ST		;Save state pointer
   6313	002074					ALWAYS	ALLNOD

   6317					;-----
   6318					; Here for node 2
   6319					;-----
   6320	002076				DR2:	BRWRTE	BR,	SELA,	SP7
   6334	002100					BR4	NDR2
   6337	002102					MEM	IMM,	DR2LOB
   6351	002104					BRWRTE	IMM,	DR2ST
   6365	002106					ALWAYS	ALLNOD

   6369					;-----
   6370					; Here for node 1
   6371					;-----
   6372	002110				DR1:	BRWRTE	BR,	SELA,	SP7
   6386	002112					BR1	NDR1
   6389	002114					MEM	IMM,	DR1LOB
   6403	002116					BRWRTE	IMM,	DR1ST
   6417	002120					ALWAYS	ALLNOD

   6421					;-----
   6422					; Here for node 0
   6423					;-----
   6424	002122				DR0:	BRWRTE	BR,	SELA,	SP7
   6438	002124					BR0	NDR0
   6441	002126					MEM	IMM,	DR0LOB
   6455	002130					BRWRTE	IMM,	DR0ST
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-3
KMCSUB  MAC	CHKSTA - Check node state for 20 input

   6470					;-----
   6471					; Here for all nodes to store current node state pointer and
   6472					; check node state
   6473					;-----
   6474	002132				ALLNOD:	SP	BR,	SELB,	SP11, LDMAR ;Store current node state pointer
   6488										; & point to node state
   6489	002134					COMP	MEMX,	SP16		;Test NODE_STATE
   6492	002136					Z	NODDWN			;Br if node is down
   6495	002140					C	HSTCHK			;Br if node is up
   6498	002142					ALWAYS	NODPND			;Node is pending

   6502					;-----
   6503					; Node is down, try to change to up-pending
   6504					;-----
   6505	002144				NODDWN:	CALLSB	SP12,	GETDRC		;Get DRCSR
   6545	002152					BRWRTE	IBUS,	INDAT1		;Get $DVOUT
   6559	002154					BR7	NODICE			;Br if still down
   6562	002156					NODST	BR,	SELA,	SP11,	LDMAR ;Point to node state
   6577	002160					MEM	MEMX,	ADD,	SP16	;Inc state to up-pending
   6591					;-----
   6592					; Node is in up-pending state, try to bring it up
   6593					;-----
   6594	002162				NODPND:	CALLSB	SP12,	GETDRC		;Get DRCSR
   6634	002170					BRWRTE	IBUS,	INDAT1		;Get $DVOUT
   6648	002172					BR7	NODUP			;Br if node came up
   6651	002174					ALWAYS	NODICE			;Still up-pending

   6655					;-----
   6656					; Bring node up
   6657					;-----
   6658	002176				NODUP:	NODST	BR,	SELA,	SP11,	LDMAR ;Point to node state
   6673	002200					MEM	IMM,	0		;Bring node up
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-4
KMCSUB  MAC	CHKSTA - Check node state for 20 input

   6688					;-----
   6689					; Here to check for host output or input
   6690					;-----
   6691	002202				HSTCHK:	BRWRTE	BR,	SELA,	SP1	;Get device number
   6705	002204					BR0	ITISUP			;Br if host output
   6708					;-----
   6709					; See if the node wants to talk
   6710					;-----
   6711	002206					CALLSB	SP12,	GETDRC		;Get DRCSR
   6751	002214					BRWRTE	IBUS,	INDAT1		;Get $DVOUT
   6765	002216					BR7	ITISUP			;Br if node wants to talk
   6768	002220				NODICE:	RTNSUB	SP13,	P0		;Fail-no skip on return

   6781					;-----
   6782					; Here if interface disabled
   6783					;-----
   6784	002222				NDR3:	SP	BR,	INCA,	SP11	;Calculate table offset for RSTITF
   6798	002224				NDR2:	SP	BR,	INCA,	SP11
   6812	002226				NDR1:	SP	BR,	INCA,	SP11
   6826	002230				NDR0:	RTNSUB	SP13,	P0		;Fail - return with no skip

   6839					;-----
   6840					; Here when node is up. Calc & store current DR11 addr
   6841					;
   6842					;	DRCSR=	76xxx0
   6843					;	DROBUF=	76xxx2
   6844					;	DRINBF=	76xxx4
   6845					;-----
   6846	002232				ITISUP:	LDMA	IMM,	DRCSR
   6855	002234					BRWRTE	MEMX,	ADD,	SP15	;Calc INBUF addr
   6869	002236					LDMA	IMM,	DROBUF
   6878	002240					MEM	BR,	SELB		;Store INBUF addr
   6892	002242					LDMA	IMM,	DRINBF
   6901	002244					MEM	BR,	ADD,	SP15	;Store OBUF address low byte
   6915					;-----
   6916					; Node is up, Do skip return.
   6917					;-----
   6918	002246					SP	BR,	INCA,	SP13	;Node up-do skip return
   6932	002250					RTNSUB	SP13,	P0

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-5
KMCSUB  MAC	I/O Subroutines

   6946					.SBTTL	I/O Subroutines
   6947					;-----
   6948					;GETDRC - Get DR11's control status register => DRCSR
   6949					;	This routine will not return to caller if the device does
   6950					;	not exist, rather it goes directly to NXTDEV and 
   6951					;	does not collect $200.
   6952					;-----
   6953	002252				GETDRC:	LDMA	IMM,	DRCSR		;Point to DRCSR addr in my mem
   6962	002254					OUT	MEMI,	SELB,	IBA1	;Load DRCSR addr in NPR registers
   6976	002256					OUT	MEMI,	SELB,	IBA2
   6990	002260					OUT	MEMX,	SELB,	ONPR	;Load high addr bytes and start R NPR
   7004	002262					IOWAIT				;Wait till R NPR complete
   7022	002266					BRWRTE	IBUS,	UBBR		;Check for NXM
   7036	002270					BR0	NXM			;Br if no such device
   7039	002272					RTNSUB	SP12,	P2		;Return with DRCSR in INDAT registers
   7051										; and the knowlege that the device
   7052										; really exists.
   7053					;-----
   7054					;GETDRH - Get DR11's data register => DRINBUF
   7055					;-----
   7056	002274				GETDRH:	LDMA	IMM,	DRINBF
   7065	002276					OUT	MEMI,	SELB,	IBA1
   7079	002300					OUT	MEMI,	SELB,	ONPR	;Load high addr bits and start R NPR
   7093	002302					IOWAIT
   7111	002306					RTNSUB	SP12,	P2		;Return with data in INDAT registers

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-6
KMCSUB  MAC	I/O Subroutines

   7125					;-----
   7126					;ACCEPT - Set accept bit on DR11 ($DVACP), wait for $dvout to clr,
   7127					;	clr $DVACP and return.  A timer is used to keep
   7128					;	a sick node from hanging the KMC11. Timeouts are handled
   7129					;	by calling RSTITF.
   7130					;-----
   7131	002310				ACCEPT:	OUT	IBUS,	INDAT1,	OPORT3	;Save msg temporarily
   7145	002312					OUT	IBUS,	INDAT2,	OPORT4
   7159	002314					LDMA	IMM,	DRCSR
   7168	002316					OUT	MEMI,	SELB,	OBA1	;Load DRCSR output addr
   7182	002320					OUT	MEMI,	SELB,	OBA2
   7196	002322					INCMA
   7199	002324					OUT	MEMI,	SELB,	OBR
   7213	002326					OUT	MEMI,	SELB,	OUTDA1	;Load accept bit to xfer
   7227	002330					OUT	MEMI,	SELB,	OUTDA2
   7241	002332					OUT	MEMI,	SELB,	ONPR	;Start write-npr
   7255	002334					CLR44	IOTIMR			;Clr timer
   7335	002350					IOWAIT				;Make sure npr finished
   7353					;-----
   7354					; Wait for $DVOUT to clear
   7355					;-----
   7356	002354				WAIT00:	LDMA	IMM,	DRCSR
   7365	002356					OUT	MEMI,	SELB,	IBA1	;Load DRCSR addr
   7379	002360					OUT	MEMI,	SELB,	IBA2
   7393	002362					OUT	MEMI,	SELB,	ONPR	;Start read-npr
   7407	002364					LDMA	IMM,	IOTIMR		;Point to I/O timer
   7416	002366					MEM	MEMI,	ADD,	SP16	;Inc loop counter
   7430	002370					MEM	MEMX,	ADDC,	SP17	;Add in carry if any
   7444	002372					BRWRTE	MEMX,	SELB		;Timed out?
   7458	002374					BR7	TMOTI			;Br if timed out
   7461	002376					IOWAIT
   7479	002402					BRWRTE	IBUS,	INDAT1		;Get $DVOUT
   7493	002404					BR7	WAIT00			;Br if $DVOUT not clr yet
   7496	002406					LDMA	IMM,	CST
   7505	002410					OUT	MEMI,	SELB,	OUTDA1	;Clr low byte
   7519	002412					OUT	MEMI,	SELB,	ONPR	;Start write-npr
   7533	002414					IOWAIT
   7551					;-----
   7552					; Xfer data to output registers
   7553					;-----
   7554	002420					OUT	IBUS,	PORT3,	OUTDA1
   7568	002422					OUT	IBUS,	PORT4,	OUTDA2
   7582	002424					RTNSUB	SP12,	P2
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-7
KMCSUB  MAC	GETDR - Get word from node

   7595					.SBTTL	GETDR - Get word from node
   7596					;-----
   7597					;GETDR - Get a word from current node
   7598					;-----
   7599	002426				GETDR:
   7600	002426				NOTRDY:	CALLSB	SP12,	GETDRC		;Get DRCSR
   7640	002434					BRWRTE	IBUS,	INDAT1		;Load $DVOUT
   7654	002436					BR7	RDY			;Br when data is ready
   7657	002440					ALWAYS	NOTRDY

   7661	002442				RDY:	CALLSB	SP12,	GETDRH		;Get data word
   7701	002450					CALLSB	SP12,	ACCEPT		;Finish handshake
   7741	002456					RTNSUB	SP13,	P0		;Done with word

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-8
KMCSUB  MAC	GETDR - Get word from node

   7755					;-----
   7756					;PUTDR - Routine to put a word in a DR11 (base)
   7757					;-----
   7758					; Wait for last $DVACP to clr from last xmit
   7759	002460				PUTDR:	CLR44	IOTIMR			;Clr timer
   7839	002474				NOTDN:	CALLSB	SP12,	TIMCHK		;Check for timeout
   7879	002502					CALLSB	SP12,	GETDRC		;Copy DRCSR
   7919	002510					BRWRTE	IBUS,	INDAT2
   7933	002512					BR7	NOTDN			;Loop till $DVACP = 0 or timout
   7936					; Load DROBUF addr and send data word
   7937	002514					LDMA	IMM,	DROBUF		;Point to addr in mem
   7946	002516					OUT	MEMI,	SELB,	OBA1	;Load reg
   7960	002520					OUT	MEMI,	SELB,	OBA2
   7974	002522					OUT	MEMI,	SELB,	OBR	;Load mem ext
   7988	002524					OUT	MEMI,	SELB,	ONPR	;Load high bits and start write-npr
   8002	002526					IOWAIT
   8020					; Set $DVOUT bit on DR
   8021	002532					OUT	MEMI,	SELB,	OUTDA1	;Load bits to send
   8035	002534					OUT	MEMI,	SELB,	OUTDA2
   8049	002536					LDMA	IMM,	DRCSR		;Load DRCSR addr
   8058	002540					OUT	MEMI,	SELB,	OBA1
   8072	002542					OUT	MEMI,	SELB,	OBA2
   8086	002544					LDMA	IMM,	WNPRZ
   8095	002546					OUT	MEMI,	SELB,	ONPR	;Start write-npr
   8109					; Wait for $DVACP to be set
   8110	002550					CLR44	IOTIMR			;Clr timer
   8190	002564					IOWAIT
   8208	002570				NTDON:	CALLSB	SP12,	TIMCHK		;Check for timeout
   8248	002576					CALLSB	SP12,	GETDRC		;Copy DRCSR
   8288	002604					BRWRTE	IBUS,	INDAT2
   8302	002606					BR7	2$			;Br if $DVACP is set
   8305	002610					ALWAYS	NTDON			;Not ready yet

   8309					; Clr $DVOUT and return
   8310	002612				2$:	BRWRTE	IMM,	0
   8324	002614					OUT	BR,	SELB,	OUTDA1	;Clr data reg
   8338	002616					LDMA	IMM,	WNPRZ
   8347	002620					OUT	MEMX,	SELB,	ONPR	;Start write-npr
   8361	002622					RTNSUB	SP13,	P0		;Done with this word

   8374					;-----
   8375					;TIMCHK - Increment timer and check for timeout
   8376					;	Timeout will crash node else return
   8377					;-----
   8378	002624				TIMCHK:	LDMA	IMM,	IOTIMR		;Point to word
   8387	002626					MEM	MEMI,	ADD,	SP16	;Inc low byte
   8401	002630					MEM	MEMX,	ADDC,	SP17	;Add carry if any
   8415	002632					BRWRTE	MEMX,	SELB
   8429	002634					BR7	EATOPT			;Br if timed out
   8432	002636					RTNSUB	SP12,	P2		;Ok - return

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-9
KMCSUB  MAC	Return jump table

   8446					.SBTTL	Return jump table
   8447					;-----
   8448					; Return jump table for subroutines called from several pages.
   8449					;-----

   8451	002640				RX0:	ALWAYS	RT0
   8454	002642				RX2:	ALWAYS	RT2
   8457	002644				RX4:	ALWAYS	RT4
   8460	002646				RX6:	ALWAYS	RT6
   8463	002650				RX10:	ALWAYS	NXTDEV			;Return for Node Active msg (null msg)
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-10
KMCSUB  MAC	GET20 - Routine to get a word from host ring buffer

   8467					.SBTTL	GET20 - Routine to get a word from host ring buffer
   8468					;-----
   8469					; GET20 - Routine to get a word from host output ring buffer
   8470					;	Returns:
   8471					;		BRG => 1 if successful,  0 if no output to do
   8472					;-----
   8473		003000			.=	3000				;Load in page 3

   8475					;-----
   8476					; Comp internal output ring pointers ORK & ORP to see if there is output to do
   8477					;-----
   8478	003000				GET20:	LDMA	IMM,	ORK
   8487	003002					SP	MEMI,	SELB,	SP2
   8501	003004					SP	MEMI,	SELB,	SP3
   8515	003006					COMP	MEMI,	SP2		;Comp ORK to ORP
   8518	003010					Z	2$
   8521	003012					ALWAYS	DOOUT

   8525	003014				2$:	COMP	MEMI,	SP3
   8528	003016					Z	NEWORP
   8531	003020					ALWAYS	DOOUT

   8535					;-----
   8536					; Get new output ring pointer from host and update ORP
   8537					;-----
   8538	003022				NEWORP:	LDMA	IMM,	ORPPD
   8547	003024					OUT	MEMI,	SELB,	IBA1
   8561	003026					OUT	MEMI,	SELB,	IBA2
   8575	003030					OUT	MEMI,	SELB,	ONPR
   8589					;-----
   8590					; Store new output ring pointer ORP
   8591					;-----
   8592	003032					LDMA	IMM,	ORP
   8601	003034					IOWAIT
   8619	003040					MEM	IBUS,	INDAT1,	INCMAR
   8633	003042					MEM	IBUS,	INDAT2,	INCMAR
   8647					;-----
   8648					; Compare ORK & ORP
   8649					;-----
   8650	003044				CMPTR:	LDMA	IMM,	ORP
   8659	003046					COMP	MEMI,	SP2
   8662	003050					Z	2$
   8665	003052					ALWAYS	DOOUT

   8669	003054				2$:	COMP	MEMI,	SP3
   8672	003056					Z	NOOUT
   8675	003060					ALWAYS	DOOUT

   8679					;-----
   8680					; Buffer is empty
   8681					;-----
   8682	003062				NOOUT:	BRWRTE	IMM,	0		;Set unsuccessful flag
   8696	003064					RTNSUB	SP12,	P0
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-11
KMCSUB  MAC	GET20 - Routine to get a word from host ring buffer

   8709					;-----
   8710					; Output to do! Get data word
   8711					;-----
   8712	003066				DOOUT:	LDMA	IMM,	ORKAD
   8721	003070					OUT	MEMI,	SELB,	IBA1
   8735	003072					OUT	MEMI,	SELB,	IBA2
   8749	003074					OUT	MEMI,	SELB,	ONPR
   8763					;-----
   8764					; Inc ORKAD to point to next 16 bit word
   8765					;-----
   8766	003076				INCPT:	LDMA	IMM,	ORKAD
   8775	003100					SP	MEMI,	SELB,	SP2
   8789	003102					SP	MEMI,	SELB,	SP3
   8803	003104					BRWRTE	IMM,	2
   8817	003106					SP	BR,	ADD,	SP2
   8831	003110					SP	BR,	APLUSC,	SP3
   8845					;-----
   8846					; Check for wrap around
   8847					;-----
   8848	003112					LDMA	IMM,	ORMXAD
   8857	003114					COMP	MEMI,	SP2
   8860	003116					Z	2$
   8863	003120					ALWAYS	STORKA

   8867	003122				2$:	COMP	MEMI,	SP3
   8870	003124					Z	4$
   8873	003126					ALWAYS	STORKA

   8877					;-----
   8878					; Wrapped around, load base addr
   8879					;-----
   8880	003130				4$:	LDMA	IMM,	ORBAD
   8889	003132					SP	MEMI,	SELB,	SP2
   8903	003134					SP	MEMI,	SELB,	SP3
   8917					;-----
   8918					; Store new ORKAD
   8919					;-----
   8920	003136				STORKA:	LDMA	IMM,	ORKAD
   8929	003140					MEM	BR,	SELA,	SP2,	INCMAR
   8943	003142					MEM	BR,	SELA,	SP3,	INCMAR
   8957					;-----
   8958					; Check for odd PDP10 half-word
   8959					;-----
   8960	003144					IOWAIT
   8978					;-----
   8979					; Xfer data to output reg
   8980					;-----
   8981	003150					OUT	IBUS,	INDAT1,	OUTDA1
   8995	003152					OUT	IBUS,	INDAT2,	OUTDA2
   9009	003154					BRWRTE	BR,	SELA,	SP2
   9023	003156					BR1	RTNX			;Return via successful flag

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-12
KMCSUB  MAC	GET20 - Routine to get a word from host ring buffer

   9028					;-----
   9029					; Inc ORK
   9030					;-----
   9031	003160				INCORK:	LDMA	IMM,	ORK
   9040	003162					SP	MEMI,	SELB,	SP2
   9054	003164					SP	MEMI,	SELB,	SP3
   9068	003166					SP	BR,	INCA,	SP2
   9082	003170					SP	BR,	APLUSC,	SP3
   9096					;-----
   9097					; Check for wrap
   9098					;-----
   9099	003172					LDMA	IMM,	ORKMX
   9108	003174					COMP	MEMI,	SP2
   9111	003176					Z	12$
   9114	003200					ALWAYS	STORK

   9118	003202				12$:	COMP	MEMI,	SP3
   9121	003204					Z	14$
   9124	003206					ALWAYS	STORK

   9128					;-----
   9129					; Wrapped around, zero buffer offset
   9130					;-----
   9131	003210				14$:	BRWRTE	IMM,	0
   9145	003212					SP	BR,	SELB,	SP2
   9159	003214					SP	BR,	SELB,	SP3
   9173					;-----
   9174					; Store new ORK
   9175					;-----
   9176	003216				STORK:	LDMA	IMM,	ORK
   9185	003220					MEM	BR,	SELA,	SP2,	INCMAR
   9199	003222					MEM	BR,	SELA,	SP3,	INCMAR
   9213					;-----
   9214					; Set successful flag and return
   9215					;-----
   9216	003224				RTNX:	BRWRTE	IMM,	1		;Set successful flag
   9230	003226					RTNSUB	SP12,	P0
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-13
KMCSUB  MAC	PUT20 - Routine to put a word in host ring buffer

   9243					.SBTTL	PUT20 - Routine to put a word in host ring buffer
   9244					;-----
   9245					; PUT20 -- routine to insert a message into host input ring buffer
   9246					;	Inputs:
   9247					;		IRKAD => Unibus address of next available location
   9248					;			 in input ring buffer.
   9249					;		IRBAD => Unibus address of input ring buffer base.
   9250					;		IRK   => IRPKMC, internal copy of KMC's input ring pointer
   9251					;-----

   9253					;-----
   9254					; Load address to send data to from KMC mem
   9255					;-----
   9256	003230				PUT20:	LDMA	IMM,	IRKAD
   9265	003232					OUT	MEMI,	SELB,	OBA1
   9279	003234					OUT	MEMI,	SELB,	OBA2
   9293	003236					OUT	MEMI,	SELB,	OBR	;Load host mem ext
   9307					;-----
   9308					; Write 16 bit word into input ring buffer
   9309					;-----
   9310	003240					OUT	MEMI,	SELB,	ONPR
   9324	003242					SP	BR,	DECA,	SP6	;Dec word-to-go
   9338					;-----
   9339					; Increment IRKAD to point to next available PDP10 half-word in
   9340					; input ring buffer.
   9341					;-----
   9342	003244				INCPTR:	LDMA	IMM,	IRKAD
   9351	003246					SP	MEMI,	SELB,	SP2	;Get IRKAD
   9365	003250					SP	MEMI,	SELB,	SP3
   9379	003252					BRWRTE	IMM,	2
   9393	003254					SP	BR,	ADD,	SP2	;Add 2
   9407	003256					SP	BR,	APLUSC,	SP3	; with carry if necessary
   9421					;-----
   9422					; Check for wrap around
   9423					;-----
   9424	003260					LDMA	IMM,	IRMXAD
   9433	003262					COMP	MEMI,	SP2		;Are lo by same?
   9436	003264					Z	2$			; Br if so
   9439	003266					ALWAYS	6$			; not same

   9443	003270				2$:	COMP	MEMI,	SP3		;Are hi by same?
   9446	003272					Z	4$			; Br if wrapped
   9449	003274					ALWAYS	6$			; not same

   9453					;-----
   9454					; Wrapped around, load IRKAD with input ring base addr (IRBAD)
   9455					;-----
   9456	003276				4$:	LDMA	IMM,	IRBAD
   9465	003300					SP	MEMI,	SELB,	SP2
   9479	003302					SP	MEMI,	SELB,	SP3
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-14
KMCSUB  MAC	PUT20 - Routine to put a word in host ring buffer

   9494					;-----
   9495					; Store IRKAD. It now points to next available location in buffer
   9496					;-----
   9497	003304				6$:	LDMA	IMM,	IRKAD
   9506	003306					MEM	BR,	SELA,	SP2,	INCMAR ;Store IRKAD
   9520	003310					MEM	BR,	SELA,	SP3,	INCMAR
   9534					;-----
   9535					; Inc IRK with wrap around check if on odd PDP10 half-word
   9536					;-----
   9537	003312					BRWRTE	BR,	SELA,	SP2
   9551	003314					BR1	7$			;Br if even
   9554	003316					ALWAYS	10$			;Needs rounding

   9558					;-----
   9559					; Done with this msg? If so must round up to next PDP10 word boundry
   9560					;-----
   9561	003320				7$:	BRWRTE	IMM,	0
   9575	003322					COMP	BR,	SP6
   9578	003324					Z	INCPTR			;Br if done and round up
   9581	003326					RTNSUB	SP13,	P0		;Even, return

   9594					;-----
   9595					; Need to inc IRK
   9596					;-----
   9597	003330				10$:	LDMA	IMM,	IRK
   9606	003332					SP	MEMI,	SELB,	SP2
   9620	003334					SP	MEMI,	SELB,	SP3
   9634	003336					SP	BR,	INCA,	SP2	;Inc IRK
   9648	003340					SP	BR,	APLUSC,	SP3
   9662					;-----
   9663					; Check for wrap arround
   9664					;-----
   9665	003342					COMP	MEMI,	SP2		;Check for wrap around
   9668	003344					Z	12$			; Br if lo by same
   9671	003346					ALWAYS	16$			; not same

   9675	003350				12$:	COMP	MEMI,	SP3
   9678	003352					Z	14$			;Br if hi by same
   9681	003354					ALWAYS	16$			; not same

   9685					;-----
   9686					; Wrapped around, zero buffer offset
   9687					;-----
   9688	003356				14$:	BRWRTE	IMM,	0
   9702	003360					SP	BR,	SELB,	SP2
   9716	003362					SP	BR,	SELB,	SP3
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-15
KMCSUB  MAC	PUT20 - Routine to put a word in host ring buffer

   9731					;-----
   9732					; Store new IRK
   9733					;-----
   9734	003364				16$:	LDMA	IMM,	IRK
   9743	003366					MEM	BR,	SELA,	SP2,	INCMAR
   9757	003370					MEM	BR,	SELA,	SP3,	INCMAR
   9771					;-----
   9772					; Compare input ring pointers
   9773					;-----
   9774	003372				CMPIRP:	LDMA	IMM, IRP
   9783	003374					COMP	MEMI,	SP2
   9786	003376					Z	20$
   9789	003400					ALWAYS	22$

   9793	003402				20$:	COMP	MEMI,	SP3
   9796	003404					Z	24$
   9799					;-----
   9800					; Done with msg? If so br to input done routine
   9801					;-----
   9802	003406				22$:	BRWRTE	IMM,	0
   9816	003410					COMP	BR,	SP6
   9819	003412					Z	INPDON			;Br if done with msg
   9822	003414					RTNSUB	SP13,	P0

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-16
KMCSUB  MAC	PUT20 - Routine to put a word in host ring buffer

   9836					;-----
   9837					; Internal pointers are same, get a new IRP from host
   9838					;-----
   9839	003416				24$:	LDMA	IMM,	IRPPD
   9848	003420					OUT	MEMI,	SELB,	IBA1
   9862	003422					OUT	MEMI,	SELB,	IBA2
   9876	003424					OUT	MEMI,	SELB,	ONPR
   9890					;-----
   9891					; Store new IRP
   9892					;-----
   9893	003426					LDMA	IMM,	IRP
   9902	003430					MEM	IBUS,	SELB,	INDAT1,	INCMAR
   9916	003432					MEM	IBUS,	SELB,	INDAT2,	INCMAR
   9930	003434					ALWAYS	CMPIRP

   9934					;-----
   9935					; Input done, pointers are all fixed up and only the host pointer
   9936					; needs updated.
   9937	003436				INPDON:	LDMA	IMM,	IRK		;Load data
   9946	003440					OUT	MEMI,	SELB,	OUTDA1
   9960	003442					OUT	MEMI,	SELB,	OUTDA2
   9974	003444					LDMA	IMM,	IRPKM		;Load host pointer address
   9983	003446					OUT	MEMI,	SELB,	OBA1
   9997	003450					OUT	MEMI,	SELB,	OBA2
  10011	003452					OUT	MEMI,	SELB,	ONPR
  10025					;-----
  10026					; Check to see if there is a second data msg to send.
  10027					;-----
  10028	003454					BRWRTE	IMM,	0
  10042	003456					COMP	BR,	SP5		;Is there a 2nd data msg to process?
  10045	003460					Z	NXTDEV			;Br if not (Normal end of msg)
  10048					;-----
  10049					; Here to fix up for 2nd data message
  10050					;-----
  10051	003462					BRWRTE	BR,	SELA,	SP5	;Get header
  10065	003464					OUT	BR,	SELB,	OUTDA2	;Restore it
  10079	003466					BRWRTE	BR,	SELA,	SP4,	;Get port number
  10093	003470					OUT	BR,	SELB,	OUTDA1	;Restore it
  10107	003472					BRWRTE	IMM,	0		;Clear queue
  10121	003474					SP	BR,	SELB,	SP5
  10135	003476					ALWAYS	MUNG2			;All fixed up. Xmit 2nd msg.
  10138					;-----
  10139					; END of PUT20!
  10140					;-----
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 1
KMCTAB  MAC	KMCTAB - KMC Data tables

  10141					.SBTTL	KMCTAB - KMC Data tables
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2
KMCTAB  MAC	KMCTAB - KMC Data tables

  10142		004000			.=	2048.				;RAM is loaded from here on

  10144					;-----
  10145					; Begin data tables for page 0
  10146					; This page contains the device scheduling data block as well as
  10147					; the DR0 data blocks.
  10148					;-----
  10149	004000	   001				.BYTE	1

  10151					;-----
  10152					; Message length table.
  10153					;	Warning!! The message number is used as the page offset
  10154					;		so don't relocate this block!
  10155					; This table contains the message lengths as 16 bit words.
  10156					;-----
  10157	004001	   001			MSGTBX:	.BYTE	1			;Message length table, in 16 bit words
  10158	004002	   001				.BYTE	1
  10159	004003	   001				.BYTE	1
  10160	004004	   001				.BYTE	1
  10161	004005	   001				.BYTE	1
  10162	004006	   001				.BYTE	1
  10163	004007	   002				.BYTE	2

  10165	004010	   001				.BYTE	1
  10166	004011	   001				.BYTE	1
  10167	004012	   001				.BYTE	1
  10168	004013	   001				.BYTE	1
  10169	004014	   001				.BYTE	1
  10170	004015	   001				.BYTE	1
  10171	004016	   001				.BYTE	1
  10172	004017	   001				.BYTE	1

  10174	004020	   001				.BYTE	1
  10175	004021	   001				.BYTE	1
  10176	004022	   001				.BYTE	1
  10177	004023	   001				.BYTE	1
  10178	004024	   001				.BYTE	1
  10179	004025	   002				.BYTE	2
  10180	004026	   002				.BYTE	2
  10181	004027	   002				.BYTE	2

  10183	004030	   002				.BYTE	2
  10184	004031	   003				.BYTE	3
  10185	004032	   003				.BYTE	3
  10186	004033	   003				.BYTE	3
  10187	004034	   001				.BYTE	1
  10188	004035	   001				.BYTE	1
  10189	004036	   002				.BYTE	2
  10190	004037	   002				.BYTE	2

  10192	004040	   002				.BYTE	2
  10193	004041	   002				.BYTE	2
  10194	004042	   001				.BYTE	1
  10195	004043	   003				.BYTE	3
  10196	004044	   004				.BYTE	4
  10197	004045	   001				.BYTE	1
  10198	004046	   004				.BYTE	4
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-1
KMCTAB  MAC	KMCTAB - KMC Data tables

  10199	004047	   002				.BYTE	2

  10201	004050	   002				.BYTE	2
  10202	004051	   002				.BYTE	2
  10203	004052	   001				.BYTE	1
  10204	004053	   002				.BYTE	2
  10205	004054	   001				.BYTE	1
  10206	004055	   001				.BYTE	1
  10207	004056	   002				.BYTE	2
  10208	004057	   001				.BYTE	1

  10210	004060	   002				.BYTE	2
  10211	004061	   001				.BYTE	1
  10212	004062	   001				.BYTE	1			;End msg length table!

KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-2
KMCTAB  MAC	KMCTAB - KMC Data tables

  10215					;-----
  10216					; Data block used by INIT
  10217					;-----
  10218	004063	   000			INITX:	.BYTE	0			;SP17 constant
  10219	004064	   001				.BYTE	1			;SP16 constant
  10220	004065	   002				.BYTE	2			;SP15 constant
  10221	004066	   177				.BYTE	177			;SP14 data message mask
  10222	004067	   256				.BYTE	IRBALO			;IRBASE lo by
  10223	004070	   011				.BYTE	IRBAHI			; hi by
  10224	004071	   005				.BYTE	RHSNPR			;Read npr
  10225	004072	   262			INIT0X:	.BYTE	IRSILO			;IRSIZE addr lo by
  10226	004073	   011				.BYTE	IRSIHI			; hi by
  10227	004074	   005				.BYTE	RHSNPR			;Read npr
  10228	004075	   276			INIT1X:	.BYTE	ORBALO			;ORBASE lo by
  10229	004076	   011				.BYTE	ORBAHI			; hi by
  10230	004077	   005				.BYTE	RHSNPR			;Read npr
  10231	004100	   302			INIT2X:	.BYTE	ORSILO			;ORSIZE addr lo by
  10232	004101	   011				.BYTE	ORSIHI			; hi by
  10233	004102	   005				.BYTE	RHSNPR			;Read npr
  10234					;-----
  10235					; Data block used by GETDRH
  10236					;-----
  10237	004103	   000			DRINBX:	.BYTE	0			;Lo byte
  10238	004104	   015				.BYTE	RDVNPR
  10239					;-----
  10240					; Data block used by GETDRC & ACCEPT
  10241					;-----
  10242	004105	   370			DRCSRX:	.BYTE	DR0LOB			;DRCSR
  10243	004106	   357				.BYTE	DR0HIB
  10244	004107	   015				.BYTE	RDVNPR			;Read NPR
  10245					;-----
  10246					; Data block used by ACCEPT (fall in)
  10247					;-----
  10248	004110	   014			CSZX:	.BYTE	DEVEXT			;High addr bits
  10249	004111	   002				.BYTE	2			;Accept bits
  10250	004112	   000			CSTX:	.BYTE	0			; "
  10251	004113	   021			WNPRX:	.BYTE	WNPR			;Write-npr
  10252					;-----
  10253					; Data block used by PUTDR
  10254					;-----
  10255	004114	   000			DROBFX:	.BYTE	0			;DR output buffer, lo byte
  10256	004115	   357				.BYTE	DR0HIB			; Hi by
  10257	004116	   014				.BYTE	DEVEXT			;Device memory extension
  10258	004117	   021				.BYTE	WNPR			;Write-npr
  10259	004120	   001				.BYTE	1			;$DVOUT bits low by
  10260	004121	   000				.BYTE	0			; Hi by
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-3
KMCTAB  MAC	KMCTAB - KMC Data tables

  10262					;-----
  10263					; Data block used by Main program message type dispatchers
  10264					;-----
  10265	004122	   177			CONSTX:	.BYTE	BKMHDR			;Block mode header
  10266	004123	   176				.BYTE	NDACT			;Node active msg (null msg)
  10267	004124	   063			MXMSGX:	.BYTE	MAXMSG			;Max legal msg #
  10268					;-----
  10269					; Data block for device scheduling
  10270					;-----
  10271	004125	   001			DR0STX:	.BYTE	1			;Node states. DOWN initially
  10272	004126	   001			DR1STX:	.BYTE	1
  10273	004127	   001			DR2STX:	.BYTE	1
  10274	004130	   001			DR3STX:	.BYTE	1
  10275					;-----
  10276					; Data block used by PUT20
  10277					;-----
  10278	004131	   000			IRKADX:	.BYTE	0			;Unibus addr of next input ring loc
  10279	004132	   000				.BYTE	0			; hi
  10280	004133	   004			HSMEXX:	.BYTE	HSTEXT			;Host mem ext
  10281	004134	   021				.BYTE	WNPR			;Write-npr

  10283	004135	   000			IRMXAX:	.BYTE	0			;Max IRKAD+2
  10284	004136	   000				.BYTE	0			; hi

  10286	004137	   000			IRBADX:	.BYTE	0			;Input ring base addr (uinbus)
  10287	004140	   000				.BYTE	0			; hi

  10289	004141	   000			IRKX:	.BYTE	0			;Input ring offset (10 addr)
  10290	004142	   000				.BYTE	0			; hi
  10291	004143	   000			IRKMXX:	.BYTE	0			;Input ring offset max+1 (10 addr)
  10292	004144	   000				.BYTE	0			; hi

  10294	004145	   000			IRPX:	.BYTE	0			;Input ring host offset pointer (10 ad)
  10295	004146	   000				.BYTE	0			; hi

  10297	004147	   266			IRPPDX:	.BYTE	IRPPLO			;Input ring host pointer addr (unibus)
  10298	004150	   011				.BYTE	IRPPHI			; hi
  10299	004151	   005				.BYTE	RHSNPR			;Read-npr

  10301	004152	   272			IRPKMX:	.BYTE	IRPKLO			;Input ring KMC pointer addr (unibus)
  10302	004153	   011				.BYTE	IRPKHI			; hi
  10303	004154	   021				.BYTE	WNPR			;Write-npr
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-4
KMCTAB  MAC	KMCTAB - KMC Data tables

  10305					;-----
  10306					; Data block used by GET20
  10307					;-----
  10308	004155	   000			ORKX:	.BYTE	0			;Internal output ring KMC offset (10 ad)
  10309	004156	   000				.BYTE	0			; hi by
  10310	004157	   000			ORPX:	.BYTE	0			;Internal output ring PDP offset (10 ad)
  10311	004160	   000				.BYTE	0			; hi by

  10313	004161	   306			ORPPDX:	.BYTE	ORPPLO			;ORPPDP unibus addr  lo by
  10314	004162	   011				.BYTE	ORPPHI			; hi by
  10315	004163	   005			RHNPRX:	.BYTE	RHSNPR			;Read-npr

  10317	004164	   000			ORKADX:	.BYTE	0			;Unibus addr of next 16 bit word in out
  10318	004165	   000				.BYTE	0			; hi by
  10319	004166	   005				.BYTE	RHSNPR			;Read-npr

  10321	004167	   000			ORMXAX:	.BYTE	0			;Output ring max addr+2 Unibus addr
  10322	004170	   000				.BYTE	0			; hi by

  10324	004171	   276			ORBADX:	.BYTE	ORBALO			;Output ring base addr
  10325	004172	   011				.BYTE	ORBAHI			; hi by

  10327	004173	   000			ORKMXX:	.BYTE	0			;Output ring max buf offset+1 (10 addr)
  10328	004174	   000				.BYTE	0			; hi by
  10329
KMCKOD - KMC11 host-base microcode	MACN11   V4.43   11-SEP-80   10:07   PAGE 2-5
KMCTAB  MAC	KMCTAB - KMC Data tables

  10331					;-----
  10332					; Data block used by UPDOPT
  10333					;-----
  10334	004175	   312			ORPKMX:	.BYTE	ORPKLO			;Output ring KMC pointer address
  10335	004176	   011				.BYTE	ORPKHI			; Hi by
  10336	004177	   004				.BYTE	HSTEXT			;Host mem ext
  10337	004200	   021				.BYTE	WNPR			;Write-npr

  10339					;-----
  10340					; Data block used by I/O timer
  10341					;-----
  10342	004201	   000			IOTIMX:	.BYTE	0			;Timer variable for I/O timouts
  10343	004202	   000				.BYTE	0
  10344	004203	   000				.BYTE	0
  10345	004204	   000				.BYTE	0
  10346	004205	   000				.BYTE	0			; hi by

  10348					;-----
  10349					; Data table used by NXMTRP. These ARE the bit values to be set
  10350					; upon attempted access of a nonexistant DR11 (node).
  10351					;-----
  10352	004206	   001			NXMBTX:	.BYTE	1		;DR0 bit
  10353	004207	   002				.BYTE	2		;DR1 bit
  10354	004210	   020				.BYTE	20		;DR2 bit
  10355	004211	   200				.BYTE	200		;DR3 bit

  10357					;-----
  10358					; Data block used by KILHST
  10359					;-----
  10360	004212	   001			KILDAX:	.BYTE	1			;Magik number for kill
  10361	004213	   000				.BYTE	0			; "
  10362	004214	   142				.BYTE	KILLLO			;Magik address in host for kill msg
  10363	004215	   000				.BYTE	KILLHI			; "
  10364	004216	   004				.BYTE	HSTEXT			;Host mem ext
  10365	004217	   021				.BYTE	WNPR			;Write npr
  10366		005777			.=	5777				;Last location in KMC RAM
  10367	005777	   377				.BYTE	377			;Must be here for KMC loader to work!

  10369						.END	START
    vW{y