.SBTTL	KMCKOD - Main program
	ALWAYS	STARTX			;Jump to initialization code
.SBTTL	NXTDEV - Main loop - Device scheduling
;-----
;NXTDEV - Main loop and device scheduler.
;	There are 8 device states, all odd states dispatch to PDP20
;	service routine, even states dispatch to DR11 service routine.
;	All scheduling variables & data are stored in page 0.
;
;	States:	0,2,4,6 => DR0,DR1,DR2,DR3	(base)
;		1,3,5,7 => PDP20		(host)
;-----

;-----
; Select next device and store in SP1
;-----
NXTDEV:	SP	BR,	INCA,	SP1	;Select next device
	BRWRTE	IMM,	7		; Insure that there is no wrap around
	SPBR	BR,	AANDB,	SP1
;-----
; Dispatch to input or output routines
;-----
	BR0	DO20			;If DEVICE is odd do 20 service
.SBTTL	Host input routine
;-----
; Host input routine
;	SP1 => Current node*2
;-----
	BRSHFT				;Calc unit number
	SP	BR,	SELB,	SP10	; and save in SP10
	CALLSB	SP13,	CHKSTA		;See if node is up
	  ALWAYS	NXTDEV		;Dead node
					;Skip return if node is up

.PAGE
.SBTTL	GETHDR - Get header from node
;-----
;GETHDR - Node wishes to speak, get header, check for valid msg type
;	and dispatch to proper processing routine. The DR11's
;	$DVACP bit is not set till the msg at least appears valid
;-----
GETHDR:	CALLSR	SP12,	GETDRH,	RX0	;Get header word
;-----
; Calculate host port number from node number and port number
; supplied by node and restore to header.
;	host port # = node port # + node # * 100
;-----
RT0:	BRWRTE	BR,	SELA,	SP10	;Load node number (0-3)
	BROTAT				;Rotate to 2 highest bit positions
	BROTAT
	SP	IBUS,	INDAT1,	SP0	;Load port number from header
	OUT	BR,	AORB,	OIDAT1	;Calc host port number & restore
;-----
; Dispatch on message type
;-----
	SPBR	IBUS,	INDAT2,	SP2	;Get MSG_TYP from header
	BR7	DATAIN			;Br if data msg
	COMP	BR,	SP17		;Test MSG_TYP for valdity
	Z	RSTITF			;Br if invalid msg type
	LDMA	IMM,	CONST
	COMP	MEMI,	SP2		;
	Z	BLKMOD			;Br if block mode
	COMP	MEMI,	SP2		;Test for Node Active msg
	Z	NODACT			;Br if node active msg
	COMP	MEMI,	SP2		;Test for MSG_TYP > MSGMAX
	C	RSTITF			;Br if invalid msg type
					;Fall into normal msg code
.PAGE
.SBTTL	Normal input => 20
;-----
;Normal Input => 20's ring buffer
;	Accept header, lookup msg length and xfer msg
;-----
	CALLSR	SP12,	ACCEPT,	RX2	;Accept msg
RT2:	NODST	BR,	SELA,	SP2, LDMAR ;Load msgtype as table offset
	SP	MEMX,	SELB,	SP6	;Get wrd_to_go
XFER00:	CALLSB	SP13,	PUT20		;Output word
	CALLSB	SP13,	GETDR		;Get data word
	ALWAYS	XFER00			;More to xfer

.SBTTL	NULL MESSAGE
;-----
; NULL Message - Used to sequence the node from a down state
; to an up state. This msg is discarded.
;-----
NODACT:	CALLSR	SP12,	ACCEPT,	RX10	;Accept this msg
;	ALWAYS	NXTDEV			;RETURN VIA INTERPAGE RETURN

.PAGE
.SBTTL	DATAIN - Data input => 20
;-----
;DATAIN-Xfer data blk 11 => 20
;	Note: May eventually want to breakup data msg that wrap around
;-----
DATAIN:	CALLSR	SP12,	ACCEPT,	RX4	;Accept header
RT4:
;-----
; Entry point for 2nd data message
;-----
MUNG2:	BRWRTE	IBUS,	IODAT2		;Get header
	BRWRTE	BR,	AANDB,	SP14	;Mask to get byte count
	SP	BR,	SELB,	SP2	;Save byte count
	COMP	BR,	SP17		;Check for 0 length data msg
	Z	RSTITF			;Br on invalid message length
	BRWRTE	IMM,	2		;Check for short data msg
	COMP	BR,	SP2		;
	C	MUNGCK			;Br if must check for data msg wrap arnd
;-----
; Convert header byte count to word count
; by masking off sign bit, rounding up one byte and shifting
; bytes => words.
;-----
MUNGRT:	BRWRTE	BR,	ADD,	SP16	;Round up to next word
	BRSHFT				;Mask and shift
	BRWRTE	BR,	ADD,	SP16	;Add one for the header
	SP	BR,	SELB,	SP6	;Store wrd_to_go
;-----
; Xfer data
;-----
XFER01:	CALLSB	SP13,	PUT20		;Put word in 20's ring buffer
	CALLSB	SP13,	GETDR		;Get data word
	ALWAYS	XFER01			;More to do!

.PAGE
.SBTTL	BLKMOD - Block_mode input and output
;-----
;BLKMOD -- Start block mode. This can only be initiated by the
;	base.  Accept msg, get rest of msg (KMC swallows this msg).
;	START_BLOCKMOD msg =>	177,	wrdcnt,	address
;				1 byte	2 bytes	3 bytes
;-----

BLKMOD:	CALLSR	SP12,	ACCEPT,	RX6	;Accept msg header
RT6:	SP	IBUS,	IODAT1,	SP7	;Get xfer direction bit (bit 7)
	CALLSB	SP13,	GETDR		;Get more of msg
	SP	IBUS,	IODAT2,	SP6	;Get word count
	CALLSB	SP13,	GETDR		;Get last of msg
;-----
; Convert address from PDP10 to Unibus. That is shift left 2
;-----
	CALLSB	SP13,	SHFL16		;Shift INDAT left
	CALLSB	SP13,	SHFL16		; "
	SP	IBUS,	IODAT1,	SP2	;Save addr
	SP	IBUS,	IODAT2,	SP3
;-----
; We now have word count in SP6 and the unibus addr in SP2 & SP3
; Test for transfer direction: pos => OUTPUT, neg => INPUT
;-----
	BRWRTE	BR,	SELA,	SP7	;Get direction bit (sign)
	BR7	XBTO20			;Br if => 20
.PAGE
; Blockmode output  20 => 11
XBTO11:	BRWRTE	BR,	SELA,	SP2	;Load input addr
	OUT	BR,	SELB,	IBA1
	BRWRTE	BR,	SELA,	SP3
	OUT	BR,	SELB,	IBA2
	LDMA	IMM,	RHNPRZ
	OUT	MEMI,	SELB,	ONPR	;Load high bits & start NPR
	IOWAIT
	SP	IBUS,	IIBA1,	SP2	;Save xfer addr
	SP	IBUS,	IIBA2,	SP3
	OUT	IBUS,	INDAT1,	OUTDA1	;Xfer data to output reg
	OUT	IBUS,	INDAT2,	OUTDA2
	CALLSB	SP13,	PUTDR		;Send data
	SPBR	BR,	DECA,	SP6	;Dec wrd to go
	COMP	BR,	SP17		;See if upper byte = 0
	Z	NXTDEV			;Br if done
	BRWRTE	IMM	2		;Inc input addr by two
	SP	BR,	ADD,	SP2
	BRWRTE	IMM,	0
	SP	BR,	ADDC,	SP3
	ALWAYS	XBTO11			;More to do
.PAGE
.SBTTL	BLKIPT - Block mode host input
;-----
;XFER => 20 - No header is sent, no pointers to keep!
;-----
XBTO20:	BRWRTE	BR,	SELA,	SP6	;GET COUNT
	BRWRTE	BR,	SUB,	SP17	;Count is neg so compliment it
	SP	BR,	SELB,	SP6	;Restore pos count
TO20:	CALLSB	SP13,	GETDR		;Get data word
	BRWRTE	BR,	SELA,	SP2	;RESTOREOUTPUT ADDR
	OUT	BR,	SELB,	OBA1
	BRWRTE	BR,	SELA,	SP3	;Restore high byte of addr
	OUT	BR,	SELB,	OBA2
	LDMA	IMM,	HSMEXT		;Load host mem ext
	OUT	MEMI,	SELB,	OBR
	OUT	MEMX,	SELB,	ONPR	;Start out-npr
	IOWAIT
	SPBR	BR,	DECA,	SP6	;Dec wrd to go
	COMP	BR,	SP17		;Done with xfer?
	Z	NXTDEV			;Br if done
	BRWRTE	IBUS,	IOBA1		;Load low byte of addr
	BRWRTE	BR,	ADD,	SP15	;Inc output address by two
	SP	BR,	SELB,	SP2	;Save low byte of output addr
	BRWRTE	IBUS,	IOBA2		;Load high byte of addr
	BRWRTE	BR,	ADDC,	SP17	;Add in carry
	SP	BR,	SELB,	SP3	;Save output addr
	ALWAYS	TO20			;More to do
.PAGE
.SBTTL	DO20 - Output service routine
;-----
;DO20 - Output service routine 20 => 11
;-----

;-----
; Return with msg header if success flag set  else buffer empty
;-----
DO20:	CALLSB	SP12,	GET20
	BR0	CHKHDR			;Br if successful
	ALWAYS	NXTDEV			;Output buffer is empty

;-----
;CHKHDR - Check for valid msg type and dispatch to proper code
;-----
CHKHDR:	SPBR	IBUS,	INDAT2,	SP2	;Save header for future use
	SP	IBUS,	INDAT1,	SP3
	BR7	DATOUT			;BR IF DATA MESSAGE
	COMP	BR,	SP17
	Z	KILHST			;Br if invalid msg type
	LDMA	IMM,	MXMSG
	COMP	MEMX,	SP2
	C	KILHST			;Br if invalid msg type
					;Fall into normal msg code

.PAGE
.SBTTL	Output normal message
;-----
;Output normal msg
;-----
; Get msg length
	NODST	BR,	SELA,	SP2, LDMAR ;Load msgtype as table offset
	SP	MEMX,	SELB,	SP6	;Get wrd-to-go

; Calc node number from port number and check node state
	CALLSB	SP13,	CALCND		;Return node number in SP10
					; and fall into CHKSTA
	  ALWAYS	EATOPT		;Node is down,chuck msg
					;Skip return if node is up

; Xfer rest of msg
XFER03:	CALLSB	SP13,	PUTDR		;Output word
	SPBR	BR,	DECA,	SP6	;Dec wrd-to-go
	COMP	BR,	SP17
	Z	UPDOPT			;Br if wrd-to-go = 0
	CALLSB	SP12,	GET20		;Get next word from host
	BR0	XFER03			;Br if no err
	ALWAYS	KILHST			;Out of sync, kill host

.PAGE
;-----
;DATOUT - Xfer data msg from host to base
;-----
DATOUT:
; Get wrd-to-go
	BRWRTE	BR,	SELA,	SP2	;Get header
	BRWRTE	BR,	AANDB,	SP14	;Mask
	BRWRTE	BR,	ADD,	SP16	;Round up one byte
	BRSHFT				;Bytes => words
	COMP	BR,	SP17		;Check for 0 length data message
	Z	KILHST			;Br on invalid msg length
	BRWRTE	BR,	ADD,	SP16	;Add one for header
	SP	BR,	SELB,	SP6	;Store wrd-to-go
	CALLSB	SP13,	CALCND		;Return node number in SP10
					; and fall into CHKSTA
	  ALWAYS	EATOPT		;Node is down, chuck rest of msg
					;Skip return if node is up

XFER04:	CALLSB	SP13,	PUTDR		;Write word to node
	SPBR	BR,	DECA,	SP6	;Dec wrd-to-go
	COMP	BR,	SP17
	Z	UPDOPT			;Br if done with xfer
	CALLSB	SP12,	GET20		;Get data word
	BR0	XFER04			;Br if successful
;-----
; Error! data message is 0 length or header
; requested more data than ring provided. That is KMC and host
; are out of sync.
;-----
	ALWAYS	KILHST			;Out of sync, kill host!

.PAGE

; Here on nxm
NXM:	CALLSB	SP13,	NXMTRP		;Set nxm bit
	BRWRTE	BR,	SELA,	SP1	;Doing input or output?
	BR0	EATOPT			;Br if output
	ALWAYS	RSTITF			;Input

EATOPT:	CALLSB	SP13,	EATMSG		;Eat rest of output msg
	ALWAYS	RSTITF			;Send Reset Interface msg & mark
					;node as down

UPDOPT:	CALLSR	SP13,	UPDOPZ,	NXTDEV	;Update output ring pointer
;	ALWAYS	NXTDEV			;Returns directly to scheduler

RX12:	ALWAYS	RT12		;Inter page return for EATMSG
RX14:	ALWAYS	RT14		;Inter page return for TMOTI
RX16:	ALWAYS	RT16		;Inter page return for TMOTI
RX22:	ALWAYS	RT22		;Inter page return
.PAGE
.SBTTL	INIT - Initialize KMC, once only code
.=	1000
;-----
; INIT - Here on startup.
; Initialize KMC, execute this code only once.
; Init scratch pad constants.
;-----
STARTX:	LDMAP	IMM,	0		;Set to page 0 in data RAM
	LDMA	IMM,	INIT
	OUT	MEMX,	SELB,	OOCON	;INIT REGESTER MODIFY DISABLE REG
	OUT	MEMX,	SELB,	OPORT1	;INIT NXM REG
	OUT	MEMX,	SELB,	OBR	;INIT NXM BIT
	SP	MEMX,	SELB,	SP1	;INIT DEV SELECT #
	SP	MEMX,	SELB,	SP5	;Init 2nd data msg queue
	SP	MEMI,	SELB,	SP17
	SP	MEMI,	SELB,	SP16
	SP	MEMI,	SELB,	SP15
	SP	MEMI,	SELB,	SP14
;-----
; Fetch input ring base (IRBASE) and input ring size (IRSIZE)
;-----
	OUT	MEMI,	SELB,	IBA1	;Get IRBASE from host
	OUT	MEMI,	SELB,	IBA2
	OUT	MEMI,	SELB,	ONPR
	LDMA	IMM,	IRBAD		;Store IRBAD
	IOWAIT
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
	LDMA	IMM,	IRKAD		;Init IRKAD
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
	LDMA	IMM,	INIT0		;Get IRSIZE from host
	OUT	MEMI,	SELB,	IBA1
	OUT	MEMI,	SELB,	IBA2
	OUT	MEMI,	SELB,	ONPR
	LDMA	IMM,	IRBAD		;Get IRBAD again
	SP	MEMI,	SELB,	SP2
	SP	MEMI,	SELB,	SP3
	IOWAIT
	BRWRTE	IBUS,	INDAT1		;Add IRBASE & IRSIZE
	LDMA	IMM,	IRMXAD		;Store max ring addr
	MEM	BR,	ADD,	SP2, INCMAR
	BRWRTE	IBUS,	INDAT2
	MEM	BR,	ADDC,	SP3, INCMAR
;Convert bytes => PDP10 words
	CALLSB	SP13,	SHFR16		;Do 16 bit shift right on INDAT
	CALLSB	SP13,	SHFR16
	LDMA	IMM,	IRKMX
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
.PAGE
;-----
; Fetch output ring base (ORBASE) and output ring size (ORSIZE)
;-----
	LDMA	IMM,	INIT1
	OUT	MEMI,	SELB,	IBA1	;Get ORBASE from host
	OUT	MEMI,	SELB,	IBA2
	OUT	MEMI,	SELB,	ONPR
	LDMA	IMM,	ORBAD		;Store ORBAD
	IOWAIT
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
	LDMA	IMM,	ORKAD		;Init ORKAD
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
	LDMA	IMM,	INIT2		;Get ORSIZE from host
	OUT	MEMI,	SELB,	IBA1
	OUT	MEMI,	SELB,	IBA2
	OUT	MEMI,	SELB,	ONPR
	LDMA	IMM,	ORBAD		;Get ORBAD again
	SP	MEMI,	SELB,	SP2
	SP	MEMI,	SELB,	SP3
	IOWAIT
	BRWRTE	IBUS,	INDAT1		;Add ORBASE & ORSIZE
	LDMA	IMM,	ORMXAD
	MEM	BR,	ADD,	SP2, INCMAR
	BRWRTE	IBUS,	INDAT2
	MEM	BR,	ADDC,	SP3, INCMAR
	CALLSB	SP13,	SHFR16		;Do 16 bit shift right on INDAT
	CALLSB	SP13,	SHFR16		; once more with feeling!
	LDMA	IMM,	ORKMX		;Init ORKMX
	MEM	IBUS,	INDAT1,	INCMAR
	MEM	IBUS,	INDAT2,	INCMAR
	ALWAYS	NXTDEV			;Jump to main program

.PAGE
;-----
; SHFR16 - 16 BIT right shift of INDAT1 & INDAT2
;	uses SP0, BRG
;-----
SHFR16:	SPBR	IBUS,	INDAT2,	SP0	;GET HIGH BYTE SAVING BIT 0 IN SP0
	BRSHFT				;SHIFT RIGHT
	OUT	BR,	SELB,	OIDAT2	;RESTORE
	BRWRTE	IBUS,	INDAT1		;GET LOW BYTE
	BRSHFT	BR,	SELA,	SP0	;SHIFT RIGHT, BIT 7 = SP0 BIT 0
	OUT	BR,	SELB,	OIDAT1	;RESTORE
	RTNSUB	SP13,	P1

;-----
; SHFL16 - 16 bit left shift of OUTDA1 & OUTDA2
;	uses SP0, BRG
;-----
SHFL16:	SP	IBUS,	IODAT1,	SP0	;Load low byte
	SP	BR,	TWOA,	SP0	;Shift left one, bit 7 => carry
	OUT	BR,	SELA,	OUTDA1	;Restore
	SP	IBUS,	IODAT2,	SP0	;Load high byte
	SP	BR,	TWOAC,	SP0	;Shift left 1, bit 0 = carry
	OUT	BR,	SELA,	OUTDA2	;Restore result
	RTNSUB	SP13,	P0
.PAGE
.SBTTL	DATA message wrap around check for input
;-----
; Here when doing host input and the data msg may wrap arround the end
; of the input ring buffer. If message will wrap arround the message
; must be broken into two data messages because the host can't handle
; the wrap around.
;-----
MUNGCK:	LDMA	IMM,	IRKMX		;See how much room is left in buffer
	SP	MEMI,	SELB,	SP3	;Get max offset for buffer
	SP	MEMI,	SELB,	SP4
	LDMA	IMM,	IRK		;Get current buffer pointer
	SP	MEMI,	SUB,	SP3	;Sub low bytes (A-B)
	SP	MEMI,	SUBC,	SP4	; " High bytes (A-B-Carry)
	SP	BR,	TWOA,	SP3	;Convert PDP10 words to bytes
	SP	BR,	TWOAC,	SP4
	SP	BR,	TWOA,	SP3
	SP	BR,	TWOAC,	SP4
	BRWRTE	IMM,	2
	SP	BR,	SUB,	SP3	;Adjust for 2 in header word
	BRWRTE	IMM,	0
	SP	BR,	SUBC,	SP4
;-----
; SP3 & SP4 = Free bytes in input buffer.
; Subtract msg size and free bytes
;-----
	BRWRTE	BR,	SELA,	SP3	;Load buffer size
	BRWRTE	BR,	SUB,	SP2	;Sub msg size (A-B)
	SP	BR,	SELB,	SP3	;Save difference
	BRWRTE	BR,	SELA,	SP4	;Load high byte of buffer size
	BRWRTE	BR,	SUBC,	SP17	; (A-B-Carry)
	C	MUNGDT			;Br if msg will not fit
;Here if data msg will fit
FIT:	BRWRTE	BR,	SELA,	SP2	;Restore byte count
	ALWAYS	MUNGRT			;Return and process data normally

.PAGE
;-----
; Here if data message needsmunged. That is the message will wrap
; around the end of the buffer and must be broken into two messages
;-----
MUNGDT:	COMP	BR,	SP17		;COMP TO SET Z & C BIT
	Z	2$			;BR IF MSG FITS EXACTLY
	ALWAYS	4$			;Will not fit

2$:	COMP	BR,	SP3		;Test low byte for exact fit
	Z	FIT			;Br if msg fits exactly
4$:	BRWRTE	IMM,	200		;Compose 2nd message header
	BRWRTE	BR,	AORB,	SP3	;OR in data message bit
	SP	BR,	SELB,	SP5	;SP5 = 2nd msg header
	SP	IBUS,	IODAT1,	SP4	;SP4 = 2nd msg port number
;-----
; Fix up header for this message
;-----
	BRWRTE	BR,	SELA,	SP3	;Get byte count for 2nd msg
	SP	BR,	SUB,	SP2	;SP2 = 1st msg byte count
	BRWRTE	IMM,	200		;Compose new header
	BRWRTE	BR,	AORB,	SP2	;Got new header
	OUT	BR,	SELB,	OUTDA2	;Restore header
	BRWRTE	BR,	SELA,	SP2	;Restore byte count
	ALWAYS	MUNGRT			;All fixed up, return & process 1st msg
.PAGE
.SBTTL	NXMTRP - NONEXISTANT MEMORY TRAP
;-----
; Nxmtrp - Here on attempt to write to a nonexistant DR11
; This is responded to by setting a bit in the
; non existant device regester (CSR 3).
;-----
NXMTRP:	BRWRTE	IMM,	0		;Clr nxm bit as it may have been set
	OUT	BR,	SELB,	OBR	; while checking DR states.
; Set NXM bit for this device
	BRWRTE	IMM,	NXMBTB		;Load base of NXM bit table in mem
	NODST	BR,	ADD,	SP10, LDMAR ;Calc & load table offset in MAR
	BRWRTE	MEMX,	SELB		;Pick up bit value from table in BRG
	SP	IBUS,	PORT1,	SP0	;Copy current NXM reg
	OUT	BR,	AORB,	OPORT1	;Restore all NXM bits to CSR
	RTNSUB	SP13,	P0		;The bits are set, return
.PAGE
.SBTTL	EATMSG - Eat rest of output message
;-----
; EATMSG - Eat rest of msg in output ring buffer
; Here when node has timed out. The output ring in the host must
; be cleaned up and a reset node msg sent to host.
;-----
EATMSG:	SPBR	BR,	DECA,	SP6	;Dec word count
	COMP	BR,	SP17		;Done eating msg?
	Z	UPDOPZ			;Br if so
	CALLSR	SP12,	GET20,	RX12	;Eat next word in output buffer
RT12:	BR0	EATMSG			;Br if successful read
;-----
; Here on attempt to read past end of output ring buffer
; In this case it is OK, at least KMC and host should still be in sync.
;-----
.SBTTL	UPDOPZ - Update output ring pointer
;-----
; UPDOPZ - Update output ring pointer ORPKMC
; First round up pointers to next PDP10 addr
;-----
UPDOPZ:	LDMA	IMM,	ORKAD
	BRWRTE	MEMX,	SELB
	BR1	2$
	ALWAYS	RT22

2$:	CALLSR	SP12,	INCPT,	RX22	;Round pointers
;-----
; Update pointers in host
;-----
RT22:	LDMA	IMM,	ORK
	OUT	MEMI,	SELB,	OUTDA1
	OUT	MEMI,	SELB,	OUTDA2
	LDMA	IMM,	ORPKM
	OUT	MEMI,	SELB,	OBA1
	OUT	MEMI,	SELB,	OBA2
	OUT	MEMI,	SELB,	OBR	;Load host mem ext
	OUT	MEMI,	SELB,	ONPR
	IOWAIT
	RTNSUB	SP13,	P0		;Done

.PAGE
.SBTTL	TMOTI - Timeout for host input
;-----
; Here for timeout on DR handshake durring host input.
;-----
TMOTI:	LDMA	IMM,	IRPKM		;Point to timeout data block
	OUT	MEMI,	SELB,	IBA1	;Load IRPKMC address
	OUT	MEMI,	SELB,	IBA2
	LDMA	IMM,	RHNPRZ
	OUT	MEMI,	SELB,	ONPR	;Read from host
;-----
; Restore old IRK
;-----
	LDMA	IMM,	IRK		;Point to IRK
	MEM	IBUS,	INDAT1,	INCMAR	;Restore old IRK
	MEM	IBUS,	INDAT2,	INCMAR
	OUT	IBUS,	INDAT1,	OUTDA1	;Xfer to shift registers
	OUT	IBUS,	INDAT2,	OUTDA2
	CALLSR	SP13,	SHFL16,	RX14	;Convert 10 Addr => Unibus addr
RT14:	CALLSR	SP13,	SHFL16,	RX16
RT16:	SP	IBUS,	IODAT1,	SP2	;Load offset
	SP	IBUS,	IODAT2,	SP3
	LDMA	IMM,	IRBAD		;Point to base addr (Unibus)
	BRWRTE	MEMI,	SELB		;Get IRBASE low byte
	LDMA	IMM,	IRKAD		;Point to IRKAD
	MEM	BR,	ADD,	SP2	;Restore output addr
	LDMA	IMM,	IRBAD+1		;Do high byte
	BRWRTE	MEMI,	SELB		;Get IRBASE high byte
	LDMA	IMM,	IRKAD+1		;Point to IRKAD
	MEM	BR,	ADDC,	SP3	;Restore high byte
;-----
; Fall into Reset Interface routine
;-----
.PAGE
.SBTTL	RSTITF - Crash node
;-----
;RSTITF - The current node is sick so we tell the host
;	by sending a Reset Interface message and setting node
;	state to down. Now it's the host's problem.
;-----
RSTITF:	BRWRTE	IMM,	NXMBTB		;Load base of nxm bit table in mem
	NODST	BR,	ADD,	SP10, LDMAR ;Calc offset & get load MAR
2$:	BRWRTE	IBUS,	OCON		;Has disable reg been locked out?
	BR0	2$			;Br if so
	BRWRTE	MEMX,	SELB		;Get bit value from table
	SP	IBUS,	LINENM,	SP0	;Copy current reg value
	OUT	BR,	AORB,	OLINEN	;Restore reg with current disable bits
; CLR DRCSR TO PREVENT DEADLOCK
	LDMA	IMM,	DRCSR
	OUT	MEMI,	SELB,	OBA1	;LOAD DRCSR ADDRESS
	OUT	MEMI,	SELB,	OBA2
	LDMA	IMM,	CSZ
	OUT	MEMX,	SELB,	OBR	;LOAD HOST MEM EXTENSION
	LDMA	IMM,	CST
	OUT	MEMI,	SELB,	OUTDA1	;LOAD OUTPUT DATA
	OUT	MEMI,	SELB,	ONPR	;SEND ZERO BYTE
	BRWRTE	BR,	SELA,	SP10	;Calc port number for node
	BROTAT
	BROTAT
	OUT	BR,	SELB,	OUTDA1	;Compose host reset by base msg
	BRWRTE	IMM,	3
	OUT	BR,	SELB,	OUTDA2
	NODST	BR,	SELA,	SP11, LDMAR ;Set node state to down
	MEM	IMM,	1
	BRWRTE	IMM,	1		;Load wongth
	SP	BR,	SELB,	SP6
	CALLSB	SP13,	PUT20		;Send msg to host
;	ALWAYS	NXTDEV			;Returns directly to scheduler
.PAGE
.SBTTL	KILHST - Kill host, Fatal error routine.
;-----
; KILHST - Here on invalid msg type or 0 length data msg.
; Probably KMC and host are out of sync. This is not recoverable
; so the host is killed to preserve the remains for posterity.
;-----
KILHST:	LDMA	IMM,	KILDAT		;Load data to send host
	OUT	MEMI,	SELB,	OUTDA1	;Load output reg
	OUT	MEMI,	SELB,	OUTDA2
	OUT	MEMI,	SELB,	OBA1	;Load output addr
	OUT	MEMI,	SELB,	OBA2
	OUT	MEMI,	SELB,	OBR	;Load host memory extension
	OUT	MEMI,	SELB,	ONPR	;Write npr
	HANG		;The time has come for all good things to end.
			;Daisy,  Daisy...
 arm8