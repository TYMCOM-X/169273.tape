.standardSpacing _ 1;
.memo
.every heading (|Tymshare, Inc.|,,|DECsystem-2020 DR11C diagnostic|)
.underlineBetween("[","]");
.blankLine;
.single Space;
.indent1 _ 0;
.macro MyList $(List -4,8,4;Preface 1;at "--" $(item)$)$;
.macro chart $(Crown 4,27,4;Preface 0;at "--" $(break)$)$;
.macro endChart $(endCrown)$;
.turn off "[_]^";
.turn on "\";
.tabs 20;

.begin center
DR11C Diagnostic Program
for the DECsystem-2020
.skip 1
{DATE}
.skip 1
William R. Soley
.end
.skip 4
.begin nofill
Copyright (C) 1979 by Tymshare, Inc.
		      20705 Valley Green Drive
		      Cupertino, CA   95014


This software may be used or copied only as follows:
1) For use on a system which is owned by Tymshare; or
2) with specific written permission from Tymshare.
.end
.skip 4
.myList
--[Abstract]:

This program is designed to run on a [DECsystem-2020] stand alone
for the purpose of testing the functionability of any DR11C connected
to the UniBus.

--[Setup]:

To operate the diagnostic, it is necessary to loop all signals from
the output of the DR11C to the input.
This is typically done by inserting a BC08R maintenance cable.

The diagnostic requires memory at locations 000000:300000 (physical).

--[Description of tests]:

The diagnostic goes through two tests for each pass.

.myList
--[Pattern phase]:
During this phase,
a 16 bit pattern is written to the OUTBUF register.
The OUTBUF register is then read to verify that it contains the
correct pattern.
The INBUF register is then read to verify that the data survived
its journey through the data path.
The pattern is then incremented and the test repeated until all
patterns have been tested.

--[Bit phase]:
During this phase,
all writeable bits in the CSR are tested in all possible patterns.
The CSR is read to verify that the correct read-only and read-write
bits are set and that the status bits survived their journey through
the data path.
The interrupts received are checked to verify that they are correct.
.endList

--[Operation]:

The diagnostic runs stand alone (without any operating system).
To run the diagnostic simply load and start it using your favorite
bootstrap loader.
The program is stored in standard save file format (DR.SAV).

When the program is run,
it will introduce itself with a one line message and pause for
terminal input.
Terminal input is constantly accepted and there is therefore no prompt.

.myList
--[Commands]:
All commands to the program are one letter.
The full name of the command will by echoed when the first letter
is typed.
An invalid command letter will respond with a bell and will not
be echoed.

The commands are:
.begin nofill
    All (tests enable)
    Bits (in DR CSR) #
    Continue on error
    Device (logical no) #
    Error status is...
    Halt on error
    Loop on error
    Map devices
    Pattern (16 bits) #
    Run (diagnostic)
    Stop (diagnostic)
    Quiet (no messages)
    Verbose (messages)
    What is going on?
    ^C boot ten [confirm]
    ^Z ddt
    ?
.end
   
--[Arguments]:
If the command expects an argument,
it will leave the carriage at the end of the line and the user
should respond with the octal argument followed by a <CR>.
Control-U and RUBOUT (DEL)  may be used to edit the argument.
If an invalid argument is typed,
a question mark and a bell will be sent and the command aborted.
In some commands.
the <ESC> key may be used to mean [all].

--[Confirmation]:
Some commands require the user to confirm his intentions.
These commands prompt with [confirm].
To answer affirmative,
enter a <CR>;
any other response will abort the command.
.endList

--[Test selection]:

When the diagnostic is started,
all tests are selected and all DR11C's are selected.
The user may change this before begining testing by giving the
commands show below:

.myList
--[All (test enable)]:
This enables all tests.
The diagnostic is started with all tests enabled.

--[Bits (in DR CSR) #]:
This selects a specific bit pattern to be written to the
control status register.
Only writeable bits may be selected for test.
The effect of selecting a CSR bit pattern is to perform only
that test repeatedly and to exclude all other tests.
The Next test command may be used to increment the pattern.

--[Device (logical no) #]:
This selects a specific DR11C to be tested.
The logical number of the DR11C must be given starting with
DR0: and continuing through DR17: in octal.

The devices are assumed to be at standard address with 
standard vectors.
If it is necessary test a device at a non-standard address,
DDT may be used to change the entries in DR.ADR and
DR.VEC.
DR.ADR contains UBA number in LH and UB address in RH.
DR.VEC contains UB vector as strapped on the DR11C.

--[Pattern (16 bits) #]:
This specifies the pattern to use to test the data registers.
Any combination of the 16 low order bits may be set.
The effect of selecting a Data Pattern is to perform only
that test repeatedly and to exclude all other tests.
The Next test command may be used to increment the pattern.
.endList

--[Control options]:

Several options may be selected to control what happens when an
error is detected.
When the diagnostic first comes up,
it has Loop on error and Verbose (messages) selected.

.myList
--[Continue on error]:
Supercedes Halt on error and Loop on error.
The diagnostic will continue with the next test if an error is
detected.

--[Halt on error]:
Supercedes Loop on error and Continue on error.
The diagnostic will halt the KS-10 if an error is
detected.
The diagnostic may be continued by issuing the CTY command
"CO" to the 8080.

--[Loop on error]:
The diagnostic will retry the test that caused an error
until the test does not fail.
This is useful for observing the signals with a scope.

--[Next test]:
This will terminate the current test (unconditionally) and begin
the next test.
May be used to get out of loop on error for the current error.
This will also increment the test pattern even if all patterns are
not selected.

--[Run (diagnostic)]:
The diagnostic is brought up stopped.
The Run command must be given to start the tests.

--[Stop (diagnostic)]:
This will suspend testing until a Run command is given.

--[Quiet (no messages)]:
This will suspend the output of error messages to the CTY.
They will still be accounted and a summary is available
by issuing the Error status command.

--[Verbose (messages)]:
This will reinstate the output of error messages to the CTY.
.endList

--[Obtaining status]:

Several commands may be given to find out what is happening.

.myList
--[Error status is...]:
This command will print a summary of errors which have been detected
since the last time this command was given.
The summary is in the form
.begin nofill
	Error status is...
	  PAT: count=#, mask=#
	  BIT: count=#, mask=#
	  TRP: count=#
.end continue
where count is in decimal and mask is octal.
Whenever an error is detected,
the result is XOR'd with the expected result and the resulting
value is OR'd into the mask displayed above.
Thus, if a bit is set in the mask,
the corresponding bit was found bad at least once since the
last Error status command.

--[Map DR11C's]:
This command will print a list of all DR11C's which are in the
table of DR11Cs (DR.ADR) and respond to an attempt to read their
CSR without causing a Unibus Timeout.
Presumably, 
this will be a list of all DR11C's on the system.
If a DR does not appear on this list,
it is either not at a standard address,
or it is not responding to the RDIO.

--[What (is going on?)]:
This command prints a list of all options currently in effect.
It will also inform you of what test is being performed at this
very instant, as well as those which are selected.
.endList

--[Error messages]:

Error messages may be turned on and off with the
Quiet and Verbose commands (see above).
In general,
each message begins with a three letter prefix indicating the test
type causing the error.
The codes are:
.chart
--PAT:\data Pattern test (INBUF,OUTBUF)
--BIT:\CSR Bit test
--TRP:\unexpected trap
.endChart
Each message has its own format which are:

.myList
--[PAT: Wrote #; OUTBUF,INBUF=#,#; mask=#; # times.]
The number following "wrote" is the number that was written
to OUTBUF.
The number shown for OUTBUF is the number read from OUTBUF.
The number shown for INBUF is the number read from INBUF.
The number following "mask" is <wrote XOR outbuf>,,<wrote XOR inbuf>.
If loop on error is selected,
a count of the number of times the error occured with the same
results will be shown (if it ever gets a different result).

--[BIT: Wrote #; wanted #; read #; mask #; # times.]
The number following "wrote" is the number that was written
to CSR.
The number following "wanted" is the correct result.
The number following "read" is what was actually read.
The number following "mask" is <wanted XOR read>.
If loop on error is selected,
a count of the number of times the error occured with the same 
results will be shown (if it ever gets a different result).
These numbers may include the prefix "IntA" or "IntB".
These indicate that either Interrupt A or B were received or
expected.

--[TRP: unexpected; vec=#.]
A trap was received through the vector given.
The vector is not assigned to the device currently under test.
.endList

--[Special commands]:

In addition to the above there are some other commands which perform
some useful functions:

.myList
--[^C boot ten]:
This will deposit in location 31 which will supposedly cause
the 8080 to start the bootstrap program.
This is all up to the 8080.

--[^Z ddt]:
This will call DDT.
If a breakpoint was saved at %Z then DDT will be entered through
that breakpoint and $P may be used to continue.
Otherwise, 
%Z$G may be used to return to the diagnostic.
START$G will always restart the diagnostic.
If the program gets lost or crashes,
DDT should always be at absolute location 200000 and the 8080 may be
used to start it at the address.

--[?]:
Print a brief list of commands.
.endList

--[Compromises]:

This diagnostic does not test the following signals:
.chart
--new-data-ready
--data-transmitted
--init
.endChart
These signals are not made available using the BC08R maintenance cable.

.endList

The following is an example of a terminal session using the diagnostic 
with the BC08R maintenance cable installed.
An inline-switch was used to cause errors by opening selected lines
in the external data path.

.begin nofill
[user]	  [diagnostic]			  	    [comments]

	DR11C diagnostic - Version 1
M	Map DR11C's:			       ; how many we got?
	  DR0: adr=3,,767770 vec=300	       ; only 1 DR responded
W	What (is going on?)		       ; asks for status
	  Stop (diagnostic)
	  Loop on error
	  Verbose (messages)
	  Device (logical no) [all]
	  All (tests enable)
R	Run (diagnostic)		       ; starts it up
	Testing DR0:			       ; beginning pass 1
	PAT: 20534; OUTBUF=20534; INBUF=30534; mask=10000; 142 times
				; the 10000 bit was found set when it
				; should have been clear - because of
				; loop on error, it was retried until
				; good data was read (142 times).
	PAT: 20534; OUTBUF=20534; INBUF=30534; mask=10000
				; the carriage waits at the end of the
				; line as long as the data being read
				; is bad...the Next test command may
				; be used to force it to go on...
N	Next test
	PAT: 20535; OUTBUF=20535; INBUF=30534; mask=10000; 191 times
				; it fails immediately on the next
				; test with the same bit bad.  The
				; data is found good after 191 loops.
	Testing DR0:			       ; begin pass 2
	Testing DR0:			       ; begin pass 3
	BIT: 0; wanted=0; read=200; mask=200; 20200 times.
				; a bit in the CSR was found bad in 
				; the 3rd pass 20200 times.
E	Error status is...
	  PAT: count=102898; mask=10000
	  BIT: count=20200; mask=200
	  TRP: count=0
E	Error status is...		       ; This command only gives
	  PAT: count=0; mask=0		       ; the summary for those
	  BIT: count=0; mask=0		       ; errors since the last
	  TRP: count=0			       ; time it was given.
Q	Quiet (no messages)		       ; shut up!
C	Continue on errors		       ; don't wait
					       ; 
					       ; time passes...
					       ; 
E	Error status is...		       ; see what's happened
	  PAT: count=17295936; mask=20705
	  BIT: count=1231; mask=100200
	  TRP: count=0
^C<cr>	^C boot ten [confirm]		         ; all done

	?FRC
	KS10>%HLTD/000000  PC/000000,,007234
	USR MOD
	
	BOOTS:
.end

 