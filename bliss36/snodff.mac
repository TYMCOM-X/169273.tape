	SUBTTL	Gimpel--Ma355/JDS/DRH/MP/RCM/VB		15-Jun-76

; COPYRIGHTS 1972,1973,1976,1977 STEVENS INSTITUTE OF TECHNOLOGY
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.

  ;UNIVERSALS

	SEARCH	JOBDAT		;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 COMMON MACROS
	SEARCH	UUOSYM		;TOPS10 UUO SYMBOL DEFINITIONS
	SEARCH	SNOPRM		;SITBOL PARAMETER FILE

  ;DIRECTIVES

	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWOSEGMENT CODE

  ;VERSION NUMBER

	DFFVER==5		;MAJOR VERSION NUMBER
	DFFMIN==0		;MINOR VERSION NUMBER
	DFFEDT==147		;EDIT LEVEL
	DFFWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	DFF,SNODFF,<User Defined Functions>

  ;SHOW UNIVERSAL VERSION NUMBERS

	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%UUOS		;VERSION NUMBER OF UUOSYM
	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM

	DFFTTL				; Title
	DFFPTX				; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for User Defined Functions
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
;   3. PRIMARY FUNCTION
;        3.1.   DEFINE. . . . . . . . . . . . . . . . . . . .    4
;        3.2.   APPLY . . . . . . . . . . . . . . . . . . . .    8
;        3.3.   ARG . . . . . . . . . . . . . . . . . . . . .    9
;        3.4.   LOCAL . . . . . . . . . . . . . . . . . . . .    9
;   4. - CALL TO DEFINED FUNCTION . . . . . . . . . . . . . .   10
;   5. RET, FRET, NRET - RETURN FROM DEFINED FUNCTION . . . .   14
	SUBTTL	REVISION HISTORY

COMMENT	\

START OF VERSION 5.
122	RENAME MODULES & CLEAN UP.
147	Use Y.???? instead of X.????, then use the correct macro for
	the instructions.
\
	SUBTTL	PRIMARY FUNCTION -- DEFINE
;	DEFINE	F.BROPHY
;	I AM ASSUMING THAT ON TOP OF THE STACK IS THE STRING
;	DESCRIPTOR OF AN ALTERNATE LABEL OR A NULL DESCRIPTOR
;	IF THE FUNCTION NAME IS TO SERVE AS A LABEL.
;	BELOW THIS ON THE STACK IS THE STRING DESCRIPTOR OF
;	THE ARGUMENT TO DEFINE.
;	UPON RETURN THE TWO DESCRIPTORS WILL BE REMOVED FROM
;	THE STACK AND A NULL DESCRIPTOR REPLACED ON THE STACK.
;
DFN::	MOVE	Z,-1(STACK)	; SEE IF ALTERNATE IS NULL
	CAMN	Z,NULLST##
	JRST	DFN9
	JSP	TLINK,CVTNAM##	; CONVERT TO NAME
	ERROR.	1,61
DFN9:	POP	STACK,IGNOP##+2	; SAVE THIS DESCRIPTOR
	POP	STACK,IGNOP##+1
;
DFN10:	JSP	TLINK,STINIT##	; INITIALIZE TO STREAM FOR
	ERROR.	1,60		; THE FUNCTION NAME,
				; VARIABLES AND TEMPORARIES
 	MOVE	S2,SYSCT##	; LOAD CHARACTER SET FOR LEFT
	MOVX	S3,Y.LP		; Parenthesis.
	JSP	TLINK,STRM##	; STREAM FOR LEFT PARENTHESIS
	ERROR	13,38		; LEFT PARENTHESIS NOT FOUND
; AT THIS POINT THE STACK CONTAINS, AS FAR AS THIS SUBROUTINE IS
; CONCERNED, ONLY THE STRING DESCRIPTOR FOR THE FUNCTION NAME.
; THE CURSOR AND THE POINTER REFER TO THE LEFT PARENTHESIS. Q2
; CONTAINS THE LEFT PARENTHESIS.
; WE SHOULD NOW INSTALL THIS FUNCTION NAME.
;
	JSP	TLINK,INSTAL##
	ERROR	13,37
;
; INSTAL PRESUMABLY POPS THE STACK OF THE STRING DESCRIPTOR AND
; RETURNS THE ADDRESS OF THE INSTALLED VARIABLE INTO REGISTER 0.
;
	MOVEM	Z,IGNOP		; SAVE THIS ADDRESS
;
; WE MUST NOW SCAN THE LIST OF VARIABLES, MINDFUL THAT
; THERE MIGHT NOT BE ANY
;
	MOVX	S3,Y.CM!Y.RP	; WE ARE NOW STREAMING FOR A 
				; RIGHT PARENTHESIS OR A COMMA
	SETZM	P2		; P2 WILL CONTAIN THE NUMBER OF 
				; VARIABLES
DFN1:	SOS	CURSOR##		; MOVE PAST THE CHARACTER FOUND
	IBP	STPTR##
	JSP	TLINK,STRM	; STREAM FOR THE NEXT VARIABLE
	ERROR	13,40		; LOOKING FOR A COMMA OR A RIGHT
				; PARENTHESIS
	MOVEM	Q2,IGNOP+3	; SAVE THE CHARACTER FOUND
	JSP	TLINK,INSTAL	; INSTALL THIS INTO THE SYMBOL
				; TABLE
	JRST	DFN2		; THE ERROR RETURN CAN ONLY OCCUR ON
				; A NULL ARGUMENT WHICH WE IGNORE
	PUSH	STACK,[0]	; PUSH THIS ADDRESS ONTO THE STACK
	PUSH	STACK,Z
;
	AOJ	P2,		; INCREMENT THE VARIABLE COUNT
				 DFN2:	MOVE	Q2,IGNOP+3
	CAIN	Q2,","		; IF THE CHARACTER WAS COMMA RETURN
	JRST	DFN1		; TO LOOK FOR ANOTHER VARIABLE
;
; IF THE BREAK CHARACTER WAS NOT A COMMA THEN IT WAS A RIGHT PARENTHESIS
; THUS ALL THE VARIABLES ARE FOUND, WE CAN NOW SCAN FOR THE TEMPORARIES,
; VIA A BREAK ON COMMA.
;
DFN3:	SETZM	S1		; S1 WILL CONTAIN THE NUMBER OF
				; TEMPORARIES.
	MOVX	S3,Y.CM		; LOAD FOR A BREAK ON COMMA
;
;
DFN4:	SOS	CURSOR##		; MOVE PAST THE LAST CHARACTER FOUND
	IBP	STPTR	
	SKIPG	CURSOR		; THERE MIGHT NOT BE ANY
				; TEMPORARIES REMAINING
	JRST	DFN5
	JSP	TLINK,STRM	; STREAM FOR COMMA
	JUMP			; NO-OP
;
	JSP	TLINK,INSTAL	; INSTALL THE TEMPORARY
	JRST	DFN4		; DISREGARD ANY EXTRA COMMAS
	PUSH	STACK,[0]	; PUSH THE ADDRESS ONTO THE STACK
	PUSH	STACK,Z
;
	AOJA	S1,DFN4
;
;	AT THIS POINT ALL THE TEMPORARIES ARE ON THE STACK. WE MUST CALL 
;	THE GARBAGE COLLECTOR TO ENSURE THE SPACE TO CREATE THE FBLOK
;
DFN5:	HRRZ	Z,S1		; CALCULATE THE TOTAL AMOUNT OF
	ADDI	Z,FARGS(P2)	; STORAGE NEEDED
	JSP	QLINK,GCOLF##
;
;	WE CAN NOW FILL IN THE FBLOK
;
	MOVEM	Z,IGNOP+3
	HRLI	Q2,FBLOK
	HRR	Q2,IGNOP+3
	MOVEM	Q2,BTCODE&BLENG(SURF)
	CLEARM	GCFLD(SURF)
	HRLI	Q2,FEAFL!FAAFL
	HRR	Q2,P2
	MOVEM	Q2,FFLAGS&FNARGS(SURF)
	MOVE	Q2,[JSP P2,DFF$##]	;INSTRUCTION TO CALL DEFINED FUNCTION
	MOVEM	Q2,FCODE(SURF)
	HRL	Q2,S1
	HRR	Q2,IGNOP
	MOVEM	Q2,FNTMPS&FNAME(SURF)
;
;	WE MUST NOW PUT THE VALUE OF SURF INTO THE VFUNC FIELD OF THE
;	VARIABLE BLOCK ASSOCIATED WITH THE FUNCTION
;
	MOVE	S2,IGNOP
	MOVEI	Q2,VFUNC(S2)
	MOVE	Q3,SURF
	JSP	QLINK,IFBLOK##
	MOVE	Z,IGNOP+3	; RELOAD NO OF ITEMS
;
;	THE FLABEL FIELD IS NOT YET FILLED
;
	ADD	SURF,Z		; SURF IS UPDATED
	MOVE	P2,SURF
	SUBI	Z,FARGS
;
;	NOW SURF IS UPDATED, Z CONTAINS THE NUMBER OF ITEMS REMAINING
;	TO BE POPED OFF THE STACK AND P2 CONTAINS THE ADDRESS TO PUT
;	THESE IN, BACKWARDS
;
DFN6:	SOJL	Z,DFN7
	SOJ	P2,
	POP	STACK,0(P2)
	POP	STACK,IGNOP+3
	JRST	DFN6
;
; AT THIS POINT ALL THE TEMPORARIES AND VARIABLES ARE OFF THE STACK
; AND WE NEED ONLY FILL IN THE FLABEL FIELD. WE MUST ALSO MAKE SURE 
; THAT A NULL STRING IS PUSHED ONTO THE STACK.
;
DFN7:	HRRZ	Q2,IGNOP+1	; GET ALTERNATE
	SKIPN	Q2		; BUT IF NULL
	MOVE	Q2,IGNOP	; USE FUNCTION NAME
 	HRRZM	Q2,-1(P2)
	JRST	RETNUL##		; RETURN NULL STRING
	SUBTTL	PRIMARY FUNCTION -- APPLY
APPLY::	MOVE	S3,STACK	; FIND ADDRESS ...
	SUB	S3,Z		; OF FIRST ...
	SUB	S3,Z		; ARGUMENT
	PUSH	STACK,1(S3)	; AND
	PUSH	STACK,2(S3)	; PUSH IT

	HRLI	S1,3(S3)	; 'FROM' ADDRESS
	HRRI	S1,1(S3)	; 'TO' ADDRESS
	BLT	S1,-2(STACK)	; SLIDE EVERYTHING UP BY 2
	SUB	STACK,[2,,2]	; ADJUST STACK

	MOVE	P2,Z		; SAVE ARG COUNT

	JSP	TLINK,CVTVAL##	; GET THE VALUE 
	ERROR.	1,51		; SOMETHING'S WRONG

	JSP	TLINK,CVTNAM##	; ENSURE FIRST ARG A NAME
	ERROR.	1,51		; BAD FIRST
	SKIPE	0(STACK)	; NATURAL?
	ERROR.	1,51		; NO

	SUB	STACK,[2,,2]	; POP RETURNED VALUE
	HRLI	P2,-1(P2)	; MOVE ARGS-1 TO LEFT
	HRR	P2,1(STACK)	; LOAD ADDRESS OF VB
	ADDI	P2,VFUNC	; POINT TO FUNCTION FIELD
	JRST	I.FN##+1	; JOIN INTERPRETER

	SUBTTL	PRIMARY FUNCTION -- ARG

ARG::	TDZA	P2,		; FLAG ENTRY

	SUBTTL	PRIMARY FUNCTION -- LOCAL

LOCAL::	MOVEI	P2,1		; FLAG ENTRY

	 ; HERE FROM ARG

ARGLOC:	JSP	TLINK,CVTINT##	; ENSURE AN INTEGER
	ERROR.	1,53		; BAD 2ND
	SUB	STACK,[2,,2]	; POP STACK
	MOVE	S1,2(STACK)	; SAVE VALUE

	JSP	TLINK,CVTNAM	; ENSURE A NAME
	ERROR.	1,52		; BAD FIRST ARG
	SKIPE	0(STACK)	; NATURAL?
	ERROR.	1,52		; NO

	MOVE	S2,-1(STACK)	; LOAD ADDRESS OF VB
	HRR	S2,VFUNC(S2)	; LOAD ADDRESS OF FBLOK
ARGLC3:	HLRZ	S3,BTCODE(S2)	; EXTRACT TYPE OF BLOK
	CAIN	S3,FBLOK	; FBLOK?
	JRST	ARGLC2		; YES

	CAIE	S3,TFBLOK	; TRACED?
	ERROR	13,67		; NO - JUST BAD

	MOVE	S2,TFOLD(S2)	; GET OLD ONE
	JRST	ARGLC3		; AND TRY AGAIN

	 ; HERE WHEN WE CONFIRM AN FBLOK

ARGLC2:	HRRZ	S3,FNARGS(S2)	; LOAD # OF ARGS
	JUMPE	P2,ARGLC1	; JUMP IF ENTRY WAS ARG

	HLRZ	T1,FNTMPS(S2)	; LOAD NUMBER OF TEMPS
	ADD	S2,S3		; ADJUST POINTER
	MOVE	S3,T1		; NUMBER GOES TO S3

ARGLC1:	SOSGE	S1		; NORMALIZEW 2ND ARG
	JRST	FRET1##		; 0 OR LESS - FAIL
	CAML	S1,S3		; COMPARE ARG WITH ACTUAL #
	JRST	FRET1		; FAIL IF TOO HIGH

	ADD	S2,S1		; ADJUST ADDRESS
	MOVE	Z,FARGS(S2)	; LOAD VARIABLE
	HRRM	Z,-1(STACK)	; INSERT INTO STACK
	JRST	1(PLINK)	; AND RETURN
	SUBTTL - CALL TO DEFINED FUNCTION

	 ; DFF IS ENTERED WITH A JSP P2,DFF 
	 ; EXECUTED FROM WITHIN THE FBLOK

DFF::	MOVEI	P2,-FCODE-1(P2)	; POINT TO FBLOK
	HRLI	P2,FLDC		; INSERT FLOAT FLAG
	MOVEM	P2,FLAP##		; SAVE IN CASE OF GC

	 ; CHECKING FOR AND BRANCHING OFF TO F TRACING

	CLEARM	IGNOP+3		; FLAG TO TRACE LATER
	SKIPE	$TRACE##	; &TRACE ON
	JRST	DFF.T1		; CHECK 'C' TRACING

DFF.T5:	SKIPE	$FTRC##		; &FTRACE?
	JRST	DFF.T2		; YES, PUT SOMETHING OUT

DFF.T6:	 ; RETURN FROM &FTRACE TYPE MESSAGE


	 ; HERE TO ADJUST ARGUMENTS

	NA==T2			; REGISTER TO HOLD # OF ARGS
DFF0:	HRRZ	NA,FNARGS(P2)	; # OF FORMAL PARAMETERS
	MOVEM	NA,IGNOP+2	; SAVE THIS NUMBER
	SUB	Z,NA		; COMPUTE # OF ARGS TO BE REMOVED
	JUMPE	Z,DFF3		; EQUAL - AVOID ADJUSTMENTS
	JUMPG	Z,DFF2		; TOO MANY - GO REMOVE

	 ; HERE TO ADD ADDITIONAL ARGUMENTS

DFF1:	PUSH	STACK,NULLST	; ADD ...
	PUSH	STACK,NULLST+1	; A DUMMY ARGUMENT
	AOJL	Z,DFF1		; LOOP ON NEGATIVE Z

	JRST	DFF3		; AND JUMP IF DONE

	 ; HERE TO REMOVE EXCESS ARGS

DFF2:	HRL	Z,Z		; REPRODUCE COUNT IN LEFT
	SUB	STACK,Z		; AND DROP BY ...
	SUB	STACK,Z		; SO MANY DESCRIPTORS

	 ; HERE WHEN ACTUAL ARGUMENTS EQUAL IN NUMBER THE
	 ; FORMAL PARAMETERS. NA CONTAINS THIS NUMBER

	 ; SAVE ALL VALUES ON STACK

DFF3:	MOVEM	STACK,IGNOP	; SAVE STACK POSITION
	MOVEI	S2,FARGS(P2)	; POINT TO FIRST ARGUMENT
	HLRZ	S3,FNTMPS(P2)	; COMPUTE # OF ITEMS ...
	ADD	S3,NA		; ITEMS TO BE PUSHED
	MOVEM	S3,IGNOP+1	; SAVE THIS VALUE
	MOVE	Q2,FNAME(P2)	; LOAD ADDR OF VAR BL

DFF3A:	JSP	QLINK,LOCVAL##	; POINT TO REAL VALUE
	PUSH	STACK,0(Q2)	; PUSH ...
	PUSH	STACK,1(Q2)	; D3ESCRIPTOR
	SOJL	S3,DFF4		; SKIP OUT IF DONE
	MOVE	Q2,0(S2)	; LOAD NEXT VB ADDR
	AOJA	S2,DFF3A	; INCREMENT POINTER AND LOOP

	 ; NULL OUT FUNCTION NAME & TEMPS

DFF4:	MOVE	T3,NULLST	; POISE NULL STRING ...
	MOVE	T4,NULLST+1	; IN REGISTERS
	HLRZ	S3,FNTMPS(P2)	; LOAD # OF TEMPS
	MOVEI	S2,FARGS(P2)	; POINT TO ...
	ADD	S2,NA		; FIRST TEMP
	MOVE	Q2,FNAME(P2)	; LOAD FUNCTION NAME

DFF4A:	JSP	QLINK,LOCVAL	; ADJUST POINTER
	MOVEM	T3,0(Q2)	; NULL OUT ...
	MOVEM	T4,1(Q2)	; DESCRIPTOR

	SOJL	S3,DFF5		; EXIT IF COUNT DROPS TO 0
	MOVE	Q2,0(S2)	; LOAD NEXT VB ADDR
	AOJA	S2,DFF4A	; INCREMENT FOR NEXT TIME

	 ; INSERT NEW VALUES INTO FORMAL PARAMETERS

DFF5:	ADD	P2,NA		; ADJUST FBLOK POINTER
	MOVE	T4,IGNOP	; LOAD OLD STACK

DFF5A:	SOJL	NA,DFF6		; LOOP ON COUNT IN NA
	MOVE	Q2,FARGS-1(P2)	; LOAD	ADDR OF VB
	JSP	QLINK,LOCVAL	; ADJUST ADDR
	POP	T4,1(Q2)	; 2ND WORD
	POP	T4,0(Q2)	; 1ST WORD
	SOJA	P2,DFF5A	; DECREMENT POINTER AND LOOP

	 ; OVERWRITE ARGUMENTS

DFF6:	MOVE	S1,IGNOP+2	; NUMBER OF FORMAL PARAMS
	LSH	S1,1		; DOUBLED
	HRL	S1,S1		; ADJUST ...
	SUB	STACK,S1	; STACK

	MOVE	T3,IGNOP	; COMPUTE ...
	HRLI	Z,1(T3)		; 'FROM' ADDRESS
	HRRI	Z,1(T4)		; INSERT 'TO' ADDRESS
	BLT	Z,0(STACK)	; OVERWRITE GIVEN ARGS

	 ; ARGS TAKEN CARE OF - SAVE ALL AND MAKE CALL

	 ; PUSH FBLOK AND THE RETURN ADDRESS
	 ; 
	PUSH	STACK,FLAP	; WORDS WOULD BE ...
	PUSH	STACK,PLINK	; SUPERFLUOUS HERE

	 ; BUMP LEVEL

DFF7:	PUSHSA	I		; SAVE THE INTERPRETER STATE
	MOVEI	Q1,1		; INDICATE TYPE OF ...
	MOVEM	Q1,PUSHTP##	; STACK FRAME (NORMAL)
	MOVEM	STACK,GROUND##	; AND ESTABLISH GROUND
	AOS	$FNCLV##	; INCREMENT LEVEL

	 ; GET LABEL TO ILOC

	MOVE	P2,FLAP		; RESTORE ADDR OF FBLOK
	MOVE	S1,FLABEL(P2)	; POINTER TO LABEL VB
  MOVEI  Q3,VNAME(S1)  ; POINT TO NAME IN CASE
	SKIPN	S2,VLABEL(S1)	; PICK UP LABEL FIELD
	ERROR%	9,3		; UNDEF. LABEL
	HLRZ	S3,S2		; GET BUILT-IN ADDR (IN CASE)
	TRNN	S2,-1		; BUILT-IN LABEL?
	JRST	0(S3)		; GO TO BUILT-IN

	MOVE	S3,VFLAGS(S1)	; LOAD FLAGS OF LABEL VB
	TLNN	S3,LTFLAG	; IS LABEL BEING TRACED
	JRST	DFF7A		; NO

	HRL	S2,TRVAL+1(S2)	; PICK UP OFFSET FROM TRBLOK
	HRR	S2,TRVAL(S2)	; PICK UP ADDRESS OF CBLOK

DFF7A:	HRRM	S2,ILOC##	; PLUG CBLOK ADDR
	HLRM	S2,ILOC##+1	; PLUG OFFSET

	 ; CHECK FOR TRACING AND GO

	SKIPE	S1,IGNOP+3	; WAS CALL TRACED?
	JRST	DFF.T8		; YES!
DFF7B:	 ;
	SKIPE	$FNCLVL+1	; &FNCLEVEL TRACED?
	JSP	SLINK,[SETOM BARINC   ; ONE LESS BAR
		       JRST FNCTRC##]   ; GO TRACE &FNCLEVEL
	JRST	IBEGIN##	; GO
	 ; CALL TYPE TRACING IS DONE HERE

	 ; &TRACE ON

DFF.T1:	HRRZ	S1,FNAME(P2)	; GET VB
	MOVE	S2,VFLAGS(S1)	; GET ITS FLAGS
	TLNN	S2,VCTFL	; CALL TRACED?
	JRST	DFF.T5		; NO, RETURN

	MOVEM	S1,IGNOP+3	; SET FLAG
	HRRZ	T1,VFUNC(S1)	; LOAD TFBLOK
	SKIPE	TFCT(T1)	; PR. DEF. FUNC.?
	JRST	DFF.T5		; YES, COME AROUND LATER

	JRST	DFF.T3		; JOIN COMMON OUT

	 ; &FTRACE ON

DFF.T2:	SOS	$FTRC##		; DECREMENT COUNT

DFF.T3:	MOVE	S1,FNAME(P2)	; GET NAME
	PUSH	STACK,VNAME(S1)	; ONTO
	PUSH	STACK,VNAME+1(S1) ; STACK
	JSP	SLINK,CLMESS##	; PRINT MESSAGE
	MOVE	P2,FLAP		; RELOAD P2
	JRST	DFF.T6		; GO BACK FOR MORE

	 ; HERE JUST BEFORE THE CALL IF &TRACE WAS ON

DFF.T8:	MOVE	S2,VFUNC(S1)	; LOAD FBLOK
	HRRZ	T2,TFCT(S2)	; LOAD TRBOK
	JSP	TLINK,TRCALL	; MAKE PD FUNCTION CALL
	JFCL
	JFCL
	JRST	DFF7B		; RETURN
	SUBTTL	RET, FRET, NRET - RETURN FROM DEFINED FUNCTION

	 ; RETURN

RET::	MOVEI	S1,S.RET##	; POINT TO STRING
	JRST	CRET		; JOIN COMMON PROCESSING

	 ; FRETURN

FRET::	MOVEI	S1,S.FRET##	; POINT TO STRING
	JRST	CRET		; JOIN COMMON PROCESSING

	 ; NRETURN

NRET::	MOVEI	S1,S.NRET##	; POINT TO 'NRETURN'

CRET:	MOVEM	S1,$RTNTP##	; ESTABLISH &RTNTYPE

CRET1:	SKIPN	S2,PUSHTP	; LOAD TYPE
	ERROR	8,1		; CAN'T BE 0

	MOVE	STACK,GROUND	; DROP TO THE GROUND
	POPSA	I		; AND RETRIEVE LAST UNIVERSE
	JUMPL	S2,CRET1	; REPEAT IF THIS WAS AN ERROR UNIVERSE

	POP	STACK,PLINK	; OLD RETURN ADDRESS
	POP	STACK,FLAP	; FBLOK

	 ; RETRIEVE RETURNED VALUE

RET2:	MOVE	P2,FLAP		; ADDR OF FBLOK
	MOVE	Q2,FNAME(P2)	; ADDRESS OF VARIABLE BLOCK
	JSP	QLINK,LOCVAL	; LOCATE THE VALUE
	MOVE	Z,0(Q2)		; SAVE ...
	MOVEM	Z,FLAP+2	; RETURNED ...
	MOVE	Z,1(Q2)		; VALUE ...
	MOVEM	Z,FLAP+3	; IN FLAP

	 ; CHECKS FOR RETURN TRACING

	SKIPE	$TRACE		; &TRACE?
	JRST	RET.T1		; YES
RET.T5:	 ;
	SKIPE	$FTRC##		; &FTRACE?
	JRST	RET.T2		; YES
RET.T6:	 ;
	SOSGE	$FNCLV		; DECREMENT &FNCLEVEL
	ERROR	8,1		; RETURN FROM LEVEL 0

	SKIPE	$FNCLV+1	; IS IT TRACED?
	JSP	SLINK,FNCTRC	; APPARENTLY.

	 ; HERE TO RESTORE OLD VALUES OF TEMPS & PARAMS

RET3:	MOVE	P2,FLAP			; RESTORE P2
	HRRZ	NA,FNARGS(P2)	; SET NUMBER OF ARGS
	HLRZ	T3,FNTMPS(P2)	; LOAD NUMBER OF TEMPS
	ADD	T3,NA		; TOTAL NUMBER
	ADD	P2,T3		; POINT TO END OF BLOK

RET3A:	SOJL	T3,RET3C	; DECREMENT COUNT
RET3B:	MOVE	Q2,FARGS-1(P2)	; POINT TO ...
	JSP	QLINK,LOCVAL	; VALUE
	POP	STACK,1(Q2)	; RESTORE ...
	POP	STACK,0(Q2)	; VALUE
	SOJA	P2,RET3A	; DECREMENT AND LOOP

RET3C:	AOJL	T3,RET4		; IF -2 QUIT
	SOJ	T3,		; IF -1, GO BACK AND ...
	SOJA	P2,RET3B	; DO IT TO FNAME

	 ; UPDATE &STNO

RET4:	MOVE	T1,ILABEL##	; GET ADDRESS
	ADD	T1,ILABEL+1	; OF STATEMENT
	HLRZ	T1,CSTNO(T1)	; PICK UP &STNO
	MOVEM	T1,$STNO##	; AND STORE IT.

	 ; AND NOW RETURN

RET5:	MOVE	S1,$RTNTP	; WAS IT A ...
	CAIN	S1,S.FRET	; FAIL ?
	JRST	0(PLINK)	; YES

	PUSH	STACK,FLAP+2	; PUSH ...
	PUSH	STACK,FLAP+3	; VALUE
	CAIN	S1,S.RET	; NORMAL RETURN?
	JRST	1(PLINK)	; YES

	JSP	TLINK,CVTNAM##	; ENSURE A NAME
	ERROR	14,3		; NOT A NAME

	MOVEI	S1,VAR		; SET TYPE ...
	HRLM	S1,-1(STACK)	; TO VARIABLE
	JRST	1(PLINK)	; AND RETURN
	 ; TRACING OF A RETURN NATURE

	 ; HERE IF &TRACE IS ON

RET.T1:	MOVE	S1,FNAME(P2)	; GET VB ADDR
	MOVE	S2,VFLAGS(S1)	; IS FUNCTION ...
	TLNN	S2,VRTFL	; RETURN TRACED?
	JRST	RET.T5		; NO

	MOVE	T1,VFUNC(S1)	; LOAD FBLOK
	MOVE	T2,TFRT(T1)	; GET TRBLOK FOR RET TRCING
	JSP	TLINK,TRCALL##	; CALL DEF FUNC. IF THERE
	ERROR	15		; &TRACE CAN'T BE OFF
	JRST	RET.T3		; JOIN &FTRACE DISPLAY
	JRST	RET.T5		; GO BACK

	 ; HERE IF &FTRACE IS ON

RET.T2:	SOS	$FTRC##		; FIRST DECREMENT &FTRACE

RET.T3:	SETOM	BARINC##	; ONE LESS BAR ON OUTPUT

	MOVEI	S2,FLAP+2	; POINT TO RETURN VALUE
	MOVE	S3,$RTNTP	; WAS IT AN ...
	CAIN	S3,S.FRET	; FRETURN?
	CLEAR	S2,		; YES, CLEAR RETURN VALUE

	MOVE	P2,FLAP		; LOAD FBLOK
	MOVE	S1,FNAME(P2)	; GET VB
	PUSH	STACK,VNAME(S1)	; PUSH NAME OF VAR
	PUSH	STACK,VNAME+1(S1)
	JSP	SLINK,RTMESS##	; PRODUCE MESSAGE
	JRST	RET.T6		; AND GO BACK
	END
 