	SUBTTL	DAVID R. HANSON/RCM/VB		15-JULY-76

;COPYRIGHT (C) 1976,1977 STEVENS INSTITUTE OF TECHNOLOGY
;HOBOKEN, NEW JERSEY, 07030.
;ALL RIGHTS RESERVED.

; Support for programmer access to the trapped variable concept

  ;UNIVERSALS

	SEARCH	JOBDAT		;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 MACRO DEFINITIONS
	SEARCH	UUOSYM		;TOPS-10 UUO SYMBOLS
	SEARCH	SNOPRM		;SITBOL PARAMETERS

  ;DIRECTIVES

	.DIREC	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWO SEGMENT CODE

  ;VERSION NUMBERS

	PAVVER==5		;MAJOR VERSION NUMBER
	PAVMIN==0		;MINOR VERSION NUMBER
	PAVEDT==135		;EDIT LEVEL
	PAVWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	PAV,SNOPAV,<Programmer Defined Variable Associations>

  ;SHOW UNIVERSAL'S VERSION NUMBERS

	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM
	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%UUOS		;VERSION NUMBER OF UUOSYM

IFE FTPAV,<END>			; stop now if we don't want this feature

	PAVTTL			; Title
	PAVPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Programmer Defined Variable Associations
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
;   3. Primary Function ASSOCIATE(var,process). . . . . . . .    4
;   4. Primary Function DISASSOCIATE(var,process) . . . . . .    5
;   5. Trap Handling
;        5.1.   TAVVAL. . . . . . . . . . . . . . . . . . . .    6
;        5.2.   TAVNAM. . . . . . . . . . . . . . . . . . . .    7
;        5.3.   TAVASS. . . . . . . . . . . . . . . . . . . .    8
;   6. Process Description Access Function
;        6.1.   GPRTYP. . . . . . . . . . . . . . . . . . . .    9
;        6.2.   GPRFCT. . . . . . . . . . . . . . . . . . . .   10
;        6.3.   GPRLVL. . . . . . . . . . . . . . . . . . . .   11
;        6.4.   GPRACT. . . . . . . . . . . . . . . . . . . .   12
;   7. Utility Function
;        7.1.   FNDPOS. . . . . . . . . . . . . . . . . . . .   13
;        7.2.   VACALL. . . . . . . . . . . . . . . . . . . .   14
;        7.3.   CHKACT. . . . . . . . . . . . . . . . . . . .   15
	SUBTTL	REVISION HISTORY

COMMENT	\
131	ADDITION OF THIS MODULE TO SITBOL FROM THE UNIVERSITY OF 
	ARIZONA, DAVID R. HANSON
134	Add PORTALs for execute only.
135	Remove definitions to the parameter file (SNOPRM).
\
	SUBTTL	Primary Function ASSOCIATE(var,process)

	 ; Insure correct arguments

ASSC::	HLRZ	T1,-1(STACK)	; get datatype of second argument
	CAIE	T1,DDT		; defined?
	 ERROR.	1,302		; no--signal error

	HRRZ	T1,-1(STACK)	; yes--get address of DBLOK
	HRRZ	T1,BLENG(T1)	; get length of DBLOK
	CAIGE	T1,PRLEN	; big enough?
	 ERROR.	13,300		; no

	JSP	TLINK,GPRLVL	; get association level
	 ERROR.	1,303		; bad datatype
	MOVEM	T2,IGNOP##	; save for later
	POP	STACK,FLAP##+1	; save defined datatype...
	POP	STACK,FLAP##	;  for later

	JSP	TLINK,CVTNAM##	; convert first argument to name
	 ERROR.	1,303		; what?

	 ; Get some storage for the VABLOK

	MOVE	Z,[VABLOK,,VALEN]; we need a VABLOK
	JSP	QLINK,BLOK##	; get some floating store
	 ERROR	6,1		; die big
	POP	STACK,Z		; toss junk
	POP	STACK,P2	; get address of block

	 ; Fill in fields of VABLOK

	HRLZI	Q1,IDT		; Flag field is an integer
	MOVEM	Q1,VAFLG(P2)	; and
	CLEARM	VAFLG+1(P2)	; is initially 0

	DMOVE	Q1,FLAP		; get descriptor for defined datatype
	DMOVEM	Q1,VAPROC(P2)	; store process description

	DMOVE	T2,-1(STACK)	; get variable name
	DMOVEM	T2,VANAME(P2)	; store it

	ADD	T2,T3		; point to value of variable
	MOVE	T3,IGNOP	; get association level
	JSP	TLINK,FNDPOS	; find position in trap chain
	DMOVE	Q1,0(T2)	; get old value
	DMOVEM	Q1,VAVAL(P2)	; store in VABLOK
	HRLI	P2,TVAR		; create trapped variable
	MOVEM	P2,0(T2)	; replace original value by a trap
	MOVEI	Q1,TAV		; get trap handling address
	MOVEM	Q1,1(T2)	; this is second word

	JRST	RETNL1##	; pop name and return null string
	SUBTTL	Primary Function DISASSOCIATE(var,process)

DASSC::	POP	STACK,FLAP+1	; pop process description
	POP	STACK,FLAP

	JSP	TLINK,CVTNAM##	; convert first argument to name
	 ERROR.	1,305		; not a name
	HRRZ	P2,-1(STACK)	; get address of value
	ADD	P2,0(STACK)	; add offset so P2 points to value
	MOVE	S3,FLAP		; get first word of process descriptor

	 ; Loop removing specific associations

DASSC1:	HLRZ	Q1,0(P2)	; get datatype of value
	CAIE	Q1,TVAR		; trapped variable?
	 JRST	RETNL1##	; no--we are at the end

	HRRZ	S1,0(P2)	; get address of trapping block
	HLRZ	Q1,BTCODE(S1)	; get block code
	CAIN	Q1,VABLOK	; is it a VABLOK?
	CAME	S3,VAPROC(S1)	; yes--but is process the same?
	 JRST	DASSC2		; no--not VABLOK or specific process

	 ; Here to disconnect the association

	SOS	VAFLG+1(S1)	; deactivate the association. If we are
				; currently processing this one then
				; VAFLG+1 will be -2.  See TAVASS.
	DMOVE	Q1,VAVAL(S1)	; load value hidden in trapping block
	DMOVEM	Q1,0(P2)	; overwrite trapped variable
	JRST	DASSC1		; loop for more

	 ; Here if TVAR did not point to VABLOK or specific process

DASSC2:	MOVEI	P2,LHDR(S1)	; point to next value
	JRST	DASSC1		; try again
	SUBTTL	Trap Handling -- TAVVAL


TAV::	JRST	TAVVAL		; want value
	JRST	TAVNAM		; want name
	JRST	TAVASS		; want to assign

; TAVVAL -- get value of an associated variable.  Call is
;
;	push TVAR descriptor
;	JSP	SLINK,TAV+0
;	 fail--stack unchanged
;	success--TVAR replaced by value
;
; Type S, unstable.
;
TAVVAL:	JSP	TLINK,CHKACT	; active?
	 JRST	TVAL4		; no
	 JRST	TVAL4		; no

	JSP	TLINK,GPRTYP	; yes--get trap type
	 ERROR.	1,300		; bad datatype in process DDT
	JRST	@[TVAL1
		  TVAL3](T2)	; dispatch on type

TVAL1:	JSP	TLINK,GPRFCT	; get address of function variable block
	 ERROR.	1,301		; not a name
	MOVEM	T2,IGNOS##	; save for later
	SUB	STACK,XWD22##	; toss DDT

	HRRZ	T3,-1(STACK)	; get address of VABLOK
	PUSH	STACK,VAVAL(T3)	; push value
	PUSH	STACK,VAVAL+1(T3)
	JSP	TLINK,CVTVAL##	; insure a real value
	 JRST	[SUB	STACK,XWD22##	; failed--prune stack
		 JRST	0(SLINK)]	; give fail return
	POP	STACK,FLAS##+1	; success-save real value
	POP	STACK,FLAS##

	MOVE	T2,IGNOS##	; get back function address
	HRRZ	T3,-1(STACK)	; point to VABLOK
	MOVEI	T4,FLAS		; point to value
	SETOM	VAFLG+1(T3)	; set interlock
	JSP	TLINK,VACALL	; call programmer's function
	 JRST	TVAL2		; user said fail!

	 ; Here upon successfull return from programmer's function

	HRRZ	T3,-3(STACK)	; get address of VABLOK
	CLEARM	VAFLG+1(T3)	; clear interlock
	POP	STACK,-2(STACK)	; overwrite TVAR with...
	POP	STACK,-2(STACK)	;  new value
	JRST	1(SLINK)	; return a winner

	 ; Here if programmer's function failed

TVAL2:	HRRZ	T3,-1(STACK)	; get address of VABLOK
	CLEARM	VAFLG+1(T3)	; clear interlock
	JRST	0(SLINK)	; fail

	 ; Here for in-active trap--just return value

TVAL3:	SUB	STACK,XWD22##	; pop off useless DDT
TVAL4:	POP	STACK,T3	; toss junk second word
	POP	STACK,T3	; get VABLOK address
	PUSH	STACK,VAVAL(T3)	; push value
	PUSH	STACK,VAVAL+1(T3)
	JRST	1(SLINK)	; return
	SUBTTL	Trap Handling -- TAVNAM

; TAVNAM -- get name of an associated variable.  Call is
;
;	push TVAR descriptor
;	JSP	SLINK,TAV+1
;	 fail--stack unchanged
;	success--TVAR replaced with VAR
;
; Type S, stable.
;
TAVNAM:	MOVEI	T3,VAR		; get VAR datatype code
	HRLM	T3,-1(STACK)	; change TVAR to VAR
	MOVEI	T3,VAVAL	; get offset to real value
	MOVEM	T3,0(STACK)	; set as offset for VAR

	JRST	1(SLINK)	; return
	SUBTTL	Trap Handling -- TAVASS

; TAVASS -- assignment to an associated variable.  Call is
;
;	push TVAR descriptor
;	push value descriptor to be assigned
;	JSP	SLINK,TAV+2
;	 fail--value popped, TVAR remains
;	success--value assigned, value popped, and TVAR remains
;
; Type S, unstable.
;
TAVASS:	POP	STACK,FLAS+1	; pop value to be..
	POP	STACK,FLAS	;  assigned exposing TVAR

	JSP	TLINK,CHKACT	; active?
	 JRST	TASS4		; no
	 JRST	TASS4		; no

	JSP	TLINK,GPRTYP	; yes--get type
	 ERROR.	1,300		; bad datatype
	JRST	@[TASS3
		  TASS1](T2)	; dispatch on type

TASS1:	JSP	TLINK,GPRFCT	; get associated function name
	 ERROR.	1,301		; not a name
	SUB	STACK,XWD22##	; toss DDT

	HRRZ	T3,-1(STACK)	; get address of VABLOK
	MOVEI	T4,FLAS		; point to value
	SETOM	VAFLG+1(T3)	; set interlock
	JSP	TLINK,VACALL	; call programmer's function
	 JRST	TASS2		; it failed

	 ; Here upon successful return from programmer's function

	POP	STACK,FLAS+1	; pop value to be
	POP	STACK,FLAS	;  assigned exposing the TVAR
	HRRZ	T3,-1(STACK)	; get address of VABLOK
	AOSL	VAFLG+1(T3)	; increment interlock flag and test
	 JRST	TASS4		; association still connected--go assign

	 ; Here if the association function disconnected the VABLOK
	 ; by calling DISASSOCIATE.

	SUB	STACK,XWD22##	; toss TVAR
	PUSH	STACK,VANAME(T3); push name of associated variable
	PUSH	STACK,VANAME+1(T3)
	MOVEI	Q1,VAR		; make it a VAR...
	HRLM	Q1,-1(STACK)	;  instead of NDT
	PUSH	STACK,-1(STACK)	; replicate variable...
	PUSH	STACK,-1(STACK)	;  for ASGNVL
	JRST	TASS5		; go assign value to the real variable

	 ; Here if programmer's function failed

TASS2:	HRRZ	T3,-1(STACK)	; get VABLOK address
	CLEARM	VAFLG+1(T3)	; clear interlock
	JRST	0(SLINK)	; indicate failure

	 ; Here if trap is in-active--simply try to assign the value

TASS3:	SUB	STACK,XWD22##	; get rid of useless DDT
TASS4:	HRR	T3,-1(STACK)	; get address of VABLOK
	HRLI	T3,VAR		; make a pointer to...
	PUSH	STACK,T3	;  the real value of...
	PUSH	STACK,[VAVAL]	;  the variable

	 ; Merge here to assign the value to the variable.  We
	 ; may trigger other associations.

TASS5:	PUSH	STACK,FLAS	; put value to be assigned...
	PUSH	STACK,FLAS+1	;  back on stack
	JSP	TLINK,ASGNVL##	; do the assignment
	 JRST	0(SLINK)	; fail

	SUB	STACK,XWD22##	; success--remove extra variable
	JRST	1(SLINK)	; return
	SUBTTL	Process Description Access Function -- GPRTYP

; GPRTYP -- get type field.  Call is
;
;	push descriptor for process defined datatype
;	JSP	TLINK,GPRTYP
;	 fail--PRTYP field is wrong datatype
;	success--T2 is 0 for FETCH, 1 for STORE
;
; Type T, unstable.
;
GPRTYP::MOVEM	TLINK,TLNKSV##	; save the link
	MOVE	T2,-1(STACK)	; get DBLOK address
	PUSH	STACK,PRTYP(T2)	; push type field
	PUSH	STACK,PRTYP+1(T2)
	JSP	TLINK,CVTSTR##	; convert to string
	 JRST	TFAIL1		; fail--pop stack and return

	JSP	QLINK,CVTPTR##	; success--convert to pointer
	0			; no basing
	JRST	@TLNKSV		; null string loses
	ILDB	T2,Z		; get first character

	CAIE	T2,"S"		; STORE?
	CAIN	T2,"s"
	 JRST	[MOVEI	T2,1		; yes--get a one
		 JRST	TSUCC]		; return a winner

	CAIE	T2,"F"		; FETCH?
	CAIN	T2,"f"
	 TDZA	T2,T2		; yes--return a zero
	JRST	@TLNKSV		; not FETCH or STORE
	JRST	TSUCC		; return a winner

	 ; Here to pop stack and fail

TFAIL1:	SUB	STACK,XWD22##	; pop stack
TFAIL:	JRST	@TLNKSV		; fail return

	SUBTTL	Process Description Access Function -- GPRFCT

; GPRFCT -- get address of the variable block for the associated
; programmer-defined function.  Call is
;
;	push descriptor for process defined datatype
;	JSP	TLINK,GPRFCT
;	 fail--bad datatype
;	success--T2 contains variable block address
;
; Type T, unstable.
;
GPRFCT::MOVEM	TLINK,TLNKSV	; save the link
	MOVE	T2,-1(STACK)	; get DBLOK address
	PUSH	STACK,PRFCT(T2)	; push function descriptor
	PUSH	STACK,PRFCT+1(T2)
	JSP	TLINK,CVTNAM##	; convert to name
	 JRST	TFAIL1		; not a name--give error return
	SKIPE	0(STACK)	; natural variable?
	 JRST	TFAIL1		; no--fail
	HRRZ	T2,-1(STACK)	; yes--get variable block address
TSUCC1:	SUB	STACK,XWD22##	; prune stack
TSUCC:	MOVE	TLINK,TLNKSV	; restore link
	JRST	1(TLINK)	; return success

	SUBTTL	Process Description Access Function -- GPRLVL

; GPRLVL -- get association level.  Call is
;
;	push descriptor for process defined datatype
;	JSP	TLINK,GPRLVL
;	 fail--bad datatype
;	success--T2 contain integer level
;
; Type T, stable.
;
GPRLVL::MOVEM	TLINK,TLNKSV	; save the link
	MOVE	T2,-1(STACK)	; get DBLOK address
	PUSH	STACK,PRLVL(T2)	; push level descriptor
	PUSH	STACK,PRLVL+1(T2)
	JSP	TLINK,CVTINT##	; convert to integer
	 JRST	TFAIL1		; oops--bad datatype
	MOVE	T2,0(STACK)	; get value
	JRST	TSUCC1		; pop stack and return success

	SUBTTL	Process Description Access Function -- GPRACT
; GPRACT -- get association active status.  Call is
;
;	push descriptor for process defined datatype
;	JSP	TLINK,GPRACT
;	 fail--bad datatype
;	success--T2 is 0 if not active, 1 if active
;
; Type T, stable.
;
GPRACT::MOVEM	TLINK,TLNKSV	; save the link
	MOVE	T2,-1(STACK)	; get DBLOK address
	PUSH	STACK,PRACT(T2)	; push activity descriptor
	PUSH	STACK,PRACT+1(T2)
	JSP	TLINK,CVTINT	; convert to integer
	 JRST	TFAIL1		; fail
	SKIPN	0(STACK)	; active?
	 TDZA	T2,T2		; no--return zero
	MOVEI	T2,1		; yes--return 1
	JRST	TSUCC1		; pop stack and give success return

	SUBTTL	Utility Function -- FNDPOS

; FNDPOS -- find the proper position according to level in a chain
; of trapping blocks.  Call is
;
;	MOVE	T2,addr of first value
;	MOVE	T3,new level
;	JSP	TLINK,FNDPOS
;	return--T2 points to value that must be displaced
;
; Type T, stable.
;
FNDPOS::MOVEM	TLINK,SVTLNK##	; save the link
	MOVEM	T3,T3SAV	; save new level

	 ; Walk down list until we find the proper place

POS1:	HLRZ	Q1,0(T2)	; get datatype of current value
	CAIE	Q1,TVAR		; trapped variable ?
	  JRST	0(TLINK)	; no--we are end of chain

	HRRZ	Q1,0(T2)	; yes--get trapping block address
	HLRZ	Q2,BTCODE(Q1)	; get block code
	CAIE	Q2,VABLOK	; variable association block?
	  JRST	POS2		; no--must be one of the others

	 ; Here if trapping block is one of ours

	MOVEM	T2,T2SAV##	; yes--save T2
	PUSH	STACK,VAPROC(Q1); push process description
	PUSH	STACK,VAPROC+1(Q1)
	JSP	TLINK,GPRLVL	; get its level
	 ERROR.	1,304		; bad datatype
	SUB	STACK,XWD22##	; rid stack of DDT
	MOVE	TLINK,SVTLNK	; restore link
	MOVE	Q3,T2		; put level in Q3
	MOVE	T2,T2SAV	; restore T2
	JRST	POS3		; merge below

	 ; Here for other trapping blocks (TRBLOK, IABLOK, & OABLOK)

POS2:	CAIL	Q2,TRBLOK	; is it one of...
	CAILE	Q2,OABLOK	;  the expected blok types?
	 ERROR	15		; no--we found a bug
	MOVE	Q3,[EXP TRLVL,IALVL,OALVL]-TRBLOK(Q2)	; yes--get default

	 ; Here with Q3 = current trapping block's level

POS3:	CAMLE	Q3,T3SAV##	; found the right place?
	 JRST	0(TLINK)	; yes--return with T2 set up
	MOVE	Q1,0(T2)	; no--get trapping block address
	MOVEI	T2,VAVAL(Q1)	; point to next value
	JRST	POS1		; try again

	SUBTTL	Utility Function -- VACALL

; VACALL -- call a programmer defined function to effect the
; trap.  Call is
;
;	load T2 with variable block address of function name
;	load T3 with VABLOK address
;	load T4 with address of second argument descriptor
;	JSP	TLINK,VACALL
;	 failed--stack unchanged
;	success--returned value placed on stack
;
; Type T, unstable.
;
VACALL::PUSHR	PST		; elevate to...
	PUSHSA	MIPS		; godly state

	PUSH	STACK,VANAME(T3); first argument--name of variable
	PUSH	STACK,VANAME+1(T3)
	PUSH	STACK,0(T4)	; second argument--some value
	PUSH	STACK,1(T4)
	PUSH	STACK,VAPROC(T3); third argument--process description
	PUSH	STACK,VAPROC+1(T3)
	MOVEI	Z,3		; indicate 3 arguments

	MOVEI	Q1,VFUNC(T2)	; get address of VFUNC field
	MOVEM	Q1,IGNOP+2	; save for &ERRPARM
	MOVE	T4,VFUNC(T2)	; get FBLOK address
	JSP	PLINK,FCODE(T4)	; call function
	 JSP	Q1,ACALL1	; fail--set Q1 non-zero and jump

	CLEAR	Q1,		; indicate success
	POP	STACK,FLAQ##+1	; pop returned value
	POP	STACK,FLAQ##

ACALL1:	POPSA	MIPS		; restore the state...
	POPR	PST		;  of the system
	JUMPN	Q1,0(TLINK)	; return if function failed

	PUSH	STACK,FLAQ	; push on returned value
	PUSH	STACK,FLAQ+1
	JRST	1(TLINK)	; return

	SUBTTL	Utility Function -- CHKACT

; CHKACT -- check activity status.  Also checks &ASSOCIATE.  Call
; is
;
;	push TVAR on stack
;	JSP	TLINK,CHKACT
;	 here if datatype error
;	 here if not active
;	 here if active--Defined datatype placed on stack
;
; Type T, unstable.
;
CHKACT::SKIPN	$ASSOC##	; &ASSOCIATE = 0?
	 JRST	1(TLINK)	; yes--give speedy return

	HRRZ	Q2,-1(STACK)	; get VABLOK address
	SKIPE	VAFLG+1(Q2)	; are we trying to recurse?
	 JRST	1(TLINK)	; yes--we are not active now

	HLRZ	Q3,VAPROC(Q2)	; get datatype of process description
	CAIE	Q3,DDT		; defined datatype?
	 JRST	0(TLINK)	; no
	HRRZ	Q3,VAPROC(Q2)	; yes--get address of DBLOK
	HRRZ	Q3,BLENG(Q3)	; get length of DBLOK
	CAIGE	Q3,PRLEN	; enough?
	 JRST	0(TLINK)	; no

	MOVEM	TLINK,SVTLNK	; save the link
	PUSH	STACK,VAPROC(Q2); push DDT descriptor on stack
	PUSH	STACK,VAPROC+1(Q2)
	JSP	TLINK,GPRACT	; get active field
	 JRST	[SUB	STACK,XWD22##	; bad datatype--prune stack
		 JRST	@SVTLNK]	; return

	MOVE	TLINK,SVTLNK	; restore link
	JUMPN	T2,2(TLINK)	; return if active
	SUB	STACK,XWD22##	; prune stack
	JRST	1(TLINK)	; not active

	END
    