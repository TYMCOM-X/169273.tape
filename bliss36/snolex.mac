	SUBTTL	MA355/JDS/DRH/MP/RCM/VB		15-JUN-76

; COPYRIGHT 1972,1973,1976,1977  STEVENS INSTITUTE OF TECHNOLOGY
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.

  ;UNIVERSALS

	SEARCH	MACTEN		;DEC-10 COMMON MACROS
	SEARCH	SNOPRM		;SITBOL PARAMETERS

  ;DIRECTIVES

	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWO SEGMENT CODE

  ;VERSION NUMBER

	LEXVER==5		;MAJOR VERSION NUMBER
	LEXMIN==0		;MINOR VERSION NUMBER
	LEXEDT==254		;EDIT LEVEL
	LEXWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	LEX,SNOLEX,<Lexical Analyzer>

  ;SHOW UNIVERSAL VERSION NUMBER

	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM

	LEXTTL			; Title
	LEXPTX			; PASS2 message
	SUBTTL	Table of Contents

;		Table of Contents for Lexical Analyzer
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
;   3. DEFINITIONS. . . . . . . . . . . . . . . . . . . . . .    4
;   4. Lexical Routines . . . . . . . . . . . . . . . . . . .    5
	SUBTTL	REVISION HISTORY

COMMENT	\
START OF VERSION 5.
122	RENAME MODULES & REORGANIZE.
125	REMOVE PATCHING SPACE.  LINK WILL TAKE CARE OF THINGS LIKE
	that.
147	Use the TX?? macros instead of the TD?? instructions,
	and use the Y.???? instead of the  X.????
205	Place a title on every page of the output listing.
206	Line number all coments, blank lines, etc. on the
	output listing
212	Code clean up.
246	Change references to FMT.xx.
254	CHANGE OUTPUT LISTING PAGE NUMBERS (ALLOW A MINOR PAGE NO.)
\
	SUBTTL	DEFINITIONS


S.TAB:	XWD	11,1

UBLOK==UTBLOK
 INTERN UBENTR
UBSIZE= ^D22


Y.OPND==Y.OP!Y.UPS!Y.LOWS!Y.LP!Y.Q!Y.QQ!Y.PLUS!Y.MNS!Y.NUM	; OPER. FOR UNARY OPER.



N.FLG==1	; SEQUENCE #'ED FLAG
F.FLG==2	; FORM FEED FLAG

	SUBTTL	Lexical Routines


;	TKINIT & EXINIT --- TOKEN INITIALIZATION ROUTINES
;	-------------------------------------------------
;
;
;	TOKEN INITIALIZATION FOR EXPRESSIONS
;
EXINIT::MOVEI	Z,ST2	; IGNORE LABEL SEARCH
	CLEARM	GTFLAG##		; NON GOTO SYNTAX
	SKIPA			; MERGE WITH TKINIT

;	TOKEN INITIALIZATION FOR PROGRAMS
;
TKINIT::	MOVEI	Z,ST1	; INITIALIZE STATE
	MOVEM	Z,STATE		; STATE=ST1
	SKIPE	PREX##		; IN PREX STAGE?
	JRST	INPREX		; JUMP IF YES
	JSP	TLINK,STINIT##	; SET UP FOR STREAMING
	JRST	0(SLINK)	; ERROR RETURN
	JRST	1(SLINK)	; SUCCESS RETURN
;
INPREX:	SETZM	LINES##		; INITIALIZE LINE COUNTER
	JSP 	TLINK,GETREC	; FETCH A RECORD
	JRST	0(SLINK)	; ERROR RETURN
	JRST	1(SLINK)	; SUCCESS RETURN


;
;	GETREC --- INTERNAL ROUTINE TO FETCH AN INPUT RECORD
;	----------------------------------------------------
;
;
;
GETREC:	MOVE	S2,TLINK	; SAVE RETURN ADR IN S2
READ1:	PUSHR	PST		; SAVE SOME AC'S
	PUSHSA	PST		; SAVE SOME AREA'S

READ1A:	MOVE	T2,NLPGNO##	; SET ...
	MOVEM	T2,PAGENO##	; PAGE NUMBER
	MOVE	T2,COMPIN##	; SET UP FOR READ
	MOVE 	T3,COMPIN+1
	JSP	TLINK,READ##	; READ 1 SOURCE RECORD
	ERROR	12,4		; BAD READ
	JRST	GTERTN		; End of File

	SETZM	RDFLGS##		; CLEAR THESE FLAGS

	TRNE	Z,F.FLG		; FORM FEED?
	AOS	NLPGNO		; YES, INCREMENT NEXT PG. NO.

	TRNE	Z,N.FLG		; SEQUENCE NUMBERING?
	JRST	RDSQA		; YES, DON'T SEQ

	SKIPE	AUTOHS##	; IS IT TO BE HISTOGRAMED?
	 JRST	LREAD1		; DO IT THE OLD WAY.

	AOS	LINENO##	; INC THE FAKED LINE NUMBER

	PUSH	STACK,[XWD IDT,0]	; MAKE UP ARGS FOR LPAD
	PUSH	STACK,LINENO

	PUSH	STACK,[XWD IDT,0]	; NO. OF CHARS
	PUSH	STACK,[5]

	PUSH	STACK,$ALPHA##	; PAD WITH '0'
	PUSH	STACK,[" ",,1]

	MOVEI	Z,3		; THREE ARGS FOR LPAD
	JSP	PLINK,LPAD##	; GO DO IT.
	 ERROR	15		; SOMETHING WRONG.

	POP	STACK,STKSAV##
	POP	STACK,STKSAV##+1

	PUSH	STACK,$ALPHA	; ADD A TAB
	PUSH	STACK,S.TAB	; ..

	PUSH	STACK,STKSAV##+1	; GET BACK THE LINE NO.
	PUSH	STACK,STKSAV	; ..

	MOVEI	Z,3		; 3 ARGS FOR CONCAT
	JSP	TLINK,CONCAT##	; DO IT.
	 ERROR	15		; TOO BAD.


RDSQA:	MOVEI	S3,1		; ONE ARG FOR CONCAT

	HRRZ	T1,0(STACK)	; LOAD LENGTH OF STRING
	SUBI	T1,6		; SUBTRACT OFF # OF PERIFS.

	SKIPE	AUTOHS##	; HISTOGRAMMING?
	JRST	IGREAD		; YES, JUMP

	JUMPLE	T1,COMENT	; IF NULL , TREAT AS COMMENT

	PUSH	STACK,-1(STACK)	; PUSH REDUCED STRING ...
	HRLI	T1,6		; ONTO ...
	PUSH	STACK,T1	; STACK

	PUSH	STACK,-1(STACK)	; CONVERT
	PUSH	STACK,[5]	; THE FIRST
	JSP	TLINK,CVTINT##	; 5
	SKIPA	T1,CMPNO##	; CHARACTERS TO 
	MOVE	T1,0(STACK)	; INTEGER (IF POSSIBLE)
	SUB	STACK,XWD22##	; USE COMPNO IF NOT
	MOVEM	T1,CMPNO	; MAKE NEW CMPNO

	JRST	LREAD2		; JOIN PROCESSING

	 ; HERE IF WE ARE TO IGNORE AN EXISTING SEQ. NUMBER

IGREAD:	JUMPG	T1,IGRD1	; INSURE A NON-NULL STRING
	SUB	STACK,XWD22	; NULL STRING, PRUNE STACK...
	PUSH	STACK,NULLST##	; AND PUSH ON A...
	PUSH	STACK,NULLST+1	; NULL STRING
	JRST	COMENT		; TREAT THIS AS A COMMENT

IGRD1:	HRLI	T1,6		; DIMINISH LENGTH OF NON-NULL STRING
	MOVEM	T1,0(STACK)	; BY 6

	 ; HERE IF LINE IS NOT SEQUENCED NUMBERED

LREAD1:	MOVEI	S3,2		; TWO STRINGS TO BE CONCATED
	PUSH	STACK,$ALPHA##	; TAB IS ...
	PUSH	STACK,S.TAB	; THE OTHER STRING

	PUSH	STACK,-3(STACK)	; REPEAT ...
	PUSH	STACK,-3(STACK)	; SUBJCT

	 ; MERGE HERE FROM SEQUENCE #'ED FILES

LREAD2:	JSP	TLINK,STINIT	; SET UP FOR STREAMING
	AOJA	S3,COMENT	; TREAT NULL STRING AS A COMMENT

	 ; NOW CHECK THE FIRST CHARACTER 

	MOVE	Q3,SUBJ##		; FETCH 1ST CHAR BASED ON Q3
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB##(Q2)	; CHAR SET FOR CHAR TO T2
	TXNE	T2,Y.STAR!Y.VB!Y.SEMI	; COMMENT CARD
	JRST	COMENT		; JUMP IF YES
	TXNE	T2,Y.MNS	; CONTROL CARD
	JRST	CONTRL		; JUMP TO PROCESS CONTROL CARD
	TXNE	T2,Y.PER!Y.PLUS	; CONTINUE CARD?
	JRST	NONUMB		; SKIP STMT NUMBER IF SO

	CAIE	S3,2		; ALSO IF ALREADY SEQUENCED ...
	JRST	NONUMB		; WE SHOULD ALSO SKIP

	MOVEI	S3,3		; FOR CONCAT LATER
	PUSH	STACK,[XWD IDT,0]	; FOR CONVERSION
	PUSH	STACK,CMPNO##	; STMT NUMBER
	JSP	TLINK,CVTSTR##	; STMT NO. TO STRING
	ERROR	15
NONUMB:	JSP	TLINK,PRINT	; TO PRINT OUT LISTING

GTERTN:	TDZA	Q2,Q2		;[212] SIGNAL AN ERROR
GTRRTN:	MOVEI	Q2,1		;[212] SKIP RETURN

	POPSA	PST		; GET BACK SOME SAVE AREA'S
	POPR	PST		; GET BACK SOME REGISTERS

	ADD	Q2,S2		; Set return addr
	JRST	0(Q2)		; Return.

CONTRL:		; CODE TO PROCESS CONTROL CARDS
COMENT:	JSP	TLINK,PRINT	; OUTPUT TO LISTING FILE
	JRST	GTERTN		; Error return
	JRST	READ1A		; Get another record.


;
;	PRINT --- ROUTINE TO SEND DATA TO LISTING FILE
;	-----------------------------------------------
;
;
;
PRINT:	MOVE	Z,S3		; NO. OF STRINGS TO CONCATENATE
	MOVE	S3,TLINK	; SAVE RETURN ADR
	CAIN	Z,1		; ONLY ONE ARG?
	JRST	PRINT1		; YES, AVOID CONCAT
	JSP	TLINK,CONCAT##	; CONCATENATE FOR OUTPUT
	ERROR	15		; ERROR--RETURN

PRINT1:	DMOVE 	T2,LISTF##	; DENOTES LISTING FILE

	POP	STACK,LSUBJ+1	; SAVE THE LAST STRING ...
	POP	STACK,LSUBJ##	; PRINTED FOR 
	ADD	STACK,XWD22	; DIAGNOSTIC PURPOSES

	JSP	TLINK,WRITE##	; OUTPUT TO LISTING FILE
	ERROR	12,26		; ERROR DETECTED

	 ; TEST FOR PAGE EJECT

PRINT2:	MOVE	Q2,PAGENO	; SEE IF A FORM-FEED WAS
	CAMN	Q2,NLPGNO	; ENCOUNTERED
	 JRST	PRINT3		; CHECK FOR ANOTHER PAGE

	SETZM	NLMPGN		; START A NEW PAGE
	JRST	PRINTE		; PRINT IT

PRINT3:	AOS	Q2,LINES	;[254] INCREMENT LINE COUNT
	CAMGE	Q2,NLINES##	;[254] TIME FOR A PAGE EJECT & TITLE?
	 JRST	1(S3)		;[254] YES ..
	AOS	NLMPGN##	;[254] NEW MINOR PAGE

PRINTE::	DMOVE 	T2,LISTF	; INDICATE LISTING FILE
	JSP	TLINK,PEJECT##	; EJECT PAGE
	JRST	0(S3)		; ERROR DETECTED BY PEJECT
PRINTF::	SETZM	LINES		; RESET LINE COUNTER

	PUSHR	PS		; SAVE SOME AC'S
	PUSHSA	PS		; SAVE SOME AREA'S

	JSP	PLINK,DATEE##	; GET THE DATE FOR TITLE
	 ERROR	15

	MOVEI	S3,1			;[254] ARGUMENT FOR CONCAT
	SKIPN	NLMPGN		;[254] DO WE NEED A MINOR PAGNO?
	 JRST	PRINOM			;[254] NOPE - JUST MAJOR.

	PUSH	STACK,[XWD IDT,0]	;[254] Make MINOR page no.
	PUSH	STACK,NLMPGN##		;[254]  ..

	JSP	TLINK,CVTSTR##		;[254] MAKE THIS A STRING
	 ERROR	15			;[254] PROBLEM ENCOUNTERED.

	MOVEI	S3,3			;[254] THREE THINGS FOR CONCAT

	push	stack,$alpha		;[254] Yes we do.
	push	stack,["-",,1]

	SKIPE	NLPGNO		;[254] IS THERE A SUMMARY?
	 JRST	PRINOM		;[254] NO.

	PUSH	STACK,$ALPHA	;[254] DESC. FOR 'S'
	PUSH	STACK,["S",,1]	;[254] ..

	JRST	PRIEXT		;[254] GO CONCAT.

PRINOM:	push	stack,[XWD IDT,0]	;[254] this is the MAJOR page no.
	push	stack,NLPGNO##		;[254] this is the MAJOR page no.

	JSP	TLINK,CVTSTR##	;[254] CONVERT TO A STRING.
	 ERROR	15		;[254] ..

	CAIN	S3,1			;[254] SHOULD WE AVOID CONCAT
	 JRST	PRINO2			;[254] YES.

PRIEXT:	MOVE	Z,S3			;[254] GET THE ARGUMENT
	jsp	tlink,concat##		;[254] concatenate this mess
	 error	15			;[254] hope not

PRINO2:	MOVX	Z,FMT.S!FMT.WM	;[246] SIXBIT FORMAT FOR CVTWD
	MOVE	Q2,COMPIN	; GET DESCRIPTOR
	MOVE	Q2,4(Q2)	; GET FOR TITLE

	MOVE	T2,IOEXT(Q2)	; MAKE UP EXT.
	JSP	TLINK,CVTWD##	; INTO A STRING
	 ERROR	15		; HOPE NOT.

	MOVX	Z,FMT.S!FMT.WM	;[246] ALL OVER AGIN.
	MOVE	Q2,COMPIN	; ..
	MOVE	Q2,4(Q2)	; EASIEST WAY.

	MOVE	T2,IONAME(Q2)	; MAKE UP NAME (FILE)
	JSP	TLINK,CVTWD	; MAKE A STRING
	 ERROR	15		; SERIOUS PROBLEM.
	jsp	plink,trim##	;[254] lose some spaces.
	JFCL			;[254] WE DON'T CARE

	JSP	SLINK,LINE##	; MAKE UP A LINE
	XWD	LISTF##,^D14	; ON THE LISTING FILE AS FOLLOWS:
	XWD	SDT,S.ID##	; 'SITBOL '
	XWD	SDT,S.VER##	; '%X(XXX)'
	XWD	SDT,S.BLNK##	; '        '
	XWD	SDT,S.FIL##	; 'FILE: '
	XWD	STACK,1		; FILE
	XWD	SDT,[".",,1]	; '.'
	XWD	STACK,2		; EXT
	XWD	SDT,S.BLNK	; '        '
	XWD	STACK,4		; 'XX/XX/XX' (DATE)
	XWD	SDT,S.BLNK	; '        '
	XWD	SDT,S.PAG##	; 'PAGE: '
	XWD	STACK,3		; MAJOR-MINOR PAGE
	XWD	SDT,[15,,1]	; CR
	XWD	SDT,[12,,1]	; LF

	MOVEI	Z,2		; MAKE IT THINK IT ..
	MOVEM	Z,LINES		; HAD TWO LINES

	POPSA	PS		; GET BACK SOME AREA'S
	POPR	PS		; GET BACK THOSE AC'S

	JRST	1(S3)		; RETURN.

;	TOKEN --- ROUTINE TO BREAK OUT 1 TOKEN
;	--------------------------------------
;
;
TOKEN::	JRST	@STATE		; JUMP TO APPROPRIATE STATE
;
;	STATE 1 ---- LOOK FOR A LABEL
;	-----------------------------

ST1:	CLEARM	GTFLAG		; STATE 1 - CHECK FOR A LABEL.
				; NEXT STATE IS 2.
;
	MOVEI	Z,ST2		; SET UP NEXT STATE (2)
	MOVEM	Z,STATE##
	MOVE	S2,SYSCT##	; SET UP TO STREAM FOR BLANKS
	MOVX	S3,Y.BL!Y.TAB!Y.SEMI!Y.CR	; CHAR SET FOR BLANKS
	JSP	TLINK,STRM##	; STREAM
	JFCL	Z,		; FASTEST NO-OP
	JSP	TLINK,INSTAL##	; INSTAL ANY LABEL IF ANY
	JRST	NOLABL		; FAILURE MEANS NO LABEL
	MOVE	Q2,Z		; SAVE POINTER
	HRLI	Z,SY.ID##	; For return
	MOVS	Q3,VLABEL(Q2)	; VLABEL=END?
	CAIE	Q3,END##		; COMPARE
	JRST	2(SLINK)	; LABEL FOUND--NOT END
	MOVX	S3,Y.UPS!Y.LOWS!Y.NUM	; BREAK ON ALPHANUMERIC
	JSP	TLINK,STR.##	; STREAM
	JRST	ENOLAB		; END WITH NO STARTING LABEL
	MOVX	S3,Y.BL!Y.TAB
	JSP	TLINK,STRM	; STREAM FOR BLANK
	JFCL	Z,		; FASTEST NO-OP
	JSP	TLINK,INSTAL##	; INSTALL START LABEL

ENOLAB:	CLEAR	Z,		; TO INDICATE NO STARTING LABEL
	JRST	1(SLINK)	; EOS RETURN
NOLABL:	CLEAR	Z,		; NULL LABEL RETURN
	JRST	2(SLINK)	; RETURN TO CLIENT


;
;	STATE 2 --- REQUIRES NON-EXISTANCE OF A BINARY OPERATOR
;	-------------------------------------------------------
;
;
ST2:
	MOVE	S2,SYSCT	; SET UP TO SPAN BLANKS
	MOVX	S3,Y.BL!Y.TAB	; CHAR SET FOR BLANKS
	JSP	TLINK,STR.C##	; LAST CHAR IN Q2 ON RETURN.
	JRST	EOR		; RUNOUT MEANS END OF RECORD
	MOVE	Q3,SYSCTB##(Q2)	; CHAR SET MASK TO Q3

ST2.1:	TXNE	Q3,Y.OP		; CHECK FOR OPERATOR
	JRST	LEX.UO		; OFF TO PROCESS UNARY OPERATOR
	TXNE	Q3,Y.UPS!Y.LOWS	; CHECK FOR A LETTER
	JRST	LEX.ID		; PROCESS IDENTIFIER,ARY,FUN
	TXNE	Q3,Y.PLUS!Y.MNS!Y.NUM!Y.UPS!Y.LOWS!Y.PER	; CHECK FOR NUMERIC
	JRST	LEX.NM		; PROCESS NUMERIC CONSTANT
	TXNE	Q3,Y.Q!Y.QQ	; Q2 CONTAINS QUOTE TYPE
	JRST	LEX.QL		; IF A QUOTED LITERAL
	TXNE	Q3,Y.CM		; CHECK FOR A COMMA
	JRST	LEX.CM		; GO PROCESS COMMA
	TXNE	Q3,Y.RB!Y.RP	; CHECK FOR RIGHT DELIMITOR 
	JRST 	LEX.SR		; WILL CHECK FOR STEREOTYPES
	TXNE	Q3,Y.LB!Y.LP!Y.COL	; CHECK FOR OTHER SPEC CHARS
	JRST	LEX.SL		; PROCESS SPECIAL LEFT CHAR
	TXNE	Q3,Y.SEMI	; CHECK FOR STMT END
	JRST	EOS		; END OF STMT
	TXNE	Q3,Y.CR		; CHECK FOR <CR>
	JRST	EOS2		; END OF STMT
	JRST	ERR.S		; ILLEGAL CHAR DETECTED
;
;
LEX.UO:				; PROCESS A UNARY OPERATOR
	MOVE	Q3,SUBJ		; BASE STPTR
	ILDB	T2,STPTR	; UPDATE STPTR (& GET CHAR) ...
	SOSG	CURSOR##	; AND CURSOR
	JRST	ERR.S		; INVALID CHAR AFTER UNARY OP
	MOVE	T2,SYSCTB(T2)	; GET CS MASK
	TXNN	T2,Y.OPND	; SEE IF VALID CHAR FOLLOWS U-OP
	JRST	ERR.S		; YES, INVALID
	PUSH	STACK,$ALPHA	; DESCRIPTOR TOP FOR &ALPHABET
	MOVS	T3,Q2		; CHAR TO T3 LEFT
	ADDI	T3,1		; LENGTH=1
	PUSH	STACK,T3	; DESCRIPTOR BOTTOM
	JSP	TLINK,INSTAL
	ERROR	15		; SYSTEM ERROR IN INSTALL
	HRLI	Z,SY.UNY##	; RETURN SY.UNY,(PTR)
	JRST	2(SLINK)	; RETURN TO CLIENT
;
;
;
ISYSER:	MOVEI	Z,CE.SYS##	; SYSTEM ERROR
	JRST	ERR


;
LEX.SR:	MOVEI	Q2,SY$RP##	;[212] ASSUME ..
	TXNE	Q3,Y.RB		;[212] RIGHT BRACKET?
	 MOVEI	Q2,SY$RB##	;[212] YES.
;
LEX.S3:	MOVEI	Z,ST3		; STATE=ST3
	JRST	SPCHAR
;
LEX.CM:	MOVEI	Q2,SY$COM##	; COMMA PROCESSING IN SYN

LEX.S4:	MOVEI	Z,ST4		; STATE=ST4
;
SPCHAR:	MOVEM	Z,STATE		; SPEC CHAR PROCESSING
;
LEX.SP:	IBP	STPTR		; UPDATE STPTR ...
	SOS	CURSOR		; AND CURSOR
	HRLZ	Z,Q2		; MOVE PROCESSING ADDRESS ...
	JRST	2(SLINK)	; INTO Z-LEFT AND RETURN
;
LEX.SL:	TXNE	Q3,Y.COL	; TEST FOR COLON
	JRST	LEX.CL		; YES, IT IS COLON

	MOVEI	Q2,SY$LP##	;[212] ASSUME L.P.
	TXNE	Q3,Y.LB		; WAS IT LEFT BRACKET?
	MOVEI	Q2,SY$LB##	; YES
	JRST	LEX.S4		;[212] STATE 4
LEX.CL:	MOVEI	Q2,SY$COL##	; YES
	SETOM	GTFLAG		; FREE UP SUBSEQUENT SYNTAX
	JRST	LEX.SP
;
LEX.ID:	MOVE	S2,SYSCT	; IDENTIFIER PROCESSING
	MOVX	S3,Y.UN!Y.UPS!Y.LOWS!Y.NUM!Y.PER ; Character set
	JSP	TLINK,STRMC##	; BREAK OUT IDENTIFIER
	JFCL	Z,		; INSTALL ID EVEN ON RUNOUT
	MOVE	S2,SYSCTB(Q2)	; SAVE CHAR SET MASK
	JSP 	TLINK,INSTAL	; INSTAL
	ERROR	15		; SYSTEM ERROR IF INSTAL FAILS
	TXNE	S2,Y.LB!Y.LP	; SKIP IF IDENT.
	JRST	F.OR.A		;	JUMP IF FUN OR ARY
REGID:	HRLI	Z,SY.ID##	; RETURN SY.ID,(PTR)
	MOVEI	Q2,ST3		; STATE=ST3
	MOVEM	Q2,STATE
	JRST	2(SLINK)	; RETURN TO CLIENT
;
F.OR.A:	HRLI	Z,SY.FUN##	; PREPARE FOR SY.FUN
	TXNE	S2,Y.LP		; CHECK IF FUNCTION TYPE
	JRST	AF.RET		; JUMP IF SO
	TXNN	S2,Y.LB		; CHECK FOR ARRAY TYPE
	ERROR	15		; ERROR IF NEITHER
	HRLI	Z,SY.ARY##	; PREPARE FOR SY.ARY RETURN

AF.RET:	MOVEI	S3,ST4		; STATE=ST4
	MOVEM	S3,STATE
	IBP	STPTR		; UPDATE CURSOR & STPTR
	SOS	CURSOR
	JRST	2(SLINK)
;
;
ERR.S:	MOVEI	Z,CE.IC##	; ILLEGAL CHAR ERROR
	JRST	ERR


;
LEX.QL:	IBP	STPTR##		; QUOTED LITERAL PROCESSING
	SOS	CURSOR##	; UPDATE CURSOR & STPTR
	MOVE	S2,SYSCT	; SET UP FOR STRM
	MOVX	S3,Y.Q		; SPECIFY CHAR SET FOR SINGLE QUOTE
	CAIN	Q2,42		; IF LITERAL BEGAN WITH DOUBLE QUOTE
	MOVX	S3,Y.QQ		; THEN SPECIFY ITS CHAR SET
	JSP	TLINK,STRM	; SPAN QUOTED LITERAL
	JRST	UNBAL		; UNBALANCED QUOTE FOUND
	IBP	STPTR		; BUMP CURSOR & STPTR
	SOS	CURSOR
	JSP	TLINK,STCON##	; ENTER INTO CONSTANT AREA
UBSTOR:	JSP	TLINK,UBENTR	; CREATE UBLOK ENTRY
	JFCL	Z,		; NO-OP
	HRLI	Z,SY.CON##	; RETURN SY.CON,(PTR)
	MOVEI	Q2,ST3		; STATE=ST3
	MOVEM	Q2,STATE
	JRST	2(SLINK)	; RETURN TO CLIENT
UNBAL:	MOVEI	Z,CE.QT##	; UNMATCHED QUOTE ERROR
	SUB	STACK,XWD22	; POP ARG FROM STACK
	JRST	ERR
;
LEX.NM:	MOVE	S2,SYSCT	; SET UP TO SPAN NUMERIC TYPE
	MOVX	S3,Y.PLUS!Y.MNS!Y.NUM!Y.UPS!Y.LOWS!Y.PER	
	JSP	TLINK,STRMC	; STREAM
	JFCL	Z,		; NO ERROR FOR RUNOUT
	JSP	TLINK,CVTNUM##	; CONVERT TO NUMERIC
	JRST	BADNUM		; ILLEGAL NUMERIC ERROR
	JRST	UBSTOR		; STORE VALUE IN UBLOK
BADNUM:	SUB	STACK,XWD22##	; POP STACK
	MOVEI	Z,CE.NI##	; ERROR IN NUMERIC ITEM
	JRST	ERR


;
;	STATE 3 --- THIS STATE IS USED TO DETECT ANY BINARY OPERATORS
;	-------------------------------------------------------------
;
;
;
ST3:	MOVE	T4,CURSOR##	; SAVE CURSOR VALUE
	MOVEM	T4,IGNOS##	; IN TEMP LOCATION
ST3.1:	MOVE	S2,SYSCT##	; PREPARE TO SPAN BLANKS
	MOVX	S3,Y.BL!Y.TAB	; CHAR SET FOR BLANKS
	JSP	TLINK,STR.C	; SPAN BLANKS
	JRST	EOR		; END OF RECORD DETECTED
	MOVE	Q3,SYSCTB(Q2)	; CS MASK OF CHAR IN Q2
	TXNE	Q3,Y.RB!Y.RP	; CHECK FOR RIGHT SPECIAL CHAR
	JRST	LEX.SR		; JUMP IF YES
	MOVEI	T2,ST4		; STATE=ST4
	MOVEM	T2,STATE
	TXNE	Q3,Y.OP		; CHECK FOR BINARY OPERATOR
	JRST	ST3.BO		; JUMP IF OPERATOR
	TXNE	Q3,Y.CM		; CHECK FOR COMMA
	JRST	LEX.CM		; JUMP IF COMMA
	TXNE	Q3,Y.SEMI	; CHECK FOR SEMI-COLON
	JRST	EOS		; END OF RECORD
	TXNE	Q3,Y.CR		; <CR>?
	JRST	EOS2		; YES
	TXNE	Q3,Y.LB		; LEFT BRACKET?
	JRST	LEX.SL		; YES
	MOVEI	T2,ST2		; STATE=ST2
	MOVEM	T2,STATE
	TXNE	Q3,Y.COL	; CHECK FOR COLON
	JRST	LEX.CL		; JUMP IF COLON
	MOVE	T4,IGNOS	; FETCH PREVIOUS CURSOR VALUE
	CAME	T4,CURSOR	; DID CURSOR MOVE?
	JRST	LEX.IC		; IMPLICIT CONCATENATION DETECTED
	SKIPE	GTFLAG		; GOTO ZONE?
	JRST	ST2		; YES, ALLOW THIS

	MOVEI	Z,CE.IC##	; ERROR - ILLEGAL CHARACTER
	JRST	ERR		; GO PROCESS ERROR

	 ; HERE IF BINARY OP WAS DETECTED

ST3.BO:	MOVE	T4,IGNOS	; LOAD FORMER CURSOR
	CAME	T4,CURSOR	; SAME AS PRESENT VALUE?
	JRST	LEX.BO		; NO, OFF TO PROCESS BO

	MOVEI	Z,CE.MB##	; MISSING BLANK
	JRST	ERR		; ERROR


;
;	STATE 4 --- THIS STATE IS USED TO DETECT IMPLICIT NULL STRINGS
;	--------------------------------------------------------------
;
;
;
ST4:	MOVE	S2,SYSCT	; PREPARE TO SPAN BLANKS
	MOVX	S3,Y.BL!Y.TAB	; CS FOR BLANKS
	JSP	TLINK,STR.C	; SPAN BLANKS
	JRST	EOR4		; END OF RECORD DETECTED
	MOVEI	T2,ST2		; STATE=ST2
	MOVEM	T2,STATE
	MOVE	Q3,SYSCTB(Q2)	; CHAR SET MASK TO Q3
	TXNN	Q3,Y.RP!Y.RB!Y.COL!Y.CM!Y.SEMI!Y.CR	; CHECK FOR STATE 4 DELIMITORS
	JRST	ST2.1		; JUMP IF NONE OF THESE
IMPNUL:	MOVE	Z,[XWD SY.CON,NULLST]	; IMPLICIT NULL
	JRST	2(SLINK)	; RETURN TO CLIENT

	 ; HERE IF NO CHARACTERS ARE LEFT

EOR4:	SKIPE	PREX		; RUNTIME?
	JRST	EOR1		; NO - COMPILE TIME

	MOVEI	T2,EOR		; INSERT ...
	MOVEM	T2,STATE	; NEXT STATE
	JRST	IMPNUL		; AND RETURN NULL


;
LEX.BO:	MOVE	Z,CURSOR	; SAVE CURSOR
	MOVEM	Z,IGNOS	
	MOVE	Z,STPTR
	MOVEM	Z,IGNOS+1
	MOVE	S2,SYSCT	; PREPARE TO SPAN OPERATORS
	MOVX	S3,Y.OP		; CHAR SET FOR OPERATORS
	JSP	TLINK,STRMC	; SPAN OPERATORS
	JRST	INBOP		; BIN OP AT END OF RECORD
	MOVE	Q3,SYSCTB(Q2)	; CHAR SET MASK
	TXNN	Q3,Y.BL!Y.TAB!Y.RB!Y.RP!Y.SEMI ; IS IT A BINARY OP. ?
	JRST	NOTBO		; JUMP IF NOT
INBOP:	JSP	TLINK,INSTAL	; INSTALL BINARY OPERATOR
	ERROR 	15		; ERROR IN INSTAL
	MOVE	T4,Z		; POINTER TO T4PL	T3,VKEY(T4)	; OPFLAG SET?
	JRST	INSERT		; NO GO INSERT DEFAULT PRECEDENCES
BINARY:	HRLI	Z,SY.BIN##	; RETURN BINTYP,PTR
	JRST	2(SLINK)	; RETURN TO CLIENT
;
INSERT:	HRLZI	T3,OPFLAG	; SET OPFLAG
	IORM	T3,VKEY(T4)
	HRLZI	T3,LDPREC	; INSERT LEFT DEFAULT PRECEDENCE
	HLLM	T3,LPREC(T4)
	HRLZI	T3,RDPREC	; INSERT RIGHT DEFAULT PRECEDENCE
	HLLM	T3,RPREC(T4)
	JRST	BINARY	
;
;
NOTBO:	SUB	STACK,[XWD 2,2]	; BINARY OPER IS CONCATENATION
	MOVE	Z,IGNOS		; RESTORE CURSOR
	MOVEM	Z,CURSOR
	MOVE	Z,IGNOS+1
	MOVEM	Z,STPTR


;
LEX.IC:	PUSH	STACK,$ALPHA	; DESCRIPTOR TOP FOR & ALPHABET
	PUSH	STACK,[XWD " ",1]	; BLANK
	MOVEI	Z,ST2		; STATE=ST2
	MOVEM	Z,STATE
	JSP	TLINK,INSTAL	; INSTALL BLANK
	ERROR	15		; ERROR IN INSTALL
	JRST	BINARY		; JUMP TO RETURN BINTYP,PTR
;
;
EOR:		; ENTRY POINT UPON REACHING END OF RECORD
	SKIPE	PREX		; TEST FOR PRE-EXECUTION
	JRST	EOR1		; YES - JUMP
	MOVEI	S2,ENOLAB	; NEXT STATE BEGINS AT ...
	MOVEM	S2,STATE	; ENOLAB
	JRST	1(SLINK)	; TAKE EOS RETURN

EOR1:	JSP	TLINK,GETREC	; FETCH A NEW RECORD
	JRST	MISEND		; NO END CARD
	MOVE	Q3,SUBJ		; FETCH 1ST CHAR BASED ON Q3...
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB(Q2)	; CHAR SET MASK
	TXNE	T2,Y.PER!Y.PLUS	; CONTINUE CARD?
	JRST	REZUM		; JUMP IF YES
	MOVE	T4,STATE	; STATE=ST4
	CAIE	T4,ST4		;IS STATE ST4?
	JRST	ST5		; JUMP IF NOT
	MOVEI	T4,ST5
	MOVEM	T4,STATE	; SET STATE=ST5
	JRST	IMPNUL		; IMPLICIT NULL

	 ; HERE FOR <CR> <LF>
	 ; 
EOS2:	IBP	STPTR		; INCREMENT PAST
	SOS	CURSOR		; THE CARRIAGE RETURN
	IBP	STPTR		; BUMP CURSOR AND ...
	SOSG	CURSOR		; SKIP IF NOT AT END
	JRST	EOR		; END OF STRING - JUST LIKE PL/I
	JRST	ST5		;[257] STATE 1

	 ; HERE FOR SEMICOLON

EOS:	IBP	STPTR		;[257] BUMP CURSOR
	SOSG	CURSOR		;[257] SKIP IF NOT AT END
	 JRST	EOR		;[257] END OF STRING
	MOVE	Q3,SUBJ		;[257] PREPARE FOR TEST
	LDB	Q2,STPTR	;[257] LOAD BYTE
	MOVE	T2,SYSCTB(Q2)	;[257] LOAD FROM CHARACTER TABLE
	TXNN	T2,Y.STAR!Y.VB!Y.SEMI	;[257] COMMENT CHAR.?
	JRST	ST5		;[257] STATE 1

	MOVE	S2,SYSCT##	;[257] SET UP FOR STREAM
	MOVX	S3,Y.SEMI!Y.CR	;[257] LOOK FOR NEXT LINE.
	JSP	TLINK,STRM##	;[257] ..
	JFCL			;[257] NO PROBLEM.
	SUB	STACK,XWD22##	;[257] NDON'T NEED WHATS ON THE STACK

ST5:	MOVEI	T4,ST1		; STATE=ST1
	MOVEM	T4,STATE
	JRST	1(SLINK)	; END OF STMT RETURN TO CLIENT
;
REZUM:	IBP	STPTR		; UPDATE STPTR & CURSOR
	SOS	CURSOR	
	MOVE	Q3,STATE	; IS STATE=ST3
	CAIE	Q3,ST3
	JRST	TOKEN		; GO FETCH THE NEXT TOKEN
	MOVEI	Q3,7777		; LARGE VALUE FOR COMPARISON WITH CURSOR
	MOVEM	Q3,IGNOS	; SAVE VALUE
	JRST	ST3.1		; PROCEED TO FETCH A TOKEN
ERR:		; ENTER WITH NUMBER IN ACC 0
	MOVEI	S2,NEXT1	; SET STATE TO ...
	MOVEM	S2,STATE	; NEXT1
	JRST	0(SLINK)	; AND GIVE THE ERROR RETURN

NEXT1:	JSP	TLINK,GETREC	; READ 1 SOURCE RECORD
	ERROR	12,4		; INCORRECTIBLE READ ERROR
	MOVE	Q3,SUBJ		; FETCH 1ST CHAR BASED ON Q3 ...
	LDB	Q2,STPTR	; INTO Q2
	MOVE	T2,SYSCTB(Q2)	; CHAR SET MASK
	TXNE	T2,Y.PER!Y.PLUS	; CONTINUE CARD
	JRST	NEXT1		; FETCH ANOTHER RECORD IF YES
	JRST	ST1		; GO GIVE LABEL

	 ; HERE IF NO MORE SOURCE COULD BE FOUND

MISEND:	MOVEI	T4,MISEN1	; SET UP LOCATION...
	MOVEM	T4,STATE	; FOR NEXT TIME
	JRST	1(SLINK)	; JUST INDICATE END OF STATE.
	
MISEN1:	MOVEI	Z,CE.ME##	; ERROR MESSAGE
	MOVEM	SLINK,STATE	; SAVE LINK
	JSP	SLINK,CERROR##	; GIVE MESSAGE
	MOVE	SLINK,STATE	; RESTORE STATE
	CLEAR	Z,		; NO END LABEL
	JRST	1(SLINK)	; END OF PROGRAM


;
;	UBENTR --- ROUTINE TO INSERT 1 ENTRY INTO A UBLOK
;	-------------------------------------------------
;
;
;
UBENTR:	MOVE	Q2,NXTUBE##	; GET POINTER TO NEXT UBLOK SLOT
	CAML	Q2,LASLOT##	; IS THERE ROOM IN THE CURRENT UBLOK?
	JRST	GETSOM		; NO, ALLOCATE A NEW UBLO
ENTRY:	POP	STACK,1(Q2)	; CREATE THE UBLOK ENTRY
	POP	STACK,0(Q2)
	MOVE	Z,Q2		; UBLOK ENTRY POINTER INTO ACC 0
	ADDI	Q2,2		; UPDATE UBLOK POINTER
	MOVEM	Q2,NXTUBE	; SAVE VALUE
	JRST	0(TLINK)	; RETURN
GETSOM:	MOVEI	Z,UBSIZE	; ARGUMENT TO GCOLG
	JSP	QLINK,GCOLG##	; CALL GARBAGE COLLECTOR
	MOVE	Q3,GSURF##	; GET POINTER TO AVAILABLE CORE
	MOVEI	Q2,1(Q3)
	HRL	Q2,Q3		; SET UP FOR BLT COMMAND
	SETZM	0(Q3)		; ZERO 1ST WORD
	BLT	Q2,UBSIZE-1(Q3)	; ZERO A BLOCK OF WORDS
	MOVE	Z,[XWD UBLOK,UBSIZE]	; BLOK HEADER WORD
	MOVEM	Z,@Q3		; INSERT HEADER
	MOVEI	Z,UBSIZE(Q3)	; SET UP END-OF-BLOK POINTER
	MOVEM	Z,GSURF
	MOVEM	Z,LASLOT	; SAVE IN MEMORY
	MOVEI	Q2,2(Q3)	; SET UP POINTER FOR INITIAL ENTRY
	MOVEM	Q2,NXTUBE
	MOVEM	Z,GSURF
	JRST	ENTRY		; PROCEED TO MAKE ENTRY
;
	END
5[d9S