	SUBTTL	Gimpel--Ma355/JDS/DRH/MP/RCM/VB		15-Jun-76

; COPYRIGHTS 1972,1973,1976,1977  STEVENS INSTITUTE OF TECHNOLOGY
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.

  ;UNIVERSALS

	SEARCH	JOBDAT		;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 COMMON MACROS
	SEARCH	UUOSYM		;TOPS10 UUO SYMBOL DEFINITIONS
	SEARCH	SNOPRM		;SITBOL PARAMETER FILE

  ;DIRECTIVES

	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWOSEGMENT CODE

  ;VERSION NUMBER

	DFDVER==5		;MAJOR VERSION NUMBER
	DFDMIN==0		;MINOR VERSION NUMBER
	DFDEDT==245		;EDIT LEVEL
	DFDWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	DFD,SNODFD,<Defined Data types>

  ;SHOW UNIVERSAL VERSION NUMBERS

	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%UUOS		;VERSION NUMBER OF UUOSYM
	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM

	DFDTTL			; Title
	DFDPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Defined Data types
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
;   3. DATA - PRIMARY FUNCTION. . . . . . . . . . . . . . . .    4
;   4. FIELD - PRIMARY FUNCTION . . . . . . . . . . . . . . .    6
;   5. CRTDAT - CREATE A DATA OBJECT. . . . . . . . . . . . .    7
;   6. FLDREF - REFERENCE TO A FIELD OF A DEFINED DATA OBJECT    8
;   7. LFBLOK . . . . . . . . . . . . . . . . . . . . . . . .    9
;   8. IFBLOK . . . . . . . . . . . . . . . . . . . . . . . .   10
	SUBTTL	REVISION HISTORY

COMMENT	\

START OF VERSION 5.
122	RENAME MODULES & CLEAN UP.
147	Use Y.???? instead of X.????, and the correct macros for them.
245	Fix missing PORTAL at CRTDAT
\
	SUBTTL	DATA - PRIMARY FUNCTION

;	DATA EXPECTS A ONE ARGUMENT PROTOTYPE AND
;	RETURNS THE NULL STRING.


DATA::
	JSP	TLINK,STINIT##	; INITIALIZE STREAMING
	ERROR	13,30		; NULL OR NONSTRING

	MOVE	S2,SYSCT##	; LOAD CHAR. SET
	MOVX	S3,Y.LP		; FOR "("
	JSP	TLINK,STRM##	; STREAM FOR IT
	ERROR	13,32		; MISSING "(""

	MOVEI	S1,1		; HOLDS COUNT OF THE # OF FIELDS
	 ; TOP OF LOOP FOR EXTRACTING FIELD NAMES.
DATA1:	SOS	CURSOR##		; MOVE PAST ...
	IBP	STPTR##		; BREAK CHAR.

	MOVX	S3,Y.CM!Y.RP	; Load ",)" mask
	JSP	TLINK,STRM	; SEARCH FOR ONE OF THESE
	ERROR	13,34		; DID NOT END WITH ")"

	CAIE	Q2,")"		; SKIP IF LAST FIELD
	AOJA	S1,DATA1	; INCREMENT COUNT AND LOOP BACK

	 ; ENSURE ENOUGH STORAGE
	MOVEI	Z,DFFLDS(S1)	; DFBLOK REQUIREMENTS
	JSP	QLINK,GCOLF##	; ENSURE THIS MUCH

	 ; MOVE IN HEADER FOR DFBLOK
	MOVE	Z,SURF		; TO ADDRESS
	HRLI	Z,DF.PRO	; FROM ADDRESS
	BLT	Z,FCODE(SURF)	; DO THE MOVE

	 ; ALTER FIELDS IN HEADER OF DFBLOK
	ADDM	S1,BLENG(SURF)	; INCREASE LENGTH BY # OF FLDS
	HRRM	S1,FNARGS(SURF)	; INSERT # OF ARGS

	 ; ESTABLISH FLOATING ADDRESS TO DFBLOK
	MOVE	S3,SURF		; S3 POINTS TO DFBLOK
	ADDI	SURF,DFFLDS(S1)	; UPDATE SURF
	HRLI	S3,FLDC		; KEEP GARBAGE COLLECTOR HAPPY
	MOVEM	S3,FLAP##	; SAVE ADDR IN TENDED REGION.
	 ; TOP OF LOOP TO PROCESS A FIELD ELEMENT
DATA2:
	 ; PLUG DFBLOK FIELD ADDRESS
	JSP	TLINK,INSTAL##	; INSTAL STRING INTO SYMBOL TABLE
	ERROR	13,33
	MOVE	P2,Z

	 ; MOVE PROTOTYPE INTO FFBLOK
	MOVEI	Z,LFFBL		; ENSURE SPACE FOR ...
	JSP	QLINK,GCOLF	; ONE FFBLOK
	MOVE	Z,SURF		; TO ADDRESS
	HRLI	Z,FF.PRO	; FROM ADDRESS
	BLT	Z,FCODE(SURF)	; DO THE MOVE

	 ; SPECIFY OTHER FIELDS OF FFBLOK
	MOVE	S3,FLAP		; LOAD ADDRESS OF DFBLOK
	HRRM	S3,FFDFBL(SURF)	; INSERT DFBLOK POINTER
	MOVE	Q1,S1		; GET NUMBER OF FIELDS
	ASH	Q1,1		; DOUBLE FOR DESCRIPTOR SIZE
	MOVEI	Q1,DFLDS-2(Q1)	; TOTAL OFFSET WITHIN DBLOK
	HRLM	Q1,FFOFFS(SURF)	; INSERT WITHIN FFBLOK
	CLEARM	FFLINK(SURF)	; CLEAR LINK FIELD

	 ; ALSO FILL IN FIELD FOR DFBLOK
	ADDI	S3,DFFLDS-1(S1)	; POINT TO LOCATION WITHIN DFBLOK
	MOVEM	P2,0(S3)		; INSERT VARIABLE BLOCK ADDRESS.

	 ; INSERT THIS FFBLOK AS THE CURRENT FUNCTION FOR THE VAR. BLOCK
	MOVEI	Q2,VFUNC(P2)	; POINT TO VFUNC FIELD
	SKIPGE	VFLAGS(P2)	; IF NOT OPERATOR , SKIP
	MOVEI	Q2,VUNARY(P2)	; OPERATOR - POINT TO VUNARY FIELD
	MOVE	Q3,SURF		; Q3 POINTS TO FFBLOK
	JSP	QLINK,IFBLOK	; DO THE INSERTION

	 ; END OF LOOP FOR PROCESSING FFBLOK'S
	MOVEI	SURF,LFFBL(SURF)	; UPDATE SURFACE
	SOJG	S1,DATA2	; LOOP ON S1

	 ; END OF FFBLOK PROCESSING
	 ; FIND VARIABLE BLOCK FOR DT NAME
	JSP	TLINK,INSTAL	; INSTAL STRING INTO SYMBOL TABLE
	ERROR	13,31		; NULL STRING

	MOVE	Q3,FLAP		; RETRIEVE ADDRESS OF DFBLOK
	MOVEM	Z,DFNAME(Q3)	; INSERT VAR. BLOCK ADDRESS
	MOVE	Q1,Z		; PUT ADDRESS INTO INDEX REGISTER
	MOVEI	Q2,VFUNC(Q1)	; POINT TO VFUNC FIELD
	JSP	QLINK,IFBLOK	; DO THE INSERTION
	JRST	RETNUL##	; RETURN NULL STRING

	 ; DFBLOK PROTOTYPE
DF.PRO:	XWD	DFBLOK,DFFLDS
	0
	XWD	FSAFL+FEAFL,0
	JSP	SLINK,CRTDT$##	;[245]

	 ; FFBLOK PROTOTYPE
FF.PRO:	XWD	FFBLOK,LFFBL
	0
	XWD	FEAFL,1
	JSP	SLINK,FLDRF$##
	SUBTTL	FIELD - PRIMARY FUNCTION

;	FIELD(S,I) WILL RETURN THE NAME OF THE ITH 
;	FIELD OF THE DATATYPE DESCRIBED BY S.

FIELD::
	JSP	TLINK,CVTINT##	; ENSURE 2ND ARG. INTEGER
	ERROR.	1,68		; BAD 2ND ARG.

	SKIPG	P2,0(STACK)	; LOAD I INTO P2 AND TEST THE INT.
	JRST	FRET2##		; FAIL UNLESS POSITIVE
	SUB	STACK,[2,,2]	; POP INTEGER FROM STACK

	JSP	TLINK,CVTNAM##	; MAKE FIRST ARGUMENT A NAME
	ERROR.	1,67		; NOT POSSIBLE

	SKIPE	0(STACK)	; TEST FOR NATURAL VARIABLE
	ERROR.	1,67		; UNNATURAL
	POP	STACK,S2	; POP INTO ...
	POP	STACK,S1	; S1 & S2

	 ; BACK TO FIELD2: FROM TFBLOK CASE
	HRRZ	S2,VFUNC(S1)	; PICK UP FBLOK POINTER
FIELD2:	HLRZ	S3,BTCODE(S2)	; PICK UP TAYPE OF FBLOK.
	CAIN	S3,DFBLOK	; SHOULD BE A DFBLOK
	JRST	FIELD1		; IT IS! JUMP!
	CAIE	S3,TFBLOK	; PERHAPS ITS TRACED
	ERROR	13,59		; NO - GIVE MESSAGE
	HRRZ	S2,TFOLD(S2)	; OLD FBLOK TO S1
	JRST	FIELD2		; BACK TO SEEK DFBLOK

	 ; CHECK I AGAINST THE NUMBER OF FIELDS
FIELD1:
	HRRZ	Z,FNARGS(S2)	; PICK UP # OF FIELDS
	CAMGE	Z,P2		; SKIP IF I DOES NOT EXCEED THIS
	JRST	0(PLINK)	; FAIL IF IT DOES

	 ; RETURN ASSOCIATED NAME
	ADDI	S2,DFFLDS-1(P2)	; MAKE S2 POINT TO CURRENT FIELD
	MOVE	S3,0(S2)	; PICK UP ADDR OF VARIABLE BLOCK
	HRLI	S3,NDT		; INSERT DATATYPE
	PUSH	STACK,S3	; RETURN
	PUSH	STACK,[0]	; NAME DATATYPE
	JRST	1(PLINK)	; SUCCESSFULLY
	SUBTTL	CRTDAT - CREATE A DATA OBJECT

;	CONTROL ENTERS HERE WITH A
;	 JSP	SLINK,CRTDAT
;	EXECUTED WITHIN A DFBLOK. THE PURPOSE BEING
;	TO CREATE A DATA OBJECT OF A GIVEN TYPE.

CRTDAT::			;[245]
	MOVEI	S1,-FCODE-1(S1)	; GET TO TOP OF BLOK
	HRLI	S1,FLDC		; PRESERVE FLOATING ...
	MOVEM	S1,FLAP		; ADDRESS

	 ; DETERMINE FLOATING STORAGE REQUIREMENTS
	HRRZ	S3,FNARGS(S1)	; GET NUMBER OF FIELDS
	ASH	S3,1		; DOUBLE IT
	MOVEI	P2,DFLDS(S3)	; ADD IN HEADER ROOM
	MOVEI	Z,0(P2)		; PLACE THE AMOUNT IN Z
	JSP	QLINK,GCOLF##	; ENSURE THIS MUCH FLOATING STORAGE

	 ; START FILLING IN TOP PART OF NEW STRUCTURE
	HRLI	P2,DBLOK	; INSERT TYPE ALONG WITH LENGTH
	MOVEM	P2,BTCODE&BLENG(SURF)	; PLUG FIRST WORD
	CLEARM	GCFLD(SURF)	; CLEAR 2ND WORD
	AOS	S2,DFDID##	; LOAD NEW HASH NUMBER
	HRL	S2,FLAP		; GET ADDR OF DFBLOK
	MOVSM	S2,DHASH&ADFBLK(SURF) ; PLUG VALUES
	 ; NOW ROLL THE ARGUMENTS FROM THE STACK INTO THE 
	 ; NEWLY CREATED STRUCTURE

	HRL	S3,S3		; PUT ARG LENGTH INTO BOTH HALVES
	SUB	STACK,S3	; REMOVE ARGS FROM STACK
	MOVEI	T1,DFLDS(SURF)	; 'TO' ADDRESS
	HRLI	T1,1(STACK)	; 'FROM' ADDRESS
	MOVE	T2,SURF		; SAVE SURFACE
	ADDI	SURF,0(P2)	; UPDATE SURFACE
	BLT	T1,-1(SURF)	; DO THE MOVE

	 ; RETURN
	HRLI	T2,DDT		; INSERT DATATYPE
	PUSH	STACK,T2	; PUSH DESCRIPTOR
	PUSH	STACK,[0]	; ONTO STACK
	JRST	1(PLINK)	; AND RETURN
	SUBTTL	FLDREF - REFERENCE TO A FIELD OF A DEFINED DATA OBJECT

;	CONTROL ARRIVES HERE WHEN A FIELD OF A PROGRAMMER-DEFINED
;	DATA OBJECT IS BEING REFERENCED.	THE CALL IS 
;		JSP	SLINK,FLDREF
;	AND IS EXECUTED FROM WITHIN AN FFBLOK

FLDREF::
	MOVEI	S1,-FCODE-1(S1)	; GET TO TOP OF FFBLOK
	 ; FIRST CHECK DESCRIPTOR ON STACK
	HLRZ	P2,-1(STACK)	; GET DATATYPE
	CAIE	P2,DDT		; IS IT DEFINED
	ERROR.	1,26		; NO- GIVE ERROR
	 ; COMPARE DATATYPE ON STACK WITH DATA EXPECTED BY FIELD
	MOVE	P2,-1(STACK)	; LOAD ADDRESSOF DBLOK
	HRRZ	S2,ADFBLK(P2)	; LOAD ASSOCIATED DFBLOK ADDR.
FLDRF2:	 ; MERGE HERE FROM OTHER FFBLOK
	HRRZ	S3,FFDFBL(S1)	; GET DATATYPE OF FIELD
	CAME	S2,S3		; ARE THESE THE SAME
	JRST	FLDRF1		; NO - BRANCH


	 ; FIX UP DESCRIPTOR ON STACK TO BE A VARIABLE
	HLRZ	T1,FFOFFS(S1)	; LOAD ASSOCIATED OFFSET
	MOVEM	T1,0(STACK)	; ESTABLISH AS DESCRIPTOR'S OFFSET
	MOVEI	T1,VAR		; INSERT VAR
	HRLM	T1,-1(STACK)	; AS DATATYPE INDICATOR
	JRST	1(PLINK)	; AND RETURN

	 ; HERE TO TRY FOR ANOTHER FFBLOK
FLDRF1:	HRRZ	S1,FFLINK(S1)	; SEE IF ANOTHER FFBLOK EXISTS
	JUMPG	S1,FLDRF2	; YES, TRY IT
	ERROR.	1,23		; INAPPROPRIATE DATATYPE
	SUBTTL	LFBLOK

	 ; CALLING SEQUENCE
	 ;	LOAD Q2 WITH ADDRESS OF VFUNC FIELD
	 ;	JSP	QLINK,LFBLOK
	 ;	RETURN WITH Q2 CONTAINING ADDRESS OF FBLOK

LFBLOK::HRRZ	Q2,0(Q2)	; PICK UP ADDRESS OF FBLOK
	CAML	Q2,GRID##	; SKIP IF BELOW DYNAMIC AREA
	CAML	Q2,CEIL##	; SKIP IF WITHIN DYNAMIC AREA
	JRST	0(QLINK)	; RETURN Q3 IF ITS PURE

	HLRZ	Z,BTCODE(Q2)	; GET TYPE OF BLOK
	CAIE	Z,TFBLOK	; SKIP IF BEING TRACED
	JRST	0(QLINK)	; RETURN IF NOT

	HRRZ	Q2,TFOLD(Q2)	; PICK UP OLD FBLOK
	JRST	0(QLINK)	; AND RETURN IT
	SUBTTL	IFBLOK

; CALLING SEQUENCE:
;	LOAD Q2 WITH ADDRESS OF VFUNC, VBINRY OR VUNARY
;	FIELD OF A VARIABLE BLOCK
;	LOAD Q3 WITH ADDRESS OF NEW FBLOK (TO BE INSERTED INTO 
;	THE RECEPTACLE)
;	JSP	QLINK,IFBLOK
;	RETURN
;
; IN WHAT FOLLOWS:
;	Q1 = OLD FBLOK
;	Q2 = RECEPTACLE
;	Q3 = NEW FBLOK

IFBLOK::
	MOVEM	QLINK,IGNOQ##	; SAVE RETURN
 ; LOOP BACK HERE IF OLD IS TFBLOK
IFBL2:	HRRZ	Q1,0(Q2)	; GET OLD FBLOK
	HRRM	Q3,0(Q2)	; INSERT NEW FBLOK
; IF OLD FBLOK IS OUTSIDE THE DYNAMIC AREA
; IT CAN BE REPLACED WITHOUT FURTHER ADO.
	CAML	Q1,GRID		; SKIP IF BELOW DYN. AREA
	CAML	Q1,CEIL		; SKIP IF WITHIN DYN. AREA
	JRST	@IGNOQ		; JUST RETURN

; IS THE OLD FBLOK TRACED?
	HLRZ	Z,BTCODE(Q1)	; GET TYPE OF OLD
	CAIE	Z,TFBLOK	; SKIP IF BEING TRACED
	JRST	IFBL1		; JUMP IF NOT

; JUST ADVANCE RECEPTACLE FOR TFBLOK'S
	HRRM	Q1,0(Q2)	; INSERT OLD FBLOK

	MOVE	Z,FFLAGS&FNARGS(Q3)  ; TRANSFER
	MOVEM	Z,FFLAGS&FNARGS(Q1)  ; GOODIES

	MOVEI	Q2,TFOLD(Q1)	; POINT TO NEW SPOT
	JRST	IFBL2		; AND LOOP BACK

; IF BOTH NEW AND OLD ARE FFBLOK'S WE MUST CHAIN
; THE OLD OFF THE NEW
IFBL1:	CAIE	Z,FFBLOK	; SKIP IF OLD IS FFBLOK
	JRST	@IGNOQ		; RETURN IF NOT
	HLRZ	Z,BTCODE(Q3)	; PICK UP CODE FOR NEW
	CAIE	Z,FFBLOK	; SKIP IF FFBLOK
	JRST	@IGNOQ		; RETURN IF NOT
	HRRM	Q1,FFLINK(Q3)	; LINK THEM TOGETHER
	JRST	@IGNOQ		; AND RETURN.
	END
