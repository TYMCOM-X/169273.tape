	SUBTTL	Gimpel--Ma355/JDS/DRH/MP/RCM/VB		15-Jun-76

; COPYRIGHTS 1972,1973,1976,1977 STEVENS INSTITUTE OF TECHNOLOGY
; HOBOKEN, NEW JERSEY, 07030
; ALL RIGHTS RESERVED.

  ;UNIVERSALS

	SEARCH	JOBDAT		;JOB DATA AREA DEFINITIONS
	SEARCH	MACTEN		;DEC-10 COMMON MACROS
	SEARCH	UUOSYM		;TOPS10 UUO SYMBOL DEFINITIONS
	SEARCH	SNOPRM		;SITBOL PARAMETER FILE

  ;DIRECTIVES

	.DIRECT	.XTABM		;EXCLUDE TABS FROM MACRO CALLS
	SALL			;SUPPRESS MACRO EXPANSIONS
	TWOSEG	400K		;TWOSEGMENT CODE

  ;VERSION NUMBER

	ERRVER==5		;MAJOR VERSION NUMBER
	ERRMIN==0		;MINOR VERSION NUMBER
	ERREDT==304		;EDIT LEVEL
	ERRWHO==0		;CUSTOMER ARGUMENT

  ;TITLE

	TITLE.	ERR,SNOERR,<Error Handler>

  ;SHOW UNIVERSAL VERSION NUMBERS

	SHOW.	%%JOBD		;VERSION NUMBER OF JOBDAT
	SHOW.	%%MACT		;VERSION NUMBER OF MACTEN
	SHOW.	%%UUOS		;VERSION NUMBER OF UUOSYM
	SHOW.	%%SNOP		;VERSION NUMBER OF SNOPRM

	ERRTTL			; Title
	ERRPTX			; PASS2 assembly message
	SUBTTL	Table of Contents

;		Table of Contents for Error Handler
;
;
;			   Section			      Page
;   1. Table of Contents. . . . . . . . . . . . . . . . . . .    2
;   2. REVISION HISTORY . . . . . . . . . . . . . . . . . . .    3
;   3. EXECUTION-TIME ERROR PROCESSING - PROLOGUE . . . . . .    4
;   4. SETEXIT AND RECOVERY LABELS. . . . . . . . . . . . . .    6
;   5. EXECUTION-TIME ERRORS - EPILOUGE . . . . . . . . . . .    7
;   6. COMPILER ERRORS. . . . . . . . . . . . . . . . . . . .    8
	SUBTTL	REVISION HISTORY

COMMENT	\

START OF VERSION 5.
122	RENAME MODULES & CLEAN UP.
167	Finish new error processing.
170	Add new keywords (&ERRLEVEL, &ERRNAME, &ERRMSG)
215	Implement FTSINGLE, single segment SITBOL
246	Change defintions of FMT.xx
253	ERROR SNOSSO SHOULD BE ABLE TO WORK (I.E. DON'T USE STACK WHEN YOU
	DON'T HAVE ANY.)
261	Make an error (compilation) pointer point to the error
	correctly on a listing file.
265	Change error 15's to something other that halts.
266	Put a JSP Z,ERRA in .JB41 so that we can see
	where the error ocuurs.
272	Fix a bad return after printing an error message with
	an argument (&ERRPARM).
304	Output the message for incompatible high-seg on EXITed program 
	right away with an OUTSTR.
\
	 SUBTTL	EXECUTION-TIME ERROR PROCESSING - PROLOGUE


	; Get Major and Minor error numbers and parameter

ERRA::	SUBI	Z,1		;[266] Correct addr is addr - 1.
	HRLZM	Z,ERRLOC##	;[266] STORE LOCATION WHERE ERROR WAS
	LDB	P1,[POINT 4,.JBUUO,12]
				; MAJOR ERROR TO P1
	HRRZ	P2,.JBUUO	; MINOR ERROR TO P2

	MOVE	S1,.JBUUO	; LOAD FLAGS
	TLNN	S1,ERRSFL!ERRPFL ; PARAMETERIZED ERROR?
	JRST	ERRB1		; NO

	TLNE	S1,ERRSFL	; PARAM ON STACK?
	JRST	ERRB		; YES - BRANCH AROUND
	PUSH	STACK,0(Q3)	; NO - PUSH DESCR
	PUSH	STACK,1(Q3)	; POINTED TO BY Q3

ERRB:	POP	STACK,ERRPRM+1	; POP STACK INTO
	POP	STACK,ERRPRM##	; &ERRPARM

ERRB1::	 ; PRODUCE COMPOUND ERROR NUMBER

	IMULI	P1,^D1000	; COMPOUND ERROR NUMBER = ...
	ADD	P1,P2		; MAJOR * 1000 + MINOR
ERRABS::	MOVEM	P1,$ERRTP##	; Store into &ERRTYPE
	CAIE	P1,^D6002		; ?SNOSSO?
	 JRST	ERRK		;  NO - SKIP THIS STUFF

	OUTSTR	[ASCIZ |
?STBSSO	System stack overflow.  This is normally caused by deeply
recursive function calls (high values of &FUNCLEVEL).  The /Sn switch
can provide more system stack.
|]

ERRBAD:	SETZM	$DUMP##		;[304] Can't dump,
	SETZM	LISTF##		; Can't even finish listing file.

	JRST	ETERM##		; LEAVE FOREVER.

ERRK:	CAIE	P1,^D15000	;[265] WAS THIS A BAD ERROR?
	 JRST	ERRJ			;[265] NOT EXTREMELY BAD.

	MOVX	Z,FMT.O!FMT.WM	;[265] CONVERT TO OCTAL
	MOVE	T2,ERRLOC	;[265] ..
	JSP	TLINK,CVTWD##	;[265] MAKE IT DATA
	HALT	.-1		;[265] MUST USE HALT IF BAD

	MOVE	Z,0(STACK)	;[265] JUST HALF A WORD
	SUBI	Z,6		;[265] ..
	MOVEM	Z,0(STACK)	;[265] ..

	JSP	SLINK,LINE	;[265] PRINT THE ERROR IMMEDIATLY
	XWD	XERRF##,3	;[265]
	XWD	SDT,[.CHLFD,,1]	;[265] LF
	XWD	SDT,EESYSE##	;[265] TEXT OF MESSAGE
	XWD	STACK,1		;[265] IT HAPPENED HERE

IFN FTDEBUG,<
	SKIPE	.JBDDT		;[265] IS DDT THERE?
	 JRST	@.JBDDT		;[265] YES - GO TO IT.
	>

	EXIT			;[265] LEAVE QUICKLY!

ERRJ:	CAIE	P1,^D12007	;[304] Is it an incompatible high seg?
	 JRST	ERRM		;[304] Go do rest
	OUTSTR	[ASCIZ |
?STBICS	Attempt was made to run a SAVEd low segment with an incompatible
high segment.  Recompilation of the source is required.
|]
	JRST	ERRBAD		;[304] End it all gracefully

ERRM:	MOVEM	P1,.JBERR	; Store for later use for STBERR

IFE FTSINGLE,	PUSH	STACK,[GETSG##]	;[215] FOR STBERR
	PUSH	STACK,[ERRRTN]		; WILL KNOW WHERE TO GO
IFE FTSINGLE,<		;[215]

	MOVEI	P1,400K+10	; THE DIRTY WAY

	MOVE	Z,[SIXBIT/STBERR/]	; SEGMENT SPEC
	JRST	GETSG			; DO THE GETSEG
>;[215] End of IFE FTSINGLE
IFN FTSINGLE,	JRST	STBERR##	;[215] Process the error


	; This is the return from the STBERR module.  The error name
	; and error message are on the stack.

ERRRTN:	PORTAL	.+1		; Entry point

	POP	STACK,T2	; Get &ERRNAME word
	MOVX	Z,FMT.S!FMT.WM	;[246] Load format
	JSP	TLINK,CVTWD##	; Convert to ASCII
	 ERROR	15		;  ???

	POP	STACK,ERRNAM+1	; Put descriptor in &ERRNAME
	POP	STACK,ERRNAM##	; . . .

	MOVE	Z,0(STACK)	; Get length of string
	JSP	QLINK,ASBLOK##	; Allocate the string
	 ERROR	15		; Too long -- so error?

	POP	STACK,ERRMSG+1	; Pop descriptor into &ERRMSG
	POP	STACK,ERRMSG##	; . . .

	POP	STACK,Q2	; Get length of error message
	MOVEM	Q2,ERRMSG+1	; PUT LENGTH IN (BYTES)
	IDIVI	Q2,NBYTES	; Find no. of words
	SKIPE	Q3		; Extra?
	AOJ	Q2,		; YES, Increase the word count

	HRRZ	P1,ERRMSG	; PLACE IT CORRECTLY
	ADDI	P1,2

	MOVE	Z,STACK		; SET UP TO ..
	SUB	Z,Q2		; PLACE &ERRMSG IN ..
	AOJ	Z,		; PROPER PLACE
	HRL	Z,P1		; ..
	MOVS	Z,Z		; ..

	HRR	Q3,P1		; HOW FAR
	ADD	Q3,Q2		; TO GO
	SOJ	Q3,		; ...
	BLT	Z,(Q3)		; BLT IT UP.

	MOVE	Z,Q2		; GET RID
	HRL	Z,Z		; OF WHATS
	SUB	STACK,Z		; ON THE STACK

	MOVE	P1,$ERRTP##	; Get back the compsite error no.
	IDIVI	P1,^D1000	;GET MAJOR BACK TO P1
	CAIN	P1,6		;MEMORY TYPE ERROR?
	JRST	ERRC		; YES, TOO BAD

	 ; ENTRY POINT FROM &ERRTYPE ASSIGNMENT

ERRTPA::SKIPE	$ERRTP##+1	; CHECK FOR &ERRTYPE BEING TRACED
	JSP	SLINK,ETPTRC##	; YES - GO TRACE IT

	SOSGE	$ERRLM##		; DECREMENT AND TEST &ERRLIMIT
	JRST	ERRC		; JUMP IF IT WAS 0

	SKIPN	S1,SET.LB##	; LOAD AND TEST SETEXIT LABEL
	JRST	IFAIL##		; NOT GIVEN - JUST FAIL

	 ; TOSS OUT PREVIOUS ERROR INFO (AT THIS LEVEL)

	SKIPL	PUSHTP##	; ERROR UNIVERSE?
	JRST	ERRSAV		; NO
	 ; 
	MOVE	STACK,GROUND##	; CROUCH LOW TO GROUND
	POPSA	I		; ZAP OUT OLD ERROR UNIVERSE

ERRSAV:	 ;
	CLEARM	SET.LB		; RESET THE LABEL
	PUSHSA	I		; SAVE THE INTERPRETER STATE
	MOVEM	STACK,GROUND##	; ESTABLISH NEW GROUND LEVEL
	SETOM	PUSHTP##	; SET TYPE OF PUSH

	HRLI	S1,VAR		; MAKE A VARIABLE ...
	PUSH	STACK,S1	; OUT OF THE VARIABLE BLOCK ...
	PUSH	STACK,[0]	; ADDRESS

	JRST	GOTO##		; GO TO GOTO HANDLER IN INTERPRETER
	SUBTTL	SETEXIT AND RECOVERY LABELS

	 ; SETEXIT(NAME) SETS THE LOCATION SET.LB WITH THE
	 ; ADDRESS OF THE VARIABLE BLOCK INDICATED BY NAME
	 ; (OR 0 IF ARG IS NULL STRING). THE RETURNED VALUE
	 ; IS RECONSTRUCTED FROM SET.LB

	 ; IF ARG IS NULL, JUMP DIRECTLY TO STXT1

STXT::	MOVE	S2,NULLST##	; LOAD NULL STRING TOP
	CLEAR	S1,		; S1 WILL HOLD RESULT
	CAMN	S2,-1(STACK)	; GO ON IF ARG NOT NULL
	JRST	STXT1		; JUMP IF NULL

	 ; COMPUTE VB ADDRESS

	JSP	TLINK,CVTNAM##	; EASIEST WAY IS TO ...
	ERROR.	1,94		; CONVERT TO NAME
	SKIPE	0(STACK)	; IS THE VARIABLE NATURAL?
	ERROR.	1,94		; NO - BAD ARG

	HRRZ	S1,-1(STACK)	; LOAD VB ADDRESS

	 ; MERGE HERE FROM NULL STRING CASE

STXT1:	EXCH	S1,SET.LB	; EXCHANGE OLD AND NEW

	MOVEM	S2,-1(STACK)	; TENTATIVELY RETURN NULL STRING
	JUMPE	S1,1(PLINK)	; OK IF S1 IS 0

	HRLI	S1,NDT		; OTHERWISE ...
	MOVEM	S1,-1(STACK)	; RETURN A ...
	JRST	1(PLINK)	; NAME


	 ; RECOVERY LABELS

ABORT::	JSP	SLINK,UNROLL	; RECOVER PROPER LEVEL
	MOVE	P2,ILABEL##	; GET OLD
	ADD	P2,ILABEL##+1	; STATEMENT
	HLRZ	S1,CSTNO(P2)	; NUMBER
	MOVEM	S1,$STNO##	; AND STORE INTO &STNO
	JRST	ERRC		; AND GO PRINT MESSAGE


CONTIN::JSP	SLINK,UNROLL	; RECOVER PROPER LEVEL
	JRST	IFAIL		; AND FAIL

REPEAT::JSP	SLINK,UNROLL	; SEEK PROPER LEVEL

	MOVE	Z,[ILABEL##,,ILOC##]; TRANSFER OLD
	BLT	Z,ILOC##+1	; LABEL

	JRST	IBEGIN##	; AND LEAP TO IT


	 ; COMMON ROUTINE

UNROLL:	SKIPN	S2,PUSHTP##	; LOAD PUSH TYPE AND TEST FOR 0
	ERROR	8,3		;	0 - COULDN'T FIND A PREVIOUS ERROR

	MOVE	STACK,GROUND##	; CROUCH LOW TO GROUND
	POPSA	I		; ZAP - RETURN TO PREVIOUS UNIVERSE
	SOS	$FNCLV##		; DROP LEVEL 1
	JUMPG	S2,UNROLL	; IF POSITIVE - WRONG UNIVERSE

	AOS	$FNCLV##	; NEG. UNIVERSES DON'T COUNT
	JRST	0(SLINK)	; RESTORATION COMPLETE, RETURN
	SUBTTL	EXECUTION-TIME ERRORS - EPILOUGE

	 ; HERE TO PRINT THE ERROR MESSAGE

ERRC::	MOVN	P1,$ERRTP##	; SET P1 FOR ABSERR EXIT
	SKIPE	IN.ERR##		; HAVE WE BEEN HERE BEFORE?
	JRST	ABSERR##	; YES, BYPASS TERM ROUTINE
	SETOM	IN.ERR		; NO - PREVENT RE-ENTRY

	JSP	QLINK,MSTIME##	; RECORD ...
	MOVEM	Z,TIME.E##	; ENDING TIME

	SKIPN	TIME.C##	; DID WE FINSH COMPILE?
	MOVEM	Z,TIME.C##	; USE THIS

	MOVE	P1,$ERRTP	; Get the &ERRTYPE back.
	IDIVI	P1,^D1000	; Minor in P2, Major in P1
	SKIPN	P1		; If P1 is 0 then ...
	EXCH	P1,P2		; We really didn't want to divide

	SKPINC	0		; Free up
	JFCL			; ^O Shut off

	MOVE	Z,$ERRLV##	; Get the error level
	JUMPN	Z,ERROUT	; If already set go print as it is set.


	MOVEI	Z,1	; Has to have at least the PREFIX
	GTMSG.	Q1	; The rest?
	TXNE	Q1,JW.WFL	; ..
	AOJ	Z,	; Yes, add one to make it 2.


ERROUT:	MOVE	STACK,STBASE##	; Ensure enough stack

	PUSH	STACK,ERRNAM##	; Get the &ERRNAME
	PUSH	STACK,ERRNAM+1	;  for use in the line subroutine.

	MOVEM	Z,IGNOP##		; Save Z
	JSP	SLINK,LINE##	; Use LINE to print out this line:
	XWD	XERRF##,^D7	; ...
	XWD	SDT,[.CHLFD,,1]	; (New line)
	XWD	SDT,["?",,1]	; '?'
	XWD	STACK,1		; &ERRNAME
	XWD	SDT,EERR01##	; 'IN STATEMENT'
	XWD	IDT,$STNO##	; Statement no.
	XWD	SDT,EERR02##	; 'AT LEVEL'
	XWD	IDT,$FNCLV	; Function level
	MOVE	Z,IGNOP		; Get Z back.

	CAIE	Z,2		; Do we want the rest of it?
	JRST	ETERM##		; Don't do it.

	MOVE	STACK,STBASE##	; ENSURE ENOUGH STACK
	PUSH	STACK,ERRMSG	; Get the &ERRMSG
	PUSH	STACK,ERRMSG+1	;  for use in the line subroutine.

	JSP	SLINK,LINE##	; Print out the error message text
	XWD	XERRF##,1	; . . .
	XWD	STACK,1		; . . .

	MXSYSE==^D14		; Maximum system error

ERRZ:	CAIG	P1,MXSYSE	; If P1 is greater than any system error
	CAIG	P1,0		; or non positive
	MOVEI	P1,MXSYSE+1	; Then it must be a user error

ERRD1:	CAIE	P1,1		; Is it a number one error?
	JRST	ERRD8		; Nope, see if it could be another.

	MOVEI	Q2,ERRPRM	; Form ..
	JSP	SLINK,IMAGE##	; an image of the evil part.

ERRD1A:	JSP	SLINK,LINE	; Print out the line:
	XWD	XERRF##,^D6	; onto the error file.
	XWD	SDT,S.BL##	; BLANK
	XWD	SDT,S.BL	; BLANK
	XWD	SDT,["(",,1]
	XWD	STACK,1
	XWD	SDT,[")",,1]
	XWD	SDT,[.CHLFD,,1]

	JRST	ETERM		; Terminate.

ERRD8:	CAIE	P1,^D8		; Is it an 8?
	JRST	ERRD9		; Nope, see about others

	CAIE	P2,2		; All we want is 8.002.
	JRST	ERRD9		; Go away.

ERRD8A:	PUSH	STACK,ERRPRM	; Give the &ERRPRM
	PUSH	STACK,ERRPRM+1	; ..

	JRST	ERRD1A		; Join the others.

ERRD9:	CAIN	P1,^D9		; Are we interested?
	CAIE	P2,3		;  in these types of errors?
	 JRST	[	JSP	SLINK,LINE##
			XWD	XERRF##,1
			XWD	SDT,[.CHLFD,,1]
			JRST	ETERM]
	  JRST	ERRD8A		; Do it the way the others do.
	SUBTTL	COMPILER ERRORS

	 ; CERROR -
	 ; CALLING SEQUENCE:
	 ;	LOAD Z WITH ERROR CODE
	 ;	JSP	SLINK,CERROR

CERROR::MOVEM	Z,CERARG##	; SAVE ARGUMENT
	MOVEM	SLINK,CERLNK##	; SAVE RETURN
	MOVE	Z,[11,,1]	; LOAD DEFAULT PREFIX
	MOVEM	Z,PREFIX##	; STORE AS PREFIX

	MOVE	S2,CERRF##	; IF COMPILER ERRORS GO ON A ...
	CAMN	S2,LISTF##	; DIFFERENT FILE AS THE LISTING ...
	SKIPGE	LISTF##+1		; OR IF LISTING IS OFF THEN ...
	SKIPA			; SKIP TO PRINT THE SUBJECT
	JRST	CERR.1		; ELSE JUMP AROUND

	PUSH	STACK,LSUBJ##	; PUSH THE ...
	PUSH	STACK,LSUBJ+1	; OFFENDING STRING
	JSP	SLINK,LINE	; AND PRINT IT
	XWD	CERRF##,2		; ON THE ERROR FILE
	XWD	SDT,PREFIX	; PRECEDED BY A TAB (OR WHATEVER)
	XWD	STACK,1		; (OFFENDING STRING)

	 ; PREPARE THE POINTER TO THE ERROR

CERR.1:	HRRZ	S3,LSUBJ+1	; GET LENGTH OF LSUBJECT
	SUB	S3,CURSOR##	; SUBTRACT CURSOR
	JUMPE	S3,CERR2	; JUMP IN NULL STRING
	SUBI	S3,1		; DEDUCT ONE TO POINT AT END OF ELEMENT

	PUSH	STACK,LSUBJ	; GET
	PUSH	STACK,LSUBJ+1	; POINTER
	JSP	QLINK,CVTPTR##	; TO THE LISTING
	0			; SUBJECT
	ERROR	15		; (NULL STRING?)

	CLEAR	S2,		; RESULTANT POINTER POS.

CERR4:	ILDB	Q3,Z		; GET NEXT CHAR.
	CAIE	Q3,11		; TAB?
	AOJA	S2,CERR3	; NO, JUST ADD ONE

	ADDI	S2,10		; YES, NEXT HIGHER
	ANDI	S2,777770	; OCTAL POSITION

CERR3:	SOJG	S3,CERR4	; LOOP ON PREFIX COUNT
	MOVE	S3,S2		; S3 HOLDS CURSOR POSITION

CERR2:	MOVE	Z,S3		; LOAD ARG. FOR DUPL
	PUSH	STACK,$ALPHA##	; PUSH ON DESCRIPTOR ...
	PUSH	STACK,[" ",,1]	; FOR BLANK
	JSP	TLINK,DUPLI##	; PREPARE POINTER PREFIX
	ERROR	11,13		; EXCEEDED &MAXLNGTH

	JSP	SLINK,LINE.##	; PREPARE A LINE WITHOUT PRINTING
	XWD	0,3		; 3 ARGUMENTS
	XWD	SDT,PREFIX	; THE PREFIX
	XWD	STACK,1		; THE BLANKS
	XWD	SDT,["^",,1]	; A MARK

	SETO	T1,		;[261] TELL CERR.W SOMETHING
	JSP	SLINK,CERR.W	; AND WRITE IT OUT

	 ; PREPARE THE MESSAGE

	PUSH	STACK,SYSTR##	; ARG IS AN ADDRESS INTO ...
	MOVE	S2,CERARG	; THE SYSTEM ...
	PUSH	STACK,0(S2)	; STRING BLOK

	JSP	SLINK,LINE.	; PREPARE THE STRING
	XWD	0,3		; ENCLOSED
	XWD	SDT,CE.PRE##	; IN STARS
	XWD	STACK,1		;
	XWD	SDT,CE.PRE##

	SETZ	T1,		;[261] FLAG PRINTOUT
	JSP	SLINK,CERR.W	; WRITE IT OUT

	JRST	@CERLNK		; AND RETURN
	 ; A LITTLE SUBROUTINE TO WRITE THE STRING AT THE TOP OF THE 
	 ; STACK ONTO CERRF AND POSSIBLY LISTF##

CERR.W:	MOVE	Z,LISTF		; IF THE LISTING FILE ...
	CAMN	Z,CERRF##		; DIFFERS FROM THE ERROR FILE
	JRST	CERRW1		; AVOID THIS BRANCH

	 ; WRITE STRING ON LISTF

	PUSH	STACK,-1(STACK)	; DUPLICATE THE 
	PUSH	STACK,-1(STACK)	; VALUE ON THE STACK

	JUMPE	T1,CERRW0	;[261] AVOID THIS IF NECESSARY.
	 HRRZ	T1,0(STACK)	;[261] CHANGE THE
	SUBI	T1,1		;[261] LENGTH OF THIS
	HRLI	T1,1		;[261] STRING
	MOVEM	T1,0(STACK)	;[261] THIS IS THE NEW STRING.

CERRW0:	MOVE	T2,LISTF	; LOAD THE ...
	MOVE	T3,LISTF+1	; FILE DESCRIPTOR
	JSP	TLINK,WRITE##	; WRITE OUT THE MESSAGE
	ERROR	12,5		; INCORRECTABLE OUTPUT ERROR

	 ; WRITE STRING ON CERRF

CERRW1:	MOVE	T2,CERRF	; LOAD THE ...
	MOVE	T3,CERRF+1	; FILE DESCRIPTOR
	JSP	TLINK,WRITE##	; WRITE IT OUT
	ERROR	12,5		; INCORRECTABLE OUTPUT ERROR

	JRST	0(SLINK)	; AND RETURN

	END

  