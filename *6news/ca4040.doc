


 







                             CA4040

                       BSO CROSS ASSEMBLER
                     (WITH CROSS REFERENCE)
J.SKIP
                               FOR

                  4040/4004 MICROPROCESSORS BY

                              INTEL
                     NATIONAL SEMICONDUCTOR
                  (and all compatible devices)

                               on

                         TYMSHARE, INC.




          This User's Manual is intended to  provide  a
          thorough  product description.  It is, to the
          best of our knowledge, complete and accurate.

          The Boston Systems Office does not,  however,
          warrant this document's accuracy nor shall it
          be held responsible for errors of content  or
          omission.  The Boston Systems Office reserves
          the right to  update  this  document  without
          prior notification.





         Copyright, THE BOSTON SYSTEMS OFFICE, INC. 1975
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800





                        Updated 11-Oct-78
                                                           Page 2


                       GENERAL INFORMATION

This cross  assembler,  one  of  a  family  of  cross  assemblers
produced  by The Boston Systems Office, is a powerful programming
tool used to develop microprocessor software.  It allows the user
to  take  full  advantage  of  a  larger  computer,  whether in a
time-sharing or in-house mode, thereby significantly reducing the
number of man-hours spent in program development.  The advantages
of a larger computer include:

          .Faster processing speeds
          .More powerful editors
          .Higher speed peripherals

These cross assemblers are written in the  assembly  language  of
the  host  computer.   They  require  only  8K words of memory to
assemble practically any size program.  The symbol table  can  be
expanded  to  fit  any  program  or  can  be shrunk to fit into a
smaller machine if required.  The assemblers  require  much  less
CPU  time  to  execute,  even at this reduced memory requirement,
when  compared  to  manufacturer   supplied   cross   assemblers.
Benchmarks   against   competitive  products  in  a  time-sharing
environment have shown that  savings  of  over  50%  are  common.
Similar   efficiencies   are  realized  when  using  an  in-house
computer.

The instruction set of  each  cross  assembler  is  the  same  as
documented   in   the  manuals  supplied  by  the  microprocessor
manufacturer.  Mnemonics  exist  for  data  manipulation,  binary
arithmetic,  jumps  to subroutines, etc.  In addition, all of the
BSO cross assemblers have full  macro  and  conditional  assembly
capabilities.   The  assembler outputs to disk, which may then be
punched on paper tape, loaded into a PROM  burner  or  down  line
loaded into memory, depending on your facilities.
                                                           Page 3


     Cross  assemblers  are  now  available  for  the   following
microprocessors:

AMD AM9080A, AM8085A            Motorola M6800 & M3870
    & AM8048A                   Nat'l Semiconductor 8080, 4004,
AMI S2000, S6800, S6801,                            IMP-8, IMP-16C,
    S6802 & S9900                                   IMP-16L, PACE,
Fairchild F8, 6800, 6802,                           SC/MP & INS8900
          9440 & 3870           NEC uPD8080AF, uPD8080A, uPDZ80,
Fujitsu 6800, 6802 & 8048           uPD8048, uPD8035 & uPD8041
Hitachi 6800 & 6802             RCA CDP 1800 series (COSMAC),
Hughes 1802 & 1804                  8048 & 8085
Intel 8080, 8080A, 8085,        Rockwell PPS-4, PPS-8 & R6500
      8085A, 4040, 4004,        Signetics 8035 & 8048
      8008, 8021, 8022,         Synertek 6500 series
      8035, 8039, 8041,         Texas Instruments TI TMS1000, 8080,
      8048, 8748 & 8049                           9900 & 9985
Intersil 6100 & 8048            Thomson-CSF 6800
MOS Technology 6500 series      Zilog Z80
Mostek F8 & Z80

The  Boston  Systems  Office  is constantly expanding its product
line.  BSO will also  produce  custom  assemblers,  other  system
software  and  applications  for  microprocessors  on  a contract
basis.  For further information on any microprocessor not  listed
above or on other related services, call (617) 894-7800.
                                                           Page 4


                        TABLE OF CONTENTS



SECTION                                                   PAGE

   1.0    Operating Instructions                             5

   2.0    Printing & Punching Output Files                   6

   3.0    Source Program Preparation                         7

   4.0    Instruction Set                                    9

   5.0    Assembler Directives (Pseudo Ops)                 10

   6.0    Macro Statements                                  11

   7.0    Conditional Assembly                              13

   8.0    Object File Format                                14

   9.0    Error Handling                                    15

  10.0    Summary Of Differences                            16

  11.0    Sample Terminal Session                           17





APPENDICES:

  I.      USER PROBLEM AND SUGGESTION REPORT

  II.     DO YOU LIKE THIS MANUAL? (User manual suggestion
          and correction report)
                                                           Page 5


     1.0 OPERATING INSTRUCTIONS         _________ ____________

To run the 4040 cross assembler, at the monitor level type:

     -R CA4040      _ ______

The assembler will respond with the following:

     4040/4004 Cross Assembler Version 1A(124)
     Copyright, The Boston Systems Office, Inc. 1975
     (617)894-7800
     Type /H for help
     *

At the asterisk, type:

     *PROG.OBJ,PROG.LST=PROG.SRC/(switch)      ___________________________________

PROG.OBJ and PROG.LST  are  the  object  and  listing  files  the
assembler  will  create  and PROG.SRC is the source program being
assembled.  If specific file name extensions are desired they may
be  entered.   If  extensions  are not entered the assembler will
default to .OBJ, .LST and .SRC for the object, listing and source
files  respectively.   If no extensions are desired, a period (.)
must follow the filenames.  The filenames PROG.OBJ, PROG.SRC  and
PROG.LST are used for example purposes only.  Any acceptable file
names and extensions  desired  may  be  used.   The  use  of  the
switches, detailed below, is optional.

If either the object or listing file is not desired,  it  may  be
omitted   from  the  specification,  as  the  following  examples
illustrate:

     *PROG.OBJ=PROG.SRC/(switch)       __________________________

     *,PROG.LST=PROG.SRC/(switch)       __________________________

Note that the comma is required when a listing  file  is  desired
but not an object file.

Switches now available:

     /B - BNPF object file output format

     /H - ignore the command string, type HELP file

     /P - indicate the start of pass 2 on the terminal 

     /N - do not print error messages on the terminal

     /S - do not produce a symbol table
                                                           Page 6


2.0 PRINTING AND PUNCHING OUTPUT FILES    ________ ___ ________ ______ _____

The listing file is in ASCII format and may be typed as follows:

     -TYPE PROG.LST          On your terminal      ____ ________

     -LIST TTY:=PROG.LST     On your terminal, page formatted      ____ _____________

The default object file format is an  ASCII  file  and  this  can
punched with the following command:

     -TYPE PROG.OBJ          On your terminal, if so equipped      ____ ________

Object and listing files may also be printed or punched  at  your
local Tymshare branch office;  contact your salesman for details.
                                                           Page 7


3.0 SOURCE PROGRAM PREPARATION    ______ _______ ___________

PROGRAM ENTRY

Source programs may be placed on the host computer disk either by
the  use of a text editor to build new programs, or by reading in
an existing file from paper tape, magtape, etc.  Once  a  program
resides on disk a text editor may be used to alter or correct the
file in preparation for assembly.  It is not necessary to  remove
line  numbers  from  a  file before assembly;  the assembler will
ignore them if they are present.


PROGRAM FORMAT

Each source statement consists of  strings  of  ASCII  characters
(fields)   terminated   by   a   carriage   return - line   feed.
Statements, or lines, of more  than  90  characters  will  appear
truncated  in  the  listing file but will be assembled correctly.
Lines beginning with a semicolon (;) will be treated as comments.
Blank  lines  and  lines with only a label field will generate no
code.  Any label on such a line will  be  assigned  to  the  next
available  address.   Each  source  statement  is made up of four
fields:  the label,  instruction,  operand  and  comment  fields,
which are defined below.

Label Field - A statement label consists of up to  6  characters,_____ _____
the  first  of which must be alphabetic and appear in column one.
The remaining characters may  be  alphabetic  or  numeric.   Each
label must terminate with a colon except for labels on the pseudo
ops MACRO, SET and EQU, which end with a blank or tab.   A  label
identifies  a  particular  location in the program and should not
duplicate another label  or  one  of  the  assembler's  permanent
symbols.   The  permanent  symbols include all of the instruction
mnemonics and pseudo ops.

The label field is optional except in statements with an EQU, SET
or MACRO statement.

Instruction Field - The instruction field must contain either  an___________ _____
instruction  mnemonic,  a pseudo op or the name of a user defined
macro (i.e., a macro call).  The field must be separated from the
preceding  label  field  by at least one space or tab and may not
start in column one.

Operand Field - The operand field, if required,  may  consist  of_______ _____
constants,  statement  labels,  the  instruction  counter  ($) or
labels SET or EQUated to values.  These elements may be  combined
into  expressions  with  arithmetic  and  logical  operators,  as
described  below.   This  field  must  be  separated   from   the
instruction field by at least one space or tab.

Comment Field - This field is optional;  it will  appear  on  the_______ _____
assembly  listing  but  will  be  ignored  by the assembler.  The
comment field must begin with a semicolon (;).
                                                           Page 8


EXPRESSIONS

Expressions can be  made  up  of  user  symbols,  numbers,  ASCII
constants,  statement  labels  and assembler reserved symbols for
the registers and instruction counter.  These may be combined  by
the  various  operators  and  contained  by  parentheses  to form
complex  expressions.   The  expression  handling  and  operators
available are a function of the assembler.  Many of the operators
have no simple implementation on the 4040 microprocessor.

Symbols - Any alphanumeric  symbol  which  has  been  used  as  a_______
statement  label  or  set or equated to a value may be used in an
expression.  In addition, the instruction  counter  ($)  and  the
register  symbols  (A,  B,  C,  D, E, H, L, M, SP and PSW) may be
used.

Numeric Constants - Numeric Constants may be specified as binary,_______ _________
octal,  decimal  or hexadecimal constants.  To do this the number
should be immediately followed by  a  constant  to  indicate  the
radix used, as shown in the examples below:

         B - binary          (e.g., 0101B)
         O or Q - octal      (e.g., 015O or 015Q)
         D - decimal         (e.g., 19D or 19)
         H - hexadecimal     (e.g., 0F8H)

Note that hex constants must always start with a decimal digit (0
if  necessary)  to  distinguish  them from user symbols.  Numbers
without any indication of radix  (no  trailing  letter)  will  be
treated as decimal numbers.

ASCII Constants - An ASCII constant is represented by a character_____ _________
string enclosed in apostrophes.  The assembler will right justify
the characters, 8 bits per character, with the parity  bit  (high
order bit) zero.  For example, 'AZ'.

Operators - The operators available for constructing  expressions_________
include both the unary and binary operators listed below:

   UNARY:    +         BINARY:   +         XOR       SHR
             -                   -         MOD       AND
             NOT                 *         SHL       OR
             NEG                 /

The last six of these and the NOT operator must be separated from
their operands by at least one space or tab.  Expressions will be
evaluated according to the  following  operator  precedence,  and
from left to right when of equal precedence:

   1)  parenthesized sub-expressions
   2)  unary - , NEG
   3)  *, /, MOD, SHL, SHR
   4)  +, -
   5)  NOT
   6)  AND
   7)  OR, XOR
                                                           Page 9


4.0 INSTRUCTION SET    ___________ ___

The following mnemonics represent the instruction set  common  to
both  the 4040 and the 4004 supported by this cross assembler.  A
detailed explanation of each may be obtained by referring to  the
microprocessor manufacturer's programming manual.


          ADD     JCN     RDM
          ADM     JIN     RDR
          BBL     JMS     RDn (n=0,1,2,3)
          CLB     JNC     SBM
          CLC     JNT     SRL
          CMA     JNZ     STC
          CMC     JT      SUB
          DAA     JUN     TCC
          DAC     JZ      TCS
          DCL     KBP     WMP
          FIM     LD      WPM
          FIN     LDM     WRM
          IAC     NOP     WRR
          INC     RAL     WRn (n=0,1,2,3)
          ISZ     RAR     XCH
          JC



         The following instructions are available only for 4040
         programs:

          AN6     DIN     OR5
          AN7     EIN     RPM
          BBS     HLT     SB0
          DB0     LCR     SB1
          DB1     OR4
                                                          Page 10


5.0 ASSEMBLER DIRECTIVES (PSEUDO OPS)    _________ __________ _______ ____

This cross assembler recognizes  the  following  pseudo  ops.   A
detailed  explanation of each may be obtained by referring to the
microprocessor manufacturer's programming manual and chapters 6.0
and 7.0 of this manual.


          BANK
          DB
          DS
          DW
          EJECT
          END
          ENDIF
          ENDM
          EQU
          IF
          MACRO
          ORG
          SET
          TITLE

                                                          Page 11


6.0 MACRO STATEMENTS    _____ __________

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by just writing the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

MNAME     MACRO   DUM1,DUM2,...
            .
            .
          ENDM

where MNAME is the name of the macro and DUM1,DUM2,...  are dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may be nested.  The macro body may contain  the
words MACRO or ENDM.  A macro may contain calls to other macros.

Macro calls are of the form:

LABEL:    MNAME   ARG1,ARG2,...

where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated as null
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 12


MACRO EXAMPLES


PAUSE     MACRO           ;WAIT 4 MACHINE CYCLES
          NOP
          NOP
          NOP
          NOP
          ENDM




;BUILD 4 CHARACTER TABLE ENTRIES
ENTRY     MACRO   Q,R,S,T,VALUE
          DB      'Q'
          DB      'R'
          DB      'S'
          DB      'T'
          DB      VALUE
          ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

WXYZ:     ENTRY   W,X,Y,Z,27


This would result in the following expansion:

          DB      'W'
          DB      'X'
          DB      'Y'
          DB      'Z'
          DB      27
                                                          Page 13


7.0 CONDITIONAL ASSEMBLY    ___________ ________

Portions of a program can be assembled or not depending upon  the
value  of  an  expression.  This is accomplished by preceding the
coonal section of code with a statement  containing  the  IF
pseudo  op  and  the  expression  to  be evaluated and ending the
section with the pseudo op ENDIF.  This is useful  for  producing
several versions of the same program from a single source file by
changing only one parameter.

The expression following the IF pseudo op will  be  evaluated  by
the assembler and the results compared to zero.  If the result is
not zero the code will be assembled.  If the result is zero,  all
the  code  up  to  the  corresponding ENDIF statement is ignored.
Conditional statements may be nested to any depth.




Example of a conditional section of code:


          IF      VER-1   ;DON'T ASSEMBLE FOR VERSION 1
HSIZE     EQU     6
          ENDIF
          IF      VER     ;DON'T ASSEMBLE FOR VERSION 0
HSIZE     EQU     8
          ENDIF
                                                          Page 14


8.0 OBJECT FILE FORMAT    ______ ____ ______

The object file produced by this cross assembler is an ASCII file
in Intel's Hexadecimal Program Tape format.  The record layout is
shown below:

          :         A colon for the record mark
          2 chars   Number of data bytes (0 for end of file)
          4 chars   Load address of first byte of record
          2 chars   Record type (always 00)
          2 chars   First data byte
          2 chars   For each additional data byte
          2 chars   Checksum

The checksum is the negative of the sum of all the 8-bit bytes in
the  record,  including  the  one  byte  count  and two byte load
address, with carries above 8 bits ignored.

A sample object file is shown in Section 11.0.

BNPF FORMAT____ ______

A BNPF object file format is also available for use in loaders or
PROM  burners  which do not accept hexadecimal tapes.  To specify
this format insert a /B immediately following the last file  name
in the specification.  For example:

          *PROG.OBJ,PROG.LST=PROG.SRC/B           ____________________________

The resulting object file will have four bytes per line, with the
address  of the first byte in decimal format at the left.  To get
to this format, the hexadecimal data bytes are first converted to
binary.   Then  each data byte will be preceded by a "B", the 0's
and  1's  in  the  byte  will  be  replaced  with  N's  and   P's
respectively  and  each  byte  will  be  followed by an "F".  For
example, a record which has the following hexadecimal format:

          :02008000AF5FEF where AF and 5F are data

these data bytes converted to binary would be:

                 10101111       01011111

and in BNPF format this becomes:

      00128     BPNPNPPPPF     BNPNPPPPPF

The BNPF loader will treat the address as a  comment  and  ignore
it.
                                                          Page 15


9.0 ERROR HANDLING    _____ ________

The cross assembler will  print  error  messages  at  the  user's
terminal  and  on  the  program  listing  if the listing file was
requested in the specification.  Errors are indicated by  one  or
more  characters  at  the  left of the listing line in which they
occured.  In all cases the assembler  will  attempt  to  generate
some  code  for  each  source line so addresses further on in the
program do not get out of phase.  This also allows for a location
into which a patch may be inserted if the object tape is used for
debugging, even with its errors.


ERROR CODES

A - Address error.  Address expression greater than  16  bits  or
    negative.

C - Constant error.  Indicates bad syntax in a character constant
    or and illegal character in a numeric constant (e.g., 79Q).

D - Macro definition error.   The  definition  is  ignored.   The
    error is caused by one of the following conditions:

    1.  The MACRO statement does not have a label

    2.  The MACRO statement has over ten arguments

    3.  The MACRO statement label is the  same  as  a  previously
        defined user symbol or pseudo-op.


E - Expression error.  Caused by one of the following conditions:

    1.  Incorrect syntax, a value of zero assumed

    2.  Numeric expression overflowed 16 bits, it is truncated


F - Format  error.   Incorrect  number  of   operands   for   the
    instruction.

L - Label error.  Caused by one of the following conditions:

    1.  A symbol defined during pass 2  was  not  defined  during
        pass 1.  The symbol is left undefined.

    2.  A SET or EQU pseudo-op was not preceded by a label


M - Multiple definition error.  The user is attempting to  define
    a  symbol  (with something other than DEFL) which was already
    defined.  The second definition is ignored.

N - Nesting error.  An ENDM  or  ENDIF  appeared  which  was  not
    paired  with  a  MACRO  or  IF  statement.   The statement is
    ignored.
                                                          Page 16


O - Op code error.  An unknown op code detected.  Three bytes  of
    zero generated.

P - Phase error.  A symbol has a different value in pass  2  than
    in pass 1.  The pass 1 value prevails.  This error is usually
    caused by one of the following conditions:

    1.  An IF statement had a different value during pass 2  than
        in pass 1.

    2.  A macro was called before it was defined.

Q - Questionable  syntax.   The  assembler  has   encountered   a
    statement  which  it  does  not completely understand, due to
    such things as surplus arguments, unrecognized instruction or
    null label.

R - Register error.  The register specified  is  illegal  for  an
    instruction.

S - Symbol error.  A macro name  was  used  as  a  symbol  in  an
    expression and is assumed to have a value of zero.

U - Undefined symbol.  A symbol was undefined and is  assumed  to
    have a value of zero.

V - Value  error.   Use  of  an  expression  too  large  for  the
    instruction field or one that is negative.
                                                          Page 17


10.0 SUMMARY OF DIFFERENCES     _______ __ ___________

This cross assembler is compatible with the one supplied for  the
4040 by Intel with a few exceptions.  These exceptions are listed
below:


     1.  User defined symbols (statement labels) may have  up  to
         six characters as opposed to five allowed by Intel.

     2.  Arguments  in  macro  expansions  are   substituted   as
         character   strings.   (Intel  evaluates  arguments  and
         substitutes values.) This allows macro arguments  to  be
         substituted into a label, instruction or operand field.

     3.  Local labels in macro definitions are not allowed.   All
         labels are globally defined.

     4.  Operand fields may not  contain  an  instruction  within
         parentheses, for example, LABEL:  DB (ADD C) .

                                                          Page 18


11.0 SAMPLE TERMINAL SESSION     ______ ________ _______

-TYPE CA4040.SRC ____ __________

;  INTEL 4004/4040 EXAMPLE
;
;       MULTI PRECISION BINARY ADDITION
;
        ORG 100H
;
ADDER:  FIM     4,0     ; POINT TO FIRST NUMBER
        FIM     6,10H   ; POINTER TO SECOND
        CLB             ; ZERO CARRY
        XCH     8       ; ZERO DIGIT COUNTER
;
ADD1:   SRC     4
        RDL             ; GET DIGIT
        SRC     6
        ADM             ; ADD DIGIT PLUS CARRY
        WRM             ; STORE ANSWER
        INC     5       ; INCREMENT POINTERS
        INC     6
        INC     7
        ISZ     8,ADD1  ; LOOP UNLESS 16 DIGITS DONE
;
DONE:   BBL     0
;
        END


-R CA4040 _ ______
4040/4004 Cross Assembler Version 1A(124)
Copyright, The Boston Systems Office, Inc. 1975
(617) 894-7800
Type /H for help
*CA4040.OBJ,CA4040.LST=CA4040.SRC ________________________________


No error(s) detected
Assembler runtime 00:00:00.21
Highest 4040/4004 address used = 0110 (hex)
                                                          Page 19


-TYPE CA4040.LST ____ __________


4040/4004 cross assembler Version 1A(24),
File DSK:CA4040.SRC  11:24:01 5-Dec-77  Page 1


Errors Addr  Obj Code  Seq  Source statement

                         1  ; INTEL 4004/4040 EXAMPLE
                         2  ;
                         3  ;      MULTI PRECISION BINARY ADDITION
                         4  ;
       0100              5         ORG 100H
                         6  ;
       0100  2400        7  ADDER: FIM 4,0    ;POINT TO FIRST NUMBER
       0102  2610        8         FIM 6,10H  ;POINTER TO SECOND
       0104  F0          9         CLB        ;ZERO CARRY
       0105  B8         10         XCH 8      ;ZERO DIGIT COUNTER
                        11  ;
       0106  25         12  ADD1:  SRC 4
       0107  E9         13         RDM        ;GET DIGIT
       0108  27         14         SRC 6
       0109  EB         15         ADM        ;ADD DIGIT PLUS CARRY
       010A  E0         16         WRM        ; STORE ANSWER
       010B  65         17         INC 5      ;INCREMENT POINTERS
       010C  66         18         INC 6
       010D  67         19         INC 7
       010E  7806       20         ISZ 8,ADD1 ;LOOP UNLESS 16 DIGITS DONE
                        21  ;
       0110  C0         22  DONE:  BBL 0
                        23  ;
       0111             24         END

No error(s) detected
Assembler runtime 00:00:00.21
Highest 4040/4004 address used = 0110 (hex)

4040/4004 cross assembler Version 1A(24),
File DSK:CA4040.SRC  11:24:01 5-Dec-77  Page 2


Symbol Table

ADD1   0106    ADDER        0100   DONE       0110    


-TYPE CA4040.OBJ ____ __________

 :1001000024002610F0B825E927EBE065666778063D
 :01011000C02E
 :00000000
 $



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office, Inc.
                        469 Moody Street
                  Waltham, Massachusetts  02154
                         (617) 894-7800



                    DO YOU LIKE THIS MANUAL??



BSO  is  constantly  working  to  improve  the  quality  of   our
documentation.   If  you have any constructive comments regarding
this or any BSO publication, we would appreciate it if you  would
take  a few moments to jot them down in the space below, and then
mail the form to us at 469 Moody Street,  Waltham,  Massachusetts
02154.  Our customers' comments are always appreciated!

Title of document:
-----------------------------------------------------------------
Date of document revision:
-----------------------------------------------------------------
Your name:                                  Today's date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------

Please rate this manual in the following categories with a number
between 0 (worst) and 5 (best):

Overall Readability: _________

Organization:        _________

Accuracy:            _________


Please  write  any  general  comments below.  If you require more
space, feel free to attach as many additional pages as you  wish.
Thanks for your help!
    @%f7