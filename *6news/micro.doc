


                            MICRO-SYMBOL




                                 by


                             Bill Weiher







Micro-symbol is a  micro computer assembler.  Designed  primarily for
the 8080, it can be used with several other microprocessors  with the
symbol  table load  option  (See Section  6).   Micro-symbol provides
macro and  conditional assembly facilities.   Output listings  can be
obtained with cross reference information.
MICRO-SYMBOL                                         January 26, 1978


Section                                                          Page
   Subsection


1          LANGUAGE ELEMENTS........................................1
   1.1        IDENTIFIERS...........................................1
   1.2        NUMBERS...............................................1
   1.3        TEXT STRINGS..........................................1
   1.4        COMMENTS..............................................2
   1.5        CURRENT LOCATION......................................2
   1.6        OPERATORS.............................................2
   1.7        BLANKS................................................2
2          ASSEMBLER FORMAT.........................................3
   2.1        LABELS................................................3
   2.2        REGISTER SPECIFICATION................................3
   2.3        EXPRESSIONS...........................................3
3          PSEUDO-OPS...............................................5
   3.1        ORG...................................................5
   3.2        PHASE.................................................5
   3.3        DEPHASE...............................................5
   3.4        END...................................................5
   3.5        EQU...................................................5
   3.6        SET...................................................6
   3.7        DB....................................................6
   3.8        DW....................................................6
   3.9        DS....................................................6
   3.10       PRINTX................................................7
   3.11       INCLUDE...............................................7
   3.12       BEGIN AND FINISH......................................7
   3.13       OPCODELOAD............................................7
   3.14       NOSYM.................................................8
   3.15       LISTING...............................................8
4          CONDITIONAL ASSEMBLY, REPEAT AND MACROS..................9
   4.1        CONDITIONAL ASSEMBLY..................................9
   4.2        ARITHMETIC CONDITIONALS...............................9
   4.3        TEXT CONDITIONALS....................................10
   4.4        CONDITIONAL ASSEMBLY EXAMPLES........................10
   4.5        REPEAT...............................................10
   4.6        MACROS...............................................10
   4.7        DEFINE...............................................11
   4.8        CONCATENATION........................................11
   4.9        GENERATED SYMBOLS....................................12
   4.10       CALLING MACROS.......................................12
   4.11       ARGUMENTS WITH SPECIAL CHARACTERS....................12
   4.12       NUMERIC ARGUMENTS AS STRINGS.........................13
5          FOR STATEMENT...........................................14
   5.1        FOR STATEMENTS.......................................14
   5.2        ARITHMETIC FOR STATEMENTS............................14
MICRO-SYMBOL                                         January 26, 1978


   5.3        STRING FOR STATEMENTS................................15
   5.4        CHARACTER FOR STATMENTS..............................15
6          OPERATION...............................................17
   6.1        DIRECT OPERATION.....................................17
   6.2        OPERATION WITH RPG...................................17
   6.3        LISTINGS.............................................17
   6.4        BINARY FILE FORMAT...................................18
   6.5        OTHER PROCESSORS.....................................19
7          ERRORS..................................................20
   7.1        SINGLE LETTER ERRORS.................................20
   7.2        UNDEFINED SYMBOLS....................................21
8          PROCESSORS..............................................22
   8.1        8080.................................................22
   8.2        8008.................................................22
   8.3        6500.................................................23
   8.4        6800.................................................24
   8.5        F8...................................................24
   8.6        COSMAC...............................................25
   8.7        Z80..................................................26
   8.8        Z80C.................................................26
MICRO-SYMBOL                                         January 26, 1978


                   SECTION 1 -- LANGUAGE ELEMENTS





1.1 IDENTIFIERS

Each identifier (label) starts with a letter and ends with  the first
character not a letter or number.  Identifiers may be of  any length.
Two identifiers are the same only if they are of the same  length and
all of  their characters are  the same.  The  only exception  is that
lower case letters are  treated exactly like the  corresponding upper
case letters.


1.2 NUMBERS

Micro-symbol accepts numbers in four radices.  The normal input radix
is decimal.  Any string of digits not preceded by one of  the special
characters  @, $,  or %  and not  immediately follwed  by one  of the
letters H, B, O, or Q.  is considered to be decimal.  Numbers  in the
other radices may be entered as followes:

    Octal numbers, precede with @ or follow with O or Q.

    Hexidecimal  numbers, precede  with $  or follow  with  H.  A
    hexidecimal number follwed  by H must  begin with a  digit as
    0A3H.  If it is preceded by a $, it need not, as $A3.

    Binary numbers, precede with % or follow with B.


1.3 TEXT STRINGS

Ascii text may be represented  by enclosing it in single  quotes (').
Only a single  character may be represented  in this way  except with
the DB pseuodop  (See section 3.7).  To  represent a single  quote in
a text  string, use  two single quotes  as 'AB''CD'  representing the
string AB'CD.









                                  1
MICRO-SYMBOL                                         January 26, 1978


1.4 COMMENTS

All  text  on a  line  following  a semi-colon  (;)  is  considered a
comment.  Comments may include any characters.


1.5 CURRENT LOCATION

The character dot (.) is  used to represent the current value  of the
location counter.


1.6 OPERATORS

The following operators are recognized:

    + * /

    - (both unary and binary)

    ! (logical or)

    & (logical and)

    AND OR NOT SHR SHL MOD XOR


1.7 BLANKS

Blanks  may  be  used  freely in  all  assembly  statements.  A blank
indicates the  end of  an identifier  and has  meaning inside  a text
string. In all  other places blanks are  not important. In  all cases
(except  in text  strings) multiple  blanks are  treated as  a single
blank.  The  following  all  have exactly  the  same  meaning  to the
assembler:
2+3    2 + 3     2    + 3













                                  2
MICRO-SYMBOL                                         January 26, 1978


                    SECTION 2 -- ASSEMBLER FORMAT





2.1 LABELS

A label  is an identifier  followed by  a colon (:)  and must  be the
first thing  on a line  (except for multiple  lables).    A  line may
have more than one label as:

LABEL1:LABEL2: LABEL3: MOV A,B


2.2 REGISTER SPECIFICATION

Registers may be specified by name. The names which will  be accepted
are dependent  on the microprocessor  being assembled for.  (I.E. for
the 8080 the  names A, B, C,  D, E, H, L,  SP, and PSW  are allowed.)
The specification which will be allowed for any given  operation code
is dependent on  that code.  Thus the  PUSH instruction will  allow a
specification of PSW put not SP while LXI will allow SP but  not PSW.
To use some other name for one of the registers, the new name must be
defined  to be  one of  the registers  with either  SET  (See section
3.6) or EQU (See section 3.5).  Thus
ZOT     EQU     A
        DCR ZOT

Is accepted but not

ZOT     EQU     7
        DCR ZOT



2.3 EXPRESSIONS

Expressions may be formed using the operators listed in  section 1.6.
The order of precedence is:

* / MOD SHR SHL
+ -
AND &
OR XOR !




                                  3
MICRO-SYMBOL                                         January 26, 1978


All of these operators operate on EXPRESSIONS or PRIMARY EXPRESSIONS.
The operators - (unary) and NOT operate only on  PRIMARY EXPRESSIONS.
A PRIMARY  EXPRESSION is  a symbol, number,  - or  NOT followed  by a
PRIMARY EXPRESSION, or an EXPRESSION enclosed in ()'s or {}'s.  There
are certain situations in  which a PRIMARY EXPRESSION is  allowed but
not an  EXPRESSION.  In  these cases,  an EXPRESSION  may be  used by
surrounding it  with ()'s or  {}'s.  The first  element of  a PRIMARY
EXPRESSION may  be an opcode.  this is the  only place an  opcode may
appear in an expression. The following is the BNF for EXPRESSIONS:

<EXPRESSION> ::= <BOOLEAN>
             ::= <EXPRESSION> <OR OPERATOR> <BOOLEAN>

<OR OPERATOR> ::= XOR | OR | !

<BOOLEAN> ::= <TERM>
          ::= <BOOLEAN> <AND OPERATOR> <TERM>

<AND OPERATOR> ::= AND | &

<TERM> ::= <FACTOR>
       ::= <TERM> <ADD OPERATOR> <FACTOR>

<ADD OPERATOR> ::= + | -

<FACTOR> ::= <PRIMARY>
         ::= <FACTOR> <MULT OPERATOR> <PRIMARY>

<MULT OPERATOR> ::= * | / | MOD | SHR | SHL

<PRIMARY> ::= - <PRIMARY>
          ::= NOT <PRIMARY>
          ::= <NUMBER>
          ::= <IDENTIFIER>
          ::= ( <OPCODE> )
          ::= ( <EXPRESSION> )
          ::= { <OPCODE> }
          ::= { <EXPRESSION> }











                                  4
MICRO-SYMBOL                                         January 26, 1978


                       SECTION 3 -- PSEUDO-OPS





3.1 ORG

This pseudo-op sets both the value of "." and the location into which
code is generated.  (See also sections 3.2  and 3.3).


3.2 PHASE

This pseudo-op changes the value of the location counter (.)  but not
the location where the assembled code will be placed.  Note  that the
location counter is used when a label is declared.  PHASE may be used
when code  is to be  loaded into  one spot in  memory and  then moved
somewhere else before execution.


3.3 DEPHASE

DEPHASE resets the value of the location counter to the location into
which assembled code is being placed.


3.4 END

End terminates  the assembly.  Any data in  the file  being assembled
after the end statement will be ignored. Only one program per file is
allowed.  End may be followed by an address. A special entry  will be
made in the binary  file indicating this address. Loaders  using this
binary file may then use this information to set a starting address.


3.5 EQU

EQU is used to give  a symbol a particular value. The  general format
is:

symbol EQU value


The symbol will be given the indicated value and may be used at other
points in the assembly. The EQU statement need not appear  before the
first use of the symbol being defined. A symbol which has  been given


                                  5
MICRO-SYMBOL                                         January 26, 1978


a value with either the EQU  pseudo-op or by use as a label,  may not
be  redefined. A  statement  which redefines  such a  symbol  will be
flagged as an error.


3.6 SET

SET behaves like EQU but will allow the symbol to be  redefined.  SET
is  most  commonly  used to  define  the  value of  a  flag  which is
originally  set  to  some  value  and  then  assigned  another  value
depending on some conditional assembly.


3.7 DB

DB  is  used  to  reserve  bytes  of  storage  filled  with  constant
information. DB may be  follwed by a string of  expressions seperated
by commas (,). Each  expression should represent one byte  except for
text strings. A text string appearing in a DB statement will generate
one byte of data for each character in the string. As an example:

        DB 1,'ABC',2,10
will generate the bytes (in HEX)
1 41 42 43 2 A   in consecutive core locations.


3.8 DW

DW is  used to reserve  words of storage  much as DB  reserves bytes.
The sixteen bit word will  be stored either with the high  order byte
first or  the low  order byte first  depending on  the microprocessor
being assembled for.


3.9 DS

DS  reserves bytes  of  storage without  placing data  in  them.  the
expression following the DS is the number of bytes to reserve.   DS n
is an abreviation for ORG .+n.










                                  6
MICRO-SYMBOL                                         January 26, 1978


3.10 PRINTX

PRINTX causes the line on which it appears to be printed on the users
terminal during the assembly. It may be useful for  printing comments
about the progress of the assembly as:
        PRINTX FINISHED SECTION 3

PRINTX is most useful with conditional assemblies and macros to print
error messages to warnings to the user if parameters are incorrect or
questionable.


3.11 INCLUDE

INCLUDE is followed by  a file name. It  causes the named file  to be
assembled at this point just as if it had been inserted into the text
of  the file  being  assembled. It  can  be ued  to  insert "library"
subroutines into an assembly. The file name may be followed by a list
of names enclosed in ()'s and seperated by ,'s.  The file  named will
be scanned until  a BEGIN with a  matching name is seen  (See section
3.12). Assembly will then be  performed until a FINISH with  the same
name is seen. At this point, if there are any names in the list which
have not been found, scanning is resumed to find another BEGIN with a
matching name.


3.12 BEGIN AND FINISH

BEGIN and FINISH are completely ignored by the assembler  except when
scanning  an  included  file  for which  a  list  of  names  has been
specified.  In this case, BEGIN must be the first non-blank  thing on
the line. Both BEGIN and FINISH should be followed by a  symbol which
will be checked against the list of symbols given to the INCLUDE.


3.13 OPCODELOAD

OPCODELOAD   forces  the   assembler  to   begin  assembly   for  the
microprocessor indicated. It is equivalent to including the assembler
name  in ()'s  on  the command  line (see  section  6.5).  OPCODELOAD
should  be the  first  statement in  the  program since  if  forces a
clearing of the symbol table.  An error message will be given  if any
symbol definitions appear before the OPCODELOAD statement.






                                  7
MICRO-SYMBOL                                         January 26, 1978


3.14 NOSYM

NOSYM supresses output  of the symbol table  to the "REL"  file. This
makes the "REL" file somewhat shorter and subsequent  loading faster.
NOSYM  should  not be  used  if the  symbol  table is  required  by a
symbolic debugger or the MAKDEF program.


3.15 LISTING

LISTING affects the format of the listing file (if any)  generated by
MICRO-SYMBOL.  The  arguments  which  follow  the  LISTING  pseudo-op
determine its effect.

OFF      No further listing will be done until listing is reenabled.

ON       Listing   is  reenabled   (if  a   listing  file   has  been
           established).

NOMACRO  Macros will no longer be expanded in the listing file.

MACRO    Expansion of macros will be resumed.

UNNESTED Listing of  text inserted  by an  INCLUDE statement  will be
           omitted. Only text from the "MAIN" or highest level source
           file will be listed.

NESTED   Reverses the effect of UNNESTED.

More than one option may be given on the same line as:
    LISTING UNNESTED NOMACRO


















                                  8
MICRO-SYMBOL                                         January 26, 1978


        SECTION 4 -- CONDITIONAL ASSEMBLY, REPEAT AND MACROS





4.1 CONDITIONAL ASSEMBLY

Statements or parts of  statements may be assembled dependent  on the
values of certain symbols or expressions. The format of a conditional
assembly is:
CONDITIONAL     EXPRESSION     <TEXT>

The text may contain any number of characters and may be  spread over
any number  of lines. The  characters < and  > may appear  inside the
text as long as they are "matched", i.e. there are the same number of
<'s and >'s. If the condition is "true" the text will be assembled as
if the CONDITIONAL,  EXPRESSION, <, and >  were not even  present. If
the condition is "false", the CONDITIONAL, EXPRESSION, <, TEXT, and >
will  be completely  ignored. A  conditional assembly  expression may
appear anywhere except in a comment, in a text string, or as  part of
a symbol (rather than in place of a symbol).

The condtionals allowed are in two catagories, arithmetic and text.


4.2 ARITHMETIC CONDITIONALS

The arithmetic condtionals  are IFE, IFN,  IFG, IFGE, IFL,  and IFLE.
the CONDTITIONAL  is followed  by any EXPRESSION.  The value  of this
expression is compared to 0 and the condition is "true"  as indicated
below:

CONDITIONAL     TRUE IF EXPRESSION IS

IFE             EQUAL TO 0
IFN             NOT EQUAL TO 0
IFG             GREATER THAN 0
IFGE            GREATER THAN OR EQUAL TO 0
IFL             LESS THAN 0
IFLE            LESS THAN OR EQUAL TO 0

The expression must be defined at the time it is seen. (I.E.  all the
symbols usethe expression  must be defined with SET, EQU,  or as
labels  in  the  part  of  the  program  preceding   the  conditional
assembly.)



                                  9
MICRO-SYMBOL                                         January 26, 1978


4.3 TEXT CONDITIONALS

Text conditionals are most  often used in conjunction with  macros to
test  to see  if  certain parameters  have been  specified.  The text
conditional  checks  to see  if  there are  any  non-blank characters
between the CONDITIONAL and the next <.

CONDITIONAL     TRUE IF
IFB             NO NON BLANK CHARACTERS FOUND
IFNB            ANY NON BLANK CHARACTERS FOUND


4.4 CONDITIONAL ASSEMBLY EXAMPLES

The first example  illustrates the use  of a conditional  assembly in
address generation.
               MVI B,3 IFN switch <+2> IFE switch <+4>

This line  generates either 5  or 6 as  the address depending  on the
value of switch.


4.5 REPEAT

REPEAT simply assembles a piece of text a number of times. The format
is:

        REPEAT PRIMARY EXPRESSION <TEXT>


As with conditional assembly  statements, the text may be  any number
of lines, and may include < and > as long as they are "matched".


4.6 MACROS

Macros are defined  using the DEFINE statement  and may be  called in
the same  places that  conditional assembly can  be used.  Macros may
have  arguments. The  arguments  given when  a macro  is  called, are
replaced in the body specified when the macro is defined, as strings.
Thus if the name of a symbol is used as the argument to a  macro, the
symbol name, not its value is used in the body of the macro.







                                 10
MICRO-SYMBOL                                         January 26, 1978


4.7 DEFINE

The general format of the define statement is:
        DEFINE name @character (arg1,arg2)
<text>

The name is the name by which the macro will be called. The character
after the @ is used in the macro body for concatenation  (see section
4.8).   If   concatination  is  not   used,  or  if   the  "standard"
concatenation character (#) is accepatable, this may be  omitted.  As
with conditional assembly, text may be of any length. If  the strings
given for arg1, arg2, etc. are seen in the text they will be replaced
by the  arguments given at  the time the  macro is  called. Arguments
will be  recognized in the  text body anywhere  they are not  part of
some other identifier (i.e.  the characters preceeding  and following
are  not  letters or  numbers).  This means  that  arguments  will be
recognized in text  strings if they meet  the above criteria.  If the
macro being defined has no arguments, the ()'s may also be omitted.


4.8 CONCATENATION

In order to  have an argument recognized  inside the body of  a macro
when it is preceded  or followed by a  letter or number (as  inside a
text string), the concatenation character is used.  This character is
normally #,  but may be  changed by the  use of the  @ in  the DEFINE
statement. In the body  of the macro, if the  concatenation character
is  found immediately  preceded  or followed  by an  argument  of the
macro, it will not be included in the macro body. For example:
        DEFINE MACRO (A)
<       DB 'A#SETS'>

        DEFINE MACRO2 (A)
<       DB '# A B'>

In  the first  case, the  DB statement  will not  contain the  # when
expanded because an arument of  the macro precedes it. In  the second
case, the # will appear in the DB statement because there is  a space
between the # and the argument.










                                 11
MICRO-SYMBOL                                         January 26, 1978


4.9 GENERATED SYMBOLS

If the name  of an argument (where  it appears in ()'s  following the
DEFINE) is preceded with % and no argument is supplied when the macro
is called, the assembler will  generate a symbol to be used  for this
argument. This is especially  useful for generating labels  in macros
as followes:
        DEFINE DDADD(COUNT,%LABEL)
<       MVI A,COUNT
LABEL:  DAD H
        DCR A
        JNZ LABEL
>

This macro may be used in several places without a conflict in labels
because the assembler will generate a new label each time.


4.10 CALLING MACROS

A macro with no arguments may  be called simply be using its  name in
the code to be assembled as:
        DEFINE PLUS <+>

        DB 1 PLUS 2

A macro  with arguments may  have the arguments  enclosed by  ()'s or
not.  In any  case, if  there  is more  than one  argument,  they are
seperated by commas. If the  aruments are enclosed in ()'s,  then the
end of the last argument will be the character before the ).  If they
are not enclosed in  ()'s, the end of  the last argument will  be the
character before the next ; or  the end of the line. This  means that
some extra spaces may be included in the string for this arument.


4.11 ARGUMENTS WITH SPECIAL CHARACTERS

An arument to a macro which  is more than one line or  which contains
commas (or semicolons) may be  enclosed in <>'s. The <'s and  >'s are
counted and must match before the argument end is found. The <  and >
are not part of the string used in the macro expansion.








                                 12
MICRO-SYMBOL                                         January 26, 1978


4.12 NUMERIC ARGUMENTS AS STRINGS

When  the argument  to a  macro  is preceded  by \,  the  argument is
evaluated  and  converted the  a  string of  digits  representing the
number the  argument evaluated to.  This string is  then used  in the
macro expansion rather than the original string. This feature  can be
used  in generating  symbols  through concatenation  where  the macro
argument  is  a symbol  whose  value is  to  be used  for  the symbol
generation.   The  expression  following  the  \  must  be  a PRIMARY
EXPRESSION.







































                                 13
MICRO-SYMBOL                                         January 26, 1978


                     SECTION 5 -- FOR STATEMENT





5.1 FOR STATEMENTS

The FOR statement is used to perform a set of statements a  number of
times, possibly with varying arguments. Its forms may be  used simply
to repeat a set of  statements a number of times, to  generate tables
for a range of numeric  arguments, or to analyze strings  or generate
code with a variety of string substitutions. There are three types of
FOR statements, arithmetic, string, and character.


5.2 ARITHMETIC FOR STATEMENTS

The general form of the arithmetic for statemnt is
        FOR @character argument_start,end,increment
        <text>

Start, end, and increment  must all be PRIMARY EXPRESSIONS.   The FOR
statemnt acts much like a macro. The text is treated like the text in
a  define  statement  with  the  specified  arument  being  the macro
argument. The  character following  the @  is used  for concatenation
just as in a macro.  If the @character is omitted, then  the standard
character (#) is used.  The for statement not only acts like  a macro
DEFINE but also like  the call of the  macro so defined. In  fact the
macro is called a number  of times determined by the start,  end, and
increment specified. The argument is assigned the start value and the
text  expanded,  then  the  argument  value  is  incremented  by  the
increment  and the  text expanded  again.  This  continues  until the
value of the argument is  greater than then end value (less  than the
end value if  the increment is negative).  Note that no  expansion of
the text  will be done  if the  start value is  greater (or  less for
negative increment) than  the end value.  When the text  is expanded,
the argument  is replaced  by the  character string  representing the
decimal value of the argument  (i.e. 1, 10, 105, etc.). This  is done
so that the  argument may be used  directly in concatenation  for the
generation of  symbol names.  The increment may  be omitted  in which
case it  will be assumed  to be  one.  To generate  an array  of word
pointers to ZOT, ZOT+1, ZOT+4, ZOT+9, etc. for a total of 10 pointers
(each is zot+  the square of its  index in the array),  the following
FOR statement could be used:




                                 14
MICRO-SYMBOL                                         January 26, 1978



ARRAY:  FOR IXXQ_0,9
<       DW ZOT+(IXXQ*IXXQ)
>


5.3 STRING FOR STATEMENTS

The form for the string for statement is:
        FOR @character arg1,arg2 IN <str1,str2,str3,...,strn>
        <text>

The text is expanded with  arg1 given the value str1, then  with arg1
given the  value str2, etc.  until the final  expansion is  with arg1
given the value strn. On  each expansion, arg2 is given the  value of
the  remainder   of  the   string  (i.e.   on  the   first  expansion
str2,st3,...,strn and  on the  last expansion  the null  string.) The
comma and arg2 are optional and may be omitted. The following example
uses the string for to define a set of byte locations for variables:
        FOR IXXQ,Y IN <VAR1,VAR2,RZ,FOO>
<IXXQ:  DS 1
>
In this expansion, IXXQ and Y are given the following values:
EXPANSION NUMBER        IXXQ    Y
        1               VAR1    VAR2,RZ,FOO
        2               VAR2    RZ,FOO
        3               RZ      FOO
        4               FOO     <null string>


5.4 CHARACTER FOR STATMENTS

The form for the character for statement is:
        FOR @character arg1,arg2 INCHR <string>
        <text>

The text is expanded with arg1 given the value of the first character
of the string, then expanded given the value of the  second character
of the string, etc. As with the string version of the  FOR statement,
arg2 is optional. If present  it is given the value of  the remainder
of the  string. The following  example generates a  set of  tests and
branches:







                                 15
MICRO-SYMBOL                                         January 26, 1978


        FOR IXXQ INCHR <SZBC>
<       CPI 'IXXQ'
        JZ DSP#IXXQ
>

TThis generates:
        CPI 'S'
        JZ DSPS
        CPI 'Z'
        JZ DSPZ
        CPI 'B'
        JZ DSPB
        CPI 'C'
        JZ DSPC



































                                 16
MICRO-SYMBOL                                         January 26, 1978


                       SECTION 6 -- OPERATION





6.1 DIRECT OPERATION

MICRO-SYMBOL accepts the standard PDP-10 processor format. (i.e.

binary,listing_source

Standard extensions are .REL  for binary, .LST for listing,  and .MIC
for source. Switches  allowed for listing  are C for  cross reference
and O which forces one pass assembly (see section 3.15). Switches for
the source file  are used to  specify other processors.  (see section
6.5).


6.2 OPERATION WITH RPG

To operate MICRO-SYMBOL with RPG, use the command

CTEST SETNONSTANDARD (WFW)MICRO

Afther  this has  been done  (olny once  per login  is  required) the
COMPILE command will compile any file with extension .MIC with MICRO-
SYMBOL. Listings, and cross references may be generated in  the usual
way.


6.3 LISTINGS

Normally,  MICRO-SYMBOL  operates as  a  one pass  assembler.  When a
listing is  requested, it  will operate  as a  two pass  assembler in
order  to be  able to  place  the correct  hex code  in  the assembly
listing. This should not cause  any effect in most code. Note  that a
doulbe forward reference (as
        MVI A,Z1
Z1      EQU Z2
Z2      EQU 3

will  work correctly  in one  pass  mode but  will be  flagged  as an
undefinece symbol in two pass  mode. A /O switch to the  listing file
will cause  the assembler  to operate  in one  pass mode  even though
doing an assembly listing. This  will cause incorrect hex code  to be
generated but is faster. This option might be useful  when generating


                                 17
MICRO-SYMBOL                                         January 26, 1978


cross reference listings where the hex is not important. A  /C switch
to  the  listing  file  will  generate  cross  reference  information
compatable with  the standard  PDP-10 CROSS  program. When  using the
assembler with RPG  the /LIST and /C switches will  operate normally.
To force one pass mode, follow the file name with (,,O).


6.4 BINARY FILE FORMAT

The binary  file produced  by the  assembler is  in text  format.  It
consists of load  groups each of which  starts with a  :.  Extraneous
characters (such as returns  and line feeds) may be  inserted between
code groups to make listings  of this file more readable. Once  the :
is found, the next byte is the number of bytes of data. Each  byte in
the binary file is represented as two characters of  "printable" hex.
That is each character is  0 to 9 or A  to F. The next two  bytes are
the origin at which the first  data byte of this load group is  to be
loaded. Other  data bytes  are loaded  at consecutive  locations. The
byte following this is the type code. A type code of 0 indicates data
bytes to be loaded (or possibly the end statement  information). Next
are the  data bytes.  Following the  last data  byte is  the checksum
byte. The sum of the checksum byte, the two origin bytes, and all the
data  bytes  should  be  0 modulo  256.   The  following  is  a brief
description of the load group:
:NNOOOOTTDDDDDD...DDCC

N is a count byte
O is an origin byte
T is a type code byte
D is a data byte
C is a checksum byte

A type code of 1 or 2  is used to indicate a symbol table  entry. The
data bytes are replaced by the  text of the symbol (in ASCII)  and no
checksum byte is present. The origin field indicates th value  of the
symbol. A 1 is used for a symbol which is defined and referenced, a 2
is used if the symbol  is defined but not referenced.  The  last load
group  has  a  count  of  0  and  indicates  the  end  of  the binary
information. If a stating address was given on the end preudo-op, its
value will be  in the origin  field and the  first data byte  will be
non-zero, otherwise the origin field will be FFFF and the  first data
byte 0. Note the checksum will not be correct for this code group.







                                 18
MICRO-SYMBOL                                         January 26, 1978


6.5 OTHER PROCESSORS

To  assemble  code  for  some  processor  other  than  the  8080, the
processor name should follow the source file name and be  enclosed in
()'s. A list of other  processors and the assembly names  is included
in the apendices. The processor  named will remain in effect  until a
new processor is named. For example:
COMPILE FOO1,FOO2(6800),FOO3,FOO4(8008),FOO5(8080)

would assemble FOO1 and FOO5 for the 8080, FOO2 and FOO3 for the 6800
and FOO4 for the 8008.






































                                 19
MICRO-SYMBOL                                         January 26, 1978


                         SECTION 7 -- ERRORS




Errors will be indicated with  a single character at the  left margin
of the listing. If more than  one error is dectected on a  line, more
than one letter will be printed. In any case, any line  containing an
error will be printed on the teletype. The following is a list of the
error letters and their meanings:


7.1 SINGLE LETTER ERRORS

A   Error in macro call, For statement or Define  statement.  The
    format  of  the  FOR  or DEFINE  is  in  error  (as  too many
    arguments  no  character  after  @,  etc.).  If  the  PRIMARY
    EXPRESSION after  a \  is undefined  or a  forward reference,
    this error will be produced.

C   Circular definition. A symbol  is defined in such a  way that
    it is defined in terms of itself as:
            A       EQU B
            B       EQU A

E   Expression error.  The evaluation of  this expression  is not
    possible. The  most probable cause  is two operators  with no
    interveaning operand as A+*B.

M   Multiple definition. A symbol defined with SET or as  a label
    is being defined again with a different value.

N   Numeric error. A numeric constant is incorrect as @193  (9 is
    not  permitted  in  an  octal  number).  This  error  is also
    generated if a  value will not fit  in the field  alocated to
    it.  For  example  MVI  A,257.  (The  argument  for  the  MVI
    instruction will not fit in 8 bits).

O   Opcode error. There is  an error in the fields  following the
    opcode as PUSH SP. SP is not allowed with PUSH.

P   Phase  error. This  error occurs  only in  two  pass assembly
    mode. The value to be assigned to a label on pass two  is not
    the same as that assigned on pass one.

Q   Questionable statement. This  is the general catch  all.  The
    assembler simply does not understand this line.


                                 20
MICRO-SYMBOL                                         January 26, 1978


R   The  expression   following  an  arithmetic   conditional  is
    undefined or contains a forward reference.

U   Undefined symbol. This error occurs only in two pass assembly
    mode. See below for one pass assembly.


7.2 UNDEFINED SYMBOLS

The U error is given for undefined symbols in two pass mode.   In one
pass mode,  the assembler does  not know that  a symbol  is undefined
until it reaches the END statement. At this point it issues  an error
message of the form:
UNDEFINED SYMBOL zot FIRST USED AT line/page

If the symbol has been defined in terms of some other symbol which is
undefined as:
A       EQU B+3

where B is undefined, the error message will be
UNDEFINED SYMBOL A NEEDS B

indicating that A would be  defined if B were. (An  undefined message
will also be given for B.)

























                                 21
MICRO-SYMBOL                                         January 26, 1978


                       SECTION 8 -- PROCESSORS





8.1 8080

The  only special  instruction  in the  8080  opcode set  is  the RST
instruction. This instruction must be followed by an expression which
is defined  at the time  the instruction is  assembled and is  in the
range 0 to 7.
The opcodes accepted are:
STC     CMC     INR     DCR     CMA     DAA     NOP
MOV     STAX    LDAX    ADD     ADC     SUB     SBB
XRA     ANA     ORA     CMP     RLC     RRC     RAL
RAR     PUSH    POP     DAD     INX     DCX     XCHG
XTHL    SPHL    LXI     MVI     ADI     ACI     SUI
SBI     ANI     XRI     ORI     CPI     STA     LDA
SHLD    LHLD    PCHL    JMP     JC      JNC     JZ
JNZ     JP      JM      JPE     JPO     CALL    CC
CNC     CZ      CNZ     CP      CM      CPE     CPO
RET     RC      RNC     RZ      RNZ     RM      RP
RPE     RPO     RST     EI      DI      IN      OUT
HLT

In addition, the following opcodes are provided for convenience:

JEQ,CEQ,REQ     CORRESPOND TO JZ,CZ,RZ
JNE,CNE,RNE     CORRESPOND TO JNZ,CNZ,RNZ
JLT,CLT,RLT     CORRESPOND TO JC,CC,RC
JGE,CGE,RGE     CORRESPOND TO JNC,CNC,RNC


The opcodes stand for jump, call, and return on equal, not equal less
than, and greater than or equal to.


8.2 8008

The instructions RST IN and OUT are special for the 8008. RST must be
followed by an  expression which can be  evaluated at the time  it is
seen and be in the range 0 to 7. IN must be followed by  a expression
in the range 0 to 7 and OUT by an expression in the range 8 to 31.





                                 22
MICRO-SYMBOL                                         January 26, 1978


The opcodes accepted are:
ACI     ADD     ADC     ADI     ANA     ANI     CALL
CC      CNC     CZ      CNZ     CP      CM      CPE
CPO     CMP     CPI     DCR     HLT     IN      INR
JMP     JC      JNC     JZ      JNZ     JP      JM
JPE     JPO     MO      MVI     OR      ORI     OUT
RAL     RAR     RET     RC      RNC     RZ      RNZ
RP      RM      RPE     RPO     RLC     RRC     RST
SBB     SUB     SUI     XOR     XRI

As with the  8080, the instructions JEQ,  JNE, etc. are  provided for
convenience.


8.3 6500

This  processor option  may be  used for  any of  the 650X  family of
microprocessors.   These   microprocessors  have   several  different
addressing modes. These may be indicated as followes:
IMMEDIATE ADDRESSING    #operand
ABSOLUTE ADDRESSING     operand
ZERO PAGE ADDRESSING    operand OR \operand
RELATIVE ADDRESSING     operand
ABSOLUTE INDEXED        operand,X OR operand,Y
ZERO PAGE INDEXED       operand,X OR operand,Y OR
                        \operand,X OR \operand,Y
INDEXED INDIRECT        (operand,X)
INDIRECT INDEXED        (operand),Y
INDIRECT                (operand)

Where appropriate, the  assembler will automatically  select ABSOLUTE
or ZERO PAGE addressing. If the operand is a "forward" reference, the
assembler will select ABSOLUTE. If it is known that the  operand will
be a reference  to page zero, ZERO  PAGE addressing can be  forced by
preceding the operand with a  .
The opcodes accepted are:

ADC     AND     ASL     BCC     BCS     BEQ     BIT     BMI
BNE     BPL     BRK     BVC     BVS     CLC     CLD     CLI
CLV     CMP     CPX     CPY     DEC     DEX     DEY     EOR
INC     INX     INY     JMP     JSR     LDA     LDX     LDY
LSR     NOP     ORA     PHA     PHP     PLA     PLP     ROL
RTI     RTS     SBC     SEC     SED     SEI     STA     STX
STY     TAX     TAY     TYA     TSX     TXA     TXS

In addition,  the expression  component AND is  redefined as  LAND to
avoid conflict.


                                 23
MICRO-SYMBOL                                         January 26, 1978


8.4 6800

This processor option used  modes of addressing similar to  those for
the 6500. These are indicated as followes:
IMMEIDATE ADDRESSING    #operand
EXTENDED ADDRESSING     operand
DIRECT ADDRESSING       operand OR \operand
INDEXED ADDRESSING      operand,X

The  comments  for  the  6500  concerning  ABSOLUTE  and   ZERO  PAGE
addressing also apply to EXTENDED and DIRECT addressing for the 6800.
Opcodes which  specify the A  or B registers  may be written  with or
without a space as ADD A operand or ADDA operand.
The opcodes accepted are:

ABA     ADC     ADD     AND     ASL     ASR     BCC     BCS
BEQ     BGE     BGT     BHI     BIT     BLE     BLS     BLT
BMI     BNE     BPL     BRA     BSR     BVC     BVS     CRA
CLC     CLI     CLR     CLV     CMP     COM     CPX     DAA
DEC     DES     DEX     EOR     INC     INS     INX     JMP
JSR     LDA     LDS     LDX     LSR     NEG     NOP     ORA
PSH     PUL     ROL     ROR     RTI     RTS     SBA     SBC
SEC     SEI     SEV     STA     STS     STX     SUB     SWI
TAB     TAP     TBA     TPA     TST     TSX     TXS     WAI

In addition, the  expression component LAND  is redefined as  LAND to
avoid conflict.

For compatability with other  6800 assemblers, the pseudoops  DB, DW,
and DS are redefined as BYTE, WORD, and RES.


8.5 F8

Instructions  which  reference  a register  and  the  short immediate
instructions must have the register or the immediate constant defined
at the time the instruction is assembled (no forward references). The
usual convention for scratchpad  registers addressed by the  ISAR (D,
I, and S)  may be used.  The  instructions affected are AS,  ASD, DS,
INS,  LIS,  LISL,  LISU,  NS,  OUTS,  and  XS.  In  addition,  the LR
instruction  may  must  have  the register  defined  at  the  time of
assembly if one is used. HU  may be used with the LR  instruction for
register 10, HL for register 11,  and J for register 9 (as LR  A,J or
LR HU,A).





                                 24
MICRO-SYMBOL                                         January 26, 1978


The opcodes accepted are:

ADC     AI      AM      AMD     AS      ASD     BC      BF
BM      BNC     BNO     BNZ     BP      BR      BR7     BT      BZ
CI      CLR     CM      COM     DCI     DI      DS      EI      INC
IN      INS     JMP     LI      LIS     LISL    LISU    LM      LNK
LR      NI      NM      NOP     NS      OI      OUT     OUTS    PI
PK      POP     SL1     SL4     SR1     SR4     ST      XDC     XI
XM      XS

Note the use of SL1 for SL 1, SL4 for SL 4, etc.

In addition, the following are also defined:
BEQ     for BZ
BNE     for BNZ
BGT     for BNC
BLE     for BC
BGTS    for BM
BLES    for BP


8.6 COSMAC

The special opcodes requireing their address fields to be  defined at
the time  of assembly are:  DEC, GHI, GLO,  INC, INP, LDA,  LDN, OUT,
PHI, PLO, SEP, SEX, STR.  The register definitions R0 through  R9 and
RA through RF are predefined.
The opcode accepted are:
ADC     ADCI    ADD     ADI     AND     ANI     BDF     BGE     BL
BM      BNF     BNQ     BNZ     BN1     BN2     BN3     BN4     BPZ
BQ      BR      BZ      B1      B2      B3      B4      DEC     DIS
GHI     GLO     IDL     INC     INP     IRX     LBDF    LBNF    LBNQ
LBQ     LBR     LBZ     LDA     LDI     LDN     LDX     LDXA    LSDF
LSIE    LSKP    LSNF    LSNQ    LSNZ    LSQ     LSZ     MARK    NBR
NLBR    NOP     OUT     OR      ORI     PHI     PLU     SAV     SD
SDB     SEP     SEQ     SEX     SHL     SHLC    SHR     SHRC    SKP
SM      SMB     SMI     SMBI    STR     STXD    REQ     RSHL    RSHR
XOR     XRI

In addition, the expression components XOR, OR, AND, SHR, and SHL are
redefined as LXOR, LOR, LAND LSHR, and LSHL to avoid conflict.








                                 25
MICRO-SYMBOL                                         January 26, 1978


8.7 Z80

The Z80 set defines the normal Z80 instructions and preserves most of
the 8080 instructions for ease of program conversion. This means that
both the Z80 instruction PUSH HL and the 8080 version PUSH H  will be
recognized.
The opcodes accepted are:

ACI     ADC     ADD     ADI     ANA     AND     ANI     BIT     CALL
CC      CCF     CGE     CM      CMA     CMC     CMP     CMPD    CMPDR
CMPI    CMPIR   CNC     CNZ     CP      CPE     CPI     CPL     CPO
CZ      DAA     DAD     DCR     DCX     DEC     DI      DJNZ    EI
EX      EXX     HALT    HLT     IM0     IM1     IM2     IN      INC
IND     INDR    INI     INIR    INR     INX     JC      JM      JMP
JNC     JZ      JP      JPE     JPO     JZ      JR      LD      LDA
LDAX    LDD     LDDR    LDI     LDIR    LHLD    LXI     MOV     MVI
NEG     NOP     OR      ORA     ORI     OTDR    OTIR    OUT     OUTD
OUTDR   OUTI    OUTIR   PCHL    POP     PUSH    RAL     RAR     RC
RES     RET     RETI    RETN    RL      RLA     RLC     RLCA    RLD
RM      RNC     RNE     RNZ     RP      RPE     RPO     RR      RRA
RRC     RRCA    RRD     RST     RZ      SBB     SBC     SBI     SCF
SET     SHLD    SLA     SPHL    SRA     SRL     STA     STAX    STC
SUB     SUI     XCHG    XOR     XRA     XRI     XTHL

Note that CP and JP are the Z80 instructions. The special  jump, call
and return instructions noted for the 8080 are also included. The RST
is done as the 8080 (i.e RST  1 not RST 8). In using the Z80  CALL or
JP instructions, some extra condition codes can be used:
EQ (EQUAL) FOR Z                NE (NOT EQUAL) FOR NZ
GE (GREATER EQUAL) FOR NC       LT (LESS THAN) FOR C
NOV (NOT OVERFLOW) FOR PO       OV (OVERFLOW) FOR PE
LPD (LOOP DONE) FOR PO          LPND (LOOP NOT DONE) FOR PE

The expression components XOR, OR and AND are redefined as LXOR, LOR,
and LAND to avoid conflict.


8.8 Z80C

This is just like the Z80 set but even more 8080 compatable.   CP and
JP are now the CP and  JP of the 8080. The compare instrution  is CMP
and the jump instruction JMP.  In addition, CPD, CPI, CPDR,  and CPIR
are redefined as CMPD, CMPI, CMPDR, and CMPIR for consistancy.






                                 26
   :/{