
Poller documentation
Version 2.0  January 15, 1976


General description
-------------------

The POLLER system is comprised of two packages, 'POLUSR' and 'POLLER'.
POLUSR is the set of routines to be used to communicate with the POLLER.
POLLER is the set of routines to be used by the POLLER to communicate
with any user routines using POLUSR.

These two packages have a 'variable processor interface'.  With
internal modifications to macro definitions, POLUSR and POLLER are
able to interface with any desired processor (F40, BLISS, SIMPL, ...).

As of this release, POLUSR and POLLER are assembled for F40 programs.

Due to the nature of these routines, certain 'customizing' must be done
before the routines are usable.  The main point of concern is the
location of the sharable high segment upon which the POLLER operates.

Currently, the segment    POLSEG.SHR    is searched for in the directory
FROM WHICH THE CURRENT PROGRAM HAS BEEN RUN FROM.

There are provisions in the POLLER to use the current high-segment
instead of linking to POLSEG.SHR; however, POLUSR always links to
the segment.


User documentation
------------------

The following routines are to be used by programs to communicate
with the Poller.  They are contained in the file "POLUSR.REL".  This
is not a library file, and should be included in the users "LOAD"
command string simply as "POLUSR".  The routines have a variable
processor interface, but are currently assembled for F40 programs.

. CALL POLINI(IERR)

        This subroutine must be called before any other Poller subroutine
can be utilized.  It initializes communications between the Poller and
the calling program.  It links to the Poller shared memory segment and
determines whether the Poller is running or not.  If it is, POLIO
is enabled.  The following codes can be returned in IERR:

        -1  Initialization completed, Communications set up
         0  HIBER uuo failure *or* after HIBER uuo complete, POLLER
            had not yet ack'ed back
         1  Unable to link to sharable memory
         2  Shared memory linked but unable to make read-write
         3  Shared memory linked but tables not set up - POLLER not running
         4  WAKE uuo failed to wake up POLLER - POLLER not running

. CALL POLIO(IBUF,ILEN,IWORDS,IERR)

        This subroutine is used to send of buffer of information to the
Poller for processing.  The arguments are as follows:

        IBUF    An integer array containing the data to be sent
        ILEN    A constant indicating the MAXIMUM size of the IBUF buffer
                (in words)
        IWORDS  An integer variable set before the call to indicate
                how many ACTUAL words are stored in the IBUF buffer
                Set by Poller on return to indicate the number of words
                returned in the IBUF buffer as a response.
        IERR    An integer variable that will contain one of the following
                error codes:
                -1  Operation successful, Data sent and returned
                 0  POLINI has not yet been called
                 1  Poller timed out after sending it the information.
                    POLINI must be called again if this error occurs
                 2  The buffer IBUF is too large to be sent (as indicated
                    by the count in ILEN)
                 3  Operation successful; However, the data returned by
                    the Poller was too long to fit in IBUF - response
                    truncated to ILEN words

        This subroutine is utilized by placing the information to be
sent in the integer array IBUF.  ILEN is set to the maximum number of
words that can be put into the array IBUF.  IWORDS is set to the number
of actual words in the array IBUF that are to be sent.  POLIO will
send the data and wait up to 2 minutes for a reply.  No reply
after 2 minutes causes error code #1; otherwise, IBUF will be filled
with the response data from the Poller.  IWORDS will be set to the
number of words returned in IBUF.  IERR will contain one of the
listed error codes.

. CALL POLFIN   <no arguments>

        This subroutine is used to terminate communications with the Poller.
This should be called by the program before exiting to the Exec.


Some notes on the use of these subroutines-

POLINI can be called at any point.  It re-established communications
between the program and the Poller.  POLINI MUST be called before
any POLIO call can be done.  POLINI MUST also be called whenever POLIO
returns an error code of #1 (Poller timed out).

POLFIN can be called at any point.  It breaks any communications
between the program and the Poller.


Poller documentation
--------------------

The following routies are to be used by the Poller program only.
They are contained in the file "POLLER.REL".  This is not a library file,
and should be included in the "LOAD" command string simply as "POLLER".
The routines have a variable processor interface, but are currently
assembled for F40 programs.

. CALL POLINT(ISHR,IDET)

        This subroutine must be called before any other Poller routine
can be used.  It attempts to link to shared memory, check for another
Poller already running, set up dynamic tables, and detach the controlling
terminal from the system.  Any errors force a return to the executive.
If the subroutine returns, other Poller subroutines are enabled.
The arguments are as follows:

        ISHR    An integer constant, -1 if a GETSEG should be done on
                POLSEG.SHR or 0 if the current high-segment should be
                used.
        IDET    An integer constant, -1 if the terminal should be detached
                from the POLLER job (usual) or 0 if it should not.

. CALL POLLOP(IBUF,ILEN,IWORDS,IJOB)

        This subroutine should be called as soon after POLINT is called
as possible.  This is the actual "POLLER" subroutine.  It will return
only after a "connected" user sends a buffer to the Poller for processing.
The arguments are as follows:

        IBUF    An integer array that will have data put in it
        ILEN    A constant indicating the MAXIMUM size of the IBUF buffer
        IWORDS  An integer variable that will be set to the number of
                words put in the buffer.
        IJOB    An integer variable that will be set to the job number
                belonging to the user who sent the data that is in
                the buffer - For users information only

Any errors during processing force a return to the executive after printing
an error message (In the usual case, POLLER will stop in "TI" state waiting
to output the error message).

The buffer should be processed (by whatever Poller does to data from a
user) and returned via "POLACK" (see below).  Until POLACK is called,
the user who sent the buffer will remain in suspense.  There is
a time-out of approximately 2 minutes, during which time if the Poller
does not process the information and respond with a POLACK, the user
who sent the buffer will give up.

. CALL POLACK(IBUF,IWORDS)

        This subroutine can only be used after POLLOP returns a buffer of
data.  It must be the next thing called after POLLOP.  The arguments are
as follows:

        IBUF    An integer array containing the information to be sent
                to the user as a response to the data originally sent.
        IWORDS  An integer constant indicating the number of words in
                the IBUF array

After this is completed, POLLOP can be called again.

. CALL POLERR(IERR)

        This subroutine is for Fatal errors only!  It puts the contents
of "IERR", an integer variable, into the second location of the shared
memory buffer (the first being the Poller up flag; See POLLER.INT for
details on this cell).  It will the log itself out.


Notes on operation
------------------

The segment which has the sharable data should be declared "ALL UPD UPD".
It is currently computed as follows:

        POLSEG.SHR   in the directory the program was run out of

Ie, if POLLER is run out of the directory (UPL), it will look for the
segment "(UPL)POLSEG.SHR".
The segment can be ANY valid sharable high-segment.  For example,
suppose a program 'FOO.LOW' and 'FOO.SHR' are to use the Poller
routines.  Simply copy 'FOO.SHR' to 'POLSEG.SHR'.  The operation of the
high-segment with the ".LOW" file and the poller will not interfere with
the regular operation of the "FOO" program.
note that if FOO.SHR is ever changed, it must be recopied to POLSEG.SHR
    