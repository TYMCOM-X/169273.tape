


 










This manual is over 72 characters wide due to the
size of the sample terminal session.  In order to reproduce this
manual in 8.5 by 11 form, print it on a 132 width terminal and
cut the wide pages to size.  They have been arranged to allow a
one inch margin on each side and a half inch top and bottom.
Thank you.
                                                           Page 2


 













                             CAPPS8

                       BSO CROSS ASSEMBLER

                               FOR

                     PPS8 MICROPROCESSORS BY

                            ROCKWELL

                               on

                         TYMSHARE, INC.










        Copyright, THE BOSTON SYSTEMS OFFICE, INC.  1977
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800





                        UPDATED MAY-22-79
                                                           Page 3


                       GENERAL INFORMATION

The Boston Systems Office offers a family of extremely  effective
microprocessor   software   development  tools.   These  products
(cross-assembler, cross-compilers, simulator/debuggers, and other
products)  allow the user to take full advantage of the speed and
versatility of  microprocessor  program  development  on  a  host
computer,  thereby  significantly reducing the number of hours or
days spent in program development.   The  advantages  of  a  host
system  versus  a  microprocessor-based  development  programming
system include:

          - Faster processing speeds
          - More powerful editors
          - Multi-user capability
          - Higher speed peripherals
          - Multi-microprocessor capability on one system
          - Lower station cost in multi-user configurations

BSO/PASCAL is a new product of the BSO line  of  cross-compilers,
which has been specially optimized for microprocessor application
design.  Its benefits include faster software development through
the  use of a high-level language and a much higher percentage of
error-free code  because  of  PASCAL's  particular  capabilities.
Other advantages are simplified program maintenance due to better
program readability and a  recompilation  capability  which  will
permit  one source language program to be compiled for any number
of  suitable  microprocessors.   BSO/PASCAL  supports   interrupt
handling   instructions,   record-oriented   variables,  enhanced
microprocessor statements, extensive compiler-generated  comments
and many other features.

BSO's cross assemblers, unlike most other similar  products,  are
written  in  the  assembly  language  of the host computer.  They
generally require no more than 10-18K words of memory to assemble
any  program.   The  comprehensive  program  symbol  table can be
expanded for any program requirement or selectively condensed for
a  smaller  system,  as  required.  These assemblers require much
less  CPU  time  to  execute,  even  at   this   reduced   memory
requirement,  than manufacturer-supplied cross-assemblers written
in higher-level languages such as  Fortran.   Benchmarks  against
competitive  cross-assemblers  in  a timesharing environment have
shown that time  savings  of  up  to  50%  are  common.   Similar
efficiencies   can  also  be  realized  when  using  an  in-house
computer.

                                                           Page 4


The instruction set accepted by each cross-assembler is the  same
as  documented  in  the  assembly language manual supplied by the
microprocessor   manufacturer.    Mnemonics   exist   for    data
manipulation,  binary  arithmetic, jumps to subroutines, etc.  In
addition, all of  BSO's  cross-assemblers  have  full  macro  and
extended  conditional  assembly  capabilities.   The  object file
produced can then be processed by BSO's compatible  cross-linkage
editor, along with other relocatable and absolute object modules.
The assembled code can then be loaded directly  to  any  standard
peripheral  device  on  the  system.   The  absolute  load module
produced by the cross-linkage editor  can  be  punched  on  paper
tape,  loaded into a PROM burner, or downline loaded into memory,
depending on the available facilities.   The  assembler  is  also
capable  of  producing  an  object  format with additional symbol
information,  suitable  for  input  to  one  of  BSO's  companion
integrated symbolic simulator/debuggers.

Cross assemblers are now available for  all  major  manufacturers
including   Advanced   MicroDevices,   AMI,  Fairchild,  Fujitsu,
Hitachi,  Intel,  Intersil,  MOS  Technology,  Mostek,  Motorola,
National  Semiconductor, NEC, RCA, Rockwell, Signetics, Synertek,
Thomson-CSF, Texas Instruments, Zilog and others.

Please feel free to call  the  sales  department  of  the  Boston
Systems  Office  at (617) 894-7800 for further information on any
microprocessor including those not mentioned above.
                                                           Page 5


                        TABLE OF CONTENTS



 SECTION                                                   PAGE

   1.0    OPERATING INSTRUCTIONS                             4

   2.0    SOURCE PROGRAM PREPARATION                         5

   3.0    INSTRUCTION SET                                    7

   4.0    ASSEMBLER DIRECTIVES (PSEUDO OPS)                  8

   5.0    MACRO STATEMENTS                                   9

   6.0    CONDITIONAL ASSEMBLY                              11

   7.0    OBJECT FILE FORMAT                                12

   8.0    ERROR HANDLING                                    13

   9.0    SUMMARY OF DIFFERENCES                            14

  10.0    SAMPLE TERMINAL SESSION                           15

                                                           Page 6


1.0 OPERATING INSTRUCTIONS    _________ ____________

TO RUN THE PPS-8 CROSS ASSEMBLER, AT THE MONITOR LEVEL TYPE:

     -R CAPPS8      _ ______

THE ASSEMBLER WILL RESPOND WITH THE FOLLOWING:

THE BOSTON SYSTEMS OFFICE, INC.
(617) 890-0888
PPS-8 ASSEMBLER -- VERSION 1(1)
*

At the asterisk, type:

     *PROG.OBJ,PROG.LST=PROG.SRC      __________________________

or, you may type:

     PROG,PROG=PROG     ______________

The first filename  given  is  the  ACT-format  object  file  the
assembler is to generate, the second given is the listing file to
be generated by the assembler, and the third  filename  given  is
that  of  source  file  the  assembler is to use as input.  Since
there are default extensions, the filenames may be the same,  and
can be distinguished by their extensions.  The default extensions
are PP8 for the source file, LST for the listing file and ACT for
the  ACT  format  object  file.   There are no default filenames,
however.  Any acceptable file names and extensions desired may be
used.

If either the object or listing file is not desired, they may  be
omitted   from  the  specification,  as  the  following  examples
illustrate:

     *PROG.OBJ=PROG.SRC      _________________

     *,PROG.LST=PROG.SRC      __________________

Note that the comma is required when a listing  file  is  desired
but not an object file.

The listing file is in ASCII format and may be typed as follows:

     -TYPE PROG.LST                  On your terminal      ____ ________

     -LIST TTY:=PROG.LST             On your terminal,      ____ _____________
                                     page formatted

The default object file format is an ACT file  and  this  can  be
punched with the following command:

     -PUNCH PROG.ACT/TAPE:IMAGE      At the computer center      _____ ___________________

                                                           Page 7


2.0 SOURCE PROGRAM PREPARATION    ______ _______ ___________

PROGRAM ENTRY

Source programs may be placed on the host computer disk either by
the use of a text editor, to build new programs, or by reading in
an existing file from paper tape, magtape, etc.  Once  a  program
resides on disk a text editor may be used to alter or correct the
file in preparation for assembly.  It is not necessary to  remove
line  numbers  from  a  file before assembly;  the assembler will
ignore them if they are present.


PROGRAM FORMAT

Each source statement consists of  strings  of  ASCII  characters
(fields)   terminated   by   a   carriage  return  -  line  feed.
Statements, or lines, of more  than  90  characters  will  appear
truncated  in  the  listing file but will be assembled correctly.
Lines beginning with an asterisk (*) will be treated as comments.
Blank  lines  and  lines with only a label field will generate no
code.  Any label on such a line will  be  assigned  to  the  next
available  address.   Each  source  statement  is made up of four
fields:  the label,  instruction,  operand  and  comment  fields,
which are defined below.

Label Field - A statement label consists of up to  6  characters,_____ _____
the  first  of  which must appear in column one.  Each label must
terminate with a colon except for labels on the pseudo ops  MACRO
and  EQU,  which  end  with  a  blank  or tab.  A label serves to
identify a location  in  the  program  uniquely  and  should  not
duplicate  another  label  or  one  of  the assembler's permanent
symbols.  The permanent symbols include all  of  the  instruction
mnemonics and pseudo ops.

The label field is optional except in statements with an  EQU  or
MACRO statement.

Instruction Field - The instruction field must contain either  an___________ _____
instruction  mnemonic,  a pseudo op or the name of a user defined
macro (i.e., a macro call).  The field must be separated from the
preceding  label  field  by at least one space or tab and may not
start in column one.

Operand Field - The operand field, if required,  may  consist  of_______ _____
constants,  statement  labels, the location counter (*) or labels
EQUated  to  values.   These  elements  may  be   combined   into
expressions  with arithmetic operators, as described below.  This
field must be separated from the instruction field  by  at  least
one space or tab.

Comment Field - This field is optional;  it will  appear  on  the_______ _____
assembly  listing  but  will  be  ignored  by the assembler.  The
comment field must begin with an  exclamation  mark  (!)  and  be
separated  from  either the operand field or from the instruction
field by at least one space or tab.
                                                           Page 8


EXPRESSIONS

Expressions can be made up of user  symbols,  numbers,  statement
labels  and  instruction  counter.   These may be combined by the
various operators to form expressions.  The  expression  handling
and operators available are a function of the assembler.  Many of
the  operators  have  no  simple  implementation  on  the   PPS-8
microprocessor.

Symbols - Any symbol which has been used as a statement label  or_______
equated  to a value or the instruction counter (*) may be used in
an expression.

Numeric Constants - Numeric Constants may be specified as binary,_______ _________
decimal  or  hexadecimal constants.  To do this the number should
be immediately preceded by a symbol to indicate the  radix  used,
and  in  the  case  of  binary,  the number should be enclosed in
quotes, as shown in the examples below:

             binary                  (e.g., '0101')
             decimal                 (e.g., 19)
         # - hexadecimal             (e.g., #0F8#)


Operators - The operators available for constructing  expressions_________
include both the unary and binary operators listed below:

   UNARY:    +         BINARY:   +
             -                   -

                                                           Page 9


3.0 INSTRUCTION SET    ___________ ___

A detailed explanation  of  each  instruction  supported  may  be
obtained   by  referring  to  the  microprocessor  manufacturer's
programming manual.  (In order according to  Assemulator  manual,
Appendix D.)

     A         BNZA      LLA       POPX      SKN
     AC        BP        LN        POPY      SKNC
     ACSK      BPA       LNCX      POPZ      SKNZ
     AISK      BZ        LNXL      PSHA      SKP
     AN        BZA       LNXY      PSHL      SKZ
     ANI       COM       LX        PSHX      SN
     ASK       DC        LXA       PSHY      SNCX
     B         DCC       LXI       PSHZ      SNXL
     BA        DECX      LXL       RAL       SNXY
     BBF       DECY      LY        RAR       X
     BBFA      DEXY      LYA       RB        XAL
     BBT       EOR       LYI       RC        XAX
     BBTA      IN        LYL       RIS       XAY
     BC        INCA      LZ        RSK       XAZ
     BCA       INCX      LZA       RT        XD
     BDI       INCY      LZI       RTI       XDCX
     BL        INXY      LZL       S         XDXL
     BN        IO4       MDL       SB        XL
     BNA       L         MDR       SC        XN
     BNC       LAI       NOP       SD        XNCX
     BNCA      LAL       OR        SDCX      XNXL
     BNE       LD        OUT       SDXL      XNXY
     BNEA      LDCX      POPA      SKC       XY
     BNZ       LDXL      POPL      SKE
                                                          Page 10


4.0 ASSEMBLER DIRECTIVES (PSEUDO OPS)    _________ __________ _______ ____

This cross assembler recognizes  the  following  pseudo  ops.   A
detailed  explanation of each may be obtained by referring to the
microprocessor manufacturer's programming manual and chapters 5.0
and 6.0 of this manual.

     DW
     DWA
     EJECT
     END
     ENDIF
     ENDM
     EQU
     IF
     LOF
     LON
     MACRO
     ORAM
     ORG
     PEND
     POOL
     RRAM
**   SECT
     SPACE
**   STOP



**   Mnemonic recognized, but not expected to be implemented.
                                                          Page 11


5.0 MACRO STATEMENTS    _____ __________

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by writing only the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

MNAME          MACRO     DUM1, DUM2,...
                .
                .
               ENDM

where MNAME is the name of the macro and DUM1,DUM2,...  are dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may not be nested.  The macro body  should  not
contain  the  words  MACRO or ENDM.  A macro may contain calls to
other macros.

Macro calls are of the form:

LABEL:         MNAME     ARG1,ARG2,...

where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated as null
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 12


MACRO EXAMPLES


PAUSE          MACRO               ;WAIT 4 MACHINE CYCLES
     NOP
     NOP
     NOP
     NOP
     ENDM




;BUILD 4 CHARACTER TABLE ENTRIES
ENTRY          MACRO     Q,R,S,T,VALUE
     DB        'Q'
     DB        'R'
     DB        'S'
     DB        'T'
     DB        VALUE
     ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

WXYZ:          ENTRY     W,X,Y,Z,27


This would result in the following expansion:

     DB        'W'
     DB        'X'
     DB        'Y'
     DB        'Z'
     DB        27
                                                          Page 13


6.0 CONDITIONAL ASSEMBLY    ___________ ________

Conditional  assembly  code  is  not  available  at  this   time.
Portions  of a program can be assembled or not depending upon the
value of an expression.  This is accomplished  by  preceding  the
conditional  section  of  code with a statement containing the IF
pseudo op and the expression  to  be  evaluated  and  ending  the
section  with  the pseudo op ENDIF.  This is useful for producing
several versions of the same program from a single source file by
changing only one parameter.

The expression following the IF pseudo op will  be  evaluated  by
the assembler and the results compared to zero.  If the result is
not zero the code will be assembled.  If the result is zero,  all
the  code up to the next ENDIF statement is ignored.  Conditional
statements may be nested to any depth.




Example of a conditional section of code:


             IF      VER-1   ;DON'T ASSEMBLE FOR VERSION 1
HSIZE        EQU     8
             ENDIF
             IF      VER     ;DON'T ASSEMBLE FOR VERSION 0
HSIZE        EQU     8
             ENDIF
                                                     Page 14


7.0 OBJECT FILE FORMAT    ______ ____ ______

The object file produced by this cross assembler is a binary file
in  Rockwell's  ACT  format  (BNPF).   For  more information, See
Section 6.7 of Rockwell's Operating Manual for PPS-8 Microprogram
Development.

The resulting object file will have four bytes per line, with the
address  of the first byte in decimal format at the left.  To get
to this format, the hexadecimal data bytes are first converted to
binary.   Then  each data byte will be preceded by a "B", the 0's
and  1's  in  the  byte  will  be  replaced  with  N's  and   P's
respectively  and  each  byte  will  be  followed by an "F".  For
example, a record which has the following hexadecimal format:

     :02008000AF5FEF         where AF and 5F are data

these data bytes converted to binary would be:

                 10101111       01011111

and in BNPF format this becomes:

      00128     BPNPNPPPPF     BNPNPPPPPF

The BNPF loader will treat the address as a  comment  and  ignore
it.
                                                          Page 15


8.0 ERROR HANDLING    _____ ________

The cross assembler will print  error  messages  on  the  program
listing  if  the listing file was requested in the specification.
Errors are indicated by one  or  more  characters  in  the  fifth
column  or  field  of the listing, immediately to the left of the
line in which they occured.  In  all  cases  the  assembler  will
attempt  to  generate some code for each source line so addresses
further on in the program do not get out  of  phase.   This  also
allows  for  a location into which a patch may be inserted if the
object tape is used for debugging, even with its errors.


ERROR CODES

$ - "$" invalid for this opcode, ignored.

( - Invalid use of parentheses on opcode.

* - Missing branch address;  *+1 assumed.

: -  Simple branch should not be labelled.

= - No symbol to which to EQUvalence.

> - 'NOP$' inserted to facilitate branch inst.

? - Phase error;  definition different or missing.

B - BL Pool full;  declaration ignored.

C - Command Pool full;  declaration ignored.

D - Reference to Multiply-defined symbol.

E - Empty expression  or  operand  field,  missing  I/O  function
    operand, or any empty field.

I - Invalid operand for BL pooling.

L - Lit Pool full;  delaration ignored.

N - Instruction invalid between POOL, PEND.

O - Invalid address modifier, or opcode.

P - Page wraparound error.

R - Range error;  value too big for field.

S - Illegal character in binary constant, or undefined symbol.

U - Undefined symbol or BL address.

Y - Feature  recognized  but  not  implemented;   (e.g.,  certain
    pseudo-ops, and expressions in Literal Pool declarations.)
                                                          Page 16


9.0 SUMMARY OF DIFFERENCES    _______ __ ___________

This cross assembler is compatible with the one supplied for  the
PPS-8  by  Rockwell  with a few exceptions.  These exceptions are
listed below:

     1.  The following features conform to BSO standards and  may
         conflict   with   similar   features   offered   by  the
         manufacturer.

                (A)  Macro Processing
                (B)  Conditional Assembly Directives
                (C)  Listing Control
                (D)  Relocation Directives and Control


     2.  User defined symbols may be limited to six characters as
         opposed to eight allowed by Rockwell.

     3.  If the source program contains user symbols  that  begin
         with a digit, e.g.:

             10MS    EQU     #64

             10RS    LXI     VAL

         then the source file must contain line Sequence  Numbers                              ____         ____
         at the left-hand margin.

     4.  The source file must not contain Card Sequence Numbers.                         ____ ___         ____

     5.  At this time, there is no default command pool.

     6.  Page boundaries are not invisible to the programmer.  If
         the  too many bytes are generated before encountering an
         ORG statement, the first  offending  statement  will  be
         flagged  with a P error, and it and all statements until
         the next ORG will generate no code.

     7.  The Listing, or Report, format differs from that used by
         Rockwell.

     8.  The error codes are similar  to  but  not  identical  to
         those given by the Assemulator.  See section 8.0 (above)
         of this document.

     9.  The default extensions for files are:

             .PP8            Source file

             .LST            Listing file (equivalent to
                             .RPT, Repeat file)

             .ACT            ACT format (only available)
                             object file


Please note that in most cases, macros can be written by the user
to  duplicate  directives  that are supported by the manufacturer
but do not appear in BSO software.

The list of differences above is accurate  to  the  best  of  our
knowledge,  however BSO does not warrant that it is complete.  In
                                                          Page 17


addition, this or  any  other  BSO  product  is  not  necessarily
compatible  with  any past, current or future implementation of a
similar product by any microprocessor manufacturer.






10.0 SAMPLE TERMINAL SESSION     ______ ________ _______

-TYPE SAMPL1.PP8 ____ __________

        TITLE   General Move Subroutine

* Adapted from Rockwell's
*       "Operating Manual for PPS-8 Microprogram Development"
*       Figure 4-10, Page 4-13

****    Note that there are no Pool declarations    ****

        ORG     #100

* Define buffer areas
SRCE    EQU     #70
TARG    EQU     #200
* * * * * * * * * * *

*
* Main program
*
START   LYI     1       Set MOVE COUNT to 1
        BL      MOVE    Call subroutine
        DWA     SRCE    SouRCE buffer addr
        DWA     TARG    TARGet buff addr
DONE    NOP
*
* Actual MOVE subroutine
*
MOVE    LXL             Get source addr into Z,X
        LZL
        LAL             Get target addr into A,W
        LAL
        PSHL            ...then into L
LOOP    LNXL
        SNXL
        DECY
        B       LOOP
        POPL
        RT
*
        END


-RUN CAPPS8 ___ ______
THE BOSTON SYSTEMS OFFICE, INC.
(617)890-0888
PPS-8 ASSEMBLER -- VERSION 1(1)
*CAPPS8.OBJ,CAPPS8.LST=CAPPS8.PP8 ________________________________
                                                                                             Page 18


-TYPE SAMPL1.LST ____ __________
CAPPS8 PPS-8 Cross-Assembler, Version 1B(46)
General Move Subroutine
,SAMPL1.LST=SAMPL1.PP8  29-Aug-77  17:19:16  PAGE 1
ADDR pg,loc  .CODE.  ARG(s)  errors  STMT            source statements
                                     * Adapted from Rockwell's
                                     *       "Operating Manual for PPS-8 Microprogram Development"
                                     *       Figure 4-10, Page 4-13
                                     ****    Note that there are no Pool declarations    ****
                     0100                    ORG      100
                                     * Define buffer areas
                     0070            SRCE    EQU      70
                     0200            TARG    EQU      200
                                     * * * * * * * * * * *
                                     *
                                     * Main program
                                     *
0100 02,00   80DFFE  0001            START   LYI     1       Set MOVE COUNT to 1
0103 02,03   C20A    010A                    BL      MOVE    Call subroutine
0105 02,05   0F7F    0070                    DWA     SRCE    SouRCE buffer addr
0107 02,07   7F7B    0200                    DWA     TARG    TARGet buff addr
0109 02,09   61                      DONE    NOP
                                     *
                                     * Actual MOVE subroutine
                                     *
010A 02,0A   8084                    MOVE    LXL             Get source addr into Z,X
010C 02,0C   8086                            LZL
010E 02,0E   8087                            LAL             Get target addr into A,W
0110 02,10   8087                            LAL
0112 02,12   5B                              PSHL            ...then into L
0113 02,13   7B                      LOOP    LNXL
0114 02,14   73                              SNXL
0115 02,15   6010                            DECY
0117 02,17   93      0113                    B       LOOP
0118 02,18   5A                              POPL
0119 02,19   5E                              RT
                                     *
                     0119                    END
No pools used.
                                                          Page 19


CAPPS8 PPS-8 Cross-Assembler, Version 1B(46)
General Move Subroutine
,SAMPL1.LST=SAMPL1.PP8  29-Aug-77  17:19:16  PAGE 2




SYMBOL TABLE


DONE    0109    LOOP    0113    MOVE    010A    SRCE    0070
START   0100    TARG    0200    
                                                          Page 20


-TYPE SAMPL2.PP8 ____ __________

        TITLE   General Move Subroutine
* Adapted from Rockwell's
*       "Operating Manual for PPS-8 Microprogram Development"
*       Figure 4-10, Page 4-13
****    Pool declarations    ****
*
        POOL

        LYI     1
        BL      MOVE
        LXL
        LZL
        LAL

        PEND
*
****    End of Pool declarations    ****

        ORG      100
* Define buffer areas
SRCE    EQU      70
TARG    EQU      200
* * * * * * * * * * *
*
* Main program
*
START   LYI     1       Set MOVE COUNT to 1
        BL      MOVE    Call subroutine
        DWA     SRCE    SouRCE buffer addr
        DWA     TARG    TARGet buff addr
DONE    NOP
*
* Actual MOVE subroutine
*
MOVE    LXL             Get source addr into Z,X
        LZL
        LAL             Get target addr into A,W
        LAL
        PSHL            ...then into L
LOOP    LNXL
        SNXL
        DECY
        B       LOOP
        POPL
        RT
*
        END

-R CAPPS8 _ ______
THE BOSTON SYSTEMS OFFICE, INC.
(617)890-0888
PPS-8 ASSEMBLER -- VERSION 1(1)
*CAPPS8.OBJ,CAPPS8.LST=CAPPS8.PP8 ________________________________
                                                                                             Page 21


-TYPE SAMPL2.LST ____ __________

CAPPS8 PPS-8 Cross-Assembler, Version 1B(46)
General Move Subroutine
,SAMPL2.LST=SAMPL2.PP8  29-Aug-77  17:20:31  PAGE 1

ADDR pg,loc  .CODE.  ARG(s)  errors  STMT            source statements


                                     * Adapted from Rockwell's
                                     *       "Operating Manual for PPS-8 Microprogram Development"
                                     *       Figure 4-10, Page 4-13

                                     ****    Pool declarations    ****
                                     *
                                             POOL

0004 00,04   D0                              LYI     1
0050 00,50   FE      0001            
0080 01,00   0702    0107                    BL      MOVE
0005 00,05   84                              LXL
0008 00,08   86                              LZL
0009 00,09   87                              LAL

                                             PEND
                                     *
                                     ****    End of Pool declarations    ****

                     0100                    ORG      100

                                     * Define buffer areas
                     0070            SRCE    EQU      70
                     0200            TARG    EQU      200
                                     * * * * * * * * * * *
                                                                                             Page 22


                                     *
                                     * Main program
                                     *
0100 02,00   84      0001            START   LYI     1       Set MOVE COUNT to 1
0101 02,01   E0      0107                    BL      MOVE    Call subroutine
0102 02,02   0F7F    0070                    DWA     SRCE    SouRCE buffer addr
0104 02,04   7F7B    0200                    DWA     TARG    TARGet buff addr
0106 02,06   61                      DONE    NOP
0106 02,06   61                      DONE    NOP
                                     *
                                     * Actual MOVE subroutine
                                     *
0107 02,07   85                      MOVE    LXL             Get source addr into Z,X
0108 02,08   88                              LZL
0109 02,09   89                              LAL             Get target addr into A,W
010A 02,0A   89                              LAL
010B 02,0B   5B                              PSHL            ...then into L
010C 02,0C   7B                      LOOP    LNXL
010D 02,0D   73                              SNXL
010E 02,0E   6010                            DECY
0110 02,10   8C      010C                    B       LOOP
0111 02,11   5A                              POPL
0112 02,12   5E                              RT
                                     *
                     0112                    END
                                                          Page 23


CAPPS8 PPS-8 Cross-Assembler, Version 1B(46)
General Move Subroutine
,SAMPL2.LST=SAMPL2.PP8  29-Aug-77  17:20:31  PAGE 2

ADDR pg,loc  POOL MAP


0000 00,00   00 00 00 00 D0 84 00 00 86 87 00 00 00 00 00 00
0010 00,10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0020 00,20   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0030 00,30   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00


0040 00,40   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0050 00,50   FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0060 00,60   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0070 00,70   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00


0080 01,00   07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0090 01,10   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00A0 01,20   02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00B0 01,30   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00



CAPPS8 PPS-8 Cross-Assembler, Version 1B(46)
General Move Subroutine
,SAMPL2.LST=SAMPL2.PP8  29-Aug-77  17:20:31  PAGE 3

SYMBOL TABLE

DONE    0106    LOOP    010C    MOVE    0107    SRCE    0070
START   0100    TARG    0200    



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office, Inc.
                     400-1 Totten Pond Road
                  Waltham, Massachusetts  02154
                         (617) 890-0888
   u@S,