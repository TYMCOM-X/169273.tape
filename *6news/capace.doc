


 







                             CAPACE

                       BSO CROSS ASSEMBLER
       (to run on a DECsystem10 or 20 under TOPS-10 or 20)

                               FOR

                     PACE MICROPROCESSORS BY

                     NATIONAL SEMICONDUCTOR
                  (and all compatible devices)

                               ON

                         TYMSHARE, INC.





          This User's Manual is intended to  provide  a
          thorough  product description.  It is, to the
          best of our knowledge, complete and accurate.

          The Boston Systems Office does not,  however,
          warrant this document's accuracy nor shall it
          be held responsible for errors of content  or
          omission.  The Boston Systems Office reserves
          the right to  update  this  document  without
          prior notification.





        Copyright, THE BOSTON SYSTEMS OFFICE, INC.  1976
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800





                        Updated MAY-21-79
                                                           Page 2


                       GENERAL INFORMATION

The Boston Systems Office offers a family of extremely  effective
microprocessor   software   development  tools.   These  products
(cross-assembler, cross-compilers, simulator/debuggers, and other
products)  allow the user to take full advantage of the speed and
versatility of  microprocessor  program  development  on  a  host
computer,  thereby  significantly reducing the number of hours or
days spent in program development.   The  advantages  of  a  host
system  versus  a  microprocessor-based  development  programming
system include:

          - Faster processing speeds
          - More powerful editors
          - Multi-user capability
          - Higher speed peripherals
          - Multi-microprocessor capability on one system
          - Lower station cost in multi-user configurations

BSO/PASCAL is a new product of the BSO line  of  cross-compilers,
which has been specially optimized for microprocessor application
design.  Its benefits include faster software development through
the  use of a high-level language and a much higher percentage of
error-free code  because  of  PASCAL's  particular  capabilities.
Other advantages are simplified program maintenance due to better
program readability and a  recompilation  capability  which  will
permit  one source language program to be compiled for any number
of  suitable  microprocessors.   BSO/PASCAL  supports   interrupt
handling   instructions,   record-oriented   variables,  enhanced
microprocessor statements, extensive compiler-generated  comments
and many other features.

BSO's cross assemblers, unlike most other similar  products,  are
written  in  the  assembly  language  of the host computer.  They
generally require no more than 10-18K words of memory to assemble
any  program.   The  comprehensive  program  symbol  table can be
expanded for any program requirement or selectively condensed for
a  smaller  system,  as  required.  These assemblers require much
less  CPU  time  to  execute,  even  at   this   reduced   memory
requirement,  than manufacturer-supplied cross-assemblers written
in higher-level languages such as  Fortran.   Benchmarks  against
competitive  cross-assemblers  in  a timesharing environment have
shown that time  savings  of  up  to  50%  are  common.   Similar
efficiencies   can  also  be  realized  when  using  an  in-house
computer.

                                                           Page 3


The instruction set accepted by each cross-assembler is the  same
as  documented  in  the  assembly language manual supplied by the
microprocessor   manufacturer.    Mnemonics   exist   for    data
manipulation,  binary  arithmetic, jumps to subroutines, etc.  In
addition, all of  BSO's  cross-assemblers  have  full  macro  and
extended  conditional  assembly  capabilities.   The  object file
produced can then be processed by BSO's compatible  cross-linkage
editor, along with other relocatable and absolute object modules.
The assembled code can then be loaded directly  to  any  standard
peripheral  device  on  the  system.   The  absolute  load module
produced by the cross-linkage editor  can  be  punched  on  paper
tape,  loaded into a PROM burner, or downline loaded into memory,
depending on the available facilities.   The  assembler  is  also
capable  of  producing  an  object  format with additional symbol
information,  suitable  for  input  to  one  of  BSO's  companion
integrated symbolic simulator/debuggers.

Cross assemblers are now available for  all  major  manufacturers
including   Advanced   MicroDevices,   AMI,  Fairchild,  Fujitsu,
Hitachi,  Intel,  Intersil,  MOS  Technology,  Mostek,  Motorola,
National  Semiconductor, NEC, RCA, Rockwell, Signetics, Synertek,
Thomson-CSF, Texas Instruments, Zilog and others.

Please feel free to call  the  sales  department  of  the  Boston
Systems  Office  at (617) 894-7800 for further information on any
microprocessor including those not mentioned above.
                                                           Page 4


                        TABLE OF CONTENTS



SECTION                                                   PAGE

   1.0    OPERATING INSTRUCTIONS                             5

   2.0    SOURCE PROGRAM PREPARATION                         6

   3.0    INSTRUCTION SET                                    9

   4.0    ASSEMBLER DIRECTIVES (PSEUDO OPS)                 10

   5.0    MACRO STATEMENTS                                  11

   6.0    CONDITIONAL ASSEMBLY                              13

   7.0    OBJECT FILE FORMAT                                14

   8.0    ERROR HANDLING                                    15

   9.0    SUMMARY OF DIFFERENCES                            17

  10.0    SAMPLE TERMINAL SESSION                           18


APPENDICES:

  I.      USER PROBLEM AND SUGGESTION REPORT

  II.     DO YOU LIKE THIS MANUAL? (User manual suggestion and
          correction report)
                                                           Page 5


1.0 OPERATING INSTRUCTIONS    _________ ____________

To run the PACE cross assembler, at the monitor level type:

     -R CAPACE      _ ______

The assembler will respond with the following:

     PACE Cross Assembler Version 2(5)
     Copyright, The Boston Systems Office, Inc. 1976
     (617) 894-7800
     *

At the asterisk, type:

     *PROG.OBJ,PROG.LST=PROG.SRC      __________________________

PROG.OBJ and PROG.LST  are  the  object  and  listing  files  the
assembler  will  create  and PROG.SRC is the source program being
assembled.  If filename extensions  are  desired,  they  must  be
specified  explicitly,  there  are  no  defaults.   The filenames
PROG.OBJ, PROG.SRC and PROG.LST are  used  for  example  purposes
only.   Any  acceptable  filenames  and extensions desired may be
used.

If either the object or listing file is not desired, they may  be
omitted   from  the  specification,  as  the  following  examples
illustrate:

     *PROG.OBJ=PROG.SRC      _________________

     *,PROG.LST=PROG.SRC      __________________

Note that the comma is required when a listing  file  is  desired
but not an object file.

The listing file is in ASCII format and may be typed  or  printed
as follows:

    -TYPE PROG.LST           On your terminal     ____ ________

    -LIST TTY:=PROG.LST      On your terminal, page formatted     ____ _____________

The default object file format is an ASCII file and this  can  be
punched with the following command:

    -TYPE PROG.OBJ           On your terminal, if so equipped     ____ ________

The object and listing files may be printed or  punched  at  your
local branch office;  contact your salesman for details.
                                                           Page 6


2.0 SOURCE PROGRAM PREPARATION    ______ _______ ___________

PROGRAM ENTRY

Source programs may be placed on the host computer disk either by
the  use of a text editor to build new programs, or by reading in
an existing file from paper tape, magtape, etc.  Once  a  program
resides  on  disk,  a text editor may be used to alter or correct
the file in preparation for assembly.  It  is  not  necessary  to
remove  line  numbers from a file before assembly;  the assembler
will ignore them if they are present.

PROGRAM FORMAT

Each source statement consists of  strings  of  ASCII  characters
(fields)   terminated   by   a   carriage   return - line   feed.
Statements, or lines, of more  than  90  characters  will  appear
truncated  in  the  listing file but will be assembled correctly.
Lines beginning with a semicolon (;) will be treated as comments.
Blank  lines  and  lines with only a label field will generate no
code.  Any label on such a line will  be  assigned  to  the  next
available  address.   Each  source  statement  is made up of four
fields:  the label,  instruction,  operand  and  comment  fields,
which are defined below.

Label Field - A statement label consists of up to  6  characters,_____ _____
the  first  of  which  must be alphabetic or a "$", and appear in
column one.   The  remaining  characters  may  be  alphabetic  or
numeric.  Only the first 5 characters of a LOCAL label are stored
in the assembler's symbol  table.   A  LOCAL  label  retains  its
significance  only  between  pairs of .LOCAL directives.  A label
identifies a particular location in the program  and  should  not
duplicate  another  label  or  one  of  the assembler's permanent
symbols, which include  all  of  the  instruction  mnemonics  and
pseudo ops.

The label field is optional except in statements with an  EQU  or
MACRO statement.

Instruction Field - The instruction field must contain either  an___________ _____
instruction  mnemonic,  a pseudo op or the name of a user defined
macro (i.e., in a macro call).  The field must be separated  from
the  preceding  label  field by at least one space or tab and may
not start in column one.

Operand Field - The operand field, if required,  may  consist  of_______ _____
one  or  more operands separated by commas.  An operand may be an
ASCII  constant,   statement   label,   character   string,   the
instruction counter (.) or an expression.  Spaces, except when in
a character string, ASCII constant or macro call, will  terminate
the  operand  field.   This  field  must  be  separated  from the
instruction field by at least one space or tab.

Comment Field - This field is optional;  it will  appear  on  the_______ _____
assembly  listing  but  will  be  ignored  by the assembler.  The
comment field must be separated from  the  instruction  field  by
either a space or tab or an operand plus a space or tab.
                                                           Page 7


EXPRESSIONS

Expressions can be made up of user symbols and numeric and  ASCII
constants.  These elements may be combined by the operators +, -,
*, /, !, % and &.  Expressions will be  evaluated  from  left  to
right  without  regard  for operator hierarchy, except that unary
operators will be evaluated first.  Parentheses are not allowed.

Symbols - Any symbol which has been used as a statement label  or_______
equated  to a value may be used in an expression.  In addition, a
"." (period) may be used to indicate the location  of  the  first
byte of the current instruction.

Numeric Constants - Numeric constants may be specified in  either_______ _________
deciaml  or hexadecimal format.  Any number with a non-zero first
digit is a decimal  constant.   A  hexadecimal  constant  may  be
indicated  in  two  ways:   by  preceding the number with an "'X"
(apostrophe and an X), or with a  zero.   Examples  of  both  are
shown below:

         Decimal - 32671, 10, 5, -600

         Hexadecimal - X'A2, 0A2, X'1234, 01234

ASCII Constants - An ASCII constant is represented by one or  two_____ _________
printable ASCII characters enclosed in apostrophes.
                                                           Page 8


3.0 INSTRUCTION SET    ___________ ___

The following mnemonics represent the instruction  set  supported
by  this  cross assembler.  A detailed explanation of each may be
obtained  by  referring  to  the  microprocessor   manufacturer's
programming manual.


          ADD     LI      ROR
          AISZ    LSEX    RTI
          AND     NOP     RTS
          BOC     OR      RXCH
          CAI     PFLG    RXOR
          CFR     PULL    SFLG
          CRF     PULLF   SHL
          DECA    PUSH    SHR
          DSZ     PUSHF   SKAZ
          HALT    RADC    SKG
          ISZ     RADD    SKNE
          JMP     RAND    ST
          JSR     RCPY    SUBB
          LD      ROL     XCHRS
          
                                                           Page 9


4.0 ASSEMBLER DIRECTIVES (PSEUDO OPS)    _________ __________ _______ ____

This cross assembler recognizes  the  following  pseudo  ops.   A
detailed  explanation of each may be obtained by referring to the
microprocessor manufacturer's programming manual.


          .ASCII
          .ASECT
          .BSECT
          .DLEN
          .ELSE
          .END
          .ENIF
          .ENDM
          .GLOBL
          .IF
          .LIST
          .LOCAL
          .MACRO
          .PAGE
          .SPACE
          .SPLIT
          .TITLE
          .TSECT
          .WORD

                                                          Page 10


5.0 MACRO STATEMENTS    _____ __________

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by writing just the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

MNAME     .MACRO  DUM1,DUM2,...
            .
            .
          .ENDM

where MNAME is the name of the macro and DUM1,DUM2,...  are dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may not be nested.  The macro body  should  not
contain  the  words  MACRO or ENDM.  A macro may contain calls to
other macros.

Macro calls are of the form:

LABEL:    .MNAME  ARG1,ARG2,...

where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated as null
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 11


MACRO EXAMPLES


PAUSE     .MACRO          WAIT 4 MACHINE CYCLES
           NOP
           NOP
           NOP
           NOP
          .ENDM




*BUILD 4 CHARACTER TABLE ENTRIES
ENTRY     .MACRO  Q,R,S,T,VALUE
           WORD   'Q'
           WORD   'R'
           WORD   'S'
           WORD   'T'
           WORD   VALUE
          .ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

WXYZ:     ENTRY   W,X,Y,Z,27


This would result in the following expansion:

          WORD    'W'
          WORD    'X'
          WORD    'Y'
          WORD    'Z'
          WORD    27
                                                          Page 12


6.0 CONDITIONAL ASSEMBLY    ___________ ________

Portions of a program can be assembled or not depending upon  the
value  of  an  expression.  This is accomplished by preceding the
conditional section of code with a statement  containing  the  IF
pseudo  op  and  the  expression  to  be evaluated and ending the
section with the pseudo op ENDIF.  This is useful  for  producing
several versions of the same program from a single source file by
changing only one parameter.

The expression following the IF pseudo op will  be  evaluated  by
the assembler and the results compared to zero.  If the result is
not zero the code will be assembled.  If the result is zero,  all
the  code up to the next ENDIF statement is ignored.  Conditional
statements may be nested to any depth.




Example of a conditional section of code:


          IF      VER-1   DON'T ASSEMBLE FOR VERSION 1
HSIZE             6
          ENDIF
          IF      VER     DON'T ASSEMBLE FOR VERSION 0
HSIZE             8
          ENDIF
                                                          Page 13


7.0 OBJECT FILE FORMAT    ______ ____ ______

The PACE cross-assembler produces object files in  two  different
(though  equivalent)  formats.   Each  record contains exactly 18
words:  a record identifier and data word count, a checksum,  and
16 data words.  Some of the data words may be unused if the count
in word 1 is less than 16.  There are four record types:

     0 - Title rec Has program name and length.

     1 - Symbols.  Has GLOBL symbol names for linking.

     2 - Data.  Has asembled program with relocation information.

     3 - End.  Program end.

Detailed descriptions of bit fields in each record can  be  found
in Chapter 10 of the User's Manual.

The default object file format is intended for paper tape.   Each
record  is  preceded  by  a  start  of  text character (X'02) and
followed by carriage return-line feed and  8  nulls.   Each  word
takes two tape frames.

Card  image  object  files  contain  the  same   information   in
hexadecimal  (ASCII)  format.  Each 18 word record becomes 72 hex
characters followed by carriage return-line feed.

If a card image object file is required, enter a /C following the
object filename.  For example:

     *PROG.OBJ/C,PROG.LST=PROG.SRC      ____________________________

The resulting object file may be typed,  printed  or  punched  on
cards.  A sample card image object file is shown in Section 10.0.
                                                          Page 14


8.0 ERROR HANDLING    _____ ________

The cross assembler will  print  error  messages  at  the  user's
terminal  and  on  the  program  listing  if the listing file was
requested in the specification.  Errors are indicated by  one  or
more  characters  at  the  left of the listing line in which they
occured.  In all cases the assembler  will  attempt  to  generate
some  code  for  each  source line so addresses further on in the
program do not get out of phase.  This also allows for a location
into which a patch may be inserted if the object tape is used for
debugging, even with its errors.


ERROR CODES

A - Address error.  Address expression too large for  the  number
    of  bits  in  the  address  instruction (8 or 16) or a branch
    further than 128 bytes.  The address is truncated and used.

B - Balance error.  Caused by an odd number of apostrophes in  an
    ASCII string.

E - Expression  error.   Poorly  constructed  expression   (e.g.,
    missing  operand  or  instruction)  or  use of an instruction
    mnemonic in an expression.  The latter case will contribute a
    one  byte  value  to  the  expression in case that was really
    intended.

F - Format error.  Usually caused by terminating the  operand  or
    instruction field with an unexpected character.

M - Multiple definition of statement label or symbol.  Either the
    same  symbol  was  used to label more than one statement or a
    statement label is the same as an instruction mnemonic.

N - Nesting error.   Caused  by  improperly  paired  IF:ENDIF  or
    MACRO:ENDM pseudo ops.

P - Phase error.  A statement label is not in the  same  location
    during pass 2 of the assembler as it was in pass 1.

Q - Questionable syntax.  Indicates a misspelled, unrecognized or
    missing instruction.

U - Undefined symbol.  Use of a symbol in an expression or in the
    operand  field  that  was  not previously defined.  The value
    used for the symbol is zero.

V - Value error.  An expression is too large for the  instruction
    field or is negative.
                                                          Page 15


9.0 SUMMARY OF DIFFERENCES    _______ __ ___________

This cross assembler is compatible with the one supplied for  the
PACE  by  National  Semiconductor  with  a few exceptions.  These
exceptions are listed below:


     1.  The following features conform to BSO standards and  may
         conflict   with   similar   features   offered   by  the
         manufacturer.

          (A)  Macro Processing
          (B)  Conditional Assembly Directives
          (C)  Listing Control
          (D)  Relocation Directives and Control


     2.  The .FORM pseudo op has not been implemented.

     3.  Conditional   assemblies    are    allowed    by    this
         cross-assembler, as shown in Section 6.0.

     4.  This cross-assembler has a  full  macro  capability,  as
         shown in Section 5.0.

     5.  The .SPLIT pseudo-op is used to  indicate  assembly  for
         PACE systems with a split base page.


Please note that in most cases, macros can be written by the user
to  duplicate  directives  that are supported by the manufacturer
but do not appear in BSO software.

The list of differences above is accurate  to  the  best  of  our
knowledge,  however BSO does not warrant that it is complete.  In
addition, this or  any  other  BSO  product  is  not  necessarily
compatible  with  any past, current or future implementation of a
similar product by any microprocessor manufacturer.
                                                          Page 16


10.0 SAMPLE TERMINAL SESSION     ______ ________ _______

-TYPE CAPACE.SRC ____ __________
        .TITLE  SSORT,'SIMPLE SORT (08/01/73)'
        .GLOBL  SSORT       ;CAN REFERENCE ENTRY POINT FROM
                            ;SEPARATE ASSEMBLY
;       SSORT SORTS A VECTOR OF SINGLE-WORD CONSTANTS INTO
;       ASCENDING ORDER.  CALLING SEQUENCE IS:
;       JSR     SSORT       ;CALL
;       .WORD   VECTOR      ;ADDRESS OF VECTOR
;       ...                 ;NORMAL RETURN
;
;
FLAG:   .WORD   0           ;IF NONZERO, SWAP MADE DURING PASS
TAB:    .=.+1               ;VECTOR ADDRESS
TABEND: .=.+1               ;SORT LIMIT
REGS:   .=.+4               ;REGISTER SAVE AREA
SSORT:  ST      0,REGS      ;SAVE REGISTERS
        ST      1,REGS+1
        ST      2,REGS+2
        ST      3,REGS+3
        PULL    2           ;OBTAIN ADDRESS OF PARAMETER
        PUSH    2           ;BY PULLING PC FROM STACK TO R-2
        LI      0,0
        ST      0,FLAG      ;CLEAR FLAG
        LD      3,1(2)      ;END OF VECTOR ADDRESS TO
        AISZ    3,-1        ;DECREMENT ADDRESS
        ST      3,TABEND
        LD      3,(2)       ;VECTOR ADDRESS
        ST      3,TAB
LOOP:   LD      0,3         ;GET A VALUE
        SKG     0,1(3)      ;COMPARE AGAINST NEXT VALUE
        JMP     TEST        ;VALUES IN ORDER
        LD      1,1(3)      ;SWAP VALUES
        ST      0,1(3)
        ST      1,0(3)
        LI      1,1         ;SET SORT FLAG NONZERO
        ST      1,FLAG
TEST:   AISZ    3,1         ;INCREMENT TABLE POINTER
        RCPY    3,0
        SKG     0,TABEND   ;FINISHED THIS PASS?
        JMP     LOOP        ;NO
        LD      0,FLAG      ;YES - DID WE MAKE A SWAP?
        AISZ    0,0
        JMP     .+2         ;YES - CONTINUE
        JMP     OUT         ;NO - SORT DONE
        LI      0,0         ;INITIALIZE FOR NEXT PASS
        ST      0,FLAG
        LD      3,TAB
        JMP     LOOP
OUT:    LD      0,REGS      ;RESTORE REGISTERS
        LD      1,REGS+1
        LD      2,REGS+2
        LD      3,REGS+3
        RTS     2
        .END
                                                          Page 17


-R CAPACE _ ______
PACE Cross Assembler Version 2(5)
Copyright, The Boston Systems Office, Inc. 1976
(617) 894-7800
*CAPACE.OBJ/C,CAPACE.LST=CAPACE.SRC __________________________________

EXIT
                                                          Page 18


-TYPE CAPACE.LST ____ __________

                   .TITLE SSORT,'SIMPLE SORT (08/01/73)'
                   .GLOBL SSORT     ;CAN REFERENCE ENTRY POINT FROM
                                    ;SEPARATE ASSEMBLY
           ;       SSORT SORTS A VECTOR OF SINGLE-WORD CONSTANTS INTO
           ;       ASCENDING ORDER.  CALLING SEQUENCE IS:
           ;       JSR    SSORT     ;CALL
           ;       .WORD  VECTOR    ;ADDRESS OF VECTOR
           ;       ...              ;NORMAL RETURN
           ;
           ;
0000 0000  FLAG:   .WORD  0         ;IF NONZERO, SWAP MADE DURING PASS
0001       TAB:    .=.+1            ;VECTOR ADDRESS
0002       TABEND: .=.+1            ;SORT LIMIT
0003       REGS:   .=.+4            ;REGISTER SAVE AREA
0007 D1FB  SSORT:  ST     0,REGS    ;SAVE REGISTERS
0008 D5FB          ST     1,REGS+1
0009 D9FB          ST     2,REGS+2
000A DDFB          ST     3,REGS+3
000B 6600          PULL   2         ;OBTAIN ADDRESS OF PARAMETER
000C 6200          PUSH   2         ;BY PULLING PC FROM STACK TO R-2
000D 5000          LI     0,0
000E D1F1          ST     0,FLAG    ;CLEAR FLAG
000F CE01          LD     3,1(2)    ;END OF VECTOR ADDRESS TO
0010 7BFF          AISZ   3,-1      ;DECREMENT ADDRESS
0011 DDF0          ST     3,TABEND
0012 CE00          LD     3,(2)     ;VECTOR ADDRESS
0013 DDED          ST     3,TAB
0014 C003  LOOP:   LD     0,3       ;GET A VALUE
0015 9F01          SKG    0,1(3)    ;COMPARE AGAINST NEXT VALUE
0016 1905          JMP    TEST      ;VALUES IN ORDER
0017 C701          LD     1,1(3)    ;SWAP VALUES
0018 D301          ST     0,1(3)
0019 D700          ST     1,0(3)
001A 5101          LI     1,1       ;SET SORT FLAG NONZERO
001B D5E4          ST     1,FLAG
001C 7B01  TEST:   AISZ   3,1       ;INCREMENT TABLE POINTER
001D 5CC0          RCPY   3,0
001E 9DE3          SKG    0,TABEND  ;FINISHED THIS PASS?
001F 19F4          JMP    LOOP      ;NO
0020 C1DF          LD     0,FLAG    ;YES - DID WE MAKE A SWAP?
0021 7800          AISZ   0,0
0022 1901          JMP    .+2       ;YES - CONTINUE
0023 1904          JMP    OUT       ;NO - SORT DONE
0024 5000          LI     0,0       ;INITIALIZE FOR NEXT PASS
0025 D1DA          ST     0,FLAG
0026 CDDA          LD     3,TAB
0027 19EC          JMP    LOOP
0028 C1DA  OUT:    LD     0,REGS    ;RESTORE REGISTERS
0029 C5DA          LD     1,REGS+1
002A C9DA          LD     2,REGS+2
002B CDDA          LD     3,REGS+3
002C 8002          RTS    2
                   .END
                                                               Page 19


          SYMBOL TABLE
 
FLAG    0000    LOOP    0014    OUT     0028    REGS    0003    
SSORT   0007    TAB     0001    TABEND  0002    TEST    001C    



-TYPE CAPACE.OBJ ____ __________

001078360000002D53534F52542C53494D504C4520534F5254202830382F303100000000
4005B6B0000053534F525400000700000000000000000000000000000000000000000000
800500000002000000000000000000000000000000000000000000000000000000000000
80103FD40002000700000000D1FBD5FBD9FBDDFB660062005000D1F1CE017BFFDDF0CE00
801063940002001300000000DDEDC0039F011905C701D301D7005101D5E47B015CC09DE3
8010E1250002001F0000000019F4C1DF7800190119045000D1DACDDA19ECC1DAC5DAC9DA
80064E070002002B00000000CDDA80020000000000000000000000000000000000000000
C004D2940000000000004ACA000000000000000000000000000000000000000000000000



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office, Inc.
                        469 Moody Street
                  Waltham, Massachusetts  02154
                         (617) 894-7800



                    DO YOU LIKE THIS MANUAL??



BSO  is  constantly  working  to  improve  the  quality  of   our
documentation.   If  you have any constructive comments regarding
this or any BSO publication, we would appreciate it if you  would
take  a few moments to jot them down in the space below, and then
mail the form to us at 469 Moody Street,  Waltham,  Massachusetts
02154.  Our customers' comments are always appreciated!

Title of document:
-----------------------------------------------------------------
Date of document revision:
-----------------------------------------------------------------
Your name:                                  Today's date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------

Please rate this manual in the following categories with a number
between 0 (worst) and 5 (best):

Overall Readability: _________

Organization:        _________

Accuracy:            _________


Please  write  any  general  comments below.  If you require more
space, feel free to attach as many additional pages as you  wish.
Thanks for your help!
 g &