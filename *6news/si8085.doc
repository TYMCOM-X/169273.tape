


 









                                SI8085

                        BSO SIMULATOR/DEBUGGER

                                 FOR

                       8085 MICROPROCESSORS BY

                                INTEL
                     (and all compatible devices)

                                  on

                            TYMSHARE, INC.












           Copyright, The Boston Systems Office, Inc. 1977
                           469 Moody Street
                         Waltham, Ma.  02154
                            (617) 894-7800





                          Updated: 28-Aug-78



                         GENERAL INFORMATION

This symbolic  simulator/debugger,  one  of  a  family  of  cross
assemblers and simulator/debuggers produced by The Boston Systems
Office,  is  a  powerful  programming  tool   used   to   develop
microprocessor  software.   It  allows  the  user  to  take  full
advantage of a larger computer,  whether  in  a  time-sharing  or
in-house  mode,  thereby  significantly  reducing  the  number of
man-hours spent in program  development.   The  advantages  of  a
larger computer include:

          .Faster processing speeds
          .More powerful editors
          .Higher speed peripherals

Another advantage, rather critical  on  many  projects,  is  that
program  development  and testing may begin before receipt of the
actual target hardware system.

This simulator is itself written  in  assembly  language  and  is
therefore faster, more efficient and hence, much more economical.

The simulator/debugger consists of  three  discrete  systems,  as
described below:

         .Loader - loads standard format object  code  and  reads
         symbols  from  a  listing  file  produced by BSO's cross
         assembler.

         .Simulator - a DECsystem10 program  that  simulates  the
         operation of a virtual microprocessor system.

         .Debugger -  a  symbolic  debugger  "invisible"  to  the
         simulated microprocessor.  It allows the user to examine
         and modify interactively  the  program  in  an  absolute
         and/or  symbolic  mode.   It  also gives the user strong
         control over the step-by-step execution of  his  program
         by   the   use   of   trace  printouts  of  any  of  the
         microprocessor registers or memory locations.


The symbolic instruction set of this  simulator/debugger  is  the
same  as documented in the manuals supplied by the microprocessor
manufacturer.  Mnemonics  exist  for  data  manipulation,  binary
arithmetic, jumps to subroutines, etc.


Please feel free to contact The Boston Systems Office for further
information  on  this or any other microprocessor related product
you require for program development.  BSO  also  has  a  complete
line  of  cross-assemblers for all commercial microprocessors and
will produce custom assemblers,  simulator/debuggers,  and  other
system  software  and  microprocessor  applications on a contract
basis.



                          TABLE OF CONTENTS



SECTION                                                      PAGE


1.    SI8085 Capabilities                                   1

2.    General Operating Instructions                        2

3.    Expressions                                           3

4.    Instruction Set                                       4

5.    Loading 8085 Programs ("<LOAD" Command)               5

6.    Setting up simulated 8085 memory ("<CORE" Command)    6

7.    Changing the default radix ("<RADIX" Command)         7

8.    Setting up trace output format ("<FORM" Command)      8

9.    Opening 8085 memory locations                         9

10.   Depositing into 8085 memory                          10

11.   Opening and modifying 8085 registers                 11

12.   Breakpoints                                          12

13.   Tracepoints                                          13

14.   User defined symbols                                 14

15.   Simulated instruction times                          15

16.   Output modes                                         16

17.   Special SI8085 register names                        17

18.   Command summary                                      18
                                                                Page 1


1.0  SI8085 CAPABILITIES     ______ ____________


USER CONFIGURED VIRTUAL 8085 MICROPROCESSOR SYSTEM
         - Simulated   8085   memory,   up   to   full    maximum
         configuration of 64K.
         - Input  and  output  port   definition/simulation   for
         numeric or ASCII.
         - I/O to or from  the  user's  terminal  and  up  to  13
         DECsystem10 data files.
         - Any 8085 instruction can be designated  for  execution
         on an 8085 interrupt.

EXTENSIVE SIMULATION CONTROL
         - Break  points  may  be  defined  at  any  8085  memory
         location.
         - Trace printout of  various  registers  (user-selected)
         can  be  specified  for  any 8085 memory location during
         simulation.
         - Execution  can  be   initiated   for   either   single
         instruction  or multiple instructions and can be stopped
         by the user at any time.
         - Simulated 8085 interrupts  may  be  initiated  at  any
         time.
         - 8085 program simulation can be initiated at any memory
         location  with  or  without trace printout even if trace
         points have been set.

EXTENSIVE DEBUGGING FACILITIES
         - Internal 8085 registers or 8085 memory  locations  may
         be examined and/or changed.
         - Contents  of  memory  can  be  displayed  as  symbolic
         instructions, numeric values, or as ASCII characters.
         - Default input and output radices can be explicitly set
         to Binary, Octal, Decimal, or Hexadecimal.
         - Complete user control of  trace  output  format.   The
         contents  of  any of the microprocessor registers can be
         printed as ASCII characters or  Numeric  values  in  the
         default  output  radix  or  in  a specific user selected
         radix.
         - Symbols may be  defined  or  redefined  while  in  the
         Debugger.
         - Standard INTEL 8085 symbolic instructions can be  used
         when depositing into memory.
         - Expressions can be evaluated and the  resulting  value
         printed out for the user.
         - Commands to the Debugger can optionally  come  from  a
         file instead of the user's terminal.

BUILT IN 8085 PROGRAM LOADER
         - Full loader capability for standard INTEL  Hex  format
         object file.
         - Enhanced symbolic capability via access to BSO'S  8085
         cross assembler symbol table listing.

                                                                Page 2


2.0  GENERAL OPERATING INSTRUCTIONS     _______ _________ ____________


To run the 8085 Simulator/Debugger, at the monitor level type:

         -R SI8085          _ ______


The Debugger will respond with the following:

         8085 Simulator Version 1C(42)
         Copyright, The Boston Systems Office, Inc.  1977
         (617) 894-7800
         #


The pound sign prompt (#) indicates that the Debugger is  waiting
for user input.  Usually the first response to the Debugger would
be to set up memory address boundaries (see "<CORE" command), and
then  to  load  the  object file and symbol table output from the
8085 cross assembler (See "<LOAD" command).

Full word commands (those beginning with a "<") are executed when
a  (CR)  is  typed.   Short  commands are executed as soon as the
command character is typed.  Until the command  is  executed  the
following control characters are in effect:

         (RUBOUT) -      Delete one character
         ^U -            Delete entire line
         ^R -            Retype line
         ^C -            Exit to monitor


If ^C is typed while simulation  of  the  8085  is  in  progress,
simulation  will be stopped and control returned to the Debugger.
(If printout is in progress, two ^C's may be required)



                              NOTE

               Because of a  bug  in  the  TOPS-10
               Monitor,  sometimes a job will hang
               in a state (waiting for  output  to
               be  done but no output in progress)
               where no matter how many  ^C's  are
               typed,  nothing  will happen (i.e.,
               no return to the  Debugger).   This
               only  happens  if Trace printout is
               in  progress  when  the  ^C's   are
               typed.    If  this  should  happen,
               typing  any  other  character  will
               free   the   hung   condition,  and
               control   will   return   to    the
               Debugger.


                                                                Page 3


3.0  EXPRESSIONS     ___________


Expressions can be  made  up  of  user  symbols,  numbers,  ASCII
constants,  reserved  symbols  for  the  registers,  and  current
location counter.  These may be combined by the various operators
and contained by parentheses to form complex expressions.

Symbols - Any alphanumeric  symbol  which  has  been  used  as  a_______
statement  label  or read from the listing file may be used in an
expression.  In addition, the instruction counter  "." (dot)  and
the  register  names  (A, B, C, D, E, H, L, M, SP and PSW) may be
used.

Numeric Constants - Numeric Constants may be specified as binary,_______ _________
octal,  decimal  or hexadecimal constants.  To do this the number
should be immediately followed by a special character to indicate
the radix used, as shown in the examples below:

         B or ^B -       binary       (e.g., 0101B or 0101^B)
         O or Q -        octal        (e.g., 015O or 015Q)
         D or ^D -       decimal      (e.g., 19D or 19^D)
         H -             hexadecimal  (e.g., 0F8H)

Note that hex constants must always start with a decimal digit (0
if  necessary)  to  distinguish  them from user symbols.  Numbers
without any indication of radix  (no  trailing  letter)  will  be
treated as numbers in the default input radix.
WARNING:  If the default input radix is set to  hexadecimal,  the
radix specifiers "B" and "D" are ILLEGAL (they will assumed to be
part of the number).  Use control characters ^B or ^D.

ASCII Constants - An ASCII constant is represented by a character_____ _________
string  enclosed  in  apostrophes.   The characters will be right
justified, 8 bits per character, with the parity bit (high  order
bit) zero.

Operators - The operators available for constructing  expressions_________
include both the unary and binary operators listed below

     UNARY:    +         BINARY:   +         XOR       SHR
               -                   -         MOD       AND
               NOT                 *         SHL       OR
                                   % (divide)

The last six of these and the NOT operator must be separated from
their operands by at least one space or tab.  Expressions will be
evaluated according to the  following  operator  precedence,  and
from left to right when of equal precedence:

     1)  parenthesized sub-expressions
     2)  Unary +, Unary -
     3)  *, %, MOD, SHL, SHR
     4)  +, -
     5)  NOT
     6)  AND
     7)  OR, XOR
                                                                Page 4


4.0  INSTRUCTION SET     ___________ ___


The  following  8085  mnemonics  represent  the  instruction  set
supported   by  this  symbolic  Simulator/Debugger.   A  detailed
explanation  of  each  may  be  obtained  by  referring  to   the
microprocessor manufacturer's programming manual.


            ACI     DCR     LXI     RP
            ADC     DCX     MOV     RPE
            ADD     DI      MVI     RPO
            ADI     EI      NOP     RRC
            ANA     HLT     ORA     RST
            ANI     IN      ORI     RZ
            CALL    INR     OUT     SBB
            CC      INX     PCHL    SBI
            CM      JC      POP     SHLD
            CMC     JM      PUSH    SIM
            CMP     JMP     RAL     SPHL
            CNC     JNZ     RAR     STA
            CNZ     JP      RC      STAX
            CP      JPE     RET     STC
            CPE     JPO     RIM     SUB
            CPI     JZ      RLC     SUI
            CPO     LDA     RM      XCHG
            DAA     LDAX    RNC     XRA
            DAD     LHLD    RNZ     XRI
                                    XTHL



In  addition  to  the  above  8085  instructions,  the  following
pseudo-ops  may  be  used when depositing into the simulated 8085
memory.


         DB -   Deposit 8-bit bytes into memory
         DW -   Deposit 16-bit words into memory

                                                                Page 5


5.0  LOADING 8085 PROGRAMS ("<LOAD" COMMAND)     _______ ____ ________ ________ ________


SI8085 contains an integral INTEL Hex  Format  8085  Object  file
loader.   The  object file can reside in any area on the system's
disk structure.

The command "<LOAD" takes one or two  file  names  as  arguments.
The first file name is the 8085 object file to be loaded.  If the
file name extension is left out, then the  default  extension  of
".OBJ" will be used.  If only the object file is to be loaded (no
symbols to be read), only that filename should be specified.

The second argument, which  is  optional,  is  the  name  of  the
listing  file to be used in obtaining symbol definitions.  A file
extension of ".LST" will be assumed if  none  is  specified.   If
only  symbols  are  to  be  read  (no  object file loaded), a ","
followed by the filename will indicate the listing file name.

Examples:

         #<LOAD TEST,TEST   ;Read object file "TEST.OBJ", and          _____ _________
                            ;symbols from "TEST.LST".

         #<LOAD ,TEST.LST   ;Only read symbols.          _____ _________

         #<LOAD TEST.OBJ    ;Only read object file.          _____ ________



Since the object file format is standard, any 8085 object program
can  be loaded, simulated, and debugged even if no source file is
available.  However, in order for SI8085 to read symbols  from  a
listing  file,  that  file  must have been produced by BSO's 8085
cross-assembler (CA8085).
                                                                Page 6


6.0  SETTING UP SIMULATED 8085 MEMORY ("<CORE" COMMAND)     _______ __ _________ ____ ______ ________ ________


When SI8085 is first started the 8085 memory is set  up  to  have
address  boundaries of 0 and 0FF.  If desired the memory size can
be  redefined  with  the  "<CORE"  command.   Any  references  to
non-existent  8085  memory  will  return  a value of 0FF if read.
Writes to non-existent memory have no effect.

If two arguments follow the command, they are taken  as  the  new
LOWEST and HIGHEST 8085 memory addresses.

If only one argument follows the command, then only  the  HIGHEST
8085 memory address is changed.

If no arguments follow the  "<CORE",  then  the  current  address
boundaries will be printed.


Examples:

         #<CORE 0:0FF       ;Setup memory boundaries          _____ _____
                            ;to 0 and 0FF.

         #<CORE 377Q        ;Change HIGH memory boundary          _____ ____
                            ;to 377 (Octal).

         #<CORE             ;Print the current boundaries.          _____
         Low Address:  0
         High Address:  1024




                               WARNING                               _______


Redefining the  LOWEST  8085  memory  boundary  will  change  the
contents  of  any  existing  memory  and  move any trace or break
points to other locations.  Also all open I/O  channels  will  be
closed.

If only the HIGHEST 8085 memory boundary is changed, the existing
memory  is  not  affected  in any way.  However, all I/O channels
will still be closed.

Because of the above conditions, it is  highly  recommended  that
the  memory  boundaries  be changed (if required) before anything
else is done.
                                                                Page 7


7.0  CHANGING THE DEFAULT RADIX ("<RADIX" COMMAND)     ________ ___ _______ _____ _________ ________


The numbers used by SI8085 will default automatically to  Decimal
if no special radix specifier is given.  However, it is sometimes
more convenient to have a default radix other than Decimal.   The
"<RADIX" command allows the user to select any radix from 2 to 16
as the default radix for input, output, or both.

To change the default input radix, type "<RADIX IN"  followed  by
the desired input radix.

Likewise, to change the default output radix, type  "<RADIX  OUT"
followed by the new output radix.

The command "<RADIX" followed by a number will  change  both  the
input and output default radices to that value.

The number used to specify the new radix is always assumed to  be
Decimal, and must be in the range of 2 through 16.

If the "<RADIX" command is typed with no  argument,  the  current
input  and  output  default radices will be printed on the user's
terminal.


Examples:

         #<RADIX 8          ;Change input and output defaults          ______ _
                            ;to Octal.

         #<RADIX IN 16      ;Change input default          ______ __ __
                            ;radix to Hexadecimal.

         #<RADIX OUT 2      ;Change output default          ______ ___ _
                            ;radix to Binary.

         #<RADIX            ;Print the current default radices.          ______
         Input Radix:  16(10)
         Output Radix:  2(10)


                                 NOTE                                 ____

If the input default radix is greater than Decimal  (i.e.,  Hex),
the  usual  radix  suffixes of "B" for Binary and "D" for Decimal
can not be used since "B" and  "D"  are  legal  digits  for  that
r   In  order  to  specify  a  Binary or Decimal number, the
specifiers "^B" and "^D" should be used instead.
                                                                Page 8


8.0  SETTING UP TRACE OUTPUT FORMAT ("<FORM" COMMAND)     _______ __ _____ ______ ______ ________ ________


The "<FORM" command gives the user the  ability  to  specify  the
exact format of all trace output.

In the string of characters that follows the command "<FORM", the
special words for the various microprocessor registers (see Sect.
17) will have the actual values of the registers substituted when
they  are  printed  during trace printout.  If a radix other than
the current default output radix is  desired,  the  name  of  the
register  is  immediately  followed  by  the  radix  (in Decimal)
enclosed in parentheses.  If an ASCII interpretation of the lower
8  bits of the register is desired, follow the register name with
an "(A)".

Everything other  than  the  microprocessor  registers  (numbers,
spaces,  punctuation)  will  be  printed  during  trace  printout
exactly as is.

In addition to the  above,  the  user  may  have  any  string  of
characters   (including   the  register  names)  printed  out  by
enclosing the string in single quotes ("'").

The special  word  "CR"  will  cause  a  carriage  return  to  be
generated during the trace output.

The command "<FORM ALL" will set up the trace format  for  output
of all registers (the initial format).

The command "<FORM" with no argument will cause the current trace
format specification to be printed on the user's terminal.


Examples:

         #<FORM 'PC= 'PC....INST CR A,B,C,D  A(A),A(8)          _____ ____ ___________ __ _______  _________

Would have a trace printout as follows:

         PC= 0012....       LOOP: MVI A,42
         42,00,00,00  B,102
                                                                Page 9


9.0  OPENING 8085 MEMORY LOCATIONS     _______ ____ ______ _________


To open a location, type a symbolic or absolute  address  of  the
location  followed  by  "/"  or "$/".  SI8085 will then print the
contents (in the current output mode) of that location.  If  just
a  "/"  or "$/" is typed (i.e., no address), the last open memory
location will be reopened and the contents displayed.


Examples:
         #LOOP+5/    ADD B     ;Open location "LOOP+5"          _______

         #120$/      JMP LOOP  ;Open location 120          _____

                                                               Page 10


10.0  DEPOSITING INTO 8085 MEMORY      __________ ____ ____ ______


Once a memory location has been opened and its  contents  printed
out,  the  user  can then type the new contents for that location
followed by a (CR) or (LF).  If the contents of the open location
are  not  to  be  changed,  simply type a (CR) or a (LF).  If the
contents  are  to  be  changed,  any   standard   8085   symbolic
instruction, symbolic expression, numeric constant, "DB" (deposit
bytes), or "DW" (deposit words) can be typed and  deposited  into
that location (plus any required following locations if more than
1 byte) when (CR) or (LF) is typed.

NOTE:  If a location is open and another SI8085 command is given,
generally  that  open location will remain open.  However, if the
command is a full word type of command (one starting with a "<"),
the  open  location  will  be  closed.   Also,  if the command is
another open, the  previous  location  is  closed,  and  the  new
location is opened.


Whenever a (CR) is typed by the user, any open memory location or
register will be closed.

Whenever a (LF) is typed, any open memory  location  or  register
will be closed.  Then the next memory location will automatically
be opened and its contents printed.  The actual  memory  location
that  is  next  opened  is based on the contents of the last open
memory location (i.e., if the contents of the  previous  location
composed  a 3 byte instruction, then 3 bytes would be skipped and
location ".+3" would be opened).

NOTE:  If the current output mode is NUMERIC or ASCII  mode  when
the  (LF)  was  typed,  the  newly  opened  location  is always 1
location higher than the last.
                                                               Page 11


11.0  OPENING AND MODIFYING 8085 REGISTERS      _______ ___ _________ ____ _________


In a manner  similar  to  opening  8085  memory  locations,  8085
registers  may  be  opened  for  display  of  their  contents and
possible modification.

To open an 8085 register, type the name of the register  followed
by  a  "$R".   In response, SI8085 will print the contents of the
register in the current output radix.

In order to leave the contents of the register as is, simply type
a  (CR),  (LF),  or another open register or memory command.  The
register will be closed without modification.

If a new content is desired, type the new value (it can be in the
form of a symbolic expression) followed by a (CR) or a (LF).

Note that if a (LF) is used to close an open register, after  the
register  is  closed,  the  next  8085  memory  location  will be
automatically opened (based on the  contents  of  the  last  open
memory location).

Any of the following registers can  be  opened  for  display  and
modification:
     A,B,C,D,E,H,L,M,BC,DE,HL,SP,PC,PSW,CC,S,Z,AC,P,CY,I,ETIME


Examples:

         #PC$R 0000  LOOP+1 (CR) ;Open register "PC" and change          ____       ______ ____
                                 ;contents to LOOP+1

         #A$R 12  '1' (CR)       ;Open register "A"          _       ___ ____
                                 ;and change contents to the
                                 ;ASCII code of the character "1"

                                                               Page 12


12.0  BREAKPOINTS      ___________


Breakpoints allow the user to stop 8085 simulation  automatically
at strategic points.  Any number of breakpoints are allowed to be
set in the simulated  8085  memory.   When  the  program  counter
reaches  an  address  that  contains  a breakpoint, simulation is
stopped and control returns to the debugger.

To set a breakpoint, type the symbolic or absolute address of the
location  where  the  breakpoint  is to be set, followed by "$B".
Breakpoints can be set at all locations by typing  "$B"  with  no
argument.

Breakpoints may be removed  by  typing  a  symbolic  or  absolute
address  followed  by  "$$B".   All breakpoints can be removed by
"$$B" with no argument.


NOTE:  When a breakpoint causes a return  to  the  debugger,  the
instruction at that location has not yet been executed.


Examples:

         #LOOP+1$B  ;Set a breakpoint at location "LOOP+1".          ________

         #$B        ;Set breakpoints at all locations.          __

         #137$$B    ;Remove any breakpoint from location 137.          ______

         #$$B       ;Remove all breakpoints.          ___

                                                               Page 13


13.0  TRACEPOINTS      ___________


Tracepoints allow the user to enable trace  printout  selectively
as  the  instructions  at specific memory locations are executed.
Like breakpoints, any number of tracepoints can be set.  When  an
8085  instruction  is executed from a location where a tracepoint
is set, a trace output is done.  (see "<FORM" for setting up  for
trace output)

To set a tracepoint, type a symbolic or absolute address  of  the
location  a  tracepoint  is  to  be  set  at,  followed  by "$T".
Tracepoints can be set  at  all  locations  by  "$T"  without  an
argument specified.

Tracepoints may be removed  by  typing  a  symbolic  or  absolute
address  followed  by "$$T".  All tracepoints can be removed with
"$$T" with no argument.

NOTE:  All Trace output is done after the  instruction  has  been
executed.   With  the  exception of the "PC", the contents of all
registers are displayed as they are  after  the  instruction  has
been  done.  The value of the "PC" is always printed during Trace
output as it was before the instruction was done.


Examples:

         #LOOP+1$T  ;Set a tracepoint at location "LOOP+1".          ________

         #$T        ;Set tracepoints at all locations.          __

         #100$$T    ;Remove any tracepoint from location 100.          ______

         #$$T       ;Remove all tracepoints.          ___

                                                               Page 14


14.0  USER DEFINED SYMBOLS      ____ _______ _______


User symbols can consist of up  to  six  alphanumeric  characters
(must  begin with a letter) and can have values of up to 16 bits.
User symbols may be defined, redefined,  or  deleted  at  anytime
while in the debugger.

To define or redefine a symbol to the current location  (the  one
last  opened),  type the symbol followed by a ":".  If the symbol
already existed, the old value will be replaced by the  value  of
the current location.

Alternately, a symbol may have any value assigned to  it  by  the
command  "<SET"  followed  by  the symbol and then the new value.
Note that "ABC:" is equivalent to "<SET ABC,."  .

To delete a symbol, type  the  symbol  followed  by  "$K".   This
command  will  remove  the symbol from the internal symbol table.
All future references to that  symbol  will  cause  an  UNDEFINED
SYMBOL error to be generated.

The command "$$K" will delete ALL user defined symbols.


Examples:

         #100/ NOP  LOOP:   ;Open a location and define          ____      _____
                            ;a symbol at that location (the
                            ;location remains open).

         #<SET XYZ,10(cr)   ;Set XYZ to a value of 10.          ____ __________

         #XYZ$K             ;Delete symbol XYZ.          _____

         #$$K               ;Delete all user defined symbols.          ___

                                                               Page 15


15.0  SIMULATED INSTRUCTION TIMES      _________ ___________ _____


SI8085 has provisions for  printing  out  during  simulation  the
number  of cycles a given instruction would take to execute on an
actual 8085 microprocessor.  The "TIME" is the number  of  cycles
taken  by  the  last  executed instruction.  "TIME", however, can
only be  printed  with  the  "<PRINT"  command  or  during  Trace
printout.

In addition to the individual instruction cycle time, SI8085  has
a  cycle counter, "ETIME", which may be printed and/or changed as
a register.  On Trace output the value "ETIME" is limited to a 16
bit   value.    However,  internally  a  full  36  bit  value  is
maintained.  To see the full elapsed time value, type the command
"ETIME$R"  (open  register  "ETIME").   The  value  of "ETIME" is
updated after each 8085 instruction is executed.   To  reset  the
elapsed  time,  open the register "ETIME" and deposit a zero into
it.


Examples:

         #<PRINT TIME ETIME(CR) ;Print the number of cycles the          ______ ____ _________
         04 1240                ;last instruction took,
                                ;and the total elapsed time.

         #ETIME$R 1240 0(CR)    ;Zero the elapsed time counter          _______      _____

                                                               Page 16


16.0  OUTPUT MODES      ______ _____


Whenever the Debugger prints the contents of a  memory  location,
it  does  it  in  either  SYMBOLIC, NUMERIC, or ASCII mode.  This
output mode is used whenever memory locations are opened with the
"/"  command  or  listed  with the "<LIST" command.  The commands
"$$T", "$$N", and "$$A" will change the output mode  permanently,
while  the  commands  "$T",  "$N",  and  "$A" will only change it
temporarily until a (CR) is typed by the user.

         $S or $$S   ;Set the output mode to SYMBOLIC.
         $N or $$N   ;Set the output mode to NUMERIC.
         $A or $$A   ;Set the output mode to ASCII

Examples:

         #$A 100/  A (LF)           ;ASCII mode, Open memory          __ ____    ____
         101/      B (LF)           ;Open the next location                     ____
         102/      C $N / 43 (LF)   ;Change to Numeric and reopen                     __ _    ____
         103/      44 (LF)          ;Open next loc                      ____
         104/      45 (CR)          ;Close.                      ____
         #104/     MOV  B,L (LF)    ;Output mode is now back          ____              ____
         105/      MOV  B,M (CR)    ;to Symbolic mode.                            ____

                                                               Page 17


17.0  SPECIAL SI8085 REGISTER NAMES      _______ ______ ________ _____


Registers that may be examined, modified, or printed:

A         8 bit accumulator
B         8 bit general purpose register
C         8 bit general purpose register
D         8 bit general purpose register
E         8 bit general purpose register
H         8 bit general purpose register
L         8 bit general purpose register
BC        16 bit register pair made up of registers B and C
DE        16 bit register pair made up of registers D and E
HL        16 bit register pair made up of registers H and L
SP        16 bit stack pointer
PC        16 bit program counter
PSW       16 bit processor status word (made up  of A and CC)
CC        8 bit condition code register
S         Sign condition bit
Z         Zero condition bit
P         Parity condition bit
CY        Carry condition bit
AC        Aux carry condition bit
ETIME     36 bit elapsed time counter
IE        8085 interrupt enable bit (0=enabled, 1=masked)
M5        RST5.5 enable mask
M6        RST6.5 enable mask
M7        RST7.5 enable mask
SID       Serial input data bit
SOD       Serial output data bit


Special items for output only:

TIME      Instruction cycle time
I5        Pending interrupt flag for RST5.5
I6        Pending interrupt flag for RST6.5
I7        Pending interrupt flag for RST7.5
CR        Generates a new line on output
          (used to cause multiple line trace)
ALL       Used to respecify the entire initial SI8085 trace
          format specification (must be the last item
          on a "<FORM" or "<PRINT" command line)
                                                               Page 18


18.0  COMMAND SUMMARY      _______ _______


(expr)\     Open memory location (expr)
(expr)$/    Open memory location (expr)

\           Reopen last open memory location
$/          Reopen last open memory location

(reg)$R     Open 8085 register (reg)
            Where (reg) is any one of the following:
            A,B,C,D,E,H,L,M,BC,DE,HL,SP,PC,PSW
            CC,S,Z,AC,P,CY,I,ETIME

(CR)        Close location or register

(LF)        Close location or register, then open
            next location in memory

^           Close location or register, then open
            location .-1 in memory

LABEL:      Define 'LABEL' at the current location

Symbol$K    Delete 'Symbol' from the symbol table
$$K         Delete all symbols

$S          Set output mode to Symbolic [temporary]
$$S         Set output mode to Symbolic [permanent]
$N          Set output mode to Numeric [temporary]
$$N         Set output mode to Numeric [permanent]
$A          Set output mode to ASCII [temporary]
$$A         Set output mode to ASCII [permanent]

(expr)=     Print the value of (expr) in the current
            output radix

=           Print the value of the last printed value
            in the current output radix. If the
            last printed item was a symbolic instruction,
            then the value of the opcode is printed
                                                               Page 19


(expr)$B    Set a breakpoint at location (expr)
$B          Set breakpoints at all locations
(expr)$$B   Remove a breakpoint from location (expr)
$$B         Remove breakpoints from all locations

(expr)$T    Set a tracepoint at location (expr)
$T          Set tracepoints at all locations
(expr)$$T   Remove a tracepoint from location (expr)
$$T         Remove tracepoints from all locations

(expr)$G    Go, starting at location (expr)
            [trace at tracepoints]
$G          Go, starting at location 0
            [trace at tracepoints]
(expr)$$G   Go, starting at location (expr)
            [never trace]
$$G         Go, starting at location 0
            [never trace]

(expr)$P    Proceed through (expr) breakpoints
            [trace at tracepoints]
$P          Proceed to next breakpoint
            [trace at tracepoints]
(expr)$$P   Proceed through (expr) breakpoints
            [never trace]
$$P         Proceed to next breakpoint
            [never trace]

(expr)$X    Execute (expr) instructions
            [always trace]
$X          Execute 1 instruction
            [always trace]
(expr)$$X   Execute (expr) instructions
            [never trace]
$$X         Execute 1 instruction
            [never trace]
                                                               Page 20


Full Word Commands____ ____ ________

<LOAD file.obj,file.lst
                  Load the object file into memory
                  and read the Symbol table from the
                  listing file

<COMFIL file.ext  Switch the command input to come from
                  "file.ext". This file is an exact
                  replacement of the normal keyboard input

<CORE n1:n2       Define simulated memory to have
                  addresses from "n1" to "n2"
                  [contents of already existing memory
                  will be changed]
<CORE n1          Define memory high address to "n1"
<CORE             Print the current high and low addresses
                  of memory
                  [note: I/O Channels 1-13 are closed
                  if memory is reassigned]

<RADIX IN r       Define the default input radix to "r"
<RADIX OUT r      Define the default output radix to "r"
<RADIX r          Define the default input and output
                  radices to "r"
<RADIX            Print the current default radices

<LIST n1:n2       List the contents of memory locations
                  "n1" to "n2" in current output mode
<LIST n           List the contents of location "n"
                  in current mode

<DUMP file.ext, n1:n2
                  Like the the "<LIST" command with the
                  output going to 'file.ext'. The output is
                  always in symbolic format.
<DUMP file.ext/I, n1:n2
                  Dumps the indicated range(s) to 'file.ext'
                  in Intel Object format
<DUMP file.ext/P, n1:n2
                  Dumps the indicated range(s) to 'file.ext'
                  in Prolog format

<FORM list        Set up the trace output format
<FORM             Print the current trace output format

<PRINT list       Print the contents of items in "list"
<PRINT            Print items in the current trace format

<ZERO n1:n2       Zero memory from location "n1" to "n2"
<ZERO n           Zero memory location "n"

<SET Symbol,expr  Set "Symbol" equal to "expr"
                                                               Page 21


<INT n[n1] inst   Define a special interrupt instruction
                  to occur in 'n' clock cycles, every
                  'n1' cycles. In addition to all
                  the normal 8085 instructions, the following
                  special 8085 internal interrupt instructions
                  are allowed: RST5.5 RST6.5 RST7.5 TRAP
<INT inst         Define an interrupt instruction
                  to occure once, as soon as the 8085 interrupt
                  system is enabled. Note that TRAP's
                  will occur regardless of the
                  setting of the interrupt masks
<INT              Prints a list of all currently defined
                  interrupt instructions
<NOINT inst       Removes all occurrences of
                  'inst' from the Interrupt Table
<NOINT            Clears the Interrupt Table

<PORT n IN(r),m   Define an input port
<PORT n OUT(r),m  Define an output port
                  Where:
                  "n" is the 8085 port number
                  "(r)" is the radix for the input or output.
                        If "(A)" then ASCII mode input and
                        output will be used.
                        If "(r)" is not specified then the
                        default input or output radix will
                        be used.
                  "m" is the I/O channel number for the input
                        or output. If the channel number
                        is not specified, then the TTY:
                        will be used
                  Note: Numeric input and output will prompt
                  on the terminal if I/O is to TTY:.

<PORT n           Deassign 8085 port "n"

<IOPEN file.dat,m Open "file.dat" for input on channel "m"

<OOPEN file.dat,m Open "file.dat" for output on channel "m"

<CLOSE m          Close the file on channel "m"

<REWIND m         Sets channel "m" back to the beginning
                  of the file (only allowed on input channels)
                                                               Page 22


Manual Conventions______ ___________

"n"               Is any legal number in the current input radix
                  If the number is in some other radix, the
                  proper radix suffix (^B,B,^D,D,O,Q,H)
                  must be used

"n1:n2"           Is a range of 8085 addresses. Each
                  of the addresses can be an expression.
                  If more than one range is desired, separate
                  each range with a comma (ie. 0:10,100:177).
                  A single address can be specified
                  inplace of any range specification
                  (ie. XYZ+1 is the same as XYZ+1:XYZ+1).

"expr"            Is any legal 8085 assembler expression
                  (Note: the character "." is used instead
                  of "$")

"m"               Is a channel number (in decimal) between
                  1 and 13 inclusive

"r"               Is a radix base (in decimal) between
                  2 and 16 inclusive

^C                While in the Debugger part of
                  SI8085, return control to the monitor.
                  At that point "REENTER" AND "CONTINUE" will
                  restart SI8085.
^C                While simulation is in progress,
                  return to the SI8085 debugger.



                   THE BOSTON SYSTEMS OFFICE, INC.
                    PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software, if you note  any  errors
in  this  manual,  or if you have any general suggestions, please feel
free to call us, or mail in this form with your comments.



Product:                                          Version:
----------------------------------------------------------------------
Reported by:                                      Date:
----------------------------------------------------------------------
Company:                                          Phone:
----------------------------------------------------------------------
Address:
----------------------------------------------------------------------
Host computer and operating system:
----------------------------------------------------------------------

Description of bug or comments:

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------

----------------------------------------------------------------------


             Please return, along with terminal sessions
                   and listings, if available, to:

                   The Boston Systems Office, Inc.
                           469 Moody Street
                    Waltham, Massachusetts  02154
                            (617) 894-7800
   W