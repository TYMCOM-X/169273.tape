


 







                             CA6800

                       BSO CROSS ASSEMBLER
       (to run on a DECsystem10 or 20 under TOPS-10 or 20)

                               FOR

                     6800 MICROPROCESSORS BY

                               AMI
                             HITACHI
                            MOTOROLA
                            FAIRCHILD
                             FUJITSU
                           THOMSON-CSF
                  (and all compatible devices)

                               ON

                         TYMSHARE, INC.





          This User's Manual is intended to  provide  a
          thorough  product description.  It is, to the
          best of our knowledge, complete and accurate.

          The Boston Systems Office does not,  however,
          warrant this document's accuracy nor shall it
          be held responsible for errors of content  or
          omission.  The Boston Systems Office reserves
          the right to  update  this  document  without
          prior notification.





        Copyright, THE BOSTON SYSTEMS OFFICE, INC.  1975
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800





                        Updated 12-Oct-78
                                                           Page 2


                       GENERAL INFORMATION

This cross  assembler,  one  of  a  family  of  cross  assemblers
produced  by The Boston Systems Office, is a powerful programming
tool used to develop microprocessor software.  It allows the user
to  take  full  advantage  of  a  larger  computer,  whether in a
time-sharing or in-house mode, thereby significantly reducing the
number of man-hours spent in program development.  The advantages
of a larger computer include:

          .Faster processing speeds
          .More powerful editors
          .Higher speed peripherals

These cross assemblers are written in the  assembly  language  of
the  host  computer.   They  require  only  8K words of memory to
assemble practically any size program.  The symbol table  can  be
expanded  to  fit  any  program  or  can  be shrunk to fit into a
smaller machine if required.  The assemblers  require  much  less
CPU  time  to  execute,  even at this reduced memory requirement,
when  compared  to  manufacturer   supplied   cross   assemblers.
Benchmarks   against   competitive  products  in  a  time-sharing
environment have shown that  savings  of  over  50%  are  common.
Similar   efficiencies   are  realized  when  using  an  in-house
computer.

The instruction set of  each  cross  assembler  is  the  same  as
documented   in   the  manuals  supplied  by  the  microprocessor
manufacturer.  Mnemonics  exist  for  data  manipulation,  binary
arithmetic,  jumps  to subroutines, etc.  In addition, all of the
BSO cross assemblers have full  macro  and  conditional  assembly
capabilities.   The  assembler outputs to disk, which may then be
punched on paper tape, loaded into a PROM  burner  or  down  line
loaded into memory, depending on your facilities.
                                                           Page 3


Cross  assemblers   are   now   available   for   the   following
microprocessors:

AMD AM9080A, AM8085A            Motorola M6800 & M3870
    & AM8048A                   Nat'l Semiconductor 8080, 4004,
AMI S2000, S6800, S6801,                            IMP-8, IMP-16C,
    S6802 & S9900                                   IMP-16L, PACE,
Fairchild F8, 6800, 6802,                           SC/MP & INS8900
          9440 & 3870           NEC uPD8080AF, uPD8080A, uPDZ80,
Fujitsu 6800, 6802 & 8048           uPD8048, uPD8035 & uPD8041
Hitachi 6800 & 6802             RCA CDP 1800 series (COSMAC),
Hughes 1802 & 1804                  8048 & 8085
Intel 8080, 8080A, 8085,        Rockwell PPS-4, PPS-8 & R6500
      8085A, 4040, 4004,        Signetics 8035 & 8048
      8008, 8021, 8022,         Synertek 6500 series
      8035, 8039, 8041,         Texas Instruments TI TMS1000, 8080,
      8048, 8748 & 8049                           9900 & 9985
Intersil 6100 & 8048            Thomson-CSF 6800
MOS Technology 6500 series      Zilog Z80
Mostek F8 & Z80


Please feel free to contact The Boston Systems Office for further
information  on any microprocessor not mentioned above, as we are
constantly adding to our product line.   BSO  will  also  produce
custom  assemblers and other application and system software on a
contract basis.
                                                           Page 4


                        TABLE OF CONTENTS



SECTION                                                   PAGE

   1.0    Operating Instructions                             5

   2.0    Source Program Preparation                         6

   3.0    Instruction Set                                    9

   4.0    Assembler Directives (Pseudo Ops)                 10

   5.0    Macro Statements                                  11

   6.0    Conditional Assembly                              13

   7.0    Object File Format                                14

   8.0    Error Handling                                    15

   9.0    Summary Of Differences                            17

  10.0    Sample Terminal Session                           18



APPENDICES:

  I.      USER PROBLEM AND SUGGESTION REPORT

  II.     DO YOU LIKE THIS MANUAL? (User manual suggestion and
          correction report)
                                                           Page 5


1.0 OPERATING INSTRUCTIONS    _________ ____________

To run the 6800 cross assembler, at the monitor level type:

     -R CA6800      _ ______

The assembler will respond with the following:

     6800 Cross Assembler Version 1A(26)
     Copyright, The Boston Systems Office, Inc. 1975
     (617) 894-7800
     Type /H for help
     *

At the asterisk, type:

     *PROG.OBJ,PROG.LST=PROG.SRC      __________________________

PROG.OBJ and PROG.LST  are  the  object  and  listing  files  the
assembler  will  create  and PROG.SRC is the source program being
assembled.  If file name extensions are  desired,  they  must  be
specified  explicitly,  there  are  no  defaults.   The filenames
PROG.OBJ, PROG.SRC and PROG.LST are  used  for  example  purposes
only.   Any  acceptable  file names and extensions desired may be
used.

If either the object or listing file is not desired, they may  be
omitted   from  the  specification,  as  the  following  examples
illustrate:

     *PROG.OBJ=PROG.SRC      _________________

     *,PROG.LST=PROG.SRC      __________________

Note that the comma is required when a listing  file  is  desired
but not an object file.

The listing file is in ASCII format and may be typed  or  printed
as follows:

    -TYPE PROG.LST           On your terminal     ____ ________

    -LIST TTY:=PROG.LST      On your terminal, page formatted     ____ _____________

The default object file format is an ASCII file and this  can  be
punched with the following command:

    -TYPE PROG.OBJ           On your terminal, if so equipped     ____ ________

The object and listing files may be printed or  punched  at  your
local branch office;  contact your salesman for details.
                                                           Page 6


2.0 SOURCE PROGRAM PREPARATION    ______ _______ ___________

PROGRAM ENTRY

Source programs may be placed on the host computer disk either by
the use of a text editor, to build new programs, or by reading in
an existing file from paper tape, magtape, etc.  Once  a  program
resides  on  disk,  a text editor may be used to alter or correct
the file in preparation for assembly.  It  is  not  necessary  to
remove  line  numbers from a file before assembly;  the assembler
will ignore them if they are present.


PROGRAM FORMAT

Each source statement consists of  strings  of  ASCII  characters
(fields)   terminated   by   a   carriage   return - line   feed.
Statements, or lines, of more  than  90  characters  will  appear
truncated  in  the  listing file but will be assembled correctly.
Lines beginning with an asterisk (*) will be treated as comments.
Blank  lines  and  lines with only a label field will generate no
code.  Any label on such a line will  be  assigned  to  the  next
available  address.   Each  source  statement  is made up of four
fields:  the label,  instruction,  operand  and  comment  fields,
which are defined below.

Label Field - A statement label consists of up to  6  characters,_____ _____
the  first  of which must be alphabetic and appear in column one.
The remaining characters may be alphabetic or numeric.   A  label
identifies  a  particular  location  in  the program uniquely and
should not duplicate another label  or  one  of  the  assembler's
permanent   symbols,   which   include  all  of  the  instruction
mnemonics, pseudo ops and the single characters A, B and X.

The label field is optional except in statements with an  EQU  or
MACRO statement.

Instruction Field - The instruction field must contain either  an___________ _____
instruction  mnemonic,  a pseudo op or the name of a user defined
macro (i.e., in a macro call).  The field may not start in column
one.

Operand Field - The operand field, if required,  may  consist  of_______ _____
one  or  more operands separated by commas.  An operand may be an
ASCII constant, statement label, character string or the A  or  B
accumulator.   Spaces,  except  when in a character string, ASCII
constant or macro call, will terminate the operand  field.   This
field  must  be  separated from the instruction field by at least
one space or tab.

Comment Field - This field is optional;  it will  appear  on  the_______ _____
assembly  listing  but  will  be  ignored  by the assembler.  The
comment field must be separated from  the  instruction  field  by
either a space or tab or an operand plus a space or tab.
                                                           Page 7


EXPRESSIONS

Expressions can be made up of user symbols and numeric and  ASCII
constants.   These  may be combined by the operators +, -, *, and
/.  Expressions will be evaluated  from  left  to  right  without
regard for operator hierarchy.  Parentheses are not allowed.

Symbols - Any alphanumeric  symbol  which  has  been  used  as  a_______
statement  label  or  equated  to  a  value  may  be  used  in an
expression.  In addition, an asterisk (*) may be used to indicate
the  location of the first byte of the current instruction.  Care
should be taken not to confuse its use with that of the  multiply
operator, also indicated by an asterisk.

Numeric Constants - Numeric Constants may be specified as binary,_______ _________
octal,  decimal  or  hexadecimal constants in either of two ways.
In the first the number  should  be  immediately  followed  by  a
constant  to  indicate the radix used.  In the second, the number
is prefixed by a symbol to indicate the radix.  Examples of  both
are shown below:

         % or B - binary             (e.g., %0101 or 0101B)
         @, O or Q - octal           (e.g., @015 or 015O or 015Q)
         D - decimal                 (e.g., 19 or 19D)
         $ or H - hexadecimal        (e.g., $0F8 or 0F8H)

Note that hex constants using the H suffix must always start with
a  decimal  digit  (0 if necessary) to distinguish them from user
symbols.  Numbers without any indication of radix  (no  preceding
symbol or trailing letter) will be treated as decimal numbers.

ASCII Constants - An ASCII constant is represented by a character_____ _________
preceded  by an apostrophe.  Characters with an octal value of 40
(space) through 137 (backarrow) are allowed as ASCII constants.
                                                           Page 8


ADDRESSING MODES

In  the  6800  microprocessors,  instructions  and  operands  can
specify the address or addresses of operands in several ways, all
of which are outlined below:

     1.  Inherent addressing - some or all of  the  operands  are
         implicit in the instruction.  For example, DAA - decimal
         adjust accumulator A

     2.  Accumulator addressing - the letters A and B are used in
         the   operand   field   to  indicate  one  of  the  6800
         accumulators.  When used, it must be the first  or  only
         operand.  For example, DEC B - decrement accumulator B

     3.  Relative  addressing  -  all  branch  instructions   are
         assembled  to  contain  an 8-bit signed number, which is
         the address of the branch destination  relative  to  the
         current  program  counter.  Therefore, the operand field
         of a branch instruction must be  an  expression  in  the
         range *-126<D<*+129 where * is the location of the first
         byte of the branch.

     4.  Immediate  addressing  -  an  operand  in   the   format
         '#Expression' indicates immediate addressing.  The value
         of the expression becomes the second (and third) byte(s)
         of  the  instruction  and  is used in the actual operand
         (rather than the address of the operand) when  the  6800
         executes the instruction.  For example, ADD B #2 - add 2
         to accumulator B

     5.  Indexed addressing - indexed addressing is indicated  to
         the assembler by any of the following constructions:

             X  -  equivalent to 0,X
             ,X
             Expression,X  -  where Expression is an 8-bit value

         For example, LDA A 2,X - load  accumulator  A  with  the
         third entry of the table addressed by X.

     6.  Direct addressing - locations in the first 256 bytes  of
         memory  may  be  addressed  by  a one byte address.  For
         instructions which allow  it,  the  assembler  will  use
         direct addressing if the expression in the operand field
         is less than 256  and  less  than  the  address  of  the                           ___
         current  instruction.   Otherwise  an  extended  address
         instruction (3 bytes instead of 2)  will  be  generated.
         For  example,  LDX 100 - load the index register with an
         address stored in memory location 100.

     7.  Extended addressing - in  cases  where  the  instruction
         does  not permit direct addressing the expression in the
         operand  field  will  be  assembled  as  a  full  16-bit
         address.  For example, STA A *+20 - store accumulator A.

                                                           Page 9


3.0 INSTRUCTION SET    ___________ ___

The following mnemonics represent the instruction  set  supported
by  this  cross assembler.  A detailed explanation of each may be
obtained  by  referring  to  the  microprocessor   manufacturer's
programming manual.


          ABA     CLC     PSH
          ADC     CLI     PUL
          ADD     CLR     ROL
          AND     CLV     ROR
          ASL     CMP     RTI
          ASR     COM     RTS
          BCC     CPX     SBA
          BCS     DAA     SBC
          BEQ     DEC     SEC
          BGE     DES     SEI
          BGT     DEX     SEV
          BHI     EOR     STA
          BIT     INC     STS
          BLE     INS     STX
          BLS     INX     SUB
          BLT     JMP     SWI
          BMI     JSR     TAB
          BNE     LDA     TAP
          BPL     LDS     TBA
          BRA     LDX     TPA
          BSR     LSR     TST
          BVC     NEG     TSX
          BVS     NOP     TXS
          CBA     ORA     WAI
                                                          Page 10


4.0 ASSEMBLER DIRECTIVES (PSEUDO OPS)    _________ __________ _______ ____

This cross assembler recognizes  the  following  pseudo  ops.   A
detailed  explanation of each may be obtained by referring to the
microprocessor manufacturer's programming manual.


          END
          ENDIF
          ENDM
          EQU
          FCB
          FCC
          FDB
          IF
          MACRO
          ORG
          PAGE
          RMB
          SPC

                                                          Page 11


5.0 MACRO STATEMENTS    _____ __________

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by writing just the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

MNAME     MACRO   DUM1,DUM2,...
            .
            .
          ENDM

where MNAME is the name of the macro and DUM1,DUM2,...  are dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may not be nested.  The macro body may  contain
the  words  MACRO  or  ENDM.   A macro may contain calls to other
macros.

Macro calls are of the form:

LABEL:    MNAME   ARG1,ARG2,...

where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated ll
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 12


MACRO EXAMPLES


PAUSE     MACRO           WAIT 4 MACHINE CYCLES
          NOP
          NOP
          NOP
          NOP
          ENDM




*BUILD 4 CHARACTER TABLE ENTRIES
ENTRY     MACRO   Q,R,S,T,VALUE
          FCC     'Q
          FCC     'R
          FCC     'S
          FCC     'T
          FCB     VALUE
          ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

WXYZ:     ENTRY   W,X,Y,Z,27


This would result in the following expansion:

          FCC     'W
          FCC     'X
          FCC     'Y
          FCC     'Z
          FCB     27
                                                          Page 13


6.0 CONDITIONAL ASSEMBLY    ___________ ________

Portions of a program can be assembled or not depending upon  the
value  of  an  expression.  This is accomplished by preceding the
conditional section of code with a statement  containing  the  IF
pseudo  op  and  the  expression  to  be evaluated and ending the
section with the pseudo op ENDIF.  This is useful  for  producing
several versions of the same program from a single source file by
changing only one parameter.

The expression following the IF pseudo op will  be  evaluated  by
the assembler and the results compared to zero.  If the result is
not zero the code will be assembled.  If the result is zero,  all
the  code  up  to  the  corresponding ENDIF statement is ignored.
Conditional statements may be nested to any depth.




Example of a conditional section of code:


          IF      VER-1   DON'T ASSEMBLE FOR VERSION 1
HSIZE     EQU     6
          ENDIF
          IF      VER     DON'T ASSEMBLE FOR VERSION 0
HSIZE     EQU     8
          ENDIF
                                                          Page 14


7.0 OBJECT FILE FORMAT    ______ ____ ______

The object file produced by this cross assembler is an ASCII file
in  the  format  required by the Motorola 6800 EXBUG leader.  The
record layout is shown below:

          S         First character of each record
          1 char    Record type  0-header, 1-data or 9-end
          2 chars   Number of pairs of bytes to follow
          4 chars   Load address of first byte of record
          2 chars   First data byte
          2 chars   For each additional data byte
          2 chars   Checksum

The checksum is the one's complement of the sum of all the  8-bit
bytes  in  the  record, including the one byte count and two byte
load address, with carries above 8 bits ignored.

A sample object file is shown in Section 10.0.

                                                          Page 15


8.0 ERROR HANDLING    _____ ________

The cross assembler will  print  error  messages  at  the  user's
terminal  and  on  the  program  listing  if the listing file was
requested in the specification.  Errors are indicated by  one  or
more  characters  at  the  left of the listing line in which they
occured.  In all cases the assembler  will  attempt  to  generate
some  code  for  each  source line so addresses further on in the
program do not get out of phase.  This also allows for a location
into which a patch may be inserted if the object tape is used for
debugging, even with its errors.


ERROR CODES

A - Address error.  Address expression greater than  16  bits  or
    negative.

D - Macro definition error.   The  definition  is  ignored.   The
    error is caused by one of the following conditions:

    1.  The MACRO statement does not have a label

    2.  The MACRO statement has over ten arguments

    3.  The MACRO statement label is the  same  as  a  previously
        defined user symbol or pseudo-op.


E - Expression error.  Caused by one of the following conditions:

    1.  Incorrect syntax, a value of zero assumed

    2.  Numeric expression overflowed 16 bits, it is truncated


F - Format  error.   Incorrect  number  of   operands   for   the
    instruction.

L - Label error.  Caused by one of the following conditions:

    1.  A symbol defined during pass 2  was  not  defined  during
        pass 1.  The symbol is left undefined.

    2.  A SET or EQU pseudo-op was not preceded by a label


M - Multiple definition of symbol.  The  user  is  attempting  to
    define  a  symbol  (with something other than DEFL) which was
    already defined.  The second definition is ignored.

N - Nesting error.  An ENDM  or  ENDIF  appeared  which  was  not
    paired  with  a  MACRO  or  IF  statement.   The statement is
    ignored.
O - Op code error.  An unknown op code detected.  Three bytes  of
    zero generated.
                                                          Page 16


P - Phase error.  A symbol has a different value in pass  2  than
    in pass 1.  The pass 1 value prevails.  This error is usually
    caused by one of the following conditions:

    1.  An IF statement had a different value during pass 2  than
        in pass 1.

    2.  A macro was called before it was defined.

Q - Questionable  syntax.   The  assembler  has   encountered   a
    statement  which  it  does  not completely understand, due to
    such things as surplus arguments, unrecognized instruction or
    null label.

R - Register error.  The register specified  is  illegal  for  an
    instruction.

S - Symbol error.  A macro name  was  used  as  a  symbol  in  an
    expression and is assumed to have a value of zero.

U - Undefined symbol.  A symbol was undefined and is  assumed  to
    have a value of zero.

V - Value  error.   Use  of  an  expression  too  large  for  the
    instruction field or one that is negative.

W - Wasted byte warning.  Caused by forward referencing page zero
    locations.

X - Indexing  error.   Either  the  symbol  X  was  used  in   an
    expression  or  there  was  no  X  following  the comma in an
    apparently indexed address.  In the  first  case,  the  X  is
    ignored, in the second, indexing is assumed.

Y - Accumulator symbol (A or B) used in an expression.  The A  or
    B is ignored.
                                                          Page 17


9.0 SUMMARY OF DIFFERENCES    _______ __ ___________

This cross assembler is compatible with the one supplied for  the
6800  by  Motorola  with  a few exceptions.  These exceptions are
listed below:



     1.  Statement   labels   may   not   duplicate   instruction
         mnemonics.

     2.  The  OPT,  MON  and  NAM  pseudo  ops  have   not   been
         implemented.

     3.  A source file may contain only one program.

     4.  Conditional  assemblies  are  allowed  by   this   cross
         assembler.

     5.  This cross assembler has a full macro capability.

                                                          Page 18


10.0 SAMPLE TERMINAL SESSION     ______ ________ _______


-TYPE CA6800.SRC ____ __________

          NAM     M6800
* REVISION 01
          ORG     256
COUNT     EQU     @3      @ INDICATES OCTAL VALUE
START     LDS     #STACK  INZ STACK POINTER
          LDX     ADDR
          LDA B   #COUNT  IMMEDIATE ADDRESSING
BACK      LDA A   10      DIRECT ADDRESSING
          CMP A   2,X     INDEXED ADDRESSING
          BEQ     FOUND   RELATIVE ADDRESSING
          DEX             IMPLIED ADDRESING
          DEC B           ACCUMULATOR ADDRESS. ONLY
          BNE     BACK
          WAI             WAIT FOR INTERRUPT
FOUND     JSR     SUBRTN  JUMP TO SUBROUTINE
          JMP     START   EXTENDED ADDRESSING
* COMMENT STATEMENT NOTE TRUNC. 01234567890123
SUBRTN    TAB             COMMENT FIELD TRUNC. 012
          ORA A   BYTE    SET MOST SIGNIFICANT BIT
          RTS             RETURN FROM SUBROUTINE
          RMB     20      SCRATCH AREA FOR STACK
STACK     RMB     1       START OF STACK
BYTE      FCB     $80     FORM CONSTANT BYTE
          FCB     $10,$4  $ INDICATES HEXADECIMAL
ADDR      FDB     DATA    FORM CONSTANT DBLE BYTE
DATA      FCC     'SET'   FORM CONSTANT DBLE STRING (ASCII)
          END



-R CA6800 _ ______
6800 Cross Assembler Version 1A(26)
Copyright, The Boston Systems Office, Inc. 1975
(617) 894-7800
Type /H for help
*CA6800.OBJ,CA6800.LST=CA6800.SRC ________________________________

No error(s) detected
Assembler runtime 00:00:00.41
Highest 6800 address used = 013A (hex)
                                                          Page 19


-TYPE CA6800.LST ____ __________

6800 cross assembler Version 1A(30),
File DSK:CA6800.SRC  14:13:19 14-Dec-77  Page 1
M6800

Errors Addr   Obj Code Seq  Source statement

                         1         NAM    M6800
                         2  * REVISION 01
       0100              3         ORG    256
                  0003   4  COUNT  EQU    @3     @ INDICATES OCTAL VALUE
       0100  8E0132      5  START  LDS    #STACK INZ STACK POINTER
       0103  FE0136      6         LDX    ADDR
       0106  C603        7         LDA B  #COUNT IMMEDIATE ADDRESSING
       0108  960A        8  BACK   LDA A  10     DIRECT ADDRESSING
       010A  A102        9         CMP A  2,X    INDEXED ADDRESSING
       010C  2705       10         BEQ    FOUND  RELATIVE ADDRESSING
       010E  09         11         DEX           IMPLIED ADDRESING
       010F  5A         12         DEC B         ACCUMULATOR ADDRESS. ONLY
       0110  26F6       13         BNE    BACK
       0112  3E         14         WAI           WAIT FOR INTERRUPT
       0113  BD0119     15  FOUND  JSR    SUBRTN JUMP TO SUBROUTINE
       0116  7E0100     16         JMP    START  EXTENDED ADDRESSING
                        17  * COMMENT STATEMENT NOTE TRUNC. 01234567890123
       0119  16         18  SUBRTN TAB           COMMENT FIELD TRUNC. 012
       011A  BA0133     19         ORA A  BYTE   SET MOST SIGNIFICANT BIT
       011D39           20         RTS           RETURN FROM SUBROUTINE
       011E             21         RMB    20     SCRATCH AREA FOR STACK
       0132             22  STACK  RMB    1      START OF STACK
       0133  80         23  BYTE   FCB    $80    FORM CONSTANT BYTE
       0134  1004       24         FCB    $10,$4 $ INDICATES HEXADECIMAL
       0136  0138       25  ADDR   FDB    DATA   FORM CONSTANT DBLE BYTE
       0138  534554     26  DATA   FCC    'SET'  FORM CONSTANT DBLE STRING (ASCII)
       013B             27         END

No error(s) detected
Assembler runtime 00:00:00.41
Highest 6800 address used = 013A (hex)

        SYMBOL TABLE
 
ADDR    0136    BACK    0108    BYTE    0133    COUNT   0003    
DATA    0138    FOUND   0113    STACK   0132    START   0100    
SUBRTN  0119    
                                                               Page 20


-TYPE CA6800.OBJ ____ __________

S00600004844521B
S11301008E0132FE0136C603960AA1022705095A5A
S111011026F63EBD01197E010016BA013339F0
S10B0133801004013853455407
S9030000FC



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------



           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office, Inc.
                        469 Moody Street
                  Waltham, Massachusetts  02154



                         (617) 894-7800
                    DO YOU LIKE THIS MANUAL??



BSO  is  constantly  working  to  improve  the  quality  of   our
documentation.   If  you have any constructive comments regarding
this or any BSO publication, we would appreciate it if you  would
take  a few moments to jot them down in the space below, and then
mail the form to us at 469 Moody Street,  Waltham,  Massachusetts
02154.  Our customers' comments are always appreciated!

Title of document:
-----------------------------------------------------------------
Date of document revision:
-----------------------------------------------------------------
Your name:                                  Today's date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------

Please rate this manual in the following categories with a number
between 0 (worst) and 5 (best):

Overall Readability: _________

Organization:        _________

Accuracy:            _________


Please  write  any  general  comments below.  If you require more
space, feel free to attach as many additional pages as you  wish.
Thanks for your help!
    .