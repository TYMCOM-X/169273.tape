


 







                             CA6500

                       BSO CROSS ASSEMBLER
       (to run on a DECsystem10 or 20 under TOPS-10 or 20)

                               FOR

                     6500 MICROPROCESSORS BY

                         MOS TECHNOLOGY
                     ROCKWELL INTERNATIONAL
                            SYNERTEK
                  (and all compatible devices)

                               ON

                         TYMSHARE, INC.





          This User's Manual is intended to  provide  a
          thorough  product description.  It is, to the
          best of our knowledge, complete and accurate.

          The Boston Systems Office does not,  however,
          warrant this document's accuracy nor shall it
          be held responsible for errors of content  or
          omission.  The Boston Systems Office reserves
          the right to  update  this  document  without
          prior notification.





         Copyright, THE BOSTON SYSTEMS OFFICE, INC. 1976
                        469 MOODY STREET
                       WALTHAM, MA  02154
                         (617) 894-7800





                        Updated MAY-22-79
                                                           Page 2


                       GENERAL INFORMATION

The Boston Systems Office offers a family of extremely  effective
microprocessor   software   development  tools.   These  products
(cross-assembler, cross-compilers, simulator/debuggers, and other
products)  allow the user to take full advantage of the speed and
versatility of  microprocessor  program  development  on  a  host
computer,  thereby  significantly reducing the number of hours or
days spent in program development.   The  advantages  of  a  host
system  versus  a  microprocessor-based  development  programming
system include:

          - Faster processing speeds
          - More powerful editors
          - Multi-user capability
          - Higher speed peripherals
          - Multi-microprocessor capability on one system
          - Lower station cost in multi-user configurations

BSO/PASCAL is a new product of the BSO line  of  cross-compilers,
which has been specially optimized for microprocessor application
design.  Its benefits include faster software development through
the  use of a high-level language and a much higher percentage of
error-free code  because  of  PASCAL's  particular  capabilities.
Other advantages are simplified program maintenance due to better
program readability and a  recompilation  capability  which  will
permit  one source language program to be compiled for any number
of  suitable  microprocessors.   BSO/PASCAL  supports   interrupt
handling   instructions,   record-oriented   variables,  enhanced
microprocessor statements, extensive compiler-generated  comments
and many other features.

BSO's cross assemblers, unlike most other similar  products,  are
written  in  the  assembly  language  of the host computer.  They
generally require no more than 10-18K words of memory to assemble
any  program.   The  comprehensive  program  symbol  table can be
expanded for any program requirement or selectively condensed for
a  smaller  system,  as  required.  These assemblers require much
less  CPU  time  to  execute,  even  at   this   reduced   memory
requirement,  than manufacturer-supplied cross-assemblers written
in higher-level languages such as  Fortran.   Benchmarks  against
competitive  cross-assemblers  in  a timesharing environment have
shown that time  savings  of  up  to  50%  are  common.   Similar
efficiencies   can  also  be  realized  when  using  an  in-house
computer.

                                                           Page 3


The instruction set accepted by each cross-assembler is the  same
as  documented  in  the  assembly language manual supplied by the
microprocessor   manufacturer.    Mnemonics   exist   for    data
manipulation,  binary  arithmetic, jumps to subroutines, etc.  In
addition, all of  BSO's  cross-assemblers  have  full  macro  and
extended  conditional  assembly  capabilities.   The  object file
produced can then be processed by BSO's compatible  cross-linkage
editor, along with other relocatable and absolute object modules.
The assembled code can then be loaded directly  to  any  standard
peripheral  device  on  the  system.   The  absolute  load module
produced by the cross-linkage editor  can  be  punched  on  paper
tape,  loaded into a PROM burner, or downline loaded into memory,
depending on the available facilities.   The  assembler  is  also
capable  of  producing  an  object  format with additional symbol
information,  suitable  for  input  to  one  of  BSO's  companion
integrated symbolic simulator/debuggers.

Cross assemblers are now available for  all  major  manufacturers
including   Advanced   MicroDevices,   AMI,  Fairchild,  Fujitsu,
Hitachi,  Intel,  Intersil,  MOS  Technology,  Mostek,  Motorola,
National  Semiconductor, NEC, RCA, Rockwell, Signetics, Synertek,
Thomson-CSF, Texas Instruments, Zilog and others.

Please feel free to call  the  sales  department  of  the  Boston
Systems  Office  at (617) 894-7800 for further information on any
microprocessor including those not mentioned above.
                                                           Page 4


                        TABLE OF CONTENTS



SECTION                                                   PAGE

   1.0    OPERATING INSTRUCTIONS                             5

   2.0    SOURCE PROGRAM PREPARATION                         6

   3.0    INSTRUCTION SET                                    9

   4.0    ASSEMBLER DIRECTIVES (PSEUDO OPS)                 10

   5.0    MACRO STATEMENTS                                  11

   6.0    CONDITIONAL ASSEMBLY                              13

   7.0    OBJECT FILE FORMAT                                14

   8.0    ERROR HANDLING                                    15

   9.0    SUMMARY OF DIFFERENCES                            17

  10.0    SAMPLE TERMINAL SESSION                           18


APPENDICES:

  I.      USER PROBLEM AND SUGGESTION REPORT

  II.     DO YOU LIKE THIS MANUAL? (User manual suggestion
          and correction report)
                                                           Page 5


1.0 OPERATING INSTRUCTIONS    _________ ____________

TO RUN THE 6500 CROSS ASSEMBLER, AT THE MONITOR LEVEL TYPE:

     -R CA6500      _ ______

THE ASSEMBLER WILL RESPOND WITH THE FOLLOWING:

     6500 MOS TECHNOLOGY SERIES CROSS ASSEMBLER VERSION 2(10)
     COPYRIGHT, THE BOSTON SYSTEMS OFFICE, INC. 1976
     (617) 894-7800
     *

At the asterisk, type:

     *PROG.OBJ,PROG.LST=PROG.SRC      __________________________

PROG.OBJ and PROG.LST  are  the  object  and  listing  files  the
assembler  will  create  and PROG.SRC is the source program being
assembled.  If file name extensions are  desired,  they  must  be
specified  explicitly,  there  are  no  defaults.   The filenames
PROG.OBJ, PROG.SRC and PROG.LST are  used  for  example  purposes
only.   Any  acceptable  file names and extensions desired may be
used.

If either the object or listing file is not desired,  it  may  be
omitted   from  the  specification,  as  the  following  examples
illustrate:

     *PROG.OBJ=PROG.SRC      _________________

     *,PROG.LST=PROG.SRC      __________________

Note that the comma is required when a listing  file  is  desired
but not an object file.

The listing file is in ASCII format and may be typed  or  printed
as follows:

    -TYPE PROG.LST           On your terminal     ____ ________

    -LIST TTY:=PROG.LST      On your terminal, page formatted     ____ _____________

The default object file format is an ASCII file and this  can  be
punched with the following command:

    -TYPE PROG.OBJ           On your terminal, if so equipped     ____ ________

The object and listing files may be printed or  punched  at  your
local branch office;  contact your salesman for details.
                                                           Page 6


2.0 SOURCE PROGRAM PREPARATION    ______ _______ ___________

PROGRAM ENTRY

Source programs may be placed on the host computer disk either by
the use of a text editor, to build new programs, or by reading in
an existing file from paper tape, magtape, etc.  Once  a  program
resides  on  disk,  a text editor may be used to alter or correct
the file in preparation for assembly.  It  is  not  necessary  to
remove  line  numbers from a file before assembly;  the assembler
will ignore them if they are present.


PROGRAM FORMAT

Each source statement consists of  strings  of  ASCII  characters
(fields)   terminated   by   a   carriage   return - line   feed.
Statements, or lines, of more  than  90  characters  will  appear
truncated  in  the  listing file but will be assembled correctly.
Lines beginning with a semicolon (;) will be treated as comments.
Blank  lines  and  lines with only a label field will generate no
code.  Any label on such a line will  be  assigned  to  the  next
available  address.   Each  source  statement  is made up of four
fields:  the label,  instruction,  operand  and  comment  fields,
which are defined below.

Label Field - A statement label consists of up to  6  characters,_____ _____
the  first  of which must be alphabetic and appear in column one.
The remaining characters may be alphabetic or numeric.   A  label
identifies  a  particular  location in the program and should not
duplicate another label  or  one  of  the  assembler's  permanent
symbols,  which  include all of the instruction mnemonics, pseudo
ops and the single characters A, X, Y, S and P.

The label field is optional except in statements with  the  MACRO
pseudo op.

Instruction Field - The instruction field must contain either  an___________ _____
instruction  mnemonic,  a pseudo op or the name of a user defined
macro (i.e., in a macro call).  The field may not start in column
one.

Operand Field - The operand field, if required,  may  consist  of_______ _____
one  or  more operands separated by commas.  An operand may be an
ASCII constant, statement label  or  character  string.   Spaces,
except  when  in  a  character  string (.BYTE pseudo op) or macro
call, will terminate the  operand  field.   This  field  must  be
separated  from  the  instruction  field by at least one space or
tab.

Comment Field - This field is optional;  it will  appear  on  the_______ _____
assembly  listing  but  will  be  ignored  by the assembler.  The
comment field must be separated from  the  instruction  field  by
either a space or tab or an operand plus a space or tab.
                                                           Page 7


EXPRESSIONS

Expressions can be made up of user symbols and numeric and  ASCII
constants.   These  may be combined by the operators +, -, *, and
/.  Expressions will be evaluated  from  left  to  right  without
regard for operator hierarchy.  Parentheses are not allowed.

Symbols - Any alphanumeric  symbol  which  has  been  used  as  a_______
statement  label  or  equated  to  a  value  may  be  used  in an
expression.  In addition, an asterisk (*) may be used to indicate
the  location of the first byte of the current instruction.  Care
should be taken not to confuse its use with that of the  multiply
operator, also indicated by an asterisk.

Numeric Constants - Numeric Constants may be specified as binary,_______ _________
octal,  decimal  or  hexadecimal constant by prefixing the number
with a symbol to indicate the radix.  Examples are shown below:

             % - binary              (e.g., %0101)
             @ - octal               (e.g., @015)
               - decimal             (e.g., 19)
             $ - hexadecimal         (e.g., $F8)

Numbers without any indication of  radix  (no  preceding  symbol)
will be treated as decimal numbers.

ASCII Constants - An ASCII constant is represented by a character_____ _________
preceded  by an apostrophe.  Characters with an octal value of 40
(space) through 137 (backarrow) are allowed as ASCII constants.






ADDRESSING MODES

In  the  6500  microprocessors,  instructions  and  operands  can
specify the address or addresses of operands in several ways, all
of which are outlined below:

     1.  Immediate  Addressing  -  an  operand  in   the   format
         '#Expression' indicates immediate addressing.  The value
         of  the  expression  becomes  the  second  byte  of  the
         instruction  and  is  used in the actual operand (rather
         than the address of the operand) when the 6500  executes
         the  instruction.   For  example,  LDA  #2  -  load  the
         accumulator with the constant 2.
                                                           Page 8


     2.  Absolute Addressing  -  the  two  byte  address  of  the
         operand  is assembled into the second and third bytes of
         the instruction.  For example,  LDA  DATA1  -  load  the
         contents of the location DATA1 into the accumulator.

     3.  Zero Page Address - the address of  an  operand  in  the
         first  256  bytes  of  memory is assembled as the second
         byte of the instruction.  For example, LDA DATA0 -  load
         the contents of location DATA0 into the accumulator.

         Note that this format is identical to that  of  absolute
         addressing.  The assembler will determine whether a zero
         page address is possible for an operand.  If it  is  not
         possible,   the   instruction   will  generate  absolute
         addresses and, if the forward reference  is  to  a  page
         zero location, a W error.

     4.  Accumulator Addressing - the  three  shift  instructions
         allow  specification  of the accumulator as the operand.
         For example ASL A

     5.  Indexed Indirect  Addressing  -  operands  of  the  form
         (expression,X)  are  indexed indirect.  Only the X index
         may be used.  For example, LDA (5,X)

     6.  Indirect Indexed  Addressing  -  operands  of  the  form
         '(expression),Y' are indirect indexed.  Only the Y index
         can be used.  For example, LDA (5),Y

     7.  Zero Page Indexed - zero page addresses can be  indexed.
         Index  X  is  used  for all cases except the LDX and STX
         instructions, which use the Y index.   For  example  LDA
         DATA0,X or STX 5,Y

     8.  Absolute Indexed - absolute addresses can be indexed  by
         either X or Y.  For example, LDA DATA1,X or STA DATA1,Y

     9.  Relative Addressing - the  second  byte  of  all  branch
         instructions   contains   the   offset   of  the  branch
         destination from the  instruction  itself.   The  branch
         must be within 127 + or - of the branch instruction plus
         two.  For example, BPL *+20

    10.  Indirect Addressing  -  the  JMP  instruction  allows  a
         location  in  memory  to  point  to the destination of a
         jump.  For example JMP (POINTER)

                                                           Page 9


3.0 INSTRUCTION SET    ___________ ___

The following mnemonics represent the instruction  set  supported
by  this  cross assembler.  A detailed explanation of each may be
obtained  by  referring  to  the  microprocessor   manufacturer's
programming manual.


        ADC     CPY     PLP
        AND     DEC     ROL
        ASL     DEX     ROR
        BCC     DEY     RTI
        BCS     EOR     RTS
        BEQ     INC     SBC
        BIT     INX     SEC
        BMI     INY     SED
        BNE     JMP     SEI
        BPL     JSR     STA
        BRK     LDA     STX
        BVC     LDX     STY
        BVS     LDX     TAX
        CLC     LSR     TAY
        CLD     NOP     TSX
        CLI     ORA     TXA
        CLV     PHA     TXS
        CMP     PHP     TXA
        CPX     PLA
                                                          Page 10


4.0 ASSEMBLER DIRECTIVES (PSEUDO OPS)    _________ __________ _______ ____

This cross assembler recognizes  the  following  pseudo  ops.   A
detailed  explanation of each may be obtained by referring to the
microprocessor manufacturer's programming manual.


                .BYTE
                .DBYTE
                .END
                .ENDIF
                .ENDM
                .IF
                .MACRO
                .WORD
                =     to equate a symbol to an expression


         Note that a pseudo op, except for "=", must begin with a
         period.

                                                          Page 11


5.0 MACRO STATEMENTS    _____ __________

The macro facility of this cross assembler permits the programmer
to  define  a  block  of  source  statements  which  can  be used
repeatedly throughout the program by writing just the macro  name
in the instruction field.  This makes it possible to have shorter
source files and more intelligible  program  listings.   Existing
programs  can also be modified by changing a macro definition and
re-assembling rather than by large scale editing.

Macro definitions are of the form:

MNAME   .MACRO  DUM1,DUM2,...
          .
          .
        .ENDM

where MNAME is the name of the macro and DUM1,DUM2...  are  dummy
argument  names  (if  any).  Dummy argument names have no meaning
outside a macro definition.  Within the macro definition they may
appear  anywhere  (in  any  field) and all occurrences of a dummy                                       ___
argument will be replaced by the actual argument strings when the
macro  is  used.  It should be noted that spaces or tabs trailing
the final argument in both the  definition  and  call  statements
will be taken as part of that argument.  To avoid this, the first
character after the last argument in  each  statement  should  be
either a CR-LF or a semicolon.

Macro definitions may not be nested.  The macro body  should  not
contain  the  words  MACRO or ENDM.  A macro may contain calls to
other macr
Macro calls are of the form:

LABEL:  MNAME   ARG1,ARG2,...

where the LABEL is optional and MNAME is the name of a previously
defined   macro.    The   actual  arguments  (ARG1,ARG2,...)  are
substituted as  character  strings  into  the  positions  of  the
corresponding  dummy  arguments  in the macro definition.  Actual
arguments to a macro call should be separated from each other  by
commas.   Arguments omitted from a macro call are treated as null
strings;  extra arguments are ignored.  Notice that arguments can
be  expressions,  instruction  mnemonics,  comments or labels for
statements inside the macro expansion.  The  macro  processor  is
only  concerned  with  character  strings, which it passes to the
rest of the assembler.

Examples of a macro are shown on the following page.
                                                          Page 12


MACRO EXAMPLES


:WAIT 4 MACHINE CYCLES
PAUSE   .MACRO
        NOP
        NOP
        NOP
        NOP
        .ENDM




;BUILD 4 CHARACTER TABLE ENTRIES
ENTRY   .MACRO  Q,P,S,T,VALUE
        .WORD   'Q
        .WORD   'P
        .WORD   'S
        .WORD   'T
        .WORD   VALUE
        .ENDM


An example of a macro call to build entry WXYZ using  the  second
example above:

WXYZ:   ENTRY   W,X,Y,Z,27


This would result in the following expansion:

        .WORD   'W
        .WORD   'X
        .WORD   'Y
        .WORD   'Z
        .WORD   27
                                                          Page 13


6.0 CONDITIONAL ASSEMBLY    ___________ ________

Portions of a program can be assembled or not depending upon  the
value  of  an  expression.  This is accomplished by preceding the
conditional section of code with a statement containing  the  .IF
pseudo  op  and  the  expression  to  be evaluated and ending the
section with the pseudo op .ENDIF.  This is useful for  producing
several versions of the same program from a single source file by
changing only one parameter.

The expression following the .IF pseudo op will be  evaluated  by
the assembler and the results compared to zero.  If the result is
not zero the code will be assembled.  If the result is zero,  all
the code up to the next .ENDIF statement is ignored.  Conditional
statements may be nested to any depth.




Example of a conditional section of code:


        .IF     VER-1   DON'T ASSEMBLE FOR VERSION 1
HSIZE   =       6
        .ENDIF
        .IF     VER     DON'T ASSEMBLE FOR VERSION 0
HSIZE   =       8
        .ENDIF
                                                          Page 14


7.0 OBJECT FILE FORMAT    ______ ____ ______

The object file produced by this cross assembler is an ASCII file
in  the format specified by MOS Technology.  The record layout is
shown below:

        ;         First character of each record
        2 chars   Number of data bytes to follow
        4 chars   Load address of first byte of record
        2 chars   First data byte
        2 chars   For each additional data byte
        4 chars   Checksum

The checksum is the sum of all the preceding bytes in the record.
A zero length record (;00) indicates the end of the object file.

A sample object file is shown in Section 10.0.

                                                          Page 15


8.0 ERROR HANDLING    _____ ________

The cross assembler will  print  error  messages  at  the  user's
terminal  and  on  the  program  listing  if the listing file was
requested in the specification.  Errors are indicated by  one  or
more  characters  at  the  left of the listing line in which they
occured.  In all cases the assembler  will  attempt  to  generate
some  code  for  each  source line so addresses further on in the
program do not get out of phase.  This also allows for a location
into which a patch may be inserted if the object tape is used for
debugging, even with its errors.


ERROR CODES

A - Address error.  Address expression too large for  the  number
    of  bits  in  the  address  instruction (8 or 16) or a branch
    further than 128 bytes.  The address is truncated and used.

B - Balance error.  Indicates an odd number of apostrophes in  an
    ASCII string.

E - Expression  error.   Poorly  constructed  expression   (e.g.,
    missing  operand  or  instruction)  or  use of an instruction
    mnemonic in an expression.  The latter case will contribute a
    one  byte  value  to  the  expression in case that was really
    intended.

F - Format error.  Usually caused by terminating the  operand  or
    instruction field with an unexpected character.

I - Illegal character.  Occurs if a digit in a number  is  larger
    than the radix specified (e.g., @98).

M - Multiple definition of statement label or symbol.  Either the
    same  symbol  was  used to label more than one statement or a
    statement label is the same as  an  instruction  mnemonic  or
    permanent symbol.  Note that the '=' pseudo op can define the
    same symbol more than once without error.

N - Nesting error.   Caused  by  improperly  paired  IF:ENDIF  or
    MACRO:ENDM  pseudo  ops or a missing delimiter in a character
    string in an .BYTE statement.

P - Phase error.  A statement label is not in the  same  location
    during  pass 2 of the assembler as it was in pass 1.  Usually
    caused by a previous error in an equate (=)  statement  or  a
    macro call to a macro before it was defined.

Q - Questionable syntax.  Indicates a misspelled, unrecognized or
    missing instruction.

R - Register error.  The register specified  is  illegal  for  an
    instruction.
                                                          Page 16


U - Undefined symbol.  Use of a symbol in an expression or in the
    operand  field  that  was  not previously defined.  The value
    used for the symbol is zero.

V - Value error.  The value of a byte in a .BYTE command  exceeds
    255.  The value is truncated and used.

W - Wasted byte warning.  Caused by forward referencing page zero
    locations.

X - Indexing  error.   Either  the  symbol  X  was  used  in   an
    expression  or  there  was  no  X  following  the comma in an
    apparently indexed address.  In the  first  case,  the  X  is
    ignored;  in the second case, indexing is assumed anyway.

                                                          Page 17


9.0 SUMMARY OF DIFFERENCES    _______ __ ___________

This cross assembler is compatible with the one supplied for  the
6500  by  MOS Technology with a few exceptions.  These exceptions
are listed below:



     1.  The following features conform to BSO standards and  may
         conflict   with   similar   features   offered   by  the
         manufacturer.

                (A)  Macro Processing
                (B)  Conditional Assembly Directives
                (C)  Listing Control
                (D)  Relocation Directives and Control

     2.  Conditional  assemblies  are  allowed  by   this   cross
         assembler.

     3.  This cross assembler has a full macro capability.


Please note that in most cases, macros can be written by the user
to  duplicate  directives  that are supported by the manufacturer
but do not appear in BSO software.

The list of differences above is accurate  to  the  best  of  our
knowledge,  however BSO does not warrant that it is complete.  In
addition, this or  any  other  BSO  product  is  not  necessarily
compatible  with  any past, current or future implementation of a
similar product by any microprocessor manufacturer.
                                                          Page 18


10.0 SAMPLE TERMINAL SESSION     ______ ________ _______


-TYPE CA6500.SRC ____ __________

; SAMPLE PROGRAM FOR MOS TECHNOLOGY 6500 MICRO
;
; THIS PROGRAM TAKES TWO 8 BIT NUMBERS AND
;    MULTIPLIES THEM TOGETHER.
;
        *=$200
;
MULT    LDA      0
        STA     RESULT  ZERO RESULT TO START
        STA     RESULT+1
        STA     ATMP    ZERO HIGH BYTE OF ATMP
        LDA     AAA
        STA     ATMP+1  GET FIRST OPERAND INTO ATMP
        LDA     BBB
        STA     BTMP    SECOND OPERAND INTO BTMP
;
M1      LSR     BTMP    SHIFT LOW BIT OF BTMP INTO CARRY
        PHP             SAVE FLAGS (WILL NEED ZERO FLAG)
        BCC     M2
        CLC             BIT WAS SET -- ADD ATMP TO RESULT
        LDA     RESULT+1
        ADC     ATMP+1
        STA     RESULT+1 LOW BYTE
        LDA     RESULT
        ADC     ATMP
        STA     RESULT
;
M2      ASL     ATMP+1  SHIFT ATMP LEFT
        ROL     ATMP
        PLP             RESTORE FLAGS
        BNE     M1      IF BTMP NOT ZERO -- LOOP
;
DONE    JMP     *       FINISHED -- RESULT HAS ANSWER
;
ATMP    .DBYTE  0
BTMP    .BYTE   0
;
AAA     .BYTE   0
BBB     .BYTE   0
RESULT  .DBYTE  0
;
        .END

-R CA6500 _ ______
6500 MOS Technology series Cross Assembler Version 2(10)
Copyright, The Boston Systems Office, Inc. 1976
(617) 894-7800
*CA6500.OBJ,CA6500.LST=CA6500.SRC ________________________________

EXIT
                                                               Page 19


-TYPE CA6500.LST ____ __________

                ; SAMPLE PROGRAM FOR MOS TECHNOLOGY 6500 MICRO
                ;
                ; THIS PROGRAM TAKES TWO 8 BIT NUMBERS AND
                ;    MULTIPLIES THEM TOGETHER.
                ;
                        *=$200
                ;
0200 A9 00      MULT   LDA     #0
0202 8D 41 02          STA     RESULT    ZERO RESULT TO START
0205 8D 42 02          STA     RESULT+1
0208 8D 3C 02          STA     ATMP      ZERO HIGH BYTE OF ATMP
020B AD 3F 02          LDA     AAA
020E 8D 3D 02          STA     ATMP+1    GET FIRST OPERAND INTO ATMP
0211 AD 40 02          LDA     BBB
0214 8D 3E 02          STA     BTMP      SECOND OPERAND INTO BTMP
                ;
0217 4E 3E 02   M1     LSR     BTMP      SHIFT LOW BIT OF BTMP INTO CARRY
021A 08                PHP               SAVE FLAGS (WILL NEED ZERO FLAG)
021B 90 13             BCC     M2
021D 18                CLC               BIT WAS SET -- ADD ATMP TO RESULT
021E AD 42 02          LDA     RESULT+1
0221 6D 3D 02          ADC     ATMP+1
0224 8D 42 02          STA     RESULT+1  LOW BYTE
0227 AD 41 02          LDA     RESULT
022A 6D 3C 02          ADC     ATMP
022D 8D 41 02          STA     RESULT
                ;
0230 0E 3D 02   M2     ASL     ATMP+1    SHIFT ATMP LEFT
0233 2E 3C 02          ROL     ATMP
0236 28                PLP               RESTORE FLAGS
0237 D0 DE             BNE     M1        IF BTMP NOT ZERO -- LOOP
                ;
0239 4C 39 02   DONE   JMP     *         FINISHED -- RESULT HAS ANSWER
                ;
023C 00 00      ATMP   .DBYTE  0
023E 00         BTMP   .BYTE   0
                ;
023F 00         AAA    .BYTE   0
0240 00         BBB    .BYTE   0
0241 00 00      RESULT .DBYTE  0
                ;
                        .END


                       SYMBOL TABLE
 
AAA     023F    ATMP    023C    BBB     0240    BTMP    023E    
DONE    0239    M1      0217    M2      0230    MULT    0200    
RESULT  0241    
                                                               Page 20


-TYPE CA6500.OBJ ____ __________

;180200A9008D41028D42028D3C02AD3F028D3D02AD40028D3E024E06F3
;1802183E0208901318AD42026D3D028D4202AD41026D3C028D4102060E
;1302300E3D022E3C0228D0DE4C390200000000000000035B
;00



                 THE BOSTON SYSTEMS OFFICE, INC.
                  PROBLEM AND SUGGESTION REPORT


If you have any difficulty with BSO software,  if  you  note  any
errors  in  this  manual, or if you have any general suggestions,
please feel free to call us, or  mail  in  this  form  with  your
comments.



Product:                                       Version:
-----------------------------------------------------------------
Reported by:                                   Date:
-----------------------------------------------------------------
Company:                                       Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------
Host computer/operating system:
-----------------------------------------------------------------

Description of bug or comments:
-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------

-----------------------------------------------------------------


           Please return, along with terminal sessions
                 and listings, if available, to:

                 The Boston Systems Office, Inc.
                        469 Moody Street
                  Waltham, Massachusetts  02154
                         (617) 894-7800



                    DO YOU LIKE THIS MANUAL??



BSO  is  constantly  working  to  improve  the  quality  of   our
documentation.   If  you have any constructive comments regarding
this or any BSO publication, we would appreciate it if you  would
take  a few moments to jot them down in the space below, and then
mail the form to us at 469 Moody Street,  Waltham,  Massachusetts
02154.  Our customers' comments are always appreciated!

Title of document:
-----------------------------------------------------------------
Date of document revision:
-----------------------------------------------------------------
Your name:                                  Today's date:
-----------------------------------------------------------------
Company:                                    Phone:
-----------------------------------------------------------------
Address:
-----------------------------------------------------------------

Please rate this manual in the following categories with a number
between 0 (worst) and 5 (best):

Overall Readability: _________

Organization:        _________

Accuracy:            _________


Please  write  any  general  comments below.  If you require more
space, feel free to attach as many additional pages as you  wish.
Thanks for your help!
     [,