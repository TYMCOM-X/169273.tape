# SIMPL, Version 23.01

1. Fixes bug in literal pool addressing for Interdata/Engine object.

2. Fixes bug in division code for Interdata/Engine.

3. Fixes problem that caused ILL INST when compiling certain
   types of FOR statements.

# SIMPL, Version 23.00

1. Added T switch which causes the JRST around TABLE data to be omitted.
   This allows several TABLEs to be contiguous in core.

2. Fixed various obscure bugs encountered during the implementation of 3.

3. Added I switch which causes SIMPL to generate .NAD assembly
   code files. A switch causes generation of .MAC files. The default
   object is still .REL files.



                 Using SIMPL to Generate NAD Assembly Code
                 _____ _____ __ ________ ___ ________ ____


          The entire SIMPL syntax is implemented for NAD with the exception
          of TTY and BOFF/BON (which aren't documented anyway).  

          To cause SIMPL to generate a .NAD file rather than .REL,  include
          (,I) after the file name in the compile command.  Example:

               COMPILE MYPROG= MYDEFS+MYPROG(T,I)

          The NAD output contains an MO directive to create a  module  with
          the  name  of the program (MYPROG in the example case).  All code
          is generated into Segment 1, and data into Segment 2.

          Created labels all have a dot  (with  the  exception  of  locals,
          discussed below) to distinguish them from user identifiers, which
          are carried through into NAD (although dots may  appear  in  user
          identifiers in SIMPL, they are ignored).  Thus, debugging is made
          easier  because  the   NAD   code   contains   the   programmer's
          identifiers.   However,  since  NAD  identifiers are only up to 6
          characters, all user identifiers should be unique in the first  6
          characters.  All source lines from the SIMPL file are included as
          comments in the NAD file.

          Because the SIMPL language has name scoping, local variables  may
          have the same name as other identifiers in the program.  For this
          reason,  they  are  made  unique  by  prefixing   them   with   a
          two-character  sequence unique to the procedure the identifier is
          local to.  For the first 26 procedures the prefix consists  of  a
          letter  followed  by  a  dot.  Then digits are used as the second
          character.  Therefore, local  identifiers  should  be  unique  in
          their  first four characters, and identifiers in the Main program
          should not have a digit as the second character.

          SIMPL generates RX3 type instructions when referencing variables;
          a NAD module compiled by SIMPL may reside anywhere in core.

          Although  the  Tymnet  Engine  only  supports  positive   integer
          division,  the SIMPL compiler generates code that will divide two
          integers  regardless  of   sign.    The   remainder   is   always
          non-negative.

# SIMPL, Version 22.00

1. Symbols put out to cref files are no longer truncated to six characters.


# SIMPL, Version 21.00

1. Code generated by the FOR statement has been revised to work properly
   under the /P environment.  SIMPL 20 generated PUSHJ and POPJ sequences
   for subroutines generated by the FOR statement.  This worked unless
   a branch was done out of or into a LOOPed FOR statement, in which
   case unpredictable but always fatal results occured.

   The for statement now always generates JSP 0, to call a FOR procedure
   and saves the pc from register 0.

# SIMPL, VERSION 20.00

0. Spurious "END" statements are now detected and an error message
   is issued instead of SIMPL giving 3 improper error diagnostics and
   hanging up.

1. The SIMPL command scanning routines have been rewritten and
   will no longer produce funny/incorrect error diagnostics.

2. The processor switch convention is now recognized by the
   SIMPL command scanner.  This is standard for RPG processor
   switches.  The internal form of this is:

        (<processor switches>)   IE,   (CP)

   Where: <processor switches> is any number of "/" switches that
   SIMPL recognizes.  So, (CP) is equivalent to /C/P.  Note that the
   switches (either "/" or processor) are equivalent in function
   and differ only in the format entered.  Valid positions of the
   switch specifications in the command string remains the same.

   To invoke the processor switch convention in RPG-type commands,
   simply append "(<switches>)" to all files in the command string.
   For example,    -COMPILE SIMPAF(P)+<ALPHA,BETA>,SIMDEF(P)
   specifies the "/P" (processor interface) switch, and is equivalent
   to the following SIMPL command string:

        ALPHA.REL_SIMPAF.SIM/P,ALPHA.SIM/P
        BETA.REL_SIMPAF.SIM/P,BETA.SIM/P
        SIMDEF.REL_SIMDEF.SIM/P

3. SIMPL now follows "standard" conventions for scanning the
   input and/or output file specifications.  SIMPL will no longer write
   a ".REL" file when no output file specification is given.  SIMPL
   will now properly write a ".LST" (vs ".CRF") file when "/C" is not
   specified but a listing file is specified.  Note that "/C" by itself will
   automatically cause a ".CRF" file to be written.

4. A fall-through 'RETURN' is now always generated at the end of a
   procedure to assure no fall-throughs.

5. SIMPL has a new set of CREF logic.  Information fed to CREF is now
   more correct and supplies better information for debugging programs.
   The CREF heading has a new format, which is as follows:

        title    SIMPL v1.v2     Date   Time   Page n
        file    Created: CDate Ctime

   Where:

        title = The main block name (or TITLE) of this program
        v1,v2 = The current version #s of SIMPL
        Date,Time = The current Date and Time
        Page n = The current page number (physical) of the CREF listing
        file = At the start of the page being output, this is the name
                of the file that was open for input
        CDate,CTime = Creation date and time of "file"

6. The meaning of the FIND statement has been changed.  If an item is
   referenced in a FIND statement but never referenced by any other
   program statement, the FIND is a no-op.  This is to facilitate
   SIMPL libraries.  In the past, even if a found item was never referenced
   the external reference was still output.

7. Fixes a code generator bug dealing with FOR statements under
   the /P environment


# SIMPL, Version 17.00

1. SIMPL is no longer saved with a ".LOW" file

2. SIMPL now has the ability to generate PUSHJ/POPJ sequences
   for procedure calls instead of the JSP/JRST @ sequence.
   This is invoked via the new processor switch /P.
   Once /P is set, it will remain in effect until the end of the
   compilation.

   When "/P" is specified, the following changes will occur:

   . Procedure calls will load arguments as usual (Argument 1 in
     register 1, argument 2 in register 2, etc) but will generate
     a "PUSHJ 17,<sub>" instead of a "JSP 17,<sub>"

   . The beginnings of procedures will no longer generate the
     "MOVEM 17,<retsav>" to save the return location, nor will the
     scratch location be generated for the location to be saved in.

   . A procedure will return by a "POPJ 17," instead of a
     "JRST @<retsav>"

   . When 'RETURN' is used as a variable, a dummy array reference will
     be generated stating "The base of the array is at 0 and the index
     is in register 17"; the net effect being "0(17)" will be generated
     instead of "<retloc>"

   . The FOR statement sometimes generates a procedure call to process
     complex FOR statements.  PUSHJ/POPJ will be used instead of JSP/JRST @

   SIMPL will NOT set up the initial stack pointer in register 17;
   therefore, a SIMPL program must put a stack pointer into 17 before
   doing any procedure calls or FOR statements.  This is best
   accomplished as follows:

        ^OCT 17 _ (-length SHL 18) BOR @stack

   For example, if the stack is defined as

        LOCAL PDP(0:60)

   The following will load register 17 with the proper stack pointer:

        ^OCT 17 _ (-60 SHL 18) BOR PDP

   (The left half of the stack pointer is the NEGATIVE length of the
    stack, the right half is the address of where the stack is)

3. SIMPL no longer restricts redefining of macros.  Macros may be
   redefined within any level.

# SIMPL, Version 16.02

1. Two new processor switches have been added to control cross reference
   listings, /X and /L.  /X after a file name causes that and all following
   files not to be output to the listing file (if being generated).  It
   will stay in effect until the end of the compilation or /L is seen.
   /L cancels any previous /X and resumes output of data to the listing
   file.

2. SIMPL now recognizes identifiers in lower case properly.  Identifiers
   may contain lower case, which will be interpreted as upper case.

# SIMPL, Version 16.01

1. SIMPL now puts MACRO use and definition information in both the
   Symbol cross reference and Macro/Opdef cross reference.  This is to
   further aid in SIMPL debugging (may you live so long)..

# SIMPL, Version 16.00

1. SIMPL now outputs correct CREF information about MACRO usage.  Before,
   MACRO usage would be included with the Symbol cross reference.  Now,
   CREF will generate a separate Macro/Opdef cross reference.

2. The program TITLE is now supplied to CREF, and this title will be
   printed at the top of every page of a CREF cross reference table.

# SIMPL, VERSION 15.00

1. THE FULL WORD CONSTANT TABLE HAS BEEN INCREASED IN SIZE FROM
   A MAXIMUM OF 30 TO A MAXIMUM OF 100 FULL WORD CONSTANTS.

2. THE ERROR MESSAGE FOR A OVERFLOW OF THE FULL WORD CONSTANT TABLE
   HAS BEEN CHANGED FROM 'KON OFL' TO 'FULL WORD CONSTANT TABLE
   OVERFLOW'.

3. ON A /CREF OUTPUT FROM SIMPL, THE HEADING HAS BEEN CHANGED.

   OLD FORMAT:
   FILE - SIMPL VERS 2.00  DD-MMM YYYY HH:MM

   NEW FORMAT:
   FILE - SIMPL version LHVER.RHVER  day-mon-year hh:mm page 1

   ESSENTIALLY, THE VERSION NUMBER OF SIMPL IS NOW PUT IN INSTEAD
   OF ALWAYS OUTPUTTING '2.00' AND THE DATE AND TIME ARE NOW IN
   STANDARD FORMAT.  ALSO, THE PAGE NUMBER IS GIVEN.

4. ERROR MESSAGE OUTPUT HAS BEEN IMPROVED GREATLY!  A NEW FORMAT
   IS NOW IN USE.  AN ERROR MESSAGE IS NOW FOLLOWED BY THE LINE NUMBER
   AND (POSSIBLY) THE SOURCE FILE WHICH WAS BEING COMPILED AT THE TIME
   THE ERROR OCCURED.  THE FILE NAME IS PUT OUT ON THE FIRST ERROR
   FOR THAT PARTICULAR FILE.  IT IS NOT OUTPUT AGAIN UNLESS AN ERROR
   OCCURS THAT IS IN ANOTHER FILE (IE,  -COMPILE F1+F2+F3+...).
   IF THE SOURCE LINE IS THEN PRINTED (DEPENDING ON TYPE OF ERROR),
   INSTEAD OF PRINTING "<<<" AT THE POINT OF THE ERROR, SIMPL WILL
   NOW SPACE OVER AND PRINT A "^" CHARACTER AT THE POINT OF THE ERROR.

   NOTE: IF THERE ARE ANY UNDEFINED REFERENCES AT THE END OF A
   COMPILATION (IE, A LOCAL OR GLOBAL PROCEDURE DECLARATION WITHOUT
   A FOLLOWING PROCEDURE DEFINITION, ETC) THE LINE NUMBER OF THE
   RESPECTIVE LOCAL OR GLOBAL IS PRINTED; HOWEVER, THE FILE NAME
   PRINTED WILL ALWAYS BE THE LAST FILE COMPILED.

5. THE BUG WHERE SIMPL RAN LOADER WITH NO STARTING INCREMENT (WHEN
   RPG TMP FILE WAS FROM DISK) HAS BEEN FIXED.

6. ERROR RECOVERY HAS BEEN GREATLY IMPROVED. SIMPL NOW TRIES TO PARSE
   THE REST OF A LINE PAST AN ERROR INSTEAD OF GIVING UP.  IN MOST
   CASES THIS WILL RESULT IN SUCH STATEMENTS AS:

        IF UNDEFINED=-1 THEN DO
        END

   NOT TO GENERATE AN 'ILLEGAL END' BECAUSE THEN 'THEN DO' WAS IGNORED.
   NOTE THAT IN SOME CASES MORE THAN ONE ERROR MESSAGE WILL BE
   GIVEN FOR THE SAME ERROR, IE:

        UNDEFINED(UNDEFINED)

   WILL PRODUCE THE FOLLOWING ERROR MESSAGES:

        UNDEFINED: UNDEFINED
        NOT A PROCEDURE: UNDEFINED
        CAN NOT BE SUBSCRIPTED: UNDEFINED

7. THERE HAS ALWAYS BEEN SOME CLASS OF ERRORS KNOWN AS 'FATAL'
   ERRORS.  TO THIS DAY A FATAL ERROR WAS NOT FLAGGED AS FATAL
   AND A FATAL ERROR STOPPED ALL COMPILATIONS, IE SIMPL RETURNED
   TO THE EXEC AND GAVE UP WITHOUT A SOUND.  NOW FATAL ERRORS 
   CAUSE SIMPL TO TERMINATE COMPILATION OF THE CURRENT FILE BUT
   PROCEED WITH ANY OTHER COMPILATIONS WAITING.

8. OUTPUT TO A /CREF FILE NOW INCLUDES THE ERROR MESSAGES
   GENERATED DURING THE COMPILATION.

9. /CREF OUTPUT NOW INCLUDES PAGINATION (IE, SIMPL NOW PUTS OUT A
   HEADING JUST LIKE MACRO BLISS ETC).  IT ALSO HANDLES FORM FEEDS
   DURING A LISTING PROPERLY.

10. SIMPL NOW KNOWS HOW TO PROPERLY NAME A LISTING FILE.
   IF A LISTING FILE IS REQUESTED WITH NO "/C" (/CREF) SWITCH,
   THE ASSUMED EXTENSION WILL BE "LST"
   IF A LISTING FILE IS REQUESTED WITH "/C" SWITCH, THE ASSUMED
   EXTENSION WILL BE "CRF"
    